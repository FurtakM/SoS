// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
   0: LD_VAR 0 1
   4: PPUSH
   5: LD_VAR 0 2
   9: PPUSH
  10: CALL 14473 0 2
// end ; end_of_file
  14: PPOPN 2
  16: END
// every 0 0$1 do
  17: GO 19
  19: DISABLE
// begin enable ;
  20: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
  21: LD_STRING updateTimer(
  23: PUSH
  24: LD_OWVAR 1
  28: STR
  29: PUSH
  30: LD_STRING );
  32: STR
  33: PPUSH
  34: CALL_OW 559
// end ;
  38: END
// export function SOS_MapStart ( ) ; begin
  39: LD_INT 0
  41: PPUSH
// if streamModeActive then
  42: LD_EXP 1
  46: IFFALSE 55
// DefineStreamItems ( true ) ;
  48: LD_INT 1
  50: PPUSH
  51: CALL 1705 0 1
// UpdateFactoryWaypoints ( ) ;
  55: CALL 15289 0 0
// end ;
  59: LD_VAR 0 1
  63: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
  64: LD_INT 0
  66: PPUSH
// if p2 = 100 then
  67: LD_VAR 0 2
  71: PUSH
  72: LD_INT 100
  74: EQUAL
  75: IFFALSE 1078
// begin if not StreamModeActive then
  77: LD_EXP 1
  81: NOT
  82: IFFALSE 92
// StreamModeActive := true ;
  84: LD_ADDR_EXP 1
  88: PUSH
  89: LD_INT 1
  91: ST_TO_ADDR
// if p3 = 0 then
  92: LD_VAR 0 3
  96: PUSH
  97: LD_INT 0
  99: EQUAL
 100: IFFALSE 106
// InitStreamMode ;
 102: CALL 1241 0 0
// if p3 = 1 then
 106: LD_VAR 0 3
 110: PUSH
 111: LD_INT 1
 113: EQUAL
 114: IFFALSE 124
// sRocket := true ;
 116: LD_ADDR_EXP 6
 120: PUSH
 121: LD_INT 1
 123: ST_TO_ADDR
// if p3 = 2 then
 124: LD_VAR 0 3
 128: PUSH
 129: LD_INT 2
 131: EQUAL
 132: IFFALSE 142
// sSpeed := true ;
 134: LD_ADDR_EXP 5
 138: PUSH
 139: LD_INT 1
 141: ST_TO_ADDR
// if p3 = 3 then
 142: LD_VAR 0 3
 146: PUSH
 147: LD_INT 3
 149: EQUAL
 150: IFFALSE 160
// sEngine := true ;
 152: LD_ADDR_EXP 7
 156: PUSH
 157: LD_INT 1
 159: ST_TO_ADDR
// if p3 = 4 then
 160: LD_VAR 0 3
 164: PUSH
 165: LD_INT 4
 167: EQUAL
 168: IFFALSE 178
// sSpec := true ;
 170: LD_ADDR_EXP 4
 174: PUSH
 175: LD_INT 1
 177: ST_TO_ADDR
// if p3 = 5 then
 178: LD_VAR 0 3
 182: PUSH
 183: LD_INT 5
 185: EQUAL
 186: IFFALSE 196
// sLevel := true ;
 188: LD_ADDR_EXP 8
 192: PUSH
 193: LD_INT 1
 195: ST_TO_ADDR
// if p3 = 6 then
 196: LD_VAR 0 3
 200: PUSH
 201: LD_INT 6
 203: EQUAL
 204: IFFALSE 214
// sArmoury := true ;
 206: LD_ADDR_EXP 9
 210: PUSH
 211: LD_INT 1
 213: ST_TO_ADDR
// if p3 = 7 then
 214: LD_VAR 0 3
 218: PUSH
 219: LD_INT 7
 221: EQUAL
 222: IFFALSE 232
// sRadar := true ;
 224: LD_ADDR_EXP 10
 228: PUSH
 229: LD_INT 1
 231: ST_TO_ADDR
// if p3 = 8 then
 232: LD_VAR 0 3
 236: PUSH
 237: LD_INT 8
 239: EQUAL
 240: IFFALSE 250
// sBunker := true ;
 242: LD_ADDR_EXP 11
 246: PUSH
 247: LD_INT 1
 249: ST_TO_ADDR
// if p3 = 9 then
 250: LD_VAR 0 3
 254: PUSH
 255: LD_INT 9
 257: EQUAL
 258: IFFALSE 268
// sHack := true ;
 260: LD_ADDR_EXP 12
 264: PUSH
 265: LD_INT 1
 267: ST_TO_ADDR
// if p3 = 10 then
 268: LD_VAR 0 3
 272: PUSH
 273: LD_INT 10
 275: EQUAL
 276: IFFALSE 286
// sFire := true ;
 278: LD_ADDR_EXP 13
 282: PUSH
 283: LD_INT 1
 285: ST_TO_ADDR
// if p3 = 11 then
 286: LD_VAR 0 3
 290: PUSH
 291: LD_INT 11
 293: EQUAL
 294: IFFALSE 304
// sRefresh := true ;
 296: LD_ADDR_EXP 14
 300: PUSH
 301: LD_INT 1
 303: ST_TO_ADDR
// if p3 = 12 then
 304: LD_VAR 0 3
 308: PUSH
 309: LD_INT 12
 311: EQUAL
 312: IFFALSE 322
// sExp := true ;
 314: LD_ADDR_EXP 15
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// if p3 = 13 then
 322: LD_VAR 0 3
 326: PUSH
 327: LD_INT 13
 329: EQUAL
 330: IFFALSE 340
// sDepot := true ;
 332: LD_ADDR_EXP 16
 336: PUSH
 337: LD_INT 1
 339: ST_TO_ADDR
// if p3 = 14 then
 340: LD_VAR 0 3
 344: PUSH
 345: LD_INT 14
 347: EQUAL
 348: IFFALSE 358
// sFlag := true ;
 350: LD_ADDR_EXP 17
 354: PUSH
 355: LD_INT 1
 357: ST_TO_ADDR
// if p3 = 15 then
 358: LD_VAR 0 3
 362: PUSH
 363: LD_INT 15
 365: EQUAL
 366: IFFALSE 376
// sKamikadze := true ;
 368: LD_ADDR_EXP 25
 372: PUSH
 373: LD_INT 1
 375: ST_TO_ADDR
// if p3 = 16 then
 376: LD_VAR 0 3
 380: PUSH
 381: LD_INT 16
 383: EQUAL
 384: IFFALSE 394
// sTroll := true ;
 386: LD_ADDR_EXP 26
 390: PUSH
 391: LD_INT 1
 393: ST_TO_ADDR
// if p3 = 17 then
 394: LD_VAR 0 3
 398: PUSH
 399: LD_INT 17
 401: EQUAL
 402: IFFALSE 412
// sSlow := true ;
 404: LD_ADDR_EXP 27
 408: PUSH
 409: LD_INT 1
 411: ST_TO_ADDR
// if p3 = 18 then
 412: LD_VAR 0 3
 416: PUSH
 417: LD_INT 18
 419: EQUAL
 420: IFFALSE 430
// sLack := true ;
 422: LD_ADDR_EXP 28
 426: PUSH
 427: LD_INT 1
 429: ST_TO_ADDR
// if p3 = 19 then
 430: LD_VAR 0 3
 434: PUSH
 435: LD_INT 19
 437: EQUAL
 438: IFFALSE 448
// sTank := true ;
 440: LD_ADDR_EXP 30
 444: PUSH
 445: LD_INT 1
 447: ST_TO_ADDR
// if p3 = 20 then
 448: LD_VAR 0 3
 452: PUSH
 453: LD_INT 20
 455: EQUAL
 456: IFFALSE 466
// sRemote := true ;
 458: LD_ADDR_EXP 31
 462: PUSH
 463: LD_INT 1
 465: ST_TO_ADDR
// if p3 = 21 then
 466: LD_VAR 0 3
 470: PUSH
 471: LD_INT 21
 473: EQUAL
 474: IFFALSE 484
// sPowell := true ;
 476: LD_ADDR_EXP 32
 480: PUSH
 481: LD_INT 1
 483: ST_TO_ADDR
// if p3 = 22 then
 484: LD_VAR 0 3
 488: PUSH
 489: LD_INT 22
 491: EQUAL
 492: IFFALSE 502
// sTeleport := true ;
 494: LD_ADDR_EXP 35
 498: PUSH
 499: LD_INT 1
 501: ST_TO_ADDR
// if p3 = 23 then
 502: LD_VAR 0 3
 506: PUSH
 507: LD_INT 23
 509: EQUAL
 510: IFFALSE 520
// sOilTower := true ;
 512: LD_ADDR_EXP 37
 516: PUSH
 517: LD_INT 1
 519: ST_TO_ADDR
// if p3 = 24 then
 520: LD_VAR 0 3
 524: PUSH
 525: LD_INT 24
 527: EQUAL
 528: IFFALSE 538
// sShovel := true ;
 530: LD_ADDR_EXP 38
 534: PUSH
 535: LD_INT 1
 537: ST_TO_ADDR
// if p3 = 25 then
 538: LD_VAR 0 3
 542: PUSH
 543: LD_INT 25
 545: EQUAL
 546: IFFALSE 556
// sSheik := true ;
 548: LD_ADDR_EXP 39
 552: PUSH
 553: LD_INT 1
 555: ST_TO_ADDR
// if p3 = 26 then
 556: LD_VAR 0 3
 560: PUSH
 561: LD_INT 26
 563: EQUAL
 564: IFFALSE 574
// sEarthquake := true ;
 566: LD_ADDR_EXP 41
 570: PUSH
 571: LD_INT 1
 573: ST_TO_ADDR
// if p3 = 27 then
 574: LD_VAR 0 3
 578: PUSH
 579: LD_INT 27
 581: EQUAL
 582: IFFALSE 592
// sAI := true ;
 584: LD_ADDR_EXP 42
 588: PUSH
 589: LD_INT 1
 591: ST_TO_ADDR
// if p3 = 28 then
 592: LD_VAR 0 3
 596: PUSH
 597: LD_INT 28
 599: EQUAL
 600: IFFALSE 610
// sCargo := true ;
 602: LD_ADDR_EXP 45
 606: PUSH
 607: LD_INT 1
 609: ST_TO_ADDR
// if p3 = 29 then
 610: LD_VAR 0 3
 614: PUSH
 615: LD_INT 29
 617: EQUAL
 618: IFFALSE 628
// sDLaser := true ;
 620: LD_ADDR_EXP 46
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// if p3 = 30 then
 628: LD_VAR 0 3
 632: PUSH
 633: LD_INT 30
 635: EQUAL
 636: IFFALSE 646
// sExchange := true ;
 638: LD_ADDR_EXP 47
 642: PUSH
 643: LD_INT 1
 645: ST_TO_ADDR
// if p3 = 31 then
 646: LD_VAR 0 3
 650: PUSH
 651: LD_INT 31
 653: EQUAL
 654: IFFALSE 664
// sFac := true ;
 656: LD_ADDR_EXP 48
 660: PUSH
 661: LD_INT 1
 663: ST_TO_ADDR
// if p3 = 32 then
 664: LD_VAR 0 3
 668: PUSH
 669: LD_INT 32
 671: EQUAL
 672: IFFALSE 682
// sPower := true ;
 674: LD_ADDR_EXP 49
 678: PUSH
 679: LD_INT 1
 681: ST_TO_ADDR
// if p3 = 33 then
 682: LD_VAR 0 3
 686: PUSH
 687: LD_INT 33
 689: EQUAL
 690: IFFALSE 700
// sRandom := true ;
 692: LD_ADDR_EXP 50
 696: PUSH
 697: LD_INT 1
 699: ST_TO_ADDR
// if p3 = 34 then
 700: LD_VAR 0 3
 704: PUSH
 705: LD_INT 34
 707: EQUAL
 708: IFFALSE 718
// sShield := true ;
 710: LD_ADDR_EXP 51
 714: PUSH
 715: LD_INT 1
 717: ST_TO_ADDR
// if p3 = 35 then
 718: LD_VAR 0 3
 722: PUSH
 723: LD_INT 35
 725: EQUAL
 726: IFFALSE 736
// sTime := true ;
 728: LD_ADDR_EXP 52
 732: PUSH
 733: LD_INT 1
 735: ST_TO_ADDR
// if p3 = 36 then
 736: LD_VAR 0 3
 740: PUSH
 741: LD_INT 36
 743: EQUAL
 744: IFFALSE 754
// sTools := true ;
 746: LD_ADDR_EXP 53
 750: PUSH
 751: LD_INT 1
 753: ST_TO_ADDR
// if p3 = 101 then
 754: LD_VAR 0 3
 758: PUSH
 759: LD_INT 101
 761: EQUAL
 762: IFFALSE 772
// sSold := true ;
 764: LD_ADDR_EXP 18
 768: PUSH
 769: LD_INT 1
 771: ST_TO_ADDR
// if p3 = 102 then
 772: LD_VAR 0 3
 776: PUSH
 777: LD_INT 102
 779: EQUAL
 780: IFFALSE 790
// sDiff := true ;
 782: LD_ADDR_EXP 19
 786: PUSH
 787: LD_INT 1
 789: ST_TO_ADDR
// if p3 = 103 then
 790: LD_VAR 0 3
 794: PUSH
 795: LD_INT 103
 797: EQUAL
 798: IFFALSE 808
// sFog := true ;
 800: LD_ADDR_EXP 22
 804: PUSH
 805: LD_INT 1
 807: ST_TO_ADDR
// if p3 = 104 then
 808: LD_VAR 0 3
 812: PUSH
 813: LD_INT 104
 815: EQUAL
 816: IFFALSE 826
// sReset := true ;
 818: LD_ADDR_EXP 23
 822: PUSH
 823: LD_INT 1
 825: ST_TO_ADDR
// if p3 = 105 then
 826: LD_VAR 0 3
 830: PUSH
 831: LD_INT 105
 833: EQUAL
 834: IFFALSE 844
// sSun := true ;
 836: LD_ADDR_EXP 24
 840: PUSH
 841: LD_INT 1
 843: ST_TO_ADDR
// if p3 = 106 then
 844: LD_VAR 0 3
 848: PUSH
 849: LD_INT 106
 851: EQUAL
 852: IFFALSE 862
// sTiger := true ;
 854: LD_ADDR_EXP 20
 858: PUSH
 859: LD_INT 1
 861: ST_TO_ADDR
// if p3 = 107 then
 862: LD_VAR 0 3
 866: PUSH
 867: LD_INT 107
 869: EQUAL
 870: IFFALSE 880
// sBomb := true ;
 872: LD_ADDR_EXP 21
 876: PUSH
 877: LD_INT 1
 879: ST_TO_ADDR
// if p3 = 108 then
 880: LD_VAR 0 3
 884: PUSH
 885: LD_INT 108
 887: EQUAL
 888: IFFALSE 898
// sWound := true ;
 890: LD_ADDR_EXP 29
 894: PUSH
 895: LD_INT 1
 897: ST_TO_ADDR
// if p3 = 109 then
 898: LD_VAR 0 3
 902: PUSH
 903: LD_INT 109
 905: EQUAL
 906: IFFALSE 916
// sBetray := true ;
 908: LD_ADDR_EXP 33
 912: PUSH
 913: LD_INT 1
 915: ST_TO_ADDR
// if p3 = 110 then
 916: LD_VAR 0 3
 920: PUSH
 921: LD_INT 110
 923: EQUAL
 924: IFFALSE 934
// sContamin := true ;
 926: LD_ADDR_EXP 34
 930: PUSH
 931: LD_INT 1
 933: ST_TO_ADDR
// if p3 = 111 then
 934: LD_VAR 0 3
 938: PUSH
 939: LD_INT 111
 941: EQUAL
 942: IFFALSE 952
// sOil := true ;
 944: LD_ADDR_EXP 36
 948: PUSH
 949: LD_INT 1
 951: ST_TO_ADDR
// if p3 = 112 then
 952: LD_VAR 0 3
 956: PUSH
 957: LD_INT 112
 959: EQUAL
 960: IFFALSE 970
// sStu := true ;
 962: LD_ADDR_EXP 40
 966: PUSH
 967: LD_INT 1
 969: ST_TO_ADDR
// if p3 = 113 then
 970: LD_VAR 0 3
 974: PUSH
 975: LD_INT 113
 977: EQUAL
 978: IFFALSE 988
// sBazooka := true ;
 980: LD_ADDR_EXP 43
 984: PUSH
 985: LD_INT 1
 987: ST_TO_ADDR
// if p3 = 114 then
 988: LD_VAR 0 3
 992: PUSH
 993: LD_INT 114
 995: EQUAL
 996: IFFALSE 1006
// sMortar := true ;
 998: LD_ADDR_EXP 44
1002: PUSH
1003: LD_INT 1
1005: ST_TO_ADDR
// if p3 = 115 then
1006: LD_VAR 0 3
1010: PUSH
1011: LD_INT 115
1013: EQUAL
1014: IFFALSE 1024
// sRanger := true ;
1016: LD_ADDR_EXP 54
1020: PUSH
1021: LD_INT 1
1023: ST_TO_ADDR
// if p3 = 116 then
1024: LD_VAR 0 3
1028: PUSH
1029: LD_INT 116
1031: EQUAL
1032: IFFALSE 1042
// sComputer := true ;
1034: LD_ADDR_EXP 55
1038: PUSH
1039: LD_INT 1
1041: ST_TO_ADDR
// if p3 = 117 then
1042: LD_VAR 0 3
1046: PUSH
1047: LD_INT 117
1049: EQUAL
1050: IFFALSE 1060
// s30 := true ;
1052: LD_ADDR_EXP 56
1056: PUSH
1057: LD_INT 1
1059: ST_TO_ADDR
// if p3 = 118 then
1060: LD_VAR 0 3
1064: PUSH
1065: LD_INT 118
1067: EQUAL
1068: IFFALSE 1078
// s60 := true ;
1070: LD_ADDR_EXP 57
1074: PUSH
1075: LD_INT 1
1077: ST_TO_ADDR
// end ; if p2 = 101 then
1078: LD_VAR 0 2
1082: PUSH
1083: LD_INT 101
1085: EQUAL
1086: IFFALSE 1214
// begin case p3 of 1 :
1088: LD_VAR 0 3
1092: PUSH
1093: LD_INT 1
1095: DOUBLE
1096: EQUAL
1097: IFTRUE 1101
1099: GO 1108
1101: POP
// hHackUnlimitedResources ; 2 :
1102: CALL 13312 0 0
1106: GO 1214
1108: LD_INT 2
1110: DOUBLE
1111: EQUAL
1112: IFTRUE 1116
1114: GO 1123
1116: POP
// hHackSetLevel10 ; 3 :
1117: CALL 13445 0 0
1121: GO 1214
1123: LD_INT 3
1125: DOUBLE
1126: EQUAL
1127: IFTRUE 1131
1129: GO 1138
1131: POP
// hHackSetLevel10YourUnits ; 4 :
1132: CALL 13530 0 0
1136: GO 1214
1138: LD_INT 4
1140: DOUBLE
1141: EQUAL
1142: IFTRUE 1146
1144: GO 1153
1146: POP
// hHackInvincible ; 5 :
1147: CALL 13978 0 0
1151: GO 1214
1153: LD_INT 5
1155: DOUBLE
1156: EQUAL
1157: IFTRUE 1161
1159: GO 1168
1161: POP
// hHackInvisible ; 6 :
1162: CALL 14089 0 0
1166: GO 1214
1168: LD_INT 6
1170: DOUBLE
1171: EQUAL
1172: IFTRUE 1176
1174: GO 1183
1176: POP
// hHackChangeYourSide ; 7 :
1177: CALL 14146 0 0
1181: GO 1214
1183: LD_INT 7
1185: DOUBLE
1186: EQUAL
1187: IFTRUE 1191
1189: GO 1198
1191: POP
// hHackChangeUnitSide ; 8 :
1192: CALL 14188 0 0
1196: GO 1214
1198: LD_INT 8
1200: DOUBLE
1201: EQUAL
1202: IFTRUE 1206
1204: GO 1213
1206: POP
// hHackFog ; end ;
1207: CALL 14289 0 0
1211: GO 1214
1213: POP
// end ; end ;
1214: LD_VAR 0 7
1218: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
1219: GO 1221
1221: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
1222: LD_STRING initStreamRollete();
1224: PPUSH
1225: CALL_OW 559
// InitStreamMode ;
1229: CALL 1241 0 0
// DefineStreamItems ( false ) ;
1233: LD_INT 0
1235: PPUSH
1236: CALL 1705 0 1
// end ;
1240: END
// function InitStreamMode ; begin
1241: LD_INT 0
1243: PPUSH
// streamModeActive := false ;
1244: LD_ADDR_EXP 1
1248: PUSH
1249: LD_INT 0
1251: ST_TO_ADDR
// normalCounter := 36 ;
1252: LD_ADDR_EXP 2
1256: PUSH
1257: LD_INT 36
1259: ST_TO_ADDR
// hardcoreCounter := 18 ;
1260: LD_ADDR_EXP 3
1264: PUSH
1265: LD_INT 18
1267: ST_TO_ADDR
// sRocket := false ;
1268: LD_ADDR_EXP 6
1272: PUSH
1273: LD_INT 0
1275: ST_TO_ADDR
// sSpeed := false ;
1276: LD_ADDR_EXP 5
1280: PUSH
1281: LD_INT 0
1283: ST_TO_ADDR
// sEngine := false ;
1284: LD_ADDR_EXP 7
1288: PUSH
1289: LD_INT 0
1291: ST_TO_ADDR
// sSpec := false ;
1292: LD_ADDR_EXP 4
1296: PUSH
1297: LD_INT 0
1299: ST_TO_ADDR
// sLevel := false ;
1300: LD_ADDR_EXP 8
1304: PUSH
1305: LD_INT 0
1307: ST_TO_ADDR
// sArmoury := false ;
1308: LD_ADDR_EXP 9
1312: PUSH
1313: LD_INT 0
1315: ST_TO_ADDR
// sRadar := false ;
1316: LD_ADDR_EXP 10
1320: PUSH
1321: LD_INT 0
1323: ST_TO_ADDR
// sBunker := false ;
1324: LD_ADDR_EXP 11
1328: PUSH
1329: LD_INT 0
1331: ST_TO_ADDR
// sHack := false ;
1332: LD_ADDR_EXP 12
1336: PUSH
1337: LD_INT 0
1339: ST_TO_ADDR
// sFire := false ;
1340: LD_ADDR_EXP 13
1344: PUSH
1345: LD_INT 0
1347: ST_TO_ADDR
// sRefresh := false ;
1348: LD_ADDR_EXP 14
1352: PUSH
1353: LD_INT 0
1355: ST_TO_ADDR
// sExp := false ;
1356: LD_ADDR_EXP 15
1360: PUSH
1361: LD_INT 0
1363: ST_TO_ADDR
// sDepot := false ;
1364: LD_ADDR_EXP 16
1368: PUSH
1369: LD_INT 0
1371: ST_TO_ADDR
// sFlag := false ;
1372: LD_ADDR_EXP 17
1376: PUSH
1377: LD_INT 0
1379: ST_TO_ADDR
// sKamikadze := false ;
1380: LD_ADDR_EXP 25
1384: PUSH
1385: LD_INT 0
1387: ST_TO_ADDR
// sTroll := false ;
1388: LD_ADDR_EXP 26
1392: PUSH
1393: LD_INT 0
1395: ST_TO_ADDR
// sSlow := false ;
1396: LD_ADDR_EXP 27
1400: PUSH
1401: LD_INT 0
1403: ST_TO_ADDR
// sLack := false ;
1404: LD_ADDR_EXP 28
1408: PUSH
1409: LD_INT 0
1411: ST_TO_ADDR
// sTank := false ;
1412: LD_ADDR_EXP 30
1416: PUSH
1417: LD_INT 0
1419: ST_TO_ADDR
// sRemote := false ;
1420: LD_ADDR_EXP 31
1424: PUSH
1425: LD_INT 0
1427: ST_TO_ADDR
// sPowell := false ;
1428: LD_ADDR_EXP 32
1432: PUSH
1433: LD_INT 0
1435: ST_TO_ADDR
// sTeleport := false ;
1436: LD_ADDR_EXP 35
1440: PUSH
1441: LD_INT 0
1443: ST_TO_ADDR
// sOilTower := false ;
1444: LD_ADDR_EXP 37
1448: PUSH
1449: LD_INT 0
1451: ST_TO_ADDR
// sShovel := false ;
1452: LD_ADDR_EXP 38
1456: PUSH
1457: LD_INT 0
1459: ST_TO_ADDR
// sSheik := false ;
1460: LD_ADDR_EXP 39
1464: PUSH
1465: LD_INT 0
1467: ST_TO_ADDR
// sEarthquake := false ;
1468: LD_ADDR_EXP 41
1472: PUSH
1473: LD_INT 0
1475: ST_TO_ADDR
// sAI := false ;
1476: LD_ADDR_EXP 42
1480: PUSH
1481: LD_INT 0
1483: ST_TO_ADDR
// sCargo := false ;
1484: LD_ADDR_EXP 45
1488: PUSH
1489: LD_INT 0
1491: ST_TO_ADDR
// sDLaser := false ;
1492: LD_ADDR_EXP 46
1496: PUSH
1497: LD_INT 0
1499: ST_TO_ADDR
// sExchange := false ;
1500: LD_ADDR_EXP 47
1504: PUSH
1505: LD_INT 0
1507: ST_TO_ADDR
// sFac := false ;
1508: LD_ADDR_EXP 48
1512: PUSH
1513: LD_INT 0
1515: ST_TO_ADDR
// sPower := false ;
1516: LD_ADDR_EXP 49
1520: PUSH
1521: LD_INT 0
1523: ST_TO_ADDR
// sRandom := false ;
1524: LD_ADDR_EXP 50
1528: PUSH
1529: LD_INT 0
1531: ST_TO_ADDR
// sShield := false ;
1532: LD_ADDR_EXP 51
1536: PUSH
1537: LD_INT 0
1539: ST_TO_ADDR
// sTime := false ;
1540: LD_ADDR_EXP 52
1544: PUSH
1545: LD_INT 0
1547: ST_TO_ADDR
// sTools := false ;
1548: LD_ADDR_EXP 53
1552: PUSH
1553: LD_INT 0
1555: ST_TO_ADDR
// sSold := false ;
1556: LD_ADDR_EXP 18
1560: PUSH
1561: LD_INT 0
1563: ST_TO_ADDR
// sDiff := false ;
1564: LD_ADDR_EXP 19
1568: PUSH
1569: LD_INT 0
1571: ST_TO_ADDR
// sFog := false ;
1572: LD_ADDR_EXP 22
1576: PUSH
1577: LD_INT 0
1579: ST_TO_ADDR
// sReset := false ;
1580: LD_ADDR_EXP 23
1584: PUSH
1585: LD_INT 0
1587: ST_TO_ADDR
// sSun := false ;
1588: LD_ADDR_EXP 24
1592: PUSH
1593: LD_INT 0
1595: ST_TO_ADDR
// sTiger := false ;
1596: LD_ADDR_EXP 20
1600: PUSH
1601: LD_INT 0
1603: ST_TO_ADDR
// sBomb := false ;
1604: LD_ADDR_EXP 21
1608: PUSH
1609: LD_INT 0
1611: ST_TO_ADDR
// sWound := false ;
1612: LD_ADDR_EXP 29
1616: PUSH
1617: LD_INT 0
1619: ST_TO_ADDR
// sBetray := false ;
1620: LD_ADDR_EXP 33
1624: PUSH
1625: LD_INT 0
1627: ST_TO_ADDR
// sContamin := false ;
1628: LD_ADDR_EXP 34
1632: PUSH
1633: LD_INT 0
1635: ST_TO_ADDR
// sOil := false ;
1636: LD_ADDR_EXP 36
1640: PUSH
1641: LD_INT 0
1643: ST_TO_ADDR
// sStu := false ;
1644: LD_ADDR_EXP 40
1648: PUSH
1649: LD_INT 0
1651: ST_TO_ADDR
// sBazooka := false ;
1652: LD_ADDR_EXP 43
1656: PUSH
1657: LD_INT 0
1659: ST_TO_ADDR
// sMortar := false ;
1660: LD_ADDR_EXP 44
1664: PUSH
1665: LD_INT 0
1667: ST_TO_ADDR
// sRanger := false ;
1668: LD_ADDR_EXP 54
1672: PUSH
1673: LD_INT 0
1675: ST_TO_ADDR
// sComputer := false ;
1676: LD_ADDR_EXP 55
1680: PUSH
1681: LD_INT 0
1683: ST_TO_ADDR
// s30 := false ;
1684: LD_ADDR_EXP 56
1688: PUSH
1689: LD_INT 0
1691: ST_TO_ADDR
// s60 := false ;
1692: LD_ADDR_EXP 57
1696: PUSH
1697: LD_INT 0
1699: ST_TO_ADDR
// end ;
1700: LD_VAR 0 1
1704: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
1705: LD_INT 0
1707: PPUSH
1708: PPUSH
1709: PPUSH
1710: PPUSH
1711: PPUSH
1712: PPUSH
1713: PPUSH
// result := [ ] ;
1714: LD_ADDR_VAR 0 2
1718: PUSH
1719: EMPTY
1720: ST_TO_ADDR
// if campaign_id = 1 then
1721: LD_OWVAR 69
1725: PUSH
1726: LD_INT 1
1728: EQUAL
1729: IFFALSE 4895
// begin case mission_number of 1 :
1731: LD_OWVAR 70
1735: PUSH
1736: LD_INT 1
1738: DOUBLE
1739: EQUAL
1740: IFTRUE 1744
1742: GO 1820
1744: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
1745: LD_ADDR_VAR 0 2
1749: PUSH
1750: LD_INT 2
1752: PUSH
1753: LD_INT 4
1755: PUSH
1756: LD_INT 11
1758: PUSH
1759: LD_INT 12
1761: PUSH
1762: LD_INT 15
1764: PUSH
1765: LD_INT 16
1767: PUSH
1768: LD_INT 22
1770: PUSH
1771: LD_INT 23
1773: PUSH
1774: LD_INT 26
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: PUSH
1788: LD_INT 101
1790: PUSH
1791: LD_INT 102
1793: PUSH
1794: LD_INT 106
1796: PUSH
1797: LD_INT 116
1799: PUSH
1800: LD_INT 117
1802: PUSH
1803: LD_INT 118
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: ST_TO_ADDR
1818: GO 4893
1820: LD_INT 2
1822: DOUBLE
1823: EQUAL
1824: IFTRUE 1828
1826: GO 1912
1828: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
1829: LD_ADDR_VAR 0 2
1833: PUSH
1834: LD_INT 2
1836: PUSH
1837: LD_INT 4
1839: PUSH
1840: LD_INT 11
1842: PUSH
1843: LD_INT 12
1845: PUSH
1846: LD_INT 15
1848: PUSH
1849: LD_INT 16
1851: PUSH
1852: LD_INT 22
1854: PUSH
1855: LD_INT 23
1857: PUSH
1858: LD_INT 26
1860: PUSH
1861: EMPTY
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: PUSH
1872: LD_INT 101
1874: PUSH
1875: LD_INT 102
1877: PUSH
1878: LD_INT 105
1880: PUSH
1881: LD_INT 106
1883: PUSH
1884: LD_INT 108
1886: PUSH
1887: LD_INT 116
1889: PUSH
1890: LD_INT 117
1892: PUSH
1893: LD_INT 118
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: PUSH
1906: EMPTY
1907: LIST
1908: LIST
1909: ST_TO_ADDR
1910: GO 4893
1912: LD_INT 3
1914: DOUBLE
1915: EQUAL
1916: IFTRUE 1920
1918: GO 2008
1920: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
1921: LD_ADDR_VAR 0 2
1925: PUSH
1926: LD_INT 2
1928: PUSH
1929: LD_INT 4
1931: PUSH
1932: LD_INT 5
1934: PUSH
1935: LD_INT 11
1937: PUSH
1938: LD_INT 12
1940: PUSH
1941: LD_INT 15
1943: PUSH
1944: LD_INT 16
1946: PUSH
1947: LD_INT 22
1949: PUSH
1950: LD_INT 26
1952: PUSH
1953: LD_INT 36
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: PUSH
1968: LD_INT 101
1970: PUSH
1971: LD_INT 102
1973: PUSH
1974: LD_INT 105
1976: PUSH
1977: LD_INT 106
1979: PUSH
1980: LD_INT 108
1982: PUSH
1983: LD_INT 116
1985: PUSH
1986: LD_INT 117
1988: PUSH
1989: LD_INT 118
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: ST_TO_ADDR
2006: GO 4893
2008: LD_INT 4
2010: DOUBLE
2011: EQUAL
2012: IFTRUE 2016
2014: GO 2112
2016: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
2017: LD_ADDR_VAR 0 2
2021: PUSH
2022: LD_INT 2
2024: PUSH
2025: LD_INT 4
2027: PUSH
2028: LD_INT 5
2030: PUSH
2031: LD_INT 8
2033: PUSH
2034: LD_INT 11
2036: PUSH
2037: LD_INT 12
2039: PUSH
2040: LD_INT 15
2042: PUSH
2043: LD_INT 16
2045: PUSH
2046: LD_INT 22
2048: PUSH
2049: LD_INT 23
2051: PUSH
2052: LD_INT 26
2054: PUSH
2055: LD_INT 36
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: PUSH
2072: LD_INT 101
2074: PUSH
2075: LD_INT 102
2077: PUSH
2078: LD_INT 105
2080: PUSH
2081: LD_INT 106
2083: PUSH
2084: LD_INT 108
2086: PUSH
2087: LD_INT 116
2089: PUSH
2090: LD_INT 117
2092: PUSH
2093: LD_INT 118
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: ST_TO_ADDR
2110: GO 4893
2112: LD_INT 5
2114: DOUBLE
2115: EQUAL
2116: IFTRUE 2120
2118: GO 2232
2120: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
2121: LD_ADDR_VAR 0 2
2125: PUSH
2126: LD_INT 2
2128: PUSH
2129: LD_INT 4
2131: PUSH
2132: LD_INT 5
2134: PUSH
2135: LD_INT 6
2137: PUSH
2138: LD_INT 8
2140: PUSH
2141: LD_INT 11
2143: PUSH
2144: LD_INT 12
2146: PUSH
2147: LD_INT 15
2149: PUSH
2150: LD_INT 16
2152: PUSH
2153: LD_INT 22
2155: PUSH
2156: LD_INT 23
2158: PUSH
2159: LD_INT 25
2161: PUSH
2162: LD_INT 26
2164: PUSH
2165: LD_INT 36
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: PUSH
2184: LD_INT 101
2186: PUSH
2187: LD_INT 102
2189: PUSH
2190: LD_INT 105
2192: PUSH
2193: LD_INT 106
2195: PUSH
2196: LD_INT 108
2198: PUSH
2199: LD_INT 109
2201: PUSH
2202: LD_INT 112
2204: PUSH
2205: LD_INT 116
2207: PUSH
2208: LD_INT 117
2210: PUSH
2211: LD_INT 118
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: LIST
2218: LIST
2219: LIST
2220: LIST
2221: LIST
2222: LIST
2223: LIST
2224: LIST
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: ST_TO_ADDR
2230: GO 4893
2232: LD_INT 6
2234: DOUBLE
2235: EQUAL
2236: IFTRUE 2240
2238: GO 2372
2240: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
2241: LD_ADDR_VAR 0 2
2245: PUSH
2246: LD_INT 2
2248: PUSH
2249: LD_INT 4
2251: PUSH
2252: LD_INT 5
2254: PUSH
2255: LD_INT 6
2257: PUSH
2258: LD_INT 8
2260: PUSH
2261: LD_INT 11
2263: PUSH
2264: LD_INT 12
2266: PUSH
2267: LD_INT 15
2269: PUSH
2270: LD_INT 16
2272: PUSH
2273: LD_INT 20
2275: PUSH
2276: LD_INT 21
2278: PUSH
2279: LD_INT 22
2281: PUSH
2282: LD_INT 23
2284: PUSH
2285: LD_INT 25
2287: PUSH
2288: LD_INT 26
2290: PUSH
2291: LD_INT 30
2293: PUSH
2294: LD_INT 31
2296: PUSH
2297: LD_INT 32
2299: PUSH
2300: LD_INT 36
2302: PUSH
2303: EMPTY
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: PUSH
2324: LD_INT 101
2326: PUSH
2327: LD_INT 102
2329: PUSH
2330: LD_INT 105
2332: PUSH
2333: LD_INT 106
2335: PUSH
2336: LD_INT 108
2338: PUSH
2339: LD_INT 109
2341: PUSH
2342: LD_INT 112
2344: PUSH
2345: LD_INT 116
2347: PUSH
2348: LD_INT 117
2350: PUSH
2351: LD_INT 118
2353: PUSH
2354: EMPTY
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: LIST
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: ST_TO_ADDR
2370: GO 4893
2372: LD_INT 7
2374: DOUBLE
2375: EQUAL
2376: IFTRUE 2380
2378: GO 2492
2380: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
2381: LD_ADDR_VAR 0 2
2385: PUSH
2386: LD_INT 2
2388: PUSH
2389: LD_INT 4
2391: PUSH
2392: LD_INT 5
2394: PUSH
2395: LD_INT 7
2397: PUSH
2398: LD_INT 11
2400: PUSH
2401: LD_INT 12
2403: PUSH
2404: LD_INT 15
2406: PUSH
2407: LD_INT 16
2409: PUSH
2410: LD_INT 20
2412: PUSH
2413: LD_INT 21
2415: PUSH
2416: LD_INT 22
2418: PUSH
2419: LD_INT 23
2421: PUSH
2422: LD_INT 25
2424: PUSH
2425: LD_INT 26
2427: PUSH
2428: EMPTY
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: LIST
2439: LIST
2440: LIST
2441: LIST
2442: LIST
2443: PUSH
2444: LD_INT 101
2446: PUSH
2447: LD_INT 102
2449: PUSH
2450: LD_INT 103
2452: PUSH
2453: LD_INT 105
2455: PUSH
2456: LD_INT 106
2458: PUSH
2459: LD_INT 108
2461: PUSH
2462: LD_INT 112
2464: PUSH
2465: LD_INT 116
2467: PUSH
2468: LD_INT 117
2470: PUSH
2471: LD_INT 118
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: LIST
2478: LIST
2479: LIST
2480: LIST
2481: LIST
2482: LIST
2483: LIST
2484: LIST
2485: PUSH
2486: EMPTY
2487: LIST
2488: LIST
2489: ST_TO_ADDR
2490: GO 4893
2492: LD_INT 8
2494: DOUBLE
2495: EQUAL
2496: IFTRUE 2500
2498: GO 2640
2500: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
2501: LD_ADDR_VAR 0 2
2505: PUSH
2506: LD_INT 2
2508: PUSH
2509: LD_INT 4
2511: PUSH
2512: LD_INT 5
2514: PUSH
2515: LD_INT 6
2517: PUSH
2518: LD_INT 7
2520: PUSH
2521: LD_INT 8
2523: PUSH
2524: LD_INT 11
2526: PUSH
2527: LD_INT 12
2529: PUSH
2530: LD_INT 15
2532: PUSH
2533: LD_INT 16
2535: PUSH
2536: LD_INT 20
2538: PUSH
2539: LD_INT 21
2541: PUSH
2542: LD_INT 22
2544: PUSH
2545: LD_INT 23
2547: PUSH
2548: LD_INT 25
2550: PUSH
2551: LD_INT 26
2553: PUSH
2554: LD_INT 30
2556: PUSH
2557: LD_INT 31
2559: PUSH
2560: LD_INT 32
2562: PUSH
2563: LD_INT 36
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: LIST
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: LIST
2585: LIST
2586: LIST
2587: PUSH
2588: LD_INT 101
2590: PUSH
2591: LD_INT 102
2593: PUSH
2594: LD_INT 103
2596: PUSH
2597: LD_INT 105
2599: PUSH
2600: LD_INT 106
2602: PUSH
2603: LD_INT 108
2605: PUSH
2606: LD_INT 109
2608: PUSH
2609: LD_INT 112
2611: PUSH
2612: LD_INT 116
2614: PUSH
2615: LD_INT 117
2617: PUSH
2618: LD_INT 118
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: LIST
2632: LIST
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: ST_TO_ADDR
2638: GO 4893
2640: LD_INT 9
2642: DOUBLE
2643: EQUAL
2644: IFTRUE 2648
2646: GO 2796
2648: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
2649: LD_ADDR_VAR 0 2
2653: PUSH
2654: LD_INT 2
2656: PUSH
2657: LD_INT 4
2659: PUSH
2660: LD_INT 5
2662: PUSH
2663: LD_INT 6
2665: PUSH
2666: LD_INT 7
2668: PUSH
2669: LD_INT 8
2671: PUSH
2672: LD_INT 11
2674: PUSH
2675: LD_INT 12
2677: PUSH
2678: LD_INT 15
2680: PUSH
2681: LD_INT 16
2683: PUSH
2684: LD_INT 20
2686: PUSH
2687: LD_INT 21
2689: PUSH
2690: LD_INT 22
2692: PUSH
2693: LD_INT 23
2695: PUSH
2696: LD_INT 25
2698: PUSH
2699: LD_INT 26
2701: PUSH
2702: LD_INT 28
2704: PUSH
2705: LD_INT 30
2707: PUSH
2708: LD_INT 31
2710: PUSH
2711: LD_INT 32
2713: PUSH
2714: LD_INT 36
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: LIST
2721: LIST
2722: LIST
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: LIST
2729: LIST
2730: LIST
2731: LIST
2732: LIST
2733: LIST
2734: LIST
2735: LIST
2736: LIST
2737: LIST
2738: LIST
2739: PUSH
2740: LD_INT 101
2742: PUSH
2743: LD_INT 102
2745: PUSH
2746: LD_INT 103
2748: PUSH
2749: LD_INT 105
2751: PUSH
2752: LD_INT 106
2754: PUSH
2755: LD_INT 108
2757: PUSH
2758: LD_INT 109
2760: PUSH
2761: LD_INT 112
2763: PUSH
2764: LD_INT 114
2766: PUSH
2767: LD_INT 116
2769: PUSH
2770: LD_INT 117
2772: PUSH
2773: LD_INT 118
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: LIST
2780: LIST
2781: LIST
2782: LIST
2783: LIST
2784: LIST
2785: LIST
2786: LIST
2787: LIST
2788: LIST
2789: PUSH
2790: EMPTY
2791: LIST
2792: LIST
2793: ST_TO_ADDR
2794: GO 4893
2796: LD_INT 10
2798: DOUBLE
2799: EQUAL
2800: IFTRUE 2804
2802: GO 3000
2804: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
2805: LD_ADDR_VAR 0 2
2809: PUSH
2810: LD_INT 2
2812: PUSH
2813: LD_INT 4
2815: PUSH
2816: LD_INT 5
2818: PUSH
2819: LD_INT 6
2821: PUSH
2822: LD_INT 7
2824: PUSH
2825: LD_INT 8
2827: PUSH
2828: LD_INT 9
2830: PUSH
2831: LD_INT 10
2833: PUSH
2834: LD_INT 11
2836: PUSH
2837: LD_INT 12
2839: PUSH
2840: LD_INT 13
2842: PUSH
2843: LD_INT 14
2845: PUSH
2846: LD_INT 15
2848: PUSH
2849: LD_INT 16
2851: PUSH
2852: LD_INT 17
2854: PUSH
2855: LD_INT 18
2857: PUSH
2858: LD_INT 19
2860: PUSH
2861: LD_INT 20
2863: PUSH
2864: LD_INT 21
2866: PUSH
2867: LD_INT 22
2869: PUSH
2870: LD_INT 23
2872: PUSH
2873: LD_INT 24
2875: PUSH
2876: LD_INT 25
2878: PUSH
2879: LD_INT 26
2881: PUSH
2882: LD_INT 28
2884: PUSH
2885: LD_INT 30
2887: PUSH
2888: LD_INT 31
2890: PUSH
2891: LD_INT 32
2893: PUSH
2894: LD_INT 36
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: LIST
2901: LIST
2902: LIST
2903: LIST
2904: LIST
2905: LIST
2906: LIST
2907: LIST
2908: LIST
2909: LIST
2910: LIST
2911: LIST
2912: LIST
2913: LIST
2914: LIST
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: LIST
2920: LIST
2921: LIST
2922: LIST
2923: LIST
2924: LIST
2925: LIST
2926: LIST
2927: PUSH
2928: LD_INT 101
2930: PUSH
2931: LD_INT 102
2933: PUSH
2934: LD_INT 103
2936: PUSH
2937: LD_INT 104
2939: PUSH
2940: LD_INT 105
2942: PUSH
2943: LD_INT 106
2945: PUSH
2946: LD_INT 107
2948: PUSH
2949: LD_INT 108
2951: PUSH
2952: LD_INT 109
2954: PUSH
2955: LD_INT 110
2957: PUSH
2958: LD_INT 111
2960: PUSH
2961: LD_INT 112
2963: PUSH
2964: LD_INT 114
2966: PUSH
2967: LD_INT 116
2969: PUSH
2970: LD_INT 117
2972: PUSH
2973: LD_INT 118
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: LIST
2982: LIST
2983: LIST
2984: LIST
2985: LIST
2986: LIST
2987: LIST
2988: LIST
2989: LIST
2990: LIST
2991: LIST
2992: LIST
2993: PUSH
2994: EMPTY
2995: LIST
2996: LIST
2997: ST_TO_ADDR
2998: GO 4893
3000: LD_INT 11
3002: DOUBLE
3003: EQUAL
3004: IFTRUE 3008
3006: GO 3212
3008: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
3009: LD_ADDR_VAR 0 2
3013: PUSH
3014: LD_INT 2
3016: PUSH
3017: LD_INT 3
3019: PUSH
3020: LD_INT 4
3022: PUSH
3023: LD_INT 5
3025: PUSH
3026: LD_INT 6
3028: PUSH
3029: LD_INT 7
3031: PUSH
3032: LD_INT 8
3034: PUSH
3035: LD_INT 9
3037: PUSH
3038: LD_INT 10
3040: PUSH
3041: LD_INT 11
3043: PUSH
3044: LD_INT 12
3046: PUSH
3047: LD_INT 13
3049: PUSH
3050: LD_INT 14
3052: PUSH
3053: LD_INT 15
3055: PUSH
3056: LD_INT 16
3058: PUSH
3059: LD_INT 17
3061: PUSH
3062: LD_INT 18
3064: PUSH
3065: LD_INT 19
3067: PUSH
3068: LD_INT 20
3070: PUSH
3071: LD_INT 21
3073: PUSH
3074: LD_INT 22
3076: PUSH
3077: LD_INT 23
3079: PUSH
3080: LD_INT 24
3082: PUSH
3083: LD_INT 25
3085: PUSH
3086: LD_INT 26
3088: PUSH
3089: LD_INT 28
3091: PUSH
3092: LD_INT 30
3094: PUSH
3095: LD_INT 31
3097: PUSH
3098: LD_INT 32
3100: PUSH
3101: LD_INT 34
3103: PUSH
3104: LD_INT 36
3106: PUSH
3107: EMPTY
3108: LIST
3109: LIST
3110: LIST
3111: LIST
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: LIST
3117: LIST
3118: LIST
3119: LIST
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: LIST
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: PUSH
3140: LD_INT 101
3142: PUSH
3143: LD_INT 102
3145: PUSH
3146: LD_INT 103
3148: PUSH
3149: LD_INT 104
3151: PUSH
3152: LD_INT 105
3154: PUSH
3155: LD_INT 106
3157: PUSH
3158: LD_INT 107
3160: PUSH
3161: LD_INT 108
3163: PUSH
3164: LD_INT 109
3166: PUSH
3167: LD_INT 110
3169: PUSH
3170: LD_INT 111
3172: PUSH
3173: LD_INT 112
3175: PUSH
3176: LD_INT 114
3178: PUSH
3179: LD_INT 116
3181: PUSH
3182: LD_INT 117
3184: PUSH
3185: LD_INT 118
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: ST_TO_ADDR
3210: GO 4893
3212: LD_INT 12
3214: DOUBLE
3215: EQUAL
3216: IFTRUE 3220
3218: GO 3440
3220: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
3221: LD_ADDR_VAR 0 2
3225: PUSH
3226: LD_INT 1
3228: PUSH
3229: LD_INT 2
3231: PUSH
3232: LD_INT 3
3234: PUSH
3235: LD_INT 4
3237: PUSH
3238: LD_INT 5
3240: PUSH
3241: LD_INT 6
3243: PUSH
3244: LD_INT 7
3246: PUSH
3247: LD_INT 8
3249: PUSH
3250: LD_INT 9
3252: PUSH
3253: LD_INT 10
3255: PUSH
3256: LD_INT 11
3258: PUSH
3259: LD_INT 12
3261: PUSH
3262: LD_INT 13
3264: PUSH
3265: LD_INT 14
3267: PUSH
3268: LD_INT 15
3270: PUSH
3271: LD_INT 16
3273: PUSH
3274: LD_INT 17
3276: PUSH
3277: LD_INT 18
3279: PUSH
3280: LD_INT 19
3282: PUSH
3283: LD_INT 20
3285: PUSH
3286: LD_INT 21
3288: PUSH
3289: LD_INT 22
3291: PUSH
3292: LD_INT 23
3294: PUSH
3295: LD_INT 24
3297: PUSH
3298: LD_INT 25
3300: PUSH
3301: LD_INT 26
3303: PUSH
3304: LD_INT 27
3306: PUSH
3307: LD_INT 28
3309: PUSH
3310: LD_INT 30
3312: PUSH
3313: LD_INT 31
3315: PUSH
3316: LD_INT 32
3318: PUSH
3319: LD_INT 33
3321: PUSH
3322: LD_INT 34
3324: PUSH
3325: LD_INT 36
3327: PUSH
3328: EMPTY
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: LIST
3335: LIST
3336: LIST
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: LIST
3343: LIST
3344: LIST
3345: LIST
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: PUSH
3364: LD_INT 101
3366: PUSH
3367: LD_INT 102
3369: PUSH
3370: LD_INT 103
3372: PUSH
3373: LD_INT 104
3375: PUSH
3376: LD_INT 105
3378: PUSH
3379: LD_INT 106
3381: PUSH
3382: LD_INT 107
3384: PUSH
3385: LD_INT 108
3387: PUSH
3388: LD_INT 109
3390: PUSH
3391: LD_INT 110
3393: PUSH
3394: LD_INT 111
3396: PUSH
3397: LD_INT 112
3399: PUSH
3400: LD_INT 113
3402: PUSH
3403: LD_INT 114
3405: PUSH
3406: LD_INT 116
3408: PUSH
3409: LD_INT 117
3411: PUSH
3412: LD_INT 118
3414: PUSH
3415: EMPTY
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: PUSH
3434: EMPTY
3435: LIST
3436: LIST
3437: ST_TO_ADDR
3438: GO 4893
3440: LD_INT 13
3442: DOUBLE
3443: EQUAL
3444: IFTRUE 3448
3446: GO 3656
3448: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
3449: LD_ADDR_VAR 0 2
3453: PUSH
3454: LD_INT 1
3456: PUSH
3457: LD_INT 2
3459: PUSH
3460: LD_INT 3
3462: PUSH
3463: LD_INT 4
3465: PUSH
3466: LD_INT 5
3468: PUSH
3469: LD_INT 8
3471: PUSH
3472: LD_INT 9
3474: PUSH
3475: LD_INT 10
3477: PUSH
3478: LD_INT 11
3480: PUSH
3481: LD_INT 12
3483: PUSH
3484: LD_INT 14
3486: PUSH
3487: LD_INT 15
3489: PUSH
3490: LD_INT 16
3492: PUSH
3493: LD_INT 17
3495: PUSH
3496: LD_INT 18
3498: PUSH
3499: LD_INT 19
3501: PUSH
3502: LD_INT 20
3504: PUSH
3505: LD_INT 21
3507: PUSH
3508: LD_INT 22
3510: PUSH
3511: LD_INT 23
3513: PUSH
3514: LD_INT 24
3516: PUSH
3517: LD_INT 25
3519: PUSH
3520: LD_INT 26
3522: PUSH
3523: LD_INT 27
3525: PUSH
3526: LD_INT 28
3528: PUSH
3529: LD_INT 30
3531: PUSH
3532: LD_INT 31
3534: PUSH
3535: LD_INT 32
3537: PUSH
3538: LD_INT 33
3540: PUSH
3541: LD_INT 34
3543: PUSH
3544: LD_INT 36
3546: PUSH
3547: EMPTY
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: PUSH
3580: LD_INT 101
3582: PUSH
3583: LD_INT 102
3585: PUSH
3586: LD_INT 103
3588: PUSH
3589: LD_INT 104
3591: PUSH
3592: LD_INT 105
3594: PUSH
3595: LD_INT 106
3597: PUSH
3598: LD_INT 107
3600: PUSH
3601: LD_INT 108
3603: PUSH
3604: LD_INT 109
3606: PUSH
3607: LD_INT 110
3609: PUSH
3610: LD_INT 111
3612: PUSH
3613: LD_INT 112
3615: PUSH
3616: LD_INT 113
3618: PUSH
3619: LD_INT 114
3621: PUSH
3622: LD_INT 116
3624: PUSH
3625: LD_INT 117
3627: PUSH
3628: LD_INT 118
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: ST_TO_ADDR
3654: GO 4893
3656: LD_INT 14
3658: DOUBLE
3659: EQUAL
3660: IFTRUE 3664
3662: GO 3888
3664: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
3665: LD_ADDR_VAR 0 2
3669: PUSH
3670: LD_INT 1
3672: PUSH
3673: LD_INT 2
3675: PUSH
3676: LD_INT 3
3678: PUSH
3679: LD_INT 4
3681: PUSH
3682: LD_INT 5
3684: PUSH
3685: LD_INT 6
3687: PUSH
3688: LD_INT 7
3690: PUSH
3691: LD_INT 8
3693: PUSH
3694: LD_INT 9
3696: PUSH
3697: LD_INT 10
3699: PUSH
3700: LD_INT 11
3702: PUSH
3703: LD_INT 12
3705: PUSH
3706: LD_INT 13
3708: PUSH
3709: LD_INT 14
3711: PUSH
3712: LD_INT 15
3714: PUSH
3715: LD_INT 16
3717: PUSH
3718: LD_INT 17
3720: PUSH
3721: LD_INT 18
3723: PUSH
3724: LD_INT 19
3726: PUSH
3727: LD_INT 20
3729: PUSH
3730: LD_INT 21
3732: PUSH
3733: LD_INT 22
3735: PUSH
3736: LD_INT 23
3738: PUSH
3739: LD_INT 24
3741: PUSH
3742: LD_INT 25
3744: PUSH
3745: LD_INT 26
3747: PUSH
3748: LD_INT 27
3750: PUSH
3751: LD_INT 28
3753: PUSH
3754: LD_INT 29
3756: PUSH
3757: LD_INT 30
3759: PUSH
3760: LD_INT 31
3762: PUSH
3763: LD_INT 32
3765: PUSH
3766: LD_INT 33
3768: PUSH
3769: LD_INT 34
3771: PUSH
3772: LD_INT 36
3774: PUSH
3775: EMPTY
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: PUSH
3812: LD_INT 101
3814: PUSH
3815: LD_INT 102
3817: PUSH
3818: LD_INT 103
3820: PUSH
3821: LD_INT 104
3823: PUSH
3824: LD_INT 105
3826: PUSH
3827: LD_INT 106
3829: PUSH
3830: LD_INT 107
3832: PUSH
3833: LD_INT 108
3835: PUSH
3836: LD_INT 109
3838: PUSH
3839: LD_INT 110
3841: PUSH
3842: LD_INT 111
3844: PUSH
3845: LD_INT 112
3847: PUSH
3848: LD_INT 113
3850: PUSH
3851: LD_INT 114
3853: PUSH
3854: LD_INT 116
3856: PUSH
3857: LD_INT 117
3859: PUSH
3860: LD_INT 118
3862: PUSH
3863: EMPTY
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: ST_TO_ADDR
3886: GO 4893
3888: LD_INT 15
3890: DOUBLE
3891: EQUAL
3892: IFTRUE 3896
3894: GO 4120
3896: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
3897: LD_ADDR_VAR 0 2
3901: PUSH
3902: LD_INT 1
3904: PUSH
3905: LD_INT 2
3907: PUSH
3908: LD_INT 3
3910: PUSH
3911: LD_INT 4
3913: PUSH
3914: LD_INT 5
3916: PUSH
3917: LD_INT 6
3919: PUSH
3920: LD_INT 7
3922: PUSH
3923: LD_INT 8
3925: PUSH
3926: LD_INT 9
3928: PUSH
3929: LD_INT 10
3931: PUSH
3932: LD_INT 11
3934: PUSH
3935: LD_INT 12
3937: PUSH
3938: LD_INT 13
3940: PUSH
3941: LD_INT 14
3943: PUSH
3944: LD_INT 15
3946: PUSH
3947: LD_INT 16
3949: PUSH
3950: LD_INT 17
3952: PUSH
3953: LD_INT 18
3955: PUSH
3956: LD_INT 19
3958: PUSH
3959: LD_INT 20
3961: PUSH
3962: LD_INT 21
3964: PUSH
3965: LD_INT 22
3967: PUSH
3968: LD_INT 23
3970: PUSH
3971: LD_INT 24
3973: PUSH
3974: LD_INT 25
3976: PUSH
3977: LD_INT 26
3979: PUSH
3980: LD_INT 27
3982: PUSH
3983: LD_INT 28
3985: PUSH
3986: LD_INT 29
3988: PUSH
3989: LD_INT 30
3991: PUSH
3992: LD_INT 31
3994: PUSH
3995: LD_INT 32
3997: PUSH
3998: LD_INT 33
4000: PUSH
4001: LD_INT 34
4003: PUSH
4004: LD_INT 36
4006: PUSH
4007: EMPTY
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: LIST
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: LIST
4038: LIST
4039: LIST
4040: LIST
4041: LIST
4042: LIST
4043: PUSH
4044: LD_INT 101
4046: PUSH
4047: LD_INT 102
4049: PUSH
4050: LD_INT 103
4052: PUSH
4053: LD_INT 104
4055: PUSH
4056: LD_INT 105
4058: PUSH
4059: LD_INT 106
4061: PUSH
4062: LD_INT 107
4064: PUSH
4065: LD_INT 108
4067: PUSH
4068: LD_INT 109
4070: PUSH
4071: LD_INT 110
4073: PUSH
4074: LD_INT 111
4076: PUSH
4077: LD_INT 112
4079: PUSH
4080: LD_INT 113
4082: PUSH
4083: LD_INT 114
4085: PUSH
4086: LD_INT 116
4088: PUSH
4089: LD_INT 117
4091: PUSH
4092: LD_INT 118
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: ST_TO_ADDR
4118: GO 4893
4120: LD_INT 16
4122: DOUBLE
4123: EQUAL
4124: IFTRUE 4128
4126: GO 4264
4128: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
4129: LD_ADDR_VAR 0 2
4133: PUSH
4134: LD_INT 2
4136: PUSH
4137: LD_INT 4
4139: PUSH
4140: LD_INT 5
4142: PUSH
4143: LD_INT 7
4145: PUSH
4146: LD_INT 11
4148: PUSH
4149: LD_INT 12
4151: PUSH
4152: LD_INT 15
4154: PUSH
4155: LD_INT 16
4157: PUSH
4158: LD_INT 20
4160: PUSH
4161: LD_INT 21
4163: PUSH
4164: LD_INT 22
4166: PUSH
4167: LD_INT 23
4169: PUSH
4170: LD_INT 25
4172: PUSH
4173: LD_INT 26
4175: PUSH
4176: LD_INT 30
4178: PUSH
4179: LD_INT 31
4181: PUSH
4182: LD_INT 32
4184: PUSH
4185: LD_INT 33
4187: PUSH
4188: LD_INT 34
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: PUSH
4212: LD_INT 101
4214: PUSH
4215: LD_INT 102
4217: PUSH
4218: LD_INT 103
4220: PUSH
4221: LD_INT 106
4223: PUSH
4224: LD_INT 108
4226: PUSH
4227: LD_INT 112
4229: PUSH
4230: LD_INT 113
4232: PUSH
4233: LD_INT 114
4235: PUSH
4236: LD_INT 116
4238: PUSH
4239: LD_INT 117
4241: PUSH
4242: LD_INT 118
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: PUSH
4258: EMPTY
4259: LIST
4260: LIST
4261: ST_TO_ADDR
4262: GO 4893
4264: LD_INT 17
4266: DOUBLE
4267: EQUAL
4268: IFTRUE 4272
4270: GO 4496
4272: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
4273: LD_ADDR_VAR 0 2
4277: PUSH
4278: LD_INT 1
4280: PUSH
4281: LD_INT 2
4283: PUSH
4284: LD_INT 3
4286: PUSH
4287: LD_INT 4
4289: PUSH
4290: LD_INT 5
4292: PUSH
4293: LD_INT 6
4295: PUSH
4296: LD_INT 7
4298: PUSH
4299: LD_INT 8
4301: PUSH
4302: LD_INT 9
4304: PUSH
4305: LD_INT 10
4307: PUSH
4308: LD_INT 11
4310: PUSH
4311: LD_INT 12
4313: PUSH
4314: LD_INT 13
4316: PUSH
4317: LD_INT 14
4319: PUSH
4320: LD_INT 15
4322: PUSH
4323: LD_INT 16
4325: PUSH
4326: LD_INT 17
4328: PUSH
4329: LD_INT 18
4331: PUSH
4332: LD_INT 19
4334: PUSH
4335: LD_INT 20
4337: PUSH
4338: LD_INT 21
4340: PUSH
4341: LD_INT 22
4343: PUSH
4344: LD_INT 23
4346: PUSH
4347: LD_INT 24
4349: PUSH
4350: LD_INT 25
4352: PUSH
4353: LD_INT 26
4355: PUSH
4356: LD_INT 27
4358: PUSH
4359: LD_INT 28
4361: PUSH
4362: LD_INT 29
4364: PUSH
4365: LD_INT 30
4367: PUSH
4368: LD_INT 31
4370: PUSH
4371: LD_INT 32
4373: PUSH
4374: LD_INT 33
4376: PUSH
4377: LD_INT 34
4379: PUSH
4380: LD_INT 36
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: PUSH
4420: LD_INT 101
4422: PUSH
4423: LD_INT 102
4425: PUSH
4426: LD_INT 103
4428: PUSH
4429: LD_INT 104
4431: PUSH
4432: LD_INT 105
4434: PUSH
4435: LD_INT 106
4437: PUSH
4438: LD_INT 107
4440: PUSH
4441: LD_INT 108
4443: PUSH
4444: LD_INT 109
4446: PUSH
4447: LD_INT 110
4449: PUSH
4450: LD_INT 111
4452: PUSH
4453: LD_INT 112
4455: PUSH
4456: LD_INT 113
4458: PUSH
4459: LD_INT 114
4461: PUSH
4462: LD_INT 116
4464: PUSH
4465: LD_INT 117
4467: PUSH
4468: LD_INT 118
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: ST_TO_ADDR
4494: GO 4893
4496: LD_INT 18
4498: DOUBLE
4499: EQUAL
4500: IFTRUE 4504
4502: GO 4652
4504: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
4505: LD_ADDR_VAR 0 2
4509: PUSH
4510: LD_INT 2
4512: PUSH
4513: LD_INT 4
4515: PUSH
4516: LD_INT 5
4518: PUSH
4519: LD_INT 7
4521: PUSH
4522: LD_INT 11
4524: PUSH
4525: LD_INT 12
4527: PUSH
4528: LD_INT 15
4530: PUSH
4531: LD_INT 16
4533: PUSH
4534: LD_INT 20
4536: PUSH
4537: LD_INT 21
4539: PUSH
4540: LD_INT 22
4542: PUSH
4543: LD_INT 23
4545: PUSH
4546: LD_INT 25
4548: PUSH
4549: LD_INT 26
4551: PUSH
4552: LD_INT 30
4554: PUSH
4555: LD_INT 31
4557: PUSH
4558: LD_INT 32
4560: PUSH
4561: LD_INT 33
4563: PUSH
4564: LD_INT 34
4566: PUSH
4567: LD_INT 35
4569: PUSH
4570: LD_INT 36
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: PUSH
4596: LD_INT 101
4598: PUSH
4599: LD_INT 102
4601: PUSH
4602: LD_INT 103
4604: PUSH
4605: LD_INT 106
4607: PUSH
4608: LD_INT 108
4610: PUSH
4611: LD_INT 112
4613: PUSH
4614: LD_INT 113
4616: PUSH
4617: LD_INT 114
4619: PUSH
4620: LD_INT 115
4622: PUSH
4623: LD_INT 116
4625: PUSH
4626: LD_INT 117
4628: PUSH
4629: LD_INT 118
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: ST_TO_ADDR
4650: GO 4893
4652: LD_INT 19
4654: DOUBLE
4655: EQUAL
4656: IFTRUE 4660
4658: GO 4892
4660: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
4661: LD_ADDR_VAR 0 2
4665: PUSH
4666: LD_INT 1
4668: PUSH
4669: LD_INT 2
4671: PUSH
4672: LD_INT 3
4674: PUSH
4675: LD_INT 4
4677: PUSH
4678: LD_INT 5
4680: PUSH
4681: LD_INT 6
4683: PUSH
4684: LD_INT 7
4686: PUSH
4687: LD_INT 8
4689: PUSH
4690: LD_INT 9
4692: PUSH
4693: LD_INT 10
4695: PUSH
4696: LD_INT 11
4698: PUSH
4699: LD_INT 12
4701: PUSH
4702: LD_INT 13
4704: PUSH
4705: LD_INT 14
4707: PUSH
4708: LD_INT 15
4710: PUSH
4711: LD_INT 16
4713: PUSH
4714: LD_INT 17
4716: PUSH
4717: LD_INT 18
4719: PUSH
4720: LD_INT 19
4722: PUSH
4723: LD_INT 20
4725: PUSH
4726: LD_INT 21
4728: PUSH
4729: LD_INT 22
4731: PUSH
4732: LD_INT 23
4734: PUSH
4735: LD_INT 24
4737: PUSH
4738: LD_INT 25
4740: PUSH
4741: LD_INT 26
4743: PUSH
4744: LD_INT 27
4746: PUSH
4747: LD_INT 28
4749: PUSH
4750: LD_INT 29
4752: PUSH
4753: LD_INT 30
4755: PUSH
4756: LD_INT 31
4758: PUSH
4759: LD_INT 32
4761: PUSH
4762: LD_INT 33
4764: PUSH
4765: LD_INT 34
4767: PUSH
4768: LD_INT 35
4770: PUSH
4771: LD_INT 36
4773: PUSH
4774: EMPTY
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: PUSH
4812: LD_INT 101
4814: PUSH
4815: LD_INT 102
4817: PUSH
4818: LD_INT 103
4820: PUSH
4821: LD_INT 104
4823: PUSH
4824: LD_INT 105
4826: PUSH
4827: LD_INT 106
4829: PUSH
4830: LD_INT 107
4832: PUSH
4833: LD_INT 108
4835: PUSH
4836: LD_INT 109
4838: PUSH
4839: LD_INT 110
4841: PUSH
4842: LD_INT 111
4844: PUSH
4845: LD_INT 112
4847: PUSH
4848: LD_INT 113
4850: PUSH
4851: LD_INT 114
4853: PUSH
4854: LD_INT 115
4856: PUSH
4857: LD_INT 116
4859: PUSH
4860: LD_INT 117
4862: PUSH
4863: LD_INT 118
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: ST_TO_ADDR
4890: GO 4893
4892: POP
// end else
4893: GO 5124
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
4895: LD_ADDR_VAR 0 2
4899: PUSH
4900: LD_INT 1
4902: PUSH
4903: LD_INT 2
4905: PUSH
4906: LD_INT 3
4908: PUSH
4909: LD_INT 4
4911: PUSH
4912: LD_INT 5
4914: PUSH
4915: LD_INT 6
4917: PUSH
4918: LD_INT 7
4920: PUSH
4921: LD_INT 8
4923: PUSH
4924: LD_INT 9
4926: PUSH
4927: LD_INT 10
4929: PUSH
4930: LD_INT 11
4932: PUSH
4933: LD_INT 12
4935: PUSH
4936: LD_INT 13
4938: PUSH
4939: LD_INT 14
4941: PUSH
4942: LD_INT 15
4944: PUSH
4945: LD_INT 16
4947: PUSH
4948: LD_INT 17
4950: PUSH
4951: LD_INT 18
4953: PUSH
4954: LD_INT 19
4956: PUSH
4957: LD_INT 20
4959: PUSH
4960: LD_INT 21
4962: PUSH
4963: LD_INT 22
4965: PUSH
4966: LD_INT 23
4968: PUSH
4969: LD_INT 24
4971: PUSH
4972: LD_INT 25
4974: PUSH
4975: LD_INT 26
4977: PUSH
4978: LD_INT 27
4980: PUSH
4981: LD_INT 28
4983: PUSH
4984: LD_INT 29
4986: PUSH
4987: LD_INT 30
4989: PUSH
4990: LD_INT 31
4992: PUSH
4993: LD_INT 32
4995: PUSH
4996: LD_INT 33
4998: PUSH
4999: LD_INT 34
5001: PUSH
5002: LD_INT 35
5004: PUSH
5005: LD_INT 36
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: PUSH
5046: LD_INT 101
5048: PUSH
5049: LD_INT 102
5051: PUSH
5052: LD_INT 103
5054: PUSH
5055: LD_INT 104
5057: PUSH
5058: LD_INT 105
5060: PUSH
5061: LD_INT 106
5063: PUSH
5064: LD_INT 107
5066: PUSH
5067: LD_INT 108
5069: PUSH
5070: LD_INT 109
5072: PUSH
5073: LD_INT 110
5075: PUSH
5076: LD_INT 111
5078: PUSH
5079: LD_INT 112
5081: PUSH
5082: LD_INT 113
5084: PUSH
5085: LD_INT 114
5087: PUSH
5088: LD_INT 115
5090: PUSH
5091: LD_INT 116
5093: PUSH
5094: LD_INT 117
5096: PUSH
5097: LD_INT 118
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: LIST
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: ST_TO_ADDR
// if result then
5124: LD_VAR 0 2
5128: IFFALSE 5914
// begin normal :=  ;
5130: LD_ADDR_VAR 0 5
5134: PUSH
5135: LD_STRING 
5137: ST_TO_ADDR
// hardcore :=  ;
5138: LD_ADDR_VAR 0 6
5142: PUSH
5143: LD_STRING 
5145: ST_TO_ADDR
// active :=  ;
5146: LD_ADDR_VAR 0 7
5150: PUSH
5151: LD_STRING 
5153: ST_TO_ADDR
// for i = 1 to normalCounter do
5154: LD_ADDR_VAR 0 8
5158: PUSH
5159: DOUBLE
5160: LD_INT 1
5162: DEC
5163: ST_TO_ADDR
5164: LD_EXP 2
5168: PUSH
5169: FOR_TO
5170: IFFALSE 5271
// begin tmp := 0 ;
5172: LD_ADDR_VAR 0 3
5176: PUSH
5177: LD_STRING 0
5179: ST_TO_ADDR
// if result [ 1 ] then
5180: LD_VAR 0 2
5184: PUSH
5185: LD_INT 1
5187: ARRAY
5188: IFFALSE 5253
// if result [ 1 ] [ 1 ] = i then
5190: LD_VAR 0 2
5194: PUSH
5195: LD_INT 1
5197: ARRAY
5198: PUSH
5199: LD_INT 1
5201: ARRAY
5202: PUSH
5203: LD_VAR 0 8
5207: EQUAL
5208: IFFALSE 5253
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
5210: LD_ADDR_VAR 0 2
5214: PUSH
5215: LD_VAR 0 2
5219: PPUSH
5220: LD_INT 1
5222: PPUSH
5223: LD_VAR 0 2
5227: PUSH
5228: LD_INT 1
5230: ARRAY
5231: PPUSH
5232: LD_INT 1
5234: PPUSH
5235: CALL_OW 3
5239: PPUSH
5240: CALL_OW 1
5244: ST_TO_ADDR
// tmp := 1 ;
5245: LD_ADDR_VAR 0 3
5249: PUSH
5250: LD_STRING 1
5252: ST_TO_ADDR
// end ; normal := normal & tmp ;
5253: LD_ADDR_VAR 0 5
5257: PUSH
5258: LD_VAR 0 5
5262: PUSH
5263: LD_VAR 0 3
5267: STR
5268: ST_TO_ADDR
// end ;
5269: GO 5169
5271: POP
5272: POP
// for i = 1 to hardcoreCounter do
5273: LD_ADDR_VAR 0 8
5277: PUSH
5278: DOUBLE
5279: LD_INT 1
5281: DEC
5282: ST_TO_ADDR
5283: LD_EXP 3
5287: PUSH
5288: FOR_TO
5289: IFFALSE 5394
// begin tmp := 0 ;
5291: LD_ADDR_VAR 0 3
5295: PUSH
5296: LD_STRING 0
5298: ST_TO_ADDR
// if result [ 2 ] then
5299: LD_VAR 0 2
5303: PUSH
5304: LD_INT 2
5306: ARRAY
5307: IFFALSE 5376
// if result [ 2 ] [ 1 ] = 100 + i then
5309: LD_VAR 0 2
5313: PUSH
5314: LD_INT 2
5316: ARRAY
5317: PUSH
5318: LD_INT 1
5320: ARRAY
5321: PUSH
5322: LD_INT 100
5324: PUSH
5325: LD_VAR 0 8
5329: PLUS
5330: EQUAL
5331: IFFALSE 5376
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
5333: LD_ADDR_VAR 0 2
5337: PUSH
5338: LD_VAR 0 2
5342: PPUSH
5343: LD_INT 2
5345: PPUSH
5346: LD_VAR 0 2
5350: PUSH
5351: LD_INT 2
5353: ARRAY
5354: PPUSH
5355: LD_INT 1
5357: PPUSH
5358: CALL_OW 3
5362: PPUSH
5363: CALL_OW 1
5367: ST_TO_ADDR
// tmp := 1 ;
5368: LD_ADDR_VAR 0 3
5372: PUSH
5373: LD_STRING 1
5375: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
5376: LD_ADDR_VAR 0 6
5380: PUSH
5381: LD_VAR 0 6
5385: PUSH
5386: LD_VAR 0 3
5390: STR
5391: ST_TO_ADDR
// end ;
5392: GO 5288
5394: POP
5395: POP
// if isGameLoad then
5396: LD_VAR 0 1
5400: IFFALSE 5875
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
5402: LD_ADDR_VAR 0 4
5406: PUSH
5407: LD_EXP 6
5411: PUSH
5412: LD_EXP 5
5416: PUSH
5417: LD_EXP 7
5421: PUSH
5422: LD_EXP 4
5426: PUSH
5427: LD_EXP 8
5431: PUSH
5432: LD_EXP 9
5436: PUSH
5437: LD_EXP 10
5441: PUSH
5442: LD_EXP 11
5446: PUSH
5447: LD_EXP 12
5451: PUSH
5452: LD_EXP 13
5456: PUSH
5457: LD_EXP 14
5461: PUSH
5462: LD_EXP 15
5466: PUSH
5467: LD_EXP 16
5471: PUSH
5472: LD_EXP 17
5476: PUSH
5477: LD_EXP 25
5481: PUSH
5482: LD_EXP 26
5486: PUSH
5487: LD_EXP 27
5491: PUSH
5492: LD_EXP 28
5496: PUSH
5497: LD_EXP 30
5501: PUSH
5502: LD_EXP 31
5506: PUSH
5507: LD_EXP 32
5511: PUSH
5512: LD_EXP 35
5516: PUSH
5517: LD_EXP 37
5521: PUSH
5522: LD_EXP 38
5526: PUSH
5527: LD_EXP 39
5531: PUSH
5532: LD_EXP 41
5536: PUSH
5537: LD_EXP 42
5541: PUSH
5542: LD_EXP 45
5546: PUSH
5547: LD_EXP 46
5551: PUSH
5552: LD_EXP 47
5556: PUSH
5557: LD_EXP 48
5561: PUSH
5562: LD_EXP 49
5566: PUSH
5567: LD_EXP 50
5571: PUSH
5572: LD_EXP 51
5576: PUSH
5577: LD_EXP 52
5581: PUSH
5582: LD_EXP 53
5586: PUSH
5587: LD_EXP 18
5591: PUSH
5592: LD_EXP 19
5596: PUSH
5597: LD_EXP 22
5601: PUSH
5602: LD_EXP 23
5606: PUSH
5607: LD_EXP 24
5611: PUSH
5612: LD_EXP 20
5616: PUSH
5617: LD_EXP 21
5621: PUSH
5622: LD_EXP 29
5626: PUSH
5627: LD_EXP 33
5631: PUSH
5632: LD_EXP 34
5636: PUSH
5637: LD_EXP 36
5641: PUSH
5642: LD_EXP 40
5646: PUSH
5647: LD_EXP 43
5651: PUSH
5652: LD_EXP 44
5656: PUSH
5657: LD_EXP 54
5661: PUSH
5662: LD_EXP 55
5666: PUSH
5667: LD_EXP 56
5671: PUSH
5672: LD_EXP 57
5676: PUSH
5677: EMPTY
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: LIST
5683: LIST
5684: LIST
5685: LIST
5686: LIST
5687: LIST
5688: LIST
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: ST_TO_ADDR
// tmp :=  ;
5733: LD_ADDR_VAR 0 3
5737: PUSH
5738: LD_STRING 
5740: ST_TO_ADDR
// for i = 1 to normalCounter do
5741: LD_ADDR_VAR 0 8
5745: PUSH
5746: DOUBLE
5747: LD_INT 1
5749: DEC
5750: ST_TO_ADDR
5751: LD_EXP 2
5755: PUSH
5756: FOR_TO
5757: IFFALSE 5793
// begin if flags [ i ] then
5759: LD_VAR 0 4
5763: PUSH
5764: LD_VAR 0 8
5768: ARRAY
5769: IFFALSE 5791
// tmp := tmp & i & ; ;
5771: LD_ADDR_VAR 0 3
5775: PUSH
5776: LD_VAR 0 3
5780: PUSH
5781: LD_VAR 0 8
5785: STR
5786: PUSH
5787: LD_STRING ;
5789: STR
5790: ST_TO_ADDR
// end ;
5791: GO 5756
5793: POP
5794: POP
// for i = 1 to hardcoreCounter do
5795: LD_ADDR_VAR 0 8
5799: PUSH
5800: DOUBLE
5801: LD_INT 1
5803: DEC
5804: ST_TO_ADDR
5805: LD_EXP 3
5809: PUSH
5810: FOR_TO
5811: IFFALSE 5857
// begin if flags [ normalCounter + i ] then
5813: LD_VAR 0 4
5817: PUSH
5818: LD_EXP 2
5822: PUSH
5823: LD_VAR 0 8
5827: PLUS
5828: ARRAY
5829: IFFALSE 5855
// tmp := tmp & ( 100 + i ) & ; ;
5831: LD_ADDR_VAR 0 3
5835: PUSH
5836: LD_VAR 0 3
5840: PUSH
5841: LD_INT 100
5843: PUSH
5844: LD_VAR 0 8
5848: PLUS
5849: STR
5850: PUSH
5851: LD_STRING ;
5853: STR
5854: ST_TO_ADDR
// end ;
5855: GO 5810
5857: POP
5858: POP
// if tmp then
5859: LD_VAR 0 3
5863: IFFALSE 5875
// active := tmp ;
5865: LD_ADDR_VAR 0 7
5869: PUSH
5870: LD_VAR 0 3
5874: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
5875: LD_STRING getStreamItemsFromMission("
5877: PUSH
5878: LD_VAR 0 5
5882: STR
5883: PUSH
5884: LD_STRING ","
5886: STR
5887: PUSH
5888: LD_VAR 0 6
5892: STR
5893: PUSH
5894: LD_STRING ","
5896: STR
5897: PUSH
5898: LD_VAR 0 7
5902: STR
5903: PUSH
5904: LD_STRING ")
5906: STR
5907: PPUSH
5908: CALL_OW 559
// end else
5912: GO 5921
// ToLua ( getStreamItemsFromMission("","","") ) ;
5914: LD_STRING getStreamItemsFromMission("","","")
5916: PPUSH
5917: CALL_OW 559
// end ;
5921: LD_VAR 0 2
5925: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
5926: LD_EXP 1
5930: PUSH
5931: LD_EXP 6
5935: AND
5936: IFFALSE 6060
5938: GO 5940
5940: DISABLE
5941: LD_INT 0
5943: PPUSH
5944: PPUSH
// begin enable ;
5945: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
5946: LD_ADDR_VAR 0 2
5950: PUSH
5951: LD_INT 22
5953: PUSH
5954: LD_OWVAR 2
5958: PUSH
5959: EMPTY
5960: LIST
5961: LIST
5962: PUSH
5963: LD_INT 2
5965: PUSH
5966: LD_INT 34
5968: PUSH
5969: LD_INT 7
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: PUSH
5976: LD_INT 34
5978: PUSH
5979: LD_INT 45
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: PUSH
5986: LD_INT 34
5988: PUSH
5989: LD_INT 28
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: PUSH
5996: LD_INT 34
5998: PUSH
5999: LD_INT 47
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: PUSH
6006: EMPTY
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: PPUSH
6017: CALL_OW 69
6021: ST_TO_ADDR
// if not tmp then
6022: LD_VAR 0 2
6026: NOT
6027: IFFALSE 6031
// exit ;
6029: GO 6060
// for i in tmp do
6031: LD_ADDR_VAR 0 1
6035: PUSH
6036: LD_VAR 0 2
6040: PUSH
6041: FOR_IN
6042: IFFALSE 6058
// begin SetLives ( i , 0 ) ;
6044: LD_VAR 0 1
6048: PPUSH
6049: LD_INT 0
6051: PPUSH
6052: CALL_OW 234
// end ;
6056: GO 6041
6058: POP
6059: POP
// end ;
6060: PPOPN 2
6062: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
6063: LD_EXP 1
6067: PUSH
6068: LD_EXP 7
6072: AND
6073: IFFALSE 6157
6075: GO 6077
6077: DISABLE
6078: LD_INT 0
6080: PPUSH
6081: PPUSH
// begin enable ;
6082: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
6083: LD_ADDR_VAR 0 2
6087: PUSH
6088: LD_INT 22
6090: PUSH
6091: LD_OWVAR 2
6095: PUSH
6096: EMPTY
6097: LIST
6098: LIST
6099: PUSH
6100: LD_INT 32
6102: PUSH
6103: LD_INT 3
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: PPUSH
6114: CALL_OW 69
6118: ST_TO_ADDR
// if not tmp then
6119: LD_VAR 0 2
6123: NOT
6124: IFFALSE 6128
// exit ;
6126: GO 6157
// for i in tmp do
6128: LD_ADDR_VAR 0 1
6132: PUSH
6133: LD_VAR 0 2
6137: PUSH
6138: FOR_IN
6139: IFFALSE 6155
// begin SetLives ( i , 0 ) ;
6141: LD_VAR 0 1
6145: PPUSH
6146: LD_INT 0
6148: PPUSH
6149: CALL_OW 234
// end ;
6153: GO 6138
6155: POP
6156: POP
// end ;
6157: PPOPN 2
6159: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
6160: LD_EXP 1
6164: PUSH
6165: LD_EXP 4
6169: AND
6170: IFFALSE 6263
6172: GO 6174
6174: DISABLE
6175: LD_INT 0
6177: PPUSH
// begin enable ;
6178: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
6179: LD_ADDR_VAR 0 1
6183: PUSH
6184: LD_INT 22
6186: PUSH
6187: LD_OWVAR 2
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: LD_INT 2
6198: PUSH
6199: LD_INT 25
6201: PUSH
6202: LD_INT 5
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: LD_INT 25
6211: PUSH
6212: LD_INT 9
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: PUSH
6219: LD_INT 25
6221: PUSH
6222: LD_INT 8
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PPUSH
6239: CALL_OW 69
6243: PUSH
6244: FOR_IN
6245: IFFALSE 6261
// begin SetClass ( i , 1 ) ;
6247: LD_VAR 0 1
6251: PPUSH
6252: LD_INT 1
6254: PPUSH
6255: CALL_OW 336
// end ;
6259: GO 6244
6261: POP
6262: POP
// end ;
6263: PPOPN 1
6265: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
6266: LD_EXP 1
6270: PUSH
6271: LD_EXP 5
6275: AND
6276: PUSH
6277: LD_OWVAR 65
6281: PUSH
6282: LD_INT 7
6284: LESS
6285: AND
6286: IFFALSE 6300
6288: GO 6290
6290: DISABLE
// begin enable ;
6291: ENABLE
// game_speed := 7 ;
6292: LD_ADDR_OWVAR 65
6296: PUSH
6297: LD_INT 7
6299: ST_TO_ADDR
// end ;
6300: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
6301: LD_EXP 1
6305: PUSH
6306: LD_EXP 8
6310: AND
6311: IFFALSE 6513
6313: GO 6315
6315: DISABLE
6316: LD_INT 0
6318: PPUSH
6319: PPUSH
6320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
6321: LD_ADDR_VAR 0 3
6325: PUSH
6326: LD_INT 81
6328: PUSH
6329: LD_OWVAR 2
6333: PUSH
6334: EMPTY
6335: LIST
6336: LIST
6337: PUSH
6338: LD_INT 21
6340: PUSH
6341: LD_INT 1
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PPUSH
6352: CALL_OW 69
6356: ST_TO_ADDR
// if not tmp then
6357: LD_VAR 0 3
6361: NOT
6362: IFFALSE 6366
// exit ;
6364: GO 6513
// if tmp > 5 then
6366: LD_VAR 0 3
6370: PUSH
6371: LD_INT 5
6373: GREATER
6374: IFFALSE 6386
// k := 5 else
6376: LD_ADDR_VAR 0 2
6380: PUSH
6381: LD_INT 5
6383: ST_TO_ADDR
6384: GO 6396
// k := tmp ;
6386: LD_ADDR_VAR 0 2
6390: PUSH
6391: LD_VAR 0 3
6395: ST_TO_ADDR
// for i := 1 to k do
6396: LD_ADDR_VAR 0 1
6400: PUSH
6401: DOUBLE
6402: LD_INT 1
6404: DEC
6405: ST_TO_ADDR
6406: LD_VAR 0 2
6410: PUSH
6411: FOR_TO
6412: IFFALSE 6511
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
6414: LD_VAR 0 3
6418: PUSH
6419: LD_VAR 0 1
6423: ARRAY
6424: PPUSH
6425: LD_VAR 0 1
6429: PUSH
6430: LD_INT 4
6432: MOD
6433: PUSH
6434: LD_INT 1
6436: PLUS
6437: PPUSH
6438: CALL_OW 259
6442: PUSH
6443: LD_INT 10
6445: LESS
6446: IFFALSE 6509
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
6448: LD_VAR 0 3
6452: PUSH
6453: LD_VAR 0 1
6457: ARRAY
6458: PPUSH
6459: LD_VAR 0 1
6463: PUSH
6464: LD_INT 4
6466: MOD
6467: PUSH
6468: LD_INT 1
6470: PLUS
6471: PPUSH
6472: LD_VAR 0 3
6476: PUSH
6477: LD_VAR 0 1
6481: ARRAY
6482: PPUSH
6483: LD_VAR 0 1
6487: PUSH
6488: LD_INT 4
6490: MOD
6491: PUSH
6492: LD_INT 1
6494: PLUS
6495: PPUSH
6496: CALL_OW 259
6500: PUSH
6501: LD_INT 1
6503: PLUS
6504: PPUSH
6505: CALL_OW 237
6509: GO 6411
6511: POP
6512: POP
// end ;
6513: PPOPN 3
6515: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
6516: LD_EXP 1
6520: PUSH
6521: LD_EXP 9
6525: AND
6526: IFFALSE 6546
6528: GO 6530
6530: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
6531: LD_INT 4
6533: PPUSH
6534: LD_OWVAR 2
6538: PPUSH
6539: LD_INT 0
6541: PPUSH
6542: CALL_OW 324
6546: END
// every 0 0$1 trigger StreamModeActive and sShovel do
6547: LD_EXP 1
6551: PUSH
6552: LD_EXP 38
6556: AND
6557: IFFALSE 6577
6559: GO 6561
6561: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
6562: LD_INT 19
6564: PPUSH
6565: LD_OWVAR 2
6569: PPUSH
6570: LD_INT 0
6572: PPUSH
6573: CALL_OW 324
6577: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
6578: LD_EXP 1
6582: PUSH
6583: LD_EXP 10
6587: AND
6588: IFFALSE 6690
6590: GO 6592
6592: DISABLE
6593: LD_INT 0
6595: PPUSH
6596: PPUSH
// begin enable ;
6597: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
6598: LD_ADDR_VAR 0 2
6602: PUSH
6603: LD_INT 22
6605: PUSH
6606: LD_OWVAR 2
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: PUSH
6615: LD_INT 2
6617: PUSH
6618: LD_INT 34
6620: PUSH
6621: LD_INT 11
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: PUSH
6628: LD_INT 34
6630: PUSH
6631: LD_INT 30
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: LIST
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PPUSH
6647: CALL_OW 69
6651: ST_TO_ADDR
// if not tmp then
6652: LD_VAR 0 2
6656: NOT
6657: IFFALSE 6661
// exit ;
6659: GO 6690
// for i in tmp do
6661: LD_ADDR_VAR 0 1
6665: PUSH
6666: LD_VAR 0 2
6670: PUSH
6671: FOR_IN
6672: IFFALSE 6688
// begin SetLives ( i , 0 ) ;
6674: LD_VAR 0 1
6678: PPUSH
6679: LD_INT 0
6681: PPUSH
6682: CALL_OW 234
// end ;
6686: GO 6671
6688: POP
6689: POP
// end ;
6690: PPOPN 2
6692: END
// every 0 0$1 trigger StreamModeActive and sBunker do
6693: LD_EXP 1
6697: PUSH
6698: LD_EXP 11
6702: AND
6703: IFFALSE 6723
6705: GO 6707
6707: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
6708: LD_INT 32
6710: PPUSH
6711: LD_OWVAR 2
6715: PPUSH
6716: LD_INT 0
6718: PPUSH
6719: CALL_OW 324
6723: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
6724: LD_EXP 1
6728: PUSH
6729: LD_EXP 12
6733: AND
6734: IFFALSE 6915
6736: GO 6738
6738: DISABLE
6739: LD_INT 0
6741: PPUSH
6742: PPUSH
6743: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
6744: LD_ADDR_VAR 0 2
6748: PUSH
6749: LD_INT 22
6751: PUSH
6752: LD_OWVAR 2
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 33
6763: PUSH
6764: LD_INT 3
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PUSH
6771: EMPTY
6772: LIST
6773: LIST
6774: PPUSH
6775: CALL_OW 69
6779: ST_TO_ADDR
// if not tmp then
6780: LD_VAR 0 2
6784: NOT
6785: IFFALSE 6789
// exit ;
6787: GO 6915
// side := 0 ;
6789: LD_ADDR_VAR 0 3
6793: PUSH
6794: LD_INT 0
6796: ST_TO_ADDR
// for i := 1 to 8 do
6797: LD_ADDR_VAR 0 1
6801: PUSH
6802: DOUBLE
6803: LD_INT 1
6805: DEC
6806: ST_TO_ADDR
6807: LD_INT 8
6809: PUSH
6810: FOR_TO
6811: IFFALSE 6859
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
6813: LD_OWVAR 2
6817: PUSH
6818: LD_VAR 0 1
6822: NONEQUAL
6823: PUSH
6824: LD_OWVAR 2
6828: PPUSH
6829: LD_VAR 0 1
6833: PPUSH
6834: CALL_OW 81
6838: PUSH
6839: LD_INT 2
6841: EQUAL
6842: AND
6843: IFFALSE 6857
// begin side := i ;
6845: LD_ADDR_VAR 0 3
6849: PUSH
6850: LD_VAR 0 1
6854: ST_TO_ADDR
// break ;
6855: GO 6859
// end ;
6857: GO 6810
6859: POP
6860: POP
// if not side then
6861: LD_VAR 0 3
6865: NOT
6866: IFFALSE 6870
// exit ;
6868: GO 6915
// for i := 1 to tmp do
6870: LD_ADDR_VAR 0 1
6874: PUSH
6875: DOUBLE
6876: LD_INT 1
6878: DEC
6879: ST_TO_ADDR
6880: LD_VAR 0 2
6884: PUSH
6885: FOR_TO
6886: IFFALSE 6913
// if Prob ( 60 ) then
6888: LD_INT 60
6890: PPUSH
6891: CALL_OW 13
6895: IFFALSE 6911
// SetSide ( i , side ) ;
6897: LD_VAR 0 1
6901: PPUSH
6902: LD_VAR 0 3
6906: PPUSH
6907: CALL_OW 235
6911: GO 6885
6913: POP
6914: POP
// end ;
6915: PPOPN 3
6917: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
6918: LD_EXP 1
6922: PUSH
6923: LD_EXP 14
6927: AND
6928: IFFALSE 7047
6930: GO 6932
6932: DISABLE
6933: LD_INT 0
6935: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
6936: LD_ADDR_VAR 0 1
6940: PUSH
6941: LD_INT 22
6943: PUSH
6944: LD_OWVAR 2
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PUSH
6953: LD_INT 21
6955: PUSH
6956: LD_INT 1
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PUSH
6963: LD_INT 3
6965: PUSH
6966: LD_INT 23
6968: PUSH
6969: LD_INT 0
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: LIST
6984: PPUSH
6985: CALL_OW 69
6989: PUSH
6990: FOR_IN
6991: IFFALSE 7045
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
6993: LD_VAR 0 1
6997: PPUSH
6998: CALL_OW 257
7002: PUSH
7003: LD_INT 1
7005: PUSH
7006: LD_INT 2
7008: PUSH
7009: LD_INT 3
7011: PUSH
7012: LD_INT 4
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: IN
7021: IFFALSE 7043
// SetClass ( un , rand ( 1 , 4 ) ) ;
7023: LD_VAR 0 1
7027: PPUSH
7028: LD_INT 1
7030: PPUSH
7031: LD_INT 4
7033: PPUSH
7034: CALL_OW 12
7038: PPUSH
7039: CALL_OW 336
7043: GO 6990
7045: POP
7046: POP
// end ;
7047: PPOPN 1
7049: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
7050: LD_EXP 1
7054: PUSH
7055: LD_EXP 13
7059: AND
7060: IFFALSE 7139
7062: GO 7064
7064: DISABLE
7065: LD_INT 0
7067: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7068: LD_ADDR_VAR 0 1
7072: PUSH
7073: LD_INT 22
7075: PUSH
7076: LD_OWVAR 2
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PUSH
7085: LD_INT 21
7087: PUSH
7088: LD_INT 3
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: PPUSH
7099: CALL_OW 69
7103: ST_TO_ADDR
// if not tmp then
7104: LD_VAR 0 1
7108: NOT
7109: IFFALSE 7113
// exit ;
7111: GO 7139
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
7113: LD_VAR 0 1
7117: PUSH
7118: LD_INT 1
7120: PPUSH
7121: LD_VAR 0 1
7125: PPUSH
7126: CALL_OW 12
7130: ARRAY
7131: PPUSH
7132: LD_INT 100
7134: PPUSH
7135: CALL_OW 234
// end ;
7139: PPOPN 1
7141: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
7142: LD_EXP 1
7146: PUSH
7147: LD_EXP 15
7151: AND
7152: IFFALSE 7250
7154: GO 7156
7156: DISABLE
7157: LD_INT 0
7159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
7160: LD_ADDR_VAR 0 1
7164: PUSH
7165: LD_INT 22
7167: PUSH
7168: LD_OWVAR 2
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 21
7179: PUSH
7180: LD_INT 1
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: PPUSH
7191: CALL_OW 69
7195: ST_TO_ADDR
// if not tmp then
7196: LD_VAR 0 1
7200: NOT
7201: IFFALSE 7205
// exit ;
7203: GO 7250
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
7205: LD_VAR 0 1
7209: PUSH
7210: LD_INT 1
7212: PPUSH
7213: LD_VAR 0 1
7217: PPUSH
7218: CALL_OW 12
7222: ARRAY
7223: PPUSH
7224: LD_INT 1
7226: PPUSH
7227: LD_INT 4
7229: PPUSH
7230: CALL_OW 12
7234: PPUSH
7235: LD_INT 3000
7237: PPUSH
7238: LD_INT 9000
7240: PPUSH
7241: CALL_OW 12
7245: PPUSH
7246: CALL_OW 492
// end ;
7250: PPOPN 1
7252: END
// every 0 0$1 trigger StreamModeActive and sDepot do
7253: LD_EXP 1
7257: PUSH
7258: LD_EXP 16
7262: AND
7263: IFFALSE 7283
7265: GO 7267
7267: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
7268: LD_INT 1
7270: PPUSH
7271: LD_OWVAR 2
7275: PPUSH
7276: LD_INT 0
7278: PPUSH
7279: CALL_OW 324
7283: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
7284: LD_EXP 1
7288: PUSH
7289: LD_EXP 17
7293: AND
7294: IFFALSE 7377
7296: GO 7298
7298: DISABLE
7299: LD_INT 0
7301: PPUSH
7302: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7303: LD_ADDR_VAR 0 2
7307: PUSH
7308: LD_INT 22
7310: PUSH
7311: LD_OWVAR 2
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: PUSH
7320: LD_INT 21
7322: PUSH
7323: LD_INT 3
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: PPUSH
7334: CALL_OW 69
7338: ST_TO_ADDR
// if not tmp then
7339: LD_VAR 0 2
7343: NOT
7344: IFFALSE 7348
// exit ;
7346: GO 7377
// for i in tmp do
7348: LD_ADDR_VAR 0 1
7352: PUSH
7353: LD_VAR 0 2
7357: PUSH
7358: FOR_IN
7359: IFFALSE 7375
// SetBLevel ( i , 10 ) ;
7361: LD_VAR 0 1
7365: PPUSH
7366: LD_INT 10
7368: PPUSH
7369: CALL_OW 241
7373: GO 7358
7375: POP
7376: POP
// end ;
7377: PPOPN 2
7379: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
7380: LD_EXP 1
7384: PUSH
7385: LD_EXP 18
7389: AND
7390: IFFALSE 7501
7392: GO 7394
7394: DISABLE
7395: LD_INT 0
7397: PPUSH
7398: PPUSH
7399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
7400: LD_ADDR_VAR 0 3
7404: PUSH
7405: LD_INT 22
7407: PUSH
7408: LD_OWVAR 2
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: PUSH
7417: LD_INT 25
7419: PUSH
7420: LD_INT 1
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: PPUSH
7431: CALL_OW 69
7435: ST_TO_ADDR
// if not tmp then
7436: LD_VAR 0 3
7440: NOT
7441: IFFALSE 7445
// exit ;
7443: GO 7501
// un := tmp [ rand ( 1 , tmp ) ] ;
7445: LD_ADDR_VAR 0 2
7449: PUSH
7450: LD_VAR 0 3
7454: PUSH
7455: LD_INT 1
7457: PPUSH
7458: LD_VAR 0 3
7462: PPUSH
7463: CALL_OW 12
7467: ARRAY
7468: ST_TO_ADDR
// if Crawls ( un ) then
7469: LD_VAR 0 2
7473: PPUSH
7474: CALL_OW 318
7478: IFFALSE 7489
// ComWalk ( un ) ;
7480: LD_VAR 0 2
7484: PPUSH
7485: CALL_OW 138
// SetClass ( un , class_sniper ) ;
7489: LD_VAR 0 2
7493: PPUSH
7494: LD_INT 5
7496: PPUSH
7497: CALL_OW 336
// end ;
7501: PPOPN 3
7503: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
7504: LD_EXP 1
7508: PUSH
7509: LD_EXP 19
7513: AND
7514: PUSH
7515: LD_OWVAR 67
7519: PUSH
7520: LD_INT 4
7522: LESS
7523: AND
7524: IFFALSE 7543
7526: GO 7528
7528: DISABLE
// begin Difficulty := Difficulty + 1 ;
7529: LD_ADDR_OWVAR 67
7533: PUSH
7534: LD_OWVAR 67
7538: PUSH
7539: LD_INT 1
7541: PLUS
7542: ST_TO_ADDR
// end ;
7543: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
7544: LD_EXP 1
7548: PUSH
7549: LD_EXP 20
7553: AND
7554: IFFALSE 7657
7556: GO 7558
7558: DISABLE
7559: LD_INT 0
7561: PPUSH
// begin for i := 1 to 5 do
7562: LD_ADDR_VAR 0 1
7566: PUSH
7567: DOUBLE
7568: LD_INT 1
7570: DEC
7571: ST_TO_ADDR
7572: LD_INT 5
7574: PUSH
7575: FOR_TO
7576: IFFALSE 7655
// begin uc_nation := nation_nature ;
7578: LD_ADDR_OWVAR 21
7582: PUSH
7583: LD_INT 0
7585: ST_TO_ADDR
// uc_side := 0 ;
7586: LD_ADDR_OWVAR 20
7590: PUSH
7591: LD_INT 0
7593: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
7594: LD_ADDR_OWVAR 29
7598: PUSH
7599: LD_INT 12
7601: PUSH
7602: LD_INT 12
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: ST_TO_ADDR
// hc_agressivity := 20 ;
7609: LD_ADDR_OWVAR 35
7613: PUSH
7614: LD_INT 20
7616: ST_TO_ADDR
// hc_class := class_tiger ;
7617: LD_ADDR_OWVAR 28
7621: PUSH
7622: LD_INT 14
7624: ST_TO_ADDR
// hc_gallery :=  ;
7625: LD_ADDR_OWVAR 33
7629: PUSH
7630: LD_STRING 
7632: ST_TO_ADDR
// hc_name :=  ;
7633: LD_ADDR_OWVAR 26
7637: PUSH
7638: LD_STRING 
7640: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
7641: CALL_OW 44
7645: PPUSH
7646: LD_INT 0
7648: PPUSH
7649: CALL_OW 51
// end ;
7653: GO 7575
7655: POP
7656: POP
// end ;
7657: PPOPN 1
7659: END
// every 0 0$1 trigger StreamModeActive and sBomb do
7660: LD_EXP 1
7664: PUSH
7665: LD_EXP 21
7669: AND
7670: IFFALSE 7679
7672: GO 7674
7674: DISABLE
// StreamSibBomb ;
7675: CALL 7680 0 0
7679: END
// export function StreamSibBomb ; var i , x , y ; begin
7680: LD_INT 0
7682: PPUSH
7683: PPUSH
7684: PPUSH
7685: PPUSH
// result := false ;
7686: LD_ADDR_VAR 0 1
7690: PUSH
7691: LD_INT 0
7693: ST_TO_ADDR
// for i := 1 to 16 do
7694: LD_ADDR_VAR 0 2
7698: PUSH
7699: DOUBLE
7700: LD_INT 1
7702: DEC
7703: ST_TO_ADDR
7704: LD_INT 16
7706: PUSH
7707: FOR_TO
7708: IFFALSE 7907
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
7710: LD_ADDR_VAR 0 3
7714: PUSH
7715: LD_INT 10
7717: PUSH
7718: LD_INT 20
7720: PUSH
7721: LD_INT 30
7723: PUSH
7724: LD_INT 40
7726: PUSH
7727: LD_INT 50
7729: PUSH
7730: LD_INT 60
7732: PUSH
7733: LD_INT 70
7735: PUSH
7736: LD_INT 80
7738: PUSH
7739: LD_INT 90
7741: PUSH
7742: LD_INT 100
7744: PUSH
7745: LD_INT 110
7747: PUSH
7748: LD_INT 120
7750: PUSH
7751: LD_INT 130
7753: PUSH
7754: LD_INT 140
7756: PUSH
7757: LD_INT 150
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: PUSH
7777: LD_INT 1
7779: PPUSH
7780: LD_INT 15
7782: PPUSH
7783: CALL_OW 12
7787: ARRAY
7788: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
7789: LD_ADDR_VAR 0 4
7793: PUSH
7794: LD_INT 10
7796: PUSH
7797: LD_INT 20
7799: PUSH
7800: LD_INT 30
7802: PUSH
7803: LD_INT 40
7805: PUSH
7806: LD_INT 50
7808: PUSH
7809: LD_INT 60
7811: PUSH
7812: LD_INT 70
7814: PUSH
7815: LD_INT 80
7817: PUSH
7818: LD_INT 90
7820: PUSH
7821: LD_INT 100
7823: PUSH
7824: LD_INT 110
7826: PUSH
7827: LD_INT 120
7829: PUSH
7830: LD_INT 130
7832: PUSH
7833: LD_INT 140
7835: PUSH
7836: LD_INT 150
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: PUSH
7856: LD_INT 1
7858: PPUSH
7859: LD_INT 15
7861: PPUSH
7862: CALL_OW 12
7866: ARRAY
7867: ST_TO_ADDR
// if ValidHex ( x , y ) then
7868: LD_VAR 0 3
7872: PPUSH
7873: LD_VAR 0 4
7877: PPUSH
7878: CALL_OW 488
7882: IFFALSE 7905
// begin result := [ x , y ] ;
7884: LD_ADDR_VAR 0 1
7888: PUSH
7889: LD_VAR 0 3
7893: PUSH
7894: LD_VAR 0 4
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: ST_TO_ADDR
// break ;
7903: GO 7907
// end ; end ;
7905: GO 7707
7907: POP
7908: POP
// if result then
7909: LD_VAR 0 1
7913: IFFALSE 7973
// begin ToLua ( playSibBomb() ) ;
7915: LD_STRING playSibBomb()
7917: PPUSH
7918: CALL_OW 559
// wait ( 0 0$14 ) ;
7922: LD_INT 490
7924: PPUSH
7925: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
7929: LD_VAR 0 1
7933: PUSH
7934: LD_INT 1
7936: ARRAY
7937: PPUSH
7938: LD_VAR 0 1
7942: PUSH
7943: LD_INT 2
7945: ARRAY
7946: PPUSH
7947: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
7951: LD_VAR 0 1
7955: PUSH
7956: LD_INT 1
7958: ARRAY
7959: PPUSH
7960: LD_VAR 0 1
7964: PUSH
7965: LD_INT 2
7967: ARRAY
7968: PPUSH
7969: CALL_OW 429
// end ; end ;
7973: LD_VAR 0 1
7977: RET
// every 0 0$1 trigger StreamModeActive and sReset do
7978: LD_EXP 1
7982: PUSH
7983: LD_EXP 23
7987: AND
7988: IFFALSE 8000
7990: GO 7992
7992: DISABLE
// YouLost (  ) ;
7993: LD_STRING 
7995: PPUSH
7996: CALL_OW 104
8000: END
// every 0 0$1 trigger StreamModeActive and sFog do
8001: LD_EXP 1
8005: PUSH
8006: LD_EXP 22
8010: AND
8011: IFFALSE 8025
8013: GO 8015
8015: DISABLE
// FogOff ( your_side ) ;
8016: LD_OWVAR 2
8020: PPUSH
8021: CALL_OW 344
8025: END
// every 0 0$1 trigger StreamModeActive and sSun do
8026: LD_EXP 1
8030: PUSH
8031: LD_EXP 24
8035: AND
8036: IFFALSE 8064
8038: GO 8040
8040: DISABLE
// begin solar_recharge_percent := 0 ;
8041: LD_ADDR_OWVAR 79
8045: PUSH
8046: LD_INT 0
8048: ST_TO_ADDR
// wait ( 5 5$00 ) ;
8049: LD_INT 10500
8051: PPUSH
8052: CALL_OW 67
// solar_recharge_percent := 100 ;
8056: LD_ADDR_OWVAR 79
8060: PUSH
8061: LD_INT 100
8063: ST_TO_ADDR
// end ;
8064: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
8065: LD_EXP 1
8069: PUSH
8070: LD_EXP 25
8074: AND
8075: IFFALSE 8314
8077: GO 8079
8079: DISABLE
8080: LD_INT 0
8082: PPUSH
8083: PPUSH
8084: PPUSH
// begin tmp := [ ] ;
8085: LD_ADDR_VAR 0 3
8089: PUSH
8090: EMPTY
8091: ST_TO_ADDR
// for i := 1 to 6 do
8092: LD_ADDR_VAR 0 1
8096: PUSH
8097: DOUBLE
8098: LD_INT 1
8100: DEC
8101: ST_TO_ADDR
8102: LD_INT 6
8104: PUSH
8105: FOR_TO
8106: IFFALSE 8211
// begin uc_nation := nation_nature ;
8108: LD_ADDR_OWVAR 21
8112: PUSH
8113: LD_INT 0
8115: ST_TO_ADDR
// uc_side := 0 ;
8116: LD_ADDR_OWVAR 20
8120: PUSH
8121: LD_INT 0
8123: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8124: LD_ADDR_OWVAR 29
8128: PUSH
8129: LD_INT 12
8131: PUSH
8132: LD_INT 12
8134: PUSH
8135: EMPTY
8136: LIST
8137: LIST
8138: ST_TO_ADDR
// hc_agressivity := 20 ;
8139: LD_ADDR_OWVAR 35
8143: PUSH
8144: LD_INT 20
8146: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
8147: LD_ADDR_OWVAR 28
8151: PUSH
8152: LD_INT 17
8154: ST_TO_ADDR
// hc_gallery :=  ;
8155: LD_ADDR_OWVAR 33
8159: PUSH
8160: LD_STRING 
8162: ST_TO_ADDR
// hc_name :=  ;
8163: LD_ADDR_OWVAR 26
8167: PUSH
8168: LD_STRING 
8170: ST_TO_ADDR
// un := CreateHuman ;
8171: LD_ADDR_VAR 0 2
8175: PUSH
8176: CALL_OW 44
8180: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
8181: LD_VAR 0 2
8185: PPUSH
8186: LD_INT 1
8188: PPUSH
8189: CALL_OW 51
// tmp := tmp ^ un ;
8193: LD_ADDR_VAR 0 3
8197: PUSH
8198: LD_VAR 0 3
8202: PUSH
8203: LD_VAR 0 2
8207: ADD
8208: ST_TO_ADDR
// end ;
8209: GO 8105
8211: POP
8212: POP
// repeat wait ( 0 0$1 ) ;
8213: LD_INT 35
8215: PPUSH
8216: CALL_OW 67
// for un in tmp do
8220: LD_ADDR_VAR 0 2
8224: PUSH
8225: LD_VAR 0 3
8229: PUSH
8230: FOR_IN
8231: IFFALSE 8305
// begin if IsDead ( un ) then
8233: LD_VAR 0 2
8237: PPUSH
8238: CALL_OW 301
8242: IFFALSE 8262
// begin tmp := tmp diff un ;
8244: LD_ADDR_VAR 0 3
8248: PUSH
8249: LD_VAR 0 3
8253: PUSH
8254: LD_VAR 0 2
8258: DIFF
8259: ST_TO_ADDR
// continue ;
8260: GO 8230
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
8262: LD_VAR 0 2
8266: PPUSH
8267: LD_INT 3
8269: PUSH
8270: LD_INT 22
8272: PUSH
8273: LD_INT 0
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: PUSH
8280: EMPTY
8281: LIST
8282: LIST
8283: PPUSH
8284: CALL_OW 69
8288: PPUSH
8289: LD_VAR 0 2
8293: PPUSH
8294: CALL_OW 74
8298: PPUSH
8299: CALL_OW 115
// end ;
8303: GO 8230
8305: POP
8306: POP
// until not tmp ;
8307: LD_VAR 0 3
8311: NOT
8312: IFFALSE 8213
// end ;
8314: PPOPN 3
8316: END
// every 0 0$1 trigger StreamModeActive and sTroll do
8317: LD_EXP 1
8321: PUSH
8322: LD_EXP 26
8326: AND
8327: IFFALSE 8381
8329: GO 8331
8331: DISABLE
// begin ToLua ( displayTroll(); ) ;
8332: LD_STRING displayTroll();
8334: PPUSH
8335: CALL_OW 559
// wait ( 3 3$00 ) ;
8339: LD_INT 6300
8341: PPUSH
8342: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8346: LD_STRING hideTroll();
8348: PPUSH
8349: CALL_OW 559
// wait ( 1 1$00 ) ;
8353: LD_INT 2100
8355: PPUSH
8356: CALL_OW 67
// ToLua ( displayTroll(); ) ;
8360: LD_STRING displayTroll();
8362: PPUSH
8363: CALL_OW 559
// wait ( 1 1$00 ) ;
8367: LD_INT 2100
8369: PPUSH
8370: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8374: LD_STRING hideTroll();
8376: PPUSH
8377: CALL_OW 559
// end ;
8381: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
8382: LD_EXP 1
8386: PUSH
8387: LD_EXP 27
8391: AND
8392: IFFALSE 8455
8394: GO 8396
8396: DISABLE
8397: LD_INT 0
8399: PPUSH
// begin p := 0 ;
8400: LD_ADDR_VAR 0 1
8404: PUSH
8405: LD_INT 0
8407: ST_TO_ADDR
// repeat game_speed := 1 ;
8408: LD_ADDR_OWVAR 65
8412: PUSH
8413: LD_INT 1
8415: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8416: LD_INT 35
8418: PPUSH
8419: CALL_OW 67
// p := p + 1 ;
8423: LD_ADDR_VAR 0 1
8427: PUSH
8428: LD_VAR 0 1
8432: PUSH
8433: LD_INT 1
8435: PLUS
8436: ST_TO_ADDR
// until p >= 60 ;
8437: LD_VAR 0 1
8441: PUSH
8442: LD_INT 60
8444: GREATEREQUAL
8445: IFFALSE 8408
// game_speed := 4 ;
8447: LD_ADDR_OWVAR 65
8451: PUSH
8452: LD_INT 4
8454: ST_TO_ADDR
// end ;
8455: PPOPN 1
8457: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
8458: LD_EXP 1
8462: PUSH
8463: LD_EXP 28
8467: AND
8468: IFFALSE 8614
8470: GO 8472
8472: DISABLE
8473: LD_INT 0
8475: PPUSH
8476: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8477: LD_ADDR_VAR 0 1
8481: PUSH
8482: LD_INT 22
8484: PUSH
8485: LD_OWVAR 2
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: PUSH
8494: LD_INT 2
8496: PUSH
8497: LD_INT 30
8499: PUSH
8500: LD_INT 0
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PUSH
8507: LD_INT 30
8509: PUSH
8510: LD_INT 1
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: LIST
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: PPUSH
8526: CALL_OW 69
8530: ST_TO_ADDR
// if not depot then
8531: LD_VAR 0 1
8535: NOT
8536: IFFALSE 8540
// exit ;
8538: GO 8614
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
8540: LD_ADDR_VAR 0 2
8544: PUSH
8545: LD_VAR 0 1
8549: PUSH
8550: LD_INT 1
8552: PPUSH
8553: LD_VAR 0 1
8557: PPUSH
8558: CALL_OW 12
8562: ARRAY
8563: PPUSH
8564: CALL_OW 274
8568: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
8569: LD_VAR 0 2
8573: PPUSH
8574: LD_INT 1
8576: PPUSH
8577: LD_INT 0
8579: PPUSH
8580: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
8584: LD_VAR 0 2
8588: PPUSH
8589: LD_INT 2
8591: PPUSH
8592: LD_INT 0
8594: PPUSH
8595: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
8599: LD_VAR 0 2
8603: PPUSH
8604: LD_INT 3
8606: PPUSH
8607: LD_INT 0
8609: PPUSH
8610: CALL_OW 277
// end ;
8614: PPOPN 2
8616: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
8617: LD_EXP 1
8621: PUSH
8622: LD_EXP 29
8626: AND
8627: IFFALSE 8724
8629: GO 8631
8631: DISABLE
8632: LD_INT 0
8634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
8635: LD_ADDR_VAR 0 1
8639: PUSH
8640: LD_INT 22
8642: PUSH
8643: LD_OWVAR 2
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: PUSH
8652: LD_INT 21
8654: PUSH
8655: LD_INT 1
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PUSH
8662: LD_INT 3
8664: PUSH
8665: LD_INT 23
8667: PUSH
8668: LD_INT 0
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: PUSH
8675: EMPTY
8676: LIST
8677: LIST
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: LIST
8683: PPUSH
8684: CALL_OW 69
8688: ST_TO_ADDR
// if not tmp then
8689: LD_VAR 0 1
8693: NOT
8694: IFFALSE 8698
// exit ;
8696: GO 8724
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
8698: LD_VAR 0 1
8702: PUSH
8703: LD_INT 1
8705: PPUSH
8706: LD_VAR 0 1
8710: PPUSH
8711: CALL_OW 12
8715: ARRAY
8716: PPUSH
8717: LD_INT 200
8719: PPUSH
8720: CALL_OW 234
// end ;
8724: PPOPN 1
8726: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
8727: LD_EXP 1
8731: PUSH
8732: LD_EXP 30
8736: AND
8737: IFFALSE 8816
8739: GO 8741
8741: DISABLE
8742: LD_INT 0
8744: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
8745: LD_ADDR_VAR 0 1
8749: PUSH
8750: LD_INT 22
8752: PUSH
8753: LD_OWVAR 2
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PUSH
8762: LD_INT 21
8764: PUSH
8765: LD_INT 2
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: PPUSH
8776: CALL_OW 69
8780: ST_TO_ADDR
// if not tmp then
8781: LD_VAR 0 1
8785: NOT
8786: IFFALSE 8790
// exit ;
8788: GO 8816
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
8790: LD_VAR 0 1
8794: PUSH
8795: LD_INT 1
8797: PPUSH
8798: LD_VAR 0 1
8802: PPUSH
8803: CALL_OW 12
8807: ARRAY
8808: PPUSH
8809: LD_INT 60
8811: PPUSH
8812: CALL_OW 234
// end ;
8816: PPOPN 1
8818: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
8819: LD_EXP 1
8823: PUSH
8824: LD_EXP 31
8828: AND
8829: IFFALSE 8928
8831: GO 8833
8833: DISABLE
8834: LD_INT 0
8836: PPUSH
8837: PPUSH
// begin enable ;
8838: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
8839: LD_ADDR_VAR 0 1
8843: PUSH
8844: LD_INT 22
8846: PUSH
8847: LD_OWVAR 2
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PUSH
8856: LD_INT 61
8858: PUSH
8859: EMPTY
8860: LIST
8861: PUSH
8862: LD_INT 33
8864: PUSH
8865: LD_INT 2
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: LIST
8876: PPUSH
8877: CALL_OW 69
8881: ST_TO_ADDR
// if not tmp then
8882: LD_VAR 0 1
8886: NOT
8887: IFFALSE 8891
// exit ;
8889: GO 8928
// for i in tmp do
8891: LD_ADDR_VAR 0 2
8895: PUSH
8896: LD_VAR 0 1
8900: PUSH
8901: FOR_IN
8902: IFFALSE 8926
// if IsControledBy ( i ) then
8904: LD_VAR 0 2
8908: PPUSH
8909: CALL_OW 312
8913: IFFALSE 8924
// ComUnlink ( i ) ;
8915: LD_VAR 0 2
8919: PPUSH
8920: CALL_OW 136
8924: GO 8901
8926: POP
8927: POP
// end ;
8928: PPOPN 2
8930: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
8931: LD_EXP 1
8935: PUSH
8936: LD_EXP 32
8940: AND
8941: IFFALSE 9081
8943: GO 8945
8945: DISABLE
8946: LD_INT 0
8948: PPUSH
8949: PPUSH
// begin ToLua ( displayPowell(); ) ;
8950: LD_STRING displayPowell();
8952: PPUSH
8953: CALL_OW 559
// uc_side := 0 ;
8957: LD_ADDR_OWVAR 20
8961: PUSH
8962: LD_INT 0
8964: ST_TO_ADDR
// uc_nation := 2 ;
8965: LD_ADDR_OWVAR 21
8969: PUSH
8970: LD_INT 2
8972: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
8973: LD_ADDR_OWVAR 37
8977: PUSH
8978: LD_INT 14
8980: ST_TO_ADDR
// vc_engine := engine_siberite ;
8981: LD_ADDR_OWVAR 39
8985: PUSH
8986: LD_INT 3
8988: ST_TO_ADDR
// vc_control := control_apeman ;
8989: LD_ADDR_OWVAR 38
8993: PUSH
8994: LD_INT 5
8996: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
8997: LD_ADDR_OWVAR 40
9001: PUSH
9002: LD_INT 29
9004: ST_TO_ADDR
// un := CreateVehicle ;
9005: LD_ADDR_VAR 0 2
9009: PUSH
9010: CALL_OW 45
9014: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
9015: LD_VAR 0 2
9019: PPUSH
9020: LD_INT 1
9022: PPUSH
9023: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
9027: LD_INT 35
9029: PPUSH
9030: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
9034: LD_VAR 0 2
9038: PPUSH
9039: LD_INT 22
9041: PUSH
9042: LD_OWVAR 2
9046: PUSH
9047: EMPTY
9048: LIST
9049: LIST
9050: PPUSH
9051: CALL_OW 69
9055: PPUSH
9056: LD_VAR 0 2
9060: PPUSH
9061: CALL_OW 74
9065: PPUSH
9066: CALL_OW 115
// until IsDead ( un ) ;
9070: LD_VAR 0 2
9074: PPUSH
9075: CALL_OW 301
9079: IFFALSE 9027
// end ;
9081: PPOPN 2
9083: END
// every 0 0$1 trigger StreamModeActive and sStu do
9084: LD_EXP 1
9088: PUSH
9089: LD_EXP 40
9093: AND
9094: IFFALSE 9110
9096: GO 9098
9098: DISABLE
// begin ToLua ( displayStucuk(); ) ;
9099: LD_STRING displayStucuk();
9101: PPUSH
9102: CALL_OW 559
// ResetFog ;
9106: CALL_OW 335
// end ;
9110: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
9111: LD_EXP 1
9115: PUSH
9116: LD_EXP 33
9120: AND
9121: IFFALSE 9262
9123: GO 9125
9125: DISABLE
9126: LD_INT 0
9128: PPUSH
9129: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9130: LD_ADDR_VAR 0 2
9134: PUSH
9135: LD_INT 22
9137: PUSH
9138: LD_OWVAR 2
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: PUSH
9147: LD_INT 21
9149: PUSH
9150: LD_INT 1
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: PUSH
9157: EMPTY
9158: LIST
9159: LIST
9160: PPUSH
9161: CALL_OW 69
9165: ST_TO_ADDR
// if not tmp then
9166: LD_VAR 0 2
9170: NOT
9171: IFFALSE 9175
// exit ;
9173: GO 9262
// un := tmp [ rand ( 1 , tmp ) ] ;
9175: LD_ADDR_VAR 0 1
9179: PUSH
9180: LD_VAR 0 2
9184: PUSH
9185: LD_INT 1
9187: PPUSH
9188: LD_VAR 0 2
9192: PPUSH
9193: CALL_OW 12
9197: ARRAY
9198: ST_TO_ADDR
// SetSide ( un , 0 ) ;
9199: LD_VAR 0 1
9203: PPUSH
9204: LD_INT 0
9206: PPUSH
9207: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
9211: LD_VAR 0 1
9215: PPUSH
9216: LD_OWVAR 3
9220: PUSH
9221: LD_VAR 0 1
9225: DIFF
9226: PPUSH
9227: LD_VAR 0 1
9231: PPUSH
9232: CALL_OW 74
9236: PPUSH
9237: CALL_OW 115
// wait ( 0 0$20 ) ;
9241: LD_INT 700
9243: PPUSH
9244: CALL_OW 67
// SetSide ( un , your_side ) ;
9248: LD_VAR 0 1
9252: PPUSH
9253: LD_OWVAR 2
9257: PPUSH
9258: CALL_OW 235
// end ;
9262: PPOPN 2
9264: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
9265: LD_EXP 1
9269: PUSH
9270: LD_EXP 34
9274: AND
9275: IFFALSE 9381
9277: GO 9279
9279: DISABLE
9280: LD_INT 0
9282: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9283: LD_ADDR_VAR 0 1
9287: PUSH
9288: LD_INT 22
9290: PUSH
9291: LD_OWVAR 2
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: PUSH
9300: LD_INT 2
9302: PUSH
9303: LD_INT 30
9305: PUSH
9306: LD_INT 0
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: PUSH
9313: LD_INT 30
9315: PUSH
9316: LD_INT 1
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: LIST
9327: PUSH
9328: EMPTY
9329: LIST
9330: LIST
9331: PPUSH
9332: CALL_OW 69
9336: ST_TO_ADDR
// if not depot then
9337: LD_VAR 0 1
9341: NOT
9342: IFFALSE 9346
// exit ;
9344: GO 9381
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
9346: LD_VAR 0 1
9350: PUSH
9351: LD_INT 1
9353: ARRAY
9354: PPUSH
9355: CALL_OW 250
9359: PPUSH
9360: LD_VAR 0 1
9364: PUSH
9365: LD_INT 1
9367: ARRAY
9368: PPUSH
9369: CALL_OW 251
9373: PPUSH
9374: LD_INT 70
9376: PPUSH
9377: CALL_OW 495
// end ;
9381: PPOPN 1
9383: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
9384: LD_EXP 1
9388: PUSH
9389: LD_EXP 35
9393: AND
9394: IFFALSE 9605
9396: GO 9398
9398: DISABLE
9399: LD_INT 0
9401: PPUSH
9402: PPUSH
9403: PPUSH
9404: PPUSH
9405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9406: LD_ADDR_VAR 0 5
9410: PUSH
9411: LD_INT 22
9413: PUSH
9414: LD_OWVAR 2
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: PUSH
9423: LD_INT 21
9425: PUSH
9426: LD_INT 1
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: PPUSH
9437: CALL_OW 69
9441: ST_TO_ADDR
// if not tmp then
9442: LD_VAR 0 5
9446: NOT
9447: IFFALSE 9451
// exit ;
9449: GO 9605
// for i in tmp do
9451: LD_ADDR_VAR 0 1
9455: PUSH
9456: LD_VAR 0 5
9460: PUSH
9461: FOR_IN
9462: IFFALSE 9603
// begin d := rand ( 0 , 5 ) ;
9464: LD_ADDR_VAR 0 4
9468: PUSH
9469: LD_INT 0
9471: PPUSH
9472: LD_INT 5
9474: PPUSH
9475: CALL_OW 12
9479: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
9480: LD_ADDR_VAR 0 2
9484: PUSH
9485: LD_VAR 0 1
9489: PPUSH
9490: CALL_OW 250
9494: PPUSH
9495: LD_VAR 0 4
9499: PPUSH
9500: LD_INT 3
9502: PPUSH
9503: LD_INT 12
9505: PPUSH
9506: CALL_OW 12
9510: PPUSH
9511: CALL_OW 272
9515: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
9516: LD_ADDR_VAR 0 3
9520: PUSH
9521: LD_VAR 0 1
9525: PPUSH
9526: CALL_OW 251
9530: PPUSH
9531: LD_VAR 0 4
9535: PPUSH
9536: LD_INT 3
9538: PPUSH
9539: LD_INT 12
9541: PPUSH
9542: CALL_OW 12
9546: PPUSH
9547: CALL_OW 273
9551: ST_TO_ADDR
// if ValidHex ( x , y ) then
9552: LD_VAR 0 2
9556: PPUSH
9557: LD_VAR 0 3
9561: PPUSH
9562: CALL_OW 488
9566: IFFALSE 9601
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
9568: LD_VAR 0 1
9572: PPUSH
9573: LD_VAR 0 2
9577: PPUSH
9578: LD_VAR 0 3
9582: PPUSH
9583: LD_INT 3
9585: PPUSH
9586: LD_INT 6
9588: PPUSH
9589: CALL_OW 12
9593: PPUSH
9594: LD_INT 1
9596: PPUSH
9597: CALL_OW 483
// end ;
9601: GO 9461
9603: POP
9604: POP
// end ;
9605: PPOPN 5
9607: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
9608: LD_EXP 1
9612: PUSH
9613: LD_EXP 36
9617: AND
9618: IFFALSE 9712
9620: GO 9622
9622: DISABLE
9623: LD_INT 0
9625: PPUSH
9626: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
9627: LD_ADDR_VAR 0 2
9631: PUSH
9632: LD_INT 22
9634: PUSH
9635: LD_OWVAR 2
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: LD_INT 32
9646: PUSH
9647: LD_INT 1
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: PUSH
9654: LD_INT 21
9656: PUSH
9657: LD_INT 2
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: LIST
9668: PPUSH
9669: CALL_OW 69
9673: ST_TO_ADDR
// if not tmp then
9674: LD_VAR 0 2
9678: NOT
9679: IFFALSE 9683
// exit ;
9681: GO 9712
// for i in tmp do
9683: LD_ADDR_VAR 0 1
9687: PUSH
9688: LD_VAR 0 2
9692: PUSH
9693: FOR_IN
9694: IFFALSE 9710
// SetFuel ( i , 0 ) ;
9696: LD_VAR 0 1
9700: PPUSH
9701: LD_INT 0
9703: PPUSH
9704: CALL_OW 240
9708: GO 9693
9710: POP
9711: POP
// end ;
9712: PPOPN 2
9714: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
9715: LD_EXP 1
9719: PUSH
9720: LD_EXP 37
9724: AND
9725: IFFALSE 9791
9727: GO 9729
9729: DISABLE
9730: LD_INT 0
9732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
9733: LD_ADDR_VAR 0 1
9737: PUSH
9738: LD_INT 22
9740: PUSH
9741: LD_OWVAR 2
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: PUSH
9750: LD_INT 30
9752: PUSH
9753: LD_INT 29
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: PPUSH
9764: CALL_OW 69
9768: ST_TO_ADDR
// if not tmp then
9769: LD_VAR 0 1
9773: NOT
9774: IFFALSE 9778
// exit ;
9776: GO 9791
// DestroyUnit ( tmp [ 1 ] ) ;
9778: LD_VAR 0 1
9782: PUSH
9783: LD_INT 1
9785: ARRAY
9786: PPUSH
9787: CALL_OW 65
// end ;
9791: PPOPN 1
9793: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
9794: LD_EXP 1
9798: PUSH
9799: LD_EXP 39
9803: AND
9804: IFFALSE 9933
9806: GO 9808
9808: DISABLE
9809: LD_INT 0
9811: PPUSH
// begin uc_side := 0 ;
9812: LD_ADDR_OWVAR 20
9816: PUSH
9817: LD_INT 0
9819: ST_TO_ADDR
// uc_nation := nation_arabian ;
9820: LD_ADDR_OWVAR 21
9824: PUSH
9825: LD_INT 2
9827: ST_TO_ADDR
// hc_gallery :=  ;
9828: LD_ADDR_OWVAR 33
9832: PUSH
9833: LD_STRING 
9835: ST_TO_ADDR
// hc_name :=  ;
9836: LD_ADDR_OWVAR 26
9840: PUSH
9841: LD_STRING 
9843: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
9844: LD_INT 1
9846: PPUSH
9847: LD_INT 11
9849: PPUSH
9850: LD_INT 10
9852: PPUSH
9853: CALL_OW 380
// un := CreateHuman ;
9857: LD_ADDR_VAR 0 1
9861: PUSH
9862: CALL_OW 44
9866: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
9867: LD_VAR 0 1
9871: PPUSH
9872: LD_INT 1
9874: PPUSH
9875: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
9879: LD_INT 35
9881: PPUSH
9882: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
9886: LD_VAR 0 1
9890: PPUSH
9891: LD_INT 22
9893: PUSH
9894: LD_OWVAR 2
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PPUSH
9903: CALL_OW 69
9907: PPUSH
9908: LD_VAR 0 1
9912: PPUSH
9913: CALL_OW 74
9917: PPUSH
9918: CALL_OW 115
// until IsDead ( un ) ;
9922: LD_VAR 0 1
9926: PPUSH
9927: CALL_OW 301
9931: IFFALSE 9879
// end ;
9933: PPOPN 1
9935: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
9936: LD_EXP 1
9940: PUSH
9941: LD_EXP 41
9945: AND
9946: IFFALSE 9958
9948: GO 9950
9950: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
9951: LD_STRING earthquake(getX(game), 0, 32)
9953: PPUSH
9954: CALL_OW 559
9958: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
9959: LD_EXP 1
9963: PUSH
9964: LD_EXP 42
9968: AND
9969: IFFALSE 10060
9971: GO 9973
9973: DISABLE
9974: LD_INT 0
9976: PPUSH
// begin enable ;
9977: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
9978: LD_ADDR_VAR 0 1
9982: PUSH
9983: LD_INT 22
9985: PUSH
9986: LD_OWVAR 2
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PUSH
9995: LD_INT 21
9997: PUSH
9998: LD_INT 2
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: PUSH
10005: LD_INT 33
10007: PUSH
10008: LD_INT 3
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: LIST
10019: PPUSH
10020: CALL_OW 69
10024: ST_TO_ADDR
// if not tmp then
10025: LD_VAR 0 1
10029: NOT
10030: IFFALSE 10034
// exit ;
10032: GO 10060
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
10034: LD_VAR 0 1
10038: PUSH
10039: LD_INT 1
10041: PPUSH
10042: LD_VAR 0 1
10046: PPUSH
10047: CALL_OW 12
10051: ARRAY
10052: PPUSH
10053: LD_INT 1
10055: PPUSH
10056: CALL_OW 234
// end ;
10060: PPOPN 1
10062: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
10063: LD_EXP 1
10067: PUSH
10068: LD_EXP 43
10072: AND
10073: IFFALSE 10214
10075: GO 10077
10077: DISABLE
10078: LD_INT 0
10080: PPUSH
10081: PPUSH
10082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10083: LD_ADDR_VAR 0 3
10087: PUSH
10088: LD_INT 22
10090: PUSH
10091: LD_OWVAR 2
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PUSH
10100: LD_INT 25
10102: PUSH
10103: LD_INT 1
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: PPUSH
10114: CALL_OW 69
10118: ST_TO_ADDR
// if not tmp then
10119: LD_VAR 0 3
10123: NOT
10124: IFFALSE 10128
// exit ;
10126: GO 10214
// un := tmp [ rand ( 1 , tmp ) ] ;
10128: LD_ADDR_VAR 0 2
10132: PUSH
10133: LD_VAR 0 3
10137: PUSH
10138: LD_INT 1
10140: PPUSH
10141: LD_VAR 0 3
10145: PPUSH
10146: CALL_OW 12
10150: ARRAY
10151: ST_TO_ADDR
// if Crawls ( un ) then
10152: LD_VAR 0 2
10156: PPUSH
10157: CALL_OW 318
10161: IFFALSE 10172
// ComWalk ( un ) ;
10163: LD_VAR 0 2
10167: PPUSH
10168: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
10172: LD_VAR 0 2
10176: PPUSH
10177: LD_INT 9
10179: PPUSH
10180: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
10184: LD_INT 28
10186: PPUSH
10187: LD_OWVAR 2
10191: PPUSH
10192: LD_INT 2
10194: PPUSH
10195: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
10199: LD_INT 29
10201: PPUSH
10202: LD_OWVAR 2
10206: PPUSH
10207: LD_INT 2
10209: PPUSH
10210: CALL_OW 322
// end ;
10214: PPOPN 3
10216: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
10217: LD_EXP 1
10221: PUSH
10222: LD_EXP 44
10226: AND
10227: IFFALSE 10338
10229: GO 10231
10231: DISABLE
10232: LD_INT 0
10234: PPUSH
10235: PPUSH
10236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10237: LD_ADDR_VAR 0 3
10241: PUSH
10242: LD_INT 22
10244: PUSH
10245: LD_OWVAR 2
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: LD_INT 25
10256: PUSH
10257: LD_INT 1
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: PPUSH
10268: CALL_OW 69
10272: ST_TO_ADDR
// if not tmp then
10273: LD_VAR 0 3
10277: NOT
10278: IFFALSE 10282
// exit ;
10280: GO 10338
// un := tmp [ rand ( 1 , tmp ) ] ;
10282: LD_ADDR_VAR 0 2
10286: PUSH
10287: LD_VAR 0 3
10291: PUSH
10292: LD_INT 1
10294: PPUSH
10295: LD_VAR 0 3
10299: PPUSH
10300: CALL_OW 12
10304: ARRAY
10305: ST_TO_ADDR
// if Crawls ( un ) then
10306: LD_VAR 0 2
10310: PPUSH
10311: CALL_OW 318
10315: IFFALSE 10326
// ComWalk ( un ) ;
10317: LD_VAR 0 2
10321: PPUSH
10322: CALL_OW 138
// SetClass ( un , class_mortar ) ;
10326: LD_VAR 0 2
10330: PPUSH
10331: LD_INT 8
10333: PPUSH
10334: CALL_OW 336
// end ;
10338: PPOPN 3
10340: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
10341: LD_EXP 1
10345: PUSH
10346: LD_EXP 45
10350: AND
10351: IFFALSE 10495
10353: GO 10355
10355: DISABLE
10356: LD_INT 0
10358: PPUSH
10359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
10360: LD_ADDR_VAR 0 2
10364: PUSH
10365: LD_INT 22
10367: PUSH
10368: LD_OWVAR 2
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: LD_INT 21
10379: PUSH
10380: LD_INT 2
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: LD_INT 2
10389: PUSH
10390: LD_INT 34
10392: PUSH
10393: LD_INT 12
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: LD_INT 34
10402: PUSH
10403: LD_INT 51
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: PUSH
10410: LD_INT 34
10412: PUSH
10413: LD_INT 32
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: LIST
10430: PPUSH
10431: CALL_OW 69
10435: ST_TO_ADDR
// if not tmp then
10436: LD_VAR 0 2
10440: NOT
10441: IFFALSE 10445
// exit ;
10443: GO 10495
// for i in tmp do
10445: LD_ADDR_VAR 0 1
10449: PUSH
10450: LD_VAR 0 2
10454: PUSH
10455: FOR_IN
10456: IFFALSE 10493
// if GetCargo ( i , mat_artifact ) = 0 then
10458: LD_VAR 0 1
10462: PPUSH
10463: LD_INT 4
10465: PPUSH
10466: CALL_OW 289
10470: PUSH
10471: LD_INT 0
10473: EQUAL
10474: IFFALSE 10491
// SetCargo ( i , mat_siberit , 100 ) ;
10476: LD_VAR 0 1
10480: PPUSH
10481: LD_INT 3
10483: PPUSH
10484: LD_INT 100
10486: PPUSH
10487: CALL_OW 290
10491: GO 10455
10493: POP
10494: POP
// end ;
10495: PPOPN 2
10497: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
10498: LD_EXP 1
10502: PUSH
10503: LD_EXP 46
10507: AND
10508: IFFALSE 10691
10510: GO 10512
10512: DISABLE
10513: LD_INT 0
10515: PPUSH
10516: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
10517: LD_ADDR_VAR 0 2
10521: PUSH
10522: LD_INT 22
10524: PUSH
10525: LD_OWVAR 2
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: PPUSH
10534: CALL_OW 69
10538: ST_TO_ADDR
// if not tmp then
10539: LD_VAR 0 2
10543: NOT
10544: IFFALSE 10548
// exit ;
10546: GO 10691
// for i := 1 to 2 do
10548: LD_ADDR_VAR 0 1
10552: PUSH
10553: DOUBLE
10554: LD_INT 1
10556: DEC
10557: ST_TO_ADDR
10558: LD_INT 2
10560: PUSH
10561: FOR_TO
10562: IFFALSE 10689
// begin uc_side := your_side ;
10564: LD_ADDR_OWVAR 20
10568: PUSH
10569: LD_OWVAR 2
10573: ST_TO_ADDR
// uc_nation := nation_american ;
10574: LD_ADDR_OWVAR 21
10578: PUSH
10579: LD_INT 1
10581: ST_TO_ADDR
// vc_chassis := us_morphling ;
10582: LD_ADDR_OWVAR 37
10586: PUSH
10587: LD_INT 5
10589: ST_TO_ADDR
// vc_engine := engine_siberite ;
10590: LD_ADDR_OWVAR 39
10594: PUSH
10595: LD_INT 3
10597: ST_TO_ADDR
// vc_control := control_computer ;
10598: LD_ADDR_OWVAR 38
10602: PUSH
10603: LD_INT 3
10605: ST_TO_ADDR
// vc_weapon := us_double_laser ;
10606: LD_ADDR_OWVAR 40
10610: PUSH
10611: LD_INT 10
10613: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
10614: LD_VAR 0 2
10618: PUSH
10619: LD_INT 1
10621: ARRAY
10622: PPUSH
10623: CALL_OW 310
10627: NOT
10628: IFFALSE 10675
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
10630: CALL_OW 45
10634: PPUSH
10635: LD_VAR 0 2
10639: PUSH
10640: LD_INT 1
10642: ARRAY
10643: PPUSH
10644: CALL_OW 250
10648: PPUSH
10649: LD_VAR 0 2
10653: PUSH
10654: LD_INT 1
10656: ARRAY
10657: PPUSH
10658: CALL_OW 251
10662: PPUSH
10663: LD_INT 12
10665: PPUSH
10666: LD_INT 1
10668: PPUSH
10669: CALL_OW 50
10673: GO 10687
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
10675: CALL_OW 45
10679: PPUSH
10680: LD_INT 1
10682: PPUSH
10683: CALL_OW 51
// end ;
10687: GO 10561
10689: POP
10690: POP
// end ;
10691: PPOPN 2
10693: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
10694: LD_EXP 1
10698: PUSH
10699: LD_EXP 47
10703: AND
10704: IFFALSE 10926
10706: GO 10708
10708: DISABLE
10709: LD_INT 0
10711: PPUSH
10712: PPUSH
10713: PPUSH
10714: PPUSH
10715: PPUSH
10716: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10717: LD_ADDR_VAR 0 6
10721: PUSH
10722: LD_INT 22
10724: PUSH
10725: LD_OWVAR 2
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: PUSH
10734: LD_INT 21
10736: PUSH
10737: LD_INT 1
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: PUSH
10744: LD_INT 3
10746: PUSH
10747: LD_INT 23
10749: PUSH
10750: LD_INT 0
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PUSH
10761: EMPTY
10762: LIST
10763: LIST
10764: LIST
10765: PPUSH
10766: CALL_OW 69
10770: ST_TO_ADDR
// if not tmp then
10771: LD_VAR 0 6
10775: NOT
10776: IFFALSE 10780
// exit ;
10778: GO 10926
// s1 := rand ( 1 , 4 ) ;
10780: LD_ADDR_VAR 0 2
10784: PUSH
10785: LD_INT 1
10787: PPUSH
10788: LD_INT 4
10790: PPUSH
10791: CALL_OW 12
10795: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
10796: LD_ADDR_VAR 0 4
10800: PUSH
10801: LD_VAR 0 6
10805: PUSH
10806: LD_INT 1
10808: ARRAY
10809: PPUSH
10810: LD_VAR 0 2
10814: PPUSH
10815: CALL_OW 259
10819: ST_TO_ADDR
// if s1 = 1 then
10820: LD_VAR 0 2
10824: PUSH
10825: LD_INT 1
10827: EQUAL
10828: IFFALSE 10848
// s2 := rand ( 2 , 4 ) else
10830: LD_ADDR_VAR 0 3
10834: PUSH
10835: LD_INT 2
10837: PPUSH
10838: LD_INT 4
10840: PPUSH
10841: CALL_OW 12
10845: ST_TO_ADDR
10846: GO 10856
// s2 := 1 ;
10848: LD_ADDR_VAR 0 3
10852: PUSH
10853: LD_INT 1
10855: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
10856: LD_ADDR_VAR 0 5
10860: PUSH
10861: LD_VAR 0 6
10865: PUSH
10866: LD_INT 1
10868: ARRAY
10869: PPUSH
10870: LD_VAR 0 3
10874: PPUSH
10875: CALL_OW 259
10879: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
10880: LD_VAR 0 6
10884: PUSH
10885: LD_INT 1
10887: ARRAY
10888: PPUSH
10889: LD_VAR 0 2
10893: PPUSH
10894: LD_VAR 0 5
10898: PPUSH
10899: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
10903: LD_VAR 0 6
10907: PUSH
10908: LD_INT 1
10910: ARRAY
10911: PPUSH
10912: LD_VAR 0 3
10916: PPUSH
10917: LD_VAR 0 4
10921: PPUSH
10922: CALL_OW 237
// end ;
10926: PPOPN 6
10928: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
10929: LD_EXP 1
10933: PUSH
10934: LD_EXP 48
10938: AND
10939: IFFALSE 11018
10941: GO 10943
10943: DISABLE
10944: LD_INT 0
10946: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
10947: LD_ADDR_VAR 0 1
10951: PUSH
10952: LD_INT 22
10954: PUSH
10955: LD_OWVAR 2
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PUSH
10964: LD_INT 30
10966: PUSH
10967: LD_INT 3
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: PPUSH
10978: CALL_OW 69
10982: ST_TO_ADDR
// if not tmp then
10983: LD_VAR 0 1
10987: NOT
10988: IFFALSE 10992
// exit ;
10990: GO 11018
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
10992: LD_VAR 0 1
10996: PUSH
10997: LD_INT 1
10999: PPUSH
11000: LD_VAR 0 1
11004: PPUSH
11005: CALL_OW 12
11009: ARRAY
11010: PPUSH
11011: LD_INT 1
11013: PPUSH
11014: CALL_OW 234
// end ;
11018: PPOPN 1
11020: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
11021: LD_EXP 1
11025: PUSH
11026: LD_EXP 49
11030: AND
11031: IFFALSE 11143
11033: GO 11035
11035: DISABLE
11036: LD_INT 0
11038: PPUSH
11039: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
11040: LD_ADDR_VAR 0 2
11044: PUSH
11045: LD_INT 22
11047: PUSH
11048: LD_OWVAR 2
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: PUSH
11057: LD_INT 2
11059: PUSH
11060: LD_INT 30
11062: PUSH
11063: LD_INT 27
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PUSH
11070: LD_INT 30
11072: PUSH
11073: LD_INT 26
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PUSH
11080: LD_INT 30
11082: PUSH
11083: LD_INT 28
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: PPUSH
11100: CALL_OW 69
11104: ST_TO_ADDR
// if not tmp then
11105: LD_VAR 0 2
11109: NOT
11110: IFFALSE 11114
// exit ;
11112: GO 11143
// for i in tmp do
11114: LD_ADDR_VAR 0 1
11118: PUSH
11119: LD_VAR 0 2
11123: PUSH
11124: FOR_IN
11125: IFFALSE 11141
// SetLives ( i , 1 ) ;
11127: LD_VAR 0 1
11131: PPUSH
11132: LD_INT 1
11134: PPUSH
11135: CALL_OW 234
11139: GO 11124
11141: POP
11142: POP
// end ;
11143: PPOPN 2
11145: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
11146: LD_EXP 1
11150: PUSH
11151: LD_EXP 50
11155: AND
11156: IFFALSE 11443
11158: GO 11160
11160: DISABLE
11161: LD_INT 0
11163: PPUSH
11164: PPUSH
11165: PPUSH
// begin i := rand ( 1 , 7 ) ;
11166: LD_ADDR_VAR 0 1
11170: PUSH
11171: LD_INT 1
11173: PPUSH
11174: LD_INT 7
11176: PPUSH
11177: CALL_OW 12
11181: ST_TO_ADDR
// case i of 1 :
11182: LD_VAR 0 1
11186: PUSH
11187: LD_INT 1
11189: DOUBLE
11190: EQUAL
11191: IFTRUE 11195
11193: GO 11205
11195: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
11196: LD_STRING earthquake(getX(game), 0, 32)
11198: PPUSH
11199: CALL_OW 559
11203: GO 11443
11205: LD_INT 2
11207: DOUBLE
11208: EQUAL
11209: IFTRUE 11213
11211: GO 11227
11213: POP
// begin ToLua ( displayStucuk(); ) ;
11214: LD_STRING displayStucuk();
11216: PPUSH
11217: CALL_OW 559
// ResetFog ;
11221: CALL_OW 335
// end ; 3 :
11225: GO 11443
11227: LD_INT 3
11229: DOUBLE
11230: EQUAL
11231: IFTRUE 11235
11233: GO 11339
11235: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11236: LD_ADDR_VAR 0 2
11240: PUSH
11241: LD_INT 22
11243: PUSH
11244: LD_OWVAR 2
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: PUSH
11253: LD_INT 25
11255: PUSH
11256: LD_INT 1
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PPUSH
11267: CALL_OW 69
11271: ST_TO_ADDR
// if not tmp then
11272: LD_VAR 0 2
11276: NOT
11277: IFFALSE 11281
// exit ;
11279: GO 11443
// un := tmp [ rand ( 1 , tmp ) ] ;
11281: LD_ADDR_VAR 0 3
11285: PUSH
11286: LD_VAR 0 2
11290: PUSH
11291: LD_INT 1
11293: PPUSH
11294: LD_VAR 0 2
11298: PPUSH
11299: CALL_OW 12
11303: ARRAY
11304: ST_TO_ADDR
// if Crawls ( un ) then
11305: LD_VAR 0 3
11309: PPUSH
11310: CALL_OW 318
11314: IFFALSE 11325
// ComWalk ( un ) ;
11316: LD_VAR 0 3
11320: PPUSH
11321: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11325: LD_VAR 0 3
11329: PPUSH
11330: LD_INT 8
11332: PPUSH
11333: CALL_OW 336
// end ; 4 :
11337: GO 11443
11339: LD_INT 4
11341: DOUBLE
11342: EQUAL
11343: IFTRUE 11347
11345: GO 11421
11347: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11348: LD_ADDR_VAR 0 2
11352: PUSH
11353: LD_INT 22
11355: PUSH
11356: LD_OWVAR 2
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: LD_INT 30
11367: PUSH
11368: LD_INT 29
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PPUSH
11379: CALL_OW 69
11383: ST_TO_ADDR
// if not tmp then
11384: LD_VAR 0 2
11388: NOT
11389: IFFALSE 11393
// exit ;
11391: GO 11443
// CenterNowOnUnits ( tmp [ 1 ] ) ;
11393: LD_VAR 0 2
11397: PUSH
11398: LD_INT 1
11400: ARRAY
11401: PPUSH
11402: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
11406: LD_VAR 0 2
11410: PUSH
11411: LD_INT 1
11413: ARRAY
11414: PPUSH
11415: CALL_OW 65
// end ; 5 .. 7 :
11419: GO 11443
11421: LD_INT 5
11423: DOUBLE
11424: GREATEREQUAL
11425: IFFALSE 11433
11427: LD_INT 7
11429: DOUBLE
11430: LESSEQUAL
11431: IFTRUE 11435
11433: GO 11442
11435: POP
// StreamSibBomb ; end ;
11436: CALL 7680 0 0
11440: GO 11443
11442: POP
// end ;
11443: PPOPN 3
11445: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
11446: LD_EXP 1
11450: PUSH
11451: LD_EXP 51
11455: AND
11456: IFFALSE 11612
11458: GO 11460
11460: DISABLE
11461: LD_INT 0
11463: PPUSH
11464: PPUSH
11465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
11466: LD_ADDR_VAR 0 2
11470: PUSH
11471: LD_INT 81
11473: PUSH
11474: LD_OWVAR 2
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PUSH
11483: LD_INT 2
11485: PUSH
11486: LD_INT 21
11488: PUSH
11489: LD_INT 1
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PUSH
11496: LD_INT 21
11498: PUSH
11499: LD_INT 2
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: LIST
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PPUSH
11515: CALL_OW 69
11519: ST_TO_ADDR
// if not tmp then
11520: LD_VAR 0 2
11524: NOT
11525: IFFALSE 11529
// exit ;
11527: GO 11612
// p := 0 ;
11529: LD_ADDR_VAR 0 3
11533: PUSH
11534: LD_INT 0
11536: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11537: LD_INT 35
11539: PPUSH
11540: CALL_OW 67
// p := p + 1 ;
11544: LD_ADDR_VAR 0 3
11548: PUSH
11549: LD_VAR 0 3
11553: PUSH
11554: LD_INT 1
11556: PLUS
11557: ST_TO_ADDR
// for i in tmp do
11558: LD_ADDR_VAR 0 1
11562: PUSH
11563: LD_VAR 0 2
11567: PUSH
11568: FOR_IN
11569: IFFALSE 11600
// if GetLives ( i ) < 1000 then
11571: LD_VAR 0 1
11575: PPUSH
11576: CALL_OW 256
11580: PUSH
11581: LD_INT 1000
11583: LESS
11584: IFFALSE 11598
// SetLives ( i , 1000 ) ;
11586: LD_VAR 0 1
11590: PPUSH
11591: LD_INT 1000
11593: PPUSH
11594: CALL_OW 234
11598: GO 11568
11600: POP
11601: POP
// until p > 20 ;
11602: LD_VAR 0 3
11606: PUSH
11607: LD_INT 20
11609: GREATER
11610: IFFALSE 11537
// end ;
11612: PPOPN 3
11614: END
// every 0 0$1 trigger StreamModeActive and sTime do
11615: LD_EXP 1
11619: PUSH
11620: LD_EXP 52
11624: AND
11625: IFFALSE 11660
11627: GO 11629
11629: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
11630: LD_INT 28
11632: PPUSH
11633: LD_OWVAR 2
11637: PPUSH
11638: LD_INT 2
11640: PPUSH
11641: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
11645: LD_INT 30
11647: PPUSH
11648: LD_OWVAR 2
11652: PPUSH
11653: LD_INT 2
11655: PPUSH
11656: CALL_OW 322
// end ;
11660: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
11661: LD_EXP 1
11665: PUSH
11666: LD_EXP 53
11670: AND
11671: IFFALSE 11792
11673: GO 11675
11675: DISABLE
11676: LD_INT 0
11678: PPUSH
11679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11680: LD_ADDR_VAR 0 2
11684: PUSH
11685: LD_INT 22
11687: PUSH
11688: LD_OWVAR 2
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: LD_INT 21
11699: PUSH
11700: LD_INT 1
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: LD_INT 3
11709: PUSH
11710: LD_INT 23
11712: PUSH
11713: LD_INT 0
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: LIST
11728: PPUSH
11729: CALL_OW 69
11733: ST_TO_ADDR
// if not tmp then
11734: LD_VAR 0 2
11738: NOT
11739: IFFALSE 11743
// exit ;
11741: GO 11792
// for i in tmp do
11743: LD_ADDR_VAR 0 1
11747: PUSH
11748: LD_VAR 0 2
11752: PUSH
11753: FOR_IN
11754: IFFALSE 11790
// begin if Crawls ( i ) then
11756: LD_VAR 0 1
11760: PPUSH
11761: CALL_OW 318
11765: IFFALSE 11776
// ComWalk ( i ) ;
11767: LD_VAR 0 1
11771: PPUSH
11772: CALL_OW 138
// SetClass ( i , 2 ) ;
11776: LD_VAR 0 1
11780: PPUSH
11781: LD_INT 2
11783: PPUSH
11784: CALL_OW 336
// end ;
11788: GO 11753
11790: POP
11791: POP
// end ;
11792: PPOPN 2
11794: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
11795: LD_EXP 1
11799: PUSH
11800: LD_EXP 54
11804: AND
11805: IFFALSE 12093
11807: GO 11809
11809: DISABLE
11810: LD_INT 0
11812: PPUSH
11813: PPUSH
11814: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
11815: LD_OWVAR 2
11819: PPUSH
11820: LD_INT 9
11822: PPUSH
11823: LD_INT 1
11825: PPUSH
11826: LD_INT 1
11828: PPUSH
11829: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
11833: LD_INT 9
11835: PPUSH
11836: LD_OWVAR 2
11840: PPUSH
11841: CALL_OW 343
// uc_side := 9 ;
11845: LD_ADDR_OWVAR 20
11849: PUSH
11850: LD_INT 9
11852: ST_TO_ADDR
// uc_nation := 2 ;
11853: LD_ADDR_OWVAR 21
11857: PUSH
11858: LD_INT 2
11860: ST_TO_ADDR
// hc_name := Dark Warrior ;
11861: LD_ADDR_OWVAR 26
11865: PUSH
11866: LD_STRING Dark Warrior
11868: ST_TO_ADDR
// hc_gallery :=  ;
11869: LD_ADDR_OWVAR 33
11873: PUSH
11874: LD_STRING 
11876: ST_TO_ADDR
// hc_noskilllimit := true ;
11877: LD_ADDR_OWVAR 76
11881: PUSH
11882: LD_INT 1
11884: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
11885: LD_ADDR_OWVAR 31
11889: PUSH
11890: LD_INT 30
11892: PUSH
11893: LD_INT 30
11895: PUSH
11896: LD_INT 30
11898: PUSH
11899: LD_INT 30
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: ST_TO_ADDR
// un := CreateHuman ;
11908: LD_ADDR_VAR 0 3
11912: PUSH
11913: CALL_OW 44
11917: ST_TO_ADDR
// hc_noskilllimit := false ;
11918: LD_ADDR_OWVAR 76
11922: PUSH
11923: LD_INT 0
11925: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11926: LD_VAR 0 3
11930: PPUSH
11931: LD_INT 1
11933: PPUSH
11934: CALL_OW 51
// ToLua ( playRanger() ) ;
11938: LD_STRING playRanger()
11940: PPUSH
11941: CALL_OW 559
// p := 0 ;
11945: LD_ADDR_VAR 0 2
11949: PUSH
11950: LD_INT 0
11952: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11953: LD_INT 35
11955: PPUSH
11956: CALL_OW 67
// p := p + 1 ;
11960: LD_ADDR_VAR 0 2
11964: PUSH
11965: LD_VAR 0 2
11969: PUSH
11970: LD_INT 1
11972: PLUS
11973: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
11974: LD_VAR 0 3
11978: PPUSH
11979: CALL_OW 256
11983: PUSH
11984: LD_INT 1000
11986: LESS
11987: IFFALSE 12001
// SetLives ( un , 1000 ) ;
11989: LD_VAR 0 3
11993: PPUSH
11994: LD_INT 1000
11996: PPUSH
11997: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
12001: LD_VAR 0 3
12005: PPUSH
12006: LD_INT 81
12008: PUSH
12009: LD_OWVAR 2
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PUSH
12018: LD_INT 91
12020: PUSH
12021: LD_VAR 0 3
12025: PUSH
12026: LD_INT 30
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: LIST
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PPUSH
12038: CALL_OW 69
12042: PPUSH
12043: LD_VAR 0 3
12047: PPUSH
12048: CALL_OW 74
12052: PPUSH
12053: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
12057: LD_VAR 0 2
12061: PUSH
12062: LD_INT 80
12064: GREATER
12065: PUSH
12066: LD_VAR 0 3
12070: PPUSH
12071: CALL_OW 301
12075: OR
12076: IFFALSE 11953
// if un then
12078: LD_VAR 0 3
12082: IFFALSE 12093
// RemoveUnit ( un ) ;
12084: LD_VAR 0 3
12088: PPUSH
12089: CALL_OW 64
// end ;
12093: PPOPN 3
12095: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
12096: LD_EXP 55
12100: IFFALSE 12216
12102: GO 12104
12104: DISABLE
12105: LD_INT 0
12107: PPUSH
12108: PPUSH
12109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12110: LD_ADDR_VAR 0 2
12114: PUSH
12115: LD_INT 81
12117: PUSH
12118: LD_OWVAR 2
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 21
12129: PUSH
12130: LD_INT 1
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PPUSH
12141: CALL_OW 69
12145: ST_TO_ADDR
// ToLua ( playComputer() ) ;
12146: LD_STRING playComputer()
12148: PPUSH
12149: CALL_OW 559
// if not tmp then
12153: LD_VAR 0 2
12157: NOT
12158: IFFALSE 12162
// exit ;
12160: GO 12216
// for i in tmp do
12162: LD_ADDR_VAR 0 1
12166: PUSH
12167: LD_VAR 0 2
12171: PUSH
12172: FOR_IN
12173: IFFALSE 12214
// for j := 1 to 4 do
12175: LD_ADDR_VAR 0 3
12179: PUSH
12180: DOUBLE
12181: LD_INT 1
12183: DEC
12184: ST_TO_ADDR
12185: LD_INT 4
12187: PUSH
12188: FOR_TO
12189: IFFALSE 12210
// SetSkill ( i , j , 10 ) ;
12191: LD_VAR 0 1
12195: PPUSH
12196: LD_VAR 0 3
12200: PPUSH
12201: LD_INT 10
12203: PPUSH
12204: CALL_OW 237
12208: GO 12188
12210: POP
12211: POP
12212: GO 12172
12214: POP
12215: POP
// end ;
12216: PPOPN 3
12218: END
// every 0 0$1 trigger s30 do var i , tmp ;
12219: LD_EXP 56
12223: IFFALSE 12292
12225: GO 12227
12227: DISABLE
12228: LD_INT 0
12230: PPUSH
12231: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12232: LD_ADDR_VAR 0 2
12236: PUSH
12237: LD_INT 22
12239: PUSH
12240: LD_OWVAR 2
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PPUSH
12249: CALL_OW 69
12253: ST_TO_ADDR
// if not tmp then
12254: LD_VAR 0 2
12258: NOT
12259: IFFALSE 12263
// exit ;
12261: GO 12292
// for i in tmp do
12263: LD_ADDR_VAR 0 1
12267: PUSH
12268: LD_VAR 0 2
12272: PUSH
12273: FOR_IN
12274: IFFALSE 12290
// SetLives ( i , 300 ) ;
12276: LD_VAR 0 1
12280: PPUSH
12281: LD_INT 300
12283: PPUSH
12284: CALL_OW 234
12288: GO 12273
12290: POP
12291: POP
// end ;
12292: PPOPN 2
12294: END
// every 0 0$1 trigger s60 do var i , tmp ;
12295: LD_EXP 57
12299: IFFALSE 12368
12301: GO 12303
12303: DISABLE
12304: LD_INT 0
12306: PPUSH
12307: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12308: LD_ADDR_VAR 0 2
12312: PUSH
12313: LD_INT 22
12315: PUSH
12316: LD_OWVAR 2
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: PPUSH
12325: CALL_OW 69
12329: ST_TO_ADDR
// if not tmp then
12330: LD_VAR 0 2
12334: NOT
12335: IFFALSE 12339
// exit ;
12337: GO 12368
// for i in tmp do
12339: LD_ADDR_VAR 0 1
12343: PUSH
12344: LD_VAR 0 2
12348: PUSH
12349: FOR_IN
12350: IFFALSE 12366
// SetLives ( i , 600 ) ;
12352: LD_VAR 0 1
12356: PPUSH
12357: LD_INT 600
12359: PPUSH
12360: CALL_OW 234
12364: GO 12349
12366: POP
12367: POP
// end ;
12368: PPOPN 2
12370: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12371: LD_INT 0
12373: PPUSH
// case cmd of 301 :
12374: LD_VAR 0 1
12378: PUSH
12379: LD_INT 301
12381: DOUBLE
12382: EQUAL
12383: IFTRUE 12387
12385: GO 12419
12387: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
12388: LD_VAR 0 6
12392: PPUSH
12393: LD_VAR 0 7
12397: PPUSH
12398: LD_VAR 0 8
12402: PPUSH
12403: LD_VAR 0 4
12407: PPUSH
12408: LD_VAR 0 5
12412: PPUSH
12413: CALL 13620 0 5
12417: GO 12540
12419: LD_INT 302
12421: DOUBLE
12422: EQUAL
12423: IFTRUE 12427
12425: GO 12464
12427: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
12428: LD_VAR 0 6
12432: PPUSH
12433: LD_VAR 0 7
12437: PPUSH
12438: LD_VAR 0 8
12442: PPUSH
12443: LD_VAR 0 9
12447: PPUSH
12448: LD_VAR 0 4
12452: PPUSH
12453: LD_VAR 0 5
12457: PPUSH
12458: CALL 13711 0 6
12462: GO 12540
12464: LD_INT 303
12466: DOUBLE
12467: EQUAL
12468: IFTRUE 12472
12470: GO 12509
12472: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
12473: LD_VAR 0 6
12477: PPUSH
12478: LD_VAR 0 7
12482: PPUSH
12483: LD_VAR 0 8
12487: PPUSH
12488: LD_VAR 0 9
12492: PPUSH
12493: LD_VAR 0 4
12497: PPUSH
12498: LD_VAR 0 5
12502: PPUSH
12503: CALL 12545 0 6
12507: GO 12540
12509: LD_INT 304
12511: DOUBLE
12512: EQUAL
12513: IFTRUE 12517
12515: GO 12539
12517: POP
// hHackTeleport ( unit , x , y ) ; end ;
12518: LD_VAR 0 2
12522: PPUSH
12523: LD_VAR 0 4
12527: PPUSH
12528: LD_VAR 0 5
12532: PPUSH
12533: CALL 14304 0 3
12537: GO 12540
12539: POP
// end ;
12540: LD_VAR 0 12
12544: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
12545: LD_INT 0
12547: PPUSH
12548: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
12549: LD_VAR 0 1
12553: PUSH
12554: LD_INT 1
12556: LESS
12557: PUSH
12558: LD_VAR 0 1
12562: PUSH
12563: LD_INT 3
12565: GREATER
12566: OR
12567: PUSH
12568: LD_VAR 0 5
12572: PPUSH
12573: LD_VAR 0 6
12577: PPUSH
12578: CALL_OW 428
12582: OR
12583: IFFALSE 12587
// exit ;
12585: GO 13307
// uc_side := your_side ;
12587: LD_ADDR_OWVAR 20
12591: PUSH
12592: LD_OWVAR 2
12596: ST_TO_ADDR
// uc_nation := nation ;
12597: LD_ADDR_OWVAR 21
12601: PUSH
12602: LD_VAR 0 1
12606: ST_TO_ADDR
// bc_level = 1 ;
12607: LD_ADDR_OWVAR 43
12611: PUSH
12612: LD_INT 1
12614: ST_TO_ADDR
// case btype of 1 :
12615: LD_VAR 0 2
12619: PUSH
12620: LD_INT 1
12622: DOUBLE
12623: EQUAL
12624: IFTRUE 12628
12626: GO 12639
12628: POP
// bc_type := b_depot ; 2 :
12629: LD_ADDR_OWVAR 42
12633: PUSH
12634: LD_INT 0
12636: ST_TO_ADDR
12637: GO 13251
12639: LD_INT 2
12641: DOUBLE
12642: EQUAL
12643: IFTRUE 12647
12645: GO 12658
12647: POP
// bc_type := b_warehouse ; 3 :
12648: LD_ADDR_OWVAR 42
12652: PUSH
12653: LD_INT 1
12655: ST_TO_ADDR
12656: GO 13251
12658: LD_INT 3
12660: DOUBLE
12661: EQUAL
12662: IFTRUE 12666
12664: GO 12677
12666: POP
// bc_type := b_lab ; 4 .. 9 :
12667: LD_ADDR_OWVAR 42
12671: PUSH
12672: LD_INT 6
12674: ST_TO_ADDR
12675: GO 13251
12677: LD_INT 4
12679: DOUBLE
12680: GREATEREQUAL
12681: IFFALSE 12689
12683: LD_INT 9
12685: DOUBLE
12686: LESSEQUAL
12687: IFTRUE 12691
12689: GO 12743
12691: POP
// begin bc_type := b_lab_half ;
12692: LD_ADDR_OWVAR 42
12696: PUSH
12697: LD_INT 7
12699: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
12700: LD_ADDR_OWVAR 44
12704: PUSH
12705: LD_INT 10
12707: PUSH
12708: LD_INT 11
12710: PUSH
12711: LD_INT 12
12713: PUSH
12714: LD_INT 15
12716: PUSH
12717: LD_INT 14
12719: PUSH
12720: LD_INT 13
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: PUSH
12731: LD_VAR 0 2
12735: PUSH
12736: LD_INT 3
12738: MINUS
12739: ARRAY
12740: ST_TO_ADDR
// end ; 10 .. 13 :
12741: GO 13251
12743: LD_INT 10
12745: DOUBLE
12746: GREATEREQUAL
12747: IFFALSE 12755
12749: LD_INT 13
12751: DOUBLE
12752: LESSEQUAL
12753: IFTRUE 12757
12755: GO 12834
12757: POP
// begin bc_type := b_lab_full ;
12758: LD_ADDR_OWVAR 42
12762: PUSH
12763: LD_INT 8
12765: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
12766: LD_ADDR_OWVAR 44
12770: PUSH
12771: LD_INT 10
12773: PUSH
12774: LD_INT 12
12776: PUSH
12777: LD_INT 14
12779: PUSH
12780: LD_INT 13
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: PUSH
12789: LD_VAR 0 2
12793: PUSH
12794: LD_INT 9
12796: MINUS
12797: ARRAY
12798: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
12799: LD_ADDR_OWVAR 45
12803: PUSH
12804: LD_INT 11
12806: PUSH
12807: LD_INT 15
12809: PUSH
12810: LD_INT 12
12812: PUSH
12813: LD_INT 15
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: PUSH
12822: LD_VAR 0 2
12826: PUSH
12827: LD_INT 9
12829: MINUS
12830: ARRAY
12831: ST_TO_ADDR
// end ; 14 :
12832: GO 13251
12834: LD_INT 14
12836: DOUBLE
12837: EQUAL
12838: IFTRUE 12842
12840: GO 12853
12842: POP
// bc_type := b_workshop ; 15 :
12843: LD_ADDR_OWVAR 42
12847: PUSH
12848: LD_INT 2
12850: ST_TO_ADDR
12851: GO 13251
12853: LD_INT 15
12855: DOUBLE
12856: EQUAL
12857: IFTRUE 12861
12859: GO 12872
12861: POP
// bc_type := b_factory ; 16 :
12862: LD_ADDR_OWVAR 42
12866: PUSH
12867: LD_INT 3
12869: ST_TO_ADDR
12870: GO 13251
12872: LD_INT 16
12874: DOUBLE
12875: EQUAL
12876: IFTRUE 12880
12878: GO 12891
12880: POP
// bc_type := b_ext_gun ; 17 :
12881: LD_ADDR_OWVAR 42
12885: PUSH
12886: LD_INT 17
12888: ST_TO_ADDR
12889: GO 13251
12891: LD_INT 17
12893: DOUBLE
12894: EQUAL
12895: IFTRUE 12899
12897: GO 12927
12899: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
12900: LD_ADDR_OWVAR 42
12904: PUSH
12905: LD_INT 19
12907: PUSH
12908: LD_INT 23
12910: PUSH
12911: LD_INT 19
12913: PUSH
12914: EMPTY
12915: LIST
12916: LIST
12917: LIST
12918: PUSH
12919: LD_VAR 0 1
12923: ARRAY
12924: ST_TO_ADDR
12925: GO 13251
12927: LD_INT 18
12929: DOUBLE
12930: EQUAL
12931: IFTRUE 12935
12933: GO 12946
12935: POP
// bc_type := b_ext_radar ; 19 :
12936: LD_ADDR_OWVAR 42
12940: PUSH
12941: LD_INT 20
12943: ST_TO_ADDR
12944: GO 13251
12946: LD_INT 19
12948: DOUBLE
12949: EQUAL
12950: IFTRUE 12954
12952: GO 12965
12954: POP
// bc_type := b_ext_radio ; 20 :
12955: LD_ADDR_OWVAR 42
12959: PUSH
12960: LD_INT 22
12962: ST_TO_ADDR
12963: GO 13251
12965: LD_INT 20
12967: DOUBLE
12968: EQUAL
12969: IFTRUE 12973
12971: GO 12984
12973: POP
// bc_type := b_ext_siberium ; 21 :
12974: LD_ADDR_OWVAR 42
12978: PUSH
12979: LD_INT 21
12981: ST_TO_ADDR
12982: GO 13251
12984: LD_INT 21
12986: DOUBLE
12987: EQUAL
12988: IFTRUE 12992
12990: GO 13003
12992: POP
// bc_type := b_ext_computer ; 22 :
12993: LD_ADDR_OWVAR 42
12997: PUSH
12998: LD_INT 24
13000: ST_TO_ADDR
13001: GO 13251
13003: LD_INT 22
13005: DOUBLE
13006: EQUAL
13007: IFTRUE 13011
13009: GO 13022
13011: POP
// bc_type := b_ext_track ; 23 :
13012: LD_ADDR_OWVAR 42
13016: PUSH
13017: LD_INT 16
13019: ST_TO_ADDR
13020: GO 13251
13022: LD_INT 23
13024: DOUBLE
13025: EQUAL
13026: IFTRUE 13030
13028: GO 13041
13030: POP
// bc_type := b_ext_laser ; 24 :
13031: LD_ADDR_OWVAR 42
13035: PUSH
13036: LD_INT 25
13038: ST_TO_ADDR
13039: GO 13251
13041: LD_INT 24
13043: DOUBLE
13044: EQUAL
13045: IFTRUE 13049
13047: GO 13060
13049: POP
// bc_type := b_control_tower ; 25 :
13050: LD_ADDR_OWVAR 42
13054: PUSH
13055: LD_INT 36
13057: ST_TO_ADDR
13058: GO 13251
13060: LD_INT 25
13062: DOUBLE
13063: EQUAL
13064: IFTRUE 13068
13066: GO 13079
13068: POP
// bc_type := b_breastwork ; 26 :
13069: LD_ADDR_OWVAR 42
13073: PUSH
13074: LD_INT 31
13076: ST_TO_ADDR
13077: GO 13251
13079: LD_INT 26
13081: DOUBLE
13082: EQUAL
13083: IFTRUE 13087
13085: GO 13098
13087: POP
// bc_type := b_bunker ; 27 :
13088: LD_ADDR_OWVAR 42
13092: PUSH
13093: LD_INT 32
13095: ST_TO_ADDR
13096: GO 13251
13098: LD_INT 27
13100: DOUBLE
13101: EQUAL
13102: IFTRUE 13106
13104: GO 13117
13106: POP
// bc_type := b_turret ; 28 :
13107: LD_ADDR_OWVAR 42
13111: PUSH
13112: LD_INT 33
13114: ST_TO_ADDR
13115: GO 13251
13117: LD_INT 28
13119: DOUBLE
13120: EQUAL
13121: IFTRUE 13125
13123: GO 13136
13125: POP
// bc_type := b_armoury ; 29 :
13126: LD_ADDR_OWVAR 42
13130: PUSH
13131: LD_INT 4
13133: ST_TO_ADDR
13134: GO 13251
13136: LD_INT 29
13138: DOUBLE
13139: EQUAL
13140: IFTRUE 13144
13142: GO 13155
13144: POP
// bc_type := b_barracks ; 30 :
13145: LD_ADDR_OWVAR 42
13149: PUSH
13150: LD_INT 5
13152: ST_TO_ADDR
13153: GO 13251
13155: LD_INT 30
13157: DOUBLE
13158: EQUAL
13159: IFTRUE 13163
13161: GO 13174
13163: POP
// bc_type := b_solar_power ; 31 :
13164: LD_ADDR_OWVAR 42
13168: PUSH
13169: LD_INT 27
13171: ST_TO_ADDR
13172: GO 13251
13174: LD_INT 31
13176: DOUBLE
13177: EQUAL
13178: IFTRUE 13182
13180: GO 13193
13182: POP
// bc_type := b_oil_power ; 32 :
13183: LD_ADDR_OWVAR 42
13187: PUSH
13188: LD_INT 26
13190: ST_TO_ADDR
13191: GO 13251
13193: LD_INT 32
13195: DOUBLE
13196: EQUAL
13197: IFTRUE 13201
13199: GO 13212
13201: POP
// bc_type := b_siberite_power ; 33 :
13202: LD_ADDR_OWVAR 42
13206: PUSH
13207: LD_INT 28
13209: ST_TO_ADDR
13210: GO 13251
13212: LD_INT 33
13214: DOUBLE
13215: EQUAL
13216: IFTRUE 13220
13218: GO 13231
13220: POP
// bc_type := b_oil_mine ; 34 :
13221: LD_ADDR_OWVAR 42
13225: PUSH
13226: LD_INT 29
13228: ST_TO_ADDR
13229: GO 13251
13231: LD_INT 34
13233: DOUBLE
13234: EQUAL
13235: IFTRUE 13239
13237: GO 13250
13239: POP
// bc_type := b_siberite_mine ; end ;
13240: LD_ADDR_OWVAR 42
13244: PUSH
13245: LD_INT 30
13247: ST_TO_ADDR
13248: GO 13251
13250: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
13251: LD_ADDR_VAR 0 8
13255: PUSH
13256: LD_VAR 0 5
13260: PPUSH
13261: LD_VAR 0 6
13265: PPUSH
13266: LD_VAR 0 3
13270: PPUSH
13271: CALL_OW 47
13275: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
13276: LD_OWVAR 42
13280: PUSH
13281: LD_INT 32
13283: PUSH
13284: LD_INT 33
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: IN
13291: IFFALSE 13307
// PlaceWeaponTurret ( b , weapon ) ;
13293: LD_VAR 0 8
13297: PPUSH
13298: LD_VAR 0 4
13302: PPUSH
13303: CALL_OW 431
// end ;
13307: LD_VAR 0 7
13311: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
13312: LD_INT 0
13314: PPUSH
13315: PPUSH
13316: PPUSH
13317: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13318: LD_ADDR_VAR 0 4
13322: PUSH
13323: LD_INT 22
13325: PUSH
13326: LD_OWVAR 2
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: PUSH
13335: LD_INT 2
13337: PUSH
13338: LD_INT 30
13340: PUSH
13341: LD_INT 0
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: PUSH
13348: LD_INT 30
13350: PUSH
13351: LD_INT 1
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: LIST
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PPUSH
13367: CALL_OW 69
13371: ST_TO_ADDR
// if not tmp then
13372: LD_VAR 0 4
13376: NOT
13377: IFFALSE 13381
// exit ;
13379: GO 13440
// for i in tmp do
13381: LD_ADDR_VAR 0 2
13385: PUSH
13386: LD_VAR 0 4
13390: PUSH
13391: FOR_IN
13392: IFFALSE 13438
// for j = 1 to 3 do
13394: LD_ADDR_VAR 0 3
13398: PUSH
13399: DOUBLE
13400: LD_INT 1
13402: DEC
13403: ST_TO_ADDR
13404: LD_INT 3
13406: PUSH
13407: FOR_TO
13408: IFFALSE 13434
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
13410: LD_VAR 0 2
13414: PPUSH
13415: CALL_OW 274
13419: PPUSH
13420: LD_VAR 0 3
13424: PPUSH
13425: LD_INT 99999
13427: PPUSH
13428: CALL_OW 277
13432: GO 13407
13434: POP
13435: POP
13436: GO 13391
13438: POP
13439: POP
// end ;
13440: LD_VAR 0 1
13444: RET
// export function hHackSetLevel10 ; var i , j ; begin
13445: LD_INT 0
13447: PPUSH
13448: PPUSH
13449: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
13450: LD_ADDR_VAR 0 2
13454: PUSH
13455: LD_INT 21
13457: PUSH
13458: LD_INT 1
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: PPUSH
13465: CALL_OW 69
13469: PUSH
13470: FOR_IN
13471: IFFALSE 13523
// if IsSelected ( i ) then
13473: LD_VAR 0 2
13477: PPUSH
13478: CALL_OW 306
13482: IFFALSE 13521
// begin for j := 1 to 4 do
13484: LD_ADDR_VAR 0 3
13488: PUSH
13489: DOUBLE
13490: LD_INT 1
13492: DEC
13493: ST_TO_ADDR
13494: LD_INT 4
13496: PUSH
13497: FOR_TO
13498: IFFALSE 13519
// SetSkill ( i , j , 10 ) ;
13500: LD_VAR 0 2
13504: PPUSH
13505: LD_VAR 0 3
13509: PPUSH
13510: LD_INT 10
13512: PPUSH
13513: CALL_OW 237
13517: GO 13497
13519: POP
13520: POP
// end ;
13521: GO 13470
13523: POP
13524: POP
// end ;
13525: LD_VAR 0 1
13529: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
13530: LD_INT 0
13532: PPUSH
13533: PPUSH
13534: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
13535: LD_ADDR_VAR 0 2
13539: PUSH
13540: LD_INT 22
13542: PUSH
13543: LD_OWVAR 2
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: PUSH
13552: LD_INT 21
13554: PUSH
13555: LD_INT 1
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: PPUSH
13566: CALL_OW 69
13570: PUSH
13571: FOR_IN
13572: IFFALSE 13613
// begin for j := 1 to 4 do
13574: LD_ADDR_VAR 0 3
13578: PUSH
13579: DOUBLE
13580: LD_INT 1
13582: DEC
13583: ST_TO_ADDR
13584: LD_INT 4
13586: PUSH
13587: FOR_TO
13588: IFFALSE 13609
// SetSkill ( i , j , 10 ) ;
13590: LD_VAR 0 2
13594: PPUSH
13595: LD_VAR 0 3
13599: PPUSH
13600: LD_INT 10
13602: PPUSH
13603: CALL_OW 237
13607: GO 13587
13609: POP
13610: POP
// end ;
13611: GO 13571
13613: POP
13614: POP
// end ;
13615: LD_VAR 0 1
13619: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
13620: LD_INT 0
13622: PPUSH
// uc_side := your_side ;
13623: LD_ADDR_OWVAR 20
13627: PUSH
13628: LD_OWVAR 2
13632: ST_TO_ADDR
// uc_nation := nation ;
13633: LD_ADDR_OWVAR 21
13637: PUSH
13638: LD_VAR 0 1
13642: ST_TO_ADDR
// InitHc ;
13643: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
13647: LD_INT 0
13649: PPUSH
13650: LD_VAR 0 2
13654: PPUSH
13655: LD_VAR 0 3
13659: PPUSH
13660: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
13664: LD_VAR 0 4
13668: PPUSH
13669: LD_VAR 0 5
13673: PPUSH
13674: CALL_OW 428
13678: PUSH
13679: LD_INT 0
13681: EQUAL
13682: IFFALSE 13706
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
13684: CALL_OW 44
13688: PPUSH
13689: LD_VAR 0 4
13693: PPUSH
13694: LD_VAR 0 5
13698: PPUSH
13699: LD_INT 1
13701: PPUSH
13702: CALL_OW 48
// end ;
13706: LD_VAR 0 6
13710: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
13711: LD_INT 0
13713: PPUSH
13714: PPUSH
// uc_side := your_side ;
13715: LD_ADDR_OWVAR 20
13719: PUSH
13720: LD_OWVAR 2
13724: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
13725: LD_VAR 0 1
13729: PUSH
13730: LD_INT 1
13732: PUSH
13733: LD_INT 2
13735: PUSH
13736: LD_INT 3
13738: PUSH
13739: LD_INT 4
13741: PUSH
13742: LD_INT 5
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: IN
13752: IFFALSE 13764
// uc_nation := nation_american else
13754: LD_ADDR_OWVAR 21
13758: PUSH
13759: LD_INT 1
13761: ST_TO_ADDR
13762: GO 13807
// if chassis in [ 11 , 12 , 13 , 14 ] then
13764: LD_VAR 0 1
13768: PUSH
13769: LD_INT 11
13771: PUSH
13772: LD_INT 12
13774: PUSH
13775: LD_INT 13
13777: PUSH
13778: LD_INT 14
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: IN
13787: IFFALSE 13799
// uc_nation := nation_arabian else
13789: LD_ADDR_OWVAR 21
13793: PUSH
13794: LD_INT 2
13796: ST_TO_ADDR
13797: GO 13807
// uc_nation := nation_russian ;
13799: LD_ADDR_OWVAR 21
13803: PUSH
13804: LD_INT 3
13806: ST_TO_ADDR
// vc_chassis := chassis ;
13807: LD_ADDR_OWVAR 37
13811: PUSH
13812: LD_VAR 0 1
13816: ST_TO_ADDR
// vc_engine := engine ;
13817: LD_ADDR_OWVAR 39
13821: PUSH
13822: LD_VAR 0 2
13826: ST_TO_ADDR
// vc_control := control ;
13827: LD_ADDR_OWVAR 38
13831: PUSH
13832: LD_VAR 0 3
13836: ST_TO_ADDR
// vc_weapon := weapon ;
13837: LD_ADDR_OWVAR 40
13841: PUSH
13842: LD_VAR 0 4
13846: ST_TO_ADDR
// un := CreateVehicle ;
13847: LD_ADDR_VAR 0 8
13851: PUSH
13852: CALL_OW 45
13856: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
13857: LD_VAR 0 8
13861: PPUSH
13862: LD_INT 0
13864: PPUSH
13865: LD_INT 5
13867: PPUSH
13868: CALL_OW 12
13872: PPUSH
13873: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
13877: LD_VAR 0 8
13881: PPUSH
13882: LD_VAR 0 5
13886: PPUSH
13887: LD_VAR 0 6
13891: PPUSH
13892: LD_INT 1
13894: PPUSH
13895: CALL_OW 48
// end ;
13899: LD_VAR 0 7
13903: RET
// export hInvincible ; every 1 do
13904: GO 13906
13906: DISABLE
// hInvincible := [ ] ;
13907: LD_ADDR_EXP 58
13911: PUSH
13912: EMPTY
13913: ST_TO_ADDR
13914: END
// every 10 do var i ;
13915: GO 13917
13917: DISABLE
13918: LD_INT 0
13920: PPUSH
// begin enable ;
13921: ENABLE
// if not hInvincible then
13922: LD_EXP 58
13926: NOT
13927: IFFALSE 13931
// exit ;
13929: GO 13975
// for i in hInvincible do
13931: LD_ADDR_VAR 0 1
13935: PUSH
13936: LD_EXP 58
13940: PUSH
13941: FOR_IN
13942: IFFALSE 13973
// if GetLives ( i ) < 1000 then
13944: LD_VAR 0 1
13948: PPUSH
13949: CALL_OW 256
13953: PUSH
13954: LD_INT 1000
13956: LESS
13957: IFFALSE 13971
// SetLives ( i , 1000 ) ;
13959: LD_VAR 0 1
13963: PPUSH
13964: LD_INT 1000
13966: PPUSH
13967: CALL_OW 234
13971: GO 13941
13973: POP
13974: POP
// end ;
13975: PPOPN 1
13977: END
// export function hHackInvincible ; var i ; begin
13978: LD_INT 0
13980: PPUSH
13981: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
13982: LD_ADDR_VAR 0 2
13986: PUSH
13987: LD_INT 2
13989: PUSH
13990: LD_INT 21
13992: PUSH
13993: LD_INT 1
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: PUSH
14000: LD_INT 21
14002: PUSH
14003: LD_INT 2
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: LIST
14014: PPUSH
14015: CALL_OW 69
14019: PUSH
14020: FOR_IN
14021: IFFALSE 14082
// if IsSelected ( i ) then
14023: LD_VAR 0 2
14027: PPUSH
14028: CALL_OW 306
14032: IFFALSE 14080
// begin if i in hInvincible then
14034: LD_VAR 0 2
14038: PUSH
14039: LD_EXP 58
14043: IN
14044: IFFALSE 14064
// hInvincible := hInvincible diff i else
14046: LD_ADDR_EXP 58
14050: PUSH
14051: LD_EXP 58
14055: PUSH
14056: LD_VAR 0 2
14060: DIFF
14061: ST_TO_ADDR
14062: GO 14080
// hInvincible := hInvincible union i ;
14064: LD_ADDR_EXP 58
14068: PUSH
14069: LD_EXP 58
14073: PUSH
14074: LD_VAR 0 2
14078: UNION
14079: ST_TO_ADDR
// end ;
14080: GO 14020
14082: POP
14083: POP
// end ;
14084: LD_VAR 0 1
14088: RET
// export function hHackInvisible ; var i , j ; begin
14089: LD_INT 0
14091: PPUSH
14092: PPUSH
14093: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14094: LD_ADDR_VAR 0 2
14098: PUSH
14099: LD_INT 21
14101: PUSH
14102: LD_INT 1
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: PPUSH
14109: CALL_OW 69
14113: PUSH
14114: FOR_IN
14115: IFFALSE 14139
// if IsSelected ( i ) then
14117: LD_VAR 0 2
14121: PPUSH
14122: CALL_OW 306
14126: IFFALSE 14137
// ComForceInvisible ( i ) ;
14128: LD_VAR 0 2
14132: PPUSH
14133: CALL_OW 496
14137: GO 14114
14139: POP
14140: POP
// end ;
14141: LD_VAR 0 1
14145: RET
// export function hHackChangeYourSide ; begin
14146: LD_INT 0
14148: PPUSH
// if your_side = 8 then
14149: LD_OWVAR 2
14153: PUSH
14154: LD_INT 8
14156: EQUAL
14157: IFFALSE 14169
// your_side := 0 else
14159: LD_ADDR_OWVAR 2
14163: PUSH
14164: LD_INT 0
14166: ST_TO_ADDR
14167: GO 14183
// your_side := your_side + 1 ;
14169: LD_ADDR_OWVAR 2
14173: PUSH
14174: LD_OWVAR 2
14178: PUSH
14179: LD_INT 1
14181: PLUS
14182: ST_TO_ADDR
// end ;
14183: LD_VAR 0 1
14187: RET
// export function hHackChangeUnitSide ; var i , j ; begin
14188: LD_INT 0
14190: PPUSH
14191: PPUSH
14192: PPUSH
// for i in all_units do
14193: LD_ADDR_VAR 0 2
14197: PUSH
14198: LD_OWVAR 3
14202: PUSH
14203: FOR_IN
14204: IFFALSE 14282
// if IsSelected ( i ) then
14206: LD_VAR 0 2
14210: PPUSH
14211: CALL_OW 306
14215: IFFALSE 14280
// begin j := GetSide ( i ) ;
14217: LD_ADDR_VAR 0 3
14221: PUSH
14222: LD_VAR 0 2
14226: PPUSH
14227: CALL_OW 255
14231: ST_TO_ADDR
// if j = 8 then
14232: LD_VAR 0 3
14236: PUSH
14237: LD_INT 8
14239: EQUAL
14240: IFFALSE 14252
// j := 0 else
14242: LD_ADDR_VAR 0 3
14246: PUSH
14247: LD_INT 0
14249: ST_TO_ADDR
14250: GO 14266
// j := j + 1 ;
14252: LD_ADDR_VAR 0 3
14256: PUSH
14257: LD_VAR 0 3
14261: PUSH
14262: LD_INT 1
14264: PLUS
14265: ST_TO_ADDR
// SetSide ( i , j ) ;
14266: LD_VAR 0 2
14270: PPUSH
14271: LD_VAR 0 3
14275: PPUSH
14276: CALL_OW 235
// end ;
14280: GO 14203
14282: POP
14283: POP
// end ;
14284: LD_VAR 0 1
14288: RET
// export function hHackFog ; begin
14289: LD_INT 0
14291: PPUSH
// FogOff ( true ) ;
14292: LD_INT 1
14294: PPUSH
14295: CALL_OW 344
// end ;
14299: LD_VAR 0 1
14303: RET
// export function hHackTeleport ( unit , x , y ) ; begin
14304: LD_INT 0
14306: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
14307: LD_VAR 0 1
14311: PPUSH
14312: LD_VAR 0 2
14316: PPUSH
14317: LD_VAR 0 3
14321: PPUSH
14322: LD_INT 1
14324: PPUSH
14325: LD_INT 1
14327: PPUSH
14328: CALL_OW 483
// CenterOnXY ( x , y ) ;
14332: LD_VAR 0 2
14336: PPUSH
14337: LD_VAR 0 3
14341: PPUSH
14342: CALL_OW 84
// end ; end_of_file
14346: LD_VAR 0 4
14350: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
14351: LD_INT 0
14353: PPUSH
14354: PPUSH
14355: PPUSH
14356: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
14357: LD_VAR 0 1
14361: PPUSH
14362: CALL_OW 264
14366: PUSH
14367: LD_EXP 74
14371: EQUAL
14372: IFFALSE 14444
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
14374: LD_INT 68
14376: PPUSH
14377: LD_VAR 0 1
14381: PPUSH
14382: CALL_OW 255
14386: PPUSH
14387: CALL_OW 321
14391: PUSH
14392: LD_INT 2
14394: EQUAL
14395: IFFALSE 14407
// eff := 70 else
14397: LD_ADDR_VAR 0 4
14401: PUSH
14402: LD_INT 70
14404: ST_TO_ADDR
14405: GO 14415
// eff := 30 ;
14407: LD_ADDR_VAR 0 4
14411: PUSH
14412: LD_INT 30
14414: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
14415: LD_VAR 0 1
14419: PPUSH
14420: CALL_OW 250
14424: PPUSH
14425: LD_VAR 0 1
14429: PPUSH
14430: CALL_OW 251
14434: PPUSH
14435: LD_VAR 0 4
14439: PPUSH
14440: CALL_OW 495
// end ; end ;
14444: LD_VAR 0 2
14448: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
14449: LD_INT 0
14451: PPUSH
// end ;
14452: LD_VAR 0 4
14456: RET
// export function SOS_Command ( cmd ) ; begin
14457: LD_INT 0
14459: PPUSH
// end ;
14460: LD_VAR 0 2
14464: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
14465: LD_INT 0
14467: PPUSH
// end ;
14468: LD_VAR 0 6
14472: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
14473: LD_INT 0
14475: PPUSH
14476: PPUSH
// if not vehicle or not factory then
14477: LD_VAR 0 1
14481: NOT
14482: PUSH
14483: LD_VAR 0 2
14487: NOT
14488: OR
14489: IFFALSE 14493
// exit ;
14491: GO 14724
// if factoryWaypoints >= factory then
14493: LD_EXP 59
14497: PUSH
14498: LD_VAR 0 2
14502: GREATEREQUAL
14503: IFFALSE 14724
// if factoryWaypoints [ factory ] then
14505: LD_EXP 59
14509: PUSH
14510: LD_VAR 0 2
14514: ARRAY
14515: IFFALSE 14724
// begin if GetControl ( vehicle ) = control_manual then
14517: LD_VAR 0 1
14521: PPUSH
14522: CALL_OW 263
14526: PUSH
14527: LD_INT 1
14529: EQUAL
14530: IFFALSE 14611
// begin driver := IsDrivenBy ( vehicle ) ;
14532: LD_ADDR_VAR 0 4
14536: PUSH
14537: LD_VAR 0 1
14541: PPUSH
14542: CALL_OW 311
14546: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14547: LD_VAR 0 4
14551: PPUSH
14552: LD_EXP 59
14556: PUSH
14557: LD_VAR 0 2
14561: ARRAY
14562: PUSH
14563: LD_INT 3
14565: ARRAY
14566: PPUSH
14567: LD_EXP 59
14571: PUSH
14572: LD_VAR 0 2
14576: ARRAY
14577: PUSH
14578: LD_INT 4
14580: ARRAY
14581: PPUSH
14582: CALL_OW 171
// AddComExitVehicle ( driver ) ;
14586: LD_VAR 0 4
14590: PPUSH
14591: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
14595: LD_VAR 0 4
14599: PPUSH
14600: LD_VAR 0 2
14604: PPUSH
14605: CALL_OW 180
// end else
14609: GO 14724
// if GetControl ( vehicle ) = control_remote then
14611: LD_VAR 0 1
14615: PPUSH
14616: CALL_OW 263
14620: PUSH
14621: LD_INT 2
14623: EQUAL
14624: IFFALSE 14685
// begin wait ( 0 0$2 ) ;
14626: LD_INT 70
14628: PPUSH
14629: CALL_OW 67
// if Connect ( vehicle ) then
14633: LD_VAR 0 1
14637: PPUSH
14638: CALL 27434 0 1
14642: IFFALSE 14683
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14644: LD_VAR 0 1
14648: PPUSH
14649: LD_EXP 59
14653: PUSH
14654: LD_VAR 0 2
14658: ARRAY
14659: PUSH
14660: LD_INT 3
14662: ARRAY
14663: PPUSH
14664: LD_EXP 59
14668: PUSH
14669: LD_VAR 0 2
14673: ARRAY
14674: PUSH
14675: LD_INT 4
14677: ARRAY
14678: PPUSH
14679: CALL_OW 171
// end else
14683: GO 14724
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14685: LD_VAR 0 1
14689: PPUSH
14690: LD_EXP 59
14694: PUSH
14695: LD_VAR 0 2
14699: ARRAY
14700: PUSH
14701: LD_INT 3
14703: ARRAY
14704: PPUSH
14705: LD_EXP 59
14709: PUSH
14710: LD_VAR 0 2
14714: ARRAY
14715: PUSH
14716: LD_INT 4
14718: ARRAY
14719: PPUSH
14720: CALL_OW 171
// end ; end ;
14724: LD_VAR 0 3
14728: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
14729: LD_INT 0
14731: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
14732: LD_VAR 0 1
14736: PUSH
14737: LD_INT 250
14739: EQUAL
14740: PUSH
14741: LD_VAR 0 2
14745: PPUSH
14746: CALL_OW 264
14750: PUSH
14751: LD_EXP 77
14755: EQUAL
14756: AND
14757: IFFALSE 14778
// MinerPlaceMine ( unit , x , y ) ;
14759: LD_VAR 0 2
14763: PPUSH
14764: LD_VAR 0 4
14768: PPUSH
14769: LD_VAR 0 5
14773: PPUSH
14774: CALL 17506 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
14778: LD_VAR 0 1
14782: PUSH
14783: LD_INT 251
14785: EQUAL
14786: PUSH
14787: LD_VAR 0 2
14791: PPUSH
14792: CALL_OW 264
14796: PUSH
14797: LD_EXP 77
14801: EQUAL
14802: AND
14803: IFFALSE 14824
// MinerDetonateMine ( unit , x , y ) ;
14805: LD_VAR 0 2
14809: PPUSH
14810: LD_VAR 0 4
14814: PPUSH
14815: LD_VAR 0 5
14819: PPUSH
14820: CALL 17783 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
14824: LD_VAR 0 1
14828: PUSH
14829: LD_INT 252
14831: EQUAL
14832: PUSH
14833: LD_VAR 0 2
14837: PPUSH
14838: CALL_OW 264
14842: PUSH
14843: LD_EXP 77
14847: EQUAL
14848: AND
14849: IFFALSE 14870
// MinerCreateMinefield ( unit , x , y ) ;
14851: LD_VAR 0 2
14855: PPUSH
14856: LD_VAR 0 4
14860: PPUSH
14861: LD_VAR 0 5
14865: PPUSH
14866: CALL 18200 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
14870: LD_VAR 0 1
14874: PUSH
14875: LD_INT 253
14877: EQUAL
14878: PUSH
14879: LD_VAR 0 2
14883: PPUSH
14884: CALL_OW 257
14888: PUSH
14889: LD_INT 5
14891: EQUAL
14892: AND
14893: IFFALSE 14914
// ComBinocular ( unit , x , y ) ;
14895: LD_VAR 0 2
14899: PPUSH
14900: LD_VAR 0 4
14904: PPUSH
14905: LD_VAR 0 5
14909: PPUSH
14910: CALL 18571 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
14914: LD_VAR 0 1
14918: PUSH
14919: LD_INT 254
14921: EQUAL
14922: PUSH
14923: LD_VAR 0 2
14927: PPUSH
14928: CALL_OW 264
14932: PUSH
14933: LD_EXP 72
14937: EQUAL
14938: AND
14939: PUSH
14940: LD_VAR 0 3
14944: PPUSH
14945: CALL_OW 263
14949: PUSH
14950: LD_INT 3
14952: EQUAL
14953: AND
14954: IFFALSE 14970
// HackDestroyVehicle ( unit , selectedUnit ) ;
14956: LD_VAR 0 2
14960: PPUSH
14961: LD_VAR 0 3
14965: PPUSH
14966: CALL 16866 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
14970: LD_VAR 0 1
14974: PUSH
14975: LD_INT 255
14977: EQUAL
14978: PUSH
14979: LD_VAR 0 2
14983: PPUSH
14984: CALL_OW 264
14988: PUSH
14989: LD_INT 14
14991: PUSH
14992: LD_INT 53
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: IN
14999: AND
15000: PUSH
15001: LD_VAR 0 4
15005: PPUSH
15006: LD_VAR 0 5
15010: PPUSH
15011: CALL_OW 488
15015: AND
15016: IFFALSE 15040
// CutTreeXYR ( unit , x , y , 12 ) ;
15018: LD_VAR 0 2
15022: PPUSH
15023: LD_VAR 0 4
15027: PPUSH
15028: LD_VAR 0 5
15032: PPUSH
15033: LD_INT 12
15035: PPUSH
15036: CALL 15432 0 4
// if cmd = 256 then
15040: LD_VAR 0 1
15044: PUSH
15045: LD_INT 256
15047: EQUAL
15048: IFFALSE 15069
// SetFactoryWaypoint ( unit , x , y ) ;
15050: LD_VAR 0 2
15054: PPUSH
15055: LD_VAR 0 4
15059: PPUSH
15060: LD_VAR 0 5
15064: PPUSH
15065: CALL 15074 0 3
// end ;
15069: LD_VAR 0 6
15073: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
15074: LD_INT 0
15076: PPUSH
15077: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
15078: LD_VAR 0 1
15082: NOT
15083: PUSH
15084: LD_VAR 0 2
15088: PPUSH
15089: LD_VAR 0 3
15093: PPUSH
15094: CALL_OW 488
15098: NOT
15099: OR
15100: PUSH
15101: LD_VAR 0 1
15105: PPUSH
15106: CALL_OW 266
15110: PUSH
15111: LD_INT 3
15113: NONEQUAL
15114: PUSH
15115: LD_VAR 0 1
15119: PPUSH
15120: CALL_OW 247
15124: PUSH
15125: LD_INT 1
15127: EQUAL
15128: NOT
15129: AND
15130: OR
15131: IFFALSE 15135
// exit ;
15133: GO 15284
// if GetType ( factory ) = unit_human then
15135: LD_VAR 0 1
15139: PPUSH
15140: CALL_OW 247
15144: PUSH
15145: LD_INT 1
15147: EQUAL
15148: IFFALSE 15165
// factory := IsInUnit ( factory ) ;
15150: LD_ADDR_VAR 0 1
15154: PUSH
15155: LD_VAR 0 1
15159: PPUSH
15160: CALL_OW 310
15164: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
15165: LD_VAR 0 1
15169: PPUSH
15170: CALL_OW 266
15174: PUSH
15175: LD_INT 3
15177: NONEQUAL
15178: IFFALSE 15182
// exit ;
15180: GO 15284
// if HexInfo ( x , y ) = factory then
15182: LD_VAR 0 2
15186: PPUSH
15187: LD_VAR 0 3
15191: PPUSH
15192: CALL_OW 428
15196: PUSH
15197: LD_VAR 0 1
15201: EQUAL
15202: IFFALSE 15229
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
15204: LD_ADDR_EXP 59
15208: PUSH
15209: LD_EXP 59
15213: PPUSH
15214: LD_VAR 0 1
15218: PPUSH
15219: LD_INT 0
15221: PPUSH
15222: CALL_OW 1
15226: ST_TO_ADDR
15227: GO 15280
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
15229: LD_ADDR_EXP 59
15233: PUSH
15234: LD_EXP 59
15238: PPUSH
15239: LD_VAR 0 1
15243: PPUSH
15244: LD_VAR 0 1
15248: PPUSH
15249: CALL_OW 255
15253: PUSH
15254: LD_VAR 0 1
15258: PUSH
15259: LD_VAR 0 2
15263: PUSH
15264: LD_VAR 0 3
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: PPUSH
15275: CALL_OW 1
15279: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15280: CALL 15289 0 0
// end ;
15284: LD_VAR 0 4
15288: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
15289: LD_INT 0
15291: PPUSH
15292: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
15293: LD_STRING resetFactoryWaypoint();
15295: PPUSH
15296: CALL_OW 559
// if factoryWaypoints then
15300: LD_EXP 59
15304: IFFALSE 15427
// begin for i := 1 to factoryWaypoints do
15306: LD_ADDR_VAR 0 2
15310: PUSH
15311: DOUBLE
15312: LD_INT 1
15314: DEC
15315: ST_TO_ADDR
15316: LD_EXP 59
15320: PUSH
15321: FOR_TO
15322: IFFALSE 15425
// if factoryWaypoints [ i ] then
15324: LD_EXP 59
15328: PUSH
15329: LD_VAR 0 2
15333: ARRAY
15334: IFFALSE 15423
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
15336: LD_STRING setFactoryWaypointXY(
15338: PUSH
15339: LD_EXP 59
15343: PUSH
15344: LD_VAR 0 2
15348: ARRAY
15349: PUSH
15350: LD_INT 1
15352: ARRAY
15353: STR
15354: PUSH
15355: LD_STRING ,
15357: STR
15358: PUSH
15359: LD_EXP 59
15363: PUSH
15364: LD_VAR 0 2
15368: ARRAY
15369: PUSH
15370: LD_INT 2
15372: ARRAY
15373: STR
15374: PUSH
15375: LD_STRING ,
15377: STR
15378: PUSH
15379: LD_EXP 59
15383: PUSH
15384: LD_VAR 0 2
15388: ARRAY
15389: PUSH
15390: LD_INT 3
15392: ARRAY
15393: STR
15394: PUSH
15395: LD_STRING ,
15397: STR
15398: PUSH
15399: LD_EXP 59
15403: PUSH
15404: LD_VAR 0 2
15408: ARRAY
15409: PUSH
15410: LD_INT 4
15412: ARRAY
15413: STR
15414: PUSH
15415: LD_STRING )
15417: STR
15418: PPUSH
15419: CALL_OW 559
15423: GO 15321
15425: POP
15426: POP
// end ; end ;
15427: LD_VAR 0 1
15431: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15432: LD_INT 0
15434: PPUSH
15435: PPUSH
15436: PPUSH
15437: PPUSH
15438: PPUSH
15439: PPUSH
15440: PPUSH
15441: PPUSH
15442: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15443: LD_VAR 0 1
15447: NOT
15448: PUSH
15449: LD_VAR 0 2
15453: PPUSH
15454: LD_VAR 0 3
15458: PPUSH
15459: CALL_OW 488
15463: NOT
15464: OR
15465: PUSH
15466: LD_VAR 0 4
15470: NOT
15471: OR
15472: IFFALSE 15476
// exit ;
15474: GO 15816
// list := [ ] ;
15476: LD_ADDR_VAR 0 13
15480: PUSH
15481: EMPTY
15482: ST_TO_ADDR
// if x - r < 0 then
15483: LD_VAR 0 2
15487: PUSH
15488: LD_VAR 0 4
15492: MINUS
15493: PUSH
15494: LD_INT 0
15496: LESS
15497: IFFALSE 15509
// min_x := 0 else
15499: LD_ADDR_VAR 0 7
15503: PUSH
15504: LD_INT 0
15506: ST_TO_ADDR
15507: GO 15525
// min_x := x - r ;
15509: LD_ADDR_VAR 0 7
15513: PUSH
15514: LD_VAR 0 2
15518: PUSH
15519: LD_VAR 0 4
15523: MINUS
15524: ST_TO_ADDR
// if y - r < 0 then
15525: LD_VAR 0 3
15529: PUSH
15530: LD_VAR 0 4
15534: MINUS
15535: PUSH
15536: LD_INT 0
15538: LESS
15539: IFFALSE 15551
// min_y := 0 else
15541: LD_ADDR_VAR 0 8
15545: PUSH
15546: LD_INT 0
15548: ST_TO_ADDR
15549: GO 15567
// min_y := y - r ;
15551: LD_ADDR_VAR 0 8
15555: PUSH
15556: LD_VAR 0 3
15560: PUSH
15561: LD_VAR 0 4
15565: MINUS
15566: ST_TO_ADDR
// max_x := x + r ;
15567: LD_ADDR_VAR 0 9
15571: PUSH
15572: LD_VAR 0 2
15576: PUSH
15577: LD_VAR 0 4
15581: PLUS
15582: ST_TO_ADDR
// max_y := y + r ;
15583: LD_ADDR_VAR 0 10
15587: PUSH
15588: LD_VAR 0 3
15592: PUSH
15593: LD_VAR 0 4
15597: PLUS
15598: ST_TO_ADDR
// for _x = min_x to max_x do
15599: LD_ADDR_VAR 0 11
15603: PUSH
15604: DOUBLE
15605: LD_VAR 0 7
15609: DEC
15610: ST_TO_ADDR
15611: LD_VAR 0 9
15615: PUSH
15616: FOR_TO
15617: IFFALSE 15734
// for _y = min_y to max_y do
15619: LD_ADDR_VAR 0 12
15623: PUSH
15624: DOUBLE
15625: LD_VAR 0 8
15629: DEC
15630: ST_TO_ADDR
15631: LD_VAR 0 10
15635: PUSH
15636: FOR_TO
15637: IFFALSE 15730
// begin if not ValidHex ( _x , _y ) then
15639: LD_VAR 0 11
15643: PPUSH
15644: LD_VAR 0 12
15648: PPUSH
15649: CALL_OW 488
15653: NOT
15654: IFFALSE 15658
// continue ;
15656: GO 15636
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15658: LD_VAR 0 11
15662: PPUSH
15663: LD_VAR 0 12
15667: PPUSH
15668: CALL_OW 351
15672: PUSH
15673: LD_VAR 0 11
15677: PPUSH
15678: LD_VAR 0 12
15682: PPUSH
15683: CALL_OW 554
15687: AND
15688: IFFALSE 15728
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15690: LD_ADDR_VAR 0 13
15694: PUSH
15695: LD_VAR 0 13
15699: PPUSH
15700: LD_VAR 0 13
15704: PUSH
15705: LD_INT 1
15707: PLUS
15708: PPUSH
15709: LD_VAR 0 11
15713: PUSH
15714: LD_VAR 0 12
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: PPUSH
15723: CALL_OW 2
15727: ST_TO_ADDR
// end ;
15728: GO 15636
15730: POP
15731: POP
15732: GO 15616
15734: POP
15735: POP
// if not list then
15736: LD_VAR 0 13
15740: NOT
15741: IFFALSE 15745
// exit ;
15743: GO 15816
// for i in list do
15745: LD_ADDR_VAR 0 6
15749: PUSH
15750: LD_VAR 0 13
15754: PUSH
15755: FOR_IN
15756: IFFALSE 15814
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
15758: LD_VAR 0 1
15762: PPUSH
15763: LD_STRING M
15765: PUSH
15766: LD_VAR 0 6
15770: PUSH
15771: LD_INT 1
15773: ARRAY
15774: PUSH
15775: LD_VAR 0 6
15779: PUSH
15780: LD_INT 2
15782: ARRAY
15783: PUSH
15784: LD_INT 0
15786: PUSH
15787: LD_INT 0
15789: PUSH
15790: LD_INT 0
15792: PUSH
15793: LD_INT 0
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: PUSH
15805: EMPTY
15806: LIST
15807: PPUSH
15808: CALL_OW 447
15812: GO 15755
15814: POP
15815: POP
// end ;
15816: LD_VAR 0 5
15820: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
15821: LD_EXP 60
15825: NOT
15826: IFFALSE 15876
15828: GO 15830
15830: DISABLE
// begin initHack := true ;
15831: LD_ADDR_EXP 60
15835: PUSH
15836: LD_INT 1
15838: ST_TO_ADDR
// hackTanks := [ ] ;
15839: LD_ADDR_EXP 61
15843: PUSH
15844: EMPTY
15845: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
15846: LD_ADDR_EXP 62
15850: PUSH
15851: EMPTY
15852: ST_TO_ADDR
// hackLimit := 3 ;
15853: LD_ADDR_EXP 63
15857: PUSH
15858: LD_INT 3
15860: ST_TO_ADDR
// hackDist := 12 ;
15861: LD_ADDR_EXP 64
15865: PUSH
15866: LD_INT 12
15868: ST_TO_ADDR
// hackCounter := [ ] ;
15869: LD_ADDR_EXP 65
15873: PUSH
15874: EMPTY
15875: ST_TO_ADDR
// end ;
15876: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
15877: LD_EXP 60
15881: PUSH
15882: LD_INT 34
15884: PUSH
15885: LD_EXP 72
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PPUSH
15894: CALL_OW 69
15898: AND
15899: IFFALSE 16154
15901: GO 15903
15903: DISABLE
15904: LD_INT 0
15906: PPUSH
15907: PPUSH
// begin enable ;
15908: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
15909: LD_ADDR_VAR 0 1
15913: PUSH
15914: LD_INT 34
15916: PUSH
15917: LD_EXP 72
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: PPUSH
15926: CALL_OW 69
15930: PUSH
15931: FOR_IN
15932: IFFALSE 16152
// begin if not i in hackTanks then
15934: LD_VAR 0 1
15938: PUSH
15939: LD_EXP 61
15943: IN
15944: NOT
15945: IFFALSE 16028
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
15947: LD_ADDR_EXP 61
15951: PUSH
15952: LD_EXP 61
15956: PPUSH
15957: LD_EXP 61
15961: PUSH
15962: LD_INT 1
15964: PLUS
15965: PPUSH
15966: LD_VAR 0 1
15970: PPUSH
15971: CALL_OW 1
15975: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
15976: LD_ADDR_EXP 62
15980: PUSH
15981: LD_EXP 62
15985: PPUSH
15986: LD_EXP 62
15990: PUSH
15991: LD_INT 1
15993: PLUS
15994: PPUSH
15995: EMPTY
15996: PPUSH
15997: CALL_OW 1
16001: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
16002: LD_ADDR_EXP 65
16006: PUSH
16007: LD_EXP 65
16011: PPUSH
16012: LD_EXP 65
16016: PUSH
16017: LD_INT 1
16019: PLUS
16020: PPUSH
16021: EMPTY
16022: PPUSH
16023: CALL_OW 1
16027: ST_TO_ADDR
// end ; if not IsOk ( i ) then
16028: LD_VAR 0 1
16032: PPUSH
16033: CALL_OW 302
16037: NOT
16038: IFFALSE 16051
// begin HackUnlinkAll ( i ) ;
16040: LD_VAR 0 1
16044: PPUSH
16045: CALL 16157 0 1
// continue ;
16049: GO 15931
// end ; HackCheckCapturedStatus ( i ) ;
16051: LD_VAR 0 1
16055: PPUSH
16056: CALL 16600 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
16060: LD_ADDR_VAR 0 2
16064: PUSH
16065: LD_INT 81
16067: PUSH
16068: LD_VAR 0 1
16072: PPUSH
16073: CALL_OW 255
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: PUSH
16082: LD_INT 33
16084: PUSH
16085: LD_INT 3
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PUSH
16092: LD_INT 91
16094: PUSH
16095: LD_VAR 0 1
16099: PUSH
16100: LD_EXP 64
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: LIST
16109: PUSH
16110: LD_INT 50
16112: PUSH
16113: EMPTY
16114: LIST
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: PPUSH
16122: CALL_OW 69
16126: ST_TO_ADDR
// if not tmp then
16127: LD_VAR 0 2
16131: NOT
16132: IFFALSE 16136
// continue ;
16134: GO 15931
// HackLink ( i , tmp ) ;
16136: LD_VAR 0 1
16140: PPUSH
16141: LD_VAR 0 2
16145: PPUSH
16146: CALL 16293 0 2
// end ;
16150: GO 15931
16152: POP
16153: POP
// end ;
16154: PPOPN 2
16156: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
16157: LD_INT 0
16159: PPUSH
16160: PPUSH
16161: PPUSH
// if not hack in hackTanks then
16162: LD_VAR 0 1
16166: PUSH
16167: LD_EXP 61
16171: IN
16172: NOT
16173: IFFALSE 16177
// exit ;
16175: GO 16288
// index := GetElementIndex ( hackTanks , hack ) ;
16177: LD_ADDR_VAR 0 4
16181: PUSH
16182: LD_EXP 61
16186: PPUSH
16187: LD_VAR 0 1
16191: PPUSH
16192: CALL 24248 0 2
16196: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
16197: LD_EXP 62
16201: PUSH
16202: LD_VAR 0 4
16206: ARRAY
16207: IFFALSE 16288
// begin for i in hackTanksCaptured [ index ] do
16209: LD_ADDR_VAR 0 3
16213: PUSH
16214: LD_EXP 62
16218: PUSH
16219: LD_VAR 0 4
16223: ARRAY
16224: PUSH
16225: FOR_IN
16226: IFFALSE 16252
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
16228: LD_VAR 0 3
16232: PUSH
16233: LD_INT 1
16235: ARRAY
16236: PPUSH
16237: LD_VAR 0 3
16241: PUSH
16242: LD_INT 2
16244: ARRAY
16245: PPUSH
16246: CALL_OW 235
16250: GO 16225
16252: POP
16253: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
16254: LD_ADDR_EXP 62
16258: PUSH
16259: LD_EXP 62
16263: PPUSH
16264: LD_VAR 0 4
16268: PPUSH
16269: EMPTY
16270: PPUSH
16271: CALL_OW 1
16275: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
16276: LD_VAR 0 1
16280: PPUSH
16281: LD_INT 0
16283: PPUSH
16284: CALL_OW 505
// end ; end ;
16288: LD_VAR 0 2
16292: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
16293: LD_INT 0
16295: PPUSH
16296: PPUSH
16297: PPUSH
// if not hack in hackTanks or not vehicles then
16298: LD_VAR 0 1
16302: PUSH
16303: LD_EXP 61
16307: IN
16308: NOT
16309: PUSH
16310: LD_VAR 0 2
16314: NOT
16315: OR
16316: IFFALSE 16320
// exit ;
16318: GO 16595
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
16320: LD_ADDR_VAR 0 2
16324: PUSH
16325: LD_VAR 0 1
16329: PPUSH
16330: LD_VAR 0 2
16334: PPUSH
16335: LD_INT 1
16337: PPUSH
16338: LD_INT 1
16340: PPUSH
16341: CALL 24898 0 4
16345: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
16346: LD_ADDR_VAR 0 5
16350: PUSH
16351: LD_EXP 61
16355: PPUSH
16356: LD_VAR 0 1
16360: PPUSH
16361: CALL 24248 0 2
16365: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
16366: LD_EXP 62
16370: PUSH
16371: LD_VAR 0 5
16375: ARRAY
16376: PUSH
16377: LD_EXP 63
16381: LESS
16382: IFFALSE 16571
// begin for i := 1 to vehicles do
16384: LD_ADDR_VAR 0 4
16388: PUSH
16389: DOUBLE
16390: LD_INT 1
16392: DEC
16393: ST_TO_ADDR
16394: LD_VAR 0 2
16398: PUSH
16399: FOR_TO
16400: IFFALSE 16569
// begin if hackTanksCaptured [ index ] = hackLimit then
16402: LD_EXP 62
16406: PUSH
16407: LD_VAR 0 5
16411: ARRAY
16412: PUSH
16413: LD_EXP 63
16417: EQUAL
16418: IFFALSE 16422
// break ;
16420: GO 16569
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
16422: LD_ADDR_EXP 65
16426: PUSH
16427: LD_EXP 65
16431: PPUSH
16432: LD_VAR 0 5
16436: PPUSH
16437: LD_EXP 65
16441: PUSH
16442: LD_VAR 0 5
16446: ARRAY
16447: PUSH
16448: LD_INT 1
16450: PLUS
16451: PPUSH
16452: CALL_OW 1
16456: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
16457: LD_ADDR_EXP 62
16461: PUSH
16462: LD_EXP 62
16466: PPUSH
16467: LD_VAR 0 5
16471: PUSH
16472: LD_EXP 62
16476: PUSH
16477: LD_VAR 0 5
16481: ARRAY
16482: PUSH
16483: LD_INT 1
16485: PLUS
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PPUSH
16491: LD_VAR 0 2
16495: PUSH
16496: LD_VAR 0 4
16500: ARRAY
16501: PUSH
16502: LD_VAR 0 2
16506: PUSH
16507: LD_VAR 0 4
16511: ARRAY
16512: PPUSH
16513: CALL_OW 255
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PPUSH
16522: CALL 24463 0 3
16526: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
16527: LD_VAR 0 2
16531: PUSH
16532: LD_VAR 0 4
16536: ARRAY
16537: PPUSH
16538: LD_VAR 0 1
16542: PPUSH
16543: CALL_OW 255
16547: PPUSH
16548: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
16552: LD_VAR 0 2
16556: PUSH
16557: LD_VAR 0 4
16561: ARRAY
16562: PPUSH
16563: CALL_OW 141
// end ;
16567: GO 16399
16569: POP
16570: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16571: LD_VAR 0 1
16575: PPUSH
16576: LD_EXP 62
16580: PUSH
16581: LD_VAR 0 5
16585: ARRAY
16586: PUSH
16587: LD_INT 0
16589: PLUS
16590: PPUSH
16591: CALL_OW 505
// end ;
16595: LD_VAR 0 3
16599: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
16600: LD_INT 0
16602: PPUSH
16603: PPUSH
16604: PPUSH
16605: PPUSH
// if not hack in hackTanks then
16606: LD_VAR 0 1
16610: PUSH
16611: LD_EXP 61
16615: IN
16616: NOT
16617: IFFALSE 16621
// exit ;
16619: GO 16861
// index := GetElementIndex ( hackTanks , hack ) ;
16621: LD_ADDR_VAR 0 4
16625: PUSH
16626: LD_EXP 61
16630: PPUSH
16631: LD_VAR 0 1
16635: PPUSH
16636: CALL 24248 0 2
16640: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
16641: LD_ADDR_VAR 0 3
16645: PUSH
16646: DOUBLE
16647: LD_EXP 62
16651: PUSH
16652: LD_VAR 0 4
16656: ARRAY
16657: INC
16658: ST_TO_ADDR
16659: LD_INT 1
16661: PUSH
16662: FOR_DOWNTO
16663: IFFALSE 16835
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
16665: LD_ADDR_VAR 0 5
16669: PUSH
16670: LD_EXP 62
16674: PUSH
16675: LD_VAR 0 4
16679: ARRAY
16680: PUSH
16681: LD_VAR 0 3
16685: ARRAY
16686: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
16687: LD_VAR 0 5
16691: PUSH
16692: LD_INT 1
16694: ARRAY
16695: PPUSH
16696: CALL_OW 302
16700: NOT
16701: PUSH
16702: LD_VAR 0 5
16706: PUSH
16707: LD_INT 1
16709: ARRAY
16710: PPUSH
16711: CALL_OW 255
16715: PUSH
16716: LD_VAR 0 1
16720: PPUSH
16721: CALL_OW 255
16725: NONEQUAL
16726: OR
16727: IFFALSE 16833
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
16729: LD_VAR 0 5
16733: PUSH
16734: LD_INT 1
16736: ARRAY
16737: PPUSH
16738: CALL_OW 305
16742: PUSH
16743: LD_VAR 0 5
16747: PUSH
16748: LD_INT 1
16750: ARRAY
16751: PPUSH
16752: CALL_OW 255
16756: PUSH
16757: LD_VAR 0 1
16761: PPUSH
16762: CALL_OW 255
16766: EQUAL
16767: AND
16768: IFFALSE 16792
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
16770: LD_VAR 0 5
16774: PUSH
16775: LD_INT 1
16777: ARRAY
16778: PPUSH
16779: LD_VAR 0 5
16783: PUSH
16784: LD_INT 2
16786: ARRAY
16787: PPUSH
16788: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
16792: LD_ADDR_EXP 62
16796: PUSH
16797: LD_EXP 62
16801: PPUSH
16802: LD_VAR 0 4
16806: PPUSH
16807: LD_EXP 62
16811: PUSH
16812: LD_VAR 0 4
16816: ARRAY
16817: PPUSH
16818: LD_VAR 0 3
16822: PPUSH
16823: CALL_OW 3
16827: PPUSH
16828: CALL_OW 1
16832: ST_TO_ADDR
// end ; end ;
16833: GO 16662
16835: POP
16836: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16837: LD_VAR 0 1
16841: PPUSH
16842: LD_EXP 62
16846: PUSH
16847: LD_VAR 0 4
16851: ARRAY
16852: PUSH
16853: LD_INT 0
16855: PLUS
16856: PPUSH
16857: CALL_OW 505
// end ;
16861: LD_VAR 0 2
16865: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
16866: LD_INT 0
16868: PPUSH
16869: PPUSH
16870: PPUSH
16871: PPUSH
// if not hack in hackTanks then
16872: LD_VAR 0 1
16876: PUSH
16877: LD_EXP 61
16881: IN
16882: NOT
16883: IFFALSE 16887
// exit ;
16885: GO 16972
// index := GetElementIndex ( hackTanks , hack ) ;
16887: LD_ADDR_VAR 0 5
16891: PUSH
16892: LD_EXP 61
16896: PPUSH
16897: LD_VAR 0 1
16901: PPUSH
16902: CALL 24248 0 2
16906: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
16907: LD_ADDR_VAR 0 4
16911: PUSH
16912: DOUBLE
16913: LD_INT 1
16915: DEC
16916: ST_TO_ADDR
16917: LD_EXP 62
16921: PUSH
16922: LD_VAR 0 5
16926: ARRAY
16927: PUSH
16928: FOR_TO
16929: IFFALSE 16970
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
16931: LD_EXP 62
16935: PUSH
16936: LD_VAR 0 5
16940: ARRAY
16941: PUSH
16942: LD_VAR 0 4
16946: ARRAY
16947: PUSH
16948: LD_INT 1
16950: ARRAY
16951: PUSH
16952: LD_VAR 0 2
16956: EQUAL
16957: IFFALSE 16968
// KillUnit ( vehicle ) ;
16959: LD_VAR 0 2
16963: PPUSH
16964: CALL_OW 66
16968: GO 16928
16970: POP
16971: POP
// end ;
16972: LD_VAR 0 3
16976: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
16977: LD_EXP 66
16981: NOT
16982: IFFALSE 17017
16984: GO 16986
16986: DISABLE
// begin initMiner := true ;
16987: LD_ADDR_EXP 66
16991: PUSH
16992: LD_INT 1
16994: ST_TO_ADDR
// minersList := [ ] ;
16995: LD_ADDR_EXP 67
16999: PUSH
17000: EMPTY
17001: ST_TO_ADDR
// minerMinesList := [ ] ;
17002: LD_ADDR_EXP 68
17006: PUSH
17007: EMPTY
17008: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
17009: LD_ADDR_EXP 69
17013: PUSH
17014: LD_INT 5
17016: ST_TO_ADDR
// end ;
17017: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
17018: LD_EXP 66
17022: PUSH
17023: LD_INT 34
17025: PUSH
17026: LD_EXP 77
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: PPUSH
17035: CALL_OW 69
17039: AND
17040: IFFALSE 17503
17042: GO 17044
17044: DISABLE
17045: LD_INT 0
17047: PPUSH
17048: PPUSH
17049: PPUSH
17050: PPUSH
// begin enable ;
17051: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
17052: LD_ADDR_VAR 0 1
17056: PUSH
17057: LD_INT 34
17059: PUSH
17060: LD_EXP 77
17064: PUSH
17065: EMPTY
17066: LIST
17067: LIST
17068: PPUSH
17069: CALL_OW 69
17073: PUSH
17074: FOR_IN
17075: IFFALSE 17147
// begin if not i in minersList then
17077: LD_VAR 0 1
17081: PUSH
17082: LD_EXP 67
17086: IN
17087: NOT
17088: IFFALSE 17145
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
17090: LD_ADDR_EXP 67
17094: PUSH
17095: LD_EXP 67
17099: PPUSH
17100: LD_EXP 67
17104: PUSH
17105: LD_INT 1
17107: PLUS
17108: PPUSH
17109: LD_VAR 0 1
17113: PPUSH
17114: CALL_OW 1
17118: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17119: LD_ADDR_EXP 68
17123: PUSH
17124: LD_EXP 68
17128: PPUSH
17129: LD_EXP 68
17133: PUSH
17134: LD_INT 1
17136: PLUS
17137: PPUSH
17138: EMPTY
17139: PPUSH
17140: CALL_OW 1
17144: ST_TO_ADDR
// end end ;
17145: GO 17074
17147: POP
17148: POP
// for i := minerMinesList downto 1 do
17149: LD_ADDR_VAR 0 1
17153: PUSH
17154: DOUBLE
17155: LD_EXP 68
17159: INC
17160: ST_TO_ADDR
17161: LD_INT 1
17163: PUSH
17164: FOR_DOWNTO
17165: IFFALSE 17501
// begin if IsLive ( minersList [ i ] ) then
17167: LD_EXP 67
17171: PUSH
17172: LD_VAR 0 1
17176: ARRAY
17177: PPUSH
17178: CALL_OW 300
17182: IFFALSE 17210
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
17184: LD_EXP 67
17188: PUSH
17189: LD_VAR 0 1
17193: ARRAY
17194: PPUSH
17195: LD_EXP 68
17199: PUSH
17200: LD_VAR 0 1
17204: ARRAY
17205: PPUSH
17206: CALL_OW 505
// if not minerMinesList [ i ] then
17210: LD_EXP 68
17214: PUSH
17215: LD_VAR 0 1
17219: ARRAY
17220: NOT
17221: IFFALSE 17225
// continue ;
17223: GO 17164
// for j := minerMinesList [ i ] downto 1 do
17225: LD_ADDR_VAR 0 2
17229: PUSH
17230: DOUBLE
17231: LD_EXP 68
17235: PUSH
17236: LD_VAR 0 1
17240: ARRAY
17241: INC
17242: ST_TO_ADDR
17243: LD_INT 1
17245: PUSH
17246: FOR_DOWNTO
17247: IFFALSE 17497
// begin side := GetSide ( minersList [ i ] ) ;
17249: LD_ADDR_VAR 0 3
17253: PUSH
17254: LD_EXP 67
17258: PUSH
17259: LD_VAR 0 1
17263: ARRAY
17264: PPUSH
17265: CALL_OW 255
17269: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
17270: LD_ADDR_VAR 0 4
17274: PUSH
17275: LD_EXP 68
17279: PUSH
17280: LD_VAR 0 1
17284: ARRAY
17285: PUSH
17286: LD_VAR 0 2
17290: ARRAY
17291: PUSH
17292: LD_INT 1
17294: ARRAY
17295: PPUSH
17296: LD_EXP 68
17300: PUSH
17301: LD_VAR 0 1
17305: ARRAY
17306: PUSH
17307: LD_VAR 0 2
17311: ARRAY
17312: PUSH
17313: LD_INT 2
17315: ARRAY
17316: PPUSH
17317: CALL_OW 428
17321: ST_TO_ADDR
// if not tmp then
17322: LD_VAR 0 4
17326: NOT
17327: IFFALSE 17331
// continue ;
17329: GO 17246
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
17331: LD_VAR 0 4
17335: PUSH
17336: LD_INT 81
17338: PUSH
17339: LD_VAR 0 3
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PPUSH
17348: CALL_OW 69
17352: IN
17353: PUSH
17354: LD_EXP 68
17358: PUSH
17359: LD_VAR 0 1
17363: ARRAY
17364: PUSH
17365: LD_VAR 0 2
17369: ARRAY
17370: PUSH
17371: LD_INT 1
17373: ARRAY
17374: PPUSH
17375: LD_EXP 68
17379: PUSH
17380: LD_VAR 0 1
17384: ARRAY
17385: PUSH
17386: LD_VAR 0 2
17390: ARRAY
17391: PUSH
17392: LD_INT 2
17394: ARRAY
17395: PPUSH
17396: CALL_OW 458
17400: AND
17401: IFFALSE 17495
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
17403: LD_EXP 68
17407: PUSH
17408: LD_VAR 0 1
17412: ARRAY
17413: PUSH
17414: LD_VAR 0 2
17418: ARRAY
17419: PUSH
17420: LD_INT 1
17422: ARRAY
17423: PPUSH
17424: LD_EXP 68
17428: PUSH
17429: LD_VAR 0 1
17433: ARRAY
17434: PUSH
17435: LD_VAR 0 2
17439: ARRAY
17440: PUSH
17441: LD_INT 2
17443: ARRAY
17444: PPUSH
17445: LD_VAR 0 3
17449: PPUSH
17450: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
17454: LD_ADDR_EXP 68
17458: PUSH
17459: LD_EXP 68
17463: PPUSH
17464: LD_VAR 0 1
17468: PPUSH
17469: LD_EXP 68
17473: PUSH
17474: LD_VAR 0 1
17478: ARRAY
17479: PPUSH
17480: LD_VAR 0 2
17484: PPUSH
17485: CALL_OW 3
17489: PPUSH
17490: CALL_OW 1
17494: ST_TO_ADDR
// end ; end ;
17495: GO 17246
17497: POP
17498: POP
// end ;
17499: GO 17164
17501: POP
17502: POP
// end ;
17503: PPOPN 4
17505: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
17506: LD_INT 0
17508: PPUSH
17509: PPUSH
// result := false ;
17510: LD_ADDR_VAR 0 4
17514: PUSH
17515: LD_INT 0
17517: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
17518: LD_VAR 0 1
17522: PPUSH
17523: CALL_OW 264
17527: PUSH
17528: LD_EXP 77
17532: EQUAL
17533: NOT
17534: IFFALSE 17538
// exit ;
17536: GO 17778
// index := GetElementIndex ( minersList , unit ) ;
17538: LD_ADDR_VAR 0 5
17542: PUSH
17543: LD_EXP 67
17547: PPUSH
17548: LD_VAR 0 1
17552: PPUSH
17553: CALL 24248 0 2
17557: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
17558: LD_EXP 68
17562: PUSH
17563: LD_VAR 0 5
17567: ARRAY
17568: PUSH
17569: LD_EXP 69
17573: GREATEREQUAL
17574: IFFALSE 17578
// exit ;
17576: GO 17778
// ComMoveXY ( unit , x , y ) ;
17578: LD_VAR 0 1
17582: PPUSH
17583: LD_VAR 0 2
17587: PPUSH
17588: LD_VAR 0 3
17592: PPUSH
17593: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17597: LD_INT 35
17599: PPUSH
17600: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
17604: LD_VAR 0 1
17608: PPUSH
17609: LD_VAR 0 2
17613: PPUSH
17614: LD_VAR 0 3
17618: PPUSH
17619: CALL 54967 0 3
17623: NOT
17624: PUSH
17625: LD_VAR 0 1
17629: PPUSH
17630: CALL_OW 314
17634: AND
17635: IFFALSE 17639
// exit ;
17637: GO 17778
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
17639: LD_VAR 0 2
17643: PPUSH
17644: LD_VAR 0 3
17648: PPUSH
17649: CALL_OW 428
17653: PUSH
17654: LD_VAR 0 1
17658: EQUAL
17659: PUSH
17660: LD_VAR 0 1
17664: PPUSH
17665: CALL_OW 314
17669: NOT
17670: AND
17671: IFFALSE 17597
// PlaySoundXY ( x , y , PlantMine ) ;
17673: LD_VAR 0 2
17677: PPUSH
17678: LD_VAR 0 3
17682: PPUSH
17683: LD_STRING PlantMine
17685: PPUSH
17686: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
17690: LD_VAR 0 2
17694: PPUSH
17695: LD_VAR 0 3
17699: PPUSH
17700: LD_VAR 0 1
17704: PPUSH
17705: CALL_OW 255
17709: PPUSH
17710: LD_INT 0
17712: PPUSH
17713: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17717: LD_ADDR_EXP 68
17721: PUSH
17722: LD_EXP 68
17726: PPUSH
17727: LD_VAR 0 5
17731: PUSH
17732: LD_EXP 68
17736: PUSH
17737: LD_VAR 0 5
17741: ARRAY
17742: PUSH
17743: LD_INT 1
17745: PLUS
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PPUSH
17751: LD_VAR 0 2
17755: PUSH
17756: LD_VAR 0 3
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: PPUSH
17765: CALL 24463 0 3
17769: ST_TO_ADDR
// result := true ;
17770: LD_ADDR_VAR 0 4
17774: PUSH
17775: LD_INT 1
17777: ST_TO_ADDR
// end ;
17778: LD_VAR 0 4
17782: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
17783: LD_INT 0
17785: PPUSH
17786: PPUSH
17787: PPUSH
// if not unit in minersList then
17788: LD_VAR 0 1
17792: PUSH
17793: LD_EXP 67
17797: IN
17798: NOT
17799: IFFALSE 17803
// exit ;
17801: GO 18195
// index := GetElementIndex ( minersList , unit ) ;
17803: LD_ADDR_VAR 0 6
17807: PUSH
17808: LD_EXP 67
17812: PPUSH
17813: LD_VAR 0 1
17817: PPUSH
17818: CALL 24248 0 2
17822: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
17823: LD_ADDR_VAR 0 5
17827: PUSH
17828: DOUBLE
17829: LD_EXP 68
17833: PUSH
17834: LD_VAR 0 6
17838: ARRAY
17839: INC
17840: ST_TO_ADDR
17841: LD_INT 1
17843: PUSH
17844: FOR_DOWNTO
17845: IFFALSE 18006
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
17847: LD_EXP 68
17851: PUSH
17852: LD_VAR 0 6
17856: ARRAY
17857: PUSH
17858: LD_VAR 0 5
17862: ARRAY
17863: PUSH
17864: LD_INT 1
17866: ARRAY
17867: PUSH
17868: LD_VAR 0 2
17872: EQUAL
17873: PUSH
17874: LD_EXP 68
17878: PUSH
17879: LD_VAR 0 6
17883: ARRAY
17884: PUSH
17885: LD_VAR 0 5
17889: ARRAY
17890: PUSH
17891: LD_INT 2
17893: ARRAY
17894: PUSH
17895: LD_VAR 0 3
17899: EQUAL
17900: AND
17901: IFFALSE 18004
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17903: LD_EXP 68
17907: PUSH
17908: LD_VAR 0 6
17912: ARRAY
17913: PUSH
17914: LD_VAR 0 5
17918: ARRAY
17919: PUSH
17920: LD_INT 1
17922: ARRAY
17923: PPUSH
17924: LD_EXP 68
17928: PUSH
17929: LD_VAR 0 6
17933: ARRAY
17934: PUSH
17935: LD_VAR 0 5
17939: ARRAY
17940: PUSH
17941: LD_INT 2
17943: ARRAY
17944: PPUSH
17945: LD_VAR 0 1
17949: PPUSH
17950: CALL_OW 255
17954: PPUSH
17955: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17959: LD_ADDR_EXP 68
17963: PUSH
17964: LD_EXP 68
17968: PPUSH
17969: LD_VAR 0 6
17973: PPUSH
17974: LD_EXP 68
17978: PUSH
17979: LD_VAR 0 6
17983: ARRAY
17984: PPUSH
17985: LD_VAR 0 5
17989: PPUSH
17990: CALL_OW 3
17994: PPUSH
17995: CALL_OW 1
17999: ST_TO_ADDR
// exit ;
18000: POP
18001: POP
18002: GO 18195
// end ; end ;
18004: GO 17844
18006: POP
18007: POP
// for i := minerMinesList [ index ] downto 1 do
18008: LD_ADDR_VAR 0 5
18012: PUSH
18013: DOUBLE
18014: LD_EXP 68
18018: PUSH
18019: LD_VAR 0 6
18023: ARRAY
18024: INC
18025: ST_TO_ADDR
18026: LD_INT 1
18028: PUSH
18029: FOR_DOWNTO
18030: IFFALSE 18193
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
18032: LD_EXP 68
18036: PUSH
18037: LD_VAR 0 6
18041: ARRAY
18042: PUSH
18043: LD_VAR 0 5
18047: ARRAY
18048: PUSH
18049: LD_INT 1
18051: ARRAY
18052: PPUSH
18053: LD_EXP 68
18057: PUSH
18058: LD_VAR 0 6
18062: ARRAY
18063: PUSH
18064: LD_VAR 0 5
18068: ARRAY
18069: PUSH
18070: LD_INT 2
18072: ARRAY
18073: PPUSH
18074: LD_VAR 0 2
18078: PPUSH
18079: LD_VAR 0 3
18083: PPUSH
18084: CALL_OW 298
18088: PUSH
18089: LD_INT 6
18091: LESS
18092: IFFALSE 18191
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18094: LD_EXP 68
18098: PUSH
18099: LD_VAR 0 6
18103: ARRAY
18104: PUSH
18105: LD_VAR 0 5
18109: ARRAY
18110: PUSH
18111: LD_INT 1
18113: ARRAY
18114: PPUSH
18115: LD_EXP 68
18119: PUSH
18120: LD_VAR 0 6
18124: ARRAY
18125: PUSH
18126: LD_VAR 0 5
18130: ARRAY
18131: PUSH
18132: LD_INT 2
18134: ARRAY
18135: PPUSH
18136: LD_VAR 0 1
18140: PPUSH
18141: CALL_OW 255
18145: PPUSH
18146: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18150: LD_ADDR_EXP 68
18154: PUSH
18155: LD_EXP 68
18159: PPUSH
18160: LD_VAR 0 6
18164: PPUSH
18165: LD_EXP 68
18169: PUSH
18170: LD_VAR 0 6
18174: ARRAY
18175: PPUSH
18176: LD_VAR 0 5
18180: PPUSH
18181: CALL_OW 3
18185: PPUSH
18186: CALL_OW 1
18190: ST_TO_ADDR
// end ; end ;
18191: GO 18029
18193: POP
18194: POP
// end ;
18195: LD_VAR 0 4
18199: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
18200: LD_INT 0
18202: PPUSH
18203: PPUSH
18204: PPUSH
18205: PPUSH
18206: PPUSH
18207: PPUSH
18208: PPUSH
18209: PPUSH
18210: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
18211: LD_VAR 0 1
18215: PPUSH
18216: CALL_OW 264
18220: PUSH
18221: LD_EXP 77
18225: EQUAL
18226: NOT
18227: PUSH
18228: LD_VAR 0 1
18232: PUSH
18233: LD_EXP 67
18237: IN
18238: NOT
18239: OR
18240: IFFALSE 18244
// exit ;
18242: GO 18566
// index := GetElementIndex ( minersList , unit ) ;
18244: LD_ADDR_VAR 0 6
18248: PUSH
18249: LD_EXP 67
18253: PPUSH
18254: LD_VAR 0 1
18258: PPUSH
18259: CALL 24248 0 2
18263: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
18264: LD_ADDR_VAR 0 8
18268: PUSH
18269: LD_EXP 69
18273: PUSH
18274: LD_EXP 68
18278: PUSH
18279: LD_VAR 0 6
18283: ARRAY
18284: MINUS
18285: ST_TO_ADDR
// if not minesFreeAmount then
18286: LD_VAR 0 8
18290: NOT
18291: IFFALSE 18295
// exit ;
18293: GO 18566
// tmp := [ ] ;
18295: LD_ADDR_VAR 0 7
18299: PUSH
18300: EMPTY
18301: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
18302: LD_ADDR_VAR 0 5
18306: PUSH
18307: DOUBLE
18308: LD_INT 1
18310: DEC
18311: ST_TO_ADDR
18312: LD_VAR 0 8
18316: PUSH
18317: FOR_TO
18318: IFFALSE 18513
// begin _d := rand ( 0 , 5 ) ;
18320: LD_ADDR_VAR 0 11
18324: PUSH
18325: LD_INT 0
18327: PPUSH
18328: LD_INT 5
18330: PPUSH
18331: CALL_OW 12
18335: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
18336: LD_ADDR_VAR 0 12
18340: PUSH
18341: LD_INT 2
18343: PPUSH
18344: LD_INT 6
18346: PPUSH
18347: CALL_OW 12
18351: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
18352: LD_ADDR_VAR 0 9
18356: PUSH
18357: LD_VAR 0 2
18361: PPUSH
18362: LD_VAR 0 11
18366: PPUSH
18367: LD_VAR 0 12
18371: PPUSH
18372: CALL_OW 272
18376: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
18377: LD_ADDR_VAR 0 10
18381: PUSH
18382: LD_VAR 0 3
18386: PPUSH
18387: LD_VAR 0 11
18391: PPUSH
18392: LD_VAR 0 12
18396: PPUSH
18397: CALL_OW 273
18401: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
18402: LD_VAR 0 9
18406: PPUSH
18407: LD_VAR 0 10
18411: PPUSH
18412: CALL_OW 488
18416: PUSH
18417: LD_VAR 0 9
18421: PUSH
18422: LD_VAR 0 10
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: LD_VAR 0 7
18435: IN
18436: NOT
18437: AND
18438: PUSH
18439: LD_VAR 0 9
18443: PPUSH
18444: LD_VAR 0 10
18448: PPUSH
18449: CALL_OW 458
18453: NOT
18454: AND
18455: IFFALSE 18497
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
18457: LD_ADDR_VAR 0 7
18461: PUSH
18462: LD_VAR 0 7
18466: PPUSH
18467: LD_VAR 0 7
18471: PUSH
18472: LD_INT 1
18474: PLUS
18475: PPUSH
18476: LD_VAR 0 9
18480: PUSH
18481: LD_VAR 0 10
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PPUSH
18490: CALL_OW 1
18494: ST_TO_ADDR
18495: GO 18511
// i := i - 1 ;
18497: LD_ADDR_VAR 0 5
18501: PUSH
18502: LD_VAR 0 5
18506: PUSH
18507: LD_INT 1
18509: MINUS
18510: ST_TO_ADDR
// end ;
18511: GO 18317
18513: POP
18514: POP
// for i in tmp do
18515: LD_ADDR_VAR 0 5
18519: PUSH
18520: LD_VAR 0 7
18524: PUSH
18525: FOR_IN
18526: IFFALSE 18564
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
18528: LD_VAR 0 1
18532: PPUSH
18533: LD_VAR 0 5
18537: PUSH
18538: LD_INT 1
18540: ARRAY
18541: PPUSH
18542: LD_VAR 0 5
18546: PUSH
18547: LD_INT 2
18549: ARRAY
18550: PPUSH
18551: CALL 17506 0 3
18555: NOT
18556: IFFALSE 18562
// exit ;
18558: POP
18559: POP
18560: GO 18566
18562: GO 18525
18564: POP
18565: POP
// end ;
18566: LD_VAR 0 4
18570: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
18571: LD_INT 0
18573: PPUSH
18574: PPUSH
18575: PPUSH
18576: PPUSH
18577: PPUSH
18578: PPUSH
18579: PPUSH
// if not GetClass ( unit ) = class_sniper then
18580: LD_VAR 0 1
18584: PPUSH
18585: CALL_OW 257
18589: PUSH
18590: LD_INT 5
18592: EQUAL
18593: NOT
18594: IFFALSE 18598
// exit ;
18596: GO 18986
// dist := 8 ;
18598: LD_ADDR_VAR 0 5
18602: PUSH
18603: LD_INT 8
18605: ST_TO_ADDR
// viewRange := 12 ;
18606: LD_ADDR_VAR 0 7
18610: PUSH
18611: LD_INT 12
18613: ST_TO_ADDR
// side := GetSide ( unit ) ;
18614: LD_ADDR_VAR 0 6
18618: PUSH
18619: LD_VAR 0 1
18623: PPUSH
18624: CALL_OW 255
18628: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
18629: LD_INT 61
18631: PPUSH
18632: LD_VAR 0 6
18636: PPUSH
18637: CALL_OW 321
18641: PUSH
18642: LD_INT 2
18644: EQUAL
18645: IFFALSE 18655
// viewRange := 16 ;
18647: LD_ADDR_VAR 0 7
18651: PUSH
18652: LD_INT 16
18654: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
18655: LD_VAR 0 1
18659: PPUSH
18660: LD_VAR 0 2
18664: PPUSH
18665: LD_VAR 0 3
18669: PPUSH
18670: CALL_OW 297
18674: PUSH
18675: LD_VAR 0 5
18679: GREATER
18680: IFFALSE 18759
// begin ComMoveXY ( unit , x , y ) ;
18682: LD_VAR 0 1
18686: PPUSH
18687: LD_VAR 0 2
18691: PPUSH
18692: LD_VAR 0 3
18696: PPUSH
18697: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18701: LD_INT 35
18703: PPUSH
18704: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
18708: LD_VAR 0 1
18712: PPUSH
18713: LD_VAR 0 2
18717: PPUSH
18718: LD_VAR 0 3
18722: PPUSH
18723: CALL 54967 0 3
18727: NOT
18728: IFFALSE 18732
// exit ;
18730: GO 18986
// until GetDistUnitXY ( unit , x , y ) < dist ;
18732: LD_VAR 0 1
18736: PPUSH
18737: LD_VAR 0 2
18741: PPUSH
18742: LD_VAR 0 3
18746: PPUSH
18747: CALL_OW 297
18751: PUSH
18752: LD_VAR 0 5
18756: LESS
18757: IFFALSE 18701
// end ; ComTurnXY ( unit , x , y ) ;
18759: LD_VAR 0 1
18763: PPUSH
18764: LD_VAR 0 2
18768: PPUSH
18769: LD_VAR 0 3
18773: PPUSH
18774: CALL_OW 118
// wait ( 5 ) ;
18778: LD_INT 5
18780: PPUSH
18781: CALL_OW 67
// _d := GetDir ( unit ) ;
18785: LD_ADDR_VAR 0 10
18789: PUSH
18790: LD_VAR 0 1
18794: PPUSH
18795: CALL_OW 254
18799: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
18800: LD_ADDR_VAR 0 8
18804: PUSH
18805: LD_VAR 0 1
18809: PPUSH
18810: CALL_OW 250
18814: PPUSH
18815: LD_VAR 0 10
18819: PPUSH
18820: LD_VAR 0 5
18824: PPUSH
18825: CALL_OW 272
18829: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
18830: LD_ADDR_VAR 0 9
18834: PUSH
18835: LD_VAR 0 1
18839: PPUSH
18840: CALL_OW 251
18844: PPUSH
18845: LD_VAR 0 10
18849: PPUSH
18850: LD_VAR 0 5
18854: PPUSH
18855: CALL_OW 273
18859: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18860: LD_VAR 0 8
18864: PPUSH
18865: LD_VAR 0 9
18869: PPUSH
18870: CALL_OW 488
18874: NOT
18875: IFFALSE 18879
// exit ;
18877: GO 18986
// ComAnimCustom ( unit , 1 ) ;
18879: LD_VAR 0 1
18883: PPUSH
18884: LD_INT 1
18886: PPUSH
18887: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
18891: LD_VAR 0 8
18895: PPUSH
18896: LD_VAR 0 9
18900: PPUSH
18901: LD_VAR 0 6
18905: PPUSH
18906: LD_VAR 0 7
18910: PPUSH
18911: CALL_OW 330
// repeat wait ( 1 ) ;
18915: LD_INT 1
18917: PPUSH
18918: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
18922: LD_VAR 0 1
18926: PPUSH
18927: CALL_OW 316
18931: PUSH
18932: LD_VAR 0 1
18936: PPUSH
18937: CALL_OW 314
18941: OR
18942: PUSH
18943: LD_VAR 0 1
18947: PPUSH
18948: CALL_OW 302
18952: NOT
18953: OR
18954: PUSH
18955: LD_VAR 0 1
18959: PPUSH
18960: CALL_OW 301
18964: OR
18965: IFFALSE 18915
// RemoveSeeing ( _x , _y , side ) ;
18967: LD_VAR 0 8
18971: PPUSH
18972: LD_VAR 0 9
18976: PPUSH
18977: LD_VAR 0 6
18981: PPUSH
18982: CALL_OW 331
// end ; end_of_file
18986: LD_VAR 0 4
18990: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
18991: LD_VAR 0 1
18995: PPUSH
18996: LD_VAR 0 2
19000: PPUSH
19001: LD_VAR 0 3
19005: PPUSH
19006: LD_VAR 0 4
19010: PPUSH
19011: LD_VAR 0 5
19015: PPUSH
19016: LD_VAR 0 6
19020: PPUSH
19021: CALL 64 0 6
// end ;
19025: PPOPN 6
19027: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
19028: LD_INT 0
19030: PPUSH
// begin if not units then
19031: LD_VAR 0 1
19035: NOT
19036: IFFALSE 19040
// exit ;
19038: GO 19128
// if p1 = 1 then
19040: LD_VAR 0 2
19044: PUSH
19045: LD_INT 1
19047: EQUAL
19048: IFFALSE 19128
// begin if p2 = 1 then
19050: LD_VAR 0 3
19054: PUSH
19055: LD_INT 1
19057: EQUAL
19058: IFFALSE 19089
// begin for i in units do
19060: LD_ADDR_VAR 0 7
19064: PUSH
19065: LD_VAR 0 1
19069: PUSH
19070: FOR_IN
19071: IFFALSE 19087
// begin SetUnitAttackType ( i , 3 ) ;
19073: LD_VAR 0 7
19077: PPUSH
19078: LD_INT 3
19080: PPUSH
19081: CALL_OW 603
// end ;
19085: GO 19070
19087: POP
19088: POP
// end ; if p2 = 2 then
19089: LD_VAR 0 3
19093: PUSH
19094: LD_INT 2
19096: EQUAL
19097: IFFALSE 19128
// begin for i in units do
19099: LD_ADDR_VAR 0 7
19103: PUSH
19104: LD_VAR 0 1
19108: PUSH
19109: FOR_IN
19110: IFFALSE 19126
// begin SetUnitAttackType ( i , 1 ) ;
19112: LD_VAR 0 7
19116: PPUSH
19117: LD_INT 1
19119: PPUSH
19120: CALL_OW 603
// end ;
19124: GO 19109
19126: POP
19127: POP
// end ; end ; end ;
19128: PPOPN 7
19130: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
19131: CALL 39 0 0
// end ; end_of_file
19135: PPOPN 1
19137: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
19138: LD_VAR 0 1
19142: PUSH
19143: LD_INT 200
19145: DOUBLE
19146: GREATEREQUAL
19147: IFFALSE 19155
19149: LD_INT 299
19151: DOUBLE
19152: LESSEQUAL
19153: IFTRUE 19157
19155: GO 19189
19157: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
19158: LD_VAR 0 1
19162: PPUSH
19163: LD_VAR 0 2
19167: PPUSH
19168: LD_VAR 0 3
19172: PPUSH
19173: LD_VAR 0 4
19177: PPUSH
19178: LD_VAR 0 5
19182: PPUSH
19183: CALL 14729 0 5
19187: GO 19266
19189: LD_INT 300
19191: DOUBLE
19192: GREATEREQUAL
19193: IFFALSE 19201
19195: LD_INT 399
19197: DOUBLE
19198: LESSEQUAL
19199: IFTRUE 19203
19201: GO 19265
19203: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
19204: LD_VAR 0 1
19208: PPUSH
19209: LD_VAR 0 2
19213: PPUSH
19214: LD_VAR 0 3
19218: PPUSH
19219: LD_VAR 0 4
19223: PPUSH
19224: LD_VAR 0 5
19228: PPUSH
19229: LD_VAR 0 6
19233: PPUSH
19234: LD_VAR 0 7
19238: PPUSH
19239: LD_VAR 0 8
19243: PPUSH
19244: LD_VAR 0 9
19248: PPUSH
19249: LD_VAR 0 10
19253: PPUSH
19254: LD_VAR 0 11
19258: PPUSH
19259: CALL 12371 0 11
19263: GO 19266
19265: POP
// end ;
19266: PPOPN 11
19268: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
19269: LD_VAR 0 1
19273: PPUSH
19274: LD_VAR 0 2
19278: PPUSH
19279: LD_VAR 0 3
19283: PPUSH
19284: LD_VAR 0 4
19288: PPUSH
19289: LD_VAR 0 5
19293: PPUSH
19294: CALL 14465 0 5
// end ; end_of_file
19298: PPOPN 5
19300: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19301: LD_INT 0
19303: PPUSH
// ar_miner := 81 ;
19304: LD_ADDR_EXP 77
19308: PUSH
19309: LD_INT 81
19311: ST_TO_ADDR
// ar_crane := 88 ;
19312: LD_ADDR_EXP 76
19316: PUSH
19317: LD_INT 88
19319: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19320: LD_ADDR_EXP 71
19324: PUSH
19325: LD_INT 89
19327: ST_TO_ADDR
// us_hack := 99 ;
19328: LD_ADDR_EXP 72
19332: PUSH
19333: LD_INT 99
19335: ST_TO_ADDR
// us_artillery := 97 ;
19336: LD_ADDR_EXP 73
19340: PUSH
19341: LD_INT 97
19343: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19344: LD_ADDR_EXP 74
19348: PUSH
19349: LD_INT 91
19351: ST_TO_ADDR
// ar_mortar := 92 ;
19352: LD_ADDR_EXP 75
19356: PUSH
19357: LD_INT 92
19359: ST_TO_ADDR
// ru_flamethrower := 93 ;
19360: LD_ADDR_EXP 78
19364: PUSH
19365: LD_INT 93
19367: ST_TO_ADDR
// ru_radar := 98 ;
19368: LD_ADDR_EXP 70
19372: PUSH
19373: LD_INT 98
19375: ST_TO_ADDR
// tech_Artillery := 80 ;
19376: LD_ADDR_EXP 79
19380: PUSH
19381: LD_INT 80
19383: ST_TO_ADDR
// tech_RadMat := 81 ;
19384: LD_ADDR_EXP 80
19388: PUSH
19389: LD_INT 81
19391: ST_TO_ADDR
// tech_BasicTools := 82 ;
19392: LD_ADDR_EXP 81
19396: PUSH
19397: LD_INT 82
19399: ST_TO_ADDR
// tech_Cargo := 83 ;
19400: LD_ADDR_EXP 82
19404: PUSH
19405: LD_INT 83
19407: ST_TO_ADDR
// tech_Track := 84 ;
19408: LD_ADDR_EXP 83
19412: PUSH
19413: LD_INT 84
19415: ST_TO_ADDR
// tech_Crane := 85 ;
19416: LD_ADDR_EXP 84
19420: PUSH
19421: LD_INT 85
19423: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19424: LD_ADDR_EXP 85
19428: PUSH
19429: LD_INT 86
19431: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19432: LD_ADDR_EXP 86
19436: PUSH
19437: LD_INT 87
19439: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19440: LD_ADDR_EXP 87
19444: PUSH
19445: LD_INT 88
19447: ST_TO_ADDR
// class_mastodont := 31 ;
19448: LD_ADDR_EXP 88
19452: PUSH
19453: LD_INT 31
19455: ST_TO_ADDR
// class_horse := 21 ;
19456: LD_ADDR_EXP 89
19460: PUSH
19461: LD_INT 21
19463: ST_TO_ADDR
// end ;
19464: LD_VAR 0 1
19468: RET
// every 1 do
19469: GO 19471
19471: DISABLE
// InitGlobalVariables ; end_of_file
19472: CALL 19301 0 0
19476: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19477: LD_INT 0
19479: PPUSH
19480: PPUSH
// if exist_mode then
19481: LD_VAR 0 2
19485: IFFALSE 19510
// unit := CreateCharacter ( prefix & ident ) else
19487: LD_ADDR_VAR 0 5
19491: PUSH
19492: LD_VAR 0 3
19496: PUSH
19497: LD_VAR 0 1
19501: STR
19502: PPUSH
19503: CALL_OW 34
19507: ST_TO_ADDR
19508: GO 19525
// unit := NewCharacter ( ident ) ;
19510: LD_ADDR_VAR 0 5
19514: PUSH
19515: LD_VAR 0 1
19519: PPUSH
19520: CALL_OW 25
19524: ST_TO_ADDR
// result := unit ;
19525: LD_ADDR_VAR 0 4
19529: PUSH
19530: LD_VAR 0 5
19534: ST_TO_ADDR
// end ;
19535: LD_VAR 0 4
19539: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19540: LD_INT 0
19542: PPUSH
19543: PPUSH
// if not side or not nation then
19544: LD_VAR 0 1
19548: NOT
19549: PUSH
19550: LD_VAR 0 2
19554: NOT
19555: OR
19556: IFFALSE 19560
// exit ;
19558: GO 20328
// case nation of nation_american :
19560: LD_VAR 0 2
19564: PUSH
19565: LD_INT 1
19567: DOUBLE
19568: EQUAL
19569: IFTRUE 19573
19571: GO 19787
19573: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19574: LD_ADDR_VAR 0 4
19578: PUSH
19579: LD_INT 35
19581: PUSH
19582: LD_INT 45
19584: PUSH
19585: LD_INT 46
19587: PUSH
19588: LD_INT 47
19590: PUSH
19591: LD_INT 82
19593: PUSH
19594: LD_INT 83
19596: PUSH
19597: LD_INT 84
19599: PUSH
19600: LD_INT 85
19602: PUSH
19603: LD_INT 86
19605: PUSH
19606: LD_INT 1
19608: PUSH
19609: LD_INT 2
19611: PUSH
19612: LD_INT 6
19614: PUSH
19615: LD_INT 15
19617: PUSH
19618: LD_INT 16
19620: PUSH
19621: LD_INT 7
19623: PUSH
19624: LD_INT 12
19626: PUSH
19627: LD_INT 13
19629: PUSH
19630: LD_INT 10
19632: PUSH
19633: LD_INT 14
19635: PUSH
19636: LD_INT 20
19638: PUSH
19639: LD_INT 21
19641: PUSH
19642: LD_INT 22
19644: PUSH
19645: LD_INT 25
19647: PUSH
19648: LD_INT 32
19650: PUSH
19651: LD_INT 27
19653: PUSH
19654: LD_INT 36
19656: PUSH
19657: LD_INT 69
19659: PUSH
19660: LD_INT 39
19662: PUSH
19663: LD_INT 34
19665: PUSH
19666: LD_INT 40
19668: PUSH
19669: LD_INT 48
19671: PUSH
19672: LD_INT 49
19674: PUSH
19675: LD_INT 50
19677: PUSH
19678: LD_INT 51
19680: PUSH
19681: LD_INT 52
19683: PUSH
19684: LD_INT 53
19686: PUSH
19687: LD_INT 54
19689: PUSH
19690: LD_INT 55
19692: PUSH
19693: LD_INT 56
19695: PUSH
19696: LD_INT 57
19698: PUSH
19699: LD_INT 58
19701: PUSH
19702: LD_INT 59
19704: PUSH
19705: LD_INT 60
19707: PUSH
19708: LD_INT 61
19710: PUSH
19711: LD_INT 62
19713: PUSH
19714: LD_INT 80
19716: PUSH
19717: LD_INT 82
19719: PUSH
19720: LD_INT 83
19722: PUSH
19723: LD_INT 84
19725: PUSH
19726: LD_INT 85
19728: PUSH
19729: LD_INT 86
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: ST_TO_ADDR
19785: GO 20252
19787: LD_INT 2
19789: DOUBLE
19790: EQUAL
19791: IFTRUE 19795
19793: GO 20021
19795: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
19796: LD_ADDR_VAR 0 4
19800: PUSH
19801: LD_INT 35
19803: PUSH
19804: LD_INT 45
19806: PUSH
19807: LD_INT 46
19809: PUSH
19810: LD_INT 47
19812: PUSH
19813: LD_INT 82
19815: PUSH
19816: LD_INT 83
19818: PUSH
19819: LD_INT 84
19821: PUSH
19822: LD_INT 85
19824: PUSH
19825: LD_INT 87
19827: PUSH
19828: LD_INT 70
19830: PUSH
19831: LD_INT 1
19833: PUSH
19834: LD_INT 11
19836: PUSH
19837: LD_INT 3
19839: PUSH
19840: LD_INT 4
19842: PUSH
19843: LD_INT 5
19845: PUSH
19846: LD_INT 6
19848: PUSH
19849: LD_INT 15
19851: PUSH
19852: LD_INT 18
19854: PUSH
19855: LD_INT 7
19857: PUSH
19858: LD_INT 17
19860: PUSH
19861: LD_INT 8
19863: PUSH
19864: LD_INT 20
19866: PUSH
19867: LD_INT 21
19869: PUSH
19870: LD_INT 22
19872: PUSH
19873: LD_INT 72
19875: PUSH
19876: LD_INT 26
19878: PUSH
19879: LD_INT 69
19881: PUSH
19882: LD_INT 39
19884: PUSH
19885: LD_INT 40
19887: PUSH
19888: LD_INT 41
19890: PUSH
19891: LD_INT 42
19893: PUSH
19894: LD_INT 43
19896: PUSH
19897: LD_INT 48
19899: PUSH
19900: LD_INT 49
19902: PUSH
19903: LD_INT 50
19905: PUSH
19906: LD_INT 51
19908: PUSH
19909: LD_INT 52
19911: PUSH
19912: LD_INT 53
19914: PUSH
19915: LD_INT 54
19917: PUSH
19918: LD_INT 55
19920: PUSH
19921: LD_INT 56
19923: PUSH
19924: LD_INT 60
19926: PUSH
19927: LD_INT 61
19929: PUSH
19930: LD_INT 62
19932: PUSH
19933: LD_INT 66
19935: PUSH
19936: LD_INT 67
19938: PUSH
19939: LD_INT 68
19941: PUSH
19942: LD_INT 81
19944: PUSH
19945: LD_INT 82
19947: PUSH
19948: LD_INT 83
19950: PUSH
19951: LD_INT 84
19953: PUSH
19954: LD_INT 85
19956: PUSH
19957: LD_INT 87
19959: PUSH
19960: LD_INT 88
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: ST_TO_ADDR
20019: GO 20252
20021: LD_INT 3
20023: DOUBLE
20024: EQUAL
20025: IFTRUE 20029
20027: GO 20251
20029: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
20030: LD_ADDR_VAR 0 4
20034: PUSH
20035: LD_INT 46
20037: PUSH
20038: LD_INT 47
20040: PUSH
20041: LD_INT 1
20043: PUSH
20044: LD_INT 2
20046: PUSH
20047: LD_INT 82
20049: PUSH
20050: LD_INT 83
20052: PUSH
20053: LD_INT 84
20055: PUSH
20056: LD_INT 85
20058: PUSH
20059: LD_INT 86
20061: PUSH
20062: LD_INT 11
20064: PUSH
20065: LD_INT 9
20067: PUSH
20068: LD_INT 20
20070: PUSH
20071: LD_INT 19
20073: PUSH
20074: LD_INT 21
20076: PUSH
20077: LD_INT 24
20079: PUSH
20080: LD_INT 22
20082: PUSH
20083: LD_INT 25
20085: PUSH
20086: LD_INT 28
20088: PUSH
20089: LD_INT 29
20091: PUSH
20092: LD_INT 30
20094: PUSH
20095: LD_INT 31
20097: PUSH
20098: LD_INT 37
20100: PUSH
20101: LD_INT 38
20103: PUSH
20104: LD_INT 32
20106: PUSH
20107: LD_INT 27
20109: PUSH
20110: LD_INT 33
20112: PUSH
20113: LD_INT 69
20115: PUSH
20116: LD_INT 39
20118: PUSH
20119: LD_INT 34
20121: PUSH
20122: LD_INT 40
20124: PUSH
20125: LD_INT 71
20127: PUSH
20128: LD_INT 23
20130: PUSH
20131: LD_INT 44
20133: PUSH
20134: LD_INT 48
20136: PUSH
20137: LD_INT 49
20139: PUSH
20140: LD_INT 50
20142: PUSH
20143: LD_INT 51
20145: PUSH
20146: LD_INT 52
20148: PUSH
20149: LD_INT 53
20151: PUSH
20152: LD_INT 54
20154: PUSH
20155: LD_INT 55
20157: PUSH
20158: LD_INT 56
20160: PUSH
20161: LD_INT 57
20163: PUSH
20164: LD_INT 58
20166: PUSH
20167: LD_INT 59
20169: PUSH
20170: LD_INT 63
20172: PUSH
20173: LD_INT 64
20175: PUSH
20176: LD_INT 65
20178: PUSH
20179: LD_INT 82
20181: PUSH
20182: LD_INT 83
20184: PUSH
20185: LD_INT 84
20187: PUSH
20188: LD_INT 85
20190: PUSH
20191: LD_INT 86
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: ST_TO_ADDR
20249: GO 20252
20251: POP
// if state > - 1 and state < 3 then
20252: LD_VAR 0 3
20256: PUSH
20257: LD_INT 1
20259: NEG
20260: GREATER
20261: PUSH
20262: LD_VAR 0 3
20266: PUSH
20267: LD_INT 3
20269: LESS
20270: AND
20271: IFFALSE 20328
// for i in result do
20273: LD_ADDR_VAR 0 5
20277: PUSH
20278: LD_VAR 0 4
20282: PUSH
20283: FOR_IN
20284: IFFALSE 20326
// if GetTech ( i , side ) <> state then
20286: LD_VAR 0 5
20290: PPUSH
20291: LD_VAR 0 1
20295: PPUSH
20296: CALL_OW 321
20300: PUSH
20301: LD_VAR 0 3
20305: NONEQUAL
20306: IFFALSE 20324
// result := result diff i ;
20308: LD_ADDR_VAR 0 4
20312: PUSH
20313: LD_VAR 0 4
20317: PUSH
20318: LD_VAR 0 5
20322: DIFF
20323: ST_TO_ADDR
20324: GO 20283
20326: POP
20327: POP
// end ;
20328: LD_VAR 0 4
20332: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20333: LD_INT 0
20335: PPUSH
20336: PPUSH
20337: PPUSH
// result := true ;
20338: LD_ADDR_VAR 0 3
20342: PUSH
20343: LD_INT 1
20345: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20346: LD_ADDR_VAR 0 5
20350: PUSH
20351: LD_VAR 0 2
20355: PPUSH
20356: CALL_OW 480
20360: ST_TO_ADDR
// if not tmp then
20361: LD_VAR 0 5
20365: NOT
20366: IFFALSE 20370
// exit ;
20368: GO 20419
// for i in tmp do
20370: LD_ADDR_VAR 0 4
20374: PUSH
20375: LD_VAR 0 5
20379: PUSH
20380: FOR_IN
20381: IFFALSE 20417
// if GetTech ( i , side ) <> state_researched then
20383: LD_VAR 0 4
20387: PPUSH
20388: LD_VAR 0 1
20392: PPUSH
20393: CALL_OW 321
20397: PUSH
20398: LD_INT 2
20400: NONEQUAL
20401: IFFALSE 20415
// begin result := false ;
20403: LD_ADDR_VAR 0 3
20407: PUSH
20408: LD_INT 0
20410: ST_TO_ADDR
// exit ;
20411: POP
20412: POP
20413: GO 20419
// end ;
20415: GO 20380
20417: POP
20418: POP
// end ;
20419: LD_VAR 0 3
20423: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20424: LD_INT 0
20426: PPUSH
20427: PPUSH
20428: PPUSH
20429: PPUSH
20430: PPUSH
20431: PPUSH
20432: PPUSH
20433: PPUSH
20434: PPUSH
20435: PPUSH
20436: PPUSH
20437: PPUSH
20438: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20439: LD_VAR 0 1
20443: NOT
20444: PUSH
20445: LD_VAR 0 1
20449: PPUSH
20450: CALL_OW 257
20454: PUSH
20455: LD_INT 9
20457: NONEQUAL
20458: OR
20459: IFFALSE 20463
// exit ;
20461: GO 21036
// side := GetSide ( unit ) ;
20463: LD_ADDR_VAR 0 9
20467: PUSH
20468: LD_VAR 0 1
20472: PPUSH
20473: CALL_OW 255
20477: ST_TO_ADDR
// tech_space := tech_spacanom ;
20478: LD_ADDR_VAR 0 12
20482: PUSH
20483: LD_INT 29
20485: ST_TO_ADDR
// tech_time := tech_taurad ;
20486: LD_ADDR_VAR 0 13
20490: PUSH
20491: LD_INT 28
20493: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20494: LD_ADDR_VAR 0 11
20498: PUSH
20499: LD_VAR 0 1
20503: PPUSH
20504: CALL_OW 310
20508: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20509: LD_VAR 0 11
20513: PPUSH
20514: CALL_OW 247
20518: PUSH
20519: LD_INT 2
20521: EQUAL
20522: IFFALSE 20526
// exit ;
20524: GO 21036
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20526: LD_ADDR_VAR 0 8
20530: PUSH
20531: LD_INT 81
20533: PUSH
20534: LD_VAR 0 9
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 3
20545: PUSH
20546: LD_INT 21
20548: PUSH
20549: LD_INT 3
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PPUSH
20564: CALL_OW 69
20568: ST_TO_ADDR
// if not tmp then
20569: LD_VAR 0 8
20573: NOT
20574: IFFALSE 20578
// exit ;
20576: GO 21036
// if in_unit then
20578: LD_VAR 0 11
20582: IFFALSE 20606
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20584: LD_ADDR_VAR 0 10
20588: PUSH
20589: LD_VAR 0 8
20593: PPUSH
20594: LD_VAR 0 11
20598: PPUSH
20599: CALL_OW 74
20603: ST_TO_ADDR
20604: GO 20626
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20606: LD_ADDR_VAR 0 10
20610: PUSH
20611: LD_VAR 0 8
20615: PPUSH
20616: LD_VAR 0 1
20620: PPUSH
20621: CALL_OW 74
20625: ST_TO_ADDR
// if not enemy then
20626: LD_VAR 0 10
20630: NOT
20631: IFFALSE 20635
// exit ;
20633: GO 21036
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20635: LD_VAR 0 11
20639: PUSH
20640: LD_VAR 0 11
20644: PPUSH
20645: LD_VAR 0 10
20649: PPUSH
20650: CALL_OW 296
20654: PUSH
20655: LD_INT 13
20657: GREATER
20658: AND
20659: PUSH
20660: LD_VAR 0 1
20664: PPUSH
20665: LD_VAR 0 10
20669: PPUSH
20670: CALL_OW 296
20674: PUSH
20675: LD_INT 12
20677: GREATER
20678: OR
20679: IFFALSE 20683
// exit ;
20681: GO 21036
// missile := [ 1 ] ;
20683: LD_ADDR_VAR 0 14
20687: PUSH
20688: LD_INT 1
20690: PUSH
20691: EMPTY
20692: LIST
20693: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20694: LD_VAR 0 9
20698: PPUSH
20699: LD_VAR 0 12
20703: PPUSH
20704: CALL_OW 325
20708: IFFALSE 20737
// missile := Replace ( missile , missile + 1 , 2 ) ;
20710: LD_ADDR_VAR 0 14
20714: PUSH
20715: LD_VAR 0 14
20719: PPUSH
20720: LD_VAR 0 14
20724: PUSH
20725: LD_INT 1
20727: PLUS
20728: PPUSH
20729: LD_INT 2
20731: PPUSH
20732: CALL_OW 1
20736: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20737: LD_VAR 0 9
20741: PPUSH
20742: LD_VAR 0 13
20746: PPUSH
20747: CALL_OW 325
20751: PUSH
20752: LD_VAR 0 10
20756: PPUSH
20757: CALL_OW 255
20761: PPUSH
20762: LD_VAR 0 13
20766: PPUSH
20767: CALL_OW 325
20771: NOT
20772: AND
20773: IFFALSE 20802
// missile := Replace ( missile , missile + 1 , 3 ) ;
20775: LD_ADDR_VAR 0 14
20779: PUSH
20780: LD_VAR 0 14
20784: PPUSH
20785: LD_VAR 0 14
20789: PUSH
20790: LD_INT 1
20792: PLUS
20793: PPUSH
20794: LD_INT 3
20796: PPUSH
20797: CALL_OW 1
20801: ST_TO_ADDR
// if missile < 2 then
20802: LD_VAR 0 14
20806: PUSH
20807: LD_INT 2
20809: LESS
20810: IFFALSE 20814
// exit ;
20812: GO 21036
// x := GetX ( enemy ) ;
20814: LD_ADDR_VAR 0 4
20818: PUSH
20819: LD_VAR 0 10
20823: PPUSH
20824: CALL_OW 250
20828: ST_TO_ADDR
// y := GetY ( enemy ) ;
20829: LD_ADDR_VAR 0 5
20833: PUSH
20834: LD_VAR 0 10
20838: PPUSH
20839: CALL_OW 251
20843: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20844: LD_ADDR_VAR 0 6
20848: PUSH
20849: LD_VAR 0 4
20853: PUSH
20854: LD_INT 1
20856: NEG
20857: PPUSH
20858: LD_INT 1
20860: PPUSH
20861: CALL_OW 12
20865: PLUS
20866: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20867: LD_ADDR_VAR 0 7
20871: PUSH
20872: LD_VAR 0 5
20876: PUSH
20877: LD_INT 1
20879: NEG
20880: PPUSH
20881: LD_INT 1
20883: PPUSH
20884: CALL_OW 12
20888: PLUS
20889: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20890: LD_VAR 0 6
20894: PPUSH
20895: LD_VAR 0 7
20899: PPUSH
20900: CALL_OW 488
20904: NOT
20905: IFFALSE 20927
// begin _x := x ;
20907: LD_ADDR_VAR 0 6
20911: PUSH
20912: LD_VAR 0 4
20916: ST_TO_ADDR
// _y := y ;
20917: LD_ADDR_VAR 0 7
20921: PUSH
20922: LD_VAR 0 5
20926: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20927: LD_ADDR_VAR 0 3
20931: PUSH
20932: LD_INT 1
20934: PPUSH
20935: LD_VAR 0 14
20939: PPUSH
20940: CALL_OW 12
20944: ST_TO_ADDR
// case i of 1 :
20945: LD_VAR 0 3
20949: PUSH
20950: LD_INT 1
20952: DOUBLE
20953: EQUAL
20954: IFTRUE 20958
20956: GO 20975
20958: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20959: LD_VAR 0 1
20963: PPUSH
20964: LD_VAR 0 10
20968: PPUSH
20969: CALL_OW 115
20973: GO 21036
20975: LD_INT 2
20977: DOUBLE
20978: EQUAL
20979: IFTRUE 20983
20981: GO 21005
20983: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20984: LD_VAR 0 1
20988: PPUSH
20989: LD_VAR 0 6
20993: PPUSH
20994: LD_VAR 0 7
20998: PPUSH
20999: CALL_OW 153
21003: GO 21036
21005: LD_INT 3
21007: DOUBLE
21008: EQUAL
21009: IFTRUE 21013
21011: GO 21035
21013: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21014: LD_VAR 0 1
21018: PPUSH
21019: LD_VAR 0 6
21023: PPUSH
21024: LD_VAR 0 7
21028: PPUSH
21029: CALL_OW 154
21033: GO 21036
21035: POP
// end ;
21036: LD_VAR 0 2
21040: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21041: LD_INT 0
21043: PPUSH
21044: PPUSH
21045: PPUSH
21046: PPUSH
21047: PPUSH
21048: PPUSH
// if not unit or not building then
21049: LD_VAR 0 1
21053: NOT
21054: PUSH
21055: LD_VAR 0 2
21059: NOT
21060: OR
21061: IFFALSE 21065
// exit ;
21063: GO 21223
// x := GetX ( building ) ;
21065: LD_ADDR_VAR 0 5
21069: PUSH
21070: LD_VAR 0 2
21074: PPUSH
21075: CALL_OW 250
21079: ST_TO_ADDR
// y := GetY ( building ) ;
21080: LD_ADDR_VAR 0 6
21084: PUSH
21085: LD_VAR 0 2
21089: PPUSH
21090: CALL_OW 251
21094: ST_TO_ADDR
// for i = 0 to 5 do
21095: LD_ADDR_VAR 0 4
21099: PUSH
21100: DOUBLE
21101: LD_INT 0
21103: DEC
21104: ST_TO_ADDR
21105: LD_INT 5
21107: PUSH
21108: FOR_TO
21109: IFFALSE 21221
// begin _x := ShiftX ( x , i , 3 ) ;
21111: LD_ADDR_VAR 0 7
21115: PUSH
21116: LD_VAR 0 5
21120: PPUSH
21121: LD_VAR 0 4
21125: PPUSH
21126: LD_INT 3
21128: PPUSH
21129: CALL_OW 272
21133: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21134: LD_ADDR_VAR 0 8
21138: PUSH
21139: LD_VAR 0 6
21143: PPUSH
21144: LD_VAR 0 4
21148: PPUSH
21149: LD_INT 3
21151: PPUSH
21152: CALL_OW 273
21156: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21157: LD_VAR 0 7
21161: PPUSH
21162: LD_VAR 0 8
21166: PPUSH
21167: CALL_OW 488
21171: NOT
21172: IFFALSE 21176
// continue ;
21174: GO 21108
// if HexInfo ( _x , _y ) = 0 then
21176: LD_VAR 0 7
21180: PPUSH
21181: LD_VAR 0 8
21185: PPUSH
21186: CALL_OW 428
21190: PUSH
21191: LD_INT 0
21193: EQUAL
21194: IFFALSE 21219
// begin ComMoveXY ( unit , _x , _y ) ;
21196: LD_VAR 0 1
21200: PPUSH
21201: LD_VAR 0 7
21205: PPUSH
21206: LD_VAR 0 8
21210: PPUSH
21211: CALL_OW 111
// exit ;
21215: POP
21216: POP
21217: GO 21223
// end ; end ;
21219: GO 21108
21221: POP
21222: POP
// end ;
21223: LD_VAR 0 3
21227: RET
// export function ScanBase ( side , base_area ) ; begin
21228: LD_INT 0
21230: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21231: LD_ADDR_VAR 0 3
21235: PUSH
21236: LD_VAR 0 2
21240: PPUSH
21241: LD_INT 81
21243: PUSH
21244: LD_VAR 0 1
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: PPUSH
21253: CALL_OW 70
21257: ST_TO_ADDR
// end ;
21258: LD_VAR 0 3
21262: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21263: LD_INT 0
21265: PPUSH
21266: PPUSH
21267: PPUSH
21268: PPUSH
// result := false ;
21269: LD_ADDR_VAR 0 2
21273: PUSH
21274: LD_INT 0
21276: ST_TO_ADDR
// side := GetSide ( unit ) ;
21277: LD_ADDR_VAR 0 3
21281: PUSH
21282: LD_VAR 0 1
21286: PPUSH
21287: CALL_OW 255
21291: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21292: LD_ADDR_VAR 0 4
21296: PUSH
21297: LD_VAR 0 1
21301: PPUSH
21302: CALL_OW 248
21306: ST_TO_ADDR
// case nat of 1 :
21307: LD_VAR 0 4
21311: PUSH
21312: LD_INT 1
21314: DOUBLE
21315: EQUAL
21316: IFTRUE 21320
21318: GO 21331
21320: POP
// tech := tech_lassight ; 2 :
21321: LD_ADDR_VAR 0 5
21325: PUSH
21326: LD_INT 12
21328: ST_TO_ADDR
21329: GO 21370
21331: LD_INT 2
21333: DOUBLE
21334: EQUAL
21335: IFTRUE 21339
21337: GO 21350
21339: POP
// tech := tech_mortar ; 3 :
21340: LD_ADDR_VAR 0 5
21344: PUSH
21345: LD_INT 41
21347: ST_TO_ADDR
21348: GO 21370
21350: LD_INT 3
21352: DOUBLE
21353: EQUAL
21354: IFTRUE 21358
21356: GO 21369
21358: POP
// tech := tech_bazooka ; end ;
21359: LD_ADDR_VAR 0 5
21363: PUSH
21364: LD_INT 44
21366: ST_TO_ADDR
21367: GO 21370
21369: POP
// if Researched ( side , tech ) then
21370: LD_VAR 0 3
21374: PPUSH
21375: LD_VAR 0 5
21379: PPUSH
21380: CALL_OW 325
21384: IFFALSE 21411
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21386: LD_ADDR_VAR 0 2
21390: PUSH
21391: LD_INT 5
21393: PUSH
21394: LD_INT 8
21396: PUSH
21397: LD_INT 9
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: LIST
21404: PUSH
21405: LD_VAR 0 4
21409: ARRAY
21410: ST_TO_ADDR
// end ;
21411: LD_VAR 0 2
21415: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21416: LD_INT 0
21418: PPUSH
21419: PPUSH
21420: PPUSH
// if not mines then
21421: LD_VAR 0 2
21425: NOT
21426: IFFALSE 21430
// exit ;
21428: GO 21574
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21430: LD_ADDR_VAR 0 5
21434: PUSH
21435: LD_INT 81
21437: PUSH
21438: LD_VAR 0 1
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: LD_INT 3
21449: PUSH
21450: LD_INT 21
21452: PUSH
21453: LD_INT 3
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: PPUSH
21468: CALL_OW 69
21472: ST_TO_ADDR
// for i in mines do
21473: LD_ADDR_VAR 0 4
21477: PUSH
21478: LD_VAR 0 2
21482: PUSH
21483: FOR_IN
21484: IFFALSE 21572
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21486: LD_VAR 0 4
21490: PUSH
21491: LD_INT 1
21493: ARRAY
21494: PPUSH
21495: LD_VAR 0 4
21499: PUSH
21500: LD_INT 2
21502: ARRAY
21503: PPUSH
21504: CALL_OW 458
21508: NOT
21509: IFFALSE 21513
// continue ;
21511: GO 21483
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21513: LD_VAR 0 4
21517: PUSH
21518: LD_INT 1
21520: ARRAY
21521: PPUSH
21522: LD_VAR 0 4
21526: PUSH
21527: LD_INT 2
21529: ARRAY
21530: PPUSH
21531: CALL_OW 428
21535: PUSH
21536: LD_VAR 0 5
21540: IN
21541: IFFALSE 21570
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21543: LD_VAR 0 4
21547: PUSH
21548: LD_INT 1
21550: ARRAY
21551: PPUSH
21552: LD_VAR 0 4
21556: PUSH
21557: LD_INT 2
21559: ARRAY
21560: PPUSH
21561: LD_VAR 0 1
21565: PPUSH
21566: CALL_OW 456
// end ;
21570: GO 21483
21572: POP
21573: POP
// end ;
21574: LD_VAR 0 3
21578: RET
// export function Count ( array ) ; var i ; begin
21579: LD_INT 0
21581: PPUSH
21582: PPUSH
// result := 0 ;
21583: LD_ADDR_VAR 0 2
21587: PUSH
21588: LD_INT 0
21590: ST_TO_ADDR
// for i in array do
21591: LD_ADDR_VAR 0 3
21595: PUSH
21596: LD_VAR 0 1
21600: PUSH
21601: FOR_IN
21602: IFFALSE 21626
// if i then
21604: LD_VAR 0 3
21608: IFFALSE 21624
// result := result + 1 ;
21610: LD_ADDR_VAR 0 2
21614: PUSH
21615: LD_VAR 0 2
21619: PUSH
21620: LD_INT 1
21622: PLUS
21623: ST_TO_ADDR
21624: GO 21601
21626: POP
21627: POP
// end ;
21628: LD_VAR 0 2
21632: RET
// export function IsEmpty ( building ) ; begin
21633: LD_INT 0
21635: PPUSH
// if not building then
21636: LD_VAR 0 1
21640: NOT
21641: IFFALSE 21645
// exit ;
21643: GO 21688
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
21645: LD_ADDR_VAR 0 2
21649: PUSH
21650: LD_VAR 0 1
21654: PUSH
21655: LD_INT 22
21657: PUSH
21658: LD_VAR 0 1
21662: PPUSH
21663: CALL_OW 255
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 58
21674: PUSH
21675: EMPTY
21676: LIST
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PPUSH
21682: CALL_OW 69
21686: IN
21687: ST_TO_ADDR
// end ;
21688: LD_VAR 0 2
21692: RET
// export function IsNotFull ( building ) ; begin
21693: LD_INT 0
21695: PPUSH
// if not building then
21696: LD_VAR 0 1
21700: NOT
21701: IFFALSE 21705
// exit ;
21703: GO 21724
// result := UnitsInside ( building ) < 6 ;
21705: LD_ADDR_VAR 0 2
21709: PUSH
21710: LD_VAR 0 1
21714: PPUSH
21715: CALL_OW 313
21719: PUSH
21720: LD_INT 6
21722: LESS
21723: ST_TO_ADDR
// end ;
21724: LD_VAR 0 2
21728: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21729: LD_INT 0
21731: PPUSH
21732: PPUSH
21733: PPUSH
21734: PPUSH
// tmp := [ ] ;
21735: LD_ADDR_VAR 0 3
21739: PUSH
21740: EMPTY
21741: ST_TO_ADDR
// list := [ ] ;
21742: LD_ADDR_VAR 0 5
21746: PUSH
21747: EMPTY
21748: ST_TO_ADDR
// for i = 16 to 25 do
21749: LD_ADDR_VAR 0 4
21753: PUSH
21754: DOUBLE
21755: LD_INT 16
21757: DEC
21758: ST_TO_ADDR
21759: LD_INT 25
21761: PUSH
21762: FOR_TO
21763: IFFALSE 21836
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21765: LD_ADDR_VAR 0 3
21769: PUSH
21770: LD_VAR 0 3
21774: PUSH
21775: LD_INT 22
21777: PUSH
21778: LD_VAR 0 1
21782: PPUSH
21783: CALL_OW 255
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: LD_INT 91
21794: PUSH
21795: LD_VAR 0 1
21799: PUSH
21800: LD_INT 6
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: LIST
21807: PUSH
21808: LD_INT 30
21810: PUSH
21811: LD_VAR 0 4
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: LIST
21824: PUSH
21825: EMPTY
21826: LIST
21827: PPUSH
21828: CALL_OW 69
21832: ADD
21833: ST_TO_ADDR
21834: GO 21762
21836: POP
21837: POP
// for i = 1 to tmp do
21838: LD_ADDR_VAR 0 4
21842: PUSH
21843: DOUBLE
21844: LD_INT 1
21846: DEC
21847: ST_TO_ADDR
21848: LD_VAR 0 3
21852: PUSH
21853: FOR_TO
21854: IFFALSE 21942
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
21856: LD_ADDR_VAR 0 5
21860: PUSH
21861: LD_VAR 0 5
21865: PUSH
21866: LD_VAR 0 3
21870: PUSH
21871: LD_VAR 0 4
21875: ARRAY
21876: PPUSH
21877: CALL_OW 266
21881: PUSH
21882: LD_VAR 0 3
21886: PUSH
21887: LD_VAR 0 4
21891: ARRAY
21892: PPUSH
21893: CALL_OW 250
21897: PUSH
21898: LD_VAR 0 3
21902: PUSH
21903: LD_VAR 0 4
21907: ARRAY
21908: PPUSH
21909: CALL_OW 251
21913: PUSH
21914: LD_VAR 0 3
21918: PUSH
21919: LD_VAR 0 4
21923: ARRAY
21924: PPUSH
21925: CALL_OW 254
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: PUSH
21936: EMPTY
21937: LIST
21938: ADD
21939: ST_TO_ADDR
21940: GO 21853
21942: POP
21943: POP
// result := list ;
21944: LD_ADDR_VAR 0 2
21948: PUSH
21949: LD_VAR 0 5
21953: ST_TO_ADDR
// end ;
21954: LD_VAR 0 2
21958: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
21959: LD_INT 0
21961: PPUSH
21962: PPUSH
21963: PPUSH
21964: PPUSH
21965: PPUSH
21966: PPUSH
21967: PPUSH
// if not factory then
21968: LD_VAR 0 1
21972: NOT
21973: IFFALSE 21977
// exit ;
21975: GO 22570
// if control = control_apeman then
21977: LD_VAR 0 4
21981: PUSH
21982: LD_INT 5
21984: EQUAL
21985: IFFALSE 22094
// begin tmp := UnitsInside ( factory ) ;
21987: LD_ADDR_VAR 0 8
21991: PUSH
21992: LD_VAR 0 1
21996: PPUSH
21997: CALL_OW 313
22001: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22002: LD_VAR 0 8
22006: PPUSH
22007: LD_INT 25
22009: PUSH
22010: LD_INT 12
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PPUSH
22017: CALL_OW 72
22021: NOT
22022: IFFALSE 22032
// control := control_manual ;
22024: LD_ADDR_VAR 0 4
22028: PUSH
22029: LD_INT 1
22031: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22032: LD_ADDR_VAR 0 8
22036: PUSH
22037: LD_VAR 0 1
22041: PPUSH
22042: CALL 21729 0 1
22046: ST_TO_ADDR
// if tmp then
22047: LD_VAR 0 8
22051: IFFALSE 22094
// begin for i in tmp do
22053: LD_ADDR_VAR 0 7
22057: PUSH
22058: LD_VAR 0 8
22062: PUSH
22063: FOR_IN
22064: IFFALSE 22092
// if i [ 1 ] = b_ext_radio then
22066: LD_VAR 0 7
22070: PUSH
22071: LD_INT 1
22073: ARRAY
22074: PUSH
22075: LD_INT 22
22077: EQUAL
22078: IFFALSE 22090
// begin control := control_remote ;
22080: LD_ADDR_VAR 0 4
22084: PUSH
22085: LD_INT 2
22087: ST_TO_ADDR
// break ;
22088: GO 22092
// end ;
22090: GO 22063
22092: POP
22093: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22094: LD_VAR 0 1
22098: PPUSH
22099: LD_VAR 0 2
22103: PPUSH
22104: LD_VAR 0 3
22108: PPUSH
22109: LD_VAR 0 4
22113: PPUSH
22114: LD_VAR 0 5
22118: PPUSH
22119: CALL_OW 448
22123: IFFALSE 22158
// begin result := [ chassis , engine , control , weapon ] ;
22125: LD_ADDR_VAR 0 6
22129: PUSH
22130: LD_VAR 0 2
22134: PUSH
22135: LD_VAR 0 3
22139: PUSH
22140: LD_VAR 0 4
22144: PUSH
22145: LD_VAR 0 5
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: ST_TO_ADDR
// exit ;
22156: GO 22570
// end ; _chassis := AvailableChassisList ( factory ) ;
22158: LD_ADDR_VAR 0 9
22162: PUSH
22163: LD_VAR 0 1
22167: PPUSH
22168: CALL_OW 475
22172: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22173: LD_ADDR_VAR 0 11
22177: PUSH
22178: LD_VAR 0 1
22182: PPUSH
22183: CALL_OW 476
22187: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22188: LD_ADDR_VAR 0 12
22192: PUSH
22193: LD_VAR 0 1
22197: PPUSH
22198: CALL_OW 477
22202: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22203: LD_ADDR_VAR 0 10
22207: PUSH
22208: LD_VAR 0 1
22212: PPUSH
22213: CALL_OW 478
22217: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22218: LD_VAR 0 9
22222: NOT
22223: PUSH
22224: LD_VAR 0 11
22228: NOT
22229: OR
22230: PUSH
22231: LD_VAR 0 12
22235: NOT
22236: OR
22237: PUSH
22238: LD_VAR 0 10
22242: NOT
22243: OR
22244: IFFALSE 22279
// begin result := [ chassis , engine , control , weapon ] ;
22246: LD_ADDR_VAR 0 6
22250: PUSH
22251: LD_VAR 0 2
22255: PUSH
22256: LD_VAR 0 3
22260: PUSH
22261: LD_VAR 0 4
22265: PUSH
22266: LD_VAR 0 5
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: ST_TO_ADDR
// exit ;
22277: GO 22570
// end ; if not chassis in _chassis then
22279: LD_VAR 0 2
22283: PUSH
22284: LD_VAR 0 9
22288: IN
22289: NOT
22290: IFFALSE 22316
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22292: LD_ADDR_VAR 0 2
22296: PUSH
22297: LD_VAR 0 9
22301: PUSH
22302: LD_INT 1
22304: PPUSH
22305: LD_VAR 0 9
22309: PPUSH
22310: CALL_OW 12
22314: ARRAY
22315: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22316: LD_VAR 0 2
22320: PPUSH
22321: LD_VAR 0 3
22325: PPUSH
22326: CALL 22575 0 2
22330: NOT
22331: IFFALSE 22390
// repeat engine := _engine [ 1 ] ;
22333: LD_ADDR_VAR 0 3
22337: PUSH
22338: LD_VAR 0 11
22342: PUSH
22343: LD_INT 1
22345: ARRAY
22346: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22347: LD_ADDR_VAR 0 11
22351: PUSH
22352: LD_VAR 0 11
22356: PPUSH
22357: LD_INT 1
22359: PPUSH
22360: CALL_OW 3
22364: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22365: LD_VAR 0 2
22369: PPUSH
22370: LD_VAR 0 3
22374: PPUSH
22375: CALL 22575 0 2
22379: PUSH
22380: LD_VAR 0 11
22384: PUSH
22385: EMPTY
22386: EQUAL
22387: OR
22388: IFFALSE 22333
// if not control in _control then
22390: LD_VAR 0 4
22394: PUSH
22395: LD_VAR 0 12
22399: IN
22400: NOT
22401: IFFALSE 22427
// control := _control [ rand ( 1 , _control ) ] ;
22403: LD_ADDR_VAR 0 4
22407: PUSH
22408: LD_VAR 0 12
22412: PUSH
22413: LD_INT 1
22415: PPUSH
22416: LD_VAR 0 12
22420: PPUSH
22421: CALL_OW 12
22425: ARRAY
22426: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22427: LD_VAR 0 2
22431: PPUSH
22432: LD_VAR 0 5
22436: PPUSH
22437: CALL 22795 0 2
22441: NOT
22442: IFFALSE 22501
// repeat weapon := _weapon [ 1 ] ;
22444: LD_ADDR_VAR 0 5
22448: PUSH
22449: LD_VAR 0 10
22453: PUSH
22454: LD_INT 1
22456: ARRAY
22457: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22458: LD_ADDR_VAR 0 10
22462: PUSH
22463: LD_VAR 0 10
22467: PPUSH
22468: LD_INT 1
22470: PPUSH
22471: CALL_OW 3
22475: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22476: LD_VAR 0 2
22480: PPUSH
22481: LD_VAR 0 5
22485: PPUSH
22486: CALL 22795 0 2
22490: PUSH
22491: LD_VAR 0 10
22495: PUSH
22496: EMPTY
22497: EQUAL
22498: OR
22499: IFFALSE 22444
// result := [ ] ;
22501: LD_ADDR_VAR 0 6
22505: PUSH
22506: EMPTY
22507: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22508: LD_VAR 0 1
22512: PPUSH
22513: LD_VAR 0 2
22517: PPUSH
22518: LD_VAR 0 3
22522: PPUSH
22523: LD_VAR 0 4
22527: PPUSH
22528: LD_VAR 0 5
22532: PPUSH
22533: CALL_OW 448
22537: IFFALSE 22570
// result := [ chassis , engine , control , weapon ] ;
22539: LD_ADDR_VAR 0 6
22543: PUSH
22544: LD_VAR 0 2
22548: PUSH
22549: LD_VAR 0 3
22553: PUSH
22554: LD_VAR 0 4
22558: PUSH
22559: LD_VAR 0 5
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: ST_TO_ADDR
// end ;
22570: LD_VAR 0 6
22574: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22575: LD_INT 0
22577: PPUSH
// if not chassis or not engine then
22578: LD_VAR 0 1
22582: NOT
22583: PUSH
22584: LD_VAR 0 2
22588: NOT
22589: OR
22590: IFFALSE 22594
// exit ;
22592: GO 22790
// case engine of engine_solar :
22594: LD_VAR 0 2
22598: PUSH
22599: LD_INT 2
22601: DOUBLE
22602: EQUAL
22603: IFTRUE 22607
22605: GO 22645
22607: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
22608: LD_ADDR_VAR 0 3
22612: PUSH
22613: LD_INT 11
22615: PUSH
22616: LD_INT 12
22618: PUSH
22619: LD_INT 13
22621: PUSH
22622: LD_INT 14
22624: PUSH
22625: LD_INT 1
22627: PUSH
22628: LD_INT 2
22630: PUSH
22631: LD_INT 3
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: ST_TO_ADDR
22643: GO 22774
22645: LD_INT 1
22647: DOUBLE
22648: EQUAL
22649: IFTRUE 22653
22651: GO 22715
22653: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
22654: LD_ADDR_VAR 0 3
22658: PUSH
22659: LD_INT 11
22661: PUSH
22662: LD_INT 12
22664: PUSH
22665: LD_INT 13
22667: PUSH
22668: LD_INT 14
22670: PUSH
22671: LD_INT 1
22673: PUSH
22674: LD_INT 2
22676: PUSH
22677: LD_INT 3
22679: PUSH
22680: LD_INT 4
22682: PUSH
22683: LD_INT 5
22685: PUSH
22686: LD_INT 21
22688: PUSH
22689: LD_INT 23
22691: PUSH
22692: LD_INT 22
22694: PUSH
22695: LD_INT 24
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: ST_TO_ADDR
22713: GO 22774
22715: LD_INT 3
22717: DOUBLE
22718: EQUAL
22719: IFTRUE 22723
22721: GO 22773
22723: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22724: LD_ADDR_VAR 0 3
22728: PUSH
22729: LD_INT 13
22731: PUSH
22732: LD_INT 14
22734: PUSH
22735: LD_INT 2
22737: PUSH
22738: LD_INT 3
22740: PUSH
22741: LD_INT 4
22743: PUSH
22744: LD_INT 5
22746: PUSH
22747: LD_INT 21
22749: PUSH
22750: LD_INT 22
22752: PUSH
22753: LD_INT 23
22755: PUSH
22756: LD_INT 24
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: ST_TO_ADDR
22771: GO 22774
22773: POP
// result := ( chassis in result ) ;
22774: LD_ADDR_VAR 0 3
22778: PUSH
22779: LD_VAR 0 1
22783: PUSH
22784: LD_VAR 0 3
22788: IN
22789: ST_TO_ADDR
// end ;
22790: LD_VAR 0 3
22794: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
22795: LD_INT 0
22797: PPUSH
// if not chassis or not weapon then
22798: LD_VAR 0 1
22802: NOT
22803: PUSH
22804: LD_VAR 0 2
22808: NOT
22809: OR
22810: IFFALSE 22814
// exit ;
22812: GO 23876
// case weapon of us_machine_gun :
22814: LD_VAR 0 2
22818: PUSH
22819: LD_INT 2
22821: DOUBLE
22822: EQUAL
22823: IFTRUE 22827
22825: GO 22857
22827: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
22828: LD_ADDR_VAR 0 3
22832: PUSH
22833: LD_INT 1
22835: PUSH
22836: LD_INT 2
22838: PUSH
22839: LD_INT 3
22841: PUSH
22842: LD_INT 4
22844: PUSH
22845: LD_INT 5
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: ST_TO_ADDR
22855: GO 23860
22857: LD_INT 3
22859: DOUBLE
22860: EQUAL
22861: IFTRUE 22865
22863: GO 22895
22865: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
22866: LD_ADDR_VAR 0 3
22870: PUSH
22871: LD_INT 1
22873: PUSH
22874: LD_INT 2
22876: PUSH
22877: LD_INT 3
22879: PUSH
22880: LD_INT 4
22882: PUSH
22883: LD_INT 5
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: ST_TO_ADDR
22893: GO 23860
22895: LD_INT 11
22897: DOUBLE
22898: EQUAL
22899: IFTRUE 22903
22901: GO 22933
22903: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
22904: LD_ADDR_VAR 0 3
22908: PUSH
22909: LD_INT 1
22911: PUSH
22912: LD_INT 2
22914: PUSH
22915: LD_INT 3
22917: PUSH
22918: LD_INT 4
22920: PUSH
22921: LD_INT 5
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: ST_TO_ADDR
22931: GO 23860
22933: LD_INT 4
22935: DOUBLE
22936: EQUAL
22937: IFTRUE 22941
22939: GO 22967
22941: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
22942: LD_ADDR_VAR 0 3
22946: PUSH
22947: LD_INT 2
22949: PUSH
22950: LD_INT 3
22952: PUSH
22953: LD_INT 4
22955: PUSH
22956: LD_INT 5
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: ST_TO_ADDR
22965: GO 23860
22967: LD_INT 5
22969: DOUBLE
22970: EQUAL
22971: IFTRUE 22975
22973: GO 23001
22975: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
22976: LD_ADDR_VAR 0 3
22980: PUSH
22981: LD_INT 2
22983: PUSH
22984: LD_INT 3
22986: PUSH
22987: LD_INT 4
22989: PUSH
22990: LD_INT 5
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: ST_TO_ADDR
22999: GO 23860
23001: LD_INT 9
23003: DOUBLE
23004: EQUAL
23005: IFTRUE 23009
23007: GO 23035
23009: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23010: LD_ADDR_VAR 0 3
23014: PUSH
23015: LD_INT 2
23017: PUSH
23018: LD_INT 3
23020: PUSH
23021: LD_INT 4
23023: PUSH
23024: LD_INT 5
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: ST_TO_ADDR
23033: GO 23860
23035: LD_INT 7
23037: DOUBLE
23038: EQUAL
23039: IFTRUE 23043
23041: GO 23069
23043: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
23044: LD_ADDR_VAR 0 3
23048: PUSH
23049: LD_INT 2
23051: PUSH
23052: LD_INT 3
23054: PUSH
23055: LD_INT 4
23057: PUSH
23058: LD_INT 5
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: ST_TO_ADDR
23067: GO 23860
23069: LD_INT 12
23071: DOUBLE
23072: EQUAL
23073: IFTRUE 23077
23075: GO 23103
23077: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
23078: LD_ADDR_VAR 0 3
23082: PUSH
23083: LD_INT 2
23085: PUSH
23086: LD_INT 3
23088: PUSH
23089: LD_INT 4
23091: PUSH
23092: LD_INT 5
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: ST_TO_ADDR
23101: GO 23860
23103: LD_INT 13
23105: DOUBLE
23106: EQUAL
23107: IFTRUE 23111
23109: GO 23137
23111: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23112: LD_ADDR_VAR 0 3
23116: PUSH
23117: LD_INT 2
23119: PUSH
23120: LD_INT 3
23122: PUSH
23123: LD_INT 4
23125: PUSH
23126: LD_INT 5
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: ST_TO_ADDR
23135: GO 23860
23137: LD_INT 14
23139: DOUBLE
23140: EQUAL
23141: IFTRUE 23145
23143: GO 23163
23145: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23146: LD_ADDR_VAR 0 3
23150: PUSH
23151: LD_INT 4
23153: PUSH
23154: LD_INT 5
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: ST_TO_ADDR
23161: GO 23860
23163: LD_INT 6
23165: DOUBLE
23166: EQUAL
23167: IFTRUE 23171
23169: GO 23189
23171: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23172: LD_ADDR_VAR 0 3
23176: PUSH
23177: LD_INT 4
23179: PUSH
23180: LD_INT 5
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: ST_TO_ADDR
23187: GO 23860
23189: LD_INT 10
23191: DOUBLE
23192: EQUAL
23193: IFTRUE 23197
23195: GO 23215
23197: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23198: LD_ADDR_VAR 0 3
23202: PUSH
23203: LD_INT 4
23205: PUSH
23206: LD_INT 5
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: ST_TO_ADDR
23213: GO 23860
23215: LD_INT 22
23217: DOUBLE
23218: EQUAL
23219: IFTRUE 23223
23221: GO 23249
23223: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23224: LD_ADDR_VAR 0 3
23228: PUSH
23229: LD_INT 11
23231: PUSH
23232: LD_INT 12
23234: PUSH
23235: LD_INT 13
23237: PUSH
23238: LD_INT 14
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: ST_TO_ADDR
23247: GO 23860
23249: LD_INT 23
23251: DOUBLE
23252: EQUAL
23253: IFTRUE 23257
23255: GO 23283
23257: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23258: LD_ADDR_VAR 0 3
23262: PUSH
23263: LD_INT 11
23265: PUSH
23266: LD_INT 12
23268: PUSH
23269: LD_INT 13
23271: PUSH
23272: LD_INT 14
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: ST_TO_ADDR
23281: GO 23860
23283: LD_INT 24
23285: DOUBLE
23286: EQUAL
23287: IFTRUE 23291
23289: GO 23317
23291: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23292: LD_ADDR_VAR 0 3
23296: PUSH
23297: LD_INT 11
23299: PUSH
23300: LD_INT 12
23302: PUSH
23303: LD_INT 13
23305: PUSH
23306: LD_INT 14
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: ST_TO_ADDR
23315: GO 23860
23317: LD_INT 30
23319: DOUBLE
23320: EQUAL
23321: IFTRUE 23325
23323: GO 23351
23325: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23326: LD_ADDR_VAR 0 3
23330: PUSH
23331: LD_INT 11
23333: PUSH
23334: LD_INT 12
23336: PUSH
23337: LD_INT 13
23339: PUSH
23340: LD_INT 14
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: ST_TO_ADDR
23349: GO 23860
23351: LD_INT 25
23353: DOUBLE
23354: EQUAL
23355: IFTRUE 23359
23357: GO 23377
23359: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23360: LD_ADDR_VAR 0 3
23364: PUSH
23365: LD_INT 13
23367: PUSH
23368: LD_INT 14
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: ST_TO_ADDR
23375: GO 23860
23377: LD_INT 27
23379: DOUBLE
23380: EQUAL
23381: IFTRUE 23385
23383: GO 23403
23385: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
23386: LD_ADDR_VAR 0 3
23390: PUSH
23391: LD_INT 13
23393: PUSH
23394: LD_INT 14
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: ST_TO_ADDR
23401: GO 23860
23403: LD_EXP 75
23407: DOUBLE
23408: EQUAL
23409: IFTRUE 23413
23411: GO 23439
23413: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23414: LD_ADDR_VAR 0 3
23418: PUSH
23419: LD_INT 11
23421: PUSH
23422: LD_INT 12
23424: PUSH
23425: LD_INT 13
23427: PUSH
23428: LD_INT 14
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: ST_TO_ADDR
23437: GO 23860
23439: LD_INT 28
23441: DOUBLE
23442: EQUAL
23443: IFTRUE 23447
23445: GO 23465
23447: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23448: LD_ADDR_VAR 0 3
23452: PUSH
23453: LD_INT 13
23455: PUSH
23456: LD_INT 14
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: ST_TO_ADDR
23463: GO 23860
23465: LD_INT 29
23467: DOUBLE
23468: EQUAL
23469: IFTRUE 23473
23471: GO 23491
23473: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23474: LD_ADDR_VAR 0 3
23478: PUSH
23479: LD_INT 13
23481: PUSH
23482: LD_INT 14
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: ST_TO_ADDR
23489: GO 23860
23491: LD_INT 31
23493: DOUBLE
23494: EQUAL
23495: IFTRUE 23499
23497: GO 23517
23499: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23500: LD_ADDR_VAR 0 3
23504: PUSH
23505: LD_INT 13
23507: PUSH
23508: LD_INT 14
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: ST_TO_ADDR
23515: GO 23860
23517: LD_INT 26
23519: DOUBLE
23520: EQUAL
23521: IFTRUE 23525
23523: GO 23543
23525: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23526: LD_ADDR_VAR 0 3
23530: PUSH
23531: LD_INT 13
23533: PUSH
23534: LD_INT 14
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: ST_TO_ADDR
23541: GO 23860
23543: LD_INT 42
23545: DOUBLE
23546: EQUAL
23547: IFTRUE 23551
23549: GO 23577
23551: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23552: LD_ADDR_VAR 0 3
23556: PUSH
23557: LD_INT 21
23559: PUSH
23560: LD_INT 22
23562: PUSH
23563: LD_INT 23
23565: PUSH
23566: LD_INT 24
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: ST_TO_ADDR
23575: GO 23860
23577: LD_INT 43
23579: DOUBLE
23580: EQUAL
23581: IFTRUE 23585
23583: GO 23611
23585: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23586: LD_ADDR_VAR 0 3
23590: PUSH
23591: LD_INT 21
23593: PUSH
23594: LD_INT 22
23596: PUSH
23597: LD_INT 23
23599: PUSH
23600: LD_INT 24
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: ST_TO_ADDR
23609: GO 23860
23611: LD_INT 44
23613: DOUBLE
23614: EQUAL
23615: IFTRUE 23619
23617: GO 23645
23619: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
23620: LD_ADDR_VAR 0 3
23624: PUSH
23625: LD_INT 21
23627: PUSH
23628: LD_INT 22
23630: PUSH
23631: LD_INT 23
23633: PUSH
23634: LD_INT 24
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: ST_TO_ADDR
23643: GO 23860
23645: LD_INT 45
23647: DOUBLE
23648: EQUAL
23649: IFTRUE 23653
23651: GO 23679
23653: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
23654: LD_ADDR_VAR 0 3
23658: PUSH
23659: LD_INT 21
23661: PUSH
23662: LD_INT 22
23664: PUSH
23665: LD_INT 23
23667: PUSH
23668: LD_INT 24
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: ST_TO_ADDR
23677: GO 23860
23679: LD_INT 49
23681: DOUBLE
23682: EQUAL
23683: IFTRUE 23687
23685: GO 23713
23687: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
23688: LD_ADDR_VAR 0 3
23692: PUSH
23693: LD_INT 21
23695: PUSH
23696: LD_INT 22
23698: PUSH
23699: LD_INT 23
23701: PUSH
23702: LD_INT 24
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: ST_TO_ADDR
23711: GO 23860
23713: LD_INT 51
23715: DOUBLE
23716: EQUAL
23717: IFTRUE 23721
23719: GO 23747
23721: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
23722: LD_ADDR_VAR 0 3
23726: PUSH
23727: LD_INT 21
23729: PUSH
23730: LD_INT 22
23732: PUSH
23733: LD_INT 23
23735: PUSH
23736: LD_INT 24
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: ST_TO_ADDR
23745: GO 23860
23747: LD_INT 52
23749: DOUBLE
23750: EQUAL
23751: IFTRUE 23755
23753: GO 23781
23755: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23756: LD_ADDR_VAR 0 3
23760: PUSH
23761: LD_INT 21
23763: PUSH
23764: LD_INT 22
23766: PUSH
23767: LD_INT 23
23769: PUSH
23770: LD_INT 24
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: ST_TO_ADDR
23779: GO 23860
23781: LD_INT 53
23783: DOUBLE
23784: EQUAL
23785: IFTRUE 23789
23787: GO 23807
23789: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
23790: LD_ADDR_VAR 0 3
23794: PUSH
23795: LD_INT 23
23797: PUSH
23798: LD_INT 24
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: ST_TO_ADDR
23805: GO 23860
23807: LD_INT 46
23809: DOUBLE
23810: EQUAL
23811: IFTRUE 23815
23813: GO 23833
23815: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
23816: LD_ADDR_VAR 0 3
23820: PUSH
23821: LD_INT 23
23823: PUSH
23824: LD_INT 24
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: ST_TO_ADDR
23831: GO 23860
23833: LD_INT 47
23835: DOUBLE
23836: EQUAL
23837: IFTRUE 23841
23839: GO 23859
23841: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23842: LD_ADDR_VAR 0 3
23846: PUSH
23847: LD_INT 23
23849: PUSH
23850: LD_INT 24
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: ST_TO_ADDR
23857: GO 23860
23859: POP
// result := ( chassis in result ) ;
23860: LD_ADDR_VAR 0 3
23864: PUSH
23865: LD_VAR 0 1
23869: PUSH
23870: LD_VAR 0 3
23874: IN
23875: ST_TO_ADDR
// end ;
23876: LD_VAR 0 3
23880: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
23881: LD_INT 0
23883: PPUSH
23884: PPUSH
23885: PPUSH
23886: PPUSH
23887: PPUSH
23888: PPUSH
23889: PPUSH
// result := array ;
23890: LD_ADDR_VAR 0 5
23894: PUSH
23895: LD_VAR 0 1
23899: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
23900: LD_VAR 0 1
23904: NOT
23905: PUSH
23906: LD_VAR 0 2
23910: NOT
23911: OR
23912: PUSH
23913: LD_VAR 0 3
23917: NOT
23918: OR
23919: PUSH
23920: LD_VAR 0 2
23924: PUSH
23925: LD_VAR 0 1
23929: GREATER
23930: OR
23931: PUSH
23932: LD_VAR 0 3
23936: PUSH
23937: LD_VAR 0 1
23941: GREATER
23942: OR
23943: IFFALSE 23947
// exit ;
23945: GO 24243
// if direction then
23947: LD_VAR 0 4
23951: IFFALSE 24015
// begin d := 1 ;
23953: LD_ADDR_VAR 0 9
23957: PUSH
23958: LD_INT 1
23960: ST_TO_ADDR
// if i_from > i_to then
23961: LD_VAR 0 2
23965: PUSH
23966: LD_VAR 0 3
23970: GREATER
23971: IFFALSE 23997
// length := ( array - i_from ) + i_to else
23973: LD_ADDR_VAR 0 11
23977: PUSH
23978: LD_VAR 0 1
23982: PUSH
23983: LD_VAR 0 2
23987: MINUS
23988: PUSH
23989: LD_VAR 0 3
23993: PLUS
23994: ST_TO_ADDR
23995: GO 24013
// length := i_to - i_from ;
23997: LD_ADDR_VAR 0 11
24001: PUSH
24002: LD_VAR 0 3
24006: PUSH
24007: LD_VAR 0 2
24011: MINUS
24012: ST_TO_ADDR
// end else
24013: GO 24076
// begin d := - 1 ;
24015: LD_ADDR_VAR 0 9
24019: PUSH
24020: LD_INT 1
24022: NEG
24023: ST_TO_ADDR
// if i_from > i_to then
24024: LD_VAR 0 2
24028: PUSH
24029: LD_VAR 0 3
24033: GREATER
24034: IFFALSE 24054
// length := i_from - i_to else
24036: LD_ADDR_VAR 0 11
24040: PUSH
24041: LD_VAR 0 2
24045: PUSH
24046: LD_VAR 0 3
24050: MINUS
24051: ST_TO_ADDR
24052: GO 24076
// length := ( array - i_to ) + i_from ;
24054: LD_ADDR_VAR 0 11
24058: PUSH
24059: LD_VAR 0 1
24063: PUSH
24064: LD_VAR 0 3
24068: MINUS
24069: PUSH
24070: LD_VAR 0 2
24074: PLUS
24075: ST_TO_ADDR
// end ; if not length then
24076: LD_VAR 0 11
24080: NOT
24081: IFFALSE 24085
// exit ;
24083: GO 24243
// tmp := array ;
24085: LD_ADDR_VAR 0 10
24089: PUSH
24090: LD_VAR 0 1
24094: ST_TO_ADDR
// for i = 1 to length do
24095: LD_ADDR_VAR 0 6
24099: PUSH
24100: DOUBLE
24101: LD_INT 1
24103: DEC
24104: ST_TO_ADDR
24105: LD_VAR 0 11
24109: PUSH
24110: FOR_TO
24111: IFFALSE 24231
// begin for j = 1 to array do
24113: LD_ADDR_VAR 0 7
24117: PUSH
24118: DOUBLE
24119: LD_INT 1
24121: DEC
24122: ST_TO_ADDR
24123: LD_VAR 0 1
24127: PUSH
24128: FOR_TO
24129: IFFALSE 24217
// begin k := j + d ;
24131: LD_ADDR_VAR 0 8
24135: PUSH
24136: LD_VAR 0 7
24140: PUSH
24141: LD_VAR 0 9
24145: PLUS
24146: ST_TO_ADDR
// if k > array then
24147: LD_VAR 0 8
24151: PUSH
24152: LD_VAR 0 1
24156: GREATER
24157: IFFALSE 24167
// k := 1 ;
24159: LD_ADDR_VAR 0 8
24163: PUSH
24164: LD_INT 1
24166: ST_TO_ADDR
// if not k then
24167: LD_VAR 0 8
24171: NOT
24172: IFFALSE 24184
// k := array ;
24174: LD_ADDR_VAR 0 8
24178: PUSH
24179: LD_VAR 0 1
24183: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24184: LD_ADDR_VAR 0 10
24188: PUSH
24189: LD_VAR 0 10
24193: PPUSH
24194: LD_VAR 0 8
24198: PPUSH
24199: LD_VAR 0 1
24203: PUSH
24204: LD_VAR 0 7
24208: ARRAY
24209: PPUSH
24210: CALL_OW 1
24214: ST_TO_ADDR
// end ;
24215: GO 24128
24217: POP
24218: POP
// array := tmp ;
24219: LD_ADDR_VAR 0 1
24223: PUSH
24224: LD_VAR 0 10
24228: ST_TO_ADDR
// end ;
24229: GO 24110
24231: POP
24232: POP
// result := array ;
24233: LD_ADDR_VAR 0 5
24237: PUSH
24238: LD_VAR 0 1
24242: ST_TO_ADDR
// end ;
24243: LD_VAR 0 5
24247: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24248: LD_INT 0
24250: PPUSH
24251: PPUSH
// result := 0 ;
24252: LD_ADDR_VAR 0 3
24256: PUSH
24257: LD_INT 0
24259: ST_TO_ADDR
// if not array or not value in array then
24260: LD_VAR 0 1
24264: NOT
24265: PUSH
24266: LD_VAR 0 2
24270: PUSH
24271: LD_VAR 0 1
24275: IN
24276: NOT
24277: OR
24278: IFFALSE 24282
// exit ;
24280: GO 24336
// for i = 1 to array do
24282: LD_ADDR_VAR 0 4
24286: PUSH
24287: DOUBLE
24288: LD_INT 1
24290: DEC
24291: ST_TO_ADDR
24292: LD_VAR 0 1
24296: PUSH
24297: FOR_TO
24298: IFFALSE 24334
// if value = array [ i ] then
24300: LD_VAR 0 2
24304: PUSH
24305: LD_VAR 0 1
24309: PUSH
24310: LD_VAR 0 4
24314: ARRAY
24315: EQUAL
24316: IFFALSE 24332
// begin result := i ;
24318: LD_ADDR_VAR 0 3
24322: PUSH
24323: LD_VAR 0 4
24327: ST_TO_ADDR
// exit ;
24328: POP
24329: POP
24330: GO 24336
// end ;
24332: GO 24297
24334: POP
24335: POP
// end ;
24336: LD_VAR 0 3
24340: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24341: LD_INT 0
24343: PPUSH
// vc_chassis := chassis ;
24344: LD_ADDR_OWVAR 37
24348: PUSH
24349: LD_VAR 0 1
24353: ST_TO_ADDR
// vc_engine := engine ;
24354: LD_ADDR_OWVAR 39
24358: PUSH
24359: LD_VAR 0 2
24363: ST_TO_ADDR
// vc_control := control ;
24364: LD_ADDR_OWVAR 38
24368: PUSH
24369: LD_VAR 0 3
24373: ST_TO_ADDR
// vc_weapon := weapon ;
24374: LD_ADDR_OWVAR 40
24378: PUSH
24379: LD_VAR 0 4
24383: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24384: LD_ADDR_OWVAR 41
24388: PUSH
24389: LD_VAR 0 5
24393: ST_TO_ADDR
// end ;
24394: LD_VAR 0 6
24398: RET
// export function WantPlant ( unit ) ; var task ; begin
24399: LD_INT 0
24401: PPUSH
24402: PPUSH
// result := false ;
24403: LD_ADDR_VAR 0 2
24407: PUSH
24408: LD_INT 0
24410: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24411: LD_ADDR_VAR 0 3
24415: PUSH
24416: LD_VAR 0 1
24420: PPUSH
24421: CALL_OW 437
24425: ST_TO_ADDR
// if task then
24426: LD_VAR 0 3
24430: IFFALSE 24458
// if task [ 1 ] [ 1 ] = p then
24432: LD_VAR 0 3
24436: PUSH
24437: LD_INT 1
24439: ARRAY
24440: PUSH
24441: LD_INT 1
24443: ARRAY
24444: PUSH
24445: LD_STRING p
24447: EQUAL
24448: IFFALSE 24458
// result := true ;
24450: LD_ADDR_VAR 0 2
24454: PUSH
24455: LD_INT 1
24457: ST_TO_ADDR
// end ;
24458: LD_VAR 0 2
24462: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24463: LD_INT 0
24465: PPUSH
24466: PPUSH
24467: PPUSH
24468: PPUSH
// if pos < 1 then
24469: LD_VAR 0 2
24473: PUSH
24474: LD_INT 1
24476: LESS
24477: IFFALSE 24481
// exit ;
24479: GO 24784
// if pos = 1 then
24481: LD_VAR 0 2
24485: PUSH
24486: LD_INT 1
24488: EQUAL
24489: IFFALSE 24522
// result := Replace ( arr , pos [ 1 ] , value ) else
24491: LD_ADDR_VAR 0 4
24495: PUSH
24496: LD_VAR 0 1
24500: PPUSH
24501: LD_VAR 0 2
24505: PUSH
24506: LD_INT 1
24508: ARRAY
24509: PPUSH
24510: LD_VAR 0 3
24514: PPUSH
24515: CALL_OW 1
24519: ST_TO_ADDR
24520: GO 24784
// begin tmp := arr ;
24522: LD_ADDR_VAR 0 6
24526: PUSH
24527: LD_VAR 0 1
24531: ST_TO_ADDR
// s_arr := [ tmp ] ;
24532: LD_ADDR_VAR 0 7
24536: PUSH
24537: LD_VAR 0 6
24541: PUSH
24542: EMPTY
24543: LIST
24544: ST_TO_ADDR
// for i = 1 to pos - 1 do
24545: LD_ADDR_VAR 0 5
24549: PUSH
24550: DOUBLE
24551: LD_INT 1
24553: DEC
24554: ST_TO_ADDR
24555: LD_VAR 0 2
24559: PUSH
24560: LD_INT 1
24562: MINUS
24563: PUSH
24564: FOR_TO
24565: IFFALSE 24610
// begin tmp := tmp [ pos [ i ] ] ;
24567: LD_ADDR_VAR 0 6
24571: PUSH
24572: LD_VAR 0 6
24576: PUSH
24577: LD_VAR 0 2
24581: PUSH
24582: LD_VAR 0 5
24586: ARRAY
24587: ARRAY
24588: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24589: LD_ADDR_VAR 0 7
24593: PUSH
24594: LD_VAR 0 7
24598: PUSH
24599: LD_VAR 0 6
24603: PUSH
24604: EMPTY
24605: LIST
24606: ADD
24607: ST_TO_ADDR
// end ;
24608: GO 24564
24610: POP
24611: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
24612: LD_ADDR_VAR 0 6
24616: PUSH
24617: LD_VAR 0 6
24621: PPUSH
24622: LD_VAR 0 2
24626: PUSH
24627: LD_VAR 0 2
24631: ARRAY
24632: PPUSH
24633: LD_VAR 0 3
24637: PPUSH
24638: CALL_OW 1
24642: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
24643: LD_ADDR_VAR 0 7
24647: PUSH
24648: LD_VAR 0 7
24652: PPUSH
24653: LD_VAR 0 7
24657: PPUSH
24658: LD_VAR 0 6
24662: PPUSH
24663: CALL_OW 1
24667: ST_TO_ADDR
// for i = s_arr downto 2 do
24668: LD_ADDR_VAR 0 5
24672: PUSH
24673: DOUBLE
24674: LD_VAR 0 7
24678: INC
24679: ST_TO_ADDR
24680: LD_INT 2
24682: PUSH
24683: FOR_DOWNTO
24684: IFFALSE 24768
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
24686: LD_ADDR_VAR 0 6
24690: PUSH
24691: LD_VAR 0 7
24695: PUSH
24696: LD_VAR 0 5
24700: PUSH
24701: LD_INT 1
24703: MINUS
24704: ARRAY
24705: PPUSH
24706: LD_VAR 0 2
24710: PUSH
24711: LD_VAR 0 5
24715: PUSH
24716: LD_INT 1
24718: MINUS
24719: ARRAY
24720: PPUSH
24721: LD_VAR 0 7
24725: PUSH
24726: LD_VAR 0 5
24730: ARRAY
24731: PPUSH
24732: CALL_OW 1
24736: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
24737: LD_ADDR_VAR 0 7
24741: PUSH
24742: LD_VAR 0 7
24746: PPUSH
24747: LD_VAR 0 5
24751: PUSH
24752: LD_INT 1
24754: MINUS
24755: PPUSH
24756: LD_VAR 0 6
24760: PPUSH
24761: CALL_OW 1
24765: ST_TO_ADDR
// end ;
24766: GO 24683
24768: POP
24769: POP
// result := s_arr [ 1 ] ;
24770: LD_ADDR_VAR 0 4
24774: PUSH
24775: LD_VAR 0 7
24779: PUSH
24780: LD_INT 1
24782: ARRAY
24783: ST_TO_ADDR
// end ; end ;
24784: LD_VAR 0 4
24788: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
24789: LD_INT 0
24791: PPUSH
24792: PPUSH
// if not list then
24793: LD_VAR 0 1
24797: NOT
24798: IFFALSE 24802
// exit ;
24800: GO 24893
// i := list [ pos1 ] ;
24802: LD_ADDR_VAR 0 5
24806: PUSH
24807: LD_VAR 0 1
24811: PUSH
24812: LD_VAR 0 2
24816: ARRAY
24817: ST_TO_ADDR
// if not i then
24818: LD_VAR 0 5
24822: NOT
24823: IFFALSE 24827
// exit ;
24825: GO 24893
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
24827: LD_ADDR_VAR 0 1
24831: PUSH
24832: LD_VAR 0 1
24836: PPUSH
24837: LD_VAR 0 2
24841: PPUSH
24842: LD_VAR 0 1
24846: PUSH
24847: LD_VAR 0 3
24851: ARRAY
24852: PPUSH
24853: CALL_OW 1
24857: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
24858: LD_ADDR_VAR 0 1
24862: PUSH
24863: LD_VAR 0 1
24867: PPUSH
24868: LD_VAR 0 3
24872: PPUSH
24873: LD_VAR 0 5
24877: PPUSH
24878: CALL_OW 1
24882: ST_TO_ADDR
// result := list ;
24883: LD_ADDR_VAR 0 4
24887: PUSH
24888: LD_VAR 0 1
24892: ST_TO_ADDR
// end ;
24893: LD_VAR 0 4
24897: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
24898: LD_INT 0
24900: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
24901: LD_ADDR_VAR 0 5
24905: PUSH
24906: LD_VAR 0 1
24910: PPUSH
24911: CALL_OW 250
24915: PPUSH
24916: LD_VAR 0 1
24920: PPUSH
24921: CALL_OW 251
24925: PPUSH
24926: LD_VAR 0 2
24930: PPUSH
24931: LD_VAR 0 3
24935: PPUSH
24936: LD_VAR 0 4
24940: PPUSH
24941: CALL 24951 0 5
24945: ST_TO_ADDR
// end ;
24946: LD_VAR 0 5
24950: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
24951: LD_INT 0
24953: PPUSH
24954: PPUSH
24955: PPUSH
24956: PPUSH
// if not list then
24957: LD_VAR 0 3
24961: NOT
24962: IFFALSE 24966
// exit ;
24964: GO 25354
// result := [ ] ;
24966: LD_ADDR_VAR 0 6
24970: PUSH
24971: EMPTY
24972: ST_TO_ADDR
// for i in list do
24973: LD_ADDR_VAR 0 7
24977: PUSH
24978: LD_VAR 0 3
24982: PUSH
24983: FOR_IN
24984: IFFALSE 25186
// begin tmp := GetDistUnitXY ( i , x , y ) ;
24986: LD_ADDR_VAR 0 9
24990: PUSH
24991: LD_VAR 0 7
24995: PPUSH
24996: LD_VAR 0 1
25000: PPUSH
25001: LD_VAR 0 2
25005: PPUSH
25006: CALL_OW 297
25010: ST_TO_ADDR
// if not result then
25011: LD_VAR 0 6
25015: NOT
25016: IFFALSE 25042
// result := [ [ i , tmp ] ] else
25018: LD_ADDR_VAR 0 6
25022: PUSH
25023: LD_VAR 0 7
25027: PUSH
25028: LD_VAR 0 9
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: EMPTY
25038: LIST
25039: ST_TO_ADDR
25040: GO 25184
// begin if result [ result ] [ 2 ] < tmp then
25042: LD_VAR 0 6
25046: PUSH
25047: LD_VAR 0 6
25051: ARRAY
25052: PUSH
25053: LD_INT 2
25055: ARRAY
25056: PUSH
25057: LD_VAR 0 9
25061: LESS
25062: IFFALSE 25104
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
25064: LD_ADDR_VAR 0 6
25068: PUSH
25069: LD_VAR 0 6
25073: PPUSH
25074: LD_VAR 0 6
25078: PUSH
25079: LD_INT 1
25081: PLUS
25082: PPUSH
25083: LD_VAR 0 7
25087: PUSH
25088: LD_VAR 0 9
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PPUSH
25097: CALL_OW 2
25101: ST_TO_ADDR
25102: GO 25184
// for j = 1 to result do
25104: LD_ADDR_VAR 0 8
25108: PUSH
25109: DOUBLE
25110: LD_INT 1
25112: DEC
25113: ST_TO_ADDR
25114: LD_VAR 0 6
25118: PUSH
25119: FOR_TO
25120: IFFALSE 25182
// begin if tmp < result [ j ] [ 2 ] then
25122: LD_VAR 0 9
25126: PUSH
25127: LD_VAR 0 6
25131: PUSH
25132: LD_VAR 0 8
25136: ARRAY
25137: PUSH
25138: LD_INT 2
25140: ARRAY
25141: LESS
25142: IFFALSE 25180
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25144: LD_ADDR_VAR 0 6
25148: PUSH
25149: LD_VAR 0 6
25153: PPUSH
25154: LD_VAR 0 8
25158: PPUSH
25159: LD_VAR 0 7
25163: PUSH
25164: LD_VAR 0 9
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PPUSH
25173: CALL_OW 2
25177: ST_TO_ADDR
// break ;
25178: GO 25182
// end ; end ;
25180: GO 25119
25182: POP
25183: POP
// end ; end ;
25184: GO 24983
25186: POP
25187: POP
// if result and not asc then
25188: LD_VAR 0 6
25192: PUSH
25193: LD_VAR 0 4
25197: NOT
25198: AND
25199: IFFALSE 25274
// begin tmp := result ;
25201: LD_ADDR_VAR 0 9
25205: PUSH
25206: LD_VAR 0 6
25210: ST_TO_ADDR
// for i = tmp downto 1 do
25211: LD_ADDR_VAR 0 7
25215: PUSH
25216: DOUBLE
25217: LD_VAR 0 9
25221: INC
25222: ST_TO_ADDR
25223: LD_INT 1
25225: PUSH
25226: FOR_DOWNTO
25227: IFFALSE 25272
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25229: LD_ADDR_VAR 0 6
25233: PUSH
25234: LD_VAR 0 6
25238: PPUSH
25239: LD_VAR 0 9
25243: PUSH
25244: LD_VAR 0 7
25248: MINUS
25249: PUSH
25250: LD_INT 1
25252: PLUS
25253: PPUSH
25254: LD_VAR 0 9
25258: PUSH
25259: LD_VAR 0 7
25263: ARRAY
25264: PPUSH
25265: CALL_OW 1
25269: ST_TO_ADDR
25270: GO 25226
25272: POP
25273: POP
// end ; tmp := [ ] ;
25274: LD_ADDR_VAR 0 9
25278: PUSH
25279: EMPTY
25280: ST_TO_ADDR
// if mode then
25281: LD_VAR 0 5
25285: IFFALSE 25354
// begin for i = 1 to result do
25287: LD_ADDR_VAR 0 7
25291: PUSH
25292: DOUBLE
25293: LD_INT 1
25295: DEC
25296: ST_TO_ADDR
25297: LD_VAR 0 6
25301: PUSH
25302: FOR_TO
25303: IFFALSE 25342
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25305: LD_ADDR_VAR 0 9
25309: PUSH
25310: LD_VAR 0 9
25314: PPUSH
25315: LD_VAR 0 7
25319: PPUSH
25320: LD_VAR 0 6
25324: PUSH
25325: LD_VAR 0 7
25329: ARRAY
25330: PUSH
25331: LD_INT 1
25333: ARRAY
25334: PPUSH
25335: CALL_OW 1
25339: ST_TO_ADDR
25340: GO 25302
25342: POP
25343: POP
// result := tmp ;
25344: LD_ADDR_VAR 0 6
25348: PUSH
25349: LD_VAR 0 9
25353: ST_TO_ADDR
// end ; end ;
25354: LD_VAR 0 6
25358: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25359: LD_INT 0
25361: PPUSH
25362: PPUSH
25363: PPUSH
25364: PPUSH
25365: PPUSH
25366: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25367: LD_ADDR_VAR 0 5
25371: PUSH
25372: LD_INT 0
25374: PUSH
25375: LD_INT 0
25377: PUSH
25378: LD_INT 0
25380: PUSH
25381: EMPTY
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: ST_TO_ADDR
// if not x or not y then
25389: LD_VAR 0 2
25393: NOT
25394: PUSH
25395: LD_VAR 0 3
25399: NOT
25400: OR
25401: IFFALSE 25405
// exit ;
25403: GO 27057
// if not range then
25405: LD_VAR 0 4
25409: NOT
25410: IFFALSE 25420
// range := 10 ;
25412: LD_ADDR_VAR 0 4
25416: PUSH
25417: LD_INT 10
25419: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25420: LD_ADDR_VAR 0 8
25424: PUSH
25425: LD_INT 81
25427: PUSH
25428: LD_VAR 0 1
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: LD_INT 92
25439: PUSH
25440: LD_VAR 0 2
25444: PUSH
25445: LD_VAR 0 3
25449: PUSH
25450: LD_VAR 0 4
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 3
25463: PUSH
25464: LD_INT 21
25466: PUSH
25467: LD_INT 3
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: LIST
25482: PPUSH
25483: CALL_OW 69
25487: ST_TO_ADDR
// if not tmp then
25488: LD_VAR 0 8
25492: NOT
25493: IFFALSE 25497
// exit ;
25495: GO 27057
// for i in tmp do
25497: LD_ADDR_VAR 0 6
25501: PUSH
25502: LD_VAR 0 8
25506: PUSH
25507: FOR_IN
25508: IFFALSE 27032
// begin points := [ 0 , 0 , 0 ] ;
25510: LD_ADDR_VAR 0 9
25514: PUSH
25515: LD_INT 0
25517: PUSH
25518: LD_INT 0
25520: PUSH
25521: LD_INT 0
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: LIST
25528: ST_TO_ADDR
// bpoints := 1 ;
25529: LD_ADDR_VAR 0 10
25533: PUSH
25534: LD_INT 1
25536: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25537: LD_VAR 0 6
25541: PPUSH
25542: CALL_OW 247
25546: PUSH
25547: LD_INT 1
25549: DOUBLE
25550: EQUAL
25551: IFTRUE 25555
25553: GO 26133
25555: POP
// begin if GetClass ( i ) = 1 then
25556: LD_VAR 0 6
25560: PPUSH
25561: CALL_OW 257
25565: PUSH
25566: LD_INT 1
25568: EQUAL
25569: IFFALSE 25590
// points := [ 10 , 5 , 3 ] ;
25571: LD_ADDR_VAR 0 9
25575: PUSH
25576: LD_INT 10
25578: PUSH
25579: LD_INT 5
25581: PUSH
25582: LD_INT 3
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: LIST
25589: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25590: LD_VAR 0 6
25594: PPUSH
25595: CALL_OW 257
25599: PUSH
25600: LD_INT 2
25602: PUSH
25603: LD_INT 3
25605: PUSH
25606: LD_INT 4
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: LIST
25613: IN
25614: IFFALSE 25635
// points := [ 3 , 2 , 1 ] ;
25616: LD_ADDR_VAR 0 9
25620: PUSH
25621: LD_INT 3
25623: PUSH
25624: LD_INT 2
25626: PUSH
25627: LD_INT 1
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: LIST
25634: ST_TO_ADDR
// if GetClass ( i ) = 5 then
25635: LD_VAR 0 6
25639: PPUSH
25640: CALL_OW 257
25644: PUSH
25645: LD_INT 5
25647: EQUAL
25648: IFFALSE 25669
// points := [ 130 , 5 , 2 ] ;
25650: LD_ADDR_VAR 0 9
25654: PUSH
25655: LD_INT 130
25657: PUSH
25658: LD_INT 5
25660: PUSH
25661: LD_INT 2
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: LIST
25668: ST_TO_ADDR
// if GetClass ( i ) = 8 then
25669: LD_VAR 0 6
25673: PPUSH
25674: CALL_OW 257
25678: PUSH
25679: LD_INT 8
25681: EQUAL
25682: IFFALSE 25703
// points := [ 35 , 35 , 30 ] ;
25684: LD_ADDR_VAR 0 9
25688: PUSH
25689: LD_INT 35
25691: PUSH
25692: LD_INT 35
25694: PUSH
25695: LD_INT 30
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: LIST
25702: ST_TO_ADDR
// if GetClass ( i ) = 9 then
25703: LD_VAR 0 6
25707: PPUSH
25708: CALL_OW 257
25712: PUSH
25713: LD_INT 9
25715: EQUAL
25716: IFFALSE 25737
// points := [ 20 , 55 , 40 ] ;
25718: LD_ADDR_VAR 0 9
25722: PUSH
25723: LD_INT 20
25725: PUSH
25726: LD_INT 55
25728: PUSH
25729: LD_INT 40
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: LIST
25736: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
25737: LD_VAR 0 6
25741: PPUSH
25742: CALL_OW 257
25746: PUSH
25747: LD_INT 12
25749: PUSH
25750: LD_INT 16
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: IN
25757: IFFALSE 25778
// points := [ 5 , 3 , 2 ] ;
25759: LD_ADDR_VAR 0 9
25763: PUSH
25764: LD_INT 5
25766: PUSH
25767: LD_INT 3
25769: PUSH
25770: LD_INT 2
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: LIST
25777: ST_TO_ADDR
// if GetClass ( i ) = 17 then
25778: LD_VAR 0 6
25782: PPUSH
25783: CALL_OW 257
25787: PUSH
25788: LD_INT 17
25790: EQUAL
25791: IFFALSE 25812
// points := [ 100 , 50 , 75 ] ;
25793: LD_ADDR_VAR 0 9
25797: PUSH
25798: LD_INT 100
25800: PUSH
25801: LD_INT 50
25803: PUSH
25804: LD_INT 75
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: LIST
25811: ST_TO_ADDR
// if GetClass ( i ) = 15 then
25812: LD_VAR 0 6
25816: PPUSH
25817: CALL_OW 257
25821: PUSH
25822: LD_INT 15
25824: EQUAL
25825: IFFALSE 25846
// points := [ 10 , 5 , 3 ] ;
25827: LD_ADDR_VAR 0 9
25831: PUSH
25832: LD_INT 10
25834: PUSH
25835: LD_INT 5
25837: PUSH
25838: LD_INT 3
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: LIST
25845: ST_TO_ADDR
// if GetClass ( i ) = 14 then
25846: LD_VAR 0 6
25850: PPUSH
25851: CALL_OW 257
25855: PUSH
25856: LD_INT 14
25858: EQUAL
25859: IFFALSE 25880
// points := [ 10 , 0 , 0 ] ;
25861: LD_ADDR_VAR 0 9
25865: PUSH
25866: LD_INT 10
25868: PUSH
25869: LD_INT 0
25871: PUSH
25872: LD_INT 0
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: LIST
25879: ST_TO_ADDR
// if GetClass ( i ) = 11 then
25880: LD_VAR 0 6
25884: PPUSH
25885: CALL_OW 257
25889: PUSH
25890: LD_INT 11
25892: EQUAL
25893: IFFALSE 25914
// points := [ 30 , 10 , 5 ] ;
25895: LD_ADDR_VAR 0 9
25899: PUSH
25900: LD_INT 30
25902: PUSH
25903: LD_INT 10
25905: PUSH
25906: LD_INT 5
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: LIST
25913: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
25914: LD_VAR 0 1
25918: PPUSH
25919: LD_INT 5
25921: PPUSH
25922: CALL_OW 321
25926: PUSH
25927: LD_INT 2
25929: EQUAL
25930: IFFALSE 25947
// bpoints := bpoints * 1.8 ;
25932: LD_ADDR_VAR 0 10
25936: PUSH
25937: LD_VAR 0 10
25941: PUSH
25942: LD_REAL  1.80000000000000E+0000
25945: MUL
25946: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
25947: LD_VAR 0 6
25951: PPUSH
25952: CALL_OW 257
25956: PUSH
25957: LD_INT 1
25959: PUSH
25960: LD_INT 2
25962: PUSH
25963: LD_INT 3
25965: PUSH
25966: LD_INT 4
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: IN
25975: PUSH
25976: LD_VAR 0 1
25980: PPUSH
25981: LD_INT 51
25983: PPUSH
25984: CALL_OW 321
25988: PUSH
25989: LD_INT 2
25991: EQUAL
25992: AND
25993: IFFALSE 26010
// bpoints := bpoints * 1.2 ;
25995: LD_ADDR_VAR 0 10
25999: PUSH
26000: LD_VAR 0 10
26004: PUSH
26005: LD_REAL  1.20000000000000E+0000
26008: MUL
26009: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
26010: LD_VAR 0 6
26014: PPUSH
26015: CALL_OW 257
26019: PUSH
26020: LD_INT 5
26022: PUSH
26023: LD_INT 7
26025: PUSH
26026: LD_INT 9
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: LIST
26033: IN
26034: PUSH
26035: LD_VAR 0 1
26039: PPUSH
26040: LD_INT 52
26042: PPUSH
26043: CALL_OW 321
26047: PUSH
26048: LD_INT 2
26050: EQUAL
26051: AND
26052: IFFALSE 26069
// bpoints := bpoints * 1.5 ;
26054: LD_ADDR_VAR 0 10
26058: PUSH
26059: LD_VAR 0 10
26063: PUSH
26064: LD_REAL  1.50000000000000E+0000
26067: MUL
26068: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
26069: LD_VAR 0 1
26073: PPUSH
26074: LD_INT 66
26076: PPUSH
26077: CALL_OW 321
26081: PUSH
26082: LD_INT 2
26084: EQUAL
26085: IFFALSE 26102
// bpoints := bpoints * 1.1 ;
26087: LD_ADDR_VAR 0 10
26091: PUSH
26092: LD_VAR 0 10
26096: PUSH
26097: LD_REAL  1.10000000000000E+0000
26100: MUL
26101: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
26102: LD_ADDR_VAR 0 10
26106: PUSH
26107: LD_VAR 0 10
26111: PUSH
26112: LD_VAR 0 6
26116: PPUSH
26117: LD_INT 1
26119: PPUSH
26120: CALL_OW 259
26124: PUSH
26125: LD_REAL  1.15000000000000E+0000
26128: MUL
26129: MUL
26130: ST_TO_ADDR
// end ; unit_vehicle :
26131: GO 26961
26133: LD_INT 2
26135: DOUBLE
26136: EQUAL
26137: IFTRUE 26141
26139: GO 26949
26141: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
26142: LD_VAR 0 6
26146: PPUSH
26147: CALL_OW 264
26151: PUSH
26152: LD_INT 2
26154: PUSH
26155: LD_INT 42
26157: PUSH
26158: LD_INT 24
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: LIST
26165: IN
26166: IFFALSE 26187
// points := [ 25 , 5 , 3 ] ;
26168: LD_ADDR_VAR 0 9
26172: PUSH
26173: LD_INT 25
26175: PUSH
26176: LD_INT 5
26178: PUSH
26179: LD_INT 3
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: LIST
26186: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26187: LD_VAR 0 6
26191: PPUSH
26192: CALL_OW 264
26196: PUSH
26197: LD_INT 4
26199: PUSH
26200: LD_INT 43
26202: PUSH
26203: LD_INT 25
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: LIST
26210: IN
26211: IFFALSE 26232
// points := [ 40 , 15 , 5 ] ;
26213: LD_ADDR_VAR 0 9
26217: PUSH
26218: LD_INT 40
26220: PUSH
26221: LD_INT 15
26223: PUSH
26224: LD_INT 5
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: LIST
26231: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26232: LD_VAR 0 6
26236: PPUSH
26237: CALL_OW 264
26241: PUSH
26242: LD_INT 3
26244: PUSH
26245: LD_INT 23
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: IN
26252: IFFALSE 26273
// points := [ 7 , 25 , 8 ] ;
26254: LD_ADDR_VAR 0 9
26258: PUSH
26259: LD_INT 7
26261: PUSH
26262: LD_INT 25
26264: PUSH
26265: LD_INT 8
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: LIST
26272: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26273: LD_VAR 0 6
26277: PPUSH
26278: CALL_OW 264
26282: PUSH
26283: LD_INT 5
26285: PUSH
26286: LD_INT 27
26288: PUSH
26289: LD_INT 44
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: LIST
26296: IN
26297: IFFALSE 26318
// points := [ 14 , 50 , 16 ] ;
26299: LD_ADDR_VAR 0 9
26303: PUSH
26304: LD_INT 14
26306: PUSH
26307: LD_INT 50
26309: PUSH
26310: LD_INT 16
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: LIST
26317: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26318: LD_VAR 0 6
26322: PPUSH
26323: CALL_OW 264
26327: PUSH
26328: LD_INT 6
26330: PUSH
26331: LD_INT 46
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: IN
26338: IFFALSE 26359
// points := [ 32 , 120 , 70 ] ;
26340: LD_ADDR_VAR 0 9
26344: PUSH
26345: LD_INT 32
26347: PUSH
26348: LD_INT 120
26350: PUSH
26351: LD_INT 70
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: LIST
26358: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
26359: LD_VAR 0 6
26363: PPUSH
26364: CALL_OW 264
26368: PUSH
26369: LD_INT 7
26371: PUSH
26372: LD_INT 28
26374: PUSH
26375: LD_INT 45
26377: PUSH
26378: LD_EXP 75
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: IN
26389: IFFALSE 26410
// points := [ 35 , 20 , 45 ] ;
26391: LD_ADDR_VAR 0 9
26395: PUSH
26396: LD_INT 35
26398: PUSH
26399: LD_INT 20
26401: PUSH
26402: LD_INT 45
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: LIST
26409: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26410: LD_VAR 0 6
26414: PPUSH
26415: CALL_OW 264
26419: PUSH
26420: LD_INT 47
26422: PUSH
26423: EMPTY
26424: LIST
26425: IN
26426: IFFALSE 26447
// points := [ 67 , 45 , 75 ] ;
26428: LD_ADDR_VAR 0 9
26432: PUSH
26433: LD_INT 67
26435: PUSH
26436: LD_INT 45
26438: PUSH
26439: LD_INT 75
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: LIST
26446: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26447: LD_VAR 0 6
26451: PPUSH
26452: CALL_OW 264
26456: PUSH
26457: LD_INT 26
26459: PUSH
26460: EMPTY
26461: LIST
26462: IN
26463: IFFALSE 26484
// points := [ 120 , 30 , 80 ] ;
26465: LD_ADDR_VAR 0 9
26469: PUSH
26470: LD_INT 120
26472: PUSH
26473: LD_INT 30
26475: PUSH
26476: LD_INT 80
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: LIST
26483: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26484: LD_VAR 0 6
26488: PPUSH
26489: CALL_OW 264
26493: PUSH
26494: LD_INT 22
26496: PUSH
26497: EMPTY
26498: LIST
26499: IN
26500: IFFALSE 26521
// points := [ 40 , 1 , 1 ] ;
26502: LD_ADDR_VAR 0 9
26506: PUSH
26507: LD_INT 40
26509: PUSH
26510: LD_INT 1
26512: PUSH
26513: LD_INT 1
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: LIST
26520: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26521: LD_VAR 0 6
26525: PPUSH
26526: CALL_OW 264
26530: PUSH
26531: LD_INT 29
26533: PUSH
26534: EMPTY
26535: LIST
26536: IN
26537: IFFALSE 26558
// points := [ 70 , 200 , 400 ] ;
26539: LD_ADDR_VAR 0 9
26543: PUSH
26544: LD_INT 70
26546: PUSH
26547: LD_INT 200
26549: PUSH
26550: LD_INT 400
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: LIST
26557: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26558: LD_VAR 0 6
26562: PPUSH
26563: CALL_OW 264
26567: PUSH
26568: LD_INT 14
26570: PUSH
26571: LD_INT 53
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: IN
26578: IFFALSE 26599
// points := [ 40 , 10 , 20 ] ;
26580: LD_ADDR_VAR 0 9
26584: PUSH
26585: LD_INT 40
26587: PUSH
26588: LD_INT 10
26590: PUSH
26591: LD_INT 20
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: LIST
26598: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26599: LD_VAR 0 6
26603: PPUSH
26604: CALL_OW 264
26608: PUSH
26609: LD_INT 9
26611: PUSH
26612: EMPTY
26613: LIST
26614: IN
26615: IFFALSE 26636
// points := [ 5 , 70 , 20 ] ;
26617: LD_ADDR_VAR 0 9
26621: PUSH
26622: LD_INT 5
26624: PUSH
26625: LD_INT 70
26627: PUSH
26628: LD_INT 20
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: LIST
26635: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
26636: LD_VAR 0 6
26640: PPUSH
26641: CALL_OW 264
26645: PUSH
26646: LD_INT 10
26648: PUSH
26649: EMPTY
26650: LIST
26651: IN
26652: IFFALSE 26673
// points := [ 35 , 110 , 70 ] ;
26654: LD_ADDR_VAR 0 9
26658: PUSH
26659: LD_INT 35
26661: PUSH
26662: LD_INT 110
26664: PUSH
26665: LD_INT 70
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: LIST
26672: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
26673: LD_VAR 0 6
26677: PPUSH
26678: CALL_OW 265
26682: PUSH
26683: LD_INT 25
26685: EQUAL
26686: IFFALSE 26707
// points := [ 80 , 65 , 100 ] ;
26688: LD_ADDR_VAR 0 9
26692: PUSH
26693: LD_INT 80
26695: PUSH
26696: LD_INT 65
26698: PUSH
26699: LD_INT 100
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: LIST
26706: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
26707: LD_VAR 0 6
26711: PPUSH
26712: CALL_OW 263
26716: PUSH
26717: LD_INT 1
26719: EQUAL
26720: IFFALSE 26755
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
26722: LD_ADDR_VAR 0 10
26726: PUSH
26727: LD_VAR 0 10
26731: PUSH
26732: LD_VAR 0 6
26736: PPUSH
26737: CALL_OW 311
26741: PPUSH
26742: LD_INT 3
26744: PPUSH
26745: CALL_OW 259
26749: PUSH
26750: LD_INT 4
26752: MUL
26753: MUL
26754: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
26755: LD_VAR 0 6
26759: PPUSH
26760: CALL_OW 263
26764: PUSH
26765: LD_INT 2
26767: EQUAL
26768: IFFALSE 26819
// begin j := IsControledBy ( i ) ;
26770: LD_ADDR_VAR 0 7
26774: PUSH
26775: LD_VAR 0 6
26779: PPUSH
26780: CALL_OW 312
26784: ST_TO_ADDR
// if j then
26785: LD_VAR 0 7
26789: IFFALSE 26819
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
26791: LD_ADDR_VAR 0 10
26795: PUSH
26796: LD_VAR 0 10
26800: PUSH
26801: LD_VAR 0 7
26805: PPUSH
26806: LD_INT 3
26808: PPUSH
26809: CALL_OW 259
26813: PUSH
26814: LD_INT 3
26816: MUL
26817: MUL
26818: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
26819: LD_VAR 0 6
26823: PPUSH
26824: CALL_OW 264
26828: PUSH
26829: LD_INT 5
26831: PUSH
26832: LD_INT 6
26834: PUSH
26835: LD_INT 46
26837: PUSH
26838: LD_INT 44
26840: PUSH
26841: LD_INT 47
26843: PUSH
26844: LD_INT 45
26846: PUSH
26847: LD_INT 28
26849: PUSH
26850: LD_INT 7
26852: PUSH
26853: LD_INT 27
26855: PUSH
26856: LD_INT 29
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: IN
26871: PUSH
26872: LD_VAR 0 1
26876: PPUSH
26877: LD_INT 52
26879: PPUSH
26880: CALL_OW 321
26884: PUSH
26885: LD_INT 2
26887: EQUAL
26888: AND
26889: IFFALSE 26906
// bpoints := bpoints * 1.2 ;
26891: LD_ADDR_VAR 0 10
26895: PUSH
26896: LD_VAR 0 10
26900: PUSH
26901: LD_REAL  1.20000000000000E+0000
26904: MUL
26905: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
26906: LD_VAR 0 6
26910: PPUSH
26911: CALL_OW 264
26915: PUSH
26916: LD_INT 6
26918: PUSH
26919: LD_INT 46
26921: PUSH
26922: LD_INT 47
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: LIST
26929: IN
26930: IFFALSE 26947
// bpoints := bpoints * 1.2 ;
26932: LD_ADDR_VAR 0 10
26936: PUSH
26937: LD_VAR 0 10
26941: PUSH
26942: LD_REAL  1.20000000000000E+0000
26945: MUL
26946: ST_TO_ADDR
// end ; unit_building :
26947: GO 26961
26949: LD_INT 3
26951: DOUBLE
26952: EQUAL
26953: IFTRUE 26957
26955: GO 26960
26957: POP
// ; end ;
26958: GO 26961
26960: POP
// for j = 1 to 3 do
26961: LD_ADDR_VAR 0 7
26965: PUSH
26966: DOUBLE
26967: LD_INT 1
26969: DEC
26970: ST_TO_ADDR
26971: LD_INT 3
26973: PUSH
26974: FOR_TO
26975: IFFALSE 27028
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
26977: LD_ADDR_VAR 0 5
26981: PUSH
26982: LD_VAR 0 5
26986: PPUSH
26987: LD_VAR 0 7
26991: PPUSH
26992: LD_VAR 0 5
26996: PUSH
26997: LD_VAR 0 7
27001: ARRAY
27002: PUSH
27003: LD_VAR 0 9
27007: PUSH
27008: LD_VAR 0 7
27012: ARRAY
27013: PUSH
27014: LD_VAR 0 10
27018: MUL
27019: PLUS
27020: PPUSH
27021: CALL_OW 1
27025: ST_TO_ADDR
27026: GO 26974
27028: POP
27029: POP
// end ;
27030: GO 25507
27032: POP
27033: POP
// result := Replace ( result , 4 , tmp ) ;
27034: LD_ADDR_VAR 0 5
27038: PUSH
27039: LD_VAR 0 5
27043: PPUSH
27044: LD_INT 4
27046: PPUSH
27047: LD_VAR 0 8
27051: PPUSH
27052: CALL_OW 1
27056: ST_TO_ADDR
// end ;
27057: LD_VAR 0 5
27061: RET
// export function DangerAtRange ( unit , range ) ; begin
27062: LD_INT 0
27064: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
27065: LD_ADDR_VAR 0 3
27069: PUSH
27070: LD_VAR 0 1
27074: PPUSH
27075: CALL_OW 255
27079: PPUSH
27080: LD_VAR 0 1
27084: PPUSH
27085: CALL_OW 250
27089: PPUSH
27090: LD_VAR 0 1
27094: PPUSH
27095: CALL_OW 251
27099: PPUSH
27100: LD_VAR 0 2
27104: PPUSH
27105: CALL 25359 0 4
27109: ST_TO_ADDR
// end ;
27110: LD_VAR 0 3
27114: RET
// export function DangerInArea ( side , area ) ; begin
27115: LD_INT 0
27117: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27118: LD_ADDR_VAR 0 3
27122: PUSH
27123: LD_VAR 0 2
27127: PPUSH
27128: LD_INT 81
27130: PUSH
27131: LD_VAR 0 1
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PPUSH
27140: CALL_OW 70
27144: ST_TO_ADDR
// end ;
27145: LD_VAR 0 3
27149: RET
// export function IsExtension ( b ) ; begin
27150: LD_INT 0
27152: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
27153: LD_ADDR_VAR 0 2
27157: PUSH
27158: LD_VAR 0 1
27162: PUSH
27163: LD_INT 23
27165: PUSH
27166: LD_INT 20
27168: PUSH
27169: LD_INT 22
27171: PUSH
27172: LD_INT 17
27174: PUSH
27175: LD_INT 24
27177: PUSH
27178: LD_INT 21
27180: PUSH
27181: LD_INT 19
27183: PUSH
27184: LD_INT 16
27186: PUSH
27187: LD_INT 25
27189: PUSH
27190: LD_INT 18
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: IN
27205: ST_TO_ADDR
// end ;
27206: LD_VAR 0 2
27210: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
27211: LD_INT 0
27213: PPUSH
27214: PPUSH
27215: PPUSH
// result := [ ] ;
27216: LD_ADDR_VAR 0 4
27220: PUSH
27221: EMPTY
27222: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27223: LD_ADDR_VAR 0 5
27227: PUSH
27228: LD_VAR 0 2
27232: PPUSH
27233: LD_INT 21
27235: PUSH
27236: LD_INT 3
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PPUSH
27243: CALL_OW 70
27247: ST_TO_ADDR
// if not tmp then
27248: LD_VAR 0 5
27252: NOT
27253: IFFALSE 27257
// exit ;
27255: GO 27321
// if checkLink then
27257: LD_VAR 0 3
27261: IFFALSE 27311
// begin for i in tmp do
27263: LD_ADDR_VAR 0 6
27267: PUSH
27268: LD_VAR 0 5
27272: PUSH
27273: FOR_IN
27274: IFFALSE 27309
// if GetBase ( i ) <> base then
27276: LD_VAR 0 6
27280: PPUSH
27281: CALL_OW 274
27285: PUSH
27286: LD_VAR 0 1
27290: NONEQUAL
27291: IFFALSE 27307
// ComLinkToBase ( base , i ) ;
27293: LD_VAR 0 1
27297: PPUSH
27298: LD_VAR 0 6
27302: PPUSH
27303: CALL_OW 169
27307: GO 27273
27309: POP
27310: POP
// end ; result := tmp ;
27311: LD_ADDR_VAR 0 4
27315: PUSH
27316: LD_VAR 0 5
27320: ST_TO_ADDR
// end ;
27321: LD_VAR 0 4
27325: RET
// export function ComComplete ( units , b ) ; var i ; begin
27326: LD_INT 0
27328: PPUSH
27329: PPUSH
// if not units then
27330: LD_VAR 0 1
27334: NOT
27335: IFFALSE 27339
// exit ;
27337: GO 27429
// for i in units do
27339: LD_ADDR_VAR 0 4
27343: PUSH
27344: LD_VAR 0 1
27348: PUSH
27349: FOR_IN
27350: IFFALSE 27427
// if BuildingStatus ( b ) = bs_build then
27352: LD_VAR 0 2
27356: PPUSH
27357: CALL_OW 461
27361: PUSH
27362: LD_INT 1
27364: EQUAL
27365: IFFALSE 27425
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27367: LD_VAR 0 4
27371: PPUSH
27372: LD_STRING h
27374: PUSH
27375: LD_VAR 0 2
27379: PPUSH
27380: CALL_OW 250
27384: PUSH
27385: LD_VAR 0 2
27389: PPUSH
27390: CALL_OW 251
27394: PUSH
27395: LD_VAR 0 2
27399: PUSH
27400: LD_INT 0
27402: PUSH
27403: LD_INT 0
27405: PUSH
27406: LD_INT 0
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: PUSH
27418: EMPTY
27419: LIST
27420: PPUSH
27421: CALL_OW 446
27425: GO 27349
27427: POP
27428: POP
// end ;
27429: LD_VAR 0 3
27433: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27434: LD_INT 0
27436: PPUSH
27437: PPUSH
27438: PPUSH
27439: PPUSH
27440: PPUSH
27441: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
27442: LD_VAR 0 1
27446: NOT
27447: PUSH
27448: LD_VAR 0 1
27452: PPUSH
27453: CALL_OW 263
27457: PUSH
27458: LD_INT 2
27460: NONEQUAL
27461: OR
27462: IFFALSE 27466
// exit ;
27464: GO 27782
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27466: LD_ADDR_VAR 0 6
27470: PUSH
27471: LD_INT 22
27473: PUSH
27474: LD_VAR 0 1
27478: PPUSH
27479: CALL_OW 255
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 2
27490: PUSH
27491: LD_INT 30
27493: PUSH
27494: LD_INT 36
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PUSH
27501: LD_INT 34
27503: PUSH
27504: LD_INT 31
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: LIST
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PPUSH
27520: CALL_OW 69
27524: ST_TO_ADDR
// if not tmp then
27525: LD_VAR 0 6
27529: NOT
27530: IFFALSE 27534
// exit ;
27532: GO 27782
// result := [ ] ;
27534: LD_ADDR_VAR 0 2
27538: PUSH
27539: EMPTY
27540: ST_TO_ADDR
// for i in tmp do
27541: LD_ADDR_VAR 0 3
27545: PUSH
27546: LD_VAR 0 6
27550: PUSH
27551: FOR_IN
27552: IFFALSE 27623
// begin t := UnitsInside ( i ) ;
27554: LD_ADDR_VAR 0 4
27558: PUSH
27559: LD_VAR 0 3
27563: PPUSH
27564: CALL_OW 313
27568: ST_TO_ADDR
// if t then
27569: LD_VAR 0 4
27573: IFFALSE 27621
// for j in t do
27575: LD_ADDR_VAR 0 7
27579: PUSH
27580: LD_VAR 0 4
27584: PUSH
27585: FOR_IN
27586: IFFALSE 27619
// result := Replace ( result , result + 1 , j ) ;
27588: LD_ADDR_VAR 0 2
27592: PUSH
27593: LD_VAR 0 2
27597: PPUSH
27598: LD_VAR 0 2
27602: PUSH
27603: LD_INT 1
27605: PLUS
27606: PPUSH
27607: LD_VAR 0 7
27611: PPUSH
27612: CALL_OW 1
27616: ST_TO_ADDR
27617: GO 27585
27619: POP
27620: POP
// end ;
27621: GO 27551
27623: POP
27624: POP
// if not result then
27625: LD_VAR 0 2
27629: NOT
27630: IFFALSE 27634
// exit ;
27632: GO 27782
// mech := result [ 1 ] ;
27634: LD_ADDR_VAR 0 5
27638: PUSH
27639: LD_VAR 0 2
27643: PUSH
27644: LD_INT 1
27646: ARRAY
27647: ST_TO_ADDR
// if result > 1 then
27648: LD_VAR 0 2
27652: PUSH
27653: LD_INT 1
27655: GREATER
27656: IFFALSE 27768
// begin for i = 2 to result do
27658: LD_ADDR_VAR 0 3
27662: PUSH
27663: DOUBLE
27664: LD_INT 2
27666: DEC
27667: ST_TO_ADDR
27668: LD_VAR 0 2
27672: PUSH
27673: FOR_TO
27674: IFFALSE 27766
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
27676: LD_ADDR_VAR 0 4
27680: PUSH
27681: LD_VAR 0 2
27685: PUSH
27686: LD_VAR 0 3
27690: ARRAY
27691: PPUSH
27692: LD_INT 3
27694: PPUSH
27695: CALL_OW 259
27699: PUSH
27700: LD_VAR 0 2
27704: PUSH
27705: LD_VAR 0 3
27709: ARRAY
27710: PPUSH
27711: CALL_OW 432
27715: MINUS
27716: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
27717: LD_VAR 0 4
27721: PUSH
27722: LD_VAR 0 5
27726: PPUSH
27727: LD_INT 3
27729: PPUSH
27730: CALL_OW 259
27734: PUSH
27735: LD_VAR 0 5
27739: PPUSH
27740: CALL_OW 432
27744: MINUS
27745: GREATEREQUAL
27746: IFFALSE 27764
// mech := result [ i ] ;
27748: LD_ADDR_VAR 0 5
27752: PUSH
27753: LD_VAR 0 2
27757: PUSH
27758: LD_VAR 0 3
27762: ARRAY
27763: ST_TO_ADDR
// end ;
27764: GO 27673
27766: POP
27767: POP
// end ; ComLinkTo ( vehicle , mech ) ;
27768: LD_VAR 0 1
27772: PPUSH
27773: LD_VAR 0 5
27777: PPUSH
27778: CALL_OW 135
// end ;
27782: LD_VAR 0 2
27786: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
27787: LD_INT 0
27789: PPUSH
27790: PPUSH
27791: PPUSH
27792: PPUSH
27793: PPUSH
27794: PPUSH
27795: PPUSH
27796: PPUSH
27797: PPUSH
27798: PPUSH
27799: PPUSH
27800: PPUSH
27801: PPUSH
// result := [ ] ;
27802: LD_ADDR_VAR 0 7
27806: PUSH
27807: EMPTY
27808: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
27809: LD_VAR 0 1
27813: PPUSH
27814: CALL_OW 266
27818: PUSH
27819: LD_INT 0
27821: PUSH
27822: LD_INT 1
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: IN
27829: NOT
27830: IFFALSE 27834
// exit ;
27832: GO 29468
// if name then
27834: LD_VAR 0 3
27838: IFFALSE 27854
// SetBName ( base_dep , name ) ;
27840: LD_VAR 0 1
27844: PPUSH
27845: LD_VAR 0 3
27849: PPUSH
27850: CALL_OW 500
// base := GetBase ( base_dep ) ;
27854: LD_ADDR_VAR 0 15
27858: PUSH
27859: LD_VAR 0 1
27863: PPUSH
27864: CALL_OW 274
27868: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
27869: LD_ADDR_VAR 0 16
27873: PUSH
27874: LD_VAR 0 1
27878: PPUSH
27879: CALL_OW 255
27883: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
27884: LD_ADDR_VAR 0 17
27888: PUSH
27889: LD_VAR 0 1
27893: PPUSH
27894: CALL_OW 248
27898: ST_TO_ADDR
// if sources then
27899: LD_VAR 0 5
27903: IFFALSE 27950
// for i = 1 to 3 do
27905: LD_ADDR_VAR 0 8
27909: PUSH
27910: DOUBLE
27911: LD_INT 1
27913: DEC
27914: ST_TO_ADDR
27915: LD_INT 3
27917: PUSH
27918: FOR_TO
27919: IFFALSE 27948
// AddResourceType ( base , i , sources [ i ] ) ;
27921: LD_VAR 0 15
27925: PPUSH
27926: LD_VAR 0 8
27930: PPUSH
27931: LD_VAR 0 5
27935: PUSH
27936: LD_VAR 0 8
27940: ARRAY
27941: PPUSH
27942: CALL_OW 276
27946: GO 27918
27948: POP
27949: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
27950: LD_ADDR_VAR 0 18
27954: PUSH
27955: LD_VAR 0 15
27959: PPUSH
27960: LD_VAR 0 2
27964: PPUSH
27965: LD_INT 1
27967: PPUSH
27968: CALL 27211 0 3
27972: ST_TO_ADDR
// InitHc ;
27973: CALL_OW 19
// InitUc ;
27977: CALL_OW 18
// uc_side := side ;
27981: LD_ADDR_OWVAR 20
27985: PUSH
27986: LD_VAR 0 16
27990: ST_TO_ADDR
// uc_nation := nation ;
27991: LD_ADDR_OWVAR 21
27995: PUSH
27996: LD_VAR 0 17
28000: ST_TO_ADDR
// if buildings then
28001: LD_VAR 0 18
28005: IFFALSE 29327
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
28007: LD_ADDR_VAR 0 19
28011: PUSH
28012: LD_VAR 0 18
28016: PPUSH
28017: LD_INT 2
28019: PUSH
28020: LD_INT 30
28022: PUSH
28023: LD_INT 29
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 30
28032: PUSH
28033: LD_INT 30
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: LIST
28044: PPUSH
28045: CALL_OW 72
28049: ST_TO_ADDR
// if tmp then
28050: LD_VAR 0 19
28054: IFFALSE 28102
// for i in tmp do
28056: LD_ADDR_VAR 0 8
28060: PUSH
28061: LD_VAR 0 19
28065: PUSH
28066: FOR_IN
28067: IFFALSE 28100
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
28069: LD_VAR 0 8
28073: PPUSH
28074: CALL_OW 250
28078: PPUSH
28079: LD_VAR 0 8
28083: PPUSH
28084: CALL_OW 251
28088: PPUSH
28089: LD_VAR 0 16
28093: PPUSH
28094: CALL_OW 441
28098: GO 28066
28100: POP
28101: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28102: LD_VAR 0 18
28106: PPUSH
28107: LD_INT 2
28109: PUSH
28110: LD_INT 30
28112: PUSH
28113: LD_INT 32
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 30
28122: PUSH
28123: LD_INT 33
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: LIST
28134: PPUSH
28135: CALL_OW 72
28139: IFFALSE 28227
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28141: LD_ADDR_VAR 0 8
28145: PUSH
28146: LD_VAR 0 18
28150: PPUSH
28151: LD_INT 2
28153: PUSH
28154: LD_INT 30
28156: PUSH
28157: LD_INT 32
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 30
28166: PUSH
28167: LD_INT 33
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: LIST
28178: PPUSH
28179: CALL_OW 72
28183: PUSH
28184: FOR_IN
28185: IFFALSE 28225
// begin if not GetBWeapon ( i ) then
28187: LD_VAR 0 8
28191: PPUSH
28192: CALL_OW 269
28196: NOT
28197: IFFALSE 28223
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
28199: LD_VAR 0 8
28203: PPUSH
28204: LD_VAR 0 8
28208: PPUSH
28209: LD_VAR 0 2
28213: PPUSH
28214: CALL 29473 0 2
28218: PPUSH
28219: CALL_OW 431
// end ;
28223: GO 28184
28225: POP
28226: POP
// end ; for i = 1 to personel do
28227: LD_ADDR_VAR 0 8
28231: PUSH
28232: DOUBLE
28233: LD_INT 1
28235: DEC
28236: ST_TO_ADDR
28237: LD_VAR 0 6
28241: PUSH
28242: FOR_TO
28243: IFFALSE 29307
// begin if i > 4 then
28245: LD_VAR 0 8
28249: PUSH
28250: LD_INT 4
28252: GREATER
28253: IFFALSE 28257
// break ;
28255: GO 29307
// case i of 1 :
28257: LD_VAR 0 8
28261: PUSH
28262: LD_INT 1
28264: DOUBLE
28265: EQUAL
28266: IFTRUE 28270
28268: GO 28350
28270: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28271: LD_ADDR_VAR 0 12
28275: PUSH
28276: LD_VAR 0 18
28280: PPUSH
28281: LD_INT 22
28283: PUSH
28284: LD_VAR 0 16
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 58
28295: PUSH
28296: EMPTY
28297: LIST
28298: PUSH
28299: LD_INT 2
28301: PUSH
28302: LD_INT 30
28304: PUSH
28305: LD_INT 32
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 30
28314: PUSH
28315: LD_INT 4
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 30
28324: PUSH
28325: LD_INT 5
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: LIST
28342: PPUSH
28343: CALL_OW 72
28347: ST_TO_ADDR
28348: GO 28572
28350: LD_INT 2
28352: DOUBLE
28353: EQUAL
28354: IFTRUE 28358
28356: GO 28420
28358: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28359: LD_ADDR_VAR 0 12
28363: PUSH
28364: LD_VAR 0 18
28368: PPUSH
28369: LD_INT 22
28371: PUSH
28372: LD_VAR 0 16
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 2
28383: PUSH
28384: LD_INT 30
28386: PUSH
28387: LD_INT 0
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 30
28396: PUSH
28397: LD_INT 1
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: LIST
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PPUSH
28413: CALL_OW 72
28417: ST_TO_ADDR
28418: GO 28572
28420: LD_INT 3
28422: DOUBLE
28423: EQUAL
28424: IFTRUE 28428
28426: GO 28490
28428: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28429: LD_ADDR_VAR 0 12
28433: PUSH
28434: LD_VAR 0 18
28438: PPUSH
28439: LD_INT 22
28441: PUSH
28442: LD_VAR 0 16
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 2
28453: PUSH
28454: LD_INT 30
28456: PUSH
28457: LD_INT 2
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: LD_INT 30
28466: PUSH
28467: LD_INT 3
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: LIST
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PPUSH
28483: CALL_OW 72
28487: ST_TO_ADDR
28488: GO 28572
28490: LD_INT 4
28492: DOUBLE
28493: EQUAL
28494: IFTRUE 28498
28496: GO 28571
28498: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28499: LD_ADDR_VAR 0 12
28503: PUSH
28504: LD_VAR 0 18
28508: PPUSH
28509: LD_INT 22
28511: PUSH
28512: LD_VAR 0 16
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 2
28523: PUSH
28524: LD_INT 30
28526: PUSH
28527: LD_INT 6
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 30
28536: PUSH
28537: LD_INT 7
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: LD_INT 30
28546: PUSH
28547: LD_INT 8
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PPUSH
28564: CALL_OW 72
28568: ST_TO_ADDR
28569: GO 28572
28571: POP
// if i = 1 then
28572: LD_VAR 0 8
28576: PUSH
28577: LD_INT 1
28579: EQUAL
28580: IFFALSE 28691
// begin tmp := [ ] ;
28582: LD_ADDR_VAR 0 19
28586: PUSH
28587: EMPTY
28588: ST_TO_ADDR
// for j in f do
28589: LD_ADDR_VAR 0 9
28593: PUSH
28594: LD_VAR 0 12
28598: PUSH
28599: FOR_IN
28600: IFFALSE 28673
// if GetBType ( j ) = b_bunker then
28602: LD_VAR 0 9
28606: PPUSH
28607: CALL_OW 266
28611: PUSH
28612: LD_INT 32
28614: EQUAL
28615: IFFALSE 28642
// tmp := Insert ( tmp , 1 , j ) else
28617: LD_ADDR_VAR 0 19
28621: PUSH
28622: LD_VAR 0 19
28626: PPUSH
28627: LD_INT 1
28629: PPUSH
28630: LD_VAR 0 9
28634: PPUSH
28635: CALL_OW 2
28639: ST_TO_ADDR
28640: GO 28671
// tmp := Insert ( tmp , tmp + 1 , j ) ;
28642: LD_ADDR_VAR 0 19
28646: PUSH
28647: LD_VAR 0 19
28651: PPUSH
28652: LD_VAR 0 19
28656: PUSH
28657: LD_INT 1
28659: PLUS
28660: PPUSH
28661: LD_VAR 0 9
28665: PPUSH
28666: CALL_OW 2
28670: ST_TO_ADDR
28671: GO 28599
28673: POP
28674: POP
// if tmp then
28675: LD_VAR 0 19
28679: IFFALSE 28691
// f := tmp ;
28681: LD_ADDR_VAR 0 12
28685: PUSH
28686: LD_VAR 0 19
28690: ST_TO_ADDR
// end ; x := personel [ i ] ;
28691: LD_ADDR_VAR 0 13
28695: PUSH
28696: LD_VAR 0 6
28700: PUSH
28701: LD_VAR 0 8
28705: ARRAY
28706: ST_TO_ADDR
// if x = - 1 then
28707: LD_VAR 0 13
28711: PUSH
28712: LD_INT 1
28714: NEG
28715: EQUAL
28716: IFFALSE 28925
// begin for j in f do
28718: LD_ADDR_VAR 0 9
28722: PUSH
28723: LD_VAR 0 12
28727: PUSH
28728: FOR_IN
28729: IFFALSE 28921
// repeat InitHc ;
28731: CALL_OW 19
// if GetBType ( j ) = b_barracks then
28735: LD_VAR 0 9
28739: PPUSH
28740: CALL_OW 266
28744: PUSH
28745: LD_INT 5
28747: EQUAL
28748: IFFALSE 28818
// begin if UnitsInside ( j ) < 3 then
28750: LD_VAR 0 9
28754: PPUSH
28755: CALL_OW 313
28759: PUSH
28760: LD_INT 3
28762: LESS
28763: IFFALSE 28799
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28765: LD_INT 0
28767: PPUSH
28768: LD_INT 5
28770: PUSH
28771: LD_INT 8
28773: PUSH
28774: LD_INT 9
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: LIST
28781: PUSH
28782: LD_VAR 0 17
28786: ARRAY
28787: PPUSH
28788: LD_VAR 0 4
28792: PPUSH
28793: CALL_OW 380
28797: GO 28816
// PrepareHuman ( false , i , skill ) ;
28799: LD_INT 0
28801: PPUSH
28802: LD_VAR 0 8
28806: PPUSH
28807: LD_VAR 0 4
28811: PPUSH
28812: CALL_OW 380
// end else
28816: GO 28835
// PrepareHuman ( false , i , skill ) ;
28818: LD_INT 0
28820: PPUSH
28821: LD_VAR 0 8
28825: PPUSH
28826: LD_VAR 0 4
28830: PPUSH
28831: CALL_OW 380
// un := CreateHuman ;
28835: LD_ADDR_VAR 0 14
28839: PUSH
28840: CALL_OW 44
28844: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28845: LD_ADDR_VAR 0 7
28849: PUSH
28850: LD_VAR 0 7
28854: PPUSH
28855: LD_INT 1
28857: PPUSH
28858: LD_VAR 0 14
28862: PPUSH
28863: CALL_OW 2
28867: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
28868: LD_VAR 0 14
28872: PPUSH
28873: LD_VAR 0 9
28877: PPUSH
28878: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
28882: LD_VAR 0 9
28886: PPUSH
28887: CALL_OW 313
28891: PUSH
28892: LD_INT 6
28894: EQUAL
28895: PUSH
28896: LD_VAR 0 9
28900: PPUSH
28901: CALL_OW 266
28905: PUSH
28906: LD_INT 32
28908: PUSH
28909: LD_INT 31
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: IN
28916: OR
28917: IFFALSE 28731
28919: GO 28728
28921: POP
28922: POP
// end else
28923: GO 29305
// for j = 1 to x do
28925: LD_ADDR_VAR 0 9
28929: PUSH
28930: DOUBLE
28931: LD_INT 1
28933: DEC
28934: ST_TO_ADDR
28935: LD_VAR 0 13
28939: PUSH
28940: FOR_TO
28941: IFFALSE 29303
// begin InitHc ;
28943: CALL_OW 19
// if not f then
28947: LD_VAR 0 12
28951: NOT
28952: IFFALSE 29041
// begin PrepareHuman ( false , i , skill ) ;
28954: LD_INT 0
28956: PPUSH
28957: LD_VAR 0 8
28961: PPUSH
28962: LD_VAR 0 4
28966: PPUSH
28967: CALL_OW 380
// un := CreateHuman ;
28971: LD_ADDR_VAR 0 14
28975: PUSH
28976: CALL_OW 44
28980: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28981: LD_ADDR_VAR 0 7
28985: PUSH
28986: LD_VAR 0 7
28990: PPUSH
28991: LD_INT 1
28993: PPUSH
28994: LD_VAR 0 14
28998: PPUSH
28999: CALL_OW 2
29003: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29004: LD_VAR 0 14
29008: PPUSH
29009: LD_VAR 0 1
29013: PPUSH
29014: CALL_OW 250
29018: PPUSH
29019: LD_VAR 0 1
29023: PPUSH
29024: CALL_OW 251
29028: PPUSH
29029: LD_INT 10
29031: PPUSH
29032: LD_INT 0
29034: PPUSH
29035: CALL_OW 50
// continue ;
29039: GO 28940
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
29041: LD_VAR 0 12
29045: PUSH
29046: LD_INT 1
29048: ARRAY
29049: PPUSH
29050: CALL_OW 313
29054: PUSH
29055: LD_VAR 0 12
29059: PUSH
29060: LD_INT 1
29062: ARRAY
29063: PPUSH
29064: CALL_OW 266
29068: PUSH
29069: LD_INT 32
29071: PUSH
29072: LD_INT 31
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: IN
29079: AND
29080: PUSH
29081: LD_VAR 0 12
29085: PUSH
29086: LD_INT 1
29088: ARRAY
29089: PPUSH
29090: CALL_OW 313
29094: PUSH
29095: LD_INT 6
29097: EQUAL
29098: OR
29099: IFFALSE 29119
// f := Delete ( f , 1 ) ;
29101: LD_ADDR_VAR 0 12
29105: PUSH
29106: LD_VAR 0 12
29110: PPUSH
29111: LD_INT 1
29113: PPUSH
29114: CALL_OW 3
29118: ST_TO_ADDR
// if not f then
29119: LD_VAR 0 12
29123: NOT
29124: IFFALSE 29142
// begin x := x + 2 ;
29126: LD_ADDR_VAR 0 13
29130: PUSH
29131: LD_VAR 0 13
29135: PUSH
29136: LD_INT 2
29138: PLUS
29139: ST_TO_ADDR
// continue ;
29140: GO 28940
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29142: LD_VAR 0 12
29146: PUSH
29147: LD_INT 1
29149: ARRAY
29150: PPUSH
29151: CALL_OW 266
29155: PUSH
29156: LD_INT 5
29158: EQUAL
29159: IFFALSE 29233
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29161: LD_VAR 0 12
29165: PUSH
29166: LD_INT 1
29168: ARRAY
29169: PPUSH
29170: CALL_OW 313
29174: PUSH
29175: LD_INT 3
29177: LESS
29178: IFFALSE 29214
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29180: LD_INT 0
29182: PPUSH
29183: LD_INT 5
29185: PUSH
29186: LD_INT 8
29188: PUSH
29189: LD_INT 9
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: LIST
29196: PUSH
29197: LD_VAR 0 17
29201: ARRAY
29202: PPUSH
29203: LD_VAR 0 4
29207: PPUSH
29208: CALL_OW 380
29212: GO 29231
// PrepareHuman ( false , i , skill ) ;
29214: LD_INT 0
29216: PPUSH
29217: LD_VAR 0 8
29221: PPUSH
29222: LD_VAR 0 4
29226: PPUSH
29227: CALL_OW 380
// end else
29231: GO 29250
// PrepareHuman ( false , i , skill ) ;
29233: LD_INT 0
29235: PPUSH
29236: LD_VAR 0 8
29240: PPUSH
29241: LD_VAR 0 4
29245: PPUSH
29246: CALL_OW 380
// un := CreateHuman ;
29250: LD_ADDR_VAR 0 14
29254: PUSH
29255: CALL_OW 44
29259: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29260: LD_ADDR_VAR 0 7
29264: PUSH
29265: LD_VAR 0 7
29269: PPUSH
29270: LD_INT 1
29272: PPUSH
29273: LD_VAR 0 14
29277: PPUSH
29278: CALL_OW 2
29282: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29283: LD_VAR 0 14
29287: PPUSH
29288: LD_VAR 0 12
29292: PUSH
29293: LD_INT 1
29295: ARRAY
29296: PPUSH
29297: CALL_OW 52
// end ;
29301: GO 28940
29303: POP
29304: POP
// end ;
29305: GO 28242
29307: POP
29308: POP
// result := result ^ buildings ;
29309: LD_ADDR_VAR 0 7
29313: PUSH
29314: LD_VAR 0 7
29318: PUSH
29319: LD_VAR 0 18
29323: ADD
29324: ST_TO_ADDR
// end else
29325: GO 29468
// begin for i = 1 to personel do
29327: LD_ADDR_VAR 0 8
29331: PUSH
29332: DOUBLE
29333: LD_INT 1
29335: DEC
29336: ST_TO_ADDR
29337: LD_VAR 0 6
29341: PUSH
29342: FOR_TO
29343: IFFALSE 29466
// begin if i > 4 then
29345: LD_VAR 0 8
29349: PUSH
29350: LD_INT 4
29352: GREATER
29353: IFFALSE 29357
// break ;
29355: GO 29466
// x := personel [ i ] ;
29357: LD_ADDR_VAR 0 13
29361: PUSH
29362: LD_VAR 0 6
29366: PUSH
29367: LD_VAR 0 8
29371: ARRAY
29372: ST_TO_ADDR
// if x = - 1 then
29373: LD_VAR 0 13
29377: PUSH
29378: LD_INT 1
29380: NEG
29381: EQUAL
29382: IFFALSE 29386
// continue ;
29384: GO 29342
// PrepareHuman ( false , i , skill ) ;
29386: LD_INT 0
29388: PPUSH
29389: LD_VAR 0 8
29393: PPUSH
29394: LD_VAR 0 4
29398: PPUSH
29399: CALL_OW 380
// un := CreateHuman ;
29403: LD_ADDR_VAR 0 14
29407: PUSH
29408: CALL_OW 44
29412: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29413: LD_VAR 0 14
29417: PPUSH
29418: LD_VAR 0 1
29422: PPUSH
29423: CALL_OW 250
29427: PPUSH
29428: LD_VAR 0 1
29432: PPUSH
29433: CALL_OW 251
29437: PPUSH
29438: LD_INT 10
29440: PPUSH
29441: LD_INT 0
29443: PPUSH
29444: CALL_OW 50
// result := result ^ un ;
29448: LD_ADDR_VAR 0 7
29452: PUSH
29453: LD_VAR 0 7
29457: PUSH
29458: LD_VAR 0 14
29462: ADD
29463: ST_TO_ADDR
// end ;
29464: GO 29342
29466: POP
29467: POP
// end ; end ;
29468: LD_VAR 0 7
29472: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29473: LD_INT 0
29475: PPUSH
29476: PPUSH
29477: PPUSH
29478: PPUSH
29479: PPUSH
29480: PPUSH
29481: PPUSH
29482: PPUSH
29483: PPUSH
29484: PPUSH
29485: PPUSH
29486: PPUSH
29487: PPUSH
29488: PPUSH
29489: PPUSH
29490: PPUSH
// result := false ;
29491: LD_ADDR_VAR 0 3
29495: PUSH
29496: LD_INT 0
29498: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29499: LD_VAR 0 1
29503: NOT
29504: PUSH
29505: LD_VAR 0 1
29509: PPUSH
29510: CALL_OW 266
29514: PUSH
29515: LD_INT 32
29517: PUSH
29518: LD_INT 33
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: IN
29525: NOT
29526: OR
29527: IFFALSE 29531
// exit ;
29529: GO 30640
// nat := GetNation ( tower ) ;
29531: LD_ADDR_VAR 0 12
29535: PUSH
29536: LD_VAR 0 1
29540: PPUSH
29541: CALL_OW 248
29545: ST_TO_ADDR
// side := GetSide ( tower ) ;
29546: LD_ADDR_VAR 0 16
29550: PUSH
29551: LD_VAR 0 1
29555: PPUSH
29556: CALL_OW 255
29560: ST_TO_ADDR
// x := GetX ( tower ) ;
29561: LD_ADDR_VAR 0 10
29565: PUSH
29566: LD_VAR 0 1
29570: PPUSH
29571: CALL_OW 250
29575: ST_TO_ADDR
// y := GetY ( tower ) ;
29576: LD_ADDR_VAR 0 11
29580: PUSH
29581: LD_VAR 0 1
29585: PPUSH
29586: CALL_OW 251
29590: ST_TO_ADDR
// if not x or not y then
29591: LD_VAR 0 10
29595: NOT
29596: PUSH
29597: LD_VAR 0 11
29601: NOT
29602: OR
29603: IFFALSE 29607
// exit ;
29605: GO 30640
// weapon := 0 ;
29607: LD_ADDR_VAR 0 18
29611: PUSH
29612: LD_INT 0
29614: ST_TO_ADDR
// fac_list := [ ] ;
29615: LD_ADDR_VAR 0 17
29619: PUSH
29620: EMPTY
29621: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
29622: LD_ADDR_VAR 0 6
29626: PUSH
29627: LD_VAR 0 1
29631: PPUSH
29632: CALL_OW 274
29636: PPUSH
29637: LD_VAR 0 2
29641: PPUSH
29642: LD_INT 0
29644: PPUSH
29645: CALL 27211 0 3
29649: PPUSH
29650: LD_INT 30
29652: PUSH
29653: LD_INT 3
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PPUSH
29660: CALL_OW 72
29664: ST_TO_ADDR
// if not factories then
29665: LD_VAR 0 6
29669: NOT
29670: IFFALSE 29674
// exit ;
29672: GO 30640
// for i in factories do
29674: LD_ADDR_VAR 0 8
29678: PUSH
29679: LD_VAR 0 6
29683: PUSH
29684: FOR_IN
29685: IFFALSE 29710
// fac_list := fac_list union AvailableWeaponList ( i ) ;
29687: LD_ADDR_VAR 0 17
29691: PUSH
29692: LD_VAR 0 17
29696: PUSH
29697: LD_VAR 0 8
29701: PPUSH
29702: CALL_OW 478
29706: UNION
29707: ST_TO_ADDR
29708: GO 29684
29710: POP
29711: POP
// if not fac_list then
29712: LD_VAR 0 17
29716: NOT
29717: IFFALSE 29721
// exit ;
29719: GO 30640
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
29721: LD_ADDR_VAR 0 5
29725: PUSH
29726: LD_INT 4
29728: PUSH
29729: LD_INT 5
29731: PUSH
29732: LD_INT 9
29734: PUSH
29735: LD_INT 10
29737: PUSH
29738: LD_INT 6
29740: PUSH
29741: LD_INT 7
29743: PUSH
29744: LD_INT 11
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 27
29758: PUSH
29759: LD_INT 28
29761: PUSH
29762: LD_INT 26
29764: PUSH
29765: LD_INT 30
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 43
29776: PUSH
29777: LD_INT 44
29779: PUSH
29780: LD_INT 46
29782: PUSH
29783: LD_INT 45
29785: PUSH
29786: LD_INT 47
29788: PUSH
29789: LD_INT 49
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: LIST
29804: PUSH
29805: LD_VAR 0 12
29809: ARRAY
29810: ST_TO_ADDR
// list := list isect fac_list ;
29811: LD_ADDR_VAR 0 5
29815: PUSH
29816: LD_VAR 0 5
29820: PUSH
29821: LD_VAR 0 17
29825: ISECT
29826: ST_TO_ADDR
// if not list then
29827: LD_VAR 0 5
29831: NOT
29832: IFFALSE 29836
// exit ;
29834: GO 30640
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
29836: LD_VAR 0 12
29840: PUSH
29841: LD_INT 3
29843: EQUAL
29844: PUSH
29845: LD_INT 49
29847: PUSH
29848: LD_VAR 0 5
29852: IN
29853: AND
29854: PUSH
29855: LD_INT 31
29857: PPUSH
29858: LD_VAR 0 16
29862: PPUSH
29863: CALL_OW 321
29867: PUSH
29868: LD_INT 2
29870: EQUAL
29871: AND
29872: IFFALSE 29932
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
29874: LD_INT 22
29876: PUSH
29877: LD_VAR 0 16
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: LD_INT 35
29888: PUSH
29889: LD_INT 49
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 91
29898: PUSH
29899: LD_VAR 0 1
29903: PUSH
29904: LD_INT 10
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: LIST
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: LIST
29916: PPUSH
29917: CALL_OW 69
29921: NOT
29922: IFFALSE 29932
// weapon := ru_time_lapser ;
29924: LD_ADDR_VAR 0 18
29928: PUSH
29929: LD_INT 49
29931: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
29932: LD_VAR 0 12
29936: PUSH
29937: LD_INT 1
29939: PUSH
29940: LD_INT 2
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: IN
29947: PUSH
29948: LD_INT 11
29950: PUSH
29951: LD_VAR 0 5
29955: IN
29956: PUSH
29957: LD_INT 30
29959: PUSH
29960: LD_VAR 0 5
29964: IN
29965: OR
29966: AND
29967: PUSH
29968: LD_INT 6
29970: PPUSH
29971: LD_VAR 0 16
29975: PPUSH
29976: CALL_OW 321
29980: PUSH
29981: LD_INT 2
29983: EQUAL
29984: AND
29985: IFFALSE 30150
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
29987: LD_INT 22
29989: PUSH
29990: LD_VAR 0 16
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 2
30001: PUSH
30002: LD_INT 35
30004: PUSH
30005: LD_INT 11
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 35
30014: PUSH
30015: LD_INT 30
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 91
30029: PUSH
30030: LD_VAR 0 1
30034: PUSH
30035: LD_INT 18
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: LIST
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: LIST
30047: PPUSH
30048: CALL_OW 69
30052: NOT
30053: PUSH
30054: LD_INT 22
30056: PUSH
30057: LD_VAR 0 16
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 2
30068: PUSH
30069: LD_INT 30
30071: PUSH
30072: LD_INT 32
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: LD_INT 30
30081: PUSH
30082: LD_INT 33
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 91
30096: PUSH
30097: LD_VAR 0 1
30101: PUSH
30102: LD_INT 12
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: LIST
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: LIST
30114: PUSH
30115: EMPTY
30116: LIST
30117: PPUSH
30118: CALL_OW 69
30122: PUSH
30123: LD_INT 2
30125: GREATER
30126: AND
30127: IFFALSE 30150
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30129: LD_ADDR_VAR 0 18
30133: PUSH
30134: LD_INT 11
30136: PUSH
30137: LD_INT 30
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_VAR 0 12
30148: ARRAY
30149: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30150: LD_VAR 0 18
30154: NOT
30155: PUSH
30156: LD_INT 40
30158: PPUSH
30159: LD_VAR 0 16
30163: PPUSH
30164: CALL_OW 321
30168: PUSH
30169: LD_INT 2
30171: EQUAL
30172: AND
30173: PUSH
30174: LD_INT 7
30176: PUSH
30177: LD_VAR 0 5
30181: IN
30182: PUSH
30183: LD_INT 28
30185: PUSH
30186: LD_VAR 0 5
30190: IN
30191: OR
30192: PUSH
30193: LD_INT 45
30195: PUSH
30196: LD_VAR 0 5
30200: IN
30201: OR
30202: AND
30203: IFFALSE 30457
// begin hex := GetHexInfo ( x , y ) ;
30205: LD_ADDR_VAR 0 4
30209: PUSH
30210: LD_VAR 0 10
30214: PPUSH
30215: LD_VAR 0 11
30219: PPUSH
30220: CALL_OW 546
30224: ST_TO_ADDR
// if hex [ 1 ] then
30225: LD_VAR 0 4
30229: PUSH
30230: LD_INT 1
30232: ARRAY
30233: IFFALSE 30237
// exit ;
30235: GO 30640
// height := hex [ 2 ] ;
30237: LD_ADDR_VAR 0 15
30241: PUSH
30242: LD_VAR 0 4
30246: PUSH
30247: LD_INT 2
30249: ARRAY
30250: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30251: LD_ADDR_VAR 0 14
30255: PUSH
30256: LD_INT 0
30258: PUSH
30259: LD_INT 2
30261: PUSH
30262: LD_INT 3
30264: PUSH
30265: LD_INT 5
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: ST_TO_ADDR
// for i in tmp do
30274: LD_ADDR_VAR 0 8
30278: PUSH
30279: LD_VAR 0 14
30283: PUSH
30284: FOR_IN
30285: IFFALSE 30455
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30287: LD_ADDR_VAR 0 9
30291: PUSH
30292: LD_VAR 0 10
30296: PPUSH
30297: LD_VAR 0 8
30301: PPUSH
30302: LD_INT 5
30304: PPUSH
30305: CALL_OW 272
30309: PUSH
30310: LD_VAR 0 11
30314: PPUSH
30315: LD_VAR 0 8
30319: PPUSH
30320: LD_INT 5
30322: PPUSH
30323: CALL_OW 273
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30332: LD_VAR 0 9
30336: PUSH
30337: LD_INT 1
30339: ARRAY
30340: PPUSH
30341: LD_VAR 0 9
30345: PUSH
30346: LD_INT 2
30348: ARRAY
30349: PPUSH
30350: CALL_OW 488
30354: IFFALSE 30453
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30356: LD_ADDR_VAR 0 4
30360: PUSH
30361: LD_VAR 0 9
30365: PUSH
30366: LD_INT 1
30368: ARRAY
30369: PPUSH
30370: LD_VAR 0 9
30374: PUSH
30375: LD_INT 2
30377: ARRAY
30378: PPUSH
30379: CALL_OW 546
30383: ST_TO_ADDR
// if hex [ 1 ] then
30384: LD_VAR 0 4
30388: PUSH
30389: LD_INT 1
30391: ARRAY
30392: IFFALSE 30396
// continue ;
30394: GO 30284
// h := hex [ 2 ] ;
30396: LD_ADDR_VAR 0 13
30400: PUSH
30401: LD_VAR 0 4
30405: PUSH
30406: LD_INT 2
30408: ARRAY
30409: ST_TO_ADDR
// if h + 7 < height then
30410: LD_VAR 0 13
30414: PUSH
30415: LD_INT 7
30417: PLUS
30418: PUSH
30419: LD_VAR 0 15
30423: LESS
30424: IFFALSE 30453
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30426: LD_ADDR_VAR 0 18
30430: PUSH
30431: LD_INT 7
30433: PUSH
30434: LD_INT 28
30436: PUSH
30437: LD_INT 45
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: LIST
30444: PUSH
30445: LD_VAR 0 12
30449: ARRAY
30450: ST_TO_ADDR
// break ;
30451: GO 30455
// end ; end ; end ;
30453: GO 30284
30455: POP
30456: POP
// end ; if not weapon then
30457: LD_VAR 0 18
30461: NOT
30462: IFFALSE 30522
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30464: LD_ADDR_VAR 0 5
30468: PUSH
30469: LD_VAR 0 5
30473: PUSH
30474: LD_INT 11
30476: PUSH
30477: LD_INT 30
30479: PUSH
30480: LD_INT 49
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: LIST
30487: DIFF
30488: ST_TO_ADDR
// if not list then
30489: LD_VAR 0 5
30493: NOT
30494: IFFALSE 30498
// exit ;
30496: GO 30640
// weapon := list [ rand ( 1 , list ) ] ;
30498: LD_ADDR_VAR 0 18
30502: PUSH
30503: LD_VAR 0 5
30507: PUSH
30508: LD_INT 1
30510: PPUSH
30511: LD_VAR 0 5
30515: PPUSH
30516: CALL_OW 12
30520: ARRAY
30521: ST_TO_ADDR
// end ; if weapon then
30522: LD_VAR 0 18
30526: IFFALSE 30640
// begin tmp := CostOfWeapon ( weapon ) ;
30528: LD_ADDR_VAR 0 14
30532: PUSH
30533: LD_VAR 0 18
30537: PPUSH
30538: CALL_OW 451
30542: ST_TO_ADDR
// j := GetBase ( tower ) ;
30543: LD_ADDR_VAR 0 9
30547: PUSH
30548: LD_VAR 0 1
30552: PPUSH
30553: CALL_OW 274
30557: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30558: LD_VAR 0 9
30562: PPUSH
30563: LD_INT 1
30565: PPUSH
30566: CALL_OW 275
30570: PUSH
30571: LD_VAR 0 14
30575: PUSH
30576: LD_INT 1
30578: ARRAY
30579: GREATEREQUAL
30580: PUSH
30581: LD_VAR 0 9
30585: PPUSH
30586: LD_INT 2
30588: PPUSH
30589: CALL_OW 275
30593: PUSH
30594: LD_VAR 0 14
30598: PUSH
30599: LD_INT 2
30601: ARRAY
30602: GREATEREQUAL
30603: AND
30604: PUSH
30605: LD_VAR 0 9
30609: PPUSH
30610: LD_INT 3
30612: PPUSH
30613: CALL_OW 275
30617: PUSH
30618: LD_VAR 0 14
30622: PUSH
30623: LD_INT 3
30625: ARRAY
30626: GREATEREQUAL
30627: AND
30628: IFFALSE 30640
// result := weapon ;
30630: LD_ADDR_VAR 0 3
30634: PUSH
30635: LD_VAR 0 18
30639: ST_TO_ADDR
// end ; end ;
30640: LD_VAR 0 3
30644: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
30645: LD_INT 0
30647: PPUSH
30648: PPUSH
// result := true ;
30649: LD_ADDR_VAR 0 3
30653: PUSH
30654: LD_INT 1
30656: ST_TO_ADDR
// if array1 = array2 then
30657: LD_VAR 0 1
30661: PUSH
30662: LD_VAR 0 2
30666: EQUAL
30667: IFFALSE 30727
// begin for i = 1 to array1 do
30669: LD_ADDR_VAR 0 4
30673: PUSH
30674: DOUBLE
30675: LD_INT 1
30677: DEC
30678: ST_TO_ADDR
30679: LD_VAR 0 1
30683: PUSH
30684: FOR_TO
30685: IFFALSE 30723
// if array1 [ i ] <> array2 [ i ] then
30687: LD_VAR 0 1
30691: PUSH
30692: LD_VAR 0 4
30696: ARRAY
30697: PUSH
30698: LD_VAR 0 2
30702: PUSH
30703: LD_VAR 0 4
30707: ARRAY
30708: NONEQUAL
30709: IFFALSE 30721
// begin result := false ;
30711: LD_ADDR_VAR 0 3
30715: PUSH
30716: LD_INT 0
30718: ST_TO_ADDR
// break ;
30719: GO 30723
// end ;
30721: GO 30684
30723: POP
30724: POP
// end else
30725: GO 30735
// result := false ;
30727: LD_ADDR_VAR 0 3
30731: PUSH
30732: LD_INT 0
30734: ST_TO_ADDR
// end ;
30735: LD_VAR 0 3
30739: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
30740: LD_INT 0
30742: PPUSH
30743: PPUSH
// if not array1 or not array2 then
30744: LD_VAR 0 1
30748: NOT
30749: PUSH
30750: LD_VAR 0 2
30754: NOT
30755: OR
30756: IFFALSE 30760
// exit ;
30758: GO 30824
// result := true ;
30760: LD_ADDR_VAR 0 3
30764: PUSH
30765: LD_INT 1
30767: ST_TO_ADDR
// for i = 1 to array1 do
30768: LD_ADDR_VAR 0 4
30772: PUSH
30773: DOUBLE
30774: LD_INT 1
30776: DEC
30777: ST_TO_ADDR
30778: LD_VAR 0 1
30782: PUSH
30783: FOR_TO
30784: IFFALSE 30822
// if array1 [ i ] <> array2 [ i ] then
30786: LD_VAR 0 1
30790: PUSH
30791: LD_VAR 0 4
30795: ARRAY
30796: PUSH
30797: LD_VAR 0 2
30801: PUSH
30802: LD_VAR 0 4
30806: ARRAY
30807: NONEQUAL
30808: IFFALSE 30820
// begin result := false ;
30810: LD_ADDR_VAR 0 3
30814: PUSH
30815: LD_INT 0
30817: ST_TO_ADDR
// break ;
30818: GO 30822
// end ;
30820: GO 30783
30822: POP
30823: POP
// end ;
30824: LD_VAR 0 3
30828: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
30829: LD_INT 0
30831: PPUSH
30832: PPUSH
30833: PPUSH
// pom := GetBase ( fac ) ;
30834: LD_ADDR_VAR 0 5
30838: PUSH
30839: LD_VAR 0 1
30843: PPUSH
30844: CALL_OW 274
30848: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
30849: LD_ADDR_VAR 0 4
30853: PUSH
30854: LD_VAR 0 2
30858: PUSH
30859: LD_INT 1
30861: ARRAY
30862: PPUSH
30863: LD_VAR 0 2
30867: PUSH
30868: LD_INT 2
30870: ARRAY
30871: PPUSH
30872: LD_VAR 0 2
30876: PUSH
30877: LD_INT 3
30879: ARRAY
30880: PPUSH
30881: LD_VAR 0 2
30885: PUSH
30886: LD_INT 4
30888: ARRAY
30889: PPUSH
30890: CALL_OW 449
30894: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30895: LD_ADDR_VAR 0 3
30899: PUSH
30900: LD_VAR 0 5
30904: PPUSH
30905: LD_INT 1
30907: PPUSH
30908: CALL_OW 275
30912: PUSH
30913: LD_VAR 0 4
30917: PUSH
30918: LD_INT 1
30920: ARRAY
30921: GREATEREQUAL
30922: PUSH
30923: LD_VAR 0 5
30927: PPUSH
30928: LD_INT 2
30930: PPUSH
30931: CALL_OW 275
30935: PUSH
30936: LD_VAR 0 4
30940: PUSH
30941: LD_INT 2
30943: ARRAY
30944: GREATEREQUAL
30945: AND
30946: PUSH
30947: LD_VAR 0 5
30951: PPUSH
30952: LD_INT 3
30954: PPUSH
30955: CALL_OW 275
30959: PUSH
30960: LD_VAR 0 4
30964: PUSH
30965: LD_INT 3
30967: ARRAY
30968: GREATEREQUAL
30969: AND
30970: ST_TO_ADDR
// end ;
30971: LD_VAR 0 3
30975: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
30976: LD_INT 0
30978: PPUSH
30979: PPUSH
30980: PPUSH
30981: PPUSH
// pom := GetBase ( building ) ;
30982: LD_ADDR_VAR 0 3
30986: PUSH
30987: LD_VAR 0 1
30991: PPUSH
30992: CALL_OW 274
30996: ST_TO_ADDR
// if not pom then
30997: LD_VAR 0 3
31001: NOT
31002: IFFALSE 31006
// exit ;
31004: GO 31176
// btype := GetBType ( building ) ;
31006: LD_ADDR_VAR 0 5
31010: PUSH
31011: LD_VAR 0 1
31015: PPUSH
31016: CALL_OW 266
31020: ST_TO_ADDR
// if btype = b_armoury then
31021: LD_VAR 0 5
31025: PUSH
31026: LD_INT 4
31028: EQUAL
31029: IFFALSE 31039
// btype := b_barracks ;
31031: LD_ADDR_VAR 0 5
31035: PUSH
31036: LD_INT 5
31038: ST_TO_ADDR
// if btype = b_depot then
31039: LD_VAR 0 5
31043: PUSH
31044: LD_INT 0
31046: EQUAL
31047: IFFALSE 31057
// btype := b_warehouse ;
31049: LD_ADDR_VAR 0 5
31053: PUSH
31054: LD_INT 1
31056: ST_TO_ADDR
// if btype = b_workshop then
31057: LD_VAR 0 5
31061: PUSH
31062: LD_INT 2
31064: EQUAL
31065: IFFALSE 31075
// btype := b_factory ;
31067: LD_ADDR_VAR 0 5
31071: PUSH
31072: LD_INT 3
31074: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31075: LD_ADDR_VAR 0 4
31079: PUSH
31080: LD_VAR 0 5
31084: PPUSH
31085: LD_VAR 0 1
31089: PPUSH
31090: CALL_OW 248
31094: PPUSH
31095: CALL_OW 450
31099: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31100: LD_ADDR_VAR 0 2
31104: PUSH
31105: LD_VAR 0 3
31109: PPUSH
31110: LD_INT 1
31112: PPUSH
31113: CALL_OW 275
31117: PUSH
31118: LD_VAR 0 4
31122: PUSH
31123: LD_INT 1
31125: ARRAY
31126: GREATEREQUAL
31127: PUSH
31128: LD_VAR 0 3
31132: PPUSH
31133: LD_INT 2
31135: PPUSH
31136: CALL_OW 275
31140: PUSH
31141: LD_VAR 0 4
31145: PUSH
31146: LD_INT 2
31148: ARRAY
31149: GREATEREQUAL
31150: AND
31151: PUSH
31152: LD_VAR 0 3
31156: PPUSH
31157: LD_INT 3
31159: PPUSH
31160: CALL_OW 275
31164: PUSH
31165: LD_VAR 0 4
31169: PUSH
31170: LD_INT 3
31172: ARRAY
31173: GREATEREQUAL
31174: AND
31175: ST_TO_ADDR
// end ;
31176: LD_VAR 0 2
31180: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31181: LD_INT 0
31183: PPUSH
31184: PPUSH
31185: PPUSH
// pom := GetBase ( building ) ;
31186: LD_ADDR_VAR 0 4
31190: PUSH
31191: LD_VAR 0 1
31195: PPUSH
31196: CALL_OW 274
31200: ST_TO_ADDR
// if not pom then
31201: LD_VAR 0 4
31205: NOT
31206: IFFALSE 31210
// exit ;
31208: GO 31311
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31210: LD_ADDR_VAR 0 5
31214: PUSH
31215: LD_VAR 0 2
31219: PPUSH
31220: LD_VAR 0 1
31224: PPUSH
31225: CALL_OW 248
31229: PPUSH
31230: CALL_OW 450
31234: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31235: LD_ADDR_VAR 0 3
31239: PUSH
31240: LD_VAR 0 4
31244: PPUSH
31245: LD_INT 1
31247: PPUSH
31248: CALL_OW 275
31252: PUSH
31253: LD_VAR 0 5
31257: PUSH
31258: LD_INT 1
31260: ARRAY
31261: GREATEREQUAL
31262: PUSH
31263: LD_VAR 0 4
31267: PPUSH
31268: LD_INT 2
31270: PPUSH
31271: CALL_OW 275
31275: PUSH
31276: LD_VAR 0 5
31280: PUSH
31281: LD_INT 2
31283: ARRAY
31284: GREATEREQUAL
31285: AND
31286: PUSH
31287: LD_VAR 0 4
31291: PPUSH
31292: LD_INT 3
31294: PPUSH
31295: CALL_OW 275
31299: PUSH
31300: LD_VAR 0 5
31304: PUSH
31305: LD_INT 3
31307: ARRAY
31308: GREATEREQUAL
31309: AND
31310: ST_TO_ADDR
// end ;
31311: LD_VAR 0 3
31315: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
31316: LD_INT 0
31318: PPUSH
31319: PPUSH
31320: PPUSH
31321: PPUSH
31322: PPUSH
31323: PPUSH
31324: PPUSH
31325: PPUSH
31326: PPUSH
31327: PPUSH
31328: PPUSH
// result := false ;
31329: LD_ADDR_VAR 0 8
31333: PUSH
31334: LD_INT 0
31336: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
31337: LD_VAR 0 5
31341: NOT
31342: PUSH
31343: LD_VAR 0 1
31347: NOT
31348: OR
31349: PUSH
31350: LD_VAR 0 2
31354: NOT
31355: OR
31356: PUSH
31357: LD_VAR 0 3
31361: NOT
31362: OR
31363: IFFALSE 31367
// exit ;
31365: GO 32181
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
31367: LD_ADDR_VAR 0 14
31371: PUSH
31372: LD_VAR 0 1
31376: PPUSH
31377: LD_VAR 0 2
31381: PPUSH
31382: LD_VAR 0 3
31386: PPUSH
31387: LD_VAR 0 4
31391: PPUSH
31392: LD_VAR 0 5
31396: PUSH
31397: LD_INT 1
31399: ARRAY
31400: PPUSH
31401: CALL_OW 248
31405: PPUSH
31406: LD_INT 0
31408: PPUSH
31409: CALL 33418 0 6
31413: ST_TO_ADDR
// if not hexes then
31414: LD_VAR 0 14
31418: NOT
31419: IFFALSE 31423
// exit ;
31421: GO 32181
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31423: LD_ADDR_VAR 0 17
31427: PUSH
31428: LD_VAR 0 5
31432: PPUSH
31433: LD_INT 22
31435: PUSH
31436: LD_VAR 0 13
31440: PPUSH
31441: CALL_OW 255
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 2
31452: PUSH
31453: LD_INT 30
31455: PUSH
31456: LD_INT 0
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 30
31465: PUSH
31466: LD_INT 1
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: LIST
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PPUSH
31482: CALL_OW 72
31486: ST_TO_ADDR
// for i = 1 to hexes do
31487: LD_ADDR_VAR 0 9
31491: PUSH
31492: DOUBLE
31493: LD_INT 1
31495: DEC
31496: ST_TO_ADDR
31497: LD_VAR 0 14
31501: PUSH
31502: FOR_TO
31503: IFFALSE 32179
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31505: LD_ADDR_VAR 0 13
31509: PUSH
31510: LD_VAR 0 14
31514: PUSH
31515: LD_VAR 0 9
31519: ARRAY
31520: PUSH
31521: LD_INT 1
31523: ARRAY
31524: PPUSH
31525: LD_VAR 0 14
31529: PUSH
31530: LD_VAR 0 9
31534: ARRAY
31535: PUSH
31536: LD_INT 2
31538: ARRAY
31539: PPUSH
31540: CALL_OW 428
31544: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31545: LD_VAR 0 14
31549: PUSH
31550: LD_VAR 0 9
31554: ARRAY
31555: PUSH
31556: LD_INT 1
31558: ARRAY
31559: PPUSH
31560: LD_VAR 0 14
31564: PUSH
31565: LD_VAR 0 9
31569: ARRAY
31570: PUSH
31571: LD_INT 2
31573: ARRAY
31574: PPUSH
31575: CALL_OW 351
31579: PUSH
31580: LD_VAR 0 14
31584: PUSH
31585: LD_VAR 0 9
31589: ARRAY
31590: PUSH
31591: LD_INT 1
31593: ARRAY
31594: PPUSH
31595: LD_VAR 0 14
31599: PUSH
31600: LD_VAR 0 9
31604: ARRAY
31605: PUSH
31606: LD_INT 2
31608: ARRAY
31609: PPUSH
31610: CALL_OW 488
31614: NOT
31615: OR
31616: PUSH
31617: LD_VAR 0 13
31621: PPUSH
31622: CALL_OW 247
31626: PUSH
31627: LD_INT 3
31629: EQUAL
31630: OR
31631: IFFALSE 31637
// exit ;
31633: POP
31634: POP
31635: GO 32181
// if not tmp then
31637: LD_VAR 0 13
31641: NOT
31642: IFFALSE 31646
// continue ;
31644: GO 31502
// result := true ;
31646: LD_ADDR_VAR 0 8
31650: PUSH
31651: LD_INT 1
31653: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
31654: LD_VAR 0 6
31658: PUSH
31659: LD_VAR 0 13
31663: PPUSH
31664: CALL_OW 247
31668: PUSH
31669: LD_INT 2
31671: EQUAL
31672: AND
31673: PUSH
31674: LD_VAR 0 13
31678: PPUSH
31679: CALL_OW 263
31683: PUSH
31684: LD_INT 1
31686: EQUAL
31687: AND
31688: IFFALSE 31852
// begin if IsDrivenBy ( tmp ) then
31690: LD_VAR 0 13
31694: PPUSH
31695: CALL_OW 311
31699: IFFALSE 31703
// continue ;
31701: GO 31502
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
31703: LD_VAR 0 6
31707: PPUSH
31708: LD_INT 3
31710: PUSH
31711: LD_INT 60
31713: PUSH
31714: EMPTY
31715: LIST
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 3
31723: PUSH
31724: LD_INT 55
31726: PUSH
31727: EMPTY
31728: LIST
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PPUSH
31738: CALL_OW 72
31742: IFFALSE 31850
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
31744: LD_ADDR_VAR 0 18
31748: PUSH
31749: LD_VAR 0 6
31753: PPUSH
31754: LD_INT 3
31756: PUSH
31757: LD_INT 60
31759: PUSH
31760: EMPTY
31761: LIST
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 3
31769: PUSH
31770: LD_INT 55
31772: PUSH
31773: EMPTY
31774: LIST
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PPUSH
31784: CALL_OW 72
31788: PUSH
31789: LD_INT 1
31791: ARRAY
31792: ST_TO_ADDR
// if IsInUnit ( driver ) then
31793: LD_VAR 0 18
31797: PPUSH
31798: CALL_OW 310
31802: IFFALSE 31813
// ComExit ( driver ) ;
31804: LD_VAR 0 18
31808: PPUSH
31809: CALL 56546 0 1
// AddComEnterUnit ( driver , tmp ) ;
31813: LD_VAR 0 18
31817: PPUSH
31818: LD_VAR 0 13
31822: PPUSH
31823: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
31827: LD_VAR 0 18
31831: PPUSH
31832: LD_VAR 0 7
31836: PPUSH
31837: CALL_OW 173
// AddComExitVehicle ( driver ) ;
31841: LD_VAR 0 18
31845: PPUSH
31846: CALL_OW 181
// end ; continue ;
31850: GO 31502
// end ; if not cleaners or not tmp in cleaners then
31852: LD_VAR 0 6
31856: NOT
31857: PUSH
31858: LD_VAR 0 13
31862: PUSH
31863: LD_VAR 0 6
31867: IN
31868: NOT
31869: OR
31870: IFFALSE 32177
// begin if dep then
31872: LD_VAR 0 17
31876: IFFALSE 32012
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
31878: LD_ADDR_VAR 0 16
31882: PUSH
31883: LD_VAR 0 17
31887: PUSH
31888: LD_INT 1
31890: ARRAY
31891: PPUSH
31892: CALL_OW 250
31896: PPUSH
31897: LD_VAR 0 17
31901: PUSH
31902: LD_INT 1
31904: ARRAY
31905: PPUSH
31906: CALL_OW 254
31910: PPUSH
31911: LD_INT 5
31913: PPUSH
31914: CALL_OW 272
31918: PUSH
31919: LD_VAR 0 17
31923: PUSH
31924: LD_INT 1
31926: ARRAY
31927: PPUSH
31928: CALL_OW 251
31932: PPUSH
31933: LD_VAR 0 17
31937: PUSH
31938: LD_INT 1
31940: ARRAY
31941: PPUSH
31942: CALL_OW 254
31946: PPUSH
31947: LD_INT 5
31949: PPUSH
31950: CALL_OW 273
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
31959: LD_VAR 0 16
31963: PUSH
31964: LD_INT 1
31966: ARRAY
31967: PPUSH
31968: LD_VAR 0 16
31972: PUSH
31973: LD_INT 2
31975: ARRAY
31976: PPUSH
31977: CALL_OW 488
31981: IFFALSE 32012
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
31983: LD_VAR 0 13
31987: PPUSH
31988: LD_VAR 0 16
31992: PUSH
31993: LD_INT 1
31995: ARRAY
31996: PPUSH
31997: LD_VAR 0 16
32001: PUSH
32002: LD_INT 2
32004: ARRAY
32005: PPUSH
32006: CALL_OW 111
// continue ;
32010: GO 31502
// end ; end ; r := GetDir ( tmp ) ;
32012: LD_ADDR_VAR 0 15
32016: PUSH
32017: LD_VAR 0 13
32021: PPUSH
32022: CALL_OW 254
32026: ST_TO_ADDR
// if r = 5 then
32027: LD_VAR 0 15
32031: PUSH
32032: LD_INT 5
32034: EQUAL
32035: IFFALSE 32045
// r := 0 ;
32037: LD_ADDR_VAR 0 15
32041: PUSH
32042: LD_INT 0
32044: ST_TO_ADDR
// for j = r to 5 do
32045: LD_ADDR_VAR 0 10
32049: PUSH
32050: DOUBLE
32051: LD_VAR 0 15
32055: DEC
32056: ST_TO_ADDR
32057: LD_INT 5
32059: PUSH
32060: FOR_TO
32061: IFFALSE 32175
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32063: LD_ADDR_VAR 0 11
32067: PUSH
32068: LD_VAR 0 13
32072: PPUSH
32073: CALL_OW 250
32077: PPUSH
32078: LD_VAR 0 10
32082: PPUSH
32083: LD_INT 2
32085: PPUSH
32086: CALL_OW 272
32090: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32091: LD_ADDR_VAR 0 12
32095: PUSH
32096: LD_VAR 0 13
32100: PPUSH
32101: CALL_OW 251
32105: PPUSH
32106: LD_VAR 0 10
32110: PPUSH
32111: LD_INT 2
32113: PPUSH
32114: CALL_OW 273
32118: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32119: LD_VAR 0 11
32123: PPUSH
32124: LD_VAR 0 12
32128: PPUSH
32129: CALL_OW 488
32133: PUSH
32134: LD_VAR 0 11
32138: PPUSH
32139: LD_VAR 0 12
32143: PPUSH
32144: CALL_OW 428
32148: NOT
32149: AND
32150: IFFALSE 32173
// begin ComMoveXY ( tmp , _x , _y ) ;
32152: LD_VAR 0 13
32156: PPUSH
32157: LD_VAR 0 11
32161: PPUSH
32162: LD_VAR 0 12
32166: PPUSH
32167: CALL_OW 111
// break ;
32171: GO 32175
// end ; end ;
32173: GO 32060
32175: POP
32176: POP
// end ; end ;
32177: GO 31502
32179: POP
32180: POP
// end ;
32181: LD_VAR 0 8
32185: RET
// export function BuildingTechInvented ( side , btype ) ; begin
32186: LD_INT 0
32188: PPUSH
// result := true ;
32189: LD_ADDR_VAR 0 3
32193: PUSH
32194: LD_INT 1
32196: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
32197: LD_VAR 0 2
32201: PUSH
32202: LD_INT 24
32204: DOUBLE
32205: EQUAL
32206: IFTRUE 32216
32208: LD_INT 33
32210: DOUBLE
32211: EQUAL
32212: IFTRUE 32216
32214: GO 32241
32216: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
32217: LD_ADDR_VAR 0 3
32221: PUSH
32222: LD_INT 32
32224: PPUSH
32225: LD_VAR 0 1
32229: PPUSH
32230: CALL_OW 321
32234: PUSH
32235: LD_INT 2
32237: EQUAL
32238: ST_TO_ADDR
32239: GO 32561
32241: LD_INT 20
32243: DOUBLE
32244: EQUAL
32245: IFTRUE 32249
32247: GO 32274
32249: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
32250: LD_ADDR_VAR 0 3
32254: PUSH
32255: LD_INT 6
32257: PPUSH
32258: LD_VAR 0 1
32262: PPUSH
32263: CALL_OW 321
32267: PUSH
32268: LD_INT 2
32270: EQUAL
32271: ST_TO_ADDR
32272: GO 32561
32274: LD_INT 22
32276: DOUBLE
32277: EQUAL
32278: IFTRUE 32288
32280: LD_INT 36
32282: DOUBLE
32283: EQUAL
32284: IFTRUE 32288
32286: GO 32313
32288: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
32289: LD_ADDR_VAR 0 3
32293: PUSH
32294: LD_INT 15
32296: PPUSH
32297: LD_VAR 0 1
32301: PPUSH
32302: CALL_OW 321
32306: PUSH
32307: LD_INT 2
32309: EQUAL
32310: ST_TO_ADDR
32311: GO 32561
32313: LD_INT 30
32315: DOUBLE
32316: EQUAL
32317: IFTRUE 32321
32319: GO 32346
32321: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
32322: LD_ADDR_VAR 0 3
32326: PUSH
32327: LD_INT 20
32329: PPUSH
32330: LD_VAR 0 1
32334: PPUSH
32335: CALL_OW 321
32339: PUSH
32340: LD_INT 2
32342: EQUAL
32343: ST_TO_ADDR
32344: GO 32561
32346: LD_INT 28
32348: DOUBLE
32349: EQUAL
32350: IFTRUE 32360
32352: LD_INT 21
32354: DOUBLE
32355: EQUAL
32356: IFTRUE 32360
32358: GO 32385
32360: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
32361: LD_ADDR_VAR 0 3
32365: PUSH
32366: LD_INT 21
32368: PPUSH
32369: LD_VAR 0 1
32373: PPUSH
32374: CALL_OW 321
32378: PUSH
32379: LD_INT 2
32381: EQUAL
32382: ST_TO_ADDR
32383: GO 32561
32385: LD_INT 16
32387: DOUBLE
32388: EQUAL
32389: IFTRUE 32393
32391: GO 32420
32393: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
32394: LD_ADDR_VAR 0 3
32398: PUSH
32399: LD_EXP 83
32403: PPUSH
32404: LD_VAR 0 1
32408: PPUSH
32409: CALL_OW 321
32413: PUSH
32414: LD_INT 2
32416: EQUAL
32417: ST_TO_ADDR
32418: GO 32561
32420: LD_INT 19
32422: DOUBLE
32423: EQUAL
32424: IFTRUE 32434
32426: LD_INT 23
32428: DOUBLE
32429: EQUAL
32430: IFTRUE 32434
32432: GO 32461
32434: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
32435: LD_ADDR_VAR 0 3
32439: PUSH
32440: LD_EXP 82
32444: PPUSH
32445: LD_VAR 0 1
32449: PPUSH
32450: CALL_OW 321
32454: PUSH
32455: LD_INT 2
32457: EQUAL
32458: ST_TO_ADDR
32459: GO 32561
32461: LD_INT 17
32463: DOUBLE
32464: EQUAL
32465: IFTRUE 32469
32467: GO 32494
32469: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
32470: LD_ADDR_VAR 0 3
32474: PUSH
32475: LD_INT 39
32477: PPUSH
32478: LD_VAR 0 1
32482: PPUSH
32483: CALL_OW 321
32487: PUSH
32488: LD_INT 2
32490: EQUAL
32491: ST_TO_ADDR
32492: GO 32561
32494: LD_INT 18
32496: DOUBLE
32497: EQUAL
32498: IFTRUE 32502
32500: GO 32527
32502: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
32503: LD_ADDR_VAR 0 3
32507: PUSH
32508: LD_INT 40
32510: PPUSH
32511: LD_VAR 0 1
32515: PPUSH
32516: CALL_OW 321
32520: PUSH
32521: LD_INT 2
32523: EQUAL
32524: ST_TO_ADDR
32525: GO 32561
32527: LD_INT 27
32529: DOUBLE
32530: EQUAL
32531: IFTRUE 32535
32533: GO 32560
32535: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
32536: LD_ADDR_VAR 0 3
32540: PUSH
32541: LD_INT 35
32543: PPUSH
32544: LD_VAR 0 1
32548: PPUSH
32549: CALL_OW 321
32553: PUSH
32554: LD_INT 2
32556: EQUAL
32557: ST_TO_ADDR
32558: GO 32561
32560: POP
// end ;
32561: LD_VAR 0 3
32565: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
32566: LD_INT 0
32568: PPUSH
32569: PPUSH
32570: PPUSH
32571: PPUSH
32572: PPUSH
32573: PPUSH
32574: PPUSH
32575: PPUSH
32576: PPUSH
32577: PPUSH
32578: PPUSH
// result := false ;
32579: LD_ADDR_VAR 0 6
32583: PUSH
32584: LD_INT 0
32586: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
32587: LD_VAR 0 1
32591: NOT
32592: PUSH
32593: LD_VAR 0 1
32597: PPUSH
32598: CALL_OW 266
32602: PUSH
32603: LD_INT 0
32605: PUSH
32606: LD_INT 1
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: IN
32613: NOT
32614: OR
32615: PUSH
32616: LD_VAR 0 2
32620: NOT
32621: OR
32622: PUSH
32623: LD_VAR 0 5
32627: PUSH
32628: LD_INT 0
32630: PUSH
32631: LD_INT 1
32633: PUSH
32634: LD_INT 2
32636: PUSH
32637: LD_INT 3
32639: PUSH
32640: LD_INT 4
32642: PUSH
32643: LD_INT 5
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: IN
32654: NOT
32655: OR
32656: PUSH
32657: LD_VAR 0 3
32661: PPUSH
32662: LD_VAR 0 4
32666: PPUSH
32667: CALL_OW 488
32671: NOT
32672: OR
32673: IFFALSE 32677
// exit ;
32675: GO 33413
// side := GetSide ( depot ) ;
32677: LD_ADDR_VAR 0 9
32681: PUSH
32682: LD_VAR 0 1
32686: PPUSH
32687: CALL_OW 255
32691: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
32692: LD_VAR 0 9
32696: PPUSH
32697: LD_VAR 0 2
32701: PPUSH
32702: CALL 32186 0 2
32706: NOT
32707: IFFALSE 32711
// exit ;
32709: GO 33413
// pom := GetBase ( depot ) ;
32711: LD_ADDR_VAR 0 10
32715: PUSH
32716: LD_VAR 0 1
32720: PPUSH
32721: CALL_OW 274
32725: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
32726: LD_ADDR_VAR 0 11
32730: PUSH
32731: LD_VAR 0 2
32735: PPUSH
32736: LD_VAR 0 1
32740: PPUSH
32741: CALL_OW 248
32745: PPUSH
32746: CALL_OW 450
32750: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
32751: LD_VAR 0 10
32755: PPUSH
32756: LD_INT 1
32758: PPUSH
32759: CALL_OW 275
32763: PUSH
32764: LD_VAR 0 11
32768: PUSH
32769: LD_INT 1
32771: ARRAY
32772: GREATEREQUAL
32773: PUSH
32774: LD_VAR 0 10
32778: PPUSH
32779: LD_INT 2
32781: PPUSH
32782: CALL_OW 275
32786: PUSH
32787: LD_VAR 0 11
32791: PUSH
32792: LD_INT 2
32794: ARRAY
32795: GREATEREQUAL
32796: AND
32797: PUSH
32798: LD_VAR 0 10
32802: PPUSH
32803: LD_INT 3
32805: PPUSH
32806: CALL_OW 275
32810: PUSH
32811: LD_VAR 0 11
32815: PUSH
32816: LD_INT 3
32818: ARRAY
32819: GREATEREQUAL
32820: AND
32821: NOT
32822: IFFALSE 32826
// exit ;
32824: GO 33413
// if GetBType ( depot ) = b_depot then
32826: LD_VAR 0 1
32830: PPUSH
32831: CALL_OW 266
32835: PUSH
32836: LD_INT 0
32838: EQUAL
32839: IFFALSE 32851
// dist := 28 else
32841: LD_ADDR_VAR 0 14
32845: PUSH
32846: LD_INT 28
32848: ST_TO_ADDR
32849: GO 32859
// dist := 36 ;
32851: LD_ADDR_VAR 0 14
32855: PUSH
32856: LD_INT 36
32858: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
32859: LD_VAR 0 1
32863: PPUSH
32864: LD_VAR 0 3
32868: PPUSH
32869: LD_VAR 0 4
32873: PPUSH
32874: CALL_OW 297
32878: PUSH
32879: LD_VAR 0 14
32883: GREATER
32884: IFFALSE 32888
// exit ;
32886: GO 33413
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
32888: LD_ADDR_VAR 0 12
32892: PUSH
32893: LD_VAR 0 2
32897: PPUSH
32898: LD_VAR 0 3
32902: PPUSH
32903: LD_VAR 0 4
32907: PPUSH
32908: LD_VAR 0 5
32912: PPUSH
32913: LD_VAR 0 1
32917: PPUSH
32918: CALL_OW 248
32922: PPUSH
32923: LD_INT 0
32925: PPUSH
32926: CALL 33418 0 6
32930: ST_TO_ADDR
// if not hexes then
32931: LD_VAR 0 12
32935: NOT
32936: IFFALSE 32940
// exit ;
32938: GO 33413
// hex := GetHexInfo ( x , y ) ;
32940: LD_ADDR_VAR 0 15
32944: PUSH
32945: LD_VAR 0 3
32949: PPUSH
32950: LD_VAR 0 4
32954: PPUSH
32955: CALL_OW 546
32959: ST_TO_ADDR
// if hex [ 1 ] then
32960: LD_VAR 0 15
32964: PUSH
32965: LD_INT 1
32967: ARRAY
32968: IFFALSE 32972
// exit ;
32970: GO 33413
// height := hex [ 2 ] ;
32972: LD_ADDR_VAR 0 13
32976: PUSH
32977: LD_VAR 0 15
32981: PUSH
32982: LD_INT 2
32984: ARRAY
32985: ST_TO_ADDR
// for i = 1 to hexes do
32986: LD_ADDR_VAR 0 7
32990: PUSH
32991: DOUBLE
32992: LD_INT 1
32994: DEC
32995: ST_TO_ADDR
32996: LD_VAR 0 12
33000: PUSH
33001: FOR_TO
33002: IFFALSE 33332
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33004: LD_VAR 0 12
33008: PUSH
33009: LD_VAR 0 7
33013: ARRAY
33014: PUSH
33015: LD_INT 1
33017: ARRAY
33018: PPUSH
33019: LD_VAR 0 12
33023: PUSH
33024: LD_VAR 0 7
33028: ARRAY
33029: PUSH
33030: LD_INT 2
33032: ARRAY
33033: PPUSH
33034: CALL_OW 488
33038: NOT
33039: PUSH
33040: LD_VAR 0 12
33044: PUSH
33045: LD_VAR 0 7
33049: ARRAY
33050: PUSH
33051: LD_INT 1
33053: ARRAY
33054: PPUSH
33055: LD_VAR 0 12
33059: PUSH
33060: LD_VAR 0 7
33064: ARRAY
33065: PUSH
33066: LD_INT 2
33068: ARRAY
33069: PPUSH
33070: CALL_OW 428
33074: PUSH
33075: LD_INT 0
33077: GREATER
33078: OR
33079: PUSH
33080: LD_VAR 0 12
33084: PUSH
33085: LD_VAR 0 7
33089: ARRAY
33090: PUSH
33091: LD_INT 1
33093: ARRAY
33094: PPUSH
33095: LD_VAR 0 12
33099: PUSH
33100: LD_VAR 0 7
33104: ARRAY
33105: PUSH
33106: LD_INT 2
33108: ARRAY
33109: PPUSH
33110: CALL_OW 351
33114: OR
33115: IFFALSE 33121
// exit ;
33117: POP
33118: POP
33119: GO 33413
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33121: LD_ADDR_VAR 0 8
33125: PUSH
33126: LD_VAR 0 12
33130: PUSH
33131: LD_VAR 0 7
33135: ARRAY
33136: PUSH
33137: LD_INT 1
33139: ARRAY
33140: PPUSH
33141: LD_VAR 0 12
33145: PUSH
33146: LD_VAR 0 7
33150: ARRAY
33151: PUSH
33152: LD_INT 2
33154: ARRAY
33155: PPUSH
33156: CALL_OW 546
33160: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33161: LD_VAR 0 8
33165: PUSH
33166: LD_INT 1
33168: ARRAY
33169: PUSH
33170: LD_VAR 0 8
33174: PUSH
33175: LD_INT 2
33177: ARRAY
33178: PUSH
33179: LD_VAR 0 13
33183: PUSH
33184: LD_INT 2
33186: PLUS
33187: GREATER
33188: OR
33189: PUSH
33190: LD_VAR 0 8
33194: PUSH
33195: LD_INT 2
33197: ARRAY
33198: PUSH
33199: LD_VAR 0 13
33203: PUSH
33204: LD_INT 2
33206: MINUS
33207: LESS
33208: OR
33209: PUSH
33210: LD_VAR 0 8
33214: PUSH
33215: LD_INT 3
33217: ARRAY
33218: PUSH
33219: LD_INT 0
33221: PUSH
33222: LD_INT 8
33224: PUSH
33225: LD_INT 9
33227: PUSH
33228: LD_INT 10
33230: PUSH
33231: LD_INT 11
33233: PUSH
33234: LD_INT 12
33236: PUSH
33237: LD_INT 13
33239: PUSH
33240: LD_INT 16
33242: PUSH
33243: LD_INT 17
33245: PUSH
33246: LD_INT 18
33248: PUSH
33249: LD_INT 19
33251: PUSH
33252: LD_INT 20
33254: PUSH
33255: LD_INT 21
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: IN
33273: NOT
33274: OR
33275: PUSH
33276: LD_VAR 0 8
33280: PUSH
33281: LD_INT 5
33283: ARRAY
33284: NOT
33285: OR
33286: PUSH
33287: LD_VAR 0 8
33291: PUSH
33292: LD_INT 6
33294: ARRAY
33295: PUSH
33296: LD_INT 1
33298: PUSH
33299: LD_INT 2
33301: PUSH
33302: LD_INT 7
33304: PUSH
33305: LD_INT 9
33307: PUSH
33308: LD_INT 10
33310: PUSH
33311: LD_INT 11
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: IN
33322: NOT
33323: OR
33324: IFFALSE 33330
// exit ;
33326: POP
33327: POP
33328: GO 33413
// end ;
33330: GO 33001
33332: POP
33333: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33334: LD_VAR 0 9
33338: PPUSH
33339: LD_VAR 0 3
33343: PPUSH
33344: LD_VAR 0 4
33348: PPUSH
33349: LD_INT 20
33351: PPUSH
33352: CALL 25359 0 4
33356: PUSH
33357: LD_INT 4
33359: ARRAY
33360: IFFALSE 33364
// exit ;
33362: GO 33413
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33364: LD_VAR 0 2
33368: PUSH
33369: LD_INT 29
33371: PUSH
33372: LD_INT 30
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: IN
33379: PUSH
33380: LD_VAR 0 3
33384: PPUSH
33385: LD_VAR 0 4
33389: PPUSH
33390: LD_VAR 0 9
33394: PPUSH
33395: CALL_OW 440
33399: NOT
33400: AND
33401: IFFALSE 33405
// exit ;
33403: GO 33413
// result := true ;
33405: LD_ADDR_VAR 0 6
33409: PUSH
33410: LD_INT 1
33412: ST_TO_ADDR
// end ;
33413: LD_VAR 0 6
33417: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
33418: LD_INT 0
33420: PPUSH
33421: PPUSH
33422: PPUSH
33423: PPUSH
33424: PPUSH
33425: PPUSH
33426: PPUSH
33427: PPUSH
33428: PPUSH
33429: PPUSH
33430: PPUSH
33431: PPUSH
33432: PPUSH
33433: PPUSH
33434: PPUSH
33435: PPUSH
33436: PPUSH
33437: PPUSH
33438: PPUSH
33439: PPUSH
33440: PPUSH
33441: PPUSH
33442: PPUSH
33443: PPUSH
33444: PPUSH
33445: PPUSH
33446: PPUSH
33447: PPUSH
33448: PPUSH
33449: PPUSH
33450: PPUSH
33451: PPUSH
33452: PPUSH
33453: PPUSH
33454: PPUSH
33455: PPUSH
33456: PPUSH
33457: PPUSH
33458: PPUSH
33459: PPUSH
33460: PPUSH
33461: PPUSH
33462: PPUSH
33463: PPUSH
33464: PPUSH
33465: PPUSH
33466: PPUSH
33467: PPUSH
33468: PPUSH
33469: PPUSH
33470: PPUSH
33471: PPUSH
33472: PPUSH
33473: PPUSH
33474: PPUSH
33475: PPUSH
33476: PPUSH
33477: PPUSH
// result = [ ] ;
33478: LD_ADDR_VAR 0 7
33482: PUSH
33483: EMPTY
33484: ST_TO_ADDR
// temp_list = [ ] ;
33485: LD_ADDR_VAR 0 9
33489: PUSH
33490: EMPTY
33491: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
33492: LD_VAR 0 4
33496: PUSH
33497: LD_INT 0
33499: PUSH
33500: LD_INT 1
33502: PUSH
33503: LD_INT 2
33505: PUSH
33506: LD_INT 3
33508: PUSH
33509: LD_INT 4
33511: PUSH
33512: LD_INT 5
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: IN
33523: NOT
33524: PUSH
33525: LD_VAR 0 1
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: LD_INT 1
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: IN
33540: PUSH
33541: LD_VAR 0 5
33545: PUSH
33546: LD_INT 1
33548: PUSH
33549: LD_INT 2
33551: PUSH
33552: LD_INT 3
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: LIST
33559: IN
33560: NOT
33561: AND
33562: OR
33563: IFFALSE 33567
// exit ;
33565: GO 51958
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
33567: LD_VAR 0 1
33571: PUSH
33572: LD_INT 6
33574: PUSH
33575: LD_INT 7
33577: PUSH
33578: LD_INT 8
33580: PUSH
33581: LD_INT 13
33583: PUSH
33584: LD_INT 12
33586: PUSH
33587: LD_INT 15
33589: PUSH
33590: LD_INT 11
33592: PUSH
33593: LD_INT 14
33595: PUSH
33596: LD_INT 10
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: IN
33610: IFFALSE 33620
// btype = b_lab ;
33612: LD_ADDR_VAR 0 1
33616: PUSH
33617: LD_INT 6
33619: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
33620: LD_VAR 0 6
33624: PUSH
33625: LD_INT 0
33627: PUSH
33628: LD_INT 1
33630: PUSH
33631: LD_INT 2
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: LIST
33638: IN
33639: NOT
33640: PUSH
33641: LD_VAR 0 1
33645: PUSH
33646: LD_INT 0
33648: PUSH
33649: LD_INT 1
33651: PUSH
33652: LD_INT 2
33654: PUSH
33655: LD_INT 3
33657: PUSH
33658: LD_INT 6
33660: PUSH
33661: LD_INT 36
33663: PUSH
33664: LD_INT 4
33666: PUSH
33667: LD_INT 5
33669: PUSH
33670: LD_INT 31
33672: PUSH
33673: LD_INT 32
33675: PUSH
33676: LD_INT 33
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: IN
33692: NOT
33693: PUSH
33694: LD_VAR 0 6
33698: PUSH
33699: LD_INT 1
33701: EQUAL
33702: AND
33703: OR
33704: PUSH
33705: LD_VAR 0 1
33709: PUSH
33710: LD_INT 2
33712: PUSH
33713: LD_INT 3
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: IN
33720: NOT
33721: PUSH
33722: LD_VAR 0 6
33726: PUSH
33727: LD_INT 2
33729: EQUAL
33730: AND
33731: OR
33732: IFFALSE 33742
// mode = 0 ;
33734: LD_ADDR_VAR 0 6
33738: PUSH
33739: LD_INT 0
33741: ST_TO_ADDR
// case mode of 0 :
33742: LD_VAR 0 6
33746: PUSH
33747: LD_INT 0
33749: DOUBLE
33750: EQUAL
33751: IFTRUE 33755
33753: GO 45208
33755: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33756: LD_ADDR_VAR 0 11
33760: PUSH
33761: LD_INT 0
33763: PUSH
33764: LD_INT 0
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 0
33773: PUSH
33774: LD_INT 1
33776: NEG
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: PUSH
33782: LD_INT 1
33784: PUSH
33785: LD_INT 0
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 1
33794: PUSH
33795: LD_INT 1
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 0
33804: PUSH
33805: LD_INT 1
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 1
33814: NEG
33815: PUSH
33816: LD_INT 0
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 1
33825: NEG
33826: PUSH
33827: LD_INT 1
33829: NEG
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 1
33837: NEG
33838: PUSH
33839: LD_INT 2
33841: NEG
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 0
33849: PUSH
33850: LD_INT 2
33852: NEG
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 1
33860: PUSH
33861: LD_INT 1
33863: NEG
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 1
33871: PUSH
33872: LD_INT 2
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 0
33881: PUSH
33882: LD_INT 2
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 1
33891: NEG
33892: PUSH
33893: LD_INT 1
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 1
33902: PUSH
33903: LD_INT 3
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 0
33912: PUSH
33913: LD_INT 3
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 1
33922: NEG
33923: PUSH
33924: LD_INT 2
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33949: LD_ADDR_VAR 0 12
33953: PUSH
33954: LD_INT 0
33956: PUSH
33957: LD_INT 0
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 0
33966: PUSH
33967: LD_INT 1
33969: NEG
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 1
33977: PUSH
33978: LD_INT 0
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 1
33987: PUSH
33988: LD_INT 1
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 0
33997: PUSH
33998: LD_INT 1
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 1
34007: NEG
34008: PUSH
34009: LD_INT 0
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 1
34018: NEG
34019: PUSH
34020: LD_INT 1
34022: NEG
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 1
34030: PUSH
34031: LD_INT 1
34033: NEG
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 2
34041: PUSH
34042: LD_INT 0
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 2
34051: PUSH
34052: LD_INT 1
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 1
34061: NEG
34062: PUSH
34063: LD_INT 1
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 2
34072: NEG
34073: PUSH
34074: LD_INT 0
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 2
34083: NEG
34084: PUSH
34085: LD_INT 1
34087: NEG
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 2
34095: NEG
34096: PUSH
34097: LD_INT 1
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 3
34106: NEG
34107: PUSH
34108: LD_INT 0
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 3
34117: NEG
34118: PUSH
34119: LD_INT 1
34121: NEG
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34145: LD_ADDR_VAR 0 13
34149: PUSH
34150: LD_INT 0
34152: PUSH
34153: LD_INT 0
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 0
34162: PUSH
34163: LD_INT 1
34165: NEG
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 1
34173: PUSH
34174: LD_INT 0
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 1
34183: PUSH
34184: LD_INT 1
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 0
34193: PUSH
34194: LD_INT 1
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 1
34203: NEG
34204: PUSH
34205: LD_INT 0
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 1
34214: NEG
34215: PUSH
34216: LD_INT 1
34218: NEG
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 1
34226: NEG
34227: PUSH
34228: LD_INT 2
34230: NEG
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 2
34238: PUSH
34239: LD_INT 1
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 2
34248: PUSH
34249: LD_INT 2
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 1
34258: PUSH
34259: LD_INT 2
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 2
34268: NEG
34269: PUSH
34270: LD_INT 1
34272: NEG
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 2
34280: NEG
34281: PUSH
34282: LD_INT 2
34284: NEG
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 2
34292: NEG
34293: PUSH
34294: LD_INT 3
34296: NEG
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 3
34304: NEG
34305: PUSH
34306: LD_INT 2
34308: NEG
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 3
34316: NEG
34317: PUSH
34318: LD_INT 3
34320: NEG
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34344: LD_ADDR_VAR 0 14
34348: PUSH
34349: LD_INT 0
34351: PUSH
34352: LD_INT 0
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 0
34361: PUSH
34362: LD_INT 1
34364: NEG
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 1
34372: PUSH
34373: LD_INT 0
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 1
34382: PUSH
34383: LD_INT 1
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 0
34392: PUSH
34393: LD_INT 1
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 1
34402: NEG
34403: PUSH
34404: LD_INT 0
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 1
34413: NEG
34414: PUSH
34415: LD_INT 1
34417: NEG
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 1
34425: NEG
34426: PUSH
34427: LD_INT 2
34429: NEG
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 0
34437: PUSH
34438: LD_INT 2
34440: NEG
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 1
34448: PUSH
34449: LD_INT 1
34451: NEG
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_INT 1
34459: PUSH
34460: LD_INT 2
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: LD_INT 0
34469: PUSH
34470: LD_INT 2
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 1
34479: NEG
34480: PUSH
34481: LD_INT 1
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 1
34490: NEG
34491: PUSH
34492: LD_INT 3
34494: NEG
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 0
34502: PUSH
34503: LD_INT 3
34505: NEG
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 1
34513: PUSH
34514: LD_INT 2
34516: NEG
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34540: LD_ADDR_VAR 0 15
34544: PUSH
34545: LD_INT 0
34547: PUSH
34548: LD_INT 0
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 0
34557: PUSH
34558: LD_INT 1
34560: NEG
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 1
34568: PUSH
34569: LD_INT 0
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 1
34578: PUSH
34579: LD_INT 1
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 0
34588: PUSH
34589: LD_INT 1
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 1
34598: NEG
34599: PUSH
34600: LD_INT 0
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 1
34609: NEG
34610: PUSH
34611: LD_INT 1
34613: NEG
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 1
34621: PUSH
34622: LD_INT 1
34624: NEG
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 2
34632: PUSH
34633: LD_INT 0
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 2
34642: PUSH
34643: LD_INT 1
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 1
34652: NEG
34653: PUSH
34654: LD_INT 1
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 2
34663: NEG
34664: PUSH
34665: LD_INT 0
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 2
34674: NEG
34675: PUSH
34676: LD_INT 1
34678: NEG
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 2
34686: PUSH
34687: LD_INT 1
34689: NEG
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 3
34697: PUSH
34698: LD_INT 0
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 3
34707: PUSH
34708: LD_INT 1
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34733: LD_ADDR_VAR 0 16
34737: PUSH
34738: LD_INT 0
34740: PUSH
34741: LD_INT 0
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 0
34750: PUSH
34751: LD_INT 1
34753: NEG
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: LD_INT 1
34761: PUSH
34762: LD_INT 0
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 1
34771: PUSH
34772: LD_INT 1
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 0
34781: PUSH
34782: LD_INT 1
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 1
34791: NEG
34792: PUSH
34793: LD_INT 0
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 1
34802: NEG
34803: PUSH
34804: LD_INT 1
34806: NEG
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 1
34814: NEG
34815: PUSH
34816: LD_INT 2
34818: NEG
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 2
34826: PUSH
34827: LD_INT 1
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 2
34836: PUSH
34837: LD_INT 2
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 1
34846: PUSH
34847: LD_INT 2
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 2
34856: NEG
34857: PUSH
34858: LD_INT 1
34860: NEG
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 2
34868: NEG
34869: PUSH
34870: LD_INT 2
34872: NEG
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 3
34880: PUSH
34881: LD_INT 2
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 3
34890: PUSH
34891: LD_INT 3
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 2
34900: PUSH
34901: LD_INT 3
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34926: LD_ADDR_VAR 0 17
34930: PUSH
34931: LD_INT 0
34933: PUSH
34934: LD_INT 0
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 0
34943: PUSH
34944: LD_INT 1
34946: NEG
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 1
34954: PUSH
34955: LD_INT 0
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 1
34964: PUSH
34965: LD_INT 1
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 0
34974: PUSH
34975: LD_INT 1
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 1
34984: NEG
34985: PUSH
34986: LD_INT 0
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 1
34995: NEG
34996: PUSH
34997: LD_INT 1
34999: NEG
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 1
35007: NEG
35008: PUSH
35009: LD_INT 2
35011: NEG
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 0
35019: PUSH
35020: LD_INT 2
35022: NEG
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 1
35030: PUSH
35031: LD_INT 1
35033: NEG
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 2
35041: PUSH
35042: LD_INT 0
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 2
35051: PUSH
35052: LD_INT 1
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 2
35061: PUSH
35062: LD_INT 2
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 1
35071: PUSH
35072: LD_INT 2
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 0
35081: PUSH
35082: LD_INT 2
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 1
35091: NEG
35092: PUSH
35093: LD_INT 1
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 2
35102: NEG
35103: PUSH
35104: LD_INT 0
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 2
35113: NEG
35114: PUSH
35115: LD_INT 1
35117: NEG
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 2
35125: NEG
35126: PUSH
35127: LD_INT 2
35129: NEG
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35156: LD_ADDR_VAR 0 18
35160: PUSH
35161: LD_INT 0
35163: PUSH
35164: LD_INT 0
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 0
35173: PUSH
35174: LD_INT 1
35176: NEG
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 1
35184: PUSH
35185: LD_INT 0
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 1
35194: PUSH
35195: LD_INT 1
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 0
35204: PUSH
35205: LD_INT 1
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 1
35214: NEG
35215: PUSH
35216: LD_INT 0
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 1
35225: NEG
35226: PUSH
35227: LD_INT 1
35229: NEG
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 1
35237: NEG
35238: PUSH
35239: LD_INT 2
35241: NEG
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 0
35249: PUSH
35250: LD_INT 2
35252: NEG
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 1
35260: PUSH
35261: LD_INT 1
35263: NEG
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 2
35271: PUSH
35272: LD_INT 0
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 2
35281: PUSH
35282: LD_INT 1
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 2
35291: PUSH
35292: LD_INT 2
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 1
35301: PUSH
35302: LD_INT 2
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 0
35311: PUSH
35312: LD_INT 2
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 1
35321: NEG
35322: PUSH
35323: LD_INT 1
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 2
35332: NEG
35333: PUSH
35334: LD_INT 0
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 2
35343: NEG
35344: PUSH
35345: LD_INT 1
35347: NEG
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 2
35355: NEG
35356: PUSH
35357: LD_INT 2
35359: NEG
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35386: LD_ADDR_VAR 0 19
35390: PUSH
35391: LD_INT 0
35393: PUSH
35394: LD_INT 0
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 0
35403: PUSH
35404: LD_INT 1
35406: NEG
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 1
35414: PUSH
35415: LD_INT 0
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 1
35424: PUSH
35425: LD_INT 1
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 0
35434: PUSH
35435: LD_INT 1
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 1
35444: NEG
35445: PUSH
35446: LD_INT 0
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 1
35455: NEG
35456: PUSH
35457: LD_INT 1
35459: NEG
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 1
35467: NEG
35468: PUSH
35469: LD_INT 2
35471: NEG
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 0
35479: PUSH
35480: LD_INT 2
35482: NEG
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 1
35490: PUSH
35491: LD_INT 1
35493: NEG
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 2
35501: PUSH
35502: LD_INT 0
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 2
35511: PUSH
35512: LD_INT 1
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 2
35521: PUSH
35522: LD_INT 2
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 1
35531: PUSH
35532: LD_INT 2
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 0
35541: PUSH
35542: LD_INT 2
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 1
35551: NEG
35552: PUSH
35553: LD_INT 1
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 2
35562: NEG
35563: PUSH
35564: LD_INT 0
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 2
35573: NEG
35574: PUSH
35575: LD_INT 1
35577: NEG
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 2
35585: NEG
35586: PUSH
35587: LD_INT 2
35589: NEG
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35616: LD_ADDR_VAR 0 20
35620: PUSH
35621: LD_INT 0
35623: PUSH
35624: LD_INT 0
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 0
35633: PUSH
35634: LD_INT 1
35636: NEG
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 1
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 1
35654: PUSH
35655: LD_INT 1
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 0
35664: PUSH
35665: LD_INT 1
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 1
35674: NEG
35675: PUSH
35676: LD_INT 0
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 1
35685: NEG
35686: PUSH
35687: LD_INT 1
35689: NEG
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 1
35697: NEG
35698: PUSH
35699: LD_INT 2
35701: NEG
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 0
35709: PUSH
35710: LD_INT 2
35712: NEG
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 1
35720: PUSH
35721: LD_INT 1
35723: NEG
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 2
35731: PUSH
35732: LD_INT 0
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 2
35741: PUSH
35742: LD_INT 1
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 2
35751: PUSH
35752: LD_INT 2
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 1
35761: PUSH
35762: LD_INT 2
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 0
35771: PUSH
35772: LD_INT 2
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 1
35781: NEG
35782: PUSH
35783: LD_INT 1
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 2
35792: NEG
35793: PUSH
35794: LD_INT 0
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 2
35803: NEG
35804: PUSH
35805: LD_INT 1
35807: NEG
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 2
35815: NEG
35816: PUSH
35817: LD_INT 2
35819: NEG
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35846: LD_ADDR_VAR 0 21
35850: PUSH
35851: LD_INT 0
35853: PUSH
35854: LD_INT 0
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 0
35863: PUSH
35864: LD_INT 1
35866: NEG
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 1
35874: PUSH
35875: LD_INT 0
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 1
35884: PUSH
35885: LD_INT 1
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 0
35894: PUSH
35895: LD_INT 1
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 1
35904: NEG
35905: PUSH
35906: LD_INT 0
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 1
35915: NEG
35916: PUSH
35917: LD_INT 1
35919: NEG
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 1
35927: NEG
35928: PUSH
35929: LD_INT 2
35931: NEG
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 0
35939: PUSH
35940: LD_INT 2
35942: NEG
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 1
35950: PUSH
35951: LD_INT 1
35953: NEG
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 2
35961: PUSH
35962: LD_INT 0
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 2
35971: PUSH
35972: LD_INT 1
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 2
35981: PUSH
35982: LD_INT 2
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 1
35991: PUSH
35992: LD_INT 2
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 0
36001: PUSH
36002: LD_INT 2
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 1
36011: NEG
36012: PUSH
36013: LD_INT 1
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 2
36022: NEG
36023: PUSH
36024: LD_INT 0
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 2
36033: NEG
36034: PUSH
36035: LD_INT 1
36037: NEG
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 2
36045: NEG
36046: PUSH
36047: LD_INT 2
36049: NEG
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36076: LD_ADDR_VAR 0 22
36080: PUSH
36081: LD_INT 0
36083: PUSH
36084: LD_INT 0
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 0
36093: PUSH
36094: LD_INT 1
36096: NEG
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 1
36104: PUSH
36105: LD_INT 0
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 1
36114: PUSH
36115: LD_INT 1
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 0
36124: PUSH
36125: LD_INT 1
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 1
36134: NEG
36135: PUSH
36136: LD_INT 0
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 1
36145: NEG
36146: PUSH
36147: LD_INT 1
36149: NEG
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 1
36157: NEG
36158: PUSH
36159: LD_INT 2
36161: NEG
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 0
36169: PUSH
36170: LD_INT 2
36172: NEG
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 1
36180: PUSH
36181: LD_INT 1
36183: NEG
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 2
36191: PUSH
36192: LD_INT 0
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 2
36201: PUSH
36202: LD_INT 1
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 2
36211: PUSH
36212: LD_INT 2
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 1
36221: PUSH
36222: LD_INT 2
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 0
36231: PUSH
36232: LD_INT 2
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: LD_INT 1
36241: NEG
36242: PUSH
36243: LD_INT 1
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 2
36252: NEG
36253: PUSH
36254: LD_INT 0
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 2
36263: NEG
36264: PUSH
36265: LD_INT 1
36267: NEG
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 2
36275: NEG
36276: PUSH
36277: LD_INT 2
36279: NEG
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36306: LD_ADDR_VAR 0 23
36310: PUSH
36311: LD_INT 0
36313: PUSH
36314: LD_INT 0
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 0
36323: PUSH
36324: LD_INT 1
36326: NEG
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 1
36334: PUSH
36335: LD_INT 0
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: PUSH
36342: LD_INT 1
36344: PUSH
36345: LD_INT 1
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 0
36354: PUSH
36355: LD_INT 1
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 1
36364: NEG
36365: PUSH
36366: LD_INT 0
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 1
36375: NEG
36376: PUSH
36377: LD_INT 1
36379: NEG
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 1
36387: NEG
36388: PUSH
36389: LD_INT 2
36391: NEG
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 0
36399: PUSH
36400: LD_INT 2
36402: NEG
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_INT 1
36410: PUSH
36411: LD_INT 1
36413: NEG
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 2
36421: PUSH
36422: LD_INT 0
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 2
36431: PUSH
36432: LD_INT 1
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 2
36441: PUSH
36442: LD_INT 2
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 1
36451: PUSH
36452: LD_INT 2
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 0
36461: PUSH
36462: LD_INT 2
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 1
36471: NEG
36472: PUSH
36473: LD_INT 1
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 2
36482: NEG
36483: PUSH
36484: LD_INT 0
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 2
36493: NEG
36494: PUSH
36495: LD_INT 1
36497: NEG
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 2
36505: NEG
36506: PUSH
36507: LD_INT 2
36509: NEG
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 2
36517: NEG
36518: PUSH
36519: LD_INT 3
36521: NEG
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 1
36529: NEG
36530: PUSH
36531: LD_INT 3
36533: NEG
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 1
36541: PUSH
36542: LD_INT 2
36544: NEG
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 2
36552: PUSH
36553: LD_INT 1
36555: NEG
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
36586: LD_ADDR_VAR 0 24
36590: PUSH
36591: LD_INT 0
36593: PUSH
36594: LD_INT 0
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 0
36603: PUSH
36604: LD_INT 1
36606: NEG
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 1
36614: PUSH
36615: LD_INT 0
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 1
36624: PUSH
36625: LD_INT 1
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 0
36634: PUSH
36635: LD_INT 1
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 1
36644: NEG
36645: PUSH
36646: LD_INT 0
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 1
36655: NEG
36656: PUSH
36657: LD_INT 1
36659: NEG
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 1
36667: NEG
36668: PUSH
36669: LD_INT 2
36671: NEG
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 0
36679: PUSH
36680: LD_INT 2
36682: NEG
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 1
36690: PUSH
36691: LD_INT 1
36693: NEG
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 2
36701: PUSH
36702: LD_INT 0
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 2
36711: PUSH
36712: LD_INT 1
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 2
36721: PUSH
36722: LD_INT 2
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 1
36731: PUSH
36732: LD_INT 2
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 0
36741: PUSH
36742: LD_INT 2
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: LD_INT 1
36751: NEG
36752: PUSH
36753: LD_INT 1
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 2
36762: NEG
36763: PUSH
36764: LD_INT 0
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 2
36773: NEG
36774: PUSH
36775: LD_INT 1
36777: NEG
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 2
36785: NEG
36786: PUSH
36787: LD_INT 2
36789: NEG
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 1
36797: PUSH
36798: LD_INT 2
36800: NEG
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 2
36808: PUSH
36809: LD_INT 1
36811: NEG
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 3
36819: PUSH
36820: LD_INT 1
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 3
36829: PUSH
36830: LD_INT 2
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
36862: LD_ADDR_VAR 0 25
36866: PUSH
36867: LD_INT 0
36869: PUSH
36870: LD_INT 0
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: LD_INT 0
36879: PUSH
36880: LD_INT 1
36882: NEG
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 1
36890: PUSH
36891: LD_INT 0
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: LD_INT 1
36900: PUSH
36901: LD_INT 1
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: LD_INT 0
36910: PUSH
36911: LD_INT 1
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 1
36920: NEG
36921: PUSH
36922: LD_INT 0
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 1
36931: NEG
36932: PUSH
36933: LD_INT 1
36935: NEG
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 1
36943: NEG
36944: PUSH
36945: LD_INT 2
36947: NEG
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 0
36955: PUSH
36956: LD_INT 2
36958: NEG
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 1
36966: PUSH
36967: LD_INT 1
36969: NEG
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 2
36977: PUSH
36978: LD_INT 0
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 2
36987: PUSH
36988: LD_INT 1
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 2
36997: PUSH
36998: LD_INT 2
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 1
37007: PUSH
37008: LD_INT 2
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 0
37017: PUSH
37018: LD_INT 2
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 1
37027: NEG
37028: PUSH
37029: LD_INT 1
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 2
37038: NEG
37039: PUSH
37040: LD_INT 0
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 2
37049: NEG
37050: PUSH
37051: LD_INT 1
37053: NEG
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: LD_INT 2
37061: NEG
37062: PUSH
37063: LD_INT 2
37065: NEG
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 3
37073: PUSH
37074: LD_INT 1
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 3
37083: PUSH
37084: LD_INT 2
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 2
37093: PUSH
37094: LD_INT 3
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 1
37103: PUSH
37104: LD_INT 3
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37136: LD_ADDR_VAR 0 26
37140: PUSH
37141: LD_INT 0
37143: PUSH
37144: LD_INT 0
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 0
37153: PUSH
37154: LD_INT 1
37156: NEG
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 1
37164: PUSH
37165: LD_INT 0
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 1
37174: PUSH
37175: LD_INT 1
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 0
37184: PUSH
37185: LD_INT 1
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 1
37194: NEG
37195: PUSH
37196: LD_INT 0
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 1
37205: NEG
37206: PUSH
37207: LD_INT 1
37209: NEG
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 1
37217: NEG
37218: PUSH
37219: LD_INT 2
37221: NEG
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 0
37229: PUSH
37230: LD_INT 2
37232: NEG
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 1
37240: PUSH
37241: LD_INT 1
37243: NEG
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 2
37251: PUSH
37252: LD_INT 0
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 2
37261: PUSH
37262: LD_INT 1
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 2
37271: PUSH
37272: LD_INT 2
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 1
37281: PUSH
37282: LD_INT 2
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: LD_INT 0
37291: PUSH
37292: LD_INT 2
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 1
37301: NEG
37302: PUSH
37303: LD_INT 1
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 2
37312: NEG
37313: PUSH
37314: LD_INT 0
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 2
37323: NEG
37324: PUSH
37325: LD_INT 1
37327: NEG
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 2
37335: NEG
37336: PUSH
37337: LD_INT 2
37339: NEG
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 2
37347: PUSH
37348: LD_INT 3
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 1
37357: PUSH
37358: LD_INT 3
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 1
37367: NEG
37368: PUSH
37369: LD_INT 2
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 2
37378: NEG
37379: PUSH
37380: LD_INT 1
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37412: LD_ADDR_VAR 0 27
37416: PUSH
37417: LD_INT 0
37419: PUSH
37420: LD_INT 0
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 0
37429: PUSH
37430: LD_INT 1
37432: NEG
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 1
37440: PUSH
37441: LD_INT 0
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 1
37450: PUSH
37451: LD_INT 1
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 0
37460: PUSH
37461: LD_INT 1
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 1
37470: NEG
37471: PUSH
37472: LD_INT 0
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 1
37481: NEG
37482: PUSH
37483: LD_INT 1
37485: NEG
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 1
37493: NEG
37494: PUSH
37495: LD_INT 2
37497: NEG
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: LD_INT 2
37508: NEG
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 1
37516: PUSH
37517: LD_INT 1
37519: NEG
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 2
37527: PUSH
37528: LD_INT 0
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 2
37537: PUSH
37538: LD_INT 1
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 2
37547: PUSH
37548: LD_INT 2
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 1
37557: PUSH
37558: LD_INT 2
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 0
37567: PUSH
37568: LD_INT 2
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 1
37577: NEG
37578: PUSH
37579: LD_INT 1
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 2
37588: NEG
37589: PUSH
37590: LD_INT 0
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 2
37599: NEG
37600: PUSH
37601: LD_INT 1
37603: NEG
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 2
37611: NEG
37612: PUSH
37613: LD_INT 2
37615: NEG
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 1
37623: NEG
37624: PUSH
37625: LD_INT 2
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 2
37634: NEG
37635: PUSH
37636: LD_INT 1
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 3
37645: NEG
37646: PUSH
37647: LD_INT 1
37649: NEG
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 3
37657: NEG
37658: PUSH
37659: LD_INT 2
37661: NEG
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37692: LD_ADDR_VAR 0 28
37696: PUSH
37697: LD_INT 0
37699: PUSH
37700: LD_INT 0
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 0
37709: PUSH
37710: LD_INT 1
37712: NEG
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 1
37720: PUSH
37721: LD_INT 0
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 1
37730: PUSH
37731: LD_INT 1
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 0
37740: PUSH
37741: LD_INT 1
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 1
37750: NEG
37751: PUSH
37752: LD_INT 0
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 1
37761: NEG
37762: PUSH
37763: LD_INT 1
37765: NEG
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PUSH
37771: LD_INT 1
37773: NEG
37774: PUSH
37775: LD_INT 2
37777: NEG
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 0
37785: PUSH
37786: LD_INT 2
37788: NEG
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 1
37796: PUSH
37797: LD_INT 1
37799: NEG
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 2
37807: PUSH
37808: LD_INT 0
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 2
37817: PUSH
37818: LD_INT 1
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 2
37827: PUSH
37828: LD_INT 2
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 1
37837: PUSH
37838: LD_INT 2
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 0
37847: PUSH
37848: LD_INT 2
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 1
37857: NEG
37858: PUSH
37859: LD_INT 1
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 2
37868: NEG
37869: PUSH
37870: LD_INT 0
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 2
37879: NEG
37880: PUSH
37881: LD_INT 1
37883: NEG
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 2
37891: NEG
37892: PUSH
37893: LD_INT 2
37895: NEG
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 2
37903: NEG
37904: PUSH
37905: LD_INT 3
37907: NEG
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 1
37915: NEG
37916: PUSH
37917: LD_INT 3
37919: NEG
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: LD_INT 3
37927: NEG
37928: PUSH
37929: LD_INT 1
37931: NEG
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 3
37939: NEG
37940: PUSH
37941: LD_INT 2
37943: NEG
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37974: LD_ADDR_VAR 0 29
37978: PUSH
37979: LD_INT 0
37981: PUSH
37982: LD_INT 0
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 0
37991: PUSH
37992: LD_INT 1
37994: NEG
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 1
38002: PUSH
38003: LD_INT 0
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: LD_INT 1
38012: PUSH
38013: LD_INT 1
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 0
38022: PUSH
38023: LD_INT 1
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 1
38032: NEG
38033: PUSH
38034: LD_INT 0
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 1
38043: NEG
38044: PUSH
38045: LD_INT 1
38047: NEG
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 1
38055: NEG
38056: PUSH
38057: LD_INT 2
38059: NEG
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 0
38067: PUSH
38068: LD_INT 2
38070: NEG
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 1
38078: PUSH
38079: LD_INT 1
38081: NEG
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 2
38089: PUSH
38090: LD_INT 0
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 2
38099: PUSH
38100: LD_INT 1
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 1
38109: PUSH
38110: LD_INT 2
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 0
38119: PUSH
38120: LD_INT 2
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 1
38129: NEG
38130: PUSH
38131: LD_INT 1
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 2
38140: NEG
38141: PUSH
38142: LD_INT 1
38144: NEG
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 2
38152: NEG
38153: PUSH
38154: LD_INT 2
38156: NEG
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 2
38164: NEG
38165: PUSH
38166: LD_INT 3
38168: NEG
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 2
38176: PUSH
38177: LD_INT 1
38179: NEG
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 3
38187: PUSH
38188: LD_INT 1
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 1
38197: PUSH
38198: LD_INT 3
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 1
38207: NEG
38208: PUSH
38209: LD_INT 2
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 3
38218: NEG
38219: PUSH
38220: LD_INT 2
38222: NEG
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38253: LD_ADDR_VAR 0 30
38257: PUSH
38258: LD_INT 0
38260: PUSH
38261: LD_INT 0
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 0
38270: PUSH
38271: LD_INT 1
38273: NEG
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 1
38281: PUSH
38282: LD_INT 0
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 1
38291: PUSH
38292: LD_INT 1
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 0
38301: PUSH
38302: LD_INT 1
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 1
38311: NEG
38312: PUSH
38313: LD_INT 0
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 1
38322: NEG
38323: PUSH
38324: LD_INT 1
38326: NEG
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 1
38334: NEG
38335: PUSH
38336: LD_INT 2
38338: NEG
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 0
38346: PUSH
38347: LD_INT 2
38349: NEG
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 1
38357: PUSH
38358: LD_INT 1
38360: NEG
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 2
38368: PUSH
38369: LD_INT 0
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 2
38378: PUSH
38379: LD_INT 1
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 2
38388: PUSH
38389: LD_INT 2
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 1
38398: PUSH
38399: LD_INT 2
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 1
38408: NEG
38409: PUSH
38410: LD_INT 1
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 2
38419: NEG
38420: PUSH
38421: LD_INT 0
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 2
38430: NEG
38431: PUSH
38432: LD_INT 1
38434: NEG
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 1
38442: NEG
38443: PUSH
38444: LD_INT 3
38446: NEG
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 1
38454: PUSH
38455: LD_INT 2
38457: NEG
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 3
38465: PUSH
38466: LD_INT 2
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 2
38475: PUSH
38476: LD_INT 3
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 2
38485: NEG
38486: PUSH
38487: LD_INT 1
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 3
38496: NEG
38497: PUSH
38498: LD_INT 1
38500: NEG
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38531: LD_ADDR_VAR 0 31
38535: PUSH
38536: LD_INT 0
38538: PUSH
38539: LD_INT 0
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 0
38548: PUSH
38549: LD_INT 1
38551: NEG
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 1
38559: PUSH
38560: LD_INT 0
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 1
38569: PUSH
38570: LD_INT 1
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 0
38579: PUSH
38580: LD_INT 1
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 1
38589: NEG
38590: PUSH
38591: LD_INT 0
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 1
38600: NEG
38601: PUSH
38602: LD_INT 1
38604: NEG
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 1
38612: NEG
38613: PUSH
38614: LD_INT 2
38616: NEG
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 1
38624: PUSH
38625: LD_INT 1
38627: NEG
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 2
38635: PUSH
38636: LD_INT 0
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 2
38645: PUSH
38646: LD_INT 1
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 2
38655: PUSH
38656: LD_INT 2
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 1
38665: PUSH
38666: LD_INT 2
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 0
38675: PUSH
38676: LD_INT 2
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 1
38685: NEG
38686: PUSH
38687: LD_INT 1
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 2
38696: NEG
38697: PUSH
38698: LD_INT 1
38700: NEG
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 2
38708: NEG
38709: PUSH
38710: LD_INT 2
38712: NEG
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 2
38720: NEG
38721: PUSH
38722: LD_INT 3
38724: NEG
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 2
38732: PUSH
38733: LD_INT 1
38735: NEG
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 3
38743: PUSH
38744: LD_INT 1
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 1
38753: PUSH
38754: LD_INT 3
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 1
38763: NEG
38764: PUSH
38765: LD_INT 2
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 3
38774: NEG
38775: PUSH
38776: LD_INT 2
38778: NEG
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38809: LD_ADDR_VAR 0 32
38813: PUSH
38814: LD_INT 0
38816: PUSH
38817: LD_INT 0
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 0
38826: PUSH
38827: LD_INT 1
38829: NEG
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 1
38837: PUSH
38838: LD_INT 0
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 1
38847: PUSH
38848: LD_INT 1
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 0
38857: PUSH
38858: LD_INT 1
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 1
38867: NEG
38868: PUSH
38869: LD_INT 0
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 1
38878: NEG
38879: PUSH
38880: LD_INT 1
38882: NEG
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 1
38890: NEG
38891: PUSH
38892: LD_INT 2
38894: NEG
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 0
38902: PUSH
38903: LD_INT 2
38905: NEG
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 1
38913: PUSH
38914: LD_INT 1
38916: NEG
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 2
38924: PUSH
38925: LD_INT 1
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 2
38934: PUSH
38935: LD_INT 2
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 1
38944: PUSH
38945: LD_INT 2
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: LD_INT 2
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 1
38964: NEG
38965: PUSH
38966: LD_INT 1
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 2
38975: NEG
38976: PUSH
38977: LD_INT 0
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 2
38986: NEG
38987: PUSH
38988: LD_INT 1
38990: NEG
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 1
38998: NEG
38999: PUSH
39000: LD_INT 3
39002: NEG
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 1
39010: PUSH
39011: LD_INT 2
39013: NEG
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 3
39021: PUSH
39022: LD_INT 2
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 2
39031: PUSH
39032: LD_INT 3
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 2
39041: NEG
39042: PUSH
39043: LD_INT 1
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 3
39052: NEG
39053: PUSH
39054: LD_INT 1
39056: NEG
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39087: LD_ADDR_VAR 0 33
39091: PUSH
39092: LD_INT 0
39094: PUSH
39095: LD_INT 0
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 0
39104: PUSH
39105: LD_INT 1
39107: NEG
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 1
39115: PUSH
39116: LD_INT 0
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 1
39125: PUSH
39126: LD_INT 1
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 0
39135: PUSH
39136: LD_INT 1
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 1
39145: NEG
39146: PUSH
39147: LD_INT 0
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 1
39156: NEG
39157: PUSH
39158: LD_INT 1
39160: NEG
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 1
39168: NEG
39169: PUSH
39170: LD_INT 2
39172: NEG
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 1
39180: PUSH
39181: LD_INT 1
39183: NEG
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 2
39191: PUSH
39192: LD_INT 0
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 2
39201: PUSH
39202: LD_INT 1
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 1
39211: PUSH
39212: LD_INT 2
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 0
39221: PUSH
39222: LD_INT 2
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 1
39231: NEG
39232: PUSH
39233: LD_INT 1
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 2
39242: NEG
39243: PUSH
39244: LD_INT 0
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 2
39253: NEG
39254: PUSH
39255: LD_INT 1
39257: NEG
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 2
39265: NEG
39266: PUSH
39267: LD_INT 2
39269: NEG
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 2
39277: NEG
39278: PUSH
39279: LD_INT 3
39281: NEG
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 2
39289: PUSH
39290: LD_INT 1
39292: NEG
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 3
39300: PUSH
39301: LD_INT 1
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 1
39310: PUSH
39311: LD_INT 3
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 1
39320: NEG
39321: PUSH
39322: LD_INT 2
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 3
39331: NEG
39332: PUSH
39333: LD_INT 2
39335: NEG
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39366: LD_ADDR_VAR 0 34
39370: PUSH
39371: LD_INT 0
39373: PUSH
39374: LD_INT 0
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 0
39383: PUSH
39384: LD_INT 1
39386: NEG
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 1
39394: PUSH
39395: LD_INT 0
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 1
39404: PUSH
39405: LD_INT 1
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 0
39414: PUSH
39415: LD_INT 1
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 1
39424: NEG
39425: PUSH
39426: LD_INT 0
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 1
39435: NEG
39436: PUSH
39437: LD_INT 1
39439: NEG
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 1
39447: NEG
39448: PUSH
39449: LD_INT 2
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 0
39459: PUSH
39460: LD_INT 2
39462: NEG
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 1
39470: PUSH
39471: LD_INT 1
39473: NEG
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 2
39481: PUSH
39482: LD_INT 1
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 2
39491: PUSH
39492: LD_INT 2
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 1
39501: PUSH
39502: LD_INT 2
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 1
39511: NEG
39512: PUSH
39513: LD_INT 1
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 2
39522: NEG
39523: PUSH
39524: LD_INT 0
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 2
39533: NEG
39534: PUSH
39535: LD_INT 1
39537: NEG
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 2
39545: NEG
39546: PUSH
39547: LD_INT 2
39549: NEG
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 1
39557: NEG
39558: PUSH
39559: LD_INT 3
39561: NEG
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 1
39569: PUSH
39570: LD_INT 2
39572: NEG
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 3
39580: PUSH
39581: LD_INT 2
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 2
39590: PUSH
39591: LD_INT 3
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 2
39600: NEG
39601: PUSH
39602: LD_INT 1
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 3
39611: NEG
39612: PUSH
39613: LD_INT 1
39615: NEG
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39646: LD_ADDR_VAR 0 35
39650: PUSH
39651: LD_INT 0
39653: PUSH
39654: LD_INT 0
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 0
39663: PUSH
39664: LD_INT 1
39666: NEG
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 1
39674: PUSH
39675: LD_INT 0
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 1
39684: PUSH
39685: LD_INT 1
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 0
39694: PUSH
39695: LD_INT 1
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 1
39704: NEG
39705: PUSH
39706: LD_INT 0
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 1
39715: NEG
39716: PUSH
39717: LD_INT 1
39719: NEG
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 2
39727: PUSH
39728: LD_INT 1
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 2
39737: NEG
39738: PUSH
39739: LD_INT 1
39741: NEG
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39758: LD_ADDR_VAR 0 36
39762: PUSH
39763: LD_INT 0
39765: PUSH
39766: LD_INT 0
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 0
39775: PUSH
39776: LD_INT 1
39778: NEG
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 1
39786: PUSH
39787: LD_INT 0
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 1
39796: PUSH
39797: LD_INT 1
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 0
39806: PUSH
39807: LD_INT 1
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 1
39816: NEG
39817: PUSH
39818: LD_INT 0
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 1
39827: NEG
39828: PUSH
39829: LD_INT 1
39831: NEG
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 1
39839: NEG
39840: PUSH
39841: LD_INT 2
39843: NEG
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 1
39851: PUSH
39852: LD_INT 2
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39870: LD_ADDR_VAR 0 37
39874: PUSH
39875: LD_INT 0
39877: PUSH
39878: LD_INT 0
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 0
39887: PUSH
39888: LD_INT 1
39890: NEG
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 1
39898: PUSH
39899: LD_INT 0
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 1
39908: PUSH
39909: LD_INT 1
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 0
39918: PUSH
39919: LD_INT 1
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 1
39928: NEG
39929: PUSH
39930: LD_INT 0
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 1
39939: NEG
39940: PUSH
39941: LD_INT 1
39943: NEG
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 1
39951: PUSH
39952: LD_INT 1
39954: NEG
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 1
39962: NEG
39963: PUSH
39964: LD_INT 1
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39982: LD_ADDR_VAR 0 38
39986: PUSH
39987: LD_INT 0
39989: PUSH
39990: LD_INT 0
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 0
39999: PUSH
40000: LD_INT 1
40002: NEG
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 1
40010: PUSH
40011: LD_INT 0
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 1
40020: PUSH
40021: LD_INT 1
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 0
40030: PUSH
40031: LD_INT 1
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 1
40040: NEG
40041: PUSH
40042: LD_INT 0
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 1
40051: NEG
40052: PUSH
40053: LD_INT 1
40055: NEG
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 2
40063: PUSH
40064: LD_INT 1
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 2
40073: NEG
40074: PUSH
40075: LD_INT 1
40077: NEG
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40094: LD_ADDR_VAR 0 39
40098: PUSH
40099: LD_INT 0
40101: PUSH
40102: LD_INT 0
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: LD_INT 1
40114: NEG
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 1
40122: PUSH
40123: LD_INT 0
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 1
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: LD_INT 1
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 1
40152: NEG
40153: PUSH
40154: LD_INT 0
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 1
40163: NEG
40164: PUSH
40165: LD_INT 1
40167: NEG
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 1
40175: NEG
40176: PUSH
40177: LD_INT 2
40179: NEG
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 1
40187: PUSH
40188: LD_INT 2
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40206: LD_ADDR_VAR 0 40
40210: PUSH
40211: LD_INT 0
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 0
40223: PUSH
40224: LD_INT 1
40226: NEG
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 1
40234: PUSH
40235: LD_INT 0
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 1
40244: PUSH
40245: LD_INT 1
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 0
40254: PUSH
40255: LD_INT 1
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 1
40264: NEG
40265: PUSH
40266: LD_INT 0
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 1
40275: NEG
40276: PUSH
40277: LD_INT 1
40279: NEG
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 1
40287: PUSH
40288: LD_INT 1
40290: NEG
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 1
40298: NEG
40299: PUSH
40300: LD_INT 1
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40318: LD_ADDR_VAR 0 41
40322: PUSH
40323: LD_INT 0
40325: PUSH
40326: LD_INT 0
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 0
40335: PUSH
40336: LD_INT 1
40338: NEG
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 1
40346: PUSH
40347: LD_INT 0
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 1
40356: PUSH
40357: LD_INT 1
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 0
40366: PUSH
40367: LD_INT 1
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 1
40376: NEG
40377: PUSH
40378: LD_INT 0
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 1
40387: NEG
40388: PUSH
40389: LD_INT 1
40391: NEG
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 1
40399: NEG
40400: PUSH
40401: LD_INT 2
40403: NEG
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 1
40411: PUSH
40412: LD_INT 1
40414: NEG
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 2
40422: PUSH
40423: LD_INT 0
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 2
40432: PUSH
40433: LD_INT 1
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 2
40442: PUSH
40443: LD_INT 2
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 1
40452: PUSH
40453: LD_INT 2
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 1
40462: NEG
40463: PUSH
40464: LD_INT 1
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 2
40473: NEG
40474: PUSH
40475: LD_INT 0
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 2
40484: NEG
40485: PUSH
40486: LD_INT 1
40488: NEG
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 2
40496: NEG
40497: PUSH
40498: LD_INT 2
40500: NEG
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 2
40508: NEG
40509: PUSH
40510: LD_INT 3
40512: NEG
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 2
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 3
40531: PUSH
40532: LD_INT 0
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 3
40541: PUSH
40542: LD_INT 1
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 3
40551: PUSH
40552: LD_INT 2
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 3
40561: PUSH
40562: LD_INT 3
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 2
40571: PUSH
40572: LD_INT 3
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 2
40581: NEG
40582: PUSH
40583: LD_INT 1
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 3
40592: NEG
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 3
40603: NEG
40604: PUSH
40605: LD_INT 1
40607: NEG
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 3
40615: NEG
40616: PUSH
40617: LD_INT 2
40619: NEG
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 3
40627: NEG
40628: PUSH
40629: LD_INT 3
40631: NEG
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40668: LD_ADDR_VAR 0 42
40672: PUSH
40673: LD_INT 0
40675: PUSH
40676: LD_INT 0
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 0
40685: PUSH
40686: LD_INT 1
40688: NEG
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 1
40696: PUSH
40697: LD_INT 0
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: LD_INT 1
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 0
40716: PUSH
40717: LD_INT 1
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 1
40726: NEG
40727: PUSH
40728: LD_INT 0
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 1
40737: NEG
40738: PUSH
40739: LD_INT 1
40741: NEG
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 1
40749: NEG
40750: PUSH
40751: LD_INT 2
40753: NEG
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 0
40761: PUSH
40762: LD_INT 2
40764: NEG
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 1
40772: PUSH
40773: LD_INT 1
40775: NEG
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 2
40783: PUSH
40784: LD_INT 1
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 2
40793: PUSH
40794: LD_INT 2
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 1
40803: PUSH
40804: LD_INT 2
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 0
40813: PUSH
40814: LD_INT 2
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 1
40823: NEG
40824: PUSH
40825: LD_INT 1
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 2
40834: NEG
40835: PUSH
40836: LD_INT 1
40838: NEG
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 2
40846: NEG
40847: PUSH
40848: LD_INT 2
40850: NEG
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 2
40858: NEG
40859: PUSH
40860: LD_INT 3
40862: NEG
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 1
40870: NEG
40871: PUSH
40872: LD_INT 3
40874: NEG
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 0
40882: PUSH
40883: LD_INT 3
40885: NEG
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 1
40893: PUSH
40894: LD_INT 2
40896: NEG
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 3
40904: PUSH
40905: LD_INT 2
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 3
40914: PUSH
40915: LD_INT 3
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 2
40924: PUSH
40925: LD_INT 3
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 1
40934: PUSH
40935: LD_INT 3
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 0
40944: PUSH
40945: LD_INT 3
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 1
40954: NEG
40955: PUSH
40956: LD_INT 2
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 3
40965: NEG
40966: PUSH
40967: LD_INT 2
40969: NEG
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 3
40977: NEG
40978: PUSH
40979: LD_INT 3
40981: NEG
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41018: LD_ADDR_VAR 0 43
41022: PUSH
41023: LD_INT 0
41025: PUSH
41026: LD_INT 0
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 0
41035: PUSH
41036: LD_INT 1
41038: NEG
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 1
41046: PUSH
41047: LD_INT 0
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 1
41056: PUSH
41057: LD_INT 1
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 0
41066: PUSH
41067: LD_INT 1
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 1
41076: NEG
41077: PUSH
41078: LD_INT 0
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 1
41087: NEG
41088: PUSH
41089: LD_INT 1
41091: NEG
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 1
41099: NEG
41100: PUSH
41101: LD_INT 2
41103: NEG
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 0
41111: PUSH
41112: LD_INT 2
41114: NEG
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 1
41122: PUSH
41123: LD_INT 1
41125: NEG
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 2
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 2
41143: PUSH
41144: LD_INT 1
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 1
41153: PUSH
41154: LD_INT 2
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 0
41163: PUSH
41164: LD_INT 2
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 1
41173: NEG
41174: PUSH
41175: LD_INT 1
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 2
41184: NEG
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 2
41195: NEG
41196: PUSH
41197: LD_INT 1
41199: NEG
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 1
41207: NEG
41208: PUSH
41209: LD_INT 3
41211: NEG
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 0
41219: PUSH
41220: LD_INT 3
41222: NEG
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 1
41230: PUSH
41231: LD_INT 2
41233: NEG
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 2
41241: PUSH
41242: LD_INT 1
41244: NEG
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 3
41252: PUSH
41253: LD_INT 0
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 3
41262: PUSH
41263: LD_INT 1
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 1
41272: PUSH
41273: LD_INT 3
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 0
41282: PUSH
41283: LD_INT 3
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 1
41292: NEG
41293: PUSH
41294: LD_INT 2
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 2
41303: NEG
41304: PUSH
41305: LD_INT 1
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 3
41314: NEG
41315: PUSH
41316: LD_INT 0
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 3
41325: NEG
41326: PUSH
41327: LD_INT 1
41329: NEG
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41366: LD_ADDR_VAR 0 44
41370: PUSH
41371: LD_INT 0
41373: PUSH
41374: LD_INT 0
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 0
41383: PUSH
41384: LD_INT 1
41386: NEG
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 1
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 1
41404: PUSH
41405: LD_INT 1
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 0
41414: PUSH
41415: LD_INT 1
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 1
41424: NEG
41425: PUSH
41426: LD_INT 0
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 1
41435: NEG
41436: PUSH
41437: LD_INT 1
41439: NEG
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 1
41447: NEG
41448: PUSH
41449: LD_INT 2
41451: NEG
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 1
41459: PUSH
41460: LD_INT 1
41462: NEG
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 2
41470: PUSH
41471: LD_INT 0
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 2
41480: PUSH
41481: LD_INT 1
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 2
41490: PUSH
41491: LD_INT 2
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 1
41500: PUSH
41501: LD_INT 2
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 1
41510: NEG
41511: PUSH
41512: LD_INT 1
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 2
41521: NEG
41522: PUSH
41523: LD_INT 0
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 2
41532: NEG
41533: PUSH
41534: LD_INT 1
41536: NEG
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 2
41544: NEG
41545: PUSH
41546: LD_INT 2
41548: NEG
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 2
41556: NEG
41557: PUSH
41558: LD_INT 3
41560: NEG
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 2
41568: PUSH
41569: LD_INT 1
41571: NEG
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 3
41579: PUSH
41580: LD_INT 0
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 3
41589: PUSH
41590: LD_INT 1
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 3
41599: PUSH
41600: LD_INT 2
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 3
41609: PUSH
41610: LD_INT 3
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 2
41619: PUSH
41620: LD_INT 3
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 2
41629: NEG
41630: PUSH
41631: LD_INT 1
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 3
41640: NEG
41641: PUSH
41642: LD_INT 0
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 3
41651: NEG
41652: PUSH
41653: LD_INT 1
41655: NEG
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 3
41663: NEG
41664: PUSH
41665: LD_INT 2
41667: NEG
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 3
41675: NEG
41676: PUSH
41677: LD_INT 3
41679: NEG
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41716: LD_ADDR_VAR 0 45
41720: PUSH
41721: LD_INT 0
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 0
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 1
41744: PUSH
41745: LD_INT 0
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 1
41754: PUSH
41755: LD_INT 1
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: LD_INT 1
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 1
41774: NEG
41775: PUSH
41776: LD_INT 0
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 1
41785: NEG
41786: PUSH
41787: LD_INT 1
41789: NEG
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 1
41797: NEG
41798: PUSH
41799: LD_INT 2
41801: NEG
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 0
41809: PUSH
41810: LD_INT 2
41812: NEG
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 1
41820: PUSH
41821: LD_INT 1
41823: NEG
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 2
41831: PUSH
41832: LD_INT 1
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 2
41841: PUSH
41842: LD_INT 2
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 1
41851: PUSH
41852: LD_INT 2
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 0
41861: PUSH
41862: LD_INT 2
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 1
41871: NEG
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 2
41882: NEG
41883: PUSH
41884: LD_INT 1
41886: NEG
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 2
41894: NEG
41895: PUSH
41896: LD_INT 2
41898: NEG
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 2
41906: NEG
41907: PUSH
41908: LD_INT 3
41910: NEG
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 1
41918: NEG
41919: PUSH
41920: LD_INT 3
41922: NEG
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 0
41930: PUSH
41931: LD_INT 3
41933: NEG
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 1
41941: PUSH
41942: LD_INT 2
41944: NEG
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 3
41952: PUSH
41953: LD_INT 2
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 3
41962: PUSH
41963: LD_INT 3
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 2
41972: PUSH
41973: LD_INT 3
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 1
41982: PUSH
41983: LD_INT 3
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 0
41992: PUSH
41993: LD_INT 3
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 1
42002: NEG
42003: PUSH
42004: LD_INT 2
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 3
42013: NEG
42014: PUSH
42015: LD_INT 2
42017: NEG
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 3
42025: NEG
42026: PUSH
42027: LD_INT 3
42029: NEG
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42066: LD_ADDR_VAR 0 46
42070: PUSH
42071: LD_INT 0
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 0
42083: PUSH
42084: LD_INT 1
42086: NEG
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 1
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 1
42104: PUSH
42105: LD_INT 1
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 0
42114: PUSH
42115: LD_INT 1
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: LD_INT 0
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 1
42135: NEG
42136: PUSH
42137: LD_INT 1
42139: NEG
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 1
42147: NEG
42148: PUSH
42149: LD_INT 2
42151: NEG
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: LD_INT 2
42162: NEG
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 1
42170: PUSH
42171: LD_INT 1
42173: NEG
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 2
42181: PUSH
42182: LD_INT 0
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 2
42191: PUSH
42192: LD_INT 1
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 1
42201: PUSH
42202: LD_INT 2
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 0
42211: PUSH
42212: LD_INT 2
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 1
42221: NEG
42222: PUSH
42223: LD_INT 1
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 2
42232: NEG
42233: PUSH
42234: LD_INT 0
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 2
42243: NEG
42244: PUSH
42245: LD_INT 1
42247: NEG
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 1
42255: NEG
42256: PUSH
42257: LD_INT 3
42259: NEG
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 0
42267: PUSH
42268: LD_INT 3
42270: NEG
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 1
42278: PUSH
42279: LD_INT 2
42281: NEG
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 2
42289: PUSH
42290: LD_INT 1
42292: NEG
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 3
42300: PUSH
42301: LD_INT 0
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 3
42310: PUSH
42311: LD_INT 1
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 1
42320: PUSH
42321: LD_INT 3
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 0
42330: PUSH
42331: LD_INT 3
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 1
42340: NEG
42341: PUSH
42342: LD_INT 2
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 2
42351: NEG
42352: PUSH
42353: LD_INT 1
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 3
42362: NEG
42363: PUSH
42364: LD_INT 0
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 3
42373: NEG
42374: PUSH
42375: LD_INT 1
42377: NEG
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42414: LD_ADDR_VAR 0 47
42418: PUSH
42419: LD_INT 0
42421: PUSH
42422: LD_INT 0
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: LD_INT 1
42434: NEG
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 1
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 1
42452: PUSH
42453: LD_INT 1
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 0
42462: PUSH
42463: LD_INT 1
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 1
42472: NEG
42473: PUSH
42474: LD_INT 0
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 1
42483: NEG
42484: PUSH
42485: LD_INT 1
42487: NEG
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 1
42495: NEG
42496: PUSH
42497: LD_INT 2
42499: NEG
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: LD_INT 2
42510: NEG
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 1
42518: PUSH
42519: LD_INT 1
42521: NEG
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 2
42529: NEG
42530: PUSH
42531: LD_INT 1
42533: NEG
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 2
42541: NEG
42542: PUSH
42543: LD_INT 2
42545: NEG
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42565: LD_ADDR_VAR 0 48
42569: PUSH
42570: LD_INT 0
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 0
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 1
42593: PUSH
42594: LD_INT 0
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 1
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: LD_INT 1
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 1
42623: NEG
42624: PUSH
42625: LD_INT 0
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 1
42634: NEG
42635: PUSH
42636: LD_INT 1
42638: NEG
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 1
42646: NEG
42647: PUSH
42648: LD_INT 2
42650: NEG
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 0
42658: PUSH
42659: LD_INT 2
42661: NEG
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 1
42669: PUSH
42670: LD_INT 1
42672: NEG
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 2
42680: PUSH
42681: LD_INT 0
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 2
42690: PUSH
42691: LD_INT 1
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42712: LD_ADDR_VAR 0 49
42716: PUSH
42717: LD_INT 0
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 0
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 1
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 1
42750: PUSH
42751: LD_INT 1
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 0
42760: PUSH
42761: LD_INT 1
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 1
42770: NEG
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 1
42781: NEG
42782: PUSH
42783: LD_INT 1
42785: NEG
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 1
42793: PUSH
42794: LD_INT 1
42796: NEG
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 2
42804: PUSH
42805: LD_INT 0
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 2
42814: PUSH
42815: LD_INT 1
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 2
42824: PUSH
42825: LD_INT 2
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 1
42834: PUSH
42835: LD_INT 2
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42856: LD_ADDR_VAR 0 50
42860: PUSH
42861: LD_INT 0
42863: PUSH
42864: LD_INT 0
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 0
42873: PUSH
42874: LD_INT 1
42876: NEG
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 1
42884: PUSH
42885: LD_INT 0
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 1
42894: PUSH
42895: LD_INT 1
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 0
42904: PUSH
42905: LD_INT 1
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 1
42914: NEG
42915: PUSH
42916: LD_INT 0
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 1
42925: NEG
42926: PUSH
42927: LD_INT 1
42929: NEG
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 2
42937: PUSH
42938: LD_INT 1
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 2
42947: PUSH
42948: LD_INT 2
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 1
42957: PUSH
42958: LD_INT 2
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: LD_INT 2
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43000: LD_ADDR_VAR 0 51
43004: PUSH
43005: LD_INT 0
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 0
43017: PUSH
43018: LD_INT 1
43020: NEG
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 1
43028: PUSH
43029: LD_INT 0
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 1
43038: PUSH
43039: LD_INT 1
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 0
43048: PUSH
43049: LD_INT 1
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 1
43058: NEG
43059: PUSH
43060: LD_INT 0
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 1
43069: NEG
43070: PUSH
43071: LD_INT 1
43073: NEG
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: LD_INT 2
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: LD_INT 2
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 1
43101: NEG
43102: PUSH
43103: LD_INT 1
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 2
43112: NEG
43113: PUSH
43114: LD_INT 0
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 2
43123: NEG
43124: PUSH
43125: LD_INT 1
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43147: LD_ADDR_VAR 0 52
43151: PUSH
43152: LD_INT 0
43154: PUSH
43155: LD_INT 0
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 0
43164: PUSH
43165: LD_INT 1
43167: NEG
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 1
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 1
43185: PUSH
43186: LD_INT 1
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 0
43195: PUSH
43196: LD_INT 1
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 1
43205: NEG
43206: PUSH
43207: LD_INT 0
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 1
43216: NEG
43217: PUSH
43218: LD_INT 1
43220: NEG
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 1
43228: NEG
43229: PUSH
43230: LD_INT 2
43232: NEG
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 1
43240: NEG
43241: PUSH
43242: LD_INT 1
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 2
43251: NEG
43252: PUSH
43253: LD_INT 0
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 2
43262: NEG
43263: PUSH
43264: LD_INT 1
43266: NEG
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 2
43274: NEG
43275: PUSH
43276: LD_INT 2
43278: NEG
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43298: LD_ADDR_VAR 0 53
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: LD_INT 0
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: LD_INT 1
43318: NEG
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: PUSH
43337: LD_INT 1
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 1
43356: NEG
43357: PUSH
43358: LD_INT 0
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 1
43367: NEG
43368: PUSH
43369: LD_INT 1
43371: NEG
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 1
43379: NEG
43380: PUSH
43381: LD_INT 2
43383: NEG
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 0
43391: PUSH
43392: LD_INT 2
43394: NEG
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 1
43402: PUSH
43403: LD_INT 1
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 2
43413: PUSH
43414: LD_INT 0
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 2
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 2
43433: PUSH
43434: LD_INT 2
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 1
43443: PUSH
43444: LD_INT 2
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 0
43453: PUSH
43454: LD_INT 2
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 1
43463: NEG
43464: PUSH
43465: LD_INT 1
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 2
43474: NEG
43475: PUSH
43476: LD_INT 0
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 2
43485: NEG
43486: PUSH
43487: LD_INT 1
43489: NEG
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 2
43497: NEG
43498: PUSH
43499: LD_INT 2
43501: NEG
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43528: LD_ADDR_VAR 0 54
43532: PUSH
43533: LD_INT 0
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: LD_INT 1
43548: NEG
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 1
43556: PUSH
43557: LD_INT 0
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 1
43566: PUSH
43567: LD_INT 1
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 0
43576: PUSH
43577: LD_INT 1
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 1
43586: NEG
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 1
43597: NEG
43598: PUSH
43599: LD_INT 1
43601: NEG
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 1
43609: NEG
43610: PUSH
43611: LD_INT 2
43613: NEG
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 0
43621: PUSH
43622: LD_INT 2
43624: NEG
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 1
43632: PUSH
43633: LD_INT 1
43635: NEG
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 2
43643: PUSH
43644: LD_INT 0
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 2
43653: PUSH
43654: LD_INT 1
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 2
43663: PUSH
43664: LD_INT 2
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 1
43673: PUSH
43674: LD_INT 2
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: LD_INT 2
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 1
43693: NEG
43694: PUSH
43695: LD_INT 1
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 2
43704: NEG
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 2
43715: NEG
43716: PUSH
43717: LD_INT 1
43719: NEG
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 2
43727: NEG
43728: PUSH
43729: LD_INT 2
43731: NEG
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43758: LD_ADDR_VAR 0 55
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: LD_INT 1
43778: NEG
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 1
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 1
43796: PUSH
43797: LD_INT 1
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: LD_INT 1
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 1
43816: NEG
43817: PUSH
43818: LD_INT 0
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 1
43827: NEG
43828: PUSH
43829: LD_INT 1
43831: NEG
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 1
43839: NEG
43840: PUSH
43841: LD_INT 2
43843: NEG
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: LD_INT 2
43854: NEG
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 1
43862: PUSH
43863: LD_INT 1
43865: NEG
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 2
43873: PUSH
43874: LD_INT 0
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 2
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 2
43893: PUSH
43894: LD_INT 2
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 1
43903: PUSH
43904: LD_INT 2
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: LD_INT 2
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: LD_INT 1
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 2
43934: NEG
43935: PUSH
43936: LD_INT 0
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 2
43945: NEG
43946: PUSH
43947: LD_INT 1
43949: NEG
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 2
43957: NEG
43958: PUSH
43959: LD_INT 2
43961: NEG
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43988: LD_ADDR_VAR 0 56
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: LD_INT 0
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: LD_INT 1
44008: NEG
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 1
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 1
44026: PUSH
44027: LD_INT 1
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 0
44036: PUSH
44037: LD_INT 1
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 1
44046: NEG
44047: PUSH
44048: LD_INT 0
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 1
44057: NEG
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: NEG
44070: PUSH
44071: LD_INT 2
44073: NEG
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 0
44081: PUSH
44082: LD_INT 2
44084: NEG
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: LD_INT 1
44095: NEG
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 2
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 2
44113: PUSH
44114: LD_INT 1
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 2
44123: PUSH
44124: LD_INT 2
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 1
44133: PUSH
44134: LD_INT 2
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: LD_INT 2
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: LD_INT 1
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 2
44164: NEG
44165: PUSH
44166: LD_INT 0
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 2
44175: NEG
44176: PUSH
44177: LD_INT 1
44179: NEG
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 2
44187: NEG
44188: PUSH
44189: LD_INT 2
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44218: LD_ADDR_VAR 0 57
44222: PUSH
44223: LD_INT 0
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 0
44235: PUSH
44236: LD_INT 1
44238: NEG
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 1
44246: PUSH
44247: LD_INT 0
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 1
44256: PUSH
44257: LD_INT 1
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 0
44266: PUSH
44267: LD_INT 1
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: NEG
44277: PUSH
44278: LD_INT 0
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 1
44287: NEG
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 1
44299: NEG
44300: PUSH
44301: LD_INT 2
44303: NEG
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 0
44311: PUSH
44312: LD_INT 2
44314: NEG
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: PUSH
44323: LD_INT 1
44325: NEG
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 2
44333: PUSH
44334: LD_INT 0
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 2
44343: PUSH
44344: LD_INT 1
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 2
44353: PUSH
44354: LD_INT 2
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 1
44363: PUSH
44364: LD_INT 2
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 0
44373: PUSH
44374: LD_INT 2
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 1
44383: NEG
44384: PUSH
44385: LD_INT 1
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 2
44394: NEG
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 2
44405: NEG
44406: PUSH
44407: LD_INT 1
44409: NEG
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 2
44417: NEG
44418: PUSH
44419: LD_INT 2
44421: NEG
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44448: LD_ADDR_VAR 0 58
44452: PUSH
44453: LD_INT 0
44455: PUSH
44456: LD_INT 0
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 0
44465: PUSH
44466: LD_INT 1
44468: NEG
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 1
44476: PUSH
44477: LD_INT 0
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 1
44486: PUSH
44487: LD_INT 1
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 0
44496: PUSH
44497: LD_INT 1
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 1
44506: NEG
44507: PUSH
44508: LD_INT 0
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 1
44517: NEG
44518: PUSH
44519: LD_INT 1
44521: NEG
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 1
44529: NEG
44530: PUSH
44531: LD_INT 2
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 0
44541: PUSH
44542: LD_INT 2
44544: NEG
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 1
44552: PUSH
44553: LD_INT 1
44555: NEG
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 2
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 2
44573: PUSH
44574: LD_INT 1
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 2
44583: PUSH
44584: LD_INT 2
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: LD_INT 2
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: LD_INT 2
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 1
44613: NEG
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 2
44624: NEG
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 2
44635: NEG
44636: PUSH
44637: LD_INT 1
44639: NEG
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 2
44647: NEG
44648: PUSH
44649: LD_INT 2
44651: NEG
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44678: LD_ADDR_VAR 0 59
44682: PUSH
44683: LD_INT 0
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: LD_INT 1
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: LD_INT 0
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 1
44716: PUSH
44717: LD_INT 1
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: NEG
44737: PUSH
44738: LD_INT 0
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 1
44747: NEG
44748: PUSH
44749: LD_INT 1
44751: NEG
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44766: LD_ADDR_VAR 0 60
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: LD_INT 0
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: LD_INT 1
44786: NEG
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 1
44794: PUSH
44795: LD_INT 0
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 1
44804: PUSH
44805: LD_INT 1
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 0
44814: PUSH
44815: LD_INT 1
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 1
44824: NEG
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 1
44835: NEG
44836: PUSH
44837: LD_INT 1
44839: NEG
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44854: LD_ADDR_VAR 0 61
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: LD_INT 0
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: LD_INT 1
44874: NEG
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: PUSH
44893: LD_INT 1
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: LD_INT 1
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 1
44912: NEG
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 1
44923: NEG
44924: PUSH
44925: LD_INT 1
44927: NEG
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44942: LD_ADDR_VAR 0 62
44946: PUSH
44947: LD_INT 0
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: LD_INT 1
44962: NEG
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 1
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 1
44980: PUSH
44981: LD_INT 1
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: LD_INT 1
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 1
45011: NEG
45012: PUSH
45013: LD_INT 1
45015: NEG
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45030: LD_ADDR_VAR 0 63
45034: PUSH
45035: LD_INT 0
45037: PUSH
45038: LD_INT 0
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 0
45047: PUSH
45048: LD_INT 1
45050: NEG
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 1
45058: PUSH
45059: LD_INT 0
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 1
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 0
45078: PUSH
45079: LD_INT 1
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 1
45088: NEG
45089: PUSH
45090: LD_INT 0
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 1
45099: NEG
45100: PUSH
45101: LD_INT 1
45103: NEG
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45118: LD_ADDR_VAR 0 64
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: LD_INT 1
45138: NEG
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: PUSH
45147: LD_INT 0
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: LD_INT 1
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: LD_INT 1
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 1
45176: NEG
45177: PUSH
45178: LD_INT 0
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: LD_INT 1
45191: NEG
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: ST_TO_ADDR
// end ; 1 :
45206: GO 51103
45208: LD_INT 1
45210: DOUBLE
45211: EQUAL
45212: IFTRUE 45216
45214: GO 47839
45216: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45217: LD_ADDR_VAR 0 11
45221: PUSH
45222: LD_INT 1
45224: NEG
45225: PUSH
45226: LD_INT 3
45228: NEG
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 0
45236: PUSH
45237: LD_INT 3
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 1
45247: PUSH
45248: LD_INT 2
45250: NEG
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: LIST
45260: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45261: LD_ADDR_VAR 0 12
45265: PUSH
45266: LD_INT 2
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 3
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 3
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: LIST
45301: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45302: LD_ADDR_VAR 0 13
45306: PUSH
45307: LD_INT 3
45309: PUSH
45310: LD_INT 2
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 3
45319: PUSH
45320: LD_INT 3
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 2
45329: PUSH
45330: LD_INT 3
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: LIST
45341: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45342: LD_ADDR_VAR 0 14
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: LD_INT 3
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: LD_INT 3
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: LD_INT 2
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: LIST
45382: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45383: LD_ADDR_VAR 0 15
45387: PUSH
45388: LD_INT 2
45390: NEG
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 3
45401: NEG
45402: PUSH
45403: LD_INT 0
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 3
45412: NEG
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: LIST
45426: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45427: LD_ADDR_VAR 0 16
45431: PUSH
45432: LD_INT 2
45434: NEG
45435: PUSH
45436: LD_INT 3
45438: NEG
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 3
45446: NEG
45447: PUSH
45448: LD_INT 2
45450: NEG
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 3
45458: NEG
45459: PUSH
45460: LD_INT 3
45462: NEG
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: LIST
45472: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45473: LD_ADDR_VAR 0 17
45477: PUSH
45478: LD_INT 1
45480: NEG
45481: PUSH
45482: LD_INT 3
45484: NEG
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 0
45492: PUSH
45493: LD_INT 3
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 1
45503: PUSH
45504: LD_INT 2
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: LIST
45516: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45517: LD_ADDR_VAR 0 18
45521: PUSH
45522: LD_INT 2
45524: PUSH
45525: LD_INT 1
45527: NEG
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 3
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 3
45545: PUSH
45546: LD_INT 1
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: LIST
45557: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45558: LD_ADDR_VAR 0 19
45562: PUSH
45563: LD_INT 3
45565: PUSH
45566: LD_INT 2
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 3
45575: PUSH
45576: LD_INT 3
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 2
45585: PUSH
45586: LD_INT 3
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: LIST
45597: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45598: LD_ADDR_VAR 0 20
45602: PUSH
45603: LD_INT 1
45605: PUSH
45606: LD_INT 3
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 0
45615: PUSH
45616: LD_INT 3
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 1
45625: NEG
45626: PUSH
45627: LD_INT 2
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: LIST
45638: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45639: LD_ADDR_VAR 0 21
45643: PUSH
45644: LD_INT 2
45646: NEG
45647: PUSH
45648: LD_INT 1
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 3
45657: NEG
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 3
45668: NEG
45669: PUSH
45670: LD_INT 1
45672: NEG
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: LIST
45682: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45683: LD_ADDR_VAR 0 22
45687: PUSH
45688: LD_INT 2
45690: NEG
45691: PUSH
45692: LD_INT 3
45694: NEG
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 3
45702: NEG
45703: PUSH
45704: LD_INT 2
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 3
45714: NEG
45715: PUSH
45716: LD_INT 3
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: LIST
45728: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
45729: LD_ADDR_VAR 0 23
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: LD_INT 3
45739: NEG
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: NEG
45748: PUSH
45749: LD_INT 4
45751: NEG
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: LD_INT 3
45762: NEG
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: LIST
45772: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
45773: LD_ADDR_VAR 0 24
45777: PUSH
45778: LD_INT 3
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 3
45790: PUSH
45791: LD_INT 1
45793: NEG
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 4
45801: PUSH
45802: LD_INT 1
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: LIST
45813: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
45814: LD_ADDR_VAR 0 25
45818: PUSH
45819: LD_INT 3
45821: PUSH
45822: LD_INT 3
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 4
45831: PUSH
45832: LD_INT 3
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 3
45841: PUSH
45842: LD_INT 4
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: LIST
45853: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
45854: LD_ADDR_VAR 0 26
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: LD_INT 3
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: LD_INT 4
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: NEG
45882: PUSH
45883: LD_INT 3
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: LIST
45894: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
45895: LD_ADDR_VAR 0 27
45899: PUSH
45900: LD_INT 3
45902: NEG
45903: PUSH
45904: LD_INT 0
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 3
45913: NEG
45914: PUSH
45915: LD_INT 1
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 4
45924: NEG
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: LIST
45938: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
45939: LD_ADDR_VAR 0 28
45943: PUSH
45944: LD_INT 3
45946: NEG
45947: PUSH
45948: LD_INT 3
45950: NEG
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 3
45958: NEG
45959: PUSH
45960: LD_INT 4
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 4
45970: NEG
45971: PUSH
45972: LD_INT 3
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: LIST
45984: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
45985: LD_ADDR_VAR 0 29
45989: PUSH
45990: LD_INT 1
45992: NEG
45993: PUSH
45994: LD_INT 3
45996: NEG
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: LD_INT 3
46007: NEG
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: LD_INT 2
46018: NEG
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: LD_INT 4
46030: NEG
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: LD_INT 4
46041: NEG
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: LD_INT 3
46052: NEG
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 1
46060: NEG
46061: PUSH
46062: LD_INT 5
46064: NEG
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: LD_INT 5
46075: NEG
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: LD_INT 4
46086: NEG
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 1
46094: NEG
46095: PUSH
46096: LD_INT 6
46098: NEG
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: LD_INT 6
46109: NEG
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 1
46117: PUSH
46118: LD_INT 5
46120: NEG
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46140: LD_ADDR_VAR 0 30
46144: PUSH
46145: LD_INT 2
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 3
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 3
46168: PUSH
46169: LD_INT 1
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 3
46178: PUSH
46179: LD_INT 1
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 4
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 4
46199: PUSH
46200: LD_INT 1
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 4
46209: PUSH
46210: LD_INT 1
46212: NEG
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 5
46220: PUSH
46221: LD_INT 0
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 5
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 5
46240: PUSH
46241: LD_INT 1
46243: NEG
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 6
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 6
46261: PUSH
46262: LD_INT 1
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46283: LD_ADDR_VAR 0 31
46287: PUSH
46288: LD_INT 3
46290: PUSH
46291: LD_INT 2
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 3
46300: PUSH
46301: LD_INT 3
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 2
46310: PUSH
46311: LD_INT 3
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 4
46320: PUSH
46321: LD_INT 3
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 4
46330: PUSH
46331: LD_INT 4
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 3
46340: PUSH
46341: LD_INT 4
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 5
46350: PUSH
46351: LD_INT 4
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 5
46360: PUSH
46361: LD_INT 5
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 4
46370: PUSH
46371: LD_INT 5
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 6
46380: PUSH
46381: LD_INT 5
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 6
46390: PUSH
46391: LD_INT 6
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 5
46400: PUSH
46401: LD_INT 6
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46422: LD_ADDR_VAR 0 32
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: LD_INT 3
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 0
46439: PUSH
46440: LD_INT 3
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 1
46449: NEG
46450: PUSH
46451: LD_INT 2
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: LD_INT 4
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 0
46470: PUSH
46471: LD_INT 4
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: NEG
46481: PUSH
46482: LD_INT 3
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: LD_INT 5
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 0
46501: PUSH
46502: LD_INT 5
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: LD_INT 4
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 1
46522: PUSH
46523: LD_INT 6
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: LD_INT 6
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 1
46542: NEG
46543: PUSH
46544: LD_INT 5
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
46565: LD_ADDR_VAR 0 33
46569: PUSH
46570: LD_INT 2
46572: NEG
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 3
46583: NEG
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 3
46594: NEG
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 3
46606: NEG
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 4
46617: NEG
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 4
46628: NEG
46629: PUSH
46630: LD_INT 1
46632: NEG
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 4
46640: NEG
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 5
46651: NEG
46652: PUSH
46653: LD_INT 0
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 5
46662: NEG
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 5
46674: NEG
46675: PUSH
46676: LD_INT 1
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 6
46685: NEG
46686: PUSH
46687: LD_INT 0
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 6
46696: NEG
46697: PUSH
46698: LD_INT 1
46700: NEG
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
46720: LD_ADDR_VAR 0 34
46724: PUSH
46725: LD_INT 2
46727: NEG
46728: PUSH
46729: LD_INT 3
46731: NEG
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 3
46739: NEG
46740: PUSH
46741: LD_INT 2
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 3
46751: NEG
46752: PUSH
46753: LD_INT 3
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 3
46763: NEG
46764: PUSH
46765: LD_INT 4
46767: NEG
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 4
46775: NEG
46776: PUSH
46777: LD_INT 3
46779: NEG
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 4
46787: NEG
46788: PUSH
46789: LD_INT 4
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 4
46799: NEG
46800: PUSH
46801: LD_INT 5
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 5
46811: NEG
46812: PUSH
46813: LD_INT 4
46815: NEG
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 5
46823: NEG
46824: PUSH
46825: LD_INT 5
46827: NEG
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 5
46835: NEG
46836: PUSH
46837: LD_INT 6
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 6
46847: NEG
46848: PUSH
46849: LD_INT 5
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 6
46859: NEG
46860: PUSH
46861: LD_INT 6
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
46883: LD_ADDR_VAR 0 41
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: LD_INT 2
46893: NEG
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 1
46901: NEG
46902: PUSH
46903: LD_INT 3
46905: NEG
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: PUSH
46914: LD_INT 2
46916: NEG
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: LIST
46926: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
46927: LD_ADDR_VAR 0 42
46931: PUSH
46932: LD_INT 2
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 2
46944: PUSH
46945: LD_INT 1
46947: NEG
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 3
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: LIST
46967: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
46968: LD_ADDR_VAR 0 43
46972: PUSH
46973: LD_INT 2
46975: PUSH
46976: LD_INT 2
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 3
46985: PUSH
46986: LD_INT 2
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 2
46995: PUSH
46996: LD_INT 3
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: LIST
47007: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47008: LD_ADDR_VAR 0 44
47012: PUSH
47013: LD_INT 0
47015: PUSH
47016: LD_INT 2
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: PUSH
47026: LD_INT 3
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 1
47035: NEG
47036: PUSH
47037: LD_INT 2
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: LIST
47048: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47049: LD_ADDR_VAR 0 45
47053: PUSH
47054: LD_INT 2
47056: NEG
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 2
47067: NEG
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 3
47078: NEG
47079: PUSH
47080: LD_INT 1
47082: NEG
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: LIST
47092: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47093: LD_ADDR_VAR 0 46
47097: PUSH
47098: LD_INT 2
47100: NEG
47101: PUSH
47102: LD_INT 2
47104: NEG
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 2
47112: NEG
47113: PUSH
47114: LD_INT 3
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 3
47124: NEG
47125: PUSH
47126: LD_INT 2
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: LIST
47138: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47139: LD_ADDR_VAR 0 47
47143: PUSH
47144: LD_INT 2
47146: NEG
47147: PUSH
47148: LD_INT 3
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: LD_INT 3
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47172: LD_ADDR_VAR 0 48
47176: PUSH
47177: LD_INT 1
47179: PUSH
47180: LD_INT 2
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 2
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47203: LD_ADDR_VAR 0 49
47207: PUSH
47208: LD_INT 3
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 3
47220: PUSH
47221: LD_INT 2
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47232: LD_ADDR_VAR 0 50
47236: PUSH
47237: LD_INT 2
47239: PUSH
47240: LD_INT 3
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: PUSH
47250: LD_INT 3
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47261: LD_ADDR_VAR 0 51
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: LD_INT 2
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 2
47279: NEG
47280: PUSH
47281: LD_INT 1
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47292: LD_ADDR_VAR 0 52
47296: PUSH
47297: LD_INT 3
47299: NEG
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 3
47311: NEG
47312: PUSH
47313: LD_INT 2
47315: NEG
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47325: LD_ADDR_VAR 0 53
47329: PUSH
47330: LD_INT 1
47332: NEG
47333: PUSH
47334: LD_INT 3
47336: NEG
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: LD_INT 3
47347: NEG
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: LD_INT 2
47358: NEG
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: LIST
47368: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47369: LD_ADDR_VAR 0 54
47373: PUSH
47374: LD_INT 2
47376: PUSH
47377: LD_INT 1
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 3
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 3
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: LIST
47409: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47410: LD_ADDR_VAR 0 55
47414: PUSH
47415: LD_INT 3
47417: PUSH
47418: LD_INT 2
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 3
47427: PUSH
47428: LD_INT 3
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 2
47437: PUSH
47438: LD_INT 3
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: LIST
47449: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47450: LD_ADDR_VAR 0 56
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: LD_INT 3
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: LD_INT 3
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: LD_INT 2
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: LIST
47490: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47491: LD_ADDR_VAR 0 57
47495: PUSH
47496: LD_INT 2
47498: NEG
47499: PUSH
47500: LD_INT 1
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 3
47509: NEG
47510: PUSH
47511: LD_INT 0
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 3
47520: NEG
47521: PUSH
47522: LD_INT 1
47524: NEG
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: LIST
47534: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47535: LD_ADDR_VAR 0 58
47539: PUSH
47540: LD_INT 2
47542: NEG
47543: PUSH
47544: LD_INT 3
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 3
47554: NEG
47555: PUSH
47556: LD_INT 2
47558: NEG
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 3
47566: NEG
47567: PUSH
47568: LD_INT 3
47570: NEG
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: LIST
47580: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
47581: LD_ADDR_VAR 0 59
47585: PUSH
47586: LD_INT 1
47588: NEG
47589: PUSH
47590: LD_INT 2
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: LD_INT 2
47603: NEG
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: LD_INT 1
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: LIST
47624: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47625: LD_ADDR_VAR 0 60
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: LD_INT 1
47635: NEG
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 2
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 2
47653: PUSH
47654: LD_INT 1
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: LIST
47665: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47666: LD_ADDR_VAR 0 61
47670: PUSH
47671: LD_INT 2
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 2
47683: PUSH
47684: LD_INT 2
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 1
47693: PUSH
47694: LD_INT 2
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: LIST
47705: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47706: LD_ADDR_VAR 0 62
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: LD_INT 2
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: LD_INT 2
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 1
47733: NEG
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: LIST
47746: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47747: LD_ADDR_VAR 0 63
47751: PUSH
47752: LD_INT 1
47754: NEG
47755: PUSH
47756: LD_INT 1
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 2
47765: NEG
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 2
47776: NEG
47777: PUSH
47778: LD_INT 1
47780: NEG
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: LIST
47790: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47791: LD_ADDR_VAR 0 64
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: LD_INT 2
47802: NEG
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 2
47810: NEG
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 2
47822: NEG
47823: PUSH
47824: LD_INT 2
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: LIST
47836: ST_TO_ADDR
// end ; 2 :
47837: GO 51103
47839: LD_INT 2
47841: DOUBLE
47842: EQUAL
47843: IFTRUE 47847
47845: GO 51102
47847: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
47848: LD_ADDR_VAR 0 29
47852: PUSH
47853: LD_INT 4
47855: PUSH
47856: LD_INT 0
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 4
47865: PUSH
47866: LD_INT 1
47868: NEG
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 5
47876: PUSH
47877: LD_INT 0
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 5
47886: PUSH
47887: LD_INT 1
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 4
47896: PUSH
47897: LD_INT 1
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 3
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 3
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 3
47927: PUSH
47928: LD_INT 2
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 5
47938: PUSH
47939: LD_INT 2
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 3
47948: PUSH
47949: LD_INT 3
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 3
47958: PUSH
47959: LD_INT 2
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 4
47968: PUSH
47969: LD_INT 3
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 4
47978: PUSH
47979: LD_INT 4
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 3
47988: PUSH
47989: LD_INT 4
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 2
47998: PUSH
47999: LD_INT 3
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 2
48008: PUSH
48009: LD_INT 2
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 4
48018: PUSH
48019: LD_INT 2
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 2
48028: PUSH
48029: LD_INT 4
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: LD_INT 4
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: LD_INT 3
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: LD_INT 4
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: LD_INT 5
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: LD_INT 5
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: NEG
48089: PUSH
48090: LD_INT 4
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 1
48099: NEG
48100: PUSH
48101: LD_INT 3
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 2
48110: PUSH
48111: LD_INT 5
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 2
48120: NEG
48121: PUSH
48122: LD_INT 3
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 3
48131: NEG
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 3
48142: NEG
48143: PUSH
48144: LD_INT 1
48146: NEG
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 2
48154: NEG
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 2
48165: NEG
48166: PUSH
48167: LD_INT 1
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 3
48176: NEG
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 4
48187: NEG
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 4
48198: NEG
48199: PUSH
48200: LD_INT 1
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 4
48210: NEG
48211: PUSH
48212: LD_INT 2
48214: NEG
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 2
48222: NEG
48223: PUSH
48224: LD_INT 2
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 4
48233: NEG
48234: PUSH
48235: LD_INT 4
48237: NEG
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 4
48245: NEG
48246: PUSH
48247: LD_INT 5
48249: NEG
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 3
48257: NEG
48258: PUSH
48259: LD_INT 4
48261: NEG
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 3
48269: NEG
48270: PUSH
48271: LD_INT 3
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 4
48281: NEG
48282: PUSH
48283: LD_INT 3
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 5
48293: NEG
48294: PUSH
48295: LD_INT 4
48297: NEG
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 5
48305: NEG
48306: PUSH
48307: LD_INT 5
48309: NEG
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 3
48317: NEG
48318: PUSH
48319: LD_INT 5
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 5
48329: NEG
48330: PUSH
48331: LD_INT 3
48333: NEG
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48386: LD_ADDR_VAR 0 30
48390: PUSH
48391: LD_INT 4
48393: PUSH
48394: LD_INT 4
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 4
48403: PUSH
48404: LD_INT 3
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 5
48413: PUSH
48414: LD_INT 4
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 5
48423: PUSH
48424: LD_INT 5
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 4
48433: PUSH
48434: LD_INT 5
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 3
48443: PUSH
48444: LD_INT 4
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 3
48453: PUSH
48454: LD_INT 3
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 5
48463: PUSH
48464: LD_INT 3
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 3
48473: PUSH
48474: LD_INT 5
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: LD_INT 3
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: LD_INT 2
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: LD_INT 3
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: PUSH
48514: LD_INT 4
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: LD_INT 4
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: LD_INT 3
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: LD_INT 2
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 2
48555: PUSH
48556: LD_INT 4
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 2
48565: NEG
48566: PUSH
48567: LD_INT 2
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 4
48576: NEG
48577: PUSH
48578: LD_INT 0
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 4
48587: NEG
48588: PUSH
48589: LD_INT 1
48591: NEG
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 3
48599: NEG
48600: PUSH
48601: LD_INT 0
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 3
48610: NEG
48611: PUSH
48612: LD_INT 1
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 4
48621: NEG
48622: PUSH
48623: LD_INT 1
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 5
48632: NEG
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 5
48643: NEG
48644: PUSH
48645: LD_INT 1
48647: NEG
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 5
48655: NEG
48656: PUSH
48657: LD_INT 2
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 3
48667: NEG
48668: PUSH
48669: LD_INT 2
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 3
48678: NEG
48679: PUSH
48680: LD_INT 3
48682: NEG
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 3
48690: NEG
48691: PUSH
48692: LD_INT 4
48694: NEG
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 2
48702: NEG
48703: PUSH
48704: LD_INT 3
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 2
48714: NEG
48715: PUSH
48716: LD_INT 2
48718: NEG
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 3
48726: NEG
48727: PUSH
48728: LD_INT 2
48730: NEG
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 4
48738: NEG
48739: PUSH
48740: LD_INT 3
48742: NEG
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 4
48750: NEG
48751: PUSH
48752: LD_INT 4
48754: NEG
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 2
48762: NEG
48763: PUSH
48764: LD_INT 4
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 4
48774: NEG
48775: PUSH
48776: LD_INT 2
48778: NEG
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 0
48786: PUSH
48787: LD_INT 4
48789: NEG
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: LD_INT 5
48800: NEG
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: LD_INT 4
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: PUSH
48820: LD_INT 3
48822: NEG
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: LD_INT 3
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: NEG
48842: PUSH
48843: LD_INT 4
48845: NEG
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: NEG
48854: PUSH
48855: LD_INT 5
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 2
48865: PUSH
48866: LD_INT 3
48868: NEG
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 2
48876: NEG
48877: PUSH
48878: LD_INT 5
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
48933: LD_ADDR_VAR 0 31
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: LD_INT 4
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 0
48950: PUSH
48951: LD_INT 3
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 1
48960: PUSH
48961: LD_INT 4
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 1
48970: PUSH
48971: LD_INT 5
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: LD_INT 5
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: NEG
48991: PUSH
48992: LD_INT 4
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: LD_INT 3
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 2
49012: PUSH
49013: LD_INT 5
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 2
49022: NEG
49023: PUSH
49024: LD_INT 3
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 3
49033: NEG
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 3
49044: NEG
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 2
49056: NEG
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 2
49067: NEG
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 3
49078: NEG
49079: PUSH
49080: LD_INT 1
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 4
49089: NEG
49090: PUSH
49091: LD_INT 0
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 4
49100: NEG
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 4
49112: NEG
49113: PUSH
49114: LD_INT 2
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 2
49124: NEG
49125: PUSH
49126: LD_INT 2
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 4
49135: NEG
49136: PUSH
49137: LD_INT 4
49139: NEG
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 4
49147: NEG
49148: PUSH
49149: LD_INT 5
49151: NEG
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 3
49159: NEG
49160: PUSH
49161: LD_INT 4
49163: NEG
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 3
49171: NEG
49172: PUSH
49173: LD_INT 3
49175: NEG
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 4
49183: NEG
49184: PUSH
49185: LD_INT 3
49187: NEG
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 5
49195: NEG
49196: PUSH
49197: LD_INT 4
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 5
49207: NEG
49208: PUSH
49209: LD_INT 5
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 3
49219: NEG
49220: PUSH
49221: LD_INT 5
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 5
49231: NEG
49232: PUSH
49233: LD_INT 3
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: LD_INT 3
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: LD_INT 4
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 1
49265: PUSH
49266: LD_INT 3
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: LD_INT 2
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 0
49287: PUSH
49288: LD_INT 2
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 1
49298: NEG
49299: PUSH
49300: LD_INT 3
49302: NEG
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 1
49310: NEG
49311: PUSH
49312: LD_INT 4
49314: NEG
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 2
49322: PUSH
49323: LD_INT 2
49325: NEG
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 2
49333: NEG
49334: PUSH
49335: LD_INT 4
49337: NEG
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 4
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 4
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 5
49366: PUSH
49367: LD_INT 0
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 5
49376: PUSH
49377: LD_INT 1
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 4
49386: PUSH
49387: LD_INT 1
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 3
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 3
49406: PUSH
49407: LD_INT 1
49409: NEG
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 3
49417: PUSH
49418: LD_INT 2
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 5
49428: PUSH
49429: LD_INT 2
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49483: LD_ADDR_VAR 0 32
49487: PUSH
49488: LD_INT 4
49490: NEG
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 4
49501: NEG
49502: PUSH
49503: LD_INT 1
49505: NEG
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 3
49513: NEG
49514: PUSH
49515: LD_INT 0
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 3
49524: NEG
49525: PUSH
49526: LD_INT 1
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 4
49535: NEG
49536: PUSH
49537: LD_INT 1
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 5
49546: NEG
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 5
49557: NEG
49558: PUSH
49559: LD_INT 1
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 5
49569: NEG
49570: PUSH
49571: LD_INT 2
49573: NEG
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 3
49581: NEG
49582: PUSH
49583: LD_INT 2
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 3
49592: NEG
49593: PUSH
49594: LD_INT 3
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 3
49604: NEG
49605: PUSH
49606: LD_INT 4
49608: NEG
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 2
49616: NEG
49617: PUSH
49618: LD_INT 3
49620: NEG
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 2
49628: NEG
49629: PUSH
49630: LD_INT 2
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 3
49640: NEG
49641: PUSH
49642: LD_INT 2
49644: NEG
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 4
49652: NEG
49653: PUSH
49654: LD_INT 3
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 4
49664: NEG
49665: PUSH
49666: LD_INT 4
49668: NEG
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 2
49676: NEG
49677: PUSH
49678: LD_INT 4
49680: NEG
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 4
49688: NEG
49689: PUSH
49690: LD_INT 2
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: LD_INT 4
49703: NEG
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 0
49711: PUSH
49712: LD_INT 5
49714: NEG
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: PUSH
49723: LD_INT 4
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: LD_INT 3
49736: NEG
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: LD_INT 3
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: LD_INT 4
49759: NEG
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: LD_INT 5
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 2
49779: PUSH
49780: LD_INT 3
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 2
49790: NEG
49791: PUSH
49792: LD_INT 5
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 3
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 3
49812: PUSH
49813: LD_INT 1
49815: NEG
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 4
49823: PUSH
49824: LD_INT 0
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 4
49833: PUSH
49834: LD_INT 1
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 3
49843: PUSH
49844: LD_INT 1
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: LD_INT 0
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 2
49863: PUSH
49864: LD_INT 1
49866: NEG
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 2
49874: PUSH
49875: LD_INT 2
49877: NEG
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 4
49885: PUSH
49886: LD_INT 2
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 4
49895: PUSH
49896: LD_INT 4
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 4
49905: PUSH
49906: LD_INT 3
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 5
49915: PUSH
49916: LD_INT 4
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 5
49925: PUSH
49926: LD_INT 5
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 4
49935: PUSH
49936: LD_INT 5
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 3
49945: PUSH
49946: LD_INT 4
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 3
49955: PUSH
49956: LD_INT 3
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 5
49965: PUSH
49966: LD_INT 3
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 3
49975: PUSH
49976: LD_INT 5
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50030: LD_ADDR_VAR 0 33
50034: PUSH
50035: LD_INT 4
50037: NEG
50038: PUSH
50039: LD_INT 4
50041: NEG
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 4
50049: NEG
50050: PUSH
50051: LD_INT 5
50053: NEG
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 3
50061: NEG
50062: PUSH
50063: LD_INT 4
50065: NEG
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 3
50073: NEG
50074: PUSH
50075: LD_INT 3
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 4
50085: NEG
50086: PUSH
50087: LD_INT 3
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 5
50097: NEG
50098: PUSH
50099: LD_INT 4
50101: NEG
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 5
50109: NEG
50110: PUSH
50111: LD_INT 5
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 3
50121: NEG
50122: PUSH
50123: LD_INT 5
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 5
50133: NEG
50134: PUSH
50135: LD_INT 3
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: LD_INT 3
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 0
50156: PUSH
50157: LD_INT 4
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 1
50167: PUSH
50168: LD_INT 3
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 1
50178: PUSH
50179: LD_INT 2
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 0
50189: PUSH
50190: LD_INT 2
50192: NEG
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 1
50200: NEG
50201: PUSH
50202: LD_INT 3
50204: NEG
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: LD_INT 4
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 2
50224: PUSH
50225: LD_INT 2
50227: NEG
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 2
50235: NEG
50236: PUSH
50237: LD_INT 4
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 4
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 4
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 5
50268: PUSH
50269: LD_INT 0
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 5
50278: PUSH
50279: LD_INT 1
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 4
50288: PUSH
50289: LD_INT 1
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 3
50298: PUSH
50299: LD_INT 0
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 3
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 3
50319: PUSH
50320: LD_INT 2
50322: NEG
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 5
50330: PUSH
50331: LD_INT 2
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 3
50340: PUSH
50341: LD_INT 3
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 3
50350: PUSH
50351: LD_INT 2
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 4
50360: PUSH
50361: LD_INT 3
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 4
50370: PUSH
50371: LD_INT 4
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 3
50380: PUSH
50381: LD_INT 4
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 2
50390: PUSH
50391: LD_INT 3
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 2
50400: PUSH
50401: LD_INT 2
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 4
50410: PUSH
50411: LD_INT 2
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 2
50420: PUSH
50421: LD_INT 4
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 0
50430: PUSH
50431: LD_INT 4
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: LD_INT 3
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 1
50450: PUSH
50451: LD_INT 4
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 1
50460: PUSH
50461: LD_INT 5
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 0
50470: PUSH
50471: LD_INT 5
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 1
50480: NEG
50481: PUSH
50482: LD_INT 4
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: LD_INT 3
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 2
50502: PUSH
50503: LD_INT 5
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 2
50512: NEG
50513: PUSH
50514: LD_INT 3
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
50568: LD_ADDR_VAR 0 34
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: LD_INT 4
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: LD_INT 5
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: LD_INT 4
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 1
50608: PUSH
50609: LD_INT 3
50611: NEG
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: LD_INT 3
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: LD_INT 4
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 1
50642: NEG
50643: PUSH
50644: LD_INT 5
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 2
50654: PUSH
50655: LD_INT 3
50657: NEG
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 2
50665: NEG
50666: PUSH
50667: LD_INT 5
50669: NEG
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 3
50677: PUSH
50678: LD_INT 0
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 3
50687: PUSH
50688: LD_INT 1
50690: NEG
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 4
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 4
50708: PUSH
50709: LD_INT 1
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 3
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 2
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 2
50738: PUSH
50739: LD_INT 1
50741: NEG
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 2
50749: PUSH
50750: LD_INT 2
50752: NEG
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 4
50760: PUSH
50761: LD_INT 2
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 4
50770: PUSH
50771: LD_INT 4
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 4
50780: PUSH
50781: LD_INT 3
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 5
50790: PUSH
50791: LD_INT 4
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 5
50800: PUSH
50801: LD_INT 5
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 4
50810: PUSH
50811: LD_INT 5
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 3
50820: PUSH
50821: LD_INT 4
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 3
50830: PUSH
50831: LD_INT 3
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 5
50840: PUSH
50841: LD_INT 3
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 3
50850: PUSH
50851: LD_INT 5
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: LD_INT 3
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: LD_INT 2
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: LD_INT 3
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: LD_INT 4
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 0
50900: PUSH
50901: LD_INT 4
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: LD_INT 3
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: LD_INT 2
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 2
50932: PUSH
50933: LD_INT 4
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 2
50942: NEG
50943: PUSH
50944: LD_INT 2
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 4
50953: NEG
50954: PUSH
50955: LD_INT 0
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 4
50964: NEG
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 3
50976: NEG
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 3
50987: NEG
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 4
50998: NEG
50999: PUSH
51000: LD_INT 1
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 5
51009: NEG
51010: PUSH
51011: LD_INT 0
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 5
51020: NEG
51021: PUSH
51022: LD_INT 1
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 5
51032: NEG
51033: PUSH
51034: LD_INT 2
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 3
51044: NEG
51045: PUSH
51046: LD_INT 2
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: ST_TO_ADDR
// end ; end ;
51100: GO 51103
51102: POP
// case btype of b_depot , b_warehouse :
51103: LD_VAR 0 1
51107: PUSH
51108: LD_INT 0
51110: DOUBLE
51111: EQUAL
51112: IFTRUE 51122
51114: LD_INT 1
51116: DOUBLE
51117: EQUAL
51118: IFTRUE 51122
51120: GO 51323
51122: POP
// case nation of nation_american :
51123: LD_VAR 0 5
51127: PUSH
51128: LD_INT 1
51130: DOUBLE
51131: EQUAL
51132: IFTRUE 51136
51134: GO 51192
51136: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
51137: LD_ADDR_VAR 0 9
51141: PUSH
51142: LD_VAR 0 11
51146: PUSH
51147: LD_VAR 0 12
51151: PUSH
51152: LD_VAR 0 13
51156: PUSH
51157: LD_VAR 0 14
51161: PUSH
51162: LD_VAR 0 15
51166: PUSH
51167: LD_VAR 0 16
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: PUSH
51180: LD_VAR 0 4
51184: PUSH
51185: LD_INT 1
51187: PLUS
51188: ARRAY
51189: ST_TO_ADDR
51190: GO 51321
51192: LD_INT 2
51194: DOUBLE
51195: EQUAL
51196: IFTRUE 51200
51198: GO 51256
51200: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
51201: LD_ADDR_VAR 0 9
51205: PUSH
51206: LD_VAR 0 17
51210: PUSH
51211: LD_VAR 0 18
51215: PUSH
51216: LD_VAR 0 19
51220: PUSH
51221: LD_VAR 0 20
51225: PUSH
51226: LD_VAR 0 21
51230: PUSH
51231: LD_VAR 0 22
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: PUSH
51244: LD_VAR 0 4
51248: PUSH
51249: LD_INT 1
51251: PLUS
51252: ARRAY
51253: ST_TO_ADDR
51254: GO 51321
51256: LD_INT 3
51258: DOUBLE
51259: EQUAL
51260: IFTRUE 51264
51262: GO 51320
51264: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51265: LD_ADDR_VAR 0 9
51269: PUSH
51270: LD_VAR 0 23
51274: PUSH
51275: LD_VAR 0 24
51279: PUSH
51280: LD_VAR 0 25
51284: PUSH
51285: LD_VAR 0 26
51289: PUSH
51290: LD_VAR 0 27
51294: PUSH
51295: LD_VAR 0 28
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: PUSH
51308: LD_VAR 0 4
51312: PUSH
51313: LD_INT 1
51315: PLUS
51316: ARRAY
51317: ST_TO_ADDR
51318: GO 51321
51320: POP
51321: GO 51876
51323: LD_INT 2
51325: DOUBLE
51326: EQUAL
51327: IFTRUE 51337
51329: LD_INT 3
51331: DOUBLE
51332: EQUAL
51333: IFTRUE 51337
51335: GO 51393
51337: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51338: LD_ADDR_VAR 0 9
51342: PUSH
51343: LD_VAR 0 29
51347: PUSH
51348: LD_VAR 0 30
51352: PUSH
51353: LD_VAR 0 31
51357: PUSH
51358: LD_VAR 0 32
51362: PUSH
51363: LD_VAR 0 33
51367: PUSH
51368: LD_VAR 0 34
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: PUSH
51381: LD_VAR 0 4
51385: PUSH
51386: LD_INT 1
51388: PLUS
51389: ARRAY
51390: ST_TO_ADDR
51391: GO 51876
51393: LD_INT 16
51395: DOUBLE
51396: EQUAL
51397: IFTRUE 51455
51399: LD_INT 17
51401: DOUBLE
51402: EQUAL
51403: IFTRUE 51455
51405: LD_INT 18
51407: DOUBLE
51408: EQUAL
51409: IFTRUE 51455
51411: LD_INT 19
51413: DOUBLE
51414: EQUAL
51415: IFTRUE 51455
51417: LD_INT 22
51419: DOUBLE
51420: EQUAL
51421: IFTRUE 51455
51423: LD_INT 20
51425: DOUBLE
51426: EQUAL
51427: IFTRUE 51455
51429: LD_INT 21
51431: DOUBLE
51432: EQUAL
51433: IFTRUE 51455
51435: LD_INT 23
51437: DOUBLE
51438: EQUAL
51439: IFTRUE 51455
51441: LD_INT 24
51443: DOUBLE
51444: EQUAL
51445: IFTRUE 51455
51447: LD_INT 25
51449: DOUBLE
51450: EQUAL
51451: IFTRUE 51455
51453: GO 51511
51455: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51456: LD_ADDR_VAR 0 9
51460: PUSH
51461: LD_VAR 0 35
51465: PUSH
51466: LD_VAR 0 36
51470: PUSH
51471: LD_VAR 0 37
51475: PUSH
51476: LD_VAR 0 38
51480: PUSH
51481: LD_VAR 0 39
51485: PUSH
51486: LD_VAR 0 40
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: PUSH
51499: LD_VAR 0 4
51503: PUSH
51504: LD_INT 1
51506: PLUS
51507: ARRAY
51508: ST_TO_ADDR
51509: GO 51876
51511: LD_INT 6
51513: DOUBLE
51514: EQUAL
51515: IFTRUE 51567
51517: LD_INT 7
51519: DOUBLE
51520: EQUAL
51521: IFTRUE 51567
51523: LD_INT 8
51525: DOUBLE
51526: EQUAL
51527: IFTRUE 51567
51529: LD_INT 13
51531: DOUBLE
51532: EQUAL
51533: IFTRUE 51567
51535: LD_INT 12
51537: DOUBLE
51538: EQUAL
51539: IFTRUE 51567
51541: LD_INT 15
51543: DOUBLE
51544: EQUAL
51545: IFTRUE 51567
51547: LD_INT 11
51549: DOUBLE
51550: EQUAL
51551: IFTRUE 51567
51553: LD_INT 14
51555: DOUBLE
51556: EQUAL
51557: IFTRUE 51567
51559: LD_INT 10
51561: DOUBLE
51562: EQUAL
51563: IFTRUE 51567
51565: GO 51623
51567: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
51568: LD_ADDR_VAR 0 9
51572: PUSH
51573: LD_VAR 0 41
51577: PUSH
51578: LD_VAR 0 42
51582: PUSH
51583: LD_VAR 0 43
51587: PUSH
51588: LD_VAR 0 44
51592: PUSH
51593: LD_VAR 0 45
51597: PUSH
51598: LD_VAR 0 46
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: PUSH
51611: LD_VAR 0 4
51615: PUSH
51616: LD_INT 1
51618: PLUS
51619: ARRAY
51620: ST_TO_ADDR
51621: GO 51876
51623: LD_INT 36
51625: DOUBLE
51626: EQUAL
51627: IFTRUE 51631
51629: GO 51687
51631: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
51632: LD_ADDR_VAR 0 9
51636: PUSH
51637: LD_VAR 0 47
51641: PUSH
51642: LD_VAR 0 48
51646: PUSH
51647: LD_VAR 0 49
51651: PUSH
51652: LD_VAR 0 50
51656: PUSH
51657: LD_VAR 0 51
51661: PUSH
51662: LD_VAR 0 52
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: PUSH
51675: LD_VAR 0 4
51679: PUSH
51680: LD_INT 1
51682: PLUS
51683: ARRAY
51684: ST_TO_ADDR
51685: GO 51876
51687: LD_INT 4
51689: DOUBLE
51690: EQUAL
51691: IFTRUE 51713
51693: LD_INT 5
51695: DOUBLE
51696: EQUAL
51697: IFTRUE 51713
51699: LD_INT 34
51701: DOUBLE
51702: EQUAL
51703: IFTRUE 51713
51705: LD_INT 37
51707: DOUBLE
51708: EQUAL
51709: IFTRUE 51713
51711: GO 51769
51713: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
51714: LD_ADDR_VAR 0 9
51718: PUSH
51719: LD_VAR 0 53
51723: PUSH
51724: LD_VAR 0 54
51728: PUSH
51729: LD_VAR 0 55
51733: PUSH
51734: LD_VAR 0 56
51738: PUSH
51739: LD_VAR 0 57
51743: PUSH
51744: LD_VAR 0 58
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: PUSH
51757: LD_VAR 0 4
51761: PUSH
51762: LD_INT 1
51764: PLUS
51765: ARRAY
51766: ST_TO_ADDR
51767: GO 51876
51769: LD_INT 31
51771: DOUBLE
51772: EQUAL
51773: IFTRUE 51819
51775: LD_INT 32
51777: DOUBLE
51778: EQUAL
51779: IFTRUE 51819
51781: LD_INT 33
51783: DOUBLE
51784: EQUAL
51785: IFTRUE 51819
51787: LD_INT 27
51789: DOUBLE
51790: EQUAL
51791: IFTRUE 51819
51793: LD_INT 26
51795: DOUBLE
51796: EQUAL
51797: IFTRUE 51819
51799: LD_INT 28
51801: DOUBLE
51802: EQUAL
51803: IFTRUE 51819
51805: LD_INT 29
51807: DOUBLE
51808: EQUAL
51809: IFTRUE 51819
51811: LD_INT 30
51813: DOUBLE
51814: EQUAL
51815: IFTRUE 51819
51817: GO 51875
51819: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
51820: LD_ADDR_VAR 0 9
51824: PUSH
51825: LD_VAR 0 59
51829: PUSH
51830: LD_VAR 0 60
51834: PUSH
51835: LD_VAR 0 61
51839: PUSH
51840: LD_VAR 0 62
51844: PUSH
51845: LD_VAR 0 63
51849: PUSH
51850: LD_VAR 0 64
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: PUSH
51863: LD_VAR 0 4
51867: PUSH
51868: LD_INT 1
51870: PLUS
51871: ARRAY
51872: ST_TO_ADDR
51873: GO 51876
51875: POP
// temp_list2 = [ ] ;
51876: LD_ADDR_VAR 0 10
51880: PUSH
51881: EMPTY
51882: ST_TO_ADDR
// for i in temp_list do
51883: LD_ADDR_VAR 0 8
51887: PUSH
51888: LD_VAR 0 9
51892: PUSH
51893: FOR_IN
51894: IFFALSE 51946
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
51896: LD_ADDR_VAR 0 10
51900: PUSH
51901: LD_VAR 0 10
51905: PUSH
51906: LD_VAR 0 8
51910: PUSH
51911: LD_INT 1
51913: ARRAY
51914: PUSH
51915: LD_VAR 0 2
51919: PLUS
51920: PUSH
51921: LD_VAR 0 8
51925: PUSH
51926: LD_INT 2
51928: ARRAY
51929: PUSH
51930: LD_VAR 0 3
51934: PLUS
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: EMPTY
51941: LIST
51942: ADD
51943: ST_TO_ADDR
51944: GO 51893
51946: POP
51947: POP
// result = temp_list2 ;
51948: LD_ADDR_VAR 0 7
51952: PUSH
51953: LD_VAR 0 10
51957: ST_TO_ADDR
// end ;
51958: LD_VAR 0 7
51962: RET
// export function EnemyInRange ( unit , dist ) ; begin
51963: LD_INT 0
51965: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
51966: LD_ADDR_VAR 0 3
51970: PUSH
51971: LD_VAR 0 1
51975: PPUSH
51976: CALL_OW 255
51980: PPUSH
51981: LD_VAR 0 1
51985: PPUSH
51986: CALL_OW 250
51990: PPUSH
51991: LD_VAR 0 1
51995: PPUSH
51996: CALL_OW 251
52000: PPUSH
52001: LD_VAR 0 2
52005: PPUSH
52006: CALL 25359 0 4
52010: PUSH
52011: LD_INT 4
52013: ARRAY
52014: ST_TO_ADDR
// end ;
52015: LD_VAR 0 3
52019: RET
// export function PlayerSeeMe ( unit ) ; begin
52020: LD_INT 0
52022: PPUSH
// result := See ( your_side , unit ) ;
52023: LD_ADDR_VAR 0 2
52027: PUSH
52028: LD_OWVAR 2
52032: PPUSH
52033: LD_VAR 0 1
52037: PPUSH
52038: CALL_OW 292
52042: ST_TO_ADDR
// end ;
52043: LD_VAR 0 2
52047: RET
// export function ReverseDir ( unit ) ; begin
52048: LD_INT 0
52050: PPUSH
// if not unit then
52051: LD_VAR 0 1
52055: NOT
52056: IFFALSE 52060
// exit ;
52058: GO 52083
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52060: LD_ADDR_VAR 0 2
52064: PUSH
52065: LD_VAR 0 1
52069: PPUSH
52070: CALL_OW 254
52074: PUSH
52075: LD_INT 3
52077: PLUS
52078: PUSH
52079: LD_INT 6
52081: MOD
52082: ST_TO_ADDR
// end ;
52083: LD_VAR 0 2
52087: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52088: LD_INT 0
52090: PPUSH
52091: PPUSH
52092: PPUSH
52093: PPUSH
52094: PPUSH
// if not hexes then
52095: LD_VAR 0 2
52099: NOT
52100: IFFALSE 52104
// exit ;
52102: GO 52252
// dist := 9999 ;
52104: LD_ADDR_VAR 0 5
52108: PUSH
52109: LD_INT 9999
52111: ST_TO_ADDR
// for i = 1 to hexes do
52112: LD_ADDR_VAR 0 4
52116: PUSH
52117: DOUBLE
52118: LD_INT 1
52120: DEC
52121: ST_TO_ADDR
52122: LD_VAR 0 2
52126: PUSH
52127: FOR_TO
52128: IFFALSE 52240
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52130: LD_VAR 0 1
52134: PPUSH
52135: LD_VAR 0 2
52139: PUSH
52140: LD_VAR 0 4
52144: ARRAY
52145: PUSH
52146: LD_INT 1
52148: ARRAY
52149: PPUSH
52150: LD_VAR 0 2
52154: PUSH
52155: LD_VAR 0 4
52159: ARRAY
52160: PUSH
52161: LD_INT 2
52163: ARRAY
52164: PPUSH
52165: CALL_OW 297
52169: PUSH
52170: LD_VAR 0 5
52174: LESS
52175: IFFALSE 52238
// begin hex := hexes [ i ] ;
52177: LD_ADDR_VAR 0 7
52181: PUSH
52182: LD_VAR 0 2
52186: PUSH
52187: LD_VAR 0 4
52191: ARRAY
52192: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52193: LD_ADDR_VAR 0 5
52197: PUSH
52198: LD_VAR 0 1
52202: PPUSH
52203: LD_VAR 0 2
52207: PUSH
52208: LD_VAR 0 4
52212: ARRAY
52213: PUSH
52214: LD_INT 1
52216: ARRAY
52217: PPUSH
52218: LD_VAR 0 2
52222: PUSH
52223: LD_VAR 0 4
52227: ARRAY
52228: PUSH
52229: LD_INT 2
52231: ARRAY
52232: PPUSH
52233: CALL_OW 297
52237: ST_TO_ADDR
// end ; end ;
52238: GO 52127
52240: POP
52241: POP
// result := hex ;
52242: LD_ADDR_VAR 0 3
52246: PUSH
52247: LD_VAR 0 7
52251: ST_TO_ADDR
// end ;
52252: LD_VAR 0 3
52256: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52257: LD_INT 0
52259: PPUSH
52260: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52261: LD_VAR 0 1
52265: NOT
52266: PUSH
52267: LD_VAR 0 1
52271: PUSH
52272: LD_INT 21
52274: PUSH
52275: LD_INT 2
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 23
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PPUSH
52296: CALL_OW 69
52300: IN
52301: NOT
52302: OR
52303: IFFALSE 52307
// exit ;
52305: GO 52354
// for i = 1 to 3 do
52307: LD_ADDR_VAR 0 3
52311: PUSH
52312: DOUBLE
52313: LD_INT 1
52315: DEC
52316: ST_TO_ADDR
52317: LD_INT 3
52319: PUSH
52320: FOR_TO
52321: IFFALSE 52352
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52323: LD_VAR 0 1
52327: PPUSH
52328: CALL_OW 250
52332: PPUSH
52333: LD_VAR 0 1
52337: PPUSH
52338: CALL_OW 251
52342: PPUSH
52343: LD_INT 1
52345: PPUSH
52346: CALL_OW 453
52350: GO 52320
52352: POP
52353: POP
// end ;
52354: LD_VAR 0 2
52358: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52359: LD_INT 0
52361: PPUSH
52362: PPUSH
52363: PPUSH
52364: PPUSH
52365: PPUSH
52366: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52367: LD_VAR 0 1
52371: NOT
52372: PUSH
52373: LD_VAR 0 2
52377: NOT
52378: OR
52379: PUSH
52380: LD_VAR 0 1
52384: PPUSH
52385: CALL_OW 314
52389: OR
52390: IFFALSE 52394
// exit ;
52392: GO 52835
// x := GetX ( enemy_unit ) ;
52394: LD_ADDR_VAR 0 7
52398: PUSH
52399: LD_VAR 0 2
52403: PPUSH
52404: CALL_OW 250
52408: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52409: LD_ADDR_VAR 0 8
52413: PUSH
52414: LD_VAR 0 2
52418: PPUSH
52419: CALL_OW 251
52423: ST_TO_ADDR
// if not x or not y then
52424: LD_VAR 0 7
52428: NOT
52429: PUSH
52430: LD_VAR 0 8
52434: NOT
52435: OR
52436: IFFALSE 52440
// exit ;
52438: GO 52835
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52440: LD_ADDR_VAR 0 6
52444: PUSH
52445: LD_VAR 0 7
52449: PPUSH
52450: LD_INT 0
52452: PPUSH
52453: LD_INT 4
52455: PPUSH
52456: CALL_OW 272
52460: PUSH
52461: LD_VAR 0 8
52465: PPUSH
52466: LD_INT 0
52468: PPUSH
52469: LD_INT 4
52471: PPUSH
52472: CALL_OW 273
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_VAR 0 7
52485: PPUSH
52486: LD_INT 1
52488: PPUSH
52489: LD_INT 4
52491: PPUSH
52492: CALL_OW 272
52496: PUSH
52497: LD_VAR 0 8
52501: PPUSH
52502: LD_INT 1
52504: PPUSH
52505: LD_INT 4
52507: PPUSH
52508: CALL_OW 273
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_VAR 0 7
52521: PPUSH
52522: LD_INT 2
52524: PPUSH
52525: LD_INT 4
52527: PPUSH
52528: CALL_OW 272
52532: PUSH
52533: LD_VAR 0 8
52537: PPUSH
52538: LD_INT 2
52540: PPUSH
52541: LD_INT 4
52543: PPUSH
52544: CALL_OW 273
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_VAR 0 7
52557: PPUSH
52558: LD_INT 3
52560: PPUSH
52561: LD_INT 4
52563: PPUSH
52564: CALL_OW 272
52568: PUSH
52569: LD_VAR 0 8
52573: PPUSH
52574: LD_INT 3
52576: PPUSH
52577: LD_INT 4
52579: PPUSH
52580: CALL_OW 273
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_VAR 0 7
52593: PPUSH
52594: LD_INT 4
52596: PPUSH
52597: LD_INT 4
52599: PPUSH
52600: CALL_OW 272
52604: PUSH
52605: LD_VAR 0 8
52609: PPUSH
52610: LD_INT 4
52612: PPUSH
52613: LD_INT 4
52615: PPUSH
52616: CALL_OW 273
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_VAR 0 7
52629: PPUSH
52630: LD_INT 5
52632: PPUSH
52633: LD_INT 4
52635: PPUSH
52636: CALL_OW 272
52640: PUSH
52641: LD_VAR 0 8
52645: PPUSH
52646: LD_INT 5
52648: PPUSH
52649: LD_INT 4
52651: PPUSH
52652: CALL_OW 273
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: ST_TO_ADDR
// for i = tmp downto 1 do
52669: LD_ADDR_VAR 0 4
52673: PUSH
52674: DOUBLE
52675: LD_VAR 0 6
52679: INC
52680: ST_TO_ADDR
52681: LD_INT 1
52683: PUSH
52684: FOR_DOWNTO
52685: IFFALSE 52786
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
52687: LD_VAR 0 6
52691: PUSH
52692: LD_VAR 0 4
52696: ARRAY
52697: PUSH
52698: LD_INT 1
52700: ARRAY
52701: PPUSH
52702: LD_VAR 0 6
52706: PUSH
52707: LD_VAR 0 4
52711: ARRAY
52712: PUSH
52713: LD_INT 2
52715: ARRAY
52716: PPUSH
52717: CALL_OW 488
52721: NOT
52722: PUSH
52723: LD_VAR 0 6
52727: PUSH
52728: LD_VAR 0 4
52732: ARRAY
52733: PUSH
52734: LD_INT 1
52736: ARRAY
52737: PPUSH
52738: LD_VAR 0 6
52742: PUSH
52743: LD_VAR 0 4
52747: ARRAY
52748: PUSH
52749: LD_INT 2
52751: ARRAY
52752: PPUSH
52753: CALL_OW 428
52757: PUSH
52758: LD_INT 0
52760: NONEQUAL
52761: OR
52762: IFFALSE 52784
// tmp := Delete ( tmp , i ) ;
52764: LD_ADDR_VAR 0 6
52768: PUSH
52769: LD_VAR 0 6
52773: PPUSH
52774: LD_VAR 0 4
52778: PPUSH
52779: CALL_OW 3
52783: ST_TO_ADDR
52784: GO 52684
52786: POP
52787: POP
// j := GetClosestHex ( unit , tmp ) ;
52788: LD_ADDR_VAR 0 5
52792: PUSH
52793: LD_VAR 0 1
52797: PPUSH
52798: LD_VAR 0 6
52802: PPUSH
52803: CALL 52088 0 2
52807: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
52808: LD_VAR 0 1
52812: PPUSH
52813: LD_VAR 0 5
52817: PUSH
52818: LD_INT 1
52820: ARRAY
52821: PPUSH
52822: LD_VAR 0 5
52826: PUSH
52827: LD_INT 2
52829: ARRAY
52830: PPUSH
52831: CALL_OW 111
// end ;
52835: LD_VAR 0 3
52839: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
52840: LD_INT 0
52842: PPUSH
52843: PPUSH
52844: PPUSH
// uc_side = 0 ;
52845: LD_ADDR_OWVAR 20
52849: PUSH
52850: LD_INT 0
52852: ST_TO_ADDR
// uc_nation = 0 ;
52853: LD_ADDR_OWVAR 21
52857: PUSH
52858: LD_INT 0
52860: ST_TO_ADDR
// InitHc_All ( ) ;
52861: CALL_OW 584
// InitVc ;
52865: CALL_OW 20
// if mastodonts then
52869: LD_VAR 0 6
52873: IFFALSE 52940
// for i = 1 to mastodonts do
52875: LD_ADDR_VAR 0 11
52879: PUSH
52880: DOUBLE
52881: LD_INT 1
52883: DEC
52884: ST_TO_ADDR
52885: LD_VAR 0 6
52889: PUSH
52890: FOR_TO
52891: IFFALSE 52938
// begin vc_chassis := 31 ;
52893: LD_ADDR_OWVAR 37
52897: PUSH
52898: LD_INT 31
52900: ST_TO_ADDR
// vc_control := control_rider ;
52901: LD_ADDR_OWVAR 38
52905: PUSH
52906: LD_INT 4
52908: ST_TO_ADDR
// animal := CreateVehicle ;
52909: LD_ADDR_VAR 0 12
52913: PUSH
52914: CALL_OW 45
52918: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52919: LD_VAR 0 12
52923: PPUSH
52924: LD_VAR 0 8
52928: PPUSH
52929: LD_INT 0
52931: PPUSH
52932: CALL 55075 0 3
// end ;
52936: GO 52890
52938: POP
52939: POP
// if horses then
52940: LD_VAR 0 5
52944: IFFALSE 53011
// for i = 1 to horses do
52946: LD_ADDR_VAR 0 11
52950: PUSH
52951: DOUBLE
52952: LD_INT 1
52954: DEC
52955: ST_TO_ADDR
52956: LD_VAR 0 5
52960: PUSH
52961: FOR_TO
52962: IFFALSE 53009
// begin hc_class := 21 ;
52964: LD_ADDR_OWVAR 28
52968: PUSH
52969: LD_INT 21
52971: ST_TO_ADDR
// hc_gallery :=  ;
52972: LD_ADDR_OWVAR 33
52976: PUSH
52977: LD_STRING 
52979: ST_TO_ADDR
// animal := CreateHuman ;
52980: LD_ADDR_VAR 0 12
52984: PUSH
52985: CALL_OW 44
52989: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52990: LD_VAR 0 12
52994: PPUSH
52995: LD_VAR 0 8
52999: PPUSH
53000: LD_INT 0
53002: PPUSH
53003: CALL 55075 0 3
// end ;
53007: GO 52961
53009: POP
53010: POP
// if birds then
53011: LD_VAR 0 1
53015: IFFALSE 53082
// for i = 1 to birds do
53017: LD_ADDR_VAR 0 11
53021: PUSH
53022: DOUBLE
53023: LD_INT 1
53025: DEC
53026: ST_TO_ADDR
53027: LD_VAR 0 1
53031: PUSH
53032: FOR_TO
53033: IFFALSE 53080
// begin hc_class = 18 ;
53035: LD_ADDR_OWVAR 28
53039: PUSH
53040: LD_INT 18
53042: ST_TO_ADDR
// hc_gallery =  ;
53043: LD_ADDR_OWVAR 33
53047: PUSH
53048: LD_STRING 
53050: ST_TO_ADDR
// animal := CreateHuman ;
53051: LD_ADDR_VAR 0 12
53055: PUSH
53056: CALL_OW 44
53060: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53061: LD_VAR 0 12
53065: PPUSH
53066: LD_VAR 0 8
53070: PPUSH
53071: LD_INT 0
53073: PPUSH
53074: CALL 55075 0 3
// end ;
53078: GO 53032
53080: POP
53081: POP
// if tigers then
53082: LD_VAR 0 2
53086: IFFALSE 53170
// for i = 1 to tigers do
53088: LD_ADDR_VAR 0 11
53092: PUSH
53093: DOUBLE
53094: LD_INT 1
53096: DEC
53097: ST_TO_ADDR
53098: LD_VAR 0 2
53102: PUSH
53103: FOR_TO
53104: IFFALSE 53168
// begin hc_class = class_tiger ;
53106: LD_ADDR_OWVAR 28
53110: PUSH
53111: LD_INT 14
53113: ST_TO_ADDR
// hc_gallery =  ;
53114: LD_ADDR_OWVAR 33
53118: PUSH
53119: LD_STRING 
53121: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53122: LD_ADDR_OWVAR 35
53126: PUSH
53127: LD_INT 7
53129: NEG
53130: PPUSH
53131: LD_INT 7
53133: PPUSH
53134: CALL_OW 12
53138: ST_TO_ADDR
// animal := CreateHuman ;
53139: LD_ADDR_VAR 0 12
53143: PUSH
53144: CALL_OW 44
53148: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53149: LD_VAR 0 12
53153: PPUSH
53154: LD_VAR 0 8
53158: PPUSH
53159: LD_INT 0
53161: PPUSH
53162: CALL 55075 0 3
// end ;
53166: GO 53103
53168: POP
53169: POP
// if apemans then
53170: LD_VAR 0 3
53174: IFFALSE 53297
// for i = 1 to apemans do
53176: LD_ADDR_VAR 0 11
53180: PUSH
53181: DOUBLE
53182: LD_INT 1
53184: DEC
53185: ST_TO_ADDR
53186: LD_VAR 0 3
53190: PUSH
53191: FOR_TO
53192: IFFALSE 53295
// begin hc_class = class_apeman ;
53194: LD_ADDR_OWVAR 28
53198: PUSH
53199: LD_INT 12
53201: ST_TO_ADDR
// hc_gallery =  ;
53202: LD_ADDR_OWVAR 33
53206: PUSH
53207: LD_STRING 
53209: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
53210: LD_ADDR_OWVAR 35
53214: PUSH
53215: LD_INT 2
53217: NEG
53218: PPUSH
53219: LD_INT 2
53221: PPUSH
53222: CALL_OW 12
53226: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53227: LD_ADDR_OWVAR 31
53231: PUSH
53232: LD_INT 1
53234: PPUSH
53235: LD_INT 3
53237: PPUSH
53238: CALL_OW 12
53242: PUSH
53243: LD_INT 1
53245: PPUSH
53246: LD_INT 3
53248: PPUSH
53249: CALL_OW 12
53253: PUSH
53254: LD_INT 0
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: ST_TO_ADDR
// animal := CreateHuman ;
53266: LD_ADDR_VAR 0 12
53270: PUSH
53271: CALL_OW 44
53275: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53276: LD_VAR 0 12
53280: PPUSH
53281: LD_VAR 0 8
53285: PPUSH
53286: LD_INT 0
53288: PPUSH
53289: CALL 55075 0 3
// end ;
53293: GO 53191
53295: POP
53296: POP
// if enchidnas then
53297: LD_VAR 0 4
53301: IFFALSE 53368
// for i = 1 to enchidnas do
53303: LD_ADDR_VAR 0 11
53307: PUSH
53308: DOUBLE
53309: LD_INT 1
53311: DEC
53312: ST_TO_ADDR
53313: LD_VAR 0 4
53317: PUSH
53318: FOR_TO
53319: IFFALSE 53366
// begin hc_class = 13 ;
53321: LD_ADDR_OWVAR 28
53325: PUSH
53326: LD_INT 13
53328: ST_TO_ADDR
// hc_gallery =  ;
53329: LD_ADDR_OWVAR 33
53333: PUSH
53334: LD_STRING 
53336: ST_TO_ADDR
// animal := CreateHuman ;
53337: LD_ADDR_VAR 0 12
53341: PUSH
53342: CALL_OW 44
53346: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53347: LD_VAR 0 12
53351: PPUSH
53352: LD_VAR 0 8
53356: PPUSH
53357: LD_INT 0
53359: PPUSH
53360: CALL 55075 0 3
// end ;
53364: GO 53318
53366: POP
53367: POP
// if fishes then
53368: LD_VAR 0 7
53372: IFFALSE 53439
// for i = 1 to fishes do
53374: LD_ADDR_VAR 0 11
53378: PUSH
53379: DOUBLE
53380: LD_INT 1
53382: DEC
53383: ST_TO_ADDR
53384: LD_VAR 0 7
53388: PUSH
53389: FOR_TO
53390: IFFALSE 53437
// begin hc_class = 20 ;
53392: LD_ADDR_OWVAR 28
53396: PUSH
53397: LD_INT 20
53399: ST_TO_ADDR
// hc_gallery =  ;
53400: LD_ADDR_OWVAR 33
53404: PUSH
53405: LD_STRING 
53407: ST_TO_ADDR
// animal := CreateHuman ;
53408: LD_ADDR_VAR 0 12
53412: PUSH
53413: CALL_OW 44
53417: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53418: LD_VAR 0 12
53422: PPUSH
53423: LD_VAR 0 9
53427: PPUSH
53428: LD_INT 0
53430: PPUSH
53431: CALL 55075 0 3
// end ;
53435: GO 53389
53437: POP
53438: POP
// end ;
53439: LD_VAR 0 10
53443: RET
// export function WantHeal ( sci , unit ) ; begin
53444: LD_INT 0
53446: PPUSH
// if GetTaskList ( sci ) > 0 then
53447: LD_VAR 0 1
53451: PPUSH
53452: CALL_OW 437
53456: PUSH
53457: LD_INT 0
53459: GREATER
53460: IFFALSE 53530
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53462: LD_VAR 0 1
53466: PPUSH
53467: CALL_OW 437
53471: PUSH
53472: LD_INT 1
53474: ARRAY
53475: PUSH
53476: LD_INT 1
53478: ARRAY
53479: PUSH
53480: LD_STRING l
53482: EQUAL
53483: PUSH
53484: LD_VAR 0 1
53488: PPUSH
53489: CALL_OW 437
53493: PUSH
53494: LD_INT 1
53496: ARRAY
53497: PUSH
53498: LD_INT 4
53500: ARRAY
53501: PUSH
53502: LD_VAR 0 2
53506: EQUAL
53507: AND
53508: IFFALSE 53520
// result := true else
53510: LD_ADDR_VAR 0 3
53514: PUSH
53515: LD_INT 1
53517: ST_TO_ADDR
53518: GO 53528
// result := false ;
53520: LD_ADDR_VAR 0 3
53524: PUSH
53525: LD_INT 0
53527: ST_TO_ADDR
// end else
53528: GO 53538
// result := false ;
53530: LD_ADDR_VAR 0 3
53534: PUSH
53535: LD_INT 0
53537: ST_TO_ADDR
// end ;
53538: LD_VAR 0 3
53542: RET
// export function HealTarget ( sci ) ; begin
53543: LD_INT 0
53545: PPUSH
// if not sci then
53546: LD_VAR 0 1
53550: NOT
53551: IFFALSE 53555
// exit ;
53553: GO 53620
// result := 0 ;
53555: LD_ADDR_VAR 0 2
53559: PUSH
53560: LD_INT 0
53562: ST_TO_ADDR
// if GetTaskList ( sci ) then
53563: LD_VAR 0 1
53567: PPUSH
53568: CALL_OW 437
53572: IFFALSE 53620
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
53574: LD_VAR 0 1
53578: PPUSH
53579: CALL_OW 437
53583: PUSH
53584: LD_INT 1
53586: ARRAY
53587: PUSH
53588: LD_INT 1
53590: ARRAY
53591: PUSH
53592: LD_STRING l
53594: EQUAL
53595: IFFALSE 53620
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
53597: LD_ADDR_VAR 0 2
53601: PUSH
53602: LD_VAR 0 1
53606: PPUSH
53607: CALL_OW 437
53611: PUSH
53612: LD_INT 1
53614: ARRAY
53615: PUSH
53616: LD_INT 4
53618: ARRAY
53619: ST_TO_ADDR
// end ;
53620: LD_VAR 0 2
53624: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
53625: LD_INT 0
53627: PPUSH
53628: PPUSH
53629: PPUSH
53630: PPUSH
// if not base_units then
53631: LD_VAR 0 1
53635: NOT
53636: IFFALSE 53640
// exit ;
53638: GO 53727
// result := false ;
53640: LD_ADDR_VAR 0 2
53644: PUSH
53645: LD_INT 0
53647: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
53648: LD_ADDR_VAR 0 5
53652: PUSH
53653: LD_VAR 0 1
53657: PPUSH
53658: LD_INT 21
53660: PUSH
53661: LD_INT 3
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PPUSH
53668: CALL_OW 72
53672: ST_TO_ADDR
// if not tmp then
53673: LD_VAR 0 5
53677: NOT
53678: IFFALSE 53682
// exit ;
53680: GO 53727
// for i in tmp do
53682: LD_ADDR_VAR 0 3
53686: PUSH
53687: LD_VAR 0 5
53691: PUSH
53692: FOR_IN
53693: IFFALSE 53725
// begin result := EnemyInRange ( i , 22 ) ;
53695: LD_ADDR_VAR 0 2
53699: PUSH
53700: LD_VAR 0 3
53704: PPUSH
53705: LD_INT 22
53707: PPUSH
53708: CALL 51963 0 2
53712: ST_TO_ADDR
// if result then
53713: LD_VAR 0 2
53717: IFFALSE 53723
// exit ;
53719: POP
53720: POP
53721: GO 53727
// end ;
53723: GO 53692
53725: POP
53726: POP
// end ;
53727: LD_VAR 0 2
53731: RET
// export function FilterByTag ( units , tag ) ; begin
53732: LD_INT 0
53734: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
53735: LD_ADDR_VAR 0 3
53739: PUSH
53740: LD_VAR 0 1
53744: PPUSH
53745: LD_INT 120
53747: PUSH
53748: LD_VAR 0 2
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PPUSH
53757: CALL_OW 72
53761: ST_TO_ADDR
// end ;
53762: LD_VAR 0 3
53766: RET
// export function IsDriver ( un ) ; begin
53767: LD_INT 0
53769: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
53770: LD_ADDR_VAR 0 2
53774: PUSH
53775: LD_VAR 0 1
53779: PUSH
53780: LD_INT 55
53782: PUSH
53783: EMPTY
53784: LIST
53785: PPUSH
53786: CALL_OW 69
53790: IN
53791: ST_TO_ADDR
// end ;
53792: LD_VAR 0 2
53796: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
53797: LD_INT 0
53799: PPUSH
53800: PPUSH
// list := [ ] ;
53801: LD_ADDR_VAR 0 5
53805: PUSH
53806: EMPTY
53807: ST_TO_ADDR
// case d of 0 :
53808: LD_VAR 0 3
53812: PUSH
53813: LD_INT 0
53815: DOUBLE
53816: EQUAL
53817: IFTRUE 53821
53819: GO 53954
53821: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
53822: LD_ADDR_VAR 0 5
53826: PUSH
53827: LD_VAR 0 1
53831: PUSH
53832: LD_INT 4
53834: MINUS
53835: PUSH
53836: LD_VAR 0 2
53840: PUSH
53841: LD_INT 4
53843: MINUS
53844: PUSH
53845: LD_INT 2
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: LIST
53852: PUSH
53853: LD_VAR 0 1
53857: PUSH
53858: LD_INT 3
53860: MINUS
53861: PUSH
53862: LD_VAR 0 2
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: LIST
53874: PUSH
53875: LD_VAR 0 1
53879: PUSH
53880: LD_INT 4
53882: PLUS
53883: PUSH
53884: LD_VAR 0 2
53888: PUSH
53889: LD_INT 4
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: LIST
53896: PUSH
53897: LD_VAR 0 1
53901: PUSH
53902: LD_INT 3
53904: PLUS
53905: PUSH
53906: LD_VAR 0 2
53910: PUSH
53911: LD_INT 3
53913: PLUS
53914: PUSH
53915: LD_INT 5
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: LIST
53922: PUSH
53923: LD_VAR 0 1
53927: PUSH
53928: LD_VAR 0 2
53932: PUSH
53933: LD_INT 4
53935: PLUS
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: LIST
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: ST_TO_ADDR
// end ; 1 :
53952: GO 54652
53954: LD_INT 1
53956: DOUBLE
53957: EQUAL
53958: IFTRUE 53962
53960: GO 54095
53962: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53963: LD_ADDR_VAR 0 5
53967: PUSH
53968: LD_VAR 0 1
53972: PUSH
53973: LD_VAR 0 2
53977: PUSH
53978: LD_INT 4
53980: MINUS
53981: PUSH
53982: LD_INT 3
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: LIST
53989: PUSH
53990: LD_VAR 0 1
53994: PUSH
53995: LD_INT 3
53997: MINUS
53998: PUSH
53999: LD_VAR 0 2
54003: PUSH
54004: LD_INT 3
54006: MINUS
54007: PUSH
54008: LD_INT 2
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: LIST
54015: PUSH
54016: LD_VAR 0 1
54020: PUSH
54021: LD_INT 4
54023: MINUS
54024: PUSH
54025: LD_VAR 0 2
54029: PUSH
54030: LD_INT 1
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: LIST
54037: PUSH
54038: LD_VAR 0 1
54042: PUSH
54043: LD_VAR 0 2
54047: PUSH
54048: LD_INT 3
54050: PLUS
54051: PUSH
54052: LD_INT 0
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: LIST
54059: PUSH
54060: LD_VAR 0 1
54064: PUSH
54065: LD_INT 4
54067: PLUS
54068: PUSH
54069: LD_VAR 0 2
54073: PUSH
54074: LD_INT 4
54076: PLUS
54077: PUSH
54078: LD_INT 5
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: LIST
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: ST_TO_ADDR
// end ; 2 :
54093: GO 54652
54095: LD_INT 2
54097: DOUBLE
54098: EQUAL
54099: IFTRUE 54103
54101: GO 54232
54103: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54104: LD_ADDR_VAR 0 5
54108: PUSH
54109: LD_VAR 0 1
54113: PUSH
54114: LD_VAR 0 2
54118: PUSH
54119: LD_INT 3
54121: MINUS
54122: PUSH
54123: LD_INT 3
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: LIST
54130: PUSH
54131: LD_VAR 0 1
54135: PUSH
54136: LD_INT 4
54138: PLUS
54139: PUSH
54140: LD_VAR 0 2
54144: PUSH
54145: LD_INT 4
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: LIST
54152: PUSH
54153: LD_VAR 0 1
54157: PUSH
54158: LD_VAR 0 2
54162: PUSH
54163: LD_INT 4
54165: PLUS
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: LIST
54174: PUSH
54175: LD_VAR 0 1
54179: PUSH
54180: LD_INT 3
54182: MINUS
54183: PUSH
54184: LD_VAR 0 2
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: LIST
54196: PUSH
54197: LD_VAR 0 1
54201: PUSH
54202: LD_INT 4
54204: MINUS
54205: PUSH
54206: LD_VAR 0 2
54210: PUSH
54211: LD_INT 4
54213: MINUS
54214: PUSH
54215: LD_INT 2
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: LIST
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: ST_TO_ADDR
// end ; 3 :
54230: GO 54652
54232: LD_INT 3
54234: DOUBLE
54235: EQUAL
54236: IFTRUE 54240
54238: GO 54373
54240: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
54241: LD_ADDR_VAR 0 5
54245: PUSH
54246: LD_VAR 0 1
54250: PUSH
54251: LD_INT 3
54253: PLUS
54254: PUSH
54255: LD_VAR 0 2
54259: PUSH
54260: LD_INT 4
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: LIST
54267: PUSH
54268: LD_VAR 0 1
54272: PUSH
54273: LD_INT 4
54275: PLUS
54276: PUSH
54277: LD_VAR 0 2
54281: PUSH
54282: LD_INT 4
54284: PLUS
54285: PUSH
54286: LD_INT 5
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: LIST
54293: PUSH
54294: LD_VAR 0 1
54298: PUSH
54299: LD_INT 4
54301: MINUS
54302: PUSH
54303: LD_VAR 0 2
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: LIST
54315: PUSH
54316: LD_VAR 0 1
54320: PUSH
54321: LD_VAR 0 2
54325: PUSH
54326: LD_INT 4
54328: MINUS
54329: PUSH
54330: LD_INT 3
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: LIST
54337: PUSH
54338: LD_VAR 0 1
54342: PUSH
54343: LD_INT 3
54345: MINUS
54346: PUSH
54347: LD_VAR 0 2
54351: PUSH
54352: LD_INT 3
54354: MINUS
54355: PUSH
54356: LD_INT 2
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: LIST
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: ST_TO_ADDR
// end ; 4 :
54371: GO 54652
54373: LD_INT 4
54375: DOUBLE
54376: EQUAL
54377: IFTRUE 54381
54379: GO 54514
54381: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
54382: LD_ADDR_VAR 0 5
54386: PUSH
54387: LD_VAR 0 1
54391: PUSH
54392: LD_VAR 0 2
54396: PUSH
54397: LD_INT 4
54399: PLUS
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: LIST
54408: PUSH
54409: LD_VAR 0 1
54413: PUSH
54414: LD_INT 3
54416: PLUS
54417: PUSH
54418: LD_VAR 0 2
54422: PUSH
54423: LD_INT 3
54425: PLUS
54426: PUSH
54427: LD_INT 5
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: LIST
54434: PUSH
54435: LD_VAR 0 1
54439: PUSH
54440: LD_INT 4
54442: PLUS
54443: PUSH
54444: LD_VAR 0 2
54448: PUSH
54449: LD_INT 4
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: LIST
54456: PUSH
54457: LD_VAR 0 1
54461: PUSH
54462: LD_VAR 0 2
54466: PUSH
54467: LD_INT 3
54469: MINUS
54470: PUSH
54471: LD_INT 3
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: LIST
54478: PUSH
54479: LD_VAR 0 1
54483: PUSH
54484: LD_INT 4
54486: MINUS
54487: PUSH
54488: LD_VAR 0 2
54492: PUSH
54493: LD_INT 4
54495: MINUS
54496: PUSH
54497: LD_INT 2
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: LIST
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: ST_TO_ADDR
// end ; 5 :
54512: GO 54652
54514: LD_INT 5
54516: DOUBLE
54517: EQUAL
54518: IFTRUE 54522
54520: GO 54651
54522: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
54523: LD_ADDR_VAR 0 5
54527: PUSH
54528: LD_VAR 0 1
54532: PUSH
54533: LD_INT 4
54535: MINUS
54536: PUSH
54537: LD_VAR 0 2
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: LIST
54549: PUSH
54550: LD_VAR 0 1
54554: PUSH
54555: LD_VAR 0 2
54559: PUSH
54560: LD_INT 4
54562: MINUS
54563: PUSH
54564: LD_INT 3
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: LIST
54571: PUSH
54572: LD_VAR 0 1
54576: PUSH
54577: LD_INT 4
54579: PLUS
54580: PUSH
54581: LD_VAR 0 2
54585: PUSH
54586: LD_INT 4
54588: PLUS
54589: PUSH
54590: LD_INT 5
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: LIST
54597: PUSH
54598: LD_VAR 0 1
54602: PUSH
54603: LD_INT 3
54605: PLUS
54606: PUSH
54607: LD_VAR 0 2
54611: PUSH
54612: LD_INT 4
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: LIST
54619: PUSH
54620: LD_VAR 0 1
54624: PUSH
54625: LD_VAR 0 2
54629: PUSH
54630: LD_INT 3
54632: PLUS
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: LIST
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: ST_TO_ADDR
// end ; end ;
54649: GO 54652
54651: POP
// result := list ;
54652: LD_ADDR_VAR 0 4
54656: PUSH
54657: LD_VAR 0 5
54661: ST_TO_ADDR
// end ;
54662: LD_VAR 0 4
54666: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
54667: LD_INT 0
54669: PPUSH
54670: PPUSH
54671: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
54672: LD_VAR 0 1
54676: NOT
54677: PUSH
54678: LD_VAR 0 2
54682: PUSH
54683: LD_INT 1
54685: PUSH
54686: LD_INT 2
54688: PUSH
54689: LD_INT 3
54691: PUSH
54692: LD_INT 4
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: IN
54701: NOT
54702: OR
54703: IFFALSE 54707
// exit ;
54705: GO 54799
// tmp := [ ] ;
54707: LD_ADDR_VAR 0 5
54711: PUSH
54712: EMPTY
54713: ST_TO_ADDR
// for i in units do
54714: LD_ADDR_VAR 0 4
54718: PUSH
54719: LD_VAR 0 1
54723: PUSH
54724: FOR_IN
54725: IFFALSE 54768
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
54727: LD_ADDR_VAR 0 5
54731: PUSH
54732: LD_VAR 0 5
54736: PPUSH
54737: LD_VAR 0 5
54741: PUSH
54742: LD_INT 1
54744: PLUS
54745: PPUSH
54746: LD_VAR 0 4
54750: PPUSH
54751: LD_VAR 0 2
54755: PPUSH
54756: CALL_OW 259
54760: PPUSH
54761: CALL_OW 2
54765: ST_TO_ADDR
54766: GO 54724
54768: POP
54769: POP
// if not tmp then
54770: LD_VAR 0 5
54774: NOT
54775: IFFALSE 54779
// exit ;
54777: GO 54799
// result := SortListByListDesc ( units , tmp ) ;
54779: LD_ADDR_VAR 0 3
54783: PUSH
54784: LD_VAR 0 1
54788: PPUSH
54789: LD_VAR 0 5
54793: PPUSH
54794: CALL_OW 77
54798: ST_TO_ADDR
// end ;
54799: LD_VAR 0 3
54803: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
54804: LD_INT 0
54806: PPUSH
54807: PPUSH
54808: PPUSH
// result := false ;
54809: LD_ADDR_VAR 0 3
54813: PUSH
54814: LD_INT 0
54816: ST_TO_ADDR
// x := GetX ( building ) ;
54817: LD_ADDR_VAR 0 4
54821: PUSH
54822: LD_VAR 0 2
54826: PPUSH
54827: CALL_OW 250
54831: ST_TO_ADDR
// y := GetY ( building ) ;
54832: LD_ADDR_VAR 0 5
54836: PUSH
54837: LD_VAR 0 2
54841: PPUSH
54842: CALL_OW 251
54846: ST_TO_ADDR
// if not building or not x or not y then
54847: LD_VAR 0 2
54851: NOT
54852: PUSH
54853: LD_VAR 0 4
54857: NOT
54858: OR
54859: PUSH
54860: LD_VAR 0 5
54864: NOT
54865: OR
54866: IFFALSE 54870
// exit ;
54868: GO 54962
// if GetTaskList ( unit ) then
54870: LD_VAR 0 1
54874: PPUSH
54875: CALL_OW 437
54879: IFFALSE 54962
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54881: LD_STRING e
54883: PUSH
54884: LD_VAR 0 1
54888: PPUSH
54889: CALL_OW 437
54893: PUSH
54894: LD_INT 1
54896: ARRAY
54897: PUSH
54898: LD_INT 1
54900: ARRAY
54901: EQUAL
54902: PUSH
54903: LD_VAR 0 4
54907: PUSH
54908: LD_VAR 0 1
54912: PPUSH
54913: CALL_OW 437
54917: PUSH
54918: LD_INT 1
54920: ARRAY
54921: PUSH
54922: LD_INT 2
54924: ARRAY
54925: EQUAL
54926: AND
54927: PUSH
54928: LD_VAR 0 5
54932: PUSH
54933: LD_VAR 0 1
54937: PPUSH
54938: CALL_OW 437
54942: PUSH
54943: LD_INT 1
54945: ARRAY
54946: PUSH
54947: LD_INT 3
54949: ARRAY
54950: EQUAL
54951: AND
54952: IFFALSE 54962
// result := true end ;
54954: LD_ADDR_VAR 0 3
54958: PUSH
54959: LD_INT 1
54961: ST_TO_ADDR
// end ;
54962: LD_VAR 0 3
54966: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
54967: LD_INT 0
54969: PPUSH
// result := false ;
54970: LD_ADDR_VAR 0 4
54974: PUSH
54975: LD_INT 0
54977: ST_TO_ADDR
// if GetTaskList ( unit ) then
54978: LD_VAR 0 1
54982: PPUSH
54983: CALL_OW 437
54987: IFFALSE 55070
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54989: LD_STRING M
54991: PUSH
54992: LD_VAR 0 1
54996: PPUSH
54997: CALL_OW 437
55001: PUSH
55002: LD_INT 1
55004: ARRAY
55005: PUSH
55006: LD_INT 1
55008: ARRAY
55009: EQUAL
55010: PUSH
55011: LD_VAR 0 2
55015: PUSH
55016: LD_VAR 0 1
55020: PPUSH
55021: CALL_OW 437
55025: PUSH
55026: LD_INT 1
55028: ARRAY
55029: PUSH
55030: LD_INT 2
55032: ARRAY
55033: EQUAL
55034: AND
55035: PUSH
55036: LD_VAR 0 3
55040: PUSH
55041: LD_VAR 0 1
55045: PPUSH
55046: CALL_OW 437
55050: PUSH
55051: LD_INT 1
55053: ARRAY
55054: PUSH
55055: LD_INT 3
55057: ARRAY
55058: EQUAL
55059: AND
55060: IFFALSE 55070
// result := true ;
55062: LD_ADDR_VAR 0 4
55066: PUSH
55067: LD_INT 1
55069: ST_TO_ADDR
// end ; end ;
55070: LD_VAR 0 4
55074: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
55075: LD_INT 0
55077: PPUSH
55078: PPUSH
55079: PPUSH
55080: PPUSH
// if not unit or not area then
55081: LD_VAR 0 1
55085: NOT
55086: PUSH
55087: LD_VAR 0 2
55091: NOT
55092: OR
55093: IFFALSE 55097
// exit ;
55095: GO 55261
// tmp := AreaToList ( area , i ) ;
55097: LD_ADDR_VAR 0 6
55101: PUSH
55102: LD_VAR 0 2
55106: PPUSH
55107: LD_VAR 0 5
55111: PPUSH
55112: CALL_OW 517
55116: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55117: LD_ADDR_VAR 0 5
55121: PUSH
55122: DOUBLE
55123: LD_INT 1
55125: DEC
55126: ST_TO_ADDR
55127: LD_VAR 0 6
55131: PUSH
55132: LD_INT 1
55134: ARRAY
55135: PUSH
55136: FOR_TO
55137: IFFALSE 55259
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
55139: LD_ADDR_VAR 0 7
55143: PUSH
55144: LD_VAR 0 6
55148: PUSH
55149: LD_INT 1
55151: ARRAY
55152: PUSH
55153: LD_VAR 0 5
55157: ARRAY
55158: PUSH
55159: LD_VAR 0 6
55163: PUSH
55164: LD_INT 2
55166: ARRAY
55167: PUSH
55168: LD_VAR 0 5
55172: ARRAY
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
55178: LD_VAR 0 7
55182: PUSH
55183: LD_INT 1
55185: ARRAY
55186: PPUSH
55187: LD_VAR 0 7
55191: PUSH
55192: LD_INT 2
55194: ARRAY
55195: PPUSH
55196: CALL_OW 428
55200: PUSH
55201: LD_INT 0
55203: EQUAL
55204: IFFALSE 55257
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
55206: LD_VAR 0 1
55210: PPUSH
55211: LD_VAR 0 7
55215: PUSH
55216: LD_INT 1
55218: ARRAY
55219: PPUSH
55220: LD_VAR 0 7
55224: PUSH
55225: LD_INT 2
55227: ARRAY
55228: PPUSH
55229: LD_VAR 0 3
55233: PPUSH
55234: CALL_OW 48
// result := IsPlaced ( unit ) ;
55238: LD_ADDR_VAR 0 4
55242: PUSH
55243: LD_VAR 0 1
55247: PPUSH
55248: CALL_OW 305
55252: ST_TO_ADDR
// exit ;
55253: POP
55254: POP
55255: GO 55261
// end ; end ;
55257: GO 55136
55259: POP
55260: POP
// end ;
55261: LD_VAR 0 4
55265: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
55266: LD_INT 0
55268: PPUSH
55269: PPUSH
55270: PPUSH
// if not side or side > 8 then
55271: LD_VAR 0 1
55275: NOT
55276: PUSH
55277: LD_VAR 0 1
55281: PUSH
55282: LD_INT 8
55284: GREATER
55285: OR
55286: IFFALSE 55290
// exit ;
55288: GO 55477
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
55290: LD_ADDR_VAR 0 4
55294: PUSH
55295: LD_INT 22
55297: PUSH
55298: LD_VAR 0 1
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 21
55309: PUSH
55310: LD_INT 3
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PPUSH
55321: CALL_OW 69
55325: ST_TO_ADDR
// if not tmp then
55326: LD_VAR 0 4
55330: NOT
55331: IFFALSE 55335
// exit ;
55333: GO 55477
// enable_addtolog := true ;
55335: LD_ADDR_OWVAR 81
55339: PUSH
55340: LD_INT 1
55342: ST_TO_ADDR
// AddToLog ( [ ) ;
55343: LD_STRING [
55345: PPUSH
55346: CALL_OW 561
// for i in tmp do
55350: LD_ADDR_VAR 0 3
55354: PUSH
55355: LD_VAR 0 4
55359: PUSH
55360: FOR_IN
55361: IFFALSE 55468
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
55363: LD_STRING [
55365: PUSH
55366: LD_VAR 0 3
55370: PPUSH
55371: CALL_OW 266
55375: STR
55376: PUSH
55377: LD_STRING , 
55379: STR
55380: PUSH
55381: LD_VAR 0 3
55385: PPUSH
55386: CALL_OW 250
55390: STR
55391: PUSH
55392: LD_STRING , 
55394: STR
55395: PUSH
55396: LD_VAR 0 3
55400: PPUSH
55401: CALL_OW 251
55405: STR
55406: PUSH
55407: LD_STRING , 
55409: STR
55410: PUSH
55411: LD_VAR 0 3
55415: PPUSH
55416: CALL_OW 254
55420: STR
55421: PUSH
55422: LD_STRING , 
55424: STR
55425: PUSH
55426: LD_VAR 0 3
55430: PPUSH
55431: LD_INT 1
55433: PPUSH
55434: CALL_OW 268
55438: STR
55439: PUSH
55440: LD_STRING , 
55442: STR
55443: PUSH
55444: LD_VAR 0 3
55448: PPUSH
55449: LD_INT 2
55451: PPUSH
55452: CALL_OW 268
55456: STR
55457: PUSH
55458: LD_STRING ],
55460: STR
55461: PPUSH
55462: CALL_OW 561
// end ;
55466: GO 55360
55468: POP
55469: POP
// AddToLog ( ]; ) ;
55470: LD_STRING ];
55472: PPUSH
55473: CALL_OW 561
// end ;
55477: LD_VAR 0 2
55481: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
55482: LD_INT 0
55484: PPUSH
55485: PPUSH
55486: PPUSH
55487: PPUSH
55488: PPUSH
// if not area or not rate or not max then
55489: LD_VAR 0 1
55493: NOT
55494: PUSH
55495: LD_VAR 0 2
55499: NOT
55500: OR
55501: PUSH
55502: LD_VAR 0 4
55506: NOT
55507: OR
55508: IFFALSE 55512
// exit ;
55510: GO 55701
// while 1 do
55512: LD_INT 1
55514: IFFALSE 55701
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
55516: LD_ADDR_VAR 0 9
55520: PUSH
55521: LD_VAR 0 1
55525: PPUSH
55526: LD_INT 1
55528: PPUSH
55529: CALL_OW 287
55533: PUSH
55534: LD_INT 10
55536: MUL
55537: ST_TO_ADDR
// r := rate / 10 ;
55538: LD_ADDR_VAR 0 7
55542: PUSH
55543: LD_VAR 0 2
55547: PUSH
55548: LD_INT 10
55550: DIVREAL
55551: ST_TO_ADDR
// time := 1 1$00 ;
55552: LD_ADDR_VAR 0 8
55556: PUSH
55557: LD_INT 2100
55559: ST_TO_ADDR
// if amount < min then
55560: LD_VAR 0 9
55564: PUSH
55565: LD_VAR 0 3
55569: LESS
55570: IFFALSE 55588
// r := r * 2 else
55572: LD_ADDR_VAR 0 7
55576: PUSH
55577: LD_VAR 0 7
55581: PUSH
55582: LD_INT 2
55584: MUL
55585: ST_TO_ADDR
55586: GO 55614
// if amount > max then
55588: LD_VAR 0 9
55592: PUSH
55593: LD_VAR 0 4
55597: GREATER
55598: IFFALSE 55614
// r := r / 2 ;
55600: LD_ADDR_VAR 0 7
55604: PUSH
55605: LD_VAR 0 7
55609: PUSH
55610: LD_INT 2
55612: DIVREAL
55613: ST_TO_ADDR
// time := time / r ;
55614: LD_ADDR_VAR 0 8
55618: PUSH
55619: LD_VAR 0 8
55623: PUSH
55624: LD_VAR 0 7
55628: DIVREAL
55629: ST_TO_ADDR
// if time < 0 then
55630: LD_VAR 0 8
55634: PUSH
55635: LD_INT 0
55637: LESS
55638: IFFALSE 55655
// time := time * - 1 ;
55640: LD_ADDR_VAR 0 8
55644: PUSH
55645: LD_VAR 0 8
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: MUL
55654: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
55655: LD_VAR 0 8
55659: PUSH
55660: LD_INT 35
55662: PPUSH
55663: LD_INT 875
55665: PPUSH
55666: CALL_OW 12
55670: PLUS
55671: PPUSH
55672: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
55676: LD_INT 1
55678: PPUSH
55679: LD_INT 5
55681: PPUSH
55682: CALL_OW 12
55686: PPUSH
55687: LD_VAR 0 1
55691: PPUSH
55692: LD_INT 1
55694: PPUSH
55695: CALL_OW 55
// end ;
55699: GO 55512
// end ;
55701: LD_VAR 0 5
55705: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
55706: LD_INT 0
55708: PPUSH
55709: PPUSH
55710: PPUSH
55711: PPUSH
55712: PPUSH
55713: PPUSH
55714: PPUSH
55715: PPUSH
// if not turrets or not factories then
55716: LD_VAR 0 1
55720: NOT
55721: PUSH
55722: LD_VAR 0 2
55726: NOT
55727: OR
55728: IFFALSE 55732
// exit ;
55730: GO 56039
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
55732: LD_ADDR_VAR 0 10
55736: PUSH
55737: LD_INT 5
55739: PUSH
55740: LD_INT 6
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 2
55749: PUSH
55750: LD_INT 4
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 3
55759: PUSH
55760: LD_INT 5
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 24
55774: PUSH
55775: LD_INT 25
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 23
55784: PUSH
55785: LD_INT 27
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 42
55798: PUSH
55799: LD_INT 43
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 44
55808: PUSH
55809: LD_INT 46
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 45
55818: PUSH
55819: LD_INT 47
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: LIST
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: LIST
55835: ST_TO_ADDR
// result := [ ] ;
55836: LD_ADDR_VAR 0 3
55840: PUSH
55841: EMPTY
55842: ST_TO_ADDR
// for i in turrets do
55843: LD_ADDR_VAR 0 4
55847: PUSH
55848: LD_VAR 0 1
55852: PUSH
55853: FOR_IN
55854: IFFALSE 56037
// begin nat := GetNation ( i ) ;
55856: LD_ADDR_VAR 0 7
55860: PUSH
55861: LD_VAR 0 4
55865: PPUSH
55866: CALL_OW 248
55870: ST_TO_ADDR
// weapon := 0 ;
55871: LD_ADDR_VAR 0 8
55875: PUSH
55876: LD_INT 0
55878: ST_TO_ADDR
// if not nat then
55879: LD_VAR 0 7
55883: NOT
55884: IFFALSE 55888
// continue ;
55886: GO 55853
// for j in list [ nat ] do
55888: LD_ADDR_VAR 0 5
55892: PUSH
55893: LD_VAR 0 10
55897: PUSH
55898: LD_VAR 0 7
55902: ARRAY
55903: PUSH
55904: FOR_IN
55905: IFFALSE 55946
// if GetBWeapon ( i ) = j [ 1 ] then
55907: LD_VAR 0 4
55911: PPUSH
55912: CALL_OW 269
55916: PUSH
55917: LD_VAR 0 5
55921: PUSH
55922: LD_INT 1
55924: ARRAY
55925: EQUAL
55926: IFFALSE 55944
// begin weapon := j [ 2 ] ;
55928: LD_ADDR_VAR 0 8
55932: PUSH
55933: LD_VAR 0 5
55937: PUSH
55938: LD_INT 2
55940: ARRAY
55941: ST_TO_ADDR
// break ;
55942: GO 55946
// end ;
55944: GO 55904
55946: POP
55947: POP
// if not weapon then
55948: LD_VAR 0 8
55952: NOT
55953: IFFALSE 55957
// continue ;
55955: GO 55853
// for k in factories do
55957: LD_ADDR_VAR 0 6
55961: PUSH
55962: LD_VAR 0 2
55966: PUSH
55967: FOR_IN
55968: IFFALSE 56033
// begin weapons := AvailableWeaponList ( k ) ;
55970: LD_ADDR_VAR 0 9
55974: PUSH
55975: LD_VAR 0 6
55979: PPUSH
55980: CALL_OW 478
55984: ST_TO_ADDR
// if not weapons then
55985: LD_VAR 0 9
55989: NOT
55990: IFFALSE 55994
// continue ;
55992: GO 55967
// if weapon in weapons then
55994: LD_VAR 0 8
55998: PUSH
55999: LD_VAR 0 9
56003: IN
56004: IFFALSE 56031
// begin result := [ i , weapon ] ;
56006: LD_ADDR_VAR 0 3
56010: PUSH
56011: LD_VAR 0 4
56015: PUSH
56016: LD_VAR 0 8
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: ST_TO_ADDR
// exit ;
56025: POP
56026: POP
56027: POP
56028: POP
56029: GO 56039
// end ; end ;
56031: GO 55967
56033: POP
56034: POP
// end ;
56035: GO 55853
56037: POP
56038: POP
// end ;
56039: LD_VAR 0 3
56043: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
56044: LD_INT 0
56046: PPUSH
// if not side or side > 8 then
56047: LD_VAR 0 3
56051: NOT
56052: PUSH
56053: LD_VAR 0 3
56057: PUSH
56058: LD_INT 8
56060: GREATER
56061: OR
56062: IFFALSE 56066
// exit ;
56064: GO 56125
// if not range then
56066: LD_VAR 0 4
56070: NOT
56071: IFFALSE 56082
// range := - 12 ;
56073: LD_ADDR_VAR 0 4
56077: PUSH
56078: LD_INT 12
56080: NEG
56081: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
56082: LD_VAR 0 1
56086: PPUSH
56087: LD_VAR 0 2
56091: PPUSH
56092: LD_VAR 0 3
56096: PPUSH
56097: LD_VAR 0 4
56101: PPUSH
56102: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56106: LD_VAR 0 1
56110: PPUSH
56111: LD_VAR 0 2
56115: PPUSH
56116: LD_VAR 0 3
56120: PPUSH
56121: CALL_OW 331
// end ;
56125: LD_VAR 0 5
56129: RET
// export function Video ( mode ) ; begin
56130: LD_INT 0
56132: PPUSH
// ingame_video = mode ;
56133: LD_ADDR_OWVAR 52
56137: PUSH
56138: LD_VAR 0 1
56142: ST_TO_ADDR
// interface_hidden = mode ;
56143: LD_ADDR_OWVAR 54
56147: PUSH
56148: LD_VAR 0 1
56152: ST_TO_ADDR
// end ;
56153: LD_VAR 0 2
56157: RET
// export function Join ( array , element ) ; begin
56158: LD_INT 0
56160: PPUSH
// result := Replace ( array , array + 1 , element ) ;
56161: LD_ADDR_VAR 0 3
56165: PUSH
56166: LD_VAR 0 1
56170: PPUSH
56171: LD_VAR 0 1
56175: PUSH
56176: LD_INT 1
56178: PLUS
56179: PPUSH
56180: LD_VAR 0 2
56184: PPUSH
56185: CALL_OW 1
56189: ST_TO_ADDR
// end ;
56190: LD_VAR 0 3
56194: RET
// export function JoinUnion ( array , element ) ; begin
56195: LD_INT 0
56197: PPUSH
// result := array union element ;
56198: LD_ADDR_VAR 0 3
56202: PUSH
56203: LD_VAR 0 1
56207: PUSH
56208: LD_VAR 0 2
56212: UNION
56213: ST_TO_ADDR
// end ;
56214: LD_VAR 0 3
56218: RET
// export function GetBehemoths ( side ) ; begin
56219: LD_INT 0
56221: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
56222: LD_ADDR_VAR 0 2
56226: PUSH
56227: LD_INT 22
56229: PUSH
56230: LD_VAR 0 1
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 31
56241: PUSH
56242: LD_INT 25
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PPUSH
56253: CALL_OW 69
56257: ST_TO_ADDR
// end ;
56258: LD_VAR 0 2
56262: RET
// export function Shuffle ( array ) ; var i , index ; begin
56263: LD_INT 0
56265: PPUSH
56266: PPUSH
56267: PPUSH
// result := [ ] ;
56268: LD_ADDR_VAR 0 2
56272: PUSH
56273: EMPTY
56274: ST_TO_ADDR
// if not array then
56275: LD_VAR 0 1
56279: NOT
56280: IFFALSE 56284
// exit ;
56282: GO 56383
// Randomize ;
56284: CALL_OW 10
// for i = array downto 1 do
56288: LD_ADDR_VAR 0 3
56292: PUSH
56293: DOUBLE
56294: LD_VAR 0 1
56298: INC
56299: ST_TO_ADDR
56300: LD_INT 1
56302: PUSH
56303: FOR_DOWNTO
56304: IFFALSE 56381
// begin index := rand ( 1 , array ) ;
56306: LD_ADDR_VAR 0 4
56310: PUSH
56311: LD_INT 1
56313: PPUSH
56314: LD_VAR 0 1
56318: PPUSH
56319: CALL_OW 12
56323: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
56324: LD_ADDR_VAR 0 2
56328: PUSH
56329: LD_VAR 0 2
56333: PPUSH
56334: LD_VAR 0 2
56338: PUSH
56339: LD_INT 1
56341: PLUS
56342: PPUSH
56343: LD_VAR 0 1
56347: PUSH
56348: LD_VAR 0 4
56352: ARRAY
56353: PPUSH
56354: CALL_OW 2
56358: ST_TO_ADDR
// array := Delete ( array , index ) ;
56359: LD_ADDR_VAR 0 1
56363: PUSH
56364: LD_VAR 0 1
56368: PPUSH
56369: LD_VAR 0 4
56373: PPUSH
56374: CALL_OW 3
56378: ST_TO_ADDR
// end ;
56379: GO 56303
56381: POP
56382: POP
// end ;
56383: LD_VAR 0 2
56387: RET
// export function GetBaseMaterials ( base ) ; begin
56388: LD_INT 0
56390: PPUSH
// result := [ 0 , 0 , 0 ] ;
56391: LD_ADDR_VAR 0 2
56395: PUSH
56396: LD_INT 0
56398: PUSH
56399: LD_INT 0
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: LIST
56409: ST_TO_ADDR
// if not base then
56410: LD_VAR 0 1
56414: NOT
56415: IFFALSE 56419
// exit ;
56417: GO 56468
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
56419: LD_ADDR_VAR 0 2
56423: PUSH
56424: LD_VAR 0 1
56428: PPUSH
56429: LD_INT 1
56431: PPUSH
56432: CALL_OW 275
56436: PUSH
56437: LD_VAR 0 1
56441: PPUSH
56442: LD_INT 2
56444: PPUSH
56445: CALL_OW 275
56449: PUSH
56450: LD_VAR 0 1
56454: PPUSH
56455: LD_INT 3
56457: PPUSH
56458: CALL_OW 275
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: LIST
56467: ST_TO_ADDR
// end ;
56468: LD_VAR 0 2
56472: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
56473: LD_INT 0
56475: PPUSH
56476: PPUSH
// result := array ;
56477: LD_ADDR_VAR 0 3
56481: PUSH
56482: LD_VAR 0 1
56486: ST_TO_ADDR
// if size > 0 then
56487: LD_VAR 0 2
56491: PUSH
56492: LD_INT 0
56494: GREATER
56495: IFFALSE 56541
// for i := array downto size do
56497: LD_ADDR_VAR 0 4
56501: PUSH
56502: DOUBLE
56503: LD_VAR 0 1
56507: INC
56508: ST_TO_ADDR
56509: LD_VAR 0 2
56513: PUSH
56514: FOR_DOWNTO
56515: IFFALSE 56539
// result := Delete ( result , result ) ;
56517: LD_ADDR_VAR 0 3
56521: PUSH
56522: LD_VAR 0 3
56526: PPUSH
56527: LD_VAR 0 3
56531: PPUSH
56532: CALL_OW 3
56536: ST_TO_ADDR
56537: GO 56514
56539: POP
56540: POP
// end ;
56541: LD_VAR 0 3
56545: RET
// export function ComExit ( unit ) ; var tmp ; begin
56546: LD_INT 0
56548: PPUSH
56549: PPUSH
// if not IsInUnit ( unit ) then
56550: LD_VAR 0 1
56554: PPUSH
56555: CALL_OW 310
56559: NOT
56560: IFFALSE 56564
// exit ;
56562: GO 56624
// tmp := IsInUnit ( unit ) ;
56564: LD_ADDR_VAR 0 3
56568: PUSH
56569: LD_VAR 0 1
56573: PPUSH
56574: CALL_OW 310
56578: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
56579: LD_VAR 0 3
56583: PPUSH
56584: CALL_OW 247
56588: PUSH
56589: LD_INT 2
56591: EQUAL
56592: IFFALSE 56605
// ComExitVehicle ( unit ) else
56594: LD_VAR 0 1
56598: PPUSH
56599: CALL_OW 121
56603: GO 56614
// ComExitBuilding ( unit ) ;
56605: LD_VAR 0 1
56609: PPUSH
56610: CALL_OW 122
// result := tmp ;
56614: LD_ADDR_VAR 0 2
56618: PUSH
56619: LD_VAR 0 3
56623: ST_TO_ADDR
// end ;
56624: LD_VAR 0 2
56628: RET
// export function ComExitAll ( units ) ; var i ; begin
56629: LD_INT 0
56631: PPUSH
56632: PPUSH
// if not units then
56633: LD_VAR 0 1
56637: NOT
56638: IFFALSE 56642
// exit ;
56640: GO 56668
// for i in units do
56642: LD_ADDR_VAR 0 3
56646: PUSH
56647: LD_VAR 0 1
56651: PUSH
56652: FOR_IN
56653: IFFALSE 56666
// ComExit ( i ) ;
56655: LD_VAR 0 3
56659: PPUSH
56660: CALL 56546 0 1
56664: GO 56652
56666: POP
56667: POP
// end ;
56668: LD_VAR 0 2
56672: RET
// export function ResetHc ; begin
56673: LD_INT 0
56675: PPUSH
// InitHc ;
56676: CALL_OW 19
// hc_importance := 0 ;
56680: LD_ADDR_OWVAR 32
56684: PUSH
56685: LD_INT 0
56687: ST_TO_ADDR
// end ;
56688: LD_VAR 0 1
56692: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
56693: LD_INT 0
56695: PPUSH
56696: PPUSH
56697: PPUSH
// _x := ( x1 + x2 ) div 2 ;
56698: LD_ADDR_VAR 0 6
56702: PUSH
56703: LD_VAR 0 1
56707: PUSH
56708: LD_VAR 0 3
56712: PLUS
56713: PUSH
56714: LD_INT 2
56716: DIV
56717: ST_TO_ADDR
// if _x < 0 then
56718: LD_VAR 0 6
56722: PUSH
56723: LD_INT 0
56725: LESS
56726: IFFALSE 56743
// _x := _x * - 1 ;
56728: LD_ADDR_VAR 0 6
56732: PUSH
56733: LD_VAR 0 6
56737: PUSH
56738: LD_INT 1
56740: NEG
56741: MUL
56742: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
56743: LD_ADDR_VAR 0 7
56747: PUSH
56748: LD_VAR 0 2
56752: PUSH
56753: LD_VAR 0 4
56757: PLUS
56758: PUSH
56759: LD_INT 2
56761: DIV
56762: ST_TO_ADDR
// if _y < 0 then
56763: LD_VAR 0 7
56767: PUSH
56768: LD_INT 0
56770: LESS
56771: IFFALSE 56788
// _y := _y * - 1 ;
56773: LD_ADDR_VAR 0 7
56777: PUSH
56778: LD_VAR 0 7
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: MUL
56787: ST_TO_ADDR
// result := [ _x , _y ] ;
56788: LD_ADDR_VAR 0 5
56792: PUSH
56793: LD_VAR 0 6
56797: PUSH
56798: LD_VAR 0 7
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: ST_TO_ADDR
// end ;
56807: LD_VAR 0 5
56811: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
56812: LD_INT 0
56814: PPUSH
56815: PPUSH
56816: PPUSH
56817: PPUSH
// task := GetTaskList ( unit ) ;
56818: LD_ADDR_VAR 0 7
56822: PUSH
56823: LD_VAR 0 1
56827: PPUSH
56828: CALL_OW 437
56832: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
56833: LD_VAR 0 7
56837: NOT
56838: PUSH
56839: LD_VAR 0 1
56843: PPUSH
56844: LD_VAR 0 2
56848: PPUSH
56849: CALL_OW 308
56853: NOT
56854: AND
56855: IFFALSE 56859
// exit ;
56857: GO 56977
// if IsInArea ( unit , area ) then
56859: LD_VAR 0 1
56863: PPUSH
56864: LD_VAR 0 2
56868: PPUSH
56869: CALL_OW 308
56873: IFFALSE 56891
// begin ComMoveToArea ( unit , goAway ) ;
56875: LD_VAR 0 1
56879: PPUSH
56880: LD_VAR 0 3
56884: PPUSH
56885: CALL_OW 113
// exit ;
56889: GO 56977
// end ; if task [ 1 ] [ 1 ] <> M then
56891: LD_VAR 0 7
56895: PUSH
56896: LD_INT 1
56898: ARRAY
56899: PUSH
56900: LD_INT 1
56902: ARRAY
56903: PUSH
56904: LD_STRING M
56906: NONEQUAL
56907: IFFALSE 56911
// exit ;
56909: GO 56977
// x := task [ 1 ] [ 2 ] ;
56911: LD_ADDR_VAR 0 5
56915: PUSH
56916: LD_VAR 0 7
56920: PUSH
56921: LD_INT 1
56923: ARRAY
56924: PUSH
56925: LD_INT 2
56927: ARRAY
56928: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
56929: LD_ADDR_VAR 0 6
56933: PUSH
56934: LD_VAR 0 7
56938: PUSH
56939: LD_INT 1
56941: ARRAY
56942: PUSH
56943: LD_INT 3
56945: ARRAY
56946: ST_TO_ADDR
// if InArea ( x , y , area ) then
56947: LD_VAR 0 5
56951: PPUSH
56952: LD_VAR 0 6
56956: PPUSH
56957: LD_VAR 0 2
56961: PPUSH
56962: CALL_OW 309
56966: IFFALSE 56977
// ComStop ( unit ) ;
56968: LD_VAR 0 1
56972: PPUSH
56973: CALL_OW 141
// end ;
56977: LD_VAR 0 4
56981: RET
// export function Abs ( value ) ; begin
56982: LD_INT 0
56984: PPUSH
// result := value ;
56985: LD_ADDR_VAR 0 2
56989: PUSH
56990: LD_VAR 0 1
56994: ST_TO_ADDR
// if value < 0 then
56995: LD_VAR 0 1
56999: PUSH
57000: LD_INT 0
57002: LESS
57003: IFFALSE 57020
// result := value * - 1 ;
57005: LD_ADDR_VAR 0 2
57009: PUSH
57010: LD_VAR 0 1
57014: PUSH
57015: LD_INT 1
57017: NEG
57018: MUL
57019: ST_TO_ADDR
// end ;
57020: LD_VAR 0 2
57024: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
57025: LD_INT 0
57027: PPUSH
57028: PPUSH
57029: PPUSH
57030: PPUSH
57031: PPUSH
57032: PPUSH
57033: PPUSH
57034: PPUSH
// if not unit or not building then
57035: LD_VAR 0 1
57039: NOT
57040: PUSH
57041: LD_VAR 0 2
57045: NOT
57046: OR
57047: IFFALSE 57051
// exit ;
57049: GO 57277
// x := GetX ( building ) ;
57051: LD_ADDR_VAR 0 4
57055: PUSH
57056: LD_VAR 0 2
57060: PPUSH
57061: CALL_OW 250
57065: ST_TO_ADDR
// y := GetY ( building ) ;
57066: LD_ADDR_VAR 0 6
57070: PUSH
57071: LD_VAR 0 2
57075: PPUSH
57076: CALL_OW 251
57080: ST_TO_ADDR
// d := GetDir ( building ) ;
57081: LD_ADDR_VAR 0 8
57085: PUSH
57086: LD_VAR 0 2
57090: PPUSH
57091: CALL_OW 254
57095: ST_TO_ADDR
// r := 4 ;
57096: LD_ADDR_VAR 0 9
57100: PUSH
57101: LD_INT 4
57103: ST_TO_ADDR
// for i := 1 to 5 do
57104: LD_ADDR_VAR 0 10
57108: PUSH
57109: DOUBLE
57110: LD_INT 1
57112: DEC
57113: ST_TO_ADDR
57114: LD_INT 5
57116: PUSH
57117: FOR_TO
57118: IFFALSE 57275
// begin _x := ShiftX ( x , d , r + i ) ;
57120: LD_ADDR_VAR 0 5
57124: PUSH
57125: LD_VAR 0 4
57129: PPUSH
57130: LD_VAR 0 8
57134: PPUSH
57135: LD_VAR 0 9
57139: PUSH
57140: LD_VAR 0 10
57144: PLUS
57145: PPUSH
57146: CALL_OW 272
57150: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
57151: LD_ADDR_VAR 0 7
57155: PUSH
57156: LD_VAR 0 6
57160: PPUSH
57161: LD_VAR 0 8
57165: PPUSH
57166: LD_VAR 0 9
57170: PUSH
57171: LD_VAR 0 10
57175: PLUS
57176: PPUSH
57177: CALL_OW 273
57181: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
57182: LD_VAR 0 5
57186: PPUSH
57187: LD_VAR 0 7
57191: PPUSH
57192: CALL_OW 488
57196: PUSH
57197: LD_VAR 0 5
57201: PPUSH
57202: LD_VAR 0 7
57206: PPUSH
57207: CALL_OW 428
57211: PPUSH
57212: CALL_OW 247
57216: PUSH
57217: LD_INT 3
57219: PUSH
57220: LD_INT 2
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: IN
57227: NOT
57228: AND
57229: IFFALSE 57273
// begin ComMoveXY ( unit , _x , _y ) ;
57231: LD_VAR 0 1
57235: PPUSH
57236: LD_VAR 0 5
57240: PPUSH
57241: LD_VAR 0 7
57245: PPUSH
57246: CALL_OW 111
// result := [ _x , _y ] ;
57250: LD_ADDR_VAR 0 3
57254: PUSH
57255: LD_VAR 0 5
57259: PUSH
57260: LD_VAR 0 7
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: ST_TO_ADDR
// exit ;
57269: POP
57270: POP
57271: GO 57277
// end ; end ;
57273: GO 57117
57275: POP
57276: POP
// end ;
57277: LD_VAR 0 3
57281: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
57282: LD_INT 0
57284: PPUSH
57285: PPUSH
57286: PPUSH
// result := 0 ;
57287: LD_ADDR_VAR 0 3
57291: PUSH
57292: LD_INT 0
57294: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
57295: LD_VAR 0 1
57299: PUSH
57300: LD_INT 0
57302: LESS
57303: PUSH
57304: LD_VAR 0 1
57308: PUSH
57309: LD_INT 8
57311: GREATER
57312: OR
57313: PUSH
57314: LD_VAR 0 2
57318: PUSH
57319: LD_INT 0
57321: LESS
57322: OR
57323: PUSH
57324: LD_VAR 0 2
57328: PUSH
57329: LD_INT 8
57331: GREATER
57332: OR
57333: IFFALSE 57337
// exit ;
57335: GO 57412
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
57337: LD_ADDR_VAR 0 4
57341: PUSH
57342: LD_INT 22
57344: PUSH
57345: LD_VAR 0 2
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PPUSH
57354: CALL_OW 69
57358: PUSH
57359: FOR_IN
57360: IFFALSE 57410
// begin un := UnitShoot ( i ) ;
57362: LD_ADDR_VAR 0 5
57366: PUSH
57367: LD_VAR 0 4
57371: PPUSH
57372: CALL_OW 504
57376: ST_TO_ADDR
// if GetSide ( un ) = side1 then
57377: LD_VAR 0 5
57381: PPUSH
57382: CALL_OW 255
57386: PUSH
57387: LD_VAR 0 1
57391: EQUAL
57392: IFFALSE 57408
// begin result := un ;
57394: LD_ADDR_VAR 0 3
57398: PUSH
57399: LD_VAR 0 5
57403: ST_TO_ADDR
// exit ;
57404: POP
57405: POP
57406: GO 57412
// end ; end ;
57408: GO 57359
57410: POP
57411: POP
// end ;
57412: LD_VAR 0 3
57416: RET
// export function GetCargoBay ( units ) ; begin
57417: LD_INT 0
57419: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
57420: LD_ADDR_VAR 0 2
57424: PUSH
57425: LD_VAR 0 1
57429: PPUSH
57430: LD_INT 2
57432: PUSH
57433: LD_INT 34
57435: PUSH
57436: LD_INT 12
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 34
57445: PUSH
57446: LD_INT 51
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 34
57455: PUSH
57456: LD_INT 32
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 34
57465: PUSH
57466: LD_EXP 71
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: PPUSH
57482: CALL_OW 72
57486: ST_TO_ADDR
// end ;
57487: LD_VAR 0 2
57491: RET
// export function Negate ( value ) ; begin
57492: LD_INT 0
57494: PPUSH
// result := not value ;
57495: LD_ADDR_VAR 0 2
57499: PUSH
57500: LD_VAR 0 1
57504: NOT
57505: ST_TO_ADDR
// end ;
57506: LD_VAR 0 2
57510: RET
// export function Inc ( value ) ; begin
57511: LD_INT 0
57513: PPUSH
// result := value + 1 ;
57514: LD_ADDR_VAR 0 2
57518: PUSH
57519: LD_VAR 0 1
57523: PUSH
57524: LD_INT 1
57526: PLUS
57527: ST_TO_ADDR
// end ;
57528: LD_VAR 0 2
57532: RET
// export function Dec ( value ) ; begin
57533: LD_INT 0
57535: PPUSH
// result := value - 1 ;
57536: LD_ADDR_VAR 0 2
57540: PUSH
57541: LD_VAR 0 1
57545: PUSH
57546: LD_INT 1
57548: MINUS
57549: ST_TO_ADDR
// end ;
57550: LD_VAR 0 2
57554: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
57555: LD_INT 0
57557: PPUSH
57558: PPUSH
57559: PPUSH
57560: PPUSH
57561: PPUSH
57562: PPUSH
57563: PPUSH
57564: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
57565: LD_VAR 0 1
57569: PPUSH
57570: LD_VAR 0 2
57574: PPUSH
57575: CALL_OW 488
57579: NOT
57580: PUSH
57581: LD_VAR 0 3
57585: PPUSH
57586: LD_VAR 0 4
57590: PPUSH
57591: CALL_OW 488
57595: NOT
57596: OR
57597: IFFALSE 57610
// begin result := - 1 ;
57599: LD_ADDR_VAR 0 5
57603: PUSH
57604: LD_INT 1
57606: NEG
57607: ST_TO_ADDR
// exit ;
57608: GO 57845
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
57610: LD_ADDR_VAR 0 12
57614: PUSH
57615: LD_VAR 0 1
57619: PPUSH
57620: LD_VAR 0 2
57624: PPUSH
57625: LD_VAR 0 3
57629: PPUSH
57630: LD_VAR 0 4
57634: PPUSH
57635: CALL 56693 0 4
57639: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
57640: LD_ADDR_VAR 0 11
57644: PUSH
57645: LD_VAR 0 1
57649: PPUSH
57650: LD_VAR 0 2
57654: PPUSH
57655: LD_VAR 0 12
57659: PUSH
57660: LD_INT 1
57662: ARRAY
57663: PPUSH
57664: LD_VAR 0 12
57668: PUSH
57669: LD_INT 2
57671: ARRAY
57672: PPUSH
57673: CALL_OW 298
57677: ST_TO_ADDR
// distance := 9999 ;
57678: LD_ADDR_VAR 0 10
57682: PUSH
57683: LD_INT 9999
57685: ST_TO_ADDR
// for i := 0 to 5 do
57686: LD_ADDR_VAR 0 6
57690: PUSH
57691: DOUBLE
57692: LD_INT 0
57694: DEC
57695: ST_TO_ADDR
57696: LD_INT 5
57698: PUSH
57699: FOR_TO
57700: IFFALSE 57843
// begin _x := ShiftX ( x1 , i , centerDist ) ;
57702: LD_ADDR_VAR 0 7
57706: PUSH
57707: LD_VAR 0 1
57711: PPUSH
57712: LD_VAR 0 6
57716: PPUSH
57717: LD_VAR 0 11
57721: PPUSH
57722: CALL_OW 272
57726: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
57727: LD_ADDR_VAR 0 8
57731: PUSH
57732: LD_VAR 0 2
57736: PPUSH
57737: LD_VAR 0 6
57741: PPUSH
57742: LD_VAR 0 11
57746: PPUSH
57747: CALL_OW 273
57751: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57752: LD_VAR 0 7
57756: PPUSH
57757: LD_VAR 0 8
57761: PPUSH
57762: CALL_OW 488
57766: NOT
57767: IFFALSE 57771
// continue ;
57769: GO 57699
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
57771: LD_ADDR_VAR 0 9
57775: PUSH
57776: LD_VAR 0 12
57780: PUSH
57781: LD_INT 1
57783: ARRAY
57784: PPUSH
57785: LD_VAR 0 12
57789: PUSH
57790: LD_INT 2
57792: ARRAY
57793: PPUSH
57794: LD_VAR 0 7
57798: PPUSH
57799: LD_VAR 0 8
57803: PPUSH
57804: CALL_OW 298
57808: ST_TO_ADDR
// if tmp < distance then
57809: LD_VAR 0 9
57813: PUSH
57814: LD_VAR 0 10
57818: LESS
57819: IFFALSE 57841
// begin result := i ;
57821: LD_ADDR_VAR 0 5
57825: PUSH
57826: LD_VAR 0 6
57830: ST_TO_ADDR
// distance := tmp ;
57831: LD_ADDR_VAR 0 10
57835: PUSH
57836: LD_VAR 0 9
57840: ST_TO_ADDR
// end ; end ;
57841: GO 57699
57843: POP
57844: POP
// end ;
57845: LD_VAR 0 5
57849: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57850: LD_INT 0
57852: PPUSH
57853: PPUSH
// if not driver or not IsInUnit ( driver ) then
57854: LD_VAR 0 1
57858: NOT
57859: PUSH
57860: LD_VAR 0 1
57864: PPUSH
57865: CALL_OW 310
57869: NOT
57870: OR
57871: IFFALSE 57875
// exit ;
57873: GO 57965
// vehicle := IsInUnit ( driver ) ;
57875: LD_ADDR_VAR 0 3
57879: PUSH
57880: LD_VAR 0 1
57884: PPUSH
57885: CALL_OW 310
57889: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57890: LD_VAR 0 1
57894: PPUSH
57895: LD_STRING \
57897: PUSH
57898: LD_INT 0
57900: PUSH
57901: LD_INT 0
57903: PUSH
57904: LD_INT 0
57906: PUSH
57907: LD_INT 0
57909: PUSH
57910: LD_INT 0
57912: PUSH
57913: LD_INT 0
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: PUSH
57925: LD_STRING E
57927: PUSH
57928: LD_INT 0
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: LD_VAR 0 3
57938: PUSH
57939: LD_INT 0
57941: PUSH
57942: LD_INT 0
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PPUSH
57961: CALL_OW 446
// end ;
57965: LD_VAR 0 2
57969: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57970: LD_INT 0
57972: PPUSH
57973: PPUSH
// if not driver or not IsInUnit ( driver ) then
57974: LD_VAR 0 1
57978: NOT
57979: PUSH
57980: LD_VAR 0 1
57984: PPUSH
57985: CALL_OW 310
57989: NOT
57990: OR
57991: IFFALSE 57995
// exit ;
57993: GO 58085
// vehicle := IsInUnit ( driver ) ;
57995: LD_ADDR_VAR 0 3
57999: PUSH
58000: LD_VAR 0 1
58004: PPUSH
58005: CALL_OW 310
58009: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
58010: LD_VAR 0 1
58014: PPUSH
58015: LD_STRING \
58017: PUSH
58018: LD_INT 0
58020: PUSH
58021: LD_INT 0
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: LD_INT 0
58029: PUSH
58030: LD_INT 0
58032: PUSH
58033: LD_INT 0
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: PUSH
58045: LD_STRING E
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: LD_INT 0
58053: PUSH
58054: LD_VAR 0 3
58058: PUSH
58059: LD_INT 0
58061: PUSH
58062: LD_INT 0
58064: PUSH
58065: LD_INT 0
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PPUSH
58081: CALL_OW 447
// end ;
58085: LD_VAR 0 2
58089: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
58090: LD_INT 0
58092: PPUSH
58093: PPUSH
58094: PPUSH
// tmp := [ ] ;
58095: LD_ADDR_VAR 0 5
58099: PUSH
58100: EMPTY
58101: ST_TO_ADDR
// for i in units do
58102: LD_ADDR_VAR 0 4
58106: PUSH
58107: LD_VAR 0 1
58111: PUSH
58112: FOR_IN
58113: IFFALSE 58151
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
58115: LD_ADDR_VAR 0 5
58119: PUSH
58120: LD_VAR 0 5
58124: PPUSH
58125: LD_VAR 0 5
58129: PUSH
58130: LD_INT 1
58132: PLUS
58133: PPUSH
58134: LD_VAR 0 4
58138: PPUSH
58139: CALL_OW 256
58143: PPUSH
58144: CALL_OW 2
58148: ST_TO_ADDR
58149: GO 58112
58151: POP
58152: POP
// if not tmp then
58153: LD_VAR 0 5
58157: NOT
58158: IFFALSE 58162
// exit ;
58160: GO 58210
// if asc then
58162: LD_VAR 0 2
58166: IFFALSE 58190
// result := SortListByListAsc ( units , tmp ) else
58168: LD_ADDR_VAR 0 3
58172: PUSH
58173: LD_VAR 0 1
58177: PPUSH
58178: LD_VAR 0 5
58182: PPUSH
58183: CALL_OW 76
58187: ST_TO_ADDR
58188: GO 58210
// result := SortListByListDesc ( units , tmp ) ;
58190: LD_ADDR_VAR 0 3
58194: PUSH
58195: LD_VAR 0 1
58199: PPUSH
58200: LD_VAR 0 5
58204: PPUSH
58205: CALL_OW 77
58209: ST_TO_ADDR
// end ;
58210: LD_VAR 0 3
58214: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
58215: LD_INT 0
58217: PPUSH
58218: PPUSH
// task := GetTaskList ( mech ) ;
58219: LD_ADDR_VAR 0 4
58223: PUSH
58224: LD_VAR 0 1
58228: PPUSH
58229: CALL_OW 437
58233: ST_TO_ADDR
// if not task then
58234: LD_VAR 0 4
58238: NOT
58239: IFFALSE 58243
// exit ;
58241: GO 58285
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
58243: LD_ADDR_VAR 0 3
58247: PUSH
58248: LD_VAR 0 4
58252: PUSH
58253: LD_INT 1
58255: ARRAY
58256: PUSH
58257: LD_INT 1
58259: ARRAY
58260: PUSH
58261: LD_STRING r
58263: EQUAL
58264: PUSH
58265: LD_VAR 0 4
58269: PUSH
58270: LD_INT 1
58272: ARRAY
58273: PUSH
58274: LD_INT 4
58276: ARRAY
58277: PUSH
58278: LD_VAR 0 2
58282: EQUAL
58283: AND
58284: ST_TO_ADDR
// end ;
58285: LD_VAR 0 3
58289: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
58290: LD_INT 0
58292: PPUSH
// SetDir ( unit , d ) ;
58293: LD_VAR 0 1
58297: PPUSH
58298: LD_VAR 0 4
58302: PPUSH
58303: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
58307: LD_VAR 0 1
58311: PPUSH
58312: LD_VAR 0 2
58316: PPUSH
58317: LD_VAR 0 3
58321: PPUSH
58322: LD_VAR 0 5
58326: PPUSH
58327: CALL_OW 48
// end ;
58331: LD_VAR 0 6
58335: RET
// export function ToNaturalNumber ( number ) ; begin
58336: LD_INT 0
58338: PPUSH
// result := number div 1 ;
58339: LD_ADDR_VAR 0 2
58343: PUSH
58344: LD_VAR 0 1
58348: PUSH
58349: LD_INT 1
58351: DIV
58352: ST_TO_ADDR
// if number < 0 then
58353: LD_VAR 0 1
58357: PUSH
58358: LD_INT 0
58360: LESS
58361: IFFALSE 58371
// result := 0 ;
58363: LD_ADDR_VAR 0 2
58367: PUSH
58368: LD_INT 0
58370: ST_TO_ADDR
// end ;
58371: LD_VAR 0 2
58375: RET
// export function SortByClass ( units , class ) ; var un ; begin
58376: LD_INT 0
58378: PPUSH
58379: PPUSH
// if not units or not class then
58380: LD_VAR 0 1
58384: NOT
58385: PUSH
58386: LD_VAR 0 2
58390: NOT
58391: OR
58392: IFFALSE 58396
// exit ;
58394: GO 58491
// result := [ ] ;
58396: LD_ADDR_VAR 0 3
58400: PUSH
58401: EMPTY
58402: ST_TO_ADDR
// for un in units do
58403: LD_ADDR_VAR 0 4
58407: PUSH
58408: LD_VAR 0 1
58412: PUSH
58413: FOR_IN
58414: IFFALSE 58489
// if GetClass ( un ) = class then
58416: LD_VAR 0 4
58420: PPUSH
58421: CALL_OW 257
58425: PUSH
58426: LD_VAR 0 2
58430: EQUAL
58431: IFFALSE 58458
// result := Insert ( result , 1 , un ) else
58433: LD_ADDR_VAR 0 3
58437: PUSH
58438: LD_VAR 0 3
58442: PPUSH
58443: LD_INT 1
58445: PPUSH
58446: LD_VAR 0 4
58450: PPUSH
58451: CALL_OW 2
58455: ST_TO_ADDR
58456: GO 58487
// result := Replace ( result , result + 1 , un ) ;
58458: LD_ADDR_VAR 0 3
58462: PUSH
58463: LD_VAR 0 3
58467: PPUSH
58468: LD_VAR 0 3
58472: PUSH
58473: LD_INT 1
58475: PLUS
58476: PPUSH
58477: LD_VAR 0 4
58481: PPUSH
58482: CALL_OW 1
58486: ST_TO_ADDR
58487: GO 58413
58489: POP
58490: POP
// end ;
58491: LD_VAR 0 3
58495: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
58496: LD_INT 0
58498: PPUSH
58499: PPUSH
58500: PPUSH
58501: PPUSH
58502: PPUSH
58503: PPUSH
58504: PPUSH
// result := [ ] ;
58505: LD_ADDR_VAR 0 4
58509: PUSH
58510: EMPTY
58511: ST_TO_ADDR
// if x - r < 0 then
58512: LD_VAR 0 1
58516: PUSH
58517: LD_VAR 0 3
58521: MINUS
58522: PUSH
58523: LD_INT 0
58525: LESS
58526: IFFALSE 58538
// min_x := 0 else
58528: LD_ADDR_VAR 0 8
58532: PUSH
58533: LD_INT 0
58535: ST_TO_ADDR
58536: GO 58554
// min_x := x - r ;
58538: LD_ADDR_VAR 0 8
58542: PUSH
58543: LD_VAR 0 1
58547: PUSH
58548: LD_VAR 0 3
58552: MINUS
58553: ST_TO_ADDR
// if y - r < 0 then
58554: LD_VAR 0 2
58558: PUSH
58559: LD_VAR 0 3
58563: MINUS
58564: PUSH
58565: LD_INT 0
58567: LESS
58568: IFFALSE 58580
// min_y := 0 else
58570: LD_ADDR_VAR 0 7
58574: PUSH
58575: LD_INT 0
58577: ST_TO_ADDR
58578: GO 58596
// min_y := y - r ;
58580: LD_ADDR_VAR 0 7
58584: PUSH
58585: LD_VAR 0 2
58589: PUSH
58590: LD_VAR 0 3
58594: MINUS
58595: ST_TO_ADDR
// max_x := x + r ;
58596: LD_ADDR_VAR 0 9
58600: PUSH
58601: LD_VAR 0 1
58605: PUSH
58606: LD_VAR 0 3
58610: PLUS
58611: ST_TO_ADDR
// max_y := y + r ;
58612: LD_ADDR_VAR 0 10
58616: PUSH
58617: LD_VAR 0 2
58621: PUSH
58622: LD_VAR 0 3
58626: PLUS
58627: ST_TO_ADDR
// for _x = min_x to max_x do
58628: LD_ADDR_VAR 0 5
58632: PUSH
58633: DOUBLE
58634: LD_VAR 0 8
58638: DEC
58639: ST_TO_ADDR
58640: LD_VAR 0 9
58644: PUSH
58645: FOR_TO
58646: IFFALSE 58747
// for _y = min_y to max_y do
58648: LD_ADDR_VAR 0 6
58652: PUSH
58653: DOUBLE
58654: LD_VAR 0 7
58658: DEC
58659: ST_TO_ADDR
58660: LD_VAR 0 10
58664: PUSH
58665: FOR_TO
58666: IFFALSE 58743
// begin if not ValidHex ( _x , _y ) then
58668: LD_VAR 0 5
58672: PPUSH
58673: LD_VAR 0 6
58677: PPUSH
58678: CALL_OW 488
58682: NOT
58683: IFFALSE 58687
// continue ;
58685: GO 58665
// if GetResourceTypeXY ( _x , _y ) then
58687: LD_VAR 0 5
58691: PPUSH
58692: LD_VAR 0 6
58696: PPUSH
58697: CALL_OW 283
58701: IFFALSE 58741
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
58703: LD_ADDR_VAR 0 4
58707: PUSH
58708: LD_VAR 0 4
58712: PPUSH
58713: LD_VAR 0 4
58717: PUSH
58718: LD_INT 1
58720: PLUS
58721: PPUSH
58722: LD_VAR 0 5
58726: PUSH
58727: LD_VAR 0 6
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PPUSH
58736: CALL_OW 1
58740: ST_TO_ADDR
// end ;
58741: GO 58665
58743: POP
58744: POP
58745: GO 58645
58747: POP
58748: POP
// end ;
58749: LD_VAR 0 4
58753: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
58754: LD_INT 0
58756: PPUSH
58757: PPUSH
58758: PPUSH
58759: PPUSH
58760: PPUSH
58761: PPUSH
58762: PPUSH
58763: PPUSH
// if not units then
58764: LD_VAR 0 1
58768: NOT
58769: IFFALSE 58773
// exit ;
58771: GO 59284
// result := UnitFilter ( units , [ f_ok ] ) ;
58773: LD_ADDR_VAR 0 3
58777: PUSH
58778: LD_VAR 0 1
58782: PPUSH
58783: LD_INT 50
58785: PUSH
58786: EMPTY
58787: LIST
58788: PPUSH
58789: CALL_OW 72
58793: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
58794: LD_ADDR_VAR 0 8
58798: PUSH
58799: LD_VAR 0 1
58803: PUSH
58804: LD_INT 1
58806: ARRAY
58807: PPUSH
58808: CALL_OW 255
58812: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
58813: LD_ADDR_VAR 0 10
58817: PUSH
58818: LD_INT 29
58820: PUSH
58821: LD_EXP 74
58825: PUSH
58826: LD_INT 49
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: LIST
58833: ST_TO_ADDR
// if not result then
58834: LD_VAR 0 3
58838: NOT
58839: IFFALSE 58843
// exit ;
58841: GO 59284
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
58843: LD_ADDR_VAR 0 5
58847: PUSH
58848: LD_INT 81
58850: PUSH
58851: LD_VAR 0 8
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PPUSH
58860: CALL_OW 69
58864: ST_TO_ADDR
// for i in result do
58865: LD_ADDR_VAR 0 4
58869: PUSH
58870: LD_VAR 0 3
58874: PUSH
58875: FOR_IN
58876: IFFALSE 59282
// begin tag := GetTag ( i ) + 1 ;
58878: LD_ADDR_VAR 0 9
58882: PUSH
58883: LD_VAR 0 4
58887: PPUSH
58888: CALL_OW 110
58892: PUSH
58893: LD_INT 1
58895: PLUS
58896: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
58897: LD_ADDR_VAR 0 7
58901: PUSH
58902: LD_VAR 0 4
58906: PPUSH
58907: CALL_OW 250
58911: PPUSH
58912: LD_VAR 0 4
58916: PPUSH
58917: CALL_OW 251
58921: PPUSH
58922: LD_INT 6
58924: PPUSH
58925: CALL 58496 0 3
58929: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
58930: LD_VAR 0 7
58934: PUSH
58935: LD_VAR 0 4
58939: PPUSH
58940: CALL_OW 264
58944: PUSH
58945: LD_VAR 0 10
58949: IN
58950: NOT
58951: AND
58952: IFFALSE 58991
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
58954: LD_VAR 0 4
58958: PPUSH
58959: LD_VAR 0 7
58963: PUSH
58964: LD_INT 1
58966: ARRAY
58967: PUSH
58968: LD_INT 1
58970: ARRAY
58971: PPUSH
58972: LD_VAR 0 7
58976: PUSH
58977: LD_INT 1
58979: ARRAY
58980: PUSH
58981: LD_INT 2
58983: ARRAY
58984: PPUSH
58985: CALL_OW 116
58989: GO 59280
// if path > tag then
58991: LD_VAR 0 2
58995: PUSH
58996: LD_VAR 0 9
59000: GREATER
59001: IFFALSE 59209
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
59003: LD_ADDR_VAR 0 6
59007: PUSH
59008: LD_VAR 0 5
59012: PPUSH
59013: LD_INT 91
59015: PUSH
59016: LD_VAR 0 4
59020: PUSH
59021: LD_INT 12
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: LIST
59028: PPUSH
59029: CALL_OW 72
59033: ST_TO_ADDR
// if nearEnemy then
59034: LD_VAR 0 6
59038: IFFALSE 59107
// begin if GetWeapon ( i ) = ru_time_lapser then
59040: LD_VAR 0 4
59044: PPUSH
59045: CALL_OW 264
59049: PUSH
59050: LD_INT 49
59052: EQUAL
59053: IFFALSE 59081
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
59055: LD_VAR 0 4
59059: PPUSH
59060: LD_VAR 0 6
59064: PPUSH
59065: LD_VAR 0 4
59069: PPUSH
59070: CALL_OW 74
59074: PPUSH
59075: CALL_OW 112
59079: GO 59105
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
59081: LD_VAR 0 4
59085: PPUSH
59086: LD_VAR 0 6
59090: PPUSH
59091: LD_VAR 0 4
59095: PPUSH
59096: CALL_OW 74
59100: PPUSH
59101: CALL_OW 115
// end else
59105: GO 59207
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
59107: LD_VAR 0 4
59111: PPUSH
59112: LD_VAR 0 2
59116: PUSH
59117: LD_VAR 0 9
59121: ARRAY
59122: PUSH
59123: LD_INT 1
59125: ARRAY
59126: PPUSH
59127: LD_VAR 0 2
59131: PUSH
59132: LD_VAR 0 9
59136: ARRAY
59137: PUSH
59138: LD_INT 2
59140: ARRAY
59141: PPUSH
59142: CALL_OW 297
59146: PUSH
59147: LD_INT 6
59149: GREATER
59150: IFFALSE 59193
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
59152: LD_VAR 0 4
59156: PPUSH
59157: LD_VAR 0 2
59161: PUSH
59162: LD_VAR 0 9
59166: ARRAY
59167: PUSH
59168: LD_INT 1
59170: ARRAY
59171: PPUSH
59172: LD_VAR 0 2
59176: PUSH
59177: LD_VAR 0 9
59181: ARRAY
59182: PUSH
59183: LD_INT 2
59185: ARRAY
59186: PPUSH
59187: CALL_OW 114
59191: GO 59207
// SetTag ( i , tag ) ;
59193: LD_VAR 0 4
59197: PPUSH
59198: LD_VAR 0 9
59202: PPUSH
59203: CALL_OW 109
// end else
59207: GO 59280
// if enemy then
59209: LD_VAR 0 5
59213: IFFALSE 59280
// begin if GetWeapon ( i ) = ru_time_lapser then
59215: LD_VAR 0 4
59219: PPUSH
59220: CALL_OW 264
59224: PUSH
59225: LD_INT 49
59227: EQUAL
59228: IFFALSE 59256
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
59230: LD_VAR 0 4
59234: PPUSH
59235: LD_VAR 0 5
59239: PPUSH
59240: LD_VAR 0 4
59244: PPUSH
59245: CALL_OW 74
59249: PPUSH
59250: CALL_OW 112
59254: GO 59280
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
59256: LD_VAR 0 4
59260: PPUSH
59261: LD_VAR 0 5
59265: PPUSH
59266: LD_VAR 0 4
59270: PPUSH
59271: CALL_OW 74
59275: PPUSH
59276: CALL_OW 115
// end ; end ;
59280: GO 58875
59282: POP
59283: POP
// end ;
59284: LD_VAR 0 3
59288: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
59289: LD_INT 0
59291: PPUSH
59292: PPUSH
59293: PPUSH
// if not unit or IsInUnit ( unit ) then
59294: LD_VAR 0 1
59298: NOT
59299: PUSH
59300: LD_VAR 0 1
59304: PPUSH
59305: CALL_OW 310
59309: OR
59310: IFFALSE 59314
// exit ;
59312: GO 59405
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
59314: LD_ADDR_VAR 0 4
59318: PUSH
59319: LD_VAR 0 1
59323: PPUSH
59324: CALL_OW 250
59328: PPUSH
59329: LD_VAR 0 2
59333: PPUSH
59334: LD_INT 1
59336: PPUSH
59337: CALL_OW 272
59341: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
59342: LD_ADDR_VAR 0 5
59346: PUSH
59347: LD_VAR 0 1
59351: PPUSH
59352: CALL_OW 251
59356: PPUSH
59357: LD_VAR 0 2
59361: PPUSH
59362: LD_INT 1
59364: PPUSH
59365: CALL_OW 273
59369: ST_TO_ADDR
// if ValidHex ( x , y ) then
59370: LD_VAR 0 4
59374: PPUSH
59375: LD_VAR 0 5
59379: PPUSH
59380: CALL_OW 488
59384: IFFALSE 59405
// ComTurnXY ( unit , x , y ) ;
59386: LD_VAR 0 1
59390: PPUSH
59391: LD_VAR 0 4
59395: PPUSH
59396: LD_VAR 0 5
59400: PPUSH
59401: CALL_OW 118
// end ;
59405: LD_VAR 0 3
59409: RET
// export function SeeUnits ( side , units ) ; var i ; begin
59410: LD_INT 0
59412: PPUSH
59413: PPUSH
// result := false ;
59414: LD_ADDR_VAR 0 3
59418: PUSH
59419: LD_INT 0
59421: ST_TO_ADDR
// if not units then
59422: LD_VAR 0 2
59426: NOT
59427: IFFALSE 59431
// exit ;
59429: GO 59476
// for i in units do
59431: LD_ADDR_VAR 0 4
59435: PUSH
59436: LD_VAR 0 2
59440: PUSH
59441: FOR_IN
59442: IFFALSE 59474
// if See ( side , i ) then
59444: LD_VAR 0 1
59448: PPUSH
59449: LD_VAR 0 4
59453: PPUSH
59454: CALL_OW 292
59458: IFFALSE 59472
// begin result := true ;
59460: LD_ADDR_VAR 0 3
59464: PUSH
59465: LD_INT 1
59467: ST_TO_ADDR
// exit ;
59468: POP
59469: POP
59470: GO 59476
// end ;
59472: GO 59441
59474: POP
59475: POP
// end ;
59476: LD_VAR 0 3
59480: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
59481: LD_INT 0
59483: PPUSH
59484: PPUSH
59485: PPUSH
59486: PPUSH
// if not unit or not points then
59487: LD_VAR 0 1
59491: NOT
59492: PUSH
59493: LD_VAR 0 2
59497: NOT
59498: OR
59499: IFFALSE 59503
// exit ;
59501: GO 59593
// dist := 99999 ;
59503: LD_ADDR_VAR 0 5
59507: PUSH
59508: LD_INT 99999
59510: ST_TO_ADDR
// for i in points do
59511: LD_ADDR_VAR 0 4
59515: PUSH
59516: LD_VAR 0 2
59520: PUSH
59521: FOR_IN
59522: IFFALSE 59591
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
59524: LD_ADDR_VAR 0 6
59528: PUSH
59529: LD_VAR 0 1
59533: PPUSH
59534: LD_VAR 0 4
59538: PUSH
59539: LD_INT 1
59541: ARRAY
59542: PPUSH
59543: LD_VAR 0 4
59547: PUSH
59548: LD_INT 2
59550: ARRAY
59551: PPUSH
59552: CALL_OW 297
59556: ST_TO_ADDR
// if tmpDist < dist then
59557: LD_VAR 0 6
59561: PUSH
59562: LD_VAR 0 5
59566: LESS
59567: IFFALSE 59589
// begin result := i ;
59569: LD_ADDR_VAR 0 3
59573: PUSH
59574: LD_VAR 0 4
59578: ST_TO_ADDR
// dist := tmpDist ;
59579: LD_ADDR_VAR 0 5
59583: PUSH
59584: LD_VAR 0 6
59588: ST_TO_ADDR
// end ; end ;
59589: GO 59521
59591: POP
59592: POP
// end ;
59593: LD_VAR 0 3
59597: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
59598: LD_INT 0
59600: PPUSH
// uc_side := side ;
59601: LD_ADDR_OWVAR 20
59605: PUSH
59606: LD_VAR 0 1
59610: ST_TO_ADDR
// uc_nation := 3 ;
59611: LD_ADDR_OWVAR 21
59615: PUSH
59616: LD_INT 3
59618: ST_TO_ADDR
// vc_chassis := 25 ;
59619: LD_ADDR_OWVAR 37
59623: PUSH
59624: LD_INT 25
59626: ST_TO_ADDR
// vc_engine := engine_siberite ;
59627: LD_ADDR_OWVAR 39
59631: PUSH
59632: LD_INT 3
59634: ST_TO_ADDR
// vc_control := control_computer ;
59635: LD_ADDR_OWVAR 38
59639: PUSH
59640: LD_INT 3
59642: ST_TO_ADDR
// vc_weapon := 59 ;
59643: LD_ADDR_OWVAR 40
59647: PUSH
59648: LD_INT 59
59650: ST_TO_ADDR
// result := CreateVehicle ;
59651: LD_ADDR_VAR 0 5
59655: PUSH
59656: CALL_OW 45
59660: ST_TO_ADDR
// SetDir ( result , d ) ;
59661: LD_VAR 0 5
59665: PPUSH
59666: LD_VAR 0 4
59670: PPUSH
59671: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
59675: LD_VAR 0 5
59679: PPUSH
59680: LD_VAR 0 2
59684: PPUSH
59685: LD_VAR 0 3
59689: PPUSH
59690: LD_INT 0
59692: PPUSH
59693: CALL_OW 48
// end ;
59697: LD_VAR 0 5
59701: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
59702: LD_INT 0
59704: PPUSH
59705: PPUSH
59706: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
59707: LD_ADDR_VAR 0 2
59711: PUSH
59712: LD_INT 0
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: LD_INT 0
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
59730: LD_VAR 0 1
59734: NOT
59735: PUSH
59736: LD_VAR 0 1
59740: PPUSH
59741: CALL_OW 264
59745: PUSH
59746: LD_INT 12
59748: PUSH
59749: LD_INT 51
59751: PUSH
59752: LD_INT 32
59754: PUSH
59755: LD_EXP 71
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: IN
59766: NOT
59767: OR
59768: IFFALSE 59772
// exit ;
59770: GO 59870
// for i := 1 to 3 do
59772: LD_ADDR_VAR 0 3
59776: PUSH
59777: DOUBLE
59778: LD_INT 1
59780: DEC
59781: ST_TO_ADDR
59782: LD_INT 3
59784: PUSH
59785: FOR_TO
59786: IFFALSE 59868
// begin tmp := GetCargo ( cargo , i ) ;
59788: LD_ADDR_VAR 0 4
59792: PUSH
59793: LD_VAR 0 1
59797: PPUSH
59798: LD_VAR 0 3
59802: PPUSH
59803: CALL_OW 289
59807: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
59808: LD_ADDR_VAR 0 2
59812: PUSH
59813: LD_VAR 0 2
59817: PPUSH
59818: LD_VAR 0 3
59822: PPUSH
59823: LD_VAR 0 4
59827: PPUSH
59828: CALL_OW 1
59832: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
59833: LD_ADDR_VAR 0 2
59837: PUSH
59838: LD_VAR 0 2
59842: PPUSH
59843: LD_INT 4
59845: PPUSH
59846: LD_VAR 0 2
59850: PUSH
59851: LD_INT 4
59853: ARRAY
59854: PUSH
59855: LD_VAR 0 4
59859: PLUS
59860: PPUSH
59861: CALL_OW 1
59865: ST_TO_ADDR
// end ;
59866: GO 59785
59868: POP
59869: POP
// end ;
59870: LD_VAR 0 2
59874: RET
