// export mineCounter ; every 0 0$1 do var i , tmp , task ;
   0: GO 2
   2: DISABLE
   3: LD_INT 0
   5: PPUSH
   6: PPUSH
   7: PPUSH
// begin mineCounter := 5 ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 5
  15: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
  16: LD_INT 35
  18: PPUSH
  19: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , nation_arabian ] , [ f_class , class_soldier ] ] ) ;
  23: LD_ADDR_VAR 0 2
  27: PUSH
  28: LD_INT 22
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: EMPTY
  35: LIST
  36: LIST
  37: PUSH
  38: LD_INT 23
  40: PUSH
  41: LD_INT 2
  43: PUSH
  44: EMPTY
  45: LIST
  46: LIST
  47: PUSH
  48: LD_INT 25
  50: PUSH
  51: LD_INT 1
  53: PUSH
  54: EMPTY
  55: LIST
  56: LIST
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: PPUSH
  63: CALL_OW 69
  67: ST_TO_ADDR
// if not tmp then
  68: LD_VAR 0 2
  72: NOT
  73: IFFALSE 77
// continue ;
  75: GO 16
// for i in tmp do
  77: LD_ADDR_VAR 0 1
  81: PUSH
  82: LD_VAR 0 2
  86: PUSH
  87: FOR_IN
  88: IFFALSE 277
// begin task := GetTaskList ( i ) ;
  90: LD_ADDR_VAR 0 3
  94: PUSH
  95: LD_VAR 0 1
  99: PPUSH
 100: CALL_OW 437
 104: ST_TO_ADDR
// if not task then
 105: LD_VAR 0 3
 109: NOT
 110: IFFALSE 126
// begin SetTag ( i , 0 ) ;
 112: LD_VAR 0 1
 116: PPUSH
 117: LD_INT 0
 119: PPUSH
 120: CALL_OW 109
// continue ;
 124: GO 87
// end ; if GetTag ( i ) = 1 and task [ 1 ] [ 1 ] <> p then
 126: LD_VAR 0 1
 130: PPUSH
 131: CALL_OW 110
 135: PUSH
 136: LD_INT 1
 138: EQUAL
 139: PUSH
 140: LD_VAR 0 3
 144: PUSH
 145: LD_INT 1
 147: ARRAY
 148: PUSH
 149: LD_INT 1
 151: ARRAY
 152: PUSH
 153: LD_STRING p
 155: NONEQUAL
 156: AND
 157: IFFALSE 173
// begin SetTag ( i , 0 ) ;
 159: LD_VAR 0 1
 163: PPUSH
 164: LD_INT 0
 166: PPUSH
 167: CALL_OW 109
// continue ;
 171: GO 87
// end ; if GetTag ( i ) <> 1 and task [ 1 ] [ 1 ] = p then
 173: LD_VAR 0 1
 177: PPUSH
 178: CALL_OW 110
 182: PUSH
 183: LD_INT 1
 185: NONEQUAL
 186: PUSH
 187: LD_VAR 0 3
 191: PUSH
 192: LD_INT 1
 194: ARRAY
 195: PUSH
 196: LD_INT 1
 198: ARRAY
 199: PUSH
 200: LD_STRING p
 202: EQUAL
 203: AND
 204: IFFALSE 275
// begin SetTag ( i , 1 ) ;
 206: LD_VAR 0 1
 210: PPUSH
 211: LD_INT 1
 213: PPUSH
 214: CALL_OW 109
// RaiseSailEventCustom ( 1 , i , task [ 1 ] [ 2 ] , task [ 1 ] [ 3 ] , task [ 1 ] [ 4 ] , 0 , 0 ) ;
 218: LD_INT 1
 220: PPUSH
 221: LD_VAR 0 1
 225: PPUSH
 226: LD_VAR 0 3
 230: PUSH
 231: LD_INT 1
 233: ARRAY
 234: PUSH
 235: LD_INT 2
 237: ARRAY
 238: PPUSH
 239: LD_VAR 0 3
 243: PUSH
 244: LD_INT 1
 246: ARRAY
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PPUSH
 252: LD_VAR 0 3
 256: PUSH
 257: LD_INT 1
 259: ARRAY
 260: PUSH
 261: LD_INT 4
 263: ARRAY
 264: PPUSH
 265: LD_INT 0
 267: PPUSH
 268: LD_INT 0
 270: PPUSH
 271: CALL_OW 595
// end ; end ;
 275: GO 87
 277: POP
 278: POP
// until mineCounter = 0 ;
 279: LD_EXP 1
 283: PUSH
 284: LD_INT 0
 286: EQUAL
 287: IFFALSE 16
// end ;
 289: PPOPN 3
 291: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = 1 then
 292: LD_VAR 0 1
 296: PUSH
 297: LD_INT 1
 299: EQUAL
 300: IFFALSE 388
// begin repeat wait ( 0 0$1 ) ;
 302: LD_INT 35
 304: PPUSH
 305: CALL_OW 67
// if MineAtPos ( p2 , p3 ) or MineAtRange ( GetX ( p4 ) , GetY ( p4 ) ) then
 309: LD_VAR 0 3
 313: PPUSH
 314: LD_VAR 0 4
 318: PPUSH
 319: CALL_OW 458
 323: PUSH
 324: LD_VAR 0 5
 328: PPUSH
 329: CALL_OW 250
 333: PPUSH
 334: LD_VAR 0 5
 338: PPUSH
 339: CALL_OW 251
 343: PPUSH
 344: CALL 391 0 2
 348: OR
 349: IFFALSE 353
// break ;
 351: GO 374
// if GetTag ( p1 ) <> 1 then
 353: LD_VAR 0 2
 357: PPUSH
 358: CALL_OW 110
 362: PUSH
 363: LD_INT 1
 365: NONEQUAL
 366: IFFALSE 370
// exit ;
 368: GO 388
// until false ;
 370: LD_INT 0
 372: IFFALSE 302
// mineCounter := mineCounter - 1 ;
 374: LD_ADDR_EXP 1
 378: PUSH
 379: LD_EXP 1
 383: PUSH
 384: LD_INT 1
 386: MINUS
 387: ST_TO_ADDR
// end ; end ;
 388: PPOPN 7
 390: END
// export function MineAtRange ( x , y ) ; var _x , _y , _d ; begin
 391: LD_INT 0
 393: PPUSH
 394: PPUSH
 395: PPUSH
 396: PPUSH
// for _d := 0 to 5 do
 397: LD_ADDR_VAR 0 6
 401: PUSH
 402: DOUBLE
 403: LD_INT 0
 405: DEC
 406: ST_TO_ADDR
 407: LD_INT 5
 409: PUSH
 410: FOR_TO
 411: IFFALSE 519
// for _x := - 3 to 3 do
 413: LD_ADDR_VAR 0 4
 417: PUSH
 418: DOUBLE
 419: LD_INT 3
 421: NEG
 422: DEC
 423: ST_TO_ADDR
 424: LD_INT 3
 426: PUSH
 427: FOR_TO
 428: IFFALSE 515
// for _y := - 3 to 3 do
 430: LD_ADDR_VAR 0 5
 434: PUSH
 435: DOUBLE
 436: LD_INT 3
 438: NEG
 439: DEC
 440: ST_TO_ADDR
 441: LD_INT 3
 443: PUSH
 444: FOR_TO
 445: IFFALSE 511
// if MineAtPos ( ShiftX ( x , _d , _x ) , ShiftY ( y , _d , _y ) ) then
 447: LD_VAR 0 1
 451: PPUSH
 452: LD_VAR 0 6
 456: PPUSH
 457: LD_VAR 0 4
 461: PPUSH
 462: CALL_OW 272
 466: PPUSH
 467: LD_VAR 0 2
 471: PPUSH
 472: LD_VAR 0 6
 476: PPUSH
 477: LD_VAR 0 5
 481: PPUSH
 482: CALL_OW 273
 486: PPUSH
 487: CALL_OW 458
 491: IFFALSE 509
// begin result := true ;
 493: LD_ADDR_VAR 0 3
 497: PUSH
 498: LD_INT 1
 500: ST_TO_ADDR
// exit ;
 501: POP
 502: POP
 503: POP
 504: POP
 505: POP
 506: POP
 507: GO 521
// end ;
 509: GO 444
 511: POP
 512: POP
 513: GO 427
 515: POP
 516: POP
 517: GO 410
 519: POP
 520: POP
// end ;
 521: LD_VAR 0 3
 525: RET
// every 0 0$2 do var un , x , y , _r , _x , _y , _d , __x , __y ;
 526: GO 528
 528: DISABLE
 529: LD_INT 0
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
 536: PPUSH
 537: PPUSH
 538: PPUSH
 539: PPUSH
// begin x := 23 ;
 540: LD_ADDR_VAR 0 2
 544: PUSH
 545: LD_INT 23
 547: ST_TO_ADDR
// y := 19 ;
 548: LD_ADDR_VAR 0 3
 552: PUSH
 553: LD_INT 19
 555: ST_TO_ADDR
// uc_side := 8 ;
 556: LD_ADDR_OWVAR 20
 560: PUSH
 561: LD_INT 8
 563: ST_TO_ADDR
// uc_nation := 1 ;
 564: LD_ADDR_OWVAR 21
 568: PUSH
 569: LD_INT 1
 571: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
 572: LD_INT 0
 574: PPUSH
 575: LD_INT 1
 577: PPUSH
 578: CALL_OW 381
// for _r := 1 to 6 do
 582: LD_ADDR_VAR 0 4
 586: PUSH
 587: DOUBLE
 588: LD_INT 1
 590: DEC
 591: ST_TO_ADDR
 592: LD_INT 6
 594: PUSH
 595: FOR_TO
 596: IFFALSE 748
// begin for _x := - _r to _r do
 598: LD_ADDR_VAR 0 5
 602: PUSH
 603: DOUBLE
 604: LD_VAR 0 4
 608: NEG
 609: DEC
 610: ST_TO_ADDR
 611: LD_VAR 0 4
 615: PUSH
 616: FOR_TO
 617: IFFALSE 744
// for _y := - _r to _r do
 619: LD_ADDR_VAR 0 6
 623: PUSH
 624: DOUBLE
 625: LD_VAR 0 4
 629: NEG
 630: DEC
 631: ST_TO_ADDR
 632: LD_VAR 0 4
 636: PUSH
 637: FOR_TO
 638: IFFALSE 740
// begin __x := x + _x ;
 640: LD_ADDR_VAR 0 8
 644: PUSH
 645: LD_VAR 0 2
 649: PUSH
 650: LD_VAR 0 5
 654: PLUS
 655: ST_TO_ADDR
// __y := y + _y ;
 656: LD_ADDR_VAR 0 9
 660: PUSH
 661: LD_VAR 0 3
 665: PUSH
 666: LD_VAR 0 6
 670: PLUS
 671: ST_TO_ADDR
// if HexInfo ( __x , __y ) then
 672: LD_VAR 0 8
 676: PPUSH
 677: LD_VAR 0 9
 681: PPUSH
 682: CALL_OW 428
 686: IFFALSE 690
// continue ;
 688: GO 637
// wait ( 1 ) ;
 690: LD_INT 1
 692: PPUSH
 693: CALL_OW 67
// un := CreateHuman ;
 697: LD_ADDR_VAR 0 1
 701: PUSH
 702: CALL_OW 44
 706: ST_TO_ADDR
// PlaceUnitXY ( un , __x , __y , false ) ;
 707: LD_VAR 0 1
 711: PPUSH
 712: LD_VAR 0 8
 716: PPUSH
 717: LD_VAR 0 9
 721: PPUSH
 722: LD_INT 0
 724: PPUSH
 725: CALL_OW 48
// ComHold ( un ) ;
 729: LD_VAR 0 1
 733: PPUSH
 734: CALL_OW 140
// end ;
 738: GO 637
 740: POP
 741: POP
 742: GO 616
 744: POP
 745: POP
// end ;
 746: GO 595
 748: POP
 749: POP
// end ;
 750: PPOPN 9
 752: END
// export function PrepareAmericanConvoy ( soldiersAmount , engsAmount , mechsAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road , sols , engs , mechs , scis , enemySkillLevel , amConvoyTroops ; begin
 753: LD_INT 0
 755: PPUSH
 756: PPUSH
 757: PPUSH
 758: PPUSH
 759: PPUSH
 760: PPUSH
 761: PPUSH
 762: PPUSH
 763: PPUSH
 764: PPUSH
 765: PPUSH
// enemySkilllevel := 2 ;
 766: LD_ADDR_VAR 0 16
 770: PUSH
 771: LD_INT 2
 773: ST_TO_ADDR
// uc_side := 1 ;
 774: LD_ADDR_OWVAR 20
 778: PUSH
 779: LD_INT 1
 781: ST_TO_ADDR
// uc_nation := 1 ;
 782: LD_ADDR_OWVAR 21
 786: PUSH
 787: LD_INT 1
 789: ST_TO_ADDR
// hc_name :=  ;
 790: LD_ADDR_OWVAR 26
 794: PUSH
 795: LD_STRING 
 797: ST_TO_ADDR
// hc_gallery :=  ;
 798: LD_ADDR_OWVAR 33
 802: PUSH
 803: LD_STRING 
 805: ST_TO_ADDR
// for i := 1 to soldiersAmount do
 806: LD_ADDR_VAR 0 8
 810: PUSH
 811: DOUBLE
 812: LD_INT 1
 814: DEC
 815: ST_TO_ADDR
 816: LD_VAR 0 1
 820: PUSH
 821: FOR_TO
 822: IFFALSE 897
// begin PrepareSoldier ( false , enemySkillLevel ) ;
 824: LD_INT 0
 826: PPUSH
 827: LD_VAR 0 16
 831: PPUSH
 832: CALL_OW 381
// un = CreateHuman ;
 836: LD_ADDR_VAR 0 9
 840: PUSH
 841: CALL_OW 44
 845: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 846: LD_ADDR_VAR 0 17
 850: PUSH
 851: LD_VAR 0 17
 855: PUSH
 856: LD_VAR 0 9
 860: ADD
 861: ST_TO_ADDR
// sols := sols ^ un ;
 862: LD_ADDR_VAR 0 12
 866: PUSH
 867: LD_VAR 0 12
 871: PUSH
 872: LD_VAR 0 9
 876: ADD
 877: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 878: LD_VAR 0 9
 882: PPUSH
 883: LD_VAR 0 6
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 49
// end ;
 895: GO 821
 897: POP
 898: POP
// for i := 1 to engsAmount do
 899: LD_ADDR_VAR 0 8
 903: PUSH
 904: DOUBLE
 905: LD_INT 1
 907: DEC
 908: ST_TO_ADDR
 909: LD_VAR 0 2
 913: PUSH
 914: FOR_TO
 915: IFFALSE 990
// begin PrepareEngineer ( false , enemySkillLevel ) ;
 917: LD_INT 0
 919: PPUSH
 920: LD_VAR 0 16
 924: PPUSH
 925: CALL_OW 382
// un = CreateHuman ;
 929: LD_ADDR_VAR 0 9
 933: PUSH
 934: CALL_OW 44
 938: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 939: LD_ADDR_VAR 0 17
 943: PUSH
 944: LD_VAR 0 17
 948: PUSH
 949: LD_VAR 0 9
 953: ADD
 954: ST_TO_ADDR
// engs := engs ^ un ;
 955: LD_ADDR_VAR 0 13
 959: PUSH
 960: LD_VAR 0 13
 964: PUSH
 965: LD_VAR 0 9
 969: ADD
 970: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 971: LD_VAR 0 9
 975: PPUSH
 976: LD_VAR 0 6
 980: PPUSH
 981: LD_INT 0
 983: PPUSH
 984: CALL_OW 49
// end ;
 988: GO 914
 990: POP
 991: POP
// for i := 1 to mechsAmount do
 992: LD_ADDR_VAR 0 8
 996: PUSH
 997: DOUBLE
 998: LD_INT 1
1000: DEC
1001: ST_TO_ADDR
1002: LD_VAR 0 3
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1083
// begin PrepareEngineer ( false , enemySkillLevel ) ;
1010: LD_INT 0
1012: PPUSH
1013: LD_VAR 0 16
1017: PPUSH
1018: CALL_OW 382
// un = CreateHuman ;
1022: LD_ADDR_VAR 0 9
1026: PUSH
1027: CALL_OW 44
1031: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
1032: LD_ADDR_VAR 0 17
1036: PUSH
1037: LD_VAR 0 17
1041: PUSH
1042: LD_VAR 0 9
1046: ADD
1047: ST_TO_ADDR
// engs := engs ^ un ;
1048: LD_ADDR_VAR 0 13
1052: PUSH
1053: LD_VAR 0 13
1057: PUSH
1058: LD_VAR 0 9
1062: ADD
1063: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1064: LD_VAR 0 9
1068: PPUSH
1069: LD_VAR 0 6
1073: PPUSH
1074: LD_INT 0
1076: PPUSH
1077: CALL_OW 49
// end ;
1081: GO 1007
1083: POP
1084: POP
// for i := 1 to scientistsAmount do
1085: LD_ADDR_VAR 0 8
1089: PUSH
1090: DOUBLE
1091: LD_INT 1
1093: DEC
1094: ST_TO_ADDR
1095: LD_VAR 0 4
1099: PUSH
1100: FOR_TO
1101: IFFALSE 1176
// begin PrepareMechanic ( false , enemySkillLevel ) ;
1103: LD_INT 0
1105: PPUSH
1106: LD_VAR 0 16
1110: PPUSH
1111: CALL_OW 383
// un = CreateHuman ;
1115: LD_ADDR_VAR 0 9
1119: PUSH
1120: CALL_OW 44
1124: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
1125: LD_ADDR_VAR 0 17
1129: PUSH
1130: LD_VAR 0 17
1134: PUSH
1135: LD_VAR 0 9
1139: ADD
1140: ST_TO_ADDR
// mechs := mechs ^ un ;
1141: LD_ADDR_VAR 0 14
1145: PUSH
1146: LD_VAR 0 14
1150: PUSH
1151: LD_VAR 0 9
1155: ADD
1156: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1157: LD_VAR 0 9
1161: PPUSH
1162: LD_VAR 0 6
1166: PPUSH
1167: LD_INT 0
1169: PPUSH
1170: CALL_OW 49
// end ;
1174: GO 1100
1176: POP
1177: POP
// for i := 1 to vehiclesAmount do
1178: LD_ADDR_VAR 0 8
1182: PUSH
1183: DOUBLE
1184: LD_INT 1
1186: DEC
1187: ST_TO_ADDR
1188: LD_VAR 0 5
1192: PUSH
1193: FOR_TO
1194: IFFALSE 1360
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
1196: LD_ADDR_OWVAR 40
1200: PUSH
1201: LD_INT 2
1203: PUSH
1204: LD_INT 4
1206: PUSH
1207: LD_INT 3
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: PUSH
1215: LD_INT 1
1217: PPUSH
1218: LD_INT 3
1220: PPUSH
1221: CALL_OW 12
1225: ARRAY
1226: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1227: LD_ADDR_OWVAR 37
1231: PUSH
1232: LD_INT 3
1234: ST_TO_ADDR
// vc_control = control_manual ;
1235: LD_ADDR_OWVAR 38
1239: PUSH
1240: LD_INT 1
1242: ST_TO_ADDR
// vc_engine = engine_combustion ;
1243: LD_ADDR_OWVAR 39
1247: PUSH
1248: LD_INT 1
1250: ST_TO_ADDR
// veh = CreateVehicle ;
1251: LD_ADDR_VAR 0 10
1255: PUSH
1256: CALL_OW 45
1260: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ veh ;
1261: LD_ADDR_VAR 0 17
1265: PUSH
1266: LD_VAR 0 17
1270: PUSH
1271: LD_VAR 0 10
1275: ADD
1276: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
1277: LD_VAR 0 10
1281: PPUSH
1282: LD_VAR 0 6
1286: PPUSH
1287: LD_INT 0
1289: PPUSH
1290: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
1294: LD_INT 0
1296: PPUSH
1297: LD_VAR 0 16
1301: PPUSH
1302: CALL_OW 383
// un = CreateHuman ;
1306: LD_ADDR_VAR 0 9
1310: PUSH
1311: CALL_OW 44
1315: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ un ;
1316: LD_ADDR_VAR 0 17
1320: PUSH
1321: LD_VAR 0 17
1325: PUSH
1326: LD_VAR 0 9
1330: ADD
1331: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1332: LD_VAR 0 9
1336: PPUSH
1337: LD_VAR 0 10
1341: PPUSH
1342: CALL_OW 52
// SetFuel ( veh , 100 ) ;
1346: LD_VAR 0 10
1350: PPUSH
1351: LD_INT 100
1353: PPUSH
1354: CALL_OW 240
// end ;
1358: GO 1193
1360: POP
1361: POP
// end ; end_of_file
1362: LD_VAR 0 7
1366: RET
// every 0 0$1 do
1367: GO 1369
1369: DISABLE
// begin enable ;
1370: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1371: LD_STRING updateTimer(
1373: PUSH
1374: LD_OWVAR 1
1378: STR
1379: PUSH
1380: LD_STRING );
1382: STR
1383: PPUSH
1384: CALL_OW 559
// end ;
1388: END
// export function SOS_MapStart ( ) ; begin
1389: LD_INT 0
1391: PPUSH
// if streamModeActive then
1392: LD_EXP 3
1396: IFFALSE 1405
// DefineStreamItems ( true ) ;
1398: LD_INT 1
1400: PPUSH
1401: CALL 3209 0 1
// UpdateLuaVariables ( ) ;
1405: CALL 1422 0 0
// UpdateFactoryWaypoints ( ) ;
1409: CALL 16070 0 0
// UpdateWarehouseGatheringPoints ( ) ;
1413: CALL 16327 0 0
// end ;
1417: LD_VAR 0 1
1421: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
1422: LD_INT 0
1424: PPUSH
// if not globalGameSaveCounter then
1425: LD_EXP 2
1429: NOT
1430: IFFALSE 1441
// ToLua ( setGameSaveCounter(0) ) else
1432: LD_STRING setGameSaveCounter(0)
1434: PPUSH
1435: CALL_OW 559
1439: GO 1473
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
1441: LD_ADDR_EXP 2
1445: PUSH
1446: LD_EXP 2
1450: PPUSH
1451: CALL 60506 0 1
1455: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1456: LD_STRING setGameSaveCounter(
1458: PUSH
1459: LD_EXP 2
1463: STR
1464: PUSH
1465: LD_STRING )
1467: STR
1468: PPUSH
1469: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
1473: LD_STRING setGameDifficulty(
1475: PUSH
1476: LD_OWVAR 67
1480: STR
1481: PUSH
1482: LD_STRING )
1484: STR
1485: PPUSH
1486: CALL_OW 559
// end ;
1490: LD_VAR 0 1
1494: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
1495: LD_INT 0
1497: PPUSH
// if p2 = stream_mode then
1498: LD_VAR 0 2
1502: PUSH
1503: LD_INT 100
1505: EQUAL
1506: IFFALSE 2509
// begin if not StreamModeActive then
1508: LD_EXP 3
1512: NOT
1513: IFFALSE 1523
// StreamModeActive := true ;
1515: LD_ADDR_EXP 3
1519: PUSH
1520: LD_INT 1
1522: ST_TO_ADDR
// if p3 = 0 then
1523: LD_VAR 0 3
1527: PUSH
1528: LD_INT 0
1530: EQUAL
1531: IFFALSE 1537
// InitStreamMode ;
1533: CALL 2745 0 0
// if p3 = 1 then
1537: LD_VAR 0 3
1541: PUSH
1542: LD_INT 1
1544: EQUAL
1545: IFFALSE 1555
// sRocket := true ;
1547: LD_ADDR_EXP 8
1551: PUSH
1552: LD_INT 1
1554: ST_TO_ADDR
// if p3 = 2 then
1555: LD_VAR 0 3
1559: PUSH
1560: LD_INT 2
1562: EQUAL
1563: IFFALSE 1573
// sSpeed := true ;
1565: LD_ADDR_EXP 7
1569: PUSH
1570: LD_INT 1
1572: ST_TO_ADDR
// if p3 = 3 then
1573: LD_VAR 0 3
1577: PUSH
1578: LD_INT 3
1580: EQUAL
1581: IFFALSE 1591
// sEngine := true ;
1583: LD_ADDR_EXP 9
1587: PUSH
1588: LD_INT 1
1590: ST_TO_ADDR
// if p3 = 4 then
1591: LD_VAR 0 3
1595: PUSH
1596: LD_INT 4
1598: EQUAL
1599: IFFALSE 1609
// sSpec := true ;
1601: LD_ADDR_EXP 6
1605: PUSH
1606: LD_INT 1
1608: ST_TO_ADDR
// if p3 = 5 then
1609: LD_VAR 0 3
1613: PUSH
1614: LD_INT 5
1616: EQUAL
1617: IFFALSE 1627
// sLevel := true ;
1619: LD_ADDR_EXP 10
1623: PUSH
1624: LD_INT 1
1626: ST_TO_ADDR
// if p3 = 6 then
1627: LD_VAR 0 3
1631: PUSH
1632: LD_INT 6
1634: EQUAL
1635: IFFALSE 1645
// sArmoury := true ;
1637: LD_ADDR_EXP 11
1641: PUSH
1642: LD_INT 1
1644: ST_TO_ADDR
// if p3 = 7 then
1645: LD_VAR 0 3
1649: PUSH
1650: LD_INT 7
1652: EQUAL
1653: IFFALSE 1663
// sRadar := true ;
1655: LD_ADDR_EXP 12
1659: PUSH
1660: LD_INT 1
1662: ST_TO_ADDR
// if p3 = 8 then
1663: LD_VAR 0 3
1667: PUSH
1668: LD_INT 8
1670: EQUAL
1671: IFFALSE 1681
// sBunker := true ;
1673: LD_ADDR_EXP 13
1677: PUSH
1678: LD_INT 1
1680: ST_TO_ADDR
// if p3 = 9 then
1681: LD_VAR 0 3
1685: PUSH
1686: LD_INT 9
1688: EQUAL
1689: IFFALSE 1699
// sHack := true ;
1691: LD_ADDR_EXP 14
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// if p3 = 10 then
1699: LD_VAR 0 3
1703: PUSH
1704: LD_INT 10
1706: EQUAL
1707: IFFALSE 1717
// sFire := true ;
1709: LD_ADDR_EXP 15
1713: PUSH
1714: LD_INT 1
1716: ST_TO_ADDR
// if p3 = 11 then
1717: LD_VAR 0 3
1721: PUSH
1722: LD_INT 11
1724: EQUAL
1725: IFFALSE 1735
// sRefresh := true ;
1727: LD_ADDR_EXP 16
1731: PUSH
1732: LD_INT 1
1734: ST_TO_ADDR
// if p3 = 12 then
1735: LD_VAR 0 3
1739: PUSH
1740: LD_INT 12
1742: EQUAL
1743: IFFALSE 1753
// sExp := true ;
1745: LD_ADDR_EXP 17
1749: PUSH
1750: LD_INT 1
1752: ST_TO_ADDR
// if p3 = 13 then
1753: LD_VAR 0 3
1757: PUSH
1758: LD_INT 13
1760: EQUAL
1761: IFFALSE 1771
// sDepot := true ;
1763: LD_ADDR_EXP 18
1767: PUSH
1768: LD_INT 1
1770: ST_TO_ADDR
// if p3 = 14 then
1771: LD_VAR 0 3
1775: PUSH
1776: LD_INT 14
1778: EQUAL
1779: IFFALSE 1789
// sFlag := true ;
1781: LD_ADDR_EXP 19
1785: PUSH
1786: LD_INT 1
1788: ST_TO_ADDR
// if p3 = 15 then
1789: LD_VAR 0 3
1793: PUSH
1794: LD_INT 15
1796: EQUAL
1797: IFFALSE 1807
// sKamikadze := true ;
1799: LD_ADDR_EXP 27
1803: PUSH
1804: LD_INT 1
1806: ST_TO_ADDR
// if p3 = 16 then
1807: LD_VAR 0 3
1811: PUSH
1812: LD_INT 16
1814: EQUAL
1815: IFFALSE 1825
// sTroll := true ;
1817: LD_ADDR_EXP 28
1821: PUSH
1822: LD_INT 1
1824: ST_TO_ADDR
// if p3 = 17 then
1825: LD_VAR 0 3
1829: PUSH
1830: LD_INT 17
1832: EQUAL
1833: IFFALSE 1843
// sSlow := true ;
1835: LD_ADDR_EXP 29
1839: PUSH
1840: LD_INT 1
1842: ST_TO_ADDR
// if p3 = 18 then
1843: LD_VAR 0 3
1847: PUSH
1848: LD_INT 18
1850: EQUAL
1851: IFFALSE 1861
// sLack := true ;
1853: LD_ADDR_EXP 30
1857: PUSH
1858: LD_INT 1
1860: ST_TO_ADDR
// if p3 = 19 then
1861: LD_VAR 0 3
1865: PUSH
1866: LD_INT 19
1868: EQUAL
1869: IFFALSE 1879
// sTank := true ;
1871: LD_ADDR_EXP 32
1875: PUSH
1876: LD_INT 1
1878: ST_TO_ADDR
// if p3 = 20 then
1879: LD_VAR 0 3
1883: PUSH
1884: LD_INT 20
1886: EQUAL
1887: IFFALSE 1897
// sRemote := true ;
1889: LD_ADDR_EXP 33
1893: PUSH
1894: LD_INT 1
1896: ST_TO_ADDR
// if p3 = 21 then
1897: LD_VAR 0 3
1901: PUSH
1902: LD_INT 21
1904: EQUAL
1905: IFFALSE 1915
// sPowell := true ;
1907: LD_ADDR_EXP 34
1911: PUSH
1912: LD_INT 1
1914: ST_TO_ADDR
// if p3 = 22 then
1915: LD_VAR 0 3
1919: PUSH
1920: LD_INT 22
1922: EQUAL
1923: IFFALSE 1933
// sTeleport := true ;
1925: LD_ADDR_EXP 37
1929: PUSH
1930: LD_INT 1
1932: ST_TO_ADDR
// if p3 = 23 then
1933: LD_VAR 0 3
1937: PUSH
1938: LD_INT 23
1940: EQUAL
1941: IFFALSE 1951
// sOilTower := true ;
1943: LD_ADDR_EXP 39
1947: PUSH
1948: LD_INT 1
1950: ST_TO_ADDR
// if p3 = 24 then
1951: LD_VAR 0 3
1955: PUSH
1956: LD_INT 24
1958: EQUAL
1959: IFFALSE 1969
// sShovel := true ;
1961: LD_ADDR_EXP 40
1965: PUSH
1966: LD_INT 1
1968: ST_TO_ADDR
// if p3 = 25 then
1969: LD_VAR 0 3
1973: PUSH
1974: LD_INT 25
1976: EQUAL
1977: IFFALSE 1987
// sSheik := true ;
1979: LD_ADDR_EXP 41
1983: PUSH
1984: LD_INT 1
1986: ST_TO_ADDR
// if p3 = 26 then
1987: LD_VAR 0 3
1991: PUSH
1992: LD_INT 26
1994: EQUAL
1995: IFFALSE 2005
// sEarthquake := true ;
1997: LD_ADDR_EXP 43
2001: PUSH
2002: LD_INT 1
2004: ST_TO_ADDR
// if p3 = 27 then
2005: LD_VAR 0 3
2009: PUSH
2010: LD_INT 27
2012: EQUAL
2013: IFFALSE 2023
// sAI := true ;
2015: LD_ADDR_EXP 44
2019: PUSH
2020: LD_INT 1
2022: ST_TO_ADDR
// if p3 = 28 then
2023: LD_VAR 0 3
2027: PUSH
2028: LD_INT 28
2030: EQUAL
2031: IFFALSE 2041
// sCargo := true ;
2033: LD_ADDR_EXP 47
2037: PUSH
2038: LD_INT 1
2040: ST_TO_ADDR
// if p3 = 29 then
2041: LD_VAR 0 3
2045: PUSH
2046: LD_INT 29
2048: EQUAL
2049: IFFALSE 2059
// sDLaser := true ;
2051: LD_ADDR_EXP 48
2055: PUSH
2056: LD_INT 1
2058: ST_TO_ADDR
// if p3 = 30 then
2059: LD_VAR 0 3
2063: PUSH
2064: LD_INT 30
2066: EQUAL
2067: IFFALSE 2077
// sExchange := true ;
2069: LD_ADDR_EXP 49
2073: PUSH
2074: LD_INT 1
2076: ST_TO_ADDR
// if p3 = 31 then
2077: LD_VAR 0 3
2081: PUSH
2082: LD_INT 31
2084: EQUAL
2085: IFFALSE 2095
// sFac := true ;
2087: LD_ADDR_EXP 50
2091: PUSH
2092: LD_INT 1
2094: ST_TO_ADDR
// if p3 = 32 then
2095: LD_VAR 0 3
2099: PUSH
2100: LD_INT 32
2102: EQUAL
2103: IFFALSE 2113
// sPower := true ;
2105: LD_ADDR_EXP 51
2109: PUSH
2110: LD_INT 1
2112: ST_TO_ADDR
// if p3 = 33 then
2113: LD_VAR 0 3
2117: PUSH
2118: LD_INT 33
2120: EQUAL
2121: IFFALSE 2131
// sRandom := true ;
2123: LD_ADDR_EXP 52
2127: PUSH
2128: LD_INT 1
2130: ST_TO_ADDR
// if p3 = 34 then
2131: LD_VAR 0 3
2135: PUSH
2136: LD_INT 34
2138: EQUAL
2139: IFFALSE 2149
// sShield := true ;
2141: LD_ADDR_EXP 53
2145: PUSH
2146: LD_INT 1
2148: ST_TO_ADDR
// if p3 = 35 then
2149: LD_VAR 0 3
2153: PUSH
2154: LD_INT 35
2156: EQUAL
2157: IFFALSE 2167
// sTime := true ;
2159: LD_ADDR_EXP 54
2163: PUSH
2164: LD_INT 1
2166: ST_TO_ADDR
// if p3 = 36 then
2167: LD_VAR 0 3
2171: PUSH
2172: LD_INT 36
2174: EQUAL
2175: IFFALSE 2185
// sTools := true ;
2177: LD_ADDR_EXP 55
2181: PUSH
2182: LD_INT 1
2184: ST_TO_ADDR
// if p3 = 101 then
2185: LD_VAR 0 3
2189: PUSH
2190: LD_INT 101
2192: EQUAL
2193: IFFALSE 2203
// sSold := true ;
2195: LD_ADDR_EXP 20
2199: PUSH
2200: LD_INT 1
2202: ST_TO_ADDR
// if p3 = 102 then
2203: LD_VAR 0 3
2207: PUSH
2208: LD_INT 102
2210: EQUAL
2211: IFFALSE 2221
// sDiff := true ;
2213: LD_ADDR_EXP 21
2217: PUSH
2218: LD_INT 1
2220: ST_TO_ADDR
// if p3 = 103 then
2221: LD_VAR 0 3
2225: PUSH
2226: LD_INT 103
2228: EQUAL
2229: IFFALSE 2239
// sFog := true ;
2231: LD_ADDR_EXP 24
2235: PUSH
2236: LD_INT 1
2238: ST_TO_ADDR
// if p3 = 104 then
2239: LD_VAR 0 3
2243: PUSH
2244: LD_INT 104
2246: EQUAL
2247: IFFALSE 2257
// sReset := true ;
2249: LD_ADDR_EXP 25
2253: PUSH
2254: LD_INT 1
2256: ST_TO_ADDR
// if p3 = 105 then
2257: LD_VAR 0 3
2261: PUSH
2262: LD_INT 105
2264: EQUAL
2265: IFFALSE 2275
// sSun := true ;
2267: LD_ADDR_EXP 26
2271: PUSH
2272: LD_INT 1
2274: ST_TO_ADDR
// if p3 = 106 then
2275: LD_VAR 0 3
2279: PUSH
2280: LD_INT 106
2282: EQUAL
2283: IFFALSE 2293
// sTiger := true ;
2285: LD_ADDR_EXP 22
2289: PUSH
2290: LD_INT 1
2292: ST_TO_ADDR
// if p3 = 107 then
2293: LD_VAR 0 3
2297: PUSH
2298: LD_INT 107
2300: EQUAL
2301: IFFALSE 2311
// sBomb := true ;
2303: LD_ADDR_EXP 23
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// if p3 = 108 then
2311: LD_VAR 0 3
2315: PUSH
2316: LD_INT 108
2318: EQUAL
2319: IFFALSE 2329
// sWound := true ;
2321: LD_ADDR_EXP 31
2325: PUSH
2326: LD_INT 1
2328: ST_TO_ADDR
// if p3 = 109 then
2329: LD_VAR 0 3
2333: PUSH
2334: LD_INT 109
2336: EQUAL
2337: IFFALSE 2347
// sBetray := true ;
2339: LD_ADDR_EXP 35
2343: PUSH
2344: LD_INT 1
2346: ST_TO_ADDR
// if p3 = 110 then
2347: LD_VAR 0 3
2351: PUSH
2352: LD_INT 110
2354: EQUAL
2355: IFFALSE 2365
// sContamin := true ;
2357: LD_ADDR_EXP 36
2361: PUSH
2362: LD_INT 1
2364: ST_TO_ADDR
// if p3 = 111 then
2365: LD_VAR 0 3
2369: PUSH
2370: LD_INT 111
2372: EQUAL
2373: IFFALSE 2383
// sOil := true ;
2375: LD_ADDR_EXP 38
2379: PUSH
2380: LD_INT 1
2382: ST_TO_ADDR
// if p3 = 112 then
2383: LD_VAR 0 3
2387: PUSH
2388: LD_INT 112
2390: EQUAL
2391: IFFALSE 2401
// sStu := true ;
2393: LD_ADDR_EXP 42
2397: PUSH
2398: LD_INT 1
2400: ST_TO_ADDR
// if p3 = 113 then
2401: LD_VAR 0 3
2405: PUSH
2406: LD_INT 113
2408: EQUAL
2409: IFFALSE 2419
// sBazooka := true ;
2411: LD_ADDR_EXP 45
2415: PUSH
2416: LD_INT 1
2418: ST_TO_ADDR
// if p3 = 114 then
2419: LD_VAR 0 3
2423: PUSH
2424: LD_INT 114
2426: EQUAL
2427: IFFALSE 2437
// sMortar := true ;
2429: LD_ADDR_EXP 46
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// if p3 = 115 then
2437: LD_VAR 0 3
2441: PUSH
2442: LD_INT 115
2444: EQUAL
2445: IFFALSE 2455
// sRanger := true ;
2447: LD_ADDR_EXP 56
2451: PUSH
2452: LD_INT 1
2454: ST_TO_ADDR
// if p3 = 116 then
2455: LD_VAR 0 3
2459: PUSH
2460: LD_INT 116
2462: EQUAL
2463: IFFALSE 2473
// sComputer := true ;
2465: LD_ADDR_EXP 57
2469: PUSH
2470: LD_INT 1
2472: ST_TO_ADDR
// if p3 = 117 then
2473: LD_VAR 0 3
2477: PUSH
2478: LD_INT 117
2480: EQUAL
2481: IFFALSE 2491
// s30 := true ;
2483: LD_ADDR_EXP 58
2487: PUSH
2488: LD_INT 1
2490: ST_TO_ADDR
// if p3 = 118 then
2491: LD_VAR 0 3
2495: PUSH
2496: LD_INT 118
2498: EQUAL
2499: IFFALSE 2509
// s60 := true ;
2501: LD_ADDR_EXP 59
2505: PUSH
2506: LD_INT 1
2508: ST_TO_ADDR
// end ; if p2 = hack_mode then
2509: LD_VAR 0 2
2513: PUSH
2514: LD_INT 101
2516: EQUAL
2517: IFFALSE 2645
// begin case p3 of 1 :
2519: LD_VAR 0 3
2523: PUSH
2524: LD_INT 1
2526: DOUBLE
2527: EQUAL
2528: IFTRUE 2532
2530: GO 2539
2532: POP
// hHackUnlimitedResources ; 2 :
2533: CALL 14816 0 0
2537: GO 2645
2539: LD_INT 2
2541: DOUBLE
2542: EQUAL
2543: IFTRUE 2547
2545: GO 2554
2547: POP
// hHackSetLevel10 ; 3 :
2548: CALL 14949 0 0
2552: GO 2645
2554: LD_INT 3
2556: DOUBLE
2557: EQUAL
2558: IFTRUE 2562
2560: GO 2569
2562: POP
// hHackSetLevel10YourUnits ; 4 :
2563: CALL 15034 0 0
2567: GO 2645
2569: LD_INT 4
2571: DOUBLE
2572: EQUAL
2573: IFTRUE 2577
2575: GO 2584
2577: POP
// hHackInvincible ; 5 :
2578: CALL 15482 0 0
2582: GO 2645
2584: LD_INT 5
2586: DOUBLE
2587: EQUAL
2588: IFTRUE 2592
2590: GO 2599
2592: POP
// hHackInvisible ; 6 :
2593: CALL 15593 0 0
2597: GO 2645
2599: LD_INT 6
2601: DOUBLE
2602: EQUAL
2603: IFTRUE 2607
2605: GO 2614
2607: POP
// hHackChangeYourSide ; 7 :
2608: CALL 15650 0 0
2612: GO 2645
2614: LD_INT 7
2616: DOUBLE
2617: EQUAL
2618: IFTRUE 2622
2620: GO 2629
2622: POP
// hHackChangeUnitSide ; 8 :
2623: CALL 15692 0 0
2627: GO 2645
2629: LD_INT 8
2631: DOUBLE
2632: EQUAL
2633: IFTRUE 2637
2635: GO 2644
2637: POP
// hHackFog ; end ;
2638: CALL 15793 0 0
2642: GO 2645
2644: POP
// end ; if p2 = game_save_mode then
2645: LD_VAR 0 2
2649: PUSH
2650: LD_INT 102
2652: EQUAL
2653: IFFALSE 2718
// begin if p3 = 1 then
2655: LD_VAR 0 3
2659: PUSH
2660: LD_INT 1
2662: EQUAL
2663: IFFALSE 2675
// globalGameSaveCounter := p4 ;
2665: LD_ADDR_EXP 2
2669: PUSH
2670: LD_VAR 0 4
2674: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
2675: LD_VAR 0 3
2679: PUSH
2680: LD_INT 2
2682: EQUAL
2683: PUSH
2684: LD_EXP 2
2688: AND
2689: IFFALSE 2708
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
2691: LD_STRING setGameSaveCounter(
2693: PUSH
2694: LD_EXP 2
2698: STR
2699: PUSH
2700: LD_STRING )
2702: STR
2703: PPUSH
2704: CALL_OW 559
// display_strings := globalGameSaveCounter ;
2708: LD_ADDR_OWVAR 47
2712: PUSH
2713: LD_EXP 2
2717: ST_TO_ADDR
// end ; end ;
2718: LD_VAR 0 7
2722: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
2723: GO 2725
2725: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
2726: LD_STRING initStreamRollete();
2728: PPUSH
2729: CALL_OW 559
// InitStreamMode ;
2733: CALL 2745 0 0
// DefineStreamItems ( false ) ;
2737: LD_INT 0
2739: PPUSH
2740: CALL 3209 0 1
// end ;
2744: END
// function InitStreamMode ; begin
2745: LD_INT 0
2747: PPUSH
// streamModeActive := false ;
2748: LD_ADDR_EXP 3
2752: PUSH
2753: LD_INT 0
2755: ST_TO_ADDR
// normalCounter := 36 ;
2756: LD_ADDR_EXP 4
2760: PUSH
2761: LD_INT 36
2763: ST_TO_ADDR
// hardcoreCounter := 18 ;
2764: LD_ADDR_EXP 5
2768: PUSH
2769: LD_INT 18
2771: ST_TO_ADDR
// sRocket := false ;
2772: LD_ADDR_EXP 8
2776: PUSH
2777: LD_INT 0
2779: ST_TO_ADDR
// sSpeed := false ;
2780: LD_ADDR_EXP 7
2784: PUSH
2785: LD_INT 0
2787: ST_TO_ADDR
// sEngine := false ;
2788: LD_ADDR_EXP 9
2792: PUSH
2793: LD_INT 0
2795: ST_TO_ADDR
// sSpec := false ;
2796: LD_ADDR_EXP 6
2800: PUSH
2801: LD_INT 0
2803: ST_TO_ADDR
// sLevel := false ;
2804: LD_ADDR_EXP 10
2808: PUSH
2809: LD_INT 0
2811: ST_TO_ADDR
// sArmoury := false ;
2812: LD_ADDR_EXP 11
2816: PUSH
2817: LD_INT 0
2819: ST_TO_ADDR
// sRadar := false ;
2820: LD_ADDR_EXP 12
2824: PUSH
2825: LD_INT 0
2827: ST_TO_ADDR
// sBunker := false ;
2828: LD_ADDR_EXP 13
2832: PUSH
2833: LD_INT 0
2835: ST_TO_ADDR
// sHack := false ;
2836: LD_ADDR_EXP 14
2840: PUSH
2841: LD_INT 0
2843: ST_TO_ADDR
// sFire := false ;
2844: LD_ADDR_EXP 15
2848: PUSH
2849: LD_INT 0
2851: ST_TO_ADDR
// sRefresh := false ;
2852: LD_ADDR_EXP 16
2856: PUSH
2857: LD_INT 0
2859: ST_TO_ADDR
// sExp := false ;
2860: LD_ADDR_EXP 17
2864: PUSH
2865: LD_INT 0
2867: ST_TO_ADDR
// sDepot := false ;
2868: LD_ADDR_EXP 18
2872: PUSH
2873: LD_INT 0
2875: ST_TO_ADDR
// sFlag := false ;
2876: LD_ADDR_EXP 19
2880: PUSH
2881: LD_INT 0
2883: ST_TO_ADDR
// sKamikadze := false ;
2884: LD_ADDR_EXP 27
2888: PUSH
2889: LD_INT 0
2891: ST_TO_ADDR
// sTroll := false ;
2892: LD_ADDR_EXP 28
2896: PUSH
2897: LD_INT 0
2899: ST_TO_ADDR
// sSlow := false ;
2900: LD_ADDR_EXP 29
2904: PUSH
2905: LD_INT 0
2907: ST_TO_ADDR
// sLack := false ;
2908: LD_ADDR_EXP 30
2912: PUSH
2913: LD_INT 0
2915: ST_TO_ADDR
// sTank := false ;
2916: LD_ADDR_EXP 32
2920: PUSH
2921: LD_INT 0
2923: ST_TO_ADDR
// sRemote := false ;
2924: LD_ADDR_EXP 33
2928: PUSH
2929: LD_INT 0
2931: ST_TO_ADDR
// sPowell := false ;
2932: LD_ADDR_EXP 34
2936: PUSH
2937: LD_INT 0
2939: ST_TO_ADDR
// sTeleport := false ;
2940: LD_ADDR_EXP 37
2944: PUSH
2945: LD_INT 0
2947: ST_TO_ADDR
// sOilTower := false ;
2948: LD_ADDR_EXP 39
2952: PUSH
2953: LD_INT 0
2955: ST_TO_ADDR
// sShovel := false ;
2956: LD_ADDR_EXP 40
2960: PUSH
2961: LD_INT 0
2963: ST_TO_ADDR
// sSheik := false ;
2964: LD_ADDR_EXP 41
2968: PUSH
2969: LD_INT 0
2971: ST_TO_ADDR
// sEarthquake := false ;
2972: LD_ADDR_EXP 43
2976: PUSH
2977: LD_INT 0
2979: ST_TO_ADDR
// sAI := false ;
2980: LD_ADDR_EXP 44
2984: PUSH
2985: LD_INT 0
2987: ST_TO_ADDR
// sCargo := false ;
2988: LD_ADDR_EXP 47
2992: PUSH
2993: LD_INT 0
2995: ST_TO_ADDR
// sDLaser := false ;
2996: LD_ADDR_EXP 48
3000: PUSH
3001: LD_INT 0
3003: ST_TO_ADDR
// sExchange := false ;
3004: LD_ADDR_EXP 49
3008: PUSH
3009: LD_INT 0
3011: ST_TO_ADDR
// sFac := false ;
3012: LD_ADDR_EXP 50
3016: PUSH
3017: LD_INT 0
3019: ST_TO_ADDR
// sPower := false ;
3020: LD_ADDR_EXP 51
3024: PUSH
3025: LD_INT 0
3027: ST_TO_ADDR
// sRandom := false ;
3028: LD_ADDR_EXP 52
3032: PUSH
3033: LD_INT 0
3035: ST_TO_ADDR
// sShield := false ;
3036: LD_ADDR_EXP 53
3040: PUSH
3041: LD_INT 0
3043: ST_TO_ADDR
// sTime := false ;
3044: LD_ADDR_EXP 54
3048: PUSH
3049: LD_INT 0
3051: ST_TO_ADDR
// sTools := false ;
3052: LD_ADDR_EXP 55
3056: PUSH
3057: LD_INT 0
3059: ST_TO_ADDR
// sSold := false ;
3060: LD_ADDR_EXP 20
3064: PUSH
3065: LD_INT 0
3067: ST_TO_ADDR
// sDiff := false ;
3068: LD_ADDR_EXP 21
3072: PUSH
3073: LD_INT 0
3075: ST_TO_ADDR
// sFog := false ;
3076: LD_ADDR_EXP 24
3080: PUSH
3081: LD_INT 0
3083: ST_TO_ADDR
// sReset := false ;
3084: LD_ADDR_EXP 25
3088: PUSH
3089: LD_INT 0
3091: ST_TO_ADDR
// sSun := false ;
3092: LD_ADDR_EXP 26
3096: PUSH
3097: LD_INT 0
3099: ST_TO_ADDR
// sTiger := false ;
3100: LD_ADDR_EXP 22
3104: PUSH
3105: LD_INT 0
3107: ST_TO_ADDR
// sBomb := false ;
3108: LD_ADDR_EXP 23
3112: PUSH
3113: LD_INT 0
3115: ST_TO_ADDR
// sWound := false ;
3116: LD_ADDR_EXP 31
3120: PUSH
3121: LD_INT 0
3123: ST_TO_ADDR
// sBetray := false ;
3124: LD_ADDR_EXP 35
3128: PUSH
3129: LD_INT 0
3131: ST_TO_ADDR
// sContamin := false ;
3132: LD_ADDR_EXP 36
3136: PUSH
3137: LD_INT 0
3139: ST_TO_ADDR
// sOil := false ;
3140: LD_ADDR_EXP 38
3144: PUSH
3145: LD_INT 0
3147: ST_TO_ADDR
// sStu := false ;
3148: LD_ADDR_EXP 42
3152: PUSH
3153: LD_INT 0
3155: ST_TO_ADDR
// sBazooka := false ;
3156: LD_ADDR_EXP 45
3160: PUSH
3161: LD_INT 0
3163: ST_TO_ADDR
// sMortar := false ;
3164: LD_ADDR_EXP 46
3168: PUSH
3169: LD_INT 0
3171: ST_TO_ADDR
// sRanger := false ;
3172: LD_ADDR_EXP 56
3176: PUSH
3177: LD_INT 0
3179: ST_TO_ADDR
// sComputer := false ;
3180: LD_ADDR_EXP 57
3184: PUSH
3185: LD_INT 0
3187: ST_TO_ADDR
// s30 := false ;
3188: LD_ADDR_EXP 58
3192: PUSH
3193: LD_INT 0
3195: ST_TO_ADDR
// s60 := false ;
3196: LD_ADDR_EXP 59
3200: PUSH
3201: LD_INT 0
3203: ST_TO_ADDR
// end ;
3204: LD_VAR 0 1
3208: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3209: LD_INT 0
3211: PPUSH
3212: PPUSH
3213: PPUSH
3214: PPUSH
3215: PPUSH
3216: PPUSH
3217: PPUSH
// result := [ ] ;
3218: LD_ADDR_VAR 0 2
3222: PUSH
3223: EMPTY
3224: ST_TO_ADDR
// if campaign_id = 1 then
3225: LD_OWVAR 69
3229: PUSH
3230: LD_INT 1
3232: EQUAL
3233: IFFALSE 6399
// begin case mission_number of 1 :
3235: LD_OWVAR 70
3239: PUSH
3240: LD_INT 1
3242: DOUBLE
3243: EQUAL
3244: IFTRUE 3248
3246: GO 3324
3248: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3249: LD_ADDR_VAR 0 2
3253: PUSH
3254: LD_INT 2
3256: PUSH
3257: LD_INT 4
3259: PUSH
3260: LD_INT 11
3262: PUSH
3263: LD_INT 12
3265: PUSH
3266: LD_INT 15
3268: PUSH
3269: LD_INT 16
3271: PUSH
3272: LD_INT 22
3274: PUSH
3275: LD_INT 23
3277: PUSH
3278: LD_INT 26
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: LIST
3289: LIST
3290: LIST
3291: PUSH
3292: LD_INT 101
3294: PUSH
3295: LD_INT 102
3297: PUSH
3298: LD_INT 106
3300: PUSH
3301: LD_INT 116
3303: PUSH
3304: LD_INT 117
3306: PUSH
3307: LD_INT 118
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: LIST
3314: LIST
3315: LIST
3316: LIST
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: ST_TO_ADDR
3322: GO 6397
3324: LD_INT 2
3326: DOUBLE
3327: EQUAL
3328: IFTRUE 3332
3330: GO 3416
3332: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3333: LD_ADDR_VAR 0 2
3337: PUSH
3338: LD_INT 2
3340: PUSH
3341: LD_INT 4
3343: PUSH
3344: LD_INT 11
3346: PUSH
3347: LD_INT 12
3349: PUSH
3350: LD_INT 15
3352: PUSH
3353: LD_INT 16
3355: PUSH
3356: LD_INT 22
3358: PUSH
3359: LD_INT 23
3361: PUSH
3362: LD_INT 26
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: LIST
3369: LIST
3370: LIST
3371: LIST
3372: LIST
3373: LIST
3374: LIST
3375: PUSH
3376: LD_INT 101
3378: PUSH
3379: LD_INT 102
3381: PUSH
3382: LD_INT 105
3384: PUSH
3385: LD_INT 106
3387: PUSH
3388: LD_INT 108
3390: PUSH
3391: LD_INT 116
3393: PUSH
3394: LD_INT 117
3396: PUSH
3397: LD_INT 118
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: PUSH
3410: EMPTY
3411: LIST
3412: LIST
3413: ST_TO_ADDR
3414: GO 6397
3416: LD_INT 3
3418: DOUBLE
3419: EQUAL
3420: IFTRUE 3424
3422: GO 3512
3424: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3425: LD_ADDR_VAR 0 2
3429: PUSH
3430: LD_INT 2
3432: PUSH
3433: LD_INT 4
3435: PUSH
3436: LD_INT 5
3438: PUSH
3439: LD_INT 11
3441: PUSH
3442: LD_INT 12
3444: PUSH
3445: LD_INT 15
3447: PUSH
3448: LD_INT 16
3450: PUSH
3451: LD_INT 22
3453: PUSH
3454: LD_INT 26
3456: PUSH
3457: LD_INT 36
3459: PUSH
3460: EMPTY
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: PUSH
3472: LD_INT 101
3474: PUSH
3475: LD_INT 102
3477: PUSH
3478: LD_INT 105
3480: PUSH
3481: LD_INT 106
3483: PUSH
3484: LD_INT 108
3486: PUSH
3487: LD_INT 116
3489: PUSH
3490: LD_INT 117
3492: PUSH
3493: LD_INT 118
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: ST_TO_ADDR
3510: GO 6397
3512: LD_INT 4
3514: DOUBLE
3515: EQUAL
3516: IFTRUE 3520
3518: GO 3616
3520: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
3521: LD_ADDR_VAR 0 2
3525: PUSH
3526: LD_INT 2
3528: PUSH
3529: LD_INT 4
3531: PUSH
3532: LD_INT 5
3534: PUSH
3535: LD_INT 8
3537: PUSH
3538: LD_INT 11
3540: PUSH
3541: LD_INT 12
3543: PUSH
3544: LD_INT 15
3546: PUSH
3547: LD_INT 16
3549: PUSH
3550: LD_INT 22
3552: PUSH
3553: LD_INT 23
3555: PUSH
3556: LD_INT 26
3558: PUSH
3559: LD_INT 36
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: PUSH
3576: LD_INT 101
3578: PUSH
3579: LD_INT 102
3581: PUSH
3582: LD_INT 105
3584: PUSH
3585: LD_INT 106
3587: PUSH
3588: LD_INT 108
3590: PUSH
3591: LD_INT 116
3593: PUSH
3594: LD_INT 117
3596: PUSH
3597: LD_INT 118
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: ST_TO_ADDR
3614: GO 6397
3616: LD_INT 5
3618: DOUBLE
3619: EQUAL
3620: IFTRUE 3624
3622: GO 3736
3624: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
3625: LD_ADDR_VAR 0 2
3629: PUSH
3630: LD_INT 2
3632: PUSH
3633: LD_INT 4
3635: PUSH
3636: LD_INT 5
3638: PUSH
3639: LD_INT 6
3641: PUSH
3642: LD_INT 8
3644: PUSH
3645: LD_INT 11
3647: PUSH
3648: LD_INT 12
3650: PUSH
3651: LD_INT 15
3653: PUSH
3654: LD_INT 16
3656: PUSH
3657: LD_INT 22
3659: PUSH
3660: LD_INT 23
3662: PUSH
3663: LD_INT 25
3665: PUSH
3666: LD_INT 26
3668: PUSH
3669: LD_INT 36
3671: PUSH
3672: EMPTY
3673: LIST
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: LIST
3683: LIST
3684: LIST
3685: LIST
3686: LIST
3687: PUSH
3688: LD_INT 101
3690: PUSH
3691: LD_INT 102
3693: PUSH
3694: LD_INT 105
3696: PUSH
3697: LD_INT 106
3699: PUSH
3700: LD_INT 108
3702: PUSH
3703: LD_INT 109
3705: PUSH
3706: LD_INT 112
3708: PUSH
3709: LD_INT 116
3711: PUSH
3712: LD_INT 117
3714: PUSH
3715: LD_INT 118
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: LIST
3724: LIST
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: ST_TO_ADDR
3734: GO 6397
3736: LD_INT 6
3738: DOUBLE
3739: EQUAL
3740: IFTRUE 3744
3742: GO 3876
3744: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
3745: LD_ADDR_VAR 0 2
3749: PUSH
3750: LD_INT 2
3752: PUSH
3753: LD_INT 4
3755: PUSH
3756: LD_INT 5
3758: PUSH
3759: LD_INT 6
3761: PUSH
3762: LD_INT 8
3764: PUSH
3765: LD_INT 11
3767: PUSH
3768: LD_INT 12
3770: PUSH
3771: LD_INT 15
3773: PUSH
3774: LD_INT 16
3776: PUSH
3777: LD_INT 20
3779: PUSH
3780: LD_INT 21
3782: PUSH
3783: LD_INT 22
3785: PUSH
3786: LD_INT 23
3788: PUSH
3789: LD_INT 25
3791: PUSH
3792: LD_INT 26
3794: PUSH
3795: LD_INT 30
3797: PUSH
3798: LD_INT 31
3800: PUSH
3801: LD_INT 32
3803: PUSH
3804: LD_INT 36
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: PUSH
3828: LD_INT 101
3830: PUSH
3831: LD_INT 102
3833: PUSH
3834: LD_INT 105
3836: PUSH
3837: LD_INT 106
3839: PUSH
3840: LD_INT 108
3842: PUSH
3843: LD_INT 109
3845: PUSH
3846: LD_INT 112
3848: PUSH
3849: LD_INT 116
3851: PUSH
3852: LD_INT 117
3854: PUSH
3855: LD_INT 118
3857: PUSH
3858: EMPTY
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: ST_TO_ADDR
3874: GO 6397
3876: LD_INT 7
3878: DOUBLE
3879: EQUAL
3880: IFTRUE 3884
3882: GO 3996
3884: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
3885: LD_ADDR_VAR 0 2
3889: PUSH
3890: LD_INT 2
3892: PUSH
3893: LD_INT 4
3895: PUSH
3896: LD_INT 5
3898: PUSH
3899: LD_INT 7
3901: PUSH
3902: LD_INT 11
3904: PUSH
3905: LD_INT 12
3907: PUSH
3908: LD_INT 15
3910: PUSH
3911: LD_INT 16
3913: PUSH
3914: LD_INT 20
3916: PUSH
3917: LD_INT 21
3919: PUSH
3920: LD_INT 22
3922: PUSH
3923: LD_INT 23
3925: PUSH
3926: LD_INT 25
3928: PUSH
3929: LD_INT 26
3931: PUSH
3932: EMPTY
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: PUSH
3948: LD_INT 101
3950: PUSH
3951: LD_INT 102
3953: PUSH
3954: LD_INT 103
3956: PUSH
3957: LD_INT 105
3959: PUSH
3960: LD_INT 106
3962: PUSH
3963: LD_INT 108
3965: PUSH
3966: LD_INT 112
3968: PUSH
3969: LD_INT 116
3971: PUSH
3972: LD_INT 117
3974: PUSH
3975: LD_INT 118
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: LIST
3985: LIST
3986: LIST
3987: LIST
3988: LIST
3989: PUSH
3990: EMPTY
3991: LIST
3992: LIST
3993: ST_TO_ADDR
3994: GO 6397
3996: LD_INT 8
3998: DOUBLE
3999: EQUAL
4000: IFTRUE 4004
4002: GO 4144
4004: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4005: LD_ADDR_VAR 0 2
4009: PUSH
4010: LD_INT 2
4012: PUSH
4013: LD_INT 4
4015: PUSH
4016: LD_INT 5
4018: PUSH
4019: LD_INT 6
4021: PUSH
4022: LD_INT 7
4024: PUSH
4025: LD_INT 8
4027: PUSH
4028: LD_INT 11
4030: PUSH
4031: LD_INT 12
4033: PUSH
4034: LD_INT 15
4036: PUSH
4037: LD_INT 16
4039: PUSH
4040: LD_INT 20
4042: PUSH
4043: LD_INT 21
4045: PUSH
4046: LD_INT 22
4048: PUSH
4049: LD_INT 23
4051: PUSH
4052: LD_INT 25
4054: PUSH
4055: LD_INT 26
4057: PUSH
4058: LD_INT 30
4060: PUSH
4061: LD_INT 31
4063: PUSH
4064: LD_INT 32
4066: PUSH
4067: LD_INT 36
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: PUSH
4092: LD_INT 101
4094: PUSH
4095: LD_INT 102
4097: PUSH
4098: LD_INT 103
4100: PUSH
4101: LD_INT 105
4103: PUSH
4104: LD_INT 106
4106: PUSH
4107: LD_INT 108
4109: PUSH
4110: LD_INT 109
4112: PUSH
4113: LD_INT 112
4115: PUSH
4116: LD_INT 116
4118: PUSH
4119: LD_INT 117
4121: PUSH
4122: LD_INT 118
4124: PUSH
4125: EMPTY
4126: LIST
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: ST_TO_ADDR
4142: GO 6397
4144: LD_INT 9
4146: DOUBLE
4147: EQUAL
4148: IFTRUE 4152
4150: GO 4300
4152: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4153: LD_ADDR_VAR 0 2
4157: PUSH
4158: LD_INT 2
4160: PUSH
4161: LD_INT 4
4163: PUSH
4164: LD_INT 5
4166: PUSH
4167: LD_INT 6
4169: PUSH
4170: LD_INT 7
4172: PUSH
4173: LD_INT 8
4175: PUSH
4176: LD_INT 11
4178: PUSH
4179: LD_INT 12
4181: PUSH
4182: LD_INT 15
4184: PUSH
4185: LD_INT 16
4187: PUSH
4188: LD_INT 20
4190: PUSH
4191: LD_INT 21
4193: PUSH
4194: LD_INT 22
4196: PUSH
4197: LD_INT 23
4199: PUSH
4200: LD_INT 25
4202: PUSH
4203: LD_INT 26
4205: PUSH
4206: LD_INT 28
4208: PUSH
4209: LD_INT 30
4211: PUSH
4212: LD_INT 31
4214: PUSH
4215: LD_INT 32
4217: PUSH
4218: LD_INT 36
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: LIST
4225: LIST
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: PUSH
4244: LD_INT 101
4246: PUSH
4247: LD_INT 102
4249: PUSH
4250: LD_INT 103
4252: PUSH
4253: LD_INT 105
4255: PUSH
4256: LD_INT 106
4258: PUSH
4259: LD_INT 108
4261: PUSH
4262: LD_INT 109
4264: PUSH
4265: LD_INT 112
4267: PUSH
4268: LD_INT 114
4270: PUSH
4271: LD_INT 116
4273: PUSH
4274: LD_INT 117
4276: PUSH
4277: LD_INT 118
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: LIST
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: ST_TO_ADDR
4298: GO 6397
4300: LD_INT 10
4302: DOUBLE
4303: EQUAL
4304: IFTRUE 4308
4306: GO 4504
4308: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4309: LD_ADDR_VAR 0 2
4313: PUSH
4314: LD_INT 2
4316: PUSH
4317: LD_INT 4
4319: PUSH
4320: LD_INT 5
4322: PUSH
4323: LD_INT 6
4325: PUSH
4326: LD_INT 7
4328: PUSH
4329: LD_INT 8
4331: PUSH
4332: LD_INT 9
4334: PUSH
4335: LD_INT 10
4337: PUSH
4338: LD_INT 11
4340: PUSH
4341: LD_INT 12
4343: PUSH
4344: LD_INT 13
4346: PUSH
4347: LD_INT 14
4349: PUSH
4350: LD_INT 15
4352: PUSH
4353: LD_INT 16
4355: PUSH
4356: LD_INT 17
4358: PUSH
4359: LD_INT 18
4361: PUSH
4362: LD_INT 19
4364: PUSH
4365: LD_INT 20
4367: PUSH
4368: LD_INT 21
4370: PUSH
4371: LD_INT 22
4373: PUSH
4374: LD_INT 23
4376: PUSH
4377: LD_INT 24
4379: PUSH
4380: LD_INT 25
4382: PUSH
4383: LD_INT 26
4385: PUSH
4386: LD_INT 28
4388: PUSH
4389: LD_INT 30
4391: PUSH
4392: LD_INT 31
4394: PUSH
4395: LD_INT 32
4397: PUSH
4398: LD_INT 36
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: LIST
4431: PUSH
4432: LD_INT 101
4434: PUSH
4435: LD_INT 102
4437: PUSH
4438: LD_INT 103
4440: PUSH
4441: LD_INT 104
4443: PUSH
4444: LD_INT 105
4446: PUSH
4447: LD_INT 106
4449: PUSH
4450: LD_INT 107
4452: PUSH
4453: LD_INT 108
4455: PUSH
4456: LD_INT 109
4458: PUSH
4459: LD_INT 110
4461: PUSH
4462: LD_INT 111
4464: PUSH
4465: LD_INT 112
4467: PUSH
4468: LD_INT 114
4470: PUSH
4471: LD_INT 116
4473: PUSH
4474: LD_INT 117
4476: PUSH
4477: LD_INT 118
4479: PUSH
4480: EMPTY
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: ST_TO_ADDR
4502: GO 6397
4504: LD_INT 11
4506: DOUBLE
4507: EQUAL
4508: IFTRUE 4512
4510: GO 4716
4512: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4513: LD_ADDR_VAR 0 2
4517: PUSH
4518: LD_INT 2
4520: PUSH
4521: LD_INT 3
4523: PUSH
4524: LD_INT 4
4526: PUSH
4527: LD_INT 5
4529: PUSH
4530: LD_INT 6
4532: PUSH
4533: LD_INT 7
4535: PUSH
4536: LD_INT 8
4538: PUSH
4539: LD_INT 9
4541: PUSH
4542: LD_INT 10
4544: PUSH
4545: LD_INT 11
4547: PUSH
4548: LD_INT 12
4550: PUSH
4551: LD_INT 13
4553: PUSH
4554: LD_INT 14
4556: PUSH
4557: LD_INT 15
4559: PUSH
4560: LD_INT 16
4562: PUSH
4563: LD_INT 17
4565: PUSH
4566: LD_INT 18
4568: PUSH
4569: LD_INT 19
4571: PUSH
4572: LD_INT 20
4574: PUSH
4575: LD_INT 21
4577: PUSH
4578: LD_INT 22
4580: PUSH
4581: LD_INT 23
4583: PUSH
4584: LD_INT 24
4586: PUSH
4587: LD_INT 25
4589: PUSH
4590: LD_INT 26
4592: PUSH
4593: LD_INT 28
4595: PUSH
4596: LD_INT 30
4598: PUSH
4599: LD_INT 31
4601: PUSH
4602: LD_INT 32
4604: PUSH
4605: LD_INT 34
4607: PUSH
4608: LD_INT 36
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: PUSH
4644: LD_INT 101
4646: PUSH
4647: LD_INT 102
4649: PUSH
4650: LD_INT 103
4652: PUSH
4653: LD_INT 104
4655: PUSH
4656: LD_INT 105
4658: PUSH
4659: LD_INT 106
4661: PUSH
4662: LD_INT 107
4664: PUSH
4665: LD_INT 108
4667: PUSH
4668: LD_INT 109
4670: PUSH
4671: LD_INT 110
4673: PUSH
4674: LD_INT 111
4676: PUSH
4677: LD_INT 112
4679: PUSH
4680: LD_INT 114
4682: PUSH
4683: LD_INT 116
4685: PUSH
4686: LD_INT 117
4688: PUSH
4689: LD_INT 118
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: ST_TO_ADDR
4714: GO 6397
4716: LD_INT 12
4718: DOUBLE
4719: EQUAL
4720: IFTRUE 4724
4722: GO 4944
4724: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
4725: LD_ADDR_VAR 0 2
4729: PUSH
4730: LD_INT 1
4732: PUSH
4733: LD_INT 2
4735: PUSH
4736: LD_INT 3
4738: PUSH
4739: LD_INT 4
4741: PUSH
4742: LD_INT 5
4744: PUSH
4745: LD_INT 6
4747: PUSH
4748: LD_INT 7
4750: PUSH
4751: LD_INT 8
4753: PUSH
4754: LD_INT 9
4756: PUSH
4757: LD_INT 10
4759: PUSH
4760: LD_INT 11
4762: PUSH
4763: LD_INT 12
4765: PUSH
4766: LD_INT 13
4768: PUSH
4769: LD_INT 14
4771: PUSH
4772: LD_INT 15
4774: PUSH
4775: LD_INT 16
4777: PUSH
4778: LD_INT 17
4780: PUSH
4781: LD_INT 18
4783: PUSH
4784: LD_INT 19
4786: PUSH
4787: LD_INT 20
4789: PUSH
4790: LD_INT 21
4792: PUSH
4793: LD_INT 22
4795: PUSH
4796: LD_INT 23
4798: PUSH
4799: LD_INT 24
4801: PUSH
4802: LD_INT 25
4804: PUSH
4805: LD_INT 26
4807: PUSH
4808: LD_INT 27
4810: PUSH
4811: LD_INT 28
4813: PUSH
4814: LD_INT 30
4816: PUSH
4817: LD_INT 31
4819: PUSH
4820: LD_INT 32
4822: PUSH
4823: LD_INT 33
4825: PUSH
4826: LD_INT 34
4828: PUSH
4829: LD_INT 36
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: PUSH
4868: LD_INT 101
4870: PUSH
4871: LD_INT 102
4873: PUSH
4874: LD_INT 103
4876: PUSH
4877: LD_INT 104
4879: PUSH
4880: LD_INT 105
4882: PUSH
4883: LD_INT 106
4885: PUSH
4886: LD_INT 107
4888: PUSH
4889: LD_INT 108
4891: PUSH
4892: LD_INT 109
4894: PUSH
4895: LD_INT 110
4897: PUSH
4898: LD_INT 111
4900: PUSH
4901: LD_INT 112
4903: PUSH
4904: LD_INT 113
4906: PUSH
4907: LD_INT 114
4909: PUSH
4910: LD_INT 116
4912: PUSH
4913: LD_INT 117
4915: PUSH
4916: LD_INT 118
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: LIST
4934: LIST
4935: LIST
4936: LIST
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: ST_TO_ADDR
4942: GO 6397
4944: LD_INT 13
4946: DOUBLE
4947: EQUAL
4948: IFTRUE 4952
4950: GO 5160
4952: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
4953: LD_ADDR_VAR 0 2
4957: PUSH
4958: LD_INT 1
4960: PUSH
4961: LD_INT 2
4963: PUSH
4964: LD_INT 3
4966: PUSH
4967: LD_INT 4
4969: PUSH
4970: LD_INT 5
4972: PUSH
4973: LD_INT 8
4975: PUSH
4976: LD_INT 9
4978: PUSH
4979: LD_INT 10
4981: PUSH
4982: LD_INT 11
4984: PUSH
4985: LD_INT 12
4987: PUSH
4988: LD_INT 14
4990: PUSH
4991: LD_INT 15
4993: PUSH
4994: LD_INT 16
4996: PUSH
4997: LD_INT 17
4999: PUSH
5000: LD_INT 18
5002: PUSH
5003: LD_INT 19
5005: PUSH
5006: LD_INT 20
5008: PUSH
5009: LD_INT 21
5011: PUSH
5012: LD_INT 22
5014: PUSH
5015: LD_INT 23
5017: PUSH
5018: LD_INT 24
5020: PUSH
5021: LD_INT 25
5023: PUSH
5024: LD_INT 26
5026: PUSH
5027: LD_INT 27
5029: PUSH
5030: LD_INT 28
5032: PUSH
5033: LD_INT 30
5035: PUSH
5036: LD_INT 31
5038: PUSH
5039: LD_INT 32
5041: PUSH
5042: LD_INT 33
5044: PUSH
5045: LD_INT 34
5047: PUSH
5048: LD_INT 36
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: LIST
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: LIST
5081: LIST
5082: LIST
5083: PUSH
5084: LD_INT 101
5086: PUSH
5087: LD_INT 102
5089: PUSH
5090: LD_INT 103
5092: PUSH
5093: LD_INT 104
5095: PUSH
5096: LD_INT 105
5098: PUSH
5099: LD_INT 106
5101: PUSH
5102: LD_INT 107
5104: PUSH
5105: LD_INT 108
5107: PUSH
5108: LD_INT 109
5110: PUSH
5111: LD_INT 110
5113: PUSH
5114: LD_INT 111
5116: PUSH
5117: LD_INT 112
5119: PUSH
5120: LD_INT 113
5122: PUSH
5123: LD_INT 114
5125: PUSH
5126: LD_INT 116
5128: PUSH
5129: LD_INT 117
5131: PUSH
5132: LD_INT 118
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: LIST
5148: LIST
5149: LIST
5150: LIST
5151: LIST
5152: LIST
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: ST_TO_ADDR
5158: GO 6397
5160: LD_INT 14
5162: DOUBLE
5163: EQUAL
5164: IFTRUE 5168
5166: GO 5392
5168: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5169: LD_ADDR_VAR 0 2
5173: PUSH
5174: LD_INT 1
5176: PUSH
5177: LD_INT 2
5179: PUSH
5180: LD_INT 3
5182: PUSH
5183: LD_INT 4
5185: PUSH
5186: LD_INT 5
5188: PUSH
5189: LD_INT 6
5191: PUSH
5192: LD_INT 7
5194: PUSH
5195: LD_INT 8
5197: PUSH
5198: LD_INT 9
5200: PUSH
5201: LD_INT 10
5203: PUSH
5204: LD_INT 11
5206: PUSH
5207: LD_INT 12
5209: PUSH
5210: LD_INT 13
5212: PUSH
5213: LD_INT 14
5215: PUSH
5216: LD_INT 15
5218: PUSH
5219: LD_INT 16
5221: PUSH
5222: LD_INT 17
5224: PUSH
5225: LD_INT 18
5227: PUSH
5228: LD_INT 19
5230: PUSH
5231: LD_INT 20
5233: PUSH
5234: LD_INT 21
5236: PUSH
5237: LD_INT 22
5239: PUSH
5240: LD_INT 23
5242: PUSH
5243: LD_INT 24
5245: PUSH
5246: LD_INT 25
5248: PUSH
5249: LD_INT 26
5251: PUSH
5252: LD_INT 27
5254: PUSH
5255: LD_INT 28
5257: PUSH
5258: LD_INT 29
5260: PUSH
5261: LD_INT 30
5263: PUSH
5264: LD_INT 31
5266: PUSH
5267: LD_INT 32
5269: PUSH
5270: LD_INT 33
5272: PUSH
5273: LD_INT 34
5275: PUSH
5276: LD_INT 36
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: LIST
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: PUSH
5316: LD_INT 101
5318: PUSH
5319: LD_INT 102
5321: PUSH
5322: LD_INT 103
5324: PUSH
5325: LD_INT 104
5327: PUSH
5328: LD_INT 105
5330: PUSH
5331: LD_INT 106
5333: PUSH
5334: LD_INT 107
5336: PUSH
5337: LD_INT 108
5339: PUSH
5340: LD_INT 109
5342: PUSH
5343: LD_INT 110
5345: PUSH
5346: LD_INT 111
5348: PUSH
5349: LD_INT 112
5351: PUSH
5352: LD_INT 113
5354: PUSH
5355: LD_INT 114
5357: PUSH
5358: LD_INT 116
5360: PUSH
5361: LD_INT 117
5363: PUSH
5364: LD_INT 118
5366: PUSH
5367: EMPTY
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: LIST
5379: LIST
5380: LIST
5381: LIST
5382: LIST
5383: LIST
5384: LIST
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: ST_TO_ADDR
5390: GO 6397
5392: LD_INT 15
5394: DOUBLE
5395: EQUAL
5396: IFTRUE 5400
5398: GO 5624
5400: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5401: LD_ADDR_VAR 0 2
5405: PUSH
5406: LD_INT 1
5408: PUSH
5409: LD_INT 2
5411: PUSH
5412: LD_INT 3
5414: PUSH
5415: LD_INT 4
5417: PUSH
5418: LD_INT 5
5420: PUSH
5421: LD_INT 6
5423: PUSH
5424: LD_INT 7
5426: PUSH
5427: LD_INT 8
5429: PUSH
5430: LD_INT 9
5432: PUSH
5433: LD_INT 10
5435: PUSH
5436: LD_INT 11
5438: PUSH
5439: LD_INT 12
5441: PUSH
5442: LD_INT 13
5444: PUSH
5445: LD_INT 14
5447: PUSH
5448: LD_INT 15
5450: PUSH
5451: LD_INT 16
5453: PUSH
5454: LD_INT 17
5456: PUSH
5457: LD_INT 18
5459: PUSH
5460: LD_INT 19
5462: PUSH
5463: LD_INT 20
5465: PUSH
5466: LD_INT 21
5468: PUSH
5469: LD_INT 22
5471: PUSH
5472: LD_INT 23
5474: PUSH
5475: LD_INT 24
5477: PUSH
5478: LD_INT 25
5480: PUSH
5481: LD_INT 26
5483: PUSH
5484: LD_INT 27
5486: PUSH
5487: LD_INT 28
5489: PUSH
5490: LD_INT 29
5492: PUSH
5493: LD_INT 30
5495: PUSH
5496: LD_INT 31
5498: PUSH
5499: LD_INT 32
5501: PUSH
5502: LD_INT 33
5504: PUSH
5505: LD_INT 34
5507: PUSH
5508: LD_INT 36
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: LIST
5519: LIST
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: PUSH
5548: LD_INT 101
5550: PUSH
5551: LD_INT 102
5553: PUSH
5554: LD_INT 103
5556: PUSH
5557: LD_INT 104
5559: PUSH
5560: LD_INT 105
5562: PUSH
5563: LD_INT 106
5565: PUSH
5566: LD_INT 107
5568: PUSH
5569: LD_INT 108
5571: PUSH
5572: LD_INT 109
5574: PUSH
5575: LD_INT 110
5577: PUSH
5578: LD_INT 111
5580: PUSH
5581: LD_INT 112
5583: PUSH
5584: LD_INT 113
5586: PUSH
5587: LD_INT 114
5589: PUSH
5590: LD_INT 116
5592: PUSH
5593: LD_INT 117
5595: PUSH
5596: LD_INT 118
5598: PUSH
5599: EMPTY
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: PUSH
5618: EMPTY
5619: LIST
5620: LIST
5621: ST_TO_ADDR
5622: GO 6397
5624: LD_INT 16
5626: DOUBLE
5627: EQUAL
5628: IFTRUE 5632
5630: GO 5768
5632: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
5633: LD_ADDR_VAR 0 2
5637: PUSH
5638: LD_INT 2
5640: PUSH
5641: LD_INT 4
5643: PUSH
5644: LD_INT 5
5646: PUSH
5647: LD_INT 7
5649: PUSH
5650: LD_INT 11
5652: PUSH
5653: LD_INT 12
5655: PUSH
5656: LD_INT 15
5658: PUSH
5659: LD_INT 16
5661: PUSH
5662: LD_INT 20
5664: PUSH
5665: LD_INT 21
5667: PUSH
5668: LD_INT 22
5670: PUSH
5671: LD_INT 23
5673: PUSH
5674: LD_INT 25
5676: PUSH
5677: LD_INT 26
5679: PUSH
5680: LD_INT 30
5682: PUSH
5683: LD_INT 31
5685: PUSH
5686: LD_INT 32
5688: PUSH
5689: LD_INT 33
5691: PUSH
5692: LD_INT 34
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: PUSH
5716: LD_INT 101
5718: PUSH
5719: LD_INT 102
5721: PUSH
5722: LD_INT 103
5724: PUSH
5725: LD_INT 106
5727: PUSH
5728: LD_INT 108
5730: PUSH
5731: LD_INT 112
5733: PUSH
5734: LD_INT 113
5736: PUSH
5737: LD_INT 114
5739: PUSH
5740: LD_INT 116
5742: PUSH
5743: LD_INT 117
5745: PUSH
5746: LD_INT 118
5748: PUSH
5749: EMPTY
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: LIST
5755: LIST
5756: LIST
5757: LIST
5758: LIST
5759: LIST
5760: LIST
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: ST_TO_ADDR
5766: GO 6397
5768: LD_INT 17
5770: DOUBLE
5771: EQUAL
5772: IFTRUE 5776
5774: GO 6000
5776: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
5777: LD_ADDR_VAR 0 2
5781: PUSH
5782: LD_INT 1
5784: PUSH
5785: LD_INT 2
5787: PUSH
5788: LD_INT 3
5790: PUSH
5791: LD_INT 4
5793: PUSH
5794: LD_INT 5
5796: PUSH
5797: LD_INT 6
5799: PUSH
5800: LD_INT 7
5802: PUSH
5803: LD_INT 8
5805: PUSH
5806: LD_INT 9
5808: PUSH
5809: LD_INT 10
5811: PUSH
5812: LD_INT 11
5814: PUSH
5815: LD_INT 12
5817: PUSH
5818: LD_INT 13
5820: PUSH
5821: LD_INT 14
5823: PUSH
5824: LD_INT 15
5826: PUSH
5827: LD_INT 16
5829: PUSH
5830: LD_INT 17
5832: PUSH
5833: LD_INT 18
5835: PUSH
5836: LD_INT 19
5838: PUSH
5839: LD_INT 20
5841: PUSH
5842: LD_INT 21
5844: PUSH
5845: LD_INT 22
5847: PUSH
5848: LD_INT 23
5850: PUSH
5851: LD_INT 24
5853: PUSH
5854: LD_INT 25
5856: PUSH
5857: LD_INT 26
5859: PUSH
5860: LD_INT 27
5862: PUSH
5863: LD_INT 28
5865: PUSH
5866: LD_INT 29
5868: PUSH
5869: LD_INT 30
5871: PUSH
5872: LD_INT 31
5874: PUSH
5875: LD_INT 32
5877: PUSH
5878: LD_INT 33
5880: PUSH
5881: LD_INT 34
5883: PUSH
5884: LD_INT 36
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: PUSH
5924: LD_INT 101
5926: PUSH
5927: LD_INT 102
5929: PUSH
5930: LD_INT 103
5932: PUSH
5933: LD_INT 104
5935: PUSH
5936: LD_INT 105
5938: PUSH
5939: LD_INT 106
5941: PUSH
5942: LD_INT 107
5944: PUSH
5945: LD_INT 108
5947: PUSH
5948: LD_INT 109
5950: PUSH
5951: LD_INT 110
5953: PUSH
5954: LD_INT 111
5956: PUSH
5957: LD_INT 112
5959: PUSH
5960: LD_INT 113
5962: PUSH
5963: LD_INT 114
5965: PUSH
5966: LD_INT 116
5968: PUSH
5969: LD_INT 117
5971: PUSH
5972: LD_INT 118
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: ST_TO_ADDR
5998: GO 6397
6000: LD_INT 18
6002: DOUBLE
6003: EQUAL
6004: IFTRUE 6008
6006: GO 6156
6008: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6009: LD_ADDR_VAR 0 2
6013: PUSH
6014: LD_INT 2
6016: PUSH
6017: LD_INT 4
6019: PUSH
6020: LD_INT 5
6022: PUSH
6023: LD_INT 7
6025: PUSH
6026: LD_INT 11
6028: PUSH
6029: LD_INT 12
6031: PUSH
6032: LD_INT 15
6034: PUSH
6035: LD_INT 16
6037: PUSH
6038: LD_INT 20
6040: PUSH
6041: LD_INT 21
6043: PUSH
6044: LD_INT 22
6046: PUSH
6047: LD_INT 23
6049: PUSH
6050: LD_INT 25
6052: PUSH
6053: LD_INT 26
6055: PUSH
6056: LD_INT 30
6058: PUSH
6059: LD_INT 31
6061: PUSH
6062: LD_INT 32
6064: PUSH
6065: LD_INT 33
6067: PUSH
6068: LD_INT 34
6070: PUSH
6071: LD_INT 35
6073: PUSH
6074: LD_INT 36
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: PUSH
6100: LD_INT 101
6102: PUSH
6103: LD_INT 102
6105: PUSH
6106: LD_INT 103
6108: PUSH
6109: LD_INT 106
6111: PUSH
6112: LD_INT 108
6114: PUSH
6115: LD_INT 112
6117: PUSH
6118: LD_INT 113
6120: PUSH
6121: LD_INT 114
6123: PUSH
6124: LD_INT 115
6126: PUSH
6127: LD_INT 116
6129: PUSH
6130: LD_INT 117
6132: PUSH
6133: LD_INT 118
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: ST_TO_ADDR
6154: GO 6397
6156: LD_INT 19
6158: DOUBLE
6159: EQUAL
6160: IFTRUE 6164
6162: GO 6396
6164: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6165: LD_ADDR_VAR 0 2
6169: PUSH
6170: LD_INT 1
6172: PUSH
6173: LD_INT 2
6175: PUSH
6176: LD_INT 3
6178: PUSH
6179: LD_INT 4
6181: PUSH
6182: LD_INT 5
6184: PUSH
6185: LD_INT 6
6187: PUSH
6188: LD_INT 7
6190: PUSH
6191: LD_INT 8
6193: PUSH
6194: LD_INT 9
6196: PUSH
6197: LD_INT 10
6199: PUSH
6200: LD_INT 11
6202: PUSH
6203: LD_INT 12
6205: PUSH
6206: LD_INT 13
6208: PUSH
6209: LD_INT 14
6211: PUSH
6212: LD_INT 15
6214: PUSH
6215: LD_INT 16
6217: PUSH
6218: LD_INT 17
6220: PUSH
6221: LD_INT 18
6223: PUSH
6224: LD_INT 19
6226: PUSH
6227: LD_INT 20
6229: PUSH
6230: LD_INT 21
6232: PUSH
6233: LD_INT 22
6235: PUSH
6236: LD_INT 23
6238: PUSH
6239: LD_INT 24
6241: PUSH
6242: LD_INT 25
6244: PUSH
6245: LD_INT 26
6247: PUSH
6248: LD_INT 27
6250: PUSH
6251: LD_INT 28
6253: PUSH
6254: LD_INT 29
6256: PUSH
6257: LD_INT 30
6259: PUSH
6260: LD_INT 31
6262: PUSH
6263: LD_INT 32
6265: PUSH
6266: LD_INT 33
6268: PUSH
6269: LD_INT 34
6271: PUSH
6272: LD_INT 35
6274: PUSH
6275: LD_INT 36
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: PUSH
6316: LD_INT 101
6318: PUSH
6319: LD_INT 102
6321: PUSH
6322: LD_INT 103
6324: PUSH
6325: LD_INT 104
6327: PUSH
6328: LD_INT 105
6330: PUSH
6331: LD_INT 106
6333: PUSH
6334: LD_INT 107
6336: PUSH
6337: LD_INT 108
6339: PUSH
6340: LD_INT 109
6342: PUSH
6343: LD_INT 110
6345: PUSH
6346: LD_INT 111
6348: PUSH
6349: LD_INT 112
6351: PUSH
6352: LD_INT 113
6354: PUSH
6355: LD_INT 114
6357: PUSH
6358: LD_INT 115
6360: PUSH
6361: LD_INT 116
6363: PUSH
6364: LD_INT 117
6366: PUSH
6367: LD_INT 118
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: ST_TO_ADDR
6394: GO 6397
6396: POP
// end else
6397: GO 6628
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6399: LD_ADDR_VAR 0 2
6403: PUSH
6404: LD_INT 1
6406: PUSH
6407: LD_INT 2
6409: PUSH
6410: LD_INT 3
6412: PUSH
6413: LD_INT 4
6415: PUSH
6416: LD_INT 5
6418: PUSH
6419: LD_INT 6
6421: PUSH
6422: LD_INT 7
6424: PUSH
6425: LD_INT 8
6427: PUSH
6428: LD_INT 9
6430: PUSH
6431: LD_INT 10
6433: PUSH
6434: LD_INT 11
6436: PUSH
6437: LD_INT 12
6439: PUSH
6440: LD_INT 13
6442: PUSH
6443: LD_INT 14
6445: PUSH
6446: LD_INT 15
6448: PUSH
6449: LD_INT 16
6451: PUSH
6452: LD_INT 17
6454: PUSH
6455: LD_INT 18
6457: PUSH
6458: LD_INT 19
6460: PUSH
6461: LD_INT 20
6463: PUSH
6464: LD_INT 21
6466: PUSH
6467: LD_INT 22
6469: PUSH
6470: LD_INT 23
6472: PUSH
6473: LD_INT 24
6475: PUSH
6476: LD_INT 25
6478: PUSH
6479: LD_INT 26
6481: PUSH
6482: LD_INT 27
6484: PUSH
6485: LD_INT 28
6487: PUSH
6488: LD_INT 29
6490: PUSH
6491: LD_INT 30
6493: PUSH
6494: LD_INT 31
6496: PUSH
6497: LD_INT 32
6499: PUSH
6500: LD_INT 33
6502: PUSH
6503: LD_INT 34
6505: PUSH
6506: LD_INT 35
6508: PUSH
6509: LD_INT 36
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: PUSH
6550: LD_INT 101
6552: PUSH
6553: LD_INT 102
6555: PUSH
6556: LD_INT 103
6558: PUSH
6559: LD_INT 104
6561: PUSH
6562: LD_INT 105
6564: PUSH
6565: LD_INT 106
6567: PUSH
6568: LD_INT 107
6570: PUSH
6571: LD_INT 108
6573: PUSH
6574: LD_INT 109
6576: PUSH
6577: LD_INT 110
6579: PUSH
6580: LD_INT 111
6582: PUSH
6583: LD_INT 112
6585: PUSH
6586: LD_INT 113
6588: PUSH
6589: LD_INT 114
6591: PUSH
6592: LD_INT 115
6594: PUSH
6595: LD_INT 116
6597: PUSH
6598: LD_INT 117
6600: PUSH
6601: LD_INT 118
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: ST_TO_ADDR
// if result then
6628: LD_VAR 0 2
6632: IFFALSE 7418
// begin normal :=  ;
6634: LD_ADDR_VAR 0 5
6638: PUSH
6639: LD_STRING 
6641: ST_TO_ADDR
// hardcore :=  ;
6642: LD_ADDR_VAR 0 6
6646: PUSH
6647: LD_STRING 
6649: ST_TO_ADDR
// active :=  ;
6650: LD_ADDR_VAR 0 7
6654: PUSH
6655: LD_STRING 
6657: ST_TO_ADDR
// for i = 1 to normalCounter do
6658: LD_ADDR_VAR 0 8
6662: PUSH
6663: DOUBLE
6664: LD_INT 1
6666: DEC
6667: ST_TO_ADDR
6668: LD_EXP 4
6672: PUSH
6673: FOR_TO
6674: IFFALSE 6775
// begin tmp := 0 ;
6676: LD_ADDR_VAR 0 3
6680: PUSH
6681: LD_STRING 0
6683: ST_TO_ADDR
// if result [ 1 ] then
6684: LD_VAR 0 2
6688: PUSH
6689: LD_INT 1
6691: ARRAY
6692: IFFALSE 6757
// if result [ 1 ] [ 1 ] = i then
6694: LD_VAR 0 2
6698: PUSH
6699: LD_INT 1
6701: ARRAY
6702: PUSH
6703: LD_INT 1
6705: ARRAY
6706: PUSH
6707: LD_VAR 0 8
6711: EQUAL
6712: IFFALSE 6757
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6714: LD_ADDR_VAR 0 2
6718: PUSH
6719: LD_VAR 0 2
6723: PPUSH
6724: LD_INT 1
6726: PPUSH
6727: LD_VAR 0 2
6731: PUSH
6732: LD_INT 1
6734: ARRAY
6735: PPUSH
6736: LD_INT 1
6738: PPUSH
6739: CALL_OW 3
6743: PPUSH
6744: CALL_OW 1
6748: ST_TO_ADDR
// tmp := 1 ;
6749: LD_ADDR_VAR 0 3
6753: PUSH
6754: LD_STRING 1
6756: ST_TO_ADDR
// end ; normal := normal & tmp ;
6757: LD_ADDR_VAR 0 5
6761: PUSH
6762: LD_VAR 0 5
6766: PUSH
6767: LD_VAR 0 3
6771: STR
6772: ST_TO_ADDR
// end ;
6773: GO 6673
6775: POP
6776: POP
// for i = 1 to hardcoreCounter do
6777: LD_ADDR_VAR 0 8
6781: PUSH
6782: DOUBLE
6783: LD_INT 1
6785: DEC
6786: ST_TO_ADDR
6787: LD_EXP 5
6791: PUSH
6792: FOR_TO
6793: IFFALSE 6898
// begin tmp := 0 ;
6795: LD_ADDR_VAR 0 3
6799: PUSH
6800: LD_STRING 0
6802: ST_TO_ADDR
// if result [ 2 ] then
6803: LD_VAR 0 2
6807: PUSH
6808: LD_INT 2
6810: ARRAY
6811: IFFALSE 6880
// if result [ 2 ] [ 1 ] = 100 + i then
6813: LD_VAR 0 2
6817: PUSH
6818: LD_INT 2
6820: ARRAY
6821: PUSH
6822: LD_INT 1
6824: ARRAY
6825: PUSH
6826: LD_INT 100
6828: PUSH
6829: LD_VAR 0 8
6833: PLUS
6834: EQUAL
6835: IFFALSE 6880
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6837: LD_ADDR_VAR 0 2
6841: PUSH
6842: LD_VAR 0 2
6846: PPUSH
6847: LD_INT 2
6849: PPUSH
6850: LD_VAR 0 2
6854: PUSH
6855: LD_INT 2
6857: ARRAY
6858: PPUSH
6859: LD_INT 1
6861: PPUSH
6862: CALL_OW 3
6866: PPUSH
6867: CALL_OW 1
6871: ST_TO_ADDR
// tmp := 1 ;
6872: LD_ADDR_VAR 0 3
6876: PUSH
6877: LD_STRING 1
6879: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6880: LD_ADDR_VAR 0 6
6884: PUSH
6885: LD_VAR 0 6
6889: PUSH
6890: LD_VAR 0 3
6894: STR
6895: ST_TO_ADDR
// end ;
6896: GO 6792
6898: POP
6899: POP
// if isGameLoad then
6900: LD_VAR 0 1
6904: IFFALSE 7379
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
6906: LD_ADDR_VAR 0 4
6910: PUSH
6911: LD_EXP 8
6915: PUSH
6916: LD_EXP 7
6920: PUSH
6921: LD_EXP 9
6925: PUSH
6926: LD_EXP 6
6930: PUSH
6931: LD_EXP 10
6935: PUSH
6936: LD_EXP 11
6940: PUSH
6941: LD_EXP 12
6945: PUSH
6946: LD_EXP 13
6950: PUSH
6951: LD_EXP 14
6955: PUSH
6956: LD_EXP 15
6960: PUSH
6961: LD_EXP 16
6965: PUSH
6966: LD_EXP 17
6970: PUSH
6971: LD_EXP 18
6975: PUSH
6976: LD_EXP 19
6980: PUSH
6981: LD_EXP 27
6985: PUSH
6986: LD_EXP 28
6990: PUSH
6991: LD_EXP 29
6995: PUSH
6996: LD_EXP 30
7000: PUSH
7001: LD_EXP 32
7005: PUSH
7006: LD_EXP 33
7010: PUSH
7011: LD_EXP 34
7015: PUSH
7016: LD_EXP 37
7020: PUSH
7021: LD_EXP 39
7025: PUSH
7026: LD_EXP 40
7030: PUSH
7031: LD_EXP 41
7035: PUSH
7036: LD_EXP 43
7040: PUSH
7041: LD_EXP 44
7045: PUSH
7046: LD_EXP 47
7050: PUSH
7051: LD_EXP 48
7055: PUSH
7056: LD_EXP 49
7060: PUSH
7061: LD_EXP 50
7065: PUSH
7066: LD_EXP 51
7070: PUSH
7071: LD_EXP 52
7075: PUSH
7076: LD_EXP 53
7080: PUSH
7081: LD_EXP 54
7085: PUSH
7086: LD_EXP 55
7090: PUSH
7091: LD_EXP 20
7095: PUSH
7096: LD_EXP 21
7100: PUSH
7101: LD_EXP 24
7105: PUSH
7106: LD_EXP 25
7110: PUSH
7111: LD_EXP 26
7115: PUSH
7116: LD_EXP 22
7120: PUSH
7121: LD_EXP 23
7125: PUSH
7126: LD_EXP 31
7130: PUSH
7131: LD_EXP 35
7135: PUSH
7136: LD_EXP 36
7140: PUSH
7141: LD_EXP 38
7145: PUSH
7146: LD_EXP 42
7150: PUSH
7151: LD_EXP 45
7155: PUSH
7156: LD_EXP 46
7160: PUSH
7161: LD_EXP 56
7165: PUSH
7166: LD_EXP 57
7170: PUSH
7171: LD_EXP 58
7175: PUSH
7176: LD_EXP 59
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: ST_TO_ADDR
// tmp :=  ;
7237: LD_ADDR_VAR 0 3
7241: PUSH
7242: LD_STRING 
7244: ST_TO_ADDR
// for i = 1 to normalCounter do
7245: LD_ADDR_VAR 0 8
7249: PUSH
7250: DOUBLE
7251: LD_INT 1
7253: DEC
7254: ST_TO_ADDR
7255: LD_EXP 4
7259: PUSH
7260: FOR_TO
7261: IFFALSE 7297
// begin if flags [ i ] then
7263: LD_VAR 0 4
7267: PUSH
7268: LD_VAR 0 8
7272: ARRAY
7273: IFFALSE 7295
// tmp := tmp & i & ; ;
7275: LD_ADDR_VAR 0 3
7279: PUSH
7280: LD_VAR 0 3
7284: PUSH
7285: LD_VAR 0 8
7289: STR
7290: PUSH
7291: LD_STRING ;
7293: STR
7294: ST_TO_ADDR
// end ;
7295: GO 7260
7297: POP
7298: POP
// for i = 1 to hardcoreCounter do
7299: LD_ADDR_VAR 0 8
7303: PUSH
7304: DOUBLE
7305: LD_INT 1
7307: DEC
7308: ST_TO_ADDR
7309: LD_EXP 5
7313: PUSH
7314: FOR_TO
7315: IFFALSE 7361
// begin if flags [ normalCounter + i ] then
7317: LD_VAR 0 4
7321: PUSH
7322: LD_EXP 4
7326: PUSH
7327: LD_VAR 0 8
7331: PLUS
7332: ARRAY
7333: IFFALSE 7359
// tmp := tmp & ( 100 + i ) & ; ;
7335: LD_ADDR_VAR 0 3
7339: PUSH
7340: LD_VAR 0 3
7344: PUSH
7345: LD_INT 100
7347: PUSH
7348: LD_VAR 0 8
7352: PLUS
7353: STR
7354: PUSH
7355: LD_STRING ;
7357: STR
7358: ST_TO_ADDR
// end ;
7359: GO 7314
7361: POP
7362: POP
// if tmp then
7363: LD_VAR 0 3
7367: IFFALSE 7379
// active := tmp ;
7369: LD_ADDR_VAR 0 7
7373: PUSH
7374: LD_VAR 0 3
7378: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7379: LD_STRING getStreamItemsFromMission("
7381: PUSH
7382: LD_VAR 0 5
7386: STR
7387: PUSH
7388: LD_STRING ","
7390: STR
7391: PUSH
7392: LD_VAR 0 6
7396: STR
7397: PUSH
7398: LD_STRING ","
7400: STR
7401: PUSH
7402: LD_VAR 0 7
7406: STR
7407: PUSH
7408: LD_STRING ")
7410: STR
7411: PPUSH
7412: CALL_OW 559
// end else
7416: GO 7425
// ToLua ( getStreamItemsFromMission("","","") ) ;
7418: LD_STRING getStreamItemsFromMission("","","")
7420: PPUSH
7421: CALL_OW 559
// end ;
7425: LD_VAR 0 2
7429: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7430: LD_EXP 3
7434: PUSH
7435: LD_EXP 8
7439: AND
7440: IFFALSE 7564
7442: GO 7444
7444: DISABLE
7445: LD_INT 0
7447: PPUSH
7448: PPUSH
// begin enable ;
7449: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7450: LD_ADDR_VAR 0 2
7454: PUSH
7455: LD_INT 22
7457: PUSH
7458: LD_OWVAR 2
7462: PUSH
7463: EMPTY
7464: LIST
7465: LIST
7466: PUSH
7467: LD_INT 2
7469: PUSH
7470: LD_INT 34
7472: PUSH
7473: LD_INT 7
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PUSH
7480: LD_INT 34
7482: PUSH
7483: LD_INT 45
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: PUSH
7490: LD_INT 34
7492: PUSH
7493: LD_INT 28
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: PUSH
7500: LD_INT 34
7502: PUSH
7503: LD_INT 47
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: LIST
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: PPUSH
7521: CALL_OW 69
7525: ST_TO_ADDR
// if not tmp then
7526: LD_VAR 0 2
7530: NOT
7531: IFFALSE 7535
// exit ;
7533: GO 7564
// for i in tmp do
7535: LD_ADDR_VAR 0 1
7539: PUSH
7540: LD_VAR 0 2
7544: PUSH
7545: FOR_IN
7546: IFFALSE 7562
// begin SetLives ( i , 0 ) ;
7548: LD_VAR 0 1
7552: PPUSH
7553: LD_INT 0
7555: PPUSH
7556: CALL_OW 234
// end ;
7560: GO 7545
7562: POP
7563: POP
// end ;
7564: PPOPN 2
7566: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7567: LD_EXP 3
7571: PUSH
7572: LD_EXP 9
7576: AND
7577: IFFALSE 7661
7579: GO 7581
7581: DISABLE
7582: LD_INT 0
7584: PPUSH
7585: PPUSH
// begin enable ;
7586: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7587: LD_ADDR_VAR 0 2
7591: PUSH
7592: LD_INT 22
7594: PUSH
7595: LD_OWVAR 2
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: PUSH
7604: LD_INT 32
7606: PUSH
7607: LD_INT 3
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PPUSH
7618: CALL_OW 69
7622: ST_TO_ADDR
// if not tmp then
7623: LD_VAR 0 2
7627: NOT
7628: IFFALSE 7632
// exit ;
7630: GO 7661
// for i in tmp do
7632: LD_ADDR_VAR 0 1
7636: PUSH
7637: LD_VAR 0 2
7641: PUSH
7642: FOR_IN
7643: IFFALSE 7659
// begin SetLives ( i , 0 ) ;
7645: LD_VAR 0 1
7649: PPUSH
7650: LD_INT 0
7652: PPUSH
7653: CALL_OW 234
// end ;
7657: GO 7642
7659: POP
7660: POP
// end ;
7661: PPOPN 2
7663: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7664: LD_EXP 3
7668: PUSH
7669: LD_EXP 6
7673: AND
7674: IFFALSE 7767
7676: GO 7678
7678: DISABLE
7679: LD_INT 0
7681: PPUSH
// begin enable ;
7682: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7683: LD_ADDR_VAR 0 1
7687: PUSH
7688: LD_INT 22
7690: PUSH
7691: LD_OWVAR 2
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: PUSH
7700: LD_INT 2
7702: PUSH
7703: LD_INT 25
7705: PUSH
7706: LD_INT 5
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PUSH
7713: LD_INT 25
7715: PUSH
7716: LD_INT 9
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: PUSH
7723: LD_INT 25
7725: PUSH
7726: LD_INT 8
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: PPUSH
7743: CALL_OW 69
7747: PUSH
7748: FOR_IN
7749: IFFALSE 7765
// begin SetClass ( i , 1 ) ;
7751: LD_VAR 0 1
7755: PPUSH
7756: LD_INT 1
7758: PPUSH
7759: CALL_OW 336
// end ;
7763: GO 7748
7765: POP
7766: POP
// end ;
7767: PPOPN 1
7769: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7770: LD_EXP 3
7774: PUSH
7775: LD_EXP 7
7779: AND
7780: PUSH
7781: LD_OWVAR 65
7785: PUSH
7786: LD_INT 7
7788: LESS
7789: AND
7790: IFFALSE 7804
7792: GO 7794
7794: DISABLE
// begin enable ;
7795: ENABLE
// game_speed := 7 ;
7796: LD_ADDR_OWVAR 65
7800: PUSH
7801: LD_INT 7
7803: ST_TO_ADDR
// end ;
7804: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7805: LD_EXP 3
7809: PUSH
7810: LD_EXP 10
7814: AND
7815: IFFALSE 8017
7817: GO 7819
7819: DISABLE
7820: LD_INT 0
7822: PPUSH
7823: PPUSH
7824: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7825: LD_ADDR_VAR 0 3
7829: PUSH
7830: LD_INT 81
7832: PUSH
7833: LD_OWVAR 2
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PUSH
7842: LD_INT 21
7844: PUSH
7845: LD_INT 1
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: PPUSH
7856: CALL_OW 69
7860: ST_TO_ADDR
// if not tmp then
7861: LD_VAR 0 3
7865: NOT
7866: IFFALSE 7870
// exit ;
7868: GO 8017
// if tmp > 5 then
7870: LD_VAR 0 3
7874: PUSH
7875: LD_INT 5
7877: GREATER
7878: IFFALSE 7890
// k := 5 else
7880: LD_ADDR_VAR 0 2
7884: PUSH
7885: LD_INT 5
7887: ST_TO_ADDR
7888: GO 7900
// k := tmp ;
7890: LD_ADDR_VAR 0 2
7894: PUSH
7895: LD_VAR 0 3
7899: ST_TO_ADDR
// for i := 1 to k do
7900: LD_ADDR_VAR 0 1
7904: PUSH
7905: DOUBLE
7906: LD_INT 1
7908: DEC
7909: ST_TO_ADDR
7910: LD_VAR 0 2
7914: PUSH
7915: FOR_TO
7916: IFFALSE 8015
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7918: LD_VAR 0 3
7922: PUSH
7923: LD_VAR 0 1
7927: ARRAY
7928: PPUSH
7929: LD_VAR 0 1
7933: PUSH
7934: LD_INT 4
7936: MOD
7937: PUSH
7938: LD_INT 1
7940: PLUS
7941: PPUSH
7942: CALL_OW 259
7946: PUSH
7947: LD_INT 10
7949: LESS
7950: IFFALSE 8013
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7952: LD_VAR 0 3
7956: PUSH
7957: LD_VAR 0 1
7961: ARRAY
7962: PPUSH
7963: LD_VAR 0 1
7967: PUSH
7968: LD_INT 4
7970: MOD
7971: PUSH
7972: LD_INT 1
7974: PLUS
7975: PPUSH
7976: LD_VAR 0 3
7980: PUSH
7981: LD_VAR 0 1
7985: ARRAY
7986: PPUSH
7987: LD_VAR 0 1
7991: PUSH
7992: LD_INT 4
7994: MOD
7995: PUSH
7996: LD_INT 1
7998: PLUS
7999: PPUSH
8000: CALL_OW 259
8004: PUSH
8005: LD_INT 1
8007: PLUS
8008: PPUSH
8009: CALL_OW 237
8013: GO 7915
8015: POP
8016: POP
// end ;
8017: PPOPN 3
8019: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8020: LD_EXP 3
8024: PUSH
8025: LD_EXP 11
8029: AND
8030: IFFALSE 8050
8032: GO 8034
8034: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8035: LD_INT 4
8037: PPUSH
8038: LD_OWVAR 2
8042: PPUSH
8043: LD_INT 0
8045: PPUSH
8046: CALL_OW 324
8050: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8051: LD_EXP 3
8055: PUSH
8056: LD_EXP 40
8060: AND
8061: IFFALSE 8081
8063: GO 8065
8065: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8066: LD_INT 19
8068: PPUSH
8069: LD_OWVAR 2
8073: PPUSH
8074: LD_INT 0
8076: PPUSH
8077: CALL_OW 324
8081: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8082: LD_EXP 3
8086: PUSH
8087: LD_EXP 12
8091: AND
8092: IFFALSE 8194
8094: GO 8096
8096: DISABLE
8097: LD_INT 0
8099: PPUSH
8100: PPUSH
// begin enable ;
8101: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8102: LD_ADDR_VAR 0 2
8106: PUSH
8107: LD_INT 22
8109: PUSH
8110: LD_OWVAR 2
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: PUSH
8119: LD_INT 2
8121: PUSH
8122: LD_INT 34
8124: PUSH
8125: LD_INT 11
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: PUSH
8132: LD_INT 34
8134: PUSH
8135: LD_INT 30
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: LIST
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: PPUSH
8151: CALL_OW 69
8155: ST_TO_ADDR
// if not tmp then
8156: LD_VAR 0 2
8160: NOT
8161: IFFALSE 8165
// exit ;
8163: GO 8194
// for i in tmp do
8165: LD_ADDR_VAR 0 1
8169: PUSH
8170: LD_VAR 0 2
8174: PUSH
8175: FOR_IN
8176: IFFALSE 8192
// begin SetLives ( i , 0 ) ;
8178: LD_VAR 0 1
8182: PPUSH
8183: LD_INT 0
8185: PPUSH
8186: CALL_OW 234
// end ;
8190: GO 8175
8192: POP
8193: POP
// end ;
8194: PPOPN 2
8196: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8197: LD_EXP 3
8201: PUSH
8202: LD_EXP 13
8206: AND
8207: IFFALSE 8227
8209: GO 8211
8211: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8212: LD_INT 32
8214: PPUSH
8215: LD_OWVAR 2
8219: PPUSH
8220: LD_INT 0
8222: PPUSH
8223: CALL_OW 324
8227: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8228: LD_EXP 3
8232: PUSH
8233: LD_EXP 14
8237: AND
8238: IFFALSE 8419
8240: GO 8242
8242: DISABLE
8243: LD_INT 0
8245: PPUSH
8246: PPUSH
8247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8248: LD_ADDR_VAR 0 2
8252: PUSH
8253: LD_INT 22
8255: PUSH
8256: LD_OWVAR 2
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: PUSH
8265: LD_INT 33
8267: PUSH
8268: LD_INT 3
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: PPUSH
8279: CALL_OW 69
8283: ST_TO_ADDR
// if not tmp then
8284: LD_VAR 0 2
8288: NOT
8289: IFFALSE 8293
// exit ;
8291: GO 8419
// side := 0 ;
8293: LD_ADDR_VAR 0 3
8297: PUSH
8298: LD_INT 0
8300: ST_TO_ADDR
// for i := 1 to 8 do
8301: LD_ADDR_VAR 0 1
8305: PUSH
8306: DOUBLE
8307: LD_INT 1
8309: DEC
8310: ST_TO_ADDR
8311: LD_INT 8
8313: PUSH
8314: FOR_TO
8315: IFFALSE 8363
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8317: LD_OWVAR 2
8321: PUSH
8322: LD_VAR 0 1
8326: NONEQUAL
8327: PUSH
8328: LD_OWVAR 2
8332: PPUSH
8333: LD_VAR 0 1
8337: PPUSH
8338: CALL_OW 81
8342: PUSH
8343: LD_INT 2
8345: EQUAL
8346: AND
8347: IFFALSE 8361
// begin side := i ;
8349: LD_ADDR_VAR 0 3
8353: PUSH
8354: LD_VAR 0 1
8358: ST_TO_ADDR
// break ;
8359: GO 8363
// end ;
8361: GO 8314
8363: POP
8364: POP
// if not side then
8365: LD_VAR 0 3
8369: NOT
8370: IFFALSE 8374
// exit ;
8372: GO 8419
// for i := 1 to tmp do
8374: LD_ADDR_VAR 0 1
8378: PUSH
8379: DOUBLE
8380: LD_INT 1
8382: DEC
8383: ST_TO_ADDR
8384: LD_VAR 0 2
8388: PUSH
8389: FOR_TO
8390: IFFALSE 8417
// if Prob ( 60 ) then
8392: LD_INT 60
8394: PPUSH
8395: CALL_OW 13
8399: IFFALSE 8415
// SetSide ( i , side ) ;
8401: LD_VAR 0 1
8405: PPUSH
8406: LD_VAR 0 3
8410: PPUSH
8411: CALL_OW 235
8415: GO 8389
8417: POP
8418: POP
// end ;
8419: PPOPN 3
8421: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8422: LD_EXP 3
8426: PUSH
8427: LD_EXP 16
8431: AND
8432: IFFALSE 8551
8434: GO 8436
8436: DISABLE
8437: LD_INT 0
8439: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8440: LD_ADDR_VAR 0 1
8444: PUSH
8445: LD_INT 22
8447: PUSH
8448: LD_OWVAR 2
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: PUSH
8457: LD_INT 21
8459: PUSH
8460: LD_INT 1
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: PUSH
8467: LD_INT 3
8469: PUSH
8470: LD_INT 23
8472: PUSH
8473: LD_INT 0
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: LIST
8488: PPUSH
8489: CALL_OW 69
8493: PUSH
8494: FOR_IN
8495: IFFALSE 8549
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8497: LD_VAR 0 1
8501: PPUSH
8502: CALL_OW 257
8506: PUSH
8507: LD_INT 1
8509: PUSH
8510: LD_INT 2
8512: PUSH
8513: LD_INT 3
8515: PUSH
8516: LD_INT 4
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: IN
8525: IFFALSE 8547
// SetClass ( un , rand ( 1 , 4 ) ) ;
8527: LD_VAR 0 1
8531: PPUSH
8532: LD_INT 1
8534: PPUSH
8535: LD_INT 4
8537: PPUSH
8538: CALL_OW 12
8542: PPUSH
8543: CALL_OW 336
8547: GO 8494
8549: POP
8550: POP
// end ;
8551: PPOPN 1
8553: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8554: LD_EXP 3
8558: PUSH
8559: LD_EXP 15
8563: AND
8564: IFFALSE 8643
8566: GO 8568
8568: DISABLE
8569: LD_INT 0
8571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8572: LD_ADDR_VAR 0 1
8576: PUSH
8577: LD_INT 22
8579: PUSH
8580: LD_OWVAR 2
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: PUSH
8589: LD_INT 21
8591: PUSH
8592: LD_INT 3
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: PPUSH
8603: CALL_OW 69
8607: ST_TO_ADDR
// if not tmp then
8608: LD_VAR 0 1
8612: NOT
8613: IFFALSE 8617
// exit ;
8615: GO 8643
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8617: LD_VAR 0 1
8621: PUSH
8622: LD_INT 1
8624: PPUSH
8625: LD_VAR 0 1
8629: PPUSH
8630: CALL_OW 12
8634: ARRAY
8635: PPUSH
8636: LD_INT 100
8638: PPUSH
8639: CALL_OW 234
// end ;
8643: PPOPN 1
8645: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8646: LD_EXP 3
8650: PUSH
8651: LD_EXP 17
8655: AND
8656: IFFALSE 8754
8658: GO 8660
8660: DISABLE
8661: LD_INT 0
8663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8664: LD_ADDR_VAR 0 1
8668: PUSH
8669: LD_INT 22
8671: PUSH
8672: LD_OWVAR 2
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: PUSH
8681: LD_INT 21
8683: PUSH
8684: LD_INT 1
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: PUSH
8691: EMPTY
8692: LIST
8693: LIST
8694: PPUSH
8695: CALL_OW 69
8699: ST_TO_ADDR
// if not tmp then
8700: LD_VAR 0 1
8704: NOT
8705: IFFALSE 8709
// exit ;
8707: GO 8754
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8709: LD_VAR 0 1
8713: PUSH
8714: LD_INT 1
8716: PPUSH
8717: LD_VAR 0 1
8721: PPUSH
8722: CALL_OW 12
8726: ARRAY
8727: PPUSH
8728: LD_INT 1
8730: PPUSH
8731: LD_INT 4
8733: PPUSH
8734: CALL_OW 12
8738: PPUSH
8739: LD_INT 3000
8741: PPUSH
8742: LD_INT 9000
8744: PPUSH
8745: CALL_OW 12
8749: PPUSH
8750: CALL_OW 492
// end ;
8754: PPOPN 1
8756: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8757: LD_EXP 3
8761: PUSH
8762: LD_EXP 18
8766: AND
8767: IFFALSE 8787
8769: GO 8771
8771: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8772: LD_INT 1
8774: PPUSH
8775: LD_OWVAR 2
8779: PPUSH
8780: LD_INT 0
8782: PPUSH
8783: CALL_OW 324
8787: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8788: LD_EXP 3
8792: PUSH
8793: LD_EXP 19
8797: AND
8798: IFFALSE 8881
8800: GO 8802
8802: DISABLE
8803: LD_INT 0
8805: PPUSH
8806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8807: LD_ADDR_VAR 0 2
8811: PUSH
8812: LD_INT 22
8814: PUSH
8815: LD_OWVAR 2
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: PUSH
8824: LD_INT 21
8826: PUSH
8827: LD_INT 3
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: PUSH
8834: EMPTY
8835: LIST
8836: LIST
8837: PPUSH
8838: CALL_OW 69
8842: ST_TO_ADDR
// if not tmp then
8843: LD_VAR 0 2
8847: NOT
8848: IFFALSE 8852
// exit ;
8850: GO 8881
// for i in tmp do
8852: LD_ADDR_VAR 0 1
8856: PUSH
8857: LD_VAR 0 2
8861: PUSH
8862: FOR_IN
8863: IFFALSE 8879
// SetBLevel ( i , 10 ) ;
8865: LD_VAR 0 1
8869: PPUSH
8870: LD_INT 10
8872: PPUSH
8873: CALL_OW 241
8877: GO 8862
8879: POP
8880: POP
// end ;
8881: PPOPN 2
8883: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8884: LD_EXP 3
8888: PUSH
8889: LD_EXP 20
8893: AND
8894: IFFALSE 9005
8896: GO 8898
8898: DISABLE
8899: LD_INT 0
8901: PPUSH
8902: PPUSH
8903: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8904: LD_ADDR_VAR 0 3
8908: PUSH
8909: LD_INT 22
8911: PUSH
8912: LD_OWVAR 2
8916: PUSH
8917: EMPTY
8918: LIST
8919: LIST
8920: PUSH
8921: LD_INT 25
8923: PUSH
8924: LD_INT 1
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: PPUSH
8935: CALL_OW 69
8939: ST_TO_ADDR
// if not tmp then
8940: LD_VAR 0 3
8944: NOT
8945: IFFALSE 8949
// exit ;
8947: GO 9005
// un := tmp [ rand ( 1 , tmp ) ] ;
8949: LD_ADDR_VAR 0 2
8953: PUSH
8954: LD_VAR 0 3
8958: PUSH
8959: LD_INT 1
8961: PPUSH
8962: LD_VAR 0 3
8966: PPUSH
8967: CALL_OW 12
8971: ARRAY
8972: ST_TO_ADDR
// if Crawls ( un ) then
8973: LD_VAR 0 2
8977: PPUSH
8978: CALL_OW 318
8982: IFFALSE 8993
// ComWalk ( un ) ;
8984: LD_VAR 0 2
8988: PPUSH
8989: CALL_OW 138
// SetClass ( un , class_sniper ) ;
8993: LD_VAR 0 2
8997: PPUSH
8998: LD_INT 5
9000: PPUSH
9001: CALL_OW 336
// end ;
9005: PPOPN 3
9007: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9008: LD_EXP 3
9012: PUSH
9013: LD_EXP 21
9017: AND
9018: PUSH
9019: LD_OWVAR 67
9023: PUSH
9024: LD_INT 4
9026: LESS
9027: AND
9028: IFFALSE 9047
9030: GO 9032
9032: DISABLE
// begin Difficulty := Difficulty + 1 ;
9033: LD_ADDR_OWVAR 67
9037: PUSH
9038: LD_OWVAR 67
9042: PUSH
9043: LD_INT 1
9045: PLUS
9046: ST_TO_ADDR
// end ;
9047: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9048: LD_EXP 3
9052: PUSH
9053: LD_EXP 22
9057: AND
9058: IFFALSE 9161
9060: GO 9062
9062: DISABLE
9063: LD_INT 0
9065: PPUSH
// begin for i := 1 to 5 do
9066: LD_ADDR_VAR 0 1
9070: PUSH
9071: DOUBLE
9072: LD_INT 1
9074: DEC
9075: ST_TO_ADDR
9076: LD_INT 5
9078: PUSH
9079: FOR_TO
9080: IFFALSE 9159
// begin uc_nation := nation_nature ;
9082: LD_ADDR_OWVAR 21
9086: PUSH
9087: LD_INT 0
9089: ST_TO_ADDR
// uc_side := 0 ;
9090: LD_ADDR_OWVAR 20
9094: PUSH
9095: LD_INT 0
9097: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9098: LD_ADDR_OWVAR 29
9102: PUSH
9103: LD_INT 12
9105: PUSH
9106: LD_INT 12
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: ST_TO_ADDR
// hc_agressivity := 20 ;
9113: LD_ADDR_OWVAR 35
9117: PUSH
9118: LD_INT 20
9120: ST_TO_ADDR
// hc_class := class_tiger ;
9121: LD_ADDR_OWVAR 28
9125: PUSH
9126: LD_INT 14
9128: ST_TO_ADDR
// hc_gallery :=  ;
9129: LD_ADDR_OWVAR 33
9133: PUSH
9134: LD_STRING 
9136: ST_TO_ADDR
// hc_name :=  ;
9137: LD_ADDR_OWVAR 26
9141: PUSH
9142: LD_STRING 
9144: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9145: CALL_OW 44
9149: PPUSH
9150: LD_INT 0
9152: PPUSH
9153: CALL_OW 51
// end ;
9157: GO 9079
9159: POP
9160: POP
// end ;
9161: PPOPN 1
9163: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9164: LD_EXP 3
9168: PUSH
9169: LD_EXP 23
9173: AND
9174: IFFALSE 9183
9176: GO 9178
9178: DISABLE
// StreamSibBomb ;
9179: CALL 9184 0 0
9183: END
// export function StreamSibBomb ; var i , x , y ; begin
9184: LD_INT 0
9186: PPUSH
9187: PPUSH
9188: PPUSH
9189: PPUSH
// result := false ;
9190: LD_ADDR_VAR 0 1
9194: PUSH
9195: LD_INT 0
9197: ST_TO_ADDR
// for i := 1 to 16 do
9198: LD_ADDR_VAR 0 2
9202: PUSH
9203: DOUBLE
9204: LD_INT 1
9206: DEC
9207: ST_TO_ADDR
9208: LD_INT 16
9210: PUSH
9211: FOR_TO
9212: IFFALSE 9411
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9214: LD_ADDR_VAR 0 3
9218: PUSH
9219: LD_INT 10
9221: PUSH
9222: LD_INT 20
9224: PUSH
9225: LD_INT 30
9227: PUSH
9228: LD_INT 40
9230: PUSH
9231: LD_INT 50
9233: PUSH
9234: LD_INT 60
9236: PUSH
9237: LD_INT 70
9239: PUSH
9240: LD_INT 80
9242: PUSH
9243: LD_INT 90
9245: PUSH
9246: LD_INT 100
9248: PUSH
9249: LD_INT 110
9251: PUSH
9252: LD_INT 120
9254: PUSH
9255: LD_INT 130
9257: PUSH
9258: LD_INT 140
9260: PUSH
9261: LD_INT 150
9263: PUSH
9264: EMPTY
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: PUSH
9281: LD_INT 1
9283: PPUSH
9284: LD_INT 15
9286: PPUSH
9287: CALL_OW 12
9291: ARRAY
9292: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9293: LD_ADDR_VAR 0 4
9297: PUSH
9298: LD_INT 10
9300: PUSH
9301: LD_INT 20
9303: PUSH
9304: LD_INT 30
9306: PUSH
9307: LD_INT 40
9309: PUSH
9310: LD_INT 50
9312: PUSH
9313: LD_INT 60
9315: PUSH
9316: LD_INT 70
9318: PUSH
9319: LD_INT 80
9321: PUSH
9322: LD_INT 90
9324: PUSH
9325: LD_INT 100
9327: PUSH
9328: LD_INT 110
9330: PUSH
9331: LD_INT 120
9333: PUSH
9334: LD_INT 130
9336: PUSH
9337: LD_INT 140
9339: PUSH
9340: LD_INT 150
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: PUSH
9360: LD_INT 1
9362: PPUSH
9363: LD_INT 15
9365: PPUSH
9366: CALL_OW 12
9370: ARRAY
9371: ST_TO_ADDR
// if ValidHex ( x , y ) then
9372: LD_VAR 0 3
9376: PPUSH
9377: LD_VAR 0 4
9381: PPUSH
9382: CALL_OW 488
9386: IFFALSE 9409
// begin result := [ x , y ] ;
9388: LD_ADDR_VAR 0 1
9392: PUSH
9393: LD_VAR 0 3
9397: PUSH
9398: LD_VAR 0 4
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: ST_TO_ADDR
// break ;
9407: GO 9411
// end ; end ;
9409: GO 9211
9411: POP
9412: POP
// if result then
9413: LD_VAR 0 1
9417: IFFALSE 9477
// begin ToLua ( playSibBomb() ) ;
9419: LD_STRING playSibBomb()
9421: PPUSH
9422: CALL_OW 559
// wait ( 0 0$14 ) ;
9426: LD_INT 490
9428: PPUSH
9429: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9433: LD_VAR 0 1
9437: PUSH
9438: LD_INT 1
9440: ARRAY
9441: PPUSH
9442: LD_VAR 0 1
9446: PUSH
9447: LD_INT 2
9449: ARRAY
9450: PPUSH
9451: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9455: LD_VAR 0 1
9459: PUSH
9460: LD_INT 1
9462: ARRAY
9463: PPUSH
9464: LD_VAR 0 1
9468: PUSH
9469: LD_INT 2
9471: ARRAY
9472: PPUSH
9473: CALL_OW 429
// end ; end ;
9477: LD_VAR 0 1
9481: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9482: LD_EXP 3
9486: PUSH
9487: LD_EXP 25
9491: AND
9492: IFFALSE 9504
9494: GO 9496
9496: DISABLE
// YouLost (  ) ;
9497: LD_STRING 
9499: PPUSH
9500: CALL_OW 104
9504: END
// every 0 0$1 trigger StreamModeActive and sFog do
9505: LD_EXP 3
9509: PUSH
9510: LD_EXP 24
9514: AND
9515: IFFALSE 9529
9517: GO 9519
9519: DISABLE
// FogOff ( your_side ) ;
9520: LD_OWVAR 2
9524: PPUSH
9525: CALL_OW 344
9529: END
// every 0 0$1 trigger StreamModeActive and sSun do
9530: LD_EXP 3
9534: PUSH
9535: LD_EXP 26
9539: AND
9540: IFFALSE 9568
9542: GO 9544
9544: DISABLE
// begin solar_recharge_percent := 0 ;
9545: LD_ADDR_OWVAR 79
9549: PUSH
9550: LD_INT 0
9552: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9553: LD_INT 10500
9555: PPUSH
9556: CALL_OW 67
// solar_recharge_percent := 100 ;
9560: LD_ADDR_OWVAR 79
9564: PUSH
9565: LD_INT 100
9567: ST_TO_ADDR
// end ;
9568: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9569: LD_EXP 3
9573: PUSH
9574: LD_EXP 27
9578: AND
9579: IFFALSE 9818
9581: GO 9583
9583: DISABLE
9584: LD_INT 0
9586: PPUSH
9587: PPUSH
9588: PPUSH
// begin tmp := [ ] ;
9589: LD_ADDR_VAR 0 3
9593: PUSH
9594: EMPTY
9595: ST_TO_ADDR
// for i := 1 to 6 do
9596: LD_ADDR_VAR 0 1
9600: PUSH
9601: DOUBLE
9602: LD_INT 1
9604: DEC
9605: ST_TO_ADDR
9606: LD_INT 6
9608: PUSH
9609: FOR_TO
9610: IFFALSE 9715
// begin uc_nation := nation_nature ;
9612: LD_ADDR_OWVAR 21
9616: PUSH
9617: LD_INT 0
9619: ST_TO_ADDR
// uc_side := 0 ;
9620: LD_ADDR_OWVAR 20
9624: PUSH
9625: LD_INT 0
9627: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9628: LD_ADDR_OWVAR 29
9632: PUSH
9633: LD_INT 12
9635: PUSH
9636: LD_INT 12
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: ST_TO_ADDR
// hc_agressivity := 20 ;
9643: LD_ADDR_OWVAR 35
9647: PUSH
9648: LD_INT 20
9650: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9651: LD_ADDR_OWVAR 28
9655: PUSH
9656: LD_INT 17
9658: ST_TO_ADDR
// hc_gallery :=  ;
9659: LD_ADDR_OWVAR 33
9663: PUSH
9664: LD_STRING 
9666: ST_TO_ADDR
// hc_name :=  ;
9667: LD_ADDR_OWVAR 26
9671: PUSH
9672: LD_STRING 
9674: ST_TO_ADDR
// un := CreateHuman ;
9675: LD_ADDR_VAR 0 2
9679: PUSH
9680: CALL_OW 44
9684: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9685: LD_VAR 0 2
9689: PPUSH
9690: LD_INT 1
9692: PPUSH
9693: CALL_OW 51
// tmp := tmp ^ un ;
9697: LD_ADDR_VAR 0 3
9701: PUSH
9702: LD_VAR 0 3
9706: PUSH
9707: LD_VAR 0 2
9711: ADD
9712: ST_TO_ADDR
// end ;
9713: GO 9609
9715: POP
9716: POP
// repeat wait ( 0 0$1 ) ;
9717: LD_INT 35
9719: PPUSH
9720: CALL_OW 67
// for un in tmp do
9724: LD_ADDR_VAR 0 2
9728: PUSH
9729: LD_VAR 0 3
9733: PUSH
9734: FOR_IN
9735: IFFALSE 9809
// begin if IsDead ( un ) then
9737: LD_VAR 0 2
9741: PPUSH
9742: CALL_OW 301
9746: IFFALSE 9766
// begin tmp := tmp diff un ;
9748: LD_ADDR_VAR 0 3
9752: PUSH
9753: LD_VAR 0 3
9757: PUSH
9758: LD_VAR 0 2
9762: DIFF
9763: ST_TO_ADDR
// continue ;
9764: GO 9734
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9766: LD_VAR 0 2
9770: PPUSH
9771: LD_INT 3
9773: PUSH
9774: LD_INT 22
9776: PUSH
9777: LD_INT 0
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: PPUSH
9788: CALL_OW 69
9792: PPUSH
9793: LD_VAR 0 2
9797: PPUSH
9798: CALL_OW 74
9802: PPUSH
9803: CALL_OW 115
// end ;
9807: GO 9734
9809: POP
9810: POP
// until not tmp ;
9811: LD_VAR 0 3
9815: NOT
9816: IFFALSE 9717
// end ;
9818: PPOPN 3
9820: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9821: LD_EXP 3
9825: PUSH
9826: LD_EXP 28
9830: AND
9831: IFFALSE 9885
9833: GO 9835
9835: DISABLE
// begin ToLua ( displayTroll(); ) ;
9836: LD_STRING displayTroll();
9838: PPUSH
9839: CALL_OW 559
// wait ( 3 3$00 ) ;
9843: LD_INT 6300
9845: PPUSH
9846: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9850: LD_STRING hideTroll();
9852: PPUSH
9853: CALL_OW 559
// wait ( 1 1$00 ) ;
9857: LD_INT 2100
9859: PPUSH
9860: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9864: LD_STRING displayTroll();
9866: PPUSH
9867: CALL_OW 559
// wait ( 1 1$00 ) ;
9871: LD_INT 2100
9873: PPUSH
9874: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9878: LD_STRING hideTroll();
9880: PPUSH
9881: CALL_OW 559
// end ;
9885: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9886: LD_EXP 3
9890: PUSH
9891: LD_EXP 29
9895: AND
9896: IFFALSE 9959
9898: GO 9900
9900: DISABLE
9901: LD_INT 0
9903: PPUSH
// begin p := 0 ;
9904: LD_ADDR_VAR 0 1
9908: PUSH
9909: LD_INT 0
9911: ST_TO_ADDR
// repeat game_speed := 1 ;
9912: LD_ADDR_OWVAR 65
9916: PUSH
9917: LD_INT 1
9919: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9920: LD_INT 35
9922: PPUSH
9923: CALL_OW 67
// p := p + 1 ;
9927: LD_ADDR_VAR 0 1
9931: PUSH
9932: LD_VAR 0 1
9936: PUSH
9937: LD_INT 1
9939: PLUS
9940: ST_TO_ADDR
// until p >= 60 ;
9941: LD_VAR 0 1
9945: PUSH
9946: LD_INT 60
9948: GREATEREQUAL
9949: IFFALSE 9912
// game_speed := 4 ;
9951: LD_ADDR_OWVAR 65
9955: PUSH
9956: LD_INT 4
9958: ST_TO_ADDR
// end ;
9959: PPOPN 1
9961: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9962: LD_EXP 3
9966: PUSH
9967: LD_EXP 30
9971: AND
9972: IFFALSE 10118
9974: GO 9976
9976: DISABLE
9977: LD_INT 0
9979: PPUSH
9980: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9981: LD_ADDR_VAR 0 1
9985: PUSH
9986: LD_INT 22
9988: PUSH
9989: LD_OWVAR 2
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PUSH
9998: LD_INT 2
10000: PUSH
10001: LD_INT 30
10003: PUSH
10004: LD_INT 0
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: PUSH
10011: LD_INT 30
10013: PUSH
10014: LD_INT 1
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: LIST
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PPUSH
10030: CALL_OW 69
10034: ST_TO_ADDR
// if not depot then
10035: LD_VAR 0 1
10039: NOT
10040: IFFALSE 10044
// exit ;
10042: GO 10118
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10044: LD_ADDR_VAR 0 2
10048: PUSH
10049: LD_VAR 0 1
10053: PUSH
10054: LD_INT 1
10056: PPUSH
10057: LD_VAR 0 1
10061: PPUSH
10062: CALL_OW 12
10066: ARRAY
10067: PPUSH
10068: CALL_OW 274
10072: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10073: LD_VAR 0 2
10077: PPUSH
10078: LD_INT 1
10080: PPUSH
10081: LD_INT 0
10083: PPUSH
10084: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10088: LD_VAR 0 2
10092: PPUSH
10093: LD_INT 2
10095: PPUSH
10096: LD_INT 0
10098: PPUSH
10099: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10103: LD_VAR 0 2
10107: PPUSH
10108: LD_INT 3
10110: PPUSH
10111: LD_INT 0
10113: PPUSH
10114: CALL_OW 277
// end ;
10118: PPOPN 2
10120: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10121: LD_EXP 3
10125: PUSH
10126: LD_EXP 31
10130: AND
10131: IFFALSE 10228
10133: GO 10135
10135: DISABLE
10136: LD_INT 0
10138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10139: LD_ADDR_VAR 0 1
10143: PUSH
10144: LD_INT 22
10146: PUSH
10147: LD_OWVAR 2
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: PUSH
10156: LD_INT 21
10158: PUSH
10159: LD_INT 1
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PUSH
10166: LD_INT 3
10168: PUSH
10169: LD_INT 23
10171: PUSH
10172: LD_INT 0
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: PUSH
10179: EMPTY
10180: LIST
10181: LIST
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: LIST
10187: PPUSH
10188: CALL_OW 69
10192: ST_TO_ADDR
// if not tmp then
10193: LD_VAR 0 1
10197: NOT
10198: IFFALSE 10202
// exit ;
10200: GO 10228
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10202: LD_VAR 0 1
10206: PUSH
10207: LD_INT 1
10209: PPUSH
10210: LD_VAR 0 1
10214: PPUSH
10215: CALL_OW 12
10219: ARRAY
10220: PPUSH
10221: LD_INT 200
10223: PPUSH
10224: CALL_OW 234
// end ;
10228: PPOPN 1
10230: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10231: LD_EXP 3
10235: PUSH
10236: LD_EXP 32
10240: AND
10241: IFFALSE 10320
10243: GO 10245
10245: DISABLE
10246: LD_INT 0
10248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10249: LD_ADDR_VAR 0 1
10253: PUSH
10254: LD_INT 22
10256: PUSH
10257: LD_OWVAR 2
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PUSH
10266: LD_INT 21
10268: PUSH
10269: LD_INT 2
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PPUSH
10280: CALL_OW 69
10284: ST_TO_ADDR
// if not tmp then
10285: LD_VAR 0 1
10289: NOT
10290: IFFALSE 10294
// exit ;
10292: GO 10320
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10294: LD_VAR 0 1
10298: PUSH
10299: LD_INT 1
10301: PPUSH
10302: LD_VAR 0 1
10306: PPUSH
10307: CALL_OW 12
10311: ARRAY
10312: PPUSH
10313: LD_INT 60
10315: PPUSH
10316: CALL_OW 234
// end ;
10320: PPOPN 1
10322: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10323: LD_EXP 3
10327: PUSH
10328: LD_EXP 33
10332: AND
10333: IFFALSE 10432
10335: GO 10337
10337: DISABLE
10338: LD_INT 0
10340: PPUSH
10341: PPUSH
// begin enable ;
10342: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10343: LD_ADDR_VAR 0 1
10347: PUSH
10348: LD_INT 22
10350: PUSH
10351: LD_OWVAR 2
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PUSH
10360: LD_INT 61
10362: PUSH
10363: EMPTY
10364: LIST
10365: PUSH
10366: LD_INT 33
10368: PUSH
10369: LD_INT 2
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: LIST
10380: PPUSH
10381: CALL_OW 69
10385: ST_TO_ADDR
// if not tmp then
10386: LD_VAR 0 1
10390: NOT
10391: IFFALSE 10395
// exit ;
10393: GO 10432
// for i in tmp do
10395: LD_ADDR_VAR 0 2
10399: PUSH
10400: LD_VAR 0 1
10404: PUSH
10405: FOR_IN
10406: IFFALSE 10430
// if IsControledBy ( i ) then
10408: LD_VAR 0 2
10412: PPUSH
10413: CALL_OW 312
10417: IFFALSE 10428
// ComUnlink ( i ) ;
10419: LD_VAR 0 2
10423: PPUSH
10424: CALL_OW 136
10428: GO 10405
10430: POP
10431: POP
// end ;
10432: PPOPN 2
10434: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10435: LD_EXP 3
10439: PUSH
10440: LD_EXP 34
10444: AND
10445: IFFALSE 10585
10447: GO 10449
10449: DISABLE
10450: LD_INT 0
10452: PPUSH
10453: PPUSH
// begin ToLua ( displayPowell(); ) ;
10454: LD_STRING displayPowell();
10456: PPUSH
10457: CALL_OW 559
// uc_side := 0 ;
10461: LD_ADDR_OWVAR 20
10465: PUSH
10466: LD_INT 0
10468: ST_TO_ADDR
// uc_nation := 2 ;
10469: LD_ADDR_OWVAR 21
10473: PUSH
10474: LD_INT 2
10476: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10477: LD_ADDR_OWVAR 37
10481: PUSH
10482: LD_INT 14
10484: ST_TO_ADDR
// vc_engine := engine_siberite ;
10485: LD_ADDR_OWVAR 39
10489: PUSH
10490: LD_INT 3
10492: ST_TO_ADDR
// vc_control := control_apeman ;
10493: LD_ADDR_OWVAR 38
10497: PUSH
10498: LD_INT 5
10500: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10501: LD_ADDR_OWVAR 40
10505: PUSH
10506: LD_INT 29
10508: ST_TO_ADDR
// un := CreateVehicle ;
10509: LD_ADDR_VAR 0 2
10513: PUSH
10514: CALL_OW 45
10518: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10519: LD_VAR 0 2
10523: PPUSH
10524: LD_INT 1
10526: PPUSH
10527: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10531: LD_INT 35
10533: PPUSH
10534: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10538: LD_VAR 0 2
10542: PPUSH
10543: LD_INT 22
10545: PUSH
10546: LD_OWVAR 2
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PPUSH
10555: CALL_OW 69
10559: PPUSH
10560: LD_VAR 0 2
10564: PPUSH
10565: CALL_OW 74
10569: PPUSH
10570: CALL_OW 115
// until IsDead ( un ) ;
10574: LD_VAR 0 2
10578: PPUSH
10579: CALL_OW 301
10583: IFFALSE 10531
// end ;
10585: PPOPN 2
10587: END
// every 0 0$1 trigger StreamModeActive and sStu do
10588: LD_EXP 3
10592: PUSH
10593: LD_EXP 42
10597: AND
10598: IFFALSE 10614
10600: GO 10602
10602: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10603: LD_STRING displayStucuk();
10605: PPUSH
10606: CALL_OW 559
// ResetFog ;
10610: CALL_OW 335
// end ;
10614: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10615: LD_EXP 3
10619: PUSH
10620: LD_EXP 35
10624: AND
10625: IFFALSE 10766
10627: GO 10629
10629: DISABLE
10630: LD_INT 0
10632: PPUSH
10633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10634: LD_ADDR_VAR 0 2
10638: PUSH
10639: LD_INT 22
10641: PUSH
10642: LD_OWVAR 2
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: PUSH
10651: LD_INT 21
10653: PUSH
10654: LD_INT 1
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: PPUSH
10665: CALL_OW 69
10669: ST_TO_ADDR
// if not tmp then
10670: LD_VAR 0 2
10674: NOT
10675: IFFALSE 10679
// exit ;
10677: GO 10766
// un := tmp [ rand ( 1 , tmp ) ] ;
10679: LD_ADDR_VAR 0 1
10683: PUSH
10684: LD_VAR 0 2
10688: PUSH
10689: LD_INT 1
10691: PPUSH
10692: LD_VAR 0 2
10696: PPUSH
10697: CALL_OW 12
10701: ARRAY
10702: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10703: LD_VAR 0 1
10707: PPUSH
10708: LD_INT 0
10710: PPUSH
10711: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10715: LD_VAR 0 1
10719: PPUSH
10720: LD_OWVAR 3
10724: PUSH
10725: LD_VAR 0 1
10729: DIFF
10730: PPUSH
10731: LD_VAR 0 1
10735: PPUSH
10736: CALL_OW 74
10740: PPUSH
10741: CALL_OW 115
// wait ( 0 0$20 ) ;
10745: LD_INT 700
10747: PPUSH
10748: CALL_OW 67
// SetSide ( un , your_side ) ;
10752: LD_VAR 0 1
10756: PPUSH
10757: LD_OWVAR 2
10761: PPUSH
10762: CALL_OW 235
// end ;
10766: PPOPN 2
10768: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10769: LD_EXP 3
10773: PUSH
10774: LD_EXP 36
10778: AND
10779: IFFALSE 10885
10781: GO 10783
10783: DISABLE
10784: LD_INT 0
10786: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10787: LD_ADDR_VAR 0 1
10791: PUSH
10792: LD_INT 22
10794: PUSH
10795: LD_OWVAR 2
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: PUSH
10804: LD_INT 2
10806: PUSH
10807: LD_INT 30
10809: PUSH
10810: LD_INT 0
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: PUSH
10817: LD_INT 30
10819: PUSH
10820: LD_INT 1
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: LIST
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PPUSH
10836: CALL_OW 69
10840: ST_TO_ADDR
// if not depot then
10841: LD_VAR 0 1
10845: NOT
10846: IFFALSE 10850
// exit ;
10848: GO 10885
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10850: LD_VAR 0 1
10854: PUSH
10855: LD_INT 1
10857: ARRAY
10858: PPUSH
10859: CALL_OW 250
10863: PPUSH
10864: LD_VAR 0 1
10868: PUSH
10869: LD_INT 1
10871: ARRAY
10872: PPUSH
10873: CALL_OW 251
10877: PPUSH
10878: LD_INT 70
10880: PPUSH
10881: CALL_OW 495
// end ;
10885: PPOPN 1
10887: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10888: LD_EXP 3
10892: PUSH
10893: LD_EXP 37
10897: AND
10898: IFFALSE 11109
10900: GO 10902
10902: DISABLE
10903: LD_INT 0
10905: PPUSH
10906: PPUSH
10907: PPUSH
10908: PPUSH
10909: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10910: LD_ADDR_VAR 0 5
10914: PUSH
10915: LD_INT 22
10917: PUSH
10918: LD_OWVAR 2
10922: PUSH
10923: EMPTY
10924: LIST
10925: LIST
10926: PUSH
10927: LD_INT 21
10929: PUSH
10930: LD_INT 1
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: PUSH
10937: EMPTY
10938: LIST
10939: LIST
10940: PPUSH
10941: CALL_OW 69
10945: ST_TO_ADDR
// if not tmp then
10946: LD_VAR 0 5
10950: NOT
10951: IFFALSE 10955
// exit ;
10953: GO 11109
// for i in tmp do
10955: LD_ADDR_VAR 0 1
10959: PUSH
10960: LD_VAR 0 5
10964: PUSH
10965: FOR_IN
10966: IFFALSE 11107
// begin d := rand ( 0 , 5 ) ;
10968: LD_ADDR_VAR 0 4
10972: PUSH
10973: LD_INT 0
10975: PPUSH
10976: LD_INT 5
10978: PPUSH
10979: CALL_OW 12
10983: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10984: LD_ADDR_VAR 0 2
10988: PUSH
10989: LD_VAR 0 1
10993: PPUSH
10994: CALL_OW 250
10998: PPUSH
10999: LD_VAR 0 4
11003: PPUSH
11004: LD_INT 3
11006: PPUSH
11007: LD_INT 12
11009: PPUSH
11010: CALL_OW 12
11014: PPUSH
11015: CALL_OW 272
11019: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11020: LD_ADDR_VAR 0 3
11024: PUSH
11025: LD_VAR 0 1
11029: PPUSH
11030: CALL_OW 251
11034: PPUSH
11035: LD_VAR 0 4
11039: PPUSH
11040: LD_INT 3
11042: PPUSH
11043: LD_INT 12
11045: PPUSH
11046: CALL_OW 12
11050: PPUSH
11051: CALL_OW 273
11055: ST_TO_ADDR
// if ValidHex ( x , y ) then
11056: LD_VAR 0 2
11060: PPUSH
11061: LD_VAR 0 3
11065: PPUSH
11066: CALL_OW 488
11070: IFFALSE 11105
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11072: LD_VAR 0 1
11076: PPUSH
11077: LD_VAR 0 2
11081: PPUSH
11082: LD_VAR 0 3
11086: PPUSH
11087: LD_INT 3
11089: PPUSH
11090: LD_INT 6
11092: PPUSH
11093: CALL_OW 12
11097: PPUSH
11098: LD_INT 1
11100: PPUSH
11101: CALL_OW 483
// end ;
11105: GO 10965
11107: POP
11108: POP
// end ;
11109: PPOPN 5
11111: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11112: LD_EXP 3
11116: PUSH
11117: LD_EXP 38
11121: AND
11122: IFFALSE 11216
11124: GO 11126
11126: DISABLE
11127: LD_INT 0
11129: PPUSH
11130: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11131: LD_ADDR_VAR 0 2
11135: PUSH
11136: LD_INT 22
11138: PUSH
11139: LD_OWVAR 2
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: PUSH
11148: LD_INT 32
11150: PUSH
11151: LD_INT 1
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: PUSH
11158: LD_INT 21
11160: PUSH
11161: LD_INT 2
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: PUSH
11168: EMPTY
11169: LIST
11170: LIST
11171: LIST
11172: PPUSH
11173: CALL_OW 69
11177: ST_TO_ADDR
// if not tmp then
11178: LD_VAR 0 2
11182: NOT
11183: IFFALSE 11187
// exit ;
11185: GO 11216
// for i in tmp do
11187: LD_ADDR_VAR 0 1
11191: PUSH
11192: LD_VAR 0 2
11196: PUSH
11197: FOR_IN
11198: IFFALSE 11214
// SetFuel ( i , 0 ) ;
11200: LD_VAR 0 1
11204: PPUSH
11205: LD_INT 0
11207: PPUSH
11208: CALL_OW 240
11212: GO 11197
11214: POP
11215: POP
// end ;
11216: PPOPN 2
11218: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11219: LD_EXP 3
11223: PUSH
11224: LD_EXP 39
11228: AND
11229: IFFALSE 11295
11231: GO 11233
11233: DISABLE
11234: LD_INT 0
11236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11237: LD_ADDR_VAR 0 1
11241: PUSH
11242: LD_INT 22
11244: PUSH
11245: LD_OWVAR 2
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: PUSH
11254: LD_INT 30
11256: PUSH
11257: LD_INT 29
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: PPUSH
11268: CALL_OW 69
11272: ST_TO_ADDR
// if not tmp then
11273: LD_VAR 0 1
11277: NOT
11278: IFFALSE 11282
// exit ;
11280: GO 11295
// DestroyUnit ( tmp [ 1 ] ) ;
11282: LD_VAR 0 1
11286: PUSH
11287: LD_INT 1
11289: ARRAY
11290: PPUSH
11291: CALL_OW 65
// end ;
11295: PPOPN 1
11297: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11298: LD_EXP 3
11302: PUSH
11303: LD_EXP 41
11307: AND
11308: IFFALSE 11437
11310: GO 11312
11312: DISABLE
11313: LD_INT 0
11315: PPUSH
// begin uc_side := 0 ;
11316: LD_ADDR_OWVAR 20
11320: PUSH
11321: LD_INT 0
11323: ST_TO_ADDR
// uc_nation := nation_arabian ;
11324: LD_ADDR_OWVAR 21
11328: PUSH
11329: LD_INT 2
11331: ST_TO_ADDR
// hc_gallery :=  ;
11332: LD_ADDR_OWVAR 33
11336: PUSH
11337: LD_STRING 
11339: ST_TO_ADDR
// hc_name :=  ;
11340: LD_ADDR_OWVAR 26
11344: PUSH
11345: LD_STRING 
11347: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11348: LD_INT 1
11350: PPUSH
11351: LD_INT 11
11353: PPUSH
11354: LD_INT 10
11356: PPUSH
11357: CALL_OW 380
// un := CreateHuman ;
11361: LD_ADDR_VAR 0 1
11365: PUSH
11366: CALL_OW 44
11370: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11371: LD_VAR 0 1
11375: PPUSH
11376: LD_INT 1
11378: PPUSH
11379: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11383: LD_INT 35
11385: PPUSH
11386: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11390: LD_VAR 0 1
11394: PPUSH
11395: LD_INT 22
11397: PUSH
11398: LD_OWVAR 2
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: PPUSH
11407: CALL_OW 69
11411: PPUSH
11412: LD_VAR 0 1
11416: PPUSH
11417: CALL_OW 74
11421: PPUSH
11422: CALL_OW 115
// until IsDead ( un ) ;
11426: LD_VAR 0 1
11430: PPUSH
11431: CALL_OW 301
11435: IFFALSE 11383
// end ;
11437: PPOPN 1
11439: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11440: LD_EXP 3
11444: PUSH
11445: LD_EXP 43
11449: AND
11450: IFFALSE 11462
11452: GO 11454
11454: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11455: LD_STRING earthquake(getX(game), 0, 32)
11457: PPUSH
11458: CALL_OW 559
11462: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11463: LD_EXP 3
11467: PUSH
11468: LD_EXP 44
11472: AND
11473: IFFALSE 11564
11475: GO 11477
11477: DISABLE
11478: LD_INT 0
11480: PPUSH
// begin enable ;
11481: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11482: LD_ADDR_VAR 0 1
11486: PUSH
11487: LD_INT 22
11489: PUSH
11490: LD_OWVAR 2
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: PUSH
11499: LD_INT 21
11501: PUSH
11502: LD_INT 2
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PUSH
11509: LD_INT 33
11511: PUSH
11512: LD_INT 3
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: LIST
11523: PPUSH
11524: CALL_OW 69
11528: ST_TO_ADDR
// if not tmp then
11529: LD_VAR 0 1
11533: NOT
11534: IFFALSE 11538
// exit ;
11536: GO 11564
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11538: LD_VAR 0 1
11542: PUSH
11543: LD_INT 1
11545: PPUSH
11546: LD_VAR 0 1
11550: PPUSH
11551: CALL_OW 12
11555: ARRAY
11556: PPUSH
11557: LD_INT 1
11559: PPUSH
11560: CALL_OW 234
// end ;
11564: PPOPN 1
11566: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11567: LD_EXP 3
11571: PUSH
11572: LD_EXP 45
11576: AND
11577: IFFALSE 11718
11579: GO 11581
11581: DISABLE
11582: LD_INT 0
11584: PPUSH
11585: PPUSH
11586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11587: LD_ADDR_VAR 0 3
11591: PUSH
11592: LD_INT 22
11594: PUSH
11595: LD_OWVAR 2
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: PUSH
11604: LD_INT 25
11606: PUSH
11607: LD_INT 1
11609: PUSH
11610: EMPTY
11611: LIST
11612: LIST
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: PPUSH
11618: CALL_OW 69
11622: ST_TO_ADDR
// if not tmp then
11623: LD_VAR 0 3
11627: NOT
11628: IFFALSE 11632
// exit ;
11630: GO 11718
// un := tmp [ rand ( 1 , tmp ) ] ;
11632: LD_ADDR_VAR 0 2
11636: PUSH
11637: LD_VAR 0 3
11641: PUSH
11642: LD_INT 1
11644: PPUSH
11645: LD_VAR 0 3
11649: PPUSH
11650: CALL_OW 12
11654: ARRAY
11655: ST_TO_ADDR
// if Crawls ( un ) then
11656: LD_VAR 0 2
11660: PPUSH
11661: CALL_OW 318
11665: IFFALSE 11676
// ComWalk ( un ) ;
11667: LD_VAR 0 2
11671: PPUSH
11672: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11676: LD_VAR 0 2
11680: PPUSH
11681: LD_INT 9
11683: PPUSH
11684: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11688: LD_INT 28
11690: PPUSH
11691: LD_OWVAR 2
11695: PPUSH
11696: LD_INT 2
11698: PPUSH
11699: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11703: LD_INT 29
11705: PPUSH
11706: LD_OWVAR 2
11710: PPUSH
11711: LD_INT 2
11713: PPUSH
11714: CALL_OW 322
// end ;
11718: PPOPN 3
11720: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11721: LD_EXP 3
11725: PUSH
11726: LD_EXP 46
11730: AND
11731: IFFALSE 11842
11733: GO 11735
11735: DISABLE
11736: LD_INT 0
11738: PPUSH
11739: PPUSH
11740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11741: LD_ADDR_VAR 0 3
11745: PUSH
11746: LD_INT 22
11748: PUSH
11749: LD_OWVAR 2
11753: PUSH
11754: EMPTY
11755: LIST
11756: LIST
11757: PUSH
11758: LD_INT 25
11760: PUSH
11761: LD_INT 1
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PPUSH
11772: CALL_OW 69
11776: ST_TO_ADDR
// if not tmp then
11777: LD_VAR 0 3
11781: NOT
11782: IFFALSE 11786
// exit ;
11784: GO 11842
// un := tmp [ rand ( 1 , tmp ) ] ;
11786: LD_ADDR_VAR 0 2
11790: PUSH
11791: LD_VAR 0 3
11795: PUSH
11796: LD_INT 1
11798: PPUSH
11799: LD_VAR 0 3
11803: PPUSH
11804: CALL_OW 12
11808: ARRAY
11809: ST_TO_ADDR
// if Crawls ( un ) then
11810: LD_VAR 0 2
11814: PPUSH
11815: CALL_OW 318
11819: IFFALSE 11830
// ComWalk ( un ) ;
11821: LD_VAR 0 2
11825: PPUSH
11826: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11830: LD_VAR 0 2
11834: PPUSH
11835: LD_INT 8
11837: PPUSH
11838: CALL_OW 336
// end ;
11842: PPOPN 3
11844: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11845: LD_EXP 3
11849: PUSH
11850: LD_EXP 47
11854: AND
11855: IFFALSE 11999
11857: GO 11859
11859: DISABLE
11860: LD_INT 0
11862: PPUSH
11863: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11864: LD_ADDR_VAR 0 2
11868: PUSH
11869: LD_INT 22
11871: PUSH
11872: LD_OWVAR 2
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: PUSH
11881: LD_INT 21
11883: PUSH
11884: LD_INT 2
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: PUSH
11891: LD_INT 2
11893: PUSH
11894: LD_INT 34
11896: PUSH
11897: LD_INT 12
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: PUSH
11904: LD_INT 34
11906: PUSH
11907: LD_INT 51
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: PUSH
11914: LD_INT 34
11916: PUSH
11917: LD_INT 32
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: LIST
11934: PPUSH
11935: CALL_OW 69
11939: ST_TO_ADDR
// if not tmp then
11940: LD_VAR 0 2
11944: NOT
11945: IFFALSE 11949
// exit ;
11947: GO 11999
// for i in tmp do
11949: LD_ADDR_VAR 0 1
11953: PUSH
11954: LD_VAR 0 2
11958: PUSH
11959: FOR_IN
11960: IFFALSE 11997
// if GetCargo ( i , mat_artifact ) = 0 then
11962: LD_VAR 0 1
11966: PPUSH
11967: LD_INT 4
11969: PPUSH
11970: CALL_OW 289
11974: PUSH
11975: LD_INT 0
11977: EQUAL
11978: IFFALSE 11995
// SetCargo ( i , mat_siberit , 100 ) ;
11980: LD_VAR 0 1
11984: PPUSH
11985: LD_INT 3
11987: PPUSH
11988: LD_INT 100
11990: PPUSH
11991: CALL_OW 290
11995: GO 11959
11997: POP
11998: POP
// end ;
11999: PPOPN 2
12001: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12002: LD_EXP 3
12006: PUSH
12007: LD_EXP 48
12011: AND
12012: IFFALSE 12195
12014: GO 12016
12016: DISABLE
12017: LD_INT 0
12019: PPUSH
12020: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12021: LD_ADDR_VAR 0 2
12025: PUSH
12026: LD_INT 22
12028: PUSH
12029: LD_OWVAR 2
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PPUSH
12038: CALL_OW 69
12042: ST_TO_ADDR
// if not tmp then
12043: LD_VAR 0 2
12047: NOT
12048: IFFALSE 12052
// exit ;
12050: GO 12195
// for i := 1 to 2 do
12052: LD_ADDR_VAR 0 1
12056: PUSH
12057: DOUBLE
12058: LD_INT 1
12060: DEC
12061: ST_TO_ADDR
12062: LD_INT 2
12064: PUSH
12065: FOR_TO
12066: IFFALSE 12193
// begin uc_side := your_side ;
12068: LD_ADDR_OWVAR 20
12072: PUSH
12073: LD_OWVAR 2
12077: ST_TO_ADDR
// uc_nation := nation_american ;
12078: LD_ADDR_OWVAR 21
12082: PUSH
12083: LD_INT 1
12085: ST_TO_ADDR
// vc_chassis := us_morphling ;
12086: LD_ADDR_OWVAR 37
12090: PUSH
12091: LD_INT 5
12093: ST_TO_ADDR
// vc_engine := engine_siberite ;
12094: LD_ADDR_OWVAR 39
12098: PUSH
12099: LD_INT 3
12101: ST_TO_ADDR
// vc_control := control_computer ;
12102: LD_ADDR_OWVAR 38
12106: PUSH
12107: LD_INT 3
12109: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12110: LD_ADDR_OWVAR 40
12114: PUSH
12115: LD_INT 10
12117: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12118: LD_VAR 0 2
12122: PUSH
12123: LD_INT 1
12125: ARRAY
12126: PPUSH
12127: CALL_OW 310
12131: NOT
12132: IFFALSE 12179
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12134: CALL_OW 45
12138: PPUSH
12139: LD_VAR 0 2
12143: PUSH
12144: LD_INT 1
12146: ARRAY
12147: PPUSH
12148: CALL_OW 250
12152: PPUSH
12153: LD_VAR 0 2
12157: PUSH
12158: LD_INT 1
12160: ARRAY
12161: PPUSH
12162: CALL_OW 251
12166: PPUSH
12167: LD_INT 12
12169: PPUSH
12170: LD_INT 1
12172: PPUSH
12173: CALL_OW 50
12177: GO 12191
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12179: CALL_OW 45
12183: PPUSH
12184: LD_INT 1
12186: PPUSH
12187: CALL_OW 51
// end ;
12191: GO 12065
12193: POP
12194: POP
// end ;
12195: PPOPN 2
12197: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12198: LD_EXP 3
12202: PUSH
12203: LD_EXP 49
12207: AND
12208: IFFALSE 12430
12210: GO 12212
12212: DISABLE
12213: LD_INT 0
12215: PPUSH
12216: PPUSH
12217: PPUSH
12218: PPUSH
12219: PPUSH
12220: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12221: LD_ADDR_VAR 0 6
12225: PUSH
12226: LD_INT 22
12228: PUSH
12229: LD_OWVAR 2
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: PUSH
12238: LD_INT 21
12240: PUSH
12241: LD_INT 1
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: PUSH
12248: LD_INT 3
12250: PUSH
12251: LD_INT 23
12253: PUSH
12254: LD_INT 0
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: LIST
12269: PPUSH
12270: CALL_OW 69
12274: ST_TO_ADDR
// if not tmp then
12275: LD_VAR 0 6
12279: NOT
12280: IFFALSE 12284
// exit ;
12282: GO 12430
// s1 := rand ( 1 , 4 ) ;
12284: LD_ADDR_VAR 0 2
12288: PUSH
12289: LD_INT 1
12291: PPUSH
12292: LD_INT 4
12294: PPUSH
12295: CALL_OW 12
12299: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12300: LD_ADDR_VAR 0 4
12304: PUSH
12305: LD_VAR 0 6
12309: PUSH
12310: LD_INT 1
12312: ARRAY
12313: PPUSH
12314: LD_VAR 0 2
12318: PPUSH
12319: CALL_OW 259
12323: ST_TO_ADDR
// if s1 = 1 then
12324: LD_VAR 0 2
12328: PUSH
12329: LD_INT 1
12331: EQUAL
12332: IFFALSE 12352
// s2 := rand ( 2 , 4 ) else
12334: LD_ADDR_VAR 0 3
12338: PUSH
12339: LD_INT 2
12341: PPUSH
12342: LD_INT 4
12344: PPUSH
12345: CALL_OW 12
12349: ST_TO_ADDR
12350: GO 12360
// s2 := 1 ;
12352: LD_ADDR_VAR 0 3
12356: PUSH
12357: LD_INT 1
12359: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12360: LD_ADDR_VAR 0 5
12364: PUSH
12365: LD_VAR 0 6
12369: PUSH
12370: LD_INT 1
12372: ARRAY
12373: PPUSH
12374: LD_VAR 0 3
12378: PPUSH
12379: CALL_OW 259
12383: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12384: LD_VAR 0 6
12388: PUSH
12389: LD_INT 1
12391: ARRAY
12392: PPUSH
12393: LD_VAR 0 2
12397: PPUSH
12398: LD_VAR 0 5
12402: PPUSH
12403: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12407: LD_VAR 0 6
12411: PUSH
12412: LD_INT 1
12414: ARRAY
12415: PPUSH
12416: LD_VAR 0 3
12420: PPUSH
12421: LD_VAR 0 4
12425: PPUSH
12426: CALL_OW 237
// end ;
12430: PPOPN 6
12432: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12433: LD_EXP 3
12437: PUSH
12438: LD_EXP 50
12442: AND
12443: IFFALSE 12522
12445: GO 12447
12447: DISABLE
12448: LD_INT 0
12450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12451: LD_ADDR_VAR 0 1
12455: PUSH
12456: LD_INT 22
12458: PUSH
12459: LD_OWVAR 2
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: PUSH
12468: LD_INT 30
12470: PUSH
12471: LD_INT 3
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PPUSH
12482: CALL_OW 69
12486: ST_TO_ADDR
// if not tmp then
12487: LD_VAR 0 1
12491: NOT
12492: IFFALSE 12496
// exit ;
12494: GO 12522
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12496: LD_VAR 0 1
12500: PUSH
12501: LD_INT 1
12503: PPUSH
12504: LD_VAR 0 1
12508: PPUSH
12509: CALL_OW 12
12513: ARRAY
12514: PPUSH
12515: LD_INT 1
12517: PPUSH
12518: CALL_OW 234
// end ;
12522: PPOPN 1
12524: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12525: LD_EXP 3
12529: PUSH
12530: LD_EXP 51
12534: AND
12535: IFFALSE 12647
12537: GO 12539
12539: DISABLE
12540: LD_INT 0
12542: PPUSH
12543: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12544: LD_ADDR_VAR 0 2
12548: PUSH
12549: LD_INT 22
12551: PUSH
12552: LD_OWVAR 2
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: PUSH
12561: LD_INT 2
12563: PUSH
12564: LD_INT 30
12566: PUSH
12567: LD_INT 27
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: PUSH
12574: LD_INT 30
12576: PUSH
12577: LD_INT 26
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: PUSH
12584: LD_INT 30
12586: PUSH
12587: LD_INT 28
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: PPUSH
12604: CALL_OW 69
12608: ST_TO_ADDR
// if not tmp then
12609: LD_VAR 0 2
12613: NOT
12614: IFFALSE 12618
// exit ;
12616: GO 12647
// for i in tmp do
12618: LD_ADDR_VAR 0 1
12622: PUSH
12623: LD_VAR 0 2
12627: PUSH
12628: FOR_IN
12629: IFFALSE 12645
// SetLives ( i , 1 ) ;
12631: LD_VAR 0 1
12635: PPUSH
12636: LD_INT 1
12638: PPUSH
12639: CALL_OW 234
12643: GO 12628
12645: POP
12646: POP
// end ;
12647: PPOPN 2
12649: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12650: LD_EXP 3
12654: PUSH
12655: LD_EXP 52
12659: AND
12660: IFFALSE 12947
12662: GO 12664
12664: DISABLE
12665: LD_INT 0
12667: PPUSH
12668: PPUSH
12669: PPUSH
// begin i := rand ( 1 , 7 ) ;
12670: LD_ADDR_VAR 0 1
12674: PUSH
12675: LD_INT 1
12677: PPUSH
12678: LD_INT 7
12680: PPUSH
12681: CALL_OW 12
12685: ST_TO_ADDR
// case i of 1 :
12686: LD_VAR 0 1
12690: PUSH
12691: LD_INT 1
12693: DOUBLE
12694: EQUAL
12695: IFTRUE 12699
12697: GO 12709
12699: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12700: LD_STRING earthquake(getX(game), 0, 32)
12702: PPUSH
12703: CALL_OW 559
12707: GO 12947
12709: LD_INT 2
12711: DOUBLE
12712: EQUAL
12713: IFTRUE 12717
12715: GO 12731
12717: POP
// begin ToLua ( displayStucuk(); ) ;
12718: LD_STRING displayStucuk();
12720: PPUSH
12721: CALL_OW 559
// ResetFog ;
12725: CALL_OW 335
// end ; 3 :
12729: GO 12947
12731: LD_INT 3
12733: DOUBLE
12734: EQUAL
12735: IFTRUE 12739
12737: GO 12843
12739: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12740: LD_ADDR_VAR 0 2
12744: PUSH
12745: LD_INT 22
12747: PUSH
12748: LD_OWVAR 2
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: PUSH
12757: LD_INT 25
12759: PUSH
12760: LD_INT 1
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: PPUSH
12771: CALL_OW 69
12775: ST_TO_ADDR
// if not tmp then
12776: LD_VAR 0 2
12780: NOT
12781: IFFALSE 12785
// exit ;
12783: GO 12947
// un := tmp [ rand ( 1 , tmp ) ] ;
12785: LD_ADDR_VAR 0 3
12789: PUSH
12790: LD_VAR 0 2
12794: PUSH
12795: LD_INT 1
12797: PPUSH
12798: LD_VAR 0 2
12802: PPUSH
12803: CALL_OW 12
12807: ARRAY
12808: ST_TO_ADDR
// if Crawls ( un ) then
12809: LD_VAR 0 3
12813: PPUSH
12814: CALL_OW 318
12818: IFFALSE 12829
// ComWalk ( un ) ;
12820: LD_VAR 0 3
12824: PPUSH
12825: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12829: LD_VAR 0 3
12833: PPUSH
12834: LD_INT 8
12836: PPUSH
12837: CALL_OW 336
// end ; 4 :
12841: GO 12947
12843: LD_INT 4
12845: DOUBLE
12846: EQUAL
12847: IFTRUE 12851
12849: GO 12925
12851: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12852: LD_ADDR_VAR 0 2
12856: PUSH
12857: LD_INT 22
12859: PUSH
12860: LD_OWVAR 2
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: PUSH
12869: LD_INT 30
12871: PUSH
12872: LD_INT 29
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: PPUSH
12883: CALL_OW 69
12887: ST_TO_ADDR
// if not tmp then
12888: LD_VAR 0 2
12892: NOT
12893: IFFALSE 12897
// exit ;
12895: GO 12947
// CenterNowOnUnits ( tmp [ 1 ] ) ;
12897: LD_VAR 0 2
12901: PUSH
12902: LD_INT 1
12904: ARRAY
12905: PPUSH
12906: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
12910: LD_VAR 0 2
12914: PUSH
12915: LD_INT 1
12917: ARRAY
12918: PPUSH
12919: CALL_OW 65
// end ; 5 .. 7 :
12923: GO 12947
12925: LD_INT 5
12927: DOUBLE
12928: GREATEREQUAL
12929: IFFALSE 12937
12931: LD_INT 7
12933: DOUBLE
12934: LESSEQUAL
12935: IFTRUE 12939
12937: GO 12946
12939: POP
// StreamSibBomb ; end ;
12940: CALL 9184 0 0
12944: GO 12947
12946: POP
// end ;
12947: PPOPN 3
12949: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12950: LD_EXP 3
12954: PUSH
12955: LD_EXP 53
12959: AND
12960: IFFALSE 13116
12962: GO 12964
12964: DISABLE
12965: LD_INT 0
12967: PPUSH
12968: PPUSH
12969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12970: LD_ADDR_VAR 0 2
12974: PUSH
12975: LD_INT 81
12977: PUSH
12978: LD_OWVAR 2
12982: PUSH
12983: EMPTY
12984: LIST
12985: LIST
12986: PUSH
12987: LD_INT 2
12989: PUSH
12990: LD_INT 21
12992: PUSH
12993: LD_INT 1
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: PUSH
13000: LD_INT 21
13002: PUSH
13003: LD_INT 2
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: PPUSH
13019: CALL_OW 69
13023: ST_TO_ADDR
// if not tmp then
13024: LD_VAR 0 2
13028: NOT
13029: IFFALSE 13033
// exit ;
13031: GO 13116
// p := 0 ;
13033: LD_ADDR_VAR 0 3
13037: PUSH
13038: LD_INT 0
13040: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13041: LD_INT 35
13043: PPUSH
13044: CALL_OW 67
// p := p + 1 ;
13048: LD_ADDR_VAR 0 3
13052: PUSH
13053: LD_VAR 0 3
13057: PUSH
13058: LD_INT 1
13060: PLUS
13061: ST_TO_ADDR
// for i in tmp do
13062: LD_ADDR_VAR 0 1
13066: PUSH
13067: LD_VAR 0 2
13071: PUSH
13072: FOR_IN
13073: IFFALSE 13104
// if GetLives ( i ) < 1000 then
13075: LD_VAR 0 1
13079: PPUSH
13080: CALL_OW 256
13084: PUSH
13085: LD_INT 1000
13087: LESS
13088: IFFALSE 13102
// SetLives ( i , 1000 ) ;
13090: LD_VAR 0 1
13094: PPUSH
13095: LD_INT 1000
13097: PPUSH
13098: CALL_OW 234
13102: GO 13072
13104: POP
13105: POP
// until p > 20 ;
13106: LD_VAR 0 3
13110: PUSH
13111: LD_INT 20
13113: GREATER
13114: IFFALSE 13041
// end ;
13116: PPOPN 3
13118: END
// every 0 0$1 trigger StreamModeActive and sTime do
13119: LD_EXP 3
13123: PUSH
13124: LD_EXP 54
13128: AND
13129: IFFALSE 13164
13131: GO 13133
13133: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13134: LD_INT 28
13136: PPUSH
13137: LD_OWVAR 2
13141: PPUSH
13142: LD_INT 2
13144: PPUSH
13145: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13149: LD_INT 30
13151: PPUSH
13152: LD_OWVAR 2
13156: PPUSH
13157: LD_INT 2
13159: PPUSH
13160: CALL_OW 322
// end ;
13164: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13165: LD_EXP 3
13169: PUSH
13170: LD_EXP 55
13174: AND
13175: IFFALSE 13296
13177: GO 13179
13179: DISABLE
13180: LD_INT 0
13182: PPUSH
13183: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13184: LD_ADDR_VAR 0 2
13188: PUSH
13189: LD_INT 22
13191: PUSH
13192: LD_OWVAR 2
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: PUSH
13201: LD_INT 21
13203: PUSH
13204: LD_INT 1
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: PUSH
13211: LD_INT 3
13213: PUSH
13214: LD_INT 23
13216: PUSH
13217: LD_INT 0
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PUSH
13224: EMPTY
13225: LIST
13226: LIST
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: LIST
13232: PPUSH
13233: CALL_OW 69
13237: ST_TO_ADDR
// if not tmp then
13238: LD_VAR 0 2
13242: NOT
13243: IFFALSE 13247
// exit ;
13245: GO 13296
// for i in tmp do
13247: LD_ADDR_VAR 0 1
13251: PUSH
13252: LD_VAR 0 2
13256: PUSH
13257: FOR_IN
13258: IFFALSE 13294
// begin if Crawls ( i ) then
13260: LD_VAR 0 1
13264: PPUSH
13265: CALL_OW 318
13269: IFFALSE 13280
// ComWalk ( i ) ;
13271: LD_VAR 0 1
13275: PPUSH
13276: CALL_OW 138
// SetClass ( i , 2 ) ;
13280: LD_VAR 0 1
13284: PPUSH
13285: LD_INT 2
13287: PPUSH
13288: CALL_OW 336
// end ;
13292: GO 13257
13294: POP
13295: POP
// end ;
13296: PPOPN 2
13298: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13299: LD_EXP 3
13303: PUSH
13304: LD_EXP 56
13308: AND
13309: IFFALSE 13597
13311: GO 13313
13313: DISABLE
13314: LD_INT 0
13316: PPUSH
13317: PPUSH
13318: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13319: LD_OWVAR 2
13323: PPUSH
13324: LD_INT 9
13326: PPUSH
13327: LD_INT 1
13329: PPUSH
13330: LD_INT 1
13332: PPUSH
13333: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13337: LD_INT 9
13339: PPUSH
13340: LD_OWVAR 2
13344: PPUSH
13345: CALL_OW 343
// uc_side := 9 ;
13349: LD_ADDR_OWVAR 20
13353: PUSH
13354: LD_INT 9
13356: ST_TO_ADDR
// uc_nation := 2 ;
13357: LD_ADDR_OWVAR 21
13361: PUSH
13362: LD_INT 2
13364: ST_TO_ADDR
// hc_name := Dark Warrior ;
13365: LD_ADDR_OWVAR 26
13369: PUSH
13370: LD_STRING Dark Warrior
13372: ST_TO_ADDR
// hc_gallery :=  ;
13373: LD_ADDR_OWVAR 33
13377: PUSH
13378: LD_STRING 
13380: ST_TO_ADDR
// hc_noskilllimit := true ;
13381: LD_ADDR_OWVAR 76
13385: PUSH
13386: LD_INT 1
13388: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13389: LD_ADDR_OWVAR 31
13393: PUSH
13394: LD_INT 30
13396: PUSH
13397: LD_INT 30
13399: PUSH
13400: LD_INT 30
13402: PUSH
13403: LD_INT 30
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: ST_TO_ADDR
// un := CreateHuman ;
13412: LD_ADDR_VAR 0 3
13416: PUSH
13417: CALL_OW 44
13421: ST_TO_ADDR
// hc_noskilllimit := false ;
13422: LD_ADDR_OWVAR 76
13426: PUSH
13427: LD_INT 0
13429: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13430: LD_VAR 0 3
13434: PPUSH
13435: LD_INT 1
13437: PPUSH
13438: CALL_OW 51
// ToLua ( playRanger() ) ;
13442: LD_STRING playRanger()
13444: PPUSH
13445: CALL_OW 559
// p := 0 ;
13449: LD_ADDR_VAR 0 2
13453: PUSH
13454: LD_INT 0
13456: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13457: LD_INT 35
13459: PPUSH
13460: CALL_OW 67
// p := p + 1 ;
13464: LD_ADDR_VAR 0 2
13468: PUSH
13469: LD_VAR 0 2
13473: PUSH
13474: LD_INT 1
13476: PLUS
13477: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13478: LD_VAR 0 3
13482: PPUSH
13483: CALL_OW 256
13487: PUSH
13488: LD_INT 1000
13490: LESS
13491: IFFALSE 13505
// SetLives ( un , 1000 ) ;
13493: LD_VAR 0 3
13497: PPUSH
13498: LD_INT 1000
13500: PPUSH
13501: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13505: LD_VAR 0 3
13509: PPUSH
13510: LD_INT 81
13512: PUSH
13513: LD_OWVAR 2
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: PUSH
13522: LD_INT 91
13524: PUSH
13525: LD_VAR 0 3
13529: PUSH
13530: LD_INT 30
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: LIST
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: PPUSH
13542: CALL_OW 69
13546: PPUSH
13547: LD_VAR 0 3
13551: PPUSH
13552: CALL_OW 74
13556: PPUSH
13557: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
13561: LD_VAR 0 2
13565: PUSH
13566: LD_INT 80
13568: GREATER
13569: PUSH
13570: LD_VAR 0 3
13574: PPUSH
13575: CALL_OW 301
13579: OR
13580: IFFALSE 13457
// if un then
13582: LD_VAR 0 3
13586: IFFALSE 13597
// RemoveUnit ( un ) ;
13588: LD_VAR 0 3
13592: PPUSH
13593: CALL_OW 64
// end ;
13597: PPOPN 3
13599: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
13600: LD_EXP 57
13604: IFFALSE 13720
13606: GO 13608
13608: DISABLE
13609: LD_INT 0
13611: PPUSH
13612: PPUSH
13613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13614: LD_ADDR_VAR 0 2
13618: PUSH
13619: LD_INT 81
13621: PUSH
13622: LD_OWVAR 2
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: PUSH
13631: LD_INT 21
13633: PUSH
13634: LD_INT 1
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: PPUSH
13645: CALL_OW 69
13649: ST_TO_ADDR
// ToLua ( playComputer() ) ;
13650: LD_STRING playComputer()
13652: PPUSH
13653: CALL_OW 559
// if not tmp then
13657: LD_VAR 0 2
13661: NOT
13662: IFFALSE 13666
// exit ;
13664: GO 13720
// for i in tmp do
13666: LD_ADDR_VAR 0 1
13670: PUSH
13671: LD_VAR 0 2
13675: PUSH
13676: FOR_IN
13677: IFFALSE 13718
// for j := 1 to 4 do
13679: LD_ADDR_VAR 0 3
13683: PUSH
13684: DOUBLE
13685: LD_INT 1
13687: DEC
13688: ST_TO_ADDR
13689: LD_INT 4
13691: PUSH
13692: FOR_TO
13693: IFFALSE 13714
// SetSkill ( i , j , 10 ) ;
13695: LD_VAR 0 1
13699: PPUSH
13700: LD_VAR 0 3
13704: PPUSH
13705: LD_INT 10
13707: PPUSH
13708: CALL_OW 237
13712: GO 13692
13714: POP
13715: POP
13716: GO 13676
13718: POP
13719: POP
// end ;
13720: PPOPN 3
13722: END
// every 0 0$1 trigger s30 do var i , tmp ;
13723: LD_EXP 58
13727: IFFALSE 13796
13729: GO 13731
13731: DISABLE
13732: LD_INT 0
13734: PPUSH
13735: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13736: LD_ADDR_VAR 0 2
13740: PUSH
13741: LD_INT 22
13743: PUSH
13744: LD_OWVAR 2
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: PPUSH
13753: CALL_OW 69
13757: ST_TO_ADDR
// if not tmp then
13758: LD_VAR 0 2
13762: NOT
13763: IFFALSE 13767
// exit ;
13765: GO 13796
// for i in tmp do
13767: LD_ADDR_VAR 0 1
13771: PUSH
13772: LD_VAR 0 2
13776: PUSH
13777: FOR_IN
13778: IFFALSE 13794
// SetLives ( i , 300 ) ;
13780: LD_VAR 0 1
13784: PPUSH
13785: LD_INT 300
13787: PPUSH
13788: CALL_OW 234
13792: GO 13777
13794: POP
13795: POP
// end ;
13796: PPOPN 2
13798: END
// every 0 0$1 trigger s60 do var i , tmp ;
13799: LD_EXP 59
13803: IFFALSE 13872
13805: GO 13807
13807: DISABLE
13808: LD_INT 0
13810: PPUSH
13811: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13812: LD_ADDR_VAR 0 2
13816: PUSH
13817: LD_INT 22
13819: PUSH
13820: LD_OWVAR 2
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: PPUSH
13829: CALL_OW 69
13833: ST_TO_ADDR
// if not tmp then
13834: LD_VAR 0 2
13838: NOT
13839: IFFALSE 13843
// exit ;
13841: GO 13872
// for i in tmp do
13843: LD_ADDR_VAR 0 1
13847: PUSH
13848: LD_VAR 0 2
13852: PUSH
13853: FOR_IN
13854: IFFALSE 13870
// SetLives ( i , 600 ) ;
13856: LD_VAR 0 1
13860: PPUSH
13861: LD_INT 600
13863: PPUSH
13864: CALL_OW 234
13868: GO 13853
13870: POP
13871: POP
// end ;
13872: PPOPN 2
13874: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13875: LD_INT 0
13877: PPUSH
// case cmd of 301 :
13878: LD_VAR 0 1
13882: PUSH
13883: LD_INT 301
13885: DOUBLE
13886: EQUAL
13887: IFTRUE 13891
13889: GO 13923
13891: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
13892: LD_VAR 0 6
13896: PPUSH
13897: LD_VAR 0 7
13901: PPUSH
13902: LD_VAR 0 8
13906: PPUSH
13907: LD_VAR 0 4
13911: PPUSH
13912: LD_VAR 0 5
13916: PPUSH
13917: CALL 15124 0 5
13921: GO 14044
13923: LD_INT 302
13925: DOUBLE
13926: EQUAL
13927: IFTRUE 13931
13929: GO 13968
13931: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
13932: LD_VAR 0 6
13936: PPUSH
13937: LD_VAR 0 7
13941: PPUSH
13942: LD_VAR 0 8
13946: PPUSH
13947: LD_VAR 0 9
13951: PPUSH
13952: LD_VAR 0 4
13956: PPUSH
13957: LD_VAR 0 5
13961: PPUSH
13962: CALL 15215 0 6
13966: GO 14044
13968: LD_INT 303
13970: DOUBLE
13971: EQUAL
13972: IFTRUE 13976
13974: GO 14013
13976: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
13977: LD_VAR 0 6
13981: PPUSH
13982: LD_VAR 0 7
13986: PPUSH
13987: LD_VAR 0 8
13991: PPUSH
13992: LD_VAR 0 9
13996: PPUSH
13997: LD_VAR 0 4
14001: PPUSH
14002: LD_VAR 0 5
14006: PPUSH
14007: CALL 14049 0 6
14011: GO 14044
14013: LD_INT 304
14015: DOUBLE
14016: EQUAL
14017: IFTRUE 14021
14019: GO 14043
14021: POP
// hHackTeleport ( unit , x , y ) ; end ;
14022: LD_VAR 0 2
14026: PPUSH
14027: LD_VAR 0 4
14031: PPUSH
14032: LD_VAR 0 5
14036: PPUSH
14037: CALL 15808 0 3
14041: GO 14044
14043: POP
// end ;
14044: LD_VAR 0 12
14048: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14049: LD_INT 0
14051: PPUSH
14052: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14053: LD_VAR 0 1
14057: PUSH
14058: LD_INT 1
14060: LESS
14061: PUSH
14062: LD_VAR 0 1
14066: PUSH
14067: LD_INT 3
14069: GREATER
14070: OR
14071: PUSH
14072: LD_VAR 0 5
14076: PPUSH
14077: LD_VAR 0 6
14081: PPUSH
14082: CALL_OW 428
14086: OR
14087: IFFALSE 14091
// exit ;
14089: GO 14811
// uc_side := your_side ;
14091: LD_ADDR_OWVAR 20
14095: PUSH
14096: LD_OWVAR 2
14100: ST_TO_ADDR
// uc_nation := nation ;
14101: LD_ADDR_OWVAR 21
14105: PUSH
14106: LD_VAR 0 1
14110: ST_TO_ADDR
// bc_level = 1 ;
14111: LD_ADDR_OWVAR 43
14115: PUSH
14116: LD_INT 1
14118: ST_TO_ADDR
// case btype of 1 :
14119: LD_VAR 0 2
14123: PUSH
14124: LD_INT 1
14126: DOUBLE
14127: EQUAL
14128: IFTRUE 14132
14130: GO 14143
14132: POP
// bc_type := b_depot ; 2 :
14133: LD_ADDR_OWVAR 42
14137: PUSH
14138: LD_INT 0
14140: ST_TO_ADDR
14141: GO 14755
14143: LD_INT 2
14145: DOUBLE
14146: EQUAL
14147: IFTRUE 14151
14149: GO 14162
14151: POP
// bc_type := b_warehouse ; 3 :
14152: LD_ADDR_OWVAR 42
14156: PUSH
14157: LD_INT 1
14159: ST_TO_ADDR
14160: GO 14755
14162: LD_INT 3
14164: DOUBLE
14165: EQUAL
14166: IFTRUE 14170
14168: GO 14181
14170: POP
// bc_type := b_lab ; 4 .. 9 :
14171: LD_ADDR_OWVAR 42
14175: PUSH
14176: LD_INT 6
14178: ST_TO_ADDR
14179: GO 14755
14181: LD_INT 4
14183: DOUBLE
14184: GREATEREQUAL
14185: IFFALSE 14193
14187: LD_INT 9
14189: DOUBLE
14190: LESSEQUAL
14191: IFTRUE 14195
14193: GO 14247
14195: POP
// begin bc_type := b_lab_half ;
14196: LD_ADDR_OWVAR 42
14200: PUSH
14201: LD_INT 7
14203: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14204: LD_ADDR_OWVAR 44
14208: PUSH
14209: LD_INT 10
14211: PUSH
14212: LD_INT 11
14214: PUSH
14215: LD_INT 12
14217: PUSH
14218: LD_INT 15
14220: PUSH
14221: LD_INT 14
14223: PUSH
14224: LD_INT 13
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: PUSH
14235: LD_VAR 0 2
14239: PUSH
14240: LD_INT 3
14242: MINUS
14243: ARRAY
14244: ST_TO_ADDR
// end ; 10 .. 13 :
14245: GO 14755
14247: LD_INT 10
14249: DOUBLE
14250: GREATEREQUAL
14251: IFFALSE 14259
14253: LD_INT 13
14255: DOUBLE
14256: LESSEQUAL
14257: IFTRUE 14261
14259: GO 14338
14261: POP
// begin bc_type := b_lab_full ;
14262: LD_ADDR_OWVAR 42
14266: PUSH
14267: LD_INT 8
14269: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14270: LD_ADDR_OWVAR 44
14274: PUSH
14275: LD_INT 10
14277: PUSH
14278: LD_INT 12
14280: PUSH
14281: LD_INT 14
14283: PUSH
14284: LD_INT 13
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: PUSH
14293: LD_VAR 0 2
14297: PUSH
14298: LD_INT 9
14300: MINUS
14301: ARRAY
14302: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14303: LD_ADDR_OWVAR 45
14307: PUSH
14308: LD_INT 11
14310: PUSH
14311: LD_INT 15
14313: PUSH
14314: LD_INT 12
14316: PUSH
14317: LD_INT 15
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: PUSH
14326: LD_VAR 0 2
14330: PUSH
14331: LD_INT 9
14333: MINUS
14334: ARRAY
14335: ST_TO_ADDR
// end ; 14 :
14336: GO 14755
14338: LD_INT 14
14340: DOUBLE
14341: EQUAL
14342: IFTRUE 14346
14344: GO 14357
14346: POP
// bc_type := b_workshop ; 15 :
14347: LD_ADDR_OWVAR 42
14351: PUSH
14352: LD_INT 2
14354: ST_TO_ADDR
14355: GO 14755
14357: LD_INT 15
14359: DOUBLE
14360: EQUAL
14361: IFTRUE 14365
14363: GO 14376
14365: POP
// bc_type := b_factory ; 16 :
14366: LD_ADDR_OWVAR 42
14370: PUSH
14371: LD_INT 3
14373: ST_TO_ADDR
14374: GO 14755
14376: LD_INT 16
14378: DOUBLE
14379: EQUAL
14380: IFTRUE 14384
14382: GO 14395
14384: POP
// bc_type := b_ext_gun ; 17 :
14385: LD_ADDR_OWVAR 42
14389: PUSH
14390: LD_INT 17
14392: ST_TO_ADDR
14393: GO 14755
14395: LD_INT 17
14397: DOUBLE
14398: EQUAL
14399: IFTRUE 14403
14401: GO 14431
14403: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14404: LD_ADDR_OWVAR 42
14408: PUSH
14409: LD_INT 19
14411: PUSH
14412: LD_INT 23
14414: PUSH
14415: LD_INT 19
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: LIST
14422: PUSH
14423: LD_VAR 0 1
14427: ARRAY
14428: ST_TO_ADDR
14429: GO 14755
14431: LD_INT 18
14433: DOUBLE
14434: EQUAL
14435: IFTRUE 14439
14437: GO 14450
14439: POP
// bc_type := b_ext_radar ; 19 :
14440: LD_ADDR_OWVAR 42
14444: PUSH
14445: LD_INT 20
14447: ST_TO_ADDR
14448: GO 14755
14450: LD_INT 19
14452: DOUBLE
14453: EQUAL
14454: IFTRUE 14458
14456: GO 14469
14458: POP
// bc_type := b_ext_radio ; 20 :
14459: LD_ADDR_OWVAR 42
14463: PUSH
14464: LD_INT 22
14466: ST_TO_ADDR
14467: GO 14755
14469: LD_INT 20
14471: DOUBLE
14472: EQUAL
14473: IFTRUE 14477
14475: GO 14488
14477: POP
// bc_type := b_ext_siberium ; 21 :
14478: LD_ADDR_OWVAR 42
14482: PUSH
14483: LD_INT 21
14485: ST_TO_ADDR
14486: GO 14755
14488: LD_INT 21
14490: DOUBLE
14491: EQUAL
14492: IFTRUE 14496
14494: GO 14507
14496: POP
// bc_type := b_ext_computer ; 22 :
14497: LD_ADDR_OWVAR 42
14501: PUSH
14502: LD_INT 24
14504: ST_TO_ADDR
14505: GO 14755
14507: LD_INT 22
14509: DOUBLE
14510: EQUAL
14511: IFTRUE 14515
14513: GO 14526
14515: POP
// bc_type := b_ext_track ; 23 :
14516: LD_ADDR_OWVAR 42
14520: PUSH
14521: LD_INT 16
14523: ST_TO_ADDR
14524: GO 14755
14526: LD_INT 23
14528: DOUBLE
14529: EQUAL
14530: IFTRUE 14534
14532: GO 14545
14534: POP
// bc_type := b_ext_laser ; 24 :
14535: LD_ADDR_OWVAR 42
14539: PUSH
14540: LD_INT 25
14542: ST_TO_ADDR
14543: GO 14755
14545: LD_INT 24
14547: DOUBLE
14548: EQUAL
14549: IFTRUE 14553
14551: GO 14564
14553: POP
// bc_type := b_control_tower ; 25 :
14554: LD_ADDR_OWVAR 42
14558: PUSH
14559: LD_INT 36
14561: ST_TO_ADDR
14562: GO 14755
14564: LD_INT 25
14566: DOUBLE
14567: EQUAL
14568: IFTRUE 14572
14570: GO 14583
14572: POP
// bc_type := b_breastwork ; 26 :
14573: LD_ADDR_OWVAR 42
14577: PUSH
14578: LD_INT 31
14580: ST_TO_ADDR
14581: GO 14755
14583: LD_INT 26
14585: DOUBLE
14586: EQUAL
14587: IFTRUE 14591
14589: GO 14602
14591: POP
// bc_type := b_bunker ; 27 :
14592: LD_ADDR_OWVAR 42
14596: PUSH
14597: LD_INT 32
14599: ST_TO_ADDR
14600: GO 14755
14602: LD_INT 27
14604: DOUBLE
14605: EQUAL
14606: IFTRUE 14610
14608: GO 14621
14610: POP
// bc_type := b_turret ; 28 :
14611: LD_ADDR_OWVAR 42
14615: PUSH
14616: LD_INT 33
14618: ST_TO_ADDR
14619: GO 14755
14621: LD_INT 28
14623: DOUBLE
14624: EQUAL
14625: IFTRUE 14629
14627: GO 14640
14629: POP
// bc_type := b_armoury ; 29 :
14630: LD_ADDR_OWVAR 42
14634: PUSH
14635: LD_INT 4
14637: ST_TO_ADDR
14638: GO 14755
14640: LD_INT 29
14642: DOUBLE
14643: EQUAL
14644: IFTRUE 14648
14646: GO 14659
14648: POP
// bc_type := b_barracks ; 30 :
14649: LD_ADDR_OWVAR 42
14653: PUSH
14654: LD_INT 5
14656: ST_TO_ADDR
14657: GO 14755
14659: LD_INT 30
14661: DOUBLE
14662: EQUAL
14663: IFTRUE 14667
14665: GO 14678
14667: POP
// bc_type := b_solar_power ; 31 :
14668: LD_ADDR_OWVAR 42
14672: PUSH
14673: LD_INT 27
14675: ST_TO_ADDR
14676: GO 14755
14678: LD_INT 31
14680: DOUBLE
14681: EQUAL
14682: IFTRUE 14686
14684: GO 14697
14686: POP
// bc_type := b_oil_power ; 32 :
14687: LD_ADDR_OWVAR 42
14691: PUSH
14692: LD_INT 26
14694: ST_TO_ADDR
14695: GO 14755
14697: LD_INT 32
14699: DOUBLE
14700: EQUAL
14701: IFTRUE 14705
14703: GO 14716
14705: POP
// bc_type := b_siberite_power ; 33 :
14706: LD_ADDR_OWVAR 42
14710: PUSH
14711: LD_INT 28
14713: ST_TO_ADDR
14714: GO 14755
14716: LD_INT 33
14718: DOUBLE
14719: EQUAL
14720: IFTRUE 14724
14722: GO 14735
14724: POP
// bc_type := b_oil_mine ; 34 :
14725: LD_ADDR_OWVAR 42
14729: PUSH
14730: LD_INT 29
14732: ST_TO_ADDR
14733: GO 14755
14735: LD_INT 34
14737: DOUBLE
14738: EQUAL
14739: IFTRUE 14743
14741: GO 14754
14743: POP
// bc_type := b_siberite_mine ; end ;
14744: LD_ADDR_OWVAR 42
14748: PUSH
14749: LD_INT 30
14751: ST_TO_ADDR
14752: GO 14755
14754: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
14755: LD_ADDR_VAR 0 8
14759: PUSH
14760: LD_VAR 0 5
14764: PPUSH
14765: LD_VAR 0 6
14769: PPUSH
14770: LD_VAR 0 3
14774: PPUSH
14775: CALL_OW 47
14779: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
14780: LD_OWVAR 42
14784: PUSH
14785: LD_INT 32
14787: PUSH
14788: LD_INT 33
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: IN
14795: IFFALSE 14811
// PlaceWeaponTurret ( b , weapon ) ;
14797: LD_VAR 0 8
14801: PPUSH
14802: LD_VAR 0 4
14806: PPUSH
14807: CALL_OW 431
// end ;
14811: LD_VAR 0 7
14815: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
14816: LD_INT 0
14818: PPUSH
14819: PPUSH
14820: PPUSH
14821: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14822: LD_ADDR_VAR 0 4
14826: PUSH
14827: LD_INT 22
14829: PUSH
14830: LD_OWVAR 2
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PUSH
14839: LD_INT 2
14841: PUSH
14842: LD_INT 30
14844: PUSH
14845: LD_INT 0
14847: PUSH
14848: EMPTY
14849: LIST
14850: LIST
14851: PUSH
14852: LD_INT 30
14854: PUSH
14855: LD_INT 1
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: LIST
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PPUSH
14871: CALL_OW 69
14875: ST_TO_ADDR
// if not tmp then
14876: LD_VAR 0 4
14880: NOT
14881: IFFALSE 14885
// exit ;
14883: GO 14944
// for i in tmp do
14885: LD_ADDR_VAR 0 2
14889: PUSH
14890: LD_VAR 0 4
14894: PUSH
14895: FOR_IN
14896: IFFALSE 14942
// for j = 1 to 3 do
14898: LD_ADDR_VAR 0 3
14902: PUSH
14903: DOUBLE
14904: LD_INT 1
14906: DEC
14907: ST_TO_ADDR
14908: LD_INT 3
14910: PUSH
14911: FOR_TO
14912: IFFALSE 14938
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14914: LD_VAR 0 2
14918: PPUSH
14919: CALL_OW 274
14923: PPUSH
14924: LD_VAR 0 3
14928: PPUSH
14929: LD_INT 99999
14931: PPUSH
14932: CALL_OW 277
14936: GO 14911
14938: POP
14939: POP
14940: GO 14895
14942: POP
14943: POP
// end ;
14944: LD_VAR 0 1
14948: RET
// export function hHackSetLevel10 ; var i , j ; begin
14949: LD_INT 0
14951: PPUSH
14952: PPUSH
14953: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14954: LD_ADDR_VAR 0 2
14958: PUSH
14959: LD_INT 21
14961: PUSH
14962: LD_INT 1
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: PPUSH
14969: CALL_OW 69
14973: PUSH
14974: FOR_IN
14975: IFFALSE 15027
// if IsSelected ( i ) then
14977: LD_VAR 0 2
14981: PPUSH
14982: CALL_OW 306
14986: IFFALSE 15025
// begin for j := 1 to 4 do
14988: LD_ADDR_VAR 0 3
14992: PUSH
14993: DOUBLE
14994: LD_INT 1
14996: DEC
14997: ST_TO_ADDR
14998: LD_INT 4
15000: PUSH
15001: FOR_TO
15002: IFFALSE 15023
// SetSkill ( i , j , 10 ) ;
15004: LD_VAR 0 2
15008: PPUSH
15009: LD_VAR 0 3
15013: PPUSH
15014: LD_INT 10
15016: PPUSH
15017: CALL_OW 237
15021: GO 15001
15023: POP
15024: POP
// end ;
15025: GO 14974
15027: POP
15028: POP
// end ;
15029: LD_VAR 0 1
15033: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15034: LD_INT 0
15036: PPUSH
15037: PPUSH
15038: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15039: LD_ADDR_VAR 0 2
15043: PUSH
15044: LD_INT 22
15046: PUSH
15047: LD_OWVAR 2
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: PUSH
15056: LD_INT 21
15058: PUSH
15059: LD_INT 1
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: PPUSH
15070: CALL_OW 69
15074: PUSH
15075: FOR_IN
15076: IFFALSE 15117
// begin for j := 1 to 4 do
15078: LD_ADDR_VAR 0 3
15082: PUSH
15083: DOUBLE
15084: LD_INT 1
15086: DEC
15087: ST_TO_ADDR
15088: LD_INT 4
15090: PUSH
15091: FOR_TO
15092: IFFALSE 15113
// SetSkill ( i , j , 10 ) ;
15094: LD_VAR 0 2
15098: PPUSH
15099: LD_VAR 0 3
15103: PPUSH
15104: LD_INT 10
15106: PPUSH
15107: CALL_OW 237
15111: GO 15091
15113: POP
15114: POP
// end ;
15115: GO 15075
15117: POP
15118: POP
// end ;
15119: LD_VAR 0 1
15123: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15124: LD_INT 0
15126: PPUSH
// uc_side := your_side ;
15127: LD_ADDR_OWVAR 20
15131: PUSH
15132: LD_OWVAR 2
15136: ST_TO_ADDR
// uc_nation := nation ;
15137: LD_ADDR_OWVAR 21
15141: PUSH
15142: LD_VAR 0 1
15146: ST_TO_ADDR
// InitHc ;
15147: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15151: LD_INT 0
15153: PPUSH
15154: LD_VAR 0 2
15158: PPUSH
15159: LD_VAR 0 3
15163: PPUSH
15164: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15168: LD_VAR 0 4
15172: PPUSH
15173: LD_VAR 0 5
15177: PPUSH
15178: CALL_OW 428
15182: PUSH
15183: LD_INT 0
15185: EQUAL
15186: IFFALSE 15210
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15188: CALL_OW 44
15192: PPUSH
15193: LD_VAR 0 4
15197: PPUSH
15198: LD_VAR 0 5
15202: PPUSH
15203: LD_INT 1
15205: PPUSH
15206: CALL_OW 48
// end ;
15210: LD_VAR 0 6
15214: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15215: LD_INT 0
15217: PPUSH
15218: PPUSH
// uc_side := your_side ;
15219: LD_ADDR_OWVAR 20
15223: PUSH
15224: LD_OWVAR 2
15228: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15229: LD_VAR 0 1
15233: PUSH
15234: LD_INT 1
15236: PUSH
15237: LD_INT 2
15239: PUSH
15240: LD_INT 3
15242: PUSH
15243: LD_INT 4
15245: PUSH
15246: LD_INT 5
15248: PUSH
15249: EMPTY
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: IN
15256: IFFALSE 15268
// uc_nation := nation_american else
15258: LD_ADDR_OWVAR 21
15262: PUSH
15263: LD_INT 1
15265: ST_TO_ADDR
15266: GO 15311
// if chassis in [ 11 , 12 , 13 , 14 ] then
15268: LD_VAR 0 1
15272: PUSH
15273: LD_INT 11
15275: PUSH
15276: LD_INT 12
15278: PUSH
15279: LD_INT 13
15281: PUSH
15282: LD_INT 14
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: IN
15291: IFFALSE 15303
// uc_nation := nation_arabian else
15293: LD_ADDR_OWVAR 21
15297: PUSH
15298: LD_INT 2
15300: ST_TO_ADDR
15301: GO 15311
// uc_nation := nation_russian ;
15303: LD_ADDR_OWVAR 21
15307: PUSH
15308: LD_INT 3
15310: ST_TO_ADDR
// vc_chassis := chassis ;
15311: LD_ADDR_OWVAR 37
15315: PUSH
15316: LD_VAR 0 1
15320: ST_TO_ADDR
// vc_engine := engine ;
15321: LD_ADDR_OWVAR 39
15325: PUSH
15326: LD_VAR 0 2
15330: ST_TO_ADDR
// vc_control := control ;
15331: LD_ADDR_OWVAR 38
15335: PUSH
15336: LD_VAR 0 3
15340: ST_TO_ADDR
// vc_weapon := weapon ;
15341: LD_ADDR_OWVAR 40
15345: PUSH
15346: LD_VAR 0 4
15350: ST_TO_ADDR
// un := CreateVehicle ;
15351: LD_ADDR_VAR 0 8
15355: PUSH
15356: CALL_OW 45
15360: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15361: LD_VAR 0 8
15365: PPUSH
15366: LD_INT 0
15368: PPUSH
15369: LD_INT 5
15371: PPUSH
15372: CALL_OW 12
15376: PPUSH
15377: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15381: LD_VAR 0 8
15385: PPUSH
15386: LD_VAR 0 5
15390: PPUSH
15391: LD_VAR 0 6
15395: PPUSH
15396: LD_INT 1
15398: PPUSH
15399: CALL_OW 48
// end ;
15403: LD_VAR 0 7
15407: RET
// export hInvincible ; every 1 do
15408: GO 15410
15410: DISABLE
// hInvincible := [ ] ;
15411: LD_ADDR_EXP 60
15415: PUSH
15416: EMPTY
15417: ST_TO_ADDR
15418: END
// every 10 do var i ;
15419: GO 15421
15421: DISABLE
15422: LD_INT 0
15424: PPUSH
// begin enable ;
15425: ENABLE
// if not hInvincible then
15426: LD_EXP 60
15430: NOT
15431: IFFALSE 15435
// exit ;
15433: GO 15479
// for i in hInvincible do
15435: LD_ADDR_VAR 0 1
15439: PUSH
15440: LD_EXP 60
15444: PUSH
15445: FOR_IN
15446: IFFALSE 15477
// if GetLives ( i ) < 1000 then
15448: LD_VAR 0 1
15452: PPUSH
15453: CALL_OW 256
15457: PUSH
15458: LD_INT 1000
15460: LESS
15461: IFFALSE 15475
// SetLives ( i , 1000 ) ;
15463: LD_VAR 0 1
15467: PPUSH
15468: LD_INT 1000
15470: PPUSH
15471: CALL_OW 234
15475: GO 15445
15477: POP
15478: POP
// end ;
15479: PPOPN 1
15481: END
// export function hHackInvincible ; var i ; begin
15482: LD_INT 0
15484: PPUSH
15485: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15486: LD_ADDR_VAR 0 2
15490: PUSH
15491: LD_INT 2
15493: PUSH
15494: LD_INT 21
15496: PUSH
15497: LD_INT 1
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PUSH
15504: LD_INT 21
15506: PUSH
15507: LD_INT 2
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: LIST
15518: PPUSH
15519: CALL_OW 69
15523: PUSH
15524: FOR_IN
15525: IFFALSE 15586
// if IsSelected ( i ) then
15527: LD_VAR 0 2
15531: PPUSH
15532: CALL_OW 306
15536: IFFALSE 15584
// begin if i in hInvincible then
15538: LD_VAR 0 2
15542: PUSH
15543: LD_EXP 60
15547: IN
15548: IFFALSE 15568
// hInvincible := hInvincible diff i else
15550: LD_ADDR_EXP 60
15554: PUSH
15555: LD_EXP 60
15559: PUSH
15560: LD_VAR 0 2
15564: DIFF
15565: ST_TO_ADDR
15566: GO 15584
// hInvincible := hInvincible union i ;
15568: LD_ADDR_EXP 60
15572: PUSH
15573: LD_EXP 60
15577: PUSH
15578: LD_VAR 0 2
15582: UNION
15583: ST_TO_ADDR
// end ;
15584: GO 15524
15586: POP
15587: POP
// end ;
15588: LD_VAR 0 1
15592: RET
// export function hHackInvisible ; var i , j ; begin
15593: LD_INT 0
15595: PPUSH
15596: PPUSH
15597: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15598: LD_ADDR_VAR 0 2
15602: PUSH
15603: LD_INT 21
15605: PUSH
15606: LD_INT 1
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PPUSH
15613: CALL_OW 69
15617: PUSH
15618: FOR_IN
15619: IFFALSE 15643
// if IsSelected ( i ) then
15621: LD_VAR 0 2
15625: PPUSH
15626: CALL_OW 306
15630: IFFALSE 15641
// ComForceInvisible ( i ) ;
15632: LD_VAR 0 2
15636: PPUSH
15637: CALL_OW 496
15641: GO 15618
15643: POP
15644: POP
// end ;
15645: LD_VAR 0 1
15649: RET
// export function hHackChangeYourSide ; begin
15650: LD_INT 0
15652: PPUSH
// if your_side = 8 then
15653: LD_OWVAR 2
15657: PUSH
15658: LD_INT 8
15660: EQUAL
15661: IFFALSE 15673
// your_side := 0 else
15663: LD_ADDR_OWVAR 2
15667: PUSH
15668: LD_INT 0
15670: ST_TO_ADDR
15671: GO 15687
// your_side := your_side + 1 ;
15673: LD_ADDR_OWVAR 2
15677: PUSH
15678: LD_OWVAR 2
15682: PUSH
15683: LD_INT 1
15685: PLUS
15686: ST_TO_ADDR
// end ;
15687: LD_VAR 0 1
15691: RET
// export function hHackChangeUnitSide ; var i , j ; begin
15692: LD_INT 0
15694: PPUSH
15695: PPUSH
15696: PPUSH
// for i in all_units do
15697: LD_ADDR_VAR 0 2
15701: PUSH
15702: LD_OWVAR 3
15706: PUSH
15707: FOR_IN
15708: IFFALSE 15786
// if IsSelected ( i ) then
15710: LD_VAR 0 2
15714: PPUSH
15715: CALL_OW 306
15719: IFFALSE 15784
// begin j := GetSide ( i ) ;
15721: LD_ADDR_VAR 0 3
15725: PUSH
15726: LD_VAR 0 2
15730: PPUSH
15731: CALL_OW 255
15735: ST_TO_ADDR
// if j = 8 then
15736: LD_VAR 0 3
15740: PUSH
15741: LD_INT 8
15743: EQUAL
15744: IFFALSE 15756
// j := 0 else
15746: LD_ADDR_VAR 0 3
15750: PUSH
15751: LD_INT 0
15753: ST_TO_ADDR
15754: GO 15770
// j := j + 1 ;
15756: LD_ADDR_VAR 0 3
15760: PUSH
15761: LD_VAR 0 3
15765: PUSH
15766: LD_INT 1
15768: PLUS
15769: ST_TO_ADDR
// SetSide ( i , j ) ;
15770: LD_VAR 0 2
15774: PPUSH
15775: LD_VAR 0 3
15779: PPUSH
15780: CALL_OW 235
// end ;
15784: GO 15707
15786: POP
15787: POP
// end ;
15788: LD_VAR 0 1
15792: RET
// export function hHackFog ; begin
15793: LD_INT 0
15795: PPUSH
// FogOff ( true ) ;
15796: LD_INT 1
15798: PPUSH
15799: CALL_OW 344
// end ;
15803: LD_VAR 0 1
15807: RET
// export function hHackTeleport ( unit , x , y ) ; begin
15808: LD_INT 0
15810: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
15811: LD_VAR 0 1
15815: PPUSH
15816: LD_VAR 0 2
15820: PPUSH
15821: LD_VAR 0 3
15825: PPUSH
15826: LD_INT 1
15828: PPUSH
15829: LD_INT 1
15831: PPUSH
15832: CALL_OW 483
// CenterOnXY ( x , y ) ;
15836: LD_VAR 0 2
15840: PPUSH
15841: LD_VAR 0 3
15845: PPUSH
15846: CALL_OW 84
// end ;
15850: LD_VAR 0 4
15854: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
15855: LD_INT 0
15857: PPUSH
15858: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
15859: LD_VAR 0 1
15863: NOT
15864: PUSH
15865: LD_VAR 0 2
15869: PPUSH
15870: LD_VAR 0 3
15874: PPUSH
15875: CALL_OW 488
15879: NOT
15880: OR
15881: PUSH
15882: LD_VAR 0 1
15886: PPUSH
15887: CALL_OW 266
15891: PUSH
15892: LD_INT 3
15894: NONEQUAL
15895: PUSH
15896: LD_VAR 0 1
15900: PPUSH
15901: CALL_OW 247
15905: PUSH
15906: LD_INT 1
15908: EQUAL
15909: NOT
15910: AND
15911: OR
15912: IFFALSE 15916
// exit ;
15914: GO 16065
// if GetType ( factory ) = unit_human then
15916: LD_VAR 0 1
15920: PPUSH
15921: CALL_OW 247
15925: PUSH
15926: LD_INT 1
15928: EQUAL
15929: IFFALSE 15946
// factory := IsInUnit ( factory ) ;
15931: LD_ADDR_VAR 0 1
15935: PUSH
15936: LD_VAR 0 1
15940: PPUSH
15941: CALL_OW 310
15945: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
15946: LD_VAR 0 1
15950: PPUSH
15951: CALL_OW 266
15955: PUSH
15956: LD_INT 3
15958: NONEQUAL
15959: IFFALSE 15963
// exit ;
15961: GO 16065
// if HexInfo ( x , y ) = factory then
15963: LD_VAR 0 2
15967: PPUSH
15968: LD_VAR 0 3
15972: PPUSH
15973: CALL_OW 428
15977: PUSH
15978: LD_VAR 0 1
15982: EQUAL
15983: IFFALSE 16010
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
15985: LD_ADDR_EXP 61
15989: PUSH
15990: LD_EXP 61
15994: PPUSH
15995: LD_VAR 0 1
15999: PPUSH
16000: LD_INT 0
16002: PPUSH
16003: CALL_OW 1
16007: ST_TO_ADDR
16008: GO 16061
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
16010: LD_ADDR_EXP 61
16014: PUSH
16015: LD_EXP 61
16019: PPUSH
16020: LD_VAR 0 1
16024: PPUSH
16025: LD_VAR 0 1
16029: PPUSH
16030: CALL_OW 255
16034: PUSH
16035: LD_VAR 0 1
16039: PUSH
16040: LD_VAR 0 2
16044: PUSH
16045: LD_VAR 0 3
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: PPUSH
16056: CALL_OW 1
16060: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16061: CALL 16070 0 0
// end ;
16065: LD_VAR 0 4
16069: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16070: LD_INT 0
16072: PPUSH
16073: PPUSH
16074: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16075: LD_STRING resetFactoryWaypoint();
16077: PPUSH
16078: CALL_OW 559
// if factoryWaypoints then
16082: LD_EXP 61
16086: IFFALSE 16212
// begin list := PrepareArray ( factoryWaypoints ) ;
16088: LD_ADDR_VAR 0 3
16092: PUSH
16093: LD_EXP 61
16097: PPUSH
16098: CALL 62903 0 1
16102: ST_TO_ADDR
// for i := 1 to list do
16103: LD_ADDR_VAR 0 2
16107: PUSH
16108: DOUBLE
16109: LD_INT 1
16111: DEC
16112: ST_TO_ADDR
16113: LD_VAR 0 3
16117: PUSH
16118: FOR_TO
16119: IFFALSE 16210
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16121: LD_STRING setFactoryWaypointXY(
16123: PUSH
16124: LD_VAR 0 3
16128: PUSH
16129: LD_VAR 0 2
16133: ARRAY
16134: PUSH
16135: LD_INT 1
16137: ARRAY
16138: STR
16139: PUSH
16140: LD_STRING ,
16142: STR
16143: PUSH
16144: LD_VAR 0 3
16148: PUSH
16149: LD_VAR 0 2
16153: ARRAY
16154: PUSH
16155: LD_INT 2
16157: ARRAY
16158: STR
16159: PUSH
16160: LD_STRING ,
16162: STR
16163: PUSH
16164: LD_VAR 0 3
16168: PUSH
16169: LD_VAR 0 2
16173: ARRAY
16174: PUSH
16175: LD_INT 3
16177: ARRAY
16178: STR
16179: PUSH
16180: LD_STRING ,
16182: STR
16183: PUSH
16184: LD_VAR 0 3
16188: PUSH
16189: LD_VAR 0 2
16193: ARRAY
16194: PUSH
16195: LD_INT 4
16197: ARRAY
16198: STR
16199: PUSH
16200: LD_STRING )
16202: STR
16203: PPUSH
16204: CALL_OW 559
16208: GO 16118
16210: POP
16211: POP
// end ; end ;
16212: LD_VAR 0 1
16216: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16217: LD_INT 0
16219: PPUSH
// if HexInfo ( x , y ) = warehouse then
16220: LD_VAR 0 2
16224: PPUSH
16225: LD_VAR 0 3
16229: PPUSH
16230: CALL_OW 428
16234: PUSH
16235: LD_VAR 0 1
16239: EQUAL
16240: IFFALSE 16267
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16242: LD_ADDR_EXP 62
16246: PUSH
16247: LD_EXP 62
16251: PPUSH
16252: LD_VAR 0 1
16256: PPUSH
16257: LD_INT 0
16259: PPUSH
16260: CALL_OW 1
16264: ST_TO_ADDR
16265: GO 16318
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16267: LD_ADDR_EXP 62
16271: PUSH
16272: LD_EXP 62
16276: PPUSH
16277: LD_VAR 0 1
16281: PPUSH
16282: LD_VAR 0 1
16286: PPUSH
16287: CALL_OW 255
16291: PUSH
16292: LD_VAR 0 1
16296: PUSH
16297: LD_VAR 0 2
16301: PUSH
16302: LD_VAR 0 3
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: PPUSH
16313: CALL_OW 1
16317: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16318: CALL 16327 0 0
// end ;
16322: LD_VAR 0 4
16326: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16327: LD_INT 0
16329: PPUSH
16330: PPUSH
16331: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16332: LD_STRING resetWarehouseGatheringPoints();
16334: PPUSH
16335: CALL_OW 559
// if warehouseGatheringPoints then
16339: LD_EXP 62
16343: IFFALSE 16469
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16345: LD_ADDR_VAR 0 3
16349: PUSH
16350: LD_EXP 62
16354: PPUSH
16355: CALL 62903 0 1
16359: ST_TO_ADDR
// for i := 1 to list do
16360: LD_ADDR_VAR 0 2
16364: PUSH
16365: DOUBLE
16366: LD_INT 1
16368: DEC
16369: ST_TO_ADDR
16370: LD_VAR 0 3
16374: PUSH
16375: FOR_TO
16376: IFFALSE 16467
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16378: LD_STRING setWarehouseGatheringPointXY(
16380: PUSH
16381: LD_VAR 0 3
16385: PUSH
16386: LD_VAR 0 2
16390: ARRAY
16391: PUSH
16392: LD_INT 1
16394: ARRAY
16395: STR
16396: PUSH
16397: LD_STRING ,
16399: STR
16400: PUSH
16401: LD_VAR 0 3
16405: PUSH
16406: LD_VAR 0 2
16410: ARRAY
16411: PUSH
16412: LD_INT 2
16414: ARRAY
16415: STR
16416: PUSH
16417: LD_STRING ,
16419: STR
16420: PUSH
16421: LD_VAR 0 3
16425: PUSH
16426: LD_VAR 0 2
16430: ARRAY
16431: PUSH
16432: LD_INT 3
16434: ARRAY
16435: STR
16436: PUSH
16437: LD_STRING ,
16439: STR
16440: PUSH
16441: LD_VAR 0 3
16445: PUSH
16446: LD_VAR 0 2
16450: ARRAY
16451: PUSH
16452: LD_INT 4
16454: ARRAY
16455: STR
16456: PUSH
16457: LD_STRING )
16459: STR
16460: PPUSH
16461: CALL_OW 559
16465: GO 16375
16467: POP
16468: POP
// end ; end ;
16469: LD_VAR 0 1
16473: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
16474: LD_EXP 62
16478: IFFALSE 17163
16480: GO 16482
16482: DISABLE
16483: LD_INT 0
16485: PPUSH
16486: PPUSH
16487: PPUSH
16488: PPUSH
16489: PPUSH
16490: PPUSH
16491: PPUSH
16492: PPUSH
16493: PPUSH
// begin enable ;
16494: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
16495: LD_ADDR_VAR 0 3
16499: PUSH
16500: LD_EXP 62
16504: PPUSH
16505: CALL 62903 0 1
16509: ST_TO_ADDR
// if not list then
16510: LD_VAR 0 3
16514: NOT
16515: IFFALSE 16519
// exit ;
16517: GO 17163
// for i := 1 to list do
16519: LD_ADDR_VAR 0 1
16523: PUSH
16524: DOUBLE
16525: LD_INT 1
16527: DEC
16528: ST_TO_ADDR
16529: LD_VAR 0 3
16533: PUSH
16534: FOR_TO
16535: IFFALSE 17161
// begin depot := list [ i ] [ 2 ] ;
16537: LD_ADDR_VAR 0 8
16541: PUSH
16542: LD_VAR 0 3
16546: PUSH
16547: LD_VAR 0 1
16551: ARRAY
16552: PUSH
16553: LD_INT 2
16555: ARRAY
16556: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
16557: LD_ADDR_VAR 0 5
16561: PUSH
16562: LD_VAR 0 3
16566: PUSH
16567: LD_VAR 0 1
16571: ARRAY
16572: PUSH
16573: LD_INT 1
16575: ARRAY
16576: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
16577: LD_VAR 0 8
16581: PPUSH
16582: CALL_OW 301
16586: PUSH
16587: LD_VAR 0 5
16591: PUSH
16592: LD_VAR 0 8
16596: PPUSH
16597: CALL_OW 255
16601: NONEQUAL
16602: OR
16603: IFFALSE 16632
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
16605: LD_ADDR_EXP 62
16609: PUSH
16610: LD_EXP 62
16614: PPUSH
16615: LD_VAR 0 8
16619: PPUSH
16620: LD_INT 0
16622: PPUSH
16623: CALL_OW 1
16627: ST_TO_ADDR
// exit ;
16628: POP
16629: POP
16630: GO 17163
// end ; x := list [ i ] [ 3 ] ;
16632: LD_ADDR_VAR 0 6
16636: PUSH
16637: LD_VAR 0 3
16641: PUSH
16642: LD_VAR 0 1
16646: ARRAY
16647: PUSH
16648: LD_INT 3
16650: ARRAY
16651: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
16652: LD_ADDR_VAR 0 7
16656: PUSH
16657: LD_VAR 0 3
16661: PUSH
16662: LD_VAR 0 1
16666: ARRAY
16667: PUSH
16668: LD_INT 4
16670: ARRAY
16671: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
16672: LD_ADDR_VAR 0 9
16676: PUSH
16677: LD_VAR 0 6
16681: PPUSH
16682: LD_VAR 0 7
16686: PPUSH
16687: LD_INT 16
16689: PPUSH
16690: CALL 61491 0 3
16694: ST_TO_ADDR
// if not cratesNearbyPoint then
16695: LD_VAR 0 9
16699: NOT
16700: IFFALSE 16706
// exit ;
16702: POP
16703: POP
16704: GO 17163
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
16706: LD_ADDR_VAR 0 4
16710: PUSH
16711: LD_INT 22
16713: PUSH
16714: LD_VAR 0 5
16718: PUSH
16719: EMPTY
16720: LIST
16721: LIST
16722: PUSH
16723: LD_INT 3
16725: PUSH
16726: LD_INT 60
16728: PUSH
16729: EMPTY
16730: LIST
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PUSH
16736: LD_INT 91
16738: PUSH
16739: LD_VAR 0 8
16743: PUSH
16744: LD_INT 6
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: LIST
16751: PUSH
16752: LD_INT 2
16754: PUSH
16755: LD_INT 25
16757: PUSH
16758: LD_INT 2
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 25
16767: PUSH
16768: LD_INT 16
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: LIST
16779: PUSH
16780: EMPTY
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: PPUSH
16786: CALL_OW 69
16790: PUSH
16791: LD_VAR 0 8
16795: PPUSH
16796: CALL_OW 313
16800: PPUSH
16801: LD_INT 3
16803: PUSH
16804: LD_INT 60
16806: PUSH
16807: EMPTY
16808: LIST
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: LD_INT 2
16816: PUSH
16817: LD_INT 25
16819: PUSH
16820: LD_INT 2
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: PUSH
16827: LD_INT 25
16829: PUSH
16830: LD_INT 16
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: LIST
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PPUSH
16846: CALL_OW 72
16850: UNION
16851: ST_TO_ADDR
// if tmp then
16852: LD_VAR 0 4
16856: IFFALSE 16936
// begin tmp := ShrinkArray ( tmp , 3 ) ;
16858: LD_ADDR_VAR 0 4
16862: PUSH
16863: LD_VAR 0 4
16867: PPUSH
16868: LD_INT 3
16870: PPUSH
16871: CALL 59460 0 2
16875: ST_TO_ADDR
// for j in tmp do
16876: LD_ADDR_VAR 0 2
16880: PUSH
16881: LD_VAR 0 4
16885: PUSH
16886: FOR_IN
16887: IFFALSE 16930
// begin if IsInUnit ( j ) then
16889: LD_VAR 0 2
16893: PPUSH
16894: CALL_OW 310
16898: IFFALSE 16909
// ComExit ( j ) ;
16900: LD_VAR 0 2
16904: PPUSH
16905: CALL 59543 0 1
// AddComCollect ( j , x , y ) ;
16909: LD_VAR 0 2
16913: PPUSH
16914: LD_VAR 0 6
16918: PPUSH
16919: LD_VAR 0 7
16923: PPUSH
16924: CALL_OW 177
// end ;
16928: GO 16886
16930: POP
16931: POP
// exit ;
16932: POP
16933: POP
16934: GO 17163
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
16936: LD_ADDR_VAR 0 4
16940: PUSH
16941: LD_INT 22
16943: PUSH
16944: LD_VAR 0 5
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: PUSH
16953: LD_INT 91
16955: PUSH
16956: LD_VAR 0 8
16960: PUSH
16961: LD_INT 8
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: LIST
16968: PUSH
16969: LD_INT 2
16971: PUSH
16972: LD_INT 34
16974: PUSH
16975: LD_INT 12
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 34
16984: PUSH
16985: LD_INT 51
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: PUSH
16992: LD_INT 34
16994: PUSH
16995: LD_INT 32
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PUSH
17002: LD_INT 34
17004: PUSH
17005: LD_INT 89
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: LIST
17023: PPUSH
17024: CALL_OW 69
17028: ST_TO_ADDR
// if tmp then
17029: LD_VAR 0 4
17033: IFFALSE 17159
// begin for j in tmp do
17035: LD_ADDR_VAR 0 2
17039: PUSH
17040: LD_VAR 0 4
17044: PUSH
17045: FOR_IN
17046: IFFALSE 17157
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
17048: LD_VAR 0 2
17052: PPUSH
17053: CALL_OW 262
17057: PUSH
17058: LD_INT 3
17060: EQUAL
17061: PUSH
17062: LD_VAR 0 2
17066: PPUSH
17067: CALL_OW 261
17071: PUSH
17072: LD_INT 20
17074: GREATER
17075: OR
17076: PUSH
17077: LD_VAR 0 2
17081: PPUSH
17082: CALL_OW 314
17086: NOT
17087: AND
17088: PUSH
17089: LD_VAR 0 2
17093: PPUSH
17094: CALL_OW 263
17098: PUSH
17099: LD_INT 1
17101: NONEQUAL
17102: PUSH
17103: LD_VAR 0 2
17107: PPUSH
17108: CALL_OW 311
17112: OR
17113: AND
17114: IFFALSE 17155
// begin ComCollect ( j , x , y ) ;
17116: LD_VAR 0 2
17120: PPUSH
17121: LD_VAR 0 6
17125: PPUSH
17126: LD_VAR 0 7
17130: PPUSH
17131: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
17135: LD_VAR 0 2
17139: PPUSH
17140: LD_VAR 0 8
17144: PPUSH
17145: CALL_OW 172
// exit ;
17149: POP
17150: POP
17151: POP
17152: POP
17153: GO 17163
// end ;
17155: GO 17045
17157: POP
17158: POP
// end ; end ;
17159: GO 16534
17161: POP
17162: POP
// end ; end_of_file
17163: PPOPN 9
17165: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17166: LD_INT 0
17168: PPUSH
17169: PPUSH
17170: PPUSH
17171: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17172: LD_VAR 0 1
17176: PPUSH
17177: CALL_OW 264
17181: PUSH
17182: LD_INT 91
17184: EQUAL
17185: IFFALSE 17257
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17187: LD_INT 68
17189: PPUSH
17190: LD_VAR 0 1
17194: PPUSH
17195: CALL_OW 255
17199: PPUSH
17200: CALL_OW 321
17204: PUSH
17205: LD_INT 2
17207: EQUAL
17208: IFFALSE 17220
// eff := 70 else
17210: LD_ADDR_VAR 0 4
17214: PUSH
17215: LD_INT 70
17217: ST_TO_ADDR
17218: GO 17228
// eff := 30 ;
17220: LD_ADDR_VAR 0 4
17224: PUSH
17225: LD_INT 30
17227: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17228: LD_VAR 0 1
17232: PPUSH
17233: CALL_OW 250
17237: PPUSH
17238: LD_VAR 0 1
17242: PPUSH
17243: CALL_OW 251
17247: PPUSH
17248: LD_VAR 0 4
17252: PPUSH
17253: CALL_OW 495
// end ; end ;
17257: LD_VAR 0 2
17261: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17262: LD_INT 0
17264: PPUSH
// end ;
17265: LD_VAR 0 4
17269: RET
// export function SOS_Command ( cmd ) ; begin
17270: LD_INT 0
17272: PPUSH
// end ;
17273: LD_VAR 0 2
17277: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17278: LD_INT 0
17280: PPUSH
// end ;
17281: LD_VAR 0 6
17285: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
17286: LD_INT 0
17288: PPUSH
17289: PPUSH
// if not vehicle or not factory then
17290: LD_VAR 0 1
17294: NOT
17295: PUSH
17296: LD_VAR 0 2
17300: NOT
17301: OR
17302: IFFALSE 17306
// exit ;
17304: GO 17537
// if factoryWaypoints >= factory then
17306: LD_EXP 61
17310: PUSH
17311: LD_VAR 0 2
17315: GREATEREQUAL
17316: IFFALSE 17537
// if factoryWaypoints [ factory ] then
17318: LD_EXP 61
17322: PUSH
17323: LD_VAR 0 2
17327: ARRAY
17328: IFFALSE 17537
// begin if GetControl ( vehicle ) = control_manual then
17330: LD_VAR 0 1
17334: PPUSH
17335: CALL_OW 263
17339: PUSH
17340: LD_INT 1
17342: EQUAL
17343: IFFALSE 17424
// begin driver := IsDrivenBy ( vehicle ) ;
17345: LD_ADDR_VAR 0 4
17349: PUSH
17350: LD_VAR 0 1
17354: PPUSH
17355: CALL_OW 311
17359: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17360: LD_VAR 0 4
17364: PPUSH
17365: LD_EXP 61
17369: PUSH
17370: LD_VAR 0 2
17374: ARRAY
17375: PUSH
17376: LD_INT 3
17378: ARRAY
17379: PPUSH
17380: LD_EXP 61
17384: PUSH
17385: LD_VAR 0 2
17389: ARRAY
17390: PUSH
17391: LD_INT 4
17393: ARRAY
17394: PPUSH
17395: CALL_OW 171
// AddComExitVehicle ( driver ) ;
17399: LD_VAR 0 4
17403: PPUSH
17404: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
17408: LD_VAR 0 4
17412: PPUSH
17413: LD_VAR 0 2
17417: PPUSH
17418: CALL_OW 180
// end else
17422: GO 17537
// if GetControl ( vehicle ) = control_remote then
17424: LD_VAR 0 1
17428: PPUSH
17429: CALL_OW 263
17433: PUSH
17434: LD_INT 2
17436: EQUAL
17437: IFFALSE 17498
// begin wait ( 0 0$2 ) ;
17439: LD_INT 70
17441: PPUSH
17442: CALL_OW 67
// if Connect ( vehicle ) then
17446: LD_VAR 0 1
17450: PPUSH
17451: CALL 29783 0 1
17455: IFFALSE 17496
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17457: LD_VAR 0 1
17461: PPUSH
17462: LD_EXP 61
17466: PUSH
17467: LD_VAR 0 2
17471: ARRAY
17472: PUSH
17473: LD_INT 3
17475: ARRAY
17476: PPUSH
17477: LD_EXP 61
17481: PUSH
17482: LD_VAR 0 2
17486: ARRAY
17487: PUSH
17488: LD_INT 4
17490: ARRAY
17491: PPUSH
17492: CALL_OW 171
// end else
17496: GO 17537
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17498: LD_VAR 0 1
17502: PPUSH
17503: LD_EXP 61
17507: PUSH
17508: LD_VAR 0 2
17512: ARRAY
17513: PUSH
17514: LD_INT 3
17516: ARRAY
17517: PPUSH
17518: LD_EXP 61
17522: PUSH
17523: LD_VAR 0 2
17527: ARRAY
17528: PUSH
17529: LD_INT 4
17531: ARRAY
17532: PPUSH
17533: CALL_OW 171
// end ; end ;
17537: LD_VAR 0 3
17541: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
17542: LD_INT 0
17544: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
17545: LD_VAR 0 1
17549: PUSH
17550: LD_INT 250
17552: EQUAL
17553: PUSH
17554: LD_VAR 0 2
17558: PPUSH
17559: CALL_OW 264
17563: PUSH
17564: LD_INT 81
17566: EQUAL
17567: AND
17568: IFFALSE 17589
// MinerPlaceMine ( unit , x , y ) ;
17570: LD_VAR 0 2
17574: PPUSH
17575: LD_VAR 0 4
17579: PPUSH
17580: LD_VAR 0 5
17584: PPUSH
17585: CALL 19974 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
17589: LD_VAR 0 1
17593: PUSH
17594: LD_INT 251
17596: EQUAL
17597: PUSH
17598: LD_VAR 0 2
17602: PPUSH
17603: CALL_OW 264
17607: PUSH
17608: LD_INT 81
17610: EQUAL
17611: AND
17612: IFFALSE 17633
// MinerDetonateMine ( unit , x , y ) ;
17614: LD_VAR 0 2
17618: PPUSH
17619: LD_VAR 0 4
17623: PPUSH
17624: LD_VAR 0 5
17628: PPUSH
17629: CALL 20249 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
17633: LD_VAR 0 1
17637: PUSH
17638: LD_INT 252
17640: EQUAL
17641: PUSH
17642: LD_VAR 0 2
17646: PPUSH
17647: CALL_OW 264
17651: PUSH
17652: LD_INT 81
17654: EQUAL
17655: AND
17656: IFFALSE 17677
// MinerCreateMinefield ( unit , x , y ) ;
17658: LD_VAR 0 2
17662: PPUSH
17663: LD_VAR 0 4
17667: PPUSH
17668: LD_VAR 0 5
17672: PPUSH
17673: CALL 20666 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
17677: LD_VAR 0 1
17681: PUSH
17682: LD_INT 253
17684: EQUAL
17685: PUSH
17686: LD_VAR 0 2
17690: PPUSH
17691: CALL_OW 257
17695: PUSH
17696: LD_INT 5
17698: EQUAL
17699: AND
17700: IFFALSE 17721
// ComBinocular ( unit , x , y ) ;
17702: LD_VAR 0 2
17706: PPUSH
17707: LD_VAR 0 4
17711: PPUSH
17712: LD_VAR 0 5
17716: PPUSH
17717: CALL 21035 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
17721: LD_VAR 0 1
17725: PUSH
17726: LD_INT 254
17728: EQUAL
17729: PUSH
17730: LD_VAR 0 2
17734: PPUSH
17735: CALL_OW 264
17739: PUSH
17740: LD_INT 99
17742: EQUAL
17743: AND
17744: PUSH
17745: LD_VAR 0 3
17749: PPUSH
17750: CALL_OW 263
17754: PUSH
17755: LD_INT 3
17757: EQUAL
17758: AND
17759: IFFALSE 17775
// HackDestroyVehicle ( unit , selectedUnit ) ;
17761: LD_VAR 0 2
17765: PPUSH
17766: LD_VAR 0 3
17770: PPUSH
17771: CALL 19338 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
17775: LD_VAR 0 1
17779: PUSH
17780: LD_INT 255
17782: EQUAL
17783: PUSH
17784: LD_VAR 0 2
17788: PPUSH
17789: CALL_OW 264
17793: PUSH
17794: LD_INT 14
17796: PUSH
17797: LD_INT 53
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: IN
17804: AND
17805: PUSH
17806: LD_VAR 0 4
17810: PPUSH
17811: LD_VAR 0 5
17815: PPUSH
17816: CALL_OW 488
17820: AND
17821: IFFALSE 17845
// CutTreeXYR ( unit , x , y , 12 ) ;
17823: LD_VAR 0 2
17827: PPUSH
17828: LD_VAR 0 4
17832: PPUSH
17833: LD_VAR 0 5
17837: PPUSH
17838: LD_INT 12
17840: PPUSH
17841: CALL 17908 0 4
// if cmd = 256 then
17845: LD_VAR 0 1
17849: PUSH
17850: LD_INT 256
17852: EQUAL
17853: IFFALSE 17874
// SetFactoryWaypoint ( unit , x , y ) ;
17855: LD_VAR 0 2
17859: PPUSH
17860: LD_VAR 0 4
17864: PPUSH
17865: LD_VAR 0 5
17869: PPUSH
17870: CALL 15855 0 3
// if cmd = 257 then
17874: LD_VAR 0 1
17878: PUSH
17879: LD_INT 257
17881: EQUAL
17882: IFFALSE 17903
// SetWarehouseGatheringPoint ( unit , x , y ) ;
17884: LD_VAR 0 2
17888: PPUSH
17889: LD_VAR 0 4
17893: PPUSH
17894: LD_VAR 0 5
17898: PPUSH
17899: CALL 16217 0 3
// end ;
17903: LD_VAR 0 6
17907: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17908: LD_INT 0
17910: PPUSH
17911: PPUSH
17912: PPUSH
17913: PPUSH
17914: PPUSH
17915: PPUSH
17916: PPUSH
17917: PPUSH
17918: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
17919: LD_VAR 0 1
17923: NOT
17924: PUSH
17925: LD_VAR 0 2
17929: PPUSH
17930: LD_VAR 0 3
17934: PPUSH
17935: CALL_OW 488
17939: NOT
17940: OR
17941: PUSH
17942: LD_VAR 0 4
17946: NOT
17947: OR
17948: IFFALSE 17952
// exit ;
17950: GO 18292
// list := [ ] ;
17952: LD_ADDR_VAR 0 13
17956: PUSH
17957: EMPTY
17958: ST_TO_ADDR
// if x - r < 0 then
17959: LD_VAR 0 2
17963: PUSH
17964: LD_VAR 0 4
17968: MINUS
17969: PUSH
17970: LD_INT 0
17972: LESS
17973: IFFALSE 17985
// min_x := 0 else
17975: LD_ADDR_VAR 0 7
17979: PUSH
17980: LD_INT 0
17982: ST_TO_ADDR
17983: GO 18001
// min_x := x - r ;
17985: LD_ADDR_VAR 0 7
17989: PUSH
17990: LD_VAR 0 2
17994: PUSH
17995: LD_VAR 0 4
17999: MINUS
18000: ST_TO_ADDR
// if y - r < 0 then
18001: LD_VAR 0 3
18005: PUSH
18006: LD_VAR 0 4
18010: MINUS
18011: PUSH
18012: LD_INT 0
18014: LESS
18015: IFFALSE 18027
// min_y := 0 else
18017: LD_ADDR_VAR 0 8
18021: PUSH
18022: LD_INT 0
18024: ST_TO_ADDR
18025: GO 18043
// min_y := y - r ;
18027: LD_ADDR_VAR 0 8
18031: PUSH
18032: LD_VAR 0 3
18036: PUSH
18037: LD_VAR 0 4
18041: MINUS
18042: ST_TO_ADDR
// max_x := x + r ;
18043: LD_ADDR_VAR 0 9
18047: PUSH
18048: LD_VAR 0 2
18052: PUSH
18053: LD_VAR 0 4
18057: PLUS
18058: ST_TO_ADDR
// max_y := y + r ;
18059: LD_ADDR_VAR 0 10
18063: PUSH
18064: LD_VAR 0 3
18068: PUSH
18069: LD_VAR 0 4
18073: PLUS
18074: ST_TO_ADDR
// for _x = min_x to max_x do
18075: LD_ADDR_VAR 0 11
18079: PUSH
18080: DOUBLE
18081: LD_VAR 0 7
18085: DEC
18086: ST_TO_ADDR
18087: LD_VAR 0 9
18091: PUSH
18092: FOR_TO
18093: IFFALSE 18210
// for _y = min_y to max_y do
18095: LD_ADDR_VAR 0 12
18099: PUSH
18100: DOUBLE
18101: LD_VAR 0 8
18105: DEC
18106: ST_TO_ADDR
18107: LD_VAR 0 10
18111: PUSH
18112: FOR_TO
18113: IFFALSE 18206
// begin if not ValidHex ( _x , _y ) then
18115: LD_VAR 0 11
18119: PPUSH
18120: LD_VAR 0 12
18124: PPUSH
18125: CALL_OW 488
18129: NOT
18130: IFFALSE 18134
// continue ;
18132: GO 18112
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18134: LD_VAR 0 11
18138: PPUSH
18139: LD_VAR 0 12
18143: PPUSH
18144: CALL_OW 351
18148: PUSH
18149: LD_VAR 0 11
18153: PPUSH
18154: LD_VAR 0 12
18158: PPUSH
18159: CALL_OW 554
18163: AND
18164: IFFALSE 18204
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18166: LD_ADDR_VAR 0 13
18170: PUSH
18171: LD_VAR 0 13
18175: PPUSH
18176: LD_VAR 0 13
18180: PUSH
18181: LD_INT 1
18183: PLUS
18184: PPUSH
18185: LD_VAR 0 11
18189: PUSH
18190: LD_VAR 0 12
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: PPUSH
18199: CALL_OW 2
18203: ST_TO_ADDR
// end ;
18204: GO 18112
18206: POP
18207: POP
18208: GO 18092
18210: POP
18211: POP
// if not list then
18212: LD_VAR 0 13
18216: NOT
18217: IFFALSE 18221
// exit ;
18219: GO 18292
// for i in list do
18221: LD_ADDR_VAR 0 6
18225: PUSH
18226: LD_VAR 0 13
18230: PUSH
18231: FOR_IN
18232: IFFALSE 18290
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18234: LD_VAR 0 1
18238: PPUSH
18239: LD_STRING M
18241: PUSH
18242: LD_VAR 0 6
18246: PUSH
18247: LD_INT 1
18249: ARRAY
18250: PUSH
18251: LD_VAR 0 6
18255: PUSH
18256: LD_INT 2
18258: ARRAY
18259: PUSH
18260: LD_INT 0
18262: PUSH
18263: LD_INT 0
18265: PUSH
18266: LD_INT 0
18268: PUSH
18269: LD_INT 0
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: PUSH
18281: EMPTY
18282: LIST
18283: PPUSH
18284: CALL_OW 447
18288: GO 18231
18290: POP
18291: POP
// end ;
18292: LD_VAR 0 5
18296: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18297: LD_EXP 64
18301: NOT
18302: IFFALSE 18352
18304: GO 18306
18306: DISABLE
// begin initHack := true ;
18307: LD_ADDR_EXP 64
18311: PUSH
18312: LD_INT 1
18314: ST_TO_ADDR
// hackTanks := [ ] ;
18315: LD_ADDR_EXP 65
18319: PUSH
18320: EMPTY
18321: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18322: LD_ADDR_EXP 66
18326: PUSH
18327: EMPTY
18328: ST_TO_ADDR
// hackLimit := 3 ;
18329: LD_ADDR_EXP 67
18333: PUSH
18334: LD_INT 3
18336: ST_TO_ADDR
// hackDist := 12 ;
18337: LD_ADDR_EXP 68
18341: PUSH
18342: LD_INT 12
18344: ST_TO_ADDR
// hackCounter := [ ] ;
18345: LD_ADDR_EXP 69
18349: PUSH
18350: EMPTY
18351: ST_TO_ADDR
// end ;
18352: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18353: LD_EXP 64
18357: PUSH
18358: LD_INT 34
18360: PUSH
18361: LD_INT 99
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PPUSH
18368: CALL_OW 69
18372: AND
18373: IFFALSE 18626
18375: GO 18377
18377: DISABLE
18378: LD_INT 0
18380: PPUSH
18381: PPUSH
// begin enable ;
18382: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18383: LD_ADDR_VAR 0 1
18387: PUSH
18388: LD_INT 34
18390: PUSH
18391: LD_INT 99
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PPUSH
18398: CALL_OW 69
18402: PUSH
18403: FOR_IN
18404: IFFALSE 18624
// begin if not i in hackTanks then
18406: LD_VAR 0 1
18410: PUSH
18411: LD_EXP 65
18415: IN
18416: NOT
18417: IFFALSE 18500
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18419: LD_ADDR_EXP 65
18423: PUSH
18424: LD_EXP 65
18428: PPUSH
18429: LD_EXP 65
18433: PUSH
18434: LD_INT 1
18436: PLUS
18437: PPUSH
18438: LD_VAR 0 1
18442: PPUSH
18443: CALL_OW 1
18447: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18448: LD_ADDR_EXP 66
18452: PUSH
18453: LD_EXP 66
18457: PPUSH
18458: LD_EXP 66
18462: PUSH
18463: LD_INT 1
18465: PLUS
18466: PPUSH
18467: EMPTY
18468: PPUSH
18469: CALL_OW 1
18473: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18474: LD_ADDR_EXP 69
18478: PUSH
18479: LD_EXP 69
18483: PPUSH
18484: LD_EXP 69
18488: PUSH
18489: LD_INT 1
18491: PLUS
18492: PPUSH
18493: EMPTY
18494: PPUSH
18495: CALL_OW 1
18499: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18500: LD_VAR 0 1
18504: PPUSH
18505: CALL_OW 302
18509: NOT
18510: IFFALSE 18523
// begin HackUnlinkAll ( i ) ;
18512: LD_VAR 0 1
18516: PPUSH
18517: CALL 18629 0 1
// continue ;
18521: GO 18403
// end ; HackCheckCapturedStatus ( i ) ;
18523: LD_VAR 0 1
18527: PPUSH
18528: CALL 19072 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18532: LD_ADDR_VAR 0 2
18536: PUSH
18537: LD_INT 81
18539: PUSH
18540: LD_VAR 0 1
18544: PPUSH
18545: CALL_OW 255
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: PUSH
18554: LD_INT 33
18556: PUSH
18557: LD_INT 3
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 91
18566: PUSH
18567: LD_VAR 0 1
18571: PUSH
18572: LD_EXP 68
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: LIST
18581: PUSH
18582: LD_INT 50
18584: PUSH
18585: EMPTY
18586: LIST
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: PPUSH
18594: CALL_OW 69
18598: ST_TO_ADDR
// if not tmp then
18599: LD_VAR 0 2
18603: NOT
18604: IFFALSE 18608
// continue ;
18606: GO 18403
// HackLink ( i , tmp ) ;
18608: LD_VAR 0 1
18612: PPUSH
18613: LD_VAR 0 2
18617: PPUSH
18618: CALL 18765 0 2
// end ;
18622: GO 18403
18624: POP
18625: POP
// end ;
18626: PPOPN 2
18628: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18629: LD_INT 0
18631: PPUSH
18632: PPUSH
18633: PPUSH
// if not hack in hackTanks then
18634: LD_VAR 0 1
18638: PUSH
18639: LD_EXP 65
18643: IN
18644: NOT
18645: IFFALSE 18649
// exit ;
18647: GO 18760
// index := GetElementIndex ( hackTanks , hack ) ;
18649: LD_ADDR_VAR 0 4
18653: PUSH
18654: LD_EXP 65
18658: PPUSH
18659: LD_VAR 0 1
18663: PPUSH
18664: CALL 26599 0 2
18668: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18669: LD_EXP 66
18673: PUSH
18674: LD_VAR 0 4
18678: ARRAY
18679: IFFALSE 18760
// begin for i in hackTanksCaptured [ index ] do
18681: LD_ADDR_VAR 0 3
18685: PUSH
18686: LD_EXP 66
18690: PUSH
18691: LD_VAR 0 4
18695: ARRAY
18696: PUSH
18697: FOR_IN
18698: IFFALSE 18724
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18700: LD_VAR 0 3
18704: PUSH
18705: LD_INT 1
18707: ARRAY
18708: PPUSH
18709: LD_VAR 0 3
18713: PUSH
18714: LD_INT 2
18716: ARRAY
18717: PPUSH
18718: CALL_OW 235
18722: GO 18697
18724: POP
18725: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18726: LD_ADDR_EXP 66
18730: PUSH
18731: LD_EXP 66
18735: PPUSH
18736: LD_VAR 0 4
18740: PPUSH
18741: EMPTY
18742: PPUSH
18743: CALL_OW 1
18747: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18748: LD_VAR 0 1
18752: PPUSH
18753: LD_INT 0
18755: PPUSH
18756: CALL_OW 505
// end ; end ;
18760: LD_VAR 0 2
18764: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18765: LD_INT 0
18767: PPUSH
18768: PPUSH
18769: PPUSH
// if not hack in hackTanks or not vehicles then
18770: LD_VAR 0 1
18774: PUSH
18775: LD_EXP 65
18779: IN
18780: NOT
18781: PUSH
18782: LD_VAR 0 2
18786: NOT
18787: OR
18788: IFFALSE 18792
// exit ;
18790: GO 19067
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18792: LD_ADDR_VAR 0 2
18796: PUSH
18797: LD_VAR 0 1
18801: PPUSH
18802: LD_VAR 0 2
18806: PPUSH
18807: LD_INT 1
18809: PPUSH
18810: LD_INT 1
18812: PPUSH
18813: CALL 27249 0 4
18817: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18818: LD_ADDR_VAR 0 5
18822: PUSH
18823: LD_EXP 65
18827: PPUSH
18828: LD_VAR 0 1
18832: PPUSH
18833: CALL 26599 0 2
18837: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18838: LD_EXP 66
18842: PUSH
18843: LD_VAR 0 5
18847: ARRAY
18848: PUSH
18849: LD_EXP 67
18853: LESS
18854: IFFALSE 19043
// begin for i := 1 to vehicles do
18856: LD_ADDR_VAR 0 4
18860: PUSH
18861: DOUBLE
18862: LD_INT 1
18864: DEC
18865: ST_TO_ADDR
18866: LD_VAR 0 2
18870: PUSH
18871: FOR_TO
18872: IFFALSE 19041
// begin if hackTanksCaptured [ index ] = hackLimit then
18874: LD_EXP 66
18878: PUSH
18879: LD_VAR 0 5
18883: ARRAY
18884: PUSH
18885: LD_EXP 67
18889: EQUAL
18890: IFFALSE 18894
// break ;
18892: GO 19041
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18894: LD_ADDR_EXP 69
18898: PUSH
18899: LD_EXP 69
18903: PPUSH
18904: LD_VAR 0 5
18908: PPUSH
18909: LD_EXP 69
18913: PUSH
18914: LD_VAR 0 5
18918: ARRAY
18919: PUSH
18920: LD_INT 1
18922: PLUS
18923: PPUSH
18924: CALL_OW 1
18928: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18929: LD_ADDR_EXP 66
18933: PUSH
18934: LD_EXP 66
18938: PPUSH
18939: LD_VAR 0 5
18943: PUSH
18944: LD_EXP 66
18948: PUSH
18949: LD_VAR 0 5
18953: ARRAY
18954: PUSH
18955: LD_INT 1
18957: PLUS
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PPUSH
18963: LD_VAR 0 2
18967: PUSH
18968: LD_VAR 0 4
18972: ARRAY
18973: PUSH
18974: LD_VAR 0 2
18978: PUSH
18979: LD_VAR 0 4
18983: ARRAY
18984: PPUSH
18985: CALL_OW 255
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PPUSH
18994: CALL 26814 0 3
18998: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
18999: LD_VAR 0 2
19003: PUSH
19004: LD_VAR 0 4
19008: ARRAY
19009: PPUSH
19010: LD_VAR 0 1
19014: PPUSH
19015: CALL_OW 255
19019: PPUSH
19020: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19024: LD_VAR 0 2
19028: PUSH
19029: LD_VAR 0 4
19033: ARRAY
19034: PPUSH
19035: CALL_OW 141
// end ;
19039: GO 18871
19041: POP
19042: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19043: LD_VAR 0 1
19047: PPUSH
19048: LD_EXP 66
19052: PUSH
19053: LD_VAR 0 5
19057: ARRAY
19058: PUSH
19059: LD_INT 0
19061: PLUS
19062: PPUSH
19063: CALL_OW 505
// end ;
19067: LD_VAR 0 3
19071: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19072: LD_INT 0
19074: PPUSH
19075: PPUSH
19076: PPUSH
19077: PPUSH
// if not hack in hackTanks then
19078: LD_VAR 0 1
19082: PUSH
19083: LD_EXP 65
19087: IN
19088: NOT
19089: IFFALSE 19093
// exit ;
19091: GO 19333
// index := GetElementIndex ( hackTanks , hack ) ;
19093: LD_ADDR_VAR 0 4
19097: PUSH
19098: LD_EXP 65
19102: PPUSH
19103: LD_VAR 0 1
19107: PPUSH
19108: CALL 26599 0 2
19112: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19113: LD_ADDR_VAR 0 3
19117: PUSH
19118: DOUBLE
19119: LD_EXP 66
19123: PUSH
19124: LD_VAR 0 4
19128: ARRAY
19129: INC
19130: ST_TO_ADDR
19131: LD_INT 1
19133: PUSH
19134: FOR_DOWNTO
19135: IFFALSE 19307
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19137: LD_ADDR_VAR 0 5
19141: PUSH
19142: LD_EXP 66
19146: PUSH
19147: LD_VAR 0 4
19151: ARRAY
19152: PUSH
19153: LD_VAR 0 3
19157: ARRAY
19158: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19159: LD_VAR 0 5
19163: PUSH
19164: LD_INT 1
19166: ARRAY
19167: PPUSH
19168: CALL_OW 302
19172: NOT
19173: PUSH
19174: LD_VAR 0 5
19178: PUSH
19179: LD_INT 1
19181: ARRAY
19182: PPUSH
19183: CALL_OW 255
19187: PUSH
19188: LD_VAR 0 1
19192: PPUSH
19193: CALL_OW 255
19197: NONEQUAL
19198: OR
19199: IFFALSE 19305
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19201: LD_VAR 0 5
19205: PUSH
19206: LD_INT 1
19208: ARRAY
19209: PPUSH
19210: CALL_OW 305
19214: PUSH
19215: LD_VAR 0 5
19219: PUSH
19220: LD_INT 1
19222: ARRAY
19223: PPUSH
19224: CALL_OW 255
19228: PUSH
19229: LD_VAR 0 1
19233: PPUSH
19234: CALL_OW 255
19238: EQUAL
19239: AND
19240: IFFALSE 19264
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19242: LD_VAR 0 5
19246: PUSH
19247: LD_INT 1
19249: ARRAY
19250: PPUSH
19251: LD_VAR 0 5
19255: PUSH
19256: LD_INT 2
19258: ARRAY
19259: PPUSH
19260: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19264: LD_ADDR_EXP 66
19268: PUSH
19269: LD_EXP 66
19273: PPUSH
19274: LD_VAR 0 4
19278: PPUSH
19279: LD_EXP 66
19283: PUSH
19284: LD_VAR 0 4
19288: ARRAY
19289: PPUSH
19290: LD_VAR 0 3
19294: PPUSH
19295: CALL_OW 3
19299: PPUSH
19300: CALL_OW 1
19304: ST_TO_ADDR
// end ; end ;
19305: GO 19134
19307: POP
19308: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19309: LD_VAR 0 1
19313: PPUSH
19314: LD_EXP 66
19318: PUSH
19319: LD_VAR 0 4
19323: ARRAY
19324: PUSH
19325: LD_INT 0
19327: PLUS
19328: PPUSH
19329: CALL_OW 505
// end ;
19333: LD_VAR 0 2
19337: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19338: LD_INT 0
19340: PPUSH
19341: PPUSH
19342: PPUSH
19343: PPUSH
// if not hack in hackTanks then
19344: LD_VAR 0 1
19348: PUSH
19349: LD_EXP 65
19353: IN
19354: NOT
19355: IFFALSE 19359
// exit ;
19357: GO 19444
// index := GetElementIndex ( hackTanks , hack ) ;
19359: LD_ADDR_VAR 0 5
19363: PUSH
19364: LD_EXP 65
19368: PPUSH
19369: LD_VAR 0 1
19373: PPUSH
19374: CALL 26599 0 2
19378: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19379: LD_ADDR_VAR 0 4
19383: PUSH
19384: DOUBLE
19385: LD_INT 1
19387: DEC
19388: ST_TO_ADDR
19389: LD_EXP 66
19393: PUSH
19394: LD_VAR 0 5
19398: ARRAY
19399: PUSH
19400: FOR_TO
19401: IFFALSE 19442
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19403: LD_EXP 66
19407: PUSH
19408: LD_VAR 0 5
19412: ARRAY
19413: PUSH
19414: LD_VAR 0 4
19418: ARRAY
19419: PUSH
19420: LD_INT 1
19422: ARRAY
19423: PUSH
19424: LD_VAR 0 2
19428: EQUAL
19429: IFFALSE 19440
// KillUnit ( vehicle ) ;
19431: LD_VAR 0 2
19435: PPUSH
19436: CALL_OW 66
19440: GO 19400
19442: POP
19443: POP
// end ;
19444: LD_VAR 0 3
19448: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19449: LD_EXP 70
19453: NOT
19454: IFFALSE 19489
19456: GO 19458
19458: DISABLE
// begin initMiner := true ;
19459: LD_ADDR_EXP 70
19463: PUSH
19464: LD_INT 1
19466: ST_TO_ADDR
// minersList := [ ] ;
19467: LD_ADDR_EXP 71
19471: PUSH
19472: EMPTY
19473: ST_TO_ADDR
// minerMinesList := [ ] ;
19474: LD_ADDR_EXP 72
19478: PUSH
19479: EMPTY
19480: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
19481: LD_ADDR_EXP 73
19485: PUSH
19486: LD_INT 5
19488: ST_TO_ADDR
// end ;
19489: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
19490: LD_EXP 70
19494: PUSH
19495: LD_INT 34
19497: PUSH
19498: LD_INT 81
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PPUSH
19505: CALL_OW 69
19509: AND
19510: IFFALSE 19971
19512: GO 19514
19514: DISABLE
19515: LD_INT 0
19517: PPUSH
19518: PPUSH
19519: PPUSH
19520: PPUSH
// begin enable ;
19521: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
19522: LD_ADDR_VAR 0 1
19526: PUSH
19527: LD_INT 34
19529: PUSH
19530: LD_INT 81
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PPUSH
19537: CALL_OW 69
19541: PUSH
19542: FOR_IN
19543: IFFALSE 19615
// begin if not i in minersList then
19545: LD_VAR 0 1
19549: PUSH
19550: LD_EXP 71
19554: IN
19555: NOT
19556: IFFALSE 19613
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
19558: LD_ADDR_EXP 71
19562: PUSH
19563: LD_EXP 71
19567: PPUSH
19568: LD_EXP 71
19572: PUSH
19573: LD_INT 1
19575: PLUS
19576: PPUSH
19577: LD_VAR 0 1
19581: PPUSH
19582: CALL_OW 1
19586: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
19587: LD_ADDR_EXP 72
19591: PUSH
19592: LD_EXP 72
19596: PPUSH
19597: LD_EXP 72
19601: PUSH
19602: LD_INT 1
19604: PLUS
19605: PPUSH
19606: EMPTY
19607: PPUSH
19608: CALL_OW 1
19612: ST_TO_ADDR
// end end ;
19613: GO 19542
19615: POP
19616: POP
// for i := minerMinesList downto 1 do
19617: LD_ADDR_VAR 0 1
19621: PUSH
19622: DOUBLE
19623: LD_EXP 72
19627: INC
19628: ST_TO_ADDR
19629: LD_INT 1
19631: PUSH
19632: FOR_DOWNTO
19633: IFFALSE 19969
// begin if IsLive ( minersList [ i ] ) then
19635: LD_EXP 71
19639: PUSH
19640: LD_VAR 0 1
19644: ARRAY
19645: PPUSH
19646: CALL_OW 300
19650: IFFALSE 19678
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
19652: LD_EXP 71
19656: PUSH
19657: LD_VAR 0 1
19661: ARRAY
19662: PPUSH
19663: LD_EXP 72
19667: PUSH
19668: LD_VAR 0 1
19672: ARRAY
19673: PPUSH
19674: CALL_OW 505
// if not minerMinesList [ i ] then
19678: LD_EXP 72
19682: PUSH
19683: LD_VAR 0 1
19687: ARRAY
19688: NOT
19689: IFFALSE 19693
// continue ;
19691: GO 19632
// for j := minerMinesList [ i ] downto 1 do
19693: LD_ADDR_VAR 0 2
19697: PUSH
19698: DOUBLE
19699: LD_EXP 72
19703: PUSH
19704: LD_VAR 0 1
19708: ARRAY
19709: INC
19710: ST_TO_ADDR
19711: LD_INT 1
19713: PUSH
19714: FOR_DOWNTO
19715: IFFALSE 19965
// begin side := GetSide ( minersList [ i ] ) ;
19717: LD_ADDR_VAR 0 3
19721: PUSH
19722: LD_EXP 71
19726: PUSH
19727: LD_VAR 0 1
19731: ARRAY
19732: PPUSH
19733: CALL_OW 255
19737: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19738: LD_ADDR_VAR 0 4
19742: PUSH
19743: LD_EXP 72
19747: PUSH
19748: LD_VAR 0 1
19752: ARRAY
19753: PUSH
19754: LD_VAR 0 2
19758: ARRAY
19759: PUSH
19760: LD_INT 1
19762: ARRAY
19763: PPUSH
19764: LD_EXP 72
19768: PUSH
19769: LD_VAR 0 1
19773: ARRAY
19774: PUSH
19775: LD_VAR 0 2
19779: ARRAY
19780: PUSH
19781: LD_INT 2
19783: ARRAY
19784: PPUSH
19785: CALL_OW 428
19789: ST_TO_ADDR
// if not tmp then
19790: LD_VAR 0 4
19794: NOT
19795: IFFALSE 19799
// continue ;
19797: GO 19714
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19799: LD_VAR 0 4
19803: PUSH
19804: LD_INT 81
19806: PUSH
19807: LD_VAR 0 3
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PPUSH
19816: CALL_OW 69
19820: IN
19821: PUSH
19822: LD_EXP 72
19826: PUSH
19827: LD_VAR 0 1
19831: ARRAY
19832: PUSH
19833: LD_VAR 0 2
19837: ARRAY
19838: PUSH
19839: LD_INT 1
19841: ARRAY
19842: PPUSH
19843: LD_EXP 72
19847: PUSH
19848: LD_VAR 0 1
19852: ARRAY
19853: PUSH
19854: LD_VAR 0 2
19858: ARRAY
19859: PUSH
19860: LD_INT 2
19862: ARRAY
19863: PPUSH
19864: CALL_OW 458
19868: AND
19869: IFFALSE 19963
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
19871: LD_EXP 72
19875: PUSH
19876: LD_VAR 0 1
19880: ARRAY
19881: PUSH
19882: LD_VAR 0 2
19886: ARRAY
19887: PUSH
19888: LD_INT 1
19890: ARRAY
19891: PPUSH
19892: LD_EXP 72
19896: PUSH
19897: LD_VAR 0 1
19901: ARRAY
19902: PUSH
19903: LD_VAR 0 2
19907: ARRAY
19908: PUSH
19909: LD_INT 2
19911: ARRAY
19912: PPUSH
19913: LD_VAR 0 3
19917: PPUSH
19918: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
19922: LD_ADDR_EXP 72
19926: PUSH
19927: LD_EXP 72
19931: PPUSH
19932: LD_VAR 0 1
19936: PPUSH
19937: LD_EXP 72
19941: PUSH
19942: LD_VAR 0 1
19946: ARRAY
19947: PPUSH
19948: LD_VAR 0 2
19952: PPUSH
19953: CALL_OW 3
19957: PPUSH
19958: CALL_OW 1
19962: ST_TO_ADDR
// end ; end ;
19963: GO 19714
19965: POP
19966: POP
// end ;
19967: GO 19632
19969: POP
19970: POP
// end ;
19971: PPOPN 4
19973: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
19974: LD_INT 0
19976: PPUSH
19977: PPUSH
// result := false ;
19978: LD_ADDR_VAR 0 4
19982: PUSH
19983: LD_INT 0
19985: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
19986: LD_VAR 0 1
19990: PPUSH
19991: CALL_OW 264
19995: PUSH
19996: LD_INT 81
19998: EQUAL
19999: NOT
20000: IFFALSE 20004
// exit ;
20002: GO 20244
// index := GetElementIndex ( minersList , unit ) ;
20004: LD_ADDR_VAR 0 5
20008: PUSH
20009: LD_EXP 71
20013: PPUSH
20014: LD_VAR 0 1
20018: PPUSH
20019: CALL 26599 0 2
20023: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20024: LD_EXP 72
20028: PUSH
20029: LD_VAR 0 5
20033: ARRAY
20034: PUSH
20035: LD_EXP 73
20039: GREATEREQUAL
20040: IFFALSE 20044
// exit ;
20042: GO 20244
// ComMoveXY ( unit , x , y ) ;
20044: LD_VAR 0 1
20048: PPUSH
20049: LD_VAR 0 2
20053: PPUSH
20054: LD_VAR 0 3
20058: PPUSH
20059: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20063: LD_INT 35
20065: PPUSH
20066: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20070: LD_VAR 0 1
20074: PPUSH
20075: LD_VAR 0 2
20079: PPUSH
20080: LD_VAR 0 3
20084: PPUSH
20085: CALL 57954 0 3
20089: NOT
20090: PUSH
20091: LD_VAR 0 1
20095: PPUSH
20096: CALL_OW 314
20100: AND
20101: IFFALSE 20105
// exit ;
20103: GO 20244
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20105: LD_VAR 0 2
20109: PPUSH
20110: LD_VAR 0 3
20114: PPUSH
20115: CALL_OW 428
20119: PUSH
20120: LD_VAR 0 1
20124: EQUAL
20125: PUSH
20126: LD_VAR 0 1
20130: PPUSH
20131: CALL_OW 314
20135: NOT
20136: AND
20137: IFFALSE 20063
// PlaySoundXY ( x , y , PlantMine ) ;
20139: LD_VAR 0 2
20143: PPUSH
20144: LD_VAR 0 3
20148: PPUSH
20149: LD_STRING PlantMine
20151: PPUSH
20152: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20156: LD_VAR 0 2
20160: PPUSH
20161: LD_VAR 0 3
20165: PPUSH
20166: LD_VAR 0 1
20170: PPUSH
20171: CALL_OW 255
20175: PPUSH
20176: LD_INT 0
20178: PPUSH
20179: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20183: LD_ADDR_EXP 72
20187: PUSH
20188: LD_EXP 72
20192: PPUSH
20193: LD_VAR 0 5
20197: PUSH
20198: LD_EXP 72
20202: PUSH
20203: LD_VAR 0 5
20207: ARRAY
20208: PUSH
20209: LD_INT 1
20211: PLUS
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PPUSH
20217: LD_VAR 0 2
20221: PUSH
20222: LD_VAR 0 3
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PPUSH
20231: CALL 26814 0 3
20235: ST_TO_ADDR
// result := true ;
20236: LD_ADDR_VAR 0 4
20240: PUSH
20241: LD_INT 1
20243: ST_TO_ADDR
// end ;
20244: LD_VAR 0 4
20248: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20249: LD_INT 0
20251: PPUSH
20252: PPUSH
20253: PPUSH
// if not unit in minersList then
20254: LD_VAR 0 1
20258: PUSH
20259: LD_EXP 71
20263: IN
20264: NOT
20265: IFFALSE 20269
// exit ;
20267: GO 20661
// index := GetElementIndex ( minersList , unit ) ;
20269: LD_ADDR_VAR 0 6
20273: PUSH
20274: LD_EXP 71
20278: PPUSH
20279: LD_VAR 0 1
20283: PPUSH
20284: CALL 26599 0 2
20288: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20289: LD_ADDR_VAR 0 5
20293: PUSH
20294: DOUBLE
20295: LD_EXP 72
20299: PUSH
20300: LD_VAR 0 6
20304: ARRAY
20305: INC
20306: ST_TO_ADDR
20307: LD_INT 1
20309: PUSH
20310: FOR_DOWNTO
20311: IFFALSE 20472
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20313: LD_EXP 72
20317: PUSH
20318: LD_VAR 0 6
20322: ARRAY
20323: PUSH
20324: LD_VAR 0 5
20328: ARRAY
20329: PUSH
20330: LD_INT 1
20332: ARRAY
20333: PUSH
20334: LD_VAR 0 2
20338: EQUAL
20339: PUSH
20340: LD_EXP 72
20344: PUSH
20345: LD_VAR 0 6
20349: ARRAY
20350: PUSH
20351: LD_VAR 0 5
20355: ARRAY
20356: PUSH
20357: LD_INT 2
20359: ARRAY
20360: PUSH
20361: LD_VAR 0 3
20365: EQUAL
20366: AND
20367: IFFALSE 20470
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20369: LD_EXP 72
20373: PUSH
20374: LD_VAR 0 6
20378: ARRAY
20379: PUSH
20380: LD_VAR 0 5
20384: ARRAY
20385: PUSH
20386: LD_INT 1
20388: ARRAY
20389: PPUSH
20390: LD_EXP 72
20394: PUSH
20395: LD_VAR 0 6
20399: ARRAY
20400: PUSH
20401: LD_VAR 0 5
20405: ARRAY
20406: PUSH
20407: LD_INT 2
20409: ARRAY
20410: PPUSH
20411: LD_VAR 0 1
20415: PPUSH
20416: CALL_OW 255
20420: PPUSH
20421: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20425: LD_ADDR_EXP 72
20429: PUSH
20430: LD_EXP 72
20434: PPUSH
20435: LD_VAR 0 6
20439: PPUSH
20440: LD_EXP 72
20444: PUSH
20445: LD_VAR 0 6
20449: ARRAY
20450: PPUSH
20451: LD_VAR 0 5
20455: PPUSH
20456: CALL_OW 3
20460: PPUSH
20461: CALL_OW 1
20465: ST_TO_ADDR
// exit ;
20466: POP
20467: POP
20468: GO 20661
// end ; end ;
20470: GO 20310
20472: POP
20473: POP
// for i := minerMinesList [ index ] downto 1 do
20474: LD_ADDR_VAR 0 5
20478: PUSH
20479: DOUBLE
20480: LD_EXP 72
20484: PUSH
20485: LD_VAR 0 6
20489: ARRAY
20490: INC
20491: ST_TO_ADDR
20492: LD_INT 1
20494: PUSH
20495: FOR_DOWNTO
20496: IFFALSE 20659
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
20498: LD_EXP 72
20502: PUSH
20503: LD_VAR 0 6
20507: ARRAY
20508: PUSH
20509: LD_VAR 0 5
20513: ARRAY
20514: PUSH
20515: LD_INT 1
20517: ARRAY
20518: PPUSH
20519: LD_EXP 72
20523: PUSH
20524: LD_VAR 0 6
20528: ARRAY
20529: PUSH
20530: LD_VAR 0 5
20534: ARRAY
20535: PUSH
20536: LD_INT 2
20538: ARRAY
20539: PPUSH
20540: LD_VAR 0 2
20544: PPUSH
20545: LD_VAR 0 3
20549: PPUSH
20550: CALL_OW 298
20554: PUSH
20555: LD_INT 6
20557: LESS
20558: IFFALSE 20657
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20560: LD_EXP 72
20564: PUSH
20565: LD_VAR 0 6
20569: ARRAY
20570: PUSH
20571: LD_VAR 0 5
20575: ARRAY
20576: PUSH
20577: LD_INT 1
20579: ARRAY
20580: PPUSH
20581: LD_EXP 72
20585: PUSH
20586: LD_VAR 0 6
20590: ARRAY
20591: PUSH
20592: LD_VAR 0 5
20596: ARRAY
20597: PUSH
20598: LD_INT 2
20600: ARRAY
20601: PPUSH
20602: LD_VAR 0 1
20606: PPUSH
20607: CALL_OW 255
20611: PPUSH
20612: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20616: LD_ADDR_EXP 72
20620: PUSH
20621: LD_EXP 72
20625: PPUSH
20626: LD_VAR 0 6
20630: PPUSH
20631: LD_EXP 72
20635: PUSH
20636: LD_VAR 0 6
20640: ARRAY
20641: PPUSH
20642: LD_VAR 0 5
20646: PPUSH
20647: CALL_OW 3
20651: PPUSH
20652: CALL_OW 1
20656: ST_TO_ADDR
// end ; end ;
20657: GO 20495
20659: POP
20660: POP
// end ;
20661: LD_VAR 0 4
20665: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20666: LD_INT 0
20668: PPUSH
20669: PPUSH
20670: PPUSH
20671: PPUSH
20672: PPUSH
20673: PPUSH
20674: PPUSH
20675: PPUSH
20676: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20677: LD_VAR 0 1
20681: PPUSH
20682: CALL_OW 264
20686: PUSH
20687: LD_INT 81
20689: EQUAL
20690: NOT
20691: PUSH
20692: LD_VAR 0 1
20696: PUSH
20697: LD_EXP 71
20701: IN
20702: NOT
20703: OR
20704: IFFALSE 20708
// exit ;
20706: GO 21030
// index := GetElementIndex ( minersList , unit ) ;
20708: LD_ADDR_VAR 0 6
20712: PUSH
20713: LD_EXP 71
20717: PPUSH
20718: LD_VAR 0 1
20722: PPUSH
20723: CALL 26599 0 2
20727: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
20728: LD_ADDR_VAR 0 8
20732: PUSH
20733: LD_EXP 73
20737: PUSH
20738: LD_EXP 72
20742: PUSH
20743: LD_VAR 0 6
20747: ARRAY
20748: MINUS
20749: ST_TO_ADDR
// if not minesFreeAmount then
20750: LD_VAR 0 8
20754: NOT
20755: IFFALSE 20759
// exit ;
20757: GO 21030
// tmp := [ ] ;
20759: LD_ADDR_VAR 0 7
20763: PUSH
20764: EMPTY
20765: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20766: LD_ADDR_VAR 0 5
20770: PUSH
20771: DOUBLE
20772: LD_INT 1
20774: DEC
20775: ST_TO_ADDR
20776: LD_VAR 0 8
20780: PUSH
20781: FOR_TO
20782: IFFALSE 20977
// begin _d := rand ( 0 , 5 ) ;
20784: LD_ADDR_VAR 0 11
20788: PUSH
20789: LD_INT 0
20791: PPUSH
20792: LD_INT 5
20794: PPUSH
20795: CALL_OW 12
20799: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20800: LD_ADDR_VAR 0 12
20804: PUSH
20805: LD_INT 2
20807: PPUSH
20808: LD_INT 6
20810: PPUSH
20811: CALL_OW 12
20815: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
20816: LD_ADDR_VAR 0 9
20820: PUSH
20821: LD_VAR 0 2
20825: PPUSH
20826: LD_VAR 0 11
20830: PPUSH
20831: LD_VAR 0 12
20835: PPUSH
20836: CALL_OW 272
20840: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
20841: LD_ADDR_VAR 0 10
20845: PUSH
20846: LD_VAR 0 3
20850: PPUSH
20851: LD_VAR 0 11
20855: PPUSH
20856: LD_VAR 0 12
20860: PPUSH
20861: CALL_OW 273
20865: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
20866: LD_VAR 0 9
20870: PPUSH
20871: LD_VAR 0 10
20875: PPUSH
20876: CALL_OW 488
20880: PUSH
20881: LD_VAR 0 9
20885: PUSH
20886: LD_VAR 0 10
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_VAR 0 7
20899: IN
20900: NOT
20901: AND
20902: PUSH
20903: LD_VAR 0 9
20907: PPUSH
20908: LD_VAR 0 10
20912: PPUSH
20913: CALL_OW 458
20917: NOT
20918: AND
20919: IFFALSE 20961
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
20921: LD_ADDR_VAR 0 7
20925: PUSH
20926: LD_VAR 0 7
20930: PPUSH
20931: LD_VAR 0 7
20935: PUSH
20936: LD_INT 1
20938: PLUS
20939: PPUSH
20940: LD_VAR 0 9
20944: PUSH
20945: LD_VAR 0 10
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PPUSH
20954: CALL_OW 1
20958: ST_TO_ADDR
20959: GO 20975
// i := i - 1 ;
20961: LD_ADDR_VAR 0 5
20965: PUSH
20966: LD_VAR 0 5
20970: PUSH
20971: LD_INT 1
20973: MINUS
20974: ST_TO_ADDR
// end ;
20975: GO 20781
20977: POP
20978: POP
// for i in tmp do
20979: LD_ADDR_VAR 0 5
20983: PUSH
20984: LD_VAR 0 7
20988: PUSH
20989: FOR_IN
20990: IFFALSE 21028
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
20992: LD_VAR 0 1
20996: PPUSH
20997: LD_VAR 0 5
21001: PUSH
21002: LD_INT 1
21004: ARRAY
21005: PPUSH
21006: LD_VAR 0 5
21010: PUSH
21011: LD_INT 2
21013: ARRAY
21014: PPUSH
21015: CALL 19974 0 3
21019: NOT
21020: IFFALSE 21026
// exit ;
21022: POP
21023: POP
21024: GO 21030
21026: GO 20989
21028: POP
21029: POP
// end ;
21030: LD_VAR 0 4
21034: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21035: LD_INT 0
21037: PPUSH
21038: PPUSH
21039: PPUSH
21040: PPUSH
21041: PPUSH
21042: PPUSH
21043: PPUSH
// if not GetClass ( unit ) = class_sniper then
21044: LD_VAR 0 1
21048: PPUSH
21049: CALL_OW 257
21053: PUSH
21054: LD_INT 5
21056: EQUAL
21057: NOT
21058: IFFALSE 21062
// exit ;
21060: GO 21450
// dist := 8 ;
21062: LD_ADDR_VAR 0 5
21066: PUSH
21067: LD_INT 8
21069: ST_TO_ADDR
// viewRange := 12 ;
21070: LD_ADDR_VAR 0 7
21074: PUSH
21075: LD_INT 12
21077: ST_TO_ADDR
// side := GetSide ( unit ) ;
21078: LD_ADDR_VAR 0 6
21082: PUSH
21083: LD_VAR 0 1
21087: PPUSH
21088: CALL_OW 255
21092: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21093: LD_INT 61
21095: PPUSH
21096: LD_VAR 0 6
21100: PPUSH
21101: CALL_OW 321
21105: PUSH
21106: LD_INT 2
21108: EQUAL
21109: IFFALSE 21119
// viewRange := 16 ;
21111: LD_ADDR_VAR 0 7
21115: PUSH
21116: LD_INT 16
21118: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21119: LD_VAR 0 1
21123: PPUSH
21124: LD_VAR 0 2
21128: PPUSH
21129: LD_VAR 0 3
21133: PPUSH
21134: CALL_OW 297
21138: PUSH
21139: LD_VAR 0 5
21143: GREATER
21144: IFFALSE 21223
// begin ComMoveXY ( unit , x , y ) ;
21146: LD_VAR 0 1
21150: PPUSH
21151: LD_VAR 0 2
21155: PPUSH
21156: LD_VAR 0 3
21160: PPUSH
21161: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21165: LD_INT 35
21167: PPUSH
21168: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21172: LD_VAR 0 1
21176: PPUSH
21177: LD_VAR 0 2
21181: PPUSH
21182: LD_VAR 0 3
21186: PPUSH
21187: CALL 57954 0 3
21191: NOT
21192: IFFALSE 21196
// exit ;
21194: GO 21450
// until GetDistUnitXY ( unit , x , y ) < dist ;
21196: LD_VAR 0 1
21200: PPUSH
21201: LD_VAR 0 2
21205: PPUSH
21206: LD_VAR 0 3
21210: PPUSH
21211: CALL_OW 297
21215: PUSH
21216: LD_VAR 0 5
21220: LESS
21221: IFFALSE 21165
// end ; ComTurnXY ( unit , x , y ) ;
21223: LD_VAR 0 1
21227: PPUSH
21228: LD_VAR 0 2
21232: PPUSH
21233: LD_VAR 0 3
21237: PPUSH
21238: CALL_OW 118
// wait ( 5 ) ;
21242: LD_INT 5
21244: PPUSH
21245: CALL_OW 67
// _d := GetDir ( unit ) ;
21249: LD_ADDR_VAR 0 10
21253: PUSH
21254: LD_VAR 0 1
21258: PPUSH
21259: CALL_OW 254
21263: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21264: LD_ADDR_VAR 0 8
21268: PUSH
21269: LD_VAR 0 1
21273: PPUSH
21274: CALL_OW 250
21278: PPUSH
21279: LD_VAR 0 10
21283: PPUSH
21284: LD_VAR 0 5
21288: PPUSH
21289: CALL_OW 272
21293: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21294: LD_ADDR_VAR 0 9
21298: PUSH
21299: LD_VAR 0 1
21303: PPUSH
21304: CALL_OW 251
21308: PPUSH
21309: LD_VAR 0 10
21313: PPUSH
21314: LD_VAR 0 5
21318: PPUSH
21319: CALL_OW 273
21323: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21324: LD_VAR 0 8
21328: PPUSH
21329: LD_VAR 0 9
21333: PPUSH
21334: CALL_OW 488
21338: NOT
21339: IFFALSE 21343
// exit ;
21341: GO 21450
// ComAnimCustom ( unit , 1 ) ;
21343: LD_VAR 0 1
21347: PPUSH
21348: LD_INT 1
21350: PPUSH
21351: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21355: LD_VAR 0 8
21359: PPUSH
21360: LD_VAR 0 9
21364: PPUSH
21365: LD_VAR 0 6
21369: PPUSH
21370: LD_VAR 0 7
21374: PPUSH
21375: CALL_OW 330
// repeat wait ( 1 ) ;
21379: LD_INT 1
21381: PPUSH
21382: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
21386: LD_VAR 0 1
21390: PPUSH
21391: CALL_OW 316
21395: PUSH
21396: LD_VAR 0 1
21400: PPUSH
21401: CALL_OW 314
21405: OR
21406: PUSH
21407: LD_VAR 0 1
21411: PPUSH
21412: CALL_OW 302
21416: NOT
21417: OR
21418: PUSH
21419: LD_VAR 0 1
21423: PPUSH
21424: CALL_OW 301
21428: OR
21429: IFFALSE 21379
// RemoveSeeing ( _x , _y , side ) ;
21431: LD_VAR 0 8
21435: PPUSH
21436: LD_VAR 0 9
21440: PPUSH
21441: LD_VAR 0 6
21445: PPUSH
21446: CALL_OW 331
// end ; end_of_file
21450: LD_VAR 0 4
21454: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
21455: LD_VAR 0 1
21459: PPUSH
21460: LD_VAR 0 2
21464: PPUSH
21465: LD_VAR 0 3
21469: PPUSH
21470: LD_VAR 0 4
21474: PPUSH
21475: LD_VAR 0 5
21479: PPUSH
21480: LD_VAR 0 6
21484: PPUSH
21485: CALL 1495 0 6
// end ;
21489: PPOPN 6
21491: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
21492: LD_INT 0
21494: PPUSH
// begin if not units then
21495: LD_VAR 0 1
21499: NOT
21500: IFFALSE 21504
// exit ;
21502: GO 21504
// end ;
21504: PPOPN 7
21506: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
21507: CALL 1389 0 0
// end ; end_of_file
21511: PPOPN 1
21513: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
21514: LD_VAR 0 1
21518: PUSH
21519: LD_INT 200
21521: DOUBLE
21522: GREATEREQUAL
21523: IFFALSE 21531
21525: LD_INT 299
21527: DOUBLE
21528: LESSEQUAL
21529: IFTRUE 21533
21531: GO 21565
21533: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
21534: LD_VAR 0 1
21538: PPUSH
21539: LD_VAR 0 2
21543: PPUSH
21544: LD_VAR 0 3
21548: PPUSH
21549: LD_VAR 0 4
21553: PPUSH
21554: LD_VAR 0 5
21558: PPUSH
21559: CALL 17542 0 5
21563: GO 21642
21565: LD_INT 300
21567: DOUBLE
21568: GREATEREQUAL
21569: IFFALSE 21577
21571: LD_INT 399
21573: DOUBLE
21574: LESSEQUAL
21575: IFTRUE 21579
21577: GO 21641
21579: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
21580: LD_VAR 0 1
21584: PPUSH
21585: LD_VAR 0 2
21589: PPUSH
21590: LD_VAR 0 3
21594: PPUSH
21595: LD_VAR 0 4
21599: PPUSH
21600: LD_VAR 0 5
21604: PPUSH
21605: LD_VAR 0 6
21609: PPUSH
21610: LD_VAR 0 7
21614: PPUSH
21615: LD_VAR 0 8
21619: PPUSH
21620: LD_VAR 0 9
21624: PPUSH
21625: LD_VAR 0 10
21629: PPUSH
21630: LD_VAR 0 11
21634: PPUSH
21635: CALL 13875 0 11
21639: GO 21642
21641: POP
// end ;
21642: PPOPN 11
21644: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
21645: LD_VAR 0 1
21649: PPUSH
21650: LD_VAR 0 2
21654: PPUSH
21655: LD_VAR 0 3
21659: PPUSH
21660: LD_VAR 0 4
21664: PPUSH
21665: LD_VAR 0 5
21669: PPUSH
21670: CALL 17278 0 5
// end ; end_of_file
21674: PPOPN 5
21676: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21677: LD_INT 0
21679: PPUSH
21680: PPUSH
// if exist_mode then
21681: LD_VAR 0 2
21685: IFFALSE 21710
// unit := CreateCharacter ( prefix & ident ) else
21687: LD_ADDR_VAR 0 5
21691: PUSH
21692: LD_VAR 0 3
21696: PUSH
21697: LD_VAR 0 1
21701: STR
21702: PPUSH
21703: CALL_OW 34
21707: ST_TO_ADDR
21708: GO 21725
// unit := NewCharacter ( ident ) ;
21710: LD_ADDR_VAR 0 5
21714: PUSH
21715: LD_VAR 0 1
21719: PPUSH
21720: CALL_OW 25
21724: ST_TO_ADDR
// result := unit ;
21725: LD_ADDR_VAR 0 4
21729: PUSH
21730: LD_VAR 0 5
21734: ST_TO_ADDR
// end ;
21735: LD_VAR 0 4
21739: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21740: LD_INT 0
21742: PPUSH
21743: PPUSH
// if not side or not nation then
21744: LD_VAR 0 1
21748: NOT
21749: PUSH
21750: LD_VAR 0 2
21754: NOT
21755: OR
21756: IFFALSE 21760
// exit ;
21758: GO 22528
// case nation of nation_american :
21760: LD_VAR 0 2
21764: PUSH
21765: LD_INT 1
21767: DOUBLE
21768: EQUAL
21769: IFTRUE 21773
21771: GO 21987
21773: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21774: LD_ADDR_VAR 0 4
21778: PUSH
21779: LD_INT 35
21781: PUSH
21782: LD_INT 45
21784: PUSH
21785: LD_INT 46
21787: PUSH
21788: LD_INT 47
21790: PUSH
21791: LD_INT 82
21793: PUSH
21794: LD_INT 83
21796: PUSH
21797: LD_INT 84
21799: PUSH
21800: LD_INT 85
21802: PUSH
21803: LD_INT 86
21805: PUSH
21806: LD_INT 1
21808: PUSH
21809: LD_INT 2
21811: PUSH
21812: LD_INT 6
21814: PUSH
21815: LD_INT 15
21817: PUSH
21818: LD_INT 16
21820: PUSH
21821: LD_INT 7
21823: PUSH
21824: LD_INT 12
21826: PUSH
21827: LD_INT 13
21829: PUSH
21830: LD_INT 10
21832: PUSH
21833: LD_INT 14
21835: PUSH
21836: LD_INT 20
21838: PUSH
21839: LD_INT 21
21841: PUSH
21842: LD_INT 22
21844: PUSH
21845: LD_INT 25
21847: PUSH
21848: LD_INT 32
21850: PUSH
21851: LD_INT 27
21853: PUSH
21854: LD_INT 36
21856: PUSH
21857: LD_INT 69
21859: PUSH
21860: LD_INT 39
21862: PUSH
21863: LD_INT 34
21865: PUSH
21866: LD_INT 40
21868: PUSH
21869: LD_INT 48
21871: PUSH
21872: LD_INT 49
21874: PUSH
21875: LD_INT 50
21877: PUSH
21878: LD_INT 51
21880: PUSH
21881: LD_INT 52
21883: PUSH
21884: LD_INT 53
21886: PUSH
21887: LD_INT 54
21889: PUSH
21890: LD_INT 55
21892: PUSH
21893: LD_INT 56
21895: PUSH
21896: LD_INT 57
21898: PUSH
21899: LD_INT 58
21901: PUSH
21902: LD_INT 59
21904: PUSH
21905: LD_INT 60
21907: PUSH
21908: LD_INT 61
21910: PUSH
21911: LD_INT 62
21913: PUSH
21914: LD_INT 80
21916: PUSH
21917: LD_INT 82
21919: PUSH
21920: LD_INT 83
21922: PUSH
21923: LD_INT 84
21925: PUSH
21926: LD_INT 85
21928: PUSH
21929: LD_INT 86
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: ST_TO_ADDR
21985: GO 22452
21987: LD_INT 2
21989: DOUBLE
21990: EQUAL
21991: IFTRUE 21995
21993: GO 22221
21995: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21996: LD_ADDR_VAR 0 4
22000: PUSH
22001: LD_INT 35
22003: PUSH
22004: LD_INT 45
22006: PUSH
22007: LD_INT 46
22009: PUSH
22010: LD_INT 47
22012: PUSH
22013: LD_INT 82
22015: PUSH
22016: LD_INT 83
22018: PUSH
22019: LD_INT 84
22021: PUSH
22022: LD_INT 85
22024: PUSH
22025: LD_INT 87
22027: PUSH
22028: LD_INT 70
22030: PUSH
22031: LD_INT 1
22033: PUSH
22034: LD_INT 11
22036: PUSH
22037: LD_INT 3
22039: PUSH
22040: LD_INT 4
22042: PUSH
22043: LD_INT 5
22045: PUSH
22046: LD_INT 6
22048: PUSH
22049: LD_INT 15
22051: PUSH
22052: LD_INT 18
22054: PUSH
22055: LD_INT 7
22057: PUSH
22058: LD_INT 17
22060: PUSH
22061: LD_INT 8
22063: PUSH
22064: LD_INT 20
22066: PUSH
22067: LD_INT 21
22069: PUSH
22070: LD_INT 22
22072: PUSH
22073: LD_INT 72
22075: PUSH
22076: LD_INT 26
22078: PUSH
22079: LD_INT 69
22081: PUSH
22082: LD_INT 39
22084: PUSH
22085: LD_INT 40
22087: PUSH
22088: LD_INT 41
22090: PUSH
22091: LD_INT 42
22093: PUSH
22094: LD_INT 43
22096: PUSH
22097: LD_INT 48
22099: PUSH
22100: LD_INT 49
22102: PUSH
22103: LD_INT 50
22105: PUSH
22106: LD_INT 51
22108: PUSH
22109: LD_INT 52
22111: PUSH
22112: LD_INT 53
22114: PUSH
22115: LD_INT 54
22117: PUSH
22118: LD_INT 55
22120: PUSH
22121: LD_INT 56
22123: PUSH
22124: LD_INT 60
22126: PUSH
22127: LD_INT 61
22129: PUSH
22130: LD_INT 62
22132: PUSH
22133: LD_INT 66
22135: PUSH
22136: LD_INT 67
22138: PUSH
22139: LD_INT 68
22141: PUSH
22142: LD_INT 81
22144: PUSH
22145: LD_INT 82
22147: PUSH
22148: LD_INT 83
22150: PUSH
22151: LD_INT 84
22153: PUSH
22154: LD_INT 85
22156: PUSH
22157: LD_INT 87
22159: PUSH
22160: LD_INT 88
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: ST_TO_ADDR
22219: GO 22452
22221: LD_INT 3
22223: DOUBLE
22224: EQUAL
22225: IFTRUE 22229
22227: GO 22451
22229: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22230: LD_ADDR_VAR 0 4
22234: PUSH
22235: LD_INT 46
22237: PUSH
22238: LD_INT 47
22240: PUSH
22241: LD_INT 1
22243: PUSH
22244: LD_INT 2
22246: PUSH
22247: LD_INT 82
22249: PUSH
22250: LD_INT 83
22252: PUSH
22253: LD_INT 84
22255: PUSH
22256: LD_INT 85
22258: PUSH
22259: LD_INT 86
22261: PUSH
22262: LD_INT 11
22264: PUSH
22265: LD_INT 9
22267: PUSH
22268: LD_INT 20
22270: PUSH
22271: LD_INT 19
22273: PUSH
22274: LD_INT 21
22276: PUSH
22277: LD_INT 24
22279: PUSH
22280: LD_INT 22
22282: PUSH
22283: LD_INT 25
22285: PUSH
22286: LD_INT 28
22288: PUSH
22289: LD_INT 29
22291: PUSH
22292: LD_INT 30
22294: PUSH
22295: LD_INT 31
22297: PUSH
22298: LD_INT 37
22300: PUSH
22301: LD_INT 38
22303: PUSH
22304: LD_INT 32
22306: PUSH
22307: LD_INT 27
22309: PUSH
22310: LD_INT 33
22312: PUSH
22313: LD_INT 69
22315: PUSH
22316: LD_INT 39
22318: PUSH
22319: LD_INT 34
22321: PUSH
22322: LD_INT 40
22324: PUSH
22325: LD_INT 71
22327: PUSH
22328: LD_INT 23
22330: PUSH
22331: LD_INT 44
22333: PUSH
22334: LD_INT 48
22336: PUSH
22337: LD_INT 49
22339: PUSH
22340: LD_INT 50
22342: PUSH
22343: LD_INT 51
22345: PUSH
22346: LD_INT 52
22348: PUSH
22349: LD_INT 53
22351: PUSH
22352: LD_INT 54
22354: PUSH
22355: LD_INT 55
22357: PUSH
22358: LD_INT 56
22360: PUSH
22361: LD_INT 57
22363: PUSH
22364: LD_INT 58
22366: PUSH
22367: LD_INT 59
22369: PUSH
22370: LD_INT 63
22372: PUSH
22373: LD_INT 64
22375: PUSH
22376: LD_INT 65
22378: PUSH
22379: LD_INT 82
22381: PUSH
22382: LD_INT 83
22384: PUSH
22385: LD_INT 84
22387: PUSH
22388: LD_INT 85
22390: PUSH
22391: LD_INT 86
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: ST_TO_ADDR
22449: GO 22452
22451: POP
// if state > - 1 and state < 3 then
22452: LD_VAR 0 3
22456: PUSH
22457: LD_INT 1
22459: NEG
22460: GREATER
22461: PUSH
22462: LD_VAR 0 3
22466: PUSH
22467: LD_INT 3
22469: LESS
22470: AND
22471: IFFALSE 22528
// for i in result do
22473: LD_ADDR_VAR 0 5
22477: PUSH
22478: LD_VAR 0 4
22482: PUSH
22483: FOR_IN
22484: IFFALSE 22526
// if GetTech ( i , side ) <> state then
22486: LD_VAR 0 5
22490: PPUSH
22491: LD_VAR 0 1
22495: PPUSH
22496: CALL_OW 321
22500: PUSH
22501: LD_VAR 0 3
22505: NONEQUAL
22506: IFFALSE 22524
// result := result diff i ;
22508: LD_ADDR_VAR 0 4
22512: PUSH
22513: LD_VAR 0 4
22517: PUSH
22518: LD_VAR 0 5
22522: DIFF
22523: ST_TO_ADDR
22524: GO 22483
22526: POP
22527: POP
// end ;
22528: LD_VAR 0 4
22532: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22533: LD_INT 0
22535: PPUSH
22536: PPUSH
22537: PPUSH
// result := true ;
22538: LD_ADDR_VAR 0 3
22542: PUSH
22543: LD_INT 1
22545: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22546: LD_ADDR_VAR 0 5
22550: PUSH
22551: LD_VAR 0 2
22555: PPUSH
22556: CALL_OW 480
22560: ST_TO_ADDR
// if not tmp then
22561: LD_VAR 0 5
22565: NOT
22566: IFFALSE 22570
// exit ;
22568: GO 22619
// for i in tmp do
22570: LD_ADDR_VAR 0 4
22574: PUSH
22575: LD_VAR 0 5
22579: PUSH
22580: FOR_IN
22581: IFFALSE 22617
// if GetTech ( i , side ) <> state_researched then
22583: LD_VAR 0 4
22587: PPUSH
22588: LD_VAR 0 1
22592: PPUSH
22593: CALL_OW 321
22597: PUSH
22598: LD_INT 2
22600: NONEQUAL
22601: IFFALSE 22615
// begin result := false ;
22603: LD_ADDR_VAR 0 3
22607: PUSH
22608: LD_INT 0
22610: ST_TO_ADDR
// exit ;
22611: POP
22612: POP
22613: GO 22619
// end ;
22615: GO 22580
22617: POP
22618: POP
// end ;
22619: LD_VAR 0 3
22623: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22624: LD_INT 0
22626: PPUSH
22627: PPUSH
22628: PPUSH
22629: PPUSH
22630: PPUSH
22631: PPUSH
22632: PPUSH
22633: PPUSH
22634: PPUSH
22635: PPUSH
22636: PPUSH
22637: PPUSH
22638: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22639: LD_VAR 0 1
22643: NOT
22644: PUSH
22645: LD_VAR 0 1
22649: PPUSH
22650: CALL_OW 257
22654: PUSH
22655: LD_INT 9
22657: NONEQUAL
22658: OR
22659: IFFALSE 22663
// exit ;
22661: GO 23236
// side := GetSide ( unit ) ;
22663: LD_ADDR_VAR 0 9
22667: PUSH
22668: LD_VAR 0 1
22672: PPUSH
22673: CALL_OW 255
22677: ST_TO_ADDR
// tech_space := tech_spacanom ;
22678: LD_ADDR_VAR 0 12
22682: PUSH
22683: LD_INT 29
22685: ST_TO_ADDR
// tech_time := tech_taurad ;
22686: LD_ADDR_VAR 0 13
22690: PUSH
22691: LD_INT 28
22693: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22694: LD_ADDR_VAR 0 11
22698: PUSH
22699: LD_VAR 0 1
22703: PPUSH
22704: CALL_OW 310
22708: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22709: LD_VAR 0 11
22713: PPUSH
22714: CALL_OW 247
22718: PUSH
22719: LD_INT 2
22721: EQUAL
22722: IFFALSE 22726
// exit ;
22724: GO 23236
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22726: LD_ADDR_VAR 0 8
22730: PUSH
22731: LD_INT 81
22733: PUSH
22734: LD_VAR 0 9
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: PUSH
22743: LD_INT 3
22745: PUSH
22746: LD_INT 21
22748: PUSH
22749: LD_INT 3
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PPUSH
22764: CALL_OW 69
22768: ST_TO_ADDR
// if not tmp then
22769: LD_VAR 0 8
22773: NOT
22774: IFFALSE 22778
// exit ;
22776: GO 23236
// if in_unit then
22778: LD_VAR 0 11
22782: IFFALSE 22806
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22784: LD_ADDR_VAR 0 10
22788: PUSH
22789: LD_VAR 0 8
22793: PPUSH
22794: LD_VAR 0 11
22798: PPUSH
22799: CALL_OW 74
22803: ST_TO_ADDR
22804: GO 22826
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22806: LD_ADDR_VAR 0 10
22810: PUSH
22811: LD_VAR 0 8
22815: PPUSH
22816: LD_VAR 0 1
22820: PPUSH
22821: CALL_OW 74
22825: ST_TO_ADDR
// if not enemy then
22826: LD_VAR 0 10
22830: NOT
22831: IFFALSE 22835
// exit ;
22833: GO 23236
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22835: LD_VAR 0 11
22839: PUSH
22840: LD_VAR 0 11
22844: PPUSH
22845: LD_VAR 0 10
22849: PPUSH
22850: CALL_OW 296
22854: PUSH
22855: LD_INT 13
22857: GREATER
22858: AND
22859: PUSH
22860: LD_VAR 0 1
22864: PPUSH
22865: LD_VAR 0 10
22869: PPUSH
22870: CALL_OW 296
22874: PUSH
22875: LD_INT 12
22877: GREATER
22878: OR
22879: IFFALSE 22883
// exit ;
22881: GO 23236
// missile := [ 1 ] ;
22883: LD_ADDR_VAR 0 14
22887: PUSH
22888: LD_INT 1
22890: PUSH
22891: EMPTY
22892: LIST
22893: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22894: LD_VAR 0 9
22898: PPUSH
22899: LD_VAR 0 12
22903: PPUSH
22904: CALL_OW 325
22908: IFFALSE 22937
// missile := Replace ( missile , missile + 1 , 2 ) ;
22910: LD_ADDR_VAR 0 14
22914: PUSH
22915: LD_VAR 0 14
22919: PPUSH
22920: LD_VAR 0 14
22924: PUSH
22925: LD_INT 1
22927: PLUS
22928: PPUSH
22929: LD_INT 2
22931: PPUSH
22932: CALL_OW 1
22936: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22937: LD_VAR 0 9
22941: PPUSH
22942: LD_VAR 0 13
22946: PPUSH
22947: CALL_OW 325
22951: PUSH
22952: LD_VAR 0 10
22956: PPUSH
22957: CALL_OW 255
22961: PPUSH
22962: LD_VAR 0 13
22966: PPUSH
22967: CALL_OW 325
22971: NOT
22972: AND
22973: IFFALSE 23002
// missile := Replace ( missile , missile + 1 , 3 ) ;
22975: LD_ADDR_VAR 0 14
22979: PUSH
22980: LD_VAR 0 14
22984: PPUSH
22985: LD_VAR 0 14
22989: PUSH
22990: LD_INT 1
22992: PLUS
22993: PPUSH
22994: LD_INT 3
22996: PPUSH
22997: CALL_OW 1
23001: ST_TO_ADDR
// if missile < 2 then
23002: LD_VAR 0 14
23006: PUSH
23007: LD_INT 2
23009: LESS
23010: IFFALSE 23014
// exit ;
23012: GO 23236
// x := GetX ( enemy ) ;
23014: LD_ADDR_VAR 0 4
23018: PUSH
23019: LD_VAR 0 10
23023: PPUSH
23024: CALL_OW 250
23028: ST_TO_ADDR
// y := GetY ( enemy ) ;
23029: LD_ADDR_VAR 0 5
23033: PUSH
23034: LD_VAR 0 10
23038: PPUSH
23039: CALL_OW 251
23043: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23044: LD_ADDR_VAR 0 6
23048: PUSH
23049: LD_VAR 0 4
23053: PUSH
23054: LD_INT 1
23056: NEG
23057: PPUSH
23058: LD_INT 1
23060: PPUSH
23061: CALL_OW 12
23065: PLUS
23066: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23067: LD_ADDR_VAR 0 7
23071: PUSH
23072: LD_VAR 0 5
23076: PUSH
23077: LD_INT 1
23079: NEG
23080: PPUSH
23081: LD_INT 1
23083: PPUSH
23084: CALL_OW 12
23088: PLUS
23089: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23090: LD_VAR 0 6
23094: PPUSH
23095: LD_VAR 0 7
23099: PPUSH
23100: CALL_OW 488
23104: NOT
23105: IFFALSE 23127
// begin _x := x ;
23107: LD_ADDR_VAR 0 6
23111: PUSH
23112: LD_VAR 0 4
23116: ST_TO_ADDR
// _y := y ;
23117: LD_ADDR_VAR 0 7
23121: PUSH
23122: LD_VAR 0 5
23126: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23127: LD_ADDR_VAR 0 3
23131: PUSH
23132: LD_INT 1
23134: PPUSH
23135: LD_VAR 0 14
23139: PPUSH
23140: CALL_OW 12
23144: ST_TO_ADDR
// case i of 1 :
23145: LD_VAR 0 3
23149: PUSH
23150: LD_INT 1
23152: DOUBLE
23153: EQUAL
23154: IFTRUE 23158
23156: GO 23175
23158: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23159: LD_VAR 0 1
23163: PPUSH
23164: LD_VAR 0 10
23168: PPUSH
23169: CALL_OW 115
23173: GO 23236
23175: LD_INT 2
23177: DOUBLE
23178: EQUAL
23179: IFTRUE 23183
23181: GO 23205
23183: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23184: LD_VAR 0 1
23188: PPUSH
23189: LD_VAR 0 6
23193: PPUSH
23194: LD_VAR 0 7
23198: PPUSH
23199: CALL_OW 153
23203: GO 23236
23205: LD_INT 3
23207: DOUBLE
23208: EQUAL
23209: IFTRUE 23213
23211: GO 23235
23213: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23214: LD_VAR 0 1
23218: PPUSH
23219: LD_VAR 0 6
23223: PPUSH
23224: LD_VAR 0 7
23228: PPUSH
23229: CALL_OW 154
23233: GO 23236
23235: POP
// end ;
23236: LD_VAR 0 2
23240: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23241: LD_INT 0
23243: PPUSH
23244: PPUSH
23245: PPUSH
23246: PPUSH
23247: PPUSH
23248: PPUSH
// if not unit or not building then
23249: LD_VAR 0 1
23253: NOT
23254: PUSH
23255: LD_VAR 0 2
23259: NOT
23260: OR
23261: IFFALSE 23265
// exit ;
23263: GO 23423
// x := GetX ( building ) ;
23265: LD_ADDR_VAR 0 5
23269: PUSH
23270: LD_VAR 0 2
23274: PPUSH
23275: CALL_OW 250
23279: ST_TO_ADDR
// y := GetY ( building ) ;
23280: LD_ADDR_VAR 0 6
23284: PUSH
23285: LD_VAR 0 2
23289: PPUSH
23290: CALL_OW 251
23294: ST_TO_ADDR
// for i = 0 to 5 do
23295: LD_ADDR_VAR 0 4
23299: PUSH
23300: DOUBLE
23301: LD_INT 0
23303: DEC
23304: ST_TO_ADDR
23305: LD_INT 5
23307: PUSH
23308: FOR_TO
23309: IFFALSE 23421
// begin _x := ShiftX ( x , i , 3 ) ;
23311: LD_ADDR_VAR 0 7
23315: PUSH
23316: LD_VAR 0 5
23320: PPUSH
23321: LD_VAR 0 4
23325: PPUSH
23326: LD_INT 3
23328: PPUSH
23329: CALL_OW 272
23333: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23334: LD_ADDR_VAR 0 8
23338: PUSH
23339: LD_VAR 0 6
23343: PPUSH
23344: LD_VAR 0 4
23348: PPUSH
23349: LD_INT 3
23351: PPUSH
23352: CALL_OW 273
23356: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23357: LD_VAR 0 7
23361: PPUSH
23362: LD_VAR 0 8
23366: PPUSH
23367: CALL_OW 488
23371: NOT
23372: IFFALSE 23376
// continue ;
23374: GO 23308
// if HexInfo ( _x , _y ) = 0 then
23376: LD_VAR 0 7
23380: PPUSH
23381: LD_VAR 0 8
23385: PPUSH
23386: CALL_OW 428
23390: PUSH
23391: LD_INT 0
23393: EQUAL
23394: IFFALSE 23419
// begin ComMoveXY ( unit , _x , _y ) ;
23396: LD_VAR 0 1
23400: PPUSH
23401: LD_VAR 0 7
23405: PPUSH
23406: LD_VAR 0 8
23410: PPUSH
23411: CALL_OW 111
// exit ;
23415: POP
23416: POP
23417: GO 23423
// end ; end ;
23419: GO 23308
23421: POP
23422: POP
// end ;
23423: LD_VAR 0 3
23427: RET
// export function ScanBase ( side , base_area ) ; begin
23428: LD_INT 0
23430: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23431: LD_ADDR_VAR 0 3
23435: PUSH
23436: LD_VAR 0 2
23440: PPUSH
23441: LD_INT 81
23443: PUSH
23444: LD_VAR 0 1
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PPUSH
23453: CALL_OW 70
23457: ST_TO_ADDR
// end ;
23458: LD_VAR 0 3
23462: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23463: LD_INT 0
23465: PPUSH
23466: PPUSH
23467: PPUSH
23468: PPUSH
// result := false ;
23469: LD_ADDR_VAR 0 2
23473: PUSH
23474: LD_INT 0
23476: ST_TO_ADDR
// side := GetSide ( unit ) ;
23477: LD_ADDR_VAR 0 3
23481: PUSH
23482: LD_VAR 0 1
23486: PPUSH
23487: CALL_OW 255
23491: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23492: LD_ADDR_VAR 0 4
23496: PUSH
23497: LD_VAR 0 1
23501: PPUSH
23502: CALL_OW 248
23506: ST_TO_ADDR
// case nat of 1 :
23507: LD_VAR 0 4
23511: PUSH
23512: LD_INT 1
23514: DOUBLE
23515: EQUAL
23516: IFTRUE 23520
23518: GO 23531
23520: POP
// tech := tech_lassight ; 2 :
23521: LD_ADDR_VAR 0 5
23525: PUSH
23526: LD_INT 12
23528: ST_TO_ADDR
23529: GO 23570
23531: LD_INT 2
23533: DOUBLE
23534: EQUAL
23535: IFTRUE 23539
23537: GO 23550
23539: POP
// tech := tech_mortar ; 3 :
23540: LD_ADDR_VAR 0 5
23544: PUSH
23545: LD_INT 41
23547: ST_TO_ADDR
23548: GO 23570
23550: LD_INT 3
23552: DOUBLE
23553: EQUAL
23554: IFTRUE 23558
23556: GO 23569
23558: POP
// tech := tech_bazooka ; end ;
23559: LD_ADDR_VAR 0 5
23563: PUSH
23564: LD_INT 44
23566: ST_TO_ADDR
23567: GO 23570
23569: POP
// if Researched ( side , tech ) then
23570: LD_VAR 0 3
23574: PPUSH
23575: LD_VAR 0 5
23579: PPUSH
23580: CALL_OW 325
23584: IFFALSE 23611
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23586: LD_ADDR_VAR 0 2
23590: PUSH
23591: LD_INT 5
23593: PUSH
23594: LD_INT 8
23596: PUSH
23597: LD_INT 9
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: LIST
23604: PUSH
23605: LD_VAR 0 4
23609: ARRAY
23610: ST_TO_ADDR
// end ;
23611: LD_VAR 0 2
23615: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23616: LD_INT 0
23618: PPUSH
23619: PPUSH
23620: PPUSH
// if not mines then
23621: LD_VAR 0 2
23625: NOT
23626: IFFALSE 23630
// exit ;
23628: GO 23774
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23630: LD_ADDR_VAR 0 5
23634: PUSH
23635: LD_INT 81
23637: PUSH
23638: LD_VAR 0 1
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 3
23649: PUSH
23650: LD_INT 21
23652: PUSH
23653: LD_INT 3
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PPUSH
23668: CALL_OW 69
23672: ST_TO_ADDR
// for i in mines do
23673: LD_ADDR_VAR 0 4
23677: PUSH
23678: LD_VAR 0 2
23682: PUSH
23683: FOR_IN
23684: IFFALSE 23772
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23686: LD_VAR 0 4
23690: PUSH
23691: LD_INT 1
23693: ARRAY
23694: PPUSH
23695: LD_VAR 0 4
23699: PUSH
23700: LD_INT 2
23702: ARRAY
23703: PPUSH
23704: CALL_OW 458
23708: NOT
23709: IFFALSE 23713
// continue ;
23711: GO 23683
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23713: LD_VAR 0 4
23717: PUSH
23718: LD_INT 1
23720: ARRAY
23721: PPUSH
23722: LD_VAR 0 4
23726: PUSH
23727: LD_INT 2
23729: ARRAY
23730: PPUSH
23731: CALL_OW 428
23735: PUSH
23736: LD_VAR 0 5
23740: IN
23741: IFFALSE 23770
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23743: LD_VAR 0 4
23747: PUSH
23748: LD_INT 1
23750: ARRAY
23751: PPUSH
23752: LD_VAR 0 4
23756: PUSH
23757: LD_INT 2
23759: ARRAY
23760: PPUSH
23761: LD_VAR 0 1
23765: PPUSH
23766: CALL_OW 456
// end ;
23770: GO 23683
23772: POP
23773: POP
// end ;
23774: LD_VAR 0 3
23778: RET
// export function Count ( array ) ; var i ; begin
23779: LD_INT 0
23781: PPUSH
23782: PPUSH
// result := 0 ;
23783: LD_ADDR_VAR 0 2
23787: PUSH
23788: LD_INT 0
23790: ST_TO_ADDR
// for i in array do
23791: LD_ADDR_VAR 0 3
23795: PUSH
23796: LD_VAR 0 1
23800: PUSH
23801: FOR_IN
23802: IFFALSE 23826
// if i then
23804: LD_VAR 0 3
23808: IFFALSE 23824
// result := result + 1 ;
23810: LD_ADDR_VAR 0 2
23814: PUSH
23815: LD_VAR 0 2
23819: PUSH
23820: LD_INT 1
23822: PLUS
23823: ST_TO_ADDR
23824: GO 23801
23826: POP
23827: POP
// end ;
23828: LD_VAR 0 2
23832: RET
// export function IsEmpty ( building ) ; begin
23833: LD_INT 0
23835: PPUSH
// if not building then
23836: LD_VAR 0 1
23840: NOT
23841: IFFALSE 23845
// exit ;
23843: GO 23888
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23845: LD_ADDR_VAR 0 2
23849: PUSH
23850: LD_VAR 0 1
23854: PUSH
23855: LD_INT 22
23857: PUSH
23858: LD_VAR 0 1
23862: PPUSH
23863: CALL_OW 255
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: PUSH
23872: LD_INT 58
23874: PUSH
23875: EMPTY
23876: LIST
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PPUSH
23882: CALL_OW 69
23886: IN
23887: ST_TO_ADDR
// end ;
23888: LD_VAR 0 2
23892: RET
// export function IsNotFull ( building ) ; var places ; begin
23893: LD_INT 0
23895: PPUSH
23896: PPUSH
// if not building then
23897: LD_VAR 0 1
23901: NOT
23902: IFFALSE 23906
// exit ;
23904: GO 24077
// result := false ;
23906: LD_ADDR_VAR 0 2
23910: PUSH
23911: LD_INT 0
23913: ST_TO_ADDR
// places := 0 ;
23914: LD_ADDR_VAR 0 3
23918: PUSH
23919: LD_INT 0
23921: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
23922: LD_VAR 0 1
23926: PPUSH
23927: CALL_OW 266
23931: PUSH
23932: LD_INT 0
23934: DOUBLE
23935: EQUAL
23936: IFTRUE 23994
23938: LD_INT 1
23940: DOUBLE
23941: EQUAL
23942: IFTRUE 23994
23944: LD_INT 6
23946: DOUBLE
23947: EQUAL
23948: IFTRUE 23994
23950: LD_INT 7
23952: DOUBLE
23953: EQUAL
23954: IFTRUE 23994
23956: LD_INT 8
23958: DOUBLE
23959: EQUAL
23960: IFTRUE 23994
23962: LD_INT 4
23964: DOUBLE
23965: EQUAL
23966: IFTRUE 23994
23968: LD_INT 5
23970: DOUBLE
23971: EQUAL
23972: IFTRUE 23994
23974: LD_INT 2
23976: DOUBLE
23977: EQUAL
23978: IFTRUE 23994
23980: LD_INT 3
23982: DOUBLE
23983: EQUAL
23984: IFTRUE 23994
23986: LD_INT 35
23988: DOUBLE
23989: EQUAL
23990: IFTRUE 23994
23992: GO 24005
23994: POP
// places := 6 ; b_bunker , b_breastwork :
23995: LD_ADDR_VAR 0 3
23999: PUSH
24000: LD_INT 6
24002: ST_TO_ADDR
24003: GO 24050
24005: LD_INT 32
24007: DOUBLE
24008: EQUAL
24009: IFTRUE 24019
24011: LD_INT 31
24013: DOUBLE
24014: EQUAL
24015: IFTRUE 24019
24017: GO 24030
24019: POP
// places := 1 ; b_control_tower :
24020: LD_ADDR_VAR 0 3
24024: PUSH
24025: LD_INT 1
24027: ST_TO_ADDR
24028: GO 24050
24030: LD_INT 36
24032: DOUBLE
24033: EQUAL
24034: IFTRUE 24038
24036: GO 24049
24038: POP
// places := 3 ; end ;
24039: LD_ADDR_VAR 0 3
24043: PUSH
24044: LD_INT 3
24046: ST_TO_ADDR
24047: GO 24050
24049: POP
// if places then
24050: LD_VAR 0 3
24054: IFFALSE 24077
// result := UnitsInside ( building ) < places ;
24056: LD_ADDR_VAR 0 2
24060: PUSH
24061: LD_VAR 0 1
24065: PPUSH
24066: CALL_OW 313
24070: PUSH
24071: LD_VAR 0 3
24075: LESS
24076: ST_TO_ADDR
// end ;
24077: LD_VAR 0 2
24081: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24082: LD_INT 0
24084: PPUSH
24085: PPUSH
24086: PPUSH
24087: PPUSH
// tmp := [ ] ;
24088: LD_ADDR_VAR 0 3
24092: PUSH
24093: EMPTY
24094: ST_TO_ADDR
// list := [ ] ;
24095: LD_ADDR_VAR 0 5
24099: PUSH
24100: EMPTY
24101: ST_TO_ADDR
// for i = 16 to 25 do
24102: LD_ADDR_VAR 0 4
24106: PUSH
24107: DOUBLE
24108: LD_INT 16
24110: DEC
24111: ST_TO_ADDR
24112: LD_INT 25
24114: PUSH
24115: FOR_TO
24116: IFFALSE 24189
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24118: LD_ADDR_VAR 0 3
24122: PUSH
24123: LD_VAR 0 3
24127: PUSH
24128: LD_INT 22
24130: PUSH
24131: LD_VAR 0 1
24135: PPUSH
24136: CALL_OW 255
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 91
24147: PUSH
24148: LD_VAR 0 1
24152: PUSH
24153: LD_INT 6
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 30
24163: PUSH
24164: LD_VAR 0 4
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: LIST
24177: PUSH
24178: EMPTY
24179: LIST
24180: PPUSH
24181: CALL_OW 69
24185: ADD
24186: ST_TO_ADDR
24187: GO 24115
24189: POP
24190: POP
// for i = 1 to tmp do
24191: LD_ADDR_VAR 0 4
24195: PUSH
24196: DOUBLE
24197: LD_INT 1
24199: DEC
24200: ST_TO_ADDR
24201: LD_VAR 0 3
24205: PUSH
24206: FOR_TO
24207: IFFALSE 24295
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24209: LD_ADDR_VAR 0 5
24213: PUSH
24214: LD_VAR 0 5
24218: PUSH
24219: LD_VAR 0 3
24223: PUSH
24224: LD_VAR 0 4
24228: ARRAY
24229: PPUSH
24230: CALL_OW 266
24234: PUSH
24235: LD_VAR 0 3
24239: PUSH
24240: LD_VAR 0 4
24244: ARRAY
24245: PPUSH
24246: CALL_OW 250
24250: PUSH
24251: LD_VAR 0 3
24255: PUSH
24256: LD_VAR 0 4
24260: ARRAY
24261: PPUSH
24262: CALL_OW 251
24266: PUSH
24267: LD_VAR 0 3
24271: PUSH
24272: LD_VAR 0 4
24276: ARRAY
24277: PPUSH
24278: CALL_OW 254
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: PUSH
24289: EMPTY
24290: LIST
24291: ADD
24292: ST_TO_ADDR
24293: GO 24206
24295: POP
24296: POP
// result := list ;
24297: LD_ADDR_VAR 0 2
24301: PUSH
24302: LD_VAR 0 5
24306: ST_TO_ADDR
// end ;
24307: LD_VAR 0 2
24311: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24312: LD_INT 0
24314: PPUSH
24315: PPUSH
24316: PPUSH
24317: PPUSH
24318: PPUSH
24319: PPUSH
24320: PPUSH
// if not factory then
24321: LD_VAR 0 1
24325: NOT
24326: IFFALSE 24330
// exit ;
24328: GO 24923
// if control = control_apeman then
24330: LD_VAR 0 4
24334: PUSH
24335: LD_INT 5
24337: EQUAL
24338: IFFALSE 24447
// begin tmp := UnitsInside ( factory ) ;
24340: LD_ADDR_VAR 0 8
24344: PUSH
24345: LD_VAR 0 1
24349: PPUSH
24350: CALL_OW 313
24354: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24355: LD_VAR 0 8
24359: PPUSH
24360: LD_INT 25
24362: PUSH
24363: LD_INT 12
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PPUSH
24370: CALL_OW 72
24374: NOT
24375: IFFALSE 24385
// control := control_manual ;
24377: LD_ADDR_VAR 0 4
24381: PUSH
24382: LD_INT 1
24384: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24385: LD_ADDR_VAR 0 8
24389: PUSH
24390: LD_VAR 0 1
24394: PPUSH
24395: CALL 24082 0 1
24399: ST_TO_ADDR
// if tmp then
24400: LD_VAR 0 8
24404: IFFALSE 24447
// begin for i in tmp do
24406: LD_ADDR_VAR 0 7
24410: PUSH
24411: LD_VAR 0 8
24415: PUSH
24416: FOR_IN
24417: IFFALSE 24445
// if i [ 1 ] = b_ext_radio then
24419: LD_VAR 0 7
24423: PUSH
24424: LD_INT 1
24426: ARRAY
24427: PUSH
24428: LD_INT 22
24430: EQUAL
24431: IFFALSE 24443
// begin control := control_remote ;
24433: LD_ADDR_VAR 0 4
24437: PUSH
24438: LD_INT 2
24440: ST_TO_ADDR
// break ;
24441: GO 24445
// end ;
24443: GO 24416
24445: POP
24446: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24447: LD_VAR 0 1
24451: PPUSH
24452: LD_VAR 0 2
24456: PPUSH
24457: LD_VAR 0 3
24461: PPUSH
24462: LD_VAR 0 4
24466: PPUSH
24467: LD_VAR 0 5
24471: PPUSH
24472: CALL_OW 448
24476: IFFALSE 24511
// begin result := [ chassis , engine , control , weapon ] ;
24478: LD_ADDR_VAR 0 6
24482: PUSH
24483: LD_VAR 0 2
24487: PUSH
24488: LD_VAR 0 3
24492: PUSH
24493: LD_VAR 0 4
24497: PUSH
24498: LD_VAR 0 5
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: ST_TO_ADDR
// exit ;
24509: GO 24923
// end ; _chassis := AvailableChassisList ( factory ) ;
24511: LD_ADDR_VAR 0 9
24515: PUSH
24516: LD_VAR 0 1
24520: PPUSH
24521: CALL_OW 475
24525: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24526: LD_ADDR_VAR 0 11
24530: PUSH
24531: LD_VAR 0 1
24535: PPUSH
24536: CALL_OW 476
24540: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24541: LD_ADDR_VAR 0 12
24545: PUSH
24546: LD_VAR 0 1
24550: PPUSH
24551: CALL_OW 477
24555: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24556: LD_ADDR_VAR 0 10
24560: PUSH
24561: LD_VAR 0 1
24565: PPUSH
24566: CALL_OW 478
24570: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24571: LD_VAR 0 9
24575: NOT
24576: PUSH
24577: LD_VAR 0 11
24581: NOT
24582: OR
24583: PUSH
24584: LD_VAR 0 12
24588: NOT
24589: OR
24590: PUSH
24591: LD_VAR 0 10
24595: NOT
24596: OR
24597: IFFALSE 24632
// begin result := [ chassis , engine , control , weapon ] ;
24599: LD_ADDR_VAR 0 6
24603: PUSH
24604: LD_VAR 0 2
24608: PUSH
24609: LD_VAR 0 3
24613: PUSH
24614: LD_VAR 0 4
24618: PUSH
24619: LD_VAR 0 5
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: ST_TO_ADDR
// exit ;
24630: GO 24923
// end ; if not chassis in _chassis then
24632: LD_VAR 0 2
24636: PUSH
24637: LD_VAR 0 9
24641: IN
24642: NOT
24643: IFFALSE 24669
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24645: LD_ADDR_VAR 0 2
24649: PUSH
24650: LD_VAR 0 9
24654: PUSH
24655: LD_INT 1
24657: PPUSH
24658: LD_VAR 0 9
24662: PPUSH
24663: CALL_OW 12
24667: ARRAY
24668: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24669: LD_VAR 0 2
24673: PPUSH
24674: LD_VAR 0 3
24678: PPUSH
24679: CALL 24928 0 2
24683: NOT
24684: IFFALSE 24743
// repeat engine := _engine [ 1 ] ;
24686: LD_ADDR_VAR 0 3
24690: PUSH
24691: LD_VAR 0 11
24695: PUSH
24696: LD_INT 1
24698: ARRAY
24699: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24700: LD_ADDR_VAR 0 11
24704: PUSH
24705: LD_VAR 0 11
24709: PPUSH
24710: LD_INT 1
24712: PPUSH
24713: CALL_OW 3
24717: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24718: LD_VAR 0 2
24722: PPUSH
24723: LD_VAR 0 3
24727: PPUSH
24728: CALL 24928 0 2
24732: PUSH
24733: LD_VAR 0 11
24737: PUSH
24738: EMPTY
24739: EQUAL
24740: OR
24741: IFFALSE 24686
// if not control in _control then
24743: LD_VAR 0 4
24747: PUSH
24748: LD_VAR 0 12
24752: IN
24753: NOT
24754: IFFALSE 24780
// control := _control [ rand ( 1 , _control ) ] ;
24756: LD_ADDR_VAR 0 4
24760: PUSH
24761: LD_VAR 0 12
24765: PUSH
24766: LD_INT 1
24768: PPUSH
24769: LD_VAR 0 12
24773: PPUSH
24774: CALL_OW 12
24778: ARRAY
24779: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24780: LD_VAR 0 2
24784: PPUSH
24785: LD_VAR 0 5
24789: PPUSH
24790: CALL 25148 0 2
24794: NOT
24795: IFFALSE 24854
// repeat weapon := _weapon [ 1 ] ;
24797: LD_ADDR_VAR 0 5
24801: PUSH
24802: LD_VAR 0 10
24806: PUSH
24807: LD_INT 1
24809: ARRAY
24810: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24811: LD_ADDR_VAR 0 10
24815: PUSH
24816: LD_VAR 0 10
24820: PPUSH
24821: LD_INT 1
24823: PPUSH
24824: CALL_OW 3
24828: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24829: LD_VAR 0 2
24833: PPUSH
24834: LD_VAR 0 5
24838: PPUSH
24839: CALL 25148 0 2
24843: PUSH
24844: LD_VAR 0 10
24848: PUSH
24849: EMPTY
24850: EQUAL
24851: OR
24852: IFFALSE 24797
// result := [ ] ;
24854: LD_ADDR_VAR 0 6
24858: PUSH
24859: EMPTY
24860: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24861: LD_VAR 0 1
24865: PPUSH
24866: LD_VAR 0 2
24870: PPUSH
24871: LD_VAR 0 3
24875: PPUSH
24876: LD_VAR 0 4
24880: PPUSH
24881: LD_VAR 0 5
24885: PPUSH
24886: CALL_OW 448
24890: IFFALSE 24923
// result := [ chassis , engine , control , weapon ] ;
24892: LD_ADDR_VAR 0 6
24896: PUSH
24897: LD_VAR 0 2
24901: PUSH
24902: LD_VAR 0 3
24906: PUSH
24907: LD_VAR 0 4
24911: PUSH
24912: LD_VAR 0 5
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: ST_TO_ADDR
// end ;
24923: LD_VAR 0 6
24927: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24928: LD_INT 0
24930: PPUSH
// if not chassis or not engine then
24931: LD_VAR 0 1
24935: NOT
24936: PUSH
24937: LD_VAR 0 2
24941: NOT
24942: OR
24943: IFFALSE 24947
// exit ;
24945: GO 25143
// case engine of engine_solar :
24947: LD_VAR 0 2
24951: PUSH
24952: LD_INT 2
24954: DOUBLE
24955: EQUAL
24956: IFTRUE 24960
24958: GO 24998
24960: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24961: LD_ADDR_VAR 0 3
24965: PUSH
24966: LD_INT 11
24968: PUSH
24969: LD_INT 12
24971: PUSH
24972: LD_INT 13
24974: PUSH
24975: LD_INT 14
24977: PUSH
24978: LD_INT 1
24980: PUSH
24981: LD_INT 2
24983: PUSH
24984: LD_INT 3
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: ST_TO_ADDR
24996: GO 25127
24998: LD_INT 1
25000: DOUBLE
25001: EQUAL
25002: IFTRUE 25006
25004: GO 25068
25006: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25007: LD_ADDR_VAR 0 3
25011: PUSH
25012: LD_INT 11
25014: PUSH
25015: LD_INT 12
25017: PUSH
25018: LD_INT 13
25020: PUSH
25021: LD_INT 14
25023: PUSH
25024: LD_INT 1
25026: PUSH
25027: LD_INT 2
25029: PUSH
25030: LD_INT 3
25032: PUSH
25033: LD_INT 4
25035: PUSH
25036: LD_INT 5
25038: PUSH
25039: LD_INT 21
25041: PUSH
25042: LD_INT 23
25044: PUSH
25045: LD_INT 22
25047: PUSH
25048: LD_INT 24
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: ST_TO_ADDR
25066: GO 25127
25068: LD_INT 3
25070: DOUBLE
25071: EQUAL
25072: IFTRUE 25076
25074: GO 25126
25076: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25077: LD_ADDR_VAR 0 3
25081: PUSH
25082: LD_INT 13
25084: PUSH
25085: LD_INT 14
25087: PUSH
25088: LD_INT 2
25090: PUSH
25091: LD_INT 3
25093: PUSH
25094: LD_INT 4
25096: PUSH
25097: LD_INT 5
25099: PUSH
25100: LD_INT 21
25102: PUSH
25103: LD_INT 22
25105: PUSH
25106: LD_INT 23
25108: PUSH
25109: LD_INT 24
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: ST_TO_ADDR
25124: GO 25127
25126: POP
// result := ( chassis in result ) ;
25127: LD_ADDR_VAR 0 3
25131: PUSH
25132: LD_VAR 0 1
25136: PUSH
25137: LD_VAR 0 3
25141: IN
25142: ST_TO_ADDR
// end ;
25143: LD_VAR 0 3
25147: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25148: LD_INT 0
25150: PPUSH
// if not chassis or not weapon then
25151: LD_VAR 0 1
25155: NOT
25156: PUSH
25157: LD_VAR 0 2
25161: NOT
25162: OR
25163: IFFALSE 25167
// exit ;
25165: GO 26227
// case weapon of us_machine_gun :
25167: LD_VAR 0 2
25171: PUSH
25172: LD_INT 2
25174: DOUBLE
25175: EQUAL
25176: IFTRUE 25180
25178: GO 25210
25180: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25181: LD_ADDR_VAR 0 3
25185: PUSH
25186: LD_INT 1
25188: PUSH
25189: LD_INT 2
25191: PUSH
25192: LD_INT 3
25194: PUSH
25195: LD_INT 4
25197: PUSH
25198: LD_INT 5
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: ST_TO_ADDR
25208: GO 26211
25210: LD_INT 3
25212: DOUBLE
25213: EQUAL
25214: IFTRUE 25218
25216: GO 25248
25218: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25219: LD_ADDR_VAR 0 3
25223: PUSH
25224: LD_INT 1
25226: PUSH
25227: LD_INT 2
25229: PUSH
25230: LD_INT 3
25232: PUSH
25233: LD_INT 4
25235: PUSH
25236: LD_INT 5
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: ST_TO_ADDR
25246: GO 26211
25248: LD_INT 11
25250: DOUBLE
25251: EQUAL
25252: IFTRUE 25256
25254: GO 25286
25256: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25257: LD_ADDR_VAR 0 3
25261: PUSH
25262: LD_INT 1
25264: PUSH
25265: LD_INT 2
25267: PUSH
25268: LD_INT 3
25270: PUSH
25271: LD_INT 4
25273: PUSH
25274: LD_INT 5
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: ST_TO_ADDR
25284: GO 26211
25286: LD_INT 4
25288: DOUBLE
25289: EQUAL
25290: IFTRUE 25294
25292: GO 25320
25294: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25295: LD_ADDR_VAR 0 3
25299: PUSH
25300: LD_INT 2
25302: PUSH
25303: LD_INT 3
25305: PUSH
25306: LD_INT 4
25308: PUSH
25309: LD_INT 5
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: ST_TO_ADDR
25318: GO 26211
25320: LD_INT 5
25322: DOUBLE
25323: EQUAL
25324: IFTRUE 25328
25326: GO 25354
25328: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25329: LD_ADDR_VAR 0 3
25333: PUSH
25334: LD_INT 2
25336: PUSH
25337: LD_INT 3
25339: PUSH
25340: LD_INT 4
25342: PUSH
25343: LD_INT 5
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: ST_TO_ADDR
25352: GO 26211
25354: LD_INT 9
25356: DOUBLE
25357: EQUAL
25358: IFTRUE 25362
25360: GO 25388
25362: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25363: LD_ADDR_VAR 0 3
25367: PUSH
25368: LD_INT 2
25370: PUSH
25371: LD_INT 3
25373: PUSH
25374: LD_INT 4
25376: PUSH
25377: LD_INT 5
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: ST_TO_ADDR
25386: GO 26211
25388: LD_INT 7
25390: DOUBLE
25391: EQUAL
25392: IFTRUE 25396
25394: GO 25422
25396: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25397: LD_ADDR_VAR 0 3
25401: PUSH
25402: LD_INT 2
25404: PUSH
25405: LD_INT 3
25407: PUSH
25408: LD_INT 4
25410: PUSH
25411: LD_INT 5
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: ST_TO_ADDR
25420: GO 26211
25422: LD_INT 12
25424: DOUBLE
25425: EQUAL
25426: IFTRUE 25430
25428: GO 25456
25430: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25431: LD_ADDR_VAR 0 3
25435: PUSH
25436: LD_INT 2
25438: PUSH
25439: LD_INT 3
25441: PUSH
25442: LD_INT 4
25444: PUSH
25445: LD_INT 5
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: ST_TO_ADDR
25454: GO 26211
25456: LD_INT 13
25458: DOUBLE
25459: EQUAL
25460: IFTRUE 25464
25462: GO 25490
25464: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25465: LD_ADDR_VAR 0 3
25469: PUSH
25470: LD_INT 2
25472: PUSH
25473: LD_INT 3
25475: PUSH
25476: LD_INT 4
25478: PUSH
25479: LD_INT 5
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: ST_TO_ADDR
25488: GO 26211
25490: LD_INT 14
25492: DOUBLE
25493: EQUAL
25494: IFTRUE 25498
25496: GO 25516
25498: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25499: LD_ADDR_VAR 0 3
25503: PUSH
25504: LD_INT 4
25506: PUSH
25507: LD_INT 5
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: ST_TO_ADDR
25514: GO 26211
25516: LD_INT 6
25518: DOUBLE
25519: EQUAL
25520: IFTRUE 25524
25522: GO 25542
25524: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25525: LD_ADDR_VAR 0 3
25529: PUSH
25530: LD_INT 4
25532: PUSH
25533: LD_INT 5
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: ST_TO_ADDR
25540: GO 26211
25542: LD_INT 10
25544: DOUBLE
25545: EQUAL
25546: IFTRUE 25550
25548: GO 25568
25550: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25551: LD_ADDR_VAR 0 3
25555: PUSH
25556: LD_INT 4
25558: PUSH
25559: LD_INT 5
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: ST_TO_ADDR
25566: GO 26211
25568: LD_INT 22
25570: DOUBLE
25571: EQUAL
25572: IFTRUE 25576
25574: GO 25602
25576: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25577: LD_ADDR_VAR 0 3
25581: PUSH
25582: LD_INT 11
25584: PUSH
25585: LD_INT 12
25587: PUSH
25588: LD_INT 13
25590: PUSH
25591: LD_INT 14
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: ST_TO_ADDR
25600: GO 26211
25602: LD_INT 23
25604: DOUBLE
25605: EQUAL
25606: IFTRUE 25610
25608: GO 25636
25610: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25611: LD_ADDR_VAR 0 3
25615: PUSH
25616: LD_INT 11
25618: PUSH
25619: LD_INT 12
25621: PUSH
25622: LD_INT 13
25624: PUSH
25625: LD_INT 14
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: ST_TO_ADDR
25634: GO 26211
25636: LD_INT 24
25638: DOUBLE
25639: EQUAL
25640: IFTRUE 25644
25642: GO 25670
25644: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25645: LD_ADDR_VAR 0 3
25649: PUSH
25650: LD_INT 11
25652: PUSH
25653: LD_INT 12
25655: PUSH
25656: LD_INT 13
25658: PUSH
25659: LD_INT 14
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: ST_TO_ADDR
25668: GO 26211
25670: LD_INT 30
25672: DOUBLE
25673: EQUAL
25674: IFTRUE 25678
25676: GO 25704
25678: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25679: LD_ADDR_VAR 0 3
25683: PUSH
25684: LD_INT 11
25686: PUSH
25687: LD_INT 12
25689: PUSH
25690: LD_INT 13
25692: PUSH
25693: LD_INT 14
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: ST_TO_ADDR
25702: GO 26211
25704: LD_INT 25
25706: DOUBLE
25707: EQUAL
25708: IFTRUE 25712
25710: GO 25730
25712: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25713: LD_ADDR_VAR 0 3
25717: PUSH
25718: LD_INT 13
25720: PUSH
25721: LD_INT 14
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: ST_TO_ADDR
25728: GO 26211
25730: LD_INT 27
25732: DOUBLE
25733: EQUAL
25734: IFTRUE 25738
25736: GO 25756
25738: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25739: LD_ADDR_VAR 0 3
25743: PUSH
25744: LD_INT 13
25746: PUSH
25747: LD_INT 14
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: ST_TO_ADDR
25754: GO 26211
25756: LD_INT 92
25758: DOUBLE
25759: EQUAL
25760: IFTRUE 25764
25762: GO 25790
25764: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25765: LD_ADDR_VAR 0 3
25769: PUSH
25770: LD_INT 11
25772: PUSH
25773: LD_INT 12
25775: PUSH
25776: LD_INT 13
25778: PUSH
25779: LD_INT 14
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: ST_TO_ADDR
25788: GO 26211
25790: LD_INT 28
25792: DOUBLE
25793: EQUAL
25794: IFTRUE 25798
25796: GO 25816
25798: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25799: LD_ADDR_VAR 0 3
25803: PUSH
25804: LD_INT 13
25806: PUSH
25807: LD_INT 14
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: ST_TO_ADDR
25814: GO 26211
25816: LD_INT 29
25818: DOUBLE
25819: EQUAL
25820: IFTRUE 25824
25822: GO 25842
25824: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25825: LD_ADDR_VAR 0 3
25829: PUSH
25830: LD_INT 13
25832: PUSH
25833: LD_INT 14
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: ST_TO_ADDR
25840: GO 26211
25842: LD_INT 31
25844: DOUBLE
25845: EQUAL
25846: IFTRUE 25850
25848: GO 25868
25850: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25851: LD_ADDR_VAR 0 3
25855: PUSH
25856: LD_INT 13
25858: PUSH
25859: LD_INT 14
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: ST_TO_ADDR
25866: GO 26211
25868: LD_INT 26
25870: DOUBLE
25871: EQUAL
25872: IFTRUE 25876
25874: GO 25894
25876: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25877: LD_ADDR_VAR 0 3
25881: PUSH
25882: LD_INT 13
25884: PUSH
25885: LD_INT 14
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: ST_TO_ADDR
25892: GO 26211
25894: LD_INT 42
25896: DOUBLE
25897: EQUAL
25898: IFTRUE 25902
25900: GO 25928
25902: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25903: LD_ADDR_VAR 0 3
25907: PUSH
25908: LD_INT 21
25910: PUSH
25911: LD_INT 22
25913: PUSH
25914: LD_INT 23
25916: PUSH
25917: LD_INT 24
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: ST_TO_ADDR
25926: GO 26211
25928: LD_INT 43
25930: DOUBLE
25931: EQUAL
25932: IFTRUE 25936
25934: GO 25962
25936: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25937: LD_ADDR_VAR 0 3
25941: PUSH
25942: LD_INT 21
25944: PUSH
25945: LD_INT 22
25947: PUSH
25948: LD_INT 23
25950: PUSH
25951: LD_INT 24
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: ST_TO_ADDR
25960: GO 26211
25962: LD_INT 44
25964: DOUBLE
25965: EQUAL
25966: IFTRUE 25970
25968: GO 25996
25970: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25971: LD_ADDR_VAR 0 3
25975: PUSH
25976: LD_INT 21
25978: PUSH
25979: LD_INT 22
25981: PUSH
25982: LD_INT 23
25984: PUSH
25985: LD_INT 24
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: ST_TO_ADDR
25994: GO 26211
25996: LD_INT 45
25998: DOUBLE
25999: EQUAL
26000: IFTRUE 26004
26002: GO 26030
26004: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26005: LD_ADDR_VAR 0 3
26009: PUSH
26010: LD_INT 21
26012: PUSH
26013: LD_INT 22
26015: PUSH
26016: LD_INT 23
26018: PUSH
26019: LD_INT 24
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: ST_TO_ADDR
26028: GO 26211
26030: LD_INT 49
26032: DOUBLE
26033: EQUAL
26034: IFTRUE 26038
26036: GO 26064
26038: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26039: LD_ADDR_VAR 0 3
26043: PUSH
26044: LD_INT 21
26046: PUSH
26047: LD_INT 22
26049: PUSH
26050: LD_INT 23
26052: PUSH
26053: LD_INT 24
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: ST_TO_ADDR
26062: GO 26211
26064: LD_INT 51
26066: DOUBLE
26067: EQUAL
26068: IFTRUE 26072
26070: GO 26098
26072: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26073: LD_ADDR_VAR 0 3
26077: PUSH
26078: LD_INT 21
26080: PUSH
26081: LD_INT 22
26083: PUSH
26084: LD_INT 23
26086: PUSH
26087: LD_INT 24
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: ST_TO_ADDR
26096: GO 26211
26098: LD_INT 52
26100: DOUBLE
26101: EQUAL
26102: IFTRUE 26106
26104: GO 26132
26106: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26107: LD_ADDR_VAR 0 3
26111: PUSH
26112: LD_INT 21
26114: PUSH
26115: LD_INT 22
26117: PUSH
26118: LD_INT 23
26120: PUSH
26121: LD_INT 24
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: ST_TO_ADDR
26130: GO 26211
26132: LD_INT 53
26134: DOUBLE
26135: EQUAL
26136: IFTRUE 26140
26138: GO 26158
26140: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26141: LD_ADDR_VAR 0 3
26145: PUSH
26146: LD_INT 23
26148: PUSH
26149: LD_INT 24
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: ST_TO_ADDR
26156: GO 26211
26158: LD_INT 46
26160: DOUBLE
26161: EQUAL
26162: IFTRUE 26166
26164: GO 26184
26166: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26167: LD_ADDR_VAR 0 3
26171: PUSH
26172: LD_INT 23
26174: PUSH
26175: LD_INT 24
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: ST_TO_ADDR
26182: GO 26211
26184: LD_INT 47
26186: DOUBLE
26187: EQUAL
26188: IFTRUE 26192
26190: GO 26210
26192: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26193: LD_ADDR_VAR 0 3
26197: PUSH
26198: LD_INT 23
26200: PUSH
26201: LD_INT 24
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: ST_TO_ADDR
26208: GO 26211
26210: POP
// result := ( chassis in result ) ;
26211: LD_ADDR_VAR 0 3
26215: PUSH
26216: LD_VAR 0 1
26220: PUSH
26221: LD_VAR 0 3
26225: IN
26226: ST_TO_ADDR
// end ;
26227: LD_VAR 0 3
26231: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26232: LD_INT 0
26234: PPUSH
26235: PPUSH
26236: PPUSH
26237: PPUSH
26238: PPUSH
26239: PPUSH
26240: PPUSH
// result := array ;
26241: LD_ADDR_VAR 0 5
26245: PUSH
26246: LD_VAR 0 1
26250: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26251: LD_VAR 0 1
26255: NOT
26256: PUSH
26257: LD_VAR 0 2
26261: NOT
26262: OR
26263: PUSH
26264: LD_VAR 0 3
26268: NOT
26269: OR
26270: PUSH
26271: LD_VAR 0 2
26275: PUSH
26276: LD_VAR 0 1
26280: GREATER
26281: OR
26282: PUSH
26283: LD_VAR 0 3
26287: PUSH
26288: LD_VAR 0 1
26292: GREATER
26293: OR
26294: IFFALSE 26298
// exit ;
26296: GO 26594
// if direction then
26298: LD_VAR 0 4
26302: IFFALSE 26366
// begin d := 1 ;
26304: LD_ADDR_VAR 0 9
26308: PUSH
26309: LD_INT 1
26311: ST_TO_ADDR
// if i_from > i_to then
26312: LD_VAR 0 2
26316: PUSH
26317: LD_VAR 0 3
26321: GREATER
26322: IFFALSE 26348
// length := ( array - i_from ) + i_to else
26324: LD_ADDR_VAR 0 11
26328: PUSH
26329: LD_VAR 0 1
26333: PUSH
26334: LD_VAR 0 2
26338: MINUS
26339: PUSH
26340: LD_VAR 0 3
26344: PLUS
26345: ST_TO_ADDR
26346: GO 26364
// length := i_to - i_from ;
26348: LD_ADDR_VAR 0 11
26352: PUSH
26353: LD_VAR 0 3
26357: PUSH
26358: LD_VAR 0 2
26362: MINUS
26363: ST_TO_ADDR
// end else
26364: GO 26427
// begin d := - 1 ;
26366: LD_ADDR_VAR 0 9
26370: PUSH
26371: LD_INT 1
26373: NEG
26374: ST_TO_ADDR
// if i_from > i_to then
26375: LD_VAR 0 2
26379: PUSH
26380: LD_VAR 0 3
26384: GREATER
26385: IFFALSE 26405
// length := i_from - i_to else
26387: LD_ADDR_VAR 0 11
26391: PUSH
26392: LD_VAR 0 2
26396: PUSH
26397: LD_VAR 0 3
26401: MINUS
26402: ST_TO_ADDR
26403: GO 26427
// length := ( array - i_to ) + i_from ;
26405: LD_ADDR_VAR 0 11
26409: PUSH
26410: LD_VAR 0 1
26414: PUSH
26415: LD_VAR 0 3
26419: MINUS
26420: PUSH
26421: LD_VAR 0 2
26425: PLUS
26426: ST_TO_ADDR
// end ; if not length then
26427: LD_VAR 0 11
26431: NOT
26432: IFFALSE 26436
// exit ;
26434: GO 26594
// tmp := array ;
26436: LD_ADDR_VAR 0 10
26440: PUSH
26441: LD_VAR 0 1
26445: ST_TO_ADDR
// for i = 1 to length do
26446: LD_ADDR_VAR 0 6
26450: PUSH
26451: DOUBLE
26452: LD_INT 1
26454: DEC
26455: ST_TO_ADDR
26456: LD_VAR 0 11
26460: PUSH
26461: FOR_TO
26462: IFFALSE 26582
// begin for j = 1 to array do
26464: LD_ADDR_VAR 0 7
26468: PUSH
26469: DOUBLE
26470: LD_INT 1
26472: DEC
26473: ST_TO_ADDR
26474: LD_VAR 0 1
26478: PUSH
26479: FOR_TO
26480: IFFALSE 26568
// begin k := j + d ;
26482: LD_ADDR_VAR 0 8
26486: PUSH
26487: LD_VAR 0 7
26491: PUSH
26492: LD_VAR 0 9
26496: PLUS
26497: ST_TO_ADDR
// if k > array then
26498: LD_VAR 0 8
26502: PUSH
26503: LD_VAR 0 1
26507: GREATER
26508: IFFALSE 26518
// k := 1 ;
26510: LD_ADDR_VAR 0 8
26514: PUSH
26515: LD_INT 1
26517: ST_TO_ADDR
// if not k then
26518: LD_VAR 0 8
26522: NOT
26523: IFFALSE 26535
// k := array ;
26525: LD_ADDR_VAR 0 8
26529: PUSH
26530: LD_VAR 0 1
26534: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26535: LD_ADDR_VAR 0 10
26539: PUSH
26540: LD_VAR 0 10
26544: PPUSH
26545: LD_VAR 0 8
26549: PPUSH
26550: LD_VAR 0 1
26554: PUSH
26555: LD_VAR 0 7
26559: ARRAY
26560: PPUSH
26561: CALL_OW 1
26565: ST_TO_ADDR
// end ;
26566: GO 26479
26568: POP
26569: POP
// array := tmp ;
26570: LD_ADDR_VAR 0 1
26574: PUSH
26575: LD_VAR 0 10
26579: ST_TO_ADDR
// end ;
26580: GO 26461
26582: POP
26583: POP
// result := array ;
26584: LD_ADDR_VAR 0 5
26588: PUSH
26589: LD_VAR 0 1
26593: ST_TO_ADDR
// end ;
26594: LD_VAR 0 5
26598: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26599: LD_INT 0
26601: PPUSH
26602: PPUSH
// result := 0 ;
26603: LD_ADDR_VAR 0 3
26607: PUSH
26608: LD_INT 0
26610: ST_TO_ADDR
// if not array or not value in array then
26611: LD_VAR 0 1
26615: NOT
26616: PUSH
26617: LD_VAR 0 2
26621: PUSH
26622: LD_VAR 0 1
26626: IN
26627: NOT
26628: OR
26629: IFFALSE 26633
// exit ;
26631: GO 26687
// for i = 1 to array do
26633: LD_ADDR_VAR 0 4
26637: PUSH
26638: DOUBLE
26639: LD_INT 1
26641: DEC
26642: ST_TO_ADDR
26643: LD_VAR 0 1
26647: PUSH
26648: FOR_TO
26649: IFFALSE 26685
// if value = array [ i ] then
26651: LD_VAR 0 2
26655: PUSH
26656: LD_VAR 0 1
26660: PUSH
26661: LD_VAR 0 4
26665: ARRAY
26666: EQUAL
26667: IFFALSE 26683
// begin result := i ;
26669: LD_ADDR_VAR 0 3
26673: PUSH
26674: LD_VAR 0 4
26678: ST_TO_ADDR
// exit ;
26679: POP
26680: POP
26681: GO 26687
// end ;
26683: GO 26648
26685: POP
26686: POP
// end ;
26687: LD_VAR 0 3
26691: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26692: LD_INT 0
26694: PPUSH
// vc_chassis := chassis ;
26695: LD_ADDR_OWVAR 37
26699: PUSH
26700: LD_VAR 0 1
26704: ST_TO_ADDR
// vc_engine := engine ;
26705: LD_ADDR_OWVAR 39
26709: PUSH
26710: LD_VAR 0 2
26714: ST_TO_ADDR
// vc_control := control ;
26715: LD_ADDR_OWVAR 38
26719: PUSH
26720: LD_VAR 0 3
26724: ST_TO_ADDR
// vc_weapon := weapon ;
26725: LD_ADDR_OWVAR 40
26729: PUSH
26730: LD_VAR 0 4
26734: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26735: LD_ADDR_OWVAR 41
26739: PUSH
26740: LD_VAR 0 5
26744: ST_TO_ADDR
// end ;
26745: LD_VAR 0 6
26749: RET
// export function WantPlant ( unit ) ; var task ; begin
26750: LD_INT 0
26752: PPUSH
26753: PPUSH
// result := false ;
26754: LD_ADDR_VAR 0 2
26758: PUSH
26759: LD_INT 0
26761: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26762: LD_ADDR_VAR 0 3
26766: PUSH
26767: LD_VAR 0 1
26771: PPUSH
26772: CALL_OW 437
26776: ST_TO_ADDR
// if task then
26777: LD_VAR 0 3
26781: IFFALSE 26809
// if task [ 1 ] [ 1 ] = p then
26783: LD_VAR 0 3
26787: PUSH
26788: LD_INT 1
26790: ARRAY
26791: PUSH
26792: LD_INT 1
26794: ARRAY
26795: PUSH
26796: LD_STRING p
26798: EQUAL
26799: IFFALSE 26809
// result := true ;
26801: LD_ADDR_VAR 0 2
26805: PUSH
26806: LD_INT 1
26808: ST_TO_ADDR
// end ;
26809: LD_VAR 0 2
26813: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26814: LD_INT 0
26816: PPUSH
26817: PPUSH
26818: PPUSH
26819: PPUSH
// if pos < 1 then
26820: LD_VAR 0 2
26824: PUSH
26825: LD_INT 1
26827: LESS
26828: IFFALSE 26832
// exit ;
26830: GO 27135
// if pos = 1 then
26832: LD_VAR 0 2
26836: PUSH
26837: LD_INT 1
26839: EQUAL
26840: IFFALSE 26873
// result := Replace ( arr , pos [ 1 ] , value ) else
26842: LD_ADDR_VAR 0 4
26846: PUSH
26847: LD_VAR 0 1
26851: PPUSH
26852: LD_VAR 0 2
26856: PUSH
26857: LD_INT 1
26859: ARRAY
26860: PPUSH
26861: LD_VAR 0 3
26865: PPUSH
26866: CALL_OW 1
26870: ST_TO_ADDR
26871: GO 27135
// begin tmp := arr ;
26873: LD_ADDR_VAR 0 6
26877: PUSH
26878: LD_VAR 0 1
26882: ST_TO_ADDR
// s_arr := [ tmp ] ;
26883: LD_ADDR_VAR 0 7
26887: PUSH
26888: LD_VAR 0 6
26892: PUSH
26893: EMPTY
26894: LIST
26895: ST_TO_ADDR
// for i = 1 to pos - 1 do
26896: LD_ADDR_VAR 0 5
26900: PUSH
26901: DOUBLE
26902: LD_INT 1
26904: DEC
26905: ST_TO_ADDR
26906: LD_VAR 0 2
26910: PUSH
26911: LD_INT 1
26913: MINUS
26914: PUSH
26915: FOR_TO
26916: IFFALSE 26961
// begin tmp := tmp [ pos [ i ] ] ;
26918: LD_ADDR_VAR 0 6
26922: PUSH
26923: LD_VAR 0 6
26927: PUSH
26928: LD_VAR 0 2
26932: PUSH
26933: LD_VAR 0 5
26937: ARRAY
26938: ARRAY
26939: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26940: LD_ADDR_VAR 0 7
26944: PUSH
26945: LD_VAR 0 7
26949: PUSH
26950: LD_VAR 0 6
26954: PUSH
26955: EMPTY
26956: LIST
26957: ADD
26958: ST_TO_ADDR
// end ;
26959: GO 26915
26961: POP
26962: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26963: LD_ADDR_VAR 0 6
26967: PUSH
26968: LD_VAR 0 6
26972: PPUSH
26973: LD_VAR 0 2
26977: PUSH
26978: LD_VAR 0 2
26982: ARRAY
26983: PPUSH
26984: LD_VAR 0 3
26988: PPUSH
26989: CALL_OW 1
26993: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26994: LD_ADDR_VAR 0 7
26998: PUSH
26999: LD_VAR 0 7
27003: PPUSH
27004: LD_VAR 0 7
27008: PPUSH
27009: LD_VAR 0 6
27013: PPUSH
27014: CALL_OW 1
27018: ST_TO_ADDR
// for i = s_arr downto 2 do
27019: LD_ADDR_VAR 0 5
27023: PUSH
27024: DOUBLE
27025: LD_VAR 0 7
27029: INC
27030: ST_TO_ADDR
27031: LD_INT 2
27033: PUSH
27034: FOR_DOWNTO
27035: IFFALSE 27119
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27037: LD_ADDR_VAR 0 6
27041: PUSH
27042: LD_VAR 0 7
27046: PUSH
27047: LD_VAR 0 5
27051: PUSH
27052: LD_INT 1
27054: MINUS
27055: ARRAY
27056: PPUSH
27057: LD_VAR 0 2
27061: PUSH
27062: LD_VAR 0 5
27066: PUSH
27067: LD_INT 1
27069: MINUS
27070: ARRAY
27071: PPUSH
27072: LD_VAR 0 7
27076: PUSH
27077: LD_VAR 0 5
27081: ARRAY
27082: PPUSH
27083: CALL_OW 1
27087: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27088: LD_ADDR_VAR 0 7
27092: PUSH
27093: LD_VAR 0 7
27097: PPUSH
27098: LD_VAR 0 5
27102: PUSH
27103: LD_INT 1
27105: MINUS
27106: PPUSH
27107: LD_VAR 0 6
27111: PPUSH
27112: CALL_OW 1
27116: ST_TO_ADDR
// end ;
27117: GO 27034
27119: POP
27120: POP
// result := s_arr [ 1 ] ;
27121: LD_ADDR_VAR 0 4
27125: PUSH
27126: LD_VAR 0 7
27130: PUSH
27131: LD_INT 1
27133: ARRAY
27134: ST_TO_ADDR
// end ; end ;
27135: LD_VAR 0 4
27139: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27140: LD_INT 0
27142: PPUSH
27143: PPUSH
// if not list then
27144: LD_VAR 0 1
27148: NOT
27149: IFFALSE 27153
// exit ;
27151: GO 27244
// i := list [ pos1 ] ;
27153: LD_ADDR_VAR 0 5
27157: PUSH
27158: LD_VAR 0 1
27162: PUSH
27163: LD_VAR 0 2
27167: ARRAY
27168: ST_TO_ADDR
// if not i then
27169: LD_VAR 0 5
27173: NOT
27174: IFFALSE 27178
// exit ;
27176: GO 27244
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27178: LD_ADDR_VAR 0 1
27182: PUSH
27183: LD_VAR 0 1
27187: PPUSH
27188: LD_VAR 0 2
27192: PPUSH
27193: LD_VAR 0 1
27197: PUSH
27198: LD_VAR 0 3
27202: ARRAY
27203: PPUSH
27204: CALL_OW 1
27208: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27209: LD_ADDR_VAR 0 1
27213: PUSH
27214: LD_VAR 0 1
27218: PPUSH
27219: LD_VAR 0 3
27223: PPUSH
27224: LD_VAR 0 5
27228: PPUSH
27229: CALL_OW 1
27233: ST_TO_ADDR
// result := list ;
27234: LD_ADDR_VAR 0 4
27238: PUSH
27239: LD_VAR 0 1
27243: ST_TO_ADDR
// end ;
27244: LD_VAR 0 4
27248: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27249: LD_INT 0
27251: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27252: LD_ADDR_VAR 0 5
27256: PUSH
27257: LD_VAR 0 1
27261: PPUSH
27262: CALL_OW 250
27266: PPUSH
27267: LD_VAR 0 1
27271: PPUSH
27272: CALL_OW 251
27276: PPUSH
27277: LD_VAR 0 2
27281: PPUSH
27282: LD_VAR 0 3
27286: PPUSH
27287: LD_VAR 0 4
27291: PPUSH
27292: CALL 27302 0 5
27296: ST_TO_ADDR
// end ;
27297: LD_VAR 0 5
27301: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27302: LD_INT 0
27304: PPUSH
27305: PPUSH
27306: PPUSH
27307: PPUSH
// if not list then
27308: LD_VAR 0 3
27312: NOT
27313: IFFALSE 27317
// exit ;
27315: GO 27705
// result := [ ] ;
27317: LD_ADDR_VAR 0 6
27321: PUSH
27322: EMPTY
27323: ST_TO_ADDR
// for i in list do
27324: LD_ADDR_VAR 0 7
27328: PUSH
27329: LD_VAR 0 3
27333: PUSH
27334: FOR_IN
27335: IFFALSE 27537
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27337: LD_ADDR_VAR 0 9
27341: PUSH
27342: LD_VAR 0 7
27346: PPUSH
27347: LD_VAR 0 1
27351: PPUSH
27352: LD_VAR 0 2
27356: PPUSH
27357: CALL_OW 297
27361: ST_TO_ADDR
// if not result then
27362: LD_VAR 0 6
27366: NOT
27367: IFFALSE 27393
// result := [ [ i , tmp ] ] else
27369: LD_ADDR_VAR 0 6
27373: PUSH
27374: LD_VAR 0 7
27378: PUSH
27379: LD_VAR 0 9
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: EMPTY
27389: LIST
27390: ST_TO_ADDR
27391: GO 27535
// begin if result [ result ] [ 2 ] < tmp then
27393: LD_VAR 0 6
27397: PUSH
27398: LD_VAR 0 6
27402: ARRAY
27403: PUSH
27404: LD_INT 2
27406: ARRAY
27407: PUSH
27408: LD_VAR 0 9
27412: LESS
27413: IFFALSE 27455
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27415: LD_ADDR_VAR 0 6
27419: PUSH
27420: LD_VAR 0 6
27424: PPUSH
27425: LD_VAR 0 6
27429: PUSH
27430: LD_INT 1
27432: PLUS
27433: PPUSH
27434: LD_VAR 0 7
27438: PUSH
27439: LD_VAR 0 9
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PPUSH
27448: CALL_OW 2
27452: ST_TO_ADDR
27453: GO 27535
// for j = 1 to result do
27455: LD_ADDR_VAR 0 8
27459: PUSH
27460: DOUBLE
27461: LD_INT 1
27463: DEC
27464: ST_TO_ADDR
27465: LD_VAR 0 6
27469: PUSH
27470: FOR_TO
27471: IFFALSE 27533
// begin if tmp < result [ j ] [ 2 ] then
27473: LD_VAR 0 9
27477: PUSH
27478: LD_VAR 0 6
27482: PUSH
27483: LD_VAR 0 8
27487: ARRAY
27488: PUSH
27489: LD_INT 2
27491: ARRAY
27492: LESS
27493: IFFALSE 27531
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27495: LD_ADDR_VAR 0 6
27499: PUSH
27500: LD_VAR 0 6
27504: PPUSH
27505: LD_VAR 0 8
27509: PPUSH
27510: LD_VAR 0 7
27514: PUSH
27515: LD_VAR 0 9
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PPUSH
27524: CALL_OW 2
27528: ST_TO_ADDR
// break ;
27529: GO 27533
// end ; end ;
27531: GO 27470
27533: POP
27534: POP
// end ; end ;
27535: GO 27334
27537: POP
27538: POP
// if result and not asc then
27539: LD_VAR 0 6
27543: PUSH
27544: LD_VAR 0 4
27548: NOT
27549: AND
27550: IFFALSE 27625
// begin tmp := result ;
27552: LD_ADDR_VAR 0 9
27556: PUSH
27557: LD_VAR 0 6
27561: ST_TO_ADDR
// for i = tmp downto 1 do
27562: LD_ADDR_VAR 0 7
27566: PUSH
27567: DOUBLE
27568: LD_VAR 0 9
27572: INC
27573: ST_TO_ADDR
27574: LD_INT 1
27576: PUSH
27577: FOR_DOWNTO
27578: IFFALSE 27623
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27580: LD_ADDR_VAR 0 6
27584: PUSH
27585: LD_VAR 0 6
27589: PPUSH
27590: LD_VAR 0 9
27594: PUSH
27595: LD_VAR 0 7
27599: MINUS
27600: PUSH
27601: LD_INT 1
27603: PLUS
27604: PPUSH
27605: LD_VAR 0 9
27609: PUSH
27610: LD_VAR 0 7
27614: ARRAY
27615: PPUSH
27616: CALL_OW 1
27620: ST_TO_ADDR
27621: GO 27577
27623: POP
27624: POP
// end ; tmp := [ ] ;
27625: LD_ADDR_VAR 0 9
27629: PUSH
27630: EMPTY
27631: ST_TO_ADDR
// if mode then
27632: LD_VAR 0 5
27636: IFFALSE 27705
// begin for i = 1 to result do
27638: LD_ADDR_VAR 0 7
27642: PUSH
27643: DOUBLE
27644: LD_INT 1
27646: DEC
27647: ST_TO_ADDR
27648: LD_VAR 0 6
27652: PUSH
27653: FOR_TO
27654: IFFALSE 27693
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27656: LD_ADDR_VAR 0 9
27660: PUSH
27661: LD_VAR 0 9
27665: PPUSH
27666: LD_VAR 0 7
27670: PPUSH
27671: LD_VAR 0 6
27675: PUSH
27676: LD_VAR 0 7
27680: ARRAY
27681: PUSH
27682: LD_INT 1
27684: ARRAY
27685: PPUSH
27686: CALL_OW 1
27690: ST_TO_ADDR
27691: GO 27653
27693: POP
27694: POP
// result := tmp ;
27695: LD_ADDR_VAR 0 6
27699: PUSH
27700: LD_VAR 0 9
27704: ST_TO_ADDR
// end ; end ;
27705: LD_VAR 0 6
27709: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27710: LD_INT 0
27712: PPUSH
27713: PPUSH
27714: PPUSH
27715: PPUSH
27716: PPUSH
27717: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27718: LD_ADDR_VAR 0 5
27722: PUSH
27723: LD_INT 0
27725: PUSH
27726: LD_INT 0
27728: PUSH
27729: LD_INT 0
27731: PUSH
27732: EMPTY
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: ST_TO_ADDR
// if not x or not y then
27740: LD_VAR 0 2
27744: NOT
27745: PUSH
27746: LD_VAR 0 3
27750: NOT
27751: OR
27752: IFFALSE 27756
// exit ;
27754: GO 29406
// if not range then
27756: LD_VAR 0 4
27760: NOT
27761: IFFALSE 27771
// range := 10 ;
27763: LD_ADDR_VAR 0 4
27767: PUSH
27768: LD_INT 10
27770: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27771: LD_ADDR_VAR 0 8
27775: PUSH
27776: LD_INT 81
27778: PUSH
27779: LD_VAR 0 1
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 92
27790: PUSH
27791: LD_VAR 0 2
27795: PUSH
27796: LD_VAR 0 3
27800: PUSH
27801: LD_VAR 0 4
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: PUSH
27812: LD_INT 3
27814: PUSH
27815: LD_INT 21
27817: PUSH
27818: LD_INT 3
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: LIST
27833: PPUSH
27834: CALL_OW 69
27838: ST_TO_ADDR
// if not tmp then
27839: LD_VAR 0 8
27843: NOT
27844: IFFALSE 27848
// exit ;
27846: GO 29406
// for i in tmp do
27848: LD_ADDR_VAR 0 6
27852: PUSH
27853: LD_VAR 0 8
27857: PUSH
27858: FOR_IN
27859: IFFALSE 29381
// begin points := [ 0 , 0 , 0 ] ;
27861: LD_ADDR_VAR 0 9
27865: PUSH
27866: LD_INT 0
27868: PUSH
27869: LD_INT 0
27871: PUSH
27872: LD_INT 0
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: LIST
27879: ST_TO_ADDR
// bpoints := 1 ;
27880: LD_ADDR_VAR 0 10
27884: PUSH
27885: LD_INT 1
27887: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27888: LD_VAR 0 6
27892: PPUSH
27893: CALL_OW 247
27897: PUSH
27898: LD_INT 1
27900: DOUBLE
27901: EQUAL
27902: IFTRUE 27906
27904: GO 28484
27906: POP
// begin if GetClass ( i ) = 1 then
27907: LD_VAR 0 6
27911: PPUSH
27912: CALL_OW 257
27916: PUSH
27917: LD_INT 1
27919: EQUAL
27920: IFFALSE 27941
// points := [ 10 , 5 , 3 ] ;
27922: LD_ADDR_VAR 0 9
27926: PUSH
27927: LD_INT 10
27929: PUSH
27930: LD_INT 5
27932: PUSH
27933: LD_INT 3
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: LIST
27940: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27941: LD_VAR 0 6
27945: PPUSH
27946: CALL_OW 257
27950: PUSH
27951: LD_INT 2
27953: PUSH
27954: LD_INT 3
27956: PUSH
27957: LD_INT 4
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: LIST
27964: IN
27965: IFFALSE 27986
// points := [ 3 , 2 , 1 ] ;
27967: LD_ADDR_VAR 0 9
27971: PUSH
27972: LD_INT 3
27974: PUSH
27975: LD_INT 2
27977: PUSH
27978: LD_INT 1
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: LIST
27985: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27986: LD_VAR 0 6
27990: PPUSH
27991: CALL_OW 257
27995: PUSH
27996: LD_INT 5
27998: EQUAL
27999: IFFALSE 28020
// points := [ 130 , 5 , 2 ] ;
28001: LD_ADDR_VAR 0 9
28005: PUSH
28006: LD_INT 130
28008: PUSH
28009: LD_INT 5
28011: PUSH
28012: LD_INT 2
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: LIST
28019: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28020: LD_VAR 0 6
28024: PPUSH
28025: CALL_OW 257
28029: PUSH
28030: LD_INT 8
28032: EQUAL
28033: IFFALSE 28054
// points := [ 35 , 35 , 30 ] ;
28035: LD_ADDR_VAR 0 9
28039: PUSH
28040: LD_INT 35
28042: PUSH
28043: LD_INT 35
28045: PUSH
28046: LD_INT 30
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: LIST
28053: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28054: LD_VAR 0 6
28058: PPUSH
28059: CALL_OW 257
28063: PUSH
28064: LD_INT 9
28066: EQUAL
28067: IFFALSE 28088
// points := [ 20 , 55 , 40 ] ;
28069: LD_ADDR_VAR 0 9
28073: PUSH
28074: LD_INT 20
28076: PUSH
28077: LD_INT 55
28079: PUSH
28080: LD_INT 40
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: LIST
28087: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28088: LD_VAR 0 6
28092: PPUSH
28093: CALL_OW 257
28097: PUSH
28098: LD_INT 12
28100: PUSH
28101: LD_INT 16
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: IN
28108: IFFALSE 28129
// points := [ 5 , 3 , 2 ] ;
28110: LD_ADDR_VAR 0 9
28114: PUSH
28115: LD_INT 5
28117: PUSH
28118: LD_INT 3
28120: PUSH
28121: LD_INT 2
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: LIST
28128: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28129: LD_VAR 0 6
28133: PPUSH
28134: CALL_OW 257
28138: PUSH
28139: LD_INT 17
28141: EQUAL
28142: IFFALSE 28163
// points := [ 100 , 50 , 75 ] ;
28144: LD_ADDR_VAR 0 9
28148: PUSH
28149: LD_INT 100
28151: PUSH
28152: LD_INT 50
28154: PUSH
28155: LD_INT 75
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: LIST
28162: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28163: LD_VAR 0 6
28167: PPUSH
28168: CALL_OW 257
28172: PUSH
28173: LD_INT 15
28175: EQUAL
28176: IFFALSE 28197
// points := [ 10 , 5 , 3 ] ;
28178: LD_ADDR_VAR 0 9
28182: PUSH
28183: LD_INT 10
28185: PUSH
28186: LD_INT 5
28188: PUSH
28189: LD_INT 3
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: LIST
28196: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28197: LD_VAR 0 6
28201: PPUSH
28202: CALL_OW 257
28206: PUSH
28207: LD_INT 14
28209: EQUAL
28210: IFFALSE 28231
// points := [ 10 , 0 , 0 ] ;
28212: LD_ADDR_VAR 0 9
28216: PUSH
28217: LD_INT 10
28219: PUSH
28220: LD_INT 0
28222: PUSH
28223: LD_INT 0
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: LIST
28230: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28231: LD_VAR 0 6
28235: PPUSH
28236: CALL_OW 257
28240: PUSH
28241: LD_INT 11
28243: EQUAL
28244: IFFALSE 28265
// points := [ 30 , 10 , 5 ] ;
28246: LD_ADDR_VAR 0 9
28250: PUSH
28251: LD_INT 30
28253: PUSH
28254: LD_INT 10
28256: PUSH
28257: LD_INT 5
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: LIST
28264: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28265: LD_VAR 0 1
28269: PPUSH
28270: LD_INT 5
28272: PPUSH
28273: CALL_OW 321
28277: PUSH
28278: LD_INT 2
28280: EQUAL
28281: IFFALSE 28298
// bpoints := bpoints * 1.8 ;
28283: LD_ADDR_VAR 0 10
28287: PUSH
28288: LD_VAR 0 10
28292: PUSH
28293: LD_REAL  1.80000000000000E+0000
28296: MUL
28297: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28298: LD_VAR 0 6
28302: PPUSH
28303: CALL_OW 257
28307: PUSH
28308: LD_INT 1
28310: PUSH
28311: LD_INT 2
28313: PUSH
28314: LD_INT 3
28316: PUSH
28317: LD_INT 4
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: IN
28326: PUSH
28327: LD_VAR 0 1
28331: PPUSH
28332: LD_INT 51
28334: PPUSH
28335: CALL_OW 321
28339: PUSH
28340: LD_INT 2
28342: EQUAL
28343: AND
28344: IFFALSE 28361
// bpoints := bpoints * 1.2 ;
28346: LD_ADDR_VAR 0 10
28350: PUSH
28351: LD_VAR 0 10
28355: PUSH
28356: LD_REAL  1.20000000000000E+0000
28359: MUL
28360: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28361: LD_VAR 0 6
28365: PPUSH
28366: CALL_OW 257
28370: PUSH
28371: LD_INT 5
28373: PUSH
28374: LD_INT 7
28376: PUSH
28377: LD_INT 9
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: LIST
28384: IN
28385: PUSH
28386: LD_VAR 0 1
28390: PPUSH
28391: LD_INT 52
28393: PPUSH
28394: CALL_OW 321
28398: PUSH
28399: LD_INT 2
28401: EQUAL
28402: AND
28403: IFFALSE 28420
// bpoints := bpoints * 1.5 ;
28405: LD_ADDR_VAR 0 10
28409: PUSH
28410: LD_VAR 0 10
28414: PUSH
28415: LD_REAL  1.50000000000000E+0000
28418: MUL
28419: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28420: LD_VAR 0 1
28424: PPUSH
28425: LD_INT 66
28427: PPUSH
28428: CALL_OW 321
28432: PUSH
28433: LD_INT 2
28435: EQUAL
28436: IFFALSE 28453
// bpoints := bpoints * 1.1 ;
28438: LD_ADDR_VAR 0 10
28442: PUSH
28443: LD_VAR 0 10
28447: PUSH
28448: LD_REAL  1.10000000000000E+0000
28451: MUL
28452: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28453: LD_ADDR_VAR 0 10
28457: PUSH
28458: LD_VAR 0 10
28462: PUSH
28463: LD_VAR 0 6
28467: PPUSH
28468: LD_INT 1
28470: PPUSH
28471: CALL_OW 259
28475: PUSH
28476: LD_REAL  1.15000000000000E+0000
28479: MUL
28480: MUL
28481: ST_TO_ADDR
// end ; unit_vehicle :
28482: GO 29310
28484: LD_INT 2
28486: DOUBLE
28487: EQUAL
28488: IFTRUE 28492
28490: GO 29298
28492: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28493: LD_VAR 0 6
28497: PPUSH
28498: CALL_OW 264
28502: PUSH
28503: LD_INT 2
28505: PUSH
28506: LD_INT 42
28508: PUSH
28509: LD_INT 24
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: LIST
28516: IN
28517: IFFALSE 28538
// points := [ 25 , 5 , 3 ] ;
28519: LD_ADDR_VAR 0 9
28523: PUSH
28524: LD_INT 25
28526: PUSH
28527: LD_INT 5
28529: PUSH
28530: LD_INT 3
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: LIST
28537: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28538: LD_VAR 0 6
28542: PPUSH
28543: CALL_OW 264
28547: PUSH
28548: LD_INT 4
28550: PUSH
28551: LD_INT 43
28553: PUSH
28554: LD_INT 25
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: LIST
28561: IN
28562: IFFALSE 28583
// points := [ 40 , 15 , 5 ] ;
28564: LD_ADDR_VAR 0 9
28568: PUSH
28569: LD_INT 40
28571: PUSH
28572: LD_INT 15
28574: PUSH
28575: LD_INT 5
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: LIST
28582: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28583: LD_VAR 0 6
28587: PPUSH
28588: CALL_OW 264
28592: PUSH
28593: LD_INT 3
28595: PUSH
28596: LD_INT 23
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: IN
28603: IFFALSE 28624
// points := [ 7 , 25 , 8 ] ;
28605: LD_ADDR_VAR 0 9
28609: PUSH
28610: LD_INT 7
28612: PUSH
28613: LD_INT 25
28615: PUSH
28616: LD_INT 8
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: LIST
28623: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28624: LD_VAR 0 6
28628: PPUSH
28629: CALL_OW 264
28633: PUSH
28634: LD_INT 5
28636: PUSH
28637: LD_INT 27
28639: PUSH
28640: LD_INT 44
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: LIST
28647: IN
28648: IFFALSE 28669
// points := [ 14 , 50 , 16 ] ;
28650: LD_ADDR_VAR 0 9
28654: PUSH
28655: LD_INT 14
28657: PUSH
28658: LD_INT 50
28660: PUSH
28661: LD_INT 16
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: LIST
28668: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28669: LD_VAR 0 6
28673: PPUSH
28674: CALL_OW 264
28678: PUSH
28679: LD_INT 6
28681: PUSH
28682: LD_INT 46
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: IN
28689: IFFALSE 28710
// points := [ 32 , 120 , 70 ] ;
28691: LD_ADDR_VAR 0 9
28695: PUSH
28696: LD_INT 32
28698: PUSH
28699: LD_INT 120
28701: PUSH
28702: LD_INT 70
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: LIST
28709: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28710: LD_VAR 0 6
28714: PPUSH
28715: CALL_OW 264
28719: PUSH
28720: LD_INT 7
28722: PUSH
28723: LD_INT 28
28725: PUSH
28726: LD_INT 45
28728: PUSH
28729: LD_INT 92
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: IN
28738: IFFALSE 28759
// points := [ 35 , 20 , 45 ] ;
28740: LD_ADDR_VAR 0 9
28744: PUSH
28745: LD_INT 35
28747: PUSH
28748: LD_INT 20
28750: PUSH
28751: LD_INT 45
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: LIST
28758: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28759: LD_VAR 0 6
28763: PPUSH
28764: CALL_OW 264
28768: PUSH
28769: LD_INT 47
28771: PUSH
28772: EMPTY
28773: LIST
28774: IN
28775: IFFALSE 28796
// points := [ 67 , 45 , 75 ] ;
28777: LD_ADDR_VAR 0 9
28781: PUSH
28782: LD_INT 67
28784: PUSH
28785: LD_INT 45
28787: PUSH
28788: LD_INT 75
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: LIST
28795: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28796: LD_VAR 0 6
28800: PPUSH
28801: CALL_OW 264
28805: PUSH
28806: LD_INT 26
28808: PUSH
28809: EMPTY
28810: LIST
28811: IN
28812: IFFALSE 28833
// points := [ 120 , 30 , 80 ] ;
28814: LD_ADDR_VAR 0 9
28818: PUSH
28819: LD_INT 120
28821: PUSH
28822: LD_INT 30
28824: PUSH
28825: LD_INT 80
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: LIST
28832: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28833: LD_VAR 0 6
28837: PPUSH
28838: CALL_OW 264
28842: PUSH
28843: LD_INT 22
28845: PUSH
28846: EMPTY
28847: LIST
28848: IN
28849: IFFALSE 28870
// points := [ 40 , 1 , 1 ] ;
28851: LD_ADDR_VAR 0 9
28855: PUSH
28856: LD_INT 40
28858: PUSH
28859: LD_INT 1
28861: PUSH
28862: LD_INT 1
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: LIST
28869: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28870: LD_VAR 0 6
28874: PPUSH
28875: CALL_OW 264
28879: PUSH
28880: LD_INT 29
28882: PUSH
28883: EMPTY
28884: LIST
28885: IN
28886: IFFALSE 28907
// points := [ 70 , 200 , 400 ] ;
28888: LD_ADDR_VAR 0 9
28892: PUSH
28893: LD_INT 70
28895: PUSH
28896: LD_INT 200
28898: PUSH
28899: LD_INT 400
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: LIST
28906: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28907: LD_VAR 0 6
28911: PPUSH
28912: CALL_OW 264
28916: PUSH
28917: LD_INT 14
28919: PUSH
28920: LD_INT 53
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: IN
28927: IFFALSE 28948
// points := [ 40 , 10 , 20 ] ;
28929: LD_ADDR_VAR 0 9
28933: PUSH
28934: LD_INT 40
28936: PUSH
28937: LD_INT 10
28939: PUSH
28940: LD_INT 20
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: LIST
28947: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28948: LD_VAR 0 6
28952: PPUSH
28953: CALL_OW 264
28957: PUSH
28958: LD_INT 9
28960: PUSH
28961: EMPTY
28962: LIST
28963: IN
28964: IFFALSE 28985
// points := [ 5 , 70 , 20 ] ;
28966: LD_ADDR_VAR 0 9
28970: PUSH
28971: LD_INT 5
28973: PUSH
28974: LD_INT 70
28976: PUSH
28977: LD_INT 20
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: LIST
28984: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28985: LD_VAR 0 6
28989: PPUSH
28990: CALL_OW 264
28994: PUSH
28995: LD_INT 10
28997: PUSH
28998: EMPTY
28999: LIST
29000: IN
29001: IFFALSE 29022
// points := [ 35 , 110 , 70 ] ;
29003: LD_ADDR_VAR 0 9
29007: PUSH
29008: LD_INT 35
29010: PUSH
29011: LD_INT 110
29013: PUSH
29014: LD_INT 70
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: LIST
29021: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29022: LD_VAR 0 6
29026: PPUSH
29027: CALL_OW 265
29031: PUSH
29032: LD_INT 25
29034: EQUAL
29035: IFFALSE 29056
// points := [ 80 , 65 , 100 ] ;
29037: LD_ADDR_VAR 0 9
29041: PUSH
29042: LD_INT 80
29044: PUSH
29045: LD_INT 65
29047: PUSH
29048: LD_INT 100
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: LIST
29055: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29056: LD_VAR 0 6
29060: PPUSH
29061: CALL_OW 263
29065: PUSH
29066: LD_INT 1
29068: EQUAL
29069: IFFALSE 29104
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29071: LD_ADDR_VAR 0 10
29075: PUSH
29076: LD_VAR 0 10
29080: PUSH
29081: LD_VAR 0 6
29085: PPUSH
29086: CALL_OW 311
29090: PPUSH
29091: LD_INT 3
29093: PPUSH
29094: CALL_OW 259
29098: PUSH
29099: LD_INT 4
29101: MUL
29102: MUL
29103: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29104: LD_VAR 0 6
29108: PPUSH
29109: CALL_OW 263
29113: PUSH
29114: LD_INT 2
29116: EQUAL
29117: IFFALSE 29168
// begin j := IsControledBy ( i ) ;
29119: LD_ADDR_VAR 0 7
29123: PUSH
29124: LD_VAR 0 6
29128: PPUSH
29129: CALL_OW 312
29133: ST_TO_ADDR
// if j then
29134: LD_VAR 0 7
29138: IFFALSE 29168
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29140: LD_ADDR_VAR 0 10
29144: PUSH
29145: LD_VAR 0 10
29149: PUSH
29150: LD_VAR 0 7
29154: PPUSH
29155: LD_INT 3
29157: PPUSH
29158: CALL_OW 259
29162: PUSH
29163: LD_INT 3
29165: MUL
29166: MUL
29167: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29168: LD_VAR 0 6
29172: PPUSH
29173: CALL_OW 264
29177: PUSH
29178: LD_INT 5
29180: PUSH
29181: LD_INT 6
29183: PUSH
29184: LD_INT 46
29186: PUSH
29187: LD_INT 44
29189: PUSH
29190: LD_INT 47
29192: PUSH
29193: LD_INT 45
29195: PUSH
29196: LD_INT 28
29198: PUSH
29199: LD_INT 7
29201: PUSH
29202: LD_INT 27
29204: PUSH
29205: LD_INT 29
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: IN
29220: PUSH
29221: LD_VAR 0 1
29225: PPUSH
29226: LD_INT 52
29228: PPUSH
29229: CALL_OW 321
29233: PUSH
29234: LD_INT 2
29236: EQUAL
29237: AND
29238: IFFALSE 29255
// bpoints := bpoints * 1.2 ;
29240: LD_ADDR_VAR 0 10
29244: PUSH
29245: LD_VAR 0 10
29249: PUSH
29250: LD_REAL  1.20000000000000E+0000
29253: MUL
29254: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29255: LD_VAR 0 6
29259: PPUSH
29260: CALL_OW 264
29264: PUSH
29265: LD_INT 6
29267: PUSH
29268: LD_INT 46
29270: PUSH
29271: LD_INT 47
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: LIST
29278: IN
29279: IFFALSE 29296
// bpoints := bpoints * 1.2 ;
29281: LD_ADDR_VAR 0 10
29285: PUSH
29286: LD_VAR 0 10
29290: PUSH
29291: LD_REAL  1.20000000000000E+0000
29294: MUL
29295: ST_TO_ADDR
// end ; unit_building :
29296: GO 29310
29298: LD_INT 3
29300: DOUBLE
29301: EQUAL
29302: IFTRUE 29306
29304: GO 29309
29306: POP
// ; end ;
29307: GO 29310
29309: POP
// for j = 1 to 3 do
29310: LD_ADDR_VAR 0 7
29314: PUSH
29315: DOUBLE
29316: LD_INT 1
29318: DEC
29319: ST_TO_ADDR
29320: LD_INT 3
29322: PUSH
29323: FOR_TO
29324: IFFALSE 29377
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29326: LD_ADDR_VAR 0 5
29330: PUSH
29331: LD_VAR 0 5
29335: PPUSH
29336: LD_VAR 0 7
29340: PPUSH
29341: LD_VAR 0 5
29345: PUSH
29346: LD_VAR 0 7
29350: ARRAY
29351: PUSH
29352: LD_VAR 0 9
29356: PUSH
29357: LD_VAR 0 7
29361: ARRAY
29362: PUSH
29363: LD_VAR 0 10
29367: MUL
29368: PLUS
29369: PPUSH
29370: CALL_OW 1
29374: ST_TO_ADDR
29375: GO 29323
29377: POP
29378: POP
// end ;
29379: GO 27858
29381: POP
29382: POP
// result := Replace ( result , 4 , tmp ) ;
29383: LD_ADDR_VAR 0 5
29387: PUSH
29388: LD_VAR 0 5
29392: PPUSH
29393: LD_INT 4
29395: PPUSH
29396: LD_VAR 0 8
29400: PPUSH
29401: CALL_OW 1
29405: ST_TO_ADDR
// end ;
29406: LD_VAR 0 5
29410: RET
// export function DangerAtRange ( unit , range ) ; begin
29411: LD_INT 0
29413: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29414: LD_ADDR_VAR 0 3
29418: PUSH
29419: LD_VAR 0 1
29423: PPUSH
29424: CALL_OW 255
29428: PPUSH
29429: LD_VAR 0 1
29433: PPUSH
29434: CALL_OW 250
29438: PPUSH
29439: LD_VAR 0 1
29443: PPUSH
29444: CALL_OW 251
29448: PPUSH
29449: LD_VAR 0 2
29453: PPUSH
29454: CALL 27710 0 4
29458: ST_TO_ADDR
// end ;
29459: LD_VAR 0 3
29463: RET
// export function DangerInArea ( side , area ) ; begin
29464: LD_INT 0
29466: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29467: LD_ADDR_VAR 0 3
29471: PUSH
29472: LD_VAR 0 2
29476: PPUSH
29477: LD_INT 81
29479: PUSH
29480: LD_VAR 0 1
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PPUSH
29489: CALL_OW 70
29493: ST_TO_ADDR
// end ;
29494: LD_VAR 0 3
29498: RET
// export function IsExtension ( b ) ; begin
29499: LD_INT 0
29501: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29502: LD_ADDR_VAR 0 2
29506: PUSH
29507: LD_VAR 0 1
29511: PUSH
29512: LD_INT 23
29514: PUSH
29515: LD_INT 20
29517: PUSH
29518: LD_INT 22
29520: PUSH
29521: LD_INT 17
29523: PUSH
29524: LD_INT 24
29526: PUSH
29527: LD_INT 21
29529: PUSH
29530: LD_INT 19
29532: PUSH
29533: LD_INT 16
29535: PUSH
29536: LD_INT 25
29538: PUSH
29539: LD_INT 18
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: IN
29554: ST_TO_ADDR
// end ;
29555: LD_VAR 0 2
29559: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29560: LD_INT 0
29562: PPUSH
29563: PPUSH
29564: PPUSH
// result := [ ] ;
29565: LD_ADDR_VAR 0 4
29569: PUSH
29570: EMPTY
29571: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29572: LD_ADDR_VAR 0 5
29576: PUSH
29577: LD_VAR 0 2
29581: PPUSH
29582: LD_INT 21
29584: PUSH
29585: LD_INT 3
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PPUSH
29592: CALL_OW 70
29596: ST_TO_ADDR
// if not tmp then
29597: LD_VAR 0 5
29601: NOT
29602: IFFALSE 29606
// exit ;
29604: GO 29670
// if checkLink then
29606: LD_VAR 0 3
29610: IFFALSE 29660
// begin for i in tmp do
29612: LD_ADDR_VAR 0 6
29616: PUSH
29617: LD_VAR 0 5
29621: PUSH
29622: FOR_IN
29623: IFFALSE 29658
// if GetBase ( i ) <> base then
29625: LD_VAR 0 6
29629: PPUSH
29630: CALL_OW 274
29634: PUSH
29635: LD_VAR 0 1
29639: NONEQUAL
29640: IFFALSE 29656
// ComLinkToBase ( base , i ) ;
29642: LD_VAR 0 1
29646: PPUSH
29647: LD_VAR 0 6
29651: PPUSH
29652: CALL_OW 169
29656: GO 29622
29658: POP
29659: POP
// end ; result := tmp ;
29660: LD_ADDR_VAR 0 4
29664: PUSH
29665: LD_VAR 0 5
29669: ST_TO_ADDR
// end ;
29670: LD_VAR 0 4
29674: RET
// export function ComComplete ( units , b ) ; var i ; begin
29675: LD_INT 0
29677: PPUSH
29678: PPUSH
// if not units then
29679: LD_VAR 0 1
29683: NOT
29684: IFFALSE 29688
// exit ;
29686: GO 29778
// for i in units do
29688: LD_ADDR_VAR 0 4
29692: PUSH
29693: LD_VAR 0 1
29697: PUSH
29698: FOR_IN
29699: IFFALSE 29776
// if BuildingStatus ( b ) = bs_build then
29701: LD_VAR 0 2
29705: PPUSH
29706: CALL_OW 461
29710: PUSH
29711: LD_INT 1
29713: EQUAL
29714: IFFALSE 29774
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29716: LD_VAR 0 4
29720: PPUSH
29721: LD_STRING h
29723: PUSH
29724: LD_VAR 0 2
29728: PPUSH
29729: CALL_OW 250
29733: PUSH
29734: LD_VAR 0 2
29738: PPUSH
29739: CALL_OW 251
29743: PUSH
29744: LD_VAR 0 2
29748: PUSH
29749: LD_INT 0
29751: PUSH
29752: LD_INT 0
29754: PUSH
29755: LD_INT 0
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: PUSH
29767: EMPTY
29768: LIST
29769: PPUSH
29770: CALL_OW 446
29774: GO 29698
29776: POP
29777: POP
// end ;
29778: LD_VAR 0 3
29782: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29783: LD_INT 0
29785: PPUSH
29786: PPUSH
29787: PPUSH
29788: PPUSH
29789: PPUSH
29790: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29791: LD_VAR 0 1
29795: NOT
29796: PUSH
29797: LD_VAR 0 1
29801: PPUSH
29802: CALL_OW 263
29806: PUSH
29807: LD_INT 2
29809: NONEQUAL
29810: OR
29811: IFFALSE 29815
// exit ;
29813: GO 30131
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29815: LD_ADDR_VAR 0 6
29819: PUSH
29820: LD_INT 22
29822: PUSH
29823: LD_VAR 0 1
29827: PPUSH
29828: CALL_OW 255
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 2
29839: PUSH
29840: LD_INT 30
29842: PUSH
29843: LD_INT 36
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 34
29852: PUSH
29853: LD_INT 31
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: LIST
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PPUSH
29869: CALL_OW 69
29873: ST_TO_ADDR
// if not tmp then
29874: LD_VAR 0 6
29878: NOT
29879: IFFALSE 29883
// exit ;
29881: GO 30131
// result := [ ] ;
29883: LD_ADDR_VAR 0 2
29887: PUSH
29888: EMPTY
29889: ST_TO_ADDR
// for i in tmp do
29890: LD_ADDR_VAR 0 3
29894: PUSH
29895: LD_VAR 0 6
29899: PUSH
29900: FOR_IN
29901: IFFALSE 29972
// begin t := UnitsInside ( i ) ;
29903: LD_ADDR_VAR 0 4
29907: PUSH
29908: LD_VAR 0 3
29912: PPUSH
29913: CALL_OW 313
29917: ST_TO_ADDR
// if t then
29918: LD_VAR 0 4
29922: IFFALSE 29970
// for j in t do
29924: LD_ADDR_VAR 0 7
29928: PUSH
29929: LD_VAR 0 4
29933: PUSH
29934: FOR_IN
29935: IFFALSE 29968
// result := Replace ( result , result + 1 , j ) ;
29937: LD_ADDR_VAR 0 2
29941: PUSH
29942: LD_VAR 0 2
29946: PPUSH
29947: LD_VAR 0 2
29951: PUSH
29952: LD_INT 1
29954: PLUS
29955: PPUSH
29956: LD_VAR 0 7
29960: PPUSH
29961: CALL_OW 1
29965: ST_TO_ADDR
29966: GO 29934
29968: POP
29969: POP
// end ;
29970: GO 29900
29972: POP
29973: POP
// if not result then
29974: LD_VAR 0 2
29978: NOT
29979: IFFALSE 29983
// exit ;
29981: GO 30131
// mech := result [ 1 ] ;
29983: LD_ADDR_VAR 0 5
29987: PUSH
29988: LD_VAR 0 2
29992: PUSH
29993: LD_INT 1
29995: ARRAY
29996: ST_TO_ADDR
// if result > 1 then
29997: LD_VAR 0 2
30001: PUSH
30002: LD_INT 1
30004: GREATER
30005: IFFALSE 30117
// begin for i = 2 to result do
30007: LD_ADDR_VAR 0 3
30011: PUSH
30012: DOUBLE
30013: LD_INT 2
30015: DEC
30016: ST_TO_ADDR
30017: LD_VAR 0 2
30021: PUSH
30022: FOR_TO
30023: IFFALSE 30115
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30025: LD_ADDR_VAR 0 4
30029: PUSH
30030: LD_VAR 0 2
30034: PUSH
30035: LD_VAR 0 3
30039: ARRAY
30040: PPUSH
30041: LD_INT 3
30043: PPUSH
30044: CALL_OW 259
30048: PUSH
30049: LD_VAR 0 2
30053: PUSH
30054: LD_VAR 0 3
30058: ARRAY
30059: PPUSH
30060: CALL_OW 432
30064: MINUS
30065: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30066: LD_VAR 0 4
30070: PUSH
30071: LD_VAR 0 5
30075: PPUSH
30076: LD_INT 3
30078: PPUSH
30079: CALL_OW 259
30083: PUSH
30084: LD_VAR 0 5
30088: PPUSH
30089: CALL_OW 432
30093: MINUS
30094: GREATEREQUAL
30095: IFFALSE 30113
// mech := result [ i ] ;
30097: LD_ADDR_VAR 0 5
30101: PUSH
30102: LD_VAR 0 2
30106: PUSH
30107: LD_VAR 0 3
30111: ARRAY
30112: ST_TO_ADDR
// end ;
30113: GO 30022
30115: POP
30116: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30117: LD_VAR 0 1
30121: PPUSH
30122: LD_VAR 0 5
30126: PPUSH
30127: CALL_OW 135
// end ;
30131: LD_VAR 0 2
30135: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30136: LD_INT 0
30138: PPUSH
30139: PPUSH
30140: PPUSH
30141: PPUSH
30142: PPUSH
30143: PPUSH
30144: PPUSH
30145: PPUSH
30146: PPUSH
30147: PPUSH
30148: PPUSH
30149: PPUSH
30150: PPUSH
// result := [ ] ;
30151: LD_ADDR_VAR 0 7
30155: PUSH
30156: EMPTY
30157: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30158: LD_VAR 0 1
30162: PPUSH
30163: CALL_OW 266
30167: PUSH
30168: LD_INT 0
30170: PUSH
30171: LD_INT 1
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: IN
30178: NOT
30179: IFFALSE 30183
// exit ;
30181: GO 31817
// if name then
30183: LD_VAR 0 3
30187: IFFALSE 30203
// SetBName ( base_dep , name ) ;
30189: LD_VAR 0 1
30193: PPUSH
30194: LD_VAR 0 3
30198: PPUSH
30199: CALL_OW 500
// base := GetBase ( base_dep ) ;
30203: LD_ADDR_VAR 0 15
30207: PUSH
30208: LD_VAR 0 1
30212: PPUSH
30213: CALL_OW 274
30217: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30218: LD_ADDR_VAR 0 16
30222: PUSH
30223: LD_VAR 0 1
30227: PPUSH
30228: CALL_OW 255
30232: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30233: LD_ADDR_VAR 0 17
30237: PUSH
30238: LD_VAR 0 1
30242: PPUSH
30243: CALL_OW 248
30247: ST_TO_ADDR
// if sources then
30248: LD_VAR 0 5
30252: IFFALSE 30299
// for i = 1 to 3 do
30254: LD_ADDR_VAR 0 8
30258: PUSH
30259: DOUBLE
30260: LD_INT 1
30262: DEC
30263: ST_TO_ADDR
30264: LD_INT 3
30266: PUSH
30267: FOR_TO
30268: IFFALSE 30297
// AddResourceType ( base , i , sources [ i ] ) ;
30270: LD_VAR 0 15
30274: PPUSH
30275: LD_VAR 0 8
30279: PPUSH
30280: LD_VAR 0 5
30284: PUSH
30285: LD_VAR 0 8
30289: ARRAY
30290: PPUSH
30291: CALL_OW 276
30295: GO 30267
30297: POP
30298: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30299: LD_ADDR_VAR 0 18
30303: PUSH
30304: LD_VAR 0 15
30308: PPUSH
30309: LD_VAR 0 2
30313: PPUSH
30314: LD_INT 1
30316: PPUSH
30317: CALL 29560 0 3
30321: ST_TO_ADDR
// InitHc ;
30322: CALL_OW 19
// InitUc ;
30326: CALL_OW 18
// uc_side := side ;
30330: LD_ADDR_OWVAR 20
30334: PUSH
30335: LD_VAR 0 16
30339: ST_TO_ADDR
// uc_nation := nation ;
30340: LD_ADDR_OWVAR 21
30344: PUSH
30345: LD_VAR 0 17
30349: ST_TO_ADDR
// if buildings then
30350: LD_VAR 0 18
30354: IFFALSE 31676
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30356: LD_ADDR_VAR 0 19
30360: PUSH
30361: LD_VAR 0 18
30365: PPUSH
30366: LD_INT 2
30368: PUSH
30369: LD_INT 30
30371: PUSH
30372: LD_INT 29
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 30
30381: PUSH
30382: LD_INT 30
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: LIST
30393: PPUSH
30394: CALL_OW 72
30398: ST_TO_ADDR
// if tmp then
30399: LD_VAR 0 19
30403: IFFALSE 30451
// for i in tmp do
30405: LD_ADDR_VAR 0 8
30409: PUSH
30410: LD_VAR 0 19
30414: PUSH
30415: FOR_IN
30416: IFFALSE 30449
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30418: LD_VAR 0 8
30422: PPUSH
30423: CALL_OW 250
30427: PPUSH
30428: LD_VAR 0 8
30432: PPUSH
30433: CALL_OW 251
30437: PPUSH
30438: LD_VAR 0 16
30442: PPUSH
30443: CALL_OW 441
30447: GO 30415
30449: POP
30450: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30451: LD_VAR 0 18
30455: PPUSH
30456: LD_INT 2
30458: PUSH
30459: LD_INT 30
30461: PUSH
30462: LD_INT 32
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 30
30471: PUSH
30472: LD_INT 33
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: LIST
30483: PPUSH
30484: CALL_OW 72
30488: IFFALSE 30576
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30490: LD_ADDR_VAR 0 8
30494: PUSH
30495: LD_VAR 0 18
30499: PPUSH
30500: LD_INT 2
30502: PUSH
30503: LD_INT 30
30505: PUSH
30506: LD_INT 32
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 30
30515: PUSH
30516: LD_INT 33
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: LIST
30527: PPUSH
30528: CALL_OW 72
30532: PUSH
30533: FOR_IN
30534: IFFALSE 30574
// begin if not GetBWeapon ( i ) then
30536: LD_VAR 0 8
30540: PPUSH
30541: CALL_OW 269
30545: NOT
30546: IFFALSE 30572
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30548: LD_VAR 0 8
30552: PPUSH
30553: LD_VAR 0 8
30557: PPUSH
30558: LD_VAR 0 2
30562: PPUSH
30563: CALL 31822 0 2
30567: PPUSH
30568: CALL_OW 431
// end ;
30572: GO 30533
30574: POP
30575: POP
// end ; for i = 1 to personel do
30576: LD_ADDR_VAR 0 8
30580: PUSH
30581: DOUBLE
30582: LD_INT 1
30584: DEC
30585: ST_TO_ADDR
30586: LD_VAR 0 6
30590: PUSH
30591: FOR_TO
30592: IFFALSE 31656
// begin if i > 4 then
30594: LD_VAR 0 8
30598: PUSH
30599: LD_INT 4
30601: GREATER
30602: IFFALSE 30606
// break ;
30604: GO 31656
// case i of 1 :
30606: LD_VAR 0 8
30610: PUSH
30611: LD_INT 1
30613: DOUBLE
30614: EQUAL
30615: IFTRUE 30619
30617: GO 30699
30619: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30620: LD_ADDR_VAR 0 12
30624: PUSH
30625: LD_VAR 0 18
30629: PPUSH
30630: LD_INT 22
30632: PUSH
30633: LD_VAR 0 16
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 58
30644: PUSH
30645: EMPTY
30646: LIST
30647: PUSH
30648: LD_INT 2
30650: PUSH
30651: LD_INT 30
30653: PUSH
30654: LD_INT 32
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 30
30663: PUSH
30664: LD_INT 4
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 30
30673: PUSH
30674: LD_INT 5
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: LIST
30691: PPUSH
30692: CALL_OW 72
30696: ST_TO_ADDR
30697: GO 30921
30699: LD_INT 2
30701: DOUBLE
30702: EQUAL
30703: IFTRUE 30707
30705: GO 30769
30707: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30708: LD_ADDR_VAR 0 12
30712: PUSH
30713: LD_VAR 0 18
30717: PPUSH
30718: LD_INT 22
30720: PUSH
30721: LD_VAR 0 16
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 2
30732: PUSH
30733: LD_INT 30
30735: PUSH
30736: LD_INT 0
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 30
30745: PUSH
30746: LD_INT 1
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: LIST
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PPUSH
30762: CALL_OW 72
30766: ST_TO_ADDR
30767: GO 30921
30769: LD_INT 3
30771: DOUBLE
30772: EQUAL
30773: IFTRUE 30777
30775: GO 30839
30777: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30778: LD_ADDR_VAR 0 12
30782: PUSH
30783: LD_VAR 0 18
30787: PPUSH
30788: LD_INT 22
30790: PUSH
30791: LD_VAR 0 16
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 2
30802: PUSH
30803: LD_INT 30
30805: PUSH
30806: LD_INT 2
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 30
30815: PUSH
30816: LD_INT 3
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: LIST
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PPUSH
30832: CALL_OW 72
30836: ST_TO_ADDR
30837: GO 30921
30839: LD_INT 4
30841: DOUBLE
30842: EQUAL
30843: IFTRUE 30847
30845: GO 30920
30847: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30848: LD_ADDR_VAR 0 12
30852: PUSH
30853: LD_VAR 0 18
30857: PPUSH
30858: LD_INT 22
30860: PUSH
30861: LD_VAR 0 16
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 2
30872: PUSH
30873: LD_INT 30
30875: PUSH
30876: LD_INT 6
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 30
30885: PUSH
30886: LD_INT 7
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 30
30895: PUSH
30896: LD_INT 8
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PPUSH
30913: CALL_OW 72
30917: ST_TO_ADDR
30918: GO 30921
30920: POP
// if i = 1 then
30921: LD_VAR 0 8
30925: PUSH
30926: LD_INT 1
30928: EQUAL
30929: IFFALSE 31040
// begin tmp := [ ] ;
30931: LD_ADDR_VAR 0 19
30935: PUSH
30936: EMPTY
30937: ST_TO_ADDR
// for j in f do
30938: LD_ADDR_VAR 0 9
30942: PUSH
30943: LD_VAR 0 12
30947: PUSH
30948: FOR_IN
30949: IFFALSE 31022
// if GetBType ( j ) = b_bunker then
30951: LD_VAR 0 9
30955: PPUSH
30956: CALL_OW 266
30960: PUSH
30961: LD_INT 32
30963: EQUAL
30964: IFFALSE 30991
// tmp := Insert ( tmp , 1 , j ) else
30966: LD_ADDR_VAR 0 19
30970: PUSH
30971: LD_VAR 0 19
30975: PPUSH
30976: LD_INT 1
30978: PPUSH
30979: LD_VAR 0 9
30983: PPUSH
30984: CALL_OW 2
30988: ST_TO_ADDR
30989: GO 31020
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30991: LD_ADDR_VAR 0 19
30995: PUSH
30996: LD_VAR 0 19
31000: PPUSH
31001: LD_VAR 0 19
31005: PUSH
31006: LD_INT 1
31008: PLUS
31009: PPUSH
31010: LD_VAR 0 9
31014: PPUSH
31015: CALL_OW 2
31019: ST_TO_ADDR
31020: GO 30948
31022: POP
31023: POP
// if tmp then
31024: LD_VAR 0 19
31028: IFFALSE 31040
// f := tmp ;
31030: LD_ADDR_VAR 0 12
31034: PUSH
31035: LD_VAR 0 19
31039: ST_TO_ADDR
// end ; x := personel [ i ] ;
31040: LD_ADDR_VAR 0 13
31044: PUSH
31045: LD_VAR 0 6
31049: PUSH
31050: LD_VAR 0 8
31054: ARRAY
31055: ST_TO_ADDR
// if x = - 1 then
31056: LD_VAR 0 13
31060: PUSH
31061: LD_INT 1
31063: NEG
31064: EQUAL
31065: IFFALSE 31274
// begin for j in f do
31067: LD_ADDR_VAR 0 9
31071: PUSH
31072: LD_VAR 0 12
31076: PUSH
31077: FOR_IN
31078: IFFALSE 31270
// repeat InitHc ;
31080: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31084: LD_VAR 0 9
31088: PPUSH
31089: CALL_OW 266
31093: PUSH
31094: LD_INT 5
31096: EQUAL
31097: IFFALSE 31167
// begin if UnitsInside ( j ) < 3 then
31099: LD_VAR 0 9
31103: PPUSH
31104: CALL_OW 313
31108: PUSH
31109: LD_INT 3
31111: LESS
31112: IFFALSE 31148
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31114: LD_INT 0
31116: PPUSH
31117: LD_INT 5
31119: PUSH
31120: LD_INT 8
31122: PUSH
31123: LD_INT 9
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: LIST
31130: PUSH
31131: LD_VAR 0 17
31135: ARRAY
31136: PPUSH
31137: LD_VAR 0 4
31141: PPUSH
31142: CALL_OW 380
31146: GO 31165
// PrepareHuman ( false , i , skill ) ;
31148: LD_INT 0
31150: PPUSH
31151: LD_VAR 0 8
31155: PPUSH
31156: LD_VAR 0 4
31160: PPUSH
31161: CALL_OW 380
// end else
31165: GO 31184
// PrepareHuman ( false , i , skill ) ;
31167: LD_INT 0
31169: PPUSH
31170: LD_VAR 0 8
31174: PPUSH
31175: LD_VAR 0 4
31179: PPUSH
31180: CALL_OW 380
// un := CreateHuman ;
31184: LD_ADDR_VAR 0 14
31188: PUSH
31189: CALL_OW 44
31193: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31194: LD_ADDR_VAR 0 7
31198: PUSH
31199: LD_VAR 0 7
31203: PPUSH
31204: LD_INT 1
31206: PPUSH
31207: LD_VAR 0 14
31211: PPUSH
31212: CALL_OW 2
31216: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31217: LD_VAR 0 14
31221: PPUSH
31222: LD_VAR 0 9
31226: PPUSH
31227: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31231: LD_VAR 0 9
31235: PPUSH
31236: CALL_OW 313
31240: PUSH
31241: LD_INT 6
31243: EQUAL
31244: PUSH
31245: LD_VAR 0 9
31249: PPUSH
31250: CALL_OW 266
31254: PUSH
31255: LD_INT 32
31257: PUSH
31258: LD_INT 31
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: IN
31265: OR
31266: IFFALSE 31080
31268: GO 31077
31270: POP
31271: POP
// end else
31272: GO 31654
// for j = 1 to x do
31274: LD_ADDR_VAR 0 9
31278: PUSH
31279: DOUBLE
31280: LD_INT 1
31282: DEC
31283: ST_TO_ADDR
31284: LD_VAR 0 13
31288: PUSH
31289: FOR_TO
31290: IFFALSE 31652
// begin InitHc ;
31292: CALL_OW 19
// if not f then
31296: LD_VAR 0 12
31300: NOT
31301: IFFALSE 31390
// begin PrepareHuman ( false , i , skill ) ;
31303: LD_INT 0
31305: PPUSH
31306: LD_VAR 0 8
31310: PPUSH
31311: LD_VAR 0 4
31315: PPUSH
31316: CALL_OW 380
// un := CreateHuman ;
31320: LD_ADDR_VAR 0 14
31324: PUSH
31325: CALL_OW 44
31329: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31330: LD_ADDR_VAR 0 7
31334: PUSH
31335: LD_VAR 0 7
31339: PPUSH
31340: LD_INT 1
31342: PPUSH
31343: LD_VAR 0 14
31347: PPUSH
31348: CALL_OW 2
31352: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31353: LD_VAR 0 14
31357: PPUSH
31358: LD_VAR 0 1
31362: PPUSH
31363: CALL_OW 250
31367: PPUSH
31368: LD_VAR 0 1
31372: PPUSH
31373: CALL_OW 251
31377: PPUSH
31378: LD_INT 10
31380: PPUSH
31381: LD_INT 0
31383: PPUSH
31384: CALL_OW 50
// continue ;
31388: GO 31289
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31390: LD_VAR 0 12
31394: PUSH
31395: LD_INT 1
31397: ARRAY
31398: PPUSH
31399: CALL_OW 313
31403: PUSH
31404: LD_VAR 0 12
31408: PUSH
31409: LD_INT 1
31411: ARRAY
31412: PPUSH
31413: CALL_OW 266
31417: PUSH
31418: LD_INT 32
31420: PUSH
31421: LD_INT 31
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: IN
31428: AND
31429: PUSH
31430: LD_VAR 0 12
31434: PUSH
31435: LD_INT 1
31437: ARRAY
31438: PPUSH
31439: CALL_OW 313
31443: PUSH
31444: LD_INT 6
31446: EQUAL
31447: OR
31448: IFFALSE 31468
// f := Delete ( f , 1 ) ;
31450: LD_ADDR_VAR 0 12
31454: PUSH
31455: LD_VAR 0 12
31459: PPUSH
31460: LD_INT 1
31462: PPUSH
31463: CALL_OW 3
31467: ST_TO_ADDR
// if not f then
31468: LD_VAR 0 12
31472: NOT
31473: IFFALSE 31491
// begin x := x + 2 ;
31475: LD_ADDR_VAR 0 13
31479: PUSH
31480: LD_VAR 0 13
31484: PUSH
31485: LD_INT 2
31487: PLUS
31488: ST_TO_ADDR
// continue ;
31489: GO 31289
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31491: LD_VAR 0 12
31495: PUSH
31496: LD_INT 1
31498: ARRAY
31499: PPUSH
31500: CALL_OW 266
31504: PUSH
31505: LD_INT 5
31507: EQUAL
31508: IFFALSE 31582
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31510: LD_VAR 0 12
31514: PUSH
31515: LD_INT 1
31517: ARRAY
31518: PPUSH
31519: CALL_OW 313
31523: PUSH
31524: LD_INT 3
31526: LESS
31527: IFFALSE 31563
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31529: LD_INT 0
31531: PPUSH
31532: LD_INT 5
31534: PUSH
31535: LD_INT 8
31537: PUSH
31538: LD_INT 9
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: LIST
31545: PUSH
31546: LD_VAR 0 17
31550: ARRAY
31551: PPUSH
31552: LD_VAR 0 4
31556: PPUSH
31557: CALL_OW 380
31561: GO 31580
// PrepareHuman ( false , i , skill ) ;
31563: LD_INT 0
31565: PPUSH
31566: LD_VAR 0 8
31570: PPUSH
31571: LD_VAR 0 4
31575: PPUSH
31576: CALL_OW 380
// end else
31580: GO 31599
// PrepareHuman ( false , i , skill ) ;
31582: LD_INT 0
31584: PPUSH
31585: LD_VAR 0 8
31589: PPUSH
31590: LD_VAR 0 4
31594: PPUSH
31595: CALL_OW 380
// un := CreateHuman ;
31599: LD_ADDR_VAR 0 14
31603: PUSH
31604: CALL_OW 44
31608: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31609: LD_ADDR_VAR 0 7
31613: PUSH
31614: LD_VAR 0 7
31618: PPUSH
31619: LD_INT 1
31621: PPUSH
31622: LD_VAR 0 14
31626: PPUSH
31627: CALL_OW 2
31631: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31632: LD_VAR 0 14
31636: PPUSH
31637: LD_VAR 0 12
31641: PUSH
31642: LD_INT 1
31644: ARRAY
31645: PPUSH
31646: CALL_OW 52
// end ;
31650: GO 31289
31652: POP
31653: POP
// end ;
31654: GO 30591
31656: POP
31657: POP
// result := result ^ buildings ;
31658: LD_ADDR_VAR 0 7
31662: PUSH
31663: LD_VAR 0 7
31667: PUSH
31668: LD_VAR 0 18
31672: ADD
31673: ST_TO_ADDR
// end else
31674: GO 31817
// begin for i = 1 to personel do
31676: LD_ADDR_VAR 0 8
31680: PUSH
31681: DOUBLE
31682: LD_INT 1
31684: DEC
31685: ST_TO_ADDR
31686: LD_VAR 0 6
31690: PUSH
31691: FOR_TO
31692: IFFALSE 31815
// begin if i > 4 then
31694: LD_VAR 0 8
31698: PUSH
31699: LD_INT 4
31701: GREATER
31702: IFFALSE 31706
// break ;
31704: GO 31815
// x := personel [ i ] ;
31706: LD_ADDR_VAR 0 13
31710: PUSH
31711: LD_VAR 0 6
31715: PUSH
31716: LD_VAR 0 8
31720: ARRAY
31721: ST_TO_ADDR
// if x = - 1 then
31722: LD_VAR 0 13
31726: PUSH
31727: LD_INT 1
31729: NEG
31730: EQUAL
31731: IFFALSE 31735
// continue ;
31733: GO 31691
// PrepareHuman ( false , i , skill ) ;
31735: LD_INT 0
31737: PPUSH
31738: LD_VAR 0 8
31742: PPUSH
31743: LD_VAR 0 4
31747: PPUSH
31748: CALL_OW 380
// un := CreateHuman ;
31752: LD_ADDR_VAR 0 14
31756: PUSH
31757: CALL_OW 44
31761: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31762: LD_VAR 0 14
31766: PPUSH
31767: LD_VAR 0 1
31771: PPUSH
31772: CALL_OW 250
31776: PPUSH
31777: LD_VAR 0 1
31781: PPUSH
31782: CALL_OW 251
31786: PPUSH
31787: LD_INT 10
31789: PPUSH
31790: LD_INT 0
31792: PPUSH
31793: CALL_OW 50
// result := result ^ un ;
31797: LD_ADDR_VAR 0 7
31801: PUSH
31802: LD_VAR 0 7
31806: PUSH
31807: LD_VAR 0 14
31811: ADD
31812: ST_TO_ADDR
// end ;
31813: GO 31691
31815: POP
31816: POP
// end ; end ;
31817: LD_VAR 0 7
31821: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31822: LD_INT 0
31824: PPUSH
31825: PPUSH
31826: PPUSH
31827: PPUSH
31828: PPUSH
31829: PPUSH
31830: PPUSH
31831: PPUSH
31832: PPUSH
31833: PPUSH
31834: PPUSH
31835: PPUSH
31836: PPUSH
31837: PPUSH
31838: PPUSH
31839: PPUSH
// result := false ;
31840: LD_ADDR_VAR 0 3
31844: PUSH
31845: LD_INT 0
31847: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31848: LD_VAR 0 1
31852: NOT
31853: PUSH
31854: LD_VAR 0 1
31858: PPUSH
31859: CALL_OW 266
31863: PUSH
31864: LD_INT 32
31866: PUSH
31867: LD_INT 33
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: IN
31874: NOT
31875: OR
31876: IFFALSE 31880
// exit ;
31878: GO 32989
// nat := GetNation ( tower ) ;
31880: LD_ADDR_VAR 0 12
31884: PUSH
31885: LD_VAR 0 1
31889: PPUSH
31890: CALL_OW 248
31894: ST_TO_ADDR
// side := GetSide ( tower ) ;
31895: LD_ADDR_VAR 0 16
31899: PUSH
31900: LD_VAR 0 1
31904: PPUSH
31905: CALL_OW 255
31909: ST_TO_ADDR
// x := GetX ( tower ) ;
31910: LD_ADDR_VAR 0 10
31914: PUSH
31915: LD_VAR 0 1
31919: PPUSH
31920: CALL_OW 250
31924: ST_TO_ADDR
// y := GetY ( tower ) ;
31925: LD_ADDR_VAR 0 11
31929: PUSH
31930: LD_VAR 0 1
31934: PPUSH
31935: CALL_OW 251
31939: ST_TO_ADDR
// if not x or not y then
31940: LD_VAR 0 10
31944: NOT
31945: PUSH
31946: LD_VAR 0 11
31950: NOT
31951: OR
31952: IFFALSE 31956
// exit ;
31954: GO 32989
// weapon := 0 ;
31956: LD_ADDR_VAR 0 18
31960: PUSH
31961: LD_INT 0
31963: ST_TO_ADDR
// fac_list := [ ] ;
31964: LD_ADDR_VAR 0 17
31968: PUSH
31969: EMPTY
31970: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31971: LD_ADDR_VAR 0 6
31975: PUSH
31976: LD_VAR 0 1
31980: PPUSH
31981: CALL_OW 274
31985: PPUSH
31986: LD_VAR 0 2
31990: PPUSH
31991: LD_INT 0
31993: PPUSH
31994: CALL 29560 0 3
31998: PPUSH
31999: LD_INT 30
32001: PUSH
32002: LD_INT 3
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PPUSH
32009: CALL_OW 72
32013: ST_TO_ADDR
// if not factories then
32014: LD_VAR 0 6
32018: NOT
32019: IFFALSE 32023
// exit ;
32021: GO 32989
// for i in factories do
32023: LD_ADDR_VAR 0 8
32027: PUSH
32028: LD_VAR 0 6
32032: PUSH
32033: FOR_IN
32034: IFFALSE 32059
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32036: LD_ADDR_VAR 0 17
32040: PUSH
32041: LD_VAR 0 17
32045: PUSH
32046: LD_VAR 0 8
32050: PPUSH
32051: CALL_OW 478
32055: UNION
32056: ST_TO_ADDR
32057: GO 32033
32059: POP
32060: POP
// if not fac_list then
32061: LD_VAR 0 17
32065: NOT
32066: IFFALSE 32070
// exit ;
32068: GO 32989
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32070: LD_ADDR_VAR 0 5
32074: PUSH
32075: LD_INT 4
32077: PUSH
32078: LD_INT 5
32080: PUSH
32081: LD_INT 9
32083: PUSH
32084: LD_INT 10
32086: PUSH
32087: LD_INT 6
32089: PUSH
32090: LD_INT 7
32092: PUSH
32093: LD_INT 11
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: PUSH
32105: LD_INT 27
32107: PUSH
32108: LD_INT 28
32110: PUSH
32111: LD_INT 26
32113: PUSH
32114: LD_INT 30
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 43
32125: PUSH
32126: LD_INT 44
32128: PUSH
32129: LD_INT 46
32131: PUSH
32132: LD_INT 45
32134: PUSH
32135: LD_INT 47
32137: PUSH
32138: LD_INT 49
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: LIST
32153: PUSH
32154: LD_VAR 0 12
32158: ARRAY
32159: ST_TO_ADDR
// list := list isect fac_list ;
32160: LD_ADDR_VAR 0 5
32164: PUSH
32165: LD_VAR 0 5
32169: PUSH
32170: LD_VAR 0 17
32174: ISECT
32175: ST_TO_ADDR
// if not list then
32176: LD_VAR 0 5
32180: NOT
32181: IFFALSE 32185
// exit ;
32183: GO 32989
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32185: LD_VAR 0 12
32189: PUSH
32190: LD_INT 3
32192: EQUAL
32193: PUSH
32194: LD_INT 49
32196: PUSH
32197: LD_VAR 0 5
32201: IN
32202: AND
32203: PUSH
32204: LD_INT 31
32206: PPUSH
32207: LD_VAR 0 16
32211: PPUSH
32212: CALL_OW 321
32216: PUSH
32217: LD_INT 2
32219: EQUAL
32220: AND
32221: IFFALSE 32281
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32223: LD_INT 22
32225: PUSH
32226: LD_VAR 0 16
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 35
32237: PUSH
32238: LD_INT 49
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 91
32247: PUSH
32248: LD_VAR 0 1
32252: PUSH
32253: LD_INT 10
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: LIST
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: LIST
32265: PPUSH
32266: CALL_OW 69
32270: NOT
32271: IFFALSE 32281
// weapon := ru_time_lapser ;
32273: LD_ADDR_VAR 0 18
32277: PUSH
32278: LD_INT 49
32280: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32281: LD_VAR 0 12
32285: PUSH
32286: LD_INT 1
32288: PUSH
32289: LD_INT 2
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: IN
32296: PUSH
32297: LD_INT 11
32299: PUSH
32300: LD_VAR 0 5
32304: IN
32305: PUSH
32306: LD_INT 30
32308: PUSH
32309: LD_VAR 0 5
32313: IN
32314: OR
32315: AND
32316: PUSH
32317: LD_INT 6
32319: PPUSH
32320: LD_VAR 0 16
32324: PPUSH
32325: CALL_OW 321
32329: PUSH
32330: LD_INT 2
32332: EQUAL
32333: AND
32334: IFFALSE 32499
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32336: LD_INT 22
32338: PUSH
32339: LD_VAR 0 16
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 2
32350: PUSH
32351: LD_INT 35
32353: PUSH
32354: LD_INT 11
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 35
32363: PUSH
32364: LD_INT 30
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 91
32378: PUSH
32379: LD_VAR 0 1
32383: PUSH
32384: LD_INT 18
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: LIST
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: LIST
32396: PPUSH
32397: CALL_OW 69
32401: NOT
32402: PUSH
32403: LD_INT 22
32405: PUSH
32406: LD_VAR 0 16
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 2
32417: PUSH
32418: LD_INT 30
32420: PUSH
32421: LD_INT 32
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 30
32430: PUSH
32431: LD_INT 33
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 91
32445: PUSH
32446: LD_VAR 0 1
32450: PUSH
32451: LD_INT 12
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: LIST
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: LIST
32463: PUSH
32464: EMPTY
32465: LIST
32466: PPUSH
32467: CALL_OW 69
32471: PUSH
32472: LD_INT 2
32474: GREATER
32475: AND
32476: IFFALSE 32499
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32478: LD_ADDR_VAR 0 18
32482: PUSH
32483: LD_INT 11
32485: PUSH
32486: LD_INT 30
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_VAR 0 12
32497: ARRAY
32498: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32499: LD_VAR 0 18
32503: NOT
32504: PUSH
32505: LD_INT 40
32507: PPUSH
32508: LD_VAR 0 16
32512: PPUSH
32513: CALL_OW 321
32517: PUSH
32518: LD_INT 2
32520: EQUAL
32521: AND
32522: PUSH
32523: LD_INT 7
32525: PUSH
32526: LD_VAR 0 5
32530: IN
32531: PUSH
32532: LD_INT 28
32534: PUSH
32535: LD_VAR 0 5
32539: IN
32540: OR
32541: PUSH
32542: LD_INT 45
32544: PUSH
32545: LD_VAR 0 5
32549: IN
32550: OR
32551: AND
32552: IFFALSE 32806
// begin hex := GetHexInfo ( x , y ) ;
32554: LD_ADDR_VAR 0 4
32558: PUSH
32559: LD_VAR 0 10
32563: PPUSH
32564: LD_VAR 0 11
32568: PPUSH
32569: CALL_OW 546
32573: ST_TO_ADDR
// if hex [ 1 ] then
32574: LD_VAR 0 4
32578: PUSH
32579: LD_INT 1
32581: ARRAY
32582: IFFALSE 32586
// exit ;
32584: GO 32989
// height := hex [ 2 ] ;
32586: LD_ADDR_VAR 0 15
32590: PUSH
32591: LD_VAR 0 4
32595: PUSH
32596: LD_INT 2
32598: ARRAY
32599: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32600: LD_ADDR_VAR 0 14
32604: PUSH
32605: LD_INT 0
32607: PUSH
32608: LD_INT 2
32610: PUSH
32611: LD_INT 3
32613: PUSH
32614: LD_INT 5
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: ST_TO_ADDR
// for i in tmp do
32623: LD_ADDR_VAR 0 8
32627: PUSH
32628: LD_VAR 0 14
32632: PUSH
32633: FOR_IN
32634: IFFALSE 32804
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32636: LD_ADDR_VAR 0 9
32640: PUSH
32641: LD_VAR 0 10
32645: PPUSH
32646: LD_VAR 0 8
32650: PPUSH
32651: LD_INT 5
32653: PPUSH
32654: CALL_OW 272
32658: PUSH
32659: LD_VAR 0 11
32663: PPUSH
32664: LD_VAR 0 8
32668: PPUSH
32669: LD_INT 5
32671: PPUSH
32672: CALL_OW 273
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32681: LD_VAR 0 9
32685: PUSH
32686: LD_INT 1
32688: ARRAY
32689: PPUSH
32690: LD_VAR 0 9
32694: PUSH
32695: LD_INT 2
32697: ARRAY
32698: PPUSH
32699: CALL_OW 488
32703: IFFALSE 32802
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32705: LD_ADDR_VAR 0 4
32709: PUSH
32710: LD_VAR 0 9
32714: PUSH
32715: LD_INT 1
32717: ARRAY
32718: PPUSH
32719: LD_VAR 0 9
32723: PUSH
32724: LD_INT 2
32726: ARRAY
32727: PPUSH
32728: CALL_OW 546
32732: ST_TO_ADDR
// if hex [ 1 ] then
32733: LD_VAR 0 4
32737: PUSH
32738: LD_INT 1
32740: ARRAY
32741: IFFALSE 32745
// continue ;
32743: GO 32633
// h := hex [ 2 ] ;
32745: LD_ADDR_VAR 0 13
32749: PUSH
32750: LD_VAR 0 4
32754: PUSH
32755: LD_INT 2
32757: ARRAY
32758: ST_TO_ADDR
// if h + 7 < height then
32759: LD_VAR 0 13
32763: PUSH
32764: LD_INT 7
32766: PLUS
32767: PUSH
32768: LD_VAR 0 15
32772: LESS
32773: IFFALSE 32802
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32775: LD_ADDR_VAR 0 18
32779: PUSH
32780: LD_INT 7
32782: PUSH
32783: LD_INT 28
32785: PUSH
32786: LD_INT 45
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: LIST
32793: PUSH
32794: LD_VAR 0 12
32798: ARRAY
32799: ST_TO_ADDR
// break ;
32800: GO 32804
// end ; end ; end ;
32802: GO 32633
32804: POP
32805: POP
// end ; if not weapon then
32806: LD_VAR 0 18
32810: NOT
32811: IFFALSE 32871
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32813: LD_ADDR_VAR 0 5
32817: PUSH
32818: LD_VAR 0 5
32822: PUSH
32823: LD_INT 11
32825: PUSH
32826: LD_INT 30
32828: PUSH
32829: LD_INT 49
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: LIST
32836: DIFF
32837: ST_TO_ADDR
// if not list then
32838: LD_VAR 0 5
32842: NOT
32843: IFFALSE 32847
// exit ;
32845: GO 32989
// weapon := list [ rand ( 1 , list ) ] ;
32847: LD_ADDR_VAR 0 18
32851: PUSH
32852: LD_VAR 0 5
32856: PUSH
32857: LD_INT 1
32859: PPUSH
32860: LD_VAR 0 5
32864: PPUSH
32865: CALL_OW 12
32869: ARRAY
32870: ST_TO_ADDR
// end ; if weapon then
32871: LD_VAR 0 18
32875: IFFALSE 32989
// begin tmp := CostOfWeapon ( weapon ) ;
32877: LD_ADDR_VAR 0 14
32881: PUSH
32882: LD_VAR 0 18
32886: PPUSH
32887: CALL_OW 451
32891: ST_TO_ADDR
// j := GetBase ( tower ) ;
32892: LD_ADDR_VAR 0 9
32896: PUSH
32897: LD_VAR 0 1
32901: PPUSH
32902: CALL_OW 274
32906: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32907: LD_VAR 0 9
32911: PPUSH
32912: LD_INT 1
32914: PPUSH
32915: CALL_OW 275
32919: PUSH
32920: LD_VAR 0 14
32924: PUSH
32925: LD_INT 1
32927: ARRAY
32928: GREATEREQUAL
32929: PUSH
32930: LD_VAR 0 9
32934: PPUSH
32935: LD_INT 2
32937: PPUSH
32938: CALL_OW 275
32942: PUSH
32943: LD_VAR 0 14
32947: PUSH
32948: LD_INT 2
32950: ARRAY
32951: GREATEREQUAL
32952: AND
32953: PUSH
32954: LD_VAR 0 9
32958: PPUSH
32959: LD_INT 3
32961: PPUSH
32962: CALL_OW 275
32966: PUSH
32967: LD_VAR 0 14
32971: PUSH
32972: LD_INT 3
32974: ARRAY
32975: GREATEREQUAL
32976: AND
32977: IFFALSE 32989
// result := weapon ;
32979: LD_ADDR_VAR 0 3
32983: PUSH
32984: LD_VAR 0 18
32988: ST_TO_ADDR
// end ; end ;
32989: LD_VAR 0 3
32993: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32994: LD_INT 0
32996: PPUSH
32997: PPUSH
// result := true ;
32998: LD_ADDR_VAR 0 3
33002: PUSH
33003: LD_INT 1
33005: ST_TO_ADDR
// if array1 = array2 then
33006: LD_VAR 0 1
33010: PUSH
33011: LD_VAR 0 2
33015: EQUAL
33016: IFFALSE 33076
// begin for i = 1 to array1 do
33018: LD_ADDR_VAR 0 4
33022: PUSH
33023: DOUBLE
33024: LD_INT 1
33026: DEC
33027: ST_TO_ADDR
33028: LD_VAR 0 1
33032: PUSH
33033: FOR_TO
33034: IFFALSE 33072
// if array1 [ i ] <> array2 [ i ] then
33036: LD_VAR 0 1
33040: PUSH
33041: LD_VAR 0 4
33045: ARRAY
33046: PUSH
33047: LD_VAR 0 2
33051: PUSH
33052: LD_VAR 0 4
33056: ARRAY
33057: NONEQUAL
33058: IFFALSE 33070
// begin result := false ;
33060: LD_ADDR_VAR 0 3
33064: PUSH
33065: LD_INT 0
33067: ST_TO_ADDR
// break ;
33068: GO 33072
// end ;
33070: GO 33033
33072: POP
33073: POP
// end else
33074: GO 33084
// result := false ;
33076: LD_ADDR_VAR 0 3
33080: PUSH
33081: LD_INT 0
33083: ST_TO_ADDR
// end ;
33084: LD_VAR 0 3
33088: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33089: LD_INT 0
33091: PPUSH
33092: PPUSH
// if not array1 or not array2 then
33093: LD_VAR 0 1
33097: NOT
33098: PUSH
33099: LD_VAR 0 2
33103: NOT
33104: OR
33105: IFFALSE 33109
// exit ;
33107: GO 33173
// result := true ;
33109: LD_ADDR_VAR 0 3
33113: PUSH
33114: LD_INT 1
33116: ST_TO_ADDR
// for i = 1 to array1 do
33117: LD_ADDR_VAR 0 4
33121: PUSH
33122: DOUBLE
33123: LD_INT 1
33125: DEC
33126: ST_TO_ADDR
33127: LD_VAR 0 1
33131: PUSH
33132: FOR_TO
33133: IFFALSE 33171
// if array1 [ i ] <> array2 [ i ] then
33135: LD_VAR 0 1
33139: PUSH
33140: LD_VAR 0 4
33144: ARRAY
33145: PUSH
33146: LD_VAR 0 2
33150: PUSH
33151: LD_VAR 0 4
33155: ARRAY
33156: NONEQUAL
33157: IFFALSE 33169
// begin result := false ;
33159: LD_ADDR_VAR 0 3
33163: PUSH
33164: LD_INT 0
33166: ST_TO_ADDR
// break ;
33167: GO 33171
// end ;
33169: GO 33132
33171: POP
33172: POP
// end ;
33173: LD_VAR 0 3
33177: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33178: LD_INT 0
33180: PPUSH
33181: PPUSH
33182: PPUSH
// pom := GetBase ( fac ) ;
33183: LD_ADDR_VAR 0 5
33187: PUSH
33188: LD_VAR 0 1
33192: PPUSH
33193: CALL_OW 274
33197: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33198: LD_ADDR_VAR 0 4
33202: PUSH
33203: LD_VAR 0 2
33207: PUSH
33208: LD_INT 1
33210: ARRAY
33211: PPUSH
33212: LD_VAR 0 2
33216: PUSH
33217: LD_INT 2
33219: ARRAY
33220: PPUSH
33221: LD_VAR 0 2
33225: PUSH
33226: LD_INT 3
33228: ARRAY
33229: PPUSH
33230: LD_VAR 0 2
33234: PUSH
33235: LD_INT 4
33237: ARRAY
33238: PPUSH
33239: CALL_OW 449
33243: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33244: LD_ADDR_VAR 0 3
33248: PUSH
33249: LD_VAR 0 5
33253: PPUSH
33254: LD_INT 1
33256: PPUSH
33257: CALL_OW 275
33261: PUSH
33262: LD_VAR 0 4
33266: PUSH
33267: LD_INT 1
33269: ARRAY
33270: GREATEREQUAL
33271: PUSH
33272: LD_VAR 0 5
33276: PPUSH
33277: LD_INT 2
33279: PPUSH
33280: CALL_OW 275
33284: PUSH
33285: LD_VAR 0 4
33289: PUSH
33290: LD_INT 2
33292: ARRAY
33293: GREATEREQUAL
33294: AND
33295: PUSH
33296: LD_VAR 0 5
33300: PPUSH
33301: LD_INT 3
33303: PPUSH
33304: CALL_OW 275
33308: PUSH
33309: LD_VAR 0 4
33313: PUSH
33314: LD_INT 3
33316: ARRAY
33317: GREATEREQUAL
33318: AND
33319: ST_TO_ADDR
// end ;
33320: LD_VAR 0 3
33324: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33325: LD_INT 0
33327: PPUSH
33328: PPUSH
33329: PPUSH
33330: PPUSH
// pom := GetBase ( building ) ;
33331: LD_ADDR_VAR 0 3
33335: PUSH
33336: LD_VAR 0 1
33340: PPUSH
33341: CALL_OW 274
33345: ST_TO_ADDR
// if not pom then
33346: LD_VAR 0 3
33350: NOT
33351: IFFALSE 33355
// exit ;
33353: GO 33525
// btype := GetBType ( building ) ;
33355: LD_ADDR_VAR 0 5
33359: PUSH
33360: LD_VAR 0 1
33364: PPUSH
33365: CALL_OW 266
33369: ST_TO_ADDR
// if btype = b_armoury then
33370: LD_VAR 0 5
33374: PUSH
33375: LD_INT 4
33377: EQUAL
33378: IFFALSE 33388
// btype := b_barracks ;
33380: LD_ADDR_VAR 0 5
33384: PUSH
33385: LD_INT 5
33387: ST_TO_ADDR
// if btype = b_depot then
33388: LD_VAR 0 5
33392: PUSH
33393: LD_INT 0
33395: EQUAL
33396: IFFALSE 33406
// btype := b_warehouse ;
33398: LD_ADDR_VAR 0 5
33402: PUSH
33403: LD_INT 1
33405: ST_TO_ADDR
// if btype = b_workshop then
33406: LD_VAR 0 5
33410: PUSH
33411: LD_INT 2
33413: EQUAL
33414: IFFALSE 33424
// btype := b_factory ;
33416: LD_ADDR_VAR 0 5
33420: PUSH
33421: LD_INT 3
33423: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33424: LD_ADDR_VAR 0 4
33428: PUSH
33429: LD_VAR 0 5
33433: PPUSH
33434: LD_VAR 0 1
33438: PPUSH
33439: CALL_OW 248
33443: PPUSH
33444: CALL_OW 450
33448: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33449: LD_ADDR_VAR 0 2
33453: PUSH
33454: LD_VAR 0 3
33458: PPUSH
33459: LD_INT 1
33461: PPUSH
33462: CALL_OW 275
33466: PUSH
33467: LD_VAR 0 4
33471: PUSH
33472: LD_INT 1
33474: ARRAY
33475: GREATEREQUAL
33476: PUSH
33477: LD_VAR 0 3
33481: PPUSH
33482: LD_INT 2
33484: PPUSH
33485: CALL_OW 275
33489: PUSH
33490: LD_VAR 0 4
33494: PUSH
33495: LD_INT 2
33497: ARRAY
33498: GREATEREQUAL
33499: AND
33500: PUSH
33501: LD_VAR 0 3
33505: PPUSH
33506: LD_INT 3
33508: PPUSH
33509: CALL_OW 275
33513: PUSH
33514: LD_VAR 0 4
33518: PUSH
33519: LD_INT 3
33521: ARRAY
33522: GREATEREQUAL
33523: AND
33524: ST_TO_ADDR
// end ;
33525: LD_VAR 0 2
33529: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33530: LD_INT 0
33532: PPUSH
33533: PPUSH
33534: PPUSH
// pom := GetBase ( building ) ;
33535: LD_ADDR_VAR 0 4
33539: PUSH
33540: LD_VAR 0 1
33544: PPUSH
33545: CALL_OW 274
33549: ST_TO_ADDR
// if not pom then
33550: LD_VAR 0 4
33554: NOT
33555: IFFALSE 33559
// exit ;
33557: GO 33660
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33559: LD_ADDR_VAR 0 5
33563: PUSH
33564: LD_VAR 0 2
33568: PPUSH
33569: LD_VAR 0 1
33573: PPUSH
33574: CALL_OW 248
33578: PPUSH
33579: CALL_OW 450
33583: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33584: LD_ADDR_VAR 0 3
33588: PUSH
33589: LD_VAR 0 4
33593: PPUSH
33594: LD_INT 1
33596: PPUSH
33597: CALL_OW 275
33601: PUSH
33602: LD_VAR 0 5
33606: PUSH
33607: LD_INT 1
33609: ARRAY
33610: GREATEREQUAL
33611: PUSH
33612: LD_VAR 0 4
33616: PPUSH
33617: LD_INT 2
33619: PPUSH
33620: CALL_OW 275
33624: PUSH
33625: LD_VAR 0 5
33629: PUSH
33630: LD_INT 2
33632: ARRAY
33633: GREATEREQUAL
33634: AND
33635: PUSH
33636: LD_VAR 0 4
33640: PPUSH
33641: LD_INT 3
33643: PPUSH
33644: CALL_OW 275
33648: PUSH
33649: LD_VAR 0 5
33653: PUSH
33654: LD_INT 3
33656: ARRAY
33657: GREATEREQUAL
33658: AND
33659: ST_TO_ADDR
// end ;
33660: LD_VAR 0 3
33664: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33665: LD_INT 0
33667: PPUSH
33668: PPUSH
33669: PPUSH
33670: PPUSH
33671: PPUSH
33672: PPUSH
33673: PPUSH
33674: PPUSH
33675: PPUSH
33676: PPUSH
33677: PPUSH
// result := false ;
33678: LD_ADDR_VAR 0 8
33682: PUSH
33683: LD_INT 0
33685: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33686: LD_VAR 0 5
33690: NOT
33691: PUSH
33692: LD_VAR 0 1
33696: NOT
33697: OR
33698: PUSH
33699: LD_VAR 0 2
33703: NOT
33704: OR
33705: PUSH
33706: LD_VAR 0 3
33710: NOT
33711: OR
33712: IFFALSE 33716
// exit ;
33714: GO 34530
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33716: LD_ADDR_VAR 0 14
33720: PUSH
33721: LD_VAR 0 1
33725: PPUSH
33726: LD_VAR 0 2
33730: PPUSH
33731: LD_VAR 0 3
33735: PPUSH
33736: LD_VAR 0 4
33740: PPUSH
33741: LD_VAR 0 5
33745: PUSH
33746: LD_INT 1
33748: ARRAY
33749: PPUSH
33750: CALL_OW 248
33754: PPUSH
33755: LD_INT 0
33757: PPUSH
33758: CALL 35763 0 6
33762: ST_TO_ADDR
// if not hexes then
33763: LD_VAR 0 14
33767: NOT
33768: IFFALSE 33772
// exit ;
33770: GO 34530
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33772: LD_ADDR_VAR 0 17
33776: PUSH
33777: LD_VAR 0 5
33781: PPUSH
33782: LD_INT 22
33784: PUSH
33785: LD_VAR 0 13
33789: PPUSH
33790: CALL_OW 255
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 2
33801: PUSH
33802: LD_INT 30
33804: PUSH
33805: LD_INT 0
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 30
33814: PUSH
33815: LD_INT 1
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: LIST
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PPUSH
33831: CALL_OW 72
33835: ST_TO_ADDR
// for i = 1 to hexes do
33836: LD_ADDR_VAR 0 9
33840: PUSH
33841: DOUBLE
33842: LD_INT 1
33844: DEC
33845: ST_TO_ADDR
33846: LD_VAR 0 14
33850: PUSH
33851: FOR_TO
33852: IFFALSE 34528
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33854: LD_ADDR_VAR 0 13
33858: PUSH
33859: LD_VAR 0 14
33863: PUSH
33864: LD_VAR 0 9
33868: ARRAY
33869: PUSH
33870: LD_INT 1
33872: ARRAY
33873: PPUSH
33874: LD_VAR 0 14
33878: PUSH
33879: LD_VAR 0 9
33883: ARRAY
33884: PUSH
33885: LD_INT 2
33887: ARRAY
33888: PPUSH
33889: CALL_OW 428
33893: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33894: LD_VAR 0 14
33898: PUSH
33899: LD_VAR 0 9
33903: ARRAY
33904: PUSH
33905: LD_INT 1
33907: ARRAY
33908: PPUSH
33909: LD_VAR 0 14
33913: PUSH
33914: LD_VAR 0 9
33918: ARRAY
33919: PUSH
33920: LD_INT 2
33922: ARRAY
33923: PPUSH
33924: CALL_OW 351
33928: PUSH
33929: LD_VAR 0 14
33933: PUSH
33934: LD_VAR 0 9
33938: ARRAY
33939: PUSH
33940: LD_INT 1
33942: ARRAY
33943: PPUSH
33944: LD_VAR 0 14
33948: PUSH
33949: LD_VAR 0 9
33953: ARRAY
33954: PUSH
33955: LD_INT 2
33957: ARRAY
33958: PPUSH
33959: CALL_OW 488
33963: NOT
33964: OR
33965: PUSH
33966: LD_VAR 0 13
33970: PPUSH
33971: CALL_OW 247
33975: PUSH
33976: LD_INT 3
33978: EQUAL
33979: OR
33980: IFFALSE 33986
// exit ;
33982: POP
33983: POP
33984: GO 34530
// if not tmp then
33986: LD_VAR 0 13
33990: NOT
33991: IFFALSE 33995
// continue ;
33993: GO 33851
// result := true ;
33995: LD_ADDR_VAR 0 8
33999: PUSH
34000: LD_INT 1
34002: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34003: LD_VAR 0 6
34007: PUSH
34008: LD_VAR 0 13
34012: PPUSH
34013: CALL_OW 247
34017: PUSH
34018: LD_INT 2
34020: EQUAL
34021: AND
34022: PUSH
34023: LD_VAR 0 13
34027: PPUSH
34028: CALL_OW 263
34032: PUSH
34033: LD_INT 1
34035: EQUAL
34036: AND
34037: IFFALSE 34201
// begin if IsDrivenBy ( tmp ) then
34039: LD_VAR 0 13
34043: PPUSH
34044: CALL_OW 311
34048: IFFALSE 34052
// continue ;
34050: GO 33851
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34052: LD_VAR 0 6
34056: PPUSH
34057: LD_INT 3
34059: PUSH
34060: LD_INT 60
34062: PUSH
34063: EMPTY
34064: LIST
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 3
34072: PUSH
34073: LD_INT 55
34075: PUSH
34076: EMPTY
34077: LIST
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PPUSH
34087: CALL_OW 72
34091: IFFALSE 34199
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34093: LD_ADDR_VAR 0 18
34097: PUSH
34098: LD_VAR 0 6
34102: PPUSH
34103: LD_INT 3
34105: PUSH
34106: LD_INT 60
34108: PUSH
34109: EMPTY
34110: LIST
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 3
34118: PUSH
34119: LD_INT 55
34121: PUSH
34122: EMPTY
34123: LIST
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PPUSH
34133: CALL_OW 72
34137: PUSH
34138: LD_INT 1
34140: ARRAY
34141: ST_TO_ADDR
// if IsInUnit ( driver ) then
34142: LD_VAR 0 18
34146: PPUSH
34147: CALL_OW 310
34151: IFFALSE 34162
// ComExit ( driver ) ;
34153: LD_VAR 0 18
34157: PPUSH
34158: CALL 59543 0 1
// AddComEnterUnit ( driver , tmp ) ;
34162: LD_VAR 0 18
34166: PPUSH
34167: LD_VAR 0 13
34171: PPUSH
34172: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34176: LD_VAR 0 18
34180: PPUSH
34181: LD_VAR 0 7
34185: PPUSH
34186: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34190: LD_VAR 0 18
34194: PPUSH
34195: CALL_OW 181
// end ; continue ;
34199: GO 33851
// end ; if not cleaners or not tmp in cleaners then
34201: LD_VAR 0 6
34205: NOT
34206: PUSH
34207: LD_VAR 0 13
34211: PUSH
34212: LD_VAR 0 6
34216: IN
34217: NOT
34218: OR
34219: IFFALSE 34526
// begin if dep then
34221: LD_VAR 0 17
34225: IFFALSE 34361
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34227: LD_ADDR_VAR 0 16
34231: PUSH
34232: LD_VAR 0 17
34236: PUSH
34237: LD_INT 1
34239: ARRAY
34240: PPUSH
34241: CALL_OW 250
34245: PPUSH
34246: LD_VAR 0 17
34250: PUSH
34251: LD_INT 1
34253: ARRAY
34254: PPUSH
34255: CALL_OW 254
34259: PPUSH
34260: LD_INT 5
34262: PPUSH
34263: CALL_OW 272
34267: PUSH
34268: LD_VAR 0 17
34272: PUSH
34273: LD_INT 1
34275: ARRAY
34276: PPUSH
34277: CALL_OW 251
34281: PPUSH
34282: LD_VAR 0 17
34286: PUSH
34287: LD_INT 1
34289: ARRAY
34290: PPUSH
34291: CALL_OW 254
34295: PPUSH
34296: LD_INT 5
34298: PPUSH
34299: CALL_OW 273
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34308: LD_VAR 0 16
34312: PUSH
34313: LD_INT 1
34315: ARRAY
34316: PPUSH
34317: LD_VAR 0 16
34321: PUSH
34322: LD_INT 2
34324: ARRAY
34325: PPUSH
34326: CALL_OW 488
34330: IFFALSE 34361
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34332: LD_VAR 0 13
34336: PPUSH
34337: LD_VAR 0 16
34341: PUSH
34342: LD_INT 1
34344: ARRAY
34345: PPUSH
34346: LD_VAR 0 16
34350: PUSH
34351: LD_INT 2
34353: ARRAY
34354: PPUSH
34355: CALL_OW 111
// continue ;
34359: GO 33851
// end ; end ; r := GetDir ( tmp ) ;
34361: LD_ADDR_VAR 0 15
34365: PUSH
34366: LD_VAR 0 13
34370: PPUSH
34371: CALL_OW 254
34375: ST_TO_ADDR
// if r = 5 then
34376: LD_VAR 0 15
34380: PUSH
34381: LD_INT 5
34383: EQUAL
34384: IFFALSE 34394
// r := 0 ;
34386: LD_ADDR_VAR 0 15
34390: PUSH
34391: LD_INT 0
34393: ST_TO_ADDR
// for j = r to 5 do
34394: LD_ADDR_VAR 0 10
34398: PUSH
34399: DOUBLE
34400: LD_VAR 0 15
34404: DEC
34405: ST_TO_ADDR
34406: LD_INT 5
34408: PUSH
34409: FOR_TO
34410: IFFALSE 34524
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34412: LD_ADDR_VAR 0 11
34416: PUSH
34417: LD_VAR 0 13
34421: PPUSH
34422: CALL_OW 250
34426: PPUSH
34427: LD_VAR 0 10
34431: PPUSH
34432: LD_INT 2
34434: PPUSH
34435: CALL_OW 272
34439: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34440: LD_ADDR_VAR 0 12
34444: PUSH
34445: LD_VAR 0 13
34449: PPUSH
34450: CALL_OW 251
34454: PPUSH
34455: LD_VAR 0 10
34459: PPUSH
34460: LD_INT 2
34462: PPUSH
34463: CALL_OW 273
34467: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34468: LD_VAR 0 11
34472: PPUSH
34473: LD_VAR 0 12
34477: PPUSH
34478: CALL_OW 488
34482: PUSH
34483: LD_VAR 0 11
34487: PPUSH
34488: LD_VAR 0 12
34492: PPUSH
34493: CALL_OW 428
34497: NOT
34498: AND
34499: IFFALSE 34522
// begin ComMoveXY ( tmp , _x , _y ) ;
34501: LD_VAR 0 13
34505: PPUSH
34506: LD_VAR 0 11
34510: PPUSH
34511: LD_VAR 0 12
34515: PPUSH
34516: CALL_OW 111
// break ;
34520: GO 34524
// end ; end ;
34522: GO 34409
34524: POP
34525: POP
// end ; end ;
34526: GO 33851
34528: POP
34529: POP
// end ;
34530: LD_VAR 0 8
34534: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34535: LD_INT 0
34537: PPUSH
// result := true ;
34538: LD_ADDR_VAR 0 3
34542: PUSH
34543: LD_INT 1
34545: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34546: LD_VAR 0 2
34550: PUSH
34551: LD_INT 24
34553: DOUBLE
34554: EQUAL
34555: IFTRUE 34565
34557: LD_INT 33
34559: DOUBLE
34560: EQUAL
34561: IFTRUE 34565
34563: GO 34590
34565: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34566: LD_ADDR_VAR 0 3
34570: PUSH
34571: LD_INT 32
34573: PPUSH
34574: LD_VAR 0 1
34578: PPUSH
34579: CALL_OW 321
34583: PUSH
34584: LD_INT 2
34586: EQUAL
34587: ST_TO_ADDR
34588: GO 34906
34590: LD_INT 20
34592: DOUBLE
34593: EQUAL
34594: IFTRUE 34598
34596: GO 34623
34598: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34599: LD_ADDR_VAR 0 3
34603: PUSH
34604: LD_INT 6
34606: PPUSH
34607: LD_VAR 0 1
34611: PPUSH
34612: CALL_OW 321
34616: PUSH
34617: LD_INT 2
34619: EQUAL
34620: ST_TO_ADDR
34621: GO 34906
34623: LD_INT 22
34625: DOUBLE
34626: EQUAL
34627: IFTRUE 34637
34629: LD_INT 36
34631: DOUBLE
34632: EQUAL
34633: IFTRUE 34637
34635: GO 34662
34637: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34638: LD_ADDR_VAR 0 3
34642: PUSH
34643: LD_INT 15
34645: PPUSH
34646: LD_VAR 0 1
34650: PPUSH
34651: CALL_OW 321
34655: PUSH
34656: LD_INT 2
34658: EQUAL
34659: ST_TO_ADDR
34660: GO 34906
34662: LD_INT 30
34664: DOUBLE
34665: EQUAL
34666: IFTRUE 34670
34668: GO 34695
34670: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34671: LD_ADDR_VAR 0 3
34675: PUSH
34676: LD_INT 20
34678: PPUSH
34679: LD_VAR 0 1
34683: PPUSH
34684: CALL_OW 321
34688: PUSH
34689: LD_INT 2
34691: EQUAL
34692: ST_TO_ADDR
34693: GO 34906
34695: LD_INT 28
34697: DOUBLE
34698: EQUAL
34699: IFTRUE 34709
34701: LD_INT 21
34703: DOUBLE
34704: EQUAL
34705: IFTRUE 34709
34707: GO 34734
34709: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34710: LD_ADDR_VAR 0 3
34714: PUSH
34715: LD_INT 21
34717: PPUSH
34718: LD_VAR 0 1
34722: PPUSH
34723: CALL_OW 321
34727: PUSH
34728: LD_INT 2
34730: EQUAL
34731: ST_TO_ADDR
34732: GO 34906
34734: LD_INT 16
34736: DOUBLE
34737: EQUAL
34738: IFTRUE 34742
34740: GO 34767
34742: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34743: LD_ADDR_VAR 0 3
34747: PUSH
34748: LD_INT 84
34750: PPUSH
34751: LD_VAR 0 1
34755: PPUSH
34756: CALL_OW 321
34760: PUSH
34761: LD_INT 2
34763: EQUAL
34764: ST_TO_ADDR
34765: GO 34906
34767: LD_INT 19
34769: DOUBLE
34770: EQUAL
34771: IFTRUE 34781
34773: LD_INT 23
34775: DOUBLE
34776: EQUAL
34777: IFTRUE 34781
34779: GO 34806
34781: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34782: LD_ADDR_VAR 0 3
34786: PUSH
34787: LD_INT 83
34789: PPUSH
34790: LD_VAR 0 1
34794: PPUSH
34795: CALL_OW 321
34799: PUSH
34800: LD_INT 2
34802: EQUAL
34803: ST_TO_ADDR
34804: GO 34906
34806: LD_INT 17
34808: DOUBLE
34809: EQUAL
34810: IFTRUE 34814
34812: GO 34839
34814: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34815: LD_ADDR_VAR 0 3
34819: PUSH
34820: LD_INT 39
34822: PPUSH
34823: LD_VAR 0 1
34827: PPUSH
34828: CALL_OW 321
34832: PUSH
34833: LD_INT 2
34835: EQUAL
34836: ST_TO_ADDR
34837: GO 34906
34839: LD_INT 18
34841: DOUBLE
34842: EQUAL
34843: IFTRUE 34847
34845: GO 34872
34847: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34848: LD_ADDR_VAR 0 3
34852: PUSH
34853: LD_INT 40
34855: PPUSH
34856: LD_VAR 0 1
34860: PPUSH
34861: CALL_OW 321
34865: PUSH
34866: LD_INT 2
34868: EQUAL
34869: ST_TO_ADDR
34870: GO 34906
34872: LD_INT 27
34874: DOUBLE
34875: EQUAL
34876: IFTRUE 34880
34878: GO 34905
34880: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34881: LD_ADDR_VAR 0 3
34885: PUSH
34886: LD_INT 35
34888: PPUSH
34889: LD_VAR 0 1
34893: PPUSH
34894: CALL_OW 321
34898: PUSH
34899: LD_INT 2
34901: EQUAL
34902: ST_TO_ADDR
34903: GO 34906
34905: POP
// end ;
34906: LD_VAR 0 3
34910: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34911: LD_INT 0
34913: PPUSH
34914: PPUSH
34915: PPUSH
34916: PPUSH
34917: PPUSH
34918: PPUSH
34919: PPUSH
34920: PPUSH
34921: PPUSH
34922: PPUSH
34923: PPUSH
// result := false ;
34924: LD_ADDR_VAR 0 6
34928: PUSH
34929: LD_INT 0
34931: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34932: LD_VAR 0 1
34936: NOT
34937: PUSH
34938: LD_VAR 0 1
34942: PPUSH
34943: CALL_OW 266
34947: PUSH
34948: LD_INT 0
34950: PUSH
34951: LD_INT 1
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: IN
34958: NOT
34959: OR
34960: PUSH
34961: LD_VAR 0 2
34965: NOT
34966: OR
34967: PUSH
34968: LD_VAR 0 5
34972: PUSH
34973: LD_INT 0
34975: PUSH
34976: LD_INT 1
34978: PUSH
34979: LD_INT 2
34981: PUSH
34982: LD_INT 3
34984: PUSH
34985: LD_INT 4
34987: PUSH
34988: LD_INT 5
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: IN
34999: NOT
35000: OR
35001: PUSH
35002: LD_VAR 0 3
35006: PPUSH
35007: LD_VAR 0 4
35011: PPUSH
35012: CALL_OW 488
35016: NOT
35017: OR
35018: IFFALSE 35022
// exit ;
35020: GO 35758
// side := GetSide ( depot ) ;
35022: LD_ADDR_VAR 0 9
35026: PUSH
35027: LD_VAR 0 1
35031: PPUSH
35032: CALL_OW 255
35036: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35037: LD_VAR 0 9
35041: PPUSH
35042: LD_VAR 0 2
35046: PPUSH
35047: CALL 34535 0 2
35051: NOT
35052: IFFALSE 35056
// exit ;
35054: GO 35758
// pom := GetBase ( depot ) ;
35056: LD_ADDR_VAR 0 10
35060: PUSH
35061: LD_VAR 0 1
35065: PPUSH
35066: CALL_OW 274
35070: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35071: LD_ADDR_VAR 0 11
35075: PUSH
35076: LD_VAR 0 2
35080: PPUSH
35081: LD_VAR 0 1
35085: PPUSH
35086: CALL_OW 248
35090: PPUSH
35091: CALL_OW 450
35095: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35096: LD_VAR 0 10
35100: PPUSH
35101: LD_INT 1
35103: PPUSH
35104: CALL_OW 275
35108: PUSH
35109: LD_VAR 0 11
35113: PUSH
35114: LD_INT 1
35116: ARRAY
35117: GREATEREQUAL
35118: PUSH
35119: LD_VAR 0 10
35123: PPUSH
35124: LD_INT 2
35126: PPUSH
35127: CALL_OW 275
35131: PUSH
35132: LD_VAR 0 11
35136: PUSH
35137: LD_INT 2
35139: ARRAY
35140: GREATEREQUAL
35141: AND
35142: PUSH
35143: LD_VAR 0 10
35147: PPUSH
35148: LD_INT 3
35150: PPUSH
35151: CALL_OW 275
35155: PUSH
35156: LD_VAR 0 11
35160: PUSH
35161: LD_INT 3
35163: ARRAY
35164: GREATEREQUAL
35165: AND
35166: NOT
35167: IFFALSE 35171
// exit ;
35169: GO 35758
// if GetBType ( depot ) = b_depot then
35171: LD_VAR 0 1
35175: PPUSH
35176: CALL_OW 266
35180: PUSH
35181: LD_INT 0
35183: EQUAL
35184: IFFALSE 35196
// dist := 28 else
35186: LD_ADDR_VAR 0 14
35190: PUSH
35191: LD_INT 28
35193: ST_TO_ADDR
35194: GO 35204
// dist := 36 ;
35196: LD_ADDR_VAR 0 14
35200: PUSH
35201: LD_INT 36
35203: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35204: LD_VAR 0 1
35208: PPUSH
35209: LD_VAR 0 3
35213: PPUSH
35214: LD_VAR 0 4
35218: PPUSH
35219: CALL_OW 297
35223: PUSH
35224: LD_VAR 0 14
35228: GREATER
35229: IFFALSE 35233
// exit ;
35231: GO 35758
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35233: LD_ADDR_VAR 0 12
35237: PUSH
35238: LD_VAR 0 2
35242: PPUSH
35243: LD_VAR 0 3
35247: PPUSH
35248: LD_VAR 0 4
35252: PPUSH
35253: LD_VAR 0 5
35257: PPUSH
35258: LD_VAR 0 1
35262: PPUSH
35263: CALL_OW 248
35267: PPUSH
35268: LD_INT 0
35270: PPUSH
35271: CALL 35763 0 6
35275: ST_TO_ADDR
// if not hexes then
35276: LD_VAR 0 12
35280: NOT
35281: IFFALSE 35285
// exit ;
35283: GO 35758
// hex := GetHexInfo ( x , y ) ;
35285: LD_ADDR_VAR 0 15
35289: PUSH
35290: LD_VAR 0 3
35294: PPUSH
35295: LD_VAR 0 4
35299: PPUSH
35300: CALL_OW 546
35304: ST_TO_ADDR
// if hex [ 1 ] then
35305: LD_VAR 0 15
35309: PUSH
35310: LD_INT 1
35312: ARRAY
35313: IFFALSE 35317
// exit ;
35315: GO 35758
// height := hex [ 2 ] ;
35317: LD_ADDR_VAR 0 13
35321: PUSH
35322: LD_VAR 0 15
35326: PUSH
35327: LD_INT 2
35329: ARRAY
35330: ST_TO_ADDR
// for i = 1 to hexes do
35331: LD_ADDR_VAR 0 7
35335: PUSH
35336: DOUBLE
35337: LD_INT 1
35339: DEC
35340: ST_TO_ADDR
35341: LD_VAR 0 12
35345: PUSH
35346: FOR_TO
35347: IFFALSE 35677
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35349: LD_VAR 0 12
35353: PUSH
35354: LD_VAR 0 7
35358: ARRAY
35359: PUSH
35360: LD_INT 1
35362: ARRAY
35363: PPUSH
35364: LD_VAR 0 12
35368: PUSH
35369: LD_VAR 0 7
35373: ARRAY
35374: PUSH
35375: LD_INT 2
35377: ARRAY
35378: PPUSH
35379: CALL_OW 488
35383: NOT
35384: PUSH
35385: LD_VAR 0 12
35389: PUSH
35390: LD_VAR 0 7
35394: ARRAY
35395: PUSH
35396: LD_INT 1
35398: ARRAY
35399: PPUSH
35400: LD_VAR 0 12
35404: PUSH
35405: LD_VAR 0 7
35409: ARRAY
35410: PUSH
35411: LD_INT 2
35413: ARRAY
35414: PPUSH
35415: CALL_OW 428
35419: PUSH
35420: LD_INT 0
35422: GREATER
35423: OR
35424: PUSH
35425: LD_VAR 0 12
35429: PUSH
35430: LD_VAR 0 7
35434: ARRAY
35435: PUSH
35436: LD_INT 1
35438: ARRAY
35439: PPUSH
35440: LD_VAR 0 12
35444: PUSH
35445: LD_VAR 0 7
35449: ARRAY
35450: PUSH
35451: LD_INT 2
35453: ARRAY
35454: PPUSH
35455: CALL_OW 351
35459: OR
35460: IFFALSE 35466
// exit ;
35462: POP
35463: POP
35464: GO 35758
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35466: LD_ADDR_VAR 0 8
35470: PUSH
35471: LD_VAR 0 12
35475: PUSH
35476: LD_VAR 0 7
35480: ARRAY
35481: PUSH
35482: LD_INT 1
35484: ARRAY
35485: PPUSH
35486: LD_VAR 0 12
35490: PUSH
35491: LD_VAR 0 7
35495: ARRAY
35496: PUSH
35497: LD_INT 2
35499: ARRAY
35500: PPUSH
35501: CALL_OW 546
35505: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35506: LD_VAR 0 8
35510: PUSH
35511: LD_INT 1
35513: ARRAY
35514: PUSH
35515: LD_VAR 0 8
35519: PUSH
35520: LD_INT 2
35522: ARRAY
35523: PUSH
35524: LD_VAR 0 13
35528: PUSH
35529: LD_INT 2
35531: PLUS
35532: GREATER
35533: OR
35534: PUSH
35535: LD_VAR 0 8
35539: PUSH
35540: LD_INT 2
35542: ARRAY
35543: PUSH
35544: LD_VAR 0 13
35548: PUSH
35549: LD_INT 2
35551: MINUS
35552: LESS
35553: OR
35554: PUSH
35555: LD_VAR 0 8
35559: PUSH
35560: LD_INT 3
35562: ARRAY
35563: PUSH
35564: LD_INT 0
35566: PUSH
35567: LD_INT 8
35569: PUSH
35570: LD_INT 9
35572: PUSH
35573: LD_INT 10
35575: PUSH
35576: LD_INT 11
35578: PUSH
35579: LD_INT 12
35581: PUSH
35582: LD_INT 13
35584: PUSH
35585: LD_INT 16
35587: PUSH
35588: LD_INT 17
35590: PUSH
35591: LD_INT 18
35593: PUSH
35594: LD_INT 19
35596: PUSH
35597: LD_INT 20
35599: PUSH
35600: LD_INT 21
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: IN
35618: NOT
35619: OR
35620: PUSH
35621: LD_VAR 0 8
35625: PUSH
35626: LD_INT 5
35628: ARRAY
35629: NOT
35630: OR
35631: PUSH
35632: LD_VAR 0 8
35636: PUSH
35637: LD_INT 6
35639: ARRAY
35640: PUSH
35641: LD_INT 1
35643: PUSH
35644: LD_INT 2
35646: PUSH
35647: LD_INT 7
35649: PUSH
35650: LD_INT 9
35652: PUSH
35653: LD_INT 10
35655: PUSH
35656: LD_INT 11
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: IN
35667: NOT
35668: OR
35669: IFFALSE 35675
// exit ;
35671: POP
35672: POP
35673: GO 35758
// end ;
35675: GO 35346
35677: POP
35678: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35679: LD_VAR 0 9
35683: PPUSH
35684: LD_VAR 0 3
35688: PPUSH
35689: LD_VAR 0 4
35693: PPUSH
35694: LD_INT 20
35696: PPUSH
35697: CALL 27710 0 4
35701: PUSH
35702: LD_INT 4
35704: ARRAY
35705: IFFALSE 35709
// exit ;
35707: GO 35758
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35709: LD_VAR 0 2
35713: PUSH
35714: LD_INT 29
35716: PUSH
35717: LD_INT 30
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: IN
35724: PUSH
35725: LD_VAR 0 3
35729: PPUSH
35730: LD_VAR 0 4
35734: PPUSH
35735: LD_VAR 0 9
35739: PPUSH
35740: CALL_OW 440
35744: NOT
35745: AND
35746: IFFALSE 35750
// exit ;
35748: GO 35758
// result := true ;
35750: LD_ADDR_VAR 0 6
35754: PUSH
35755: LD_INT 1
35757: ST_TO_ADDR
// end ;
35758: LD_VAR 0 6
35762: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35763: LD_INT 0
35765: PPUSH
35766: PPUSH
35767: PPUSH
35768: PPUSH
35769: PPUSH
35770: PPUSH
35771: PPUSH
35772: PPUSH
35773: PPUSH
35774: PPUSH
35775: PPUSH
35776: PPUSH
35777: PPUSH
35778: PPUSH
35779: PPUSH
35780: PPUSH
35781: PPUSH
35782: PPUSH
35783: PPUSH
35784: PPUSH
35785: PPUSH
35786: PPUSH
35787: PPUSH
35788: PPUSH
35789: PPUSH
35790: PPUSH
35791: PPUSH
35792: PPUSH
35793: PPUSH
35794: PPUSH
35795: PPUSH
35796: PPUSH
35797: PPUSH
35798: PPUSH
35799: PPUSH
35800: PPUSH
35801: PPUSH
35802: PPUSH
35803: PPUSH
35804: PPUSH
35805: PPUSH
35806: PPUSH
35807: PPUSH
35808: PPUSH
35809: PPUSH
35810: PPUSH
35811: PPUSH
35812: PPUSH
35813: PPUSH
35814: PPUSH
35815: PPUSH
35816: PPUSH
35817: PPUSH
35818: PPUSH
35819: PPUSH
35820: PPUSH
35821: PPUSH
35822: PPUSH
// result = [ ] ;
35823: LD_ADDR_VAR 0 7
35827: PUSH
35828: EMPTY
35829: ST_TO_ADDR
// temp_list = [ ] ;
35830: LD_ADDR_VAR 0 9
35834: PUSH
35835: EMPTY
35836: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35837: LD_VAR 0 4
35841: PUSH
35842: LD_INT 0
35844: PUSH
35845: LD_INT 1
35847: PUSH
35848: LD_INT 2
35850: PUSH
35851: LD_INT 3
35853: PUSH
35854: LD_INT 4
35856: PUSH
35857: LD_INT 5
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: IN
35868: NOT
35869: PUSH
35870: LD_VAR 0 1
35874: PUSH
35875: LD_INT 0
35877: PUSH
35878: LD_INT 1
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: IN
35885: PUSH
35886: LD_VAR 0 5
35890: PUSH
35891: LD_INT 1
35893: PUSH
35894: LD_INT 2
35896: PUSH
35897: LD_INT 3
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: LIST
35904: IN
35905: NOT
35906: AND
35907: OR
35908: IFFALSE 35912
// exit ;
35910: GO 54303
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35912: LD_VAR 0 1
35916: PUSH
35917: LD_INT 6
35919: PUSH
35920: LD_INT 7
35922: PUSH
35923: LD_INT 8
35925: PUSH
35926: LD_INT 13
35928: PUSH
35929: LD_INT 12
35931: PUSH
35932: LD_INT 15
35934: PUSH
35935: LD_INT 11
35937: PUSH
35938: LD_INT 14
35940: PUSH
35941: LD_INT 10
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: IN
35955: IFFALSE 35965
// btype = b_lab ;
35957: LD_ADDR_VAR 0 1
35961: PUSH
35962: LD_INT 6
35964: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35965: LD_VAR 0 6
35969: PUSH
35970: LD_INT 0
35972: PUSH
35973: LD_INT 1
35975: PUSH
35976: LD_INT 2
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: LIST
35983: IN
35984: NOT
35985: PUSH
35986: LD_VAR 0 1
35990: PUSH
35991: LD_INT 0
35993: PUSH
35994: LD_INT 1
35996: PUSH
35997: LD_INT 2
35999: PUSH
36000: LD_INT 3
36002: PUSH
36003: LD_INT 6
36005: PUSH
36006: LD_INT 36
36008: PUSH
36009: LD_INT 4
36011: PUSH
36012: LD_INT 5
36014: PUSH
36015: LD_INT 31
36017: PUSH
36018: LD_INT 32
36020: PUSH
36021: LD_INT 33
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: IN
36037: NOT
36038: PUSH
36039: LD_VAR 0 6
36043: PUSH
36044: LD_INT 1
36046: EQUAL
36047: AND
36048: OR
36049: PUSH
36050: LD_VAR 0 1
36054: PUSH
36055: LD_INT 2
36057: PUSH
36058: LD_INT 3
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: IN
36065: NOT
36066: PUSH
36067: LD_VAR 0 6
36071: PUSH
36072: LD_INT 2
36074: EQUAL
36075: AND
36076: OR
36077: IFFALSE 36087
// mode = 0 ;
36079: LD_ADDR_VAR 0 6
36083: PUSH
36084: LD_INT 0
36086: ST_TO_ADDR
// case mode of 0 :
36087: LD_VAR 0 6
36091: PUSH
36092: LD_INT 0
36094: DOUBLE
36095: EQUAL
36096: IFTRUE 36100
36098: GO 47553
36100: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36101: LD_ADDR_VAR 0 11
36105: PUSH
36106: LD_INT 0
36108: PUSH
36109: LD_INT 0
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 0
36118: PUSH
36119: LD_INT 1
36121: NEG
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 1
36129: PUSH
36130: LD_INT 0
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 1
36139: PUSH
36140: LD_INT 1
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: LD_INT 0
36149: PUSH
36150: LD_INT 1
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 1
36159: NEG
36160: PUSH
36161: LD_INT 0
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 1
36170: NEG
36171: PUSH
36172: LD_INT 1
36174: NEG
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 1
36182: NEG
36183: PUSH
36184: LD_INT 2
36186: NEG
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PUSH
36192: LD_INT 0
36194: PUSH
36195: LD_INT 2
36197: NEG
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 1
36205: PUSH
36206: LD_INT 1
36208: NEG
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 1
36216: PUSH
36217: LD_INT 2
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 0
36226: PUSH
36227: LD_INT 2
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 1
36236: NEG
36237: PUSH
36238: LD_INT 1
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 1
36247: PUSH
36248: LD_INT 3
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 0
36257: PUSH
36258: LD_INT 3
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 1
36267: NEG
36268: PUSH
36269: LD_INT 2
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36294: LD_ADDR_VAR 0 12
36298: PUSH
36299: LD_INT 0
36301: PUSH
36302: LD_INT 0
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 0
36311: PUSH
36312: LD_INT 1
36314: NEG
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 1
36322: PUSH
36323: LD_INT 0
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: LD_INT 1
36332: PUSH
36333: LD_INT 1
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 0
36342: PUSH
36343: LD_INT 1
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 1
36352: NEG
36353: PUSH
36354: LD_INT 0
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: LD_INT 1
36363: NEG
36364: PUSH
36365: LD_INT 1
36367: NEG
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 1
36375: PUSH
36376: LD_INT 1
36378: NEG
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 2
36386: PUSH
36387: LD_INT 0
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 2
36396: PUSH
36397: LD_INT 1
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 1
36406: NEG
36407: PUSH
36408: LD_INT 1
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PUSH
36415: LD_INT 2
36417: NEG
36418: PUSH
36419: LD_INT 0
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 2
36428: NEG
36429: PUSH
36430: LD_INT 1
36432: NEG
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 2
36440: NEG
36441: PUSH
36442: LD_INT 1
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 3
36451: NEG
36452: PUSH
36453: LD_INT 0
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 3
36462: NEG
36463: PUSH
36464: LD_INT 1
36466: NEG
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36490: LD_ADDR_VAR 0 13
36494: PUSH
36495: LD_INT 0
36497: PUSH
36498: LD_INT 0
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 0
36507: PUSH
36508: LD_INT 1
36510: NEG
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 1
36518: PUSH
36519: LD_INT 0
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 1
36528: PUSH
36529: LD_INT 1
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 0
36538: PUSH
36539: LD_INT 1
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 1
36548: NEG
36549: PUSH
36550: LD_INT 0
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 1
36559: NEG
36560: PUSH
36561: LD_INT 1
36563: NEG
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 1
36571: NEG
36572: PUSH
36573: LD_INT 2
36575: NEG
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 2
36583: PUSH
36584: LD_INT 1
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 2
36593: PUSH
36594: LD_INT 2
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 1
36603: PUSH
36604: LD_INT 2
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 2
36613: NEG
36614: PUSH
36615: LD_INT 1
36617: NEG
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 2
36625: NEG
36626: PUSH
36627: LD_INT 2
36629: NEG
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 2
36637: NEG
36638: PUSH
36639: LD_INT 3
36641: NEG
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 3
36649: NEG
36650: PUSH
36651: LD_INT 2
36653: NEG
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 3
36661: NEG
36662: PUSH
36663: LD_INT 3
36665: NEG
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36689: LD_ADDR_VAR 0 14
36693: PUSH
36694: LD_INT 0
36696: PUSH
36697: LD_INT 0
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 0
36706: PUSH
36707: LD_INT 1
36709: NEG
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 1
36717: PUSH
36718: LD_INT 0
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 1
36727: PUSH
36728: LD_INT 1
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 0
36737: PUSH
36738: LD_INT 1
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 1
36747: NEG
36748: PUSH
36749: LD_INT 0
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 1
36758: NEG
36759: PUSH
36760: LD_INT 1
36762: NEG
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 1
36770: NEG
36771: PUSH
36772: LD_INT 2
36774: NEG
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 0
36782: PUSH
36783: LD_INT 2
36785: NEG
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 1
36793: PUSH
36794: LD_INT 1
36796: NEG
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 1
36804: PUSH
36805: LD_INT 2
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 0
36814: PUSH
36815: LD_INT 2
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 1
36824: NEG
36825: PUSH
36826: LD_INT 1
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_INT 1
36835: NEG
36836: PUSH
36837: LD_INT 3
36839: NEG
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 0
36847: PUSH
36848: LD_INT 3
36850: NEG
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 1
36858: PUSH
36859: LD_INT 2
36861: NEG
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36885: LD_ADDR_VAR 0 15
36889: PUSH
36890: LD_INT 0
36892: PUSH
36893: LD_INT 0
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 0
36902: PUSH
36903: LD_INT 1
36905: NEG
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 1
36913: PUSH
36914: LD_INT 0
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: LD_INT 1
36923: PUSH
36924: LD_INT 1
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 0
36933: PUSH
36934: LD_INT 1
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 1
36943: NEG
36944: PUSH
36945: LD_INT 0
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: LD_INT 1
36954: NEG
36955: PUSH
36956: LD_INT 1
36958: NEG
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 1
36966: PUSH
36967: LD_INT 1
36969: NEG
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 2
36977: PUSH
36978: LD_INT 0
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 2
36987: PUSH
36988: LD_INT 1
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 1
36997: NEG
36998: PUSH
36999: LD_INT 1
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 2
37008: NEG
37009: PUSH
37010: LD_INT 0
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 2
37019: NEG
37020: PUSH
37021: LD_INT 1
37023: NEG
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 2
37031: PUSH
37032: LD_INT 1
37034: NEG
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 3
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 3
37052: PUSH
37053: LD_INT 1
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37078: LD_ADDR_VAR 0 16
37082: PUSH
37083: LD_INT 0
37085: PUSH
37086: LD_INT 0
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 0
37095: PUSH
37096: LD_INT 1
37098: NEG
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 1
37106: PUSH
37107: LD_INT 0
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 1
37116: PUSH
37117: LD_INT 1
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 0
37126: PUSH
37127: LD_INT 1
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 1
37136: NEG
37137: PUSH
37138: LD_INT 0
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PUSH
37145: LD_INT 1
37147: NEG
37148: PUSH
37149: LD_INT 1
37151: NEG
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 1
37159: NEG
37160: PUSH
37161: LD_INT 2
37163: NEG
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 2
37171: PUSH
37172: LD_INT 1
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 2
37181: PUSH
37182: LD_INT 2
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 1
37191: PUSH
37192: LD_INT 2
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 2
37201: NEG
37202: PUSH
37203: LD_INT 1
37205: NEG
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 2
37213: NEG
37214: PUSH
37215: LD_INT 2
37217: NEG
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 3
37225: PUSH
37226: LD_INT 2
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 3
37235: PUSH
37236: LD_INT 3
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 2
37245: PUSH
37246: LD_INT 3
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37271: LD_ADDR_VAR 0 17
37275: PUSH
37276: LD_INT 0
37278: PUSH
37279: LD_INT 0
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 0
37288: PUSH
37289: LD_INT 1
37291: NEG
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 1
37299: PUSH
37300: LD_INT 0
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 1
37309: PUSH
37310: LD_INT 1
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 0
37319: PUSH
37320: LD_INT 1
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 1
37329: NEG
37330: PUSH
37331: LD_INT 0
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 1
37340: NEG
37341: PUSH
37342: LD_INT 1
37344: NEG
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 1
37352: NEG
37353: PUSH
37354: LD_INT 2
37356: NEG
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 0
37364: PUSH
37365: LD_INT 2
37367: NEG
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 1
37375: PUSH
37376: LD_INT 1
37378: NEG
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 2
37386: PUSH
37387: LD_INT 0
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 2
37396: PUSH
37397: LD_INT 1
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 2
37406: PUSH
37407: LD_INT 2
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 1
37416: PUSH
37417: LD_INT 2
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 0
37426: PUSH
37427: LD_INT 2
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 1
37436: NEG
37437: PUSH
37438: LD_INT 1
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 2
37447: NEG
37448: PUSH
37449: LD_INT 0
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 2
37458: NEG
37459: PUSH
37460: LD_INT 1
37462: NEG
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 2
37470: NEG
37471: PUSH
37472: LD_INT 2
37474: NEG
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37501: LD_ADDR_VAR 0 18
37505: PUSH
37506: LD_INT 0
37508: PUSH
37509: LD_INT 0
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 0
37518: PUSH
37519: LD_INT 1
37521: NEG
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: LD_INT 1
37529: PUSH
37530: LD_INT 0
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 1
37539: PUSH
37540: LD_INT 1
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 0
37549: PUSH
37550: LD_INT 1
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 1
37559: NEG
37560: PUSH
37561: LD_INT 0
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 1
37570: NEG
37571: PUSH
37572: LD_INT 1
37574: NEG
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 1
37582: NEG
37583: PUSH
37584: LD_INT 2
37586: NEG
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 0
37594: PUSH
37595: LD_INT 2
37597: NEG
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 1
37605: PUSH
37606: LD_INT 1
37608: NEG
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 2
37616: PUSH
37617: LD_INT 0
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 2
37626: PUSH
37627: LD_INT 1
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 2
37636: PUSH
37637: LD_INT 2
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 1
37646: PUSH
37647: LD_INT 2
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 0
37656: PUSH
37657: LD_INT 2
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 1
37666: NEG
37667: PUSH
37668: LD_INT 1
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 2
37677: NEG
37678: PUSH
37679: LD_INT 0
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 2
37688: NEG
37689: PUSH
37690: LD_INT 1
37692: NEG
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 2
37700: NEG
37701: PUSH
37702: LD_INT 2
37704: NEG
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37731: LD_ADDR_VAR 0 19
37735: PUSH
37736: LD_INT 0
37738: PUSH
37739: LD_INT 0
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PUSH
37746: LD_INT 0
37748: PUSH
37749: LD_INT 1
37751: NEG
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 1
37759: PUSH
37760: LD_INT 0
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 1
37769: PUSH
37770: LD_INT 1
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 0
37779: PUSH
37780: LD_INT 1
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 1
37789: NEG
37790: PUSH
37791: LD_INT 0
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 1
37800: NEG
37801: PUSH
37802: LD_INT 1
37804: NEG
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 1
37812: NEG
37813: PUSH
37814: LD_INT 2
37816: NEG
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 0
37824: PUSH
37825: LD_INT 2
37827: NEG
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 1
37835: PUSH
37836: LD_INT 1
37838: NEG
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 2
37846: PUSH
37847: LD_INT 0
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 2
37856: PUSH
37857: LD_INT 1
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 2
37866: PUSH
37867: LD_INT 2
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 1
37876: PUSH
37877: LD_INT 2
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 0
37886: PUSH
37887: LD_INT 2
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 1
37896: NEG
37897: PUSH
37898: LD_INT 1
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 2
37907: NEG
37908: PUSH
37909: LD_INT 0
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 2
37918: NEG
37919: PUSH
37920: LD_INT 1
37922: NEG
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 2
37930: NEG
37931: PUSH
37932: LD_INT 2
37934: NEG
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37961: LD_ADDR_VAR 0 20
37965: PUSH
37966: LD_INT 0
37968: PUSH
37969: LD_INT 0
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 0
37978: PUSH
37979: LD_INT 1
37981: NEG
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 1
37989: PUSH
37990: LD_INT 0
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 1
37999: PUSH
38000: LD_INT 1
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 0
38009: PUSH
38010: LD_INT 1
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 1
38019: NEG
38020: PUSH
38021: LD_INT 0
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 1
38030: NEG
38031: PUSH
38032: LD_INT 1
38034: NEG
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 1
38042: NEG
38043: PUSH
38044: LD_INT 2
38046: NEG
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 0
38054: PUSH
38055: LD_INT 2
38057: NEG
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 1
38065: PUSH
38066: LD_INT 1
38068: NEG
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 2
38076: PUSH
38077: LD_INT 0
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 2
38086: PUSH
38087: LD_INT 1
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 2
38096: PUSH
38097: LD_INT 2
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 1
38106: PUSH
38107: LD_INT 2
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 0
38116: PUSH
38117: LD_INT 2
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 1
38126: NEG
38127: PUSH
38128: LD_INT 1
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 2
38137: NEG
38138: PUSH
38139: LD_INT 0
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 2
38148: NEG
38149: PUSH
38150: LD_INT 1
38152: NEG
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 2
38160: NEG
38161: PUSH
38162: LD_INT 2
38164: NEG
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38191: LD_ADDR_VAR 0 21
38195: PUSH
38196: LD_INT 0
38198: PUSH
38199: LD_INT 0
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 0
38208: PUSH
38209: LD_INT 1
38211: NEG
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 1
38219: PUSH
38220: LD_INT 0
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 1
38229: PUSH
38230: LD_INT 1
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 0
38239: PUSH
38240: LD_INT 1
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 1
38249: NEG
38250: PUSH
38251: LD_INT 0
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 1
38260: NEG
38261: PUSH
38262: LD_INT 1
38264: NEG
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 1
38272: NEG
38273: PUSH
38274: LD_INT 2
38276: NEG
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 0
38284: PUSH
38285: LD_INT 2
38287: NEG
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 1
38295: PUSH
38296: LD_INT 1
38298: NEG
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 2
38306: PUSH
38307: LD_INT 0
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 2
38316: PUSH
38317: LD_INT 1
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 2
38326: PUSH
38327: LD_INT 2
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 1
38336: PUSH
38337: LD_INT 2
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 0
38346: PUSH
38347: LD_INT 2
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 1
38356: NEG
38357: PUSH
38358: LD_INT 1
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 2
38367: NEG
38368: PUSH
38369: LD_INT 0
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 2
38378: NEG
38379: PUSH
38380: LD_INT 1
38382: NEG
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 2
38390: NEG
38391: PUSH
38392: LD_INT 2
38394: NEG
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38421: LD_ADDR_VAR 0 22
38425: PUSH
38426: LD_INT 0
38428: PUSH
38429: LD_INT 0
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 0
38438: PUSH
38439: LD_INT 1
38441: NEG
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 1
38449: PUSH
38450: LD_INT 0
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 1
38459: PUSH
38460: LD_INT 1
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: LD_INT 1
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 1
38479: NEG
38480: PUSH
38481: LD_INT 0
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 1
38490: NEG
38491: PUSH
38492: LD_INT 1
38494: NEG
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 1
38502: NEG
38503: PUSH
38504: LD_INT 2
38506: NEG
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 0
38514: PUSH
38515: LD_INT 2
38517: NEG
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 1
38525: PUSH
38526: LD_INT 1
38528: NEG
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 2
38536: PUSH
38537: LD_INT 0
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 2
38546: PUSH
38547: LD_INT 1
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 2
38556: PUSH
38557: LD_INT 2
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 1
38566: PUSH
38567: LD_INT 2
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 0
38576: PUSH
38577: LD_INT 2
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 1
38586: NEG
38587: PUSH
38588: LD_INT 1
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 2
38597: NEG
38598: PUSH
38599: LD_INT 0
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 2
38608: NEG
38609: PUSH
38610: LD_INT 1
38612: NEG
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 2
38620: NEG
38621: PUSH
38622: LD_INT 2
38624: NEG
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38651: LD_ADDR_VAR 0 23
38655: PUSH
38656: LD_INT 0
38658: PUSH
38659: LD_INT 0
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 0
38668: PUSH
38669: LD_INT 1
38671: NEG
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 1
38679: PUSH
38680: LD_INT 0
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 1
38689: PUSH
38690: LD_INT 1
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 0
38699: PUSH
38700: LD_INT 1
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 1
38709: NEG
38710: PUSH
38711: LD_INT 0
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 1
38720: NEG
38721: PUSH
38722: LD_INT 1
38724: NEG
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 1
38732: NEG
38733: PUSH
38734: LD_INT 2
38736: NEG
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 0
38744: PUSH
38745: LD_INT 2
38747: NEG
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 1
38755: PUSH
38756: LD_INT 1
38758: NEG
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 2
38766: PUSH
38767: LD_INT 0
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 2
38776: PUSH
38777: LD_INT 1
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 2
38786: PUSH
38787: LD_INT 2
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 1
38796: PUSH
38797: LD_INT 2
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 0
38806: PUSH
38807: LD_INT 2
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 1
38816: NEG
38817: PUSH
38818: LD_INT 1
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 2
38827: NEG
38828: PUSH
38829: LD_INT 0
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 2
38838: NEG
38839: PUSH
38840: LD_INT 1
38842: NEG
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 2
38850: NEG
38851: PUSH
38852: LD_INT 2
38854: NEG
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 2
38862: NEG
38863: PUSH
38864: LD_INT 3
38866: NEG
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 1
38874: NEG
38875: PUSH
38876: LD_INT 3
38878: NEG
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 1
38886: PUSH
38887: LD_INT 2
38889: NEG
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 2
38897: PUSH
38898: LD_INT 1
38900: NEG
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38931: LD_ADDR_VAR 0 24
38935: PUSH
38936: LD_INT 0
38938: PUSH
38939: LD_INT 0
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 0
38948: PUSH
38949: LD_INT 1
38951: NEG
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 1
38959: PUSH
38960: LD_INT 0
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 1
38969: PUSH
38970: LD_INT 1
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 0
38979: PUSH
38980: LD_INT 1
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 1
38989: NEG
38990: PUSH
38991: LD_INT 0
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 1
39000: NEG
39001: PUSH
39002: LD_INT 1
39004: NEG
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 1
39012: NEG
39013: PUSH
39014: LD_INT 2
39016: NEG
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 0
39024: PUSH
39025: LD_INT 2
39027: NEG
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 1
39035: PUSH
39036: LD_INT 1
39038: NEG
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 2
39046: PUSH
39047: LD_INT 0
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 2
39056: PUSH
39057: LD_INT 1
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 2
39066: PUSH
39067: LD_INT 2
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 1
39076: PUSH
39077: LD_INT 2
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 0
39086: PUSH
39087: LD_INT 2
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 1
39096: NEG
39097: PUSH
39098: LD_INT 1
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 2
39107: NEG
39108: PUSH
39109: LD_INT 0
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 2
39118: NEG
39119: PUSH
39120: LD_INT 1
39122: NEG
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 2
39130: NEG
39131: PUSH
39132: LD_INT 2
39134: NEG
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 1
39142: PUSH
39143: LD_INT 2
39145: NEG
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 2
39153: PUSH
39154: LD_INT 1
39156: NEG
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 3
39164: PUSH
39165: LD_INT 1
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 3
39174: PUSH
39175: LD_INT 2
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39207: LD_ADDR_VAR 0 25
39211: PUSH
39212: LD_INT 0
39214: PUSH
39215: LD_INT 0
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: LD_INT 1
39227: NEG
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 1
39235: PUSH
39236: LD_INT 0
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 1
39245: PUSH
39246: LD_INT 1
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 0
39255: PUSH
39256: LD_INT 1
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 1
39265: NEG
39266: PUSH
39267: LD_INT 0
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 1
39276: NEG
39277: PUSH
39278: LD_INT 1
39280: NEG
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 1
39288: NEG
39289: PUSH
39290: LD_INT 2
39292: NEG
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 0
39300: PUSH
39301: LD_INT 2
39303: NEG
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 1
39311: PUSH
39312: LD_INT 1
39314: NEG
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 2
39322: PUSH
39323: LD_INT 0
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 2
39332: PUSH
39333: LD_INT 1
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 2
39342: PUSH
39343: LD_INT 2
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 1
39352: PUSH
39353: LD_INT 2
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 0
39362: PUSH
39363: LD_INT 2
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 1
39372: NEG
39373: PUSH
39374: LD_INT 1
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 2
39383: NEG
39384: PUSH
39385: LD_INT 0
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 2
39394: NEG
39395: PUSH
39396: LD_INT 1
39398: NEG
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 2
39406: NEG
39407: PUSH
39408: LD_INT 2
39410: NEG
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 3
39418: PUSH
39419: LD_INT 1
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 3
39428: PUSH
39429: LD_INT 2
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 2
39438: PUSH
39439: LD_INT 3
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 1
39448: PUSH
39449: LD_INT 3
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39481: LD_ADDR_VAR 0 26
39485: PUSH
39486: LD_INT 0
39488: PUSH
39489: LD_INT 0
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 0
39498: PUSH
39499: LD_INT 1
39501: NEG
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 1
39509: PUSH
39510: LD_INT 0
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 1
39519: PUSH
39520: LD_INT 1
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 0
39529: PUSH
39530: LD_INT 1
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 1
39539: NEG
39540: PUSH
39541: LD_INT 0
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 1
39550: NEG
39551: PUSH
39552: LD_INT 1
39554: NEG
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 1
39562: NEG
39563: PUSH
39564: LD_INT 2
39566: NEG
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 0
39574: PUSH
39575: LD_INT 2
39577: NEG
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 1
39585: PUSH
39586: LD_INT 1
39588: NEG
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 2
39596: PUSH
39597: LD_INT 0
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 2
39606: PUSH
39607: LD_INT 1
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 2
39616: PUSH
39617: LD_INT 2
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 1
39626: PUSH
39627: LD_INT 2
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 0
39636: PUSH
39637: LD_INT 2
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 1
39646: NEG
39647: PUSH
39648: LD_INT 1
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 2
39657: NEG
39658: PUSH
39659: LD_INT 0
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 2
39668: NEG
39669: PUSH
39670: LD_INT 1
39672: NEG
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 2
39680: NEG
39681: PUSH
39682: LD_INT 2
39684: NEG
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 2
39692: PUSH
39693: LD_INT 3
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 1
39702: PUSH
39703: LD_INT 3
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 1
39712: NEG
39713: PUSH
39714: LD_INT 2
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 2
39723: NEG
39724: PUSH
39725: LD_INT 1
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39757: LD_ADDR_VAR 0 27
39761: PUSH
39762: LD_INT 0
39764: PUSH
39765: LD_INT 0
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 0
39774: PUSH
39775: LD_INT 1
39777: NEG
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 1
39785: PUSH
39786: LD_INT 0
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 1
39795: PUSH
39796: LD_INT 1
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 0
39805: PUSH
39806: LD_INT 1
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 1
39815: NEG
39816: PUSH
39817: LD_INT 0
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 1
39826: NEG
39827: PUSH
39828: LD_INT 1
39830: NEG
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 1
39838: NEG
39839: PUSH
39840: LD_INT 2
39842: NEG
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 0
39850: PUSH
39851: LD_INT 2
39853: NEG
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 1
39861: PUSH
39862: LD_INT 1
39864: NEG
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 2
39872: PUSH
39873: LD_INT 0
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 2
39882: PUSH
39883: LD_INT 1
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 2
39892: PUSH
39893: LD_INT 2
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 1
39902: PUSH
39903: LD_INT 2
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 0
39912: PUSH
39913: LD_INT 2
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 1
39922: NEG
39923: PUSH
39924: LD_INT 1
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 2
39933: NEG
39934: PUSH
39935: LD_INT 0
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 2
39944: NEG
39945: PUSH
39946: LD_INT 1
39948: NEG
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 2
39956: NEG
39957: PUSH
39958: LD_INT 2
39960: NEG
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 1
39968: NEG
39969: PUSH
39970: LD_INT 2
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 2
39979: NEG
39980: PUSH
39981: LD_INT 1
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 3
39990: NEG
39991: PUSH
39992: LD_INT 1
39994: NEG
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 3
40002: NEG
40003: PUSH
40004: LD_INT 2
40006: NEG
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40037: LD_ADDR_VAR 0 28
40041: PUSH
40042: LD_INT 0
40044: PUSH
40045: LD_INT 0
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 0
40054: PUSH
40055: LD_INT 1
40057: NEG
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 1
40065: PUSH
40066: LD_INT 0
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 1
40075: PUSH
40076: LD_INT 1
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 0
40085: PUSH
40086: LD_INT 1
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 1
40095: NEG
40096: PUSH
40097: LD_INT 0
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 1
40106: NEG
40107: PUSH
40108: LD_INT 1
40110: NEG
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 1
40118: NEG
40119: PUSH
40120: LD_INT 2
40122: NEG
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 0
40130: PUSH
40131: LD_INT 2
40133: NEG
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 1
40141: PUSH
40142: LD_INT 1
40144: NEG
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 2
40152: PUSH
40153: LD_INT 0
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 2
40162: PUSH
40163: LD_INT 1
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 2
40172: PUSH
40173: LD_INT 2
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: LD_INT 2
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 0
40192: PUSH
40193: LD_INT 2
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 1
40202: NEG
40203: PUSH
40204: LD_INT 1
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 2
40213: NEG
40214: PUSH
40215: LD_INT 0
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 2
40224: NEG
40225: PUSH
40226: LD_INT 1
40228: NEG
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 2
40236: NEG
40237: PUSH
40238: LD_INT 2
40240: NEG
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 2
40248: NEG
40249: PUSH
40250: LD_INT 3
40252: NEG
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 1
40260: NEG
40261: PUSH
40262: LD_INT 3
40264: NEG
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 3
40272: NEG
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 3
40284: NEG
40285: PUSH
40286: LD_INT 2
40288: NEG
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40319: LD_ADDR_VAR 0 29
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: LD_INT 0
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 0
40336: PUSH
40337: LD_INT 1
40339: NEG
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 1
40347: PUSH
40348: LD_INT 0
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 1
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 0
40367: PUSH
40368: LD_INT 1
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 1
40377: NEG
40378: PUSH
40379: LD_INT 0
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 1
40388: NEG
40389: PUSH
40390: LD_INT 1
40392: NEG
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 1
40400: NEG
40401: PUSH
40402: LD_INT 2
40404: NEG
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: LD_INT 2
40415: NEG
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 1
40423: PUSH
40424: LD_INT 1
40426: NEG
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 2
40434: PUSH
40435: LD_INT 0
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 2
40444: PUSH
40445: LD_INT 1
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 1
40454: PUSH
40455: LD_INT 2
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: LD_INT 2
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 1
40474: NEG
40475: PUSH
40476: LD_INT 1
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 2
40485: NEG
40486: PUSH
40487: LD_INT 1
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 2
40497: NEG
40498: PUSH
40499: LD_INT 2
40501: NEG
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 2
40509: NEG
40510: PUSH
40511: LD_INT 3
40513: NEG
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 2
40521: PUSH
40522: LD_INT 1
40524: NEG
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 3
40532: PUSH
40533: LD_INT 1
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 1
40542: PUSH
40543: LD_INT 3
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 1
40552: NEG
40553: PUSH
40554: LD_INT 2
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 3
40563: NEG
40564: PUSH
40565: LD_INT 2
40567: NEG
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40598: LD_ADDR_VAR 0 30
40602: PUSH
40603: LD_INT 0
40605: PUSH
40606: LD_INT 0
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 0
40615: PUSH
40616: LD_INT 1
40618: NEG
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 1
40626: PUSH
40627: LD_INT 0
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 1
40636: PUSH
40637: LD_INT 1
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 0
40646: PUSH
40647: LD_INT 1
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 1
40656: NEG
40657: PUSH
40658: LD_INT 0
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 1
40667: NEG
40668: PUSH
40669: LD_INT 1
40671: NEG
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 1
40679: NEG
40680: PUSH
40681: LD_INT 2
40683: NEG
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 0
40691: PUSH
40692: LD_INT 2
40694: NEG
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 1
40702: PUSH
40703: LD_INT 1
40705: NEG
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 2
40713: PUSH
40714: LD_INT 0
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 2
40723: PUSH
40724: LD_INT 1
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 2
40733: PUSH
40734: LD_INT 2
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 1
40743: PUSH
40744: LD_INT 2
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 1
40753: NEG
40754: PUSH
40755: LD_INT 1
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 2
40764: NEG
40765: PUSH
40766: LD_INT 0
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 2
40775: NEG
40776: PUSH
40777: LD_INT 1
40779: NEG
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 1
40787: NEG
40788: PUSH
40789: LD_INT 3
40791: NEG
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 1
40799: PUSH
40800: LD_INT 2
40802: NEG
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 3
40810: PUSH
40811: LD_INT 2
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 2
40820: PUSH
40821: LD_INT 3
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 2
40830: NEG
40831: PUSH
40832: LD_INT 1
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 3
40841: NEG
40842: PUSH
40843: LD_INT 1
40845: NEG
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40876: LD_ADDR_VAR 0 31
40880: PUSH
40881: LD_INT 0
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 0
40893: PUSH
40894: LD_INT 1
40896: NEG
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 1
40904: PUSH
40905: LD_INT 0
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 1
40914: PUSH
40915: LD_INT 1
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: LD_INT 1
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 1
40934: NEG
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 1
40945: NEG
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 1
40957: NEG
40958: PUSH
40959: LD_INT 2
40961: NEG
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 1
40969: PUSH
40970: LD_INT 1
40972: NEG
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 2
40980: PUSH
40981: LD_INT 0
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 2
40990: PUSH
40991: LD_INT 1
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 2
41000: PUSH
41001: LD_INT 2
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 1
41010: PUSH
41011: LD_INT 2
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: LD_INT 2
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 1
41030: NEG
41031: PUSH
41032: LD_INT 1
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 2
41041: NEG
41042: PUSH
41043: LD_INT 1
41045: NEG
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 2
41053: NEG
41054: PUSH
41055: LD_INT 2
41057: NEG
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 2
41065: NEG
41066: PUSH
41067: LD_INT 3
41069: NEG
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 2
41077: PUSH
41078: LD_INT 1
41080: NEG
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 3
41088: PUSH
41089: LD_INT 1
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: LD_INT 3
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 1
41108: NEG
41109: PUSH
41110: LD_INT 2
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 3
41119: NEG
41120: PUSH
41121: LD_INT 2
41123: NEG
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41154: LD_ADDR_VAR 0 32
41158: PUSH
41159: LD_INT 0
41161: PUSH
41162: LD_INT 0
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 0
41171: PUSH
41172: LD_INT 1
41174: NEG
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 1
41182: PUSH
41183: LD_INT 0
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 1
41192: PUSH
41193: LD_INT 1
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 0
41202: PUSH
41203: LD_INT 1
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 1
41212: NEG
41213: PUSH
41214: LD_INT 0
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 1
41223: NEG
41224: PUSH
41225: LD_INT 1
41227: NEG
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 1
41235: NEG
41236: PUSH
41237: LD_INT 2
41239: NEG
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 0
41247: PUSH
41248: LD_INT 2
41250: NEG
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 1
41258: PUSH
41259: LD_INT 1
41261: NEG
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 2
41269: PUSH
41270: LD_INT 1
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 2
41279: PUSH
41280: LD_INT 2
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 1
41289: PUSH
41290: LD_INT 2
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 0
41299: PUSH
41300: LD_INT 2
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 1
41309: NEG
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 2
41320: NEG
41321: PUSH
41322: LD_INT 0
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 2
41331: NEG
41332: PUSH
41333: LD_INT 1
41335: NEG
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 1
41343: NEG
41344: PUSH
41345: LD_INT 3
41347: NEG
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 1
41355: PUSH
41356: LD_INT 2
41358: NEG
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 3
41366: PUSH
41367: LD_INT 2
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 2
41376: PUSH
41377: LD_INT 3
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 2
41386: NEG
41387: PUSH
41388: LD_INT 1
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 3
41397: NEG
41398: PUSH
41399: LD_INT 1
41401: NEG
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41432: LD_ADDR_VAR 0 33
41436: PUSH
41437: LD_INT 0
41439: PUSH
41440: LD_INT 0
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 0
41449: PUSH
41450: LD_INT 1
41452: NEG
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 1
41460: PUSH
41461: LD_INT 0
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 1
41470: PUSH
41471: LD_INT 1
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 0
41480: PUSH
41481: LD_INT 1
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 1
41490: NEG
41491: PUSH
41492: LD_INT 0
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 1
41501: NEG
41502: PUSH
41503: LD_INT 1
41505: NEG
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 1
41513: NEG
41514: PUSH
41515: LD_INT 2
41517: NEG
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 1
41525: PUSH
41526: LD_INT 1
41528: NEG
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 2
41536: PUSH
41537: LD_INT 0
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 2
41546: PUSH
41547: LD_INT 1
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 1
41556: PUSH
41557: LD_INT 2
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 0
41566: PUSH
41567: LD_INT 2
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 1
41576: NEG
41577: PUSH
41578: LD_INT 1
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 2
41587: NEG
41588: PUSH
41589: LD_INT 0
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 2
41598: NEG
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 2
41610: NEG
41611: PUSH
41612: LD_INT 2
41614: NEG
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 2
41622: NEG
41623: PUSH
41624: LD_INT 3
41626: NEG
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 2
41634: PUSH
41635: LD_INT 1
41637: NEG
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 3
41645: PUSH
41646: LD_INT 1
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 1
41655: PUSH
41656: LD_INT 3
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 1
41665: NEG
41666: PUSH
41667: LD_INT 2
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 3
41676: NEG
41677: PUSH
41678: LD_INT 2
41680: NEG
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41711: LD_ADDR_VAR 0 34
41715: PUSH
41716: LD_INT 0
41718: PUSH
41719: LD_INT 0
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 0
41728: PUSH
41729: LD_INT 1
41731: NEG
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 1
41739: PUSH
41740: LD_INT 0
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 1
41749: PUSH
41750: LD_INT 1
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 0
41759: PUSH
41760: LD_INT 1
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 1
41769: NEG
41770: PUSH
41771: LD_INT 0
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 1
41780: NEG
41781: PUSH
41782: LD_INT 1
41784: NEG
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 1
41792: NEG
41793: PUSH
41794: LD_INT 2
41796: NEG
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 0
41804: PUSH
41805: LD_INT 2
41807: NEG
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 1
41815: PUSH
41816: LD_INT 1
41818: NEG
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 2
41826: PUSH
41827: LD_INT 1
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 2
41836: PUSH
41837: LD_INT 2
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 1
41846: PUSH
41847: LD_INT 2
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 1
41856: NEG
41857: PUSH
41858: LD_INT 1
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 2
41867: NEG
41868: PUSH
41869: LD_INT 0
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 2
41878: NEG
41879: PUSH
41880: LD_INT 1
41882: NEG
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 2
41890: NEG
41891: PUSH
41892: LD_INT 2
41894: NEG
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 1
41902: NEG
41903: PUSH
41904: LD_INT 3
41906: NEG
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: LD_INT 2
41917: NEG
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 3
41925: PUSH
41926: LD_INT 2
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 2
41935: PUSH
41936: LD_INT 3
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 2
41945: NEG
41946: PUSH
41947: LD_INT 1
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 3
41956: NEG
41957: PUSH
41958: LD_INT 1
41960: NEG
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41991: LD_ADDR_VAR 0 35
41995: PUSH
41996: LD_INT 0
41998: PUSH
41999: LD_INT 0
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: LD_INT 1
42011: NEG
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 1
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 1
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 0
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 1
42049: NEG
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 1
42060: NEG
42061: PUSH
42062: LD_INT 1
42064: NEG
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 2
42072: PUSH
42073: LD_INT 1
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 2
42082: NEG
42083: PUSH
42084: LD_INT 1
42086: NEG
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42103: LD_ADDR_VAR 0 36
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: LD_INT 0
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 1
42141: PUSH
42142: LD_INT 1
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 0
42151: PUSH
42152: LD_INT 1
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 1
42161: NEG
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 1
42172: NEG
42173: PUSH
42174: LD_INT 1
42176: NEG
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 1
42184: NEG
42185: PUSH
42186: LD_INT 2
42188: NEG
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 1
42196: PUSH
42197: LD_INT 2
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42215: LD_ADDR_VAR 0 37
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 0
42232: PUSH
42233: LD_INT 1
42235: NEG
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 1
42243: PUSH
42244: LD_INT 0
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 1
42253: PUSH
42254: LD_INT 1
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 0
42263: PUSH
42264: LD_INT 1
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 1
42273: NEG
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 1
42284: NEG
42285: PUSH
42286: LD_INT 1
42288: NEG
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 1
42296: PUSH
42297: LD_INT 1
42299: NEG
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 1
42307: NEG
42308: PUSH
42309: LD_INT 1
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42327: LD_ADDR_VAR 0 38
42331: PUSH
42332: LD_INT 0
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: LD_INT 1
42347: NEG
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 1
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: LD_INT 1
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 0
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 1
42385: NEG
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 1
42396: NEG
42397: PUSH
42398: LD_INT 1
42400: NEG
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 2
42408: PUSH
42409: LD_INT 1
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 2
42418: NEG
42419: PUSH
42420: LD_INT 1
42422: NEG
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42439: LD_ADDR_VAR 0 39
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 0
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 1
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 1
42477: PUSH
42478: LD_INT 1
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: LD_INT 1
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 1
42497: NEG
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 1
42508: NEG
42509: PUSH
42510: LD_INT 1
42512: NEG
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 1
42520: NEG
42521: PUSH
42522: LD_INT 2
42524: NEG
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 1
42532: PUSH
42533: LD_INT 2
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42551: LD_ADDR_VAR 0 40
42555: PUSH
42556: LD_INT 0
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: LD_INT 1
42571: NEG
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 1
42579: PUSH
42580: LD_INT 0
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 1
42589: PUSH
42590: LD_INT 1
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 0
42599: PUSH
42600: LD_INT 1
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 1
42609: NEG
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 1
42620: NEG
42621: PUSH
42622: LD_INT 1
42624: NEG
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: LD_INT 1
42635: NEG
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 1
42643: NEG
42644: PUSH
42645: LD_INT 1
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42663: LD_ADDR_VAR 0 41
42667: PUSH
42668: LD_INT 0
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 0
42680: PUSH
42681: LD_INT 1
42683: NEG
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 1
42691: PUSH
42692: LD_INT 0
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 1
42701: PUSH
42702: LD_INT 1
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 0
42711: PUSH
42712: LD_INT 1
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 1
42721: NEG
42722: PUSH
42723: LD_INT 0
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: LD_INT 1
42736: NEG
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 1
42744: NEG
42745: PUSH
42746: LD_INT 2
42748: NEG
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 1
42756: PUSH
42757: LD_INT 1
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 2
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 2
42777: PUSH
42778: LD_INT 1
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 2
42787: PUSH
42788: LD_INT 2
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 1
42797: PUSH
42798: LD_INT 2
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 1
42807: NEG
42808: PUSH
42809: LD_INT 1
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 2
42818: NEG
42819: PUSH
42820: LD_INT 0
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 2
42829: NEG
42830: PUSH
42831: LD_INT 1
42833: NEG
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 2
42841: NEG
42842: PUSH
42843: LD_INT 2
42845: NEG
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 2
42853: NEG
42854: PUSH
42855: LD_INT 3
42857: NEG
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 2
42865: PUSH
42866: LD_INT 1
42868: NEG
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 3
42876: PUSH
42877: LD_INT 0
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 3
42886: PUSH
42887: LD_INT 1
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 3
42896: PUSH
42897: LD_INT 2
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 3
42906: PUSH
42907: LD_INT 3
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 2
42916: PUSH
42917: LD_INT 3
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 2
42926: NEG
42927: PUSH
42928: LD_INT 1
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 3
42937: NEG
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 3
42948: NEG
42949: PUSH
42950: LD_INT 1
42952: NEG
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 3
42960: NEG
42961: PUSH
42962: LD_INT 2
42964: NEG
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 3
42972: NEG
42973: PUSH
42974: LD_INT 3
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43013: LD_ADDR_VAR 0 42
43017: PUSH
43018: LD_INT 0
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 0
43030: PUSH
43031: LD_INT 1
43033: NEG
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 1
43041: PUSH
43042: LD_INT 0
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 1
43051: PUSH
43052: LD_INT 1
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 0
43061: PUSH
43062: LD_INT 1
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 1
43071: NEG
43072: PUSH
43073: LD_INT 0
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 1
43082: NEG
43083: PUSH
43084: LD_INT 1
43086: NEG
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 1
43094: NEG
43095: PUSH
43096: LD_INT 2
43098: NEG
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 0
43106: PUSH
43107: LD_INT 2
43109: NEG
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 1
43117: PUSH
43118: LD_INT 1
43120: NEG
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 2
43128: PUSH
43129: LD_INT 1
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 2
43138: PUSH
43139: LD_INT 2
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 1
43148: PUSH
43149: LD_INT 2
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 0
43158: PUSH
43159: LD_INT 2
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 1
43168: NEG
43169: PUSH
43170: LD_INT 1
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 2
43179: NEG
43180: PUSH
43181: LD_INT 1
43183: NEG
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 2
43191: NEG
43192: PUSH
43193: LD_INT 2
43195: NEG
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 2
43203: NEG
43204: PUSH
43205: LD_INT 3
43207: NEG
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 1
43215: NEG
43216: PUSH
43217: LD_INT 3
43219: NEG
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 0
43227: PUSH
43228: LD_INT 3
43230: NEG
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 1
43238: PUSH
43239: LD_INT 2
43241: NEG
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 3
43249: PUSH
43250: LD_INT 2
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 3
43259: PUSH
43260: LD_INT 3
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 2
43269: PUSH
43270: LD_INT 3
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: LD_INT 3
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: LD_INT 3
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 1
43299: NEG
43300: PUSH
43301: LD_INT 2
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 3
43310: NEG
43311: PUSH
43312: LD_INT 2
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 3
43322: NEG
43323: PUSH
43324: LD_INT 3
43326: NEG
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43363: LD_ADDR_VAR 0 43
43367: PUSH
43368: LD_INT 0
43370: PUSH
43371: LD_INT 0
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 0
43380: PUSH
43381: LD_INT 1
43383: NEG
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 1
43391: PUSH
43392: LD_INT 0
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 1
43401: PUSH
43402: LD_INT 1
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 0
43411: PUSH
43412: LD_INT 1
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 1
43421: NEG
43422: PUSH
43423: LD_INT 0
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 1
43432: NEG
43433: PUSH
43434: LD_INT 1
43436: NEG
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 1
43444: NEG
43445: PUSH
43446: LD_INT 2
43448: NEG
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 0
43456: PUSH
43457: LD_INT 2
43459: NEG
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: PUSH
43468: LD_INT 1
43470: NEG
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 2
43478: PUSH
43479: LD_INT 0
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 2
43488: PUSH
43489: LD_INT 1
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 1
43498: PUSH
43499: LD_INT 2
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 0
43508: PUSH
43509: LD_INT 2
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 1
43518: NEG
43519: PUSH
43520: LD_INT 1
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 2
43529: NEG
43530: PUSH
43531: LD_INT 0
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 2
43540: NEG
43541: PUSH
43542: LD_INT 1
43544: NEG
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 1
43552: NEG
43553: PUSH
43554: LD_INT 3
43556: NEG
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 0
43564: PUSH
43565: LD_INT 3
43567: NEG
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 1
43575: PUSH
43576: LD_INT 2
43578: NEG
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 2
43586: PUSH
43587: LD_INT 1
43589: NEG
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 3
43597: PUSH
43598: LD_INT 0
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 3
43607: PUSH
43608: LD_INT 1
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 1
43617: PUSH
43618: LD_INT 3
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 0
43627: PUSH
43628: LD_INT 3
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 1
43637: NEG
43638: PUSH
43639: LD_INT 2
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 2
43648: NEG
43649: PUSH
43650: LD_INT 1
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 3
43659: NEG
43660: PUSH
43661: LD_INT 0
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 3
43670: NEG
43671: PUSH
43672: LD_INT 1
43674: NEG
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43711: LD_ADDR_VAR 0 44
43715: PUSH
43716: LD_INT 0
43718: PUSH
43719: LD_INT 0
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 0
43728: PUSH
43729: LD_INT 1
43731: NEG
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 1
43739: PUSH
43740: LD_INT 0
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 1
43749: PUSH
43750: LD_INT 1
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 0
43759: PUSH
43760: LD_INT 1
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 1
43769: NEG
43770: PUSH
43771: LD_INT 0
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: LD_INT 1
43784: NEG
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 1
43792: NEG
43793: PUSH
43794: LD_INT 2
43796: NEG
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 1
43804: PUSH
43805: LD_INT 1
43807: NEG
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 2
43815: PUSH
43816: LD_INT 0
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 2
43825: PUSH
43826: LD_INT 1
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 2
43835: PUSH
43836: LD_INT 2
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 1
43845: PUSH
43846: LD_INT 2
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 1
43855: NEG
43856: PUSH
43857: LD_INT 1
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 2
43866: NEG
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 2
43877: NEG
43878: PUSH
43879: LD_INT 1
43881: NEG
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 2
43889: NEG
43890: PUSH
43891: LD_INT 2
43893: NEG
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 2
43901: NEG
43902: PUSH
43903: LD_INT 3
43905: NEG
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 2
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 3
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 3
43934: PUSH
43935: LD_INT 1
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 3
43944: PUSH
43945: LD_INT 2
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 3
43954: PUSH
43955: LD_INT 3
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 2
43964: PUSH
43965: LD_INT 3
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 2
43974: NEG
43975: PUSH
43976: LD_INT 1
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 3
43985: NEG
43986: PUSH
43987: LD_INT 0
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 3
43996: NEG
43997: PUSH
43998: LD_INT 1
44000: NEG
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 3
44008: NEG
44009: PUSH
44010: LD_INT 2
44012: NEG
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 3
44020: NEG
44021: PUSH
44022: LD_INT 3
44024: NEG
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44061: LD_ADDR_VAR 0 45
44065: PUSH
44066: LD_INT 0
44068: PUSH
44069: LD_INT 0
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 0
44078: PUSH
44079: LD_INT 1
44081: NEG
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 1
44089: PUSH
44090: LD_INT 0
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: PUSH
44100: LD_INT 1
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 0
44109: PUSH
44110: LD_INT 1
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 1
44119: NEG
44120: PUSH
44121: LD_INT 0
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 1
44130: NEG
44131: PUSH
44132: LD_INT 1
44134: NEG
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 1
44142: NEG
44143: PUSH
44144: LD_INT 2
44146: NEG
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 0
44154: PUSH
44155: LD_INT 2
44157: NEG
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 1
44165: PUSH
44166: LD_INT 1
44168: NEG
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 2
44176: PUSH
44177: LD_INT 1
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 2
44186: PUSH
44187: LD_INT 2
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 1
44196: PUSH
44197: LD_INT 2
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 0
44206: PUSH
44207: LD_INT 2
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: LD_INT 1
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 2
44227: NEG
44228: PUSH
44229: LD_INT 1
44231: NEG
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 2
44239: NEG
44240: PUSH
44241: LD_INT 2
44243: NEG
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 2
44251: NEG
44252: PUSH
44253: LD_INT 3
44255: NEG
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 1
44263: NEG
44264: PUSH
44265: LD_INT 3
44267: NEG
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 0
44275: PUSH
44276: LD_INT 3
44278: NEG
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 1
44286: PUSH
44287: LD_INT 2
44289: NEG
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 3
44297: PUSH
44298: LD_INT 2
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 3
44307: PUSH
44308: LD_INT 3
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 2
44317: PUSH
44318: LD_INT 3
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 1
44327: PUSH
44328: LD_INT 3
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: LD_INT 3
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 1
44347: NEG
44348: PUSH
44349: LD_INT 2
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 3
44358: NEG
44359: PUSH
44360: LD_INT 2
44362: NEG
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 3
44370: NEG
44371: PUSH
44372: LD_INT 3
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44411: LD_ADDR_VAR 0 46
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: LD_INT 0
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: LD_INT 1
44431: NEG
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 1
44469: NEG
44470: PUSH
44471: LD_INT 0
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 1
44480: NEG
44481: PUSH
44482: LD_INT 1
44484: NEG
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: LD_INT 2
44496: NEG
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 0
44504: PUSH
44505: LD_INT 2
44507: NEG
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: LD_INT 1
44518: NEG
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 2
44526: PUSH
44527: LD_INT 0
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 2
44536: PUSH
44537: LD_INT 1
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: LD_INT 2
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 0
44556: PUSH
44557: LD_INT 2
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 1
44566: NEG
44567: PUSH
44568: LD_INT 1
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 2
44577: NEG
44578: PUSH
44579: LD_INT 0
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 2
44588: NEG
44589: PUSH
44590: LD_INT 1
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 1
44600: NEG
44601: PUSH
44602: LD_INT 3
44604: NEG
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 0
44612: PUSH
44613: LD_INT 3
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: LD_INT 2
44626: NEG
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 2
44634: PUSH
44635: LD_INT 1
44637: NEG
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 3
44645: PUSH
44646: LD_INT 0
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 3
44655: PUSH
44656: LD_INT 1
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 1
44665: PUSH
44666: LD_INT 3
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: LD_INT 3
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 1
44685: NEG
44686: PUSH
44687: LD_INT 2
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 2
44696: NEG
44697: PUSH
44698: LD_INT 1
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 3
44707: NEG
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 3
44718: NEG
44719: PUSH
44720: LD_INT 1
44722: NEG
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44759: LD_ADDR_VAR 0 47
44763: PUSH
44764: LD_INT 0
44766: PUSH
44767: LD_INT 0
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 0
44776: PUSH
44777: LD_INT 1
44779: NEG
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 1
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 1
44797: PUSH
44798: LD_INT 1
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: LD_INT 1
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 1
44817: NEG
44818: PUSH
44819: LD_INT 0
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: NEG
44829: PUSH
44830: LD_INT 1
44832: NEG
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 1
44840: NEG
44841: PUSH
44842: LD_INT 2
44844: NEG
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: LD_INT 2
44855: NEG
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 1
44863: PUSH
44864: LD_INT 1
44866: NEG
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 2
44874: NEG
44875: PUSH
44876: LD_INT 1
44878: NEG
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 2
44886: NEG
44887: PUSH
44888: LD_INT 2
44890: NEG
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44910: LD_ADDR_VAR 0 48
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 0
44927: PUSH
44928: LD_INT 1
44930: NEG
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 1
44938: PUSH
44939: LD_INT 0
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 0
44958: PUSH
44959: LD_INT 1
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 1
44968: NEG
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 1
44979: NEG
44980: PUSH
44981: LD_INT 1
44983: NEG
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 1
44991: NEG
44992: PUSH
44993: LD_INT 2
44995: NEG
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: LD_INT 2
45006: NEG
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: LD_INT 1
45017: NEG
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 2
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 2
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45057: LD_ADDR_VAR 0 49
45061: PUSH
45062: LD_INT 0
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: LD_INT 1
45077: NEG
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 1
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 1
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: LD_INT 1
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: NEG
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: NEG
45127: PUSH
45128: LD_INT 1
45130: NEG
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: LD_INT 1
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 2
45149: PUSH
45150: LD_INT 0
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 2
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 2
45169: PUSH
45170: LD_INT 2
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 1
45179: PUSH
45180: LD_INT 2
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45201: LD_ADDR_VAR 0 50
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: LD_INT 0
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 0
45218: PUSH
45219: LD_INT 1
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 1
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: LD_INT 1
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 1
45259: NEG
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 1
45270: NEG
45271: PUSH
45272: LD_INT 1
45274: NEG
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 2
45282: PUSH
45283: LD_INT 1
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 2
45292: PUSH
45293: LD_INT 2
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 1
45302: PUSH
45303: LD_INT 2
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: LD_INT 2
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: LD_INT 1
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45345: LD_ADDR_VAR 0 51
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: LD_INT 1
45365: NEG
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 1
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 0
45393: PUSH
45394: LD_INT 1
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 1
45403: NEG
45404: PUSH
45405: LD_INT 0
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 1
45414: NEG
45415: PUSH
45416: LD_INT 1
45418: NEG
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 1
45426: PUSH
45427: LD_INT 2
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: LD_INT 2
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 1
45446: NEG
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 2
45457: NEG
45458: PUSH
45459: LD_INT 0
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 2
45468: NEG
45469: PUSH
45470: LD_INT 1
45472: NEG
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45492: LD_ADDR_VAR 0 52
45496: PUSH
45497: LD_INT 0
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: LD_INT 1
45512: NEG
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 1
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 1
45530: PUSH
45531: LD_INT 1
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: LD_INT 1
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 1
45561: NEG
45562: PUSH
45563: LD_INT 1
45565: NEG
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 1
45573: NEG
45574: PUSH
45575: LD_INT 2
45577: NEG
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 1
45585: NEG
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 2
45596: NEG
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 2
45607: NEG
45608: PUSH
45609: LD_INT 1
45611: NEG
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 2
45619: NEG
45620: PUSH
45621: LD_INT 2
45623: NEG
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45643: LD_ADDR_VAR 0 53
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 0
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: LD_INT 0
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 1
45712: NEG
45713: PUSH
45714: LD_INT 1
45716: NEG
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 1
45724: NEG
45725: PUSH
45726: LD_INT 2
45728: NEG
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: LD_INT 2
45739: NEG
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: LD_INT 1
45750: NEG
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 2
45758: PUSH
45759: LD_INT 0
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 2
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 2
45778: PUSH
45779: LD_INT 2
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 1
45788: PUSH
45789: LD_INT 2
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 0
45798: PUSH
45799: LD_INT 2
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 1
45808: NEG
45809: PUSH
45810: LD_INT 1
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 2
45819: NEG
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 2
45830: NEG
45831: PUSH
45832: LD_INT 1
45834: NEG
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 2
45842: NEG
45843: PUSH
45844: LD_INT 2
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45873: LD_ADDR_VAR 0 54
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: LD_INT 0
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 1
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 1
45911: PUSH
45912: LD_INT 1
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: LD_INT 1
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 1
45931: NEG
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: NEG
45943: PUSH
45944: LD_INT 1
45946: NEG
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 1
45954: NEG
45955: PUSH
45956: LD_INT 2
45958: NEG
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: LD_INT 2
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 1
45977: PUSH
45978: LD_INT 1
45980: NEG
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 2
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 2
45998: PUSH
45999: LD_INT 1
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 2
46008: PUSH
46009: LD_INT 2
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 1
46018: PUSH
46019: LD_INT 2
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 0
46028: PUSH
46029: LD_INT 2
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 1
46038: NEG
46039: PUSH
46040: LD_INT 1
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 2
46049: NEG
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 2
46060: NEG
46061: PUSH
46062: LD_INT 1
46064: NEG
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 2
46072: NEG
46073: PUSH
46074: LD_INT 2
46076: NEG
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46103: LD_ADDR_VAR 0 55
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 1
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 1
46161: NEG
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: LD_INT 1
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: NEG
46185: PUSH
46186: LD_INT 2
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: LD_INT 2
46199: NEG
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: PUSH
46208: LD_INT 1
46210: NEG
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 2
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 2
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 2
46238: PUSH
46239: LD_INT 2
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: PUSH
46249: LD_INT 2
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 0
46258: PUSH
46259: LD_INT 2
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 1
46268: NEG
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 2
46279: NEG
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 2
46290: NEG
46291: PUSH
46292: LD_INT 1
46294: NEG
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 2
46302: NEG
46303: PUSH
46304: LD_INT 2
46306: NEG
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46333: LD_ADDR_VAR 0 56
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: LD_INT 1
46353: NEG
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 1
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 1
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 1
46391: NEG
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 1
46402: NEG
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: NEG
46415: PUSH
46416: LD_INT 2
46418: NEG
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: LD_INT 2
46429: NEG
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 1
46437: PUSH
46438: LD_INT 1
46440: NEG
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 2
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 2
46458: PUSH
46459: LD_INT 1
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 2
46468: PUSH
46469: LD_INT 2
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 1
46478: PUSH
46479: LD_INT 2
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 0
46488: PUSH
46489: LD_INT 2
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 1
46498: NEG
46499: PUSH
46500: LD_INT 1
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 2
46509: NEG
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 2
46520: NEG
46521: PUSH
46522: LD_INT 1
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 2
46532: NEG
46533: PUSH
46534: LD_INT 2
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46563: LD_ADDR_VAR 0 57
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: LD_INT 1
46583: NEG
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 1
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 1
46621: NEG
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 1
46632: NEG
46633: PUSH
46634: LD_INT 1
46636: NEG
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 1
46644: NEG
46645: PUSH
46646: LD_INT 2
46648: NEG
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: LD_INT 2
46659: NEG
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 1
46667: PUSH
46668: LD_INT 1
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 2
46678: PUSH
46679: LD_INT 0
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 2
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 2
46698: PUSH
46699: LD_INT 2
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: PUSH
46709: LD_INT 2
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 0
46718: PUSH
46719: LD_INT 2
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: LD_INT 1
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 2
46739: NEG
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 2
46750: NEG
46751: PUSH
46752: LD_INT 1
46754: NEG
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 2
46762: NEG
46763: PUSH
46764: LD_INT 2
46766: NEG
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46793: LD_ADDR_VAR 0 58
46797: PUSH
46798: LD_INT 0
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 1
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 1
46831: PUSH
46832: LD_INT 1
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 1
46851: NEG
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 1
46862: NEG
46863: PUSH
46864: LD_INT 1
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 1
46874: NEG
46875: PUSH
46876: LD_INT 2
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 0
46886: PUSH
46887: LD_INT 2
46889: NEG
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 1
46897: PUSH
46898: LD_INT 1
46900: NEG
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 2
46908: PUSH
46909: LD_INT 0
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 2
46918: PUSH
46919: LD_INT 1
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 2
46928: PUSH
46929: LD_INT 2
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 1
46938: PUSH
46939: LD_INT 2
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: LD_INT 2
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 1
46958: NEG
46959: PUSH
46960: LD_INT 1
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 2
46969: NEG
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 2
46980: NEG
46981: PUSH
46982: LD_INT 1
46984: NEG
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 2
46992: NEG
46993: PUSH
46994: LD_INT 2
46996: NEG
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47023: LD_ADDR_VAR 0 59
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: LD_INT 1
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 0
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47111: LD_ADDR_VAR 0 60
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: LD_INT 0
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: LD_INT 1
47131: NEG
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 1
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 1
47149: PUSH
47150: LD_INT 1
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: LD_INT 1
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 1
47169: NEG
47170: PUSH
47171: LD_INT 0
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 1
47180: NEG
47181: PUSH
47182: LD_INT 1
47184: NEG
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47199: LD_ADDR_VAR 0 61
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: LD_INT 1
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 1
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: LD_INT 1
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47287: LD_ADDR_VAR 0 62
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: LD_INT 0
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 1
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47375: LD_ADDR_VAR 0 63
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 0
47392: PUSH
47393: LD_INT 1
47395: NEG
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 1
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: LD_INT 1
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 0
47423: PUSH
47424: LD_INT 1
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 1
47444: NEG
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47463: LD_ADDR_VAR 0 64
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: LD_INT 0
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: LD_INT 1
47483: NEG
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 1
47491: PUSH
47492: LD_INT 0
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: LD_INT 1
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: PUSH
47523: LD_INT 0
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 1
47532: NEG
47533: PUSH
47534: LD_INT 1
47536: NEG
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: ST_TO_ADDR
// end ; 1 :
47551: GO 53448
47553: LD_INT 1
47555: DOUBLE
47556: EQUAL
47557: IFTRUE 47561
47559: GO 50184
47561: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47562: LD_ADDR_VAR 0 11
47566: PUSH
47567: LD_INT 1
47569: NEG
47570: PUSH
47571: LD_INT 3
47573: NEG
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 0
47581: PUSH
47582: LD_INT 3
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 1
47592: PUSH
47593: LD_INT 2
47595: NEG
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: LIST
47605: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47606: LD_ADDR_VAR 0 12
47610: PUSH
47611: LD_INT 2
47613: PUSH
47614: LD_INT 1
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 3
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 3
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: LIST
47646: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47647: LD_ADDR_VAR 0 13
47651: PUSH
47652: LD_INT 3
47654: PUSH
47655: LD_INT 2
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 3
47664: PUSH
47665: LD_INT 3
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 2
47674: PUSH
47675: LD_INT 3
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: LIST
47686: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47687: LD_ADDR_VAR 0 14
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: LD_INT 3
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: LD_INT 3
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: PUSH
47716: LD_INT 2
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: LIST
47727: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47728: LD_ADDR_VAR 0 15
47732: PUSH
47733: LD_INT 2
47735: NEG
47736: PUSH
47737: LD_INT 1
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 3
47746: NEG
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 3
47757: NEG
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: LIST
47771: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47772: LD_ADDR_VAR 0 16
47776: PUSH
47777: LD_INT 2
47779: NEG
47780: PUSH
47781: LD_INT 3
47783: NEG
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 3
47791: NEG
47792: PUSH
47793: LD_INT 2
47795: NEG
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 3
47803: NEG
47804: PUSH
47805: LD_INT 3
47807: NEG
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: LIST
47817: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47818: LD_ADDR_VAR 0 17
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: LD_INT 3
47829: NEG
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 0
47837: PUSH
47838: LD_INT 3
47840: NEG
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: LD_INT 2
47851: NEG
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: LIST
47861: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47862: LD_ADDR_VAR 0 18
47866: PUSH
47867: LD_INT 2
47869: PUSH
47870: LD_INT 1
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 3
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 3
47890: PUSH
47891: LD_INT 1
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: LIST
47902: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47903: LD_ADDR_VAR 0 19
47907: PUSH
47908: LD_INT 3
47910: PUSH
47911: LD_INT 2
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 3
47920: PUSH
47921: LD_INT 3
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 2
47930: PUSH
47931: LD_INT 3
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: LIST
47942: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47943: LD_ADDR_VAR 0 20
47947: PUSH
47948: LD_INT 1
47950: PUSH
47951: LD_INT 3
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: LD_INT 3
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 1
47970: NEG
47971: PUSH
47972: LD_INT 2
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: LIST
47983: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47984: LD_ADDR_VAR 0 21
47988: PUSH
47989: LD_INT 2
47991: NEG
47992: PUSH
47993: LD_INT 1
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 3
48002: NEG
48003: PUSH
48004: LD_INT 0
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 3
48013: NEG
48014: PUSH
48015: LD_INT 1
48017: NEG
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: LIST
48027: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48028: LD_ADDR_VAR 0 22
48032: PUSH
48033: LD_INT 2
48035: NEG
48036: PUSH
48037: LD_INT 3
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 3
48047: NEG
48048: PUSH
48049: LD_INT 2
48051: NEG
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 3
48059: NEG
48060: PUSH
48061: LD_INT 3
48063: NEG
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: LIST
48073: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48074: LD_ADDR_VAR 0 23
48078: PUSH
48079: LD_INT 0
48081: PUSH
48082: LD_INT 3
48084: NEG
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: LD_INT 4
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: PUSH
48105: LD_INT 3
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: LIST
48117: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48118: LD_ADDR_VAR 0 24
48122: PUSH
48123: LD_INT 3
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 3
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 4
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: LIST
48158: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48159: LD_ADDR_VAR 0 25
48163: PUSH
48164: LD_INT 3
48166: PUSH
48167: LD_INT 3
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 4
48176: PUSH
48177: LD_INT 3
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 3
48186: PUSH
48187: LD_INT 4
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: LIST
48198: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48199: LD_ADDR_VAR 0 26
48203: PUSH
48204: LD_INT 0
48206: PUSH
48207: LD_INT 3
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 1
48216: PUSH
48217: LD_INT 4
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 1
48226: NEG
48227: PUSH
48228: LD_INT 3
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: LIST
48239: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48240: LD_ADDR_VAR 0 27
48244: PUSH
48245: LD_INT 3
48247: NEG
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 3
48258: NEG
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 4
48269: NEG
48270: PUSH
48271: LD_INT 1
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: LIST
48283: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48284: LD_ADDR_VAR 0 28
48288: PUSH
48289: LD_INT 3
48291: NEG
48292: PUSH
48293: LD_INT 3
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 3
48303: NEG
48304: PUSH
48305: LD_INT 4
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 4
48315: NEG
48316: PUSH
48317: LD_INT 3
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: LIST
48329: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48330: LD_ADDR_VAR 0 29
48334: PUSH
48335: LD_INT 1
48337: NEG
48338: PUSH
48339: LD_INT 3
48341: NEG
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: LD_INT 3
48352: NEG
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 1
48360: PUSH
48361: LD_INT 2
48363: NEG
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 1
48371: NEG
48372: PUSH
48373: LD_INT 4
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 0
48383: PUSH
48384: LD_INT 4
48386: NEG
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 1
48394: PUSH
48395: LD_INT 3
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 1
48405: NEG
48406: PUSH
48407: LD_INT 5
48409: NEG
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 0
48417: PUSH
48418: LD_INT 5
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: LD_INT 4
48431: NEG
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 1
48439: NEG
48440: PUSH
48441: LD_INT 6
48443: NEG
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 0
48451: PUSH
48452: LD_INT 6
48454: NEG
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 1
48462: PUSH
48463: LD_INT 5
48465: NEG
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48485: LD_ADDR_VAR 0 30
48489: PUSH
48490: LD_INT 2
48492: PUSH
48493: LD_INT 1
48495: NEG
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 3
48503: PUSH
48504: LD_INT 0
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 3
48513: PUSH
48514: LD_INT 1
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 3
48523: PUSH
48524: LD_INT 1
48526: NEG
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 4
48534: PUSH
48535: LD_INT 0
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 4
48544: PUSH
48545: LD_INT 1
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 4
48554: PUSH
48555: LD_INT 1
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 5
48565: PUSH
48566: LD_INT 0
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 5
48575: PUSH
48576: LD_INT 1
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 5
48585: PUSH
48586: LD_INT 1
48588: NEG
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 6
48596: PUSH
48597: LD_INT 0
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 6
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48628: LD_ADDR_VAR 0 31
48632: PUSH
48633: LD_INT 3
48635: PUSH
48636: LD_INT 2
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 3
48645: PUSH
48646: LD_INT 3
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 2
48655: PUSH
48656: LD_INT 3
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 4
48665: PUSH
48666: LD_INT 3
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 4
48675: PUSH
48676: LD_INT 4
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 3
48685: PUSH
48686: LD_INT 4
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 5
48695: PUSH
48696: LD_INT 4
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 5
48705: PUSH
48706: LD_INT 5
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 4
48715: PUSH
48716: LD_INT 5
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 6
48725: PUSH
48726: LD_INT 5
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 6
48735: PUSH
48736: LD_INT 6
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 5
48745: PUSH
48746: LD_INT 6
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48767: LD_ADDR_VAR 0 32
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: LD_INT 3
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: LD_INT 3
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: LD_INT 2
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: LD_INT 4
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: LD_INT 4
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: LD_INT 3
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: LD_INT 5
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: LD_INT 5
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 1
48856: NEG
48857: PUSH
48858: LD_INT 4
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: LD_INT 6
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: LD_INT 6
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: LD_INT 5
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48910: LD_ADDR_VAR 0 33
48914: PUSH
48915: LD_INT 2
48917: NEG
48918: PUSH
48919: LD_INT 1
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 3
48928: NEG
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 3
48939: NEG
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 3
48951: NEG
48952: PUSH
48953: LD_INT 1
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 4
48962: NEG
48963: PUSH
48964: LD_INT 0
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 4
48973: NEG
48974: PUSH
48975: LD_INT 1
48977: NEG
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 4
48985: NEG
48986: PUSH
48987: LD_INT 1
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 5
48996: NEG
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 5
49007: NEG
49008: PUSH
49009: LD_INT 1
49011: NEG
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 5
49019: NEG
49020: PUSH
49021: LD_INT 1
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 6
49030: NEG
49031: PUSH
49032: LD_INT 0
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 6
49041: NEG
49042: PUSH
49043: LD_INT 1
49045: NEG
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49065: LD_ADDR_VAR 0 34
49069: PUSH
49070: LD_INT 2
49072: NEG
49073: PUSH
49074: LD_INT 3
49076: NEG
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 3
49084: NEG
49085: PUSH
49086: LD_INT 2
49088: NEG
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 3
49096: NEG
49097: PUSH
49098: LD_INT 3
49100: NEG
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 3
49108: NEG
49109: PUSH
49110: LD_INT 4
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 4
49120: NEG
49121: PUSH
49122: LD_INT 3
49124: NEG
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 4
49132: NEG
49133: PUSH
49134: LD_INT 4
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 4
49144: NEG
49145: PUSH
49146: LD_INT 5
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 5
49156: NEG
49157: PUSH
49158: LD_INT 4
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 5
49168: NEG
49169: PUSH
49170: LD_INT 5
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 5
49180: NEG
49181: PUSH
49182: LD_INT 6
49184: NEG
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 6
49192: NEG
49193: PUSH
49194: LD_INT 5
49196: NEG
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 6
49204: NEG
49205: PUSH
49206: LD_INT 6
49208: NEG
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49228: LD_ADDR_VAR 0 41
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: LD_INT 2
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: LD_INT 3
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 1
49258: PUSH
49259: LD_INT 2
49261: NEG
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: LIST
49271: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49272: LD_ADDR_VAR 0 42
49276: PUSH
49277: LD_INT 2
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 2
49289: PUSH
49290: LD_INT 1
49292: NEG
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 3
49300: PUSH
49301: LD_INT 1
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: LIST
49312: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49313: LD_ADDR_VAR 0 43
49317: PUSH
49318: LD_INT 2
49320: PUSH
49321: LD_INT 2
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 3
49330: PUSH
49331: LD_INT 2
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 2
49340: PUSH
49341: LD_INT 3
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: LIST
49352: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49353: LD_ADDR_VAR 0 44
49357: PUSH
49358: LD_INT 0
49360: PUSH
49361: LD_INT 2
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 1
49370: PUSH
49371: LD_INT 3
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: LD_INT 2
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: LIST
49393: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49394: LD_ADDR_VAR 0 45
49398: PUSH
49399: LD_INT 2
49401: NEG
49402: PUSH
49403: LD_INT 0
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 2
49412: NEG
49413: PUSH
49414: LD_INT 1
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 3
49423: NEG
49424: PUSH
49425: LD_INT 1
49427: NEG
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: LIST
49437: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49438: LD_ADDR_VAR 0 46
49442: PUSH
49443: LD_INT 2
49445: NEG
49446: PUSH
49447: LD_INT 2
49449: NEG
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 2
49457: NEG
49458: PUSH
49459: LD_INT 3
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 3
49469: NEG
49470: PUSH
49471: LD_INT 2
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: LIST
49483: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49484: LD_ADDR_VAR 0 47
49488: PUSH
49489: LD_INT 2
49491: NEG
49492: PUSH
49493: LD_INT 3
49495: NEG
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: LD_INT 3
49507: NEG
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49517: LD_ADDR_VAR 0 48
49521: PUSH
49522: LD_INT 1
49524: PUSH
49525: LD_INT 2
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 2
49535: PUSH
49536: LD_INT 1
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49548: LD_ADDR_VAR 0 49
49552: PUSH
49553: LD_INT 3
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 3
49565: PUSH
49566: LD_INT 2
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49577: LD_ADDR_VAR 0 50
49581: PUSH
49582: LD_INT 2
49584: PUSH
49585: LD_INT 3
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 1
49594: PUSH
49595: LD_INT 3
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49606: LD_ADDR_VAR 0 51
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: LD_INT 2
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 2
49624: NEG
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49637: LD_ADDR_VAR 0 52
49641: PUSH
49642: LD_INT 3
49644: NEG
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 3
49656: NEG
49657: PUSH
49658: LD_INT 2
49660: NEG
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49670: LD_ADDR_VAR 0 53
49674: PUSH
49675: LD_INT 1
49677: NEG
49678: PUSH
49679: LD_INT 3
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: LD_INT 3
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 1
49700: PUSH
49701: LD_INT 2
49703: NEG
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: LIST
49713: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49714: LD_ADDR_VAR 0 54
49718: PUSH
49719: LD_INT 2
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 3
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 3
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: LIST
49754: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49755: LD_ADDR_VAR 0 55
49759: PUSH
49760: LD_INT 3
49762: PUSH
49763: LD_INT 2
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 3
49772: PUSH
49773: LD_INT 3
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 2
49782: PUSH
49783: LD_INT 3
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: LIST
49794: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49795: LD_ADDR_VAR 0 56
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: LD_INT 3
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 0
49812: PUSH
49813: LD_INT 3
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 1
49822: NEG
49823: PUSH
49824: LD_INT 2
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: LIST
49835: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49836: LD_ADDR_VAR 0 57
49840: PUSH
49841: LD_INT 2
49843: NEG
49844: PUSH
49845: LD_INT 1
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 3
49854: NEG
49855: PUSH
49856: LD_INT 0
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 3
49865: NEG
49866: PUSH
49867: LD_INT 1
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: LIST
49879: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49880: LD_ADDR_VAR 0 58
49884: PUSH
49885: LD_INT 2
49887: NEG
49888: PUSH
49889: LD_INT 3
49891: NEG
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 3
49899: NEG
49900: PUSH
49901: LD_INT 2
49903: NEG
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 3
49911: NEG
49912: PUSH
49913: LD_INT 3
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: LIST
49925: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49926: LD_ADDR_VAR 0 59
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: LD_INT 2
49937: NEG
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: LD_INT 2
49948: NEG
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 1
49956: PUSH
49957: LD_INT 1
49959: NEG
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: LIST
49969: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49970: LD_ADDR_VAR 0 60
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: LD_INT 1
49980: NEG
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 2
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 2
49998: PUSH
49999: LD_INT 1
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: LIST
50010: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50011: LD_ADDR_VAR 0 61
50015: PUSH
50016: LD_INT 2
50018: PUSH
50019: LD_INT 1
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 2
50028: PUSH
50029: LD_INT 2
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: LD_INT 2
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: LIST
50050: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50051: LD_ADDR_VAR 0 62
50055: PUSH
50056: LD_INT 1
50058: PUSH
50059: LD_INT 2
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: LD_INT 2
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: NEG
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: LIST
50091: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50092: LD_ADDR_VAR 0 63
50096: PUSH
50097: LD_INT 1
50099: NEG
50100: PUSH
50101: LD_INT 1
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 2
50110: NEG
50111: PUSH
50112: LD_INT 0
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 2
50121: NEG
50122: PUSH
50123: LD_INT 1
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: LIST
50135: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50136: LD_ADDR_VAR 0 64
50140: PUSH
50141: LD_INT 1
50143: NEG
50144: PUSH
50145: LD_INT 2
50147: NEG
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 2
50155: NEG
50156: PUSH
50157: LD_INT 1
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 2
50167: NEG
50168: PUSH
50169: LD_INT 2
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: LIST
50181: ST_TO_ADDR
// end ; 2 :
50182: GO 53448
50184: LD_INT 2
50186: DOUBLE
50187: EQUAL
50188: IFTRUE 50192
50190: GO 53447
50192: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50193: LD_ADDR_VAR 0 29
50197: PUSH
50198: LD_INT 4
50200: PUSH
50201: LD_INT 0
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 4
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 5
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 5
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 4
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 3
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 3
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 3
50272: PUSH
50273: LD_INT 2
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 5
50283: PUSH
50284: LD_INT 2
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 3
50293: PUSH
50294: LD_INT 3
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 3
50303: PUSH
50304: LD_INT 2
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 4
50313: PUSH
50314: LD_INT 3
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 4
50323: PUSH
50324: LD_INT 4
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 3
50333: PUSH
50334: LD_INT 4
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 2
50343: PUSH
50344: LD_INT 3
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 2
50353: PUSH
50354: LD_INT 2
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 4
50363: PUSH
50364: LD_INT 2
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 2
50373: PUSH
50374: LD_INT 4
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: LD_INT 4
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: LD_INT 3
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 1
50403: PUSH
50404: LD_INT 4
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 1
50413: PUSH
50414: LD_INT 5
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: LD_INT 5
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: LD_INT 4
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 1
50444: NEG
50445: PUSH
50446: LD_INT 3
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 2
50455: PUSH
50456: LD_INT 5
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 2
50465: NEG
50466: PUSH
50467: LD_INT 3
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 3
50476: NEG
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 3
50487: NEG
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 2
50499: NEG
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 2
50510: NEG
50511: PUSH
50512: LD_INT 1
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 3
50521: NEG
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 4
50532: NEG
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 4
50543: NEG
50544: PUSH
50545: LD_INT 1
50547: NEG
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 4
50555: NEG
50556: PUSH
50557: LD_INT 2
50559: NEG
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 2
50567: NEG
50568: PUSH
50569: LD_INT 2
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 4
50578: NEG
50579: PUSH
50580: LD_INT 4
50582: NEG
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 4
50590: NEG
50591: PUSH
50592: LD_INT 5
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 3
50602: NEG
50603: PUSH
50604: LD_INT 4
50606: NEG
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 3
50614: NEG
50615: PUSH
50616: LD_INT 3
50618: NEG
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 4
50626: NEG
50627: PUSH
50628: LD_INT 3
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 5
50638: NEG
50639: PUSH
50640: LD_INT 4
50642: NEG
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 5
50650: NEG
50651: PUSH
50652: LD_INT 5
50654: NEG
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 3
50662: NEG
50663: PUSH
50664: LD_INT 5
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 5
50674: NEG
50675: PUSH
50676: LD_INT 3
50678: NEG
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50731: LD_ADDR_VAR 0 30
50735: PUSH
50736: LD_INT 4
50738: PUSH
50739: LD_INT 4
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 4
50748: PUSH
50749: LD_INT 3
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 5
50758: PUSH
50759: LD_INT 4
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 5
50768: PUSH
50769: LD_INT 5
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 4
50778: PUSH
50779: LD_INT 5
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 3
50788: PUSH
50789: LD_INT 4
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 3
50798: PUSH
50799: LD_INT 3
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 5
50808: PUSH
50809: LD_INT 3
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 3
50818: PUSH
50819: LD_INT 5
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: LD_INT 3
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 0
50838: PUSH
50839: LD_INT 2
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: PUSH
50849: LD_INT 3
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 1
50858: PUSH
50859: LD_INT 4
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 0
50868: PUSH
50869: LD_INT 4
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 1
50878: NEG
50879: PUSH
50880: LD_INT 3
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 1
50889: NEG
50890: PUSH
50891: LD_INT 2
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 2
50900: PUSH
50901: LD_INT 4
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 2
50910: NEG
50911: PUSH
50912: LD_INT 2
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 4
50921: NEG
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 4
50932: NEG
50933: PUSH
50934: LD_INT 1
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 3
50944: NEG
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 3
50955: NEG
50956: PUSH
50957: LD_INT 1
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 4
50966: NEG
50967: PUSH
50968: LD_INT 1
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 5
50977: NEG
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 5
50988: NEG
50989: PUSH
50990: LD_INT 1
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 5
51000: NEG
51001: PUSH
51002: LD_INT 2
51004: NEG
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 3
51012: NEG
51013: PUSH
51014: LD_INT 2
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 3
51023: NEG
51024: PUSH
51025: LD_INT 3
51027: NEG
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 3
51035: NEG
51036: PUSH
51037: LD_INT 4
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 2
51047: NEG
51048: PUSH
51049: LD_INT 3
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 2
51059: NEG
51060: PUSH
51061: LD_INT 2
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 3
51071: NEG
51072: PUSH
51073: LD_INT 2
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 4
51083: NEG
51084: PUSH
51085: LD_INT 3
51087: NEG
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 4
51095: NEG
51096: PUSH
51097: LD_INT 4
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 2
51107: NEG
51108: PUSH
51109: LD_INT 4
51111: NEG
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 4
51119: NEG
51120: PUSH
51121: LD_INT 2
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: LD_INT 4
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: LD_INT 5
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: PUSH
51154: LD_INT 4
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: LD_INT 3
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 0
51175: PUSH
51176: LD_INT 3
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: NEG
51187: PUSH
51188: LD_INT 4
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: LD_INT 5
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 2
51210: PUSH
51211: LD_INT 3
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 2
51221: NEG
51222: PUSH
51223: LD_INT 5
51225: NEG
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51278: LD_ADDR_VAR 0 31
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: LD_INT 4
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: LD_INT 3
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 1
51305: PUSH
51306: LD_INT 4
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: PUSH
51316: LD_INT 5
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: LD_INT 5
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: NEG
51336: PUSH
51337: LD_INT 4
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 1
51346: NEG
51347: PUSH
51348: LD_INT 3
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 2
51357: PUSH
51358: LD_INT 5
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 2
51367: NEG
51368: PUSH
51369: LD_INT 3
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 3
51378: NEG
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 3
51389: NEG
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 2
51401: NEG
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 2
51412: NEG
51413: PUSH
51414: LD_INT 1
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 3
51423: NEG
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 4
51434: NEG
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 4
51445: NEG
51446: PUSH
51447: LD_INT 1
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 4
51457: NEG
51458: PUSH
51459: LD_INT 2
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 2
51469: NEG
51470: PUSH
51471: LD_INT 2
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 4
51480: NEG
51481: PUSH
51482: LD_INT 4
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 4
51492: NEG
51493: PUSH
51494: LD_INT 5
51496: NEG
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 3
51504: NEG
51505: PUSH
51506: LD_INT 4
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 3
51516: NEG
51517: PUSH
51518: LD_INT 3
51520: NEG
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 4
51528: NEG
51529: PUSH
51530: LD_INT 3
51532: NEG
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 5
51540: NEG
51541: PUSH
51542: LD_INT 4
51544: NEG
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 5
51552: NEG
51553: PUSH
51554: LD_INT 5
51556: NEG
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 3
51564: NEG
51565: PUSH
51566: LD_INT 5
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 5
51576: NEG
51577: PUSH
51578: LD_INT 3
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: LD_INT 3
51591: NEG
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 0
51599: PUSH
51600: LD_INT 4
51602: NEG
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: LD_INT 3
51613: NEG
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 1
51621: PUSH
51622: LD_INT 2
51624: NEG
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: LD_INT 2
51635: NEG
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 1
51643: NEG
51644: PUSH
51645: LD_INT 3
51647: NEG
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: LD_INT 4
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 2
51667: PUSH
51668: LD_INT 2
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 2
51678: NEG
51679: PUSH
51680: LD_INT 4
51682: NEG
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 4
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 4
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 5
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 5
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 4
51731: PUSH
51732: LD_INT 1
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 3
51741: PUSH
51742: LD_INT 0
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 3
51751: PUSH
51752: LD_INT 1
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 3
51762: PUSH
51763: LD_INT 2
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 5
51773: PUSH
51774: LD_INT 2
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51828: LD_ADDR_VAR 0 32
51832: PUSH
51833: LD_INT 4
51835: NEG
51836: PUSH
51837: LD_INT 0
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 4
51846: NEG
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 3
51858: NEG
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 3
51869: NEG
51870: PUSH
51871: LD_INT 1
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 4
51880: NEG
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 5
51891: NEG
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 5
51902: NEG
51903: PUSH
51904: LD_INT 1
51906: NEG
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 5
51914: NEG
51915: PUSH
51916: LD_INT 2
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 3
51926: NEG
51927: PUSH
51928: LD_INT 2
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 3
51937: NEG
51938: PUSH
51939: LD_INT 3
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 3
51949: NEG
51950: PUSH
51951: LD_INT 4
51953: NEG
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 2
51961: NEG
51962: PUSH
51963: LD_INT 3
51965: NEG
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 2
51973: NEG
51974: PUSH
51975: LD_INT 2
51977: NEG
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 3
51985: NEG
51986: PUSH
51987: LD_INT 2
51989: NEG
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 4
51997: NEG
51998: PUSH
51999: LD_INT 3
52001: NEG
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 4
52009: NEG
52010: PUSH
52011: LD_INT 4
52013: NEG
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 2
52021: NEG
52022: PUSH
52023: LD_INT 4
52025: NEG
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 4
52033: NEG
52034: PUSH
52035: LD_INT 2
52037: NEG
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: LD_INT 4
52048: NEG
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 0
52056: PUSH
52057: LD_INT 5
52059: NEG
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: PUSH
52068: LD_INT 4
52070: NEG
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: PUSH
52079: LD_INT 3
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 0
52089: PUSH
52090: LD_INT 3
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 1
52100: NEG
52101: PUSH
52102: LD_INT 4
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 1
52112: NEG
52113: PUSH
52114: LD_INT 5
52116: NEG
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 2
52124: PUSH
52125: LD_INT 3
52127: NEG
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 2
52135: NEG
52136: PUSH
52137: LD_INT 5
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 3
52147: PUSH
52148: LD_INT 0
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 3
52157: PUSH
52158: LD_INT 1
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 4
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 4
52178: PUSH
52179: LD_INT 1
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 3
52188: PUSH
52189: LD_INT 1
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 2
52198: PUSH
52199: LD_INT 0
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 2
52208: PUSH
52209: LD_INT 1
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 2
52219: PUSH
52220: LD_INT 2
52222: NEG
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 4
52230: PUSH
52231: LD_INT 2
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 4
52240: PUSH
52241: LD_INT 4
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 4
52250: PUSH
52251: LD_INT 3
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 5
52260: PUSH
52261: LD_INT 4
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 5
52270: PUSH
52271: LD_INT 5
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 4
52280: PUSH
52281: LD_INT 5
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 3
52290: PUSH
52291: LD_INT 4
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 3
52300: PUSH
52301: LD_INT 3
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 5
52310: PUSH
52311: LD_INT 3
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 3
52320: PUSH
52321: LD_INT 5
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52375: LD_ADDR_VAR 0 33
52379: PUSH
52380: LD_INT 4
52382: NEG
52383: PUSH
52384: LD_INT 4
52386: NEG
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 4
52394: NEG
52395: PUSH
52396: LD_INT 5
52398: NEG
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 3
52406: NEG
52407: PUSH
52408: LD_INT 4
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 3
52418: NEG
52419: PUSH
52420: LD_INT 3
52422: NEG
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 4
52430: NEG
52431: PUSH
52432: LD_INT 3
52434: NEG
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 5
52442: NEG
52443: PUSH
52444: LD_INT 4
52446: NEG
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 5
52454: NEG
52455: PUSH
52456: LD_INT 5
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 3
52466: NEG
52467: PUSH
52468: LD_INT 5
52470: NEG
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 5
52478: NEG
52479: PUSH
52480: LD_INT 3
52482: NEG
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: LD_INT 3
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: LD_INT 4
52504: NEG
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: LD_INT 3
52515: NEG
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 1
52523: PUSH
52524: LD_INT 2
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 0
52534: PUSH
52535: LD_INT 2
52537: NEG
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 1
52545: NEG
52546: PUSH
52547: LD_INT 3
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: NEG
52558: PUSH
52559: LD_INT 4
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 2
52569: PUSH
52570: LD_INT 2
52572: NEG
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 2
52580: NEG
52581: PUSH
52582: LD_INT 4
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 4
52592: PUSH
52593: LD_INT 0
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 4
52602: PUSH
52603: LD_INT 1
52605: NEG
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 5
52613: PUSH
52614: LD_INT 0
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 5
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 4
52633: PUSH
52634: LD_INT 1
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 3
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 3
52653: PUSH
52654: LD_INT 1
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 3
52664: PUSH
52665: LD_INT 2
52667: NEG
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 5
52675: PUSH
52676: LD_INT 2
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 3
52685: PUSH
52686: LD_INT 3
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 3
52695: PUSH
52696: LD_INT 2
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 4
52705: PUSH
52706: LD_INT 3
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 4
52715: PUSH
52716: LD_INT 4
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 3
52725: PUSH
52726: LD_INT 4
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 2
52735: PUSH
52736: LD_INT 3
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 2
52745: PUSH
52746: LD_INT 2
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 4
52755: PUSH
52756: LD_INT 2
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 2
52765: PUSH
52766: LD_INT 4
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: LD_INT 4
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 0
52785: PUSH
52786: LD_INT 3
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: PUSH
52796: LD_INT 4
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: LD_INT 5
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 0
52815: PUSH
52816: LD_INT 5
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: LD_INT 4
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 1
52836: NEG
52837: PUSH
52838: LD_INT 3
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 2
52847: PUSH
52848: LD_INT 5
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 2
52857: NEG
52858: PUSH
52859: LD_INT 3
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52913: LD_ADDR_VAR 0 34
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: LD_INT 4
52923: NEG
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: LD_INT 5
52934: NEG
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: LD_INT 4
52945: NEG
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: LD_INT 3
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: LD_INT 3
52967: NEG
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: LD_INT 4
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: LD_INT 5
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 2
52999: PUSH
53000: LD_INT 3
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 2
53010: NEG
53011: PUSH
53012: LD_INT 5
53014: NEG
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 3
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 3
53032: PUSH
53033: LD_INT 1
53035: NEG
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 4
53043: PUSH
53044: LD_INT 0
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 4
53053: PUSH
53054: LD_INT 1
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 3
53063: PUSH
53064: LD_INT 1
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 2
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 2
53083: PUSH
53084: LD_INT 1
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 2
53094: PUSH
53095: LD_INT 2
53097: NEG
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 4
53105: PUSH
53106: LD_INT 2
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 4
53115: PUSH
53116: LD_INT 4
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 4
53125: PUSH
53126: LD_INT 3
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 5
53135: PUSH
53136: LD_INT 4
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 5
53145: PUSH
53146: LD_INT 5
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 4
53155: PUSH
53156: LD_INT 5
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 3
53165: PUSH
53166: LD_INT 4
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 3
53175: PUSH
53176: LD_INT 3
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 5
53185: PUSH
53186: LD_INT 3
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 3
53195: PUSH
53196: LD_INT 5
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: LD_INT 3
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: LD_INT 2
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 1
53225: PUSH
53226: LD_INT 3
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: LD_INT 4
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: LD_INT 4
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: NEG
53256: PUSH
53257: LD_INT 3
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: LD_INT 2
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 2
53277: PUSH
53278: LD_INT 4
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 2
53287: NEG
53288: PUSH
53289: LD_INT 2
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 4
53298: NEG
53299: PUSH
53300: LD_INT 0
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 4
53309: NEG
53310: PUSH
53311: LD_INT 1
53313: NEG
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 3
53321: NEG
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 3
53332: NEG
53333: PUSH
53334: LD_INT 1
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 4
53343: NEG
53344: PUSH
53345: LD_INT 1
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 5
53354: NEG
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 5
53365: NEG
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 5
53377: NEG
53378: PUSH
53379: LD_INT 2
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 3
53389: NEG
53390: PUSH
53391: LD_INT 2
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: ST_TO_ADDR
// end ; end ;
53445: GO 53448
53447: POP
// case btype of b_depot , b_warehouse :
53448: LD_VAR 0 1
53452: PUSH
53453: LD_INT 0
53455: DOUBLE
53456: EQUAL
53457: IFTRUE 53467
53459: LD_INT 1
53461: DOUBLE
53462: EQUAL
53463: IFTRUE 53467
53465: GO 53668
53467: POP
// case nation of nation_american :
53468: LD_VAR 0 5
53472: PUSH
53473: LD_INT 1
53475: DOUBLE
53476: EQUAL
53477: IFTRUE 53481
53479: GO 53537
53481: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53482: LD_ADDR_VAR 0 9
53486: PUSH
53487: LD_VAR 0 11
53491: PUSH
53492: LD_VAR 0 12
53496: PUSH
53497: LD_VAR 0 13
53501: PUSH
53502: LD_VAR 0 14
53506: PUSH
53507: LD_VAR 0 15
53511: PUSH
53512: LD_VAR 0 16
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: PUSH
53525: LD_VAR 0 4
53529: PUSH
53530: LD_INT 1
53532: PLUS
53533: ARRAY
53534: ST_TO_ADDR
53535: GO 53666
53537: LD_INT 2
53539: DOUBLE
53540: EQUAL
53541: IFTRUE 53545
53543: GO 53601
53545: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53546: LD_ADDR_VAR 0 9
53550: PUSH
53551: LD_VAR 0 17
53555: PUSH
53556: LD_VAR 0 18
53560: PUSH
53561: LD_VAR 0 19
53565: PUSH
53566: LD_VAR 0 20
53570: PUSH
53571: LD_VAR 0 21
53575: PUSH
53576: LD_VAR 0 22
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: PUSH
53589: LD_VAR 0 4
53593: PUSH
53594: LD_INT 1
53596: PLUS
53597: ARRAY
53598: ST_TO_ADDR
53599: GO 53666
53601: LD_INT 3
53603: DOUBLE
53604: EQUAL
53605: IFTRUE 53609
53607: GO 53665
53609: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53610: LD_ADDR_VAR 0 9
53614: PUSH
53615: LD_VAR 0 23
53619: PUSH
53620: LD_VAR 0 24
53624: PUSH
53625: LD_VAR 0 25
53629: PUSH
53630: LD_VAR 0 26
53634: PUSH
53635: LD_VAR 0 27
53639: PUSH
53640: LD_VAR 0 28
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: PUSH
53653: LD_VAR 0 4
53657: PUSH
53658: LD_INT 1
53660: PLUS
53661: ARRAY
53662: ST_TO_ADDR
53663: GO 53666
53665: POP
53666: GO 54221
53668: LD_INT 2
53670: DOUBLE
53671: EQUAL
53672: IFTRUE 53682
53674: LD_INT 3
53676: DOUBLE
53677: EQUAL
53678: IFTRUE 53682
53680: GO 53738
53682: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53683: LD_ADDR_VAR 0 9
53687: PUSH
53688: LD_VAR 0 29
53692: PUSH
53693: LD_VAR 0 30
53697: PUSH
53698: LD_VAR 0 31
53702: PUSH
53703: LD_VAR 0 32
53707: PUSH
53708: LD_VAR 0 33
53712: PUSH
53713: LD_VAR 0 34
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: PUSH
53726: LD_VAR 0 4
53730: PUSH
53731: LD_INT 1
53733: PLUS
53734: ARRAY
53735: ST_TO_ADDR
53736: GO 54221
53738: LD_INT 16
53740: DOUBLE
53741: EQUAL
53742: IFTRUE 53800
53744: LD_INT 17
53746: DOUBLE
53747: EQUAL
53748: IFTRUE 53800
53750: LD_INT 18
53752: DOUBLE
53753: EQUAL
53754: IFTRUE 53800
53756: LD_INT 19
53758: DOUBLE
53759: EQUAL
53760: IFTRUE 53800
53762: LD_INT 22
53764: DOUBLE
53765: EQUAL
53766: IFTRUE 53800
53768: LD_INT 20
53770: DOUBLE
53771: EQUAL
53772: IFTRUE 53800
53774: LD_INT 21
53776: DOUBLE
53777: EQUAL
53778: IFTRUE 53800
53780: LD_INT 23
53782: DOUBLE
53783: EQUAL
53784: IFTRUE 53800
53786: LD_INT 24
53788: DOUBLE
53789: EQUAL
53790: IFTRUE 53800
53792: LD_INT 25
53794: DOUBLE
53795: EQUAL
53796: IFTRUE 53800
53798: GO 53856
53800: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53801: LD_ADDR_VAR 0 9
53805: PUSH
53806: LD_VAR 0 35
53810: PUSH
53811: LD_VAR 0 36
53815: PUSH
53816: LD_VAR 0 37
53820: PUSH
53821: LD_VAR 0 38
53825: PUSH
53826: LD_VAR 0 39
53830: PUSH
53831: LD_VAR 0 40
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: PUSH
53844: LD_VAR 0 4
53848: PUSH
53849: LD_INT 1
53851: PLUS
53852: ARRAY
53853: ST_TO_ADDR
53854: GO 54221
53856: LD_INT 6
53858: DOUBLE
53859: EQUAL
53860: IFTRUE 53912
53862: LD_INT 7
53864: DOUBLE
53865: EQUAL
53866: IFTRUE 53912
53868: LD_INT 8
53870: DOUBLE
53871: EQUAL
53872: IFTRUE 53912
53874: LD_INT 13
53876: DOUBLE
53877: EQUAL
53878: IFTRUE 53912
53880: LD_INT 12
53882: DOUBLE
53883: EQUAL
53884: IFTRUE 53912
53886: LD_INT 15
53888: DOUBLE
53889: EQUAL
53890: IFTRUE 53912
53892: LD_INT 11
53894: DOUBLE
53895: EQUAL
53896: IFTRUE 53912
53898: LD_INT 14
53900: DOUBLE
53901: EQUAL
53902: IFTRUE 53912
53904: LD_INT 10
53906: DOUBLE
53907: EQUAL
53908: IFTRUE 53912
53910: GO 53968
53912: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53913: LD_ADDR_VAR 0 9
53917: PUSH
53918: LD_VAR 0 41
53922: PUSH
53923: LD_VAR 0 42
53927: PUSH
53928: LD_VAR 0 43
53932: PUSH
53933: LD_VAR 0 44
53937: PUSH
53938: LD_VAR 0 45
53942: PUSH
53943: LD_VAR 0 46
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: PUSH
53956: LD_VAR 0 4
53960: PUSH
53961: LD_INT 1
53963: PLUS
53964: ARRAY
53965: ST_TO_ADDR
53966: GO 54221
53968: LD_INT 36
53970: DOUBLE
53971: EQUAL
53972: IFTRUE 53976
53974: GO 54032
53976: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53977: LD_ADDR_VAR 0 9
53981: PUSH
53982: LD_VAR 0 47
53986: PUSH
53987: LD_VAR 0 48
53991: PUSH
53992: LD_VAR 0 49
53996: PUSH
53997: LD_VAR 0 50
54001: PUSH
54002: LD_VAR 0 51
54006: PUSH
54007: LD_VAR 0 52
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: PUSH
54020: LD_VAR 0 4
54024: PUSH
54025: LD_INT 1
54027: PLUS
54028: ARRAY
54029: ST_TO_ADDR
54030: GO 54221
54032: LD_INT 4
54034: DOUBLE
54035: EQUAL
54036: IFTRUE 54058
54038: LD_INT 5
54040: DOUBLE
54041: EQUAL
54042: IFTRUE 54058
54044: LD_INT 34
54046: DOUBLE
54047: EQUAL
54048: IFTRUE 54058
54050: LD_INT 37
54052: DOUBLE
54053: EQUAL
54054: IFTRUE 54058
54056: GO 54114
54058: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54059: LD_ADDR_VAR 0 9
54063: PUSH
54064: LD_VAR 0 53
54068: PUSH
54069: LD_VAR 0 54
54073: PUSH
54074: LD_VAR 0 55
54078: PUSH
54079: LD_VAR 0 56
54083: PUSH
54084: LD_VAR 0 57
54088: PUSH
54089: LD_VAR 0 58
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: PUSH
54102: LD_VAR 0 4
54106: PUSH
54107: LD_INT 1
54109: PLUS
54110: ARRAY
54111: ST_TO_ADDR
54112: GO 54221
54114: LD_INT 31
54116: DOUBLE
54117: EQUAL
54118: IFTRUE 54164
54120: LD_INT 32
54122: DOUBLE
54123: EQUAL
54124: IFTRUE 54164
54126: LD_INT 33
54128: DOUBLE
54129: EQUAL
54130: IFTRUE 54164
54132: LD_INT 27
54134: DOUBLE
54135: EQUAL
54136: IFTRUE 54164
54138: LD_INT 26
54140: DOUBLE
54141: EQUAL
54142: IFTRUE 54164
54144: LD_INT 28
54146: DOUBLE
54147: EQUAL
54148: IFTRUE 54164
54150: LD_INT 29
54152: DOUBLE
54153: EQUAL
54154: IFTRUE 54164
54156: LD_INT 30
54158: DOUBLE
54159: EQUAL
54160: IFTRUE 54164
54162: GO 54220
54164: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54165: LD_ADDR_VAR 0 9
54169: PUSH
54170: LD_VAR 0 59
54174: PUSH
54175: LD_VAR 0 60
54179: PUSH
54180: LD_VAR 0 61
54184: PUSH
54185: LD_VAR 0 62
54189: PUSH
54190: LD_VAR 0 63
54194: PUSH
54195: LD_VAR 0 64
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: PUSH
54208: LD_VAR 0 4
54212: PUSH
54213: LD_INT 1
54215: PLUS
54216: ARRAY
54217: ST_TO_ADDR
54218: GO 54221
54220: POP
// temp_list2 = [ ] ;
54221: LD_ADDR_VAR 0 10
54225: PUSH
54226: EMPTY
54227: ST_TO_ADDR
// for i in temp_list do
54228: LD_ADDR_VAR 0 8
54232: PUSH
54233: LD_VAR 0 9
54237: PUSH
54238: FOR_IN
54239: IFFALSE 54291
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54241: LD_ADDR_VAR 0 10
54245: PUSH
54246: LD_VAR 0 10
54250: PUSH
54251: LD_VAR 0 8
54255: PUSH
54256: LD_INT 1
54258: ARRAY
54259: PUSH
54260: LD_VAR 0 2
54264: PLUS
54265: PUSH
54266: LD_VAR 0 8
54270: PUSH
54271: LD_INT 2
54273: ARRAY
54274: PUSH
54275: LD_VAR 0 3
54279: PLUS
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: EMPTY
54286: LIST
54287: ADD
54288: ST_TO_ADDR
54289: GO 54238
54291: POP
54292: POP
// result = temp_list2 ;
54293: LD_ADDR_VAR 0 7
54297: PUSH
54298: LD_VAR 0 10
54302: ST_TO_ADDR
// end ;
54303: LD_VAR 0 7
54307: RET
// export function EnemyInRange ( unit , dist ) ; begin
54308: LD_INT 0
54310: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54311: LD_ADDR_VAR 0 3
54315: PUSH
54316: LD_VAR 0 1
54320: PPUSH
54321: CALL_OW 255
54325: PPUSH
54326: LD_VAR 0 1
54330: PPUSH
54331: CALL_OW 250
54335: PPUSH
54336: LD_VAR 0 1
54340: PPUSH
54341: CALL_OW 251
54345: PPUSH
54346: LD_VAR 0 2
54350: PPUSH
54351: CALL 27710 0 4
54355: PUSH
54356: LD_INT 4
54358: ARRAY
54359: ST_TO_ADDR
// end ;
54360: LD_VAR 0 3
54364: RET
// export function PlayerSeeMe ( unit ) ; begin
54365: LD_INT 0
54367: PPUSH
// result := See ( your_side , unit ) ;
54368: LD_ADDR_VAR 0 2
54372: PUSH
54373: LD_OWVAR 2
54377: PPUSH
54378: LD_VAR 0 1
54382: PPUSH
54383: CALL_OW 292
54387: ST_TO_ADDR
// end ;
54388: LD_VAR 0 2
54392: RET
// export function ReverseDir ( unit ) ; begin
54393: LD_INT 0
54395: PPUSH
// if not unit then
54396: LD_VAR 0 1
54400: NOT
54401: IFFALSE 54405
// exit ;
54403: GO 54428
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54405: LD_ADDR_VAR 0 2
54409: PUSH
54410: LD_VAR 0 1
54414: PPUSH
54415: CALL_OW 254
54419: PUSH
54420: LD_INT 3
54422: PLUS
54423: PUSH
54424: LD_INT 6
54426: MOD
54427: ST_TO_ADDR
// end ;
54428: LD_VAR 0 2
54432: RET
// export function ReverseArray ( array ) ; var i ; begin
54433: LD_INT 0
54435: PPUSH
54436: PPUSH
// if not array then
54437: LD_VAR 0 1
54441: NOT
54442: IFFALSE 54446
// exit ;
54444: GO 54501
// result := [ ] ;
54446: LD_ADDR_VAR 0 2
54450: PUSH
54451: EMPTY
54452: ST_TO_ADDR
// for i := array downto 1 do
54453: LD_ADDR_VAR 0 3
54457: PUSH
54458: DOUBLE
54459: LD_VAR 0 1
54463: INC
54464: ST_TO_ADDR
54465: LD_INT 1
54467: PUSH
54468: FOR_DOWNTO
54469: IFFALSE 54499
// result := Join ( result , array [ i ] ) ;
54471: LD_ADDR_VAR 0 2
54475: PUSH
54476: LD_VAR 0 2
54480: PPUSH
54481: LD_VAR 0 1
54485: PUSH
54486: LD_VAR 0 3
54490: ARRAY
54491: PPUSH
54492: CALL 59145 0 2
54496: ST_TO_ADDR
54497: GO 54468
54499: POP
54500: POP
// end ;
54501: LD_VAR 0 2
54505: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
54506: LD_INT 0
54508: PPUSH
54509: PPUSH
54510: PPUSH
54511: PPUSH
54512: PPUSH
54513: PPUSH
// if not unit or not hexes then
54514: LD_VAR 0 1
54518: NOT
54519: PUSH
54520: LD_VAR 0 2
54524: NOT
54525: OR
54526: IFFALSE 54530
// exit ;
54528: GO 54653
// dist := 9999 ;
54530: LD_ADDR_VAR 0 5
54534: PUSH
54535: LD_INT 9999
54537: ST_TO_ADDR
// for i = 1 to hexes do
54538: LD_ADDR_VAR 0 4
54542: PUSH
54543: DOUBLE
54544: LD_INT 1
54546: DEC
54547: ST_TO_ADDR
54548: LD_VAR 0 2
54552: PUSH
54553: FOR_TO
54554: IFFALSE 54641
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54556: LD_ADDR_VAR 0 6
54560: PUSH
54561: LD_VAR 0 1
54565: PPUSH
54566: LD_VAR 0 2
54570: PUSH
54571: LD_VAR 0 4
54575: ARRAY
54576: PUSH
54577: LD_INT 1
54579: ARRAY
54580: PPUSH
54581: LD_VAR 0 2
54585: PUSH
54586: LD_VAR 0 4
54590: ARRAY
54591: PUSH
54592: LD_INT 2
54594: ARRAY
54595: PPUSH
54596: CALL_OW 297
54600: ST_TO_ADDR
// if tdist < dist then
54601: LD_VAR 0 6
54605: PUSH
54606: LD_VAR 0 5
54610: LESS
54611: IFFALSE 54639
// begin hex := hexes [ i ] ;
54613: LD_ADDR_VAR 0 8
54617: PUSH
54618: LD_VAR 0 2
54622: PUSH
54623: LD_VAR 0 4
54627: ARRAY
54628: ST_TO_ADDR
// dist := tdist ;
54629: LD_ADDR_VAR 0 5
54633: PUSH
54634: LD_VAR 0 6
54638: ST_TO_ADDR
// end ; end ;
54639: GO 54553
54641: POP
54642: POP
// result := hex ;
54643: LD_ADDR_VAR 0 3
54647: PUSH
54648: LD_VAR 0 8
54652: ST_TO_ADDR
// end ;
54653: LD_VAR 0 3
54657: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54658: LD_INT 0
54660: PPUSH
54661: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54662: LD_VAR 0 1
54666: NOT
54667: PUSH
54668: LD_VAR 0 1
54672: PUSH
54673: LD_INT 21
54675: PUSH
54676: LD_INT 2
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 23
54685: PUSH
54686: LD_INT 2
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PPUSH
54697: CALL_OW 69
54701: IN
54702: NOT
54703: OR
54704: IFFALSE 54708
// exit ;
54706: GO 54755
// for i = 1 to 3 do
54708: LD_ADDR_VAR 0 3
54712: PUSH
54713: DOUBLE
54714: LD_INT 1
54716: DEC
54717: ST_TO_ADDR
54718: LD_INT 3
54720: PUSH
54721: FOR_TO
54722: IFFALSE 54753
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54724: LD_VAR 0 1
54728: PPUSH
54729: CALL_OW 250
54733: PPUSH
54734: LD_VAR 0 1
54738: PPUSH
54739: CALL_OW 251
54743: PPUSH
54744: LD_INT 1
54746: PPUSH
54747: CALL_OW 453
54751: GO 54721
54753: POP
54754: POP
// end ;
54755: LD_VAR 0 2
54759: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54760: LD_INT 0
54762: PPUSH
54763: PPUSH
54764: PPUSH
54765: PPUSH
54766: PPUSH
54767: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54768: LD_VAR 0 1
54772: NOT
54773: PUSH
54774: LD_VAR 0 2
54778: NOT
54779: OR
54780: PUSH
54781: LD_VAR 0 1
54785: PPUSH
54786: CALL_OW 314
54790: OR
54791: IFFALSE 54795
// exit ;
54793: GO 55262
// if GetLives ( i ) < 250 then
54795: LD_VAR 0 4
54799: PPUSH
54800: CALL_OW 256
54804: PUSH
54805: LD_INT 250
54807: LESS
54808: IFFALSE 54821
// begin ComAutodestruct ( i ) ;
54810: LD_VAR 0 4
54814: PPUSH
54815: CALL 54658 0 1
// exit ;
54819: GO 55262
// end ; x := GetX ( enemy_unit ) ;
54821: LD_ADDR_VAR 0 7
54825: PUSH
54826: LD_VAR 0 2
54830: PPUSH
54831: CALL_OW 250
54835: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54836: LD_ADDR_VAR 0 8
54840: PUSH
54841: LD_VAR 0 2
54845: PPUSH
54846: CALL_OW 251
54850: ST_TO_ADDR
// if not x or not y then
54851: LD_VAR 0 7
54855: NOT
54856: PUSH
54857: LD_VAR 0 8
54861: NOT
54862: OR
54863: IFFALSE 54867
// exit ;
54865: GO 55262
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54867: LD_ADDR_VAR 0 6
54871: PUSH
54872: LD_VAR 0 7
54876: PPUSH
54877: LD_INT 0
54879: PPUSH
54880: LD_INT 4
54882: PPUSH
54883: CALL_OW 272
54887: PUSH
54888: LD_VAR 0 8
54892: PPUSH
54893: LD_INT 0
54895: PPUSH
54896: LD_INT 4
54898: PPUSH
54899: CALL_OW 273
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_VAR 0 7
54912: PPUSH
54913: LD_INT 1
54915: PPUSH
54916: LD_INT 4
54918: PPUSH
54919: CALL_OW 272
54923: PUSH
54924: LD_VAR 0 8
54928: PPUSH
54929: LD_INT 1
54931: PPUSH
54932: LD_INT 4
54934: PPUSH
54935: CALL_OW 273
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_VAR 0 7
54948: PPUSH
54949: LD_INT 2
54951: PPUSH
54952: LD_INT 4
54954: PPUSH
54955: CALL_OW 272
54959: PUSH
54960: LD_VAR 0 8
54964: PPUSH
54965: LD_INT 2
54967: PPUSH
54968: LD_INT 4
54970: PPUSH
54971: CALL_OW 273
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_VAR 0 7
54984: PPUSH
54985: LD_INT 3
54987: PPUSH
54988: LD_INT 4
54990: PPUSH
54991: CALL_OW 272
54995: PUSH
54996: LD_VAR 0 8
55000: PPUSH
55001: LD_INT 3
55003: PPUSH
55004: LD_INT 4
55006: PPUSH
55007: CALL_OW 273
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_VAR 0 7
55020: PPUSH
55021: LD_INT 4
55023: PPUSH
55024: LD_INT 4
55026: PPUSH
55027: CALL_OW 272
55031: PUSH
55032: LD_VAR 0 8
55036: PPUSH
55037: LD_INT 4
55039: PPUSH
55040: LD_INT 4
55042: PPUSH
55043: CALL_OW 273
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_VAR 0 7
55056: PPUSH
55057: LD_INT 5
55059: PPUSH
55060: LD_INT 4
55062: PPUSH
55063: CALL_OW 272
55067: PUSH
55068: LD_VAR 0 8
55072: PPUSH
55073: LD_INT 5
55075: PPUSH
55076: LD_INT 4
55078: PPUSH
55079: CALL_OW 273
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: ST_TO_ADDR
// for i = tmp downto 1 do
55096: LD_ADDR_VAR 0 4
55100: PUSH
55101: DOUBLE
55102: LD_VAR 0 6
55106: INC
55107: ST_TO_ADDR
55108: LD_INT 1
55110: PUSH
55111: FOR_DOWNTO
55112: IFFALSE 55213
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55114: LD_VAR 0 6
55118: PUSH
55119: LD_VAR 0 4
55123: ARRAY
55124: PUSH
55125: LD_INT 1
55127: ARRAY
55128: PPUSH
55129: LD_VAR 0 6
55133: PUSH
55134: LD_VAR 0 4
55138: ARRAY
55139: PUSH
55140: LD_INT 2
55142: ARRAY
55143: PPUSH
55144: CALL_OW 488
55148: NOT
55149: PUSH
55150: LD_VAR 0 6
55154: PUSH
55155: LD_VAR 0 4
55159: ARRAY
55160: PUSH
55161: LD_INT 1
55163: ARRAY
55164: PPUSH
55165: LD_VAR 0 6
55169: PUSH
55170: LD_VAR 0 4
55174: ARRAY
55175: PUSH
55176: LD_INT 2
55178: ARRAY
55179: PPUSH
55180: CALL_OW 428
55184: PUSH
55185: LD_INT 0
55187: NONEQUAL
55188: OR
55189: IFFALSE 55211
// tmp := Delete ( tmp , i ) ;
55191: LD_ADDR_VAR 0 6
55195: PUSH
55196: LD_VAR 0 6
55200: PPUSH
55201: LD_VAR 0 4
55205: PPUSH
55206: CALL_OW 3
55210: ST_TO_ADDR
55211: GO 55111
55213: POP
55214: POP
// j := GetClosestHex ( unit , tmp ) ;
55215: LD_ADDR_VAR 0 5
55219: PUSH
55220: LD_VAR 0 1
55224: PPUSH
55225: LD_VAR 0 6
55229: PPUSH
55230: CALL 54506 0 2
55234: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55235: LD_VAR 0 1
55239: PPUSH
55240: LD_VAR 0 5
55244: PUSH
55245: LD_INT 1
55247: ARRAY
55248: PPUSH
55249: LD_VAR 0 5
55253: PUSH
55254: LD_INT 2
55256: ARRAY
55257: PPUSH
55258: CALL_OW 111
// end ;
55262: LD_VAR 0 3
55266: RET
// export function PrepareApemanSoldier ( ) ; begin
55267: LD_INT 0
55269: PPUSH
// uc_nation := 0 ;
55270: LD_ADDR_OWVAR 21
55274: PUSH
55275: LD_INT 0
55277: ST_TO_ADDR
// hc_sex := sex_male ;
55278: LD_ADDR_OWVAR 27
55282: PUSH
55283: LD_INT 1
55285: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
55286: LD_ADDR_OWVAR 28
55290: PUSH
55291: LD_INT 15
55293: ST_TO_ADDR
// hc_gallery :=  ;
55294: LD_ADDR_OWVAR 33
55298: PUSH
55299: LD_STRING 
55301: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55302: LD_ADDR_OWVAR 31
55306: PUSH
55307: LD_INT 0
55309: PPUSH
55310: LD_INT 3
55312: PPUSH
55313: CALL_OW 12
55317: PUSH
55318: LD_INT 0
55320: PPUSH
55321: LD_INT 3
55323: PPUSH
55324: CALL_OW 12
55328: PUSH
55329: LD_INT 0
55331: PUSH
55332: LD_INT 0
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: ST_TO_ADDR
// end ;
55341: LD_VAR 0 1
55345: RET
// export function PrepareApemanEngineer ( ) ; begin
55346: LD_INT 0
55348: PPUSH
// uc_nation := 0 ;
55349: LD_ADDR_OWVAR 21
55353: PUSH
55354: LD_INT 0
55356: ST_TO_ADDR
// hc_sex := sex_male ;
55357: LD_ADDR_OWVAR 27
55361: PUSH
55362: LD_INT 1
55364: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
55365: LD_ADDR_OWVAR 28
55369: PUSH
55370: LD_INT 16
55372: ST_TO_ADDR
// hc_gallery :=  ;
55373: LD_ADDR_OWVAR 33
55377: PUSH
55378: LD_STRING 
55380: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55381: LD_ADDR_OWVAR 31
55385: PUSH
55386: LD_INT 0
55388: PPUSH
55389: LD_INT 3
55391: PPUSH
55392: CALL_OW 12
55396: PUSH
55397: LD_INT 0
55399: PPUSH
55400: LD_INT 3
55402: PPUSH
55403: CALL_OW 12
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: LD_INT 0
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: ST_TO_ADDR
// end ;
55420: LD_VAR 0 1
55424: RET
// export function PrepareApeman ( agressivity ) ; begin
55425: LD_INT 0
55427: PPUSH
// uc_side := 0 ;
55428: LD_ADDR_OWVAR 20
55432: PUSH
55433: LD_INT 0
55435: ST_TO_ADDR
// uc_nation := 0 ;
55436: LD_ADDR_OWVAR 21
55440: PUSH
55441: LD_INT 0
55443: ST_TO_ADDR
// hc_sex := sex_male ;
55444: LD_ADDR_OWVAR 27
55448: PUSH
55449: LD_INT 1
55451: ST_TO_ADDR
// hc_class := class_apeman ;
55452: LD_ADDR_OWVAR 28
55456: PUSH
55457: LD_INT 12
55459: ST_TO_ADDR
// hc_gallery :=  ;
55460: LD_ADDR_OWVAR 33
55464: PUSH
55465: LD_STRING 
55467: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55468: LD_ADDR_OWVAR 35
55472: PUSH
55473: LD_VAR 0 1
55477: NEG
55478: PPUSH
55479: LD_VAR 0 1
55483: PPUSH
55484: CALL_OW 12
55488: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55489: LD_ADDR_OWVAR 31
55493: PUSH
55494: LD_INT 0
55496: PPUSH
55497: LD_INT 3
55499: PPUSH
55500: CALL_OW 12
55504: PUSH
55505: LD_INT 0
55507: PPUSH
55508: LD_INT 3
55510: PPUSH
55511: CALL_OW 12
55515: PUSH
55516: LD_INT 0
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: ST_TO_ADDR
// end ;
55528: LD_VAR 0 2
55532: RET
// export function PrepareTiger ( agressivity ) ; begin
55533: LD_INT 0
55535: PPUSH
// uc_side := 0 ;
55536: LD_ADDR_OWVAR 20
55540: PUSH
55541: LD_INT 0
55543: ST_TO_ADDR
// uc_nation := 0 ;
55544: LD_ADDR_OWVAR 21
55548: PUSH
55549: LD_INT 0
55551: ST_TO_ADDR
// hc_class := class_tiger ;
55552: LD_ADDR_OWVAR 28
55556: PUSH
55557: LD_INT 14
55559: ST_TO_ADDR
// hc_gallery :=  ;
55560: LD_ADDR_OWVAR 33
55564: PUSH
55565: LD_STRING 
55567: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55568: LD_ADDR_OWVAR 35
55572: PUSH
55573: LD_VAR 0 1
55577: NEG
55578: PPUSH
55579: LD_VAR 0 1
55583: PPUSH
55584: CALL_OW 12
55588: ST_TO_ADDR
// end ;
55589: LD_VAR 0 2
55593: RET
// export function PrepareEnchidna ( ) ; begin
55594: LD_INT 0
55596: PPUSH
// uc_side := 0 ;
55597: LD_ADDR_OWVAR 20
55601: PUSH
55602: LD_INT 0
55604: ST_TO_ADDR
// uc_nation := 0 ;
55605: LD_ADDR_OWVAR 21
55609: PUSH
55610: LD_INT 0
55612: ST_TO_ADDR
// hc_class := class_baggie ;
55613: LD_ADDR_OWVAR 28
55617: PUSH
55618: LD_INT 13
55620: ST_TO_ADDR
// hc_gallery :=  ;
55621: LD_ADDR_OWVAR 33
55625: PUSH
55626: LD_STRING 
55628: ST_TO_ADDR
// end ;
55629: LD_VAR 0 1
55633: RET
// export function PrepareFrog ( ) ; begin
55634: LD_INT 0
55636: PPUSH
// uc_side := 0 ;
55637: LD_ADDR_OWVAR 20
55641: PUSH
55642: LD_INT 0
55644: ST_TO_ADDR
// uc_nation := 0 ;
55645: LD_ADDR_OWVAR 21
55649: PUSH
55650: LD_INT 0
55652: ST_TO_ADDR
// hc_class := class_frog ;
55653: LD_ADDR_OWVAR 28
55657: PUSH
55658: LD_INT 19
55660: ST_TO_ADDR
// hc_gallery :=  ;
55661: LD_ADDR_OWVAR 33
55665: PUSH
55666: LD_STRING 
55668: ST_TO_ADDR
// end ;
55669: LD_VAR 0 1
55673: RET
// export function PrepareFish ( ) ; begin
55674: LD_INT 0
55676: PPUSH
// uc_side := 0 ;
55677: LD_ADDR_OWVAR 20
55681: PUSH
55682: LD_INT 0
55684: ST_TO_ADDR
// uc_nation := 0 ;
55685: LD_ADDR_OWVAR 21
55689: PUSH
55690: LD_INT 0
55692: ST_TO_ADDR
// hc_class := class_fish ;
55693: LD_ADDR_OWVAR 28
55697: PUSH
55698: LD_INT 20
55700: ST_TO_ADDR
// hc_gallery :=  ;
55701: LD_ADDR_OWVAR 33
55705: PUSH
55706: LD_STRING 
55708: ST_TO_ADDR
// end ;
55709: LD_VAR 0 1
55713: RET
// export function PrepareBird ( ) ; begin
55714: LD_INT 0
55716: PPUSH
// uc_side := 0 ;
55717: LD_ADDR_OWVAR 20
55721: PUSH
55722: LD_INT 0
55724: ST_TO_ADDR
// uc_nation := 0 ;
55725: LD_ADDR_OWVAR 21
55729: PUSH
55730: LD_INT 0
55732: ST_TO_ADDR
// hc_class := class_phororhacos ;
55733: LD_ADDR_OWVAR 28
55737: PUSH
55738: LD_INT 18
55740: ST_TO_ADDR
// hc_gallery :=  ;
55741: LD_ADDR_OWVAR 33
55745: PUSH
55746: LD_STRING 
55748: ST_TO_ADDR
// end ;
55749: LD_VAR 0 1
55753: RET
// export function PrepareHorse ( ) ; begin
55754: LD_INT 0
55756: PPUSH
// uc_side := 0 ;
55757: LD_ADDR_OWVAR 20
55761: PUSH
55762: LD_INT 0
55764: ST_TO_ADDR
// uc_nation := 0 ;
55765: LD_ADDR_OWVAR 21
55769: PUSH
55770: LD_INT 0
55772: ST_TO_ADDR
// hc_class := class_horse ;
55773: LD_ADDR_OWVAR 28
55777: PUSH
55778: LD_INT 21
55780: ST_TO_ADDR
// hc_gallery :=  ;
55781: LD_ADDR_OWVAR 33
55785: PUSH
55786: LD_STRING 
55788: ST_TO_ADDR
// end ;
55789: LD_VAR 0 1
55793: RET
// export function PrepareMastodont ( ) ; begin
55794: LD_INT 0
55796: PPUSH
// uc_side := 0 ;
55797: LD_ADDR_OWVAR 20
55801: PUSH
55802: LD_INT 0
55804: ST_TO_ADDR
// uc_nation := 0 ;
55805: LD_ADDR_OWVAR 21
55809: PUSH
55810: LD_INT 0
55812: ST_TO_ADDR
// vc_chassis := class_mastodont ;
55813: LD_ADDR_OWVAR 37
55817: PUSH
55818: LD_INT 31
55820: ST_TO_ADDR
// vc_control := control_rider ;
55821: LD_ADDR_OWVAR 38
55825: PUSH
55826: LD_INT 4
55828: ST_TO_ADDR
// end ;
55829: LD_VAR 0 1
55833: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55834: LD_INT 0
55836: PPUSH
55837: PPUSH
55838: PPUSH
// uc_side = 0 ;
55839: LD_ADDR_OWVAR 20
55843: PUSH
55844: LD_INT 0
55846: ST_TO_ADDR
// uc_nation = 0 ;
55847: LD_ADDR_OWVAR 21
55851: PUSH
55852: LD_INT 0
55854: ST_TO_ADDR
// InitHc_All ( ) ;
55855: CALL_OW 584
// InitVc ;
55859: CALL_OW 20
// if mastodonts then
55863: LD_VAR 0 6
55867: IFFALSE 55934
// for i = 1 to mastodonts do
55869: LD_ADDR_VAR 0 11
55873: PUSH
55874: DOUBLE
55875: LD_INT 1
55877: DEC
55878: ST_TO_ADDR
55879: LD_VAR 0 6
55883: PUSH
55884: FOR_TO
55885: IFFALSE 55932
// begin vc_chassis := 31 ;
55887: LD_ADDR_OWVAR 37
55891: PUSH
55892: LD_INT 31
55894: ST_TO_ADDR
// vc_control := control_rider ;
55895: LD_ADDR_OWVAR 38
55899: PUSH
55900: LD_INT 4
55902: ST_TO_ADDR
// animal := CreateVehicle ;
55903: LD_ADDR_VAR 0 12
55907: PUSH
55908: CALL_OW 45
55912: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55913: LD_VAR 0 12
55917: PPUSH
55918: LD_VAR 0 8
55922: PPUSH
55923: LD_INT 0
55925: PPUSH
55926: CALL 58062 0 3
// end ;
55930: GO 55884
55932: POP
55933: POP
// if horses then
55934: LD_VAR 0 5
55938: IFFALSE 56005
// for i = 1 to horses do
55940: LD_ADDR_VAR 0 11
55944: PUSH
55945: DOUBLE
55946: LD_INT 1
55948: DEC
55949: ST_TO_ADDR
55950: LD_VAR 0 5
55954: PUSH
55955: FOR_TO
55956: IFFALSE 56003
// begin hc_class := 21 ;
55958: LD_ADDR_OWVAR 28
55962: PUSH
55963: LD_INT 21
55965: ST_TO_ADDR
// hc_gallery :=  ;
55966: LD_ADDR_OWVAR 33
55970: PUSH
55971: LD_STRING 
55973: ST_TO_ADDR
// animal := CreateHuman ;
55974: LD_ADDR_VAR 0 12
55978: PUSH
55979: CALL_OW 44
55983: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55984: LD_VAR 0 12
55988: PPUSH
55989: LD_VAR 0 8
55993: PPUSH
55994: LD_INT 0
55996: PPUSH
55997: CALL 58062 0 3
// end ;
56001: GO 55955
56003: POP
56004: POP
// if birds then
56005: LD_VAR 0 1
56009: IFFALSE 56076
// for i = 1 to birds do
56011: LD_ADDR_VAR 0 11
56015: PUSH
56016: DOUBLE
56017: LD_INT 1
56019: DEC
56020: ST_TO_ADDR
56021: LD_VAR 0 1
56025: PUSH
56026: FOR_TO
56027: IFFALSE 56074
// begin hc_class = 18 ;
56029: LD_ADDR_OWVAR 28
56033: PUSH
56034: LD_INT 18
56036: ST_TO_ADDR
// hc_gallery =  ;
56037: LD_ADDR_OWVAR 33
56041: PUSH
56042: LD_STRING 
56044: ST_TO_ADDR
// animal := CreateHuman ;
56045: LD_ADDR_VAR 0 12
56049: PUSH
56050: CALL_OW 44
56054: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56055: LD_VAR 0 12
56059: PPUSH
56060: LD_VAR 0 8
56064: PPUSH
56065: LD_INT 0
56067: PPUSH
56068: CALL 58062 0 3
// end ;
56072: GO 56026
56074: POP
56075: POP
// if tigers then
56076: LD_VAR 0 2
56080: IFFALSE 56164
// for i = 1 to tigers do
56082: LD_ADDR_VAR 0 11
56086: PUSH
56087: DOUBLE
56088: LD_INT 1
56090: DEC
56091: ST_TO_ADDR
56092: LD_VAR 0 2
56096: PUSH
56097: FOR_TO
56098: IFFALSE 56162
// begin hc_class = class_tiger ;
56100: LD_ADDR_OWVAR 28
56104: PUSH
56105: LD_INT 14
56107: ST_TO_ADDR
// hc_gallery =  ;
56108: LD_ADDR_OWVAR 33
56112: PUSH
56113: LD_STRING 
56115: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56116: LD_ADDR_OWVAR 35
56120: PUSH
56121: LD_INT 7
56123: NEG
56124: PPUSH
56125: LD_INT 7
56127: PPUSH
56128: CALL_OW 12
56132: ST_TO_ADDR
// animal := CreateHuman ;
56133: LD_ADDR_VAR 0 12
56137: PUSH
56138: CALL_OW 44
56142: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56143: LD_VAR 0 12
56147: PPUSH
56148: LD_VAR 0 8
56152: PPUSH
56153: LD_INT 0
56155: PPUSH
56156: CALL 58062 0 3
// end ;
56160: GO 56097
56162: POP
56163: POP
// if apemans then
56164: LD_VAR 0 3
56168: IFFALSE 56291
// for i = 1 to apemans do
56170: LD_ADDR_VAR 0 11
56174: PUSH
56175: DOUBLE
56176: LD_INT 1
56178: DEC
56179: ST_TO_ADDR
56180: LD_VAR 0 3
56184: PUSH
56185: FOR_TO
56186: IFFALSE 56289
// begin hc_class = class_apeman ;
56188: LD_ADDR_OWVAR 28
56192: PUSH
56193: LD_INT 12
56195: ST_TO_ADDR
// hc_gallery =  ;
56196: LD_ADDR_OWVAR 33
56200: PUSH
56201: LD_STRING 
56203: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56204: LD_ADDR_OWVAR 35
56208: PUSH
56209: LD_INT 2
56211: NEG
56212: PPUSH
56213: LD_INT 2
56215: PPUSH
56216: CALL_OW 12
56220: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56221: LD_ADDR_OWVAR 31
56225: PUSH
56226: LD_INT 1
56228: PPUSH
56229: LD_INT 3
56231: PPUSH
56232: CALL_OW 12
56236: PUSH
56237: LD_INT 1
56239: PPUSH
56240: LD_INT 3
56242: PPUSH
56243: CALL_OW 12
56247: PUSH
56248: LD_INT 0
56250: PUSH
56251: LD_INT 0
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: ST_TO_ADDR
// animal := CreateHuman ;
56260: LD_ADDR_VAR 0 12
56264: PUSH
56265: CALL_OW 44
56269: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56270: LD_VAR 0 12
56274: PPUSH
56275: LD_VAR 0 8
56279: PPUSH
56280: LD_INT 0
56282: PPUSH
56283: CALL 58062 0 3
// end ;
56287: GO 56185
56289: POP
56290: POP
// if enchidnas then
56291: LD_VAR 0 4
56295: IFFALSE 56362
// for i = 1 to enchidnas do
56297: LD_ADDR_VAR 0 11
56301: PUSH
56302: DOUBLE
56303: LD_INT 1
56305: DEC
56306: ST_TO_ADDR
56307: LD_VAR 0 4
56311: PUSH
56312: FOR_TO
56313: IFFALSE 56360
// begin hc_class = 13 ;
56315: LD_ADDR_OWVAR 28
56319: PUSH
56320: LD_INT 13
56322: ST_TO_ADDR
// hc_gallery =  ;
56323: LD_ADDR_OWVAR 33
56327: PUSH
56328: LD_STRING 
56330: ST_TO_ADDR
// animal := CreateHuman ;
56331: LD_ADDR_VAR 0 12
56335: PUSH
56336: CALL_OW 44
56340: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56341: LD_VAR 0 12
56345: PPUSH
56346: LD_VAR 0 8
56350: PPUSH
56351: LD_INT 0
56353: PPUSH
56354: CALL 58062 0 3
// end ;
56358: GO 56312
56360: POP
56361: POP
// if fishes then
56362: LD_VAR 0 7
56366: IFFALSE 56433
// for i = 1 to fishes do
56368: LD_ADDR_VAR 0 11
56372: PUSH
56373: DOUBLE
56374: LD_INT 1
56376: DEC
56377: ST_TO_ADDR
56378: LD_VAR 0 7
56382: PUSH
56383: FOR_TO
56384: IFFALSE 56431
// begin hc_class = 20 ;
56386: LD_ADDR_OWVAR 28
56390: PUSH
56391: LD_INT 20
56393: ST_TO_ADDR
// hc_gallery =  ;
56394: LD_ADDR_OWVAR 33
56398: PUSH
56399: LD_STRING 
56401: ST_TO_ADDR
// animal := CreateHuman ;
56402: LD_ADDR_VAR 0 12
56406: PUSH
56407: CALL_OW 44
56411: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56412: LD_VAR 0 12
56416: PPUSH
56417: LD_VAR 0 9
56421: PPUSH
56422: LD_INT 0
56424: PPUSH
56425: CALL 58062 0 3
// end ;
56429: GO 56383
56431: POP
56432: POP
// end ;
56433: LD_VAR 0 10
56437: RET
// export function WantHeal ( sci , unit ) ; begin
56438: LD_INT 0
56440: PPUSH
// if GetTaskList ( sci ) > 0 then
56441: LD_VAR 0 1
56445: PPUSH
56446: CALL_OW 437
56450: PUSH
56451: LD_INT 0
56453: GREATER
56454: IFFALSE 56524
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56456: LD_VAR 0 1
56460: PPUSH
56461: CALL_OW 437
56465: PUSH
56466: LD_INT 1
56468: ARRAY
56469: PUSH
56470: LD_INT 1
56472: ARRAY
56473: PUSH
56474: LD_STRING l
56476: EQUAL
56477: PUSH
56478: LD_VAR 0 1
56482: PPUSH
56483: CALL_OW 437
56487: PUSH
56488: LD_INT 1
56490: ARRAY
56491: PUSH
56492: LD_INT 4
56494: ARRAY
56495: PUSH
56496: LD_VAR 0 2
56500: EQUAL
56501: AND
56502: IFFALSE 56514
// result := true else
56504: LD_ADDR_VAR 0 3
56508: PUSH
56509: LD_INT 1
56511: ST_TO_ADDR
56512: GO 56522
// result := false ;
56514: LD_ADDR_VAR 0 3
56518: PUSH
56519: LD_INT 0
56521: ST_TO_ADDR
// end else
56522: GO 56532
// result := false ;
56524: LD_ADDR_VAR 0 3
56528: PUSH
56529: LD_INT 0
56531: ST_TO_ADDR
// end ;
56532: LD_VAR 0 3
56536: RET
// export function HealTarget ( sci ) ; begin
56537: LD_INT 0
56539: PPUSH
// if not sci then
56540: LD_VAR 0 1
56544: NOT
56545: IFFALSE 56549
// exit ;
56547: GO 56614
// result := 0 ;
56549: LD_ADDR_VAR 0 2
56553: PUSH
56554: LD_INT 0
56556: ST_TO_ADDR
// if GetTaskList ( sci ) then
56557: LD_VAR 0 1
56561: PPUSH
56562: CALL_OW 437
56566: IFFALSE 56614
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56568: LD_VAR 0 1
56572: PPUSH
56573: CALL_OW 437
56577: PUSH
56578: LD_INT 1
56580: ARRAY
56581: PUSH
56582: LD_INT 1
56584: ARRAY
56585: PUSH
56586: LD_STRING l
56588: EQUAL
56589: IFFALSE 56614
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56591: LD_ADDR_VAR 0 2
56595: PUSH
56596: LD_VAR 0 1
56600: PPUSH
56601: CALL_OW 437
56605: PUSH
56606: LD_INT 1
56608: ARRAY
56609: PUSH
56610: LD_INT 4
56612: ARRAY
56613: ST_TO_ADDR
// end ;
56614: LD_VAR 0 2
56618: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56619: LD_INT 0
56621: PPUSH
56622: PPUSH
56623: PPUSH
56624: PPUSH
// if not base_units then
56625: LD_VAR 0 1
56629: NOT
56630: IFFALSE 56634
// exit ;
56632: GO 56721
// result := false ;
56634: LD_ADDR_VAR 0 2
56638: PUSH
56639: LD_INT 0
56641: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56642: LD_ADDR_VAR 0 5
56646: PUSH
56647: LD_VAR 0 1
56651: PPUSH
56652: LD_INT 21
56654: PUSH
56655: LD_INT 3
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PPUSH
56662: CALL_OW 72
56666: ST_TO_ADDR
// if not tmp then
56667: LD_VAR 0 5
56671: NOT
56672: IFFALSE 56676
// exit ;
56674: GO 56721
// for i in tmp do
56676: LD_ADDR_VAR 0 3
56680: PUSH
56681: LD_VAR 0 5
56685: PUSH
56686: FOR_IN
56687: IFFALSE 56719
// begin result := EnemyInRange ( i , 22 ) ;
56689: LD_ADDR_VAR 0 2
56693: PUSH
56694: LD_VAR 0 3
56698: PPUSH
56699: LD_INT 22
56701: PPUSH
56702: CALL 54308 0 2
56706: ST_TO_ADDR
// if result then
56707: LD_VAR 0 2
56711: IFFALSE 56717
// exit ;
56713: POP
56714: POP
56715: GO 56721
// end ;
56717: GO 56686
56719: POP
56720: POP
// end ;
56721: LD_VAR 0 2
56725: RET
// export function FilterByTag ( units , tag ) ; begin
56726: LD_INT 0
56728: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
56729: LD_ADDR_VAR 0 3
56733: PUSH
56734: LD_VAR 0 1
56738: PPUSH
56739: LD_INT 120
56741: PUSH
56742: LD_VAR 0 2
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PPUSH
56751: CALL_OW 72
56755: ST_TO_ADDR
// end ;
56756: LD_VAR 0 3
56760: RET
// export function IsDriver ( un ) ; begin
56761: LD_INT 0
56763: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56764: LD_ADDR_VAR 0 2
56768: PUSH
56769: LD_VAR 0 1
56773: PUSH
56774: LD_INT 55
56776: PUSH
56777: EMPTY
56778: LIST
56779: PPUSH
56780: CALL_OW 69
56784: IN
56785: ST_TO_ADDR
// end ;
56786: LD_VAR 0 2
56790: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56791: LD_INT 0
56793: PPUSH
56794: PPUSH
// list := [ ] ;
56795: LD_ADDR_VAR 0 5
56799: PUSH
56800: EMPTY
56801: ST_TO_ADDR
// case d of 0 :
56802: LD_VAR 0 3
56806: PUSH
56807: LD_INT 0
56809: DOUBLE
56810: EQUAL
56811: IFTRUE 56815
56813: GO 56948
56815: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56816: LD_ADDR_VAR 0 5
56820: PUSH
56821: LD_VAR 0 1
56825: PUSH
56826: LD_INT 4
56828: MINUS
56829: PUSH
56830: LD_VAR 0 2
56834: PUSH
56835: LD_INT 4
56837: MINUS
56838: PUSH
56839: LD_INT 2
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: LIST
56846: PUSH
56847: LD_VAR 0 1
56851: PUSH
56852: LD_INT 3
56854: MINUS
56855: PUSH
56856: LD_VAR 0 2
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: LIST
56868: PUSH
56869: LD_VAR 0 1
56873: PUSH
56874: LD_INT 4
56876: PLUS
56877: PUSH
56878: LD_VAR 0 2
56882: PUSH
56883: LD_INT 4
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: LIST
56890: PUSH
56891: LD_VAR 0 1
56895: PUSH
56896: LD_INT 3
56898: PLUS
56899: PUSH
56900: LD_VAR 0 2
56904: PUSH
56905: LD_INT 3
56907: PLUS
56908: PUSH
56909: LD_INT 5
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: LIST
56916: PUSH
56917: LD_VAR 0 1
56921: PUSH
56922: LD_VAR 0 2
56926: PUSH
56927: LD_INT 4
56929: PLUS
56930: PUSH
56931: LD_INT 0
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: LIST
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: ST_TO_ADDR
// end ; 1 :
56946: GO 57646
56948: LD_INT 1
56950: DOUBLE
56951: EQUAL
56952: IFTRUE 56956
56954: GO 57089
56956: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56957: LD_ADDR_VAR 0 5
56961: PUSH
56962: LD_VAR 0 1
56966: PUSH
56967: LD_VAR 0 2
56971: PUSH
56972: LD_INT 4
56974: MINUS
56975: PUSH
56976: LD_INT 3
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: LIST
56983: PUSH
56984: LD_VAR 0 1
56988: PUSH
56989: LD_INT 3
56991: MINUS
56992: PUSH
56993: LD_VAR 0 2
56997: PUSH
56998: LD_INT 3
57000: MINUS
57001: PUSH
57002: LD_INT 2
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: LIST
57009: PUSH
57010: LD_VAR 0 1
57014: PUSH
57015: LD_INT 4
57017: MINUS
57018: PUSH
57019: LD_VAR 0 2
57023: PUSH
57024: LD_INT 1
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: LIST
57031: PUSH
57032: LD_VAR 0 1
57036: PUSH
57037: LD_VAR 0 2
57041: PUSH
57042: LD_INT 3
57044: PLUS
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: LIST
57053: PUSH
57054: LD_VAR 0 1
57058: PUSH
57059: LD_INT 4
57061: PLUS
57062: PUSH
57063: LD_VAR 0 2
57067: PUSH
57068: LD_INT 4
57070: PLUS
57071: PUSH
57072: LD_INT 5
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: LIST
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: ST_TO_ADDR
// end ; 2 :
57087: GO 57646
57089: LD_INT 2
57091: DOUBLE
57092: EQUAL
57093: IFTRUE 57097
57095: GO 57226
57097: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57098: LD_ADDR_VAR 0 5
57102: PUSH
57103: LD_VAR 0 1
57107: PUSH
57108: LD_VAR 0 2
57112: PUSH
57113: LD_INT 3
57115: MINUS
57116: PUSH
57117: LD_INT 3
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: LIST
57124: PUSH
57125: LD_VAR 0 1
57129: PUSH
57130: LD_INT 4
57132: PLUS
57133: PUSH
57134: LD_VAR 0 2
57138: PUSH
57139: LD_INT 4
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: LIST
57146: PUSH
57147: LD_VAR 0 1
57151: PUSH
57152: LD_VAR 0 2
57156: PUSH
57157: LD_INT 4
57159: PLUS
57160: PUSH
57161: LD_INT 0
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: LIST
57168: PUSH
57169: LD_VAR 0 1
57173: PUSH
57174: LD_INT 3
57176: MINUS
57177: PUSH
57178: LD_VAR 0 2
57182: PUSH
57183: LD_INT 1
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: LIST
57190: PUSH
57191: LD_VAR 0 1
57195: PUSH
57196: LD_INT 4
57198: MINUS
57199: PUSH
57200: LD_VAR 0 2
57204: PUSH
57205: LD_INT 4
57207: MINUS
57208: PUSH
57209: LD_INT 2
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: LIST
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: ST_TO_ADDR
// end ; 3 :
57224: GO 57646
57226: LD_INT 3
57228: DOUBLE
57229: EQUAL
57230: IFTRUE 57234
57232: GO 57367
57234: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57235: LD_ADDR_VAR 0 5
57239: PUSH
57240: LD_VAR 0 1
57244: PUSH
57245: LD_INT 3
57247: PLUS
57248: PUSH
57249: LD_VAR 0 2
57253: PUSH
57254: LD_INT 4
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: LIST
57261: PUSH
57262: LD_VAR 0 1
57266: PUSH
57267: LD_INT 4
57269: PLUS
57270: PUSH
57271: LD_VAR 0 2
57275: PUSH
57276: LD_INT 4
57278: PLUS
57279: PUSH
57280: LD_INT 5
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: LIST
57287: PUSH
57288: LD_VAR 0 1
57292: PUSH
57293: LD_INT 4
57295: MINUS
57296: PUSH
57297: LD_VAR 0 2
57301: PUSH
57302: LD_INT 1
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: LIST
57309: PUSH
57310: LD_VAR 0 1
57314: PUSH
57315: LD_VAR 0 2
57319: PUSH
57320: LD_INT 4
57322: MINUS
57323: PUSH
57324: LD_INT 3
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: LIST
57331: PUSH
57332: LD_VAR 0 1
57336: PUSH
57337: LD_INT 3
57339: MINUS
57340: PUSH
57341: LD_VAR 0 2
57345: PUSH
57346: LD_INT 3
57348: MINUS
57349: PUSH
57350: LD_INT 2
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: LIST
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: ST_TO_ADDR
// end ; 4 :
57365: GO 57646
57367: LD_INT 4
57369: DOUBLE
57370: EQUAL
57371: IFTRUE 57375
57373: GO 57508
57375: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57376: LD_ADDR_VAR 0 5
57380: PUSH
57381: LD_VAR 0 1
57385: PUSH
57386: LD_VAR 0 2
57390: PUSH
57391: LD_INT 4
57393: PLUS
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: LIST
57402: PUSH
57403: LD_VAR 0 1
57407: PUSH
57408: LD_INT 3
57410: PLUS
57411: PUSH
57412: LD_VAR 0 2
57416: PUSH
57417: LD_INT 3
57419: PLUS
57420: PUSH
57421: LD_INT 5
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: LIST
57428: PUSH
57429: LD_VAR 0 1
57433: PUSH
57434: LD_INT 4
57436: PLUS
57437: PUSH
57438: LD_VAR 0 2
57442: PUSH
57443: LD_INT 4
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: LIST
57450: PUSH
57451: LD_VAR 0 1
57455: PUSH
57456: LD_VAR 0 2
57460: PUSH
57461: LD_INT 3
57463: MINUS
57464: PUSH
57465: LD_INT 3
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: LIST
57472: PUSH
57473: LD_VAR 0 1
57477: PUSH
57478: LD_INT 4
57480: MINUS
57481: PUSH
57482: LD_VAR 0 2
57486: PUSH
57487: LD_INT 4
57489: MINUS
57490: PUSH
57491: LD_INT 2
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: LIST
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: ST_TO_ADDR
// end ; 5 :
57506: GO 57646
57508: LD_INT 5
57510: DOUBLE
57511: EQUAL
57512: IFTRUE 57516
57514: GO 57645
57516: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57517: LD_ADDR_VAR 0 5
57521: PUSH
57522: LD_VAR 0 1
57526: PUSH
57527: LD_INT 4
57529: MINUS
57530: PUSH
57531: LD_VAR 0 2
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: LIST
57543: PUSH
57544: LD_VAR 0 1
57548: PUSH
57549: LD_VAR 0 2
57553: PUSH
57554: LD_INT 4
57556: MINUS
57557: PUSH
57558: LD_INT 3
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: LIST
57565: PUSH
57566: LD_VAR 0 1
57570: PUSH
57571: LD_INT 4
57573: PLUS
57574: PUSH
57575: LD_VAR 0 2
57579: PUSH
57580: LD_INT 4
57582: PLUS
57583: PUSH
57584: LD_INT 5
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: LIST
57591: PUSH
57592: LD_VAR 0 1
57596: PUSH
57597: LD_INT 3
57599: PLUS
57600: PUSH
57601: LD_VAR 0 2
57605: PUSH
57606: LD_INT 4
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: LIST
57613: PUSH
57614: LD_VAR 0 1
57618: PUSH
57619: LD_VAR 0 2
57623: PUSH
57624: LD_INT 3
57626: PLUS
57627: PUSH
57628: LD_INT 0
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: LIST
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: ST_TO_ADDR
// end ; end ;
57643: GO 57646
57645: POP
// result := list ;
57646: LD_ADDR_VAR 0 4
57650: PUSH
57651: LD_VAR 0 5
57655: ST_TO_ADDR
// end ;
57656: LD_VAR 0 4
57660: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57661: LD_INT 0
57663: PPUSH
57664: PPUSH
57665: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57666: LD_VAR 0 1
57670: NOT
57671: PUSH
57672: LD_VAR 0 2
57676: PUSH
57677: LD_INT 1
57679: PUSH
57680: LD_INT 2
57682: PUSH
57683: LD_INT 3
57685: PUSH
57686: LD_INT 4
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: IN
57695: NOT
57696: OR
57697: IFFALSE 57701
// exit ;
57699: GO 57784
// tmp := [ ] ;
57701: LD_ADDR_VAR 0 5
57705: PUSH
57706: EMPTY
57707: ST_TO_ADDR
// for i in units do
57708: LD_ADDR_VAR 0 4
57712: PUSH
57713: LD_VAR 0 1
57717: PUSH
57718: FOR_IN
57719: IFFALSE 57753
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
57721: LD_ADDR_VAR 0 5
57725: PUSH
57726: LD_VAR 0 5
57730: PPUSH
57731: LD_VAR 0 4
57735: PPUSH
57736: LD_VAR 0 2
57740: PPUSH
57741: CALL_OW 259
57745: PPUSH
57746: CALL 59145 0 2
57750: ST_TO_ADDR
57751: GO 57718
57753: POP
57754: POP
// if not tmp then
57755: LD_VAR 0 5
57759: NOT
57760: IFFALSE 57764
// exit ;
57762: GO 57784
// result := SortListByListDesc ( units , tmp ) ;
57764: LD_ADDR_VAR 0 3
57768: PUSH
57769: LD_VAR 0 1
57773: PPUSH
57774: LD_VAR 0 5
57778: PPUSH
57779: CALL_OW 77
57783: ST_TO_ADDR
// end ;
57784: LD_VAR 0 3
57788: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57789: LD_INT 0
57791: PPUSH
57792: PPUSH
57793: PPUSH
// result := false ;
57794: LD_ADDR_VAR 0 3
57798: PUSH
57799: LD_INT 0
57801: ST_TO_ADDR
// if not building then
57802: LD_VAR 0 2
57806: NOT
57807: IFFALSE 57811
// exit ;
57809: GO 57949
// x := GetX ( building ) ;
57811: LD_ADDR_VAR 0 4
57815: PUSH
57816: LD_VAR 0 2
57820: PPUSH
57821: CALL_OW 250
57825: ST_TO_ADDR
// y := GetY ( building ) ;
57826: LD_ADDR_VAR 0 5
57830: PUSH
57831: LD_VAR 0 2
57835: PPUSH
57836: CALL_OW 251
57840: ST_TO_ADDR
// if not x or not y then
57841: LD_VAR 0 4
57845: NOT
57846: PUSH
57847: LD_VAR 0 5
57851: NOT
57852: OR
57853: IFFALSE 57857
// exit ;
57855: GO 57949
// if GetTaskList ( unit ) then
57857: LD_VAR 0 1
57861: PPUSH
57862: CALL_OW 437
57866: IFFALSE 57949
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57868: LD_STRING e
57870: PUSH
57871: LD_VAR 0 1
57875: PPUSH
57876: CALL_OW 437
57880: PUSH
57881: LD_INT 1
57883: ARRAY
57884: PUSH
57885: LD_INT 1
57887: ARRAY
57888: EQUAL
57889: PUSH
57890: LD_VAR 0 4
57894: PUSH
57895: LD_VAR 0 1
57899: PPUSH
57900: CALL_OW 437
57904: PUSH
57905: LD_INT 1
57907: ARRAY
57908: PUSH
57909: LD_INT 2
57911: ARRAY
57912: EQUAL
57913: AND
57914: PUSH
57915: LD_VAR 0 5
57919: PUSH
57920: LD_VAR 0 1
57924: PPUSH
57925: CALL_OW 437
57929: PUSH
57930: LD_INT 1
57932: ARRAY
57933: PUSH
57934: LD_INT 3
57936: ARRAY
57937: EQUAL
57938: AND
57939: IFFALSE 57949
// result := true end ;
57941: LD_ADDR_VAR 0 3
57945: PUSH
57946: LD_INT 1
57948: ST_TO_ADDR
// end ;
57949: LD_VAR 0 3
57953: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57954: LD_INT 0
57956: PPUSH
// result := false ;
57957: LD_ADDR_VAR 0 4
57961: PUSH
57962: LD_INT 0
57964: ST_TO_ADDR
// if GetTaskList ( unit ) then
57965: LD_VAR 0 1
57969: PPUSH
57970: CALL_OW 437
57974: IFFALSE 58057
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57976: LD_STRING M
57978: PUSH
57979: LD_VAR 0 1
57983: PPUSH
57984: CALL_OW 437
57988: PUSH
57989: LD_INT 1
57991: ARRAY
57992: PUSH
57993: LD_INT 1
57995: ARRAY
57996: EQUAL
57997: PUSH
57998: LD_VAR 0 2
58002: PUSH
58003: LD_VAR 0 1
58007: PPUSH
58008: CALL_OW 437
58012: PUSH
58013: LD_INT 1
58015: ARRAY
58016: PUSH
58017: LD_INT 2
58019: ARRAY
58020: EQUAL
58021: AND
58022: PUSH
58023: LD_VAR 0 3
58027: PUSH
58028: LD_VAR 0 1
58032: PPUSH
58033: CALL_OW 437
58037: PUSH
58038: LD_INT 1
58040: ARRAY
58041: PUSH
58042: LD_INT 3
58044: ARRAY
58045: EQUAL
58046: AND
58047: IFFALSE 58057
// result := true ;
58049: LD_ADDR_VAR 0 4
58053: PUSH
58054: LD_INT 1
58056: ST_TO_ADDR
// end ; end ;
58057: LD_VAR 0 4
58061: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58062: LD_INT 0
58064: PPUSH
58065: PPUSH
58066: PPUSH
58067: PPUSH
// if not unit or not area then
58068: LD_VAR 0 1
58072: NOT
58073: PUSH
58074: LD_VAR 0 2
58078: NOT
58079: OR
58080: IFFALSE 58084
// exit ;
58082: GO 58248
// tmp := AreaToList ( area , i ) ;
58084: LD_ADDR_VAR 0 6
58088: PUSH
58089: LD_VAR 0 2
58093: PPUSH
58094: LD_VAR 0 5
58098: PPUSH
58099: CALL_OW 517
58103: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58104: LD_ADDR_VAR 0 5
58108: PUSH
58109: DOUBLE
58110: LD_INT 1
58112: DEC
58113: ST_TO_ADDR
58114: LD_VAR 0 6
58118: PUSH
58119: LD_INT 1
58121: ARRAY
58122: PUSH
58123: FOR_TO
58124: IFFALSE 58246
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58126: LD_ADDR_VAR 0 7
58130: PUSH
58131: LD_VAR 0 6
58135: PUSH
58136: LD_INT 1
58138: ARRAY
58139: PUSH
58140: LD_VAR 0 5
58144: ARRAY
58145: PUSH
58146: LD_VAR 0 6
58150: PUSH
58151: LD_INT 2
58153: ARRAY
58154: PUSH
58155: LD_VAR 0 5
58159: ARRAY
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58165: LD_VAR 0 7
58169: PUSH
58170: LD_INT 1
58172: ARRAY
58173: PPUSH
58174: LD_VAR 0 7
58178: PUSH
58179: LD_INT 2
58181: ARRAY
58182: PPUSH
58183: CALL_OW 428
58187: PUSH
58188: LD_INT 0
58190: EQUAL
58191: IFFALSE 58244
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58193: LD_VAR 0 1
58197: PPUSH
58198: LD_VAR 0 7
58202: PUSH
58203: LD_INT 1
58205: ARRAY
58206: PPUSH
58207: LD_VAR 0 7
58211: PUSH
58212: LD_INT 2
58214: ARRAY
58215: PPUSH
58216: LD_VAR 0 3
58220: PPUSH
58221: CALL_OW 48
// result := IsPlaced ( unit ) ;
58225: LD_ADDR_VAR 0 4
58229: PUSH
58230: LD_VAR 0 1
58234: PPUSH
58235: CALL_OW 305
58239: ST_TO_ADDR
// exit ;
58240: POP
58241: POP
58242: GO 58248
// end ; end ;
58244: GO 58123
58246: POP
58247: POP
// end ;
58248: LD_VAR 0 4
58252: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58253: LD_INT 0
58255: PPUSH
58256: PPUSH
58257: PPUSH
// if not side or side > 8 then
58258: LD_VAR 0 1
58262: NOT
58263: PUSH
58264: LD_VAR 0 1
58268: PUSH
58269: LD_INT 8
58271: GREATER
58272: OR
58273: IFFALSE 58277
// exit ;
58275: GO 58464
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58277: LD_ADDR_VAR 0 4
58281: PUSH
58282: LD_INT 22
58284: PUSH
58285: LD_VAR 0 1
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 21
58296: PUSH
58297: LD_INT 3
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PPUSH
58308: CALL_OW 69
58312: ST_TO_ADDR
// if not tmp then
58313: LD_VAR 0 4
58317: NOT
58318: IFFALSE 58322
// exit ;
58320: GO 58464
// enable_addtolog := true ;
58322: LD_ADDR_OWVAR 81
58326: PUSH
58327: LD_INT 1
58329: ST_TO_ADDR
// AddToLog ( [ ) ;
58330: LD_STRING [
58332: PPUSH
58333: CALL_OW 561
// for i in tmp do
58337: LD_ADDR_VAR 0 3
58341: PUSH
58342: LD_VAR 0 4
58346: PUSH
58347: FOR_IN
58348: IFFALSE 58455
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58350: LD_STRING [
58352: PUSH
58353: LD_VAR 0 3
58357: PPUSH
58358: CALL_OW 266
58362: STR
58363: PUSH
58364: LD_STRING , 
58366: STR
58367: PUSH
58368: LD_VAR 0 3
58372: PPUSH
58373: CALL_OW 250
58377: STR
58378: PUSH
58379: LD_STRING , 
58381: STR
58382: PUSH
58383: LD_VAR 0 3
58387: PPUSH
58388: CALL_OW 251
58392: STR
58393: PUSH
58394: LD_STRING , 
58396: STR
58397: PUSH
58398: LD_VAR 0 3
58402: PPUSH
58403: CALL_OW 254
58407: STR
58408: PUSH
58409: LD_STRING , 
58411: STR
58412: PUSH
58413: LD_VAR 0 3
58417: PPUSH
58418: LD_INT 1
58420: PPUSH
58421: CALL_OW 268
58425: STR
58426: PUSH
58427: LD_STRING , 
58429: STR
58430: PUSH
58431: LD_VAR 0 3
58435: PPUSH
58436: LD_INT 2
58438: PPUSH
58439: CALL_OW 268
58443: STR
58444: PUSH
58445: LD_STRING ],
58447: STR
58448: PPUSH
58449: CALL_OW 561
// end ;
58453: GO 58347
58455: POP
58456: POP
// AddToLog ( ]; ) ;
58457: LD_STRING ];
58459: PPUSH
58460: CALL_OW 561
// end ;
58464: LD_VAR 0 2
58468: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58469: LD_INT 0
58471: PPUSH
58472: PPUSH
58473: PPUSH
58474: PPUSH
58475: PPUSH
// if not area or not rate or not max then
58476: LD_VAR 0 1
58480: NOT
58481: PUSH
58482: LD_VAR 0 2
58486: NOT
58487: OR
58488: PUSH
58489: LD_VAR 0 4
58493: NOT
58494: OR
58495: IFFALSE 58499
// exit ;
58497: GO 58688
// while 1 do
58499: LD_INT 1
58501: IFFALSE 58688
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58503: LD_ADDR_VAR 0 9
58507: PUSH
58508: LD_VAR 0 1
58512: PPUSH
58513: LD_INT 1
58515: PPUSH
58516: CALL_OW 287
58520: PUSH
58521: LD_INT 10
58523: MUL
58524: ST_TO_ADDR
// r := rate / 10 ;
58525: LD_ADDR_VAR 0 7
58529: PUSH
58530: LD_VAR 0 2
58534: PUSH
58535: LD_INT 10
58537: DIVREAL
58538: ST_TO_ADDR
// time := 1 1$00 ;
58539: LD_ADDR_VAR 0 8
58543: PUSH
58544: LD_INT 2100
58546: ST_TO_ADDR
// if amount < min then
58547: LD_VAR 0 9
58551: PUSH
58552: LD_VAR 0 3
58556: LESS
58557: IFFALSE 58575
// r := r * 2 else
58559: LD_ADDR_VAR 0 7
58563: PUSH
58564: LD_VAR 0 7
58568: PUSH
58569: LD_INT 2
58571: MUL
58572: ST_TO_ADDR
58573: GO 58601
// if amount > max then
58575: LD_VAR 0 9
58579: PUSH
58580: LD_VAR 0 4
58584: GREATER
58585: IFFALSE 58601
// r := r / 2 ;
58587: LD_ADDR_VAR 0 7
58591: PUSH
58592: LD_VAR 0 7
58596: PUSH
58597: LD_INT 2
58599: DIVREAL
58600: ST_TO_ADDR
// time := time / r ;
58601: LD_ADDR_VAR 0 8
58605: PUSH
58606: LD_VAR 0 8
58610: PUSH
58611: LD_VAR 0 7
58615: DIVREAL
58616: ST_TO_ADDR
// if time < 0 then
58617: LD_VAR 0 8
58621: PUSH
58622: LD_INT 0
58624: LESS
58625: IFFALSE 58642
// time := time * - 1 ;
58627: LD_ADDR_VAR 0 8
58631: PUSH
58632: LD_VAR 0 8
58636: PUSH
58637: LD_INT 1
58639: NEG
58640: MUL
58641: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
58642: LD_VAR 0 8
58646: PUSH
58647: LD_INT 35
58649: PPUSH
58650: LD_INT 875
58652: PPUSH
58653: CALL_OW 12
58657: PLUS
58658: PPUSH
58659: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58663: LD_INT 1
58665: PPUSH
58666: LD_INT 5
58668: PPUSH
58669: CALL_OW 12
58673: PPUSH
58674: LD_VAR 0 1
58678: PPUSH
58679: LD_INT 1
58681: PPUSH
58682: CALL_OW 55
// end ;
58686: GO 58499
// end ;
58688: LD_VAR 0 5
58692: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58693: LD_INT 0
58695: PPUSH
58696: PPUSH
58697: PPUSH
58698: PPUSH
58699: PPUSH
58700: PPUSH
58701: PPUSH
58702: PPUSH
// if not turrets or not factories then
58703: LD_VAR 0 1
58707: NOT
58708: PUSH
58709: LD_VAR 0 2
58713: NOT
58714: OR
58715: IFFALSE 58719
// exit ;
58717: GO 59026
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58719: LD_ADDR_VAR 0 10
58723: PUSH
58724: LD_INT 5
58726: PUSH
58727: LD_INT 6
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 2
58736: PUSH
58737: LD_INT 4
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 3
58746: PUSH
58747: LD_INT 5
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 24
58761: PUSH
58762: LD_INT 25
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 23
58771: PUSH
58772: LD_INT 27
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 42
58785: PUSH
58786: LD_INT 43
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 44
58795: PUSH
58796: LD_INT 46
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 45
58805: PUSH
58806: LD_INT 47
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: LIST
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: LIST
58822: ST_TO_ADDR
// result := [ ] ;
58823: LD_ADDR_VAR 0 3
58827: PUSH
58828: EMPTY
58829: ST_TO_ADDR
// for i in turrets do
58830: LD_ADDR_VAR 0 4
58834: PUSH
58835: LD_VAR 0 1
58839: PUSH
58840: FOR_IN
58841: IFFALSE 59024
// begin nat := GetNation ( i ) ;
58843: LD_ADDR_VAR 0 7
58847: PUSH
58848: LD_VAR 0 4
58852: PPUSH
58853: CALL_OW 248
58857: ST_TO_ADDR
// weapon := 0 ;
58858: LD_ADDR_VAR 0 8
58862: PUSH
58863: LD_INT 0
58865: ST_TO_ADDR
// if not nat then
58866: LD_VAR 0 7
58870: NOT
58871: IFFALSE 58875
// continue ;
58873: GO 58840
// for j in list [ nat ] do
58875: LD_ADDR_VAR 0 5
58879: PUSH
58880: LD_VAR 0 10
58884: PUSH
58885: LD_VAR 0 7
58889: ARRAY
58890: PUSH
58891: FOR_IN
58892: IFFALSE 58933
// if GetBWeapon ( i ) = j [ 1 ] then
58894: LD_VAR 0 4
58898: PPUSH
58899: CALL_OW 269
58903: PUSH
58904: LD_VAR 0 5
58908: PUSH
58909: LD_INT 1
58911: ARRAY
58912: EQUAL
58913: IFFALSE 58931
// begin weapon := j [ 2 ] ;
58915: LD_ADDR_VAR 0 8
58919: PUSH
58920: LD_VAR 0 5
58924: PUSH
58925: LD_INT 2
58927: ARRAY
58928: ST_TO_ADDR
// break ;
58929: GO 58933
// end ;
58931: GO 58891
58933: POP
58934: POP
// if not weapon then
58935: LD_VAR 0 8
58939: NOT
58940: IFFALSE 58944
// continue ;
58942: GO 58840
// for k in factories do
58944: LD_ADDR_VAR 0 6
58948: PUSH
58949: LD_VAR 0 2
58953: PUSH
58954: FOR_IN
58955: IFFALSE 59020
// begin weapons := AvailableWeaponList ( k ) ;
58957: LD_ADDR_VAR 0 9
58961: PUSH
58962: LD_VAR 0 6
58966: PPUSH
58967: CALL_OW 478
58971: ST_TO_ADDR
// if not weapons then
58972: LD_VAR 0 9
58976: NOT
58977: IFFALSE 58981
// continue ;
58979: GO 58954
// if weapon in weapons then
58981: LD_VAR 0 8
58985: PUSH
58986: LD_VAR 0 9
58990: IN
58991: IFFALSE 59018
// begin result := [ i , weapon ] ;
58993: LD_ADDR_VAR 0 3
58997: PUSH
58998: LD_VAR 0 4
59002: PUSH
59003: LD_VAR 0 8
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: ST_TO_ADDR
// exit ;
59012: POP
59013: POP
59014: POP
59015: POP
59016: GO 59026
// end ; end ;
59018: GO 58954
59020: POP
59021: POP
// end ;
59022: GO 58840
59024: POP
59025: POP
// end ;
59026: LD_VAR 0 3
59030: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59031: LD_INT 0
59033: PPUSH
// if not side or side > 8 then
59034: LD_VAR 0 3
59038: NOT
59039: PUSH
59040: LD_VAR 0 3
59044: PUSH
59045: LD_INT 8
59047: GREATER
59048: OR
59049: IFFALSE 59053
// exit ;
59051: GO 59112
// if not range then
59053: LD_VAR 0 4
59057: NOT
59058: IFFALSE 59069
// range := - 12 ;
59060: LD_ADDR_VAR 0 4
59064: PUSH
59065: LD_INT 12
59067: NEG
59068: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59069: LD_VAR 0 1
59073: PPUSH
59074: LD_VAR 0 2
59078: PPUSH
59079: LD_VAR 0 3
59083: PPUSH
59084: LD_VAR 0 4
59088: PPUSH
59089: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59093: LD_VAR 0 1
59097: PPUSH
59098: LD_VAR 0 2
59102: PPUSH
59103: LD_VAR 0 3
59107: PPUSH
59108: CALL_OW 331
// end ;
59112: LD_VAR 0 5
59116: RET
// export function Video ( mode ) ; begin
59117: LD_INT 0
59119: PPUSH
// ingame_video = mode ;
59120: LD_ADDR_OWVAR 52
59124: PUSH
59125: LD_VAR 0 1
59129: ST_TO_ADDR
// interface_hidden = mode ;
59130: LD_ADDR_OWVAR 54
59134: PUSH
59135: LD_VAR 0 1
59139: ST_TO_ADDR
// end ;
59140: LD_VAR 0 2
59144: RET
// export function Join ( array , element ) ; begin
59145: LD_INT 0
59147: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59148: LD_ADDR_VAR 0 3
59152: PUSH
59153: LD_VAR 0 1
59157: PPUSH
59158: LD_VAR 0 1
59162: PUSH
59163: LD_INT 1
59165: PLUS
59166: PPUSH
59167: LD_VAR 0 2
59171: PPUSH
59172: CALL_OW 1
59176: ST_TO_ADDR
// end ;
59177: LD_VAR 0 3
59181: RET
// export function JoinUnion ( array , element ) ; begin
59182: LD_INT 0
59184: PPUSH
// result := array union element ;
59185: LD_ADDR_VAR 0 3
59189: PUSH
59190: LD_VAR 0 1
59194: PUSH
59195: LD_VAR 0 2
59199: UNION
59200: ST_TO_ADDR
// end ;
59201: LD_VAR 0 3
59205: RET
// export function GetBehemoths ( side ) ; begin
59206: LD_INT 0
59208: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
59209: LD_ADDR_VAR 0 2
59213: PUSH
59214: LD_INT 22
59216: PUSH
59217: LD_VAR 0 1
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 31
59228: PUSH
59229: LD_INT 25
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PPUSH
59240: CALL_OW 69
59244: ST_TO_ADDR
// end ;
59245: LD_VAR 0 2
59249: RET
// export function Shuffle ( array ) ; var i , index ; begin
59250: LD_INT 0
59252: PPUSH
59253: PPUSH
59254: PPUSH
// result := [ ] ;
59255: LD_ADDR_VAR 0 2
59259: PUSH
59260: EMPTY
59261: ST_TO_ADDR
// if not array then
59262: LD_VAR 0 1
59266: NOT
59267: IFFALSE 59271
// exit ;
59269: GO 59370
// Randomize ;
59271: CALL_OW 10
// for i = array downto 1 do
59275: LD_ADDR_VAR 0 3
59279: PUSH
59280: DOUBLE
59281: LD_VAR 0 1
59285: INC
59286: ST_TO_ADDR
59287: LD_INT 1
59289: PUSH
59290: FOR_DOWNTO
59291: IFFALSE 59368
// begin index := rand ( 1 , array ) ;
59293: LD_ADDR_VAR 0 4
59297: PUSH
59298: LD_INT 1
59300: PPUSH
59301: LD_VAR 0 1
59305: PPUSH
59306: CALL_OW 12
59310: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59311: LD_ADDR_VAR 0 2
59315: PUSH
59316: LD_VAR 0 2
59320: PPUSH
59321: LD_VAR 0 2
59325: PUSH
59326: LD_INT 1
59328: PLUS
59329: PPUSH
59330: LD_VAR 0 1
59334: PUSH
59335: LD_VAR 0 4
59339: ARRAY
59340: PPUSH
59341: CALL_OW 2
59345: ST_TO_ADDR
// array := Delete ( array , index ) ;
59346: LD_ADDR_VAR 0 1
59350: PUSH
59351: LD_VAR 0 1
59355: PPUSH
59356: LD_VAR 0 4
59360: PPUSH
59361: CALL_OW 3
59365: ST_TO_ADDR
// end ;
59366: GO 59290
59368: POP
59369: POP
// end ;
59370: LD_VAR 0 2
59374: RET
// export function GetBaseMaterials ( base ) ; begin
59375: LD_INT 0
59377: PPUSH
// result := [ 0 , 0 , 0 ] ;
59378: LD_ADDR_VAR 0 2
59382: PUSH
59383: LD_INT 0
59385: PUSH
59386: LD_INT 0
59388: PUSH
59389: LD_INT 0
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: LIST
59396: ST_TO_ADDR
// if not base then
59397: LD_VAR 0 1
59401: NOT
59402: IFFALSE 59406
// exit ;
59404: GO 59455
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59406: LD_ADDR_VAR 0 2
59410: PUSH
59411: LD_VAR 0 1
59415: PPUSH
59416: LD_INT 1
59418: PPUSH
59419: CALL_OW 275
59423: PUSH
59424: LD_VAR 0 1
59428: PPUSH
59429: LD_INT 2
59431: PPUSH
59432: CALL_OW 275
59436: PUSH
59437: LD_VAR 0 1
59441: PPUSH
59442: LD_INT 3
59444: PPUSH
59445: CALL_OW 275
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: LIST
59454: ST_TO_ADDR
// end ;
59455: LD_VAR 0 2
59459: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59460: LD_INT 0
59462: PPUSH
59463: PPUSH
// result := array ;
59464: LD_ADDR_VAR 0 3
59468: PUSH
59469: LD_VAR 0 1
59473: ST_TO_ADDR
// if size >= result then
59474: LD_VAR 0 2
59478: PUSH
59479: LD_VAR 0 3
59483: GREATEREQUAL
59484: IFFALSE 59488
// exit ;
59486: GO 59538
// if size then
59488: LD_VAR 0 2
59492: IFFALSE 59538
// for i := array downto size do
59494: LD_ADDR_VAR 0 4
59498: PUSH
59499: DOUBLE
59500: LD_VAR 0 1
59504: INC
59505: ST_TO_ADDR
59506: LD_VAR 0 2
59510: PUSH
59511: FOR_DOWNTO
59512: IFFALSE 59536
// result := Delete ( result , result ) ;
59514: LD_ADDR_VAR 0 3
59518: PUSH
59519: LD_VAR 0 3
59523: PPUSH
59524: LD_VAR 0 3
59528: PPUSH
59529: CALL_OW 3
59533: ST_TO_ADDR
59534: GO 59511
59536: POP
59537: POP
// end ;
59538: LD_VAR 0 3
59542: RET
// export function ComExit ( unit ) ; var tmp ; begin
59543: LD_INT 0
59545: PPUSH
59546: PPUSH
// if not IsInUnit ( unit ) then
59547: LD_VAR 0 1
59551: PPUSH
59552: CALL_OW 310
59556: NOT
59557: IFFALSE 59561
// exit ;
59559: GO 59621
// tmp := IsInUnit ( unit ) ;
59561: LD_ADDR_VAR 0 3
59565: PUSH
59566: LD_VAR 0 1
59570: PPUSH
59571: CALL_OW 310
59575: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59576: LD_VAR 0 3
59580: PPUSH
59581: CALL_OW 247
59585: PUSH
59586: LD_INT 2
59588: EQUAL
59589: IFFALSE 59602
// ComExitVehicle ( unit ) else
59591: LD_VAR 0 1
59595: PPUSH
59596: CALL_OW 121
59600: GO 59611
// ComExitBuilding ( unit ) ;
59602: LD_VAR 0 1
59606: PPUSH
59607: CALL_OW 122
// result := tmp ;
59611: LD_ADDR_VAR 0 2
59615: PUSH
59616: LD_VAR 0 3
59620: ST_TO_ADDR
// end ;
59621: LD_VAR 0 2
59625: RET
// export function ComExitAll ( units ) ; var i ; begin
59626: LD_INT 0
59628: PPUSH
59629: PPUSH
// if not units then
59630: LD_VAR 0 1
59634: NOT
59635: IFFALSE 59639
// exit ;
59637: GO 59665
// for i in units do
59639: LD_ADDR_VAR 0 3
59643: PUSH
59644: LD_VAR 0 1
59648: PUSH
59649: FOR_IN
59650: IFFALSE 59663
// ComExit ( i ) ;
59652: LD_VAR 0 3
59656: PPUSH
59657: CALL 59543 0 1
59661: GO 59649
59663: POP
59664: POP
// end ;
59665: LD_VAR 0 2
59669: RET
// export function ResetHc ; begin
59670: LD_INT 0
59672: PPUSH
// InitHc ;
59673: CALL_OW 19
// hc_importance := 0 ;
59677: LD_ADDR_OWVAR 32
59681: PUSH
59682: LD_INT 0
59684: ST_TO_ADDR
// end ;
59685: LD_VAR 0 1
59689: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59690: LD_INT 0
59692: PPUSH
59693: PPUSH
59694: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59695: LD_ADDR_VAR 0 6
59699: PUSH
59700: LD_VAR 0 1
59704: PUSH
59705: LD_VAR 0 3
59709: PLUS
59710: PUSH
59711: LD_INT 2
59713: DIV
59714: ST_TO_ADDR
// if _x < 0 then
59715: LD_VAR 0 6
59719: PUSH
59720: LD_INT 0
59722: LESS
59723: IFFALSE 59740
// _x := _x * - 1 ;
59725: LD_ADDR_VAR 0 6
59729: PUSH
59730: LD_VAR 0 6
59734: PUSH
59735: LD_INT 1
59737: NEG
59738: MUL
59739: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59740: LD_ADDR_VAR 0 7
59744: PUSH
59745: LD_VAR 0 2
59749: PUSH
59750: LD_VAR 0 4
59754: PLUS
59755: PUSH
59756: LD_INT 2
59758: DIV
59759: ST_TO_ADDR
// if _y < 0 then
59760: LD_VAR 0 7
59764: PUSH
59765: LD_INT 0
59767: LESS
59768: IFFALSE 59785
// _y := _y * - 1 ;
59770: LD_ADDR_VAR 0 7
59774: PUSH
59775: LD_VAR 0 7
59779: PUSH
59780: LD_INT 1
59782: NEG
59783: MUL
59784: ST_TO_ADDR
// result := [ _x , _y ] ;
59785: LD_ADDR_VAR 0 5
59789: PUSH
59790: LD_VAR 0 6
59794: PUSH
59795: LD_VAR 0 7
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: ST_TO_ADDR
// end ;
59804: LD_VAR 0 5
59808: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59809: LD_INT 0
59811: PPUSH
59812: PPUSH
59813: PPUSH
59814: PPUSH
// task := GetTaskList ( unit ) ;
59815: LD_ADDR_VAR 0 7
59819: PUSH
59820: LD_VAR 0 1
59824: PPUSH
59825: CALL_OW 437
59829: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59830: LD_VAR 0 7
59834: NOT
59835: PUSH
59836: LD_VAR 0 1
59840: PPUSH
59841: LD_VAR 0 2
59845: PPUSH
59846: CALL_OW 308
59850: NOT
59851: AND
59852: IFFALSE 59856
// exit ;
59854: GO 59974
// if IsInArea ( unit , area ) then
59856: LD_VAR 0 1
59860: PPUSH
59861: LD_VAR 0 2
59865: PPUSH
59866: CALL_OW 308
59870: IFFALSE 59888
// begin ComMoveToArea ( unit , goAway ) ;
59872: LD_VAR 0 1
59876: PPUSH
59877: LD_VAR 0 3
59881: PPUSH
59882: CALL_OW 113
// exit ;
59886: GO 59974
// end ; if task [ 1 ] [ 1 ] <> M then
59888: LD_VAR 0 7
59892: PUSH
59893: LD_INT 1
59895: ARRAY
59896: PUSH
59897: LD_INT 1
59899: ARRAY
59900: PUSH
59901: LD_STRING M
59903: NONEQUAL
59904: IFFALSE 59908
// exit ;
59906: GO 59974
// x := task [ 1 ] [ 2 ] ;
59908: LD_ADDR_VAR 0 5
59912: PUSH
59913: LD_VAR 0 7
59917: PUSH
59918: LD_INT 1
59920: ARRAY
59921: PUSH
59922: LD_INT 2
59924: ARRAY
59925: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59926: LD_ADDR_VAR 0 6
59930: PUSH
59931: LD_VAR 0 7
59935: PUSH
59936: LD_INT 1
59938: ARRAY
59939: PUSH
59940: LD_INT 3
59942: ARRAY
59943: ST_TO_ADDR
// if InArea ( x , y , area ) then
59944: LD_VAR 0 5
59948: PPUSH
59949: LD_VAR 0 6
59953: PPUSH
59954: LD_VAR 0 2
59958: PPUSH
59959: CALL_OW 309
59963: IFFALSE 59974
// ComStop ( unit ) ;
59965: LD_VAR 0 1
59969: PPUSH
59970: CALL_OW 141
// end ;
59974: LD_VAR 0 4
59978: RET
// export function Abs ( value ) ; begin
59979: LD_INT 0
59981: PPUSH
// result := value ;
59982: LD_ADDR_VAR 0 2
59986: PUSH
59987: LD_VAR 0 1
59991: ST_TO_ADDR
// if value < 0 then
59992: LD_VAR 0 1
59996: PUSH
59997: LD_INT 0
59999: LESS
60000: IFFALSE 60017
// result := value * - 1 ;
60002: LD_ADDR_VAR 0 2
60006: PUSH
60007: LD_VAR 0 1
60011: PUSH
60012: LD_INT 1
60014: NEG
60015: MUL
60016: ST_TO_ADDR
// end ;
60017: LD_VAR 0 2
60021: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60022: LD_INT 0
60024: PPUSH
60025: PPUSH
60026: PPUSH
60027: PPUSH
60028: PPUSH
60029: PPUSH
60030: PPUSH
60031: PPUSH
// if not unit or not building then
60032: LD_VAR 0 1
60036: NOT
60037: PUSH
60038: LD_VAR 0 2
60042: NOT
60043: OR
60044: IFFALSE 60048
// exit ;
60046: GO 60274
// x := GetX ( building ) ;
60048: LD_ADDR_VAR 0 4
60052: PUSH
60053: LD_VAR 0 2
60057: PPUSH
60058: CALL_OW 250
60062: ST_TO_ADDR
// y := GetY ( building ) ;
60063: LD_ADDR_VAR 0 6
60067: PUSH
60068: LD_VAR 0 2
60072: PPUSH
60073: CALL_OW 251
60077: ST_TO_ADDR
// d := GetDir ( building ) ;
60078: LD_ADDR_VAR 0 8
60082: PUSH
60083: LD_VAR 0 2
60087: PPUSH
60088: CALL_OW 254
60092: ST_TO_ADDR
// r := 4 ;
60093: LD_ADDR_VAR 0 9
60097: PUSH
60098: LD_INT 4
60100: ST_TO_ADDR
// for i := 1 to 5 do
60101: LD_ADDR_VAR 0 10
60105: PUSH
60106: DOUBLE
60107: LD_INT 1
60109: DEC
60110: ST_TO_ADDR
60111: LD_INT 5
60113: PUSH
60114: FOR_TO
60115: IFFALSE 60272
// begin _x := ShiftX ( x , d , r + i ) ;
60117: LD_ADDR_VAR 0 5
60121: PUSH
60122: LD_VAR 0 4
60126: PPUSH
60127: LD_VAR 0 8
60131: PPUSH
60132: LD_VAR 0 9
60136: PUSH
60137: LD_VAR 0 10
60141: PLUS
60142: PPUSH
60143: CALL_OW 272
60147: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60148: LD_ADDR_VAR 0 7
60152: PUSH
60153: LD_VAR 0 6
60157: PPUSH
60158: LD_VAR 0 8
60162: PPUSH
60163: LD_VAR 0 9
60167: PUSH
60168: LD_VAR 0 10
60172: PLUS
60173: PPUSH
60174: CALL_OW 273
60178: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60179: LD_VAR 0 5
60183: PPUSH
60184: LD_VAR 0 7
60188: PPUSH
60189: CALL_OW 488
60193: PUSH
60194: LD_VAR 0 5
60198: PPUSH
60199: LD_VAR 0 7
60203: PPUSH
60204: CALL_OW 428
60208: PPUSH
60209: CALL_OW 247
60213: PUSH
60214: LD_INT 3
60216: PUSH
60217: LD_INT 2
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: IN
60224: NOT
60225: AND
60226: IFFALSE 60270
// begin ComMoveXY ( unit , _x , _y ) ;
60228: LD_VAR 0 1
60232: PPUSH
60233: LD_VAR 0 5
60237: PPUSH
60238: LD_VAR 0 7
60242: PPUSH
60243: CALL_OW 111
// result := [ _x , _y ] ;
60247: LD_ADDR_VAR 0 3
60251: PUSH
60252: LD_VAR 0 5
60256: PUSH
60257: LD_VAR 0 7
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: ST_TO_ADDR
// exit ;
60266: POP
60267: POP
60268: GO 60274
// end ; end ;
60270: GO 60114
60272: POP
60273: POP
// end ;
60274: LD_VAR 0 3
60278: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60279: LD_INT 0
60281: PPUSH
60282: PPUSH
60283: PPUSH
// result := 0 ;
60284: LD_ADDR_VAR 0 3
60288: PUSH
60289: LD_INT 0
60291: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60292: LD_VAR 0 1
60296: PUSH
60297: LD_INT 0
60299: LESS
60300: PUSH
60301: LD_VAR 0 1
60305: PUSH
60306: LD_INT 8
60308: GREATER
60309: OR
60310: PUSH
60311: LD_VAR 0 2
60315: PUSH
60316: LD_INT 0
60318: LESS
60319: OR
60320: PUSH
60321: LD_VAR 0 2
60325: PUSH
60326: LD_INT 8
60328: GREATER
60329: OR
60330: IFFALSE 60334
// exit ;
60332: GO 60409
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60334: LD_ADDR_VAR 0 4
60338: PUSH
60339: LD_INT 22
60341: PUSH
60342: LD_VAR 0 2
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PPUSH
60351: CALL_OW 69
60355: PUSH
60356: FOR_IN
60357: IFFALSE 60407
// begin un := UnitShoot ( i ) ;
60359: LD_ADDR_VAR 0 5
60363: PUSH
60364: LD_VAR 0 4
60368: PPUSH
60369: CALL_OW 504
60373: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60374: LD_VAR 0 5
60378: PPUSH
60379: CALL_OW 255
60383: PUSH
60384: LD_VAR 0 1
60388: EQUAL
60389: IFFALSE 60405
// begin result := un ;
60391: LD_ADDR_VAR 0 3
60395: PUSH
60396: LD_VAR 0 5
60400: ST_TO_ADDR
// exit ;
60401: POP
60402: POP
60403: GO 60409
// end ; end ;
60405: GO 60356
60407: POP
60408: POP
// end ;
60409: LD_VAR 0 3
60413: RET
// export function GetCargoBay ( units ) ; begin
60414: LD_INT 0
60416: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60417: LD_ADDR_VAR 0 2
60421: PUSH
60422: LD_VAR 0 1
60426: PPUSH
60427: LD_INT 2
60429: PUSH
60430: LD_INT 34
60432: PUSH
60433: LD_INT 12
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 34
60442: PUSH
60443: LD_INT 51
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 34
60452: PUSH
60453: LD_INT 32
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 34
60462: PUSH
60463: LD_INT 89
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: PPUSH
60477: CALL_OW 72
60481: ST_TO_ADDR
// end ;
60482: LD_VAR 0 2
60486: RET
// export function Negate ( value ) ; begin
60487: LD_INT 0
60489: PPUSH
// result := not value ;
60490: LD_ADDR_VAR 0 2
60494: PUSH
60495: LD_VAR 0 1
60499: NOT
60500: ST_TO_ADDR
// end ;
60501: LD_VAR 0 2
60505: RET
// export function Inc ( value ) ; begin
60506: LD_INT 0
60508: PPUSH
// result := value + 1 ;
60509: LD_ADDR_VAR 0 2
60513: PUSH
60514: LD_VAR 0 1
60518: PUSH
60519: LD_INT 1
60521: PLUS
60522: ST_TO_ADDR
// end ;
60523: LD_VAR 0 2
60527: RET
// export function Dec ( value ) ; begin
60528: LD_INT 0
60530: PPUSH
// result := value - 1 ;
60531: LD_ADDR_VAR 0 2
60535: PUSH
60536: LD_VAR 0 1
60540: PUSH
60541: LD_INT 1
60543: MINUS
60544: ST_TO_ADDR
// end ;
60545: LD_VAR 0 2
60549: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60550: LD_INT 0
60552: PPUSH
60553: PPUSH
60554: PPUSH
60555: PPUSH
60556: PPUSH
60557: PPUSH
60558: PPUSH
60559: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60560: LD_VAR 0 1
60564: PPUSH
60565: LD_VAR 0 2
60569: PPUSH
60570: CALL_OW 488
60574: NOT
60575: PUSH
60576: LD_VAR 0 3
60580: PPUSH
60581: LD_VAR 0 4
60585: PPUSH
60586: CALL_OW 488
60590: NOT
60591: OR
60592: IFFALSE 60605
// begin result := - 1 ;
60594: LD_ADDR_VAR 0 5
60598: PUSH
60599: LD_INT 1
60601: NEG
60602: ST_TO_ADDR
// exit ;
60603: GO 60840
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60605: LD_ADDR_VAR 0 12
60609: PUSH
60610: LD_VAR 0 1
60614: PPUSH
60615: LD_VAR 0 2
60619: PPUSH
60620: LD_VAR 0 3
60624: PPUSH
60625: LD_VAR 0 4
60629: PPUSH
60630: CALL 59690 0 4
60634: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60635: LD_ADDR_VAR 0 11
60639: PUSH
60640: LD_VAR 0 1
60644: PPUSH
60645: LD_VAR 0 2
60649: PPUSH
60650: LD_VAR 0 12
60654: PUSH
60655: LD_INT 1
60657: ARRAY
60658: PPUSH
60659: LD_VAR 0 12
60663: PUSH
60664: LD_INT 2
60666: ARRAY
60667: PPUSH
60668: CALL_OW 298
60672: ST_TO_ADDR
// distance := 9999 ;
60673: LD_ADDR_VAR 0 10
60677: PUSH
60678: LD_INT 9999
60680: ST_TO_ADDR
// for i := 0 to 5 do
60681: LD_ADDR_VAR 0 6
60685: PUSH
60686: DOUBLE
60687: LD_INT 0
60689: DEC
60690: ST_TO_ADDR
60691: LD_INT 5
60693: PUSH
60694: FOR_TO
60695: IFFALSE 60838
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60697: LD_ADDR_VAR 0 7
60701: PUSH
60702: LD_VAR 0 1
60706: PPUSH
60707: LD_VAR 0 6
60711: PPUSH
60712: LD_VAR 0 11
60716: PPUSH
60717: CALL_OW 272
60721: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60722: LD_ADDR_VAR 0 8
60726: PUSH
60727: LD_VAR 0 2
60731: PPUSH
60732: LD_VAR 0 6
60736: PPUSH
60737: LD_VAR 0 11
60741: PPUSH
60742: CALL_OW 273
60746: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60747: LD_VAR 0 7
60751: PPUSH
60752: LD_VAR 0 8
60756: PPUSH
60757: CALL_OW 488
60761: NOT
60762: IFFALSE 60766
// continue ;
60764: GO 60694
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60766: LD_ADDR_VAR 0 9
60770: PUSH
60771: LD_VAR 0 12
60775: PUSH
60776: LD_INT 1
60778: ARRAY
60779: PPUSH
60780: LD_VAR 0 12
60784: PUSH
60785: LD_INT 2
60787: ARRAY
60788: PPUSH
60789: LD_VAR 0 7
60793: PPUSH
60794: LD_VAR 0 8
60798: PPUSH
60799: CALL_OW 298
60803: ST_TO_ADDR
// if tmp < distance then
60804: LD_VAR 0 9
60808: PUSH
60809: LD_VAR 0 10
60813: LESS
60814: IFFALSE 60836
// begin result := i ;
60816: LD_ADDR_VAR 0 5
60820: PUSH
60821: LD_VAR 0 6
60825: ST_TO_ADDR
// distance := tmp ;
60826: LD_ADDR_VAR 0 10
60830: PUSH
60831: LD_VAR 0 9
60835: ST_TO_ADDR
// end ; end ;
60836: GO 60694
60838: POP
60839: POP
// end ;
60840: LD_VAR 0 5
60844: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60845: LD_INT 0
60847: PPUSH
60848: PPUSH
// if not driver or not IsInUnit ( driver ) then
60849: LD_VAR 0 1
60853: NOT
60854: PUSH
60855: LD_VAR 0 1
60859: PPUSH
60860: CALL_OW 310
60864: NOT
60865: OR
60866: IFFALSE 60870
// exit ;
60868: GO 60960
// vehicle := IsInUnit ( driver ) ;
60870: LD_ADDR_VAR 0 3
60874: PUSH
60875: LD_VAR 0 1
60879: PPUSH
60880: CALL_OW 310
60884: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60885: LD_VAR 0 1
60889: PPUSH
60890: LD_STRING \
60892: PUSH
60893: LD_INT 0
60895: PUSH
60896: LD_INT 0
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: LD_INT 0
60904: PUSH
60905: LD_INT 0
60907: PUSH
60908: LD_INT 0
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: PUSH
60920: LD_STRING E
60922: PUSH
60923: LD_INT 0
60925: PUSH
60926: LD_INT 0
60928: PUSH
60929: LD_VAR 0 3
60933: PUSH
60934: LD_INT 0
60936: PUSH
60937: LD_INT 0
60939: PUSH
60940: LD_INT 0
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PPUSH
60956: CALL_OW 446
// end ;
60960: LD_VAR 0 2
60964: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60965: LD_INT 0
60967: PPUSH
60968: PPUSH
// if not driver or not IsInUnit ( driver ) then
60969: LD_VAR 0 1
60973: NOT
60974: PUSH
60975: LD_VAR 0 1
60979: PPUSH
60980: CALL_OW 310
60984: NOT
60985: OR
60986: IFFALSE 60990
// exit ;
60988: GO 61080
// vehicle := IsInUnit ( driver ) ;
60990: LD_ADDR_VAR 0 3
60994: PUSH
60995: LD_VAR 0 1
60999: PPUSH
61000: CALL_OW 310
61004: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61005: LD_VAR 0 1
61009: PPUSH
61010: LD_STRING \
61012: PUSH
61013: LD_INT 0
61015: PUSH
61016: LD_INT 0
61018: PUSH
61019: LD_INT 0
61021: PUSH
61022: LD_INT 0
61024: PUSH
61025: LD_INT 0
61027: PUSH
61028: LD_INT 0
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: PUSH
61040: LD_STRING E
61042: PUSH
61043: LD_INT 0
61045: PUSH
61046: LD_INT 0
61048: PUSH
61049: LD_VAR 0 3
61053: PUSH
61054: LD_INT 0
61056: PUSH
61057: LD_INT 0
61059: PUSH
61060: LD_INT 0
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PPUSH
61076: CALL_OW 447
// end ;
61080: LD_VAR 0 2
61084: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61085: LD_INT 0
61087: PPUSH
61088: PPUSH
61089: PPUSH
// tmp := [ ] ;
61090: LD_ADDR_VAR 0 5
61094: PUSH
61095: EMPTY
61096: ST_TO_ADDR
// for i in units do
61097: LD_ADDR_VAR 0 4
61101: PUSH
61102: LD_VAR 0 1
61106: PUSH
61107: FOR_IN
61108: IFFALSE 61146
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61110: LD_ADDR_VAR 0 5
61114: PUSH
61115: LD_VAR 0 5
61119: PPUSH
61120: LD_VAR 0 5
61124: PUSH
61125: LD_INT 1
61127: PLUS
61128: PPUSH
61129: LD_VAR 0 4
61133: PPUSH
61134: CALL_OW 256
61138: PPUSH
61139: CALL_OW 2
61143: ST_TO_ADDR
61144: GO 61107
61146: POP
61147: POP
// if not tmp then
61148: LD_VAR 0 5
61152: NOT
61153: IFFALSE 61157
// exit ;
61155: GO 61205
// if asc then
61157: LD_VAR 0 2
61161: IFFALSE 61185
// result := SortListByListAsc ( units , tmp ) else
61163: LD_ADDR_VAR 0 3
61167: PUSH
61168: LD_VAR 0 1
61172: PPUSH
61173: LD_VAR 0 5
61177: PPUSH
61178: CALL_OW 76
61182: ST_TO_ADDR
61183: GO 61205
// result := SortListByListDesc ( units , tmp ) ;
61185: LD_ADDR_VAR 0 3
61189: PUSH
61190: LD_VAR 0 1
61194: PPUSH
61195: LD_VAR 0 5
61199: PPUSH
61200: CALL_OW 77
61204: ST_TO_ADDR
// end ;
61205: LD_VAR 0 3
61209: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61210: LD_INT 0
61212: PPUSH
61213: PPUSH
// task := GetTaskList ( mech ) ;
61214: LD_ADDR_VAR 0 4
61218: PUSH
61219: LD_VAR 0 1
61223: PPUSH
61224: CALL_OW 437
61228: ST_TO_ADDR
// if not task then
61229: LD_VAR 0 4
61233: NOT
61234: IFFALSE 61238
// exit ;
61236: GO 61280
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61238: LD_ADDR_VAR 0 3
61242: PUSH
61243: LD_VAR 0 4
61247: PUSH
61248: LD_INT 1
61250: ARRAY
61251: PUSH
61252: LD_INT 1
61254: ARRAY
61255: PUSH
61256: LD_STRING r
61258: EQUAL
61259: PUSH
61260: LD_VAR 0 4
61264: PUSH
61265: LD_INT 1
61267: ARRAY
61268: PUSH
61269: LD_INT 4
61271: ARRAY
61272: PUSH
61273: LD_VAR 0 2
61277: EQUAL
61278: AND
61279: ST_TO_ADDR
// end ;
61280: LD_VAR 0 3
61284: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61285: LD_INT 0
61287: PPUSH
// SetDir ( unit , d ) ;
61288: LD_VAR 0 1
61292: PPUSH
61293: LD_VAR 0 4
61297: PPUSH
61298: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
61302: LD_VAR 0 1
61306: PPUSH
61307: LD_VAR 0 2
61311: PPUSH
61312: LD_VAR 0 3
61316: PPUSH
61317: LD_VAR 0 5
61321: PPUSH
61322: CALL_OW 48
// end ;
61326: LD_VAR 0 6
61330: RET
// export function ToNaturalNumber ( number ) ; begin
61331: LD_INT 0
61333: PPUSH
// result := number div 1 ;
61334: LD_ADDR_VAR 0 2
61338: PUSH
61339: LD_VAR 0 1
61343: PUSH
61344: LD_INT 1
61346: DIV
61347: ST_TO_ADDR
// if number < 0 then
61348: LD_VAR 0 1
61352: PUSH
61353: LD_INT 0
61355: LESS
61356: IFFALSE 61366
// result := 0 ;
61358: LD_ADDR_VAR 0 2
61362: PUSH
61363: LD_INT 0
61365: ST_TO_ADDR
// end ;
61366: LD_VAR 0 2
61370: RET
// export function SortByClass ( units , class ) ; var un ; begin
61371: LD_INT 0
61373: PPUSH
61374: PPUSH
// if not units or not class then
61375: LD_VAR 0 1
61379: NOT
61380: PUSH
61381: LD_VAR 0 2
61385: NOT
61386: OR
61387: IFFALSE 61391
// exit ;
61389: GO 61486
// result := [ ] ;
61391: LD_ADDR_VAR 0 3
61395: PUSH
61396: EMPTY
61397: ST_TO_ADDR
// for un in units do
61398: LD_ADDR_VAR 0 4
61402: PUSH
61403: LD_VAR 0 1
61407: PUSH
61408: FOR_IN
61409: IFFALSE 61484
// if GetClass ( un ) = class then
61411: LD_VAR 0 4
61415: PPUSH
61416: CALL_OW 257
61420: PUSH
61421: LD_VAR 0 2
61425: EQUAL
61426: IFFALSE 61453
// result := Insert ( result , 1 , un ) else
61428: LD_ADDR_VAR 0 3
61432: PUSH
61433: LD_VAR 0 3
61437: PPUSH
61438: LD_INT 1
61440: PPUSH
61441: LD_VAR 0 4
61445: PPUSH
61446: CALL_OW 2
61450: ST_TO_ADDR
61451: GO 61482
// result := Replace ( result , result + 1 , un ) ;
61453: LD_ADDR_VAR 0 3
61457: PUSH
61458: LD_VAR 0 3
61462: PPUSH
61463: LD_VAR 0 3
61467: PUSH
61468: LD_INT 1
61470: PLUS
61471: PPUSH
61472: LD_VAR 0 4
61476: PPUSH
61477: CALL_OW 1
61481: ST_TO_ADDR
61482: GO 61408
61484: POP
61485: POP
// end ;
61486: LD_VAR 0 3
61490: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61491: LD_INT 0
61493: PPUSH
61494: PPUSH
61495: PPUSH
61496: PPUSH
61497: PPUSH
61498: PPUSH
61499: PPUSH
// result := [ ] ;
61500: LD_ADDR_VAR 0 4
61504: PUSH
61505: EMPTY
61506: ST_TO_ADDR
// if x - r < 0 then
61507: LD_VAR 0 1
61511: PUSH
61512: LD_VAR 0 3
61516: MINUS
61517: PUSH
61518: LD_INT 0
61520: LESS
61521: IFFALSE 61533
// min_x := 0 else
61523: LD_ADDR_VAR 0 8
61527: PUSH
61528: LD_INT 0
61530: ST_TO_ADDR
61531: GO 61549
// min_x := x - r ;
61533: LD_ADDR_VAR 0 8
61537: PUSH
61538: LD_VAR 0 1
61542: PUSH
61543: LD_VAR 0 3
61547: MINUS
61548: ST_TO_ADDR
// if y - r < 0 then
61549: LD_VAR 0 2
61553: PUSH
61554: LD_VAR 0 3
61558: MINUS
61559: PUSH
61560: LD_INT 0
61562: LESS
61563: IFFALSE 61575
// min_y := 0 else
61565: LD_ADDR_VAR 0 7
61569: PUSH
61570: LD_INT 0
61572: ST_TO_ADDR
61573: GO 61591
// min_y := y - r ;
61575: LD_ADDR_VAR 0 7
61579: PUSH
61580: LD_VAR 0 2
61584: PUSH
61585: LD_VAR 0 3
61589: MINUS
61590: ST_TO_ADDR
// max_x := x + r ;
61591: LD_ADDR_VAR 0 9
61595: PUSH
61596: LD_VAR 0 1
61600: PUSH
61601: LD_VAR 0 3
61605: PLUS
61606: ST_TO_ADDR
// max_y := y + r ;
61607: LD_ADDR_VAR 0 10
61611: PUSH
61612: LD_VAR 0 2
61616: PUSH
61617: LD_VAR 0 3
61621: PLUS
61622: ST_TO_ADDR
// for _x = min_x to max_x do
61623: LD_ADDR_VAR 0 5
61627: PUSH
61628: DOUBLE
61629: LD_VAR 0 8
61633: DEC
61634: ST_TO_ADDR
61635: LD_VAR 0 9
61639: PUSH
61640: FOR_TO
61641: IFFALSE 61742
// for _y = min_y to max_y do
61643: LD_ADDR_VAR 0 6
61647: PUSH
61648: DOUBLE
61649: LD_VAR 0 7
61653: DEC
61654: ST_TO_ADDR
61655: LD_VAR 0 10
61659: PUSH
61660: FOR_TO
61661: IFFALSE 61738
// begin if not ValidHex ( _x , _y ) then
61663: LD_VAR 0 5
61667: PPUSH
61668: LD_VAR 0 6
61672: PPUSH
61673: CALL_OW 488
61677: NOT
61678: IFFALSE 61682
// continue ;
61680: GO 61660
// if GetResourceTypeXY ( _x , _y ) then
61682: LD_VAR 0 5
61686: PPUSH
61687: LD_VAR 0 6
61691: PPUSH
61692: CALL_OW 283
61696: IFFALSE 61736
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61698: LD_ADDR_VAR 0 4
61702: PUSH
61703: LD_VAR 0 4
61707: PPUSH
61708: LD_VAR 0 4
61712: PUSH
61713: LD_INT 1
61715: PLUS
61716: PPUSH
61717: LD_VAR 0 5
61721: PUSH
61722: LD_VAR 0 6
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PPUSH
61731: CALL_OW 1
61735: ST_TO_ADDR
// end ;
61736: GO 61660
61738: POP
61739: POP
61740: GO 61640
61742: POP
61743: POP
// end ;
61744: LD_VAR 0 4
61748: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61749: LD_INT 0
61751: PPUSH
61752: PPUSH
61753: PPUSH
61754: PPUSH
61755: PPUSH
61756: PPUSH
61757: PPUSH
61758: PPUSH
// if not units then
61759: LD_VAR 0 1
61763: NOT
61764: IFFALSE 61768
// exit ;
61766: GO 62292
// result := UnitFilter ( units , [ f_ok ] ) ;
61768: LD_ADDR_VAR 0 3
61772: PUSH
61773: LD_VAR 0 1
61777: PPUSH
61778: LD_INT 50
61780: PUSH
61781: EMPTY
61782: LIST
61783: PPUSH
61784: CALL_OW 72
61788: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61789: LD_ADDR_VAR 0 8
61793: PUSH
61794: LD_VAR 0 1
61798: PUSH
61799: LD_INT 1
61801: ARRAY
61802: PPUSH
61803: CALL_OW 255
61807: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
61808: LD_ADDR_VAR 0 10
61812: PUSH
61813: LD_INT 29
61815: PUSH
61816: LD_INT 91
61818: PUSH
61819: LD_INT 49
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: LIST
61826: ST_TO_ADDR
// if not result then
61827: LD_VAR 0 3
61831: NOT
61832: IFFALSE 61836
// exit ;
61834: GO 62292
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61836: LD_ADDR_VAR 0 5
61840: PUSH
61841: LD_INT 81
61843: PUSH
61844: LD_VAR 0 8
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PPUSH
61853: CALL_OW 69
61857: ST_TO_ADDR
// for i in result do
61858: LD_ADDR_VAR 0 4
61862: PUSH
61863: LD_VAR 0 3
61867: PUSH
61868: FOR_IN
61869: IFFALSE 62290
// begin tag := GetTag ( i ) + 1 ;
61871: LD_ADDR_VAR 0 9
61875: PUSH
61876: LD_VAR 0 4
61880: PPUSH
61881: CALL_OW 110
61885: PUSH
61886: LD_INT 1
61888: PLUS
61889: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
61890: LD_ADDR_VAR 0 7
61894: PUSH
61895: LD_VAR 0 4
61899: PPUSH
61900: CALL_OW 250
61904: PPUSH
61905: LD_VAR 0 4
61909: PPUSH
61910: CALL_OW 251
61914: PPUSH
61915: LD_INT 6
61917: PPUSH
61918: CALL 61491 0 3
61922: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
61923: LD_VAR 0 4
61927: PPUSH
61928: CALL_OW 247
61932: PUSH
61933: LD_INT 2
61935: EQUAL
61936: PUSH
61937: LD_VAR 0 7
61941: AND
61942: PUSH
61943: LD_VAR 0 4
61947: PPUSH
61948: CALL_OW 264
61952: PUSH
61953: LD_VAR 0 10
61957: IN
61958: NOT
61959: AND
61960: IFFALSE 61999
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61962: LD_VAR 0 4
61966: PPUSH
61967: LD_VAR 0 7
61971: PUSH
61972: LD_INT 1
61974: ARRAY
61975: PUSH
61976: LD_INT 1
61978: ARRAY
61979: PPUSH
61980: LD_VAR 0 7
61984: PUSH
61985: LD_INT 1
61987: ARRAY
61988: PUSH
61989: LD_INT 2
61991: ARRAY
61992: PPUSH
61993: CALL_OW 116
61997: GO 62288
// if path > tag then
61999: LD_VAR 0 2
62003: PUSH
62004: LD_VAR 0 9
62008: GREATER
62009: IFFALSE 62217
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
62011: LD_ADDR_VAR 0 6
62015: PUSH
62016: LD_VAR 0 5
62020: PPUSH
62021: LD_INT 91
62023: PUSH
62024: LD_VAR 0 4
62028: PUSH
62029: LD_INT 8
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: LIST
62036: PPUSH
62037: CALL_OW 72
62041: ST_TO_ADDR
// if nearEnemy then
62042: LD_VAR 0 6
62046: IFFALSE 62115
// begin if GetWeapon ( i ) = ru_time_lapser then
62048: LD_VAR 0 4
62052: PPUSH
62053: CALL_OW 264
62057: PUSH
62058: LD_INT 49
62060: EQUAL
62061: IFFALSE 62089
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
62063: LD_VAR 0 4
62067: PPUSH
62068: LD_VAR 0 6
62072: PPUSH
62073: LD_VAR 0 4
62077: PPUSH
62078: CALL_OW 74
62082: PPUSH
62083: CALL_OW 112
62087: GO 62113
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
62089: LD_VAR 0 4
62093: PPUSH
62094: LD_VAR 0 6
62098: PPUSH
62099: LD_VAR 0 4
62103: PPUSH
62104: CALL_OW 74
62108: PPUSH
62109: CALL_OW 115
// end else
62113: GO 62215
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
62115: LD_VAR 0 4
62119: PPUSH
62120: LD_VAR 0 2
62124: PUSH
62125: LD_VAR 0 9
62129: ARRAY
62130: PUSH
62131: LD_INT 1
62133: ARRAY
62134: PPUSH
62135: LD_VAR 0 2
62139: PUSH
62140: LD_VAR 0 9
62144: ARRAY
62145: PUSH
62146: LD_INT 2
62148: ARRAY
62149: PPUSH
62150: CALL_OW 297
62154: PUSH
62155: LD_INT 6
62157: GREATER
62158: IFFALSE 62201
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62160: LD_VAR 0 4
62164: PPUSH
62165: LD_VAR 0 2
62169: PUSH
62170: LD_VAR 0 9
62174: ARRAY
62175: PUSH
62176: LD_INT 1
62178: ARRAY
62179: PPUSH
62180: LD_VAR 0 2
62184: PUSH
62185: LD_VAR 0 9
62189: ARRAY
62190: PUSH
62191: LD_INT 2
62193: ARRAY
62194: PPUSH
62195: CALL_OW 114
62199: GO 62215
// SetTag ( i , tag ) ;
62201: LD_VAR 0 4
62205: PPUSH
62206: LD_VAR 0 9
62210: PPUSH
62211: CALL_OW 109
// end else
62215: GO 62288
// if enemy then
62217: LD_VAR 0 5
62221: IFFALSE 62288
// begin if GetWeapon ( i ) = ru_time_lapser then
62223: LD_VAR 0 4
62227: PPUSH
62228: CALL_OW 264
62232: PUSH
62233: LD_INT 49
62235: EQUAL
62236: IFFALSE 62264
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
62238: LD_VAR 0 4
62242: PPUSH
62243: LD_VAR 0 5
62247: PPUSH
62248: LD_VAR 0 4
62252: PPUSH
62253: CALL_OW 74
62257: PPUSH
62258: CALL_OW 112
62262: GO 62288
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62264: LD_VAR 0 4
62268: PPUSH
62269: LD_VAR 0 5
62273: PPUSH
62274: LD_VAR 0 4
62278: PPUSH
62279: CALL_OW 74
62283: PPUSH
62284: CALL_OW 115
// end ; end ;
62288: GO 61868
62290: POP
62291: POP
// end ;
62292: LD_VAR 0 3
62296: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62297: LD_INT 0
62299: PPUSH
62300: PPUSH
62301: PPUSH
// if not unit or IsInUnit ( unit ) then
62302: LD_VAR 0 1
62306: NOT
62307: PUSH
62308: LD_VAR 0 1
62312: PPUSH
62313: CALL_OW 310
62317: OR
62318: IFFALSE 62322
// exit ;
62320: GO 62413
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
62322: LD_ADDR_VAR 0 4
62326: PUSH
62327: LD_VAR 0 1
62331: PPUSH
62332: CALL_OW 250
62336: PPUSH
62337: LD_VAR 0 2
62341: PPUSH
62342: LD_INT 1
62344: PPUSH
62345: CALL_OW 272
62349: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
62350: LD_ADDR_VAR 0 5
62354: PUSH
62355: LD_VAR 0 1
62359: PPUSH
62360: CALL_OW 251
62364: PPUSH
62365: LD_VAR 0 2
62369: PPUSH
62370: LD_INT 1
62372: PPUSH
62373: CALL_OW 273
62377: ST_TO_ADDR
// if ValidHex ( x , y ) then
62378: LD_VAR 0 4
62382: PPUSH
62383: LD_VAR 0 5
62387: PPUSH
62388: CALL_OW 488
62392: IFFALSE 62413
// ComTurnXY ( unit , x , y ) ;
62394: LD_VAR 0 1
62398: PPUSH
62399: LD_VAR 0 4
62403: PPUSH
62404: LD_VAR 0 5
62408: PPUSH
62409: CALL_OW 118
// end ;
62413: LD_VAR 0 3
62417: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62418: LD_INT 0
62420: PPUSH
62421: PPUSH
// result := false ;
62422: LD_ADDR_VAR 0 3
62426: PUSH
62427: LD_INT 0
62429: ST_TO_ADDR
// if not units then
62430: LD_VAR 0 2
62434: NOT
62435: IFFALSE 62439
// exit ;
62437: GO 62484
// for i in units do
62439: LD_ADDR_VAR 0 4
62443: PUSH
62444: LD_VAR 0 2
62448: PUSH
62449: FOR_IN
62450: IFFALSE 62482
// if See ( side , i ) then
62452: LD_VAR 0 1
62456: PPUSH
62457: LD_VAR 0 4
62461: PPUSH
62462: CALL_OW 292
62466: IFFALSE 62480
// begin result := true ;
62468: LD_ADDR_VAR 0 3
62472: PUSH
62473: LD_INT 1
62475: ST_TO_ADDR
// exit ;
62476: POP
62477: POP
62478: GO 62484
// end ;
62480: GO 62449
62482: POP
62483: POP
// end ;
62484: LD_VAR 0 3
62488: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62489: LD_INT 0
62491: PPUSH
62492: PPUSH
62493: PPUSH
62494: PPUSH
// if not unit or not points then
62495: LD_VAR 0 1
62499: NOT
62500: PUSH
62501: LD_VAR 0 2
62505: NOT
62506: OR
62507: IFFALSE 62511
// exit ;
62509: GO 62601
// dist := 99999 ;
62511: LD_ADDR_VAR 0 5
62515: PUSH
62516: LD_INT 99999
62518: ST_TO_ADDR
// for i in points do
62519: LD_ADDR_VAR 0 4
62523: PUSH
62524: LD_VAR 0 2
62528: PUSH
62529: FOR_IN
62530: IFFALSE 62599
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62532: LD_ADDR_VAR 0 6
62536: PUSH
62537: LD_VAR 0 1
62541: PPUSH
62542: LD_VAR 0 4
62546: PUSH
62547: LD_INT 1
62549: ARRAY
62550: PPUSH
62551: LD_VAR 0 4
62555: PUSH
62556: LD_INT 2
62558: ARRAY
62559: PPUSH
62560: CALL_OW 297
62564: ST_TO_ADDR
// if tmpDist < dist then
62565: LD_VAR 0 6
62569: PUSH
62570: LD_VAR 0 5
62574: LESS
62575: IFFALSE 62597
// begin result := i ;
62577: LD_ADDR_VAR 0 3
62581: PUSH
62582: LD_VAR 0 4
62586: ST_TO_ADDR
// dist := tmpDist ;
62587: LD_ADDR_VAR 0 5
62591: PUSH
62592: LD_VAR 0 6
62596: ST_TO_ADDR
// end ; end ;
62597: GO 62529
62599: POP
62600: POP
// end ;
62601: LD_VAR 0 3
62605: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
62606: LD_INT 0
62608: PPUSH
// uc_side := side ;
62609: LD_ADDR_OWVAR 20
62613: PUSH
62614: LD_VAR 0 1
62618: ST_TO_ADDR
// uc_nation := 3 ;
62619: LD_ADDR_OWVAR 21
62623: PUSH
62624: LD_INT 3
62626: ST_TO_ADDR
// vc_chassis := 25 ;
62627: LD_ADDR_OWVAR 37
62631: PUSH
62632: LD_INT 25
62634: ST_TO_ADDR
// vc_engine := engine_siberite ;
62635: LD_ADDR_OWVAR 39
62639: PUSH
62640: LD_INT 3
62642: ST_TO_ADDR
// vc_control := control_computer ;
62643: LD_ADDR_OWVAR 38
62647: PUSH
62648: LD_INT 3
62650: ST_TO_ADDR
// vc_weapon := 59 ;
62651: LD_ADDR_OWVAR 40
62655: PUSH
62656: LD_INT 59
62658: ST_TO_ADDR
// result := CreateVehicle ;
62659: LD_ADDR_VAR 0 5
62663: PUSH
62664: CALL_OW 45
62668: ST_TO_ADDR
// SetDir ( result , d ) ;
62669: LD_VAR 0 5
62673: PPUSH
62674: LD_VAR 0 4
62678: PPUSH
62679: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
62683: LD_VAR 0 5
62687: PPUSH
62688: LD_VAR 0 2
62692: PPUSH
62693: LD_VAR 0 3
62697: PPUSH
62698: LD_INT 0
62700: PPUSH
62701: CALL_OW 48
// end ;
62705: LD_VAR 0 5
62709: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
62710: LD_INT 0
62712: PPUSH
62713: PPUSH
62714: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
62715: LD_ADDR_VAR 0 2
62719: PUSH
62720: LD_INT 0
62722: PUSH
62723: LD_INT 0
62725: PUSH
62726: LD_INT 0
62728: PUSH
62729: LD_INT 0
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
62738: LD_VAR 0 1
62742: NOT
62743: PUSH
62744: LD_VAR 0 1
62748: PPUSH
62749: CALL_OW 264
62753: PUSH
62754: LD_INT 12
62756: PUSH
62757: LD_INT 51
62759: PUSH
62760: LD_INT 32
62762: PUSH
62763: LD_INT 89
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: IN
62772: NOT
62773: OR
62774: IFFALSE 62778
// exit ;
62776: GO 62876
// for i := 1 to 3 do
62778: LD_ADDR_VAR 0 3
62782: PUSH
62783: DOUBLE
62784: LD_INT 1
62786: DEC
62787: ST_TO_ADDR
62788: LD_INT 3
62790: PUSH
62791: FOR_TO
62792: IFFALSE 62874
// begin tmp := GetCargo ( cargo , i ) ;
62794: LD_ADDR_VAR 0 4
62798: PUSH
62799: LD_VAR 0 1
62803: PPUSH
62804: LD_VAR 0 3
62808: PPUSH
62809: CALL_OW 289
62813: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
62814: LD_ADDR_VAR 0 2
62818: PUSH
62819: LD_VAR 0 2
62823: PPUSH
62824: LD_VAR 0 3
62828: PPUSH
62829: LD_VAR 0 4
62833: PPUSH
62834: CALL_OW 1
62838: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
62839: LD_ADDR_VAR 0 2
62843: PUSH
62844: LD_VAR 0 2
62848: PPUSH
62849: LD_INT 4
62851: PPUSH
62852: LD_VAR 0 2
62856: PUSH
62857: LD_INT 4
62859: ARRAY
62860: PUSH
62861: LD_VAR 0 4
62865: PLUS
62866: PPUSH
62867: CALL_OW 1
62871: ST_TO_ADDR
// end ;
62872: GO 62791
62874: POP
62875: POP
// end ;
62876: LD_VAR 0 2
62880: RET
// export function Length ( array ) ; begin
62881: LD_INT 0
62883: PPUSH
// result := array + 0 ;
62884: LD_ADDR_VAR 0 2
62888: PUSH
62889: LD_VAR 0 1
62893: PUSH
62894: LD_INT 0
62896: PLUS
62897: ST_TO_ADDR
// end ;
62898: LD_VAR 0 2
62902: RET
// export function PrepareArray ( array ) ; begin
62903: LD_INT 0
62905: PPUSH
// result := array diff 0 ;
62906: LD_ADDR_VAR 0 2
62910: PUSH
62911: LD_VAR 0 1
62915: PUSH
62916: LD_INT 0
62918: DIFF
62919: ST_TO_ADDR
// if not result [ 1 ] then
62920: LD_VAR 0 2
62924: PUSH
62925: LD_INT 1
62927: ARRAY
62928: NOT
62929: IFFALSE 62949
// result := Delete ( result , 1 ) ;
62931: LD_ADDR_VAR 0 2
62935: PUSH
62936: LD_VAR 0 2
62940: PPUSH
62941: LD_INT 1
62943: PPUSH
62944: CALL_OW 3
62948: ST_TO_ADDR
// end ;
62949: LD_VAR 0 2
62953: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
62954: LD_INT 0
62956: PPUSH
62957: PPUSH
62958: PPUSH
62959: PPUSH
// sibRocketRange := 25 ;
62960: LD_ADDR_VAR 0 6
62964: PUSH
62965: LD_INT 25
62967: ST_TO_ADDR
// result := false ;
62968: LD_ADDR_VAR 0 4
62972: PUSH
62973: LD_INT 0
62975: ST_TO_ADDR
// for i := 0 to 5 do
62976: LD_ADDR_VAR 0 5
62980: PUSH
62981: DOUBLE
62982: LD_INT 0
62984: DEC
62985: ST_TO_ADDR
62986: LD_INT 5
62988: PUSH
62989: FOR_TO
62990: IFFALSE 63057
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
62992: LD_VAR 0 1
62996: PPUSH
62997: LD_VAR 0 5
63001: PPUSH
63002: LD_VAR 0 6
63006: PPUSH
63007: CALL_OW 272
63011: PPUSH
63012: LD_VAR 0 2
63016: PPUSH
63017: LD_VAR 0 5
63021: PPUSH
63022: LD_VAR 0 6
63026: PPUSH
63027: CALL_OW 273
63031: PPUSH
63032: LD_VAR 0 3
63036: PPUSH
63037: CALL_OW 309
63041: IFFALSE 63055
// begin result := true ;
63043: LD_ADDR_VAR 0 4
63047: PUSH
63048: LD_INT 1
63050: ST_TO_ADDR
// exit ;
63051: POP
63052: POP
63053: GO 63059
// end ;
63055: GO 62989
63057: POP
63058: POP
// end ;
63059: LD_VAR 0 4
63063: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
63064: LD_INT 0
63066: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
63067: LD_VAR 0 1
63071: PPUSH
63072: LD_VAR 0 2
63076: PPUSH
63077: LD_INT 0
63079: PPUSH
63080: LD_INT 0
63082: PPUSH
63083: LD_INT 1
63085: PPUSH
63086: LD_INT 0
63088: PPUSH
63089: CALL_OW 587
// end ;
63093: LD_VAR 0 3
63097: RET
