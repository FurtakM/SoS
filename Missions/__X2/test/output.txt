// export mineCounter ; every 0 0$1 do var i , tmp , task ;
   0: GO 2
   2: DISABLE
   3: LD_INT 0
   5: PPUSH
   6: PPUSH
   7: PPUSH
// begin mineCounter := 5 ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 5
  15: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
  16: LD_INT 35
  18: PPUSH
  19: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , nation_arabian ] , [ f_class , class_soldier ] ] ) ;
  23: LD_ADDR_VAR 0 2
  27: PUSH
  28: LD_INT 22
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: EMPTY
  35: LIST
  36: LIST
  37: PUSH
  38: LD_INT 23
  40: PUSH
  41: LD_INT 2
  43: PUSH
  44: EMPTY
  45: LIST
  46: LIST
  47: PUSH
  48: LD_INT 25
  50: PUSH
  51: LD_INT 1
  53: PUSH
  54: EMPTY
  55: LIST
  56: LIST
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: PPUSH
  63: CALL_OW 69
  67: ST_TO_ADDR
// if not tmp then
  68: LD_VAR 0 2
  72: NOT
  73: IFFALSE 77
// continue ;
  75: GO 16
// for i in tmp do
  77: LD_ADDR_VAR 0 1
  81: PUSH
  82: LD_VAR 0 2
  86: PUSH
  87: FOR_IN
  88: IFFALSE 277
// begin task := GetTaskList ( i ) ;
  90: LD_ADDR_VAR 0 3
  94: PUSH
  95: LD_VAR 0 1
  99: PPUSH
 100: CALL_OW 437
 104: ST_TO_ADDR
// if not task then
 105: LD_VAR 0 3
 109: NOT
 110: IFFALSE 126
// begin SetTag ( i , 0 ) ;
 112: LD_VAR 0 1
 116: PPUSH
 117: LD_INT 0
 119: PPUSH
 120: CALL_OW 109
// continue ;
 124: GO 87
// end ; if GetTag ( i ) = 1 and task [ 1 ] [ 1 ] <> p then
 126: LD_VAR 0 1
 130: PPUSH
 131: CALL_OW 110
 135: PUSH
 136: LD_INT 1
 138: EQUAL
 139: PUSH
 140: LD_VAR 0 3
 144: PUSH
 145: LD_INT 1
 147: ARRAY
 148: PUSH
 149: LD_INT 1
 151: ARRAY
 152: PUSH
 153: LD_STRING p
 155: NONEQUAL
 156: AND
 157: IFFALSE 173
// begin SetTag ( i , 0 ) ;
 159: LD_VAR 0 1
 163: PPUSH
 164: LD_INT 0
 166: PPUSH
 167: CALL_OW 109
// continue ;
 171: GO 87
// end ; if GetTag ( i ) <> 1 and task [ 1 ] [ 1 ] = p then
 173: LD_VAR 0 1
 177: PPUSH
 178: CALL_OW 110
 182: PUSH
 183: LD_INT 1
 185: NONEQUAL
 186: PUSH
 187: LD_VAR 0 3
 191: PUSH
 192: LD_INT 1
 194: ARRAY
 195: PUSH
 196: LD_INT 1
 198: ARRAY
 199: PUSH
 200: LD_STRING p
 202: EQUAL
 203: AND
 204: IFFALSE 275
// begin SetTag ( i , 1 ) ;
 206: LD_VAR 0 1
 210: PPUSH
 211: LD_INT 1
 213: PPUSH
 214: CALL_OW 109
// RaiseSailEventCustom ( 1 , i , task [ 1 ] [ 2 ] , task [ 1 ] [ 3 ] , task [ 1 ] [ 4 ] , 0 , 0 ) ;
 218: LD_INT 1
 220: PPUSH
 221: LD_VAR 0 1
 225: PPUSH
 226: LD_VAR 0 3
 230: PUSH
 231: LD_INT 1
 233: ARRAY
 234: PUSH
 235: LD_INT 2
 237: ARRAY
 238: PPUSH
 239: LD_VAR 0 3
 243: PUSH
 244: LD_INT 1
 246: ARRAY
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PPUSH
 252: LD_VAR 0 3
 256: PUSH
 257: LD_INT 1
 259: ARRAY
 260: PUSH
 261: LD_INT 4
 263: ARRAY
 264: PPUSH
 265: LD_INT 0
 267: PPUSH
 268: LD_INT 0
 270: PPUSH
 271: CALL_OW 595
// end ; end ;
 275: GO 87
 277: POP
 278: POP
// until mineCounter = 0 ;
 279: LD_EXP 1
 283: PUSH
 284: LD_INT 0
 286: EQUAL
 287: IFFALSE 16
// end ;
 289: PPOPN 3
 291: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = 1 then
 292: LD_VAR 0 1
 296: PUSH
 297: LD_INT 1
 299: EQUAL
 300: IFFALSE 388
// begin repeat wait ( 0 0$1 ) ;
 302: LD_INT 35
 304: PPUSH
 305: CALL_OW 67
// if MineAtPos ( p2 , p3 ) or MineAtRange ( GetX ( p4 ) , GetY ( p4 ) ) then
 309: LD_VAR 0 3
 313: PPUSH
 314: LD_VAR 0 4
 318: PPUSH
 319: CALL_OW 458
 323: PUSH
 324: LD_VAR 0 5
 328: PPUSH
 329: CALL_OW 250
 333: PPUSH
 334: LD_VAR 0 5
 338: PPUSH
 339: CALL_OW 251
 343: PPUSH
 344: CALL 391 0 2
 348: OR
 349: IFFALSE 353
// break ;
 351: GO 374
// if GetTag ( p1 ) <> 1 then
 353: LD_VAR 0 2
 357: PPUSH
 358: CALL_OW 110
 362: PUSH
 363: LD_INT 1
 365: NONEQUAL
 366: IFFALSE 370
// exit ;
 368: GO 388
// until false ;
 370: LD_INT 0
 372: IFFALSE 302
// mineCounter := mineCounter - 1 ;
 374: LD_ADDR_EXP 1
 378: PUSH
 379: LD_EXP 1
 383: PUSH
 384: LD_INT 1
 386: MINUS
 387: ST_TO_ADDR
// end ; end ;
 388: PPOPN 7
 390: END
// export function MineAtRange ( x , y ) ; var _x , _y , _d ; begin
 391: LD_INT 0
 393: PPUSH
 394: PPUSH
 395: PPUSH
 396: PPUSH
// for _d := 0 to 5 do
 397: LD_ADDR_VAR 0 6
 401: PUSH
 402: DOUBLE
 403: LD_INT 0
 405: DEC
 406: ST_TO_ADDR
 407: LD_INT 5
 409: PUSH
 410: FOR_TO
 411: IFFALSE 519
// for _x := - 3 to 3 do
 413: LD_ADDR_VAR 0 4
 417: PUSH
 418: DOUBLE
 419: LD_INT 3
 421: NEG
 422: DEC
 423: ST_TO_ADDR
 424: LD_INT 3
 426: PUSH
 427: FOR_TO
 428: IFFALSE 515
// for _y := - 3 to 3 do
 430: LD_ADDR_VAR 0 5
 434: PUSH
 435: DOUBLE
 436: LD_INT 3
 438: NEG
 439: DEC
 440: ST_TO_ADDR
 441: LD_INT 3
 443: PUSH
 444: FOR_TO
 445: IFFALSE 511
// if MineAtPos ( ShiftX ( x , _d , _x ) , ShiftY ( y , _d , _y ) ) then
 447: LD_VAR 0 1
 451: PPUSH
 452: LD_VAR 0 6
 456: PPUSH
 457: LD_VAR 0 4
 461: PPUSH
 462: CALL_OW 272
 466: PPUSH
 467: LD_VAR 0 2
 471: PPUSH
 472: LD_VAR 0 6
 476: PPUSH
 477: LD_VAR 0 5
 481: PPUSH
 482: CALL_OW 273
 486: PPUSH
 487: CALL_OW 458
 491: IFFALSE 509
// begin result := true ;
 493: LD_ADDR_VAR 0 3
 497: PUSH
 498: LD_INT 1
 500: ST_TO_ADDR
// exit ;
 501: POP
 502: POP
 503: POP
 504: POP
 505: POP
 506: POP
 507: GO 521
// end ;
 509: GO 444
 511: POP
 512: POP
 513: GO 427
 515: POP
 516: POP
 517: GO 410
 519: POP
 520: POP
// end ;
 521: LD_VAR 0 3
 525: RET
// every 0 0$2 do var un , x , y , _r , _x , _y , _d , __x , __y ;
 526: GO 528
 528: DISABLE
 529: LD_INT 0
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
 536: PPUSH
 537: PPUSH
 538: PPUSH
 539: PPUSH
// begin x := 23 ;
 540: LD_ADDR_VAR 0 2
 544: PUSH
 545: LD_INT 23
 547: ST_TO_ADDR
// y := 19 ;
 548: LD_ADDR_VAR 0 3
 552: PUSH
 553: LD_INT 19
 555: ST_TO_ADDR
// uc_side := 8 ;
 556: LD_ADDR_OWVAR 20
 560: PUSH
 561: LD_INT 8
 563: ST_TO_ADDR
// uc_nation := 1 ;
 564: LD_ADDR_OWVAR 21
 568: PUSH
 569: LD_INT 1
 571: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
 572: LD_INT 0
 574: PPUSH
 575: LD_INT 1
 577: PPUSH
 578: CALL_OW 381
// for _r := 1 to 6 do
 582: LD_ADDR_VAR 0 4
 586: PUSH
 587: DOUBLE
 588: LD_INT 1
 590: DEC
 591: ST_TO_ADDR
 592: LD_INT 6
 594: PUSH
 595: FOR_TO
 596: IFFALSE 748
// begin for _x := - _r to _r do
 598: LD_ADDR_VAR 0 5
 602: PUSH
 603: DOUBLE
 604: LD_VAR 0 4
 608: NEG
 609: DEC
 610: ST_TO_ADDR
 611: LD_VAR 0 4
 615: PUSH
 616: FOR_TO
 617: IFFALSE 744
// for _y := - _r to _r do
 619: LD_ADDR_VAR 0 6
 623: PUSH
 624: DOUBLE
 625: LD_VAR 0 4
 629: NEG
 630: DEC
 631: ST_TO_ADDR
 632: LD_VAR 0 4
 636: PUSH
 637: FOR_TO
 638: IFFALSE 740
// begin __x := x + _x ;
 640: LD_ADDR_VAR 0 8
 644: PUSH
 645: LD_VAR 0 2
 649: PUSH
 650: LD_VAR 0 5
 654: PLUS
 655: ST_TO_ADDR
// __y := y + _y ;
 656: LD_ADDR_VAR 0 9
 660: PUSH
 661: LD_VAR 0 3
 665: PUSH
 666: LD_VAR 0 6
 670: PLUS
 671: ST_TO_ADDR
// if HexInfo ( __x , __y ) then
 672: LD_VAR 0 8
 676: PPUSH
 677: LD_VAR 0 9
 681: PPUSH
 682: CALL_OW 428
 686: IFFALSE 690
// continue ;
 688: GO 637
// wait ( 1 ) ;
 690: LD_INT 1
 692: PPUSH
 693: CALL_OW 67
// un := CreateHuman ;
 697: LD_ADDR_VAR 0 1
 701: PUSH
 702: CALL_OW 44
 706: ST_TO_ADDR
// PlaceUnitXY ( un , __x , __y , false ) ;
 707: LD_VAR 0 1
 711: PPUSH
 712: LD_VAR 0 8
 716: PPUSH
 717: LD_VAR 0 9
 721: PPUSH
 722: LD_INT 0
 724: PPUSH
 725: CALL_OW 48
// ComHold ( un ) ;
 729: LD_VAR 0 1
 733: PPUSH
 734: CALL_OW 140
// end ;
 738: GO 637
 740: POP
 741: POP
 742: GO 616
 744: POP
 745: POP
// end ;
 746: GO 595
 748: POP
 749: POP
// end ;
 750: PPOPN 9
 752: END
// export function PrepareAmericanConvoy ( soldiersAmount , engsAmount , mechsAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road , sols , engs , mechs , scis , enemySkillLevel , amConvoyTroops ; begin
 753: LD_INT 0
 755: PPUSH
 756: PPUSH
 757: PPUSH
 758: PPUSH
 759: PPUSH
 760: PPUSH
 761: PPUSH
 762: PPUSH
 763: PPUSH
 764: PPUSH
 765: PPUSH
// enemySkilllevel := 2 ;
 766: LD_ADDR_VAR 0 16
 770: PUSH
 771: LD_INT 2
 773: ST_TO_ADDR
// uc_side := 1 ;
 774: LD_ADDR_OWVAR 20
 778: PUSH
 779: LD_INT 1
 781: ST_TO_ADDR
// uc_nation := 1 ;
 782: LD_ADDR_OWVAR 21
 786: PUSH
 787: LD_INT 1
 789: ST_TO_ADDR
// hc_name :=  ;
 790: LD_ADDR_OWVAR 26
 794: PUSH
 795: LD_STRING 
 797: ST_TO_ADDR
// hc_gallery :=  ;
 798: LD_ADDR_OWVAR 33
 802: PUSH
 803: LD_STRING 
 805: ST_TO_ADDR
// for i := 1 to soldiersAmount do
 806: LD_ADDR_VAR 0 8
 810: PUSH
 811: DOUBLE
 812: LD_INT 1
 814: DEC
 815: ST_TO_ADDR
 816: LD_VAR 0 1
 820: PUSH
 821: FOR_TO
 822: IFFALSE 897
// begin PrepareSoldier ( false , enemySkillLevel ) ;
 824: LD_INT 0
 826: PPUSH
 827: LD_VAR 0 16
 831: PPUSH
 832: CALL_OW 381
// un = CreateHuman ;
 836: LD_ADDR_VAR 0 9
 840: PUSH
 841: CALL_OW 44
 845: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 846: LD_ADDR_VAR 0 17
 850: PUSH
 851: LD_VAR 0 17
 855: PUSH
 856: LD_VAR 0 9
 860: ADD
 861: ST_TO_ADDR
// sols := sols ^ un ;
 862: LD_ADDR_VAR 0 12
 866: PUSH
 867: LD_VAR 0 12
 871: PUSH
 872: LD_VAR 0 9
 876: ADD
 877: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 878: LD_VAR 0 9
 882: PPUSH
 883: LD_VAR 0 6
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 49
// end ;
 895: GO 821
 897: POP
 898: POP
// for i := 1 to engsAmount do
 899: LD_ADDR_VAR 0 8
 903: PUSH
 904: DOUBLE
 905: LD_INT 1
 907: DEC
 908: ST_TO_ADDR
 909: LD_VAR 0 2
 913: PUSH
 914: FOR_TO
 915: IFFALSE 990
// begin PrepareEngineer ( false , enemySkillLevel ) ;
 917: LD_INT 0
 919: PPUSH
 920: LD_VAR 0 16
 924: PPUSH
 925: CALL_OW 382
// un = CreateHuman ;
 929: LD_ADDR_VAR 0 9
 933: PUSH
 934: CALL_OW 44
 938: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 939: LD_ADDR_VAR 0 17
 943: PUSH
 944: LD_VAR 0 17
 948: PUSH
 949: LD_VAR 0 9
 953: ADD
 954: ST_TO_ADDR
// engs := engs ^ un ;
 955: LD_ADDR_VAR 0 13
 959: PUSH
 960: LD_VAR 0 13
 964: PUSH
 965: LD_VAR 0 9
 969: ADD
 970: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 971: LD_VAR 0 9
 975: PPUSH
 976: LD_VAR 0 6
 980: PPUSH
 981: LD_INT 0
 983: PPUSH
 984: CALL_OW 49
// end ;
 988: GO 914
 990: POP
 991: POP
// for i := 1 to mechsAmount do
 992: LD_ADDR_VAR 0 8
 996: PUSH
 997: DOUBLE
 998: LD_INT 1
1000: DEC
1001: ST_TO_ADDR
1002: LD_VAR 0 3
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1083
// begin PrepareEngineer ( false , enemySkillLevel ) ;
1010: LD_INT 0
1012: PPUSH
1013: LD_VAR 0 16
1017: PPUSH
1018: CALL_OW 382
// un = CreateHuman ;
1022: LD_ADDR_VAR 0 9
1026: PUSH
1027: CALL_OW 44
1031: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
1032: LD_ADDR_VAR 0 17
1036: PUSH
1037: LD_VAR 0 17
1041: PUSH
1042: LD_VAR 0 9
1046: ADD
1047: ST_TO_ADDR
// engs := engs ^ un ;
1048: LD_ADDR_VAR 0 13
1052: PUSH
1053: LD_VAR 0 13
1057: PUSH
1058: LD_VAR 0 9
1062: ADD
1063: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1064: LD_VAR 0 9
1068: PPUSH
1069: LD_VAR 0 6
1073: PPUSH
1074: LD_INT 0
1076: PPUSH
1077: CALL_OW 49
// end ;
1081: GO 1007
1083: POP
1084: POP
// for i := 1 to scientistsAmount do
1085: LD_ADDR_VAR 0 8
1089: PUSH
1090: DOUBLE
1091: LD_INT 1
1093: DEC
1094: ST_TO_ADDR
1095: LD_VAR 0 4
1099: PUSH
1100: FOR_TO
1101: IFFALSE 1176
// begin PrepareMechanic ( false , enemySkillLevel ) ;
1103: LD_INT 0
1105: PPUSH
1106: LD_VAR 0 16
1110: PPUSH
1111: CALL_OW 383
// un = CreateHuman ;
1115: LD_ADDR_VAR 0 9
1119: PUSH
1120: CALL_OW 44
1124: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
1125: LD_ADDR_VAR 0 17
1129: PUSH
1130: LD_VAR 0 17
1134: PUSH
1135: LD_VAR 0 9
1139: ADD
1140: ST_TO_ADDR
// mechs := mechs ^ un ;
1141: LD_ADDR_VAR 0 14
1145: PUSH
1146: LD_VAR 0 14
1150: PUSH
1151: LD_VAR 0 9
1155: ADD
1156: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1157: LD_VAR 0 9
1161: PPUSH
1162: LD_VAR 0 6
1166: PPUSH
1167: LD_INT 0
1169: PPUSH
1170: CALL_OW 49
// end ;
1174: GO 1100
1176: POP
1177: POP
// for i := 1 to vehiclesAmount do
1178: LD_ADDR_VAR 0 8
1182: PUSH
1183: DOUBLE
1184: LD_INT 1
1186: DEC
1187: ST_TO_ADDR
1188: LD_VAR 0 5
1192: PUSH
1193: FOR_TO
1194: IFFALSE 1360
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
1196: LD_ADDR_OWVAR 40
1200: PUSH
1201: LD_INT 2
1203: PUSH
1204: LD_INT 4
1206: PUSH
1207: LD_INT 3
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: PUSH
1215: LD_INT 1
1217: PPUSH
1218: LD_INT 3
1220: PPUSH
1221: CALL_OW 12
1225: ARRAY
1226: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1227: LD_ADDR_OWVAR 37
1231: PUSH
1232: LD_INT 3
1234: ST_TO_ADDR
// vc_control = control_manual ;
1235: LD_ADDR_OWVAR 38
1239: PUSH
1240: LD_INT 1
1242: ST_TO_ADDR
// vc_engine = engine_combustion ;
1243: LD_ADDR_OWVAR 39
1247: PUSH
1248: LD_INT 1
1250: ST_TO_ADDR
// veh = CreateVehicle ;
1251: LD_ADDR_VAR 0 10
1255: PUSH
1256: CALL_OW 45
1260: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ veh ;
1261: LD_ADDR_VAR 0 17
1265: PUSH
1266: LD_VAR 0 17
1270: PUSH
1271: LD_VAR 0 10
1275: ADD
1276: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
1277: LD_VAR 0 10
1281: PPUSH
1282: LD_VAR 0 6
1286: PPUSH
1287: LD_INT 0
1289: PPUSH
1290: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
1294: LD_INT 0
1296: PPUSH
1297: LD_VAR 0 16
1301: PPUSH
1302: CALL_OW 383
// un = CreateHuman ;
1306: LD_ADDR_VAR 0 9
1310: PUSH
1311: CALL_OW 44
1315: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ un ;
1316: LD_ADDR_VAR 0 17
1320: PUSH
1321: LD_VAR 0 17
1325: PUSH
1326: LD_VAR 0 9
1330: ADD
1331: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1332: LD_VAR 0 9
1336: PPUSH
1337: LD_VAR 0 10
1341: PPUSH
1342: CALL_OW 52
// SetFuel ( veh , 100 ) ;
1346: LD_VAR 0 10
1350: PPUSH
1351: LD_INT 100
1353: PPUSH
1354: CALL_OW 240
// end ;
1358: GO 1193
1360: POP
1361: POP
// end ; end_of_file
1362: LD_VAR 0 7
1366: RET
// export globalGameSaveCounter ; every 0 0$1 do
1367: GO 1369
1369: DISABLE
// begin enable ;
1370: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1371: LD_STRING updateTimer(
1373: PUSH
1374: LD_OWVAR 1
1378: STR
1379: PUSH
1380: LD_STRING );
1382: STR
1383: PPUSH
1384: CALL_OW 559
// end ;
1388: END
// every 0 0$1 do
1389: GO 1391
1391: DISABLE
// begin globalGameSaveCounter := 0 ;
1392: LD_ADDR_EXP 2
1396: PUSH
1397: LD_INT 0
1399: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
1400: LD_STRING setGameSaveCounter(0)
1402: PPUSH
1403: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
1407: LD_STRING initStreamRollete();
1409: PPUSH
1410: CALL_OW 559
// InitStreamMode ;
1414: CALL 2740 0 0
// DefineStreamItems ( false ) ;
1418: LD_INT 0
1420: PPUSH
1421: CALL 3204 0 1
// end ;
1425: END
// export function SOS_MapStart ( ) ; begin
1426: LD_INT 0
1428: PPUSH
// if streamModeActive then
1429: LD_EXP 3
1433: IFFALSE 1442
// DefineStreamItems ( true ) ;
1435: LD_INT 1
1437: PPUSH
1438: CALL 3204 0 1
// UpdateLuaVariables ( ) ;
1442: CALL 1459 0 0
// UpdateFactoryWaypoints ( ) ;
1446: CALL 16073 0 0
// UpdateWarehouseGatheringPoints ( ) ;
1450: CALL 16330 0 0
// end ;
1454: LD_VAR 0 1
1458: RET
// function UpdateLuaVariables ( ) ; begin
1459: LD_INT 0
1461: PPUSH
// if globalGameSaveCounter then
1462: LD_EXP 2
1466: IFFALSE 1500
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
1468: LD_ADDR_EXP 2
1472: PUSH
1473: LD_EXP 2
1477: PPUSH
1478: CALL 60362 0 1
1482: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1483: LD_STRING setGameSaveCounter(
1485: PUSH
1486: LD_EXP 2
1490: STR
1491: PUSH
1492: LD_STRING )
1494: STR
1495: PPUSH
1496: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
1500: LD_STRING setGameDifficulty(
1502: PUSH
1503: LD_OWVAR 67
1507: STR
1508: PUSH
1509: LD_STRING )
1511: STR
1512: PPUSH
1513: CALL_OW 559
// end ;
1517: LD_VAR 0 1
1521: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
1522: LD_INT 0
1524: PPUSH
// if p2 = stream_mode then
1525: LD_VAR 0 2
1529: PUSH
1530: LD_INT 100
1532: EQUAL
1533: IFFALSE 2536
// begin if not StreamModeActive then
1535: LD_EXP 3
1539: NOT
1540: IFFALSE 1550
// StreamModeActive := true ;
1542: LD_ADDR_EXP 3
1546: PUSH
1547: LD_INT 1
1549: ST_TO_ADDR
// if p3 = 0 then
1550: LD_VAR 0 3
1554: PUSH
1555: LD_INT 0
1557: EQUAL
1558: IFFALSE 1564
// InitStreamMode ;
1560: CALL 2740 0 0
// if p3 = 1 then
1564: LD_VAR 0 3
1568: PUSH
1569: LD_INT 1
1571: EQUAL
1572: IFFALSE 1582
// sRocket := true ;
1574: LD_ADDR_EXP 8
1578: PUSH
1579: LD_INT 1
1581: ST_TO_ADDR
// if p3 = 2 then
1582: LD_VAR 0 3
1586: PUSH
1587: LD_INT 2
1589: EQUAL
1590: IFFALSE 1600
// sSpeed := true ;
1592: LD_ADDR_EXP 7
1596: PUSH
1597: LD_INT 1
1599: ST_TO_ADDR
// if p3 = 3 then
1600: LD_VAR 0 3
1604: PUSH
1605: LD_INT 3
1607: EQUAL
1608: IFFALSE 1618
// sEngine := true ;
1610: LD_ADDR_EXP 9
1614: PUSH
1615: LD_INT 1
1617: ST_TO_ADDR
// if p3 = 4 then
1618: LD_VAR 0 3
1622: PUSH
1623: LD_INT 4
1625: EQUAL
1626: IFFALSE 1636
// sSpec := true ;
1628: LD_ADDR_EXP 6
1632: PUSH
1633: LD_INT 1
1635: ST_TO_ADDR
// if p3 = 5 then
1636: LD_VAR 0 3
1640: PUSH
1641: LD_INT 5
1643: EQUAL
1644: IFFALSE 1654
// sLevel := true ;
1646: LD_ADDR_EXP 10
1650: PUSH
1651: LD_INT 1
1653: ST_TO_ADDR
// if p3 = 6 then
1654: LD_VAR 0 3
1658: PUSH
1659: LD_INT 6
1661: EQUAL
1662: IFFALSE 1672
// sArmoury := true ;
1664: LD_ADDR_EXP 11
1668: PUSH
1669: LD_INT 1
1671: ST_TO_ADDR
// if p3 = 7 then
1672: LD_VAR 0 3
1676: PUSH
1677: LD_INT 7
1679: EQUAL
1680: IFFALSE 1690
// sRadar := true ;
1682: LD_ADDR_EXP 12
1686: PUSH
1687: LD_INT 1
1689: ST_TO_ADDR
// if p3 = 8 then
1690: LD_VAR 0 3
1694: PUSH
1695: LD_INT 8
1697: EQUAL
1698: IFFALSE 1708
// sBunker := true ;
1700: LD_ADDR_EXP 13
1704: PUSH
1705: LD_INT 1
1707: ST_TO_ADDR
// if p3 = 9 then
1708: LD_VAR 0 3
1712: PUSH
1713: LD_INT 9
1715: EQUAL
1716: IFFALSE 1726
// sHack := true ;
1718: LD_ADDR_EXP 14
1722: PUSH
1723: LD_INT 1
1725: ST_TO_ADDR
// if p3 = 10 then
1726: LD_VAR 0 3
1730: PUSH
1731: LD_INT 10
1733: EQUAL
1734: IFFALSE 1744
// sFire := true ;
1736: LD_ADDR_EXP 15
1740: PUSH
1741: LD_INT 1
1743: ST_TO_ADDR
// if p3 = 11 then
1744: LD_VAR 0 3
1748: PUSH
1749: LD_INT 11
1751: EQUAL
1752: IFFALSE 1762
// sRefresh := true ;
1754: LD_ADDR_EXP 16
1758: PUSH
1759: LD_INT 1
1761: ST_TO_ADDR
// if p3 = 12 then
1762: LD_VAR 0 3
1766: PUSH
1767: LD_INT 12
1769: EQUAL
1770: IFFALSE 1780
// sExp := true ;
1772: LD_ADDR_EXP 17
1776: PUSH
1777: LD_INT 1
1779: ST_TO_ADDR
// if p3 = 13 then
1780: LD_VAR 0 3
1784: PUSH
1785: LD_INT 13
1787: EQUAL
1788: IFFALSE 1798
// sDepot := true ;
1790: LD_ADDR_EXP 18
1794: PUSH
1795: LD_INT 1
1797: ST_TO_ADDR
// if p3 = 14 then
1798: LD_VAR 0 3
1802: PUSH
1803: LD_INT 14
1805: EQUAL
1806: IFFALSE 1816
// sFlag := true ;
1808: LD_ADDR_EXP 19
1812: PUSH
1813: LD_INT 1
1815: ST_TO_ADDR
// if p3 = 15 then
1816: LD_VAR 0 3
1820: PUSH
1821: LD_INT 15
1823: EQUAL
1824: IFFALSE 1834
// sKamikadze := true ;
1826: LD_ADDR_EXP 27
1830: PUSH
1831: LD_INT 1
1833: ST_TO_ADDR
// if p3 = 16 then
1834: LD_VAR 0 3
1838: PUSH
1839: LD_INT 16
1841: EQUAL
1842: IFFALSE 1852
// sTroll := true ;
1844: LD_ADDR_EXP 28
1848: PUSH
1849: LD_INT 1
1851: ST_TO_ADDR
// if p3 = 17 then
1852: LD_VAR 0 3
1856: PUSH
1857: LD_INT 17
1859: EQUAL
1860: IFFALSE 1870
// sSlow := true ;
1862: LD_ADDR_EXP 29
1866: PUSH
1867: LD_INT 1
1869: ST_TO_ADDR
// if p3 = 18 then
1870: LD_VAR 0 3
1874: PUSH
1875: LD_INT 18
1877: EQUAL
1878: IFFALSE 1888
// sLack := true ;
1880: LD_ADDR_EXP 30
1884: PUSH
1885: LD_INT 1
1887: ST_TO_ADDR
// if p3 = 19 then
1888: LD_VAR 0 3
1892: PUSH
1893: LD_INT 19
1895: EQUAL
1896: IFFALSE 1906
// sTank := true ;
1898: LD_ADDR_EXP 32
1902: PUSH
1903: LD_INT 1
1905: ST_TO_ADDR
// if p3 = 20 then
1906: LD_VAR 0 3
1910: PUSH
1911: LD_INT 20
1913: EQUAL
1914: IFFALSE 1924
// sRemote := true ;
1916: LD_ADDR_EXP 33
1920: PUSH
1921: LD_INT 1
1923: ST_TO_ADDR
// if p3 = 21 then
1924: LD_VAR 0 3
1928: PUSH
1929: LD_INT 21
1931: EQUAL
1932: IFFALSE 1942
// sPowell := true ;
1934: LD_ADDR_EXP 34
1938: PUSH
1939: LD_INT 1
1941: ST_TO_ADDR
// if p3 = 22 then
1942: LD_VAR 0 3
1946: PUSH
1947: LD_INT 22
1949: EQUAL
1950: IFFALSE 1960
// sTeleport := true ;
1952: LD_ADDR_EXP 37
1956: PUSH
1957: LD_INT 1
1959: ST_TO_ADDR
// if p3 = 23 then
1960: LD_VAR 0 3
1964: PUSH
1965: LD_INT 23
1967: EQUAL
1968: IFFALSE 1978
// sOilTower := true ;
1970: LD_ADDR_EXP 39
1974: PUSH
1975: LD_INT 1
1977: ST_TO_ADDR
// if p3 = 24 then
1978: LD_VAR 0 3
1982: PUSH
1983: LD_INT 24
1985: EQUAL
1986: IFFALSE 1996
// sShovel := true ;
1988: LD_ADDR_EXP 40
1992: PUSH
1993: LD_INT 1
1995: ST_TO_ADDR
// if p3 = 25 then
1996: LD_VAR 0 3
2000: PUSH
2001: LD_INT 25
2003: EQUAL
2004: IFFALSE 2014
// sSheik := true ;
2006: LD_ADDR_EXP 41
2010: PUSH
2011: LD_INT 1
2013: ST_TO_ADDR
// if p3 = 26 then
2014: LD_VAR 0 3
2018: PUSH
2019: LD_INT 26
2021: EQUAL
2022: IFFALSE 2032
// sEarthquake := true ;
2024: LD_ADDR_EXP 43
2028: PUSH
2029: LD_INT 1
2031: ST_TO_ADDR
// if p3 = 27 then
2032: LD_VAR 0 3
2036: PUSH
2037: LD_INT 27
2039: EQUAL
2040: IFFALSE 2050
// sAI := true ;
2042: LD_ADDR_EXP 44
2046: PUSH
2047: LD_INT 1
2049: ST_TO_ADDR
// if p3 = 28 then
2050: LD_VAR 0 3
2054: PUSH
2055: LD_INT 28
2057: EQUAL
2058: IFFALSE 2068
// sCargo := true ;
2060: LD_ADDR_EXP 47
2064: PUSH
2065: LD_INT 1
2067: ST_TO_ADDR
// if p3 = 29 then
2068: LD_VAR 0 3
2072: PUSH
2073: LD_INT 29
2075: EQUAL
2076: IFFALSE 2086
// sDLaser := true ;
2078: LD_ADDR_EXP 48
2082: PUSH
2083: LD_INT 1
2085: ST_TO_ADDR
// if p3 = 30 then
2086: LD_VAR 0 3
2090: PUSH
2091: LD_INT 30
2093: EQUAL
2094: IFFALSE 2104
// sExchange := true ;
2096: LD_ADDR_EXP 49
2100: PUSH
2101: LD_INT 1
2103: ST_TO_ADDR
// if p3 = 31 then
2104: LD_VAR 0 3
2108: PUSH
2109: LD_INT 31
2111: EQUAL
2112: IFFALSE 2122
// sFac := true ;
2114: LD_ADDR_EXP 50
2118: PUSH
2119: LD_INT 1
2121: ST_TO_ADDR
// if p3 = 32 then
2122: LD_VAR 0 3
2126: PUSH
2127: LD_INT 32
2129: EQUAL
2130: IFFALSE 2140
// sPower := true ;
2132: LD_ADDR_EXP 51
2136: PUSH
2137: LD_INT 1
2139: ST_TO_ADDR
// if p3 = 33 then
2140: LD_VAR 0 3
2144: PUSH
2145: LD_INT 33
2147: EQUAL
2148: IFFALSE 2158
// sRandom := true ;
2150: LD_ADDR_EXP 52
2154: PUSH
2155: LD_INT 1
2157: ST_TO_ADDR
// if p3 = 34 then
2158: LD_VAR 0 3
2162: PUSH
2163: LD_INT 34
2165: EQUAL
2166: IFFALSE 2176
// sShield := true ;
2168: LD_ADDR_EXP 53
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// if p3 = 35 then
2176: LD_VAR 0 3
2180: PUSH
2181: LD_INT 35
2183: EQUAL
2184: IFFALSE 2194
// sTime := true ;
2186: LD_ADDR_EXP 54
2190: PUSH
2191: LD_INT 1
2193: ST_TO_ADDR
// if p3 = 36 then
2194: LD_VAR 0 3
2198: PUSH
2199: LD_INT 36
2201: EQUAL
2202: IFFALSE 2212
// sTools := true ;
2204: LD_ADDR_EXP 55
2208: PUSH
2209: LD_INT 1
2211: ST_TO_ADDR
// if p3 = 101 then
2212: LD_VAR 0 3
2216: PUSH
2217: LD_INT 101
2219: EQUAL
2220: IFFALSE 2230
// sSold := true ;
2222: LD_ADDR_EXP 20
2226: PUSH
2227: LD_INT 1
2229: ST_TO_ADDR
// if p3 = 102 then
2230: LD_VAR 0 3
2234: PUSH
2235: LD_INT 102
2237: EQUAL
2238: IFFALSE 2248
// sDiff := true ;
2240: LD_ADDR_EXP 21
2244: PUSH
2245: LD_INT 1
2247: ST_TO_ADDR
// if p3 = 103 then
2248: LD_VAR 0 3
2252: PUSH
2253: LD_INT 103
2255: EQUAL
2256: IFFALSE 2266
// sFog := true ;
2258: LD_ADDR_EXP 24
2262: PUSH
2263: LD_INT 1
2265: ST_TO_ADDR
// if p3 = 104 then
2266: LD_VAR 0 3
2270: PUSH
2271: LD_INT 104
2273: EQUAL
2274: IFFALSE 2284
// sReset := true ;
2276: LD_ADDR_EXP 25
2280: PUSH
2281: LD_INT 1
2283: ST_TO_ADDR
// if p3 = 105 then
2284: LD_VAR 0 3
2288: PUSH
2289: LD_INT 105
2291: EQUAL
2292: IFFALSE 2302
// sSun := true ;
2294: LD_ADDR_EXP 26
2298: PUSH
2299: LD_INT 1
2301: ST_TO_ADDR
// if p3 = 106 then
2302: LD_VAR 0 3
2306: PUSH
2307: LD_INT 106
2309: EQUAL
2310: IFFALSE 2320
// sTiger := true ;
2312: LD_ADDR_EXP 22
2316: PUSH
2317: LD_INT 1
2319: ST_TO_ADDR
// if p3 = 107 then
2320: LD_VAR 0 3
2324: PUSH
2325: LD_INT 107
2327: EQUAL
2328: IFFALSE 2338
// sBomb := true ;
2330: LD_ADDR_EXP 23
2334: PUSH
2335: LD_INT 1
2337: ST_TO_ADDR
// if p3 = 108 then
2338: LD_VAR 0 3
2342: PUSH
2343: LD_INT 108
2345: EQUAL
2346: IFFALSE 2356
// sWound := true ;
2348: LD_ADDR_EXP 31
2352: PUSH
2353: LD_INT 1
2355: ST_TO_ADDR
// if p3 = 109 then
2356: LD_VAR 0 3
2360: PUSH
2361: LD_INT 109
2363: EQUAL
2364: IFFALSE 2374
// sBetray := true ;
2366: LD_ADDR_EXP 35
2370: PUSH
2371: LD_INT 1
2373: ST_TO_ADDR
// if p3 = 110 then
2374: LD_VAR 0 3
2378: PUSH
2379: LD_INT 110
2381: EQUAL
2382: IFFALSE 2392
// sContamin := true ;
2384: LD_ADDR_EXP 36
2388: PUSH
2389: LD_INT 1
2391: ST_TO_ADDR
// if p3 = 111 then
2392: LD_VAR 0 3
2396: PUSH
2397: LD_INT 111
2399: EQUAL
2400: IFFALSE 2410
// sOil := true ;
2402: LD_ADDR_EXP 38
2406: PUSH
2407: LD_INT 1
2409: ST_TO_ADDR
// if p3 = 112 then
2410: LD_VAR 0 3
2414: PUSH
2415: LD_INT 112
2417: EQUAL
2418: IFFALSE 2428
// sStu := true ;
2420: LD_ADDR_EXP 42
2424: PUSH
2425: LD_INT 1
2427: ST_TO_ADDR
// if p3 = 113 then
2428: LD_VAR 0 3
2432: PUSH
2433: LD_INT 113
2435: EQUAL
2436: IFFALSE 2446
// sBazooka := true ;
2438: LD_ADDR_EXP 45
2442: PUSH
2443: LD_INT 1
2445: ST_TO_ADDR
// if p3 = 114 then
2446: LD_VAR 0 3
2450: PUSH
2451: LD_INT 114
2453: EQUAL
2454: IFFALSE 2464
// sMortar := true ;
2456: LD_ADDR_EXP 46
2460: PUSH
2461: LD_INT 1
2463: ST_TO_ADDR
// if p3 = 115 then
2464: LD_VAR 0 3
2468: PUSH
2469: LD_INT 115
2471: EQUAL
2472: IFFALSE 2482
// sRanger := true ;
2474: LD_ADDR_EXP 56
2478: PUSH
2479: LD_INT 1
2481: ST_TO_ADDR
// if p3 = 116 then
2482: LD_VAR 0 3
2486: PUSH
2487: LD_INT 116
2489: EQUAL
2490: IFFALSE 2500
// sComputer := true ;
2492: LD_ADDR_EXP 57
2496: PUSH
2497: LD_INT 1
2499: ST_TO_ADDR
// if p3 = 117 then
2500: LD_VAR 0 3
2504: PUSH
2505: LD_INT 117
2507: EQUAL
2508: IFFALSE 2518
// s30 := true ;
2510: LD_ADDR_EXP 58
2514: PUSH
2515: LD_INT 1
2517: ST_TO_ADDR
// if p3 = 118 then
2518: LD_VAR 0 3
2522: PUSH
2523: LD_INT 118
2525: EQUAL
2526: IFFALSE 2536
// s60 := true ;
2528: LD_ADDR_EXP 59
2532: PUSH
2533: LD_INT 1
2535: ST_TO_ADDR
// end ; if p2 = hack_mode then
2536: LD_VAR 0 2
2540: PUSH
2541: LD_INT 101
2543: EQUAL
2544: IFFALSE 2672
// begin case p3 of 1 :
2546: LD_VAR 0 3
2550: PUSH
2551: LD_INT 1
2553: DOUBLE
2554: EQUAL
2555: IFTRUE 2559
2557: GO 2566
2559: POP
// hHackUnlimitedResources ; 2 :
2560: CALL 14819 0 0
2564: GO 2672
2566: LD_INT 2
2568: DOUBLE
2569: EQUAL
2570: IFTRUE 2574
2572: GO 2581
2574: POP
// hHackSetLevel10 ; 3 :
2575: CALL 14952 0 0
2579: GO 2672
2581: LD_INT 3
2583: DOUBLE
2584: EQUAL
2585: IFTRUE 2589
2587: GO 2596
2589: POP
// hHackSetLevel10YourUnits ; 4 :
2590: CALL 15037 0 0
2594: GO 2672
2596: LD_INT 4
2598: DOUBLE
2599: EQUAL
2600: IFTRUE 2604
2602: GO 2611
2604: POP
// hHackInvincible ; 5 :
2605: CALL 15485 0 0
2609: GO 2672
2611: LD_INT 5
2613: DOUBLE
2614: EQUAL
2615: IFTRUE 2619
2617: GO 2626
2619: POP
// hHackInvisible ; 6 :
2620: CALL 15596 0 0
2624: GO 2672
2626: LD_INT 6
2628: DOUBLE
2629: EQUAL
2630: IFTRUE 2634
2632: GO 2641
2634: POP
// hHackChangeYourSide ; 7 :
2635: CALL 15653 0 0
2639: GO 2672
2641: LD_INT 7
2643: DOUBLE
2644: EQUAL
2645: IFTRUE 2649
2647: GO 2656
2649: POP
// hHackChangeUnitSide ; 8 :
2650: CALL 15695 0 0
2654: GO 2672
2656: LD_INT 8
2658: DOUBLE
2659: EQUAL
2660: IFTRUE 2664
2662: GO 2671
2664: POP
// hHackFog ; end ;
2665: CALL 15796 0 0
2669: GO 2672
2671: POP
// end ; if p2 = game_save_mode then
2672: LD_VAR 0 2
2676: PUSH
2677: LD_INT 102
2679: EQUAL
2680: IFFALSE 2735
// begin if p3 = 1 then
2682: LD_VAR 0 3
2686: PUSH
2687: LD_INT 1
2689: EQUAL
2690: IFFALSE 2702
// globalGameSaveCounter := p4 ;
2692: LD_ADDR_EXP 2
2696: PUSH
2697: LD_VAR 0 4
2701: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
2702: LD_VAR 0 3
2706: PUSH
2707: LD_INT 2
2709: EQUAL
2710: PUSH
2711: LD_EXP 2
2715: AND
2716: IFFALSE 2735
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
2718: LD_STRING setGameSaveCounter(
2720: PUSH
2721: LD_EXP 2
2725: STR
2726: PUSH
2727: LD_STRING )
2729: STR
2730: PPUSH
2731: CALL_OW 559
// end ; end ;
2735: LD_VAR 0 7
2739: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
2740: LD_INT 0
2742: PPUSH
// streamModeActive := false ;
2743: LD_ADDR_EXP 3
2747: PUSH
2748: LD_INT 0
2750: ST_TO_ADDR
// normalCounter := 36 ;
2751: LD_ADDR_EXP 4
2755: PUSH
2756: LD_INT 36
2758: ST_TO_ADDR
// hardcoreCounter := 18 ;
2759: LD_ADDR_EXP 5
2763: PUSH
2764: LD_INT 18
2766: ST_TO_ADDR
// sRocket := false ;
2767: LD_ADDR_EXP 8
2771: PUSH
2772: LD_INT 0
2774: ST_TO_ADDR
// sSpeed := false ;
2775: LD_ADDR_EXP 7
2779: PUSH
2780: LD_INT 0
2782: ST_TO_ADDR
// sEngine := false ;
2783: LD_ADDR_EXP 9
2787: PUSH
2788: LD_INT 0
2790: ST_TO_ADDR
// sSpec := false ;
2791: LD_ADDR_EXP 6
2795: PUSH
2796: LD_INT 0
2798: ST_TO_ADDR
// sLevel := false ;
2799: LD_ADDR_EXP 10
2803: PUSH
2804: LD_INT 0
2806: ST_TO_ADDR
// sArmoury := false ;
2807: LD_ADDR_EXP 11
2811: PUSH
2812: LD_INT 0
2814: ST_TO_ADDR
// sRadar := false ;
2815: LD_ADDR_EXP 12
2819: PUSH
2820: LD_INT 0
2822: ST_TO_ADDR
// sBunker := false ;
2823: LD_ADDR_EXP 13
2827: PUSH
2828: LD_INT 0
2830: ST_TO_ADDR
// sHack := false ;
2831: LD_ADDR_EXP 14
2835: PUSH
2836: LD_INT 0
2838: ST_TO_ADDR
// sFire := false ;
2839: LD_ADDR_EXP 15
2843: PUSH
2844: LD_INT 0
2846: ST_TO_ADDR
// sRefresh := false ;
2847: LD_ADDR_EXP 16
2851: PUSH
2852: LD_INT 0
2854: ST_TO_ADDR
// sExp := false ;
2855: LD_ADDR_EXP 17
2859: PUSH
2860: LD_INT 0
2862: ST_TO_ADDR
// sDepot := false ;
2863: LD_ADDR_EXP 18
2867: PUSH
2868: LD_INT 0
2870: ST_TO_ADDR
// sFlag := false ;
2871: LD_ADDR_EXP 19
2875: PUSH
2876: LD_INT 0
2878: ST_TO_ADDR
// sKamikadze := false ;
2879: LD_ADDR_EXP 27
2883: PUSH
2884: LD_INT 0
2886: ST_TO_ADDR
// sTroll := false ;
2887: LD_ADDR_EXP 28
2891: PUSH
2892: LD_INT 0
2894: ST_TO_ADDR
// sSlow := false ;
2895: LD_ADDR_EXP 29
2899: PUSH
2900: LD_INT 0
2902: ST_TO_ADDR
// sLack := false ;
2903: LD_ADDR_EXP 30
2907: PUSH
2908: LD_INT 0
2910: ST_TO_ADDR
// sTank := false ;
2911: LD_ADDR_EXP 32
2915: PUSH
2916: LD_INT 0
2918: ST_TO_ADDR
// sRemote := false ;
2919: LD_ADDR_EXP 33
2923: PUSH
2924: LD_INT 0
2926: ST_TO_ADDR
// sPowell := false ;
2927: LD_ADDR_EXP 34
2931: PUSH
2932: LD_INT 0
2934: ST_TO_ADDR
// sTeleport := false ;
2935: LD_ADDR_EXP 37
2939: PUSH
2940: LD_INT 0
2942: ST_TO_ADDR
// sOilTower := false ;
2943: LD_ADDR_EXP 39
2947: PUSH
2948: LD_INT 0
2950: ST_TO_ADDR
// sShovel := false ;
2951: LD_ADDR_EXP 40
2955: PUSH
2956: LD_INT 0
2958: ST_TO_ADDR
// sSheik := false ;
2959: LD_ADDR_EXP 41
2963: PUSH
2964: LD_INT 0
2966: ST_TO_ADDR
// sEarthquake := false ;
2967: LD_ADDR_EXP 43
2971: PUSH
2972: LD_INT 0
2974: ST_TO_ADDR
// sAI := false ;
2975: LD_ADDR_EXP 44
2979: PUSH
2980: LD_INT 0
2982: ST_TO_ADDR
// sCargo := false ;
2983: LD_ADDR_EXP 47
2987: PUSH
2988: LD_INT 0
2990: ST_TO_ADDR
// sDLaser := false ;
2991: LD_ADDR_EXP 48
2995: PUSH
2996: LD_INT 0
2998: ST_TO_ADDR
// sExchange := false ;
2999: LD_ADDR_EXP 49
3003: PUSH
3004: LD_INT 0
3006: ST_TO_ADDR
// sFac := false ;
3007: LD_ADDR_EXP 50
3011: PUSH
3012: LD_INT 0
3014: ST_TO_ADDR
// sPower := false ;
3015: LD_ADDR_EXP 51
3019: PUSH
3020: LD_INT 0
3022: ST_TO_ADDR
// sRandom := false ;
3023: LD_ADDR_EXP 52
3027: PUSH
3028: LD_INT 0
3030: ST_TO_ADDR
// sShield := false ;
3031: LD_ADDR_EXP 53
3035: PUSH
3036: LD_INT 0
3038: ST_TO_ADDR
// sTime := false ;
3039: LD_ADDR_EXP 54
3043: PUSH
3044: LD_INT 0
3046: ST_TO_ADDR
// sTools := false ;
3047: LD_ADDR_EXP 55
3051: PUSH
3052: LD_INT 0
3054: ST_TO_ADDR
// sSold := false ;
3055: LD_ADDR_EXP 20
3059: PUSH
3060: LD_INT 0
3062: ST_TO_ADDR
// sDiff := false ;
3063: LD_ADDR_EXP 21
3067: PUSH
3068: LD_INT 0
3070: ST_TO_ADDR
// sFog := false ;
3071: LD_ADDR_EXP 24
3075: PUSH
3076: LD_INT 0
3078: ST_TO_ADDR
// sReset := false ;
3079: LD_ADDR_EXP 25
3083: PUSH
3084: LD_INT 0
3086: ST_TO_ADDR
// sSun := false ;
3087: LD_ADDR_EXP 26
3091: PUSH
3092: LD_INT 0
3094: ST_TO_ADDR
// sTiger := false ;
3095: LD_ADDR_EXP 22
3099: PUSH
3100: LD_INT 0
3102: ST_TO_ADDR
// sBomb := false ;
3103: LD_ADDR_EXP 23
3107: PUSH
3108: LD_INT 0
3110: ST_TO_ADDR
// sWound := false ;
3111: LD_ADDR_EXP 31
3115: PUSH
3116: LD_INT 0
3118: ST_TO_ADDR
// sBetray := false ;
3119: LD_ADDR_EXP 35
3123: PUSH
3124: LD_INT 0
3126: ST_TO_ADDR
// sContamin := false ;
3127: LD_ADDR_EXP 36
3131: PUSH
3132: LD_INT 0
3134: ST_TO_ADDR
// sOil := false ;
3135: LD_ADDR_EXP 38
3139: PUSH
3140: LD_INT 0
3142: ST_TO_ADDR
// sStu := false ;
3143: LD_ADDR_EXP 42
3147: PUSH
3148: LD_INT 0
3150: ST_TO_ADDR
// sBazooka := false ;
3151: LD_ADDR_EXP 45
3155: PUSH
3156: LD_INT 0
3158: ST_TO_ADDR
// sMortar := false ;
3159: LD_ADDR_EXP 46
3163: PUSH
3164: LD_INT 0
3166: ST_TO_ADDR
// sRanger := false ;
3167: LD_ADDR_EXP 56
3171: PUSH
3172: LD_INT 0
3174: ST_TO_ADDR
// sComputer := false ;
3175: LD_ADDR_EXP 57
3179: PUSH
3180: LD_INT 0
3182: ST_TO_ADDR
// s30 := false ;
3183: LD_ADDR_EXP 58
3187: PUSH
3188: LD_INT 0
3190: ST_TO_ADDR
// s60 := false ;
3191: LD_ADDR_EXP 59
3195: PUSH
3196: LD_INT 0
3198: ST_TO_ADDR
// end ;
3199: LD_VAR 0 1
3203: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3204: LD_INT 0
3206: PPUSH
3207: PPUSH
3208: PPUSH
3209: PPUSH
3210: PPUSH
3211: PPUSH
3212: PPUSH
// result := [ ] ;
3213: LD_ADDR_VAR 0 2
3217: PUSH
3218: EMPTY
3219: ST_TO_ADDR
// if campaign_id = 1 then
3220: LD_OWVAR 69
3224: PUSH
3225: LD_INT 1
3227: EQUAL
3228: IFFALSE 6394
// begin case mission_number of 1 :
3230: LD_OWVAR 70
3234: PUSH
3235: LD_INT 1
3237: DOUBLE
3238: EQUAL
3239: IFTRUE 3243
3241: GO 3319
3243: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3244: LD_ADDR_VAR 0 2
3248: PUSH
3249: LD_INT 2
3251: PUSH
3252: LD_INT 4
3254: PUSH
3255: LD_INT 11
3257: PUSH
3258: LD_INT 12
3260: PUSH
3261: LD_INT 15
3263: PUSH
3264: LD_INT 16
3266: PUSH
3267: LD_INT 22
3269: PUSH
3270: LD_INT 23
3272: PUSH
3273: LD_INT 26
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: PUSH
3287: LD_INT 101
3289: PUSH
3290: LD_INT 102
3292: PUSH
3293: LD_INT 106
3295: PUSH
3296: LD_INT 116
3298: PUSH
3299: LD_INT 117
3301: PUSH
3302: LD_INT 118
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: LIST
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: ST_TO_ADDR
3317: GO 6392
3319: LD_INT 2
3321: DOUBLE
3322: EQUAL
3323: IFTRUE 3327
3325: GO 3411
3327: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3328: LD_ADDR_VAR 0 2
3332: PUSH
3333: LD_INT 2
3335: PUSH
3336: LD_INT 4
3338: PUSH
3339: LD_INT 11
3341: PUSH
3342: LD_INT 12
3344: PUSH
3345: LD_INT 15
3347: PUSH
3348: LD_INT 16
3350: PUSH
3351: LD_INT 22
3353: PUSH
3354: LD_INT 23
3356: PUSH
3357: LD_INT 26
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: LIST
3367: LIST
3368: LIST
3369: LIST
3370: PUSH
3371: LD_INT 101
3373: PUSH
3374: LD_INT 102
3376: PUSH
3377: LD_INT 105
3379: PUSH
3380: LD_INT 106
3382: PUSH
3383: LD_INT 108
3385: PUSH
3386: LD_INT 116
3388: PUSH
3389: LD_INT 117
3391: PUSH
3392: LD_INT 118
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: PUSH
3405: EMPTY
3406: LIST
3407: LIST
3408: ST_TO_ADDR
3409: GO 6392
3411: LD_INT 3
3413: DOUBLE
3414: EQUAL
3415: IFTRUE 3419
3417: GO 3507
3419: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3420: LD_ADDR_VAR 0 2
3424: PUSH
3425: LD_INT 2
3427: PUSH
3428: LD_INT 4
3430: PUSH
3431: LD_INT 5
3433: PUSH
3434: LD_INT 11
3436: PUSH
3437: LD_INT 12
3439: PUSH
3440: LD_INT 15
3442: PUSH
3443: LD_INT 16
3445: PUSH
3446: LD_INT 22
3448: PUSH
3449: LD_INT 26
3451: PUSH
3452: LD_INT 36
3454: PUSH
3455: EMPTY
3456: LIST
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: PUSH
3467: LD_INT 101
3469: PUSH
3470: LD_INT 102
3472: PUSH
3473: LD_INT 105
3475: PUSH
3476: LD_INT 106
3478: PUSH
3479: LD_INT 108
3481: PUSH
3482: LD_INT 116
3484: PUSH
3485: LD_INT 117
3487: PUSH
3488: LD_INT 118
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: ST_TO_ADDR
3505: GO 6392
3507: LD_INT 4
3509: DOUBLE
3510: EQUAL
3511: IFTRUE 3515
3513: GO 3611
3515: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
3516: LD_ADDR_VAR 0 2
3520: PUSH
3521: LD_INT 2
3523: PUSH
3524: LD_INT 4
3526: PUSH
3527: LD_INT 5
3529: PUSH
3530: LD_INT 8
3532: PUSH
3533: LD_INT 11
3535: PUSH
3536: LD_INT 12
3538: PUSH
3539: LD_INT 15
3541: PUSH
3542: LD_INT 16
3544: PUSH
3545: LD_INT 22
3547: PUSH
3548: LD_INT 23
3550: PUSH
3551: LD_INT 26
3553: PUSH
3554: LD_INT 36
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: PUSH
3571: LD_INT 101
3573: PUSH
3574: LD_INT 102
3576: PUSH
3577: LD_INT 105
3579: PUSH
3580: LD_INT 106
3582: PUSH
3583: LD_INT 108
3585: PUSH
3586: LD_INT 116
3588: PUSH
3589: LD_INT 117
3591: PUSH
3592: LD_INT 118
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: ST_TO_ADDR
3609: GO 6392
3611: LD_INT 5
3613: DOUBLE
3614: EQUAL
3615: IFTRUE 3619
3617: GO 3731
3619: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
3620: LD_ADDR_VAR 0 2
3624: PUSH
3625: LD_INT 2
3627: PUSH
3628: LD_INT 4
3630: PUSH
3631: LD_INT 5
3633: PUSH
3634: LD_INT 6
3636: PUSH
3637: LD_INT 8
3639: PUSH
3640: LD_INT 11
3642: PUSH
3643: LD_INT 12
3645: PUSH
3646: LD_INT 15
3648: PUSH
3649: LD_INT 16
3651: PUSH
3652: LD_INT 22
3654: PUSH
3655: LD_INT 23
3657: PUSH
3658: LD_INT 25
3660: PUSH
3661: LD_INT 26
3663: PUSH
3664: LD_INT 36
3666: PUSH
3667: EMPTY
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: PUSH
3683: LD_INT 101
3685: PUSH
3686: LD_INT 102
3688: PUSH
3689: LD_INT 105
3691: PUSH
3692: LD_INT 106
3694: PUSH
3695: LD_INT 108
3697: PUSH
3698: LD_INT 109
3700: PUSH
3701: LD_INT 112
3703: PUSH
3704: LD_INT 116
3706: PUSH
3707: LD_INT 117
3709: PUSH
3710: LD_INT 118
3712: PUSH
3713: EMPTY
3714: LIST
3715: LIST
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: LIST
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: ST_TO_ADDR
3729: GO 6392
3731: LD_INT 6
3733: DOUBLE
3734: EQUAL
3735: IFTRUE 3739
3737: GO 3871
3739: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
3740: LD_ADDR_VAR 0 2
3744: PUSH
3745: LD_INT 2
3747: PUSH
3748: LD_INT 4
3750: PUSH
3751: LD_INT 5
3753: PUSH
3754: LD_INT 6
3756: PUSH
3757: LD_INT 8
3759: PUSH
3760: LD_INT 11
3762: PUSH
3763: LD_INT 12
3765: PUSH
3766: LD_INT 15
3768: PUSH
3769: LD_INT 16
3771: PUSH
3772: LD_INT 20
3774: PUSH
3775: LD_INT 21
3777: PUSH
3778: LD_INT 22
3780: PUSH
3781: LD_INT 23
3783: PUSH
3784: LD_INT 25
3786: PUSH
3787: LD_INT 26
3789: PUSH
3790: LD_INT 30
3792: PUSH
3793: LD_INT 31
3795: PUSH
3796: LD_INT 32
3798: PUSH
3799: LD_INT 36
3801: PUSH
3802: EMPTY
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 101
3825: PUSH
3826: LD_INT 102
3828: PUSH
3829: LD_INT 105
3831: PUSH
3832: LD_INT 106
3834: PUSH
3835: LD_INT 108
3837: PUSH
3838: LD_INT 109
3840: PUSH
3841: LD_INT 112
3843: PUSH
3844: LD_INT 116
3846: PUSH
3847: LD_INT 117
3849: PUSH
3850: LD_INT 118
3852: PUSH
3853: EMPTY
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: PUSH
3865: EMPTY
3866: LIST
3867: LIST
3868: ST_TO_ADDR
3869: GO 6392
3871: LD_INT 7
3873: DOUBLE
3874: EQUAL
3875: IFTRUE 3879
3877: GO 3991
3879: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
3880: LD_ADDR_VAR 0 2
3884: PUSH
3885: LD_INT 2
3887: PUSH
3888: LD_INT 4
3890: PUSH
3891: LD_INT 5
3893: PUSH
3894: LD_INT 7
3896: PUSH
3897: LD_INT 11
3899: PUSH
3900: LD_INT 12
3902: PUSH
3903: LD_INT 15
3905: PUSH
3906: LD_INT 16
3908: PUSH
3909: LD_INT 20
3911: PUSH
3912: LD_INT 21
3914: PUSH
3915: LD_INT 22
3917: PUSH
3918: LD_INT 23
3920: PUSH
3921: LD_INT 25
3923: PUSH
3924: LD_INT 26
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: PUSH
3943: LD_INT 101
3945: PUSH
3946: LD_INT 102
3948: PUSH
3949: LD_INT 103
3951: PUSH
3952: LD_INT 105
3954: PUSH
3955: LD_INT 106
3957: PUSH
3958: LD_INT 108
3960: PUSH
3961: LD_INT 112
3963: PUSH
3964: LD_INT 116
3966: PUSH
3967: LD_INT 117
3969: PUSH
3970: LD_INT 118
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: LIST
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: PUSH
3985: EMPTY
3986: LIST
3987: LIST
3988: ST_TO_ADDR
3989: GO 6392
3991: LD_INT 8
3993: DOUBLE
3994: EQUAL
3995: IFTRUE 3999
3997: GO 4139
3999: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4000: LD_ADDR_VAR 0 2
4004: PUSH
4005: LD_INT 2
4007: PUSH
4008: LD_INT 4
4010: PUSH
4011: LD_INT 5
4013: PUSH
4014: LD_INT 6
4016: PUSH
4017: LD_INT 7
4019: PUSH
4020: LD_INT 8
4022: PUSH
4023: LD_INT 11
4025: PUSH
4026: LD_INT 12
4028: PUSH
4029: LD_INT 15
4031: PUSH
4032: LD_INT 16
4034: PUSH
4035: LD_INT 20
4037: PUSH
4038: LD_INT 21
4040: PUSH
4041: LD_INT 22
4043: PUSH
4044: LD_INT 23
4046: PUSH
4047: LD_INT 25
4049: PUSH
4050: LD_INT 26
4052: PUSH
4053: LD_INT 30
4055: PUSH
4056: LD_INT 31
4058: PUSH
4059: LD_INT 32
4061: PUSH
4062: LD_INT 36
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: PUSH
4087: LD_INT 101
4089: PUSH
4090: LD_INT 102
4092: PUSH
4093: LD_INT 103
4095: PUSH
4096: LD_INT 105
4098: PUSH
4099: LD_INT 106
4101: PUSH
4102: LD_INT 108
4104: PUSH
4105: LD_INT 109
4107: PUSH
4108: LD_INT 112
4110: PUSH
4111: LD_INT 116
4113: PUSH
4114: LD_INT 117
4116: PUSH
4117: LD_INT 118
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: PUSH
4133: EMPTY
4134: LIST
4135: LIST
4136: ST_TO_ADDR
4137: GO 6392
4139: LD_INT 9
4141: DOUBLE
4142: EQUAL
4143: IFTRUE 4147
4145: GO 4295
4147: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4148: LD_ADDR_VAR 0 2
4152: PUSH
4153: LD_INT 2
4155: PUSH
4156: LD_INT 4
4158: PUSH
4159: LD_INT 5
4161: PUSH
4162: LD_INT 6
4164: PUSH
4165: LD_INT 7
4167: PUSH
4168: LD_INT 8
4170: PUSH
4171: LD_INT 11
4173: PUSH
4174: LD_INT 12
4176: PUSH
4177: LD_INT 15
4179: PUSH
4180: LD_INT 16
4182: PUSH
4183: LD_INT 20
4185: PUSH
4186: LD_INT 21
4188: PUSH
4189: LD_INT 22
4191: PUSH
4192: LD_INT 23
4194: PUSH
4195: LD_INT 25
4197: PUSH
4198: LD_INT 26
4200: PUSH
4201: LD_INT 28
4203: PUSH
4204: LD_INT 30
4206: PUSH
4207: LD_INT 31
4209: PUSH
4210: LD_INT 32
4212: PUSH
4213: LD_INT 36
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: LIST
4220: LIST
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: LIST
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: LIST
4238: PUSH
4239: LD_INT 101
4241: PUSH
4242: LD_INT 102
4244: PUSH
4245: LD_INT 103
4247: PUSH
4248: LD_INT 105
4250: PUSH
4251: LD_INT 106
4253: PUSH
4254: LD_INT 108
4256: PUSH
4257: LD_INT 109
4259: PUSH
4260: LD_INT 112
4262: PUSH
4263: LD_INT 114
4265: PUSH
4266: LD_INT 116
4268: PUSH
4269: LD_INT 117
4271: PUSH
4272: LD_INT 118
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: ST_TO_ADDR
4293: GO 6392
4295: LD_INT 10
4297: DOUBLE
4298: EQUAL
4299: IFTRUE 4303
4301: GO 4499
4303: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4304: LD_ADDR_VAR 0 2
4308: PUSH
4309: LD_INT 2
4311: PUSH
4312: LD_INT 4
4314: PUSH
4315: LD_INT 5
4317: PUSH
4318: LD_INT 6
4320: PUSH
4321: LD_INT 7
4323: PUSH
4324: LD_INT 8
4326: PUSH
4327: LD_INT 9
4329: PUSH
4330: LD_INT 10
4332: PUSH
4333: LD_INT 11
4335: PUSH
4336: LD_INT 12
4338: PUSH
4339: LD_INT 13
4341: PUSH
4342: LD_INT 14
4344: PUSH
4345: LD_INT 15
4347: PUSH
4348: LD_INT 16
4350: PUSH
4351: LD_INT 17
4353: PUSH
4354: LD_INT 18
4356: PUSH
4357: LD_INT 19
4359: PUSH
4360: LD_INT 20
4362: PUSH
4363: LD_INT 21
4365: PUSH
4366: LD_INT 22
4368: PUSH
4369: LD_INT 23
4371: PUSH
4372: LD_INT 24
4374: PUSH
4375: LD_INT 25
4377: PUSH
4378: LD_INT 26
4380: PUSH
4381: LD_INT 28
4383: PUSH
4384: LD_INT 30
4386: PUSH
4387: LD_INT 31
4389: PUSH
4390: LD_INT 32
4392: PUSH
4393: LD_INT 36
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: PUSH
4427: LD_INT 101
4429: PUSH
4430: LD_INT 102
4432: PUSH
4433: LD_INT 103
4435: PUSH
4436: LD_INT 104
4438: PUSH
4439: LD_INT 105
4441: PUSH
4442: LD_INT 106
4444: PUSH
4445: LD_INT 107
4447: PUSH
4448: LD_INT 108
4450: PUSH
4451: LD_INT 109
4453: PUSH
4454: LD_INT 110
4456: PUSH
4457: LD_INT 111
4459: PUSH
4460: LD_INT 112
4462: PUSH
4463: LD_INT 114
4465: PUSH
4466: LD_INT 116
4468: PUSH
4469: LD_INT 117
4471: PUSH
4472: LD_INT 118
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: ST_TO_ADDR
4497: GO 6392
4499: LD_INT 11
4501: DOUBLE
4502: EQUAL
4503: IFTRUE 4507
4505: GO 4711
4507: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4508: LD_ADDR_VAR 0 2
4512: PUSH
4513: LD_INT 2
4515: PUSH
4516: LD_INT 3
4518: PUSH
4519: LD_INT 4
4521: PUSH
4522: LD_INT 5
4524: PUSH
4525: LD_INT 6
4527: PUSH
4528: LD_INT 7
4530: PUSH
4531: LD_INT 8
4533: PUSH
4534: LD_INT 9
4536: PUSH
4537: LD_INT 10
4539: PUSH
4540: LD_INT 11
4542: PUSH
4543: LD_INT 12
4545: PUSH
4546: LD_INT 13
4548: PUSH
4549: LD_INT 14
4551: PUSH
4552: LD_INT 15
4554: PUSH
4555: LD_INT 16
4557: PUSH
4558: LD_INT 17
4560: PUSH
4561: LD_INT 18
4563: PUSH
4564: LD_INT 19
4566: PUSH
4567: LD_INT 20
4569: PUSH
4570: LD_INT 21
4572: PUSH
4573: LD_INT 22
4575: PUSH
4576: LD_INT 23
4578: PUSH
4579: LD_INT 24
4581: PUSH
4582: LD_INT 25
4584: PUSH
4585: LD_INT 26
4587: PUSH
4588: LD_INT 28
4590: PUSH
4591: LD_INT 30
4593: PUSH
4594: LD_INT 31
4596: PUSH
4597: LD_INT 32
4599: PUSH
4600: LD_INT 34
4602: PUSH
4603: LD_INT 36
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: LIST
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: PUSH
4639: LD_INT 101
4641: PUSH
4642: LD_INT 102
4644: PUSH
4645: LD_INT 103
4647: PUSH
4648: LD_INT 104
4650: PUSH
4651: LD_INT 105
4653: PUSH
4654: LD_INT 106
4656: PUSH
4657: LD_INT 107
4659: PUSH
4660: LD_INT 108
4662: PUSH
4663: LD_INT 109
4665: PUSH
4666: LD_INT 110
4668: PUSH
4669: LD_INT 111
4671: PUSH
4672: LD_INT 112
4674: PUSH
4675: LD_INT 114
4677: PUSH
4678: LD_INT 116
4680: PUSH
4681: LD_INT 117
4683: PUSH
4684: LD_INT 118
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: ST_TO_ADDR
4709: GO 6392
4711: LD_INT 12
4713: DOUBLE
4714: EQUAL
4715: IFTRUE 4719
4717: GO 4939
4719: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
4720: LD_ADDR_VAR 0 2
4724: PUSH
4725: LD_INT 1
4727: PUSH
4728: LD_INT 2
4730: PUSH
4731: LD_INT 3
4733: PUSH
4734: LD_INT 4
4736: PUSH
4737: LD_INT 5
4739: PUSH
4740: LD_INT 6
4742: PUSH
4743: LD_INT 7
4745: PUSH
4746: LD_INT 8
4748: PUSH
4749: LD_INT 9
4751: PUSH
4752: LD_INT 10
4754: PUSH
4755: LD_INT 11
4757: PUSH
4758: LD_INT 12
4760: PUSH
4761: LD_INT 13
4763: PUSH
4764: LD_INT 14
4766: PUSH
4767: LD_INT 15
4769: PUSH
4770: LD_INT 16
4772: PUSH
4773: LD_INT 17
4775: PUSH
4776: LD_INT 18
4778: PUSH
4779: LD_INT 19
4781: PUSH
4782: LD_INT 20
4784: PUSH
4785: LD_INT 21
4787: PUSH
4788: LD_INT 22
4790: PUSH
4791: LD_INT 23
4793: PUSH
4794: LD_INT 24
4796: PUSH
4797: LD_INT 25
4799: PUSH
4800: LD_INT 26
4802: PUSH
4803: LD_INT 27
4805: PUSH
4806: LD_INT 28
4808: PUSH
4809: LD_INT 30
4811: PUSH
4812: LD_INT 31
4814: PUSH
4815: LD_INT 32
4817: PUSH
4818: LD_INT 33
4820: PUSH
4821: LD_INT 34
4823: PUSH
4824: LD_INT 36
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: LD_INT 101
4865: PUSH
4866: LD_INT 102
4868: PUSH
4869: LD_INT 103
4871: PUSH
4872: LD_INT 104
4874: PUSH
4875: LD_INT 105
4877: PUSH
4878: LD_INT 106
4880: PUSH
4881: LD_INT 107
4883: PUSH
4884: LD_INT 108
4886: PUSH
4887: LD_INT 109
4889: PUSH
4890: LD_INT 110
4892: PUSH
4893: LD_INT 111
4895: PUSH
4896: LD_INT 112
4898: PUSH
4899: LD_INT 113
4901: PUSH
4902: LD_INT 114
4904: PUSH
4905: LD_INT 116
4907: PUSH
4908: LD_INT 117
4910: PUSH
4911: LD_INT 118
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: ST_TO_ADDR
4937: GO 6392
4939: LD_INT 13
4941: DOUBLE
4942: EQUAL
4943: IFTRUE 4947
4945: GO 5155
4947: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
4948: LD_ADDR_VAR 0 2
4952: PUSH
4953: LD_INT 1
4955: PUSH
4956: LD_INT 2
4958: PUSH
4959: LD_INT 3
4961: PUSH
4962: LD_INT 4
4964: PUSH
4965: LD_INT 5
4967: PUSH
4968: LD_INT 8
4970: PUSH
4971: LD_INT 9
4973: PUSH
4974: LD_INT 10
4976: PUSH
4977: LD_INT 11
4979: PUSH
4980: LD_INT 12
4982: PUSH
4983: LD_INT 14
4985: PUSH
4986: LD_INT 15
4988: PUSH
4989: LD_INT 16
4991: PUSH
4992: LD_INT 17
4994: PUSH
4995: LD_INT 18
4997: PUSH
4998: LD_INT 19
5000: PUSH
5001: LD_INT 20
5003: PUSH
5004: LD_INT 21
5006: PUSH
5007: LD_INT 22
5009: PUSH
5010: LD_INT 23
5012: PUSH
5013: LD_INT 24
5015: PUSH
5016: LD_INT 25
5018: PUSH
5019: LD_INT 26
5021: PUSH
5022: LD_INT 27
5024: PUSH
5025: LD_INT 28
5027: PUSH
5028: LD_INT 30
5030: PUSH
5031: LD_INT 31
5033: PUSH
5034: LD_INT 32
5036: PUSH
5037: LD_INT 33
5039: PUSH
5040: LD_INT 34
5042: PUSH
5043: LD_INT 36
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: LIST
5050: LIST
5051: LIST
5052: LIST
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: LIST
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: PUSH
5079: LD_INT 101
5081: PUSH
5082: LD_INT 102
5084: PUSH
5085: LD_INT 103
5087: PUSH
5088: LD_INT 104
5090: PUSH
5091: LD_INT 105
5093: PUSH
5094: LD_INT 106
5096: PUSH
5097: LD_INT 107
5099: PUSH
5100: LD_INT 108
5102: PUSH
5103: LD_INT 109
5105: PUSH
5106: LD_INT 110
5108: PUSH
5109: LD_INT 111
5111: PUSH
5112: LD_INT 112
5114: PUSH
5115: LD_INT 113
5117: PUSH
5118: LD_INT 114
5120: PUSH
5121: LD_INT 116
5123: PUSH
5124: LD_INT 117
5126: PUSH
5127: LD_INT 118
5129: PUSH
5130: EMPTY
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: LIST
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: ST_TO_ADDR
5153: GO 6392
5155: LD_INT 14
5157: DOUBLE
5158: EQUAL
5159: IFTRUE 5163
5161: GO 5387
5163: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5164: LD_ADDR_VAR 0 2
5168: PUSH
5169: LD_INT 1
5171: PUSH
5172: LD_INT 2
5174: PUSH
5175: LD_INT 3
5177: PUSH
5178: LD_INT 4
5180: PUSH
5181: LD_INT 5
5183: PUSH
5184: LD_INT 6
5186: PUSH
5187: LD_INT 7
5189: PUSH
5190: LD_INT 8
5192: PUSH
5193: LD_INT 9
5195: PUSH
5196: LD_INT 10
5198: PUSH
5199: LD_INT 11
5201: PUSH
5202: LD_INT 12
5204: PUSH
5205: LD_INT 13
5207: PUSH
5208: LD_INT 14
5210: PUSH
5211: LD_INT 15
5213: PUSH
5214: LD_INT 16
5216: PUSH
5217: LD_INT 17
5219: PUSH
5220: LD_INT 18
5222: PUSH
5223: LD_INT 19
5225: PUSH
5226: LD_INT 20
5228: PUSH
5229: LD_INT 21
5231: PUSH
5232: LD_INT 22
5234: PUSH
5235: LD_INT 23
5237: PUSH
5238: LD_INT 24
5240: PUSH
5241: LD_INT 25
5243: PUSH
5244: LD_INT 26
5246: PUSH
5247: LD_INT 27
5249: PUSH
5250: LD_INT 28
5252: PUSH
5253: LD_INT 29
5255: PUSH
5256: LD_INT 30
5258: PUSH
5259: LD_INT 31
5261: PUSH
5262: LD_INT 32
5264: PUSH
5265: LD_INT 33
5267: PUSH
5268: LD_INT 34
5270: PUSH
5271: LD_INT 36
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: PUSH
5311: LD_INT 101
5313: PUSH
5314: LD_INT 102
5316: PUSH
5317: LD_INT 103
5319: PUSH
5320: LD_INT 104
5322: PUSH
5323: LD_INT 105
5325: PUSH
5326: LD_INT 106
5328: PUSH
5329: LD_INT 107
5331: PUSH
5332: LD_INT 108
5334: PUSH
5335: LD_INT 109
5337: PUSH
5338: LD_INT 110
5340: PUSH
5341: LD_INT 111
5343: PUSH
5344: LD_INT 112
5346: PUSH
5347: LD_INT 113
5349: PUSH
5350: LD_INT 114
5352: PUSH
5353: LD_INT 116
5355: PUSH
5356: LD_INT 117
5358: PUSH
5359: LD_INT 118
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: LIST
5379: LIST
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: ST_TO_ADDR
5385: GO 6392
5387: LD_INT 15
5389: DOUBLE
5390: EQUAL
5391: IFTRUE 5395
5393: GO 5619
5395: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5396: LD_ADDR_VAR 0 2
5400: PUSH
5401: LD_INT 1
5403: PUSH
5404: LD_INT 2
5406: PUSH
5407: LD_INT 3
5409: PUSH
5410: LD_INT 4
5412: PUSH
5413: LD_INT 5
5415: PUSH
5416: LD_INT 6
5418: PUSH
5419: LD_INT 7
5421: PUSH
5422: LD_INT 8
5424: PUSH
5425: LD_INT 9
5427: PUSH
5428: LD_INT 10
5430: PUSH
5431: LD_INT 11
5433: PUSH
5434: LD_INT 12
5436: PUSH
5437: LD_INT 13
5439: PUSH
5440: LD_INT 14
5442: PUSH
5443: LD_INT 15
5445: PUSH
5446: LD_INT 16
5448: PUSH
5449: LD_INT 17
5451: PUSH
5452: LD_INT 18
5454: PUSH
5455: LD_INT 19
5457: PUSH
5458: LD_INT 20
5460: PUSH
5461: LD_INT 21
5463: PUSH
5464: LD_INT 22
5466: PUSH
5467: LD_INT 23
5469: PUSH
5470: LD_INT 24
5472: PUSH
5473: LD_INT 25
5475: PUSH
5476: LD_INT 26
5478: PUSH
5479: LD_INT 27
5481: PUSH
5482: LD_INT 28
5484: PUSH
5485: LD_INT 29
5487: PUSH
5488: LD_INT 30
5490: PUSH
5491: LD_INT 31
5493: PUSH
5494: LD_INT 32
5496: PUSH
5497: LD_INT 33
5499: PUSH
5500: LD_INT 34
5502: PUSH
5503: LD_INT 36
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: LIST
5519: LIST
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: PUSH
5543: LD_INT 101
5545: PUSH
5546: LD_INT 102
5548: PUSH
5549: LD_INT 103
5551: PUSH
5552: LD_INT 104
5554: PUSH
5555: LD_INT 105
5557: PUSH
5558: LD_INT 106
5560: PUSH
5561: LD_INT 107
5563: PUSH
5564: LD_INT 108
5566: PUSH
5567: LD_INT 109
5569: PUSH
5570: LD_INT 110
5572: PUSH
5573: LD_INT 111
5575: PUSH
5576: LD_INT 112
5578: PUSH
5579: LD_INT 113
5581: PUSH
5582: LD_INT 114
5584: PUSH
5585: LD_INT 116
5587: PUSH
5588: LD_INT 117
5590: PUSH
5591: LD_INT 118
5593: PUSH
5594: EMPTY
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: PUSH
5613: EMPTY
5614: LIST
5615: LIST
5616: ST_TO_ADDR
5617: GO 6392
5619: LD_INT 16
5621: DOUBLE
5622: EQUAL
5623: IFTRUE 5627
5625: GO 5763
5627: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
5628: LD_ADDR_VAR 0 2
5632: PUSH
5633: LD_INT 2
5635: PUSH
5636: LD_INT 4
5638: PUSH
5639: LD_INT 5
5641: PUSH
5642: LD_INT 7
5644: PUSH
5645: LD_INT 11
5647: PUSH
5648: LD_INT 12
5650: PUSH
5651: LD_INT 15
5653: PUSH
5654: LD_INT 16
5656: PUSH
5657: LD_INT 20
5659: PUSH
5660: LD_INT 21
5662: PUSH
5663: LD_INT 22
5665: PUSH
5666: LD_INT 23
5668: PUSH
5669: LD_INT 25
5671: PUSH
5672: LD_INT 26
5674: PUSH
5675: LD_INT 30
5677: PUSH
5678: LD_INT 31
5680: PUSH
5681: LD_INT 32
5683: PUSH
5684: LD_INT 33
5686: PUSH
5687: LD_INT 34
5689: PUSH
5690: EMPTY
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: PUSH
5711: LD_INT 101
5713: PUSH
5714: LD_INT 102
5716: PUSH
5717: LD_INT 103
5719: PUSH
5720: LD_INT 106
5722: PUSH
5723: LD_INT 108
5725: PUSH
5726: LD_INT 112
5728: PUSH
5729: LD_INT 113
5731: PUSH
5732: LD_INT 114
5734: PUSH
5735: LD_INT 116
5737: PUSH
5738: LD_INT 117
5740: PUSH
5741: LD_INT 118
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: LIST
5755: LIST
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: ST_TO_ADDR
5761: GO 6392
5763: LD_INT 17
5765: DOUBLE
5766: EQUAL
5767: IFTRUE 5771
5769: GO 5995
5771: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
5772: LD_ADDR_VAR 0 2
5776: PUSH
5777: LD_INT 1
5779: PUSH
5780: LD_INT 2
5782: PUSH
5783: LD_INT 3
5785: PUSH
5786: LD_INT 4
5788: PUSH
5789: LD_INT 5
5791: PUSH
5792: LD_INT 6
5794: PUSH
5795: LD_INT 7
5797: PUSH
5798: LD_INT 8
5800: PUSH
5801: LD_INT 9
5803: PUSH
5804: LD_INT 10
5806: PUSH
5807: LD_INT 11
5809: PUSH
5810: LD_INT 12
5812: PUSH
5813: LD_INT 13
5815: PUSH
5816: LD_INT 14
5818: PUSH
5819: LD_INT 15
5821: PUSH
5822: LD_INT 16
5824: PUSH
5825: LD_INT 17
5827: PUSH
5828: LD_INT 18
5830: PUSH
5831: LD_INT 19
5833: PUSH
5834: LD_INT 20
5836: PUSH
5837: LD_INT 21
5839: PUSH
5840: LD_INT 22
5842: PUSH
5843: LD_INT 23
5845: PUSH
5846: LD_INT 24
5848: PUSH
5849: LD_INT 25
5851: PUSH
5852: LD_INT 26
5854: PUSH
5855: LD_INT 27
5857: PUSH
5858: LD_INT 28
5860: PUSH
5861: LD_INT 29
5863: PUSH
5864: LD_INT 30
5866: PUSH
5867: LD_INT 31
5869: PUSH
5870: LD_INT 32
5872: PUSH
5873: LD_INT 33
5875: PUSH
5876: LD_INT 34
5878: PUSH
5879: LD_INT 36
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: PUSH
5919: LD_INT 101
5921: PUSH
5922: LD_INT 102
5924: PUSH
5925: LD_INT 103
5927: PUSH
5928: LD_INT 104
5930: PUSH
5931: LD_INT 105
5933: PUSH
5934: LD_INT 106
5936: PUSH
5937: LD_INT 107
5939: PUSH
5940: LD_INT 108
5942: PUSH
5943: LD_INT 109
5945: PUSH
5946: LD_INT 110
5948: PUSH
5949: LD_INT 111
5951: PUSH
5952: LD_INT 112
5954: PUSH
5955: LD_INT 113
5957: PUSH
5958: LD_INT 114
5960: PUSH
5961: LD_INT 116
5963: PUSH
5964: LD_INT 117
5966: PUSH
5967: LD_INT 118
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: PUSH
5989: EMPTY
5990: LIST
5991: LIST
5992: ST_TO_ADDR
5993: GO 6392
5995: LD_INT 18
5997: DOUBLE
5998: EQUAL
5999: IFTRUE 6003
6001: GO 6151
6003: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6004: LD_ADDR_VAR 0 2
6008: PUSH
6009: LD_INT 2
6011: PUSH
6012: LD_INT 4
6014: PUSH
6015: LD_INT 5
6017: PUSH
6018: LD_INT 7
6020: PUSH
6021: LD_INT 11
6023: PUSH
6024: LD_INT 12
6026: PUSH
6027: LD_INT 15
6029: PUSH
6030: LD_INT 16
6032: PUSH
6033: LD_INT 20
6035: PUSH
6036: LD_INT 21
6038: PUSH
6039: LD_INT 22
6041: PUSH
6042: LD_INT 23
6044: PUSH
6045: LD_INT 25
6047: PUSH
6048: LD_INT 26
6050: PUSH
6051: LD_INT 30
6053: PUSH
6054: LD_INT 31
6056: PUSH
6057: LD_INT 32
6059: PUSH
6060: LD_INT 33
6062: PUSH
6063: LD_INT 34
6065: PUSH
6066: LD_INT 35
6068: PUSH
6069: LD_INT 36
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: PUSH
6095: LD_INT 101
6097: PUSH
6098: LD_INT 102
6100: PUSH
6101: LD_INT 103
6103: PUSH
6104: LD_INT 106
6106: PUSH
6107: LD_INT 108
6109: PUSH
6110: LD_INT 112
6112: PUSH
6113: LD_INT 113
6115: PUSH
6116: LD_INT 114
6118: PUSH
6119: LD_INT 115
6121: PUSH
6122: LD_INT 116
6124: PUSH
6125: LD_INT 117
6127: PUSH
6128: LD_INT 118
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: ST_TO_ADDR
6149: GO 6392
6151: LD_INT 19
6153: DOUBLE
6154: EQUAL
6155: IFTRUE 6159
6157: GO 6391
6159: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6160: LD_ADDR_VAR 0 2
6164: PUSH
6165: LD_INT 1
6167: PUSH
6168: LD_INT 2
6170: PUSH
6171: LD_INT 3
6173: PUSH
6174: LD_INT 4
6176: PUSH
6177: LD_INT 5
6179: PUSH
6180: LD_INT 6
6182: PUSH
6183: LD_INT 7
6185: PUSH
6186: LD_INT 8
6188: PUSH
6189: LD_INT 9
6191: PUSH
6192: LD_INT 10
6194: PUSH
6195: LD_INT 11
6197: PUSH
6198: LD_INT 12
6200: PUSH
6201: LD_INT 13
6203: PUSH
6204: LD_INT 14
6206: PUSH
6207: LD_INT 15
6209: PUSH
6210: LD_INT 16
6212: PUSH
6213: LD_INT 17
6215: PUSH
6216: LD_INT 18
6218: PUSH
6219: LD_INT 19
6221: PUSH
6222: LD_INT 20
6224: PUSH
6225: LD_INT 21
6227: PUSH
6228: LD_INT 22
6230: PUSH
6231: LD_INT 23
6233: PUSH
6234: LD_INT 24
6236: PUSH
6237: LD_INT 25
6239: PUSH
6240: LD_INT 26
6242: PUSH
6243: LD_INT 27
6245: PUSH
6246: LD_INT 28
6248: PUSH
6249: LD_INT 29
6251: PUSH
6252: LD_INT 30
6254: PUSH
6255: LD_INT 31
6257: PUSH
6258: LD_INT 32
6260: PUSH
6261: LD_INT 33
6263: PUSH
6264: LD_INT 34
6266: PUSH
6267: LD_INT 35
6269: PUSH
6270: LD_INT 36
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: PUSH
6311: LD_INT 101
6313: PUSH
6314: LD_INT 102
6316: PUSH
6317: LD_INT 103
6319: PUSH
6320: LD_INT 104
6322: PUSH
6323: LD_INT 105
6325: PUSH
6326: LD_INT 106
6328: PUSH
6329: LD_INT 107
6331: PUSH
6332: LD_INT 108
6334: PUSH
6335: LD_INT 109
6337: PUSH
6338: LD_INT 110
6340: PUSH
6341: LD_INT 111
6343: PUSH
6344: LD_INT 112
6346: PUSH
6347: LD_INT 113
6349: PUSH
6350: LD_INT 114
6352: PUSH
6353: LD_INT 115
6355: PUSH
6356: LD_INT 116
6358: PUSH
6359: LD_INT 117
6361: PUSH
6362: LD_INT 118
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: ST_TO_ADDR
6389: GO 6392
6391: POP
// end else
6392: GO 6623
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6394: LD_ADDR_VAR 0 2
6398: PUSH
6399: LD_INT 1
6401: PUSH
6402: LD_INT 2
6404: PUSH
6405: LD_INT 3
6407: PUSH
6408: LD_INT 4
6410: PUSH
6411: LD_INT 5
6413: PUSH
6414: LD_INT 6
6416: PUSH
6417: LD_INT 7
6419: PUSH
6420: LD_INT 8
6422: PUSH
6423: LD_INT 9
6425: PUSH
6426: LD_INT 10
6428: PUSH
6429: LD_INT 11
6431: PUSH
6432: LD_INT 12
6434: PUSH
6435: LD_INT 13
6437: PUSH
6438: LD_INT 14
6440: PUSH
6441: LD_INT 15
6443: PUSH
6444: LD_INT 16
6446: PUSH
6447: LD_INT 17
6449: PUSH
6450: LD_INT 18
6452: PUSH
6453: LD_INT 19
6455: PUSH
6456: LD_INT 20
6458: PUSH
6459: LD_INT 21
6461: PUSH
6462: LD_INT 22
6464: PUSH
6465: LD_INT 23
6467: PUSH
6468: LD_INT 24
6470: PUSH
6471: LD_INT 25
6473: PUSH
6474: LD_INT 26
6476: PUSH
6477: LD_INT 27
6479: PUSH
6480: LD_INT 28
6482: PUSH
6483: LD_INT 29
6485: PUSH
6486: LD_INT 30
6488: PUSH
6489: LD_INT 31
6491: PUSH
6492: LD_INT 32
6494: PUSH
6495: LD_INT 33
6497: PUSH
6498: LD_INT 34
6500: PUSH
6501: LD_INT 35
6503: PUSH
6504: LD_INT 36
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: PUSH
6545: LD_INT 101
6547: PUSH
6548: LD_INT 102
6550: PUSH
6551: LD_INT 103
6553: PUSH
6554: LD_INT 104
6556: PUSH
6557: LD_INT 105
6559: PUSH
6560: LD_INT 106
6562: PUSH
6563: LD_INT 107
6565: PUSH
6566: LD_INT 108
6568: PUSH
6569: LD_INT 109
6571: PUSH
6572: LD_INT 110
6574: PUSH
6575: LD_INT 111
6577: PUSH
6578: LD_INT 112
6580: PUSH
6581: LD_INT 113
6583: PUSH
6584: LD_INT 114
6586: PUSH
6587: LD_INT 115
6589: PUSH
6590: LD_INT 116
6592: PUSH
6593: LD_INT 117
6595: PUSH
6596: LD_INT 118
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: ST_TO_ADDR
// if result then
6623: LD_VAR 0 2
6627: IFFALSE 7413
// begin normal :=  ;
6629: LD_ADDR_VAR 0 5
6633: PUSH
6634: LD_STRING 
6636: ST_TO_ADDR
// hardcore :=  ;
6637: LD_ADDR_VAR 0 6
6641: PUSH
6642: LD_STRING 
6644: ST_TO_ADDR
// active :=  ;
6645: LD_ADDR_VAR 0 7
6649: PUSH
6650: LD_STRING 
6652: ST_TO_ADDR
// for i = 1 to normalCounter do
6653: LD_ADDR_VAR 0 8
6657: PUSH
6658: DOUBLE
6659: LD_INT 1
6661: DEC
6662: ST_TO_ADDR
6663: LD_EXP 4
6667: PUSH
6668: FOR_TO
6669: IFFALSE 6770
// begin tmp := 0 ;
6671: LD_ADDR_VAR 0 3
6675: PUSH
6676: LD_STRING 0
6678: ST_TO_ADDR
// if result [ 1 ] then
6679: LD_VAR 0 2
6683: PUSH
6684: LD_INT 1
6686: ARRAY
6687: IFFALSE 6752
// if result [ 1 ] [ 1 ] = i then
6689: LD_VAR 0 2
6693: PUSH
6694: LD_INT 1
6696: ARRAY
6697: PUSH
6698: LD_INT 1
6700: ARRAY
6701: PUSH
6702: LD_VAR 0 8
6706: EQUAL
6707: IFFALSE 6752
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6709: LD_ADDR_VAR 0 2
6713: PUSH
6714: LD_VAR 0 2
6718: PPUSH
6719: LD_INT 1
6721: PPUSH
6722: LD_VAR 0 2
6726: PUSH
6727: LD_INT 1
6729: ARRAY
6730: PPUSH
6731: LD_INT 1
6733: PPUSH
6734: CALL_OW 3
6738: PPUSH
6739: CALL_OW 1
6743: ST_TO_ADDR
// tmp := 1 ;
6744: LD_ADDR_VAR 0 3
6748: PUSH
6749: LD_STRING 1
6751: ST_TO_ADDR
// end ; normal := normal & tmp ;
6752: LD_ADDR_VAR 0 5
6756: PUSH
6757: LD_VAR 0 5
6761: PUSH
6762: LD_VAR 0 3
6766: STR
6767: ST_TO_ADDR
// end ;
6768: GO 6668
6770: POP
6771: POP
// for i = 1 to hardcoreCounter do
6772: LD_ADDR_VAR 0 8
6776: PUSH
6777: DOUBLE
6778: LD_INT 1
6780: DEC
6781: ST_TO_ADDR
6782: LD_EXP 5
6786: PUSH
6787: FOR_TO
6788: IFFALSE 6893
// begin tmp := 0 ;
6790: LD_ADDR_VAR 0 3
6794: PUSH
6795: LD_STRING 0
6797: ST_TO_ADDR
// if result [ 2 ] then
6798: LD_VAR 0 2
6802: PUSH
6803: LD_INT 2
6805: ARRAY
6806: IFFALSE 6875
// if result [ 2 ] [ 1 ] = 100 + i then
6808: LD_VAR 0 2
6812: PUSH
6813: LD_INT 2
6815: ARRAY
6816: PUSH
6817: LD_INT 1
6819: ARRAY
6820: PUSH
6821: LD_INT 100
6823: PUSH
6824: LD_VAR 0 8
6828: PLUS
6829: EQUAL
6830: IFFALSE 6875
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6832: LD_ADDR_VAR 0 2
6836: PUSH
6837: LD_VAR 0 2
6841: PPUSH
6842: LD_INT 2
6844: PPUSH
6845: LD_VAR 0 2
6849: PUSH
6850: LD_INT 2
6852: ARRAY
6853: PPUSH
6854: LD_INT 1
6856: PPUSH
6857: CALL_OW 3
6861: PPUSH
6862: CALL_OW 1
6866: ST_TO_ADDR
// tmp := 1 ;
6867: LD_ADDR_VAR 0 3
6871: PUSH
6872: LD_STRING 1
6874: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6875: LD_ADDR_VAR 0 6
6879: PUSH
6880: LD_VAR 0 6
6884: PUSH
6885: LD_VAR 0 3
6889: STR
6890: ST_TO_ADDR
// end ;
6891: GO 6787
6893: POP
6894: POP
// if isGameLoad then
6895: LD_VAR 0 1
6899: IFFALSE 7374
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
6901: LD_ADDR_VAR 0 4
6905: PUSH
6906: LD_EXP 8
6910: PUSH
6911: LD_EXP 7
6915: PUSH
6916: LD_EXP 9
6920: PUSH
6921: LD_EXP 6
6925: PUSH
6926: LD_EXP 10
6930: PUSH
6931: LD_EXP 11
6935: PUSH
6936: LD_EXP 12
6940: PUSH
6941: LD_EXP 13
6945: PUSH
6946: LD_EXP 14
6950: PUSH
6951: LD_EXP 15
6955: PUSH
6956: LD_EXP 16
6960: PUSH
6961: LD_EXP 17
6965: PUSH
6966: LD_EXP 18
6970: PUSH
6971: LD_EXP 19
6975: PUSH
6976: LD_EXP 27
6980: PUSH
6981: LD_EXP 28
6985: PUSH
6986: LD_EXP 29
6990: PUSH
6991: LD_EXP 30
6995: PUSH
6996: LD_EXP 32
7000: PUSH
7001: LD_EXP 33
7005: PUSH
7006: LD_EXP 34
7010: PUSH
7011: LD_EXP 37
7015: PUSH
7016: LD_EXP 39
7020: PUSH
7021: LD_EXP 40
7025: PUSH
7026: LD_EXP 41
7030: PUSH
7031: LD_EXP 43
7035: PUSH
7036: LD_EXP 44
7040: PUSH
7041: LD_EXP 47
7045: PUSH
7046: LD_EXP 48
7050: PUSH
7051: LD_EXP 49
7055: PUSH
7056: LD_EXP 50
7060: PUSH
7061: LD_EXP 51
7065: PUSH
7066: LD_EXP 52
7070: PUSH
7071: LD_EXP 53
7075: PUSH
7076: LD_EXP 54
7080: PUSH
7081: LD_EXP 55
7085: PUSH
7086: LD_EXP 20
7090: PUSH
7091: LD_EXP 21
7095: PUSH
7096: LD_EXP 24
7100: PUSH
7101: LD_EXP 25
7105: PUSH
7106: LD_EXP 26
7110: PUSH
7111: LD_EXP 22
7115: PUSH
7116: LD_EXP 23
7120: PUSH
7121: LD_EXP 31
7125: PUSH
7126: LD_EXP 35
7130: PUSH
7131: LD_EXP 36
7135: PUSH
7136: LD_EXP 38
7140: PUSH
7141: LD_EXP 42
7145: PUSH
7146: LD_EXP 45
7150: PUSH
7151: LD_EXP 46
7155: PUSH
7156: LD_EXP 56
7160: PUSH
7161: LD_EXP 57
7165: PUSH
7166: LD_EXP 58
7170: PUSH
7171: LD_EXP 59
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: ST_TO_ADDR
// tmp :=  ;
7232: LD_ADDR_VAR 0 3
7236: PUSH
7237: LD_STRING 
7239: ST_TO_ADDR
// for i = 1 to normalCounter do
7240: LD_ADDR_VAR 0 8
7244: PUSH
7245: DOUBLE
7246: LD_INT 1
7248: DEC
7249: ST_TO_ADDR
7250: LD_EXP 4
7254: PUSH
7255: FOR_TO
7256: IFFALSE 7292
// begin if flags [ i ] then
7258: LD_VAR 0 4
7262: PUSH
7263: LD_VAR 0 8
7267: ARRAY
7268: IFFALSE 7290
// tmp := tmp & i & ; ;
7270: LD_ADDR_VAR 0 3
7274: PUSH
7275: LD_VAR 0 3
7279: PUSH
7280: LD_VAR 0 8
7284: STR
7285: PUSH
7286: LD_STRING ;
7288: STR
7289: ST_TO_ADDR
// end ;
7290: GO 7255
7292: POP
7293: POP
// for i = 1 to hardcoreCounter do
7294: LD_ADDR_VAR 0 8
7298: PUSH
7299: DOUBLE
7300: LD_INT 1
7302: DEC
7303: ST_TO_ADDR
7304: LD_EXP 5
7308: PUSH
7309: FOR_TO
7310: IFFALSE 7356
// begin if flags [ normalCounter + i ] then
7312: LD_VAR 0 4
7316: PUSH
7317: LD_EXP 4
7321: PUSH
7322: LD_VAR 0 8
7326: PLUS
7327: ARRAY
7328: IFFALSE 7354
// tmp := tmp & ( 100 + i ) & ; ;
7330: LD_ADDR_VAR 0 3
7334: PUSH
7335: LD_VAR 0 3
7339: PUSH
7340: LD_INT 100
7342: PUSH
7343: LD_VAR 0 8
7347: PLUS
7348: STR
7349: PUSH
7350: LD_STRING ;
7352: STR
7353: ST_TO_ADDR
// end ;
7354: GO 7309
7356: POP
7357: POP
// if tmp then
7358: LD_VAR 0 3
7362: IFFALSE 7374
// active := tmp ;
7364: LD_ADDR_VAR 0 7
7368: PUSH
7369: LD_VAR 0 3
7373: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7374: LD_STRING getStreamItemsFromMission("
7376: PUSH
7377: LD_VAR 0 5
7381: STR
7382: PUSH
7383: LD_STRING ","
7385: STR
7386: PUSH
7387: LD_VAR 0 6
7391: STR
7392: PUSH
7393: LD_STRING ","
7395: STR
7396: PUSH
7397: LD_VAR 0 7
7401: STR
7402: PUSH
7403: LD_STRING ")
7405: STR
7406: PPUSH
7407: CALL_OW 559
// end else
7411: GO 7420
// ToLua ( getStreamItemsFromMission("","","") ) ;
7413: LD_STRING getStreamItemsFromMission("","","")
7415: PPUSH
7416: CALL_OW 559
// end ;
7420: LD_VAR 0 2
7424: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7425: LD_EXP 3
7429: PUSH
7430: LD_EXP 8
7434: AND
7435: IFFALSE 7559
7437: GO 7439
7439: DISABLE
7440: LD_INT 0
7442: PPUSH
7443: PPUSH
// begin enable ;
7444: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7445: LD_ADDR_VAR 0 2
7449: PUSH
7450: LD_INT 22
7452: PUSH
7453: LD_OWVAR 2
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: LD_INT 2
7464: PUSH
7465: LD_INT 34
7467: PUSH
7468: LD_INT 7
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: LD_INT 34
7477: PUSH
7478: LD_INT 45
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: LD_INT 34
7487: PUSH
7488: LD_INT 28
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PUSH
7495: LD_INT 34
7497: PUSH
7498: LD_INT 47
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PPUSH
7516: CALL_OW 69
7520: ST_TO_ADDR
// if not tmp then
7521: LD_VAR 0 2
7525: NOT
7526: IFFALSE 7530
// exit ;
7528: GO 7559
// for i in tmp do
7530: LD_ADDR_VAR 0 1
7534: PUSH
7535: LD_VAR 0 2
7539: PUSH
7540: FOR_IN
7541: IFFALSE 7557
// begin SetLives ( i , 0 ) ;
7543: LD_VAR 0 1
7547: PPUSH
7548: LD_INT 0
7550: PPUSH
7551: CALL_OW 234
// end ;
7555: GO 7540
7557: POP
7558: POP
// end ;
7559: PPOPN 2
7561: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7562: LD_EXP 3
7566: PUSH
7567: LD_EXP 9
7571: AND
7572: IFFALSE 7656
7574: GO 7576
7576: DISABLE
7577: LD_INT 0
7579: PPUSH
7580: PPUSH
// begin enable ;
7581: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7582: LD_ADDR_VAR 0 2
7586: PUSH
7587: LD_INT 22
7589: PUSH
7590: LD_OWVAR 2
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: PUSH
7599: LD_INT 32
7601: PUSH
7602: LD_INT 3
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: PPUSH
7613: CALL_OW 69
7617: ST_TO_ADDR
// if not tmp then
7618: LD_VAR 0 2
7622: NOT
7623: IFFALSE 7627
// exit ;
7625: GO 7656
// for i in tmp do
7627: LD_ADDR_VAR 0 1
7631: PUSH
7632: LD_VAR 0 2
7636: PUSH
7637: FOR_IN
7638: IFFALSE 7654
// begin SetLives ( i , 0 ) ;
7640: LD_VAR 0 1
7644: PPUSH
7645: LD_INT 0
7647: PPUSH
7648: CALL_OW 234
// end ;
7652: GO 7637
7654: POP
7655: POP
// end ;
7656: PPOPN 2
7658: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7659: LD_EXP 3
7663: PUSH
7664: LD_EXP 6
7668: AND
7669: IFFALSE 7762
7671: GO 7673
7673: DISABLE
7674: LD_INT 0
7676: PPUSH
// begin enable ;
7677: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7678: LD_ADDR_VAR 0 1
7682: PUSH
7683: LD_INT 22
7685: PUSH
7686: LD_OWVAR 2
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: PUSH
7695: LD_INT 2
7697: PUSH
7698: LD_INT 25
7700: PUSH
7701: LD_INT 5
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PUSH
7708: LD_INT 25
7710: PUSH
7711: LD_INT 9
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PUSH
7718: LD_INT 25
7720: PUSH
7721: LD_INT 8
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: PPUSH
7738: CALL_OW 69
7742: PUSH
7743: FOR_IN
7744: IFFALSE 7760
// begin SetClass ( i , 1 ) ;
7746: LD_VAR 0 1
7750: PPUSH
7751: LD_INT 1
7753: PPUSH
7754: CALL_OW 336
// end ;
7758: GO 7743
7760: POP
7761: POP
// end ;
7762: PPOPN 1
7764: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7765: LD_EXP 3
7769: PUSH
7770: LD_EXP 7
7774: AND
7775: PUSH
7776: LD_OWVAR 65
7780: PUSH
7781: LD_INT 7
7783: LESS
7784: AND
7785: IFFALSE 7799
7787: GO 7789
7789: DISABLE
// begin enable ;
7790: ENABLE
// game_speed := 7 ;
7791: LD_ADDR_OWVAR 65
7795: PUSH
7796: LD_INT 7
7798: ST_TO_ADDR
// end ;
7799: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7800: LD_EXP 3
7804: PUSH
7805: LD_EXP 10
7809: AND
7810: IFFALSE 8012
7812: GO 7814
7814: DISABLE
7815: LD_INT 0
7817: PPUSH
7818: PPUSH
7819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7820: LD_ADDR_VAR 0 3
7824: PUSH
7825: LD_INT 81
7827: PUSH
7828: LD_OWVAR 2
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: PUSH
7837: LD_INT 21
7839: PUSH
7840: LD_INT 1
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PPUSH
7851: CALL_OW 69
7855: ST_TO_ADDR
// if not tmp then
7856: LD_VAR 0 3
7860: NOT
7861: IFFALSE 7865
// exit ;
7863: GO 8012
// if tmp > 5 then
7865: LD_VAR 0 3
7869: PUSH
7870: LD_INT 5
7872: GREATER
7873: IFFALSE 7885
// k := 5 else
7875: LD_ADDR_VAR 0 2
7879: PUSH
7880: LD_INT 5
7882: ST_TO_ADDR
7883: GO 7895
// k := tmp ;
7885: LD_ADDR_VAR 0 2
7889: PUSH
7890: LD_VAR 0 3
7894: ST_TO_ADDR
// for i := 1 to k do
7895: LD_ADDR_VAR 0 1
7899: PUSH
7900: DOUBLE
7901: LD_INT 1
7903: DEC
7904: ST_TO_ADDR
7905: LD_VAR 0 2
7909: PUSH
7910: FOR_TO
7911: IFFALSE 8010
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7913: LD_VAR 0 3
7917: PUSH
7918: LD_VAR 0 1
7922: ARRAY
7923: PPUSH
7924: LD_VAR 0 1
7928: PUSH
7929: LD_INT 4
7931: MOD
7932: PUSH
7933: LD_INT 1
7935: PLUS
7936: PPUSH
7937: CALL_OW 259
7941: PUSH
7942: LD_INT 10
7944: LESS
7945: IFFALSE 8008
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7947: LD_VAR 0 3
7951: PUSH
7952: LD_VAR 0 1
7956: ARRAY
7957: PPUSH
7958: LD_VAR 0 1
7962: PUSH
7963: LD_INT 4
7965: MOD
7966: PUSH
7967: LD_INT 1
7969: PLUS
7970: PPUSH
7971: LD_VAR 0 3
7975: PUSH
7976: LD_VAR 0 1
7980: ARRAY
7981: PPUSH
7982: LD_VAR 0 1
7986: PUSH
7987: LD_INT 4
7989: MOD
7990: PUSH
7991: LD_INT 1
7993: PLUS
7994: PPUSH
7995: CALL_OW 259
7999: PUSH
8000: LD_INT 1
8002: PLUS
8003: PPUSH
8004: CALL_OW 237
8008: GO 7910
8010: POP
8011: POP
// end ;
8012: PPOPN 3
8014: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8015: LD_EXP 3
8019: PUSH
8020: LD_EXP 11
8024: AND
8025: IFFALSE 8045
8027: GO 8029
8029: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8030: LD_INT 4
8032: PPUSH
8033: LD_OWVAR 2
8037: PPUSH
8038: LD_INT 0
8040: PPUSH
8041: CALL_OW 324
8045: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8046: LD_EXP 3
8050: PUSH
8051: LD_EXP 40
8055: AND
8056: IFFALSE 8076
8058: GO 8060
8060: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8061: LD_INT 19
8063: PPUSH
8064: LD_OWVAR 2
8068: PPUSH
8069: LD_INT 0
8071: PPUSH
8072: CALL_OW 324
8076: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8077: LD_EXP 3
8081: PUSH
8082: LD_EXP 12
8086: AND
8087: IFFALSE 8189
8089: GO 8091
8091: DISABLE
8092: LD_INT 0
8094: PPUSH
8095: PPUSH
// begin enable ;
8096: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8097: LD_ADDR_VAR 0 2
8101: PUSH
8102: LD_INT 22
8104: PUSH
8105: LD_OWVAR 2
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: PUSH
8114: LD_INT 2
8116: PUSH
8117: LD_INT 34
8119: PUSH
8120: LD_INT 11
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: PUSH
8127: LD_INT 34
8129: PUSH
8130: LD_INT 30
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: LIST
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: PPUSH
8146: CALL_OW 69
8150: ST_TO_ADDR
// if not tmp then
8151: LD_VAR 0 2
8155: NOT
8156: IFFALSE 8160
// exit ;
8158: GO 8189
// for i in tmp do
8160: LD_ADDR_VAR 0 1
8164: PUSH
8165: LD_VAR 0 2
8169: PUSH
8170: FOR_IN
8171: IFFALSE 8187
// begin SetLives ( i , 0 ) ;
8173: LD_VAR 0 1
8177: PPUSH
8178: LD_INT 0
8180: PPUSH
8181: CALL_OW 234
// end ;
8185: GO 8170
8187: POP
8188: POP
// end ;
8189: PPOPN 2
8191: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8192: LD_EXP 3
8196: PUSH
8197: LD_EXP 13
8201: AND
8202: IFFALSE 8222
8204: GO 8206
8206: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8207: LD_INT 32
8209: PPUSH
8210: LD_OWVAR 2
8214: PPUSH
8215: LD_INT 0
8217: PPUSH
8218: CALL_OW 324
8222: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8223: LD_EXP 3
8227: PUSH
8228: LD_EXP 14
8232: AND
8233: IFFALSE 8414
8235: GO 8237
8237: DISABLE
8238: LD_INT 0
8240: PPUSH
8241: PPUSH
8242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8243: LD_ADDR_VAR 0 2
8247: PUSH
8248: LD_INT 22
8250: PUSH
8251: LD_OWVAR 2
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: PUSH
8260: LD_INT 33
8262: PUSH
8263: LD_INT 3
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: PPUSH
8274: CALL_OW 69
8278: ST_TO_ADDR
// if not tmp then
8279: LD_VAR 0 2
8283: NOT
8284: IFFALSE 8288
// exit ;
8286: GO 8414
// side := 0 ;
8288: LD_ADDR_VAR 0 3
8292: PUSH
8293: LD_INT 0
8295: ST_TO_ADDR
// for i := 1 to 8 do
8296: LD_ADDR_VAR 0 1
8300: PUSH
8301: DOUBLE
8302: LD_INT 1
8304: DEC
8305: ST_TO_ADDR
8306: LD_INT 8
8308: PUSH
8309: FOR_TO
8310: IFFALSE 8358
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8312: LD_OWVAR 2
8316: PUSH
8317: LD_VAR 0 1
8321: NONEQUAL
8322: PUSH
8323: LD_OWVAR 2
8327: PPUSH
8328: LD_VAR 0 1
8332: PPUSH
8333: CALL_OW 81
8337: PUSH
8338: LD_INT 2
8340: EQUAL
8341: AND
8342: IFFALSE 8356
// begin side := i ;
8344: LD_ADDR_VAR 0 3
8348: PUSH
8349: LD_VAR 0 1
8353: ST_TO_ADDR
// break ;
8354: GO 8358
// end ;
8356: GO 8309
8358: POP
8359: POP
// if not side then
8360: LD_VAR 0 3
8364: NOT
8365: IFFALSE 8369
// exit ;
8367: GO 8414
// for i := 1 to tmp do
8369: LD_ADDR_VAR 0 1
8373: PUSH
8374: DOUBLE
8375: LD_INT 1
8377: DEC
8378: ST_TO_ADDR
8379: LD_VAR 0 2
8383: PUSH
8384: FOR_TO
8385: IFFALSE 8412
// if Prob ( 60 ) then
8387: LD_INT 60
8389: PPUSH
8390: CALL_OW 13
8394: IFFALSE 8410
// SetSide ( i , side ) ;
8396: LD_VAR 0 1
8400: PPUSH
8401: LD_VAR 0 3
8405: PPUSH
8406: CALL_OW 235
8410: GO 8384
8412: POP
8413: POP
// end ;
8414: PPOPN 3
8416: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8417: LD_EXP 3
8421: PUSH
8422: LD_EXP 16
8426: AND
8427: IFFALSE 8546
8429: GO 8431
8431: DISABLE
8432: LD_INT 0
8434: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8435: LD_ADDR_VAR 0 1
8439: PUSH
8440: LD_INT 22
8442: PUSH
8443: LD_OWVAR 2
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: PUSH
8452: LD_INT 21
8454: PUSH
8455: LD_INT 1
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: PUSH
8462: LD_INT 3
8464: PUSH
8465: LD_INT 23
8467: PUSH
8468: LD_INT 0
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: LIST
8483: PPUSH
8484: CALL_OW 69
8488: PUSH
8489: FOR_IN
8490: IFFALSE 8544
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8492: LD_VAR 0 1
8496: PPUSH
8497: CALL_OW 257
8501: PUSH
8502: LD_INT 1
8504: PUSH
8505: LD_INT 2
8507: PUSH
8508: LD_INT 3
8510: PUSH
8511: LD_INT 4
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: IN
8520: IFFALSE 8542
// SetClass ( un , rand ( 1 , 4 ) ) ;
8522: LD_VAR 0 1
8526: PPUSH
8527: LD_INT 1
8529: PPUSH
8530: LD_INT 4
8532: PPUSH
8533: CALL_OW 12
8537: PPUSH
8538: CALL_OW 336
8542: GO 8489
8544: POP
8545: POP
// end ;
8546: PPOPN 1
8548: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8549: LD_EXP 3
8553: PUSH
8554: LD_EXP 15
8558: AND
8559: IFFALSE 8638
8561: GO 8563
8563: DISABLE
8564: LD_INT 0
8566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8567: LD_ADDR_VAR 0 1
8571: PUSH
8572: LD_INT 22
8574: PUSH
8575: LD_OWVAR 2
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: PUSH
8584: LD_INT 21
8586: PUSH
8587: LD_INT 3
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PPUSH
8598: CALL_OW 69
8602: ST_TO_ADDR
// if not tmp then
8603: LD_VAR 0 1
8607: NOT
8608: IFFALSE 8612
// exit ;
8610: GO 8638
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8612: LD_VAR 0 1
8616: PUSH
8617: LD_INT 1
8619: PPUSH
8620: LD_VAR 0 1
8624: PPUSH
8625: CALL_OW 12
8629: ARRAY
8630: PPUSH
8631: LD_INT 100
8633: PPUSH
8634: CALL_OW 234
// end ;
8638: PPOPN 1
8640: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8641: LD_EXP 3
8645: PUSH
8646: LD_EXP 17
8650: AND
8651: IFFALSE 8749
8653: GO 8655
8655: DISABLE
8656: LD_INT 0
8658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8659: LD_ADDR_VAR 0 1
8663: PUSH
8664: LD_INT 22
8666: PUSH
8667: LD_OWVAR 2
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: PUSH
8676: LD_INT 21
8678: PUSH
8679: LD_INT 1
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: PPUSH
8690: CALL_OW 69
8694: ST_TO_ADDR
// if not tmp then
8695: LD_VAR 0 1
8699: NOT
8700: IFFALSE 8704
// exit ;
8702: GO 8749
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8704: LD_VAR 0 1
8708: PUSH
8709: LD_INT 1
8711: PPUSH
8712: LD_VAR 0 1
8716: PPUSH
8717: CALL_OW 12
8721: ARRAY
8722: PPUSH
8723: LD_INT 1
8725: PPUSH
8726: LD_INT 4
8728: PPUSH
8729: CALL_OW 12
8733: PPUSH
8734: LD_INT 3000
8736: PPUSH
8737: LD_INT 9000
8739: PPUSH
8740: CALL_OW 12
8744: PPUSH
8745: CALL_OW 492
// end ;
8749: PPOPN 1
8751: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8752: LD_EXP 3
8756: PUSH
8757: LD_EXP 18
8761: AND
8762: IFFALSE 8782
8764: GO 8766
8766: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8767: LD_INT 1
8769: PPUSH
8770: LD_OWVAR 2
8774: PPUSH
8775: LD_INT 0
8777: PPUSH
8778: CALL_OW 324
8782: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8783: LD_EXP 3
8787: PUSH
8788: LD_EXP 19
8792: AND
8793: IFFALSE 8876
8795: GO 8797
8797: DISABLE
8798: LD_INT 0
8800: PPUSH
8801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8802: LD_ADDR_VAR 0 2
8806: PUSH
8807: LD_INT 22
8809: PUSH
8810: LD_OWVAR 2
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PUSH
8819: LD_INT 21
8821: PUSH
8822: LD_INT 3
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PPUSH
8833: CALL_OW 69
8837: ST_TO_ADDR
// if not tmp then
8838: LD_VAR 0 2
8842: NOT
8843: IFFALSE 8847
// exit ;
8845: GO 8876
// for i in tmp do
8847: LD_ADDR_VAR 0 1
8851: PUSH
8852: LD_VAR 0 2
8856: PUSH
8857: FOR_IN
8858: IFFALSE 8874
// SetBLevel ( i , 10 ) ;
8860: LD_VAR 0 1
8864: PPUSH
8865: LD_INT 10
8867: PPUSH
8868: CALL_OW 241
8872: GO 8857
8874: POP
8875: POP
// end ;
8876: PPOPN 2
8878: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8879: LD_EXP 3
8883: PUSH
8884: LD_EXP 20
8888: AND
8889: IFFALSE 9000
8891: GO 8893
8893: DISABLE
8894: LD_INT 0
8896: PPUSH
8897: PPUSH
8898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8899: LD_ADDR_VAR 0 3
8903: PUSH
8904: LD_INT 22
8906: PUSH
8907: LD_OWVAR 2
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: PUSH
8916: LD_INT 25
8918: PUSH
8919: LD_INT 1
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PPUSH
8930: CALL_OW 69
8934: ST_TO_ADDR
// if not tmp then
8935: LD_VAR 0 3
8939: NOT
8940: IFFALSE 8944
// exit ;
8942: GO 9000
// un := tmp [ rand ( 1 , tmp ) ] ;
8944: LD_ADDR_VAR 0 2
8948: PUSH
8949: LD_VAR 0 3
8953: PUSH
8954: LD_INT 1
8956: PPUSH
8957: LD_VAR 0 3
8961: PPUSH
8962: CALL_OW 12
8966: ARRAY
8967: ST_TO_ADDR
// if Crawls ( un ) then
8968: LD_VAR 0 2
8972: PPUSH
8973: CALL_OW 318
8977: IFFALSE 8988
// ComWalk ( un ) ;
8979: LD_VAR 0 2
8983: PPUSH
8984: CALL_OW 138
// SetClass ( un , class_sniper ) ;
8988: LD_VAR 0 2
8992: PPUSH
8993: LD_INT 5
8995: PPUSH
8996: CALL_OW 336
// end ;
9000: PPOPN 3
9002: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9003: LD_EXP 3
9007: PUSH
9008: LD_EXP 21
9012: AND
9013: PUSH
9014: LD_OWVAR 67
9018: PUSH
9019: LD_INT 4
9021: LESS
9022: AND
9023: IFFALSE 9042
9025: GO 9027
9027: DISABLE
// begin Difficulty := Difficulty + 1 ;
9028: LD_ADDR_OWVAR 67
9032: PUSH
9033: LD_OWVAR 67
9037: PUSH
9038: LD_INT 1
9040: PLUS
9041: ST_TO_ADDR
// end ;
9042: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9043: LD_EXP 3
9047: PUSH
9048: LD_EXP 22
9052: AND
9053: IFFALSE 9156
9055: GO 9057
9057: DISABLE
9058: LD_INT 0
9060: PPUSH
// begin for i := 1 to 5 do
9061: LD_ADDR_VAR 0 1
9065: PUSH
9066: DOUBLE
9067: LD_INT 1
9069: DEC
9070: ST_TO_ADDR
9071: LD_INT 5
9073: PUSH
9074: FOR_TO
9075: IFFALSE 9154
// begin uc_nation := nation_nature ;
9077: LD_ADDR_OWVAR 21
9081: PUSH
9082: LD_INT 0
9084: ST_TO_ADDR
// uc_side := 0 ;
9085: LD_ADDR_OWVAR 20
9089: PUSH
9090: LD_INT 0
9092: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9093: LD_ADDR_OWVAR 29
9097: PUSH
9098: LD_INT 12
9100: PUSH
9101: LD_INT 12
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: ST_TO_ADDR
// hc_agressivity := 20 ;
9108: LD_ADDR_OWVAR 35
9112: PUSH
9113: LD_INT 20
9115: ST_TO_ADDR
// hc_class := class_tiger ;
9116: LD_ADDR_OWVAR 28
9120: PUSH
9121: LD_INT 14
9123: ST_TO_ADDR
// hc_gallery :=  ;
9124: LD_ADDR_OWVAR 33
9128: PUSH
9129: LD_STRING 
9131: ST_TO_ADDR
// hc_name :=  ;
9132: LD_ADDR_OWVAR 26
9136: PUSH
9137: LD_STRING 
9139: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9140: CALL_OW 44
9144: PPUSH
9145: LD_INT 0
9147: PPUSH
9148: CALL_OW 51
// end ;
9152: GO 9074
9154: POP
9155: POP
// end ;
9156: PPOPN 1
9158: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9159: LD_EXP 3
9163: PUSH
9164: LD_EXP 23
9168: AND
9169: IFFALSE 9178
9171: GO 9173
9173: DISABLE
// StreamSibBomb ;
9174: CALL 9179 0 0
9178: END
// export function StreamSibBomb ; var i , x , y ; begin
9179: LD_INT 0
9181: PPUSH
9182: PPUSH
9183: PPUSH
9184: PPUSH
// result := false ;
9185: LD_ADDR_VAR 0 1
9189: PUSH
9190: LD_INT 0
9192: ST_TO_ADDR
// for i := 1 to 16 do
9193: LD_ADDR_VAR 0 2
9197: PUSH
9198: DOUBLE
9199: LD_INT 1
9201: DEC
9202: ST_TO_ADDR
9203: LD_INT 16
9205: PUSH
9206: FOR_TO
9207: IFFALSE 9406
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9209: LD_ADDR_VAR 0 3
9213: PUSH
9214: LD_INT 10
9216: PUSH
9217: LD_INT 20
9219: PUSH
9220: LD_INT 30
9222: PUSH
9223: LD_INT 40
9225: PUSH
9226: LD_INT 50
9228: PUSH
9229: LD_INT 60
9231: PUSH
9232: LD_INT 70
9234: PUSH
9235: LD_INT 80
9237: PUSH
9238: LD_INT 90
9240: PUSH
9241: LD_INT 100
9243: PUSH
9244: LD_INT 110
9246: PUSH
9247: LD_INT 120
9249: PUSH
9250: LD_INT 130
9252: PUSH
9253: LD_INT 140
9255: PUSH
9256: LD_INT 150
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: PUSH
9276: LD_INT 1
9278: PPUSH
9279: LD_INT 15
9281: PPUSH
9282: CALL_OW 12
9286: ARRAY
9287: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9288: LD_ADDR_VAR 0 4
9292: PUSH
9293: LD_INT 10
9295: PUSH
9296: LD_INT 20
9298: PUSH
9299: LD_INT 30
9301: PUSH
9302: LD_INT 40
9304: PUSH
9305: LD_INT 50
9307: PUSH
9308: LD_INT 60
9310: PUSH
9311: LD_INT 70
9313: PUSH
9314: LD_INT 80
9316: PUSH
9317: LD_INT 90
9319: PUSH
9320: LD_INT 100
9322: PUSH
9323: LD_INT 110
9325: PUSH
9326: LD_INT 120
9328: PUSH
9329: LD_INT 130
9331: PUSH
9332: LD_INT 140
9334: PUSH
9335: LD_INT 150
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: PUSH
9355: LD_INT 1
9357: PPUSH
9358: LD_INT 15
9360: PPUSH
9361: CALL_OW 12
9365: ARRAY
9366: ST_TO_ADDR
// if ValidHex ( x , y ) then
9367: LD_VAR 0 3
9371: PPUSH
9372: LD_VAR 0 4
9376: PPUSH
9377: CALL_OW 488
9381: IFFALSE 9404
// begin result := [ x , y ] ;
9383: LD_ADDR_VAR 0 1
9387: PUSH
9388: LD_VAR 0 3
9392: PUSH
9393: LD_VAR 0 4
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: ST_TO_ADDR
// break ;
9402: GO 9406
// end ; end ;
9404: GO 9206
9406: POP
9407: POP
// if result then
9408: LD_VAR 0 1
9412: IFFALSE 9472
// begin ToLua ( playSibBomb() ) ;
9414: LD_STRING playSibBomb()
9416: PPUSH
9417: CALL_OW 559
// wait ( 0 0$14 ) ;
9421: LD_INT 490
9423: PPUSH
9424: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9428: LD_VAR 0 1
9432: PUSH
9433: LD_INT 1
9435: ARRAY
9436: PPUSH
9437: LD_VAR 0 1
9441: PUSH
9442: LD_INT 2
9444: ARRAY
9445: PPUSH
9446: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9450: LD_VAR 0 1
9454: PUSH
9455: LD_INT 1
9457: ARRAY
9458: PPUSH
9459: LD_VAR 0 1
9463: PUSH
9464: LD_INT 2
9466: ARRAY
9467: PPUSH
9468: CALL_OW 429
// end ; end ;
9472: LD_VAR 0 1
9476: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9477: LD_EXP 3
9481: PUSH
9482: LD_EXP 25
9486: AND
9487: IFFALSE 9499
9489: GO 9491
9491: DISABLE
// YouLost (  ) ;
9492: LD_STRING 
9494: PPUSH
9495: CALL_OW 104
9499: END
// every 0 0$1 trigger StreamModeActive and sFog do
9500: LD_EXP 3
9504: PUSH
9505: LD_EXP 24
9509: AND
9510: IFFALSE 9524
9512: GO 9514
9514: DISABLE
// FogOff ( your_side ) ;
9515: LD_OWVAR 2
9519: PPUSH
9520: CALL_OW 344
9524: END
// every 0 0$1 trigger StreamModeActive and sSun do
9525: LD_EXP 3
9529: PUSH
9530: LD_EXP 26
9534: AND
9535: IFFALSE 9563
9537: GO 9539
9539: DISABLE
// begin solar_recharge_percent := 0 ;
9540: LD_ADDR_OWVAR 79
9544: PUSH
9545: LD_INT 0
9547: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9548: LD_INT 10500
9550: PPUSH
9551: CALL_OW 67
// solar_recharge_percent := 100 ;
9555: LD_ADDR_OWVAR 79
9559: PUSH
9560: LD_INT 100
9562: ST_TO_ADDR
// end ;
9563: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9564: LD_EXP 3
9568: PUSH
9569: LD_EXP 27
9573: AND
9574: IFFALSE 9813
9576: GO 9578
9578: DISABLE
9579: LD_INT 0
9581: PPUSH
9582: PPUSH
9583: PPUSH
// begin tmp := [ ] ;
9584: LD_ADDR_VAR 0 3
9588: PUSH
9589: EMPTY
9590: ST_TO_ADDR
// for i := 1 to 6 do
9591: LD_ADDR_VAR 0 1
9595: PUSH
9596: DOUBLE
9597: LD_INT 1
9599: DEC
9600: ST_TO_ADDR
9601: LD_INT 6
9603: PUSH
9604: FOR_TO
9605: IFFALSE 9710
// begin uc_nation := nation_nature ;
9607: LD_ADDR_OWVAR 21
9611: PUSH
9612: LD_INT 0
9614: ST_TO_ADDR
// uc_side := 0 ;
9615: LD_ADDR_OWVAR 20
9619: PUSH
9620: LD_INT 0
9622: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9623: LD_ADDR_OWVAR 29
9627: PUSH
9628: LD_INT 12
9630: PUSH
9631: LD_INT 12
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: ST_TO_ADDR
// hc_agressivity := 20 ;
9638: LD_ADDR_OWVAR 35
9642: PUSH
9643: LD_INT 20
9645: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9646: LD_ADDR_OWVAR 28
9650: PUSH
9651: LD_INT 17
9653: ST_TO_ADDR
// hc_gallery :=  ;
9654: LD_ADDR_OWVAR 33
9658: PUSH
9659: LD_STRING 
9661: ST_TO_ADDR
// hc_name :=  ;
9662: LD_ADDR_OWVAR 26
9666: PUSH
9667: LD_STRING 
9669: ST_TO_ADDR
// un := CreateHuman ;
9670: LD_ADDR_VAR 0 2
9674: PUSH
9675: CALL_OW 44
9679: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9680: LD_VAR 0 2
9684: PPUSH
9685: LD_INT 1
9687: PPUSH
9688: CALL_OW 51
// tmp := tmp ^ un ;
9692: LD_ADDR_VAR 0 3
9696: PUSH
9697: LD_VAR 0 3
9701: PUSH
9702: LD_VAR 0 2
9706: ADD
9707: ST_TO_ADDR
// end ;
9708: GO 9604
9710: POP
9711: POP
// repeat wait ( 0 0$1 ) ;
9712: LD_INT 35
9714: PPUSH
9715: CALL_OW 67
// for un in tmp do
9719: LD_ADDR_VAR 0 2
9723: PUSH
9724: LD_VAR 0 3
9728: PUSH
9729: FOR_IN
9730: IFFALSE 9804
// begin if IsDead ( un ) then
9732: LD_VAR 0 2
9736: PPUSH
9737: CALL_OW 301
9741: IFFALSE 9761
// begin tmp := tmp diff un ;
9743: LD_ADDR_VAR 0 3
9747: PUSH
9748: LD_VAR 0 3
9752: PUSH
9753: LD_VAR 0 2
9757: DIFF
9758: ST_TO_ADDR
// continue ;
9759: GO 9729
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9761: LD_VAR 0 2
9765: PPUSH
9766: LD_INT 3
9768: PUSH
9769: LD_INT 22
9771: PUSH
9772: LD_INT 0
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: PPUSH
9783: CALL_OW 69
9787: PPUSH
9788: LD_VAR 0 2
9792: PPUSH
9793: CALL_OW 74
9797: PPUSH
9798: CALL_OW 115
// end ;
9802: GO 9729
9804: POP
9805: POP
// until not tmp ;
9806: LD_VAR 0 3
9810: NOT
9811: IFFALSE 9712
// end ;
9813: PPOPN 3
9815: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9816: LD_EXP 3
9820: PUSH
9821: LD_EXP 28
9825: AND
9826: IFFALSE 9880
9828: GO 9830
9830: DISABLE
// begin ToLua ( displayTroll(); ) ;
9831: LD_STRING displayTroll();
9833: PPUSH
9834: CALL_OW 559
// wait ( 3 3$00 ) ;
9838: LD_INT 6300
9840: PPUSH
9841: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9845: LD_STRING hideTroll();
9847: PPUSH
9848: CALL_OW 559
// wait ( 1 1$00 ) ;
9852: LD_INT 2100
9854: PPUSH
9855: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9859: LD_STRING displayTroll();
9861: PPUSH
9862: CALL_OW 559
// wait ( 1 1$00 ) ;
9866: LD_INT 2100
9868: PPUSH
9869: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9873: LD_STRING hideTroll();
9875: PPUSH
9876: CALL_OW 559
// end ;
9880: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9881: LD_EXP 3
9885: PUSH
9886: LD_EXP 29
9890: AND
9891: IFFALSE 9954
9893: GO 9895
9895: DISABLE
9896: LD_INT 0
9898: PPUSH
// begin p := 0 ;
9899: LD_ADDR_VAR 0 1
9903: PUSH
9904: LD_INT 0
9906: ST_TO_ADDR
// repeat game_speed := 1 ;
9907: LD_ADDR_OWVAR 65
9911: PUSH
9912: LD_INT 1
9914: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9915: LD_INT 35
9917: PPUSH
9918: CALL_OW 67
// p := p + 1 ;
9922: LD_ADDR_VAR 0 1
9926: PUSH
9927: LD_VAR 0 1
9931: PUSH
9932: LD_INT 1
9934: PLUS
9935: ST_TO_ADDR
// until p >= 60 ;
9936: LD_VAR 0 1
9940: PUSH
9941: LD_INT 60
9943: GREATEREQUAL
9944: IFFALSE 9907
// game_speed := 4 ;
9946: LD_ADDR_OWVAR 65
9950: PUSH
9951: LD_INT 4
9953: ST_TO_ADDR
// end ;
9954: PPOPN 1
9956: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9957: LD_EXP 3
9961: PUSH
9962: LD_EXP 30
9966: AND
9967: IFFALSE 10113
9969: GO 9971
9971: DISABLE
9972: LD_INT 0
9974: PPUSH
9975: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9976: LD_ADDR_VAR 0 1
9980: PUSH
9981: LD_INT 22
9983: PUSH
9984: LD_OWVAR 2
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: LD_INT 2
9995: PUSH
9996: LD_INT 30
9998: PUSH
9999: LD_INT 0
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: PUSH
10006: LD_INT 30
10008: PUSH
10009: LD_INT 1
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: LIST
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PPUSH
10025: CALL_OW 69
10029: ST_TO_ADDR
// if not depot then
10030: LD_VAR 0 1
10034: NOT
10035: IFFALSE 10039
// exit ;
10037: GO 10113
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10039: LD_ADDR_VAR 0 2
10043: PUSH
10044: LD_VAR 0 1
10048: PUSH
10049: LD_INT 1
10051: PPUSH
10052: LD_VAR 0 1
10056: PPUSH
10057: CALL_OW 12
10061: ARRAY
10062: PPUSH
10063: CALL_OW 274
10067: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10068: LD_VAR 0 2
10072: PPUSH
10073: LD_INT 1
10075: PPUSH
10076: LD_INT 0
10078: PPUSH
10079: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10083: LD_VAR 0 2
10087: PPUSH
10088: LD_INT 2
10090: PPUSH
10091: LD_INT 0
10093: PPUSH
10094: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10098: LD_VAR 0 2
10102: PPUSH
10103: LD_INT 3
10105: PPUSH
10106: LD_INT 0
10108: PPUSH
10109: CALL_OW 277
// end ;
10113: PPOPN 2
10115: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10116: LD_EXP 3
10120: PUSH
10121: LD_EXP 31
10125: AND
10126: IFFALSE 10223
10128: GO 10130
10130: DISABLE
10131: LD_INT 0
10133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10134: LD_ADDR_VAR 0 1
10138: PUSH
10139: LD_INT 22
10141: PUSH
10142: LD_OWVAR 2
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: PUSH
10151: LD_INT 21
10153: PUSH
10154: LD_INT 1
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PUSH
10161: LD_INT 3
10163: PUSH
10164: LD_INT 23
10166: PUSH
10167: LD_INT 0
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: LIST
10182: PPUSH
10183: CALL_OW 69
10187: ST_TO_ADDR
// if not tmp then
10188: LD_VAR 0 1
10192: NOT
10193: IFFALSE 10197
// exit ;
10195: GO 10223
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10197: LD_VAR 0 1
10201: PUSH
10202: LD_INT 1
10204: PPUSH
10205: LD_VAR 0 1
10209: PPUSH
10210: CALL_OW 12
10214: ARRAY
10215: PPUSH
10216: LD_INT 200
10218: PPUSH
10219: CALL_OW 234
// end ;
10223: PPOPN 1
10225: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10226: LD_EXP 3
10230: PUSH
10231: LD_EXP 32
10235: AND
10236: IFFALSE 10315
10238: GO 10240
10240: DISABLE
10241: LD_INT 0
10243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10244: LD_ADDR_VAR 0 1
10248: PUSH
10249: LD_INT 22
10251: PUSH
10252: LD_OWVAR 2
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: PUSH
10261: LD_INT 21
10263: PUSH
10264: LD_INT 2
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: PPUSH
10275: CALL_OW 69
10279: ST_TO_ADDR
// if not tmp then
10280: LD_VAR 0 1
10284: NOT
10285: IFFALSE 10289
// exit ;
10287: GO 10315
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10289: LD_VAR 0 1
10293: PUSH
10294: LD_INT 1
10296: PPUSH
10297: LD_VAR 0 1
10301: PPUSH
10302: CALL_OW 12
10306: ARRAY
10307: PPUSH
10308: LD_INT 60
10310: PPUSH
10311: CALL_OW 234
// end ;
10315: PPOPN 1
10317: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10318: LD_EXP 3
10322: PUSH
10323: LD_EXP 33
10327: AND
10328: IFFALSE 10427
10330: GO 10332
10332: DISABLE
10333: LD_INT 0
10335: PPUSH
10336: PPUSH
// begin enable ;
10337: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10338: LD_ADDR_VAR 0 1
10342: PUSH
10343: LD_INT 22
10345: PUSH
10346: LD_OWVAR 2
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: LD_INT 61
10357: PUSH
10358: EMPTY
10359: LIST
10360: PUSH
10361: LD_INT 33
10363: PUSH
10364: LD_INT 2
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: LIST
10375: PPUSH
10376: CALL_OW 69
10380: ST_TO_ADDR
// if not tmp then
10381: LD_VAR 0 1
10385: NOT
10386: IFFALSE 10390
// exit ;
10388: GO 10427
// for i in tmp do
10390: LD_ADDR_VAR 0 2
10394: PUSH
10395: LD_VAR 0 1
10399: PUSH
10400: FOR_IN
10401: IFFALSE 10425
// if IsControledBy ( i ) then
10403: LD_VAR 0 2
10407: PPUSH
10408: CALL_OW 312
10412: IFFALSE 10423
// ComUnlink ( i ) ;
10414: LD_VAR 0 2
10418: PPUSH
10419: CALL_OW 136
10423: GO 10400
10425: POP
10426: POP
// end ;
10427: PPOPN 2
10429: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10430: LD_EXP 3
10434: PUSH
10435: LD_EXP 34
10439: AND
10440: IFFALSE 10580
10442: GO 10444
10444: DISABLE
10445: LD_INT 0
10447: PPUSH
10448: PPUSH
// begin ToLua ( displayPowell(); ) ;
10449: LD_STRING displayPowell();
10451: PPUSH
10452: CALL_OW 559
// uc_side := 0 ;
10456: LD_ADDR_OWVAR 20
10460: PUSH
10461: LD_INT 0
10463: ST_TO_ADDR
// uc_nation := 2 ;
10464: LD_ADDR_OWVAR 21
10468: PUSH
10469: LD_INT 2
10471: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10472: LD_ADDR_OWVAR 37
10476: PUSH
10477: LD_INT 14
10479: ST_TO_ADDR
// vc_engine := engine_siberite ;
10480: LD_ADDR_OWVAR 39
10484: PUSH
10485: LD_INT 3
10487: ST_TO_ADDR
// vc_control := control_apeman ;
10488: LD_ADDR_OWVAR 38
10492: PUSH
10493: LD_INT 5
10495: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10496: LD_ADDR_OWVAR 40
10500: PUSH
10501: LD_INT 29
10503: ST_TO_ADDR
// un := CreateVehicle ;
10504: LD_ADDR_VAR 0 2
10508: PUSH
10509: CALL_OW 45
10513: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10514: LD_VAR 0 2
10518: PPUSH
10519: LD_INT 1
10521: PPUSH
10522: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10526: LD_INT 35
10528: PPUSH
10529: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10533: LD_VAR 0 2
10537: PPUSH
10538: LD_INT 22
10540: PUSH
10541: LD_OWVAR 2
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: PPUSH
10550: CALL_OW 69
10554: PPUSH
10555: LD_VAR 0 2
10559: PPUSH
10560: CALL_OW 74
10564: PPUSH
10565: CALL_OW 115
// until IsDead ( un ) ;
10569: LD_VAR 0 2
10573: PPUSH
10574: CALL_OW 301
10578: IFFALSE 10526
// end ;
10580: PPOPN 2
10582: END
// every 0 0$1 trigger StreamModeActive and sStu do
10583: LD_EXP 3
10587: PUSH
10588: LD_EXP 42
10592: AND
10593: IFFALSE 10609
10595: GO 10597
10597: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10598: LD_STRING displayStucuk();
10600: PPUSH
10601: CALL_OW 559
// ResetFog ;
10605: CALL_OW 335
// end ;
10609: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10610: LD_EXP 3
10614: PUSH
10615: LD_EXP 35
10619: AND
10620: IFFALSE 10761
10622: GO 10624
10624: DISABLE
10625: LD_INT 0
10627: PPUSH
10628: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10629: LD_ADDR_VAR 0 2
10633: PUSH
10634: LD_INT 22
10636: PUSH
10637: LD_OWVAR 2
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: LD_INT 21
10648: PUSH
10649: LD_INT 1
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PPUSH
10660: CALL_OW 69
10664: ST_TO_ADDR
// if not tmp then
10665: LD_VAR 0 2
10669: NOT
10670: IFFALSE 10674
// exit ;
10672: GO 10761
// un := tmp [ rand ( 1 , tmp ) ] ;
10674: LD_ADDR_VAR 0 1
10678: PUSH
10679: LD_VAR 0 2
10683: PUSH
10684: LD_INT 1
10686: PPUSH
10687: LD_VAR 0 2
10691: PPUSH
10692: CALL_OW 12
10696: ARRAY
10697: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10698: LD_VAR 0 1
10702: PPUSH
10703: LD_INT 0
10705: PPUSH
10706: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10710: LD_VAR 0 1
10714: PPUSH
10715: LD_OWVAR 3
10719: PUSH
10720: LD_VAR 0 1
10724: DIFF
10725: PPUSH
10726: LD_VAR 0 1
10730: PPUSH
10731: CALL_OW 74
10735: PPUSH
10736: CALL_OW 115
// wait ( 0 0$20 ) ;
10740: LD_INT 700
10742: PPUSH
10743: CALL_OW 67
// SetSide ( un , your_side ) ;
10747: LD_VAR 0 1
10751: PPUSH
10752: LD_OWVAR 2
10756: PPUSH
10757: CALL_OW 235
// end ;
10761: PPOPN 2
10763: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10764: LD_EXP 3
10768: PUSH
10769: LD_EXP 36
10773: AND
10774: IFFALSE 10880
10776: GO 10778
10778: DISABLE
10779: LD_INT 0
10781: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10782: LD_ADDR_VAR 0 1
10786: PUSH
10787: LD_INT 22
10789: PUSH
10790: LD_OWVAR 2
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: LD_INT 2
10801: PUSH
10802: LD_INT 30
10804: PUSH
10805: LD_INT 0
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: PUSH
10812: LD_INT 30
10814: PUSH
10815: LD_INT 1
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: LIST
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: PPUSH
10831: CALL_OW 69
10835: ST_TO_ADDR
// if not depot then
10836: LD_VAR 0 1
10840: NOT
10841: IFFALSE 10845
// exit ;
10843: GO 10880
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10845: LD_VAR 0 1
10849: PUSH
10850: LD_INT 1
10852: ARRAY
10853: PPUSH
10854: CALL_OW 250
10858: PPUSH
10859: LD_VAR 0 1
10863: PUSH
10864: LD_INT 1
10866: ARRAY
10867: PPUSH
10868: CALL_OW 251
10872: PPUSH
10873: LD_INT 70
10875: PPUSH
10876: CALL_OW 495
// end ;
10880: PPOPN 1
10882: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10883: LD_EXP 3
10887: PUSH
10888: LD_EXP 37
10892: AND
10893: IFFALSE 11104
10895: GO 10897
10897: DISABLE
10898: LD_INT 0
10900: PPUSH
10901: PPUSH
10902: PPUSH
10903: PPUSH
10904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10905: LD_ADDR_VAR 0 5
10909: PUSH
10910: LD_INT 22
10912: PUSH
10913: LD_OWVAR 2
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: LD_INT 21
10924: PUSH
10925: LD_INT 1
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: PPUSH
10936: CALL_OW 69
10940: ST_TO_ADDR
// if not tmp then
10941: LD_VAR 0 5
10945: NOT
10946: IFFALSE 10950
// exit ;
10948: GO 11104
// for i in tmp do
10950: LD_ADDR_VAR 0 1
10954: PUSH
10955: LD_VAR 0 5
10959: PUSH
10960: FOR_IN
10961: IFFALSE 11102
// begin d := rand ( 0 , 5 ) ;
10963: LD_ADDR_VAR 0 4
10967: PUSH
10968: LD_INT 0
10970: PPUSH
10971: LD_INT 5
10973: PPUSH
10974: CALL_OW 12
10978: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10979: LD_ADDR_VAR 0 2
10983: PUSH
10984: LD_VAR 0 1
10988: PPUSH
10989: CALL_OW 250
10993: PPUSH
10994: LD_VAR 0 4
10998: PPUSH
10999: LD_INT 3
11001: PPUSH
11002: LD_INT 12
11004: PPUSH
11005: CALL_OW 12
11009: PPUSH
11010: CALL_OW 272
11014: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11015: LD_ADDR_VAR 0 3
11019: PUSH
11020: LD_VAR 0 1
11024: PPUSH
11025: CALL_OW 251
11029: PPUSH
11030: LD_VAR 0 4
11034: PPUSH
11035: LD_INT 3
11037: PPUSH
11038: LD_INT 12
11040: PPUSH
11041: CALL_OW 12
11045: PPUSH
11046: CALL_OW 273
11050: ST_TO_ADDR
// if ValidHex ( x , y ) then
11051: LD_VAR 0 2
11055: PPUSH
11056: LD_VAR 0 3
11060: PPUSH
11061: CALL_OW 488
11065: IFFALSE 11100
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11067: LD_VAR 0 1
11071: PPUSH
11072: LD_VAR 0 2
11076: PPUSH
11077: LD_VAR 0 3
11081: PPUSH
11082: LD_INT 3
11084: PPUSH
11085: LD_INT 6
11087: PPUSH
11088: CALL_OW 12
11092: PPUSH
11093: LD_INT 1
11095: PPUSH
11096: CALL_OW 483
// end ;
11100: GO 10960
11102: POP
11103: POP
// end ;
11104: PPOPN 5
11106: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11107: LD_EXP 3
11111: PUSH
11112: LD_EXP 38
11116: AND
11117: IFFALSE 11211
11119: GO 11121
11121: DISABLE
11122: LD_INT 0
11124: PPUSH
11125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11126: LD_ADDR_VAR 0 2
11130: PUSH
11131: LD_INT 22
11133: PUSH
11134: LD_OWVAR 2
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: PUSH
11143: LD_INT 32
11145: PUSH
11146: LD_INT 1
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: PUSH
11153: LD_INT 21
11155: PUSH
11156: LD_INT 2
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: LIST
11167: PPUSH
11168: CALL_OW 69
11172: ST_TO_ADDR
// if not tmp then
11173: LD_VAR 0 2
11177: NOT
11178: IFFALSE 11182
// exit ;
11180: GO 11211
// for i in tmp do
11182: LD_ADDR_VAR 0 1
11186: PUSH
11187: LD_VAR 0 2
11191: PUSH
11192: FOR_IN
11193: IFFALSE 11209
// SetFuel ( i , 0 ) ;
11195: LD_VAR 0 1
11199: PPUSH
11200: LD_INT 0
11202: PPUSH
11203: CALL_OW 240
11207: GO 11192
11209: POP
11210: POP
// end ;
11211: PPOPN 2
11213: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11214: LD_EXP 3
11218: PUSH
11219: LD_EXP 39
11223: AND
11224: IFFALSE 11290
11226: GO 11228
11228: DISABLE
11229: LD_INT 0
11231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11232: LD_ADDR_VAR 0 1
11236: PUSH
11237: LD_INT 22
11239: PUSH
11240: LD_OWVAR 2
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: PUSH
11249: LD_INT 30
11251: PUSH
11252: LD_INT 29
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: PPUSH
11263: CALL_OW 69
11267: ST_TO_ADDR
// if not tmp then
11268: LD_VAR 0 1
11272: NOT
11273: IFFALSE 11277
// exit ;
11275: GO 11290
// DestroyUnit ( tmp [ 1 ] ) ;
11277: LD_VAR 0 1
11281: PUSH
11282: LD_INT 1
11284: ARRAY
11285: PPUSH
11286: CALL_OW 65
// end ;
11290: PPOPN 1
11292: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11293: LD_EXP 3
11297: PUSH
11298: LD_EXP 41
11302: AND
11303: IFFALSE 11432
11305: GO 11307
11307: DISABLE
11308: LD_INT 0
11310: PPUSH
// begin uc_side := 0 ;
11311: LD_ADDR_OWVAR 20
11315: PUSH
11316: LD_INT 0
11318: ST_TO_ADDR
// uc_nation := nation_arabian ;
11319: LD_ADDR_OWVAR 21
11323: PUSH
11324: LD_INT 2
11326: ST_TO_ADDR
// hc_gallery :=  ;
11327: LD_ADDR_OWVAR 33
11331: PUSH
11332: LD_STRING 
11334: ST_TO_ADDR
// hc_name :=  ;
11335: LD_ADDR_OWVAR 26
11339: PUSH
11340: LD_STRING 
11342: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11343: LD_INT 1
11345: PPUSH
11346: LD_INT 11
11348: PPUSH
11349: LD_INT 10
11351: PPUSH
11352: CALL_OW 380
// un := CreateHuman ;
11356: LD_ADDR_VAR 0 1
11360: PUSH
11361: CALL_OW 44
11365: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11366: LD_VAR 0 1
11370: PPUSH
11371: LD_INT 1
11373: PPUSH
11374: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11378: LD_INT 35
11380: PPUSH
11381: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11385: LD_VAR 0 1
11389: PPUSH
11390: LD_INT 22
11392: PUSH
11393: LD_OWVAR 2
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PPUSH
11402: CALL_OW 69
11406: PPUSH
11407: LD_VAR 0 1
11411: PPUSH
11412: CALL_OW 74
11416: PPUSH
11417: CALL_OW 115
// until IsDead ( un ) ;
11421: LD_VAR 0 1
11425: PPUSH
11426: CALL_OW 301
11430: IFFALSE 11378
// end ;
11432: PPOPN 1
11434: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11435: LD_EXP 3
11439: PUSH
11440: LD_EXP 43
11444: AND
11445: IFFALSE 11457
11447: GO 11449
11449: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11450: LD_STRING earthquake(getX(game), 0, 32)
11452: PPUSH
11453: CALL_OW 559
11457: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11458: LD_EXP 3
11462: PUSH
11463: LD_EXP 44
11467: AND
11468: IFFALSE 11559
11470: GO 11472
11472: DISABLE
11473: LD_INT 0
11475: PPUSH
// begin enable ;
11476: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11477: LD_ADDR_VAR 0 1
11481: PUSH
11482: LD_INT 22
11484: PUSH
11485: LD_OWVAR 2
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: PUSH
11494: LD_INT 21
11496: PUSH
11497: LD_INT 2
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: PUSH
11504: LD_INT 33
11506: PUSH
11507: LD_INT 3
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: LIST
11518: PPUSH
11519: CALL_OW 69
11523: ST_TO_ADDR
// if not tmp then
11524: LD_VAR 0 1
11528: NOT
11529: IFFALSE 11533
// exit ;
11531: GO 11559
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11533: LD_VAR 0 1
11537: PUSH
11538: LD_INT 1
11540: PPUSH
11541: LD_VAR 0 1
11545: PPUSH
11546: CALL_OW 12
11550: ARRAY
11551: PPUSH
11552: LD_INT 1
11554: PPUSH
11555: CALL_OW 234
// end ;
11559: PPOPN 1
11561: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11562: LD_EXP 3
11566: PUSH
11567: LD_EXP 45
11571: AND
11572: IFFALSE 11713
11574: GO 11576
11576: DISABLE
11577: LD_INT 0
11579: PPUSH
11580: PPUSH
11581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11582: LD_ADDR_VAR 0 3
11586: PUSH
11587: LD_INT 22
11589: PUSH
11590: LD_OWVAR 2
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PUSH
11599: LD_INT 25
11601: PUSH
11602: LD_INT 1
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PPUSH
11613: CALL_OW 69
11617: ST_TO_ADDR
// if not tmp then
11618: LD_VAR 0 3
11622: NOT
11623: IFFALSE 11627
// exit ;
11625: GO 11713
// un := tmp [ rand ( 1 , tmp ) ] ;
11627: LD_ADDR_VAR 0 2
11631: PUSH
11632: LD_VAR 0 3
11636: PUSH
11637: LD_INT 1
11639: PPUSH
11640: LD_VAR 0 3
11644: PPUSH
11645: CALL_OW 12
11649: ARRAY
11650: ST_TO_ADDR
// if Crawls ( un ) then
11651: LD_VAR 0 2
11655: PPUSH
11656: CALL_OW 318
11660: IFFALSE 11671
// ComWalk ( un ) ;
11662: LD_VAR 0 2
11666: PPUSH
11667: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11671: LD_VAR 0 2
11675: PPUSH
11676: LD_INT 9
11678: PPUSH
11679: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11683: LD_INT 28
11685: PPUSH
11686: LD_OWVAR 2
11690: PPUSH
11691: LD_INT 2
11693: PPUSH
11694: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11698: LD_INT 29
11700: PPUSH
11701: LD_OWVAR 2
11705: PPUSH
11706: LD_INT 2
11708: PPUSH
11709: CALL_OW 322
// end ;
11713: PPOPN 3
11715: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11716: LD_EXP 3
11720: PUSH
11721: LD_EXP 46
11725: AND
11726: IFFALSE 11837
11728: GO 11730
11730: DISABLE
11731: LD_INT 0
11733: PPUSH
11734: PPUSH
11735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11736: LD_ADDR_VAR 0 3
11740: PUSH
11741: LD_INT 22
11743: PUSH
11744: LD_OWVAR 2
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PUSH
11753: LD_INT 25
11755: PUSH
11756: LD_INT 1
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: PPUSH
11767: CALL_OW 69
11771: ST_TO_ADDR
// if not tmp then
11772: LD_VAR 0 3
11776: NOT
11777: IFFALSE 11781
// exit ;
11779: GO 11837
// un := tmp [ rand ( 1 , tmp ) ] ;
11781: LD_ADDR_VAR 0 2
11785: PUSH
11786: LD_VAR 0 3
11790: PUSH
11791: LD_INT 1
11793: PPUSH
11794: LD_VAR 0 3
11798: PPUSH
11799: CALL_OW 12
11803: ARRAY
11804: ST_TO_ADDR
// if Crawls ( un ) then
11805: LD_VAR 0 2
11809: PPUSH
11810: CALL_OW 318
11814: IFFALSE 11825
// ComWalk ( un ) ;
11816: LD_VAR 0 2
11820: PPUSH
11821: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11825: LD_VAR 0 2
11829: PPUSH
11830: LD_INT 8
11832: PPUSH
11833: CALL_OW 336
// end ;
11837: PPOPN 3
11839: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11840: LD_EXP 3
11844: PUSH
11845: LD_EXP 47
11849: AND
11850: IFFALSE 11994
11852: GO 11854
11854: DISABLE
11855: LD_INT 0
11857: PPUSH
11858: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11859: LD_ADDR_VAR 0 2
11863: PUSH
11864: LD_INT 22
11866: PUSH
11867: LD_OWVAR 2
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: LD_INT 21
11878: PUSH
11879: LD_INT 2
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: LD_INT 2
11888: PUSH
11889: LD_INT 34
11891: PUSH
11892: LD_INT 12
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 34
11901: PUSH
11902: LD_INT 51
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: LD_INT 34
11911: PUSH
11912: LD_INT 32
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: LIST
11929: PPUSH
11930: CALL_OW 69
11934: ST_TO_ADDR
// if not tmp then
11935: LD_VAR 0 2
11939: NOT
11940: IFFALSE 11944
// exit ;
11942: GO 11994
// for i in tmp do
11944: LD_ADDR_VAR 0 1
11948: PUSH
11949: LD_VAR 0 2
11953: PUSH
11954: FOR_IN
11955: IFFALSE 11992
// if GetCargo ( i , mat_artifact ) = 0 then
11957: LD_VAR 0 1
11961: PPUSH
11962: LD_INT 4
11964: PPUSH
11965: CALL_OW 289
11969: PUSH
11970: LD_INT 0
11972: EQUAL
11973: IFFALSE 11990
// SetCargo ( i , mat_siberit , 100 ) ;
11975: LD_VAR 0 1
11979: PPUSH
11980: LD_INT 3
11982: PPUSH
11983: LD_INT 100
11985: PPUSH
11986: CALL_OW 290
11990: GO 11954
11992: POP
11993: POP
// end ;
11994: PPOPN 2
11996: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
11997: LD_EXP 3
12001: PUSH
12002: LD_EXP 48
12006: AND
12007: IFFALSE 12190
12009: GO 12011
12011: DISABLE
12012: LD_INT 0
12014: PPUSH
12015: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12016: LD_ADDR_VAR 0 2
12020: PUSH
12021: LD_INT 22
12023: PUSH
12024: LD_OWVAR 2
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PPUSH
12033: CALL_OW 69
12037: ST_TO_ADDR
// if not tmp then
12038: LD_VAR 0 2
12042: NOT
12043: IFFALSE 12047
// exit ;
12045: GO 12190
// for i := 1 to 2 do
12047: LD_ADDR_VAR 0 1
12051: PUSH
12052: DOUBLE
12053: LD_INT 1
12055: DEC
12056: ST_TO_ADDR
12057: LD_INT 2
12059: PUSH
12060: FOR_TO
12061: IFFALSE 12188
// begin uc_side := your_side ;
12063: LD_ADDR_OWVAR 20
12067: PUSH
12068: LD_OWVAR 2
12072: ST_TO_ADDR
// uc_nation := nation_american ;
12073: LD_ADDR_OWVAR 21
12077: PUSH
12078: LD_INT 1
12080: ST_TO_ADDR
// vc_chassis := us_morphling ;
12081: LD_ADDR_OWVAR 37
12085: PUSH
12086: LD_INT 5
12088: ST_TO_ADDR
// vc_engine := engine_siberite ;
12089: LD_ADDR_OWVAR 39
12093: PUSH
12094: LD_INT 3
12096: ST_TO_ADDR
// vc_control := control_computer ;
12097: LD_ADDR_OWVAR 38
12101: PUSH
12102: LD_INT 3
12104: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12105: LD_ADDR_OWVAR 40
12109: PUSH
12110: LD_INT 10
12112: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12113: LD_VAR 0 2
12117: PUSH
12118: LD_INT 1
12120: ARRAY
12121: PPUSH
12122: CALL_OW 310
12126: NOT
12127: IFFALSE 12174
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12129: CALL_OW 45
12133: PPUSH
12134: LD_VAR 0 2
12138: PUSH
12139: LD_INT 1
12141: ARRAY
12142: PPUSH
12143: CALL_OW 250
12147: PPUSH
12148: LD_VAR 0 2
12152: PUSH
12153: LD_INT 1
12155: ARRAY
12156: PPUSH
12157: CALL_OW 251
12161: PPUSH
12162: LD_INT 12
12164: PPUSH
12165: LD_INT 1
12167: PPUSH
12168: CALL_OW 50
12172: GO 12186
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12174: CALL_OW 45
12178: PPUSH
12179: LD_INT 1
12181: PPUSH
12182: CALL_OW 51
// end ;
12186: GO 12060
12188: POP
12189: POP
// end ;
12190: PPOPN 2
12192: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12193: LD_EXP 3
12197: PUSH
12198: LD_EXP 49
12202: AND
12203: IFFALSE 12425
12205: GO 12207
12207: DISABLE
12208: LD_INT 0
12210: PPUSH
12211: PPUSH
12212: PPUSH
12213: PPUSH
12214: PPUSH
12215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12216: LD_ADDR_VAR 0 6
12220: PUSH
12221: LD_INT 22
12223: PUSH
12224: LD_OWVAR 2
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: PUSH
12233: LD_INT 21
12235: PUSH
12236: LD_INT 1
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 3
12245: PUSH
12246: LD_INT 23
12248: PUSH
12249: LD_INT 0
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: LIST
12264: PPUSH
12265: CALL_OW 69
12269: ST_TO_ADDR
// if not tmp then
12270: LD_VAR 0 6
12274: NOT
12275: IFFALSE 12279
// exit ;
12277: GO 12425
// s1 := rand ( 1 , 4 ) ;
12279: LD_ADDR_VAR 0 2
12283: PUSH
12284: LD_INT 1
12286: PPUSH
12287: LD_INT 4
12289: PPUSH
12290: CALL_OW 12
12294: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12295: LD_ADDR_VAR 0 4
12299: PUSH
12300: LD_VAR 0 6
12304: PUSH
12305: LD_INT 1
12307: ARRAY
12308: PPUSH
12309: LD_VAR 0 2
12313: PPUSH
12314: CALL_OW 259
12318: ST_TO_ADDR
// if s1 = 1 then
12319: LD_VAR 0 2
12323: PUSH
12324: LD_INT 1
12326: EQUAL
12327: IFFALSE 12347
// s2 := rand ( 2 , 4 ) else
12329: LD_ADDR_VAR 0 3
12333: PUSH
12334: LD_INT 2
12336: PPUSH
12337: LD_INT 4
12339: PPUSH
12340: CALL_OW 12
12344: ST_TO_ADDR
12345: GO 12355
// s2 := 1 ;
12347: LD_ADDR_VAR 0 3
12351: PUSH
12352: LD_INT 1
12354: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12355: LD_ADDR_VAR 0 5
12359: PUSH
12360: LD_VAR 0 6
12364: PUSH
12365: LD_INT 1
12367: ARRAY
12368: PPUSH
12369: LD_VAR 0 3
12373: PPUSH
12374: CALL_OW 259
12378: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12379: LD_VAR 0 6
12383: PUSH
12384: LD_INT 1
12386: ARRAY
12387: PPUSH
12388: LD_VAR 0 2
12392: PPUSH
12393: LD_VAR 0 5
12397: PPUSH
12398: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12402: LD_VAR 0 6
12406: PUSH
12407: LD_INT 1
12409: ARRAY
12410: PPUSH
12411: LD_VAR 0 3
12415: PPUSH
12416: LD_VAR 0 4
12420: PPUSH
12421: CALL_OW 237
// end ;
12425: PPOPN 6
12427: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12428: LD_EXP 3
12432: PUSH
12433: LD_EXP 50
12437: AND
12438: IFFALSE 12517
12440: GO 12442
12442: DISABLE
12443: LD_INT 0
12445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12446: LD_ADDR_VAR 0 1
12450: PUSH
12451: LD_INT 22
12453: PUSH
12454: LD_OWVAR 2
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: PUSH
12463: LD_INT 30
12465: PUSH
12466: LD_INT 3
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: PPUSH
12477: CALL_OW 69
12481: ST_TO_ADDR
// if not tmp then
12482: LD_VAR 0 1
12486: NOT
12487: IFFALSE 12491
// exit ;
12489: GO 12517
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12491: LD_VAR 0 1
12495: PUSH
12496: LD_INT 1
12498: PPUSH
12499: LD_VAR 0 1
12503: PPUSH
12504: CALL_OW 12
12508: ARRAY
12509: PPUSH
12510: LD_INT 1
12512: PPUSH
12513: CALL_OW 234
// end ;
12517: PPOPN 1
12519: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12520: LD_EXP 3
12524: PUSH
12525: LD_EXP 51
12529: AND
12530: IFFALSE 12642
12532: GO 12534
12534: DISABLE
12535: LD_INT 0
12537: PPUSH
12538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12539: LD_ADDR_VAR 0 2
12543: PUSH
12544: LD_INT 22
12546: PUSH
12547: LD_OWVAR 2
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: PUSH
12556: LD_INT 2
12558: PUSH
12559: LD_INT 30
12561: PUSH
12562: LD_INT 27
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: PUSH
12569: LD_INT 30
12571: PUSH
12572: LD_INT 26
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PUSH
12579: LD_INT 30
12581: PUSH
12582: LD_INT 28
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PPUSH
12599: CALL_OW 69
12603: ST_TO_ADDR
// if not tmp then
12604: LD_VAR 0 2
12608: NOT
12609: IFFALSE 12613
// exit ;
12611: GO 12642
// for i in tmp do
12613: LD_ADDR_VAR 0 1
12617: PUSH
12618: LD_VAR 0 2
12622: PUSH
12623: FOR_IN
12624: IFFALSE 12640
// SetLives ( i , 1 ) ;
12626: LD_VAR 0 1
12630: PPUSH
12631: LD_INT 1
12633: PPUSH
12634: CALL_OW 234
12638: GO 12623
12640: POP
12641: POP
// end ;
12642: PPOPN 2
12644: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12645: LD_EXP 3
12649: PUSH
12650: LD_EXP 52
12654: AND
12655: IFFALSE 12942
12657: GO 12659
12659: DISABLE
12660: LD_INT 0
12662: PPUSH
12663: PPUSH
12664: PPUSH
// begin i := rand ( 1 , 7 ) ;
12665: LD_ADDR_VAR 0 1
12669: PUSH
12670: LD_INT 1
12672: PPUSH
12673: LD_INT 7
12675: PPUSH
12676: CALL_OW 12
12680: ST_TO_ADDR
// case i of 1 :
12681: LD_VAR 0 1
12685: PUSH
12686: LD_INT 1
12688: DOUBLE
12689: EQUAL
12690: IFTRUE 12694
12692: GO 12704
12694: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12695: LD_STRING earthquake(getX(game), 0, 32)
12697: PPUSH
12698: CALL_OW 559
12702: GO 12942
12704: LD_INT 2
12706: DOUBLE
12707: EQUAL
12708: IFTRUE 12712
12710: GO 12726
12712: POP
// begin ToLua ( displayStucuk(); ) ;
12713: LD_STRING displayStucuk();
12715: PPUSH
12716: CALL_OW 559
// ResetFog ;
12720: CALL_OW 335
// end ; 3 :
12724: GO 12942
12726: LD_INT 3
12728: DOUBLE
12729: EQUAL
12730: IFTRUE 12734
12732: GO 12838
12734: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12735: LD_ADDR_VAR 0 2
12739: PUSH
12740: LD_INT 22
12742: PUSH
12743: LD_OWVAR 2
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: PUSH
12752: LD_INT 25
12754: PUSH
12755: LD_INT 1
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: PPUSH
12766: CALL_OW 69
12770: ST_TO_ADDR
// if not tmp then
12771: LD_VAR 0 2
12775: NOT
12776: IFFALSE 12780
// exit ;
12778: GO 12942
// un := tmp [ rand ( 1 , tmp ) ] ;
12780: LD_ADDR_VAR 0 3
12784: PUSH
12785: LD_VAR 0 2
12789: PUSH
12790: LD_INT 1
12792: PPUSH
12793: LD_VAR 0 2
12797: PPUSH
12798: CALL_OW 12
12802: ARRAY
12803: ST_TO_ADDR
// if Crawls ( un ) then
12804: LD_VAR 0 3
12808: PPUSH
12809: CALL_OW 318
12813: IFFALSE 12824
// ComWalk ( un ) ;
12815: LD_VAR 0 3
12819: PPUSH
12820: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12824: LD_VAR 0 3
12828: PPUSH
12829: LD_INT 8
12831: PPUSH
12832: CALL_OW 336
// end ; 4 :
12836: GO 12942
12838: LD_INT 4
12840: DOUBLE
12841: EQUAL
12842: IFTRUE 12846
12844: GO 12920
12846: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12847: LD_ADDR_VAR 0 2
12851: PUSH
12852: LD_INT 22
12854: PUSH
12855: LD_OWVAR 2
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: PUSH
12864: LD_INT 30
12866: PUSH
12867: LD_INT 29
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: PPUSH
12878: CALL_OW 69
12882: ST_TO_ADDR
// if not tmp then
12883: LD_VAR 0 2
12887: NOT
12888: IFFALSE 12892
// exit ;
12890: GO 12942
// CenterNowOnUnits ( tmp [ 1 ] ) ;
12892: LD_VAR 0 2
12896: PUSH
12897: LD_INT 1
12899: ARRAY
12900: PPUSH
12901: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
12905: LD_VAR 0 2
12909: PUSH
12910: LD_INT 1
12912: ARRAY
12913: PPUSH
12914: CALL_OW 65
// end ; 5 .. 7 :
12918: GO 12942
12920: LD_INT 5
12922: DOUBLE
12923: GREATEREQUAL
12924: IFFALSE 12932
12926: LD_INT 7
12928: DOUBLE
12929: LESSEQUAL
12930: IFTRUE 12934
12932: GO 12941
12934: POP
// StreamSibBomb ; end ;
12935: CALL 9179 0 0
12939: GO 12942
12941: POP
// end ;
12942: PPOPN 3
12944: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12945: LD_EXP 3
12949: PUSH
12950: LD_EXP 53
12954: AND
12955: IFFALSE 13111
12957: GO 12959
12959: DISABLE
12960: LD_INT 0
12962: PPUSH
12963: PPUSH
12964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12965: LD_ADDR_VAR 0 2
12969: PUSH
12970: LD_INT 81
12972: PUSH
12973: LD_OWVAR 2
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: PUSH
12982: LD_INT 2
12984: PUSH
12985: LD_INT 21
12987: PUSH
12988: LD_INT 1
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: PUSH
12995: LD_INT 21
12997: PUSH
12998: LD_INT 2
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: LIST
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PPUSH
13014: CALL_OW 69
13018: ST_TO_ADDR
// if not tmp then
13019: LD_VAR 0 2
13023: NOT
13024: IFFALSE 13028
// exit ;
13026: GO 13111
// p := 0 ;
13028: LD_ADDR_VAR 0 3
13032: PUSH
13033: LD_INT 0
13035: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13036: LD_INT 35
13038: PPUSH
13039: CALL_OW 67
// p := p + 1 ;
13043: LD_ADDR_VAR 0 3
13047: PUSH
13048: LD_VAR 0 3
13052: PUSH
13053: LD_INT 1
13055: PLUS
13056: ST_TO_ADDR
// for i in tmp do
13057: LD_ADDR_VAR 0 1
13061: PUSH
13062: LD_VAR 0 2
13066: PUSH
13067: FOR_IN
13068: IFFALSE 13099
// if GetLives ( i ) < 1000 then
13070: LD_VAR 0 1
13074: PPUSH
13075: CALL_OW 256
13079: PUSH
13080: LD_INT 1000
13082: LESS
13083: IFFALSE 13097
// SetLives ( i , 1000 ) ;
13085: LD_VAR 0 1
13089: PPUSH
13090: LD_INT 1000
13092: PPUSH
13093: CALL_OW 234
13097: GO 13067
13099: POP
13100: POP
// until p > 20 ;
13101: LD_VAR 0 3
13105: PUSH
13106: LD_INT 20
13108: GREATER
13109: IFFALSE 13036
// end ;
13111: PPOPN 3
13113: END
// every 0 0$1 trigger StreamModeActive and sTime do
13114: LD_EXP 3
13118: PUSH
13119: LD_EXP 54
13123: AND
13124: IFFALSE 13159
13126: GO 13128
13128: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13129: LD_INT 28
13131: PPUSH
13132: LD_OWVAR 2
13136: PPUSH
13137: LD_INT 2
13139: PPUSH
13140: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13144: LD_INT 30
13146: PPUSH
13147: LD_OWVAR 2
13151: PPUSH
13152: LD_INT 2
13154: PPUSH
13155: CALL_OW 322
// end ;
13159: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13160: LD_EXP 3
13164: PUSH
13165: LD_EXP 55
13169: AND
13170: IFFALSE 13291
13172: GO 13174
13174: DISABLE
13175: LD_INT 0
13177: PPUSH
13178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13179: LD_ADDR_VAR 0 2
13183: PUSH
13184: LD_INT 22
13186: PUSH
13187: LD_OWVAR 2
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: PUSH
13196: LD_INT 21
13198: PUSH
13199: LD_INT 1
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PUSH
13206: LD_INT 3
13208: PUSH
13209: LD_INT 23
13211: PUSH
13212: LD_INT 0
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: LIST
13227: PPUSH
13228: CALL_OW 69
13232: ST_TO_ADDR
// if not tmp then
13233: LD_VAR 0 2
13237: NOT
13238: IFFALSE 13242
// exit ;
13240: GO 13291
// for i in tmp do
13242: LD_ADDR_VAR 0 1
13246: PUSH
13247: LD_VAR 0 2
13251: PUSH
13252: FOR_IN
13253: IFFALSE 13289
// begin if Crawls ( i ) then
13255: LD_VAR 0 1
13259: PPUSH
13260: CALL_OW 318
13264: IFFALSE 13275
// ComWalk ( i ) ;
13266: LD_VAR 0 1
13270: PPUSH
13271: CALL_OW 138
// SetClass ( i , 2 ) ;
13275: LD_VAR 0 1
13279: PPUSH
13280: LD_INT 2
13282: PPUSH
13283: CALL_OW 336
// end ;
13287: GO 13252
13289: POP
13290: POP
// end ;
13291: PPOPN 2
13293: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13294: LD_EXP 3
13298: PUSH
13299: LD_EXP 56
13303: AND
13304: IFFALSE 13592
13306: GO 13308
13308: DISABLE
13309: LD_INT 0
13311: PPUSH
13312: PPUSH
13313: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13314: LD_OWVAR 2
13318: PPUSH
13319: LD_INT 9
13321: PPUSH
13322: LD_INT 1
13324: PPUSH
13325: LD_INT 1
13327: PPUSH
13328: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13332: LD_INT 9
13334: PPUSH
13335: LD_OWVAR 2
13339: PPUSH
13340: CALL_OW 343
// uc_side := 9 ;
13344: LD_ADDR_OWVAR 20
13348: PUSH
13349: LD_INT 9
13351: ST_TO_ADDR
// uc_nation := 2 ;
13352: LD_ADDR_OWVAR 21
13356: PUSH
13357: LD_INT 2
13359: ST_TO_ADDR
// hc_name := Dark Warrior ;
13360: LD_ADDR_OWVAR 26
13364: PUSH
13365: LD_STRING Dark Warrior
13367: ST_TO_ADDR
// hc_gallery :=  ;
13368: LD_ADDR_OWVAR 33
13372: PUSH
13373: LD_STRING 
13375: ST_TO_ADDR
// hc_noskilllimit := true ;
13376: LD_ADDR_OWVAR 76
13380: PUSH
13381: LD_INT 1
13383: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13384: LD_ADDR_OWVAR 31
13388: PUSH
13389: LD_INT 30
13391: PUSH
13392: LD_INT 30
13394: PUSH
13395: LD_INT 30
13397: PUSH
13398: LD_INT 30
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: ST_TO_ADDR
// un := CreateHuman ;
13407: LD_ADDR_VAR 0 3
13411: PUSH
13412: CALL_OW 44
13416: ST_TO_ADDR
// hc_noskilllimit := false ;
13417: LD_ADDR_OWVAR 76
13421: PUSH
13422: LD_INT 0
13424: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13425: LD_VAR 0 3
13429: PPUSH
13430: LD_INT 1
13432: PPUSH
13433: CALL_OW 51
// ToLua ( playRanger() ) ;
13437: LD_STRING playRanger()
13439: PPUSH
13440: CALL_OW 559
// p := 0 ;
13444: LD_ADDR_VAR 0 2
13448: PUSH
13449: LD_INT 0
13451: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13452: LD_INT 35
13454: PPUSH
13455: CALL_OW 67
// p := p + 1 ;
13459: LD_ADDR_VAR 0 2
13463: PUSH
13464: LD_VAR 0 2
13468: PUSH
13469: LD_INT 1
13471: PLUS
13472: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13473: LD_VAR 0 3
13477: PPUSH
13478: CALL_OW 256
13482: PUSH
13483: LD_INT 1000
13485: LESS
13486: IFFALSE 13500
// SetLives ( un , 1000 ) ;
13488: LD_VAR 0 3
13492: PPUSH
13493: LD_INT 1000
13495: PPUSH
13496: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13500: LD_VAR 0 3
13504: PPUSH
13505: LD_INT 81
13507: PUSH
13508: LD_OWVAR 2
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PUSH
13517: LD_INT 91
13519: PUSH
13520: LD_VAR 0 3
13524: PUSH
13525: LD_INT 30
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: LIST
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: PPUSH
13537: CALL_OW 69
13541: PPUSH
13542: LD_VAR 0 3
13546: PPUSH
13547: CALL_OW 74
13551: PPUSH
13552: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
13556: LD_VAR 0 2
13560: PUSH
13561: LD_INT 80
13563: GREATER
13564: PUSH
13565: LD_VAR 0 3
13569: PPUSH
13570: CALL_OW 301
13574: OR
13575: IFFALSE 13452
// if un then
13577: LD_VAR 0 3
13581: IFFALSE 13592
// RemoveUnit ( un ) ;
13583: LD_VAR 0 3
13587: PPUSH
13588: CALL_OW 64
// end ;
13592: PPOPN 3
13594: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
13595: LD_EXP 57
13599: IFFALSE 13715
13601: GO 13603
13603: DISABLE
13604: LD_INT 0
13606: PPUSH
13607: PPUSH
13608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13609: LD_ADDR_VAR 0 2
13613: PUSH
13614: LD_INT 81
13616: PUSH
13617: LD_OWVAR 2
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PUSH
13626: LD_INT 21
13628: PUSH
13629: LD_INT 1
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: PPUSH
13640: CALL_OW 69
13644: ST_TO_ADDR
// ToLua ( playComputer() ) ;
13645: LD_STRING playComputer()
13647: PPUSH
13648: CALL_OW 559
// if not tmp then
13652: LD_VAR 0 2
13656: NOT
13657: IFFALSE 13661
// exit ;
13659: GO 13715
// for i in tmp do
13661: LD_ADDR_VAR 0 1
13665: PUSH
13666: LD_VAR 0 2
13670: PUSH
13671: FOR_IN
13672: IFFALSE 13713
// for j := 1 to 4 do
13674: LD_ADDR_VAR 0 3
13678: PUSH
13679: DOUBLE
13680: LD_INT 1
13682: DEC
13683: ST_TO_ADDR
13684: LD_INT 4
13686: PUSH
13687: FOR_TO
13688: IFFALSE 13709
// SetSkill ( i , j , 10 ) ;
13690: LD_VAR 0 1
13694: PPUSH
13695: LD_VAR 0 3
13699: PPUSH
13700: LD_INT 10
13702: PPUSH
13703: CALL_OW 237
13707: GO 13687
13709: POP
13710: POP
13711: GO 13671
13713: POP
13714: POP
// end ;
13715: PPOPN 3
13717: END
// every 0 0$1 trigger s30 do var i , tmp ;
13718: LD_EXP 58
13722: IFFALSE 13791
13724: GO 13726
13726: DISABLE
13727: LD_INT 0
13729: PPUSH
13730: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13731: LD_ADDR_VAR 0 2
13735: PUSH
13736: LD_INT 22
13738: PUSH
13739: LD_OWVAR 2
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PPUSH
13748: CALL_OW 69
13752: ST_TO_ADDR
// if not tmp then
13753: LD_VAR 0 2
13757: NOT
13758: IFFALSE 13762
// exit ;
13760: GO 13791
// for i in tmp do
13762: LD_ADDR_VAR 0 1
13766: PUSH
13767: LD_VAR 0 2
13771: PUSH
13772: FOR_IN
13773: IFFALSE 13789
// SetLives ( i , 300 ) ;
13775: LD_VAR 0 1
13779: PPUSH
13780: LD_INT 300
13782: PPUSH
13783: CALL_OW 234
13787: GO 13772
13789: POP
13790: POP
// end ;
13791: PPOPN 2
13793: END
// every 0 0$1 trigger s60 do var i , tmp ;
13794: LD_EXP 59
13798: IFFALSE 13867
13800: GO 13802
13802: DISABLE
13803: LD_INT 0
13805: PPUSH
13806: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13807: LD_ADDR_VAR 0 2
13811: PUSH
13812: LD_INT 22
13814: PUSH
13815: LD_OWVAR 2
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PPUSH
13824: CALL_OW 69
13828: ST_TO_ADDR
// if not tmp then
13829: LD_VAR 0 2
13833: NOT
13834: IFFALSE 13838
// exit ;
13836: GO 13867
// for i in tmp do
13838: LD_ADDR_VAR 0 1
13842: PUSH
13843: LD_VAR 0 2
13847: PUSH
13848: FOR_IN
13849: IFFALSE 13865
// SetLives ( i , 600 ) ;
13851: LD_VAR 0 1
13855: PPUSH
13856: LD_INT 600
13858: PPUSH
13859: CALL_OW 234
13863: GO 13848
13865: POP
13866: POP
// end ;
13867: PPOPN 2
13869: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13870: LD_INT 0
13872: PPUSH
// case cmd of 301 :
13873: LD_VAR 0 1
13877: PUSH
13878: LD_INT 301
13880: DOUBLE
13881: EQUAL
13882: IFTRUE 13886
13884: GO 13918
13886: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
13887: LD_VAR 0 6
13891: PPUSH
13892: LD_VAR 0 7
13896: PPUSH
13897: LD_VAR 0 8
13901: PPUSH
13902: LD_VAR 0 4
13906: PPUSH
13907: LD_VAR 0 5
13911: PPUSH
13912: CALL 15127 0 5
13916: GO 14039
13918: LD_INT 302
13920: DOUBLE
13921: EQUAL
13922: IFTRUE 13926
13924: GO 13963
13926: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
13927: LD_VAR 0 6
13931: PPUSH
13932: LD_VAR 0 7
13936: PPUSH
13937: LD_VAR 0 8
13941: PPUSH
13942: LD_VAR 0 9
13946: PPUSH
13947: LD_VAR 0 4
13951: PPUSH
13952: LD_VAR 0 5
13956: PPUSH
13957: CALL 15218 0 6
13961: GO 14039
13963: LD_INT 303
13965: DOUBLE
13966: EQUAL
13967: IFTRUE 13971
13969: GO 14008
13971: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
13972: LD_VAR 0 6
13976: PPUSH
13977: LD_VAR 0 7
13981: PPUSH
13982: LD_VAR 0 8
13986: PPUSH
13987: LD_VAR 0 9
13991: PPUSH
13992: LD_VAR 0 4
13996: PPUSH
13997: LD_VAR 0 5
14001: PPUSH
14002: CALL 14044 0 6
14006: GO 14039
14008: LD_INT 304
14010: DOUBLE
14011: EQUAL
14012: IFTRUE 14016
14014: GO 14038
14016: POP
// hHackTeleport ( unit , x , y ) ; end ;
14017: LD_VAR 0 2
14021: PPUSH
14022: LD_VAR 0 4
14026: PPUSH
14027: LD_VAR 0 5
14031: PPUSH
14032: CALL 15811 0 3
14036: GO 14039
14038: POP
// end ;
14039: LD_VAR 0 12
14043: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14044: LD_INT 0
14046: PPUSH
14047: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14048: LD_VAR 0 1
14052: PUSH
14053: LD_INT 1
14055: LESS
14056: PUSH
14057: LD_VAR 0 1
14061: PUSH
14062: LD_INT 3
14064: GREATER
14065: OR
14066: PUSH
14067: LD_VAR 0 5
14071: PPUSH
14072: LD_VAR 0 6
14076: PPUSH
14077: CALL_OW 428
14081: OR
14082: IFFALSE 14086
// exit ;
14084: GO 14814
// uc_side := your_side ;
14086: LD_ADDR_OWVAR 20
14090: PUSH
14091: LD_OWVAR 2
14095: ST_TO_ADDR
// uc_nation := nation ;
14096: LD_ADDR_OWVAR 21
14100: PUSH
14101: LD_VAR 0 1
14105: ST_TO_ADDR
// bc_level = 1 ;
14106: LD_ADDR_OWVAR 43
14110: PUSH
14111: LD_INT 1
14113: ST_TO_ADDR
// case btype of 1 :
14114: LD_VAR 0 2
14118: PUSH
14119: LD_INT 1
14121: DOUBLE
14122: EQUAL
14123: IFTRUE 14127
14125: GO 14138
14127: POP
// bc_type := b_depot ; 2 :
14128: LD_ADDR_OWVAR 42
14132: PUSH
14133: LD_INT 0
14135: ST_TO_ADDR
14136: GO 14758
14138: LD_INT 2
14140: DOUBLE
14141: EQUAL
14142: IFTRUE 14146
14144: GO 14157
14146: POP
// bc_type := b_warehouse ; 3 :
14147: LD_ADDR_OWVAR 42
14151: PUSH
14152: LD_INT 1
14154: ST_TO_ADDR
14155: GO 14758
14157: LD_INT 3
14159: DOUBLE
14160: EQUAL
14161: IFTRUE 14165
14163: GO 14176
14165: POP
// bc_type := b_lab ; 4 .. 9 :
14166: LD_ADDR_OWVAR 42
14170: PUSH
14171: LD_INT 6
14173: ST_TO_ADDR
14174: GO 14758
14176: LD_INT 4
14178: DOUBLE
14179: GREATEREQUAL
14180: IFFALSE 14188
14182: LD_INT 9
14184: DOUBLE
14185: LESSEQUAL
14186: IFTRUE 14190
14188: GO 14250
14190: POP
// begin bc_type := b_lab_half ;
14191: LD_ADDR_OWVAR 42
14195: PUSH
14196: LD_INT 7
14198: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14199: LD_ADDR_OWVAR 44
14203: PUSH
14204: LD_INT 10
14206: PUSH
14207: LD_INT 11
14209: PUSH
14210: LD_INT 12
14212: PUSH
14213: LD_INT 15
14215: PUSH
14216: LD_INT 14
14218: PUSH
14219: LD_INT 13
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: PUSH
14230: LD_VAR 0 2
14234: PUSH
14235: LD_INT 3
14237: MINUS
14238: ARRAY
14239: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
14240: LD_ADDR_OWVAR 45
14244: PUSH
14245: LD_INT 9
14247: ST_TO_ADDR
// end ; 10 .. 13 :
14248: GO 14758
14250: LD_INT 10
14252: DOUBLE
14253: GREATEREQUAL
14254: IFFALSE 14262
14256: LD_INT 13
14258: DOUBLE
14259: LESSEQUAL
14260: IFTRUE 14264
14262: GO 14341
14264: POP
// begin bc_type := b_lab_full ;
14265: LD_ADDR_OWVAR 42
14269: PUSH
14270: LD_INT 8
14272: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14273: LD_ADDR_OWVAR 44
14277: PUSH
14278: LD_INT 10
14280: PUSH
14281: LD_INT 12
14283: PUSH
14284: LD_INT 14
14286: PUSH
14287: LD_INT 13
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: PUSH
14296: LD_VAR 0 2
14300: PUSH
14301: LD_INT 9
14303: MINUS
14304: ARRAY
14305: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14306: LD_ADDR_OWVAR 45
14310: PUSH
14311: LD_INT 11
14313: PUSH
14314: LD_INT 15
14316: PUSH
14317: LD_INT 12
14319: PUSH
14320: LD_INT 15
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: PUSH
14329: LD_VAR 0 2
14333: PUSH
14334: LD_INT 9
14336: MINUS
14337: ARRAY
14338: ST_TO_ADDR
// end ; 14 :
14339: GO 14758
14341: LD_INT 14
14343: DOUBLE
14344: EQUAL
14345: IFTRUE 14349
14347: GO 14360
14349: POP
// bc_type := b_workshop ; 15 :
14350: LD_ADDR_OWVAR 42
14354: PUSH
14355: LD_INT 2
14357: ST_TO_ADDR
14358: GO 14758
14360: LD_INT 15
14362: DOUBLE
14363: EQUAL
14364: IFTRUE 14368
14366: GO 14379
14368: POP
// bc_type := b_factory ; 16 :
14369: LD_ADDR_OWVAR 42
14373: PUSH
14374: LD_INT 3
14376: ST_TO_ADDR
14377: GO 14758
14379: LD_INT 16
14381: DOUBLE
14382: EQUAL
14383: IFTRUE 14387
14385: GO 14398
14387: POP
// bc_type := b_ext_gun ; 17 :
14388: LD_ADDR_OWVAR 42
14392: PUSH
14393: LD_INT 17
14395: ST_TO_ADDR
14396: GO 14758
14398: LD_INT 17
14400: DOUBLE
14401: EQUAL
14402: IFTRUE 14406
14404: GO 14434
14406: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14407: LD_ADDR_OWVAR 42
14411: PUSH
14412: LD_INT 19
14414: PUSH
14415: LD_INT 23
14417: PUSH
14418: LD_INT 19
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: LIST
14425: PUSH
14426: LD_VAR 0 1
14430: ARRAY
14431: ST_TO_ADDR
14432: GO 14758
14434: LD_INT 18
14436: DOUBLE
14437: EQUAL
14438: IFTRUE 14442
14440: GO 14453
14442: POP
// bc_type := b_ext_radar ; 19 :
14443: LD_ADDR_OWVAR 42
14447: PUSH
14448: LD_INT 20
14450: ST_TO_ADDR
14451: GO 14758
14453: LD_INT 19
14455: DOUBLE
14456: EQUAL
14457: IFTRUE 14461
14459: GO 14472
14461: POP
// bc_type := b_ext_radio ; 20 :
14462: LD_ADDR_OWVAR 42
14466: PUSH
14467: LD_INT 22
14469: ST_TO_ADDR
14470: GO 14758
14472: LD_INT 20
14474: DOUBLE
14475: EQUAL
14476: IFTRUE 14480
14478: GO 14491
14480: POP
// bc_type := b_ext_siberium ; 21 :
14481: LD_ADDR_OWVAR 42
14485: PUSH
14486: LD_INT 21
14488: ST_TO_ADDR
14489: GO 14758
14491: LD_INT 21
14493: DOUBLE
14494: EQUAL
14495: IFTRUE 14499
14497: GO 14510
14499: POP
// bc_type := b_ext_computer ; 22 :
14500: LD_ADDR_OWVAR 42
14504: PUSH
14505: LD_INT 24
14507: ST_TO_ADDR
14508: GO 14758
14510: LD_INT 22
14512: DOUBLE
14513: EQUAL
14514: IFTRUE 14518
14516: GO 14529
14518: POP
// bc_type := b_ext_track ; 23 :
14519: LD_ADDR_OWVAR 42
14523: PUSH
14524: LD_INT 16
14526: ST_TO_ADDR
14527: GO 14758
14529: LD_INT 23
14531: DOUBLE
14532: EQUAL
14533: IFTRUE 14537
14535: GO 14548
14537: POP
// bc_type := b_ext_laser ; 24 :
14538: LD_ADDR_OWVAR 42
14542: PUSH
14543: LD_INT 25
14545: ST_TO_ADDR
14546: GO 14758
14548: LD_INT 24
14550: DOUBLE
14551: EQUAL
14552: IFTRUE 14556
14554: GO 14567
14556: POP
// bc_type := b_control_tower ; 25 :
14557: LD_ADDR_OWVAR 42
14561: PUSH
14562: LD_INT 36
14564: ST_TO_ADDR
14565: GO 14758
14567: LD_INT 25
14569: DOUBLE
14570: EQUAL
14571: IFTRUE 14575
14573: GO 14586
14575: POP
// bc_type := b_breastwork ; 26 :
14576: LD_ADDR_OWVAR 42
14580: PUSH
14581: LD_INT 31
14583: ST_TO_ADDR
14584: GO 14758
14586: LD_INT 26
14588: DOUBLE
14589: EQUAL
14590: IFTRUE 14594
14592: GO 14605
14594: POP
// bc_type := b_bunker ; 27 :
14595: LD_ADDR_OWVAR 42
14599: PUSH
14600: LD_INT 32
14602: ST_TO_ADDR
14603: GO 14758
14605: LD_INT 27
14607: DOUBLE
14608: EQUAL
14609: IFTRUE 14613
14611: GO 14624
14613: POP
// bc_type := b_turret ; 28 :
14614: LD_ADDR_OWVAR 42
14618: PUSH
14619: LD_INT 33
14621: ST_TO_ADDR
14622: GO 14758
14624: LD_INT 28
14626: DOUBLE
14627: EQUAL
14628: IFTRUE 14632
14630: GO 14643
14632: POP
// bc_type := b_armoury ; 29 :
14633: LD_ADDR_OWVAR 42
14637: PUSH
14638: LD_INT 4
14640: ST_TO_ADDR
14641: GO 14758
14643: LD_INT 29
14645: DOUBLE
14646: EQUAL
14647: IFTRUE 14651
14649: GO 14662
14651: POP
// bc_type := b_barracks ; 30 :
14652: LD_ADDR_OWVAR 42
14656: PUSH
14657: LD_INT 5
14659: ST_TO_ADDR
14660: GO 14758
14662: LD_INT 30
14664: DOUBLE
14665: EQUAL
14666: IFTRUE 14670
14668: GO 14681
14670: POP
// bc_type := b_solar_power ; 31 :
14671: LD_ADDR_OWVAR 42
14675: PUSH
14676: LD_INT 27
14678: ST_TO_ADDR
14679: GO 14758
14681: LD_INT 31
14683: DOUBLE
14684: EQUAL
14685: IFTRUE 14689
14687: GO 14700
14689: POP
// bc_type := b_oil_power ; 32 :
14690: LD_ADDR_OWVAR 42
14694: PUSH
14695: LD_INT 26
14697: ST_TO_ADDR
14698: GO 14758
14700: LD_INT 32
14702: DOUBLE
14703: EQUAL
14704: IFTRUE 14708
14706: GO 14719
14708: POP
// bc_type := b_siberite_power ; 33 :
14709: LD_ADDR_OWVAR 42
14713: PUSH
14714: LD_INT 28
14716: ST_TO_ADDR
14717: GO 14758
14719: LD_INT 33
14721: DOUBLE
14722: EQUAL
14723: IFTRUE 14727
14725: GO 14738
14727: POP
// bc_type := b_oil_mine ; 34 :
14728: LD_ADDR_OWVAR 42
14732: PUSH
14733: LD_INT 29
14735: ST_TO_ADDR
14736: GO 14758
14738: LD_INT 34
14740: DOUBLE
14741: EQUAL
14742: IFTRUE 14746
14744: GO 14757
14746: POP
// bc_type := b_siberite_mine ; end ;
14747: LD_ADDR_OWVAR 42
14751: PUSH
14752: LD_INT 30
14754: ST_TO_ADDR
14755: GO 14758
14757: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
14758: LD_ADDR_VAR 0 8
14762: PUSH
14763: LD_VAR 0 5
14767: PPUSH
14768: LD_VAR 0 6
14772: PPUSH
14773: LD_VAR 0 3
14777: PPUSH
14778: CALL_OW 47
14782: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
14783: LD_OWVAR 42
14787: PUSH
14788: LD_INT 32
14790: PUSH
14791: LD_INT 33
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: IN
14798: IFFALSE 14814
// PlaceWeaponTurret ( b , weapon ) ;
14800: LD_VAR 0 8
14804: PPUSH
14805: LD_VAR 0 4
14809: PPUSH
14810: CALL_OW 431
// end ;
14814: LD_VAR 0 7
14818: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
14819: LD_INT 0
14821: PPUSH
14822: PPUSH
14823: PPUSH
14824: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14825: LD_ADDR_VAR 0 4
14829: PUSH
14830: LD_INT 22
14832: PUSH
14833: LD_OWVAR 2
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: PUSH
14842: LD_INT 2
14844: PUSH
14845: LD_INT 30
14847: PUSH
14848: LD_INT 0
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PUSH
14855: LD_INT 30
14857: PUSH
14858: LD_INT 1
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: LIST
14869: PUSH
14870: EMPTY
14871: LIST
14872: LIST
14873: PPUSH
14874: CALL_OW 69
14878: ST_TO_ADDR
// if not tmp then
14879: LD_VAR 0 4
14883: NOT
14884: IFFALSE 14888
// exit ;
14886: GO 14947
// for i in tmp do
14888: LD_ADDR_VAR 0 2
14892: PUSH
14893: LD_VAR 0 4
14897: PUSH
14898: FOR_IN
14899: IFFALSE 14945
// for j = 1 to 3 do
14901: LD_ADDR_VAR 0 3
14905: PUSH
14906: DOUBLE
14907: LD_INT 1
14909: DEC
14910: ST_TO_ADDR
14911: LD_INT 3
14913: PUSH
14914: FOR_TO
14915: IFFALSE 14941
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14917: LD_VAR 0 2
14921: PPUSH
14922: CALL_OW 274
14926: PPUSH
14927: LD_VAR 0 3
14931: PPUSH
14932: LD_INT 99999
14934: PPUSH
14935: CALL_OW 277
14939: GO 14914
14941: POP
14942: POP
14943: GO 14898
14945: POP
14946: POP
// end ;
14947: LD_VAR 0 1
14951: RET
// export function hHackSetLevel10 ; var i , j ; begin
14952: LD_INT 0
14954: PPUSH
14955: PPUSH
14956: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14957: LD_ADDR_VAR 0 2
14961: PUSH
14962: LD_INT 21
14964: PUSH
14965: LD_INT 1
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PPUSH
14972: CALL_OW 69
14976: PUSH
14977: FOR_IN
14978: IFFALSE 15030
// if IsSelected ( i ) then
14980: LD_VAR 0 2
14984: PPUSH
14985: CALL_OW 306
14989: IFFALSE 15028
// begin for j := 1 to 4 do
14991: LD_ADDR_VAR 0 3
14995: PUSH
14996: DOUBLE
14997: LD_INT 1
14999: DEC
15000: ST_TO_ADDR
15001: LD_INT 4
15003: PUSH
15004: FOR_TO
15005: IFFALSE 15026
// SetSkill ( i , j , 10 ) ;
15007: LD_VAR 0 2
15011: PPUSH
15012: LD_VAR 0 3
15016: PPUSH
15017: LD_INT 10
15019: PPUSH
15020: CALL_OW 237
15024: GO 15004
15026: POP
15027: POP
// end ;
15028: GO 14977
15030: POP
15031: POP
// end ;
15032: LD_VAR 0 1
15036: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15037: LD_INT 0
15039: PPUSH
15040: PPUSH
15041: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15042: LD_ADDR_VAR 0 2
15046: PUSH
15047: LD_INT 22
15049: PUSH
15050: LD_OWVAR 2
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: PUSH
15059: LD_INT 21
15061: PUSH
15062: LD_INT 1
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PPUSH
15073: CALL_OW 69
15077: PUSH
15078: FOR_IN
15079: IFFALSE 15120
// begin for j := 1 to 4 do
15081: LD_ADDR_VAR 0 3
15085: PUSH
15086: DOUBLE
15087: LD_INT 1
15089: DEC
15090: ST_TO_ADDR
15091: LD_INT 4
15093: PUSH
15094: FOR_TO
15095: IFFALSE 15116
// SetSkill ( i , j , 10 ) ;
15097: LD_VAR 0 2
15101: PPUSH
15102: LD_VAR 0 3
15106: PPUSH
15107: LD_INT 10
15109: PPUSH
15110: CALL_OW 237
15114: GO 15094
15116: POP
15117: POP
// end ;
15118: GO 15078
15120: POP
15121: POP
// end ;
15122: LD_VAR 0 1
15126: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15127: LD_INT 0
15129: PPUSH
// uc_side := your_side ;
15130: LD_ADDR_OWVAR 20
15134: PUSH
15135: LD_OWVAR 2
15139: ST_TO_ADDR
// uc_nation := nation ;
15140: LD_ADDR_OWVAR 21
15144: PUSH
15145: LD_VAR 0 1
15149: ST_TO_ADDR
// InitHc ;
15150: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15154: LD_INT 0
15156: PPUSH
15157: LD_VAR 0 2
15161: PPUSH
15162: LD_VAR 0 3
15166: PPUSH
15167: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15171: LD_VAR 0 4
15175: PPUSH
15176: LD_VAR 0 5
15180: PPUSH
15181: CALL_OW 428
15185: PUSH
15186: LD_INT 0
15188: EQUAL
15189: IFFALSE 15213
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15191: CALL_OW 44
15195: PPUSH
15196: LD_VAR 0 4
15200: PPUSH
15201: LD_VAR 0 5
15205: PPUSH
15206: LD_INT 1
15208: PPUSH
15209: CALL_OW 48
// end ;
15213: LD_VAR 0 6
15217: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15218: LD_INT 0
15220: PPUSH
15221: PPUSH
// uc_side := your_side ;
15222: LD_ADDR_OWVAR 20
15226: PUSH
15227: LD_OWVAR 2
15231: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15232: LD_VAR 0 1
15236: PUSH
15237: LD_INT 1
15239: PUSH
15240: LD_INT 2
15242: PUSH
15243: LD_INT 3
15245: PUSH
15246: LD_INT 4
15248: PUSH
15249: LD_INT 5
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: IN
15259: IFFALSE 15271
// uc_nation := nation_american else
15261: LD_ADDR_OWVAR 21
15265: PUSH
15266: LD_INT 1
15268: ST_TO_ADDR
15269: GO 15314
// if chassis in [ 11 , 12 , 13 , 14 ] then
15271: LD_VAR 0 1
15275: PUSH
15276: LD_INT 11
15278: PUSH
15279: LD_INT 12
15281: PUSH
15282: LD_INT 13
15284: PUSH
15285: LD_INT 14
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: IN
15294: IFFALSE 15306
// uc_nation := nation_arabian else
15296: LD_ADDR_OWVAR 21
15300: PUSH
15301: LD_INT 2
15303: ST_TO_ADDR
15304: GO 15314
// uc_nation := nation_russian ;
15306: LD_ADDR_OWVAR 21
15310: PUSH
15311: LD_INT 3
15313: ST_TO_ADDR
// vc_chassis := chassis ;
15314: LD_ADDR_OWVAR 37
15318: PUSH
15319: LD_VAR 0 1
15323: ST_TO_ADDR
// vc_engine := engine ;
15324: LD_ADDR_OWVAR 39
15328: PUSH
15329: LD_VAR 0 2
15333: ST_TO_ADDR
// vc_control := control ;
15334: LD_ADDR_OWVAR 38
15338: PUSH
15339: LD_VAR 0 3
15343: ST_TO_ADDR
// vc_weapon := weapon ;
15344: LD_ADDR_OWVAR 40
15348: PUSH
15349: LD_VAR 0 4
15353: ST_TO_ADDR
// un := CreateVehicle ;
15354: LD_ADDR_VAR 0 8
15358: PUSH
15359: CALL_OW 45
15363: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15364: LD_VAR 0 8
15368: PPUSH
15369: LD_INT 0
15371: PPUSH
15372: LD_INT 5
15374: PPUSH
15375: CALL_OW 12
15379: PPUSH
15380: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15384: LD_VAR 0 8
15388: PPUSH
15389: LD_VAR 0 5
15393: PPUSH
15394: LD_VAR 0 6
15398: PPUSH
15399: LD_INT 1
15401: PPUSH
15402: CALL_OW 48
// end ;
15406: LD_VAR 0 7
15410: RET
// export hInvincible ; every 1 do
15411: GO 15413
15413: DISABLE
// hInvincible := [ ] ;
15414: LD_ADDR_EXP 60
15418: PUSH
15419: EMPTY
15420: ST_TO_ADDR
15421: END
// every 10 do var i ;
15422: GO 15424
15424: DISABLE
15425: LD_INT 0
15427: PPUSH
// begin enable ;
15428: ENABLE
// if not hInvincible then
15429: LD_EXP 60
15433: NOT
15434: IFFALSE 15438
// exit ;
15436: GO 15482
// for i in hInvincible do
15438: LD_ADDR_VAR 0 1
15442: PUSH
15443: LD_EXP 60
15447: PUSH
15448: FOR_IN
15449: IFFALSE 15480
// if GetLives ( i ) < 1000 then
15451: LD_VAR 0 1
15455: PPUSH
15456: CALL_OW 256
15460: PUSH
15461: LD_INT 1000
15463: LESS
15464: IFFALSE 15478
// SetLives ( i , 1000 ) ;
15466: LD_VAR 0 1
15470: PPUSH
15471: LD_INT 1000
15473: PPUSH
15474: CALL_OW 234
15478: GO 15448
15480: POP
15481: POP
// end ;
15482: PPOPN 1
15484: END
// export function hHackInvincible ; var i ; begin
15485: LD_INT 0
15487: PPUSH
15488: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15489: LD_ADDR_VAR 0 2
15493: PUSH
15494: LD_INT 2
15496: PUSH
15497: LD_INT 21
15499: PUSH
15500: LD_INT 1
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: PUSH
15507: LD_INT 21
15509: PUSH
15510: LD_INT 2
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: LIST
15521: PPUSH
15522: CALL_OW 69
15526: PUSH
15527: FOR_IN
15528: IFFALSE 15589
// if IsSelected ( i ) then
15530: LD_VAR 0 2
15534: PPUSH
15535: CALL_OW 306
15539: IFFALSE 15587
// begin if i in hInvincible then
15541: LD_VAR 0 2
15545: PUSH
15546: LD_EXP 60
15550: IN
15551: IFFALSE 15571
// hInvincible := hInvincible diff i else
15553: LD_ADDR_EXP 60
15557: PUSH
15558: LD_EXP 60
15562: PUSH
15563: LD_VAR 0 2
15567: DIFF
15568: ST_TO_ADDR
15569: GO 15587
// hInvincible := hInvincible union i ;
15571: LD_ADDR_EXP 60
15575: PUSH
15576: LD_EXP 60
15580: PUSH
15581: LD_VAR 0 2
15585: UNION
15586: ST_TO_ADDR
// end ;
15587: GO 15527
15589: POP
15590: POP
// end ;
15591: LD_VAR 0 1
15595: RET
// export function hHackInvisible ; var i , j ; begin
15596: LD_INT 0
15598: PPUSH
15599: PPUSH
15600: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15601: LD_ADDR_VAR 0 2
15605: PUSH
15606: LD_INT 21
15608: PUSH
15609: LD_INT 1
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PPUSH
15616: CALL_OW 69
15620: PUSH
15621: FOR_IN
15622: IFFALSE 15646
// if IsSelected ( i ) then
15624: LD_VAR 0 2
15628: PPUSH
15629: CALL_OW 306
15633: IFFALSE 15644
// ComForceInvisible ( i ) ;
15635: LD_VAR 0 2
15639: PPUSH
15640: CALL_OW 496
15644: GO 15621
15646: POP
15647: POP
// end ;
15648: LD_VAR 0 1
15652: RET
// export function hHackChangeYourSide ; begin
15653: LD_INT 0
15655: PPUSH
// if your_side = 8 then
15656: LD_OWVAR 2
15660: PUSH
15661: LD_INT 8
15663: EQUAL
15664: IFFALSE 15676
// your_side := 0 else
15666: LD_ADDR_OWVAR 2
15670: PUSH
15671: LD_INT 0
15673: ST_TO_ADDR
15674: GO 15690
// your_side := your_side + 1 ;
15676: LD_ADDR_OWVAR 2
15680: PUSH
15681: LD_OWVAR 2
15685: PUSH
15686: LD_INT 1
15688: PLUS
15689: ST_TO_ADDR
// end ;
15690: LD_VAR 0 1
15694: RET
// export function hHackChangeUnitSide ; var i , j ; begin
15695: LD_INT 0
15697: PPUSH
15698: PPUSH
15699: PPUSH
// for i in all_units do
15700: LD_ADDR_VAR 0 2
15704: PUSH
15705: LD_OWVAR 3
15709: PUSH
15710: FOR_IN
15711: IFFALSE 15789
// if IsSelected ( i ) then
15713: LD_VAR 0 2
15717: PPUSH
15718: CALL_OW 306
15722: IFFALSE 15787
// begin j := GetSide ( i ) ;
15724: LD_ADDR_VAR 0 3
15728: PUSH
15729: LD_VAR 0 2
15733: PPUSH
15734: CALL_OW 255
15738: ST_TO_ADDR
// if j = 8 then
15739: LD_VAR 0 3
15743: PUSH
15744: LD_INT 8
15746: EQUAL
15747: IFFALSE 15759
// j := 0 else
15749: LD_ADDR_VAR 0 3
15753: PUSH
15754: LD_INT 0
15756: ST_TO_ADDR
15757: GO 15773
// j := j + 1 ;
15759: LD_ADDR_VAR 0 3
15763: PUSH
15764: LD_VAR 0 3
15768: PUSH
15769: LD_INT 1
15771: PLUS
15772: ST_TO_ADDR
// SetSide ( i , j ) ;
15773: LD_VAR 0 2
15777: PPUSH
15778: LD_VAR 0 3
15782: PPUSH
15783: CALL_OW 235
// end ;
15787: GO 15710
15789: POP
15790: POP
// end ;
15791: LD_VAR 0 1
15795: RET
// export function hHackFog ; begin
15796: LD_INT 0
15798: PPUSH
// FogOff ( true ) ;
15799: LD_INT 1
15801: PPUSH
15802: CALL_OW 344
// end ;
15806: LD_VAR 0 1
15810: RET
// export function hHackTeleport ( unit , x , y ) ; begin
15811: LD_INT 0
15813: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
15814: LD_VAR 0 1
15818: PPUSH
15819: LD_VAR 0 2
15823: PPUSH
15824: LD_VAR 0 3
15828: PPUSH
15829: LD_INT 1
15831: PPUSH
15832: LD_INT 1
15834: PPUSH
15835: CALL_OW 483
// CenterOnXY ( x , y ) ;
15839: LD_VAR 0 2
15843: PPUSH
15844: LD_VAR 0 3
15848: PPUSH
15849: CALL_OW 84
// end ;
15853: LD_VAR 0 4
15857: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
15858: LD_INT 0
15860: PPUSH
15861: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
15862: LD_VAR 0 1
15866: NOT
15867: PUSH
15868: LD_VAR 0 2
15872: PPUSH
15873: LD_VAR 0 3
15877: PPUSH
15878: CALL_OW 488
15882: NOT
15883: OR
15884: PUSH
15885: LD_VAR 0 1
15889: PPUSH
15890: CALL_OW 266
15894: PUSH
15895: LD_INT 3
15897: NONEQUAL
15898: PUSH
15899: LD_VAR 0 1
15903: PPUSH
15904: CALL_OW 247
15908: PUSH
15909: LD_INT 1
15911: EQUAL
15912: NOT
15913: AND
15914: OR
15915: IFFALSE 15919
// exit ;
15917: GO 16068
// if GetType ( factory ) = unit_human then
15919: LD_VAR 0 1
15923: PPUSH
15924: CALL_OW 247
15928: PUSH
15929: LD_INT 1
15931: EQUAL
15932: IFFALSE 15949
// factory := IsInUnit ( factory ) ;
15934: LD_ADDR_VAR 0 1
15938: PUSH
15939: LD_VAR 0 1
15943: PPUSH
15944: CALL_OW 310
15948: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
15949: LD_VAR 0 1
15953: PPUSH
15954: CALL_OW 266
15958: PUSH
15959: LD_INT 3
15961: NONEQUAL
15962: IFFALSE 15966
// exit ;
15964: GO 16068
// if HexInfo ( x , y ) = factory then
15966: LD_VAR 0 2
15970: PPUSH
15971: LD_VAR 0 3
15975: PPUSH
15976: CALL_OW 428
15980: PUSH
15981: LD_VAR 0 1
15985: EQUAL
15986: IFFALSE 16013
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
15988: LD_ADDR_EXP 61
15992: PUSH
15993: LD_EXP 61
15997: PPUSH
15998: LD_VAR 0 1
16002: PPUSH
16003: LD_INT 0
16005: PPUSH
16006: CALL_OW 1
16010: ST_TO_ADDR
16011: GO 16064
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
16013: LD_ADDR_EXP 61
16017: PUSH
16018: LD_EXP 61
16022: PPUSH
16023: LD_VAR 0 1
16027: PPUSH
16028: LD_VAR 0 1
16032: PPUSH
16033: CALL_OW 255
16037: PUSH
16038: LD_VAR 0 1
16042: PUSH
16043: LD_VAR 0 2
16047: PUSH
16048: LD_VAR 0 3
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: PPUSH
16059: CALL_OW 1
16063: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16064: CALL 16073 0 0
// end ;
16068: LD_VAR 0 4
16072: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16073: LD_INT 0
16075: PPUSH
16076: PPUSH
16077: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16078: LD_STRING resetFactoryWaypoint();
16080: PPUSH
16081: CALL_OW 559
// if factoryWaypoints then
16085: LD_EXP 61
16089: IFFALSE 16215
// begin list := PrepareArray ( factoryWaypoints ) ;
16091: LD_ADDR_VAR 0 3
16095: PUSH
16096: LD_EXP 61
16100: PPUSH
16101: CALL 62759 0 1
16105: ST_TO_ADDR
// for i := 1 to list do
16106: LD_ADDR_VAR 0 2
16110: PUSH
16111: DOUBLE
16112: LD_INT 1
16114: DEC
16115: ST_TO_ADDR
16116: LD_VAR 0 3
16120: PUSH
16121: FOR_TO
16122: IFFALSE 16213
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16124: LD_STRING setFactoryWaypointXY(
16126: PUSH
16127: LD_VAR 0 3
16131: PUSH
16132: LD_VAR 0 2
16136: ARRAY
16137: PUSH
16138: LD_INT 1
16140: ARRAY
16141: STR
16142: PUSH
16143: LD_STRING ,
16145: STR
16146: PUSH
16147: LD_VAR 0 3
16151: PUSH
16152: LD_VAR 0 2
16156: ARRAY
16157: PUSH
16158: LD_INT 2
16160: ARRAY
16161: STR
16162: PUSH
16163: LD_STRING ,
16165: STR
16166: PUSH
16167: LD_VAR 0 3
16171: PUSH
16172: LD_VAR 0 2
16176: ARRAY
16177: PUSH
16178: LD_INT 3
16180: ARRAY
16181: STR
16182: PUSH
16183: LD_STRING ,
16185: STR
16186: PUSH
16187: LD_VAR 0 3
16191: PUSH
16192: LD_VAR 0 2
16196: ARRAY
16197: PUSH
16198: LD_INT 4
16200: ARRAY
16201: STR
16202: PUSH
16203: LD_STRING )
16205: STR
16206: PPUSH
16207: CALL_OW 559
16211: GO 16121
16213: POP
16214: POP
// end ; end ;
16215: LD_VAR 0 1
16219: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16220: LD_INT 0
16222: PPUSH
// if HexInfo ( x , y ) = warehouse then
16223: LD_VAR 0 2
16227: PPUSH
16228: LD_VAR 0 3
16232: PPUSH
16233: CALL_OW 428
16237: PUSH
16238: LD_VAR 0 1
16242: EQUAL
16243: IFFALSE 16270
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16245: LD_ADDR_EXP 62
16249: PUSH
16250: LD_EXP 62
16254: PPUSH
16255: LD_VAR 0 1
16259: PPUSH
16260: LD_INT 0
16262: PPUSH
16263: CALL_OW 1
16267: ST_TO_ADDR
16268: GO 16321
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16270: LD_ADDR_EXP 62
16274: PUSH
16275: LD_EXP 62
16279: PPUSH
16280: LD_VAR 0 1
16284: PPUSH
16285: LD_VAR 0 1
16289: PPUSH
16290: CALL_OW 255
16294: PUSH
16295: LD_VAR 0 1
16299: PUSH
16300: LD_VAR 0 2
16304: PUSH
16305: LD_VAR 0 3
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: PPUSH
16316: CALL_OW 1
16320: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16321: CALL 16330 0 0
// end ;
16325: LD_VAR 0 4
16329: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16330: LD_INT 0
16332: PPUSH
16333: PPUSH
16334: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16335: LD_STRING resetWarehouseGatheringPoints();
16337: PPUSH
16338: CALL_OW 559
// if warehouseGatheringPoints then
16342: LD_EXP 62
16346: IFFALSE 16472
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16348: LD_ADDR_VAR 0 3
16352: PUSH
16353: LD_EXP 62
16357: PPUSH
16358: CALL 62759 0 1
16362: ST_TO_ADDR
// for i := 1 to list do
16363: LD_ADDR_VAR 0 2
16367: PUSH
16368: DOUBLE
16369: LD_INT 1
16371: DEC
16372: ST_TO_ADDR
16373: LD_VAR 0 3
16377: PUSH
16378: FOR_TO
16379: IFFALSE 16470
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16381: LD_STRING setWarehouseGatheringPointXY(
16383: PUSH
16384: LD_VAR 0 3
16388: PUSH
16389: LD_VAR 0 2
16393: ARRAY
16394: PUSH
16395: LD_INT 1
16397: ARRAY
16398: STR
16399: PUSH
16400: LD_STRING ,
16402: STR
16403: PUSH
16404: LD_VAR 0 3
16408: PUSH
16409: LD_VAR 0 2
16413: ARRAY
16414: PUSH
16415: LD_INT 2
16417: ARRAY
16418: STR
16419: PUSH
16420: LD_STRING ,
16422: STR
16423: PUSH
16424: LD_VAR 0 3
16428: PUSH
16429: LD_VAR 0 2
16433: ARRAY
16434: PUSH
16435: LD_INT 3
16437: ARRAY
16438: STR
16439: PUSH
16440: LD_STRING ,
16442: STR
16443: PUSH
16444: LD_VAR 0 3
16448: PUSH
16449: LD_VAR 0 2
16453: ARRAY
16454: PUSH
16455: LD_INT 4
16457: ARRAY
16458: STR
16459: PUSH
16460: LD_STRING )
16462: STR
16463: PPUSH
16464: CALL_OW 559
16468: GO 16378
16470: POP
16471: POP
// end ; end ;
16472: LD_VAR 0 1
16476: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
16477: LD_EXP 62
16481: IFFALSE 17166
16483: GO 16485
16485: DISABLE
16486: LD_INT 0
16488: PPUSH
16489: PPUSH
16490: PPUSH
16491: PPUSH
16492: PPUSH
16493: PPUSH
16494: PPUSH
16495: PPUSH
16496: PPUSH
// begin enable ;
16497: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
16498: LD_ADDR_VAR 0 3
16502: PUSH
16503: LD_EXP 62
16507: PPUSH
16508: CALL 62759 0 1
16512: ST_TO_ADDR
// if not list then
16513: LD_VAR 0 3
16517: NOT
16518: IFFALSE 16522
// exit ;
16520: GO 17166
// for i := 1 to list do
16522: LD_ADDR_VAR 0 1
16526: PUSH
16527: DOUBLE
16528: LD_INT 1
16530: DEC
16531: ST_TO_ADDR
16532: LD_VAR 0 3
16536: PUSH
16537: FOR_TO
16538: IFFALSE 17164
// begin depot := list [ i ] [ 2 ] ;
16540: LD_ADDR_VAR 0 8
16544: PUSH
16545: LD_VAR 0 3
16549: PUSH
16550: LD_VAR 0 1
16554: ARRAY
16555: PUSH
16556: LD_INT 2
16558: ARRAY
16559: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
16560: LD_ADDR_VAR 0 5
16564: PUSH
16565: LD_VAR 0 3
16569: PUSH
16570: LD_VAR 0 1
16574: ARRAY
16575: PUSH
16576: LD_INT 1
16578: ARRAY
16579: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
16580: LD_VAR 0 8
16584: PPUSH
16585: CALL_OW 301
16589: PUSH
16590: LD_VAR 0 5
16594: PUSH
16595: LD_VAR 0 8
16599: PPUSH
16600: CALL_OW 255
16604: NONEQUAL
16605: OR
16606: IFFALSE 16635
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
16608: LD_ADDR_EXP 62
16612: PUSH
16613: LD_EXP 62
16617: PPUSH
16618: LD_VAR 0 8
16622: PPUSH
16623: LD_INT 0
16625: PPUSH
16626: CALL_OW 1
16630: ST_TO_ADDR
// exit ;
16631: POP
16632: POP
16633: GO 17166
// end ; x := list [ i ] [ 3 ] ;
16635: LD_ADDR_VAR 0 6
16639: PUSH
16640: LD_VAR 0 3
16644: PUSH
16645: LD_VAR 0 1
16649: ARRAY
16650: PUSH
16651: LD_INT 3
16653: ARRAY
16654: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
16655: LD_ADDR_VAR 0 7
16659: PUSH
16660: LD_VAR 0 3
16664: PUSH
16665: LD_VAR 0 1
16669: ARRAY
16670: PUSH
16671: LD_INT 4
16673: ARRAY
16674: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
16675: LD_ADDR_VAR 0 9
16679: PUSH
16680: LD_VAR 0 6
16684: PPUSH
16685: LD_VAR 0 7
16689: PPUSH
16690: LD_INT 16
16692: PPUSH
16693: CALL 61347 0 3
16697: ST_TO_ADDR
// if not cratesNearbyPoint then
16698: LD_VAR 0 9
16702: NOT
16703: IFFALSE 16709
// exit ;
16705: POP
16706: POP
16707: GO 17166
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
16709: LD_ADDR_VAR 0 4
16713: PUSH
16714: LD_INT 22
16716: PUSH
16717: LD_VAR 0 5
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: LD_INT 3
16728: PUSH
16729: LD_INT 60
16731: PUSH
16732: EMPTY
16733: LIST
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PUSH
16739: LD_INT 91
16741: PUSH
16742: LD_VAR 0 8
16746: PUSH
16747: LD_INT 6
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: LIST
16754: PUSH
16755: LD_INT 2
16757: PUSH
16758: LD_INT 25
16760: PUSH
16761: LD_INT 2
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: LD_INT 25
16770: PUSH
16771: LD_INT 16
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: LIST
16782: PUSH
16783: EMPTY
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: PPUSH
16789: CALL_OW 69
16793: PUSH
16794: LD_VAR 0 8
16798: PPUSH
16799: CALL_OW 313
16803: PPUSH
16804: LD_INT 3
16806: PUSH
16807: LD_INT 60
16809: PUSH
16810: EMPTY
16811: LIST
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: PUSH
16817: LD_INT 2
16819: PUSH
16820: LD_INT 25
16822: PUSH
16823: LD_INT 2
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: LD_INT 25
16832: PUSH
16833: LD_INT 16
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: LIST
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: PPUSH
16849: CALL_OW 72
16853: UNION
16854: ST_TO_ADDR
// if tmp then
16855: LD_VAR 0 4
16859: IFFALSE 16939
// begin tmp := ShrinkArray ( tmp , 3 ) ;
16861: LD_ADDR_VAR 0 4
16865: PUSH
16866: LD_VAR 0 4
16870: PPUSH
16871: LD_INT 3
16873: PPUSH
16874: CALL 59316 0 2
16878: ST_TO_ADDR
// for j in tmp do
16879: LD_ADDR_VAR 0 2
16883: PUSH
16884: LD_VAR 0 4
16888: PUSH
16889: FOR_IN
16890: IFFALSE 16933
// begin if IsInUnit ( j ) then
16892: LD_VAR 0 2
16896: PPUSH
16897: CALL_OW 310
16901: IFFALSE 16912
// ComExit ( j ) ;
16903: LD_VAR 0 2
16907: PPUSH
16908: CALL 59399 0 1
// AddComCollect ( j , x , y ) ;
16912: LD_VAR 0 2
16916: PPUSH
16917: LD_VAR 0 6
16921: PPUSH
16922: LD_VAR 0 7
16926: PPUSH
16927: CALL_OW 177
// end ;
16931: GO 16889
16933: POP
16934: POP
// exit ;
16935: POP
16936: POP
16937: GO 17166
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
16939: LD_ADDR_VAR 0 4
16943: PUSH
16944: LD_INT 22
16946: PUSH
16947: LD_VAR 0 5
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: PUSH
16956: LD_INT 91
16958: PUSH
16959: LD_VAR 0 8
16963: PUSH
16964: LD_INT 8
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: LIST
16971: PUSH
16972: LD_INT 2
16974: PUSH
16975: LD_INT 34
16977: PUSH
16978: LD_INT 12
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: PUSH
16985: LD_INT 34
16987: PUSH
16988: LD_INT 51
16990: PUSH
16991: EMPTY
16992: LIST
16993: LIST
16994: PUSH
16995: LD_INT 34
16997: PUSH
16998: LD_INT 32
17000: PUSH
17001: EMPTY
17002: LIST
17003: LIST
17004: PUSH
17005: LD_INT 34
17007: PUSH
17008: LD_INT 89
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: LIST
17026: PPUSH
17027: CALL_OW 69
17031: ST_TO_ADDR
// if tmp then
17032: LD_VAR 0 4
17036: IFFALSE 17162
// begin for j in tmp do
17038: LD_ADDR_VAR 0 2
17042: PUSH
17043: LD_VAR 0 4
17047: PUSH
17048: FOR_IN
17049: IFFALSE 17160
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
17051: LD_VAR 0 2
17055: PPUSH
17056: CALL_OW 262
17060: PUSH
17061: LD_INT 3
17063: EQUAL
17064: PUSH
17065: LD_VAR 0 2
17069: PPUSH
17070: CALL_OW 261
17074: PUSH
17075: LD_INT 20
17077: GREATER
17078: OR
17079: PUSH
17080: LD_VAR 0 2
17084: PPUSH
17085: CALL_OW 314
17089: NOT
17090: AND
17091: PUSH
17092: LD_VAR 0 2
17096: PPUSH
17097: CALL_OW 263
17101: PUSH
17102: LD_INT 1
17104: NONEQUAL
17105: PUSH
17106: LD_VAR 0 2
17110: PPUSH
17111: CALL_OW 311
17115: OR
17116: AND
17117: IFFALSE 17158
// begin ComCollect ( j , x , y ) ;
17119: LD_VAR 0 2
17123: PPUSH
17124: LD_VAR 0 6
17128: PPUSH
17129: LD_VAR 0 7
17133: PPUSH
17134: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
17138: LD_VAR 0 2
17142: PPUSH
17143: LD_VAR 0 8
17147: PPUSH
17148: CALL_OW 172
// exit ;
17152: POP
17153: POP
17154: POP
17155: POP
17156: GO 17166
// end ;
17158: GO 17048
17160: POP
17161: POP
// end ; end ;
17162: GO 16537
17164: POP
17165: POP
// end ; end_of_file
17166: PPOPN 9
17168: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17169: LD_INT 0
17171: PPUSH
17172: PPUSH
17173: PPUSH
17174: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17175: LD_VAR 0 1
17179: PPUSH
17180: CALL_OW 264
17184: PUSH
17185: LD_INT 91
17187: EQUAL
17188: IFFALSE 17260
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17190: LD_INT 68
17192: PPUSH
17193: LD_VAR 0 1
17197: PPUSH
17198: CALL_OW 255
17202: PPUSH
17203: CALL_OW 321
17207: PUSH
17208: LD_INT 2
17210: EQUAL
17211: IFFALSE 17223
// eff := 70 else
17213: LD_ADDR_VAR 0 4
17217: PUSH
17218: LD_INT 70
17220: ST_TO_ADDR
17221: GO 17231
// eff := 30 ;
17223: LD_ADDR_VAR 0 4
17227: PUSH
17228: LD_INT 30
17230: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17231: LD_VAR 0 1
17235: PPUSH
17236: CALL_OW 250
17240: PPUSH
17241: LD_VAR 0 1
17245: PPUSH
17246: CALL_OW 251
17250: PPUSH
17251: LD_VAR 0 4
17255: PPUSH
17256: CALL_OW 495
// end ; end ;
17260: LD_VAR 0 2
17264: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17265: LD_INT 0
17267: PPUSH
// end ;
17268: LD_VAR 0 4
17272: RET
// export function SOS_Command ( cmd ) ; begin
17273: LD_INT 0
17275: PPUSH
// end ;
17276: LD_VAR 0 2
17280: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17281: LD_INT 0
17283: PPUSH
// end ;
17284: LD_VAR 0 6
17288: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
17289: LD_INT 0
17291: PPUSH
17292: PPUSH
// if not vehicle or not factory then
17293: LD_VAR 0 1
17297: NOT
17298: PUSH
17299: LD_VAR 0 2
17303: NOT
17304: OR
17305: IFFALSE 17309
// exit ;
17307: GO 17540
// if factoryWaypoints >= factory then
17309: LD_EXP 61
17313: PUSH
17314: LD_VAR 0 2
17318: GREATEREQUAL
17319: IFFALSE 17540
// if factoryWaypoints [ factory ] then
17321: LD_EXP 61
17325: PUSH
17326: LD_VAR 0 2
17330: ARRAY
17331: IFFALSE 17540
// begin if GetControl ( vehicle ) = control_manual then
17333: LD_VAR 0 1
17337: PPUSH
17338: CALL_OW 263
17342: PUSH
17343: LD_INT 1
17345: EQUAL
17346: IFFALSE 17427
// begin driver := IsDrivenBy ( vehicle ) ;
17348: LD_ADDR_VAR 0 4
17352: PUSH
17353: LD_VAR 0 1
17357: PPUSH
17358: CALL_OW 311
17362: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17363: LD_VAR 0 4
17367: PPUSH
17368: LD_EXP 61
17372: PUSH
17373: LD_VAR 0 2
17377: ARRAY
17378: PUSH
17379: LD_INT 3
17381: ARRAY
17382: PPUSH
17383: LD_EXP 61
17387: PUSH
17388: LD_VAR 0 2
17392: ARRAY
17393: PUSH
17394: LD_INT 4
17396: ARRAY
17397: PPUSH
17398: CALL_OW 171
// AddComExitVehicle ( driver ) ;
17402: LD_VAR 0 4
17406: PPUSH
17407: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
17411: LD_VAR 0 4
17415: PPUSH
17416: LD_VAR 0 2
17420: PPUSH
17421: CALL_OW 180
// end else
17425: GO 17540
// if GetControl ( vehicle ) = control_remote then
17427: LD_VAR 0 1
17431: PPUSH
17432: CALL_OW 263
17436: PUSH
17437: LD_INT 2
17439: EQUAL
17440: IFFALSE 17501
// begin wait ( 0 0$2 ) ;
17442: LD_INT 70
17444: PPUSH
17445: CALL_OW 67
// if Connect ( vehicle ) then
17449: LD_VAR 0 1
17453: PPUSH
17454: CALL 29620 0 1
17458: IFFALSE 17499
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17460: LD_VAR 0 1
17464: PPUSH
17465: LD_EXP 61
17469: PUSH
17470: LD_VAR 0 2
17474: ARRAY
17475: PUSH
17476: LD_INT 3
17478: ARRAY
17479: PPUSH
17480: LD_EXP 61
17484: PUSH
17485: LD_VAR 0 2
17489: ARRAY
17490: PUSH
17491: LD_INT 4
17493: ARRAY
17494: PPUSH
17495: CALL_OW 171
// end else
17499: GO 17540
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17501: LD_VAR 0 1
17505: PPUSH
17506: LD_EXP 61
17510: PUSH
17511: LD_VAR 0 2
17515: ARRAY
17516: PUSH
17517: LD_INT 3
17519: ARRAY
17520: PPUSH
17521: LD_EXP 61
17525: PUSH
17526: LD_VAR 0 2
17530: ARRAY
17531: PUSH
17532: LD_INT 4
17534: ARRAY
17535: PPUSH
17536: CALL_OW 171
// end ; end ;
17540: LD_VAR 0 3
17544: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
17545: LD_INT 0
17547: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
17548: LD_VAR 0 1
17552: PUSH
17553: LD_INT 250
17555: EQUAL
17556: PUSH
17557: LD_VAR 0 2
17561: PPUSH
17562: CALL_OW 264
17566: PUSH
17567: LD_INT 81
17569: EQUAL
17570: AND
17571: IFFALSE 17592
// MinerPlaceMine ( unit , x , y ) ;
17573: LD_VAR 0 2
17577: PPUSH
17578: LD_VAR 0 4
17582: PPUSH
17583: LD_VAR 0 5
17587: PPUSH
17588: CALL 19977 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
17592: LD_VAR 0 1
17596: PUSH
17597: LD_INT 251
17599: EQUAL
17600: PUSH
17601: LD_VAR 0 2
17605: PPUSH
17606: CALL_OW 264
17610: PUSH
17611: LD_INT 81
17613: EQUAL
17614: AND
17615: IFFALSE 17636
// MinerDetonateMine ( unit , x , y ) ;
17617: LD_VAR 0 2
17621: PPUSH
17622: LD_VAR 0 4
17626: PPUSH
17627: LD_VAR 0 5
17631: PPUSH
17632: CALL 20252 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
17636: LD_VAR 0 1
17640: PUSH
17641: LD_INT 252
17643: EQUAL
17644: PUSH
17645: LD_VAR 0 2
17649: PPUSH
17650: CALL_OW 264
17654: PUSH
17655: LD_INT 81
17657: EQUAL
17658: AND
17659: IFFALSE 17680
// MinerCreateMinefield ( unit , x , y ) ;
17661: LD_VAR 0 2
17665: PPUSH
17666: LD_VAR 0 4
17670: PPUSH
17671: LD_VAR 0 5
17675: PPUSH
17676: CALL 20669 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
17680: LD_VAR 0 1
17684: PUSH
17685: LD_INT 253
17687: EQUAL
17688: PUSH
17689: LD_VAR 0 2
17693: PPUSH
17694: CALL_OW 257
17698: PUSH
17699: LD_INT 5
17701: EQUAL
17702: AND
17703: IFFALSE 17724
// ComBinocular ( unit , x , y ) ;
17705: LD_VAR 0 2
17709: PPUSH
17710: LD_VAR 0 4
17714: PPUSH
17715: LD_VAR 0 5
17719: PPUSH
17720: CALL 21038 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
17724: LD_VAR 0 1
17728: PUSH
17729: LD_INT 254
17731: EQUAL
17732: PUSH
17733: LD_VAR 0 2
17737: PPUSH
17738: CALL_OW 264
17742: PUSH
17743: LD_INT 99
17745: EQUAL
17746: AND
17747: PUSH
17748: LD_VAR 0 3
17752: PPUSH
17753: CALL_OW 263
17757: PUSH
17758: LD_INT 3
17760: EQUAL
17761: AND
17762: IFFALSE 17778
// HackDestroyVehicle ( unit , selectedUnit ) ;
17764: LD_VAR 0 2
17768: PPUSH
17769: LD_VAR 0 3
17773: PPUSH
17774: CALL 19341 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
17778: LD_VAR 0 1
17782: PUSH
17783: LD_INT 255
17785: EQUAL
17786: PUSH
17787: LD_VAR 0 2
17791: PPUSH
17792: CALL_OW 264
17796: PUSH
17797: LD_INT 14
17799: PUSH
17800: LD_INT 53
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: IN
17807: AND
17808: PUSH
17809: LD_VAR 0 4
17813: PPUSH
17814: LD_VAR 0 5
17818: PPUSH
17819: CALL_OW 488
17823: AND
17824: IFFALSE 17848
// CutTreeXYR ( unit , x , y , 12 ) ;
17826: LD_VAR 0 2
17830: PPUSH
17831: LD_VAR 0 4
17835: PPUSH
17836: LD_VAR 0 5
17840: PPUSH
17841: LD_INT 12
17843: PPUSH
17844: CALL 17911 0 4
// if cmd = 256 then
17848: LD_VAR 0 1
17852: PUSH
17853: LD_INT 256
17855: EQUAL
17856: IFFALSE 17877
// SetFactoryWaypoint ( unit , x , y ) ;
17858: LD_VAR 0 2
17862: PPUSH
17863: LD_VAR 0 4
17867: PPUSH
17868: LD_VAR 0 5
17872: PPUSH
17873: CALL 15858 0 3
// if cmd = 257 then
17877: LD_VAR 0 1
17881: PUSH
17882: LD_INT 257
17884: EQUAL
17885: IFFALSE 17906
// SetWarehouseGatheringPoint ( unit , x , y ) ;
17887: LD_VAR 0 2
17891: PPUSH
17892: LD_VAR 0 4
17896: PPUSH
17897: LD_VAR 0 5
17901: PPUSH
17902: CALL 16220 0 3
// end ;
17906: LD_VAR 0 6
17910: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17911: LD_INT 0
17913: PPUSH
17914: PPUSH
17915: PPUSH
17916: PPUSH
17917: PPUSH
17918: PPUSH
17919: PPUSH
17920: PPUSH
17921: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
17922: LD_VAR 0 1
17926: NOT
17927: PUSH
17928: LD_VAR 0 2
17932: PPUSH
17933: LD_VAR 0 3
17937: PPUSH
17938: CALL_OW 488
17942: NOT
17943: OR
17944: PUSH
17945: LD_VAR 0 4
17949: NOT
17950: OR
17951: IFFALSE 17955
// exit ;
17953: GO 18295
// list := [ ] ;
17955: LD_ADDR_VAR 0 13
17959: PUSH
17960: EMPTY
17961: ST_TO_ADDR
// if x - r < 0 then
17962: LD_VAR 0 2
17966: PUSH
17967: LD_VAR 0 4
17971: MINUS
17972: PUSH
17973: LD_INT 0
17975: LESS
17976: IFFALSE 17988
// min_x := 0 else
17978: LD_ADDR_VAR 0 7
17982: PUSH
17983: LD_INT 0
17985: ST_TO_ADDR
17986: GO 18004
// min_x := x - r ;
17988: LD_ADDR_VAR 0 7
17992: PUSH
17993: LD_VAR 0 2
17997: PUSH
17998: LD_VAR 0 4
18002: MINUS
18003: ST_TO_ADDR
// if y - r < 0 then
18004: LD_VAR 0 3
18008: PUSH
18009: LD_VAR 0 4
18013: MINUS
18014: PUSH
18015: LD_INT 0
18017: LESS
18018: IFFALSE 18030
// min_y := 0 else
18020: LD_ADDR_VAR 0 8
18024: PUSH
18025: LD_INT 0
18027: ST_TO_ADDR
18028: GO 18046
// min_y := y - r ;
18030: LD_ADDR_VAR 0 8
18034: PUSH
18035: LD_VAR 0 3
18039: PUSH
18040: LD_VAR 0 4
18044: MINUS
18045: ST_TO_ADDR
// max_x := x + r ;
18046: LD_ADDR_VAR 0 9
18050: PUSH
18051: LD_VAR 0 2
18055: PUSH
18056: LD_VAR 0 4
18060: PLUS
18061: ST_TO_ADDR
// max_y := y + r ;
18062: LD_ADDR_VAR 0 10
18066: PUSH
18067: LD_VAR 0 3
18071: PUSH
18072: LD_VAR 0 4
18076: PLUS
18077: ST_TO_ADDR
// for _x = min_x to max_x do
18078: LD_ADDR_VAR 0 11
18082: PUSH
18083: DOUBLE
18084: LD_VAR 0 7
18088: DEC
18089: ST_TO_ADDR
18090: LD_VAR 0 9
18094: PUSH
18095: FOR_TO
18096: IFFALSE 18213
// for _y = min_y to max_y do
18098: LD_ADDR_VAR 0 12
18102: PUSH
18103: DOUBLE
18104: LD_VAR 0 8
18108: DEC
18109: ST_TO_ADDR
18110: LD_VAR 0 10
18114: PUSH
18115: FOR_TO
18116: IFFALSE 18209
// begin if not ValidHex ( _x , _y ) then
18118: LD_VAR 0 11
18122: PPUSH
18123: LD_VAR 0 12
18127: PPUSH
18128: CALL_OW 488
18132: NOT
18133: IFFALSE 18137
// continue ;
18135: GO 18115
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18137: LD_VAR 0 11
18141: PPUSH
18142: LD_VAR 0 12
18146: PPUSH
18147: CALL_OW 351
18151: PUSH
18152: LD_VAR 0 11
18156: PPUSH
18157: LD_VAR 0 12
18161: PPUSH
18162: CALL_OW 554
18166: AND
18167: IFFALSE 18207
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18169: LD_ADDR_VAR 0 13
18173: PUSH
18174: LD_VAR 0 13
18178: PPUSH
18179: LD_VAR 0 13
18183: PUSH
18184: LD_INT 1
18186: PLUS
18187: PPUSH
18188: LD_VAR 0 11
18192: PUSH
18193: LD_VAR 0 12
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PPUSH
18202: CALL_OW 2
18206: ST_TO_ADDR
// end ;
18207: GO 18115
18209: POP
18210: POP
18211: GO 18095
18213: POP
18214: POP
// if not list then
18215: LD_VAR 0 13
18219: NOT
18220: IFFALSE 18224
// exit ;
18222: GO 18295
// for i in list do
18224: LD_ADDR_VAR 0 6
18228: PUSH
18229: LD_VAR 0 13
18233: PUSH
18234: FOR_IN
18235: IFFALSE 18293
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18237: LD_VAR 0 1
18241: PPUSH
18242: LD_STRING M
18244: PUSH
18245: LD_VAR 0 6
18249: PUSH
18250: LD_INT 1
18252: ARRAY
18253: PUSH
18254: LD_VAR 0 6
18258: PUSH
18259: LD_INT 2
18261: ARRAY
18262: PUSH
18263: LD_INT 0
18265: PUSH
18266: LD_INT 0
18268: PUSH
18269: LD_INT 0
18271: PUSH
18272: LD_INT 0
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: PUSH
18284: EMPTY
18285: LIST
18286: PPUSH
18287: CALL_OW 447
18291: GO 18234
18293: POP
18294: POP
// end ;
18295: LD_VAR 0 5
18299: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18300: LD_EXP 64
18304: NOT
18305: IFFALSE 18355
18307: GO 18309
18309: DISABLE
// begin initHack := true ;
18310: LD_ADDR_EXP 64
18314: PUSH
18315: LD_INT 1
18317: ST_TO_ADDR
// hackTanks := [ ] ;
18318: LD_ADDR_EXP 65
18322: PUSH
18323: EMPTY
18324: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18325: LD_ADDR_EXP 66
18329: PUSH
18330: EMPTY
18331: ST_TO_ADDR
// hackLimit := 3 ;
18332: LD_ADDR_EXP 67
18336: PUSH
18337: LD_INT 3
18339: ST_TO_ADDR
// hackDist := 12 ;
18340: LD_ADDR_EXP 68
18344: PUSH
18345: LD_INT 12
18347: ST_TO_ADDR
// hackCounter := [ ] ;
18348: LD_ADDR_EXP 69
18352: PUSH
18353: EMPTY
18354: ST_TO_ADDR
// end ;
18355: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18356: LD_EXP 64
18360: PUSH
18361: LD_INT 34
18363: PUSH
18364: LD_INT 99
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PPUSH
18371: CALL_OW 69
18375: AND
18376: IFFALSE 18629
18378: GO 18380
18380: DISABLE
18381: LD_INT 0
18383: PPUSH
18384: PPUSH
// begin enable ;
18385: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18386: LD_ADDR_VAR 0 1
18390: PUSH
18391: LD_INT 34
18393: PUSH
18394: LD_INT 99
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PPUSH
18401: CALL_OW 69
18405: PUSH
18406: FOR_IN
18407: IFFALSE 18627
// begin if not i in hackTanks then
18409: LD_VAR 0 1
18413: PUSH
18414: LD_EXP 65
18418: IN
18419: NOT
18420: IFFALSE 18503
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18422: LD_ADDR_EXP 65
18426: PUSH
18427: LD_EXP 65
18431: PPUSH
18432: LD_EXP 65
18436: PUSH
18437: LD_INT 1
18439: PLUS
18440: PPUSH
18441: LD_VAR 0 1
18445: PPUSH
18446: CALL_OW 1
18450: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18451: LD_ADDR_EXP 66
18455: PUSH
18456: LD_EXP 66
18460: PPUSH
18461: LD_EXP 66
18465: PUSH
18466: LD_INT 1
18468: PLUS
18469: PPUSH
18470: EMPTY
18471: PPUSH
18472: CALL_OW 1
18476: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18477: LD_ADDR_EXP 69
18481: PUSH
18482: LD_EXP 69
18486: PPUSH
18487: LD_EXP 69
18491: PUSH
18492: LD_INT 1
18494: PLUS
18495: PPUSH
18496: EMPTY
18497: PPUSH
18498: CALL_OW 1
18502: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18503: LD_VAR 0 1
18507: PPUSH
18508: CALL_OW 302
18512: NOT
18513: IFFALSE 18526
// begin HackUnlinkAll ( i ) ;
18515: LD_VAR 0 1
18519: PPUSH
18520: CALL 18632 0 1
// continue ;
18524: GO 18406
// end ; HackCheckCapturedStatus ( i ) ;
18526: LD_VAR 0 1
18530: PPUSH
18531: CALL 19075 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18535: LD_ADDR_VAR 0 2
18539: PUSH
18540: LD_INT 81
18542: PUSH
18543: LD_VAR 0 1
18547: PPUSH
18548: CALL_OW 255
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PUSH
18557: LD_INT 33
18559: PUSH
18560: LD_INT 3
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 91
18569: PUSH
18570: LD_VAR 0 1
18574: PUSH
18575: LD_EXP 68
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: LIST
18584: PUSH
18585: LD_INT 50
18587: PUSH
18588: EMPTY
18589: LIST
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: PPUSH
18597: CALL_OW 69
18601: ST_TO_ADDR
// if not tmp then
18602: LD_VAR 0 2
18606: NOT
18607: IFFALSE 18611
// continue ;
18609: GO 18406
// HackLink ( i , tmp ) ;
18611: LD_VAR 0 1
18615: PPUSH
18616: LD_VAR 0 2
18620: PPUSH
18621: CALL 18768 0 2
// end ;
18625: GO 18406
18627: POP
18628: POP
// end ;
18629: PPOPN 2
18631: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18632: LD_INT 0
18634: PPUSH
18635: PPUSH
18636: PPUSH
// if not hack in hackTanks then
18637: LD_VAR 0 1
18641: PUSH
18642: LD_EXP 65
18646: IN
18647: NOT
18648: IFFALSE 18652
// exit ;
18650: GO 18763
// index := GetElementIndex ( hackTanks , hack ) ;
18652: LD_ADDR_VAR 0 4
18656: PUSH
18657: LD_EXP 65
18661: PPUSH
18662: LD_VAR 0 1
18666: PPUSH
18667: CALL 26427 0 2
18671: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18672: LD_EXP 66
18676: PUSH
18677: LD_VAR 0 4
18681: ARRAY
18682: IFFALSE 18763
// begin for i in hackTanksCaptured [ index ] do
18684: LD_ADDR_VAR 0 3
18688: PUSH
18689: LD_EXP 66
18693: PUSH
18694: LD_VAR 0 4
18698: ARRAY
18699: PUSH
18700: FOR_IN
18701: IFFALSE 18727
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18703: LD_VAR 0 3
18707: PUSH
18708: LD_INT 1
18710: ARRAY
18711: PPUSH
18712: LD_VAR 0 3
18716: PUSH
18717: LD_INT 2
18719: ARRAY
18720: PPUSH
18721: CALL_OW 235
18725: GO 18700
18727: POP
18728: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18729: LD_ADDR_EXP 66
18733: PUSH
18734: LD_EXP 66
18738: PPUSH
18739: LD_VAR 0 4
18743: PPUSH
18744: EMPTY
18745: PPUSH
18746: CALL_OW 1
18750: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18751: LD_VAR 0 1
18755: PPUSH
18756: LD_INT 0
18758: PPUSH
18759: CALL_OW 505
// end ; end ;
18763: LD_VAR 0 2
18767: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18768: LD_INT 0
18770: PPUSH
18771: PPUSH
18772: PPUSH
// if not hack in hackTanks or not vehicles then
18773: LD_VAR 0 1
18777: PUSH
18778: LD_EXP 65
18782: IN
18783: NOT
18784: PUSH
18785: LD_VAR 0 2
18789: NOT
18790: OR
18791: IFFALSE 18795
// exit ;
18793: GO 19070
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18795: LD_ADDR_VAR 0 2
18799: PUSH
18800: LD_VAR 0 1
18804: PPUSH
18805: LD_VAR 0 2
18809: PPUSH
18810: LD_INT 1
18812: PPUSH
18813: LD_INT 1
18815: PPUSH
18816: CALL 27077 0 4
18820: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18821: LD_ADDR_VAR 0 5
18825: PUSH
18826: LD_EXP 65
18830: PPUSH
18831: LD_VAR 0 1
18835: PPUSH
18836: CALL 26427 0 2
18840: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18841: LD_EXP 66
18845: PUSH
18846: LD_VAR 0 5
18850: ARRAY
18851: PUSH
18852: LD_EXP 67
18856: LESS
18857: IFFALSE 19046
// begin for i := 1 to vehicles do
18859: LD_ADDR_VAR 0 4
18863: PUSH
18864: DOUBLE
18865: LD_INT 1
18867: DEC
18868: ST_TO_ADDR
18869: LD_VAR 0 2
18873: PUSH
18874: FOR_TO
18875: IFFALSE 19044
// begin if hackTanksCaptured [ index ] = hackLimit then
18877: LD_EXP 66
18881: PUSH
18882: LD_VAR 0 5
18886: ARRAY
18887: PUSH
18888: LD_EXP 67
18892: EQUAL
18893: IFFALSE 18897
// break ;
18895: GO 19044
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18897: LD_ADDR_EXP 69
18901: PUSH
18902: LD_EXP 69
18906: PPUSH
18907: LD_VAR 0 5
18911: PPUSH
18912: LD_EXP 69
18916: PUSH
18917: LD_VAR 0 5
18921: ARRAY
18922: PUSH
18923: LD_INT 1
18925: PLUS
18926: PPUSH
18927: CALL_OW 1
18931: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18932: LD_ADDR_EXP 66
18936: PUSH
18937: LD_EXP 66
18941: PPUSH
18942: LD_VAR 0 5
18946: PUSH
18947: LD_EXP 66
18951: PUSH
18952: LD_VAR 0 5
18956: ARRAY
18957: PUSH
18958: LD_INT 1
18960: PLUS
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PPUSH
18966: LD_VAR 0 2
18970: PUSH
18971: LD_VAR 0 4
18975: ARRAY
18976: PUSH
18977: LD_VAR 0 2
18981: PUSH
18982: LD_VAR 0 4
18986: ARRAY
18987: PPUSH
18988: CALL_OW 255
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PPUSH
18997: CALL 26642 0 3
19001: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19002: LD_VAR 0 2
19006: PUSH
19007: LD_VAR 0 4
19011: ARRAY
19012: PPUSH
19013: LD_VAR 0 1
19017: PPUSH
19018: CALL_OW 255
19022: PPUSH
19023: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19027: LD_VAR 0 2
19031: PUSH
19032: LD_VAR 0 4
19036: ARRAY
19037: PPUSH
19038: CALL_OW 141
// end ;
19042: GO 18874
19044: POP
19045: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19046: LD_VAR 0 1
19050: PPUSH
19051: LD_EXP 66
19055: PUSH
19056: LD_VAR 0 5
19060: ARRAY
19061: PUSH
19062: LD_INT 0
19064: PLUS
19065: PPUSH
19066: CALL_OW 505
// end ;
19070: LD_VAR 0 3
19074: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19075: LD_INT 0
19077: PPUSH
19078: PPUSH
19079: PPUSH
19080: PPUSH
// if not hack in hackTanks then
19081: LD_VAR 0 1
19085: PUSH
19086: LD_EXP 65
19090: IN
19091: NOT
19092: IFFALSE 19096
// exit ;
19094: GO 19336
// index := GetElementIndex ( hackTanks , hack ) ;
19096: LD_ADDR_VAR 0 4
19100: PUSH
19101: LD_EXP 65
19105: PPUSH
19106: LD_VAR 0 1
19110: PPUSH
19111: CALL 26427 0 2
19115: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19116: LD_ADDR_VAR 0 3
19120: PUSH
19121: DOUBLE
19122: LD_EXP 66
19126: PUSH
19127: LD_VAR 0 4
19131: ARRAY
19132: INC
19133: ST_TO_ADDR
19134: LD_INT 1
19136: PUSH
19137: FOR_DOWNTO
19138: IFFALSE 19310
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19140: LD_ADDR_VAR 0 5
19144: PUSH
19145: LD_EXP 66
19149: PUSH
19150: LD_VAR 0 4
19154: ARRAY
19155: PUSH
19156: LD_VAR 0 3
19160: ARRAY
19161: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19162: LD_VAR 0 5
19166: PUSH
19167: LD_INT 1
19169: ARRAY
19170: PPUSH
19171: CALL_OW 302
19175: NOT
19176: PUSH
19177: LD_VAR 0 5
19181: PUSH
19182: LD_INT 1
19184: ARRAY
19185: PPUSH
19186: CALL_OW 255
19190: PUSH
19191: LD_VAR 0 1
19195: PPUSH
19196: CALL_OW 255
19200: NONEQUAL
19201: OR
19202: IFFALSE 19308
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19204: LD_VAR 0 5
19208: PUSH
19209: LD_INT 1
19211: ARRAY
19212: PPUSH
19213: CALL_OW 305
19217: PUSH
19218: LD_VAR 0 5
19222: PUSH
19223: LD_INT 1
19225: ARRAY
19226: PPUSH
19227: CALL_OW 255
19231: PUSH
19232: LD_VAR 0 1
19236: PPUSH
19237: CALL_OW 255
19241: EQUAL
19242: AND
19243: IFFALSE 19267
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19245: LD_VAR 0 5
19249: PUSH
19250: LD_INT 1
19252: ARRAY
19253: PPUSH
19254: LD_VAR 0 5
19258: PUSH
19259: LD_INT 2
19261: ARRAY
19262: PPUSH
19263: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19267: LD_ADDR_EXP 66
19271: PUSH
19272: LD_EXP 66
19276: PPUSH
19277: LD_VAR 0 4
19281: PPUSH
19282: LD_EXP 66
19286: PUSH
19287: LD_VAR 0 4
19291: ARRAY
19292: PPUSH
19293: LD_VAR 0 3
19297: PPUSH
19298: CALL_OW 3
19302: PPUSH
19303: CALL_OW 1
19307: ST_TO_ADDR
// end ; end ;
19308: GO 19137
19310: POP
19311: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19312: LD_VAR 0 1
19316: PPUSH
19317: LD_EXP 66
19321: PUSH
19322: LD_VAR 0 4
19326: ARRAY
19327: PUSH
19328: LD_INT 0
19330: PLUS
19331: PPUSH
19332: CALL_OW 505
// end ;
19336: LD_VAR 0 2
19340: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19341: LD_INT 0
19343: PPUSH
19344: PPUSH
19345: PPUSH
19346: PPUSH
// if not hack in hackTanks then
19347: LD_VAR 0 1
19351: PUSH
19352: LD_EXP 65
19356: IN
19357: NOT
19358: IFFALSE 19362
// exit ;
19360: GO 19447
// index := GetElementIndex ( hackTanks , hack ) ;
19362: LD_ADDR_VAR 0 5
19366: PUSH
19367: LD_EXP 65
19371: PPUSH
19372: LD_VAR 0 1
19376: PPUSH
19377: CALL 26427 0 2
19381: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19382: LD_ADDR_VAR 0 4
19386: PUSH
19387: DOUBLE
19388: LD_INT 1
19390: DEC
19391: ST_TO_ADDR
19392: LD_EXP 66
19396: PUSH
19397: LD_VAR 0 5
19401: ARRAY
19402: PUSH
19403: FOR_TO
19404: IFFALSE 19445
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19406: LD_EXP 66
19410: PUSH
19411: LD_VAR 0 5
19415: ARRAY
19416: PUSH
19417: LD_VAR 0 4
19421: ARRAY
19422: PUSH
19423: LD_INT 1
19425: ARRAY
19426: PUSH
19427: LD_VAR 0 2
19431: EQUAL
19432: IFFALSE 19443
// KillUnit ( vehicle ) ;
19434: LD_VAR 0 2
19438: PPUSH
19439: CALL_OW 66
19443: GO 19403
19445: POP
19446: POP
// end ;
19447: LD_VAR 0 3
19451: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19452: LD_EXP 70
19456: NOT
19457: IFFALSE 19492
19459: GO 19461
19461: DISABLE
// begin initMiner := true ;
19462: LD_ADDR_EXP 70
19466: PUSH
19467: LD_INT 1
19469: ST_TO_ADDR
// minersList := [ ] ;
19470: LD_ADDR_EXP 71
19474: PUSH
19475: EMPTY
19476: ST_TO_ADDR
// minerMinesList := [ ] ;
19477: LD_ADDR_EXP 72
19481: PUSH
19482: EMPTY
19483: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
19484: LD_ADDR_EXP 73
19488: PUSH
19489: LD_INT 5
19491: ST_TO_ADDR
// end ;
19492: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
19493: LD_EXP 70
19497: PUSH
19498: LD_INT 34
19500: PUSH
19501: LD_INT 81
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PPUSH
19508: CALL_OW 69
19512: AND
19513: IFFALSE 19974
19515: GO 19517
19517: DISABLE
19518: LD_INT 0
19520: PPUSH
19521: PPUSH
19522: PPUSH
19523: PPUSH
// begin enable ;
19524: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
19525: LD_ADDR_VAR 0 1
19529: PUSH
19530: LD_INT 34
19532: PUSH
19533: LD_INT 81
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PPUSH
19540: CALL_OW 69
19544: PUSH
19545: FOR_IN
19546: IFFALSE 19618
// begin if not i in minersList then
19548: LD_VAR 0 1
19552: PUSH
19553: LD_EXP 71
19557: IN
19558: NOT
19559: IFFALSE 19616
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
19561: LD_ADDR_EXP 71
19565: PUSH
19566: LD_EXP 71
19570: PPUSH
19571: LD_EXP 71
19575: PUSH
19576: LD_INT 1
19578: PLUS
19579: PPUSH
19580: LD_VAR 0 1
19584: PPUSH
19585: CALL_OW 1
19589: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
19590: LD_ADDR_EXP 72
19594: PUSH
19595: LD_EXP 72
19599: PPUSH
19600: LD_EXP 72
19604: PUSH
19605: LD_INT 1
19607: PLUS
19608: PPUSH
19609: EMPTY
19610: PPUSH
19611: CALL_OW 1
19615: ST_TO_ADDR
// end end ;
19616: GO 19545
19618: POP
19619: POP
// for i := minerMinesList downto 1 do
19620: LD_ADDR_VAR 0 1
19624: PUSH
19625: DOUBLE
19626: LD_EXP 72
19630: INC
19631: ST_TO_ADDR
19632: LD_INT 1
19634: PUSH
19635: FOR_DOWNTO
19636: IFFALSE 19972
// begin if IsLive ( minersList [ i ] ) then
19638: LD_EXP 71
19642: PUSH
19643: LD_VAR 0 1
19647: ARRAY
19648: PPUSH
19649: CALL_OW 300
19653: IFFALSE 19681
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
19655: LD_EXP 71
19659: PUSH
19660: LD_VAR 0 1
19664: ARRAY
19665: PPUSH
19666: LD_EXP 72
19670: PUSH
19671: LD_VAR 0 1
19675: ARRAY
19676: PPUSH
19677: CALL_OW 505
// if not minerMinesList [ i ] then
19681: LD_EXP 72
19685: PUSH
19686: LD_VAR 0 1
19690: ARRAY
19691: NOT
19692: IFFALSE 19696
// continue ;
19694: GO 19635
// for j := minerMinesList [ i ] downto 1 do
19696: LD_ADDR_VAR 0 2
19700: PUSH
19701: DOUBLE
19702: LD_EXP 72
19706: PUSH
19707: LD_VAR 0 1
19711: ARRAY
19712: INC
19713: ST_TO_ADDR
19714: LD_INT 1
19716: PUSH
19717: FOR_DOWNTO
19718: IFFALSE 19968
// begin side := GetSide ( minersList [ i ] ) ;
19720: LD_ADDR_VAR 0 3
19724: PUSH
19725: LD_EXP 71
19729: PUSH
19730: LD_VAR 0 1
19734: ARRAY
19735: PPUSH
19736: CALL_OW 255
19740: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19741: LD_ADDR_VAR 0 4
19745: PUSH
19746: LD_EXP 72
19750: PUSH
19751: LD_VAR 0 1
19755: ARRAY
19756: PUSH
19757: LD_VAR 0 2
19761: ARRAY
19762: PUSH
19763: LD_INT 1
19765: ARRAY
19766: PPUSH
19767: LD_EXP 72
19771: PUSH
19772: LD_VAR 0 1
19776: ARRAY
19777: PUSH
19778: LD_VAR 0 2
19782: ARRAY
19783: PUSH
19784: LD_INT 2
19786: ARRAY
19787: PPUSH
19788: CALL_OW 428
19792: ST_TO_ADDR
// if not tmp then
19793: LD_VAR 0 4
19797: NOT
19798: IFFALSE 19802
// continue ;
19800: GO 19717
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19802: LD_VAR 0 4
19806: PUSH
19807: LD_INT 81
19809: PUSH
19810: LD_VAR 0 3
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PPUSH
19819: CALL_OW 69
19823: IN
19824: PUSH
19825: LD_EXP 72
19829: PUSH
19830: LD_VAR 0 1
19834: ARRAY
19835: PUSH
19836: LD_VAR 0 2
19840: ARRAY
19841: PUSH
19842: LD_INT 1
19844: ARRAY
19845: PPUSH
19846: LD_EXP 72
19850: PUSH
19851: LD_VAR 0 1
19855: ARRAY
19856: PUSH
19857: LD_VAR 0 2
19861: ARRAY
19862: PUSH
19863: LD_INT 2
19865: ARRAY
19866: PPUSH
19867: CALL_OW 458
19871: AND
19872: IFFALSE 19966
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
19874: LD_EXP 72
19878: PUSH
19879: LD_VAR 0 1
19883: ARRAY
19884: PUSH
19885: LD_VAR 0 2
19889: ARRAY
19890: PUSH
19891: LD_INT 1
19893: ARRAY
19894: PPUSH
19895: LD_EXP 72
19899: PUSH
19900: LD_VAR 0 1
19904: ARRAY
19905: PUSH
19906: LD_VAR 0 2
19910: ARRAY
19911: PUSH
19912: LD_INT 2
19914: ARRAY
19915: PPUSH
19916: LD_VAR 0 3
19920: PPUSH
19921: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
19925: LD_ADDR_EXP 72
19929: PUSH
19930: LD_EXP 72
19934: PPUSH
19935: LD_VAR 0 1
19939: PPUSH
19940: LD_EXP 72
19944: PUSH
19945: LD_VAR 0 1
19949: ARRAY
19950: PPUSH
19951: LD_VAR 0 2
19955: PPUSH
19956: CALL_OW 3
19960: PPUSH
19961: CALL_OW 1
19965: ST_TO_ADDR
// end ; end ;
19966: GO 19717
19968: POP
19969: POP
// end ;
19970: GO 19635
19972: POP
19973: POP
// end ;
19974: PPOPN 4
19976: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
19977: LD_INT 0
19979: PPUSH
19980: PPUSH
// result := false ;
19981: LD_ADDR_VAR 0 4
19985: PUSH
19986: LD_INT 0
19988: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
19989: LD_VAR 0 1
19993: PPUSH
19994: CALL_OW 264
19998: PUSH
19999: LD_INT 81
20001: EQUAL
20002: NOT
20003: IFFALSE 20007
// exit ;
20005: GO 20247
// index := GetElementIndex ( minersList , unit ) ;
20007: LD_ADDR_VAR 0 5
20011: PUSH
20012: LD_EXP 71
20016: PPUSH
20017: LD_VAR 0 1
20021: PPUSH
20022: CALL 26427 0 2
20026: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20027: LD_EXP 72
20031: PUSH
20032: LD_VAR 0 5
20036: ARRAY
20037: PUSH
20038: LD_EXP 73
20042: GREATEREQUAL
20043: IFFALSE 20047
// exit ;
20045: GO 20247
// ComMoveXY ( unit , x , y ) ;
20047: LD_VAR 0 1
20051: PPUSH
20052: LD_VAR 0 2
20056: PPUSH
20057: LD_VAR 0 3
20061: PPUSH
20062: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20066: LD_INT 35
20068: PPUSH
20069: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20073: LD_VAR 0 1
20077: PPUSH
20078: LD_VAR 0 2
20082: PPUSH
20083: LD_VAR 0 3
20087: PPUSH
20088: CALL 57811 0 3
20092: NOT
20093: PUSH
20094: LD_VAR 0 1
20098: PPUSH
20099: CALL_OW 314
20103: AND
20104: IFFALSE 20108
// exit ;
20106: GO 20247
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20108: LD_VAR 0 2
20112: PPUSH
20113: LD_VAR 0 3
20117: PPUSH
20118: CALL_OW 428
20122: PUSH
20123: LD_VAR 0 1
20127: EQUAL
20128: PUSH
20129: LD_VAR 0 1
20133: PPUSH
20134: CALL_OW 314
20138: NOT
20139: AND
20140: IFFALSE 20066
// PlaySoundXY ( x , y , PlantMine ) ;
20142: LD_VAR 0 2
20146: PPUSH
20147: LD_VAR 0 3
20151: PPUSH
20152: LD_STRING PlantMine
20154: PPUSH
20155: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20159: LD_VAR 0 2
20163: PPUSH
20164: LD_VAR 0 3
20168: PPUSH
20169: LD_VAR 0 1
20173: PPUSH
20174: CALL_OW 255
20178: PPUSH
20179: LD_INT 0
20181: PPUSH
20182: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20186: LD_ADDR_EXP 72
20190: PUSH
20191: LD_EXP 72
20195: PPUSH
20196: LD_VAR 0 5
20200: PUSH
20201: LD_EXP 72
20205: PUSH
20206: LD_VAR 0 5
20210: ARRAY
20211: PUSH
20212: LD_INT 1
20214: PLUS
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: PPUSH
20220: LD_VAR 0 2
20224: PUSH
20225: LD_VAR 0 3
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PPUSH
20234: CALL 26642 0 3
20238: ST_TO_ADDR
// result := true ;
20239: LD_ADDR_VAR 0 4
20243: PUSH
20244: LD_INT 1
20246: ST_TO_ADDR
// end ;
20247: LD_VAR 0 4
20251: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20252: LD_INT 0
20254: PPUSH
20255: PPUSH
20256: PPUSH
// if not unit in minersList then
20257: LD_VAR 0 1
20261: PUSH
20262: LD_EXP 71
20266: IN
20267: NOT
20268: IFFALSE 20272
// exit ;
20270: GO 20664
// index := GetElementIndex ( minersList , unit ) ;
20272: LD_ADDR_VAR 0 6
20276: PUSH
20277: LD_EXP 71
20281: PPUSH
20282: LD_VAR 0 1
20286: PPUSH
20287: CALL 26427 0 2
20291: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20292: LD_ADDR_VAR 0 5
20296: PUSH
20297: DOUBLE
20298: LD_EXP 72
20302: PUSH
20303: LD_VAR 0 6
20307: ARRAY
20308: INC
20309: ST_TO_ADDR
20310: LD_INT 1
20312: PUSH
20313: FOR_DOWNTO
20314: IFFALSE 20475
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20316: LD_EXP 72
20320: PUSH
20321: LD_VAR 0 6
20325: ARRAY
20326: PUSH
20327: LD_VAR 0 5
20331: ARRAY
20332: PUSH
20333: LD_INT 1
20335: ARRAY
20336: PUSH
20337: LD_VAR 0 2
20341: EQUAL
20342: PUSH
20343: LD_EXP 72
20347: PUSH
20348: LD_VAR 0 6
20352: ARRAY
20353: PUSH
20354: LD_VAR 0 5
20358: ARRAY
20359: PUSH
20360: LD_INT 2
20362: ARRAY
20363: PUSH
20364: LD_VAR 0 3
20368: EQUAL
20369: AND
20370: IFFALSE 20473
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20372: LD_EXP 72
20376: PUSH
20377: LD_VAR 0 6
20381: ARRAY
20382: PUSH
20383: LD_VAR 0 5
20387: ARRAY
20388: PUSH
20389: LD_INT 1
20391: ARRAY
20392: PPUSH
20393: LD_EXP 72
20397: PUSH
20398: LD_VAR 0 6
20402: ARRAY
20403: PUSH
20404: LD_VAR 0 5
20408: ARRAY
20409: PUSH
20410: LD_INT 2
20412: ARRAY
20413: PPUSH
20414: LD_VAR 0 1
20418: PPUSH
20419: CALL_OW 255
20423: PPUSH
20424: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20428: LD_ADDR_EXP 72
20432: PUSH
20433: LD_EXP 72
20437: PPUSH
20438: LD_VAR 0 6
20442: PPUSH
20443: LD_EXP 72
20447: PUSH
20448: LD_VAR 0 6
20452: ARRAY
20453: PPUSH
20454: LD_VAR 0 5
20458: PPUSH
20459: CALL_OW 3
20463: PPUSH
20464: CALL_OW 1
20468: ST_TO_ADDR
// exit ;
20469: POP
20470: POP
20471: GO 20664
// end ; end ;
20473: GO 20313
20475: POP
20476: POP
// for i := minerMinesList [ index ] downto 1 do
20477: LD_ADDR_VAR 0 5
20481: PUSH
20482: DOUBLE
20483: LD_EXP 72
20487: PUSH
20488: LD_VAR 0 6
20492: ARRAY
20493: INC
20494: ST_TO_ADDR
20495: LD_INT 1
20497: PUSH
20498: FOR_DOWNTO
20499: IFFALSE 20662
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
20501: LD_EXP 72
20505: PUSH
20506: LD_VAR 0 6
20510: ARRAY
20511: PUSH
20512: LD_VAR 0 5
20516: ARRAY
20517: PUSH
20518: LD_INT 1
20520: ARRAY
20521: PPUSH
20522: LD_EXP 72
20526: PUSH
20527: LD_VAR 0 6
20531: ARRAY
20532: PUSH
20533: LD_VAR 0 5
20537: ARRAY
20538: PUSH
20539: LD_INT 2
20541: ARRAY
20542: PPUSH
20543: LD_VAR 0 2
20547: PPUSH
20548: LD_VAR 0 3
20552: PPUSH
20553: CALL_OW 298
20557: PUSH
20558: LD_INT 6
20560: LESS
20561: IFFALSE 20660
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20563: LD_EXP 72
20567: PUSH
20568: LD_VAR 0 6
20572: ARRAY
20573: PUSH
20574: LD_VAR 0 5
20578: ARRAY
20579: PUSH
20580: LD_INT 1
20582: ARRAY
20583: PPUSH
20584: LD_EXP 72
20588: PUSH
20589: LD_VAR 0 6
20593: ARRAY
20594: PUSH
20595: LD_VAR 0 5
20599: ARRAY
20600: PUSH
20601: LD_INT 2
20603: ARRAY
20604: PPUSH
20605: LD_VAR 0 1
20609: PPUSH
20610: CALL_OW 255
20614: PPUSH
20615: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20619: LD_ADDR_EXP 72
20623: PUSH
20624: LD_EXP 72
20628: PPUSH
20629: LD_VAR 0 6
20633: PPUSH
20634: LD_EXP 72
20638: PUSH
20639: LD_VAR 0 6
20643: ARRAY
20644: PPUSH
20645: LD_VAR 0 5
20649: PPUSH
20650: CALL_OW 3
20654: PPUSH
20655: CALL_OW 1
20659: ST_TO_ADDR
// end ; end ;
20660: GO 20498
20662: POP
20663: POP
// end ;
20664: LD_VAR 0 4
20668: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20669: LD_INT 0
20671: PPUSH
20672: PPUSH
20673: PPUSH
20674: PPUSH
20675: PPUSH
20676: PPUSH
20677: PPUSH
20678: PPUSH
20679: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20680: LD_VAR 0 1
20684: PPUSH
20685: CALL_OW 264
20689: PUSH
20690: LD_INT 81
20692: EQUAL
20693: NOT
20694: PUSH
20695: LD_VAR 0 1
20699: PUSH
20700: LD_EXP 71
20704: IN
20705: NOT
20706: OR
20707: IFFALSE 20711
// exit ;
20709: GO 21033
// index := GetElementIndex ( minersList , unit ) ;
20711: LD_ADDR_VAR 0 6
20715: PUSH
20716: LD_EXP 71
20720: PPUSH
20721: LD_VAR 0 1
20725: PPUSH
20726: CALL 26427 0 2
20730: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
20731: LD_ADDR_VAR 0 8
20735: PUSH
20736: LD_EXP 73
20740: PUSH
20741: LD_EXP 72
20745: PUSH
20746: LD_VAR 0 6
20750: ARRAY
20751: MINUS
20752: ST_TO_ADDR
// if not minesFreeAmount then
20753: LD_VAR 0 8
20757: NOT
20758: IFFALSE 20762
// exit ;
20760: GO 21033
// tmp := [ ] ;
20762: LD_ADDR_VAR 0 7
20766: PUSH
20767: EMPTY
20768: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20769: LD_ADDR_VAR 0 5
20773: PUSH
20774: DOUBLE
20775: LD_INT 1
20777: DEC
20778: ST_TO_ADDR
20779: LD_VAR 0 8
20783: PUSH
20784: FOR_TO
20785: IFFALSE 20980
// begin _d := rand ( 0 , 5 ) ;
20787: LD_ADDR_VAR 0 11
20791: PUSH
20792: LD_INT 0
20794: PPUSH
20795: LD_INT 5
20797: PPUSH
20798: CALL_OW 12
20802: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20803: LD_ADDR_VAR 0 12
20807: PUSH
20808: LD_INT 2
20810: PPUSH
20811: LD_INT 6
20813: PPUSH
20814: CALL_OW 12
20818: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
20819: LD_ADDR_VAR 0 9
20823: PUSH
20824: LD_VAR 0 2
20828: PPUSH
20829: LD_VAR 0 11
20833: PPUSH
20834: LD_VAR 0 12
20838: PPUSH
20839: CALL_OW 272
20843: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
20844: LD_ADDR_VAR 0 10
20848: PUSH
20849: LD_VAR 0 3
20853: PPUSH
20854: LD_VAR 0 11
20858: PPUSH
20859: LD_VAR 0 12
20863: PPUSH
20864: CALL_OW 273
20868: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
20869: LD_VAR 0 9
20873: PPUSH
20874: LD_VAR 0 10
20878: PPUSH
20879: CALL_OW 488
20883: PUSH
20884: LD_VAR 0 9
20888: PUSH
20889: LD_VAR 0 10
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_VAR 0 7
20902: IN
20903: NOT
20904: AND
20905: PUSH
20906: LD_VAR 0 9
20910: PPUSH
20911: LD_VAR 0 10
20915: PPUSH
20916: CALL_OW 458
20920: NOT
20921: AND
20922: IFFALSE 20964
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
20924: LD_ADDR_VAR 0 7
20928: PUSH
20929: LD_VAR 0 7
20933: PPUSH
20934: LD_VAR 0 7
20938: PUSH
20939: LD_INT 1
20941: PLUS
20942: PPUSH
20943: LD_VAR 0 9
20947: PUSH
20948: LD_VAR 0 10
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PPUSH
20957: CALL_OW 1
20961: ST_TO_ADDR
20962: GO 20978
// i := i - 1 ;
20964: LD_ADDR_VAR 0 5
20968: PUSH
20969: LD_VAR 0 5
20973: PUSH
20974: LD_INT 1
20976: MINUS
20977: ST_TO_ADDR
// end ;
20978: GO 20784
20980: POP
20981: POP
// for i in tmp do
20982: LD_ADDR_VAR 0 5
20986: PUSH
20987: LD_VAR 0 7
20991: PUSH
20992: FOR_IN
20993: IFFALSE 21031
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
20995: LD_VAR 0 1
20999: PPUSH
21000: LD_VAR 0 5
21004: PUSH
21005: LD_INT 1
21007: ARRAY
21008: PPUSH
21009: LD_VAR 0 5
21013: PUSH
21014: LD_INT 2
21016: ARRAY
21017: PPUSH
21018: CALL 19977 0 3
21022: NOT
21023: IFFALSE 21029
// exit ;
21025: POP
21026: POP
21027: GO 21033
21029: GO 20992
21031: POP
21032: POP
// end ;
21033: LD_VAR 0 4
21037: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21038: LD_INT 0
21040: PPUSH
21041: PPUSH
21042: PPUSH
21043: PPUSH
21044: PPUSH
21045: PPUSH
21046: PPUSH
// if not GetClass ( unit ) = class_sniper then
21047: LD_VAR 0 1
21051: PPUSH
21052: CALL_OW 257
21056: PUSH
21057: LD_INT 5
21059: EQUAL
21060: NOT
21061: IFFALSE 21065
// exit ;
21063: GO 21453
// dist := 8 ;
21065: LD_ADDR_VAR 0 5
21069: PUSH
21070: LD_INT 8
21072: ST_TO_ADDR
// viewRange := 12 ;
21073: LD_ADDR_VAR 0 7
21077: PUSH
21078: LD_INT 12
21080: ST_TO_ADDR
// side := GetSide ( unit ) ;
21081: LD_ADDR_VAR 0 6
21085: PUSH
21086: LD_VAR 0 1
21090: PPUSH
21091: CALL_OW 255
21095: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21096: LD_INT 61
21098: PPUSH
21099: LD_VAR 0 6
21103: PPUSH
21104: CALL_OW 321
21108: PUSH
21109: LD_INT 2
21111: EQUAL
21112: IFFALSE 21122
// viewRange := 16 ;
21114: LD_ADDR_VAR 0 7
21118: PUSH
21119: LD_INT 16
21121: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21122: LD_VAR 0 1
21126: PPUSH
21127: LD_VAR 0 2
21131: PPUSH
21132: LD_VAR 0 3
21136: PPUSH
21137: CALL_OW 297
21141: PUSH
21142: LD_VAR 0 5
21146: GREATER
21147: IFFALSE 21226
// begin ComMoveXY ( unit , x , y ) ;
21149: LD_VAR 0 1
21153: PPUSH
21154: LD_VAR 0 2
21158: PPUSH
21159: LD_VAR 0 3
21163: PPUSH
21164: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21168: LD_INT 35
21170: PPUSH
21171: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21175: LD_VAR 0 1
21179: PPUSH
21180: LD_VAR 0 2
21184: PPUSH
21185: LD_VAR 0 3
21189: PPUSH
21190: CALL 57811 0 3
21194: NOT
21195: IFFALSE 21199
// exit ;
21197: GO 21453
// until GetDistUnitXY ( unit , x , y ) < dist ;
21199: LD_VAR 0 1
21203: PPUSH
21204: LD_VAR 0 2
21208: PPUSH
21209: LD_VAR 0 3
21213: PPUSH
21214: CALL_OW 297
21218: PUSH
21219: LD_VAR 0 5
21223: LESS
21224: IFFALSE 21168
// end ; ComTurnXY ( unit , x , y ) ;
21226: LD_VAR 0 1
21230: PPUSH
21231: LD_VAR 0 2
21235: PPUSH
21236: LD_VAR 0 3
21240: PPUSH
21241: CALL_OW 118
// wait ( 5 ) ;
21245: LD_INT 5
21247: PPUSH
21248: CALL_OW 67
// _d := GetDir ( unit ) ;
21252: LD_ADDR_VAR 0 10
21256: PUSH
21257: LD_VAR 0 1
21261: PPUSH
21262: CALL_OW 254
21266: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21267: LD_ADDR_VAR 0 8
21271: PUSH
21272: LD_VAR 0 1
21276: PPUSH
21277: CALL_OW 250
21281: PPUSH
21282: LD_VAR 0 10
21286: PPUSH
21287: LD_VAR 0 5
21291: PPUSH
21292: CALL_OW 272
21296: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21297: LD_ADDR_VAR 0 9
21301: PUSH
21302: LD_VAR 0 1
21306: PPUSH
21307: CALL_OW 251
21311: PPUSH
21312: LD_VAR 0 10
21316: PPUSH
21317: LD_VAR 0 5
21321: PPUSH
21322: CALL_OW 273
21326: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21327: LD_VAR 0 8
21331: PPUSH
21332: LD_VAR 0 9
21336: PPUSH
21337: CALL_OW 488
21341: NOT
21342: IFFALSE 21346
// exit ;
21344: GO 21453
// ComAnimCustom ( unit , 1 ) ;
21346: LD_VAR 0 1
21350: PPUSH
21351: LD_INT 1
21353: PPUSH
21354: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21358: LD_VAR 0 8
21362: PPUSH
21363: LD_VAR 0 9
21367: PPUSH
21368: LD_VAR 0 6
21372: PPUSH
21373: LD_VAR 0 7
21377: PPUSH
21378: CALL_OW 330
// repeat wait ( 1 ) ;
21382: LD_INT 1
21384: PPUSH
21385: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
21389: LD_VAR 0 1
21393: PPUSH
21394: CALL_OW 316
21398: PUSH
21399: LD_VAR 0 1
21403: PPUSH
21404: CALL_OW 314
21408: OR
21409: PUSH
21410: LD_VAR 0 1
21414: PPUSH
21415: CALL_OW 302
21419: NOT
21420: OR
21421: PUSH
21422: LD_VAR 0 1
21426: PPUSH
21427: CALL_OW 301
21431: OR
21432: IFFALSE 21382
// RemoveSeeing ( _x , _y , side ) ;
21434: LD_VAR 0 8
21438: PPUSH
21439: LD_VAR 0 9
21443: PPUSH
21444: LD_VAR 0 6
21448: PPUSH
21449: CALL_OW 331
// end ; end_of_file
21453: LD_VAR 0 4
21457: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
21458: LD_VAR 0 1
21462: PPUSH
21463: LD_VAR 0 2
21467: PPUSH
21468: LD_VAR 0 3
21472: PPUSH
21473: LD_VAR 0 4
21477: PPUSH
21478: LD_VAR 0 5
21482: PPUSH
21483: LD_VAR 0 6
21487: PPUSH
21488: CALL 1522 0 6
// end ;
21492: PPOPN 6
21494: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
21495: LD_INT 0
21497: PPUSH
// begin if not units then
21498: LD_VAR 0 1
21502: NOT
21503: IFFALSE 21507
// exit ;
21505: GO 21507
// end ;
21507: PPOPN 7
21509: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
21510: CALL 1426 0 0
// end ; end_of_file
21514: PPOPN 1
21516: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
21517: LD_VAR 0 1
21521: PUSH
21522: LD_INT 200
21524: DOUBLE
21525: GREATEREQUAL
21526: IFFALSE 21534
21528: LD_INT 299
21530: DOUBLE
21531: LESSEQUAL
21532: IFTRUE 21536
21534: GO 21568
21536: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
21537: LD_VAR 0 1
21541: PPUSH
21542: LD_VAR 0 2
21546: PPUSH
21547: LD_VAR 0 3
21551: PPUSH
21552: LD_VAR 0 4
21556: PPUSH
21557: LD_VAR 0 5
21561: PPUSH
21562: CALL 17545 0 5
21566: GO 21645
21568: LD_INT 300
21570: DOUBLE
21571: GREATEREQUAL
21572: IFFALSE 21580
21574: LD_INT 399
21576: DOUBLE
21577: LESSEQUAL
21578: IFTRUE 21582
21580: GO 21644
21582: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
21583: LD_VAR 0 1
21587: PPUSH
21588: LD_VAR 0 2
21592: PPUSH
21593: LD_VAR 0 3
21597: PPUSH
21598: LD_VAR 0 4
21602: PPUSH
21603: LD_VAR 0 5
21607: PPUSH
21608: LD_VAR 0 6
21612: PPUSH
21613: LD_VAR 0 7
21617: PPUSH
21618: LD_VAR 0 8
21622: PPUSH
21623: LD_VAR 0 9
21627: PPUSH
21628: LD_VAR 0 10
21632: PPUSH
21633: LD_VAR 0 11
21637: PPUSH
21638: CALL 13870 0 11
21642: GO 21645
21644: POP
// end ;
21645: PPOPN 11
21647: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
21648: LD_VAR 0 1
21652: PPUSH
21653: LD_VAR 0 2
21657: PPUSH
21658: LD_VAR 0 3
21662: PPUSH
21663: LD_VAR 0 4
21667: PPUSH
21668: LD_VAR 0 5
21672: PPUSH
21673: CALL 17281 0 5
// end ; end_of_file
21677: PPOPN 5
21679: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21680: LD_INT 0
21682: PPUSH
21683: PPUSH
// if exist_mode then
21684: LD_VAR 0 2
21688: IFFALSE 21713
// unit := CreateCharacter ( prefix & ident ) else
21690: LD_ADDR_VAR 0 5
21694: PUSH
21695: LD_VAR 0 3
21699: PUSH
21700: LD_VAR 0 1
21704: STR
21705: PPUSH
21706: CALL_OW 34
21710: ST_TO_ADDR
21711: GO 21728
// unit := NewCharacter ( ident ) ;
21713: LD_ADDR_VAR 0 5
21717: PUSH
21718: LD_VAR 0 1
21722: PPUSH
21723: CALL_OW 25
21727: ST_TO_ADDR
// result := unit ;
21728: LD_ADDR_VAR 0 4
21732: PUSH
21733: LD_VAR 0 5
21737: ST_TO_ADDR
// end ;
21738: LD_VAR 0 4
21742: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21743: LD_INT 0
21745: PPUSH
21746: PPUSH
// if not side or not nation then
21747: LD_VAR 0 1
21751: NOT
21752: PUSH
21753: LD_VAR 0 2
21757: NOT
21758: OR
21759: IFFALSE 21763
// exit ;
21761: GO 22531
// case nation of nation_american :
21763: LD_VAR 0 2
21767: PUSH
21768: LD_INT 1
21770: DOUBLE
21771: EQUAL
21772: IFTRUE 21776
21774: GO 21990
21776: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21777: LD_ADDR_VAR 0 4
21781: PUSH
21782: LD_INT 35
21784: PUSH
21785: LD_INT 45
21787: PUSH
21788: LD_INT 46
21790: PUSH
21791: LD_INT 47
21793: PUSH
21794: LD_INT 82
21796: PUSH
21797: LD_INT 83
21799: PUSH
21800: LD_INT 84
21802: PUSH
21803: LD_INT 85
21805: PUSH
21806: LD_INT 86
21808: PUSH
21809: LD_INT 1
21811: PUSH
21812: LD_INT 2
21814: PUSH
21815: LD_INT 6
21817: PUSH
21818: LD_INT 15
21820: PUSH
21821: LD_INT 16
21823: PUSH
21824: LD_INT 7
21826: PUSH
21827: LD_INT 12
21829: PUSH
21830: LD_INT 13
21832: PUSH
21833: LD_INT 10
21835: PUSH
21836: LD_INT 14
21838: PUSH
21839: LD_INT 20
21841: PUSH
21842: LD_INT 21
21844: PUSH
21845: LD_INT 22
21847: PUSH
21848: LD_INT 25
21850: PUSH
21851: LD_INT 32
21853: PUSH
21854: LD_INT 27
21856: PUSH
21857: LD_INT 36
21859: PUSH
21860: LD_INT 69
21862: PUSH
21863: LD_INT 39
21865: PUSH
21866: LD_INT 34
21868: PUSH
21869: LD_INT 40
21871: PUSH
21872: LD_INT 48
21874: PUSH
21875: LD_INT 49
21877: PUSH
21878: LD_INT 50
21880: PUSH
21881: LD_INT 51
21883: PUSH
21884: LD_INT 52
21886: PUSH
21887: LD_INT 53
21889: PUSH
21890: LD_INT 54
21892: PUSH
21893: LD_INT 55
21895: PUSH
21896: LD_INT 56
21898: PUSH
21899: LD_INT 57
21901: PUSH
21902: LD_INT 58
21904: PUSH
21905: LD_INT 59
21907: PUSH
21908: LD_INT 60
21910: PUSH
21911: LD_INT 61
21913: PUSH
21914: LD_INT 62
21916: PUSH
21917: LD_INT 80
21919: PUSH
21920: LD_INT 82
21922: PUSH
21923: LD_INT 83
21925: PUSH
21926: LD_INT 84
21928: PUSH
21929: LD_INT 85
21931: PUSH
21932: LD_INT 86
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: ST_TO_ADDR
21988: GO 22455
21990: LD_INT 2
21992: DOUBLE
21993: EQUAL
21994: IFTRUE 21998
21996: GO 22224
21998: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21999: LD_ADDR_VAR 0 4
22003: PUSH
22004: LD_INT 35
22006: PUSH
22007: LD_INT 45
22009: PUSH
22010: LD_INT 46
22012: PUSH
22013: LD_INT 47
22015: PUSH
22016: LD_INT 82
22018: PUSH
22019: LD_INT 83
22021: PUSH
22022: LD_INT 84
22024: PUSH
22025: LD_INT 85
22027: PUSH
22028: LD_INT 87
22030: PUSH
22031: LD_INT 70
22033: PUSH
22034: LD_INT 1
22036: PUSH
22037: LD_INT 11
22039: PUSH
22040: LD_INT 3
22042: PUSH
22043: LD_INT 4
22045: PUSH
22046: LD_INT 5
22048: PUSH
22049: LD_INT 6
22051: PUSH
22052: LD_INT 15
22054: PUSH
22055: LD_INT 18
22057: PUSH
22058: LD_INT 7
22060: PUSH
22061: LD_INT 17
22063: PUSH
22064: LD_INT 8
22066: PUSH
22067: LD_INT 20
22069: PUSH
22070: LD_INT 21
22072: PUSH
22073: LD_INT 22
22075: PUSH
22076: LD_INT 72
22078: PUSH
22079: LD_INT 26
22081: PUSH
22082: LD_INT 69
22084: PUSH
22085: LD_INT 39
22087: PUSH
22088: LD_INT 40
22090: PUSH
22091: LD_INT 41
22093: PUSH
22094: LD_INT 42
22096: PUSH
22097: LD_INT 43
22099: PUSH
22100: LD_INT 48
22102: PUSH
22103: LD_INT 49
22105: PUSH
22106: LD_INT 50
22108: PUSH
22109: LD_INT 51
22111: PUSH
22112: LD_INT 52
22114: PUSH
22115: LD_INT 53
22117: PUSH
22118: LD_INT 54
22120: PUSH
22121: LD_INT 55
22123: PUSH
22124: LD_INT 56
22126: PUSH
22127: LD_INT 60
22129: PUSH
22130: LD_INT 61
22132: PUSH
22133: LD_INT 62
22135: PUSH
22136: LD_INT 66
22138: PUSH
22139: LD_INT 67
22141: PUSH
22142: LD_INT 68
22144: PUSH
22145: LD_INT 81
22147: PUSH
22148: LD_INT 82
22150: PUSH
22151: LD_INT 83
22153: PUSH
22154: LD_INT 84
22156: PUSH
22157: LD_INT 85
22159: PUSH
22160: LD_INT 87
22162: PUSH
22163: LD_INT 88
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: ST_TO_ADDR
22222: GO 22455
22224: LD_INT 3
22226: DOUBLE
22227: EQUAL
22228: IFTRUE 22232
22230: GO 22454
22232: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22233: LD_ADDR_VAR 0 4
22237: PUSH
22238: LD_INT 46
22240: PUSH
22241: LD_INT 47
22243: PUSH
22244: LD_INT 1
22246: PUSH
22247: LD_INT 2
22249: PUSH
22250: LD_INT 82
22252: PUSH
22253: LD_INT 83
22255: PUSH
22256: LD_INT 84
22258: PUSH
22259: LD_INT 85
22261: PUSH
22262: LD_INT 86
22264: PUSH
22265: LD_INT 11
22267: PUSH
22268: LD_INT 9
22270: PUSH
22271: LD_INT 20
22273: PUSH
22274: LD_INT 19
22276: PUSH
22277: LD_INT 21
22279: PUSH
22280: LD_INT 24
22282: PUSH
22283: LD_INT 22
22285: PUSH
22286: LD_INT 25
22288: PUSH
22289: LD_INT 28
22291: PUSH
22292: LD_INT 29
22294: PUSH
22295: LD_INT 30
22297: PUSH
22298: LD_INT 31
22300: PUSH
22301: LD_INT 37
22303: PUSH
22304: LD_INT 38
22306: PUSH
22307: LD_INT 32
22309: PUSH
22310: LD_INT 27
22312: PUSH
22313: LD_INT 33
22315: PUSH
22316: LD_INT 69
22318: PUSH
22319: LD_INT 39
22321: PUSH
22322: LD_INT 34
22324: PUSH
22325: LD_INT 40
22327: PUSH
22328: LD_INT 71
22330: PUSH
22331: LD_INT 23
22333: PUSH
22334: LD_INT 44
22336: PUSH
22337: LD_INT 48
22339: PUSH
22340: LD_INT 49
22342: PUSH
22343: LD_INT 50
22345: PUSH
22346: LD_INT 51
22348: PUSH
22349: LD_INT 52
22351: PUSH
22352: LD_INT 53
22354: PUSH
22355: LD_INT 54
22357: PUSH
22358: LD_INT 55
22360: PUSH
22361: LD_INT 56
22363: PUSH
22364: LD_INT 57
22366: PUSH
22367: LD_INT 58
22369: PUSH
22370: LD_INT 59
22372: PUSH
22373: LD_INT 63
22375: PUSH
22376: LD_INT 64
22378: PUSH
22379: LD_INT 65
22381: PUSH
22382: LD_INT 82
22384: PUSH
22385: LD_INT 83
22387: PUSH
22388: LD_INT 84
22390: PUSH
22391: LD_INT 85
22393: PUSH
22394: LD_INT 86
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: ST_TO_ADDR
22452: GO 22455
22454: POP
// if state > - 1 and state < 3 then
22455: LD_VAR 0 3
22459: PUSH
22460: LD_INT 1
22462: NEG
22463: GREATER
22464: PUSH
22465: LD_VAR 0 3
22469: PUSH
22470: LD_INT 3
22472: LESS
22473: AND
22474: IFFALSE 22531
// for i in result do
22476: LD_ADDR_VAR 0 5
22480: PUSH
22481: LD_VAR 0 4
22485: PUSH
22486: FOR_IN
22487: IFFALSE 22529
// if GetTech ( i , side ) <> state then
22489: LD_VAR 0 5
22493: PPUSH
22494: LD_VAR 0 1
22498: PPUSH
22499: CALL_OW 321
22503: PUSH
22504: LD_VAR 0 3
22508: NONEQUAL
22509: IFFALSE 22527
// result := result diff i ;
22511: LD_ADDR_VAR 0 4
22515: PUSH
22516: LD_VAR 0 4
22520: PUSH
22521: LD_VAR 0 5
22525: DIFF
22526: ST_TO_ADDR
22527: GO 22486
22529: POP
22530: POP
// end ;
22531: LD_VAR 0 4
22535: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22536: LD_INT 0
22538: PPUSH
22539: PPUSH
22540: PPUSH
// result := true ;
22541: LD_ADDR_VAR 0 3
22545: PUSH
22546: LD_INT 1
22548: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22549: LD_ADDR_VAR 0 5
22553: PUSH
22554: LD_VAR 0 2
22558: PPUSH
22559: CALL_OW 480
22563: ST_TO_ADDR
// if not tmp then
22564: LD_VAR 0 5
22568: NOT
22569: IFFALSE 22573
// exit ;
22571: GO 22622
// for i in tmp do
22573: LD_ADDR_VAR 0 4
22577: PUSH
22578: LD_VAR 0 5
22582: PUSH
22583: FOR_IN
22584: IFFALSE 22620
// if GetTech ( i , side ) <> state_researched then
22586: LD_VAR 0 4
22590: PPUSH
22591: LD_VAR 0 1
22595: PPUSH
22596: CALL_OW 321
22600: PUSH
22601: LD_INT 2
22603: NONEQUAL
22604: IFFALSE 22618
// begin result := false ;
22606: LD_ADDR_VAR 0 3
22610: PUSH
22611: LD_INT 0
22613: ST_TO_ADDR
// exit ;
22614: POP
22615: POP
22616: GO 22622
// end ;
22618: GO 22583
22620: POP
22621: POP
// end ;
22622: LD_VAR 0 3
22626: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22627: LD_INT 0
22629: PPUSH
22630: PPUSH
22631: PPUSH
22632: PPUSH
22633: PPUSH
22634: PPUSH
22635: PPUSH
22636: PPUSH
22637: PPUSH
22638: PPUSH
22639: PPUSH
22640: PPUSH
22641: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22642: LD_VAR 0 1
22646: NOT
22647: PUSH
22648: LD_VAR 0 1
22652: PPUSH
22653: CALL_OW 257
22657: PUSH
22658: LD_INT 9
22660: NONEQUAL
22661: OR
22662: IFFALSE 22666
// exit ;
22664: GO 23239
// side := GetSide ( unit ) ;
22666: LD_ADDR_VAR 0 9
22670: PUSH
22671: LD_VAR 0 1
22675: PPUSH
22676: CALL_OW 255
22680: ST_TO_ADDR
// tech_space := tech_spacanom ;
22681: LD_ADDR_VAR 0 12
22685: PUSH
22686: LD_INT 29
22688: ST_TO_ADDR
// tech_time := tech_taurad ;
22689: LD_ADDR_VAR 0 13
22693: PUSH
22694: LD_INT 28
22696: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22697: LD_ADDR_VAR 0 11
22701: PUSH
22702: LD_VAR 0 1
22706: PPUSH
22707: CALL_OW 310
22711: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22712: LD_VAR 0 11
22716: PPUSH
22717: CALL_OW 247
22721: PUSH
22722: LD_INT 2
22724: EQUAL
22725: IFFALSE 22729
// exit ;
22727: GO 23239
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22729: LD_ADDR_VAR 0 8
22733: PUSH
22734: LD_INT 81
22736: PUSH
22737: LD_VAR 0 9
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 3
22748: PUSH
22749: LD_INT 21
22751: PUSH
22752: LD_INT 3
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: PPUSH
22767: CALL_OW 69
22771: ST_TO_ADDR
// if not tmp then
22772: LD_VAR 0 8
22776: NOT
22777: IFFALSE 22781
// exit ;
22779: GO 23239
// if in_unit then
22781: LD_VAR 0 11
22785: IFFALSE 22809
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22787: LD_ADDR_VAR 0 10
22791: PUSH
22792: LD_VAR 0 8
22796: PPUSH
22797: LD_VAR 0 11
22801: PPUSH
22802: CALL_OW 74
22806: ST_TO_ADDR
22807: GO 22829
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22809: LD_ADDR_VAR 0 10
22813: PUSH
22814: LD_VAR 0 8
22818: PPUSH
22819: LD_VAR 0 1
22823: PPUSH
22824: CALL_OW 74
22828: ST_TO_ADDR
// if not enemy then
22829: LD_VAR 0 10
22833: NOT
22834: IFFALSE 22838
// exit ;
22836: GO 23239
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22838: LD_VAR 0 11
22842: PUSH
22843: LD_VAR 0 11
22847: PPUSH
22848: LD_VAR 0 10
22852: PPUSH
22853: CALL_OW 296
22857: PUSH
22858: LD_INT 13
22860: GREATER
22861: AND
22862: PUSH
22863: LD_VAR 0 1
22867: PPUSH
22868: LD_VAR 0 10
22872: PPUSH
22873: CALL_OW 296
22877: PUSH
22878: LD_INT 12
22880: GREATER
22881: OR
22882: IFFALSE 22886
// exit ;
22884: GO 23239
// missile := [ 1 ] ;
22886: LD_ADDR_VAR 0 14
22890: PUSH
22891: LD_INT 1
22893: PUSH
22894: EMPTY
22895: LIST
22896: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22897: LD_VAR 0 9
22901: PPUSH
22902: LD_VAR 0 12
22906: PPUSH
22907: CALL_OW 325
22911: IFFALSE 22940
// missile := Replace ( missile , missile + 1 , 2 ) ;
22913: LD_ADDR_VAR 0 14
22917: PUSH
22918: LD_VAR 0 14
22922: PPUSH
22923: LD_VAR 0 14
22927: PUSH
22928: LD_INT 1
22930: PLUS
22931: PPUSH
22932: LD_INT 2
22934: PPUSH
22935: CALL_OW 1
22939: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22940: LD_VAR 0 9
22944: PPUSH
22945: LD_VAR 0 13
22949: PPUSH
22950: CALL_OW 325
22954: PUSH
22955: LD_VAR 0 10
22959: PPUSH
22960: CALL_OW 255
22964: PPUSH
22965: LD_VAR 0 13
22969: PPUSH
22970: CALL_OW 325
22974: NOT
22975: AND
22976: IFFALSE 23005
// missile := Replace ( missile , missile + 1 , 3 ) ;
22978: LD_ADDR_VAR 0 14
22982: PUSH
22983: LD_VAR 0 14
22987: PPUSH
22988: LD_VAR 0 14
22992: PUSH
22993: LD_INT 1
22995: PLUS
22996: PPUSH
22997: LD_INT 3
22999: PPUSH
23000: CALL_OW 1
23004: ST_TO_ADDR
// if missile < 2 then
23005: LD_VAR 0 14
23009: PUSH
23010: LD_INT 2
23012: LESS
23013: IFFALSE 23017
// exit ;
23015: GO 23239
// x := GetX ( enemy ) ;
23017: LD_ADDR_VAR 0 4
23021: PUSH
23022: LD_VAR 0 10
23026: PPUSH
23027: CALL_OW 250
23031: ST_TO_ADDR
// y := GetY ( enemy ) ;
23032: LD_ADDR_VAR 0 5
23036: PUSH
23037: LD_VAR 0 10
23041: PPUSH
23042: CALL_OW 251
23046: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23047: LD_ADDR_VAR 0 6
23051: PUSH
23052: LD_VAR 0 4
23056: PUSH
23057: LD_INT 1
23059: NEG
23060: PPUSH
23061: LD_INT 1
23063: PPUSH
23064: CALL_OW 12
23068: PLUS
23069: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23070: LD_ADDR_VAR 0 7
23074: PUSH
23075: LD_VAR 0 5
23079: PUSH
23080: LD_INT 1
23082: NEG
23083: PPUSH
23084: LD_INT 1
23086: PPUSH
23087: CALL_OW 12
23091: PLUS
23092: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23093: LD_VAR 0 6
23097: PPUSH
23098: LD_VAR 0 7
23102: PPUSH
23103: CALL_OW 488
23107: NOT
23108: IFFALSE 23130
// begin _x := x ;
23110: LD_ADDR_VAR 0 6
23114: PUSH
23115: LD_VAR 0 4
23119: ST_TO_ADDR
// _y := y ;
23120: LD_ADDR_VAR 0 7
23124: PUSH
23125: LD_VAR 0 5
23129: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23130: LD_ADDR_VAR 0 3
23134: PUSH
23135: LD_INT 1
23137: PPUSH
23138: LD_VAR 0 14
23142: PPUSH
23143: CALL_OW 12
23147: ST_TO_ADDR
// case i of 1 :
23148: LD_VAR 0 3
23152: PUSH
23153: LD_INT 1
23155: DOUBLE
23156: EQUAL
23157: IFTRUE 23161
23159: GO 23178
23161: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23162: LD_VAR 0 1
23166: PPUSH
23167: LD_VAR 0 10
23171: PPUSH
23172: CALL_OW 115
23176: GO 23239
23178: LD_INT 2
23180: DOUBLE
23181: EQUAL
23182: IFTRUE 23186
23184: GO 23208
23186: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23187: LD_VAR 0 1
23191: PPUSH
23192: LD_VAR 0 6
23196: PPUSH
23197: LD_VAR 0 7
23201: PPUSH
23202: CALL_OW 153
23206: GO 23239
23208: LD_INT 3
23210: DOUBLE
23211: EQUAL
23212: IFTRUE 23216
23214: GO 23238
23216: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23217: LD_VAR 0 1
23221: PPUSH
23222: LD_VAR 0 6
23226: PPUSH
23227: LD_VAR 0 7
23231: PPUSH
23232: CALL_OW 154
23236: GO 23239
23238: POP
// end ;
23239: LD_VAR 0 2
23243: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23244: LD_INT 0
23246: PPUSH
23247: PPUSH
23248: PPUSH
23249: PPUSH
23250: PPUSH
23251: PPUSH
// if not unit or not building then
23252: LD_VAR 0 1
23256: NOT
23257: PUSH
23258: LD_VAR 0 2
23262: NOT
23263: OR
23264: IFFALSE 23268
// exit ;
23266: GO 23426
// x := GetX ( building ) ;
23268: LD_ADDR_VAR 0 5
23272: PUSH
23273: LD_VAR 0 2
23277: PPUSH
23278: CALL_OW 250
23282: ST_TO_ADDR
// y := GetY ( building ) ;
23283: LD_ADDR_VAR 0 6
23287: PUSH
23288: LD_VAR 0 2
23292: PPUSH
23293: CALL_OW 251
23297: ST_TO_ADDR
// for i = 0 to 5 do
23298: LD_ADDR_VAR 0 4
23302: PUSH
23303: DOUBLE
23304: LD_INT 0
23306: DEC
23307: ST_TO_ADDR
23308: LD_INT 5
23310: PUSH
23311: FOR_TO
23312: IFFALSE 23424
// begin _x := ShiftX ( x , i , 3 ) ;
23314: LD_ADDR_VAR 0 7
23318: PUSH
23319: LD_VAR 0 5
23323: PPUSH
23324: LD_VAR 0 4
23328: PPUSH
23329: LD_INT 3
23331: PPUSH
23332: CALL_OW 272
23336: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23337: LD_ADDR_VAR 0 8
23341: PUSH
23342: LD_VAR 0 6
23346: PPUSH
23347: LD_VAR 0 4
23351: PPUSH
23352: LD_INT 3
23354: PPUSH
23355: CALL_OW 273
23359: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23360: LD_VAR 0 7
23364: PPUSH
23365: LD_VAR 0 8
23369: PPUSH
23370: CALL_OW 488
23374: NOT
23375: IFFALSE 23379
// continue ;
23377: GO 23311
// if HexInfo ( _x , _y ) = 0 then
23379: LD_VAR 0 7
23383: PPUSH
23384: LD_VAR 0 8
23388: PPUSH
23389: CALL_OW 428
23393: PUSH
23394: LD_INT 0
23396: EQUAL
23397: IFFALSE 23422
// begin ComMoveXY ( unit , _x , _y ) ;
23399: LD_VAR 0 1
23403: PPUSH
23404: LD_VAR 0 7
23408: PPUSH
23409: LD_VAR 0 8
23413: PPUSH
23414: CALL_OW 111
// exit ;
23418: POP
23419: POP
23420: GO 23426
// end ; end ;
23422: GO 23311
23424: POP
23425: POP
// end ;
23426: LD_VAR 0 3
23430: RET
// export function ScanBase ( side , base_area ) ; begin
23431: LD_INT 0
23433: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23434: LD_ADDR_VAR 0 3
23438: PUSH
23439: LD_VAR 0 2
23443: PPUSH
23444: LD_INT 81
23446: PUSH
23447: LD_VAR 0 1
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PPUSH
23456: CALL_OW 70
23460: ST_TO_ADDR
// end ;
23461: LD_VAR 0 3
23465: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23466: LD_INT 0
23468: PPUSH
23469: PPUSH
23470: PPUSH
23471: PPUSH
// result := false ;
23472: LD_ADDR_VAR 0 2
23476: PUSH
23477: LD_INT 0
23479: ST_TO_ADDR
// side := GetSide ( unit ) ;
23480: LD_ADDR_VAR 0 3
23484: PUSH
23485: LD_VAR 0 1
23489: PPUSH
23490: CALL_OW 255
23494: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23495: LD_ADDR_VAR 0 4
23499: PUSH
23500: LD_VAR 0 1
23504: PPUSH
23505: CALL_OW 248
23509: ST_TO_ADDR
// case nat of 1 :
23510: LD_VAR 0 4
23514: PUSH
23515: LD_INT 1
23517: DOUBLE
23518: EQUAL
23519: IFTRUE 23523
23521: GO 23534
23523: POP
// tech := tech_lassight ; 2 :
23524: LD_ADDR_VAR 0 5
23528: PUSH
23529: LD_INT 12
23531: ST_TO_ADDR
23532: GO 23573
23534: LD_INT 2
23536: DOUBLE
23537: EQUAL
23538: IFTRUE 23542
23540: GO 23553
23542: POP
// tech := tech_mortar ; 3 :
23543: LD_ADDR_VAR 0 5
23547: PUSH
23548: LD_INT 41
23550: ST_TO_ADDR
23551: GO 23573
23553: LD_INT 3
23555: DOUBLE
23556: EQUAL
23557: IFTRUE 23561
23559: GO 23572
23561: POP
// tech := tech_bazooka ; end ;
23562: LD_ADDR_VAR 0 5
23566: PUSH
23567: LD_INT 44
23569: ST_TO_ADDR
23570: GO 23573
23572: POP
// if Researched ( side , tech ) then
23573: LD_VAR 0 3
23577: PPUSH
23578: LD_VAR 0 5
23582: PPUSH
23583: CALL_OW 325
23587: IFFALSE 23614
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23589: LD_ADDR_VAR 0 2
23593: PUSH
23594: LD_INT 5
23596: PUSH
23597: LD_INT 8
23599: PUSH
23600: LD_INT 9
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: LIST
23607: PUSH
23608: LD_VAR 0 4
23612: ARRAY
23613: ST_TO_ADDR
// end ;
23614: LD_VAR 0 2
23618: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23619: LD_INT 0
23621: PPUSH
23622: PPUSH
23623: PPUSH
// if not mines then
23624: LD_VAR 0 2
23628: NOT
23629: IFFALSE 23633
// exit ;
23631: GO 23777
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23633: LD_ADDR_VAR 0 5
23637: PUSH
23638: LD_INT 81
23640: PUSH
23641: LD_VAR 0 1
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PUSH
23650: LD_INT 3
23652: PUSH
23653: LD_INT 21
23655: PUSH
23656: LD_INT 3
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: PPUSH
23671: CALL_OW 69
23675: ST_TO_ADDR
// for i in mines do
23676: LD_ADDR_VAR 0 4
23680: PUSH
23681: LD_VAR 0 2
23685: PUSH
23686: FOR_IN
23687: IFFALSE 23775
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23689: LD_VAR 0 4
23693: PUSH
23694: LD_INT 1
23696: ARRAY
23697: PPUSH
23698: LD_VAR 0 4
23702: PUSH
23703: LD_INT 2
23705: ARRAY
23706: PPUSH
23707: CALL_OW 458
23711: NOT
23712: IFFALSE 23716
// continue ;
23714: GO 23686
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23716: LD_VAR 0 4
23720: PUSH
23721: LD_INT 1
23723: ARRAY
23724: PPUSH
23725: LD_VAR 0 4
23729: PUSH
23730: LD_INT 2
23732: ARRAY
23733: PPUSH
23734: CALL_OW 428
23738: PUSH
23739: LD_VAR 0 5
23743: IN
23744: IFFALSE 23773
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23746: LD_VAR 0 4
23750: PUSH
23751: LD_INT 1
23753: ARRAY
23754: PPUSH
23755: LD_VAR 0 4
23759: PUSH
23760: LD_INT 2
23762: ARRAY
23763: PPUSH
23764: LD_VAR 0 1
23768: PPUSH
23769: CALL_OW 456
// end ;
23773: GO 23686
23775: POP
23776: POP
// end ;
23777: LD_VAR 0 3
23781: RET
// export function Count ( array ) ; begin
23782: LD_INT 0
23784: PPUSH
// result := array + 0 ;
23785: LD_ADDR_VAR 0 2
23789: PUSH
23790: LD_VAR 0 1
23794: PUSH
23795: LD_INT 0
23797: PLUS
23798: ST_TO_ADDR
// end ;
23799: LD_VAR 0 2
23803: RET
// export function IsEmpty ( building ) ; begin
23804: LD_INT 0
23806: PPUSH
// if not building then
23807: LD_VAR 0 1
23811: NOT
23812: IFFALSE 23816
// exit ;
23814: GO 23859
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23816: LD_ADDR_VAR 0 2
23820: PUSH
23821: LD_VAR 0 1
23825: PUSH
23826: LD_INT 22
23828: PUSH
23829: LD_VAR 0 1
23833: PPUSH
23834: CALL_OW 255
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 58
23845: PUSH
23846: EMPTY
23847: LIST
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PPUSH
23853: CALL_OW 69
23857: IN
23858: ST_TO_ADDR
// end ;
23859: LD_VAR 0 2
23863: RET
// export function IsNotFull ( building ) ; var places ; begin
23864: LD_INT 0
23866: PPUSH
23867: PPUSH
// if not building then
23868: LD_VAR 0 1
23872: NOT
23873: IFFALSE 23877
// exit ;
23875: GO 23905
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
23877: LD_ADDR_VAR 0 2
23881: PUSH
23882: LD_VAR 0 1
23886: PPUSH
23887: LD_INT 3
23889: PUSH
23890: LD_INT 62
23892: PUSH
23893: EMPTY
23894: LIST
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PPUSH
23900: CALL_OW 72
23904: ST_TO_ADDR
// end ;
23905: LD_VAR 0 2
23909: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23910: LD_INT 0
23912: PPUSH
23913: PPUSH
23914: PPUSH
23915: PPUSH
// tmp := [ ] ;
23916: LD_ADDR_VAR 0 3
23920: PUSH
23921: EMPTY
23922: ST_TO_ADDR
// list := [ ] ;
23923: LD_ADDR_VAR 0 5
23927: PUSH
23928: EMPTY
23929: ST_TO_ADDR
// for i = 16 to 25 do
23930: LD_ADDR_VAR 0 4
23934: PUSH
23935: DOUBLE
23936: LD_INT 16
23938: DEC
23939: ST_TO_ADDR
23940: LD_INT 25
23942: PUSH
23943: FOR_TO
23944: IFFALSE 24017
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23946: LD_ADDR_VAR 0 3
23950: PUSH
23951: LD_VAR 0 3
23955: PUSH
23956: LD_INT 22
23958: PUSH
23959: LD_VAR 0 1
23963: PPUSH
23964: CALL_OW 255
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: LD_INT 91
23975: PUSH
23976: LD_VAR 0 1
23980: PUSH
23981: LD_INT 6
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: LIST
23988: PUSH
23989: LD_INT 30
23991: PUSH
23992: LD_VAR 0 4
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: LIST
24005: PUSH
24006: EMPTY
24007: LIST
24008: PPUSH
24009: CALL_OW 69
24013: ADD
24014: ST_TO_ADDR
24015: GO 23943
24017: POP
24018: POP
// for i = 1 to tmp do
24019: LD_ADDR_VAR 0 4
24023: PUSH
24024: DOUBLE
24025: LD_INT 1
24027: DEC
24028: ST_TO_ADDR
24029: LD_VAR 0 3
24033: PUSH
24034: FOR_TO
24035: IFFALSE 24123
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24037: LD_ADDR_VAR 0 5
24041: PUSH
24042: LD_VAR 0 5
24046: PUSH
24047: LD_VAR 0 3
24051: PUSH
24052: LD_VAR 0 4
24056: ARRAY
24057: PPUSH
24058: CALL_OW 266
24062: PUSH
24063: LD_VAR 0 3
24067: PUSH
24068: LD_VAR 0 4
24072: ARRAY
24073: PPUSH
24074: CALL_OW 250
24078: PUSH
24079: LD_VAR 0 3
24083: PUSH
24084: LD_VAR 0 4
24088: ARRAY
24089: PPUSH
24090: CALL_OW 251
24094: PUSH
24095: LD_VAR 0 3
24099: PUSH
24100: LD_VAR 0 4
24104: ARRAY
24105: PPUSH
24106: CALL_OW 254
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: PUSH
24117: EMPTY
24118: LIST
24119: ADD
24120: ST_TO_ADDR
24121: GO 24034
24123: POP
24124: POP
// result := list ;
24125: LD_ADDR_VAR 0 2
24129: PUSH
24130: LD_VAR 0 5
24134: ST_TO_ADDR
// end ;
24135: LD_VAR 0 2
24139: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24140: LD_INT 0
24142: PPUSH
24143: PPUSH
24144: PPUSH
24145: PPUSH
24146: PPUSH
24147: PPUSH
24148: PPUSH
// if not factory then
24149: LD_VAR 0 1
24153: NOT
24154: IFFALSE 24158
// exit ;
24156: GO 24751
// if control = control_apeman then
24158: LD_VAR 0 4
24162: PUSH
24163: LD_INT 5
24165: EQUAL
24166: IFFALSE 24275
// begin tmp := UnitsInside ( factory ) ;
24168: LD_ADDR_VAR 0 8
24172: PUSH
24173: LD_VAR 0 1
24177: PPUSH
24178: CALL_OW 313
24182: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24183: LD_VAR 0 8
24187: PPUSH
24188: LD_INT 25
24190: PUSH
24191: LD_INT 12
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PPUSH
24198: CALL_OW 72
24202: NOT
24203: IFFALSE 24213
// control := control_manual ;
24205: LD_ADDR_VAR 0 4
24209: PUSH
24210: LD_INT 1
24212: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24213: LD_ADDR_VAR 0 8
24217: PUSH
24218: LD_VAR 0 1
24222: PPUSH
24223: CALL 23910 0 1
24227: ST_TO_ADDR
// if tmp then
24228: LD_VAR 0 8
24232: IFFALSE 24275
// begin for i in tmp do
24234: LD_ADDR_VAR 0 7
24238: PUSH
24239: LD_VAR 0 8
24243: PUSH
24244: FOR_IN
24245: IFFALSE 24273
// if i [ 1 ] = b_ext_radio then
24247: LD_VAR 0 7
24251: PUSH
24252: LD_INT 1
24254: ARRAY
24255: PUSH
24256: LD_INT 22
24258: EQUAL
24259: IFFALSE 24271
// begin control := control_remote ;
24261: LD_ADDR_VAR 0 4
24265: PUSH
24266: LD_INT 2
24268: ST_TO_ADDR
// break ;
24269: GO 24273
// end ;
24271: GO 24244
24273: POP
24274: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24275: LD_VAR 0 1
24279: PPUSH
24280: LD_VAR 0 2
24284: PPUSH
24285: LD_VAR 0 3
24289: PPUSH
24290: LD_VAR 0 4
24294: PPUSH
24295: LD_VAR 0 5
24299: PPUSH
24300: CALL_OW 448
24304: IFFALSE 24339
// begin result := [ chassis , engine , control , weapon ] ;
24306: LD_ADDR_VAR 0 6
24310: PUSH
24311: LD_VAR 0 2
24315: PUSH
24316: LD_VAR 0 3
24320: PUSH
24321: LD_VAR 0 4
24325: PUSH
24326: LD_VAR 0 5
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: ST_TO_ADDR
// exit ;
24337: GO 24751
// end ; _chassis := AvailableChassisList ( factory ) ;
24339: LD_ADDR_VAR 0 9
24343: PUSH
24344: LD_VAR 0 1
24348: PPUSH
24349: CALL_OW 475
24353: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24354: LD_ADDR_VAR 0 11
24358: PUSH
24359: LD_VAR 0 1
24363: PPUSH
24364: CALL_OW 476
24368: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24369: LD_ADDR_VAR 0 12
24373: PUSH
24374: LD_VAR 0 1
24378: PPUSH
24379: CALL_OW 477
24383: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24384: LD_ADDR_VAR 0 10
24388: PUSH
24389: LD_VAR 0 1
24393: PPUSH
24394: CALL_OW 478
24398: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24399: LD_VAR 0 9
24403: NOT
24404: PUSH
24405: LD_VAR 0 11
24409: NOT
24410: OR
24411: PUSH
24412: LD_VAR 0 12
24416: NOT
24417: OR
24418: PUSH
24419: LD_VAR 0 10
24423: NOT
24424: OR
24425: IFFALSE 24460
// begin result := [ chassis , engine , control , weapon ] ;
24427: LD_ADDR_VAR 0 6
24431: PUSH
24432: LD_VAR 0 2
24436: PUSH
24437: LD_VAR 0 3
24441: PUSH
24442: LD_VAR 0 4
24446: PUSH
24447: LD_VAR 0 5
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: ST_TO_ADDR
// exit ;
24458: GO 24751
// end ; if not chassis in _chassis then
24460: LD_VAR 0 2
24464: PUSH
24465: LD_VAR 0 9
24469: IN
24470: NOT
24471: IFFALSE 24497
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24473: LD_ADDR_VAR 0 2
24477: PUSH
24478: LD_VAR 0 9
24482: PUSH
24483: LD_INT 1
24485: PPUSH
24486: LD_VAR 0 9
24490: PPUSH
24491: CALL_OW 12
24495: ARRAY
24496: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24497: LD_VAR 0 2
24501: PPUSH
24502: LD_VAR 0 3
24506: PPUSH
24507: CALL 24756 0 2
24511: NOT
24512: IFFALSE 24571
// repeat engine := _engine [ 1 ] ;
24514: LD_ADDR_VAR 0 3
24518: PUSH
24519: LD_VAR 0 11
24523: PUSH
24524: LD_INT 1
24526: ARRAY
24527: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24528: LD_ADDR_VAR 0 11
24532: PUSH
24533: LD_VAR 0 11
24537: PPUSH
24538: LD_INT 1
24540: PPUSH
24541: CALL_OW 3
24545: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24546: LD_VAR 0 2
24550: PPUSH
24551: LD_VAR 0 3
24555: PPUSH
24556: CALL 24756 0 2
24560: PUSH
24561: LD_VAR 0 11
24565: PUSH
24566: EMPTY
24567: EQUAL
24568: OR
24569: IFFALSE 24514
// if not control in _control then
24571: LD_VAR 0 4
24575: PUSH
24576: LD_VAR 0 12
24580: IN
24581: NOT
24582: IFFALSE 24608
// control := _control [ rand ( 1 , _control ) ] ;
24584: LD_ADDR_VAR 0 4
24588: PUSH
24589: LD_VAR 0 12
24593: PUSH
24594: LD_INT 1
24596: PPUSH
24597: LD_VAR 0 12
24601: PPUSH
24602: CALL_OW 12
24606: ARRAY
24607: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24608: LD_VAR 0 2
24612: PPUSH
24613: LD_VAR 0 5
24617: PPUSH
24618: CALL 24976 0 2
24622: NOT
24623: IFFALSE 24682
// repeat weapon := _weapon [ 1 ] ;
24625: LD_ADDR_VAR 0 5
24629: PUSH
24630: LD_VAR 0 10
24634: PUSH
24635: LD_INT 1
24637: ARRAY
24638: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24639: LD_ADDR_VAR 0 10
24643: PUSH
24644: LD_VAR 0 10
24648: PPUSH
24649: LD_INT 1
24651: PPUSH
24652: CALL_OW 3
24656: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24657: LD_VAR 0 2
24661: PPUSH
24662: LD_VAR 0 5
24666: PPUSH
24667: CALL 24976 0 2
24671: PUSH
24672: LD_VAR 0 10
24676: PUSH
24677: EMPTY
24678: EQUAL
24679: OR
24680: IFFALSE 24625
// result := [ ] ;
24682: LD_ADDR_VAR 0 6
24686: PUSH
24687: EMPTY
24688: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24689: LD_VAR 0 1
24693: PPUSH
24694: LD_VAR 0 2
24698: PPUSH
24699: LD_VAR 0 3
24703: PPUSH
24704: LD_VAR 0 4
24708: PPUSH
24709: LD_VAR 0 5
24713: PPUSH
24714: CALL_OW 448
24718: IFFALSE 24751
// result := [ chassis , engine , control , weapon ] ;
24720: LD_ADDR_VAR 0 6
24724: PUSH
24725: LD_VAR 0 2
24729: PUSH
24730: LD_VAR 0 3
24734: PUSH
24735: LD_VAR 0 4
24739: PUSH
24740: LD_VAR 0 5
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: ST_TO_ADDR
// end ;
24751: LD_VAR 0 6
24755: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24756: LD_INT 0
24758: PPUSH
// if not chassis or not engine then
24759: LD_VAR 0 1
24763: NOT
24764: PUSH
24765: LD_VAR 0 2
24769: NOT
24770: OR
24771: IFFALSE 24775
// exit ;
24773: GO 24971
// case engine of engine_solar :
24775: LD_VAR 0 2
24779: PUSH
24780: LD_INT 2
24782: DOUBLE
24783: EQUAL
24784: IFTRUE 24788
24786: GO 24826
24788: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24789: LD_ADDR_VAR 0 3
24793: PUSH
24794: LD_INT 11
24796: PUSH
24797: LD_INT 12
24799: PUSH
24800: LD_INT 13
24802: PUSH
24803: LD_INT 14
24805: PUSH
24806: LD_INT 1
24808: PUSH
24809: LD_INT 2
24811: PUSH
24812: LD_INT 3
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: ST_TO_ADDR
24824: GO 24955
24826: LD_INT 1
24828: DOUBLE
24829: EQUAL
24830: IFTRUE 24834
24832: GO 24896
24834: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24835: LD_ADDR_VAR 0 3
24839: PUSH
24840: LD_INT 11
24842: PUSH
24843: LD_INT 12
24845: PUSH
24846: LD_INT 13
24848: PUSH
24849: LD_INT 14
24851: PUSH
24852: LD_INT 1
24854: PUSH
24855: LD_INT 2
24857: PUSH
24858: LD_INT 3
24860: PUSH
24861: LD_INT 4
24863: PUSH
24864: LD_INT 5
24866: PUSH
24867: LD_INT 21
24869: PUSH
24870: LD_INT 23
24872: PUSH
24873: LD_INT 22
24875: PUSH
24876: LD_INT 24
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: ST_TO_ADDR
24894: GO 24955
24896: LD_INT 3
24898: DOUBLE
24899: EQUAL
24900: IFTRUE 24904
24902: GO 24954
24904: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24905: LD_ADDR_VAR 0 3
24909: PUSH
24910: LD_INT 13
24912: PUSH
24913: LD_INT 14
24915: PUSH
24916: LD_INT 2
24918: PUSH
24919: LD_INT 3
24921: PUSH
24922: LD_INT 4
24924: PUSH
24925: LD_INT 5
24927: PUSH
24928: LD_INT 21
24930: PUSH
24931: LD_INT 22
24933: PUSH
24934: LD_INT 23
24936: PUSH
24937: LD_INT 24
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: ST_TO_ADDR
24952: GO 24955
24954: POP
// result := ( chassis in result ) ;
24955: LD_ADDR_VAR 0 3
24959: PUSH
24960: LD_VAR 0 1
24964: PUSH
24965: LD_VAR 0 3
24969: IN
24970: ST_TO_ADDR
// end ;
24971: LD_VAR 0 3
24975: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24976: LD_INT 0
24978: PPUSH
// if not chassis or not weapon then
24979: LD_VAR 0 1
24983: NOT
24984: PUSH
24985: LD_VAR 0 2
24989: NOT
24990: OR
24991: IFFALSE 24995
// exit ;
24993: GO 26055
// case weapon of us_machine_gun :
24995: LD_VAR 0 2
24999: PUSH
25000: LD_INT 2
25002: DOUBLE
25003: EQUAL
25004: IFTRUE 25008
25006: GO 25038
25008: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25009: LD_ADDR_VAR 0 3
25013: PUSH
25014: LD_INT 1
25016: PUSH
25017: LD_INT 2
25019: PUSH
25020: LD_INT 3
25022: PUSH
25023: LD_INT 4
25025: PUSH
25026: LD_INT 5
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: ST_TO_ADDR
25036: GO 26039
25038: LD_INT 3
25040: DOUBLE
25041: EQUAL
25042: IFTRUE 25046
25044: GO 25076
25046: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25047: LD_ADDR_VAR 0 3
25051: PUSH
25052: LD_INT 1
25054: PUSH
25055: LD_INT 2
25057: PUSH
25058: LD_INT 3
25060: PUSH
25061: LD_INT 4
25063: PUSH
25064: LD_INT 5
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: ST_TO_ADDR
25074: GO 26039
25076: LD_INT 11
25078: DOUBLE
25079: EQUAL
25080: IFTRUE 25084
25082: GO 25114
25084: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25085: LD_ADDR_VAR 0 3
25089: PUSH
25090: LD_INT 1
25092: PUSH
25093: LD_INT 2
25095: PUSH
25096: LD_INT 3
25098: PUSH
25099: LD_INT 4
25101: PUSH
25102: LD_INT 5
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: ST_TO_ADDR
25112: GO 26039
25114: LD_INT 4
25116: DOUBLE
25117: EQUAL
25118: IFTRUE 25122
25120: GO 25148
25122: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25123: LD_ADDR_VAR 0 3
25127: PUSH
25128: LD_INT 2
25130: PUSH
25131: LD_INT 3
25133: PUSH
25134: LD_INT 4
25136: PUSH
25137: LD_INT 5
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: ST_TO_ADDR
25146: GO 26039
25148: LD_INT 5
25150: DOUBLE
25151: EQUAL
25152: IFTRUE 25156
25154: GO 25182
25156: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25157: LD_ADDR_VAR 0 3
25161: PUSH
25162: LD_INT 2
25164: PUSH
25165: LD_INT 3
25167: PUSH
25168: LD_INT 4
25170: PUSH
25171: LD_INT 5
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: ST_TO_ADDR
25180: GO 26039
25182: LD_INT 9
25184: DOUBLE
25185: EQUAL
25186: IFTRUE 25190
25188: GO 25216
25190: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25191: LD_ADDR_VAR 0 3
25195: PUSH
25196: LD_INT 2
25198: PUSH
25199: LD_INT 3
25201: PUSH
25202: LD_INT 4
25204: PUSH
25205: LD_INT 5
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: ST_TO_ADDR
25214: GO 26039
25216: LD_INT 7
25218: DOUBLE
25219: EQUAL
25220: IFTRUE 25224
25222: GO 25250
25224: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25225: LD_ADDR_VAR 0 3
25229: PUSH
25230: LD_INT 2
25232: PUSH
25233: LD_INT 3
25235: PUSH
25236: LD_INT 4
25238: PUSH
25239: LD_INT 5
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: ST_TO_ADDR
25248: GO 26039
25250: LD_INT 12
25252: DOUBLE
25253: EQUAL
25254: IFTRUE 25258
25256: GO 25284
25258: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25259: LD_ADDR_VAR 0 3
25263: PUSH
25264: LD_INT 2
25266: PUSH
25267: LD_INT 3
25269: PUSH
25270: LD_INT 4
25272: PUSH
25273: LD_INT 5
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: ST_TO_ADDR
25282: GO 26039
25284: LD_INT 13
25286: DOUBLE
25287: EQUAL
25288: IFTRUE 25292
25290: GO 25318
25292: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25293: LD_ADDR_VAR 0 3
25297: PUSH
25298: LD_INT 2
25300: PUSH
25301: LD_INT 3
25303: PUSH
25304: LD_INT 4
25306: PUSH
25307: LD_INT 5
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: ST_TO_ADDR
25316: GO 26039
25318: LD_INT 14
25320: DOUBLE
25321: EQUAL
25322: IFTRUE 25326
25324: GO 25344
25326: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25327: LD_ADDR_VAR 0 3
25331: PUSH
25332: LD_INT 4
25334: PUSH
25335: LD_INT 5
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: ST_TO_ADDR
25342: GO 26039
25344: LD_INT 6
25346: DOUBLE
25347: EQUAL
25348: IFTRUE 25352
25350: GO 25370
25352: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25353: LD_ADDR_VAR 0 3
25357: PUSH
25358: LD_INT 4
25360: PUSH
25361: LD_INT 5
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: ST_TO_ADDR
25368: GO 26039
25370: LD_INT 10
25372: DOUBLE
25373: EQUAL
25374: IFTRUE 25378
25376: GO 25396
25378: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25379: LD_ADDR_VAR 0 3
25383: PUSH
25384: LD_INT 4
25386: PUSH
25387: LD_INT 5
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: ST_TO_ADDR
25394: GO 26039
25396: LD_INT 22
25398: DOUBLE
25399: EQUAL
25400: IFTRUE 25404
25402: GO 25430
25404: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25405: LD_ADDR_VAR 0 3
25409: PUSH
25410: LD_INT 11
25412: PUSH
25413: LD_INT 12
25415: PUSH
25416: LD_INT 13
25418: PUSH
25419: LD_INT 14
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: ST_TO_ADDR
25428: GO 26039
25430: LD_INT 23
25432: DOUBLE
25433: EQUAL
25434: IFTRUE 25438
25436: GO 25464
25438: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25439: LD_ADDR_VAR 0 3
25443: PUSH
25444: LD_INT 11
25446: PUSH
25447: LD_INT 12
25449: PUSH
25450: LD_INT 13
25452: PUSH
25453: LD_INT 14
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: ST_TO_ADDR
25462: GO 26039
25464: LD_INT 24
25466: DOUBLE
25467: EQUAL
25468: IFTRUE 25472
25470: GO 25498
25472: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25473: LD_ADDR_VAR 0 3
25477: PUSH
25478: LD_INT 11
25480: PUSH
25481: LD_INT 12
25483: PUSH
25484: LD_INT 13
25486: PUSH
25487: LD_INT 14
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: ST_TO_ADDR
25496: GO 26039
25498: LD_INT 30
25500: DOUBLE
25501: EQUAL
25502: IFTRUE 25506
25504: GO 25532
25506: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25507: LD_ADDR_VAR 0 3
25511: PUSH
25512: LD_INT 11
25514: PUSH
25515: LD_INT 12
25517: PUSH
25518: LD_INT 13
25520: PUSH
25521: LD_INT 14
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: ST_TO_ADDR
25530: GO 26039
25532: LD_INT 25
25534: DOUBLE
25535: EQUAL
25536: IFTRUE 25540
25538: GO 25558
25540: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25541: LD_ADDR_VAR 0 3
25545: PUSH
25546: LD_INT 13
25548: PUSH
25549: LD_INT 14
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: ST_TO_ADDR
25556: GO 26039
25558: LD_INT 27
25560: DOUBLE
25561: EQUAL
25562: IFTRUE 25566
25564: GO 25584
25566: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25567: LD_ADDR_VAR 0 3
25571: PUSH
25572: LD_INT 13
25574: PUSH
25575: LD_INT 14
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: ST_TO_ADDR
25582: GO 26039
25584: LD_INT 92
25586: DOUBLE
25587: EQUAL
25588: IFTRUE 25592
25590: GO 25618
25592: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25593: LD_ADDR_VAR 0 3
25597: PUSH
25598: LD_INT 11
25600: PUSH
25601: LD_INT 12
25603: PUSH
25604: LD_INT 13
25606: PUSH
25607: LD_INT 14
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: ST_TO_ADDR
25616: GO 26039
25618: LD_INT 28
25620: DOUBLE
25621: EQUAL
25622: IFTRUE 25626
25624: GO 25644
25626: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25627: LD_ADDR_VAR 0 3
25631: PUSH
25632: LD_INT 13
25634: PUSH
25635: LD_INT 14
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: ST_TO_ADDR
25642: GO 26039
25644: LD_INT 29
25646: DOUBLE
25647: EQUAL
25648: IFTRUE 25652
25650: GO 25670
25652: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25653: LD_ADDR_VAR 0 3
25657: PUSH
25658: LD_INT 13
25660: PUSH
25661: LD_INT 14
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: ST_TO_ADDR
25668: GO 26039
25670: LD_INT 31
25672: DOUBLE
25673: EQUAL
25674: IFTRUE 25678
25676: GO 25696
25678: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25679: LD_ADDR_VAR 0 3
25683: PUSH
25684: LD_INT 13
25686: PUSH
25687: LD_INT 14
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: ST_TO_ADDR
25694: GO 26039
25696: LD_INT 26
25698: DOUBLE
25699: EQUAL
25700: IFTRUE 25704
25702: GO 25722
25704: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25705: LD_ADDR_VAR 0 3
25709: PUSH
25710: LD_INT 13
25712: PUSH
25713: LD_INT 14
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: ST_TO_ADDR
25720: GO 26039
25722: LD_INT 42
25724: DOUBLE
25725: EQUAL
25726: IFTRUE 25730
25728: GO 25756
25730: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25731: LD_ADDR_VAR 0 3
25735: PUSH
25736: LD_INT 21
25738: PUSH
25739: LD_INT 22
25741: PUSH
25742: LD_INT 23
25744: PUSH
25745: LD_INT 24
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: ST_TO_ADDR
25754: GO 26039
25756: LD_INT 43
25758: DOUBLE
25759: EQUAL
25760: IFTRUE 25764
25762: GO 25790
25764: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25765: LD_ADDR_VAR 0 3
25769: PUSH
25770: LD_INT 21
25772: PUSH
25773: LD_INT 22
25775: PUSH
25776: LD_INT 23
25778: PUSH
25779: LD_INT 24
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: ST_TO_ADDR
25788: GO 26039
25790: LD_INT 44
25792: DOUBLE
25793: EQUAL
25794: IFTRUE 25798
25796: GO 25824
25798: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25799: LD_ADDR_VAR 0 3
25803: PUSH
25804: LD_INT 21
25806: PUSH
25807: LD_INT 22
25809: PUSH
25810: LD_INT 23
25812: PUSH
25813: LD_INT 24
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: ST_TO_ADDR
25822: GO 26039
25824: LD_INT 45
25826: DOUBLE
25827: EQUAL
25828: IFTRUE 25832
25830: GO 25858
25832: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25833: LD_ADDR_VAR 0 3
25837: PUSH
25838: LD_INT 21
25840: PUSH
25841: LD_INT 22
25843: PUSH
25844: LD_INT 23
25846: PUSH
25847: LD_INT 24
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: ST_TO_ADDR
25856: GO 26039
25858: LD_INT 49
25860: DOUBLE
25861: EQUAL
25862: IFTRUE 25866
25864: GO 25892
25866: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25867: LD_ADDR_VAR 0 3
25871: PUSH
25872: LD_INT 21
25874: PUSH
25875: LD_INT 22
25877: PUSH
25878: LD_INT 23
25880: PUSH
25881: LD_INT 24
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: ST_TO_ADDR
25890: GO 26039
25892: LD_INT 51
25894: DOUBLE
25895: EQUAL
25896: IFTRUE 25900
25898: GO 25926
25900: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25901: LD_ADDR_VAR 0 3
25905: PUSH
25906: LD_INT 21
25908: PUSH
25909: LD_INT 22
25911: PUSH
25912: LD_INT 23
25914: PUSH
25915: LD_INT 24
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: ST_TO_ADDR
25924: GO 26039
25926: LD_INT 52
25928: DOUBLE
25929: EQUAL
25930: IFTRUE 25934
25932: GO 25960
25934: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25935: LD_ADDR_VAR 0 3
25939: PUSH
25940: LD_INT 21
25942: PUSH
25943: LD_INT 22
25945: PUSH
25946: LD_INT 23
25948: PUSH
25949: LD_INT 24
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: ST_TO_ADDR
25958: GO 26039
25960: LD_INT 53
25962: DOUBLE
25963: EQUAL
25964: IFTRUE 25968
25966: GO 25986
25968: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25969: LD_ADDR_VAR 0 3
25973: PUSH
25974: LD_INT 23
25976: PUSH
25977: LD_INT 24
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: ST_TO_ADDR
25984: GO 26039
25986: LD_INT 46
25988: DOUBLE
25989: EQUAL
25990: IFTRUE 25994
25992: GO 26012
25994: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25995: LD_ADDR_VAR 0 3
25999: PUSH
26000: LD_INT 23
26002: PUSH
26003: LD_INT 24
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: ST_TO_ADDR
26010: GO 26039
26012: LD_INT 47
26014: DOUBLE
26015: EQUAL
26016: IFTRUE 26020
26018: GO 26038
26020: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26021: LD_ADDR_VAR 0 3
26025: PUSH
26026: LD_INT 23
26028: PUSH
26029: LD_INT 24
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: ST_TO_ADDR
26036: GO 26039
26038: POP
// result := ( chassis in result ) ;
26039: LD_ADDR_VAR 0 3
26043: PUSH
26044: LD_VAR 0 1
26048: PUSH
26049: LD_VAR 0 3
26053: IN
26054: ST_TO_ADDR
// end ;
26055: LD_VAR 0 3
26059: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26060: LD_INT 0
26062: PPUSH
26063: PPUSH
26064: PPUSH
26065: PPUSH
26066: PPUSH
26067: PPUSH
26068: PPUSH
// result := array ;
26069: LD_ADDR_VAR 0 5
26073: PUSH
26074: LD_VAR 0 1
26078: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26079: LD_VAR 0 1
26083: NOT
26084: PUSH
26085: LD_VAR 0 2
26089: NOT
26090: OR
26091: PUSH
26092: LD_VAR 0 3
26096: NOT
26097: OR
26098: PUSH
26099: LD_VAR 0 2
26103: PUSH
26104: LD_VAR 0 1
26108: GREATER
26109: OR
26110: PUSH
26111: LD_VAR 0 3
26115: PUSH
26116: LD_VAR 0 1
26120: GREATER
26121: OR
26122: IFFALSE 26126
// exit ;
26124: GO 26422
// if direction then
26126: LD_VAR 0 4
26130: IFFALSE 26194
// begin d := 1 ;
26132: LD_ADDR_VAR 0 9
26136: PUSH
26137: LD_INT 1
26139: ST_TO_ADDR
// if i_from > i_to then
26140: LD_VAR 0 2
26144: PUSH
26145: LD_VAR 0 3
26149: GREATER
26150: IFFALSE 26176
// length := ( array - i_from ) + i_to else
26152: LD_ADDR_VAR 0 11
26156: PUSH
26157: LD_VAR 0 1
26161: PUSH
26162: LD_VAR 0 2
26166: MINUS
26167: PUSH
26168: LD_VAR 0 3
26172: PLUS
26173: ST_TO_ADDR
26174: GO 26192
// length := i_to - i_from ;
26176: LD_ADDR_VAR 0 11
26180: PUSH
26181: LD_VAR 0 3
26185: PUSH
26186: LD_VAR 0 2
26190: MINUS
26191: ST_TO_ADDR
// end else
26192: GO 26255
// begin d := - 1 ;
26194: LD_ADDR_VAR 0 9
26198: PUSH
26199: LD_INT 1
26201: NEG
26202: ST_TO_ADDR
// if i_from > i_to then
26203: LD_VAR 0 2
26207: PUSH
26208: LD_VAR 0 3
26212: GREATER
26213: IFFALSE 26233
// length := i_from - i_to else
26215: LD_ADDR_VAR 0 11
26219: PUSH
26220: LD_VAR 0 2
26224: PUSH
26225: LD_VAR 0 3
26229: MINUS
26230: ST_TO_ADDR
26231: GO 26255
// length := ( array - i_to ) + i_from ;
26233: LD_ADDR_VAR 0 11
26237: PUSH
26238: LD_VAR 0 1
26242: PUSH
26243: LD_VAR 0 3
26247: MINUS
26248: PUSH
26249: LD_VAR 0 2
26253: PLUS
26254: ST_TO_ADDR
// end ; if not length then
26255: LD_VAR 0 11
26259: NOT
26260: IFFALSE 26264
// exit ;
26262: GO 26422
// tmp := array ;
26264: LD_ADDR_VAR 0 10
26268: PUSH
26269: LD_VAR 0 1
26273: ST_TO_ADDR
// for i = 1 to length do
26274: LD_ADDR_VAR 0 6
26278: PUSH
26279: DOUBLE
26280: LD_INT 1
26282: DEC
26283: ST_TO_ADDR
26284: LD_VAR 0 11
26288: PUSH
26289: FOR_TO
26290: IFFALSE 26410
// begin for j = 1 to array do
26292: LD_ADDR_VAR 0 7
26296: PUSH
26297: DOUBLE
26298: LD_INT 1
26300: DEC
26301: ST_TO_ADDR
26302: LD_VAR 0 1
26306: PUSH
26307: FOR_TO
26308: IFFALSE 26396
// begin k := j + d ;
26310: LD_ADDR_VAR 0 8
26314: PUSH
26315: LD_VAR 0 7
26319: PUSH
26320: LD_VAR 0 9
26324: PLUS
26325: ST_TO_ADDR
// if k > array then
26326: LD_VAR 0 8
26330: PUSH
26331: LD_VAR 0 1
26335: GREATER
26336: IFFALSE 26346
// k := 1 ;
26338: LD_ADDR_VAR 0 8
26342: PUSH
26343: LD_INT 1
26345: ST_TO_ADDR
// if not k then
26346: LD_VAR 0 8
26350: NOT
26351: IFFALSE 26363
// k := array ;
26353: LD_ADDR_VAR 0 8
26357: PUSH
26358: LD_VAR 0 1
26362: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26363: LD_ADDR_VAR 0 10
26367: PUSH
26368: LD_VAR 0 10
26372: PPUSH
26373: LD_VAR 0 8
26377: PPUSH
26378: LD_VAR 0 1
26382: PUSH
26383: LD_VAR 0 7
26387: ARRAY
26388: PPUSH
26389: CALL_OW 1
26393: ST_TO_ADDR
// end ;
26394: GO 26307
26396: POP
26397: POP
// array := tmp ;
26398: LD_ADDR_VAR 0 1
26402: PUSH
26403: LD_VAR 0 10
26407: ST_TO_ADDR
// end ;
26408: GO 26289
26410: POP
26411: POP
// result := array ;
26412: LD_ADDR_VAR 0 5
26416: PUSH
26417: LD_VAR 0 1
26421: ST_TO_ADDR
// end ;
26422: LD_VAR 0 5
26426: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26427: LD_INT 0
26429: PPUSH
26430: PPUSH
// result := 0 ;
26431: LD_ADDR_VAR 0 3
26435: PUSH
26436: LD_INT 0
26438: ST_TO_ADDR
// if not array or not value in array then
26439: LD_VAR 0 1
26443: NOT
26444: PUSH
26445: LD_VAR 0 2
26449: PUSH
26450: LD_VAR 0 1
26454: IN
26455: NOT
26456: OR
26457: IFFALSE 26461
// exit ;
26459: GO 26515
// for i = 1 to array do
26461: LD_ADDR_VAR 0 4
26465: PUSH
26466: DOUBLE
26467: LD_INT 1
26469: DEC
26470: ST_TO_ADDR
26471: LD_VAR 0 1
26475: PUSH
26476: FOR_TO
26477: IFFALSE 26513
// if value = array [ i ] then
26479: LD_VAR 0 2
26483: PUSH
26484: LD_VAR 0 1
26488: PUSH
26489: LD_VAR 0 4
26493: ARRAY
26494: EQUAL
26495: IFFALSE 26511
// begin result := i ;
26497: LD_ADDR_VAR 0 3
26501: PUSH
26502: LD_VAR 0 4
26506: ST_TO_ADDR
// exit ;
26507: POP
26508: POP
26509: GO 26515
// end ;
26511: GO 26476
26513: POP
26514: POP
// end ;
26515: LD_VAR 0 3
26519: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26520: LD_INT 0
26522: PPUSH
// vc_chassis := chassis ;
26523: LD_ADDR_OWVAR 37
26527: PUSH
26528: LD_VAR 0 1
26532: ST_TO_ADDR
// vc_engine := engine ;
26533: LD_ADDR_OWVAR 39
26537: PUSH
26538: LD_VAR 0 2
26542: ST_TO_ADDR
// vc_control := control ;
26543: LD_ADDR_OWVAR 38
26547: PUSH
26548: LD_VAR 0 3
26552: ST_TO_ADDR
// vc_weapon := weapon ;
26553: LD_ADDR_OWVAR 40
26557: PUSH
26558: LD_VAR 0 4
26562: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26563: LD_ADDR_OWVAR 41
26567: PUSH
26568: LD_VAR 0 5
26572: ST_TO_ADDR
// end ;
26573: LD_VAR 0 6
26577: RET
// export function WantPlant ( unit ) ; var task ; begin
26578: LD_INT 0
26580: PPUSH
26581: PPUSH
// result := false ;
26582: LD_ADDR_VAR 0 2
26586: PUSH
26587: LD_INT 0
26589: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26590: LD_ADDR_VAR 0 3
26594: PUSH
26595: LD_VAR 0 1
26599: PPUSH
26600: CALL_OW 437
26604: ST_TO_ADDR
// if task then
26605: LD_VAR 0 3
26609: IFFALSE 26637
// if task [ 1 ] [ 1 ] = p then
26611: LD_VAR 0 3
26615: PUSH
26616: LD_INT 1
26618: ARRAY
26619: PUSH
26620: LD_INT 1
26622: ARRAY
26623: PUSH
26624: LD_STRING p
26626: EQUAL
26627: IFFALSE 26637
// result := true ;
26629: LD_ADDR_VAR 0 2
26633: PUSH
26634: LD_INT 1
26636: ST_TO_ADDR
// end ;
26637: LD_VAR 0 2
26641: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26642: LD_INT 0
26644: PPUSH
26645: PPUSH
26646: PPUSH
26647: PPUSH
// if pos < 1 then
26648: LD_VAR 0 2
26652: PUSH
26653: LD_INT 1
26655: LESS
26656: IFFALSE 26660
// exit ;
26658: GO 26963
// if pos = 1 then
26660: LD_VAR 0 2
26664: PUSH
26665: LD_INT 1
26667: EQUAL
26668: IFFALSE 26701
// result := Replace ( arr , pos [ 1 ] , value ) else
26670: LD_ADDR_VAR 0 4
26674: PUSH
26675: LD_VAR 0 1
26679: PPUSH
26680: LD_VAR 0 2
26684: PUSH
26685: LD_INT 1
26687: ARRAY
26688: PPUSH
26689: LD_VAR 0 3
26693: PPUSH
26694: CALL_OW 1
26698: ST_TO_ADDR
26699: GO 26963
// begin tmp := arr ;
26701: LD_ADDR_VAR 0 6
26705: PUSH
26706: LD_VAR 0 1
26710: ST_TO_ADDR
// s_arr := [ tmp ] ;
26711: LD_ADDR_VAR 0 7
26715: PUSH
26716: LD_VAR 0 6
26720: PUSH
26721: EMPTY
26722: LIST
26723: ST_TO_ADDR
// for i = 1 to pos - 1 do
26724: LD_ADDR_VAR 0 5
26728: PUSH
26729: DOUBLE
26730: LD_INT 1
26732: DEC
26733: ST_TO_ADDR
26734: LD_VAR 0 2
26738: PUSH
26739: LD_INT 1
26741: MINUS
26742: PUSH
26743: FOR_TO
26744: IFFALSE 26789
// begin tmp := tmp [ pos [ i ] ] ;
26746: LD_ADDR_VAR 0 6
26750: PUSH
26751: LD_VAR 0 6
26755: PUSH
26756: LD_VAR 0 2
26760: PUSH
26761: LD_VAR 0 5
26765: ARRAY
26766: ARRAY
26767: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26768: LD_ADDR_VAR 0 7
26772: PUSH
26773: LD_VAR 0 7
26777: PUSH
26778: LD_VAR 0 6
26782: PUSH
26783: EMPTY
26784: LIST
26785: ADD
26786: ST_TO_ADDR
// end ;
26787: GO 26743
26789: POP
26790: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26791: LD_ADDR_VAR 0 6
26795: PUSH
26796: LD_VAR 0 6
26800: PPUSH
26801: LD_VAR 0 2
26805: PUSH
26806: LD_VAR 0 2
26810: ARRAY
26811: PPUSH
26812: LD_VAR 0 3
26816: PPUSH
26817: CALL_OW 1
26821: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26822: LD_ADDR_VAR 0 7
26826: PUSH
26827: LD_VAR 0 7
26831: PPUSH
26832: LD_VAR 0 7
26836: PPUSH
26837: LD_VAR 0 6
26841: PPUSH
26842: CALL_OW 1
26846: ST_TO_ADDR
// for i = s_arr downto 2 do
26847: LD_ADDR_VAR 0 5
26851: PUSH
26852: DOUBLE
26853: LD_VAR 0 7
26857: INC
26858: ST_TO_ADDR
26859: LD_INT 2
26861: PUSH
26862: FOR_DOWNTO
26863: IFFALSE 26947
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26865: LD_ADDR_VAR 0 6
26869: PUSH
26870: LD_VAR 0 7
26874: PUSH
26875: LD_VAR 0 5
26879: PUSH
26880: LD_INT 1
26882: MINUS
26883: ARRAY
26884: PPUSH
26885: LD_VAR 0 2
26889: PUSH
26890: LD_VAR 0 5
26894: PUSH
26895: LD_INT 1
26897: MINUS
26898: ARRAY
26899: PPUSH
26900: LD_VAR 0 7
26904: PUSH
26905: LD_VAR 0 5
26909: ARRAY
26910: PPUSH
26911: CALL_OW 1
26915: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26916: LD_ADDR_VAR 0 7
26920: PUSH
26921: LD_VAR 0 7
26925: PPUSH
26926: LD_VAR 0 5
26930: PUSH
26931: LD_INT 1
26933: MINUS
26934: PPUSH
26935: LD_VAR 0 6
26939: PPUSH
26940: CALL_OW 1
26944: ST_TO_ADDR
// end ;
26945: GO 26862
26947: POP
26948: POP
// result := s_arr [ 1 ] ;
26949: LD_ADDR_VAR 0 4
26953: PUSH
26954: LD_VAR 0 7
26958: PUSH
26959: LD_INT 1
26961: ARRAY
26962: ST_TO_ADDR
// end ; end ;
26963: LD_VAR 0 4
26967: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26968: LD_INT 0
26970: PPUSH
26971: PPUSH
// if not list then
26972: LD_VAR 0 1
26976: NOT
26977: IFFALSE 26981
// exit ;
26979: GO 27072
// i := list [ pos1 ] ;
26981: LD_ADDR_VAR 0 5
26985: PUSH
26986: LD_VAR 0 1
26990: PUSH
26991: LD_VAR 0 2
26995: ARRAY
26996: ST_TO_ADDR
// if not i then
26997: LD_VAR 0 5
27001: NOT
27002: IFFALSE 27006
// exit ;
27004: GO 27072
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27006: LD_ADDR_VAR 0 1
27010: PUSH
27011: LD_VAR 0 1
27015: PPUSH
27016: LD_VAR 0 2
27020: PPUSH
27021: LD_VAR 0 1
27025: PUSH
27026: LD_VAR 0 3
27030: ARRAY
27031: PPUSH
27032: CALL_OW 1
27036: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27037: LD_ADDR_VAR 0 1
27041: PUSH
27042: LD_VAR 0 1
27046: PPUSH
27047: LD_VAR 0 3
27051: PPUSH
27052: LD_VAR 0 5
27056: PPUSH
27057: CALL_OW 1
27061: ST_TO_ADDR
// result := list ;
27062: LD_ADDR_VAR 0 4
27066: PUSH
27067: LD_VAR 0 1
27071: ST_TO_ADDR
// end ;
27072: LD_VAR 0 4
27076: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27077: LD_INT 0
27079: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27080: LD_ADDR_VAR 0 5
27084: PUSH
27085: LD_VAR 0 1
27089: PPUSH
27090: CALL_OW 250
27094: PPUSH
27095: LD_VAR 0 1
27099: PPUSH
27100: CALL_OW 251
27104: PPUSH
27105: LD_VAR 0 2
27109: PPUSH
27110: LD_VAR 0 3
27114: PPUSH
27115: LD_VAR 0 4
27119: PPUSH
27120: CALL 27130 0 5
27124: ST_TO_ADDR
// end ;
27125: LD_VAR 0 5
27129: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27130: LD_INT 0
27132: PPUSH
27133: PPUSH
27134: PPUSH
27135: PPUSH
// if not list then
27136: LD_VAR 0 3
27140: NOT
27141: IFFALSE 27145
// exit ;
27143: GO 27533
// result := [ ] ;
27145: LD_ADDR_VAR 0 6
27149: PUSH
27150: EMPTY
27151: ST_TO_ADDR
// for i in list do
27152: LD_ADDR_VAR 0 7
27156: PUSH
27157: LD_VAR 0 3
27161: PUSH
27162: FOR_IN
27163: IFFALSE 27365
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27165: LD_ADDR_VAR 0 9
27169: PUSH
27170: LD_VAR 0 7
27174: PPUSH
27175: LD_VAR 0 1
27179: PPUSH
27180: LD_VAR 0 2
27184: PPUSH
27185: CALL_OW 297
27189: ST_TO_ADDR
// if not result then
27190: LD_VAR 0 6
27194: NOT
27195: IFFALSE 27221
// result := [ [ i , tmp ] ] else
27197: LD_ADDR_VAR 0 6
27201: PUSH
27202: LD_VAR 0 7
27206: PUSH
27207: LD_VAR 0 9
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: EMPTY
27217: LIST
27218: ST_TO_ADDR
27219: GO 27363
// begin if result [ result ] [ 2 ] < tmp then
27221: LD_VAR 0 6
27225: PUSH
27226: LD_VAR 0 6
27230: ARRAY
27231: PUSH
27232: LD_INT 2
27234: ARRAY
27235: PUSH
27236: LD_VAR 0 9
27240: LESS
27241: IFFALSE 27283
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27243: LD_ADDR_VAR 0 6
27247: PUSH
27248: LD_VAR 0 6
27252: PPUSH
27253: LD_VAR 0 6
27257: PUSH
27258: LD_INT 1
27260: PLUS
27261: PPUSH
27262: LD_VAR 0 7
27266: PUSH
27267: LD_VAR 0 9
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PPUSH
27276: CALL_OW 2
27280: ST_TO_ADDR
27281: GO 27363
// for j = 1 to result do
27283: LD_ADDR_VAR 0 8
27287: PUSH
27288: DOUBLE
27289: LD_INT 1
27291: DEC
27292: ST_TO_ADDR
27293: LD_VAR 0 6
27297: PUSH
27298: FOR_TO
27299: IFFALSE 27361
// begin if tmp < result [ j ] [ 2 ] then
27301: LD_VAR 0 9
27305: PUSH
27306: LD_VAR 0 6
27310: PUSH
27311: LD_VAR 0 8
27315: ARRAY
27316: PUSH
27317: LD_INT 2
27319: ARRAY
27320: LESS
27321: IFFALSE 27359
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27323: LD_ADDR_VAR 0 6
27327: PUSH
27328: LD_VAR 0 6
27332: PPUSH
27333: LD_VAR 0 8
27337: PPUSH
27338: LD_VAR 0 7
27342: PUSH
27343: LD_VAR 0 9
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PPUSH
27352: CALL_OW 2
27356: ST_TO_ADDR
// break ;
27357: GO 27361
// end ; end ;
27359: GO 27298
27361: POP
27362: POP
// end ; end ;
27363: GO 27162
27365: POP
27366: POP
// if result and not asc then
27367: LD_VAR 0 6
27371: PUSH
27372: LD_VAR 0 4
27376: NOT
27377: AND
27378: IFFALSE 27453
// begin tmp := result ;
27380: LD_ADDR_VAR 0 9
27384: PUSH
27385: LD_VAR 0 6
27389: ST_TO_ADDR
// for i = tmp downto 1 do
27390: LD_ADDR_VAR 0 7
27394: PUSH
27395: DOUBLE
27396: LD_VAR 0 9
27400: INC
27401: ST_TO_ADDR
27402: LD_INT 1
27404: PUSH
27405: FOR_DOWNTO
27406: IFFALSE 27451
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27408: LD_ADDR_VAR 0 6
27412: PUSH
27413: LD_VAR 0 6
27417: PPUSH
27418: LD_VAR 0 9
27422: PUSH
27423: LD_VAR 0 7
27427: MINUS
27428: PUSH
27429: LD_INT 1
27431: PLUS
27432: PPUSH
27433: LD_VAR 0 9
27437: PUSH
27438: LD_VAR 0 7
27442: ARRAY
27443: PPUSH
27444: CALL_OW 1
27448: ST_TO_ADDR
27449: GO 27405
27451: POP
27452: POP
// end ; tmp := [ ] ;
27453: LD_ADDR_VAR 0 9
27457: PUSH
27458: EMPTY
27459: ST_TO_ADDR
// if mode then
27460: LD_VAR 0 5
27464: IFFALSE 27533
// begin for i = 1 to result do
27466: LD_ADDR_VAR 0 7
27470: PUSH
27471: DOUBLE
27472: LD_INT 1
27474: DEC
27475: ST_TO_ADDR
27476: LD_VAR 0 6
27480: PUSH
27481: FOR_TO
27482: IFFALSE 27521
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27484: LD_ADDR_VAR 0 9
27488: PUSH
27489: LD_VAR 0 9
27493: PPUSH
27494: LD_VAR 0 7
27498: PPUSH
27499: LD_VAR 0 6
27503: PUSH
27504: LD_VAR 0 7
27508: ARRAY
27509: PUSH
27510: LD_INT 1
27512: ARRAY
27513: PPUSH
27514: CALL_OW 1
27518: ST_TO_ADDR
27519: GO 27481
27521: POP
27522: POP
// result := tmp ;
27523: LD_ADDR_VAR 0 6
27527: PUSH
27528: LD_VAR 0 9
27532: ST_TO_ADDR
// end ; end ;
27533: LD_VAR 0 6
27537: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27538: LD_INT 0
27540: PPUSH
27541: PPUSH
27542: PPUSH
27543: PPUSH
27544: PPUSH
27545: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27546: LD_ADDR_VAR 0 5
27550: PUSH
27551: LD_INT 0
27553: PUSH
27554: LD_INT 0
27556: PUSH
27557: LD_INT 0
27559: PUSH
27560: EMPTY
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: ST_TO_ADDR
// if not x or not y then
27568: LD_VAR 0 2
27572: NOT
27573: PUSH
27574: LD_VAR 0 3
27578: NOT
27579: OR
27580: IFFALSE 27584
// exit ;
27582: GO 29234
// if not range then
27584: LD_VAR 0 4
27588: NOT
27589: IFFALSE 27599
// range := 10 ;
27591: LD_ADDR_VAR 0 4
27595: PUSH
27596: LD_INT 10
27598: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27599: LD_ADDR_VAR 0 8
27603: PUSH
27604: LD_INT 81
27606: PUSH
27607: LD_VAR 0 1
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 92
27618: PUSH
27619: LD_VAR 0 2
27623: PUSH
27624: LD_VAR 0 3
27628: PUSH
27629: LD_VAR 0 4
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 3
27642: PUSH
27643: LD_INT 21
27645: PUSH
27646: LD_INT 3
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: LIST
27661: PPUSH
27662: CALL_OW 69
27666: ST_TO_ADDR
// if not tmp then
27667: LD_VAR 0 8
27671: NOT
27672: IFFALSE 27676
// exit ;
27674: GO 29234
// for i in tmp do
27676: LD_ADDR_VAR 0 6
27680: PUSH
27681: LD_VAR 0 8
27685: PUSH
27686: FOR_IN
27687: IFFALSE 29209
// begin points := [ 0 , 0 , 0 ] ;
27689: LD_ADDR_VAR 0 9
27693: PUSH
27694: LD_INT 0
27696: PUSH
27697: LD_INT 0
27699: PUSH
27700: LD_INT 0
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: LIST
27707: ST_TO_ADDR
// bpoints := 1 ;
27708: LD_ADDR_VAR 0 10
27712: PUSH
27713: LD_INT 1
27715: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27716: LD_VAR 0 6
27720: PPUSH
27721: CALL_OW 247
27725: PUSH
27726: LD_INT 1
27728: DOUBLE
27729: EQUAL
27730: IFTRUE 27734
27732: GO 28312
27734: POP
// begin if GetClass ( i ) = 1 then
27735: LD_VAR 0 6
27739: PPUSH
27740: CALL_OW 257
27744: PUSH
27745: LD_INT 1
27747: EQUAL
27748: IFFALSE 27769
// points := [ 10 , 5 , 3 ] ;
27750: LD_ADDR_VAR 0 9
27754: PUSH
27755: LD_INT 10
27757: PUSH
27758: LD_INT 5
27760: PUSH
27761: LD_INT 3
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: LIST
27768: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27769: LD_VAR 0 6
27773: PPUSH
27774: CALL_OW 257
27778: PUSH
27779: LD_INT 2
27781: PUSH
27782: LD_INT 3
27784: PUSH
27785: LD_INT 4
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: LIST
27792: IN
27793: IFFALSE 27814
// points := [ 3 , 2 , 1 ] ;
27795: LD_ADDR_VAR 0 9
27799: PUSH
27800: LD_INT 3
27802: PUSH
27803: LD_INT 2
27805: PUSH
27806: LD_INT 1
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: LIST
27813: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27814: LD_VAR 0 6
27818: PPUSH
27819: CALL_OW 257
27823: PUSH
27824: LD_INT 5
27826: EQUAL
27827: IFFALSE 27848
// points := [ 130 , 5 , 2 ] ;
27829: LD_ADDR_VAR 0 9
27833: PUSH
27834: LD_INT 130
27836: PUSH
27837: LD_INT 5
27839: PUSH
27840: LD_INT 2
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: LIST
27847: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27848: LD_VAR 0 6
27852: PPUSH
27853: CALL_OW 257
27857: PUSH
27858: LD_INT 8
27860: EQUAL
27861: IFFALSE 27882
// points := [ 35 , 35 , 30 ] ;
27863: LD_ADDR_VAR 0 9
27867: PUSH
27868: LD_INT 35
27870: PUSH
27871: LD_INT 35
27873: PUSH
27874: LD_INT 30
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: LIST
27881: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27882: LD_VAR 0 6
27886: PPUSH
27887: CALL_OW 257
27891: PUSH
27892: LD_INT 9
27894: EQUAL
27895: IFFALSE 27916
// points := [ 20 , 55 , 40 ] ;
27897: LD_ADDR_VAR 0 9
27901: PUSH
27902: LD_INT 20
27904: PUSH
27905: LD_INT 55
27907: PUSH
27908: LD_INT 40
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: LIST
27915: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27916: LD_VAR 0 6
27920: PPUSH
27921: CALL_OW 257
27925: PUSH
27926: LD_INT 12
27928: PUSH
27929: LD_INT 16
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: IN
27936: IFFALSE 27957
// points := [ 5 , 3 , 2 ] ;
27938: LD_ADDR_VAR 0 9
27942: PUSH
27943: LD_INT 5
27945: PUSH
27946: LD_INT 3
27948: PUSH
27949: LD_INT 2
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: LIST
27956: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27957: LD_VAR 0 6
27961: PPUSH
27962: CALL_OW 257
27966: PUSH
27967: LD_INT 17
27969: EQUAL
27970: IFFALSE 27991
// points := [ 100 , 50 , 75 ] ;
27972: LD_ADDR_VAR 0 9
27976: PUSH
27977: LD_INT 100
27979: PUSH
27980: LD_INT 50
27982: PUSH
27983: LD_INT 75
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: LIST
27990: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27991: LD_VAR 0 6
27995: PPUSH
27996: CALL_OW 257
28000: PUSH
28001: LD_INT 15
28003: EQUAL
28004: IFFALSE 28025
// points := [ 10 , 5 , 3 ] ;
28006: LD_ADDR_VAR 0 9
28010: PUSH
28011: LD_INT 10
28013: PUSH
28014: LD_INT 5
28016: PUSH
28017: LD_INT 3
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: LIST
28024: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28025: LD_VAR 0 6
28029: PPUSH
28030: CALL_OW 257
28034: PUSH
28035: LD_INT 14
28037: EQUAL
28038: IFFALSE 28059
// points := [ 10 , 0 , 0 ] ;
28040: LD_ADDR_VAR 0 9
28044: PUSH
28045: LD_INT 10
28047: PUSH
28048: LD_INT 0
28050: PUSH
28051: LD_INT 0
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: LIST
28058: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28059: LD_VAR 0 6
28063: PPUSH
28064: CALL_OW 257
28068: PUSH
28069: LD_INT 11
28071: EQUAL
28072: IFFALSE 28093
// points := [ 30 , 10 , 5 ] ;
28074: LD_ADDR_VAR 0 9
28078: PUSH
28079: LD_INT 30
28081: PUSH
28082: LD_INT 10
28084: PUSH
28085: LD_INT 5
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: LIST
28092: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28093: LD_VAR 0 1
28097: PPUSH
28098: LD_INT 5
28100: PPUSH
28101: CALL_OW 321
28105: PUSH
28106: LD_INT 2
28108: EQUAL
28109: IFFALSE 28126
// bpoints := bpoints * 1.8 ;
28111: LD_ADDR_VAR 0 10
28115: PUSH
28116: LD_VAR 0 10
28120: PUSH
28121: LD_REAL  1.80000000000000E+0000
28124: MUL
28125: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28126: LD_VAR 0 6
28130: PPUSH
28131: CALL_OW 257
28135: PUSH
28136: LD_INT 1
28138: PUSH
28139: LD_INT 2
28141: PUSH
28142: LD_INT 3
28144: PUSH
28145: LD_INT 4
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: IN
28154: PUSH
28155: LD_VAR 0 1
28159: PPUSH
28160: LD_INT 51
28162: PPUSH
28163: CALL_OW 321
28167: PUSH
28168: LD_INT 2
28170: EQUAL
28171: AND
28172: IFFALSE 28189
// bpoints := bpoints * 1.2 ;
28174: LD_ADDR_VAR 0 10
28178: PUSH
28179: LD_VAR 0 10
28183: PUSH
28184: LD_REAL  1.20000000000000E+0000
28187: MUL
28188: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28189: LD_VAR 0 6
28193: PPUSH
28194: CALL_OW 257
28198: PUSH
28199: LD_INT 5
28201: PUSH
28202: LD_INT 7
28204: PUSH
28205: LD_INT 9
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: LIST
28212: IN
28213: PUSH
28214: LD_VAR 0 1
28218: PPUSH
28219: LD_INT 52
28221: PPUSH
28222: CALL_OW 321
28226: PUSH
28227: LD_INT 2
28229: EQUAL
28230: AND
28231: IFFALSE 28248
// bpoints := bpoints * 1.5 ;
28233: LD_ADDR_VAR 0 10
28237: PUSH
28238: LD_VAR 0 10
28242: PUSH
28243: LD_REAL  1.50000000000000E+0000
28246: MUL
28247: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28248: LD_VAR 0 1
28252: PPUSH
28253: LD_INT 66
28255: PPUSH
28256: CALL_OW 321
28260: PUSH
28261: LD_INT 2
28263: EQUAL
28264: IFFALSE 28281
// bpoints := bpoints * 1.1 ;
28266: LD_ADDR_VAR 0 10
28270: PUSH
28271: LD_VAR 0 10
28275: PUSH
28276: LD_REAL  1.10000000000000E+0000
28279: MUL
28280: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28281: LD_ADDR_VAR 0 10
28285: PUSH
28286: LD_VAR 0 10
28290: PUSH
28291: LD_VAR 0 6
28295: PPUSH
28296: LD_INT 1
28298: PPUSH
28299: CALL_OW 259
28303: PUSH
28304: LD_REAL  1.15000000000000E+0000
28307: MUL
28308: MUL
28309: ST_TO_ADDR
// end ; unit_vehicle :
28310: GO 29138
28312: LD_INT 2
28314: DOUBLE
28315: EQUAL
28316: IFTRUE 28320
28318: GO 29126
28320: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28321: LD_VAR 0 6
28325: PPUSH
28326: CALL_OW 264
28330: PUSH
28331: LD_INT 2
28333: PUSH
28334: LD_INT 42
28336: PUSH
28337: LD_INT 24
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: LIST
28344: IN
28345: IFFALSE 28366
// points := [ 25 , 5 , 3 ] ;
28347: LD_ADDR_VAR 0 9
28351: PUSH
28352: LD_INT 25
28354: PUSH
28355: LD_INT 5
28357: PUSH
28358: LD_INT 3
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: LIST
28365: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28366: LD_VAR 0 6
28370: PPUSH
28371: CALL_OW 264
28375: PUSH
28376: LD_INT 4
28378: PUSH
28379: LD_INT 43
28381: PUSH
28382: LD_INT 25
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: LIST
28389: IN
28390: IFFALSE 28411
// points := [ 40 , 15 , 5 ] ;
28392: LD_ADDR_VAR 0 9
28396: PUSH
28397: LD_INT 40
28399: PUSH
28400: LD_INT 15
28402: PUSH
28403: LD_INT 5
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: LIST
28410: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28411: LD_VAR 0 6
28415: PPUSH
28416: CALL_OW 264
28420: PUSH
28421: LD_INT 3
28423: PUSH
28424: LD_INT 23
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: IN
28431: IFFALSE 28452
// points := [ 7 , 25 , 8 ] ;
28433: LD_ADDR_VAR 0 9
28437: PUSH
28438: LD_INT 7
28440: PUSH
28441: LD_INT 25
28443: PUSH
28444: LD_INT 8
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: LIST
28451: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28452: LD_VAR 0 6
28456: PPUSH
28457: CALL_OW 264
28461: PUSH
28462: LD_INT 5
28464: PUSH
28465: LD_INT 27
28467: PUSH
28468: LD_INT 44
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: LIST
28475: IN
28476: IFFALSE 28497
// points := [ 14 , 50 , 16 ] ;
28478: LD_ADDR_VAR 0 9
28482: PUSH
28483: LD_INT 14
28485: PUSH
28486: LD_INT 50
28488: PUSH
28489: LD_INT 16
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: LIST
28496: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28497: LD_VAR 0 6
28501: PPUSH
28502: CALL_OW 264
28506: PUSH
28507: LD_INT 6
28509: PUSH
28510: LD_INT 46
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: IN
28517: IFFALSE 28538
// points := [ 32 , 120 , 70 ] ;
28519: LD_ADDR_VAR 0 9
28523: PUSH
28524: LD_INT 32
28526: PUSH
28527: LD_INT 120
28529: PUSH
28530: LD_INT 70
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: LIST
28537: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28538: LD_VAR 0 6
28542: PPUSH
28543: CALL_OW 264
28547: PUSH
28548: LD_INT 7
28550: PUSH
28551: LD_INT 28
28553: PUSH
28554: LD_INT 45
28556: PUSH
28557: LD_INT 92
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: IN
28566: IFFALSE 28587
// points := [ 35 , 20 , 45 ] ;
28568: LD_ADDR_VAR 0 9
28572: PUSH
28573: LD_INT 35
28575: PUSH
28576: LD_INT 20
28578: PUSH
28579: LD_INT 45
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: LIST
28586: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28587: LD_VAR 0 6
28591: PPUSH
28592: CALL_OW 264
28596: PUSH
28597: LD_INT 47
28599: PUSH
28600: EMPTY
28601: LIST
28602: IN
28603: IFFALSE 28624
// points := [ 67 , 45 , 75 ] ;
28605: LD_ADDR_VAR 0 9
28609: PUSH
28610: LD_INT 67
28612: PUSH
28613: LD_INT 45
28615: PUSH
28616: LD_INT 75
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: LIST
28623: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28624: LD_VAR 0 6
28628: PPUSH
28629: CALL_OW 264
28633: PUSH
28634: LD_INT 26
28636: PUSH
28637: EMPTY
28638: LIST
28639: IN
28640: IFFALSE 28661
// points := [ 120 , 30 , 80 ] ;
28642: LD_ADDR_VAR 0 9
28646: PUSH
28647: LD_INT 120
28649: PUSH
28650: LD_INT 30
28652: PUSH
28653: LD_INT 80
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: LIST
28660: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28661: LD_VAR 0 6
28665: PPUSH
28666: CALL_OW 264
28670: PUSH
28671: LD_INT 22
28673: PUSH
28674: EMPTY
28675: LIST
28676: IN
28677: IFFALSE 28698
// points := [ 40 , 1 , 1 ] ;
28679: LD_ADDR_VAR 0 9
28683: PUSH
28684: LD_INT 40
28686: PUSH
28687: LD_INT 1
28689: PUSH
28690: LD_INT 1
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: LIST
28697: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28698: LD_VAR 0 6
28702: PPUSH
28703: CALL_OW 264
28707: PUSH
28708: LD_INT 29
28710: PUSH
28711: EMPTY
28712: LIST
28713: IN
28714: IFFALSE 28735
// points := [ 70 , 200 , 400 ] ;
28716: LD_ADDR_VAR 0 9
28720: PUSH
28721: LD_INT 70
28723: PUSH
28724: LD_INT 200
28726: PUSH
28727: LD_INT 400
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: LIST
28734: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28735: LD_VAR 0 6
28739: PPUSH
28740: CALL_OW 264
28744: PUSH
28745: LD_INT 14
28747: PUSH
28748: LD_INT 53
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: IN
28755: IFFALSE 28776
// points := [ 40 , 10 , 20 ] ;
28757: LD_ADDR_VAR 0 9
28761: PUSH
28762: LD_INT 40
28764: PUSH
28765: LD_INT 10
28767: PUSH
28768: LD_INT 20
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: LIST
28775: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28776: LD_VAR 0 6
28780: PPUSH
28781: CALL_OW 264
28785: PUSH
28786: LD_INT 9
28788: PUSH
28789: EMPTY
28790: LIST
28791: IN
28792: IFFALSE 28813
// points := [ 5 , 70 , 20 ] ;
28794: LD_ADDR_VAR 0 9
28798: PUSH
28799: LD_INT 5
28801: PUSH
28802: LD_INT 70
28804: PUSH
28805: LD_INT 20
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: LIST
28812: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28813: LD_VAR 0 6
28817: PPUSH
28818: CALL_OW 264
28822: PUSH
28823: LD_INT 10
28825: PUSH
28826: EMPTY
28827: LIST
28828: IN
28829: IFFALSE 28850
// points := [ 35 , 110 , 70 ] ;
28831: LD_ADDR_VAR 0 9
28835: PUSH
28836: LD_INT 35
28838: PUSH
28839: LD_INT 110
28841: PUSH
28842: LD_INT 70
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: LIST
28849: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28850: LD_VAR 0 6
28854: PPUSH
28855: CALL_OW 265
28859: PUSH
28860: LD_INT 25
28862: EQUAL
28863: IFFALSE 28884
// points := [ 80 , 65 , 100 ] ;
28865: LD_ADDR_VAR 0 9
28869: PUSH
28870: LD_INT 80
28872: PUSH
28873: LD_INT 65
28875: PUSH
28876: LD_INT 100
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: LIST
28883: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28884: LD_VAR 0 6
28888: PPUSH
28889: CALL_OW 263
28893: PUSH
28894: LD_INT 1
28896: EQUAL
28897: IFFALSE 28932
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28899: LD_ADDR_VAR 0 10
28903: PUSH
28904: LD_VAR 0 10
28908: PUSH
28909: LD_VAR 0 6
28913: PPUSH
28914: CALL_OW 311
28918: PPUSH
28919: LD_INT 3
28921: PPUSH
28922: CALL_OW 259
28926: PUSH
28927: LD_INT 4
28929: MUL
28930: MUL
28931: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28932: LD_VAR 0 6
28936: PPUSH
28937: CALL_OW 263
28941: PUSH
28942: LD_INT 2
28944: EQUAL
28945: IFFALSE 28996
// begin j := IsControledBy ( i ) ;
28947: LD_ADDR_VAR 0 7
28951: PUSH
28952: LD_VAR 0 6
28956: PPUSH
28957: CALL_OW 312
28961: ST_TO_ADDR
// if j then
28962: LD_VAR 0 7
28966: IFFALSE 28996
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28968: LD_ADDR_VAR 0 10
28972: PUSH
28973: LD_VAR 0 10
28977: PUSH
28978: LD_VAR 0 7
28982: PPUSH
28983: LD_INT 3
28985: PPUSH
28986: CALL_OW 259
28990: PUSH
28991: LD_INT 3
28993: MUL
28994: MUL
28995: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28996: LD_VAR 0 6
29000: PPUSH
29001: CALL_OW 264
29005: PUSH
29006: LD_INT 5
29008: PUSH
29009: LD_INT 6
29011: PUSH
29012: LD_INT 46
29014: PUSH
29015: LD_INT 44
29017: PUSH
29018: LD_INT 47
29020: PUSH
29021: LD_INT 45
29023: PUSH
29024: LD_INT 28
29026: PUSH
29027: LD_INT 7
29029: PUSH
29030: LD_INT 27
29032: PUSH
29033: LD_INT 29
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: IN
29048: PUSH
29049: LD_VAR 0 1
29053: PPUSH
29054: LD_INT 52
29056: PPUSH
29057: CALL_OW 321
29061: PUSH
29062: LD_INT 2
29064: EQUAL
29065: AND
29066: IFFALSE 29083
// bpoints := bpoints * 1.2 ;
29068: LD_ADDR_VAR 0 10
29072: PUSH
29073: LD_VAR 0 10
29077: PUSH
29078: LD_REAL  1.20000000000000E+0000
29081: MUL
29082: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29083: LD_VAR 0 6
29087: PPUSH
29088: CALL_OW 264
29092: PUSH
29093: LD_INT 6
29095: PUSH
29096: LD_INT 46
29098: PUSH
29099: LD_INT 47
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: LIST
29106: IN
29107: IFFALSE 29124
// bpoints := bpoints * 1.2 ;
29109: LD_ADDR_VAR 0 10
29113: PUSH
29114: LD_VAR 0 10
29118: PUSH
29119: LD_REAL  1.20000000000000E+0000
29122: MUL
29123: ST_TO_ADDR
// end ; unit_building :
29124: GO 29138
29126: LD_INT 3
29128: DOUBLE
29129: EQUAL
29130: IFTRUE 29134
29132: GO 29137
29134: POP
// ; end ;
29135: GO 29138
29137: POP
// for j = 1 to 3 do
29138: LD_ADDR_VAR 0 7
29142: PUSH
29143: DOUBLE
29144: LD_INT 1
29146: DEC
29147: ST_TO_ADDR
29148: LD_INT 3
29150: PUSH
29151: FOR_TO
29152: IFFALSE 29205
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29154: LD_ADDR_VAR 0 5
29158: PUSH
29159: LD_VAR 0 5
29163: PPUSH
29164: LD_VAR 0 7
29168: PPUSH
29169: LD_VAR 0 5
29173: PUSH
29174: LD_VAR 0 7
29178: ARRAY
29179: PUSH
29180: LD_VAR 0 9
29184: PUSH
29185: LD_VAR 0 7
29189: ARRAY
29190: PUSH
29191: LD_VAR 0 10
29195: MUL
29196: PLUS
29197: PPUSH
29198: CALL_OW 1
29202: ST_TO_ADDR
29203: GO 29151
29205: POP
29206: POP
// end ;
29207: GO 27686
29209: POP
29210: POP
// result := Replace ( result , 4 , tmp ) ;
29211: LD_ADDR_VAR 0 5
29215: PUSH
29216: LD_VAR 0 5
29220: PPUSH
29221: LD_INT 4
29223: PPUSH
29224: LD_VAR 0 8
29228: PPUSH
29229: CALL_OW 1
29233: ST_TO_ADDR
// end ;
29234: LD_VAR 0 5
29238: RET
// export function DangerAtRange ( unit , range ) ; begin
29239: LD_INT 0
29241: PPUSH
// if not unit then
29242: LD_VAR 0 1
29246: NOT
29247: IFFALSE 29251
// exit ;
29249: GO 29296
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29251: LD_ADDR_VAR 0 3
29255: PUSH
29256: LD_VAR 0 1
29260: PPUSH
29261: CALL_OW 255
29265: PPUSH
29266: LD_VAR 0 1
29270: PPUSH
29271: CALL_OW 250
29275: PPUSH
29276: LD_VAR 0 1
29280: PPUSH
29281: CALL_OW 251
29285: PPUSH
29286: LD_VAR 0 2
29290: PPUSH
29291: CALL 27538 0 4
29295: ST_TO_ADDR
// end ;
29296: LD_VAR 0 3
29300: RET
// export function DangerInArea ( side , area ) ; begin
29301: LD_INT 0
29303: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29304: LD_ADDR_VAR 0 3
29308: PUSH
29309: LD_VAR 0 2
29313: PPUSH
29314: LD_INT 81
29316: PUSH
29317: LD_VAR 0 1
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PPUSH
29326: CALL_OW 70
29330: ST_TO_ADDR
// end ;
29331: LD_VAR 0 3
29335: RET
// export function IsExtension ( b ) ; begin
29336: LD_INT 0
29338: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29339: LD_ADDR_VAR 0 2
29343: PUSH
29344: LD_VAR 0 1
29348: PUSH
29349: LD_INT 23
29351: PUSH
29352: LD_INT 20
29354: PUSH
29355: LD_INT 22
29357: PUSH
29358: LD_INT 17
29360: PUSH
29361: LD_INT 24
29363: PUSH
29364: LD_INT 21
29366: PUSH
29367: LD_INT 19
29369: PUSH
29370: LD_INT 16
29372: PUSH
29373: LD_INT 25
29375: PUSH
29376: LD_INT 18
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: IN
29391: ST_TO_ADDR
// end ;
29392: LD_VAR 0 2
29396: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29397: LD_INT 0
29399: PPUSH
29400: PPUSH
29401: PPUSH
// result := [ ] ;
29402: LD_ADDR_VAR 0 4
29406: PUSH
29407: EMPTY
29408: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29409: LD_ADDR_VAR 0 5
29413: PUSH
29414: LD_VAR 0 2
29418: PPUSH
29419: LD_INT 21
29421: PUSH
29422: LD_INT 3
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PPUSH
29429: CALL_OW 70
29433: ST_TO_ADDR
// if not tmp then
29434: LD_VAR 0 5
29438: NOT
29439: IFFALSE 29443
// exit ;
29441: GO 29507
// if checkLink then
29443: LD_VAR 0 3
29447: IFFALSE 29497
// begin for i in tmp do
29449: LD_ADDR_VAR 0 6
29453: PUSH
29454: LD_VAR 0 5
29458: PUSH
29459: FOR_IN
29460: IFFALSE 29495
// if GetBase ( i ) <> base then
29462: LD_VAR 0 6
29466: PPUSH
29467: CALL_OW 274
29471: PUSH
29472: LD_VAR 0 1
29476: NONEQUAL
29477: IFFALSE 29493
// ComLinkToBase ( base , i ) ;
29479: LD_VAR 0 1
29483: PPUSH
29484: LD_VAR 0 6
29488: PPUSH
29489: CALL_OW 169
29493: GO 29459
29495: POP
29496: POP
// end ; result := tmp ;
29497: LD_ADDR_VAR 0 4
29501: PUSH
29502: LD_VAR 0 5
29506: ST_TO_ADDR
// end ;
29507: LD_VAR 0 4
29511: RET
// export function ComComplete ( units , b ) ; var i ; begin
29512: LD_INT 0
29514: PPUSH
29515: PPUSH
// if not units then
29516: LD_VAR 0 1
29520: NOT
29521: IFFALSE 29525
// exit ;
29523: GO 29615
// for i in units do
29525: LD_ADDR_VAR 0 4
29529: PUSH
29530: LD_VAR 0 1
29534: PUSH
29535: FOR_IN
29536: IFFALSE 29613
// if BuildingStatus ( b ) = bs_build then
29538: LD_VAR 0 2
29542: PPUSH
29543: CALL_OW 461
29547: PUSH
29548: LD_INT 1
29550: EQUAL
29551: IFFALSE 29611
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29553: LD_VAR 0 4
29557: PPUSH
29558: LD_STRING h
29560: PUSH
29561: LD_VAR 0 2
29565: PPUSH
29566: CALL_OW 250
29570: PUSH
29571: LD_VAR 0 2
29575: PPUSH
29576: CALL_OW 251
29580: PUSH
29581: LD_VAR 0 2
29585: PUSH
29586: LD_INT 0
29588: PUSH
29589: LD_INT 0
29591: PUSH
29592: LD_INT 0
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: PUSH
29604: EMPTY
29605: LIST
29606: PPUSH
29607: CALL_OW 446
29611: GO 29535
29613: POP
29614: POP
// end ;
29615: LD_VAR 0 3
29619: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29620: LD_INT 0
29622: PPUSH
29623: PPUSH
29624: PPUSH
29625: PPUSH
29626: PPUSH
29627: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29628: LD_VAR 0 1
29632: NOT
29633: PUSH
29634: LD_VAR 0 1
29638: PPUSH
29639: CALL_OW 263
29643: PUSH
29644: LD_INT 2
29646: NONEQUAL
29647: OR
29648: IFFALSE 29652
// exit ;
29650: GO 29968
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29652: LD_ADDR_VAR 0 6
29656: PUSH
29657: LD_INT 22
29659: PUSH
29660: LD_VAR 0 1
29664: PPUSH
29665: CALL_OW 255
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 2
29676: PUSH
29677: LD_INT 30
29679: PUSH
29680: LD_INT 36
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 34
29689: PUSH
29690: LD_INT 31
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: LIST
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PPUSH
29706: CALL_OW 69
29710: ST_TO_ADDR
// if not tmp then
29711: LD_VAR 0 6
29715: NOT
29716: IFFALSE 29720
// exit ;
29718: GO 29968
// result := [ ] ;
29720: LD_ADDR_VAR 0 2
29724: PUSH
29725: EMPTY
29726: ST_TO_ADDR
// for i in tmp do
29727: LD_ADDR_VAR 0 3
29731: PUSH
29732: LD_VAR 0 6
29736: PUSH
29737: FOR_IN
29738: IFFALSE 29809
// begin t := UnitsInside ( i ) ;
29740: LD_ADDR_VAR 0 4
29744: PUSH
29745: LD_VAR 0 3
29749: PPUSH
29750: CALL_OW 313
29754: ST_TO_ADDR
// if t then
29755: LD_VAR 0 4
29759: IFFALSE 29807
// for j in t do
29761: LD_ADDR_VAR 0 7
29765: PUSH
29766: LD_VAR 0 4
29770: PUSH
29771: FOR_IN
29772: IFFALSE 29805
// result := Replace ( result , result + 1 , j ) ;
29774: LD_ADDR_VAR 0 2
29778: PUSH
29779: LD_VAR 0 2
29783: PPUSH
29784: LD_VAR 0 2
29788: PUSH
29789: LD_INT 1
29791: PLUS
29792: PPUSH
29793: LD_VAR 0 7
29797: PPUSH
29798: CALL_OW 1
29802: ST_TO_ADDR
29803: GO 29771
29805: POP
29806: POP
// end ;
29807: GO 29737
29809: POP
29810: POP
// if not result then
29811: LD_VAR 0 2
29815: NOT
29816: IFFALSE 29820
// exit ;
29818: GO 29968
// mech := result [ 1 ] ;
29820: LD_ADDR_VAR 0 5
29824: PUSH
29825: LD_VAR 0 2
29829: PUSH
29830: LD_INT 1
29832: ARRAY
29833: ST_TO_ADDR
// if result > 1 then
29834: LD_VAR 0 2
29838: PUSH
29839: LD_INT 1
29841: GREATER
29842: IFFALSE 29954
// begin for i = 2 to result do
29844: LD_ADDR_VAR 0 3
29848: PUSH
29849: DOUBLE
29850: LD_INT 2
29852: DEC
29853: ST_TO_ADDR
29854: LD_VAR 0 2
29858: PUSH
29859: FOR_TO
29860: IFFALSE 29952
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29862: LD_ADDR_VAR 0 4
29866: PUSH
29867: LD_VAR 0 2
29871: PUSH
29872: LD_VAR 0 3
29876: ARRAY
29877: PPUSH
29878: LD_INT 3
29880: PPUSH
29881: CALL_OW 259
29885: PUSH
29886: LD_VAR 0 2
29890: PUSH
29891: LD_VAR 0 3
29895: ARRAY
29896: PPUSH
29897: CALL_OW 432
29901: MINUS
29902: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29903: LD_VAR 0 4
29907: PUSH
29908: LD_VAR 0 5
29912: PPUSH
29913: LD_INT 3
29915: PPUSH
29916: CALL_OW 259
29920: PUSH
29921: LD_VAR 0 5
29925: PPUSH
29926: CALL_OW 432
29930: MINUS
29931: GREATEREQUAL
29932: IFFALSE 29950
// mech := result [ i ] ;
29934: LD_ADDR_VAR 0 5
29938: PUSH
29939: LD_VAR 0 2
29943: PUSH
29944: LD_VAR 0 3
29948: ARRAY
29949: ST_TO_ADDR
// end ;
29950: GO 29859
29952: POP
29953: POP
// end ; ComLinkTo ( vehicle , mech ) ;
29954: LD_VAR 0 1
29958: PPUSH
29959: LD_VAR 0 5
29963: PPUSH
29964: CALL_OW 135
// end ;
29968: LD_VAR 0 2
29972: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29973: LD_INT 0
29975: PPUSH
29976: PPUSH
29977: PPUSH
29978: PPUSH
29979: PPUSH
29980: PPUSH
29981: PPUSH
29982: PPUSH
29983: PPUSH
29984: PPUSH
29985: PPUSH
29986: PPUSH
29987: PPUSH
// result := [ ] ;
29988: LD_ADDR_VAR 0 7
29992: PUSH
29993: EMPTY
29994: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29995: LD_VAR 0 1
29999: PPUSH
30000: CALL_OW 266
30004: PUSH
30005: LD_INT 0
30007: PUSH
30008: LD_INT 1
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: IN
30015: NOT
30016: IFFALSE 30020
// exit ;
30018: GO 31654
// if name then
30020: LD_VAR 0 3
30024: IFFALSE 30040
// SetBName ( base_dep , name ) ;
30026: LD_VAR 0 1
30030: PPUSH
30031: LD_VAR 0 3
30035: PPUSH
30036: CALL_OW 500
// base := GetBase ( base_dep ) ;
30040: LD_ADDR_VAR 0 15
30044: PUSH
30045: LD_VAR 0 1
30049: PPUSH
30050: CALL_OW 274
30054: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30055: LD_ADDR_VAR 0 16
30059: PUSH
30060: LD_VAR 0 1
30064: PPUSH
30065: CALL_OW 255
30069: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30070: LD_ADDR_VAR 0 17
30074: PUSH
30075: LD_VAR 0 1
30079: PPUSH
30080: CALL_OW 248
30084: ST_TO_ADDR
// if sources then
30085: LD_VAR 0 5
30089: IFFALSE 30136
// for i = 1 to 3 do
30091: LD_ADDR_VAR 0 8
30095: PUSH
30096: DOUBLE
30097: LD_INT 1
30099: DEC
30100: ST_TO_ADDR
30101: LD_INT 3
30103: PUSH
30104: FOR_TO
30105: IFFALSE 30134
// AddResourceType ( base , i , sources [ i ] ) ;
30107: LD_VAR 0 15
30111: PPUSH
30112: LD_VAR 0 8
30116: PPUSH
30117: LD_VAR 0 5
30121: PUSH
30122: LD_VAR 0 8
30126: ARRAY
30127: PPUSH
30128: CALL_OW 276
30132: GO 30104
30134: POP
30135: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30136: LD_ADDR_VAR 0 18
30140: PUSH
30141: LD_VAR 0 15
30145: PPUSH
30146: LD_VAR 0 2
30150: PPUSH
30151: LD_INT 1
30153: PPUSH
30154: CALL 29397 0 3
30158: ST_TO_ADDR
// InitHc ;
30159: CALL_OW 19
// InitUc ;
30163: CALL_OW 18
// uc_side := side ;
30167: LD_ADDR_OWVAR 20
30171: PUSH
30172: LD_VAR 0 16
30176: ST_TO_ADDR
// uc_nation := nation ;
30177: LD_ADDR_OWVAR 21
30181: PUSH
30182: LD_VAR 0 17
30186: ST_TO_ADDR
// if buildings then
30187: LD_VAR 0 18
30191: IFFALSE 31513
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30193: LD_ADDR_VAR 0 19
30197: PUSH
30198: LD_VAR 0 18
30202: PPUSH
30203: LD_INT 2
30205: PUSH
30206: LD_INT 30
30208: PUSH
30209: LD_INT 29
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 30
30218: PUSH
30219: LD_INT 30
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: LIST
30230: PPUSH
30231: CALL_OW 72
30235: ST_TO_ADDR
// if tmp then
30236: LD_VAR 0 19
30240: IFFALSE 30288
// for i in tmp do
30242: LD_ADDR_VAR 0 8
30246: PUSH
30247: LD_VAR 0 19
30251: PUSH
30252: FOR_IN
30253: IFFALSE 30286
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30255: LD_VAR 0 8
30259: PPUSH
30260: CALL_OW 250
30264: PPUSH
30265: LD_VAR 0 8
30269: PPUSH
30270: CALL_OW 251
30274: PPUSH
30275: LD_VAR 0 16
30279: PPUSH
30280: CALL_OW 441
30284: GO 30252
30286: POP
30287: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30288: LD_VAR 0 18
30292: PPUSH
30293: LD_INT 2
30295: PUSH
30296: LD_INT 30
30298: PUSH
30299: LD_INT 32
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: LD_INT 30
30308: PUSH
30309: LD_INT 33
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: LIST
30320: PPUSH
30321: CALL_OW 72
30325: IFFALSE 30413
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30327: LD_ADDR_VAR 0 8
30331: PUSH
30332: LD_VAR 0 18
30336: PPUSH
30337: LD_INT 2
30339: PUSH
30340: LD_INT 30
30342: PUSH
30343: LD_INT 32
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 30
30352: PUSH
30353: LD_INT 33
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: LIST
30364: PPUSH
30365: CALL_OW 72
30369: PUSH
30370: FOR_IN
30371: IFFALSE 30411
// begin if not GetBWeapon ( i ) then
30373: LD_VAR 0 8
30377: PPUSH
30378: CALL_OW 269
30382: NOT
30383: IFFALSE 30409
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30385: LD_VAR 0 8
30389: PPUSH
30390: LD_VAR 0 8
30394: PPUSH
30395: LD_VAR 0 2
30399: PPUSH
30400: CALL 31659 0 2
30404: PPUSH
30405: CALL_OW 431
// end ;
30409: GO 30370
30411: POP
30412: POP
// end ; for i = 1 to personel do
30413: LD_ADDR_VAR 0 8
30417: PUSH
30418: DOUBLE
30419: LD_INT 1
30421: DEC
30422: ST_TO_ADDR
30423: LD_VAR 0 6
30427: PUSH
30428: FOR_TO
30429: IFFALSE 31493
// begin if i > 4 then
30431: LD_VAR 0 8
30435: PUSH
30436: LD_INT 4
30438: GREATER
30439: IFFALSE 30443
// break ;
30441: GO 31493
// case i of 1 :
30443: LD_VAR 0 8
30447: PUSH
30448: LD_INT 1
30450: DOUBLE
30451: EQUAL
30452: IFTRUE 30456
30454: GO 30536
30456: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30457: LD_ADDR_VAR 0 12
30461: PUSH
30462: LD_VAR 0 18
30466: PPUSH
30467: LD_INT 22
30469: PUSH
30470: LD_VAR 0 16
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 58
30481: PUSH
30482: EMPTY
30483: LIST
30484: PUSH
30485: LD_INT 2
30487: PUSH
30488: LD_INT 30
30490: PUSH
30491: LD_INT 32
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 30
30500: PUSH
30501: LD_INT 4
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 30
30510: PUSH
30511: LD_INT 5
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: LIST
30528: PPUSH
30529: CALL_OW 72
30533: ST_TO_ADDR
30534: GO 30758
30536: LD_INT 2
30538: DOUBLE
30539: EQUAL
30540: IFTRUE 30544
30542: GO 30606
30544: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30545: LD_ADDR_VAR 0 12
30549: PUSH
30550: LD_VAR 0 18
30554: PPUSH
30555: LD_INT 22
30557: PUSH
30558: LD_VAR 0 16
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 2
30569: PUSH
30570: LD_INT 30
30572: PUSH
30573: LD_INT 0
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 30
30582: PUSH
30583: LD_INT 1
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: LIST
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PPUSH
30599: CALL_OW 72
30603: ST_TO_ADDR
30604: GO 30758
30606: LD_INT 3
30608: DOUBLE
30609: EQUAL
30610: IFTRUE 30614
30612: GO 30676
30614: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30615: LD_ADDR_VAR 0 12
30619: PUSH
30620: LD_VAR 0 18
30624: PPUSH
30625: LD_INT 22
30627: PUSH
30628: LD_VAR 0 16
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 2
30639: PUSH
30640: LD_INT 30
30642: PUSH
30643: LD_INT 2
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 30
30652: PUSH
30653: LD_INT 3
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: LIST
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PPUSH
30669: CALL_OW 72
30673: ST_TO_ADDR
30674: GO 30758
30676: LD_INT 4
30678: DOUBLE
30679: EQUAL
30680: IFTRUE 30684
30682: GO 30757
30684: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30685: LD_ADDR_VAR 0 12
30689: PUSH
30690: LD_VAR 0 18
30694: PPUSH
30695: LD_INT 22
30697: PUSH
30698: LD_VAR 0 16
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 2
30709: PUSH
30710: LD_INT 30
30712: PUSH
30713: LD_INT 6
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 30
30722: PUSH
30723: LD_INT 7
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 30
30732: PUSH
30733: LD_INT 8
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PPUSH
30750: CALL_OW 72
30754: ST_TO_ADDR
30755: GO 30758
30757: POP
// if i = 1 then
30758: LD_VAR 0 8
30762: PUSH
30763: LD_INT 1
30765: EQUAL
30766: IFFALSE 30877
// begin tmp := [ ] ;
30768: LD_ADDR_VAR 0 19
30772: PUSH
30773: EMPTY
30774: ST_TO_ADDR
// for j in f do
30775: LD_ADDR_VAR 0 9
30779: PUSH
30780: LD_VAR 0 12
30784: PUSH
30785: FOR_IN
30786: IFFALSE 30859
// if GetBType ( j ) = b_bunker then
30788: LD_VAR 0 9
30792: PPUSH
30793: CALL_OW 266
30797: PUSH
30798: LD_INT 32
30800: EQUAL
30801: IFFALSE 30828
// tmp := Insert ( tmp , 1 , j ) else
30803: LD_ADDR_VAR 0 19
30807: PUSH
30808: LD_VAR 0 19
30812: PPUSH
30813: LD_INT 1
30815: PPUSH
30816: LD_VAR 0 9
30820: PPUSH
30821: CALL_OW 2
30825: ST_TO_ADDR
30826: GO 30857
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30828: LD_ADDR_VAR 0 19
30832: PUSH
30833: LD_VAR 0 19
30837: PPUSH
30838: LD_VAR 0 19
30842: PUSH
30843: LD_INT 1
30845: PLUS
30846: PPUSH
30847: LD_VAR 0 9
30851: PPUSH
30852: CALL_OW 2
30856: ST_TO_ADDR
30857: GO 30785
30859: POP
30860: POP
// if tmp then
30861: LD_VAR 0 19
30865: IFFALSE 30877
// f := tmp ;
30867: LD_ADDR_VAR 0 12
30871: PUSH
30872: LD_VAR 0 19
30876: ST_TO_ADDR
// end ; x := personel [ i ] ;
30877: LD_ADDR_VAR 0 13
30881: PUSH
30882: LD_VAR 0 6
30886: PUSH
30887: LD_VAR 0 8
30891: ARRAY
30892: ST_TO_ADDR
// if x = - 1 then
30893: LD_VAR 0 13
30897: PUSH
30898: LD_INT 1
30900: NEG
30901: EQUAL
30902: IFFALSE 31111
// begin for j in f do
30904: LD_ADDR_VAR 0 9
30908: PUSH
30909: LD_VAR 0 12
30913: PUSH
30914: FOR_IN
30915: IFFALSE 31107
// repeat InitHc ;
30917: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30921: LD_VAR 0 9
30925: PPUSH
30926: CALL_OW 266
30930: PUSH
30931: LD_INT 5
30933: EQUAL
30934: IFFALSE 31004
// begin if UnitsInside ( j ) < 3 then
30936: LD_VAR 0 9
30940: PPUSH
30941: CALL_OW 313
30945: PUSH
30946: LD_INT 3
30948: LESS
30949: IFFALSE 30985
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30951: LD_INT 0
30953: PPUSH
30954: LD_INT 5
30956: PUSH
30957: LD_INT 8
30959: PUSH
30960: LD_INT 9
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: LIST
30967: PUSH
30968: LD_VAR 0 17
30972: ARRAY
30973: PPUSH
30974: LD_VAR 0 4
30978: PPUSH
30979: CALL_OW 380
30983: GO 31002
// PrepareHuman ( false , i , skill ) ;
30985: LD_INT 0
30987: PPUSH
30988: LD_VAR 0 8
30992: PPUSH
30993: LD_VAR 0 4
30997: PPUSH
30998: CALL_OW 380
// end else
31002: GO 31021
// PrepareHuman ( false , i , skill ) ;
31004: LD_INT 0
31006: PPUSH
31007: LD_VAR 0 8
31011: PPUSH
31012: LD_VAR 0 4
31016: PPUSH
31017: CALL_OW 380
// un := CreateHuman ;
31021: LD_ADDR_VAR 0 14
31025: PUSH
31026: CALL_OW 44
31030: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31031: LD_ADDR_VAR 0 7
31035: PUSH
31036: LD_VAR 0 7
31040: PPUSH
31041: LD_INT 1
31043: PPUSH
31044: LD_VAR 0 14
31048: PPUSH
31049: CALL_OW 2
31053: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31054: LD_VAR 0 14
31058: PPUSH
31059: LD_VAR 0 9
31063: PPUSH
31064: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31068: LD_VAR 0 9
31072: PPUSH
31073: CALL_OW 313
31077: PUSH
31078: LD_INT 6
31080: EQUAL
31081: PUSH
31082: LD_VAR 0 9
31086: PPUSH
31087: CALL_OW 266
31091: PUSH
31092: LD_INT 32
31094: PUSH
31095: LD_INT 31
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: IN
31102: OR
31103: IFFALSE 30917
31105: GO 30914
31107: POP
31108: POP
// end else
31109: GO 31491
// for j = 1 to x do
31111: LD_ADDR_VAR 0 9
31115: PUSH
31116: DOUBLE
31117: LD_INT 1
31119: DEC
31120: ST_TO_ADDR
31121: LD_VAR 0 13
31125: PUSH
31126: FOR_TO
31127: IFFALSE 31489
// begin InitHc ;
31129: CALL_OW 19
// if not f then
31133: LD_VAR 0 12
31137: NOT
31138: IFFALSE 31227
// begin PrepareHuman ( false , i , skill ) ;
31140: LD_INT 0
31142: PPUSH
31143: LD_VAR 0 8
31147: PPUSH
31148: LD_VAR 0 4
31152: PPUSH
31153: CALL_OW 380
// un := CreateHuman ;
31157: LD_ADDR_VAR 0 14
31161: PUSH
31162: CALL_OW 44
31166: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31167: LD_ADDR_VAR 0 7
31171: PUSH
31172: LD_VAR 0 7
31176: PPUSH
31177: LD_INT 1
31179: PPUSH
31180: LD_VAR 0 14
31184: PPUSH
31185: CALL_OW 2
31189: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31190: LD_VAR 0 14
31194: PPUSH
31195: LD_VAR 0 1
31199: PPUSH
31200: CALL_OW 250
31204: PPUSH
31205: LD_VAR 0 1
31209: PPUSH
31210: CALL_OW 251
31214: PPUSH
31215: LD_INT 10
31217: PPUSH
31218: LD_INT 0
31220: PPUSH
31221: CALL_OW 50
// continue ;
31225: GO 31126
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31227: LD_VAR 0 12
31231: PUSH
31232: LD_INT 1
31234: ARRAY
31235: PPUSH
31236: CALL_OW 313
31240: PUSH
31241: LD_VAR 0 12
31245: PUSH
31246: LD_INT 1
31248: ARRAY
31249: PPUSH
31250: CALL_OW 266
31254: PUSH
31255: LD_INT 32
31257: PUSH
31258: LD_INT 31
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: IN
31265: AND
31266: PUSH
31267: LD_VAR 0 12
31271: PUSH
31272: LD_INT 1
31274: ARRAY
31275: PPUSH
31276: CALL_OW 313
31280: PUSH
31281: LD_INT 6
31283: EQUAL
31284: OR
31285: IFFALSE 31305
// f := Delete ( f , 1 ) ;
31287: LD_ADDR_VAR 0 12
31291: PUSH
31292: LD_VAR 0 12
31296: PPUSH
31297: LD_INT 1
31299: PPUSH
31300: CALL_OW 3
31304: ST_TO_ADDR
// if not f then
31305: LD_VAR 0 12
31309: NOT
31310: IFFALSE 31328
// begin x := x + 2 ;
31312: LD_ADDR_VAR 0 13
31316: PUSH
31317: LD_VAR 0 13
31321: PUSH
31322: LD_INT 2
31324: PLUS
31325: ST_TO_ADDR
// continue ;
31326: GO 31126
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31328: LD_VAR 0 12
31332: PUSH
31333: LD_INT 1
31335: ARRAY
31336: PPUSH
31337: CALL_OW 266
31341: PUSH
31342: LD_INT 5
31344: EQUAL
31345: IFFALSE 31419
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31347: LD_VAR 0 12
31351: PUSH
31352: LD_INT 1
31354: ARRAY
31355: PPUSH
31356: CALL_OW 313
31360: PUSH
31361: LD_INT 3
31363: LESS
31364: IFFALSE 31400
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31366: LD_INT 0
31368: PPUSH
31369: LD_INT 5
31371: PUSH
31372: LD_INT 8
31374: PUSH
31375: LD_INT 9
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: LIST
31382: PUSH
31383: LD_VAR 0 17
31387: ARRAY
31388: PPUSH
31389: LD_VAR 0 4
31393: PPUSH
31394: CALL_OW 380
31398: GO 31417
// PrepareHuman ( false , i , skill ) ;
31400: LD_INT 0
31402: PPUSH
31403: LD_VAR 0 8
31407: PPUSH
31408: LD_VAR 0 4
31412: PPUSH
31413: CALL_OW 380
// end else
31417: GO 31436
// PrepareHuman ( false , i , skill ) ;
31419: LD_INT 0
31421: PPUSH
31422: LD_VAR 0 8
31426: PPUSH
31427: LD_VAR 0 4
31431: PPUSH
31432: CALL_OW 380
// un := CreateHuman ;
31436: LD_ADDR_VAR 0 14
31440: PUSH
31441: CALL_OW 44
31445: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31446: LD_ADDR_VAR 0 7
31450: PUSH
31451: LD_VAR 0 7
31455: PPUSH
31456: LD_INT 1
31458: PPUSH
31459: LD_VAR 0 14
31463: PPUSH
31464: CALL_OW 2
31468: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31469: LD_VAR 0 14
31473: PPUSH
31474: LD_VAR 0 12
31478: PUSH
31479: LD_INT 1
31481: ARRAY
31482: PPUSH
31483: CALL_OW 52
// end ;
31487: GO 31126
31489: POP
31490: POP
// end ;
31491: GO 30428
31493: POP
31494: POP
// result := result ^ buildings ;
31495: LD_ADDR_VAR 0 7
31499: PUSH
31500: LD_VAR 0 7
31504: PUSH
31505: LD_VAR 0 18
31509: ADD
31510: ST_TO_ADDR
// end else
31511: GO 31654
// begin for i = 1 to personel do
31513: LD_ADDR_VAR 0 8
31517: PUSH
31518: DOUBLE
31519: LD_INT 1
31521: DEC
31522: ST_TO_ADDR
31523: LD_VAR 0 6
31527: PUSH
31528: FOR_TO
31529: IFFALSE 31652
// begin if i > 4 then
31531: LD_VAR 0 8
31535: PUSH
31536: LD_INT 4
31538: GREATER
31539: IFFALSE 31543
// break ;
31541: GO 31652
// x := personel [ i ] ;
31543: LD_ADDR_VAR 0 13
31547: PUSH
31548: LD_VAR 0 6
31552: PUSH
31553: LD_VAR 0 8
31557: ARRAY
31558: ST_TO_ADDR
// if x = - 1 then
31559: LD_VAR 0 13
31563: PUSH
31564: LD_INT 1
31566: NEG
31567: EQUAL
31568: IFFALSE 31572
// continue ;
31570: GO 31528
// PrepareHuman ( false , i , skill ) ;
31572: LD_INT 0
31574: PPUSH
31575: LD_VAR 0 8
31579: PPUSH
31580: LD_VAR 0 4
31584: PPUSH
31585: CALL_OW 380
// un := CreateHuman ;
31589: LD_ADDR_VAR 0 14
31593: PUSH
31594: CALL_OW 44
31598: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31599: LD_VAR 0 14
31603: PPUSH
31604: LD_VAR 0 1
31608: PPUSH
31609: CALL_OW 250
31613: PPUSH
31614: LD_VAR 0 1
31618: PPUSH
31619: CALL_OW 251
31623: PPUSH
31624: LD_INT 10
31626: PPUSH
31627: LD_INT 0
31629: PPUSH
31630: CALL_OW 50
// result := result ^ un ;
31634: LD_ADDR_VAR 0 7
31638: PUSH
31639: LD_VAR 0 7
31643: PUSH
31644: LD_VAR 0 14
31648: ADD
31649: ST_TO_ADDR
// end ;
31650: GO 31528
31652: POP
31653: POP
// end ; end ;
31654: LD_VAR 0 7
31658: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31659: LD_INT 0
31661: PPUSH
31662: PPUSH
31663: PPUSH
31664: PPUSH
31665: PPUSH
31666: PPUSH
31667: PPUSH
31668: PPUSH
31669: PPUSH
31670: PPUSH
31671: PPUSH
31672: PPUSH
31673: PPUSH
31674: PPUSH
31675: PPUSH
31676: PPUSH
// result := false ;
31677: LD_ADDR_VAR 0 3
31681: PUSH
31682: LD_INT 0
31684: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31685: LD_VAR 0 1
31689: NOT
31690: PUSH
31691: LD_VAR 0 1
31695: PPUSH
31696: CALL_OW 266
31700: PUSH
31701: LD_INT 32
31703: PUSH
31704: LD_INT 33
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: IN
31711: NOT
31712: OR
31713: IFFALSE 31717
// exit ;
31715: GO 32826
// nat := GetNation ( tower ) ;
31717: LD_ADDR_VAR 0 12
31721: PUSH
31722: LD_VAR 0 1
31726: PPUSH
31727: CALL_OW 248
31731: ST_TO_ADDR
// side := GetSide ( tower ) ;
31732: LD_ADDR_VAR 0 16
31736: PUSH
31737: LD_VAR 0 1
31741: PPUSH
31742: CALL_OW 255
31746: ST_TO_ADDR
// x := GetX ( tower ) ;
31747: LD_ADDR_VAR 0 10
31751: PUSH
31752: LD_VAR 0 1
31756: PPUSH
31757: CALL_OW 250
31761: ST_TO_ADDR
// y := GetY ( tower ) ;
31762: LD_ADDR_VAR 0 11
31766: PUSH
31767: LD_VAR 0 1
31771: PPUSH
31772: CALL_OW 251
31776: ST_TO_ADDR
// if not x or not y then
31777: LD_VAR 0 10
31781: NOT
31782: PUSH
31783: LD_VAR 0 11
31787: NOT
31788: OR
31789: IFFALSE 31793
// exit ;
31791: GO 32826
// weapon := 0 ;
31793: LD_ADDR_VAR 0 18
31797: PUSH
31798: LD_INT 0
31800: ST_TO_ADDR
// fac_list := [ ] ;
31801: LD_ADDR_VAR 0 17
31805: PUSH
31806: EMPTY
31807: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31808: LD_ADDR_VAR 0 6
31812: PUSH
31813: LD_VAR 0 1
31817: PPUSH
31818: CALL_OW 274
31822: PPUSH
31823: LD_VAR 0 2
31827: PPUSH
31828: LD_INT 0
31830: PPUSH
31831: CALL 29397 0 3
31835: PPUSH
31836: LD_INT 30
31838: PUSH
31839: LD_INT 3
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PPUSH
31846: CALL_OW 72
31850: ST_TO_ADDR
// if not factories then
31851: LD_VAR 0 6
31855: NOT
31856: IFFALSE 31860
// exit ;
31858: GO 32826
// for i in factories do
31860: LD_ADDR_VAR 0 8
31864: PUSH
31865: LD_VAR 0 6
31869: PUSH
31870: FOR_IN
31871: IFFALSE 31896
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31873: LD_ADDR_VAR 0 17
31877: PUSH
31878: LD_VAR 0 17
31882: PUSH
31883: LD_VAR 0 8
31887: PPUSH
31888: CALL_OW 478
31892: UNION
31893: ST_TO_ADDR
31894: GO 31870
31896: POP
31897: POP
// if not fac_list then
31898: LD_VAR 0 17
31902: NOT
31903: IFFALSE 31907
// exit ;
31905: GO 32826
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31907: LD_ADDR_VAR 0 5
31911: PUSH
31912: LD_INT 4
31914: PUSH
31915: LD_INT 5
31917: PUSH
31918: LD_INT 9
31920: PUSH
31921: LD_INT 10
31923: PUSH
31924: LD_INT 6
31926: PUSH
31927: LD_INT 7
31929: PUSH
31930: LD_INT 11
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 27
31944: PUSH
31945: LD_INT 28
31947: PUSH
31948: LD_INT 26
31950: PUSH
31951: LD_INT 30
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 43
31962: PUSH
31963: LD_INT 44
31965: PUSH
31966: LD_INT 46
31968: PUSH
31969: LD_INT 45
31971: PUSH
31972: LD_INT 47
31974: PUSH
31975: LD_INT 49
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: LIST
31990: PUSH
31991: LD_VAR 0 12
31995: ARRAY
31996: ST_TO_ADDR
// list := list isect fac_list ;
31997: LD_ADDR_VAR 0 5
32001: PUSH
32002: LD_VAR 0 5
32006: PUSH
32007: LD_VAR 0 17
32011: ISECT
32012: ST_TO_ADDR
// if not list then
32013: LD_VAR 0 5
32017: NOT
32018: IFFALSE 32022
// exit ;
32020: GO 32826
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32022: LD_VAR 0 12
32026: PUSH
32027: LD_INT 3
32029: EQUAL
32030: PUSH
32031: LD_INT 49
32033: PUSH
32034: LD_VAR 0 5
32038: IN
32039: AND
32040: PUSH
32041: LD_INT 31
32043: PPUSH
32044: LD_VAR 0 16
32048: PPUSH
32049: CALL_OW 321
32053: PUSH
32054: LD_INT 2
32056: EQUAL
32057: AND
32058: IFFALSE 32118
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32060: LD_INT 22
32062: PUSH
32063: LD_VAR 0 16
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 35
32074: PUSH
32075: LD_INT 49
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 91
32084: PUSH
32085: LD_VAR 0 1
32089: PUSH
32090: LD_INT 10
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: LIST
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: LIST
32102: PPUSH
32103: CALL_OW 69
32107: NOT
32108: IFFALSE 32118
// weapon := ru_time_lapser ;
32110: LD_ADDR_VAR 0 18
32114: PUSH
32115: LD_INT 49
32117: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32118: LD_VAR 0 12
32122: PUSH
32123: LD_INT 1
32125: PUSH
32126: LD_INT 2
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: IN
32133: PUSH
32134: LD_INT 11
32136: PUSH
32137: LD_VAR 0 5
32141: IN
32142: PUSH
32143: LD_INT 30
32145: PUSH
32146: LD_VAR 0 5
32150: IN
32151: OR
32152: AND
32153: PUSH
32154: LD_INT 6
32156: PPUSH
32157: LD_VAR 0 16
32161: PPUSH
32162: CALL_OW 321
32166: PUSH
32167: LD_INT 2
32169: EQUAL
32170: AND
32171: IFFALSE 32336
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32173: LD_INT 22
32175: PUSH
32176: LD_VAR 0 16
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 2
32187: PUSH
32188: LD_INT 35
32190: PUSH
32191: LD_INT 11
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 35
32200: PUSH
32201: LD_INT 30
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 91
32215: PUSH
32216: LD_VAR 0 1
32220: PUSH
32221: LD_INT 18
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: LIST
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: LIST
32233: PPUSH
32234: CALL_OW 69
32238: NOT
32239: PUSH
32240: LD_INT 22
32242: PUSH
32243: LD_VAR 0 16
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 2
32254: PUSH
32255: LD_INT 30
32257: PUSH
32258: LD_INT 32
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 30
32267: PUSH
32268: LD_INT 33
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 91
32282: PUSH
32283: LD_VAR 0 1
32287: PUSH
32288: LD_INT 12
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: LIST
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: LIST
32300: PUSH
32301: EMPTY
32302: LIST
32303: PPUSH
32304: CALL_OW 69
32308: PUSH
32309: LD_INT 2
32311: GREATER
32312: AND
32313: IFFALSE 32336
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32315: LD_ADDR_VAR 0 18
32319: PUSH
32320: LD_INT 11
32322: PUSH
32323: LD_INT 30
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_VAR 0 12
32334: ARRAY
32335: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32336: LD_VAR 0 18
32340: NOT
32341: PUSH
32342: LD_INT 40
32344: PPUSH
32345: LD_VAR 0 16
32349: PPUSH
32350: CALL_OW 321
32354: PUSH
32355: LD_INT 2
32357: EQUAL
32358: AND
32359: PUSH
32360: LD_INT 7
32362: PUSH
32363: LD_VAR 0 5
32367: IN
32368: PUSH
32369: LD_INT 28
32371: PUSH
32372: LD_VAR 0 5
32376: IN
32377: OR
32378: PUSH
32379: LD_INT 45
32381: PUSH
32382: LD_VAR 0 5
32386: IN
32387: OR
32388: AND
32389: IFFALSE 32643
// begin hex := GetHexInfo ( x , y ) ;
32391: LD_ADDR_VAR 0 4
32395: PUSH
32396: LD_VAR 0 10
32400: PPUSH
32401: LD_VAR 0 11
32405: PPUSH
32406: CALL_OW 546
32410: ST_TO_ADDR
// if hex [ 1 ] then
32411: LD_VAR 0 4
32415: PUSH
32416: LD_INT 1
32418: ARRAY
32419: IFFALSE 32423
// exit ;
32421: GO 32826
// height := hex [ 2 ] ;
32423: LD_ADDR_VAR 0 15
32427: PUSH
32428: LD_VAR 0 4
32432: PUSH
32433: LD_INT 2
32435: ARRAY
32436: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32437: LD_ADDR_VAR 0 14
32441: PUSH
32442: LD_INT 0
32444: PUSH
32445: LD_INT 2
32447: PUSH
32448: LD_INT 3
32450: PUSH
32451: LD_INT 5
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: ST_TO_ADDR
// for i in tmp do
32460: LD_ADDR_VAR 0 8
32464: PUSH
32465: LD_VAR 0 14
32469: PUSH
32470: FOR_IN
32471: IFFALSE 32641
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32473: LD_ADDR_VAR 0 9
32477: PUSH
32478: LD_VAR 0 10
32482: PPUSH
32483: LD_VAR 0 8
32487: PPUSH
32488: LD_INT 5
32490: PPUSH
32491: CALL_OW 272
32495: PUSH
32496: LD_VAR 0 11
32500: PPUSH
32501: LD_VAR 0 8
32505: PPUSH
32506: LD_INT 5
32508: PPUSH
32509: CALL_OW 273
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32518: LD_VAR 0 9
32522: PUSH
32523: LD_INT 1
32525: ARRAY
32526: PPUSH
32527: LD_VAR 0 9
32531: PUSH
32532: LD_INT 2
32534: ARRAY
32535: PPUSH
32536: CALL_OW 488
32540: IFFALSE 32639
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32542: LD_ADDR_VAR 0 4
32546: PUSH
32547: LD_VAR 0 9
32551: PUSH
32552: LD_INT 1
32554: ARRAY
32555: PPUSH
32556: LD_VAR 0 9
32560: PUSH
32561: LD_INT 2
32563: ARRAY
32564: PPUSH
32565: CALL_OW 546
32569: ST_TO_ADDR
// if hex [ 1 ] then
32570: LD_VAR 0 4
32574: PUSH
32575: LD_INT 1
32577: ARRAY
32578: IFFALSE 32582
// continue ;
32580: GO 32470
// h := hex [ 2 ] ;
32582: LD_ADDR_VAR 0 13
32586: PUSH
32587: LD_VAR 0 4
32591: PUSH
32592: LD_INT 2
32594: ARRAY
32595: ST_TO_ADDR
// if h + 7 < height then
32596: LD_VAR 0 13
32600: PUSH
32601: LD_INT 7
32603: PLUS
32604: PUSH
32605: LD_VAR 0 15
32609: LESS
32610: IFFALSE 32639
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32612: LD_ADDR_VAR 0 18
32616: PUSH
32617: LD_INT 7
32619: PUSH
32620: LD_INT 28
32622: PUSH
32623: LD_INT 45
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: LIST
32630: PUSH
32631: LD_VAR 0 12
32635: ARRAY
32636: ST_TO_ADDR
// break ;
32637: GO 32641
// end ; end ; end ;
32639: GO 32470
32641: POP
32642: POP
// end ; if not weapon then
32643: LD_VAR 0 18
32647: NOT
32648: IFFALSE 32708
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32650: LD_ADDR_VAR 0 5
32654: PUSH
32655: LD_VAR 0 5
32659: PUSH
32660: LD_INT 11
32662: PUSH
32663: LD_INT 30
32665: PUSH
32666: LD_INT 49
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: LIST
32673: DIFF
32674: ST_TO_ADDR
// if not list then
32675: LD_VAR 0 5
32679: NOT
32680: IFFALSE 32684
// exit ;
32682: GO 32826
// weapon := list [ rand ( 1 , list ) ] ;
32684: LD_ADDR_VAR 0 18
32688: PUSH
32689: LD_VAR 0 5
32693: PUSH
32694: LD_INT 1
32696: PPUSH
32697: LD_VAR 0 5
32701: PPUSH
32702: CALL_OW 12
32706: ARRAY
32707: ST_TO_ADDR
// end ; if weapon then
32708: LD_VAR 0 18
32712: IFFALSE 32826
// begin tmp := CostOfWeapon ( weapon ) ;
32714: LD_ADDR_VAR 0 14
32718: PUSH
32719: LD_VAR 0 18
32723: PPUSH
32724: CALL_OW 451
32728: ST_TO_ADDR
// j := GetBase ( tower ) ;
32729: LD_ADDR_VAR 0 9
32733: PUSH
32734: LD_VAR 0 1
32738: PPUSH
32739: CALL_OW 274
32743: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32744: LD_VAR 0 9
32748: PPUSH
32749: LD_INT 1
32751: PPUSH
32752: CALL_OW 275
32756: PUSH
32757: LD_VAR 0 14
32761: PUSH
32762: LD_INT 1
32764: ARRAY
32765: GREATEREQUAL
32766: PUSH
32767: LD_VAR 0 9
32771: PPUSH
32772: LD_INT 2
32774: PPUSH
32775: CALL_OW 275
32779: PUSH
32780: LD_VAR 0 14
32784: PUSH
32785: LD_INT 2
32787: ARRAY
32788: GREATEREQUAL
32789: AND
32790: PUSH
32791: LD_VAR 0 9
32795: PPUSH
32796: LD_INT 3
32798: PPUSH
32799: CALL_OW 275
32803: PUSH
32804: LD_VAR 0 14
32808: PUSH
32809: LD_INT 3
32811: ARRAY
32812: GREATEREQUAL
32813: AND
32814: IFFALSE 32826
// result := weapon ;
32816: LD_ADDR_VAR 0 3
32820: PUSH
32821: LD_VAR 0 18
32825: ST_TO_ADDR
// end ; end ;
32826: LD_VAR 0 3
32830: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32831: LD_INT 0
32833: PPUSH
32834: PPUSH
// result := true ;
32835: LD_ADDR_VAR 0 3
32839: PUSH
32840: LD_INT 1
32842: ST_TO_ADDR
// if array1 = array2 then
32843: LD_VAR 0 1
32847: PUSH
32848: LD_VAR 0 2
32852: EQUAL
32853: IFFALSE 32913
// begin for i = 1 to array1 do
32855: LD_ADDR_VAR 0 4
32859: PUSH
32860: DOUBLE
32861: LD_INT 1
32863: DEC
32864: ST_TO_ADDR
32865: LD_VAR 0 1
32869: PUSH
32870: FOR_TO
32871: IFFALSE 32909
// if array1 [ i ] <> array2 [ i ] then
32873: LD_VAR 0 1
32877: PUSH
32878: LD_VAR 0 4
32882: ARRAY
32883: PUSH
32884: LD_VAR 0 2
32888: PUSH
32889: LD_VAR 0 4
32893: ARRAY
32894: NONEQUAL
32895: IFFALSE 32907
// begin result := false ;
32897: LD_ADDR_VAR 0 3
32901: PUSH
32902: LD_INT 0
32904: ST_TO_ADDR
// break ;
32905: GO 32909
// end ;
32907: GO 32870
32909: POP
32910: POP
// end else
32911: GO 32921
// result := false ;
32913: LD_ADDR_VAR 0 3
32917: PUSH
32918: LD_INT 0
32920: ST_TO_ADDR
// end ;
32921: LD_VAR 0 3
32925: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32926: LD_INT 0
32928: PPUSH
32929: PPUSH
// if not array1 or not array2 then
32930: LD_VAR 0 1
32934: NOT
32935: PUSH
32936: LD_VAR 0 2
32940: NOT
32941: OR
32942: IFFALSE 32946
// exit ;
32944: GO 33010
// result := true ;
32946: LD_ADDR_VAR 0 3
32950: PUSH
32951: LD_INT 1
32953: ST_TO_ADDR
// for i = 1 to array1 do
32954: LD_ADDR_VAR 0 4
32958: PUSH
32959: DOUBLE
32960: LD_INT 1
32962: DEC
32963: ST_TO_ADDR
32964: LD_VAR 0 1
32968: PUSH
32969: FOR_TO
32970: IFFALSE 33008
// if array1 [ i ] <> array2 [ i ] then
32972: LD_VAR 0 1
32976: PUSH
32977: LD_VAR 0 4
32981: ARRAY
32982: PUSH
32983: LD_VAR 0 2
32987: PUSH
32988: LD_VAR 0 4
32992: ARRAY
32993: NONEQUAL
32994: IFFALSE 33006
// begin result := false ;
32996: LD_ADDR_VAR 0 3
33000: PUSH
33001: LD_INT 0
33003: ST_TO_ADDR
// break ;
33004: GO 33008
// end ;
33006: GO 32969
33008: POP
33009: POP
// end ;
33010: LD_VAR 0 3
33014: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33015: LD_INT 0
33017: PPUSH
33018: PPUSH
33019: PPUSH
// pom := GetBase ( fac ) ;
33020: LD_ADDR_VAR 0 5
33024: PUSH
33025: LD_VAR 0 1
33029: PPUSH
33030: CALL_OW 274
33034: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33035: LD_ADDR_VAR 0 4
33039: PUSH
33040: LD_VAR 0 2
33044: PUSH
33045: LD_INT 1
33047: ARRAY
33048: PPUSH
33049: LD_VAR 0 2
33053: PUSH
33054: LD_INT 2
33056: ARRAY
33057: PPUSH
33058: LD_VAR 0 2
33062: PUSH
33063: LD_INT 3
33065: ARRAY
33066: PPUSH
33067: LD_VAR 0 2
33071: PUSH
33072: LD_INT 4
33074: ARRAY
33075: PPUSH
33076: CALL_OW 449
33080: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33081: LD_ADDR_VAR 0 3
33085: PUSH
33086: LD_VAR 0 5
33090: PPUSH
33091: LD_INT 1
33093: PPUSH
33094: CALL_OW 275
33098: PUSH
33099: LD_VAR 0 4
33103: PUSH
33104: LD_INT 1
33106: ARRAY
33107: GREATEREQUAL
33108: PUSH
33109: LD_VAR 0 5
33113: PPUSH
33114: LD_INT 2
33116: PPUSH
33117: CALL_OW 275
33121: PUSH
33122: LD_VAR 0 4
33126: PUSH
33127: LD_INT 2
33129: ARRAY
33130: GREATEREQUAL
33131: AND
33132: PUSH
33133: LD_VAR 0 5
33137: PPUSH
33138: LD_INT 3
33140: PPUSH
33141: CALL_OW 275
33145: PUSH
33146: LD_VAR 0 4
33150: PUSH
33151: LD_INT 3
33153: ARRAY
33154: GREATEREQUAL
33155: AND
33156: ST_TO_ADDR
// end ;
33157: LD_VAR 0 3
33161: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33162: LD_INT 0
33164: PPUSH
33165: PPUSH
33166: PPUSH
33167: PPUSH
// pom := GetBase ( building ) ;
33168: LD_ADDR_VAR 0 3
33172: PUSH
33173: LD_VAR 0 1
33177: PPUSH
33178: CALL_OW 274
33182: ST_TO_ADDR
// if not pom then
33183: LD_VAR 0 3
33187: NOT
33188: IFFALSE 33192
// exit ;
33190: GO 33362
// btype := GetBType ( building ) ;
33192: LD_ADDR_VAR 0 5
33196: PUSH
33197: LD_VAR 0 1
33201: PPUSH
33202: CALL_OW 266
33206: ST_TO_ADDR
// if btype = b_armoury then
33207: LD_VAR 0 5
33211: PUSH
33212: LD_INT 4
33214: EQUAL
33215: IFFALSE 33225
// btype := b_barracks ;
33217: LD_ADDR_VAR 0 5
33221: PUSH
33222: LD_INT 5
33224: ST_TO_ADDR
// if btype = b_depot then
33225: LD_VAR 0 5
33229: PUSH
33230: LD_INT 0
33232: EQUAL
33233: IFFALSE 33243
// btype := b_warehouse ;
33235: LD_ADDR_VAR 0 5
33239: PUSH
33240: LD_INT 1
33242: ST_TO_ADDR
// if btype = b_workshop then
33243: LD_VAR 0 5
33247: PUSH
33248: LD_INT 2
33250: EQUAL
33251: IFFALSE 33261
// btype := b_factory ;
33253: LD_ADDR_VAR 0 5
33257: PUSH
33258: LD_INT 3
33260: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33261: LD_ADDR_VAR 0 4
33265: PUSH
33266: LD_VAR 0 5
33270: PPUSH
33271: LD_VAR 0 1
33275: PPUSH
33276: CALL_OW 248
33280: PPUSH
33281: CALL_OW 450
33285: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33286: LD_ADDR_VAR 0 2
33290: PUSH
33291: LD_VAR 0 3
33295: PPUSH
33296: LD_INT 1
33298: PPUSH
33299: CALL_OW 275
33303: PUSH
33304: LD_VAR 0 4
33308: PUSH
33309: LD_INT 1
33311: ARRAY
33312: GREATEREQUAL
33313: PUSH
33314: LD_VAR 0 3
33318: PPUSH
33319: LD_INT 2
33321: PPUSH
33322: CALL_OW 275
33326: PUSH
33327: LD_VAR 0 4
33331: PUSH
33332: LD_INT 2
33334: ARRAY
33335: GREATEREQUAL
33336: AND
33337: PUSH
33338: LD_VAR 0 3
33342: PPUSH
33343: LD_INT 3
33345: PPUSH
33346: CALL_OW 275
33350: PUSH
33351: LD_VAR 0 4
33355: PUSH
33356: LD_INT 3
33358: ARRAY
33359: GREATEREQUAL
33360: AND
33361: ST_TO_ADDR
// end ;
33362: LD_VAR 0 2
33366: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33367: LD_INT 0
33369: PPUSH
33370: PPUSH
33371: PPUSH
// pom := GetBase ( building ) ;
33372: LD_ADDR_VAR 0 4
33376: PUSH
33377: LD_VAR 0 1
33381: PPUSH
33382: CALL_OW 274
33386: ST_TO_ADDR
// if not pom then
33387: LD_VAR 0 4
33391: NOT
33392: IFFALSE 33396
// exit ;
33394: GO 33497
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33396: LD_ADDR_VAR 0 5
33400: PUSH
33401: LD_VAR 0 2
33405: PPUSH
33406: LD_VAR 0 1
33410: PPUSH
33411: CALL_OW 248
33415: PPUSH
33416: CALL_OW 450
33420: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33421: LD_ADDR_VAR 0 3
33425: PUSH
33426: LD_VAR 0 4
33430: PPUSH
33431: LD_INT 1
33433: PPUSH
33434: CALL_OW 275
33438: PUSH
33439: LD_VAR 0 5
33443: PUSH
33444: LD_INT 1
33446: ARRAY
33447: GREATEREQUAL
33448: PUSH
33449: LD_VAR 0 4
33453: PPUSH
33454: LD_INT 2
33456: PPUSH
33457: CALL_OW 275
33461: PUSH
33462: LD_VAR 0 5
33466: PUSH
33467: LD_INT 2
33469: ARRAY
33470: GREATEREQUAL
33471: AND
33472: PUSH
33473: LD_VAR 0 4
33477: PPUSH
33478: LD_INT 3
33480: PPUSH
33481: CALL_OW 275
33485: PUSH
33486: LD_VAR 0 5
33490: PUSH
33491: LD_INT 3
33493: ARRAY
33494: GREATEREQUAL
33495: AND
33496: ST_TO_ADDR
// end ;
33497: LD_VAR 0 3
33501: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33502: LD_INT 0
33504: PPUSH
33505: PPUSH
33506: PPUSH
33507: PPUSH
33508: PPUSH
33509: PPUSH
33510: PPUSH
33511: PPUSH
33512: PPUSH
33513: PPUSH
33514: PPUSH
// result := false ;
33515: LD_ADDR_VAR 0 8
33519: PUSH
33520: LD_INT 0
33522: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33523: LD_VAR 0 5
33527: NOT
33528: PUSH
33529: LD_VAR 0 1
33533: NOT
33534: OR
33535: PUSH
33536: LD_VAR 0 2
33540: NOT
33541: OR
33542: PUSH
33543: LD_VAR 0 3
33547: NOT
33548: OR
33549: IFFALSE 33553
// exit ;
33551: GO 34367
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33553: LD_ADDR_VAR 0 14
33557: PUSH
33558: LD_VAR 0 1
33562: PPUSH
33563: LD_VAR 0 2
33567: PPUSH
33568: LD_VAR 0 3
33572: PPUSH
33573: LD_VAR 0 4
33577: PPUSH
33578: LD_VAR 0 5
33582: PUSH
33583: LD_INT 1
33585: ARRAY
33586: PPUSH
33587: CALL_OW 248
33591: PPUSH
33592: LD_INT 0
33594: PPUSH
33595: CALL 35620 0 6
33599: ST_TO_ADDR
// if not hexes then
33600: LD_VAR 0 14
33604: NOT
33605: IFFALSE 33609
// exit ;
33607: GO 34367
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33609: LD_ADDR_VAR 0 17
33613: PUSH
33614: LD_VAR 0 5
33618: PPUSH
33619: LD_INT 22
33621: PUSH
33622: LD_VAR 0 13
33626: PPUSH
33627: CALL_OW 255
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 2
33638: PUSH
33639: LD_INT 30
33641: PUSH
33642: LD_INT 0
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 30
33651: PUSH
33652: LD_INT 1
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: LIST
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PPUSH
33668: CALL_OW 72
33672: ST_TO_ADDR
// for i = 1 to hexes do
33673: LD_ADDR_VAR 0 9
33677: PUSH
33678: DOUBLE
33679: LD_INT 1
33681: DEC
33682: ST_TO_ADDR
33683: LD_VAR 0 14
33687: PUSH
33688: FOR_TO
33689: IFFALSE 34365
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33691: LD_ADDR_VAR 0 13
33695: PUSH
33696: LD_VAR 0 14
33700: PUSH
33701: LD_VAR 0 9
33705: ARRAY
33706: PUSH
33707: LD_INT 1
33709: ARRAY
33710: PPUSH
33711: LD_VAR 0 14
33715: PUSH
33716: LD_VAR 0 9
33720: ARRAY
33721: PUSH
33722: LD_INT 2
33724: ARRAY
33725: PPUSH
33726: CALL_OW 428
33730: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33731: LD_VAR 0 14
33735: PUSH
33736: LD_VAR 0 9
33740: ARRAY
33741: PUSH
33742: LD_INT 1
33744: ARRAY
33745: PPUSH
33746: LD_VAR 0 14
33750: PUSH
33751: LD_VAR 0 9
33755: ARRAY
33756: PUSH
33757: LD_INT 2
33759: ARRAY
33760: PPUSH
33761: CALL_OW 351
33765: PUSH
33766: LD_VAR 0 14
33770: PUSH
33771: LD_VAR 0 9
33775: ARRAY
33776: PUSH
33777: LD_INT 1
33779: ARRAY
33780: PPUSH
33781: LD_VAR 0 14
33785: PUSH
33786: LD_VAR 0 9
33790: ARRAY
33791: PUSH
33792: LD_INT 2
33794: ARRAY
33795: PPUSH
33796: CALL_OW 488
33800: NOT
33801: OR
33802: PUSH
33803: LD_VAR 0 13
33807: PPUSH
33808: CALL_OW 247
33812: PUSH
33813: LD_INT 3
33815: EQUAL
33816: OR
33817: IFFALSE 33823
// exit ;
33819: POP
33820: POP
33821: GO 34367
// if not tmp then
33823: LD_VAR 0 13
33827: NOT
33828: IFFALSE 33832
// continue ;
33830: GO 33688
// result := true ;
33832: LD_ADDR_VAR 0 8
33836: PUSH
33837: LD_INT 1
33839: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33840: LD_VAR 0 6
33844: PUSH
33845: LD_VAR 0 13
33849: PPUSH
33850: CALL_OW 247
33854: PUSH
33855: LD_INT 2
33857: EQUAL
33858: AND
33859: PUSH
33860: LD_VAR 0 13
33864: PPUSH
33865: CALL_OW 263
33869: PUSH
33870: LD_INT 1
33872: EQUAL
33873: AND
33874: IFFALSE 34038
// begin if IsDrivenBy ( tmp ) then
33876: LD_VAR 0 13
33880: PPUSH
33881: CALL_OW 311
33885: IFFALSE 33889
// continue ;
33887: GO 33688
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33889: LD_VAR 0 6
33893: PPUSH
33894: LD_INT 3
33896: PUSH
33897: LD_INT 60
33899: PUSH
33900: EMPTY
33901: LIST
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 3
33909: PUSH
33910: LD_INT 55
33912: PUSH
33913: EMPTY
33914: LIST
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PPUSH
33924: CALL_OW 72
33928: IFFALSE 34036
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33930: LD_ADDR_VAR 0 18
33934: PUSH
33935: LD_VAR 0 6
33939: PPUSH
33940: LD_INT 3
33942: PUSH
33943: LD_INT 60
33945: PUSH
33946: EMPTY
33947: LIST
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 3
33955: PUSH
33956: LD_INT 55
33958: PUSH
33959: EMPTY
33960: LIST
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PPUSH
33970: CALL_OW 72
33974: PUSH
33975: LD_INT 1
33977: ARRAY
33978: ST_TO_ADDR
// if IsInUnit ( driver ) then
33979: LD_VAR 0 18
33983: PPUSH
33984: CALL_OW 310
33988: IFFALSE 33999
// ComExit ( driver ) ;
33990: LD_VAR 0 18
33994: PPUSH
33995: CALL 59399 0 1
// AddComEnterUnit ( driver , tmp ) ;
33999: LD_VAR 0 18
34003: PPUSH
34004: LD_VAR 0 13
34008: PPUSH
34009: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34013: LD_VAR 0 18
34017: PPUSH
34018: LD_VAR 0 7
34022: PPUSH
34023: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34027: LD_VAR 0 18
34031: PPUSH
34032: CALL_OW 181
// end ; continue ;
34036: GO 33688
// end ; if not cleaners or not tmp in cleaners then
34038: LD_VAR 0 6
34042: NOT
34043: PUSH
34044: LD_VAR 0 13
34048: PUSH
34049: LD_VAR 0 6
34053: IN
34054: NOT
34055: OR
34056: IFFALSE 34363
// begin if dep then
34058: LD_VAR 0 17
34062: IFFALSE 34198
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34064: LD_ADDR_VAR 0 16
34068: PUSH
34069: LD_VAR 0 17
34073: PUSH
34074: LD_INT 1
34076: ARRAY
34077: PPUSH
34078: CALL_OW 250
34082: PPUSH
34083: LD_VAR 0 17
34087: PUSH
34088: LD_INT 1
34090: ARRAY
34091: PPUSH
34092: CALL_OW 254
34096: PPUSH
34097: LD_INT 5
34099: PPUSH
34100: CALL_OW 272
34104: PUSH
34105: LD_VAR 0 17
34109: PUSH
34110: LD_INT 1
34112: ARRAY
34113: PPUSH
34114: CALL_OW 251
34118: PPUSH
34119: LD_VAR 0 17
34123: PUSH
34124: LD_INT 1
34126: ARRAY
34127: PPUSH
34128: CALL_OW 254
34132: PPUSH
34133: LD_INT 5
34135: PPUSH
34136: CALL_OW 273
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34145: LD_VAR 0 16
34149: PUSH
34150: LD_INT 1
34152: ARRAY
34153: PPUSH
34154: LD_VAR 0 16
34158: PUSH
34159: LD_INT 2
34161: ARRAY
34162: PPUSH
34163: CALL_OW 488
34167: IFFALSE 34198
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34169: LD_VAR 0 13
34173: PPUSH
34174: LD_VAR 0 16
34178: PUSH
34179: LD_INT 1
34181: ARRAY
34182: PPUSH
34183: LD_VAR 0 16
34187: PUSH
34188: LD_INT 2
34190: ARRAY
34191: PPUSH
34192: CALL_OW 111
// continue ;
34196: GO 33688
// end ; end ; r := GetDir ( tmp ) ;
34198: LD_ADDR_VAR 0 15
34202: PUSH
34203: LD_VAR 0 13
34207: PPUSH
34208: CALL_OW 254
34212: ST_TO_ADDR
// if r = 5 then
34213: LD_VAR 0 15
34217: PUSH
34218: LD_INT 5
34220: EQUAL
34221: IFFALSE 34231
// r := 0 ;
34223: LD_ADDR_VAR 0 15
34227: PUSH
34228: LD_INT 0
34230: ST_TO_ADDR
// for j = r to 5 do
34231: LD_ADDR_VAR 0 10
34235: PUSH
34236: DOUBLE
34237: LD_VAR 0 15
34241: DEC
34242: ST_TO_ADDR
34243: LD_INT 5
34245: PUSH
34246: FOR_TO
34247: IFFALSE 34361
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34249: LD_ADDR_VAR 0 11
34253: PUSH
34254: LD_VAR 0 13
34258: PPUSH
34259: CALL_OW 250
34263: PPUSH
34264: LD_VAR 0 10
34268: PPUSH
34269: LD_INT 2
34271: PPUSH
34272: CALL_OW 272
34276: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34277: LD_ADDR_VAR 0 12
34281: PUSH
34282: LD_VAR 0 13
34286: PPUSH
34287: CALL_OW 251
34291: PPUSH
34292: LD_VAR 0 10
34296: PPUSH
34297: LD_INT 2
34299: PPUSH
34300: CALL_OW 273
34304: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34305: LD_VAR 0 11
34309: PPUSH
34310: LD_VAR 0 12
34314: PPUSH
34315: CALL_OW 488
34319: PUSH
34320: LD_VAR 0 11
34324: PPUSH
34325: LD_VAR 0 12
34329: PPUSH
34330: CALL_OW 428
34334: NOT
34335: AND
34336: IFFALSE 34359
// begin ComMoveXY ( tmp , _x , _y ) ;
34338: LD_VAR 0 13
34342: PPUSH
34343: LD_VAR 0 11
34347: PPUSH
34348: LD_VAR 0 12
34352: PPUSH
34353: CALL_OW 111
// break ;
34357: GO 34361
// end ; end ;
34359: GO 34246
34361: POP
34362: POP
// end ; end ;
34363: GO 33688
34365: POP
34366: POP
// end ;
34367: LD_VAR 0 8
34371: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34372: LD_INT 0
34374: PPUSH
// result := true ;
34375: LD_ADDR_VAR 0 3
34379: PUSH
34380: LD_INT 1
34382: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34383: LD_VAR 0 2
34387: PUSH
34388: LD_INT 24
34390: DOUBLE
34391: EQUAL
34392: IFTRUE 34402
34394: LD_INT 33
34396: DOUBLE
34397: EQUAL
34398: IFTRUE 34402
34400: GO 34427
34402: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34403: LD_ADDR_VAR 0 3
34407: PUSH
34408: LD_INT 32
34410: PPUSH
34411: LD_VAR 0 1
34415: PPUSH
34416: CALL_OW 321
34420: PUSH
34421: LD_INT 2
34423: EQUAL
34424: ST_TO_ADDR
34425: GO 34743
34427: LD_INT 20
34429: DOUBLE
34430: EQUAL
34431: IFTRUE 34435
34433: GO 34460
34435: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34436: LD_ADDR_VAR 0 3
34440: PUSH
34441: LD_INT 6
34443: PPUSH
34444: LD_VAR 0 1
34448: PPUSH
34449: CALL_OW 321
34453: PUSH
34454: LD_INT 2
34456: EQUAL
34457: ST_TO_ADDR
34458: GO 34743
34460: LD_INT 22
34462: DOUBLE
34463: EQUAL
34464: IFTRUE 34474
34466: LD_INT 36
34468: DOUBLE
34469: EQUAL
34470: IFTRUE 34474
34472: GO 34499
34474: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34475: LD_ADDR_VAR 0 3
34479: PUSH
34480: LD_INT 15
34482: PPUSH
34483: LD_VAR 0 1
34487: PPUSH
34488: CALL_OW 321
34492: PUSH
34493: LD_INT 2
34495: EQUAL
34496: ST_TO_ADDR
34497: GO 34743
34499: LD_INT 30
34501: DOUBLE
34502: EQUAL
34503: IFTRUE 34507
34505: GO 34532
34507: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34508: LD_ADDR_VAR 0 3
34512: PUSH
34513: LD_INT 20
34515: PPUSH
34516: LD_VAR 0 1
34520: PPUSH
34521: CALL_OW 321
34525: PUSH
34526: LD_INT 2
34528: EQUAL
34529: ST_TO_ADDR
34530: GO 34743
34532: LD_INT 28
34534: DOUBLE
34535: EQUAL
34536: IFTRUE 34546
34538: LD_INT 21
34540: DOUBLE
34541: EQUAL
34542: IFTRUE 34546
34544: GO 34571
34546: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34547: LD_ADDR_VAR 0 3
34551: PUSH
34552: LD_INT 21
34554: PPUSH
34555: LD_VAR 0 1
34559: PPUSH
34560: CALL_OW 321
34564: PUSH
34565: LD_INT 2
34567: EQUAL
34568: ST_TO_ADDR
34569: GO 34743
34571: LD_INT 16
34573: DOUBLE
34574: EQUAL
34575: IFTRUE 34579
34577: GO 34604
34579: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34580: LD_ADDR_VAR 0 3
34584: PUSH
34585: LD_INT 84
34587: PPUSH
34588: LD_VAR 0 1
34592: PPUSH
34593: CALL_OW 321
34597: PUSH
34598: LD_INT 2
34600: EQUAL
34601: ST_TO_ADDR
34602: GO 34743
34604: LD_INT 19
34606: DOUBLE
34607: EQUAL
34608: IFTRUE 34618
34610: LD_INT 23
34612: DOUBLE
34613: EQUAL
34614: IFTRUE 34618
34616: GO 34643
34618: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34619: LD_ADDR_VAR 0 3
34623: PUSH
34624: LD_INT 83
34626: PPUSH
34627: LD_VAR 0 1
34631: PPUSH
34632: CALL_OW 321
34636: PUSH
34637: LD_INT 2
34639: EQUAL
34640: ST_TO_ADDR
34641: GO 34743
34643: LD_INT 17
34645: DOUBLE
34646: EQUAL
34647: IFTRUE 34651
34649: GO 34676
34651: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34652: LD_ADDR_VAR 0 3
34656: PUSH
34657: LD_INT 39
34659: PPUSH
34660: LD_VAR 0 1
34664: PPUSH
34665: CALL_OW 321
34669: PUSH
34670: LD_INT 2
34672: EQUAL
34673: ST_TO_ADDR
34674: GO 34743
34676: LD_INT 18
34678: DOUBLE
34679: EQUAL
34680: IFTRUE 34684
34682: GO 34709
34684: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34685: LD_ADDR_VAR 0 3
34689: PUSH
34690: LD_INT 40
34692: PPUSH
34693: LD_VAR 0 1
34697: PPUSH
34698: CALL_OW 321
34702: PUSH
34703: LD_INT 2
34705: EQUAL
34706: ST_TO_ADDR
34707: GO 34743
34709: LD_INT 27
34711: DOUBLE
34712: EQUAL
34713: IFTRUE 34717
34715: GO 34742
34717: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34718: LD_ADDR_VAR 0 3
34722: PUSH
34723: LD_INT 35
34725: PPUSH
34726: LD_VAR 0 1
34730: PPUSH
34731: CALL_OW 321
34735: PUSH
34736: LD_INT 2
34738: EQUAL
34739: ST_TO_ADDR
34740: GO 34743
34742: POP
// end ;
34743: LD_VAR 0 3
34747: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34748: LD_INT 0
34750: PPUSH
34751: PPUSH
34752: PPUSH
34753: PPUSH
34754: PPUSH
34755: PPUSH
34756: PPUSH
34757: PPUSH
34758: PPUSH
34759: PPUSH
34760: PPUSH
// result := false ;
34761: LD_ADDR_VAR 0 6
34765: PUSH
34766: LD_INT 0
34768: ST_TO_ADDR
// if btype = b_depot then
34769: LD_VAR 0 2
34773: PUSH
34774: LD_INT 0
34776: EQUAL
34777: IFFALSE 34789
// begin result := true ;
34779: LD_ADDR_VAR 0 6
34783: PUSH
34784: LD_INT 1
34786: ST_TO_ADDR
// exit ;
34787: GO 35615
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34789: LD_VAR 0 1
34793: NOT
34794: PUSH
34795: LD_VAR 0 1
34799: PPUSH
34800: CALL_OW 266
34804: PUSH
34805: LD_INT 0
34807: PUSH
34808: LD_INT 1
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: IN
34815: NOT
34816: OR
34817: PUSH
34818: LD_VAR 0 2
34822: NOT
34823: OR
34824: PUSH
34825: LD_VAR 0 5
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: LD_INT 1
34835: PUSH
34836: LD_INT 2
34838: PUSH
34839: LD_INT 3
34841: PUSH
34842: LD_INT 4
34844: PUSH
34845: LD_INT 5
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: IN
34856: NOT
34857: OR
34858: PUSH
34859: LD_VAR 0 3
34863: PPUSH
34864: LD_VAR 0 4
34868: PPUSH
34869: CALL_OW 488
34873: NOT
34874: OR
34875: IFFALSE 34879
// exit ;
34877: GO 35615
// side := GetSide ( depot ) ;
34879: LD_ADDR_VAR 0 9
34883: PUSH
34884: LD_VAR 0 1
34888: PPUSH
34889: CALL_OW 255
34893: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
34894: LD_VAR 0 9
34898: PPUSH
34899: LD_VAR 0 2
34903: PPUSH
34904: CALL 34372 0 2
34908: NOT
34909: IFFALSE 34913
// exit ;
34911: GO 35615
// pom := GetBase ( depot ) ;
34913: LD_ADDR_VAR 0 10
34917: PUSH
34918: LD_VAR 0 1
34922: PPUSH
34923: CALL_OW 274
34927: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34928: LD_ADDR_VAR 0 11
34932: PUSH
34933: LD_VAR 0 2
34937: PPUSH
34938: LD_VAR 0 1
34942: PPUSH
34943: CALL_OW 248
34947: PPUSH
34948: CALL_OW 450
34952: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34953: LD_VAR 0 10
34957: PPUSH
34958: LD_INT 1
34960: PPUSH
34961: CALL_OW 275
34965: PUSH
34966: LD_VAR 0 11
34970: PUSH
34971: LD_INT 1
34973: ARRAY
34974: GREATEREQUAL
34975: PUSH
34976: LD_VAR 0 10
34980: PPUSH
34981: LD_INT 2
34983: PPUSH
34984: CALL_OW 275
34988: PUSH
34989: LD_VAR 0 11
34993: PUSH
34994: LD_INT 2
34996: ARRAY
34997: GREATEREQUAL
34998: AND
34999: PUSH
35000: LD_VAR 0 10
35004: PPUSH
35005: LD_INT 3
35007: PPUSH
35008: CALL_OW 275
35012: PUSH
35013: LD_VAR 0 11
35017: PUSH
35018: LD_INT 3
35020: ARRAY
35021: GREATEREQUAL
35022: AND
35023: NOT
35024: IFFALSE 35028
// exit ;
35026: GO 35615
// if GetBType ( depot ) = b_depot then
35028: LD_VAR 0 1
35032: PPUSH
35033: CALL_OW 266
35037: PUSH
35038: LD_INT 0
35040: EQUAL
35041: IFFALSE 35053
// dist := 28 else
35043: LD_ADDR_VAR 0 14
35047: PUSH
35048: LD_INT 28
35050: ST_TO_ADDR
35051: GO 35061
// dist := 36 ;
35053: LD_ADDR_VAR 0 14
35057: PUSH
35058: LD_INT 36
35060: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35061: LD_VAR 0 1
35065: PPUSH
35066: LD_VAR 0 3
35070: PPUSH
35071: LD_VAR 0 4
35075: PPUSH
35076: CALL_OW 297
35080: PUSH
35081: LD_VAR 0 14
35085: GREATER
35086: IFFALSE 35090
// exit ;
35088: GO 35615
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35090: LD_ADDR_VAR 0 12
35094: PUSH
35095: LD_VAR 0 2
35099: PPUSH
35100: LD_VAR 0 3
35104: PPUSH
35105: LD_VAR 0 4
35109: PPUSH
35110: LD_VAR 0 5
35114: PPUSH
35115: LD_VAR 0 1
35119: PPUSH
35120: CALL_OW 248
35124: PPUSH
35125: LD_INT 0
35127: PPUSH
35128: CALL 35620 0 6
35132: ST_TO_ADDR
// if not hexes then
35133: LD_VAR 0 12
35137: NOT
35138: IFFALSE 35142
// exit ;
35140: GO 35615
// hex := GetHexInfo ( x , y ) ;
35142: LD_ADDR_VAR 0 15
35146: PUSH
35147: LD_VAR 0 3
35151: PPUSH
35152: LD_VAR 0 4
35156: PPUSH
35157: CALL_OW 546
35161: ST_TO_ADDR
// if hex [ 1 ] then
35162: LD_VAR 0 15
35166: PUSH
35167: LD_INT 1
35169: ARRAY
35170: IFFALSE 35174
// exit ;
35172: GO 35615
// height := hex [ 2 ] ;
35174: LD_ADDR_VAR 0 13
35178: PUSH
35179: LD_VAR 0 15
35183: PUSH
35184: LD_INT 2
35186: ARRAY
35187: ST_TO_ADDR
// for i = 1 to hexes do
35188: LD_ADDR_VAR 0 7
35192: PUSH
35193: DOUBLE
35194: LD_INT 1
35196: DEC
35197: ST_TO_ADDR
35198: LD_VAR 0 12
35202: PUSH
35203: FOR_TO
35204: IFFALSE 35534
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35206: LD_VAR 0 12
35210: PUSH
35211: LD_VAR 0 7
35215: ARRAY
35216: PUSH
35217: LD_INT 1
35219: ARRAY
35220: PPUSH
35221: LD_VAR 0 12
35225: PUSH
35226: LD_VAR 0 7
35230: ARRAY
35231: PUSH
35232: LD_INT 2
35234: ARRAY
35235: PPUSH
35236: CALL_OW 488
35240: NOT
35241: PUSH
35242: LD_VAR 0 12
35246: PUSH
35247: LD_VAR 0 7
35251: ARRAY
35252: PUSH
35253: LD_INT 1
35255: ARRAY
35256: PPUSH
35257: LD_VAR 0 12
35261: PUSH
35262: LD_VAR 0 7
35266: ARRAY
35267: PUSH
35268: LD_INT 2
35270: ARRAY
35271: PPUSH
35272: CALL_OW 428
35276: PUSH
35277: LD_INT 0
35279: GREATER
35280: OR
35281: PUSH
35282: LD_VAR 0 12
35286: PUSH
35287: LD_VAR 0 7
35291: ARRAY
35292: PUSH
35293: LD_INT 1
35295: ARRAY
35296: PPUSH
35297: LD_VAR 0 12
35301: PUSH
35302: LD_VAR 0 7
35306: ARRAY
35307: PUSH
35308: LD_INT 2
35310: ARRAY
35311: PPUSH
35312: CALL_OW 351
35316: OR
35317: IFFALSE 35323
// exit ;
35319: POP
35320: POP
35321: GO 35615
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35323: LD_ADDR_VAR 0 8
35327: PUSH
35328: LD_VAR 0 12
35332: PUSH
35333: LD_VAR 0 7
35337: ARRAY
35338: PUSH
35339: LD_INT 1
35341: ARRAY
35342: PPUSH
35343: LD_VAR 0 12
35347: PUSH
35348: LD_VAR 0 7
35352: ARRAY
35353: PUSH
35354: LD_INT 2
35356: ARRAY
35357: PPUSH
35358: CALL_OW 546
35362: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35363: LD_VAR 0 8
35367: PUSH
35368: LD_INT 1
35370: ARRAY
35371: PUSH
35372: LD_VAR 0 8
35376: PUSH
35377: LD_INT 2
35379: ARRAY
35380: PUSH
35381: LD_VAR 0 13
35385: PUSH
35386: LD_INT 2
35388: PLUS
35389: GREATER
35390: OR
35391: PUSH
35392: LD_VAR 0 8
35396: PUSH
35397: LD_INT 2
35399: ARRAY
35400: PUSH
35401: LD_VAR 0 13
35405: PUSH
35406: LD_INT 2
35408: MINUS
35409: LESS
35410: OR
35411: PUSH
35412: LD_VAR 0 8
35416: PUSH
35417: LD_INT 3
35419: ARRAY
35420: PUSH
35421: LD_INT 0
35423: PUSH
35424: LD_INT 8
35426: PUSH
35427: LD_INT 9
35429: PUSH
35430: LD_INT 10
35432: PUSH
35433: LD_INT 11
35435: PUSH
35436: LD_INT 12
35438: PUSH
35439: LD_INT 13
35441: PUSH
35442: LD_INT 16
35444: PUSH
35445: LD_INT 17
35447: PUSH
35448: LD_INT 18
35450: PUSH
35451: LD_INT 19
35453: PUSH
35454: LD_INT 20
35456: PUSH
35457: LD_INT 21
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: IN
35475: NOT
35476: OR
35477: PUSH
35478: LD_VAR 0 8
35482: PUSH
35483: LD_INT 5
35485: ARRAY
35486: NOT
35487: OR
35488: PUSH
35489: LD_VAR 0 8
35493: PUSH
35494: LD_INT 6
35496: ARRAY
35497: PUSH
35498: LD_INT 1
35500: PUSH
35501: LD_INT 2
35503: PUSH
35504: LD_INT 7
35506: PUSH
35507: LD_INT 9
35509: PUSH
35510: LD_INT 10
35512: PUSH
35513: LD_INT 11
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: IN
35524: NOT
35525: OR
35526: IFFALSE 35532
// exit ;
35528: POP
35529: POP
35530: GO 35615
// end ;
35532: GO 35203
35534: POP
35535: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35536: LD_VAR 0 9
35540: PPUSH
35541: LD_VAR 0 3
35545: PPUSH
35546: LD_VAR 0 4
35550: PPUSH
35551: LD_INT 20
35553: PPUSH
35554: CALL 27538 0 4
35558: PUSH
35559: LD_INT 4
35561: ARRAY
35562: IFFALSE 35566
// exit ;
35564: GO 35615
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35566: LD_VAR 0 2
35570: PUSH
35571: LD_INT 29
35573: PUSH
35574: LD_INT 30
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: IN
35581: PUSH
35582: LD_VAR 0 3
35586: PPUSH
35587: LD_VAR 0 4
35591: PPUSH
35592: LD_VAR 0 9
35596: PPUSH
35597: CALL_OW 440
35601: NOT
35602: AND
35603: IFFALSE 35607
// exit ;
35605: GO 35615
// result := true ;
35607: LD_ADDR_VAR 0 6
35611: PUSH
35612: LD_INT 1
35614: ST_TO_ADDR
// end ;
35615: LD_VAR 0 6
35619: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35620: LD_INT 0
35622: PPUSH
35623: PPUSH
35624: PPUSH
35625: PPUSH
35626: PPUSH
35627: PPUSH
35628: PPUSH
35629: PPUSH
35630: PPUSH
35631: PPUSH
35632: PPUSH
35633: PPUSH
35634: PPUSH
35635: PPUSH
35636: PPUSH
35637: PPUSH
35638: PPUSH
35639: PPUSH
35640: PPUSH
35641: PPUSH
35642: PPUSH
35643: PPUSH
35644: PPUSH
35645: PPUSH
35646: PPUSH
35647: PPUSH
35648: PPUSH
35649: PPUSH
35650: PPUSH
35651: PPUSH
35652: PPUSH
35653: PPUSH
35654: PPUSH
35655: PPUSH
35656: PPUSH
35657: PPUSH
35658: PPUSH
35659: PPUSH
35660: PPUSH
35661: PPUSH
35662: PPUSH
35663: PPUSH
35664: PPUSH
35665: PPUSH
35666: PPUSH
35667: PPUSH
35668: PPUSH
35669: PPUSH
35670: PPUSH
35671: PPUSH
35672: PPUSH
35673: PPUSH
35674: PPUSH
35675: PPUSH
35676: PPUSH
35677: PPUSH
35678: PPUSH
35679: PPUSH
// result = [ ] ;
35680: LD_ADDR_VAR 0 7
35684: PUSH
35685: EMPTY
35686: ST_TO_ADDR
// temp_list = [ ] ;
35687: LD_ADDR_VAR 0 9
35691: PUSH
35692: EMPTY
35693: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35694: LD_VAR 0 4
35698: PUSH
35699: LD_INT 0
35701: PUSH
35702: LD_INT 1
35704: PUSH
35705: LD_INT 2
35707: PUSH
35708: LD_INT 3
35710: PUSH
35711: LD_INT 4
35713: PUSH
35714: LD_INT 5
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: LIST
35724: IN
35725: NOT
35726: PUSH
35727: LD_VAR 0 1
35731: PUSH
35732: LD_INT 0
35734: PUSH
35735: LD_INT 1
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: IN
35742: PUSH
35743: LD_VAR 0 5
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: LD_INT 2
35753: PUSH
35754: LD_INT 3
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: LIST
35761: IN
35762: NOT
35763: AND
35764: OR
35765: IFFALSE 35769
// exit ;
35767: GO 54160
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35769: LD_VAR 0 1
35773: PUSH
35774: LD_INT 6
35776: PUSH
35777: LD_INT 7
35779: PUSH
35780: LD_INT 8
35782: PUSH
35783: LD_INT 13
35785: PUSH
35786: LD_INT 12
35788: PUSH
35789: LD_INT 15
35791: PUSH
35792: LD_INT 11
35794: PUSH
35795: LD_INT 14
35797: PUSH
35798: LD_INT 10
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: IN
35812: IFFALSE 35822
// btype = b_lab ;
35814: LD_ADDR_VAR 0 1
35818: PUSH
35819: LD_INT 6
35821: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35822: LD_VAR 0 6
35826: PUSH
35827: LD_INT 0
35829: PUSH
35830: LD_INT 1
35832: PUSH
35833: LD_INT 2
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: LIST
35840: IN
35841: NOT
35842: PUSH
35843: LD_VAR 0 1
35847: PUSH
35848: LD_INT 0
35850: PUSH
35851: LD_INT 1
35853: PUSH
35854: LD_INT 2
35856: PUSH
35857: LD_INT 3
35859: PUSH
35860: LD_INT 6
35862: PUSH
35863: LD_INT 36
35865: PUSH
35866: LD_INT 4
35868: PUSH
35869: LD_INT 5
35871: PUSH
35872: LD_INT 31
35874: PUSH
35875: LD_INT 32
35877: PUSH
35878: LD_INT 33
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: IN
35894: NOT
35895: PUSH
35896: LD_VAR 0 6
35900: PUSH
35901: LD_INT 1
35903: EQUAL
35904: AND
35905: OR
35906: PUSH
35907: LD_VAR 0 1
35911: PUSH
35912: LD_INT 2
35914: PUSH
35915: LD_INT 3
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: IN
35922: NOT
35923: PUSH
35924: LD_VAR 0 6
35928: PUSH
35929: LD_INT 2
35931: EQUAL
35932: AND
35933: OR
35934: IFFALSE 35944
// mode = 0 ;
35936: LD_ADDR_VAR 0 6
35940: PUSH
35941: LD_INT 0
35943: ST_TO_ADDR
// case mode of 0 :
35944: LD_VAR 0 6
35948: PUSH
35949: LD_INT 0
35951: DOUBLE
35952: EQUAL
35953: IFTRUE 35957
35955: GO 47410
35957: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35958: LD_ADDR_VAR 0 11
35962: PUSH
35963: LD_INT 0
35965: PUSH
35966: LD_INT 0
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 0
35975: PUSH
35976: LD_INT 1
35978: NEG
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: LD_INT 1
35986: PUSH
35987: LD_INT 0
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PUSH
35994: LD_INT 1
35996: PUSH
35997: LD_INT 1
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 0
36006: PUSH
36007: LD_INT 1
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 1
36016: NEG
36017: PUSH
36018: LD_INT 0
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 1
36027: NEG
36028: PUSH
36029: LD_INT 1
36031: NEG
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 1
36039: NEG
36040: PUSH
36041: LD_INT 2
36043: NEG
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 0
36051: PUSH
36052: LD_INT 2
36054: NEG
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 1
36062: PUSH
36063: LD_INT 1
36065: NEG
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 1
36073: PUSH
36074: LD_INT 2
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 0
36083: PUSH
36084: LD_INT 2
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 1
36093: NEG
36094: PUSH
36095: LD_INT 1
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 1
36104: PUSH
36105: LD_INT 3
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 0
36114: PUSH
36115: LD_INT 3
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 1
36124: NEG
36125: PUSH
36126: LD_INT 2
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36151: LD_ADDR_VAR 0 12
36155: PUSH
36156: LD_INT 0
36158: PUSH
36159: LD_INT 0
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 0
36168: PUSH
36169: LD_INT 1
36171: NEG
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: PUSH
36177: LD_INT 1
36179: PUSH
36180: LD_INT 0
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 1
36189: PUSH
36190: LD_INT 1
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 0
36199: PUSH
36200: LD_INT 1
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: LD_INT 1
36209: NEG
36210: PUSH
36211: LD_INT 0
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 1
36220: NEG
36221: PUSH
36222: LD_INT 1
36224: NEG
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 1
36232: PUSH
36233: LD_INT 1
36235: NEG
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 2
36243: PUSH
36244: LD_INT 0
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: LD_INT 2
36253: PUSH
36254: LD_INT 1
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 1
36263: NEG
36264: PUSH
36265: LD_INT 1
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: LD_INT 2
36274: NEG
36275: PUSH
36276: LD_INT 0
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 2
36285: NEG
36286: PUSH
36287: LD_INT 1
36289: NEG
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 2
36297: NEG
36298: PUSH
36299: LD_INT 1
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 3
36308: NEG
36309: PUSH
36310: LD_INT 0
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 3
36319: NEG
36320: PUSH
36321: LD_INT 1
36323: NEG
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36347: LD_ADDR_VAR 0 13
36351: PUSH
36352: LD_INT 0
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 0
36364: PUSH
36365: LD_INT 1
36367: NEG
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 1
36375: PUSH
36376: LD_INT 0
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 1
36385: PUSH
36386: LD_INT 1
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 0
36395: PUSH
36396: LD_INT 1
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 1
36405: NEG
36406: PUSH
36407: LD_INT 0
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 1
36416: NEG
36417: PUSH
36418: LD_INT 1
36420: NEG
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 1
36428: NEG
36429: PUSH
36430: LD_INT 2
36432: NEG
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 2
36440: PUSH
36441: LD_INT 1
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 2
36450: PUSH
36451: LD_INT 2
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 1
36460: PUSH
36461: LD_INT 2
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 2
36470: NEG
36471: PUSH
36472: LD_INT 1
36474: NEG
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 2
36482: NEG
36483: PUSH
36484: LD_INT 2
36486: NEG
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 2
36494: NEG
36495: PUSH
36496: LD_INT 3
36498: NEG
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 3
36506: NEG
36507: PUSH
36508: LD_INT 2
36510: NEG
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 3
36518: NEG
36519: PUSH
36520: LD_INT 3
36522: NEG
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36546: LD_ADDR_VAR 0 14
36550: PUSH
36551: LD_INT 0
36553: PUSH
36554: LD_INT 0
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: LD_INT 1
36566: NEG
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 1
36574: PUSH
36575: LD_INT 0
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 1
36584: PUSH
36585: LD_INT 1
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 0
36594: PUSH
36595: LD_INT 1
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 1
36604: NEG
36605: PUSH
36606: LD_INT 0
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 1
36615: NEG
36616: PUSH
36617: LD_INT 1
36619: NEG
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 1
36627: NEG
36628: PUSH
36629: LD_INT 2
36631: NEG
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 0
36639: PUSH
36640: LD_INT 2
36642: NEG
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 1
36650: PUSH
36651: LD_INT 1
36653: NEG
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 1
36661: PUSH
36662: LD_INT 2
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 0
36671: PUSH
36672: LD_INT 2
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 1
36681: NEG
36682: PUSH
36683: LD_INT 1
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 1
36692: NEG
36693: PUSH
36694: LD_INT 3
36696: NEG
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 0
36704: PUSH
36705: LD_INT 3
36707: NEG
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 1
36715: PUSH
36716: LD_INT 2
36718: NEG
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36742: LD_ADDR_VAR 0 15
36746: PUSH
36747: LD_INT 0
36749: PUSH
36750: LD_INT 0
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 0
36759: PUSH
36760: LD_INT 1
36762: NEG
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 1
36770: PUSH
36771: LD_INT 0
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 1
36780: PUSH
36781: LD_INT 1
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 0
36790: PUSH
36791: LD_INT 1
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 1
36800: NEG
36801: PUSH
36802: LD_INT 0
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 1
36811: NEG
36812: PUSH
36813: LD_INT 1
36815: NEG
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 1
36823: PUSH
36824: LD_INT 1
36826: NEG
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 2
36834: PUSH
36835: LD_INT 0
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 2
36844: PUSH
36845: LD_INT 1
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 1
36854: NEG
36855: PUSH
36856: LD_INT 1
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PUSH
36863: LD_INT 2
36865: NEG
36866: PUSH
36867: LD_INT 0
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: LD_INT 2
36876: NEG
36877: PUSH
36878: LD_INT 1
36880: NEG
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 2
36888: PUSH
36889: LD_INT 1
36891: NEG
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_INT 3
36899: PUSH
36900: LD_INT 0
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 3
36909: PUSH
36910: LD_INT 1
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36935: LD_ADDR_VAR 0 16
36939: PUSH
36940: LD_INT 0
36942: PUSH
36943: LD_INT 0
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 0
36952: PUSH
36953: LD_INT 1
36955: NEG
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 1
36963: PUSH
36964: LD_INT 0
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 1
36973: PUSH
36974: LD_INT 1
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 0
36983: PUSH
36984: LD_INT 1
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 1
36993: NEG
36994: PUSH
36995: LD_INT 0
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 1
37004: NEG
37005: PUSH
37006: LD_INT 1
37008: NEG
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 1
37016: NEG
37017: PUSH
37018: LD_INT 2
37020: NEG
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 2
37028: PUSH
37029: LD_INT 1
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 2
37038: PUSH
37039: LD_INT 2
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 1
37048: PUSH
37049: LD_INT 2
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: LD_INT 2
37058: NEG
37059: PUSH
37060: LD_INT 1
37062: NEG
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PUSH
37068: LD_INT 2
37070: NEG
37071: PUSH
37072: LD_INT 2
37074: NEG
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 3
37082: PUSH
37083: LD_INT 2
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 3
37092: PUSH
37093: LD_INT 3
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_INT 2
37102: PUSH
37103: LD_INT 3
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37128: LD_ADDR_VAR 0 17
37132: PUSH
37133: LD_INT 0
37135: PUSH
37136: LD_INT 0
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 0
37145: PUSH
37146: LD_INT 1
37148: NEG
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 1
37156: PUSH
37157: LD_INT 0
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 1
37166: PUSH
37167: LD_INT 1
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 0
37176: PUSH
37177: LD_INT 1
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 1
37186: NEG
37187: PUSH
37188: LD_INT 0
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 1
37197: NEG
37198: PUSH
37199: LD_INT 1
37201: NEG
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 1
37209: NEG
37210: PUSH
37211: LD_INT 2
37213: NEG
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 0
37221: PUSH
37222: LD_INT 2
37224: NEG
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 1
37232: PUSH
37233: LD_INT 1
37235: NEG
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 2
37243: PUSH
37244: LD_INT 0
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 2
37253: PUSH
37254: LD_INT 1
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 2
37263: PUSH
37264: LD_INT 2
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 1
37273: PUSH
37274: LD_INT 2
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 0
37283: PUSH
37284: LD_INT 2
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 1
37293: NEG
37294: PUSH
37295: LD_INT 1
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 2
37304: NEG
37305: PUSH
37306: LD_INT 0
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 2
37315: NEG
37316: PUSH
37317: LD_INT 1
37319: NEG
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 2
37327: NEG
37328: PUSH
37329: LD_INT 2
37331: NEG
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37358: LD_ADDR_VAR 0 18
37362: PUSH
37363: LD_INT 0
37365: PUSH
37366: LD_INT 0
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 0
37375: PUSH
37376: LD_INT 1
37378: NEG
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 1
37386: PUSH
37387: LD_INT 0
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 1
37396: PUSH
37397: LD_INT 1
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 0
37406: PUSH
37407: LD_INT 1
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 1
37416: NEG
37417: PUSH
37418: LD_INT 0
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 1
37427: NEG
37428: PUSH
37429: LD_INT 1
37431: NEG
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 1
37439: NEG
37440: PUSH
37441: LD_INT 2
37443: NEG
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 0
37451: PUSH
37452: LD_INT 2
37454: NEG
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 1
37462: PUSH
37463: LD_INT 1
37465: NEG
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 2
37473: PUSH
37474: LD_INT 0
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 2
37483: PUSH
37484: LD_INT 1
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 2
37493: PUSH
37494: LD_INT 2
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 1
37503: PUSH
37504: LD_INT 2
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 0
37513: PUSH
37514: LD_INT 2
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 1
37523: NEG
37524: PUSH
37525: LD_INT 1
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 2
37534: NEG
37535: PUSH
37536: LD_INT 0
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 2
37545: NEG
37546: PUSH
37547: LD_INT 1
37549: NEG
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 2
37557: NEG
37558: PUSH
37559: LD_INT 2
37561: NEG
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37588: LD_ADDR_VAR 0 19
37592: PUSH
37593: LD_INT 0
37595: PUSH
37596: LD_INT 0
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 0
37605: PUSH
37606: LD_INT 1
37608: NEG
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 1
37616: PUSH
37617: LD_INT 0
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 1
37626: PUSH
37627: LD_INT 1
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 0
37636: PUSH
37637: LD_INT 1
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 1
37646: NEG
37647: PUSH
37648: LD_INT 0
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 1
37657: NEG
37658: PUSH
37659: LD_INT 1
37661: NEG
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 1
37669: NEG
37670: PUSH
37671: LD_INT 2
37673: NEG
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 0
37681: PUSH
37682: LD_INT 2
37684: NEG
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 1
37692: PUSH
37693: LD_INT 1
37695: NEG
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 2
37703: PUSH
37704: LD_INT 0
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 2
37713: PUSH
37714: LD_INT 1
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 2
37723: PUSH
37724: LD_INT 2
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 1
37733: PUSH
37734: LD_INT 2
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 0
37743: PUSH
37744: LD_INT 2
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: LD_INT 1
37753: NEG
37754: PUSH
37755: LD_INT 1
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 2
37764: NEG
37765: PUSH
37766: LD_INT 0
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 2
37775: NEG
37776: PUSH
37777: LD_INT 1
37779: NEG
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 2
37787: NEG
37788: PUSH
37789: LD_INT 2
37791: NEG
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37818: LD_ADDR_VAR 0 20
37822: PUSH
37823: LD_INT 0
37825: PUSH
37826: LD_INT 0
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 0
37835: PUSH
37836: LD_INT 1
37838: NEG
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 1
37846: PUSH
37847: LD_INT 0
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 1
37856: PUSH
37857: LD_INT 1
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 0
37866: PUSH
37867: LD_INT 1
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 1
37876: NEG
37877: PUSH
37878: LD_INT 0
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 1
37887: NEG
37888: PUSH
37889: LD_INT 1
37891: NEG
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 1
37899: NEG
37900: PUSH
37901: LD_INT 2
37903: NEG
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 0
37911: PUSH
37912: LD_INT 2
37914: NEG
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 1
37922: PUSH
37923: LD_INT 1
37925: NEG
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 2
37933: PUSH
37934: LD_INT 0
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 2
37943: PUSH
37944: LD_INT 1
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 2
37953: PUSH
37954: LD_INT 2
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 1
37963: PUSH
37964: LD_INT 2
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 0
37973: PUSH
37974: LD_INT 2
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 1
37983: NEG
37984: PUSH
37985: LD_INT 1
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 2
37994: NEG
37995: PUSH
37996: LD_INT 0
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 2
38005: NEG
38006: PUSH
38007: LD_INT 1
38009: NEG
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 2
38017: NEG
38018: PUSH
38019: LD_INT 2
38021: NEG
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38048: LD_ADDR_VAR 0 21
38052: PUSH
38053: LD_INT 0
38055: PUSH
38056: LD_INT 0
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 0
38065: PUSH
38066: LD_INT 1
38068: NEG
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 1
38076: PUSH
38077: LD_INT 0
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 1
38086: PUSH
38087: LD_INT 1
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 0
38096: PUSH
38097: LD_INT 1
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 1
38106: NEG
38107: PUSH
38108: LD_INT 0
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 1
38117: NEG
38118: PUSH
38119: LD_INT 1
38121: NEG
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 1
38129: NEG
38130: PUSH
38131: LD_INT 2
38133: NEG
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 0
38141: PUSH
38142: LD_INT 2
38144: NEG
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 1
38152: PUSH
38153: LD_INT 1
38155: NEG
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 2
38163: PUSH
38164: LD_INT 0
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 2
38173: PUSH
38174: LD_INT 1
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 2
38183: PUSH
38184: LD_INT 2
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 1
38193: PUSH
38194: LD_INT 2
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 0
38203: PUSH
38204: LD_INT 2
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 1
38213: NEG
38214: PUSH
38215: LD_INT 1
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 2
38224: NEG
38225: PUSH
38226: LD_INT 0
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 2
38235: NEG
38236: PUSH
38237: LD_INT 1
38239: NEG
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 2
38247: NEG
38248: PUSH
38249: LD_INT 2
38251: NEG
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38278: LD_ADDR_VAR 0 22
38282: PUSH
38283: LD_INT 0
38285: PUSH
38286: LD_INT 0
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 0
38295: PUSH
38296: LD_INT 1
38298: NEG
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 1
38306: PUSH
38307: LD_INT 0
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 1
38316: PUSH
38317: LD_INT 1
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 0
38326: PUSH
38327: LD_INT 1
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 1
38336: NEG
38337: PUSH
38338: LD_INT 0
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 1
38347: NEG
38348: PUSH
38349: LD_INT 1
38351: NEG
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 1
38359: NEG
38360: PUSH
38361: LD_INT 2
38363: NEG
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 0
38371: PUSH
38372: LD_INT 2
38374: NEG
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 1
38382: PUSH
38383: LD_INT 1
38385: NEG
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 2
38393: PUSH
38394: LD_INT 0
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 2
38403: PUSH
38404: LD_INT 1
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 2
38413: PUSH
38414: LD_INT 2
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 1
38423: PUSH
38424: LD_INT 2
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 0
38433: PUSH
38434: LD_INT 2
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 1
38443: NEG
38444: PUSH
38445: LD_INT 1
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 2
38454: NEG
38455: PUSH
38456: LD_INT 0
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 2
38465: NEG
38466: PUSH
38467: LD_INT 1
38469: NEG
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 2
38477: NEG
38478: PUSH
38479: LD_INT 2
38481: NEG
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38508: LD_ADDR_VAR 0 23
38512: PUSH
38513: LD_INT 0
38515: PUSH
38516: LD_INT 0
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 0
38525: PUSH
38526: LD_INT 1
38528: NEG
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 1
38536: PUSH
38537: LD_INT 0
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 1
38546: PUSH
38547: LD_INT 1
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 0
38556: PUSH
38557: LD_INT 1
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 1
38566: NEG
38567: PUSH
38568: LD_INT 0
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 1
38577: NEG
38578: PUSH
38579: LD_INT 1
38581: NEG
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 1
38589: NEG
38590: PUSH
38591: LD_INT 2
38593: NEG
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 0
38601: PUSH
38602: LD_INT 2
38604: NEG
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 1
38612: PUSH
38613: LD_INT 1
38615: NEG
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 2
38623: PUSH
38624: LD_INT 0
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 2
38633: PUSH
38634: LD_INT 1
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 2
38643: PUSH
38644: LD_INT 2
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: PUSH
38651: LD_INT 1
38653: PUSH
38654: LD_INT 2
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 0
38663: PUSH
38664: LD_INT 2
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 1
38673: NEG
38674: PUSH
38675: LD_INT 1
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 2
38684: NEG
38685: PUSH
38686: LD_INT 0
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 2
38695: NEG
38696: PUSH
38697: LD_INT 1
38699: NEG
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 2
38707: NEG
38708: PUSH
38709: LD_INT 2
38711: NEG
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 2
38719: NEG
38720: PUSH
38721: LD_INT 3
38723: NEG
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 1
38731: NEG
38732: PUSH
38733: LD_INT 3
38735: NEG
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 1
38743: PUSH
38744: LD_INT 2
38746: NEG
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 2
38754: PUSH
38755: LD_INT 1
38757: NEG
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38788: LD_ADDR_VAR 0 24
38792: PUSH
38793: LD_INT 0
38795: PUSH
38796: LD_INT 0
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 0
38805: PUSH
38806: LD_INT 1
38808: NEG
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 1
38816: PUSH
38817: LD_INT 0
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 1
38826: PUSH
38827: LD_INT 1
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 0
38836: PUSH
38837: LD_INT 1
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 1
38846: NEG
38847: PUSH
38848: LD_INT 0
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 1
38857: NEG
38858: PUSH
38859: LD_INT 1
38861: NEG
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 1
38869: NEG
38870: PUSH
38871: LD_INT 2
38873: NEG
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 0
38881: PUSH
38882: LD_INT 2
38884: NEG
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 1
38892: PUSH
38893: LD_INT 1
38895: NEG
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 2
38903: PUSH
38904: LD_INT 0
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 2
38913: PUSH
38914: LD_INT 1
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 2
38923: PUSH
38924: LD_INT 2
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 1
38933: PUSH
38934: LD_INT 2
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 0
38943: PUSH
38944: LD_INT 2
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 1
38953: NEG
38954: PUSH
38955: LD_INT 1
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 2
38964: NEG
38965: PUSH
38966: LD_INT 0
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 2
38975: NEG
38976: PUSH
38977: LD_INT 1
38979: NEG
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 2
38987: NEG
38988: PUSH
38989: LD_INT 2
38991: NEG
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 1
38999: PUSH
39000: LD_INT 2
39002: NEG
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 2
39010: PUSH
39011: LD_INT 1
39013: NEG
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 3
39021: PUSH
39022: LD_INT 1
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 3
39031: PUSH
39032: LD_INT 2
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39064: LD_ADDR_VAR 0 25
39068: PUSH
39069: LD_INT 0
39071: PUSH
39072: LD_INT 0
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 0
39081: PUSH
39082: LD_INT 1
39084: NEG
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 1
39092: PUSH
39093: LD_INT 0
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 1
39102: PUSH
39103: LD_INT 1
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 0
39112: PUSH
39113: LD_INT 1
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 1
39122: NEG
39123: PUSH
39124: LD_INT 0
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 1
39133: NEG
39134: PUSH
39135: LD_INT 1
39137: NEG
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 1
39145: NEG
39146: PUSH
39147: LD_INT 2
39149: NEG
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 0
39157: PUSH
39158: LD_INT 2
39160: NEG
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 1
39168: PUSH
39169: LD_INT 1
39171: NEG
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 2
39179: PUSH
39180: LD_INT 0
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 2
39189: PUSH
39190: LD_INT 1
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 2
39199: PUSH
39200: LD_INT 2
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 1
39209: PUSH
39210: LD_INT 2
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 0
39219: PUSH
39220: LD_INT 2
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 1
39229: NEG
39230: PUSH
39231: LD_INT 1
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 2
39240: NEG
39241: PUSH
39242: LD_INT 0
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 2
39251: NEG
39252: PUSH
39253: LD_INT 1
39255: NEG
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 2
39263: NEG
39264: PUSH
39265: LD_INT 2
39267: NEG
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 3
39275: PUSH
39276: LD_INT 1
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 3
39285: PUSH
39286: LD_INT 2
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 2
39295: PUSH
39296: LD_INT 3
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 1
39305: PUSH
39306: LD_INT 3
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39338: LD_ADDR_VAR 0 26
39342: PUSH
39343: LD_INT 0
39345: PUSH
39346: LD_INT 0
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 0
39355: PUSH
39356: LD_INT 1
39358: NEG
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 1
39366: PUSH
39367: LD_INT 0
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 1
39376: PUSH
39377: LD_INT 1
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 0
39386: PUSH
39387: LD_INT 1
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 1
39396: NEG
39397: PUSH
39398: LD_INT 0
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 1
39407: NEG
39408: PUSH
39409: LD_INT 1
39411: NEG
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 1
39419: NEG
39420: PUSH
39421: LD_INT 2
39423: NEG
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 0
39431: PUSH
39432: LD_INT 2
39434: NEG
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 1
39442: PUSH
39443: LD_INT 1
39445: NEG
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 2
39453: PUSH
39454: LD_INT 0
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 2
39463: PUSH
39464: LD_INT 1
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 2
39473: PUSH
39474: LD_INT 2
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 1
39483: PUSH
39484: LD_INT 2
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: LD_INT 2
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 1
39503: NEG
39504: PUSH
39505: LD_INT 1
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 2
39514: NEG
39515: PUSH
39516: LD_INT 0
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 2
39525: NEG
39526: PUSH
39527: LD_INT 1
39529: NEG
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 2
39537: NEG
39538: PUSH
39539: LD_INT 2
39541: NEG
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 2
39549: PUSH
39550: LD_INT 3
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 1
39559: PUSH
39560: LD_INT 3
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 1
39569: NEG
39570: PUSH
39571: LD_INT 2
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 2
39580: NEG
39581: PUSH
39582: LD_INT 1
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39614: LD_ADDR_VAR 0 27
39618: PUSH
39619: LD_INT 0
39621: PUSH
39622: LD_INT 0
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: LD_INT 1
39634: NEG
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 1
39642: PUSH
39643: LD_INT 0
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 1
39652: PUSH
39653: LD_INT 1
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 0
39662: PUSH
39663: LD_INT 1
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 1
39672: NEG
39673: PUSH
39674: LD_INT 0
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 1
39683: NEG
39684: PUSH
39685: LD_INT 1
39687: NEG
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 1
39695: NEG
39696: PUSH
39697: LD_INT 2
39699: NEG
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 0
39707: PUSH
39708: LD_INT 2
39710: NEG
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 1
39718: PUSH
39719: LD_INT 1
39721: NEG
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 2
39729: PUSH
39730: LD_INT 0
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 2
39739: PUSH
39740: LD_INT 1
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 2
39749: PUSH
39750: LD_INT 2
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 1
39759: PUSH
39760: LD_INT 2
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 0
39769: PUSH
39770: LD_INT 2
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 1
39779: NEG
39780: PUSH
39781: LD_INT 1
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 2
39790: NEG
39791: PUSH
39792: LD_INT 0
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 2
39801: NEG
39802: PUSH
39803: LD_INT 1
39805: NEG
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 2
39813: NEG
39814: PUSH
39815: LD_INT 2
39817: NEG
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 1
39825: NEG
39826: PUSH
39827: LD_INT 2
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 2
39836: NEG
39837: PUSH
39838: LD_INT 1
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 3
39847: NEG
39848: PUSH
39849: LD_INT 1
39851: NEG
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 3
39859: NEG
39860: PUSH
39861: LD_INT 2
39863: NEG
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39894: LD_ADDR_VAR 0 28
39898: PUSH
39899: LD_INT 0
39901: PUSH
39902: LD_INT 0
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 0
39911: PUSH
39912: LD_INT 1
39914: NEG
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 1
39922: PUSH
39923: LD_INT 0
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 1
39932: PUSH
39933: LD_INT 1
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 0
39942: PUSH
39943: LD_INT 1
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 1
39952: NEG
39953: PUSH
39954: LD_INT 0
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 1
39963: NEG
39964: PUSH
39965: LD_INT 1
39967: NEG
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 1
39975: NEG
39976: PUSH
39977: LD_INT 2
39979: NEG
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 0
39987: PUSH
39988: LD_INT 2
39990: NEG
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 1
39998: PUSH
39999: LD_INT 1
40001: NEG
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 2
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 2
40019: PUSH
40020: LD_INT 1
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 2
40029: PUSH
40030: LD_INT 2
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 1
40039: PUSH
40040: LD_INT 2
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 0
40049: PUSH
40050: LD_INT 2
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 1
40059: NEG
40060: PUSH
40061: LD_INT 1
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 2
40070: NEG
40071: PUSH
40072: LD_INT 0
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 2
40081: NEG
40082: PUSH
40083: LD_INT 1
40085: NEG
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 2
40093: NEG
40094: PUSH
40095: LD_INT 2
40097: NEG
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 2
40105: NEG
40106: PUSH
40107: LD_INT 3
40109: NEG
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 1
40117: NEG
40118: PUSH
40119: LD_INT 3
40121: NEG
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 3
40129: NEG
40130: PUSH
40131: LD_INT 1
40133: NEG
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 3
40141: NEG
40142: PUSH
40143: LD_INT 2
40145: NEG
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40176: LD_ADDR_VAR 0 29
40180: PUSH
40181: LD_INT 0
40183: PUSH
40184: LD_INT 0
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 0
40193: PUSH
40194: LD_INT 1
40196: NEG
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 1
40204: PUSH
40205: LD_INT 0
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 1
40214: PUSH
40215: LD_INT 1
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 0
40224: PUSH
40225: LD_INT 1
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 1
40234: NEG
40235: PUSH
40236: LD_INT 0
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 1
40245: NEG
40246: PUSH
40247: LD_INT 1
40249: NEG
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 1
40257: NEG
40258: PUSH
40259: LD_INT 2
40261: NEG
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 0
40269: PUSH
40270: LD_INT 2
40272: NEG
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 1
40280: PUSH
40281: LD_INT 1
40283: NEG
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 2
40291: PUSH
40292: LD_INT 0
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 2
40301: PUSH
40302: LD_INT 1
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 1
40311: PUSH
40312: LD_INT 2
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 0
40321: PUSH
40322: LD_INT 2
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 1
40331: NEG
40332: PUSH
40333: LD_INT 1
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 2
40342: NEG
40343: PUSH
40344: LD_INT 1
40346: NEG
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 2
40354: NEG
40355: PUSH
40356: LD_INT 2
40358: NEG
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 2
40366: NEG
40367: PUSH
40368: LD_INT 3
40370: NEG
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 2
40378: PUSH
40379: LD_INT 1
40381: NEG
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 3
40389: PUSH
40390: LD_INT 1
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 1
40399: PUSH
40400: LD_INT 3
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 1
40409: NEG
40410: PUSH
40411: LD_INT 2
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 3
40420: NEG
40421: PUSH
40422: LD_INT 2
40424: NEG
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40455: LD_ADDR_VAR 0 30
40459: PUSH
40460: LD_INT 0
40462: PUSH
40463: LD_INT 0
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 0
40472: PUSH
40473: LD_INT 1
40475: NEG
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 1
40483: PUSH
40484: LD_INT 0
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 1
40493: PUSH
40494: LD_INT 1
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 0
40503: PUSH
40504: LD_INT 1
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 1
40513: NEG
40514: PUSH
40515: LD_INT 0
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 1
40524: NEG
40525: PUSH
40526: LD_INT 1
40528: NEG
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 1
40536: NEG
40537: PUSH
40538: LD_INT 2
40540: NEG
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 0
40548: PUSH
40549: LD_INT 2
40551: NEG
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 1
40559: PUSH
40560: LD_INT 1
40562: NEG
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 2
40570: PUSH
40571: LD_INT 0
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 2
40580: PUSH
40581: LD_INT 1
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 2
40590: PUSH
40591: LD_INT 2
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 1
40600: PUSH
40601: LD_INT 2
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 1
40610: NEG
40611: PUSH
40612: LD_INT 1
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 2
40621: NEG
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 2
40632: NEG
40633: PUSH
40634: LD_INT 1
40636: NEG
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 1
40644: NEG
40645: PUSH
40646: LD_INT 3
40648: NEG
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: LD_INT 2
40659: NEG
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 3
40667: PUSH
40668: LD_INT 2
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 2
40677: PUSH
40678: LD_INT 3
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 2
40687: NEG
40688: PUSH
40689: LD_INT 1
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 3
40698: NEG
40699: PUSH
40700: LD_INT 1
40702: NEG
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40733: LD_ADDR_VAR 0 31
40737: PUSH
40738: LD_INT 0
40740: PUSH
40741: LD_INT 0
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 0
40750: PUSH
40751: LD_INT 1
40753: NEG
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 1
40761: PUSH
40762: LD_INT 0
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 1
40771: PUSH
40772: LD_INT 1
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 0
40781: PUSH
40782: LD_INT 1
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 1
40791: NEG
40792: PUSH
40793: LD_INT 0
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 1
40802: NEG
40803: PUSH
40804: LD_INT 1
40806: NEG
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 1
40814: NEG
40815: PUSH
40816: LD_INT 2
40818: NEG
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 1
40826: PUSH
40827: LD_INT 1
40829: NEG
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 2
40837: PUSH
40838: LD_INT 0
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 2
40847: PUSH
40848: LD_INT 1
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 2
40857: PUSH
40858: LD_INT 2
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 1
40867: PUSH
40868: LD_INT 2
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: LD_INT 2
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 1
40887: NEG
40888: PUSH
40889: LD_INT 1
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 2
40898: NEG
40899: PUSH
40900: LD_INT 1
40902: NEG
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 2
40910: NEG
40911: PUSH
40912: LD_INT 2
40914: NEG
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 2
40922: NEG
40923: PUSH
40924: LD_INT 3
40926: NEG
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 2
40934: PUSH
40935: LD_INT 1
40937: NEG
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 3
40945: PUSH
40946: LD_INT 1
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 1
40955: PUSH
40956: LD_INT 3
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 1
40965: NEG
40966: PUSH
40967: LD_INT 2
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 3
40976: NEG
40977: PUSH
40978: LD_INT 2
40980: NEG
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41011: LD_ADDR_VAR 0 32
41015: PUSH
41016: LD_INT 0
41018: PUSH
41019: LD_INT 0
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 0
41028: PUSH
41029: LD_INT 1
41031: NEG
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 1
41039: PUSH
41040: LD_INT 0
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 1
41049: PUSH
41050: LD_INT 1
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 0
41059: PUSH
41060: LD_INT 1
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 1
41069: NEG
41070: PUSH
41071: LD_INT 0
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 1
41080: NEG
41081: PUSH
41082: LD_INT 1
41084: NEG
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 1
41092: NEG
41093: PUSH
41094: LD_INT 2
41096: NEG
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 0
41104: PUSH
41105: LD_INT 2
41107: NEG
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 1
41115: PUSH
41116: LD_INT 1
41118: NEG
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 2
41126: PUSH
41127: LD_INT 1
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 2
41136: PUSH
41137: LD_INT 2
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 1
41146: PUSH
41147: LD_INT 2
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: LD_INT 2
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 1
41166: NEG
41167: PUSH
41168: LD_INT 1
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 2
41177: NEG
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 2
41188: NEG
41189: PUSH
41190: LD_INT 1
41192: NEG
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 1
41200: NEG
41201: PUSH
41202: LD_INT 3
41204: NEG
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 1
41212: PUSH
41213: LD_INT 2
41215: NEG
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 3
41223: PUSH
41224: LD_INT 2
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 2
41233: PUSH
41234: LD_INT 3
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 2
41243: NEG
41244: PUSH
41245: LD_INT 1
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 3
41254: NEG
41255: PUSH
41256: LD_INT 1
41258: NEG
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41289: LD_ADDR_VAR 0 33
41293: PUSH
41294: LD_INT 0
41296: PUSH
41297: LD_INT 0
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: LD_INT 1
41309: NEG
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 1
41317: PUSH
41318: LD_INT 0
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 1
41327: PUSH
41328: LD_INT 1
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 0
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 1
41347: NEG
41348: PUSH
41349: LD_INT 0
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 1
41358: NEG
41359: PUSH
41360: LD_INT 1
41362: NEG
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: LD_INT 2
41374: NEG
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 1
41382: PUSH
41383: LD_INT 1
41385: NEG
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 2
41393: PUSH
41394: LD_INT 0
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 2
41403: PUSH
41404: LD_INT 1
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 1
41413: PUSH
41414: LD_INT 2
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 0
41423: PUSH
41424: LD_INT 2
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 1
41433: NEG
41434: PUSH
41435: LD_INT 1
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 2
41444: NEG
41445: PUSH
41446: LD_INT 0
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 2
41455: NEG
41456: PUSH
41457: LD_INT 1
41459: NEG
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 2
41467: NEG
41468: PUSH
41469: LD_INT 2
41471: NEG
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 2
41479: NEG
41480: PUSH
41481: LD_INT 3
41483: NEG
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 2
41491: PUSH
41492: LD_INT 1
41494: NEG
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 3
41502: PUSH
41503: LD_INT 1
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 1
41512: PUSH
41513: LD_INT 3
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 1
41522: NEG
41523: PUSH
41524: LD_INT 2
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 3
41533: NEG
41534: PUSH
41535: LD_INT 2
41537: NEG
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41568: LD_ADDR_VAR 0 34
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: LD_INT 0
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: LD_INT 1
41588: NEG
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 1
41596: PUSH
41597: LD_INT 0
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 1
41606: PUSH
41607: LD_INT 1
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 0
41616: PUSH
41617: LD_INT 1
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 1
41626: NEG
41627: PUSH
41628: LD_INT 0
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 1
41637: NEG
41638: PUSH
41639: LD_INT 1
41641: NEG
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 1
41649: NEG
41650: PUSH
41651: LD_INT 2
41653: NEG
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 0
41661: PUSH
41662: LD_INT 2
41664: NEG
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 1
41672: PUSH
41673: LD_INT 1
41675: NEG
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 2
41683: PUSH
41684: LD_INT 1
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 2
41693: PUSH
41694: LD_INT 2
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 1
41703: PUSH
41704: LD_INT 2
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 1
41713: NEG
41714: PUSH
41715: LD_INT 1
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 2
41724: NEG
41725: PUSH
41726: LD_INT 0
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 2
41735: NEG
41736: PUSH
41737: LD_INT 1
41739: NEG
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 2
41747: NEG
41748: PUSH
41749: LD_INT 2
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 1
41759: NEG
41760: PUSH
41761: LD_INT 3
41763: NEG
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 1
41771: PUSH
41772: LD_INT 2
41774: NEG
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 3
41782: PUSH
41783: LD_INT 2
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 2
41792: PUSH
41793: LD_INT 3
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 2
41802: NEG
41803: PUSH
41804: LD_INT 1
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 3
41813: NEG
41814: PUSH
41815: LD_INT 1
41817: NEG
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41848: LD_ADDR_VAR 0 35
41852: PUSH
41853: LD_INT 0
41855: PUSH
41856: LD_INT 0
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 0
41865: PUSH
41866: LD_INT 1
41868: NEG
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 1
41876: PUSH
41877: LD_INT 0
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 1
41886: PUSH
41887: LD_INT 1
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 0
41896: PUSH
41897: LD_INT 1
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 1
41906: NEG
41907: PUSH
41908: LD_INT 0
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 1
41917: NEG
41918: PUSH
41919: LD_INT 1
41921: NEG
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 2
41929: PUSH
41930: LD_INT 1
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 2
41939: NEG
41940: PUSH
41941: LD_INT 1
41943: NEG
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41960: LD_ADDR_VAR 0 36
41964: PUSH
41965: LD_INT 0
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 0
41977: PUSH
41978: LD_INT 1
41980: NEG
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 1
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 1
41998: PUSH
41999: LD_INT 1
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: LD_INT 1
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 1
42018: NEG
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 1
42029: NEG
42030: PUSH
42031: LD_INT 1
42033: NEG
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 1
42041: NEG
42042: PUSH
42043: LD_INT 2
42045: NEG
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: LD_INT 2
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42072: LD_ADDR_VAR 0 37
42076: PUSH
42077: LD_INT 0
42079: PUSH
42080: LD_INT 0
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 0
42089: PUSH
42090: LD_INT 1
42092: NEG
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 1
42100: PUSH
42101: LD_INT 0
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: LD_INT 1
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: LD_INT 1
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 1
42130: NEG
42131: PUSH
42132: LD_INT 0
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 1
42141: NEG
42142: PUSH
42143: LD_INT 1
42145: NEG
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 1
42153: PUSH
42154: LD_INT 1
42156: NEG
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 1
42164: NEG
42165: PUSH
42166: LD_INT 1
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42184: LD_ADDR_VAR 0 38
42188: PUSH
42189: LD_INT 0
42191: PUSH
42192: LD_INT 0
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 0
42201: PUSH
42202: LD_INT 1
42204: NEG
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 1
42212: PUSH
42213: LD_INT 0
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 1
42222: PUSH
42223: LD_INT 1
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 0
42232: PUSH
42233: LD_INT 1
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 1
42242: NEG
42243: PUSH
42244: LD_INT 0
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 1
42253: NEG
42254: PUSH
42255: LD_INT 1
42257: NEG
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 2
42265: PUSH
42266: LD_INT 1
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 2
42275: NEG
42276: PUSH
42277: LD_INT 1
42279: NEG
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42296: LD_ADDR_VAR 0 39
42300: PUSH
42301: LD_INT 0
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 0
42313: PUSH
42314: LD_INT 1
42316: NEG
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 1
42324: PUSH
42325: LD_INT 0
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 1
42334: PUSH
42335: LD_INT 1
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: LD_INT 1
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 1
42354: NEG
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 1
42365: NEG
42366: PUSH
42367: LD_INT 1
42369: NEG
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 1
42377: NEG
42378: PUSH
42379: LD_INT 2
42381: NEG
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 1
42389: PUSH
42390: LD_INT 2
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42408: LD_ADDR_VAR 0 40
42412: PUSH
42413: LD_INT 0
42415: PUSH
42416: LD_INT 0
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 0
42425: PUSH
42426: LD_INT 1
42428: NEG
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 1
42436: PUSH
42437: LD_INT 0
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 1
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 0
42456: PUSH
42457: LD_INT 1
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 1
42466: NEG
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 1
42477: NEG
42478: PUSH
42479: LD_INT 1
42481: NEG
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 1
42489: PUSH
42490: LD_INT 1
42492: NEG
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42520: LD_ADDR_VAR 0 41
42524: PUSH
42525: LD_INT 0
42527: PUSH
42528: LD_INT 0
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: LD_INT 1
42540: NEG
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 1
42548: PUSH
42549: LD_INT 0
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 1
42558: PUSH
42559: LD_INT 1
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: LD_INT 1
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 1
42578: NEG
42579: PUSH
42580: LD_INT 0
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 1
42589: NEG
42590: PUSH
42591: LD_INT 1
42593: NEG
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 1
42601: NEG
42602: PUSH
42603: LD_INT 2
42605: NEG
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 1
42613: PUSH
42614: LD_INT 1
42616: NEG
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 2
42624: PUSH
42625: LD_INT 0
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 2
42634: PUSH
42635: LD_INT 1
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 2
42644: PUSH
42645: LD_INT 2
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 1
42654: PUSH
42655: LD_INT 2
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 1
42664: NEG
42665: PUSH
42666: LD_INT 1
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 2
42675: NEG
42676: PUSH
42677: LD_INT 0
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 2
42686: NEG
42687: PUSH
42688: LD_INT 1
42690: NEG
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 2
42698: NEG
42699: PUSH
42700: LD_INT 2
42702: NEG
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 2
42710: NEG
42711: PUSH
42712: LD_INT 3
42714: NEG
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 2
42722: PUSH
42723: LD_INT 1
42725: NEG
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 3
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 3
42743: PUSH
42744: LD_INT 1
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 3
42753: PUSH
42754: LD_INT 2
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 3
42763: PUSH
42764: LD_INT 3
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 2
42773: PUSH
42774: LD_INT 3
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 2
42783: NEG
42784: PUSH
42785: LD_INT 1
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 3
42794: NEG
42795: PUSH
42796: LD_INT 0
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 3
42805: NEG
42806: PUSH
42807: LD_INT 1
42809: NEG
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 3
42817: NEG
42818: PUSH
42819: LD_INT 2
42821: NEG
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 3
42829: NEG
42830: PUSH
42831: LD_INT 3
42833: NEG
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42870: LD_ADDR_VAR 0 42
42874: PUSH
42875: LD_INT 0
42877: PUSH
42878: LD_INT 0
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 0
42887: PUSH
42888: LD_INT 1
42890: NEG
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 1
42898: PUSH
42899: LD_INT 0
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 1
42908: PUSH
42909: LD_INT 1
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 0
42918: PUSH
42919: LD_INT 1
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 1
42928: NEG
42929: PUSH
42930: LD_INT 0
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 1
42939: NEG
42940: PUSH
42941: LD_INT 1
42943: NEG
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 1
42951: NEG
42952: PUSH
42953: LD_INT 2
42955: NEG
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: LD_INT 2
42966: NEG
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 1
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 2
42985: PUSH
42986: LD_INT 1
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 2
42995: PUSH
42996: LD_INT 2
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 1
43005: PUSH
43006: LD_INT 2
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: LD_INT 2
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 1
43025: NEG
43026: PUSH
43027: LD_INT 1
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 2
43036: NEG
43037: PUSH
43038: LD_INT 1
43040: NEG
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 2
43048: NEG
43049: PUSH
43050: LD_INT 2
43052: NEG
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 2
43060: NEG
43061: PUSH
43062: LD_INT 3
43064: NEG
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 1
43072: NEG
43073: PUSH
43074: LD_INT 3
43076: NEG
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 0
43084: PUSH
43085: LD_INT 3
43087: NEG
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 1
43095: PUSH
43096: LD_INT 2
43098: NEG
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 3
43106: PUSH
43107: LD_INT 2
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 3
43116: PUSH
43117: LD_INT 3
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 2
43126: PUSH
43127: LD_INT 3
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 1
43136: PUSH
43137: LD_INT 3
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 0
43146: PUSH
43147: LD_INT 3
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: NEG
43157: PUSH
43158: LD_INT 2
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 3
43167: NEG
43168: PUSH
43169: LD_INT 2
43171: NEG
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 3
43179: NEG
43180: PUSH
43181: LD_INT 3
43183: NEG
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43220: LD_ADDR_VAR 0 43
43224: PUSH
43225: LD_INT 0
43227: PUSH
43228: LD_INT 0
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 0
43237: PUSH
43238: LD_INT 1
43240: NEG
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 1
43248: PUSH
43249: LD_INT 0
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 1
43258: PUSH
43259: LD_INT 1
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: LD_INT 1
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 1
43278: NEG
43279: PUSH
43280: LD_INT 0
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 1
43289: NEG
43290: PUSH
43291: LD_INT 1
43293: NEG
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 1
43301: NEG
43302: PUSH
43303: LD_INT 2
43305: NEG
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 0
43313: PUSH
43314: LD_INT 2
43316: NEG
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 1
43324: PUSH
43325: LD_INT 1
43327: NEG
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 2
43335: PUSH
43336: LD_INT 0
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 2
43345: PUSH
43346: LD_INT 1
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 1
43355: PUSH
43356: LD_INT 2
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 0
43365: PUSH
43366: LD_INT 2
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 1
43375: NEG
43376: PUSH
43377: LD_INT 1
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 2
43386: NEG
43387: PUSH
43388: LD_INT 0
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 2
43397: NEG
43398: PUSH
43399: LD_INT 1
43401: NEG
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 1
43409: NEG
43410: PUSH
43411: LD_INT 3
43413: NEG
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 0
43421: PUSH
43422: LD_INT 3
43424: NEG
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 1
43432: PUSH
43433: LD_INT 2
43435: NEG
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 2
43443: PUSH
43444: LD_INT 1
43446: NEG
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 3
43454: PUSH
43455: LD_INT 0
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 3
43464: PUSH
43465: LD_INT 1
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 1
43474: PUSH
43475: LD_INT 3
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: LD_INT 3
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 1
43494: NEG
43495: PUSH
43496: LD_INT 2
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 2
43505: NEG
43506: PUSH
43507: LD_INT 1
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 3
43516: NEG
43517: PUSH
43518: LD_INT 0
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 3
43527: NEG
43528: PUSH
43529: LD_INT 1
43531: NEG
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43568: LD_ADDR_VAR 0 44
43572: PUSH
43573: LD_INT 0
43575: PUSH
43576: LD_INT 0
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 0
43585: PUSH
43586: LD_INT 1
43588: NEG
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 1
43596: PUSH
43597: LD_INT 0
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: LD_INT 1
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 0
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 1
43626: NEG
43627: PUSH
43628: LD_INT 0
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 1
43637: NEG
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 1
43649: NEG
43650: PUSH
43651: LD_INT 2
43653: NEG
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 1
43661: PUSH
43662: LD_INT 1
43664: NEG
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 2
43672: PUSH
43673: LD_INT 0
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 2
43682: PUSH
43683: LD_INT 1
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 2
43692: PUSH
43693: LD_INT 2
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 1
43702: PUSH
43703: LD_INT 2
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 1
43712: NEG
43713: PUSH
43714: LD_INT 1
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 2
43723: NEG
43724: PUSH
43725: LD_INT 0
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 2
43734: NEG
43735: PUSH
43736: LD_INT 1
43738: NEG
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 2
43746: NEG
43747: PUSH
43748: LD_INT 2
43750: NEG
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 2
43758: NEG
43759: PUSH
43760: LD_INT 3
43762: NEG
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 2
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 3
43781: PUSH
43782: LD_INT 0
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 3
43791: PUSH
43792: LD_INT 1
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 3
43801: PUSH
43802: LD_INT 2
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 3
43811: PUSH
43812: LD_INT 3
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 2
43821: PUSH
43822: LD_INT 3
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 2
43831: NEG
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 3
43842: NEG
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 3
43853: NEG
43854: PUSH
43855: LD_INT 1
43857: NEG
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 3
43865: NEG
43866: PUSH
43867: LD_INT 2
43869: NEG
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 3
43877: NEG
43878: PUSH
43879: LD_INT 3
43881: NEG
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43918: LD_ADDR_VAR 0 45
43922: PUSH
43923: LD_INT 0
43925: PUSH
43926: LD_INT 0
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: LD_INT 1
43938: NEG
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 1
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 0
43966: PUSH
43967: LD_INT 1
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 1
43976: NEG
43977: PUSH
43978: LD_INT 0
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 1
43987: NEG
43988: PUSH
43989: LD_INT 1
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 1
43999: NEG
44000: PUSH
44001: LD_INT 2
44003: NEG
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 0
44011: PUSH
44012: LD_INT 2
44014: NEG
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: PUSH
44023: LD_INT 1
44025: NEG
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 2
44033: PUSH
44034: LD_INT 1
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 2
44043: PUSH
44044: LD_INT 2
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 1
44053: PUSH
44054: LD_INT 2
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 0
44063: PUSH
44064: LD_INT 2
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 1
44073: NEG
44074: PUSH
44075: LD_INT 1
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 2
44084: NEG
44085: PUSH
44086: LD_INT 1
44088: NEG
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 2
44096: NEG
44097: PUSH
44098: LD_INT 2
44100: NEG
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 2
44108: NEG
44109: PUSH
44110: LD_INT 3
44112: NEG
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: LD_INT 3
44124: NEG
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 0
44132: PUSH
44133: LD_INT 3
44135: NEG
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 1
44143: PUSH
44144: LD_INT 2
44146: NEG
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 3
44154: PUSH
44155: LD_INT 2
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 3
44164: PUSH
44165: LD_INT 3
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 2
44174: PUSH
44175: LD_INT 3
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 1
44184: PUSH
44185: LD_INT 3
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 0
44194: PUSH
44195: LD_INT 3
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 1
44204: NEG
44205: PUSH
44206: LD_INT 2
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 3
44215: NEG
44216: PUSH
44217: LD_INT 2
44219: NEG
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 3
44227: NEG
44228: PUSH
44229: LD_INT 3
44231: NEG
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44268: LD_ADDR_VAR 0 46
44272: PUSH
44273: LD_INT 0
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: LD_INT 1
44288: NEG
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 1
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 1
44306: PUSH
44307: LD_INT 1
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 0
44316: PUSH
44317: LD_INT 1
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: LD_INT 0
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 1
44337: NEG
44338: PUSH
44339: LD_INT 1
44341: NEG
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 1
44349: NEG
44350: PUSH
44351: LD_INT 2
44353: NEG
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 0
44361: PUSH
44362: LD_INT 2
44364: NEG
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: LD_INT 1
44375: NEG
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 2
44383: PUSH
44384: LD_INT 0
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 2
44393: PUSH
44394: LD_INT 1
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: PUSH
44404: LD_INT 2
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 0
44413: PUSH
44414: LD_INT 2
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 1
44423: NEG
44424: PUSH
44425: LD_INT 1
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 2
44434: NEG
44435: PUSH
44436: LD_INT 0
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 2
44445: NEG
44446: PUSH
44447: LD_INT 1
44449: NEG
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 1
44457: NEG
44458: PUSH
44459: LD_INT 3
44461: NEG
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 0
44469: PUSH
44470: LD_INT 3
44472: NEG
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 1
44480: PUSH
44481: LD_INT 2
44483: NEG
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 2
44491: PUSH
44492: LD_INT 1
44494: NEG
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 3
44502: PUSH
44503: LD_INT 0
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 3
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 1
44522: PUSH
44523: LD_INT 3
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 0
44532: PUSH
44533: LD_INT 3
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: NEG
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 2
44553: NEG
44554: PUSH
44555: LD_INT 1
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 3
44564: NEG
44565: PUSH
44566: LD_INT 0
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 3
44575: NEG
44576: PUSH
44577: LD_INT 1
44579: NEG
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44616: LD_ADDR_VAR 0 47
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: LD_INT 0
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: LD_INT 1
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 0
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 1
44674: NEG
44675: PUSH
44676: LD_INT 0
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 1
44685: NEG
44686: PUSH
44687: LD_INT 1
44689: NEG
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 1
44697: NEG
44698: PUSH
44699: LD_INT 2
44701: NEG
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 0
44709: PUSH
44710: LD_INT 2
44712: NEG
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 1
44720: PUSH
44721: LD_INT 1
44723: NEG
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 2
44731: NEG
44732: PUSH
44733: LD_INT 1
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 2
44743: NEG
44744: PUSH
44745: LD_INT 2
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44767: LD_ADDR_VAR 0 48
44771: PUSH
44772: LD_INT 0
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 0
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 1
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 1
44805: PUSH
44806: LD_INT 1
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 0
44815: PUSH
44816: LD_INT 1
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 1
44825: NEG
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 1
44836: NEG
44837: PUSH
44838: LD_INT 1
44840: NEG
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 1
44848: NEG
44849: PUSH
44850: LD_INT 2
44852: NEG
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: LD_INT 2
44863: NEG
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: PUSH
44872: LD_INT 1
44874: NEG
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 2
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 2
44892: PUSH
44893: LD_INT 1
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44914: LD_ADDR_VAR 0 49
44918: PUSH
44919: LD_INT 0
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: LD_INT 1
44934: NEG
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 1
44942: PUSH
44943: LD_INT 0
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 1
44952: PUSH
44953: LD_INT 1
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: LD_INT 1
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 1
44972: NEG
44973: PUSH
44974: LD_INT 0
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 1
44983: NEG
44984: PUSH
44985: LD_INT 1
44987: NEG
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 1
44995: PUSH
44996: LD_INT 1
44998: NEG
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 2
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 2
45016: PUSH
45017: LD_INT 1
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 2
45026: PUSH
45027: LD_INT 2
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: LD_INT 2
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45058: LD_ADDR_VAR 0 50
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: LD_INT 1
45078: NEG
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: PUSH
45097: LD_INT 1
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: NEG
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 2
45139: PUSH
45140: LD_INT 1
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 2
45149: PUSH
45150: LD_INT 2
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 1
45159: PUSH
45160: LD_INT 2
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 0
45169: PUSH
45170: LD_INT 2
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 1
45179: NEG
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45202: LD_ADDR_VAR 0 51
45206: PUSH
45207: LD_INT 0
45209: PUSH
45210: LD_INT 0
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: LD_INT 1
45222: NEG
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 1
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: PUSH
45241: LD_INT 1
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: LD_INT 1
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: LD_INT 1
45275: NEG
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: LD_INT 2
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: LD_INT 2
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 1
45303: NEG
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 2
45314: NEG
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 2
45325: NEG
45326: PUSH
45327: LD_INT 1
45329: NEG
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45349: LD_ADDR_VAR 0 52
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 0
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: LD_INT 0
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 0
45397: PUSH
45398: LD_INT 1
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 1
45407: NEG
45408: PUSH
45409: LD_INT 0
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 1
45418: NEG
45419: PUSH
45420: LD_INT 1
45422: NEG
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 1
45430: NEG
45431: PUSH
45432: LD_INT 2
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: LD_INT 1
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 2
45453: NEG
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 2
45464: NEG
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 2
45476: NEG
45477: PUSH
45478: LD_INT 2
45480: NEG
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45500: LD_ADDR_VAR 0 53
45504: PUSH
45505: LD_INT 0
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: LD_INT 1
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: PUSH
45539: LD_INT 1
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 1
45558: NEG
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 1
45569: NEG
45570: PUSH
45571: LD_INT 1
45573: NEG
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 1
45581: NEG
45582: PUSH
45583: LD_INT 2
45585: NEG
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: LD_INT 2
45596: NEG
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 2
45615: PUSH
45616: LD_INT 0
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 2
45625: PUSH
45626: LD_INT 1
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 2
45635: PUSH
45636: LD_INT 2
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: LD_INT 2
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: LD_INT 2
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 1
45665: NEG
45666: PUSH
45667: LD_INT 1
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 2
45676: NEG
45677: PUSH
45678: LD_INT 0
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 2
45687: NEG
45688: PUSH
45689: LD_INT 1
45691: NEG
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 2
45699: NEG
45700: PUSH
45701: LD_INT 2
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45730: LD_ADDR_VAR 0 54
45734: PUSH
45735: LD_INT 0
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: LD_INT 1
45750: NEG
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 1
45758: PUSH
45759: LD_INT 0
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 1
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 1
45799: NEG
45800: PUSH
45801: LD_INT 1
45803: NEG
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 1
45811: NEG
45812: PUSH
45813: LD_INT 2
45815: NEG
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: LD_INT 2
45826: NEG
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 1
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 2
45845: PUSH
45846: LD_INT 0
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 2
45855: PUSH
45856: LD_INT 1
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 2
45865: PUSH
45866: LD_INT 2
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 1
45875: PUSH
45876: LD_INT 2
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 0
45885: PUSH
45886: LD_INT 2
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: NEG
45896: PUSH
45897: LD_INT 1
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 2
45906: NEG
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 2
45917: NEG
45918: PUSH
45919: LD_INT 1
45921: NEG
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 2
45929: NEG
45930: PUSH
45931: LD_INT 2
45933: NEG
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45960: LD_ADDR_VAR 0 55
45964: PUSH
45965: LD_INT 0
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: LD_INT 1
45980: NEG
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 1
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: LD_INT 1
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 1
46018: NEG
46019: PUSH
46020: LD_INT 0
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 1
46029: NEG
46030: PUSH
46031: LD_INT 1
46033: NEG
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: NEG
46042: PUSH
46043: LD_INT 2
46045: NEG
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: LD_INT 2
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: LD_INT 1
46067: NEG
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 2
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 2
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 2
46095: PUSH
46096: LD_INT 2
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: LD_INT 2
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: LD_INT 2
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 1
46125: NEG
46126: PUSH
46127: LD_INT 1
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 2
46136: NEG
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 2
46147: NEG
46148: PUSH
46149: LD_INT 1
46151: NEG
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 2
46159: NEG
46160: PUSH
46161: LD_INT 2
46163: NEG
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46190: LD_ADDR_VAR 0 56
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 0
46207: PUSH
46208: LD_INT 1
46210: NEG
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 1
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 0
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: NEG
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 1
46259: NEG
46260: PUSH
46261: LD_INT 1
46263: NEG
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 1
46271: NEG
46272: PUSH
46273: LD_INT 2
46275: NEG
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: LD_INT 2
46286: NEG
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 1
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 2
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 2
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 2
46325: PUSH
46326: LD_INT 2
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: PUSH
46336: LD_INT 2
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 0
46345: PUSH
46346: LD_INT 2
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 1
46355: NEG
46356: PUSH
46357: LD_INT 1
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 2
46366: NEG
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 2
46377: NEG
46378: PUSH
46379: LD_INT 1
46381: NEG
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 2
46389: NEG
46390: PUSH
46391: LD_INT 2
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46420: LD_ADDR_VAR 0 57
46424: PUSH
46425: LD_INT 0
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: LD_INT 1
46440: NEG
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 1
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: LD_INT 1
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 0
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 1
46478: NEG
46479: PUSH
46480: LD_INT 0
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 1
46501: NEG
46502: PUSH
46503: LD_INT 2
46505: NEG
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: LD_INT 2
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 2
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 2
46545: PUSH
46546: LD_INT 1
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 2
46555: PUSH
46556: LD_INT 2
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: LD_INT 2
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: LD_INT 2
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: PUSH
46587: LD_INT 1
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 2
46596: NEG
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 2
46607: NEG
46608: PUSH
46609: LD_INT 1
46611: NEG
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 2
46619: NEG
46620: PUSH
46621: LD_INT 2
46623: NEG
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46650: LD_ADDR_VAR 0 58
46654: PUSH
46655: LD_INT 0
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 0
46667: PUSH
46668: LD_INT 1
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 1
46678: PUSH
46679: LD_INT 0
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 1
46719: NEG
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 1
46731: NEG
46732: PUSH
46733: LD_INT 2
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: LD_INT 2
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 2
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 2
46775: PUSH
46776: LD_INT 1
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 2
46785: PUSH
46786: LD_INT 2
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 1
46795: PUSH
46796: LD_INT 2
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 0
46805: PUSH
46806: LD_INT 2
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 1
46815: NEG
46816: PUSH
46817: LD_INT 1
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 2
46826: NEG
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 2
46837: NEG
46838: PUSH
46839: LD_INT 1
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 2
46849: NEG
46850: PUSH
46851: LD_INT 2
46853: NEG
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46880: LD_ADDR_VAR 0 59
46884: PUSH
46885: LD_INT 0
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 0
46897: PUSH
46898: LD_INT 1
46900: NEG
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 1
46908: PUSH
46909: LD_INT 0
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 1
46918: PUSH
46919: LD_INT 1
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 0
46928: PUSH
46929: LD_INT 1
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 1
46938: NEG
46939: PUSH
46940: LD_INT 0
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 1
46949: NEG
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46968: LD_ADDR_VAR 0 60
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: LD_INT 1
46988: NEG
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 1
47006: PUSH
47007: LD_INT 1
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 1
47026: NEG
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47056: LD_ADDR_VAR 0 61
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: LD_INT 0
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: LD_INT 1
47076: NEG
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 1
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 1
47094: PUSH
47095: LD_INT 1
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: LD_INT 1
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 1
47114: NEG
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 1
47125: NEG
47126: PUSH
47127: LD_INT 1
47129: NEG
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47144: LD_ADDR_VAR 0 62
47148: PUSH
47149: LD_INT 0
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 1
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 1
47182: PUSH
47183: LD_INT 1
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: LD_INT 1
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: LD_INT 1
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47232: LD_ADDR_VAR 0 63
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 0
47249: PUSH
47250: LD_INT 1
47252: NEG
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 1
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 1
47270: PUSH
47271: LD_INT 1
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: LD_INT 1
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 1
47301: NEG
47302: PUSH
47303: LD_INT 1
47305: NEG
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47320: LD_ADDR_VAR 0 64
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: PUSH
47359: LD_INT 1
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 0
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 1
47378: NEG
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 1
47389: NEG
47390: PUSH
47391: LD_INT 1
47393: NEG
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: ST_TO_ADDR
// end ; 1 :
47408: GO 53305
47410: LD_INT 1
47412: DOUBLE
47413: EQUAL
47414: IFTRUE 47418
47416: GO 50041
47418: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47419: LD_ADDR_VAR 0 11
47423: PUSH
47424: LD_INT 1
47426: NEG
47427: PUSH
47428: LD_INT 3
47430: NEG
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: LD_INT 3
47441: NEG
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 1
47449: PUSH
47450: LD_INT 2
47452: NEG
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: LIST
47462: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47463: LD_ADDR_VAR 0 12
47467: PUSH
47468: LD_INT 2
47470: PUSH
47471: LD_INT 1
47473: NEG
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 3
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 3
47491: PUSH
47492: LD_INT 1
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: LIST
47503: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47504: LD_ADDR_VAR 0 13
47508: PUSH
47509: LD_INT 3
47511: PUSH
47512: LD_INT 2
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 3
47521: PUSH
47522: LD_INT 3
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 2
47531: PUSH
47532: LD_INT 3
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: LIST
47543: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47544: LD_ADDR_VAR 0 14
47548: PUSH
47549: LD_INT 1
47551: PUSH
47552: LD_INT 3
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 0
47561: PUSH
47562: LD_INT 3
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: LD_INT 2
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: LIST
47584: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47585: LD_ADDR_VAR 0 15
47589: PUSH
47590: LD_INT 2
47592: NEG
47593: PUSH
47594: LD_INT 1
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 3
47603: NEG
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 3
47614: NEG
47615: PUSH
47616: LD_INT 1
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: LIST
47628: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47629: LD_ADDR_VAR 0 16
47633: PUSH
47634: LD_INT 2
47636: NEG
47637: PUSH
47638: LD_INT 3
47640: NEG
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 3
47648: NEG
47649: PUSH
47650: LD_INT 2
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 3
47660: NEG
47661: PUSH
47662: LD_INT 3
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: LIST
47674: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47675: LD_ADDR_VAR 0 17
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: PUSH
47684: LD_INT 3
47686: NEG
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: LD_INT 3
47697: NEG
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 1
47705: PUSH
47706: LD_INT 2
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: LIST
47718: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47719: LD_ADDR_VAR 0 18
47723: PUSH
47724: LD_INT 2
47726: PUSH
47727: LD_INT 1
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 3
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 3
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: LIST
47759: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47760: LD_ADDR_VAR 0 19
47764: PUSH
47765: LD_INT 3
47767: PUSH
47768: LD_INT 2
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 3
47777: PUSH
47778: LD_INT 3
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 2
47787: PUSH
47788: LD_INT 3
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: LIST
47799: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47800: LD_ADDR_VAR 0 20
47804: PUSH
47805: LD_INT 1
47807: PUSH
47808: LD_INT 3
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: LD_INT 3
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 1
47827: NEG
47828: PUSH
47829: LD_INT 2
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: LIST
47840: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47841: LD_ADDR_VAR 0 21
47845: PUSH
47846: LD_INT 2
47848: NEG
47849: PUSH
47850: LD_INT 1
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 3
47859: NEG
47860: PUSH
47861: LD_INT 0
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 3
47870: NEG
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: LIST
47884: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47885: LD_ADDR_VAR 0 22
47889: PUSH
47890: LD_INT 2
47892: NEG
47893: PUSH
47894: LD_INT 3
47896: NEG
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 3
47904: NEG
47905: PUSH
47906: LD_INT 2
47908: NEG
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 3
47916: NEG
47917: PUSH
47918: LD_INT 3
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: LIST
47930: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47931: LD_ADDR_VAR 0 23
47935: PUSH
47936: LD_INT 0
47938: PUSH
47939: LD_INT 3
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: NEG
47950: PUSH
47951: LD_INT 4
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 1
47961: PUSH
47962: LD_INT 3
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: LIST
47974: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47975: LD_ADDR_VAR 0 24
47979: PUSH
47980: LD_INT 3
47982: PUSH
47983: LD_INT 0
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 3
47992: PUSH
47993: LD_INT 1
47995: NEG
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 4
48003: PUSH
48004: LD_INT 1
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: LIST
48015: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48016: LD_ADDR_VAR 0 25
48020: PUSH
48021: LD_INT 3
48023: PUSH
48024: LD_INT 3
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 4
48033: PUSH
48034: LD_INT 3
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 3
48043: PUSH
48044: LD_INT 4
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: LIST
48055: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48056: LD_ADDR_VAR 0 26
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: LD_INT 3
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 1
48073: PUSH
48074: LD_INT 4
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: NEG
48084: PUSH
48085: LD_INT 3
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: LIST
48096: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48097: LD_ADDR_VAR 0 27
48101: PUSH
48102: LD_INT 3
48104: NEG
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 3
48115: NEG
48116: PUSH
48117: LD_INT 1
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 4
48126: NEG
48127: PUSH
48128: LD_INT 1
48130: NEG
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: LIST
48140: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48141: LD_ADDR_VAR 0 28
48145: PUSH
48146: LD_INT 3
48148: NEG
48149: PUSH
48150: LD_INT 3
48152: NEG
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 3
48160: NEG
48161: PUSH
48162: LD_INT 4
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 4
48172: NEG
48173: PUSH
48174: LD_INT 3
48176: NEG
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: LIST
48186: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48187: LD_ADDR_VAR 0 29
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: LD_INT 3
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 0
48206: PUSH
48207: LD_INT 3
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 1
48217: PUSH
48218: LD_INT 2
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 1
48228: NEG
48229: PUSH
48230: LD_INT 4
48232: NEG
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: LD_INT 4
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 1
48251: PUSH
48252: LD_INT 3
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 1
48262: NEG
48263: PUSH
48264: LD_INT 5
48266: NEG
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: LD_INT 5
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: PUSH
48286: LD_INT 4
48288: NEG
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 1
48296: NEG
48297: PUSH
48298: LD_INT 6
48300: NEG
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: LD_INT 6
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 1
48319: PUSH
48320: LD_INT 5
48322: NEG
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48342: LD_ADDR_VAR 0 30
48346: PUSH
48347: LD_INT 2
48349: PUSH
48350: LD_INT 1
48352: NEG
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 3
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 3
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 3
48380: PUSH
48381: LD_INT 1
48383: NEG
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 4
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 4
48401: PUSH
48402: LD_INT 1
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 4
48411: PUSH
48412: LD_INT 1
48414: NEG
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 5
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 5
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 5
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 6
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 6
48463: PUSH
48464: LD_INT 1
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48485: LD_ADDR_VAR 0 31
48489: PUSH
48490: LD_INT 3
48492: PUSH
48493: LD_INT 2
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 3
48502: PUSH
48503: LD_INT 3
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 2
48512: PUSH
48513: LD_INT 3
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 4
48522: PUSH
48523: LD_INT 3
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 4
48532: PUSH
48533: LD_INT 4
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 3
48542: PUSH
48543: LD_INT 4
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 5
48552: PUSH
48553: LD_INT 4
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 5
48562: PUSH
48563: LD_INT 5
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 4
48572: PUSH
48573: LD_INT 5
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 6
48582: PUSH
48583: LD_INT 5
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 6
48592: PUSH
48593: LD_INT 6
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 5
48602: PUSH
48603: LD_INT 6
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48624: LD_ADDR_VAR 0 32
48628: PUSH
48629: LD_INT 1
48631: PUSH
48632: LD_INT 3
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 0
48641: PUSH
48642: LD_INT 3
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 1
48651: NEG
48652: PUSH
48653: LD_INT 2
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 1
48662: PUSH
48663: LD_INT 4
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 0
48672: PUSH
48673: LD_INT 4
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 1
48682: NEG
48683: PUSH
48684: LD_INT 3
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 1
48693: PUSH
48694: LD_INT 5
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: LD_INT 5
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 1
48713: NEG
48714: PUSH
48715: LD_INT 4
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: LD_INT 6
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: LD_INT 6
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: LD_INT 5
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48767: LD_ADDR_VAR 0 33
48771: PUSH
48772: LD_INT 2
48774: NEG
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 3
48785: NEG
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 3
48796: NEG
48797: PUSH
48798: LD_INT 1
48800: NEG
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 3
48808: NEG
48809: PUSH
48810: LD_INT 1
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 4
48819: NEG
48820: PUSH
48821: LD_INT 0
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 4
48830: NEG
48831: PUSH
48832: LD_INT 1
48834: NEG
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 4
48842: NEG
48843: PUSH
48844: LD_INT 1
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 5
48853: NEG
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 5
48864: NEG
48865: PUSH
48866: LD_INT 1
48868: NEG
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 5
48876: NEG
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 6
48887: NEG
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 6
48898: NEG
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48922: LD_ADDR_VAR 0 34
48926: PUSH
48927: LD_INT 2
48929: NEG
48930: PUSH
48931: LD_INT 3
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 3
48941: NEG
48942: PUSH
48943: LD_INT 2
48945: NEG
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 3
48953: NEG
48954: PUSH
48955: LD_INT 3
48957: NEG
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 3
48965: NEG
48966: PUSH
48967: LD_INT 4
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 4
48977: NEG
48978: PUSH
48979: LD_INT 3
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 4
48989: NEG
48990: PUSH
48991: LD_INT 4
48993: NEG
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 4
49001: NEG
49002: PUSH
49003: LD_INT 5
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 5
49013: NEG
49014: PUSH
49015: LD_INT 4
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 5
49025: NEG
49026: PUSH
49027: LD_INT 5
49029: NEG
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 5
49037: NEG
49038: PUSH
49039: LD_INT 6
49041: NEG
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 6
49049: NEG
49050: PUSH
49051: LD_INT 5
49053: NEG
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 6
49061: NEG
49062: PUSH
49063: LD_INT 6
49065: NEG
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49085: LD_ADDR_VAR 0 41
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: LD_INT 2
49095: NEG
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 1
49103: NEG
49104: PUSH
49105: LD_INT 3
49107: NEG
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: PUSH
49116: LD_INT 2
49118: NEG
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: LIST
49128: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49129: LD_ADDR_VAR 0 42
49133: PUSH
49134: LD_INT 2
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 2
49146: PUSH
49147: LD_INT 1
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 3
49157: PUSH
49158: LD_INT 1
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: LIST
49169: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49170: LD_ADDR_VAR 0 43
49174: PUSH
49175: LD_INT 2
49177: PUSH
49178: LD_INT 2
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 3
49187: PUSH
49188: LD_INT 2
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 2
49197: PUSH
49198: LD_INT 3
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: LIST
49209: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49210: LD_ADDR_VAR 0 44
49214: PUSH
49215: LD_INT 0
49217: PUSH
49218: LD_INT 2
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 1
49227: PUSH
49228: LD_INT 3
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: LD_INT 2
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: LIST
49250: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49251: LD_ADDR_VAR 0 45
49255: PUSH
49256: LD_INT 2
49258: NEG
49259: PUSH
49260: LD_INT 0
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 2
49269: NEG
49270: PUSH
49271: LD_INT 1
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 3
49280: NEG
49281: PUSH
49282: LD_INT 1
49284: NEG
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: LIST
49294: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49295: LD_ADDR_VAR 0 46
49299: PUSH
49300: LD_INT 2
49302: NEG
49303: PUSH
49304: LD_INT 2
49306: NEG
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 2
49314: NEG
49315: PUSH
49316: LD_INT 3
49318: NEG
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 3
49326: NEG
49327: PUSH
49328: LD_INT 2
49330: NEG
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: LIST
49340: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49341: LD_ADDR_VAR 0 47
49345: PUSH
49346: LD_INT 2
49348: NEG
49349: PUSH
49350: LD_INT 3
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: LD_INT 3
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49374: LD_ADDR_VAR 0 48
49378: PUSH
49379: LD_INT 1
49381: PUSH
49382: LD_INT 2
49384: NEG
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 2
49392: PUSH
49393: LD_INT 1
49395: NEG
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49405: LD_ADDR_VAR 0 49
49409: PUSH
49410: LD_INT 3
49412: PUSH
49413: LD_INT 1
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 3
49422: PUSH
49423: LD_INT 2
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49434: LD_ADDR_VAR 0 50
49438: PUSH
49439: LD_INT 2
49441: PUSH
49442: LD_INT 3
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 1
49451: PUSH
49452: LD_INT 3
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49463: LD_ADDR_VAR 0 51
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: LD_INT 2
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 2
49481: NEG
49482: PUSH
49483: LD_INT 1
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49494: LD_ADDR_VAR 0 52
49498: PUSH
49499: LD_INT 3
49501: NEG
49502: PUSH
49503: LD_INT 1
49505: NEG
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 3
49513: NEG
49514: PUSH
49515: LD_INT 2
49517: NEG
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49527: LD_ADDR_VAR 0 53
49531: PUSH
49532: LD_INT 1
49534: NEG
49535: PUSH
49536: LD_INT 3
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: LD_INT 3
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 1
49557: PUSH
49558: LD_INT 2
49560: NEG
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: LIST
49570: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49571: LD_ADDR_VAR 0 54
49575: PUSH
49576: LD_INT 2
49578: PUSH
49579: LD_INT 1
49581: NEG
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 3
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 3
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: LIST
49611: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49612: LD_ADDR_VAR 0 55
49616: PUSH
49617: LD_INT 3
49619: PUSH
49620: LD_INT 2
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 3
49629: PUSH
49630: LD_INT 3
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 2
49639: PUSH
49640: LD_INT 3
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: LIST
49651: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49652: LD_ADDR_VAR 0 56
49656: PUSH
49657: LD_INT 1
49659: PUSH
49660: LD_INT 3
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 0
49669: PUSH
49670: LD_INT 3
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 1
49679: NEG
49680: PUSH
49681: LD_INT 2
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: LIST
49692: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49693: LD_ADDR_VAR 0 57
49697: PUSH
49698: LD_INT 2
49700: NEG
49701: PUSH
49702: LD_INT 1
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 3
49711: NEG
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 3
49722: NEG
49723: PUSH
49724: LD_INT 1
49726: NEG
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: LIST
49736: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49737: LD_ADDR_VAR 0 58
49741: PUSH
49742: LD_INT 2
49744: NEG
49745: PUSH
49746: LD_INT 3
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 3
49756: NEG
49757: PUSH
49758: LD_INT 2
49760: NEG
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 3
49768: NEG
49769: PUSH
49770: LD_INT 3
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: LIST
49782: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49783: LD_ADDR_VAR 0 59
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: LD_INT 2
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: LD_INT 2
49805: NEG
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: LIST
49826: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49827: LD_ADDR_VAR 0 60
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: LD_INT 1
49837: NEG
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 2
49845: PUSH
49846: LD_INT 0
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 2
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: LIST
49867: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49868: LD_ADDR_VAR 0 61
49872: PUSH
49873: LD_INT 2
49875: PUSH
49876: LD_INT 1
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 2
49885: PUSH
49886: LD_INT 2
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: LD_INT 2
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: LIST
49907: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49908: LD_ADDR_VAR 0 62
49912: PUSH
49913: LD_INT 1
49915: PUSH
49916: LD_INT 2
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: LD_INT 2
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: NEG
49936: PUSH
49937: LD_INT 1
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: LIST
49948: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49949: LD_ADDR_VAR 0 63
49953: PUSH
49954: LD_INT 1
49956: NEG
49957: PUSH
49958: LD_INT 1
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 2
49967: NEG
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 2
49978: NEG
49979: PUSH
49980: LD_INT 1
49982: NEG
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: LIST
49992: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49993: LD_ADDR_VAR 0 64
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: LD_INT 2
50004: NEG
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 2
50012: NEG
50013: PUSH
50014: LD_INT 1
50016: NEG
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 2
50024: NEG
50025: PUSH
50026: LD_INT 2
50028: NEG
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: LIST
50038: ST_TO_ADDR
// end ; 2 :
50039: GO 53305
50041: LD_INT 2
50043: DOUBLE
50044: EQUAL
50045: IFTRUE 50049
50047: GO 53304
50049: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50050: LD_ADDR_VAR 0 29
50054: PUSH
50055: LD_INT 4
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 4
50067: PUSH
50068: LD_INT 1
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 5
50078: PUSH
50079: LD_INT 0
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 5
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 4
50098: PUSH
50099: LD_INT 1
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 3
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 3
50118: PUSH
50119: LD_INT 1
50121: NEG
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 3
50129: PUSH
50130: LD_INT 2
50132: NEG
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 5
50140: PUSH
50141: LD_INT 2
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 3
50150: PUSH
50151: LD_INT 3
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 3
50160: PUSH
50161: LD_INT 2
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 4
50170: PUSH
50171: LD_INT 3
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 4
50180: PUSH
50181: LD_INT 4
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 3
50190: PUSH
50191: LD_INT 4
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 2
50200: PUSH
50201: LD_INT 3
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 2
50210: PUSH
50211: LD_INT 2
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 4
50220: PUSH
50221: LD_INT 2
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 2
50230: PUSH
50231: LD_INT 4
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: LD_INT 4
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: LD_INT 3
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: LD_INT 4
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 1
50270: PUSH
50271: LD_INT 5
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: LD_INT 5
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 1
50290: NEG
50291: PUSH
50292: LD_INT 4
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: LD_INT 3
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 2
50312: PUSH
50313: LD_INT 5
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 2
50322: NEG
50323: PUSH
50324: LD_INT 3
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 3
50333: NEG
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 3
50344: NEG
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 2
50356: NEG
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 2
50367: NEG
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 3
50378: NEG
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 4
50389: NEG
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 4
50400: NEG
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 4
50412: NEG
50413: PUSH
50414: LD_INT 2
50416: NEG
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 2
50424: NEG
50425: PUSH
50426: LD_INT 2
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 4
50435: NEG
50436: PUSH
50437: LD_INT 4
50439: NEG
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 4
50447: NEG
50448: PUSH
50449: LD_INT 5
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 3
50459: NEG
50460: PUSH
50461: LD_INT 4
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 3
50471: NEG
50472: PUSH
50473: LD_INT 3
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 4
50483: NEG
50484: PUSH
50485: LD_INT 3
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 5
50495: NEG
50496: PUSH
50497: LD_INT 4
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 5
50507: NEG
50508: PUSH
50509: LD_INT 5
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 3
50519: NEG
50520: PUSH
50521: LD_INT 5
50523: NEG
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 5
50531: NEG
50532: PUSH
50533: LD_INT 3
50535: NEG
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50588: LD_ADDR_VAR 0 30
50592: PUSH
50593: LD_INT 4
50595: PUSH
50596: LD_INT 4
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 4
50605: PUSH
50606: LD_INT 3
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 5
50615: PUSH
50616: LD_INT 4
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 5
50625: PUSH
50626: LD_INT 5
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 4
50635: PUSH
50636: LD_INT 5
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 3
50645: PUSH
50646: LD_INT 4
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 3
50655: PUSH
50656: LD_INT 3
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 5
50665: PUSH
50666: LD_INT 3
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 3
50675: PUSH
50676: LD_INT 5
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: LD_INT 3
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: LD_INT 2
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: LD_INT 3
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 1
50715: PUSH
50716: LD_INT 4
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 0
50725: PUSH
50726: LD_INT 4
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 1
50735: NEG
50736: PUSH
50737: LD_INT 3
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 1
50746: NEG
50747: PUSH
50748: LD_INT 2
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 2
50757: PUSH
50758: LD_INT 4
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 2
50767: NEG
50768: PUSH
50769: LD_INT 2
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 4
50778: NEG
50779: PUSH
50780: LD_INT 0
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 4
50789: NEG
50790: PUSH
50791: LD_INT 1
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 3
50801: NEG
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 3
50812: NEG
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 4
50823: NEG
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 5
50834: NEG
50835: PUSH
50836: LD_INT 0
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 5
50845: NEG
50846: PUSH
50847: LD_INT 1
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 5
50857: NEG
50858: PUSH
50859: LD_INT 2
50861: NEG
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 3
50869: NEG
50870: PUSH
50871: LD_INT 2
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 3
50880: NEG
50881: PUSH
50882: LD_INT 3
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 3
50892: NEG
50893: PUSH
50894: LD_INT 4
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 2
50904: NEG
50905: PUSH
50906: LD_INT 3
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 2
50916: NEG
50917: PUSH
50918: LD_INT 2
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 3
50928: NEG
50929: PUSH
50930: LD_INT 2
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 4
50940: NEG
50941: PUSH
50942: LD_INT 3
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 4
50952: NEG
50953: PUSH
50954: LD_INT 4
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 2
50964: NEG
50965: PUSH
50966: LD_INT 4
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 4
50976: NEG
50977: PUSH
50978: LD_INT 2
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 0
50988: PUSH
50989: LD_INT 4
50991: NEG
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: LD_INT 5
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 1
51010: PUSH
51011: LD_INT 4
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: LD_INT 3
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: LD_INT 3
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 1
51043: NEG
51044: PUSH
51045: LD_INT 4
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 1
51055: NEG
51056: PUSH
51057: LD_INT 5
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 2
51067: PUSH
51068: LD_INT 3
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 2
51078: NEG
51079: PUSH
51080: LD_INT 5
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51135: LD_ADDR_VAR 0 31
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: LD_INT 4
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 0
51152: PUSH
51153: LD_INT 3
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 1
51162: PUSH
51163: LD_INT 4
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 1
51172: PUSH
51173: LD_INT 5
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: LD_INT 5
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: LD_INT 4
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: LD_INT 3
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 2
51214: PUSH
51215: LD_INT 5
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 2
51224: NEG
51225: PUSH
51226: LD_INT 3
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 3
51235: NEG
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 3
51246: NEG
51247: PUSH
51248: LD_INT 1
51250: NEG
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 2
51258: NEG
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 2
51269: NEG
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 3
51280: NEG
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 4
51291: NEG
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 4
51302: NEG
51303: PUSH
51304: LD_INT 1
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 4
51314: NEG
51315: PUSH
51316: LD_INT 2
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 2
51326: NEG
51327: PUSH
51328: LD_INT 2
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 4
51337: NEG
51338: PUSH
51339: LD_INT 4
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 4
51349: NEG
51350: PUSH
51351: LD_INT 5
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 3
51361: NEG
51362: PUSH
51363: LD_INT 4
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 3
51373: NEG
51374: PUSH
51375: LD_INT 3
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 4
51385: NEG
51386: PUSH
51387: LD_INT 3
51389: NEG
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 5
51397: NEG
51398: PUSH
51399: LD_INT 4
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 5
51409: NEG
51410: PUSH
51411: LD_INT 5
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 3
51421: NEG
51422: PUSH
51423: LD_INT 5
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 5
51433: NEG
51434: PUSH
51435: LD_INT 3
51437: NEG
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 0
51445: PUSH
51446: LD_INT 3
51448: NEG
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 0
51456: PUSH
51457: LD_INT 4
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: PUSH
51468: LD_INT 3
51470: NEG
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: LD_INT 2
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: LD_INT 2
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: LD_INT 3
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 1
51512: NEG
51513: PUSH
51514: LD_INT 4
51516: NEG
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 2
51524: PUSH
51525: LD_INT 2
51527: NEG
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 2
51535: NEG
51536: PUSH
51537: LD_INT 4
51539: NEG
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 4
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 4
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 5
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 5
51578: PUSH
51579: LD_INT 1
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 4
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 3
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 3
51608: PUSH
51609: LD_INT 1
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 3
51619: PUSH
51620: LD_INT 2
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 5
51630: PUSH
51631: LD_INT 2
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51685: LD_ADDR_VAR 0 32
51689: PUSH
51690: LD_INT 4
51692: NEG
51693: PUSH
51694: LD_INT 0
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 4
51703: NEG
51704: PUSH
51705: LD_INT 1
51707: NEG
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 3
51715: NEG
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 3
51726: NEG
51727: PUSH
51728: LD_INT 1
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 4
51737: NEG
51738: PUSH
51739: LD_INT 1
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 5
51748: NEG
51749: PUSH
51750: LD_INT 0
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 5
51759: NEG
51760: PUSH
51761: LD_INT 1
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 5
51771: NEG
51772: PUSH
51773: LD_INT 2
51775: NEG
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 3
51783: NEG
51784: PUSH
51785: LD_INT 2
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 3
51794: NEG
51795: PUSH
51796: LD_INT 3
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 3
51806: NEG
51807: PUSH
51808: LD_INT 4
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 2
51818: NEG
51819: PUSH
51820: LD_INT 3
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 2
51830: NEG
51831: PUSH
51832: LD_INT 2
51834: NEG
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 3
51842: NEG
51843: PUSH
51844: LD_INT 2
51846: NEG
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 4
51854: NEG
51855: PUSH
51856: LD_INT 3
51858: NEG
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 4
51866: NEG
51867: PUSH
51868: LD_INT 4
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 2
51878: NEG
51879: PUSH
51880: LD_INT 4
51882: NEG
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 4
51890: NEG
51891: PUSH
51892: LD_INT 2
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: LD_INT 4
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: LD_INT 5
51916: NEG
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: LD_INT 4
51927: NEG
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 1
51935: PUSH
51936: LD_INT 3
51938: NEG
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: LD_INT 3
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 1
51957: NEG
51958: PUSH
51959: LD_INT 4
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 1
51969: NEG
51970: PUSH
51971: LD_INT 5
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 2
51981: PUSH
51982: LD_INT 3
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 2
51992: NEG
51993: PUSH
51994: LD_INT 5
51996: NEG
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 3
52004: PUSH
52005: LD_INT 0
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 3
52014: PUSH
52015: LD_INT 1
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 4
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 4
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 3
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 2
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 2
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 2
52076: PUSH
52077: LD_INT 2
52079: NEG
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 4
52087: PUSH
52088: LD_INT 2
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 4
52097: PUSH
52098: LD_INT 4
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 4
52107: PUSH
52108: LD_INT 3
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 5
52117: PUSH
52118: LD_INT 4
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 5
52127: PUSH
52128: LD_INT 5
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 4
52137: PUSH
52138: LD_INT 5
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 3
52147: PUSH
52148: LD_INT 4
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 3
52157: PUSH
52158: LD_INT 3
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 5
52167: PUSH
52168: LD_INT 3
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 3
52177: PUSH
52178: LD_INT 5
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52232: LD_ADDR_VAR 0 33
52236: PUSH
52237: LD_INT 4
52239: NEG
52240: PUSH
52241: LD_INT 4
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 4
52251: NEG
52252: PUSH
52253: LD_INT 5
52255: NEG
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 3
52263: NEG
52264: PUSH
52265: LD_INT 4
52267: NEG
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 3
52275: NEG
52276: PUSH
52277: LD_INT 3
52279: NEG
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 4
52287: NEG
52288: PUSH
52289: LD_INT 3
52291: NEG
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 5
52299: NEG
52300: PUSH
52301: LD_INT 4
52303: NEG
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 5
52311: NEG
52312: PUSH
52313: LD_INT 5
52315: NEG
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 3
52323: NEG
52324: PUSH
52325: LD_INT 5
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 5
52335: NEG
52336: PUSH
52337: LD_INT 3
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: LD_INT 3
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 0
52358: PUSH
52359: LD_INT 4
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 1
52369: PUSH
52370: LD_INT 3
52372: NEG
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: LD_INT 2
52383: NEG
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 0
52391: PUSH
52392: LD_INT 2
52394: NEG
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 1
52402: NEG
52403: PUSH
52404: LD_INT 3
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 1
52414: NEG
52415: PUSH
52416: LD_INT 4
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 2
52426: PUSH
52427: LD_INT 2
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 2
52437: NEG
52438: PUSH
52439: LD_INT 4
52441: NEG
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 4
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 4
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 5
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 5
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 4
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 3
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 3
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 3
52521: PUSH
52522: LD_INT 2
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 5
52532: PUSH
52533: LD_INT 2
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 3
52542: PUSH
52543: LD_INT 3
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 3
52552: PUSH
52553: LD_INT 2
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 4
52562: PUSH
52563: LD_INT 3
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 4
52572: PUSH
52573: LD_INT 4
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 3
52582: PUSH
52583: LD_INT 4
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 2
52592: PUSH
52593: LD_INT 3
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 2
52602: PUSH
52603: LD_INT 2
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 4
52612: PUSH
52613: LD_INT 2
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 2
52622: PUSH
52623: LD_INT 4
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: LD_INT 4
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 0
52642: PUSH
52643: LD_INT 3
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 1
52652: PUSH
52653: LD_INT 4
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 1
52662: PUSH
52663: LD_INT 5
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 0
52672: PUSH
52673: LD_INT 5
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 1
52682: NEG
52683: PUSH
52684: LD_INT 4
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: LD_INT 3
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 2
52704: PUSH
52705: LD_INT 5
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 2
52714: NEG
52715: PUSH
52716: LD_INT 3
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52770: LD_ADDR_VAR 0 34
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: LD_INT 4
52780: NEG
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: LD_INT 5
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 1
52799: PUSH
52800: LD_INT 4
52802: NEG
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: LD_INT 3
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: LD_INT 3
52824: NEG
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: LD_INT 4
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 1
52844: NEG
52845: PUSH
52846: LD_INT 5
52848: NEG
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 2
52856: PUSH
52857: LD_INT 3
52859: NEG
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 2
52867: NEG
52868: PUSH
52869: LD_INT 5
52871: NEG
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 3
52879: PUSH
52880: LD_INT 0
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 3
52889: PUSH
52890: LD_INT 1
52892: NEG
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 4
52900: PUSH
52901: LD_INT 0
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 4
52910: PUSH
52911: LD_INT 1
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 3
52920: PUSH
52921: LD_INT 1
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 2
52930: PUSH
52931: LD_INT 0
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 2
52940: PUSH
52941: LD_INT 1
52943: NEG
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: LD_INT 2
52954: NEG
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 4
52962: PUSH
52963: LD_INT 2
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 4
52972: PUSH
52973: LD_INT 4
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 4
52982: PUSH
52983: LD_INT 3
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 5
52992: PUSH
52993: LD_INT 4
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 5
53002: PUSH
53003: LD_INT 5
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 4
53012: PUSH
53013: LD_INT 5
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 3
53022: PUSH
53023: LD_INT 4
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 3
53032: PUSH
53033: LD_INT 3
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 5
53042: PUSH
53043: LD_INT 3
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 3
53052: PUSH
53053: LD_INT 5
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 0
53062: PUSH
53063: LD_INT 3
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: LD_INT 2
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: LD_INT 3
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 1
53092: PUSH
53093: LD_INT 4
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 0
53102: PUSH
53103: LD_INT 4
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 1
53112: NEG
53113: PUSH
53114: LD_INT 3
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 1
53123: NEG
53124: PUSH
53125: LD_INT 2
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 2
53134: PUSH
53135: LD_INT 4
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 2
53144: NEG
53145: PUSH
53146: LD_INT 2
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 4
53155: NEG
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 4
53166: NEG
53167: PUSH
53168: LD_INT 1
53170: NEG
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 3
53178: NEG
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 3
53189: NEG
53190: PUSH
53191: LD_INT 1
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 4
53200: NEG
53201: PUSH
53202: LD_INT 1
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 5
53211: NEG
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 5
53222: NEG
53223: PUSH
53224: LD_INT 1
53226: NEG
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 5
53234: NEG
53235: PUSH
53236: LD_INT 2
53238: NEG
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 3
53246: NEG
53247: PUSH
53248: LD_INT 2
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: ST_TO_ADDR
// end ; end ;
53302: GO 53305
53304: POP
// case btype of b_depot , b_warehouse :
53305: LD_VAR 0 1
53309: PUSH
53310: LD_INT 0
53312: DOUBLE
53313: EQUAL
53314: IFTRUE 53324
53316: LD_INT 1
53318: DOUBLE
53319: EQUAL
53320: IFTRUE 53324
53322: GO 53525
53324: POP
// case nation of nation_american :
53325: LD_VAR 0 5
53329: PUSH
53330: LD_INT 1
53332: DOUBLE
53333: EQUAL
53334: IFTRUE 53338
53336: GO 53394
53338: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53339: LD_ADDR_VAR 0 9
53343: PUSH
53344: LD_VAR 0 11
53348: PUSH
53349: LD_VAR 0 12
53353: PUSH
53354: LD_VAR 0 13
53358: PUSH
53359: LD_VAR 0 14
53363: PUSH
53364: LD_VAR 0 15
53368: PUSH
53369: LD_VAR 0 16
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: PUSH
53382: LD_VAR 0 4
53386: PUSH
53387: LD_INT 1
53389: PLUS
53390: ARRAY
53391: ST_TO_ADDR
53392: GO 53523
53394: LD_INT 2
53396: DOUBLE
53397: EQUAL
53398: IFTRUE 53402
53400: GO 53458
53402: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53403: LD_ADDR_VAR 0 9
53407: PUSH
53408: LD_VAR 0 17
53412: PUSH
53413: LD_VAR 0 18
53417: PUSH
53418: LD_VAR 0 19
53422: PUSH
53423: LD_VAR 0 20
53427: PUSH
53428: LD_VAR 0 21
53432: PUSH
53433: LD_VAR 0 22
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: PUSH
53446: LD_VAR 0 4
53450: PUSH
53451: LD_INT 1
53453: PLUS
53454: ARRAY
53455: ST_TO_ADDR
53456: GO 53523
53458: LD_INT 3
53460: DOUBLE
53461: EQUAL
53462: IFTRUE 53466
53464: GO 53522
53466: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53467: LD_ADDR_VAR 0 9
53471: PUSH
53472: LD_VAR 0 23
53476: PUSH
53477: LD_VAR 0 24
53481: PUSH
53482: LD_VAR 0 25
53486: PUSH
53487: LD_VAR 0 26
53491: PUSH
53492: LD_VAR 0 27
53496: PUSH
53497: LD_VAR 0 28
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: PUSH
53510: LD_VAR 0 4
53514: PUSH
53515: LD_INT 1
53517: PLUS
53518: ARRAY
53519: ST_TO_ADDR
53520: GO 53523
53522: POP
53523: GO 54078
53525: LD_INT 2
53527: DOUBLE
53528: EQUAL
53529: IFTRUE 53539
53531: LD_INT 3
53533: DOUBLE
53534: EQUAL
53535: IFTRUE 53539
53537: GO 53595
53539: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53540: LD_ADDR_VAR 0 9
53544: PUSH
53545: LD_VAR 0 29
53549: PUSH
53550: LD_VAR 0 30
53554: PUSH
53555: LD_VAR 0 31
53559: PUSH
53560: LD_VAR 0 32
53564: PUSH
53565: LD_VAR 0 33
53569: PUSH
53570: LD_VAR 0 34
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: PUSH
53583: LD_VAR 0 4
53587: PUSH
53588: LD_INT 1
53590: PLUS
53591: ARRAY
53592: ST_TO_ADDR
53593: GO 54078
53595: LD_INT 16
53597: DOUBLE
53598: EQUAL
53599: IFTRUE 53657
53601: LD_INT 17
53603: DOUBLE
53604: EQUAL
53605: IFTRUE 53657
53607: LD_INT 18
53609: DOUBLE
53610: EQUAL
53611: IFTRUE 53657
53613: LD_INT 19
53615: DOUBLE
53616: EQUAL
53617: IFTRUE 53657
53619: LD_INT 22
53621: DOUBLE
53622: EQUAL
53623: IFTRUE 53657
53625: LD_INT 20
53627: DOUBLE
53628: EQUAL
53629: IFTRUE 53657
53631: LD_INT 21
53633: DOUBLE
53634: EQUAL
53635: IFTRUE 53657
53637: LD_INT 23
53639: DOUBLE
53640: EQUAL
53641: IFTRUE 53657
53643: LD_INT 24
53645: DOUBLE
53646: EQUAL
53647: IFTRUE 53657
53649: LD_INT 25
53651: DOUBLE
53652: EQUAL
53653: IFTRUE 53657
53655: GO 53713
53657: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53658: LD_ADDR_VAR 0 9
53662: PUSH
53663: LD_VAR 0 35
53667: PUSH
53668: LD_VAR 0 36
53672: PUSH
53673: LD_VAR 0 37
53677: PUSH
53678: LD_VAR 0 38
53682: PUSH
53683: LD_VAR 0 39
53687: PUSH
53688: LD_VAR 0 40
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: PUSH
53701: LD_VAR 0 4
53705: PUSH
53706: LD_INT 1
53708: PLUS
53709: ARRAY
53710: ST_TO_ADDR
53711: GO 54078
53713: LD_INT 6
53715: DOUBLE
53716: EQUAL
53717: IFTRUE 53769
53719: LD_INT 7
53721: DOUBLE
53722: EQUAL
53723: IFTRUE 53769
53725: LD_INT 8
53727: DOUBLE
53728: EQUAL
53729: IFTRUE 53769
53731: LD_INT 13
53733: DOUBLE
53734: EQUAL
53735: IFTRUE 53769
53737: LD_INT 12
53739: DOUBLE
53740: EQUAL
53741: IFTRUE 53769
53743: LD_INT 15
53745: DOUBLE
53746: EQUAL
53747: IFTRUE 53769
53749: LD_INT 11
53751: DOUBLE
53752: EQUAL
53753: IFTRUE 53769
53755: LD_INT 14
53757: DOUBLE
53758: EQUAL
53759: IFTRUE 53769
53761: LD_INT 10
53763: DOUBLE
53764: EQUAL
53765: IFTRUE 53769
53767: GO 53825
53769: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53770: LD_ADDR_VAR 0 9
53774: PUSH
53775: LD_VAR 0 41
53779: PUSH
53780: LD_VAR 0 42
53784: PUSH
53785: LD_VAR 0 43
53789: PUSH
53790: LD_VAR 0 44
53794: PUSH
53795: LD_VAR 0 45
53799: PUSH
53800: LD_VAR 0 46
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: PUSH
53813: LD_VAR 0 4
53817: PUSH
53818: LD_INT 1
53820: PLUS
53821: ARRAY
53822: ST_TO_ADDR
53823: GO 54078
53825: LD_INT 36
53827: DOUBLE
53828: EQUAL
53829: IFTRUE 53833
53831: GO 53889
53833: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53834: LD_ADDR_VAR 0 9
53838: PUSH
53839: LD_VAR 0 47
53843: PUSH
53844: LD_VAR 0 48
53848: PUSH
53849: LD_VAR 0 49
53853: PUSH
53854: LD_VAR 0 50
53858: PUSH
53859: LD_VAR 0 51
53863: PUSH
53864: LD_VAR 0 52
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: PUSH
53877: LD_VAR 0 4
53881: PUSH
53882: LD_INT 1
53884: PLUS
53885: ARRAY
53886: ST_TO_ADDR
53887: GO 54078
53889: LD_INT 4
53891: DOUBLE
53892: EQUAL
53893: IFTRUE 53915
53895: LD_INT 5
53897: DOUBLE
53898: EQUAL
53899: IFTRUE 53915
53901: LD_INT 34
53903: DOUBLE
53904: EQUAL
53905: IFTRUE 53915
53907: LD_INT 37
53909: DOUBLE
53910: EQUAL
53911: IFTRUE 53915
53913: GO 53971
53915: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53916: LD_ADDR_VAR 0 9
53920: PUSH
53921: LD_VAR 0 53
53925: PUSH
53926: LD_VAR 0 54
53930: PUSH
53931: LD_VAR 0 55
53935: PUSH
53936: LD_VAR 0 56
53940: PUSH
53941: LD_VAR 0 57
53945: PUSH
53946: LD_VAR 0 58
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: PUSH
53959: LD_VAR 0 4
53963: PUSH
53964: LD_INT 1
53966: PLUS
53967: ARRAY
53968: ST_TO_ADDR
53969: GO 54078
53971: LD_INT 31
53973: DOUBLE
53974: EQUAL
53975: IFTRUE 54021
53977: LD_INT 32
53979: DOUBLE
53980: EQUAL
53981: IFTRUE 54021
53983: LD_INT 33
53985: DOUBLE
53986: EQUAL
53987: IFTRUE 54021
53989: LD_INT 27
53991: DOUBLE
53992: EQUAL
53993: IFTRUE 54021
53995: LD_INT 26
53997: DOUBLE
53998: EQUAL
53999: IFTRUE 54021
54001: LD_INT 28
54003: DOUBLE
54004: EQUAL
54005: IFTRUE 54021
54007: LD_INT 29
54009: DOUBLE
54010: EQUAL
54011: IFTRUE 54021
54013: LD_INT 30
54015: DOUBLE
54016: EQUAL
54017: IFTRUE 54021
54019: GO 54077
54021: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54022: LD_ADDR_VAR 0 9
54026: PUSH
54027: LD_VAR 0 59
54031: PUSH
54032: LD_VAR 0 60
54036: PUSH
54037: LD_VAR 0 61
54041: PUSH
54042: LD_VAR 0 62
54046: PUSH
54047: LD_VAR 0 63
54051: PUSH
54052: LD_VAR 0 64
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: PUSH
54065: LD_VAR 0 4
54069: PUSH
54070: LD_INT 1
54072: PLUS
54073: ARRAY
54074: ST_TO_ADDR
54075: GO 54078
54077: POP
// temp_list2 = [ ] ;
54078: LD_ADDR_VAR 0 10
54082: PUSH
54083: EMPTY
54084: ST_TO_ADDR
// for i in temp_list do
54085: LD_ADDR_VAR 0 8
54089: PUSH
54090: LD_VAR 0 9
54094: PUSH
54095: FOR_IN
54096: IFFALSE 54148
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54098: LD_ADDR_VAR 0 10
54102: PUSH
54103: LD_VAR 0 10
54107: PUSH
54108: LD_VAR 0 8
54112: PUSH
54113: LD_INT 1
54115: ARRAY
54116: PUSH
54117: LD_VAR 0 2
54121: PLUS
54122: PUSH
54123: LD_VAR 0 8
54127: PUSH
54128: LD_INT 2
54130: ARRAY
54131: PUSH
54132: LD_VAR 0 3
54136: PLUS
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: EMPTY
54143: LIST
54144: ADD
54145: ST_TO_ADDR
54146: GO 54095
54148: POP
54149: POP
// result = temp_list2 ;
54150: LD_ADDR_VAR 0 7
54154: PUSH
54155: LD_VAR 0 10
54159: ST_TO_ADDR
// end ;
54160: LD_VAR 0 7
54164: RET
// export function EnemyInRange ( unit , dist ) ; begin
54165: LD_INT 0
54167: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54168: LD_ADDR_VAR 0 3
54172: PUSH
54173: LD_VAR 0 1
54177: PPUSH
54178: CALL_OW 255
54182: PPUSH
54183: LD_VAR 0 1
54187: PPUSH
54188: CALL_OW 250
54192: PPUSH
54193: LD_VAR 0 1
54197: PPUSH
54198: CALL_OW 251
54202: PPUSH
54203: LD_VAR 0 2
54207: PPUSH
54208: CALL 27538 0 4
54212: PUSH
54213: LD_INT 4
54215: ARRAY
54216: ST_TO_ADDR
// end ;
54217: LD_VAR 0 3
54221: RET
// export function PlayerSeeMe ( unit ) ; begin
54222: LD_INT 0
54224: PPUSH
// result := See ( your_side , unit ) ;
54225: LD_ADDR_VAR 0 2
54229: PUSH
54230: LD_OWVAR 2
54234: PPUSH
54235: LD_VAR 0 1
54239: PPUSH
54240: CALL_OW 292
54244: ST_TO_ADDR
// end ;
54245: LD_VAR 0 2
54249: RET
// export function ReverseDir ( unit ) ; begin
54250: LD_INT 0
54252: PPUSH
// if not unit then
54253: LD_VAR 0 1
54257: NOT
54258: IFFALSE 54262
// exit ;
54260: GO 54285
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54262: LD_ADDR_VAR 0 2
54266: PUSH
54267: LD_VAR 0 1
54271: PPUSH
54272: CALL_OW 254
54276: PUSH
54277: LD_INT 3
54279: PLUS
54280: PUSH
54281: LD_INT 6
54283: MOD
54284: ST_TO_ADDR
// end ;
54285: LD_VAR 0 2
54289: RET
// export function ReverseArray ( array ) ; var i ; begin
54290: LD_INT 0
54292: PPUSH
54293: PPUSH
// if not array then
54294: LD_VAR 0 1
54298: NOT
54299: IFFALSE 54303
// exit ;
54301: GO 54358
// result := [ ] ;
54303: LD_ADDR_VAR 0 2
54307: PUSH
54308: EMPTY
54309: ST_TO_ADDR
// for i := array downto 1 do
54310: LD_ADDR_VAR 0 3
54314: PUSH
54315: DOUBLE
54316: LD_VAR 0 1
54320: INC
54321: ST_TO_ADDR
54322: LD_INT 1
54324: PUSH
54325: FOR_DOWNTO
54326: IFFALSE 54356
// result := Join ( result , array [ i ] ) ;
54328: LD_ADDR_VAR 0 2
54332: PUSH
54333: LD_VAR 0 2
54337: PPUSH
54338: LD_VAR 0 1
54342: PUSH
54343: LD_VAR 0 3
54347: ARRAY
54348: PPUSH
54349: CALL 59001 0 2
54353: ST_TO_ADDR
54354: GO 54325
54356: POP
54357: POP
// end ;
54358: LD_VAR 0 2
54362: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
54363: LD_INT 0
54365: PPUSH
54366: PPUSH
54367: PPUSH
54368: PPUSH
54369: PPUSH
54370: PPUSH
// if not unit or not hexes then
54371: LD_VAR 0 1
54375: NOT
54376: PUSH
54377: LD_VAR 0 2
54381: NOT
54382: OR
54383: IFFALSE 54387
// exit ;
54385: GO 54510
// dist := 9999 ;
54387: LD_ADDR_VAR 0 5
54391: PUSH
54392: LD_INT 9999
54394: ST_TO_ADDR
// for i = 1 to hexes do
54395: LD_ADDR_VAR 0 4
54399: PUSH
54400: DOUBLE
54401: LD_INT 1
54403: DEC
54404: ST_TO_ADDR
54405: LD_VAR 0 2
54409: PUSH
54410: FOR_TO
54411: IFFALSE 54498
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54413: LD_ADDR_VAR 0 6
54417: PUSH
54418: LD_VAR 0 1
54422: PPUSH
54423: LD_VAR 0 2
54427: PUSH
54428: LD_VAR 0 4
54432: ARRAY
54433: PUSH
54434: LD_INT 1
54436: ARRAY
54437: PPUSH
54438: LD_VAR 0 2
54442: PUSH
54443: LD_VAR 0 4
54447: ARRAY
54448: PUSH
54449: LD_INT 2
54451: ARRAY
54452: PPUSH
54453: CALL_OW 297
54457: ST_TO_ADDR
// if tdist < dist then
54458: LD_VAR 0 6
54462: PUSH
54463: LD_VAR 0 5
54467: LESS
54468: IFFALSE 54496
// begin hex := hexes [ i ] ;
54470: LD_ADDR_VAR 0 8
54474: PUSH
54475: LD_VAR 0 2
54479: PUSH
54480: LD_VAR 0 4
54484: ARRAY
54485: ST_TO_ADDR
// dist := tdist ;
54486: LD_ADDR_VAR 0 5
54490: PUSH
54491: LD_VAR 0 6
54495: ST_TO_ADDR
// end ; end ;
54496: GO 54410
54498: POP
54499: POP
// result := hex ;
54500: LD_ADDR_VAR 0 3
54504: PUSH
54505: LD_VAR 0 8
54509: ST_TO_ADDR
// end ;
54510: LD_VAR 0 3
54514: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54515: LD_INT 0
54517: PPUSH
54518: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54519: LD_VAR 0 1
54523: NOT
54524: PUSH
54525: LD_VAR 0 1
54529: PUSH
54530: LD_INT 21
54532: PUSH
54533: LD_INT 2
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 23
54542: PUSH
54543: LD_INT 2
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PPUSH
54554: CALL_OW 69
54558: IN
54559: NOT
54560: OR
54561: IFFALSE 54565
// exit ;
54563: GO 54612
// for i = 1 to 3 do
54565: LD_ADDR_VAR 0 3
54569: PUSH
54570: DOUBLE
54571: LD_INT 1
54573: DEC
54574: ST_TO_ADDR
54575: LD_INT 3
54577: PUSH
54578: FOR_TO
54579: IFFALSE 54610
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54581: LD_VAR 0 1
54585: PPUSH
54586: CALL_OW 250
54590: PPUSH
54591: LD_VAR 0 1
54595: PPUSH
54596: CALL_OW 251
54600: PPUSH
54601: LD_INT 1
54603: PPUSH
54604: CALL_OW 453
54608: GO 54578
54610: POP
54611: POP
// end ;
54612: LD_VAR 0 2
54616: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54617: LD_INT 0
54619: PPUSH
54620: PPUSH
54621: PPUSH
54622: PPUSH
54623: PPUSH
54624: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54625: LD_VAR 0 1
54629: NOT
54630: PUSH
54631: LD_VAR 0 2
54635: NOT
54636: OR
54637: PUSH
54638: LD_VAR 0 1
54642: PPUSH
54643: CALL_OW 314
54647: OR
54648: IFFALSE 54652
// exit ;
54650: GO 55119
// if GetLives ( i ) < 250 then
54652: LD_VAR 0 4
54656: PPUSH
54657: CALL_OW 256
54661: PUSH
54662: LD_INT 250
54664: LESS
54665: IFFALSE 54678
// begin ComAutodestruct ( i ) ;
54667: LD_VAR 0 4
54671: PPUSH
54672: CALL 54515 0 1
// exit ;
54676: GO 55119
// end ; x := GetX ( enemy_unit ) ;
54678: LD_ADDR_VAR 0 7
54682: PUSH
54683: LD_VAR 0 2
54687: PPUSH
54688: CALL_OW 250
54692: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54693: LD_ADDR_VAR 0 8
54697: PUSH
54698: LD_VAR 0 2
54702: PPUSH
54703: CALL_OW 251
54707: ST_TO_ADDR
// if not x or not y then
54708: LD_VAR 0 7
54712: NOT
54713: PUSH
54714: LD_VAR 0 8
54718: NOT
54719: OR
54720: IFFALSE 54724
// exit ;
54722: GO 55119
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54724: LD_ADDR_VAR 0 6
54728: PUSH
54729: LD_VAR 0 7
54733: PPUSH
54734: LD_INT 0
54736: PPUSH
54737: LD_INT 4
54739: PPUSH
54740: CALL_OW 272
54744: PUSH
54745: LD_VAR 0 8
54749: PPUSH
54750: LD_INT 0
54752: PPUSH
54753: LD_INT 4
54755: PPUSH
54756: CALL_OW 273
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_VAR 0 7
54769: PPUSH
54770: LD_INT 1
54772: PPUSH
54773: LD_INT 4
54775: PPUSH
54776: CALL_OW 272
54780: PUSH
54781: LD_VAR 0 8
54785: PPUSH
54786: LD_INT 1
54788: PPUSH
54789: LD_INT 4
54791: PPUSH
54792: CALL_OW 273
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_VAR 0 7
54805: PPUSH
54806: LD_INT 2
54808: PPUSH
54809: LD_INT 4
54811: PPUSH
54812: CALL_OW 272
54816: PUSH
54817: LD_VAR 0 8
54821: PPUSH
54822: LD_INT 2
54824: PPUSH
54825: LD_INT 4
54827: PPUSH
54828: CALL_OW 273
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_VAR 0 7
54841: PPUSH
54842: LD_INT 3
54844: PPUSH
54845: LD_INT 4
54847: PPUSH
54848: CALL_OW 272
54852: PUSH
54853: LD_VAR 0 8
54857: PPUSH
54858: LD_INT 3
54860: PPUSH
54861: LD_INT 4
54863: PPUSH
54864: CALL_OW 273
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_VAR 0 7
54877: PPUSH
54878: LD_INT 4
54880: PPUSH
54881: LD_INT 4
54883: PPUSH
54884: CALL_OW 272
54888: PUSH
54889: LD_VAR 0 8
54893: PPUSH
54894: LD_INT 4
54896: PPUSH
54897: LD_INT 4
54899: PPUSH
54900: CALL_OW 273
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_VAR 0 7
54913: PPUSH
54914: LD_INT 5
54916: PPUSH
54917: LD_INT 4
54919: PPUSH
54920: CALL_OW 272
54924: PUSH
54925: LD_VAR 0 8
54929: PPUSH
54930: LD_INT 5
54932: PPUSH
54933: LD_INT 4
54935: PPUSH
54936: CALL_OW 273
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: ST_TO_ADDR
// for i = tmp downto 1 do
54953: LD_ADDR_VAR 0 4
54957: PUSH
54958: DOUBLE
54959: LD_VAR 0 6
54963: INC
54964: ST_TO_ADDR
54965: LD_INT 1
54967: PUSH
54968: FOR_DOWNTO
54969: IFFALSE 55070
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54971: LD_VAR 0 6
54975: PUSH
54976: LD_VAR 0 4
54980: ARRAY
54981: PUSH
54982: LD_INT 1
54984: ARRAY
54985: PPUSH
54986: LD_VAR 0 6
54990: PUSH
54991: LD_VAR 0 4
54995: ARRAY
54996: PUSH
54997: LD_INT 2
54999: ARRAY
55000: PPUSH
55001: CALL_OW 488
55005: NOT
55006: PUSH
55007: LD_VAR 0 6
55011: PUSH
55012: LD_VAR 0 4
55016: ARRAY
55017: PUSH
55018: LD_INT 1
55020: ARRAY
55021: PPUSH
55022: LD_VAR 0 6
55026: PUSH
55027: LD_VAR 0 4
55031: ARRAY
55032: PUSH
55033: LD_INT 2
55035: ARRAY
55036: PPUSH
55037: CALL_OW 428
55041: PUSH
55042: LD_INT 0
55044: NONEQUAL
55045: OR
55046: IFFALSE 55068
// tmp := Delete ( tmp , i ) ;
55048: LD_ADDR_VAR 0 6
55052: PUSH
55053: LD_VAR 0 6
55057: PPUSH
55058: LD_VAR 0 4
55062: PPUSH
55063: CALL_OW 3
55067: ST_TO_ADDR
55068: GO 54968
55070: POP
55071: POP
// j := GetClosestHex ( unit , tmp ) ;
55072: LD_ADDR_VAR 0 5
55076: PUSH
55077: LD_VAR 0 1
55081: PPUSH
55082: LD_VAR 0 6
55086: PPUSH
55087: CALL 54363 0 2
55091: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55092: LD_VAR 0 1
55096: PPUSH
55097: LD_VAR 0 5
55101: PUSH
55102: LD_INT 1
55104: ARRAY
55105: PPUSH
55106: LD_VAR 0 5
55110: PUSH
55111: LD_INT 2
55113: ARRAY
55114: PPUSH
55115: CALL_OW 111
// end ;
55119: LD_VAR 0 3
55123: RET
// export function PrepareApemanSoldier ( ) ; begin
55124: LD_INT 0
55126: PPUSH
// uc_nation := 0 ;
55127: LD_ADDR_OWVAR 21
55131: PUSH
55132: LD_INT 0
55134: ST_TO_ADDR
// hc_sex := sex_male ;
55135: LD_ADDR_OWVAR 27
55139: PUSH
55140: LD_INT 1
55142: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
55143: LD_ADDR_OWVAR 28
55147: PUSH
55148: LD_INT 15
55150: ST_TO_ADDR
// hc_gallery :=  ;
55151: LD_ADDR_OWVAR 33
55155: PUSH
55156: LD_STRING 
55158: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55159: LD_ADDR_OWVAR 31
55163: PUSH
55164: LD_INT 0
55166: PPUSH
55167: LD_INT 3
55169: PPUSH
55170: CALL_OW 12
55174: PUSH
55175: LD_INT 0
55177: PPUSH
55178: LD_INT 3
55180: PPUSH
55181: CALL_OW 12
55185: PUSH
55186: LD_INT 0
55188: PUSH
55189: LD_INT 0
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: ST_TO_ADDR
// end ;
55198: LD_VAR 0 1
55202: RET
// export function PrepareApemanEngineer ( ) ; begin
55203: LD_INT 0
55205: PPUSH
// uc_nation := 0 ;
55206: LD_ADDR_OWVAR 21
55210: PUSH
55211: LD_INT 0
55213: ST_TO_ADDR
// hc_sex := sex_male ;
55214: LD_ADDR_OWVAR 27
55218: PUSH
55219: LD_INT 1
55221: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
55222: LD_ADDR_OWVAR 28
55226: PUSH
55227: LD_INT 16
55229: ST_TO_ADDR
// hc_gallery :=  ;
55230: LD_ADDR_OWVAR 33
55234: PUSH
55235: LD_STRING 
55237: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55238: LD_ADDR_OWVAR 31
55242: PUSH
55243: LD_INT 0
55245: PPUSH
55246: LD_INT 3
55248: PPUSH
55249: CALL_OW 12
55253: PUSH
55254: LD_INT 0
55256: PPUSH
55257: LD_INT 3
55259: PPUSH
55260: CALL_OW 12
55264: PUSH
55265: LD_INT 0
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: ST_TO_ADDR
// end ;
55277: LD_VAR 0 1
55281: RET
// export function PrepareApeman ( agressivity ) ; begin
55282: LD_INT 0
55284: PPUSH
// uc_side := 0 ;
55285: LD_ADDR_OWVAR 20
55289: PUSH
55290: LD_INT 0
55292: ST_TO_ADDR
// uc_nation := 0 ;
55293: LD_ADDR_OWVAR 21
55297: PUSH
55298: LD_INT 0
55300: ST_TO_ADDR
// hc_sex := sex_male ;
55301: LD_ADDR_OWVAR 27
55305: PUSH
55306: LD_INT 1
55308: ST_TO_ADDR
// hc_class := class_apeman ;
55309: LD_ADDR_OWVAR 28
55313: PUSH
55314: LD_INT 12
55316: ST_TO_ADDR
// hc_gallery :=  ;
55317: LD_ADDR_OWVAR 33
55321: PUSH
55322: LD_STRING 
55324: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55325: LD_ADDR_OWVAR 35
55329: PUSH
55330: LD_VAR 0 1
55334: NEG
55335: PPUSH
55336: LD_VAR 0 1
55340: PPUSH
55341: CALL_OW 12
55345: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55346: LD_ADDR_OWVAR 31
55350: PUSH
55351: LD_INT 0
55353: PPUSH
55354: LD_INT 3
55356: PPUSH
55357: CALL_OW 12
55361: PUSH
55362: LD_INT 0
55364: PPUSH
55365: LD_INT 3
55367: PPUSH
55368: CALL_OW 12
55372: PUSH
55373: LD_INT 0
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: ST_TO_ADDR
// end ;
55385: LD_VAR 0 2
55389: RET
// export function PrepareTiger ( agressivity ) ; begin
55390: LD_INT 0
55392: PPUSH
// uc_side := 0 ;
55393: LD_ADDR_OWVAR 20
55397: PUSH
55398: LD_INT 0
55400: ST_TO_ADDR
// uc_nation := 0 ;
55401: LD_ADDR_OWVAR 21
55405: PUSH
55406: LD_INT 0
55408: ST_TO_ADDR
// hc_class := class_tiger ;
55409: LD_ADDR_OWVAR 28
55413: PUSH
55414: LD_INT 14
55416: ST_TO_ADDR
// hc_gallery :=  ;
55417: LD_ADDR_OWVAR 33
55421: PUSH
55422: LD_STRING 
55424: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55425: LD_ADDR_OWVAR 35
55429: PUSH
55430: LD_VAR 0 1
55434: NEG
55435: PPUSH
55436: LD_VAR 0 1
55440: PPUSH
55441: CALL_OW 12
55445: ST_TO_ADDR
// end ;
55446: LD_VAR 0 2
55450: RET
// export function PrepareEnchidna ( ) ; begin
55451: LD_INT 0
55453: PPUSH
// uc_side := 0 ;
55454: LD_ADDR_OWVAR 20
55458: PUSH
55459: LD_INT 0
55461: ST_TO_ADDR
// uc_nation := 0 ;
55462: LD_ADDR_OWVAR 21
55466: PUSH
55467: LD_INT 0
55469: ST_TO_ADDR
// hc_class := class_baggie ;
55470: LD_ADDR_OWVAR 28
55474: PUSH
55475: LD_INT 13
55477: ST_TO_ADDR
// hc_gallery :=  ;
55478: LD_ADDR_OWVAR 33
55482: PUSH
55483: LD_STRING 
55485: ST_TO_ADDR
// end ;
55486: LD_VAR 0 1
55490: RET
// export function PrepareFrog ( ) ; begin
55491: LD_INT 0
55493: PPUSH
// uc_side := 0 ;
55494: LD_ADDR_OWVAR 20
55498: PUSH
55499: LD_INT 0
55501: ST_TO_ADDR
// uc_nation := 0 ;
55502: LD_ADDR_OWVAR 21
55506: PUSH
55507: LD_INT 0
55509: ST_TO_ADDR
// hc_class := class_frog ;
55510: LD_ADDR_OWVAR 28
55514: PUSH
55515: LD_INT 19
55517: ST_TO_ADDR
// hc_gallery :=  ;
55518: LD_ADDR_OWVAR 33
55522: PUSH
55523: LD_STRING 
55525: ST_TO_ADDR
// end ;
55526: LD_VAR 0 1
55530: RET
// export function PrepareFish ( ) ; begin
55531: LD_INT 0
55533: PPUSH
// uc_side := 0 ;
55534: LD_ADDR_OWVAR 20
55538: PUSH
55539: LD_INT 0
55541: ST_TO_ADDR
// uc_nation := 0 ;
55542: LD_ADDR_OWVAR 21
55546: PUSH
55547: LD_INT 0
55549: ST_TO_ADDR
// hc_class := class_fish ;
55550: LD_ADDR_OWVAR 28
55554: PUSH
55555: LD_INT 20
55557: ST_TO_ADDR
// hc_gallery :=  ;
55558: LD_ADDR_OWVAR 33
55562: PUSH
55563: LD_STRING 
55565: ST_TO_ADDR
// end ;
55566: LD_VAR 0 1
55570: RET
// export function PrepareBird ( ) ; begin
55571: LD_INT 0
55573: PPUSH
// uc_side := 0 ;
55574: LD_ADDR_OWVAR 20
55578: PUSH
55579: LD_INT 0
55581: ST_TO_ADDR
// uc_nation := 0 ;
55582: LD_ADDR_OWVAR 21
55586: PUSH
55587: LD_INT 0
55589: ST_TO_ADDR
// hc_class := class_phororhacos ;
55590: LD_ADDR_OWVAR 28
55594: PUSH
55595: LD_INT 18
55597: ST_TO_ADDR
// hc_gallery :=  ;
55598: LD_ADDR_OWVAR 33
55602: PUSH
55603: LD_STRING 
55605: ST_TO_ADDR
// end ;
55606: LD_VAR 0 1
55610: RET
// export function PrepareHorse ( ) ; begin
55611: LD_INT 0
55613: PPUSH
// uc_side := 0 ;
55614: LD_ADDR_OWVAR 20
55618: PUSH
55619: LD_INT 0
55621: ST_TO_ADDR
// uc_nation := 0 ;
55622: LD_ADDR_OWVAR 21
55626: PUSH
55627: LD_INT 0
55629: ST_TO_ADDR
// hc_class := class_horse ;
55630: LD_ADDR_OWVAR 28
55634: PUSH
55635: LD_INT 21
55637: ST_TO_ADDR
// hc_gallery :=  ;
55638: LD_ADDR_OWVAR 33
55642: PUSH
55643: LD_STRING 
55645: ST_TO_ADDR
// end ;
55646: LD_VAR 0 1
55650: RET
// export function PrepareMastodont ( ) ; begin
55651: LD_INT 0
55653: PPUSH
// uc_side := 0 ;
55654: LD_ADDR_OWVAR 20
55658: PUSH
55659: LD_INT 0
55661: ST_TO_ADDR
// uc_nation := 0 ;
55662: LD_ADDR_OWVAR 21
55666: PUSH
55667: LD_INT 0
55669: ST_TO_ADDR
// vc_chassis := class_mastodont ;
55670: LD_ADDR_OWVAR 37
55674: PUSH
55675: LD_INT 31
55677: ST_TO_ADDR
// vc_control := control_rider ;
55678: LD_ADDR_OWVAR 38
55682: PUSH
55683: LD_INT 4
55685: ST_TO_ADDR
// end ;
55686: LD_VAR 0 1
55690: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55691: LD_INT 0
55693: PPUSH
55694: PPUSH
55695: PPUSH
// uc_side = 0 ;
55696: LD_ADDR_OWVAR 20
55700: PUSH
55701: LD_INT 0
55703: ST_TO_ADDR
// uc_nation = 0 ;
55704: LD_ADDR_OWVAR 21
55708: PUSH
55709: LD_INT 0
55711: ST_TO_ADDR
// InitHc_All ( ) ;
55712: CALL_OW 584
// InitVc ;
55716: CALL_OW 20
// if mastodonts then
55720: LD_VAR 0 6
55724: IFFALSE 55791
// for i = 1 to mastodonts do
55726: LD_ADDR_VAR 0 11
55730: PUSH
55731: DOUBLE
55732: LD_INT 1
55734: DEC
55735: ST_TO_ADDR
55736: LD_VAR 0 6
55740: PUSH
55741: FOR_TO
55742: IFFALSE 55789
// begin vc_chassis := 31 ;
55744: LD_ADDR_OWVAR 37
55748: PUSH
55749: LD_INT 31
55751: ST_TO_ADDR
// vc_control := control_rider ;
55752: LD_ADDR_OWVAR 38
55756: PUSH
55757: LD_INT 4
55759: ST_TO_ADDR
// animal := CreateVehicle ;
55760: LD_ADDR_VAR 0 12
55764: PUSH
55765: CALL_OW 45
55769: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55770: LD_VAR 0 12
55774: PPUSH
55775: LD_VAR 0 8
55779: PPUSH
55780: LD_INT 0
55782: PPUSH
55783: CALL 57919 0 3
// end ;
55787: GO 55741
55789: POP
55790: POP
// if horses then
55791: LD_VAR 0 5
55795: IFFALSE 55862
// for i = 1 to horses do
55797: LD_ADDR_VAR 0 11
55801: PUSH
55802: DOUBLE
55803: LD_INT 1
55805: DEC
55806: ST_TO_ADDR
55807: LD_VAR 0 5
55811: PUSH
55812: FOR_TO
55813: IFFALSE 55860
// begin hc_class := 21 ;
55815: LD_ADDR_OWVAR 28
55819: PUSH
55820: LD_INT 21
55822: ST_TO_ADDR
// hc_gallery :=  ;
55823: LD_ADDR_OWVAR 33
55827: PUSH
55828: LD_STRING 
55830: ST_TO_ADDR
// animal := CreateHuman ;
55831: LD_ADDR_VAR 0 12
55835: PUSH
55836: CALL_OW 44
55840: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55841: LD_VAR 0 12
55845: PPUSH
55846: LD_VAR 0 8
55850: PPUSH
55851: LD_INT 0
55853: PPUSH
55854: CALL 57919 0 3
// end ;
55858: GO 55812
55860: POP
55861: POP
// if birds then
55862: LD_VAR 0 1
55866: IFFALSE 55933
// for i = 1 to birds do
55868: LD_ADDR_VAR 0 11
55872: PUSH
55873: DOUBLE
55874: LD_INT 1
55876: DEC
55877: ST_TO_ADDR
55878: LD_VAR 0 1
55882: PUSH
55883: FOR_TO
55884: IFFALSE 55931
// begin hc_class := 18 ;
55886: LD_ADDR_OWVAR 28
55890: PUSH
55891: LD_INT 18
55893: ST_TO_ADDR
// hc_gallery =  ;
55894: LD_ADDR_OWVAR 33
55898: PUSH
55899: LD_STRING 
55901: ST_TO_ADDR
// animal := CreateHuman ;
55902: LD_ADDR_VAR 0 12
55906: PUSH
55907: CALL_OW 44
55911: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55912: LD_VAR 0 12
55916: PPUSH
55917: LD_VAR 0 8
55921: PPUSH
55922: LD_INT 0
55924: PPUSH
55925: CALL 57919 0 3
// end ;
55929: GO 55883
55931: POP
55932: POP
// if tigers then
55933: LD_VAR 0 2
55937: IFFALSE 56021
// for i = 1 to tigers do
55939: LD_ADDR_VAR 0 11
55943: PUSH
55944: DOUBLE
55945: LD_INT 1
55947: DEC
55948: ST_TO_ADDR
55949: LD_VAR 0 2
55953: PUSH
55954: FOR_TO
55955: IFFALSE 56019
// begin hc_class = class_tiger ;
55957: LD_ADDR_OWVAR 28
55961: PUSH
55962: LD_INT 14
55964: ST_TO_ADDR
// hc_gallery =  ;
55965: LD_ADDR_OWVAR 33
55969: PUSH
55970: LD_STRING 
55972: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55973: LD_ADDR_OWVAR 35
55977: PUSH
55978: LD_INT 7
55980: NEG
55981: PPUSH
55982: LD_INT 7
55984: PPUSH
55985: CALL_OW 12
55989: ST_TO_ADDR
// animal := CreateHuman ;
55990: LD_ADDR_VAR 0 12
55994: PUSH
55995: CALL_OW 44
55999: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56000: LD_VAR 0 12
56004: PPUSH
56005: LD_VAR 0 8
56009: PPUSH
56010: LD_INT 0
56012: PPUSH
56013: CALL 57919 0 3
// end ;
56017: GO 55954
56019: POP
56020: POP
// if apemans then
56021: LD_VAR 0 3
56025: IFFALSE 56148
// for i = 1 to apemans do
56027: LD_ADDR_VAR 0 11
56031: PUSH
56032: DOUBLE
56033: LD_INT 1
56035: DEC
56036: ST_TO_ADDR
56037: LD_VAR 0 3
56041: PUSH
56042: FOR_TO
56043: IFFALSE 56146
// begin hc_class = class_apeman ;
56045: LD_ADDR_OWVAR 28
56049: PUSH
56050: LD_INT 12
56052: ST_TO_ADDR
// hc_gallery =  ;
56053: LD_ADDR_OWVAR 33
56057: PUSH
56058: LD_STRING 
56060: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56061: LD_ADDR_OWVAR 35
56065: PUSH
56066: LD_INT 2
56068: NEG
56069: PPUSH
56070: LD_INT 2
56072: PPUSH
56073: CALL_OW 12
56077: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56078: LD_ADDR_OWVAR 31
56082: PUSH
56083: LD_INT 1
56085: PPUSH
56086: LD_INT 3
56088: PPUSH
56089: CALL_OW 12
56093: PUSH
56094: LD_INT 1
56096: PPUSH
56097: LD_INT 3
56099: PPUSH
56100: CALL_OW 12
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: ST_TO_ADDR
// animal := CreateHuman ;
56117: LD_ADDR_VAR 0 12
56121: PUSH
56122: CALL_OW 44
56126: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56127: LD_VAR 0 12
56131: PPUSH
56132: LD_VAR 0 8
56136: PPUSH
56137: LD_INT 0
56139: PPUSH
56140: CALL 57919 0 3
// end ;
56144: GO 56042
56146: POP
56147: POP
// if enchidnas then
56148: LD_VAR 0 4
56152: IFFALSE 56219
// for i = 1 to enchidnas do
56154: LD_ADDR_VAR 0 11
56158: PUSH
56159: DOUBLE
56160: LD_INT 1
56162: DEC
56163: ST_TO_ADDR
56164: LD_VAR 0 4
56168: PUSH
56169: FOR_TO
56170: IFFALSE 56217
// begin hc_class = 13 ;
56172: LD_ADDR_OWVAR 28
56176: PUSH
56177: LD_INT 13
56179: ST_TO_ADDR
// hc_gallery =  ;
56180: LD_ADDR_OWVAR 33
56184: PUSH
56185: LD_STRING 
56187: ST_TO_ADDR
// animal := CreateHuman ;
56188: LD_ADDR_VAR 0 12
56192: PUSH
56193: CALL_OW 44
56197: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56198: LD_VAR 0 12
56202: PPUSH
56203: LD_VAR 0 8
56207: PPUSH
56208: LD_INT 0
56210: PPUSH
56211: CALL 57919 0 3
// end ;
56215: GO 56169
56217: POP
56218: POP
// if fishes then
56219: LD_VAR 0 7
56223: IFFALSE 56290
// for i = 1 to fishes do
56225: LD_ADDR_VAR 0 11
56229: PUSH
56230: DOUBLE
56231: LD_INT 1
56233: DEC
56234: ST_TO_ADDR
56235: LD_VAR 0 7
56239: PUSH
56240: FOR_TO
56241: IFFALSE 56288
// begin hc_class = 20 ;
56243: LD_ADDR_OWVAR 28
56247: PUSH
56248: LD_INT 20
56250: ST_TO_ADDR
// hc_gallery =  ;
56251: LD_ADDR_OWVAR 33
56255: PUSH
56256: LD_STRING 
56258: ST_TO_ADDR
// animal := CreateHuman ;
56259: LD_ADDR_VAR 0 12
56263: PUSH
56264: CALL_OW 44
56268: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56269: LD_VAR 0 12
56273: PPUSH
56274: LD_VAR 0 9
56278: PPUSH
56279: LD_INT 0
56281: PPUSH
56282: CALL 57919 0 3
// end ;
56286: GO 56240
56288: POP
56289: POP
// end ;
56290: LD_VAR 0 10
56294: RET
// export function WantHeal ( sci , unit ) ; begin
56295: LD_INT 0
56297: PPUSH
// if GetTaskList ( sci ) > 0 then
56298: LD_VAR 0 1
56302: PPUSH
56303: CALL_OW 437
56307: PUSH
56308: LD_INT 0
56310: GREATER
56311: IFFALSE 56381
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56313: LD_VAR 0 1
56317: PPUSH
56318: CALL_OW 437
56322: PUSH
56323: LD_INT 1
56325: ARRAY
56326: PUSH
56327: LD_INT 1
56329: ARRAY
56330: PUSH
56331: LD_STRING l
56333: EQUAL
56334: PUSH
56335: LD_VAR 0 1
56339: PPUSH
56340: CALL_OW 437
56344: PUSH
56345: LD_INT 1
56347: ARRAY
56348: PUSH
56349: LD_INT 4
56351: ARRAY
56352: PUSH
56353: LD_VAR 0 2
56357: EQUAL
56358: AND
56359: IFFALSE 56371
// result := true else
56361: LD_ADDR_VAR 0 3
56365: PUSH
56366: LD_INT 1
56368: ST_TO_ADDR
56369: GO 56379
// result := false ;
56371: LD_ADDR_VAR 0 3
56375: PUSH
56376: LD_INT 0
56378: ST_TO_ADDR
// end else
56379: GO 56389
// result := false ;
56381: LD_ADDR_VAR 0 3
56385: PUSH
56386: LD_INT 0
56388: ST_TO_ADDR
// end ;
56389: LD_VAR 0 3
56393: RET
// export function HealTarget ( sci ) ; begin
56394: LD_INT 0
56396: PPUSH
// if not sci then
56397: LD_VAR 0 1
56401: NOT
56402: IFFALSE 56406
// exit ;
56404: GO 56471
// result := 0 ;
56406: LD_ADDR_VAR 0 2
56410: PUSH
56411: LD_INT 0
56413: ST_TO_ADDR
// if GetTaskList ( sci ) then
56414: LD_VAR 0 1
56418: PPUSH
56419: CALL_OW 437
56423: IFFALSE 56471
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56425: LD_VAR 0 1
56429: PPUSH
56430: CALL_OW 437
56434: PUSH
56435: LD_INT 1
56437: ARRAY
56438: PUSH
56439: LD_INT 1
56441: ARRAY
56442: PUSH
56443: LD_STRING l
56445: EQUAL
56446: IFFALSE 56471
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56448: LD_ADDR_VAR 0 2
56452: PUSH
56453: LD_VAR 0 1
56457: PPUSH
56458: CALL_OW 437
56462: PUSH
56463: LD_INT 1
56465: ARRAY
56466: PUSH
56467: LD_INT 4
56469: ARRAY
56470: ST_TO_ADDR
// end ;
56471: LD_VAR 0 2
56475: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56476: LD_INT 0
56478: PPUSH
56479: PPUSH
56480: PPUSH
56481: PPUSH
// if not base_units then
56482: LD_VAR 0 1
56486: NOT
56487: IFFALSE 56491
// exit ;
56489: GO 56578
// result := false ;
56491: LD_ADDR_VAR 0 2
56495: PUSH
56496: LD_INT 0
56498: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56499: LD_ADDR_VAR 0 5
56503: PUSH
56504: LD_VAR 0 1
56508: PPUSH
56509: LD_INT 21
56511: PUSH
56512: LD_INT 3
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PPUSH
56519: CALL_OW 72
56523: ST_TO_ADDR
// if not tmp then
56524: LD_VAR 0 5
56528: NOT
56529: IFFALSE 56533
// exit ;
56531: GO 56578
// for i in tmp do
56533: LD_ADDR_VAR 0 3
56537: PUSH
56538: LD_VAR 0 5
56542: PUSH
56543: FOR_IN
56544: IFFALSE 56576
// begin result := EnemyInRange ( i , 22 ) ;
56546: LD_ADDR_VAR 0 2
56550: PUSH
56551: LD_VAR 0 3
56555: PPUSH
56556: LD_INT 22
56558: PPUSH
56559: CALL 54165 0 2
56563: ST_TO_ADDR
// if result then
56564: LD_VAR 0 2
56568: IFFALSE 56574
// exit ;
56570: POP
56571: POP
56572: GO 56578
// end ;
56574: GO 56543
56576: POP
56577: POP
// end ;
56578: LD_VAR 0 2
56582: RET
// export function FilterByTag ( units , tag ) ; begin
56583: LD_INT 0
56585: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
56586: LD_ADDR_VAR 0 3
56590: PUSH
56591: LD_VAR 0 1
56595: PPUSH
56596: LD_INT 120
56598: PUSH
56599: LD_VAR 0 2
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PPUSH
56608: CALL_OW 72
56612: ST_TO_ADDR
// end ;
56613: LD_VAR 0 3
56617: RET
// export function IsDriver ( un ) ; begin
56618: LD_INT 0
56620: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56621: LD_ADDR_VAR 0 2
56625: PUSH
56626: LD_VAR 0 1
56630: PUSH
56631: LD_INT 55
56633: PUSH
56634: EMPTY
56635: LIST
56636: PPUSH
56637: CALL_OW 69
56641: IN
56642: ST_TO_ADDR
// end ;
56643: LD_VAR 0 2
56647: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56648: LD_INT 0
56650: PPUSH
56651: PPUSH
// list := [ ] ;
56652: LD_ADDR_VAR 0 5
56656: PUSH
56657: EMPTY
56658: ST_TO_ADDR
// case d of 0 :
56659: LD_VAR 0 3
56663: PUSH
56664: LD_INT 0
56666: DOUBLE
56667: EQUAL
56668: IFTRUE 56672
56670: GO 56805
56672: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56673: LD_ADDR_VAR 0 5
56677: PUSH
56678: LD_VAR 0 1
56682: PUSH
56683: LD_INT 4
56685: MINUS
56686: PUSH
56687: LD_VAR 0 2
56691: PUSH
56692: LD_INT 4
56694: MINUS
56695: PUSH
56696: LD_INT 2
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: LIST
56703: PUSH
56704: LD_VAR 0 1
56708: PUSH
56709: LD_INT 3
56711: MINUS
56712: PUSH
56713: LD_VAR 0 2
56717: PUSH
56718: LD_INT 1
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: LIST
56725: PUSH
56726: LD_VAR 0 1
56730: PUSH
56731: LD_INT 4
56733: PLUS
56734: PUSH
56735: LD_VAR 0 2
56739: PUSH
56740: LD_INT 4
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: LIST
56747: PUSH
56748: LD_VAR 0 1
56752: PUSH
56753: LD_INT 3
56755: PLUS
56756: PUSH
56757: LD_VAR 0 2
56761: PUSH
56762: LD_INT 3
56764: PLUS
56765: PUSH
56766: LD_INT 5
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: LIST
56773: PUSH
56774: LD_VAR 0 1
56778: PUSH
56779: LD_VAR 0 2
56783: PUSH
56784: LD_INT 4
56786: PLUS
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: LIST
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: ST_TO_ADDR
// end ; 1 :
56803: GO 57503
56805: LD_INT 1
56807: DOUBLE
56808: EQUAL
56809: IFTRUE 56813
56811: GO 56946
56813: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56814: LD_ADDR_VAR 0 5
56818: PUSH
56819: LD_VAR 0 1
56823: PUSH
56824: LD_VAR 0 2
56828: PUSH
56829: LD_INT 4
56831: MINUS
56832: PUSH
56833: LD_INT 3
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: LIST
56840: PUSH
56841: LD_VAR 0 1
56845: PUSH
56846: LD_INT 3
56848: MINUS
56849: PUSH
56850: LD_VAR 0 2
56854: PUSH
56855: LD_INT 3
56857: MINUS
56858: PUSH
56859: LD_INT 2
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: LIST
56866: PUSH
56867: LD_VAR 0 1
56871: PUSH
56872: LD_INT 4
56874: MINUS
56875: PUSH
56876: LD_VAR 0 2
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: LIST
56888: PUSH
56889: LD_VAR 0 1
56893: PUSH
56894: LD_VAR 0 2
56898: PUSH
56899: LD_INT 3
56901: PLUS
56902: PUSH
56903: LD_INT 0
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: LIST
56910: PUSH
56911: LD_VAR 0 1
56915: PUSH
56916: LD_INT 4
56918: PLUS
56919: PUSH
56920: LD_VAR 0 2
56924: PUSH
56925: LD_INT 4
56927: PLUS
56928: PUSH
56929: LD_INT 5
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: LIST
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: ST_TO_ADDR
// end ; 2 :
56944: GO 57503
56946: LD_INT 2
56948: DOUBLE
56949: EQUAL
56950: IFTRUE 56954
56952: GO 57083
56954: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56955: LD_ADDR_VAR 0 5
56959: PUSH
56960: LD_VAR 0 1
56964: PUSH
56965: LD_VAR 0 2
56969: PUSH
56970: LD_INT 3
56972: MINUS
56973: PUSH
56974: LD_INT 3
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: LIST
56981: PUSH
56982: LD_VAR 0 1
56986: PUSH
56987: LD_INT 4
56989: PLUS
56990: PUSH
56991: LD_VAR 0 2
56995: PUSH
56996: LD_INT 4
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: LIST
57003: PUSH
57004: LD_VAR 0 1
57008: PUSH
57009: LD_VAR 0 2
57013: PUSH
57014: LD_INT 4
57016: PLUS
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: LIST
57025: PUSH
57026: LD_VAR 0 1
57030: PUSH
57031: LD_INT 3
57033: MINUS
57034: PUSH
57035: LD_VAR 0 2
57039: PUSH
57040: LD_INT 1
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: LIST
57047: PUSH
57048: LD_VAR 0 1
57052: PUSH
57053: LD_INT 4
57055: MINUS
57056: PUSH
57057: LD_VAR 0 2
57061: PUSH
57062: LD_INT 4
57064: MINUS
57065: PUSH
57066: LD_INT 2
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: LIST
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: ST_TO_ADDR
// end ; 3 :
57081: GO 57503
57083: LD_INT 3
57085: DOUBLE
57086: EQUAL
57087: IFTRUE 57091
57089: GO 57224
57091: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57092: LD_ADDR_VAR 0 5
57096: PUSH
57097: LD_VAR 0 1
57101: PUSH
57102: LD_INT 3
57104: PLUS
57105: PUSH
57106: LD_VAR 0 2
57110: PUSH
57111: LD_INT 4
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: LIST
57118: PUSH
57119: LD_VAR 0 1
57123: PUSH
57124: LD_INT 4
57126: PLUS
57127: PUSH
57128: LD_VAR 0 2
57132: PUSH
57133: LD_INT 4
57135: PLUS
57136: PUSH
57137: LD_INT 5
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: LIST
57144: PUSH
57145: LD_VAR 0 1
57149: PUSH
57150: LD_INT 4
57152: MINUS
57153: PUSH
57154: LD_VAR 0 2
57158: PUSH
57159: LD_INT 1
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: LIST
57166: PUSH
57167: LD_VAR 0 1
57171: PUSH
57172: LD_VAR 0 2
57176: PUSH
57177: LD_INT 4
57179: MINUS
57180: PUSH
57181: LD_INT 3
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: LIST
57188: PUSH
57189: LD_VAR 0 1
57193: PUSH
57194: LD_INT 3
57196: MINUS
57197: PUSH
57198: LD_VAR 0 2
57202: PUSH
57203: LD_INT 3
57205: MINUS
57206: PUSH
57207: LD_INT 2
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: LIST
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: ST_TO_ADDR
// end ; 4 :
57222: GO 57503
57224: LD_INT 4
57226: DOUBLE
57227: EQUAL
57228: IFTRUE 57232
57230: GO 57365
57232: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57233: LD_ADDR_VAR 0 5
57237: PUSH
57238: LD_VAR 0 1
57242: PUSH
57243: LD_VAR 0 2
57247: PUSH
57248: LD_INT 4
57250: PLUS
57251: PUSH
57252: LD_INT 0
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: LIST
57259: PUSH
57260: LD_VAR 0 1
57264: PUSH
57265: LD_INT 3
57267: PLUS
57268: PUSH
57269: LD_VAR 0 2
57273: PUSH
57274: LD_INT 3
57276: PLUS
57277: PUSH
57278: LD_INT 5
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: LIST
57285: PUSH
57286: LD_VAR 0 1
57290: PUSH
57291: LD_INT 4
57293: PLUS
57294: PUSH
57295: LD_VAR 0 2
57299: PUSH
57300: LD_INT 4
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: LIST
57307: PUSH
57308: LD_VAR 0 1
57312: PUSH
57313: LD_VAR 0 2
57317: PUSH
57318: LD_INT 3
57320: MINUS
57321: PUSH
57322: LD_INT 3
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: LIST
57329: PUSH
57330: LD_VAR 0 1
57334: PUSH
57335: LD_INT 4
57337: MINUS
57338: PUSH
57339: LD_VAR 0 2
57343: PUSH
57344: LD_INT 4
57346: MINUS
57347: PUSH
57348: LD_INT 2
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: LIST
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: ST_TO_ADDR
// end ; 5 :
57363: GO 57503
57365: LD_INT 5
57367: DOUBLE
57368: EQUAL
57369: IFTRUE 57373
57371: GO 57502
57373: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57374: LD_ADDR_VAR 0 5
57378: PUSH
57379: LD_VAR 0 1
57383: PUSH
57384: LD_INT 4
57386: MINUS
57387: PUSH
57388: LD_VAR 0 2
57392: PUSH
57393: LD_INT 1
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: LIST
57400: PUSH
57401: LD_VAR 0 1
57405: PUSH
57406: LD_VAR 0 2
57410: PUSH
57411: LD_INT 4
57413: MINUS
57414: PUSH
57415: LD_INT 3
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: LIST
57422: PUSH
57423: LD_VAR 0 1
57427: PUSH
57428: LD_INT 4
57430: PLUS
57431: PUSH
57432: LD_VAR 0 2
57436: PUSH
57437: LD_INT 4
57439: PLUS
57440: PUSH
57441: LD_INT 5
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: LIST
57448: PUSH
57449: LD_VAR 0 1
57453: PUSH
57454: LD_INT 3
57456: PLUS
57457: PUSH
57458: LD_VAR 0 2
57462: PUSH
57463: LD_INT 4
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: LIST
57470: PUSH
57471: LD_VAR 0 1
57475: PUSH
57476: LD_VAR 0 2
57480: PUSH
57481: LD_INT 3
57483: PLUS
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: LIST
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: ST_TO_ADDR
// end ; end ;
57500: GO 57503
57502: POP
// result := list ;
57503: LD_ADDR_VAR 0 4
57507: PUSH
57508: LD_VAR 0 5
57512: ST_TO_ADDR
// end ;
57513: LD_VAR 0 4
57517: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57518: LD_INT 0
57520: PPUSH
57521: PPUSH
57522: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57523: LD_VAR 0 1
57527: NOT
57528: PUSH
57529: LD_VAR 0 2
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: LD_INT 2
57539: PUSH
57540: LD_INT 3
57542: PUSH
57543: LD_INT 4
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: IN
57552: NOT
57553: OR
57554: IFFALSE 57558
// exit ;
57556: GO 57641
// tmp := [ ] ;
57558: LD_ADDR_VAR 0 5
57562: PUSH
57563: EMPTY
57564: ST_TO_ADDR
// for i in units do
57565: LD_ADDR_VAR 0 4
57569: PUSH
57570: LD_VAR 0 1
57574: PUSH
57575: FOR_IN
57576: IFFALSE 57610
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
57578: LD_ADDR_VAR 0 5
57582: PUSH
57583: LD_VAR 0 5
57587: PPUSH
57588: LD_VAR 0 4
57592: PPUSH
57593: LD_VAR 0 2
57597: PPUSH
57598: CALL_OW 259
57602: PPUSH
57603: CALL 59001 0 2
57607: ST_TO_ADDR
57608: GO 57575
57610: POP
57611: POP
// if not tmp then
57612: LD_VAR 0 5
57616: NOT
57617: IFFALSE 57621
// exit ;
57619: GO 57641
// result := SortListByListDesc ( units , tmp ) ;
57621: LD_ADDR_VAR 0 3
57625: PUSH
57626: LD_VAR 0 1
57630: PPUSH
57631: LD_VAR 0 5
57635: PPUSH
57636: CALL_OW 77
57640: ST_TO_ADDR
// end ;
57641: LD_VAR 0 3
57645: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57646: LD_INT 0
57648: PPUSH
57649: PPUSH
57650: PPUSH
// result := false ;
57651: LD_ADDR_VAR 0 3
57655: PUSH
57656: LD_INT 0
57658: ST_TO_ADDR
// if not building then
57659: LD_VAR 0 2
57663: NOT
57664: IFFALSE 57668
// exit ;
57666: GO 57806
// x := GetX ( building ) ;
57668: LD_ADDR_VAR 0 4
57672: PUSH
57673: LD_VAR 0 2
57677: PPUSH
57678: CALL_OW 250
57682: ST_TO_ADDR
// y := GetY ( building ) ;
57683: LD_ADDR_VAR 0 5
57687: PUSH
57688: LD_VAR 0 2
57692: PPUSH
57693: CALL_OW 251
57697: ST_TO_ADDR
// if not x or not y then
57698: LD_VAR 0 4
57702: NOT
57703: PUSH
57704: LD_VAR 0 5
57708: NOT
57709: OR
57710: IFFALSE 57714
// exit ;
57712: GO 57806
// if GetTaskList ( unit ) then
57714: LD_VAR 0 1
57718: PPUSH
57719: CALL_OW 437
57723: IFFALSE 57806
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57725: LD_STRING e
57727: PUSH
57728: LD_VAR 0 1
57732: PPUSH
57733: CALL_OW 437
57737: PUSH
57738: LD_INT 1
57740: ARRAY
57741: PUSH
57742: LD_INT 1
57744: ARRAY
57745: EQUAL
57746: PUSH
57747: LD_VAR 0 4
57751: PUSH
57752: LD_VAR 0 1
57756: PPUSH
57757: CALL_OW 437
57761: PUSH
57762: LD_INT 1
57764: ARRAY
57765: PUSH
57766: LD_INT 2
57768: ARRAY
57769: EQUAL
57770: AND
57771: PUSH
57772: LD_VAR 0 5
57776: PUSH
57777: LD_VAR 0 1
57781: PPUSH
57782: CALL_OW 437
57786: PUSH
57787: LD_INT 1
57789: ARRAY
57790: PUSH
57791: LD_INT 3
57793: ARRAY
57794: EQUAL
57795: AND
57796: IFFALSE 57806
// result := true end ;
57798: LD_ADDR_VAR 0 3
57802: PUSH
57803: LD_INT 1
57805: ST_TO_ADDR
// end ;
57806: LD_VAR 0 3
57810: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57811: LD_INT 0
57813: PPUSH
// result := false ;
57814: LD_ADDR_VAR 0 4
57818: PUSH
57819: LD_INT 0
57821: ST_TO_ADDR
// if GetTaskList ( unit ) then
57822: LD_VAR 0 1
57826: PPUSH
57827: CALL_OW 437
57831: IFFALSE 57914
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57833: LD_STRING M
57835: PUSH
57836: LD_VAR 0 1
57840: PPUSH
57841: CALL_OW 437
57845: PUSH
57846: LD_INT 1
57848: ARRAY
57849: PUSH
57850: LD_INT 1
57852: ARRAY
57853: EQUAL
57854: PUSH
57855: LD_VAR 0 2
57859: PUSH
57860: LD_VAR 0 1
57864: PPUSH
57865: CALL_OW 437
57869: PUSH
57870: LD_INT 1
57872: ARRAY
57873: PUSH
57874: LD_INT 2
57876: ARRAY
57877: EQUAL
57878: AND
57879: PUSH
57880: LD_VAR 0 3
57884: PUSH
57885: LD_VAR 0 1
57889: PPUSH
57890: CALL_OW 437
57894: PUSH
57895: LD_INT 1
57897: ARRAY
57898: PUSH
57899: LD_INT 3
57901: ARRAY
57902: EQUAL
57903: AND
57904: IFFALSE 57914
// result := true ;
57906: LD_ADDR_VAR 0 4
57910: PUSH
57911: LD_INT 1
57913: ST_TO_ADDR
// end ; end ;
57914: LD_VAR 0 4
57918: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57919: LD_INT 0
57921: PPUSH
57922: PPUSH
57923: PPUSH
57924: PPUSH
// if not unit or not area then
57925: LD_VAR 0 1
57929: NOT
57930: PUSH
57931: LD_VAR 0 2
57935: NOT
57936: OR
57937: IFFALSE 57941
// exit ;
57939: GO 58104
// tmp := AreaToList ( area , i ) ;
57941: LD_ADDR_VAR 0 6
57945: PUSH
57946: LD_VAR 0 2
57950: PPUSH
57951: LD_VAR 0 5
57955: PPUSH
57956: CALL_OW 517
57960: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57961: LD_ADDR_VAR 0 5
57965: PUSH
57966: DOUBLE
57967: LD_INT 1
57969: DEC
57970: ST_TO_ADDR
57971: LD_VAR 0 6
57975: PUSH
57976: LD_INT 1
57978: ARRAY
57979: PUSH
57980: FOR_TO
57981: IFFALSE 58102
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57983: LD_ADDR_VAR 0 7
57987: PUSH
57988: LD_VAR 0 6
57992: PUSH
57993: LD_INT 1
57995: ARRAY
57996: PUSH
57997: LD_VAR 0 5
58001: ARRAY
58002: PUSH
58003: LD_VAR 0 6
58007: PUSH
58008: LD_INT 2
58010: ARRAY
58011: PUSH
58012: LD_VAR 0 5
58016: ARRAY
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
58022: LD_INT 92
58024: PUSH
58025: LD_VAR 0 7
58029: PUSH
58030: LD_INT 1
58032: ARRAY
58033: PUSH
58034: LD_VAR 0 7
58038: PUSH
58039: LD_INT 2
58041: ARRAY
58042: PUSH
58043: LD_INT 3
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: PPUSH
58052: CALL_OW 69
58056: PUSH
58057: LD_INT 0
58059: EQUAL
58060: IFFALSE 58100
// begin PlaceUnitArea ( unit , area , mode ) ;
58062: LD_VAR 0 1
58066: PPUSH
58067: LD_VAR 0 2
58071: PPUSH
58072: LD_VAR 0 3
58076: PPUSH
58077: CALL_OW 49
// result := IsPlaced ( unit ) ;
58081: LD_ADDR_VAR 0 4
58085: PUSH
58086: LD_VAR 0 1
58090: PPUSH
58091: CALL_OW 305
58095: ST_TO_ADDR
// exit ;
58096: POP
58097: POP
58098: GO 58104
// end ; end ;
58100: GO 57980
58102: POP
58103: POP
// end ;
58104: LD_VAR 0 4
58108: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58109: LD_INT 0
58111: PPUSH
58112: PPUSH
58113: PPUSH
// if not side or side > 8 then
58114: LD_VAR 0 1
58118: NOT
58119: PUSH
58120: LD_VAR 0 1
58124: PUSH
58125: LD_INT 8
58127: GREATER
58128: OR
58129: IFFALSE 58133
// exit ;
58131: GO 58320
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58133: LD_ADDR_VAR 0 4
58137: PUSH
58138: LD_INT 22
58140: PUSH
58141: LD_VAR 0 1
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 21
58152: PUSH
58153: LD_INT 3
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PPUSH
58164: CALL_OW 69
58168: ST_TO_ADDR
// if not tmp then
58169: LD_VAR 0 4
58173: NOT
58174: IFFALSE 58178
// exit ;
58176: GO 58320
// enable_addtolog := true ;
58178: LD_ADDR_OWVAR 81
58182: PUSH
58183: LD_INT 1
58185: ST_TO_ADDR
// AddToLog ( [ ) ;
58186: LD_STRING [
58188: PPUSH
58189: CALL_OW 561
// for i in tmp do
58193: LD_ADDR_VAR 0 3
58197: PUSH
58198: LD_VAR 0 4
58202: PUSH
58203: FOR_IN
58204: IFFALSE 58311
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58206: LD_STRING [
58208: PUSH
58209: LD_VAR 0 3
58213: PPUSH
58214: CALL_OW 266
58218: STR
58219: PUSH
58220: LD_STRING , 
58222: STR
58223: PUSH
58224: LD_VAR 0 3
58228: PPUSH
58229: CALL_OW 250
58233: STR
58234: PUSH
58235: LD_STRING , 
58237: STR
58238: PUSH
58239: LD_VAR 0 3
58243: PPUSH
58244: CALL_OW 251
58248: STR
58249: PUSH
58250: LD_STRING , 
58252: STR
58253: PUSH
58254: LD_VAR 0 3
58258: PPUSH
58259: CALL_OW 254
58263: STR
58264: PUSH
58265: LD_STRING , 
58267: STR
58268: PUSH
58269: LD_VAR 0 3
58273: PPUSH
58274: LD_INT 1
58276: PPUSH
58277: CALL_OW 268
58281: STR
58282: PUSH
58283: LD_STRING , 
58285: STR
58286: PUSH
58287: LD_VAR 0 3
58291: PPUSH
58292: LD_INT 2
58294: PPUSH
58295: CALL_OW 268
58299: STR
58300: PUSH
58301: LD_STRING ],
58303: STR
58304: PPUSH
58305: CALL_OW 561
// end ;
58309: GO 58203
58311: POP
58312: POP
// AddToLog ( ]; ) ;
58313: LD_STRING ];
58315: PPUSH
58316: CALL_OW 561
// end ;
58320: LD_VAR 0 2
58324: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58325: LD_INT 0
58327: PPUSH
58328: PPUSH
58329: PPUSH
58330: PPUSH
58331: PPUSH
// if not area or not rate or not max then
58332: LD_VAR 0 1
58336: NOT
58337: PUSH
58338: LD_VAR 0 2
58342: NOT
58343: OR
58344: PUSH
58345: LD_VAR 0 4
58349: NOT
58350: OR
58351: IFFALSE 58355
// exit ;
58353: GO 58544
// while 1 do
58355: LD_INT 1
58357: IFFALSE 58544
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58359: LD_ADDR_VAR 0 9
58363: PUSH
58364: LD_VAR 0 1
58368: PPUSH
58369: LD_INT 1
58371: PPUSH
58372: CALL_OW 287
58376: PUSH
58377: LD_INT 10
58379: MUL
58380: ST_TO_ADDR
// r := rate / 10 ;
58381: LD_ADDR_VAR 0 7
58385: PUSH
58386: LD_VAR 0 2
58390: PUSH
58391: LD_INT 10
58393: DIVREAL
58394: ST_TO_ADDR
// time := 1 1$00 ;
58395: LD_ADDR_VAR 0 8
58399: PUSH
58400: LD_INT 2100
58402: ST_TO_ADDR
// if amount < min then
58403: LD_VAR 0 9
58407: PUSH
58408: LD_VAR 0 3
58412: LESS
58413: IFFALSE 58431
// r := r * 2 else
58415: LD_ADDR_VAR 0 7
58419: PUSH
58420: LD_VAR 0 7
58424: PUSH
58425: LD_INT 2
58427: MUL
58428: ST_TO_ADDR
58429: GO 58457
// if amount > max then
58431: LD_VAR 0 9
58435: PUSH
58436: LD_VAR 0 4
58440: GREATER
58441: IFFALSE 58457
// r := r / 2 ;
58443: LD_ADDR_VAR 0 7
58447: PUSH
58448: LD_VAR 0 7
58452: PUSH
58453: LD_INT 2
58455: DIVREAL
58456: ST_TO_ADDR
// time := time / r ;
58457: LD_ADDR_VAR 0 8
58461: PUSH
58462: LD_VAR 0 8
58466: PUSH
58467: LD_VAR 0 7
58471: DIVREAL
58472: ST_TO_ADDR
// if time < 0 then
58473: LD_VAR 0 8
58477: PUSH
58478: LD_INT 0
58480: LESS
58481: IFFALSE 58498
// time := time * - 1 ;
58483: LD_ADDR_VAR 0 8
58487: PUSH
58488: LD_VAR 0 8
58492: PUSH
58493: LD_INT 1
58495: NEG
58496: MUL
58497: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
58498: LD_VAR 0 8
58502: PUSH
58503: LD_INT 35
58505: PPUSH
58506: LD_INT 875
58508: PPUSH
58509: CALL_OW 12
58513: PLUS
58514: PPUSH
58515: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58519: LD_INT 1
58521: PPUSH
58522: LD_INT 5
58524: PPUSH
58525: CALL_OW 12
58529: PPUSH
58530: LD_VAR 0 1
58534: PPUSH
58535: LD_INT 1
58537: PPUSH
58538: CALL_OW 55
// end ;
58542: GO 58355
// end ;
58544: LD_VAR 0 5
58548: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58549: LD_INT 0
58551: PPUSH
58552: PPUSH
58553: PPUSH
58554: PPUSH
58555: PPUSH
58556: PPUSH
58557: PPUSH
58558: PPUSH
// if not turrets or not factories then
58559: LD_VAR 0 1
58563: NOT
58564: PUSH
58565: LD_VAR 0 2
58569: NOT
58570: OR
58571: IFFALSE 58575
// exit ;
58573: GO 58882
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58575: LD_ADDR_VAR 0 10
58579: PUSH
58580: LD_INT 5
58582: PUSH
58583: LD_INT 6
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 2
58592: PUSH
58593: LD_INT 4
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 3
58602: PUSH
58603: LD_INT 5
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 24
58617: PUSH
58618: LD_INT 25
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 23
58627: PUSH
58628: LD_INT 27
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 42
58641: PUSH
58642: LD_INT 43
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 44
58651: PUSH
58652: LD_INT 46
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 45
58661: PUSH
58662: LD_INT 47
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: LIST
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: LIST
58678: ST_TO_ADDR
// result := [ ] ;
58679: LD_ADDR_VAR 0 3
58683: PUSH
58684: EMPTY
58685: ST_TO_ADDR
// for i in turrets do
58686: LD_ADDR_VAR 0 4
58690: PUSH
58691: LD_VAR 0 1
58695: PUSH
58696: FOR_IN
58697: IFFALSE 58880
// begin nat := GetNation ( i ) ;
58699: LD_ADDR_VAR 0 7
58703: PUSH
58704: LD_VAR 0 4
58708: PPUSH
58709: CALL_OW 248
58713: ST_TO_ADDR
// weapon := 0 ;
58714: LD_ADDR_VAR 0 8
58718: PUSH
58719: LD_INT 0
58721: ST_TO_ADDR
// if not nat then
58722: LD_VAR 0 7
58726: NOT
58727: IFFALSE 58731
// continue ;
58729: GO 58696
// for j in list [ nat ] do
58731: LD_ADDR_VAR 0 5
58735: PUSH
58736: LD_VAR 0 10
58740: PUSH
58741: LD_VAR 0 7
58745: ARRAY
58746: PUSH
58747: FOR_IN
58748: IFFALSE 58789
// if GetBWeapon ( i ) = j [ 1 ] then
58750: LD_VAR 0 4
58754: PPUSH
58755: CALL_OW 269
58759: PUSH
58760: LD_VAR 0 5
58764: PUSH
58765: LD_INT 1
58767: ARRAY
58768: EQUAL
58769: IFFALSE 58787
// begin weapon := j [ 2 ] ;
58771: LD_ADDR_VAR 0 8
58775: PUSH
58776: LD_VAR 0 5
58780: PUSH
58781: LD_INT 2
58783: ARRAY
58784: ST_TO_ADDR
// break ;
58785: GO 58789
// end ;
58787: GO 58747
58789: POP
58790: POP
// if not weapon then
58791: LD_VAR 0 8
58795: NOT
58796: IFFALSE 58800
// continue ;
58798: GO 58696
// for k in factories do
58800: LD_ADDR_VAR 0 6
58804: PUSH
58805: LD_VAR 0 2
58809: PUSH
58810: FOR_IN
58811: IFFALSE 58876
// begin weapons := AvailableWeaponList ( k ) ;
58813: LD_ADDR_VAR 0 9
58817: PUSH
58818: LD_VAR 0 6
58822: PPUSH
58823: CALL_OW 478
58827: ST_TO_ADDR
// if not weapons then
58828: LD_VAR 0 9
58832: NOT
58833: IFFALSE 58837
// continue ;
58835: GO 58810
// if weapon in weapons then
58837: LD_VAR 0 8
58841: PUSH
58842: LD_VAR 0 9
58846: IN
58847: IFFALSE 58874
// begin result := [ i , weapon ] ;
58849: LD_ADDR_VAR 0 3
58853: PUSH
58854: LD_VAR 0 4
58858: PUSH
58859: LD_VAR 0 8
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: ST_TO_ADDR
// exit ;
58868: POP
58869: POP
58870: POP
58871: POP
58872: GO 58882
// end ; end ;
58874: GO 58810
58876: POP
58877: POP
// end ;
58878: GO 58696
58880: POP
58881: POP
// end ;
58882: LD_VAR 0 3
58886: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58887: LD_INT 0
58889: PPUSH
// if not side or side > 8 then
58890: LD_VAR 0 3
58894: NOT
58895: PUSH
58896: LD_VAR 0 3
58900: PUSH
58901: LD_INT 8
58903: GREATER
58904: OR
58905: IFFALSE 58909
// exit ;
58907: GO 58968
// if not range then
58909: LD_VAR 0 4
58913: NOT
58914: IFFALSE 58925
// range := - 12 ;
58916: LD_ADDR_VAR 0 4
58920: PUSH
58921: LD_INT 12
58923: NEG
58924: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58925: LD_VAR 0 1
58929: PPUSH
58930: LD_VAR 0 2
58934: PPUSH
58935: LD_VAR 0 3
58939: PPUSH
58940: LD_VAR 0 4
58944: PPUSH
58945: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58949: LD_VAR 0 1
58953: PPUSH
58954: LD_VAR 0 2
58958: PPUSH
58959: LD_VAR 0 3
58963: PPUSH
58964: CALL_OW 331
// end ;
58968: LD_VAR 0 5
58972: RET
// export function Video ( mode ) ; begin
58973: LD_INT 0
58975: PPUSH
// ingame_video = mode ;
58976: LD_ADDR_OWVAR 52
58980: PUSH
58981: LD_VAR 0 1
58985: ST_TO_ADDR
// interface_hidden = mode ;
58986: LD_ADDR_OWVAR 54
58990: PUSH
58991: LD_VAR 0 1
58995: ST_TO_ADDR
// end ;
58996: LD_VAR 0 2
59000: RET
// export function Join ( array , element ) ; begin
59001: LD_INT 0
59003: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59004: LD_ADDR_VAR 0 3
59008: PUSH
59009: LD_VAR 0 1
59013: PPUSH
59014: LD_VAR 0 1
59018: PUSH
59019: LD_INT 1
59021: PLUS
59022: PPUSH
59023: LD_VAR 0 2
59027: PPUSH
59028: CALL_OW 1
59032: ST_TO_ADDR
// end ;
59033: LD_VAR 0 3
59037: RET
// export function JoinUnion ( array , element ) ; begin
59038: LD_INT 0
59040: PPUSH
// result := array union element ;
59041: LD_ADDR_VAR 0 3
59045: PUSH
59046: LD_VAR 0 1
59050: PUSH
59051: LD_VAR 0 2
59055: UNION
59056: ST_TO_ADDR
// end ;
59057: LD_VAR 0 3
59061: RET
// export function GetBehemoths ( side ) ; begin
59062: LD_INT 0
59064: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
59065: LD_ADDR_VAR 0 2
59069: PUSH
59070: LD_INT 22
59072: PUSH
59073: LD_VAR 0 1
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 31
59084: PUSH
59085: LD_INT 25
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PPUSH
59096: CALL_OW 69
59100: ST_TO_ADDR
// end ;
59101: LD_VAR 0 2
59105: RET
// export function Shuffle ( array ) ; var i , index ; begin
59106: LD_INT 0
59108: PPUSH
59109: PPUSH
59110: PPUSH
// result := [ ] ;
59111: LD_ADDR_VAR 0 2
59115: PUSH
59116: EMPTY
59117: ST_TO_ADDR
// if not array then
59118: LD_VAR 0 1
59122: NOT
59123: IFFALSE 59127
// exit ;
59125: GO 59226
// Randomize ;
59127: CALL_OW 10
// for i = array downto 1 do
59131: LD_ADDR_VAR 0 3
59135: PUSH
59136: DOUBLE
59137: LD_VAR 0 1
59141: INC
59142: ST_TO_ADDR
59143: LD_INT 1
59145: PUSH
59146: FOR_DOWNTO
59147: IFFALSE 59224
// begin index := rand ( 1 , array ) ;
59149: LD_ADDR_VAR 0 4
59153: PUSH
59154: LD_INT 1
59156: PPUSH
59157: LD_VAR 0 1
59161: PPUSH
59162: CALL_OW 12
59166: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59167: LD_ADDR_VAR 0 2
59171: PUSH
59172: LD_VAR 0 2
59176: PPUSH
59177: LD_VAR 0 2
59181: PUSH
59182: LD_INT 1
59184: PLUS
59185: PPUSH
59186: LD_VAR 0 1
59190: PUSH
59191: LD_VAR 0 4
59195: ARRAY
59196: PPUSH
59197: CALL_OW 2
59201: ST_TO_ADDR
// array := Delete ( array , index ) ;
59202: LD_ADDR_VAR 0 1
59206: PUSH
59207: LD_VAR 0 1
59211: PPUSH
59212: LD_VAR 0 4
59216: PPUSH
59217: CALL_OW 3
59221: ST_TO_ADDR
// end ;
59222: GO 59146
59224: POP
59225: POP
// end ;
59226: LD_VAR 0 2
59230: RET
// export function GetBaseMaterials ( base ) ; begin
59231: LD_INT 0
59233: PPUSH
// result := [ 0 , 0 , 0 ] ;
59234: LD_ADDR_VAR 0 2
59238: PUSH
59239: LD_INT 0
59241: PUSH
59242: LD_INT 0
59244: PUSH
59245: LD_INT 0
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: LIST
59252: ST_TO_ADDR
// if not base then
59253: LD_VAR 0 1
59257: NOT
59258: IFFALSE 59262
// exit ;
59260: GO 59311
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59262: LD_ADDR_VAR 0 2
59266: PUSH
59267: LD_VAR 0 1
59271: PPUSH
59272: LD_INT 1
59274: PPUSH
59275: CALL_OW 275
59279: PUSH
59280: LD_VAR 0 1
59284: PPUSH
59285: LD_INT 2
59287: PPUSH
59288: CALL_OW 275
59292: PUSH
59293: LD_VAR 0 1
59297: PPUSH
59298: LD_INT 3
59300: PPUSH
59301: CALL_OW 275
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: LIST
59310: ST_TO_ADDR
// end ;
59311: LD_VAR 0 2
59315: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59316: LD_INT 0
59318: PPUSH
59319: PPUSH
// result := array ;
59320: LD_ADDR_VAR 0 3
59324: PUSH
59325: LD_VAR 0 1
59329: ST_TO_ADDR
// if size >= result then
59330: LD_VAR 0 2
59334: PUSH
59335: LD_VAR 0 3
59339: GREATEREQUAL
59340: IFFALSE 59344
// exit ;
59342: GO 59394
// if size then
59344: LD_VAR 0 2
59348: IFFALSE 59394
// for i := array downto size do
59350: LD_ADDR_VAR 0 4
59354: PUSH
59355: DOUBLE
59356: LD_VAR 0 1
59360: INC
59361: ST_TO_ADDR
59362: LD_VAR 0 2
59366: PUSH
59367: FOR_DOWNTO
59368: IFFALSE 59392
// result := Delete ( result , result ) ;
59370: LD_ADDR_VAR 0 3
59374: PUSH
59375: LD_VAR 0 3
59379: PPUSH
59380: LD_VAR 0 3
59384: PPUSH
59385: CALL_OW 3
59389: ST_TO_ADDR
59390: GO 59367
59392: POP
59393: POP
// end ;
59394: LD_VAR 0 3
59398: RET
// export function ComExit ( unit ) ; var tmp ; begin
59399: LD_INT 0
59401: PPUSH
59402: PPUSH
// if not IsInUnit ( unit ) then
59403: LD_VAR 0 1
59407: PPUSH
59408: CALL_OW 310
59412: NOT
59413: IFFALSE 59417
// exit ;
59415: GO 59477
// tmp := IsInUnit ( unit ) ;
59417: LD_ADDR_VAR 0 3
59421: PUSH
59422: LD_VAR 0 1
59426: PPUSH
59427: CALL_OW 310
59431: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59432: LD_VAR 0 3
59436: PPUSH
59437: CALL_OW 247
59441: PUSH
59442: LD_INT 2
59444: EQUAL
59445: IFFALSE 59458
// ComExitVehicle ( unit ) else
59447: LD_VAR 0 1
59451: PPUSH
59452: CALL_OW 121
59456: GO 59467
// ComExitBuilding ( unit ) ;
59458: LD_VAR 0 1
59462: PPUSH
59463: CALL_OW 122
// result := tmp ;
59467: LD_ADDR_VAR 0 2
59471: PUSH
59472: LD_VAR 0 3
59476: ST_TO_ADDR
// end ;
59477: LD_VAR 0 2
59481: RET
// export function ComExitAll ( units ) ; var i ; begin
59482: LD_INT 0
59484: PPUSH
59485: PPUSH
// if not units then
59486: LD_VAR 0 1
59490: NOT
59491: IFFALSE 59495
// exit ;
59493: GO 59521
// for i in units do
59495: LD_ADDR_VAR 0 3
59499: PUSH
59500: LD_VAR 0 1
59504: PUSH
59505: FOR_IN
59506: IFFALSE 59519
// ComExit ( i ) ;
59508: LD_VAR 0 3
59512: PPUSH
59513: CALL 59399 0 1
59517: GO 59505
59519: POP
59520: POP
// end ;
59521: LD_VAR 0 2
59525: RET
// export function ResetHc ; begin
59526: LD_INT 0
59528: PPUSH
// InitHc ;
59529: CALL_OW 19
// hc_importance := 0 ;
59533: LD_ADDR_OWVAR 32
59537: PUSH
59538: LD_INT 0
59540: ST_TO_ADDR
// end ;
59541: LD_VAR 0 1
59545: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59546: LD_INT 0
59548: PPUSH
59549: PPUSH
59550: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59551: LD_ADDR_VAR 0 6
59555: PUSH
59556: LD_VAR 0 1
59560: PUSH
59561: LD_VAR 0 3
59565: PLUS
59566: PUSH
59567: LD_INT 2
59569: DIV
59570: ST_TO_ADDR
// if _x < 0 then
59571: LD_VAR 0 6
59575: PUSH
59576: LD_INT 0
59578: LESS
59579: IFFALSE 59596
// _x := _x * - 1 ;
59581: LD_ADDR_VAR 0 6
59585: PUSH
59586: LD_VAR 0 6
59590: PUSH
59591: LD_INT 1
59593: NEG
59594: MUL
59595: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59596: LD_ADDR_VAR 0 7
59600: PUSH
59601: LD_VAR 0 2
59605: PUSH
59606: LD_VAR 0 4
59610: PLUS
59611: PUSH
59612: LD_INT 2
59614: DIV
59615: ST_TO_ADDR
// if _y < 0 then
59616: LD_VAR 0 7
59620: PUSH
59621: LD_INT 0
59623: LESS
59624: IFFALSE 59641
// _y := _y * - 1 ;
59626: LD_ADDR_VAR 0 7
59630: PUSH
59631: LD_VAR 0 7
59635: PUSH
59636: LD_INT 1
59638: NEG
59639: MUL
59640: ST_TO_ADDR
// result := [ _x , _y ] ;
59641: LD_ADDR_VAR 0 5
59645: PUSH
59646: LD_VAR 0 6
59650: PUSH
59651: LD_VAR 0 7
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: ST_TO_ADDR
// end ;
59660: LD_VAR 0 5
59664: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59665: LD_INT 0
59667: PPUSH
59668: PPUSH
59669: PPUSH
59670: PPUSH
// task := GetTaskList ( unit ) ;
59671: LD_ADDR_VAR 0 7
59675: PUSH
59676: LD_VAR 0 1
59680: PPUSH
59681: CALL_OW 437
59685: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59686: LD_VAR 0 7
59690: NOT
59691: PUSH
59692: LD_VAR 0 1
59696: PPUSH
59697: LD_VAR 0 2
59701: PPUSH
59702: CALL_OW 308
59706: NOT
59707: AND
59708: IFFALSE 59712
// exit ;
59710: GO 59830
// if IsInArea ( unit , area ) then
59712: LD_VAR 0 1
59716: PPUSH
59717: LD_VAR 0 2
59721: PPUSH
59722: CALL_OW 308
59726: IFFALSE 59744
// begin ComMoveToArea ( unit , goAway ) ;
59728: LD_VAR 0 1
59732: PPUSH
59733: LD_VAR 0 3
59737: PPUSH
59738: CALL_OW 113
// exit ;
59742: GO 59830
// end ; if task [ 1 ] [ 1 ] <> M then
59744: LD_VAR 0 7
59748: PUSH
59749: LD_INT 1
59751: ARRAY
59752: PUSH
59753: LD_INT 1
59755: ARRAY
59756: PUSH
59757: LD_STRING M
59759: NONEQUAL
59760: IFFALSE 59764
// exit ;
59762: GO 59830
// x := task [ 1 ] [ 2 ] ;
59764: LD_ADDR_VAR 0 5
59768: PUSH
59769: LD_VAR 0 7
59773: PUSH
59774: LD_INT 1
59776: ARRAY
59777: PUSH
59778: LD_INT 2
59780: ARRAY
59781: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59782: LD_ADDR_VAR 0 6
59786: PUSH
59787: LD_VAR 0 7
59791: PUSH
59792: LD_INT 1
59794: ARRAY
59795: PUSH
59796: LD_INT 3
59798: ARRAY
59799: ST_TO_ADDR
// if InArea ( x , y , area ) then
59800: LD_VAR 0 5
59804: PPUSH
59805: LD_VAR 0 6
59809: PPUSH
59810: LD_VAR 0 2
59814: PPUSH
59815: CALL_OW 309
59819: IFFALSE 59830
// ComStop ( unit ) ;
59821: LD_VAR 0 1
59825: PPUSH
59826: CALL_OW 141
// end ;
59830: LD_VAR 0 4
59834: RET
// export function Abs ( value ) ; begin
59835: LD_INT 0
59837: PPUSH
// result := value ;
59838: LD_ADDR_VAR 0 2
59842: PUSH
59843: LD_VAR 0 1
59847: ST_TO_ADDR
// if value < 0 then
59848: LD_VAR 0 1
59852: PUSH
59853: LD_INT 0
59855: LESS
59856: IFFALSE 59873
// result := value * - 1 ;
59858: LD_ADDR_VAR 0 2
59862: PUSH
59863: LD_VAR 0 1
59867: PUSH
59868: LD_INT 1
59870: NEG
59871: MUL
59872: ST_TO_ADDR
// end ;
59873: LD_VAR 0 2
59877: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59878: LD_INT 0
59880: PPUSH
59881: PPUSH
59882: PPUSH
59883: PPUSH
59884: PPUSH
59885: PPUSH
59886: PPUSH
59887: PPUSH
// if not unit or not building then
59888: LD_VAR 0 1
59892: NOT
59893: PUSH
59894: LD_VAR 0 2
59898: NOT
59899: OR
59900: IFFALSE 59904
// exit ;
59902: GO 60130
// x := GetX ( building ) ;
59904: LD_ADDR_VAR 0 4
59908: PUSH
59909: LD_VAR 0 2
59913: PPUSH
59914: CALL_OW 250
59918: ST_TO_ADDR
// y := GetY ( building ) ;
59919: LD_ADDR_VAR 0 6
59923: PUSH
59924: LD_VAR 0 2
59928: PPUSH
59929: CALL_OW 251
59933: ST_TO_ADDR
// d := GetDir ( building ) ;
59934: LD_ADDR_VAR 0 8
59938: PUSH
59939: LD_VAR 0 2
59943: PPUSH
59944: CALL_OW 254
59948: ST_TO_ADDR
// r := 4 ;
59949: LD_ADDR_VAR 0 9
59953: PUSH
59954: LD_INT 4
59956: ST_TO_ADDR
// for i := 1 to 5 do
59957: LD_ADDR_VAR 0 10
59961: PUSH
59962: DOUBLE
59963: LD_INT 1
59965: DEC
59966: ST_TO_ADDR
59967: LD_INT 5
59969: PUSH
59970: FOR_TO
59971: IFFALSE 60128
// begin _x := ShiftX ( x , d , r + i ) ;
59973: LD_ADDR_VAR 0 5
59977: PUSH
59978: LD_VAR 0 4
59982: PPUSH
59983: LD_VAR 0 8
59987: PPUSH
59988: LD_VAR 0 9
59992: PUSH
59993: LD_VAR 0 10
59997: PLUS
59998: PPUSH
59999: CALL_OW 272
60003: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60004: LD_ADDR_VAR 0 7
60008: PUSH
60009: LD_VAR 0 6
60013: PPUSH
60014: LD_VAR 0 8
60018: PPUSH
60019: LD_VAR 0 9
60023: PUSH
60024: LD_VAR 0 10
60028: PLUS
60029: PPUSH
60030: CALL_OW 273
60034: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60035: LD_VAR 0 5
60039: PPUSH
60040: LD_VAR 0 7
60044: PPUSH
60045: CALL_OW 488
60049: PUSH
60050: LD_VAR 0 5
60054: PPUSH
60055: LD_VAR 0 7
60059: PPUSH
60060: CALL_OW 428
60064: PPUSH
60065: CALL_OW 247
60069: PUSH
60070: LD_INT 3
60072: PUSH
60073: LD_INT 2
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: IN
60080: NOT
60081: AND
60082: IFFALSE 60126
// begin ComMoveXY ( unit , _x , _y ) ;
60084: LD_VAR 0 1
60088: PPUSH
60089: LD_VAR 0 5
60093: PPUSH
60094: LD_VAR 0 7
60098: PPUSH
60099: CALL_OW 111
// result := [ _x , _y ] ;
60103: LD_ADDR_VAR 0 3
60107: PUSH
60108: LD_VAR 0 5
60112: PUSH
60113: LD_VAR 0 7
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: ST_TO_ADDR
// exit ;
60122: POP
60123: POP
60124: GO 60130
// end ; end ;
60126: GO 59970
60128: POP
60129: POP
// end ;
60130: LD_VAR 0 3
60134: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60135: LD_INT 0
60137: PPUSH
60138: PPUSH
60139: PPUSH
// result := 0 ;
60140: LD_ADDR_VAR 0 3
60144: PUSH
60145: LD_INT 0
60147: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60148: LD_VAR 0 1
60152: PUSH
60153: LD_INT 0
60155: LESS
60156: PUSH
60157: LD_VAR 0 1
60161: PUSH
60162: LD_INT 8
60164: GREATER
60165: OR
60166: PUSH
60167: LD_VAR 0 2
60171: PUSH
60172: LD_INT 0
60174: LESS
60175: OR
60176: PUSH
60177: LD_VAR 0 2
60181: PUSH
60182: LD_INT 8
60184: GREATER
60185: OR
60186: IFFALSE 60190
// exit ;
60188: GO 60265
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60190: LD_ADDR_VAR 0 4
60194: PUSH
60195: LD_INT 22
60197: PUSH
60198: LD_VAR 0 2
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PPUSH
60207: CALL_OW 69
60211: PUSH
60212: FOR_IN
60213: IFFALSE 60263
// begin un := UnitShoot ( i ) ;
60215: LD_ADDR_VAR 0 5
60219: PUSH
60220: LD_VAR 0 4
60224: PPUSH
60225: CALL_OW 504
60229: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60230: LD_VAR 0 5
60234: PPUSH
60235: CALL_OW 255
60239: PUSH
60240: LD_VAR 0 1
60244: EQUAL
60245: IFFALSE 60261
// begin result := un ;
60247: LD_ADDR_VAR 0 3
60251: PUSH
60252: LD_VAR 0 5
60256: ST_TO_ADDR
// exit ;
60257: POP
60258: POP
60259: GO 60265
// end ; end ;
60261: GO 60212
60263: POP
60264: POP
// end ;
60265: LD_VAR 0 3
60269: RET
// export function GetCargoBay ( units ) ; begin
60270: LD_INT 0
60272: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60273: LD_ADDR_VAR 0 2
60277: PUSH
60278: LD_VAR 0 1
60282: PPUSH
60283: LD_INT 2
60285: PUSH
60286: LD_INT 34
60288: PUSH
60289: LD_INT 12
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 34
60298: PUSH
60299: LD_INT 51
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 34
60308: PUSH
60309: LD_INT 32
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 34
60318: PUSH
60319: LD_INT 89
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: PPUSH
60333: CALL_OW 72
60337: ST_TO_ADDR
// end ;
60338: LD_VAR 0 2
60342: RET
// export function Negate ( value ) ; begin
60343: LD_INT 0
60345: PPUSH
// result := not value ;
60346: LD_ADDR_VAR 0 2
60350: PUSH
60351: LD_VAR 0 1
60355: NOT
60356: ST_TO_ADDR
// end ;
60357: LD_VAR 0 2
60361: RET
// export function Inc ( value ) ; begin
60362: LD_INT 0
60364: PPUSH
// result := value + 1 ;
60365: LD_ADDR_VAR 0 2
60369: PUSH
60370: LD_VAR 0 1
60374: PUSH
60375: LD_INT 1
60377: PLUS
60378: ST_TO_ADDR
// end ;
60379: LD_VAR 0 2
60383: RET
// export function Dec ( value ) ; begin
60384: LD_INT 0
60386: PPUSH
// result := value - 1 ;
60387: LD_ADDR_VAR 0 2
60391: PUSH
60392: LD_VAR 0 1
60396: PUSH
60397: LD_INT 1
60399: MINUS
60400: ST_TO_ADDR
// end ;
60401: LD_VAR 0 2
60405: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60406: LD_INT 0
60408: PPUSH
60409: PPUSH
60410: PPUSH
60411: PPUSH
60412: PPUSH
60413: PPUSH
60414: PPUSH
60415: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60416: LD_VAR 0 1
60420: PPUSH
60421: LD_VAR 0 2
60425: PPUSH
60426: CALL_OW 488
60430: NOT
60431: PUSH
60432: LD_VAR 0 3
60436: PPUSH
60437: LD_VAR 0 4
60441: PPUSH
60442: CALL_OW 488
60446: NOT
60447: OR
60448: IFFALSE 60461
// begin result := - 1 ;
60450: LD_ADDR_VAR 0 5
60454: PUSH
60455: LD_INT 1
60457: NEG
60458: ST_TO_ADDR
// exit ;
60459: GO 60696
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60461: LD_ADDR_VAR 0 12
60465: PUSH
60466: LD_VAR 0 1
60470: PPUSH
60471: LD_VAR 0 2
60475: PPUSH
60476: LD_VAR 0 3
60480: PPUSH
60481: LD_VAR 0 4
60485: PPUSH
60486: CALL 59546 0 4
60490: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60491: LD_ADDR_VAR 0 11
60495: PUSH
60496: LD_VAR 0 1
60500: PPUSH
60501: LD_VAR 0 2
60505: PPUSH
60506: LD_VAR 0 12
60510: PUSH
60511: LD_INT 1
60513: ARRAY
60514: PPUSH
60515: LD_VAR 0 12
60519: PUSH
60520: LD_INT 2
60522: ARRAY
60523: PPUSH
60524: CALL_OW 298
60528: ST_TO_ADDR
// distance := 9999 ;
60529: LD_ADDR_VAR 0 10
60533: PUSH
60534: LD_INT 9999
60536: ST_TO_ADDR
// for i := 0 to 5 do
60537: LD_ADDR_VAR 0 6
60541: PUSH
60542: DOUBLE
60543: LD_INT 0
60545: DEC
60546: ST_TO_ADDR
60547: LD_INT 5
60549: PUSH
60550: FOR_TO
60551: IFFALSE 60694
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60553: LD_ADDR_VAR 0 7
60557: PUSH
60558: LD_VAR 0 1
60562: PPUSH
60563: LD_VAR 0 6
60567: PPUSH
60568: LD_VAR 0 11
60572: PPUSH
60573: CALL_OW 272
60577: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60578: LD_ADDR_VAR 0 8
60582: PUSH
60583: LD_VAR 0 2
60587: PPUSH
60588: LD_VAR 0 6
60592: PPUSH
60593: LD_VAR 0 11
60597: PPUSH
60598: CALL_OW 273
60602: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60603: LD_VAR 0 7
60607: PPUSH
60608: LD_VAR 0 8
60612: PPUSH
60613: CALL_OW 488
60617: NOT
60618: IFFALSE 60622
// continue ;
60620: GO 60550
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60622: LD_ADDR_VAR 0 9
60626: PUSH
60627: LD_VAR 0 12
60631: PUSH
60632: LD_INT 1
60634: ARRAY
60635: PPUSH
60636: LD_VAR 0 12
60640: PUSH
60641: LD_INT 2
60643: ARRAY
60644: PPUSH
60645: LD_VAR 0 7
60649: PPUSH
60650: LD_VAR 0 8
60654: PPUSH
60655: CALL_OW 298
60659: ST_TO_ADDR
// if tmp < distance then
60660: LD_VAR 0 9
60664: PUSH
60665: LD_VAR 0 10
60669: LESS
60670: IFFALSE 60692
// begin result := i ;
60672: LD_ADDR_VAR 0 5
60676: PUSH
60677: LD_VAR 0 6
60681: ST_TO_ADDR
// distance := tmp ;
60682: LD_ADDR_VAR 0 10
60686: PUSH
60687: LD_VAR 0 9
60691: ST_TO_ADDR
// end ; end ;
60692: GO 60550
60694: POP
60695: POP
// end ;
60696: LD_VAR 0 5
60700: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60701: LD_INT 0
60703: PPUSH
60704: PPUSH
// if not driver or not IsInUnit ( driver ) then
60705: LD_VAR 0 1
60709: NOT
60710: PUSH
60711: LD_VAR 0 1
60715: PPUSH
60716: CALL_OW 310
60720: NOT
60721: OR
60722: IFFALSE 60726
// exit ;
60724: GO 60816
// vehicle := IsInUnit ( driver ) ;
60726: LD_ADDR_VAR 0 3
60730: PUSH
60731: LD_VAR 0 1
60735: PPUSH
60736: CALL_OW 310
60740: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60741: LD_VAR 0 1
60745: PPUSH
60746: LD_STRING \
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: LD_INT 0
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: LD_INT 0
60760: PUSH
60761: LD_INT 0
60763: PUSH
60764: LD_INT 0
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: PUSH
60776: LD_STRING E
60778: PUSH
60779: LD_INT 0
60781: PUSH
60782: LD_INT 0
60784: PUSH
60785: LD_VAR 0 3
60789: PUSH
60790: LD_INT 0
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: LD_INT 0
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PPUSH
60812: CALL_OW 446
// end ;
60816: LD_VAR 0 2
60820: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60821: LD_INT 0
60823: PPUSH
60824: PPUSH
// if not driver or not IsInUnit ( driver ) then
60825: LD_VAR 0 1
60829: NOT
60830: PUSH
60831: LD_VAR 0 1
60835: PPUSH
60836: CALL_OW 310
60840: NOT
60841: OR
60842: IFFALSE 60846
// exit ;
60844: GO 60936
// vehicle := IsInUnit ( driver ) ;
60846: LD_ADDR_VAR 0 3
60850: PUSH
60851: LD_VAR 0 1
60855: PPUSH
60856: CALL_OW 310
60860: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60861: LD_VAR 0 1
60865: PPUSH
60866: LD_STRING \
60868: PUSH
60869: LD_INT 0
60871: PUSH
60872: LD_INT 0
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: LD_INT 0
60880: PUSH
60881: LD_INT 0
60883: PUSH
60884: LD_INT 0
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: PUSH
60896: LD_STRING E
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: LD_INT 0
60904: PUSH
60905: LD_VAR 0 3
60909: PUSH
60910: LD_INT 0
60912: PUSH
60913: LD_INT 0
60915: PUSH
60916: LD_INT 0
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PPUSH
60932: CALL_OW 447
// end ;
60936: LD_VAR 0 2
60940: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60941: LD_INT 0
60943: PPUSH
60944: PPUSH
60945: PPUSH
// tmp := [ ] ;
60946: LD_ADDR_VAR 0 5
60950: PUSH
60951: EMPTY
60952: ST_TO_ADDR
// for i in units do
60953: LD_ADDR_VAR 0 4
60957: PUSH
60958: LD_VAR 0 1
60962: PUSH
60963: FOR_IN
60964: IFFALSE 61002
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60966: LD_ADDR_VAR 0 5
60970: PUSH
60971: LD_VAR 0 5
60975: PPUSH
60976: LD_VAR 0 5
60980: PUSH
60981: LD_INT 1
60983: PLUS
60984: PPUSH
60985: LD_VAR 0 4
60989: PPUSH
60990: CALL_OW 256
60994: PPUSH
60995: CALL_OW 2
60999: ST_TO_ADDR
61000: GO 60963
61002: POP
61003: POP
// if not tmp then
61004: LD_VAR 0 5
61008: NOT
61009: IFFALSE 61013
// exit ;
61011: GO 61061
// if asc then
61013: LD_VAR 0 2
61017: IFFALSE 61041
// result := SortListByListAsc ( units , tmp ) else
61019: LD_ADDR_VAR 0 3
61023: PUSH
61024: LD_VAR 0 1
61028: PPUSH
61029: LD_VAR 0 5
61033: PPUSH
61034: CALL_OW 76
61038: ST_TO_ADDR
61039: GO 61061
// result := SortListByListDesc ( units , tmp ) ;
61041: LD_ADDR_VAR 0 3
61045: PUSH
61046: LD_VAR 0 1
61050: PPUSH
61051: LD_VAR 0 5
61055: PPUSH
61056: CALL_OW 77
61060: ST_TO_ADDR
// end ;
61061: LD_VAR 0 3
61065: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61066: LD_INT 0
61068: PPUSH
61069: PPUSH
// task := GetTaskList ( mech ) ;
61070: LD_ADDR_VAR 0 4
61074: PUSH
61075: LD_VAR 0 1
61079: PPUSH
61080: CALL_OW 437
61084: ST_TO_ADDR
// if not task then
61085: LD_VAR 0 4
61089: NOT
61090: IFFALSE 61094
// exit ;
61092: GO 61136
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61094: LD_ADDR_VAR 0 3
61098: PUSH
61099: LD_VAR 0 4
61103: PUSH
61104: LD_INT 1
61106: ARRAY
61107: PUSH
61108: LD_INT 1
61110: ARRAY
61111: PUSH
61112: LD_STRING r
61114: EQUAL
61115: PUSH
61116: LD_VAR 0 4
61120: PUSH
61121: LD_INT 1
61123: ARRAY
61124: PUSH
61125: LD_INT 4
61127: ARRAY
61128: PUSH
61129: LD_VAR 0 2
61133: EQUAL
61134: AND
61135: ST_TO_ADDR
// end ;
61136: LD_VAR 0 3
61140: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61141: LD_INT 0
61143: PPUSH
// SetDir ( unit , d ) ;
61144: LD_VAR 0 1
61148: PPUSH
61149: LD_VAR 0 4
61153: PPUSH
61154: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
61158: LD_VAR 0 1
61162: PPUSH
61163: LD_VAR 0 2
61167: PPUSH
61168: LD_VAR 0 3
61172: PPUSH
61173: LD_VAR 0 5
61177: PPUSH
61178: CALL_OW 48
// end ;
61182: LD_VAR 0 6
61186: RET
// export function ToNaturalNumber ( number ) ; begin
61187: LD_INT 0
61189: PPUSH
// result := number div 1 ;
61190: LD_ADDR_VAR 0 2
61194: PUSH
61195: LD_VAR 0 1
61199: PUSH
61200: LD_INT 1
61202: DIV
61203: ST_TO_ADDR
// if number < 0 then
61204: LD_VAR 0 1
61208: PUSH
61209: LD_INT 0
61211: LESS
61212: IFFALSE 61222
// result := 0 ;
61214: LD_ADDR_VAR 0 2
61218: PUSH
61219: LD_INT 0
61221: ST_TO_ADDR
// end ;
61222: LD_VAR 0 2
61226: RET
// export function SortByClass ( units , class ) ; var un ; begin
61227: LD_INT 0
61229: PPUSH
61230: PPUSH
// if not units or not class then
61231: LD_VAR 0 1
61235: NOT
61236: PUSH
61237: LD_VAR 0 2
61241: NOT
61242: OR
61243: IFFALSE 61247
// exit ;
61245: GO 61342
// result := [ ] ;
61247: LD_ADDR_VAR 0 3
61251: PUSH
61252: EMPTY
61253: ST_TO_ADDR
// for un in units do
61254: LD_ADDR_VAR 0 4
61258: PUSH
61259: LD_VAR 0 1
61263: PUSH
61264: FOR_IN
61265: IFFALSE 61340
// if GetClass ( un ) = class then
61267: LD_VAR 0 4
61271: PPUSH
61272: CALL_OW 257
61276: PUSH
61277: LD_VAR 0 2
61281: EQUAL
61282: IFFALSE 61309
// result := Insert ( result , 1 , un ) else
61284: LD_ADDR_VAR 0 3
61288: PUSH
61289: LD_VAR 0 3
61293: PPUSH
61294: LD_INT 1
61296: PPUSH
61297: LD_VAR 0 4
61301: PPUSH
61302: CALL_OW 2
61306: ST_TO_ADDR
61307: GO 61338
// result := Replace ( result , result + 1 , un ) ;
61309: LD_ADDR_VAR 0 3
61313: PUSH
61314: LD_VAR 0 3
61318: PPUSH
61319: LD_VAR 0 3
61323: PUSH
61324: LD_INT 1
61326: PLUS
61327: PPUSH
61328: LD_VAR 0 4
61332: PPUSH
61333: CALL_OW 1
61337: ST_TO_ADDR
61338: GO 61264
61340: POP
61341: POP
// end ;
61342: LD_VAR 0 3
61346: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61347: LD_INT 0
61349: PPUSH
61350: PPUSH
61351: PPUSH
61352: PPUSH
61353: PPUSH
61354: PPUSH
61355: PPUSH
// result := [ ] ;
61356: LD_ADDR_VAR 0 4
61360: PUSH
61361: EMPTY
61362: ST_TO_ADDR
// if x - r < 0 then
61363: LD_VAR 0 1
61367: PUSH
61368: LD_VAR 0 3
61372: MINUS
61373: PUSH
61374: LD_INT 0
61376: LESS
61377: IFFALSE 61389
// min_x := 0 else
61379: LD_ADDR_VAR 0 8
61383: PUSH
61384: LD_INT 0
61386: ST_TO_ADDR
61387: GO 61405
// min_x := x - r ;
61389: LD_ADDR_VAR 0 8
61393: PUSH
61394: LD_VAR 0 1
61398: PUSH
61399: LD_VAR 0 3
61403: MINUS
61404: ST_TO_ADDR
// if y - r < 0 then
61405: LD_VAR 0 2
61409: PUSH
61410: LD_VAR 0 3
61414: MINUS
61415: PUSH
61416: LD_INT 0
61418: LESS
61419: IFFALSE 61431
// min_y := 0 else
61421: LD_ADDR_VAR 0 7
61425: PUSH
61426: LD_INT 0
61428: ST_TO_ADDR
61429: GO 61447
// min_y := y - r ;
61431: LD_ADDR_VAR 0 7
61435: PUSH
61436: LD_VAR 0 2
61440: PUSH
61441: LD_VAR 0 3
61445: MINUS
61446: ST_TO_ADDR
// max_x := x + r ;
61447: LD_ADDR_VAR 0 9
61451: PUSH
61452: LD_VAR 0 1
61456: PUSH
61457: LD_VAR 0 3
61461: PLUS
61462: ST_TO_ADDR
// max_y := y + r ;
61463: LD_ADDR_VAR 0 10
61467: PUSH
61468: LD_VAR 0 2
61472: PUSH
61473: LD_VAR 0 3
61477: PLUS
61478: ST_TO_ADDR
// for _x = min_x to max_x do
61479: LD_ADDR_VAR 0 5
61483: PUSH
61484: DOUBLE
61485: LD_VAR 0 8
61489: DEC
61490: ST_TO_ADDR
61491: LD_VAR 0 9
61495: PUSH
61496: FOR_TO
61497: IFFALSE 61598
// for _y = min_y to max_y do
61499: LD_ADDR_VAR 0 6
61503: PUSH
61504: DOUBLE
61505: LD_VAR 0 7
61509: DEC
61510: ST_TO_ADDR
61511: LD_VAR 0 10
61515: PUSH
61516: FOR_TO
61517: IFFALSE 61594
// begin if not ValidHex ( _x , _y ) then
61519: LD_VAR 0 5
61523: PPUSH
61524: LD_VAR 0 6
61528: PPUSH
61529: CALL_OW 488
61533: NOT
61534: IFFALSE 61538
// continue ;
61536: GO 61516
// if GetResourceTypeXY ( _x , _y ) then
61538: LD_VAR 0 5
61542: PPUSH
61543: LD_VAR 0 6
61547: PPUSH
61548: CALL_OW 283
61552: IFFALSE 61592
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61554: LD_ADDR_VAR 0 4
61558: PUSH
61559: LD_VAR 0 4
61563: PPUSH
61564: LD_VAR 0 4
61568: PUSH
61569: LD_INT 1
61571: PLUS
61572: PPUSH
61573: LD_VAR 0 5
61577: PUSH
61578: LD_VAR 0 6
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PPUSH
61587: CALL_OW 1
61591: ST_TO_ADDR
// end ;
61592: GO 61516
61594: POP
61595: POP
61596: GO 61496
61598: POP
61599: POP
// end ;
61600: LD_VAR 0 4
61604: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61605: LD_INT 0
61607: PPUSH
61608: PPUSH
61609: PPUSH
61610: PPUSH
61611: PPUSH
61612: PPUSH
61613: PPUSH
61614: PPUSH
// if not units then
61615: LD_VAR 0 1
61619: NOT
61620: IFFALSE 61624
// exit ;
61622: GO 62148
// result := UnitFilter ( units , [ f_ok ] ) ;
61624: LD_ADDR_VAR 0 3
61628: PUSH
61629: LD_VAR 0 1
61633: PPUSH
61634: LD_INT 50
61636: PUSH
61637: EMPTY
61638: LIST
61639: PPUSH
61640: CALL_OW 72
61644: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61645: LD_ADDR_VAR 0 8
61649: PUSH
61650: LD_VAR 0 1
61654: PUSH
61655: LD_INT 1
61657: ARRAY
61658: PPUSH
61659: CALL_OW 255
61663: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
61664: LD_ADDR_VAR 0 10
61668: PUSH
61669: LD_INT 29
61671: PUSH
61672: LD_INT 91
61674: PUSH
61675: LD_INT 49
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: LIST
61682: ST_TO_ADDR
// if not result then
61683: LD_VAR 0 3
61687: NOT
61688: IFFALSE 61692
// exit ;
61690: GO 62148
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61692: LD_ADDR_VAR 0 5
61696: PUSH
61697: LD_INT 81
61699: PUSH
61700: LD_VAR 0 8
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PPUSH
61709: CALL_OW 69
61713: ST_TO_ADDR
// for i in result do
61714: LD_ADDR_VAR 0 4
61718: PUSH
61719: LD_VAR 0 3
61723: PUSH
61724: FOR_IN
61725: IFFALSE 62146
// begin tag := GetTag ( i ) + 1 ;
61727: LD_ADDR_VAR 0 9
61731: PUSH
61732: LD_VAR 0 4
61736: PPUSH
61737: CALL_OW 110
61741: PUSH
61742: LD_INT 1
61744: PLUS
61745: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
61746: LD_ADDR_VAR 0 7
61750: PUSH
61751: LD_VAR 0 4
61755: PPUSH
61756: CALL_OW 250
61760: PPUSH
61761: LD_VAR 0 4
61765: PPUSH
61766: CALL_OW 251
61770: PPUSH
61771: LD_INT 6
61773: PPUSH
61774: CALL 61347 0 3
61778: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
61779: LD_VAR 0 4
61783: PPUSH
61784: CALL_OW 247
61788: PUSH
61789: LD_INT 2
61791: EQUAL
61792: PUSH
61793: LD_VAR 0 7
61797: AND
61798: PUSH
61799: LD_VAR 0 4
61803: PPUSH
61804: CALL_OW 264
61808: PUSH
61809: LD_VAR 0 10
61813: IN
61814: NOT
61815: AND
61816: IFFALSE 61855
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61818: LD_VAR 0 4
61822: PPUSH
61823: LD_VAR 0 7
61827: PUSH
61828: LD_INT 1
61830: ARRAY
61831: PUSH
61832: LD_INT 1
61834: ARRAY
61835: PPUSH
61836: LD_VAR 0 7
61840: PUSH
61841: LD_INT 1
61843: ARRAY
61844: PUSH
61845: LD_INT 2
61847: ARRAY
61848: PPUSH
61849: CALL_OW 116
61853: GO 62144
// if path > tag then
61855: LD_VAR 0 2
61859: PUSH
61860: LD_VAR 0 9
61864: GREATER
61865: IFFALSE 62073
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
61867: LD_ADDR_VAR 0 6
61871: PUSH
61872: LD_VAR 0 5
61876: PPUSH
61877: LD_INT 91
61879: PUSH
61880: LD_VAR 0 4
61884: PUSH
61885: LD_INT 8
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: LIST
61892: PPUSH
61893: CALL_OW 72
61897: ST_TO_ADDR
// if nearEnemy then
61898: LD_VAR 0 6
61902: IFFALSE 61971
// begin if GetWeapon ( i ) = ru_time_lapser then
61904: LD_VAR 0 4
61908: PPUSH
61909: CALL_OW 264
61913: PUSH
61914: LD_INT 49
61916: EQUAL
61917: IFFALSE 61945
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
61919: LD_VAR 0 4
61923: PPUSH
61924: LD_VAR 0 6
61928: PPUSH
61929: LD_VAR 0 4
61933: PPUSH
61934: CALL_OW 74
61938: PPUSH
61939: CALL_OW 112
61943: GO 61969
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
61945: LD_VAR 0 4
61949: PPUSH
61950: LD_VAR 0 6
61954: PPUSH
61955: LD_VAR 0 4
61959: PPUSH
61960: CALL_OW 74
61964: PPUSH
61965: CALL 63073 0 2
// end else
61969: GO 62071
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
61971: LD_VAR 0 4
61975: PPUSH
61976: LD_VAR 0 2
61980: PUSH
61981: LD_VAR 0 9
61985: ARRAY
61986: PUSH
61987: LD_INT 1
61989: ARRAY
61990: PPUSH
61991: LD_VAR 0 2
61995: PUSH
61996: LD_VAR 0 9
62000: ARRAY
62001: PUSH
62002: LD_INT 2
62004: ARRAY
62005: PPUSH
62006: CALL_OW 297
62010: PUSH
62011: LD_INT 6
62013: GREATER
62014: IFFALSE 62057
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62016: LD_VAR 0 4
62020: PPUSH
62021: LD_VAR 0 2
62025: PUSH
62026: LD_VAR 0 9
62030: ARRAY
62031: PUSH
62032: LD_INT 1
62034: ARRAY
62035: PPUSH
62036: LD_VAR 0 2
62040: PUSH
62041: LD_VAR 0 9
62045: ARRAY
62046: PUSH
62047: LD_INT 2
62049: ARRAY
62050: PPUSH
62051: CALL_OW 114
62055: GO 62071
// SetTag ( i , tag ) ;
62057: LD_VAR 0 4
62061: PPUSH
62062: LD_VAR 0 9
62066: PPUSH
62067: CALL_OW 109
// end else
62071: GO 62144
// if enemy then
62073: LD_VAR 0 5
62077: IFFALSE 62144
// begin if GetWeapon ( i ) = ru_time_lapser then
62079: LD_VAR 0 4
62083: PPUSH
62084: CALL_OW 264
62088: PUSH
62089: LD_INT 49
62091: EQUAL
62092: IFFALSE 62120
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
62094: LD_VAR 0 4
62098: PPUSH
62099: LD_VAR 0 5
62103: PPUSH
62104: LD_VAR 0 4
62108: PPUSH
62109: CALL_OW 74
62113: PPUSH
62114: CALL_OW 112
62118: GO 62144
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62120: LD_VAR 0 4
62124: PPUSH
62125: LD_VAR 0 5
62129: PPUSH
62130: LD_VAR 0 4
62134: PPUSH
62135: CALL_OW 74
62139: PPUSH
62140: CALL 63073 0 2
// end ; end ;
62144: GO 61724
62146: POP
62147: POP
// end ;
62148: LD_VAR 0 3
62152: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62153: LD_INT 0
62155: PPUSH
62156: PPUSH
62157: PPUSH
// if not unit or IsInUnit ( unit ) then
62158: LD_VAR 0 1
62162: NOT
62163: PUSH
62164: LD_VAR 0 1
62168: PPUSH
62169: CALL_OW 310
62173: OR
62174: IFFALSE 62178
// exit ;
62176: GO 62269
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
62178: LD_ADDR_VAR 0 4
62182: PUSH
62183: LD_VAR 0 1
62187: PPUSH
62188: CALL_OW 250
62192: PPUSH
62193: LD_VAR 0 2
62197: PPUSH
62198: LD_INT 1
62200: PPUSH
62201: CALL_OW 272
62205: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
62206: LD_ADDR_VAR 0 5
62210: PUSH
62211: LD_VAR 0 1
62215: PPUSH
62216: CALL_OW 251
62220: PPUSH
62221: LD_VAR 0 2
62225: PPUSH
62226: LD_INT 1
62228: PPUSH
62229: CALL_OW 273
62233: ST_TO_ADDR
// if ValidHex ( x , y ) then
62234: LD_VAR 0 4
62238: PPUSH
62239: LD_VAR 0 5
62243: PPUSH
62244: CALL_OW 488
62248: IFFALSE 62269
// ComTurnXY ( unit , x , y ) ;
62250: LD_VAR 0 1
62254: PPUSH
62255: LD_VAR 0 4
62259: PPUSH
62260: LD_VAR 0 5
62264: PPUSH
62265: CALL_OW 118
// end ;
62269: LD_VAR 0 3
62273: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62274: LD_INT 0
62276: PPUSH
62277: PPUSH
// result := false ;
62278: LD_ADDR_VAR 0 3
62282: PUSH
62283: LD_INT 0
62285: ST_TO_ADDR
// if not units then
62286: LD_VAR 0 2
62290: NOT
62291: IFFALSE 62295
// exit ;
62293: GO 62340
// for i in units do
62295: LD_ADDR_VAR 0 4
62299: PUSH
62300: LD_VAR 0 2
62304: PUSH
62305: FOR_IN
62306: IFFALSE 62338
// if See ( side , i ) then
62308: LD_VAR 0 1
62312: PPUSH
62313: LD_VAR 0 4
62317: PPUSH
62318: CALL_OW 292
62322: IFFALSE 62336
// begin result := true ;
62324: LD_ADDR_VAR 0 3
62328: PUSH
62329: LD_INT 1
62331: ST_TO_ADDR
// exit ;
62332: POP
62333: POP
62334: GO 62340
// end ;
62336: GO 62305
62338: POP
62339: POP
// end ;
62340: LD_VAR 0 3
62344: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62345: LD_INT 0
62347: PPUSH
62348: PPUSH
62349: PPUSH
62350: PPUSH
// if not unit or not points then
62351: LD_VAR 0 1
62355: NOT
62356: PUSH
62357: LD_VAR 0 2
62361: NOT
62362: OR
62363: IFFALSE 62367
// exit ;
62365: GO 62457
// dist := 99999 ;
62367: LD_ADDR_VAR 0 5
62371: PUSH
62372: LD_INT 99999
62374: ST_TO_ADDR
// for i in points do
62375: LD_ADDR_VAR 0 4
62379: PUSH
62380: LD_VAR 0 2
62384: PUSH
62385: FOR_IN
62386: IFFALSE 62455
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62388: LD_ADDR_VAR 0 6
62392: PUSH
62393: LD_VAR 0 1
62397: PPUSH
62398: LD_VAR 0 4
62402: PUSH
62403: LD_INT 1
62405: ARRAY
62406: PPUSH
62407: LD_VAR 0 4
62411: PUSH
62412: LD_INT 2
62414: ARRAY
62415: PPUSH
62416: CALL_OW 297
62420: ST_TO_ADDR
// if tmpDist < dist then
62421: LD_VAR 0 6
62425: PUSH
62426: LD_VAR 0 5
62430: LESS
62431: IFFALSE 62453
// begin result := i ;
62433: LD_ADDR_VAR 0 3
62437: PUSH
62438: LD_VAR 0 4
62442: ST_TO_ADDR
// dist := tmpDist ;
62443: LD_ADDR_VAR 0 5
62447: PUSH
62448: LD_VAR 0 6
62452: ST_TO_ADDR
// end ; end ;
62453: GO 62385
62455: POP
62456: POP
// end ;
62457: LD_VAR 0 3
62461: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
62462: LD_INT 0
62464: PPUSH
// uc_side := side ;
62465: LD_ADDR_OWVAR 20
62469: PUSH
62470: LD_VAR 0 1
62474: ST_TO_ADDR
// uc_nation := 3 ;
62475: LD_ADDR_OWVAR 21
62479: PUSH
62480: LD_INT 3
62482: ST_TO_ADDR
// vc_chassis := 25 ;
62483: LD_ADDR_OWVAR 37
62487: PUSH
62488: LD_INT 25
62490: ST_TO_ADDR
// vc_engine := engine_siberite ;
62491: LD_ADDR_OWVAR 39
62495: PUSH
62496: LD_INT 3
62498: ST_TO_ADDR
// vc_control := control_computer ;
62499: LD_ADDR_OWVAR 38
62503: PUSH
62504: LD_INT 3
62506: ST_TO_ADDR
// vc_weapon := 59 ;
62507: LD_ADDR_OWVAR 40
62511: PUSH
62512: LD_INT 59
62514: ST_TO_ADDR
// result := CreateVehicle ;
62515: LD_ADDR_VAR 0 5
62519: PUSH
62520: CALL_OW 45
62524: ST_TO_ADDR
// SetDir ( result , d ) ;
62525: LD_VAR 0 5
62529: PPUSH
62530: LD_VAR 0 4
62534: PPUSH
62535: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
62539: LD_VAR 0 5
62543: PPUSH
62544: LD_VAR 0 2
62548: PPUSH
62549: LD_VAR 0 3
62553: PPUSH
62554: LD_INT 0
62556: PPUSH
62557: CALL_OW 48
// end ;
62561: LD_VAR 0 5
62565: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
62566: LD_INT 0
62568: PPUSH
62569: PPUSH
62570: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
62571: LD_ADDR_VAR 0 2
62575: PUSH
62576: LD_INT 0
62578: PUSH
62579: LD_INT 0
62581: PUSH
62582: LD_INT 0
62584: PUSH
62585: LD_INT 0
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
62594: LD_VAR 0 1
62598: NOT
62599: PUSH
62600: LD_VAR 0 1
62604: PPUSH
62605: CALL_OW 264
62609: PUSH
62610: LD_INT 12
62612: PUSH
62613: LD_INT 51
62615: PUSH
62616: LD_INT 32
62618: PUSH
62619: LD_INT 89
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: IN
62628: NOT
62629: OR
62630: IFFALSE 62634
// exit ;
62632: GO 62732
// for i := 1 to 3 do
62634: LD_ADDR_VAR 0 3
62638: PUSH
62639: DOUBLE
62640: LD_INT 1
62642: DEC
62643: ST_TO_ADDR
62644: LD_INT 3
62646: PUSH
62647: FOR_TO
62648: IFFALSE 62730
// begin tmp := GetCargo ( cargo , i ) ;
62650: LD_ADDR_VAR 0 4
62654: PUSH
62655: LD_VAR 0 1
62659: PPUSH
62660: LD_VAR 0 3
62664: PPUSH
62665: CALL_OW 289
62669: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
62670: LD_ADDR_VAR 0 2
62674: PUSH
62675: LD_VAR 0 2
62679: PPUSH
62680: LD_VAR 0 3
62684: PPUSH
62685: LD_VAR 0 4
62689: PPUSH
62690: CALL_OW 1
62694: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
62695: LD_ADDR_VAR 0 2
62699: PUSH
62700: LD_VAR 0 2
62704: PPUSH
62705: LD_INT 4
62707: PPUSH
62708: LD_VAR 0 2
62712: PUSH
62713: LD_INT 4
62715: ARRAY
62716: PUSH
62717: LD_VAR 0 4
62721: PLUS
62722: PPUSH
62723: CALL_OW 1
62727: ST_TO_ADDR
// end ;
62728: GO 62647
62730: POP
62731: POP
// end ;
62732: LD_VAR 0 2
62736: RET
// export function Length ( array ) ; begin
62737: LD_INT 0
62739: PPUSH
// result := array + 0 ;
62740: LD_ADDR_VAR 0 2
62744: PUSH
62745: LD_VAR 0 1
62749: PUSH
62750: LD_INT 0
62752: PLUS
62753: ST_TO_ADDR
// end ;
62754: LD_VAR 0 2
62758: RET
// export function PrepareArray ( array ) ; begin
62759: LD_INT 0
62761: PPUSH
// result := array diff 0 ;
62762: LD_ADDR_VAR 0 2
62766: PUSH
62767: LD_VAR 0 1
62771: PUSH
62772: LD_INT 0
62774: DIFF
62775: ST_TO_ADDR
// if not result [ 1 ] then
62776: LD_VAR 0 2
62780: PUSH
62781: LD_INT 1
62783: ARRAY
62784: NOT
62785: IFFALSE 62805
// result := Delete ( result , 1 ) ;
62787: LD_ADDR_VAR 0 2
62791: PUSH
62792: LD_VAR 0 2
62796: PPUSH
62797: LD_INT 1
62799: PPUSH
62800: CALL_OW 3
62804: ST_TO_ADDR
// end ;
62805: LD_VAR 0 2
62809: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
62810: LD_INT 0
62812: PPUSH
62813: PPUSH
62814: PPUSH
62815: PPUSH
// sibRocketRange := 25 ;
62816: LD_ADDR_VAR 0 6
62820: PUSH
62821: LD_INT 25
62823: ST_TO_ADDR
// result := false ;
62824: LD_ADDR_VAR 0 4
62828: PUSH
62829: LD_INT 0
62831: ST_TO_ADDR
// for i := 0 to 5 do
62832: LD_ADDR_VAR 0 5
62836: PUSH
62837: DOUBLE
62838: LD_INT 0
62840: DEC
62841: ST_TO_ADDR
62842: LD_INT 5
62844: PUSH
62845: FOR_TO
62846: IFFALSE 62913
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
62848: LD_VAR 0 1
62852: PPUSH
62853: LD_VAR 0 5
62857: PPUSH
62858: LD_VAR 0 6
62862: PPUSH
62863: CALL_OW 272
62867: PPUSH
62868: LD_VAR 0 2
62872: PPUSH
62873: LD_VAR 0 5
62877: PPUSH
62878: LD_VAR 0 6
62882: PPUSH
62883: CALL_OW 273
62887: PPUSH
62888: LD_VAR 0 3
62892: PPUSH
62893: CALL_OW 309
62897: IFFALSE 62911
// begin result := true ;
62899: LD_ADDR_VAR 0 4
62903: PUSH
62904: LD_INT 1
62906: ST_TO_ADDR
// exit ;
62907: POP
62908: POP
62909: GO 62915
// end ;
62911: GO 62845
62913: POP
62914: POP
// end ;
62915: LD_VAR 0 4
62919: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
62920: LD_INT 0
62922: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
62923: LD_VAR 0 1
62927: PPUSH
62928: LD_VAR 0 2
62932: PPUSH
62933: LD_INT 0
62935: PPUSH
62936: LD_INT 0
62938: PPUSH
62939: LD_INT 1
62941: PPUSH
62942: LD_INT 0
62944: PPUSH
62945: CALL_OW 587
// end ;
62949: LD_VAR 0 3
62953: RET
// export function CenterOnNow ( unit ) ; begin
62954: LD_INT 0
62956: PPUSH
// result := IsInUnit ( unit ) ;
62957: LD_ADDR_VAR 0 2
62961: PUSH
62962: LD_VAR 0 1
62966: PPUSH
62967: CALL_OW 310
62971: ST_TO_ADDR
// if not result then
62972: LD_VAR 0 2
62976: NOT
62977: IFFALSE 62989
// result := unit ;
62979: LD_ADDR_VAR 0 2
62983: PUSH
62984: LD_VAR 0 1
62988: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
62989: LD_VAR 0 1
62993: PPUSH
62994: CALL_OW 87
// end ;
62998: LD_VAR 0 2
63002: RET
// export function ComMoveHex ( unit , hex ) ; begin
63003: LD_INT 0
63005: PPUSH
// if not hex then
63006: LD_VAR 0 2
63010: NOT
63011: IFFALSE 63015
// exit ;
63013: GO 63068
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
63015: LD_VAR 0 2
63019: PUSH
63020: LD_INT 1
63022: ARRAY
63023: PPUSH
63024: LD_VAR 0 2
63028: PUSH
63029: LD_INT 2
63031: ARRAY
63032: PPUSH
63033: CALL_OW 428
63037: IFFALSE 63041
// exit ;
63039: GO 63068
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
63041: LD_VAR 0 1
63045: PPUSH
63046: LD_VAR 0 2
63050: PUSH
63051: LD_INT 1
63053: ARRAY
63054: PPUSH
63055: LD_VAR 0 2
63059: PUSH
63060: LD_INT 2
63062: ARRAY
63063: PPUSH
63064: CALL_OW 111
// end ;
63068: LD_VAR 0 3
63072: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
63073: LD_INT 0
63075: PPUSH
63076: PPUSH
63077: PPUSH
// if not unit or not enemy then
63078: LD_VAR 0 1
63082: NOT
63083: PUSH
63084: LD_VAR 0 2
63088: NOT
63089: OR
63090: IFFALSE 63094
// exit ;
63092: GO 63218
// x := GetX ( enemy ) ;
63094: LD_ADDR_VAR 0 4
63098: PUSH
63099: LD_VAR 0 2
63103: PPUSH
63104: CALL_OW 250
63108: ST_TO_ADDR
// y := GetY ( enemy ) ;
63109: LD_ADDR_VAR 0 5
63113: PUSH
63114: LD_VAR 0 2
63118: PPUSH
63119: CALL_OW 251
63123: ST_TO_ADDR
// if ValidHex ( x , y ) then
63124: LD_VAR 0 4
63128: PPUSH
63129: LD_VAR 0 5
63133: PPUSH
63134: CALL_OW 488
63138: IFFALSE 63218
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
63140: LD_VAR 0 2
63144: PPUSH
63145: CALL_OW 247
63149: PUSH
63150: LD_INT 3
63152: PUSH
63153: LD_INT 2
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: IN
63160: PUSH
63161: LD_VAR 0 1
63165: PPUSH
63166: CALL_OW 255
63170: PPUSH
63171: LD_VAR 0 2
63175: PPUSH
63176: CALL_OW 292
63180: AND
63181: IFFALSE 63199
// ComAttackUnit ( unit , enemy ) else
63183: LD_VAR 0 1
63187: PPUSH
63188: LD_VAR 0 2
63192: PPUSH
63193: CALL_OW 115
63197: GO 63218
// ComAgressiveMove ( unit , x , y ) ;
63199: LD_VAR 0 1
63203: PPUSH
63204: LD_VAR 0 4
63208: PPUSH
63209: LD_VAR 0 5
63213: PPUSH
63214: CALL_OW 114
// end ;
63218: LD_VAR 0 3
63222: RET
