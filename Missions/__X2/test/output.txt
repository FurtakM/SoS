// every 0 0$1 trigger Carry ( aaa3 ) do
   0: LD_INT 82
   2: PPUSH
   3: CALL_OW 281
   7: IFFALSE 25
   9: GO 11
  11: DISABLE
// SetCargo ( aaa3 , mat_cans , 0 ) ;
  12: LD_INT 82
  14: PPUSH
  15: LD_INT 1
  17: PPUSH
  18: LD_INT 0
  20: PPUSH
  21: CALL_OW 290
  25: END
// every 0 0$1 do
  26: GO 28
  28: DISABLE
// PlaySoundXY ( - 1 , - 1 , alarm ) ;
  29: LD_INT 1
  31: NEG
  32: PPUSH
  33: LD_INT 1
  35: NEG
  36: PPUSH
  37: LD_STRING alarm
  39: PPUSH
  40: CALL_OW 366
  44: END
// export mineCounter ; every 0 0$1 do var i , tmp , task ;
  45: GO 47
  47: DISABLE
  48: LD_INT 0
  50: PPUSH
  51: PPUSH
  52: PPUSH
// begin mineCounter := 5 ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 5
  60: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
  61: LD_INT 35
  63: PPUSH
  64: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , nation_arabian ] , [ f_class , class_soldier ] ] ) ;
  68: LD_ADDR_VAR 0 2
  72: PUSH
  73: LD_INT 22
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: EMPTY
  80: LIST
  81: LIST
  82: PUSH
  83: LD_INT 23
  85: PUSH
  86: LD_INT 2
  88: PUSH
  89: EMPTY
  90: LIST
  91: LIST
  92: PUSH
  93: LD_INT 25
  95: PUSH
  96: LD_INT 1
  98: PUSH
  99: EMPTY
 100: LIST
 101: LIST
 102: PUSH
 103: EMPTY
 104: LIST
 105: LIST
 106: LIST
 107: PPUSH
 108: CALL_OW 69
 112: ST_TO_ADDR
// if not tmp then
 113: LD_VAR 0 2
 117: NOT
 118: IFFALSE 122
// continue ;
 120: GO 61
// for i in tmp do
 122: LD_ADDR_VAR 0 1
 126: PUSH
 127: LD_VAR 0 2
 131: PUSH
 132: FOR_IN
 133: IFFALSE 322
// begin task := GetTaskList ( i ) ;
 135: LD_ADDR_VAR 0 3
 139: PUSH
 140: LD_VAR 0 1
 144: PPUSH
 145: CALL_OW 437
 149: ST_TO_ADDR
// if not task then
 150: LD_VAR 0 3
 154: NOT
 155: IFFALSE 171
// begin SetTag ( i , 0 ) ;
 157: LD_VAR 0 1
 161: PPUSH
 162: LD_INT 0
 164: PPUSH
 165: CALL_OW 109
// continue ;
 169: GO 132
// end ; if GetTag ( i ) = 1 and task [ 1 ] [ 1 ] <> p then
 171: LD_VAR 0 1
 175: PPUSH
 176: CALL_OW 110
 180: PUSH
 181: LD_INT 1
 183: EQUAL
 184: PUSH
 185: LD_VAR 0 3
 189: PUSH
 190: LD_INT 1
 192: ARRAY
 193: PUSH
 194: LD_INT 1
 196: ARRAY
 197: PUSH
 198: LD_STRING p
 200: NONEQUAL
 201: AND
 202: IFFALSE 218
// begin SetTag ( i , 0 ) ;
 204: LD_VAR 0 1
 208: PPUSH
 209: LD_INT 0
 211: PPUSH
 212: CALL_OW 109
// continue ;
 216: GO 132
// end ; if GetTag ( i ) <> 1 and task [ 1 ] [ 1 ] = p then
 218: LD_VAR 0 1
 222: PPUSH
 223: CALL_OW 110
 227: PUSH
 228: LD_INT 1
 230: NONEQUAL
 231: PUSH
 232: LD_VAR 0 3
 236: PUSH
 237: LD_INT 1
 239: ARRAY
 240: PUSH
 241: LD_INT 1
 243: ARRAY
 244: PUSH
 245: LD_STRING p
 247: EQUAL
 248: AND
 249: IFFALSE 320
// begin SetTag ( i , 1 ) ;
 251: LD_VAR 0 1
 255: PPUSH
 256: LD_INT 1
 258: PPUSH
 259: CALL_OW 109
// RaiseSailEventCustom ( 1 , i , task [ 1 ] [ 2 ] , task [ 1 ] [ 3 ] , task [ 1 ] [ 4 ] , 0 , 0 ) ;
 263: LD_INT 1
 265: PPUSH
 266: LD_VAR 0 1
 270: PPUSH
 271: LD_VAR 0 3
 275: PUSH
 276: LD_INT 1
 278: ARRAY
 279: PUSH
 280: LD_INT 2
 282: ARRAY
 283: PPUSH
 284: LD_VAR 0 3
 288: PUSH
 289: LD_INT 1
 291: ARRAY
 292: PUSH
 293: LD_INT 3
 295: ARRAY
 296: PPUSH
 297: LD_VAR 0 3
 301: PUSH
 302: LD_INT 1
 304: ARRAY
 305: PUSH
 306: LD_INT 4
 308: ARRAY
 309: PPUSH
 310: LD_INT 0
 312: PPUSH
 313: LD_INT 0
 315: PPUSH
 316: CALL_OW 595
// end ; end ;
 320: GO 132
 322: POP
 323: POP
// until mineCounter = 0 ;
 324: LD_EXP 1
 328: PUSH
 329: LD_INT 0
 331: EQUAL
 332: IFFALSE 61
// end ;
 334: PPOPN 3
 336: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = 1 then
 337: LD_VAR 0 1
 341: PUSH
 342: LD_INT 1
 344: EQUAL
 345: IFFALSE 433
// begin repeat wait ( 0 0$1 ) ;
 347: LD_INT 35
 349: PPUSH
 350: CALL_OW 67
// if MineAtPos ( p2 , p3 ) or MineAtRange ( GetX ( p4 ) , GetY ( p4 ) ) then
 354: LD_VAR 0 3
 358: PPUSH
 359: LD_VAR 0 4
 363: PPUSH
 364: CALL_OW 458
 368: PUSH
 369: LD_VAR 0 5
 373: PPUSH
 374: CALL_OW 250
 378: PPUSH
 379: LD_VAR 0 5
 383: PPUSH
 384: CALL_OW 251
 388: PPUSH
 389: CALL 436 0 2
 393: OR
 394: IFFALSE 398
// break ;
 396: GO 419
// if GetTag ( p1 ) <> 1 then
 398: LD_VAR 0 2
 402: PPUSH
 403: CALL_OW 110
 407: PUSH
 408: LD_INT 1
 410: NONEQUAL
 411: IFFALSE 415
// exit ;
 413: GO 433
// until false ;
 415: LD_INT 0
 417: IFFALSE 347
// mineCounter := mineCounter - 1 ;
 419: LD_ADDR_EXP 1
 423: PUSH
 424: LD_EXP 1
 428: PUSH
 429: LD_INT 1
 431: MINUS
 432: ST_TO_ADDR
// end ; end ;
 433: PPOPN 7
 435: END
// export function MineAtRange ( x , y ) ; var _x , _y , _d ; begin
 436: LD_INT 0
 438: PPUSH
 439: PPUSH
 440: PPUSH
 441: PPUSH
// for _d := 0 to 5 do
 442: LD_ADDR_VAR 0 6
 446: PUSH
 447: DOUBLE
 448: LD_INT 0
 450: DEC
 451: ST_TO_ADDR
 452: LD_INT 5
 454: PUSH
 455: FOR_TO
 456: IFFALSE 564
// for _x := - 3 to 3 do
 458: LD_ADDR_VAR 0 4
 462: PUSH
 463: DOUBLE
 464: LD_INT 3
 466: NEG
 467: DEC
 468: ST_TO_ADDR
 469: LD_INT 3
 471: PUSH
 472: FOR_TO
 473: IFFALSE 560
// for _y := - 3 to 3 do
 475: LD_ADDR_VAR 0 5
 479: PUSH
 480: DOUBLE
 481: LD_INT 3
 483: NEG
 484: DEC
 485: ST_TO_ADDR
 486: LD_INT 3
 488: PUSH
 489: FOR_TO
 490: IFFALSE 556
// if MineAtPos ( ShiftX ( x , _d , _x ) , ShiftY ( y , _d , _y ) ) then
 492: LD_VAR 0 1
 496: PPUSH
 497: LD_VAR 0 6
 501: PPUSH
 502: LD_VAR 0 4
 506: PPUSH
 507: CALL_OW 272
 511: PPUSH
 512: LD_VAR 0 2
 516: PPUSH
 517: LD_VAR 0 6
 521: PPUSH
 522: LD_VAR 0 5
 526: PPUSH
 527: CALL_OW 273
 531: PPUSH
 532: CALL_OW 458
 536: IFFALSE 554
// begin result := true ;
 538: LD_ADDR_VAR 0 3
 542: PUSH
 543: LD_INT 1
 545: ST_TO_ADDR
// exit ;
 546: POP
 547: POP
 548: POP
 549: POP
 550: POP
 551: POP
 552: GO 566
// end ;
 554: GO 489
 556: POP
 557: POP
 558: GO 472
 560: POP
 561: POP
 562: GO 455
 564: POP
 565: POP
// end ;
 566: LD_VAR 0 3
 570: RET
// every 0 0$2 do var un , x , y , _r , _x , _y , _d , __x , __y ;
 571: GO 573
 573: DISABLE
 574: LD_INT 0
 576: PPUSH
 577: PPUSH
 578: PPUSH
 579: PPUSH
 580: PPUSH
 581: PPUSH
 582: PPUSH
 583: PPUSH
 584: PPUSH
// begin x := 23 ;
 585: LD_ADDR_VAR 0 2
 589: PUSH
 590: LD_INT 23
 592: ST_TO_ADDR
// y := 19 ;
 593: LD_ADDR_VAR 0 3
 597: PUSH
 598: LD_INT 19
 600: ST_TO_ADDR
// uc_side := 8 ;
 601: LD_ADDR_OWVAR 20
 605: PUSH
 606: LD_INT 8
 608: ST_TO_ADDR
// uc_nation := 1 ;
 609: LD_ADDR_OWVAR 21
 613: PUSH
 614: LD_INT 1
 616: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
 617: LD_INT 0
 619: PPUSH
 620: LD_INT 1
 622: PPUSH
 623: CALL_OW 381
// for _r := 1 to 6 do
 627: LD_ADDR_VAR 0 4
 631: PUSH
 632: DOUBLE
 633: LD_INT 1
 635: DEC
 636: ST_TO_ADDR
 637: LD_INT 6
 639: PUSH
 640: FOR_TO
 641: IFFALSE 793
// begin for _x := - _r to _r do
 643: LD_ADDR_VAR 0 5
 647: PUSH
 648: DOUBLE
 649: LD_VAR 0 4
 653: NEG
 654: DEC
 655: ST_TO_ADDR
 656: LD_VAR 0 4
 660: PUSH
 661: FOR_TO
 662: IFFALSE 789
// for _y := - _r to _r do
 664: LD_ADDR_VAR 0 6
 668: PUSH
 669: DOUBLE
 670: LD_VAR 0 4
 674: NEG
 675: DEC
 676: ST_TO_ADDR
 677: LD_VAR 0 4
 681: PUSH
 682: FOR_TO
 683: IFFALSE 785
// begin __x := x + _x ;
 685: LD_ADDR_VAR 0 8
 689: PUSH
 690: LD_VAR 0 2
 694: PUSH
 695: LD_VAR 0 5
 699: PLUS
 700: ST_TO_ADDR
// __y := y + _y ;
 701: LD_ADDR_VAR 0 9
 705: PUSH
 706: LD_VAR 0 3
 710: PUSH
 711: LD_VAR 0 6
 715: PLUS
 716: ST_TO_ADDR
// if HexInfo ( __x , __y ) then
 717: LD_VAR 0 8
 721: PPUSH
 722: LD_VAR 0 9
 726: PPUSH
 727: CALL_OW 428
 731: IFFALSE 735
// continue ;
 733: GO 682
// wait ( 1 ) ;
 735: LD_INT 1
 737: PPUSH
 738: CALL_OW 67
// un := CreateHuman ;
 742: LD_ADDR_VAR 0 1
 746: PUSH
 747: CALL_OW 44
 751: ST_TO_ADDR
// PlaceUnitXY ( un , __x , __y , false ) ;
 752: LD_VAR 0 1
 756: PPUSH
 757: LD_VAR 0 8
 761: PPUSH
 762: LD_VAR 0 9
 766: PPUSH
 767: LD_INT 0
 769: PPUSH
 770: CALL_OW 48
// ComHold ( un ) ;
 774: LD_VAR 0 1
 778: PPUSH
 779: CALL_OW 140
// end ;
 783: GO 682
 785: POP
 786: POP
 787: GO 661
 789: POP
 790: POP
// end ;
 791: GO 640
 793: POP
 794: POP
// end ;
 795: PPOPN 9
 797: END
// export function PrepareAmericanConvoy ( soldiersAmount , engsAmount , mechsAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road , sols , engs , mechs , scis , enemySkillLevel , amConvoyTroops ; begin
 798: LD_INT 0
 800: PPUSH
 801: PPUSH
 802: PPUSH
 803: PPUSH
 804: PPUSH
 805: PPUSH
 806: PPUSH
 807: PPUSH
 808: PPUSH
 809: PPUSH
 810: PPUSH
// enemySkilllevel := 2 ;
 811: LD_ADDR_VAR 0 16
 815: PUSH
 816: LD_INT 2
 818: ST_TO_ADDR
// uc_side := 1 ;
 819: LD_ADDR_OWVAR 20
 823: PUSH
 824: LD_INT 1
 826: ST_TO_ADDR
// uc_nation := 1 ;
 827: LD_ADDR_OWVAR 21
 831: PUSH
 832: LD_INT 1
 834: ST_TO_ADDR
// hc_name :=  ;
 835: LD_ADDR_OWVAR 26
 839: PUSH
 840: LD_STRING 
 842: ST_TO_ADDR
// hc_gallery :=  ;
 843: LD_ADDR_OWVAR 33
 847: PUSH
 848: LD_STRING 
 850: ST_TO_ADDR
// for i := 1 to soldiersAmount do
 851: LD_ADDR_VAR 0 8
 855: PUSH
 856: DOUBLE
 857: LD_INT 1
 859: DEC
 860: ST_TO_ADDR
 861: LD_VAR 0 1
 865: PUSH
 866: FOR_TO
 867: IFFALSE 942
// begin PrepareSoldier ( false , enemySkillLevel ) ;
 869: LD_INT 0
 871: PPUSH
 872: LD_VAR 0 16
 876: PPUSH
 877: CALL_OW 381
// un = CreateHuman ;
 881: LD_ADDR_VAR 0 9
 885: PUSH
 886: CALL_OW 44
 890: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 891: LD_ADDR_VAR 0 17
 895: PUSH
 896: LD_VAR 0 17
 900: PUSH
 901: LD_VAR 0 9
 905: ADD
 906: ST_TO_ADDR
// sols := sols ^ un ;
 907: LD_ADDR_VAR 0 12
 911: PUSH
 912: LD_VAR 0 12
 916: PUSH
 917: LD_VAR 0 9
 921: ADD
 922: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 923: LD_VAR 0 9
 927: PPUSH
 928: LD_VAR 0 6
 932: PPUSH
 933: LD_INT 0
 935: PPUSH
 936: CALL_OW 49
// end ;
 940: GO 866
 942: POP
 943: POP
// for i := 1 to engsAmount do
 944: LD_ADDR_VAR 0 8
 948: PUSH
 949: DOUBLE
 950: LD_INT 1
 952: DEC
 953: ST_TO_ADDR
 954: LD_VAR 0 2
 958: PUSH
 959: FOR_TO
 960: IFFALSE 1035
// begin PrepareEngineer ( false , enemySkillLevel ) ;
 962: LD_INT 0
 964: PPUSH
 965: LD_VAR 0 16
 969: PPUSH
 970: CALL_OW 382
// un = CreateHuman ;
 974: LD_ADDR_VAR 0 9
 978: PUSH
 979: CALL_OW 44
 983: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 984: LD_ADDR_VAR 0 17
 988: PUSH
 989: LD_VAR 0 17
 993: PUSH
 994: LD_VAR 0 9
 998: ADD
 999: ST_TO_ADDR
// engs := engs ^ un ;
1000: LD_ADDR_VAR 0 13
1004: PUSH
1005: LD_VAR 0 13
1009: PUSH
1010: LD_VAR 0 9
1014: ADD
1015: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1016: LD_VAR 0 9
1020: PPUSH
1021: LD_VAR 0 6
1025: PPUSH
1026: LD_INT 0
1028: PPUSH
1029: CALL_OW 49
// end ;
1033: GO 959
1035: POP
1036: POP
// for i := 1 to mechsAmount do
1037: LD_ADDR_VAR 0 8
1041: PUSH
1042: DOUBLE
1043: LD_INT 1
1045: DEC
1046: ST_TO_ADDR
1047: LD_VAR 0 3
1051: PUSH
1052: FOR_TO
1053: IFFALSE 1128
// begin PrepareEngineer ( false , enemySkillLevel ) ;
1055: LD_INT 0
1057: PPUSH
1058: LD_VAR 0 16
1062: PPUSH
1063: CALL_OW 382
// un = CreateHuman ;
1067: LD_ADDR_VAR 0 9
1071: PUSH
1072: CALL_OW 44
1076: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
1077: LD_ADDR_VAR 0 17
1081: PUSH
1082: LD_VAR 0 17
1086: PUSH
1087: LD_VAR 0 9
1091: ADD
1092: ST_TO_ADDR
// engs := engs ^ un ;
1093: LD_ADDR_VAR 0 13
1097: PUSH
1098: LD_VAR 0 13
1102: PUSH
1103: LD_VAR 0 9
1107: ADD
1108: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1109: LD_VAR 0 9
1113: PPUSH
1114: LD_VAR 0 6
1118: PPUSH
1119: LD_INT 0
1121: PPUSH
1122: CALL_OW 49
// end ;
1126: GO 1052
1128: POP
1129: POP
// for i := 1 to scientistsAmount do
1130: LD_ADDR_VAR 0 8
1134: PUSH
1135: DOUBLE
1136: LD_INT 1
1138: DEC
1139: ST_TO_ADDR
1140: LD_VAR 0 4
1144: PUSH
1145: FOR_TO
1146: IFFALSE 1221
// begin PrepareMechanic ( false , enemySkillLevel ) ;
1148: LD_INT 0
1150: PPUSH
1151: LD_VAR 0 16
1155: PPUSH
1156: CALL_OW 383
// un = CreateHuman ;
1160: LD_ADDR_VAR 0 9
1164: PUSH
1165: CALL_OW 44
1169: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
1170: LD_ADDR_VAR 0 17
1174: PUSH
1175: LD_VAR 0 17
1179: PUSH
1180: LD_VAR 0 9
1184: ADD
1185: ST_TO_ADDR
// mechs := mechs ^ un ;
1186: LD_ADDR_VAR 0 14
1190: PUSH
1191: LD_VAR 0 14
1195: PUSH
1196: LD_VAR 0 9
1200: ADD
1201: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1202: LD_VAR 0 9
1206: PPUSH
1207: LD_VAR 0 6
1211: PPUSH
1212: LD_INT 0
1214: PPUSH
1215: CALL_OW 49
// end ;
1219: GO 1145
1221: POP
1222: POP
// for i := 1 to vehiclesAmount do
1223: LD_ADDR_VAR 0 8
1227: PUSH
1228: DOUBLE
1229: LD_INT 1
1231: DEC
1232: ST_TO_ADDR
1233: LD_VAR 0 5
1237: PUSH
1238: FOR_TO
1239: IFFALSE 1405
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
1241: LD_ADDR_OWVAR 40
1245: PUSH
1246: LD_INT 2
1248: PUSH
1249: LD_INT 4
1251: PUSH
1252: LD_INT 3
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: LIST
1259: PUSH
1260: LD_INT 1
1262: PPUSH
1263: LD_INT 3
1265: PPUSH
1266: CALL_OW 12
1270: ARRAY
1271: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1272: LD_ADDR_OWVAR 37
1276: PUSH
1277: LD_INT 3
1279: ST_TO_ADDR
// vc_control = control_manual ;
1280: LD_ADDR_OWVAR 38
1284: PUSH
1285: LD_INT 1
1287: ST_TO_ADDR
// vc_engine = engine_combustion ;
1288: LD_ADDR_OWVAR 39
1292: PUSH
1293: LD_INT 1
1295: ST_TO_ADDR
// veh = CreateVehicle ;
1296: LD_ADDR_VAR 0 10
1300: PUSH
1301: CALL_OW 45
1305: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ veh ;
1306: LD_ADDR_VAR 0 17
1310: PUSH
1311: LD_VAR 0 17
1315: PUSH
1316: LD_VAR 0 10
1320: ADD
1321: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
1322: LD_VAR 0 10
1326: PPUSH
1327: LD_VAR 0 6
1331: PPUSH
1332: LD_INT 0
1334: PPUSH
1335: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
1339: LD_INT 0
1341: PPUSH
1342: LD_VAR 0 16
1346: PPUSH
1347: CALL_OW 383
// un = CreateHuman ;
1351: LD_ADDR_VAR 0 9
1355: PUSH
1356: CALL_OW 44
1360: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ un ;
1361: LD_ADDR_VAR 0 17
1365: PUSH
1366: LD_VAR 0 17
1370: PUSH
1371: LD_VAR 0 9
1375: ADD
1376: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1377: LD_VAR 0 9
1381: PPUSH
1382: LD_VAR 0 10
1386: PPUSH
1387: CALL_OW 52
// SetFuel ( veh , 100 ) ;
1391: LD_VAR 0 10
1395: PPUSH
1396: LD_INT 100
1398: PPUSH
1399: CALL_OW 240
// end ;
1403: GO 1238
1405: POP
1406: POP
// end ; end_of_file
1407: LD_VAR 0 7
1411: RET
// every 0 0$1 do
1412: GO 1414
1414: DISABLE
// begin enable ;
1415: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1416: LD_STRING updateTimer(
1418: PUSH
1419: LD_OWVAR 1
1423: STR
1424: PUSH
1425: LD_STRING );
1427: STR
1428: PPUSH
1429: CALL_OW 559
// end ;
1433: END
// export function SOS_MapStart ( ) ; begin
1434: LD_INT 0
1436: PPUSH
// if streamModeActive then
1437: LD_EXP 2
1441: IFFALSE 1450
// DefineStreamItems ( true ) ;
1443: LD_INT 1
1445: PPUSH
1446: CALL 3104 0 1
// UpdateFactoryWaypoints ( ) ;
1450: CALL 15965 0 0
// UpdateWarehouseGatheringPoints ( ) ;
1454: CALL 16222 0 0
// end ;
1458: LD_VAR 0 1
1462: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
1463: LD_INT 0
1465: PPUSH
// if p2 = 100 then
1466: LD_VAR 0 2
1470: PUSH
1471: LD_INT 100
1473: EQUAL
1474: IFFALSE 2477
// begin if not StreamModeActive then
1476: LD_EXP 2
1480: NOT
1481: IFFALSE 1491
// StreamModeActive := true ;
1483: LD_ADDR_EXP 2
1487: PUSH
1488: LD_INT 1
1490: ST_TO_ADDR
// if p3 = 0 then
1491: LD_VAR 0 3
1495: PUSH
1496: LD_INT 0
1498: EQUAL
1499: IFFALSE 1505
// InitStreamMode ;
1501: CALL 2640 0 0
// if p3 = 1 then
1505: LD_VAR 0 3
1509: PUSH
1510: LD_INT 1
1512: EQUAL
1513: IFFALSE 1523
// sRocket := true ;
1515: LD_ADDR_EXP 7
1519: PUSH
1520: LD_INT 1
1522: ST_TO_ADDR
// if p3 = 2 then
1523: LD_VAR 0 3
1527: PUSH
1528: LD_INT 2
1530: EQUAL
1531: IFFALSE 1541
// sSpeed := true ;
1533: LD_ADDR_EXP 6
1537: PUSH
1538: LD_INT 1
1540: ST_TO_ADDR
// if p3 = 3 then
1541: LD_VAR 0 3
1545: PUSH
1546: LD_INT 3
1548: EQUAL
1549: IFFALSE 1559
// sEngine := true ;
1551: LD_ADDR_EXP 8
1555: PUSH
1556: LD_INT 1
1558: ST_TO_ADDR
// if p3 = 4 then
1559: LD_VAR 0 3
1563: PUSH
1564: LD_INT 4
1566: EQUAL
1567: IFFALSE 1577
// sSpec := true ;
1569: LD_ADDR_EXP 5
1573: PUSH
1574: LD_INT 1
1576: ST_TO_ADDR
// if p3 = 5 then
1577: LD_VAR 0 3
1581: PUSH
1582: LD_INT 5
1584: EQUAL
1585: IFFALSE 1595
// sLevel := true ;
1587: LD_ADDR_EXP 9
1591: PUSH
1592: LD_INT 1
1594: ST_TO_ADDR
// if p3 = 6 then
1595: LD_VAR 0 3
1599: PUSH
1600: LD_INT 6
1602: EQUAL
1603: IFFALSE 1613
// sArmoury := true ;
1605: LD_ADDR_EXP 10
1609: PUSH
1610: LD_INT 1
1612: ST_TO_ADDR
// if p3 = 7 then
1613: LD_VAR 0 3
1617: PUSH
1618: LD_INT 7
1620: EQUAL
1621: IFFALSE 1631
// sRadar := true ;
1623: LD_ADDR_EXP 11
1627: PUSH
1628: LD_INT 1
1630: ST_TO_ADDR
// if p3 = 8 then
1631: LD_VAR 0 3
1635: PUSH
1636: LD_INT 8
1638: EQUAL
1639: IFFALSE 1649
// sBunker := true ;
1641: LD_ADDR_EXP 12
1645: PUSH
1646: LD_INT 1
1648: ST_TO_ADDR
// if p3 = 9 then
1649: LD_VAR 0 3
1653: PUSH
1654: LD_INT 9
1656: EQUAL
1657: IFFALSE 1667
// sHack := true ;
1659: LD_ADDR_EXP 13
1663: PUSH
1664: LD_INT 1
1666: ST_TO_ADDR
// if p3 = 10 then
1667: LD_VAR 0 3
1671: PUSH
1672: LD_INT 10
1674: EQUAL
1675: IFFALSE 1685
// sFire := true ;
1677: LD_ADDR_EXP 14
1681: PUSH
1682: LD_INT 1
1684: ST_TO_ADDR
// if p3 = 11 then
1685: LD_VAR 0 3
1689: PUSH
1690: LD_INT 11
1692: EQUAL
1693: IFFALSE 1703
// sRefresh := true ;
1695: LD_ADDR_EXP 15
1699: PUSH
1700: LD_INT 1
1702: ST_TO_ADDR
// if p3 = 12 then
1703: LD_VAR 0 3
1707: PUSH
1708: LD_INT 12
1710: EQUAL
1711: IFFALSE 1721
// sExp := true ;
1713: LD_ADDR_EXP 16
1717: PUSH
1718: LD_INT 1
1720: ST_TO_ADDR
// if p3 = 13 then
1721: LD_VAR 0 3
1725: PUSH
1726: LD_INT 13
1728: EQUAL
1729: IFFALSE 1739
// sDepot := true ;
1731: LD_ADDR_EXP 17
1735: PUSH
1736: LD_INT 1
1738: ST_TO_ADDR
// if p3 = 14 then
1739: LD_VAR 0 3
1743: PUSH
1744: LD_INT 14
1746: EQUAL
1747: IFFALSE 1757
// sFlag := true ;
1749: LD_ADDR_EXP 18
1753: PUSH
1754: LD_INT 1
1756: ST_TO_ADDR
// if p3 = 15 then
1757: LD_VAR 0 3
1761: PUSH
1762: LD_INT 15
1764: EQUAL
1765: IFFALSE 1775
// sKamikadze := true ;
1767: LD_ADDR_EXP 26
1771: PUSH
1772: LD_INT 1
1774: ST_TO_ADDR
// if p3 = 16 then
1775: LD_VAR 0 3
1779: PUSH
1780: LD_INT 16
1782: EQUAL
1783: IFFALSE 1793
// sTroll := true ;
1785: LD_ADDR_EXP 27
1789: PUSH
1790: LD_INT 1
1792: ST_TO_ADDR
// if p3 = 17 then
1793: LD_VAR 0 3
1797: PUSH
1798: LD_INT 17
1800: EQUAL
1801: IFFALSE 1811
// sSlow := true ;
1803: LD_ADDR_EXP 28
1807: PUSH
1808: LD_INT 1
1810: ST_TO_ADDR
// if p3 = 18 then
1811: LD_VAR 0 3
1815: PUSH
1816: LD_INT 18
1818: EQUAL
1819: IFFALSE 1829
// sLack := true ;
1821: LD_ADDR_EXP 29
1825: PUSH
1826: LD_INT 1
1828: ST_TO_ADDR
// if p3 = 19 then
1829: LD_VAR 0 3
1833: PUSH
1834: LD_INT 19
1836: EQUAL
1837: IFFALSE 1847
// sTank := true ;
1839: LD_ADDR_EXP 31
1843: PUSH
1844: LD_INT 1
1846: ST_TO_ADDR
// if p3 = 20 then
1847: LD_VAR 0 3
1851: PUSH
1852: LD_INT 20
1854: EQUAL
1855: IFFALSE 1865
// sRemote := true ;
1857: LD_ADDR_EXP 32
1861: PUSH
1862: LD_INT 1
1864: ST_TO_ADDR
// if p3 = 21 then
1865: LD_VAR 0 3
1869: PUSH
1870: LD_INT 21
1872: EQUAL
1873: IFFALSE 1883
// sPowell := true ;
1875: LD_ADDR_EXP 33
1879: PUSH
1880: LD_INT 1
1882: ST_TO_ADDR
// if p3 = 22 then
1883: LD_VAR 0 3
1887: PUSH
1888: LD_INT 22
1890: EQUAL
1891: IFFALSE 1901
// sTeleport := true ;
1893: LD_ADDR_EXP 36
1897: PUSH
1898: LD_INT 1
1900: ST_TO_ADDR
// if p3 = 23 then
1901: LD_VAR 0 3
1905: PUSH
1906: LD_INT 23
1908: EQUAL
1909: IFFALSE 1919
// sOilTower := true ;
1911: LD_ADDR_EXP 38
1915: PUSH
1916: LD_INT 1
1918: ST_TO_ADDR
// if p3 = 24 then
1919: LD_VAR 0 3
1923: PUSH
1924: LD_INT 24
1926: EQUAL
1927: IFFALSE 1937
// sShovel := true ;
1929: LD_ADDR_EXP 39
1933: PUSH
1934: LD_INT 1
1936: ST_TO_ADDR
// if p3 = 25 then
1937: LD_VAR 0 3
1941: PUSH
1942: LD_INT 25
1944: EQUAL
1945: IFFALSE 1955
// sSheik := true ;
1947: LD_ADDR_EXP 40
1951: PUSH
1952: LD_INT 1
1954: ST_TO_ADDR
// if p3 = 26 then
1955: LD_VAR 0 3
1959: PUSH
1960: LD_INT 26
1962: EQUAL
1963: IFFALSE 1973
// sEarthquake := true ;
1965: LD_ADDR_EXP 42
1969: PUSH
1970: LD_INT 1
1972: ST_TO_ADDR
// if p3 = 27 then
1973: LD_VAR 0 3
1977: PUSH
1978: LD_INT 27
1980: EQUAL
1981: IFFALSE 1991
// sAI := true ;
1983: LD_ADDR_EXP 43
1987: PUSH
1988: LD_INT 1
1990: ST_TO_ADDR
// if p3 = 28 then
1991: LD_VAR 0 3
1995: PUSH
1996: LD_INT 28
1998: EQUAL
1999: IFFALSE 2009
// sCargo := true ;
2001: LD_ADDR_EXP 46
2005: PUSH
2006: LD_INT 1
2008: ST_TO_ADDR
// if p3 = 29 then
2009: LD_VAR 0 3
2013: PUSH
2014: LD_INT 29
2016: EQUAL
2017: IFFALSE 2027
// sDLaser := true ;
2019: LD_ADDR_EXP 47
2023: PUSH
2024: LD_INT 1
2026: ST_TO_ADDR
// if p3 = 30 then
2027: LD_VAR 0 3
2031: PUSH
2032: LD_INT 30
2034: EQUAL
2035: IFFALSE 2045
// sExchange := true ;
2037: LD_ADDR_EXP 48
2041: PUSH
2042: LD_INT 1
2044: ST_TO_ADDR
// if p3 = 31 then
2045: LD_VAR 0 3
2049: PUSH
2050: LD_INT 31
2052: EQUAL
2053: IFFALSE 2063
// sFac := true ;
2055: LD_ADDR_EXP 49
2059: PUSH
2060: LD_INT 1
2062: ST_TO_ADDR
// if p3 = 32 then
2063: LD_VAR 0 3
2067: PUSH
2068: LD_INT 32
2070: EQUAL
2071: IFFALSE 2081
// sPower := true ;
2073: LD_ADDR_EXP 50
2077: PUSH
2078: LD_INT 1
2080: ST_TO_ADDR
// if p3 = 33 then
2081: LD_VAR 0 3
2085: PUSH
2086: LD_INT 33
2088: EQUAL
2089: IFFALSE 2099
// sRandom := true ;
2091: LD_ADDR_EXP 51
2095: PUSH
2096: LD_INT 1
2098: ST_TO_ADDR
// if p3 = 34 then
2099: LD_VAR 0 3
2103: PUSH
2104: LD_INT 34
2106: EQUAL
2107: IFFALSE 2117
// sShield := true ;
2109: LD_ADDR_EXP 52
2113: PUSH
2114: LD_INT 1
2116: ST_TO_ADDR
// if p3 = 35 then
2117: LD_VAR 0 3
2121: PUSH
2122: LD_INT 35
2124: EQUAL
2125: IFFALSE 2135
// sTime := true ;
2127: LD_ADDR_EXP 53
2131: PUSH
2132: LD_INT 1
2134: ST_TO_ADDR
// if p3 = 36 then
2135: LD_VAR 0 3
2139: PUSH
2140: LD_INT 36
2142: EQUAL
2143: IFFALSE 2153
// sTools := true ;
2145: LD_ADDR_EXP 54
2149: PUSH
2150: LD_INT 1
2152: ST_TO_ADDR
// if p3 = 101 then
2153: LD_VAR 0 3
2157: PUSH
2158: LD_INT 101
2160: EQUAL
2161: IFFALSE 2171
// sSold := true ;
2163: LD_ADDR_EXP 19
2167: PUSH
2168: LD_INT 1
2170: ST_TO_ADDR
// if p3 = 102 then
2171: LD_VAR 0 3
2175: PUSH
2176: LD_INT 102
2178: EQUAL
2179: IFFALSE 2189
// sDiff := true ;
2181: LD_ADDR_EXP 20
2185: PUSH
2186: LD_INT 1
2188: ST_TO_ADDR
// if p3 = 103 then
2189: LD_VAR 0 3
2193: PUSH
2194: LD_INT 103
2196: EQUAL
2197: IFFALSE 2207
// sFog := true ;
2199: LD_ADDR_EXP 23
2203: PUSH
2204: LD_INT 1
2206: ST_TO_ADDR
// if p3 = 104 then
2207: LD_VAR 0 3
2211: PUSH
2212: LD_INT 104
2214: EQUAL
2215: IFFALSE 2225
// sReset := true ;
2217: LD_ADDR_EXP 24
2221: PUSH
2222: LD_INT 1
2224: ST_TO_ADDR
// if p3 = 105 then
2225: LD_VAR 0 3
2229: PUSH
2230: LD_INT 105
2232: EQUAL
2233: IFFALSE 2243
// sSun := true ;
2235: LD_ADDR_EXP 25
2239: PUSH
2240: LD_INT 1
2242: ST_TO_ADDR
// if p3 = 106 then
2243: LD_VAR 0 3
2247: PUSH
2248: LD_INT 106
2250: EQUAL
2251: IFFALSE 2261
// sTiger := true ;
2253: LD_ADDR_EXP 21
2257: PUSH
2258: LD_INT 1
2260: ST_TO_ADDR
// if p3 = 107 then
2261: LD_VAR 0 3
2265: PUSH
2266: LD_INT 107
2268: EQUAL
2269: IFFALSE 2279
// sBomb := true ;
2271: LD_ADDR_EXP 22
2275: PUSH
2276: LD_INT 1
2278: ST_TO_ADDR
// if p3 = 108 then
2279: LD_VAR 0 3
2283: PUSH
2284: LD_INT 108
2286: EQUAL
2287: IFFALSE 2297
// sWound := true ;
2289: LD_ADDR_EXP 30
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// if p3 = 109 then
2297: LD_VAR 0 3
2301: PUSH
2302: LD_INT 109
2304: EQUAL
2305: IFFALSE 2315
// sBetray := true ;
2307: LD_ADDR_EXP 34
2311: PUSH
2312: LD_INT 1
2314: ST_TO_ADDR
// if p3 = 110 then
2315: LD_VAR 0 3
2319: PUSH
2320: LD_INT 110
2322: EQUAL
2323: IFFALSE 2333
// sContamin := true ;
2325: LD_ADDR_EXP 35
2329: PUSH
2330: LD_INT 1
2332: ST_TO_ADDR
// if p3 = 111 then
2333: LD_VAR 0 3
2337: PUSH
2338: LD_INT 111
2340: EQUAL
2341: IFFALSE 2351
// sOil := true ;
2343: LD_ADDR_EXP 37
2347: PUSH
2348: LD_INT 1
2350: ST_TO_ADDR
// if p3 = 112 then
2351: LD_VAR 0 3
2355: PUSH
2356: LD_INT 112
2358: EQUAL
2359: IFFALSE 2369
// sStu := true ;
2361: LD_ADDR_EXP 41
2365: PUSH
2366: LD_INT 1
2368: ST_TO_ADDR
// if p3 = 113 then
2369: LD_VAR 0 3
2373: PUSH
2374: LD_INT 113
2376: EQUAL
2377: IFFALSE 2387
// sBazooka := true ;
2379: LD_ADDR_EXP 44
2383: PUSH
2384: LD_INT 1
2386: ST_TO_ADDR
// if p3 = 114 then
2387: LD_VAR 0 3
2391: PUSH
2392: LD_INT 114
2394: EQUAL
2395: IFFALSE 2405
// sMortar := true ;
2397: LD_ADDR_EXP 45
2401: PUSH
2402: LD_INT 1
2404: ST_TO_ADDR
// if p3 = 115 then
2405: LD_VAR 0 3
2409: PUSH
2410: LD_INT 115
2412: EQUAL
2413: IFFALSE 2423
// sRanger := true ;
2415: LD_ADDR_EXP 55
2419: PUSH
2420: LD_INT 1
2422: ST_TO_ADDR
// if p3 = 116 then
2423: LD_VAR 0 3
2427: PUSH
2428: LD_INT 116
2430: EQUAL
2431: IFFALSE 2441
// sComputer := true ;
2433: LD_ADDR_EXP 56
2437: PUSH
2438: LD_INT 1
2440: ST_TO_ADDR
// if p3 = 117 then
2441: LD_VAR 0 3
2445: PUSH
2446: LD_INT 117
2448: EQUAL
2449: IFFALSE 2459
// s30 := true ;
2451: LD_ADDR_EXP 57
2455: PUSH
2456: LD_INT 1
2458: ST_TO_ADDR
// if p3 = 118 then
2459: LD_VAR 0 3
2463: PUSH
2464: LD_INT 118
2466: EQUAL
2467: IFFALSE 2477
// s60 := true ;
2469: LD_ADDR_EXP 58
2473: PUSH
2474: LD_INT 1
2476: ST_TO_ADDR
// end ; if p2 = 101 then
2477: LD_VAR 0 2
2481: PUSH
2482: LD_INT 101
2484: EQUAL
2485: IFFALSE 2613
// begin case p3 of 1 :
2487: LD_VAR 0 3
2491: PUSH
2492: LD_INT 1
2494: DOUBLE
2495: EQUAL
2496: IFTRUE 2500
2498: GO 2507
2500: POP
// hHackUnlimitedResources ; 2 :
2501: CALL 14711 0 0
2505: GO 2613
2507: LD_INT 2
2509: DOUBLE
2510: EQUAL
2511: IFTRUE 2515
2513: GO 2522
2515: POP
// hHackSetLevel10 ; 3 :
2516: CALL 14844 0 0
2520: GO 2613
2522: LD_INT 3
2524: DOUBLE
2525: EQUAL
2526: IFTRUE 2530
2528: GO 2537
2530: POP
// hHackSetLevel10YourUnits ; 4 :
2531: CALL 14929 0 0
2535: GO 2613
2537: LD_INT 4
2539: DOUBLE
2540: EQUAL
2541: IFTRUE 2545
2543: GO 2552
2545: POP
// hHackInvincible ; 5 :
2546: CALL 15377 0 0
2550: GO 2613
2552: LD_INT 5
2554: DOUBLE
2555: EQUAL
2556: IFTRUE 2560
2558: GO 2567
2560: POP
// hHackInvisible ; 6 :
2561: CALL 15488 0 0
2565: GO 2613
2567: LD_INT 6
2569: DOUBLE
2570: EQUAL
2571: IFTRUE 2575
2573: GO 2582
2575: POP
// hHackChangeYourSide ; 7 :
2576: CALL 15545 0 0
2580: GO 2613
2582: LD_INT 7
2584: DOUBLE
2585: EQUAL
2586: IFTRUE 2590
2588: GO 2597
2590: POP
// hHackChangeUnitSide ; 8 :
2591: CALL 15587 0 0
2595: GO 2613
2597: LD_INT 8
2599: DOUBLE
2600: EQUAL
2601: IFTRUE 2605
2603: GO 2612
2605: POP
// hHackFog ; end ;
2606: CALL 15688 0 0
2610: GO 2613
2612: POP
// end ; end ;
2613: LD_VAR 0 7
2617: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
2618: GO 2620
2620: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
2621: LD_STRING initStreamRollete();
2623: PPUSH
2624: CALL_OW 559
// InitStreamMode ;
2628: CALL 2640 0 0
// DefineStreamItems ( false ) ;
2632: LD_INT 0
2634: PPUSH
2635: CALL 3104 0 1
// end ;
2639: END
// function InitStreamMode ; begin
2640: LD_INT 0
2642: PPUSH
// streamModeActive := false ;
2643: LD_ADDR_EXP 2
2647: PUSH
2648: LD_INT 0
2650: ST_TO_ADDR
// normalCounter := 36 ;
2651: LD_ADDR_EXP 3
2655: PUSH
2656: LD_INT 36
2658: ST_TO_ADDR
// hardcoreCounter := 18 ;
2659: LD_ADDR_EXP 4
2663: PUSH
2664: LD_INT 18
2666: ST_TO_ADDR
// sRocket := false ;
2667: LD_ADDR_EXP 7
2671: PUSH
2672: LD_INT 0
2674: ST_TO_ADDR
// sSpeed := false ;
2675: LD_ADDR_EXP 6
2679: PUSH
2680: LD_INT 0
2682: ST_TO_ADDR
// sEngine := false ;
2683: LD_ADDR_EXP 8
2687: PUSH
2688: LD_INT 0
2690: ST_TO_ADDR
// sSpec := false ;
2691: LD_ADDR_EXP 5
2695: PUSH
2696: LD_INT 0
2698: ST_TO_ADDR
// sLevel := false ;
2699: LD_ADDR_EXP 9
2703: PUSH
2704: LD_INT 0
2706: ST_TO_ADDR
// sArmoury := false ;
2707: LD_ADDR_EXP 10
2711: PUSH
2712: LD_INT 0
2714: ST_TO_ADDR
// sRadar := false ;
2715: LD_ADDR_EXP 11
2719: PUSH
2720: LD_INT 0
2722: ST_TO_ADDR
// sBunker := false ;
2723: LD_ADDR_EXP 12
2727: PUSH
2728: LD_INT 0
2730: ST_TO_ADDR
// sHack := false ;
2731: LD_ADDR_EXP 13
2735: PUSH
2736: LD_INT 0
2738: ST_TO_ADDR
// sFire := false ;
2739: LD_ADDR_EXP 14
2743: PUSH
2744: LD_INT 0
2746: ST_TO_ADDR
// sRefresh := false ;
2747: LD_ADDR_EXP 15
2751: PUSH
2752: LD_INT 0
2754: ST_TO_ADDR
// sExp := false ;
2755: LD_ADDR_EXP 16
2759: PUSH
2760: LD_INT 0
2762: ST_TO_ADDR
// sDepot := false ;
2763: LD_ADDR_EXP 17
2767: PUSH
2768: LD_INT 0
2770: ST_TO_ADDR
// sFlag := false ;
2771: LD_ADDR_EXP 18
2775: PUSH
2776: LD_INT 0
2778: ST_TO_ADDR
// sKamikadze := false ;
2779: LD_ADDR_EXP 26
2783: PUSH
2784: LD_INT 0
2786: ST_TO_ADDR
// sTroll := false ;
2787: LD_ADDR_EXP 27
2791: PUSH
2792: LD_INT 0
2794: ST_TO_ADDR
// sSlow := false ;
2795: LD_ADDR_EXP 28
2799: PUSH
2800: LD_INT 0
2802: ST_TO_ADDR
// sLack := false ;
2803: LD_ADDR_EXP 29
2807: PUSH
2808: LD_INT 0
2810: ST_TO_ADDR
// sTank := false ;
2811: LD_ADDR_EXP 31
2815: PUSH
2816: LD_INT 0
2818: ST_TO_ADDR
// sRemote := false ;
2819: LD_ADDR_EXP 32
2823: PUSH
2824: LD_INT 0
2826: ST_TO_ADDR
// sPowell := false ;
2827: LD_ADDR_EXP 33
2831: PUSH
2832: LD_INT 0
2834: ST_TO_ADDR
// sTeleport := false ;
2835: LD_ADDR_EXP 36
2839: PUSH
2840: LD_INT 0
2842: ST_TO_ADDR
// sOilTower := false ;
2843: LD_ADDR_EXP 38
2847: PUSH
2848: LD_INT 0
2850: ST_TO_ADDR
// sShovel := false ;
2851: LD_ADDR_EXP 39
2855: PUSH
2856: LD_INT 0
2858: ST_TO_ADDR
// sSheik := false ;
2859: LD_ADDR_EXP 40
2863: PUSH
2864: LD_INT 0
2866: ST_TO_ADDR
// sEarthquake := false ;
2867: LD_ADDR_EXP 42
2871: PUSH
2872: LD_INT 0
2874: ST_TO_ADDR
// sAI := false ;
2875: LD_ADDR_EXP 43
2879: PUSH
2880: LD_INT 0
2882: ST_TO_ADDR
// sCargo := false ;
2883: LD_ADDR_EXP 46
2887: PUSH
2888: LD_INT 0
2890: ST_TO_ADDR
// sDLaser := false ;
2891: LD_ADDR_EXP 47
2895: PUSH
2896: LD_INT 0
2898: ST_TO_ADDR
// sExchange := false ;
2899: LD_ADDR_EXP 48
2903: PUSH
2904: LD_INT 0
2906: ST_TO_ADDR
// sFac := false ;
2907: LD_ADDR_EXP 49
2911: PUSH
2912: LD_INT 0
2914: ST_TO_ADDR
// sPower := false ;
2915: LD_ADDR_EXP 50
2919: PUSH
2920: LD_INT 0
2922: ST_TO_ADDR
// sRandom := false ;
2923: LD_ADDR_EXP 51
2927: PUSH
2928: LD_INT 0
2930: ST_TO_ADDR
// sShield := false ;
2931: LD_ADDR_EXP 52
2935: PUSH
2936: LD_INT 0
2938: ST_TO_ADDR
// sTime := false ;
2939: LD_ADDR_EXP 53
2943: PUSH
2944: LD_INT 0
2946: ST_TO_ADDR
// sTools := false ;
2947: LD_ADDR_EXP 54
2951: PUSH
2952: LD_INT 0
2954: ST_TO_ADDR
// sSold := false ;
2955: LD_ADDR_EXP 19
2959: PUSH
2960: LD_INT 0
2962: ST_TO_ADDR
// sDiff := false ;
2963: LD_ADDR_EXP 20
2967: PUSH
2968: LD_INT 0
2970: ST_TO_ADDR
// sFog := false ;
2971: LD_ADDR_EXP 23
2975: PUSH
2976: LD_INT 0
2978: ST_TO_ADDR
// sReset := false ;
2979: LD_ADDR_EXP 24
2983: PUSH
2984: LD_INT 0
2986: ST_TO_ADDR
// sSun := false ;
2987: LD_ADDR_EXP 25
2991: PUSH
2992: LD_INT 0
2994: ST_TO_ADDR
// sTiger := false ;
2995: LD_ADDR_EXP 21
2999: PUSH
3000: LD_INT 0
3002: ST_TO_ADDR
// sBomb := false ;
3003: LD_ADDR_EXP 22
3007: PUSH
3008: LD_INT 0
3010: ST_TO_ADDR
// sWound := false ;
3011: LD_ADDR_EXP 30
3015: PUSH
3016: LD_INT 0
3018: ST_TO_ADDR
// sBetray := false ;
3019: LD_ADDR_EXP 34
3023: PUSH
3024: LD_INT 0
3026: ST_TO_ADDR
// sContamin := false ;
3027: LD_ADDR_EXP 35
3031: PUSH
3032: LD_INT 0
3034: ST_TO_ADDR
// sOil := false ;
3035: LD_ADDR_EXP 37
3039: PUSH
3040: LD_INT 0
3042: ST_TO_ADDR
// sStu := false ;
3043: LD_ADDR_EXP 41
3047: PUSH
3048: LD_INT 0
3050: ST_TO_ADDR
// sBazooka := false ;
3051: LD_ADDR_EXP 44
3055: PUSH
3056: LD_INT 0
3058: ST_TO_ADDR
// sMortar := false ;
3059: LD_ADDR_EXP 45
3063: PUSH
3064: LD_INT 0
3066: ST_TO_ADDR
// sRanger := false ;
3067: LD_ADDR_EXP 55
3071: PUSH
3072: LD_INT 0
3074: ST_TO_ADDR
// sComputer := false ;
3075: LD_ADDR_EXP 56
3079: PUSH
3080: LD_INT 0
3082: ST_TO_ADDR
// s30 := false ;
3083: LD_ADDR_EXP 57
3087: PUSH
3088: LD_INT 0
3090: ST_TO_ADDR
// s60 := false ;
3091: LD_ADDR_EXP 58
3095: PUSH
3096: LD_INT 0
3098: ST_TO_ADDR
// end ;
3099: LD_VAR 0 1
3103: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3104: LD_INT 0
3106: PPUSH
3107: PPUSH
3108: PPUSH
3109: PPUSH
3110: PPUSH
3111: PPUSH
3112: PPUSH
// result := [ ] ;
3113: LD_ADDR_VAR 0 2
3117: PUSH
3118: EMPTY
3119: ST_TO_ADDR
// if campaign_id = 1 then
3120: LD_OWVAR 69
3124: PUSH
3125: LD_INT 1
3127: EQUAL
3128: IFFALSE 6294
// begin case mission_number of 1 :
3130: LD_OWVAR 70
3134: PUSH
3135: LD_INT 1
3137: DOUBLE
3138: EQUAL
3139: IFTRUE 3143
3141: GO 3219
3143: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3144: LD_ADDR_VAR 0 2
3148: PUSH
3149: LD_INT 2
3151: PUSH
3152: LD_INT 4
3154: PUSH
3155: LD_INT 11
3157: PUSH
3158: LD_INT 12
3160: PUSH
3161: LD_INT 15
3163: PUSH
3164: LD_INT 16
3166: PUSH
3167: LD_INT 22
3169: PUSH
3170: LD_INT 23
3172: PUSH
3173: LD_INT 26
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: LIST
3180: LIST
3181: LIST
3182: LIST
3183: LIST
3184: LIST
3185: LIST
3186: PUSH
3187: LD_INT 101
3189: PUSH
3190: LD_INT 102
3192: PUSH
3193: LD_INT 106
3195: PUSH
3196: LD_INT 116
3198: PUSH
3199: LD_INT 117
3201: PUSH
3202: LD_INT 118
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: ST_TO_ADDR
3217: GO 6292
3219: LD_INT 2
3221: DOUBLE
3222: EQUAL
3223: IFTRUE 3227
3225: GO 3311
3227: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3228: LD_ADDR_VAR 0 2
3232: PUSH
3233: LD_INT 2
3235: PUSH
3236: LD_INT 4
3238: PUSH
3239: LD_INT 11
3241: PUSH
3242: LD_INT 12
3244: PUSH
3245: LD_INT 15
3247: PUSH
3248: LD_INT 16
3250: PUSH
3251: LD_INT 22
3253: PUSH
3254: LD_INT 23
3256: PUSH
3257: LD_INT 26
3259: PUSH
3260: EMPTY
3261: LIST
3262: LIST
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: PUSH
3271: LD_INT 101
3273: PUSH
3274: LD_INT 102
3276: PUSH
3277: LD_INT 105
3279: PUSH
3280: LD_INT 106
3282: PUSH
3283: LD_INT 108
3285: PUSH
3286: LD_INT 116
3288: PUSH
3289: LD_INT 117
3291: PUSH
3292: LD_INT 118
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: ST_TO_ADDR
3309: GO 6292
3311: LD_INT 3
3313: DOUBLE
3314: EQUAL
3315: IFTRUE 3319
3317: GO 3407
3319: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3320: LD_ADDR_VAR 0 2
3324: PUSH
3325: LD_INT 2
3327: PUSH
3328: LD_INT 4
3330: PUSH
3331: LD_INT 5
3333: PUSH
3334: LD_INT 11
3336: PUSH
3337: LD_INT 12
3339: PUSH
3340: LD_INT 15
3342: PUSH
3343: LD_INT 16
3345: PUSH
3346: LD_INT 22
3348: PUSH
3349: LD_INT 26
3351: PUSH
3352: LD_INT 36
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: PUSH
3367: LD_INT 101
3369: PUSH
3370: LD_INT 102
3372: PUSH
3373: LD_INT 105
3375: PUSH
3376: LD_INT 106
3378: PUSH
3379: LD_INT 108
3381: PUSH
3382: LD_INT 116
3384: PUSH
3385: LD_INT 117
3387: PUSH
3388: LD_INT 118
3390: PUSH
3391: EMPTY
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: ST_TO_ADDR
3405: GO 6292
3407: LD_INT 4
3409: DOUBLE
3410: EQUAL
3411: IFTRUE 3415
3413: GO 3511
3415: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
3416: LD_ADDR_VAR 0 2
3420: PUSH
3421: LD_INT 2
3423: PUSH
3424: LD_INT 4
3426: PUSH
3427: LD_INT 5
3429: PUSH
3430: LD_INT 8
3432: PUSH
3433: LD_INT 11
3435: PUSH
3436: LD_INT 12
3438: PUSH
3439: LD_INT 15
3441: PUSH
3442: LD_INT 16
3444: PUSH
3445: LD_INT 22
3447: PUSH
3448: LD_INT 23
3450: PUSH
3451: LD_INT 26
3453: PUSH
3454: LD_INT 36
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: LIST
3468: LIST
3469: LIST
3470: PUSH
3471: LD_INT 101
3473: PUSH
3474: LD_INT 102
3476: PUSH
3477: LD_INT 105
3479: PUSH
3480: LD_INT 106
3482: PUSH
3483: LD_INT 108
3485: PUSH
3486: LD_INT 116
3488: PUSH
3489: LD_INT 117
3491: PUSH
3492: LD_INT 118
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: ST_TO_ADDR
3509: GO 6292
3511: LD_INT 5
3513: DOUBLE
3514: EQUAL
3515: IFTRUE 3519
3517: GO 3631
3519: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
3520: LD_ADDR_VAR 0 2
3524: PUSH
3525: LD_INT 2
3527: PUSH
3528: LD_INT 4
3530: PUSH
3531: LD_INT 5
3533: PUSH
3534: LD_INT 6
3536: PUSH
3537: LD_INT 8
3539: PUSH
3540: LD_INT 11
3542: PUSH
3543: LD_INT 12
3545: PUSH
3546: LD_INT 15
3548: PUSH
3549: LD_INT 16
3551: PUSH
3552: LD_INT 22
3554: PUSH
3555: LD_INT 23
3557: PUSH
3558: LD_INT 25
3560: PUSH
3561: LD_INT 26
3563: PUSH
3564: LD_INT 36
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: PUSH
3583: LD_INT 101
3585: PUSH
3586: LD_INT 102
3588: PUSH
3589: LD_INT 105
3591: PUSH
3592: LD_INT 106
3594: PUSH
3595: LD_INT 108
3597: PUSH
3598: LD_INT 109
3600: PUSH
3601: LD_INT 112
3603: PUSH
3604: LD_INT 116
3606: PUSH
3607: LD_INT 117
3609: PUSH
3610: LD_INT 118
3612: PUSH
3613: EMPTY
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: PUSH
3625: EMPTY
3626: LIST
3627: LIST
3628: ST_TO_ADDR
3629: GO 6292
3631: LD_INT 6
3633: DOUBLE
3634: EQUAL
3635: IFTRUE 3639
3637: GO 3771
3639: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
3640: LD_ADDR_VAR 0 2
3644: PUSH
3645: LD_INT 2
3647: PUSH
3648: LD_INT 4
3650: PUSH
3651: LD_INT 5
3653: PUSH
3654: LD_INT 6
3656: PUSH
3657: LD_INT 8
3659: PUSH
3660: LD_INT 11
3662: PUSH
3663: LD_INT 12
3665: PUSH
3666: LD_INT 15
3668: PUSH
3669: LD_INT 16
3671: PUSH
3672: LD_INT 20
3674: PUSH
3675: LD_INT 21
3677: PUSH
3678: LD_INT 22
3680: PUSH
3681: LD_INT 23
3683: PUSH
3684: LD_INT 25
3686: PUSH
3687: LD_INT 26
3689: PUSH
3690: LD_INT 30
3692: PUSH
3693: LD_INT 31
3695: PUSH
3696: LD_INT 32
3698: PUSH
3699: LD_INT 36
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: PUSH
3723: LD_INT 101
3725: PUSH
3726: LD_INT 102
3728: PUSH
3729: LD_INT 105
3731: PUSH
3732: LD_INT 106
3734: PUSH
3735: LD_INT 108
3737: PUSH
3738: LD_INT 109
3740: PUSH
3741: LD_INT 112
3743: PUSH
3744: LD_INT 116
3746: PUSH
3747: LD_INT 117
3749: PUSH
3750: LD_INT 118
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: LIST
3757: LIST
3758: LIST
3759: LIST
3760: LIST
3761: LIST
3762: LIST
3763: LIST
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: ST_TO_ADDR
3769: GO 6292
3771: LD_INT 7
3773: DOUBLE
3774: EQUAL
3775: IFTRUE 3779
3777: GO 3891
3779: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
3780: LD_ADDR_VAR 0 2
3784: PUSH
3785: LD_INT 2
3787: PUSH
3788: LD_INT 4
3790: PUSH
3791: LD_INT 5
3793: PUSH
3794: LD_INT 7
3796: PUSH
3797: LD_INT 11
3799: PUSH
3800: LD_INT 12
3802: PUSH
3803: LD_INT 15
3805: PUSH
3806: LD_INT 16
3808: PUSH
3809: LD_INT 20
3811: PUSH
3812: LD_INT 21
3814: PUSH
3815: LD_INT 22
3817: PUSH
3818: LD_INT 23
3820: PUSH
3821: LD_INT 25
3823: PUSH
3824: LD_INT 26
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: PUSH
3843: LD_INT 101
3845: PUSH
3846: LD_INT 102
3848: PUSH
3849: LD_INT 103
3851: PUSH
3852: LD_INT 105
3854: PUSH
3855: LD_INT 106
3857: PUSH
3858: LD_INT 108
3860: PUSH
3861: LD_INT 112
3863: PUSH
3864: LD_INT 116
3866: PUSH
3867: LD_INT 117
3869: PUSH
3870: LD_INT 118
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: PUSH
3885: EMPTY
3886: LIST
3887: LIST
3888: ST_TO_ADDR
3889: GO 6292
3891: LD_INT 8
3893: DOUBLE
3894: EQUAL
3895: IFTRUE 3899
3897: GO 4039
3899: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
3900: LD_ADDR_VAR 0 2
3904: PUSH
3905: LD_INT 2
3907: PUSH
3908: LD_INT 4
3910: PUSH
3911: LD_INT 5
3913: PUSH
3914: LD_INT 6
3916: PUSH
3917: LD_INT 7
3919: PUSH
3920: LD_INT 8
3922: PUSH
3923: LD_INT 11
3925: PUSH
3926: LD_INT 12
3928: PUSH
3929: LD_INT 15
3931: PUSH
3932: LD_INT 16
3934: PUSH
3935: LD_INT 20
3937: PUSH
3938: LD_INT 21
3940: PUSH
3941: LD_INT 22
3943: PUSH
3944: LD_INT 23
3946: PUSH
3947: LD_INT 25
3949: PUSH
3950: LD_INT 26
3952: PUSH
3953: LD_INT 30
3955: PUSH
3956: LD_INT 31
3958: PUSH
3959: LD_INT 32
3961: PUSH
3962: LD_INT 36
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: LIST
3972: LIST
3973: LIST
3974: LIST
3975: LIST
3976: LIST
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: LIST
3985: LIST
3986: PUSH
3987: LD_INT 101
3989: PUSH
3990: LD_INT 102
3992: PUSH
3993: LD_INT 103
3995: PUSH
3996: LD_INT 105
3998: PUSH
3999: LD_INT 106
4001: PUSH
4002: LD_INT 108
4004: PUSH
4005: LD_INT 109
4007: PUSH
4008: LD_INT 112
4010: PUSH
4011: LD_INT 116
4013: PUSH
4014: LD_INT 117
4016: PUSH
4017: LD_INT 118
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: LIST
4029: LIST
4030: LIST
4031: LIST
4032: PUSH
4033: EMPTY
4034: LIST
4035: LIST
4036: ST_TO_ADDR
4037: GO 6292
4039: LD_INT 9
4041: DOUBLE
4042: EQUAL
4043: IFTRUE 4047
4045: GO 4195
4047: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4048: LD_ADDR_VAR 0 2
4052: PUSH
4053: LD_INT 2
4055: PUSH
4056: LD_INT 4
4058: PUSH
4059: LD_INT 5
4061: PUSH
4062: LD_INT 6
4064: PUSH
4065: LD_INT 7
4067: PUSH
4068: LD_INT 8
4070: PUSH
4071: LD_INT 11
4073: PUSH
4074: LD_INT 12
4076: PUSH
4077: LD_INT 15
4079: PUSH
4080: LD_INT 16
4082: PUSH
4083: LD_INT 20
4085: PUSH
4086: LD_INT 21
4088: PUSH
4089: LD_INT 22
4091: PUSH
4092: LD_INT 23
4094: PUSH
4095: LD_INT 25
4097: PUSH
4098: LD_INT 26
4100: PUSH
4101: LD_INT 28
4103: PUSH
4104: LD_INT 30
4106: PUSH
4107: LD_INT 31
4109: PUSH
4110: LD_INT 32
4112: PUSH
4113: LD_INT 36
4115: PUSH
4116: EMPTY
4117: LIST
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: PUSH
4139: LD_INT 101
4141: PUSH
4142: LD_INT 102
4144: PUSH
4145: LD_INT 103
4147: PUSH
4148: LD_INT 105
4150: PUSH
4151: LD_INT 106
4153: PUSH
4154: LD_INT 108
4156: PUSH
4157: LD_INT 109
4159: PUSH
4160: LD_INT 112
4162: PUSH
4163: LD_INT 114
4165: PUSH
4166: LD_INT 116
4168: PUSH
4169: LD_INT 117
4171: PUSH
4172: LD_INT 118
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: ST_TO_ADDR
4193: GO 6292
4195: LD_INT 10
4197: DOUBLE
4198: EQUAL
4199: IFTRUE 4203
4201: GO 4399
4203: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4204: LD_ADDR_VAR 0 2
4208: PUSH
4209: LD_INT 2
4211: PUSH
4212: LD_INT 4
4214: PUSH
4215: LD_INT 5
4217: PUSH
4218: LD_INT 6
4220: PUSH
4221: LD_INT 7
4223: PUSH
4224: LD_INT 8
4226: PUSH
4227: LD_INT 9
4229: PUSH
4230: LD_INT 10
4232: PUSH
4233: LD_INT 11
4235: PUSH
4236: LD_INT 12
4238: PUSH
4239: LD_INT 13
4241: PUSH
4242: LD_INT 14
4244: PUSH
4245: LD_INT 15
4247: PUSH
4248: LD_INT 16
4250: PUSH
4251: LD_INT 17
4253: PUSH
4254: LD_INT 18
4256: PUSH
4257: LD_INT 19
4259: PUSH
4260: LD_INT 20
4262: PUSH
4263: LD_INT 21
4265: PUSH
4266: LD_INT 22
4268: PUSH
4269: LD_INT 23
4271: PUSH
4272: LD_INT 24
4274: PUSH
4275: LD_INT 25
4277: PUSH
4278: LD_INT 26
4280: PUSH
4281: LD_INT 28
4283: PUSH
4284: LD_INT 30
4286: PUSH
4287: LD_INT 31
4289: PUSH
4290: LD_INT 32
4292: PUSH
4293: LD_INT 36
4295: PUSH
4296: EMPTY
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: PUSH
4327: LD_INT 101
4329: PUSH
4330: LD_INT 102
4332: PUSH
4333: LD_INT 103
4335: PUSH
4336: LD_INT 104
4338: PUSH
4339: LD_INT 105
4341: PUSH
4342: LD_INT 106
4344: PUSH
4345: LD_INT 107
4347: PUSH
4348: LD_INT 108
4350: PUSH
4351: LD_INT 109
4353: PUSH
4354: LD_INT 110
4356: PUSH
4357: LD_INT 111
4359: PUSH
4360: LD_INT 112
4362: PUSH
4363: LD_INT 114
4365: PUSH
4366: LD_INT 116
4368: PUSH
4369: LD_INT 117
4371: PUSH
4372: LD_INT 118
4374: PUSH
4375: EMPTY
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: ST_TO_ADDR
4397: GO 6292
4399: LD_INT 11
4401: DOUBLE
4402: EQUAL
4403: IFTRUE 4407
4405: GO 4611
4407: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4408: LD_ADDR_VAR 0 2
4412: PUSH
4413: LD_INT 2
4415: PUSH
4416: LD_INT 3
4418: PUSH
4419: LD_INT 4
4421: PUSH
4422: LD_INT 5
4424: PUSH
4425: LD_INT 6
4427: PUSH
4428: LD_INT 7
4430: PUSH
4431: LD_INT 8
4433: PUSH
4434: LD_INT 9
4436: PUSH
4437: LD_INT 10
4439: PUSH
4440: LD_INT 11
4442: PUSH
4443: LD_INT 12
4445: PUSH
4446: LD_INT 13
4448: PUSH
4449: LD_INT 14
4451: PUSH
4452: LD_INT 15
4454: PUSH
4455: LD_INT 16
4457: PUSH
4458: LD_INT 17
4460: PUSH
4461: LD_INT 18
4463: PUSH
4464: LD_INT 19
4466: PUSH
4467: LD_INT 20
4469: PUSH
4470: LD_INT 21
4472: PUSH
4473: LD_INT 22
4475: PUSH
4476: LD_INT 23
4478: PUSH
4479: LD_INT 24
4481: PUSH
4482: LD_INT 25
4484: PUSH
4485: LD_INT 26
4487: PUSH
4488: LD_INT 28
4490: PUSH
4491: LD_INT 30
4493: PUSH
4494: LD_INT 31
4496: PUSH
4497: LD_INT 32
4499: PUSH
4500: LD_INT 34
4502: PUSH
4503: LD_INT 36
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: LIST
4538: PUSH
4539: LD_INT 101
4541: PUSH
4542: LD_INT 102
4544: PUSH
4545: LD_INT 103
4547: PUSH
4548: LD_INT 104
4550: PUSH
4551: LD_INT 105
4553: PUSH
4554: LD_INT 106
4556: PUSH
4557: LD_INT 107
4559: PUSH
4560: LD_INT 108
4562: PUSH
4563: LD_INT 109
4565: PUSH
4566: LD_INT 110
4568: PUSH
4569: LD_INT 111
4571: PUSH
4572: LD_INT 112
4574: PUSH
4575: LD_INT 114
4577: PUSH
4578: LD_INT 116
4580: PUSH
4581: LD_INT 117
4583: PUSH
4584: LD_INT 118
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: ST_TO_ADDR
4609: GO 6292
4611: LD_INT 12
4613: DOUBLE
4614: EQUAL
4615: IFTRUE 4619
4617: GO 4839
4619: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
4620: LD_ADDR_VAR 0 2
4624: PUSH
4625: LD_INT 1
4627: PUSH
4628: LD_INT 2
4630: PUSH
4631: LD_INT 3
4633: PUSH
4634: LD_INT 4
4636: PUSH
4637: LD_INT 5
4639: PUSH
4640: LD_INT 6
4642: PUSH
4643: LD_INT 7
4645: PUSH
4646: LD_INT 8
4648: PUSH
4649: LD_INT 9
4651: PUSH
4652: LD_INT 10
4654: PUSH
4655: LD_INT 11
4657: PUSH
4658: LD_INT 12
4660: PUSH
4661: LD_INT 13
4663: PUSH
4664: LD_INT 14
4666: PUSH
4667: LD_INT 15
4669: PUSH
4670: LD_INT 16
4672: PUSH
4673: LD_INT 17
4675: PUSH
4676: LD_INT 18
4678: PUSH
4679: LD_INT 19
4681: PUSH
4682: LD_INT 20
4684: PUSH
4685: LD_INT 21
4687: PUSH
4688: LD_INT 22
4690: PUSH
4691: LD_INT 23
4693: PUSH
4694: LD_INT 24
4696: PUSH
4697: LD_INT 25
4699: PUSH
4700: LD_INT 26
4702: PUSH
4703: LD_INT 27
4705: PUSH
4706: LD_INT 28
4708: PUSH
4709: LD_INT 30
4711: PUSH
4712: LD_INT 31
4714: PUSH
4715: LD_INT 32
4717: PUSH
4718: LD_INT 33
4720: PUSH
4721: LD_INT 34
4723: PUSH
4724: LD_INT 36
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: PUSH
4763: LD_INT 101
4765: PUSH
4766: LD_INT 102
4768: PUSH
4769: LD_INT 103
4771: PUSH
4772: LD_INT 104
4774: PUSH
4775: LD_INT 105
4777: PUSH
4778: LD_INT 106
4780: PUSH
4781: LD_INT 107
4783: PUSH
4784: LD_INT 108
4786: PUSH
4787: LD_INT 109
4789: PUSH
4790: LD_INT 110
4792: PUSH
4793: LD_INT 111
4795: PUSH
4796: LD_INT 112
4798: PUSH
4799: LD_INT 113
4801: PUSH
4802: LD_INT 114
4804: PUSH
4805: LD_INT 116
4807: PUSH
4808: LD_INT 117
4810: PUSH
4811: LD_INT 118
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: ST_TO_ADDR
4837: GO 6292
4839: LD_INT 13
4841: DOUBLE
4842: EQUAL
4843: IFTRUE 4847
4845: GO 5055
4847: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
4848: LD_ADDR_VAR 0 2
4852: PUSH
4853: LD_INT 1
4855: PUSH
4856: LD_INT 2
4858: PUSH
4859: LD_INT 3
4861: PUSH
4862: LD_INT 4
4864: PUSH
4865: LD_INT 5
4867: PUSH
4868: LD_INT 8
4870: PUSH
4871: LD_INT 9
4873: PUSH
4874: LD_INT 10
4876: PUSH
4877: LD_INT 11
4879: PUSH
4880: LD_INT 12
4882: PUSH
4883: LD_INT 14
4885: PUSH
4886: LD_INT 15
4888: PUSH
4889: LD_INT 16
4891: PUSH
4892: LD_INT 17
4894: PUSH
4895: LD_INT 18
4897: PUSH
4898: LD_INT 19
4900: PUSH
4901: LD_INT 20
4903: PUSH
4904: LD_INT 21
4906: PUSH
4907: LD_INT 22
4909: PUSH
4910: LD_INT 23
4912: PUSH
4913: LD_INT 24
4915: PUSH
4916: LD_INT 25
4918: PUSH
4919: LD_INT 26
4921: PUSH
4922: LD_INT 27
4924: PUSH
4925: LD_INT 28
4927: PUSH
4928: LD_INT 30
4930: PUSH
4931: LD_INT 31
4933: PUSH
4934: LD_INT 32
4936: PUSH
4937: LD_INT 33
4939: PUSH
4940: LD_INT 34
4942: PUSH
4943: LD_INT 36
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: LIST
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: LIST
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: PUSH
4979: LD_INT 101
4981: PUSH
4982: LD_INT 102
4984: PUSH
4985: LD_INT 103
4987: PUSH
4988: LD_INT 104
4990: PUSH
4991: LD_INT 105
4993: PUSH
4994: LD_INT 106
4996: PUSH
4997: LD_INT 107
4999: PUSH
5000: LD_INT 108
5002: PUSH
5003: LD_INT 109
5005: PUSH
5006: LD_INT 110
5008: PUSH
5009: LD_INT 111
5011: PUSH
5012: LD_INT 112
5014: PUSH
5015: LD_INT 113
5017: PUSH
5018: LD_INT 114
5020: PUSH
5021: LD_INT 116
5023: PUSH
5024: LD_INT 117
5026: PUSH
5027: LD_INT 118
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: LIST
5048: PUSH
5049: EMPTY
5050: LIST
5051: LIST
5052: ST_TO_ADDR
5053: GO 6292
5055: LD_INT 14
5057: DOUBLE
5058: EQUAL
5059: IFTRUE 5063
5061: GO 5287
5063: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5064: LD_ADDR_VAR 0 2
5068: PUSH
5069: LD_INT 1
5071: PUSH
5072: LD_INT 2
5074: PUSH
5075: LD_INT 3
5077: PUSH
5078: LD_INT 4
5080: PUSH
5081: LD_INT 5
5083: PUSH
5084: LD_INT 6
5086: PUSH
5087: LD_INT 7
5089: PUSH
5090: LD_INT 8
5092: PUSH
5093: LD_INT 9
5095: PUSH
5096: LD_INT 10
5098: PUSH
5099: LD_INT 11
5101: PUSH
5102: LD_INT 12
5104: PUSH
5105: LD_INT 13
5107: PUSH
5108: LD_INT 14
5110: PUSH
5111: LD_INT 15
5113: PUSH
5114: LD_INT 16
5116: PUSH
5117: LD_INT 17
5119: PUSH
5120: LD_INT 18
5122: PUSH
5123: LD_INT 19
5125: PUSH
5126: LD_INT 20
5128: PUSH
5129: LD_INT 21
5131: PUSH
5132: LD_INT 22
5134: PUSH
5135: LD_INT 23
5137: PUSH
5138: LD_INT 24
5140: PUSH
5141: LD_INT 25
5143: PUSH
5144: LD_INT 26
5146: PUSH
5147: LD_INT 27
5149: PUSH
5150: LD_INT 28
5152: PUSH
5153: LD_INT 29
5155: PUSH
5156: LD_INT 30
5158: PUSH
5159: LD_INT 31
5161: PUSH
5162: LD_INT 32
5164: PUSH
5165: LD_INT 33
5167: PUSH
5168: LD_INT 34
5170: PUSH
5171: LD_INT 36
5173: PUSH
5174: EMPTY
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: LIST
5185: LIST
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: PUSH
5211: LD_INT 101
5213: PUSH
5214: LD_INT 102
5216: PUSH
5217: LD_INT 103
5219: PUSH
5220: LD_INT 104
5222: PUSH
5223: LD_INT 105
5225: PUSH
5226: LD_INT 106
5228: PUSH
5229: LD_INT 107
5231: PUSH
5232: LD_INT 108
5234: PUSH
5235: LD_INT 109
5237: PUSH
5238: LD_INT 110
5240: PUSH
5241: LD_INT 111
5243: PUSH
5244: LD_INT 112
5246: PUSH
5247: LD_INT 113
5249: PUSH
5250: LD_INT 114
5252: PUSH
5253: LD_INT 116
5255: PUSH
5256: LD_INT 117
5258: PUSH
5259: LD_INT 118
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: LIST
5266: LIST
5267: LIST
5268: LIST
5269: LIST
5270: LIST
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: ST_TO_ADDR
5285: GO 6292
5287: LD_INT 15
5289: DOUBLE
5290: EQUAL
5291: IFTRUE 5295
5293: GO 5519
5295: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5296: LD_ADDR_VAR 0 2
5300: PUSH
5301: LD_INT 1
5303: PUSH
5304: LD_INT 2
5306: PUSH
5307: LD_INT 3
5309: PUSH
5310: LD_INT 4
5312: PUSH
5313: LD_INT 5
5315: PUSH
5316: LD_INT 6
5318: PUSH
5319: LD_INT 7
5321: PUSH
5322: LD_INT 8
5324: PUSH
5325: LD_INT 9
5327: PUSH
5328: LD_INT 10
5330: PUSH
5331: LD_INT 11
5333: PUSH
5334: LD_INT 12
5336: PUSH
5337: LD_INT 13
5339: PUSH
5340: LD_INT 14
5342: PUSH
5343: LD_INT 15
5345: PUSH
5346: LD_INT 16
5348: PUSH
5349: LD_INT 17
5351: PUSH
5352: LD_INT 18
5354: PUSH
5355: LD_INT 19
5357: PUSH
5358: LD_INT 20
5360: PUSH
5361: LD_INT 21
5363: PUSH
5364: LD_INT 22
5366: PUSH
5367: LD_INT 23
5369: PUSH
5370: LD_INT 24
5372: PUSH
5373: LD_INT 25
5375: PUSH
5376: LD_INT 26
5378: PUSH
5379: LD_INT 27
5381: PUSH
5382: LD_INT 28
5384: PUSH
5385: LD_INT 29
5387: PUSH
5388: LD_INT 30
5390: PUSH
5391: LD_INT 31
5393: PUSH
5394: LD_INT 32
5396: PUSH
5397: LD_INT 33
5399: PUSH
5400: LD_INT 34
5402: PUSH
5403: LD_INT 36
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: LIST
5410: LIST
5411: LIST
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: PUSH
5443: LD_INT 101
5445: PUSH
5446: LD_INT 102
5448: PUSH
5449: LD_INT 103
5451: PUSH
5452: LD_INT 104
5454: PUSH
5455: LD_INT 105
5457: PUSH
5458: LD_INT 106
5460: PUSH
5461: LD_INT 107
5463: PUSH
5464: LD_INT 108
5466: PUSH
5467: LD_INT 109
5469: PUSH
5470: LD_INT 110
5472: PUSH
5473: LD_INT 111
5475: PUSH
5476: LD_INT 112
5478: PUSH
5479: LD_INT 113
5481: PUSH
5482: LD_INT 114
5484: PUSH
5485: LD_INT 116
5487: PUSH
5488: LD_INT 117
5490: PUSH
5491: LD_INT 118
5493: PUSH
5494: EMPTY
5495: LIST
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: LIST
5501: LIST
5502: LIST
5503: LIST
5504: LIST
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: LIST
5510: LIST
5511: LIST
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: ST_TO_ADDR
5517: GO 6292
5519: LD_INT 16
5521: DOUBLE
5522: EQUAL
5523: IFTRUE 5527
5525: GO 5663
5527: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
5528: LD_ADDR_VAR 0 2
5532: PUSH
5533: LD_INT 2
5535: PUSH
5536: LD_INT 4
5538: PUSH
5539: LD_INT 5
5541: PUSH
5542: LD_INT 7
5544: PUSH
5545: LD_INT 11
5547: PUSH
5548: LD_INT 12
5550: PUSH
5551: LD_INT 15
5553: PUSH
5554: LD_INT 16
5556: PUSH
5557: LD_INT 20
5559: PUSH
5560: LD_INT 21
5562: PUSH
5563: LD_INT 22
5565: PUSH
5566: LD_INT 23
5568: PUSH
5569: LD_INT 25
5571: PUSH
5572: LD_INT 26
5574: PUSH
5575: LD_INT 30
5577: PUSH
5578: LD_INT 31
5580: PUSH
5581: LD_INT 32
5583: PUSH
5584: LD_INT 33
5586: PUSH
5587: LD_INT 34
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: PUSH
5611: LD_INT 101
5613: PUSH
5614: LD_INT 102
5616: PUSH
5617: LD_INT 103
5619: PUSH
5620: LD_INT 106
5622: PUSH
5623: LD_INT 108
5625: PUSH
5626: LD_INT 112
5628: PUSH
5629: LD_INT 113
5631: PUSH
5632: LD_INT 114
5634: PUSH
5635: LD_INT 116
5637: PUSH
5638: LD_INT 117
5640: PUSH
5641: LD_INT 118
5643: PUSH
5644: EMPTY
5645: LIST
5646: LIST
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: LIST
5653: LIST
5654: LIST
5655: LIST
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: ST_TO_ADDR
5661: GO 6292
5663: LD_INT 17
5665: DOUBLE
5666: EQUAL
5667: IFTRUE 5671
5669: GO 5895
5671: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
5672: LD_ADDR_VAR 0 2
5676: PUSH
5677: LD_INT 1
5679: PUSH
5680: LD_INT 2
5682: PUSH
5683: LD_INT 3
5685: PUSH
5686: LD_INT 4
5688: PUSH
5689: LD_INT 5
5691: PUSH
5692: LD_INT 6
5694: PUSH
5695: LD_INT 7
5697: PUSH
5698: LD_INT 8
5700: PUSH
5701: LD_INT 9
5703: PUSH
5704: LD_INT 10
5706: PUSH
5707: LD_INT 11
5709: PUSH
5710: LD_INT 12
5712: PUSH
5713: LD_INT 13
5715: PUSH
5716: LD_INT 14
5718: PUSH
5719: LD_INT 15
5721: PUSH
5722: LD_INT 16
5724: PUSH
5725: LD_INT 17
5727: PUSH
5728: LD_INT 18
5730: PUSH
5731: LD_INT 19
5733: PUSH
5734: LD_INT 20
5736: PUSH
5737: LD_INT 21
5739: PUSH
5740: LD_INT 22
5742: PUSH
5743: LD_INT 23
5745: PUSH
5746: LD_INT 24
5748: PUSH
5749: LD_INT 25
5751: PUSH
5752: LD_INT 26
5754: PUSH
5755: LD_INT 27
5757: PUSH
5758: LD_INT 28
5760: PUSH
5761: LD_INT 29
5763: PUSH
5764: LD_INT 30
5766: PUSH
5767: LD_INT 31
5769: PUSH
5770: LD_INT 32
5772: PUSH
5773: LD_INT 33
5775: PUSH
5776: LD_INT 34
5778: PUSH
5779: LD_INT 36
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: LIST
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: LIST
5799: LIST
5800: LIST
5801: LIST
5802: LIST
5803: LIST
5804: LIST
5805: LIST
5806: LIST
5807: LIST
5808: LIST
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: LIST
5814: LIST
5815: LIST
5816: LIST
5817: LIST
5818: PUSH
5819: LD_INT 101
5821: PUSH
5822: LD_INT 102
5824: PUSH
5825: LD_INT 103
5827: PUSH
5828: LD_INT 104
5830: PUSH
5831: LD_INT 105
5833: PUSH
5834: LD_INT 106
5836: PUSH
5837: LD_INT 107
5839: PUSH
5840: LD_INT 108
5842: PUSH
5843: LD_INT 109
5845: PUSH
5846: LD_INT 110
5848: PUSH
5849: LD_INT 111
5851: PUSH
5852: LD_INT 112
5854: PUSH
5855: LD_INT 113
5857: PUSH
5858: LD_INT 114
5860: PUSH
5861: LD_INT 116
5863: PUSH
5864: LD_INT 117
5866: PUSH
5867: LD_INT 118
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: LIST
5878: LIST
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: ST_TO_ADDR
5893: GO 6292
5895: LD_INT 18
5897: DOUBLE
5898: EQUAL
5899: IFTRUE 5903
5901: GO 6051
5903: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
5904: LD_ADDR_VAR 0 2
5908: PUSH
5909: LD_INT 2
5911: PUSH
5912: LD_INT 4
5914: PUSH
5915: LD_INT 5
5917: PUSH
5918: LD_INT 7
5920: PUSH
5921: LD_INT 11
5923: PUSH
5924: LD_INT 12
5926: PUSH
5927: LD_INT 15
5929: PUSH
5930: LD_INT 16
5932: PUSH
5933: LD_INT 20
5935: PUSH
5936: LD_INT 21
5938: PUSH
5939: LD_INT 22
5941: PUSH
5942: LD_INT 23
5944: PUSH
5945: LD_INT 25
5947: PUSH
5948: LD_INT 26
5950: PUSH
5951: LD_INT 30
5953: PUSH
5954: LD_INT 31
5956: PUSH
5957: LD_INT 32
5959: PUSH
5960: LD_INT 33
5962: PUSH
5963: LD_INT 34
5965: PUSH
5966: LD_INT 35
5968: PUSH
5969: LD_INT 36
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: PUSH
5995: LD_INT 101
5997: PUSH
5998: LD_INT 102
6000: PUSH
6001: LD_INT 103
6003: PUSH
6004: LD_INT 106
6006: PUSH
6007: LD_INT 108
6009: PUSH
6010: LD_INT 112
6012: PUSH
6013: LD_INT 113
6015: PUSH
6016: LD_INT 114
6018: PUSH
6019: LD_INT 115
6021: PUSH
6022: LD_INT 116
6024: PUSH
6025: LD_INT 117
6027: PUSH
6028: LD_INT 118
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: ST_TO_ADDR
6049: GO 6292
6051: LD_INT 19
6053: DOUBLE
6054: EQUAL
6055: IFTRUE 6059
6057: GO 6291
6059: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6060: LD_ADDR_VAR 0 2
6064: PUSH
6065: LD_INT 1
6067: PUSH
6068: LD_INT 2
6070: PUSH
6071: LD_INT 3
6073: PUSH
6074: LD_INT 4
6076: PUSH
6077: LD_INT 5
6079: PUSH
6080: LD_INT 6
6082: PUSH
6083: LD_INT 7
6085: PUSH
6086: LD_INT 8
6088: PUSH
6089: LD_INT 9
6091: PUSH
6092: LD_INT 10
6094: PUSH
6095: LD_INT 11
6097: PUSH
6098: LD_INT 12
6100: PUSH
6101: LD_INT 13
6103: PUSH
6104: LD_INT 14
6106: PUSH
6107: LD_INT 15
6109: PUSH
6110: LD_INT 16
6112: PUSH
6113: LD_INT 17
6115: PUSH
6116: LD_INT 18
6118: PUSH
6119: LD_INT 19
6121: PUSH
6122: LD_INT 20
6124: PUSH
6125: LD_INT 21
6127: PUSH
6128: LD_INT 22
6130: PUSH
6131: LD_INT 23
6133: PUSH
6134: LD_INT 24
6136: PUSH
6137: LD_INT 25
6139: PUSH
6140: LD_INT 26
6142: PUSH
6143: LD_INT 27
6145: PUSH
6146: LD_INT 28
6148: PUSH
6149: LD_INT 29
6151: PUSH
6152: LD_INT 30
6154: PUSH
6155: LD_INT 31
6157: PUSH
6158: LD_INT 32
6160: PUSH
6161: LD_INT 33
6163: PUSH
6164: LD_INT 34
6166: PUSH
6167: LD_INT 35
6169: PUSH
6170: LD_INT 36
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: PUSH
6211: LD_INT 101
6213: PUSH
6214: LD_INT 102
6216: PUSH
6217: LD_INT 103
6219: PUSH
6220: LD_INT 104
6222: PUSH
6223: LD_INT 105
6225: PUSH
6226: LD_INT 106
6228: PUSH
6229: LD_INT 107
6231: PUSH
6232: LD_INT 108
6234: PUSH
6235: LD_INT 109
6237: PUSH
6238: LD_INT 110
6240: PUSH
6241: LD_INT 111
6243: PUSH
6244: LD_INT 112
6246: PUSH
6247: LD_INT 113
6249: PUSH
6250: LD_INT 114
6252: PUSH
6253: LD_INT 115
6255: PUSH
6256: LD_INT 116
6258: PUSH
6259: LD_INT 117
6261: PUSH
6262: LD_INT 118
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: LIST
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: ST_TO_ADDR
6289: GO 6292
6291: POP
// end else
6292: GO 6523
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6294: LD_ADDR_VAR 0 2
6298: PUSH
6299: LD_INT 1
6301: PUSH
6302: LD_INT 2
6304: PUSH
6305: LD_INT 3
6307: PUSH
6308: LD_INT 4
6310: PUSH
6311: LD_INT 5
6313: PUSH
6314: LD_INT 6
6316: PUSH
6317: LD_INT 7
6319: PUSH
6320: LD_INT 8
6322: PUSH
6323: LD_INT 9
6325: PUSH
6326: LD_INT 10
6328: PUSH
6329: LD_INT 11
6331: PUSH
6332: LD_INT 12
6334: PUSH
6335: LD_INT 13
6337: PUSH
6338: LD_INT 14
6340: PUSH
6341: LD_INT 15
6343: PUSH
6344: LD_INT 16
6346: PUSH
6347: LD_INT 17
6349: PUSH
6350: LD_INT 18
6352: PUSH
6353: LD_INT 19
6355: PUSH
6356: LD_INT 20
6358: PUSH
6359: LD_INT 21
6361: PUSH
6362: LD_INT 22
6364: PUSH
6365: LD_INT 23
6367: PUSH
6368: LD_INT 24
6370: PUSH
6371: LD_INT 25
6373: PUSH
6374: LD_INT 26
6376: PUSH
6377: LD_INT 27
6379: PUSH
6380: LD_INT 28
6382: PUSH
6383: LD_INT 29
6385: PUSH
6386: LD_INT 30
6388: PUSH
6389: LD_INT 31
6391: PUSH
6392: LD_INT 32
6394: PUSH
6395: LD_INT 33
6397: PUSH
6398: LD_INT 34
6400: PUSH
6401: LD_INT 35
6403: PUSH
6404: LD_INT 36
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: PUSH
6445: LD_INT 101
6447: PUSH
6448: LD_INT 102
6450: PUSH
6451: LD_INT 103
6453: PUSH
6454: LD_INT 104
6456: PUSH
6457: LD_INT 105
6459: PUSH
6460: LD_INT 106
6462: PUSH
6463: LD_INT 107
6465: PUSH
6466: LD_INT 108
6468: PUSH
6469: LD_INT 109
6471: PUSH
6472: LD_INT 110
6474: PUSH
6475: LD_INT 111
6477: PUSH
6478: LD_INT 112
6480: PUSH
6481: LD_INT 113
6483: PUSH
6484: LD_INT 114
6486: PUSH
6487: LD_INT 115
6489: PUSH
6490: LD_INT 116
6492: PUSH
6493: LD_INT 117
6495: PUSH
6496: LD_INT 118
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: ST_TO_ADDR
// if result then
6523: LD_VAR 0 2
6527: IFFALSE 7313
// begin normal :=  ;
6529: LD_ADDR_VAR 0 5
6533: PUSH
6534: LD_STRING 
6536: ST_TO_ADDR
// hardcore :=  ;
6537: LD_ADDR_VAR 0 6
6541: PUSH
6542: LD_STRING 
6544: ST_TO_ADDR
// active :=  ;
6545: LD_ADDR_VAR 0 7
6549: PUSH
6550: LD_STRING 
6552: ST_TO_ADDR
// for i = 1 to normalCounter do
6553: LD_ADDR_VAR 0 8
6557: PUSH
6558: DOUBLE
6559: LD_INT 1
6561: DEC
6562: ST_TO_ADDR
6563: LD_EXP 3
6567: PUSH
6568: FOR_TO
6569: IFFALSE 6670
// begin tmp := 0 ;
6571: LD_ADDR_VAR 0 3
6575: PUSH
6576: LD_STRING 0
6578: ST_TO_ADDR
// if result [ 1 ] then
6579: LD_VAR 0 2
6583: PUSH
6584: LD_INT 1
6586: ARRAY
6587: IFFALSE 6652
// if result [ 1 ] [ 1 ] = i then
6589: LD_VAR 0 2
6593: PUSH
6594: LD_INT 1
6596: ARRAY
6597: PUSH
6598: LD_INT 1
6600: ARRAY
6601: PUSH
6602: LD_VAR 0 8
6606: EQUAL
6607: IFFALSE 6652
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6609: LD_ADDR_VAR 0 2
6613: PUSH
6614: LD_VAR 0 2
6618: PPUSH
6619: LD_INT 1
6621: PPUSH
6622: LD_VAR 0 2
6626: PUSH
6627: LD_INT 1
6629: ARRAY
6630: PPUSH
6631: LD_INT 1
6633: PPUSH
6634: CALL_OW 3
6638: PPUSH
6639: CALL_OW 1
6643: ST_TO_ADDR
// tmp := 1 ;
6644: LD_ADDR_VAR 0 3
6648: PUSH
6649: LD_STRING 1
6651: ST_TO_ADDR
// end ; normal := normal & tmp ;
6652: LD_ADDR_VAR 0 5
6656: PUSH
6657: LD_VAR 0 5
6661: PUSH
6662: LD_VAR 0 3
6666: STR
6667: ST_TO_ADDR
// end ;
6668: GO 6568
6670: POP
6671: POP
// for i = 1 to hardcoreCounter do
6672: LD_ADDR_VAR 0 8
6676: PUSH
6677: DOUBLE
6678: LD_INT 1
6680: DEC
6681: ST_TO_ADDR
6682: LD_EXP 4
6686: PUSH
6687: FOR_TO
6688: IFFALSE 6793
// begin tmp := 0 ;
6690: LD_ADDR_VAR 0 3
6694: PUSH
6695: LD_STRING 0
6697: ST_TO_ADDR
// if result [ 2 ] then
6698: LD_VAR 0 2
6702: PUSH
6703: LD_INT 2
6705: ARRAY
6706: IFFALSE 6775
// if result [ 2 ] [ 1 ] = 100 + i then
6708: LD_VAR 0 2
6712: PUSH
6713: LD_INT 2
6715: ARRAY
6716: PUSH
6717: LD_INT 1
6719: ARRAY
6720: PUSH
6721: LD_INT 100
6723: PUSH
6724: LD_VAR 0 8
6728: PLUS
6729: EQUAL
6730: IFFALSE 6775
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6732: LD_ADDR_VAR 0 2
6736: PUSH
6737: LD_VAR 0 2
6741: PPUSH
6742: LD_INT 2
6744: PPUSH
6745: LD_VAR 0 2
6749: PUSH
6750: LD_INT 2
6752: ARRAY
6753: PPUSH
6754: LD_INT 1
6756: PPUSH
6757: CALL_OW 3
6761: PPUSH
6762: CALL_OW 1
6766: ST_TO_ADDR
// tmp := 1 ;
6767: LD_ADDR_VAR 0 3
6771: PUSH
6772: LD_STRING 1
6774: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6775: LD_ADDR_VAR 0 6
6779: PUSH
6780: LD_VAR 0 6
6784: PUSH
6785: LD_VAR 0 3
6789: STR
6790: ST_TO_ADDR
// end ;
6791: GO 6687
6793: POP
6794: POP
// if isGameLoad then
6795: LD_VAR 0 1
6799: IFFALSE 7274
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
6801: LD_ADDR_VAR 0 4
6805: PUSH
6806: LD_EXP 7
6810: PUSH
6811: LD_EXP 6
6815: PUSH
6816: LD_EXP 8
6820: PUSH
6821: LD_EXP 5
6825: PUSH
6826: LD_EXP 9
6830: PUSH
6831: LD_EXP 10
6835: PUSH
6836: LD_EXP 11
6840: PUSH
6841: LD_EXP 12
6845: PUSH
6846: LD_EXP 13
6850: PUSH
6851: LD_EXP 14
6855: PUSH
6856: LD_EXP 15
6860: PUSH
6861: LD_EXP 16
6865: PUSH
6866: LD_EXP 17
6870: PUSH
6871: LD_EXP 18
6875: PUSH
6876: LD_EXP 26
6880: PUSH
6881: LD_EXP 27
6885: PUSH
6886: LD_EXP 28
6890: PUSH
6891: LD_EXP 29
6895: PUSH
6896: LD_EXP 31
6900: PUSH
6901: LD_EXP 32
6905: PUSH
6906: LD_EXP 33
6910: PUSH
6911: LD_EXP 36
6915: PUSH
6916: LD_EXP 38
6920: PUSH
6921: LD_EXP 39
6925: PUSH
6926: LD_EXP 40
6930: PUSH
6931: LD_EXP 42
6935: PUSH
6936: LD_EXP 43
6940: PUSH
6941: LD_EXP 46
6945: PUSH
6946: LD_EXP 47
6950: PUSH
6951: LD_EXP 48
6955: PUSH
6956: LD_EXP 49
6960: PUSH
6961: LD_EXP 50
6965: PUSH
6966: LD_EXP 51
6970: PUSH
6971: LD_EXP 52
6975: PUSH
6976: LD_EXP 53
6980: PUSH
6981: LD_EXP 54
6985: PUSH
6986: LD_EXP 19
6990: PUSH
6991: LD_EXP 20
6995: PUSH
6996: LD_EXP 23
7000: PUSH
7001: LD_EXP 24
7005: PUSH
7006: LD_EXP 25
7010: PUSH
7011: LD_EXP 21
7015: PUSH
7016: LD_EXP 22
7020: PUSH
7021: LD_EXP 30
7025: PUSH
7026: LD_EXP 34
7030: PUSH
7031: LD_EXP 35
7035: PUSH
7036: LD_EXP 37
7040: PUSH
7041: LD_EXP 41
7045: PUSH
7046: LD_EXP 44
7050: PUSH
7051: LD_EXP 45
7055: PUSH
7056: LD_EXP 55
7060: PUSH
7061: LD_EXP 56
7065: PUSH
7066: LD_EXP 57
7070: PUSH
7071: LD_EXP 58
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: ST_TO_ADDR
// tmp :=  ;
7132: LD_ADDR_VAR 0 3
7136: PUSH
7137: LD_STRING 
7139: ST_TO_ADDR
// for i = 1 to normalCounter do
7140: LD_ADDR_VAR 0 8
7144: PUSH
7145: DOUBLE
7146: LD_INT 1
7148: DEC
7149: ST_TO_ADDR
7150: LD_EXP 3
7154: PUSH
7155: FOR_TO
7156: IFFALSE 7192
// begin if flags [ i ] then
7158: LD_VAR 0 4
7162: PUSH
7163: LD_VAR 0 8
7167: ARRAY
7168: IFFALSE 7190
// tmp := tmp & i & ; ;
7170: LD_ADDR_VAR 0 3
7174: PUSH
7175: LD_VAR 0 3
7179: PUSH
7180: LD_VAR 0 8
7184: STR
7185: PUSH
7186: LD_STRING ;
7188: STR
7189: ST_TO_ADDR
// end ;
7190: GO 7155
7192: POP
7193: POP
// for i = 1 to hardcoreCounter do
7194: LD_ADDR_VAR 0 8
7198: PUSH
7199: DOUBLE
7200: LD_INT 1
7202: DEC
7203: ST_TO_ADDR
7204: LD_EXP 4
7208: PUSH
7209: FOR_TO
7210: IFFALSE 7256
// begin if flags [ normalCounter + i ] then
7212: LD_VAR 0 4
7216: PUSH
7217: LD_EXP 3
7221: PUSH
7222: LD_VAR 0 8
7226: PLUS
7227: ARRAY
7228: IFFALSE 7254
// tmp := tmp & ( 100 + i ) & ; ;
7230: LD_ADDR_VAR 0 3
7234: PUSH
7235: LD_VAR 0 3
7239: PUSH
7240: LD_INT 100
7242: PUSH
7243: LD_VAR 0 8
7247: PLUS
7248: STR
7249: PUSH
7250: LD_STRING ;
7252: STR
7253: ST_TO_ADDR
// end ;
7254: GO 7209
7256: POP
7257: POP
// if tmp then
7258: LD_VAR 0 3
7262: IFFALSE 7274
// active := tmp ;
7264: LD_ADDR_VAR 0 7
7268: PUSH
7269: LD_VAR 0 3
7273: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7274: LD_STRING getStreamItemsFromMission("
7276: PUSH
7277: LD_VAR 0 5
7281: STR
7282: PUSH
7283: LD_STRING ","
7285: STR
7286: PUSH
7287: LD_VAR 0 6
7291: STR
7292: PUSH
7293: LD_STRING ","
7295: STR
7296: PUSH
7297: LD_VAR 0 7
7301: STR
7302: PUSH
7303: LD_STRING ")
7305: STR
7306: PPUSH
7307: CALL_OW 559
// end else
7311: GO 7320
// ToLua ( getStreamItemsFromMission("","","") ) ;
7313: LD_STRING getStreamItemsFromMission("","","")
7315: PPUSH
7316: CALL_OW 559
// end ;
7320: LD_VAR 0 2
7324: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7325: LD_EXP 2
7329: PUSH
7330: LD_EXP 7
7334: AND
7335: IFFALSE 7459
7337: GO 7339
7339: DISABLE
7340: LD_INT 0
7342: PPUSH
7343: PPUSH
// begin enable ;
7344: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7345: LD_ADDR_VAR 0 2
7349: PUSH
7350: LD_INT 22
7352: PUSH
7353: LD_OWVAR 2
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PUSH
7362: LD_INT 2
7364: PUSH
7365: LD_INT 34
7367: PUSH
7368: LD_INT 7
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PUSH
7375: LD_INT 34
7377: PUSH
7378: LD_INT 45
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PUSH
7385: LD_INT 34
7387: PUSH
7388: LD_INT 28
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: PUSH
7395: LD_INT 34
7397: PUSH
7398: LD_INT 47
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PPUSH
7416: CALL_OW 69
7420: ST_TO_ADDR
// if not tmp then
7421: LD_VAR 0 2
7425: NOT
7426: IFFALSE 7430
// exit ;
7428: GO 7459
// for i in tmp do
7430: LD_ADDR_VAR 0 1
7434: PUSH
7435: LD_VAR 0 2
7439: PUSH
7440: FOR_IN
7441: IFFALSE 7457
// begin SetLives ( i , 0 ) ;
7443: LD_VAR 0 1
7447: PPUSH
7448: LD_INT 0
7450: PPUSH
7451: CALL_OW 234
// end ;
7455: GO 7440
7457: POP
7458: POP
// end ;
7459: PPOPN 2
7461: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7462: LD_EXP 2
7466: PUSH
7467: LD_EXP 8
7471: AND
7472: IFFALSE 7556
7474: GO 7476
7476: DISABLE
7477: LD_INT 0
7479: PPUSH
7480: PPUSH
// begin enable ;
7481: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7482: LD_ADDR_VAR 0 2
7486: PUSH
7487: LD_INT 22
7489: PUSH
7490: LD_OWVAR 2
7494: PUSH
7495: EMPTY
7496: LIST
7497: LIST
7498: PUSH
7499: LD_INT 32
7501: PUSH
7502: LD_INT 3
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: PPUSH
7513: CALL_OW 69
7517: ST_TO_ADDR
// if not tmp then
7518: LD_VAR 0 2
7522: NOT
7523: IFFALSE 7527
// exit ;
7525: GO 7556
// for i in tmp do
7527: LD_ADDR_VAR 0 1
7531: PUSH
7532: LD_VAR 0 2
7536: PUSH
7537: FOR_IN
7538: IFFALSE 7554
// begin SetLives ( i , 0 ) ;
7540: LD_VAR 0 1
7544: PPUSH
7545: LD_INT 0
7547: PPUSH
7548: CALL_OW 234
// end ;
7552: GO 7537
7554: POP
7555: POP
// end ;
7556: PPOPN 2
7558: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7559: LD_EXP 2
7563: PUSH
7564: LD_EXP 5
7568: AND
7569: IFFALSE 7662
7571: GO 7573
7573: DISABLE
7574: LD_INT 0
7576: PPUSH
// begin enable ;
7577: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7578: LD_ADDR_VAR 0 1
7582: PUSH
7583: LD_INT 22
7585: PUSH
7586: LD_OWVAR 2
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: PUSH
7595: LD_INT 2
7597: PUSH
7598: LD_INT 25
7600: PUSH
7601: LD_INT 5
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: LD_INT 25
7610: PUSH
7611: LD_INT 9
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PUSH
7618: LD_INT 25
7620: PUSH
7621: LD_INT 8
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PPUSH
7638: CALL_OW 69
7642: PUSH
7643: FOR_IN
7644: IFFALSE 7660
// begin SetClass ( i , 1 ) ;
7646: LD_VAR 0 1
7650: PPUSH
7651: LD_INT 1
7653: PPUSH
7654: CALL_OW 336
// end ;
7658: GO 7643
7660: POP
7661: POP
// end ;
7662: PPOPN 1
7664: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7665: LD_EXP 2
7669: PUSH
7670: LD_EXP 6
7674: AND
7675: PUSH
7676: LD_OWVAR 65
7680: PUSH
7681: LD_INT 7
7683: LESS
7684: AND
7685: IFFALSE 7699
7687: GO 7689
7689: DISABLE
// begin enable ;
7690: ENABLE
// game_speed := 7 ;
7691: LD_ADDR_OWVAR 65
7695: PUSH
7696: LD_INT 7
7698: ST_TO_ADDR
// end ;
7699: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7700: LD_EXP 2
7704: PUSH
7705: LD_EXP 9
7709: AND
7710: IFFALSE 7912
7712: GO 7714
7714: DISABLE
7715: LD_INT 0
7717: PPUSH
7718: PPUSH
7719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7720: LD_ADDR_VAR 0 3
7724: PUSH
7725: LD_INT 81
7727: PUSH
7728: LD_OWVAR 2
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: LD_INT 21
7739: PUSH
7740: LD_INT 1
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PPUSH
7751: CALL_OW 69
7755: ST_TO_ADDR
// if not tmp then
7756: LD_VAR 0 3
7760: NOT
7761: IFFALSE 7765
// exit ;
7763: GO 7912
// if tmp > 5 then
7765: LD_VAR 0 3
7769: PUSH
7770: LD_INT 5
7772: GREATER
7773: IFFALSE 7785
// k := 5 else
7775: LD_ADDR_VAR 0 2
7779: PUSH
7780: LD_INT 5
7782: ST_TO_ADDR
7783: GO 7795
// k := tmp ;
7785: LD_ADDR_VAR 0 2
7789: PUSH
7790: LD_VAR 0 3
7794: ST_TO_ADDR
// for i := 1 to k do
7795: LD_ADDR_VAR 0 1
7799: PUSH
7800: DOUBLE
7801: LD_INT 1
7803: DEC
7804: ST_TO_ADDR
7805: LD_VAR 0 2
7809: PUSH
7810: FOR_TO
7811: IFFALSE 7910
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7813: LD_VAR 0 3
7817: PUSH
7818: LD_VAR 0 1
7822: ARRAY
7823: PPUSH
7824: LD_VAR 0 1
7828: PUSH
7829: LD_INT 4
7831: MOD
7832: PUSH
7833: LD_INT 1
7835: PLUS
7836: PPUSH
7837: CALL_OW 259
7841: PUSH
7842: LD_INT 10
7844: LESS
7845: IFFALSE 7908
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7847: LD_VAR 0 3
7851: PUSH
7852: LD_VAR 0 1
7856: ARRAY
7857: PPUSH
7858: LD_VAR 0 1
7862: PUSH
7863: LD_INT 4
7865: MOD
7866: PUSH
7867: LD_INT 1
7869: PLUS
7870: PPUSH
7871: LD_VAR 0 3
7875: PUSH
7876: LD_VAR 0 1
7880: ARRAY
7881: PPUSH
7882: LD_VAR 0 1
7886: PUSH
7887: LD_INT 4
7889: MOD
7890: PUSH
7891: LD_INT 1
7893: PLUS
7894: PPUSH
7895: CALL_OW 259
7899: PUSH
7900: LD_INT 1
7902: PLUS
7903: PPUSH
7904: CALL_OW 237
7908: GO 7810
7910: POP
7911: POP
// end ;
7912: PPOPN 3
7914: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
7915: LD_EXP 2
7919: PUSH
7920: LD_EXP 10
7924: AND
7925: IFFALSE 7945
7927: GO 7929
7929: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
7930: LD_INT 4
7932: PPUSH
7933: LD_OWVAR 2
7937: PPUSH
7938: LD_INT 0
7940: PPUSH
7941: CALL_OW 324
7945: END
// every 0 0$1 trigger StreamModeActive and sShovel do
7946: LD_EXP 2
7950: PUSH
7951: LD_EXP 39
7955: AND
7956: IFFALSE 7976
7958: GO 7960
7960: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
7961: LD_INT 19
7963: PPUSH
7964: LD_OWVAR 2
7968: PPUSH
7969: LD_INT 0
7971: PPUSH
7972: CALL_OW 324
7976: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
7977: LD_EXP 2
7981: PUSH
7982: LD_EXP 11
7986: AND
7987: IFFALSE 8089
7989: GO 7991
7991: DISABLE
7992: LD_INT 0
7994: PPUSH
7995: PPUSH
// begin enable ;
7996: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
7997: LD_ADDR_VAR 0 2
8001: PUSH
8002: LD_INT 22
8004: PUSH
8005: LD_OWVAR 2
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: PUSH
8014: LD_INT 2
8016: PUSH
8017: LD_INT 34
8019: PUSH
8020: LD_INT 11
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PUSH
8027: LD_INT 34
8029: PUSH
8030: LD_INT 30
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: LIST
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PPUSH
8046: CALL_OW 69
8050: ST_TO_ADDR
// if not tmp then
8051: LD_VAR 0 2
8055: NOT
8056: IFFALSE 8060
// exit ;
8058: GO 8089
// for i in tmp do
8060: LD_ADDR_VAR 0 1
8064: PUSH
8065: LD_VAR 0 2
8069: PUSH
8070: FOR_IN
8071: IFFALSE 8087
// begin SetLives ( i , 0 ) ;
8073: LD_VAR 0 1
8077: PPUSH
8078: LD_INT 0
8080: PPUSH
8081: CALL_OW 234
// end ;
8085: GO 8070
8087: POP
8088: POP
// end ;
8089: PPOPN 2
8091: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8092: LD_EXP 2
8096: PUSH
8097: LD_EXP 12
8101: AND
8102: IFFALSE 8122
8104: GO 8106
8106: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8107: LD_INT 32
8109: PPUSH
8110: LD_OWVAR 2
8114: PPUSH
8115: LD_INT 0
8117: PPUSH
8118: CALL_OW 324
8122: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8123: LD_EXP 2
8127: PUSH
8128: LD_EXP 13
8132: AND
8133: IFFALSE 8314
8135: GO 8137
8137: DISABLE
8138: LD_INT 0
8140: PPUSH
8141: PPUSH
8142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8143: LD_ADDR_VAR 0 2
8147: PUSH
8148: LD_INT 22
8150: PUSH
8151: LD_OWVAR 2
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: PUSH
8160: LD_INT 33
8162: PUSH
8163: LD_INT 3
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: PPUSH
8174: CALL_OW 69
8178: ST_TO_ADDR
// if not tmp then
8179: LD_VAR 0 2
8183: NOT
8184: IFFALSE 8188
// exit ;
8186: GO 8314
// side := 0 ;
8188: LD_ADDR_VAR 0 3
8192: PUSH
8193: LD_INT 0
8195: ST_TO_ADDR
// for i := 1 to 8 do
8196: LD_ADDR_VAR 0 1
8200: PUSH
8201: DOUBLE
8202: LD_INT 1
8204: DEC
8205: ST_TO_ADDR
8206: LD_INT 8
8208: PUSH
8209: FOR_TO
8210: IFFALSE 8258
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8212: LD_OWVAR 2
8216: PUSH
8217: LD_VAR 0 1
8221: NONEQUAL
8222: PUSH
8223: LD_OWVAR 2
8227: PPUSH
8228: LD_VAR 0 1
8232: PPUSH
8233: CALL_OW 81
8237: PUSH
8238: LD_INT 2
8240: EQUAL
8241: AND
8242: IFFALSE 8256
// begin side := i ;
8244: LD_ADDR_VAR 0 3
8248: PUSH
8249: LD_VAR 0 1
8253: ST_TO_ADDR
// break ;
8254: GO 8258
// end ;
8256: GO 8209
8258: POP
8259: POP
// if not side then
8260: LD_VAR 0 3
8264: NOT
8265: IFFALSE 8269
// exit ;
8267: GO 8314
// for i := 1 to tmp do
8269: LD_ADDR_VAR 0 1
8273: PUSH
8274: DOUBLE
8275: LD_INT 1
8277: DEC
8278: ST_TO_ADDR
8279: LD_VAR 0 2
8283: PUSH
8284: FOR_TO
8285: IFFALSE 8312
// if Prob ( 60 ) then
8287: LD_INT 60
8289: PPUSH
8290: CALL_OW 13
8294: IFFALSE 8310
// SetSide ( i , side ) ;
8296: LD_VAR 0 1
8300: PPUSH
8301: LD_VAR 0 3
8305: PPUSH
8306: CALL_OW 235
8310: GO 8284
8312: POP
8313: POP
// end ;
8314: PPOPN 3
8316: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8317: LD_EXP 2
8321: PUSH
8322: LD_EXP 15
8326: AND
8327: IFFALSE 8446
8329: GO 8331
8331: DISABLE
8332: LD_INT 0
8334: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8335: LD_ADDR_VAR 0 1
8339: PUSH
8340: LD_INT 22
8342: PUSH
8343: LD_OWVAR 2
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: PUSH
8352: LD_INT 21
8354: PUSH
8355: LD_INT 1
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PUSH
8362: LD_INT 3
8364: PUSH
8365: LD_INT 23
8367: PUSH
8368: LD_INT 0
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: LIST
8383: PPUSH
8384: CALL_OW 69
8388: PUSH
8389: FOR_IN
8390: IFFALSE 8444
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8392: LD_VAR 0 1
8396: PPUSH
8397: CALL_OW 257
8401: PUSH
8402: LD_INT 1
8404: PUSH
8405: LD_INT 2
8407: PUSH
8408: LD_INT 3
8410: PUSH
8411: LD_INT 4
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: IN
8420: IFFALSE 8442
// SetClass ( un , rand ( 1 , 4 ) ) ;
8422: LD_VAR 0 1
8426: PPUSH
8427: LD_INT 1
8429: PPUSH
8430: LD_INT 4
8432: PPUSH
8433: CALL_OW 12
8437: PPUSH
8438: CALL_OW 336
8442: GO 8389
8444: POP
8445: POP
// end ;
8446: PPOPN 1
8448: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8449: LD_EXP 2
8453: PUSH
8454: LD_EXP 14
8458: AND
8459: IFFALSE 8538
8461: GO 8463
8463: DISABLE
8464: LD_INT 0
8466: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8467: LD_ADDR_VAR 0 1
8471: PUSH
8472: LD_INT 22
8474: PUSH
8475: LD_OWVAR 2
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: PUSH
8484: LD_INT 21
8486: PUSH
8487: LD_INT 3
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: PPUSH
8498: CALL_OW 69
8502: ST_TO_ADDR
// if not tmp then
8503: LD_VAR 0 1
8507: NOT
8508: IFFALSE 8512
// exit ;
8510: GO 8538
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8512: LD_VAR 0 1
8516: PUSH
8517: LD_INT 1
8519: PPUSH
8520: LD_VAR 0 1
8524: PPUSH
8525: CALL_OW 12
8529: ARRAY
8530: PPUSH
8531: LD_INT 100
8533: PPUSH
8534: CALL_OW 234
// end ;
8538: PPOPN 1
8540: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8541: LD_EXP 2
8545: PUSH
8546: LD_EXP 16
8550: AND
8551: IFFALSE 8649
8553: GO 8555
8555: DISABLE
8556: LD_INT 0
8558: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8559: LD_ADDR_VAR 0 1
8563: PUSH
8564: LD_INT 22
8566: PUSH
8567: LD_OWVAR 2
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: PUSH
8576: LD_INT 21
8578: PUSH
8579: LD_INT 1
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PPUSH
8590: CALL_OW 69
8594: ST_TO_ADDR
// if not tmp then
8595: LD_VAR 0 1
8599: NOT
8600: IFFALSE 8604
// exit ;
8602: GO 8649
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8604: LD_VAR 0 1
8608: PUSH
8609: LD_INT 1
8611: PPUSH
8612: LD_VAR 0 1
8616: PPUSH
8617: CALL_OW 12
8621: ARRAY
8622: PPUSH
8623: LD_INT 1
8625: PPUSH
8626: LD_INT 4
8628: PPUSH
8629: CALL_OW 12
8633: PPUSH
8634: LD_INT 3000
8636: PPUSH
8637: LD_INT 9000
8639: PPUSH
8640: CALL_OW 12
8644: PPUSH
8645: CALL_OW 492
// end ;
8649: PPOPN 1
8651: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8652: LD_EXP 2
8656: PUSH
8657: LD_EXP 17
8661: AND
8662: IFFALSE 8682
8664: GO 8666
8666: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8667: LD_INT 1
8669: PPUSH
8670: LD_OWVAR 2
8674: PPUSH
8675: LD_INT 0
8677: PPUSH
8678: CALL_OW 324
8682: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8683: LD_EXP 2
8687: PUSH
8688: LD_EXP 18
8692: AND
8693: IFFALSE 8776
8695: GO 8697
8697: DISABLE
8698: LD_INT 0
8700: PPUSH
8701: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8702: LD_ADDR_VAR 0 2
8706: PUSH
8707: LD_INT 22
8709: PUSH
8710: LD_OWVAR 2
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: PUSH
8719: LD_INT 21
8721: PUSH
8722: LD_INT 3
8724: PUSH
8725: EMPTY
8726: LIST
8727: LIST
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PPUSH
8733: CALL_OW 69
8737: ST_TO_ADDR
// if not tmp then
8738: LD_VAR 0 2
8742: NOT
8743: IFFALSE 8747
// exit ;
8745: GO 8776
// for i in tmp do
8747: LD_ADDR_VAR 0 1
8751: PUSH
8752: LD_VAR 0 2
8756: PUSH
8757: FOR_IN
8758: IFFALSE 8774
// SetBLevel ( i , 10 ) ;
8760: LD_VAR 0 1
8764: PPUSH
8765: LD_INT 10
8767: PPUSH
8768: CALL_OW 241
8772: GO 8757
8774: POP
8775: POP
// end ;
8776: PPOPN 2
8778: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8779: LD_EXP 2
8783: PUSH
8784: LD_EXP 19
8788: AND
8789: IFFALSE 8900
8791: GO 8793
8793: DISABLE
8794: LD_INT 0
8796: PPUSH
8797: PPUSH
8798: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8799: LD_ADDR_VAR 0 3
8803: PUSH
8804: LD_INT 22
8806: PUSH
8807: LD_OWVAR 2
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PUSH
8816: LD_INT 25
8818: PUSH
8819: LD_INT 1
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PPUSH
8830: CALL_OW 69
8834: ST_TO_ADDR
// if not tmp then
8835: LD_VAR 0 3
8839: NOT
8840: IFFALSE 8844
// exit ;
8842: GO 8900
// un := tmp [ rand ( 1 , tmp ) ] ;
8844: LD_ADDR_VAR 0 2
8848: PUSH
8849: LD_VAR 0 3
8853: PUSH
8854: LD_INT 1
8856: PPUSH
8857: LD_VAR 0 3
8861: PPUSH
8862: CALL_OW 12
8866: ARRAY
8867: ST_TO_ADDR
// if Crawls ( un ) then
8868: LD_VAR 0 2
8872: PPUSH
8873: CALL_OW 318
8877: IFFALSE 8888
// ComWalk ( un ) ;
8879: LD_VAR 0 2
8883: PPUSH
8884: CALL_OW 138
// SetClass ( un , class_sniper ) ;
8888: LD_VAR 0 2
8892: PPUSH
8893: LD_INT 5
8895: PPUSH
8896: CALL_OW 336
// end ;
8900: PPOPN 3
8902: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
8903: LD_EXP 2
8907: PUSH
8908: LD_EXP 20
8912: AND
8913: PUSH
8914: LD_OWVAR 67
8918: PUSH
8919: LD_INT 4
8921: LESS
8922: AND
8923: IFFALSE 8942
8925: GO 8927
8927: DISABLE
// begin Difficulty := Difficulty + 1 ;
8928: LD_ADDR_OWVAR 67
8932: PUSH
8933: LD_OWVAR 67
8937: PUSH
8938: LD_INT 1
8940: PLUS
8941: ST_TO_ADDR
// end ;
8942: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
8943: LD_EXP 2
8947: PUSH
8948: LD_EXP 21
8952: AND
8953: IFFALSE 9056
8955: GO 8957
8957: DISABLE
8958: LD_INT 0
8960: PPUSH
// begin for i := 1 to 5 do
8961: LD_ADDR_VAR 0 1
8965: PUSH
8966: DOUBLE
8967: LD_INT 1
8969: DEC
8970: ST_TO_ADDR
8971: LD_INT 5
8973: PUSH
8974: FOR_TO
8975: IFFALSE 9054
// begin uc_nation := nation_nature ;
8977: LD_ADDR_OWVAR 21
8981: PUSH
8982: LD_INT 0
8984: ST_TO_ADDR
// uc_side := 0 ;
8985: LD_ADDR_OWVAR 20
8989: PUSH
8990: LD_INT 0
8992: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8993: LD_ADDR_OWVAR 29
8997: PUSH
8998: LD_INT 12
9000: PUSH
9001: LD_INT 12
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: ST_TO_ADDR
// hc_agressivity := 20 ;
9008: LD_ADDR_OWVAR 35
9012: PUSH
9013: LD_INT 20
9015: ST_TO_ADDR
// hc_class := class_tiger ;
9016: LD_ADDR_OWVAR 28
9020: PUSH
9021: LD_INT 14
9023: ST_TO_ADDR
// hc_gallery :=  ;
9024: LD_ADDR_OWVAR 33
9028: PUSH
9029: LD_STRING 
9031: ST_TO_ADDR
// hc_name :=  ;
9032: LD_ADDR_OWVAR 26
9036: PUSH
9037: LD_STRING 
9039: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9040: CALL_OW 44
9044: PPUSH
9045: LD_INT 0
9047: PPUSH
9048: CALL_OW 51
// end ;
9052: GO 8974
9054: POP
9055: POP
// end ;
9056: PPOPN 1
9058: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9059: LD_EXP 2
9063: PUSH
9064: LD_EXP 22
9068: AND
9069: IFFALSE 9078
9071: GO 9073
9073: DISABLE
// StreamSibBomb ;
9074: CALL 9079 0 0
9078: END
// export function StreamSibBomb ; var i , x , y ; begin
9079: LD_INT 0
9081: PPUSH
9082: PPUSH
9083: PPUSH
9084: PPUSH
// result := false ;
9085: LD_ADDR_VAR 0 1
9089: PUSH
9090: LD_INT 0
9092: ST_TO_ADDR
// for i := 1 to 16 do
9093: LD_ADDR_VAR 0 2
9097: PUSH
9098: DOUBLE
9099: LD_INT 1
9101: DEC
9102: ST_TO_ADDR
9103: LD_INT 16
9105: PUSH
9106: FOR_TO
9107: IFFALSE 9306
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9109: LD_ADDR_VAR 0 3
9113: PUSH
9114: LD_INT 10
9116: PUSH
9117: LD_INT 20
9119: PUSH
9120: LD_INT 30
9122: PUSH
9123: LD_INT 40
9125: PUSH
9126: LD_INT 50
9128: PUSH
9129: LD_INT 60
9131: PUSH
9132: LD_INT 70
9134: PUSH
9135: LD_INT 80
9137: PUSH
9138: LD_INT 90
9140: PUSH
9141: LD_INT 100
9143: PUSH
9144: LD_INT 110
9146: PUSH
9147: LD_INT 120
9149: PUSH
9150: LD_INT 130
9152: PUSH
9153: LD_INT 140
9155: PUSH
9156: LD_INT 150
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: PUSH
9176: LD_INT 1
9178: PPUSH
9179: LD_INT 15
9181: PPUSH
9182: CALL_OW 12
9186: ARRAY
9187: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9188: LD_ADDR_VAR 0 4
9192: PUSH
9193: LD_INT 10
9195: PUSH
9196: LD_INT 20
9198: PUSH
9199: LD_INT 30
9201: PUSH
9202: LD_INT 40
9204: PUSH
9205: LD_INT 50
9207: PUSH
9208: LD_INT 60
9210: PUSH
9211: LD_INT 70
9213: PUSH
9214: LD_INT 80
9216: PUSH
9217: LD_INT 90
9219: PUSH
9220: LD_INT 100
9222: PUSH
9223: LD_INT 110
9225: PUSH
9226: LD_INT 120
9228: PUSH
9229: LD_INT 130
9231: PUSH
9232: LD_INT 140
9234: PUSH
9235: LD_INT 150
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: PUSH
9255: LD_INT 1
9257: PPUSH
9258: LD_INT 15
9260: PPUSH
9261: CALL_OW 12
9265: ARRAY
9266: ST_TO_ADDR
// if ValidHex ( x , y ) then
9267: LD_VAR 0 3
9271: PPUSH
9272: LD_VAR 0 4
9276: PPUSH
9277: CALL_OW 488
9281: IFFALSE 9304
// begin result := [ x , y ] ;
9283: LD_ADDR_VAR 0 1
9287: PUSH
9288: LD_VAR 0 3
9292: PUSH
9293: LD_VAR 0 4
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: ST_TO_ADDR
// break ;
9302: GO 9306
// end ; end ;
9304: GO 9106
9306: POP
9307: POP
// if result then
9308: LD_VAR 0 1
9312: IFFALSE 9372
// begin ToLua ( playSibBomb() ) ;
9314: LD_STRING playSibBomb()
9316: PPUSH
9317: CALL_OW 559
// wait ( 0 0$14 ) ;
9321: LD_INT 490
9323: PPUSH
9324: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9328: LD_VAR 0 1
9332: PUSH
9333: LD_INT 1
9335: ARRAY
9336: PPUSH
9337: LD_VAR 0 1
9341: PUSH
9342: LD_INT 2
9344: ARRAY
9345: PPUSH
9346: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9350: LD_VAR 0 1
9354: PUSH
9355: LD_INT 1
9357: ARRAY
9358: PPUSH
9359: LD_VAR 0 1
9363: PUSH
9364: LD_INT 2
9366: ARRAY
9367: PPUSH
9368: CALL_OW 429
// end ; end ;
9372: LD_VAR 0 1
9376: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9377: LD_EXP 2
9381: PUSH
9382: LD_EXP 24
9386: AND
9387: IFFALSE 9399
9389: GO 9391
9391: DISABLE
// YouLost (  ) ;
9392: LD_STRING 
9394: PPUSH
9395: CALL_OW 104
9399: END
// every 0 0$1 trigger StreamModeActive and sFog do
9400: LD_EXP 2
9404: PUSH
9405: LD_EXP 23
9409: AND
9410: IFFALSE 9424
9412: GO 9414
9414: DISABLE
// FogOff ( your_side ) ;
9415: LD_OWVAR 2
9419: PPUSH
9420: CALL_OW 344
9424: END
// every 0 0$1 trigger StreamModeActive and sSun do
9425: LD_EXP 2
9429: PUSH
9430: LD_EXP 25
9434: AND
9435: IFFALSE 9463
9437: GO 9439
9439: DISABLE
// begin solar_recharge_percent := 0 ;
9440: LD_ADDR_OWVAR 79
9444: PUSH
9445: LD_INT 0
9447: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9448: LD_INT 10500
9450: PPUSH
9451: CALL_OW 67
// solar_recharge_percent := 100 ;
9455: LD_ADDR_OWVAR 79
9459: PUSH
9460: LD_INT 100
9462: ST_TO_ADDR
// end ;
9463: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9464: LD_EXP 2
9468: PUSH
9469: LD_EXP 26
9473: AND
9474: IFFALSE 9713
9476: GO 9478
9478: DISABLE
9479: LD_INT 0
9481: PPUSH
9482: PPUSH
9483: PPUSH
// begin tmp := [ ] ;
9484: LD_ADDR_VAR 0 3
9488: PUSH
9489: EMPTY
9490: ST_TO_ADDR
// for i := 1 to 6 do
9491: LD_ADDR_VAR 0 1
9495: PUSH
9496: DOUBLE
9497: LD_INT 1
9499: DEC
9500: ST_TO_ADDR
9501: LD_INT 6
9503: PUSH
9504: FOR_TO
9505: IFFALSE 9610
// begin uc_nation := nation_nature ;
9507: LD_ADDR_OWVAR 21
9511: PUSH
9512: LD_INT 0
9514: ST_TO_ADDR
// uc_side := 0 ;
9515: LD_ADDR_OWVAR 20
9519: PUSH
9520: LD_INT 0
9522: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9523: LD_ADDR_OWVAR 29
9527: PUSH
9528: LD_INT 12
9530: PUSH
9531: LD_INT 12
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: ST_TO_ADDR
// hc_agressivity := 20 ;
9538: LD_ADDR_OWVAR 35
9542: PUSH
9543: LD_INT 20
9545: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9546: LD_ADDR_OWVAR 28
9550: PUSH
9551: LD_INT 17
9553: ST_TO_ADDR
// hc_gallery :=  ;
9554: LD_ADDR_OWVAR 33
9558: PUSH
9559: LD_STRING 
9561: ST_TO_ADDR
// hc_name :=  ;
9562: LD_ADDR_OWVAR 26
9566: PUSH
9567: LD_STRING 
9569: ST_TO_ADDR
// un := CreateHuman ;
9570: LD_ADDR_VAR 0 2
9574: PUSH
9575: CALL_OW 44
9579: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9580: LD_VAR 0 2
9584: PPUSH
9585: LD_INT 1
9587: PPUSH
9588: CALL_OW 51
// tmp := tmp ^ un ;
9592: LD_ADDR_VAR 0 3
9596: PUSH
9597: LD_VAR 0 3
9601: PUSH
9602: LD_VAR 0 2
9606: ADD
9607: ST_TO_ADDR
// end ;
9608: GO 9504
9610: POP
9611: POP
// repeat wait ( 0 0$1 ) ;
9612: LD_INT 35
9614: PPUSH
9615: CALL_OW 67
// for un in tmp do
9619: LD_ADDR_VAR 0 2
9623: PUSH
9624: LD_VAR 0 3
9628: PUSH
9629: FOR_IN
9630: IFFALSE 9704
// begin if IsDead ( un ) then
9632: LD_VAR 0 2
9636: PPUSH
9637: CALL_OW 301
9641: IFFALSE 9661
// begin tmp := tmp diff un ;
9643: LD_ADDR_VAR 0 3
9647: PUSH
9648: LD_VAR 0 3
9652: PUSH
9653: LD_VAR 0 2
9657: DIFF
9658: ST_TO_ADDR
// continue ;
9659: GO 9629
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9661: LD_VAR 0 2
9665: PPUSH
9666: LD_INT 3
9668: PUSH
9669: LD_INT 22
9671: PUSH
9672: LD_INT 0
9674: PUSH
9675: EMPTY
9676: LIST
9677: LIST
9678: PUSH
9679: EMPTY
9680: LIST
9681: LIST
9682: PPUSH
9683: CALL_OW 69
9687: PPUSH
9688: LD_VAR 0 2
9692: PPUSH
9693: CALL_OW 74
9697: PPUSH
9698: CALL_OW 115
// end ;
9702: GO 9629
9704: POP
9705: POP
// until not tmp ;
9706: LD_VAR 0 3
9710: NOT
9711: IFFALSE 9612
// end ;
9713: PPOPN 3
9715: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9716: LD_EXP 2
9720: PUSH
9721: LD_EXP 27
9725: AND
9726: IFFALSE 9780
9728: GO 9730
9730: DISABLE
// begin ToLua ( displayTroll(); ) ;
9731: LD_STRING displayTroll();
9733: PPUSH
9734: CALL_OW 559
// wait ( 3 3$00 ) ;
9738: LD_INT 6300
9740: PPUSH
9741: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9745: LD_STRING hideTroll();
9747: PPUSH
9748: CALL_OW 559
// wait ( 1 1$00 ) ;
9752: LD_INT 2100
9754: PPUSH
9755: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9759: LD_STRING displayTroll();
9761: PPUSH
9762: CALL_OW 559
// wait ( 1 1$00 ) ;
9766: LD_INT 2100
9768: PPUSH
9769: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9773: LD_STRING hideTroll();
9775: PPUSH
9776: CALL_OW 559
// end ;
9780: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9781: LD_EXP 2
9785: PUSH
9786: LD_EXP 28
9790: AND
9791: IFFALSE 9854
9793: GO 9795
9795: DISABLE
9796: LD_INT 0
9798: PPUSH
// begin p := 0 ;
9799: LD_ADDR_VAR 0 1
9803: PUSH
9804: LD_INT 0
9806: ST_TO_ADDR
// repeat game_speed := 1 ;
9807: LD_ADDR_OWVAR 65
9811: PUSH
9812: LD_INT 1
9814: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9815: LD_INT 35
9817: PPUSH
9818: CALL_OW 67
// p := p + 1 ;
9822: LD_ADDR_VAR 0 1
9826: PUSH
9827: LD_VAR 0 1
9831: PUSH
9832: LD_INT 1
9834: PLUS
9835: ST_TO_ADDR
// until p >= 60 ;
9836: LD_VAR 0 1
9840: PUSH
9841: LD_INT 60
9843: GREATEREQUAL
9844: IFFALSE 9807
// game_speed := 4 ;
9846: LD_ADDR_OWVAR 65
9850: PUSH
9851: LD_INT 4
9853: ST_TO_ADDR
// end ;
9854: PPOPN 1
9856: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9857: LD_EXP 2
9861: PUSH
9862: LD_EXP 29
9866: AND
9867: IFFALSE 10013
9869: GO 9871
9871: DISABLE
9872: LD_INT 0
9874: PPUSH
9875: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9876: LD_ADDR_VAR 0 1
9880: PUSH
9881: LD_INT 22
9883: PUSH
9884: LD_OWVAR 2
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: PUSH
9893: LD_INT 2
9895: PUSH
9896: LD_INT 30
9898: PUSH
9899: LD_INT 0
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: PUSH
9906: LD_INT 30
9908: PUSH
9909: LD_INT 1
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: LIST
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: PPUSH
9925: CALL_OW 69
9929: ST_TO_ADDR
// if not depot then
9930: LD_VAR 0 1
9934: NOT
9935: IFFALSE 9939
// exit ;
9937: GO 10013
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
9939: LD_ADDR_VAR 0 2
9943: PUSH
9944: LD_VAR 0 1
9948: PUSH
9949: LD_INT 1
9951: PPUSH
9952: LD_VAR 0 1
9956: PPUSH
9957: CALL_OW 12
9961: ARRAY
9962: PPUSH
9963: CALL_OW 274
9967: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
9968: LD_VAR 0 2
9972: PPUSH
9973: LD_INT 1
9975: PPUSH
9976: LD_INT 0
9978: PPUSH
9979: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
9983: LD_VAR 0 2
9987: PPUSH
9988: LD_INT 2
9990: PPUSH
9991: LD_INT 0
9993: PPUSH
9994: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
9998: LD_VAR 0 2
10002: PPUSH
10003: LD_INT 3
10005: PPUSH
10006: LD_INT 0
10008: PPUSH
10009: CALL_OW 277
// end ;
10013: PPOPN 2
10015: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10016: LD_EXP 2
10020: PUSH
10021: LD_EXP 30
10025: AND
10026: IFFALSE 10123
10028: GO 10030
10030: DISABLE
10031: LD_INT 0
10033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10034: LD_ADDR_VAR 0 1
10038: PUSH
10039: LD_INT 22
10041: PUSH
10042: LD_OWVAR 2
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PUSH
10051: LD_INT 21
10053: PUSH
10054: LD_INT 1
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: PUSH
10061: LD_INT 3
10063: PUSH
10064: LD_INT 23
10066: PUSH
10067: LD_INT 0
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: PUSH
10078: EMPTY
10079: LIST
10080: LIST
10081: LIST
10082: PPUSH
10083: CALL_OW 69
10087: ST_TO_ADDR
// if not tmp then
10088: LD_VAR 0 1
10092: NOT
10093: IFFALSE 10097
// exit ;
10095: GO 10123
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10097: LD_VAR 0 1
10101: PUSH
10102: LD_INT 1
10104: PPUSH
10105: LD_VAR 0 1
10109: PPUSH
10110: CALL_OW 12
10114: ARRAY
10115: PPUSH
10116: LD_INT 200
10118: PPUSH
10119: CALL_OW 234
// end ;
10123: PPOPN 1
10125: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10126: LD_EXP 2
10130: PUSH
10131: LD_EXP 31
10135: AND
10136: IFFALSE 10215
10138: GO 10140
10140: DISABLE
10141: LD_INT 0
10143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10144: LD_ADDR_VAR 0 1
10148: PUSH
10149: LD_INT 22
10151: PUSH
10152: LD_OWVAR 2
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PUSH
10161: LD_INT 21
10163: PUSH
10164: LD_INT 2
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PUSH
10171: EMPTY
10172: LIST
10173: LIST
10174: PPUSH
10175: CALL_OW 69
10179: ST_TO_ADDR
// if not tmp then
10180: LD_VAR 0 1
10184: NOT
10185: IFFALSE 10189
// exit ;
10187: GO 10215
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10189: LD_VAR 0 1
10193: PUSH
10194: LD_INT 1
10196: PPUSH
10197: LD_VAR 0 1
10201: PPUSH
10202: CALL_OW 12
10206: ARRAY
10207: PPUSH
10208: LD_INT 60
10210: PPUSH
10211: CALL_OW 234
// end ;
10215: PPOPN 1
10217: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10218: LD_EXP 2
10222: PUSH
10223: LD_EXP 32
10227: AND
10228: IFFALSE 10327
10230: GO 10232
10232: DISABLE
10233: LD_INT 0
10235: PPUSH
10236: PPUSH
// begin enable ;
10237: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10238: LD_ADDR_VAR 0 1
10242: PUSH
10243: LD_INT 22
10245: PUSH
10246: LD_OWVAR 2
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: PUSH
10255: LD_INT 61
10257: PUSH
10258: EMPTY
10259: LIST
10260: PUSH
10261: LD_INT 33
10263: PUSH
10264: LD_INT 2
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: LIST
10275: PPUSH
10276: CALL_OW 69
10280: ST_TO_ADDR
// if not tmp then
10281: LD_VAR 0 1
10285: NOT
10286: IFFALSE 10290
// exit ;
10288: GO 10327
// for i in tmp do
10290: LD_ADDR_VAR 0 2
10294: PUSH
10295: LD_VAR 0 1
10299: PUSH
10300: FOR_IN
10301: IFFALSE 10325
// if IsControledBy ( i ) then
10303: LD_VAR 0 2
10307: PPUSH
10308: CALL_OW 312
10312: IFFALSE 10323
// ComUnlink ( i ) ;
10314: LD_VAR 0 2
10318: PPUSH
10319: CALL_OW 136
10323: GO 10300
10325: POP
10326: POP
// end ;
10327: PPOPN 2
10329: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10330: LD_EXP 2
10334: PUSH
10335: LD_EXP 33
10339: AND
10340: IFFALSE 10480
10342: GO 10344
10344: DISABLE
10345: LD_INT 0
10347: PPUSH
10348: PPUSH
// begin ToLua ( displayPowell(); ) ;
10349: LD_STRING displayPowell();
10351: PPUSH
10352: CALL_OW 559
// uc_side := 0 ;
10356: LD_ADDR_OWVAR 20
10360: PUSH
10361: LD_INT 0
10363: ST_TO_ADDR
// uc_nation := 2 ;
10364: LD_ADDR_OWVAR 21
10368: PUSH
10369: LD_INT 2
10371: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10372: LD_ADDR_OWVAR 37
10376: PUSH
10377: LD_INT 14
10379: ST_TO_ADDR
// vc_engine := engine_siberite ;
10380: LD_ADDR_OWVAR 39
10384: PUSH
10385: LD_INT 3
10387: ST_TO_ADDR
// vc_control := control_apeman ;
10388: LD_ADDR_OWVAR 38
10392: PUSH
10393: LD_INT 5
10395: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10396: LD_ADDR_OWVAR 40
10400: PUSH
10401: LD_INT 29
10403: ST_TO_ADDR
// un := CreateVehicle ;
10404: LD_ADDR_VAR 0 2
10408: PUSH
10409: CALL_OW 45
10413: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10414: LD_VAR 0 2
10418: PPUSH
10419: LD_INT 1
10421: PPUSH
10422: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10426: LD_INT 35
10428: PPUSH
10429: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10433: LD_VAR 0 2
10437: PPUSH
10438: LD_INT 22
10440: PUSH
10441: LD_OWVAR 2
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PPUSH
10450: CALL_OW 69
10454: PPUSH
10455: LD_VAR 0 2
10459: PPUSH
10460: CALL_OW 74
10464: PPUSH
10465: CALL_OW 115
// until IsDead ( un ) ;
10469: LD_VAR 0 2
10473: PPUSH
10474: CALL_OW 301
10478: IFFALSE 10426
// end ;
10480: PPOPN 2
10482: END
// every 0 0$1 trigger StreamModeActive and sStu do
10483: LD_EXP 2
10487: PUSH
10488: LD_EXP 41
10492: AND
10493: IFFALSE 10509
10495: GO 10497
10497: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10498: LD_STRING displayStucuk();
10500: PPUSH
10501: CALL_OW 559
// ResetFog ;
10505: CALL_OW 335
// end ;
10509: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10510: LD_EXP 2
10514: PUSH
10515: LD_EXP 34
10519: AND
10520: IFFALSE 10661
10522: GO 10524
10524: DISABLE
10525: LD_INT 0
10527: PPUSH
10528: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10529: LD_ADDR_VAR 0 2
10533: PUSH
10534: LD_INT 22
10536: PUSH
10537: LD_OWVAR 2
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: PUSH
10546: LD_INT 21
10548: PUSH
10549: LD_INT 1
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: PPUSH
10560: CALL_OW 69
10564: ST_TO_ADDR
// if not tmp then
10565: LD_VAR 0 2
10569: NOT
10570: IFFALSE 10574
// exit ;
10572: GO 10661
// un := tmp [ rand ( 1 , tmp ) ] ;
10574: LD_ADDR_VAR 0 1
10578: PUSH
10579: LD_VAR 0 2
10583: PUSH
10584: LD_INT 1
10586: PPUSH
10587: LD_VAR 0 2
10591: PPUSH
10592: CALL_OW 12
10596: ARRAY
10597: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10598: LD_VAR 0 1
10602: PPUSH
10603: LD_INT 0
10605: PPUSH
10606: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10610: LD_VAR 0 1
10614: PPUSH
10615: LD_OWVAR 3
10619: PUSH
10620: LD_VAR 0 1
10624: DIFF
10625: PPUSH
10626: LD_VAR 0 1
10630: PPUSH
10631: CALL_OW 74
10635: PPUSH
10636: CALL_OW 115
// wait ( 0 0$20 ) ;
10640: LD_INT 700
10642: PPUSH
10643: CALL_OW 67
// SetSide ( un , your_side ) ;
10647: LD_VAR 0 1
10651: PPUSH
10652: LD_OWVAR 2
10656: PPUSH
10657: CALL_OW 235
// end ;
10661: PPOPN 2
10663: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10664: LD_EXP 2
10668: PUSH
10669: LD_EXP 35
10673: AND
10674: IFFALSE 10780
10676: GO 10678
10678: DISABLE
10679: LD_INT 0
10681: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10682: LD_ADDR_VAR 0 1
10686: PUSH
10687: LD_INT 22
10689: PUSH
10690: LD_OWVAR 2
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: LD_INT 2
10701: PUSH
10702: LD_INT 30
10704: PUSH
10705: LD_INT 0
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: PUSH
10712: LD_INT 30
10714: PUSH
10715: LD_INT 1
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: LIST
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: PPUSH
10731: CALL_OW 69
10735: ST_TO_ADDR
// if not depot then
10736: LD_VAR 0 1
10740: NOT
10741: IFFALSE 10745
// exit ;
10743: GO 10780
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10745: LD_VAR 0 1
10749: PUSH
10750: LD_INT 1
10752: ARRAY
10753: PPUSH
10754: CALL_OW 250
10758: PPUSH
10759: LD_VAR 0 1
10763: PUSH
10764: LD_INT 1
10766: ARRAY
10767: PPUSH
10768: CALL_OW 251
10772: PPUSH
10773: LD_INT 70
10775: PPUSH
10776: CALL_OW 495
// end ;
10780: PPOPN 1
10782: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10783: LD_EXP 2
10787: PUSH
10788: LD_EXP 36
10792: AND
10793: IFFALSE 11004
10795: GO 10797
10797: DISABLE
10798: LD_INT 0
10800: PPUSH
10801: PPUSH
10802: PPUSH
10803: PPUSH
10804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10805: LD_ADDR_VAR 0 5
10809: PUSH
10810: LD_INT 22
10812: PUSH
10813: LD_OWVAR 2
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: LD_INT 21
10824: PUSH
10825: LD_INT 1
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PPUSH
10836: CALL_OW 69
10840: ST_TO_ADDR
// if not tmp then
10841: LD_VAR 0 5
10845: NOT
10846: IFFALSE 10850
// exit ;
10848: GO 11004
// for i in tmp do
10850: LD_ADDR_VAR 0 1
10854: PUSH
10855: LD_VAR 0 5
10859: PUSH
10860: FOR_IN
10861: IFFALSE 11002
// begin d := rand ( 0 , 5 ) ;
10863: LD_ADDR_VAR 0 4
10867: PUSH
10868: LD_INT 0
10870: PPUSH
10871: LD_INT 5
10873: PPUSH
10874: CALL_OW 12
10878: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10879: LD_ADDR_VAR 0 2
10883: PUSH
10884: LD_VAR 0 1
10888: PPUSH
10889: CALL_OW 250
10893: PPUSH
10894: LD_VAR 0 4
10898: PPUSH
10899: LD_INT 3
10901: PPUSH
10902: LD_INT 12
10904: PPUSH
10905: CALL_OW 12
10909: PPUSH
10910: CALL_OW 272
10914: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
10915: LD_ADDR_VAR 0 3
10919: PUSH
10920: LD_VAR 0 1
10924: PPUSH
10925: CALL_OW 251
10929: PPUSH
10930: LD_VAR 0 4
10934: PPUSH
10935: LD_INT 3
10937: PPUSH
10938: LD_INT 12
10940: PPUSH
10941: CALL_OW 12
10945: PPUSH
10946: CALL_OW 273
10950: ST_TO_ADDR
// if ValidHex ( x , y ) then
10951: LD_VAR 0 2
10955: PPUSH
10956: LD_VAR 0 3
10960: PPUSH
10961: CALL_OW 488
10965: IFFALSE 11000
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
10967: LD_VAR 0 1
10971: PPUSH
10972: LD_VAR 0 2
10976: PPUSH
10977: LD_VAR 0 3
10981: PPUSH
10982: LD_INT 3
10984: PPUSH
10985: LD_INT 6
10987: PPUSH
10988: CALL_OW 12
10992: PPUSH
10993: LD_INT 1
10995: PPUSH
10996: CALL_OW 483
// end ;
11000: GO 10860
11002: POP
11003: POP
// end ;
11004: PPOPN 5
11006: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11007: LD_EXP 2
11011: PUSH
11012: LD_EXP 37
11016: AND
11017: IFFALSE 11111
11019: GO 11021
11021: DISABLE
11022: LD_INT 0
11024: PPUSH
11025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11026: LD_ADDR_VAR 0 2
11030: PUSH
11031: LD_INT 22
11033: PUSH
11034: LD_OWVAR 2
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 32
11045: PUSH
11046: LD_INT 1
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PUSH
11053: LD_INT 21
11055: PUSH
11056: LD_INT 2
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: LIST
11067: PPUSH
11068: CALL_OW 69
11072: ST_TO_ADDR
// if not tmp then
11073: LD_VAR 0 2
11077: NOT
11078: IFFALSE 11082
// exit ;
11080: GO 11111
// for i in tmp do
11082: LD_ADDR_VAR 0 1
11086: PUSH
11087: LD_VAR 0 2
11091: PUSH
11092: FOR_IN
11093: IFFALSE 11109
// SetFuel ( i , 0 ) ;
11095: LD_VAR 0 1
11099: PPUSH
11100: LD_INT 0
11102: PPUSH
11103: CALL_OW 240
11107: GO 11092
11109: POP
11110: POP
// end ;
11111: PPOPN 2
11113: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11114: LD_EXP 2
11118: PUSH
11119: LD_EXP 38
11123: AND
11124: IFFALSE 11190
11126: GO 11128
11128: DISABLE
11129: LD_INT 0
11131: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11132: LD_ADDR_VAR 0 1
11136: PUSH
11137: LD_INT 22
11139: PUSH
11140: LD_OWVAR 2
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: PUSH
11149: LD_INT 30
11151: PUSH
11152: LD_INT 29
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: PPUSH
11163: CALL_OW 69
11167: ST_TO_ADDR
// if not tmp then
11168: LD_VAR 0 1
11172: NOT
11173: IFFALSE 11177
// exit ;
11175: GO 11190
// DestroyUnit ( tmp [ 1 ] ) ;
11177: LD_VAR 0 1
11181: PUSH
11182: LD_INT 1
11184: ARRAY
11185: PPUSH
11186: CALL_OW 65
// end ;
11190: PPOPN 1
11192: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11193: LD_EXP 2
11197: PUSH
11198: LD_EXP 40
11202: AND
11203: IFFALSE 11332
11205: GO 11207
11207: DISABLE
11208: LD_INT 0
11210: PPUSH
// begin uc_side := 0 ;
11211: LD_ADDR_OWVAR 20
11215: PUSH
11216: LD_INT 0
11218: ST_TO_ADDR
// uc_nation := nation_arabian ;
11219: LD_ADDR_OWVAR 21
11223: PUSH
11224: LD_INT 2
11226: ST_TO_ADDR
// hc_gallery :=  ;
11227: LD_ADDR_OWVAR 33
11231: PUSH
11232: LD_STRING 
11234: ST_TO_ADDR
// hc_name :=  ;
11235: LD_ADDR_OWVAR 26
11239: PUSH
11240: LD_STRING 
11242: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11243: LD_INT 1
11245: PPUSH
11246: LD_INT 11
11248: PPUSH
11249: LD_INT 10
11251: PPUSH
11252: CALL_OW 380
// un := CreateHuman ;
11256: LD_ADDR_VAR 0 1
11260: PUSH
11261: CALL_OW 44
11265: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11266: LD_VAR 0 1
11270: PPUSH
11271: LD_INT 1
11273: PPUSH
11274: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11278: LD_INT 35
11280: PPUSH
11281: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11285: LD_VAR 0 1
11289: PPUSH
11290: LD_INT 22
11292: PUSH
11293: LD_OWVAR 2
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: PPUSH
11302: CALL_OW 69
11306: PPUSH
11307: LD_VAR 0 1
11311: PPUSH
11312: CALL_OW 74
11316: PPUSH
11317: CALL_OW 115
// until IsDead ( un ) ;
11321: LD_VAR 0 1
11325: PPUSH
11326: CALL_OW 301
11330: IFFALSE 11278
// end ;
11332: PPOPN 1
11334: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11335: LD_EXP 2
11339: PUSH
11340: LD_EXP 42
11344: AND
11345: IFFALSE 11357
11347: GO 11349
11349: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11350: LD_STRING earthquake(getX(game), 0, 32)
11352: PPUSH
11353: CALL_OW 559
11357: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11358: LD_EXP 2
11362: PUSH
11363: LD_EXP 43
11367: AND
11368: IFFALSE 11459
11370: GO 11372
11372: DISABLE
11373: LD_INT 0
11375: PPUSH
// begin enable ;
11376: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11377: LD_ADDR_VAR 0 1
11381: PUSH
11382: LD_INT 22
11384: PUSH
11385: LD_OWVAR 2
11389: PUSH
11390: EMPTY
11391: LIST
11392: LIST
11393: PUSH
11394: LD_INT 21
11396: PUSH
11397: LD_INT 2
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: PUSH
11404: LD_INT 33
11406: PUSH
11407: LD_INT 3
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: PUSH
11414: EMPTY
11415: LIST
11416: LIST
11417: LIST
11418: PPUSH
11419: CALL_OW 69
11423: ST_TO_ADDR
// if not tmp then
11424: LD_VAR 0 1
11428: NOT
11429: IFFALSE 11433
// exit ;
11431: GO 11459
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11433: LD_VAR 0 1
11437: PUSH
11438: LD_INT 1
11440: PPUSH
11441: LD_VAR 0 1
11445: PPUSH
11446: CALL_OW 12
11450: ARRAY
11451: PPUSH
11452: LD_INT 1
11454: PPUSH
11455: CALL_OW 234
// end ;
11459: PPOPN 1
11461: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11462: LD_EXP 2
11466: PUSH
11467: LD_EXP 44
11471: AND
11472: IFFALSE 11613
11474: GO 11476
11476: DISABLE
11477: LD_INT 0
11479: PPUSH
11480: PPUSH
11481: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11482: LD_ADDR_VAR 0 3
11486: PUSH
11487: LD_INT 22
11489: PUSH
11490: LD_OWVAR 2
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: PUSH
11499: LD_INT 25
11501: PUSH
11502: LD_INT 1
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PPUSH
11513: CALL_OW 69
11517: ST_TO_ADDR
// if not tmp then
11518: LD_VAR 0 3
11522: NOT
11523: IFFALSE 11527
// exit ;
11525: GO 11613
// un := tmp [ rand ( 1 , tmp ) ] ;
11527: LD_ADDR_VAR 0 2
11531: PUSH
11532: LD_VAR 0 3
11536: PUSH
11537: LD_INT 1
11539: PPUSH
11540: LD_VAR 0 3
11544: PPUSH
11545: CALL_OW 12
11549: ARRAY
11550: ST_TO_ADDR
// if Crawls ( un ) then
11551: LD_VAR 0 2
11555: PPUSH
11556: CALL_OW 318
11560: IFFALSE 11571
// ComWalk ( un ) ;
11562: LD_VAR 0 2
11566: PPUSH
11567: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11571: LD_VAR 0 2
11575: PPUSH
11576: LD_INT 9
11578: PPUSH
11579: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11583: LD_INT 28
11585: PPUSH
11586: LD_OWVAR 2
11590: PPUSH
11591: LD_INT 2
11593: PPUSH
11594: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11598: LD_INT 29
11600: PPUSH
11601: LD_OWVAR 2
11605: PPUSH
11606: LD_INT 2
11608: PPUSH
11609: CALL_OW 322
// end ;
11613: PPOPN 3
11615: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11616: LD_EXP 2
11620: PUSH
11621: LD_EXP 45
11625: AND
11626: IFFALSE 11737
11628: GO 11630
11630: DISABLE
11631: LD_INT 0
11633: PPUSH
11634: PPUSH
11635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11636: LD_ADDR_VAR 0 3
11640: PUSH
11641: LD_INT 22
11643: PUSH
11644: LD_OWVAR 2
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PUSH
11653: LD_INT 25
11655: PUSH
11656: LD_INT 1
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PPUSH
11667: CALL_OW 69
11671: ST_TO_ADDR
// if not tmp then
11672: LD_VAR 0 3
11676: NOT
11677: IFFALSE 11681
// exit ;
11679: GO 11737
// un := tmp [ rand ( 1 , tmp ) ] ;
11681: LD_ADDR_VAR 0 2
11685: PUSH
11686: LD_VAR 0 3
11690: PUSH
11691: LD_INT 1
11693: PPUSH
11694: LD_VAR 0 3
11698: PPUSH
11699: CALL_OW 12
11703: ARRAY
11704: ST_TO_ADDR
// if Crawls ( un ) then
11705: LD_VAR 0 2
11709: PPUSH
11710: CALL_OW 318
11714: IFFALSE 11725
// ComWalk ( un ) ;
11716: LD_VAR 0 2
11720: PPUSH
11721: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11725: LD_VAR 0 2
11729: PPUSH
11730: LD_INT 8
11732: PPUSH
11733: CALL_OW 336
// end ;
11737: PPOPN 3
11739: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11740: LD_EXP 2
11744: PUSH
11745: LD_EXP 46
11749: AND
11750: IFFALSE 11894
11752: GO 11754
11754: DISABLE
11755: LD_INT 0
11757: PPUSH
11758: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11759: LD_ADDR_VAR 0 2
11763: PUSH
11764: LD_INT 22
11766: PUSH
11767: LD_OWVAR 2
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: PUSH
11776: LD_INT 21
11778: PUSH
11779: LD_INT 2
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: PUSH
11786: LD_INT 2
11788: PUSH
11789: LD_INT 34
11791: PUSH
11792: LD_INT 12
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: PUSH
11799: LD_INT 34
11801: PUSH
11802: LD_INT 51
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: PUSH
11809: LD_INT 34
11811: PUSH
11812: LD_INT 32
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: PUSH
11825: EMPTY
11826: LIST
11827: LIST
11828: LIST
11829: PPUSH
11830: CALL_OW 69
11834: ST_TO_ADDR
// if not tmp then
11835: LD_VAR 0 2
11839: NOT
11840: IFFALSE 11844
// exit ;
11842: GO 11894
// for i in tmp do
11844: LD_ADDR_VAR 0 1
11848: PUSH
11849: LD_VAR 0 2
11853: PUSH
11854: FOR_IN
11855: IFFALSE 11892
// if GetCargo ( i , mat_artifact ) = 0 then
11857: LD_VAR 0 1
11861: PPUSH
11862: LD_INT 4
11864: PPUSH
11865: CALL_OW 289
11869: PUSH
11870: LD_INT 0
11872: EQUAL
11873: IFFALSE 11890
// SetCargo ( i , mat_siberit , 100 ) ;
11875: LD_VAR 0 1
11879: PPUSH
11880: LD_INT 3
11882: PPUSH
11883: LD_INT 100
11885: PPUSH
11886: CALL_OW 290
11890: GO 11854
11892: POP
11893: POP
// end ;
11894: PPOPN 2
11896: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
11897: LD_EXP 2
11901: PUSH
11902: LD_EXP 47
11906: AND
11907: IFFALSE 12090
11909: GO 11911
11911: DISABLE
11912: LD_INT 0
11914: PPUSH
11915: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
11916: LD_ADDR_VAR 0 2
11920: PUSH
11921: LD_INT 22
11923: PUSH
11924: LD_OWVAR 2
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: PPUSH
11933: CALL_OW 69
11937: ST_TO_ADDR
// if not tmp then
11938: LD_VAR 0 2
11942: NOT
11943: IFFALSE 11947
// exit ;
11945: GO 12090
// for i := 1 to 2 do
11947: LD_ADDR_VAR 0 1
11951: PUSH
11952: DOUBLE
11953: LD_INT 1
11955: DEC
11956: ST_TO_ADDR
11957: LD_INT 2
11959: PUSH
11960: FOR_TO
11961: IFFALSE 12088
// begin uc_side := your_side ;
11963: LD_ADDR_OWVAR 20
11967: PUSH
11968: LD_OWVAR 2
11972: ST_TO_ADDR
// uc_nation := nation_american ;
11973: LD_ADDR_OWVAR 21
11977: PUSH
11978: LD_INT 1
11980: ST_TO_ADDR
// vc_chassis := us_morphling ;
11981: LD_ADDR_OWVAR 37
11985: PUSH
11986: LD_INT 5
11988: ST_TO_ADDR
// vc_engine := engine_siberite ;
11989: LD_ADDR_OWVAR 39
11993: PUSH
11994: LD_INT 3
11996: ST_TO_ADDR
// vc_control := control_computer ;
11997: LD_ADDR_OWVAR 38
12001: PUSH
12002: LD_INT 3
12004: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12005: LD_ADDR_OWVAR 40
12009: PUSH
12010: LD_INT 10
12012: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12013: LD_VAR 0 2
12017: PUSH
12018: LD_INT 1
12020: ARRAY
12021: PPUSH
12022: CALL_OW 310
12026: NOT
12027: IFFALSE 12074
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12029: CALL_OW 45
12033: PPUSH
12034: LD_VAR 0 2
12038: PUSH
12039: LD_INT 1
12041: ARRAY
12042: PPUSH
12043: CALL_OW 250
12047: PPUSH
12048: LD_VAR 0 2
12052: PUSH
12053: LD_INT 1
12055: ARRAY
12056: PPUSH
12057: CALL_OW 251
12061: PPUSH
12062: LD_INT 12
12064: PPUSH
12065: LD_INT 1
12067: PPUSH
12068: CALL_OW 50
12072: GO 12086
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12074: CALL_OW 45
12078: PPUSH
12079: LD_INT 1
12081: PPUSH
12082: CALL_OW 51
// end ;
12086: GO 11960
12088: POP
12089: POP
// end ;
12090: PPOPN 2
12092: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12093: LD_EXP 2
12097: PUSH
12098: LD_EXP 48
12102: AND
12103: IFFALSE 12325
12105: GO 12107
12107: DISABLE
12108: LD_INT 0
12110: PPUSH
12111: PPUSH
12112: PPUSH
12113: PPUSH
12114: PPUSH
12115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12116: LD_ADDR_VAR 0 6
12120: PUSH
12121: LD_INT 22
12123: PUSH
12124: LD_OWVAR 2
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: PUSH
12133: LD_INT 21
12135: PUSH
12136: LD_INT 1
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PUSH
12143: LD_INT 3
12145: PUSH
12146: LD_INT 23
12148: PUSH
12149: LD_INT 0
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: LIST
12164: PPUSH
12165: CALL_OW 69
12169: ST_TO_ADDR
// if not tmp then
12170: LD_VAR 0 6
12174: NOT
12175: IFFALSE 12179
// exit ;
12177: GO 12325
// s1 := rand ( 1 , 4 ) ;
12179: LD_ADDR_VAR 0 2
12183: PUSH
12184: LD_INT 1
12186: PPUSH
12187: LD_INT 4
12189: PPUSH
12190: CALL_OW 12
12194: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12195: LD_ADDR_VAR 0 4
12199: PUSH
12200: LD_VAR 0 6
12204: PUSH
12205: LD_INT 1
12207: ARRAY
12208: PPUSH
12209: LD_VAR 0 2
12213: PPUSH
12214: CALL_OW 259
12218: ST_TO_ADDR
// if s1 = 1 then
12219: LD_VAR 0 2
12223: PUSH
12224: LD_INT 1
12226: EQUAL
12227: IFFALSE 12247
// s2 := rand ( 2 , 4 ) else
12229: LD_ADDR_VAR 0 3
12233: PUSH
12234: LD_INT 2
12236: PPUSH
12237: LD_INT 4
12239: PPUSH
12240: CALL_OW 12
12244: ST_TO_ADDR
12245: GO 12255
// s2 := 1 ;
12247: LD_ADDR_VAR 0 3
12251: PUSH
12252: LD_INT 1
12254: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12255: LD_ADDR_VAR 0 5
12259: PUSH
12260: LD_VAR 0 6
12264: PUSH
12265: LD_INT 1
12267: ARRAY
12268: PPUSH
12269: LD_VAR 0 3
12273: PPUSH
12274: CALL_OW 259
12278: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12279: LD_VAR 0 6
12283: PUSH
12284: LD_INT 1
12286: ARRAY
12287: PPUSH
12288: LD_VAR 0 2
12292: PPUSH
12293: LD_VAR 0 5
12297: PPUSH
12298: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12302: LD_VAR 0 6
12306: PUSH
12307: LD_INT 1
12309: ARRAY
12310: PPUSH
12311: LD_VAR 0 3
12315: PPUSH
12316: LD_VAR 0 4
12320: PPUSH
12321: CALL_OW 237
// end ;
12325: PPOPN 6
12327: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12328: LD_EXP 2
12332: PUSH
12333: LD_EXP 49
12337: AND
12338: IFFALSE 12417
12340: GO 12342
12342: DISABLE
12343: LD_INT 0
12345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12346: LD_ADDR_VAR 0 1
12350: PUSH
12351: LD_INT 22
12353: PUSH
12354: LD_OWVAR 2
12358: PUSH
12359: EMPTY
12360: LIST
12361: LIST
12362: PUSH
12363: LD_INT 30
12365: PUSH
12366: LD_INT 3
12368: PUSH
12369: EMPTY
12370: LIST
12371: LIST
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PPUSH
12377: CALL_OW 69
12381: ST_TO_ADDR
// if not tmp then
12382: LD_VAR 0 1
12386: NOT
12387: IFFALSE 12391
// exit ;
12389: GO 12417
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12391: LD_VAR 0 1
12395: PUSH
12396: LD_INT 1
12398: PPUSH
12399: LD_VAR 0 1
12403: PPUSH
12404: CALL_OW 12
12408: ARRAY
12409: PPUSH
12410: LD_INT 1
12412: PPUSH
12413: CALL_OW 234
// end ;
12417: PPOPN 1
12419: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12420: LD_EXP 2
12424: PUSH
12425: LD_EXP 50
12429: AND
12430: IFFALSE 12542
12432: GO 12434
12434: DISABLE
12435: LD_INT 0
12437: PPUSH
12438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12439: LD_ADDR_VAR 0 2
12443: PUSH
12444: LD_INT 22
12446: PUSH
12447: LD_OWVAR 2
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: PUSH
12456: LD_INT 2
12458: PUSH
12459: LD_INT 30
12461: PUSH
12462: LD_INT 27
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: PUSH
12469: LD_INT 30
12471: PUSH
12472: LD_INT 26
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: PUSH
12479: LD_INT 30
12481: PUSH
12482: LD_INT 28
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: PPUSH
12499: CALL_OW 69
12503: ST_TO_ADDR
// if not tmp then
12504: LD_VAR 0 2
12508: NOT
12509: IFFALSE 12513
// exit ;
12511: GO 12542
// for i in tmp do
12513: LD_ADDR_VAR 0 1
12517: PUSH
12518: LD_VAR 0 2
12522: PUSH
12523: FOR_IN
12524: IFFALSE 12540
// SetLives ( i , 1 ) ;
12526: LD_VAR 0 1
12530: PPUSH
12531: LD_INT 1
12533: PPUSH
12534: CALL_OW 234
12538: GO 12523
12540: POP
12541: POP
// end ;
12542: PPOPN 2
12544: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12545: LD_EXP 2
12549: PUSH
12550: LD_EXP 51
12554: AND
12555: IFFALSE 12842
12557: GO 12559
12559: DISABLE
12560: LD_INT 0
12562: PPUSH
12563: PPUSH
12564: PPUSH
// begin i := rand ( 1 , 7 ) ;
12565: LD_ADDR_VAR 0 1
12569: PUSH
12570: LD_INT 1
12572: PPUSH
12573: LD_INT 7
12575: PPUSH
12576: CALL_OW 12
12580: ST_TO_ADDR
// case i of 1 :
12581: LD_VAR 0 1
12585: PUSH
12586: LD_INT 1
12588: DOUBLE
12589: EQUAL
12590: IFTRUE 12594
12592: GO 12604
12594: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12595: LD_STRING earthquake(getX(game), 0, 32)
12597: PPUSH
12598: CALL_OW 559
12602: GO 12842
12604: LD_INT 2
12606: DOUBLE
12607: EQUAL
12608: IFTRUE 12612
12610: GO 12626
12612: POP
// begin ToLua ( displayStucuk(); ) ;
12613: LD_STRING displayStucuk();
12615: PPUSH
12616: CALL_OW 559
// ResetFog ;
12620: CALL_OW 335
// end ; 3 :
12624: GO 12842
12626: LD_INT 3
12628: DOUBLE
12629: EQUAL
12630: IFTRUE 12634
12632: GO 12738
12634: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12635: LD_ADDR_VAR 0 2
12639: PUSH
12640: LD_INT 22
12642: PUSH
12643: LD_OWVAR 2
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: PUSH
12652: LD_INT 25
12654: PUSH
12655: LD_INT 1
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PPUSH
12666: CALL_OW 69
12670: ST_TO_ADDR
// if not tmp then
12671: LD_VAR 0 2
12675: NOT
12676: IFFALSE 12680
// exit ;
12678: GO 12842
// un := tmp [ rand ( 1 , tmp ) ] ;
12680: LD_ADDR_VAR 0 3
12684: PUSH
12685: LD_VAR 0 2
12689: PUSH
12690: LD_INT 1
12692: PPUSH
12693: LD_VAR 0 2
12697: PPUSH
12698: CALL_OW 12
12702: ARRAY
12703: ST_TO_ADDR
// if Crawls ( un ) then
12704: LD_VAR 0 3
12708: PPUSH
12709: CALL_OW 318
12713: IFFALSE 12724
// ComWalk ( un ) ;
12715: LD_VAR 0 3
12719: PPUSH
12720: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12724: LD_VAR 0 3
12728: PPUSH
12729: LD_INT 8
12731: PPUSH
12732: CALL_OW 336
// end ; 4 :
12736: GO 12842
12738: LD_INT 4
12740: DOUBLE
12741: EQUAL
12742: IFTRUE 12746
12744: GO 12820
12746: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12747: LD_ADDR_VAR 0 2
12751: PUSH
12752: LD_INT 22
12754: PUSH
12755: LD_OWVAR 2
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: PUSH
12764: LD_INT 30
12766: PUSH
12767: LD_INT 29
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: PPUSH
12778: CALL_OW 69
12782: ST_TO_ADDR
// if not tmp then
12783: LD_VAR 0 2
12787: NOT
12788: IFFALSE 12792
// exit ;
12790: GO 12842
// CenterNowOnUnits ( tmp [ 1 ] ) ;
12792: LD_VAR 0 2
12796: PUSH
12797: LD_INT 1
12799: ARRAY
12800: PPUSH
12801: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
12805: LD_VAR 0 2
12809: PUSH
12810: LD_INT 1
12812: ARRAY
12813: PPUSH
12814: CALL_OW 65
// end ; 5 .. 7 :
12818: GO 12842
12820: LD_INT 5
12822: DOUBLE
12823: GREATEREQUAL
12824: IFFALSE 12832
12826: LD_INT 7
12828: DOUBLE
12829: LESSEQUAL
12830: IFTRUE 12834
12832: GO 12841
12834: POP
// StreamSibBomb ; end ;
12835: CALL 9079 0 0
12839: GO 12842
12841: POP
// end ;
12842: PPOPN 3
12844: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12845: LD_EXP 2
12849: PUSH
12850: LD_EXP 52
12854: AND
12855: IFFALSE 13011
12857: GO 12859
12859: DISABLE
12860: LD_INT 0
12862: PPUSH
12863: PPUSH
12864: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12865: LD_ADDR_VAR 0 2
12869: PUSH
12870: LD_INT 81
12872: PUSH
12873: LD_OWVAR 2
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: PUSH
12882: LD_INT 2
12884: PUSH
12885: LD_INT 21
12887: PUSH
12888: LD_INT 1
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PUSH
12895: LD_INT 21
12897: PUSH
12898: LD_INT 2
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: LIST
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: PPUSH
12914: CALL_OW 69
12918: ST_TO_ADDR
// if not tmp then
12919: LD_VAR 0 2
12923: NOT
12924: IFFALSE 12928
// exit ;
12926: GO 13011
// p := 0 ;
12928: LD_ADDR_VAR 0 3
12932: PUSH
12933: LD_INT 0
12935: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12936: LD_INT 35
12938: PPUSH
12939: CALL_OW 67
// p := p + 1 ;
12943: LD_ADDR_VAR 0 3
12947: PUSH
12948: LD_VAR 0 3
12952: PUSH
12953: LD_INT 1
12955: PLUS
12956: ST_TO_ADDR
// for i in tmp do
12957: LD_ADDR_VAR 0 1
12961: PUSH
12962: LD_VAR 0 2
12966: PUSH
12967: FOR_IN
12968: IFFALSE 12999
// if GetLives ( i ) < 1000 then
12970: LD_VAR 0 1
12974: PPUSH
12975: CALL_OW 256
12979: PUSH
12980: LD_INT 1000
12982: LESS
12983: IFFALSE 12997
// SetLives ( i , 1000 ) ;
12985: LD_VAR 0 1
12989: PPUSH
12990: LD_INT 1000
12992: PPUSH
12993: CALL_OW 234
12997: GO 12967
12999: POP
13000: POP
// until p > 20 ;
13001: LD_VAR 0 3
13005: PUSH
13006: LD_INT 20
13008: GREATER
13009: IFFALSE 12936
// end ;
13011: PPOPN 3
13013: END
// every 0 0$1 trigger StreamModeActive and sTime do
13014: LD_EXP 2
13018: PUSH
13019: LD_EXP 53
13023: AND
13024: IFFALSE 13059
13026: GO 13028
13028: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13029: LD_INT 28
13031: PPUSH
13032: LD_OWVAR 2
13036: PPUSH
13037: LD_INT 2
13039: PPUSH
13040: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13044: LD_INT 30
13046: PPUSH
13047: LD_OWVAR 2
13051: PPUSH
13052: LD_INT 2
13054: PPUSH
13055: CALL_OW 322
// end ;
13059: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13060: LD_EXP 2
13064: PUSH
13065: LD_EXP 54
13069: AND
13070: IFFALSE 13191
13072: GO 13074
13074: DISABLE
13075: LD_INT 0
13077: PPUSH
13078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13079: LD_ADDR_VAR 0 2
13083: PUSH
13084: LD_INT 22
13086: PUSH
13087: LD_OWVAR 2
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: PUSH
13096: LD_INT 21
13098: PUSH
13099: LD_INT 1
13101: PUSH
13102: EMPTY
13103: LIST
13104: LIST
13105: PUSH
13106: LD_INT 3
13108: PUSH
13109: LD_INT 23
13111: PUSH
13112: LD_INT 0
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: LIST
13127: PPUSH
13128: CALL_OW 69
13132: ST_TO_ADDR
// if not tmp then
13133: LD_VAR 0 2
13137: NOT
13138: IFFALSE 13142
// exit ;
13140: GO 13191
// for i in tmp do
13142: LD_ADDR_VAR 0 1
13146: PUSH
13147: LD_VAR 0 2
13151: PUSH
13152: FOR_IN
13153: IFFALSE 13189
// begin if Crawls ( i ) then
13155: LD_VAR 0 1
13159: PPUSH
13160: CALL_OW 318
13164: IFFALSE 13175
// ComWalk ( i ) ;
13166: LD_VAR 0 1
13170: PPUSH
13171: CALL_OW 138
// SetClass ( i , 2 ) ;
13175: LD_VAR 0 1
13179: PPUSH
13180: LD_INT 2
13182: PPUSH
13183: CALL_OW 336
// end ;
13187: GO 13152
13189: POP
13190: POP
// end ;
13191: PPOPN 2
13193: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13194: LD_EXP 2
13198: PUSH
13199: LD_EXP 55
13203: AND
13204: IFFALSE 13492
13206: GO 13208
13208: DISABLE
13209: LD_INT 0
13211: PPUSH
13212: PPUSH
13213: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13214: LD_OWVAR 2
13218: PPUSH
13219: LD_INT 9
13221: PPUSH
13222: LD_INT 1
13224: PPUSH
13225: LD_INT 1
13227: PPUSH
13228: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13232: LD_INT 9
13234: PPUSH
13235: LD_OWVAR 2
13239: PPUSH
13240: CALL_OW 343
// uc_side := 9 ;
13244: LD_ADDR_OWVAR 20
13248: PUSH
13249: LD_INT 9
13251: ST_TO_ADDR
// uc_nation := 2 ;
13252: LD_ADDR_OWVAR 21
13256: PUSH
13257: LD_INT 2
13259: ST_TO_ADDR
// hc_name := Dark Warrior ;
13260: LD_ADDR_OWVAR 26
13264: PUSH
13265: LD_STRING Dark Warrior
13267: ST_TO_ADDR
// hc_gallery :=  ;
13268: LD_ADDR_OWVAR 33
13272: PUSH
13273: LD_STRING 
13275: ST_TO_ADDR
// hc_noskilllimit := true ;
13276: LD_ADDR_OWVAR 76
13280: PUSH
13281: LD_INT 1
13283: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13284: LD_ADDR_OWVAR 31
13288: PUSH
13289: LD_INT 30
13291: PUSH
13292: LD_INT 30
13294: PUSH
13295: LD_INT 30
13297: PUSH
13298: LD_INT 30
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: ST_TO_ADDR
// un := CreateHuman ;
13307: LD_ADDR_VAR 0 3
13311: PUSH
13312: CALL_OW 44
13316: ST_TO_ADDR
// hc_noskilllimit := false ;
13317: LD_ADDR_OWVAR 76
13321: PUSH
13322: LD_INT 0
13324: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13325: LD_VAR 0 3
13329: PPUSH
13330: LD_INT 1
13332: PPUSH
13333: CALL_OW 51
// ToLua ( playRanger() ) ;
13337: LD_STRING playRanger()
13339: PPUSH
13340: CALL_OW 559
// p := 0 ;
13344: LD_ADDR_VAR 0 2
13348: PUSH
13349: LD_INT 0
13351: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13352: LD_INT 35
13354: PPUSH
13355: CALL_OW 67
// p := p + 1 ;
13359: LD_ADDR_VAR 0 2
13363: PUSH
13364: LD_VAR 0 2
13368: PUSH
13369: LD_INT 1
13371: PLUS
13372: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13373: LD_VAR 0 3
13377: PPUSH
13378: CALL_OW 256
13382: PUSH
13383: LD_INT 1000
13385: LESS
13386: IFFALSE 13400
// SetLives ( un , 1000 ) ;
13388: LD_VAR 0 3
13392: PPUSH
13393: LD_INT 1000
13395: PPUSH
13396: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13400: LD_VAR 0 3
13404: PPUSH
13405: LD_INT 81
13407: PUSH
13408: LD_OWVAR 2
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: PUSH
13417: LD_INT 91
13419: PUSH
13420: LD_VAR 0 3
13424: PUSH
13425: LD_INT 30
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: LIST
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PPUSH
13437: CALL_OW 69
13441: PPUSH
13442: LD_VAR 0 3
13446: PPUSH
13447: CALL_OW 74
13451: PPUSH
13452: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
13456: LD_VAR 0 2
13460: PUSH
13461: LD_INT 80
13463: GREATER
13464: PUSH
13465: LD_VAR 0 3
13469: PPUSH
13470: CALL_OW 301
13474: OR
13475: IFFALSE 13352
// if un then
13477: LD_VAR 0 3
13481: IFFALSE 13492
// RemoveUnit ( un ) ;
13483: LD_VAR 0 3
13487: PPUSH
13488: CALL_OW 64
// end ;
13492: PPOPN 3
13494: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
13495: LD_EXP 56
13499: IFFALSE 13615
13501: GO 13503
13503: DISABLE
13504: LD_INT 0
13506: PPUSH
13507: PPUSH
13508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13509: LD_ADDR_VAR 0 2
13513: PUSH
13514: LD_INT 81
13516: PUSH
13517: LD_OWVAR 2
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: PUSH
13526: LD_INT 21
13528: PUSH
13529: LD_INT 1
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PPUSH
13540: CALL_OW 69
13544: ST_TO_ADDR
// ToLua ( playComputer() ) ;
13545: LD_STRING playComputer()
13547: PPUSH
13548: CALL_OW 559
// if not tmp then
13552: LD_VAR 0 2
13556: NOT
13557: IFFALSE 13561
// exit ;
13559: GO 13615
// for i in tmp do
13561: LD_ADDR_VAR 0 1
13565: PUSH
13566: LD_VAR 0 2
13570: PUSH
13571: FOR_IN
13572: IFFALSE 13613
// for j := 1 to 4 do
13574: LD_ADDR_VAR 0 3
13578: PUSH
13579: DOUBLE
13580: LD_INT 1
13582: DEC
13583: ST_TO_ADDR
13584: LD_INT 4
13586: PUSH
13587: FOR_TO
13588: IFFALSE 13609
// SetSkill ( i , j , 10 ) ;
13590: LD_VAR 0 1
13594: PPUSH
13595: LD_VAR 0 3
13599: PPUSH
13600: LD_INT 10
13602: PPUSH
13603: CALL_OW 237
13607: GO 13587
13609: POP
13610: POP
13611: GO 13571
13613: POP
13614: POP
// end ;
13615: PPOPN 3
13617: END
// every 0 0$1 trigger s30 do var i , tmp ;
13618: LD_EXP 57
13622: IFFALSE 13691
13624: GO 13626
13626: DISABLE
13627: LD_INT 0
13629: PPUSH
13630: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13631: LD_ADDR_VAR 0 2
13635: PUSH
13636: LD_INT 22
13638: PUSH
13639: LD_OWVAR 2
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: PPUSH
13648: CALL_OW 69
13652: ST_TO_ADDR
// if not tmp then
13653: LD_VAR 0 2
13657: NOT
13658: IFFALSE 13662
// exit ;
13660: GO 13691
// for i in tmp do
13662: LD_ADDR_VAR 0 1
13666: PUSH
13667: LD_VAR 0 2
13671: PUSH
13672: FOR_IN
13673: IFFALSE 13689
// SetLives ( i , 300 ) ;
13675: LD_VAR 0 1
13679: PPUSH
13680: LD_INT 300
13682: PPUSH
13683: CALL_OW 234
13687: GO 13672
13689: POP
13690: POP
// end ;
13691: PPOPN 2
13693: END
// every 0 0$1 trigger s60 do var i , tmp ;
13694: LD_EXP 58
13698: IFFALSE 13767
13700: GO 13702
13702: DISABLE
13703: LD_INT 0
13705: PPUSH
13706: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13707: LD_ADDR_VAR 0 2
13711: PUSH
13712: LD_INT 22
13714: PUSH
13715: LD_OWVAR 2
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: PPUSH
13724: CALL_OW 69
13728: ST_TO_ADDR
// if not tmp then
13729: LD_VAR 0 2
13733: NOT
13734: IFFALSE 13738
// exit ;
13736: GO 13767
// for i in tmp do
13738: LD_ADDR_VAR 0 1
13742: PUSH
13743: LD_VAR 0 2
13747: PUSH
13748: FOR_IN
13749: IFFALSE 13765
// SetLives ( i , 600 ) ;
13751: LD_VAR 0 1
13755: PPUSH
13756: LD_INT 600
13758: PPUSH
13759: CALL_OW 234
13763: GO 13748
13765: POP
13766: POP
// end ;
13767: PPOPN 2
13769: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13770: LD_INT 0
13772: PPUSH
// case cmd of 301 :
13773: LD_VAR 0 1
13777: PUSH
13778: LD_INT 301
13780: DOUBLE
13781: EQUAL
13782: IFTRUE 13786
13784: GO 13818
13786: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
13787: LD_VAR 0 6
13791: PPUSH
13792: LD_VAR 0 7
13796: PPUSH
13797: LD_VAR 0 8
13801: PPUSH
13802: LD_VAR 0 4
13806: PPUSH
13807: LD_VAR 0 5
13811: PPUSH
13812: CALL 15019 0 5
13816: GO 13939
13818: LD_INT 302
13820: DOUBLE
13821: EQUAL
13822: IFTRUE 13826
13824: GO 13863
13826: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
13827: LD_VAR 0 6
13831: PPUSH
13832: LD_VAR 0 7
13836: PPUSH
13837: LD_VAR 0 8
13841: PPUSH
13842: LD_VAR 0 9
13846: PPUSH
13847: LD_VAR 0 4
13851: PPUSH
13852: LD_VAR 0 5
13856: PPUSH
13857: CALL 15110 0 6
13861: GO 13939
13863: LD_INT 303
13865: DOUBLE
13866: EQUAL
13867: IFTRUE 13871
13869: GO 13908
13871: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
13872: LD_VAR 0 6
13876: PPUSH
13877: LD_VAR 0 7
13881: PPUSH
13882: LD_VAR 0 8
13886: PPUSH
13887: LD_VAR 0 9
13891: PPUSH
13892: LD_VAR 0 4
13896: PPUSH
13897: LD_VAR 0 5
13901: PPUSH
13902: CALL 13944 0 6
13906: GO 13939
13908: LD_INT 304
13910: DOUBLE
13911: EQUAL
13912: IFTRUE 13916
13914: GO 13938
13916: POP
// hHackTeleport ( unit , x , y ) ; end ;
13917: LD_VAR 0 2
13921: PPUSH
13922: LD_VAR 0 4
13926: PPUSH
13927: LD_VAR 0 5
13931: PPUSH
13932: CALL 15703 0 3
13936: GO 13939
13938: POP
// end ;
13939: LD_VAR 0 12
13943: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
13944: LD_INT 0
13946: PPUSH
13947: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
13948: LD_VAR 0 1
13952: PUSH
13953: LD_INT 1
13955: LESS
13956: PUSH
13957: LD_VAR 0 1
13961: PUSH
13962: LD_INT 3
13964: GREATER
13965: OR
13966: PUSH
13967: LD_VAR 0 5
13971: PPUSH
13972: LD_VAR 0 6
13976: PPUSH
13977: CALL_OW 428
13981: OR
13982: IFFALSE 13986
// exit ;
13984: GO 14706
// uc_side := your_side ;
13986: LD_ADDR_OWVAR 20
13990: PUSH
13991: LD_OWVAR 2
13995: ST_TO_ADDR
// uc_nation := nation ;
13996: LD_ADDR_OWVAR 21
14000: PUSH
14001: LD_VAR 0 1
14005: ST_TO_ADDR
// bc_level = 1 ;
14006: LD_ADDR_OWVAR 43
14010: PUSH
14011: LD_INT 1
14013: ST_TO_ADDR
// case btype of 1 :
14014: LD_VAR 0 2
14018: PUSH
14019: LD_INT 1
14021: DOUBLE
14022: EQUAL
14023: IFTRUE 14027
14025: GO 14038
14027: POP
// bc_type := b_depot ; 2 :
14028: LD_ADDR_OWVAR 42
14032: PUSH
14033: LD_INT 0
14035: ST_TO_ADDR
14036: GO 14650
14038: LD_INT 2
14040: DOUBLE
14041: EQUAL
14042: IFTRUE 14046
14044: GO 14057
14046: POP
// bc_type := b_warehouse ; 3 :
14047: LD_ADDR_OWVAR 42
14051: PUSH
14052: LD_INT 1
14054: ST_TO_ADDR
14055: GO 14650
14057: LD_INT 3
14059: DOUBLE
14060: EQUAL
14061: IFTRUE 14065
14063: GO 14076
14065: POP
// bc_type := b_lab ; 4 .. 9 :
14066: LD_ADDR_OWVAR 42
14070: PUSH
14071: LD_INT 6
14073: ST_TO_ADDR
14074: GO 14650
14076: LD_INT 4
14078: DOUBLE
14079: GREATEREQUAL
14080: IFFALSE 14088
14082: LD_INT 9
14084: DOUBLE
14085: LESSEQUAL
14086: IFTRUE 14090
14088: GO 14142
14090: POP
// begin bc_type := b_lab_half ;
14091: LD_ADDR_OWVAR 42
14095: PUSH
14096: LD_INT 7
14098: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14099: LD_ADDR_OWVAR 44
14103: PUSH
14104: LD_INT 10
14106: PUSH
14107: LD_INT 11
14109: PUSH
14110: LD_INT 12
14112: PUSH
14113: LD_INT 15
14115: PUSH
14116: LD_INT 14
14118: PUSH
14119: LD_INT 13
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: PUSH
14130: LD_VAR 0 2
14134: PUSH
14135: LD_INT 3
14137: MINUS
14138: ARRAY
14139: ST_TO_ADDR
// end ; 10 .. 13 :
14140: GO 14650
14142: LD_INT 10
14144: DOUBLE
14145: GREATEREQUAL
14146: IFFALSE 14154
14148: LD_INT 13
14150: DOUBLE
14151: LESSEQUAL
14152: IFTRUE 14156
14154: GO 14233
14156: POP
// begin bc_type := b_lab_full ;
14157: LD_ADDR_OWVAR 42
14161: PUSH
14162: LD_INT 8
14164: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14165: LD_ADDR_OWVAR 44
14169: PUSH
14170: LD_INT 10
14172: PUSH
14173: LD_INT 12
14175: PUSH
14176: LD_INT 14
14178: PUSH
14179: LD_INT 13
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: PUSH
14188: LD_VAR 0 2
14192: PUSH
14193: LD_INT 9
14195: MINUS
14196: ARRAY
14197: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14198: LD_ADDR_OWVAR 45
14202: PUSH
14203: LD_INT 11
14205: PUSH
14206: LD_INT 15
14208: PUSH
14209: LD_INT 12
14211: PUSH
14212: LD_INT 15
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: PUSH
14221: LD_VAR 0 2
14225: PUSH
14226: LD_INT 9
14228: MINUS
14229: ARRAY
14230: ST_TO_ADDR
// end ; 14 :
14231: GO 14650
14233: LD_INT 14
14235: DOUBLE
14236: EQUAL
14237: IFTRUE 14241
14239: GO 14252
14241: POP
// bc_type := b_workshop ; 15 :
14242: LD_ADDR_OWVAR 42
14246: PUSH
14247: LD_INT 2
14249: ST_TO_ADDR
14250: GO 14650
14252: LD_INT 15
14254: DOUBLE
14255: EQUAL
14256: IFTRUE 14260
14258: GO 14271
14260: POP
// bc_type := b_factory ; 16 :
14261: LD_ADDR_OWVAR 42
14265: PUSH
14266: LD_INT 3
14268: ST_TO_ADDR
14269: GO 14650
14271: LD_INT 16
14273: DOUBLE
14274: EQUAL
14275: IFTRUE 14279
14277: GO 14290
14279: POP
// bc_type := b_ext_gun ; 17 :
14280: LD_ADDR_OWVAR 42
14284: PUSH
14285: LD_INT 17
14287: ST_TO_ADDR
14288: GO 14650
14290: LD_INT 17
14292: DOUBLE
14293: EQUAL
14294: IFTRUE 14298
14296: GO 14326
14298: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14299: LD_ADDR_OWVAR 42
14303: PUSH
14304: LD_INT 19
14306: PUSH
14307: LD_INT 23
14309: PUSH
14310: LD_INT 19
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: LIST
14317: PUSH
14318: LD_VAR 0 1
14322: ARRAY
14323: ST_TO_ADDR
14324: GO 14650
14326: LD_INT 18
14328: DOUBLE
14329: EQUAL
14330: IFTRUE 14334
14332: GO 14345
14334: POP
// bc_type := b_ext_radar ; 19 :
14335: LD_ADDR_OWVAR 42
14339: PUSH
14340: LD_INT 20
14342: ST_TO_ADDR
14343: GO 14650
14345: LD_INT 19
14347: DOUBLE
14348: EQUAL
14349: IFTRUE 14353
14351: GO 14364
14353: POP
// bc_type := b_ext_radio ; 20 :
14354: LD_ADDR_OWVAR 42
14358: PUSH
14359: LD_INT 22
14361: ST_TO_ADDR
14362: GO 14650
14364: LD_INT 20
14366: DOUBLE
14367: EQUAL
14368: IFTRUE 14372
14370: GO 14383
14372: POP
// bc_type := b_ext_siberium ; 21 :
14373: LD_ADDR_OWVAR 42
14377: PUSH
14378: LD_INT 21
14380: ST_TO_ADDR
14381: GO 14650
14383: LD_INT 21
14385: DOUBLE
14386: EQUAL
14387: IFTRUE 14391
14389: GO 14402
14391: POP
// bc_type := b_ext_computer ; 22 :
14392: LD_ADDR_OWVAR 42
14396: PUSH
14397: LD_INT 24
14399: ST_TO_ADDR
14400: GO 14650
14402: LD_INT 22
14404: DOUBLE
14405: EQUAL
14406: IFTRUE 14410
14408: GO 14421
14410: POP
// bc_type := b_ext_track ; 23 :
14411: LD_ADDR_OWVAR 42
14415: PUSH
14416: LD_INT 16
14418: ST_TO_ADDR
14419: GO 14650
14421: LD_INT 23
14423: DOUBLE
14424: EQUAL
14425: IFTRUE 14429
14427: GO 14440
14429: POP
// bc_type := b_ext_laser ; 24 :
14430: LD_ADDR_OWVAR 42
14434: PUSH
14435: LD_INT 25
14437: ST_TO_ADDR
14438: GO 14650
14440: LD_INT 24
14442: DOUBLE
14443: EQUAL
14444: IFTRUE 14448
14446: GO 14459
14448: POP
// bc_type := b_control_tower ; 25 :
14449: LD_ADDR_OWVAR 42
14453: PUSH
14454: LD_INT 36
14456: ST_TO_ADDR
14457: GO 14650
14459: LD_INT 25
14461: DOUBLE
14462: EQUAL
14463: IFTRUE 14467
14465: GO 14478
14467: POP
// bc_type := b_breastwork ; 26 :
14468: LD_ADDR_OWVAR 42
14472: PUSH
14473: LD_INT 31
14475: ST_TO_ADDR
14476: GO 14650
14478: LD_INT 26
14480: DOUBLE
14481: EQUAL
14482: IFTRUE 14486
14484: GO 14497
14486: POP
// bc_type := b_bunker ; 27 :
14487: LD_ADDR_OWVAR 42
14491: PUSH
14492: LD_INT 32
14494: ST_TO_ADDR
14495: GO 14650
14497: LD_INT 27
14499: DOUBLE
14500: EQUAL
14501: IFTRUE 14505
14503: GO 14516
14505: POP
// bc_type := b_turret ; 28 :
14506: LD_ADDR_OWVAR 42
14510: PUSH
14511: LD_INT 33
14513: ST_TO_ADDR
14514: GO 14650
14516: LD_INT 28
14518: DOUBLE
14519: EQUAL
14520: IFTRUE 14524
14522: GO 14535
14524: POP
// bc_type := b_armoury ; 29 :
14525: LD_ADDR_OWVAR 42
14529: PUSH
14530: LD_INT 4
14532: ST_TO_ADDR
14533: GO 14650
14535: LD_INT 29
14537: DOUBLE
14538: EQUAL
14539: IFTRUE 14543
14541: GO 14554
14543: POP
// bc_type := b_barracks ; 30 :
14544: LD_ADDR_OWVAR 42
14548: PUSH
14549: LD_INT 5
14551: ST_TO_ADDR
14552: GO 14650
14554: LD_INT 30
14556: DOUBLE
14557: EQUAL
14558: IFTRUE 14562
14560: GO 14573
14562: POP
// bc_type := b_solar_power ; 31 :
14563: LD_ADDR_OWVAR 42
14567: PUSH
14568: LD_INT 27
14570: ST_TO_ADDR
14571: GO 14650
14573: LD_INT 31
14575: DOUBLE
14576: EQUAL
14577: IFTRUE 14581
14579: GO 14592
14581: POP
// bc_type := b_oil_power ; 32 :
14582: LD_ADDR_OWVAR 42
14586: PUSH
14587: LD_INT 26
14589: ST_TO_ADDR
14590: GO 14650
14592: LD_INT 32
14594: DOUBLE
14595: EQUAL
14596: IFTRUE 14600
14598: GO 14611
14600: POP
// bc_type := b_siberite_power ; 33 :
14601: LD_ADDR_OWVAR 42
14605: PUSH
14606: LD_INT 28
14608: ST_TO_ADDR
14609: GO 14650
14611: LD_INT 33
14613: DOUBLE
14614: EQUAL
14615: IFTRUE 14619
14617: GO 14630
14619: POP
// bc_type := b_oil_mine ; 34 :
14620: LD_ADDR_OWVAR 42
14624: PUSH
14625: LD_INT 29
14627: ST_TO_ADDR
14628: GO 14650
14630: LD_INT 34
14632: DOUBLE
14633: EQUAL
14634: IFTRUE 14638
14636: GO 14649
14638: POP
// bc_type := b_siberite_mine ; end ;
14639: LD_ADDR_OWVAR 42
14643: PUSH
14644: LD_INT 30
14646: ST_TO_ADDR
14647: GO 14650
14649: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
14650: LD_ADDR_VAR 0 8
14654: PUSH
14655: LD_VAR 0 5
14659: PPUSH
14660: LD_VAR 0 6
14664: PPUSH
14665: LD_VAR 0 3
14669: PPUSH
14670: CALL_OW 47
14674: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
14675: LD_OWVAR 42
14679: PUSH
14680: LD_INT 32
14682: PUSH
14683: LD_INT 33
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: IN
14690: IFFALSE 14706
// PlaceWeaponTurret ( b , weapon ) ;
14692: LD_VAR 0 8
14696: PPUSH
14697: LD_VAR 0 4
14701: PPUSH
14702: CALL_OW 431
// end ;
14706: LD_VAR 0 7
14710: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
14711: LD_INT 0
14713: PPUSH
14714: PPUSH
14715: PPUSH
14716: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14717: LD_ADDR_VAR 0 4
14721: PUSH
14722: LD_INT 22
14724: PUSH
14725: LD_OWVAR 2
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: PUSH
14734: LD_INT 2
14736: PUSH
14737: LD_INT 30
14739: PUSH
14740: LD_INT 0
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: PUSH
14747: LD_INT 30
14749: PUSH
14750: LD_INT 1
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: LIST
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PPUSH
14766: CALL_OW 69
14770: ST_TO_ADDR
// if not tmp then
14771: LD_VAR 0 4
14775: NOT
14776: IFFALSE 14780
// exit ;
14778: GO 14839
// for i in tmp do
14780: LD_ADDR_VAR 0 2
14784: PUSH
14785: LD_VAR 0 4
14789: PUSH
14790: FOR_IN
14791: IFFALSE 14837
// for j = 1 to 3 do
14793: LD_ADDR_VAR 0 3
14797: PUSH
14798: DOUBLE
14799: LD_INT 1
14801: DEC
14802: ST_TO_ADDR
14803: LD_INT 3
14805: PUSH
14806: FOR_TO
14807: IFFALSE 14833
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14809: LD_VAR 0 2
14813: PPUSH
14814: CALL_OW 274
14818: PPUSH
14819: LD_VAR 0 3
14823: PPUSH
14824: LD_INT 99999
14826: PPUSH
14827: CALL_OW 277
14831: GO 14806
14833: POP
14834: POP
14835: GO 14790
14837: POP
14838: POP
// end ;
14839: LD_VAR 0 1
14843: RET
// export function hHackSetLevel10 ; var i , j ; begin
14844: LD_INT 0
14846: PPUSH
14847: PPUSH
14848: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14849: LD_ADDR_VAR 0 2
14853: PUSH
14854: LD_INT 21
14856: PUSH
14857: LD_INT 1
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: PPUSH
14864: CALL_OW 69
14868: PUSH
14869: FOR_IN
14870: IFFALSE 14922
// if IsSelected ( i ) then
14872: LD_VAR 0 2
14876: PPUSH
14877: CALL_OW 306
14881: IFFALSE 14920
// begin for j := 1 to 4 do
14883: LD_ADDR_VAR 0 3
14887: PUSH
14888: DOUBLE
14889: LD_INT 1
14891: DEC
14892: ST_TO_ADDR
14893: LD_INT 4
14895: PUSH
14896: FOR_TO
14897: IFFALSE 14918
// SetSkill ( i , j , 10 ) ;
14899: LD_VAR 0 2
14903: PPUSH
14904: LD_VAR 0 3
14908: PPUSH
14909: LD_INT 10
14911: PPUSH
14912: CALL_OW 237
14916: GO 14896
14918: POP
14919: POP
// end ;
14920: GO 14869
14922: POP
14923: POP
// end ;
14924: LD_VAR 0 1
14928: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
14929: LD_INT 0
14931: PPUSH
14932: PPUSH
14933: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
14934: LD_ADDR_VAR 0 2
14938: PUSH
14939: LD_INT 22
14941: PUSH
14942: LD_OWVAR 2
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: PUSH
14951: LD_INT 21
14953: PUSH
14954: LD_INT 1
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PPUSH
14965: CALL_OW 69
14969: PUSH
14970: FOR_IN
14971: IFFALSE 15012
// begin for j := 1 to 4 do
14973: LD_ADDR_VAR 0 3
14977: PUSH
14978: DOUBLE
14979: LD_INT 1
14981: DEC
14982: ST_TO_ADDR
14983: LD_INT 4
14985: PUSH
14986: FOR_TO
14987: IFFALSE 15008
// SetSkill ( i , j , 10 ) ;
14989: LD_VAR 0 2
14993: PPUSH
14994: LD_VAR 0 3
14998: PPUSH
14999: LD_INT 10
15001: PPUSH
15002: CALL_OW 237
15006: GO 14986
15008: POP
15009: POP
// end ;
15010: GO 14970
15012: POP
15013: POP
// end ;
15014: LD_VAR 0 1
15018: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15019: LD_INT 0
15021: PPUSH
// uc_side := your_side ;
15022: LD_ADDR_OWVAR 20
15026: PUSH
15027: LD_OWVAR 2
15031: ST_TO_ADDR
// uc_nation := nation ;
15032: LD_ADDR_OWVAR 21
15036: PUSH
15037: LD_VAR 0 1
15041: ST_TO_ADDR
// InitHc ;
15042: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15046: LD_INT 0
15048: PPUSH
15049: LD_VAR 0 2
15053: PPUSH
15054: LD_VAR 0 3
15058: PPUSH
15059: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15063: LD_VAR 0 4
15067: PPUSH
15068: LD_VAR 0 5
15072: PPUSH
15073: CALL_OW 428
15077: PUSH
15078: LD_INT 0
15080: EQUAL
15081: IFFALSE 15105
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15083: CALL_OW 44
15087: PPUSH
15088: LD_VAR 0 4
15092: PPUSH
15093: LD_VAR 0 5
15097: PPUSH
15098: LD_INT 1
15100: PPUSH
15101: CALL_OW 48
// end ;
15105: LD_VAR 0 6
15109: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15110: LD_INT 0
15112: PPUSH
15113: PPUSH
// uc_side := your_side ;
15114: LD_ADDR_OWVAR 20
15118: PUSH
15119: LD_OWVAR 2
15123: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15124: LD_VAR 0 1
15128: PUSH
15129: LD_INT 1
15131: PUSH
15132: LD_INT 2
15134: PUSH
15135: LD_INT 3
15137: PUSH
15138: LD_INT 4
15140: PUSH
15141: LD_INT 5
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: IN
15151: IFFALSE 15163
// uc_nation := nation_american else
15153: LD_ADDR_OWVAR 21
15157: PUSH
15158: LD_INT 1
15160: ST_TO_ADDR
15161: GO 15206
// if chassis in [ 11 , 12 , 13 , 14 ] then
15163: LD_VAR 0 1
15167: PUSH
15168: LD_INT 11
15170: PUSH
15171: LD_INT 12
15173: PUSH
15174: LD_INT 13
15176: PUSH
15177: LD_INT 14
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: IN
15186: IFFALSE 15198
// uc_nation := nation_arabian else
15188: LD_ADDR_OWVAR 21
15192: PUSH
15193: LD_INT 2
15195: ST_TO_ADDR
15196: GO 15206
// uc_nation := nation_russian ;
15198: LD_ADDR_OWVAR 21
15202: PUSH
15203: LD_INT 3
15205: ST_TO_ADDR
// vc_chassis := chassis ;
15206: LD_ADDR_OWVAR 37
15210: PUSH
15211: LD_VAR 0 1
15215: ST_TO_ADDR
// vc_engine := engine ;
15216: LD_ADDR_OWVAR 39
15220: PUSH
15221: LD_VAR 0 2
15225: ST_TO_ADDR
// vc_control := control ;
15226: LD_ADDR_OWVAR 38
15230: PUSH
15231: LD_VAR 0 3
15235: ST_TO_ADDR
// vc_weapon := weapon ;
15236: LD_ADDR_OWVAR 40
15240: PUSH
15241: LD_VAR 0 4
15245: ST_TO_ADDR
// un := CreateVehicle ;
15246: LD_ADDR_VAR 0 8
15250: PUSH
15251: CALL_OW 45
15255: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15256: LD_VAR 0 8
15260: PPUSH
15261: LD_INT 0
15263: PPUSH
15264: LD_INT 5
15266: PPUSH
15267: CALL_OW 12
15271: PPUSH
15272: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15276: LD_VAR 0 8
15280: PPUSH
15281: LD_VAR 0 5
15285: PPUSH
15286: LD_VAR 0 6
15290: PPUSH
15291: LD_INT 1
15293: PPUSH
15294: CALL_OW 48
// end ;
15298: LD_VAR 0 7
15302: RET
// export hInvincible ; every 1 do
15303: GO 15305
15305: DISABLE
// hInvincible := [ ] ;
15306: LD_ADDR_EXP 59
15310: PUSH
15311: EMPTY
15312: ST_TO_ADDR
15313: END
// every 10 do var i ;
15314: GO 15316
15316: DISABLE
15317: LD_INT 0
15319: PPUSH
// begin enable ;
15320: ENABLE
// if not hInvincible then
15321: LD_EXP 59
15325: NOT
15326: IFFALSE 15330
// exit ;
15328: GO 15374
// for i in hInvincible do
15330: LD_ADDR_VAR 0 1
15334: PUSH
15335: LD_EXP 59
15339: PUSH
15340: FOR_IN
15341: IFFALSE 15372
// if GetLives ( i ) < 1000 then
15343: LD_VAR 0 1
15347: PPUSH
15348: CALL_OW 256
15352: PUSH
15353: LD_INT 1000
15355: LESS
15356: IFFALSE 15370
// SetLives ( i , 1000 ) ;
15358: LD_VAR 0 1
15362: PPUSH
15363: LD_INT 1000
15365: PPUSH
15366: CALL_OW 234
15370: GO 15340
15372: POP
15373: POP
// end ;
15374: PPOPN 1
15376: END
// export function hHackInvincible ; var i ; begin
15377: LD_INT 0
15379: PPUSH
15380: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15381: LD_ADDR_VAR 0 2
15385: PUSH
15386: LD_INT 2
15388: PUSH
15389: LD_INT 21
15391: PUSH
15392: LD_INT 1
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: LD_INT 21
15401: PUSH
15402: LD_INT 2
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: LIST
15413: PPUSH
15414: CALL_OW 69
15418: PUSH
15419: FOR_IN
15420: IFFALSE 15481
// if IsSelected ( i ) then
15422: LD_VAR 0 2
15426: PPUSH
15427: CALL_OW 306
15431: IFFALSE 15479
// begin if i in hInvincible then
15433: LD_VAR 0 2
15437: PUSH
15438: LD_EXP 59
15442: IN
15443: IFFALSE 15463
// hInvincible := hInvincible diff i else
15445: LD_ADDR_EXP 59
15449: PUSH
15450: LD_EXP 59
15454: PUSH
15455: LD_VAR 0 2
15459: DIFF
15460: ST_TO_ADDR
15461: GO 15479
// hInvincible := hInvincible union i ;
15463: LD_ADDR_EXP 59
15467: PUSH
15468: LD_EXP 59
15472: PUSH
15473: LD_VAR 0 2
15477: UNION
15478: ST_TO_ADDR
// end ;
15479: GO 15419
15481: POP
15482: POP
// end ;
15483: LD_VAR 0 1
15487: RET
// export function hHackInvisible ; var i , j ; begin
15488: LD_INT 0
15490: PPUSH
15491: PPUSH
15492: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15493: LD_ADDR_VAR 0 2
15497: PUSH
15498: LD_INT 21
15500: PUSH
15501: LD_INT 1
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: PPUSH
15508: CALL_OW 69
15512: PUSH
15513: FOR_IN
15514: IFFALSE 15538
// if IsSelected ( i ) then
15516: LD_VAR 0 2
15520: PPUSH
15521: CALL_OW 306
15525: IFFALSE 15536
// ComForceInvisible ( i ) ;
15527: LD_VAR 0 2
15531: PPUSH
15532: CALL_OW 496
15536: GO 15513
15538: POP
15539: POP
// end ;
15540: LD_VAR 0 1
15544: RET
// export function hHackChangeYourSide ; begin
15545: LD_INT 0
15547: PPUSH
// if your_side = 8 then
15548: LD_OWVAR 2
15552: PUSH
15553: LD_INT 8
15555: EQUAL
15556: IFFALSE 15568
// your_side := 0 else
15558: LD_ADDR_OWVAR 2
15562: PUSH
15563: LD_INT 0
15565: ST_TO_ADDR
15566: GO 15582
// your_side := your_side + 1 ;
15568: LD_ADDR_OWVAR 2
15572: PUSH
15573: LD_OWVAR 2
15577: PUSH
15578: LD_INT 1
15580: PLUS
15581: ST_TO_ADDR
// end ;
15582: LD_VAR 0 1
15586: RET
// export function hHackChangeUnitSide ; var i , j ; begin
15587: LD_INT 0
15589: PPUSH
15590: PPUSH
15591: PPUSH
// for i in all_units do
15592: LD_ADDR_VAR 0 2
15596: PUSH
15597: LD_OWVAR 3
15601: PUSH
15602: FOR_IN
15603: IFFALSE 15681
// if IsSelected ( i ) then
15605: LD_VAR 0 2
15609: PPUSH
15610: CALL_OW 306
15614: IFFALSE 15679
// begin j := GetSide ( i ) ;
15616: LD_ADDR_VAR 0 3
15620: PUSH
15621: LD_VAR 0 2
15625: PPUSH
15626: CALL_OW 255
15630: ST_TO_ADDR
// if j = 8 then
15631: LD_VAR 0 3
15635: PUSH
15636: LD_INT 8
15638: EQUAL
15639: IFFALSE 15651
// j := 0 else
15641: LD_ADDR_VAR 0 3
15645: PUSH
15646: LD_INT 0
15648: ST_TO_ADDR
15649: GO 15665
// j := j + 1 ;
15651: LD_ADDR_VAR 0 3
15655: PUSH
15656: LD_VAR 0 3
15660: PUSH
15661: LD_INT 1
15663: PLUS
15664: ST_TO_ADDR
// SetSide ( i , j ) ;
15665: LD_VAR 0 2
15669: PPUSH
15670: LD_VAR 0 3
15674: PPUSH
15675: CALL_OW 235
// end ;
15679: GO 15602
15681: POP
15682: POP
// end ;
15683: LD_VAR 0 1
15687: RET
// export function hHackFog ; begin
15688: LD_INT 0
15690: PPUSH
// FogOff ( true ) ;
15691: LD_INT 1
15693: PPUSH
15694: CALL_OW 344
// end ;
15698: LD_VAR 0 1
15702: RET
// export function hHackTeleport ( unit , x , y ) ; begin
15703: LD_INT 0
15705: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
15706: LD_VAR 0 1
15710: PPUSH
15711: LD_VAR 0 2
15715: PPUSH
15716: LD_VAR 0 3
15720: PPUSH
15721: LD_INT 1
15723: PPUSH
15724: LD_INT 1
15726: PPUSH
15727: CALL_OW 483
// CenterOnXY ( x , y ) ;
15731: LD_VAR 0 2
15735: PPUSH
15736: LD_VAR 0 3
15740: PPUSH
15741: CALL_OW 84
// end ;
15745: LD_VAR 0 4
15749: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
15750: LD_INT 0
15752: PPUSH
15753: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
15754: LD_VAR 0 1
15758: NOT
15759: PUSH
15760: LD_VAR 0 2
15764: PPUSH
15765: LD_VAR 0 3
15769: PPUSH
15770: CALL_OW 488
15774: NOT
15775: OR
15776: PUSH
15777: LD_VAR 0 1
15781: PPUSH
15782: CALL_OW 266
15786: PUSH
15787: LD_INT 3
15789: NONEQUAL
15790: PUSH
15791: LD_VAR 0 1
15795: PPUSH
15796: CALL_OW 247
15800: PUSH
15801: LD_INT 1
15803: EQUAL
15804: NOT
15805: AND
15806: OR
15807: IFFALSE 15811
// exit ;
15809: GO 15960
// if GetType ( factory ) = unit_human then
15811: LD_VAR 0 1
15815: PPUSH
15816: CALL_OW 247
15820: PUSH
15821: LD_INT 1
15823: EQUAL
15824: IFFALSE 15841
// factory := IsInUnit ( factory ) ;
15826: LD_ADDR_VAR 0 1
15830: PUSH
15831: LD_VAR 0 1
15835: PPUSH
15836: CALL_OW 310
15840: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
15841: LD_VAR 0 1
15845: PPUSH
15846: CALL_OW 266
15850: PUSH
15851: LD_INT 3
15853: NONEQUAL
15854: IFFALSE 15858
// exit ;
15856: GO 15960
// if HexInfo ( x , y ) = factory then
15858: LD_VAR 0 2
15862: PPUSH
15863: LD_VAR 0 3
15867: PPUSH
15868: CALL_OW 428
15872: PUSH
15873: LD_VAR 0 1
15877: EQUAL
15878: IFFALSE 15905
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
15880: LD_ADDR_EXP 60
15884: PUSH
15885: LD_EXP 60
15889: PPUSH
15890: LD_VAR 0 1
15894: PPUSH
15895: LD_INT 0
15897: PPUSH
15898: CALL_OW 1
15902: ST_TO_ADDR
15903: GO 15956
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
15905: LD_ADDR_EXP 60
15909: PUSH
15910: LD_EXP 60
15914: PPUSH
15915: LD_VAR 0 1
15919: PPUSH
15920: LD_VAR 0 1
15924: PPUSH
15925: CALL_OW 255
15929: PUSH
15930: LD_VAR 0 1
15934: PUSH
15935: LD_VAR 0 2
15939: PUSH
15940: LD_VAR 0 3
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: PPUSH
15951: CALL_OW 1
15955: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15956: CALL 15965 0 0
// end ;
15960: LD_VAR 0 4
15964: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
15965: LD_INT 0
15967: PPUSH
15968: PPUSH
15969: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
15970: LD_STRING resetFactoryWaypoint();
15972: PPUSH
15973: CALL_OW 559
// if factoryWaypoints then
15977: LD_EXP 60
15981: IFFALSE 16107
// begin list := PrepareArray ( factoryWaypoints ) ;
15983: LD_ADDR_VAR 0 3
15987: PUSH
15988: LD_EXP 60
15992: PPUSH
15993: CALL 62779 0 1
15997: ST_TO_ADDR
// for i := 1 to list do
15998: LD_ADDR_VAR 0 2
16002: PUSH
16003: DOUBLE
16004: LD_INT 1
16006: DEC
16007: ST_TO_ADDR
16008: LD_VAR 0 3
16012: PUSH
16013: FOR_TO
16014: IFFALSE 16105
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16016: LD_STRING setFactoryWaypointXY(
16018: PUSH
16019: LD_VAR 0 3
16023: PUSH
16024: LD_VAR 0 2
16028: ARRAY
16029: PUSH
16030: LD_INT 1
16032: ARRAY
16033: STR
16034: PUSH
16035: LD_STRING ,
16037: STR
16038: PUSH
16039: LD_VAR 0 3
16043: PUSH
16044: LD_VAR 0 2
16048: ARRAY
16049: PUSH
16050: LD_INT 2
16052: ARRAY
16053: STR
16054: PUSH
16055: LD_STRING ,
16057: STR
16058: PUSH
16059: LD_VAR 0 3
16063: PUSH
16064: LD_VAR 0 2
16068: ARRAY
16069: PUSH
16070: LD_INT 3
16072: ARRAY
16073: STR
16074: PUSH
16075: LD_STRING ,
16077: STR
16078: PUSH
16079: LD_VAR 0 3
16083: PUSH
16084: LD_VAR 0 2
16088: ARRAY
16089: PUSH
16090: LD_INT 4
16092: ARRAY
16093: STR
16094: PUSH
16095: LD_STRING )
16097: STR
16098: PPUSH
16099: CALL_OW 559
16103: GO 16013
16105: POP
16106: POP
// end ; end ;
16107: LD_VAR 0 1
16111: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16112: LD_INT 0
16114: PPUSH
// if HexInfo ( x , y ) = warehouse then
16115: LD_VAR 0 2
16119: PPUSH
16120: LD_VAR 0 3
16124: PPUSH
16125: CALL_OW 428
16129: PUSH
16130: LD_VAR 0 1
16134: EQUAL
16135: IFFALSE 16162
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16137: LD_ADDR_EXP 61
16141: PUSH
16142: LD_EXP 61
16146: PPUSH
16147: LD_VAR 0 1
16151: PPUSH
16152: LD_INT 0
16154: PPUSH
16155: CALL_OW 1
16159: ST_TO_ADDR
16160: GO 16213
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16162: LD_ADDR_EXP 61
16166: PUSH
16167: LD_EXP 61
16171: PPUSH
16172: LD_VAR 0 1
16176: PPUSH
16177: LD_VAR 0 1
16181: PPUSH
16182: CALL_OW 255
16186: PUSH
16187: LD_VAR 0 1
16191: PUSH
16192: LD_VAR 0 2
16196: PUSH
16197: LD_VAR 0 3
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: PPUSH
16208: CALL_OW 1
16212: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16213: CALL 16222 0 0
// end ;
16217: LD_VAR 0 4
16221: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16222: LD_INT 0
16224: PPUSH
16225: PPUSH
16226: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16227: LD_STRING resetWarehouseGatheringPoints();
16229: PPUSH
16230: CALL_OW 559
// if warehouseGatheringPoints then
16234: LD_EXP 61
16238: IFFALSE 16364
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16240: LD_ADDR_VAR 0 3
16244: PUSH
16245: LD_EXP 61
16249: PPUSH
16250: CALL 62779 0 1
16254: ST_TO_ADDR
// for i := 1 to list do
16255: LD_ADDR_VAR 0 2
16259: PUSH
16260: DOUBLE
16261: LD_INT 1
16263: DEC
16264: ST_TO_ADDR
16265: LD_VAR 0 3
16269: PUSH
16270: FOR_TO
16271: IFFALSE 16362
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16273: LD_STRING setWarehouseGatheringPointXY(
16275: PUSH
16276: LD_VAR 0 3
16280: PUSH
16281: LD_VAR 0 2
16285: ARRAY
16286: PUSH
16287: LD_INT 1
16289: ARRAY
16290: STR
16291: PUSH
16292: LD_STRING ,
16294: STR
16295: PUSH
16296: LD_VAR 0 3
16300: PUSH
16301: LD_VAR 0 2
16305: ARRAY
16306: PUSH
16307: LD_INT 2
16309: ARRAY
16310: STR
16311: PUSH
16312: LD_STRING ,
16314: STR
16315: PUSH
16316: LD_VAR 0 3
16320: PUSH
16321: LD_VAR 0 2
16325: ARRAY
16326: PUSH
16327: LD_INT 3
16329: ARRAY
16330: STR
16331: PUSH
16332: LD_STRING ,
16334: STR
16335: PUSH
16336: LD_VAR 0 3
16340: PUSH
16341: LD_VAR 0 2
16345: ARRAY
16346: PUSH
16347: LD_INT 4
16349: ARRAY
16350: STR
16351: PUSH
16352: LD_STRING )
16354: STR
16355: PPUSH
16356: CALL_OW 559
16360: GO 16270
16362: POP
16363: POP
// end ; end ;
16364: LD_VAR 0 1
16368: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
16369: LD_EXP 61
16373: IFFALSE 17058
16375: GO 16377
16377: DISABLE
16378: LD_INT 0
16380: PPUSH
16381: PPUSH
16382: PPUSH
16383: PPUSH
16384: PPUSH
16385: PPUSH
16386: PPUSH
16387: PPUSH
16388: PPUSH
// begin enable ;
16389: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
16390: LD_ADDR_VAR 0 3
16394: PUSH
16395: LD_EXP 61
16399: PPUSH
16400: CALL 62779 0 1
16404: ST_TO_ADDR
// if not list then
16405: LD_VAR 0 3
16409: NOT
16410: IFFALSE 16414
// exit ;
16412: GO 17058
// for i := 1 to list do
16414: LD_ADDR_VAR 0 1
16418: PUSH
16419: DOUBLE
16420: LD_INT 1
16422: DEC
16423: ST_TO_ADDR
16424: LD_VAR 0 3
16428: PUSH
16429: FOR_TO
16430: IFFALSE 17056
// begin depot := list [ i ] [ 2 ] ;
16432: LD_ADDR_VAR 0 8
16436: PUSH
16437: LD_VAR 0 3
16441: PUSH
16442: LD_VAR 0 1
16446: ARRAY
16447: PUSH
16448: LD_INT 2
16450: ARRAY
16451: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
16452: LD_ADDR_VAR 0 5
16456: PUSH
16457: LD_VAR 0 3
16461: PUSH
16462: LD_VAR 0 1
16466: ARRAY
16467: PUSH
16468: LD_INT 1
16470: ARRAY
16471: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
16472: LD_VAR 0 8
16476: PPUSH
16477: CALL_OW 301
16481: PUSH
16482: LD_VAR 0 5
16486: PUSH
16487: LD_VAR 0 8
16491: PPUSH
16492: CALL_OW 255
16496: NONEQUAL
16497: OR
16498: IFFALSE 16527
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
16500: LD_ADDR_EXP 61
16504: PUSH
16505: LD_EXP 61
16509: PPUSH
16510: LD_VAR 0 8
16514: PPUSH
16515: LD_INT 0
16517: PPUSH
16518: CALL_OW 1
16522: ST_TO_ADDR
// exit ;
16523: POP
16524: POP
16525: GO 17058
// end ; x := list [ i ] [ 3 ] ;
16527: LD_ADDR_VAR 0 6
16531: PUSH
16532: LD_VAR 0 3
16536: PUSH
16537: LD_VAR 0 1
16541: ARRAY
16542: PUSH
16543: LD_INT 3
16545: ARRAY
16546: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
16547: LD_ADDR_VAR 0 7
16551: PUSH
16552: LD_VAR 0 3
16556: PUSH
16557: LD_VAR 0 1
16561: ARRAY
16562: PUSH
16563: LD_INT 4
16565: ARRAY
16566: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
16567: LD_ADDR_VAR 0 9
16571: PUSH
16572: LD_VAR 0 6
16576: PPUSH
16577: LD_VAR 0 7
16581: PPUSH
16582: LD_INT 16
16584: PPUSH
16585: CALL 61367 0 3
16589: ST_TO_ADDR
// if not cratesNearbyPoint then
16590: LD_VAR 0 9
16594: NOT
16595: IFFALSE 16601
// exit ;
16597: POP
16598: POP
16599: GO 17058
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
16601: LD_ADDR_VAR 0 4
16605: PUSH
16606: LD_INT 22
16608: PUSH
16609: LD_VAR 0 5
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PUSH
16618: LD_INT 3
16620: PUSH
16621: LD_INT 60
16623: PUSH
16624: EMPTY
16625: LIST
16626: PUSH
16627: EMPTY
16628: LIST
16629: LIST
16630: PUSH
16631: LD_INT 91
16633: PUSH
16634: LD_VAR 0 8
16638: PUSH
16639: LD_INT 6
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: LIST
16646: PUSH
16647: LD_INT 2
16649: PUSH
16650: LD_INT 25
16652: PUSH
16653: LD_INT 2
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: PUSH
16660: LD_INT 25
16662: PUSH
16663: LD_INT 16
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: LIST
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: PPUSH
16681: CALL_OW 69
16685: PUSH
16686: LD_VAR 0 8
16690: PPUSH
16691: CALL_OW 313
16695: PPUSH
16696: LD_INT 3
16698: PUSH
16699: LD_INT 60
16701: PUSH
16702: EMPTY
16703: LIST
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: PUSH
16709: LD_INT 2
16711: PUSH
16712: LD_INT 25
16714: PUSH
16715: LD_INT 2
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: PUSH
16722: LD_INT 25
16724: PUSH
16725: LD_INT 16
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: LIST
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PPUSH
16741: CALL_OW 72
16745: UNION
16746: ST_TO_ADDR
// if tmp then
16747: LD_VAR 0 4
16751: IFFALSE 16831
// begin tmp := ShrinkArray ( tmp , 3 ) ;
16753: LD_ADDR_VAR 0 4
16757: PUSH
16758: LD_VAR 0 4
16762: PPUSH
16763: LD_INT 3
16765: PPUSH
16766: CALL 59336 0 2
16770: ST_TO_ADDR
// for j in tmp do
16771: LD_ADDR_VAR 0 2
16775: PUSH
16776: LD_VAR 0 4
16780: PUSH
16781: FOR_IN
16782: IFFALSE 16825
// begin if IsInUnit ( j ) then
16784: LD_VAR 0 2
16788: PPUSH
16789: CALL_OW 310
16793: IFFALSE 16804
// ComExit ( j ) ;
16795: LD_VAR 0 2
16799: PPUSH
16800: CALL 59419 0 1
// AddComCollect ( j , x , y ) ;
16804: LD_VAR 0 2
16808: PPUSH
16809: LD_VAR 0 6
16813: PPUSH
16814: LD_VAR 0 7
16818: PPUSH
16819: CALL_OW 177
// end ;
16823: GO 16781
16825: POP
16826: POP
// exit ;
16827: POP
16828: POP
16829: GO 17058
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
16831: LD_ADDR_VAR 0 4
16835: PUSH
16836: LD_INT 22
16838: PUSH
16839: LD_VAR 0 5
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 91
16850: PUSH
16851: LD_VAR 0 8
16855: PUSH
16856: LD_INT 8
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: LIST
16863: PUSH
16864: LD_INT 2
16866: PUSH
16867: LD_INT 34
16869: PUSH
16870: LD_INT 12
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PUSH
16877: LD_INT 34
16879: PUSH
16880: LD_INT 51
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PUSH
16887: LD_INT 34
16889: PUSH
16890: LD_INT 32
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: PUSH
16897: LD_INT 34
16899: PUSH
16900: LD_INT 89
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: LIST
16918: PPUSH
16919: CALL_OW 69
16923: ST_TO_ADDR
// if tmp then
16924: LD_VAR 0 4
16928: IFFALSE 17054
// begin for j in tmp do
16930: LD_ADDR_VAR 0 2
16934: PUSH
16935: LD_VAR 0 4
16939: PUSH
16940: FOR_IN
16941: IFFALSE 17052
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
16943: LD_VAR 0 2
16947: PPUSH
16948: CALL_OW 262
16952: PUSH
16953: LD_INT 3
16955: EQUAL
16956: PUSH
16957: LD_VAR 0 2
16961: PPUSH
16962: CALL_OW 261
16966: PUSH
16967: LD_INT 20
16969: GREATER
16970: OR
16971: PUSH
16972: LD_VAR 0 2
16976: PPUSH
16977: CALL_OW 314
16981: NOT
16982: AND
16983: PUSH
16984: LD_VAR 0 2
16988: PPUSH
16989: CALL_OW 263
16993: PUSH
16994: LD_INT 1
16996: NONEQUAL
16997: PUSH
16998: LD_VAR 0 2
17002: PPUSH
17003: CALL_OW 311
17007: OR
17008: AND
17009: IFFALSE 17050
// begin ComCollect ( j , x , y ) ;
17011: LD_VAR 0 2
17015: PPUSH
17016: LD_VAR 0 6
17020: PPUSH
17021: LD_VAR 0 7
17025: PPUSH
17026: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
17030: LD_VAR 0 2
17034: PPUSH
17035: LD_VAR 0 8
17039: PPUSH
17040: CALL_OW 172
// exit ;
17044: POP
17045: POP
17046: POP
17047: POP
17048: GO 17058
// end ;
17050: GO 16940
17052: POP
17053: POP
// end ; end ;
17054: GO 16429
17056: POP
17057: POP
// end ; end_of_file
17058: PPOPN 9
17060: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17061: LD_INT 0
17063: PPUSH
17064: PPUSH
17065: PPUSH
17066: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17067: LD_VAR 0 1
17071: PPUSH
17072: CALL_OW 264
17076: PUSH
17077: LD_INT 91
17079: EQUAL
17080: IFFALSE 17152
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17082: LD_INT 68
17084: PPUSH
17085: LD_VAR 0 1
17089: PPUSH
17090: CALL_OW 255
17094: PPUSH
17095: CALL_OW 321
17099: PUSH
17100: LD_INT 2
17102: EQUAL
17103: IFFALSE 17115
// eff := 70 else
17105: LD_ADDR_VAR 0 4
17109: PUSH
17110: LD_INT 70
17112: ST_TO_ADDR
17113: GO 17123
// eff := 30 ;
17115: LD_ADDR_VAR 0 4
17119: PUSH
17120: LD_INT 30
17122: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17123: LD_VAR 0 1
17127: PPUSH
17128: CALL_OW 250
17132: PPUSH
17133: LD_VAR 0 1
17137: PPUSH
17138: CALL_OW 251
17142: PPUSH
17143: LD_VAR 0 4
17147: PPUSH
17148: CALL_OW 495
// end ; end ;
17152: LD_VAR 0 2
17156: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17157: LD_INT 0
17159: PPUSH
// end ;
17160: LD_VAR 0 4
17164: RET
// export function SOS_Command ( cmd ) ; begin
17165: LD_INT 0
17167: PPUSH
// end ;
17168: LD_VAR 0 2
17172: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17173: LD_INT 0
17175: PPUSH
// end ;
17176: LD_VAR 0 6
17180: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
17181: LD_INT 0
17183: PPUSH
17184: PPUSH
// if not vehicle or not factory then
17185: LD_VAR 0 1
17189: NOT
17190: PUSH
17191: LD_VAR 0 2
17195: NOT
17196: OR
17197: IFFALSE 17201
// exit ;
17199: GO 17432
// if factoryWaypoints >= factory then
17201: LD_EXP 60
17205: PUSH
17206: LD_VAR 0 2
17210: GREATEREQUAL
17211: IFFALSE 17432
// if factoryWaypoints [ factory ] then
17213: LD_EXP 60
17217: PUSH
17218: LD_VAR 0 2
17222: ARRAY
17223: IFFALSE 17432
// begin if GetControl ( vehicle ) = control_manual then
17225: LD_VAR 0 1
17229: PPUSH
17230: CALL_OW 263
17234: PUSH
17235: LD_INT 1
17237: EQUAL
17238: IFFALSE 17319
// begin driver := IsDrivenBy ( vehicle ) ;
17240: LD_ADDR_VAR 0 4
17244: PUSH
17245: LD_VAR 0 1
17249: PPUSH
17250: CALL_OW 311
17254: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17255: LD_VAR 0 4
17259: PPUSH
17260: LD_EXP 60
17264: PUSH
17265: LD_VAR 0 2
17269: ARRAY
17270: PUSH
17271: LD_INT 3
17273: ARRAY
17274: PPUSH
17275: LD_EXP 60
17279: PUSH
17280: LD_VAR 0 2
17284: ARRAY
17285: PUSH
17286: LD_INT 4
17288: ARRAY
17289: PPUSH
17290: CALL_OW 171
// AddComExitVehicle ( driver ) ;
17294: LD_VAR 0 4
17298: PPUSH
17299: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
17303: LD_VAR 0 4
17307: PPUSH
17308: LD_VAR 0 2
17312: PPUSH
17313: CALL_OW 180
// end else
17317: GO 17432
// if GetControl ( vehicle ) = control_remote then
17319: LD_VAR 0 1
17323: PPUSH
17324: CALL_OW 263
17328: PUSH
17329: LD_INT 2
17331: EQUAL
17332: IFFALSE 17393
// begin wait ( 0 0$2 ) ;
17334: LD_INT 70
17336: PPUSH
17337: CALL_OW 67
// if Connect ( vehicle ) then
17341: LD_VAR 0 1
17345: PPUSH
17346: CALL 29678 0 1
17350: IFFALSE 17391
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17352: LD_VAR 0 1
17356: PPUSH
17357: LD_EXP 60
17361: PUSH
17362: LD_VAR 0 2
17366: ARRAY
17367: PUSH
17368: LD_INT 3
17370: ARRAY
17371: PPUSH
17372: LD_EXP 60
17376: PUSH
17377: LD_VAR 0 2
17381: ARRAY
17382: PUSH
17383: LD_INT 4
17385: ARRAY
17386: PPUSH
17387: CALL_OW 171
// end else
17391: GO 17432
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17393: LD_VAR 0 1
17397: PPUSH
17398: LD_EXP 60
17402: PUSH
17403: LD_VAR 0 2
17407: ARRAY
17408: PUSH
17409: LD_INT 3
17411: ARRAY
17412: PPUSH
17413: LD_EXP 60
17417: PUSH
17418: LD_VAR 0 2
17422: ARRAY
17423: PUSH
17424: LD_INT 4
17426: ARRAY
17427: PPUSH
17428: CALL_OW 171
// end ; end ;
17432: LD_VAR 0 3
17436: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
17437: LD_INT 0
17439: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
17440: LD_VAR 0 1
17444: PUSH
17445: LD_INT 250
17447: EQUAL
17448: PUSH
17449: LD_VAR 0 2
17453: PPUSH
17454: CALL_OW 264
17458: PUSH
17459: LD_INT 81
17461: EQUAL
17462: AND
17463: IFFALSE 17484
// MinerPlaceMine ( unit , x , y ) ;
17465: LD_VAR 0 2
17469: PPUSH
17470: LD_VAR 0 4
17474: PPUSH
17475: LD_VAR 0 5
17479: PPUSH
17480: CALL 19869 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
17484: LD_VAR 0 1
17488: PUSH
17489: LD_INT 251
17491: EQUAL
17492: PUSH
17493: LD_VAR 0 2
17497: PPUSH
17498: CALL_OW 264
17502: PUSH
17503: LD_INT 81
17505: EQUAL
17506: AND
17507: IFFALSE 17528
// MinerDetonateMine ( unit , x , y ) ;
17509: LD_VAR 0 2
17513: PPUSH
17514: LD_VAR 0 4
17518: PPUSH
17519: LD_VAR 0 5
17523: PPUSH
17524: CALL 20144 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
17528: LD_VAR 0 1
17532: PUSH
17533: LD_INT 252
17535: EQUAL
17536: PUSH
17537: LD_VAR 0 2
17541: PPUSH
17542: CALL_OW 264
17546: PUSH
17547: LD_INT 81
17549: EQUAL
17550: AND
17551: IFFALSE 17572
// MinerCreateMinefield ( unit , x , y ) ;
17553: LD_VAR 0 2
17557: PPUSH
17558: LD_VAR 0 4
17562: PPUSH
17563: LD_VAR 0 5
17567: PPUSH
17568: CALL 20561 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
17572: LD_VAR 0 1
17576: PUSH
17577: LD_INT 253
17579: EQUAL
17580: PUSH
17581: LD_VAR 0 2
17585: PPUSH
17586: CALL_OW 257
17590: PUSH
17591: LD_INT 5
17593: EQUAL
17594: AND
17595: IFFALSE 17616
// ComBinocular ( unit , x , y ) ;
17597: LD_VAR 0 2
17601: PPUSH
17602: LD_VAR 0 4
17606: PPUSH
17607: LD_VAR 0 5
17611: PPUSH
17612: CALL 20930 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
17616: LD_VAR 0 1
17620: PUSH
17621: LD_INT 254
17623: EQUAL
17624: PUSH
17625: LD_VAR 0 2
17629: PPUSH
17630: CALL_OW 264
17634: PUSH
17635: LD_INT 99
17637: EQUAL
17638: AND
17639: PUSH
17640: LD_VAR 0 3
17644: PPUSH
17645: CALL_OW 263
17649: PUSH
17650: LD_INT 3
17652: EQUAL
17653: AND
17654: IFFALSE 17670
// HackDestroyVehicle ( unit , selectedUnit ) ;
17656: LD_VAR 0 2
17660: PPUSH
17661: LD_VAR 0 3
17665: PPUSH
17666: CALL 19233 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
17670: LD_VAR 0 1
17674: PUSH
17675: LD_INT 255
17677: EQUAL
17678: PUSH
17679: LD_VAR 0 2
17683: PPUSH
17684: CALL_OW 264
17688: PUSH
17689: LD_INT 14
17691: PUSH
17692: LD_INT 53
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: IN
17699: AND
17700: PUSH
17701: LD_VAR 0 4
17705: PPUSH
17706: LD_VAR 0 5
17710: PPUSH
17711: CALL_OW 488
17715: AND
17716: IFFALSE 17740
// CutTreeXYR ( unit , x , y , 12 ) ;
17718: LD_VAR 0 2
17722: PPUSH
17723: LD_VAR 0 4
17727: PPUSH
17728: LD_VAR 0 5
17732: PPUSH
17733: LD_INT 12
17735: PPUSH
17736: CALL 17803 0 4
// if cmd = 256 then
17740: LD_VAR 0 1
17744: PUSH
17745: LD_INT 256
17747: EQUAL
17748: IFFALSE 17769
// SetFactoryWaypoint ( unit , x , y ) ;
17750: LD_VAR 0 2
17754: PPUSH
17755: LD_VAR 0 4
17759: PPUSH
17760: LD_VAR 0 5
17764: PPUSH
17765: CALL 15750 0 3
// if cmd = 257 then
17769: LD_VAR 0 1
17773: PUSH
17774: LD_INT 257
17776: EQUAL
17777: IFFALSE 17798
// SetWarehouseGatheringPoint ( unit , x , y ) ;
17779: LD_VAR 0 2
17783: PPUSH
17784: LD_VAR 0 4
17788: PPUSH
17789: LD_VAR 0 5
17793: PPUSH
17794: CALL 16112 0 3
// end ;
17798: LD_VAR 0 6
17802: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17803: LD_INT 0
17805: PPUSH
17806: PPUSH
17807: PPUSH
17808: PPUSH
17809: PPUSH
17810: PPUSH
17811: PPUSH
17812: PPUSH
17813: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
17814: LD_VAR 0 1
17818: NOT
17819: PUSH
17820: LD_VAR 0 2
17824: PPUSH
17825: LD_VAR 0 3
17829: PPUSH
17830: CALL_OW 488
17834: NOT
17835: OR
17836: PUSH
17837: LD_VAR 0 4
17841: NOT
17842: OR
17843: IFFALSE 17847
// exit ;
17845: GO 18187
// list := [ ] ;
17847: LD_ADDR_VAR 0 13
17851: PUSH
17852: EMPTY
17853: ST_TO_ADDR
// if x - r < 0 then
17854: LD_VAR 0 2
17858: PUSH
17859: LD_VAR 0 4
17863: MINUS
17864: PUSH
17865: LD_INT 0
17867: LESS
17868: IFFALSE 17880
// min_x := 0 else
17870: LD_ADDR_VAR 0 7
17874: PUSH
17875: LD_INT 0
17877: ST_TO_ADDR
17878: GO 17896
// min_x := x - r ;
17880: LD_ADDR_VAR 0 7
17884: PUSH
17885: LD_VAR 0 2
17889: PUSH
17890: LD_VAR 0 4
17894: MINUS
17895: ST_TO_ADDR
// if y - r < 0 then
17896: LD_VAR 0 3
17900: PUSH
17901: LD_VAR 0 4
17905: MINUS
17906: PUSH
17907: LD_INT 0
17909: LESS
17910: IFFALSE 17922
// min_y := 0 else
17912: LD_ADDR_VAR 0 8
17916: PUSH
17917: LD_INT 0
17919: ST_TO_ADDR
17920: GO 17938
// min_y := y - r ;
17922: LD_ADDR_VAR 0 8
17926: PUSH
17927: LD_VAR 0 3
17931: PUSH
17932: LD_VAR 0 4
17936: MINUS
17937: ST_TO_ADDR
// max_x := x + r ;
17938: LD_ADDR_VAR 0 9
17942: PUSH
17943: LD_VAR 0 2
17947: PUSH
17948: LD_VAR 0 4
17952: PLUS
17953: ST_TO_ADDR
// max_y := y + r ;
17954: LD_ADDR_VAR 0 10
17958: PUSH
17959: LD_VAR 0 3
17963: PUSH
17964: LD_VAR 0 4
17968: PLUS
17969: ST_TO_ADDR
// for _x = min_x to max_x do
17970: LD_ADDR_VAR 0 11
17974: PUSH
17975: DOUBLE
17976: LD_VAR 0 7
17980: DEC
17981: ST_TO_ADDR
17982: LD_VAR 0 9
17986: PUSH
17987: FOR_TO
17988: IFFALSE 18105
// for _y = min_y to max_y do
17990: LD_ADDR_VAR 0 12
17994: PUSH
17995: DOUBLE
17996: LD_VAR 0 8
18000: DEC
18001: ST_TO_ADDR
18002: LD_VAR 0 10
18006: PUSH
18007: FOR_TO
18008: IFFALSE 18101
// begin if not ValidHex ( _x , _y ) then
18010: LD_VAR 0 11
18014: PPUSH
18015: LD_VAR 0 12
18019: PPUSH
18020: CALL_OW 488
18024: NOT
18025: IFFALSE 18029
// continue ;
18027: GO 18007
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18029: LD_VAR 0 11
18033: PPUSH
18034: LD_VAR 0 12
18038: PPUSH
18039: CALL_OW 351
18043: PUSH
18044: LD_VAR 0 11
18048: PPUSH
18049: LD_VAR 0 12
18053: PPUSH
18054: CALL_OW 554
18058: AND
18059: IFFALSE 18099
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18061: LD_ADDR_VAR 0 13
18065: PUSH
18066: LD_VAR 0 13
18070: PPUSH
18071: LD_VAR 0 13
18075: PUSH
18076: LD_INT 1
18078: PLUS
18079: PPUSH
18080: LD_VAR 0 11
18084: PUSH
18085: LD_VAR 0 12
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PPUSH
18094: CALL_OW 2
18098: ST_TO_ADDR
// end ;
18099: GO 18007
18101: POP
18102: POP
18103: GO 17987
18105: POP
18106: POP
// if not list then
18107: LD_VAR 0 13
18111: NOT
18112: IFFALSE 18116
// exit ;
18114: GO 18187
// for i in list do
18116: LD_ADDR_VAR 0 6
18120: PUSH
18121: LD_VAR 0 13
18125: PUSH
18126: FOR_IN
18127: IFFALSE 18185
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18129: LD_VAR 0 1
18133: PPUSH
18134: LD_STRING M
18136: PUSH
18137: LD_VAR 0 6
18141: PUSH
18142: LD_INT 1
18144: ARRAY
18145: PUSH
18146: LD_VAR 0 6
18150: PUSH
18151: LD_INT 2
18153: ARRAY
18154: PUSH
18155: LD_INT 0
18157: PUSH
18158: LD_INT 0
18160: PUSH
18161: LD_INT 0
18163: PUSH
18164: LD_INT 0
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: PUSH
18176: EMPTY
18177: LIST
18178: PPUSH
18179: CALL_OW 447
18183: GO 18126
18185: POP
18186: POP
// end ;
18187: LD_VAR 0 5
18191: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18192: LD_EXP 63
18196: NOT
18197: IFFALSE 18247
18199: GO 18201
18201: DISABLE
// begin initHack := true ;
18202: LD_ADDR_EXP 63
18206: PUSH
18207: LD_INT 1
18209: ST_TO_ADDR
// hackTanks := [ ] ;
18210: LD_ADDR_EXP 64
18214: PUSH
18215: EMPTY
18216: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18217: LD_ADDR_EXP 65
18221: PUSH
18222: EMPTY
18223: ST_TO_ADDR
// hackLimit := 3 ;
18224: LD_ADDR_EXP 66
18228: PUSH
18229: LD_INT 3
18231: ST_TO_ADDR
// hackDist := 12 ;
18232: LD_ADDR_EXP 67
18236: PUSH
18237: LD_INT 12
18239: ST_TO_ADDR
// hackCounter := [ ] ;
18240: LD_ADDR_EXP 68
18244: PUSH
18245: EMPTY
18246: ST_TO_ADDR
// end ;
18247: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18248: LD_EXP 63
18252: PUSH
18253: LD_INT 34
18255: PUSH
18256: LD_INT 99
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PPUSH
18263: CALL_OW 69
18267: AND
18268: IFFALSE 18521
18270: GO 18272
18272: DISABLE
18273: LD_INT 0
18275: PPUSH
18276: PPUSH
// begin enable ;
18277: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18278: LD_ADDR_VAR 0 1
18282: PUSH
18283: LD_INT 34
18285: PUSH
18286: LD_INT 99
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PPUSH
18293: CALL_OW 69
18297: PUSH
18298: FOR_IN
18299: IFFALSE 18519
// begin if not i in hackTanks then
18301: LD_VAR 0 1
18305: PUSH
18306: LD_EXP 64
18310: IN
18311: NOT
18312: IFFALSE 18395
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18314: LD_ADDR_EXP 64
18318: PUSH
18319: LD_EXP 64
18323: PPUSH
18324: LD_EXP 64
18328: PUSH
18329: LD_INT 1
18331: PLUS
18332: PPUSH
18333: LD_VAR 0 1
18337: PPUSH
18338: CALL_OW 1
18342: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18343: LD_ADDR_EXP 65
18347: PUSH
18348: LD_EXP 65
18352: PPUSH
18353: LD_EXP 65
18357: PUSH
18358: LD_INT 1
18360: PLUS
18361: PPUSH
18362: EMPTY
18363: PPUSH
18364: CALL_OW 1
18368: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18369: LD_ADDR_EXP 68
18373: PUSH
18374: LD_EXP 68
18378: PPUSH
18379: LD_EXP 68
18383: PUSH
18384: LD_INT 1
18386: PLUS
18387: PPUSH
18388: EMPTY
18389: PPUSH
18390: CALL_OW 1
18394: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18395: LD_VAR 0 1
18399: PPUSH
18400: CALL_OW 302
18404: NOT
18405: IFFALSE 18418
// begin HackUnlinkAll ( i ) ;
18407: LD_VAR 0 1
18411: PPUSH
18412: CALL 18524 0 1
// continue ;
18416: GO 18298
// end ; HackCheckCapturedStatus ( i ) ;
18418: LD_VAR 0 1
18422: PPUSH
18423: CALL 18967 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18427: LD_ADDR_VAR 0 2
18431: PUSH
18432: LD_INT 81
18434: PUSH
18435: LD_VAR 0 1
18439: PPUSH
18440: CALL_OW 255
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 33
18451: PUSH
18452: LD_INT 3
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 91
18461: PUSH
18462: LD_VAR 0 1
18466: PUSH
18467: LD_EXP 67
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 50
18479: PUSH
18480: EMPTY
18481: LIST
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: PPUSH
18489: CALL_OW 69
18493: ST_TO_ADDR
// if not tmp then
18494: LD_VAR 0 2
18498: NOT
18499: IFFALSE 18503
// continue ;
18501: GO 18298
// HackLink ( i , tmp ) ;
18503: LD_VAR 0 1
18507: PPUSH
18508: LD_VAR 0 2
18512: PPUSH
18513: CALL 18660 0 2
// end ;
18517: GO 18298
18519: POP
18520: POP
// end ;
18521: PPOPN 2
18523: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18524: LD_INT 0
18526: PPUSH
18527: PPUSH
18528: PPUSH
// if not hack in hackTanks then
18529: LD_VAR 0 1
18533: PUSH
18534: LD_EXP 64
18538: IN
18539: NOT
18540: IFFALSE 18544
// exit ;
18542: GO 18655
// index := GetElementIndex ( hackTanks , hack ) ;
18544: LD_ADDR_VAR 0 4
18548: PUSH
18549: LD_EXP 64
18553: PPUSH
18554: LD_VAR 0 1
18558: PPUSH
18559: CALL 26494 0 2
18563: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18564: LD_EXP 65
18568: PUSH
18569: LD_VAR 0 4
18573: ARRAY
18574: IFFALSE 18655
// begin for i in hackTanksCaptured [ index ] do
18576: LD_ADDR_VAR 0 3
18580: PUSH
18581: LD_EXP 65
18585: PUSH
18586: LD_VAR 0 4
18590: ARRAY
18591: PUSH
18592: FOR_IN
18593: IFFALSE 18619
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18595: LD_VAR 0 3
18599: PUSH
18600: LD_INT 1
18602: ARRAY
18603: PPUSH
18604: LD_VAR 0 3
18608: PUSH
18609: LD_INT 2
18611: ARRAY
18612: PPUSH
18613: CALL_OW 235
18617: GO 18592
18619: POP
18620: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18621: LD_ADDR_EXP 65
18625: PUSH
18626: LD_EXP 65
18630: PPUSH
18631: LD_VAR 0 4
18635: PPUSH
18636: EMPTY
18637: PPUSH
18638: CALL_OW 1
18642: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18643: LD_VAR 0 1
18647: PPUSH
18648: LD_INT 0
18650: PPUSH
18651: CALL_OW 505
// end ; end ;
18655: LD_VAR 0 2
18659: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18660: LD_INT 0
18662: PPUSH
18663: PPUSH
18664: PPUSH
// if not hack in hackTanks or not vehicles then
18665: LD_VAR 0 1
18669: PUSH
18670: LD_EXP 64
18674: IN
18675: NOT
18676: PUSH
18677: LD_VAR 0 2
18681: NOT
18682: OR
18683: IFFALSE 18687
// exit ;
18685: GO 18962
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18687: LD_ADDR_VAR 0 2
18691: PUSH
18692: LD_VAR 0 1
18696: PPUSH
18697: LD_VAR 0 2
18701: PPUSH
18702: LD_INT 1
18704: PPUSH
18705: LD_INT 1
18707: PPUSH
18708: CALL 27144 0 4
18712: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18713: LD_ADDR_VAR 0 5
18717: PUSH
18718: LD_EXP 64
18722: PPUSH
18723: LD_VAR 0 1
18727: PPUSH
18728: CALL 26494 0 2
18732: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18733: LD_EXP 65
18737: PUSH
18738: LD_VAR 0 5
18742: ARRAY
18743: PUSH
18744: LD_EXP 66
18748: LESS
18749: IFFALSE 18938
// begin for i := 1 to vehicles do
18751: LD_ADDR_VAR 0 4
18755: PUSH
18756: DOUBLE
18757: LD_INT 1
18759: DEC
18760: ST_TO_ADDR
18761: LD_VAR 0 2
18765: PUSH
18766: FOR_TO
18767: IFFALSE 18936
// begin if hackTanksCaptured [ index ] = hackLimit then
18769: LD_EXP 65
18773: PUSH
18774: LD_VAR 0 5
18778: ARRAY
18779: PUSH
18780: LD_EXP 66
18784: EQUAL
18785: IFFALSE 18789
// break ;
18787: GO 18936
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18789: LD_ADDR_EXP 68
18793: PUSH
18794: LD_EXP 68
18798: PPUSH
18799: LD_VAR 0 5
18803: PPUSH
18804: LD_EXP 68
18808: PUSH
18809: LD_VAR 0 5
18813: ARRAY
18814: PUSH
18815: LD_INT 1
18817: PLUS
18818: PPUSH
18819: CALL_OW 1
18823: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18824: LD_ADDR_EXP 65
18828: PUSH
18829: LD_EXP 65
18833: PPUSH
18834: LD_VAR 0 5
18838: PUSH
18839: LD_EXP 65
18843: PUSH
18844: LD_VAR 0 5
18848: ARRAY
18849: PUSH
18850: LD_INT 1
18852: PLUS
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PPUSH
18858: LD_VAR 0 2
18862: PUSH
18863: LD_VAR 0 4
18867: ARRAY
18868: PUSH
18869: LD_VAR 0 2
18873: PUSH
18874: LD_VAR 0 4
18878: ARRAY
18879: PPUSH
18880: CALL_OW 255
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PPUSH
18889: CALL 26709 0 3
18893: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
18894: LD_VAR 0 2
18898: PUSH
18899: LD_VAR 0 4
18903: ARRAY
18904: PPUSH
18905: LD_VAR 0 1
18909: PPUSH
18910: CALL_OW 255
18914: PPUSH
18915: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
18919: LD_VAR 0 2
18923: PUSH
18924: LD_VAR 0 4
18928: ARRAY
18929: PPUSH
18930: CALL_OW 141
// end ;
18934: GO 18766
18936: POP
18937: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18938: LD_VAR 0 1
18942: PPUSH
18943: LD_EXP 65
18947: PUSH
18948: LD_VAR 0 5
18952: ARRAY
18953: PUSH
18954: LD_INT 0
18956: PLUS
18957: PPUSH
18958: CALL_OW 505
// end ;
18962: LD_VAR 0 3
18966: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
18967: LD_INT 0
18969: PPUSH
18970: PPUSH
18971: PPUSH
18972: PPUSH
// if not hack in hackTanks then
18973: LD_VAR 0 1
18977: PUSH
18978: LD_EXP 64
18982: IN
18983: NOT
18984: IFFALSE 18988
// exit ;
18986: GO 19228
// index := GetElementIndex ( hackTanks , hack ) ;
18988: LD_ADDR_VAR 0 4
18992: PUSH
18993: LD_EXP 64
18997: PPUSH
18998: LD_VAR 0 1
19002: PPUSH
19003: CALL 26494 0 2
19007: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19008: LD_ADDR_VAR 0 3
19012: PUSH
19013: DOUBLE
19014: LD_EXP 65
19018: PUSH
19019: LD_VAR 0 4
19023: ARRAY
19024: INC
19025: ST_TO_ADDR
19026: LD_INT 1
19028: PUSH
19029: FOR_DOWNTO
19030: IFFALSE 19202
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19032: LD_ADDR_VAR 0 5
19036: PUSH
19037: LD_EXP 65
19041: PUSH
19042: LD_VAR 0 4
19046: ARRAY
19047: PUSH
19048: LD_VAR 0 3
19052: ARRAY
19053: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19054: LD_VAR 0 5
19058: PUSH
19059: LD_INT 1
19061: ARRAY
19062: PPUSH
19063: CALL_OW 302
19067: NOT
19068: PUSH
19069: LD_VAR 0 5
19073: PUSH
19074: LD_INT 1
19076: ARRAY
19077: PPUSH
19078: CALL_OW 255
19082: PUSH
19083: LD_VAR 0 1
19087: PPUSH
19088: CALL_OW 255
19092: NONEQUAL
19093: OR
19094: IFFALSE 19200
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19096: LD_VAR 0 5
19100: PUSH
19101: LD_INT 1
19103: ARRAY
19104: PPUSH
19105: CALL_OW 305
19109: PUSH
19110: LD_VAR 0 5
19114: PUSH
19115: LD_INT 1
19117: ARRAY
19118: PPUSH
19119: CALL_OW 255
19123: PUSH
19124: LD_VAR 0 1
19128: PPUSH
19129: CALL_OW 255
19133: EQUAL
19134: AND
19135: IFFALSE 19159
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19137: LD_VAR 0 5
19141: PUSH
19142: LD_INT 1
19144: ARRAY
19145: PPUSH
19146: LD_VAR 0 5
19150: PUSH
19151: LD_INT 2
19153: ARRAY
19154: PPUSH
19155: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19159: LD_ADDR_EXP 65
19163: PUSH
19164: LD_EXP 65
19168: PPUSH
19169: LD_VAR 0 4
19173: PPUSH
19174: LD_EXP 65
19178: PUSH
19179: LD_VAR 0 4
19183: ARRAY
19184: PPUSH
19185: LD_VAR 0 3
19189: PPUSH
19190: CALL_OW 3
19194: PPUSH
19195: CALL_OW 1
19199: ST_TO_ADDR
// end ; end ;
19200: GO 19029
19202: POP
19203: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19204: LD_VAR 0 1
19208: PPUSH
19209: LD_EXP 65
19213: PUSH
19214: LD_VAR 0 4
19218: ARRAY
19219: PUSH
19220: LD_INT 0
19222: PLUS
19223: PPUSH
19224: CALL_OW 505
// end ;
19228: LD_VAR 0 2
19232: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19233: LD_INT 0
19235: PPUSH
19236: PPUSH
19237: PPUSH
19238: PPUSH
// if not hack in hackTanks then
19239: LD_VAR 0 1
19243: PUSH
19244: LD_EXP 64
19248: IN
19249: NOT
19250: IFFALSE 19254
// exit ;
19252: GO 19339
// index := GetElementIndex ( hackTanks , hack ) ;
19254: LD_ADDR_VAR 0 5
19258: PUSH
19259: LD_EXP 64
19263: PPUSH
19264: LD_VAR 0 1
19268: PPUSH
19269: CALL 26494 0 2
19273: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19274: LD_ADDR_VAR 0 4
19278: PUSH
19279: DOUBLE
19280: LD_INT 1
19282: DEC
19283: ST_TO_ADDR
19284: LD_EXP 65
19288: PUSH
19289: LD_VAR 0 5
19293: ARRAY
19294: PUSH
19295: FOR_TO
19296: IFFALSE 19337
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19298: LD_EXP 65
19302: PUSH
19303: LD_VAR 0 5
19307: ARRAY
19308: PUSH
19309: LD_VAR 0 4
19313: ARRAY
19314: PUSH
19315: LD_INT 1
19317: ARRAY
19318: PUSH
19319: LD_VAR 0 2
19323: EQUAL
19324: IFFALSE 19335
// KillUnit ( vehicle ) ;
19326: LD_VAR 0 2
19330: PPUSH
19331: CALL_OW 66
19335: GO 19295
19337: POP
19338: POP
// end ;
19339: LD_VAR 0 3
19343: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19344: LD_EXP 69
19348: NOT
19349: IFFALSE 19384
19351: GO 19353
19353: DISABLE
// begin initMiner := true ;
19354: LD_ADDR_EXP 69
19358: PUSH
19359: LD_INT 1
19361: ST_TO_ADDR
// minersList := [ ] ;
19362: LD_ADDR_EXP 70
19366: PUSH
19367: EMPTY
19368: ST_TO_ADDR
// minerMinesList := [ ] ;
19369: LD_ADDR_EXP 71
19373: PUSH
19374: EMPTY
19375: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
19376: LD_ADDR_EXP 72
19380: PUSH
19381: LD_INT 5
19383: ST_TO_ADDR
// end ;
19384: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
19385: LD_EXP 69
19389: PUSH
19390: LD_INT 34
19392: PUSH
19393: LD_INT 81
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PPUSH
19400: CALL_OW 69
19404: AND
19405: IFFALSE 19866
19407: GO 19409
19409: DISABLE
19410: LD_INT 0
19412: PPUSH
19413: PPUSH
19414: PPUSH
19415: PPUSH
// begin enable ;
19416: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
19417: LD_ADDR_VAR 0 1
19421: PUSH
19422: LD_INT 34
19424: PUSH
19425: LD_INT 81
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: PPUSH
19432: CALL_OW 69
19436: PUSH
19437: FOR_IN
19438: IFFALSE 19510
// begin if not i in minersList then
19440: LD_VAR 0 1
19444: PUSH
19445: LD_EXP 70
19449: IN
19450: NOT
19451: IFFALSE 19508
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
19453: LD_ADDR_EXP 70
19457: PUSH
19458: LD_EXP 70
19462: PPUSH
19463: LD_EXP 70
19467: PUSH
19468: LD_INT 1
19470: PLUS
19471: PPUSH
19472: LD_VAR 0 1
19476: PPUSH
19477: CALL_OW 1
19481: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
19482: LD_ADDR_EXP 71
19486: PUSH
19487: LD_EXP 71
19491: PPUSH
19492: LD_EXP 71
19496: PUSH
19497: LD_INT 1
19499: PLUS
19500: PPUSH
19501: EMPTY
19502: PPUSH
19503: CALL_OW 1
19507: ST_TO_ADDR
// end end ;
19508: GO 19437
19510: POP
19511: POP
// for i := minerMinesList downto 1 do
19512: LD_ADDR_VAR 0 1
19516: PUSH
19517: DOUBLE
19518: LD_EXP 71
19522: INC
19523: ST_TO_ADDR
19524: LD_INT 1
19526: PUSH
19527: FOR_DOWNTO
19528: IFFALSE 19864
// begin if IsLive ( minersList [ i ] ) then
19530: LD_EXP 70
19534: PUSH
19535: LD_VAR 0 1
19539: ARRAY
19540: PPUSH
19541: CALL_OW 300
19545: IFFALSE 19573
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
19547: LD_EXP 70
19551: PUSH
19552: LD_VAR 0 1
19556: ARRAY
19557: PPUSH
19558: LD_EXP 71
19562: PUSH
19563: LD_VAR 0 1
19567: ARRAY
19568: PPUSH
19569: CALL_OW 505
// if not minerMinesList [ i ] then
19573: LD_EXP 71
19577: PUSH
19578: LD_VAR 0 1
19582: ARRAY
19583: NOT
19584: IFFALSE 19588
// continue ;
19586: GO 19527
// for j := minerMinesList [ i ] downto 1 do
19588: LD_ADDR_VAR 0 2
19592: PUSH
19593: DOUBLE
19594: LD_EXP 71
19598: PUSH
19599: LD_VAR 0 1
19603: ARRAY
19604: INC
19605: ST_TO_ADDR
19606: LD_INT 1
19608: PUSH
19609: FOR_DOWNTO
19610: IFFALSE 19860
// begin side := GetSide ( minersList [ i ] ) ;
19612: LD_ADDR_VAR 0 3
19616: PUSH
19617: LD_EXP 70
19621: PUSH
19622: LD_VAR 0 1
19626: ARRAY
19627: PPUSH
19628: CALL_OW 255
19632: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19633: LD_ADDR_VAR 0 4
19637: PUSH
19638: LD_EXP 71
19642: PUSH
19643: LD_VAR 0 1
19647: ARRAY
19648: PUSH
19649: LD_VAR 0 2
19653: ARRAY
19654: PUSH
19655: LD_INT 1
19657: ARRAY
19658: PPUSH
19659: LD_EXP 71
19663: PUSH
19664: LD_VAR 0 1
19668: ARRAY
19669: PUSH
19670: LD_VAR 0 2
19674: ARRAY
19675: PUSH
19676: LD_INT 2
19678: ARRAY
19679: PPUSH
19680: CALL_OW 428
19684: ST_TO_ADDR
// if not tmp then
19685: LD_VAR 0 4
19689: NOT
19690: IFFALSE 19694
// continue ;
19692: GO 19609
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19694: LD_VAR 0 4
19698: PUSH
19699: LD_INT 81
19701: PUSH
19702: LD_VAR 0 3
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PPUSH
19711: CALL_OW 69
19715: IN
19716: PUSH
19717: LD_EXP 71
19721: PUSH
19722: LD_VAR 0 1
19726: ARRAY
19727: PUSH
19728: LD_VAR 0 2
19732: ARRAY
19733: PUSH
19734: LD_INT 1
19736: ARRAY
19737: PPUSH
19738: LD_EXP 71
19742: PUSH
19743: LD_VAR 0 1
19747: ARRAY
19748: PUSH
19749: LD_VAR 0 2
19753: ARRAY
19754: PUSH
19755: LD_INT 2
19757: ARRAY
19758: PPUSH
19759: CALL_OW 458
19763: AND
19764: IFFALSE 19858
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
19766: LD_EXP 71
19770: PUSH
19771: LD_VAR 0 1
19775: ARRAY
19776: PUSH
19777: LD_VAR 0 2
19781: ARRAY
19782: PUSH
19783: LD_INT 1
19785: ARRAY
19786: PPUSH
19787: LD_EXP 71
19791: PUSH
19792: LD_VAR 0 1
19796: ARRAY
19797: PUSH
19798: LD_VAR 0 2
19802: ARRAY
19803: PUSH
19804: LD_INT 2
19806: ARRAY
19807: PPUSH
19808: LD_VAR 0 3
19812: PPUSH
19813: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
19817: LD_ADDR_EXP 71
19821: PUSH
19822: LD_EXP 71
19826: PPUSH
19827: LD_VAR 0 1
19831: PPUSH
19832: LD_EXP 71
19836: PUSH
19837: LD_VAR 0 1
19841: ARRAY
19842: PPUSH
19843: LD_VAR 0 2
19847: PPUSH
19848: CALL_OW 3
19852: PPUSH
19853: CALL_OW 1
19857: ST_TO_ADDR
// end ; end ;
19858: GO 19609
19860: POP
19861: POP
// end ;
19862: GO 19527
19864: POP
19865: POP
// end ;
19866: PPOPN 4
19868: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
19869: LD_INT 0
19871: PPUSH
19872: PPUSH
// result := false ;
19873: LD_ADDR_VAR 0 4
19877: PUSH
19878: LD_INT 0
19880: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
19881: LD_VAR 0 1
19885: PPUSH
19886: CALL_OW 264
19890: PUSH
19891: LD_INT 81
19893: EQUAL
19894: NOT
19895: IFFALSE 19899
// exit ;
19897: GO 20139
// index := GetElementIndex ( minersList , unit ) ;
19899: LD_ADDR_VAR 0 5
19903: PUSH
19904: LD_EXP 70
19908: PPUSH
19909: LD_VAR 0 1
19913: PPUSH
19914: CALL 26494 0 2
19918: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
19919: LD_EXP 71
19923: PUSH
19924: LD_VAR 0 5
19928: ARRAY
19929: PUSH
19930: LD_EXP 72
19934: GREATEREQUAL
19935: IFFALSE 19939
// exit ;
19937: GO 20139
// ComMoveXY ( unit , x , y ) ;
19939: LD_VAR 0 1
19943: PPUSH
19944: LD_VAR 0 2
19948: PPUSH
19949: LD_VAR 0 3
19953: PPUSH
19954: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19958: LD_INT 35
19960: PPUSH
19961: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
19965: LD_VAR 0 1
19969: PPUSH
19970: LD_VAR 0 2
19974: PPUSH
19975: LD_VAR 0 3
19979: PPUSH
19980: CALL 57830 0 3
19984: NOT
19985: PUSH
19986: LD_VAR 0 1
19990: PPUSH
19991: CALL_OW 314
19995: AND
19996: IFFALSE 20000
// exit ;
19998: GO 20139
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20000: LD_VAR 0 2
20004: PPUSH
20005: LD_VAR 0 3
20009: PPUSH
20010: CALL_OW 428
20014: PUSH
20015: LD_VAR 0 1
20019: EQUAL
20020: PUSH
20021: LD_VAR 0 1
20025: PPUSH
20026: CALL_OW 314
20030: NOT
20031: AND
20032: IFFALSE 19958
// PlaySoundXY ( x , y , PlantMine ) ;
20034: LD_VAR 0 2
20038: PPUSH
20039: LD_VAR 0 3
20043: PPUSH
20044: LD_STRING PlantMine
20046: PPUSH
20047: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20051: LD_VAR 0 2
20055: PPUSH
20056: LD_VAR 0 3
20060: PPUSH
20061: LD_VAR 0 1
20065: PPUSH
20066: CALL_OW 255
20070: PPUSH
20071: LD_INT 0
20073: PPUSH
20074: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20078: LD_ADDR_EXP 71
20082: PUSH
20083: LD_EXP 71
20087: PPUSH
20088: LD_VAR 0 5
20092: PUSH
20093: LD_EXP 71
20097: PUSH
20098: LD_VAR 0 5
20102: ARRAY
20103: PUSH
20104: LD_INT 1
20106: PLUS
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PPUSH
20112: LD_VAR 0 2
20116: PUSH
20117: LD_VAR 0 3
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PPUSH
20126: CALL 26709 0 3
20130: ST_TO_ADDR
// result := true ;
20131: LD_ADDR_VAR 0 4
20135: PUSH
20136: LD_INT 1
20138: ST_TO_ADDR
// end ;
20139: LD_VAR 0 4
20143: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20144: LD_INT 0
20146: PPUSH
20147: PPUSH
20148: PPUSH
// if not unit in minersList then
20149: LD_VAR 0 1
20153: PUSH
20154: LD_EXP 70
20158: IN
20159: NOT
20160: IFFALSE 20164
// exit ;
20162: GO 20556
// index := GetElementIndex ( minersList , unit ) ;
20164: LD_ADDR_VAR 0 6
20168: PUSH
20169: LD_EXP 70
20173: PPUSH
20174: LD_VAR 0 1
20178: PPUSH
20179: CALL 26494 0 2
20183: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20184: LD_ADDR_VAR 0 5
20188: PUSH
20189: DOUBLE
20190: LD_EXP 71
20194: PUSH
20195: LD_VAR 0 6
20199: ARRAY
20200: INC
20201: ST_TO_ADDR
20202: LD_INT 1
20204: PUSH
20205: FOR_DOWNTO
20206: IFFALSE 20367
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20208: LD_EXP 71
20212: PUSH
20213: LD_VAR 0 6
20217: ARRAY
20218: PUSH
20219: LD_VAR 0 5
20223: ARRAY
20224: PUSH
20225: LD_INT 1
20227: ARRAY
20228: PUSH
20229: LD_VAR 0 2
20233: EQUAL
20234: PUSH
20235: LD_EXP 71
20239: PUSH
20240: LD_VAR 0 6
20244: ARRAY
20245: PUSH
20246: LD_VAR 0 5
20250: ARRAY
20251: PUSH
20252: LD_INT 2
20254: ARRAY
20255: PUSH
20256: LD_VAR 0 3
20260: EQUAL
20261: AND
20262: IFFALSE 20365
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20264: LD_EXP 71
20268: PUSH
20269: LD_VAR 0 6
20273: ARRAY
20274: PUSH
20275: LD_VAR 0 5
20279: ARRAY
20280: PUSH
20281: LD_INT 1
20283: ARRAY
20284: PPUSH
20285: LD_EXP 71
20289: PUSH
20290: LD_VAR 0 6
20294: ARRAY
20295: PUSH
20296: LD_VAR 0 5
20300: ARRAY
20301: PUSH
20302: LD_INT 2
20304: ARRAY
20305: PPUSH
20306: LD_VAR 0 1
20310: PPUSH
20311: CALL_OW 255
20315: PPUSH
20316: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20320: LD_ADDR_EXP 71
20324: PUSH
20325: LD_EXP 71
20329: PPUSH
20330: LD_VAR 0 6
20334: PPUSH
20335: LD_EXP 71
20339: PUSH
20340: LD_VAR 0 6
20344: ARRAY
20345: PPUSH
20346: LD_VAR 0 5
20350: PPUSH
20351: CALL_OW 3
20355: PPUSH
20356: CALL_OW 1
20360: ST_TO_ADDR
// exit ;
20361: POP
20362: POP
20363: GO 20556
// end ; end ;
20365: GO 20205
20367: POP
20368: POP
// for i := minerMinesList [ index ] downto 1 do
20369: LD_ADDR_VAR 0 5
20373: PUSH
20374: DOUBLE
20375: LD_EXP 71
20379: PUSH
20380: LD_VAR 0 6
20384: ARRAY
20385: INC
20386: ST_TO_ADDR
20387: LD_INT 1
20389: PUSH
20390: FOR_DOWNTO
20391: IFFALSE 20554
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
20393: LD_EXP 71
20397: PUSH
20398: LD_VAR 0 6
20402: ARRAY
20403: PUSH
20404: LD_VAR 0 5
20408: ARRAY
20409: PUSH
20410: LD_INT 1
20412: ARRAY
20413: PPUSH
20414: LD_EXP 71
20418: PUSH
20419: LD_VAR 0 6
20423: ARRAY
20424: PUSH
20425: LD_VAR 0 5
20429: ARRAY
20430: PUSH
20431: LD_INT 2
20433: ARRAY
20434: PPUSH
20435: LD_VAR 0 2
20439: PPUSH
20440: LD_VAR 0 3
20444: PPUSH
20445: CALL_OW 298
20449: PUSH
20450: LD_INT 6
20452: LESS
20453: IFFALSE 20552
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20455: LD_EXP 71
20459: PUSH
20460: LD_VAR 0 6
20464: ARRAY
20465: PUSH
20466: LD_VAR 0 5
20470: ARRAY
20471: PUSH
20472: LD_INT 1
20474: ARRAY
20475: PPUSH
20476: LD_EXP 71
20480: PUSH
20481: LD_VAR 0 6
20485: ARRAY
20486: PUSH
20487: LD_VAR 0 5
20491: ARRAY
20492: PUSH
20493: LD_INT 2
20495: ARRAY
20496: PPUSH
20497: LD_VAR 0 1
20501: PPUSH
20502: CALL_OW 255
20506: PPUSH
20507: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20511: LD_ADDR_EXP 71
20515: PUSH
20516: LD_EXP 71
20520: PPUSH
20521: LD_VAR 0 6
20525: PPUSH
20526: LD_EXP 71
20530: PUSH
20531: LD_VAR 0 6
20535: ARRAY
20536: PPUSH
20537: LD_VAR 0 5
20541: PPUSH
20542: CALL_OW 3
20546: PPUSH
20547: CALL_OW 1
20551: ST_TO_ADDR
// end ; end ;
20552: GO 20390
20554: POP
20555: POP
// end ;
20556: LD_VAR 0 4
20560: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20561: LD_INT 0
20563: PPUSH
20564: PPUSH
20565: PPUSH
20566: PPUSH
20567: PPUSH
20568: PPUSH
20569: PPUSH
20570: PPUSH
20571: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20572: LD_VAR 0 1
20576: PPUSH
20577: CALL_OW 264
20581: PUSH
20582: LD_INT 81
20584: EQUAL
20585: NOT
20586: PUSH
20587: LD_VAR 0 1
20591: PUSH
20592: LD_EXP 70
20596: IN
20597: NOT
20598: OR
20599: IFFALSE 20603
// exit ;
20601: GO 20925
// index := GetElementIndex ( minersList , unit ) ;
20603: LD_ADDR_VAR 0 6
20607: PUSH
20608: LD_EXP 70
20612: PPUSH
20613: LD_VAR 0 1
20617: PPUSH
20618: CALL 26494 0 2
20622: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
20623: LD_ADDR_VAR 0 8
20627: PUSH
20628: LD_EXP 72
20632: PUSH
20633: LD_EXP 71
20637: PUSH
20638: LD_VAR 0 6
20642: ARRAY
20643: MINUS
20644: ST_TO_ADDR
// if not minesFreeAmount then
20645: LD_VAR 0 8
20649: NOT
20650: IFFALSE 20654
// exit ;
20652: GO 20925
// tmp := [ ] ;
20654: LD_ADDR_VAR 0 7
20658: PUSH
20659: EMPTY
20660: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20661: LD_ADDR_VAR 0 5
20665: PUSH
20666: DOUBLE
20667: LD_INT 1
20669: DEC
20670: ST_TO_ADDR
20671: LD_VAR 0 8
20675: PUSH
20676: FOR_TO
20677: IFFALSE 20872
// begin _d := rand ( 0 , 5 ) ;
20679: LD_ADDR_VAR 0 11
20683: PUSH
20684: LD_INT 0
20686: PPUSH
20687: LD_INT 5
20689: PPUSH
20690: CALL_OW 12
20694: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20695: LD_ADDR_VAR 0 12
20699: PUSH
20700: LD_INT 2
20702: PPUSH
20703: LD_INT 6
20705: PPUSH
20706: CALL_OW 12
20710: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
20711: LD_ADDR_VAR 0 9
20715: PUSH
20716: LD_VAR 0 2
20720: PPUSH
20721: LD_VAR 0 11
20725: PPUSH
20726: LD_VAR 0 12
20730: PPUSH
20731: CALL_OW 272
20735: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
20736: LD_ADDR_VAR 0 10
20740: PUSH
20741: LD_VAR 0 3
20745: PPUSH
20746: LD_VAR 0 11
20750: PPUSH
20751: LD_VAR 0 12
20755: PPUSH
20756: CALL_OW 273
20760: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
20761: LD_VAR 0 9
20765: PPUSH
20766: LD_VAR 0 10
20770: PPUSH
20771: CALL_OW 488
20775: PUSH
20776: LD_VAR 0 9
20780: PUSH
20781: LD_VAR 0 10
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: PUSH
20790: LD_VAR 0 7
20794: IN
20795: NOT
20796: AND
20797: PUSH
20798: LD_VAR 0 9
20802: PPUSH
20803: LD_VAR 0 10
20807: PPUSH
20808: CALL_OW 458
20812: NOT
20813: AND
20814: IFFALSE 20856
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
20816: LD_ADDR_VAR 0 7
20820: PUSH
20821: LD_VAR 0 7
20825: PPUSH
20826: LD_VAR 0 7
20830: PUSH
20831: LD_INT 1
20833: PLUS
20834: PPUSH
20835: LD_VAR 0 9
20839: PUSH
20840: LD_VAR 0 10
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PPUSH
20849: CALL_OW 1
20853: ST_TO_ADDR
20854: GO 20870
// i := i - 1 ;
20856: LD_ADDR_VAR 0 5
20860: PUSH
20861: LD_VAR 0 5
20865: PUSH
20866: LD_INT 1
20868: MINUS
20869: ST_TO_ADDR
// end ;
20870: GO 20676
20872: POP
20873: POP
// for i in tmp do
20874: LD_ADDR_VAR 0 5
20878: PUSH
20879: LD_VAR 0 7
20883: PUSH
20884: FOR_IN
20885: IFFALSE 20923
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
20887: LD_VAR 0 1
20891: PPUSH
20892: LD_VAR 0 5
20896: PUSH
20897: LD_INT 1
20899: ARRAY
20900: PPUSH
20901: LD_VAR 0 5
20905: PUSH
20906: LD_INT 2
20908: ARRAY
20909: PPUSH
20910: CALL 19869 0 3
20914: NOT
20915: IFFALSE 20921
// exit ;
20917: POP
20918: POP
20919: GO 20925
20921: GO 20884
20923: POP
20924: POP
// end ;
20925: LD_VAR 0 4
20929: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
20930: LD_INT 0
20932: PPUSH
20933: PPUSH
20934: PPUSH
20935: PPUSH
20936: PPUSH
20937: PPUSH
20938: PPUSH
// if not GetClass ( unit ) = class_sniper then
20939: LD_VAR 0 1
20943: PPUSH
20944: CALL_OW 257
20948: PUSH
20949: LD_INT 5
20951: EQUAL
20952: NOT
20953: IFFALSE 20957
// exit ;
20955: GO 21345
// dist := 8 ;
20957: LD_ADDR_VAR 0 5
20961: PUSH
20962: LD_INT 8
20964: ST_TO_ADDR
// viewRange := 12 ;
20965: LD_ADDR_VAR 0 7
20969: PUSH
20970: LD_INT 12
20972: ST_TO_ADDR
// side := GetSide ( unit ) ;
20973: LD_ADDR_VAR 0 6
20977: PUSH
20978: LD_VAR 0 1
20982: PPUSH
20983: CALL_OW 255
20987: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
20988: LD_INT 61
20990: PPUSH
20991: LD_VAR 0 6
20995: PPUSH
20996: CALL_OW 321
21000: PUSH
21001: LD_INT 2
21003: EQUAL
21004: IFFALSE 21014
// viewRange := 16 ;
21006: LD_ADDR_VAR 0 7
21010: PUSH
21011: LD_INT 16
21013: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21014: LD_VAR 0 1
21018: PPUSH
21019: LD_VAR 0 2
21023: PPUSH
21024: LD_VAR 0 3
21028: PPUSH
21029: CALL_OW 297
21033: PUSH
21034: LD_VAR 0 5
21038: GREATER
21039: IFFALSE 21118
// begin ComMoveXY ( unit , x , y ) ;
21041: LD_VAR 0 1
21045: PPUSH
21046: LD_VAR 0 2
21050: PPUSH
21051: LD_VAR 0 3
21055: PPUSH
21056: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21060: LD_INT 35
21062: PPUSH
21063: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21067: LD_VAR 0 1
21071: PPUSH
21072: LD_VAR 0 2
21076: PPUSH
21077: LD_VAR 0 3
21081: PPUSH
21082: CALL 57830 0 3
21086: NOT
21087: IFFALSE 21091
// exit ;
21089: GO 21345
// until GetDistUnitXY ( unit , x , y ) < dist ;
21091: LD_VAR 0 1
21095: PPUSH
21096: LD_VAR 0 2
21100: PPUSH
21101: LD_VAR 0 3
21105: PPUSH
21106: CALL_OW 297
21110: PUSH
21111: LD_VAR 0 5
21115: LESS
21116: IFFALSE 21060
// end ; ComTurnXY ( unit , x , y ) ;
21118: LD_VAR 0 1
21122: PPUSH
21123: LD_VAR 0 2
21127: PPUSH
21128: LD_VAR 0 3
21132: PPUSH
21133: CALL_OW 118
// wait ( 5 ) ;
21137: LD_INT 5
21139: PPUSH
21140: CALL_OW 67
// _d := GetDir ( unit ) ;
21144: LD_ADDR_VAR 0 10
21148: PUSH
21149: LD_VAR 0 1
21153: PPUSH
21154: CALL_OW 254
21158: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21159: LD_ADDR_VAR 0 8
21163: PUSH
21164: LD_VAR 0 1
21168: PPUSH
21169: CALL_OW 250
21173: PPUSH
21174: LD_VAR 0 10
21178: PPUSH
21179: LD_VAR 0 5
21183: PPUSH
21184: CALL_OW 272
21188: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21189: LD_ADDR_VAR 0 9
21193: PUSH
21194: LD_VAR 0 1
21198: PPUSH
21199: CALL_OW 251
21203: PPUSH
21204: LD_VAR 0 10
21208: PPUSH
21209: LD_VAR 0 5
21213: PPUSH
21214: CALL_OW 273
21218: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21219: LD_VAR 0 8
21223: PPUSH
21224: LD_VAR 0 9
21228: PPUSH
21229: CALL_OW 488
21233: NOT
21234: IFFALSE 21238
// exit ;
21236: GO 21345
// ComAnimCustom ( unit , 1 ) ;
21238: LD_VAR 0 1
21242: PPUSH
21243: LD_INT 1
21245: PPUSH
21246: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21250: LD_VAR 0 8
21254: PPUSH
21255: LD_VAR 0 9
21259: PPUSH
21260: LD_VAR 0 6
21264: PPUSH
21265: LD_VAR 0 7
21269: PPUSH
21270: CALL_OW 330
// repeat wait ( 1 ) ;
21274: LD_INT 1
21276: PPUSH
21277: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
21281: LD_VAR 0 1
21285: PPUSH
21286: CALL_OW 316
21290: PUSH
21291: LD_VAR 0 1
21295: PPUSH
21296: CALL_OW 314
21300: OR
21301: PUSH
21302: LD_VAR 0 1
21306: PPUSH
21307: CALL_OW 302
21311: NOT
21312: OR
21313: PUSH
21314: LD_VAR 0 1
21318: PPUSH
21319: CALL_OW 301
21323: OR
21324: IFFALSE 21274
// RemoveSeeing ( _x , _y , side ) ;
21326: LD_VAR 0 8
21330: PPUSH
21331: LD_VAR 0 9
21335: PPUSH
21336: LD_VAR 0 6
21340: PPUSH
21341: CALL_OW 331
// end ; end_of_file
21345: LD_VAR 0 4
21349: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
21350: LD_VAR 0 1
21354: PPUSH
21355: LD_VAR 0 2
21359: PPUSH
21360: LD_VAR 0 3
21364: PPUSH
21365: LD_VAR 0 4
21369: PPUSH
21370: LD_VAR 0 5
21374: PPUSH
21375: LD_VAR 0 6
21379: PPUSH
21380: CALL 1463 0 6
// end ;
21384: PPOPN 6
21386: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
21387: LD_INT 0
21389: PPUSH
// begin if not units then
21390: LD_VAR 0 1
21394: NOT
21395: IFFALSE 21399
// exit ;
21397: GO 21399
// end ;
21399: PPOPN 7
21401: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
21402: CALL 1434 0 0
// end ; end_of_file
21406: PPOPN 1
21408: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
21409: LD_VAR 0 1
21413: PUSH
21414: LD_INT 200
21416: DOUBLE
21417: GREATEREQUAL
21418: IFFALSE 21426
21420: LD_INT 299
21422: DOUBLE
21423: LESSEQUAL
21424: IFTRUE 21428
21426: GO 21460
21428: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
21429: LD_VAR 0 1
21433: PPUSH
21434: LD_VAR 0 2
21438: PPUSH
21439: LD_VAR 0 3
21443: PPUSH
21444: LD_VAR 0 4
21448: PPUSH
21449: LD_VAR 0 5
21453: PPUSH
21454: CALL 17437 0 5
21458: GO 21537
21460: LD_INT 300
21462: DOUBLE
21463: GREATEREQUAL
21464: IFFALSE 21472
21466: LD_INT 399
21468: DOUBLE
21469: LESSEQUAL
21470: IFTRUE 21474
21472: GO 21536
21474: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
21475: LD_VAR 0 1
21479: PPUSH
21480: LD_VAR 0 2
21484: PPUSH
21485: LD_VAR 0 3
21489: PPUSH
21490: LD_VAR 0 4
21494: PPUSH
21495: LD_VAR 0 5
21499: PPUSH
21500: LD_VAR 0 6
21504: PPUSH
21505: LD_VAR 0 7
21509: PPUSH
21510: LD_VAR 0 8
21514: PPUSH
21515: LD_VAR 0 9
21519: PPUSH
21520: LD_VAR 0 10
21524: PPUSH
21525: LD_VAR 0 11
21529: PPUSH
21530: CALL 13770 0 11
21534: GO 21537
21536: POP
// end ;
21537: PPOPN 11
21539: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
21540: LD_VAR 0 1
21544: PPUSH
21545: LD_VAR 0 2
21549: PPUSH
21550: LD_VAR 0 3
21554: PPUSH
21555: LD_VAR 0 4
21559: PPUSH
21560: LD_VAR 0 5
21564: PPUSH
21565: CALL 17173 0 5
// end ; end_of_file
21569: PPOPN 5
21571: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21572: LD_INT 0
21574: PPUSH
21575: PPUSH
// if exist_mode then
21576: LD_VAR 0 2
21580: IFFALSE 21605
// unit := CreateCharacter ( prefix & ident ) else
21582: LD_ADDR_VAR 0 5
21586: PUSH
21587: LD_VAR 0 3
21591: PUSH
21592: LD_VAR 0 1
21596: STR
21597: PPUSH
21598: CALL_OW 34
21602: ST_TO_ADDR
21603: GO 21620
// unit := NewCharacter ( ident ) ;
21605: LD_ADDR_VAR 0 5
21609: PUSH
21610: LD_VAR 0 1
21614: PPUSH
21615: CALL_OW 25
21619: ST_TO_ADDR
// result := unit ;
21620: LD_ADDR_VAR 0 4
21624: PUSH
21625: LD_VAR 0 5
21629: ST_TO_ADDR
// end ;
21630: LD_VAR 0 4
21634: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21635: LD_INT 0
21637: PPUSH
21638: PPUSH
// if not side or not nation then
21639: LD_VAR 0 1
21643: NOT
21644: PUSH
21645: LD_VAR 0 2
21649: NOT
21650: OR
21651: IFFALSE 21655
// exit ;
21653: GO 22423
// case nation of nation_american :
21655: LD_VAR 0 2
21659: PUSH
21660: LD_INT 1
21662: DOUBLE
21663: EQUAL
21664: IFTRUE 21668
21666: GO 21882
21668: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21669: LD_ADDR_VAR 0 4
21673: PUSH
21674: LD_INT 35
21676: PUSH
21677: LD_INT 45
21679: PUSH
21680: LD_INT 46
21682: PUSH
21683: LD_INT 47
21685: PUSH
21686: LD_INT 82
21688: PUSH
21689: LD_INT 83
21691: PUSH
21692: LD_INT 84
21694: PUSH
21695: LD_INT 85
21697: PUSH
21698: LD_INT 86
21700: PUSH
21701: LD_INT 1
21703: PUSH
21704: LD_INT 2
21706: PUSH
21707: LD_INT 6
21709: PUSH
21710: LD_INT 15
21712: PUSH
21713: LD_INT 16
21715: PUSH
21716: LD_INT 7
21718: PUSH
21719: LD_INT 12
21721: PUSH
21722: LD_INT 13
21724: PUSH
21725: LD_INT 10
21727: PUSH
21728: LD_INT 14
21730: PUSH
21731: LD_INT 20
21733: PUSH
21734: LD_INT 21
21736: PUSH
21737: LD_INT 22
21739: PUSH
21740: LD_INT 25
21742: PUSH
21743: LD_INT 32
21745: PUSH
21746: LD_INT 27
21748: PUSH
21749: LD_INT 36
21751: PUSH
21752: LD_INT 69
21754: PUSH
21755: LD_INT 39
21757: PUSH
21758: LD_INT 34
21760: PUSH
21761: LD_INT 40
21763: PUSH
21764: LD_INT 48
21766: PUSH
21767: LD_INT 49
21769: PUSH
21770: LD_INT 50
21772: PUSH
21773: LD_INT 51
21775: PUSH
21776: LD_INT 52
21778: PUSH
21779: LD_INT 53
21781: PUSH
21782: LD_INT 54
21784: PUSH
21785: LD_INT 55
21787: PUSH
21788: LD_INT 56
21790: PUSH
21791: LD_INT 57
21793: PUSH
21794: LD_INT 58
21796: PUSH
21797: LD_INT 59
21799: PUSH
21800: LD_INT 60
21802: PUSH
21803: LD_INT 61
21805: PUSH
21806: LD_INT 62
21808: PUSH
21809: LD_INT 80
21811: PUSH
21812: LD_INT 82
21814: PUSH
21815: LD_INT 83
21817: PUSH
21818: LD_INT 84
21820: PUSH
21821: LD_INT 85
21823: PUSH
21824: LD_INT 86
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: ST_TO_ADDR
21880: GO 22347
21882: LD_INT 2
21884: DOUBLE
21885: EQUAL
21886: IFTRUE 21890
21888: GO 22116
21890: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21891: LD_ADDR_VAR 0 4
21895: PUSH
21896: LD_INT 35
21898: PUSH
21899: LD_INT 45
21901: PUSH
21902: LD_INT 46
21904: PUSH
21905: LD_INT 47
21907: PUSH
21908: LD_INT 82
21910: PUSH
21911: LD_INT 83
21913: PUSH
21914: LD_INT 84
21916: PUSH
21917: LD_INT 85
21919: PUSH
21920: LD_INT 87
21922: PUSH
21923: LD_INT 70
21925: PUSH
21926: LD_INT 1
21928: PUSH
21929: LD_INT 11
21931: PUSH
21932: LD_INT 3
21934: PUSH
21935: LD_INT 4
21937: PUSH
21938: LD_INT 5
21940: PUSH
21941: LD_INT 6
21943: PUSH
21944: LD_INT 15
21946: PUSH
21947: LD_INT 18
21949: PUSH
21950: LD_INT 7
21952: PUSH
21953: LD_INT 17
21955: PUSH
21956: LD_INT 8
21958: PUSH
21959: LD_INT 20
21961: PUSH
21962: LD_INT 21
21964: PUSH
21965: LD_INT 22
21967: PUSH
21968: LD_INT 72
21970: PUSH
21971: LD_INT 26
21973: PUSH
21974: LD_INT 69
21976: PUSH
21977: LD_INT 39
21979: PUSH
21980: LD_INT 40
21982: PUSH
21983: LD_INT 41
21985: PUSH
21986: LD_INT 42
21988: PUSH
21989: LD_INT 43
21991: PUSH
21992: LD_INT 48
21994: PUSH
21995: LD_INT 49
21997: PUSH
21998: LD_INT 50
22000: PUSH
22001: LD_INT 51
22003: PUSH
22004: LD_INT 52
22006: PUSH
22007: LD_INT 53
22009: PUSH
22010: LD_INT 54
22012: PUSH
22013: LD_INT 55
22015: PUSH
22016: LD_INT 56
22018: PUSH
22019: LD_INT 60
22021: PUSH
22022: LD_INT 61
22024: PUSH
22025: LD_INT 62
22027: PUSH
22028: LD_INT 66
22030: PUSH
22031: LD_INT 67
22033: PUSH
22034: LD_INT 68
22036: PUSH
22037: LD_INT 81
22039: PUSH
22040: LD_INT 82
22042: PUSH
22043: LD_INT 83
22045: PUSH
22046: LD_INT 84
22048: PUSH
22049: LD_INT 85
22051: PUSH
22052: LD_INT 87
22054: PUSH
22055: LD_INT 88
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: ST_TO_ADDR
22114: GO 22347
22116: LD_INT 3
22118: DOUBLE
22119: EQUAL
22120: IFTRUE 22124
22122: GO 22346
22124: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22125: LD_ADDR_VAR 0 4
22129: PUSH
22130: LD_INT 46
22132: PUSH
22133: LD_INT 47
22135: PUSH
22136: LD_INT 1
22138: PUSH
22139: LD_INT 2
22141: PUSH
22142: LD_INT 82
22144: PUSH
22145: LD_INT 83
22147: PUSH
22148: LD_INT 84
22150: PUSH
22151: LD_INT 85
22153: PUSH
22154: LD_INT 86
22156: PUSH
22157: LD_INT 11
22159: PUSH
22160: LD_INT 9
22162: PUSH
22163: LD_INT 20
22165: PUSH
22166: LD_INT 19
22168: PUSH
22169: LD_INT 21
22171: PUSH
22172: LD_INT 24
22174: PUSH
22175: LD_INT 22
22177: PUSH
22178: LD_INT 25
22180: PUSH
22181: LD_INT 28
22183: PUSH
22184: LD_INT 29
22186: PUSH
22187: LD_INT 30
22189: PUSH
22190: LD_INT 31
22192: PUSH
22193: LD_INT 37
22195: PUSH
22196: LD_INT 38
22198: PUSH
22199: LD_INT 32
22201: PUSH
22202: LD_INT 27
22204: PUSH
22205: LD_INT 33
22207: PUSH
22208: LD_INT 69
22210: PUSH
22211: LD_INT 39
22213: PUSH
22214: LD_INT 34
22216: PUSH
22217: LD_INT 40
22219: PUSH
22220: LD_INT 71
22222: PUSH
22223: LD_INT 23
22225: PUSH
22226: LD_INT 44
22228: PUSH
22229: LD_INT 48
22231: PUSH
22232: LD_INT 49
22234: PUSH
22235: LD_INT 50
22237: PUSH
22238: LD_INT 51
22240: PUSH
22241: LD_INT 52
22243: PUSH
22244: LD_INT 53
22246: PUSH
22247: LD_INT 54
22249: PUSH
22250: LD_INT 55
22252: PUSH
22253: LD_INT 56
22255: PUSH
22256: LD_INT 57
22258: PUSH
22259: LD_INT 58
22261: PUSH
22262: LD_INT 59
22264: PUSH
22265: LD_INT 63
22267: PUSH
22268: LD_INT 64
22270: PUSH
22271: LD_INT 65
22273: PUSH
22274: LD_INT 82
22276: PUSH
22277: LD_INT 83
22279: PUSH
22280: LD_INT 84
22282: PUSH
22283: LD_INT 85
22285: PUSH
22286: LD_INT 86
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: ST_TO_ADDR
22344: GO 22347
22346: POP
// if state > - 1 and state < 3 then
22347: LD_VAR 0 3
22351: PUSH
22352: LD_INT 1
22354: NEG
22355: GREATER
22356: PUSH
22357: LD_VAR 0 3
22361: PUSH
22362: LD_INT 3
22364: LESS
22365: AND
22366: IFFALSE 22423
// for i in result do
22368: LD_ADDR_VAR 0 5
22372: PUSH
22373: LD_VAR 0 4
22377: PUSH
22378: FOR_IN
22379: IFFALSE 22421
// if GetTech ( i , side ) <> state then
22381: LD_VAR 0 5
22385: PPUSH
22386: LD_VAR 0 1
22390: PPUSH
22391: CALL_OW 321
22395: PUSH
22396: LD_VAR 0 3
22400: NONEQUAL
22401: IFFALSE 22419
// result := result diff i ;
22403: LD_ADDR_VAR 0 4
22407: PUSH
22408: LD_VAR 0 4
22412: PUSH
22413: LD_VAR 0 5
22417: DIFF
22418: ST_TO_ADDR
22419: GO 22378
22421: POP
22422: POP
// end ;
22423: LD_VAR 0 4
22427: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22428: LD_INT 0
22430: PPUSH
22431: PPUSH
22432: PPUSH
// result := true ;
22433: LD_ADDR_VAR 0 3
22437: PUSH
22438: LD_INT 1
22440: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22441: LD_ADDR_VAR 0 5
22445: PUSH
22446: LD_VAR 0 2
22450: PPUSH
22451: CALL_OW 480
22455: ST_TO_ADDR
// if not tmp then
22456: LD_VAR 0 5
22460: NOT
22461: IFFALSE 22465
// exit ;
22463: GO 22514
// for i in tmp do
22465: LD_ADDR_VAR 0 4
22469: PUSH
22470: LD_VAR 0 5
22474: PUSH
22475: FOR_IN
22476: IFFALSE 22512
// if GetTech ( i , side ) <> state_researched then
22478: LD_VAR 0 4
22482: PPUSH
22483: LD_VAR 0 1
22487: PPUSH
22488: CALL_OW 321
22492: PUSH
22493: LD_INT 2
22495: NONEQUAL
22496: IFFALSE 22510
// begin result := false ;
22498: LD_ADDR_VAR 0 3
22502: PUSH
22503: LD_INT 0
22505: ST_TO_ADDR
// exit ;
22506: POP
22507: POP
22508: GO 22514
// end ;
22510: GO 22475
22512: POP
22513: POP
// end ;
22514: LD_VAR 0 3
22518: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22519: LD_INT 0
22521: PPUSH
22522: PPUSH
22523: PPUSH
22524: PPUSH
22525: PPUSH
22526: PPUSH
22527: PPUSH
22528: PPUSH
22529: PPUSH
22530: PPUSH
22531: PPUSH
22532: PPUSH
22533: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22534: LD_VAR 0 1
22538: NOT
22539: PUSH
22540: LD_VAR 0 1
22544: PPUSH
22545: CALL_OW 257
22549: PUSH
22550: LD_INT 9
22552: NONEQUAL
22553: OR
22554: IFFALSE 22558
// exit ;
22556: GO 23131
// side := GetSide ( unit ) ;
22558: LD_ADDR_VAR 0 9
22562: PUSH
22563: LD_VAR 0 1
22567: PPUSH
22568: CALL_OW 255
22572: ST_TO_ADDR
// tech_space := tech_spacanom ;
22573: LD_ADDR_VAR 0 12
22577: PUSH
22578: LD_INT 29
22580: ST_TO_ADDR
// tech_time := tech_taurad ;
22581: LD_ADDR_VAR 0 13
22585: PUSH
22586: LD_INT 28
22588: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22589: LD_ADDR_VAR 0 11
22593: PUSH
22594: LD_VAR 0 1
22598: PPUSH
22599: CALL_OW 310
22603: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22604: LD_VAR 0 11
22608: PPUSH
22609: CALL_OW 247
22613: PUSH
22614: LD_INT 2
22616: EQUAL
22617: IFFALSE 22621
// exit ;
22619: GO 23131
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22621: LD_ADDR_VAR 0 8
22625: PUSH
22626: LD_INT 81
22628: PUSH
22629: LD_VAR 0 9
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PUSH
22638: LD_INT 3
22640: PUSH
22641: LD_INT 21
22643: PUSH
22644: LD_INT 3
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PPUSH
22659: CALL_OW 69
22663: ST_TO_ADDR
// if not tmp then
22664: LD_VAR 0 8
22668: NOT
22669: IFFALSE 22673
// exit ;
22671: GO 23131
// if in_unit then
22673: LD_VAR 0 11
22677: IFFALSE 22701
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22679: LD_ADDR_VAR 0 10
22683: PUSH
22684: LD_VAR 0 8
22688: PPUSH
22689: LD_VAR 0 11
22693: PPUSH
22694: CALL_OW 74
22698: ST_TO_ADDR
22699: GO 22721
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22701: LD_ADDR_VAR 0 10
22705: PUSH
22706: LD_VAR 0 8
22710: PPUSH
22711: LD_VAR 0 1
22715: PPUSH
22716: CALL_OW 74
22720: ST_TO_ADDR
// if not enemy then
22721: LD_VAR 0 10
22725: NOT
22726: IFFALSE 22730
// exit ;
22728: GO 23131
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22730: LD_VAR 0 11
22734: PUSH
22735: LD_VAR 0 11
22739: PPUSH
22740: LD_VAR 0 10
22744: PPUSH
22745: CALL_OW 296
22749: PUSH
22750: LD_INT 13
22752: GREATER
22753: AND
22754: PUSH
22755: LD_VAR 0 1
22759: PPUSH
22760: LD_VAR 0 10
22764: PPUSH
22765: CALL_OW 296
22769: PUSH
22770: LD_INT 12
22772: GREATER
22773: OR
22774: IFFALSE 22778
// exit ;
22776: GO 23131
// missile := [ 1 ] ;
22778: LD_ADDR_VAR 0 14
22782: PUSH
22783: LD_INT 1
22785: PUSH
22786: EMPTY
22787: LIST
22788: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22789: LD_VAR 0 9
22793: PPUSH
22794: LD_VAR 0 12
22798: PPUSH
22799: CALL_OW 325
22803: IFFALSE 22832
// missile := Replace ( missile , missile + 1 , 2 ) ;
22805: LD_ADDR_VAR 0 14
22809: PUSH
22810: LD_VAR 0 14
22814: PPUSH
22815: LD_VAR 0 14
22819: PUSH
22820: LD_INT 1
22822: PLUS
22823: PPUSH
22824: LD_INT 2
22826: PPUSH
22827: CALL_OW 1
22831: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22832: LD_VAR 0 9
22836: PPUSH
22837: LD_VAR 0 13
22841: PPUSH
22842: CALL_OW 325
22846: PUSH
22847: LD_VAR 0 10
22851: PPUSH
22852: CALL_OW 255
22856: PPUSH
22857: LD_VAR 0 13
22861: PPUSH
22862: CALL_OW 325
22866: NOT
22867: AND
22868: IFFALSE 22897
// missile := Replace ( missile , missile + 1 , 3 ) ;
22870: LD_ADDR_VAR 0 14
22874: PUSH
22875: LD_VAR 0 14
22879: PPUSH
22880: LD_VAR 0 14
22884: PUSH
22885: LD_INT 1
22887: PLUS
22888: PPUSH
22889: LD_INT 3
22891: PPUSH
22892: CALL_OW 1
22896: ST_TO_ADDR
// if missile < 2 then
22897: LD_VAR 0 14
22901: PUSH
22902: LD_INT 2
22904: LESS
22905: IFFALSE 22909
// exit ;
22907: GO 23131
// x := GetX ( enemy ) ;
22909: LD_ADDR_VAR 0 4
22913: PUSH
22914: LD_VAR 0 10
22918: PPUSH
22919: CALL_OW 250
22923: ST_TO_ADDR
// y := GetY ( enemy ) ;
22924: LD_ADDR_VAR 0 5
22928: PUSH
22929: LD_VAR 0 10
22933: PPUSH
22934: CALL_OW 251
22938: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22939: LD_ADDR_VAR 0 6
22943: PUSH
22944: LD_VAR 0 4
22948: PUSH
22949: LD_INT 1
22951: NEG
22952: PPUSH
22953: LD_INT 1
22955: PPUSH
22956: CALL_OW 12
22960: PLUS
22961: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22962: LD_ADDR_VAR 0 7
22966: PUSH
22967: LD_VAR 0 5
22971: PUSH
22972: LD_INT 1
22974: NEG
22975: PPUSH
22976: LD_INT 1
22978: PPUSH
22979: CALL_OW 12
22983: PLUS
22984: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22985: LD_VAR 0 6
22989: PPUSH
22990: LD_VAR 0 7
22994: PPUSH
22995: CALL_OW 488
22999: NOT
23000: IFFALSE 23022
// begin _x := x ;
23002: LD_ADDR_VAR 0 6
23006: PUSH
23007: LD_VAR 0 4
23011: ST_TO_ADDR
// _y := y ;
23012: LD_ADDR_VAR 0 7
23016: PUSH
23017: LD_VAR 0 5
23021: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23022: LD_ADDR_VAR 0 3
23026: PUSH
23027: LD_INT 1
23029: PPUSH
23030: LD_VAR 0 14
23034: PPUSH
23035: CALL_OW 12
23039: ST_TO_ADDR
// case i of 1 :
23040: LD_VAR 0 3
23044: PUSH
23045: LD_INT 1
23047: DOUBLE
23048: EQUAL
23049: IFTRUE 23053
23051: GO 23070
23053: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23054: LD_VAR 0 1
23058: PPUSH
23059: LD_VAR 0 10
23063: PPUSH
23064: CALL_OW 115
23068: GO 23131
23070: LD_INT 2
23072: DOUBLE
23073: EQUAL
23074: IFTRUE 23078
23076: GO 23100
23078: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23079: LD_VAR 0 1
23083: PPUSH
23084: LD_VAR 0 6
23088: PPUSH
23089: LD_VAR 0 7
23093: PPUSH
23094: CALL_OW 153
23098: GO 23131
23100: LD_INT 3
23102: DOUBLE
23103: EQUAL
23104: IFTRUE 23108
23106: GO 23130
23108: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23109: LD_VAR 0 1
23113: PPUSH
23114: LD_VAR 0 6
23118: PPUSH
23119: LD_VAR 0 7
23123: PPUSH
23124: CALL_OW 154
23128: GO 23131
23130: POP
// end ;
23131: LD_VAR 0 2
23135: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23136: LD_INT 0
23138: PPUSH
23139: PPUSH
23140: PPUSH
23141: PPUSH
23142: PPUSH
23143: PPUSH
// if not unit or not building then
23144: LD_VAR 0 1
23148: NOT
23149: PUSH
23150: LD_VAR 0 2
23154: NOT
23155: OR
23156: IFFALSE 23160
// exit ;
23158: GO 23318
// x := GetX ( building ) ;
23160: LD_ADDR_VAR 0 5
23164: PUSH
23165: LD_VAR 0 2
23169: PPUSH
23170: CALL_OW 250
23174: ST_TO_ADDR
// y := GetY ( building ) ;
23175: LD_ADDR_VAR 0 6
23179: PUSH
23180: LD_VAR 0 2
23184: PPUSH
23185: CALL_OW 251
23189: ST_TO_ADDR
// for i = 0 to 5 do
23190: LD_ADDR_VAR 0 4
23194: PUSH
23195: DOUBLE
23196: LD_INT 0
23198: DEC
23199: ST_TO_ADDR
23200: LD_INT 5
23202: PUSH
23203: FOR_TO
23204: IFFALSE 23316
// begin _x := ShiftX ( x , i , 3 ) ;
23206: LD_ADDR_VAR 0 7
23210: PUSH
23211: LD_VAR 0 5
23215: PPUSH
23216: LD_VAR 0 4
23220: PPUSH
23221: LD_INT 3
23223: PPUSH
23224: CALL_OW 272
23228: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23229: LD_ADDR_VAR 0 8
23233: PUSH
23234: LD_VAR 0 6
23238: PPUSH
23239: LD_VAR 0 4
23243: PPUSH
23244: LD_INT 3
23246: PPUSH
23247: CALL_OW 273
23251: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23252: LD_VAR 0 7
23256: PPUSH
23257: LD_VAR 0 8
23261: PPUSH
23262: CALL_OW 488
23266: NOT
23267: IFFALSE 23271
// continue ;
23269: GO 23203
// if HexInfo ( _x , _y ) = 0 then
23271: LD_VAR 0 7
23275: PPUSH
23276: LD_VAR 0 8
23280: PPUSH
23281: CALL_OW 428
23285: PUSH
23286: LD_INT 0
23288: EQUAL
23289: IFFALSE 23314
// begin ComMoveXY ( unit , _x , _y ) ;
23291: LD_VAR 0 1
23295: PPUSH
23296: LD_VAR 0 7
23300: PPUSH
23301: LD_VAR 0 8
23305: PPUSH
23306: CALL_OW 111
// exit ;
23310: POP
23311: POP
23312: GO 23318
// end ; end ;
23314: GO 23203
23316: POP
23317: POP
// end ;
23318: LD_VAR 0 3
23322: RET
// export function ScanBase ( side , base_area ) ; begin
23323: LD_INT 0
23325: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23326: LD_ADDR_VAR 0 3
23330: PUSH
23331: LD_VAR 0 2
23335: PPUSH
23336: LD_INT 81
23338: PUSH
23339: LD_VAR 0 1
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PPUSH
23348: CALL_OW 70
23352: ST_TO_ADDR
// end ;
23353: LD_VAR 0 3
23357: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23358: LD_INT 0
23360: PPUSH
23361: PPUSH
23362: PPUSH
23363: PPUSH
// result := false ;
23364: LD_ADDR_VAR 0 2
23368: PUSH
23369: LD_INT 0
23371: ST_TO_ADDR
// side := GetSide ( unit ) ;
23372: LD_ADDR_VAR 0 3
23376: PUSH
23377: LD_VAR 0 1
23381: PPUSH
23382: CALL_OW 255
23386: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23387: LD_ADDR_VAR 0 4
23391: PUSH
23392: LD_VAR 0 1
23396: PPUSH
23397: CALL_OW 248
23401: ST_TO_ADDR
// case nat of 1 :
23402: LD_VAR 0 4
23406: PUSH
23407: LD_INT 1
23409: DOUBLE
23410: EQUAL
23411: IFTRUE 23415
23413: GO 23426
23415: POP
// tech := tech_lassight ; 2 :
23416: LD_ADDR_VAR 0 5
23420: PUSH
23421: LD_INT 12
23423: ST_TO_ADDR
23424: GO 23465
23426: LD_INT 2
23428: DOUBLE
23429: EQUAL
23430: IFTRUE 23434
23432: GO 23445
23434: POP
// tech := tech_mortar ; 3 :
23435: LD_ADDR_VAR 0 5
23439: PUSH
23440: LD_INT 41
23442: ST_TO_ADDR
23443: GO 23465
23445: LD_INT 3
23447: DOUBLE
23448: EQUAL
23449: IFTRUE 23453
23451: GO 23464
23453: POP
// tech := tech_bazooka ; end ;
23454: LD_ADDR_VAR 0 5
23458: PUSH
23459: LD_INT 44
23461: ST_TO_ADDR
23462: GO 23465
23464: POP
// if Researched ( side , tech ) then
23465: LD_VAR 0 3
23469: PPUSH
23470: LD_VAR 0 5
23474: PPUSH
23475: CALL_OW 325
23479: IFFALSE 23506
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23481: LD_ADDR_VAR 0 2
23485: PUSH
23486: LD_INT 5
23488: PUSH
23489: LD_INT 8
23491: PUSH
23492: LD_INT 9
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: LIST
23499: PUSH
23500: LD_VAR 0 4
23504: ARRAY
23505: ST_TO_ADDR
// end ;
23506: LD_VAR 0 2
23510: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23511: LD_INT 0
23513: PPUSH
23514: PPUSH
23515: PPUSH
// if not mines then
23516: LD_VAR 0 2
23520: NOT
23521: IFFALSE 23525
// exit ;
23523: GO 23669
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23525: LD_ADDR_VAR 0 5
23529: PUSH
23530: LD_INT 81
23532: PUSH
23533: LD_VAR 0 1
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 3
23544: PUSH
23545: LD_INT 21
23547: PUSH
23548: LD_INT 3
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PPUSH
23563: CALL_OW 69
23567: ST_TO_ADDR
// for i in mines do
23568: LD_ADDR_VAR 0 4
23572: PUSH
23573: LD_VAR 0 2
23577: PUSH
23578: FOR_IN
23579: IFFALSE 23667
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23581: LD_VAR 0 4
23585: PUSH
23586: LD_INT 1
23588: ARRAY
23589: PPUSH
23590: LD_VAR 0 4
23594: PUSH
23595: LD_INT 2
23597: ARRAY
23598: PPUSH
23599: CALL_OW 458
23603: NOT
23604: IFFALSE 23608
// continue ;
23606: GO 23578
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23608: LD_VAR 0 4
23612: PUSH
23613: LD_INT 1
23615: ARRAY
23616: PPUSH
23617: LD_VAR 0 4
23621: PUSH
23622: LD_INT 2
23624: ARRAY
23625: PPUSH
23626: CALL_OW 428
23630: PUSH
23631: LD_VAR 0 5
23635: IN
23636: IFFALSE 23665
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23638: LD_VAR 0 4
23642: PUSH
23643: LD_INT 1
23645: ARRAY
23646: PPUSH
23647: LD_VAR 0 4
23651: PUSH
23652: LD_INT 2
23654: ARRAY
23655: PPUSH
23656: LD_VAR 0 1
23660: PPUSH
23661: CALL_OW 456
// end ;
23665: GO 23578
23667: POP
23668: POP
// end ;
23669: LD_VAR 0 3
23673: RET
// export function Count ( array ) ; var i ; begin
23674: LD_INT 0
23676: PPUSH
23677: PPUSH
// result := 0 ;
23678: LD_ADDR_VAR 0 2
23682: PUSH
23683: LD_INT 0
23685: ST_TO_ADDR
// for i in array do
23686: LD_ADDR_VAR 0 3
23690: PUSH
23691: LD_VAR 0 1
23695: PUSH
23696: FOR_IN
23697: IFFALSE 23721
// if i then
23699: LD_VAR 0 3
23703: IFFALSE 23719
// result := result + 1 ;
23705: LD_ADDR_VAR 0 2
23709: PUSH
23710: LD_VAR 0 2
23714: PUSH
23715: LD_INT 1
23717: PLUS
23718: ST_TO_ADDR
23719: GO 23696
23721: POP
23722: POP
// end ;
23723: LD_VAR 0 2
23727: RET
// export function IsEmpty ( building ) ; begin
23728: LD_INT 0
23730: PPUSH
// if not building then
23731: LD_VAR 0 1
23735: NOT
23736: IFFALSE 23740
// exit ;
23738: GO 23783
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23740: LD_ADDR_VAR 0 2
23744: PUSH
23745: LD_VAR 0 1
23749: PUSH
23750: LD_INT 22
23752: PUSH
23753: LD_VAR 0 1
23757: PPUSH
23758: CALL_OW 255
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: PUSH
23767: LD_INT 58
23769: PUSH
23770: EMPTY
23771: LIST
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: PPUSH
23777: CALL_OW 69
23781: IN
23782: ST_TO_ADDR
// end ;
23783: LD_VAR 0 2
23787: RET
// export function IsNotFull ( building ) ; var places ; begin
23788: LD_INT 0
23790: PPUSH
23791: PPUSH
// if not building then
23792: LD_VAR 0 1
23796: NOT
23797: IFFALSE 23801
// exit ;
23799: GO 23972
// result := false ;
23801: LD_ADDR_VAR 0 2
23805: PUSH
23806: LD_INT 0
23808: ST_TO_ADDR
// places := 0 ;
23809: LD_ADDR_VAR 0 3
23813: PUSH
23814: LD_INT 0
23816: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
23817: LD_VAR 0 1
23821: PPUSH
23822: CALL_OW 266
23826: PUSH
23827: LD_INT 0
23829: DOUBLE
23830: EQUAL
23831: IFTRUE 23889
23833: LD_INT 1
23835: DOUBLE
23836: EQUAL
23837: IFTRUE 23889
23839: LD_INT 6
23841: DOUBLE
23842: EQUAL
23843: IFTRUE 23889
23845: LD_INT 7
23847: DOUBLE
23848: EQUAL
23849: IFTRUE 23889
23851: LD_INT 8
23853: DOUBLE
23854: EQUAL
23855: IFTRUE 23889
23857: LD_INT 4
23859: DOUBLE
23860: EQUAL
23861: IFTRUE 23889
23863: LD_INT 5
23865: DOUBLE
23866: EQUAL
23867: IFTRUE 23889
23869: LD_INT 2
23871: DOUBLE
23872: EQUAL
23873: IFTRUE 23889
23875: LD_INT 3
23877: DOUBLE
23878: EQUAL
23879: IFTRUE 23889
23881: LD_INT 35
23883: DOUBLE
23884: EQUAL
23885: IFTRUE 23889
23887: GO 23900
23889: POP
// places := 6 ; b_bunker , b_breastwork :
23890: LD_ADDR_VAR 0 3
23894: PUSH
23895: LD_INT 6
23897: ST_TO_ADDR
23898: GO 23945
23900: LD_INT 32
23902: DOUBLE
23903: EQUAL
23904: IFTRUE 23914
23906: LD_INT 31
23908: DOUBLE
23909: EQUAL
23910: IFTRUE 23914
23912: GO 23925
23914: POP
// places := 1 ; b_control_tower :
23915: LD_ADDR_VAR 0 3
23919: PUSH
23920: LD_INT 1
23922: ST_TO_ADDR
23923: GO 23945
23925: LD_INT 36
23927: DOUBLE
23928: EQUAL
23929: IFTRUE 23933
23931: GO 23944
23933: POP
// places := 3 ; end ;
23934: LD_ADDR_VAR 0 3
23938: PUSH
23939: LD_INT 3
23941: ST_TO_ADDR
23942: GO 23945
23944: POP
// if places then
23945: LD_VAR 0 3
23949: IFFALSE 23972
// result := UnitsInside ( building ) < places ;
23951: LD_ADDR_VAR 0 2
23955: PUSH
23956: LD_VAR 0 1
23960: PPUSH
23961: CALL_OW 313
23965: PUSH
23966: LD_VAR 0 3
23970: LESS
23971: ST_TO_ADDR
// end ;
23972: LD_VAR 0 2
23976: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23977: LD_INT 0
23979: PPUSH
23980: PPUSH
23981: PPUSH
23982: PPUSH
// tmp := [ ] ;
23983: LD_ADDR_VAR 0 3
23987: PUSH
23988: EMPTY
23989: ST_TO_ADDR
// list := [ ] ;
23990: LD_ADDR_VAR 0 5
23994: PUSH
23995: EMPTY
23996: ST_TO_ADDR
// for i = 16 to 25 do
23997: LD_ADDR_VAR 0 4
24001: PUSH
24002: DOUBLE
24003: LD_INT 16
24005: DEC
24006: ST_TO_ADDR
24007: LD_INT 25
24009: PUSH
24010: FOR_TO
24011: IFFALSE 24084
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24013: LD_ADDR_VAR 0 3
24017: PUSH
24018: LD_VAR 0 3
24022: PUSH
24023: LD_INT 22
24025: PUSH
24026: LD_VAR 0 1
24030: PPUSH
24031: CALL_OW 255
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: LD_INT 91
24042: PUSH
24043: LD_VAR 0 1
24047: PUSH
24048: LD_INT 6
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 30
24058: PUSH
24059: LD_VAR 0 4
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: LIST
24072: PUSH
24073: EMPTY
24074: LIST
24075: PPUSH
24076: CALL_OW 69
24080: ADD
24081: ST_TO_ADDR
24082: GO 24010
24084: POP
24085: POP
// for i = 1 to tmp do
24086: LD_ADDR_VAR 0 4
24090: PUSH
24091: DOUBLE
24092: LD_INT 1
24094: DEC
24095: ST_TO_ADDR
24096: LD_VAR 0 3
24100: PUSH
24101: FOR_TO
24102: IFFALSE 24190
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24104: LD_ADDR_VAR 0 5
24108: PUSH
24109: LD_VAR 0 5
24113: PUSH
24114: LD_VAR 0 3
24118: PUSH
24119: LD_VAR 0 4
24123: ARRAY
24124: PPUSH
24125: CALL_OW 266
24129: PUSH
24130: LD_VAR 0 3
24134: PUSH
24135: LD_VAR 0 4
24139: ARRAY
24140: PPUSH
24141: CALL_OW 250
24145: PUSH
24146: LD_VAR 0 3
24150: PUSH
24151: LD_VAR 0 4
24155: ARRAY
24156: PPUSH
24157: CALL_OW 251
24161: PUSH
24162: LD_VAR 0 3
24166: PUSH
24167: LD_VAR 0 4
24171: ARRAY
24172: PPUSH
24173: CALL_OW 254
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: PUSH
24184: EMPTY
24185: LIST
24186: ADD
24187: ST_TO_ADDR
24188: GO 24101
24190: POP
24191: POP
// result := list ;
24192: LD_ADDR_VAR 0 2
24196: PUSH
24197: LD_VAR 0 5
24201: ST_TO_ADDR
// end ;
24202: LD_VAR 0 2
24206: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24207: LD_INT 0
24209: PPUSH
24210: PPUSH
24211: PPUSH
24212: PPUSH
24213: PPUSH
24214: PPUSH
24215: PPUSH
// if not factory then
24216: LD_VAR 0 1
24220: NOT
24221: IFFALSE 24225
// exit ;
24223: GO 24818
// if control = control_apeman then
24225: LD_VAR 0 4
24229: PUSH
24230: LD_INT 5
24232: EQUAL
24233: IFFALSE 24342
// begin tmp := UnitsInside ( factory ) ;
24235: LD_ADDR_VAR 0 8
24239: PUSH
24240: LD_VAR 0 1
24244: PPUSH
24245: CALL_OW 313
24249: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24250: LD_VAR 0 8
24254: PPUSH
24255: LD_INT 25
24257: PUSH
24258: LD_INT 12
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PPUSH
24265: CALL_OW 72
24269: NOT
24270: IFFALSE 24280
// control := control_manual ;
24272: LD_ADDR_VAR 0 4
24276: PUSH
24277: LD_INT 1
24279: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24280: LD_ADDR_VAR 0 8
24284: PUSH
24285: LD_VAR 0 1
24289: PPUSH
24290: CALL 23977 0 1
24294: ST_TO_ADDR
// if tmp then
24295: LD_VAR 0 8
24299: IFFALSE 24342
// begin for i in tmp do
24301: LD_ADDR_VAR 0 7
24305: PUSH
24306: LD_VAR 0 8
24310: PUSH
24311: FOR_IN
24312: IFFALSE 24340
// if i [ 1 ] = b_ext_radio then
24314: LD_VAR 0 7
24318: PUSH
24319: LD_INT 1
24321: ARRAY
24322: PUSH
24323: LD_INT 22
24325: EQUAL
24326: IFFALSE 24338
// begin control := control_remote ;
24328: LD_ADDR_VAR 0 4
24332: PUSH
24333: LD_INT 2
24335: ST_TO_ADDR
// break ;
24336: GO 24340
// end ;
24338: GO 24311
24340: POP
24341: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24342: LD_VAR 0 1
24346: PPUSH
24347: LD_VAR 0 2
24351: PPUSH
24352: LD_VAR 0 3
24356: PPUSH
24357: LD_VAR 0 4
24361: PPUSH
24362: LD_VAR 0 5
24366: PPUSH
24367: CALL_OW 448
24371: IFFALSE 24406
// begin result := [ chassis , engine , control , weapon ] ;
24373: LD_ADDR_VAR 0 6
24377: PUSH
24378: LD_VAR 0 2
24382: PUSH
24383: LD_VAR 0 3
24387: PUSH
24388: LD_VAR 0 4
24392: PUSH
24393: LD_VAR 0 5
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: ST_TO_ADDR
// exit ;
24404: GO 24818
// end ; _chassis := AvailableChassisList ( factory ) ;
24406: LD_ADDR_VAR 0 9
24410: PUSH
24411: LD_VAR 0 1
24415: PPUSH
24416: CALL_OW 475
24420: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24421: LD_ADDR_VAR 0 11
24425: PUSH
24426: LD_VAR 0 1
24430: PPUSH
24431: CALL_OW 476
24435: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24436: LD_ADDR_VAR 0 12
24440: PUSH
24441: LD_VAR 0 1
24445: PPUSH
24446: CALL_OW 477
24450: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24451: LD_ADDR_VAR 0 10
24455: PUSH
24456: LD_VAR 0 1
24460: PPUSH
24461: CALL_OW 478
24465: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24466: LD_VAR 0 9
24470: NOT
24471: PUSH
24472: LD_VAR 0 11
24476: NOT
24477: OR
24478: PUSH
24479: LD_VAR 0 12
24483: NOT
24484: OR
24485: PUSH
24486: LD_VAR 0 10
24490: NOT
24491: OR
24492: IFFALSE 24527
// begin result := [ chassis , engine , control , weapon ] ;
24494: LD_ADDR_VAR 0 6
24498: PUSH
24499: LD_VAR 0 2
24503: PUSH
24504: LD_VAR 0 3
24508: PUSH
24509: LD_VAR 0 4
24513: PUSH
24514: LD_VAR 0 5
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: ST_TO_ADDR
// exit ;
24525: GO 24818
// end ; if not chassis in _chassis then
24527: LD_VAR 0 2
24531: PUSH
24532: LD_VAR 0 9
24536: IN
24537: NOT
24538: IFFALSE 24564
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24540: LD_ADDR_VAR 0 2
24544: PUSH
24545: LD_VAR 0 9
24549: PUSH
24550: LD_INT 1
24552: PPUSH
24553: LD_VAR 0 9
24557: PPUSH
24558: CALL_OW 12
24562: ARRAY
24563: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24564: LD_VAR 0 2
24568: PPUSH
24569: LD_VAR 0 3
24573: PPUSH
24574: CALL 24823 0 2
24578: NOT
24579: IFFALSE 24638
// repeat engine := _engine [ 1 ] ;
24581: LD_ADDR_VAR 0 3
24585: PUSH
24586: LD_VAR 0 11
24590: PUSH
24591: LD_INT 1
24593: ARRAY
24594: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24595: LD_ADDR_VAR 0 11
24599: PUSH
24600: LD_VAR 0 11
24604: PPUSH
24605: LD_INT 1
24607: PPUSH
24608: CALL_OW 3
24612: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24613: LD_VAR 0 2
24617: PPUSH
24618: LD_VAR 0 3
24622: PPUSH
24623: CALL 24823 0 2
24627: PUSH
24628: LD_VAR 0 11
24632: PUSH
24633: EMPTY
24634: EQUAL
24635: OR
24636: IFFALSE 24581
// if not control in _control then
24638: LD_VAR 0 4
24642: PUSH
24643: LD_VAR 0 12
24647: IN
24648: NOT
24649: IFFALSE 24675
// control := _control [ rand ( 1 , _control ) ] ;
24651: LD_ADDR_VAR 0 4
24655: PUSH
24656: LD_VAR 0 12
24660: PUSH
24661: LD_INT 1
24663: PPUSH
24664: LD_VAR 0 12
24668: PPUSH
24669: CALL_OW 12
24673: ARRAY
24674: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24675: LD_VAR 0 2
24679: PPUSH
24680: LD_VAR 0 5
24684: PPUSH
24685: CALL 25043 0 2
24689: NOT
24690: IFFALSE 24749
// repeat weapon := _weapon [ 1 ] ;
24692: LD_ADDR_VAR 0 5
24696: PUSH
24697: LD_VAR 0 10
24701: PUSH
24702: LD_INT 1
24704: ARRAY
24705: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24706: LD_ADDR_VAR 0 10
24710: PUSH
24711: LD_VAR 0 10
24715: PPUSH
24716: LD_INT 1
24718: PPUSH
24719: CALL_OW 3
24723: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24724: LD_VAR 0 2
24728: PPUSH
24729: LD_VAR 0 5
24733: PPUSH
24734: CALL 25043 0 2
24738: PUSH
24739: LD_VAR 0 10
24743: PUSH
24744: EMPTY
24745: EQUAL
24746: OR
24747: IFFALSE 24692
// result := [ ] ;
24749: LD_ADDR_VAR 0 6
24753: PUSH
24754: EMPTY
24755: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24756: LD_VAR 0 1
24760: PPUSH
24761: LD_VAR 0 2
24765: PPUSH
24766: LD_VAR 0 3
24770: PPUSH
24771: LD_VAR 0 4
24775: PPUSH
24776: LD_VAR 0 5
24780: PPUSH
24781: CALL_OW 448
24785: IFFALSE 24818
// result := [ chassis , engine , control , weapon ] ;
24787: LD_ADDR_VAR 0 6
24791: PUSH
24792: LD_VAR 0 2
24796: PUSH
24797: LD_VAR 0 3
24801: PUSH
24802: LD_VAR 0 4
24806: PUSH
24807: LD_VAR 0 5
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: ST_TO_ADDR
// end ;
24818: LD_VAR 0 6
24822: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24823: LD_INT 0
24825: PPUSH
// if not chassis or not engine then
24826: LD_VAR 0 1
24830: NOT
24831: PUSH
24832: LD_VAR 0 2
24836: NOT
24837: OR
24838: IFFALSE 24842
// exit ;
24840: GO 25038
// case engine of engine_solar :
24842: LD_VAR 0 2
24846: PUSH
24847: LD_INT 2
24849: DOUBLE
24850: EQUAL
24851: IFTRUE 24855
24853: GO 24893
24855: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24856: LD_ADDR_VAR 0 3
24860: PUSH
24861: LD_INT 11
24863: PUSH
24864: LD_INT 12
24866: PUSH
24867: LD_INT 13
24869: PUSH
24870: LD_INT 14
24872: PUSH
24873: LD_INT 1
24875: PUSH
24876: LD_INT 2
24878: PUSH
24879: LD_INT 3
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: ST_TO_ADDR
24891: GO 25022
24893: LD_INT 1
24895: DOUBLE
24896: EQUAL
24897: IFTRUE 24901
24899: GO 24963
24901: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24902: LD_ADDR_VAR 0 3
24906: PUSH
24907: LD_INT 11
24909: PUSH
24910: LD_INT 12
24912: PUSH
24913: LD_INT 13
24915: PUSH
24916: LD_INT 14
24918: PUSH
24919: LD_INT 1
24921: PUSH
24922: LD_INT 2
24924: PUSH
24925: LD_INT 3
24927: PUSH
24928: LD_INT 4
24930: PUSH
24931: LD_INT 5
24933: PUSH
24934: LD_INT 21
24936: PUSH
24937: LD_INT 23
24939: PUSH
24940: LD_INT 22
24942: PUSH
24943: LD_INT 24
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: ST_TO_ADDR
24961: GO 25022
24963: LD_INT 3
24965: DOUBLE
24966: EQUAL
24967: IFTRUE 24971
24969: GO 25021
24971: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24972: LD_ADDR_VAR 0 3
24976: PUSH
24977: LD_INT 13
24979: PUSH
24980: LD_INT 14
24982: PUSH
24983: LD_INT 2
24985: PUSH
24986: LD_INT 3
24988: PUSH
24989: LD_INT 4
24991: PUSH
24992: LD_INT 5
24994: PUSH
24995: LD_INT 21
24997: PUSH
24998: LD_INT 22
25000: PUSH
25001: LD_INT 23
25003: PUSH
25004: LD_INT 24
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: ST_TO_ADDR
25019: GO 25022
25021: POP
// result := ( chassis in result ) ;
25022: LD_ADDR_VAR 0 3
25026: PUSH
25027: LD_VAR 0 1
25031: PUSH
25032: LD_VAR 0 3
25036: IN
25037: ST_TO_ADDR
// end ;
25038: LD_VAR 0 3
25042: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25043: LD_INT 0
25045: PPUSH
// if not chassis or not weapon then
25046: LD_VAR 0 1
25050: NOT
25051: PUSH
25052: LD_VAR 0 2
25056: NOT
25057: OR
25058: IFFALSE 25062
// exit ;
25060: GO 26122
// case weapon of us_machine_gun :
25062: LD_VAR 0 2
25066: PUSH
25067: LD_INT 2
25069: DOUBLE
25070: EQUAL
25071: IFTRUE 25075
25073: GO 25105
25075: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25076: LD_ADDR_VAR 0 3
25080: PUSH
25081: LD_INT 1
25083: PUSH
25084: LD_INT 2
25086: PUSH
25087: LD_INT 3
25089: PUSH
25090: LD_INT 4
25092: PUSH
25093: LD_INT 5
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: ST_TO_ADDR
25103: GO 26106
25105: LD_INT 3
25107: DOUBLE
25108: EQUAL
25109: IFTRUE 25113
25111: GO 25143
25113: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25114: LD_ADDR_VAR 0 3
25118: PUSH
25119: LD_INT 1
25121: PUSH
25122: LD_INT 2
25124: PUSH
25125: LD_INT 3
25127: PUSH
25128: LD_INT 4
25130: PUSH
25131: LD_INT 5
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: ST_TO_ADDR
25141: GO 26106
25143: LD_INT 11
25145: DOUBLE
25146: EQUAL
25147: IFTRUE 25151
25149: GO 25181
25151: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25152: LD_ADDR_VAR 0 3
25156: PUSH
25157: LD_INT 1
25159: PUSH
25160: LD_INT 2
25162: PUSH
25163: LD_INT 3
25165: PUSH
25166: LD_INT 4
25168: PUSH
25169: LD_INT 5
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: ST_TO_ADDR
25179: GO 26106
25181: LD_INT 4
25183: DOUBLE
25184: EQUAL
25185: IFTRUE 25189
25187: GO 25215
25189: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25190: LD_ADDR_VAR 0 3
25194: PUSH
25195: LD_INT 2
25197: PUSH
25198: LD_INT 3
25200: PUSH
25201: LD_INT 4
25203: PUSH
25204: LD_INT 5
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: ST_TO_ADDR
25213: GO 26106
25215: LD_INT 5
25217: DOUBLE
25218: EQUAL
25219: IFTRUE 25223
25221: GO 25249
25223: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25224: LD_ADDR_VAR 0 3
25228: PUSH
25229: LD_INT 2
25231: PUSH
25232: LD_INT 3
25234: PUSH
25235: LD_INT 4
25237: PUSH
25238: LD_INT 5
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: ST_TO_ADDR
25247: GO 26106
25249: LD_INT 9
25251: DOUBLE
25252: EQUAL
25253: IFTRUE 25257
25255: GO 25283
25257: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25258: LD_ADDR_VAR 0 3
25262: PUSH
25263: LD_INT 2
25265: PUSH
25266: LD_INT 3
25268: PUSH
25269: LD_INT 4
25271: PUSH
25272: LD_INT 5
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: ST_TO_ADDR
25281: GO 26106
25283: LD_INT 7
25285: DOUBLE
25286: EQUAL
25287: IFTRUE 25291
25289: GO 25317
25291: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25292: LD_ADDR_VAR 0 3
25296: PUSH
25297: LD_INT 2
25299: PUSH
25300: LD_INT 3
25302: PUSH
25303: LD_INT 4
25305: PUSH
25306: LD_INT 5
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: ST_TO_ADDR
25315: GO 26106
25317: LD_INT 12
25319: DOUBLE
25320: EQUAL
25321: IFTRUE 25325
25323: GO 25351
25325: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25326: LD_ADDR_VAR 0 3
25330: PUSH
25331: LD_INT 2
25333: PUSH
25334: LD_INT 3
25336: PUSH
25337: LD_INT 4
25339: PUSH
25340: LD_INT 5
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: ST_TO_ADDR
25349: GO 26106
25351: LD_INT 13
25353: DOUBLE
25354: EQUAL
25355: IFTRUE 25359
25357: GO 25385
25359: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25360: LD_ADDR_VAR 0 3
25364: PUSH
25365: LD_INT 2
25367: PUSH
25368: LD_INT 3
25370: PUSH
25371: LD_INT 4
25373: PUSH
25374: LD_INT 5
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: ST_TO_ADDR
25383: GO 26106
25385: LD_INT 14
25387: DOUBLE
25388: EQUAL
25389: IFTRUE 25393
25391: GO 25411
25393: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25394: LD_ADDR_VAR 0 3
25398: PUSH
25399: LD_INT 4
25401: PUSH
25402: LD_INT 5
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: ST_TO_ADDR
25409: GO 26106
25411: LD_INT 6
25413: DOUBLE
25414: EQUAL
25415: IFTRUE 25419
25417: GO 25437
25419: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25420: LD_ADDR_VAR 0 3
25424: PUSH
25425: LD_INT 4
25427: PUSH
25428: LD_INT 5
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: ST_TO_ADDR
25435: GO 26106
25437: LD_INT 10
25439: DOUBLE
25440: EQUAL
25441: IFTRUE 25445
25443: GO 25463
25445: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25446: LD_ADDR_VAR 0 3
25450: PUSH
25451: LD_INT 4
25453: PUSH
25454: LD_INT 5
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: ST_TO_ADDR
25461: GO 26106
25463: LD_INT 22
25465: DOUBLE
25466: EQUAL
25467: IFTRUE 25471
25469: GO 25497
25471: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25472: LD_ADDR_VAR 0 3
25476: PUSH
25477: LD_INT 11
25479: PUSH
25480: LD_INT 12
25482: PUSH
25483: LD_INT 13
25485: PUSH
25486: LD_INT 14
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: ST_TO_ADDR
25495: GO 26106
25497: LD_INT 23
25499: DOUBLE
25500: EQUAL
25501: IFTRUE 25505
25503: GO 25531
25505: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25506: LD_ADDR_VAR 0 3
25510: PUSH
25511: LD_INT 11
25513: PUSH
25514: LD_INT 12
25516: PUSH
25517: LD_INT 13
25519: PUSH
25520: LD_INT 14
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: ST_TO_ADDR
25529: GO 26106
25531: LD_INT 24
25533: DOUBLE
25534: EQUAL
25535: IFTRUE 25539
25537: GO 25565
25539: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25540: LD_ADDR_VAR 0 3
25544: PUSH
25545: LD_INT 11
25547: PUSH
25548: LD_INT 12
25550: PUSH
25551: LD_INT 13
25553: PUSH
25554: LD_INT 14
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: ST_TO_ADDR
25563: GO 26106
25565: LD_INT 30
25567: DOUBLE
25568: EQUAL
25569: IFTRUE 25573
25571: GO 25599
25573: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25574: LD_ADDR_VAR 0 3
25578: PUSH
25579: LD_INT 11
25581: PUSH
25582: LD_INT 12
25584: PUSH
25585: LD_INT 13
25587: PUSH
25588: LD_INT 14
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: ST_TO_ADDR
25597: GO 26106
25599: LD_INT 25
25601: DOUBLE
25602: EQUAL
25603: IFTRUE 25607
25605: GO 25625
25607: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25608: LD_ADDR_VAR 0 3
25612: PUSH
25613: LD_INT 13
25615: PUSH
25616: LD_INT 14
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: ST_TO_ADDR
25623: GO 26106
25625: LD_INT 27
25627: DOUBLE
25628: EQUAL
25629: IFTRUE 25633
25631: GO 25651
25633: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25634: LD_ADDR_VAR 0 3
25638: PUSH
25639: LD_INT 13
25641: PUSH
25642: LD_INT 14
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: ST_TO_ADDR
25649: GO 26106
25651: LD_INT 92
25653: DOUBLE
25654: EQUAL
25655: IFTRUE 25659
25657: GO 25685
25659: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25660: LD_ADDR_VAR 0 3
25664: PUSH
25665: LD_INT 11
25667: PUSH
25668: LD_INT 12
25670: PUSH
25671: LD_INT 13
25673: PUSH
25674: LD_INT 14
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: ST_TO_ADDR
25683: GO 26106
25685: LD_INT 28
25687: DOUBLE
25688: EQUAL
25689: IFTRUE 25693
25691: GO 25711
25693: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25694: LD_ADDR_VAR 0 3
25698: PUSH
25699: LD_INT 13
25701: PUSH
25702: LD_INT 14
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: ST_TO_ADDR
25709: GO 26106
25711: LD_INT 29
25713: DOUBLE
25714: EQUAL
25715: IFTRUE 25719
25717: GO 25737
25719: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25720: LD_ADDR_VAR 0 3
25724: PUSH
25725: LD_INT 13
25727: PUSH
25728: LD_INT 14
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: ST_TO_ADDR
25735: GO 26106
25737: LD_INT 31
25739: DOUBLE
25740: EQUAL
25741: IFTRUE 25745
25743: GO 25763
25745: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25746: LD_ADDR_VAR 0 3
25750: PUSH
25751: LD_INT 13
25753: PUSH
25754: LD_INT 14
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: ST_TO_ADDR
25761: GO 26106
25763: LD_INT 26
25765: DOUBLE
25766: EQUAL
25767: IFTRUE 25771
25769: GO 25789
25771: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25772: LD_ADDR_VAR 0 3
25776: PUSH
25777: LD_INT 13
25779: PUSH
25780: LD_INT 14
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: ST_TO_ADDR
25787: GO 26106
25789: LD_INT 42
25791: DOUBLE
25792: EQUAL
25793: IFTRUE 25797
25795: GO 25823
25797: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25798: LD_ADDR_VAR 0 3
25802: PUSH
25803: LD_INT 21
25805: PUSH
25806: LD_INT 22
25808: PUSH
25809: LD_INT 23
25811: PUSH
25812: LD_INT 24
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: ST_TO_ADDR
25821: GO 26106
25823: LD_INT 43
25825: DOUBLE
25826: EQUAL
25827: IFTRUE 25831
25829: GO 25857
25831: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25832: LD_ADDR_VAR 0 3
25836: PUSH
25837: LD_INT 21
25839: PUSH
25840: LD_INT 22
25842: PUSH
25843: LD_INT 23
25845: PUSH
25846: LD_INT 24
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: ST_TO_ADDR
25855: GO 26106
25857: LD_INT 44
25859: DOUBLE
25860: EQUAL
25861: IFTRUE 25865
25863: GO 25891
25865: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25866: LD_ADDR_VAR 0 3
25870: PUSH
25871: LD_INT 21
25873: PUSH
25874: LD_INT 22
25876: PUSH
25877: LD_INT 23
25879: PUSH
25880: LD_INT 24
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: ST_TO_ADDR
25889: GO 26106
25891: LD_INT 45
25893: DOUBLE
25894: EQUAL
25895: IFTRUE 25899
25897: GO 25925
25899: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25900: LD_ADDR_VAR 0 3
25904: PUSH
25905: LD_INT 21
25907: PUSH
25908: LD_INT 22
25910: PUSH
25911: LD_INT 23
25913: PUSH
25914: LD_INT 24
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: ST_TO_ADDR
25923: GO 26106
25925: LD_INT 49
25927: DOUBLE
25928: EQUAL
25929: IFTRUE 25933
25931: GO 25959
25933: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25934: LD_ADDR_VAR 0 3
25938: PUSH
25939: LD_INT 21
25941: PUSH
25942: LD_INT 22
25944: PUSH
25945: LD_INT 23
25947: PUSH
25948: LD_INT 24
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: ST_TO_ADDR
25957: GO 26106
25959: LD_INT 51
25961: DOUBLE
25962: EQUAL
25963: IFTRUE 25967
25965: GO 25993
25967: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25968: LD_ADDR_VAR 0 3
25972: PUSH
25973: LD_INT 21
25975: PUSH
25976: LD_INT 22
25978: PUSH
25979: LD_INT 23
25981: PUSH
25982: LD_INT 24
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: ST_TO_ADDR
25991: GO 26106
25993: LD_INT 52
25995: DOUBLE
25996: EQUAL
25997: IFTRUE 26001
25999: GO 26027
26001: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26002: LD_ADDR_VAR 0 3
26006: PUSH
26007: LD_INT 21
26009: PUSH
26010: LD_INT 22
26012: PUSH
26013: LD_INT 23
26015: PUSH
26016: LD_INT 24
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: ST_TO_ADDR
26025: GO 26106
26027: LD_INT 53
26029: DOUBLE
26030: EQUAL
26031: IFTRUE 26035
26033: GO 26053
26035: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26036: LD_ADDR_VAR 0 3
26040: PUSH
26041: LD_INT 23
26043: PUSH
26044: LD_INT 24
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: ST_TO_ADDR
26051: GO 26106
26053: LD_INT 46
26055: DOUBLE
26056: EQUAL
26057: IFTRUE 26061
26059: GO 26079
26061: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26062: LD_ADDR_VAR 0 3
26066: PUSH
26067: LD_INT 23
26069: PUSH
26070: LD_INT 24
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: ST_TO_ADDR
26077: GO 26106
26079: LD_INT 47
26081: DOUBLE
26082: EQUAL
26083: IFTRUE 26087
26085: GO 26105
26087: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26088: LD_ADDR_VAR 0 3
26092: PUSH
26093: LD_INT 23
26095: PUSH
26096: LD_INT 24
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: ST_TO_ADDR
26103: GO 26106
26105: POP
// result := ( chassis in result ) ;
26106: LD_ADDR_VAR 0 3
26110: PUSH
26111: LD_VAR 0 1
26115: PUSH
26116: LD_VAR 0 3
26120: IN
26121: ST_TO_ADDR
// end ;
26122: LD_VAR 0 3
26126: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26127: LD_INT 0
26129: PPUSH
26130: PPUSH
26131: PPUSH
26132: PPUSH
26133: PPUSH
26134: PPUSH
26135: PPUSH
// result := array ;
26136: LD_ADDR_VAR 0 5
26140: PUSH
26141: LD_VAR 0 1
26145: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26146: LD_VAR 0 1
26150: NOT
26151: PUSH
26152: LD_VAR 0 2
26156: NOT
26157: OR
26158: PUSH
26159: LD_VAR 0 3
26163: NOT
26164: OR
26165: PUSH
26166: LD_VAR 0 2
26170: PUSH
26171: LD_VAR 0 1
26175: GREATER
26176: OR
26177: PUSH
26178: LD_VAR 0 3
26182: PUSH
26183: LD_VAR 0 1
26187: GREATER
26188: OR
26189: IFFALSE 26193
// exit ;
26191: GO 26489
// if direction then
26193: LD_VAR 0 4
26197: IFFALSE 26261
// begin d := 1 ;
26199: LD_ADDR_VAR 0 9
26203: PUSH
26204: LD_INT 1
26206: ST_TO_ADDR
// if i_from > i_to then
26207: LD_VAR 0 2
26211: PUSH
26212: LD_VAR 0 3
26216: GREATER
26217: IFFALSE 26243
// length := ( array - i_from ) + i_to else
26219: LD_ADDR_VAR 0 11
26223: PUSH
26224: LD_VAR 0 1
26228: PUSH
26229: LD_VAR 0 2
26233: MINUS
26234: PUSH
26235: LD_VAR 0 3
26239: PLUS
26240: ST_TO_ADDR
26241: GO 26259
// length := i_to - i_from ;
26243: LD_ADDR_VAR 0 11
26247: PUSH
26248: LD_VAR 0 3
26252: PUSH
26253: LD_VAR 0 2
26257: MINUS
26258: ST_TO_ADDR
// end else
26259: GO 26322
// begin d := - 1 ;
26261: LD_ADDR_VAR 0 9
26265: PUSH
26266: LD_INT 1
26268: NEG
26269: ST_TO_ADDR
// if i_from > i_to then
26270: LD_VAR 0 2
26274: PUSH
26275: LD_VAR 0 3
26279: GREATER
26280: IFFALSE 26300
// length := i_from - i_to else
26282: LD_ADDR_VAR 0 11
26286: PUSH
26287: LD_VAR 0 2
26291: PUSH
26292: LD_VAR 0 3
26296: MINUS
26297: ST_TO_ADDR
26298: GO 26322
// length := ( array - i_to ) + i_from ;
26300: LD_ADDR_VAR 0 11
26304: PUSH
26305: LD_VAR 0 1
26309: PUSH
26310: LD_VAR 0 3
26314: MINUS
26315: PUSH
26316: LD_VAR 0 2
26320: PLUS
26321: ST_TO_ADDR
// end ; if not length then
26322: LD_VAR 0 11
26326: NOT
26327: IFFALSE 26331
// exit ;
26329: GO 26489
// tmp := array ;
26331: LD_ADDR_VAR 0 10
26335: PUSH
26336: LD_VAR 0 1
26340: ST_TO_ADDR
// for i = 1 to length do
26341: LD_ADDR_VAR 0 6
26345: PUSH
26346: DOUBLE
26347: LD_INT 1
26349: DEC
26350: ST_TO_ADDR
26351: LD_VAR 0 11
26355: PUSH
26356: FOR_TO
26357: IFFALSE 26477
// begin for j = 1 to array do
26359: LD_ADDR_VAR 0 7
26363: PUSH
26364: DOUBLE
26365: LD_INT 1
26367: DEC
26368: ST_TO_ADDR
26369: LD_VAR 0 1
26373: PUSH
26374: FOR_TO
26375: IFFALSE 26463
// begin k := j + d ;
26377: LD_ADDR_VAR 0 8
26381: PUSH
26382: LD_VAR 0 7
26386: PUSH
26387: LD_VAR 0 9
26391: PLUS
26392: ST_TO_ADDR
// if k > array then
26393: LD_VAR 0 8
26397: PUSH
26398: LD_VAR 0 1
26402: GREATER
26403: IFFALSE 26413
// k := 1 ;
26405: LD_ADDR_VAR 0 8
26409: PUSH
26410: LD_INT 1
26412: ST_TO_ADDR
// if not k then
26413: LD_VAR 0 8
26417: NOT
26418: IFFALSE 26430
// k := array ;
26420: LD_ADDR_VAR 0 8
26424: PUSH
26425: LD_VAR 0 1
26429: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26430: LD_ADDR_VAR 0 10
26434: PUSH
26435: LD_VAR 0 10
26439: PPUSH
26440: LD_VAR 0 8
26444: PPUSH
26445: LD_VAR 0 1
26449: PUSH
26450: LD_VAR 0 7
26454: ARRAY
26455: PPUSH
26456: CALL_OW 1
26460: ST_TO_ADDR
// end ;
26461: GO 26374
26463: POP
26464: POP
// array := tmp ;
26465: LD_ADDR_VAR 0 1
26469: PUSH
26470: LD_VAR 0 10
26474: ST_TO_ADDR
// end ;
26475: GO 26356
26477: POP
26478: POP
// result := array ;
26479: LD_ADDR_VAR 0 5
26483: PUSH
26484: LD_VAR 0 1
26488: ST_TO_ADDR
// end ;
26489: LD_VAR 0 5
26493: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26494: LD_INT 0
26496: PPUSH
26497: PPUSH
// result := 0 ;
26498: LD_ADDR_VAR 0 3
26502: PUSH
26503: LD_INT 0
26505: ST_TO_ADDR
// if not array or not value in array then
26506: LD_VAR 0 1
26510: NOT
26511: PUSH
26512: LD_VAR 0 2
26516: PUSH
26517: LD_VAR 0 1
26521: IN
26522: NOT
26523: OR
26524: IFFALSE 26528
// exit ;
26526: GO 26582
// for i = 1 to array do
26528: LD_ADDR_VAR 0 4
26532: PUSH
26533: DOUBLE
26534: LD_INT 1
26536: DEC
26537: ST_TO_ADDR
26538: LD_VAR 0 1
26542: PUSH
26543: FOR_TO
26544: IFFALSE 26580
// if value = array [ i ] then
26546: LD_VAR 0 2
26550: PUSH
26551: LD_VAR 0 1
26555: PUSH
26556: LD_VAR 0 4
26560: ARRAY
26561: EQUAL
26562: IFFALSE 26578
// begin result := i ;
26564: LD_ADDR_VAR 0 3
26568: PUSH
26569: LD_VAR 0 4
26573: ST_TO_ADDR
// exit ;
26574: POP
26575: POP
26576: GO 26582
// end ;
26578: GO 26543
26580: POP
26581: POP
// end ;
26582: LD_VAR 0 3
26586: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26587: LD_INT 0
26589: PPUSH
// vc_chassis := chassis ;
26590: LD_ADDR_OWVAR 37
26594: PUSH
26595: LD_VAR 0 1
26599: ST_TO_ADDR
// vc_engine := engine ;
26600: LD_ADDR_OWVAR 39
26604: PUSH
26605: LD_VAR 0 2
26609: ST_TO_ADDR
// vc_control := control ;
26610: LD_ADDR_OWVAR 38
26614: PUSH
26615: LD_VAR 0 3
26619: ST_TO_ADDR
// vc_weapon := weapon ;
26620: LD_ADDR_OWVAR 40
26624: PUSH
26625: LD_VAR 0 4
26629: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26630: LD_ADDR_OWVAR 41
26634: PUSH
26635: LD_VAR 0 5
26639: ST_TO_ADDR
// end ;
26640: LD_VAR 0 6
26644: RET
// export function WantPlant ( unit ) ; var task ; begin
26645: LD_INT 0
26647: PPUSH
26648: PPUSH
// result := false ;
26649: LD_ADDR_VAR 0 2
26653: PUSH
26654: LD_INT 0
26656: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26657: LD_ADDR_VAR 0 3
26661: PUSH
26662: LD_VAR 0 1
26666: PPUSH
26667: CALL_OW 437
26671: ST_TO_ADDR
// if task then
26672: LD_VAR 0 3
26676: IFFALSE 26704
// if task [ 1 ] [ 1 ] = p then
26678: LD_VAR 0 3
26682: PUSH
26683: LD_INT 1
26685: ARRAY
26686: PUSH
26687: LD_INT 1
26689: ARRAY
26690: PUSH
26691: LD_STRING p
26693: EQUAL
26694: IFFALSE 26704
// result := true ;
26696: LD_ADDR_VAR 0 2
26700: PUSH
26701: LD_INT 1
26703: ST_TO_ADDR
// end ;
26704: LD_VAR 0 2
26708: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26709: LD_INT 0
26711: PPUSH
26712: PPUSH
26713: PPUSH
26714: PPUSH
// if pos < 1 then
26715: LD_VAR 0 2
26719: PUSH
26720: LD_INT 1
26722: LESS
26723: IFFALSE 26727
// exit ;
26725: GO 27030
// if pos = 1 then
26727: LD_VAR 0 2
26731: PUSH
26732: LD_INT 1
26734: EQUAL
26735: IFFALSE 26768
// result := Replace ( arr , pos [ 1 ] , value ) else
26737: LD_ADDR_VAR 0 4
26741: PUSH
26742: LD_VAR 0 1
26746: PPUSH
26747: LD_VAR 0 2
26751: PUSH
26752: LD_INT 1
26754: ARRAY
26755: PPUSH
26756: LD_VAR 0 3
26760: PPUSH
26761: CALL_OW 1
26765: ST_TO_ADDR
26766: GO 27030
// begin tmp := arr ;
26768: LD_ADDR_VAR 0 6
26772: PUSH
26773: LD_VAR 0 1
26777: ST_TO_ADDR
// s_arr := [ tmp ] ;
26778: LD_ADDR_VAR 0 7
26782: PUSH
26783: LD_VAR 0 6
26787: PUSH
26788: EMPTY
26789: LIST
26790: ST_TO_ADDR
// for i = 1 to pos - 1 do
26791: LD_ADDR_VAR 0 5
26795: PUSH
26796: DOUBLE
26797: LD_INT 1
26799: DEC
26800: ST_TO_ADDR
26801: LD_VAR 0 2
26805: PUSH
26806: LD_INT 1
26808: MINUS
26809: PUSH
26810: FOR_TO
26811: IFFALSE 26856
// begin tmp := tmp [ pos [ i ] ] ;
26813: LD_ADDR_VAR 0 6
26817: PUSH
26818: LD_VAR 0 6
26822: PUSH
26823: LD_VAR 0 2
26827: PUSH
26828: LD_VAR 0 5
26832: ARRAY
26833: ARRAY
26834: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26835: LD_ADDR_VAR 0 7
26839: PUSH
26840: LD_VAR 0 7
26844: PUSH
26845: LD_VAR 0 6
26849: PUSH
26850: EMPTY
26851: LIST
26852: ADD
26853: ST_TO_ADDR
// end ;
26854: GO 26810
26856: POP
26857: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26858: LD_ADDR_VAR 0 6
26862: PUSH
26863: LD_VAR 0 6
26867: PPUSH
26868: LD_VAR 0 2
26872: PUSH
26873: LD_VAR 0 2
26877: ARRAY
26878: PPUSH
26879: LD_VAR 0 3
26883: PPUSH
26884: CALL_OW 1
26888: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26889: LD_ADDR_VAR 0 7
26893: PUSH
26894: LD_VAR 0 7
26898: PPUSH
26899: LD_VAR 0 7
26903: PPUSH
26904: LD_VAR 0 6
26908: PPUSH
26909: CALL_OW 1
26913: ST_TO_ADDR
// for i = s_arr downto 2 do
26914: LD_ADDR_VAR 0 5
26918: PUSH
26919: DOUBLE
26920: LD_VAR 0 7
26924: INC
26925: ST_TO_ADDR
26926: LD_INT 2
26928: PUSH
26929: FOR_DOWNTO
26930: IFFALSE 27014
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26932: LD_ADDR_VAR 0 6
26936: PUSH
26937: LD_VAR 0 7
26941: PUSH
26942: LD_VAR 0 5
26946: PUSH
26947: LD_INT 1
26949: MINUS
26950: ARRAY
26951: PPUSH
26952: LD_VAR 0 2
26956: PUSH
26957: LD_VAR 0 5
26961: PUSH
26962: LD_INT 1
26964: MINUS
26965: ARRAY
26966: PPUSH
26967: LD_VAR 0 7
26971: PUSH
26972: LD_VAR 0 5
26976: ARRAY
26977: PPUSH
26978: CALL_OW 1
26982: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26983: LD_ADDR_VAR 0 7
26987: PUSH
26988: LD_VAR 0 7
26992: PPUSH
26993: LD_VAR 0 5
26997: PUSH
26998: LD_INT 1
27000: MINUS
27001: PPUSH
27002: LD_VAR 0 6
27006: PPUSH
27007: CALL_OW 1
27011: ST_TO_ADDR
// end ;
27012: GO 26929
27014: POP
27015: POP
// result := s_arr [ 1 ] ;
27016: LD_ADDR_VAR 0 4
27020: PUSH
27021: LD_VAR 0 7
27025: PUSH
27026: LD_INT 1
27028: ARRAY
27029: ST_TO_ADDR
// end ; end ;
27030: LD_VAR 0 4
27034: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27035: LD_INT 0
27037: PPUSH
27038: PPUSH
// if not list then
27039: LD_VAR 0 1
27043: NOT
27044: IFFALSE 27048
// exit ;
27046: GO 27139
// i := list [ pos1 ] ;
27048: LD_ADDR_VAR 0 5
27052: PUSH
27053: LD_VAR 0 1
27057: PUSH
27058: LD_VAR 0 2
27062: ARRAY
27063: ST_TO_ADDR
// if not i then
27064: LD_VAR 0 5
27068: NOT
27069: IFFALSE 27073
// exit ;
27071: GO 27139
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27073: LD_ADDR_VAR 0 1
27077: PUSH
27078: LD_VAR 0 1
27082: PPUSH
27083: LD_VAR 0 2
27087: PPUSH
27088: LD_VAR 0 1
27092: PUSH
27093: LD_VAR 0 3
27097: ARRAY
27098: PPUSH
27099: CALL_OW 1
27103: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27104: LD_ADDR_VAR 0 1
27108: PUSH
27109: LD_VAR 0 1
27113: PPUSH
27114: LD_VAR 0 3
27118: PPUSH
27119: LD_VAR 0 5
27123: PPUSH
27124: CALL_OW 1
27128: ST_TO_ADDR
// result := list ;
27129: LD_ADDR_VAR 0 4
27133: PUSH
27134: LD_VAR 0 1
27138: ST_TO_ADDR
// end ;
27139: LD_VAR 0 4
27143: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27144: LD_INT 0
27146: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27147: LD_ADDR_VAR 0 5
27151: PUSH
27152: LD_VAR 0 1
27156: PPUSH
27157: CALL_OW 250
27161: PPUSH
27162: LD_VAR 0 1
27166: PPUSH
27167: CALL_OW 251
27171: PPUSH
27172: LD_VAR 0 2
27176: PPUSH
27177: LD_VAR 0 3
27181: PPUSH
27182: LD_VAR 0 4
27186: PPUSH
27187: CALL 27197 0 5
27191: ST_TO_ADDR
// end ;
27192: LD_VAR 0 5
27196: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27197: LD_INT 0
27199: PPUSH
27200: PPUSH
27201: PPUSH
27202: PPUSH
// if not list then
27203: LD_VAR 0 3
27207: NOT
27208: IFFALSE 27212
// exit ;
27210: GO 27600
// result := [ ] ;
27212: LD_ADDR_VAR 0 6
27216: PUSH
27217: EMPTY
27218: ST_TO_ADDR
// for i in list do
27219: LD_ADDR_VAR 0 7
27223: PUSH
27224: LD_VAR 0 3
27228: PUSH
27229: FOR_IN
27230: IFFALSE 27432
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27232: LD_ADDR_VAR 0 9
27236: PUSH
27237: LD_VAR 0 7
27241: PPUSH
27242: LD_VAR 0 1
27246: PPUSH
27247: LD_VAR 0 2
27251: PPUSH
27252: CALL_OW 297
27256: ST_TO_ADDR
// if not result then
27257: LD_VAR 0 6
27261: NOT
27262: IFFALSE 27288
// result := [ [ i , tmp ] ] else
27264: LD_ADDR_VAR 0 6
27268: PUSH
27269: LD_VAR 0 7
27273: PUSH
27274: LD_VAR 0 9
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: EMPTY
27284: LIST
27285: ST_TO_ADDR
27286: GO 27430
// begin if result [ result ] [ 2 ] < tmp then
27288: LD_VAR 0 6
27292: PUSH
27293: LD_VAR 0 6
27297: ARRAY
27298: PUSH
27299: LD_INT 2
27301: ARRAY
27302: PUSH
27303: LD_VAR 0 9
27307: LESS
27308: IFFALSE 27350
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27310: LD_ADDR_VAR 0 6
27314: PUSH
27315: LD_VAR 0 6
27319: PPUSH
27320: LD_VAR 0 6
27324: PUSH
27325: LD_INT 1
27327: PLUS
27328: PPUSH
27329: LD_VAR 0 7
27333: PUSH
27334: LD_VAR 0 9
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PPUSH
27343: CALL_OW 2
27347: ST_TO_ADDR
27348: GO 27430
// for j = 1 to result do
27350: LD_ADDR_VAR 0 8
27354: PUSH
27355: DOUBLE
27356: LD_INT 1
27358: DEC
27359: ST_TO_ADDR
27360: LD_VAR 0 6
27364: PUSH
27365: FOR_TO
27366: IFFALSE 27428
// begin if tmp < result [ j ] [ 2 ] then
27368: LD_VAR 0 9
27372: PUSH
27373: LD_VAR 0 6
27377: PUSH
27378: LD_VAR 0 8
27382: ARRAY
27383: PUSH
27384: LD_INT 2
27386: ARRAY
27387: LESS
27388: IFFALSE 27426
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27390: LD_ADDR_VAR 0 6
27394: PUSH
27395: LD_VAR 0 6
27399: PPUSH
27400: LD_VAR 0 8
27404: PPUSH
27405: LD_VAR 0 7
27409: PUSH
27410: LD_VAR 0 9
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PPUSH
27419: CALL_OW 2
27423: ST_TO_ADDR
// break ;
27424: GO 27428
// end ; end ;
27426: GO 27365
27428: POP
27429: POP
// end ; end ;
27430: GO 27229
27432: POP
27433: POP
// if result and not asc then
27434: LD_VAR 0 6
27438: PUSH
27439: LD_VAR 0 4
27443: NOT
27444: AND
27445: IFFALSE 27520
// begin tmp := result ;
27447: LD_ADDR_VAR 0 9
27451: PUSH
27452: LD_VAR 0 6
27456: ST_TO_ADDR
// for i = tmp downto 1 do
27457: LD_ADDR_VAR 0 7
27461: PUSH
27462: DOUBLE
27463: LD_VAR 0 9
27467: INC
27468: ST_TO_ADDR
27469: LD_INT 1
27471: PUSH
27472: FOR_DOWNTO
27473: IFFALSE 27518
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27475: LD_ADDR_VAR 0 6
27479: PUSH
27480: LD_VAR 0 6
27484: PPUSH
27485: LD_VAR 0 9
27489: PUSH
27490: LD_VAR 0 7
27494: MINUS
27495: PUSH
27496: LD_INT 1
27498: PLUS
27499: PPUSH
27500: LD_VAR 0 9
27504: PUSH
27505: LD_VAR 0 7
27509: ARRAY
27510: PPUSH
27511: CALL_OW 1
27515: ST_TO_ADDR
27516: GO 27472
27518: POP
27519: POP
// end ; tmp := [ ] ;
27520: LD_ADDR_VAR 0 9
27524: PUSH
27525: EMPTY
27526: ST_TO_ADDR
// if mode then
27527: LD_VAR 0 5
27531: IFFALSE 27600
// begin for i = 1 to result do
27533: LD_ADDR_VAR 0 7
27537: PUSH
27538: DOUBLE
27539: LD_INT 1
27541: DEC
27542: ST_TO_ADDR
27543: LD_VAR 0 6
27547: PUSH
27548: FOR_TO
27549: IFFALSE 27588
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27551: LD_ADDR_VAR 0 9
27555: PUSH
27556: LD_VAR 0 9
27560: PPUSH
27561: LD_VAR 0 7
27565: PPUSH
27566: LD_VAR 0 6
27570: PUSH
27571: LD_VAR 0 7
27575: ARRAY
27576: PUSH
27577: LD_INT 1
27579: ARRAY
27580: PPUSH
27581: CALL_OW 1
27585: ST_TO_ADDR
27586: GO 27548
27588: POP
27589: POP
// result := tmp ;
27590: LD_ADDR_VAR 0 6
27594: PUSH
27595: LD_VAR 0 9
27599: ST_TO_ADDR
// end ; end ;
27600: LD_VAR 0 6
27604: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27605: LD_INT 0
27607: PPUSH
27608: PPUSH
27609: PPUSH
27610: PPUSH
27611: PPUSH
27612: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27613: LD_ADDR_VAR 0 5
27617: PUSH
27618: LD_INT 0
27620: PUSH
27621: LD_INT 0
27623: PUSH
27624: LD_INT 0
27626: PUSH
27627: EMPTY
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: ST_TO_ADDR
// if not x or not y then
27635: LD_VAR 0 2
27639: NOT
27640: PUSH
27641: LD_VAR 0 3
27645: NOT
27646: OR
27647: IFFALSE 27651
// exit ;
27649: GO 29301
// if not range then
27651: LD_VAR 0 4
27655: NOT
27656: IFFALSE 27666
// range := 10 ;
27658: LD_ADDR_VAR 0 4
27662: PUSH
27663: LD_INT 10
27665: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27666: LD_ADDR_VAR 0 8
27670: PUSH
27671: LD_INT 81
27673: PUSH
27674: LD_VAR 0 1
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 92
27685: PUSH
27686: LD_VAR 0 2
27690: PUSH
27691: LD_VAR 0 3
27695: PUSH
27696: LD_VAR 0 4
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 3
27709: PUSH
27710: LD_INT 21
27712: PUSH
27713: LD_INT 3
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: LIST
27728: PPUSH
27729: CALL_OW 69
27733: ST_TO_ADDR
// if not tmp then
27734: LD_VAR 0 8
27738: NOT
27739: IFFALSE 27743
// exit ;
27741: GO 29301
// for i in tmp do
27743: LD_ADDR_VAR 0 6
27747: PUSH
27748: LD_VAR 0 8
27752: PUSH
27753: FOR_IN
27754: IFFALSE 29276
// begin points := [ 0 , 0 , 0 ] ;
27756: LD_ADDR_VAR 0 9
27760: PUSH
27761: LD_INT 0
27763: PUSH
27764: LD_INT 0
27766: PUSH
27767: LD_INT 0
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: LIST
27774: ST_TO_ADDR
// bpoints := 1 ;
27775: LD_ADDR_VAR 0 10
27779: PUSH
27780: LD_INT 1
27782: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27783: LD_VAR 0 6
27787: PPUSH
27788: CALL_OW 247
27792: PUSH
27793: LD_INT 1
27795: DOUBLE
27796: EQUAL
27797: IFTRUE 27801
27799: GO 28379
27801: POP
// begin if GetClass ( i ) = 1 then
27802: LD_VAR 0 6
27806: PPUSH
27807: CALL_OW 257
27811: PUSH
27812: LD_INT 1
27814: EQUAL
27815: IFFALSE 27836
// points := [ 10 , 5 , 3 ] ;
27817: LD_ADDR_VAR 0 9
27821: PUSH
27822: LD_INT 10
27824: PUSH
27825: LD_INT 5
27827: PUSH
27828: LD_INT 3
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: LIST
27835: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27836: LD_VAR 0 6
27840: PPUSH
27841: CALL_OW 257
27845: PUSH
27846: LD_INT 2
27848: PUSH
27849: LD_INT 3
27851: PUSH
27852: LD_INT 4
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: LIST
27859: IN
27860: IFFALSE 27881
// points := [ 3 , 2 , 1 ] ;
27862: LD_ADDR_VAR 0 9
27866: PUSH
27867: LD_INT 3
27869: PUSH
27870: LD_INT 2
27872: PUSH
27873: LD_INT 1
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: LIST
27880: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27881: LD_VAR 0 6
27885: PPUSH
27886: CALL_OW 257
27890: PUSH
27891: LD_INT 5
27893: EQUAL
27894: IFFALSE 27915
// points := [ 130 , 5 , 2 ] ;
27896: LD_ADDR_VAR 0 9
27900: PUSH
27901: LD_INT 130
27903: PUSH
27904: LD_INT 5
27906: PUSH
27907: LD_INT 2
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: LIST
27914: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27915: LD_VAR 0 6
27919: PPUSH
27920: CALL_OW 257
27924: PUSH
27925: LD_INT 8
27927: EQUAL
27928: IFFALSE 27949
// points := [ 35 , 35 , 30 ] ;
27930: LD_ADDR_VAR 0 9
27934: PUSH
27935: LD_INT 35
27937: PUSH
27938: LD_INT 35
27940: PUSH
27941: LD_INT 30
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: LIST
27948: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27949: LD_VAR 0 6
27953: PPUSH
27954: CALL_OW 257
27958: PUSH
27959: LD_INT 9
27961: EQUAL
27962: IFFALSE 27983
// points := [ 20 , 55 , 40 ] ;
27964: LD_ADDR_VAR 0 9
27968: PUSH
27969: LD_INT 20
27971: PUSH
27972: LD_INT 55
27974: PUSH
27975: LD_INT 40
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: LIST
27982: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27983: LD_VAR 0 6
27987: PPUSH
27988: CALL_OW 257
27992: PUSH
27993: LD_INT 12
27995: PUSH
27996: LD_INT 16
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: IN
28003: IFFALSE 28024
// points := [ 5 , 3 , 2 ] ;
28005: LD_ADDR_VAR 0 9
28009: PUSH
28010: LD_INT 5
28012: PUSH
28013: LD_INT 3
28015: PUSH
28016: LD_INT 2
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: LIST
28023: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28024: LD_VAR 0 6
28028: PPUSH
28029: CALL_OW 257
28033: PUSH
28034: LD_INT 17
28036: EQUAL
28037: IFFALSE 28058
// points := [ 100 , 50 , 75 ] ;
28039: LD_ADDR_VAR 0 9
28043: PUSH
28044: LD_INT 100
28046: PUSH
28047: LD_INT 50
28049: PUSH
28050: LD_INT 75
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: LIST
28057: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28058: LD_VAR 0 6
28062: PPUSH
28063: CALL_OW 257
28067: PUSH
28068: LD_INT 15
28070: EQUAL
28071: IFFALSE 28092
// points := [ 10 , 5 , 3 ] ;
28073: LD_ADDR_VAR 0 9
28077: PUSH
28078: LD_INT 10
28080: PUSH
28081: LD_INT 5
28083: PUSH
28084: LD_INT 3
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: LIST
28091: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28092: LD_VAR 0 6
28096: PPUSH
28097: CALL_OW 257
28101: PUSH
28102: LD_INT 14
28104: EQUAL
28105: IFFALSE 28126
// points := [ 10 , 0 , 0 ] ;
28107: LD_ADDR_VAR 0 9
28111: PUSH
28112: LD_INT 10
28114: PUSH
28115: LD_INT 0
28117: PUSH
28118: LD_INT 0
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: LIST
28125: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28126: LD_VAR 0 6
28130: PPUSH
28131: CALL_OW 257
28135: PUSH
28136: LD_INT 11
28138: EQUAL
28139: IFFALSE 28160
// points := [ 30 , 10 , 5 ] ;
28141: LD_ADDR_VAR 0 9
28145: PUSH
28146: LD_INT 30
28148: PUSH
28149: LD_INT 10
28151: PUSH
28152: LD_INT 5
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: LIST
28159: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28160: LD_VAR 0 1
28164: PPUSH
28165: LD_INT 5
28167: PPUSH
28168: CALL_OW 321
28172: PUSH
28173: LD_INT 2
28175: EQUAL
28176: IFFALSE 28193
// bpoints := bpoints * 1.8 ;
28178: LD_ADDR_VAR 0 10
28182: PUSH
28183: LD_VAR 0 10
28187: PUSH
28188: LD_REAL  1.80000000000000E+0000
28191: MUL
28192: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28193: LD_VAR 0 6
28197: PPUSH
28198: CALL_OW 257
28202: PUSH
28203: LD_INT 1
28205: PUSH
28206: LD_INT 2
28208: PUSH
28209: LD_INT 3
28211: PUSH
28212: LD_INT 4
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: IN
28221: PUSH
28222: LD_VAR 0 1
28226: PPUSH
28227: LD_INT 51
28229: PPUSH
28230: CALL_OW 321
28234: PUSH
28235: LD_INT 2
28237: EQUAL
28238: AND
28239: IFFALSE 28256
// bpoints := bpoints * 1.2 ;
28241: LD_ADDR_VAR 0 10
28245: PUSH
28246: LD_VAR 0 10
28250: PUSH
28251: LD_REAL  1.20000000000000E+0000
28254: MUL
28255: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28256: LD_VAR 0 6
28260: PPUSH
28261: CALL_OW 257
28265: PUSH
28266: LD_INT 5
28268: PUSH
28269: LD_INT 7
28271: PUSH
28272: LD_INT 9
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: LIST
28279: IN
28280: PUSH
28281: LD_VAR 0 1
28285: PPUSH
28286: LD_INT 52
28288: PPUSH
28289: CALL_OW 321
28293: PUSH
28294: LD_INT 2
28296: EQUAL
28297: AND
28298: IFFALSE 28315
// bpoints := bpoints * 1.5 ;
28300: LD_ADDR_VAR 0 10
28304: PUSH
28305: LD_VAR 0 10
28309: PUSH
28310: LD_REAL  1.50000000000000E+0000
28313: MUL
28314: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28315: LD_VAR 0 1
28319: PPUSH
28320: LD_INT 66
28322: PPUSH
28323: CALL_OW 321
28327: PUSH
28328: LD_INT 2
28330: EQUAL
28331: IFFALSE 28348
// bpoints := bpoints * 1.1 ;
28333: LD_ADDR_VAR 0 10
28337: PUSH
28338: LD_VAR 0 10
28342: PUSH
28343: LD_REAL  1.10000000000000E+0000
28346: MUL
28347: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28348: LD_ADDR_VAR 0 10
28352: PUSH
28353: LD_VAR 0 10
28357: PUSH
28358: LD_VAR 0 6
28362: PPUSH
28363: LD_INT 1
28365: PPUSH
28366: CALL_OW 259
28370: PUSH
28371: LD_REAL  1.15000000000000E+0000
28374: MUL
28375: MUL
28376: ST_TO_ADDR
// end ; unit_vehicle :
28377: GO 29205
28379: LD_INT 2
28381: DOUBLE
28382: EQUAL
28383: IFTRUE 28387
28385: GO 29193
28387: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28388: LD_VAR 0 6
28392: PPUSH
28393: CALL_OW 264
28397: PUSH
28398: LD_INT 2
28400: PUSH
28401: LD_INT 42
28403: PUSH
28404: LD_INT 24
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: LIST
28411: IN
28412: IFFALSE 28433
// points := [ 25 , 5 , 3 ] ;
28414: LD_ADDR_VAR 0 9
28418: PUSH
28419: LD_INT 25
28421: PUSH
28422: LD_INT 5
28424: PUSH
28425: LD_INT 3
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: LIST
28432: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28433: LD_VAR 0 6
28437: PPUSH
28438: CALL_OW 264
28442: PUSH
28443: LD_INT 4
28445: PUSH
28446: LD_INT 43
28448: PUSH
28449: LD_INT 25
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: LIST
28456: IN
28457: IFFALSE 28478
// points := [ 40 , 15 , 5 ] ;
28459: LD_ADDR_VAR 0 9
28463: PUSH
28464: LD_INT 40
28466: PUSH
28467: LD_INT 15
28469: PUSH
28470: LD_INT 5
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: LIST
28477: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28478: LD_VAR 0 6
28482: PPUSH
28483: CALL_OW 264
28487: PUSH
28488: LD_INT 3
28490: PUSH
28491: LD_INT 23
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: IN
28498: IFFALSE 28519
// points := [ 7 , 25 , 8 ] ;
28500: LD_ADDR_VAR 0 9
28504: PUSH
28505: LD_INT 7
28507: PUSH
28508: LD_INT 25
28510: PUSH
28511: LD_INT 8
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: LIST
28518: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28519: LD_VAR 0 6
28523: PPUSH
28524: CALL_OW 264
28528: PUSH
28529: LD_INT 5
28531: PUSH
28532: LD_INT 27
28534: PUSH
28535: LD_INT 44
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: LIST
28542: IN
28543: IFFALSE 28564
// points := [ 14 , 50 , 16 ] ;
28545: LD_ADDR_VAR 0 9
28549: PUSH
28550: LD_INT 14
28552: PUSH
28553: LD_INT 50
28555: PUSH
28556: LD_INT 16
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: LIST
28563: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28564: LD_VAR 0 6
28568: PPUSH
28569: CALL_OW 264
28573: PUSH
28574: LD_INT 6
28576: PUSH
28577: LD_INT 46
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: IN
28584: IFFALSE 28605
// points := [ 32 , 120 , 70 ] ;
28586: LD_ADDR_VAR 0 9
28590: PUSH
28591: LD_INT 32
28593: PUSH
28594: LD_INT 120
28596: PUSH
28597: LD_INT 70
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: LIST
28604: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28605: LD_VAR 0 6
28609: PPUSH
28610: CALL_OW 264
28614: PUSH
28615: LD_INT 7
28617: PUSH
28618: LD_INT 28
28620: PUSH
28621: LD_INT 45
28623: PUSH
28624: LD_INT 92
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: IN
28633: IFFALSE 28654
// points := [ 35 , 20 , 45 ] ;
28635: LD_ADDR_VAR 0 9
28639: PUSH
28640: LD_INT 35
28642: PUSH
28643: LD_INT 20
28645: PUSH
28646: LD_INT 45
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: LIST
28653: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28654: LD_VAR 0 6
28658: PPUSH
28659: CALL_OW 264
28663: PUSH
28664: LD_INT 47
28666: PUSH
28667: EMPTY
28668: LIST
28669: IN
28670: IFFALSE 28691
// points := [ 67 , 45 , 75 ] ;
28672: LD_ADDR_VAR 0 9
28676: PUSH
28677: LD_INT 67
28679: PUSH
28680: LD_INT 45
28682: PUSH
28683: LD_INT 75
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: LIST
28690: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28691: LD_VAR 0 6
28695: PPUSH
28696: CALL_OW 264
28700: PUSH
28701: LD_INT 26
28703: PUSH
28704: EMPTY
28705: LIST
28706: IN
28707: IFFALSE 28728
// points := [ 120 , 30 , 80 ] ;
28709: LD_ADDR_VAR 0 9
28713: PUSH
28714: LD_INT 120
28716: PUSH
28717: LD_INT 30
28719: PUSH
28720: LD_INT 80
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: LIST
28727: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28728: LD_VAR 0 6
28732: PPUSH
28733: CALL_OW 264
28737: PUSH
28738: LD_INT 22
28740: PUSH
28741: EMPTY
28742: LIST
28743: IN
28744: IFFALSE 28765
// points := [ 40 , 1 , 1 ] ;
28746: LD_ADDR_VAR 0 9
28750: PUSH
28751: LD_INT 40
28753: PUSH
28754: LD_INT 1
28756: PUSH
28757: LD_INT 1
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: LIST
28764: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28765: LD_VAR 0 6
28769: PPUSH
28770: CALL_OW 264
28774: PUSH
28775: LD_INT 29
28777: PUSH
28778: EMPTY
28779: LIST
28780: IN
28781: IFFALSE 28802
// points := [ 70 , 200 , 400 ] ;
28783: LD_ADDR_VAR 0 9
28787: PUSH
28788: LD_INT 70
28790: PUSH
28791: LD_INT 200
28793: PUSH
28794: LD_INT 400
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: LIST
28801: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28802: LD_VAR 0 6
28806: PPUSH
28807: CALL_OW 264
28811: PUSH
28812: LD_INT 14
28814: PUSH
28815: LD_INT 53
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: IN
28822: IFFALSE 28843
// points := [ 40 , 10 , 20 ] ;
28824: LD_ADDR_VAR 0 9
28828: PUSH
28829: LD_INT 40
28831: PUSH
28832: LD_INT 10
28834: PUSH
28835: LD_INT 20
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: LIST
28842: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28843: LD_VAR 0 6
28847: PPUSH
28848: CALL_OW 264
28852: PUSH
28853: LD_INT 9
28855: PUSH
28856: EMPTY
28857: LIST
28858: IN
28859: IFFALSE 28880
// points := [ 5 , 70 , 20 ] ;
28861: LD_ADDR_VAR 0 9
28865: PUSH
28866: LD_INT 5
28868: PUSH
28869: LD_INT 70
28871: PUSH
28872: LD_INT 20
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: LIST
28879: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28880: LD_VAR 0 6
28884: PPUSH
28885: CALL_OW 264
28889: PUSH
28890: LD_INT 10
28892: PUSH
28893: EMPTY
28894: LIST
28895: IN
28896: IFFALSE 28917
// points := [ 35 , 110 , 70 ] ;
28898: LD_ADDR_VAR 0 9
28902: PUSH
28903: LD_INT 35
28905: PUSH
28906: LD_INT 110
28908: PUSH
28909: LD_INT 70
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: LIST
28916: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28917: LD_VAR 0 6
28921: PPUSH
28922: CALL_OW 265
28926: PUSH
28927: LD_INT 25
28929: EQUAL
28930: IFFALSE 28951
// points := [ 80 , 65 , 100 ] ;
28932: LD_ADDR_VAR 0 9
28936: PUSH
28937: LD_INT 80
28939: PUSH
28940: LD_INT 65
28942: PUSH
28943: LD_INT 100
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: LIST
28950: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28951: LD_VAR 0 6
28955: PPUSH
28956: CALL_OW 263
28960: PUSH
28961: LD_INT 1
28963: EQUAL
28964: IFFALSE 28999
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28966: LD_ADDR_VAR 0 10
28970: PUSH
28971: LD_VAR 0 10
28975: PUSH
28976: LD_VAR 0 6
28980: PPUSH
28981: CALL_OW 311
28985: PPUSH
28986: LD_INT 3
28988: PPUSH
28989: CALL_OW 259
28993: PUSH
28994: LD_INT 4
28996: MUL
28997: MUL
28998: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28999: LD_VAR 0 6
29003: PPUSH
29004: CALL_OW 263
29008: PUSH
29009: LD_INT 2
29011: EQUAL
29012: IFFALSE 29063
// begin j := IsControledBy ( i ) ;
29014: LD_ADDR_VAR 0 7
29018: PUSH
29019: LD_VAR 0 6
29023: PPUSH
29024: CALL_OW 312
29028: ST_TO_ADDR
// if j then
29029: LD_VAR 0 7
29033: IFFALSE 29063
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29035: LD_ADDR_VAR 0 10
29039: PUSH
29040: LD_VAR 0 10
29044: PUSH
29045: LD_VAR 0 7
29049: PPUSH
29050: LD_INT 3
29052: PPUSH
29053: CALL_OW 259
29057: PUSH
29058: LD_INT 3
29060: MUL
29061: MUL
29062: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29063: LD_VAR 0 6
29067: PPUSH
29068: CALL_OW 264
29072: PUSH
29073: LD_INT 5
29075: PUSH
29076: LD_INT 6
29078: PUSH
29079: LD_INT 46
29081: PUSH
29082: LD_INT 44
29084: PUSH
29085: LD_INT 47
29087: PUSH
29088: LD_INT 45
29090: PUSH
29091: LD_INT 28
29093: PUSH
29094: LD_INT 7
29096: PUSH
29097: LD_INT 27
29099: PUSH
29100: LD_INT 29
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: IN
29115: PUSH
29116: LD_VAR 0 1
29120: PPUSH
29121: LD_INT 52
29123: PPUSH
29124: CALL_OW 321
29128: PUSH
29129: LD_INT 2
29131: EQUAL
29132: AND
29133: IFFALSE 29150
// bpoints := bpoints * 1.2 ;
29135: LD_ADDR_VAR 0 10
29139: PUSH
29140: LD_VAR 0 10
29144: PUSH
29145: LD_REAL  1.20000000000000E+0000
29148: MUL
29149: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29150: LD_VAR 0 6
29154: PPUSH
29155: CALL_OW 264
29159: PUSH
29160: LD_INT 6
29162: PUSH
29163: LD_INT 46
29165: PUSH
29166: LD_INT 47
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: LIST
29173: IN
29174: IFFALSE 29191
// bpoints := bpoints * 1.2 ;
29176: LD_ADDR_VAR 0 10
29180: PUSH
29181: LD_VAR 0 10
29185: PUSH
29186: LD_REAL  1.20000000000000E+0000
29189: MUL
29190: ST_TO_ADDR
// end ; unit_building :
29191: GO 29205
29193: LD_INT 3
29195: DOUBLE
29196: EQUAL
29197: IFTRUE 29201
29199: GO 29204
29201: POP
// ; end ;
29202: GO 29205
29204: POP
// for j = 1 to 3 do
29205: LD_ADDR_VAR 0 7
29209: PUSH
29210: DOUBLE
29211: LD_INT 1
29213: DEC
29214: ST_TO_ADDR
29215: LD_INT 3
29217: PUSH
29218: FOR_TO
29219: IFFALSE 29272
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29221: LD_ADDR_VAR 0 5
29225: PUSH
29226: LD_VAR 0 5
29230: PPUSH
29231: LD_VAR 0 7
29235: PPUSH
29236: LD_VAR 0 5
29240: PUSH
29241: LD_VAR 0 7
29245: ARRAY
29246: PUSH
29247: LD_VAR 0 9
29251: PUSH
29252: LD_VAR 0 7
29256: ARRAY
29257: PUSH
29258: LD_VAR 0 10
29262: MUL
29263: PLUS
29264: PPUSH
29265: CALL_OW 1
29269: ST_TO_ADDR
29270: GO 29218
29272: POP
29273: POP
// end ;
29274: GO 27753
29276: POP
29277: POP
// result := Replace ( result , 4 , tmp ) ;
29278: LD_ADDR_VAR 0 5
29282: PUSH
29283: LD_VAR 0 5
29287: PPUSH
29288: LD_INT 4
29290: PPUSH
29291: LD_VAR 0 8
29295: PPUSH
29296: CALL_OW 1
29300: ST_TO_ADDR
// end ;
29301: LD_VAR 0 5
29305: RET
// export function DangerAtRange ( unit , range ) ; begin
29306: LD_INT 0
29308: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29309: LD_ADDR_VAR 0 3
29313: PUSH
29314: LD_VAR 0 1
29318: PPUSH
29319: CALL_OW 255
29323: PPUSH
29324: LD_VAR 0 1
29328: PPUSH
29329: CALL_OW 250
29333: PPUSH
29334: LD_VAR 0 1
29338: PPUSH
29339: CALL_OW 251
29343: PPUSH
29344: LD_VAR 0 2
29348: PPUSH
29349: CALL 27605 0 4
29353: ST_TO_ADDR
// end ;
29354: LD_VAR 0 3
29358: RET
// export function DangerInArea ( side , area ) ; begin
29359: LD_INT 0
29361: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29362: LD_ADDR_VAR 0 3
29366: PUSH
29367: LD_VAR 0 2
29371: PPUSH
29372: LD_INT 81
29374: PUSH
29375: LD_VAR 0 1
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PPUSH
29384: CALL_OW 70
29388: ST_TO_ADDR
// end ;
29389: LD_VAR 0 3
29393: RET
// export function IsExtension ( b ) ; begin
29394: LD_INT 0
29396: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29397: LD_ADDR_VAR 0 2
29401: PUSH
29402: LD_VAR 0 1
29406: PUSH
29407: LD_INT 23
29409: PUSH
29410: LD_INT 20
29412: PUSH
29413: LD_INT 22
29415: PUSH
29416: LD_INT 17
29418: PUSH
29419: LD_INT 24
29421: PUSH
29422: LD_INT 21
29424: PUSH
29425: LD_INT 19
29427: PUSH
29428: LD_INT 16
29430: PUSH
29431: LD_INT 25
29433: PUSH
29434: LD_INT 18
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: IN
29449: ST_TO_ADDR
// end ;
29450: LD_VAR 0 2
29454: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29455: LD_INT 0
29457: PPUSH
29458: PPUSH
29459: PPUSH
// result := [ ] ;
29460: LD_ADDR_VAR 0 4
29464: PUSH
29465: EMPTY
29466: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29467: LD_ADDR_VAR 0 5
29471: PUSH
29472: LD_VAR 0 2
29476: PPUSH
29477: LD_INT 21
29479: PUSH
29480: LD_INT 3
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PPUSH
29487: CALL_OW 70
29491: ST_TO_ADDR
// if not tmp then
29492: LD_VAR 0 5
29496: NOT
29497: IFFALSE 29501
// exit ;
29499: GO 29565
// if checkLink then
29501: LD_VAR 0 3
29505: IFFALSE 29555
// begin for i in tmp do
29507: LD_ADDR_VAR 0 6
29511: PUSH
29512: LD_VAR 0 5
29516: PUSH
29517: FOR_IN
29518: IFFALSE 29553
// if GetBase ( i ) <> base then
29520: LD_VAR 0 6
29524: PPUSH
29525: CALL_OW 274
29529: PUSH
29530: LD_VAR 0 1
29534: NONEQUAL
29535: IFFALSE 29551
// ComLinkToBase ( base , i ) ;
29537: LD_VAR 0 1
29541: PPUSH
29542: LD_VAR 0 6
29546: PPUSH
29547: CALL_OW 169
29551: GO 29517
29553: POP
29554: POP
// end ; result := tmp ;
29555: LD_ADDR_VAR 0 4
29559: PUSH
29560: LD_VAR 0 5
29564: ST_TO_ADDR
// end ;
29565: LD_VAR 0 4
29569: RET
// export function ComComplete ( units , b ) ; var i ; begin
29570: LD_INT 0
29572: PPUSH
29573: PPUSH
// if not units then
29574: LD_VAR 0 1
29578: NOT
29579: IFFALSE 29583
// exit ;
29581: GO 29673
// for i in units do
29583: LD_ADDR_VAR 0 4
29587: PUSH
29588: LD_VAR 0 1
29592: PUSH
29593: FOR_IN
29594: IFFALSE 29671
// if BuildingStatus ( b ) = bs_build then
29596: LD_VAR 0 2
29600: PPUSH
29601: CALL_OW 461
29605: PUSH
29606: LD_INT 1
29608: EQUAL
29609: IFFALSE 29669
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29611: LD_VAR 0 4
29615: PPUSH
29616: LD_STRING h
29618: PUSH
29619: LD_VAR 0 2
29623: PPUSH
29624: CALL_OW 250
29628: PUSH
29629: LD_VAR 0 2
29633: PPUSH
29634: CALL_OW 251
29638: PUSH
29639: LD_VAR 0 2
29643: PUSH
29644: LD_INT 0
29646: PUSH
29647: LD_INT 0
29649: PUSH
29650: LD_INT 0
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: PUSH
29662: EMPTY
29663: LIST
29664: PPUSH
29665: CALL_OW 446
29669: GO 29593
29671: POP
29672: POP
// end ;
29673: LD_VAR 0 3
29677: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29678: LD_INT 0
29680: PPUSH
29681: PPUSH
29682: PPUSH
29683: PPUSH
29684: PPUSH
29685: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29686: LD_VAR 0 1
29690: NOT
29691: PUSH
29692: LD_VAR 0 1
29696: PPUSH
29697: CALL_OW 263
29701: PUSH
29702: LD_INT 2
29704: NONEQUAL
29705: OR
29706: IFFALSE 29710
// exit ;
29708: GO 30026
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29710: LD_ADDR_VAR 0 6
29714: PUSH
29715: LD_INT 22
29717: PUSH
29718: LD_VAR 0 1
29722: PPUSH
29723: CALL_OW 255
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: LD_INT 2
29734: PUSH
29735: LD_INT 30
29737: PUSH
29738: LD_INT 36
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 34
29747: PUSH
29748: LD_INT 31
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: LIST
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PPUSH
29764: CALL_OW 69
29768: ST_TO_ADDR
// if not tmp then
29769: LD_VAR 0 6
29773: NOT
29774: IFFALSE 29778
// exit ;
29776: GO 30026
// result := [ ] ;
29778: LD_ADDR_VAR 0 2
29782: PUSH
29783: EMPTY
29784: ST_TO_ADDR
// for i in tmp do
29785: LD_ADDR_VAR 0 3
29789: PUSH
29790: LD_VAR 0 6
29794: PUSH
29795: FOR_IN
29796: IFFALSE 29867
// begin t := UnitsInside ( i ) ;
29798: LD_ADDR_VAR 0 4
29802: PUSH
29803: LD_VAR 0 3
29807: PPUSH
29808: CALL_OW 313
29812: ST_TO_ADDR
// if t then
29813: LD_VAR 0 4
29817: IFFALSE 29865
// for j in t do
29819: LD_ADDR_VAR 0 7
29823: PUSH
29824: LD_VAR 0 4
29828: PUSH
29829: FOR_IN
29830: IFFALSE 29863
// result := Replace ( result , result + 1 , j ) ;
29832: LD_ADDR_VAR 0 2
29836: PUSH
29837: LD_VAR 0 2
29841: PPUSH
29842: LD_VAR 0 2
29846: PUSH
29847: LD_INT 1
29849: PLUS
29850: PPUSH
29851: LD_VAR 0 7
29855: PPUSH
29856: CALL_OW 1
29860: ST_TO_ADDR
29861: GO 29829
29863: POP
29864: POP
// end ;
29865: GO 29795
29867: POP
29868: POP
// if not result then
29869: LD_VAR 0 2
29873: NOT
29874: IFFALSE 29878
// exit ;
29876: GO 30026
// mech := result [ 1 ] ;
29878: LD_ADDR_VAR 0 5
29882: PUSH
29883: LD_VAR 0 2
29887: PUSH
29888: LD_INT 1
29890: ARRAY
29891: ST_TO_ADDR
// if result > 1 then
29892: LD_VAR 0 2
29896: PUSH
29897: LD_INT 1
29899: GREATER
29900: IFFALSE 30012
// begin for i = 2 to result do
29902: LD_ADDR_VAR 0 3
29906: PUSH
29907: DOUBLE
29908: LD_INT 2
29910: DEC
29911: ST_TO_ADDR
29912: LD_VAR 0 2
29916: PUSH
29917: FOR_TO
29918: IFFALSE 30010
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29920: LD_ADDR_VAR 0 4
29924: PUSH
29925: LD_VAR 0 2
29929: PUSH
29930: LD_VAR 0 3
29934: ARRAY
29935: PPUSH
29936: LD_INT 3
29938: PPUSH
29939: CALL_OW 259
29943: PUSH
29944: LD_VAR 0 2
29948: PUSH
29949: LD_VAR 0 3
29953: ARRAY
29954: PPUSH
29955: CALL_OW 432
29959: MINUS
29960: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29961: LD_VAR 0 4
29965: PUSH
29966: LD_VAR 0 5
29970: PPUSH
29971: LD_INT 3
29973: PPUSH
29974: CALL_OW 259
29978: PUSH
29979: LD_VAR 0 5
29983: PPUSH
29984: CALL_OW 432
29988: MINUS
29989: GREATEREQUAL
29990: IFFALSE 30008
// mech := result [ i ] ;
29992: LD_ADDR_VAR 0 5
29996: PUSH
29997: LD_VAR 0 2
30001: PUSH
30002: LD_VAR 0 3
30006: ARRAY
30007: ST_TO_ADDR
// end ;
30008: GO 29917
30010: POP
30011: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30012: LD_VAR 0 1
30016: PPUSH
30017: LD_VAR 0 5
30021: PPUSH
30022: CALL_OW 135
// end ;
30026: LD_VAR 0 2
30030: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30031: LD_INT 0
30033: PPUSH
30034: PPUSH
30035: PPUSH
30036: PPUSH
30037: PPUSH
30038: PPUSH
30039: PPUSH
30040: PPUSH
30041: PPUSH
30042: PPUSH
30043: PPUSH
30044: PPUSH
30045: PPUSH
// result := [ ] ;
30046: LD_ADDR_VAR 0 7
30050: PUSH
30051: EMPTY
30052: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30053: LD_VAR 0 1
30057: PPUSH
30058: CALL_OW 266
30062: PUSH
30063: LD_INT 0
30065: PUSH
30066: LD_INT 1
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: IN
30073: NOT
30074: IFFALSE 30078
// exit ;
30076: GO 31712
// if name then
30078: LD_VAR 0 3
30082: IFFALSE 30098
// SetBName ( base_dep , name ) ;
30084: LD_VAR 0 1
30088: PPUSH
30089: LD_VAR 0 3
30093: PPUSH
30094: CALL_OW 500
// base := GetBase ( base_dep ) ;
30098: LD_ADDR_VAR 0 15
30102: PUSH
30103: LD_VAR 0 1
30107: PPUSH
30108: CALL_OW 274
30112: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30113: LD_ADDR_VAR 0 16
30117: PUSH
30118: LD_VAR 0 1
30122: PPUSH
30123: CALL_OW 255
30127: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30128: LD_ADDR_VAR 0 17
30132: PUSH
30133: LD_VAR 0 1
30137: PPUSH
30138: CALL_OW 248
30142: ST_TO_ADDR
// if sources then
30143: LD_VAR 0 5
30147: IFFALSE 30194
// for i = 1 to 3 do
30149: LD_ADDR_VAR 0 8
30153: PUSH
30154: DOUBLE
30155: LD_INT 1
30157: DEC
30158: ST_TO_ADDR
30159: LD_INT 3
30161: PUSH
30162: FOR_TO
30163: IFFALSE 30192
// AddResourceType ( base , i , sources [ i ] ) ;
30165: LD_VAR 0 15
30169: PPUSH
30170: LD_VAR 0 8
30174: PPUSH
30175: LD_VAR 0 5
30179: PUSH
30180: LD_VAR 0 8
30184: ARRAY
30185: PPUSH
30186: CALL_OW 276
30190: GO 30162
30192: POP
30193: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30194: LD_ADDR_VAR 0 18
30198: PUSH
30199: LD_VAR 0 15
30203: PPUSH
30204: LD_VAR 0 2
30208: PPUSH
30209: LD_INT 1
30211: PPUSH
30212: CALL 29455 0 3
30216: ST_TO_ADDR
// InitHc ;
30217: CALL_OW 19
// InitUc ;
30221: CALL_OW 18
// uc_side := side ;
30225: LD_ADDR_OWVAR 20
30229: PUSH
30230: LD_VAR 0 16
30234: ST_TO_ADDR
// uc_nation := nation ;
30235: LD_ADDR_OWVAR 21
30239: PUSH
30240: LD_VAR 0 17
30244: ST_TO_ADDR
// if buildings then
30245: LD_VAR 0 18
30249: IFFALSE 31571
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30251: LD_ADDR_VAR 0 19
30255: PUSH
30256: LD_VAR 0 18
30260: PPUSH
30261: LD_INT 2
30263: PUSH
30264: LD_INT 30
30266: PUSH
30267: LD_INT 29
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 30
30276: PUSH
30277: LD_INT 30
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: LIST
30288: PPUSH
30289: CALL_OW 72
30293: ST_TO_ADDR
// if tmp then
30294: LD_VAR 0 19
30298: IFFALSE 30346
// for i in tmp do
30300: LD_ADDR_VAR 0 8
30304: PUSH
30305: LD_VAR 0 19
30309: PUSH
30310: FOR_IN
30311: IFFALSE 30344
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30313: LD_VAR 0 8
30317: PPUSH
30318: CALL_OW 250
30322: PPUSH
30323: LD_VAR 0 8
30327: PPUSH
30328: CALL_OW 251
30332: PPUSH
30333: LD_VAR 0 16
30337: PPUSH
30338: CALL_OW 441
30342: GO 30310
30344: POP
30345: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30346: LD_VAR 0 18
30350: PPUSH
30351: LD_INT 2
30353: PUSH
30354: LD_INT 30
30356: PUSH
30357: LD_INT 32
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 30
30366: PUSH
30367: LD_INT 33
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: LIST
30378: PPUSH
30379: CALL_OW 72
30383: IFFALSE 30471
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30385: LD_ADDR_VAR 0 8
30389: PUSH
30390: LD_VAR 0 18
30394: PPUSH
30395: LD_INT 2
30397: PUSH
30398: LD_INT 30
30400: PUSH
30401: LD_INT 32
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 30
30410: PUSH
30411: LD_INT 33
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: LIST
30422: PPUSH
30423: CALL_OW 72
30427: PUSH
30428: FOR_IN
30429: IFFALSE 30469
// begin if not GetBWeapon ( i ) then
30431: LD_VAR 0 8
30435: PPUSH
30436: CALL_OW 269
30440: NOT
30441: IFFALSE 30467
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30443: LD_VAR 0 8
30447: PPUSH
30448: LD_VAR 0 8
30452: PPUSH
30453: LD_VAR 0 2
30457: PPUSH
30458: CALL 31717 0 2
30462: PPUSH
30463: CALL_OW 431
// end ;
30467: GO 30428
30469: POP
30470: POP
// end ; for i = 1 to personel do
30471: LD_ADDR_VAR 0 8
30475: PUSH
30476: DOUBLE
30477: LD_INT 1
30479: DEC
30480: ST_TO_ADDR
30481: LD_VAR 0 6
30485: PUSH
30486: FOR_TO
30487: IFFALSE 31551
// begin if i > 4 then
30489: LD_VAR 0 8
30493: PUSH
30494: LD_INT 4
30496: GREATER
30497: IFFALSE 30501
// break ;
30499: GO 31551
// case i of 1 :
30501: LD_VAR 0 8
30505: PUSH
30506: LD_INT 1
30508: DOUBLE
30509: EQUAL
30510: IFTRUE 30514
30512: GO 30594
30514: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30515: LD_ADDR_VAR 0 12
30519: PUSH
30520: LD_VAR 0 18
30524: PPUSH
30525: LD_INT 22
30527: PUSH
30528: LD_VAR 0 16
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 58
30539: PUSH
30540: EMPTY
30541: LIST
30542: PUSH
30543: LD_INT 2
30545: PUSH
30546: LD_INT 30
30548: PUSH
30549: LD_INT 32
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 30
30558: PUSH
30559: LD_INT 4
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 30
30568: PUSH
30569: LD_INT 5
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: LIST
30586: PPUSH
30587: CALL_OW 72
30591: ST_TO_ADDR
30592: GO 30816
30594: LD_INT 2
30596: DOUBLE
30597: EQUAL
30598: IFTRUE 30602
30600: GO 30664
30602: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30603: LD_ADDR_VAR 0 12
30607: PUSH
30608: LD_VAR 0 18
30612: PPUSH
30613: LD_INT 22
30615: PUSH
30616: LD_VAR 0 16
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 2
30627: PUSH
30628: LD_INT 30
30630: PUSH
30631: LD_INT 0
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 30
30640: PUSH
30641: LD_INT 1
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: LIST
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PPUSH
30657: CALL_OW 72
30661: ST_TO_ADDR
30662: GO 30816
30664: LD_INT 3
30666: DOUBLE
30667: EQUAL
30668: IFTRUE 30672
30670: GO 30734
30672: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30673: LD_ADDR_VAR 0 12
30677: PUSH
30678: LD_VAR 0 18
30682: PPUSH
30683: LD_INT 22
30685: PUSH
30686: LD_VAR 0 16
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: LD_INT 2
30697: PUSH
30698: LD_INT 30
30700: PUSH
30701: LD_INT 2
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 30
30710: PUSH
30711: LD_INT 3
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: LIST
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PPUSH
30727: CALL_OW 72
30731: ST_TO_ADDR
30732: GO 30816
30734: LD_INT 4
30736: DOUBLE
30737: EQUAL
30738: IFTRUE 30742
30740: GO 30815
30742: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30743: LD_ADDR_VAR 0 12
30747: PUSH
30748: LD_VAR 0 18
30752: PPUSH
30753: LD_INT 22
30755: PUSH
30756: LD_VAR 0 16
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 2
30767: PUSH
30768: LD_INT 30
30770: PUSH
30771: LD_INT 6
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 30
30780: PUSH
30781: LD_INT 7
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 30
30790: PUSH
30791: LD_INT 8
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PPUSH
30808: CALL_OW 72
30812: ST_TO_ADDR
30813: GO 30816
30815: POP
// if i = 1 then
30816: LD_VAR 0 8
30820: PUSH
30821: LD_INT 1
30823: EQUAL
30824: IFFALSE 30935
// begin tmp := [ ] ;
30826: LD_ADDR_VAR 0 19
30830: PUSH
30831: EMPTY
30832: ST_TO_ADDR
// for j in f do
30833: LD_ADDR_VAR 0 9
30837: PUSH
30838: LD_VAR 0 12
30842: PUSH
30843: FOR_IN
30844: IFFALSE 30917
// if GetBType ( j ) = b_bunker then
30846: LD_VAR 0 9
30850: PPUSH
30851: CALL_OW 266
30855: PUSH
30856: LD_INT 32
30858: EQUAL
30859: IFFALSE 30886
// tmp := Insert ( tmp , 1 , j ) else
30861: LD_ADDR_VAR 0 19
30865: PUSH
30866: LD_VAR 0 19
30870: PPUSH
30871: LD_INT 1
30873: PPUSH
30874: LD_VAR 0 9
30878: PPUSH
30879: CALL_OW 2
30883: ST_TO_ADDR
30884: GO 30915
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30886: LD_ADDR_VAR 0 19
30890: PUSH
30891: LD_VAR 0 19
30895: PPUSH
30896: LD_VAR 0 19
30900: PUSH
30901: LD_INT 1
30903: PLUS
30904: PPUSH
30905: LD_VAR 0 9
30909: PPUSH
30910: CALL_OW 2
30914: ST_TO_ADDR
30915: GO 30843
30917: POP
30918: POP
// if tmp then
30919: LD_VAR 0 19
30923: IFFALSE 30935
// f := tmp ;
30925: LD_ADDR_VAR 0 12
30929: PUSH
30930: LD_VAR 0 19
30934: ST_TO_ADDR
// end ; x := personel [ i ] ;
30935: LD_ADDR_VAR 0 13
30939: PUSH
30940: LD_VAR 0 6
30944: PUSH
30945: LD_VAR 0 8
30949: ARRAY
30950: ST_TO_ADDR
// if x = - 1 then
30951: LD_VAR 0 13
30955: PUSH
30956: LD_INT 1
30958: NEG
30959: EQUAL
30960: IFFALSE 31169
// begin for j in f do
30962: LD_ADDR_VAR 0 9
30966: PUSH
30967: LD_VAR 0 12
30971: PUSH
30972: FOR_IN
30973: IFFALSE 31165
// repeat InitHc ;
30975: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30979: LD_VAR 0 9
30983: PPUSH
30984: CALL_OW 266
30988: PUSH
30989: LD_INT 5
30991: EQUAL
30992: IFFALSE 31062
// begin if UnitsInside ( j ) < 3 then
30994: LD_VAR 0 9
30998: PPUSH
30999: CALL_OW 313
31003: PUSH
31004: LD_INT 3
31006: LESS
31007: IFFALSE 31043
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31009: LD_INT 0
31011: PPUSH
31012: LD_INT 5
31014: PUSH
31015: LD_INT 8
31017: PUSH
31018: LD_INT 9
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: LIST
31025: PUSH
31026: LD_VAR 0 17
31030: ARRAY
31031: PPUSH
31032: LD_VAR 0 4
31036: PPUSH
31037: CALL_OW 380
31041: GO 31060
// PrepareHuman ( false , i , skill ) ;
31043: LD_INT 0
31045: PPUSH
31046: LD_VAR 0 8
31050: PPUSH
31051: LD_VAR 0 4
31055: PPUSH
31056: CALL_OW 380
// end else
31060: GO 31079
// PrepareHuman ( false , i , skill ) ;
31062: LD_INT 0
31064: PPUSH
31065: LD_VAR 0 8
31069: PPUSH
31070: LD_VAR 0 4
31074: PPUSH
31075: CALL_OW 380
// un := CreateHuman ;
31079: LD_ADDR_VAR 0 14
31083: PUSH
31084: CALL_OW 44
31088: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31089: LD_ADDR_VAR 0 7
31093: PUSH
31094: LD_VAR 0 7
31098: PPUSH
31099: LD_INT 1
31101: PPUSH
31102: LD_VAR 0 14
31106: PPUSH
31107: CALL_OW 2
31111: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31112: LD_VAR 0 14
31116: PPUSH
31117: LD_VAR 0 9
31121: PPUSH
31122: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31126: LD_VAR 0 9
31130: PPUSH
31131: CALL_OW 313
31135: PUSH
31136: LD_INT 6
31138: EQUAL
31139: PUSH
31140: LD_VAR 0 9
31144: PPUSH
31145: CALL_OW 266
31149: PUSH
31150: LD_INT 32
31152: PUSH
31153: LD_INT 31
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: IN
31160: OR
31161: IFFALSE 30975
31163: GO 30972
31165: POP
31166: POP
// end else
31167: GO 31549
// for j = 1 to x do
31169: LD_ADDR_VAR 0 9
31173: PUSH
31174: DOUBLE
31175: LD_INT 1
31177: DEC
31178: ST_TO_ADDR
31179: LD_VAR 0 13
31183: PUSH
31184: FOR_TO
31185: IFFALSE 31547
// begin InitHc ;
31187: CALL_OW 19
// if not f then
31191: LD_VAR 0 12
31195: NOT
31196: IFFALSE 31285
// begin PrepareHuman ( false , i , skill ) ;
31198: LD_INT 0
31200: PPUSH
31201: LD_VAR 0 8
31205: PPUSH
31206: LD_VAR 0 4
31210: PPUSH
31211: CALL_OW 380
// un := CreateHuman ;
31215: LD_ADDR_VAR 0 14
31219: PUSH
31220: CALL_OW 44
31224: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31225: LD_ADDR_VAR 0 7
31229: PUSH
31230: LD_VAR 0 7
31234: PPUSH
31235: LD_INT 1
31237: PPUSH
31238: LD_VAR 0 14
31242: PPUSH
31243: CALL_OW 2
31247: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31248: LD_VAR 0 14
31252: PPUSH
31253: LD_VAR 0 1
31257: PPUSH
31258: CALL_OW 250
31262: PPUSH
31263: LD_VAR 0 1
31267: PPUSH
31268: CALL_OW 251
31272: PPUSH
31273: LD_INT 10
31275: PPUSH
31276: LD_INT 0
31278: PPUSH
31279: CALL_OW 50
// continue ;
31283: GO 31184
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31285: LD_VAR 0 12
31289: PUSH
31290: LD_INT 1
31292: ARRAY
31293: PPUSH
31294: CALL_OW 313
31298: PUSH
31299: LD_VAR 0 12
31303: PUSH
31304: LD_INT 1
31306: ARRAY
31307: PPUSH
31308: CALL_OW 266
31312: PUSH
31313: LD_INT 32
31315: PUSH
31316: LD_INT 31
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: IN
31323: AND
31324: PUSH
31325: LD_VAR 0 12
31329: PUSH
31330: LD_INT 1
31332: ARRAY
31333: PPUSH
31334: CALL_OW 313
31338: PUSH
31339: LD_INT 6
31341: EQUAL
31342: OR
31343: IFFALSE 31363
// f := Delete ( f , 1 ) ;
31345: LD_ADDR_VAR 0 12
31349: PUSH
31350: LD_VAR 0 12
31354: PPUSH
31355: LD_INT 1
31357: PPUSH
31358: CALL_OW 3
31362: ST_TO_ADDR
// if not f then
31363: LD_VAR 0 12
31367: NOT
31368: IFFALSE 31386
// begin x := x + 2 ;
31370: LD_ADDR_VAR 0 13
31374: PUSH
31375: LD_VAR 0 13
31379: PUSH
31380: LD_INT 2
31382: PLUS
31383: ST_TO_ADDR
// continue ;
31384: GO 31184
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31386: LD_VAR 0 12
31390: PUSH
31391: LD_INT 1
31393: ARRAY
31394: PPUSH
31395: CALL_OW 266
31399: PUSH
31400: LD_INT 5
31402: EQUAL
31403: IFFALSE 31477
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31405: LD_VAR 0 12
31409: PUSH
31410: LD_INT 1
31412: ARRAY
31413: PPUSH
31414: CALL_OW 313
31418: PUSH
31419: LD_INT 3
31421: LESS
31422: IFFALSE 31458
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31424: LD_INT 0
31426: PPUSH
31427: LD_INT 5
31429: PUSH
31430: LD_INT 8
31432: PUSH
31433: LD_INT 9
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: LIST
31440: PUSH
31441: LD_VAR 0 17
31445: ARRAY
31446: PPUSH
31447: LD_VAR 0 4
31451: PPUSH
31452: CALL_OW 380
31456: GO 31475
// PrepareHuman ( false , i , skill ) ;
31458: LD_INT 0
31460: PPUSH
31461: LD_VAR 0 8
31465: PPUSH
31466: LD_VAR 0 4
31470: PPUSH
31471: CALL_OW 380
// end else
31475: GO 31494
// PrepareHuman ( false , i , skill ) ;
31477: LD_INT 0
31479: PPUSH
31480: LD_VAR 0 8
31484: PPUSH
31485: LD_VAR 0 4
31489: PPUSH
31490: CALL_OW 380
// un := CreateHuman ;
31494: LD_ADDR_VAR 0 14
31498: PUSH
31499: CALL_OW 44
31503: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31504: LD_ADDR_VAR 0 7
31508: PUSH
31509: LD_VAR 0 7
31513: PPUSH
31514: LD_INT 1
31516: PPUSH
31517: LD_VAR 0 14
31521: PPUSH
31522: CALL_OW 2
31526: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31527: LD_VAR 0 14
31531: PPUSH
31532: LD_VAR 0 12
31536: PUSH
31537: LD_INT 1
31539: ARRAY
31540: PPUSH
31541: CALL_OW 52
// end ;
31545: GO 31184
31547: POP
31548: POP
// end ;
31549: GO 30486
31551: POP
31552: POP
// result := result ^ buildings ;
31553: LD_ADDR_VAR 0 7
31557: PUSH
31558: LD_VAR 0 7
31562: PUSH
31563: LD_VAR 0 18
31567: ADD
31568: ST_TO_ADDR
// end else
31569: GO 31712
// begin for i = 1 to personel do
31571: LD_ADDR_VAR 0 8
31575: PUSH
31576: DOUBLE
31577: LD_INT 1
31579: DEC
31580: ST_TO_ADDR
31581: LD_VAR 0 6
31585: PUSH
31586: FOR_TO
31587: IFFALSE 31710
// begin if i > 4 then
31589: LD_VAR 0 8
31593: PUSH
31594: LD_INT 4
31596: GREATER
31597: IFFALSE 31601
// break ;
31599: GO 31710
// x := personel [ i ] ;
31601: LD_ADDR_VAR 0 13
31605: PUSH
31606: LD_VAR 0 6
31610: PUSH
31611: LD_VAR 0 8
31615: ARRAY
31616: ST_TO_ADDR
// if x = - 1 then
31617: LD_VAR 0 13
31621: PUSH
31622: LD_INT 1
31624: NEG
31625: EQUAL
31626: IFFALSE 31630
// continue ;
31628: GO 31586
// PrepareHuman ( false , i , skill ) ;
31630: LD_INT 0
31632: PPUSH
31633: LD_VAR 0 8
31637: PPUSH
31638: LD_VAR 0 4
31642: PPUSH
31643: CALL_OW 380
// un := CreateHuman ;
31647: LD_ADDR_VAR 0 14
31651: PUSH
31652: CALL_OW 44
31656: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31657: LD_VAR 0 14
31661: PPUSH
31662: LD_VAR 0 1
31666: PPUSH
31667: CALL_OW 250
31671: PPUSH
31672: LD_VAR 0 1
31676: PPUSH
31677: CALL_OW 251
31681: PPUSH
31682: LD_INT 10
31684: PPUSH
31685: LD_INT 0
31687: PPUSH
31688: CALL_OW 50
// result := result ^ un ;
31692: LD_ADDR_VAR 0 7
31696: PUSH
31697: LD_VAR 0 7
31701: PUSH
31702: LD_VAR 0 14
31706: ADD
31707: ST_TO_ADDR
// end ;
31708: GO 31586
31710: POP
31711: POP
// end ; end ;
31712: LD_VAR 0 7
31716: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31717: LD_INT 0
31719: PPUSH
31720: PPUSH
31721: PPUSH
31722: PPUSH
31723: PPUSH
31724: PPUSH
31725: PPUSH
31726: PPUSH
31727: PPUSH
31728: PPUSH
31729: PPUSH
31730: PPUSH
31731: PPUSH
31732: PPUSH
31733: PPUSH
31734: PPUSH
// result := false ;
31735: LD_ADDR_VAR 0 3
31739: PUSH
31740: LD_INT 0
31742: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31743: LD_VAR 0 1
31747: NOT
31748: PUSH
31749: LD_VAR 0 1
31753: PPUSH
31754: CALL_OW 266
31758: PUSH
31759: LD_INT 32
31761: PUSH
31762: LD_INT 33
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: IN
31769: NOT
31770: OR
31771: IFFALSE 31775
// exit ;
31773: GO 32884
// nat := GetNation ( tower ) ;
31775: LD_ADDR_VAR 0 12
31779: PUSH
31780: LD_VAR 0 1
31784: PPUSH
31785: CALL_OW 248
31789: ST_TO_ADDR
// side := GetSide ( tower ) ;
31790: LD_ADDR_VAR 0 16
31794: PUSH
31795: LD_VAR 0 1
31799: PPUSH
31800: CALL_OW 255
31804: ST_TO_ADDR
// x := GetX ( tower ) ;
31805: LD_ADDR_VAR 0 10
31809: PUSH
31810: LD_VAR 0 1
31814: PPUSH
31815: CALL_OW 250
31819: ST_TO_ADDR
// y := GetY ( tower ) ;
31820: LD_ADDR_VAR 0 11
31824: PUSH
31825: LD_VAR 0 1
31829: PPUSH
31830: CALL_OW 251
31834: ST_TO_ADDR
// if not x or not y then
31835: LD_VAR 0 10
31839: NOT
31840: PUSH
31841: LD_VAR 0 11
31845: NOT
31846: OR
31847: IFFALSE 31851
// exit ;
31849: GO 32884
// weapon := 0 ;
31851: LD_ADDR_VAR 0 18
31855: PUSH
31856: LD_INT 0
31858: ST_TO_ADDR
// fac_list := [ ] ;
31859: LD_ADDR_VAR 0 17
31863: PUSH
31864: EMPTY
31865: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31866: LD_ADDR_VAR 0 6
31870: PUSH
31871: LD_VAR 0 1
31875: PPUSH
31876: CALL_OW 274
31880: PPUSH
31881: LD_VAR 0 2
31885: PPUSH
31886: LD_INT 0
31888: PPUSH
31889: CALL 29455 0 3
31893: PPUSH
31894: LD_INT 30
31896: PUSH
31897: LD_INT 3
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PPUSH
31904: CALL_OW 72
31908: ST_TO_ADDR
// if not factories then
31909: LD_VAR 0 6
31913: NOT
31914: IFFALSE 31918
// exit ;
31916: GO 32884
// for i in factories do
31918: LD_ADDR_VAR 0 8
31922: PUSH
31923: LD_VAR 0 6
31927: PUSH
31928: FOR_IN
31929: IFFALSE 31954
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31931: LD_ADDR_VAR 0 17
31935: PUSH
31936: LD_VAR 0 17
31940: PUSH
31941: LD_VAR 0 8
31945: PPUSH
31946: CALL_OW 478
31950: UNION
31951: ST_TO_ADDR
31952: GO 31928
31954: POP
31955: POP
// if not fac_list then
31956: LD_VAR 0 17
31960: NOT
31961: IFFALSE 31965
// exit ;
31963: GO 32884
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31965: LD_ADDR_VAR 0 5
31969: PUSH
31970: LD_INT 4
31972: PUSH
31973: LD_INT 5
31975: PUSH
31976: LD_INT 9
31978: PUSH
31979: LD_INT 10
31981: PUSH
31982: LD_INT 6
31984: PUSH
31985: LD_INT 7
31987: PUSH
31988: LD_INT 11
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 27
32002: PUSH
32003: LD_INT 28
32005: PUSH
32006: LD_INT 26
32008: PUSH
32009: LD_INT 30
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 43
32020: PUSH
32021: LD_INT 44
32023: PUSH
32024: LD_INT 46
32026: PUSH
32027: LD_INT 45
32029: PUSH
32030: LD_INT 47
32032: PUSH
32033: LD_INT 49
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: LIST
32048: PUSH
32049: LD_VAR 0 12
32053: ARRAY
32054: ST_TO_ADDR
// list := list isect fac_list ;
32055: LD_ADDR_VAR 0 5
32059: PUSH
32060: LD_VAR 0 5
32064: PUSH
32065: LD_VAR 0 17
32069: ISECT
32070: ST_TO_ADDR
// if not list then
32071: LD_VAR 0 5
32075: NOT
32076: IFFALSE 32080
// exit ;
32078: GO 32884
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32080: LD_VAR 0 12
32084: PUSH
32085: LD_INT 3
32087: EQUAL
32088: PUSH
32089: LD_INT 49
32091: PUSH
32092: LD_VAR 0 5
32096: IN
32097: AND
32098: PUSH
32099: LD_INT 31
32101: PPUSH
32102: LD_VAR 0 16
32106: PPUSH
32107: CALL_OW 321
32111: PUSH
32112: LD_INT 2
32114: EQUAL
32115: AND
32116: IFFALSE 32176
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32118: LD_INT 22
32120: PUSH
32121: LD_VAR 0 16
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 35
32132: PUSH
32133: LD_INT 49
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 91
32142: PUSH
32143: LD_VAR 0 1
32147: PUSH
32148: LD_INT 10
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: LIST
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: LIST
32160: PPUSH
32161: CALL_OW 69
32165: NOT
32166: IFFALSE 32176
// weapon := ru_time_lapser ;
32168: LD_ADDR_VAR 0 18
32172: PUSH
32173: LD_INT 49
32175: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32176: LD_VAR 0 12
32180: PUSH
32181: LD_INT 1
32183: PUSH
32184: LD_INT 2
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: IN
32191: PUSH
32192: LD_INT 11
32194: PUSH
32195: LD_VAR 0 5
32199: IN
32200: PUSH
32201: LD_INT 30
32203: PUSH
32204: LD_VAR 0 5
32208: IN
32209: OR
32210: AND
32211: PUSH
32212: LD_INT 6
32214: PPUSH
32215: LD_VAR 0 16
32219: PPUSH
32220: CALL_OW 321
32224: PUSH
32225: LD_INT 2
32227: EQUAL
32228: AND
32229: IFFALSE 32394
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32231: LD_INT 22
32233: PUSH
32234: LD_VAR 0 16
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 2
32245: PUSH
32246: LD_INT 35
32248: PUSH
32249: LD_INT 11
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 35
32258: PUSH
32259: LD_INT 30
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 91
32273: PUSH
32274: LD_VAR 0 1
32278: PUSH
32279: LD_INT 18
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: LIST
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: LIST
32291: PPUSH
32292: CALL_OW 69
32296: NOT
32297: PUSH
32298: LD_INT 22
32300: PUSH
32301: LD_VAR 0 16
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 2
32312: PUSH
32313: LD_INT 30
32315: PUSH
32316: LD_INT 32
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 30
32325: PUSH
32326: LD_INT 33
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 91
32340: PUSH
32341: LD_VAR 0 1
32345: PUSH
32346: LD_INT 12
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: LIST
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: LIST
32358: PUSH
32359: EMPTY
32360: LIST
32361: PPUSH
32362: CALL_OW 69
32366: PUSH
32367: LD_INT 2
32369: GREATER
32370: AND
32371: IFFALSE 32394
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32373: LD_ADDR_VAR 0 18
32377: PUSH
32378: LD_INT 11
32380: PUSH
32381: LD_INT 30
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_VAR 0 12
32392: ARRAY
32393: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32394: LD_VAR 0 18
32398: NOT
32399: PUSH
32400: LD_INT 40
32402: PPUSH
32403: LD_VAR 0 16
32407: PPUSH
32408: CALL_OW 321
32412: PUSH
32413: LD_INT 2
32415: EQUAL
32416: AND
32417: PUSH
32418: LD_INT 7
32420: PUSH
32421: LD_VAR 0 5
32425: IN
32426: PUSH
32427: LD_INT 28
32429: PUSH
32430: LD_VAR 0 5
32434: IN
32435: OR
32436: PUSH
32437: LD_INT 45
32439: PUSH
32440: LD_VAR 0 5
32444: IN
32445: OR
32446: AND
32447: IFFALSE 32701
// begin hex := GetHexInfo ( x , y ) ;
32449: LD_ADDR_VAR 0 4
32453: PUSH
32454: LD_VAR 0 10
32458: PPUSH
32459: LD_VAR 0 11
32463: PPUSH
32464: CALL_OW 546
32468: ST_TO_ADDR
// if hex [ 1 ] then
32469: LD_VAR 0 4
32473: PUSH
32474: LD_INT 1
32476: ARRAY
32477: IFFALSE 32481
// exit ;
32479: GO 32884
// height := hex [ 2 ] ;
32481: LD_ADDR_VAR 0 15
32485: PUSH
32486: LD_VAR 0 4
32490: PUSH
32491: LD_INT 2
32493: ARRAY
32494: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32495: LD_ADDR_VAR 0 14
32499: PUSH
32500: LD_INT 0
32502: PUSH
32503: LD_INT 2
32505: PUSH
32506: LD_INT 3
32508: PUSH
32509: LD_INT 5
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: ST_TO_ADDR
// for i in tmp do
32518: LD_ADDR_VAR 0 8
32522: PUSH
32523: LD_VAR 0 14
32527: PUSH
32528: FOR_IN
32529: IFFALSE 32699
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32531: LD_ADDR_VAR 0 9
32535: PUSH
32536: LD_VAR 0 10
32540: PPUSH
32541: LD_VAR 0 8
32545: PPUSH
32546: LD_INT 5
32548: PPUSH
32549: CALL_OW 272
32553: PUSH
32554: LD_VAR 0 11
32558: PPUSH
32559: LD_VAR 0 8
32563: PPUSH
32564: LD_INT 5
32566: PPUSH
32567: CALL_OW 273
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32576: LD_VAR 0 9
32580: PUSH
32581: LD_INT 1
32583: ARRAY
32584: PPUSH
32585: LD_VAR 0 9
32589: PUSH
32590: LD_INT 2
32592: ARRAY
32593: PPUSH
32594: CALL_OW 488
32598: IFFALSE 32697
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32600: LD_ADDR_VAR 0 4
32604: PUSH
32605: LD_VAR 0 9
32609: PUSH
32610: LD_INT 1
32612: ARRAY
32613: PPUSH
32614: LD_VAR 0 9
32618: PUSH
32619: LD_INT 2
32621: ARRAY
32622: PPUSH
32623: CALL_OW 546
32627: ST_TO_ADDR
// if hex [ 1 ] then
32628: LD_VAR 0 4
32632: PUSH
32633: LD_INT 1
32635: ARRAY
32636: IFFALSE 32640
// continue ;
32638: GO 32528
// h := hex [ 2 ] ;
32640: LD_ADDR_VAR 0 13
32644: PUSH
32645: LD_VAR 0 4
32649: PUSH
32650: LD_INT 2
32652: ARRAY
32653: ST_TO_ADDR
// if h + 7 < height then
32654: LD_VAR 0 13
32658: PUSH
32659: LD_INT 7
32661: PLUS
32662: PUSH
32663: LD_VAR 0 15
32667: LESS
32668: IFFALSE 32697
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32670: LD_ADDR_VAR 0 18
32674: PUSH
32675: LD_INT 7
32677: PUSH
32678: LD_INT 28
32680: PUSH
32681: LD_INT 45
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: LIST
32688: PUSH
32689: LD_VAR 0 12
32693: ARRAY
32694: ST_TO_ADDR
// break ;
32695: GO 32699
// end ; end ; end ;
32697: GO 32528
32699: POP
32700: POP
// end ; if not weapon then
32701: LD_VAR 0 18
32705: NOT
32706: IFFALSE 32766
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32708: LD_ADDR_VAR 0 5
32712: PUSH
32713: LD_VAR 0 5
32717: PUSH
32718: LD_INT 11
32720: PUSH
32721: LD_INT 30
32723: PUSH
32724: LD_INT 49
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: LIST
32731: DIFF
32732: ST_TO_ADDR
// if not list then
32733: LD_VAR 0 5
32737: NOT
32738: IFFALSE 32742
// exit ;
32740: GO 32884
// weapon := list [ rand ( 1 , list ) ] ;
32742: LD_ADDR_VAR 0 18
32746: PUSH
32747: LD_VAR 0 5
32751: PUSH
32752: LD_INT 1
32754: PPUSH
32755: LD_VAR 0 5
32759: PPUSH
32760: CALL_OW 12
32764: ARRAY
32765: ST_TO_ADDR
// end ; if weapon then
32766: LD_VAR 0 18
32770: IFFALSE 32884
// begin tmp := CostOfWeapon ( weapon ) ;
32772: LD_ADDR_VAR 0 14
32776: PUSH
32777: LD_VAR 0 18
32781: PPUSH
32782: CALL_OW 451
32786: ST_TO_ADDR
// j := GetBase ( tower ) ;
32787: LD_ADDR_VAR 0 9
32791: PUSH
32792: LD_VAR 0 1
32796: PPUSH
32797: CALL_OW 274
32801: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32802: LD_VAR 0 9
32806: PPUSH
32807: LD_INT 1
32809: PPUSH
32810: CALL_OW 275
32814: PUSH
32815: LD_VAR 0 14
32819: PUSH
32820: LD_INT 1
32822: ARRAY
32823: GREATEREQUAL
32824: PUSH
32825: LD_VAR 0 9
32829: PPUSH
32830: LD_INT 2
32832: PPUSH
32833: CALL_OW 275
32837: PUSH
32838: LD_VAR 0 14
32842: PUSH
32843: LD_INT 2
32845: ARRAY
32846: GREATEREQUAL
32847: AND
32848: PUSH
32849: LD_VAR 0 9
32853: PPUSH
32854: LD_INT 3
32856: PPUSH
32857: CALL_OW 275
32861: PUSH
32862: LD_VAR 0 14
32866: PUSH
32867: LD_INT 3
32869: ARRAY
32870: GREATEREQUAL
32871: AND
32872: IFFALSE 32884
// result := weapon ;
32874: LD_ADDR_VAR 0 3
32878: PUSH
32879: LD_VAR 0 18
32883: ST_TO_ADDR
// end ; end ;
32884: LD_VAR 0 3
32888: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32889: LD_INT 0
32891: PPUSH
32892: PPUSH
// result := true ;
32893: LD_ADDR_VAR 0 3
32897: PUSH
32898: LD_INT 1
32900: ST_TO_ADDR
// if array1 = array2 then
32901: LD_VAR 0 1
32905: PUSH
32906: LD_VAR 0 2
32910: EQUAL
32911: IFFALSE 32971
// begin for i = 1 to array1 do
32913: LD_ADDR_VAR 0 4
32917: PUSH
32918: DOUBLE
32919: LD_INT 1
32921: DEC
32922: ST_TO_ADDR
32923: LD_VAR 0 1
32927: PUSH
32928: FOR_TO
32929: IFFALSE 32967
// if array1 [ i ] <> array2 [ i ] then
32931: LD_VAR 0 1
32935: PUSH
32936: LD_VAR 0 4
32940: ARRAY
32941: PUSH
32942: LD_VAR 0 2
32946: PUSH
32947: LD_VAR 0 4
32951: ARRAY
32952: NONEQUAL
32953: IFFALSE 32965
// begin result := false ;
32955: LD_ADDR_VAR 0 3
32959: PUSH
32960: LD_INT 0
32962: ST_TO_ADDR
// break ;
32963: GO 32967
// end ;
32965: GO 32928
32967: POP
32968: POP
// end else
32969: GO 32979
// result := false ;
32971: LD_ADDR_VAR 0 3
32975: PUSH
32976: LD_INT 0
32978: ST_TO_ADDR
// end ;
32979: LD_VAR 0 3
32983: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32984: LD_INT 0
32986: PPUSH
32987: PPUSH
// if not array1 or not array2 then
32988: LD_VAR 0 1
32992: NOT
32993: PUSH
32994: LD_VAR 0 2
32998: NOT
32999: OR
33000: IFFALSE 33004
// exit ;
33002: GO 33068
// result := true ;
33004: LD_ADDR_VAR 0 3
33008: PUSH
33009: LD_INT 1
33011: ST_TO_ADDR
// for i = 1 to array1 do
33012: LD_ADDR_VAR 0 4
33016: PUSH
33017: DOUBLE
33018: LD_INT 1
33020: DEC
33021: ST_TO_ADDR
33022: LD_VAR 0 1
33026: PUSH
33027: FOR_TO
33028: IFFALSE 33066
// if array1 [ i ] <> array2 [ i ] then
33030: LD_VAR 0 1
33034: PUSH
33035: LD_VAR 0 4
33039: ARRAY
33040: PUSH
33041: LD_VAR 0 2
33045: PUSH
33046: LD_VAR 0 4
33050: ARRAY
33051: NONEQUAL
33052: IFFALSE 33064
// begin result := false ;
33054: LD_ADDR_VAR 0 3
33058: PUSH
33059: LD_INT 0
33061: ST_TO_ADDR
// break ;
33062: GO 33066
// end ;
33064: GO 33027
33066: POP
33067: POP
// end ;
33068: LD_VAR 0 3
33072: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33073: LD_INT 0
33075: PPUSH
33076: PPUSH
33077: PPUSH
// pom := GetBase ( fac ) ;
33078: LD_ADDR_VAR 0 5
33082: PUSH
33083: LD_VAR 0 1
33087: PPUSH
33088: CALL_OW 274
33092: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33093: LD_ADDR_VAR 0 4
33097: PUSH
33098: LD_VAR 0 2
33102: PUSH
33103: LD_INT 1
33105: ARRAY
33106: PPUSH
33107: LD_VAR 0 2
33111: PUSH
33112: LD_INT 2
33114: ARRAY
33115: PPUSH
33116: LD_VAR 0 2
33120: PUSH
33121: LD_INT 3
33123: ARRAY
33124: PPUSH
33125: LD_VAR 0 2
33129: PUSH
33130: LD_INT 4
33132: ARRAY
33133: PPUSH
33134: CALL_OW 449
33138: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33139: LD_ADDR_VAR 0 3
33143: PUSH
33144: LD_VAR 0 5
33148: PPUSH
33149: LD_INT 1
33151: PPUSH
33152: CALL_OW 275
33156: PUSH
33157: LD_VAR 0 4
33161: PUSH
33162: LD_INT 1
33164: ARRAY
33165: GREATEREQUAL
33166: PUSH
33167: LD_VAR 0 5
33171: PPUSH
33172: LD_INT 2
33174: PPUSH
33175: CALL_OW 275
33179: PUSH
33180: LD_VAR 0 4
33184: PUSH
33185: LD_INT 2
33187: ARRAY
33188: GREATEREQUAL
33189: AND
33190: PUSH
33191: LD_VAR 0 5
33195: PPUSH
33196: LD_INT 3
33198: PPUSH
33199: CALL_OW 275
33203: PUSH
33204: LD_VAR 0 4
33208: PUSH
33209: LD_INT 3
33211: ARRAY
33212: GREATEREQUAL
33213: AND
33214: ST_TO_ADDR
// end ;
33215: LD_VAR 0 3
33219: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33220: LD_INT 0
33222: PPUSH
33223: PPUSH
33224: PPUSH
33225: PPUSH
// pom := GetBase ( building ) ;
33226: LD_ADDR_VAR 0 3
33230: PUSH
33231: LD_VAR 0 1
33235: PPUSH
33236: CALL_OW 274
33240: ST_TO_ADDR
// if not pom then
33241: LD_VAR 0 3
33245: NOT
33246: IFFALSE 33250
// exit ;
33248: GO 33420
// btype := GetBType ( building ) ;
33250: LD_ADDR_VAR 0 5
33254: PUSH
33255: LD_VAR 0 1
33259: PPUSH
33260: CALL_OW 266
33264: ST_TO_ADDR
// if btype = b_armoury then
33265: LD_VAR 0 5
33269: PUSH
33270: LD_INT 4
33272: EQUAL
33273: IFFALSE 33283
// btype := b_barracks ;
33275: LD_ADDR_VAR 0 5
33279: PUSH
33280: LD_INT 5
33282: ST_TO_ADDR
// if btype = b_depot then
33283: LD_VAR 0 5
33287: PUSH
33288: LD_INT 0
33290: EQUAL
33291: IFFALSE 33301
// btype := b_warehouse ;
33293: LD_ADDR_VAR 0 5
33297: PUSH
33298: LD_INT 1
33300: ST_TO_ADDR
// if btype = b_workshop then
33301: LD_VAR 0 5
33305: PUSH
33306: LD_INT 2
33308: EQUAL
33309: IFFALSE 33319
// btype := b_factory ;
33311: LD_ADDR_VAR 0 5
33315: PUSH
33316: LD_INT 3
33318: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33319: LD_ADDR_VAR 0 4
33323: PUSH
33324: LD_VAR 0 5
33328: PPUSH
33329: LD_VAR 0 1
33333: PPUSH
33334: CALL_OW 248
33338: PPUSH
33339: CALL_OW 450
33343: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33344: LD_ADDR_VAR 0 2
33348: PUSH
33349: LD_VAR 0 3
33353: PPUSH
33354: LD_INT 1
33356: PPUSH
33357: CALL_OW 275
33361: PUSH
33362: LD_VAR 0 4
33366: PUSH
33367: LD_INT 1
33369: ARRAY
33370: GREATEREQUAL
33371: PUSH
33372: LD_VAR 0 3
33376: PPUSH
33377: LD_INT 2
33379: PPUSH
33380: CALL_OW 275
33384: PUSH
33385: LD_VAR 0 4
33389: PUSH
33390: LD_INT 2
33392: ARRAY
33393: GREATEREQUAL
33394: AND
33395: PUSH
33396: LD_VAR 0 3
33400: PPUSH
33401: LD_INT 3
33403: PPUSH
33404: CALL_OW 275
33408: PUSH
33409: LD_VAR 0 4
33413: PUSH
33414: LD_INT 3
33416: ARRAY
33417: GREATEREQUAL
33418: AND
33419: ST_TO_ADDR
// end ;
33420: LD_VAR 0 2
33424: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33425: LD_INT 0
33427: PPUSH
33428: PPUSH
33429: PPUSH
// pom := GetBase ( building ) ;
33430: LD_ADDR_VAR 0 4
33434: PUSH
33435: LD_VAR 0 1
33439: PPUSH
33440: CALL_OW 274
33444: ST_TO_ADDR
// if not pom then
33445: LD_VAR 0 4
33449: NOT
33450: IFFALSE 33454
// exit ;
33452: GO 33555
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33454: LD_ADDR_VAR 0 5
33458: PUSH
33459: LD_VAR 0 2
33463: PPUSH
33464: LD_VAR 0 1
33468: PPUSH
33469: CALL_OW 248
33473: PPUSH
33474: CALL_OW 450
33478: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33479: LD_ADDR_VAR 0 3
33483: PUSH
33484: LD_VAR 0 4
33488: PPUSH
33489: LD_INT 1
33491: PPUSH
33492: CALL_OW 275
33496: PUSH
33497: LD_VAR 0 5
33501: PUSH
33502: LD_INT 1
33504: ARRAY
33505: GREATEREQUAL
33506: PUSH
33507: LD_VAR 0 4
33511: PPUSH
33512: LD_INT 2
33514: PPUSH
33515: CALL_OW 275
33519: PUSH
33520: LD_VAR 0 5
33524: PUSH
33525: LD_INT 2
33527: ARRAY
33528: GREATEREQUAL
33529: AND
33530: PUSH
33531: LD_VAR 0 4
33535: PPUSH
33536: LD_INT 3
33538: PPUSH
33539: CALL_OW 275
33543: PUSH
33544: LD_VAR 0 5
33548: PUSH
33549: LD_INT 3
33551: ARRAY
33552: GREATEREQUAL
33553: AND
33554: ST_TO_ADDR
// end ;
33555: LD_VAR 0 3
33559: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33560: LD_INT 0
33562: PPUSH
33563: PPUSH
33564: PPUSH
33565: PPUSH
33566: PPUSH
33567: PPUSH
33568: PPUSH
33569: PPUSH
33570: PPUSH
33571: PPUSH
33572: PPUSH
// result := false ;
33573: LD_ADDR_VAR 0 8
33577: PUSH
33578: LD_INT 0
33580: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33581: LD_VAR 0 5
33585: NOT
33586: PUSH
33587: LD_VAR 0 1
33591: NOT
33592: OR
33593: PUSH
33594: LD_VAR 0 2
33598: NOT
33599: OR
33600: PUSH
33601: LD_VAR 0 3
33605: NOT
33606: OR
33607: IFFALSE 33611
// exit ;
33609: GO 34425
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33611: LD_ADDR_VAR 0 14
33615: PUSH
33616: LD_VAR 0 1
33620: PPUSH
33621: LD_VAR 0 2
33625: PPUSH
33626: LD_VAR 0 3
33630: PPUSH
33631: LD_VAR 0 4
33635: PPUSH
33636: LD_VAR 0 5
33640: PUSH
33641: LD_INT 1
33643: ARRAY
33644: PPUSH
33645: CALL_OW 248
33649: PPUSH
33650: LD_INT 0
33652: PPUSH
33653: CALL 35658 0 6
33657: ST_TO_ADDR
// if not hexes then
33658: LD_VAR 0 14
33662: NOT
33663: IFFALSE 33667
// exit ;
33665: GO 34425
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33667: LD_ADDR_VAR 0 17
33671: PUSH
33672: LD_VAR 0 5
33676: PPUSH
33677: LD_INT 22
33679: PUSH
33680: LD_VAR 0 13
33684: PPUSH
33685: CALL_OW 255
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 2
33696: PUSH
33697: LD_INT 30
33699: PUSH
33700: LD_INT 0
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 30
33709: PUSH
33710: LD_INT 1
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: LIST
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PPUSH
33726: CALL_OW 72
33730: ST_TO_ADDR
// for i = 1 to hexes do
33731: LD_ADDR_VAR 0 9
33735: PUSH
33736: DOUBLE
33737: LD_INT 1
33739: DEC
33740: ST_TO_ADDR
33741: LD_VAR 0 14
33745: PUSH
33746: FOR_TO
33747: IFFALSE 34423
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33749: LD_ADDR_VAR 0 13
33753: PUSH
33754: LD_VAR 0 14
33758: PUSH
33759: LD_VAR 0 9
33763: ARRAY
33764: PUSH
33765: LD_INT 1
33767: ARRAY
33768: PPUSH
33769: LD_VAR 0 14
33773: PUSH
33774: LD_VAR 0 9
33778: ARRAY
33779: PUSH
33780: LD_INT 2
33782: ARRAY
33783: PPUSH
33784: CALL_OW 428
33788: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33789: LD_VAR 0 14
33793: PUSH
33794: LD_VAR 0 9
33798: ARRAY
33799: PUSH
33800: LD_INT 1
33802: ARRAY
33803: PPUSH
33804: LD_VAR 0 14
33808: PUSH
33809: LD_VAR 0 9
33813: ARRAY
33814: PUSH
33815: LD_INT 2
33817: ARRAY
33818: PPUSH
33819: CALL_OW 351
33823: PUSH
33824: LD_VAR 0 14
33828: PUSH
33829: LD_VAR 0 9
33833: ARRAY
33834: PUSH
33835: LD_INT 1
33837: ARRAY
33838: PPUSH
33839: LD_VAR 0 14
33843: PUSH
33844: LD_VAR 0 9
33848: ARRAY
33849: PUSH
33850: LD_INT 2
33852: ARRAY
33853: PPUSH
33854: CALL_OW 488
33858: NOT
33859: OR
33860: PUSH
33861: LD_VAR 0 13
33865: PPUSH
33866: CALL_OW 247
33870: PUSH
33871: LD_INT 3
33873: EQUAL
33874: OR
33875: IFFALSE 33881
// exit ;
33877: POP
33878: POP
33879: GO 34425
// if not tmp then
33881: LD_VAR 0 13
33885: NOT
33886: IFFALSE 33890
// continue ;
33888: GO 33746
// result := true ;
33890: LD_ADDR_VAR 0 8
33894: PUSH
33895: LD_INT 1
33897: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33898: LD_VAR 0 6
33902: PUSH
33903: LD_VAR 0 13
33907: PPUSH
33908: CALL_OW 247
33912: PUSH
33913: LD_INT 2
33915: EQUAL
33916: AND
33917: PUSH
33918: LD_VAR 0 13
33922: PPUSH
33923: CALL_OW 263
33927: PUSH
33928: LD_INT 1
33930: EQUAL
33931: AND
33932: IFFALSE 34096
// begin if IsDrivenBy ( tmp ) then
33934: LD_VAR 0 13
33938: PPUSH
33939: CALL_OW 311
33943: IFFALSE 33947
// continue ;
33945: GO 33746
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33947: LD_VAR 0 6
33951: PPUSH
33952: LD_INT 3
33954: PUSH
33955: LD_INT 60
33957: PUSH
33958: EMPTY
33959: LIST
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 3
33967: PUSH
33968: LD_INT 55
33970: PUSH
33971: EMPTY
33972: LIST
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PPUSH
33982: CALL_OW 72
33986: IFFALSE 34094
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33988: LD_ADDR_VAR 0 18
33992: PUSH
33993: LD_VAR 0 6
33997: PPUSH
33998: LD_INT 3
34000: PUSH
34001: LD_INT 60
34003: PUSH
34004: EMPTY
34005: LIST
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 3
34013: PUSH
34014: LD_INT 55
34016: PUSH
34017: EMPTY
34018: LIST
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PPUSH
34028: CALL_OW 72
34032: PUSH
34033: LD_INT 1
34035: ARRAY
34036: ST_TO_ADDR
// if IsInUnit ( driver ) then
34037: LD_VAR 0 18
34041: PPUSH
34042: CALL_OW 310
34046: IFFALSE 34057
// ComExit ( driver ) ;
34048: LD_VAR 0 18
34052: PPUSH
34053: CALL 59419 0 1
// AddComEnterUnit ( driver , tmp ) ;
34057: LD_VAR 0 18
34061: PPUSH
34062: LD_VAR 0 13
34066: PPUSH
34067: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34071: LD_VAR 0 18
34075: PPUSH
34076: LD_VAR 0 7
34080: PPUSH
34081: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34085: LD_VAR 0 18
34089: PPUSH
34090: CALL_OW 181
// end ; continue ;
34094: GO 33746
// end ; if not cleaners or not tmp in cleaners then
34096: LD_VAR 0 6
34100: NOT
34101: PUSH
34102: LD_VAR 0 13
34106: PUSH
34107: LD_VAR 0 6
34111: IN
34112: NOT
34113: OR
34114: IFFALSE 34421
// begin if dep then
34116: LD_VAR 0 17
34120: IFFALSE 34256
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34122: LD_ADDR_VAR 0 16
34126: PUSH
34127: LD_VAR 0 17
34131: PUSH
34132: LD_INT 1
34134: ARRAY
34135: PPUSH
34136: CALL_OW 250
34140: PPUSH
34141: LD_VAR 0 17
34145: PUSH
34146: LD_INT 1
34148: ARRAY
34149: PPUSH
34150: CALL_OW 254
34154: PPUSH
34155: LD_INT 5
34157: PPUSH
34158: CALL_OW 272
34162: PUSH
34163: LD_VAR 0 17
34167: PUSH
34168: LD_INT 1
34170: ARRAY
34171: PPUSH
34172: CALL_OW 251
34176: PPUSH
34177: LD_VAR 0 17
34181: PUSH
34182: LD_INT 1
34184: ARRAY
34185: PPUSH
34186: CALL_OW 254
34190: PPUSH
34191: LD_INT 5
34193: PPUSH
34194: CALL_OW 273
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34203: LD_VAR 0 16
34207: PUSH
34208: LD_INT 1
34210: ARRAY
34211: PPUSH
34212: LD_VAR 0 16
34216: PUSH
34217: LD_INT 2
34219: ARRAY
34220: PPUSH
34221: CALL_OW 488
34225: IFFALSE 34256
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34227: LD_VAR 0 13
34231: PPUSH
34232: LD_VAR 0 16
34236: PUSH
34237: LD_INT 1
34239: ARRAY
34240: PPUSH
34241: LD_VAR 0 16
34245: PUSH
34246: LD_INT 2
34248: ARRAY
34249: PPUSH
34250: CALL_OW 111
// continue ;
34254: GO 33746
// end ; end ; r := GetDir ( tmp ) ;
34256: LD_ADDR_VAR 0 15
34260: PUSH
34261: LD_VAR 0 13
34265: PPUSH
34266: CALL_OW 254
34270: ST_TO_ADDR
// if r = 5 then
34271: LD_VAR 0 15
34275: PUSH
34276: LD_INT 5
34278: EQUAL
34279: IFFALSE 34289
// r := 0 ;
34281: LD_ADDR_VAR 0 15
34285: PUSH
34286: LD_INT 0
34288: ST_TO_ADDR
// for j = r to 5 do
34289: LD_ADDR_VAR 0 10
34293: PUSH
34294: DOUBLE
34295: LD_VAR 0 15
34299: DEC
34300: ST_TO_ADDR
34301: LD_INT 5
34303: PUSH
34304: FOR_TO
34305: IFFALSE 34419
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34307: LD_ADDR_VAR 0 11
34311: PUSH
34312: LD_VAR 0 13
34316: PPUSH
34317: CALL_OW 250
34321: PPUSH
34322: LD_VAR 0 10
34326: PPUSH
34327: LD_INT 2
34329: PPUSH
34330: CALL_OW 272
34334: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34335: LD_ADDR_VAR 0 12
34339: PUSH
34340: LD_VAR 0 13
34344: PPUSH
34345: CALL_OW 251
34349: PPUSH
34350: LD_VAR 0 10
34354: PPUSH
34355: LD_INT 2
34357: PPUSH
34358: CALL_OW 273
34362: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34363: LD_VAR 0 11
34367: PPUSH
34368: LD_VAR 0 12
34372: PPUSH
34373: CALL_OW 488
34377: PUSH
34378: LD_VAR 0 11
34382: PPUSH
34383: LD_VAR 0 12
34387: PPUSH
34388: CALL_OW 428
34392: NOT
34393: AND
34394: IFFALSE 34417
// begin ComMoveXY ( tmp , _x , _y ) ;
34396: LD_VAR 0 13
34400: PPUSH
34401: LD_VAR 0 11
34405: PPUSH
34406: LD_VAR 0 12
34410: PPUSH
34411: CALL_OW 111
// break ;
34415: GO 34419
// end ; end ;
34417: GO 34304
34419: POP
34420: POP
// end ; end ;
34421: GO 33746
34423: POP
34424: POP
// end ;
34425: LD_VAR 0 8
34429: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34430: LD_INT 0
34432: PPUSH
// result := true ;
34433: LD_ADDR_VAR 0 3
34437: PUSH
34438: LD_INT 1
34440: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34441: LD_VAR 0 2
34445: PUSH
34446: LD_INT 24
34448: DOUBLE
34449: EQUAL
34450: IFTRUE 34460
34452: LD_INT 33
34454: DOUBLE
34455: EQUAL
34456: IFTRUE 34460
34458: GO 34485
34460: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34461: LD_ADDR_VAR 0 3
34465: PUSH
34466: LD_INT 32
34468: PPUSH
34469: LD_VAR 0 1
34473: PPUSH
34474: CALL_OW 321
34478: PUSH
34479: LD_INT 2
34481: EQUAL
34482: ST_TO_ADDR
34483: GO 34801
34485: LD_INT 20
34487: DOUBLE
34488: EQUAL
34489: IFTRUE 34493
34491: GO 34518
34493: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34494: LD_ADDR_VAR 0 3
34498: PUSH
34499: LD_INT 6
34501: PPUSH
34502: LD_VAR 0 1
34506: PPUSH
34507: CALL_OW 321
34511: PUSH
34512: LD_INT 2
34514: EQUAL
34515: ST_TO_ADDR
34516: GO 34801
34518: LD_INT 22
34520: DOUBLE
34521: EQUAL
34522: IFTRUE 34532
34524: LD_INT 36
34526: DOUBLE
34527: EQUAL
34528: IFTRUE 34532
34530: GO 34557
34532: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34533: LD_ADDR_VAR 0 3
34537: PUSH
34538: LD_INT 15
34540: PPUSH
34541: LD_VAR 0 1
34545: PPUSH
34546: CALL_OW 321
34550: PUSH
34551: LD_INT 2
34553: EQUAL
34554: ST_TO_ADDR
34555: GO 34801
34557: LD_INT 30
34559: DOUBLE
34560: EQUAL
34561: IFTRUE 34565
34563: GO 34590
34565: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34566: LD_ADDR_VAR 0 3
34570: PUSH
34571: LD_INT 20
34573: PPUSH
34574: LD_VAR 0 1
34578: PPUSH
34579: CALL_OW 321
34583: PUSH
34584: LD_INT 2
34586: EQUAL
34587: ST_TO_ADDR
34588: GO 34801
34590: LD_INT 28
34592: DOUBLE
34593: EQUAL
34594: IFTRUE 34604
34596: LD_INT 21
34598: DOUBLE
34599: EQUAL
34600: IFTRUE 34604
34602: GO 34629
34604: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34605: LD_ADDR_VAR 0 3
34609: PUSH
34610: LD_INT 21
34612: PPUSH
34613: LD_VAR 0 1
34617: PPUSH
34618: CALL_OW 321
34622: PUSH
34623: LD_INT 2
34625: EQUAL
34626: ST_TO_ADDR
34627: GO 34801
34629: LD_INT 16
34631: DOUBLE
34632: EQUAL
34633: IFTRUE 34637
34635: GO 34662
34637: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34638: LD_ADDR_VAR 0 3
34642: PUSH
34643: LD_INT 84
34645: PPUSH
34646: LD_VAR 0 1
34650: PPUSH
34651: CALL_OW 321
34655: PUSH
34656: LD_INT 2
34658: EQUAL
34659: ST_TO_ADDR
34660: GO 34801
34662: LD_INT 19
34664: DOUBLE
34665: EQUAL
34666: IFTRUE 34676
34668: LD_INT 23
34670: DOUBLE
34671: EQUAL
34672: IFTRUE 34676
34674: GO 34701
34676: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34677: LD_ADDR_VAR 0 3
34681: PUSH
34682: LD_INT 83
34684: PPUSH
34685: LD_VAR 0 1
34689: PPUSH
34690: CALL_OW 321
34694: PUSH
34695: LD_INT 2
34697: EQUAL
34698: ST_TO_ADDR
34699: GO 34801
34701: LD_INT 17
34703: DOUBLE
34704: EQUAL
34705: IFTRUE 34709
34707: GO 34734
34709: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34710: LD_ADDR_VAR 0 3
34714: PUSH
34715: LD_INT 39
34717: PPUSH
34718: LD_VAR 0 1
34722: PPUSH
34723: CALL_OW 321
34727: PUSH
34728: LD_INT 2
34730: EQUAL
34731: ST_TO_ADDR
34732: GO 34801
34734: LD_INT 18
34736: DOUBLE
34737: EQUAL
34738: IFTRUE 34742
34740: GO 34767
34742: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34743: LD_ADDR_VAR 0 3
34747: PUSH
34748: LD_INT 40
34750: PPUSH
34751: LD_VAR 0 1
34755: PPUSH
34756: CALL_OW 321
34760: PUSH
34761: LD_INT 2
34763: EQUAL
34764: ST_TO_ADDR
34765: GO 34801
34767: LD_INT 27
34769: DOUBLE
34770: EQUAL
34771: IFTRUE 34775
34773: GO 34800
34775: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34776: LD_ADDR_VAR 0 3
34780: PUSH
34781: LD_INT 35
34783: PPUSH
34784: LD_VAR 0 1
34788: PPUSH
34789: CALL_OW 321
34793: PUSH
34794: LD_INT 2
34796: EQUAL
34797: ST_TO_ADDR
34798: GO 34801
34800: POP
// end ;
34801: LD_VAR 0 3
34805: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34806: LD_INT 0
34808: PPUSH
34809: PPUSH
34810: PPUSH
34811: PPUSH
34812: PPUSH
34813: PPUSH
34814: PPUSH
34815: PPUSH
34816: PPUSH
34817: PPUSH
34818: PPUSH
// result := false ;
34819: LD_ADDR_VAR 0 6
34823: PUSH
34824: LD_INT 0
34826: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34827: LD_VAR 0 1
34831: NOT
34832: PUSH
34833: LD_VAR 0 1
34837: PPUSH
34838: CALL_OW 266
34842: PUSH
34843: LD_INT 0
34845: PUSH
34846: LD_INT 1
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: IN
34853: NOT
34854: OR
34855: PUSH
34856: LD_VAR 0 2
34860: NOT
34861: OR
34862: PUSH
34863: LD_VAR 0 5
34867: PUSH
34868: LD_INT 0
34870: PUSH
34871: LD_INT 1
34873: PUSH
34874: LD_INT 2
34876: PUSH
34877: LD_INT 3
34879: PUSH
34880: LD_INT 4
34882: PUSH
34883: LD_INT 5
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: IN
34894: NOT
34895: OR
34896: PUSH
34897: LD_VAR 0 3
34901: PPUSH
34902: LD_VAR 0 4
34906: PPUSH
34907: CALL_OW 488
34911: NOT
34912: OR
34913: IFFALSE 34917
// exit ;
34915: GO 35653
// side := GetSide ( depot ) ;
34917: LD_ADDR_VAR 0 9
34921: PUSH
34922: LD_VAR 0 1
34926: PPUSH
34927: CALL_OW 255
34931: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
34932: LD_VAR 0 9
34936: PPUSH
34937: LD_VAR 0 2
34941: PPUSH
34942: CALL 34430 0 2
34946: NOT
34947: IFFALSE 34951
// exit ;
34949: GO 35653
// pom := GetBase ( depot ) ;
34951: LD_ADDR_VAR 0 10
34955: PUSH
34956: LD_VAR 0 1
34960: PPUSH
34961: CALL_OW 274
34965: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34966: LD_ADDR_VAR 0 11
34970: PUSH
34971: LD_VAR 0 2
34975: PPUSH
34976: LD_VAR 0 1
34980: PPUSH
34981: CALL_OW 248
34985: PPUSH
34986: CALL_OW 450
34990: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34991: LD_VAR 0 10
34995: PPUSH
34996: LD_INT 1
34998: PPUSH
34999: CALL_OW 275
35003: PUSH
35004: LD_VAR 0 11
35008: PUSH
35009: LD_INT 1
35011: ARRAY
35012: GREATEREQUAL
35013: PUSH
35014: LD_VAR 0 10
35018: PPUSH
35019: LD_INT 2
35021: PPUSH
35022: CALL_OW 275
35026: PUSH
35027: LD_VAR 0 11
35031: PUSH
35032: LD_INT 2
35034: ARRAY
35035: GREATEREQUAL
35036: AND
35037: PUSH
35038: LD_VAR 0 10
35042: PPUSH
35043: LD_INT 3
35045: PPUSH
35046: CALL_OW 275
35050: PUSH
35051: LD_VAR 0 11
35055: PUSH
35056: LD_INT 3
35058: ARRAY
35059: GREATEREQUAL
35060: AND
35061: NOT
35062: IFFALSE 35066
// exit ;
35064: GO 35653
// if GetBType ( depot ) = b_depot then
35066: LD_VAR 0 1
35070: PPUSH
35071: CALL_OW 266
35075: PUSH
35076: LD_INT 0
35078: EQUAL
35079: IFFALSE 35091
// dist := 28 else
35081: LD_ADDR_VAR 0 14
35085: PUSH
35086: LD_INT 28
35088: ST_TO_ADDR
35089: GO 35099
// dist := 36 ;
35091: LD_ADDR_VAR 0 14
35095: PUSH
35096: LD_INT 36
35098: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35099: LD_VAR 0 1
35103: PPUSH
35104: LD_VAR 0 3
35108: PPUSH
35109: LD_VAR 0 4
35113: PPUSH
35114: CALL_OW 297
35118: PUSH
35119: LD_VAR 0 14
35123: GREATER
35124: IFFALSE 35128
// exit ;
35126: GO 35653
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35128: LD_ADDR_VAR 0 12
35132: PUSH
35133: LD_VAR 0 2
35137: PPUSH
35138: LD_VAR 0 3
35142: PPUSH
35143: LD_VAR 0 4
35147: PPUSH
35148: LD_VAR 0 5
35152: PPUSH
35153: LD_VAR 0 1
35157: PPUSH
35158: CALL_OW 248
35162: PPUSH
35163: LD_INT 0
35165: PPUSH
35166: CALL 35658 0 6
35170: ST_TO_ADDR
// if not hexes then
35171: LD_VAR 0 12
35175: NOT
35176: IFFALSE 35180
// exit ;
35178: GO 35653
// hex := GetHexInfo ( x , y ) ;
35180: LD_ADDR_VAR 0 15
35184: PUSH
35185: LD_VAR 0 3
35189: PPUSH
35190: LD_VAR 0 4
35194: PPUSH
35195: CALL_OW 546
35199: ST_TO_ADDR
// if hex [ 1 ] then
35200: LD_VAR 0 15
35204: PUSH
35205: LD_INT 1
35207: ARRAY
35208: IFFALSE 35212
// exit ;
35210: GO 35653
// height := hex [ 2 ] ;
35212: LD_ADDR_VAR 0 13
35216: PUSH
35217: LD_VAR 0 15
35221: PUSH
35222: LD_INT 2
35224: ARRAY
35225: ST_TO_ADDR
// for i = 1 to hexes do
35226: LD_ADDR_VAR 0 7
35230: PUSH
35231: DOUBLE
35232: LD_INT 1
35234: DEC
35235: ST_TO_ADDR
35236: LD_VAR 0 12
35240: PUSH
35241: FOR_TO
35242: IFFALSE 35572
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35244: LD_VAR 0 12
35248: PUSH
35249: LD_VAR 0 7
35253: ARRAY
35254: PUSH
35255: LD_INT 1
35257: ARRAY
35258: PPUSH
35259: LD_VAR 0 12
35263: PUSH
35264: LD_VAR 0 7
35268: ARRAY
35269: PUSH
35270: LD_INT 2
35272: ARRAY
35273: PPUSH
35274: CALL_OW 488
35278: NOT
35279: PUSH
35280: LD_VAR 0 12
35284: PUSH
35285: LD_VAR 0 7
35289: ARRAY
35290: PUSH
35291: LD_INT 1
35293: ARRAY
35294: PPUSH
35295: LD_VAR 0 12
35299: PUSH
35300: LD_VAR 0 7
35304: ARRAY
35305: PUSH
35306: LD_INT 2
35308: ARRAY
35309: PPUSH
35310: CALL_OW 428
35314: PUSH
35315: LD_INT 0
35317: GREATER
35318: OR
35319: PUSH
35320: LD_VAR 0 12
35324: PUSH
35325: LD_VAR 0 7
35329: ARRAY
35330: PUSH
35331: LD_INT 1
35333: ARRAY
35334: PPUSH
35335: LD_VAR 0 12
35339: PUSH
35340: LD_VAR 0 7
35344: ARRAY
35345: PUSH
35346: LD_INT 2
35348: ARRAY
35349: PPUSH
35350: CALL_OW 351
35354: OR
35355: IFFALSE 35361
// exit ;
35357: POP
35358: POP
35359: GO 35653
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35361: LD_ADDR_VAR 0 8
35365: PUSH
35366: LD_VAR 0 12
35370: PUSH
35371: LD_VAR 0 7
35375: ARRAY
35376: PUSH
35377: LD_INT 1
35379: ARRAY
35380: PPUSH
35381: LD_VAR 0 12
35385: PUSH
35386: LD_VAR 0 7
35390: ARRAY
35391: PUSH
35392: LD_INT 2
35394: ARRAY
35395: PPUSH
35396: CALL_OW 546
35400: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35401: LD_VAR 0 8
35405: PUSH
35406: LD_INT 1
35408: ARRAY
35409: PUSH
35410: LD_VAR 0 8
35414: PUSH
35415: LD_INT 2
35417: ARRAY
35418: PUSH
35419: LD_VAR 0 13
35423: PUSH
35424: LD_INT 2
35426: PLUS
35427: GREATER
35428: OR
35429: PUSH
35430: LD_VAR 0 8
35434: PUSH
35435: LD_INT 2
35437: ARRAY
35438: PUSH
35439: LD_VAR 0 13
35443: PUSH
35444: LD_INT 2
35446: MINUS
35447: LESS
35448: OR
35449: PUSH
35450: LD_VAR 0 8
35454: PUSH
35455: LD_INT 3
35457: ARRAY
35458: PUSH
35459: LD_INT 0
35461: PUSH
35462: LD_INT 8
35464: PUSH
35465: LD_INT 9
35467: PUSH
35468: LD_INT 10
35470: PUSH
35471: LD_INT 11
35473: PUSH
35474: LD_INT 12
35476: PUSH
35477: LD_INT 13
35479: PUSH
35480: LD_INT 16
35482: PUSH
35483: LD_INT 17
35485: PUSH
35486: LD_INT 18
35488: PUSH
35489: LD_INT 19
35491: PUSH
35492: LD_INT 20
35494: PUSH
35495: LD_INT 21
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: IN
35513: NOT
35514: OR
35515: PUSH
35516: LD_VAR 0 8
35520: PUSH
35521: LD_INT 5
35523: ARRAY
35524: NOT
35525: OR
35526: PUSH
35527: LD_VAR 0 8
35531: PUSH
35532: LD_INT 6
35534: ARRAY
35535: PUSH
35536: LD_INT 1
35538: PUSH
35539: LD_INT 2
35541: PUSH
35542: LD_INT 7
35544: PUSH
35545: LD_INT 9
35547: PUSH
35548: LD_INT 10
35550: PUSH
35551: LD_INT 11
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: IN
35562: NOT
35563: OR
35564: IFFALSE 35570
// exit ;
35566: POP
35567: POP
35568: GO 35653
// end ;
35570: GO 35241
35572: POP
35573: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35574: LD_VAR 0 9
35578: PPUSH
35579: LD_VAR 0 3
35583: PPUSH
35584: LD_VAR 0 4
35588: PPUSH
35589: LD_INT 20
35591: PPUSH
35592: CALL 27605 0 4
35596: PUSH
35597: LD_INT 4
35599: ARRAY
35600: IFFALSE 35604
// exit ;
35602: GO 35653
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35604: LD_VAR 0 2
35608: PUSH
35609: LD_INT 29
35611: PUSH
35612: LD_INT 30
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: IN
35619: PUSH
35620: LD_VAR 0 3
35624: PPUSH
35625: LD_VAR 0 4
35629: PPUSH
35630: LD_VAR 0 9
35634: PPUSH
35635: CALL_OW 440
35639: NOT
35640: AND
35641: IFFALSE 35645
// exit ;
35643: GO 35653
// result := true ;
35645: LD_ADDR_VAR 0 6
35649: PUSH
35650: LD_INT 1
35652: ST_TO_ADDR
// end ;
35653: LD_VAR 0 6
35657: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35658: LD_INT 0
35660: PPUSH
35661: PPUSH
35662: PPUSH
35663: PPUSH
35664: PPUSH
35665: PPUSH
35666: PPUSH
35667: PPUSH
35668: PPUSH
35669: PPUSH
35670: PPUSH
35671: PPUSH
35672: PPUSH
35673: PPUSH
35674: PPUSH
35675: PPUSH
35676: PPUSH
35677: PPUSH
35678: PPUSH
35679: PPUSH
35680: PPUSH
35681: PPUSH
35682: PPUSH
35683: PPUSH
35684: PPUSH
35685: PPUSH
35686: PPUSH
35687: PPUSH
35688: PPUSH
35689: PPUSH
35690: PPUSH
35691: PPUSH
35692: PPUSH
35693: PPUSH
35694: PPUSH
35695: PPUSH
35696: PPUSH
35697: PPUSH
35698: PPUSH
35699: PPUSH
35700: PPUSH
35701: PPUSH
35702: PPUSH
35703: PPUSH
35704: PPUSH
35705: PPUSH
35706: PPUSH
35707: PPUSH
35708: PPUSH
35709: PPUSH
35710: PPUSH
35711: PPUSH
35712: PPUSH
35713: PPUSH
35714: PPUSH
35715: PPUSH
35716: PPUSH
35717: PPUSH
// result = [ ] ;
35718: LD_ADDR_VAR 0 7
35722: PUSH
35723: EMPTY
35724: ST_TO_ADDR
// temp_list = [ ] ;
35725: LD_ADDR_VAR 0 9
35729: PUSH
35730: EMPTY
35731: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35732: LD_VAR 0 4
35736: PUSH
35737: LD_INT 0
35739: PUSH
35740: LD_INT 1
35742: PUSH
35743: LD_INT 2
35745: PUSH
35746: LD_INT 3
35748: PUSH
35749: LD_INT 4
35751: PUSH
35752: LD_INT 5
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: IN
35763: NOT
35764: PUSH
35765: LD_VAR 0 1
35769: PUSH
35770: LD_INT 0
35772: PUSH
35773: LD_INT 1
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: IN
35780: PUSH
35781: LD_VAR 0 5
35785: PUSH
35786: LD_INT 1
35788: PUSH
35789: LD_INT 2
35791: PUSH
35792: LD_INT 3
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: LIST
35799: IN
35800: NOT
35801: AND
35802: OR
35803: IFFALSE 35807
// exit ;
35805: GO 54198
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35807: LD_VAR 0 1
35811: PUSH
35812: LD_INT 6
35814: PUSH
35815: LD_INT 7
35817: PUSH
35818: LD_INT 8
35820: PUSH
35821: LD_INT 13
35823: PUSH
35824: LD_INT 12
35826: PUSH
35827: LD_INT 15
35829: PUSH
35830: LD_INT 11
35832: PUSH
35833: LD_INT 14
35835: PUSH
35836: LD_INT 10
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: IN
35850: IFFALSE 35860
// btype = b_lab ;
35852: LD_ADDR_VAR 0 1
35856: PUSH
35857: LD_INT 6
35859: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35860: LD_VAR 0 6
35864: PUSH
35865: LD_INT 0
35867: PUSH
35868: LD_INT 1
35870: PUSH
35871: LD_INT 2
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: LIST
35878: IN
35879: NOT
35880: PUSH
35881: LD_VAR 0 1
35885: PUSH
35886: LD_INT 0
35888: PUSH
35889: LD_INT 1
35891: PUSH
35892: LD_INT 2
35894: PUSH
35895: LD_INT 3
35897: PUSH
35898: LD_INT 6
35900: PUSH
35901: LD_INT 36
35903: PUSH
35904: LD_INT 4
35906: PUSH
35907: LD_INT 5
35909: PUSH
35910: LD_INT 31
35912: PUSH
35913: LD_INT 32
35915: PUSH
35916: LD_INT 33
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: IN
35932: NOT
35933: PUSH
35934: LD_VAR 0 6
35938: PUSH
35939: LD_INT 1
35941: EQUAL
35942: AND
35943: OR
35944: PUSH
35945: LD_VAR 0 1
35949: PUSH
35950: LD_INT 2
35952: PUSH
35953: LD_INT 3
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: IN
35960: NOT
35961: PUSH
35962: LD_VAR 0 6
35966: PUSH
35967: LD_INT 2
35969: EQUAL
35970: AND
35971: OR
35972: IFFALSE 35982
// mode = 0 ;
35974: LD_ADDR_VAR 0 6
35978: PUSH
35979: LD_INT 0
35981: ST_TO_ADDR
// case mode of 0 :
35982: LD_VAR 0 6
35986: PUSH
35987: LD_INT 0
35989: DOUBLE
35990: EQUAL
35991: IFTRUE 35995
35993: GO 47448
35995: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35996: LD_ADDR_VAR 0 11
36000: PUSH
36001: LD_INT 0
36003: PUSH
36004: LD_INT 0
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 0
36013: PUSH
36014: LD_INT 1
36016: NEG
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 1
36024: PUSH
36025: LD_INT 0
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 1
36034: PUSH
36035: LD_INT 1
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 0
36044: PUSH
36045: LD_INT 1
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 1
36054: NEG
36055: PUSH
36056: LD_INT 0
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 1
36065: NEG
36066: PUSH
36067: LD_INT 1
36069: NEG
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 1
36077: NEG
36078: PUSH
36079: LD_INT 2
36081: NEG
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 0
36089: PUSH
36090: LD_INT 2
36092: NEG
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 1
36100: PUSH
36101: LD_INT 1
36103: NEG
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 1
36111: PUSH
36112: LD_INT 2
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 0
36121: PUSH
36122: LD_INT 2
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 1
36131: NEG
36132: PUSH
36133: LD_INT 1
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 1
36142: PUSH
36143: LD_INT 3
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 0
36152: PUSH
36153: LD_INT 3
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 1
36162: NEG
36163: PUSH
36164: LD_INT 2
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36189: LD_ADDR_VAR 0 12
36193: PUSH
36194: LD_INT 0
36196: PUSH
36197: LD_INT 0
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 0
36206: PUSH
36207: LD_INT 1
36209: NEG
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 1
36217: PUSH
36218: LD_INT 0
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 1
36227: PUSH
36228: LD_INT 1
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 0
36237: PUSH
36238: LD_INT 1
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 1
36247: NEG
36248: PUSH
36249: LD_INT 0
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 1
36258: NEG
36259: PUSH
36260: LD_INT 1
36262: NEG
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 1
36270: PUSH
36271: LD_INT 1
36273: NEG
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 2
36281: PUSH
36282: LD_INT 0
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 2
36291: PUSH
36292: LD_INT 1
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 1
36301: NEG
36302: PUSH
36303: LD_INT 1
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 2
36312: NEG
36313: PUSH
36314: LD_INT 0
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 2
36323: NEG
36324: PUSH
36325: LD_INT 1
36327: NEG
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 2
36335: NEG
36336: PUSH
36337: LD_INT 1
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 3
36346: NEG
36347: PUSH
36348: LD_INT 0
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 3
36357: NEG
36358: PUSH
36359: LD_INT 1
36361: NEG
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36385: LD_ADDR_VAR 0 13
36389: PUSH
36390: LD_INT 0
36392: PUSH
36393: LD_INT 0
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 0
36402: PUSH
36403: LD_INT 1
36405: NEG
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 1
36413: PUSH
36414: LD_INT 0
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 1
36423: PUSH
36424: LD_INT 1
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 0
36433: PUSH
36434: LD_INT 1
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 1
36443: NEG
36444: PUSH
36445: LD_INT 0
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 1
36454: NEG
36455: PUSH
36456: LD_INT 1
36458: NEG
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 1
36466: NEG
36467: PUSH
36468: LD_INT 2
36470: NEG
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 2
36478: PUSH
36479: LD_INT 1
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 2
36488: PUSH
36489: LD_INT 2
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 1
36498: PUSH
36499: LD_INT 2
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 2
36508: NEG
36509: PUSH
36510: LD_INT 1
36512: NEG
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 2
36520: NEG
36521: PUSH
36522: LD_INT 2
36524: NEG
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 2
36532: NEG
36533: PUSH
36534: LD_INT 3
36536: NEG
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 3
36544: NEG
36545: PUSH
36546: LD_INT 2
36548: NEG
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 3
36556: NEG
36557: PUSH
36558: LD_INT 3
36560: NEG
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36584: LD_ADDR_VAR 0 14
36588: PUSH
36589: LD_INT 0
36591: PUSH
36592: LD_INT 0
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 0
36601: PUSH
36602: LD_INT 1
36604: NEG
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 1
36612: PUSH
36613: LD_INT 0
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 1
36622: PUSH
36623: LD_INT 1
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 0
36632: PUSH
36633: LD_INT 1
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 1
36642: NEG
36643: PUSH
36644: LD_INT 0
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 1
36653: NEG
36654: PUSH
36655: LD_INT 1
36657: NEG
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 1
36665: NEG
36666: PUSH
36667: LD_INT 2
36669: NEG
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 0
36677: PUSH
36678: LD_INT 2
36680: NEG
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PUSH
36686: LD_INT 1
36688: PUSH
36689: LD_INT 1
36691: NEG
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 1
36699: PUSH
36700: LD_INT 2
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 0
36709: PUSH
36710: LD_INT 2
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 1
36719: NEG
36720: PUSH
36721: LD_INT 1
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 1
36730: NEG
36731: PUSH
36732: LD_INT 3
36734: NEG
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: LD_INT 3
36745: NEG
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 1
36753: PUSH
36754: LD_INT 2
36756: NEG
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36780: LD_ADDR_VAR 0 15
36784: PUSH
36785: LD_INT 0
36787: PUSH
36788: LD_INT 0
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 0
36797: PUSH
36798: LD_INT 1
36800: NEG
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 1
36808: PUSH
36809: LD_INT 0
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 1
36818: PUSH
36819: LD_INT 1
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 0
36828: PUSH
36829: LD_INT 1
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: LD_INT 0
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 1
36849: NEG
36850: PUSH
36851: LD_INT 1
36853: NEG
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 1
36861: PUSH
36862: LD_INT 1
36864: NEG
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 2
36872: PUSH
36873: LD_INT 0
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 2
36882: PUSH
36883: LD_INT 1
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 1
36892: NEG
36893: PUSH
36894: LD_INT 1
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 2
36903: NEG
36904: PUSH
36905: LD_INT 0
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 2
36914: NEG
36915: PUSH
36916: LD_INT 1
36918: NEG
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 2
36926: PUSH
36927: LD_INT 1
36929: NEG
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 3
36937: PUSH
36938: LD_INT 0
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 3
36947: PUSH
36948: LD_INT 1
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36973: LD_ADDR_VAR 0 16
36977: PUSH
36978: LD_INT 0
36980: PUSH
36981: LD_INT 0
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 0
36990: PUSH
36991: LD_INT 1
36993: NEG
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 1
37001: PUSH
37002: LD_INT 0
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 1
37011: PUSH
37012: LD_INT 1
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 0
37021: PUSH
37022: LD_INT 1
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 1
37031: NEG
37032: PUSH
37033: LD_INT 0
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 1
37042: NEG
37043: PUSH
37044: LD_INT 1
37046: NEG
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 1
37054: NEG
37055: PUSH
37056: LD_INT 2
37058: NEG
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 2
37066: PUSH
37067: LD_INT 1
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 2
37076: PUSH
37077: LD_INT 2
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 1
37086: PUSH
37087: LD_INT 2
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 2
37096: NEG
37097: PUSH
37098: LD_INT 1
37100: NEG
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 2
37108: NEG
37109: PUSH
37110: LD_INT 2
37112: NEG
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 3
37120: PUSH
37121: LD_INT 2
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 3
37130: PUSH
37131: LD_INT 3
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 2
37140: PUSH
37141: LD_INT 3
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37166: LD_ADDR_VAR 0 17
37170: PUSH
37171: LD_INT 0
37173: PUSH
37174: LD_INT 0
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 0
37183: PUSH
37184: LD_INT 1
37186: NEG
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 1
37194: PUSH
37195: LD_INT 0
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 1
37204: PUSH
37205: LD_INT 1
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 0
37214: PUSH
37215: LD_INT 1
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 1
37224: NEG
37225: PUSH
37226: LD_INT 0
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 1
37235: NEG
37236: PUSH
37237: LD_INT 1
37239: NEG
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 1
37247: NEG
37248: PUSH
37249: LD_INT 2
37251: NEG
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 0
37259: PUSH
37260: LD_INT 2
37262: NEG
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 1
37270: PUSH
37271: LD_INT 1
37273: NEG
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 2
37281: PUSH
37282: LD_INT 0
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: LD_INT 2
37291: PUSH
37292: LD_INT 1
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 2
37301: PUSH
37302: LD_INT 2
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 1
37311: PUSH
37312: LD_INT 2
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 0
37321: PUSH
37322: LD_INT 2
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 1
37331: NEG
37332: PUSH
37333: LD_INT 1
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 2
37342: NEG
37343: PUSH
37344: LD_INT 0
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 2
37353: NEG
37354: PUSH
37355: LD_INT 1
37357: NEG
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 2
37365: NEG
37366: PUSH
37367: LD_INT 2
37369: NEG
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37396: LD_ADDR_VAR 0 18
37400: PUSH
37401: LD_INT 0
37403: PUSH
37404: LD_INT 0
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 0
37413: PUSH
37414: LD_INT 1
37416: NEG
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 1
37424: PUSH
37425: LD_INT 0
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 1
37434: PUSH
37435: LD_INT 1
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 0
37444: PUSH
37445: LD_INT 1
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 1
37454: NEG
37455: PUSH
37456: LD_INT 0
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 1
37465: NEG
37466: PUSH
37467: LD_INT 1
37469: NEG
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 1
37477: NEG
37478: PUSH
37479: LD_INT 2
37481: NEG
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 0
37489: PUSH
37490: LD_INT 2
37492: NEG
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 1
37500: PUSH
37501: LD_INT 1
37503: NEG
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 2
37511: PUSH
37512: LD_INT 0
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 2
37521: PUSH
37522: LD_INT 1
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 2
37531: PUSH
37532: LD_INT 2
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 1
37541: PUSH
37542: LD_INT 2
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 0
37551: PUSH
37552: LD_INT 2
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 1
37561: NEG
37562: PUSH
37563: LD_INT 1
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 2
37572: NEG
37573: PUSH
37574: LD_INT 0
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 2
37583: NEG
37584: PUSH
37585: LD_INT 1
37587: NEG
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 2
37595: NEG
37596: PUSH
37597: LD_INT 2
37599: NEG
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37626: LD_ADDR_VAR 0 19
37630: PUSH
37631: LD_INT 0
37633: PUSH
37634: LD_INT 0
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 0
37643: PUSH
37644: LD_INT 1
37646: NEG
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 1
37654: PUSH
37655: LD_INT 0
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 1
37664: PUSH
37665: LD_INT 1
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 0
37674: PUSH
37675: LD_INT 1
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 1
37684: NEG
37685: PUSH
37686: LD_INT 0
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 1
37695: NEG
37696: PUSH
37697: LD_INT 1
37699: NEG
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 1
37707: NEG
37708: PUSH
37709: LD_INT 2
37711: NEG
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 0
37719: PUSH
37720: LD_INT 2
37722: NEG
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 1
37730: PUSH
37731: LD_INT 1
37733: NEG
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 2
37741: PUSH
37742: LD_INT 0
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 2
37751: PUSH
37752: LD_INT 1
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 2
37761: PUSH
37762: LD_INT 2
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 1
37771: PUSH
37772: LD_INT 2
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 0
37781: PUSH
37782: LD_INT 2
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 1
37791: NEG
37792: PUSH
37793: LD_INT 1
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 2
37802: NEG
37803: PUSH
37804: LD_INT 0
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 2
37813: NEG
37814: PUSH
37815: LD_INT 1
37817: NEG
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 2
37825: NEG
37826: PUSH
37827: LD_INT 2
37829: NEG
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37856: LD_ADDR_VAR 0 20
37860: PUSH
37861: LD_INT 0
37863: PUSH
37864: LD_INT 0
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 0
37873: PUSH
37874: LD_INT 1
37876: NEG
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 1
37884: PUSH
37885: LD_INT 0
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 1
37894: PUSH
37895: LD_INT 1
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 0
37904: PUSH
37905: LD_INT 1
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 1
37914: NEG
37915: PUSH
37916: LD_INT 0
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 1
37925: NEG
37926: PUSH
37927: LD_INT 1
37929: NEG
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PUSH
37935: LD_INT 1
37937: NEG
37938: PUSH
37939: LD_INT 2
37941: NEG
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 0
37949: PUSH
37950: LD_INT 2
37952: NEG
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 1
37960: PUSH
37961: LD_INT 1
37963: NEG
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 2
37971: PUSH
37972: LD_INT 0
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 2
37981: PUSH
37982: LD_INT 1
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 2
37991: PUSH
37992: LD_INT 2
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 1
38001: PUSH
38002: LD_INT 2
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 0
38011: PUSH
38012: LD_INT 2
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 1
38021: NEG
38022: PUSH
38023: LD_INT 1
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 2
38032: NEG
38033: PUSH
38034: LD_INT 0
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 2
38043: NEG
38044: PUSH
38045: LD_INT 1
38047: NEG
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 2
38055: NEG
38056: PUSH
38057: LD_INT 2
38059: NEG
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38086: LD_ADDR_VAR 0 21
38090: PUSH
38091: LD_INT 0
38093: PUSH
38094: LD_INT 0
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 0
38103: PUSH
38104: LD_INT 1
38106: NEG
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 1
38114: PUSH
38115: LD_INT 0
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 1
38124: PUSH
38125: LD_INT 1
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 0
38134: PUSH
38135: LD_INT 1
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 1
38144: NEG
38145: PUSH
38146: LD_INT 0
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 1
38155: NEG
38156: PUSH
38157: LD_INT 1
38159: NEG
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 1
38167: NEG
38168: PUSH
38169: LD_INT 2
38171: NEG
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 0
38179: PUSH
38180: LD_INT 2
38182: NEG
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 1
38190: PUSH
38191: LD_INT 1
38193: NEG
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 2
38201: PUSH
38202: LD_INT 0
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 2
38211: PUSH
38212: LD_INT 1
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 2
38221: PUSH
38222: LD_INT 2
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 1
38231: PUSH
38232: LD_INT 2
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 0
38241: PUSH
38242: LD_INT 2
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 1
38251: NEG
38252: PUSH
38253: LD_INT 1
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 2
38262: NEG
38263: PUSH
38264: LD_INT 0
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 2
38273: NEG
38274: PUSH
38275: LD_INT 1
38277: NEG
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 2
38285: NEG
38286: PUSH
38287: LD_INT 2
38289: NEG
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38316: LD_ADDR_VAR 0 22
38320: PUSH
38321: LD_INT 0
38323: PUSH
38324: LD_INT 0
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 0
38333: PUSH
38334: LD_INT 1
38336: NEG
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 1
38344: PUSH
38345: LD_INT 0
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 1
38354: PUSH
38355: LD_INT 1
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 0
38364: PUSH
38365: LD_INT 1
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: LD_INT 1
38374: NEG
38375: PUSH
38376: LD_INT 0
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 1
38385: NEG
38386: PUSH
38387: LD_INT 1
38389: NEG
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 1
38397: NEG
38398: PUSH
38399: LD_INT 2
38401: NEG
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 0
38409: PUSH
38410: LD_INT 2
38412: NEG
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 1
38420: PUSH
38421: LD_INT 1
38423: NEG
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 2
38431: PUSH
38432: LD_INT 0
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 2
38441: PUSH
38442: LD_INT 1
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 2
38451: PUSH
38452: LD_INT 2
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 1
38461: PUSH
38462: LD_INT 2
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 0
38471: PUSH
38472: LD_INT 2
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 1
38481: NEG
38482: PUSH
38483: LD_INT 1
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 2
38492: NEG
38493: PUSH
38494: LD_INT 0
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 2
38503: NEG
38504: PUSH
38505: LD_INT 1
38507: NEG
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 2
38515: NEG
38516: PUSH
38517: LD_INT 2
38519: NEG
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38546: LD_ADDR_VAR 0 23
38550: PUSH
38551: LD_INT 0
38553: PUSH
38554: LD_INT 0
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 0
38563: PUSH
38564: LD_INT 1
38566: NEG
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 1
38574: PUSH
38575: LD_INT 0
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 1
38584: PUSH
38585: LD_INT 1
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 0
38594: PUSH
38595: LD_INT 1
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 1
38604: NEG
38605: PUSH
38606: LD_INT 0
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 1
38615: NEG
38616: PUSH
38617: LD_INT 1
38619: NEG
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 1
38627: NEG
38628: PUSH
38629: LD_INT 2
38631: NEG
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 0
38639: PUSH
38640: LD_INT 2
38642: NEG
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 1
38650: PUSH
38651: LD_INT 1
38653: NEG
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 2
38661: PUSH
38662: LD_INT 0
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 2
38671: PUSH
38672: LD_INT 1
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 2
38681: PUSH
38682: LD_INT 2
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 1
38691: PUSH
38692: LD_INT 2
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 0
38701: PUSH
38702: LD_INT 2
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 1
38711: NEG
38712: PUSH
38713: LD_INT 1
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 2
38722: NEG
38723: PUSH
38724: LD_INT 0
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 2
38733: NEG
38734: PUSH
38735: LD_INT 1
38737: NEG
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 2
38745: NEG
38746: PUSH
38747: LD_INT 2
38749: NEG
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 2
38757: NEG
38758: PUSH
38759: LD_INT 3
38761: NEG
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 1
38769: NEG
38770: PUSH
38771: LD_INT 3
38773: NEG
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 1
38781: PUSH
38782: LD_INT 2
38784: NEG
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 2
38792: PUSH
38793: LD_INT 1
38795: NEG
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38826: LD_ADDR_VAR 0 24
38830: PUSH
38831: LD_INT 0
38833: PUSH
38834: LD_INT 0
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 0
38843: PUSH
38844: LD_INT 1
38846: NEG
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 1
38854: PUSH
38855: LD_INT 0
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 1
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 0
38874: PUSH
38875: LD_INT 1
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 1
38884: NEG
38885: PUSH
38886: LD_INT 0
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 1
38895: NEG
38896: PUSH
38897: LD_INT 1
38899: NEG
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 1
38907: NEG
38908: PUSH
38909: LD_INT 2
38911: NEG
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 0
38919: PUSH
38920: LD_INT 2
38922: NEG
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 1
38930: PUSH
38931: LD_INT 1
38933: NEG
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 2
38941: PUSH
38942: LD_INT 0
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 2
38951: PUSH
38952: LD_INT 1
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 2
38961: PUSH
38962: LD_INT 2
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 1
38971: PUSH
38972: LD_INT 2
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 0
38981: PUSH
38982: LD_INT 2
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 1
38991: NEG
38992: PUSH
38993: LD_INT 1
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 2
39002: NEG
39003: PUSH
39004: LD_INT 0
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 2
39013: NEG
39014: PUSH
39015: LD_INT 1
39017: NEG
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 2
39025: NEG
39026: PUSH
39027: LD_INT 2
39029: NEG
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 1
39037: PUSH
39038: LD_INT 2
39040: NEG
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 2
39048: PUSH
39049: LD_INT 1
39051: NEG
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 3
39059: PUSH
39060: LD_INT 1
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 3
39069: PUSH
39070: LD_INT 2
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39102: LD_ADDR_VAR 0 25
39106: PUSH
39107: LD_INT 0
39109: PUSH
39110: LD_INT 0
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 0
39119: PUSH
39120: LD_INT 1
39122: NEG
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 1
39130: PUSH
39131: LD_INT 0
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 1
39140: PUSH
39141: LD_INT 1
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 0
39150: PUSH
39151: LD_INT 1
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 1
39160: NEG
39161: PUSH
39162: LD_INT 0
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 1
39171: NEG
39172: PUSH
39173: LD_INT 1
39175: NEG
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 1
39183: NEG
39184: PUSH
39185: LD_INT 2
39187: NEG
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 0
39195: PUSH
39196: LD_INT 2
39198: NEG
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 1
39206: PUSH
39207: LD_INT 1
39209: NEG
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 2
39217: PUSH
39218: LD_INT 0
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 2
39227: PUSH
39228: LD_INT 1
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 2
39237: PUSH
39238: LD_INT 2
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: LD_INT 1
39247: PUSH
39248: LD_INT 2
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 0
39257: PUSH
39258: LD_INT 2
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 1
39267: NEG
39268: PUSH
39269: LD_INT 1
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 2
39278: NEG
39279: PUSH
39280: LD_INT 0
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 2
39289: NEG
39290: PUSH
39291: LD_INT 1
39293: NEG
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 2
39301: NEG
39302: PUSH
39303: LD_INT 2
39305: NEG
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 3
39313: PUSH
39314: LD_INT 1
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 3
39323: PUSH
39324: LD_INT 2
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 2
39333: PUSH
39334: LD_INT 3
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 1
39343: PUSH
39344: LD_INT 3
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39376: LD_ADDR_VAR 0 26
39380: PUSH
39381: LD_INT 0
39383: PUSH
39384: LD_INT 0
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 0
39393: PUSH
39394: LD_INT 1
39396: NEG
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 1
39404: PUSH
39405: LD_INT 0
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 1
39414: PUSH
39415: LD_INT 1
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 0
39424: PUSH
39425: LD_INT 1
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 1
39434: NEG
39435: PUSH
39436: LD_INT 0
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 1
39445: NEG
39446: PUSH
39447: LD_INT 1
39449: NEG
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 1
39457: NEG
39458: PUSH
39459: LD_INT 2
39461: NEG
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 0
39469: PUSH
39470: LD_INT 2
39472: NEG
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 1
39480: PUSH
39481: LD_INT 1
39483: NEG
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 2
39491: PUSH
39492: LD_INT 0
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 2
39501: PUSH
39502: LD_INT 1
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 2
39511: PUSH
39512: LD_INT 2
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 1
39521: PUSH
39522: LD_INT 2
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 0
39531: PUSH
39532: LD_INT 2
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 1
39541: NEG
39542: PUSH
39543: LD_INT 1
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 2
39552: NEG
39553: PUSH
39554: LD_INT 0
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 2
39563: NEG
39564: PUSH
39565: LD_INT 1
39567: NEG
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 2
39575: NEG
39576: PUSH
39577: LD_INT 2
39579: NEG
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 2
39587: PUSH
39588: LD_INT 3
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 1
39597: PUSH
39598: LD_INT 3
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 1
39607: NEG
39608: PUSH
39609: LD_INT 2
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 2
39618: NEG
39619: PUSH
39620: LD_INT 1
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39652: LD_ADDR_VAR 0 27
39656: PUSH
39657: LD_INT 0
39659: PUSH
39660: LD_INT 0
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 0
39669: PUSH
39670: LD_INT 1
39672: NEG
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 1
39680: PUSH
39681: LD_INT 0
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 1
39690: PUSH
39691: LD_INT 1
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 0
39700: PUSH
39701: LD_INT 1
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 1
39710: NEG
39711: PUSH
39712: LD_INT 0
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 1
39721: NEG
39722: PUSH
39723: LD_INT 1
39725: NEG
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 1
39733: NEG
39734: PUSH
39735: LD_INT 2
39737: NEG
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 0
39745: PUSH
39746: LD_INT 2
39748: NEG
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 1
39756: PUSH
39757: LD_INT 1
39759: NEG
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 2
39767: PUSH
39768: LD_INT 0
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 2
39777: PUSH
39778: LD_INT 1
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 2
39787: PUSH
39788: LD_INT 2
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 1
39797: PUSH
39798: LD_INT 2
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 0
39807: PUSH
39808: LD_INT 2
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 1
39817: NEG
39818: PUSH
39819: LD_INT 1
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 2
39828: NEG
39829: PUSH
39830: LD_INT 0
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 2
39839: NEG
39840: PUSH
39841: LD_INT 1
39843: NEG
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 2
39851: NEG
39852: PUSH
39853: LD_INT 2
39855: NEG
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 1
39863: NEG
39864: PUSH
39865: LD_INT 2
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 2
39874: NEG
39875: PUSH
39876: LD_INT 1
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 3
39885: NEG
39886: PUSH
39887: LD_INT 1
39889: NEG
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 3
39897: NEG
39898: PUSH
39899: LD_INT 2
39901: NEG
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: LIST
39913: LIST
39914: LIST
39915: LIST
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39932: LD_ADDR_VAR 0 28
39936: PUSH
39937: LD_INT 0
39939: PUSH
39940: LD_INT 0
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: LD_INT 1
39952: NEG
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 1
39960: PUSH
39961: LD_INT 0
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 1
39970: PUSH
39971: LD_INT 1
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 0
39980: PUSH
39981: LD_INT 1
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 1
39990: NEG
39991: PUSH
39992: LD_INT 0
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 1
40001: NEG
40002: PUSH
40003: LD_INT 1
40005: NEG
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 1
40013: NEG
40014: PUSH
40015: LD_INT 2
40017: NEG
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 0
40025: PUSH
40026: LD_INT 2
40028: NEG
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 1
40036: PUSH
40037: LD_INT 1
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 2
40047: PUSH
40048: LD_INT 0
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 2
40057: PUSH
40058: LD_INT 1
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 2
40067: PUSH
40068: LD_INT 2
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 1
40077: PUSH
40078: LD_INT 2
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 0
40087: PUSH
40088: LD_INT 2
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 1
40097: NEG
40098: PUSH
40099: LD_INT 1
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 2
40108: NEG
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 2
40119: NEG
40120: PUSH
40121: LD_INT 1
40123: NEG
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 2
40131: NEG
40132: PUSH
40133: LD_INT 2
40135: NEG
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 2
40143: NEG
40144: PUSH
40145: LD_INT 3
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 1
40155: NEG
40156: PUSH
40157: LD_INT 3
40159: NEG
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 3
40167: NEG
40168: PUSH
40169: LD_INT 1
40171: NEG
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 3
40179: NEG
40180: PUSH
40181: LD_INT 2
40183: NEG
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40214: LD_ADDR_VAR 0 29
40218: PUSH
40219: LD_INT 0
40221: PUSH
40222: LD_INT 0
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 0
40231: PUSH
40232: LD_INT 1
40234: NEG
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 1
40242: PUSH
40243: LD_INT 0
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 1
40252: PUSH
40253: LD_INT 1
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 0
40262: PUSH
40263: LD_INT 1
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 1
40272: NEG
40273: PUSH
40274: LD_INT 0
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 1
40283: NEG
40284: PUSH
40285: LD_INT 1
40287: NEG
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 1
40295: NEG
40296: PUSH
40297: LD_INT 2
40299: NEG
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: LD_INT 2
40310: NEG
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 1
40318: PUSH
40319: LD_INT 1
40321: NEG
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 2
40329: PUSH
40330: LD_INT 0
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 2
40339: PUSH
40340: LD_INT 1
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 1
40349: PUSH
40350: LD_INT 2
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 0
40359: PUSH
40360: LD_INT 2
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 1
40369: NEG
40370: PUSH
40371: LD_INT 1
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 2
40380: NEG
40381: PUSH
40382: LD_INT 1
40384: NEG
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 2
40392: NEG
40393: PUSH
40394: LD_INT 2
40396: NEG
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 2
40404: NEG
40405: PUSH
40406: LD_INT 3
40408: NEG
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 2
40416: PUSH
40417: LD_INT 1
40419: NEG
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 3
40427: PUSH
40428: LD_INT 1
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 1
40437: PUSH
40438: LD_INT 3
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 1
40447: NEG
40448: PUSH
40449: LD_INT 2
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 3
40458: NEG
40459: PUSH
40460: LD_INT 2
40462: NEG
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40493: LD_ADDR_VAR 0 30
40497: PUSH
40498: LD_INT 0
40500: PUSH
40501: LD_INT 0
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 0
40510: PUSH
40511: LD_INT 1
40513: NEG
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 1
40521: PUSH
40522: LD_INT 0
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 1
40531: PUSH
40532: LD_INT 1
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 0
40541: PUSH
40542: LD_INT 1
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 1
40551: NEG
40552: PUSH
40553: LD_INT 0
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 1
40562: NEG
40563: PUSH
40564: LD_INT 1
40566: NEG
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 1
40574: NEG
40575: PUSH
40576: LD_INT 2
40578: NEG
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 0
40586: PUSH
40587: LD_INT 2
40589: NEG
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 1
40597: PUSH
40598: LD_INT 1
40600: NEG
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 2
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 2
40618: PUSH
40619: LD_INT 1
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 2
40628: PUSH
40629: LD_INT 2
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 1
40638: PUSH
40639: LD_INT 2
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 1
40648: NEG
40649: PUSH
40650: LD_INT 1
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 2
40659: NEG
40660: PUSH
40661: LD_INT 0
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 2
40670: NEG
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 1
40682: NEG
40683: PUSH
40684: LD_INT 3
40686: NEG
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 1
40694: PUSH
40695: LD_INT 2
40697: NEG
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 3
40705: PUSH
40706: LD_INT 2
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 2
40715: PUSH
40716: LD_INT 3
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 2
40725: NEG
40726: PUSH
40727: LD_INT 1
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 3
40736: NEG
40737: PUSH
40738: LD_INT 1
40740: NEG
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40771: LD_ADDR_VAR 0 31
40775: PUSH
40776: LD_INT 0
40778: PUSH
40779: LD_INT 0
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 0
40788: PUSH
40789: LD_INT 1
40791: NEG
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 1
40799: PUSH
40800: LD_INT 0
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 1
40809: PUSH
40810: LD_INT 1
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 0
40819: PUSH
40820: LD_INT 1
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 1
40829: NEG
40830: PUSH
40831: LD_INT 0
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 1
40840: NEG
40841: PUSH
40842: LD_INT 1
40844: NEG
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 1
40852: NEG
40853: PUSH
40854: LD_INT 2
40856: NEG
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 1
40864: PUSH
40865: LD_INT 1
40867: NEG
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 2
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 2
40885: PUSH
40886: LD_INT 1
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 2
40895: PUSH
40896: LD_INT 2
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 1
40905: PUSH
40906: LD_INT 2
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 0
40915: PUSH
40916: LD_INT 2
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 1
40925: NEG
40926: PUSH
40927: LD_INT 1
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 2
40936: NEG
40937: PUSH
40938: LD_INT 1
40940: NEG
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 2
40948: NEG
40949: PUSH
40950: LD_INT 2
40952: NEG
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 2
40960: NEG
40961: PUSH
40962: LD_INT 3
40964: NEG
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 2
40972: PUSH
40973: LD_INT 1
40975: NEG
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 3
40983: PUSH
40984: LD_INT 1
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 1
40993: PUSH
40994: LD_INT 3
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 1
41003: NEG
41004: PUSH
41005: LD_INT 2
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 3
41014: NEG
41015: PUSH
41016: LD_INT 2
41018: NEG
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41049: LD_ADDR_VAR 0 32
41053: PUSH
41054: LD_INT 0
41056: PUSH
41057: LD_INT 0
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 0
41066: PUSH
41067: LD_INT 1
41069: NEG
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 1
41077: PUSH
41078: LD_INT 0
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 1
41087: PUSH
41088: LD_INT 1
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 0
41097: PUSH
41098: LD_INT 1
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 1
41107: NEG
41108: PUSH
41109: LD_INT 0
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 1
41118: NEG
41119: PUSH
41120: LD_INT 1
41122: NEG
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 1
41130: NEG
41131: PUSH
41132: LD_INT 2
41134: NEG
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 0
41142: PUSH
41143: LD_INT 2
41145: NEG
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 1
41153: PUSH
41154: LD_INT 1
41156: NEG
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 2
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 2
41174: PUSH
41175: LD_INT 2
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 1
41184: PUSH
41185: LD_INT 2
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 0
41194: PUSH
41195: LD_INT 2
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 1
41204: NEG
41205: PUSH
41206: LD_INT 1
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 2
41215: NEG
41216: PUSH
41217: LD_INT 0
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 2
41226: NEG
41227: PUSH
41228: LD_INT 1
41230: NEG
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 1
41238: NEG
41239: PUSH
41240: LD_INT 3
41242: NEG
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 1
41250: PUSH
41251: LD_INT 2
41253: NEG
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 3
41261: PUSH
41262: LD_INT 2
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 2
41271: PUSH
41272: LD_INT 3
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 2
41281: NEG
41282: PUSH
41283: LD_INT 1
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 3
41292: NEG
41293: PUSH
41294: LD_INT 1
41296: NEG
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41327: LD_ADDR_VAR 0 33
41331: PUSH
41332: LD_INT 0
41334: PUSH
41335: LD_INT 0
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 0
41344: PUSH
41345: LD_INT 1
41347: NEG
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 1
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 1
41365: PUSH
41366: LD_INT 1
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 0
41375: PUSH
41376: LD_INT 1
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 1
41385: NEG
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 1
41396: NEG
41397: PUSH
41398: LD_INT 1
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 1
41408: NEG
41409: PUSH
41410: LD_INT 2
41412: NEG
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 1
41420: PUSH
41421: LD_INT 1
41423: NEG
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 2
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 2
41441: PUSH
41442: LD_INT 1
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 1
41451: PUSH
41452: LD_INT 2
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: LD_INT 2
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 1
41471: NEG
41472: PUSH
41473: LD_INT 1
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 2
41482: NEG
41483: PUSH
41484: LD_INT 0
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 2
41493: NEG
41494: PUSH
41495: LD_INT 1
41497: NEG
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 2
41505: NEG
41506: PUSH
41507: LD_INT 2
41509: NEG
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 2
41517: NEG
41518: PUSH
41519: LD_INT 3
41521: NEG
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 2
41529: PUSH
41530: LD_INT 1
41532: NEG
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 3
41540: PUSH
41541: LD_INT 1
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 1
41550: PUSH
41551: LD_INT 3
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 1
41560: NEG
41561: PUSH
41562: LD_INT 2
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 3
41571: NEG
41572: PUSH
41573: LD_INT 2
41575: NEG
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41606: LD_ADDR_VAR 0 34
41610: PUSH
41611: LD_INT 0
41613: PUSH
41614: LD_INT 0
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 0
41623: PUSH
41624: LD_INT 1
41626: NEG
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 1
41634: PUSH
41635: LD_INT 0
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 1
41644: PUSH
41645: LD_INT 1
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 0
41654: PUSH
41655: LD_INT 1
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 1
41664: NEG
41665: PUSH
41666: LD_INT 0
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 1
41675: NEG
41676: PUSH
41677: LD_INT 1
41679: NEG
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 1
41687: NEG
41688: PUSH
41689: LD_INT 2
41691: NEG
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 0
41699: PUSH
41700: LD_INT 2
41702: NEG
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 1
41710: PUSH
41711: LD_INT 1
41713: NEG
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 2
41721: PUSH
41722: LD_INT 1
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 2
41731: PUSH
41732: LD_INT 2
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 1
41741: PUSH
41742: LD_INT 2
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 1
41751: NEG
41752: PUSH
41753: LD_INT 1
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 2
41762: NEG
41763: PUSH
41764: LD_INT 0
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 2
41773: NEG
41774: PUSH
41775: LD_INT 1
41777: NEG
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 2
41785: NEG
41786: PUSH
41787: LD_INT 2
41789: NEG
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 1
41797: NEG
41798: PUSH
41799: LD_INT 3
41801: NEG
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 1
41809: PUSH
41810: LD_INT 2
41812: NEG
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 3
41820: PUSH
41821: LD_INT 2
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 2
41830: PUSH
41831: LD_INT 3
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 2
41840: NEG
41841: PUSH
41842: LD_INT 1
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 3
41851: NEG
41852: PUSH
41853: LD_INT 1
41855: NEG
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41886: LD_ADDR_VAR 0 35
41890: PUSH
41891: LD_INT 0
41893: PUSH
41894: LD_INT 0
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: LD_INT 1
41906: NEG
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: LD_INT 0
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 1
41924: PUSH
41925: LD_INT 1
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 0
41934: PUSH
41935: LD_INT 1
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 1
41944: NEG
41945: PUSH
41946: LD_INT 0
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: LD_INT 1
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 2
41967: PUSH
41968: LD_INT 1
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 2
41977: NEG
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41998: LD_ADDR_VAR 0 36
42002: PUSH
42003: LD_INT 0
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: LD_INT 1
42018: NEG
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 1
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 1
42036: PUSH
42037: LD_INT 1
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 1
42056: NEG
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 1
42067: NEG
42068: PUSH
42069: LD_INT 1
42071: NEG
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 1
42079: NEG
42080: PUSH
42081: LD_INT 2
42083: NEG
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 1
42091: PUSH
42092: LD_INT 2
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42110: LD_ADDR_VAR 0 37
42114: PUSH
42115: LD_INT 0
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 0
42127: PUSH
42128: LD_INT 1
42130: NEG
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 1
42138: PUSH
42139: LD_INT 0
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 1
42148: PUSH
42149: LD_INT 1
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: LD_INT 1
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 1
42168: NEG
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 1
42179: NEG
42180: PUSH
42181: LD_INT 1
42183: NEG
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 1
42191: PUSH
42192: LD_INT 1
42194: NEG
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 1
42202: NEG
42203: PUSH
42204: LD_INT 1
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42222: LD_ADDR_VAR 0 38
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: LD_INT 0
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: LD_INT 1
42242: NEG
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 1
42260: PUSH
42261: LD_INT 1
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 0
42270: PUSH
42271: LD_INT 1
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 1
42280: NEG
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 1
42291: NEG
42292: PUSH
42293: LD_INT 1
42295: NEG
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 2
42303: PUSH
42304: LD_INT 1
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 2
42313: NEG
42314: PUSH
42315: LD_INT 1
42317: NEG
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42334: LD_ADDR_VAR 0 39
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: LD_INT 1
42354: NEG
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: LD_INT 0
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 1
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: LD_INT 1
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 1
42392: NEG
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 1
42403: NEG
42404: PUSH
42405: LD_INT 1
42407: NEG
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 1
42415: NEG
42416: PUSH
42417: LD_INT 2
42419: NEG
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 1
42427: PUSH
42428: LD_INT 2
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42446: LD_ADDR_VAR 0 40
42450: PUSH
42451: LD_INT 0
42453: PUSH
42454: LD_INT 0
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 0
42463: PUSH
42464: LD_INT 1
42466: NEG
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 1
42474: PUSH
42475: LD_INT 0
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 1
42484: PUSH
42485: LD_INT 1
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: LD_INT 1
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 1
42504: NEG
42505: PUSH
42506: LD_INT 0
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 1
42515: NEG
42516: PUSH
42517: LD_INT 1
42519: NEG
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 1
42527: PUSH
42528: LD_INT 1
42530: NEG
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 1
42538: NEG
42539: PUSH
42540: LD_INT 1
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42558: LD_ADDR_VAR 0 41
42562: PUSH
42563: LD_INT 0
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: LD_INT 1
42578: NEG
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 1
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 1
42596: PUSH
42597: LD_INT 1
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 0
42606: PUSH
42607: LD_INT 1
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 1
42616: NEG
42617: PUSH
42618: LD_INT 0
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 1
42627: NEG
42628: PUSH
42629: LD_INT 1
42631: NEG
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 1
42639: NEG
42640: PUSH
42641: LD_INT 2
42643: NEG
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 1
42651: PUSH
42652: LD_INT 1
42654: NEG
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 2
42662: PUSH
42663: LD_INT 0
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 2
42672: PUSH
42673: LD_INT 1
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 2
42682: PUSH
42683: LD_INT 2
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 1
42692: PUSH
42693: LD_INT 2
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 1
42702: NEG
42703: PUSH
42704: LD_INT 1
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 2
42713: NEG
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 2
42724: NEG
42725: PUSH
42726: LD_INT 1
42728: NEG
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 2
42736: NEG
42737: PUSH
42738: LD_INT 2
42740: NEG
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 2
42748: NEG
42749: PUSH
42750: LD_INT 3
42752: NEG
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 2
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 3
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 3
42781: PUSH
42782: LD_INT 1
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 3
42791: PUSH
42792: LD_INT 2
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 3
42801: PUSH
42802: LD_INT 3
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 2
42811: PUSH
42812: LD_INT 3
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 2
42821: NEG
42822: PUSH
42823: LD_INT 1
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 3
42832: NEG
42833: PUSH
42834: LD_INT 0
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 3
42843: NEG
42844: PUSH
42845: LD_INT 1
42847: NEG
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 3
42855: NEG
42856: PUSH
42857: LD_INT 2
42859: NEG
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 3
42867: NEG
42868: PUSH
42869: LD_INT 3
42871: NEG
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42908: LD_ADDR_VAR 0 42
42912: PUSH
42913: LD_INT 0
42915: PUSH
42916: LD_INT 0
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 0
42925: PUSH
42926: LD_INT 1
42928: NEG
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 1
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 1
42946: PUSH
42947: LD_INT 1
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: LD_INT 1
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 1
42966: NEG
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: LD_INT 1
42981: NEG
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 1
42989: NEG
42990: PUSH
42991: LD_INT 2
42993: NEG
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 0
43001: PUSH
43002: LD_INT 2
43004: NEG
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 1
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 2
43023: PUSH
43024: LD_INT 1
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 2
43033: PUSH
43034: LD_INT 2
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 1
43043: PUSH
43044: LD_INT 2
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 0
43053: PUSH
43054: LD_INT 2
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 1
43063: NEG
43064: PUSH
43065: LD_INT 1
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 2
43074: NEG
43075: PUSH
43076: LD_INT 1
43078: NEG
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 2
43086: NEG
43087: PUSH
43088: LD_INT 2
43090: NEG
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 2
43098: NEG
43099: PUSH
43100: LD_INT 3
43102: NEG
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 1
43110: NEG
43111: PUSH
43112: LD_INT 3
43114: NEG
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 0
43122: PUSH
43123: LD_INT 3
43125: NEG
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 1
43133: PUSH
43134: LD_INT 2
43136: NEG
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 3
43144: PUSH
43145: LD_INT 2
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 3
43154: PUSH
43155: LD_INT 3
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 2
43164: PUSH
43165: LD_INT 3
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 1
43174: PUSH
43175: LD_INT 3
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 0
43184: PUSH
43185: LD_INT 3
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 1
43194: NEG
43195: PUSH
43196: LD_INT 2
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 3
43205: NEG
43206: PUSH
43207: LD_INT 2
43209: NEG
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 3
43217: NEG
43218: PUSH
43219: LD_INT 3
43221: NEG
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43258: LD_ADDR_VAR 0 43
43262: PUSH
43263: LD_INT 0
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 0
43275: PUSH
43276: LD_INT 1
43278: NEG
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 1
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 1
43296: PUSH
43297: LD_INT 1
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 0
43306: PUSH
43307: LD_INT 1
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 1
43316: NEG
43317: PUSH
43318: LD_INT 0
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 1
43327: NEG
43328: PUSH
43329: LD_INT 1
43331: NEG
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 1
43339: NEG
43340: PUSH
43341: LD_INT 2
43343: NEG
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 0
43351: PUSH
43352: LD_INT 2
43354: NEG
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 1
43362: PUSH
43363: LD_INT 1
43365: NEG
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 2
43373: PUSH
43374: LD_INT 0
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 2
43383: PUSH
43384: LD_INT 1
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 1
43393: PUSH
43394: LD_INT 2
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 0
43403: PUSH
43404: LD_INT 2
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 1
43413: NEG
43414: PUSH
43415: LD_INT 1
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 2
43424: NEG
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 2
43435: NEG
43436: PUSH
43437: LD_INT 1
43439: NEG
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 1
43447: NEG
43448: PUSH
43449: LD_INT 3
43451: NEG
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 0
43459: PUSH
43460: LD_INT 3
43462: NEG
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 1
43470: PUSH
43471: LD_INT 2
43473: NEG
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 2
43481: PUSH
43482: LD_INT 1
43484: NEG
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 3
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 3
43502: PUSH
43503: LD_INT 1
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 1
43512: PUSH
43513: LD_INT 3
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: LD_INT 3
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 1
43532: NEG
43533: PUSH
43534: LD_INT 2
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 2
43543: NEG
43544: PUSH
43545: LD_INT 1
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 3
43554: NEG
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 3
43565: NEG
43566: PUSH
43567: LD_INT 1
43569: NEG
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43606: LD_ADDR_VAR 0 44
43610: PUSH
43611: LD_INT 0
43613: PUSH
43614: LD_INT 0
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 0
43623: PUSH
43624: LD_INT 1
43626: NEG
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 1
43634: PUSH
43635: LD_INT 0
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 1
43644: PUSH
43645: LD_INT 1
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 0
43654: PUSH
43655: LD_INT 1
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 1
43664: NEG
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 1
43675: NEG
43676: PUSH
43677: LD_INT 1
43679: NEG
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 1
43687: NEG
43688: PUSH
43689: LD_INT 2
43691: NEG
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 1
43699: PUSH
43700: LD_INT 1
43702: NEG
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 2
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 2
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 2
43730: PUSH
43731: LD_INT 2
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 1
43740: PUSH
43741: LD_INT 2
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 1
43750: NEG
43751: PUSH
43752: LD_INT 1
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 2
43761: NEG
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 2
43772: NEG
43773: PUSH
43774: LD_INT 1
43776: NEG
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 2
43784: NEG
43785: PUSH
43786: LD_INT 2
43788: NEG
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 2
43796: NEG
43797: PUSH
43798: LD_INT 3
43800: NEG
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 2
43808: PUSH
43809: LD_INT 1
43811: NEG
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 3
43819: PUSH
43820: LD_INT 0
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 3
43829: PUSH
43830: LD_INT 1
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 3
43839: PUSH
43840: LD_INT 2
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 3
43849: PUSH
43850: LD_INT 3
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 2
43859: PUSH
43860: LD_INT 3
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 2
43869: NEG
43870: PUSH
43871: LD_INT 1
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 3
43880: NEG
43881: PUSH
43882: LD_INT 0
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 3
43891: NEG
43892: PUSH
43893: LD_INT 1
43895: NEG
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 3
43903: NEG
43904: PUSH
43905: LD_INT 2
43907: NEG
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 3
43915: NEG
43916: PUSH
43917: LD_INT 3
43919: NEG
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43956: LD_ADDR_VAR 0 45
43960: PUSH
43961: LD_INT 0
43963: PUSH
43964: LD_INT 0
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 0
43973: PUSH
43974: LD_INT 1
43976: NEG
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 1
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 1
43994: PUSH
43995: LD_INT 1
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 0
44004: PUSH
44005: LD_INT 1
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 1
44014: NEG
44015: PUSH
44016: LD_INT 0
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 1
44025: NEG
44026: PUSH
44027: LD_INT 1
44029: NEG
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 1
44037: NEG
44038: PUSH
44039: LD_INT 2
44041: NEG
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: LD_INT 2
44052: NEG
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 1
44060: PUSH
44061: LD_INT 1
44063: NEG
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 2
44071: PUSH
44072: LD_INT 1
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 2
44081: PUSH
44082: LD_INT 2
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 1
44091: PUSH
44092: LD_INT 2
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: LD_INT 2
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 1
44111: NEG
44112: PUSH
44113: LD_INT 1
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 2
44122: NEG
44123: PUSH
44124: LD_INT 1
44126: NEG
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 2
44134: NEG
44135: PUSH
44136: LD_INT 2
44138: NEG
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 2
44146: NEG
44147: PUSH
44148: LD_INT 3
44150: NEG
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: LD_INT 3
44162: NEG
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: LD_INT 3
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: LD_INT 2
44184: NEG
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 3
44192: PUSH
44193: LD_INT 2
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 3
44202: PUSH
44203: LD_INT 3
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 2
44212: PUSH
44213: LD_INT 3
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: PUSH
44223: LD_INT 3
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 0
44232: PUSH
44233: LD_INT 3
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 1
44242: NEG
44243: PUSH
44244: LD_INT 2
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 3
44253: NEG
44254: PUSH
44255: LD_INT 2
44257: NEG
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 3
44265: NEG
44266: PUSH
44267: LD_INT 3
44269: NEG
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44306: LD_ADDR_VAR 0 46
44310: PUSH
44311: LD_INT 0
44313: PUSH
44314: LD_INT 0
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 1
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: LD_INT 1
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 0
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 1
44364: NEG
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: NEG
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 1
44387: NEG
44388: PUSH
44389: LD_INT 2
44391: NEG
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 0
44399: PUSH
44400: LD_INT 2
44402: NEG
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 1
44410: PUSH
44411: LD_INT 1
44413: NEG
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 2
44421: PUSH
44422: LD_INT 0
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 2
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 1
44441: PUSH
44442: LD_INT 2
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 0
44451: PUSH
44452: LD_INT 2
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 1
44461: NEG
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 2
44472: NEG
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 2
44483: NEG
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: NEG
44496: PUSH
44497: LD_INT 3
44499: NEG
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 0
44507: PUSH
44508: LD_INT 3
44510: NEG
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 1
44518: PUSH
44519: LD_INT 2
44521: NEG
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 2
44529: PUSH
44530: LD_INT 1
44532: NEG
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 3
44540: PUSH
44541: LD_INT 0
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 3
44550: PUSH
44551: LD_INT 1
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 1
44560: PUSH
44561: LD_INT 3
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 0
44570: PUSH
44571: LD_INT 3
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 1
44580: NEG
44581: PUSH
44582: LD_INT 2
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 2
44591: NEG
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 3
44602: NEG
44603: PUSH
44604: LD_INT 0
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 3
44613: NEG
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44654: LD_ADDR_VAR 0 47
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: LD_INT 0
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 0
44671: PUSH
44672: LD_INT 1
44674: NEG
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 1
44682: PUSH
44683: LD_INT 0
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 0
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 1
44712: NEG
44713: PUSH
44714: LD_INT 0
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 1
44723: NEG
44724: PUSH
44725: LD_INT 1
44727: NEG
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 1
44735: NEG
44736: PUSH
44737: LD_INT 2
44739: NEG
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 0
44747: PUSH
44748: LD_INT 2
44750: NEG
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: LD_INT 1
44761: NEG
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 2
44769: NEG
44770: PUSH
44771: LD_INT 1
44773: NEG
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 2
44781: NEG
44782: PUSH
44783: LD_INT 2
44785: NEG
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44805: LD_ADDR_VAR 0 48
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: LD_INT 0
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: LD_INT 1
44825: NEG
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 1
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 1
44843: PUSH
44844: LD_INT 1
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: LD_INT 1
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: LD_INT 0
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 1
44874: NEG
44875: PUSH
44876: LD_INT 1
44878: NEG
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 1
44886: NEG
44887: PUSH
44888: LD_INT 2
44890: NEG
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 0
44898: PUSH
44899: LD_INT 2
44901: NEG
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: LD_INT 1
44912: NEG
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 2
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 2
44930: PUSH
44931: LD_INT 1
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44952: LD_ADDR_VAR 0 49
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: LD_INT 1
44972: NEG
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 1
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: LD_INT 1
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: LD_INT 1
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 1
45010: NEG
45011: PUSH
45012: LD_INT 0
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: LD_INT 1
45025: NEG
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 1
45033: PUSH
45034: LD_INT 1
45036: NEG
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 2
45044: PUSH
45045: LD_INT 0
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 2
45054: PUSH
45055: LD_INT 1
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 2
45064: PUSH
45065: LD_INT 2
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 1
45074: PUSH
45075: LD_INT 2
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45096: LD_ADDR_VAR 0 50
45100: PUSH
45101: LD_INT 0
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 1
45134: PUSH
45135: LD_INT 1
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: LD_INT 1
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 1
45154: NEG
45155: PUSH
45156: LD_INT 0
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 1
45165: NEG
45166: PUSH
45167: LD_INT 1
45169: NEG
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 2
45177: PUSH
45178: LD_INT 1
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 2
45187: PUSH
45188: LD_INT 2
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: LD_INT 2
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: LD_INT 2
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: LD_INT 1
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45240: LD_ADDR_VAR 0 51
45244: PUSH
45245: LD_INT 0
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 0
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 1
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 1
45278: PUSH
45279: LD_INT 1
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 0
45288: PUSH
45289: LD_INT 1
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 1
45298: NEG
45299: PUSH
45300: LD_INT 0
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 1
45309: NEG
45310: PUSH
45311: LD_INT 1
45313: NEG
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 1
45321: PUSH
45322: LD_INT 2
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: LD_INT 2
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 1
45341: NEG
45342: PUSH
45343: LD_INT 1
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 2
45352: NEG
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 2
45363: NEG
45364: PUSH
45365: LD_INT 1
45367: NEG
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45387: LD_ADDR_VAR 0 52
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: LD_INT 0
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 0
45404: PUSH
45405: LD_INT 1
45407: NEG
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: LD_INT 1
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: LD_INT 1
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 1
45456: NEG
45457: PUSH
45458: LD_INT 1
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: LD_INT 2
45472: NEG
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 1
45480: NEG
45481: PUSH
45482: LD_INT 1
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 2
45491: NEG
45492: PUSH
45493: LD_INT 0
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 2
45502: NEG
45503: PUSH
45504: LD_INT 1
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 2
45514: NEG
45515: PUSH
45516: LD_INT 2
45518: NEG
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45538: LD_ADDR_VAR 0 53
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: LD_INT 1
45558: NEG
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 1
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: LD_INT 1
45611: NEG
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 1
45619: NEG
45620: PUSH
45621: LD_INT 2
45623: NEG
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: LD_INT 2
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: LD_INT 1
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 2
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 2
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 2
45673: PUSH
45674: LD_INT 2
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: PUSH
45684: LD_INT 2
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: LD_INT 2
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 2
45714: NEG
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 2
45725: NEG
45726: PUSH
45727: LD_INT 1
45729: NEG
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 2
45737: NEG
45738: PUSH
45739: LD_INT 2
45741: NEG
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45768: LD_ADDR_VAR 0 54
45772: PUSH
45773: LD_INT 0
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: LD_INT 1
45841: NEG
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: PUSH
45851: LD_INT 2
45853: NEG
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: LD_INT 2
45864: NEG
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 1
45872: PUSH
45873: LD_INT 1
45875: NEG
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 2
45883: PUSH
45884: LD_INT 0
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 2
45893: PUSH
45894: LD_INT 1
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 2
45903: PUSH
45904: LD_INT 2
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 1
45913: PUSH
45914: LD_INT 2
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: LD_INT 2
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 1
45933: NEG
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 2
45944: NEG
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 2
45955: NEG
45956: PUSH
45957: LD_INT 1
45959: NEG
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 2
45967: NEG
45968: PUSH
45969: LD_INT 2
45971: NEG
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45998: LD_ADDR_VAR 0 55
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: LD_INT 1
46018: NEG
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 1
46067: NEG
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: LD_INT 2
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: LD_INT 2
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 1
46102: PUSH
46103: LD_INT 1
46105: NEG
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 2
46113: PUSH
46114: LD_INT 0
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 2
46123: PUSH
46124: LD_INT 1
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 2
46133: PUSH
46134: LD_INT 2
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: PUSH
46144: LD_INT 2
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: LD_INT 2
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 1
46163: NEG
46164: PUSH
46165: LD_INT 1
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 2
46174: NEG
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 2
46185: NEG
46186: PUSH
46187: LD_INT 1
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 2
46197: NEG
46198: PUSH
46199: LD_INT 2
46201: NEG
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46228: LD_ADDR_VAR 0 56
46232: PUSH
46233: LD_INT 0
46235: PUSH
46236: LD_INT 0
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: LD_INT 1
46248: NEG
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 1
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 1
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: LD_INT 1
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: LD_INT 1
46301: NEG
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 1
46309: NEG
46310: PUSH
46311: LD_INT 2
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 0
46321: PUSH
46322: LD_INT 2
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 2
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 2
46353: PUSH
46354: LD_INT 1
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 2
46363: PUSH
46364: LD_INT 2
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: LD_INT 2
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: LD_INT 2
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 1
46393: NEG
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 2
46404: NEG
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 2
46415: NEG
46416: PUSH
46417: LD_INT 1
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 2
46427: NEG
46428: PUSH
46429: LD_INT 2
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46458: LD_ADDR_VAR 0 57
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: LD_INT 0
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: LD_INT 1
46478: NEG
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: LD_INT 0
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: LD_INT 1
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: LD_INT 1
46531: NEG
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 1
46539: NEG
46540: PUSH
46541: LD_INT 2
46543: NEG
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: LD_INT 2
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 1
46562: PUSH
46563: LD_INT 1
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 2
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 2
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 2
46593: PUSH
46594: LD_INT 2
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 1
46603: PUSH
46604: LD_INT 2
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: LD_INT 2
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 1
46623: NEG
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 2
46634: NEG
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 2
46645: NEG
46646: PUSH
46647: LD_INT 1
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 2
46657: NEG
46658: PUSH
46659: LD_INT 2
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46688: LD_ADDR_VAR 0 58
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 0
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 1
46746: NEG
46747: PUSH
46748: LD_INT 0
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: LD_INT 2
46773: NEG
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: LD_INT 2
46784: NEG
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: LD_INT 1
46795: NEG
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 2
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 2
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 2
46823: PUSH
46824: LD_INT 2
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: LD_INT 2
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: LD_INT 2
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 1
46853: NEG
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 2
46864: NEG
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 2
46875: NEG
46876: PUSH
46877: LD_INT 1
46879: NEG
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 2
46887: NEG
46888: PUSH
46889: LD_INT 2
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46918: LD_ADDR_VAR 0 59
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: LD_INT 0
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 0
46935: PUSH
46936: LD_INT 1
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: LD_INT 1
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: LD_INT 1
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 1
46976: NEG
46977: PUSH
46978: LD_INT 0
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47006: LD_ADDR_VAR 0 60
47010: PUSH
47011: LD_INT 0
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: LD_INT 1
47026: NEG
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 1
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 1
47044: PUSH
47045: LD_INT 1
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: LD_INT 1
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 1
47064: NEG
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 1
47075: NEG
47076: PUSH
47077: LD_INT 1
47079: NEG
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47094: LD_ADDR_VAR 0 61
47098: PUSH
47099: LD_INT 0
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 0
47111: PUSH
47112: LD_INT 1
47114: NEG
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 1
47122: PUSH
47123: LD_INT 0
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 1
47132: PUSH
47133: LD_INT 1
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: LD_INT 1
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 1
47152: NEG
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 1
47163: NEG
47164: PUSH
47165: LD_INT 1
47167: NEG
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47182: LD_ADDR_VAR 0 62
47186: PUSH
47187: LD_INT 0
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 1
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 1
47240: NEG
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: LD_INT 1
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47270: LD_ADDR_VAR 0 63
47274: PUSH
47275: LD_INT 0
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 0
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 1
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 1
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: LD_INT 1
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 1
47328: NEG
47329: PUSH
47330: LD_INT 0
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 1
47339: NEG
47340: PUSH
47341: LD_INT 1
47343: NEG
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47358: LD_ADDR_VAR 0 64
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: LD_INT 0
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: LD_INT 1
47378: NEG
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 1
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: PUSH
47397: LD_INT 1
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: LD_INT 1
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 1
47416: NEG
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 1
47427: NEG
47428: PUSH
47429: LD_INT 1
47431: NEG
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: ST_TO_ADDR
// end ; 1 :
47446: GO 53343
47448: LD_INT 1
47450: DOUBLE
47451: EQUAL
47452: IFTRUE 47456
47454: GO 50079
47456: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47457: LD_ADDR_VAR 0 11
47461: PUSH
47462: LD_INT 1
47464: NEG
47465: PUSH
47466: LD_INT 3
47468: NEG
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 0
47476: PUSH
47477: LD_INT 3
47479: NEG
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: PUSH
47488: LD_INT 2
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: LIST
47500: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47501: LD_ADDR_VAR 0 12
47505: PUSH
47506: LD_INT 2
47508: PUSH
47509: LD_INT 1
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 3
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 3
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: LIST
47541: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47542: LD_ADDR_VAR 0 13
47546: PUSH
47547: LD_INT 3
47549: PUSH
47550: LD_INT 2
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 3
47559: PUSH
47560: LD_INT 3
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 2
47569: PUSH
47570: LD_INT 3
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: LIST
47581: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47582: LD_ADDR_VAR 0 14
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: LD_INT 3
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 0
47599: PUSH
47600: LD_INT 3
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 1
47609: NEG
47610: PUSH
47611: LD_INT 2
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: LIST
47622: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47623: LD_ADDR_VAR 0 15
47627: PUSH
47628: LD_INT 2
47630: NEG
47631: PUSH
47632: LD_INT 1
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 3
47641: NEG
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 3
47652: NEG
47653: PUSH
47654: LD_INT 1
47656: NEG
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: LIST
47666: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47667: LD_ADDR_VAR 0 16
47671: PUSH
47672: LD_INT 2
47674: NEG
47675: PUSH
47676: LD_INT 3
47678: NEG
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 3
47686: NEG
47687: PUSH
47688: LD_INT 2
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 3
47698: NEG
47699: PUSH
47700: LD_INT 3
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: LIST
47712: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47713: LD_ADDR_VAR 0 17
47717: PUSH
47718: LD_INT 1
47720: NEG
47721: PUSH
47722: LD_INT 3
47724: NEG
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: LD_INT 3
47735: NEG
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 1
47743: PUSH
47744: LD_INT 2
47746: NEG
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: LIST
47756: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47757: LD_ADDR_VAR 0 18
47761: PUSH
47762: LD_INT 2
47764: PUSH
47765: LD_INT 1
47767: NEG
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 3
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 3
47785: PUSH
47786: LD_INT 1
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: LIST
47797: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47798: LD_ADDR_VAR 0 19
47802: PUSH
47803: LD_INT 3
47805: PUSH
47806: LD_INT 2
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 3
47815: PUSH
47816: LD_INT 3
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 2
47825: PUSH
47826: LD_INT 3
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: LIST
47837: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47838: LD_ADDR_VAR 0 20
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: LD_INT 3
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: LD_INT 3
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 1
47865: NEG
47866: PUSH
47867: LD_INT 2
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: LIST
47878: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47879: LD_ADDR_VAR 0 21
47883: PUSH
47884: LD_INT 2
47886: NEG
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 3
47897: NEG
47898: PUSH
47899: LD_INT 0
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 3
47908: NEG
47909: PUSH
47910: LD_INT 1
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: LIST
47922: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47923: LD_ADDR_VAR 0 22
47927: PUSH
47928: LD_INT 2
47930: NEG
47931: PUSH
47932: LD_INT 3
47934: NEG
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 3
47942: NEG
47943: PUSH
47944: LD_INT 2
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 3
47954: NEG
47955: PUSH
47956: LD_INT 3
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: LIST
47968: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47969: LD_ADDR_VAR 0 23
47973: PUSH
47974: LD_INT 0
47976: PUSH
47977: LD_INT 3
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: NEG
47988: PUSH
47989: LD_INT 4
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: LD_INT 3
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: LIST
48012: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48013: LD_ADDR_VAR 0 24
48017: PUSH
48018: LD_INT 3
48020: PUSH
48021: LD_INT 0
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 3
48030: PUSH
48031: LD_INT 1
48033: NEG
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 4
48041: PUSH
48042: LD_INT 1
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: LIST
48053: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48054: LD_ADDR_VAR 0 25
48058: PUSH
48059: LD_INT 3
48061: PUSH
48062: LD_INT 3
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 4
48071: PUSH
48072: LD_INT 3
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 3
48081: PUSH
48082: LD_INT 4
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: LIST
48093: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48094: LD_ADDR_VAR 0 26
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: LD_INT 3
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 1
48111: PUSH
48112: LD_INT 4
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 1
48121: NEG
48122: PUSH
48123: LD_INT 3
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: LIST
48134: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48135: LD_ADDR_VAR 0 27
48139: PUSH
48140: LD_INT 3
48142: NEG
48143: PUSH
48144: LD_INT 0
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 3
48153: NEG
48154: PUSH
48155: LD_INT 1
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 4
48164: NEG
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: LIST
48178: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48179: LD_ADDR_VAR 0 28
48183: PUSH
48184: LD_INT 3
48186: NEG
48187: PUSH
48188: LD_INT 3
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 3
48198: NEG
48199: PUSH
48200: LD_INT 4
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 4
48210: NEG
48211: PUSH
48212: LD_INT 3
48214: NEG
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: LIST
48224: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48225: LD_ADDR_VAR 0 29
48229: PUSH
48230: LD_INT 1
48232: NEG
48233: PUSH
48234: LD_INT 3
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 0
48244: PUSH
48245: LD_INT 3
48247: NEG
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: LD_INT 2
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 1
48266: NEG
48267: PUSH
48268: LD_INT 4
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: LD_INT 4
48281: NEG
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 1
48289: PUSH
48290: LD_INT 3
48292: NEG
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 1
48300: NEG
48301: PUSH
48302: LD_INT 5
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 0
48312: PUSH
48313: LD_INT 5
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: LD_INT 4
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: LD_INT 6
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: LD_INT 6
48349: NEG
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 1
48357: PUSH
48358: LD_INT 5
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48380: LD_ADDR_VAR 0 30
48384: PUSH
48385: LD_INT 2
48387: PUSH
48388: LD_INT 1
48390: NEG
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 3
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 3
48408: PUSH
48409: LD_INT 1
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 3
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 4
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 4
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 4
48449: PUSH
48450: LD_INT 1
48452: NEG
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 5
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 5
48470: PUSH
48471: LD_INT 1
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 5
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 6
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 6
48501: PUSH
48502: LD_INT 1
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48523: LD_ADDR_VAR 0 31
48527: PUSH
48528: LD_INT 3
48530: PUSH
48531: LD_INT 2
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 3
48540: PUSH
48541: LD_INT 3
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 2
48550: PUSH
48551: LD_INT 3
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 4
48560: PUSH
48561: LD_INT 3
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 4
48570: PUSH
48571: LD_INT 4
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 3
48580: PUSH
48581: LD_INT 4
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 5
48590: PUSH
48591: LD_INT 4
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 5
48600: PUSH
48601: LD_INT 5
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 4
48610: PUSH
48611: LD_INT 5
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 6
48620: PUSH
48621: LD_INT 5
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 6
48630: PUSH
48631: LD_INT 6
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 5
48640: PUSH
48641: LD_INT 6
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48662: LD_ADDR_VAR 0 32
48666: PUSH
48667: LD_INT 1
48669: PUSH
48670: LD_INT 3
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 0
48679: PUSH
48680: LD_INT 3
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: NEG
48690: PUSH
48691: LD_INT 2
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 1
48700: PUSH
48701: LD_INT 4
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 0
48710: PUSH
48711: LD_INT 4
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 1
48720: NEG
48721: PUSH
48722: LD_INT 3
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: LD_INT 5
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 0
48741: PUSH
48742: LD_INT 5
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: LD_INT 4
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 1
48762: PUSH
48763: LD_INT 6
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 0
48772: PUSH
48773: LD_INT 6
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 1
48782: NEG
48783: PUSH
48784: LD_INT 5
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48805: LD_ADDR_VAR 0 33
48809: PUSH
48810: LD_INT 2
48812: NEG
48813: PUSH
48814: LD_INT 1
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 3
48823: NEG
48824: PUSH
48825: LD_INT 0
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 3
48834: NEG
48835: PUSH
48836: LD_INT 1
48838: NEG
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 3
48846: NEG
48847: PUSH
48848: LD_INT 1
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 4
48857: NEG
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 4
48868: NEG
48869: PUSH
48870: LD_INT 1
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 4
48880: NEG
48881: PUSH
48882: LD_INT 1
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 5
48891: NEG
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 5
48902: NEG
48903: PUSH
48904: LD_INT 1
48906: NEG
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 5
48914: NEG
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 6
48925: NEG
48926: PUSH
48927: LD_INT 0
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 6
48936: NEG
48937: PUSH
48938: LD_INT 1
48940: NEG
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48960: LD_ADDR_VAR 0 34
48964: PUSH
48965: LD_INT 2
48967: NEG
48968: PUSH
48969: LD_INT 3
48971: NEG
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 3
48979: NEG
48980: PUSH
48981: LD_INT 2
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 3
48991: NEG
48992: PUSH
48993: LD_INT 3
48995: NEG
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 3
49003: NEG
49004: PUSH
49005: LD_INT 4
49007: NEG
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 4
49015: NEG
49016: PUSH
49017: LD_INT 3
49019: NEG
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 4
49027: NEG
49028: PUSH
49029: LD_INT 4
49031: NEG
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 4
49039: NEG
49040: PUSH
49041: LD_INT 5
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 5
49051: NEG
49052: PUSH
49053: LD_INT 4
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 5
49063: NEG
49064: PUSH
49065: LD_INT 5
49067: NEG
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 5
49075: NEG
49076: PUSH
49077: LD_INT 6
49079: NEG
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 6
49087: NEG
49088: PUSH
49089: LD_INT 5
49091: NEG
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 6
49099: NEG
49100: PUSH
49101: LD_INT 6
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49123: LD_ADDR_VAR 0 41
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: LD_INT 2
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: NEG
49142: PUSH
49143: LD_INT 3
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 1
49153: PUSH
49154: LD_INT 2
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: LIST
49166: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49167: LD_ADDR_VAR 0 42
49171: PUSH
49172: LD_INT 2
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 2
49184: PUSH
49185: LD_INT 1
49187: NEG
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 3
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: LIST
49207: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49208: LD_ADDR_VAR 0 43
49212: PUSH
49213: LD_INT 2
49215: PUSH
49216: LD_INT 2
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 3
49225: PUSH
49226: LD_INT 2
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 2
49235: PUSH
49236: LD_INT 3
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: LIST
49247: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49248: LD_ADDR_VAR 0 44
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: LD_INT 2
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 1
49265: PUSH
49266: LD_INT 3
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: NEG
49276: PUSH
49277: LD_INT 2
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: LIST
49288: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49289: LD_ADDR_VAR 0 45
49293: PUSH
49294: LD_INT 2
49296: NEG
49297: PUSH
49298: LD_INT 0
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 2
49307: NEG
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 3
49318: NEG
49319: PUSH
49320: LD_INT 1
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: LIST
49332: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49333: LD_ADDR_VAR 0 46
49337: PUSH
49338: LD_INT 2
49340: NEG
49341: PUSH
49342: LD_INT 2
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 2
49352: NEG
49353: PUSH
49354: LD_INT 3
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 3
49364: NEG
49365: PUSH
49366: LD_INT 2
49368: NEG
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: LIST
49378: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49379: LD_ADDR_VAR 0 47
49383: PUSH
49384: LD_INT 2
49386: NEG
49387: PUSH
49388: LD_INT 3
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: LD_INT 3
49402: NEG
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49412: LD_ADDR_VAR 0 48
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: LD_INT 2
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 2
49430: PUSH
49431: LD_INT 1
49433: NEG
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49443: LD_ADDR_VAR 0 49
49447: PUSH
49448: LD_INT 3
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 3
49460: PUSH
49461: LD_INT 2
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49472: LD_ADDR_VAR 0 50
49476: PUSH
49477: LD_INT 2
49479: PUSH
49480: LD_INT 3
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 1
49489: PUSH
49490: LD_INT 3
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49501: LD_ADDR_VAR 0 51
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: LD_INT 2
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 2
49519: NEG
49520: PUSH
49521: LD_INT 1
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49532: LD_ADDR_VAR 0 52
49536: PUSH
49537: LD_INT 3
49539: NEG
49540: PUSH
49541: LD_INT 1
49543: NEG
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 3
49551: NEG
49552: PUSH
49553: LD_INT 2
49555: NEG
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49565: LD_ADDR_VAR 0 53
49569: PUSH
49570: LD_INT 1
49572: NEG
49573: PUSH
49574: LD_INT 3
49576: NEG
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: LD_INT 3
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: LD_INT 2
49598: NEG
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: LIST
49608: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49609: LD_ADDR_VAR 0 54
49613: PUSH
49614: LD_INT 2
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 3
49627: PUSH
49628: LD_INT 0
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 3
49637: PUSH
49638: LD_INT 1
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: LIST
49649: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49650: LD_ADDR_VAR 0 55
49654: PUSH
49655: LD_INT 3
49657: PUSH
49658: LD_INT 2
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 3
49667: PUSH
49668: LD_INT 3
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 2
49677: PUSH
49678: LD_INT 3
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: LIST
49689: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49690: LD_ADDR_VAR 0 56
49694: PUSH
49695: LD_INT 1
49697: PUSH
49698: LD_INT 3
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 0
49707: PUSH
49708: LD_INT 3
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 1
49717: NEG
49718: PUSH
49719: LD_INT 2
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: LIST
49730: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49731: LD_ADDR_VAR 0 57
49735: PUSH
49736: LD_INT 2
49738: NEG
49739: PUSH
49740: LD_INT 1
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 3
49749: NEG
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 3
49760: NEG
49761: PUSH
49762: LD_INT 1
49764: NEG
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: LIST
49774: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49775: LD_ADDR_VAR 0 58
49779: PUSH
49780: LD_INT 2
49782: NEG
49783: PUSH
49784: LD_INT 3
49786: NEG
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 3
49794: NEG
49795: PUSH
49796: LD_INT 2
49798: NEG
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 3
49806: NEG
49807: PUSH
49808: LD_INT 3
49810: NEG
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: LIST
49820: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49821: LD_ADDR_VAR 0 59
49825: PUSH
49826: LD_INT 1
49828: NEG
49829: PUSH
49830: LD_INT 2
49832: NEG
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 0
49840: PUSH
49841: LD_INT 2
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: LD_INT 1
49854: NEG
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: LIST
49864: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49865: LD_ADDR_VAR 0 60
49869: PUSH
49870: LD_INT 1
49872: PUSH
49873: LD_INT 1
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 2
49883: PUSH
49884: LD_INT 0
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 2
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: LIST
49905: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49906: LD_ADDR_VAR 0 61
49910: PUSH
49911: LD_INT 2
49913: PUSH
49914: LD_INT 1
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 2
49923: PUSH
49924: LD_INT 2
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 1
49933: PUSH
49934: LD_INT 2
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: LIST
49945: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49946: LD_ADDR_VAR 0 62
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: LD_INT 2
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: LD_INT 2
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 1
49973: NEG
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: LIST
49986: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49987: LD_ADDR_VAR 0 63
49991: PUSH
49992: LD_INT 1
49994: NEG
49995: PUSH
49996: LD_INT 1
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 2
50005: NEG
50006: PUSH
50007: LD_INT 0
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 2
50016: NEG
50017: PUSH
50018: LD_INT 1
50020: NEG
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: LIST
50030: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50031: LD_ADDR_VAR 0 64
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: LD_INT 2
50042: NEG
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 2
50050: NEG
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 2
50062: NEG
50063: PUSH
50064: LD_INT 2
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: LIST
50076: ST_TO_ADDR
// end ; 2 :
50077: GO 53343
50079: LD_INT 2
50081: DOUBLE
50082: EQUAL
50083: IFTRUE 50087
50085: GO 53342
50087: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50088: LD_ADDR_VAR 0 29
50092: PUSH
50093: LD_INT 4
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 4
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 5
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 5
50126: PUSH
50127: LD_INT 1
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 4
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 3
50146: PUSH
50147: LD_INT 0
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 3
50156: PUSH
50157: LD_INT 1
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 3
50167: PUSH
50168: LD_INT 2
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 5
50178: PUSH
50179: LD_INT 2
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 3
50188: PUSH
50189: LD_INT 3
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 3
50198: PUSH
50199: LD_INT 2
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 4
50208: PUSH
50209: LD_INT 3
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 4
50218: PUSH
50219: LD_INT 4
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 3
50228: PUSH
50229: LD_INT 4
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 2
50238: PUSH
50239: LD_INT 3
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 2
50248: PUSH
50249: LD_INT 2
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 4
50258: PUSH
50259: LD_INT 2
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 2
50268: PUSH
50269: LD_INT 4
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: LD_INT 4
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: LD_INT 3
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 1
50298: PUSH
50299: LD_INT 4
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 1
50308: PUSH
50309: LD_INT 5
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 0
50318: PUSH
50319: LD_INT 5
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: LD_INT 4
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 1
50339: NEG
50340: PUSH
50341: LD_INT 3
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 2
50350: PUSH
50351: LD_INT 5
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 2
50360: NEG
50361: PUSH
50362: LD_INT 3
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 3
50371: NEG
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 3
50382: NEG
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 2
50394: NEG
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 2
50405: NEG
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 3
50416: NEG
50417: PUSH
50418: LD_INT 1
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 4
50427: NEG
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 4
50438: NEG
50439: PUSH
50440: LD_INT 1
50442: NEG
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 4
50450: NEG
50451: PUSH
50452: LD_INT 2
50454: NEG
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 2
50462: NEG
50463: PUSH
50464: LD_INT 2
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 4
50473: NEG
50474: PUSH
50475: LD_INT 4
50477: NEG
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 4
50485: NEG
50486: PUSH
50487: LD_INT 5
50489: NEG
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 3
50497: NEG
50498: PUSH
50499: LD_INT 4
50501: NEG
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 3
50509: NEG
50510: PUSH
50511: LD_INT 3
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 4
50521: NEG
50522: PUSH
50523: LD_INT 3
50525: NEG
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 5
50533: NEG
50534: PUSH
50535: LD_INT 4
50537: NEG
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 5
50545: NEG
50546: PUSH
50547: LD_INT 5
50549: NEG
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 3
50557: NEG
50558: PUSH
50559: LD_INT 5
50561: NEG
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 5
50569: NEG
50570: PUSH
50571: LD_INT 3
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50626: LD_ADDR_VAR 0 30
50630: PUSH
50631: LD_INT 4
50633: PUSH
50634: LD_INT 4
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 4
50643: PUSH
50644: LD_INT 3
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 5
50653: PUSH
50654: LD_INT 4
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 5
50663: PUSH
50664: LD_INT 5
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 4
50673: PUSH
50674: LD_INT 5
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 3
50683: PUSH
50684: LD_INT 4
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 3
50693: PUSH
50694: LD_INT 3
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 5
50703: PUSH
50704: LD_INT 3
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 3
50713: PUSH
50714: LD_INT 5
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 0
50723: PUSH
50724: LD_INT 3
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 0
50733: PUSH
50734: LD_INT 2
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 1
50743: PUSH
50744: LD_INT 3
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 1
50753: PUSH
50754: LD_INT 4
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 0
50763: PUSH
50764: LD_INT 4
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 1
50773: NEG
50774: PUSH
50775: LD_INT 3
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 1
50784: NEG
50785: PUSH
50786: LD_INT 2
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 2
50795: PUSH
50796: LD_INT 4
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 2
50805: NEG
50806: PUSH
50807: LD_INT 2
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 4
50816: NEG
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 4
50827: NEG
50828: PUSH
50829: LD_INT 1
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 3
50839: NEG
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 3
50850: NEG
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 4
50861: NEG
50862: PUSH
50863: LD_INT 1
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 5
50872: NEG
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 5
50883: NEG
50884: PUSH
50885: LD_INT 1
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 5
50895: NEG
50896: PUSH
50897: LD_INT 2
50899: NEG
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 3
50907: NEG
50908: PUSH
50909: LD_INT 2
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 3
50918: NEG
50919: PUSH
50920: LD_INT 3
50922: NEG
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 3
50930: NEG
50931: PUSH
50932: LD_INT 4
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 2
50942: NEG
50943: PUSH
50944: LD_INT 3
50946: NEG
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 2
50954: NEG
50955: PUSH
50956: LD_INT 2
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 3
50966: NEG
50967: PUSH
50968: LD_INT 2
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 4
50978: NEG
50979: PUSH
50980: LD_INT 3
50982: NEG
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 4
50990: NEG
50991: PUSH
50992: LD_INT 4
50994: NEG
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 2
51002: NEG
51003: PUSH
51004: LD_INT 4
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 4
51014: NEG
51015: PUSH
51016: LD_INT 2
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: LD_INT 4
51029: NEG
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: LD_INT 5
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: LD_INT 4
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 1
51059: PUSH
51060: LD_INT 3
51062: NEG
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: LD_INT 3
51073: NEG
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 1
51081: NEG
51082: PUSH
51083: LD_INT 4
51085: NEG
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 1
51093: NEG
51094: PUSH
51095: LD_INT 5
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 2
51105: PUSH
51106: LD_INT 3
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 2
51116: NEG
51117: PUSH
51118: LD_INT 5
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51173: LD_ADDR_VAR 0 31
51177: PUSH
51178: LD_INT 0
51180: PUSH
51181: LD_INT 4
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: LD_INT 3
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: LD_INT 4
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: LD_INT 5
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: LD_INT 5
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: LD_INT 4
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: LD_INT 3
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 2
51252: PUSH
51253: LD_INT 5
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 2
51262: NEG
51263: PUSH
51264: LD_INT 3
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 3
51273: NEG
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 3
51284: NEG
51285: PUSH
51286: LD_INT 1
51288: NEG
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 2
51296: NEG
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 2
51307: NEG
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 3
51318: NEG
51319: PUSH
51320: LD_INT 1
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 4
51329: NEG
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 4
51340: NEG
51341: PUSH
51342: LD_INT 1
51344: NEG
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 4
51352: NEG
51353: PUSH
51354: LD_INT 2
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 2
51364: NEG
51365: PUSH
51366: LD_INT 2
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 4
51375: NEG
51376: PUSH
51377: LD_INT 4
51379: NEG
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 4
51387: NEG
51388: PUSH
51389: LD_INT 5
51391: NEG
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 3
51399: NEG
51400: PUSH
51401: LD_INT 4
51403: NEG
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 3
51411: NEG
51412: PUSH
51413: LD_INT 3
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 4
51423: NEG
51424: PUSH
51425: LD_INT 3
51427: NEG
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 5
51435: NEG
51436: PUSH
51437: LD_INT 4
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 5
51447: NEG
51448: PUSH
51449: LD_INT 5
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 3
51459: NEG
51460: PUSH
51461: LD_INT 5
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 5
51471: NEG
51472: PUSH
51473: LD_INT 3
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 0
51483: PUSH
51484: LD_INT 3
51486: NEG
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: LD_INT 4
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: LD_INT 3
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: LD_INT 2
51519: NEG
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: LD_INT 2
51530: NEG
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 1
51538: NEG
51539: PUSH
51540: LD_INT 3
51542: NEG
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 1
51550: NEG
51551: PUSH
51552: LD_INT 4
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 2
51562: PUSH
51563: LD_INT 2
51565: NEG
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 2
51573: NEG
51574: PUSH
51575: LD_INT 4
51577: NEG
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 4
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 4
51595: PUSH
51596: LD_INT 1
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 5
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 5
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 4
51626: PUSH
51627: LD_INT 1
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 3
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 3
51646: PUSH
51647: LD_INT 1
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 3
51657: PUSH
51658: LD_INT 2
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 5
51668: PUSH
51669: LD_INT 2
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51723: LD_ADDR_VAR 0 32
51727: PUSH
51728: LD_INT 4
51730: NEG
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 4
51741: NEG
51742: PUSH
51743: LD_INT 1
51745: NEG
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 3
51753: NEG
51754: PUSH
51755: LD_INT 0
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 3
51764: NEG
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 4
51775: NEG
51776: PUSH
51777: LD_INT 1
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 5
51786: NEG
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 5
51797: NEG
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 5
51809: NEG
51810: PUSH
51811: LD_INT 2
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 3
51821: NEG
51822: PUSH
51823: LD_INT 2
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 3
51832: NEG
51833: PUSH
51834: LD_INT 3
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 3
51844: NEG
51845: PUSH
51846: LD_INT 4
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 2
51856: NEG
51857: PUSH
51858: LD_INT 3
51860: NEG
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 2
51868: NEG
51869: PUSH
51870: LD_INT 2
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 3
51880: NEG
51881: PUSH
51882: LD_INT 2
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 4
51892: NEG
51893: PUSH
51894: LD_INT 3
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 4
51904: NEG
51905: PUSH
51906: LD_INT 4
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 2
51916: NEG
51917: PUSH
51918: LD_INT 4
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 4
51928: NEG
51929: PUSH
51930: LD_INT 2
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: LD_INT 4
51943: NEG
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: LD_INT 5
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 1
51962: PUSH
51963: LD_INT 4
51965: NEG
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: LD_INT 3
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: LD_INT 3
51987: NEG
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: LD_INT 4
51999: NEG
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 1
52007: NEG
52008: PUSH
52009: LD_INT 5
52011: NEG
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 2
52019: PUSH
52020: LD_INT 3
52022: NEG
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 2
52030: NEG
52031: PUSH
52032: LD_INT 5
52034: NEG
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 3
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 3
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 4
52063: PUSH
52064: LD_INT 0
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 4
52073: PUSH
52074: LD_INT 1
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 3
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 2
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 2
52103: PUSH
52104: LD_INT 1
52106: NEG
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 2
52114: PUSH
52115: LD_INT 2
52117: NEG
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 4
52125: PUSH
52126: LD_INT 2
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 4
52135: PUSH
52136: LD_INT 4
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 4
52145: PUSH
52146: LD_INT 3
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 5
52155: PUSH
52156: LD_INT 4
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 5
52165: PUSH
52166: LD_INT 5
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 4
52175: PUSH
52176: LD_INT 5
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 3
52185: PUSH
52186: LD_INT 4
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 3
52195: PUSH
52196: LD_INT 3
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 5
52205: PUSH
52206: LD_INT 3
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 3
52215: PUSH
52216: LD_INT 5
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52270: LD_ADDR_VAR 0 33
52274: PUSH
52275: LD_INT 4
52277: NEG
52278: PUSH
52279: LD_INT 4
52281: NEG
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 4
52289: NEG
52290: PUSH
52291: LD_INT 5
52293: NEG
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 3
52301: NEG
52302: PUSH
52303: LD_INT 4
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 3
52313: NEG
52314: PUSH
52315: LD_INT 3
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 4
52325: NEG
52326: PUSH
52327: LD_INT 3
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 5
52337: NEG
52338: PUSH
52339: LD_INT 4
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 5
52349: NEG
52350: PUSH
52351: LD_INT 5
52353: NEG
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 3
52361: NEG
52362: PUSH
52363: LD_INT 5
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 5
52373: NEG
52374: PUSH
52375: LD_INT 3
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: LD_INT 3
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: LD_INT 4
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 1
52407: PUSH
52408: LD_INT 3
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 1
52418: PUSH
52419: LD_INT 2
52421: NEG
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 0
52429: PUSH
52430: LD_INT 2
52432: NEG
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: LD_INT 3
52444: NEG
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: LD_INT 4
52456: NEG
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 2
52464: PUSH
52465: LD_INT 2
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 2
52475: NEG
52476: PUSH
52477: LD_INT 4
52479: NEG
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 4
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 4
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 5
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 5
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 4
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 3
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 3
52548: PUSH
52549: LD_INT 1
52551: NEG
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 3
52559: PUSH
52560: LD_INT 2
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 5
52570: PUSH
52571: LD_INT 2
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 3
52580: PUSH
52581: LD_INT 3
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 3
52590: PUSH
52591: LD_INT 2
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 4
52600: PUSH
52601: LD_INT 3
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 4
52610: PUSH
52611: LD_INT 4
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 3
52620: PUSH
52621: LD_INT 4
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 2
52630: PUSH
52631: LD_INT 3
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 2
52640: PUSH
52641: LD_INT 2
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 4
52650: PUSH
52651: LD_INT 2
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 2
52660: PUSH
52661: LD_INT 4
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: LD_INT 4
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: LD_INT 3
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 1
52690: PUSH
52691: LD_INT 4
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 1
52700: PUSH
52701: LD_INT 5
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: LD_INT 5
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: LD_INT 4
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: LD_INT 3
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 2
52742: PUSH
52743: LD_INT 5
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 2
52752: NEG
52753: PUSH
52754: LD_INT 3
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52808: LD_ADDR_VAR 0 34
52812: PUSH
52813: LD_INT 0
52815: PUSH
52816: LD_INT 4
52818: NEG
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: LD_INT 5
52829: NEG
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: PUSH
52838: LD_INT 4
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: LD_INT 3
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: LD_INT 3
52862: NEG
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: LD_INT 4
52874: NEG
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 1
52882: NEG
52883: PUSH
52884: LD_INT 5
52886: NEG
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 2
52894: PUSH
52895: LD_INT 3
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 2
52905: NEG
52906: PUSH
52907: LD_INT 5
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 3
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 3
52927: PUSH
52928: LD_INT 1
52930: NEG
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 4
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 4
52948: PUSH
52949: LD_INT 1
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 3
52958: PUSH
52959: LD_INT 1
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 2
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 2
52978: PUSH
52979: LD_INT 1
52981: NEG
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 2
52989: PUSH
52990: LD_INT 2
52992: NEG
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 4
53000: PUSH
53001: LD_INT 2
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 4
53010: PUSH
53011: LD_INT 4
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 4
53020: PUSH
53021: LD_INT 3
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 5
53030: PUSH
53031: LD_INT 4
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 5
53040: PUSH
53041: LD_INT 5
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 4
53050: PUSH
53051: LD_INT 5
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 3
53060: PUSH
53061: LD_INT 4
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 3
53070: PUSH
53071: LD_INT 3
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 5
53080: PUSH
53081: LD_INT 3
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 3
53090: PUSH
53091: LD_INT 5
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: LD_INT 3
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 0
53110: PUSH
53111: LD_INT 2
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: LD_INT 3
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: LD_INT 4
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 0
53140: PUSH
53141: LD_INT 4
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: LD_INT 3
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: LD_INT 2
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 2
53172: PUSH
53173: LD_INT 4
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 2
53182: NEG
53183: PUSH
53184: LD_INT 2
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 4
53193: NEG
53194: PUSH
53195: LD_INT 0
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 4
53204: NEG
53205: PUSH
53206: LD_INT 1
53208: NEG
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 3
53216: NEG
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 3
53227: NEG
53228: PUSH
53229: LD_INT 1
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 4
53238: NEG
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 5
53249: NEG
53250: PUSH
53251: LD_INT 0
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 5
53260: NEG
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 5
53272: NEG
53273: PUSH
53274: LD_INT 2
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 3
53284: NEG
53285: PUSH
53286: LD_INT 2
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: ST_TO_ADDR
// end ; end ;
53340: GO 53343
53342: POP
// case btype of b_depot , b_warehouse :
53343: LD_VAR 0 1
53347: PUSH
53348: LD_INT 0
53350: DOUBLE
53351: EQUAL
53352: IFTRUE 53362
53354: LD_INT 1
53356: DOUBLE
53357: EQUAL
53358: IFTRUE 53362
53360: GO 53563
53362: POP
// case nation of nation_american :
53363: LD_VAR 0 5
53367: PUSH
53368: LD_INT 1
53370: DOUBLE
53371: EQUAL
53372: IFTRUE 53376
53374: GO 53432
53376: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53377: LD_ADDR_VAR 0 9
53381: PUSH
53382: LD_VAR 0 11
53386: PUSH
53387: LD_VAR 0 12
53391: PUSH
53392: LD_VAR 0 13
53396: PUSH
53397: LD_VAR 0 14
53401: PUSH
53402: LD_VAR 0 15
53406: PUSH
53407: LD_VAR 0 16
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: PUSH
53420: LD_VAR 0 4
53424: PUSH
53425: LD_INT 1
53427: PLUS
53428: ARRAY
53429: ST_TO_ADDR
53430: GO 53561
53432: LD_INT 2
53434: DOUBLE
53435: EQUAL
53436: IFTRUE 53440
53438: GO 53496
53440: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53441: LD_ADDR_VAR 0 9
53445: PUSH
53446: LD_VAR 0 17
53450: PUSH
53451: LD_VAR 0 18
53455: PUSH
53456: LD_VAR 0 19
53460: PUSH
53461: LD_VAR 0 20
53465: PUSH
53466: LD_VAR 0 21
53470: PUSH
53471: LD_VAR 0 22
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: PUSH
53484: LD_VAR 0 4
53488: PUSH
53489: LD_INT 1
53491: PLUS
53492: ARRAY
53493: ST_TO_ADDR
53494: GO 53561
53496: LD_INT 3
53498: DOUBLE
53499: EQUAL
53500: IFTRUE 53504
53502: GO 53560
53504: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53505: LD_ADDR_VAR 0 9
53509: PUSH
53510: LD_VAR 0 23
53514: PUSH
53515: LD_VAR 0 24
53519: PUSH
53520: LD_VAR 0 25
53524: PUSH
53525: LD_VAR 0 26
53529: PUSH
53530: LD_VAR 0 27
53534: PUSH
53535: LD_VAR 0 28
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: PUSH
53548: LD_VAR 0 4
53552: PUSH
53553: LD_INT 1
53555: PLUS
53556: ARRAY
53557: ST_TO_ADDR
53558: GO 53561
53560: POP
53561: GO 54116
53563: LD_INT 2
53565: DOUBLE
53566: EQUAL
53567: IFTRUE 53577
53569: LD_INT 3
53571: DOUBLE
53572: EQUAL
53573: IFTRUE 53577
53575: GO 53633
53577: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53578: LD_ADDR_VAR 0 9
53582: PUSH
53583: LD_VAR 0 29
53587: PUSH
53588: LD_VAR 0 30
53592: PUSH
53593: LD_VAR 0 31
53597: PUSH
53598: LD_VAR 0 32
53602: PUSH
53603: LD_VAR 0 33
53607: PUSH
53608: LD_VAR 0 34
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: PUSH
53621: LD_VAR 0 4
53625: PUSH
53626: LD_INT 1
53628: PLUS
53629: ARRAY
53630: ST_TO_ADDR
53631: GO 54116
53633: LD_INT 16
53635: DOUBLE
53636: EQUAL
53637: IFTRUE 53695
53639: LD_INT 17
53641: DOUBLE
53642: EQUAL
53643: IFTRUE 53695
53645: LD_INT 18
53647: DOUBLE
53648: EQUAL
53649: IFTRUE 53695
53651: LD_INT 19
53653: DOUBLE
53654: EQUAL
53655: IFTRUE 53695
53657: LD_INT 22
53659: DOUBLE
53660: EQUAL
53661: IFTRUE 53695
53663: LD_INT 20
53665: DOUBLE
53666: EQUAL
53667: IFTRUE 53695
53669: LD_INT 21
53671: DOUBLE
53672: EQUAL
53673: IFTRUE 53695
53675: LD_INT 23
53677: DOUBLE
53678: EQUAL
53679: IFTRUE 53695
53681: LD_INT 24
53683: DOUBLE
53684: EQUAL
53685: IFTRUE 53695
53687: LD_INT 25
53689: DOUBLE
53690: EQUAL
53691: IFTRUE 53695
53693: GO 53751
53695: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53696: LD_ADDR_VAR 0 9
53700: PUSH
53701: LD_VAR 0 35
53705: PUSH
53706: LD_VAR 0 36
53710: PUSH
53711: LD_VAR 0 37
53715: PUSH
53716: LD_VAR 0 38
53720: PUSH
53721: LD_VAR 0 39
53725: PUSH
53726: LD_VAR 0 40
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: PUSH
53739: LD_VAR 0 4
53743: PUSH
53744: LD_INT 1
53746: PLUS
53747: ARRAY
53748: ST_TO_ADDR
53749: GO 54116
53751: LD_INT 6
53753: DOUBLE
53754: EQUAL
53755: IFTRUE 53807
53757: LD_INT 7
53759: DOUBLE
53760: EQUAL
53761: IFTRUE 53807
53763: LD_INT 8
53765: DOUBLE
53766: EQUAL
53767: IFTRUE 53807
53769: LD_INT 13
53771: DOUBLE
53772: EQUAL
53773: IFTRUE 53807
53775: LD_INT 12
53777: DOUBLE
53778: EQUAL
53779: IFTRUE 53807
53781: LD_INT 15
53783: DOUBLE
53784: EQUAL
53785: IFTRUE 53807
53787: LD_INT 11
53789: DOUBLE
53790: EQUAL
53791: IFTRUE 53807
53793: LD_INT 14
53795: DOUBLE
53796: EQUAL
53797: IFTRUE 53807
53799: LD_INT 10
53801: DOUBLE
53802: EQUAL
53803: IFTRUE 53807
53805: GO 53863
53807: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53808: LD_ADDR_VAR 0 9
53812: PUSH
53813: LD_VAR 0 41
53817: PUSH
53818: LD_VAR 0 42
53822: PUSH
53823: LD_VAR 0 43
53827: PUSH
53828: LD_VAR 0 44
53832: PUSH
53833: LD_VAR 0 45
53837: PUSH
53838: LD_VAR 0 46
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: PUSH
53851: LD_VAR 0 4
53855: PUSH
53856: LD_INT 1
53858: PLUS
53859: ARRAY
53860: ST_TO_ADDR
53861: GO 54116
53863: LD_INT 36
53865: DOUBLE
53866: EQUAL
53867: IFTRUE 53871
53869: GO 53927
53871: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53872: LD_ADDR_VAR 0 9
53876: PUSH
53877: LD_VAR 0 47
53881: PUSH
53882: LD_VAR 0 48
53886: PUSH
53887: LD_VAR 0 49
53891: PUSH
53892: LD_VAR 0 50
53896: PUSH
53897: LD_VAR 0 51
53901: PUSH
53902: LD_VAR 0 52
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: PUSH
53915: LD_VAR 0 4
53919: PUSH
53920: LD_INT 1
53922: PLUS
53923: ARRAY
53924: ST_TO_ADDR
53925: GO 54116
53927: LD_INT 4
53929: DOUBLE
53930: EQUAL
53931: IFTRUE 53953
53933: LD_INT 5
53935: DOUBLE
53936: EQUAL
53937: IFTRUE 53953
53939: LD_INT 34
53941: DOUBLE
53942: EQUAL
53943: IFTRUE 53953
53945: LD_INT 37
53947: DOUBLE
53948: EQUAL
53949: IFTRUE 53953
53951: GO 54009
53953: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53954: LD_ADDR_VAR 0 9
53958: PUSH
53959: LD_VAR 0 53
53963: PUSH
53964: LD_VAR 0 54
53968: PUSH
53969: LD_VAR 0 55
53973: PUSH
53974: LD_VAR 0 56
53978: PUSH
53979: LD_VAR 0 57
53983: PUSH
53984: LD_VAR 0 58
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: PUSH
53997: LD_VAR 0 4
54001: PUSH
54002: LD_INT 1
54004: PLUS
54005: ARRAY
54006: ST_TO_ADDR
54007: GO 54116
54009: LD_INT 31
54011: DOUBLE
54012: EQUAL
54013: IFTRUE 54059
54015: LD_INT 32
54017: DOUBLE
54018: EQUAL
54019: IFTRUE 54059
54021: LD_INT 33
54023: DOUBLE
54024: EQUAL
54025: IFTRUE 54059
54027: LD_INT 27
54029: DOUBLE
54030: EQUAL
54031: IFTRUE 54059
54033: LD_INT 26
54035: DOUBLE
54036: EQUAL
54037: IFTRUE 54059
54039: LD_INT 28
54041: DOUBLE
54042: EQUAL
54043: IFTRUE 54059
54045: LD_INT 29
54047: DOUBLE
54048: EQUAL
54049: IFTRUE 54059
54051: LD_INT 30
54053: DOUBLE
54054: EQUAL
54055: IFTRUE 54059
54057: GO 54115
54059: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54060: LD_ADDR_VAR 0 9
54064: PUSH
54065: LD_VAR 0 59
54069: PUSH
54070: LD_VAR 0 60
54074: PUSH
54075: LD_VAR 0 61
54079: PUSH
54080: LD_VAR 0 62
54084: PUSH
54085: LD_VAR 0 63
54089: PUSH
54090: LD_VAR 0 64
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: PUSH
54103: LD_VAR 0 4
54107: PUSH
54108: LD_INT 1
54110: PLUS
54111: ARRAY
54112: ST_TO_ADDR
54113: GO 54116
54115: POP
// temp_list2 = [ ] ;
54116: LD_ADDR_VAR 0 10
54120: PUSH
54121: EMPTY
54122: ST_TO_ADDR
// for i in temp_list do
54123: LD_ADDR_VAR 0 8
54127: PUSH
54128: LD_VAR 0 9
54132: PUSH
54133: FOR_IN
54134: IFFALSE 54186
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54136: LD_ADDR_VAR 0 10
54140: PUSH
54141: LD_VAR 0 10
54145: PUSH
54146: LD_VAR 0 8
54150: PUSH
54151: LD_INT 1
54153: ARRAY
54154: PUSH
54155: LD_VAR 0 2
54159: PLUS
54160: PUSH
54161: LD_VAR 0 8
54165: PUSH
54166: LD_INT 2
54168: ARRAY
54169: PUSH
54170: LD_VAR 0 3
54174: PLUS
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: EMPTY
54181: LIST
54182: ADD
54183: ST_TO_ADDR
54184: GO 54133
54186: POP
54187: POP
// result = temp_list2 ;
54188: LD_ADDR_VAR 0 7
54192: PUSH
54193: LD_VAR 0 10
54197: ST_TO_ADDR
// end ;
54198: LD_VAR 0 7
54202: RET
// export function EnemyInRange ( unit , dist ) ; begin
54203: LD_INT 0
54205: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54206: LD_ADDR_VAR 0 3
54210: PUSH
54211: LD_VAR 0 1
54215: PPUSH
54216: CALL_OW 255
54220: PPUSH
54221: LD_VAR 0 1
54225: PPUSH
54226: CALL_OW 250
54230: PPUSH
54231: LD_VAR 0 1
54235: PPUSH
54236: CALL_OW 251
54240: PPUSH
54241: LD_VAR 0 2
54245: PPUSH
54246: CALL 27605 0 4
54250: PUSH
54251: LD_INT 4
54253: ARRAY
54254: ST_TO_ADDR
// end ;
54255: LD_VAR 0 3
54259: RET
// export function PlayerSeeMe ( unit ) ; begin
54260: LD_INT 0
54262: PPUSH
// result := See ( your_side , unit ) ;
54263: LD_ADDR_VAR 0 2
54267: PUSH
54268: LD_OWVAR 2
54272: PPUSH
54273: LD_VAR 0 1
54277: PPUSH
54278: CALL_OW 292
54282: ST_TO_ADDR
// end ;
54283: LD_VAR 0 2
54287: RET
// export function ReverseDir ( unit ) ; begin
54288: LD_INT 0
54290: PPUSH
// if not unit then
54291: LD_VAR 0 1
54295: NOT
54296: IFFALSE 54300
// exit ;
54298: GO 54323
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54300: LD_ADDR_VAR 0 2
54304: PUSH
54305: LD_VAR 0 1
54309: PPUSH
54310: CALL_OW 254
54314: PUSH
54315: LD_INT 3
54317: PLUS
54318: PUSH
54319: LD_INT 6
54321: MOD
54322: ST_TO_ADDR
// end ;
54323: LD_VAR 0 2
54327: RET
// export function ReverseArray ( array ) ; var i ; begin
54328: LD_INT 0
54330: PPUSH
54331: PPUSH
// if not array then
54332: LD_VAR 0 1
54336: NOT
54337: IFFALSE 54341
// exit ;
54339: GO 54396
// result := [ ] ;
54341: LD_ADDR_VAR 0 2
54345: PUSH
54346: EMPTY
54347: ST_TO_ADDR
// for i := array downto 1 do
54348: LD_ADDR_VAR 0 3
54352: PUSH
54353: DOUBLE
54354: LD_VAR 0 1
54358: INC
54359: ST_TO_ADDR
54360: LD_INT 1
54362: PUSH
54363: FOR_DOWNTO
54364: IFFALSE 54394
// result := Join ( result , array [ i ] ) ;
54366: LD_ADDR_VAR 0 2
54370: PUSH
54371: LD_VAR 0 2
54375: PPUSH
54376: LD_VAR 0 1
54380: PUSH
54381: LD_VAR 0 3
54385: ARRAY
54386: PPUSH
54387: CALL 59021 0 2
54391: ST_TO_ADDR
54392: GO 54363
54394: POP
54395: POP
// end ;
54396: LD_VAR 0 2
54400: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
54401: LD_INT 0
54403: PPUSH
54404: PPUSH
54405: PPUSH
54406: PPUSH
54407: PPUSH
54408: PPUSH
// if not unit or not hexes then
54409: LD_VAR 0 1
54413: NOT
54414: PUSH
54415: LD_VAR 0 2
54419: NOT
54420: OR
54421: IFFALSE 54425
// exit ;
54423: GO 54548
// dist := 9999 ;
54425: LD_ADDR_VAR 0 5
54429: PUSH
54430: LD_INT 9999
54432: ST_TO_ADDR
// for i = 1 to hexes do
54433: LD_ADDR_VAR 0 4
54437: PUSH
54438: DOUBLE
54439: LD_INT 1
54441: DEC
54442: ST_TO_ADDR
54443: LD_VAR 0 2
54447: PUSH
54448: FOR_TO
54449: IFFALSE 54536
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54451: LD_ADDR_VAR 0 6
54455: PUSH
54456: LD_VAR 0 1
54460: PPUSH
54461: LD_VAR 0 2
54465: PUSH
54466: LD_VAR 0 4
54470: ARRAY
54471: PUSH
54472: LD_INT 1
54474: ARRAY
54475: PPUSH
54476: LD_VAR 0 2
54480: PUSH
54481: LD_VAR 0 4
54485: ARRAY
54486: PUSH
54487: LD_INT 2
54489: ARRAY
54490: PPUSH
54491: CALL_OW 297
54495: ST_TO_ADDR
// if tdist < dist then
54496: LD_VAR 0 6
54500: PUSH
54501: LD_VAR 0 5
54505: LESS
54506: IFFALSE 54534
// begin hex := hexes [ i ] ;
54508: LD_ADDR_VAR 0 8
54512: PUSH
54513: LD_VAR 0 2
54517: PUSH
54518: LD_VAR 0 4
54522: ARRAY
54523: ST_TO_ADDR
// dist := tdist ;
54524: LD_ADDR_VAR 0 5
54528: PUSH
54529: LD_VAR 0 6
54533: ST_TO_ADDR
// end ; end ;
54534: GO 54448
54536: POP
54537: POP
// result := hex ;
54538: LD_ADDR_VAR 0 3
54542: PUSH
54543: LD_VAR 0 8
54547: ST_TO_ADDR
// end ;
54548: LD_VAR 0 3
54552: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54553: LD_INT 0
54555: PPUSH
54556: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54557: LD_VAR 0 1
54561: NOT
54562: PUSH
54563: LD_VAR 0 1
54567: PUSH
54568: LD_INT 21
54570: PUSH
54571: LD_INT 2
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 23
54580: PUSH
54581: LD_INT 2
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PPUSH
54592: CALL_OW 69
54596: IN
54597: NOT
54598: OR
54599: IFFALSE 54603
// exit ;
54601: GO 54650
// for i = 1 to 3 do
54603: LD_ADDR_VAR 0 3
54607: PUSH
54608: DOUBLE
54609: LD_INT 1
54611: DEC
54612: ST_TO_ADDR
54613: LD_INT 3
54615: PUSH
54616: FOR_TO
54617: IFFALSE 54648
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54619: LD_VAR 0 1
54623: PPUSH
54624: CALL_OW 250
54628: PPUSH
54629: LD_VAR 0 1
54633: PPUSH
54634: CALL_OW 251
54638: PPUSH
54639: LD_INT 1
54641: PPUSH
54642: CALL_OW 453
54646: GO 54616
54648: POP
54649: POP
// end ;
54650: LD_VAR 0 2
54654: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54655: LD_INT 0
54657: PPUSH
54658: PPUSH
54659: PPUSH
54660: PPUSH
54661: PPUSH
54662: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54663: LD_VAR 0 1
54667: NOT
54668: PUSH
54669: LD_VAR 0 2
54673: NOT
54674: OR
54675: PUSH
54676: LD_VAR 0 1
54680: PPUSH
54681: CALL_OW 314
54685: OR
54686: IFFALSE 54690
// exit ;
54688: GO 55131
// x := GetX ( enemy_unit ) ;
54690: LD_ADDR_VAR 0 7
54694: PUSH
54695: LD_VAR 0 2
54699: PPUSH
54700: CALL_OW 250
54704: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54705: LD_ADDR_VAR 0 8
54709: PUSH
54710: LD_VAR 0 2
54714: PPUSH
54715: CALL_OW 251
54719: ST_TO_ADDR
// if not x or not y then
54720: LD_VAR 0 7
54724: NOT
54725: PUSH
54726: LD_VAR 0 8
54730: NOT
54731: OR
54732: IFFALSE 54736
// exit ;
54734: GO 55131
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54736: LD_ADDR_VAR 0 6
54740: PUSH
54741: LD_VAR 0 7
54745: PPUSH
54746: LD_INT 0
54748: PPUSH
54749: LD_INT 4
54751: PPUSH
54752: CALL_OW 272
54756: PUSH
54757: LD_VAR 0 8
54761: PPUSH
54762: LD_INT 0
54764: PPUSH
54765: LD_INT 4
54767: PPUSH
54768: CALL_OW 273
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_VAR 0 7
54781: PPUSH
54782: LD_INT 1
54784: PPUSH
54785: LD_INT 4
54787: PPUSH
54788: CALL_OW 272
54792: PUSH
54793: LD_VAR 0 8
54797: PPUSH
54798: LD_INT 1
54800: PPUSH
54801: LD_INT 4
54803: PPUSH
54804: CALL_OW 273
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_VAR 0 7
54817: PPUSH
54818: LD_INT 2
54820: PPUSH
54821: LD_INT 4
54823: PPUSH
54824: CALL_OW 272
54828: PUSH
54829: LD_VAR 0 8
54833: PPUSH
54834: LD_INT 2
54836: PPUSH
54837: LD_INT 4
54839: PPUSH
54840: CALL_OW 273
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_VAR 0 7
54853: PPUSH
54854: LD_INT 3
54856: PPUSH
54857: LD_INT 4
54859: PPUSH
54860: CALL_OW 272
54864: PUSH
54865: LD_VAR 0 8
54869: PPUSH
54870: LD_INT 3
54872: PPUSH
54873: LD_INT 4
54875: PPUSH
54876: CALL_OW 273
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_VAR 0 7
54889: PPUSH
54890: LD_INT 4
54892: PPUSH
54893: LD_INT 4
54895: PPUSH
54896: CALL_OW 272
54900: PUSH
54901: LD_VAR 0 8
54905: PPUSH
54906: LD_INT 4
54908: PPUSH
54909: LD_INT 4
54911: PPUSH
54912: CALL_OW 273
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_VAR 0 7
54925: PPUSH
54926: LD_INT 5
54928: PPUSH
54929: LD_INT 4
54931: PPUSH
54932: CALL_OW 272
54936: PUSH
54937: LD_VAR 0 8
54941: PPUSH
54942: LD_INT 5
54944: PPUSH
54945: LD_INT 4
54947: PPUSH
54948: CALL_OW 273
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: ST_TO_ADDR
// for i = tmp downto 1 do
54965: LD_ADDR_VAR 0 4
54969: PUSH
54970: DOUBLE
54971: LD_VAR 0 6
54975: INC
54976: ST_TO_ADDR
54977: LD_INT 1
54979: PUSH
54980: FOR_DOWNTO
54981: IFFALSE 55082
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54983: LD_VAR 0 6
54987: PUSH
54988: LD_VAR 0 4
54992: ARRAY
54993: PUSH
54994: LD_INT 1
54996: ARRAY
54997: PPUSH
54998: LD_VAR 0 6
55002: PUSH
55003: LD_VAR 0 4
55007: ARRAY
55008: PUSH
55009: LD_INT 2
55011: ARRAY
55012: PPUSH
55013: CALL_OW 488
55017: NOT
55018: PUSH
55019: LD_VAR 0 6
55023: PUSH
55024: LD_VAR 0 4
55028: ARRAY
55029: PUSH
55030: LD_INT 1
55032: ARRAY
55033: PPUSH
55034: LD_VAR 0 6
55038: PUSH
55039: LD_VAR 0 4
55043: ARRAY
55044: PUSH
55045: LD_INT 2
55047: ARRAY
55048: PPUSH
55049: CALL_OW 428
55053: PUSH
55054: LD_INT 0
55056: NONEQUAL
55057: OR
55058: IFFALSE 55080
// tmp := Delete ( tmp , i ) ;
55060: LD_ADDR_VAR 0 6
55064: PUSH
55065: LD_VAR 0 6
55069: PPUSH
55070: LD_VAR 0 4
55074: PPUSH
55075: CALL_OW 3
55079: ST_TO_ADDR
55080: GO 54980
55082: POP
55083: POP
// j := GetClosestHex ( unit , tmp ) ;
55084: LD_ADDR_VAR 0 5
55088: PUSH
55089: LD_VAR 0 1
55093: PPUSH
55094: LD_VAR 0 6
55098: PPUSH
55099: CALL 54401 0 2
55103: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55104: LD_VAR 0 1
55108: PPUSH
55109: LD_VAR 0 5
55113: PUSH
55114: LD_INT 1
55116: ARRAY
55117: PPUSH
55118: LD_VAR 0 5
55122: PUSH
55123: LD_INT 2
55125: ARRAY
55126: PPUSH
55127: CALL_OW 111
// end ;
55131: LD_VAR 0 3
55135: RET
// export function PrepareApemanSoldier ( ) ; begin
55136: LD_INT 0
55138: PPUSH
// uc_nation := 0 ;
55139: LD_ADDR_OWVAR 21
55143: PUSH
55144: LD_INT 0
55146: ST_TO_ADDR
// hc_sex := sex_male ;
55147: LD_ADDR_OWVAR 27
55151: PUSH
55152: LD_INT 1
55154: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
55155: LD_ADDR_OWVAR 28
55159: PUSH
55160: LD_INT 15
55162: ST_TO_ADDR
// hc_gallery :=  ;
55163: LD_ADDR_OWVAR 33
55167: PUSH
55168: LD_STRING 
55170: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55171: LD_ADDR_OWVAR 31
55175: PUSH
55176: LD_INT 0
55178: PPUSH
55179: LD_INT 3
55181: PPUSH
55182: CALL_OW 12
55186: PUSH
55187: LD_INT 0
55189: PPUSH
55190: LD_INT 3
55192: PPUSH
55193: CALL_OW 12
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: ST_TO_ADDR
// end ;
55210: LD_VAR 0 1
55214: RET
// export function PrepareApemanEngineer ( ) ; begin
55215: LD_INT 0
55217: PPUSH
// uc_nation := 0 ;
55218: LD_ADDR_OWVAR 21
55222: PUSH
55223: LD_INT 0
55225: ST_TO_ADDR
// hc_sex := sex_male ;
55226: LD_ADDR_OWVAR 27
55230: PUSH
55231: LD_INT 1
55233: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
55234: LD_ADDR_OWVAR 28
55238: PUSH
55239: LD_INT 16
55241: ST_TO_ADDR
// hc_gallery :=  ;
55242: LD_ADDR_OWVAR 33
55246: PUSH
55247: LD_STRING 
55249: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55250: LD_ADDR_OWVAR 31
55254: PUSH
55255: LD_INT 0
55257: PPUSH
55258: LD_INT 3
55260: PPUSH
55261: CALL_OW 12
55265: PUSH
55266: LD_INT 0
55268: PPUSH
55269: LD_INT 3
55271: PPUSH
55272: CALL_OW 12
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: ST_TO_ADDR
// end ;
55289: LD_VAR 0 1
55293: RET
// export function PrepareApeman ( agressivity ) ; begin
55294: LD_INT 0
55296: PPUSH
// uc_side := 0 ;
55297: LD_ADDR_OWVAR 20
55301: PUSH
55302: LD_INT 0
55304: ST_TO_ADDR
// uc_nation := 0 ;
55305: LD_ADDR_OWVAR 21
55309: PUSH
55310: LD_INT 0
55312: ST_TO_ADDR
// hc_sex := sex_male ;
55313: LD_ADDR_OWVAR 27
55317: PUSH
55318: LD_INT 1
55320: ST_TO_ADDR
// hc_class := class_apeman ;
55321: LD_ADDR_OWVAR 28
55325: PUSH
55326: LD_INT 12
55328: ST_TO_ADDR
// hc_gallery :=  ;
55329: LD_ADDR_OWVAR 33
55333: PUSH
55334: LD_STRING 
55336: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55337: LD_ADDR_OWVAR 35
55341: PUSH
55342: LD_VAR 0 1
55346: NEG
55347: PPUSH
55348: LD_VAR 0 1
55352: PPUSH
55353: CALL_OW 12
55357: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55358: LD_ADDR_OWVAR 31
55362: PUSH
55363: LD_INT 0
55365: PPUSH
55366: LD_INT 3
55368: PPUSH
55369: CALL_OW 12
55373: PUSH
55374: LD_INT 0
55376: PPUSH
55377: LD_INT 3
55379: PPUSH
55380: CALL_OW 12
55384: PUSH
55385: LD_INT 0
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: ST_TO_ADDR
// end ;
55397: LD_VAR 0 2
55401: RET
// export function PrepareTiger ( agressivity ) ; begin
55402: LD_INT 0
55404: PPUSH
// uc_side := 0 ;
55405: LD_ADDR_OWVAR 20
55409: PUSH
55410: LD_INT 0
55412: ST_TO_ADDR
// uc_nation := 0 ;
55413: LD_ADDR_OWVAR 21
55417: PUSH
55418: LD_INT 0
55420: ST_TO_ADDR
// hc_class := class_tiger ;
55421: LD_ADDR_OWVAR 28
55425: PUSH
55426: LD_INT 14
55428: ST_TO_ADDR
// hc_gallery :=  ;
55429: LD_ADDR_OWVAR 33
55433: PUSH
55434: LD_STRING 
55436: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55437: LD_ADDR_OWVAR 35
55441: PUSH
55442: LD_VAR 0 1
55446: NEG
55447: PPUSH
55448: LD_VAR 0 1
55452: PPUSH
55453: CALL_OW 12
55457: ST_TO_ADDR
// end ;
55458: LD_VAR 0 2
55462: RET
// export function PrepareEnchidna ( ) ; begin
55463: LD_INT 0
55465: PPUSH
// uc_side := 0 ;
55466: LD_ADDR_OWVAR 20
55470: PUSH
55471: LD_INT 0
55473: ST_TO_ADDR
// uc_nation := 0 ;
55474: LD_ADDR_OWVAR 21
55478: PUSH
55479: LD_INT 0
55481: ST_TO_ADDR
// hc_class := class_baggie ;
55482: LD_ADDR_OWVAR 28
55486: PUSH
55487: LD_INT 13
55489: ST_TO_ADDR
// hc_gallery :=  ;
55490: LD_ADDR_OWVAR 33
55494: PUSH
55495: LD_STRING 
55497: ST_TO_ADDR
// end ;
55498: LD_VAR 0 1
55502: RET
// export function PrepareFrog ( ) ; begin
55503: LD_INT 0
55505: PPUSH
// uc_side := 0 ;
55506: LD_ADDR_OWVAR 20
55510: PUSH
55511: LD_INT 0
55513: ST_TO_ADDR
// uc_nation := 0 ;
55514: LD_ADDR_OWVAR 21
55518: PUSH
55519: LD_INT 0
55521: ST_TO_ADDR
// hc_class := class_frog ;
55522: LD_ADDR_OWVAR 28
55526: PUSH
55527: LD_INT 19
55529: ST_TO_ADDR
// hc_gallery :=  ;
55530: LD_ADDR_OWVAR 33
55534: PUSH
55535: LD_STRING 
55537: ST_TO_ADDR
// end ;
55538: LD_VAR 0 1
55542: RET
// export function PrepareFish ( ) ; begin
55543: LD_INT 0
55545: PPUSH
// uc_side := 0 ;
55546: LD_ADDR_OWVAR 20
55550: PUSH
55551: LD_INT 0
55553: ST_TO_ADDR
// uc_nation := 0 ;
55554: LD_ADDR_OWVAR 21
55558: PUSH
55559: LD_INT 0
55561: ST_TO_ADDR
// hc_class := class_fish ;
55562: LD_ADDR_OWVAR 28
55566: PUSH
55567: LD_INT 20
55569: ST_TO_ADDR
// hc_gallery :=  ;
55570: LD_ADDR_OWVAR 33
55574: PUSH
55575: LD_STRING 
55577: ST_TO_ADDR
// end ;
55578: LD_VAR 0 1
55582: RET
// export function PrepareBird ( ) ; begin
55583: LD_INT 0
55585: PPUSH
// uc_side := 0 ;
55586: LD_ADDR_OWVAR 20
55590: PUSH
55591: LD_INT 0
55593: ST_TO_ADDR
// uc_nation := 0 ;
55594: LD_ADDR_OWVAR 21
55598: PUSH
55599: LD_INT 0
55601: ST_TO_ADDR
// hc_class := class_phororhacos ;
55602: LD_ADDR_OWVAR 28
55606: PUSH
55607: LD_INT 18
55609: ST_TO_ADDR
// hc_gallery :=  ;
55610: LD_ADDR_OWVAR 33
55614: PUSH
55615: LD_STRING 
55617: ST_TO_ADDR
// end ;
55618: LD_VAR 0 1
55622: RET
// export function PrepareHorse ( ) ; begin
55623: LD_INT 0
55625: PPUSH
// uc_side := 0 ;
55626: LD_ADDR_OWVAR 20
55630: PUSH
55631: LD_INT 0
55633: ST_TO_ADDR
// uc_nation := 0 ;
55634: LD_ADDR_OWVAR 21
55638: PUSH
55639: LD_INT 0
55641: ST_TO_ADDR
// hc_class := class_horse ;
55642: LD_ADDR_OWVAR 28
55646: PUSH
55647: LD_INT 21
55649: ST_TO_ADDR
// hc_gallery :=  ;
55650: LD_ADDR_OWVAR 33
55654: PUSH
55655: LD_STRING 
55657: ST_TO_ADDR
// end ;
55658: LD_VAR 0 1
55662: RET
// export function PrepareMastodont ( ) ; begin
55663: LD_INT 0
55665: PPUSH
// uc_side := 0 ;
55666: LD_ADDR_OWVAR 20
55670: PUSH
55671: LD_INT 0
55673: ST_TO_ADDR
// uc_nation := 0 ;
55674: LD_ADDR_OWVAR 21
55678: PUSH
55679: LD_INT 0
55681: ST_TO_ADDR
// vc_chassis := class_mastodont ;
55682: LD_ADDR_OWVAR 37
55686: PUSH
55687: LD_INT 31
55689: ST_TO_ADDR
// vc_control := control_rider ;
55690: LD_ADDR_OWVAR 38
55694: PUSH
55695: LD_INT 4
55697: ST_TO_ADDR
// end ;
55698: LD_VAR 0 1
55702: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55703: LD_INT 0
55705: PPUSH
55706: PPUSH
55707: PPUSH
// uc_side = 0 ;
55708: LD_ADDR_OWVAR 20
55712: PUSH
55713: LD_INT 0
55715: ST_TO_ADDR
// uc_nation = 0 ;
55716: LD_ADDR_OWVAR 21
55720: PUSH
55721: LD_INT 0
55723: ST_TO_ADDR
// InitHc_All ( ) ;
55724: CALL_OW 584
// InitVc ;
55728: CALL_OW 20
// if mastodonts then
55732: LD_VAR 0 6
55736: IFFALSE 55803
// for i = 1 to mastodonts do
55738: LD_ADDR_VAR 0 11
55742: PUSH
55743: DOUBLE
55744: LD_INT 1
55746: DEC
55747: ST_TO_ADDR
55748: LD_VAR 0 6
55752: PUSH
55753: FOR_TO
55754: IFFALSE 55801
// begin vc_chassis := 31 ;
55756: LD_ADDR_OWVAR 37
55760: PUSH
55761: LD_INT 31
55763: ST_TO_ADDR
// vc_control := control_rider ;
55764: LD_ADDR_OWVAR 38
55768: PUSH
55769: LD_INT 4
55771: ST_TO_ADDR
// animal := CreateVehicle ;
55772: LD_ADDR_VAR 0 12
55776: PUSH
55777: CALL_OW 45
55781: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55782: LD_VAR 0 12
55786: PPUSH
55787: LD_VAR 0 8
55791: PPUSH
55792: LD_INT 0
55794: PPUSH
55795: CALL 57938 0 3
// end ;
55799: GO 55753
55801: POP
55802: POP
// if horses then
55803: LD_VAR 0 5
55807: IFFALSE 55874
// for i = 1 to horses do
55809: LD_ADDR_VAR 0 11
55813: PUSH
55814: DOUBLE
55815: LD_INT 1
55817: DEC
55818: ST_TO_ADDR
55819: LD_VAR 0 5
55823: PUSH
55824: FOR_TO
55825: IFFALSE 55872
// begin hc_class := 21 ;
55827: LD_ADDR_OWVAR 28
55831: PUSH
55832: LD_INT 21
55834: ST_TO_ADDR
// hc_gallery :=  ;
55835: LD_ADDR_OWVAR 33
55839: PUSH
55840: LD_STRING 
55842: ST_TO_ADDR
// animal := CreateHuman ;
55843: LD_ADDR_VAR 0 12
55847: PUSH
55848: CALL_OW 44
55852: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55853: LD_VAR 0 12
55857: PPUSH
55858: LD_VAR 0 8
55862: PPUSH
55863: LD_INT 0
55865: PPUSH
55866: CALL 57938 0 3
// end ;
55870: GO 55824
55872: POP
55873: POP
// if birds then
55874: LD_VAR 0 1
55878: IFFALSE 55945
// for i = 1 to birds do
55880: LD_ADDR_VAR 0 11
55884: PUSH
55885: DOUBLE
55886: LD_INT 1
55888: DEC
55889: ST_TO_ADDR
55890: LD_VAR 0 1
55894: PUSH
55895: FOR_TO
55896: IFFALSE 55943
// begin hc_class = 18 ;
55898: LD_ADDR_OWVAR 28
55902: PUSH
55903: LD_INT 18
55905: ST_TO_ADDR
// hc_gallery =  ;
55906: LD_ADDR_OWVAR 33
55910: PUSH
55911: LD_STRING 
55913: ST_TO_ADDR
// animal := CreateHuman ;
55914: LD_ADDR_VAR 0 12
55918: PUSH
55919: CALL_OW 44
55923: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55924: LD_VAR 0 12
55928: PPUSH
55929: LD_VAR 0 8
55933: PPUSH
55934: LD_INT 0
55936: PPUSH
55937: CALL 57938 0 3
// end ;
55941: GO 55895
55943: POP
55944: POP
// if tigers then
55945: LD_VAR 0 2
55949: IFFALSE 56033
// for i = 1 to tigers do
55951: LD_ADDR_VAR 0 11
55955: PUSH
55956: DOUBLE
55957: LD_INT 1
55959: DEC
55960: ST_TO_ADDR
55961: LD_VAR 0 2
55965: PUSH
55966: FOR_TO
55967: IFFALSE 56031
// begin hc_class = class_tiger ;
55969: LD_ADDR_OWVAR 28
55973: PUSH
55974: LD_INT 14
55976: ST_TO_ADDR
// hc_gallery =  ;
55977: LD_ADDR_OWVAR 33
55981: PUSH
55982: LD_STRING 
55984: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55985: LD_ADDR_OWVAR 35
55989: PUSH
55990: LD_INT 7
55992: NEG
55993: PPUSH
55994: LD_INT 7
55996: PPUSH
55997: CALL_OW 12
56001: ST_TO_ADDR
// animal := CreateHuman ;
56002: LD_ADDR_VAR 0 12
56006: PUSH
56007: CALL_OW 44
56011: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56012: LD_VAR 0 12
56016: PPUSH
56017: LD_VAR 0 8
56021: PPUSH
56022: LD_INT 0
56024: PPUSH
56025: CALL 57938 0 3
// end ;
56029: GO 55966
56031: POP
56032: POP
// if apemans then
56033: LD_VAR 0 3
56037: IFFALSE 56160
// for i = 1 to apemans do
56039: LD_ADDR_VAR 0 11
56043: PUSH
56044: DOUBLE
56045: LD_INT 1
56047: DEC
56048: ST_TO_ADDR
56049: LD_VAR 0 3
56053: PUSH
56054: FOR_TO
56055: IFFALSE 56158
// begin hc_class = class_apeman ;
56057: LD_ADDR_OWVAR 28
56061: PUSH
56062: LD_INT 12
56064: ST_TO_ADDR
// hc_gallery =  ;
56065: LD_ADDR_OWVAR 33
56069: PUSH
56070: LD_STRING 
56072: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56073: LD_ADDR_OWVAR 35
56077: PUSH
56078: LD_INT 2
56080: NEG
56081: PPUSH
56082: LD_INT 2
56084: PPUSH
56085: CALL_OW 12
56089: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56090: LD_ADDR_OWVAR 31
56094: PUSH
56095: LD_INT 1
56097: PPUSH
56098: LD_INT 3
56100: PPUSH
56101: CALL_OW 12
56105: PUSH
56106: LD_INT 1
56108: PPUSH
56109: LD_INT 3
56111: PPUSH
56112: CALL_OW 12
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: ST_TO_ADDR
// animal := CreateHuman ;
56129: LD_ADDR_VAR 0 12
56133: PUSH
56134: CALL_OW 44
56138: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56139: LD_VAR 0 12
56143: PPUSH
56144: LD_VAR 0 8
56148: PPUSH
56149: LD_INT 0
56151: PPUSH
56152: CALL 57938 0 3
// end ;
56156: GO 56054
56158: POP
56159: POP
// if enchidnas then
56160: LD_VAR 0 4
56164: IFFALSE 56231
// for i = 1 to enchidnas do
56166: LD_ADDR_VAR 0 11
56170: PUSH
56171: DOUBLE
56172: LD_INT 1
56174: DEC
56175: ST_TO_ADDR
56176: LD_VAR 0 4
56180: PUSH
56181: FOR_TO
56182: IFFALSE 56229
// begin hc_class = 13 ;
56184: LD_ADDR_OWVAR 28
56188: PUSH
56189: LD_INT 13
56191: ST_TO_ADDR
// hc_gallery =  ;
56192: LD_ADDR_OWVAR 33
56196: PUSH
56197: LD_STRING 
56199: ST_TO_ADDR
// animal := CreateHuman ;
56200: LD_ADDR_VAR 0 12
56204: PUSH
56205: CALL_OW 44
56209: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56210: LD_VAR 0 12
56214: PPUSH
56215: LD_VAR 0 8
56219: PPUSH
56220: LD_INT 0
56222: PPUSH
56223: CALL 57938 0 3
// end ;
56227: GO 56181
56229: POP
56230: POP
// if fishes then
56231: LD_VAR 0 7
56235: IFFALSE 56302
// for i = 1 to fishes do
56237: LD_ADDR_VAR 0 11
56241: PUSH
56242: DOUBLE
56243: LD_INT 1
56245: DEC
56246: ST_TO_ADDR
56247: LD_VAR 0 7
56251: PUSH
56252: FOR_TO
56253: IFFALSE 56300
// begin hc_class = 20 ;
56255: LD_ADDR_OWVAR 28
56259: PUSH
56260: LD_INT 20
56262: ST_TO_ADDR
// hc_gallery =  ;
56263: LD_ADDR_OWVAR 33
56267: PUSH
56268: LD_STRING 
56270: ST_TO_ADDR
// animal := CreateHuman ;
56271: LD_ADDR_VAR 0 12
56275: PUSH
56276: CALL_OW 44
56280: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56281: LD_VAR 0 12
56285: PPUSH
56286: LD_VAR 0 9
56290: PPUSH
56291: LD_INT 0
56293: PPUSH
56294: CALL 57938 0 3
// end ;
56298: GO 56252
56300: POP
56301: POP
// end ;
56302: LD_VAR 0 10
56306: RET
// export function WantHeal ( sci , unit ) ; begin
56307: LD_INT 0
56309: PPUSH
// if GetTaskList ( sci ) > 0 then
56310: LD_VAR 0 1
56314: PPUSH
56315: CALL_OW 437
56319: PUSH
56320: LD_INT 0
56322: GREATER
56323: IFFALSE 56393
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56325: LD_VAR 0 1
56329: PPUSH
56330: CALL_OW 437
56334: PUSH
56335: LD_INT 1
56337: ARRAY
56338: PUSH
56339: LD_INT 1
56341: ARRAY
56342: PUSH
56343: LD_STRING l
56345: EQUAL
56346: PUSH
56347: LD_VAR 0 1
56351: PPUSH
56352: CALL_OW 437
56356: PUSH
56357: LD_INT 1
56359: ARRAY
56360: PUSH
56361: LD_INT 4
56363: ARRAY
56364: PUSH
56365: LD_VAR 0 2
56369: EQUAL
56370: AND
56371: IFFALSE 56383
// result := true else
56373: LD_ADDR_VAR 0 3
56377: PUSH
56378: LD_INT 1
56380: ST_TO_ADDR
56381: GO 56391
// result := false ;
56383: LD_ADDR_VAR 0 3
56387: PUSH
56388: LD_INT 0
56390: ST_TO_ADDR
// end else
56391: GO 56401
// result := false ;
56393: LD_ADDR_VAR 0 3
56397: PUSH
56398: LD_INT 0
56400: ST_TO_ADDR
// end ;
56401: LD_VAR 0 3
56405: RET
// export function HealTarget ( sci ) ; begin
56406: LD_INT 0
56408: PPUSH
// if not sci then
56409: LD_VAR 0 1
56413: NOT
56414: IFFALSE 56418
// exit ;
56416: GO 56483
// result := 0 ;
56418: LD_ADDR_VAR 0 2
56422: PUSH
56423: LD_INT 0
56425: ST_TO_ADDR
// if GetTaskList ( sci ) then
56426: LD_VAR 0 1
56430: PPUSH
56431: CALL_OW 437
56435: IFFALSE 56483
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56437: LD_VAR 0 1
56441: PPUSH
56442: CALL_OW 437
56446: PUSH
56447: LD_INT 1
56449: ARRAY
56450: PUSH
56451: LD_INT 1
56453: ARRAY
56454: PUSH
56455: LD_STRING l
56457: EQUAL
56458: IFFALSE 56483
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56460: LD_ADDR_VAR 0 2
56464: PUSH
56465: LD_VAR 0 1
56469: PPUSH
56470: CALL_OW 437
56474: PUSH
56475: LD_INT 1
56477: ARRAY
56478: PUSH
56479: LD_INT 4
56481: ARRAY
56482: ST_TO_ADDR
// end ;
56483: LD_VAR 0 2
56487: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56488: LD_INT 0
56490: PPUSH
56491: PPUSH
56492: PPUSH
56493: PPUSH
// if not base_units then
56494: LD_VAR 0 1
56498: NOT
56499: IFFALSE 56503
// exit ;
56501: GO 56590
// result := false ;
56503: LD_ADDR_VAR 0 2
56507: PUSH
56508: LD_INT 0
56510: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56511: LD_ADDR_VAR 0 5
56515: PUSH
56516: LD_VAR 0 1
56520: PPUSH
56521: LD_INT 21
56523: PUSH
56524: LD_INT 3
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PPUSH
56531: CALL_OW 72
56535: ST_TO_ADDR
// if not tmp then
56536: LD_VAR 0 5
56540: NOT
56541: IFFALSE 56545
// exit ;
56543: GO 56590
// for i in tmp do
56545: LD_ADDR_VAR 0 3
56549: PUSH
56550: LD_VAR 0 5
56554: PUSH
56555: FOR_IN
56556: IFFALSE 56588
// begin result := EnemyInRange ( i , 22 ) ;
56558: LD_ADDR_VAR 0 2
56562: PUSH
56563: LD_VAR 0 3
56567: PPUSH
56568: LD_INT 22
56570: PPUSH
56571: CALL 54203 0 2
56575: ST_TO_ADDR
// if result then
56576: LD_VAR 0 2
56580: IFFALSE 56586
// exit ;
56582: POP
56583: POP
56584: GO 56590
// end ;
56586: GO 56555
56588: POP
56589: POP
// end ;
56590: LD_VAR 0 2
56594: RET
// export function FilterByTag ( units , tag ) ; begin
56595: LD_INT 0
56597: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
56598: LD_ADDR_VAR 0 3
56602: PUSH
56603: LD_VAR 0 1
56607: PPUSH
56608: LD_INT 120
56610: PUSH
56611: LD_VAR 0 2
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PPUSH
56620: CALL_OW 72
56624: ST_TO_ADDR
// end ;
56625: LD_VAR 0 3
56629: RET
// export function IsDriver ( un ) ; begin
56630: LD_INT 0
56632: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56633: LD_ADDR_VAR 0 2
56637: PUSH
56638: LD_VAR 0 1
56642: PUSH
56643: LD_INT 55
56645: PUSH
56646: EMPTY
56647: LIST
56648: PPUSH
56649: CALL_OW 69
56653: IN
56654: ST_TO_ADDR
// end ;
56655: LD_VAR 0 2
56659: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56660: LD_INT 0
56662: PPUSH
56663: PPUSH
// list := [ ] ;
56664: LD_ADDR_VAR 0 5
56668: PUSH
56669: EMPTY
56670: ST_TO_ADDR
// case d of 0 :
56671: LD_VAR 0 3
56675: PUSH
56676: LD_INT 0
56678: DOUBLE
56679: EQUAL
56680: IFTRUE 56684
56682: GO 56817
56684: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56685: LD_ADDR_VAR 0 5
56689: PUSH
56690: LD_VAR 0 1
56694: PUSH
56695: LD_INT 4
56697: MINUS
56698: PUSH
56699: LD_VAR 0 2
56703: PUSH
56704: LD_INT 4
56706: MINUS
56707: PUSH
56708: LD_INT 2
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: LIST
56715: PUSH
56716: LD_VAR 0 1
56720: PUSH
56721: LD_INT 3
56723: MINUS
56724: PUSH
56725: LD_VAR 0 2
56729: PUSH
56730: LD_INT 1
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: LIST
56737: PUSH
56738: LD_VAR 0 1
56742: PUSH
56743: LD_INT 4
56745: PLUS
56746: PUSH
56747: LD_VAR 0 2
56751: PUSH
56752: LD_INT 4
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: LIST
56759: PUSH
56760: LD_VAR 0 1
56764: PUSH
56765: LD_INT 3
56767: PLUS
56768: PUSH
56769: LD_VAR 0 2
56773: PUSH
56774: LD_INT 3
56776: PLUS
56777: PUSH
56778: LD_INT 5
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: LIST
56785: PUSH
56786: LD_VAR 0 1
56790: PUSH
56791: LD_VAR 0 2
56795: PUSH
56796: LD_INT 4
56798: PLUS
56799: PUSH
56800: LD_INT 0
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: LIST
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: ST_TO_ADDR
// end ; 1 :
56815: GO 57515
56817: LD_INT 1
56819: DOUBLE
56820: EQUAL
56821: IFTRUE 56825
56823: GO 56958
56825: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56826: LD_ADDR_VAR 0 5
56830: PUSH
56831: LD_VAR 0 1
56835: PUSH
56836: LD_VAR 0 2
56840: PUSH
56841: LD_INT 4
56843: MINUS
56844: PUSH
56845: LD_INT 3
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: LIST
56852: PUSH
56853: LD_VAR 0 1
56857: PUSH
56858: LD_INT 3
56860: MINUS
56861: PUSH
56862: LD_VAR 0 2
56866: PUSH
56867: LD_INT 3
56869: MINUS
56870: PUSH
56871: LD_INT 2
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: LIST
56878: PUSH
56879: LD_VAR 0 1
56883: PUSH
56884: LD_INT 4
56886: MINUS
56887: PUSH
56888: LD_VAR 0 2
56892: PUSH
56893: LD_INT 1
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: LIST
56900: PUSH
56901: LD_VAR 0 1
56905: PUSH
56906: LD_VAR 0 2
56910: PUSH
56911: LD_INT 3
56913: PLUS
56914: PUSH
56915: LD_INT 0
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: LIST
56922: PUSH
56923: LD_VAR 0 1
56927: PUSH
56928: LD_INT 4
56930: PLUS
56931: PUSH
56932: LD_VAR 0 2
56936: PUSH
56937: LD_INT 4
56939: PLUS
56940: PUSH
56941: LD_INT 5
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: LIST
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: ST_TO_ADDR
// end ; 2 :
56956: GO 57515
56958: LD_INT 2
56960: DOUBLE
56961: EQUAL
56962: IFTRUE 56966
56964: GO 57095
56966: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56967: LD_ADDR_VAR 0 5
56971: PUSH
56972: LD_VAR 0 1
56976: PUSH
56977: LD_VAR 0 2
56981: PUSH
56982: LD_INT 3
56984: MINUS
56985: PUSH
56986: LD_INT 3
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: LIST
56993: PUSH
56994: LD_VAR 0 1
56998: PUSH
56999: LD_INT 4
57001: PLUS
57002: PUSH
57003: LD_VAR 0 2
57007: PUSH
57008: LD_INT 4
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: LIST
57015: PUSH
57016: LD_VAR 0 1
57020: PUSH
57021: LD_VAR 0 2
57025: PUSH
57026: LD_INT 4
57028: PLUS
57029: PUSH
57030: LD_INT 0
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: LIST
57037: PUSH
57038: LD_VAR 0 1
57042: PUSH
57043: LD_INT 3
57045: MINUS
57046: PUSH
57047: LD_VAR 0 2
57051: PUSH
57052: LD_INT 1
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: LIST
57059: PUSH
57060: LD_VAR 0 1
57064: PUSH
57065: LD_INT 4
57067: MINUS
57068: PUSH
57069: LD_VAR 0 2
57073: PUSH
57074: LD_INT 4
57076: MINUS
57077: PUSH
57078: LD_INT 2
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: LIST
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: ST_TO_ADDR
// end ; 3 :
57093: GO 57515
57095: LD_INT 3
57097: DOUBLE
57098: EQUAL
57099: IFTRUE 57103
57101: GO 57236
57103: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57104: LD_ADDR_VAR 0 5
57108: PUSH
57109: LD_VAR 0 1
57113: PUSH
57114: LD_INT 3
57116: PLUS
57117: PUSH
57118: LD_VAR 0 2
57122: PUSH
57123: LD_INT 4
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: LIST
57130: PUSH
57131: LD_VAR 0 1
57135: PUSH
57136: LD_INT 4
57138: PLUS
57139: PUSH
57140: LD_VAR 0 2
57144: PUSH
57145: LD_INT 4
57147: PLUS
57148: PUSH
57149: LD_INT 5
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: LIST
57156: PUSH
57157: LD_VAR 0 1
57161: PUSH
57162: LD_INT 4
57164: MINUS
57165: PUSH
57166: LD_VAR 0 2
57170: PUSH
57171: LD_INT 1
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: LIST
57178: PUSH
57179: LD_VAR 0 1
57183: PUSH
57184: LD_VAR 0 2
57188: PUSH
57189: LD_INT 4
57191: MINUS
57192: PUSH
57193: LD_INT 3
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: LIST
57200: PUSH
57201: LD_VAR 0 1
57205: PUSH
57206: LD_INT 3
57208: MINUS
57209: PUSH
57210: LD_VAR 0 2
57214: PUSH
57215: LD_INT 3
57217: MINUS
57218: PUSH
57219: LD_INT 2
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: LIST
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: ST_TO_ADDR
// end ; 4 :
57234: GO 57515
57236: LD_INT 4
57238: DOUBLE
57239: EQUAL
57240: IFTRUE 57244
57242: GO 57377
57244: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57245: LD_ADDR_VAR 0 5
57249: PUSH
57250: LD_VAR 0 1
57254: PUSH
57255: LD_VAR 0 2
57259: PUSH
57260: LD_INT 4
57262: PLUS
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: LIST
57271: PUSH
57272: LD_VAR 0 1
57276: PUSH
57277: LD_INT 3
57279: PLUS
57280: PUSH
57281: LD_VAR 0 2
57285: PUSH
57286: LD_INT 3
57288: PLUS
57289: PUSH
57290: LD_INT 5
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: LIST
57297: PUSH
57298: LD_VAR 0 1
57302: PUSH
57303: LD_INT 4
57305: PLUS
57306: PUSH
57307: LD_VAR 0 2
57311: PUSH
57312: LD_INT 4
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: LIST
57319: PUSH
57320: LD_VAR 0 1
57324: PUSH
57325: LD_VAR 0 2
57329: PUSH
57330: LD_INT 3
57332: MINUS
57333: PUSH
57334: LD_INT 3
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: LIST
57341: PUSH
57342: LD_VAR 0 1
57346: PUSH
57347: LD_INT 4
57349: MINUS
57350: PUSH
57351: LD_VAR 0 2
57355: PUSH
57356: LD_INT 4
57358: MINUS
57359: PUSH
57360: LD_INT 2
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: LIST
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: ST_TO_ADDR
// end ; 5 :
57375: GO 57515
57377: LD_INT 5
57379: DOUBLE
57380: EQUAL
57381: IFTRUE 57385
57383: GO 57514
57385: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57386: LD_ADDR_VAR 0 5
57390: PUSH
57391: LD_VAR 0 1
57395: PUSH
57396: LD_INT 4
57398: MINUS
57399: PUSH
57400: LD_VAR 0 2
57404: PUSH
57405: LD_INT 1
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: LIST
57412: PUSH
57413: LD_VAR 0 1
57417: PUSH
57418: LD_VAR 0 2
57422: PUSH
57423: LD_INT 4
57425: MINUS
57426: PUSH
57427: LD_INT 3
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: LIST
57434: PUSH
57435: LD_VAR 0 1
57439: PUSH
57440: LD_INT 4
57442: PLUS
57443: PUSH
57444: LD_VAR 0 2
57448: PUSH
57449: LD_INT 4
57451: PLUS
57452: PUSH
57453: LD_INT 5
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: LIST
57460: PUSH
57461: LD_VAR 0 1
57465: PUSH
57466: LD_INT 3
57468: PLUS
57469: PUSH
57470: LD_VAR 0 2
57474: PUSH
57475: LD_INT 4
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: LIST
57482: PUSH
57483: LD_VAR 0 1
57487: PUSH
57488: LD_VAR 0 2
57492: PUSH
57493: LD_INT 3
57495: PLUS
57496: PUSH
57497: LD_INT 0
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: LIST
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: ST_TO_ADDR
// end ; end ;
57512: GO 57515
57514: POP
// result := list ;
57515: LD_ADDR_VAR 0 4
57519: PUSH
57520: LD_VAR 0 5
57524: ST_TO_ADDR
// end ;
57525: LD_VAR 0 4
57529: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57530: LD_INT 0
57532: PPUSH
57533: PPUSH
57534: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57535: LD_VAR 0 1
57539: NOT
57540: PUSH
57541: LD_VAR 0 2
57545: PUSH
57546: LD_INT 1
57548: PUSH
57549: LD_INT 2
57551: PUSH
57552: LD_INT 3
57554: PUSH
57555: LD_INT 4
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: IN
57564: NOT
57565: OR
57566: IFFALSE 57570
// exit ;
57568: GO 57662
// tmp := [ ] ;
57570: LD_ADDR_VAR 0 5
57574: PUSH
57575: EMPTY
57576: ST_TO_ADDR
// for i in units do
57577: LD_ADDR_VAR 0 4
57581: PUSH
57582: LD_VAR 0 1
57586: PUSH
57587: FOR_IN
57588: IFFALSE 57631
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
57590: LD_ADDR_VAR 0 5
57594: PUSH
57595: LD_VAR 0 5
57599: PPUSH
57600: LD_VAR 0 5
57604: PUSH
57605: LD_INT 1
57607: PLUS
57608: PPUSH
57609: LD_VAR 0 4
57613: PPUSH
57614: LD_VAR 0 2
57618: PPUSH
57619: CALL_OW 259
57623: PPUSH
57624: CALL_OW 2
57628: ST_TO_ADDR
57629: GO 57587
57631: POP
57632: POP
// if not tmp then
57633: LD_VAR 0 5
57637: NOT
57638: IFFALSE 57642
// exit ;
57640: GO 57662
// result := SortListByListDesc ( units , tmp ) ;
57642: LD_ADDR_VAR 0 3
57646: PUSH
57647: LD_VAR 0 1
57651: PPUSH
57652: LD_VAR 0 5
57656: PPUSH
57657: CALL_OW 77
57661: ST_TO_ADDR
// end ;
57662: LD_VAR 0 3
57666: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57667: LD_INT 0
57669: PPUSH
57670: PPUSH
57671: PPUSH
// result := false ;
57672: LD_ADDR_VAR 0 3
57676: PUSH
57677: LD_INT 0
57679: ST_TO_ADDR
// x := GetX ( building ) ;
57680: LD_ADDR_VAR 0 4
57684: PUSH
57685: LD_VAR 0 2
57689: PPUSH
57690: CALL_OW 250
57694: ST_TO_ADDR
// y := GetY ( building ) ;
57695: LD_ADDR_VAR 0 5
57699: PUSH
57700: LD_VAR 0 2
57704: PPUSH
57705: CALL_OW 251
57709: ST_TO_ADDR
// if not building or not x or not y then
57710: LD_VAR 0 2
57714: NOT
57715: PUSH
57716: LD_VAR 0 4
57720: NOT
57721: OR
57722: PUSH
57723: LD_VAR 0 5
57727: NOT
57728: OR
57729: IFFALSE 57733
// exit ;
57731: GO 57825
// if GetTaskList ( unit ) then
57733: LD_VAR 0 1
57737: PPUSH
57738: CALL_OW 437
57742: IFFALSE 57825
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57744: LD_STRING e
57746: PUSH
57747: LD_VAR 0 1
57751: PPUSH
57752: CALL_OW 437
57756: PUSH
57757: LD_INT 1
57759: ARRAY
57760: PUSH
57761: LD_INT 1
57763: ARRAY
57764: EQUAL
57765: PUSH
57766: LD_VAR 0 4
57770: PUSH
57771: LD_VAR 0 1
57775: PPUSH
57776: CALL_OW 437
57780: PUSH
57781: LD_INT 1
57783: ARRAY
57784: PUSH
57785: LD_INT 2
57787: ARRAY
57788: EQUAL
57789: AND
57790: PUSH
57791: LD_VAR 0 5
57795: PUSH
57796: LD_VAR 0 1
57800: PPUSH
57801: CALL_OW 437
57805: PUSH
57806: LD_INT 1
57808: ARRAY
57809: PUSH
57810: LD_INT 3
57812: ARRAY
57813: EQUAL
57814: AND
57815: IFFALSE 57825
// result := true end ;
57817: LD_ADDR_VAR 0 3
57821: PUSH
57822: LD_INT 1
57824: ST_TO_ADDR
// end ;
57825: LD_VAR 0 3
57829: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57830: LD_INT 0
57832: PPUSH
// result := false ;
57833: LD_ADDR_VAR 0 4
57837: PUSH
57838: LD_INT 0
57840: ST_TO_ADDR
// if GetTaskList ( unit ) then
57841: LD_VAR 0 1
57845: PPUSH
57846: CALL_OW 437
57850: IFFALSE 57933
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57852: LD_STRING M
57854: PUSH
57855: LD_VAR 0 1
57859: PPUSH
57860: CALL_OW 437
57864: PUSH
57865: LD_INT 1
57867: ARRAY
57868: PUSH
57869: LD_INT 1
57871: ARRAY
57872: EQUAL
57873: PUSH
57874: LD_VAR 0 2
57878: PUSH
57879: LD_VAR 0 1
57883: PPUSH
57884: CALL_OW 437
57888: PUSH
57889: LD_INT 1
57891: ARRAY
57892: PUSH
57893: LD_INT 2
57895: ARRAY
57896: EQUAL
57897: AND
57898: PUSH
57899: LD_VAR 0 3
57903: PUSH
57904: LD_VAR 0 1
57908: PPUSH
57909: CALL_OW 437
57913: PUSH
57914: LD_INT 1
57916: ARRAY
57917: PUSH
57918: LD_INT 3
57920: ARRAY
57921: EQUAL
57922: AND
57923: IFFALSE 57933
// result := true ;
57925: LD_ADDR_VAR 0 4
57929: PUSH
57930: LD_INT 1
57932: ST_TO_ADDR
// end ; end ;
57933: LD_VAR 0 4
57937: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57938: LD_INT 0
57940: PPUSH
57941: PPUSH
57942: PPUSH
57943: PPUSH
// if not unit or not area then
57944: LD_VAR 0 1
57948: NOT
57949: PUSH
57950: LD_VAR 0 2
57954: NOT
57955: OR
57956: IFFALSE 57960
// exit ;
57958: GO 58124
// tmp := AreaToList ( area , i ) ;
57960: LD_ADDR_VAR 0 6
57964: PUSH
57965: LD_VAR 0 2
57969: PPUSH
57970: LD_VAR 0 5
57974: PPUSH
57975: CALL_OW 517
57979: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57980: LD_ADDR_VAR 0 5
57984: PUSH
57985: DOUBLE
57986: LD_INT 1
57988: DEC
57989: ST_TO_ADDR
57990: LD_VAR 0 6
57994: PUSH
57995: LD_INT 1
57997: ARRAY
57998: PUSH
57999: FOR_TO
58000: IFFALSE 58122
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58002: LD_ADDR_VAR 0 7
58006: PUSH
58007: LD_VAR 0 6
58011: PUSH
58012: LD_INT 1
58014: ARRAY
58015: PUSH
58016: LD_VAR 0 5
58020: ARRAY
58021: PUSH
58022: LD_VAR 0 6
58026: PUSH
58027: LD_INT 2
58029: ARRAY
58030: PUSH
58031: LD_VAR 0 5
58035: ARRAY
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58041: LD_VAR 0 7
58045: PUSH
58046: LD_INT 1
58048: ARRAY
58049: PPUSH
58050: LD_VAR 0 7
58054: PUSH
58055: LD_INT 2
58057: ARRAY
58058: PPUSH
58059: CALL_OW 428
58063: PUSH
58064: LD_INT 0
58066: EQUAL
58067: IFFALSE 58120
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58069: LD_VAR 0 1
58073: PPUSH
58074: LD_VAR 0 7
58078: PUSH
58079: LD_INT 1
58081: ARRAY
58082: PPUSH
58083: LD_VAR 0 7
58087: PUSH
58088: LD_INT 2
58090: ARRAY
58091: PPUSH
58092: LD_VAR 0 3
58096: PPUSH
58097: CALL_OW 48
// result := IsPlaced ( unit ) ;
58101: LD_ADDR_VAR 0 4
58105: PUSH
58106: LD_VAR 0 1
58110: PPUSH
58111: CALL_OW 305
58115: ST_TO_ADDR
// exit ;
58116: POP
58117: POP
58118: GO 58124
// end ; end ;
58120: GO 57999
58122: POP
58123: POP
// end ;
58124: LD_VAR 0 4
58128: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58129: LD_INT 0
58131: PPUSH
58132: PPUSH
58133: PPUSH
// if not side or side > 8 then
58134: LD_VAR 0 1
58138: NOT
58139: PUSH
58140: LD_VAR 0 1
58144: PUSH
58145: LD_INT 8
58147: GREATER
58148: OR
58149: IFFALSE 58153
// exit ;
58151: GO 58340
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58153: LD_ADDR_VAR 0 4
58157: PUSH
58158: LD_INT 22
58160: PUSH
58161: LD_VAR 0 1
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 21
58172: PUSH
58173: LD_INT 3
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PPUSH
58184: CALL_OW 69
58188: ST_TO_ADDR
// if not tmp then
58189: LD_VAR 0 4
58193: NOT
58194: IFFALSE 58198
// exit ;
58196: GO 58340
// enable_addtolog := true ;
58198: LD_ADDR_OWVAR 81
58202: PUSH
58203: LD_INT 1
58205: ST_TO_ADDR
// AddToLog ( [ ) ;
58206: LD_STRING [
58208: PPUSH
58209: CALL_OW 561
// for i in tmp do
58213: LD_ADDR_VAR 0 3
58217: PUSH
58218: LD_VAR 0 4
58222: PUSH
58223: FOR_IN
58224: IFFALSE 58331
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58226: LD_STRING [
58228: PUSH
58229: LD_VAR 0 3
58233: PPUSH
58234: CALL_OW 266
58238: STR
58239: PUSH
58240: LD_STRING , 
58242: STR
58243: PUSH
58244: LD_VAR 0 3
58248: PPUSH
58249: CALL_OW 250
58253: STR
58254: PUSH
58255: LD_STRING , 
58257: STR
58258: PUSH
58259: LD_VAR 0 3
58263: PPUSH
58264: CALL_OW 251
58268: STR
58269: PUSH
58270: LD_STRING , 
58272: STR
58273: PUSH
58274: LD_VAR 0 3
58278: PPUSH
58279: CALL_OW 254
58283: STR
58284: PUSH
58285: LD_STRING , 
58287: STR
58288: PUSH
58289: LD_VAR 0 3
58293: PPUSH
58294: LD_INT 1
58296: PPUSH
58297: CALL_OW 268
58301: STR
58302: PUSH
58303: LD_STRING , 
58305: STR
58306: PUSH
58307: LD_VAR 0 3
58311: PPUSH
58312: LD_INT 2
58314: PPUSH
58315: CALL_OW 268
58319: STR
58320: PUSH
58321: LD_STRING ],
58323: STR
58324: PPUSH
58325: CALL_OW 561
// end ;
58329: GO 58223
58331: POP
58332: POP
// AddToLog ( ]; ) ;
58333: LD_STRING ];
58335: PPUSH
58336: CALL_OW 561
// end ;
58340: LD_VAR 0 2
58344: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58345: LD_INT 0
58347: PPUSH
58348: PPUSH
58349: PPUSH
58350: PPUSH
58351: PPUSH
// if not area or not rate or not max then
58352: LD_VAR 0 1
58356: NOT
58357: PUSH
58358: LD_VAR 0 2
58362: NOT
58363: OR
58364: PUSH
58365: LD_VAR 0 4
58369: NOT
58370: OR
58371: IFFALSE 58375
// exit ;
58373: GO 58564
// while 1 do
58375: LD_INT 1
58377: IFFALSE 58564
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58379: LD_ADDR_VAR 0 9
58383: PUSH
58384: LD_VAR 0 1
58388: PPUSH
58389: LD_INT 1
58391: PPUSH
58392: CALL_OW 287
58396: PUSH
58397: LD_INT 10
58399: MUL
58400: ST_TO_ADDR
// r := rate / 10 ;
58401: LD_ADDR_VAR 0 7
58405: PUSH
58406: LD_VAR 0 2
58410: PUSH
58411: LD_INT 10
58413: DIVREAL
58414: ST_TO_ADDR
// time := 1 1$00 ;
58415: LD_ADDR_VAR 0 8
58419: PUSH
58420: LD_INT 2100
58422: ST_TO_ADDR
// if amount < min then
58423: LD_VAR 0 9
58427: PUSH
58428: LD_VAR 0 3
58432: LESS
58433: IFFALSE 58451
// r := r * 2 else
58435: LD_ADDR_VAR 0 7
58439: PUSH
58440: LD_VAR 0 7
58444: PUSH
58445: LD_INT 2
58447: MUL
58448: ST_TO_ADDR
58449: GO 58477
// if amount > max then
58451: LD_VAR 0 9
58455: PUSH
58456: LD_VAR 0 4
58460: GREATER
58461: IFFALSE 58477
// r := r / 2 ;
58463: LD_ADDR_VAR 0 7
58467: PUSH
58468: LD_VAR 0 7
58472: PUSH
58473: LD_INT 2
58475: DIVREAL
58476: ST_TO_ADDR
// time := time / r ;
58477: LD_ADDR_VAR 0 8
58481: PUSH
58482: LD_VAR 0 8
58486: PUSH
58487: LD_VAR 0 7
58491: DIVREAL
58492: ST_TO_ADDR
// if time < 0 then
58493: LD_VAR 0 8
58497: PUSH
58498: LD_INT 0
58500: LESS
58501: IFFALSE 58518
// time := time * - 1 ;
58503: LD_ADDR_VAR 0 8
58507: PUSH
58508: LD_VAR 0 8
58512: PUSH
58513: LD_INT 1
58515: NEG
58516: MUL
58517: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
58518: LD_VAR 0 8
58522: PUSH
58523: LD_INT 35
58525: PPUSH
58526: LD_INT 875
58528: PPUSH
58529: CALL_OW 12
58533: PLUS
58534: PPUSH
58535: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58539: LD_INT 1
58541: PPUSH
58542: LD_INT 5
58544: PPUSH
58545: CALL_OW 12
58549: PPUSH
58550: LD_VAR 0 1
58554: PPUSH
58555: LD_INT 1
58557: PPUSH
58558: CALL_OW 55
// end ;
58562: GO 58375
// end ;
58564: LD_VAR 0 5
58568: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58569: LD_INT 0
58571: PPUSH
58572: PPUSH
58573: PPUSH
58574: PPUSH
58575: PPUSH
58576: PPUSH
58577: PPUSH
58578: PPUSH
// if not turrets or not factories then
58579: LD_VAR 0 1
58583: NOT
58584: PUSH
58585: LD_VAR 0 2
58589: NOT
58590: OR
58591: IFFALSE 58595
// exit ;
58593: GO 58902
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58595: LD_ADDR_VAR 0 10
58599: PUSH
58600: LD_INT 5
58602: PUSH
58603: LD_INT 6
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 2
58612: PUSH
58613: LD_INT 4
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 3
58622: PUSH
58623: LD_INT 5
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 24
58637: PUSH
58638: LD_INT 25
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 23
58647: PUSH
58648: LD_INT 27
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 42
58661: PUSH
58662: LD_INT 43
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 44
58671: PUSH
58672: LD_INT 46
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 45
58681: PUSH
58682: LD_INT 47
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: LIST
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: LIST
58698: ST_TO_ADDR
// result := [ ] ;
58699: LD_ADDR_VAR 0 3
58703: PUSH
58704: EMPTY
58705: ST_TO_ADDR
// for i in turrets do
58706: LD_ADDR_VAR 0 4
58710: PUSH
58711: LD_VAR 0 1
58715: PUSH
58716: FOR_IN
58717: IFFALSE 58900
// begin nat := GetNation ( i ) ;
58719: LD_ADDR_VAR 0 7
58723: PUSH
58724: LD_VAR 0 4
58728: PPUSH
58729: CALL_OW 248
58733: ST_TO_ADDR
// weapon := 0 ;
58734: LD_ADDR_VAR 0 8
58738: PUSH
58739: LD_INT 0
58741: ST_TO_ADDR
// if not nat then
58742: LD_VAR 0 7
58746: NOT
58747: IFFALSE 58751
// continue ;
58749: GO 58716
// for j in list [ nat ] do
58751: LD_ADDR_VAR 0 5
58755: PUSH
58756: LD_VAR 0 10
58760: PUSH
58761: LD_VAR 0 7
58765: ARRAY
58766: PUSH
58767: FOR_IN
58768: IFFALSE 58809
// if GetBWeapon ( i ) = j [ 1 ] then
58770: LD_VAR 0 4
58774: PPUSH
58775: CALL_OW 269
58779: PUSH
58780: LD_VAR 0 5
58784: PUSH
58785: LD_INT 1
58787: ARRAY
58788: EQUAL
58789: IFFALSE 58807
// begin weapon := j [ 2 ] ;
58791: LD_ADDR_VAR 0 8
58795: PUSH
58796: LD_VAR 0 5
58800: PUSH
58801: LD_INT 2
58803: ARRAY
58804: ST_TO_ADDR
// break ;
58805: GO 58809
// end ;
58807: GO 58767
58809: POP
58810: POP
// if not weapon then
58811: LD_VAR 0 8
58815: NOT
58816: IFFALSE 58820
// continue ;
58818: GO 58716
// for k in factories do
58820: LD_ADDR_VAR 0 6
58824: PUSH
58825: LD_VAR 0 2
58829: PUSH
58830: FOR_IN
58831: IFFALSE 58896
// begin weapons := AvailableWeaponList ( k ) ;
58833: LD_ADDR_VAR 0 9
58837: PUSH
58838: LD_VAR 0 6
58842: PPUSH
58843: CALL_OW 478
58847: ST_TO_ADDR
// if not weapons then
58848: LD_VAR 0 9
58852: NOT
58853: IFFALSE 58857
// continue ;
58855: GO 58830
// if weapon in weapons then
58857: LD_VAR 0 8
58861: PUSH
58862: LD_VAR 0 9
58866: IN
58867: IFFALSE 58894
// begin result := [ i , weapon ] ;
58869: LD_ADDR_VAR 0 3
58873: PUSH
58874: LD_VAR 0 4
58878: PUSH
58879: LD_VAR 0 8
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: ST_TO_ADDR
// exit ;
58888: POP
58889: POP
58890: POP
58891: POP
58892: GO 58902
// end ; end ;
58894: GO 58830
58896: POP
58897: POP
// end ;
58898: GO 58716
58900: POP
58901: POP
// end ;
58902: LD_VAR 0 3
58906: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58907: LD_INT 0
58909: PPUSH
// if not side or side > 8 then
58910: LD_VAR 0 3
58914: NOT
58915: PUSH
58916: LD_VAR 0 3
58920: PUSH
58921: LD_INT 8
58923: GREATER
58924: OR
58925: IFFALSE 58929
// exit ;
58927: GO 58988
// if not range then
58929: LD_VAR 0 4
58933: NOT
58934: IFFALSE 58945
// range := - 12 ;
58936: LD_ADDR_VAR 0 4
58940: PUSH
58941: LD_INT 12
58943: NEG
58944: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58945: LD_VAR 0 1
58949: PPUSH
58950: LD_VAR 0 2
58954: PPUSH
58955: LD_VAR 0 3
58959: PPUSH
58960: LD_VAR 0 4
58964: PPUSH
58965: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58969: LD_VAR 0 1
58973: PPUSH
58974: LD_VAR 0 2
58978: PPUSH
58979: LD_VAR 0 3
58983: PPUSH
58984: CALL_OW 331
// end ;
58988: LD_VAR 0 5
58992: RET
// export function Video ( mode ) ; begin
58993: LD_INT 0
58995: PPUSH
// ingame_video = mode ;
58996: LD_ADDR_OWVAR 52
59000: PUSH
59001: LD_VAR 0 1
59005: ST_TO_ADDR
// interface_hidden = mode ;
59006: LD_ADDR_OWVAR 54
59010: PUSH
59011: LD_VAR 0 1
59015: ST_TO_ADDR
// end ;
59016: LD_VAR 0 2
59020: RET
// export function Join ( array , element ) ; begin
59021: LD_INT 0
59023: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59024: LD_ADDR_VAR 0 3
59028: PUSH
59029: LD_VAR 0 1
59033: PPUSH
59034: LD_VAR 0 1
59038: PUSH
59039: LD_INT 1
59041: PLUS
59042: PPUSH
59043: LD_VAR 0 2
59047: PPUSH
59048: CALL_OW 1
59052: ST_TO_ADDR
// end ;
59053: LD_VAR 0 3
59057: RET
// export function JoinUnion ( array , element ) ; begin
59058: LD_INT 0
59060: PPUSH
// result := array union element ;
59061: LD_ADDR_VAR 0 3
59065: PUSH
59066: LD_VAR 0 1
59070: PUSH
59071: LD_VAR 0 2
59075: UNION
59076: ST_TO_ADDR
// end ;
59077: LD_VAR 0 3
59081: RET
// export function GetBehemoths ( side ) ; begin
59082: LD_INT 0
59084: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
59085: LD_ADDR_VAR 0 2
59089: PUSH
59090: LD_INT 22
59092: PUSH
59093: LD_VAR 0 1
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 31
59104: PUSH
59105: LD_INT 25
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PPUSH
59116: CALL_OW 69
59120: ST_TO_ADDR
// end ;
59121: LD_VAR 0 2
59125: RET
// export function Shuffle ( array ) ; var i , index ; begin
59126: LD_INT 0
59128: PPUSH
59129: PPUSH
59130: PPUSH
// result := [ ] ;
59131: LD_ADDR_VAR 0 2
59135: PUSH
59136: EMPTY
59137: ST_TO_ADDR
// if not array then
59138: LD_VAR 0 1
59142: NOT
59143: IFFALSE 59147
// exit ;
59145: GO 59246
// Randomize ;
59147: CALL_OW 10
// for i = array downto 1 do
59151: LD_ADDR_VAR 0 3
59155: PUSH
59156: DOUBLE
59157: LD_VAR 0 1
59161: INC
59162: ST_TO_ADDR
59163: LD_INT 1
59165: PUSH
59166: FOR_DOWNTO
59167: IFFALSE 59244
// begin index := rand ( 1 , array ) ;
59169: LD_ADDR_VAR 0 4
59173: PUSH
59174: LD_INT 1
59176: PPUSH
59177: LD_VAR 0 1
59181: PPUSH
59182: CALL_OW 12
59186: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59187: LD_ADDR_VAR 0 2
59191: PUSH
59192: LD_VAR 0 2
59196: PPUSH
59197: LD_VAR 0 2
59201: PUSH
59202: LD_INT 1
59204: PLUS
59205: PPUSH
59206: LD_VAR 0 1
59210: PUSH
59211: LD_VAR 0 4
59215: ARRAY
59216: PPUSH
59217: CALL_OW 2
59221: ST_TO_ADDR
// array := Delete ( array , index ) ;
59222: LD_ADDR_VAR 0 1
59226: PUSH
59227: LD_VAR 0 1
59231: PPUSH
59232: LD_VAR 0 4
59236: PPUSH
59237: CALL_OW 3
59241: ST_TO_ADDR
// end ;
59242: GO 59166
59244: POP
59245: POP
// end ;
59246: LD_VAR 0 2
59250: RET
// export function GetBaseMaterials ( base ) ; begin
59251: LD_INT 0
59253: PPUSH
// result := [ 0 , 0 , 0 ] ;
59254: LD_ADDR_VAR 0 2
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: LD_INT 0
59264: PUSH
59265: LD_INT 0
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: LIST
59272: ST_TO_ADDR
// if not base then
59273: LD_VAR 0 1
59277: NOT
59278: IFFALSE 59282
// exit ;
59280: GO 59331
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59282: LD_ADDR_VAR 0 2
59286: PUSH
59287: LD_VAR 0 1
59291: PPUSH
59292: LD_INT 1
59294: PPUSH
59295: CALL_OW 275
59299: PUSH
59300: LD_VAR 0 1
59304: PPUSH
59305: LD_INT 2
59307: PPUSH
59308: CALL_OW 275
59312: PUSH
59313: LD_VAR 0 1
59317: PPUSH
59318: LD_INT 3
59320: PPUSH
59321: CALL_OW 275
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: LIST
59330: ST_TO_ADDR
// end ;
59331: LD_VAR 0 2
59335: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59336: LD_INT 0
59338: PPUSH
59339: PPUSH
// result := array ;
59340: LD_ADDR_VAR 0 3
59344: PUSH
59345: LD_VAR 0 1
59349: ST_TO_ADDR
// if size >= result then
59350: LD_VAR 0 2
59354: PUSH
59355: LD_VAR 0 3
59359: GREATEREQUAL
59360: IFFALSE 59364
// exit ;
59362: GO 59414
// if size then
59364: LD_VAR 0 2
59368: IFFALSE 59414
// for i := array downto size do
59370: LD_ADDR_VAR 0 4
59374: PUSH
59375: DOUBLE
59376: LD_VAR 0 1
59380: INC
59381: ST_TO_ADDR
59382: LD_VAR 0 2
59386: PUSH
59387: FOR_DOWNTO
59388: IFFALSE 59412
// result := Delete ( result , result ) ;
59390: LD_ADDR_VAR 0 3
59394: PUSH
59395: LD_VAR 0 3
59399: PPUSH
59400: LD_VAR 0 3
59404: PPUSH
59405: CALL_OW 3
59409: ST_TO_ADDR
59410: GO 59387
59412: POP
59413: POP
// end ;
59414: LD_VAR 0 3
59418: RET
// export function ComExit ( unit ) ; var tmp ; begin
59419: LD_INT 0
59421: PPUSH
59422: PPUSH
// if not IsInUnit ( unit ) then
59423: LD_VAR 0 1
59427: PPUSH
59428: CALL_OW 310
59432: NOT
59433: IFFALSE 59437
// exit ;
59435: GO 59497
// tmp := IsInUnit ( unit ) ;
59437: LD_ADDR_VAR 0 3
59441: PUSH
59442: LD_VAR 0 1
59446: PPUSH
59447: CALL_OW 310
59451: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59452: LD_VAR 0 3
59456: PPUSH
59457: CALL_OW 247
59461: PUSH
59462: LD_INT 2
59464: EQUAL
59465: IFFALSE 59478
// ComExitVehicle ( unit ) else
59467: LD_VAR 0 1
59471: PPUSH
59472: CALL_OW 121
59476: GO 59487
// ComExitBuilding ( unit ) ;
59478: LD_VAR 0 1
59482: PPUSH
59483: CALL_OW 122
// result := tmp ;
59487: LD_ADDR_VAR 0 2
59491: PUSH
59492: LD_VAR 0 3
59496: ST_TO_ADDR
// end ;
59497: LD_VAR 0 2
59501: RET
// export function ComExitAll ( units ) ; var i ; begin
59502: LD_INT 0
59504: PPUSH
59505: PPUSH
// if not units then
59506: LD_VAR 0 1
59510: NOT
59511: IFFALSE 59515
// exit ;
59513: GO 59541
// for i in units do
59515: LD_ADDR_VAR 0 3
59519: PUSH
59520: LD_VAR 0 1
59524: PUSH
59525: FOR_IN
59526: IFFALSE 59539
// ComExit ( i ) ;
59528: LD_VAR 0 3
59532: PPUSH
59533: CALL 59419 0 1
59537: GO 59525
59539: POP
59540: POP
// end ;
59541: LD_VAR 0 2
59545: RET
// export function ResetHc ; begin
59546: LD_INT 0
59548: PPUSH
// InitHc ;
59549: CALL_OW 19
// hc_importance := 0 ;
59553: LD_ADDR_OWVAR 32
59557: PUSH
59558: LD_INT 0
59560: ST_TO_ADDR
// end ;
59561: LD_VAR 0 1
59565: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59566: LD_INT 0
59568: PPUSH
59569: PPUSH
59570: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59571: LD_ADDR_VAR 0 6
59575: PUSH
59576: LD_VAR 0 1
59580: PUSH
59581: LD_VAR 0 3
59585: PLUS
59586: PUSH
59587: LD_INT 2
59589: DIV
59590: ST_TO_ADDR
// if _x < 0 then
59591: LD_VAR 0 6
59595: PUSH
59596: LD_INT 0
59598: LESS
59599: IFFALSE 59616
// _x := _x * - 1 ;
59601: LD_ADDR_VAR 0 6
59605: PUSH
59606: LD_VAR 0 6
59610: PUSH
59611: LD_INT 1
59613: NEG
59614: MUL
59615: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59616: LD_ADDR_VAR 0 7
59620: PUSH
59621: LD_VAR 0 2
59625: PUSH
59626: LD_VAR 0 4
59630: PLUS
59631: PUSH
59632: LD_INT 2
59634: DIV
59635: ST_TO_ADDR
// if _y < 0 then
59636: LD_VAR 0 7
59640: PUSH
59641: LD_INT 0
59643: LESS
59644: IFFALSE 59661
// _y := _y * - 1 ;
59646: LD_ADDR_VAR 0 7
59650: PUSH
59651: LD_VAR 0 7
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: MUL
59660: ST_TO_ADDR
// result := [ _x , _y ] ;
59661: LD_ADDR_VAR 0 5
59665: PUSH
59666: LD_VAR 0 6
59670: PUSH
59671: LD_VAR 0 7
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: ST_TO_ADDR
// end ;
59680: LD_VAR 0 5
59684: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59685: LD_INT 0
59687: PPUSH
59688: PPUSH
59689: PPUSH
59690: PPUSH
// task := GetTaskList ( unit ) ;
59691: LD_ADDR_VAR 0 7
59695: PUSH
59696: LD_VAR 0 1
59700: PPUSH
59701: CALL_OW 437
59705: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59706: LD_VAR 0 7
59710: NOT
59711: PUSH
59712: LD_VAR 0 1
59716: PPUSH
59717: LD_VAR 0 2
59721: PPUSH
59722: CALL_OW 308
59726: NOT
59727: AND
59728: IFFALSE 59732
// exit ;
59730: GO 59850
// if IsInArea ( unit , area ) then
59732: LD_VAR 0 1
59736: PPUSH
59737: LD_VAR 0 2
59741: PPUSH
59742: CALL_OW 308
59746: IFFALSE 59764
// begin ComMoveToArea ( unit , goAway ) ;
59748: LD_VAR 0 1
59752: PPUSH
59753: LD_VAR 0 3
59757: PPUSH
59758: CALL_OW 113
// exit ;
59762: GO 59850
// end ; if task [ 1 ] [ 1 ] <> M then
59764: LD_VAR 0 7
59768: PUSH
59769: LD_INT 1
59771: ARRAY
59772: PUSH
59773: LD_INT 1
59775: ARRAY
59776: PUSH
59777: LD_STRING M
59779: NONEQUAL
59780: IFFALSE 59784
// exit ;
59782: GO 59850
// x := task [ 1 ] [ 2 ] ;
59784: LD_ADDR_VAR 0 5
59788: PUSH
59789: LD_VAR 0 7
59793: PUSH
59794: LD_INT 1
59796: ARRAY
59797: PUSH
59798: LD_INT 2
59800: ARRAY
59801: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59802: LD_ADDR_VAR 0 6
59806: PUSH
59807: LD_VAR 0 7
59811: PUSH
59812: LD_INT 1
59814: ARRAY
59815: PUSH
59816: LD_INT 3
59818: ARRAY
59819: ST_TO_ADDR
// if InArea ( x , y , area ) then
59820: LD_VAR 0 5
59824: PPUSH
59825: LD_VAR 0 6
59829: PPUSH
59830: LD_VAR 0 2
59834: PPUSH
59835: CALL_OW 309
59839: IFFALSE 59850
// ComStop ( unit ) ;
59841: LD_VAR 0 1
59845: PPUSH
59846: CALL_OW 141
// end ;
59850: LD_VAR 0 4
59854: RET
// export function Abs ( value ) ; begin
59855: LD_INT 0
59857: PPUSH
// result := value ;
59858: LD_ADDR_VAR 0 2
59862: PUSH
59863: LD_VAR 0 1
59867: ST_TO_ADDR
// if value < 0 then
59868: LD_VAR 0 1
59872: PUSH
59873: LD_INT 0
59875: LESS
59876: IFFALSE 59893
// result := value * - 1 ;
59878: LD_ADDR_VAR 0 2
59882: PUSH
59883: LD_VAR 0 1
59887: PUSH
59888: LD_INT 1
59890: NEG
59891: MUL
59892: ST_TO_ADDR
// end ;
59893: LD_VAR 0 2
59897: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59898: LD_INT 0
59900: PPUSH
59901: PPUSH
59902: PPUSH
59903: PPUSH
59904: PPUSH
59905: PPUSH
59906: PPUSH
59907: PPUSH
// if not unit or not building then
59908: LD_VAR 0 1
59912: NOT
59913: PUSH
59914: LD_VAR 0 2
59918: NOT
59919: OR
59920: IFFALSE 59924
// exit ;
59922: GO 60150
// x := GetX ( building ) ;
59924: LD_ADDR_VAR 0 4
59928: PUSH
59929: LD_VAR 0 2
59933: PPUSH
59934: CALL_OW 250
59938: ST_TO_ADDR
// y := GetY ( building ) ;
59939: LD_ADDR_VAR 0 6
59943: PUSH
59944: LD_VAR 0 2
59948: PPUSH
59949: CALL_OW 251
59953: ST_TO_ADDR
// d := GetDir ( building ) ;
59954: LD_ADDR_VAR 0 8
59958: PUSH
59959: LD_VAR 0 2
59963: PPUSH
59964: CALL_OW 254
59968: ST_TO_ADDR
// r := 4 ;
59969: LD_ADDR_VAR 0 9
59973: PUSH
59974: LD_INT 4
59976: ST_TO_ADDR
// for i := 1 to 5 do
59977: LD_ADDR_VAR 0 10
59981: PUSH
59982: DOUBLE
59983: LD_INT 1
59985: DEC
59986: ST_TO_ADDR
59987: LD_INT 5
59989: PUSH
59990: FOR_TO
59991: IFFALSE 60148
// begin _x := ShiftX ( x , d , r + i ) ;
59993: LD_ADDR_VAR 0 5
59997: PUSH
59998: LD_VAR 0 4
60002: PPUSH
60003: LD_VAR 0 8
60007: PPUSH
60008: LD_VAR 0 9
60012: PUSH
60013: LD_VAR 0 10
60017: PLUS
60018: PPUSH
60019: CALL_OW 272
60023: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60024: LD_ADDR_VAR 0 7
60028: PUSH
60029: LD_VAR 0 6
60033: PPUSH
60034: LD_VAR 0 8
60038: PPUSH
60039: LD_VAR 0 9
60043: PUSH
60044: LD_VAR 0 10
60048: PLUS
60049: PPUSH
60050: CALL_OW 273
60054: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60055: LD_VAR 0 5
60059: PPUSH
60060: LD_VAR 0 7
60064: PPUSH
60065: CALL_OW 488
60069: PUSH
60070: LD_VAR 0 5
60074: PPUSH
60075: LD_VAR 0 7
60079: PPUSH
60080: CALL_OW 428
60084: PPUSH
60085: CALL_OW 247
60089: PUSH
60090: LD_INT 3
60092: PUSH
60093: LD_INT 2
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: IN
60100: NOT
60101: AND
60102: IFFALSE 60146
// begin ComMoveXY ( unit , _x , _y ) ;
60104: LD_VAR 0 1
60108: PPUSH
60109: LD_VAR 0 5
60113: PPUSH
60114: LD_VAR 0 7
60118: PPUSH
60119: CALL_OW 111
// result := [ _x , _y ] ;
60123: LD_ADDR_VAR 0 3
60127: PUSH
60128: LD_VAR 0 5
60132: PUSH
60133: LD_VAR 0 7
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: ST_TO_ADDR
// exit ;
60142: POP
60143: POP
60144: GO 60150
// end ; end ;
60146: GO 59990
60148: POP
60149: POP
// end ;
60150: LD_VAR 0 3
60154: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60155: LD_INT 0
60157: PPUSH
60158: PPUSH
60159: PPUSH
// result := 0 ;
60160: LD_ADDR_VAR 0 3
60164: PUSH
60165: LD_INT 0
60167: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60168: LD_VAR 0 1
60172: PUSH
60173: LD_INT 0
60175: LESS
60176: PUSH
60177: LD_VAR 0 1
60181: PUSH
60182: LD_INT 8
60184: GREATER
60185: OR
60186: PUSH
60187: LD_VAR 0 2
60191: PUSH
60192: LD_INT 0
60194: LESS
60195: OR
60196: PUSH
60197: LD_VAR 0 2
60201: PUSH
60202: LD_INT 8
60204: GREATER
60205: OR
60206: IFFALSE 60210
// exit ;
60208: GO 60285
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60210: LD_ADDR_VAR 0 4
60214: PUSH
60215: LD_INT 22
60217: PUSH
60218: LD_VAR 0 2
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PPUSH
60227: CALL_OW 69
60231: PUSH
60232: FOR_IN
60233: IFFALSE 60283
// begin un := UnitShoot ( i ) ;
60235: LD_ADDR_VAR 0 5
60239: PUSH
60240: LD_VAR 0 4
60244: PPUSH
60245: CALL_OW 504
60249: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60250: LD_VAR 0 5
60254: PPUSH
60255: CALL_OW 255
60259: PUSH
60260: LD_VAR 0 1
60264: EQUAL
60265: IFFALSE 60281
// begin result := un ;
60267: LD_ADDR_VAR 0 3
60271: PUSH
60272: LD_VAR 0 5
60276: ST_TO_ADDR
// exit ;
60277: POP
60278: POP
60279: GO 60285
// end ; end ;
60281: GO 60232
60283: POP
60284: POP
// end ;
60285: LD_VAR 0 3
60289: RET
// export function GetCargoBay ( units ) ; begin
60290: LD_INT 0
60292: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60293: LD_ADDR_VAR 0 2
60297: PUSH
60298: LD_VAR 0 1
60302: PPUSH
60303: LD_INT 2
60305: PUSH
60306: LD_INT 34
60308: PUSH
60309: LD_INT 12
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 34
60318: PUSH
60319: LD_INT 51
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 34
60328: PUSH
60329: LD_INT 32
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 34
60338: PUSH
60339: LD_INT 89
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: PPUSH
60353: CALL_OW 72
60357: ST_TO_ADDR
// end ;
60358: LD_VAR 0 2
60362: RET
// export function Negate ( value ) ; begin
60363: LD_INT 0
60365: PPUSH
// result := not value ;
60366: LD_ADDR_VAR 0 2
60370: PUSH
60371: LD_VAR 0 1
60375: NOT
60376: ST_TO_ADDR
// end ;
60377: LD_VAR 0 2
60381: RET
// export function Inc ( value ) ; begin
60382: LD_INT 0
60384: PPUSH
// result := value + 1 ;
60385: LD_ADDR_VAR 0 2
60389: PUSH
60390: LD_VAR 0 1
60394: PUSH
60395: LD_INT 1
60397: PLUS
60398: ST_TO_ADDR
// end ;
60399: LD_VAR 0 2
60403: RET
// export function Dec ( value ) ; begin
60404: LD_INT 0
60406: PPUSH
// result := value - 1 ;
60407: LD_ADDR_VAR 0 2
60411: PUSH
60412: LD_VAR 0 1
60416: PUSH
60417: LD_INT 1
60419: MINUS
60420: ST_TO_ADDR
// end ;
60421: LD_VAR 0 2
60425: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60426: LD_INT 0
60428: PPUSH
60429: PPUSH
60430: PPUSH
60431: PPUSH
60432: PPUSH
60433: PPUSH
60434: PPUSH
60435: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60436: LD_VAR 0 1
60440: PPUSH
60441: LD_VAR 0 2
60445: PPUSH
60446: CALL_OW 488
60450: NOT
60451: PUSH
60452: LD_VAR 0 3
60456: PPUSH
60457: LD_VAR 0 4
60461: PPUSH
60462: CALL_OW 488
60466: NOT
60467: OR
60468: IFFALSE 60481
// begin result := - 1 ;
60470: LD_ADDR_VAR 0 5
60474: PUSH
60475: LD_INT 1
60477: NEG
60478: ST_TO_ADDR
// exit ;
60479: GO 60716
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60481: LD_ADDR_VAR 0 12
60485: PUSH
60486: LD_VAR 0 1
60490: PPUSH
60491: LD_VAR 0 2
60495: PPUSH
60496: LD_VAR 0 3
60500: PPUSH
60501: LD_VAR 0 4
60505: PPUSH
60506: CALL 59566 0 4
60510: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60511: LD_ADDR_VAR 0 11
60515: PUSH
60516: LD_VAR 0 1
60520: PPUSH
60521: LD_VAR 0 2
60525: PPUSH
60526: LD_VAR 0 12
60530: PUSH
60531: LD_INT 1
60533: ARRAY
60534: PPUSH
60535: LD_VAR 0 12
60539: PUSH
60540: LD_INT 2
60542: ARRAY
60543: PPUSH
60544: CALL_OW 298
60548: ST_TO_ADDR
// distance := 9999 ;
60549: LD_ADDR_VAR 0 10
60553: PUSH
60554: LD_INT 9999
60556: ST_TO_ADDR
// for i := 0 to 5 do
60557: LD_ADDR_VAR 0 6
60561: PUSH
60562: DOUBLE
60563: LD_INT 0
60565: DEC
60566: ST_TO_ADDR
60567: LD_INT 5
60569: PUSH
60570: FOR_TO
60571: IFFALSE 60714
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60573: LD_ADDR_VAR 0 7
60577: PUSH
60578: LD_VAR 0 1
60582: PPUSH
60583: LD_VAR 0 6
60587: PPUSH
60588: LD_VAR 0 11
60592: PPUSH
60593: CALL_OW 272
60597: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60598: LD_ADDR_VAR 0 8
60602: PUSH
60603: LD_VAR 0 2
60607: PPUSH
60608: LD_VAR 0 6
60612: PPUSH
60613: LD_VAR 0 11
60617: PPUSH
60618: CALL_OW 273
60622: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60623: LD_VAR 0 7
60627: PPUSH
60628: LD_VAR 0 8
60632: PPUSH
60633: CALL_OW 488
60637: NOT
60638: IFFALSE 60642
// continue ;
60640: GO 60570
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60642: LD_ADDR_VAR 0 9
60646: PUSH
60647: LD_VAR 0 12
60651: PUSH
60652: LD_INT 1
60654: ARRAY
60655: PPUSH
60656: LD_VAR 0 12
60660: PUSH
60661: LD_INT 2
60663: ARRAY
60664: PPUSH
60665: LD_VAR 0 7
60669: PPUSH
60670: LD_VAR 0 8
60674: PPUSH
60675: CALL_OW 298
60679: ST_TO_ADDR
// if tmp < distance then
60680: LD_VAR 0 9
60684: PUSH
60685: LD_VAR 0 10
60689: LESS
60690: IFFALSE 60712
// begin result := i ;
60692: LD_ADDR_VAR 0 5
60696: PUSH
60697: LD_VAR 0 6
60701: ST_TO_ADDR
// distance := tmp ;
60702: LD_ADDR_VAR 0 10
60706: PUSH
60707: LD_VAR 0 9
60711: ST_TO_ADDR
// end ; end ;
60712: GO 60570
60714: POP
60715: POP
// end ;
60716: LD_VAR 0 5
60720: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60721: LD_INT 0
60723: PPUSH
60724: PPUSH
// if not driver or not IsInUnit ( driver ) then
60725: LD_VAR 0 1
60729: NOT
60730: PUSH
60731: LD_VAR 0 1
60735: PPUSH
60736: CALL_OW 310
60740: NOT
60741: OR
60742: IFFALSE 60746
// exit ;
60744: GO 60836
// vehicle := IsInUnit ( driver ) ;
60746: LD_ADDR_VAR 0 3
60750: PUSH
60751: LD_VAR 0 1
60755: PPUSH
60756: CALL_OW 310
60760: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60761: LD_VAR 0 1
60765: PPUSH
60766: LD_STRING \
60768: PUSH
60769: LD_INT 0
60771: PUSH
60772: LD_INT 0
60774: PUSH
60775: LD_INT 0
60777: PUSH
60778: LD_INT 0
60780: PUSH
60781: LD_INT 0
60783: PUSH
60784: LD_INT 0
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: PUSH
60796: LD_STRING E
60798: PUSH
60799: LD_INT 0
60801: PUSH
60802: LD_INT 0
60804: PUSH
60805: LD_VAR 0 3
60809: PUSH
60810: LD_INT 0
60812: PUSH
60813: LD_INT 0
60815: PUSH
60816: LD_INT 0
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PPUSH
60832: CALL_OW 446
// end ;
60836: LD_VAR 0 2
60840: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60841: LD_INT 0
60843: PPUSH
60844: PPUSH
// if not driver or not IsInUnit ( driver ) then
60845: LD_VAR 0 1
60849: NOT
60850: PUSH
60851: LD_VAR 0 1
60855: PPUSH
60856: CALL_OW 310
60860: NOT
60861: OR
60862: IFFALSE 60866
// exit ;
60864: GO 60956
// vehicle := IsInUnit ( driver ) ;
60866: LD_ADDR_VAR 0 3
60870: PUSH
60871: LD_VAR 0 1
60875: PPUSH
60876: CALL_OW 310
60880: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60881: LD_VAR 0 1
60885: PPUSH
60886: LD_STRING \
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: LD_INT 0
60894: PUSH
60895: LD_INT 0
60897: PUSH
60898: LD_INT 0
60900: PUSH
60901: LD_INT 0
60903: PUSH
60904: LD_INT 0
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: PUSH
60916: LD_STRING E
60918: PUSH
60919: LD_INT 0
60921: PUSH
60922: LD_INT 0
60924: PUSH
60925: LD_VAR 0 3
60929: PUSH
60930: LD_INT 0
60932: PUSH
60933: LD_INT 0
60935: PUSH
60936: LD_INT 0
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PPUSH
60952: CALL_OW 447
// end ;
60956: LD_VAR 0 2
60960: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60961: LD_INT 0
60963: PPUSH
60964: PPUSH
60965: PPUSH
// tmp := [ ] ;
60966: LD_ADDR_VAR 0 5
60970: PUSH
60971: EMPTY
60972: ST_TO_ADDR
// for i in units do
60973: LD_ADDR_VAR 0 4
60977: PUSH
60978: LD_VAR 0 1
60982: PUSH
60983: FOR_IN
60984: IFFALSE 61022
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60986: LD_ADDR_VAR 0 5
60990: PUSH
60991: LD_VAR 0 5
60995: PPUSH
60996: LD_VAR 0 5
61000: PUSH
61001: LD_INT 1
61003: PLUS
61004: PPUSH
61005: LD_VAR 0 4
61009: PPUSH
61010: CALL_OW 256
61014: PPUSH
61015: CALL_OW 2
61019: ST_TO_ADDR
61020: GO 60983
61022: POP
61023: POP
// if not tmp then
61024: LD_VAR 0 5
61028: NOT
61029: IFFALSE 61033
// exit ;
61031: GO 61081
// if asc then
61033: LD_VAR 0 2
61037: IFFALSE 61061
// result := SortListByListAsc ( units , tmp ) else
61039: LD_ADDR_VAR 0 3
61043: PUSH
61044: LD_VAR 0 1
61048: PPUSH
61049: LD_VAR 0 5
61053: PPUSH
61054: CALL_OW 76
61058: ST_TO_ADDR
61059: GO 61081
// result := SortListByListDesc ( units , tmp ) ;
61061: LD_ADDR_VAR 0 3
61065: PUSH
61066: LD_VAR 0 1
61070: PPUSH
61071: LD_VAR 0 5
61075: PPUSH
61076: CALL_OW 77
61080: ST_TO_ADDR
// end ;
61081: LD_VAR 0 3
61085: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61086: LD_INT 0
61088: PPUSH
61089: PPUSH
// task := GetTaskList ( mech ) ;
61090: LD_ADDR_VAR 0 4
61094: PUSH
61095: LD_VAR 0 1
61099: PPUSH
61100: CALL_OW 437
61104: ST_TO_ADDR
// if not task then
61105: LD_VAR 0 4
61109: NOT
61110: IFFALSE 61114
// exit ;
61112: GO 61156
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61114: LD_ADDR_VAR 0 3
61118: PUSH
61119: LD_VAR 0 4
61123: PUSH
61124: LD_INT 1
61126: ARRAY
61127: PUSH
61128: LD_INT 1
61130: ARRAY
61131: PUSH
61132: LD_STRING r
61134: EQUAL
61135: PUSH
61136: LD_VAR 0 4
61140: PUSH
61141: LD_INT 1
61143: ARRAY
61144: PUSH
61145: LD_INT 4
61147: ARRAY
61148: PUSH
61149: LD_VAR 0 2
61153: EQUAL
61154: AND
61155: ST_TO_ADDR
// end ;
61156: LD_VAR 0 3
61160: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61161: LD_INT 0
61163: PPUSH
// SetDir ( unit , d ) ;
61164: LD_VAR 0 1
61168: PPUSH
61169: LD_VAR 0 4
61173: PPUSH
61174: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
61178: LD_VAR 0 1
61182: PPUSH
61183: LD_VAR 0 2
61187: PPUSH
61188: LD_VAR 0 3
61192: PPUSH
61193: LD_VAR 0 5
61197: PPUSH
61198: CALL_OW 48
// end ;
61202: LD_VAR 0 6
61206: RET
// export function ToNaturalNumber ( number ) ; begin
61207: LD_INT 0
61209: PPUSH
// result := number div 1 ;
61210: LD_ADDR_VAR 0 2
61214: PUSH
61215: LD_VAR 0 1
61219: PUSH
61220: LD_INT 1
61222: DIV
61223: ST_TO_ADDR
// if number < 0 then
61224: LD_VAR 0 1
61228: PUSH
61229: LD_INT 0
61231: LESS
61232: IFFALSE 61242
// result := 0 ;
61234: LD_ADDR_VAR 0 2
61238: PUSH
61239: LD_INT 0
61241: ST_TO_ADDR
// end ;
61242: LD_VAR 0 2
61246: RET
// export function SortByClass ( units , class ) ; var un ; begin
61247: LD_INT 0
61249: PPUSH
61250: PPUSH
// if not units or not class then
61251: LD_VAR 0 1
61255: NOT
61256: PUSH
61257: LD_VAR 0 2
61261: NOT
61262: OR
61263: IFFALSE 61267
// exit ;
61265: GO 61362
// result := [ ] ;
61267: LD_ADDR_VAR 0 3
61271: PUSH
61272: EMPTY
61273: ST_TO_ADDR
// for un in units do
61274: LD_ADDR_VAR 0 4
61278: PUSH
61279: LD_VAR 0 1
61283: PUSH
61284: FOR_IN
61285: IFFALSE 61360
// if GetClass ( un ) = class then
61287: LD_VAR 0 4
61291: PPUSH
61292: CALL_OW 257
61296: PUSH
61297: LD_VAR 0 2
61301: EQUAL
61302: IFFALSE 61329
// result := Insert ( result , 1 , un ) else
61304: LD_ADDR_VAR 0 3
61308: PUSH
61309: LD_VAR 0 3
61313: PPUSH
61314: LD_INT 1
61316: PPUSH
61317: LD_VAR 0 4
61321: PPUSH
61322: CALL_OW 2
61326: ST_TO_ADDR
61327: GO 61358
// result := Replace ( result , result + 1 , un ) ;
61329: LD_ADDR_VAR 0 3
61333: PUSH
61334: LD_VAR 0 3
61338: PPUSH
61339: LD_VAR 0 3
61343: PUSH
61344: LD_INT 1
61346: PLUS
61347: PPUSH
61348: LD_VAR 0 4
61352: PPUSH
61353: CALL_OW 1
61357: ST_TO_ADDR
61358: GO 61284
61360: POP
61361: POP
// end ;
61362: LD_VAR 0 3
61366: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61367: LD_INT 0
61369: PPUSH
61370: PPUSH
61371: PPUSH
61372: PPUSH
61373: PPUSH
61374: PPUSH
61375: PPUSH
// result := [ ] ;
61376: LD_ADDR_VAR 0 4
61380: PUSH
61381: EMPTY
61382: ST_TO_ADDR
// if x - r < 0 then
61383: LD_VAR 0 1
61387: PUSH
61388: LD_VAR 0 3
61392: MINUS
61393: PUSH
61394: LD_INT 0
61396: LESS
61397: IFFALSE 61409
// min_x := 0 else
61399: LD_ADDR_VAR 0 8
61403: PUSH
61404: LD_INT 0
61406: ST_TO_ADDR
61407: GO 61425
// min_x := x - r ;
61409: LD_ADDR_VAR 0 8
61413: PUSH
61414: LD_VAR 0 1
61418: PUSH
61419: LD_VAR 0 3
61423: MINUS
61424: ST_TO_ADDR
// if y - r < 0 then
61425: LD_VAR 0 2
61429: PUSH
61430: LD_VAR 0 3
61434: MINUS
61435: PUSH
61436: LD_INT 0
61438: LESS
61439: IFFALSE 61451
// min_y := 0 else
61441: LD_ADDR_VAR 0 7
61445: PUSH
61446: LD_INT 0
61448: ST_TO_ADDR
61449: GO 61467
// min_y := y - r ;
61451: LD_ADDR_VAR 0 7
61455: PUSH
61456: LD_VAR 0 2
61460: PUSH
61461: LD_VAR 0 3
61465: MINUS
61466: ST_TO_ADDR
// max_x := x + r ;
61467: LD_ADDR_VAR 0 9
61471: PUSH
61472: LD_VAR 0 1
61476: PUSH
61477: LD_VAR 0 3
61481: PLUS
61482: ST_TO_ADDR
// max_y := y + r ;
61483: LD_ADDR_VAR 0 10
61487: PUSH
61488: LD_VAR 0 2
61492: PUSH
61493: LD_VAR 0 3
61497: PLUS
61498: ST_TO_ADDR
// for _x = min_x to max_x do
61499: LD_ADDR_VAR 0 5
61503: PUSH
61504: DOUBLE
61505: LD_VAR 0 8
61509: DEC
61510: ST_TO_ADDR
61511: LD_VAR 0 9
61515: PUSH
61516: FOR_TO
61517: IFFALSE 61618
// for _y = min_y to max_y do
61519: LD_ADDR_VAR 0 6
61523: PUSH
61524: DOUBLE
61525: LD_VAR 0 7
61529: DEC
61530: ST_TO_ADDR
61531: LD_VAR 0 10
61535: PUSH
61536: FOR_TO
61537: IFFALSE 61614
// begin if not ValidHex ( _x , _y ) then
61539: LD_VAR 0 5
61543: PPUSH
61544: LD_VAR 0 6
61548: PPUSH
61549: CALL_OW 488
61553: NOT
61554: IFFALSE 61558
// continue ;
61556: GO 61536
// if GetResourceTypeXY ( _x , _y ) then
61558: LD_VAR 0 5
61562: PPUSH
61563: LD_VAR 0 6
61567: PPUSH
61568: CALL_OW 283
61572: IFFALSE 61612
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61574: LD_ADDR_VAR 0 4
61578: PUSH
61579: LD_VAR 0 4
61583: PPUSH
61584: LD_VAR 0 4
61588: PUSH
61589: LD_INT 1
61591: PLUS
61592: PPUSH
61593: LD_VAR 0 5
61597: PUSH
61598: LD_VAR 0 6
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PPUSH
61607: CALL_OW 1
61611: ST_TO_ADDR
// end ;
61612: GO 61536
61614: POP
61615: POP
61616: GO 61516
61618: POP
61619: POP
// end ;
61620: LD_VAR 0 4
61624: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61625: LD_INT 0
61627: PPUSH
61628: PPUSH
61629: PPUSH
61630: PPUSH
61631: PPUSH
61632: PPUSH
61633: PPUSH
61634: PPUSH
// if not units then
61635: LD_VAR 0 1
61639: NOT
61640: IFFALSE 61644
// exit ;
61642: GO 62168
// result := UnitFilter ( units , [ f_ok ] ) ;
61644: LD_ADDR_VAR 0 3
61648: PUSH
61649: LD_VAR 0 1
61653: PPUSH
61654: LD_INT 50
61656: PUSH
61657: EMPTY
61658: LIST
61659: PPUSH
61660: CALL_OW 72
61664: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61665: LD_ADDR_VAR 0 8
61669: PUSH
61670: LD_VAR 0 1
61674: PUSH
61675: LD_INT 1
61677: ARRAY
61678: PPUSH
61679: CALL_OW 255
61683: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
61684: LD_ADDR_VAR 0 10
61688: PUSH
61689: LD_INT 29
61691: PUSH
61692: LD_INT 91
61694: PUSH
61695: LD_INT 49
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: LIST
61702: ST_TO_ADDR
// if not result then
61703: LD_VAR 0 3
61707: NOT
61708: IFFALSE 61712
// exit ;
61710: GO 62168
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61712: LD_ADDR_VAR 0 5
61716: PUSH
61717: LD_INT 81
61719: PUSH
61720: LD_VAR 0 8
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PPUSH
61729: CALL_OW 69
61733: ST_TO_ADDR
// for i in result do
61734: LD_ADDR_VAR 0 4
61738: PUSH
61739: LD_VAR 0 3
61743: PUSH
61744: FOR_IN
61745: IFFALSE 62166
// begin tag := GetTag ( i ) + 1 ;
61747: LD_ADDR_VAR 0 9
61751: PUSH
61752: LD_VAR 0 4
61756: PPUSH
61757: CALL_OW 110
61761: PUSH
61762: LD_INT 1
61764: PLUS
61765: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
61766: LD_ADDR_VAR 0 7
61770: PUSH
61771: LD_VAR 0 4
61775: PPUSH
61776: CALL_OW 250
61780: PPUSH
61781: LD_VAR 0 4
61785: PPUSH
61786: CALL_OW 251
61790: PPUSH
61791: LD_INT 6
61793: PPUSH
61794: CALL 61367 0 3
61798: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
61799: LD_VAR 0 4
61803: PPUSH
61804: CALL_OW 247
61808: PUSH
61809: LD_INT 2
61811: EQUAL
61812: PUSH
61813: LD_VAR 0 7
61817: AND
61818: PUSH
61819: LD_VAR 0 4
61823: PPUSH
61824: CALL_OW 264
61828: PUSH
61829: LD_VAR 0 10
61833: IN
61834: NOT
61835: AND
61836: IFFALSE 61875
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61838: LD_VAR 0 4
61842: PPUSH
61843: LD_VAR 0 7
61847: PUSH
61848: LD_INT 1
61850: ARRAY
61851: PUSH
61852: LD_INT 1
61854: ARRAY
61855: PPUSH
61856: LD_VAR 0 7
61860: PUSH
61861: LD_INT 1
61863: ARRAY
61864: PUSH
61865: LD_INT 2
61867: ARRAY
61868: PPUSH
61869: CALL_OW 116
61873: GO 62164
// if path > tag then
61875: LD_VAR 0 2
61879: PUSH
61880: LD_VAR 0 9
61884: GREATER
61885: IFFALSE 62093
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
61887: LD_ADDR_VAR 0 6
61891: PUSH
61892: LD_VAR 0 5
61896: PPUSH
61897: LD_INT 91
61899: PUSH
61900: LD_VAR 0 4
61904: PUSH
61905: LD_INT 8
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: LIST
61912: PPUSH
61913: CALL_OW 72
61917: ST_TO_ADDR
// if nearEnemy then
61918: LD_VAR 0 6
61922: IFFALSE 61991
// begin if GetWeapon ( i ) = ru_time_lapser then
61924: LD_VAR 0 4
61928: PPUSH
61929: CALL_OW 264
61933: PUSH
61934: LD_INT 49
61936: EQUAL
61937: IFFALSE 61965
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
61939: LD_VAR 0 4
61943: PPUSH
61944: LD_VAR 0 6
61948: PPUSH
61949: LD_VAR 0 4
61953: PPUSH
61954: CALL_OW 74
61958: PPUSH
61959: CALL_OW 112
61963: GO 61989
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
61965: LD_VAR 0 4
61969: PPUSH
61970: LD_VAR 0 6
61974: PPUSH
61975: LD_VAR 0 4
61979: PPUSH
61980: CALL_OW 74
61984: PPUSH
61985: CALL_OW 115
// end else
61989: GO 62091
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
61991: LD_VAR 0 4
61995: PPUSH
61996: LD_VAR 0 2
62000: PUSH
62001: LD_VAR 0 9
62005: ARRAY
62006: PUSH
62007: LD_INT 1
62009: ARRAY
62010: PPUSH
62011: LD_VAR 0 2
62015: PUSH
62016: LD_VAR 0 9
62020: ARRAY
62021: PUSH
62022: LD_INT 2
62024: ARRAY
62025: PPUSH
62026: CALL_OW 297
62030: PUSH
62031: LD_INT 6
62033: GREATER
62034: IFFALSE 62077
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62036: LD_VAR 0 4
62040: PPUSH
62041: LD_VAR 0 2
62045: PUSH
62046: LD_VAR 0 9
62050: ARRAY
62051: PUSH
62052: LD_INT 1
62054: ARRAY
62055: PPUSH
62056: LD_VAR 0 2
62060: PUSH
62061: LD_VAR 0 9
62065: ARRAY
62066: PUSH
62067: LD_INT 2
62069: ARRAY
62070: PPUSH
62071: CALL_OW 114
62075: GO 62091
// SetTag ( i , tag ) ;
62077: LD_VAR 0 4
62081: PPUSH
62082: LD_VAR 0 9
62086: PPUSH
62087: CALL_OW 109
// end else
62091: GO 62164
// if enemy then
62093: LD_VAR 0 5
62097: IFFALSE 62164
// begin if GetWeapon ( i ) = ru_time_lapser then
62099: LD_VAR 0 4
62103: PPUSH
62104: CALL_OW 264
62108: PUSH
62109: LD_INT 49
62111: EQUAL
62112: IFFALSE 62140
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
62114: LD_VAR 0 4
62118: PPUSH
62119: LD_VAR 0 5
62123: PPUSH
62124: LD_VAR 0 4
62128: PPUSH
62129: CALL_OW 74
62133: PPUSH
62134: CALL_OW 112
62138: GO 62164
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62140: LD_VAR 0 4
62144: PPUSH
62145: LD_VAR 0 5
62149: PPUSH
62150: LD_VAR 0 4
62154: PPUSH
62155: CALL_OW 74
62159: PPUSH
62160: CALL_OW 115
// end ; end ;
62164: GO 61744
62166: POP
62167: POP
// end ;
62168: LD_VAR 0 3
62172: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62173: LD_INT 0
62175: PPUSH
62176: PPUSH
62177: PPUSH
// if not unit or IsInUnit ( unit ) then
62178: LD_VAR 0 1
62182: NOT
62183: PUSH
62184: LD_VAR 0 1
62188: PPUSH
62189: CALL_OW 310
62193: OR
62194: IFFALSE 62198
// exit ;
62196: GO 62289
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
62198: LD_ADDR_VAR 0 4
62202: PUSH
62203: LD_VAR 0 1
62207: PPUSH
62208: CALL_OW 250
62212: PPUSH
62213: LD_VAR 0 2
62217: PPUSH
62218: LD_INT 1
62220: PPUSH
62221: CALL_OW 272
62225: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
62226: LD_ADDR_VAR 0 5
62230: PUSH
62231: LD_VAR 0 1
62235: PPUSH
62236: CALL_OW 251
62240: PPUSH
62241: LD_VAR 0 2
62245: PPUSH
62246: LD_INT 1
62248: PPUSH
62249: CALL_OW 273
62253: ST_TO_ADDR
// if ValidHex ( x , y ) then
62254: LD_VAR 0 4
62258: PPUSH
62259: LD_VAR 0 5
62263: PPUSH
62264: CALL_OW 488
62268: IFFALSE 62289
// ComTurnXY ( unit , x , y ) ;
62270: LD_VAR 0 1
62274: PPUSH
62275: LD_VAR 0 4
62279: PPUSH
62280: LD_VAR 0 5
62284: PPUSH
62285: CALL_OW 118
// end ;
62289: LD_VAR 0 3
62293: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62294: LD_INT 0
62296: PPUSH
62297: PPUSH
// result := false ;
62298: LD_ADDR_VAR 0 3
62302: PUSH
62303: LD_INT 0
62305: ST_TO_ADDR
// if not units then
62306: LD_VAR 0 2
62310: NOT
62311: IFFALSE 62315
// exit ;
62313: GO 62360
// for i in units do
62315: LD_ADDR_VAR 0 4
62319: PUSH
62320: LD_VAR 0 2
62324: PUSH
62325: FOR_IN
62326: IFFALSE 62358
// if See ( side , i ) then
62328: LD_VAR 0 1
62332: PPUSH
62333: LD_VAR 0 4
62337: PPUSH
62338: CALL_OW 292
62342: IFFALSE 62356
// begin result := true ;
62344: LD_ADDR_VAR 0 3
62348: PUSH
62349: LD_INT 1
62351: ST_TO_ADDR
// exit ;
62352: POP
62353: POP
62354: GO 62360
// end ;
62356: GO 62325
62358: POP
62359: POP
// end ;
62360: LD_VAR 0 3
62364: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62365: LD_INT 0
62367: PPUSH
62368: PPUSH
62369: PPUSH
62370: PPUSH
// if not unit or not points then
62371: LD_VAR 0 1
62375: NOT
62376: PUSH
62377: LD_VAR 0 2
62381: NOT
62382: OR
62383: IFFALSE 62387
// exit ;
62385: GO 62477
// dist := 99999 ;
62387: LD_ADDR_VAR 0 5
62391: PUSH
62392: LD_INT 99999
62394: ST_TO_ADDR
// for i in points do
62395: LD_ADDR_VAR 0 4
62399: PUSH
62400: LD_VAR 0 2
62404: PUSH
62405: FOR_IN
62406: IFFALSE 62475
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62408: LD_ADDR_VAR 0 6
62412: PUSH
62413: LD_VAR 0 1
62417: PPUSH
62418: LD_VAR 0 4
62422: PUSH
62423: LD_INT 1
62425: ARRAY
62426: PPUSH
62427: LD_VAR 0 4
62431: PUSH
62432: LD_INT 2
62434: ARRAY
62435: PPUSH
62436: CALL_OW 297
62440: ST_TO_ADDR
// if tmpDist < dist then
62441: LD_VAR 0 6
62445: PUSH
62446: LD_VAR 0 5
62450: LESS
62451: IFFALSE 62473
// begin result := i ;
62453: LD_ADDR_VAR 0 3
62457: PUSH
62458: LD_VAR 0 4
62462: ST_TO_ADDR
// dist := tmpDist ;
62463: LD_ADDR_VAR 0 5
62467: PUSH
62468: LD_VAR 0 6
62472: ST_TO_ADDR
// end ; end ;
62473: GO 62405
62475: POP
62476: POP
// end ;
62477: LD_VAR 0 3
62481: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
62482: LD_INT 0
62484: PPUSH
// uc_side := side ;
62485: LD_ADDR_OWVAR 20
62489: PUSH
62490: LD_VAR 0 1
62494: ST_TO_ADDR
// uc_nation := 3 ;
62495: LD_ADDR_OWVAR 21
62499: PUSH
62500: LD_INT 3
62502: ST_TO_ADDR
// vc_chassis := 25 ;
62503: LD_ADDR_OWVAR 37
62507: PUSH
62508: LD_INT 25
62510: ST_TO_ADDR
// vc_engine := engine_siberite ;
62511: LD_ADDR_OWVAR 39
62515: PUSH
62516: LD_INT 3
62518: ST_TO_ADDR
// vc_control := control_computer ;
62519: LD_ADDR_OWVAR 38
62523: PUSH
62524: LD_INT 3
62526: ST_TO_ADDR
// vc_weapon := 59 ;
62527: LD_ADDR_OWVAR 40
62531: PUSH
62532: LD_INT 59
62534: ST_TO_ADDR
// result := CreateVehicle ;
62535: LD_ADDR_VAR 0 5
62539: PUSH
62540: CALL_OW 45
62544: ST_TO_ADDR
// SetDir ( result , d ) ;
62545: LD_VAR 0 5
62549: PPUSH
62550: LD_VAR 0 4
62554: PPUSH
62555: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
62559: LD_VAR 0 5
62563: PPUSH
62564: LD_VAR 0 2
62568: PPUSH
62569: LD_VAR 0 3
62573: PPUSH
62574: LD_INT 0
62576: PPUSH
62577: CALL_OW 48
// end ;
62581: LD_VAR 0 5
62585: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
62586: LD_INT 0
62588: PPUSH
62589: PPUSH
62590: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
62591: LD_ADDR_VAR 0 2
62595: PUSH
62596: LD_INT 0
62598: PUSH
62599: LD_INT 0
62601: PUSH
62602: LD_INT 0
62604: PUSH
62605: LD_INT 0
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
62614: LD_VAR 0 1
62618: NOT
62619: PUSH
62620: LD_VAR 0 1
62624: PPUSH
62625: CALL_OW 264
62629: PUSH
62630: LD_INT 12
62632: PUSH
62633: LD_INT 51
62635: PUSH
62636: LD_INT 32
62638: PUSH
62639: LD_INT 89
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: IN
62648: NOT
62649: OR
62650: IFFALSE 62654
// exit ;
62652: GO 62752
// for i := 1 to 3 do
62654: LD_ADDR_VAR 0 3
62658: PUSH
62659: DOUBLE
62660: LD_INT 1
62662: DEC
62663: ST_TO_ADDR
62664: LD_INT 3
62666: PUSH
62667: FOR_TO
62668: IFFALSE 62750
// begin tmp := GetCargo ( cargo , i ) ;
62670: LD_ADDR_VAR 0 4
62674: PUSH
62675: LD_VAR 0 1
62679: PPUSH
62680: LD_VAR 0 3
62684: PPUSH
62685: CALL_OW 289
62689: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
62690: LD_ADDR_VAR 0 2
62694: PUSH
62695: LD_VAR 0 2
62699: PPUSH
62700: LD_VAR 0 3
62704: PPUSH
62705: LD_VAR 0 4
62709: PPUSH
62710: CALL_OW 1
62714: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
62715: LD_ADDR_VAR 0 2
62719: PUSH
62720: LD_VAR 0 2
62724: PPUSH
62725: LD_INT 4
62727: PPUSH
62728: LD_VAR 0 2
62732: PUSH
62733: LD_INT 4
62735: ARRAY
62736: PUSH
62737: LD_VAR 0 4
62741: PLUS
62742: PPUSH
62743: CALL_OW 1
62747: ST_TO_ADDR
// end ;
62748: GO 62667
62750: POP
62751: POP
// end ;
62752: LD_VAR 0 2
62756: RET
// export function Length ( array ) ; begin
62757: LD_INT 0
62759: PPUSH
// result := array + 0 ;
62760: LD_ADDR_VAR 0 2
62764: PUSH
62765: LD_VAR 0 1
62769: PUSH
62770: LD_INT 0
62772: PLUS
62773: ST_TO_ADDR
// end ;
62774: LD_VAR 0 2
62778: RET
// export function PrepareArray ( array ) ; begin
62779: LD_INT 0
62781: PPUSH
// result := array diff 0 ;
62782: LD_ADDR_VAR 0 2
62786: PUSH
62787: LD_VAR 0 1
62791: PUSH
62792: LD_INT 0
62794: DIFF
62795: ST_TO_ADDR
// if not result [ 1 ] then
62796: LD_VAR 0 2
62800: PUSH
62801: LD_INT 1
62803: ARRAY
62804: NOT
62805: IFFALSE 62825
// result := Delete ( result , 1 ) ;
62807: LD_ADDR_VAR 0 2
62811: PUSH
62812: LD_VAR 0 2
62816: PPUSH
62817: LD_INT 1
62819: PPUSH
62820: CALL_OW 3
62824: ST_TO_ADDR
// end ;
62825: LD_VAR 0 2
62829: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
62830: LD_INT 0
62832: PPUSH
62833: PPUSH
62834: PPUSH
62835: PPUSH
// sibRocketRange := 25 ;
62836: LD_ADDR_VAR 0 6
62840: PUSH
62841: LD_INT 25
62843: ST_TO_ADDR
// result := false ;
62844: LD_ADDR_VAR 0 4
62848: PUSH
62849: LD_INT 0
62851: ST_TO_ADDR
// for i := 0 to 5 do
62852: LD_ADDR_VAR 0 5
62856: PUSH
62857: DOUBLE
62858: LD_INT 0
62860: DEC
62861: ST_TO_ADDR
62862: LD_INT 5
62864: PUSH
62865: FOR_TO
62866: IFFALSE 62933
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
62868: LD_VAR 0 1
62872: PPUSH
62873: LD_VAR 0 5
62877: PPUSH
62878: LD_VAR 0 6
62882: PPUSH
62883: CALL_OW 272
62887: PPUSH
62888: LD_VAR 0 2
62892: PPUSH
62893: LD_VAR 0 5
62897: PPUSH
62898: LD_VAR 0 6
62902: PPUSH
62903: CALL_OW 273
62907: PPUSH
62908: LD_VAR 0 3
62912: PPUSH
62913: CALL_OW 309
62917: IFFALSE 62931
// begin result := true ;
62919: LD_ADDR_VAR 0 4
62923: PUSH
62924: LD_INT 1
62926: ST_TO_ADDR
// exit ;
62927: POP
62928: POP
62929: GO 62935
// end ;
62931: GO 62865
62933: POP
62934: POP
// end ;
62935: LD_VAR 0 4
62939: RET
