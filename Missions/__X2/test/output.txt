// every 0 0$1 do var amConvoyGroups ;
   0: GO 2
   2: DISABLE
   3: LD_INT 0
   5: PPUSH
// begin amConvoyGroups := [ [ [ 1 , 2 , 3 , 5 ] [ Difficulty ] , [ 0 , 0 , 1 , 1 ] [ Difficulty ] , [ 1 , 1 , 2 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 0 , 1 , 1 , 2 ] [ Difficulty ] ] , [ [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 0 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] ] , [ [ 1 , 2 , 3 , 4 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] ] , [ [ 3 , 4 , 6 , 7 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 1 , 3 ] [ Difficulty ] ] ] ;
   6: LD_ADDR_VAR 0 1
  10: PUSH
  11: LD_INT 1
  13: PUSH
  14: LD_INT 2
  16: PUSH
  17: LD_INT 3
  19: PUSH
  20: LD_INT 5
  22: PUSH
  23: EMPTY
  24: LIST
  25: LIST
  26: LIST
  27: LIST
  28: PUSH
  29: LD_OWVAR 67
  33: ARRAY
  34: PUSH
  35: LD_INT 0
  37: PUSH
  38: LD_INT 0
  40: PUSH
  41: LD_INT 1
  43: PUSH
  44: LD_INT 1
  46: PUSH
  47: EMPTY
  48: LIST
  49: LIST
  50: LIST
  51: LIST
  52: PUSH
  53: LD_OWVAR 67
  57: ARRAY
  58: PUSH
  59: LD_INT 1
  61: PUSH
  62: LD_INT 1
  64: PUSH
  65: LD_INT 2
  67: PUSH
  68: LD_INT 2
  70: PUSH
  71: EMPTY
  72: LIST
  73: LIST
  74: LIST
  75: LIST
  76: PUSH
  77: LD_OWVAR 67
  81: ARRAY
  82: PUSH
  83: LD_INT 1
  85: PUSH
  86: LD_INT 1
  88: PUSH
  89: LD_INT 1
  91: PUSH
  92: LD_INT 2
  94: PUSH
  95: EMPTY
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: PUSH
 107: LD_INT 0
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: LD_INT 1
 115: PUSH
 116: LD_INT 2
 118: PUSH
 119: EMPTY
 120: LIST
 121: LIST
 122: LIST
 123: LIST
 124: PUSH
 125: LD_OWVAR 67
 129: ARRAY
 130: PUSH
 131: EMPTY
 132: LIST
 133: LIST
 134: LIST
 135: LIST
 136: LIST
 137: PUSH
 138: LD_INT 3
 140: PUSH
 141: LD_INT 4
 143: PUSH
 144: LD_INT 5
 146: PUSH
 147: LD_INT 6
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: LD_OWVAR 67
 160: ARRAY
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 1
 167: PUSH
 168: LD_INT 1
 170: PUSH
 171: LD_INT 2
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_OWVAR 67
 184: ARRAY
 185: PUSH
 186: LD_INT 1
 188: PUSH
 189: LD_INT 1
 191: PUSH
 192: LD_INT 2
 194: PUSH
 195: LD_INT 3
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: PUSH
 210: LD_INT 1
 212: PUSH
 213: LD_INT 1
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: LD_INT 3
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_OWVAR 67
 232: ARRAY
 233: PUSH
 234: LD_INT 1
 236: PUSH
 237: LD_INT 1
 239: PUSH
 240: LD_INT 2
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: PUSH
 252: LD_OWVAR 67
 256: ARRAY
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: LIST
 264: PUSH
 265: LD_INT 1
 267: PUSH
 268: LD_INT 2
 270: PUSH
 271: LD_INT 3
 273: PUSH
 274: LD_INT 4
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: PUSH
 283: LD_OWVAR 67
 287: ARRAY
 288: PUSH
 289: LD_INT 1
 291: PUSH
 292: LD_INT 1
 294: PUSH
 295: LD_INT 1
 297: PUSH
 298: LD_INT 2
 300: PUSH
 301: EMPTY
 302: LIST
 303: LIST
 304: LIST
 305: LIST
 306: PUSH
 307: LD_OWVAR 67
 311: ARRAY
 312: PUSH
 313: LD_INT 1
 315: PUSH
 316: LD_INT 1
 318: PUSH
 319: LD_INT 2
 321: PUSH
 322: LD_INT 2
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: PUSH
 331: LD_OWVAR 67
 335: ARRAY
 336: PUSH
 337: LD_INT 1
 339: PUSH
 340: LD_INT 1
 342: PUSH
 343: LD_INT 1
 345: PUSH
 346: LD_INT 2
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: LIST
 353: LIST
 354: PUSH
 355: LD_OWVAR 67
 359: ARRAY
 360: PUSH
 361: LD_INT 1
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: LD_INT 2
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: LIST
 377: LIST
 378: PUSH
 379: LD_OWVAR 67
 383: ARRAY
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: LIST
 389: LIST
 390: LIST
 391: PUSH
 392: LD_INT 3
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: LD_INT 7
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: PUSH
 410: LD_OWVAR 67
 414: ARRAY
 415: PUSH
 416: LD_INT 1
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: LD_INT 1
 424: PUSH
 425: LD_INT 2
 427: PUSH
 428: EMPTY
 429: LIST
 430: LIST
 431: LIST
 432: LIST
 433: PUSH
 434: LD_OWVAR 67
 438: ARRAY
 439: PUSH
 440: LD_INT 1
 442: PUSH
 443: LD_INT 1
 445: PUSH
 446: LD_INT 2
 448: PUSH
 449: LD_INT 3
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: LIST
 456: LIST
 457: PUSH
 458: LD_OWVAR 67
 462: ARRAY
 463: PUSH
 464: LD_INT 1
 466: PUSH
 467: LD_INT 1
 469: PUSH
 470: LD_INT 2
 472: PUSH
 473: LD_INT 3
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: LD_OWVAR 67
 486: ARRAY
 487: PUSH
 488: LD_INT 1
 490: PUSH
 491: LD_INT 1
 493: PUSH
 494: LD_INT 1
 496: PUSH
 497: LD_INT 3
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: PUSH
 506: LD_OWVAR 67
 510: ARRAY
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: ST_TO_ADDR
// display_strings := amConvoyGroups [ 1 ] ;
 525: LD_ADDR_OWVAR 47
 529: PUSH
 530: LD_VAR 0 1
 534: PUSH
 535: LD_INT 1
 537: ARRAY
 538: ST_TO_ADDR
// PrepareAmericanConvoy ( amConvoyGroups [ 1 ] [ 1 ] , amConvoyGroups [ 1 ] [ 2 ] , amConvoyGroups [ 1 ] [ 3 ] , amConvoyGroups [ 1 ] [ 4 ] , amConvoyGroups [ 1 ] [ 5 ] , area11 ) ;
 539: LD_VAR 0 1
 543: PUSH
 544: LD_INT 1
 546: ARRAY
 547: PUSH
 548: LD_INT 1
 550: ARRAY
 551: PPUSH
 552: LD_VAR 0 1
 556: PUSH
 557: LD_INT 1
 559: ARRAY
 560: PUSH
 561: LD_INT 2
 563: ARRAY
 564: PPUSH
 565: LD_VAR 0 1
 569: PUSH
 570: LD_INT 1
 572: ARRAY
 573: PUSH
 574: LD_INT 3
 576: ARRAY
 577: PPUSH
 578: LD_VAR 0 1
 582: PUSH
 583: LD_INT 1
 585: ARRAY
 586: PUSH
 587: LD_INT 4
 589: ARRAY
 590: PPUSH
 591: LD_VAR 0 1
 595: PUSH
 596: LD_INT 1
 598: ARRAY
 599: PUSH
 600: LD_INT 5
 602: ARRAY
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL 614 0 6
// end ;
 611: PPOPN 1
 613: END
// export function PrepareAmericanConvoy ( soldiersAmount , engsAmount , mechsAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road , sols , engs , mechs , scis , enemySkillLevel , amConvoyTroops ; begin
 614: LD_INT 0
 616: PPUSH
 617: PPUSH
 618: PPUSH
 619: PPUSH
 620: PPUSH
 621: PPUSH
 622: PPUSH
 623: PPUSH
 624: PPUSH
 625: PPUSH
 626: PPUSH
// enemySkilllevel := 2 ;
 627: LD_ADDR_VAR 0 16
 631: PUSH
 632: LD_INT 2
 634: ST_TO_ADDR
// uc_side := 1 ;
 635: LD_ADDR_OWVAR 20
 639: PUSH
 640: LD_INT 1
 642: ST_TO_ADDR
// uc_nation := 1 ;
 643: LD_ADDR_OWVAR 21
 647: PUSH
 648: LD_INT 1
 650: ST_TO_ADDR
// hc_name :=  ;
 651: LD_ADDR_OWVAR 26
 655: PUSH
 656: LD_STRING 
 658: ST_TO_ADDR
// hc_gallery :=  ;
 659: LD_ADDR_OWVAR 33
 663: PUSH
 664: LD_STRING 
 666: ST_TO_ADDR
// for i := 1 to soldiersAmount do
 667: LD_ADDR_VAR 0 8
 671: PUSH
 672: DOUBLE
 673: LD_INT 1
 675: DEC
 676: ST_TO_ADDR
 677: LD_VAR 0 1
 681: PUSH
 682: FOR_TO
 683: IFFALSE 758
// begin PrepareSoldier ( false , enemySkillLevel ) ;
 685: LD_INT 0
 687: PPUSH
 688: LD_VAR 0 16
 692: PPUSH
 693: CALL_OW 381
// un = CreateHuman ;
 697: LD_ADDR_VAR 0 9
 701: PUSH
 702: CALL_OW 44
 706: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 707: LD_ADDR_VAR 0 17
 711: PUSH
 712: LD_VAR 0 17
 716: PUSH
 717: LD_VAR 0 9
 721: ADD
 722: ST_TO_ADDR
// sols := sols ^ un ;
 723: LD_ADDR_VAR 0 12
 727: PUSH
 728: LD_VAR 0 12
 732: PUSH
 733: LD_VAR 0 9
 737: ADD
 738: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 739: LD_VAR 0 9
 743: PPUSH
 744: LD_VAR 0 6
 748: PPUSH
 749: LD_INT 0
 751: PPUSH
 752: CALL_OW 49
// end ;
 756: GO 682
 758: POP
 759: POP
// for i := 1 to engsAmount do
 760: LD_ADDR_VAR 0 8
 764: PUSH
 765: DOUBLE
 766: LD_INT 1
 768: DEC
 769: ST_TO_ADDR
 770: LD_VAR 0 2
 774: PUSH
 775: FOR_TO
 776: IFFALSE 851
// begin PrepareEngineer ( false , enemySkillLevel ) ;
 778: LD_INT 0
 780: PPUSH
 781: LD_VAR 0 16
 785: PPUSH
 786: CALL_OW 382
// un = CreateHuman ;
 790: LD_ADDR_VAR 0 9
 794: PUSH
 795: CALL_OW 44
 799: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 800: LD_ADDR_VAR 0 17
 804: PUSH
 805: LD_VAR 0 17
 809: PUSH
 810: LD_VAR 0 9
 814: ADD
 815: ST_TO_ADDR
// engs := engs ^ un ;
 816: LD_ADDR_VAR 0 13
 820: PUSH
 821: LD_VAR 0 13
 825: PUSH
 826: LD_VAR 0 9
 830: ADD
 831: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 832: LD_VAR 0 9
 836: PPUSH
 837: LD_VAR 0 6
 841: PPUSH
 842: LD_INT 0
 844: PPUSH
 845: CALL_OW 49
// end ;
 849: GO 775
 851: POP
 852: POP
// for i := 1 to mechsAmount do
 853: LD_ADDR_VAR 0 8
 857: PUSH
 858: DOUBLE
 859: LD_INT 1
 861: DEC
 862: ST_TO_ADDR
 863: LD_VAR 0 3
 867: PUSH
 868: FOR_TO
 869: IFFALSE 944
// begin PrepareEngineer ( false , enemySkillLevel ) ;
 871: LD_INT 0
 873: PPUSH
 874: LD_VAR 0 16
 878: PPUSH
 879: CALL_OW 382
// un = CreateHuman ;
 883: LD_ADDR_VAR 0 9
 887: PUSH
 888: CALL_OW 44
 892: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 893: LD_ADDR_VAR 0 17
 897: PUSH
 898: LD_VAR 0 17
 902: PUSH
 903: LD_VAR 0 9
 907: ADD
 908: ST_TO_ADDR
// engs := engs ^ un ;
 909: LD_ADDR_VAR 0 13
 913: PUSH
 914: LD_VAR 0 13
 918: PUSH
 919: LD_VAR 0 9
 923: ADD
 924: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 925: LD_VAR 0 9
 929: PPUSH
 930: LD_VAR 0 6
 934: PPUSH
 935: LD_INT 0
 937: PPUSH
 938: CALL_OW 49
// end ;
 942: GO 868
 944: POP
 945: POP
// for i := 1 to scientistsAmount do
 946: LD_ADDR_VAR 0 8
 950: PUSH
 951: DOUBLE
 952: LD_INT 1
 954: DEC
 955: ST_TO_ADDR
 956: LD_VAR 0 4
 960: PUSH
 961: FOR_TO
 962: IFFALSE 1037
// begin PrepareMechanic ( false , enemySkillLevel ) ;
 964: LD_INT 0
 966: PPUSH
 967: LD_VAR 0 16
 971: PPUSH
 972: CALL_OW 383
// un = CreateHuman ;
 976: LD_ADDR_VAR 0 9
 980: PUSH
 981: CALL_OW 44
 985: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 986: LD_ADDR_VAR 0 17
 990: PUSH
 991: LD_VAR 0 17
 995: PUSH
 996: LD_VAR 0 9
1000: ADD
1001: ST_TO_ADDR
// mechs := mechs ^ un ;
1002: LD_ADDR_VAR 0 14
1006: PUSH
1007: LD_VAR 0 14
1011: PUSH
1012: LD_VAR 0 9
1016: ADD
1017: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1018: LD_VAR 0 9
1022: PPUSH
1023: LD_VAR 0 6
1027: PPUSH
1028: LD_INT 0
1030: PPUSH
1031: CALL_OW 49
// end ;
1035: GO 961
1037: POP
1038: POP
// for i := 1 to vehiclesAmount do
1039: LD_ADDR_VAR 0 8
1043: PUSH
1044: DOUBLE
1045: LD_INT 1
1047: DEC
1048: ST_TO_ADDR
1049: LD_VAR 0 5
1053: PUSH
1054: FOR_TO
1055: IFFALSE 1221
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
1057: LD_ADDR_OWVAR 40
1061: PUSH
1062: LD_INT 2
1064: PUSH
1065: LD_INT 4
1067: PUSH
1068: LD_INT 3
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_INT 1
1078: PPUSH
1079: LD_INT 3
1081: PPUSH
1082: CALL_OW 12
1086: ARRAY
1087: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1088: LD_ADDR_OWVAR 37
1092: PUSH
1093: LD_INT 3
1095: ST_TO_ADDR
// vc_control = control_manual ;
1096: LD_ADDR_OWVAR 38
1100: PUSH
1101: LD_INT 1
1103: ST_TO_ADDR
// vc_engine = engine_combustion ;
1104: LD_ADDR_OWVAR 39
1108: PUSH
1109: LD_INT 1
1111: ST_TO_ADDR
// veh = CreateVehicle ;
1112: LD_ADDR_VAR 0 10
1116: PUSH
1117: CALL_OW 45
1121: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ veh ;
1122: LD_ADDR_VAR 0 17
1126: PUSH
1127: LD_VAR 0 17
1131: PUSH
1132: LD_VAR 0 10
1136: ADD
1137: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
1138: LD_VAR 0 10
1142: PPUSH
1143: LD_VAR 0 6
1147: PPUSH
1148: LD_INT 0
1150: PPUSH
1151: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
1155: LD_INT 0
1157: PPUSH
1158: LD_VAR 0 16
1162: PPUSH
1163: CALL_OW 383
// un = CreateHuman ;
1167: LD_ADDR_VAR 0 9
1171: PUSH
1172: CALL_OW 44
1176: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ un ;
1177: LD_ADDR_VAR 0 17
1181: PUSH
1182: LD_VAR 0 17
1186: PUSH
1187: LD_VAR 0 9
1191: ADD
1192: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1193: LD_VAR 0 9
1197: PPUSH
1198: LD_VAR 0 10
1202: PPUSH
1203: CALL_OW 52
// SetFuel ( veh , 100 ) ;
1207: LD_VAR 0 10
1211: PPUSH
1212: LD_INT 100
1214: PPUSH
1215: CALL_OW 240
// end ;
1219: GO 1054
1221: POP
1222: POP
// end ; end_of_file
1223: LD_VAR 0 7
1227: RET
// every 0 0$1 do
1228: GO 1230
1230: DISABLE
// begin enable ;
1231: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1232: LD_STRING updateTimer(
1234: PUSH
1235: LD_OWVAR 1
1239: STR
1240: PUSH
1241: LD_STRING );
1243: STR
1244: PPUSH
1245: CALL_OW 559
// end ;
1249: END
// export function SOS_MapStart ( ) ; begin
1250: LD_INT 0
1252: PPUSH
// if streamModeActive then
1253: LD_EXP 1
1257: IFFALSE 1266
// DefineStreamItems ( true ) ;
1259: LD_INT 1
1261: PPUSH
1262: CALL 2920 0 1
// UpdateFactoryWaypoints ( ) ;
1266: CALL 15781 0 0
// UpdateWarehouseGatheringPoints ( ) ;
1270: CALL 16038 0 0
// end ;
1274: LD_VAR 0 1
1278: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
1279: LD_INT 0
1281: PPUSH
// if p2 = 100 then
1282: LD_VAR 0 2
1286: PUSH
1287: LD_INT 100
1289: EQUAL
1290: IFFALSE 2293
// begin if not StreamModeActive then
1292: LD_EXP 1
1296: NOT
1297: IFFALSE 1307
// StreamModeActive := true ;
1299: LD_ADDR_EXP 1
1303: PUSH
1304: LD_INT 1
1306: ST_TO_ADDR
// if p3 = 0 then
1307: LD_VAR 0 3
1311: PUSH
1312: LD_INT 0
1314: EQUAL
1315: IFFALSE 1321
// InitStreamMode ;
1317: CALL 2456 0 0
// if p3 = 1 then
1321: LD_VAR 0 3
1325: PUSH
1326: LD_INT 1
1328: EQUAL
1329: IFFALSE 1339
// sRocket := true ;
1331: LD_ADDR_EXP 6
1335: PUSH
1336: LD_INT 1
1338: ST_TO_ADDR
// if p3 = 2 then
1339: LD_VAR 0 3
1343: PUSH
1344: LD_INT 2
1346: EQUAL
1347: IFFALSE 1357
// sSpeed := true ;
1349: LD_ADDR_EXP 5
1353: PUSH
1354: LD_INT 1
1356: ST_TO_ADDR
// if p3 = 3 then
1357: LD_VAR 0 3
1361: PUSH
1362: LD_INT 3
1364: EQUAL
1365: IFFALSE 1375
// sEngine := true ;
1367: LD_ADDR_EXP 7
1371: PUSH
1372: LD_INT 1
1374: ST_TO_ADDR
// if p3 = 4 then
1375: LD_VAR 0 3
1379: PUSH
1380: LD_INT 4
1382: EQUAL
1383: IFFALSE 1393
// sSpec := true ;
1385: LD_ADDR_EXP 4
1389: PUSH
1390: LD_INT 1
1392: ST_TO_ADDR
// if p3 = 5 then
1393: LD_VAR 0 3
1397: PUSH
1398: LD_INT 5
1400: EQUAL
1401: IFFALSE 1411
// sLevel := true ;
1403: LD_ADDR_EXP 8
1407: PUSH
1408: LD_INT 1
1410: ST_TO_ADDR
// if p3 = 6 then
1411: LD_VAR 0 3
1415: PUSH
1416: LD_INT 6
1418: EQUAL
1419: IFFALSE 1429
// sArmoury := true ;
1421: LD_ADDR_EXP 9
1425: PUSH
1426: LD_INT 1
1428: ST_TO_ADDR
// if p3 = 7 then
1429: LD_VAR 0 3
1433: PUSH
1434: LD_INT 7
1436: EQUAL
1437: IFFALSE 1447
// sRadar := true ;
1439: LD_ADDR_EXP 10
1443: PUSH
1444: LD_INT 1
1446: ST_TO_ADDR
// if p3 = 8 then
1447: LD_VAR 0 3
1451: PUSH
1452: LD_INT 8
1454: EQUAL
1455: IFFALSE 1465
// sBunker := true ;
1457: LD_ADDR_EXP 11
1461: PUSH
1462: LD_INT 1
1464: ST_TO_ADDR
// if p3 = 9 then
1465: LD_VAR 0 3
1469: PUSH
1470: LD_INT 9
1472: EQUAL
1473: IFFALSE 1483
// sHack := true ;
1475: LD_ADDR_EXP 12
1479: PUSH
1480: LD_INT 1
1482: ST_TO_ADDR
// if p3 = 10 then
1483: LD_VAR 0 3
1487: PUSH
1488: LD_INT 10
1490: EQUAL
1491: IFFALSE 1501
// sFire := true ;
1493: LD_ADDR_EXP 13
1497: PUSH
1498: LD_INT 1
1500: ST_TO_ADDR
// if p3 = 11 then
1501: LD_VAR 0 3
1505: PUSH
1506: LD_INT 11
1508: EQUAL
1509: IFFALSE 1519
// sRefresh := true ;
1511: LD_ADDR_EXP 14
1515: PUSH
1516: LD_INT 1
1518: ST_TO_ADDR
// if p3 = 12 then
1519: LD_VAR 0 3
1523: PUSH
1524: LD_INT 12
1526: EQUAL
1527: IFFALSE 1537
// sExp := true ;
1529: LD_ADDR_EXP 15
1533: PUSH
1534: LD_INT 1
1536: ST_TO_ADDR
// if p3 = 13 then
1537: LD_VAR 0 3
1541: PUSH
1542: LD_INT 13
1544: EQUAL
1545: IFFALSE 1555
// sDepot := true ;
1547: LD_ADDR_EXP 16
1551: PUSH
1552: LD_INT 1
1554: ST_TO_ADDR
// if p3 = 14 then
1555: LD_VAR 0 3
1559: PUSH
1560: LD_INT 14
1562: EQUAL
1563: IFFALSE 1573
// sFlag := true ;
1565: LD_ADDR_EXP 17
1569: PUSH
1570: LD_INT 1
1572: ST_TO_ADDR
// if p3 = 15 then
1573: LD_VAR 0 3
1577: PUSH
1578: LD_INT 15
1580: EQUAL
1581: IFFALSE 1591
// sKamikadze := true ;
1583: LD_ADDR_EXP 25
1587: PUSH
1588: LD_INT 1
1590: ST_TO_ADDR
// if p3 = 16 then
1591: LD_VAR 0 3
1595: PUSH
1596: LD_INT 16
1598: EQUAL
1599: IFFALSE 1609
// sTroll := true ;
1601: LD_ADDR_EXP 26
1605: PUSH
1606: LD_INT 1
1608: ST_TO_ADDR
// if p3 = 17 then
1609: LD_VAR 0 3
1613: PUSH
1614: LD_INT 17
1616: EQUAL
1617: IFFALSE 1627
// sSlow := true ;
1619: LD_ADDR_EXP 27
1623: PUSH
1624: LD_INT 1
1626: ST_TO_ADDR
// if p3 = 18 then
1627: LD_VAR 0 3
1631: PUSH
1632: LD_INT 18
1634: EQUAL
1635: IFFALSE 1645
// sLack := true ;
1637: LD_ADDR_EXP 28
1641: PUSH
1642: LD_INT 1
1644: ST_TO_ADDR
// if p3 = 19 then
1645: LD_VAR 0 3
1649: PUSH
1650: LD_INT 19
1652: EQUAL
1653: IFFALSE 1663
// sTank := true ;
1655: LD_ADDR_EXP 30
1659: PUSH
1660: LD_INT 1
1662: ST_TO_ADDR
// if p3 = 20 then
1663: LD_VAR 0 3
1667: PUSH
1668: LD_INT 20
1670: EQUAL
1671: IFFALSE 1681
// sRemote := true ;
1673: LD_ADDR_EXP 31
1677: PUSH
1678: LD_INT 1
1680: ST_TO_ADDR
// if p3 = 21 then
1681: LD_VAR 0 3
1685: PUSH
1686: LD_INT 21
1688: EQUAL
1689: IFFALSE 1699
// sPowell := true ;
1691: LD_ADDR_EXP 32
1695: PUSH
1696: LD_INT 1
1698: ST_TO_ADDR
// if p3 = 22 then
1699: LD_VAR 0 3
1703: PUSH
1704: LD_INT 22
1706: EQUAL
1707: IFFALSE 1717
// sTeleport := true ;
1709: LD_ADDR_EXP 35
1713: PUSH
1714: LD_INT 1
1716: ST_TO_ADDR
// if p3 = 23 then
1717: LD_VAR 0 3
1721: PUSH
1722: LD_INT 23
1724: EQUAL
1725: IFFALSE 1735
// sOilTower := true ;
1727: LD_ADDR_EXP 37
1731: PUSH
1732: LD_INT 1
1734: ST_TO_ADDR
// if p3 = 24 then
1735: LD_VAR 0 3
1739: PUSH
1740: LD_INT 24
1742: EQUAL
1743: IFFALSE 1753
// sShovel := true ;
1745: LD_ADDR_EXP 38
1749: PUSH
1750: LD_INT 1
1752: ST_TO_ADDR
// if p3 = 25 then
1753: LD_VAR 0 3
1757: PUSH
1758: LD_INT 25
1760: EQUAL
1761: IFFALSE 1771
// sSheik := true ;
1763: LD_ADDR_EXP 39
1767: PUSH
1768: LD_INT 1
1770: ST_TO_ADDR
// if p3 = 26 then
1771: LD_VAR 0 3
1775: PUSH
1776: LD_INT 26
1778: EQUAL
1779: IFFALSE 1789
// sEarthquake := true ;
1781: LD_ADDR_EXP 41
1785: PUSH
1786: LD_INT 1
1788: ST_TO_ADDR
// if p3 = 27 then
1789: LD_VAR 0 3
1793: PUSH
1794: LD_INT 27
1796: EQUAL
1797: IFFALSE 1807
// sAI := true ;
1799: LD_ADDR_EXP 42
1803: PUSH
1804: LD_INT 1
1806: ST_TO_ADDR
// if p3 = 28 then
1807: LD_VAR 0 3
1811: PUSH
1812: LD_INT 28
1814: EQUAL
1815: IFFALSE 1825
// sCargo := true ;
1817: LD_ADDR_EXP 45
1821: PUSH
1822: LD_INT 1
1824: ST_TO_ADDR
// if p3 = 29 then
1825: LD_VAR 0 3
1829: PUSH
1830: LD_INT 29
1832: EQUAL
1833: IFFALSE 1843
// sDLaser := true ;
1835: LD_ADDR_EXP 46
1839: PUSH
1840: LD_INT 1
1842: ST_TO_ADDR
// if p3 = 30 then
1843: LD_VAR 0 3
1847: PUSH
1848: LD_INT 30
1850: EQUAL
1851: IFFALSE 1861
// sExchange := true ;
1853: LD_ADDR_EXP 47
1857: PUSH
1858: LD_INT 1
1860: ST_TO_ADDR
// if p3 = 31 then
1861: LD_VAR 0 3
1865: PUSH
1866: LD_INT 31
1868: EQUAL
1869: IFFALSE 1879
// sFac := true ;
1871: LD_ADDR_EXP 48
1875: PUSH
1876: LD_INT 1
1878: ST_TO_ADDR
// if p3 = 32 then
1879: LD_VAR 0 3
1883: PUSH
1884: LD_INT 32
1886: EQUAL
1887: IFFALSE 1897
// sPower := true ;
1889: LD_ADDR_EXP 49
1893: PUSH
1894: LD_INT 1
1896: ST_TO_ADDR
// if p3 = 33 then
1897: LD_VAR 0 3
1901: PUSH
1902: LD_INT 33
1904: EQUAL
1905: IFFALSE 1915
// sRandom := true ;
1907: LD_ADDR_EXP 50
1911: PUSH
1912: LD_INT 1
1914: ST_TO_ADDR
// if p3 = 34 then
1915: LD_VAR 0 3
1919: PUSH
1920: LD_INT 34
1922: EQUAL
1923: IFFALSE 1933
// sShield := true ;
1925: LD_ADDR_EXP 51
1929: PUSH
1930: LD_INT 1
1932: ST_TO_ADDR
// if p3 = 35 then
1933: LD_VAR 0 3
1937: PUSH
1938: LD_INT 35
1940: EQUAL
1941: IFFALSE 1951
// sTime := true ;
1943: LD_ADDR_EXP 52
1947: PUSH
1948: LD_INT 1
1950: ST_TO_ADDR
// if p3 = 36 then
1951: LD_VAR 0 3
1955: PUSH
1956: LD_INT 36
1958: EQUAL
1959: IFFALSE 1969
// sTools := true ;
1961: LD_ADDR_EXP 53
1965: PUSH
1966: LD_INT 1
1968: ST_TO_ADDR
// if p3 = 101 then
1969: LD_VAR 0 3
1973: PUSH
1974: LD_INT 101
1976: EQUAL
1977: IFFALSE 1987
// sSold := true ;
1979: LD_ADDR_EXP 18
1983: PUSH
1984: LD_INT 1
1986: ST_TO_ADDR
// if p3 = 102 then
1987: LD_VAR 0 3
1991: PUSH
1992: LD_INT 102
1994: EQUAL
1995: IFFALSE 2005
// sDiff := true ;
1997: LD_ADDR_EXP 19
2001: PUSH
2002: LD_INT 1
2004: ST_TO_ADDR
// if p3 = 103 then
2005: LD_VAR 0 3
2009: PUSH
2010: LD_INT 103
2012: EQUAL
2013: IFFALSE 2023
// sFog := true ;
2015: LD_ADDR_EXP 22
2019: PUSH
2020: LD_INT 1
2022: ST_TO_ADDR
// if p3 = 104 then
2023: LD_VAR 0 3
2027: PUSH
2028: LD_INT 104
2030: EQUAL
2031: IFFALSE 2041
// sReset := true ;
2033: LD_ADDR_EXP 23
2037: PUSH
2038: LD_INT 1
2040: ST_TO_ADDR
// if p3 = 105 then
2041: LD_VAR 0 3
2045: PUSH
2046: LD_INT 105
2048: EQUAL
2049: IFFALSE 2059
// sSun := true ;
2051: LD_ADDR_EXP 24
2055: PUSH
2056: LD_INT 1
2058: ST_TO_ADDR
// if p3 = 106 then
2059: LD_VAR 0 3
2063: PUSH
2064: LD_INT 106
2066: EQUAL
2067: IFFALSE 2077
// sTiger := true ;
2069: LD_ADDR_EXP 20
2073: PUSH
2074: LD_INT 1
2076: ST_TO_ADDR
// if p3 = 107 then
2077: LD_VAR 0 3
2081: PUSH
2082: LD_INT 107
2084: EQUAL
2085: IFFALSE 2095
// sBomb := true ;
2087: LD_ADDR_EXP 21
2091: PUSH
2092: LD_INT 1
2094: ST_TO_ADDR
// if p3 = 108 then
2095: LD_VAR 0 3
2099: PUSH
2100: LD_INT 108
2102: EQUAL
2103: IFFALSE 2113
// sWound := true ;
2105: LD_ADDR_EXP 29
2109: PUSH
2110: LD_INT 1
2112: ST_TO_ADDR
// if p3 = 109 then
2113: LD_VAR 0 3
2117: PUSH
2118: LD_INT 109
2120: EQUAL
2121: IFFALSE 2131
// sBetray := true ;
2123: LD_ADDR_EXP 33
2127: PUSH
2128: LD_INT 1
2130: ST_TO_ADDR
// if p3 = 110 then
2131: LD_VAR 0 3
2135: PUSH
2136: LD_INT 110
2138: EQUAL
2139: IFFALSE 2149
// sContamin := true ;
2141: LD_ADDR_EXP 34
2145: PUSH
2146: LD_INT 1
2148: ST_TO_ADDR
// if p3 = 111 then
2149: LD_VAR 0 3
2153: PUSH
2154: LD_INT 111
2156: EQUAL
2157: IFFALSE 2167
// sOil := true ;
2159: LD_ADDR_EXP 36
2163: PUSH
2164: LD_INT 1
2166: ST_TO_ADDR
// if p3 = 112 then
2167: LD_VAR 0 3
2171: PUSH
2172: LD_INT 112
2174: EQUAL
2175: IFFALSE 2185
// sStu := true ;
2177: LD_ADDR_EXP 40
2181: PUSH
2182: LD_INT 1
2184: ST_TO_ADDR
// if p3 = 113 then
2185: LD_VAR 0 3
2189: PUSH
2190: LD_INT 113
2192: EQUAL
2193: IFFALSE 2203
// sBazooka := true ;
2195: LD_ADDR_EXP 43
2199: PUSH
2200: LD_INT 1
2202: ST_TO_ADDR
// if p3 = 114 then
2203: LD_VAR 0 3
2207: PUSH
2208: LD_INT 114
2210: EQUAL
2211: IFFALSE 2221
// sMortar := true ;
2213: LD_ADDR_EXP 44
2217: PUSH
2218: LD_INT 1
2220: ST_TO_ADDR
// if p3 = 115 then
2221: LD_VAR 0 3
2225: PUSH
2226: LD_INT 115
2228: EQUAL
2229: IFFALSE 2239
// sRanger := true ;
2231: LD_ADDR_EXP 54
2235: PUSH
2236: LD_INT 1
2238: ST_TO_ADDR
// if p3 = 116 then
2239: LD_VAR 0 3
2243: PUSH
2244: LD_INT 116
2246: EQUAL
2247: IFFALSE 2257
// sComputer := true ;
2249: LD_ADDR_EXP 55
2253: PUSH
2254: LD_INT 1
2256: ST_TO_ADDR
// if p3 = 117 then
2257: LD_VAR 0 3
2261: PUSH
2262: LD_INT 117
2264: EQUAL
2265: IFFALSE 2275
// s30 := true ;
2267: LD_ADDR_EXP 56
2271: PUSH
2272: LD_INT 1
2274: ST_TO_ADDR
// if p3 = 118 then
2275: LD_VAR 0 3
2279: PUSH
2280: LD_INT 118
2282: EQUAL
2283: IFFALSE 2293
// s60 := true ;
2285: LD_ADDR_EXP 57
2289: PUSH
2290: LD_INT 1
2292: ST_TO_ADDR
// end ; if p2 = 101 then
2293: LD_VAR 0 2
2297: PUSH
2298: LD_INT 101
2300: EQUAL
2301: IFFALSE 2429
// begin case p3 of 1 :
2303: LD_VAR 0 3
2307: PUSH
2308: LD_INT 1
2310: DOUBLE
2311: EQUAL
2312: IFTRUE 2316
2314: GO 2323
2316: POP
// hHackUnlimitedResources ; 2 :
2317: CALL 14527 0 0
2321: GO 2429
2323: LD_INT 2
2325: DOUBLE
2326: EQUAL
2327: IFTRUE 2331
2329: GO 2338
2331: POP
// hHackSetLevel10 ; 3 :
2332: CALL 14660 0 0
2336: GO 2429
2338: LD_INT 3
2340: DOUBLE
2341: EQUAL
2342: IFTRUE 2346
2344: GO 2353
2346: POP
// hHackSetLevel10YourUnits ; 4 :
2347: CALL 14745 0 0
2351: GO 2429
2353: LD_INT 4
2355: DOUBLE
2356: EQUAL
2357: IFTRUE 2361
2359: GO 2368
2361: POP
// hHackInvincible ; 5 :
2362: CALL 15193 0 0
2366: GO 2429
2368: LD_INT 5
2370: DOUBLE
2371: EQUAL
2372: IFTRUE 2376
2374: GO 2383
2376: POP
// hHackInvisible ; 6 :
2377: CALL 15304 0 0
2381: GO 2429
2383: LD_INT 6
2385: DOUBLE
2386: EQUAL
2387: IFTRUE 2391
2389: GO 2398
2391: POP
// hHackChangeYourSide ; 7 :
2392: CALL 15361 0 0
2396: GO 2429
2398: LD_INT 7
2400: DOUBLE
2401: EQUAL
2402: IFTRUE 2406
2404: GO 2413
2406: POP
// hHackChangeUnitSide ; 8 :
2407: CALL 15403 0 0
2411: GO 2429
2413: LD_INT 8
2415: DOUBLE
2416: EQUAL
2417: IFTRUE 2421
2419: GO 2428
2421: POP
// hHackFog ; end ;
2422: CALL 15504 0 0
2426: GO 2429
2428: POP
// end ; end ;
2429: LD_VAR 0 7
2433: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
2434: GO 2436
2436: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
2437: LD_STRING initStreamRollete();
2439: PPUSH
2440: CALL_OW 559
// InitStreamMode ;
2444: CALL 2456 0 0
// DefineStreamItems ( false ) ;
2448: LD_INT 0
2450: PPUSH
2451: CALL 2920 0 1
// end ;
2455: END
// function InitStreamMode ; begin
2456: LD_INT 0
2458: PPUSH
// streamModeActive := false ;
2459: LD_ADDR_EXP 1
2463: PUSH
2464: LD_INT 0
2466: ST_TO_ADDR
// normalCounter := 36 ;
2467: LD_ADDR_EXP 2
2471: PUSH
2472: LD_INT 36
2474: ST_TO_ADDR
// hardcoreCounter := 18 ;
2475: LD_ADDR_EXP 3
2479: PUSH
2480: LD_INT 18
2482: ST_TO_ADDR
// sRocket := false ;
2483: LD_ADDR_EXP 6
2487: PUSH
2488: LD_INT 0
2490: ST_TO_ADDR
// sSpeed := false ;
2491: LD_ADDR_EXP 5
2495: PUSH
2496: LD_INT 0
2498: ST_TO_ADDR
// sEngine := false ;
2499: LD_ADDR_EXP 7
2503: PUSH
2504: LD_INT 0
2506: ST_TO_ADDR
// sSpec := false ;
2507: LD_ADDR_EXP 4
2511: PUSH
2512: LD_INT 0
2514: ST_TO_ADDR
// sLevel := false ;
2515: LD_ADDR_EXP 8
2519: PUSH
2520: LD_INT 0
2522: ST_TO_ADDR
// sArmoury := false ;
2523: LD_ADDR_EXP 9
2527: PUSH
2528: LD_INT 0
2530: ST_TO_ADDR
// sRadar := false ;
2531: LD_ADDR_EXP 10
2535: PUSH
2536: LD_INT 0
2538: ST_TO_ADDR
// sBunker := false ;
2539: LD_ADDR_EXP 11
2543: PUSH
2544: LD_INT 0
2546: ST_TO_ADDR
// sHack := false ;
2547: LD_ADDR_EXP 12
2551: PUSH
2552: LD_INT 0
2554: ST_TO_ADDR
// sFire := false ;
2555: LD_ADDR_EXP 13
2559: PUSH
2560: LD_INT 0
2562: ST_TO_ADDR
// sRefresh := false ;
2563: LD_ADDR_EXP 14
2567: PUSH
2568: LD_INT 0
2570: ST_TO_ADDR
// sExp := false ;
2571: LD_ADDR_EXP 15
2575: PUSH
2576: LD_INT 0
2578: ST_TO_ADDR
// sDepot := false ;
2579: LD_ADDR_EXP 16
2583: PUSH
2584: LD_INT 0
2586: ST_TO_ADDR
// sFlag := false ;
2587: LD_ADDR_EXP 17
2591: PUSH
2592: LD_INT 0
2594: ST_TO_ADDR
// sKamikadze := false ;
2595: LD_ADDR_EXP 25
2599: PUSH
2600: LD_INT 0
2602: ST_TO_ADDR
// sTroll := false ;
2603: LD_ADDR_EXP 26
2607: PUSH
2608: LD_INT 0
2610: ST_TO_ADDR
// sSlow := false ;
2611: LD_ADDR_EXP 27
2615: PUSH
2616: LD_INT 0
2618: ST_TO_ADDR
// sLack := false ;
2619: LD_ADDR_EXP 28
2623: PUSH
2624: LD_INT 0
2626: ST_TO_ADDR
// sTank := false ;
2627: LD_ADDR_EXP 30
2631: PUSH
2632: LD_INT 0
2634: ST_TO_ADDR
// sRemote := false ;
2635: LD_ADDR_EXP 31
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// sPowell := false ;
2643: LD_ADDR_EXP 32
2647: PUSH
2648: LD_INT 0
2650: ST_TO_ADDR
// sTeleport := false ;
2651: LD_ADDR_EXP 35
2655: PUSH
2656: LD_INT 0
2658: ST_TO_ADDR
// sOilTower := false ;
2659: LD_ADDR_EXP 37
2663: PUSH
2664: LD_INT 0
2666: ST_TO_ADDR
// sShovel := false ;
2667: LD_ADDR_EXP 38
2671: PUSH
2672: LD_INT 0
2674: ST_TO_ADDR
// sSheik := false ;
2675: LD_ADDR_EXP 39
2679: PUSH
2680: LD_INT 0
2682: ST_TO_ADDR
// sEarthquake := false ;
2683: LD_ADDR_EXP 41
2687: PUSH
2688: LD_INT 0
2690: ST_TO_ADDR
// sAI := false ;
2691: LD_ADDR_EXP 42
2695: PUSH
2696: LD_INT 0
2698: ST_TO_ADDR
// sCargo := false ;
2699: LD_ADDR_EXP 45
2703: PUSH
2704: LD_INT 0
2706: ST_TO_ADDR
// sDLaser := false ;
2707: LD_ADDR_EXP 46
2711: PUSH
2712: LD_INT 0
2714: ST_TO_ADDR
// sExchange := false ;
2715: LD_ADDR_EXP 47
2719: PUSH
2720: LD_INT 0
2722: ST_TO_ADDR
// sFac := false ;
2723: LD_ADDR_EXP 48
2727: PUSH
2728: LD_INT 0
2730: ST_TO_ADDR
// sPower := false ;
2731: LD_ADDR_EXP 49
2735: PUSH
2736: LD_INT 0
2738: ST_TO_ADDR
// sRandom := false ;
2739: LD_ADDR_EXP 50
2743: PUSH
2744: LD_INT 0
2746: ST_TO_ADDR
// sShield := false ;
2747: LD_ADDR_EXP 51
2751: PUSH
2752: LD_INT 0
2754: ST_TO_ADDR
// sTime := false ;
2755: LD_ADDR_EXP 52
2759: PUSH
2760: LD_INT 0
2762: ST_TO_ADDR
// sTools := false ;
2763: LD_ADDR_EXP 53
2767: PUSH
2768: LD_INT 0
2770: ST_TO_ADDR
// sSold := false ;
2771: LD_ADDR_EXP 18
2775: PUSH
2776: LD_INT 0
2778: ST_TO_ADDR
// sDiff := false ;
2779: LD_ADDR_EXP 19
2783: PUSH
2784: LD_INT 0
2786: ST_TO_ADDR
// sFog := false ;
2787: LD_ADDR_EXP 22
2791: PUSH
2792: LD_INT 0
2794: ST_TO_ADDR
// sReset := false ;
2795: LD_ADDR_EXP 23
2799: PUSH
2800: LD_INT 0
2802: ST_TO_ADDR
// sSun := false ;
2803: LD_ADDR_EXP 24
2807: PUSH
2808: LD_INT 0
2810: ST_TO_ADDR
// sTiger := false ;
2811: LD_ADDR_EXP 20
2815: PUSH
2816: LD_INT 0
2818: ST_TO_ADDR
// sBomb := false ;
2819: LD_ADDR_EXP 21
2823: PUSH
2824: LD_INT 0
2826: ST_TO_ADDR
// sWound := false ;
2827: LD_ADDR_EXP 29
2831: PUSH
2832: LD_INT 0
2834: ST_TO_ADDR
// sBetray := false ;
2835: LD_ADDR_EXP 33
2839: PUSH
2840: LD_INT 0
2842: ST_TO_ADDR
// sContamin := false ;
2843: LD_ADDR_EXP 34
2847: PUSH
2848: LD_INT 0
2850: ST_TO_ADDR
// sOil := false ;
2851: LD_ADDR_EXP 36
2855: PUSH
2856: LD_INT 0
2858: ST_TO_ADDR
// sStu := false ;
2859: LD_ADDR_EXP 40
2863: PUSH
2864: LD_INT 0
2866: ST_TO_ADDR
// sBazooka := false ;
2867: LD_ADDR_EXP 43
2871: PUSH
2872: LD_INT 0
2874: ST_TO_ADDR
// sMortar := false ;
2875: LD_ADDR_EXP 44
2879: PUSH
2880: LD_INT 0
2882: ST_TO_ADDR
// sRanger := false ;
2883: LD_ADDR_EXP 54
2887: PUSH
2888: LD_INT 0
2890: ST_TO_ADDR
// sComputer := false ;
2891: LD_ADDR_EXP 55
2895: PUSH
2896: LD_INT 0
2898: ST_TO_ADDR
// s30 := false ;
2899: LD_ADDR_EXP 56
2903: PUSH
2904: LD_INT 0
2906: ST_TO_ADDR
// s60 := false ;
2907: LD_ADDR_EXP 57
2911: PUSH
2912: LD_INT 0
2914: ST_TO_ADDR
// end ;
2915: LD_VAR 0 1
2919: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
2920: LD_INT 0
2922: PPUSH
2923: PPUSH
2924: PPUSH
2925: PPUSH
2926: PPUSH
2927: PPUSH
2928: PPUSH
// result := [ ] ;
2929: LD_ADDR_VAR 0 2
2933: PUSH
2934: EMPTY
2935: ST_TO_ADDR
// if campaign_id = 1 then
2936: LD_OWVAR 69
2940: PUSH
2941: LD_INT 1
2943: EQUAL
2944: IFFALSE 6110
// begin case mission_number of 1 :
2946: LD_OWVAR 70
2950: PUSH
2951: LD_INT 1
2953: DOUBLE
2954: EQUAL
2955: IFTRUE 2959
2957: GO 3035
2959: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
2960: LD_ADDR_VAR 0 2
2964: PUSH
2965: LD_INT 2
2967: PUSH
2968: LD_INT 4
2970: PUSH
2971: LD_INT 11
2973: PUSH
2974: LD_INT 12
2976: PUSH
2977: LD_INT 15
2979: PUSH
2980: LD_INT 16
2982: PUSH
2983: LD_INT 22
2985: PUSH
2986: LD_INT 23
2988: PUSH
2989: LD_INT 26
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: LIST
2996: LIST
2997: LIST
2998: LIST
2999: LIST
3000: LIST
3001: LIST
3002: PUSH
3003: LD_INT 101
3005: PUSH
3006: LD_INT 102
3008: PUSH
3009: LD_INT 106
3011: PUSH
3012: LD_INT 116
3014: PUSH
3015: LD_INT 117
3017: PUSH
3018: LD_INT 118
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: LIST
3025: LIST
3026: LIST
3027: LIST
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: ST_TO_ADDR
3033: GO 6108
3035: LD_INT 2
3037: DOUBLE
3038: EQUAL
3039: IFTRUE 3043
3041: GO 3127
3043: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3044: LD_ADDR_VAR 0 2
3048: PUSH
3049: LD_INT 2
3051: PUSH
3052: LD_INT 4
3054: PUSH
3055: LD_INT 11
3057: PUSH
3058: LD_INT 12
3060: PUSH
3061: LD_INT 15
3063: PUSH
3064: LD_INT 16
3066: PUSH
3067: LD_INT 22
3069: PUSH
3070: LD_INT 23
3072: PUSH
3073: LD_INT 26
3075: PUSH
3076: EMPTY
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: LIST
3082: LIST
3083: LIST
3084: LIST
3085: LIST
3086: PUSH
3087: LD_INT 101
3089: PUSH
3090: LD_INT 102
3092: PUSH
3093: LD_INT 105
3095: PUSH
3096: LD_INT 106
3098: PUSH
3099: LD_INT 108
3101: PUSH
3102: LD_INT 116
3104: PUSH
3105: LD_INT 117
3107: PUSH
3108: LD_INT 118
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: LIST
3117: LIST
3118: LIST
3119: LIST
3120: PUSH
3121: EMPTY
3122: LIST
3123: LIST
3124: ST_TO_ADDR
3125: GO 6108
3127: LD_INT 3
3129: DOUBLE
3130: EQUAL
3131: IFTRUE 3135
3133: GO 3223
3135: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3136: LD_ADDR_VAR 0 2
3140: PUSH
3141: LD_INT 2
3143: PUSH
3144: LD_INT 4
3146: PUSH
3147: LD_INT 5
3149: PUSH
3150: LD_INT 11
3152: PUSH
3153: LD_INT 12
3155: PUSH
3156: LD_INT 15
3158: PUSH
3159: LD_INT 16
3161: PUSH
3162: LD_INT 22
3164: PUSH
3165: LD_INT 26
3167: PUSH
3168: LD_INT 36
3170: PUSH
3171: EMPTY
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: LIST
3179: LIST
3180: LIST
3181: LIST
3182: PUSH
3183: LD_INT 101
3185: PUSH
3186: LD_INT 102
3188: PUSH
3189: LD_INT 105
3191: PUSH
3192: LD_INT 106
3194: PUSH
3195: LD_INT 108
3197: PUSH
3198: LD_INT 116
3200: PUSH
3201: LD_INT 117
3203: PUSH
3204: LD_INT 118
3206: PUSH
3207: EMPTY
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: PUSH
3217: EMPTY
3218: LIST
3219: LIST
3220: ST_TO_ADDR
3221: GO 6108
3223: LD_INT 4
3225: DOUBLE
3226: EQUAL
3227: IFTRUE 3231
3229: GO 3327
3231: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
3232: LD_ADDR_VAR 0 2
3236: PUSH
3237: LD_INT 2
3239: PUSH
3240: LD_INT 4
3242: PUSH
3243: LD_INT 5
3245: PUSH
3246: LD_INT 8
3248: PUSH
3249: LD_INT 11
3251: PUSH
3252: LD_INT 12
3254: PUSH
3255: LD_INT 15
3257: PUSH
3258: LD_INT 16
3260: PUSH
3261: LD_INT 22
3263: PUSH
3264: LD_INT 23
3266: PUSH
3267: LD_INT 26
3269: PUSH
3270: LD_INT 36
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: PUSH
3287: LD_INT 101
3289: PUSH
3290: LD_INT 102
3292: PUSH
3293: LD_INT 105
3295: PUSH
3296: LD_INT 106
3298: PUSH
3299: LD_INT 108
3301: PUSH
3302: LD_INT 116
3304: PUSH
3305: LD_INT 117
3307: PUSH
3308: LD_INT 118
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: LIST
3315: LIST
3316: LIST
3317: LIST
3318: LIST
3319: LIST
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: ST_TO_ADDR
3325: GO 6108
3327: LD_INT 5
3329: DOUBLE
3330: EQUAL
3331: IFTRUE 3335
3333: GO 3447
3335: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
3336: LD_ADDR_VAR 0 2
3340: PUSH
3341: LD_INT 2
3343: PUSH
3344: LD_INT 4
3346: PUSH
3347: LD_INT 5
3349: PUSH
3350: LD_INT 6
3352: PUSH
3353: LD_INT 8
3355: PUSH
3356: LD_INT 11
3358: PUSH
3359: LD_INT 12
3361: PUSH
3362: LD_INT 15
3364: PUSH
3365: LD_INT 16
3367: PUSH
3368: LD_INT 22
3370: PUSH
3371: LD_INT 23
3373: PUSH
3374: LD_INT 25
3376: PUSH
3377: LD_INT 26
3379: PUSH
3380: LD_INT 36
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: PUSH
3399: LD_INT 101
3401: PUSH
3402: LD_INT 102
3404: PUSH
3405: LD_INT 105
3407: PUSH
3408: LD_INT 106
3410: PUSH
3411: LD_INT 108
3413: PUSH
3414: LD_INT 109
3416: PUSH
3417: LD_INT 112
3419: PUSH
3420: LD_INT 116
3422: PUSH
3423: LD_INT 117
3425: PUSH
3426: LD_INT 118
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: ST_TO_ADDR
3445: GO 6108
3447: LD_INT 6
3449: DOUBLE
3450: EQUAL
3451: IFTRUE 3455
3453: GO 3587
3455: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
3456: LD_ADDR_VAR 0 2
3460: PUSH
3461: LD_INT 2
3463: PUSH
3464: LD_INT 4
3466: PUSH
3467: LD_INT 5
3469: PUSH
3470: LD_INT 6
3472: PUSH
3473: LD_INT 8
3475: PUSH
3476: LD_INT 11
3478: PUSH
3479: LD_INT 12
3481: PUSH
3482: LD_INT 15
3484: PUSH
3485: LD_INT 16
3487: PUSH
3488: LD_INT 20
3490: PUSH
3491: LD_INT 21
3493: PUSH
3494: LD_INT 22
3496: PUSH
3497: LD_INT 23
3499: PUSH
3500: LD_INT 25
3502: PUSH
3503: LD_INT 26
3505: PUSH
3506: LD_INT 30
3508: PUSH
3509: LD_INT 31
3511: PUSH
3512: LD_INT 32
3514: PUSH
3515: LD_INT 36
3517: PUSH
3518: EMPTY
3519: LIST
3520: LIST
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: PUSH
3539: LD_INT 101
3541: PUSH
3542: LD_INT 102
3544: PUSH
3545: LD_INT 105
3547: PUSH
3548: LD_INT 106
3550: PUSH
3551: LD_INT 108
3553: PUSH
3554: LD_INT 109
3556: PUSH
3557: LD_INT 112
3559: PUSH
3560: LD_INT 116
3562: PUSH
3563: LD_INT 117
3565: PUSH
3566: LD_INT 118
3568: PUSH
3569: EMPTY
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: PUSH
3581: EMPTY
3582: LIST
3583: LIST
3584: ST_TO_ADDR
3585: GO 6108
3587: LD_INT 7
3589: DOUBLE
3590: EQUAL
3591: IFTRUE 3595
3593: GO 3707
3595: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
3596: LD_ADDR_VAR 0 2
3600: PUSH
3601: LD_INT 2
3603: PUSH
3604: LD_INT 4
3606: PUSH
3607: LD_INT 5
3609: PUSH
3610: LD_INT 7
3612: PUSH
3613: LD_INT 11
3615: PUSH
3616: LD_INT 12
3618: PUSH
3619: LD_INT 15
3621: PUSH
3622: LD_INT 16
3624: PUSH
3625: LD_INT 20
3627: PUSH
3628: LD_INT 21
3630: PUSH
3631: LD_INT 22
3633: PUSH
3634: LD_INT 23
3636: PUSH
3637: LD_INT 25
3639: PUSH
3640: LD_INT 26
3642: PUSH
3643: EMPTY
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: PUSH
3659: LD_INT 101
3661: PUSH
3662: LD_INT 102
3664: PUSH
3665: LD_INT 103
3667: PUSH
3668: LD_INT 105
3670: PUSH
3671: LD_INT 106
3673: PUSH
3674: LD_INT 108
3676: PUSH
3677: LD_INT 112
3679: PUSH
3680: LD_INT 116
3682: PUSH
3683: LD_INT 117
3685: PUSH
3686: LD_INT 118
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: LIST
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: ST_TO_ADDR
3705: GO 6108
3707: LD_INT 8
3709: DOUBLE
3710: EQUAL
3711: IFTRUE 3715
3713: GO 3855
3715: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
3716: LD_ADDR_VAR 0 2
3720: PUSH
3721: LD_INT 2
3723: PUSH
3724: LD_INT 4
3726: PUSH
3727: LD_INT 5
3729: PUSH
3730: LD_INT 6
3732: PUSH
3733: LD_INT 7
3735: PUSH
3736: LD_INT 8
3738: PUSH
3739: LD_INT 11
3741: PUSH
3742: LD_INT 12
3744: PUSH
3745: LD_INT 15
3747: PUSH
3748: LD_INT 16
3750: PUSH
3751: LD_INT 20
3753: PUSH
3754: LD_INT 21
3756: PUSH
3757: LD_INT 22
3759: PUSH
3760: LD_INT 23
3762: PUSH
3763: LD_INT 25
3765: PUSH
3766: LD_INT 26
3768: PUSH
3769: LD_INT 30
3771: PUSH
3772: LD_INT 31
3774: PUSH
3775: LD_INT 32
3777: PUSH
3778: LD_INT 36
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: PUSH
3803: LD_INT 101
3805: PUSH
3806: LD_INT 102
3808: PUSH
3809: LD_INT 103
3811: PUSH
3812: LD_INT 105
3814: PUSH
3815: LD_INT 106
3817: PUSH
3818: LD_INT 108
3820: PUSH
3821: LD_INT 109
3823: PUSH
3824: LD_INT 112
3826: PUSH
3827: LD_INT 116
3829: PUSH
3830: LD_INT 117
3832: PUSH
3833: LD_INT 118
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: ST_TO_ADDR
3853: GO 6108
3855: LD_INT 9
3857: DOUBLE
3858: EQUAL
3859: IFTRUE 3863
3861: GO 4011
3863: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
3864: LD_ADDR_VAR 0 2
3868: PUSH
3869: LD_INT 2
3871: PUSH
3872: LD_INT 4
3874: PUSH
3875: LD_INT 5
3877: PUSH
3878: LD_INT 6
3880: PUSH
3881: LD_INT 7
3883: PUSH
3884: LD_INT 8
3886: PUSH
3887: LD_INT 11
3889: PUSH
3890: LD_INT 12
3892: PUSH
3893: LD_INT 15
3895: PUSH
3896: LD_INT 16
3898: PUSH
3899: LD_INT 20
3901: PUSH
3902: LD_INT 21
3904: PUSH
3905: LD_INT 22
3907: PUSH
3908: LD_INT 23
3910: PUSH
3911: LD_INT 25
3913: PUSH
3914: LD_INT 26
3916: PUSH
3917: LD_INT 28
3919: PUSH
3920: LD_INT 30
3922: PUSH
3923: LD_INT 31
3925: PUSH
3926: LD_INT 32
3928: PUSH
3929: LD_INT 36
3931: PUSH
3932: EMPTY
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: PUSH
3955: LD_INT 101
3957: PUSH
3958: LD_INT 102
3960: PUSH
3961: LD_INT 103
3963: PUSH
3964: LD_INT 105
3966: PUSH
3967: LD_INT 106
3969: PUSH
3970: LD_INT 108
3972: PUSH
3973: LD_INT 109
3975: PUSH
3976: LD_INT 112
3978: PUSH
3979: LD_INT 114
3981: PUSH
3982: LD_INT 116
3984: PUSH
3985: LD_INT 117
3987: PUSH
3988: LD_INT 118
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: LIST
3995: LIST
3996: LIST
3997: LIST
3998: LIST
3999: LIST
4000: LIST
4001: LIST
4002: LIST
4003: LIST
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: ST_TO_ADDR
4009: GO 6108
4011: LD_INT 10
4013: DOUBLE
4014: EQUAL
4015: IFTRUE 4019
4017: GO 4215
4019: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4020: LD_ADDR_VAR 0 2
4024: PUSH
4025: LD_INT 2
4027: PUSH
4028: LD_INT 4
4030: PUSH
4031: LD_INT 5
4033: PUSH
4034: LD_INT 6
4036: PUSH
4037: LD_INT 7
4039: PUSH
4040: LD_INT 8
4042: PUSH
4043: LD_INT 9
4045: PUSH
4046: LD_INT 10
4048: PUSH
4049: LD_INT 11
4051: PUSH
4052: LD_INT 12
4054: PUSH
4055: LD_INT 13
4057: PUSH
4058: LD_INT 14
4060: PUSH
4061: LD_INT 15
4063: PUSH
4064: LD_INT 16
4066: PUSH
4067: LD_INT 17
4069: PUSH
4070: LD_INT 18
4072: PUSH
4073: LD_INT 19
4075: PUSH
4076: LD_INT 20
4078: PUSH
4079: LD_INT 21
4081: PUSH
4082: LD_INT 22
4084: PUSH
4085: LD_INT 23
4087: PUSH
4088: LD_INT 24
4090: PUSH
4091: LD_INT 25
4093: PUSH
4094: LD_INT 26
4096: PUSH
4097: LD_INT 28
4099: PUSH
4100: LD_INT 30
4102: PUSH
4103: LD_INT 31
4105: PUSH
4106: LD_INT 32
4108: PUSH
4109: LD_INT 36
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: PUSH
4143: LD_INT 101
4145: PUSH
4146: LD_INT 102
4148: PUSH
4149: LD_INT 103
4151: PUSH
4152: LD_INT 104
4154: PUSH
4155: LD_INT 105
4157: PUSH
4158: LD_INT 106
4160: PUSH
4161: LD_INT 107
4163: PUSH
4164: LD_INT 108
4166: PUSH
4167: LD_INT 109
4169: PUSH
4170: LD_INT 110
4172: PUSH
4173: LD_INT 111
4175: PUSH
4176: LD_INT 112
4178: PUSH
4179: LD_INT 114
4181: PUSH
4182: LD_INT 116
4184: PUSH
4185: LD_INT 117
4187: PUSH
4188: LD_INT 118
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: ST_TO_ADDR
4213: GO 6108
4215: LD_INT 11
4217: DOUBLE
4218: EQUAL
4219: IFTRUE 4223
4221: GO 4427
4223: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4224: LD_ADDR_VAR 0 2
4228: PUSH
4229: LD_INT 2
4231: PUSH
4232: LD_INT 3
4234: PUSH
4235: LD_INT 4
4237: PUSH
4238: LD_INT 5
4240: PUSH
4241: LD_INT 6
4243: PUSH
4244: LD_INT 7
4246: PUSH
4247: LD_INT 8
4249: PUSH
4250: LD_INT 9
4252: PUSH
4253: LD_INT 10
4255: PUSH
4256: LD_INT 11
4258: PUSH
4259: LD_INT 12
4261: PUSH
4262: LD_INT 13
4264: PUSH
4265: LD_INT 14
4267: PUSH
4268: LD_INT 15
4270: PUSH
4271: LD_INT 16
4273: PUSH
4274: LD_INT 17
4276: PUSH
4277: LD_INT 18
4279: PUSH
4280: LD_INT 19
4282: PUSH
4283: LD_INT 20
4285: PUSH
4286: LD_INT 21
4288: PUSH
4289: LD_INT 22
4291: PUSH
4292: LD_INT 23
4294: PUSH
4295: LD_INT 24
4297: PUSH
4298: LD_INT 25
4300: PUSH
4301: LD_INT 26
4303: PUSH
4304: LD_INT 28
4306: PUSH
4307: LD_INT 30
4309: PUSH
4310: LD_INT 31
4312: PUSH
4313: LD_INT 32
4315: PUSH
4316: LD_INT 34
4318: PUSH
4319: LD_INT 36
4321: PUSH
4322: EMPTY
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: LIST
4354: PUSH
4355: LD_INT 101
4357: PUSH
4358: LD_INT 102
4360: PUSH
4361: LD_INT 103
4363: PUSH
4364: LD_INT 104
4366: PUSH
4367: LD_INT 105
4369: PUSH
4370: LD_INT 106
4372: PUSH
4373: LD_INT 107
4375: PUSH
4376: LD_INT 108
4378: PUSH
4379: LD_INT 109
4381: PUSH
4382: LD_INT 110
4384: PUSH
4385: LD_INT 111
4387: PUSH
4388: LD_INT 112
4390: PUSH
4391: LD_INT 114
4393: PUSH
4394: LD_INT 116
4396: PUSH
4397: LD_INT 117
4399: PUSH
4400: LD_INT 118
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: ST_TO_ADDR
4425: GO 6108
4427: LD_INT 12
4429: DOUBLE
4430: EQUAL
4431: IFTRUE 4435
4433: GO 4655
4435: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
4436: LD_ADDR_VAR 0 2
4440: PUSH
4441: LD_INT 1
4443: PUSH
4444: LD_INT 2
4446: PUSH
4447: LD_INT 3
4449: PUSH
4450: LD_INT 4
4452: PUSH
4453: LD_INT 5
4455: PUSH
4456: LD_INT 6
4458: PUSH
4459: LD_INT 7
4461: PUSH
4462: LD_INT 8
4464: PUSH
4465: LD_INT 9
4467: PUSH
4468: LD_INT 10
4470: PUSH
4471: LD_INT 11
4473: PUSH
4474: LD_INT 12
4476: PUSH
4477: LD_INT 13
4479: PUSH
4480: LD_INT 14
4482: PUSH
4483: LD_INT 15
4485: PUSH
4486: LD_INT 16
4488: PUSH
4489: LD_INT 17
4491: PUSH
4492: LD_INT 18
4494: PUSH
4495: LD_INT 19
4497: PUSH
4498: LD_INT 20
4500: PUSH
4501: LD_INT 21
4503: PUSH
4504: LD_INT 22
4506: PUSH
4507: LD_INT 23
4509: PUSH
4510: LD_INT 24
4512: PUSH
4513: LD_INT 25
4515: PUSH
4516: LD_INT 26
4518: PUSH
4519: LD_INT 27
4521: PUSH
4522: LD_INT 28
4524: PUSH
4525: LD_INT 30
4527: PUSH
4528: LD_INT 31
4530: PUSH
4531: LD_INT 32
4533: PUSH
4534: LD_INT 33
4536: PUSH
4537: LD_INT 34
4539: PUSH
4540: LD_INT 36
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: LIST
4557: LIST
4558: LIST
4559: LIST
4560: LIST
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: PUSH
4579: LD_INT 101
4581: PUSH
4582: LD_INT 102
4584: PUSH
4585: LD_INT 103
4587: PUSH
4588: LD_INT 104
4590: PUSH
4591: LD_INT 105
4593: PUSH
4594: LD_INT 106
4596: PUSH
4597: LD_INT 107
4599: PUSH
4600: LD_INT 108
4602: PUSH
4603: LD_INT 109
4605: PUSH
4606: LD_INT 110
4608: PUSH
4609: LD_INT 111
4611: PUSH
4612: LD_INT 112
4614: PUSH
4615: LD_INT 113
4617: PUSH
4618: LD_INT 114
4620: PUSH
4621: LD_INT 116
4623: PUSH
4624: LD_INT 117
4626: PUSH
4627: LD_INT 118
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: LIST
4647: LIST
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: ST_TO_ADDR
4653: GO 6108
4655: LD_INT 13
4657: DOUBLE
4658: EQUAL
4659: IFTRUE 4663
4661: GO 4871
4663: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
4664: LD_ADDR_VAR 0 2
4668: PUSH
4669: LD_INT 1
4671: PUSH
4672: LD_INT 2
4674: PUSH
4675: LD_INT 3
4677: PUSH
4678: LD_INT 4
4680: PUSH
4681: LD_INT 5
4683: PUSH
4684: LD_INT 8
4686: PUSH
4687: LD_INT 9
4689: PUSH
4690: LD_INT 10
4692: PUSH
4693: LD_INT 11
4695: PUSH
4696: LD_INT 12
4698: PUSH
4699: LD_INT 14
4701: PUSH
4702: LD_INT 15
4704: PUSH
4705: LD_INT 16
4707: PUSH
4708: LD_INT 17
4710: PUSH
4711: LD_INT 18
4713: PUSH
4714: LD_INT 19
4716: PUSH
4717: LD_INT 20
4719: PUSH
4720: LD_INT 21
4722: PUSH
4723: LD_INT 22
4725: PUSH
4726: LD_INT 23
4728: PUSH
4729: LD_INT 24
4731: PUSH
4732: LD_INT 25
4734: PUSH
4735: LD_INT 26
4737: PUSH
4738: LD_INT 27
4740: PUSH
4741: LD_INT 28
4743: PUSH
4744: LD_INT 30
4746: PUSH
4747: LD_INT 31
4749: PUSH
4750: LD_INT 32
4752: PUSH
4753: LD_INT 33
4755: PUSH
4756: LD_INT 34
4758: PUSH
4759: LD_INT 36
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: PUSH
4795: LD_INT 101
4797: PUSH
4798: LD_INT 102
4800: PUSH
4801: LD_INT 103
4803: PUSH
4804: LD_INT 104
4806: PUSH
4807: LD_INT 105
4809: PUSH
4810: LD_INT 106
4812: PUSH
4813: LD_INT 107
4815: PUSH
4816: LD_INT 108
4818: PUSH
4819: LD_INT 109
4821: PUSH
4822: LD_INT 110
4824: PUSH
4825: LD_INT 111
4827: PUSH
4828: LD_INT 112
4830: PUSH
4831: LD_INT 113
4833: PUSH
4834: LD_INT 114
4836: PUSH
4837: LD_INT 116
4839: PUSH
4840: LD_INT 117
4842: PUSH
4843: LD_INT 118
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: ST_TO_ADDR
4869: GO 6108
4871: LD_INT 14
4873: DOUBLE
4874: EQUAL
4875: IFTRUE 4879
4877: GO 5103
4879: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
4880: LD_ADDR_VAR 0 2
4884: PUSH
4885: LD_INT 1
4887: PUSH
4888: LD_INT 2
4890: PUSH
4891: LD_INT 3
4893: PUSH
4894: LD_INT 4
4896: PUSH
4897: LD_INT 5
4899: PUSH
4900: LD_INT 6
4902: PUSH
4903: LD_INT 7
4905: PUSH
4906: LD_INT 8
4908: PUSH
4909: LD_INT 9
4911: PUSH
4912: LD_INT 10
4914: PUSH
4915: LD_INT 11
4917: PUSH
4918: LD_INT 12
4920: PUSH
4921: LD_INT 13
4923: PUSH
4924: LD_INT 14
4926: PUSH
4927: LD_INT 15
4929: PUSH
4930: LD_INT 16
4932: PUSH
4933: LD_INT 17
4935: PUSH
4936: LD_INT 18
4938: PUSH
4939: LD_INT 19
4941: PUSH
4942: LD_INT 20
4944: PUSH
4945: LD_INT 21
4947: PUSH
4948: LD_INT 22
4950: PUSH
4951: LD_INT 23
4953: PUSH
4954: LD_INT 24
4956: PUSH
4957: LD_INT 25
4959: PUSH
4960: LD_INT 26
4962: PUSH
4963: LD_INT 27
4965: PUSH
4966: LD_INT 28
4968: PUSH
4969: LD_INT 29
4971: PUSH
4972: LD_INT 30
4974: PUSH
4975: LD_INT 31
4977: PUSH
4978: LD_INT 32
4980: PUSH
4981: LD_INT 33
4983: PUSH
4984: LD_INT 34
4986: PUSH
4987: LD_INT 36
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: LIST
5026: PUSH
5027: LD_INT 101
5029: PUSH
5030: LD_INT 102
5032: PUSH
5033: LD_INT 103
5035: PUSH
5036: LD_INT 104
5038: PUSH
5039: LD_INT 105
5041: PUSH
5042: LD_INT 106
5044: PUSH
5045: LD_INT 107
5047: PUSH
5048: LD_INT 108
5050: PUSH
5051: LD_INT 109
5053: PUSH
5054: LD_INT 110
5056: PUSH
5057: LD_INT 111
5059: PUSH
5060: LD_INT 112
5062: PUSH
5063: LD_INT 113
5065: PUSH
5066: LD_INT 114
5068: PUSH
5069: LD_INT 116
5071: PUSH
5072: LD_INT 117
5074: PUSH
5075: LD_INT 118
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: ST_TO_ADDR
5101: GO 6108
5103: LD_INT 15
5105: DOUBLE
5106: EQUAL
5107: IFTRUE 5111
5109: GO 5335
5111: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5112: LD_ADDR_VAR 0 2
5116: PUSH
5117: LD_INT 1
5119: PUSH
5120: LD_INT 2
5122: PUSH
5123: LD_INT 3
5125: PUSH
5126: LD_INT 4
5128: PUSH
5129: LD_INT 5
5131: PUSH
5132: LD_INT 6
5134: PUSH
5135: LD_INT 7
5137: PUSH
5138: LD_INT 8
5140: PUSH
5141: LD_INT 9
5143: PUSH
5144: LD_INT 10
5146: PUSH
5147: LD_INT 11
5149: PUSH
5150: LD_INT 12
5152: PUSH
5153: LD_INT 13
5155: PUSH
5156: LD_INT 14
5158: PUSH
5159: LD_INT 15
5161: PUSH
5162: LD_INT 16
5164: PUSH
5165: LD_INT 17
5167: PUSH
5168: LD_INT 18
5170: PUSH
5171: LD_INT 19
5173: PUSH
5174: LD_INT 20
5176: PUSH
5177: LD_INT 21
5179: PUSH
5180: LD_INT 22
5182: PUSH
5183: LD_INT 23
5185: PUSH
5186: LD_INT 24
5188: PUSH
5189: LD_INT 25
5191: PUSH
5192: LD_INT 26
5194: PUSH
5195: LD_INT 27
5197: PUSH
5198: LD_INT 28
5200: PUSH
5201: LD_INT 29
5203: PUSH
5204: LD_INT 30
5206: PUSH
5207: LD_INT 31
5209: PUSH
5210: LD_INT 32
5212: PUSH
5213: LD_INT 33
5215: PUSH
5216: LD_INT 34
5218: PUSH
5219: LD_INT 36
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: PUSH
5259: LD_INT 101
5261: PUSH
5262: LD_INT 102
5264: PUSH
5265: LD_INT 103
5267: PUSH
5268: LD_INT 104
5270: PUSH
5271: LD_INT 105
5273: PUSH
5274: LD_INT 106
5276: PUSH
5277: LD_INT 107
5279: PUSH
5280: LD_INT 108
5282: PUSH
5283: LD_INT 109
5285: PUSH
5286: LD_INT 110
5288: PUSH
5289: LD_INT 111
5291: PUSH
5292: LD_INT 112
5294: PUSH
5295: LD_INT 113
5297: PUSH
5298: LD_INT 114
5300: PUSH
5301: LD_INT 116
5303: PUSH
5304: LD_INT 117
5306: PUSH
5307: LD_INT 118
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: ST_TO_ADDR
5333: GO 6108
5335: LD_INT 16
5337: DOUBLE
5338: EQUAL
5339: IFTRUE 5343
5341: GO 5479
5343: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
5344: LD_ADDR_VAR 0 2
5348: PUSH
5349: LD_INT 2
5351: PUSH
5352: LD_INT 4
5354: PUSH
5355: LD_INT 5
5357: PUSH
5358: LD_INT 7
5360: PUSH
5361: LD_INT 11
5363: PUSH
5364: LD_INT 12
5366: PUSH
5367: LD_INT 15
5369: PUSH
5370: LD_INT 16
5372: PUSH
5373: LD_INT 20
5375: PUSH
5376: LD_INT 21
5378: PUSH
5379: LD_INT 22
5381: PUSH
5382: LD_INT 23
5384: PUSH
5385: LD_INT 25
5387: PUSH
5388: LD_INT 26
5390: PUSH
5391: LD_INT 30
5393: PUSH
5394: LD_INT 31
5396: PUSH
5397: LD_INT 32
5399: PUSH
5400: LD_INT 33
5402: PUSH
5403: LD_INT 34
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: LIST
5410: LIST
5411: LIST
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: PUSH
5427: LD_INT 101
5429: PUSH
5430: LD_INT 102
5432: PUSH
5433: LD_INT 103
5435: PUSH
5436: LD_INT 106
5438: PUSH
5439: LD_INT 108
5441: PUSH
5442: LD_INT 112
5444: PUSH
5445: LD_INT 113
5447: PUSH
5448: LD_INT 114
5450: PUSH
5451: LD_INT 116
5453: PUSH
5454: LD_INT 117
5456: PUSH
5457: LD_INT 118
5459: PUSH
5460: EMPTY
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: LIST
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: ST_TO_ADDR
5477: GO 6108
5479: LD_INT 17
5481: DOUBLE
5482: EQUAL
5483: IFTRUE 5487
5485: GO 5711
5487: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
5488: LD_ADDR_VAR 0 2
5492: PUSH
5493: LD_INT 1
5495: PUSH
5496: LD_INT 2
5498: PUSH
5499: LD_INT 3
5501: PUSH
5502: LD_INT 4
5504: PUSH
5505: LD_INT 5
5507: PUSH
5508: LD_INT 6
5510: PUSH
5511: LD_INT 7
5513: PUSH
5514: LD_INT 8
5516: PUSH
5517: LD_INT 9
5519: PUSH
5520: LD_INT 10
5522: PUSH
5523: LD_INT 11
5525: PUSH
5526: LD_INT 12
5528: PUSH
5529: LD_INT 13
5531: PUSH
5532: LD_INT 14
5534: PUSH
5535: LD_INT 15
5537: PUSH
5538: LD_INT 16
5540: PUSH
5541: LD_INT 17
5543: PUSH
5544: LD_INT 18
5546: PUSH
5547: LD_INT 19
5549: PUSH
5550: LD_INT 20
5552: PUSH
5553: LD_INT 21
5555: PUSH
5556: LD_INT 22
5558: PUSH
5559: LD_INT 23
5561: PUSH
5562: LD_INT 24
5564: PUSH
5565: LD_INT 25
5567: PUSH
5568: LD_INT 26
5570: PUSH
5571: LD_INT 27
5573: PUSH
5574: LD_INT 28
5576: PUSH
5577: LD_INT 29
5579: PUSH
5580: LD_INT 30
5582: PUSH
5583: LD_INT 31
5585: PUSH
5586: LD_INT 32
5588: PUSH
5589: LD_INT 33
5591: PUSH
5592: LD_INT 34
5594: PUSH
5595: LD_INT 36
5597: PUSH
5598: EMPTY
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: PUSH
5635: LD_INT 101
5637: PUSH
5638: LD_INT 102
5640: PUSH
5641: LD_INT 103
5643: PUSH
5644: LD_INT 104
5646: PUSH
5647: LD_INT 105
5649: PUSH
5650: LD_INT 106
5652: PUSH
5653: LD_INT 107
5655: PUSH
5656: LD_INT 108
5658: PUSH
5659: LD_INT 109
5661: PUSH
5662: LD_INT 110
5664: PUSH
5665: LD_INT 111
5667: PUSH
5668: LD_INT 112
5670: PUSH
5671: LD_INT 113
5673: PUSH
5674: LD_INT 114
5676: PUSH
5677: LD_INT 116
5679: PUSH
5680: LD_INT 117
5682: PUSH
5683: LD_INT 118
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: ST_TO_ADDR
5709: GO 6108
5711: LD_INT 18
5713: DOUBLE
5714: EQUAL
5715: IFTRUE 5719
5717: GO 5867
5719: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
5720: LD_ADDR_VAR 0 2
5724: PUSH
5725: LD_INT 2
5727: PUSH
5728: LD_INT 4
5730: PUSH
5731: LD_INT 5
5733: PUSH
5734: LD_INT 7
5736: PUSH
5737: LD_INT 11
5739: PUSH
5740: LD_INT 12
5742: PUSH
5743: LD_INT 15
5745: PUSH
5746: LD_INT 16
5748: PUSH
5749: LD_INT 20
5751: PUSH
5752: LD_INT 21
5754: PUSH
5755: LD_INT 22
5757: PUSH
5758: LD_INT 23
5760: PUSH
5761: LD_INT 25
5763: PUSH
5764: LD_INT 26
5766: PUSH
5767: LD_INT 30
5769: PUSH
5770: LD_INT 31
5772: PUSH
5773: LD_INT 32
5775: PUSH
5776: LD_INT 33
5778: PUSH
5779: LD_INT 34
5781: PUSH
5782: LD_INT 35
5784: PUSH
5785: LD_INT 36
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: LIST
5799: LIST
5800: LIST
5801: LIST
5802: LIST
5803: LIST
5804: LIST
5805: LIST
5806: LIST
5807: LIST
5808: LIST
5809: LIST
5810: PUSH
5811: LD_INT 101
5813: PUSH
5814: LD_INT 102
5816: PUSH
5817: LD_INT 103
5819: PUSH
5820: LD_INT 106
5822: PUSH
5823: LD_INT 108
5825: PUSH
5826: LD_INT 112
5828: PUSH
5829: LD_INT 113
5831: PUSH
5832: LD_INT 114
5834: PUSH
5835: LD_INT 115
5837: PUSH
5838: LD_INT 116
5840: PUSH
5841: LD_INT 117
5843: PUSH
5844: LD_INT 118
5846: PUSH
5847: EMPTY
5848: LIST
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: PUSH
5861: EMPTY
5862: LIST
5863: LIST
5864: ST_TO_ADDR
5865: GO 6108
5867: LD_INT 19
5869: DOUBLE
5870: EQUAL
5871: IFTRUE 5875
5873: GO 6107
5875: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
5876: LD_ADDR_VAR 0 2
5880: PUSH
5881: LD_INT 1
5883: PUSH
5884: LD_INT 2
5886: PUSH
5887: LD_INT 3
5889: PUSH
5890: LD_INT 4
5892: PUSH
5893: LD_INT 5
5895: PUSH
5896: LD_INT 6
5898: PUSH
5899: LD_INT 7
5901: PUSH
5902: LD_INT 8
5904: PUSH
5905: LD_INT 9
5907: PUSH
5908: LD_INT 10
5910: PUSH
5911: LD_INT 11
5913: PUSH
5914: LD_INT 12
5916: PUSH
5917: LD_INT 13
5919: PUSH
5920: LD_INT 14
5922: PUSH
5923: LD_INT 15
5925: PUSH
5926: LD_INT 16
5928: PUSH
5929: LD_INT 17
5931: PUSH
5932: LD_INT 18
5934: PUSH
5935: LD_INT 19
5937: PUSH
5938: LD_INT 20
5940: PUSH
5941: LD_INT 21
5943: PUSH
5944: LD_INT 22
5946: PUSH
5947: LD_INT 23
5949: PUSH
5950: LD_INT 24
5952: PUSH
5953: LD_INT 25
5955: PUSH
5956: LD_INT 26
5958: PUSH
5959: LD_INT 27
5961: PUSH
5962: LD_INT 28
5964: PUSH
5965: LD_INT 29
5967: PUSH
5968: LD_INT 30
5970: PUSH
5971: LD_INT 31
5973: PUSH
5974: LD_INT 32
5976: PUSH
5977: LD_INT 33
5979: PUSH
5980: LD_INT 34
5982: PUSH
5983: LD_INT 35
5985: PUSH
5986: LD_INT 36
5988: PUSH
5989: EMPTY
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: PUSH
6027: LD_INT 101
6029: PUSH
6030: LD_INT 102
6032: PUSH
6033: LD_INT 103
6035: PUSH
6036: LD_INT 104
6038: PUSH
6039: LD_INT 105
6041: PUSH
6042: LD_INT 106
6044: PUSH
6045: LD_INT 107
6047: PUSH
6048: LD_INT 108
6050: PUSH
6051: LD_INT 109
6053: PUSH
6054: LD_INT 110
6056: PUSH
6057: LD_INT 111
6059: PUSH
6060: LD_INT 112
6062: PUSH
6063: LD_INT 113
6065: PUSH
6066: LD_INT 114
6068: PUSH
6069: LD_INT 115
6071: PUSH
6072: LD_INT 116
6074: PUSH
6075: LD_INT 117
6077: PUSH
6078: LD_INT 118
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: ST_TO_ADDR
6105: GO 6108
6107: POP
// end else
6108: GO 6339
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6110: LD_ADDR_VAR 0 2
6114: PUSH
6115: LD_INT 1
6117: PUSH
6118: LD_INT 2
6120: PUSH
6121: LD_INT 3
6123: PUSH
6124: LD_INT 4
6126: PUSH
6127: LD_INT 5
6129: PUSH
6130: LD_INT 6
6132: PUSH
6133: LD_INT 7
6135: PUSH
6136: LD_INT 8
6138: PUSH
6139: LD_INT 9
6141: PUSH
6142: LD_INT 10
6144: PUSH
6145: LD_INT 11
6147: PUSH
6148: LD_INT 12
6150: PUSH
6151: LD_INT 13
6153: PUSH
6154: LD_INT 14
6156: PUSH
6157: LD_INT 15
6159: PUSH
6160: LD_INT 16
6162: PUSH
6163: LD_INT 17
6165: PUSH
6166: LD_INT 18
6168: PUSH
6169: LD_INT 19
6171: PUSH
6172: LD_INT 20
6174: PUSH
6175: LD_INT 21
6177: PUSH
6178: LD_INT 22
6180: PUSH
6181: LD_INT 23
6183: PUSH
6184: LD_INT 24
6186: PUSH
6187: LD_INT 25
6189: PUSH
6190: LD_INT 26
6192: PUSH
6193: LD_INT 27
6195: PUSH
6196: LD_INT 28
6198: PUSH
6199: LD_INT 29
6201: PUSH
6202: LD_INT 30
6204: PUSH
6205: LD_INT 31
6207: PUSH
6208: LD_INT 32
6210: PUSH
6211: LD_INT 33
6213: PUSH
6214: LD_INT 34
6216: PUSH
6217: LD_INT 35
6219: PUSH
6220: LD_INT 36
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: PUSH
6261: LD_INT 101
6263: PUSH
6264: LD_INT 102
6266: PUSH
6267: LD_INT 103
6269: PUSH
6270: LD_INT 104
6272: PUSH
6273: LD_INT 105
6275: PUSH
6276: LD_INT 106
6278: PUSH
6279: LD_INT 107
6281: PUSH
6282: LD_INT 108
6284: PUSH
6285: LD_INT 109
6287: PUSH
6288: LD_INT 110
6290: PUSH
6291: LD_INT 111
6293: PUSH
6294: LD_INT 112
6296: PUSH
6297: LD_INT 113
6299: PUSH
6300: LD_INT 114
6302: PUSH
6303: LD_INT 115
6305: PUSH
6306: LD_INT 116
6308: PUSH
6309: LD_INT 117
6311: PUSH
6312: LD_INT 118
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: PUSH
6335: EMPTY
6336: LIST
6337: LIST
6338: ST_TO_ADDR
// if result then
6339: LD_VAR 0 2
6343: IFFALSE 7129
// begin normal :=  ;
6345: LD_ADDR_VAR 0 5
6349: PUSH
6350: LD_STRING 
6352: ST_TO_ADDR
// hardcore :=  ;
6353: LD_ADDR_VAR 0 6
6357: PUSH
6358: LD_STRING 
6360: ST_TO_ADDR
// active :=  ;
6361: LD_ADDR_VAR 0 7
6365: PUSH
6366: LD_STRING 
6368: ST_TO_ADDR
// for i = 1 to normalCounter do
6369: LD_ADDR_VAR 0 8
6373: PUSH
6374: DOUBLE
6375: LD_INT 1
6377: DEC
6378: ST_TO_ADDR
6379: LD_EXP 2
6383: PUSH
6384: FOR_TO
6385: IFFALSE 6486
// begin tmp := 0 ;
6387: LD_ADDR_VAR 0 3
6391: PUSH
6392: LD_STRING 0
6394: ST_TO_ADDR
// if result [ 1 ] then
6395: LD_VAR 0 2
6399: PUSH
6400: LD_INT 1
6402: ARRAY
6403: IFFALSE 6468
// if result [ 1 ] [ 1 ] = i then
6405: LD_VAR 0 2
6409: PUSH
6410: LD_INT 1
6412: ARRAY
6413: PUSH
6414: LD_INT 1
6416: ARRAY
6417: PUSH
6418: LD_VAR 0 8
6422: EQUAL
6423: IFFALSE 6468
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6425: LD_ADDR_VAR 0 2
6429: PUSH
6430: LD_VAR 0 2
6434: PPUSH
6435: LD_INT 1
6437: PPUSH
6438: LD_VAR 0 2
6442: PUSH
6443: LD_INT 1
6445: ARRAY
6446: PPUSH
6447: LD_INT 1
6449: PPUSH
6450: CALL_OW 3
6454: PPUSH
6455: CALL_OW 1
6459: ST_TO_ADDR
// tmp := 1 ;
6460: LD_ADDR_VAR 0 3
6464: PUSH
6465: LD_STRING 1
6467: ST_TO_ADDR
// end ; normal := normal & tmp ;
6468: LD_ADDR_VAR 0 5
6472: PUSH
6473: LD_VAR 0 5
6477: PUSH
6478: LD_VAR 0 3
6482: STR
6483: ST_TO_ADDR
// end ;
6484: GO 6384
6486: POP
6487: POP
// for i = 1 to hardcoreCounter do
6488: LD_ADDR_VAR 0 8
6492: PUSH
6493: DOUBLE
6494: LD_INT 1
6496: DEC
6497: ST_TO_ADDR
6498: LD_EXP 3
6502: PUSH
6503: FOR_TO
6504: IFFALSE 6609
// begin tmp := 0 ;
6506: LD_ADDR_VAR 0 3
6510: PUSH
6511: LD_STRING 0
6513: ST_TO_ADDR
// if result [ 2 ] then
6514: LD_VAR 0 2
6518: PUSH
6519: LD_INT 2
6521: ARRAY
6522: IFFALSE 6591
// if result [ 2 ] [ 1 ] = 100 + i then
6524: LD_VAR 0 2
6528: PUSH
6529: LD_INT 2
6531: ARRAY
6532: PUSH
6533: LD_INT 1
6535: ARRAY
6536: PUSH
6537: LD_INT 100
6539: PUSH
6540: LD_VAR 0 8
6544: PLUS
6545: EQUAL
6546: IFFALSE 6591
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6548: LD_ADDR_VAR 0 2
6552: PUSH
6553: LD_VAR 0 2
6557: PPUSH
6558: LD_INT 2
6560: PPUSH
6561: LD_VAR 0 2
6565: PUSH
6566: LD_INT 2
6568: ARRAY
6569: PPUSH
6570: LD_INT 1
6572: PPUSH
6573: CALL_OW 3
6577: PPUSH
6578: CALL_OW 1
6582: ST_TO_ADDR
// tmp := 1 ;
6583: LD_ADDR_VAR 0 3
6587: PUSH
6588: LD_STRING 1
6590: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6591: LD_ADDR_VAR 0 6
6595: PUSH
6596: LD_VAR 0 6
6600: PUSH
6601: LD_VAR 0 3
6605: STR
6606: ST_TO_ADDR
// end ;
6607: GO 6503
6609: POP
6610: POP
// if isGameLoad then
6611: LD_VAR 0 1
6615: IFFALSE 7090
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
6617: LD_ADDR_VAR 0 4
6621: PUSH
6622: LD_EXP 6
6626: PUSH
6627: LD_EXP 5
6631: PUSH
6632: LD_EXP 7
6636: PUSH
6637: LD_EXP 4
6641: PUSH
6642: LD_EXP 8
6646: PUSH
6647: LD_EXP 9
6651: PUSH
6652: LD_EXP 10
6656: PUSH
6657: LD_EXP 11
6661: PUSH
6662: LD_EXP 12
6666: PUSH
6667: LD_EXP 13
6671: PUSH
6672: LD_EXP 14
6676: PUSH
6677: LD_EXP 15
6681: PUSH
6682: LD_EXP 16
6686: PUSH
6687: LD_EXP 17
6691: PUSH
6692: LD_EXP 25
6696: PUSH
6697: LD_EXP 26
6701: PUSH
6702: LD_EXP 27
6706: PUSH
6707: LD_EXP 28
6711: PUSH
6712: LD_EXP 30
6716: PUSH
6717: LD_EXP 31
6721: PUSH
6722: LD_EXP 32
6726: PUSH
6727: LD_EXP 35
6731: PUSH
6732: LD_EXP 37
6736: PUSH
6737: LD_EXP 38
6741: PUSH
6742: LD_EXP 39
6746: PUSH
6747: LD_EXP 41
6751: PUSH
6752: LD_EXP 42
6756: PUSH
6757: LD_EXP 45
6761: PUSH
6762: LD_EXP 46
6766: PUSH
6767: LD_EXP 47
6771: PUSH
6772: LD_EXP 48
6776: PUSH
6777: LD_EXP 49
6781: PUSH
6782: LD_EXP 50
6786: PUSH
6787: LD_EXP 51
6791: PUSH
6792: LD_EXP 52
6796: PUSH
6797: LD_EXP 53
6801: PUSH
6802: LD_EXP 18
6806: PUSH
6807: LD_EXP 19
6811: PUSH
6812: LD_EXP 22
6816: PUSH
6817: LD_EXP 23
6821: PUSH
6822: LD_EXP 24
6826: PUSH
6827: LD_EXP 20
6831: PUSH
6832: LD_EXP 21
6836: PUSH
6837: LD_EXP 29
6841: PUSH
6842: LD_EXP 33
6846: PUSH
6847: LD_EXP 34
6851: PUSH
6852: LD_EXP 36
6856: PUSH
6857: LD_EXP 40
6861: PUSH
6862: LD_EXP 43
6866: PUSH
6867: LD_EXP 44
6871: PUSH
6872: LD_EXP 54
6876: PUSH
6877: LD_EXP 55
6881: PUSH
6882: LD_EXP 56
6886: PUSH
6887: LD_EXP 57
6891: PUSH
6892: EMPTY
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: LIST
6899: LIST
6900: LIST
6901: LIST
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: ST_TO_ADDR
// tmp :=  ;
6948: LD_ADDR_VAR 0 3
6952: PUSH
6953: LD_STRING 
6955: ST_TO_ADDR
// for i = 1 to normalCounter do
6956: LD_ADDR_VAR 0 8
6960: PUSH
6961: DOUBLE
6962: LD_INT 1
6964: DEC
6965: ST_TO_ADDR
6966: LD_EXP 2
6970: PUSH
6971: FOR_TO
6972: IFFALSE 7008
// begin if flags [ i ] then
6974: LD_VAR 0 4
6978: PUSH
6979: LD_VAR 0 8
6983: ARRAY
6984: IFFALSE 7006
// tmp := tmp & i & ; ;
6986: LD_ADDR_VAR 0 3
6990: PUSH
6991: LD_VAR 0 3
6995: PUSH
6996: LD_VAR 0 8
7000: STR
7001: PUSH
7002: LD_STRING ;
7004: STR
7005: ST_TO_ADDR
// end ;
7006: GO 6971
7008: POP
7009: POP
// for i = 1 to hardcoreCounter do
7010: LD_ADDR_VAR 0 8
7014: PUSH
7015: DOUBLE
7016: LD_INT 1
7018: DEC
7019: ST_TO_ADDR
7020: LD_EXP 3
7024: PUSH
7025: FOR_TO
7026: IFFALSE 7072
// begin if flags [ normalCounter + i ] then
7028: LD_VAR 0 4
7032: PUSH
7033: LD_EXP 2
7037: PUSH
7038: LD_VAR 0 8
7042: PLUS
7043: ARRAY
7044: IFFALSE 7070
// tmp := tmp & ( 100 + i ) & ; ;
7046: LD_ADDR_VAR 0 3
7050: PUSH
7051: LD_VAR 0 3
7055: PUSH
7056: LD_INT 100
7058: PUSH
7059: LD_VAR 0 8
7063: PLUS
7064: STR
7065: PUSH
7066: LD_STRING ;
7068: STR
7069: ST_TO_ADDR
// end ;
7070: GO 7025
7072: POP
7073: POP
// if tmp then
7074: LD_VAR 0 3
7078: IFFALSE 7090
// active := tmp ;
7080: LD_ADDR_VAR 0 7
7084: PUSH
7085: LD_VAR 0 3
7089: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7090: LD_STRING getStreamItemsFromMission("
7092: PUSH
7093: LD_VAR 0 5
7097: STR
7098: PUSH
7099: LD_STRING ","
7101: STR
7102: PUSH
7103: LD_VAR 0 6
7107: STR
7108: PUSH
7109: LD_STRING ","
7111: STR
7112: PUSH
7113: LD_VAR 0 7
7117: STR
7118: PUSH
7119: LD_STRING ")
7121: STR
7122: PPUSH
7123: CALL_OW 559
// end else
7127: GO 7136
// ToLua ( getStreamItemsFromMission("","","") ) ;
7129: LD_STRING getStreamItemsFromMission("","","")
7131: PPUSH
7132: CALL_OW 559
// end ;
7136: LD_VAR 0 2
7140: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7141: LD_EXP 1
7145: PUSH
7146: LD_EXP 6
7150: AND
7151: IFFALSE 7275
7153: GO 7155
7155: DISABLE
7156: LD_INT 0
7158: PPUSH
7159: PPUSH
// begin enable ;
7160: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7161: LD_ADDR_VAR 0 2
7165: PUSH
7166: LD_INT 22
7168: PUSH
7169: LD_OWVAR 2
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: PUSH
7178: LD_INT 2
7180: PUSH
7181: LD_INT 34
7183: PUSH
7184: LD_INT 7
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: PUSH
7191: LD_INT 34
7193: PUSH
7194: LD_INT 45
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: PUSH
7201: LD_INT 34
7203: PUSH
7204: LD_INT 28
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PUSH
7211: LD_INT 34
7213: PUSH
7214: LD_INT 47
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: PPUSH
7232: CALL_OW 69
7236: ST_TO_ADDR
// if not tmp then
7237: LD_VAR 0 2
7241: NOT
7242: IFFALSE 7246
// exit ;
7244: GO 7275
// for i in tmp do
7246: LD_ADDR_VAR 0 1
7250: PUSH
7251: LD_VAR 0 2
7255: PUSH
7256: FOR_IN
7257: IFFALSE 7273
// begin SetLives ( i , 0 ) ;
7259: LD_VAR 0 1
7263: PPUSH
7264: LD_INT 0
7266: PPUSH
7267: CALL_OW 234
// end ;
7271: GO 7256
7273: POP
7274: POP
// end ;
7275: PPOPN 2
7277: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7278: LD_EXP 1
7282: PUSH
7283: LD_EXP 7
7287: AND
7288: IFFALSE 7372
7290: GO 7292
7292: DISABLE
7293: LD_INT 0
7295: PPUSH
7296: PPUSH
// begin enable ;
7297: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7298: LD_ADDR_VAR 0 2
7302: PUSH
7303: LD_INT 22
7305: PUSH
7306: LD_OWVAR 2
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: PUSH
7315: LD_INT 32
7317: PUSH
7318: LD_INT 3
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PPUSH
7329: CALL_OW 69
7333: ST_TO_ADDR
// if not tmp then
7334: LD_VAR 0 2
7338: NOT
7339: IFFALSE 7343
// exit ;
7341: GO 7372
// for i in tmp do
7343: LD_ADDR_VAR 0 1
7347: PUSH
7348: LD_VAR 0 2
7352: PUSH
7353: FOR_IN
7354: IFFALSE 7370
// begin SetLives ( i , 0 ) ;
7356: LD_VAR 0 1
7360: PPUSH
7361: LD_INT 0
7363: PPUSH
7364: CALL_OW 234
// end ;
7368: GO 7353
7370: POP
7371: POP
// end ;
7372: PPOPN 2
7374: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7375: LD_EXP 1
7379: PUSH
7380: LD_EXP 4
7384: AND
7385: IFFALSE 7478
7387: GO 7389
7389: DISABLE
7390: LD_INT 0
7392: PPUSH
// begin enable ;
7393: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7394: LD_ADDR_VAR 0 1
7398: PUSH
7399: LD_INT 22
7401: PUSH
7402: LD_OWVAR 2
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: PUSH
7411: LD_INT 2
7413: PUSH
7414: LD_INT 25
7416: PUSH
7417: LD_INT 5
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: PUSH
7424: LD_INT 25
7426: PUSH
7427: LD_INT 9
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: PUSH
7434: LD_INT 25
7436: PUSH
7437: LD_INT 8
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PPUSH
7454: CALL_OW 69
7458: PUSH
7459: FOR_IN
7460: IFFALSE 7476
// begin SetClass ( i , 1 ) ;
7462: LD_VAR 0 1
7466: PPUSH
7467: LD_INT 1
7469: PPUSH
7470: CALL_OW 336
// end ;
7474: GO 7459
7476: POP
7477: POP
// end ;
7478: PPOPN 1
7480: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7481: LD_EXP 1
7485: PUSH
7486: LD_EXP 5
7490: AND
7491: PUSH
7492: LD_OWVAR 65
7496: PUSH
7497: LD_INT 7
7499: LESS
7500: AND
7501: IFFALSE 7515
7503: GO 7505
7505: DISABLE
// begin enable ;
7506: ENABLE
// game_speed := 7 ;
7507: LD_ADDR_OWVAR 65
7511: PUSH
7512: LD_INT 7
7514: ST_TO_ADDR
// end ;
7515: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7516: LD_EXP 1
7520: PUSH
7521: LD_EXP 8
7525: AND
7526: IFFALSE 7728
7528: GO 7530
7530: DISABLE
7531: LD_INT 0
7533: PPUSH
7534: PPUSH
7535: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7536: LD_ADDR_VAR 0 3
7540: PUSH
7541: LD_INT 81
7543: PUSH
7544: LD_OWVAR 2
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: PUSH
7553: LD_INT 21
7555: PUSH
7556: LD_INT 1
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: PPUSH
7567: CALL_OW 69
7571: ST_TO_ADDR
// if not tmp then
7572: LD_VAR 0 3
7576: NOT
7577: IFFALSE 7581
// exit ;
7579: GO 7728
// if tmp > 5 then
7581: LD_VAR 0 3
7585: PUSH
7586: LD_INT 5
7588: GREATER
7589: IFFALSE 7601
// k := 5 else
7591: LD_ADDR_VAR 0 2
7595: PUSH
7596: LD_INT 5
7598: ST_TO_ADDR
7599: GO 7611
// k := tmp ;
7601: LD_ADDR_VAR 0 2
7605: PUSH
7606: LD_VAR 0 3
7610: ST_TO_ADDR
// for i := 1 to k do
7611: LD_ADDR_VAR 0 1
7615: PUSH
7616: DOUBLE
7617: LD_INT 1
7619: DEC
7620: ST_TO_ADDR
7621: LD_VAR 0 2
7625: PUSH
7626: FOR_TO
7627: IFFALSE 7726
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7629: LD_VAR 0 3
7633: PUSH
7634: LD_VAR 0 1
7638: ARRAY
7639: PPUSH
7640: LD_VAR 0 1
7644: PUSH
7645: LD_INT 4
7647: MOD
7648: PUSH
7649: LD_INT 1
7651: PLUS
7652: PPUSH
7653: CALL_OW 259
7657: PUSH
7658: LD_INT 10
7660: LESS
7661: IFFALSE 7724
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7663: LD_VAR 0 3
7667: PUSH
7668: LD_VAR 0 1
7672: ARRAY
7673: PPUSH
7674: LD_VAR 0 1
7678: PUSH
7679: LD_INT 4
7681: MOD
7682: PUSH
7683: LD_INT 1
7685: PLUS
7686: PPUSH
7687: LD_VAR 0 3
7691: PUSH
7692: LD_VAR 0 1
7696: ARRAY
7697: PPUSH
7698: LD_VAR 0 1
7702: PUSH
7703: LD_INT 4
7705: MOD
7706: PUSH
7707: LD_INT 1
7709: PLUS
7710: PPUSH
7711: CALL_OW 259
7715: PUSH
7716: LD_INT 1
7718: PLUS
7719: PPUSH
7720: CALL_OW 237
7724: GO 7626
7726: POP
7727: POP
// end ;
7728: PPOPN 3
7730: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
7731: LD_EXP 1
7735: PUSH
7736: LD_EXP 9
7740: AND
7741: IFFALSE 7761
7743: GO 7745
7745: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
7746: LD_INT 4
7748: PPUSH
7749: LD_OWVAR 2
7753: PPUSH
7754: LD_INT 0
7756: PPUSH
7757: CALL_OW 324
7761: END
// every 0 0$1 trigger StreamModeActive and sShovel do
7762: LD_EXP 1
7766: PUSH
7767: LD_EXP 38
7771: AND
7772: IFFALSE 7792
7774: GO 7776
7776: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
7777: LD_INT 19
7779: PPUSH
7780: LD_OWVAR 2
7784: PPUSH
7785: LD_INT 0
7787: PPUSH
7788: CALL_OW 324
7792: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
7793: LD_EXP 1
7797: PUSH
7798: LD_EXP 10
7802: AND
7803: IFFALSE 7905
7805: GO 7807
7807: DISABLE
7808: LD_INT 0
7810: PPUSH
7811: PPUSH
// begin enable ;
7812: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
7813: LD_ADDR_VAR 0 2
7817: PUSH
7818: LD_INT 22
7820: PUSH
7821: LD_OWVAR 2
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: PUSH
7830: LD_INT 2
7832: PUSH
7833: LD_INT 34
7835: PUSH
7836: LD_INT 11
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: PUSH
7843: LD_INT 34
7845: PUSH
7846: LD_INT 30
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: LIST
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: PPUSH
7862: CALL_OW 69
7866: ST_TO_ADDR
// if not tmp then
7867: LD_VAR 0 2
7871: NOT
7872: IFFALSE 7876
// exit ;
7874: GO 7905
// for i in tmp do
7876: LD_ADDR_VAR 0 1
7880: PUSH
7881: LD_VAR 0 2
7885: PUSH
7886: FOR_IN
7887: IFFALSE 7903
// begin SetLives ( i , 0 ) ;
7889: LD_VAR 0 1
7893: PPUSH
7894: LD_INT 0
7896: PPUSH
7897: CALL_OW 234
// end ;
7901: GO 7886
7903: POP
7904: POP
// end ;
7905: PPOPN 2
7907: END
// every 0 0$1 trigger StreamModeActive and sBunker do
7908: LD_EXP 1
7912: PUSH
7913: LD_EXP 11
7917: AND
7918: IFFALSE 7938
7920: GO 7922
7922: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
7923: LD_INT 32
7925: PPUSH
7926: LD_OWVAR 2
7930: PPUSH
7931: LD_INT 0
7933: PPUSH
7934: CALL_OW 324
7938: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
7939: LD_EXP 1
7943: PUSH
7944: LD_EXP 12
7948: AND
7949: IFFALSE 8130
7951: GO 7953
7953: DISABLE
7954: LD_INT 0
7956: PPUSH
7957: PPUSH
7958: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
7959: LD_ADDR_VAR 0 2
7963: PUSH
7964: LD_INT 22
7966: PUSH
7967: LD_OWVAR 2
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: PUSH
7976: LD_INT 33
7978: PUSH
7979: LD_INT 3
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: PPUSH
7990: CALL_OW 69
7994: ST_TO_ADDR
// if not tmp then
7995: LD_VAR 0 2
7999: NOT
8000: IFFALSE 8004
// exit ;
8002: GO 8130
// side := 0 ;
8004: LD_ADDR_VAR 0 3
8008: PUSH
8009: LD_INT 0
8011: ST_TO_ADDR
// for i := 1 to 8 do
8012: LD_ADDR_VAR 0 1
8016: PUSH
8017: DOUBLE
8018: LD_INT 1
8020: DEC
8021: ST_TO_ADDR
8022: LD_INT 8
8024: PUSH
8025: FOR_TO
8026: IFFALSE 8074
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8028: LD_OWVAR 2
8032: PUSH
8033: LD_VAR 0 1
8037: NONEQUAL
8038: PUSH
8039: LD_OWVAR 2
8043: PPUSH
8044: LD_VAR 0 1
8048: PPUSH
8049: CALL_OW 81
8053: PUSH
8054: LD_INT 2
8056: EQUAL
8057: AND
8058: IFFALSE 8072
// begin side := i ;
8060: LD_ADDR_VAR 0 3
8064: PUSH
8065: LD_VAR 0 1
8069: ST_TO_ADDR
// break ;
8070: GO 8074
// end ;
8072: GO 8025
8074: POP
8075: POP
// if not side then
8076: LD_VAR 0 3
8080: NOT
8081: IFFALSE 8085
// exit ;
8083: GO 8130
// for i := 1 to tmp do
8085: LD_ADDR_VAR 0 1
8089: PUSH
8090: DOUBLE
8091: LD_INT 1
8093: DEC
8094: ST_TO_ADDR
8095: LD_VAR 0 2
8099: PUSH
8100: FOR_TO
8101: IFFALSE 8128
// if Prob ( 60 ) then
8103: LD_INT 60
8105: PPUSH
8106: CALL_OW 13
8110: IFFALSE 8126
// SetSide ( i , side ) ;
8112: LD_VAR 0 1
8116: PPUSH
8117: LD_VAR 0 3
8121: PPUSH
8122: CALL_OW 235
8126: GO 8100
8128: POP
8129: POP
// end ;
8130: PPOPN 3
8132: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8133: LD_EXP 1
8137: PUSH
8138: LD_EXP 14
8142: AND
8143: IFFALSE 8262
8145: GO 8147
8147: DISABLE
8148: LD_INT 0
8150: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8151: LD_ADDR_VAR 0 1
8155: PUSH
8156: LD_INT 22
8158: PUSH
8159: LD_OWVAR 2
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: PUSH
8168: LD_INT 21
8170: PUSH
8171: LD_INT 1
8173: PUSH
8174: EMPTY
8175: LIST
8176: LIST
8177: PUSH
8178: LD_INT 3
8180: PUSH
8181: LD_INT 23
8183: PUSH
8184: LD_INT 0
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: LIST
8199: PPUSH
8200: CALL_OW 69
8204: PUSH
8205: FOR_IN
8206: IFFALSE 8260
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8208: LD_VAR 0 1
8212: PPUSH
8213: CALL_OW 257
8217: PUSH
8218: LD_INT 1
8220: PUSH
8221: LD_INT 2
8223: PUSH
8224: LD_INT 3
8226: PUSH
8227: LD_INT 4
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: IN
8236: IFFALSE 8258
// SetClass ( un , rand ( 1 , 4 ) ) ;
8238: LD_VAR 0 1
8242: PPUSH
8243: LD_INT 1
8245: PPUSH
8246: LD_INT 4
8248: PPUSH
8249: CALL_OW 12
8253: PPUSH
8254: CALL_OW 336
8258: GO 8205
8260: POP
8261: POP
// end ;
8262: PPOPN 1
8264: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8265: LD_EXP 1
8269: PUSH
8270: LD_EXP 13
8274: AND
8275: IFFALSE 8354
8277: GO 8279
8279: DISABLE
8280: LD_INT 0
8282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8283: LD_ADDR_VAR 0 1
8287: PUSH
8288: LD_INT 22
8290: PUSH
8291: LD_OWVAR 2
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PUSH
8300: LD_INT 21
8302: PUSH
8303: LD_INT 3
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: PPUSH
8314: CALL_OW 69
8318: ST_TO_ADDR
// if not tmp then
8319: LD_VAR 0 1
8323: NOT
8324: IFFALSE 8328
// exit ;
8326: GO 8354
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8328: LD_VAR 0 1
8332: PUSH
8333: LD_INT 1
8335: PPUSH
8336: LD_VAR 0 1
8340: PPUSH
8341: CALL_OW 12
8345: ARRAY
8346: PPUSH
8347: LD_INT 100
8349: PPUSH
8350: CALL_OW 234
// end ;
8354: PPOPN 1
8356: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8357: LD_EXP 1
8361: PUSH
8362: LD_EXP 15
8366: AND
8367: IFFALSE 8465
8369: GO 8371
8371: DISABLE
8372: LD_INT 0
8374: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8375: LD_ADDR_VAR 0 1
8379: PUSH
8380: LD_INT 22
8382: PUSH
8383: LD_OWVAR 2
8387: PUSH
8388: EMPTY
8389: LIST
8390: LIST
8391: PUSH
8392: LD_INT 21
8394: PUSH
8395: LD_INT 1
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: PPUSH
8406: CALL_OW 69
8410: ST_TO_ADDR
// if not tmp then
8411: LD_VAR 0 1
8415: NOT
8416: IFFALSE 8420
// exit ;
8418: GO 8465
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8420: LD_VAR 0 1
8424: PUSH
8425: LD_INT 1
8427: PPUSH
8428: LD_VAR 0 1
8432: PPUSH
8433: CALL_OW 12
8437: ARRAY
8438: PPUSH
8439: LD_INT 1
8441: PPUSH
8442: LD_INT 4
8444: PPUSH
8445: CALL_OW 12
8449: PPUSH
8450: LD_INT 3000
8452: PPUSH
8453: LD_INT 9000
8455: PPUSH
8456: CALL_OW 12
8460: PPUSH
8461: CALL_OW 492
// end ;
8465: PPOPN 1
8467: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8468: LD_EXP 1
8472: PUSH
8473: LD_EXP 16
8477: AND
8478: IFFALSE 8498
8480: GO 8482
8482: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8483: LD_INT 1
8485: PPUSH
8486: LD_OWVAR 2
8490: PPUSH
8491: LD_INT 0
8493: PPUSH
8494: CALL_OW 324
8498: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8499: LD_EXP 1
8503: PUSH
8504: LD_EXP 17
8508: AND
8509: IFFALSE 8592
8511: GO 8513
8513: DISABLE
8514: LD_INT 0
8516: PPUSH
8517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8518: LD_ADDR_VAR 0 2
8522: PUSH
8523: LD_INT 22
8525: PUSH
8526: LD_OWVAR 2
8530: PUSH
8531: EMPTY
8532: LIST
8533: LIST
8534: PUSH
8535: LD_INT 21
8537: PUSH
8538: LD_INT 3
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: PPUSH
8549: CALL_OW 69
8553: ST_TO_ADDR
// if not tmp then
8554: LD_VAR 0 2
8558: NOT
8559: IFFALSE 8563
// exit ;
8561: GO 8592
// for i in tmp do
8563: LD_ADDR_VAR 0 1
8567: PUSH
8568: LD_VAR 0 2
8572: PUSH
8573: FOR_IN
8574: IFFALSE 8590
// SetBLevel ( i , 10 ) ;
8576: LD_VAR 0 1
8580: PPUSH
8581: LD_INT 10
8583: PPUSH
8584: CALL_OW 241
8588: GO 8573
8590: POP
8591: POP
// end ;
8592: PPOPN 2
8594: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8595: LD_EXP 1
8599: PUSH
8600: LD_EXP 18
8604: AND
8605: IFFALSE 8716
8607: GO 8609
8609: DISABLE
8610: LD_INT 0
8612: PPUSH
8613: PPUSH
8614: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8615: LD_ADDR_VAR 0 3
8619: PUSH
8620: LD_INT 22
8622: PUSH
8623: LD_OWVAR 2
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: PUSH
8632: LD_INT 25
8634: PUSH
8635: LD_INT 1
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: PPUSH
8646: CALL_OW 69
8650: ST_TO_ADDR
// if not tmp then
8651: LD_VAR 0 3
8655: NOT
8656: IFFALSE 8660
// exit ;
8658: GO 8716
// un := tmp [ rand ( 1 , tmp ) ] ;
8660: LD_ADDR_VAR 0 2
8664: PUSH
8665: LD_VAR 0 3
8669: PUSH
8670: LD_INT 1
8672: PPUSH
8673: LD_VAR 0 3
8677: PPUSH
8678: CALL_OW 12
8682: ARRAY
8683: ST_TO_ADDR
// if Crawls ( un ) then
8684: LD_VAR 0 2
8688: PPUSH
8689: CALL_OW 318
8693: IFFALSE 8704
// ComWalk ( un ) ;
8695: LD_VAR 0 2
8699: PPUSH
8700: CALL_OW 138
// SetClass ( un , class_sniper ) ;
8704: LD_VAR 0 2
8708: PPUSH
8709: LD_INT 5
8711: PPUSH
8712: CALL_OW 336
// end ;
8716: PPOPN 3
8718: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
8719: LD_EXP 1
8723: PUSH
8724: LD_EXP 19
8728: AND
8729: PUSH
8730: LD_OWVAR 67
8734: PUSH
8735: LD_INT 4
8737: LESS
8738: AND
8739: IFFALSE 8758
8741: GO 8743
8743: DISABLE
// begin Difficulty := Difficulty + 1 ;
8744: LD_ADDR_OWVAR 67
8748: PUSH
8749: LD_OWVAR 67
8753: PUSH
8754: LD_INT 1
8756: PLUS
8757: ST_TO_ADDR
// end ;
8758: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
8759: LD_EXP 1
8763: PUSH
8764: LD_EXP 20
8768: AND
8769: IFFALSE 8872
8771: GO 8773
8773: DISABLE
8774: LD_INT 0
8776: PPUSH
// begin for i := 1 to 5 do
8777: LD_ADDR_VAR 0 1
8781: PUSH
8782: DOUBLE
8783: LD_INT 1
8785: DEC
8786: ST_TO_ADDR
8787: LD_INT 5
8789: PUSH
8790: FOR_TO
8791: IFFALSE 8870
// begin uc_nation := nation_nature ;
8793: LD_ADDR_OWVAR 21
8797: PUSH
8798: LD_INT 0
8800: ST_TO_ADDR
// uc_side := 0 ;
8801: LD_ADDR_OWVAR 20
8805: PUSH
8806: LD_INT 0
8808: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8809: LD_ADDR_OWVAR 29
8813: PUSH
8814: LD_INT 12
8816: PUSH
8817: LD_INT 12
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: ST_TO_ADDR
// hc_agressivity := 20 ;
8824: LD_ADDR_OWVAR 35
8828: PUSH
8829: LD_INT 20
8831: ST_TO_ADDR
// hc_class := class_tiger ;
8832: LD_ADDR_OWVAR 28
8836: PUSH
8837: LD_INT 14
8839: ST_TO_ADDR
// hc_gallery :=  ;
8840: LD_ADDR_OWVAR 33
8844: PUSH
8845: LD_STRING 
8847: ST_TO_ADDR
// hc_name :=  ;
8848: LD_ADDR_OWVAR 26
8852: PUSH
8853: LD_STRING 
8855: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
8856: CALL_OW 44
8860: PPUSH
8861: LD_INT 0
8863: PPUSH
8864: CALL_OW 51
// end ;
8868: GO 8790
8870: POP
8871: POP
// end ;
8872: PPOPN 1
8874: END
// every 0 0$1 trigger StreamModeActive and sBomb do
8875: LD_EXP 1
8879: PUSH
8880: LD_EXP 21
8884: AND
8885: IFFALSE 8894
8887: GO 8889
8889: DISABLE
// StreamSibBomb ;
8890: CALL 8895 0 0
8894: END
// export function StreamSibBomb ; var i , x , y ; begin
8895: LD_INT 0
8897: PPUSH
8898: PPUSH
8899: PPUSH
8900: PPUSH
// result := false ;
8901: LD_ADDR_VAR 0 1
8905: PUSH
8906: LD_INT 0
8908: ST_TO_ADDR
// for i := 1 to 16 do
8909: LD_ADDR_VAR 0 2
8913: PUSH
8914: DOUBLE
8915: LD_INT 1
8917: DEC
8918: ST_TO_ADDR
8919: LD_INT 16
8921: PUSH
8922: FOR_TO
8923: IFFALSE 9122
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8925: LD_ADDR_VAR 0 3
8929: PUSH
8930: LD_INT 10
8932: PUSH
8933: LD_INT 20
8935: PUSH
8936: LD_INT 30
8938: PUSH
8939: LD_INT 40
8941: PUSH
8942: LD_INT 50
8944: PUSH
8945: LD_INT 60
8947: PUSH
8948: LD_INT 70
8950: PUSH
8951: LD_INT 80
8953: PUSH
8954: LD_INT 90
8956: PUSH
8957: LD_INT 100
8959: PUSH
8960: LD_INT 110
8962: PUSH
8963: LD_INT 120
8965: PUSH
8966: LD_INT 130
8968: PUSH
8969: LD_INT 140
8971: PUSH
8972: LD_INT 150
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: PUSH
8992: LD_INT 1
8994: PPUSH
8995: LD_INT 15
8997: PPUSH
8998: CALL_OW 12
9002: ARRAY
9003: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9004: LD_ADDR_VAR 0 4
9008: PUSH
9009: LD_INT 10
9011: PUSH
9012: LD_INT 20
9014: PUSH
9015: LD_INT 30
9017: PUSH
9018: LD_INT 40
9020: PUSH
9021: LD_INT 50
9023: PUSH
9024: LD_INT 60
9026: PUSH
9027: LD_INT 70
9029: PUSH
9030: LD_INT 80
9032: PUSH
9033: LD_INT 90
9035: PUSH
9036: LD_INT 100
9038: PUSH
9039: LD_INT 110
9041: PUSH
9042: LD_INT 120
9044: PUSH
9045: LD_INT 130
9047: PUSH
9048: LD_INT 140
9050: PUSH
9051: LD_INT 150
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: PUSH
9071: LD_INT 1
9073: PPUSH
9074: LD_INT 15
9076: PPUSH
9077: CALL_OW 12
9081: ARRAY
9082: ST_TO_ADDR
// if ValidHex ( x , y ) then
9083: LD_VAR 0 3
9087: PPUSH
9088: LD_VAR 0 4
9092: PPUSH
9093: CALL_OW 488
9097: IFFALSE 9120
// begin result := [ x , y ] ;
9099: LD_ADDR_VAR 0 1
9103: PUSH
9104: LD_VAR 0 3
9108: PUSH
9109: LD_VAR 0 4
9113: PUSH
9114: EMPTY
9115: LIST
9116: LIST
9117: ST_TO_ADDR
// break ;
9118: GO 9122
// end ; end ;
9120: GO 8922
9122: POP
9123: POP
// if result then
9124: LD_VAR 0 1
9128: IFFALSE 9188
// begin ToLua ( playSibBomb() ) ;
9130: LD_STRING playSibBomb()
9132: PPUSH
9133: CALL_OW 559
// wait ( 0 0$14 ) ;
9137: LD_INT 490
9139: PPUSH
9140: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9144: LD_VAR 0 1
9148: PUSH
9149: LD_INT 1
9151: ARRAY
9152: PPUSH
9153: LD_VAR 0 1
9157: PUSH
9158: LD_INT 2
9160: ARRAY
9161: PPUSH
9162: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9166: LD_VAR 0 1
9170: PUSH
9171: LD_INT 1
9173: ARRAY
9174: PPUSH
9175: LD_VAR 0 1
9179: PUSH
9180: LD_INT 2
9182: ARRAY
9183: PPUSH
9184: CALL_OW 429
// end ; end ;
9188: LD_VAR 0 1
9192: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9193: LD_EXP 1
9197: PUSH
9198: LD_EXP 23
9202: AND
9203: IFFALSE 9215
9205: GO 9207
9207: DISABLE
// YouLost (  ) ;
9208: LD_STRING 
9210: PPUSH
9211: CALL_OW 104
9215: END
// every 0 0$1 trigger StreamModeActive and sFog do
9216: LD_EXP 1
9220: PUSH
9221: LD_EXP 22
9225: AND
9226: IFFALSE 9240
9228: GO 9230
9230: DISABLE
// FogOff ( your_side ) ;
9231: LD_OWVAR 2
9235: PPUSH
9236: CALL_OW 344
9240: END
// every 0 0$1 trigger StreamModeActive and sSun do
9241: LD_EXP 1
9245: PUSH
9246: LD_EXP 24
9250: AND
9251: IFFALSE 9279
9253: GO 9255
9255: DISABLE
// begin solar_recharge_percent := 0 ;
9256: LD_ADDR_OWVAR 79
9260: PUSH
9261: LD_INT 0
9263: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9264: LD_INT 10500
9266: PPUSH
9267: CALL_OW 67
// solar_recharge_percent := 100 ;
9271: LD_ADDR_OWVAR 79
9275: PUSH
9276: LD_INT 100
9278: ST_TO_ADDR
// end ;
9279: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9280: LD_EXP 1
9284: PUSH
9285: LD_EXP 25
9289: AND
9290: IFFALSE 9529
9292: GO 9294
9294: DISABLE
9295: LD_INT 0
9297: PPUSH
9298: PPUSH
9299: PPUSH
// begin tmp := [ ] ;
9300: LD_ADDR_VAR 0 3
9304: PUSH
9305: EMPTY
9306: ST_TO_ADDR
// for i := 1 to 6 do
9307: LD_ADDR_VAR 0 1
9311: PUSH
9312: DOUBLE
9313: LD_INT 1
9315: DEC
9316: ST_TO_ADDR
9317: LD_INT 6
9319: PUSH
9320: FOR_TO
9321: IFFALSE 9426
// begin uc_nation := nation_nature ;
9323: LD_ADDR_OWVAR 21
9327: PUSH
9328: LD_INT 0
9330: ST_TO_ADDR
// uc_side := 0 ;
9331: LD_ADDR_OWVAR 20
9335: PUSH
9336: LD_INT 0
9338: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9339: LD_ADDR_OWVAR 29
9343: PUSH
9344: LD_INT 12
9346: PUSH
9347: LD_INT 12
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: ST_TO_ADDR
// hc_agressivity := 20 ;
9354: LD_ADDR_OWVAR 35
9358: PUSH
9359: LD_INT 20
9361: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9362: LD_ADDR_OWVAR 28
9366: PUSH
9367: LD_INT 17
9369: ST_TO_ADDR
// hc_gallery :=  ;
9370: LD_ADDR_OWVAR 33
9374: PUSH
9375: LD_STRING 
9377: ST_TO_ADDR
// hc_name :=  ;
9378: LD_ADDR_OWVAR 26
9382: PUSH
9383: LD_STRING 
9385: ST_TO_ADDR
// un := CreateHuman ;
9386: LD_ADDR_VAR 0 2
9390: PUSH
9391: CALL_OW 44
9395: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9396: LD_VAR 0 2
9400: PPUSH
9401: LD_INT 1
9403: PPUSH
9404: CALL_OW 51
// tmp := tmp ^ un ;
9408: LD_ADDR_VAR 0 3
9412: PUSH
9413: LD_VAR 0 3
9417: PUSH
9418: LD_VAR 0 2
9422: ADD
9423: ST_TO_ADDR
// end ;
9424: GO 9320
9426: POP
9427: POP
// repeat wait ( 0 0$1 ) ;
9428: LD_INT 35
9430: PPUSH
9431: CALL_OW 67
// for un in tmp do
9435: LD_ADDR_VAR 0 2
9439: PUSH
9440: LD_VAR 0 3
9444: PUSH
9445: FOR_IN
9446: IFFALSE 9520
// begin if IsDead ( un ) then
9448: LD_VAR 0 2
9452: PPUSH
9453: CALL_OW 301
9457: IFFALSE 9477
// begin tmp := tmp diff un ;
9459: LD_ADDR_VAR 0 3
9463: PUSH
9464: LD_VAR 0 3
9468: PUSH
9469: LD_VAR 0 2
9473: DIFF
9474: ST_TO_ADDR
// continue ;
9475: GO 9445
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9477: LD_VAR 0 2
9481: PPUSH
9482: LD_INT 3
9484: PUSH
9485: LD_INT 22
9487: PUSH
9488: LD_INT 0
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: PPUSH
9499: CALL_OW 69
9503: PPUSH
9504: LD_VAR 0 2
9508: PPUSH
9509: CALL_OW 74
9513: PPUSH
9514: CALL_OW 115
// end ;
9518: GO 9445
9520: POP
9521: POP
// until not tmp ;
9522: LD_VAR 0 3
9526: NOT
9527: IFFALSE 9428
// end ;
9529: PPOPN 3
9531: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9532: LD_EXP 1
9536: PUSH
9537: LD_EXP 26
9541: AND
9542: IFFALSE 9596
9544: GO 9546
9546: DISABLE
// begin ToLua ( displayTroll(); ) ;
9547: LD_STRING displayTroll();
9549: PPUSH
9550: CALL_OW 559
// wait ( 3 3$00 ) ;
9554: LD_INT 6300
9556: PPUSH
9557: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9561: LD_STRING hideTroll();
9563: PPUSH
9564: CALL_OW 559
// wait ( 1 1$00 ) ;
9568: LD_INT 2100
9570: PPUSH
9571: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9575: LD_STRING displayTroll();
9577: PPUSH
9578: CALL_OW 559
// wait ( 1 1$00 ) ;
9582: LD_INT 2100
9584: PPUSH
9585: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9589: LD_STRING hideTroll();
9591: PPUSH
9592: CALL_OW 559
// end ;
9596: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9597: LD_EXP 1
9601: PUSH
9602: LD_EXP 27
9606: AND
9607: IFFALSE 9670
9609: GO 9611
9611: DISABLE
9612: LD_INT 0
9614: PPUSH
// begin p := 0 ;
9615: LD_ADDR_VAR 0 1
9619: PUSH
9620: LD_INT 0
9622: ST_TO_ADDR
// repeat game_speed := 1 ;
9623: LD_ADDR_OWVAR 65
9627: PUSH
9628: LD_INT 1
9630: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9631: LD_INT 35
9633: PPUSH
9634: CALL_OW 67
// p := p + 1 ;
9638: LD_ADDR_VAR 0 1
9642: PUSH
9643: LD_VAR 0 1
9647: PUSH
9648: LD_INT 1
9650: PLUS
9651: ST_TO_ADDR
// until p >= 60 ;
9652: LD_VAR 0 1
9656: PUSH
9657: LD_INT 60
9659: GREATEREQUAL
9660: IFFALSE 9623
// game_speed := 4 ;
9662: LD_ADDR_OWVAR 65
9666: PUSH
9667: LD_INT 4
9669: ST_TO_ADDR
// end ;
9670: PPOPN 1
9672: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9673: LD_EXP 1
9677: PUSH
9678: LD_EXP 28
9682: AND
9683: IFFALSE 9829
9685: GO 9687
9687: DISABLE
9688: LD_INT 0
9690: PPUSH
9691: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9692: LD_ADDR_VAR 0 1
9696: PUSH
9697: LD_INT 22
9699: PUSH
9700: LD_OWVAR 2
9704: PUSH
9705: EMPTY
9706: LIST
9707: LIST
9708: PUSH
9709: LD_INT 2
9711: PUSH
9712: LD_INT 30
9714: PUSH
9715: LD_INT 0
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: PUSH
9722: LD_INT 30
9724: PUSH
9725: LD_INT 1
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: LIST
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PPUSH
9741: CALL_OW 69
9745: ST_TO_ADDR
// if not depot then
9746: LD_VAR 0 1
9750: NOT
9751: IFFALSE 9755
// exit ;
9753: GO 9829
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
9755: LD_ADDR_VAR 0 2
9759: PUSH
9760: LD_VAR 0 1
9764: PUSH
9765: LD_INT 1
9767: PPUSH
9768: LD_VAR 0 1
9772: PPUSH
9773: CALL_OW 12
9777: ARRAY
9778: PPUSH
9779: CALL_OW 274
9783: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
9784: LD_VAR 0 2
9788: PPUSH
9789: LD_INT 1
9791: PPUSH
9792: LD_INT 0
9794: PPUSH
9795: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
9799: LD_VAR 0 2
9803: PPUSH
9804: LD_INT 2
9806: PPUSH
9807: LD_INT 0
9809: PPUSH
9810: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
9814: LD_VAR 0 2
9818: PPUSH
9819: LD_INT 3
9821: PPUSH
9822: LD_INT 0
9824: PPUSH
9825: CALL_OW 277
// end ;
9829: PPOPN 2
9831: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
9832: LD_EXP 1
9836: PUSH
9837: LD_EXP 29
9841: AND
9842: IFFALSE 9939
9844: GO 9846
9846: DISABLE
9847: LD_INT 0
9849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
9850: LD_ADDR_VAR 0 1
9854: PUSH
9855: LD_INT 22
9857: PUSH
9858: LD_OWVAR 2
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 21
9869: PUSH
9870: LD_INT 1
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: LD_INT 3
9879: PUSH
9880: LD_INT 23
9882: PUSH
9883: LD_INT 0
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: LIST
9898: PPUSH
9899: CALL_OW 69
9903: ST_TO_ADDR
// if not tmp then
9904: LD_VAR 0 1
9908: NOT
9909: IFFALSE 9913
// exit ;
9911: GO 9939
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
9913: LD_VAR 0 1
9917: PUSH
9918: LD_INT 1
9920: PPUSH
9921: LD_VAR 0 1
9925: PPUSH
9926: CALL_OW 12
9930: ARRAY
9931: PPUSH
9932: LD_INT 200
9934: PPUSH
9935: CALL_OW 234
// end ;
9939: PPOPN 1
9941: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
9942: LD_EXP 1
9946: PUSH
9947: LD_EXP 30
9951: AND
9952: IFFALSE 10031
9954: GO 9956
9956: DISABLE
9957: LD_INT 0
9959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
9960: LD_ADDR_VAR 0 1
9964: PUSH
9965: LD_INT 22
9967: PUSH
9968: LD_OWVAR 2
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: PUSH
9977: LD_INT 21
9979: PUSH
9980: LD_INT 2
9982: PUSH
9983: EMPTY
9984: LIST
9985: LIST
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: PPUSH
9991: CALL_OW 69
9995: ST_TO_ADDR
// if not tmp then
9996: LD_VAR 0 1
10000: NOT
10001: IFFALSE 10005
// exit ;
10003: GO 10031
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10005: LD_VAR 0 1
10009: PUSH
10010: LD_INT 1
10012: PPUSH
10013: LD_VAR 0 1
10017: PPUSH
10018: CALL_OW 12
10022: ARRAY
10023: PPUSH
10024: LD_INT 60
10026: PPUSH
10027: CALL_OW 234
// end ;
10031: PPOPN 1
10033: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10034: LD_EXP 1
10038: PUSH
10039: LD_EXP 31
10043: AND
10044: IFFALSE 10143
10046: GO 10048
10048: DISABLE
10049: LD_INT 0
10051: PPUSH
10052: PPUSH
// begin enable ;
10053: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10054: LD_ADDR_VAR 0 1
10058: PUSH
10059: LD_INT 22
10061: PUSH
10062: LD_OWVAR 2
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PUSH
10071: LD_INT 61
10073: PUSH
10074: EMPTY
10075: LIST
10076: PUSH
10077: LD_INT 33
10079: PUSH
10080: LD_INT 2
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: LIST
10091: PPUSH
10092: CALL_OW 69
10096: ST_TO_ADDR
// if not tmp then
10097: LD_VAR 0 1
10101: NOT
10102: IFFALSE 10106
// exit ;
10104: GO 10143
// for i in tmp do
10106: LD_ADDR_VAR 0 2
10110: PUSH
10111: LD_VAR 0 1
10115: PUSH
10116: FOR_IN
10117: IFFALSE 10141
// if IsControledBy ( i ) then
10119: LD_VAR 0 2
10123: PPUSH
10124: CALL_OW 312
10128: IFFALSE 10139
// ComUnlink ( i ) ;
10130: LD_VAR 0 2
10134: PPUSH
10135: CALL_OW 136
10139: GO 10116
10141: POP
10142: POP
// end ;
10143: PPOPN 2
10145: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10146: LD_EXP 1
10150: PUSH
10151: LD_EXP 32
10155: AND
10156: IFFALSE 10296
10158: GO 10160
10160: DISABLE
10161: LD_INT 0
10163: PPUSH
10164: PPUSH
// begin ToLua ( displayPowell(); ) ;
10165: LD_STRING displayPowell();
10167: PPUSH
10168: CALL_OW 559
// uc_side := 0 ;
10172: LD_ADDR_OWVAR 20
10176: PUSH
10177: LD_INT 0
10179: ST_TO_ADDR
// uc_nation := 2 ;
10180: LD_ADDR_OWVAR 21
10184: PUSH
10185: LD_INT 2
10187: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10188: LD_ADDR_OWVAR 37
10192: PUSH
10193: LD_INT 14
10195: ST_TO_ADDR
// vc_engine := engine_siberite ;
10196: LD_ADDR_OWVAR 39
10200: PUSH
10201: LD_INT 3
10203: ST_TO_ADDR
// vc_control := control_apeman ;
10204: LD_ADDR_OWVAR 38
10208: PUSH
10209: LD_INT 5
10211: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10212: LD_ADDR_OWVAR 40
10216: PUSH
10217: LD_INT 29
10219: ST_TO_ADDR
// un := CreateVehicle ;
10220: LD_ADDR_VAR 0 2
10224: PUSH
10225: CALL_OW 45
10229: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10230: LD_VAR 0 2
10234: PPUSH
10235: LD_INT 1
10237: PPUSH
10238: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10242: LD_INT 35
10244: PPUSH
10245: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10249: LD_VAR 0 2
10253: PPUSH
10254: LD_INT 22
10256: PUSH
10257: LD_OWVAR 2
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PPUSH
10266: CALL_OW 69
10270: PPUSH
10271: LD_VAR 0 2
10275: PPUSH
10276: CALL_OW 74
10280: PPUSH
10281: CALL_OW 115
// until IsDead ( un ) ;
10285: LD_VAR 0 2
10289: PPUSH
10290: CALL_OW 301
10294: IFFALSE 10242
// end ;
10296: PPOPN 2
10298: END
// every 0 0$1 trigger StreamModeActive and sStu do
10299: LD_EXP 1
10303: PUSH
10304: LD_EXP 40
10308: AND
10309: IFFALSE 10325
10311: GO 10313
10313: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10314: LD_STRING displayStucuk();
10316: PPUSH
10317: CALL_OW 559
// ResetFog ;
10321: CALL_OW 335
// end ;
10325: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10326: LD_EXP 1
10330: PUSH
10331: LD_EXP 33
10335: AND
10336: IFFALSE 10477
10338: GO 10340
10340: DISABLE
10341: LD_INT 0
10343: PPUSH
10344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10345: LD_ADDR_VAR 0 2
10349: PUSH
10350: LD_INT 22
10352: PUSH
10353: LD_OWVAR 2
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: PUSH
10362: LD_INT 21
10364: PUSH
10365: LD_INT 1
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PPUSH
10376: CALL_OW 69
10380: ST_TO_ADDR
// if not tmp then
10381: LD_VAR 0 2
10385: NOT
10386: IFFALSE 10390
// exit ;
10388: GO 10477
// un := tmp [ rand ( 1 , tmp ) ] ;
10390: LD_ADDR_VAR 0 1
10394: PUSH
10395: LD_VAR 0 2
10399: PUSH
10400: LD_INT 1
10402: PPUSH
10403: LD_VAR 0 2
10407: PPUSH
10408: CALL_OW 12
10412: ARRAY
10413: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10414: LD_VAR 0 1
10418: PPUSH
10419: LD_INT 0
10421: PPUSH
10422: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10426: LD_VAR 0 1
10430: PPUSH
10431: LD_OWVAR 3
10435: PUSH
10436: LD_VAR 0 1
10440: DIFF
10441: PPUSH
10442: LD_VAR 0 1
10446: PPUSH
10447: CALL_OW 74
10451: PPUSH
10452: CALL_OW 115
// wait ( 0 0$20 ) ;
10456: LD_INT 700
10458: PPUSH
10459: CALL_OW 67
// SetSide ( un , your_side ) ;
10463: LD_VAR 0 1
10467: PPUSH
10468: LD_OWVAR 2
10472: PPUSH
10473: CALL_OW 235
// end ;
10477: PPOPN 2
10479: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10480: LD_EXP 1
10484: PUSH
10485: LD_EXP 34
10489: AND
10490: IFFALSE 10596
10492: GO 10494
10494: DISABLE
10495: LD_INT 0
10497: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10498: LD_ADDR_VAR 0 1
10502: PUSH
10503: LD_INT 22
10505: PUSH
10506: LD_OWVAR 2
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: PUSH
10515: LD_INT 2
10517: PUSH
10518: LD_INT 30
10520: PUSH
10521: LD_INT 0
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: PUSH
10528: LD_INT 30
10530: PUSH
10531: LD_INT 1
10533: PUSH
10534: EMPTY
10535: LIST
10536: LIST
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: LIST
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: PPUSH
10547: CALL_OW 69
10551: ST_TO_ADDR
// if not depot then
10552: LD_VAR 0 1
10556: NOT
10557: IFFALSE 10561
// exit ;
10559: GO 10596
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10561: LD_VAR 0 1
10565: PUSH
10566: LD_INT 1
10568: ARRAY
10569: PPUSH
10570: CALL_OW 250
10574: PPUSH
10575: LD_VAR 0 1
10579: PUSH
10580: LD_INT 1
10582: ARRAY
10583: PPUSH
10584: CALL_OW 251
10588: PPUSH
10589: LD_INT 70
10591: PPUSH
10592: CALL_OW 495
// end ;
10596: PPOPN 1
10598: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10599: LD_EXP 1
10603: PUSH
10604: LD_EXP 35
10608: AND
10609: IFFALSE 10820
10611: GO 10613
10613: DISABLE
10614: LD_INT 0
10616: PPUSH
10617: PPUSH
10618: PPUSH
10619: PPUSH
10620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10621: LD_ADDR_VAR 0 5
10625: PUSH
10626: LD_INT 22
10628: PUSH
10629: LD_OWVAR 2
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: LD_INT 21
10640: PUSH
10641: LD_INT 1
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PPUSH
10652: CALL_OW 69
10656: ST_TO_ADDR
// if not tmp then
10657: LD_VAR 0 5
10661: NOT
10662: IFFALSE 10666
// exit ;
10664: GO 10820
// for i in tmp do
10666: LD_ADDR_VAR 0 1
10670: PUSH
10671: LD_VAR 0 5
10675: PUSH
10676: FOR_IN
10677: IFFALSE 10818
// begin d := rand ( 0 , 5 ) ;
10679: LD_ADDR_VAR 0 4
10683: PUSH
10684: LD_INT 0
10686: PPUSH
10687: LD_INT 5
10689: PPUSH
10690: CALL_OW 12
10694: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10695: LD_ADDR_VAR 0 2
10699: PUSH
10700: LD_VAR 0 1
10704: PPUSH
10705: CALL_OW 250
10709: PPUSH
10710: LD_VAR 0 4
10714: PPUSH
10715: LD_INT 3
10717: PPUSH
10718: LD_INT 12
10720: PPUSH
10721: CALL_OW 12
10725: PPUSH
10726: CALL_OW 272
10730: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
10731: LD_ADDR_VAR 0 3
10735: PUSH
10736: LD_VAR 0 1
10740: PPUSH
10741: CALL_OW 251
10745: PPUSH
10746: LD_VAR 0 4
10750: PPUSH
10751: LD_INT 3
10753: PPUSH
10754: LD_INT 12
10756: PPUSH
10757: CALL_OW 12
10761: PPUSH
10762: CALL_OW 273
10766: ST_TO_ADDR
// if ValidHex ( x , y ) then
10767: LD_VAR 0 2
10771: PPUSH
10772: LD_VAR 0 3
10776: PPUSH
10777: CALL_OW 488
10781: IFFALSE 10816
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
10783: LD_VAR 0 1
10787: PPUSH
10788: LD_VAR 0 2
10792: PPUSH
10793: LD_VAR 0 3
10797: PPUSH
10798: LD_INT 3
10800: PPUSH
10801: LD_INT 6
10803: PPUSH
10804: CALL_OW 12
10808: PPUSH
10809: LD_INT 1
10811: PPUSH
10812: CALL_OW 483
// end ;
10816: GO 10676
10818: POP
10819: POP
// end ;
10820: PPOPN 5
10822: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
10823: LD_EXP 1
10827: PUSH
10828: LD_EXP 36
10832: AND
10833: IFFALSE 10927
10835: GO 10837
10837: DISABLE
10838: LD_INT 0
10840: PPUSH
10841: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
10842: LD_ADDR_VAR 0 2
10846: PUSH
10847: LD_INT 22
10849: PUSH
10850: LD_OWVAR 2
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PUSH
10859: LD_INT 32
10861: PUSH
10862: LD_INT 1
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: PUSH
10869: LD_INT 21
10871: PUSH
10872: LD_INT 2
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: LIST
10883: PPUSH
10884: CALL_OW 69
10888: ST_TO_ADDR
// if not tmp then
10889: LD_VAR 0 2
10893: NOT
10894: IFFALSE 10898
// exit ;
10896: GO 10927
// for i in tmp do
10898: LD_ADDR_VAR 0 1
10902: PUSH
10903: LD_VAR 0 2
10907: PUSH
10908: FOR_IN
10909: IFFALSE 10925
// SetFuel ( i , 0 ) ;
10911: LD_VAR 0 1
10915: PPUSH
10916: LD_INT 0
10918: PPUSH
10919: CALL_OW 240
10923: GO 10908
10925: POP
10926: POP
// end ;
10927: PPOPN 2
10929: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
10930: LD_EXP 1
10934: PUSH
10935: LD_EXP 37
10939: AND
10940: IFFALSE 11006
10942: GO 10944
10944: DISABLE
10945: LD_INT 0
10947: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
10948: LD_ADDR_VAR 0 1
10952: PUSH
10953: LD_INT 22
10955: PUSH
10956: LD_OWVAR 2
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: PUSH
10965: LD_INT 30
10967: PUSH
10968: LD_INT 29
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: PPUSH
10979: CALL_OW 69
10983: ST_TO_ADDR
// if not tmp then
10984: LD_VAR 0 1
10988: NOT
10989: IFFALSE 10993
// exit ;
10991: GO 11006
// DestroyUnit ( tmp [ 1 ] ) ;
10993: LD_VAR 0 1
10997: PUSH
10998: LD_INT 1
11000: ARRAY
11001: PPUSH
11002: CALL_OW 65
// end ;
11006: PPOPN 1
11008: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11009: LD_EXP 1
11013: PUSH
11014: LD_EXP 39
11018: AND
11019: IFFALSE 11148
11021: GO 11023
11023: DISABLE
11024: LD_INT 0
11026: PPUSH
// begin uc_side := 0 ;
11027: LD_ADDR_OWVAR 20
11031: PUSH
11032: LD_INT 0
11034: ST_TO_ADDR
// uc_nation := nation_arabian ;
11035: LD_ADDR_OWVAR 21
11039: PUSH
11040: LD_INT 2
11042: ST_TO_ADDR
// hc_gallery :=  ;
11043: LD_ADDR_OWVAR 33
11047: PUSH
11048: LD_STRING 
11050: ST_TO_ADDR
// hc_name :=  ;
11051: LD_ADDR_OWVAR 26
11055: PUSH
11056: LD_STRING 
11058: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11059: LD_INT 1
11061: PPUSH
11062: LD_INT 11
11064: PPUSH
11065: LD_INT 10
11067: PPUSH
11068: CALL_OW 380
// un := CreateHuman ;
11072: LD_ADDR_VAR 0 1
11076: PUSH
11077: CALL_OW 44
11081: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11082: LD_VAR 0 1
11086: PPUSH
11087: LD_INT 1
11089: PPUSH
11090: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11094: LD_INT 35
11096: PPUSH
11097: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11101: LD_VAR 0 1
11105: PPUSH
11106: LD_INT 22
11108: PUSH
11109: LD_OWVAR 2
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: PPUSH
11118: CALL_OW 69
11122: PPUSH
11123: LD_VAR 0 1
11127: PPUSH
11128: CALL_OW 74
11132: PPUSH
11133: CALL_OW 115
// until IsDead ( un ) ;
11137: LD_VAR 0 1
11141: PPUSH
11142: CALL_OW 301
11146: IFFALSE 11094
// end ;
11148: PPOPN 1
11150: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11151: LD_EXP 1
11155: PUSH
11156: LD_EXP 41
11160: AND
11161: IFFALSE 11173
11163: GO 11165
11165: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11166: LD_STRING earthquake(getX(game), 0, 32)
11168: PPUSH
11169: CALL_OW 559
11173: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11174: LD_EXP 1
11178: PUSH
11179: LD_EXP 42
11183: AND
11184: IFFALSE 11275
11186: GO 11188
11188: DISABLE
11189: LD_INT 0
11191: PPUSH
// begin enable ;
11192: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11193: LD_ADDR_VAR 0 1
11197: PUSH
11198: LD_INT 22
11200: PUSH
11201: LD_OWVAR 2
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: PUSH
11210: LD_INT 21
11212: PUSH
11213: LD_INT 2
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PUSH
11220: LD_INT 33
11222: PUSH
11223: LD_INT 3
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: LIST
11234: PPUSH
11235: CALL_OW 69
11239: ST_TO_ADDR
// if not tmp then
11240: LD_VAR 0 1
11244: NOT
11245: IFFALSE 11249
// exit ;
11247: GO 11275
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11249: LD_VAR 0 1
11253: PUSH
11254: LD_INT 1
11256: PPUSH
11257: LD_VAR 0 1
11261: PPUSH
11262: CALL_OW 12
11266: ARRAY
11267: PPUSH
11268: LD_INT 1
11270: PPUSH
11271: CALL_OW 234
// end ;
11275: PPOPN 1
11277: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11278: LD_EXP 1
11282: PUSH
11283: LD_EXP 43
11287: AND
11288: IFFALSE 11429
11290: GO 11292
11292: DISABLE
11293: LD_INT 0
11295: PPUSH
11296: PPUSH
11297: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11298: LD_ADDR_VAR 0 3
11302: PUSH
11303: LD_INT 22
11305: PUSH
11306: LD_OWVAR 2
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: PUSH
11315: LD_INT 25
11317: PUSH
11318: LD_INT 1
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PPUSH
11329: CALL_OW 69
11333: ST_TO_ADDR
// if not tmp then
11334: LD_VAR 0 3
11338: NOT
11339: IFFALSE 11343
// exit ;
11341: GO 11429
// un := tmp [ rand ( 1 , tmp ) ] ;
11343: LD_ADDR_VAR 0 2
11347: PUSH
11348: LD_VAR 0 3
11352: PUSH
11353: LD_INT 1
11355: PPUSH
11356: LD_VAR 0 3
11360: PPUSH
11361: CALL_OW 12
11365: ARRAY
11366: ST_TO_ADDR
// if Crawls ( un ) then
11367: LD_VAR 0 2
11371: PPUSH
11372: CALL_OW 318
11376: IFFALSE 11387
// ComWalk ( un ) ;
11378: LD_VAR 0 2
11382: PPUSH
11383: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11387: LD_VAR 0 2
11391: PPUSH
11392: LD_INT 9
11394: PPUSH
11395: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11399: LD_INT 28
11401: PPUSH
11402: LD_OWVAR 2
11406: PPUSH
11407: LD_INT 2
11409: PPUSH
11410: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11414: LD_INT 29
11416: PPUSH
11417: LD_OWVAR 2
11421: PPUSH
11422: LD_INT 2
11424: PPUSH
11425: CALL_OW 322
// end ;
11429: PPOPN 3
11431: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11432: LD_EXP 1
11436: PUSH
11437: LD_EXP 44
11441: AND
11442: IFFALSE 11553
11444: GO 11446
11446: DISABLE
11447: LD_INT 0
11449: PPUSH
11450: PPUSH
11451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11452: LD_ADDR_VAR 0 3
11456: PUSH
11457: LD_INT 22
11459: PUSH
11460: LD_OWVAR 2
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: PUSH
11469: LD_INT 25
11471: PUSH
11472: LD_INT 1
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PPUSH
11483: CALL_OW 69
11487: ST_TO_ADDR
// if not tmp then
11488: LD_VAR 0 3
11492: NOT
11493: IFFALSE 11497
// exit ;
11495: GO 11553
// un := tmp [ rand ( 1 , tmp ) ] ;
11497: LD_ADDR_VAR 0 2
11501: PUSH
11502: LD_VAR 0 3
11506: PUSH
11507: LD_INT 1
11509: PPUSH
11510: LD_VAR 0 3
11514: PPUSH
11515: CALL_OW 12
11519: ARRAY
11520: ST_TO_ADDR
// if Crawls ( un ) then
11521: LD_VAR 0 2
11525: PPUSH
11526: CALL_OW 318
11530: IFFALSE 11541
// ComWalk ( un ) ;
11532: LD_VAR 0 2
11536: PPUSH
11537: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11541: LD_VAR 0 2
11545: PPUSH
11546: LD_INT 8
11548: PPUSH
11549: CALL_OW 336
// end ;
11553: PPOPN 3
11555: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11556: LD_EXP 1
11560: PUSH
11561: LD_EXP 45
11565: AND
11566: IFFALSE 11710
11568: GO 11570
11570: DISABLE
11571: LD_INT 0
11573: PPUSH
11574: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11575: LD_ADDR_VAR 0 2
11579: PUSH
11580: LD_INT 22
11582: PUSH
11583: LD_OWVAR 2
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: PUSH
11592: LD_INT 21
11594: PUSH
11595: LD_INT 2
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: PUSH
11602: LD_INT 2
11604: PUSH
11605: LD_INT 34
11607: PUSH
11608: LD_INT 12
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 34
11617: PUSH
11618: LD_INT 51
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: PUSH
11625: LD_INT 34
11627: PUSH
11628: LD_INT 32
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: LIST
11645: PPUSH
11646: CALL_OW 69
11650: ST_TO_ADDR
// if not tmp then
11651: LD_VAR 0 2
11655: NOT
11656: IFFALSE 11660
// exit ;
11658: GO 11710
// for i in tmp do
11660: LD_ADDR_VAR 0 1
11664: PUSH
11665: LD_VAR 0 2
11669: PUSH
11670: FOR_IN
11671: IFFALSE 11708
// if GetCargo ( i , mat_artifact ) = 0 then
11673: LD_VAR 0 1
11677: PPUSH
11678: LD_INT 4
11680: PPUSH
11681: CALL_OW 289
11685: PUSH
11686: LD_INT 0
11688: EQUAL
11689: IFFALSE 11706
// SetCargo ( i , mat_siberit , 100 ) ;
11691: LD_VAR 0 1
11695: PPUSH
11696: LD_INT 3
11698: PPUSH
11699: LD_INT 100
11701: PPUSH
11702: CALL_OW 290
11706: GO 11670
11708: POP
11709: POP
// end ;
11710: PPOPN 2
11712: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
11713: LD_EXP 1
11717: PUSH
11718: LD_EXP 46
11722: AND
11723: IFFALSE 11906
11725: GO 11727
11727: DISABLE
11728: LD_INT 0
11730: PPUSH
11731: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
11732: LD_ADDR_VAR 0 2
11736: PUSH
11737: LD_INT 22
11739: PUSH
11740: LD_OWVAR 2
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: PPUSH
11749: CALL_OW 69
11753: ST_TO_ADDR
// if not tmp then
11754: LD_VAR 0 2
11758: NOT
11759: IFFALSE 11763
// exit ;
11761: GO 11906
// for i := 1 to 2 do
11763: LD_ADDR_VAR 0 1
11767: PUSH
11768: DOUBLE
11769: LD_INT 1
11771: DEC
11772: ST_TO_ADDR
11773: LD_INT 2
11775: PUSH
11776: FOR_TO
11777: IFFALSE 11904
// begin uc_side := your_side ;
11779: LD_ADDR_OWVAR 20
11783: PUSH
11784: LD_OWVAR 2
11788: ST_TO_ADDR
// uc_nation := nation_american ;
11789: LD_ADDR_OWVAR 21
11793: PUSH
11794: LD_INT 1
11796: ST_TO_ADDR
// vc_chassis := us_morphling ;
11797: LD_ADDR_OWVAR 37
11801: PUSH
11802: LD_INT 5
11804: ST_TO_ADDR
// vc_engine := engine_siberite ;
11805: LD_ADDR_OWVAR 39
11809: PUSH
11810: LD_INT 3
11812: ST_TO_ADDR
// vc_control := control_computer ;
11813: LD_ADDR_OWVAR 38
11817: PUSH
11818: LD_INT 3
11820: ST_TO_ADDR
// vc_weapon := us_double_laser ;
11821: LD_ADDR_OWVAR 40
11825: PUSH
11826: LD_INT 10
11828: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
11829: LD_VAR 0 2
11833: PUSH
11834: LD_INT 1
11836: ARRAY
11837: PPUSH
11838: CALL_OW 310
11842: NOT
11843: IFFALSE 11890
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
11845: CALL_OW 45
11849: PPUSH
11850: LD_VAR 0 2
11854: PUSH
11855: LD_INT 1
11857: ARRAY
11858: PPUSH
11859: CALL_OW 250
11863: PPUSH
11864: LD_VAR 0 2
11868: PUSH
11869: LD_INT 1
11871: ARRAY
11872: PPUSH
11873: CALL_OW 251
11877: PPUSH
11878: LD_INT 12
11880: PPUSH
11881: LD_INT 1
11883: PPUSH
11884: CALL_OW 50
11888: GO 11902
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
11890: CALL_OW 45
11894: PPUSH
11895: LD_INT 1
11897: PPUSH
11898: CALL_OW 51
// end ;
11902: GO 11776
11904: POP
11905: POP
// end ;
11906: PPOPN 2
11908: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
11909: LD_EXP 1
11913: PUSH
11914: LD_EXP 47
11918: AND
11919: IFFALSE 12141
11921: GO 11923
11923: DISABLE
11924: LD_INT 0
11926: PPUSH
11927: PPUSH
11928: PPUSH
11929: PPUSH
11930: PPUSH
11931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11932: LD_ADDR_VAR 0 6
11936: PUSH
11937: LD_INT 22
11939: PUSH
11940: LD_OWVAR 2
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: PUSH
11949: LD_INT 21
11951: PUSH
11952: LD_INT 1
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: PUSH
11959: LD_INT 3
11961: PUSH
11962: LD_INT 23
11964: PUSH
11965: LD_INT 0
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: LIST
11980: PPUSH
11981: CALL_OW 69
11985: ST_TO_ADDR
// if not tmp then
11986: LD_VAR 0 6
11990: NOT
11991: IFFALSE 11995
// exit ;
11993: GO 12141
// s1 := rand ( 1 , 4 ) ;
11995: LD_ADDR_VAR 0 2
11999: PUSH
12000: LD_INT 1
12002: PPUSH
12003: LD_INT 4
12005: PPUSH
12006: CALL_OW 12
12010: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12011: LD_ADDR_VAR 0 4
12015: PUSH
12016: LD_VAR 0 6
12020: PUSH
12021: LD_INT 1
12023: ARRAY
12024: PPUSH
12025: LD_VAR 0 2
12029: PPUSH
12030: CALL_OW 259
12034: ST_TO_ADDR
// if s1 = 1 then
12035: LD_VAR 0 2
12039: PUSH
12040: LD_INT 1
12042: EQUAL
12043: IFFALSE 12063
// s2 := rand ( 2 , 4 ) else
12045: LD_ADDR_VAR 0 3
12049: PUSH
12050: LD_INT 2
12052: PPUSH
12053: LD_INT 4
12055: PPUSH
12056: CALL_OW 12
12060: ST_TO_ADDR
12061: GO 12071
// s2 := 1 ;
12063: LD_ADDR_VAR 0 3
12067: PUSH
12068: LD_INT 1
12070: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12071: LD_ADDR_VAR 0 5
12075: PUSH
12076: LD_VAR 0 6
12080: PUSH
12081: LD_INT 1
12083: ARRAY
12084: PPUSH
12085: LD_VAR 0 3
12089: PPUSH
12090: CALL_OW 259
12094: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12095: LD_VAR 0 6
12099: PUSH
12100: LD_INT 1
12102: ARRAY
12103: PPUSH
12104: LD_VAR 0 2
12108: PPUSH
12109: LD_VAR 0 5
12113: PPUSH
12114: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12118: LD_VAR 0 6
12122: PUSH
12123: LD_INT 1
12125: ARRAY
12126: PPUSH
12127: LD_VAR 0 3
12131: PPUSH
12132: LD_VAR 0 4
12136: PPUSH
12137: CALL_OW 237
// end ;
12141: PPOPN 6
12143: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12144: LD_EXP 1
12148: PUSH
12149: LD_EXP 48
12153: AND
12154: IFFALSE 12233
12156: GO 12158
12158: DISABLE
12159: LD_INT 0
12161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12162: LD_ADDR_VAR 0 1
12166: PUSH
12167: LD_INT 22
12169: PUSH
12170: LD_OWVAR 2
12174: PUSH
12175: EMPTY
12176: LIST
12177: LIST
12178: PUSH
12179: LD_INT 30
12181: PUSH
12182: LD_INT 3
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: PPUSH
12193: CALL_OW 69
12197: ST_TO_ADDR
// if not tmp then
12198: LD_VAR 0 1
12202: NOT
12203: IFFALSE 12207
// exit ;
12205: GO 12233
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12207: LD_VAR 0 1
12211: PUSH
12212: LD_INT 1
12214: PPUSH
12215: LD_VAR 0 1
12219: PPUSH
12220: CALL_OW 12
12224: ARRAY
12225: PPUSH
12226: LD_INT 1
12228: PPUSH
12229: CALL_OW 234
// end ;
12233: PPOPN 1
12235: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12236: LD_EXP 1
12240: PUSH
12241: LD_EXP 49
12245: AND
12246: IFFALSE 12358
12248: GO 12250
12250: DISABLE
12251: LD_INT 0
12253: PPUSH
12254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12255: LD_ADDR_VAR 0 2
12259: PUSH
12260: LD_INT 22
12262: PUSH
12263: LD_OWVAR 2
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PUSH
12272: LD_INT 2
12274: PUSH
12275: LD_INT 30
12277: PUSH
12278: LD_INT 27
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: PUSH
12285: LD_INT 30
12287: PUSH
12288: LD_INT 26
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: PUSH
12295: LD_INT 30
12297: PUSH
12298: LD_INT 28
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: PUSH
12305: EMPTY
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: PPUSH
12315: CALL_OW 69
12319: ST_TO_ADDR
// if not tmp then
12320: LD_VAR 0 2
12324: NOT
12325: IFFALSE 12329
// exit ;
12327: GO 12358
// for i in tmp do
12329: LD_ADDR_VAR 0 1
12333: PUSH
12334: LD_VAR 0 2
12338: PUSH
12339: FOR_IN
12340: IFFALSE 12356
// SetLives ( i , 1 ) ;
12342: LD_VAR 0 1
12346: PPUSH
12347: LD_INT 1
12349: PPUSH
12350: CALL_OW 234
12354: GO 12339
12356: POP
12357: POP
// end ;
12358: PPOPN 2
12360: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12361: LD_EXP 1
12365: PUSH
12366: LD_EXP 50
12370: AND
12371: IFFALSE 12658
12373: GO 12375
12375: DISABLE
12376: LD_INT 0
12378: PPUSH
12379: PPUSH
12380: PPUSH
// begin i := rand ( 1 , 7 ) ;
12381: LD_ADDR_VAR 0 1
12385: PUSH
12386: LD_INT 1
12388: PPUSH
12389: LD_INT 7
12391: PPUSH
12392: CALL_OW 12
12396: ST_TO_ADDR
// case i of 1 :
12397: LD_VAR 0 1
12401: PUSH
12402: LD_INT 1
12404: DOUBLE
12405: EQUAL
12406: IFTRUE 12410
12408: GO 12420
12410: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12411: LD_STRING earthquake(getX(game), 0, 32)
12413: PPUSH
12414: CALL_OW 559
12418: GO 12658
12420: LD_INT 2
12422: DOUBLE
12423: EQUAL
12424: IFTRUE 12428
12426: GO 12442
12428: POP
// begin ToLua ( displayStucuk(); ) ;
12429: LD_STRING displayStucuk();
12431: PPUSH
12432: CALL_OW 559
// ResetFog ;
12436: CALL_OW 335
// end ; 3 :
12440: GO 12658
12442: LD_INT 3
12444: DOUBLE
12445: EQUAL
12446: IFTRUE 12450
12448: GO 12554
12450: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12451: LD_ADDR_VAR 0 2
12455: PUSH
12456: LD_INT 22
12458: PUSH
12459: LD_OWVAR 2
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: PUSH
12468: LD_INT 25
12470: PUSH
12471: LD_INT 1
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PPUSH
12482: CALL_OW 69
12486: ST_TO_ADDR
// if not tmp then
12487: LD_VAR 0 2
12491: NOT
12492: IFFALSE 12496
// exit ;
12494: GO 12658
// un := tmp [ rand ( 1 , tmp ) ] ;
12496: LD_ADDR_VAR 0 3
12500: PUSH
12501: LD_VAR 0 2
12505: PUSH
12506: LD_INT 1
12508: PPUSH
12509: LD_VAR 0 2
12513: PPUSH
12514: CALL_OW 12
12518: ARRAY
12519: ST_TO_ADDR
// if Crawls ( un ) then
12520: LD_VAR 0 3
12524: PPUSH
12525: CALL_OW 318
12529: IFFALSE 12540
// ComWalk ( un ) ;
12531: LD_VAR 0 3
12535: PPUSH
12536: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12540: LD_VAR 0 3
12544: PPUSH
12545: LD_INT 8
12547: PPUSH
12548: CALL_OW 336
// end ; 4 :
12552: GO 12658
12554: LD_INT 4
12556: DOUBLE
12557: EQUAL
12558: IFTRUE 12562
12560: GO 12636
12562: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12563: LD_ADDR_VAR 0 2
12567: PUSH
12568: LD_INT 22
12570: PUSH
12571: LD_OWVAR 2
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PUSH
12580: LD_INT 30
12582: PUSH
12583: LD_INT 29
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: PPUSH
12594: CALL_OW 69
12598: ST_TO_ADDR
// if not tmp then
12599: LD_VAR 0 2
12603: NOT
12604: IFFALSE 12608
// exit ;
12606: GO 12658
// CenterNowOnUnits ( tmp [ 1 ] ) ;
12608: LD_VAR 0 2
12612: PUSH
12613: LD_INT 1
12615: ARRAY
12616: PPUSH
12617: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
12621: LD_VAR 0 2
12625: PUSH
12626: LD_INT 1
12628: ARRAY
12629: PPUSH
12630: CALL_OW 65
// end ; 5 .. 7 :
12634: GO 12658
12636: LD_INT 5
12638: DOUBLE
12639: GREATEREQUAL
12640: IFFALSE 12648
12642: LD_INT 7
12644: DOUBLE
12645: LESSEQUAL
12646: IFTRUE 12650
12648: GO 12657
12650: POP
// StreamSibBomb ; end ;
12651: CALL 8895 0 0
12655: GO 12658
12657: POP
// end ;
12658: PPOPN 3
12660: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12661: LD_EXP 1
12665: PUSH
12666: LD_EXP 51
12670: AND
12671: IFFALSE 12827
12673: GO 12675
12675: DISABLE
12676: LD_INT 0
12678: PPUSH
12679: PPUSH
12680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12681: LD_ADDR_VAR 0 2
12685: PUSH
12686: LD_INT 81
12688: PUSH
12689: LD_OWVAR 2
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: PUSH
12698: LD_INT 2
12700: PUSH
12701: LD_INT 21
12703: PUSH
12704: LD_INT 1
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: PUSH
12711: LD_INT 21
12713: PUSH
12714: LD_INT 2
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: LIST
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: PPUSH
12730: CALL_OW 69
12734: ST_TO_ADDR
// if not tmp then
12735: LD_VAR 0 2
12739: NOT
12740: IFFALSE 12744
// exit ;
12742: GO 12827
// p := 0 ;
12744: LD_ADDR_VAR 0 3
12748: PUSH
12749: LD_INT 0
12751: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12752: LD_INT 35
12754: PPUSH
12755: CALL_OW 67
// p := p + 1 ;
12759: LD_ADDR_VAR 0 3
12763: PUSH
12764: LD_VAR 0 3
12768: PUSH
12769: LD_INT 1
12771: PLUS
12772: ST_TO_ADDR
// for i in tmp do
12773: LD_ADDR_VAR 0 1
12777: PUSH
12778: LD_VAR 0 2
12782: PUSH
12783: FOR_IN
12784: IFFALSE 12815
// if GetLives ( i ) < 1000 then
12786: LD_VAR 0 1
12790: PPUSH
12791: CALL_OW 256
12795: PUSH
12796: LD_INT 1000
12798: LESS
12799: IFFALSE 12813
// SetLives ( i , 1000 ) ;
12801: LD_VAR 0 1
12805: PPUSH
12806: LD_INT 1000
12808: PPUSH
12809: CALL_OW 234
12813: GO 12783
12815: POP
12816: POP
// until p > 20 ;
12817: LD_VAR 0 3
12821: PUSH
12822: LD_INT 20
12824: GREATER
12825: IFFALSE 12752
// end ;
12827: PPOPN 3
12829: END
// every 0 0$1 trigger StreamModeActive and sTime do
12830: LD_EXP 1
12834: PUSH
12835: LD_EXP 52
12839: AND
12840: IFFALSE 12875
12842: GO 12844
12844: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
12845: LD_INT 28
12847: PPUSH
12848: LD_OWVAR 2
12852: PPUSH
12853: LD_INT 2
12855: PPUSH
12856: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
12860: LD_INT 30
12862: PPUSH
12863: LD_OWVAR 2
12867: PPUSH
12868: LD_INT 2
12870: PPUSH
12871: CALL_OW 322
// end ;
12875: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
12876: LD_EXP 1
12880: PUSH
12881: LD_EXP 53
12885: AND
12886: IFFALSE 13007
12888: GO 12890
12890: DISABLE
12891: LD_INT 0
12893: PPUSH
12894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12895: LD_ADDR_VAR 0 2
12899: PUSH
12900: LD_INT 22
12902: PUSH
12903: LD_OWVAR 2
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PUSH
12912: LD_INT 21
12914: PUSH
12915: LD_INT 1
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: PUSH
12922: LD_INT 3
12924: PUSH
12925: LD_INT 23
12927: PUSH
12928: LD_INT 0
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: LIST
12943: PPUSH
12944: CALL_OW 69
12948: ST_TO_ADDR
// if not tmp then
12949: LD_VAR 0 2
12953: NOT
12954: IFFALSE 12958
// exit ;
12956: GO 13007
// for i in tmp do
12958: LD_ADDR_VAR 0 1
12962: PUSH
12963: LD_VAR 0 2
12967: PUSH
12968: FOR_IN
12969: IFFALSE 13005
// begin if Crawls ( i ) then
12971: LD_VAR 0 1
12975: PPUSH
12976: CALL_OW 318
12980: IFFALSE 12991
// ComWalk ( i ) ;
12982: LD_VAR 0 1
12986: PPUSH
12987: CALL_OW 138
// SetClass ( i , 2 ) ;
12991: LD_VAR 0 1
12995: PPUSH
12996: LD_INT 2
12998: PPUSH
12999: CALL_OW 336
// end ;
13003: GO 12968
13005: POP
13006: POP
// end ;
13007: PPOPN 2
13009: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13010: LD_EXP 1
13014: PUSH
13015: LD_EXP 54
13019: AND
13020: IFFALSE 13308
13022: GO 13024
13024: DISABLE
13025: LD_INT 0
13027: PPUSH
13028: PPUSH
13029: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13030: LD_OWVAR 2
13034: PPUSH
13035: LD_INT 9
13037: PPUSH
13038: LD_INT 1
13040: PPUSH
13041: LD_INT 1
13043: PPUSH
13044: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13048: LD_INT 9
13050: PPUSH
13051: LD_OWVAR 2
13055: PPUSH
13056: CALL_OW 343
// uc_side := 9 ;
13060: LD_ADDR_OWVAR 20
13064: PUSH
13065: LD_INT 9
13067: ST_TO_ADDR
// uc_nation := 2 ;
13068: LD_ADDR_OWVAR 21
13072: PUSH
13073: LD_INT 2
13075: ST_TO_ADDR
// hc_name := Dark Warrior ;
13076: LD_ADDR_OWVAR 26
13080: PUSH
13081: LD_STRING Dark Warrior
13083: ST_TO_ADDR
// hc_gallery :=  ;
13084: LD_ADDR_OWVAR 33
13088: PUSH
13089: LD_STRING 
13091: ST_TO_ADDR
// hc_noskilllimit := true ;
13092: LD_ADDR_OWVAR 76
13096: PUSH
13097: LD_INT 1
13099: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13100: LD_ADDR_OWVAR 31
13104: PUSH
13105: LD_INT 30
13107: PUSH
13108: LD_INT 30
13110: PUSH
13111: LD_INT 30
13113: PUSH
13114: LD_INT 30
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: ST_TO_ADDR
// un := CreateHuman ;
13123: LD_ADDR_VAR 0 3
13127: PUSH
13128: CALL_OW 44
13132: ST_TO_ADDR
// hc_noskilllimit := false ;
13133: LD_ADDR_OWVAR 76
13137: PUSH
13138: LD_INT 0
13140: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13141: LD_VAR 0 3
13145: PPUSH
13146: LD_INT 1
13148: PPUSH
13149: CALL_OW 51
// ToLua ( playRanger() ) ;
13153: LD_STRING playRanger()
13155: PPUSH
13156: CALL_OW 559
// p := 0 ;
13160: LD_ADDR_VAR 0 2
13164: PUSH
13165: LD_INT 0
13167: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13168: LD_INT 35
13170: PPUSH
13171: CALL_OW 67
// p := p + 1 ;
13175: LD_ADDR_VAR 0 2
13179: PUSH
13180: LD_VAR 0 2
13184: PUSH
13185: LD_INT 1
13187: PLUS
13188: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13189: LD_VAR 0 3
13193: PPUSH
13194: CALL_OW 256
13198: PUSH
13199: LD_INT 1000
13201: LESS
13202: IFFALSE 13216
// SetLives ( un , 1000 ) ;
13204: LD_VAR 0 3
13208: PPUSH
13209: LD_INT 1000
13211: PPUSH
13212: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13216: LD_VAR 0 3
13220: PPUSH
13221: LD_INT 81
13223: PUSH
13224: LD_OWVAR 2
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: PUSH
13233: LD_INT 91
13235: PUSH
13236: LD_VAR 0 3
13240: PUSH
13241: LD_INT 30
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: LIST
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: PPUSH
13253: CALL_OW 69
13257: PPUSH
13258: LD_VAR 0 3
13262: PPUSH
13263: CALL_OW 74
13267: PPUSH
13268: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
13272: LD_VAR 0 2
13276: PUSH
13277: LD_INT 80
13279: GREATER
13280: PUSH
13281: LD_VAR 0 3
13285: PPUSH
13286: CALL_OW 301
13290: OR
13291: IFFALSE 13168
// if un then
13293: LD_VAR 0 3
13297: IFFALSE 13308
// RemoveUnit ( un ) ;
13299: LD_VAR 0 3
13303: PPUSH
13304: CALL_OW 64
// end ;
13308: PPOPN 3
13310: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
13311: LD_EXP 55
13315: IFFALSE 13431
13317: GO 13319
13319: DISABLE
13320: LD_INT 0
13322: PPUSH
13323: PPUSH
13324: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13325: LD_ADDR_VAR 0 2
13329: PUSH
13330: LD_INT 81
13332: PUSH
13333: LD_OWVAR 2
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PUSH
13342: LD_INT 21
13344: PUSH
13345: LD_INT 1
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: PPUSH
13356: CALL_OW 69
13360: ST_TO_ADDR
// ToLua ( playComputer() ) ;
13361: LD_STRING playComputer()
13363: PPUSH
13364: CALL_OW 559
// if not tmp then
13368: LD_VAR 0 2
13372: NOT
13373: IFFALSE 13377
// exit ;
13375: GO 13431
// for i in tmp do
13377: LD_ADDR_VAR 0 1
13381: PUSH
13382: LD_VAR 0 2
13386: PUSH
13387: FOR_IN
13388: IFFALSE 13429
// for j := 1 to 4 do
13390: LD_ADDR_VAR 0 3
13394: PUSH
13395: DOUBLE
13396: LD_INT 1
13398: DEC
13399: ST_TO_ADDR
13400: LD_INT 4
13402: PUSH
13403: FOR_TO
13404: IFFALSE 13425
// SetSkill ( i , j , 10 ) ;
13406: LD_VAR 0 1
13410: PPUSH
13411: LD_VAR 0 3
13415: PPUSH
13416: LD_INT 10
13418: PPUSH
13419: CALL_OW 237
13423: GO 13403
13425: POP
13426: POP
13427: GO 13387
13429: POP
13430: POP
// end ;
13431: PPOPN 3
13433: END
// every 0 0$1 trigger s30 do var i , tmp ;
13434: LD_EXP 56
13438: IFFALSE 13507
13440: GO 13442
13442: DISABLE
13443: LD_INT 0
13445: PPUSH
13446: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13447: LD_ADDR_VAR 0 2
13451: PUSH
13452: LD_INT 22
13454: PUSH
13455: LD_OWVAR 2
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PPUSH
13464: CALL_OW 69
13468: ST_TO_ADDR
// if not tmp then
13469: LD_VAR 0 2
13473: NOT
13474: IFFALSE 13478
// exit ;
13476: GO 13507
// for i in tmp do
13478: LD_ADDR_VAR 0 1
13482: PUSH
13483: LD_VAR 0 2
13487: PUSH
13488: FOR_IN
13489: IFFALSE 13505
// SetLives ( i , 300 ) ;
13491: LD_VAR 0 1
13495: PPUSH
13496: LD_INT 300
13498: PPUSH
13499: CALL_OW 234
13503: GO 13488
13505: POP
13506: POP
// end ;
13507: PPOPN 2
13509: END
// every 0 0$1 trigger s60 do var i , tmp ;
13510: LD_EXP 57
13514: IFFALSE 13583
13516: GO 13518
13518: DISABLE
13519: LD_INT 0
13521: PPUSH
13522: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13523: LD_ADDR_VAR 0 2
13527: PUSH
13528: LD_INT 22
13530: PUSH
13531: LD_OWVAR 2
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PPUSH
13540: CALL_OW 69
13544: ST_TO_ADDR
// if not tmp then
13545: LD_VAR 0 2
13549: NOT
13550: IFFALSE 13554
// exit ;
13552: GO 13583
// for i in tmp do
13554: LD_ADDR_VAR 0 1
13558: PUSH
13559: LD_VAR 0 2
13563: PUSH
13564: FOR_IN
13565: IFFALSE 13581
// SetLives ( i , 600 ) ;
13567: LD_VAR 0 1
13571: PPUSH
13572: LD_INT 600
13574: PPUSH
13575: CALL_OW 234
13579: GO 13564
13581: POP
13582: POP
// end ;
13583: PPOPN 2
13585: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13586: LD_INT 0
13588: PPUSH
// case cmd of 301 :
13589: LD_VAR 0 1
13593: PUSH
13594: LD_INT 301
13596: DOUBLE
13597: EQUAL
13598: IFTRUE 13602
13600: GO 13634
13602: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
13603: LD_VAR 0 6
13607: PPUSH
13608: LD_VAR 0 7
13612: PPUSH
13613: LD_VAR 0 8
13617: PPUSH
13618: LD_VAR 0 4
13622: PPUSH
13623: LD_VAR 0 5
13627: PPUSH
13628: CALL 14835 0 5
13632: GO 13755
13634: LD_INT 302
13636: DOUBLE
13637: EQUAL
13638: IFTRUE 13642
13640: GO 13679
13642: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
13643: LD_VAR 0 6
13647: PPUSH
13648: LD_VAR 0 7
13652: PPUSH
13653: LD_VAR 0 8
13657: PPUSH
13658: LD_VAR 0 9
13662: PPUSH
13663: LD_VAR 0 4
13667: PPUSH
13668: LD_VAR 0 5
13672: PPUSH
13673: CALL 14926 0 6
13677: GO 13755
13679: LD_INT 303
13681: DOUBLE
13682: EQUAL
13683: IFTRUE 13687
13685: GO 13724
13687: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
13688: LD_VAR 0 6
13692: PPUSH
13693: LD_VAR 0 7
13697: PPUSH
13698: LD_VAR 0 8
13702: PPUSH
13703: LD_VAR 0 9
13707: PPUSH
13708: LD_VAR 0 4
13712: PPUSH
13713: LD_VAR 0 5
13717: PPUSH
13718: CALL 13760 0 6
13722: GO 13755
13724: LD_INT 304
13726: DOUBLE
13727: EQUAL
13728: IFTRUE 13732
13730: GO 13754
13732: POP
// hHackTeleport ( unit , x , y ) ; end ;
13733: LD_VAR 0 2
13737: PPUSH
13738: LD_VAR 0 4
13742: PPUSH
13743: LD_VAR 0 5
13747: PPUSH
13748: CALL 15519 0 3
13752: GO 13755
13754: POP
// end ;
13755: LD_VAR 0 12
13759: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
13760: LD_INT 0
13762: PPUSH
13763: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
13764: LD_VAR 0 1
13768: PUSH
13769: LD_INT 1
13771: LESS
13772: PUSH
13773: LD_VAR 0 1
13777: PUSH
13778: LD_INT 3
13780: GREATER
13781: OR
13782: PUSH
13783: LD_VAR 0 5
13787: PPUSH
13788: LD_VAR 0 6
13792: PPUSH
13793: CALL_OW 428
13797: OR
13798: IFFALSE 13802
// exit ;
13800: GO 14522
// uc_side := your_side ;
13802: LD_ADDR_OWVAR 20
13806: PUSH
13807: LD_OWVAR 2
13811: ST_TO_ADDR
// uc_nation := nation ;
13812: LD_ADDR_OWVAR 21
13816: PUSH
13817: LD_VAR 0 1
13821: ST_TO_ADDR
// bc_level = 1 ;
13822: LD_ADDR_OWVAR 43
13826: PUSH
13827: LD_INT 1
13829: ST_TO_ADDR
// case btype of 1 :
13830: LD_VAR 0 2
13834: PUSH
13835: LD_INT 1
13837: DOUBLE
13838: EQUAL
13839: IFTRUE 13843
13841: GO 13854
13843: POP
// bc_type := b_depot ; 2 :
13844: LD_ADDR_OWVAR 42
13848: PUSH
13849: LD_INT 0
13851: ST_TO_ADDR
13852: GO 14466
13854: LD_INT 2
13856: DOUBLE
13857: EQUAL
13858: IFTRUE 13862
13860: GO 13873
13862: POP
// bc_type := b_warehouse ; 3 :
13863: LD_ADDR_OWVAR 42
13867: PUSH
13868: LD_INT 1
13870: ST_TO_ADDR
13871: GO 14466
13873: LD_INT 3
13875: DOUBLE
13876: EQUAL
13877: IFTRUE 13881
13879: GO 13892
13881: POP
// bc_type := b_lab ; 4 .. 9 :
13882: LD_ADDR_OWVAR 42
13886: PUSH
13887: LD_INT 6
13889: ST_TO_ADDR
13890: GO 14466
13892: LD_INT 4
13894: DOUBLE
13895: GREATEREQUAL
13896: IFFALSE 13904
13898: LD_INT 9
13900: DOUBLE
13901: LESSEQUAL
13902: IFTRUE 13906
13904: GO 13958
13906: POP
// begin bc_type := b_lab_half ;
13907: LD_ADDR_OWVAR 42
13911: PUSH
13912: LD_INT 7
13914: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
13915: LD_ADDR_OWVAR 44
13919: PUSH
13920: LD_INT 10
13922: PUSH
13923: LD_INT 11
13925: PUSH
13926: LD_INT 12
13928: PUSH
13929: LD_INT 15
13931: PUSH
13932: LD_INT 14
13934: PUSH
13935: LD_INT 13
13937: PUSH
13938: EMPTY
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: PUSH
13946: LD_VAR 0 2
13950: PUSH
13951: LD_INT 3
13953: MINUS
13954: ARRAY
13955: ST_TO_ADDR
// end ; 10 .. 13 :
13956: GO 14466
13958: LD_INT 10
13960: DOUBLE
13961: GREATEREQUAL
13962: IFFALSE 13970
13964: LD_INT 13
13966: DOUBLE
13967: LESSEQUAL
13968: IFTRUE 13972
13970: GO 14049
13972: POP
// begin bc_type := b_lab_full ;
13973: LD_ADDR_OWVAR 42
13977: PUSH
13978: LD_INT 8
13980: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
13981: LD_ADDR_OWVAR 44
13985: PUSH
13986: LD_INT 10
13988: PUSH
13989: LD_INT 12
13991: PUSH
13992: LD_INT 14
13994: PUSH
13995: LD_INT 13
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: PUSH
14004: LD_VAR 0 2
14008: PUSH
14009: LD_INT 9
14011: MINUS
14012: ARRAY
14013: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14014: LD_ADDR_OWVAR 45
14018: PUSH
14019: LD_INT 11
14021: PUSH
14022: LD_INT 15
14024: PUSH
14025: LD_INT 12
14027: PUSH
14028: LD_INT 15
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: PUSH
14037: LD_VAR 0 2
14041: PUSH
14042: LD_INT 9
14044: MINUS
14045: ARRAY
14046: ST_TO_ADDR
// end ; 14 :
14047: GO 14466
14049: LD_INT 14
14051: DOUBLE
14052: EQUAL
14053: IFTRUE 14057
14055: GO 14068
14057: POP
// bc_type := b_workshop ; 15 :
14058: LD_ADDR_OWVAR 42
14062: PUSH
14063: LD_INT 2
14065: ST_TO_ADDR
14066: GO 14466
14068: LD_INT 15
14070: DOUBLE
14071: EQUAL
14072: IFTRUE 14076
14074: GO 14087
14076: POP
// bc_type := b_factory ; 16 :
14077: LD_ADDR_OWVAR 42
14081: PUSH
14082: LD_INT 3
14084: ST_TO_ADDR
14085: GO 14466
14087: LD_INT 16
14089: DOUBLE
14090: EQUAL
14091: IFTRUE 14095
14093: GO 14106
14095: POP
// bc_type := b_ext_gun ; 17 :
14096: LD_ADDR_OWVAR 42
14100: PUSH
14101: LD_INT 17
14103: ST_TO_ADDR
14104: GO 14466
14106: LD_INT 17
14108: DOUBLE
14109: EQUAL
14110: IFTRUE 14114
14112: GO 14142
14114: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14115: LD_ADDR_OWVAR 42
14119: PUSH
14120: LD_INT 19
14122: PUSH
14123: LD_INT 23
14125: PUSH
14126: LD_INT 19
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: LIST
14133: PUSH
14134: LD_VAR 0 1
14138: ARRAY
14139: ST_TO_ADDR
14140: GO 14466
14142: LD_INT 18
14144: DOUBLE
14145: EQUAL
14146: IFTRUE 14150
14148: GO 14161
14150: POP
// bc_type := b_ext_radar ; 19 :
14151: LD_ADDR_OWVAR 42
14155: PUSH
14156: LD_INT 20
14158: ST_TO_ADDR
14159: GO 14466
14161: LD_INT 19
14163: DOUBLE
14164: EQUAL
14165: IFTRUE 14169
14167: GO 14180
14169: POP
// bc_type := b_ext_radio ; 20 :
14170: LD_ADDR_OWVAR 42
14174: PUSH
14175: LD_INT 22
14177: ST_TO_ADDR
14178: GO 14466
14180: LD_INT 20
14182: DOUBLE
14183: EQUAL
14184: IFTRUE 14188
14186: GO 14199
14188: POP
// bc_type := b_ext_siberium ; 21 :
14189: LD_ADDR_OWVAR 42
14193: PUSH
14194: LD_INT 21
14196: ST_TO_ADDR
14197: GO 14466
14199: LD_INT 21
14201: DOUBLE
14202: EQUAL
14203: IFTRUE 14207
14205: GO 14218
14207: POP
// bc_type := b_ext_computer ; 22 :
14208: LD_ADDR_OWVAR 42
14212: PUSH
14213: LD_INT 24
14215: ST_TO_ADDR
14216: GO 14466
14218: LD_INT 22
14220: DOUBLE
14221: EQUAL
14222: IFTRUE 14226
14224: GO 14237
14226: POP
// bc_type := b_ext_track ; 23 :
14227: LD_ADDR_OWVAR 42
14231: PUSH
14232: LD_INT 16
14234: ST_TO_ADDR
14235: GO 14466
14237: LD_INT 23
14239: DOUBLE
14240: EQUAL
14241: IFTRUE 14245
14243: GO 14256
14245: POP
// bc_type := b_ext_laser ; 24 :
14246: LD_ADDR_OWVAR 42
14250: PUSH
14251: LD_INT 25
14253: ST_TO_ADDR
14254: GO 14466
14256: LD_INT 24
14258: DOUBLE
14259: EQUAL
14260: IFTRUE 14264
14262: GO 14275
14264: POP
// bc_type := b_control_tower ; 25 :
14265: LD_ADDR_OWVAR 42
14269: PUSH
14270: LD_INT 36
14272: ST_TO_ADDR
14273: GO 14466
14275: LD_INT 25
14277: DOUBLE
14278: EQUAL
14279: IFTRUE 14283
14281: GO 14294
14283: POP
// bc_type := b_breastwork ; 26 :
14284: LD_ADDR_OWVAR 42
14288: PUSH
14289: LD_INT 31
14291: ST_TO_ADDR
14292: GO 14466
14294: LD_INT 26
14296: DOUBLE
14297: EQUAL
14298: IFTRUE 14302
14300: GO 14313
14302: POP
// bc_type := b_bunker ; 27 :
14303: LD_ADDR_OWVAR 42
14307: PUSH
14308: LD_INT 32
14310: ST_TO_ADDR
14311: GO 14466
14313: LD_INT 27
14315: DOUBLE
14316: EQUAL
14317: IFTRUE 14321
14319: GO 14332
14321: POP
// bc_type := b_turret ; 28 :
14322: LD_ADDR_OWVAR 42
14326: PUSH
14327: LD_INT 33
14329: ST_TO_ADDR
14330: GO 14466
14332: LD_INT 28
14334: DOUBLE
14335: EQUAL
14336: IFTRUE 14340
14338: GO 14351
14340: POP
// bc_type := b_armoury ; 29 :
14341: LD_ADDR_OWVAR 42
14345: PUSH
14346: LD_INT 4
14348: ST_TO_ADDR
14349: GO 14466
14351: LD_INT 29
14353: DOUBLE
14354: EQUAL
14355: IFTRUE 14359
14357: GO 14370
14359: POP
// bc_type := b_barracks ; 30 :
14360: LD_ADDR_OWVAR 42
14364: PUSH
14365: LD_INT 5
14367: ST_TO_ADDR
14368: GO 14466
14370: LD_INT 30
14372: DOUBLE
14373: EQUAL
14374: IFTRUE 14378
14376: GO 14389
14378: POP
// bc_type := b_solar_power ; 31 :
14379: LD_ADDR_OWVAR 42
14383: PUSH
14384: LD_INT 27
14386: ST_TO_ADDR
14387: GO 14466
14389: LD_INT 31
14391: DOUBLE
14392: EQUAL
14393: IFTRUE 14397
14395: GO 14408
14397: POP
// bc_type := b_oil_power ; 32 :
14398: LD_ADDR_OWVAR 42
14402: PUSH
14403: LD_INT 26
14405: ST_TO_ADDR
14406: GO 14466
14408: LD_INT 32
14410: DOUBLE
14411: EQUAL
14412: IFTRUE 14416
14414: GO 14427
14416: POP
// bc_type := b_siberite_power ; 33 :
14417: LD_ADDR_OWVAR 42
14421: PUSH
14422: LD_INT 28
14424: ST_TO_ADDR
14425: GO 14466
14427: LD_INT 33
14429: DOUBLE
14430: EQUAL
14431: IFTRUE 14435
14433: GO 14446
14435: POP
// bc_type := b_oil_mine ; 34 :
14436: LD_ADDR_OWVAR 42
14440: PUSH
14441: LD_INT 29
14443: ST_TO_ADDR
14444: GO 14466
14446: LD_INT 34
14448: DOUBLE
14449: EQUAL
14450: IFTRUE 14454
14452: GO 14465
14454: POP
// bc_type := b_siberite_mine ; end ;
14455: LD_ADDR_OWVAR 42
14459: PUSH
14460: LD_INT 30
14462: ST_TO_ADDR
14463: GO 14466
14465: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
14466: LD_ADDR_VAR 0 8
14470: PUSH
14471: LD_VAR 0 5
14475: PPUSH
14476: LD_VAR 0 6
14480: PPUSH
14481: LD_VAR 0 3
14485: PPUSH
14486: CALL_OW 47
14490: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
14491: LD_OWVAR 42
14495: PUSH
14496: LD_INT 32
14498: PUSH
14499: LD_INT 33
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: IN
14506: IFFALSE 14522
// PlaceWeaponTurret ( b , weapon ) ;
14508: LD_VAR 0 8
14512: PPUSH
14513: LD_VAR 0 4
14517: PPUSH
14518: CALL_OW 431
// end ;
14522: LD_VAR 0 7
14526: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
14527: LD_INT 0
14529: PPUSH
14530: PPUSH
14531: PPUSH
14532: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14533: LD_ADDR_VAR 0 4
14537: PUSH
14538: LD_INT 22
14540: PUSH
14541: LD_OWVAR 2
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: PUSH
14550: LD_INT 2
14552: PUSH
14553: LD_INT 30
14555: PUSH
14556: LD_INT 0
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: PUSH
14563: LD_INT 30
14565: PUSH
14566: LD_INT 1
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: LIST
14577: PUSH
14578: EMPTY
14579: LIST
14580: LIST
14581: PPUSH
14582: CALL_OW 69
14586: ST_TO_ADDR
// if not tmp then
14587: LD_VAR 0 4
14591: NOT
14592: IFFALSE 14596
// exit ;
14594: GO 14655
// for i in tmp do
14596: LD_ADDR_VAR 0 2
14600: PUSH
14601: LD_VAR 0 4
14605: PUSH
14606: FOR_IN
14607: IFFALSE 14653
// for j = 1 to 3 do
14609: LD_ADDR_VAR 0 3
14613: PUSH
14614: DOUBLE
14615: LD_INT 1
14617: DEC
14618: ST_TO_ADDR
14619: LD_INT 3
14621: PUSH
14622: FOR_TO
14623: IFFALSE 14649
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14625: LD_VAR 0 2
14629: PPUSH
14630: CALL_OW 274
14634: PPUSH
14635: LD_VAR 0 3
14639: PPUSH
14640: LD_INT 99999
14642: PPUSH
14643: CALL_OW 277
14647: GO 14622
14649: POP
14650: POP
14651: GO 14606
14653: POP
14654: POP
// end ;
14655: LD_VAR 0 1
14659: RET
// export function hHackSetLevel10 ; var i , j ; begin
14660: LD_INT 0
14662: PPUSH
14663: PPUSH
14664: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14665: LD_ADDR_VAR 0 2
14669: PUSH
14670: LD_INT 21
14672: PUSH
14673: LD_INT 1
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PPUSH
14680: CALL_OW 69
14684: PUSH
14685: FOR_IN
14686: IFFALSE 14738
// if IsSelected ( i ) then
14688: LD_VAR 0 2
14692: PPUSH
14693: CALL_OW 306
14697: IFFALSE 14736
// begin for j := 1 to 4 do
14699: LD_ADDR_VAR 0 3
14703: PUSH
14704: DOUBLE
14705: LD_INT 1
14707: DEC
14708: ST_TO_ADDR
14709: LD_INT 4
14711: PUSH
14712: FOR_TO
14713: IFFALSE 14734
// SetSkill ( i , j , 10 ) ;
14715: LD_VAR 0 2
14719: PPUSH
14720: LD_VAR 0 3
14724: PPUSH
14725: LD_INT 10
14727: PPUSH
14728: CALL_OW 237
14732: GO 14712
14734: POP
14735: POP
// end ;
14736: GO 14685
14738: POP
14739: POP
// end ;
14740: LD_VAR 0 1
14744: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
14745: LD_INT 0
14747: PPUSH
14748: PPUSH
14749: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
14750: LD_ADDR_VAR 0 2
14754: PUSH
14755: LD_INT 22
14757: PUSH
14758: LD_OWVAR 2
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: PUSH
14767: LD_INT 21
14769: PUSH
14770: LD_INT 1
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: PPUSH
14781: CALL_OW 69
14785: PUSH
14786: FOR_IN
14787: IFFALSE 14828
// begin for j := 1 to 4 do
14789: LD_ADDR_VAR 0 3
14793: PUSH
14794: DOUBLE
14795: LD_INT 1
14797: DEC
14798: ST_TO_ADDR
14799: LD_INT 4
14801: PUSH
14802: FOR_TO
14803: IFFALSE 14824
// SetSkill ( i , j , 10 ) ;
14805: LD_VAR 0 2
14809: PPUSH
14810: LD_VAR 0 3
14814: PPUSH
14815: LD_INT 10
14817: PPUSH
14818: CALL_OW 237
14822: GO 14802
14824: POP
14825: POP
// end ;
14826: GO 14786
14828: POP
14829: POP
// end ;
14830: LD_VAR 0 1
14834: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
14835: LD_INT 0
14837: PPUSH
// uc_side := your_side ;
14838: LD_ADDR_OWVAR 20
14842: PUSH
14843: LD_OWVAR 2
14847: ST_TO_ADDR
// uc_nation := nation ;
14848: LD_ADDR_OWVAR 21
14852: PUSH
14853: LD_VAR 0 1
14857: ST_TO_ADDR
// InitHc ;
14858: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
14862: LD_INT 0
14864: PPUSH
14865: LD_VAR 0 2
14869: PPUSH
14870: LD_VAR 0 3
14874: PPUSH
14875: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
14879: LD_VAR 0 4
14883: PPUSH
14884: LD_VAR 0 5
14888: PPUSH
14889: CALL_OW 428
14893: PUSH
14894: LD_INT 0
14896: EQUAL
14897: IFFALSE 14921
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
14899: CALL_OW 44
14903: PPUSH
14904: LD_VAR 0 4
14908: PPUSH
14909: LD_VAR 0 5
14913: PPUSH
14914: LD_INT 1
14916: PPUSH
14917: CALL_OW 48
// end ;
14921: LD_VAR 0 6
14925: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
14926: LD_INT 0
14928: PPUSH
14929: PPUSH
// uc_side := your_side ;
14930: LD_ADDR_OWVAR 20
14934: PUSH
14935: LD_OWVAR 2
14939: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
14940: LD_VAR 0 1
14944: PUSH
14945: LD_INT 1
14947: PUSH
14948: LD_INT 2
14950: PUSH
14951: LD_INT 3
14953: PUSH
14954: LD_INT 4
14956: PUSH
14957: LD_INT 5
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: IN
14967: IFFALSE 14979
// uc_nation := nation_american else
14969: LD_ADDR_OWVAR 21
14973: PUSH
14974: LD_INT 1
14976: ST_TO_ADDR
14977: GO 15022
// if chassis in [ 11 , 12 , 13 , 14 ] then
14979: LD_VAR 0 1
14983: PUSH
14984: LD_INT 11
14986: PUSH
14987: LD_INT 12
14989: PUSH
14990: LD_INT 13
14992: PUSH
14993: LD_INT 14
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: IN
15002: IFFALSE 15014
// uc_nation := nation_arabian else
15004: LD_ADDR_OWVAR 21
15008: PUSH
15009: LD_INT 2
15011: ST_TO_ADDR
15012: GO 15022
// uc_nation := nation_russian ;
15014: LD_ADDR_OWVAR 21
15018: PUSH
15019: LD_INT 3
15021: ST_TO_ADDR
// vc_chassis := chassis ;
15022: LD_ADDR_OWVAR 37
15026: PUSH
15027: LD_VAR 0 1
15031: ST_TO_ADDR
// vc_engine := engine ;
15032: LD_ADDR_OWVAR 39
15036: PUSH
15037: LD_VAR 0 2
15041: ST_TO_ADDR
// vc_control := control ;
15042: LD_ADDR_OWVAR 38
15046: PUSH
15047: LD_VAR 0 3
15051: ST_TO_ADDR
// vc_weapon := weapon ;
15052: LD_ADDR_OWVAR 40
15056: PUSH
15057: LD_VAR 0 4
15061: ST_TO_ADDR
// un := CreateVehicle ;
15062: LD_ADDR_VAR 0 8
15066: PUSH
15067: CALL_OW 45
15071: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15072: LD_VAR 0 8
15076: PPUSH
15077: LD_INT 0
15079: PPUSH
15080: LD_INT 5
15082: PPUSH
15083: CALL_OW 12
15087: PPUSH
15088: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15092: LD_VAR 0 8
15096: PPUSH
15097: LD_VAR 0 5
15101: PPUSH
15102: LD_VAR 0 6
15106: PPUSH
15107: LD_INT 1
15109: PPUSH
15110: CALL_OW 48
// end ;
15114: LD_VAR 0 7
15118: RET
// export hInvincible ; every 1 do
15119: GO 15121
15121: DISABLE
// hInvincible := [ ] ;
15122: LD_ADDR_EXP 58
15126: PUSH
15127: EMPTY
15128: ST_TO_ADDR
15129: END
// every 10 do var i ;
15130: GO 15132
15132: DISABLE
15133: LD_INT 0
15135: PPUSH
// begin enable ;
15136: ENABLE
// if not hInvincible then
15137: LD_EXP 58
15141: NOT
15142: IFFALSE 15146
// exit ;
15144: GO 15190
// for i in hInvincible do
15146: LD_ADDR_VAR 0 1
15150: PUSH
15151: LD_EXP 58
15155: PUSH
15156: FOR_IN
15157: IFFALSE 15188
// if GetLives ( i ) < 1000 then
15159: LD_VAR 0 1
15163: PPUSH
15164: CALL_OW 256
15168: PUSH
15169: LD_INT 1000
15171: LESS
15172: IFFALSE 15186
// SetLives ( i , 1000 ) ;
15174: LD_VAR 0 1
15178: PPUSH
15179: LD_INT 1000
15181: PPUSH
15182: CALL_OW 234
15186: GO 15156
15188: POP
15189: POP
// end ;
15190: PPOPN 1
15192: END
// export function hHackInvincible ; var i ; begin
15193: LD_INT 0
15195: PPUSH
15196: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15197: LD_ADDR_VAR 0 2
15201: PUSH
15202: LD_INT 2
15204: PUSH
15205: LD_INT 21
15207: PUSH
15208: LD_INT 1
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: PUSH
15215: LD_INT 21
15217: PUSH
15218: LD_INT 2
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: LIST
15229: PPUSH
15230: CALL_OW 69
15234: PUSH
15235: FOR_IN
15236: IFFALSE 15297
// if IsSelected ( i ) then
15238: LD_VAR 0 2
15242: PPUSH
15243: CALL_OW 306
15247: IFFALSE 15295
// begin if i in hInvincible then
15249: LD_VAR 0 2
15253: PUSH
15254: LD_EXP 58
15258: IN
15259: IFFALSE 15279
// hInvincible := hInvincible diff i else
15261: LD_ADDR_EXP 58
15265: PUSH
15266: LD_EXP 58
15270: PUSH
15271: LD_VAR 0 2
15275: DIFF
15276: ST_TO_ADDR
15277: GO 15295
// hInvincible := hInvincible union i ;
15279: LD_ADDR_EXP 58
15283: PUSH
15284: LD_EXP 58
15288: PUSH
15289: LD_VAR 0 2
15293: UNION
15294: ST_TO_ADDR
// end ;
15295: GO 15235
15297: POP
15298: POP
// end ;
15299: LD_VAR 0 1
15303: RET
// export function hHackInvisible ; var i , j ; begin
15304: LD_INT 0
15306: PPUSH
15307: PPUSH
15308: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15309: LD_ADDR_VAR 0 2
15313: PUSH
15314: LD_INT 21
15316: PUSH
15317: LD_INT 1
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: PPUSH
15324: CALL_OW 69
15328: PUSH
15329: FOR_IN
15330: IFFALSE 15354
// if IsSelected ( i ) then
15332: LD_VAR 0 2
15336: PPUSH
15337: CALL_OW 306
15341: IFFALSE 15352
// ComForceInvisible ( i ) ;
15343: LD_VAR 0 2
15347: PPUSH
15348: CALL_OW 496
15352: GO 15329
15354: POP
15355: POP
// end ;
15356: LD_VAR 0 1
15360: RET
// export function hHackChangeYourSide ; begin
15361: LD_INT 0
15363: PPUSH
// if your_side = 8 then
15364: LD_OWVAR 2
15368: PUSH
15369: LD_INT 8
15371: EQUAL
15372: IFFALSE 15384
// your_side := 0 else
15374: LD_ADDR_OWVAR 2
15378: PUSH
15379: LD_INT 0
15381: ST_TO_ADDR
15382: GO 15398
// your_side := your_side + 1 ;
15384: LD_ADDR_OWVAR 2
15388: PUSH
15389: LD_OWVAR 2
15393: PUSH
15394: LD_INT 1
15396: PLUS
15397: ST_TO_ADDR
// end ;
15398: LD_VAR 0 1
15402: RET
// export function hHackChangeUnitSide ; var i , j ; begin
15403: LD_INT 0
15405: PPUSH
15406: PPUSH
15407: PPUSH
// for i in all_units do
15408: LD_ADDR_VAR 0 2
15412: PUSH
15413: LD_OWVAR 3
15417: PUSH
15418: FOR_IN
15419: IFFALSE 15497
// if IsSelected ( i ) then
15421: LD_VAR 0 2
15425: PPUSH
15426: CALL_OW 306
15430: IFFALSE 15495
// begin j := GetSide ( i ) ;
15432: LD_ADDR_VAR 0 3
15436: PUSH
15437: LD_VAR 0 2
15441: PPUSH
15442: CALL_OW 255
15446: ST_TO_ADDR
// if j = 8 then
15447: LD_VAR 0 3
15451: PUSH
15452: LD_INT 8
15454: EQUAL
15455: IFFALSE 15467
// j := 0 else
15457: LD_ADDR_VAR 0 3
15461: PUSH
15462: LD_INT 0
15464: ST_TO_ADDR
15465: GO 15481
// j := j + 1 ;
15467: LD_ADDR_VAR 0 3
15471: PUSH
15472: LD_VAR 0 3
15476: PUSH
15477: LD_INT 1
15479: PLUS
15480: ST_TO_ADDR
// SetSide ( i , j ) ;
15481: LD_VAR 0 2
15485: PPUSH
15486: LD_VAR 0 3
15490: PPUSH
15491: CALL_OW 235
// end ;
15495: GO 15418
15497: POP
15498: POP
// end ;
15499: LD_VAR 0 1
15503: RET
// export function hHackFog ; begin
15504: LD_INT 0
15506: PPUSH
// FogOff ( true ) ;
15507: LD_INT 1
15509: PPUSH
15510: CALL_OW 344
// end ;
15514: LD_VAR 0 1
15518: RET
// export function hHackTeleport ( unit , x , y ) ; begin
15519: LD_INT 0
15521: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
15522: LD_VAR 0 1
15526: PPUSH
15527: LD_VAR 0 2
15531: PPUSH
15532: LD_VAR 0 3
15536: PPUSH
15537: LD_INT 1
15539: PPUSH
15540: LD_INT 1
15542: PPUSH
15543: CALL_OW 483
// CenterOnXY ( x , y ) ;
15547: LD_VAR 0 2
15551: PPUSH
15552: LD_VAR 0 3
15556: PPUSH
15557: CALL_OW 84
// end ;
15561: LD_VAR 0 4
15565: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
15566: LD_INT 0
15568: PPUSH
15569: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
15570: LD_VAR 0 1
15574: NOT
15575: PUSH
15576: LD_VAR 0 2
15580: PPUSH
15581: LD_VAR 0 3
15585: PPUSH
15586: CALL_OW 488
15590: NOT
15591: OR
15592: PUSH
15593: LD_VAR 0 1
15597: PPUSH
15598: CALL_OW 266
15602: PUSH
15603: LD_INT 3
15605: NONEQUAL
15606: PUSH
15607: LD_VAR 0 1
15611: PPUSH
15612: CALL_OW 247
15616: PUSH
15617: LD_INT 1
15619: EQUAL
15620: NOT
15621: AND
15622: OR
15623: IFFALSE 15627
// exit ;
15625: GO 15776
// if GetType ( factory ) = unit_human then
15627: LD_VAR 0 1
15631: PPUSH
15632: CALL_OW 247
15636: PUSH
15637: LD_INT 1
15639: EQUAL
15640: IFFALSE 15657
// factory := IsInUnit ( factory ) ;
15642: LD_ADDR_VAR 0 1
15646: PUSH
15647: LD_VAR 0 1
15651: PPUSH
15652: CALL_OW 310
15656: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
15657: LD_VAR 0 1
15661: PPUSH
15662: CALL_OW 266
15666: PUSH
15667: LD_INT 3
15669: NONEQUAL
15670: IFFALSE 15674
// exit ;
15672: GO 15776
// if HexInfo ( x , y ) = factory then
15674: LD_VAR 0 2
15678: PPUSH
15679: LD_VAR 0 3
15683: PPUSH
15684: CALL_OW 428
15688: PUSH
15689: LD_VAR 0 1
15693: EQUAL
15694: IFFALSE 15721
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
15696: LD_ADDR_EXP 59
15700: PUSH
15701: LD_EXP 59
15705: PPUSH
15706: LD_VAR 0 1
15710: PPUSH
15711: LD_INT 0
15713: PPUSH
15714: CALL_OW 1
15718: ST_TO_ADDR
15719: GO 15772
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
15721: LD_ADDR_EXP 59
15725: PUSH
15726: LD_EXP 59
15730: PPUSH
15731: LD_VAR 0 1
15735: PPUSH
15736: LD_VAR 0 1
15740: PPUSH
15741: CALL_OW 255
15745: PUSH
15746: LD_VAR 0 1
15750: PUSH
15751: LD_VAR 0 2
15755: PUSH
15756: LD_VAR 0 3
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: PPUSH
15767: CALL_OW 1
15771: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15772: CALL 15781 0 0
// end ;
15776: LD_VAR 0 4
15780: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
15781: LD_INT 0
15783: PPUSH
15784: PPUSH
15785: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
15786: LD_STRING resetFactoryWaypoint();
15788: PPUSH
15789: CALL_OW 559
// if factoryWaypoints then
15793: LD_EXP 59
15797: IFFALSE 15923
// begin list := PrepareArray ( factoryWaypoints ) ;
15799: LD_ADDR_VAR 0 3
15803: PUSH
15804: LD_EXP 59
15808: PPUSH
15809: CALL 62737 0 1
15813: ST_TO_ADDR
// for i := 1 to list do
15814: LD_ADDR_VAR 0 2
15818: PUSH
15819: DOUBLE
15820: LD_INT 1
15822: DEC
15823: ST_TO_ADDR
15824: LD_VAR 0 3
15828: PUSH
15829: FOR_TO
15830: IFFALSE 15921
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15832: LD_STRING setFactoryWaypointXY(
15834: PUSH
15835: LD_VAR 0 3
15839: PUSH
15840: LD_VAR 0 2
15844: ARRAY
15845: PUSH
15846: LD_INT 1
15848: ARRAY
15849: STR
15850: PUSH
15851: LD_STRING ,
15853: STR
15854: PUSH
15855: LD_VAR 0 3
15859: PUSH
15860: LD_VAR 0 2
15864: ARRAY
15865: PUSH
15866: LD_INT 2
15868: ARRAY
15869: STR
15870: PUSH
15871: LD_STRING ,
15873: STR
15874: PUSH
15875: LD_VAR 0 3
15879: PUSH
15880: LD_VAR 0 2
15884: ARRAY
15885: PUSH
15886: LD_INT 3
15888: ARRAY
15889: STR
15890: PUSH
15891: LD_STRING ,
15893: STR
15894: PUSH
15895: LD_VAR 0 3
15899: PUSH
15900: LD_VAR 0 2
15904: ARRAY
15905: PUSH
15906: LD_INT 4
15908: ARRAY
15909: STR
15910: PUSH
15911: LD_STRING )
15913: STR
15914: PPUSH
15915: CALL_OW 559
15919: GO 15829
15921: POP
15922: POP
// end ; end ;
15923: LD_VAR 0 1
15927: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
15928: LD_INT 0
15930: PPUSH
// if HexInfo ( x , y ) = warehouse then
15931: LD_VAR 0 2
15935: PPUSH
15936: LD_VAR 0 3
15940: PPUSH
15941: CALL_OW 428
15945: PUSH
15946: LD_VAR 0 1
15950: EQUAL
15951: IFFALSE 15978
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
15953: LD_ADDR_EXP 60
15957: PUSH
15958: LD_EXP 60
15962: PPUSH
15963: LD_VAR 0 1
15967: PPUSH
15968: LD_INT 0
15970: PPUSH
15971: CALL_OW 1
15975: ST_TO_ADDR
15976: GO 16029
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
15978: LD_ADDR_EXP 60
15982: PUSH
15983: LD_EXP 60
15987: PPUSH
15988: LD_VAR 0 1
15992: PPUSH
15993: LD_VAR 0 1
15997: PPUSH
15998: CALL_OW 255
16002: PUSH
16003: LD_VAR 0 1
16007: PUSH
16008: LD_VAR 0 2
16012: PUSH
16013: LD_VAR 0 3
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: PPUSH
16024: CALL_OW 1
16028: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16029: CALL 16038 0 0
// end ;
16033: LD_VAR 0 4
16037: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16038: LD_INT 0
16040: PPUSH
16041: PPUSH
16042: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16043: LD_STRING resetWarehouseGatheringPoints();
16045: PPUSH
16046: CALL_OW 559
// if warehouseGatheringPoints then
16050: LD_EXP 60
16054: IFFALSE 16180
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16056: LD_ADDR_VAR 0 3
16060: PUSH
16061: LD_EXP 60
16065: PPUSH
16066: CALL 62737 0 1
16070: ST_TO_ADDR
// for i := 1 to list do
16071: LD_ADDR_VAR 0 2
16075: PUSH
16076: DOUBLE
16077: LD_INT 1
16079: DEC
16080: ST_TO_ADDR
16081: LD_VAR 0 3
16085: PUSH
16086: FOR_TO
16087: IFFALSE 16178
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16089: LD_STRING setWarehouseGatheringPointXY(
16091: PUSH
16092: LD_VAR 0 3
16096: PUSH
16097: LD_VAR 0 2
16101: ARRAY
16102: PUSH
16103: LD_INT 1
16105: ARRAY
16106: STR
16107: PUSH
16108: LD_STRING ,
16110: STR
16111: PUSH
16112: LD_VAR 0 3
16116: PUSH
16117: LD_VAR 0 2
16121: ARRAY
16122: PUSH
16123: LD_INT 2
16125: ARRAY
16126: STR
16127: PUSH
16128: LD_STRING ,
16130: STR
16131: PUSH
16132: LD_VAR 0 3
16136: PUSH
16137: LD_VAR 0 2
16141: ARRAY
16142: PUSH
16143: LD_INT 3
16145: ARRAY
16146: STR
16147: PUSH
16148: LD_STRING ,
16150: STR
16151: PUSH
16152: LD_VAR 0 3
16156: PUSH
16157: LD_VAR 0 2
16161: ARRAY
16162: PUSH
16163: LD_INT 4
16165: ARRAY
16166: STR
16167: PUSH
16168: LD_STRING )
16170: STR
16171: PPUSH
16172: CALL_OW 559
16176: GO 16086
16178: POP
16179: POP
// end ; end ;
16180: LD_VAR 0 1
16184: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
16185: LD_EXP 60
16189: IFFALSE 16876
16191: GO 16193
16193: DISABLE
16194: LD_INT 0
16196: PPUSH
16197: PPUSH
16198: PPUSH
16199: PPUSH
16200: PPUSH
16201: PPUSH
16202: PPUSH
16203: PPUSH
16204: PPUSH
// begin enable ;
16205: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
16206: LD_ADDR_VAR 0 3
16210: PUSH
16211: LD_EXP 60
16215: PPUSH
16216: CALL 62737 0 1
16220: ST_TO_ADDR
// if not list then
16221: LD_VAR 0 3
16225: NOT
16226: IFFALSE 16230
// exit ;
16228: GO 16876
// for i := 1 to list do
16230: LD_ADDR_VAR 0 1
16234: PUSH
16235: DOUBLE
16236: LD_INT 1
16238: DEC
16239: ST_TO_ADDR
16240: LD_VAR 0 3
16244: PUSH
16245: FOR_TO
16246: IFFALSE 16874
// begin depot := list [ i ] [ 2 ] ;
16248: LD_ADDR_VAR 0 8
16252: PUSH
16253: LD_VAR 0 3
16257: PUSH
16258: LD_VAR 0 1
16262: ARRAY
16263: PUSH
16264: LD_INT 2
16266: ARRAY
16267: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
16268: LD_ADDR_VAR 0 5
16272: PUSH
16273: LD_VAR 0 3
16277: PUSH
16278: LD_VAR 0 1
16282: ARRAY
16283: PUSH
16284: LD_INT 1
16286: ARRAY
16287: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
16288: LD_VAR 0 8
16292: PPUSH
16293: CALL_OW 301
16297: PUSH
16298: LD_VAR 0 5
16302: PUSH
16303: LD_VAR 0 8
16307: PPUSH
16308: CALL_OW 255
16312: NONEQUAL
16313: OR
16314: IFFALSE 16343
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
16316: LD_ADDR_EXP 60
16320: PUSH
16321: LD_EXP 60
16325: PPUSH
16326: LD_VAR 0 8
16330: PPUSH
16331: LD_INT 0
16333: PPUSH
16334: CALL_OW 1
16338: ST_TO_ADDR
// exit ;
16339: POP
16340: POP
16341: GO 16876
// end ; x := list [ i ] [ 3 ] ;
16343: LD_ADDR_VAR 0 6
16347: PUSH
16348: LD_VAR 0 3
16352: PUSH
16353: LD_VAR 0 1
16357: ARRAY
16358: PUSH
16359: LD_INT 3
16361: ARRAY
16362: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
16363: LD_ADDR_VAR 0 7
16367: PUSH
16368: LD_VAR 0 3
16372: PUSH
16373: LD_VAR 0 1
16377: ARRAY
16378: PUSH
16379: LD_INT 4
16381: ARRAY
16382: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
16383: LD_ADDR_VAR 0 9
16387: PUSH
16388: LD_VAR 0 6
16392: PPUSH
16393: LD_VAR 0 7
16397: PPUSH
16398: LD_INT 16
16400: PPUSH
16401: CALL 61321 0 3
16405: ST_TO_ADDR
// if not cratesNearbyPoint then
16406: LD_VAR 0 9
16410: NOT
16411: IFFALSE 16417
// exit ;
16413: POP
16414: POP
16415: GO 16876
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
16417: LD_ADDR_VAR 0 4
16421: PUSH
16422: LD_INT 22
16424: PUSH
16425: LD_VAR 0 5
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: LD_INT 3
16436: PUSH
16437: LD_INT 60
16439: PUSH
16440: EMPTY
16441: LIST
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: PUSH
16447: LD_INT 91
16449: PUSH
16450: LD_VAR 0 8
16454: PUSH
16455: LD_INT 6
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: LIST
16462: PUSH
16463: LD_INT 2
16465: PUSH
16466: LD_INT 25
16468: PUSH
16469: LD_INT 2
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: LD_INT 25
16478: PUSH
16479: LD_INT 16
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: LIST
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: PPUSH
16497: CALL_OW 69
16501: PUSH
16502: LD_VAR 0 8
16506: PPUSH
16507: CALL_OW 313
16511: PPUSH
16512: LD_INT 3
16514: PUSH
16515: LD_INT 60
16517: PUSH
16518: EMPTY
16519: LIST
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: PUSH
16525: LD_INT 2
16527: PUSH
16528: LD_INT 25
16530: PUSH
16531: LD_INT 2
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: PUSH
16538: LD_INT 25
16540: PUSH
16541: LD_INT 16
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: LIST
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PPUSH
16557: CALL_OW 72
16561: UNION
16562: ST_TO_ADDR
// if tmp then
16563: LD_VAR 0 4
16567: IFFALSE 16647
// begin tmp := ShrinkArray ( tmp , 3 ) ;
16569: LD_ADDR_VAR 0 4
16573: PUSH
16574: LD_VAR 0 4
16578: PPUSH
16579: LD_INT 3
16581: PPUSH
16582: CALL 59288 0 2
16586: ST_TO_ADDR
// for j in tmp do
16587: LD_ADDR_VAR 0 2
16591: PUSH
16592: LD_VAR 0 4
16596: PUSH
16597: FOR_IN
16598: IFFALSE 16641
// begin if IsInUnit ( j ) then
16600: LD_VAR 0 2
16604: PPUSH
16605: CALL_OW 310
16609: IFFALSE 16620
// ComExit ( j ) ;
16611: LD_VAR 0 2
16615: PPUSH
16616: CALL 59371 0 1
// AddComCollect ( j , x , y ) ;
16620: LD_VAR 0 2
16624: PPUSH
16625: LD_VAR 0 6
16629: PPUSH
16630: LD_VAR 0 7
16634: PPUSH
16635: CALL_OW 177
// end ;
16639: GO 16597
16641: POP
16642: POP
// exit ;
16643: POP
16644: POP
16645: GO 16876
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
16647: LD_ADDR_VAR 0 4
16651: PUSH
16652: LD_INT 22
16654: PUSH
16655: LD_VAR 0 5
16659: PUSH
16660: EMPTY
16661: LIST
16662: LIST
16663: PUSH
16664: LD_INT 91
16666: PUSH
16667: LD_VAR 0 8
16671: PUSH
16672: LD_INT 8
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: LIST
16679: PUSH
16680: LD_INT 2
16682: PUSH
16683: LD_INT 34
16685: PUSH
16686: LD_INT 12
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PUSH
16693: LD_INT 34
16695: PUSH
16696: LD_INT 51
16698: PUSH
16699: EMPTY
16700: LIST
16701: LIST
16702: PUSH
16703: LD_INT 34
16705: PUSH
16706: LD_INT 32
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: PUSH
16713: LD_INT 34
16715: PUSH
16716: LD_EXP 73
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: PUSH
16725: EMPTY
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: LIST
16736: PPUSH
16737: CALL_OW 69
16741: ST_TO_ADDR
// if tmp then
16742: LD_VAR 0 4
16746: IFFALSE 16872
// begin for j in tmp do
16748: LD_ADDR_VAR 0 2
16752: PUSH
16753: LD_VAR 0 4
16757: PUSH
16758: FOR_IN
16759: IFFALSE 16870
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
16761: LD_VAR 0 2
16765: PPUSH
16766: CALL_OW 262
16770: PUSH
16771: LD_INT 3
16773: EQUAL
16774: PUSH
16775: LD_VAR 0 2
16779: PPUSH
16780: CALL_OW 261
16784: PUSH
16785: LD_INT 20
16787: GREATER
16788: OR
16789: PUSH
16790: LD_VAR 0 2
16794: PPUSH
16795: CALL_OW 314
16799: NOT
16800: AND
16801: PUSH
16802: LD_VAR 0 2
16806: PPUSH
16807: CALL_OW 263
16811: PUSH
16812: LD_INT 1
16814: NONEQUAL
16815: PUSH
16816: LD_VAR 0 2
16820: PPUSH
16821: CALL_OW 311
16825: OR
16826: AND
16827: IFFALSE 16868
// begin ComCollect ( j , x , y ) ;
16829: LD_VAR 0 2
16833: PPUSH
16834: LD_VAR 0 6
16838: PPUSH
16839: LD_VAR 0 7
16843: PPUSH
16844: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
16848: LD_VAR 0 2
16852: PPUSH
16853: LD_VAR 0 8
16857: PPUSH
16858: CALL_OW 172
// exit ;
16862: POP
16863: POP
16864: POP
16865: POP
16866: GO 16876
// end ;
16868: GO 16758
16870: POP
16871: POP
// end ; end ;
16872: GO 16245
16874: POP
16875: POP
// end ; end_of_file
16876: PPOPN 9
16878: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
16879: LD_INT 0
16881: PPUSH
16882: PPUSH
16883: PPUSH
16884: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
16885: LD_VAR 0 1
16889: PPUSH
16890: CALL_OW 264
16894: PUSH
16895: LD_EXP 76
16899: EQUAL
16900: IFFALSE 16972
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
16902: LD_INT 68
16904: PPUSH
16905: LD_VAR 0 1
16909: PPUSH
16910: CALL_OW 255
16914: PPUSH
16915: CALL_OW 321
16919: PUSH
16920: LD_INT 2
16922: EQUAL
16923: IFFALSE 16935
// eff := 70 else
16925: LD_ADDR_VAR 0 4
16929: PUSH
16930: LD_INT 70
16932: ST_TO_ADDR
16933: GO 16943
// eff := 30 ;
16935: LD_ADDR_VAR 0 4
16939: PUSH
16940: LD_INT 30
16942: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
16943: LD_VAR 0 1
16947: PPUSH
16948: CALL_OW 250
16952: PPUSH
16953: LD_VAR 0 1
16957: PPUSH
16958: CALL_OW 251
16962: PPUSH
16963: LD_VAR 0 4
16967: PPUSH
16968: CALL_OW 495
// end ; end ;
16972: LD_VAR 0 2
16976: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
16977: LD_INT 0
16979: PPUSH
// end ;
16980: LD_VAR 0 4
16984: RET
// export function SOS_Command ( cmd ) ; begin
16985: LD_INT 0
16987: PPUSH
// end ;
16988: LD_VAR 0 2
16992: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
16993: LD_INT 0
16995: PPUSH
// end ;
16996: LD_VAR 0 6
17000: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
17001: LD_INT 0
17003: PPUSH
17004: PPUSH
// if not vehicle or not factory then
17005: LD_VAR 0 1
17009: NOT
17010: PUSH
17011: LD_VAR 0 2
17015: NOT
17016: OR
17017: IFFALSE 17021
// exit ;
17019: GO 17252
// if factoryWaypoints >= factory then
17021: LD_EXP 59
17025: PUSH
17026: LD_VAR 0 2
17030: GREATEREQUAL
17031: IFFALSE 17252
// if factoryWaypoints [ factory ] then
17033: LD_EXP 59
17037: PUSH
17038: LD_VAR 0 2
17042: ARRAY
17043: IFFALSE 17252
// begin if GetControl ( vehicle ) = control_manual then
17045: LD_VAR 0 1
17049: PPUSH
17050: CALL_OW 263
17054: PUSH
17055: LD_INT 1
17057: EQUAL
17058: IFFALSE 17139
// begin driver := IsDrivenBy ( vehicle ) ;
17060: LD_ADDR_VAR 0 4
17064: PUSH
17065: LD_VAR 0 1
17069: PPUSH
17070: CALL_OW 311
17074: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17075: LD_VAR 0 4
17079: PPUSH
17080: LD_EXP 59
17084: PUSH
17085: LD_VAR 0 2
17089: ARRAY
17090: PUSH
17091: LD_INT 3
17093: ARRAY
17094: PPUSH
17095: LD_EXP 59
17099: PUSH
17100: LD_VAR 0 2
17104: ARRAY
17105: PUSH
17106: LD_INT 4
17108: ARRAY
17109: PPUSH
17110: CALL_OW 171
// AddComExitVehicle ( driver ) ;
17114: LD_VAR 0 4
17118: PPUSH
17119: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
17123: LD_VAR 0 4
17127: PPUSH
17128: LD_VAR 0 2
17132: PPUSH
17133: CALL_OW 180
// end else
17137: GO 17252
// if GetControl ( vehicle ) = control_remote then
17139: LD_VAR 0 1
17143: PPUSH
17144: CALL_OW 263
17148: PUSH
17149: LD_INT 2
17151: EQUAL
17152: IFFALSE 17213
// begin wait ( 0 0$2 ) ;
17154: LD_INT 70
17156: PPUSH
17157: CALL_OW 67
// if Connect ( vehicle ) then
17161: LD_VAR 0 1
17165: PPUSH
17166: CALL 29682 0 1
17170: IFFALSE 17211
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17172: LD_VAR 0 1
17176: PPUSH
17177: LD_EXP 59
17181: PUSH
17182: LD_VAR 0 2
17186: ARRAY
17187: PUSH
17188: LD_INT 3
17190: ARRAY
17191: PPUSH
17192: LD_EXP 59
17196: PUSH
17197: LD_VAR 0 2
17201: ARRAY
17202: PUSH
17203: LD_INT 4
17205: ARRAY
17206: PPUSH
17207: CALL_OW 171
// end else
17211: GO 17252
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17213: LD_VAR 0 1
17217: PPUSH
17218: LD_EXP 59
17222: PUSH
17223: LD_VAR 0 2
17227: ARRAY
17228: PUSH
17229: LD_INT 3
17231: ARRAY
17232: PPUSH
17233: LD_EXP 59
17237: PUSH
17238: LD_VAR 0 2
17242: ARRAY
17243: PUSH
17244: LD_INT 4
17246: ARRAY
17247: PPUSH
17248: CALL_OW 171
// end ; end ;
17252: LD_VAR 0 3
17256: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
17257: LD_INT 0
17259: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
17260: LD_VAR 0 1
17264: PUSH
17265: LD_INT 250
17267: EQUAL
17268: PUSH
17269: LD_VAR 0 2
17273: PPUSH
17274: CALL_OW 264
17278: PUSH
17279: LD_EXP 79
17283: EQUAL
17284: AND
17285: IFFALSE 17306
// MinerPlaceMine ( unit , x , y ) ;
17287: LD_VAR 0 2
17291: PPUSH
17292: LD_VAR 0 4
17296: PPUSH
17297: LD_VAR 0 5
17301: PPUSH
17302: CALL 19705 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
17306: LD_VAR 0 1
17310: PUSH
17311: LD_INT 251
17313: EQUAL
17314: PUSH
17315: LD_VAR 0 2
17319: PPUSH
17320: CALL_OW 264
17324: PUSH
17325: LD_EXP 79
17329: EQUAL
17330: AND
17331: IFFALSE 17352
// MinerDetonateMine ( unit , x , y ) ;
17333: LD_VAR 0 2
17337: PPUSH
17338: LD_VAR 0 4
17342: PPUSH
17343: LD_VAR 0 5
17347: PPUSH
17348: CALL 19982 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
17352: LD_VAR 0 1
17356: PUSH
17357: LD_INT 252
17359: EQUAL
17360: PUSH
17361: LD_VAR 0 2
17365: PPUSH
17366: CALL_OW 264
17370: PUSH
17371: LD_EXP 79
17375: EQUAL
17376: AND
17377: IFFALSE 17398
// MinerCreateMinefield ( unit , x , y ) ;
17379: LD_VAR 0 2
17383: PPUSH
17384: LD_VAR 0 4
17388: PPUSH
17389: LD_VAR 0 5
17393: PPUSH
17394: CALL 20399 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
17398: LD_VAR 0 1
17402: PUSH
17403: LD_INT 253
17405: EQUAL
17406: PUSH
17407: LD_VAR 0 2
17411: PPUSH
17412: CALL_OW 257
17416: PUSH
17417: LD_INT 5
17419: EQUAL
17420: AND
17421: IFFALSE 17442
// ComBinocular ( unit , x , y ) ;
17423: LD_VAR 0 2
17427: PPUSH
17428: LD_VAR 0 4
17432: PPUSH
17433: LD_VAR 0 5
17437: PPUSH
17438: CALL 20770 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
17442: LD_VAR 0 1
17446: PUSH
17447: LD_INT 254
17449: EQUAL
17450: PUSH
17451: LD_VAR 0 2
17455: PPUSH
17456: CALL_OW 264
17460: PUSH
17461: LD_EXP 74
17465: EQUAL
17466: AND
17467: PUSH
17468: LD_VAR 0 3
17472: PPUSH
17473: CALL_OW 263
17477: PUSH
17478: LD_INT 3
17480: EQUAL
17481: AND
17482: IFFALSE 17498
// HackDestroyVehicle ( unit , selectedUnit ) ;
17484: LD_VAR 0 2
17488: PPUSH
17489: LD_VAR 0 3
17493: PPUSH
17494: CALL 19065 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
17498: LD_VAR 0 1
17502: PUSH
17503: LD_INT 255
17505: EQUAL
17506: PUSH
17507: LD_VAR 0 2
17511: PPUSH
17512: CALL_OW 264
17516: PUSH
17517: LD_INT 14
17519: PUSH
17520: LD_INT 53
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: IN
17527: AND
17528: PUSH
17529: LD_VAR 0 4
17533: PPUSH
17534: LD_VAR 0 5
17538: PPUSH
17539: CALL_OW 488
17543: AND
17544: IFFALSE 17568
// CutTreeXYR ( unit , x , y , 12 ) ;
17546: LD_VAR 0 2
17550: PPUSH
17551: LD_VAR 0 4
17555: PPUSH
17556: LD_VAR 0 5
17560: PPUSH
17561: LD_INT 12
17563: PPUSH
17564: CALL 17631 0 4
// if cmd = 256 then
17568: LD_VAR 0 1
17572: PUSH
17573: LD_INT 256
17575: EQUAL
17576: IFFALSE 17597
// SetFactoryWaypoint ( unit , x , y ) ;
17578: LD_VAR 0 2
17582: PPUSH
17583: LD_VAR 0 4
17587: PPUSH
17588: LD_VAR 0 5
17592: PPUSH
17593: CALL 15566 0 3
// if cmd = 257 then
17597: LD_VAR 0 1
17601: PUSH
17602: LD_INT 257
17604: EQUAL
17605: IFFALSE 17626
// SetWarehouseGatheringPoint ( unit , x , y ) ;
17607: LD_VAR 0 2
17611: PPUSH
17612: LD_VAR 0 4
17616: PPUSH
17617: LD_VAR 0 5
17621: PPUSH
17622: CALL 15928 0 3
// end ;
17626: LD_VAR 0 6
17630: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17631: LD_INT 0
17633: PPUSH
17634: PPUSH
17635: PPUSH
17636: PPUSH
17637: PPUSH
17638: PPUSH
17639: PPUSH
17640: PPUSH
17641: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
17642: LD_VAR 0 1
17646: NOT
17647: PUSH
17648: LD_VAR 0 2
17652: PPUSH
17653: LD_VAR 0 3
17657: PPUSH
17658: CALL_OW 488
17662: NOT
17663: OR
17664: PUSH
17665: LD_VAR 0 4
17669: NOT
17670: OR
17671: IFFALSE 17675
// exit ;
17673: GO 18015
// list := [ ] ;
17675: LD_ADDR_VAR 0 13
17679: PUSH
17680: EMPTY
17681: ST_TO_ADDR
// if x - r < 0 then
17682: LD_VAR 0 2
17686: PUSH
17687: LD_VAR 0 4
17691: MINUS
17692: PUSH
17693: LD_INT 0
17695: LESS
17696: IFFALSE 17708
// min_x := 0 else
17698: LD_ADDR_VAR 0 7
17702: PUSH
17703: LD_INT 0
17705: ST_TO_ADDR
17706: GO 17724
// min_x := x - r ;
17708: LD_ADDR_VAR 0 7
17712: PUSH
17713: LD_VAR 0 2
17717: PUSH
17718: LD_VAR 0 4
17722: MINUS
17723: ST_TO_ADDR
// if y - r < 0 then
17724: LD_VAR 0 3
17728: PUSH
17729: LD_VAR 0 4
17733: MINUS
17734: PUSH
17735: LD_INT 0
17737: LESS
17738: IFFALSE 17750
// min_y := 0 else
17740: LD_ADDR_VAR 0 8
17744: PUSH
17745: LD_INT 0
17747: ST_TO_ADDR
17748: GO 17766
// min_y := y - r ;
17750: LD_ADDR_VAR 0 8
17754: PUSH
17755: LD_VAR 0 3
17759: PUSH
17760: LD_VAR 0 4
17764: MINUS
17765: ST_TO_ADDR
// max_x := x + r ;
17766: LD_ADDR_VAR 0 9
17770: PUSH
17771: LD_VAR 0 2
17775: PUSH
17776: LD_VAR 0 4
17780: PLUS
17781: ST_TO_ADDR
// max_y := y + r ;
17782: LD_ADDR_VAR 0 10
17786: PUSH
17787: LD_VAR 0 3
17791: PUSH
17792: LD_VAR 0 4
17796: PLUS
17797: ST_TO_ADDR
// for _x = min_x to max_x do
17798: LD_ADDR_VAR 0 11
17802: PUSH
17803: DOUBLE
17804: LD_VAR 0 7
17808: DEC
17809: ST_TO_ADDR
17810: LD_VAR 0 9
17814: PUSH
17815: FOR_TO
17816: IFFALSE 17933
// for _y = min_y to max_y do
17818: LD_ADDR_VAR 0 12
17822: PUSH
17823: DOUBLE
17824: LD_VAR 0 8
17828: DEC
17829: ST_TO_ADDR
17830: LD_VAR 0 10
17834: PUSH
17835: FOR_TO
17836: IFFALSE 17929
// begin if not ValidHex ( _x , _y ) then
17838: LD_VAR 0 11
17842: PPUSH
17843: LD_VAR 0 12
17847: PPUSH
17848: CALL_OW 488
17852: NOT
17853: IFFALSE 17857
// continue ;
17855: GO 17835
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17857: LD_VAR 0 11
17861: PPUSH
17862: LD_VAR 0 12
17866: PPUSH
17867: CALL_OW 351
17871: PUSH
17872: LD_VAR 0 11
17876: PPUSH
17877: LD_VAR 0 12
17881: PPUSH
17882: CALL_OW 554
17886: AND
17887: IFFALSE 17927
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17889: LD_ADDR_VAR 0 13
17893: PUSH
17894: LD_VAR 0 13
17898: PPUSH
17899: LD_VAR 0 13
17903: PUSH
17904: LD_INT 1
17906: PLUS
17907: PPUSH
17908: LD_VAR 0 11
17912: PUSH
17913: LD_VAR 0 12
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PPUSH
17922: CALL_OW 2
17926: ST_TO_ADDR
// end ;
17927: GO 17835
17929: POP
17930: POP
17931: GO 17815
17933: POP
17934: POP
// if not list then
17935: LD_VAR 0 13
17939: NOT
17940: IFFALSE 17944
// exit ;
17942: GO 18015
// for i in list do
17944: LD_ADDR_VAR 0 6
17948: PUSH
17949: LD_VAR 0 13
17953: PUSH
17954: FOR_IN
17955: IFFALSE 18013
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
17957: LD_VAR 0 1
17961: PPUSH
17962: LD_STRING M
17964: PUSH
17965: LD_VAR 0 6
17969: PUSH
17970: LD_INT 1
17972: ARRAY
17973: PUSH
17974: LD_VAR 0 6
17978: PUSH
17979: LD_INT 2
17981: ARRAY
17982: PUSH
17983: LD_INT 0
17985: PUSH
17986: LD_INT 0
17988: PUSH
17989: LD_INT 0
17991: PUSH
17992: LD_INT 0
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: PUSH
18004: EMPTY
18005: LIST
18006: PPUSH
18007: CALL_OW 447
18011: GO 17954
18013: POP
18014: POP
// end ;
18015: LD_VAR 0 5
18019: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18020: LD_EXP 62
18024: NOT
18025: IFFALSE 18075
18027: GO 18029
18029: DISABLE
// begin initHack := true ;
18030: LD_ADDR_EXP 62
18034: PUSH
18035: LD_INT 1
18037: ST_TO_ADDR
// hackTanks := [ ] ;
18038: LD_ADDR_EXP 63
18042: PUSH
18043: EMPTY
18044: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18045: LD_ADDR_EXP 64
18049: PUSH
18050: EMPTY
18051: ST_TO_ADDR
// hackLimit := 3 ;
18052: LD_ADDR_EXP 65
18056: PUSH
18057: LD_INT 3
18059: ST_TO_ADDR
// hackDist := 12 ;
18060: LD_ADDR_EXP 66
18064: PUSH
18065: LD_INT 12
18067: ST_TO_ADDR
// hackCounter := [ ] ;
18068: LD_ADDR_EXP 67
18072: PUSH
18073: EMPTY
18074: ST_TO_ADDR
// end ;
18075: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18076: LD_EXP 62
18080: PUSH
18081: LD_INT 34
18083: PUSH
18084: LD_EXP 74
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PPUSH
18093: CALL_OW 69
18097: AND
18098: IFFALSE 18353
18100: GO 18102
18102: DISABLE
18103: LD_INT 0
18105: PPUSH
18106: PPUSH
// begin enable ;
18107: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18108: LD_ADDR_VAR 0 1
18112: PUSH
18113: LD_INT 34
18115: PUSH
18116: LD_EXP 74
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PPUSH
18125: CALL_OW 69
18129: PUSH
18130: FOR_IN
18131: IFFALSE 18351
// begin if not i in hackTanks then
18133: LD_VAR 0 1
18137: PUSH
18138: LD_EXP 63
18142: IN
18143: NOT
18144: IFFALSE 18227
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18146: LD_ADDR_EXP 63
18150: PUSH
18151: LD_EXP 63
18155: PPUSH
18156: LD_EXP 63
18160: PUSH
18161: LD_INT 1
18163: PLUS
18164: PPUSH
18165: LD_VAR 0 1
18169: PPUSH
18170: CALL_OW 1
18174: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18175: LD_ADDR_EXP 64
18179: PUSH
18180: LD_EXP 64
18184: PPUSH
18185: LD_EXP 64
18189: PUSH
18190: LD_INT 1
18192: PLUS
18193: PPUSH
18194: EMPTY
18195: PPUSH
18196: CALL_OW 1
18200: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18201: LD_ADDR_EXP 67
18205: PUSH
18206: LD_EXP 67
18210: PPUSH
18211: LD_EXP 67
18215: PUSH
18216: LD_INT 1
18218: PLUS
18219: PPUSH
18220: EMPTY
18221: PPUSH
18222: CALL_OW 1
18226: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18227: LD_VAR 0 1
18231: PPUSH
18232: CALL_OW 302
18236: NOT
18237: IFFALSE 18250
// begin HackUnlinkAll ( i ) ;
18239: LD_VAR 0 1
18243: PPUSH
18244: CALL 18356 0 1
// continue ;
18248: GO 18130
// end ; HackCheckCapturedStatus ( i ) ;
18250: LD_VAR 0 1
18254: PPUSH
18255: CALL 18799 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18259: LD_ADDR_VAR 0 2
18263: PUSH
18264: LD_INT 81
18266: PUSH
18267: LD_VAR 0 1
18271: PPUSH
18272: CALL_OW 255
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: PUSH
18281: LD_INT 33
18283: PUSH
18284: LD_INT 3
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 91
18293: PUSH
18294: LD_VAR 0 1
18298: PUSH
18299: LD_EXP 66
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: LIST
18308: PUSH
18309: LD_INT 50
18311: PUSH
18312: EMPTY
18313: LIST
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: PPUSH
18321: CALL_OW 69
18325: ST_TO_ADDR
// if not tmp then
18326: LD_VAR 0 2
18330: NOT
18331: IFFALSE 18335
// continue ;
18333: GO 18130
// HackLink ( i , tmp ) ;
18335: LD_VAR 0 1
18339: PPUSH
18340: LD_VAR 0 2
18344: PPUSH
18345: CALL 18492 0 2
// end ;
18349: GO 18130
18351: POP
18352: POP
// end ;
18353: PPOPN 2
18355: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18356: LD_INT 0
18358: PPUSH
18359: PPUSH
18360: PPUSH
// if not hack in hackTanks then
18361: LD_VAR 0 1
18365: PUSH
18366: LD_EXP 63
18370: IN
18371: NOT
18372: IFFALSE 18376
// exit ;
18374: GO 18487
// index := GetElementIndex ( hackTanks , hack ) ;
18376: LD_ADDR_VAR 0 4
18380: PUSH
18381: LD_EXP 63
18385: PPUSH
18386: LD_VAR 0 1
18390: PPUSH
18391: CALL 26496 0 2
18395: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18396: LD_EXP 64
18400: PUSH
18401: LD_VAR 0 4
18405: ARRAY
18406: IFFALSE 18487
// begin for i in hackTanksCaptured [ index ] do
18408: LD_ADDR_VAR 0 3
18412: PUSH
18413: LD_EXP 64
18417: PUSH
18418: LD_VAR 0 4
18422: ARRAY
18423: PUSH
18424: FOR_IN
18425: IFFALSE 18451
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18427: LD_VAR 0 3
18431: PUSH
18432: LD_INT 1
18434: ARRAY
18435: PPUSH
18436: LD_VAR 0 3
18440: PUSH
18441: LD_INT 2
18443: ARRAY
18444: PPUSH
18445: CALL_OW 235
18449: GO 18424
18451: POP
18452: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18453: LD_ADDR_EXP 64
18457: PUSH
18458: LD_EXP 64
18462: PPUSH
18463: LD_VAR 0 4
18467: PPUSH
18468: EMPTY
18469: PPUSH
18470: CALL_OW 1
18474: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18475: LD_VAR 0 1
18479: PPUSH
18480: LD_INT 0
18482: PPUSH
18483: CALL_OW 505
// end ; end ;
18487: LD_VAR 0 2
18491: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18492: LD_INT 0
18494: PPUSH
18495: PPUSH
18496: PPUSH
// if not hack in hackTanks or not vehicles then
18497: LD_VAR 0 1
18501: PUSH
18502: LD_EXP 63
18506: IN
18507: NOT
18508: PUSH
18509: LD_VAR 0 2
18513: NOT
18514: OR
18515: IFFALSE 18519
// exit ;
18517: GO 18794
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18519: LD_ADDR_VAR 0 2
18523: PUSH
18524: LD_VAR 0 1
18528: PPUSH
18529: LD_VAR 0 2
18533: PPUSH
18534: LD_INT 1
18536: PPUSH
18537: LD_INT 1
18539: PPUSH
18540: CALL 27146 0 4
18544: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18545: LD_ADDR_VAR 0 5
18549: PUSH
18550: LD_EXP 63
18554: PPUSH
18555: LD_VAR 0 1
18559: PPUSH
18560: CALL 26496 0 2
18564: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18565: LD_EXP 64
18569: PUSH
18570: LD_VAR 0 5
18574: ARRAY
18575: PUSH
18576: LD_EXP 65
18580: LESS
18581: IFFALSE 18770
// begin for i := 1 to vehicles do
18583: LD_ADDR_VAR 0 4
18587: PUSH
18588: DOUBLE
18589: LD_INT 1
18591: DEC
18592: ST_TO_ADDR
18593: LD_VAR 0 2
18597: PUSH
18598: FOR_TO
18599: IFFALSE 18768
// begin if hackTanksCaptured [ index ] = hackLimit then
18601: LD_EXP 64
18605: PUSH
18606: LD_VAR 0 5
18610: ARRAY
18611: PUSH
18612: LD_EXP 65
18616: EQUAL
18617: IFFALSE 18621
// break ;
18619: GO 18768
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18621: LD_ADDR_EXP 67
18625: PUSH
18626: LD_EXP 67
18630: PPUSH
18631: LD_VAR 0 5
18635: PPUSH
18636: LD_EXP 67
18640: PUSH
18641: LD_VAR 0 5
18645: ARRAY
18646: PUSH
18647: LD_INT 1
18649: PLUS
18650: PPUSH
18651: CALL_OW 1
18655: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18656: LD_ADDR_EXP 64
18660: PUSH
18661: LD_EXP 64
18665: PPUSH
18666: LD_VAR 0 5
18670: PUSH
18671: LD_EXP 64
18675: PUSH
18676: LD_VAR 0 5
18680: ARRAY
18681: PUSH
18682: LD_INT 1
18684: PLUS
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PPUSH
18690: LD_VAR 0 2
18694: PUSH
18695: LD_VAR 0 4
18699: ARRAY
18700: PUSH
18701: LD_VAR 0 2
18705: PUSH
18706: LD_VAR 0 4
18710: ARRAY
18711: PPUSH
18712: CALL_OW 255
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PPUSH
18721: CALL 26711 0 3
18725: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
18726: LD_VAR 0 2
18730: PUSH
18731: LD_VAR 0 4
18735: ARRAY
18736: PPUSH
18737: LD_VAR 0 1
18741: PPUSH
18742: CALL_OW 255
18746: PPUSH
18747: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
18751: LD_VAR 0 2
18755: PUSH
18756: LD_VAR 0 4
18760: ARRAY
18761: PPUSH
18762: CALL_OW 141
// end ;
18766: GO 18598
18768: POP
18769: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18770: LD_VAR 0 1
18774: PPUSH
18775: LD_EXP 64
18779: PUSH
18780: LD_VAR 0 5
18784: ARRAY
18785: PUSH
18786: LD_INT 0
18788: PLUS
18789: PPUSH
18790: CALL_OW 505
// end ;
18794: LD_VAR 0 3
18798: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
18799: LD_INT 0
18801: PPUSH
18802: PPUSH
18803: PPUSH
18804: PPUSH
// if not hack in hackTanks then
18805: LD_VAR 0 1
18809: PUSH
18810: LD_EXP 63
18814: IN
18815: NOT
18816: IFFALSE 18820
// exit ;
18818: GO 19060
// index := GetElementIndex ( hackTanks , hack ) ;
18820: LD_ADDR_VAR 0 4
18824: PUSH
18825: LD_EXP 63
18829: PPUSH
18830: LD_VAR 0 1
18834: PPUSH
18835: CALL 26496 0 2
18839: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
18840: LD_ADDR_VAR 0 3
18844: PUSH
18845: DOUBLE
18846: LD_EXP 64
18850: PUSH
18851: LD_VAR 0 4
18855: ARRAY
18856: INC
18857: ST_TO_ADDR
18858: LD_INT 1
18860: PUSH
18861: FOR_DOWNTO
18862: IFFALSE 19034
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
18864: LD_ADDR_VAR 0 5
18868: PUSH
18869: LD_EXP 64
18873: PUSH
18874: LD_VAR 0 4
18878: ARRAY
18879: PUSH
18880: LD_VAR 0 3
18884: ARRAY
18885: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
18886: LD_VAR 0 5
18890: PUSH
18891: LD_INT 1
18893: ARRAY
18894: PPUSH
18895: CALL_OW 302
18899: NOT
18900: PUSH
18901: LD_VAR 0 5
18905: PUSH
18906: LD_INT 1
18908: ARRAY
18909: PPUSH
18910: CALL_OW 255
18914: PUSH
18915: LD_VAR 0 1
18919: PPUSH
18920: CALL_OW 255
18924: NONEQUAL
18925: OR
18926: IFFALSE 19032
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
18928: LD_VAR 0 5
18932: PUSH
18933: LD_INT 1
18935: ARRAY
18936: PPUSH
18937: CALL_OW 305
18941: PUSH
18942: LD_VAR 0 5
18946: PUSH
18947: LD_INT 1
18949: ARRAY
18950: PPUSH
18951: CALL_OW 255
18955: PUSH
18956: LD_VAR 0 1
18960: PPUSH
18961: CALL_OW 255
18965: EQUAL
18966: AND
18967: IFFALSE 18991
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
18969: LD_VAR 0 5
18973: PUSH
18974: LD_INT 1
18976: ARRAY
18977: PPUSH
18978: LD_VAR 0 5
18982: PUSH
18983: LD_INT 2
18985: ARRAY
18986: PPUSH
18987: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
18991: LD_ADDR_EXP 64
18995: PUSH
18996: LD_EXP 64
19000: PPUSH
19001: LD_VAR 0 4
19005: PPUSH
19006: LD_EXP 64
19010: PUSH
19011: LD_VAR 0 4
19015: ARRAY
19016: PPUSH
19017: LD_VAR 0 3
19021: PPUSH
19022: CALL_OW 3
19026: PPUSH
19027: CALL_OW 1
19031: ST_TO_ADDR
// end ; end ;
19032: GO 18861
19034: POP
19035: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19036: LD_VAR 0 1
19040: PPUSH
19041: LD_EXP 64
19045: PUSH
19046: LD_VAR 0 4
19050: ARRAY
19051: PUSH
19052: LD_INT 0
19054: PLUS
19055: PPUSH
19056: CALL_OW 505
// end ;
19060: LD_VAR 0 2
19064: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19065: LD_INT 0
19067: PPUSH
19068: PPUSH
19069: PPUSH
19070: PPUSH
// if not hack in hackTanks then
19071: LD_VAR 0 1
19075: PUSH
19076: LD_EXP 63
19080: IN
19081: NOT
19082: IFFALSE 19086
// exit ;
19084: GO 19171
// index := GetElementIndex ( hackTanks , hack ) ;
19086: LD_ADDR_VAR 0 5
19090: PUSH
19091: LD_EXP 63
19095: PPUSH
19096: LD_VAR 0 1
19100: PPUSH
19101: CALL 26496 0 2
19105: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19106: LD_ADDR_VAR 0 4
19110: PUSH
19111: DOUBLE
19112: LD_INT 1
19114: DEC
19115: ST_TO_ADDR
19116: LD_EXP 64
19120: PUSH
19121: LD_VAR 0 5
19125: ARRAY
19126: PUSH
19127: FOR_TO
19128: IFFALSE 19169
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19130: LD_EXP 64
19134: PUSH
19135: LD_VAR 0 5
19139: ARRAY
19140: PUSH
19141: LD_VAR 0 4
19145: ARRAY
19146: PUSH
19147: LD_INT 1
19149: ARRAY
19150: PUSH
19151: LD_VAR 0 2
19155: EQUAL
19156: IFFALSE 19167
// KillUnit ( vehicle ) ;
19158: LD_VAR 0 2
19162: PPUSH
19163: CALL_OW 66
19167: GO 19127
19169: POP
19170: POP
// end ;
19171: LD_VAR 0 3
19175: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19176: LD_EXP 68
19180: NOT
19181: IFFALSE 19216
19183: GO 19185
19185: DISABLE
// begin initMiner := true ;
19186: LD_ADDR_EXP 68
19190: PUSH
19191: LD_INT 1
19193: ST_TO_ADDR
// minersList := [ ] ;
19194: LD_ADDR_EXP 69
19198: PUSH
19199: EMPTY
19200: ST_TO_ADDR
// minerMinesList := [ ] ;
19201: LD_ADDR_EXP 70
19205: PUSH
19206: EMPTY
19207: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
19208: LD_ADDR_EXP 71
19212: PUSH
19213: LD_INT 5
19215: ST_TO_ADDR
// end ;
19216: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
19217: LD_EXP 68
19221: PUSH
19222: LD_INT 34
19224: PUSH
19225: LD_EXP 79
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: PPUSH
19234: CALL_OW 69
19238: AND
19239: IFFALSE 19702
19241: GO 19243
19243: DISABLE
19244: LD_INT 0
19246: PPUSH
19247: PPUSH
19248: PPUSH
19249: PPUSH
// begin enable ;
19250: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
19251: LD_ADDR_VAR 0 1
19255: PUSH
19256: LD_INT 34
19258: PUSH
19259: LD_EXP 79
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PPUSH
19268: CALL_OW 69
19272: PUSH
19273: FOR_IN
19274: IFFALSE 19346
// begin if not i in minersList then
19276: LD_VAR 0 1
19280: PUSH
19281: LD_EXP 69
19285: IN
19286: NOT
19287: IFFALSE 19344
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
19289: LD_ADDR_EXP 69
19293: PUSH
19294: LD_EXP 69
19298: PPUSH
19299: LD_EXP 69
19303: PUSH
19304: LD_INT 1
19306: PLUS
19307: PPUSH
19308: LD_VAR 0 1
19312: PPUSH
19313: CALL_OW 1
19317: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
19318: LD_ADDR_EXP 70
19322: PUSH
19323: LD_EXP 70
19327: PPUSH
19328: LD_EXP 70
19332: PUSH
19333: LD_INT 1
19335: PLUS
19336: PPUSH
19337: EMPTY
19338: PPUSH
19339: CALL_OW 1
19343: ST_TO_ADDR
// end end ;
19344: GO 19273
19346: POP
19347: POP
// for i := minerMinesList downto 1 do
19348: LD_ADDR_VAR 0 1
19352: PUSH
19353: DOUBLE
19354: LD_EXP 70
19358: INC
19359: ST_TO_ADDR
19360: LD_INT 1
19362: PUSH
19363: FOR_DOWNTO
19364: IFFALSE 19700
// begin if IsLive ( minersList [ i ] ) then
19366: LD_EXP 69
19370: PUSH
19371: LD_VAR 0 1
19375: ARRAY
19376: PPUSH
19377: CALL_OW 300
19381: IFFALSE 19409
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
19383: LD_EXP 69
19387: PUSH
19388: LD_VAR 0 1
19392: ARRAY
19393: PPUSH
19394: LD_EXP 70
19398: PUSH
19399: LD_VAR 0 1
19403: ARRAY
19404: PPUSH
19405: CALL_OW 505
// if not minerMinesList [ i ] then
19409: LD_EXP 70
19413: PUSH
19414: LD_VAR 0 1
19418: ARRAY
19419: NOT
19420: IFFALSE 19424
// continue ;
19422: GO 19363
// for j := minerMinesList [ i ] downto 1 do
19424: LD_ADDR_VAR 0 2
19428: PUSH
19429: DOUBLE
19430: LD_EXP 70
19434: PUSH
19435: LD_VAR 0 1
19439: ARRAY
19440: INC
19441: ST_TO_ADDR
19442: LD_INT 1
19444: PUSH
19445: FOR_DOWNTO
19446: IFFALSE 19696
// begin side := GetSide ( minersList [ i ] ) ;
19448: LD_ADDR_VAR 0 3
19452: PUSH
19453: LD_EXP 69
19457: PUSH
19458: LD_VAR 0 1
19462: ARRAY
19463: PPUSH
19464: CALL_OW 255
19468: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19469: LD_ADDR_VAR 0 4
19473: PUSH
19474: LD_EXP 70
19478: PUSH
19479: LD_VAR 0 1
19483: ARRAY
19484: PUSH
19485: LD_VAR 0 2
19489: ARRAY
19490: PUSH
19491: LD_INT 1
19493: ARRAY
19494: PPUSH
19495: LD_EXP 70
19499: PUSH
19500: LD_VAR 0 1
19504: ARRAY
19505: PUSH
19506: LD_VAR 0 2
19510: ARRAY
19511: PUSH
19512: LD_INT 2
19514: ARRAY
19515: PPUSH
19516: CALL_OW 428
19520: ST_TO_ADDR
// if not tmp then
19521: LD_VAR 0 4
19525: NOT
19526: IFFALSE 19530
// continue ;
19528: GO 19445
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19530: LD_VAR 0 4
19534: PUSH
19535: LD_INT 81
19537: PUSH
19538: LD_VAR 0 3
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PPUSH
19547: CALL_OW 69
19551: IN
19552: PUSH
19553: LD_EXP 70
19557: PUSH
19558: LD_VAR 0 1
19562: ARRAY
19563: PUSH
19564: LD_VAR 0 2
19568: ARRAY
19569: PUSH
19570: LD_INT 1
19572: ARRAY
19573: PPUSH
19574: LD_EXP 70
19578: PUSH
19579: LD_VAR 0 1
19583: ARRAY
19584: PUSH
19585: LD_VAR 0 2
19589: ARRAY
19590: PUSH
19591: LD_INT 2
19593: ARRAY
19594: PPUSH
19595: CALL_OW 458
19599: AND
19600: IFFALSE 19694
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
19602: LD_EXP 70
19606: PUSH
19607: LD_VAR 0 1
19611: ARRAY
19612: PUSH
19613: LD_VAR 0 2
19617: ARRAY
19618: PUSH
19619: LD_INT 1
19621: ARRAY
19622: PPUSH
19623: LD_EXP 70
19627: PUSH
19628: LD_VAR 0 1
19632: ARRAY
19633: PUSH
19634: LD_VAR 0 2
19638: ARRAY
19639: PUSH
19640: LD_INT 2
19642: ARRAY
19643: PPUSH
19644: LD_VAR 0 3
19648: PPUSH
19649: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
19653: LD_ADDR_EXP 70
19657: PUSH
19658: LD_EXP 70
19662: PPUSH
19663: LD_VAR 0 1
19667: PPUSH
19668: LD_EXP 70
19672: PUSH
19673: LD_VAR 0 1
19677: ARRAY
19678: PPUSH
19679: LD_VAR 0 2
19683: PPUSH
19684: CALL_OW 3
19688: PPUSH
19689: CALL_OW 1
19693: ST_TO_ADDR
// end ; end ;
19694: GO 19445
19696: POP
19697: POP
// end ;
19698: GO 19363
19700: POP
19701: POP
// end ;
19702: PPOPN 4
19704: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
19705: LD_INT 0
19707: PPUSH
19708: PPUSH
// result := false ;
19709: LD_ADDR_VAR 0 4
19713: PUSH
19714: LD_INT 0
19716: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
19717: LD_VAR 0 1
19721: PPUSH
19722: CALL_OW 264
19726: PUSH
19727: LD_EXP 79
19731: EQUAL
19732: NOT
19733: IFFALSE 19737
// exit ;
19735: GO 19977
// index := GetElementIndex ( minersList , unit ) ;
19737: LD_ADDR_VAR 0 5
19741: PUSH
19742: LD_EXP 69
19746: PPUSH
19747: LD_VAR 0 1
19751: PPUSH
19752: CALL 26496 0 2
19756: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
19757: LD_EXP 70
19761: PUSH
19762: LD_VAR 0 5
19766: ARRAY
19767: PUSH
19768: LD_EXP 71
19772: GREATEREQUAL
19773: IFFALSE 19777
// exit ;
19775: GO 19977
// ComMoveXY ( unit , x , y ) ;
19777: LD_VAR 0 1
19781: PPUSH
19782: LD_VAR 0 2
19786: PPUSH
19787: LD_VAR 0 3
19791: PPUSH
19792: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19796: LD_INT 35
19798: PPUSH
19799: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
19803: LD_VAR 0 1
19807: PPUSH
19808: LD_VAR 0 2
19812: PPUSH
19813: LD_VAR 0 3
19817: PPUSH
19818: CALL 57782 0 3
19822: NOT
19823: PUSH
19824: LD_VAR 0 1
19828: PPUSH
19829: CALL_OW 314
19833: AND
19834: IFFALSE 19838
// exit ;
19836: GO 19977
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
19838: LD_VAR 0 2
19842: PPUSH
19843: LD_VAR 0 3
19847: PPUSH
19848: CALL_OW 428
19852: PUSH
19853: LD_VAR 0 1
19857: EQUAL
19858: PUSH
19859: LD_VAR 0 1
19863: PPUSH
19864: CALL_OW 314
19868: NOT
19869: AND
19870: IFFALSE 19796
// PlaySoundXY ( x , y , PlantMine ) ;
19872: LD_VAR 0 2
19876: PPUSH
19877: LD_VAR 0 3
19881: PPUSH
19882: LD_STRING PlantMine
19884: PPUSH
19885: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
19889: LD_VAR 0 2
19893: PPUSH
19894: LD_VAR 0 3
19898: PPUSH
19899: LD_VAR 0 1
19903: PPUSH
19904: CALL_OW 255
19908: PPUSH
19909: LD_INT 0
19911: PPUSH
19912: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
19916: LD_ADDR_EXP 70
19920: PUSH
19921: LD_EXP 70
19925: PPUSH
19926: LD_VAR 0 5
19930: PUSH
19931: LD_EXP 70
19935: PUSH
19936: LD_VAR 0 5
19940: ARRAY
19941: PUSH
19942: LD_INT 1
19944: PLUS
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PPUSH
19950: LD_VAR 0 2
19954: PUSH
19955: LD_VAR 0 3
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PPUSH
19964: CALL 26711 0 3
19968: ST_TO_ADDR
// result := true ;
19969: LD_ADDR_VAR 0 4
19973: PUSH
19974: LD_INT 1
19976: ST_TO_ADDR
// end ;
19977: LD_VAR 0 4
19981: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
19982: LD_INT 0
19984: PPUSH
19985: PPUSH
19986: PPUSH
// if not unit in minersList then
19987: LD_VAR 0 1
19991: PUSH
19992: LD_EXP 69
19996: IN
19997: NOT
19998: IFFALSE 20002
// exit ;
20000: GO 20394
// index := GetElementIndex ( minersList , unit ) ;
20002: LD_ADDR_VAR 0 6
20006: PUSH
20007: LD_EXP 69
20011: PPUSH
20012: LD_VAR 0 1
20016: PPUSH
20017: CALL 26496 0 2
20021: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20022: LD_ADDR_VAR 0 5
20026: PUSH
20027: DOUBLE
20028: LD_EXP 70
20032: PUSH
20033: LD_VAR 0 6
20037: ARRAY
20038: INC
20039: ST_TO_ADDR
20040: LD_INT 1
20042: PUSH
20043: FOR_DOWNTO
20044: IFFALSE 20205
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20046: LD_EXP 70
20050: PUSH
20051: LD_VAR 0 6
20055: ARRAY
20056: PUSH
20057: LD_VAR 0 5
20061: ARRAY
20062: PUSH
20063: LD_INT 1
20065: ARRAY
20066: PUSH
20067: LD_VAR 0 2
20071: EQUAL
20072: PUSH
20073: LD_EXP 70
20077: PUSH
20078: LD_VAR 0 6
20082: ARRAY
20083: PUSH
20084: LD_VAR 0 5
20088: ARRAY
20089: PUSH
20090: LD_INT 2
20092: ARRAY
20093: PUSH
20094: LD_VAR 0 3
20098: EQUAL
20099: AND
20100: IFFALSE 20203
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20102: LD_EXP 70
20106: PUSH
20107: LD_VAR 0 6
20111: ARRAY
20112: PUSH
20113: LD_VAR 0 5
20117: ARRAY
20118: PUSH
20119: LD_INT 1
20121: ARRAY
20122: PPUSH
20123: LD_EXP 70
20127: PUSH
20128: LD_VAR 0 6
20132: ARRAY
20133: PUSH
20134: LD_VAR 0 5
20138: ARRAY
20139: PUSH
20140: LD_INT 2
20142: ARRAY
20143: PPUSH
20144: LD_VAR 0 1
20148: PPUSH
20149: CALL_OW 255
20153: PPUSH
20154: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20158: LD_ADDR_EXP 70
20162: PUSH
20163: LD_EXP 70
20167: PPUSH
20168: LD_VAR 0 6
20172: PPUSH
20173: LD_EXP 70
20177: PUSH
20178: LD_VAR 0 6
20182: ARRAY
20183: PPUSH
20184: LD_VAR 0 5
20188: PPUSH
20189: CALL_OW 3
20193: PPUSH
20194: CALL_OW 1
20198: ST_TO_ADDR
// exit ;
20199: POP
20200: POP
20201: GO 20394
// end ; end ;
20203: GO 20043
20205: POP
20206: POP
// for i := minerMinesList [ index ] downto 1 do
20207: LD_ADDR_VAR 0 5
20211: PUSH
20212: DOUBLE
20213: LD_EXP 70
20217: PUSH
20218: LD_VAR 0 6
20222: ARRAY
20223: INC
20224: ST_TO_ADDR
20225: LD_INT 1
20227: PUSH
20228: FOR_DOWNTO
20229: IFFALSE 20392
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
20231: LD_EXP 70
20235: PUSH
20236: LD_VAR 0 6
20240: ARRAY
20241: PUSH
20242: LD_VAR 0 5
20246: ARRAY
20247: PUSH
20248: LD_INT 1
20250: ARRAY
20251: PPUSH
20252: LD_EXP 70
20256: PUSH
20257: LD_VAR 0 6
20261: ARRAY
20262: PUSH
20263: LD_VAR 0 5
20267: ARRAY
20268: PUSH
20269: LD_INT 2
20271: ARRAY
20272: PPUSH
20273: LD_VAR 0 2
20277: PPUSH
20278: LD_VAR 0 3
20282: PPUSH
20283: CALL_OW 298
20287: PUSH
20288: LD_INT 6
20290: LESS
20291: IFFALSE 20390
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20293: LD_EXP 70
20297: PUSH
20298: LD_VAR 0 6
20302: ARRAY
20303: PUSH
20304: LD_VAR 0 5
20308: ARRAY
20309: PUSH
20310: LD_INT 1
20312: ARRAY
20313: PPUSH
20314: LD_EXP 70
20318: PUSH
20319: LD_VAR 0 6
20323: ARRAY
20324: PUSH
20325: LD_VAR 0 5
20329: ARRAY
20330: PUSH
20331: LD_INT 2
20333: ARRAY
20334: PPUSH
20335: LD_VAR 0 1
20339: PPUSH
20340: CALL_OW 255
20344: PPUSH
20345: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20349: LD_ADDR_EXP 70
20353: PUSH
20354: LD_EXP 70
20358: PPUSH
20359: LD_VAR 0 6
20363: PPUSH
20364: LD_EXP 70
20368: PUSH
20369: LD_VAR 0 6
20373: ARRAY
20374: PPUSH
20375: LD_VAR 0 5
20379: PPUSH
20380: CALL_OW 3
20384: PPUSH
20385: CALL_OW 1
20389: ST_TO_ADDR
// end ; end ;
20390: GO 20228
20392: POP
20393: POP
// end ;
20394: LD_VAR 0 4
20398: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20399: LD_INT 0
20401: PPUSH
20402: PPUSH
20403: PPUSH
20404: PPUSH
20405: PPUSH
20406: PPUSH
20407: PPUSH
20408: PPUSH
20409: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20410: LD_VAR 0 1
20414: PPUSH
20415: CALL_OW 264
20419: PUSH
20420: LD_EXP 79
20424: EQUAL
20425: NOT
20426: PUSH
20427: LD_VAR 0 1
20431: PUSH
20432: LD_EXP 69
20436: IN
20437: NOT
20438: OR
20439: IFFALSE 20443
// exit ;
20441: GO 20765
// index := GetElementIndex ( minersList , unit ) ;
20443: LD_ADDR_VAR 0 6
20447: PUSH
20448: LD_EXP 69
20452: PPUSH
20453: LD_VAR 0 1
20457: PPUSH
20458: CALL 26496 0 2
20462: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
20463: LD_ADDR_VAR 0 8
20467: PUSH
20468: LD_EXP 71
20472: PUSH
20473: LD_EXP 70
20477: PUSH
20478: LD_VAR 0 6
20482: ARRAY
20483: MINUS
20484: ST_TO_ADDR
// if not minesFreeAmount then
20485: LD_VAR 0 8
20489: NOT
20490: IFFALSE 20494
// exit ;
20492: GO 20765
// tmp := [ ] ;
20494: LD_ADDR_VAR 0 7
20498: PUSH
20499: EMPTY
20500: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20501: LD_ADDR_VAR 0 5
20505: PUSH
20506: DOUBLE
20507: LD_INT 1
20509: DEC
20510: ST_TO_ADDR
20511: LD_VAR 0 8
20515: PUSH
20516: FOR_TO
20517: IFFALSE 20712
// begin _d := rand ( 0 , 5 ) ;
20519: LD_ADDR_VAR 0 11
20523: PUSH
20524: LD_INT 0
20526: PPUSH
20527: LD_INT 5
20529: PPUSH
20530: CALL_OW 12
20534: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20535: LD_ADDR_VAR 0 12
20539: PUSH
20540: LD_INT 2
20542: PPUSH
20543: LD_INT 6
20545: PPUSH
20546: CALL_OW 12
20550: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
20551: LD_ADDR_VAR 0 9
20555: PUSH
20556: LD_VAR 0 2
20560: PPUSH
20561: LD_VAR 0 11
20565: PPUSH
20566: LD_VAR 0 12
20570: PPUSH
20571: CALL_OW 272
20575: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
20576: LD_ADDR_VAR 0 10
20580: PUSH
20581: LD_VAR 0 3
20585: PPUSH
20586: LD_VAR 0 11
20590: PPUSH
20591: LD_VAR 0 12
20595: PPUSH
20596: CALL_OW 273
20600: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
20601: LD_VAR 0 9
20605: PPUSH
20606: LD_VAR 0 10
20610: PPUSH
20611: CALL_OW 488
20615: PUSH
20616: LD_VAR 0 9
20620: PUSH
20621: LD_VAR 0 10
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: LD_VAR 0 7
20634: IN
20635: NOT
20636: AND
20637: PUSH
20638: LD_VAR 0 9
20642: PPUSH
20643: LD_VAR 0 10
20647: PPUSH
20648: CALL_OW 458
20652: NOT
20653: AND
20654: IFFALSE 20696
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
20656: LD_ADDR_VAR 0 7
20660: PUSH
20661: LD_VAR 0 7
20665: PPUSH
20666: LD_VAR 0 7
20670: PUSH
20671: LD_INT 1
20673: PLUS
20674: PPUSH
20675: LD_VAR 0 9
20679: PUSH
20680: LD_VAR 0 10
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: PPUSH
20689: CALL_OW 1
20693: ST_TO_ADDR
20694: GO 20710
// i := i - 1 ;
20696: LD_ADDR_VAR 0 5
20700: PUSH
20701: LD_VAR 0 5
20705: PUSH
20706: LD_INT 1
20708: MINUS
20709: ST_TO_ADDR
// end ;
20710: GO 20516
20712: POP
20713: POP
// for i in tmp do
20714: LD_ADDR_VAR 0 5
20718: PUSH
20719: LD_VAR 0 7
20723: PUSH
20724: FOR_IN
20725: IFFALSE 20763
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
20727: LD_VAR 0 1
20731: PPUSH
20732: LD_VAR 0 5
20736: PUSH
20737: LD_INT 1
20739: ARRAY
20740: PPUSH
20741: LD_VAR 0 5
20745: PUSH
20746: LD_INT 2
20748: ARRAY
20749: PPUSH
20750: CALL 19705 0 3
20754: NOT
20755: IFFALSE 20761
// exit ;
20757: POP
20758: POP
20759: GO 20765
20761: GO 20724
20763: POP
20764: POP
// end ;
20765: LD_VAR 0 4
20769: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
20770: LD_INT 0
20772: PPUSH
20773: PPUSH
20774: PPUSH
20775: PPUSH
20776: PPUSH
20777: PPUSH
20778: PPUSH
// if not GetClass ( unit ) = class_sniper then
20779: LD_VAR 0 1
20783: PPUSH
20784: CALL_OW 257
20788: PUSH
20789: LD_INT 5
20791: EQUAL
20792: NOT
20793: IFFALSE 20797
// exit ;
20795: GO 21185
// dist := 8 ;
20797: LD_ADDR_VAR 0 5
20801: PUSH
20802: LD_INT 8
20804: ST_TO_ADDR
// viewRange := 12 ;
20805: LD_ADDR_VAR 0 7
20809: PUSH
20810: LD_INT 12
20812: ST_TO_ADDR
// side := GetSide ( unit ) ;
20813: LD_ADDR_VAR 0 6
20817: PUSH
20818: LD_VAR 0 1
20822: PPUSH
20823: CALL_OW 255
20827: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
20828: LD_INT 61
20830: PPUSH
20831: LD_VAR 0 6
20835: PPUSH
20836: CALL_OW 321
20840: PUSH
20841: LD_INT 2
20843: EQUAL
20844: IFFALSE 20854
// viewRange := 16 ;
20846: LD_ADDR_VAR 0 7
20850: PUSH
20851: LD_INT 16
20853: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
20854: LD_VAR 0 1
20858: PPUSH
20859: LD_VAR 0 2
20863: PPUSH
20864: LD_VAR 0 3
20868: PPUSH
20869: CALL_OW 297
20873: PUSH
20874: LD_VAR 0 5
20878: GREATER
20879: IFFALSE 20958
// begin ComMoveXY ( unit , x , y ) ;
20881: LD_VAR 0 1
20885: PPUSH
20886: LD_VAR 0 2
20890: PPUSH
20891: LD_VAR 0 3
20895: PPUSH
20896: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20900: LD_INT 35
20902: PPUSH
20903: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
20907: LD_VAR 0 1
20911: PPUSH
20912: LD_VAR 0 2
20916: PPUSH
20917: LD_VAR 0 3
20921: PPUSH
20922: CALL 57782 0 3
20926: NOT
20927: IFFALSE 20931
// exit ;
20929: GO 21185
// until GetDistUnitXY ( unit , x , y ) < dist ;
20931: LD_VAR 0 1
20935: PPUSH
20936: LD_VAR 0 2
20940: PPUSH
20941: LD_VAR 0 3
20945: PPUSH
20946: CALL_OW 297
20950: PUSH
20951: LD_VAR 0 5
20955: LESS
20956: IFFALSE 20900
// end ; ComTurnXY ( unit , x , y ) ;
20958: LD_VAR 0 1
20962: PPUSH
20963: LD_VAR 0 2
20967: PPUSH
20968: LD_VAR 0 3
20972: PPUSH
20973: CALL_OW 118
// wait ( 5 ) ;
20977: LD_INT 5
20979: PPUSH
20980: CALL_OW 67
// _d := GetDir ( unit ) ;
20984: LD_ADDR_VAR 0 10
20988: PUSH
20989: LD_VAR 0 1
20993: PPUSH
20994: CALL_OW 254
20998: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
20999: LD_ADDR_VAR 0 8
21003: PUSH
21004: LD_VAR 0 1
21008: PPUSH
21009: CALL_OW 250
21013: PPUSH
21014: LD_VAR 0 10
21018: PPUSH
21019: LD_VAR 0 5
21023: PPUSH
21024: CALL_OW 272
21028: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21029: LD_ADDR_VAR 0 9
21033: PUSH
21034: LD_VAR 0 1
21038: PPUSH
21039: CALL_OW 251
21043: PPUSH
21044: LD_VAR 0 10
21048: PPUSH
21049: LD_VAR 0 5
21053: PPUSH
21054: CALL_OW 273
21058: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21059: LD_VAR 0 8
21063: PPUSH
21064: LD_VAR 0 9
21068: PPUSH
21069: CALL_OW 488
21073: NOT
21074: IFFALSE 21078
// exit ;
21076: GO 21185
// ComAnimCustom ( unit , 1 ) ;
21078: LD_VAR 0 1
21082: PPUSH
21083: LD_INT 1
21085: PPUSH
21086: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21090: LD_VAR 0 8
21094: PPUSH
21095: LD_VAR 0 9
21099: PPUSH
21100: LD_VAR 0 6
21104: PPUSH
21105: LD_VAR 0 7
21109: PPUSH
21110: CALL_OW 330
// repeat wait ( 1 ) ;
21114: LD_INT 1
21116: PPUSH
21117: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
21121: LD_VAR 0 1
21125: PPUSH
21126: CALL_OW 316
21130: PUSH
21131: LD_VAR 0 1
21135: PPUSH
21136: CALL_OW 314
21140: OR
21141: PUSH
21142: LD_VAR 0 1
21146: PPUSH
21147: CALL_OW 302
21151: NOT
21152: OR
21153: PUSH
21154: LD_VAR 0 1
21158: PPUSH
21159: CALL_OW 301
21163: OR
21164: IFFALSE 21114
// RemoveSeeing ( _x , _y , side ) ;
21166: LD_VAR 0 8
21170: PPUSH
21171: LD_VAR 0 9
21175: PPUSH
21176: LD_VAR 0 6
21180: PPUSH
21181: CALL_OW 331
// end ; end_of_file
21185: LD_VAR 0 4
21189: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
21190: LD_VAR 0 1
21194: PPUSH
21195: LD_VAR 0 2
21199: PPUSH
21200: LD_VAR 0 3
21204: PPUSH
21205: LD_VAR 0 4
21209: PPUSH
21210: LD_VAR 0 5
21214: PPUSH
21215: LD_VAR 0 6
21219: PPUSH
21220: CALL 1279 0 6
// end ;
21224: PPOPN 6
21226: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
21227: LD_INT 0
21229: PPUSH
// begin if not units then
21230: LD_VAR 0 1
21234: NOT
21235: IFFALSE 21239
// exit ;
21237: GO 21239
// end ;
21239: PPOPN 7
21241: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
21242: CALL 1250 0 0
// end ; end_of_file
21246: PPOPN 1
21248: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
21249: LD_VAR 0 1
21253: PUSH
21254: LD_INT 200
21256: DOUBLE
21257: GREATEREQUAL
21258: IFFALSE 21266
21260: LD_INT 299
21262: DOUBLE
21263: LESSEQUAL
21264: IFTRUE 21268
21266: GO 21300
21268: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
21269: LD_VAR 0 1
21273: PPUSH
21274: LD_VAR 0 2
21278: PPUSH
21279: LD_VAR 0 3
21283: PPUSH
21284: LD_VAR 0 4
21288: PPUSH
21289: LD_VAR 0 5
21293: PPUSH
21294: CALL 17257 0 5
21298: GO 21377
21300: LD_INT 300
21302: DOUBLE
21303: GREATEREQUAL
21304: IFFALSE 21312
21306: LD_INT 399
21308: DOUBLE
21309: LESSEQUAL
21310: IFTRUE 21314
21312: GO 21376
21314: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
21315: LD_VAR 0 1
21319: PPUSH
21320: LD_VAR 0 2
21324: PPUSH
21325: LD_VAR 0 3
21329: PPUSH
21330: LD_VAR 0 4
21334: PPUSH
21335: LD_VAR 0 5
21339: PPUSH
21340: LD_VAR 0 6
21344: PPUSH
21345: LD_VAR 0 7
21349: PPUSH
21350: LD_VAR 0 8
21354: PPUSH
21355: LD_VAR 0 9
21359: PPUSH
21360: LD_VAR 0 10
21364: PPUSH
21365: LD_VAR 0 11
21369: PPUSH
21370: CALL 13586 0 11
21374: GO 21377
21376: POP
// end ;
21377: PPOPN 11
21379: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
21380: LD_VAR 0 1
21384: PPUSH
21385: LD_VAR 0 2
21389: PPUSH
21390: LD_VAR 0 3
21394: PPUSH
21395: LD_VAR 0 4
21399: PPUSH
21400: LD_VAR 0 5
21404: PPUSH
21405: CALL 16993 0 5
// end ; end_of_file
21409: PPOPN 5
21411: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
21412: LD_INT 0
21414: PPUSH
// ar_miner := 81 ;
21415: LD_ADDR_EXP 79
21419: PUSH
21420: LD_INT 81
21422: ST_TO_ADDR
// ar_crane := 88 ;
21423: LD_ADDR_EXP 78
21427: PUSH
21428: LD_INT 88
21430: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
21431: LD_ADDR_EXP 73
21435: PUSH
21436: LD_INT 89
21438: ST_TO_ADDR
// us_hack := 99 ;
21439: LD_ADDR_EXP 74
21443: PUSH
21444: LD_INT 99
21446: ST_TO_ADDR
// us_artillery := 97 ;
21447: LD_ADDR_EXP 75
21451: PUSH
21452: LD_INT 97
21454: ST_TO_ADDR
// ar_bio_bomb := 91 ;
21455: LD_ADDR_EXP 76
21459: PUSH
21460: LD_INT 91
21462: ST_TO_ADDR
// ar_mortar := 92 ;
21463: LD_ADDR_EXP 77
21467: PUSH
21468: LD_INT 92
21470: ST_TO_ADDR
// ru_flamethrower := 93 ;
21471: LD_ADDR_EXP 80
21475: PUSH
21476: LD_INT 93
21478: ST_TO_ADDR
// ru_radar := 98 ;
21479: LD_ADDR_EXP 72
21483: PUSH
21484: LD_INT 98
21486: ST_TO_ADDR
// tech_Artillery := 80 ;
21487: LD_ADDR_EXP 81
21491: PUSH
21492: LD_INT 80
21494: ST_TO_ADDR
// tech_RadMat := 81 ;
21495: LD_ADDR_EXP 82
21499: PUSH
21500: LD_INT 81
21502: ST_TO_ADDR
// tech_BasicTools := 82 ;
21503: LD_ADDR_EXP 83
21507: PUSH
21508: LD_INT 82
21510: ST_TO_ADDR
// tech_Cargo := 83 ;
21511: LD_ADDR_EXP 84
21515: PUSH
21516: LD_INT 83
21518: ST_TO_ADDR
// tech_Track := 84 ;
21519: LD_ADDR_EXP 85
21523: PUSH
21524: LD_INT 84
21526: ST_TO_ADDR
// tech_Crane := 85 ;
21527: LD_ADDR_EXP 86
21531: PUSH
21532: LD_INT 85
21534: ST_TO_ADDR
// tech_Bulldozer := 86 ;
21535: LD_ADDR_EXP 87
21539: PUSH
21540: LD_INT 86
21542: ST_TO_ADDR
// tech_Hovercraft := 87 ;
21543: LD_ADDR_EXP 88
21547: PUSH
21548: LD_INT 87
21550: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
21551: LD_ADDR_EXP 89
21555: PUSH
21556: LD_INT 88
21558: ST_TO_ADDR
// end ;
21559: LD_VAR 0 1
21563: RET
// every 1 do
21564: GO 21566
21566: DISABLE
// InitGlobalVariables ; end_of_file
21567: CALL 21412 0 0
21571: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21572: LD_INT 0
21574: PPUSH
21575: PPUSH
// if exist_mode then
21576: LD_VAR 0 2
21580: IFFALSE 21605
// unit := CreateCharacter ( prefix & ident ) else
21582: LD_ADDR_VAR 0 5
21586: PUSH
21587: LD_VAR 0 3
21591: PUSH
21592: LD_VAR 0 1
21596: STR
21597: PPUSH
21598: CALL_OW 34
21602: ST_TO_ADDR
21603: GO 21620
// unit := NewCharacter ( ident ) ;
21605: LD_ADDR_VAR 0 5
21609: PUSH
21610: LD_VAR 0 1
21614: PPUSH
21615: CALL_OW 25
21619: ST_TO_ADDR
// result := unit ;
21620: LD_ADDR_VAR 0 4
21624: PUSH
21625: LD_VAR 0 5
21629: ST_TO_ADDR
// end ;
21630: LD_VAR 0 4
21634: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21635: LD_INT 0
21637: PPUSH
21638: PPUSH
// if not side or not nation then
21639: LD_VAR 0 1
21643: NOT
21644: PUSH
21645: LD_VAR 0 2
21649: NOT
21650: OR
21651: IFFALSE 21655
// exit ;
21653: GO 22423
// case nation of nation_american :
21655: LD_VAR 0 2
21659: PUSH
21660: LD_INT 1
21662: DOUBLE
21663: EQUAL
21664: IFTRUE 21668
21666: GO 21882
21668: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21669: LD_ADDR_VAR 0 4
21673: PUSH
21674: LD_INT 35
21676: PUSH
21677: LD_INT 45
21679: PUSH
21680: LD_INT 46
21682: PUSH
21683: LD_INT 47
21685: PUSH
21686: LD_INT 82
21688: PUSH
21689: LD_INT 83
21691: PUSH
21692: LD_INT 84
21694: PUSH
21695: LD_INT 85
21697: PUSH
21698: LD_INT 86
21700: PUSH
21701: LD_INT 1
21703: PUSH
21704: LD_INT 2
21706: PUSH
21707: LD_INT 6
21709: PUSH
21710: LD_INT 15
21712: PUSH
21713: LD_INT 16
21715: PUSH
21716: LD_INT 7
21718: PUSH
21719: LD_INT 12
21721: PUSH
21722: LD_INT 13
21724: PUSH
21725: LD_INT 10
21727: PUSH
21728: LD_INT 14
21730: PUSH
21731: LD_INT 20
21733: PUSH
21734: LD_INT 21
21736: PUSH
21737: LD_INT 22
21739: PUSH
21740: LD_INT 25
21742: PUSH
21743: LD_INT 32
21745: PUSH
21746: LD_INT 27
21748: PUSH
21749: LD_INT 36
21751: PUSH
21752: LD_INT 69
21754: PUSH
21755: LD_INT 39
21757: PUSH
21758: LD_INT 34
21760: PUSH
21761: LD_INT 40
21763: PUSH
21764: LD_INT 48
21766: PUSH
21767: LD_INT 49
21769: PUSH
21770: LD_INT 50
21772: PUSH
21773: LD_INT 51
21775: PUSH
21776: LD_INT 52
21778: PUSH
21779: LD_INT 53
21781: PUSH
21782: LD_INT 54
21784: PUSH
21785: LD_INT 55
21787: PUSH
21788: LD_INT 56
21790: PUSH
21791: LD_INT 57
21793: PUSH
21794: LD_INT 58
21796: PUSH
21797: LD_INT 59
21799: PUSH
21800: LD_INT 60
21802: PUSH
21803: LD_INT 61
21805: PUSH
21806: LD_INT 62
21808: PUSH
21809: LD_INT 80
21811: PUSH
21812: LD_INT 82
21814: PUSH
21815: LD_INT 83
21817: PUSH
21818: LD_INT 84
21820: PUSH
21821: LD_INT 85
21823: PUSH
21824: LD_INT 86
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: ST_TO_ADDR
21880: GO 22347
21882: LD_INT 2
21884: DOUBLE
21885: EQUAL
21886: IFTRUE 21890
21888: GO 22116
21890: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21891: LD_ADDR_VAR 0 4
21895: PUSH
21896: LD_INT 35
21898: PUSH
21899: LD_INT 45
21901: PUSH
21902: LD_INT 46
21904: PUSH
21905: LD_INT 47
21907: PUSH
21908: LD_INT 82
21910: PUSH
21911: LD_INT 83
21913: PUSH
21914: LD_INT 84
21916: PUSH
21917: LD_INT 85
21919: PUSH
21920: LD_INT 87
21922: PUSH
21923: LD_INT 70
21925: PUSH
21926: LD_INT 1
21928: PUSH
21929: LD_INT 11
21931: PUSH
21932: LD_INT 3
21934: PUSH
21935: LD_INT 4
21937: PUSH
21938: LD_INT 5
21940: PUSH
21941: LD_INT 6
21943: PUSH
21944: LD_INT 15
21946: PUSH
21947: LD_INT 18
21949: PUSH
21950: LD_INT 7
21952: PUSH
21953: LD_INT 17
21955: PUSH
21956: LD_INT 8
21958: PUSH
21959: LD_INT 20
21961: PUSH
21962: LD_INT 21
21964: PUSH
21965: LD_INT 22
21967: PUSH
21968: LD_INT 72
21970: PUSH
21971: LD_INT 26
21973: PUSH
21974: LD_INT 69
21976: PUSH
21977: LD_INT 39
21979: PUSH
21980: LD_INT 40
21982: PUSH
21983: LD_INT 41
21985: PUSH
21986: LD_INT 42
21988: PUSH
21989: LD_INT 43
21991: PUSH
21992: LD_INT 48
21994: PUSH
21995: LD_INT 49
21997: PUSH
21998: LD_INT 50
22000: PUSH
22001: LD_INT 51
22003: PUSH
22004: LD_INT 52
22006: PUSH
22007: LD_INT 53
22009: PUSH
22010: LD_INT 54
22012: PUSH
22013: LD_INT 55
22015: PUSH
22016: LD_INT 56
22018: PUSH
22019: LD_INT 60
22021: PUSH
22022: LD_INT 61
22024: PUSH
22025: LD_INT 62
22027: PUSH
22028: LD_INT 66
22030: PUSH
22031: LD_INT 67
22033: PUSH
22034: LD_INT 68
22036: PUSH
22037: LD_INT 81
22039: PUSH
22040: LD_INT 82
22042: PUSH
22043: LD_INT 83
22045: PUSH
22046: LD_INT 84
22048: PUSH
22049: LD_INT 85
22051: PUSH
22052: LD_INT 87
22054: PUSH
22055: LD_INT 88
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: ST_TO_ADDR
22114: GO 22347
22116: LD_INT 3
22118: DOUBLE
22119: EQUAL
22120: IFTRUE 22124
22122: GO 22346
22124: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22125: LD_ADDR_VAR 0 4
22129: PUSH
22130: LD_INT 46
22132: PUSH
22133: LD_INT 47
22135: PUSH
22136: LD_INT 1
22138: PUSH
22139: LD_INT 2
22141: PUSH
22142: LD_INT 82
22144: PUSH
22145: LD_INT 83
22147: PUSH
22148: LD_INT 84
22150: PUSH
22151: LD_INT 85
22153: PUSH
22154: LD_INT 86
22156: PUSH
22157: LD_INT 11
22159: PUSH
22160: LD_INT 9
22162: PUSH
22163: LD_INT 20
22165: PUSH
22166: LD_INT 19
22168: PUSH
22169: LD_INT 21
22171: PUSH
22172: LD_INT 24
22174: PUSH
22175: LD_INT 22
22177: PUSH
22178: LD_INT 25
22180: PUSH
22181: LD_INT 28
22183: PUSH
22184: LD_INT 29
22186: PUSH
22187: LD_INT 30
22189: PUSH
22190: LD_INT 31
22192: PUSH
22193: LD_INT 37
22195: PUSH
22196: LD_INT 38
22198: PUSH
22199: LD_INT 32
22201: PUSH
22202: LD_INT 27
22204: PUSH
22205: LD_INT 33
22207: PUSH
22208: LD_INT 69
22210: PUSH
22211: LD_INT 39
22213: PUSH
22214: LD_INT 34
22216: PUSH
22217: LD_INT 40
22219: PUSH
22220: LD_INT 71
22222: PUSH
22223: LD_INT 23
22225: PUSH
22226: LD_INT 44
22228: PUSH
22229: LD_INT 48
22231: PUSH
22232: LD_INT 49
22234: PUSH
22235: LD_INT 50
22237: PUSH
22238: LD_INT 51
22240: PUSH
22241: LD_INT 52
22243: PUSH
22244: LD_INT 53
22246: PUSH
22247: LD_INT 54
22249: PUSH
22250: LD_INT 55
22252: PUSH
22253: LD_INT 56
22255: PUSH
22256: LD_INT 57
22258: PUSH
22259: LD_INT 58
22261: PUSH
22262: LD_INT 59
22264: PUSH
22265: LD_INT 63
22267: PUSH
22268: LD_INT 64
22270: PUSH
22271: LD_INT 65
22273: PUSH
22274: LD_INT 82
22276: PUSH
22277: LD_INT 83
22279: PUSH
22280: LD_INT 84
22282: PUSH
22283: LD_INT 85
22285: PUSH
22286: LD_INT 86
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: ST_TO_ADDR
22344: GO 22347
22346: POP
// if state > - 1 and state < 3 then
22347: LD_VAR 0 3
22351: PUSH
22352: LD_INT 1
22354: NEG
22355: GREATER
22356: PUSH
22357: LD_VAR 0 3
22361: PUSH
22362: LD_INT 3
22364: LESS
22365: AND
22366: IFFALSE 22423
// for i in result do
22368: LD_ADDR_VAR 0 5
22372: PUSH
22373: LD_VAR 0 4
22377: PUSH
22378: FOR_IN
22379: IFFALSE 22421
// if GetTech ( i , side ) <> state then
22381: LD_VAR 0 5
22385: PPUSH
22386: LD_VAR 0 1
22390: PPUSH
22391: CALL_OW 321
22395: PUSH
22396: LD_VAR 0 3
22400: NONEQUAL
22401: IFFALSE 22419
// result := result diff i ;
22403: LD_ADDR_VAR 0 4
22407: PUSH
22408: LD_VAR 0 4
22412: PUSH
22413: LD_VAR 0 5
22417: DIFF
22418: ST_TO_ADDR
22419: GO 22378
22421: POP
22422: POP
// end ;
22423: LD_VAR 0 4
22427: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22428: LD_INT 0
22430: PPUSH
22431: PPUSH
22432: PPUSH
// result := true ;
22433: LD_ADDR_VAR 0 3
22437: PUSH
22438: LD_INT 1
22440: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22441: LD_ADDR_VAR 0 5
22445: PUSH
22446: LD_VAR 0 2
22450: PPUSH
22451: CALL_OW 480
22455: ST_TO_ADDR
// if not tmp then
22456: LD_VAR 0 5
22460: NOT
22461: IFFALSE 22465
// exit ;
22463: GO 22514
// for i in tmp do
22465: LD_ADDR_VAR 0 4
22469: PUSH
22470: LD_VAR 0 5
22474: PUSH
22475: FOR_IN
22476: IFFALSE 22512
// if GetTech ( i , side ) <> state_researched then
22478: LD_VAR 0 4
22482: PPUSH
22483: LD_VAR 0 1
22487: PPUSH
22488: CALL_OW 321
22492: PUSH
22493: LD_INT 2
22495: NONEQUAL
22496: IFFALSE 22510
// begin result := false ;
22498: LD_ADDR_VAR 0 3
22502: PUSH
22503: LD_INT 0
22505: ST_TO_ADDR
// exit ;
22506: POP
22507: POP
22508: GO 22514
// end ;
22510: GO 22475
22512: POP
22513: POP
// end ;
22514: LD_VAR 0 3
22518: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22519: LD_INT 0
22521: PPUSH
22522: PPUSH
22523: PPUSH
22524: PPUSH
22525: PPUSH
22526: PPUSH
22527: PPUSH
22528: PPUSH
22529: PPUSH
22530: PPUSH
22531: PPUSH
22532: PPUSH
22533: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22534: LD_VAR 0 1
22538: NOT
22539: PUSH
22540: LD_VAR 0 1
22544: PPUSH
22545: CALL_OW 257
22549: PUSH
22550: LD_INT 9
22552: NONEQUAL
22553: OR
22554: IFFALSE 22558
// exit ;
22556: GO 23131
// side := GetSide ( unit ) ;
22558: LD_ADDR_VAR 0 9
22562: PUSH
22563: LD_VAR 0 1
22567: PPUSH
22568: CALL_OW 255
22572: ST_TO_ADDR
// tech_space := tech_spacanom ;
22573: LD_ADDR_VAR 0 12
22577: PUSH
22578: LD_INT 29
22580: ST_TO_ADDR
// tech_time := tech_taurad ;
22581: LD_ADDR_VAR 0 13
22585: PUSH
22586: LD_INT 28
22588: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22589: LD_ADDR_VAR 0 11
22593: PUSH
22594: LD_VAR 0 1
22598: PPUSH
22599: CALL_OW 310
22603: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22604: LD_VAR 0 11
22608: PPUSH
22609: CALL_OW 247
22613: PUSH
22614: LD_INT 2
22616: EQUAL
22617: IFFALSE 22621
// exit ;
22619: GO 23131
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22621: LD_ADDR_VAR 0 8
22625: PUSH
22626: LD_INT 81
22628: PUSH
22629: LD_VAR 0 9
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PUSH
22638: LD_INT 3
22640: PUSH
22641: LD_INT 21
22643: PUSH
22644: LD_INT 3
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PPUSH
22659: CALL_OW 69
22663: ST_TO_ADDR
// if not tmp then
22664: LD_VAR 0 8
22668: NOT
22669: IFFALSE 22673
// exit ;
22671: GO 23131
// if in_unit then
22673: LD_VAR 0 11
22677: IFFALSE 22701
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22679: LD_ADDR_VAR 0 10
22683: PUSH
22684: LD_VAR 0 8
22688: PPUSH
22689: LD_VAR 0 11
22693: PPUSH
22694: CALL_OW 74
22698: ST_TO_ADDR
22699: GO 22721
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22701: LD_ADDR_VAR 0 10
22705: PUSH
22706: LD_VAR 0 8
22710: PPUSH
22711: LD_VAR 0 1
22715: PPUSH
22716: CALL_OW 74
22720: ST_TO_ADDR
// if not enemy then
22721: LD_VAR 0 10
22725: NOT
22726: IFFALSE 22730
// exit ;
22728: GO 23131
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22730: LD_VAR 0 11
22734: PUSH
22735: LD_VAR 0 11
22739: PPUSH
22740: LD_VAR 0 10
22744: PPUSH
22745: CALL_OW 296
22749: PUSH
22750: LD_INT 13
22752: GREATER
22753: AND
22754: PUSH
22755: LD_VAR 0 1
22759: PPUSH
22760: LD_VAR 0 10
22764: PPUSH
22765: CALL_OW 296
22769: PUSH
22770: LD_INT 12
22772: GREATER
22773: OR
22774: IFFALSE 22778
// exit ;
22776: GO 23131
// missile := [ 1 ] ;
22778: LD_ADDR_VAR 0 14
22782: PUSH
22783: LD_INT 1
22785: PUSH
22786: EMPTY
22787: LIST
22788: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22789: LD_VAR 0 9
22793: PPUSH
22794: LD_VAR 0 12
22798: PPUSH
22799: CALL_OW 325
22803: IFFALSE 22832
// missile := Replace ( missile , missile + 1 , 2 ) ;
22805: LD_ADDR_VAR 0 14
22809: PUSH
22810: LD_VAR 0 14
22814: PPUSH
22815: LD_VAR 0 14
22819: PUSH
22820: LD_INT 1
22822: PLUS
22823: PPUSH
22824: LD_INT 2
22826: PPUSH
22827: CALL_OW 1
22831: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22832: LD_VAR 0 9
22836: PPUSH
22837: LD_VAR 0 13
22841: PPUSH
22842: CALL_OW 325
22846: PUSH
22847: LD_VAR 0 10
22851: PPUSH
22852: CALL_OW 255
22856: PPUSH
22857: LD_VAR 0 13
22861: PPUSH
22862: CALL_OW 325
22866: NOT
22867: AND
22868: IFFALSE 22897
// missile := Replace ( missile , missile + 1 , 3 ) ;
22870: LD_ADDR_VAR 0 14
22874: PUSH
22875: LD_VAR 0 14
22879: PPUSH
22880: LD_VAR 0 14
22884: PUSH
22885: LD_INT 1
22887: PLUS
22888: PPUSH
22889: LD_INT 3
22891: PPUSH
22892: CALL_OW 1
22896: ST_TO_ADDR
// if missile < 2 then
22897: LD_VAR 0 14
22901: PUSH
22902: LD_INT 2
22904: LESS
22905: IFFALSE 22909
// exit ;
22907: GO 23131
// x := GetX ( enemy ) ;
22909: LD_ADDR_VAR 0 4
22913: PUSH
22914: LD_VAR 0 10
22918: PPUSH
22919: CALL_OW 250
22923: ST_TO_ADDR
// y := GetY ( enemy ) ;
22924: LD_ADDR_VAR 0 5
22928: PUSH
22929: LD_VAR 0 10
22933: PPUSH
22934: CALL_OW 251
22938: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22939: LD_ADDR_VAR 0 6
22943: PUSH
22944: LD_VAR 0 4
22948: PUSH
22949: LD_INT 1
22951: NEG
22952: PPUSH
22953: LD_INT 1
22955: PPUSH
22956: CALL_OW 12
22960: PLUS
22961: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22962: LD_ADDR_VAR 0 7
22966: PUSH
22967: LD_VAR 0 5
22971: PUSH
22972: LD_INT 1
22974: NEG
22975: PPUSH
22976: LD_INT 1
22978: PPUSH
22979: CALL_OW 12
22983: PLUS
22984: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22985: LD_VAR 0 6
22989: PPUSH
22990: LD_VAR 0 7
22994: PPUSH
22995: CALL_OW 488
22999: NOT
23000: IFFALSE 23022
// begin _x := x ;
23002: LD_ADDR_VAR 0 6
23006: PUSH
23007: LD_VAR 0 4
23011: ST_TO_ADDR
// _y := y ;
23012: LD_ADDR_VAR 0 7
23016: PUSH
23017: LD_VAR 0 5
23021: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23022: LD_ADDR_VAR 0 3
23026: PUSH
23027: LD_INT 1
23029: PPUSH
23030: LD_VAR 0 14
23034: PPUSH
23035: CALL_OW 12
23039: ST_TO_ADDR
// case i of 1 :
23040: LD_VAR 0 3
23044: PUSH
23045: LD_INT 1
23047: DOUBLE
23048: EQUAL
23049: IFTRUE 23053
23051: GO 23070
23053: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23054: LD_VAR 0 1
23058: PPUSH
23059: LD_VAR 0 10
23063: PPUSH
23064: CALL_OW 115
23068: GO 23131
23070: LD_INT 2
23072: DOUBLE
23073: EQUAL
23074: IFTRUE 23078
23076: GO 23100
23078: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23079: LD_VAR 0 1
23083: PPUSH
23084: LD_VAR 0 6
23088: PPUSH
23089: LD_VAR 0 7
23093: PPUSH
23094: CALL_OW 153
23098: GO 23131
23100: LD_INT 3
23102: DOUBLE
23103: EQUAL
23104: IFTRUE 23108
23106: GO 23130
23108: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23109: LD_VAR 0 1
23113: PPUSH
23114: LD_VAR 0 6
23118: PPUSH
23119: LD_VAR 0 7
23123: PPUSH
23124: CALL_OW 154
23128: GO 23131
23130: POP
// end ;
23131: LD_VAR 0 2
23135: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23136: LD_INT 0
23138: PPUSH
23139: PPUSH
23140: PPUSH
23141: PPUSH
23142: PPUSH
23143: PPUSH
// if not unit or not building then
23144: LD_VAR 0 1
23148: NOT
23149: PUSH
23150: LD_VAR 0 2
23154: NOT
23155: OR
23156: IFFALSE 23160
// exit ;
23158: GO 23318
// x := GetX ( building ) ;
23160: LD_ADDR_VAR 0 5
23164: PUSH
23165: LD_VAR 0 2
23169: PPUSH
23170: CALL_OW 250
23174: ST_TO_ADDR
// y := GetY ( building ) ;
23175: LD_ADDR_VAR 0 6
23179: PUSH
23180: LD_VAR 0 2
23184: PPUSH
23185: CALL_OW 251
23189: ST_TO_ADDR
// for i = 0 to 5 do
23190: LD_ADDR_VAR 0 4
23194: PUSH
23195: DOUBLE
23196: LD_INT 0
23198: DEC
23199: ST_TO_ADDR
23200: LD_INT 5
23202: PUSH
23203: FOR_TO
23204: IFFALSE 23316
// begin _x := ShiftX ( x , i , 3 ) ;
23206: LD_ADDR_VAR 0 7
23210: PUSH
23211: LD_VAR 0 5
23215: PPUSH
23216: LD_VAR 0 4
23220: PPUSH
23221: LD_INT 3
23223: PPUSH
23224: CALL_OW 272
23228: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23229: LD_ADDR_VAR 0 8
23233: PUSH
23234: LD_VAR 0 6
23238: PPUSH
23239: LD_VAR 0 4
23243: PPUSH
23244: LD_INT 3
23246: PPUSH
23247: CALL_OW 273
23251: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23252: LD_VAR 0 7
23256: PPUSH
23257: LD_VAR 0 8
23261: PPUSH
23262: CALL_OW 488
23266: NOT
23267: IFFALSE 23271
// continue ;
23269: GO 23203
// if HexInfo ( _x , _y ) = 0 then
23271: LD_VAR 0 7
23275: PPUSH
23276: LD_VAR 0 8
23280: PPUSH
23281: CALL_OW 428
23285: PUSH
23286: LD_INT 0
23288: EQUAL
23289: IFFALSE 23314
// begin ComMoveXY ( unit , _x , _y ) ;
23291: LD_VAR 0 1
23295: PPUSH
23296: LD_VAR 0 7
23300: PPUSH
23301: LD_VAR 0 8
23305: PPUSH
23306: CALL_OW 111
// exit ;
23310: POP
23311: POP
23312: GO 23318
// end ; end ;
23314: GO 23203
23316: POP
23317: POP
// end ;
23318: LD_VAR 0 3
23322: RET
// export function ScanBase ( side , base_area ) ; begin
23323: LD_INT 0
23325: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23326: LD_ADDR_VAR 0 3
23330: PUSH
23331: LD_VAR 0 2
23335: PPUSH
23336: LD_INT 81
23338: PUSH
23339: LD_VAR 0 1
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PPUSH
23348: CALL_OW 70
23352: ST_TO_ADDR
// end ;
23353: LD_VAR 0 3
23357: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23358: LD_INT 0
23360: PPUSH
23361: PPUSH
23362: PPUSH
23363: PPUSH
// result := false ;
23364: LD_ADDR_VAR 0 2
23368: PUSH
23369: LD_INT 0
23371: ST_TO_ADDR
// side := GetSide ( unit ) ;
23372: LD_ADDR_VAR 0 3
23376: PUSH
23377: LD_VAR 0 1
23381: PPUSH
23382: CALL_OW 255
23386: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23387: LD_ADDR_VAR 0 4
23391: PUSH
23392: LD_VAR 0 1
23396: PPUSH
23397: CALL_OW 248
23401: ST_TO_ADDR
// case nat of 1 :
23402: LD_VAR 0 4
23406: PUSH
23407: LD_INT 1
23409: DOUBLE
23410: EQUAL
23411: IFTRUE 23415
23413: GO 23426
23415: POP
// tech := tech_lassight ; 2 :
23416: LD_ADDR_VAR 0 5
23420: PUSH
23421: LD_INT 12
23423: ST_TO_ADDR
23424: GO 23465
23426: LD_INT 2
23428: DOUBLE
23429: EQUAL
23430: IFTRUE 23434
23432: GO 23445
23434: POP
// tech := tech_mortar ; 3 :
23435: LD_ADDR_VAR 0 5
23439: PUSH
23440: LD_INT 41
23442: ST_TO_ADDR
23443: GO 23465
23445: LD_INT 3
23447: DOUBLE
23448: EQUAL
23449: IFTRUE 23453
23451: GO 23464
23453: POP
// tech := tech_bazooka ; end ;
23454: LD_ADDR_VAR 0 5
23458: PUSH
23459: LD_INT 44
23461: ST_TO_ADDR
23462: GO 23465
23464: POP
// if Researched ( side , tech ) then
23465: LD_VAR 0 3
23469: PPUSH
23470: LD_VAR 0 5
23474: PPUSH
23475: CALL_OW 325
23479: IFFALSE 23506
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23481: LD_ADDR_VAR 0 2
23485: PUSH
23486: LD_INT 5
23488: PUSH
23489: LD_INT 8
23491: PUSH
23492: LD_INT 9
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: LIST
23499: PUSH
23500: LD_VAR 0 4
23504: ARRAY
23505: ST_TO_ADDR
// end ;
23506: LD_VAR 0 2
23510: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23511: LD_INT 0
23513: PPUSH
23514: PPUSH
23515: PPUSH
// if not mines then
23516: LD_VAR 0 2
23520: NOT
23521: IFFALSE 23525
// exit ;
23523: GO 23669
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23525: LD_ADDR_VAR 0 5
23529: PUSH
23530: LD_INT 81
23532: PUSH
23533: LD_VAR 0 1
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 3
23544: PUSH
23545: LD_INT 21
23547: PUSH
23548: LD_INT 3
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PPUSH
23563: CALL_OW 69
23567: ST_TO_ADDR
// for i in mines do
23568: LD_ADDR_VAR 0 4
23572: PUSH
23573: LD_VAR 0 2
23577: PUSH
23578: FOR_IN
23579: IFFALSE 23667
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23581: LD_VAR 0 4
23585: PUSH
23586: LD_INT 1
23588: ARRAY
23589: PPUSH
23590: LD_VAR 0 4
23594: PUSH
23595: LD_INT 2
23597: ARRAY
23598: PPUSH
23599: CALL_OW 458
23603: NOT
23604: IFFALSE 23608
// continue ;
23606: GO 23578
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23608: LD_VAR 0 4
23612: PUSH
23613: LD_INT 1
23615: ARRAY
23616: PPUSH
23617: LD_VAR 0 4
23621: PUSH
23622: LD_INT 2
23624: ARRAY
23625: PPUSH
23626: CALL_OW 428
23630: PUSH
23631: LD_VAR 0 5
23635: IN
23636: IFFALSE 23665
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23638: LD_VAR 0 4
23642: PUSH
23643: LD_INT 1
23645: ARRAY
23646: PPUSH
23647: LD_VAR 0 4
23651: PUSH
23652: LD_INT 2
23654: ARRAY
23655: PPUSH
23656: LD_VAR 0 1
23660: PPUSH
23661: CALL_OW 456
// end ;
23665: GO 23578
23667: POP
23668: POP
// end ;
23669: LD_VAR 0 3
23673: RET
// export function Count ( array ) ; var i ; begin
23674: LD_INT 0
23676: PPUSH
23677: PPUSH
// result := 0 ;
23678: LD_ADDR_VAR 0 2
23682: PUSH
23683: LD_INT 0
23685: ST_TO_ADDR
// for i in array do
23686: LD_ADDR_VAR 0 3
23690: PUSH
23691: LD_VAR 0 1
23695: PUSH
23696: FOR_IN
23697: IFFALSE 23721
// if i then
23699: LD_VAR 0 3
23703: IFFALSE 23719
// result := result + 1 ;
23705: LD_ADDR_VAR 0 2
23709: PUSH
23710: LD_VAR 0 2
23714: PUSH
23715: LD_INT 1
23717: PLUS
23718: ST_TO_ADDR
23719: GO 23696
23721: POP
23722: POP
// end ;
23723: LD_VAR 0 2
23727: RET
// export function IsEmpty ( building ) ; begin
23728: LD_INT 0
23730: PPUSH
// if not building then
23731: LD_VAR 0 1
23735: NOT
23736: IFFALSE 23740
// exit ;
23738: GO 23783
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23740: LD_ADDR_VAR 0 2
23744: PUSH
23745: LD_VAR 0 1
23749: PUSH
23750: LD_INT 22
23752: PUSH
23753: LD_VAR 0 1
23757: PPUSH
23758: CALL_OW 255
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: PUSH
23767: LD_INT 58
23769: PUSH
23770: EMPTY
23771: LIST
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: PPUSH
23777: CALL_OW 69
23781: IN
23782: ST_TO_ADDR
// end ;
23783: LD_VAR 0 2
23787: RET
// export function IsNotFull ( building ) ; var places ; begin
23788: LD_INT 0
23790: PPUSH
23791: PPUSH
// if not building then
23792: LD_VAR 0 1
23796: NOT
23797: IFFALSE 23801
// exit ;
23799: GO 23972
// result := false ;
23801: LD_ADDR_VAR 0 2
23805: PUSH
23806: LD_INT 0
23808: ST_TO_ADDR
// places := 0 ;
23809: LD_ADDR_VAR 0 3
23813: PUSH
23814: LD_INT 0
23816: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
23817: LD_VAR 0 1
23821: PPUSH
23822: CALL_OW 266
23826: PUSH
23827: LD_INT 0
23829: DOUBLE
23830: EQUAL
23831: IFTRUE 23889
23833: LD_INT 1
23835: DOUBLE
23836: EQUAL
23837: IFTRUE 23889
23839: LD_INT 6
23841: DOUBLE
23842: EQUAL
23843: IFTRUE 23889
23845: LD_INT 7
23847: DOUBLE
23848: EQUAL
23849: IFTRUE 23889
23851: LD_INT 8
23853: DOUBLE
23854: EQUAL
23855: IFTRUE 23889
23857: LD_INT 4
23859: DOUBLE
23860: EQUAL
23861: IFTRUE 23889
23863: LD_INT 5
23865: DOUBLE
23866: EQUAL
23867: IFTRUE 23889
23869: LD_INT 2
23871: DOUBLE
23872: EQUAL
23873: IFTRUE 23889
23875: LD_INT 3
23877: DOUBLE
23878: EQUAL
23879: IFTRUE 23889
23881: LD_INT 35
23883: DOUBLE
23884: EQUAL
23885: IFTRUE 23889
23887: GO 23900
23889: POP
// places := 6 ; b_bunker , b_breastwork :
23890: LD_ADDR_VAR 0 3
23894: PUSH
23895: LD_INT 6
23897: ST_TO_ADDR
23898: GO 23945
23900: LD_INT 32
23902: DOUBLE
23903: EQUAL
23904: IFTRUE 23914
23906: LD_INT 31
23908: DOUBLE
23909: EQUAL
23910: IFTRUE 23914
23912: GO 23925
23914: POP
// places := 1 ; b_control_tower :
23915: LD_ADDR_VAR 0 3
23919: PUSH
23920: LD_INT 1
23922: ST_TO_ADDR
23923: GO 23945
23925: LD_INT 36
23927: DOUBLE
23928: EQUAL
23929: IFTRUE 23933
23931: GO 23944
23933: POP
// places := 3 ; end ;
23934: LD_ADDR_VAR 0 3
23938: PUSH
23939: LD_INT 3
23941: ST_TO_ADDR
23942: GO 23945
23944: POP
// if places then
23945: LD_VAR 0 3
23949: IFFALSE 23972
// result := UnitsInside ( building ) < places ;
23951: LD_ADDR_VAR 0 2
23955: PUSH
23956: LD_VAR 0 1
23960: PPUSH
23961: CALL_OW 313
23965: PUSH
23966: LD_VAR 0 3
23970: LESS
23971: ST_TO_ADDR
// end ;
23972: LD_VAR 0 2
23976: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23977: LD_INT 0
23979: PPUSH
23980: PPUSH
23981: PPUSH
23982: PPUSH
// tmp := [ ] ;
23983: LD_ADDR_VAR 0 3
23987: PUSH
23988: EMPTY
23989: ST_TO_ADDR
// list := [ ] ;
23990: LD_ADDR_VAR 0 5
23994: PUSH
23995: EMPTY
23996: ST_TO_ADDR
// for i = 16 to 25 do
23997: LD_ADDR_VAR 0 4
24001: PUSH
24002: DOUBLE
24003: LD_INT 16
24005: DEC
24006: ST_TO_ADDR
24007: LD_INT 25
24009: PUSH
24010: FOR_TO
24011: IFFALSE 24084
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24013: LD_ADDR_VAR 0 3
24017: PUSH
24018: LD_VAR 0 3
24022: PUSH
24023: LD_INT 22
24025: PUSH
24026: LD_VAR 0 1
24030: PPUSH
24031: CALL_OW 255
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: LD_INT 91
24042: PUSH
24043: LD_VAR 0 1
24047: PUSH
24048: LD_INT 6
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 30
24058: PUSH
24059: LD_VAR 0 4
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: LIST
24072: PUSH
24073: EMPTY
24074: LIST
24075: PPUSH
24076: CALL_OW 69
24080: ADD
24081: ST_TO_ADDR
24082: GO 24010
24084: POP
24085: POP
// for i = 1 to tmp do
24086: LD_ADDR_VAR 0 4
24090: PUSH
24091: DOUBLE
24092: LD_INT 1
24094: DEC
24095: ST_TO_ADDR
24096: LD_VAR 0 3
24100: PUSH
24101: FOR_TO
24102: IFFALSE 24190
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24104: LD_ADDR_VAR 0 5
24108: PUSH
24109: LD_VAR 0 5
24113: PUSH
24114: LD_VAR 0 3
24118: PUSH
24119: LD_VAR 0 4
24123: ARRAY
24124: PPUSH
24125: CALL_OW 266
24129: PUSH
24130: LD_VAR 0 3
24134: PUSH
24135: LD_VAR 0 4
24139: ARRAY
24140: PPUSH
24141: CALL_OW 250
24145: PUSH
24146: LD_VAR 0 3
24150: PUSH
24151: LD_VAR 0 4
24155: ARRAY
24156: PPUSH
24157: CALL_OW 251
24161: PUSH
24162: LD_VAR 0 3
24166: PUSH
24167: LD_VAR 0 4
24171: ARRAY
24172: PPUSH
24173: CALL_OW 254
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: PUSH
24184: EMPTY
24185: LIST
24186: ADD
24187: ST_TO_ADDR
24188: GO 24101
24190: POP
24191: POP
// result := list ;
24192: LD_ADDR_VAR 0 2
24196: PUSH
24197: LD_VAR 0 5
24201: ST_TO_ADDR
// end ;
24202: LD_VAR 0 2
24206: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24207: LD_INT 0
24209: PPUSH
24210: PPUSH
24211: PPUSH
24212: PPUSH
24213: PPUSH
24214: PPUSH
24215: PPUSH
// if not factory then
24216: LD_VAR 0 1
24220: NOT
24221: IFFALSE 24225
// exit ;
24223: GO 24818
// if control = control_apeman then
24225: LD_VAR 0 4
24229: PUSH
24230: LD_INT 5
24232: EQUAL
24233: IFFALSE 24342
// begin tmp := UnitsInside ( factory ) ;
24235: LD_ADDR_VAR 0 8
24239: PUSH
24240: LD_VAR 0 1
24244: PPUSH
24245: CALL_OW 313
24249: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24250: LD_VAR 0 8
24254: PPUSH
24255: LD_INT 25
24257: PUSH
24258: LD_INT 12
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PPUSH
24265: CALL_OW 72
24269: NOT
24270: IFFALSE 24280
// control := control_manual ;
24272: LD_ADDR_VAR 0 4
24276: PUSH
24277: LD_INT 1
24279: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24280: LD_ADDR_VAR 0 8
24284: PUSH
24285: LD_VAR 0 1
24289: PPUSH
24290: CALL 23977 0 1
24294: ST_TO_ADDR
// if tmp then
24295: LD_VAR 0 8
24299: IFFALSE 24342
// begin for i in tmp do
24301: LD_ADDR_VAR 0 7
24305: PUSH
24306: LD_VAR 0 8
24310: PUSH
24311: FOR_IN
24312: IFFALSE 24340
// if i [ 1 ] = b_ext_radio then
24314: LD_VAR 0 7
24318: PUSH
24319: LD_INT 1
24321: ARRAY
24322: PUSH
24323: LD_INT 22
24325: EQUAL
24326: IFFALSE 24338
// begin control := control_remote ;
24328: LD_ADDR_VAR 0 4
24332: PUSH
24333: LD_INT 2
24335: ST_TO_ADDR
// break ;
24336: GO 24340
// end ;
24338: GO 24311
24340: POP
24341: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24342: LD_VAR 0 1
24346: PPUSH
24347: LD_VAR 0 2
24351: PPUSH
24352: LD_VAR 0 3
24356: PPUSH
24357: LD_VAR 0 4
24361: PPUSH
24362: LD_VAR 0 5
24366: PPUSH
24367: CALL_OW 448
24371: IFFALSE 24406
// begin result := [ chassis , engine , control , weapon ] ;
24373: LD_ADDR_VAR 0 6
24377: PUSH
24378: LD_VAR 0 2
24382: PUSH
24383: LD_VAR 0 3
24387: PUSH
24388: LD_VAR 0 4
24392: PUSH
24393: LD_VAR 0 5
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: ST_TO_ADDR
// exit ;
24404: GO 24818
// end ; _chassis := AvailableChassisList ( factory ) ;
24406: LD_ADDR_VAR 0 9
24410: PUSH
24411: LD_VAR 0 1
24415: PPUSH
24416: CALL_OW 475
24420: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24421: LD_ADDR_VAR 0 11
24425: PUSH
24426: LD_VAR 0 1
24430: PPUSH
24431: CALL_OW 476
24435: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24436: LD_ADDR_VAR 0 12
24440: PUSH
24441: LD_VAR 0 1
24445: PPUSH
24446: CALL_OW 477
24450: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24451: LD_ADDR_VAR 0 10
24455: PUSH
24456: LD_VAR 0 1
24460: PPUSH
24461: CALL_OW 478
24465: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24466: LD_VAR 0 9
24470: NOT
24471: PUSH
24472: LD_VAR 0 11
24476: NOT
24477: OR
24478: PUSH
24479: LD_VAR 0 12
24483: NOT
24484: OR
24485: PUSH
24486: LD_VAR 0 10
24490: NOT
24491: OR
24492: IFFALSE 24527
// begin result := [ chassis , engine , control , weapon ] ;
24494: LD_ADDR_VAR 0 6
24498: PUSH
24499: LD_VAR 0 2
24503: PUSH
24504: LD_VAR 0 3
24508: PUSH
24509: LD_VAR 0 4
24513: PUSH
24514: LD_VAR 0 5
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: ST_TO_ADDR
// exit ;
24525: GO 24818
// end ; if not chassis in _chassis then
24527: LD_VAR 0 2
24531: PUSH
24532: LD_VAR 0 9
24536: IN
24537: NOT
24538: IFFALSE 24564
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24540: LD_ADDR_VAR 0 2
24544: PUSH
24545: LD_VAR 0 9
24549: PUSH
24550: LD_INT 1
24552: PPUSH
24553: LD_VAR 0 9
24557: PPUSH
24558: CALL_OW 12
24562: ARRAY
24563: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24564: LD_VAR 0 2
24568: PPUSH
24569: LD_VAR 0 3
24573: PPUSH
24574: CALL 24823 0 2
24578: NOT
24579: IFFALSE 24638
// repeat engine := _engine [ 1 ] ;
24581: LD_ADDR_VAR 0 3
24585: PUSH
24586: LD_VAR 0 11
24590: PUSH
24591: LD_INT 1
24593: ARRAY
24594: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24595: LD_ADDR_VAR 0 11
24599: PUSH
24600: LD_VAR 0 11
24604: PPUSH
24605: LD_INT 1
24607: PPUSH
24608: CALL_OW 3
24612: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24613: LD_VAR 0 2
24617: PPUSH
24618: LD_VAR 0 3
24622: PPUSH
24623: CALL 24823 0 2
24627: PUSH
24628: LD_VAR 0 11
24632: PUSH
24633: EMPTY
24634: EQUAL
24635: OR
24636: IFFALSE 24581
// if not control in _control then
24638: LD_VAR 0 4
24642: PUSH
24643: LD_VAR 0 12
24647: IN
24648: NOT
24649: IFFALSE 24675
// control := _control [ rand ( 1 , _control ) ] ;
24651: LD_ADDR_VAR 0 4
24655: PUSH
24656: LD_VAR 0 12
24660: PUSH
24661: LD_INT 1
24663: PPUSH
24664: LD_VAR 0 12
24668: PPUSH
24669: CALL_OW 12
24673: ARRAY
24674: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24675: LD_VAR 0 2
24679: PPUSH
24680: LD_VAR 0 5
24684: PPUSH
24685: CALL 25043 0 2
24689: NOT
24690: IFFALSE 24749
// repeat weapon := _weapon [ 1 ] ;
24692: LD_ADDR_VAR 0 5
24696: PUSH
24697: LD_VAR 0 10
24701: PUSH
24702: LD_INT 1
24704: ARRAY
24705: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24706: LD_ADDR_VAR 0 10
24710: PUSH
24711: LD_VAR 0 10
24715: PPUSH
24716: LD_INT 1
24718: PPUSH
24719: CALL_OW 3
24723: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24724: LD_VAR 0 2
24728: PPUSH
24729: LD_VAR 0 5
24733: PPUSH
24734: CALL 25043 0 2
24738: PUSH
24739: LD_VAR 0 10
24743: PUSH
24744: EMPTY
24745: EQUAL
24746: OR
24747: IFFALSE 24692
// result := [ ] ;
24749: LD_ADDR_VAR 0 6
24753: PUSH
24754: EMPTY
24755: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24756: LD_VAR 0 1
24760: PPUSH
24761: LD_VAR 0 2
24765: PPUSH
24766: LD_VAR 0 3
24770: PPUSH
24771: LD_VAR 0 4
24775: PPUSH
24776: LD_VAR 0 5
24780: PPUSH
24781: CALL_OW 448
24785: IFFALSE 24818
// result := [ chassis , engine , control , weapon ] ;
24787: LD_ADDR_VAR 0 6
24791: PUSH
24792: LD_VAR 0 2
24796: PUSH
24797: LD_VAR 0 3
24801: PUSH
24802: LD_VAR 0 4
24806: PUSH
24807: LD_VAR 0 5
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: ST_TO_ADDR
// end ;
24818: LD_VAR 0 6
24822: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24823: LD_INT 0
24825: PPUSH
// if not chassis or not engine then
24826: LD_VAR 0 1
24830: NOT
24831: PUSH
24832: LD_VAR 0 2
24836: NOT
24837: OR
24838: IFFALSE 24842
// exit ;
24840: GO 25038
// case engine of engine_solar :
24842: LD_VAR 0 2
24846: PUSH
24847: LD_INT 2
24849: DOUBLE
24850: EQUAL
24851: IFTRUE 24855
24853: GO 24893
24855: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24856: LD_ADDR_VAR 0 3
24860: PUSH
24861: LD_INT 11
24863: PUSH
24864: LD_INT 12
24866: PUSH
24867: LD_INT 13
24869: PUSH
24870: LD_INT 14
24872: PUSH
24873: LD_INT 1
24875: PUSH
24876: LD_INT 2
24878: PUSH
24879: LD_INT 3
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: ST_TO_ADDR
24891: GO 25022
24893: LD_INT 1
24895: DOUBLE
24896: EQUAL
24897: IFTRUE 24901
24899: GO 24963
24901: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24902: LD_ADDR_VAR 0 3
24906: PUSH
24907: LD_INT 11
24909: PUSH
24910: LD_INT 12
24912: PUSH
24913: LD_INT 13
24915: PUSH
24916: LD_INT 14
24918: PUSH
24919: LD_INT 1
24921: PUSH
24922: LD_INT 2
24924: PUSH
24925: LD_INT 3
24927: PUSH
24928: LD_INT 4
24930: PUSH
24931: LD_INT 5
24933: PUSH
24934: LD_INT 21
24936: PUSH
24937: LD_INT 23
24939: PUSH
24940: LD_INT 22
24942: PUSH
24943: LD_INT 24
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: ST_TO_ADDR
24961: GO 25022
24963: LD_INT 3
24965: DOUBLE
24966: EQUAL
24967: IFTRUE 24971
24969: GO 25021
24971: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24972: LD_ADDR_VAR 0 3
24976: PUSH
24977: LD_INT 13
24979: PUSH
24980: LD_INT 14
24982: PUSH
24983: LD_INT 2
24985: PUSH
24986: LD_INT 3
24988: PUSH
24989: LD_INT 4
24991: PUSH
24992: LD_INT 5
24994: PUSH
24995: LD_INT 21
24997: PUSH
24998: LD_INT 22
25000: PUSH
25001: LD_INT 23
25003: PUSH
25004: LD_INT 24
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: ST_TO_ADDR
25019: GO 25022
25021: POP
// result := ( chassis in result ) ;
25022: LD_ADDR_VAR 0 3
25026: PUSH
25027: LD_VAR 0 1
25031: PUSH
25032: LD_VAR 0 3
25036: IN
25037: ST_TO_ADDR
// end ;
25038: LD_VAR 0 3
25042: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25043: LD_INT 0
25045: PPUSH
// if not chassis or not weapon then
25046: LD_VAR 0 1
25050: NOT
25051: PUSH
25052: LD_VAR 0 2
25056: NOT
25057: OR
25058: IFFALSE 25062
// exit ;
25060: GO 26124
// case weapon of us_machine_gun :
25062: LD_VAR 0 2
25066: PUSH
25067: LD_INT 2
25069: DOUBLE
25070: EQUAL
25071: IFTRUE 25075
25073: GO 25105
25075: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25076: LD_ADDR_VAR 0 3
25080: PUSH
25081: LD_INT 1
25083: PUSH
25084: LD_INT 2
25086: PUSH
25087: LD_INT 3
25089: PUSH
25090: LD_INT 4
25092: PUSH
25093: LD_INT 5
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: ST_TO_ADDR
25103: GO 26108
25105: LD_INT 3
25107: DOUBLE
25108: EQUAL
25109: IFTRUE 25113
25111: GO 25143
25113: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25114: LD_ADDR_VAR 0 3
25118: PUSH
25119: LD_INT 1
25121: PUSH
25122: LD_INT 2
25124: PUSH
25125: LD_INT 3
25127: PUSH
25128: LD_INT 4
25130: PUSH
25131: LD_INT 5
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: ST_TO_ADDR
25141: GO 26108
25143: LD_INT 11
25145: DOUBLE
25146: EQUAL
25147: IFTRUE 25151
25149: GO 25181
25151: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25152: LD_ADDR_VAR 0 3
25156: PUSH
25157: LD_INT 1
25159: PUSH
25160: LD_INT 2
25162: PUSH
25163: LD_INT 3
25165: PUSH
25166: LD_INT 4
25168: PUSH
25169: LD_INT 5
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: ST_TO_ADDR
25179: GO 26108
25181: LD_INT 4
25183: DOUBLE
25184: EQUAL
25185: IFTRUE 25189
25187: GO 25215
25189: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25190: LD_ADDR_VAR 0 3
25194: PUSH
25195: LD_INT 2
25197: PUSH
25198: LD_INT 3
25200: PUSH
25201: LD_INT 4
25203: PUSH
25204: LD_INT 5
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: ST_TO_ADDR
25213: GO 26108
25215: LD_INT 5
25217: DOUBLE
25218: EQUAL
25219: IFTRUE 25223
25221: GO 25249
25223: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25224: LD_ADDR_VAR 0 3
25228: PUSH
25229: LD_INT 2
25231: PUSH
25232: LD_INT 3
25234: PUSH
25235: LD_INT 4
25237: PUSH
25238: LD_INT 5
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: ST_TO_ADDR
25247: GO 26108
25249: LD_INT 9
25251: DOUBLE
25252: EQUAL
25253: IFTRUE 25257
25255: GO 25283
25257: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25258: LD_ADDR_VAR 0 3
25262: PUSH
25263: LD_INT 2
25265: PUSH
25266: LD_INT 3
25268: PUSH
25269: LD_INT 4
25271: PUSH
25272: LD_INT 5
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: ST_TO_ADDR
25281: GO 26108
25283: LD_INT 7
25285: DOUBLE
25286: EQUAL
25287: IFTRUE 25291
25289: GO 25317
25291: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25292: LD_ADDR_VAR 0 3
25296: PUSH
25297: LD_INT 2
25299: PUSH
25300: LD_INT 3
25302: PUSH
25303: LD_INT 4
25305: PUSH
25306: LD_INT 5
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: ST_TO_ADDR
25315: GO 26108
25317: LD_INT 12
25319: DOUBLE
25320: EQUAL
25321: IFTRUE 25325
25323: GO 25351
25325: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25326: LD_ADDR_VAR 0 3
25330: PUSH
25331: LD_INT 2
25333: PUSH
25334: LD_INT 3
25336: PUSH
25337: LD_INT 4
25339: PUSH
25340: LD_INT 5
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: ST_TO_ADDR
25349: GO 26108
25351: LD_INT 13
25353: DOUBLE
25354: EQUAL
25355: IFTRUE 25359
25357: GO 25385
25359: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25360: LD_ADDR_VAR 0 3
25364: PUSH
25365: LD_INT 2
25367: PUSH
25368: LD_INT 3
25370: PUSH
25371: LD_INT 4
25373: PUSH
25374: LD_INT 5
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: ST_TO_ADDR
25383: GO 26108
25385: LD_INT 14
25387: DOUBLE
25388: EQUAL
25389: IFTRUE 25393
25391: GO 25411
25393: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25394: LD_ADDR_VAR 0 3
25398: PUSH
25399: LD_INT 4
25401: PUSH
25402: LD_INT 5
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: ST_TO_ADDR
25409: GO 26108
25411: LD_INT 6
25413: DOUBLE
25414: EQUAL
25415: IFTRUE 25419
25417: GO 25437
25419: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25420: LD_ADDR_VAR 0 3
25424: PUSH
25425: LD_INT 4
25427: PUSH
25428: LD_INT 5
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: ST_TO_ADDR
25435: GO 26108
25437: LD_INT 10
25439: DOUBLE
25440: EQUAL
25441: IFTRUE 25445
25443: GO 25463
25445: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25446: LD_ADDR_VAR 0 3
25450: PUSH
25451: LD_INT 4
25453: PUSH
25454: LD_INT 5
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: ST_TO_ADDR
25461: GO 26108
25463: LD_INT 22
25465: DOUBLE
25466: EQUAL
25467: IFTRUE 25471
25469: GO 25497
25471: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25472: LD_ADDR_VAR 0 3
25476: PUSH
25477: LD_INT 11
25479: PUSH
25480: LD_INT 12
25482: PUSH
25483: LD_INT 13
25485: PUSH
25486: LD_INT 14
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: ST_TO_ADDR
25495: GO 26108
25497: LD_INT 23
25499: DOUBLE
25500: EQUAL
25501: IFTRUE 25505
25503: GO 25531
25505: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25506: LD_ADDR_VAR 0 3
25510: PUSH
25511: LD_INT 11
25513: PUSH
25514: LD_INT 12
25516: PUSH
25517: LD_INT 13
25519: PUSH
25520: LD_INT 14
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: ST_TO_ADDR
25529: GO 26108
25531: LD_INT 24
25533: DOUBLE
25534: EQUAL
25535: IFTRUE 25539
25537: GO 25565
25539: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25540: LD_ADDR_VAR 0 3
25544: PUSH
25545: LD_INT 11
25547: PUSH
25548: LD_INT 12
25550: PUSH
25551: LD_INT 13
25553: PUSH
25554: LD_INT 14
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: ST_TO_ADDR
25563: GO 26108
25565: LD_INT 30
25567: DOUBLE
25568: EQUAL
25569: IFTRUE 25573
25571: GO 25599
25573: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25574: LD_ADDR_VAR 0 3
25578: PUSH
25579: LD_INT 11
25581: PUSH
25582: LD_INT 12
25584: PUSH
25585: LD_INT 13
25587: PUSH
25588: LD_INT 14
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: ST_TO_ADDR
25597: GO 26108
25599: LD_INT 25
25601: DOUBLE
25602: EQUAL
25603: IFTRUE 25607
25605: GO 25625
25607: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25608: LD_ADDR_VAR 0 3
25612: PUSH
25613: LD_INT 13
25615: PUSH
25616: LD_INT 14
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: ST_TO_ADDR
25623: GO 26108
25625: LD_INT 27
25627: DOUBLE
25628: EQUAL
25629: IFTRUE 25633
25631: GO 25651
25633: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25634: LD_ADDR_VAR 0 3
25638: PUSH
25639: LD_INT 13
25641: PUSH
25642: LD_INT 14
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: ST_TO_ADDR
25649: GO 26108
25651: LD_EXP 77
25655: DOUBLE
25656: EQUAL
25657: IFTRUE 25661
25659: GO 25687
25661: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25662: LD_ADDR_VAR 0 3
25666: PUSH
25667: LD_INT 11
25669: PUSH
25670: LD_INT 12
25672: PUSH
25673: LD_INT 13
25675: PUSH
25676: LD_INT 14
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: ST_TO_ADDR
25685: GO 26108
25687: LD_INT 28
25689: DOUBLE
25690: EQUAL
25691: IFTRUE 25695
25693: GO 25713
25695: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25696: LD_ADDR_VAR 0 3
25700: PUSH
25701: LD_INT 13
25703: PUSH
25704: LD_INT 14
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: ST_TO_ADDR
25711: GO 26108
25713: LD_INT 29
25715: DOUBLE
25716: EQUAL
25717: IFTRUE 25721
25719: GO 25739
25721: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25722: LD_ADDR_VAR 0 3
25726: PUSH
25727: LD_INT 13
25729: PUSH
25730: LD_INT 14
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: ST_TO_ADDR
25737: GO 26108
25739: LD_INT 31
25741: DOUBLE
25742: EQUAL
25743: IFTRUE 25747
25745: GO 25765
25747: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25748: LD_ADDR_VAR 0 3
25752: PUSH
25753: LD_INT 13
25755: PUSH
25756: LD_INT 14
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: ST_TO_ADDR
25763: GO 26108
25765: LD_INT 26
25767: DOUBLE
25768: EQUAL
25769: IFTRUE 25773
25771: GO 25791
25773: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25774: LD_ADDR_VAR 0 3
25778: PUSH
25779: LD_INT 13
25781: PUSH
25782: LD_INT 14
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: ST_TO_ADDR
25789: GO 26108
25791: LD_INT 42
25793: DOUBLE
25794: EQUAL
25795: IFTRUE 25799
25797: GO 25825
25799: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25800: LD_ADDR_VAR 0 3
25804: PUSH
25805: LD_INT 21
25807: PUSH
25808: LD_INT 22
25810: PUSH
25811: LD_INT 23
25813: PUSH
25814: LD_INT 24
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: ST_TO_ADDR
25823: GO 26108
25825: LD_INT 43
25827: DOUBLE
25828: EQUAL
25829: IFTRUE 25833
25831: GO 25859
25833: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25834: LD_ADDR_VAR 0 3
25838: PUSH
25839: LD_INT 21
25841: PUSH
25842: LD_INT 22
25844: PUSH
25845: LD_INT 23
25847: PUSH
25848: LD_INT 24
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: ST_TO_ADDR
25857: GO 26108
25859: LD_INT 44
25861: DOUBLE
25862: EQUAL
25863: IFTRUE 25867
25865: GO 25893
25867: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25868: LD_ADDR_VAR 0 3
25872: PUSH
25873: LD_INT 21
25875: PUSH
25876: LD_INT 22
25878: PUSH
25879: LD_INT 23
25881: PUSH
25882: LD_INT 24
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: ST_TO_ADDR
25891: GO 26108
25893: LD_INT 45
25895: DOUBLE
25896: EQUAL
25897: IFTRUE 25901
25899: GO 25927
25901: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25902: LD_ADDR_VAR 0 3
25906: PUSH
25907: LD_INT 21
25909: PUSH
25910: LD_INT 22
25912: PUSH
25913: LD_INT 23
25915: PUSH
25916: LD_INT 24
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: ST_TO_ADDR
25925: GO 26108
25927: LD_INT 49
25929: DOUBLE
25930: EQUAL
25931: IFTRUE 25935
25933: GO 25961
25935: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25936: LD_ADDR_VAR 0 3
25940: PUSH
25941: LD_INT 21
25943: PUSH
25944: LD_INT 22
25946: PUSH
25947: LD_INT 23
25949: PUSH
25950: LD_INT 24
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: ST_TO_ADDR
25959: GO 26108
25961: LD_INT 51
25963: DOUBLE
25964: EQUAL
25965: IFTRUE 25969
25967: GO 25995
25969: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25970: LD_ADDR_VAR 0 3
25974: PUSH
25975: LD_INT 21
25977: PUSH
25978: LD_INT 22
25980: PUSH
25981: LD_INT 23
25983: PUSH
25984: LD_INT 24
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: ST_TO_ADDR
25993: GO 26108
25995: LD_INT 52
25997: DOUBLE
25998: EQUAL
25999: IFTRUE 26003
26001: GO 26029
26003: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26004: LD_ADDR_VAR 0 3
26008: PUSH
26009: LD_INT 21
26011: PUSH
26012: LD_INT 22
26014: PUSH
26015: LD_INT 23
26017: PUSH
26018: LD_INT 24
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: ST_TO_ADDR
26027: GO 26108
26029: LD_INT 53
26031: DOUBLE
26032: EQUAL
26033: IFTRUE 26037
26035: GO 26055
26037: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26038: LD_ADDR_VAR 0 3
26042: PUSH
26043: LD_INT 23
26045: PUSH
26046: LD_INT 24
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: ST_TO_ADDR
26053: GO 26108
26055: LD_INT 46
26057: DOUBLE
26058: EQUAL
26059: IFTRUE 26063
26061: GO 26081
26063: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26064: LD_ADDR_VAR 0 3
26068: PUSH
26069: LD_INT 23
26071: PUSH
26072: LD_INT 24
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: ST_TO_ADDR
26079: GO 26108
26081: LD_INT 47
26083: DOUBLE
26084: EQUAL
26085: IFTRUE 26089
26087: GO 26107
26089: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26090: LD_ADDR_VAR 0 3
26094: PUSH
26095: LD_INT 23
26097: PUSH
26098: LD_INT 24
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: ST_TO_ADDR
26105: GO 26108
26107: POP
// result := ( chassis in result ) ;
26108: LD_ADDR_VAR 0 3
26112: PUSH
26113: LD_VAR 0 1
26117: PUSH
26118: LD_VAR 0 3
26122: IN
26123: ST_TO_ADDR
// end ;
26124: LD_VAR 0 3
26128: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26129: LD_INT 0
26131: PPUSH
26132: PPUSH
26133: PPUSH
26134: PPUSH
26135: PPUSH
26136: PPUSH
26137: PPUSH
// result := array ;
26138: LD_ADDR_VAR 0 5
26142: PUSH
26143: LD_VAR 0 1
26147: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26148: LD_VAR 0 1
26152: NOT
26153: PUSH
26154: LD_VAR 0 2
26158: NOT
26159: OR
26160: PUSH
26161: LD_VAR 0 3
26165: NOT
26166: OR
26167: PUSH
26168: LD_VAR 0 2
26172: PUSH
26173: LD_VAR 0 1
26177: GREATER
26178: OR
26179: PUSH
26180: LD_VAR 0 3
26184: PUSH
26185: LD_VAR 0 1
26189: GREATER
26190: OR
26191: IFFALSE 26195
// exit ;
26193: GO 26491
// if direction then
26195: LD_VAR 0 4
26199: IFFALSE 26263
// begin d := 1 ;
26201: LD_ADDR_VAR 0 9
26205: PUSH
26206: LD_INT 1
26208: ST_TO_ADDR
// if i_from > i_to then
26209: LD_VAR 0 2
26213: PUSH
26214: LD_VAR 0 3
26218: GREATER
26219: IFFALSE 26245
// length := ( array - i_from ) + i_to else
26221: LD_ADDR_VAR 0 11
26225: PUSH
26226: LD_VAR 0 1
26230: PUSH
26231: LD_VAR 0 2
26235: MINUS
26236: PUSH
26237: LD_VAR 0 3
26241: PLUS
26242: ST_TO_ADDR
26243: GO 26261
// length := i_to - i_from ;
26245: LD_ADDR_VAR 0 11
26249: PUSH
26250: LD_VAR 0 3
26254: PUSH
26255: LD_VAR 0 2
26259: MINUS
26260: ST_TO_ADDR
// end else
26261: GO 26324
// begin d := - 1 ;
26263: LD_ADDR_VAR 0 9
26267: PUSH
26268: LD_INT 1
26270: NEG
26271: ST_TO_ADDR
// if i_from > i_to then
26272: LD_VAR 0 2
26276: PUSH
26277: LD_VAR 0 3
26281: GREATER
26282: IFFALSE 26302
// length := i_from - i_to else
26284: LD_ADDR_VAR 0 11
26288: PUSH
26289: LD_VAR 0 2
26293: PUSH
26294: LD_VAR 0 3
26298: MINUS
26299: ST_TO_ADDR
26300: GO 26324
// length := ( array - i_to ) + i_from ;
26302: LD_ADDR_VAR 0 11
26306: PUSH
26307: LD_VAR 0 1
26311: PUSH
26312: LD_VAR 0 3
26316: MINUS
26317: PUSH
26318: LD_VAR 0 2
26322: PLUS
26323: ST_TO_ADDR
// end ; if not length then
26324: LD_VAR 0 11
26328: NOT
26329: IFFALSE 26333
// exit ;
26331: GO 26491
// tmp := array ;
26333: LD_ADDR_VAR 0 10
26337: PUSH
26338: LD_VAR 0 1
26342: ST_TO_ADDR
// for i = 1 to length do
26343: LD_ADDR_VAR 0 6
26347: PUSH
26348: DOUBLE
26349: LD_INT 1
26351: DEC
26352: ST_TO_ADDR
26353: LD_VAR 0 11
26357: PUSH
26358: FOR_TO
26359: IFFALSE 26479
// begin for j = 1 to array do
26361: LD_ADDR_VAR 0 7
26365: PUSH
26366: DOUBLE
26367: LD_INT 1
26369: DEC
26370: ST_TO_ADDR
26371: LD_VAR 0 1
26375: PUSH
26376: FOR_TO
26377: IFFALSE 26465
// begin k := j + d ;
26379: LD_ADDR_VAR 0 8
26383: PUSH
26384: LD_VAR 0 7
26388: PUSH
26389: LD_VAR 0 9
26393: PLUS
26394: ST_TO_ADDR
// if k > array then
26395: LD_VAR 0 8
26399: PUSH
26400: LD_VAR 0 1
26404: GREATER
26405: IFFALSE 26415
// k := 1 ;
26407: LD_ADDR_VAR 0 8
26411: PUSH
26412: LD_INT 1
26414: ST_TO_ADDR
// if not k then
26415: LD_VAR 0 8
26419: NOT
26420: IFFALSE 26432
// k := array ;
26422: LD_ADDR_VAR 0 8
26426: PUSH
26427: LD_VAR 0 1
26431: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26432: LD_ADDR_VAR 0 10
26436: PUSH
26437: LD_VAR 0 10
26441: PPUSH
26442: LD_VAR 0 8
26446: PPUSH
26447: LD_VAR 0 1
26451: PUSH
26452: LD_VAR 0 7
26456: ARRAY
26457: PPUSH
26458: CALL_OW 1
26462: ST_TO_ADDR
// end ;
26463: GO 26376
26465: POP
26466: POP
// array := tmp ;
26467: LD_ADDR_VAR 0 1
26471: PUSH
26472: LD_VAR 0 10
26476: ST_TO_ADDR
// end ;
26477: GO 26358
26479: POP
26480: POP
// result := array ;
26481: LD_ADDR_VAR 0 5
26485: PUSH
26486: LD_VAR 0 1
26490: ST_TO_ADDR
// end ;
26491: LD_VAR 0 5
26495: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26496: LD_INT 0
26498: PPUSH
26499: PPUSH
// result := 0 ;
26500: LD_ADDR_VAR 0 3
26504: PUSH
26505: LD_INT 0
26507: ST_TO_ADDR
// if not array or not value in array then
26508: LD_VAR 0 1
26512: NOT
26513: PUSH
26514: LD_VAR 0 2
26518: PUSH
26519: LD_VAR 0 1
26523: IN
26524: NOT
26525: OR
26526: IFFALSE 26530
// exit ;
26528: GO 26584
// for i = 1 to array do
26530: LD_ADDR_VAR 0 4
26534: PUSH
26535: DOUBLE
26536: LD_INT 1
26538: DEC
26539: ST_TO_ADDR
26540: LD_VAR 0 1
26544: PUSH
26545: FOR_TO
26546: IFFALSE 26582
// if value = array [ i ] then
26548: LD_VAR 0 2
26552: PUSH
26553: LD_VAR 0 1
26557: PUSH
26558: LD_VAR 0 4
26562: ARRAY
26563: EQUAL
26564: IFFALSE 26580
// begin result := i ;
26566: LD_ADDR_VAR 0 3
26570: PUSH
26571: LD_VAR 0 4
26575: ST_TO_ADDR
// exit ;
26576: POP
26577: POP
26578: GO 26584
// end ;
26580: GO 26545
26582: POP
26583: POP
// end ;
26584: LD_VAR 0 3
26588: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26589: LD_INT 0
26591: PPUSH
// vc_chassis := chassis ;
26592: LD_ADDR_OWVAR 37
26596: PUSH
26597: LD_VAR 0 1
26601: ST_TO_ADDR
// vc_engine := engine ;
26602: LD_ADDR_OWVAR 39
26606: PUSH
26607: LD_VAR 0 2
26611: ST_TO_ADDR
// vc_control := control ;
26612: LD_ADDR_OWVAR 38
26616: PUSH
26617: LD_VAR 0 3
26621: ST_TO_ADDR
// vc_weapon := weapon ;
26622: LD_ADDR_OWVAR 40
26626: PUSH
26627: LD_VAR 0 4
26631: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26632: LD_ADDR_OWVAR 41
26636: PUSH
26637: LD_VAR 0 5
26641: ST_TO_ADDR
// end ;
26642: LD_VAR 0 6
26646: RET
// export function WantPlant ( unit ) ; var task ; begin
26647: LD_INT 0
26649: PPUSH
26650: PPUSH
// result := false ;
26651: LD_ADDR_VAR 0 2
26655: PUSH
26656: LD_INT 0
26658: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26659: LD_ADDR_VAR 0 3
26663: PUSH
26664: LD_VAR 0 1
26668: PPUSH
26669: CALL_OW 437
26673: ST_TO_ADDR
// if task then
26674: LD_VAR 0 3
26678: IFFALSE 26706
// if task [ 1 ] [ 1 ] = p then
26680: LD_VAR 0 3
26684: PUSH
26685: LD_INT 1
26687: ARRAY
26688: PUSH
26689: LD_INT 1
26691: ARRAY
26692: PUSH
26693: LD_STRING p
26695: EQUAL
26696: IFFALSE 26706
// result := true ;
26698: LD_ADDR_VAR 0 2
26702: PUSH
26703: LD_INT 1
26705: ST_TO_ADDR
// end ;
26706: LD_VAR 0 2
26710: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26711: LD_INT 0
26713: PPUSH
26714: PPUSH
26715: PPUSH
26716: PPUSH
// if pos < 1 then
26717: LD_VAR 0 2
26721: PUSH
26722: LD_INT 1
26724: LESS
26725: IFFALSE 26729
// exit ;
26727: GO 27032
// if pos = 1 then
26729: LD_VAR 0 2
26733: PUSH
26734: LD_INT 1
26736: EQUAL
26737: IFFALSE 26770
// result := Replace ( arr , pos [ 1 ] , value ) else
26739: LD_ADDR_VAR 0 4
26743: PUSH
26744: LD_VAR 0 1
26748: PPUSH
26749: LD_VAR 0 2
26753: PUSH
26754: LD_INT 1
26756: ARRAY
26757: PPUSH
26758: LD_VAR 0 3
26762: PPUSH
26763: CALL_OW 1
26767: ST_TO_ADDR
26768: GO 27032
// begin tmp := arr ;
26770: LD_ADDR_VAR 0 6
26774: PUSH
26775: LD_VAR 0 1
26779: ST_TO_ADDR
// s_arr := [ tmp ] ;
26780: LD_ADDR_VAR 0 7
26784: PUSH
26785: LD_VAR 0 6
26789: PUSH
26790: EMPTY
26791: LIST
26792: ST_TO_ADDR
// for i = 1 to pos - 1 do
26793: LD_ADDR_VAR 0 5
26797: PUSH
26798: DOUBLE
26799: LD_INT 1
26801: DEC
26802: ST_TO_ADDR
26803: LD_VAR 0 2
26807: PUSH
26808: LD_INT 1
26810: MINUS
26811: PUSH
26812: FOR_TO
26813: IFFALSE 26858
// begin tmp := tmp [ pos [ i ] ] ;
26815: LD_ADDR_VAR 0 6
26819: PUSH
26820: LD_VAR 0 6
26824: PUSH
26825: LD_VAR 0 2
26829: PUSH
26830: LD_VAR 0 5
26834: ARRAY
26835: ARRAY
26836: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26837: LD_ADDR_VAR 0 7
26841: PUSH
26842: LD_VAR 0 7
26846: PUSH
26847: LD_VAR 0 6
26851: PUSH
26852: EMPTY
26853: LIST
26854: ADD
26855: ST_TO_ADDR
// end ;
26856: GO 26812
26858: POP
26859: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26860: LD_ADDR_VAR 0 6
26864: PUSH
26865: LD_VAR 0 6
26869: PPUSH
26870: LD_VAR 0 2
26874: PUSH
26875: LD_VAR 0 2
26879: ARRAY
26880: PPUSH
26881: LD_VAR 0 3
26885: PPUSH
26886: CALL_OW 1
26890: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26891: LD_ADDR_VAR 0 7
26895: PUSH
26896: LD_VAR 0 7
26900: PPUSH
26901: LD_VAR 0 7
26905: PPUSH
26906: LD_VAR 0 6
26910: PPUSH
26911: CALL_OW 1
26915: ST_TO_ADDR
// for i = s_arr downto 2 do
26916: LD_ADDR_VAR 0 5
26920: PUSH
26921: DOUBLE
26922: LD_VAR 0 7
26926: INC
26927: ST_TO_ADDR
26928: LD_INT 2
26930: PUSH
26931: FOR_DOWNTO
26932: IFFALSE 27016
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26934: LD_ADDR_VAR 0 6
26938: PUSH
26939: LD_VAR 0 7
26943: PUSH
26944: LD_VAR 0 5
26948: PUSH
26949: LD_INT 1
26951: MINUS
26952: ARRAY
26953: PPUSH
26954: LD_VAR 0 2
26958: PUSH
26959: LD_VAR 0 5
26963: PUSH
26964: LD_INT 1
26966: MINUS
26967: ARRAY
26968: PPUSH
26969: LD_VAR 0 7
26973: PUSH
26974: LD_VAR 0 5
26978: ARRAY
26979: PPUSH
26980: CALL_OW 1
26984: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26985: LD_ADDR_VAR 0 7
26989: PUSH
26990: LD_VAR 0 7
26994: PPUSH
26995: LD_VAR 0 5
26999: PUSH
27000: LD_INT 1
27002: MINUS
27003: PPUSH
27004: LD_VAR 0 6
27008: PPUSH
27009: CALL_OW 1
27013: ST_TO_ADDR
// end ;
27014: GO 26931
27016: POP
27017: POP
// result := s_arr [ 1 ] ;
27018: LD_ADDR_VAR 0 4
27022: PUSH
27023: LD_VAR 0 7
27027: PUSH
27028: LD_INT 1
27030: ARRAY
27031: ST_TO_ADDR
// end ; end ;
27032: LD_VAR 0 4
27036: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27037: LD_INT 0
27039: PPUSH
27040: PPUSH
// if not list then
27041: LD_VAR 0 1
27045: NOT
27046: IFFALSE 27050
// exit ;
27048: GO 27141
// i := list [ pos1 ] ;
27050: LD_ADDR_VAR 0 5
27054: PUSH
27055: LD_VAR 0 1
27059: PUSH
27060: LD_VAR 0 2
27064: ARRAY
27065: ST_TO_ADDR
// if not i then
27066: LD_VAR 0 5
27070: NOT
27071: IFFALSE 27075
// exit ;
27073: GO 27141
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27075: LD_ADDR_VAR 0 1
27079: PUSH
27080: LD_VAR 0 1
27084: PPUSH
27085: LD_VAR 0 2
27089: PPUSH
27090: LD_VAR 0 1
27094: PUSH
27095: LD_VAR 0 3
27099: ARRAY
27100: PPUSH
27101: CALL_OW 1
27105: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27106: LD_ADDR_VAR 0 1
27110: PUSH
27111: LD_VAR 0 1
27115: PPUSH
27116: LD_VAR 0 3
27120: PPUSH
27121: LD_VAR 0 5
27125: PPUSH
27126: CALL_OW 1
27130: ST_TO_ADDR
// result := list ;
27131: LD_ADDR_VAR 0 4
27135: PUSH
27136: LD_VAR 0 1
27140: ST_TO_ADDR
// end ;
27141: LD_VAR 0 4
27145: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27146: LD_INT 0
27148: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27149: LD_ADDR_VAR 0 5
27153: PUSH
27154: LD_VAR 0 1
27158: PPUSH
27159: CALL_OW 250
27163: PPUSH
27164: LD_VAR 0 1
27168: PPUSH
27169: CALL_OW 251
27173: PPUSH
27174: LD_VAR 0 2
27178: PPUSH
27179: LD_VAR 0 3
27183: PPUSH
27184: LD_VAR 0 4
27188: PPUSH
27189: CALL 27199 0 5
27193: ST_TO_ADDR
// end ;
27194: LD_VAR 0 5
27198: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27199: LD_INT 0
27201: PPUSH
27202: PPUSH
27203: PPUSH
27204: PPUSH
// if not list then
27205: LD_VAR 0 3
27209: NOT
27210: IFFALSE 27214
// exit ;
27212: GO 27602
// result := [ ] ;
27214: LD_ADDR_VAR 0 6
27218: PUSH
27219: EMPTY
27220: ST_TO_ADDR
// for i in list do
27221: LD_ADDR_VAR 0 7
27225: PUSH
27226: LD_VAR 0 3
27230: PUSH
27231: FOR_IN
27232: IFFALSE 27434
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27234: LD_ADDR_VAR 0 9
27238: PUSH
27239: LD_VAR 0 7
27243: PPUSH
27244: LD_VAR 0 1
27248: PPUSH
27249: LD_VAR 0 2
27253: PPUSH
27254: CALL_OW 297
27258: ST_TO_ADDR
// if not result then
27259: LD_VAR 0 6
27263: NOT
27264: IFFALSE 27290
// result := [ [ i , tmp ] ] else
27266: LD_ADDR_VAR 0 6
27270: PUSH
27271: LD_VAR 0 7
27275: PUSH
27276: LD_VAR 0 9
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: EMPTY
27286: LIST
27287: ST_TO_ADDR
27288: GO 27432
// begin if result [ result ] [ 2 ] < tmp then
27290: LD_VAR 0 6
27294: PUSH
27295: LD_VAR 0 6
27299: ARRAY
27300: PUSH
27301: LD_INT 2
27303: ARRAY
27304: PUSH
27305: LD_VAR 0 9
27309: LESS
27310: IFFALSE 27352
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27312: LD_ADDR_VAR 0 6
27316: PUSH
27317: LD_VAR 0 6
27321: PPUSH
27322: LD_VAR 0 6
27326: PUSH
27327: LD_INT 1
27329: PLUS
27330: PPUSH
27331: LD_VAR 0 7
27335: PUSH
27336: LD_VAR 0 9
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PPUSH
27345: CALL_OW 2
27349: ST_TO_ADDR
27350: GO 27432
// for j = 1 to result do
27352: LD_ADDR_VAR 0 8
27356: PUSH
27357: DOUBLE
27358: LD_INT 1
27360: DEC
27361: ST_TO_ADDR
27362: LD_VAR 0 6
27366: PUSH
27367: FOR_TO
27368: IFFALSE 27430
// begin if tmp < result [ j ] [ 2 ] then
27370: LD_VAR 0 9
27374: PUSH
27375: LD_VAR 0 6
27379: PUSH
27380: LD_VAR 0 8
27384: ARRAY
27385: PUSH
27386: LD_INT 2
27388: ARRAY
27389: LESS
27390: IFFALSE 27428
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27392: LD_ADDR_VAR 0 6
27396: PUSH
27397: LD_VAR 0 6
27401: PPUSH
27402: LD_VAR 0 8
27406: PPUSH
27407: LD_VAR 0 7
27411: PUSH
27412: LD_VAR 0 9
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PPUSH
27421: CALL_OW 2
27425: ST_TO_ADDR
// break ;
27426: GO 27430
// end ; end ;
27428: GO 27367
27430: POP
27431: POP
// end ; end ;
27432: GO 27231
27434: POP
27435: POP
// if result and not asc then
27436: LD_VAR 0 6
27440: PUSH
27441: LD_VAR 0 4
27445: NOT
27446: AND
27447: IFFALSE 27522
// begin tmp := result ;
27449: LD_ADDR_VAR 0 9
27453: PUSH
27454: LD_VAR 0 6
27458: ST_TO_ADDR
// for i = tmp downto 1 do
27459: LD_ADDR_VAR 0 7
27463: PUSH
27464: DOUBLE
27465: LD_VAR 0 9
27469: INC
27470: ST_TO_ADDR
27471: LD_INT 1
27473: PUSH
27474: FOR_DOWNTO
27475: IFFALSE 27520
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27477: LD_ADDR_VAR 0 6
27481: PUSH
27482: LD_VAR 0 6
27486: PPUSH
27487: LD_VAR 0 9
27491: PUSH
27492: LD_VAR 0 7
27496: MINUS
27497: PUSH
27498: LD_INT 1
27500: PLUS
27501: PPUSH
27502: LD_VAR 0 9
27506: PUSH
27507: LD_VAR 0 7
27511: ARRAY
27512: PPUSH
27513: CALL_OW 1
27517: ST_TO_ADDR
27518: GO 27474
27520: POP
27521: POP
// end ; tmp := [ ] ;
27522: LD_ADDR_VAR 0 9
27526: PUSH
27527: EMPTY
27528: ST_TO_ADDR
// if mode then
27529: LD_VAR 0 5
27533: IFFALSE 27602
// begin for i = 1 to result do
27535: LD_ADDR_VAR 0 7
27539: PUSH
27540: DOUBLE
27541: LD_INT 1
27543: DEC
27544: ST_TO_ADDR
27545: LD_VAR 0 6
27549: PUSH
27550: FOR_TO
27551: IFFALSE 27590
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27553: LD_ADDR_VAR 0 9
27557: PUSH
27558: LD_VAR 0 9
27562: PPUSH
27563: LD_VAR 0 7
27567: PPUSH
27568: LD_VAR 0 6
27572: PUSH
27573: LD_VAR 0 7
27577: ARRAY
27578: PUSH
27579: LD_INT 1
27581: ARRAY
27582: PPUSH
27583: CALL_OW 1
27587: ST_TO_ADDR
27588: GO 27550
27590: POP
27591: POP
// result := tmp ;
27592: LD_ADDR_VAR 0 6
27596: PUSH
27597: LD_VAR 0 9
27601: ST_TO_ADDR
// end ; end ;
27602: LD_VAR 0 6
27606: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27607: LD_INT 0
27609: PPUSH
27610: PPUSH
27611: PPUSH
27612: PPUSH
27613: PPUSH
27614: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27615: LD_ADDR_VAR 0 5
27619: PUSH
27620: LD_INT 0
27622: PUSH
27623: LD_INT 0
27625: PUSH
27626: LD_INT 0
27628: PUSH
27629: EMPTY
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: ST_TO_ADDR
// if not x or not y then
27637: LD_VAR 0 2
27641: NOT
27642: PUSH
27643: LD_VAR 0 3
27647: NOT
27648: OR
27649: IFFALSE 27653
// exit ;
27651: GO 29305
// if not range then
27653: LD_VAR 0 4
27657: NOT
27658: IFFALSE 27668
// range := 10 ;
27660: LD_ADDR_VAR 0 4
27664: PUSH
27665: LD_INT 10
27667: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27668: LD_ADDR_VAR 0 8
27672: PUSH
27673: LD_INT 81
27675: PUSH
27676: LD_VAR 0 1
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 92
27687: PUSH
27688: LD_VAR 0 2
27692: PUSH
27693: LD_VAR 0 3
27697: PUSH
27698: LD_VAR 0 4
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 3
27711: PUSH
27712: LD_INT 21
27714: PUSH
27715: LD_INT 3
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: LIST
27730: PPUSH
27731: CALL_OW 69
27735: ST_TO_ADDR
// if not tmp then
27736: LD_VAR 0 8
27740: NOT
27741: IFFALSE 27745
// exit ;
27743: GO 29305
// for i in tmp do
27745: LD_ADDR_VAR 0 6
27749: PUSH
27750: LD_VAR 0 8
27754: PUSH
27755: FOR_IN
27756: IFFALSE 29280
// begin points := [ 0 , 0 , 0 ] ;
27758: LD_ADDR_VAR 0 9
27762: PUSH
27763: LD_INT 0
27765: PUSH
27766: LD_INT 0
27768: PUSH
27769: LD_INT 0
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: LIST
27776: ST_TO_ADDR
// bpoints := 1 ;
27777: LD_ADDR_VAR 0 10
27781: PUSH
27782: LD_INT 1
27784: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27785: LD_VAR 0 6
27789: PPUSH
27790: CALL_OW 247
27794: PUSH
27795: LD_INT 1
27797: DOUBLE
27798: EQUAL
27799: IFTRUE 27803
27801: GO 28381
27803: POP
// begin if GetClass ( i ) = 1 then
27804: LD_VAR 0 6
27808: PPUSH
27809: CALL_OW 257
27813: PUSH
27814: LD_INT 1
27816: EQUAL
27817: IFFALSE 27838
// points := [ 10 , 5 , 3 ] ;
27819: LD_ADDR_VAR 0 9
27823: PUSH
27824: LD_INT 10
27826: PUSH
27827: LD_INT 5
27829: PUSH
27830: LD_INT 3
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: LIST
27837: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27838: LD_VAR 0 6
27842: PPUSH
27843: CALL_OW 257
27847: PUSH
27848: LD_INT 2
27850: PUSH
27851: LD_INT 3
27853: PUSH
27854: LD_INT 4
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: LIST
27861: IN
27862: IFFALSE 27883
// points := [ 3 , 2 , 1 ] ;
27864: LD_ADDR_VAR 0 9
27868: PUSH
27869: LD_INT 3
27871: PUSH
27872: LD_INT 2
27874: PUSH
27875: LD_INT 1
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: LIST
27882: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27883: LD_VAR 0 6
27887: PPUSH
27888: CALL_OW 257
27892: PUSH
27893: LD_INT 5
27895: EQUAL
27896: IFFALSE 27917
// points := [ 130 , 5 , 2 ] ;
27898: LD_ADDR_VAR 0 9
27902: PUSH
27903: LD_INT 130
27905: PUSH
27906: LD_INT 5
27908: PUSH
27909: LD_INT 2
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: LIST
27916: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27917: LD_VAR 0 6
27921: PPUSH
27922: CALL_OW 257
27926: PUSH
27927: LD_INT 8
27929: EQUAL
27930: IFFALSE 27951
// points := [ 35 , 35 , 30 ] ;
27932: LD_ADDR_VAR 0 9
27936: PUSH
27937: LD_INT 35
27939: PUSH
27940: LD_INT 35
27942: PUSH
27943: LD_INT 30
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: LIST
27950: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27951: LD_VAR 0 6
27955: PPUSH
27956: CALL_OW 257
27960: PUSH
27961: LD_INT 9
27963: EQUAL
27964: IFFALSE 27985
// points := [ 20 , 55 , 40 ] ;
27966: LD_ADDR_VAR 0 9
27970: PUSH
27971: LD_INT 20
27973: PUSH
27974: LD_INT 55
27976: PUSH
27977: LD_INT 40
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: LIST
27984: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27985: LD_VAR 0 6
27989: PPUSH
27990: CALL_OW 257
27994: PUSH
27995: LD_INT 12
27997: PUSH
27998: LD_INT 16
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: IN
28005: IFFALSE 28026
// points := [ 5 , 3 , 2 ] ;
28007: LD_ADDR_VAR 0 9
28011: PUSH
28012: LD_INT 5
28014: PUSH
28015: LD_INT 3
28017: PUSH
28018: LD_INT 2
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: LIST
28025: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28026: LD_VAR 0 6
28030: PPUSH
28031: CALL_OW 257
28035: PUSH
28036: LD_INT 17
28038: EQUAL
28039: IFFALSE 28060
// points := [ 100 , 50 , 75 ] ;
28041: LD_ADDR_VAR 0 9
28045: PUSH
28046: LD_INT 100
28048: PUSH
28049: LD_INT 50
28051: PUSH
28052: LD_INT 75
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: LIST
28059: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28060: LD_VAR 0 6
28064: PPUSH
28065: CALL_OW 257
28069: PUSH
28070: LD_INT 15
28072: EQUAL
28073: IFFALSE 28094
// points := [ 10 , 5 , 3 ] ;
28075: LD_ADDR_VAR 0 9
28079: PUSH
28080: LD_INT 10
28082: PUSH
28083: LD_INT 5
28085: PUSH
28086: LD_INT 3
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: LIST
28093: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28094: LD_VAR 0 6
28098: PPUSH
28099: CALL_OW 257
28103: PUSH
28104: LD_INT 14
28106: EQUAL
28107: IFFALSE 28128
// points := [ 10 , 0 , 0 ] ;
28109: LD_ADDR_VAR 0 9
28113: PUSH
28114: LD_INT 10
28116: PUSH
28117: LD_INT 0
28119: PUSH
28120: LD_INT 0
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: LIST
28127: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28128: LD_VAR 0 6
28132: PPUSH
28133: CALL_OW 257
28137: PUSH
28138: LD_INT 11
28140: EQUAL
28141: IFFALSE 28162
// points := [ 30 , 10 , 5 ] ;
28143: LD_ADDR_VAR 0 9
28147: PUSH
28148: LD_INT 30
28150: PUSH
28151: LD_INT 10
28153: PUSH
28154: LD_INT 5
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: LIST
28161: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28162: LD_VAR 0 1
28166: PPUSH
28167: LD_INT 5
28169: PPUSH
28170: CALL_OW 321
28174: PUSH
28175: LD_INT 2
28177: EQUAL
28178: IFFALSE 28195
// bpoints := bpoints * 1.8 ;
28180: LD_ADDR_VAR 0 10
28184: PUSH
28185: LD_VAR 0 10
28189: PUSH
28190: LD_REAL  1.80000000000000E+0000
28193: MUL
28194: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28195: LD_VAR 0 6
28199: PPUSH
28200: CALL_OW 257
28204: PUSH
28205: LD_INT 1
28207: PUSH
28208: LD_INT 2
28210: PUSH
28211: LD_INT 3
28213: PUSH
28214: LD_INT 4
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: IN
28223: PUSH
28224: LD_VAR 0 1
28228: PPUSH
28229: LD_INT 51
28231: PPUSH
28232: CALL_OW 321
28236: PUSH
28237: LD_INT 2
28239: EQUAL
28240: AND
28241: IFFALSE 28258
// bpoints := bpoints * 1.2 ;
28243: LD_ADDR_VAR 0 10
28247: PUSH
28248: LD_VAR 0 10
28252: PUSH
28253: LD_REAL  1.20000000000000E+0000
28256: MUL
28257: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28258: LD_VAR 0 6
28262: PPUSH
28263: CALL_OW 257
28267: PUSH
28268: LD_INT 5
28270: PUSH
28271: LD_INT 7
28273: PUSH
28274: LD_INT 9
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: LIST
28281: IN
28282: PUSH
28283: LD_VAR 0 1
28287: PPUSH
28288: LD_INT 52
28290: PPUSH
28291: CALL_OW 321
28295: PUSH
28296: LD_INT 2
28298: EQUAL
28299: AND
28300: IFFALSE 28317
// bpoints := bpoints * 1.5 ;
28302: LD_ADDR_VAR 0 10
28306: PUSH
28307: LD_VAR 0 10
28311: PUSH
28312: LD_REAL  1.50000000000000E+0000
28315: MUL
28316: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28317: LD_VAR 0 1
28321: PPUSH
28322: LD_INT 66
28324: PPUSH
28325: CALL_OW 321
28329: PUSH
28330: LD_INT 2
28332: EQUAL
28333: IFFALSE 28350
// bpoints := bpoints * 1.1 ;
28335: LD_ADDR_VAR 0 10
28339: PUSH
28340: LD_VAR 0 10
28344: PUSH
28345: LD_REAL  1.10000000000000E+0000
28348: MUL
28349: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28350: LD_ADDR_VAR 0 10
28354: PUSH
28355: LD_VAR 0 10
28359: PUSH
28360: LD_VAR 0 6
28364: PPUSH
28365: LD_INT 1
28367: PPUSH
28368: CALL_OW 259
28372: PUSH
28373: LD_REAL  1.15000000000000E+0000
28376: MUL
28377: MUL
28378: ST_TO_ADDR
// end ; unit_vehicle :
28379: GO 29209
28381: LD_INT 2
28383: DOUBLE
28384: EQUAL
28385: IFTRUE 28389
28387: GO 29197
28389: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28390: LD_VAR 0 6
28394: PPUSH
28395: CALL_OW 264
28399: PUSH
28400: LD_INT 2
28402: PUSH
28403: LD_INT 42
28405: PUSH
28406: LD_INT 24
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: LIST
28413: IN
28414: IFFALSE 28435
// points := [ 25 , 5 , 3 ] ;
28416: LD_ADDR_VAR 0 9
28420: PUSH
28421: LD_INT 25
28423: PUSH
28424: LD_INT 5
28426: PUSH
28427: LD_INT 3
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: LIST
28434: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28435: LD_VAR 0 6
28439: PPUSH
28440: CALL_OW 264
28444: PUSH
28445: LD_INT 4
28447: PUSH
28448: LD_INT 43
28450: PUSH
28451: LD_INT 25
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: LIST
28458: IN
28459: IFFALSE 28480
// points := [ 40 , 15 , 5 ] ;
28461: LD_ADDR_VAR 0 9
28465: PUSH
28466: LD_INT 40
28468: PUSH
28469: LD_INT 15
28471: PUSH
28472: LD_INT 5
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: LIST
28479: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28480: LD_VAR 0 6
28484: PPUSH
28485: CALL_OW 264
28489: PUSH
28490: LD_INT 3
28492: PUSH
28493: LD_INT 23
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: IN
28500: IFFALSE 28521
// points := [ 7 , 25 , 8 ] ;
28502: LD_ADDR_VAR 0 9
28506: PUSH
28507: LD_INT 7
28509: PUSH
28510: LD_INT 25
28512: PUSH
28513: LD_INT 8
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: LIST
28520: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28521: LD_VAR 0 6
28525: PPUSH
28526: CALL_OW 264
28530: PUSH
28531: LD_INT 5
28533: PUSH
28534: LD_INT 27
28536: PUSH
28537: LD_INT 44
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: LIST
28544: IN
28545: IFFALSE 28566
// points := [ 14 , 50 , 16 ] ;
28547: LD_ADDR_VAR 0 9
28551: PUSH
28552: LD_INT 14
28554: PUSH
28555: LD_INT 50
28557: PUSH
28558: LD_INT 16
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: LIST
28565: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28566: LD_VAR 0 6
28570: PPUSH
28571: CALL_OW 264
28575: PUSH
28576: LD_INT 6
28578: PUSH
28579: LD_INT 46
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: IN
28586: IFFALSE 28607
// points := [ 32 , 120 , 70 ] ;
28588: LD_ADDR_VAR 0 9
28592: PUSH
28593: LD_INT 32
28595: PUSH
28596: LD_INT 120
28598: PUSH
28599: LD_INT 70
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: LIST
28606: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28607: LD_VAR 0 6
28611: PPUSH
28612: CALL_OW 264
28616: PUSH
28617: LD_INT 7
28619: PUSH
28620: LD_INT 28
28622: PUSH
28623: LD_INT 45
28625: PUSH
28626: LD_EXP 77
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: IN
28637: IFFALSE 28658
// points := [ 35 , 20 , 45 ] ;
28639: LD_ADDR_VAR 0 9
28643: PUSH
28644: LD_INT 35
28646: PUSH
28647: LD_INT 20
28649: PUSH
28650: LD_INT 45
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: LIST
28657: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28658: LD_VAR 0 6
28662: PPUSH
28663: CALL_OW 264
28667: PUSH
28668: LD_INT 47
28670: PUSH
28671: EMPTY
28672: LIST
28673: IN
28674: IFFALSE 28695
// points := [ 67 , 45 , 75 ] ;
28676: LD_ADDR_VAR 0 9
28680: PUSH
28681: LD_INT 67
28683: PUSH
28684: LD_INT 45
28686: PUSH
28687: LD_INT 75
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: LIST
28694: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28695: LD_VAR 0 6
28699: PPUSH
28700: CALL_OW 264
28704: PUSH
28705: LD_INT 26
28707: PUSH
28708: EMPTY
28709: LIST
28710: IN
28711: IFFALSE 28732
// points := [ 120 , 30 , 80 ] ;
28713: LD_ADDR_VAR 0 9
28717: PUSH
28718: LD_INT 120
28720: PUSH
28721: LD_INT 30
28723: PUSH
28724: LD_INT 80
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: LIST
28731: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28732: LD_VAR 0 6
28736: PPUSH
28737: CALL_OW 264
28741: PUSH
28742: LD_INT 22
28744: PUSH
28745: EMPTY
28746: LIST
28747: IN
28748: IFFALSE 28769
// points := [ 40 , 1 , 1 ] ;
28750: LD_ADDR_VAR 0 9
28754: PUSH
28755: LD_INT 40
28757: PUSH
28758: LD_INT 1
28760: PUSH
28761: LD_INT 1
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: LIST
28768: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28769: LD_VAR 0 6
28773: PPUSH
28774: CALL_OW 264
28778: PUSH
28779: LD_INT 29
28781: PUSH
28782: EMPTY
28783: LIST
28784: IN
28785: IFFALSE 28806
// points := [ 70 , 200 , 400 ] ;
28787: LD_ADDR_VAR 0 9
28791: PUSH
28792: LD_INT 70
28794: PUSH
28795: LD_INT 200
28797: PUSH
28798: LD_INT 400
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: LIST
28805: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28806: LD_VAR 0 6
28810: PPUSH
28811: CALL_OW 264
28815: PUSH
28816: LD_INT 14
28818: PUSH
28819: LD_INT 53
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: IN
28826: IFFALSE 28847
// points := [ 40 , 10 , 20 ] ;
28828: LD_ADDR_VAR 0 9
28832: PUSH
28833: LD_INT 40
28835: PUSH
28836: LD_INT 10
28838: PUSH
28839: LD_INT 20
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: LIST
28846: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28847: LD_VAR 0 6
28851: PPUSH
28852: CALL_OW 264
28856: PUSH
28857: LD_INT 9
28859: PUSH
28860: EMPTY
28861: LIST
28862: IN
28863: IFFALSE 28884
// points := [ 5 , 70 , 20 ] ;
28865: LD_ADDR_VAR 0 9
28869: PUSH
28870: LD_INT 5
28872: PUSH
28873: LD_INT 70
28875: PUSH
28876: LD_INT 20
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: LIST
28883: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28884: LD_VAR 0 6
28888: PPUSH
28889: CALL_OW 264
28893: PUSH
28894: LD_INT 10
28896: PUSH
28897: EMPTY
28898: LIST
28899: IN
28900: IFFALSE 28921
// points := [ 35 , 110 , 70 ] ;
28902: LD_ADDR_VAR 0 9
28906: PUSH
28907: LD_INT 35
28909: PUSH
28910: LD_INT 110
28912: PUSH
28913: LD_INT 70
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: LIST
28920: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28921: LD_VAR 0 6
28925: PPUSH
28926: CALL_OW 265
28930: PUSH
28931: LD_INT 25
28933: EQUAL
28934: IFFALSE 28955
// points := [ 80 , 65 , 100 ] ;
28936: LD_ADDR_VAR 0 9
28940: PUSH
28941: LD_INT 80
28943: PUSH
28944: LD_INT 65
28946: PUSH
28947: LD_INT 100
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: LIST
28954: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28955: LD_VAR 0 6
28959: PPUSH
28960: CALL_OW 263
28964: PUSH
28965: LD_INT 1
28967: EQUAL
28968: IFFALSE 29003
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28970: LD_ADDR_VAR 0 10
28974: PUSH
28975: LD_VAR 0 10
28979: PUSH
28980: LD_VAR 0 6
28984: PPUSH
28985: CALL_OW 311
28989: PPUSH
28990: LD_INT 3
28992: PPUSH
28993: CALL_OW 259
28997: PUSH
28998: LD_INT 4
29000: MUL
29001: MUL
29002: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29003: LD_VAR 0 6
29007: PPUSH
29008: CALL_OW 263
29012: PUSH
29013: LD_INT 2
29015: EQUAL
29016: IFFALSE 29067
// begin j := IsControledBy ( i ) ;
29018: LD_ADDR_VAR 0 7
29022: PUSH
29023: LD_VAR 0 6
29027: PPUSH
29028: CALL_OW 312
29032: ST_TO_ADDR
// if j then
29033: LD_VAR 0 7
29037: IFFALSE 29067
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29039: LD_ADDR_VAR 0 10
29043: PUSH
29044: LD_VAR 0 10
29048: PUSH
29049: LD_VAR 0 7
29053: PPUSH
29054: LD_INT 3
29056: PPUSH
29057: CALL_OW 259
29061: PUSH
29062: LD_INT 3
29064: MUL
29065: MUL
29066: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29067: LD_VAR 0 6
29071: PPUSH
29072: CALL_OW 264
29076: PUSH
29077: LD_INT 5
29079: PUSH
29080: LD_INT 6
29082: PUSH
29083: LD_INT 46
29085: PUSH
29086: LD_INT 44
29088: PUSH
29089: LD_INT 47
29091: PUSH
29092: LD_INT 45
29094: PUSH
29095: LD_INT 28
29097: PUSH
29098: LD_INT 7
29100: PUSH
29101: LD_INT 27
29103: PUSH
29104: LD_INT 29
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: IN
29119: PUSH
29120: LD_VAR 0 1
29124: PPUSH
29125: LD_INT 52
29127: PPUSH
29128: CALL_OW 321
29132: PUSH
29133: LD_INT 2
29135: EQUAL
29136: AND
29137: IFFALSE 29154
// bpoints := bpoints * 1.2 ;
29139: LD_ADDR_VAR 0 10
29143: PUSH
29144: LD_VAR 0 10
29148: PUSH
29149: LD_REAL  1.20000000000000E+0000
29152: MUL
29153: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29154: LD_VAR 0 6
29158: PPUSH
29159: CALL_OW 264
29163: PUSH
29164: LD_INT 6
29166: PUSH
29167: LD_INT 46
29169: PUSH
29170: LD_INT 47
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: LIST
29177: IN
29178: IFFALSE 29195
// bpoints := bpoints * 1.2 ;
29180: LD_ADDR_VAR 0 10
29184: PUSH
29185: LD_VAR 0 10
29189: PUSH
29190: LD_REAL  1.20000000000000E+0000
29193: MUL
29194: ST_TO_ADDR
// end ; unit_building :
29195: GO 29209
29197: LD_INT 3
29199: DOUBLE
29200: EQUAL
29201: IFTRUE 29205
29203: GO 29208
29205: POP
// ; end ;
29206: GO 29209
29208: POP
// for j = 1 to 3 do
29209: LD_ADDR_VAR 0 7
29213: PUSH
29214: DOUBLE
29215: LD_INT 1
29217: DEC
29218: ST_TO_ADDR
29219: LD_INT 3
29221: PUSH
29222: FOR_TO
29223: IFFALSE 29276
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29225: LD_ADDR_VAR 0 5
29229: PUSH
29230: LD_VAR 0 5
29234: PPUSH
29235: LD_VAR 0 7
29239: PPUSH
29240: LD_VAR 0 5
29244: PUSH
29245: LD_VAR 0 7
29249: ARRAY
29250: PUSH
29251: LD_VAR 0 9
29255: PUSH
29256: LD_VAR 0 7
29260: ARRAY
29261: PUSH
29262: LD_VAR 0 10
29266: MUL
29267: PLUS
29268: PPUSH
29269: CALL_OW 1
29273: ST_TO_ADDR
29274: GO 29222
29276: POP
29277: POP
// end ;
29278: GO 27755
29280: POP
29281: POP
// result := Replace ( result , 4 , tmp ) ;
29282: LD_ADDR_VAR 0 5
29286: PUSH
29287: LD_VAR 0 5
29291: PPUSH
29292: LD_INT 4
29294: PPUSH
29295: LD_VAR 0 8
29299: PPUSH
29300: CALL_OW 1
29304: ST_TO_ADDR
// end ;
29305: LD_VAR 0 5
29309: RET
// export function DangerAtRange ( unit , range ) ; begin
29310: LD_INT 0
29312: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29313: LD_ADDR_VAR 0 3
29317: PUSH
29318: LD_VAR 0 1
29322: PPUSH
29323: CALL_OW 255
29327: PPUSH
29328: LD_VAR 0 1
29332: PPUSH
29333: CALL_OW 250
29337: PPUSH
29338: LD_VAR 0 1
29342: PPUSH
29343: CALL_OW 251
29347: PPUSH
29348: LD_VAR 0 2
29352: PPUSH
29353: CALL 27607 0 4
29357: ST_TO_ADDR
// end ;
29358: LD_VAR 0 3
29362: RET
// export function DangerInArea ( side , area ) ; begin
29363: LD_INT 0
29365: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29366: LD_ADDR_VAR 0 3
29370: PUSH
29371: LD_VAR 0 2
29375: PPUSH
29376: LD_INT 81
29378: PUSH
29379: LD_VAR 0 1
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PPUSH
29388: CALL_OW 70
29392: ST_TO_ADDR
// end ;
29393: LD_VAR 0 3
29397: RET
// export function IsExtension ( b ) ; begin
29398: LD_INT 0
29400: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29401: LD_ADDR_VAR 0 2
29405: PUSH
29406: LD_VAR 0 1
29410: PUSH
29411: LD_INT 23
29413: PUSH
29414: LD_INT 20
29416: PUSH
29417: LD_INT 22
29419: PUSH
29420: LD_INT 17
29422: PUSH
29423: LD_INT 24
29425: PUSH
29426: LD_INT 21
29428: PUSH
29429: LD_INT 19
29431: PUSH
29432: LD_INT 16
29434: PUSH
29435: LD_INT 25
29437: PUSH
29438: LD_INT 18
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: IN
29453: ST_TO_ADDR
// end ;
29454: LD_VAR 0 2
29458: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29459: LD_INT 0
29461: PPUSH
29462: PPUSH
29463: PPUSH
// result := [ ] ;
29464: LD_ADDR_VAR 0 4
29468: PUSH
29469: EMPTY
29470: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29471: LD_ADDR_VAR 0 5
29475: PUSH
29476: LD_VAR 0 2
29480: PPUSH
29481: LD_INT 21
29483: PUSH
29484: LD_INT 3
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PPUSH
29491: CALL_OW 70
29495: ST_TO_ADDR
// if not tmp then
29496: LD_VAR 0 5
29500: NOT
29501: IFFALSE 29505
// exit ;
29503: GO 29569
// if checkLink then
29505: LD_VAR 0 3
29509: IFFALSE 29559
// begin for i in tmp do
29511: LD_ADDR_VAR 0 6
29515: PUSH
29516: LD_VAR 0 5
29520: PUSH
29521: FOR_IN
29522: IFFALSE 29557
// if GetBase ( i ) <> base then
29524: LD_VAR 0 6
29528: PPUSH
29529: CALL_OW 274
29533: PUSH
29534: LD_VAR 0 1
29538: NONEQUAL
29539: IFFALSE 29555
// ComLinkToBase ( base , i ) ;
29541: LD_VAR 0 1
29545: PPUSH
29546: LD_VAR 0 6
29550: PPUSH
29551: CALL_OW 169
29555: GO 29521
29557: POP
29558: POP
// end ; result := tmp ;
29559: LD_ADDR_VAR 0 4
29563: PUSH
29564: LD_VAR 0 5
29568: ST_TO_ADDR
// end ;
29569: LD_VAR 0 4
29573: RET
// export function ComComplete ( units , b ) ; var i ; begin
29574: LD_INT 0
29576: PPUSH
29577: PPUSH
// if not units then
29578: LD_VAR 0 1
29582: NOT
29583: IFFALSE 29587
// exit ;
29585: GO 29677
// for i in units do
29587: LD_ADDR_VAR 0 4
29591: PUSH
29592: LD_VAR 0 1
29596: PUSH
29597: FOR_IN
29598: IFFALSE 29675
// if BuildingStatus ( b ) = bs_build then
29600: LD_VAR 0 2
29604: PPUSH
29605: CALL_OW 461
29609: PUSH
29610: LD_INT 1
29612: EQUAL
29613: IFFALSE 29673
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29615: LD_VAR 0 4
29619: PPUSH
29620: LD_STRING h
29622: PUSH
29623: LD_VAR 0 2
29627: PPUSH
29628: CALL_OW 250
29632: PUSH
29633: LD_VAR 0 2
29637: PPUSH
29638: CALL_OW 251
29642: PUSH
29643: LD_VAR 0 2
29647: PUSH
29648: LD_INT 0
29650: PUSH
29651: LD_INT 0
29653: PUSH
29654: LD_INT 0
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: PUSH
29666: EMPTY
29667: LIST
29668: PPUSH
29669: CALL_OW 446
29673: GO 29597
29675: POP
29676: POP
// end ;
29677: LD_VAR 0 3
29681: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29682: LD_INT 0
29684: PPUSH
29685: PPUSH
29686: PPUSH
29687: PPUSH
29688: PPUSH
29689: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29690: LD_VAR 0 1
29694: NOT
29695: PUSH
29696: LD_VAR 0 1
29700: PPUSH
29701: CALL_OW 263
29705: PUSH
29706: LD_INT 2
29708: NONEQUAL
29709: OR
29710: IFFALSE 29714
// exit ;
29712: GO 30030
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29714: LD_ADDR_VAR 0 6
29718: PUSH
29719: LD_INT 22
29721: PUSH
29722: LD_VAR 0 1
29726: PPUSH
29727: CALL_OW 255
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 2
29738: PUSH
29739: LD_INT 30
29741: PUSH
29742: LD_INT 36
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 34
29751: PUSH
29752: LD_INT 31
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: LIST
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PPUSH
29768: CALL_OW 69
29772: ST_TO_ADDR
// if not tmp then
29773: LD_VAR 0 6
29777: NOT
29778: IFFALSE 29782
// exit ;
29780: GO 30030
// result := [ ] ;
29782: LD_ADDR_VAR 0 2
29786: PUSH
29787: EMPTY
29788: ST_TO_ADDR
// for i in tmp do
29789: LD_ADDR_VAR 0 3
29793: PUSH
29794: LD_VAR 0 6
29798: PUSH
29799: FOR_IN
29800: IFFALSE 29871
// begin t := UnitsInside ( i ) ;
29802: LD_ADDR_VAR 0 4
29806: PUSH
29807: LD_VAR 0 3
29811: PPUSH
29812: CALL_OW 313
29816: ST_TO_ADDR
// if t then
29817: LD_VAR 0 4
29821: IFFALSE 29869
// for j in t do
29823: LD_ADDR_VAR 0 7
29827: PUSH
29828: LD_VAR 0 4
29832: PUSH
29833: FOR_IN
29834: IFFALSE 29867
// result := Replace ( result , result + 1 , j ) ;
29836: LD_ADDR_VAR 0 2
29840: PUSH
29841: LD_VAR 0 2
29845: PPUSH
29846: LD_VAR 0 2
29850: PUSH
29851: LD_INT 1
29853: PLUS
29854: PPUSH
29855: LD_VAR 0 7
29859: PPUSH
29860: CALL_OW 1
29864: ST_TO_ADDR
29865: GO 29833
29867: POP
29868: POP
// end ;
29869: GO 29799
29871: POP
29872: POP
// if not result then
29873: LD_VAR 0 2
29877: NOT
29878: IFFALSE 29882
// exit ;
29880: GO 30030
// mech := result [ 1 ] ;
29882: LD_ADDR_VAR 0 5
29886: PUSH
29887: LD_VAR 0 2
29891: PUSH
29892: LD_INT 1
29894: ARRAY
29895: ST_TO_ADDR
// if result > 1 then
29896: LD_VAR 0 2
29900: PUSH
29901: LD_INT 1
29903: GREATER
29904: IFFALSE 30016
// begin for i = 2 to result do
29906: LD_ADDR_VAR 0 3
29910: PUSH
29911: DOUBLE
29912: LD_INT 2
29914: DEC
29915: ST_TO_ADDR
29916: LD_VAR 0 2
29920: PUSH
29921: FOR_TO
29922: IFFALSE 30014
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29924: LD_ADDR_VAR 0 4
29928: PUSH
29929: LD_VAR 0 2
29933: PUSH
29934: LD_VAR 0 3
29938: ARRAY
29939: PPUSH
29940: LD_INT 3
29942: PPUSH
29943: CALL_OW 259
29947: PUSH
29948: LD_VAR 0 2
29952: PUSH
29953: LD_VAR 0 3
29957: ARRAY
29958: PPUSH
29959: CALL_OW 432
29963: MINUS
29964: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29965: LD_VAR 0 4
29969: PUSH
29970: LD_VAR 0 5
29974: PPUSH
29975: LD_INT 3
29977: PPUSH
29978: CALL_OW 259
29982: PUSH
29983: LD_VAR 0 5
29987: PPUSH
29988: CALL_OW 432
29992: MINUS
29993: GREATEREQUAL
29994: IFFALSE 30012
// mech := result [ i ] ;
29996: LD_ADDR_VAR 0 5
30000: PUSH
30001: LD_VAR 0 2
30005: PUSH
30006: LD_VAR 0 3
30010: ARRAY
30011: ST_TO_ADDR
// end ;
30012: GO 29921
30014: POP
30015: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30016: LD_VAR 0 1
30020: PPUSH
30021: LD_VAR 0 5
30025: PPUSH
30026: CALL_OW 135
// end ;
30030: LD_VAR 0 2
30034: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30035: LD_INT 0
30037: PPUSH
30038: PPUSH
30039: PPUSH
30040: PPUSH
30041: PPUSH
30042: PPUSH
30043: PPUSH
30044: PPUSH
30045: PPUSH
30046: PPUSH
30047: PPUSH
30048: PPUSH
30049: PPUSH
// result := [ ] ;
30050: LD_ADDR_VAR 0 7
30054: PUSH
30055: EMPTY
30056: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30057: LD_VAR 0 1
30061: PPUSH
30062: CALL_OW 266
30066: PUSH
30067: LD_INT 0
30069: PUSH
30070: LD_INT 1
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: IN
30077: NOT
30078: IFFALSE 30082
// exit ;
30080: GO 31716
// if name then
30082: LD_VAR 0 3
30086: IFFALSE 30102
// SetBName ( base_dep , name ) ;
30088: LD_VAR 0 1
30092: PPUSH
30093: LD_VAR 0 3
30097: PPUSH
30098: CALL_OW 500
// base := GetBase ( base_dep ) ;
30102: LD_ADDR_VAR 0 15
30106: PUSH
30107: LD_VAR 0 1
30111: PPUSH
30112: CALL_OW 274
30116: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30117: LD_ADDR_VAR 0 16
30121: PUSH
30122: LD_VAR 0 1
30126: PPUSH
30127: CALL_OW 255
30131: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30132: LD_ADDR_VAR 0 17
30136: PUSH
30137: LD_VAR 0 1
30141: PPUSH
30142: CALL_OW 248
30146: ST_TO_ADDR
// if sources then
30147: LD_VAR 0 5
30151: IFFALSE 30198
// for i = 1 to 3 do
30153: LD_ADDR_VAR 0 8
30157: PUSH
30158: DOUBLE
30159: LD_INT 1
30161: DEC
30162: ST_TO_ADDR
30163: LD_INT 3
30165: PUSH
30166: FOR_TO
30167: IFFALSE 30196
// AddResourceType ( base , i , sources [ i ] ) ;
30169: LD_VAR 0 15
30173: PPUSH
30174: LD_VAR 0 8
30178: PPUSH
30179: LD_VAR 0 5
30183: PUSH
30184: LD_VAR 0 8
30188: ARRAY
30189: PPUSH
30190: CALL_OW 276
30194: GO 30166
30196: POP
30197: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30198: LD_ADDR_VAR 0 18
30202: PUSH
30203: LD_VAR 0 15
30207: PPUSH
30208: LD_VAR 0 2
30212: PPUSH
30213: LD_INT 1
30215: PPUSH
30216: CALL 29459 0 3
30220: ST_TO_ADDR
// InitHc ;
30221: CALL_OW 19
// InitUc ;
30225: CALL_OW 18
// uc_side := side ;
30229: LD_ADDR_OWVAR 20
30233: PUSH
30234: LD_VAR 0 16
30238: ST_TO_ADDR
// uc_nation := nation ;
30239: LD_ADDR_OWVAR 21
30243: PUSH
30244: LD_VAR 0 17
30248: ST_TO_ADDR
// if buildings then
30249: LD_VAR 0 18
30253: IFFALSE 31575
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30255: LD_ADDR_VAR 0 19
30259: PUSH
30260: LD_VAR 0 18
30264: PPUSH
30265: LD_INT 2
30267: PUSH
30268: LD_INT 30
30270: PUSH
30271: LD_INT 29
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 30
30280: PUSH
30281: LD_INT 30
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: LIST
30292: PPUSH
30293: CALL_OW 72
30297: ST_TO_ADDR
// if tmp then
30298: LD_VAR 0 19
30302: IFFALSE 30350
// for i in tmp do
30304: LD_ADDR_VAR 0 8
30308: PUSH
30309: LD_VAR 0 19
30313: PUSH
30314: FOR_IN
30315: IFFALSE 30348
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30317: LD_VAR 0 8
30321: PPUSH
30322: CALL_OW 250
30326: PPUSH
30327: LD_VAR 0 8
30331: PPUSH
30332: CALL_OW 251
30336: PPUSH
30337: LD_VAR 0 16
30341: PPUSH
30342: CALL_OW 441
30346: GO 30314
30348: POP
30349: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30350: LD_VAR 0 18
30354: PPUSH
30355: LD_INT 2
30357: PUSH
30358: LD_INT 30
30360: PUSH
30361: LD_INT 32
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 30
30370: PUSH
30371: LD_INT 33
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: LIST
30382: PPUSH
30383: CALL_OW 72
30387: IFFALSE 30475
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30389: LD_ADDR_VAR 0 8
30393: PUSH
30394: LD_VAR 0 18
30398: PPUSH
30399: LD_INT 2
30401: PUSH
30402: LD_INT 30
30404: PUSH
30405: LD_INT 32
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 30
30414: PUSH
30415: LD_INT 33
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: LIST
30426: PPUSH
30427: CALL_OW 72
30431: PUSH
30432: FOR_IN
30433: IFFALSE 30473
// begin if not GetBWeapon ( i ) then
30435: LD_VAR 0 8
30439: PPUSH
30440: CALL_OW 269
30444: NOT
30445: IFFALSE 30471
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30447: LD_VAR 0 8
30451: PPUSH
30452: LD_VAR 0 8
30456: PPUSH
30457: LD_VAR 0 2
30461: PPUSH
30462: CALL 31721 0 2
30466: PPUSH
30467: CALL_OW 431
// end ;
30471: GO 30432
30473: POP
30474: POP
// end ; for i = 1 to personel do
30475: LD_ADDR_VAR 0 8
30479: PUSH
30480: DOUBLE
30481: LD_INT 1
30483: DEC
30484: ST_TO_ADDR
30485: LD_VAR 0 6
30489: PUSH
30490: FOR_TO
30491: IFFALSE 31555
// begin if i > 4 then
30493: LD_VAR 0 8
30497: PUSH
30498: LD_INT 4
30500: GREATER
30501: IFFALSE 30505
// break ;
30503: GO 31555
// case i of 1 :
30505: LD_VAR 0 8
30509: PUSH
30510: LD_INT 1
30512: DOUBLE
30513: EQUAL
30514: IFTRUE 30518
30516: GO 30598
30518: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30519: LD_ADDR_VAR 0 12
30523: PUSH
30524: LD_VAR 0 18
30528: PPUSH
30529: LD_INT 22
30531: PUSH
30532: LD_VAR 0 16
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 58
30543: PUSH
30544: EMPTY
30545: LIST
30546: PUSH
30547: LD_INT 2
30549: PUSH
30550: LD_INT 30
30552: PUSH
30553: LD_INT 32
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 30
30562: PUSH
30563: LD_INT 4
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 30
30572: PUSH
30573: LD_INT 5
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: LIST
30590: PPUSH
30591: CALL_OW 72
30595: ST_TO_ADDR
30596: GO 30820
30598: LD_INT 2
30600: DOUBLE
30601: EQUAL
30602: IFTRUE 30606
30604: GO 30668
30606: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30607: LD_ADDR_VAR 0 12
30611: PUSH
30612: LD_VAR 0 18
30616: PPUSH
30617: LD_INT 22
30619: PUSH
30620: LD_VAR 0 16
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 2
30631: PUSH
30632: LD_INT 30
30634: PUSH
30635: LD_INT 0
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 30
30644: PUSH
30645: LD_INT 1
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: LIST
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PPUSH
30661: CALL_OW 72
30665: ST_TO_ADDR
30666: GO 30820
30668: LD_INT 3
30670: DOUBLE
30671: EQUAL
30672: IFTRUE 30676
30674: GO 30738
30676: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30677: LD_ADDR_VAR 0 12
30681: PUSH
30682: LD_VAR 0 18
30686: PPUSH
30687: LD_INT 22
30689: PUSH
30690: LD_VAR 0 16
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 2
30701: PUSH
30702: LD_INT 30
30704: PUSH
30705: LD_INT 2
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: LD_INT 30
30714: PUSH
30715: LD_INT 3
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: LIST
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PPUSH
30731: CALL_OW 72
30735: ST_TO_ADDR
30736: GO 30820
30738: LD_INT 4
30740: DOUBLE
30741: EQUAL
30742: IFTRUE 30746
30744: GO 30819
30746: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30747: LD_ADDR_VAR 0 12
30751: PUSH
30752: LD_VAR 0 18
30756: PPUSH
30757: LD_INT 22
30759: PUSH
30760: LD_VAR 0 16
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 2
30771: PUSH
30772: LD_INT 30
30774: PUSH
30775: LD_INT 6
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 30
30784: PUSH
30785: LD_INT 7
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: LD_INT 30
30794: PUSH
30795: LD_INT 8
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PPUSH
30812: CALL_OW 72
30816: ST_TO_ADDR
30817: GO 30820
30819: POP
// if i = 1 then
30820: LD_VAR 0 8
30824: PUSH
30825: LD_INT 1
30827: EQUAL
30828: IFFALSE 30939
// begin tmp := [ ] ;
30830: LD_ADDR_VAR 0 19
30834: PUSH
30835: EMPTY
30836: ST_TO_ADDR
// for j in f do
30837: LD_ADDR_VAR 0 9
30841: PUSH
30842: LD_VAR 0 12
30846: PUSH
30847: FOR_IN
30848: IFFALSE 30921
// if GetBType ( j ) = b_bunker then
30850: LD_VAR 0 9
30854: PPUSH
30855: CALL_OW 266
30859: PUSH
30860: LD_INT 32
30862: EQUAL
30863: IFFALSE 30890
// tmp := Insert ( tmp , 1 , j ) else
30865: LD_ADDR_VAR 0 19
30869: PUSH
30870: LD_VAR 0 19
30874: PPUSH
30875: LD_INT 1
30877: PPUSH
30878: LD_VAR 0 9
30882: PPUSH
30883: CALL_OW 2
30887: ST_TO_ADDR
30888: GO 30919
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30890: LD_ADDR_VAR 0 19
30894: PUSH
30895: LD_VAR 0 19
30899: PPUSH
30900: LD_VAR 0 19
30904: PUSH
30905: LD_INT 1
30907: PLUS
30908: PPUSH
30909: LD_VAR 0 9
30913: PPUSH
30914: CALL_OW 2
30918: ST_TO_ADDR
30919: GO 30847
30921: POP
30922: POP
// if tmp then
30923: LD_VAR 0 19
30927: IFFALSE 30939
// f := tmp ;
30929: LD_ADDR_VAR 0 12
30933: PUSH
30934: LD_VAR 0 19
30938: ST_TO_ADDR
// end ; x := personel [ i ] ;
30939: LD_ADDR_VAR 0 13
30943: PUSH
30944: LD_VAR 0 6
30948: PUSH
30949: LD_VAR 0 8
30953: ARRAY
30954: ST_TO_ADDR
// if x = - 1 then
30955: LD_VAR 0 13
30959: PUSH
30960: LD_INT 1
30962: NEG
30963: EQUAL
30964: IFFALSE 31173
// begin for j in f do
30966: LD_ADDR_VAR 0 9
30970: PUSH
30971: LD_VAR 0 12
30975: PUSH
30976: FOR_IN
30977: IFFALSE 31169
// repeat InitHc ;
30979: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30983: LD_VAR 0 9
30987: PPUSH
30988: CALL_OW 266
30992: PUSH
30993: LD_INT 5
30995: EQUAL
30996: IFFALSE 31066
// begin if UnitsInside ( j ) < 3 then
30998: LD_VAR 0 9
31002: PPUSH
31003: CALL_OW 313
31007: PUSH
31008: LD_INT 3
31010: LESS
31011: IFFALSE 31047
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31013: LD_INT 0
31015: PPUSH
31016: LD_INT 5
31018: PUSH
31019: LD_INT 8
31021: PUSH
31022: LD_INT 9
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: LIST
31029: PUSH
31030: LD_VAR 0 17
31034: ARRAY
31035: PPUSH
31036: LD_VAR 0 4
31040: PPUSH
31041: CALL_OW 380
31045: GO 31064
// PrepareHuman ( false , i , skill ) ;
31047: LD_INT 0
31049: PPUSH
31050: LD_VAR 0 8
31054: PPUSH
31055: LD_VAR 0 4
31059: PPUSH
31060: CALL_OW 380
// end else
31064: GO 31083
// PrepareHuman ( false , i , skill ) ;
31066: LD_INT 0
31068: PPUSH
31069: LD_VAR 0 8
31073: PPUSH
31074: LD_VAR 0 4
31078: PPUSH
31079: CALL_OW 380
// un := CreateHuman ;
31083: LD_ADDR_VAR 0 14
31087: PUSH
31088: CALL_OW 44
31092: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31093: LD_ADDR_VAR 0 7
31097: PUSH
31098: LD_VAR 0 7
31102: PPUSH
31103: LD_INT 1
31105: PPUSH
31106: LD_VAR 0 14
31110: PPUSH
31111: CALL_OW 2
31115: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31116: LD_VAR 0 14
31120: PPUSH
31121: LD_VAR 0 9
31125: PPUSH
31126: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31130: LD_VAR 0 9
31134: PPUSH
31135: CALL_OW 313
31139: PUSH
31140: LD_INT 6
31142: EQUAL
31143: PUSH
31144: LD_VAR 0 9
31148: PPUSH
31149: CALL_OW 266
31153: PUSH
31154: LD_INT 32
31156: PUSH
31157: LD_INT 31
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: IN
31164: OR
31165: IFFALSE 30979
31167: GO 30976
31169: POP
31170: POP
// end else
31171: GO 31553
// for j = 1 to x do
31173: LD_ADDR_VAR 0 9
31177: PUSH
31178: DOUBLE
31179: LD_INT 1
31181: DEC
31182: ST_TO_ADDR
31183: LD_VAR 0 13
31187: PUSH
31188: FOR_TO
31189: IFFALSE 31551
// begin InitHc ;
31191: CALL_OW 19
// if not f then
31195: LD_VAR 0 12
31199: NOT
31200: IFFALSE 31289
// begin PrepareHuman ( false , i , skill ) ;
31202: LD_INT 0
31204: PPUSH
31205: LD_VAR 0 8
31209: PPUSH
31210: LD_VAR 0 4
31214: PPUSH
31215: CALL_OW 380
// un := CreateHuman ;
31219: LD_ADDR_VAR 0 14
31223: PUSH
31224: CALL_OW 44
31228: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31229: LD_ADDR_VAR 0 7
31233: PUSH
31234: LD_VAR 0 7
31238: PPUSH
31239: LD_INT 1
31241: PPUSH
31242: LD_VAR 0 14
31246: PPUSH
31247: CALL_OW 2
31251: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31252: LD_VAR 0 14
31256: PPUSH
31257: LD_VAR 0 1
31261: PPUSH
31262: CALL_OW 250
31266: PPUSH
31267: LD_VAR 0 1
31271: PPUSH
31272: CALL_OW 251
31276: PPUSH
31277: LD_INT 10
31279: PPUSH
31280: LD_INT 0
31282: PPUSH
31283: CALL_OW 50
// continue ;
31287: GO 31188
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31289: LD_VAR 0 12
31293: PUSH
31294: LD_INT 1
31296: ARRAY
31297: PPUSH
31298: CALL_OW 313
31302: PUSH
31303: LD_VAR 0 12
31307: PUSH
31308: LD_INT 1
31310: ARRAY
31311: PPUSH
31312: CALL_OW 266
31316: PUSH
31317: LD_INT 32
31319: PUSH
31320: LD_INT 31
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: IN
31327: AND
31328: PUSH
31329: LD_VAR 0 12
31333: PUSH
31334: LD_INT 1
31336: ARRAY
31337: PPUSH
31338: CALL_OW 313
31342: PUSH
31343: LD_INT 6
31345: EQUAL
31346: OR
31347: IFFALSE 31367
// f := Delete ( f , 1 ) ;
31349: LD_ADDR_VAR 0 12
31353: PUSH
31354: LD_VAR 0 12
31358: PPUSH
31359: LD_INT 1
31361: PPUSH
31362: CALL_OW 3
31366: ST_TO_ADDR
// if not f then
31367: LD_VAR 0 12
31371: NOT
31372: IFFALSE 31390
// begin x := x + 2 ;
31374: LD_ADDR_VAR 0 13
31378: PUSH
31379: LD_VAR 0 13
31383: PUSH
31384: LD_INT 2
31386: PLUS
31387: ST_TO_ADDR
// continue ;
31388: GO 31188
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31390: LD_VAR 0 12
31394: PUSH
31395: LD_INT 1
31397: ARRAY
31398: PPUSH
31399: CALL_OW 266
31403: PUSH
31404: LD_INT 5
31406: EQUAL
31407: IFFALSE 31481
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31409: LD_VAR 0 12
31413: PUSH
31414: LD_INT 1
31416: ARRAY
31417: PPUSH
31418: CALL_OW 313
31422: PUSH
31423: LD_INT 3
31425: LESS
31426: IFFALSE 31462
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31428: LD_INT 0
31430: PPUSH
31431: LD_INT 5
31433: PUSH
31434: LD_INT 8
31436: PUSH
31437: LD_INT 9
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: LIST
31444: PUSH
31445: LD_VAR 0 17
31449: ARRAY
31450: PPUSH
31451: LD_VAR 0 4
31455: PPUSH
31456: CALL_OW 380
31460: GO 31479
// PrepareHuman ( false , i , skill ) ;
31462: LD_INT 0
31464: PPUSH
31465: LD_VAR 0 8
31469: PPUSH
31470: LD_VAR 0 4
31474: PPUSH
31475: CALL_OW 380
// end else
31479: GO 31498
// PrepareHuman ( false , i , skill ) ;
31481: LD_INT 0
31483: PPUSH
31484: LD_VAR 0 8
31488: PPUSH
31489: LD_VAR 0 4
31493: PPUSH
31494: CALL_OW 380
// un := CreateHuman ;
31498: LD_ADDR_VAR 0 14
31502: PUSH
31503: CALL_OW 44
31507: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31508: LD_ADDR_VAR 0 7
31512: PUSH
31513: LD_VAR 0 7
31517: PPUSH
31518: LD_INT 1
31520: PPUSH
31521: LD_VAR 0 14
31525: PPUSH
31526: CALL_OW 2
31530: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31531: LD_VAR 0 14
31535: PPUSH
31536: LD_VAR 0 12
31540: PUSH
31541: LD_INT 1
31543: ARRAY
31544: PPUSH
31545: CALL_OW 52
// end ;
31549: GO 31188
31551: POP
31552: POP
// end ;
31553: GO 30490
31555: POP
31556: POP
// result := result ^ buildings ;
31557: LD_ADDR_VAR 0 7
31561: PUSH
31562: LD_VAR 0 7
31566: PUSH
31567: LD_VAR 0 18
31571: ADD
31572: ST_TO_ADDR
// end else
31573: GO 31716
// begin for i = 1 to personel do
31575: LD_ADDR_VAR 0 8
31579: PUSH
31580: DOUBLE
31581: LD_INT 1
31583: DEC
31584: ST_TO_ADDR
31585: LD_VAR 0 6
31589: PUSH
31590: FOR_TO
31591: IFFALSE 31714
// begin if i > 4 then
31593: LD_VAR 0 8
31597: PUSH
31598: LD_INT 4
31600: GREATER
31601: IFFALSE 31605
// break ;
31603: GO 31714
// x := personel [ i ] ;
31605: LD_ADDR_VAR 0 13
31609: PUSH
31610: LD_VAR 0 6
31614: PUSH
31615: LD_VAR 0 8
31619: ARRAY
31620: ST_TO_ADDR
// if x = - 1 then
31621: LD_VAR 0 13
31625: PUSH
31626: LD_INT 1
31628: NEG
31629: EQUAL
31630: IFFALSE 31634
// continue ;
31632: GO 31590
// PrepareHuman ( false , i , skill ) ;
31634: LD_INT 0
31636: PPUSH
31637: LD_VAR 0 8
31641: PPUSH
31642: LD_VAR 0 4
31646: PPUSH
31647: CALL_OW 380
// un := CreateHuman ;
31651: LD_ADDR_VAR 0 14
31655: PUSH
31656: CALL_OW 44
31660: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31661: LD_VAR 0 14
31665: PPUSH
31666: LD_VAR 0 1
31670: PPUSH
31671: CALL_OW 250
31675: PPUSH
31676: LD_VAR 0 1
31680: PPUSH
31681: CALL_OW 251
31685: PPUSH
31686: LD_INT 10
31688: PPUSH
31689: LD_INT 0
31691: PPUSH
31692: CALL_OW 50
// result := result ^ un ;
31696: LD_ADDR_VAR 0 7
31700: PUSH
31701: LD_VAR 0 7
31705: PUSH
31706: LD_VAR 0 14
31710: ADD
31711: ST_TO_ADDR
// end ;
31712: GO 31590
31714: POP
31715: POP
// end ; end ;
31716: LD_VAR 0 7
31720: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31721: LD_INT 0
31723: PPUSH
31724: PPUSH
31725: PPUSH
31726: PPUSH
31727: PPUSH
31728: PPUSH
31729: PPUSH
31730: PPUSH
31731: PPUSH
31732: PPUSH
31733: PPUSH
31734: PPUSH
31735: PPUSH
31736: PPUSH
31737: PPUSH
31738: PPUSH
// result := false ;
31739: LD_ADDR_VAR 0 3
31743: PUSH
31744: LD_INT 0
31746: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31747: LD_VAR 0 1
31751: NOT
31752: PUSH
31753: LD_VAR 0 1
31757: PPUSH
31758: CALL_OW 266
31762: PUSH
31763: LD_INT 32
31765: PUSH
31766: LD_INT 33
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: IN
31773: NOT
31774: OR
31775: IFFALSE 31779
// exit ;
31777: GO 32888
// nat := GetNation ( tower ) ;
31779: LD_ADDR_VAR 0 12
31783: PUSH
31784: LD_VAR 0 1
31788: PPUSH
31789: CALL_OW 248
31793: ST_TO_ADDR
// side := GetSide ( tower ) ;
31794: LD_ADDR_VAR 0 16
31798: PUSH
31799: LD_VAR 0 1
31803: PPUSH
31804: CALL_OW 255
31808: ST_TO_ADDR
// x := GetX ( tower ) ;
31809: LD_ADDR_VAR 0 10
31813: PUSH
31814: LD_VAR 0 1
31818: PPUSH
31819: CALL_OW 250
31823: ST_TO_ADDR
// y := GetY ( tower ) ;
31824: LD_ADDR_VAR 0 11
31828: PUSH
31829: LD_VAR 0 1
31833: PPUSH
31834: CALL_OW 251
31838: ST_TO_ADDR
// if not x or not y then
31839: LD_VAR 0 10
31843: NOT
31844: PUSH
31845: LD_VAR 0 11
31849: NOT
31850: OR
31851: IFFALSE 31855
// exit ;
31853: GO 32888
// weapon := 0 ;
31855: LD_ADDR_VAR 0 18
31859: PUSH
31860: LD_INT 0
31862: ST_TO_ADDR
// fac_list := [ ] ;
31863: LD_ADDR_VAR 0 17
31867: PUSH
31868: EMPTY
31869: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31870: LD_ADDR_VAR 0 6
31874: PUSH
31875: LD_VAR 0 1
31879: PPUSH
31880: CALL_OW 274
31884: PPUSH
31885: LD_VAR 0 2
31889: PPUSH
31890: LD_INT 0
31892: PPUSH
31893: CALL 29459 0 3
31897: PPUSH
31898: LD_INT 30
31900: PUSH
31901: LD_INT 3
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PPUSH
31908: CALL_OW 72
31912: ST_TO_ADDR
// if not factories then
31913: LD_VAR 0 6
31917: NOT
31918: IFFALSE 31922
// exit ;
31920: GO 32888
// for i in factories do
31922: LD_ADDR_VAR 0 8
31926: PUSH
31927: LD_VAR 0 6
31931: PUSH
31932: FOR_IN
31933: IFFALSE 31958
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31935: LD_ADDR_VAR 0 17
31939: PUSH
31940: LD_VAR 0 17
31944: PUSH
31945: LD_VAR 0 8
31949: PPUSH
31950: CALL_OW 478
31954: UNION
31955: ST_TO_ADDR
31956: GO 31932
31958: POP
31959: POP
// if not fac_list then
31960: LD_VAR 0 17
31964: NOT
31965: IFFALSE 31969
// exit ;
31967: GO 32888
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31969: LD_ADDR_VAR 0 5
31973: PUSH
31974: LD_INT 4
31976: PUSH
31977: LD_INT 5
31979: PUSH
31980: LD_INT 9
31982: PUSH
31983: LD_INT 10
31985: PUSH
31986: LD_INT 6
31988: PUSH
31989: LD_INT 7
31991: PUSH
31992: LD_INT 11
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 27
32006: PUSH
32007: LD_INT 28
32009: PUSH
32010: LD_INT 26
32012: PUSH
32013: LD_INT 30
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 43
32024: PUSH
32025: LD_INT 44
32027: PUSH
32028: LD_INT 46
32030: PUSH
32031: LD_INT 45
32033: PUSH
32034: LD_INT 47
32036: PUSH
32037: LD_INT 49
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: LIST
32052: PUSH
32053: LD_VAR 0 12
32057: ARRAY
32058: ST_TO_ADDR
// list := list isect fac_list ;
32059: LD_ADDR_VAR 0 5
32063: PUSH
32064: LD_VAR 0 5
32068: PUSH
32069: LD_VAR 0 17
32073: ISECT
32074: ST_TO_ADDR
// if not list then
32075: LD_VAR 0 5
32079: NOT
32080: IFFALSE 32084
// exit ;
32082: GO 32888
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32084: LD_VAR 0 12
32088: PUSH
32089: LD_INT 3
32091: EQUAL
32092: PUSH
32093: LD_INT 49
32095: PUSH
32096: LD_VAR 0 5
32100: IN
32101: AND
32102: PUSH
32103: LD_INT 31
32105: PPUSH
32106: LD_VAR 0 16
32110: PPUSH
32111: CALL_OW 321
32115: PUSH
32116: LD_INT 2
32118: EQUAL
32119: AND
32120: IFFALSE 32180
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32122: LD_INT 22
32124: PUSH
32125: LD_VAR 0 16
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 35
32136: PUSH
32137: LD_INT 49
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 91
32146: PUSH
32147: LD_VAR 0 1
32151: PUSH
32152: LD_INT 10
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: LIST
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: LIST
32164: PPUSH
32165: CALL_OW 69
32169: NOT
32170: IFFALSE 32180
// weapon := ru_time_lapser ;
32172: LD_ADDR_VAR 0 18
32176: PUSH
32177: LD_INT 49
32179: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32180: LD_VAR 0 12
32184: PUSH
32185: LD_INT 1
32187: PUSH
32188: LD_INT 2
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: IN
32195: PUSH
32196: LD_INT 11
32198: PUSH
32199: LD_VAR 0 5
32203: IN
32204: PUSH
32205: LD_INT 30
32207: PUSH
32208: LD_VAR 0 5
32212: IN
32213: OR
32214: AND
32215: PUSH
32216: LD_INT 6
32218: PPUSH
32219: LD_VAR 0 16
32223: PPUSH
32224: CALL_OW 321
32228: PUSH
32229: LD_INT 2
32231: EQUAL
32232: AND
32233: IFFALSE 32398
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32235: LD_INT 22
32237: PUSH
32238: LD_VAR 0 16
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 2
32249: PUSH
32250: LD_INT 35
32252: PUSH
32253: LD_INT 11
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 35
32262: PUSH
32263: LD_INT 30
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 91
32277: PUSH
32278: LD_VAR 0 1
32282: PUSH
32283: LD_INT 18
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: LIST
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: LIST
32295: PPUSH
32296: CALL_OW 69
32300: NOT
32301: PUSH
32302: LD_INT 22
32304: PUSH
32305: LD_VAR 0 16
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 2
32316: PUSH
32317: LD_INT 30
32319: PUSH
32320: LD_INT 32
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 30
32329: PUSH
32330: LD_INT 33
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 91
32344: PUSH
32345: LD_VAR 0 1
32349: PUSH
32350: LD_INT 12
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: LIST
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: LIST
32362: PUSH
32363: EMPTY
32364: LIST
32365: PPUSH
32366: CALL_OW 69
32370: PUSH
32371: LD_INT 2
32373: GREATER
32374: AND
32375: IFFALSE 32398
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32377: LD_ADDR_VAR 0 18
32381: PUSH
32382: LD_INT 11
32384: PUSH
32385: LD_INT 30
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_VAR 0 12
32396: ARRAY
32397: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32398: LD_VAR 0 18
32402: NOT
32403: PUSH
32404: LD_INT 40
32406: PPUSH
32407: LD_VAR 0 16
32411: PPUSH
32412: CALL_OW 321
32416: PUSH
32417: LD_INT 2
32419: EQUAL
32420: AND
32421: PUSH
32422: LD_INT 7
32424: PUSH
32425: LD_VAR 0 5
32429: IN
32430: PUSH
32431: LD_INT 28
32433: PUSH
32434: LD_VAR 0 5
32438: IN
32439: OR
32440: PUSH
32441: LD_INT 45
32443: PUSH
32444: LD_VAR 0 5
32448: IN
32449: OR
32450: AND
32451: IFFALSE 32705
// begin hex := GetHexInfo ( x , y ) ;
32453: LD_ADDR_VAR 0 4
32457: PUSH
32458: LD_VAR 0 10
32462: PPUSH
32463: LD_VAR 0 11
32467: PPUSH
32468: CALL_OW 546
32472: ST_TO_ADDR
// if hex [ 1 ] then
32473: LD_VAR 0 4
32477: PUSH
32478: LD_INT 1
32480: ARRAY
32481: IFFALSE 32485
// exit ;
32483: GO 32888
// height := hex [ 2 ] ;
32485: LD_ADDR_VAR 0 15
32489: PUSH
32490: LD_VAR 0 4
32494: PUSH
32495: LD_INT 2
32497: ARRAY
32498: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32499: LD_ADDR_VAR 0 14
32503: PUSH
32504: LD_INT 0
32506: PUSH
32507: LD_INT 2
32509: PUSH
32510: LD_INT 3
32512: PUSH
32513: LD_INT 5
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: ST_TO_ADDR
// for i in tmp do
32522: LD_ADDR_VAR 0 8
32526: PUSH
32527: LD_VAR 0 14
32531: PUSH
32532: FOR_IN
32533: IFFALSE 32703
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32535: LD_ADDR_VAR 0 9
32539: PUSH
32540: LD_VAR 0 10
32544: PPUSH
32545: LD_VAR 0 8
32549: PPUSH
32550: LD_INT 5
32552: PPUSH
32553: CALL_OW 272
32557: PUSH
32558: LD_VAR 0 11
32562: PPUSH
32563: LD_VAR 0 8
32567: PPUSH
32568: LD_INT 5
32570: PPUSH
32571: CALL_OW 273
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32580: LD_VAR 0 9
32584: PUSH
32585: LD_INT 1
32587: ARRAY
32588: PPUSH
32589: LD_VAR 0 9
32593: PUSH
32594: LD_INT 2
32596: ARRAY
32597: PPUSH
32598: CALL_OW 488
32602: IFFALSE 32701
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32604: LD_ADDR_VAR 0 4
32608: PUSH
32609: LD_VAR 0 9
32613: PUSH
32614: LD_INT 1
32616: ARRAY
32617: PPUSH
32618: LD_VAR 0 9
32622: PUSH
32623: LD_INT 2
32625: ARRAY
32626: PPUSH
32627: CALL_OW 546
32631: ST_TO_ADDR
// if hex [ 1 ] then
32632: LD_VAR 0 4
32636: PUSH
32637: LD_INT 1
32639: ARRAY
32640: IFFALSE 32644
// continue ;
32642: GO 32532
// h := hex [ 2 ] ;
32644: LD_ADDR_VAR 0 13
32648: PUSH
32649: LD_VAR 0 4
32653: PUSH
32654: LD_INT 2
32656: ARRAY
32657: ST_TO_ADDR
// if h + 7 < height then
32658: LD_VAR 0 13
32662: PUSH
32663: LD_INT 7
32665: PLUS
32666: PUSH
32667: LD_VAR 0 15
32671: LESS
32672: IFFALSE 32701
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32674: LD_ADDR_VAR 0 18
32678: PUSH
32679: LD_INT 7
32681: PUSH
32682: LD_INT 28
32684: PUSH
32685: LD_INT 45
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: LIST
32692: PUSH
32693: LD_VAR 0 12
32697: ARRAY
32698: ST_TO_ADDR
// break ;
32699: GO 32703
// end ; end ; end ;
32701: GO 32532
32703: POP
32704: POP
// end ; if not weapon then
32705: LD_VAR 0 18
32709: NOT
32710: IFFALSE 32770
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32712: LD_ADDR_VAR 0 5
32716: PUSH
32717: LD_VAR 0 5
32721: PUSH
32722: LD_INT 11
32724: PUSH
32725: LD_INT 30
32727: PUSH
32728: LD_INT 49
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: LIST
32735: DIFF
32736: ST_TO_ADDR
// if not list then
32737: LD_VAR 0 5
32741: NOT
32742: IFFALSE 32746
// exit ;
32744: GO 32888
// weapon := list [ rand ( 1 , list ) ] ;
32746: LD_ADDR_VAR 0 18
32750: PUSH
32751: LD_VAR 0 5
32755: PUSH
32756: LD_INT 1
32758: PPUSH
32759: LD_VAR 0 5
32763: PPUSH
32764: CALL_OW 12
32768: ARRAY
32769: ST_TO_ADDR
// end ; if weapon then
32770: LD_VAR 0 18
32774: IFFALSE 32888
// begin tmp := CostOfWeapon ( weapon ) ;
32776: LD_ADDR_VAR 0 14
32780: PUSH
32781: LD_VAR 0 18
32785: PPUSH
32786: CALL_OW 451
32790: ST_TO_ADDR
// j := GetBase ( tower ) ;
32791: LD_ADDR_VAR 0 9
32795: PUSH
32796: LD_VAR 0 1
32800: PPUSH
32801: CALL_OW 274
32805: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32806: LD_VAR 0 9
32810: PPUSH
32811: LD_INT 1
32813: PPUSH
32814: CALL_OW 275
32818: PUSH
32819: LD_VAR 0 14
32823: PUSH
32824: LD_INT 1
32826: ARRAY
32827: GREATEREQUAL
32828: PUSH
32829: LD_VAR 0 9
32833: PPUSH
32834: LD_INT 2
32836: PPUSH
32837: CALL_OW 275
32841: PUSH
32842: LD_VAR 0 14
32846: PUSH
32847: LD_INT 2
32849: ARRAY
32850: GREATEREQUAL
32851: AND
32852: PUSH
32853: LD_VAR 0 9
32857: PPUSH
32858: LD_INT 3
32860: PPUSH
32861: CALL_OW 275
32865: PUSH
32866: LD_VAR 0 14
32870: PUSH
32871: LD_INT 3
32873: ARRAY
32874: GREATEREQUAL
32875: AND
32876: IFFALSE 32888
// result := weapon ;
32878: LD_ADDR_VAR 0 3
32882: PUSH
32883: LD_VAR 0 18
32887: ST_TO_ADDR
// end ; end ;
32888: LD_VAR 0 3
32892: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32893: LD_INT 0
32895: PPUSH
32896: PPUSH
// result := true ;
32897: LD_ADDR_VAR 0 3
32901: PUSH
32902: LD_INT 1
32904: ST_TO_ADDR
// if array1 = array2 then
32905: LD_VAR 0 1
32909: PUSH
32910: LD_VAR 0 2
32914: EQUAL
32915: IFFALSE 32975
// begin for i = 1 to array1 do
32917: LD_ADDR_VAR 0 4
32921: PUSH
32922: DOUBLE
32923: LD_INT 1
32925: DEC
32926: ST_TO_ADDR
32927: LD_VAR 0 1
32931: PUSH
32932: FOR_TO
32933: IFFALSE 32971
// if array1 [ i ] <> array2 [ i ] then
32935: LD_VAR 0 1
32939: PUSH
32940: LD_VAR 0 4
32944: ARRAY
32945: PUSH
32946: LD_VAR 0 2
32950: PUSH
32951: LD_VAR 0 4
32955: ARRAY
32956: NONEQUAL
32957: IFFALSE 32969
// begin result := false ;
32959: LD_ADDR_VAR 0 3
32963: PUSH
32964: LD_INT 0
32966: ST_TO_ADDR
// break ;
32967: GO 32971
// end ;
32969: GO 32932
32971: POP
32972: POP
// end else
32973: GO 32983
// result := false ;
32975: LD_ADDR_VAR 0 3
32979: PUSH
32980: LD_INT 0
32982: ST_TO_ADDR
// end ;
32983: LD_VAR 0 3
32987: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32988: LD_INT 0
32990: PPUSH
32991: PPUSH
// if not array1 or not array2 then
32992: LD_VAR 0 1
32996: NOT
32997: PUSH
32998: LD_VAR 0 2
33002: NOT
33003: OR
33004: IFFALSE 33008
// exit ;
33006: GO 33072
// result := true ;
33008: LD_ADDR_VAR 0 3
33012: PUSH
33013: LD_INT 1
33015: ST_TO_ADDR
// for i = 1 to array1 do
33016: LD_ADDR_VAR 0 4
33020: PUSH
33021: DOUBLE
33022: LD_INT 1
33024: DEC
33025: ST_TO_ADDR
33026: LD_VAR 0 1
33030: PUSH
33031: FOR_TO
33032: IFFALSE 33070
// if array1 [ i ] <> array2 [ i ] then
33034: LD_VAR 0 1
33038: PUSH
33039: LD_VAR 0 4
33043: ARRAY
33044: PUSH
33045: LD_VAR 0 2
33049: PUSH
33050: LD_VAR 0 4
33054: ARRAY
33055: NONEQUAL
33056: IFFALSE 33068
// begin result := false ;
33058: LD_ADDR_VAR 0 3
33062: PUSH
33063: LD_INT 0
33065: ST_TO_ADDR
// break ;
33066: GO 33070
// end ;
33068: GO 33031
33070: POP
33071: POP
// end ;
33072: LD_VAR 0 3
33076: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33077: LD_INT 0
33079: PPUSH
33080: PPUSH
33081: PPUSH
// pom := GetBase ( fac ) ;
33082: LD_ADDR_VAR 0 5
33086: PUSH
33087: LD_VAR 0 1
33091: PPUSH
33092: CALL_OW 274
33096: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33097: LD_ADDR_VAR 0 4
33101: PUSH
33102: LD_VAR 0 2
33106: PUSH
33107: LD_INT 1
33109: ARRAY
33110: PPUSH
33111: LD_VAR 0 2
33115: PUSH
33116: LD_INT 2
33118: ARRAY
33119: PPUSH
33120: LD_VAR 0 2
33124: PUSH
33125: LD_INT 3
33127: ARRAY
33128: PPUSH
33129: LD_VAR 0 2
33133: PUSH
33134: LD_INT 4
33136: ARRAY
33137: PPUSH
33138: CALL_OW 449
33142: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33143: LD_ADDR_VAR 0 3
33147: PUSH
33148: LD_VAR 0 5
33152: PPUSH
33153: LD_INT 1
33155: PPUSH
33156: CALL_OW 275
33160: PUSH
33161: LD_VAR 0 4
33165: PUSH
33166: LD_INT 1
33168: ARRAY
33169: GREATEREQUAL
33170: PUSH
33171: LD_VAR 0 5
33175: PPUSH
33176: LD_INT 2
33178: PPUSH
33179: CALL_OW 275
33183: PUSH
33184: LD_VAR 0 4
33188: PUSH
33189: LD_INT 2
33191: ARRAY
33192: GREATEREQUAL
33193: AND
33194: PUSH
33195: LD_VAR 0 5
33199: PPUSH
33200: LD_INT 3
33202: PPUSH
33203: CALL_OW 275
33207: PUSH
33208: LD_VAR 0 4
33212: PUSH
33213: LD_INT 3
33215: ARRAY
33216: GREATEREQUAL
33217: AND
33218: ST_TO_ADDR
// end ;
33219: LD_VAR 0 3
33223: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33224: LD_INT 0
33226: PPUSH
33227: PPUSH
33228: PPUSH
33229: PPUSH
// pom := GetBase ( building ) ;
33230: LD_ADDR_VAR 0 3
33234: PUSH
33235: LD_VAR 0 1
33239: PPUSH
33240: CALL_OW 274
33244: ST_TO_ADDR
// if not pom then
33245: LD_VAR 0 3
33249: NOT
33250: IFFALSE 33254
// exit ;
33252: GO 33424
// btype := GetBType ( building ) ;
33254: LD_ADDR_VAR 0 5
33258: PUSH
33259: LD_VAR 0 1
33263: PPUSH
33264: CALL_OW 266
33268: ST_TO_ADDR
// if btype = b_armoury then
33269: LD_VAR 0 5
33273: PUSH
33274: LD_INT 4
33276: EQUAL
33277: IFFALSE 33287
// btype := b_barracks ;
33279: LD_ADDR_VAR 0 5
33283: PUSH
33284: LD_INT 5
33286: ST_TO_ADDR
// if btype = b_depot then
33287: LD_VAR 0 5
33291: PUSH
33292: LD_INT 0
33294: EQUAL
33295: IFFALSE 33305
// btype := b_warehouse ;
33297: LD_ADDR_VAR 0 5
33301: PUSH
33302: LD_INT 1
33304: ST_TO_ADDR
// if btype = b_workshop then
33305: LD_VAR 0 5
33309: PUSH
33310: LD_INT 2
33312: EQUAL
33313: IFFALSE 33323
// btype := b_factory ;
33315: LD_ADDR_VAR 0 5
33319: PUSH
33320: LD_INT 3
33322: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33323: LD_ADDR_VAR 0 4
33327: PUSH
33328: LD_VAR 0 5
33332: PPUSH
33333: LD_VAR 0 1
33337: PPUSH
33338: CALL_OW 248
33342: PPUSH
33343: CALL_OW 450
33347: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33348: LD_ADDR_VAR 0 2
33352: PUSH
33353: LD_VAR 0 3
33357: PPUSH
33358: LD_INT 1
33360: PPUSH
33361: CALL_OW 275
33365: PUSH
33366: LD_VAR 0 4
33370: PUSH
33371: LD_INT 1
33373: ARRAY
33374: GREATEREQUAL
33375: PUSH
33376: LD_VAR 0 3
33380: PPUSH
33381: LD_INT 2
33383: PPUSH
33384: CALL_OW 275
33388: PUSH
33389: LD_VAR 0 4
33393: PUSH
33394: LD_INT 2
33396: ARRAY
33397: GREATEREQUAL
33398: AND
33399: PUSH
33400: LD_VAR 0 3
33404: PPUSH
33405: LD_INT 3
33407: PPUSH
33408: CALL_OW 275
33412: PUSH
33413: LD_VAR 0 4
33417: PUSH
33418: LD_INT 3
33420: ARRAY
33421: GREATEREQUAL
33422: AND
33423: ST_TO_ADDR
// end ;
33424: LD_VAR 0 2
33428: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33429: LD_INT 0
33431: PPUSH
33432: PPUSH
33433: PPUSH
// pom := GetBase ( building ) ;
33434: LD_ADDR_VAR 0 4
33438: PUSH
33439: LD_VAR 0 1
33443: PPUSH
33444: CALL_OW 274
33448: ST_TO_ADDR
// if not pom then
33449: LD_VAR 0 4
33453: NOT
33454: IFFALSE 33458
// exit ;
33456: GO 33559
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33458: LD_ADDR_VAR 0 5
33462: PUSH
33463: LD_VAR 0 2
33467: PPUSH
33468: LD_VAR 0 1
33472: PPUSH
33473: CALL_OW 248
33477: PPUSH
33478: CALL_OW 450
33482: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33483: LD_ADDR_VAR 0 3
33487: PUSH
33488: LD_VAR 0 4
33492: PPUSH
33493: LD_INT 1
33495: PPUSH
33496: CALL_OW 275
33500: PUSH
33501: LD_VAR 0 5
33505: PUSH
33506: LD_INT 1
33508: ARRAY
33509: GREATEREQUAL
33510: PUSH
33511: LD_VAR 0 4
33515: PPUSH
33516: LD_INT 2
33518: PPUSH
33519: CALL_OW 275
33523: PUSH
33524: LD_VAR 0 5
33528: PUSH
33529: LD_INT 2
33531: ARRAY
33532: GREATEREQUAL
33533: AND
33534: PUSH
33535: LD_VAR 0 4
33539: PPUSH
33540: LD_INT 3
33542: PPUSH
33543: CALL_OW 275
33547: PUSH
33548: LD_VAR 0 5
33552: PUSH
33553: LD_INT 3
33555: ARRAY
33556: GREATEREQUAL
33557: AND
33558: ST_TO_ADDR
// end ;
33559: LD_VAR 0 3
33563: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33564: LD_INT 0
33566: PPUSH
33567: PPUSH
33568: PPUSH
33569: PPUSH
33570: PPUSH
33571: PPUSH
33572: PPUSH
33573: PPUSH
33574: PPUSH
33575: PPUSH
33576: PPUSH
// result := false ;
33577: LD_ADDR_VAR 0 8
33581: PUSH
33582: LD_INT 0
33584: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33585: LD_VAR 0 5
33589: NOT
33590: PUSH
33591: LD_VAR 0 1
33595: NOT
33596: OR
33597: PUSH
33598: LD_VAR 0 2
33602: NOT
33603: OR
33604: PUSH
33605: LD_VAR 0 3
33609: NOT
33610: OR
33611: IFFALSE 33615
// exit ;
33613: GO 34429
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33615: LD_ADDR_VAR 0 14
33619: PUSH
33620: LD_VAR 0 1
33624: PPUSH
33625: LD_VAR 0 2
33629: PPUSH
33630: LD_VAR 0 3
33634: PPUSH
33635: LD_VAR 0 4
33639: PPUSH
33640: LD_VAR 0 5
33644: PUSH
33645: LD_INT 1
33647: ARRAY
33648: PPUSH
33649: CALL_OW 248
33653: PPUSH
33654: LD_INT 0
33656: PPUSH
33657: CALL 35666 0 6
33661: ST_TO_ADDR
// if not hexes then
33662: LD_VAR 0 14
33666: NOT
33667: IFFALSE 33671
// exit ;
33669: GO 34429
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33671: LD_ADDR_VAR 0 17
33675: PUSH
33676: LD_VAR 0 5
33680: PPUSH
33681: LD_INT 22
33683: PUSH
33684: LD_VAR 0 13
33688: PPUSH
33689: CALL_OW 255
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 2
33700: PUSH
33701: LD_INT 30
33703: PUSH
33704: LD_INT 0
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 30
33713: PUSH
33714: LD_INT 1
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: LIST
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PPUSH
33730: CALL_OW 72
33734: ST_TO_ADDR
// for i = 1 to hexes do
33735: LD_ADDR_VAR 0 9
33739: PUSH
33740: DOUBLE
33741: LD_INT 1
33743: DEC
33744: ST_TO_ADDR
33745: LD_VAR 0 14
33749: PUSH
33750: FOR_TO
33751: IFFALSE 34427
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33753: LD_ADDR_VAR 0 13
33757: PUSH
33758: LD_VAR 0 14
33762: PUSH
33763: LD_VAR 0 9
33767: ARRAY
33768: PUSH
33769: LD_INT 1
33771: ARRAY
33772: PPUSH
33773: LD_VAR 0 14
33777: PUSH
33778: LD_VAR 0 9
33782: ARRAY
33783: PUSH
33784: LD_INT 2
33786: ARRAY
33787: PPUSH
33788: CALL_OW 428
33792: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33793: LD_VAR 0 14
33797: PUSH
33798: LD_VAR 0 9
33802: ARRAY
33803: PUSH
33804: LD_INT 1
33806: ARRAY
33807: PPUSH
33808: LD_VAR 0 14
33812: PUSH
33813: LD_VAR 0 9
33817: ARRAY
33818: PUSH
33819: LD_INT 2
33821: ARRAY
33822: PPUSH
33823: CALL_OW 351
33827: PUSH
33828: LD_VAR 0 14
33832: PUSH
33833: LD_VAR 0 9
33837: ARRAY
33838: PUSH
33839: LD_INT 1
33841: ARRAY
33842: PPUSH
33843: LD_VAR 0 14
33847: PUSH
33848: LD_VAR 0 9
33852: ARRAY
33853: PUSH
33854: LD_INT 2
33856: ARRAY
33857: PPUSH
33858: CALL_OW 488
33862: NOT
33863: OR
33864: PUSH
33865: LD_VAR 0 13
33869: PPUSH
33870: CALL_OW 247
33874: PUSH
33875: LD_INT 3
33877: EQUAL
33878: OR
33879: IFFALSE 33885
// exit ;
33881: POP
33882: POP
33883: GO 34429
// if not tmp then
33885: LD_VAR 0 13
33889: NOT
33890: IFFALSE 33894
// continue ;
33892: GO 33750
// result := true ;
33894: LD_ADDR_VAR 0 8
33898: PUSH
33899: LD_INT 1
33901: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33902: LD_VAR 0 6
33906: PUSH
33907: LD_VAR 0 13
33911: PPUSH
33912: CALL_OW 247
33916: PUSH
33917: LD_INT 2
33919: EQUAL
33920: AND
33921: PUSH
33922: LD_VAR 0 13
33926: PPUSH
33927: CALL_OW 263
33931: PUSH
33932: LD_INT 1
33934: EQUAL
33935: AND
33936: IFFALSE 34100
// begin if IsDrivenBy ( tmp ) then
33938: LD_VAR 0 13
33942: PPUSH
33943: CALL_OW 311
33947: IFFALSE 33951
// continue ;
33949: GO 33750
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33951: LD_VAR 0 6
33955: PPUSH
33956: LD_INT 3
33958: PUSH
33959: LD_INT 60
33961: PUSH
33962: EMPTY
33963: LIST
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: LD_INT 3
33971: PUSH
33972: LD_INT 55
33974: PUSH
33975: EMPTY
33976: LIST
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PPUSH
33986: CALL_OW 72
33990: IFFALSE 34098
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33992: LD_ADDR_VAR 0 18
33996: PUSH
33997: LD_VAR 0 6
34001: PPUSH
34002: LD_INT 3
34004: PUSH
34005: LD_INT 60
34007: PUSH
34008: EMPTY
34009: LIST
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 3
34017: PUSH
34018: LD_INT 55
34020: PUSH
34021: EMPTY
34022: LIST
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PPUSH
34032: CALL_OW 72
34036: PUSH
34037: LD_INT 1
34039: ARRAY
34040: ST_TO_ADDR
// if IsInUnit ( driver ) then
34041: LD_VAR 0 18
34045: PPUSH
34046: CALL_OW 310
34050: IFFALSE 34061
// ComExit ( driver ) ;
34052: LD_VAR 0 18
34056: PPUSH
34057: CALL 59371 0 1
// AddComEnterUnit ( driver , tmp ) ;
34061: LD_VAR 0 18
34065: PPUSH
34066: LD_VAR 0 13
34070: PPUSH
34071: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34075: LD_VAR 0 18
34079: PPUSH
34080: LD_VAR 0 7
34084: PPUSH
34085: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34089: LD_VAR 0 18
34093: PPUSH
34094: CALL_OW 181
// end ; continue ;
34098: GO 33750
// end ; if not cleaners or not tmp in cleaners then
34100: LD_VAR 0 6
34104: NOT
34105: PUSH
34106: LD_VAR 0 13
34110: PUSH
34111: LD_VAR 0 6
34115: IN
34116: NOT
34117: OR
34118: IFFALSE 34425
// begin if dep then
34120: LD_VAR 0 17
34124: IFFALSE 34260
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34126: LD_ADDR_VAR 0 16
34130: PUSH
34131: LD_VAR 0 17
34135: PUSH
34136: LD_INT 1
34138: ARRAY
34139: PPUSH
34140: CALL_OW 250
34144: PPUSH
34145: LD_VAR 0 17
34149: PUSH
34150: LD_INT 1
34152: ARRAY
34153: PPUSH
34154: CALL_OW 254
34158: PPUSH
34159: LD_INT 5
34161: PPUSH
34162: CALL_OW 272
34166: PUSH
34167: LD_VAR 0 17
34171: PUSH
34172: LD_INT 1
34174: ARRAY
34175: PPUSH
34176: CALL_OW 251
34180: PPUSH
34181: LD_VAR 0 17
34185: PUSH
34186: LD_INT 1
34188: ARRAY
34189: PPUSH
34190: CALL_OW 254
34194: PPUSH
34195: LD_INT 5
34197: PPUSH
34198: CALL_OW 273
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34207: LD_VAR 0 16
34211: PUSH
34212: LD_INT 1
34214: ARRAY
34215: PPUSH
34216: LD_VAR 0 16
34220: PUSH
34221: LD_INT 2
34223: ARRAY
34224: PPUSH
34225: CALL_OW 488
34229: IFFALSE 34260
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34231: LD_VAR 0 13
34235: PPUSH
34236: LD_VAR 0 16
34240: PUSH
34241: LD_INT 1
34243: ARRAY
34244: PPUSH
34245: LD_VAR 0 16
34249: PUSH
34250: LD_INT 2
34252: ARRAY
34253: PPUSH
34254: CALL_OW 111
// continue ;
34258: GO 33750
// end ; end ; r := GetDir ( tmp ) ;
34260: LD_ADDR_VAR 0 15
34264: PUSH
34265: LD_VAR 0 13
34269: PPUSH
34270: CALL_OW 254
34274: ST_TO_ADDR
// if r = 5 then
34275: LD_VAR 0 15
34279: PUSH
34280: LD_INT 5
34282: EQUAL
34283: IFFALSE 34293
// r := 0 ;
34285: LD_ADDR_VAR 0 15
34289: PUSH
34290: LD_INT 0
34292: ST_TO_ADDR
// for j = r to 5 do
34293: LD_ADDR_VAR 0 10
34297: PUSH
34298: DOUBLE
34299: LD_VAR 0 15
34303: DEC
34304: ST_TO_ADDR
34305: LD_INT 5
34307: PUSH
34308: FOR_TO
34309: IFFALSE 34423
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34311: LD_ADDR_VAR 0 11
34315: PUSH
34316: LD_VAR 0 13
34320: PPUSH
34321: CALL_OW 250
34325: PPUSH
34326: LD_VAR 0 10
34330: PPUSH
34331: LD_INT 2
34333: PPUSH
34334: CALL_OW 272
34338: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34339: LD_ADDR_VAR 0 12
34343: PUSH
34344: LD_VAR 0 13
34348: PPUSH
34349: CALL_OW 251
34353: PPUSH
34354: LD_VAR 0 10
34358: PPUSH
34359: LD_INT 2
34361: PPUSH
34362: CALL_OW 273
34366: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34367: LD_VAR 0 11
34371: PPUSH
34372: LD_VAR 0 12
34376: PPUSH
34377: CALL_OW 488
34381: PUSH
34382: LD_VAR 0 11
34386: PPUSH
34387: LD_VAR 0 12
34391: PPUSH
34392: CALL_OW 428
34396: NOT
34397: AND
34398: IFFALSE 34421
// begin ComMoveXY ( tmp , _x , _y ) ;
34400: LD_VAR 0 13
34404: PPUSH
34405: LD_VAR 0 11
34409: PPUSH
34410: LD_VAR 0 12
34414: PPUSH
34415: CALL_OW 111
// break ;
34419: GO 34423
// end ; end ;
34421: GO 34308
34423: POP
34424: POP
// end ; end ;
34425: GO 33750
34427: POP
34428: POP
// end ;
34429: LD_VAR 0 8
34433: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34434: LD_INT 0
34436: PPUSH
// result := true ;
34437: LD_ADDR_VAR 0 3
34441: PUSH
34442: LD_INT 1
34444: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34445: LD_VAR 0 2
34449: PUSH
34450: LD_INT 24
34452: DOUBLE
34453: EQUAL
34454: IFTRUE 34464
34456: LD_INT 33
34458: DOUBLE
34459: EQUAL
34460: IFTRUE 34464
34462: GO 34489
34464: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34465: LD_ADDR_VAR 0 3
34469: PUSH
34470: LD_INT 32
34472: PPUSH
34473: LD_VAR 0 1
34477: PPUSH
34478: CALL_OW 321
34482: PUSH
34483: LD_INT 2
34485: EQUAL
34486: ST_TO_ADDR
34487: GO 34809
34489: LD_INT 20
34491: DOUBLE
34492: EQUAL
34493: IFTRUE 34497
34495: GO 34522
34497: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34498: LD_ADDR_VAR 0 3
34502: PUSH
34503: LD_INT 6
34505: PPUSH
34506: LD_VAR 0 1
34510: PPUSH
34511: CALL_OW 321
34515: PUSH
34516: LD_INT 2
34518: EQUAL
34519: ST_TO_ADDR
34520: GO 34809
34522: LD_INT 22
34524: DOUBLE
34525: EQUAL
34526: IFTRUE 34536
34528: LD_INT 36
34530: DOUBLE
34531: EQUAL
34532: IFTRUE 34536
34534: GO 34561
34536: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34537: LD_ADDR_VAR 0 3
34541: PUSH
34542: LD_INT 15
34544: PPUSH
34545: LD_VAR 0 1
34549: PPUSH
34550: CALL_OW 321
34554: PUSH
34555: LD_INT 2
34557: EQUAL
34558: ST_TO_ADDR
34559: GO 34809
34561: LD_INT 30
34563: DOUBLE
34564: EQUAL
34565: IFTRUE 34569
34567: GO 34594
34569: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34570: LD_ADDR_VAR 0 3
34574: PUSH
34575: LD_INT 20
34577: PPUSH
34578: LD_VAR 0 1
34582: PPUSH
34583: CALL_OW 321
34587: PUSH
34588: LD_INT 2
34590: EQUAL
34591: ST_TO_ADDR
34592: GO 34809
34594: LD_INT 28
34596: DOUBLE
34597: EQUAL
34598: IFTRUE 34608
34600: LD_INT 21
34602: DOUBLE
34603: EQUAL
34604: IFTRUE 34608
34606: GO 34633
34608: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34609: LD_ADDR_VAR 0 3
34613: PUSH
34614: LD_INT 21
34616: PPUSH
34617: LD_VAR 0 1
34621: PPUSH
34622: CALL_OW 321
34626: PUSH
34627: LD_INT 2
34629: EQUAL
34630: ST_TO_ADDR
34631: GO 34809
34633: LD_INT 16
34635: DOUBLE
34636: EQUAL
34637: IFTRUE 34641
34639: GO 34668
34641: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34642: LD_ADDR_VAR 0 3
34646: PUSH
34647: LD_EXP 85
34651: PPUSH
34652: LD_VAR 0 1
34656: PPUSH
34657: CALL_OW 321
34661: PUSH
34662: LD_INT 2
34664: EQUAL
34665: ST_TO_ADDR
34666: GO 34809
34668: LD_INT 19
34670: DOUBLE
34671: EQUAL
34672: IFTRUE 34682
34674: LD_INT 23
34676: DOUBLE
34677: EQUAL
34678: IFTRUE 34682
34680: GO 34709
34682: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34683: LD_ADDR_VAR 0 3
34687: PUSH
34688: LD_EXP 84
34692: PPUSH
34693: LD_VAR 0 1
34697: PPUSH
34698: CALL_OW 321
34702: PUSH
34703: LD_INT 2
34705: EQUAL
34706: ST_TO_ADDR
34707: GO 34809
34709: LD_INT 17
34711: DOUBLE
34712: EQUAL
34713: IFTRUE 34717
34715: GO 34742
34717: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34718: LD_ADDR_VAR 0 3
34722: PUSH
34723: LD_INT 39
34725: PPUSH
34726: LD_VAR 0 1
34730: PPUSH
34731: CALL_OW 321
34735: PUSH
34736: LD_INT 2
34738: EQUAL
34739: ST_TO_ADDR
34740: GO 34809
34742: LD_INT 18
34744: DOUBLE
34745: EQUAL
34746: IFTRUE 34750
34748: GO 34775
34750: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34751: LD_ADDR_VAR 0 3
34755: PUSH
34756: LD_INT 40
34758: PPUSH
34759: LD_VAR 0 1
34763: PPUSH
34764: CALL_OW 321
34768: PUSH
34769: LD_INT 2
34771: EQUAL
34772: ST_TO_ADDR
34773: GO 34809
34775: LD_INT 27
34777: DOUBLE
34778: EQUAL
34779: IFTRUE 34783
34781: GO 34808
34783: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34784: LD_ADDR_VAR 0 3
34788: PUSH
34789: LD_INT 35
34791: PPUSH
34792: LD_VAR 0 1
34796: PPUSH
34797: CALL_OW 321
34801: PUSH
34802: LD_INT 2
34804: EQUAL
34805: ST_TO_ADDR
34806: GO 34809
34808: POP
// end ;
34809: LD_VAR 0 3
34813: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34814: LD_INT 0
34816: PPUSH
34817: PPUSH
34818: PPUSH
34819: PPUSH
34820: PPUSH
34821: PPUSH
34822: PPUSH
34823: PPUSH
34824: PPUSH
34825: PPUSH
34826: PPUSH
// result := false ;
34827: LD_ADDR_VAR 0 6
34831: PUSH
34832: LD_INT 0
34834: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34835: LD_VAR 0 1
34839: NOT
34840: PUSH
34841: LD_VAR 0 1
34845: PPUSH
34846: CALL_OW 266
34850: PUSH
34851: LD_INT 0
34853: PUSH
34854: LD_INT 1
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: IN
34861: NOT
34862: OR
34863: PUSH
34864: LD_VAR 0 2
34868: NOT
34869: OR
34870: PUSH
34871: LD_VAR 0 5
34875: PUSH
34876: LD_INT 0
34878: PUSH
34879: LD_INT 1
34881: PUSH
34882: LD_INT 2
34884: PUSH
34885: LD_INT 3
34887: PUSH
34888: LD_INT 4
34890: PUSH
34891: LD_INT 5
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: IN
34902: NOT
34903: OR
34904: PUSH
34905: LD_VAR 0 3
34909: PPUSH
34910: LD_VAR 0 4
34914: PPUSH
34915: CALL_OW 488
34919: NOT
34920: OR
34921: IFFALSE 34925
// exit ;
34923: GO 35661
// side := GetSide ( depot ) ;
34925: LD_ADDR_VAR 0 9
34929: PUSH
34930: LD_VAR 0 1
34934: PPUSH
34935: CALL_OW 255
34939: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
34940: LD_VAR 0 9
34944: PPUSH
34945: LD_VAR 0 2
34949: PPUSH
34950: CALL 34434 0 2
34954: NOT
34955: IFFALSE 34959
// exit ;
34957: GO 35661
// pom := GetBase ( depot ) ;
34959: LD_ADDR_VAR 0 10
34963: PUSH
34964: LD_VAR 0 1
34968: PPUSH
34969: CALL_OW 274
34973: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34974: LD_ADDR_VAR 0 11
34978: PUSH
34979: LD_VAR 0 2
34983: PPUSH
34984: LD_VAR 0 1
34988: PPUSH
34989: CALL_OW 248
34993: PPUSH
34994: CALL_OW 450
34998: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34999: LD_VAR 0 10
35003: PPUSH
35004: LD_INT 1
35006: PPUSH
35007: CALL_OW 275
35011: PUSH
35012: LD_VAR 0 11
35016: PUSH
35017: LD_INT 1
35019: ARRAY
35020: GREATEREQUAL
35021: PUSH
35022: LD_VAR 0 10
35026: PPUSH
35027: LD_INT 2
35029: PPUSH
35030: CALL_OW 275
35034: PUSH
35035: LD_VAR 0 11
35039: PUSH
35040: LD_INT 2
35042: ARRAY
35043: GREATEREQUAL
35044: AND
35045: PUSH
35046: LD_VAR 0 10
35050: PPUSH
35051: LD_INT 3
35053: PPUSH
35054: CALL_OW 275
35058: PUSH
35059: LD_VAR 0 11
35063: PUSH
35064: LD_INT 3
35066: ARRAY
35067: GREATEREQUAL
35068: AND
35069: NOT
35070: IFFALSE 35074
// exit ;
35072: GO 35661
// if GetBType ( depot ) = b_depot then
35074: LD_VAR 0 1
35078: PPUSH
35079: CALL_OW 266
35083: PUSH
35084: LD_INT 0
35086: EQUAL
35087: IFFALSE 35099
// dist := 28 else
35089: LD_ADDR_VAR 0 14
35093: PUSH
35094: LD_INT 28
35096: ST_TO_ADDR
35097: GO 35107
// dist := 36 ;
35099: LD_ADDR_VAR 0 14
35103: PUSH
35104: LD_INT 36
35106: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35107: LD_VAR 0 1
35111: PPUSH
35112: LD_VAR 0 3
35116: PPUSH
35117: LD_VAR 0 4
35121: PPUSH
35122: CALL_OW 297
35126: PUSH
35127: LD_VAR 0 14
35131: GREATER
35132: IFFALSE 35136
// exit ;
35134: GO 35661
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35136: LD_ADDR_VAR 0 12
35140: PUSH
35141: LD_VAR 0 2
35145: PPUSH
35146: LD_VAR 0 3
35150: PPUSH
35151: LD_VAR 0 4
35155: PPUSH
35156: LD_VAR 0 5
35160: PPUSH
35161: LD_VAR 0 1
35165: PPUSH
35166: CALL_OW 248
35170: PPUSH
35171: LD_INT 0
35173: PPUSH
35174: CALL 35666 0 6
35178: ST_TO_ADDR
// if not hexes then
35179: LD_VAR 0 12
35183: NOT
35184: IFFALSE 35188
// exit ;
35186: GO 35661
// hex := GetHexInfo ( x , y ) ;
35188: LD_ADDR_VAR 0 15
35192: PUSH
35193: LD_VAR 0 3
35197: PPUSH
35198: LD_VAR 0 4
35202: PPUSH
35203: CALL_OW 546
35207: ST_TO_ADDR
// if hex [ 1 ] then
35208: LD_VAR 0 15
35212: PUSH
35213: LD_INT 1
35215: ARRAY
35216: IFFALSE 35220
// exit ;
35218: GO 35661
// height := hex [ 2 ] ;
35220: LD_ADDR_VAR 0 13
35224: PUSH
35225: LD_VAR 0 15
35229: PUSH
35230: LD_INT 2
35232: ARRAY
35233: ST_TO_ADDR
// for i = 1 to hexes do
35234: LD_ADDR_VAR 0 7
35238: PUSH
35239: DOUBLE
35240: LD_INT 1
35242: DEC
35243: ST_TO_ADDR
35244: LD_VAR 0 12
35248: PUSH
35249: FOR_TO
35250: IFFALSE 35580
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35252: LD_VAR 0 12
35256: PUSH
35257: LD_VAR 0 7
35261: ARRAY
35262: PUSH
35263: LD_INT 1
35265: ARRAY
35266: PPUSH
35267: LD_VAR 0 12
35271: PUSH
35272: LD_VAR 0 7
35276: ARRAY
35277: PUSH
35278: LD_INT 2
35280: ARRAY
35281: PPUSH
35282: CALL_OW 488
35286: NOT
35287: PUSH
35288: LD_VAR 0 12
35292: PUSH
35293: LD_VAR 0 7
35297: ARRAY
35298: PUSH
35299: LD_INT 1
35301: ARRAY
35302: PPUSH
35303: LD_VAR 0 12
35307: PUSH
35308: LD_VAR 0 7
35312: ARRAY
35313: PUSH
35314: LD_INT 2
35316: ARRAY
35317: PPUSH
35318: CALL_OW 428
35322: PUSH
35323: LD_INT 0
35325: GREATER
35326: OR
35327: PUSH
35328: LD_VAR 0 12
35332: PUSH
35333: LD_VAR 0 7
35337: ARRAY
35338: PUSH
35339: LD_INT 1
35341: ARRAY
35342: PPUSH
35343: LD_VAR 0 12
35347: PUSH
35348: LD_VAR 0 7
35352: ARRAY
35353: PUSH
35354: LD_INT 2
35356: ARRAY
35357: PPUSH
35358: CALL_OW 351
35362: OR
35363: IFFALSE 35369
// exit ;
35365: POP
35366: POP
35367: GO 35661
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35369: LD_ADDR_VAR 0 8
35373: PUSH
35374: LD_VAR 0 12
35378: PUSH
35379: LD_VAR 0 7
35383: ARRAY
35384: PUSH
35385: LD_INT 1
35387: ARRAY
35388: PPUSH
35389: LD_VAR 0 12
35393: PUSH
35394: LD_VAR 0 7
35398: ARRAY
35399: PUSH
35400: LD_INT 2
35402: ARRAY
35403: PPUSH
35404: CALL_OW 546
35408: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35409: LD_VAR 0 8
35413: PUSH
35414: LD_INT 1
35416: ARRAY
35417: PUSH
35418: LD_VAR 0 8
35422: PUSH
35423: LD_INT 2
35425: ARRAY
35426: PUSH
35427: LD_VAR 0 13
35431: PUSH
35432: LD_INT 2
35434: PLUS
35435: GREATER
35436: OR
35437: PUSH
35438: LD_VAR 0 8
35442: PUSH
35443: LD_INT 2
35445: ARRAY
35446: PUSH
35447: LD_VAR 0 13
35451: PUSH
35452: LD_INT 2
35454: MINUS
35455: LESS
35456: OR
35457: PUSH
35458: LD_VAR 0 8
35462: PUSH
35463: LD_INT 3
35465: ARRAY
35466: PUSH
35467: LD_INT 0
35469: PUSH
35470: LD_INT 8
35472: PUSH
35473: LD_INT 9
35475: PUSH
35476: LD_INT 10
35478: PUSH
35479: LD_INT 11
35481: PUSH
35482: LD_INT 12
35484: PUSH
35485: LD_INT 13
35487: PUSH
35488: LD_INT 16
35490: PUSH
35491: LD_INT 17
35493: PUSH
35494: LD_INT 18
35496: PUSH
35497: LD_INT 19
35499: PUSH
35500: LD_INT 20
35502: PUSH
35503: LD_INT 21
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: IN
35521: NOT
35522: OR
35523: PUSH
35524: LD_VAR 0 8
35528: PUSH
35529: LD_INT 5
35531: ARRAY
35532: NOT
35533: OR
35534: PUSH
35535: LD_VAR 0 8
35539: PUSH
35540: LD_INT 6
35542: ARRAY
35543: PUSH
35544: LD_INT 1
35546: PUSH
35547: LD_INT 2
35549: PUSH
35550: LD_INT 7
35552: PUSH
35553: LD_INT 9
35555: PUSH
35556: LD_INT 10
35558: PUSH
35559: LD_INT 11
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: IN
35570: NOT
35571: OR
35572: IFFALSE 35578
// exit ;
35574: POP
35575: POP
35576: GO 35661
// end ;
35578: GO 35249
35580: POP
35581: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35582: LD_VAR 0 9
35586: PPUSH
35587: LD_VAR 0 3
35591: PPUSH
35592: LD_VAR 0 4
35596: PPUSH
35597: LD_INT 20
35599: PPUSH
35600: CALL 27607 0 4
35604: PUSH
35605: LD_INT 4
35607: ARRAY
35608: IFFALSE 35612
// exit ;
35610: GO 35661
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35612: LD_VAR 0 2
35616: PUSH
35617: LD_INT 29
35619: PUSH
35620: LD_INT 30
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: IN
35627: PUSH
35628: LD_VAR 0 3
35632: PPUSH
35633: LD_VAR 0 4
35637: PPUSH
35638: LD_VAR 0 9
35642: PPUSH
35643: CALL_OW 440
35647: NOT
35648: AND
35649: IFFALSE 35653
// exit ;
35651: GO 35661
// result := true ;
35653: LD_ADDR_VAR 0 6
35657: PUSH
35658: LD_INT 1
35660: ST_TO_ADDR
// end ;
35661: LD_VAR 0 6
35665: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35666: LD_INT 0
35668: PPUSH
35669: PPUSH
35670: PPUSH
35671: PPUSH
35672: PPUSH
35673: PPUSH
35674: PPUSH
35675: PPUSH
35676: PPUSH
35677: PPUSH
35678: PPUSH
35679: PPUSH
35680: PPUSH
35681: PPUSH
35682: PPUSH
35683: PPUSH
35684: PPUSH
35685: PPUSH
35686: PPUSH
35687: PPUSH
35688: PPUSH
35689: PPUSH
35690: PPUSH
35691: PPUSH
35692: PPUSH
35693: PPUSH
35694: PPUSH
35695: PPUSH
35696: PPUSH
35697: PPUSH
35698: PPUSH
35699: PPUSH
35700: PPUSH
35701: PPUSH
35702: PPUSH
35703: PPUSH
35704: PPUSH
35705: PPUSH
35706: PPUSH
35707: PPUSH
35708: PPUSH
35709: PPUSH
35710: PPUSH
35711: PPUSH
35712: PPUSH
35713: PPUSH
35714: PPUSH
35715: PPUSH
35716: PPUSH
35717: PPUSH
35718: PPUSH
35719: PPUSH
35720: PPUSH
35721: PPUSH
35722: PPUSH
35723: PPUSH
35724: PPUSH
35725: PPUSH
// result = [ ] ;
35726: LD_ADDR_VAR 0 7
35730: PUSH
35731: EMPTY
35732: ST_TO_ADDR
// temp_list = [ ] ;
35733: LD_ADDR_VAR 0 9
35737: PUSH
35738: EMPTY
35739: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35740: LD_VAR 0 4
35744: PUSH
35745: LD_INT 0
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: LD_INT 2
35753: PUSH
35754: LD_INT 3
35756: PUSH
35757: LD_INT 4
35759: PUSH
35760: LD_INT 5
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: IN
35771: NOT
35772: PUSH
35773: LD_VAR 0 1
35777: PUSH
35778: LD_INT 0
35780: PUSH
35781: LD_INT 1
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: IN
35788: PUSH
35789: LD_VAR 0 5
35793: PUSH
35794: LD_INT 1
35796: PUSH
35797: LD_INT 2
35799: PUSH
35800: LD_INT 3
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: LIST
35807: IN
35808: NOT
35809: AND
35810: OR
35811: IFFALSE 35815
// exit ;
35813: GO 54206
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35815: LD_VAR 0 1
35819: PUSH
35820: LD_INT 6
35822: PUSH
35823: LD_INT 7
35825: PUSH
35826: LD_INT 8
35828: PUSH
35829: LD_INT 13
35831: PUSH
35832: LD_INT 12
35834: PUSH
35835: LD_INT 15
35837: PUSH
35838: LD_INT 11
35840: PUSH
35841: LD_INT 14
35843: PUSH
35844: LD_INT 10
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: IN
35858: IFFALSE 35868
// btype = b_lab ;
35860: LD_ADDR_VAR 0 1
35864: PUSH
35865: LD_INT 6
35867: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35868: LD_VAR 0 6
35872: PUSH
35873: LD_INT 0
35875: PUSH
35876: LD_INT 1
35878: PUSH
35879: LD_INT 2
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: LIST
35886: IN
35887: NOT
35888: PUSH
35889: LD_VAR 0 1
35893: PUSH
35894: LD_INT 0
35896: PUSH
35897: LD_INT 1
35899: PUSH
35900: LD_INT 2
35902: PUSH
35903: LD_INT 3
35905: PUSH
35906: LD_INT 6
35908: PUSH
35909: LD_INT 36
35911: PUSH
35912: LD_INT 4
35914: PUSH
35915: LD_INT 5
35917: PUSH
35918: LD_INT 31
35920: PUSH
35921: LD_INT 32
35923: PUSH
35924: LD_INT 33
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: IN
35940: NOT
35941: PUSH
35942: LD_VAR 0 6
35946: PUSH
35947: LD_INT 1
35949: EQUAL
35950: AND
35951: OR
35952: PUSH
35953: LD_VAR 0 1
35957: PUSH
35958: LD_INT 2
35960: PUSH
35961: LD_INT 3
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: IN
35968: NOT
35969: PUSH
35970: LD_VAR 0 6
35974: PUSH
35975: LD_INT 2
35977: EQUAL
35978: AND
35979: OR
35980: IFFALSE 35990
// mode = 0 ;
35982: LD_ADDR_VAR 0 6
35986: PUSH
35987: LD_INT 0
35989: ST_TO_ADDR
// case mode of 0 :
35990: LD_VAR 0 6
35994: PUSH
35995: LD_INT 0
35997: DOUBLE
35998: EQUAL
35999: IFTRUE 36003
36001: GO 47456
36003: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36004: LD_ADDR_VAR 0 11
36008: PUSH
36009: LD_INT 0
36011: PUSH
36012: LD_INT 0
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 0
36021: PUSH
36022: LD_INT 1
36024: NEG
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: LD_INT 1
36032: PUSH
36033: LD_INT 0
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: PUSH
36040: LD_INT 1
36042: PUSH
36043: LD_INT 1
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 0
36052: PUSH
36053: LD_INT 1
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 1
36062: NEG
36063: PUSH
36064: LD_INT 0
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 1
36073: NEG
36074: PUSH
36075: LD_INT 1
36077: NEG
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 1
36085: NEG
36086: PUSH
36087: LD_INT 2
36089: NEG
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 0
36097: PUSH
36098: LD_INT 2
36100: NEG
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 1
36108: PUSH
36109: LD_INT 1
36111: NEG
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 1
36119: PUSH
36120: LD_INT 2
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 0
36129: PUSH
36130: LD_INT 2
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 1
36139: NEG
36140: PUSH
36141: LD_INT 1
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 1
36150: PUSH
36151: LD_INT 3
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 0
36160: PUSH
36161: LD_INT 3
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 1
36170: NEG
36171: PUSH
36172: LD_INT 2
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36197: LD_ADDR_VAR 0 12
36201: PUSH
36202: LD_INT 0
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 0
36214: PUSH
36215: LD_INT 1
36217: NEG
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 1
36225: PUSH
36226: LD_INT 0
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 1
36235: PUSH
36236: LD_INT 1
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 0
36245: PUSH
36246: LD_INT 1
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: LD_INT 1
36255: NEG
36256: PUSH
36257: LD_INT 0
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 1
36266: NEG
36267: PUSH
36268: LD_INT 1
36270: NEG
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 1
36278: PUSH
36279: LD_INT 1
36281: NEG
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 2
36289: PUSH
36290: LD_INT 0
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 2
36299: PUSH
36300: LD_INT 1
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: LD_INT 1
36309: NEG
36310: PUSH
36311: LD_INT 1
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: LD_INT 2
36320: NEG
36321: PUSH
36322: LD_INT 0
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 2
36331: NEG
36332: PUSH
36333: LD_INT 1
36335: NEG
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 2
36343: NEG
36344: PUSH
36345: LD_INT 1
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 3
36354: NEG
36355: PUSH
36356: LD_INT 0
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 3
36365: NEG
36366: PUSH
36367: LD_INT 1
36369: NEG
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36393: LD_ADDR_VAR 0 13
36397: PUSH
36398: LD_INT 0
36400: PUSH
36401: LD_INT 0
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_INT 0
36410: PUSH
36411: LD_INT 1
36413: NEG
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 1
36421: PUSH
36422: LD_INT 0
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 1
36431: PUSH
36432: LD_INT 1
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 0
36441: PUSH
36442: LD_INT 1
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 1
36451: NEG
36452: PUSH
36453: LD_INT 0
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 1
36462: NEG
36463: PUSH
36464: LD_INT 1
36466: NEG
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 1
36474: NEG
36475: PUSH
36476: LD_INT 2
36478: NEG
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 2
36486: PUSH
36487: LD_INT 1
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 2
36496: PUSH
36497: LD_INT 2
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 1
36506: PUSH
36507: LD_INT 2
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: LD_INT 2
36516: NEG
36517: PUSH
36518: LD_INT 1
36520: NEG
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 2
36528: NEG
36529: PUSH
36530: LD_INT 2
36532: NEG
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 2
36540: NEG
36541: PUSH
36542: LD_INT 3
36544: NEG
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 3
36552: NEG
36553: PUSH
36554: LD_INT 2
36556: NEG
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 3
36564: NEG
36565: PUSH
36566: LD_INT 3
36568: NEG
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36592: LD_ADDR_VAR 0 14
36596: PUSH
36597: LD_INT 0
36599: PUSH
36600: LD_INT 0
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 0
36609: PUSH
36610: LD_INT 1
36612: NEG
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 1
36620: PUSH
36621: LD_INT 0
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 1
36630: PUSH
36631: LD_INT 1
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 0
36640: PUSH
36641: LD_INT 1
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 1
36650: NEG
36651: PUSH
36652: LD_INT 0
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 1
36661: NEG
36662: PUSH
36663: LD_INT 1
36665: NEG
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 1
36673: NEG
36674: PUSH
36675: LD_INT 2
36677: NEG
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: LD_INT 2
36688: NEG
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 1
36696: PUSH
36697: LD_INT 1
36699: NEG
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 1
36707: PUSH
36708: LD_INT 2
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 0
36717: PUSH
36718: LD_INT 2
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 1
36727: NEG
36728: PUSH
36729: LD_INT 1
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 1
36738: NEG
36739: PUSH
36740: LD_INT 3
36742: NEG
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 0
36750: PUSH
36751: LD_INT 3
36753: NEG
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 1
36761: PUSH
36762: LD_INT 2
36764: NEG
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36788: LD_ADDR_VAR 0 15
36792: PUSH
36793: LD_INT 0
36795: PUSH
36796: LD_INT 0
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 0
36805: PUSH
36806: LD_INT 1
36808: NEG
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 1
36816: PUSH
36817: LD_INT 0
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 1
36826: PUSH
36827: LD_INT 1
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 0
36836: PUSH
36837: LD_INT 1
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 1
36846: NEG
36847: PUSH
36848: LD_INT 0
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 1
36857: NEG
36858: PUSH
36859: LD_INT 1
36861: NEG
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: LD_INT 1
36869: PUSH
36870: LD_INT 1
36872: NEG
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 2
36880: PUSH
36881: LD_INT 0
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 2
36890: PUSH
36891: LD_INT 1
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: LD_INT 1
36900: NEG
36901: PUSH
36902: LD_INT 1
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 2
36911: NEG
36912: PUSH
36913: LD_INT 0
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 2
36922: NEG
36923: PUSH
36924: LD_INT 1
36926: NEG
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 2
36934: PUSH
36935: LD_INT 1
36937: NEG
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 3
36945: PUSH
36946: LD_INT 0
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 3
36955: PUSH
36956: LD_INT 1
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36981: LD_ADDR_VAR 0 16
36985: PUSH
36986: LD_INT 0
36988: PUSH
36989: LD_INT 0
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 0
36998: PUSH
36999: LD_INT 1
37001: NEG
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 1
37009: PUSH
37010: LD_INT 0
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 1
37019: PUSH
37020: LD_INT 1
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 0
37029: PUSH
37030: LD_INT 1
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: PUSH
37037: LD_INT 1
37039: NEG
37040: PUSH
37041: LD_INT 0
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 1
37050: NEG
37051: PUSH
37052: LD_INT 1
37054: NEG
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 1
37062: NEG
37063: PUSH
37064: LD_INT 2
37066: NEG
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 2
37074: PUSH
37075: LD_INT 1
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 2
37084: PUSH
37085: LD_INT 2
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 1
37094: PUSH
37095: LD_INT 2
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 2
37104: NEG
37105: PUSH
37106: LD_INT 1
37108: NEG
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 2
37116: NEG
37117: PUSH
37118: LD_INT 2
37120: NEG
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 3
37128: PUSH
37129: LD_INT 2
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 3
37138: PUSH
37139: LD_INT 3
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 2
37148: PUSH
37149: LD_INT 3
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37174: LD_ADDR_VAR 0 17
37178: PUSH
37179: LD_INT 0
37181: PUSH
37182: LD_INT 0
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 0
37191: PUSH
37192: LD_INT 1
37194: NEG
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 1
37202: PUSH
37203: LD_INT 0
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 1
37212: PUSH
37213: LD_INT 1
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 0
37222: PUSH
37223: LD_INT 1
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 1
37232: NEG
37233: PUSH
37234: LD_INT 0
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 1
37243: NEG
37244: PUSH
37245: LD_INT 1
37247: NEG
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 1
37255: NEG
37256: PUSH
37257: LD_INT 2
37259: NEG
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 0
37267: PUSH
37268: LD_INT 2
37270: NEG
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 1
37278: PUSH
37279: LD_INT 1
37281: NEG
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 2
37289: PUSH
37290: LD_INT 0
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 2
37299: PUSH
37300: LD_INT 1
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 2
37309: PUSH
37310: LD_INT 2
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 1
37319: PUSH
37320: LD_INT 2
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 0
37329: PUSH
37330: LD_INT 2
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 1
37339: NEG
37340: PUSH
37341: LD_INT 1
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: PUSH
37348: LD_INT 2
37350: NEG
37351: PUSH
37352: LD_INT 0
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 2
37361: NEG
37362: PUSH
37363: LD_INT 1
37365: NEG
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 2
37373: NEG
37374: PUSH
37375: LD_INT 2
37377: NEG
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37404: LD_ADDR_VAR 0 18
37408: PUSH
37409: LD_INT 0
37411: PUSH
37412: LD_INT 0
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 0
37421: PUSH
37422: LD_INT 1
37424: NEG
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 1
37432: PUSH
37433: LD_INT 0
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 1
37442: PUSH
37443: LD_INT 1
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 0
37452: PUSH
37453: LD_INT 1
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 1
37462: NEG
37463: PUSH
37464: LD_INT 0
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 1
37473: NEG
37474: PUSH
37475: LD_INT 1
37477: NEG
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 1
37485: NEG
37486: PUSH
37487: LD_INT 2
37489: NEG
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 0
37497: PUSH
37498: LD_INT 2
37500: NEG
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 1
37508: PUSH
37509: LD_INT 1
37511: NEG
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 2
37519: PUSH
37520: LD_INT 0
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: LD_INT 2
37529: PUSH
37530: LD_INT 1
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 2
37539: PUSH
37540: LD_INT 2
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 1
37549: PUSH
37550: LD_INT 2
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 0
37559: PUSH
37560: LD_INT 2
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 1
37569: NEG
37570: PUSH
37571: LD_INT 1
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 2
37580: NEG
37581: PUSH
37582: LD_INT 0
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 2
37591: NEG
37592: PUSH
37593: LD_INT 1
37595: NEG
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 2
37603: NEG
37604: PUSH
37605: LD_INT 2
37607: NEG
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37634: LD_ADDR_VAR 0 19
37638: PUSH
37639: LD_INT 0
37641: PUSH
37642: LD_INT 0
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 0
37651: PUSH
37652: LD_INT 1
37654: NEG
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 1
37662: PUSH
37663: LD_INT 0
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 1
37672: PUSH
37673: LD_INT 1
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 0
37682: PUSH
37683: LD_INT 1
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 1
37692: NEG
37693: PUSH
37694: LD_INT 0
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 1
37703: NEG
37704: PUSH
37705: LD_INT 1
37707: NEG
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 1
37715: NEG
37716: PUSH
37717: LD_INT 2
37719: NEG
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 0
37727: PUSH
37728: LD_INT 2
37730: NEG
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: LD_INT 1
37738: PUSH
37739: LD_INT 1
37741: NEG
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 2
37749: PUSH
37750: LD_INT 0
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 2
37759: PUSH
37760: LD_INT 1
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 2
37769: PUSH
37770: LD_INT 2
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 1
37779: PUSH
37780: LD_INT 2
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 0
37789: PUSH
37790: LD_INT 2
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 1
37799: NEG
37800: PUSH
37801: LD_INT 1
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 2
37810: NEG
37811: PUSH
37812: LD_INT 0
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 2
37821: NEG
37822: PUSH
37823: LD_INT 1
37825: NEG
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 2
37833: NEG
37834: PUSH
37835: LD_INT 2
37837: NEG
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37864: LD_ADDR_VAR 0 20
37868: PUSH
37869: LD_INT 0
37871: PUSH
37872: LD_INT 0
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 0
37881: PUSH
37882: LD_INT 1
37884: NEG
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 1
37892: PUSH
37893: LD_INT 0
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 1
37902: PUSH
37903: LD_INT 1
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 0
37912: PUSH
37913: LD_INT 1
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 1
37922: NEG
37923: PUSH
37924: LD_INT 0
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 1
37933: NEG
37934: PUSH
37935: LD_INT 1
37937: NEG
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 1
37945: NEG
37946: PUSH
37947: LD_INT 2
37949: NEG
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 0
37957: PUSH
37958: LD_INT 2
37960: NEG
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: LD_INT 1
37968: PUSH
37969: LD_INT 1
37971: NEG
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 2
37979: PUSH
37980: LD_INT 0
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 2
37989: PUSH
37990: LD_INT 1
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 2
37999: PUSH
38000: LD_INT 2
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 1
38009: PUSH
38010: LD_INT 2
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 0
38019: PUSH
38020: LD_INT 2
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 1
38029: NEG
38030: PUSH
38031: LD_INT 1
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 2
38040: NEG
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 2
38051: NEG
38052: PUSH
38053: LD_INT 1
38055: NEG
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 2
38063: NEG
38064: PUSH
38065: LD_INT 2
38067: NEG
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38094: LD_ADDR_VAR 0 21
38098: PUSH
38099: LD_INT 0
38101: PUSH
38102: LD_INT 0
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 0
38111: PUSH
38112: LD_INT 1
38114: NEG
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: LD_INT 1
38122: PUSH
38123: LD_INT 0
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: LD_INT 1
38132: PUSH
38133: LD_INT 1
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 0
38142: PUSH
38143: LD_INT 1
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 1
38152: NEG
38153: PUSH
38154: LD_INT 0
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 1
38163: NEG
38164: PUSH
38165: LD_INT 1
38167: NEG
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 1
38175: NEG
38176: PUSH
38177: LD_INT 2
38179: NEG
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 0
38187: PUSH
38188: LD_INT 2
38190: NEG
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 1
38198: PUSH
38199: LD_INT 1
38201: NEG
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 2
38209: PUSH
38210: LD_INT 0
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 2
38219: PUSH
38220: LD_INT 1
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 2
38229: PUSH
38230: LD_INT 2
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 1
38239: PUSH
38240: LD_INT 2
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 0
38249: PUSH
38250: LD_INT 2
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 1
38259: NEG
38260: PUSH
38261: LD_INT 1
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 2
38270: NEG
38271: PUSH
38272: LD_INT 0
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 2
38281: NEG
38282: PUSH
38283: LD_INT 1
38285: NEG
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 2
38293: NEG
38294: PUSH
38295: LD_INT 2
38297: NEG
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38324: LD_ADDR_VAR 0 22
38328: PUSH
38329: LD_INT 0
38331: PUSH
38332: LD_INT 0
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 0
38341: PUSH
38342: LD_INT 1
38344: NEG
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 1
38352: PUSH
38353: LD_INT 0
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 1
38362: PUSH
38363: LD_INT 1
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 0
38372: PUSH
38373: LD_INT 1
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 1
38382: NEG
38383: PUSH
38384: LD_INT 0
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 1
38393: NEG
38394: PUSH
38395: LD_INT 1
38397: NEG
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 1
38405: NEG
38406: PUSH
38407: LD_INT 2
38409: NEG
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 0
38417: PUSH
38418: LD_INT 2
38420: NEG
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 1
38428: PUSH
38429: LD_INT 1
38431: NEG
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 2
38439: PUSH
38440: LD_INT 0
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 2
38449: PUSH
38450: LD_INT 1
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 2
38459: PUSH
38460: LD_INT 2
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 1
38469: PUSH
38470: LD_INT 2
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 0
38479: PUSH
38480: LD_INT 2
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 1
38489: NEG
38490: PUSH
38491: LD_INT 1
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 2
38500: NEG
38501: PUSH
38502: LD_INT 0
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 2
38511: NEG
38512: PUSH
38513: LD_INT 1
38515: NEG
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 2
38523: NEG
38524: PUSH
38525: LD_INT 2
38527: NEG
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38554: LD_ADDR_VAR 0 23
38558: PUSH
38559: LD_INT 0
38561: PUSH
38562: LD_INT 0
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 0
38571: PUSH
38572: LD_INT 1
38574: NEG
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 1
38582: PUSH
38583: LD_INT 0
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 1
38592: PUSH
38593: LD_INT 1
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 0
38602: PUSH
38603: LD_INT 1
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 1
38612: NEG
38613: PUSH
38614: LD_INT 0
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 1
38623: NEG
38624: PUSH
38625: LD_INT 1
38627: NEG
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 1
38635: NEG
38636: PUSH
38637: LD_INT 2
38639: NEG
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 0
38647: PUSH
38648: LD_INT 2
38650: NEG
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 1
38658: PUSH
38659: LD_INT 1
38661: NEG
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 2
38669: PUSH
38670: LD_INT 0
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 2
38679: PUSH
38680: LD_INT 1
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 2
38689: PUSH
38690: LD_INT 2
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 1
38699: PUSH
38700: LD_INT 2
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 0
38709: PUSH
38710: LD_INT 2
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 1
38719: NEG
38720: PUSH
38721: LD_INT 1
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 2
38730: NEG
38731: PUSH
38732: LD_INT 0
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 2
38741: NEG
38742: PUSH
38743: LD_INT 1
38745: NEG
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 2
38753: NEG
38754: PUSH
38755: LD_INT 2
38757: NEG
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 2
38765: NEG
38766: PUSH
38767: LD_INT 3
38769: NEG
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 1
38777: NEG
38778: PUSH
38779: LD_INT 3
38781: NEG
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 1
38789: PUSH
38790: LD_INT 2
38792: NEG
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 2
38800: PUSH
38801: LD_INT 1
38803: NEG
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38834: LD_ADDR_VAR 0 24
38838: PUSH
38839: LD_INT 0
38841: PUSH
38842: LD_INT 0
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 0
38851: PUSH
38852: LD_INT 1
38854: NEG
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 1
38862: PUSH
38863: LD_INT 0
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 1
38872: PUSH
38873: LD_INT 1
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 0
38882: PUSH
38883: LD_INT 1
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 1
38892: NEG
38893: PUSH
38894: LD_INT 0
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 1
38903: NEG
38904: PUSH
38905: LD_INT 1
38907: NEG
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 1
38915: NEG
38916: PUSH
38917: LD_INT 2
38919: NEG
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 0
38927: PUSH
38928: LD_INT 2
38930: NEG
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 1
38938: PUSH
38939: LD_INT 1
38941: NEG
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 2
38949: PUSH
38950: LD_INT 0
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 2
38959: PUSH
38960: LD_INT 1
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 2
38969: PUSH
38970: LD_INT 2
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 1
38979: PUSH
38980: LD_INT 2
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 0
38989: PUSH
38990: LD_INT 2
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 1
38999: NEG
39000: PUSH
39001: LD_INT 1
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 2
39010: NEG
39011: PUSH
39012: LD_INT 0
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 2
39021: NEG
39022: PUSH
39023: LD_INT 1
39025: NEG
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 2
39033: NEG
39034: PUSH
39035: LD_INT 2
39037: NEG
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 1
39045: PUSH
39046: LD_INT 2
39048: NEG
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 2
39056: PUSH
39057: LD_INT 1
39059: NEG
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 3
39067: PUSH
39068: LD_INT 1
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 3
39077: PUSH
39078: LD_INT 2
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39110: LD_ADDR_VAR 0 25
39114: PUSH
39115: LD_INT 0
39117: PUSH
39118: LD_INT 0
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 0
39127: PUSH
39128: LD_INT 1
39130: NEG
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 1
39138: PUSH
39139: LD_INT 0
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 1
39148: PUSH
39149: LD_INT 1
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 0
39158: PUSH
39159: LD_INT 1
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 1
39168: NEG
39169: PUSH
39170: LD_INT 0
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 1
39179: NEG
39180: PUSH
39181: LD_INT 1
39183: NEG
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 1
39191: NEG
39192: PUSH
39193: LD_INT 2
39195: NEG
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 0
39203: PUSH
39204: LD_INT 2
39206: NEG
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 1
39214: PUSH
39215: LD_INT 1
39217: NEG
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 2
39225: PUSH
39226: LD_INT 0
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 2
39235: PUSH
39236: LD_INT 1
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 2
39245: PUSH
39246: LD_INT 2
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 1
39255: PUSH
39256: LD_INT 2
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: LD_INT 2
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: LD_INT 1
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 2
39286: NEG
39287: PUSH
39288: LD_INT 0
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 2
39297: NEG
39298: PUSH
39299: LD_INT 1
39301: NEG
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 2
39309: NEG
39310: PUSH
39311: LD_INT 2
39313: NEG
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 3
39321: PUSH
39322: LD_INT 1
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 3
39331: PUSH
39332: LD_INT 2
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 2
39341: PUSH
39342: LD_INT 3
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 1
39351: PUSH
39352: LD_INT 3
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39384: LD_ADDR_VAR 0 26
39388: PUSH
39389: LD_INT 0
39391: PUSH
39392: LD_INT 0
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 0
39401: PUSH
39402: LD_INT 1
39404: NEG
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 1
39412: PUSH
39413: LD_INT 0
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 1
39422: PUSH
39423: LD_INT 1
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 0
39432: PUSH
39433: LD_INT 1
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 1
39442: NEG
39443: PUSH
39444: LD_INT 0
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 1
39453: NEG
39454: PUSH
39455: LD_INT 1
39457: NEG
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 1
39465: NEG
39466: PUSH
39467: LD_INT 2
39469: NEG
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 0
39477: PUSH
39478: LD_INT 2
39480: NEG
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 1
39488: PUSH
39489: LD_INT 1
39491: NEG
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 2
39499: PUSH
39500: LD_INT 0
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 2
39509: PUSH
39510: LD_INT 1
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 2
39519: PUSH
39520: LD_INT 2
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 1
39529: PUSH
39530: LD_INT 2
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 0
39539: PUSH
39540: LD_INT 2
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 1
39549: NEG
39550: PUSH
39551: LD_INT 1
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 2
39560: NEG
39561: PUSH
39562: LD_INT 0
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 2
39571: NEG
39572: PUSH
39573: LD_INT 1
39575: NEG
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 2
39583: NEG
39584: PUSH
39585: LD_INT 2
39587: NEG
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 2
39595: PUSH
39596: LD_INT 3
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 1
39605: PUSH
39606: LD_INT 3
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 1
39615: NEG
39616: PUSH
39617: LD_INT 2
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 2
39626: NEG
39627: PUSH
39628: LD_INT 1
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39660: LD_ADDR_VAR 0 27
39664: PUSH
39665: LD_INT 0
39667: PUSH
39668: LD_INT 0
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 0
39677: PUSH
39678: LD_INT 1
39680: NEG
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 1
39688: PUSH
39689: LD_INT 0
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 1
39698: PUSH
39699: LD_INT 1
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 0
39708: PUSH
39709: LD_INT 1
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 1
39718: NEG
39719: PUSH
39720: LD_INT 0
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 1
39729: NEG
39730: PUSH
39731: LD_INT 1
39733: NEG
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 1
39741: NEG
39742: PUSH
39743: LD_INT 2
39745: NEG
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 0
39753: PUSH
39754: LD_INT 2
39756: NEG
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 1
39764: PUSH
39765: LD_INT 1
39767: NEG
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 2
39775: PUSH
39776: LD_INT 0
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 2
39785: PUSH
39786: LD_INT 1
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 2
39795: PUSH
39796: LD_INT 2
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 1
39805: PUSH
39806: LD_INT 2
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 0
39815: PUSH
39816: LD_INT 2
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 1
39825: NEG
39826: PUSH
39827: LD_INT 1
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 2
39836: NEG
39837: PUSH
39838: LD_INT 0
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 2
39847: NEG
39848: PUSH
39849: LD_INT 1
39851: NEG
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 2
39859: NEG
39860: PUSH
39861: LD_INT 2
39863: NEG
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 1
39871: NEG
39872: PUSH
39873: LD_INT 2
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 2
39882: NEG
39883: PUSH
39884: LD_INT 1
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 3
39893: NEG
39894: PUSH
39895: LD_INT 1
39897: NEG
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 3
39905: NEG
39906: PUSH
39907: LD_INT 2
39909: NEG
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39940: LD_ADDR_VAR 0 28
39944: PUSH
39945: LD_INT 0
39947: PUSH
39948: LD_INT 0
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 0
39957: PUSH
39958: LD_INT 1
39960: NEG
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 1
39968: PUSH
39969: LD_INT 0
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 1
39978: PUSH
39979: LD_INT 1
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 0
39988: PUSH
39989: LD_INT 1
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 1
39998: NEG
39999: PUSH
40000: LD_INT 0
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 1
40009: NEG
40010: PUSH
40011: LD_INT 1
40013: NEG
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 1
40021: NEG
40022: PUSH
40023: LD_INT 2
40025: NEG
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 0
40033: PUSH
40034: LD_INT 2
40036: NEG
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 1
40044: PUSH
40045: LD_INT 1
40047: NEG
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 2
40055: PUSH
40056: LD_INT 0
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 2
40065: PUSH
40066: LD_INT 1
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 2
40075: PUSH
40076: LD_INT 2
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 1
40085: PUSH
40086: LD_INT 2
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 0
40095: PUSH
40096: LD_INT 2
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 1
40105: NEG
40106: PUSH
40107: LD_INT 1
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 2
40116: NEG
40117: PUSH
40118: LD_INT 0
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 2
40127: NEG
40128: PUSH
40129: LD_INT 1
40131: NEG
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 2
40139: NEG
40140: PUSH
40141: LD_INT 2
40143: NEG
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 2
40151: NEG
40152: PUSH
40153: LD_INT 3
40155: NEG
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 1
40163: NEG
40164: PUSH
40165: LD_INT 3
40167: NEG
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 3
40175: NEG
40176: PUSH
40177: LD_INT 1
40179: NEG
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 3
40187: NEG
40188: PUSH
40189: LD_INT 2
40191: NEG
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40222: LD_ADDR_VAR 0 29
40226: PUSH
40227: LD_INT 0
40229: PUSH
40230: LD_INT 0
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 0
40239: PUSH
40240: LD_INT 1
40242: NEG
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 1
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 1
40260: PUSH
40261: LD_INT 1
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 0
40270: PUSH
40271: LD_INT 1
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 1
40280: NEG
40281: PUSH
40282: LD_INT 0
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 1
40291: NEG
40292: PUSH
40293: LD_INT 1
40295: NEG
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 1
40303: NEG
40304: PUSH
40305: LD_INT 2
40307: NEG
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 0
40315: PUSH
40316: LD_INT 2
40318: NEG
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 1
40326: PUSH
40327: LD_INT 1
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 2
40337: PUSH
40338: LD_INT 0
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 2
40347: PUSH
40348: LD_INT 1
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 1
40357: PUSH
40358: LD_INT 2
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 0
40367: PUSH
40368: LD_INT 2
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 1
40377: NEG
40378: PUSH
40379: LD_INT 1
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 2
40388: NEG
40389: PUSH
40390: LD_INT 1
40392: NEG
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 2
40400: NEG
40401: PUSH
40402: LD_INT 2
40404: NEG
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 2
40412: NEG
40413: PUSH
40414: LD_INT 3
40416: NEG
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 2
40424: PUSH
40425: LD_INT 1
40427: NEG
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 3
40435: PUSH
40436: LD_INT 1
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 1
40445: PUSH
40446: LD_INT 3
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 1
40455: NEG
40456: PUSH
40457: LD_INT 2
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 3
40466: NEG
40467: PUSH
40468: LD_INT 2
40470: NEG
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40501: LD_ADDR_VAR 0 30
40505: PUSH
40506: LD_INT 0
40508: PUSH
40509: LD_INT 0
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 0
40518: PUSH
40519: LD_INT 1
40521: NEG
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 1
40529: PUSH
40530: LD_INT 0
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 1
40539: PUSH
40540: LD_INT 1
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 0
40549: PUSH
40550: LD_INT 1
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 1
40559: NEG
40560: PUSH
40561: LD_INT 0
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 1
40570: NEG
40571: PUSH
40572: LD_INT 1
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 1
40582: NEG
40583: PUSH
40584: LD_INT 2
40586: NEG
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 0
40594: PUSH
40595: LD_INT 2
40597: NEG
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 1
40605: PUSH
40606: LD_INT 1
40608: NEG
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 2
40616: PUSH
40617: LD_INT 0
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 2
40626: PUSH
40627: LD_INT 1
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 2
40636: PUSH
40637: LD_INT 2
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 1
40646: PUSH
40647: LD_INT 2
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 1
40656: NEG
40657: PUSH
40658: LD_INT 1
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 2
40667: NEG
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 2
40678: NEG
40679: PUSH
40680: LD_INT 1
40682: NEG
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 1
40690: NEG
40691: PUSH
40692: LD_INT 3
40694: NEG
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 1
40702: PUSH
40703: LD_INT 2
40705: NEG
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 3
40713: PUSH
40714: LD_INT 2
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 2
40723: PUSH
40724: LD_INT 3
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 2
40733: NEG
40734: PUSH
40735: LD_INT 1
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 3
40744: NEG
40745: PUSH
40746: LD_INT 1
40748: NEG
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40779: LD_ADDR_VAR 0 31
40783: PUSH
40784: LD_INT 0
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 0
40796: PUSH
40797: LD_INT 1
40799: NEG
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 1
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 1
40817: PUSH
40818: LD_INT 1
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 0
40827: PUSH
40828: LD_INT 1
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 1
40837: NEG
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 1
40848: NEG
40849: PUSH
40850: LD_INT 1
40852: NEG
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 1
40860: NEG
40861: PUSH
40862: LD_INT 2
40864: NEG
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 1
40872: PUSH
40873: LD_INT 1
40875: NEG
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 2
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 2
40893: PUSH
40894: LD_INT 1
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 2
40903: PUSH
40904: LD_INT 2
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 1
40913: PUSH
40914: LD_INT 2
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 0
40923: PUSH
40924: LD_INT 2
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 1
40933: NEG
40934: PUSH
40935: LD_INT 1
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 2
40944: NEG
40945: PUSH
40946: LD_INT 1
40948: NEG
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 2
40956: NEG
40957: PUSH
40958: LD_INT 2
40960: NEG
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 2
40968: NEG
40969: PUSH
40970: LD_INT 3
40972: NEG
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 2
40980: PUSH
40981: LD_INT 1
40983: NEG
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 3
40991: PUSH
40992: LD_INT 1
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 1
41001: PUSH
41002: LD_INT 3
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 1
41011: NEG
41012: PUSH
41013: LD_INT 2
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 3
41022: NEG
41023: PUSH
41024: LD_INT 2
41026: NEG
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41057: LD_ADDR_VAR 0 32
41061: PUSH
41062: LD_INT 0
41064: PUSH
41065: LD_INT 0
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 0
41074: PUSH
41075: LD_INT 1
41077: NEG
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 1
41085: PUSH
41086: LD_INT 0
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 1
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 0
41105: PUSH
41106: LD_INT 1
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 1
41115: NEG
41116: PUSH
41117: LD_INT 0
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 1
41126: NEG
41127: PUSH
41128: LD_INT 1
41130: NEG
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 1
41138: NEG
41139: PUSH
41140: LD_INT 2
41142: NEG
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: LD_INT 2
41153: NEG
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 1
41161: PUSH
41162: LD_INT 1
41164: NEG
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 2
41172: PUSH
41173: LD_INT 1
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 2
41182: PUSH
41183: LD_INT 2
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 1
41192: PUSH
41193: LD_INT 2
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 0
41202: PUSH
41203: LD_INT 2
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 1
41212: NEG
41213: PUSH
41214: LD_INT 1
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 2
41223: NEG
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 2
41234: NEG
41235: PUSH
41236: LD_INT 1
41238: NEG
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 1
41246: NEG
41247: PUSH
41248: LD_INT 3
41250: NEG
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 1
41258: PUSH
41259: LD_INT 2
41261: NEG
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 3
41269: PUSH
41270: LD_INT 2
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 2
41279: PUSH
41280: LD_INT 3
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 2
41289: NEG
41290: PUSH
41291: LD_INT 1
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 3
41300: NEG
41301: PUSH
41302: LD_INT 1
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41335: LD_ADDR_VAR 0 33
41339: PUSH
41340: LD_INT 0
41342: PUSH
41343: LD_INT 0
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 0
41352: PUSH
41353: LD_INT 1
41355: NEG
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: PUSH
41364: LD_INT 0
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 1
41373: PUSH
41374: LD_INT 1
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 0
41383: PUSH
41384: LD_INT 1
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 1
41393: NEG
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 1
41404: NEG
41405: PUSH
41406: LD_INT 1
41408: NEG
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 1
41416: NEG
41417: PUSH
41418: LD_INT 2
41420: NEG
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 1
41428: PUSH
41429: LD_INT 1
41431: NEG
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 2
41439: PUSH
41440: LD_INT 0
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 2
41449: PUSH
41450: LD_INT 1
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 1
41459: PUSH
41460: LD_INT 2
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 0
41469: PUSH
41470: LD_INT 2
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 1
41479: NEG
41480: PUSH
41481: LD_INT 1
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 2
41490: NEG
41491: PUSH
41492: LD_INT 0
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 2
41501: NEG
41502: PUSH
41503: LD_INT 1
41505: NEG
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 2
41513: NEG
41514: PUSH
41515: LD_INT 2
41517: NEG
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 2
41525: NEG
41526: PUSH
41527: LD_INT 3
41529: NEG
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 2
41537: PUSH
41538: LD_INT 1
41540: NEG
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 3
41548: PUSH
41549: LD_INT 1
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 1
41558: PUSH
41559: LD_INT 3
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 1
41568: NEG
41569: PUSH
41570: LD_INT 2
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 3
41579: NEG
41580: PUSH
41581: LD_INT 2
41583: NEG
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41614: LD_ADDR_VAR 0 34
41618: PUSH
41619: LD_INT 0
41621: PUSH
41622: LD_INT 0
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 0
41631: PUSH
41632: LD_INT 1
41634: NEG
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 1
41642: PUSH
41643: LD_INT 0
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 1
41652: PUSH
41653: LD_INT 1
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 0
41662: PUSH
41663: LD_INT 1
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 1
41672: NEG
41673: PUSH
41674: LD_INT 0
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 1
41683: NEG
41684: PUSH
41685: LD_INT 1
41687: NEG
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 1
41695: NEG
41696: PUSH
41697: LD_INT 2
41699: NEG
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 0
41707: PUSH
41708: LD_INT 2
41710: NEG
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 1
41718: PUSH
41719: LD_INT 1
41721: NEG
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 2
41729: PUSH
41730: LD_INT 1
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 2
41739: PUSH
41740: LD_INT 2
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 1
41749: PUSH
41750: LD_INT 2
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 1
41759: NEG
41760: PUSH
41761: LD_INT 1
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 2
41770: NEG
41771: PUSH
41772: LD_INT 0
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 2
41781: NEG
41782: PUSH
41783: LD_INT 1
41785: NEG
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 2
41793: NEG
41794: PUSH
41795: LD_INT 2
41797: NEG
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 1
41805: NEG
41806: PUSH
41807: LD_INT 3
41809: NEG
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 1
41817: PUSH
41818: LD_INT 2
41820: NEG
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 3
41828: PUSH
41829: LD_INT 2
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 2
41838: PUSH
41839: LD_INT 3
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 2
41848: NEG
41849: PUSH
41850: LD_INT 1
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 3
41859: NEG
41860: PUSH
41861: LD_INT 1
41863: NEG
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41894: LD_ADDR_VAR 0 35
41898: PUSH
41899: LD_INT 0
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 0
41911: PUSH
41912: LD_INT 1
41914: NEG
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 1
41922: PUSH
41923: LD_INT 0
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 1
41932: PUSH
41933: LD_INT 1
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 0
41942: PUSH
41943: LD_INT 1
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 1
41952: NEG
41953: PUSH
41954: LD_INT 0
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 1
41963: NEG
41964: PUSH
41965: LD_INT 1
41967: NEG
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 2
41975: PUSH
41976: LD_INT 1
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 2
41985: NEG
41986: PUSH
41987: LD_INT 1
41989: NEG
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42006: LD_ADDR_VAR 0 36
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: LD_INT 0
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 0
42023: PUSH
42024: LD_INT 1
42026: NEG
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 1
42034: PUSH
42035: LD_INT 0
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 1
42044: PUSH
42045: LD_INT 1
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 0
42054: PUSH
42055: LD_INT 1
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 1
42064: NEG
42065: PUSH
42066: LD_INT 0
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 1
42075: NEG
42076: PUSH
42077: LD_INT 1
42079: NEG
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 1
42087: NEG
42088: PUSH
42089: LD_INT 2
42091: NEG
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 1
42099: PUSH
42100: LD_INT 2
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42118: LD_ADDR_VAR 0 37
42122: PUSH
42123: LD_INT 0
42125: PUSH
42126: LD_INT 0
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 0
42135: PUSH
42136: LD_INT 1
42138: NEG
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 1
42146: PUSH
42147: LD_INT 0
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: LD_INT 1
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 0
42166: PUSH
42167: LD_INT 1
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 1
42176: NEG
42177: PUSH
42178: LD_INT 0
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 1
42187: NEG
42188: PUSH
42189: LD_INT 1
42191: NEG
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 1
42199: PUSH
42200: LD_INT 1
42202: NEG
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 1
42210: NEG
42211: PUSH
42212: LD_INT 1
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42230: LD_ADDR_VAR 0 38
42234: PUSH
42235: LD_INT 0
42237: PUSH
42238: LD_INT 0
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 0
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 1
42258: PUSH
42259: LD_INT 0
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 1
42268: PUSH
42269: LD_INT 1
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 0
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 1
42288: NEG
42289: PUSH
42290: LD_INT 0
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 1
42299: NEG
42300: PUSH
42301: LD_INT 1
42303: NEG
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 2
42311: PUSH
42312: LD_INT 1
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 2
42321: NEG
42322: PUSH
42323: LD_INT 1
42325: NEG
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42342: LD_ADDR_VAR 0 39
42346: PUSH
42347: LD_INT 0
42349: PUSH
42350: LD_INT 0
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 0
42359: PUSH
42360: LD_INT 1
42362: NEG
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 1
42370: PUSH
42371: LD_INT 0
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 1
42380: PUSH
42381: LD_INT 1
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 0
42390: PUSH
42391: LD_INT 1
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 1
42400: NEG
42401: PUSH
42402: LD_INT 0
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 1
42411: NEG
42412: PUSH
42413: LD_INT 1
42415: NEG
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 1
42423: NEG
42424: PUSH
42425: LD_INT 2
42427: NEG
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: PUSH
42436: LD_INT 2
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42454: LD_ADDR_VAR 0 40
42458: PUSH
42459: LD_INT 0
42461: PUSH
42462: LD_INT 0
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: LD_INT 1
42474: NEG
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 1
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 1
42492: PUSH
42493: LD_INT 1
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 0
42502: PUSH
42503: LD_INT 1
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 1
42512: NEG
42513: PUSH
42514: LD_INT 0
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: NEG
42524: PUSH
42525: LD_INT 1
42527: NEG
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 1
42535: PUSH
42536: LD_INT 1
42538: NEG
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 1
42546: NEG
42547: PUSH
42548: LD_INT 1
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42566: LD_ADDR_VAR 0 41
42570: PUSH
42571: LD_INT 0
42573: PUSH
42574: LD_INT 0
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 0
42583: PUSH
42584: LD_INT 1
42586: NEG
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 1
42594: PUSH
42595: LD_INT 0
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 1
42604: PUSH
42605: LD_INT 1
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 0
42614: PUSH
42615: LD_INT 1
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 1
42624: NEG
42625: PUSH
42626: LD_INT 0
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 1
42635: NEG
42636: PUSH
42637: LD_INT 1
42639: NEG
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 1
42647: NEG
42648: PUSH
42649: LD_INT 2
42651: NEG
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: LD_INT 1
42662: NEG
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 2
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 2
42680: PUSH
42681: LD_INT 1
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 2
42690: PUSH
42691: LD_INT 2
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 1
42700: PUSH
42701: LD_INT 2
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 1
42710: NEG
42711: PUSH
42712: LD_INT 1
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 2
42721: NEG
42722: PUSH
42723: LD_INT 0
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 2
42732: NEG
42733: PUSH
42734: LD_INT 1
42736: NEG
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 2
42744: NEG
42745: PUSH
42746: LD_INT 2
42748: NEG
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 2
42756: NEG
42757: PUSH
42758: LD_INT 3
42760: NEG
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 2
42768: PUSH
42769: LD_INT 1
42771: NEG
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 3
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 3
42789: PUSH
42790: LD_INT 1
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 3
42799: PUSH
42800: LD_INT 2
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 3
42809: PUSH
42810: LD_INT 3
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 2
42819: PUSH
42820: LD_INT 3
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 2
42829: NEG
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 3
42840: NEG
42841: PUSH
42842: LD_INT 0
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 3
42851: NEG
42852: PUSH
42853: LD_INT 1
42855: NEG
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 3
42863: NEG
42864: PUSH
42865: LD_INT 2
42867: NEG
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 3
42875: NEG
42876: PUSH
42877: LD_INT 3
42879: NEG
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42916: LD_ADDR_VAR 0 42
42920: PUSH
42921: LD_INT 0
42923: PUSH
42924: LD_INT 0
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 0
42933: PUSH
42934: LD_INT 1
42936: NEG
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 1
42944: PUSH
42945: LD_INT 0
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 1
42954: PUSH
42955: LD_INT 1
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 0
42964: PUSH
42965: LD_INT 1
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 1
42974: NEG
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 1
42985: NEG
42986: PUSH
42987: LD_INT 1
42989: NEG
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 1
42997: NEG
42998: PUSH
42999: LD_INT 2
43001: NEG
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 0
43009: PUSH
43010: LD_INT 2
43012: NEG
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 1
43020: PUSH
43021: LD_INT 1
43023: NEG
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 2
43031: PUSH
43032: LD_INT 1
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 2
43041: PUSH
43042: LD_INT 2
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 1
43051: PUSH
43052: LD_INT 2
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 0
43061: PUSH
43062: LD_INT 2
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 1
43071: NEG
43072: PUSH
43073: LD_INT 1
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 2
43082: NEG
43083: PUSH
43084: LD_INT 1
43086: NEG
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 2
43094: NEG
43095: PUSH
43096: LD_INT 2
43098: NEG
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 2
43106: NEG
43107: PUSH
43108: LD_INT 3
43110: NEG
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 1
43118: NEG
43119: PUSH
43120: LD_INT 3
43122: NEG
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 0
43130: PUSH
43131: LD_INT 3
43133: NEG
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 1
43141: PUSH
43142: LD_INT 2
43144: NEG
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 3
43152: PUSH
43153: LD_INT 2
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 3
43162: PUSH
43163: LD_INT 3
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 2
43172: PUSH
43173: LD_INT 3
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 1
43182: PUSH
43183: LD_INT 3
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 0
43192: PUSH
43193: LD_INT 3
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 1
43202: NEG
43203: PUSH
43204: LD_INT 2
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 3
43213: NEG
43214: PUSH
43215: LD_INT 2
43217: NEG
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 3
43225: NEG
43226: PUSH
43227: LD_INT 3
43229: NEG
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43266: LD_ADDR_VAR 0 43
43270: PUSH
43271: LD_INT 0
43273: PUSH
43274: LD_INT 0
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 0
43283: PUSH
43284: LD_INT 1
43286: NEG
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 1
43294: PUSH
43295: LD_INT 0
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 1
43304: PUSH
43305: LD_INT 1
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 0
43314: PUSH
43315: LD_INT 1
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 1
43324: NEG
43325: PUSH
43326: LD_INT 0
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 1
43335: NEG
43336: PUSH
43337: LD_INT 1
43339: NEG
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 1
43347: NEG
43348: PUSH
43349: LD_INT 2
43351: NEG
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: LD_INT 2
43362: NEG
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 1
43370: PUSH
43371: LD_INT 1
43373: NEG
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 2
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 2
43391: PUSH
43392: LD_INT 1
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 1
43401: PUSH
43402: LD_INT 2
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 0
43411: PUSH
43412: LD_INT 2
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 1
43421: NEG
43422: PUSH
43423: LD_INT 1
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 2
43432: NEG
43433: PUSH
43434: LD_INT 0
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 2
43443: NEG
43444: PUSH
43445: LD_INT 1
43447: NEG
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 1
43455: NEG
43456: PUSH
43457: LD_INT 3
43459: NEG
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 0
43467: PUSH
43468: LD_INT 3
43470: NEG
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 1
43478: PUSH
43479: LD_INT 2
43481: NEG
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 2
43489: PUSH
43490: LD_INT 1
43492: NEG
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 3
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 3
43510: PUSH
43511: LD_INT 1
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 1
43520: PUSH
43521: LD_INT 3
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 0
43530: PUSH
43531: LD_INT 3
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 1
43540: NEG
43541: PUSH
43542: LD_INT 2
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 2
43551: NEG
43552: PUSH
43553: LD_INT 1
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 3
43562: NEG
43563: PUSH
43564: LD_INT 0
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 3
43573: NEG
43574: PUSH
43575: LD_INT 1
43577: NEG
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43614: LD_ADDR_VAR 0 44
43618: PUSH
43619: LD_INT 0
43621: PUSH
43622: LD_INT 0
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 0
43631: PUSH
43632: LD_INT 1
43634: NEG
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 1
43642: PUSH
43643: LD_INT 0
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 1
43652: PUSH
43653: LD_INT 1
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 0
43662: PUSH
43663: LD_INT 1
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 1
43672: NEG
43673: PUSH
43674: LD_INT 0
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 1
43683: NEG
43684: PUSH
43685: LD_INT 1
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 1
43695: NEG
43696: PUSH
43697: LD_INT 2
43699: NEG
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 1
43707: PUSH
43708: LD_INT 1
43710: NEG
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 2
43718: PUSH
43719: LD_INT 0
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 2
43728: PUSH
43729: LD_INT 1
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 2
43738: PUSH
43739: LD_INT 2
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 1
43748: PUSH
43749: LD_INT 2
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: LD_INT 1
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 2
43769: NEG
43770: PUSH
43771: LD_INT 0
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 2
43780: NEG
43781: PUSH
43782: LD_INT 1
43784: NEG
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 2
43792: NEG
43793: PUSH
43794: LD_INT 2
43796: NEG
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 2
43804: NEG
43805: PUSH
43806: LD_INT 3
43808: NEG
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 2
43816: PUSH
43817: LD_INT 1
43819: NEG
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 3
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 3
43837: PUSH
43838: LD_INT 1
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 3
43847: PUSH
43848: LD_INT 2
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 3
43857: PUSH
43858: LD_INT 3
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 2
43867: PUSH
43868: LD_INT 3
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 2
43877: NEG
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 3
43888: NEG
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 3
43899: NEG
43900: PUSH
43901: LD_INT 1
43903: NEG
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 3
43911: NEG
43912: PUSH
43913: LD_INT 2
43915: NEG
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 3
43923: NEG
43924: PUSH
43925: LD_INT 3
43927: NEG
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43964: LD_ADDR_VAR 0 45
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 0
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: NEG
44023: PUSH
44024: LD_INT 0
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: NEG
44034: PUSH
44035: LD_INT 1
44037: NEG
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 1
44045: NEG
44046: PUSH
44047: LD_INT 2
44049: NEG
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 0
44057: PUSH
44058: LD_INT 2
44060: NEG
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 2
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 2
44089: PUSH
44090: LD_INT 2
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: PUSH
44100: LD_INT 2
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 0
44109: PUSH
44110: LD_INT 2
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 1
44119: NEG
44120: PUSH
44121: LD_INT 1
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 2
44130: NEG
44131: PUSH
44132: LD_INT 1
44134: NEG
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 2
44142: NEG
44143: PUSH
44144: LD_INT 2
44146: NEG
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 2
44154: NEG
44155: PUSH
44156: LD_INT 3
44158: NEG
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 1
44166: NEG
44167: PUSH
44168: LD_INT 3
44170: NEG
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 0
44178: PUSH
44179: LD_INT 3
44181: NEG
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 1
44189: PUSH
44190: LD_INT 2
44192: NEG
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 3
44200: PUSH
44201: LD_INT 2
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 3
44210: PUSH
44211: LD_INT 3
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 2
44220: PUSH
44221: LD_INT 3
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 1
44230: PUSH
44231: LD_INT 3
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 0
44240: PUSH
44241: LD_INT 3
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 1
44250: NEG
44251: PUSH
44252: LD_INT 2
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 3
44261: NEG
44262: PUSH
44263: LD_INT 2
44265: NEG
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 3
44273: NEG
44274: PUSH
44275: LD_INT 3
44277: NEG
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44314: LD_ADDR_VAR 0 46
44318: PUSH
44319: LD_INT 0
44321: PUSH
44322: LD_INT 0
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: LD_INT 1
44334: NEG
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: LD_INT 1
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: LD_INT 1
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: NEG
44373: PUSH
44374: LD_INT 0
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 1
44383: NEG
44384: PUSH
44385: LD_INT 1
44387: NEG
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 1
44395: NEG
44396: PUSH
44397: LD_INT 2
44399: NEG
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: LD_INT 2
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 1
44418: PUSH
44419: LD_INT 1
44421: NEG
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 2
44429: PUSH
44430: LD_INT 0
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 2
44439: PUSH
44440: LD_INT 1
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: LD_INT 2
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: LD_INT 2
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 1
44469: NEG
44470: PUSH
44471: LD_INT 1
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 2
44480: NEG
44481: PUSH
44482: LD_INT 0
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 2
44491: NEG
44492: PUSH
44493: LD_INT 1
44495: NEG
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 1
44503: NEG
44504: PUSH
44505: LD_INT 3
44507: NEG
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 0
44515: PUSH
44516: LD_INT 3
44518: NEG
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 1
44526: PUSH
44527: LD_INT 2
44529: NEG
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 2
44537: PUSH
44538: LD_INT 1
44540: NEG
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 3
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 3
44558: PUSH
44559: LD_INT 1
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: LD_INT 3
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: LD_INT 3
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 1
44588: NEG
44589: PUSH
44590: LD_INT 2
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 2
44599: NEG
44600: PUSH
44601: LD_INT 1
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 3
44610: NEG
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 3
44621: NEG
44622: PUSH
44623: LD_INT 1
44625: NEG
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44662: LD_ADDR_VAR 0 47
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: LD_INT 0
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 0
44679: PUSH
44680: LD_INT 1
44682: NEG
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 1
44690: PUSH
44691: LD_INT 0
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 1
44700: PUSH
44701: LD_INT 1
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: LD_INT 1
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 1
44720: NEG
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 1
44731: NEG
44732: PUSH
44733: LD_INT 1
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 1
44743: NEG
44744: PUSH
44745: LD_INT 2
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 0
44755: PUSH
44756: LD_INT 2
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 1
44766: PUSH
44767: LD_INT 1
44769: NEG
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 2
44777: NEG
44778: PUSH
44779: LD_INT 1
44781: NEG
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 2
44789: NEG
44790: PUSH
44791: LD_INT 2
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44813: LD_ADDR_VAR 0 48
44817: PUSH
44818: LD_INT 0
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: LD_INT 0
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: LD_INT 1
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 1
44882: NEG
44883: PUSH
44884: LD_INT 1
44886: NEG
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 1
44894: NEG
44895: PUSH
44896: LD_INT 2
44898: NEG
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 0
44906: PUSH
44907: LD_INT 2
44909: NEG
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 1
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 2
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 2
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44960: LD_ADDR_VAR 0 49
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 0
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 1
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: LD_INT 1
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 1
45018: NEG
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 1
45029: NEG
45030: PUSH
45031: LD_INT 1
45033: NEG
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 1
45041: PUSH
45042: LD_INT 1
45044: NEG
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 2
45052: PUSH
45053: LD_INT 0
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 2
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 2
45072: PUSH
45073: LD_INT 2
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 1
45082: PUSH
45083: LD_INT 2
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45104: LD_ADDR_VAR 0 50
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 1
45142: PUSH
45143: LD_INT 1
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 0
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 1
45162: NEG
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: LD_INT 1
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 2
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 2
45195: PUSH
45196: LD_INT 2
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: LD_INT 2
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 0
45215: PUSH
45216: LD_INT 2
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 1
45225: NEG
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45248: LD_ADDR_VAR 0 51
45252: PUSH
45253: LD_INT 0
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: LD_INT 1
45268: NEG
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 1
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 1
45286: PUSH
45287: LD_INT 1
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 0
45296: PUSH
45297: LD_INT 1
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 1
45306: NEG
45307: PUSH
45308: LD_INT 0
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 1
45317: NEG
45318: PUSH
45319: LD_INT 1
45321: NEG
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 1
45329: PUSH
45330: LD_INT 2
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: LD_INT 2
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 1
45349: NEG
45350: PUSH
45351: LD_INT 1
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 2
45360: NEG
45361: PUSH
45362: LD_INT 0
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 2
45371: NEG
45372: PUSH
45373: LD_INT 1
45375: NEG
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45395: LD_ADDR_VAR 0 52
45399: PUSH
45400: LD_INT 0
45402: PUSH
45403: LD_INT 0
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: LD_INT 1
45415: NEG
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 1
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 1
45433: PUSH
45434: LD_INT 1
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: LD_INT 1
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: NEG
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 1
45476: NEG
45477: PUSH
45478: LD_INT 2
45480: NEG
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: NEG
45489: PUSH
45490: LD_INT 1
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 2
45499: NEG
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 2
45510: NEG
45511: PUSH
45512: LD_INT 1
45514: NEG
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 2
45522: NEG
45523: PUSH
45524: LD_INT 2
45526: NEG
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45546: LD_ADDR_VAR 0 53
45550: PUSH
45551: LD_INT 0
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 0
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 1
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 1
45584: PUSH
45585: LD_INT 1
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: NEG
45605: PUSH
45606: LD_INT 0
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 1
45615: NEG
45616: PUSH
45617: LD_INT 1
45619: NEG
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 1
45627: NEG
45628: PUSH
45629: LD_INT 2
45631: NEG
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: LD_INT 2
45642: NEG
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 1
45650: PUSH
45651: LD_INT 1
45653: NEG
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 2
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 2
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 2
45681: PUSH
45682: LD_INT 2
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: PUSH
45692: LD_INT 2
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: LD_INT 2
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: LD_INT 1
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 2
45722: NEG
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 2
45733: NEG
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 2
45745: NEG
45746: PUSH
45747: LD_INT 2
45749: NEG
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45776: LD_ADDR_VAR 0 54
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 0
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 1
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 0
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 1
45834: NEG
45835: PUSH
45836: LD_INT 0
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 1
45857: NEG
45858: PUSH
45859: LD_INT 2
45861: NEG
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: LD_INT 2
45872: NEG
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 1
45880: PUSH
45881: LD_INT 1
45883: NEG
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 2
45891: PUSH
45892: LD_INT 0
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 2
45901: PUSH
45902: LD_INT 1
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 2
45911: PUSH
45912: LD_INT 2
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: LD_INT 2
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: LD_INT 2
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 2
45952: NEG
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 2
45963: NEG
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 2
45975: NEG
45976: PUSH
45977: LD_INT 2
45979: NEG
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46006: LD_ADDR_VAR 0 55
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 1
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: NEG
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 1
46075: NEG
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: NEG
46088: PUSH
46089: LD_INT 2
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 0
46099: PUSH
46100: LD_INT 2
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: LD_INT 1
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 2
46121: PUSH
46122: LD_INT 0
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 2
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 2
46141: PUSH
46142: LD_INT 2
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 1
46151: PUSH
46152: LD_INT 2
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: LD_INT 2
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: LD_INT 1
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 2
46182: NEG
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 2
46193: NEG
46194: PUSH
46195: LD_INT 1
46197: NEG
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 2
46205: NEG
46206: PUSH
46207: LD_INT 2
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46236: LD_ADDR_VAR 0 56
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: LD_INT 1
46256: NEG
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 1
46264: PUSH
46265: LD_INT 0
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: PUSH
46275: LD_INT 1
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 0
46284: PUSH
46285: LD_INT 1
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 1
46294: NEG
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 1
46305: NEG
46306: PUSH
46307: LD_INT 1
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 1
46317: NEG
46318: PUSH
46319: LD_INT 2
46321: NEG
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 0
46329: PUSH
46330: LD_INT 2
46332: NEG
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 1
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 2
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 2
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 2
46371: PUSH
46372: LD_INT 2
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 1
46381: PUSH
46382: LD_INT 2
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: LD_INT 2
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 1
46401: NEG
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 2
46412: NEG
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 2
46423: NEG
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 2
46435: NEG
46436: PUSH
46437: LD_INT 2
46439: NEG
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46466: LD_ADDR_VAR 0 57
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: LD_INT 1
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 1
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: LD_INT 1
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: LD_INT 1
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 1
46524: NEG
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: NEG
46536: PUSH
46537: LD_INT 1
46539: NEG
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 1
46547: NEG
46548: PUSH
46549: LD_INT 2
46551: NEG
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 0
46559: PUSH
46560: LD_INT 2
46562: NEG
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 1
46570: PUSH
46571: LD_INT 1
46573: NEG
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 2
46581: PUSH
46582: LD_INT 0
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 2
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 2
46601: PUSH
46602: LD_INT 2
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: LD_INT 2
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: LD_INT 2
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 1
46631: NEG
46632: PUSH
46633: LD_INT 1
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 2
46642: NEG
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 2
46653: NEG
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 2
46665: NEG
46666: PUSH
46667: LD_INT 2
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46696: LD_ADDR_VAR 0 58
46700: PUSH
46701: LD_INT 0
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 1
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: LD_INT 1
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: LD_INT 1
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 1
46754: NEG
46755: PUSH
46756: LD_INT 0
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 1
46777: NEG
46778: PUSH
46779: LD_INT 2
46781: NEG
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 0
46789: PUSH
46790: LD_INT 2
46792: NEG
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 1
46800: PUSH
46801: LD_INT 1
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 2
46811: PUSH
46812: LD_INT 0
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 2
46821: PUSH
46822: LD_INT 1
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 2
46831: PUSH
46832: LD_INT 2
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 1
46841: PUSH
46842: LD_INT 2
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 0
46851: PUSH
46852: LD_INT 2
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 1
46861: NEG
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 2
46872: NEG
46873: PUSH
46874: LD_INT 0
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 2
46883: NEG
46884: PUSH
46885: LD_INT 1
46887: NEG
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 2
46895: NEG
46896: PUSH
46897: LD_INT 2
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46926: LD_ADDR_VAR 0 59
46930: PUSH
46931: LD_INT 0
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: LD_INT 1
46946: NEG
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 1
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 1
46964: PUSH
46965: LD_INT 1
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: LD_INT 1
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 1
46984: NEG
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 1
46995: NEG
46996: PUSH
46997: LD_INT 1
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47014: LD_ADDR_VAR 0 60
47018: PUSH
47019: LD_INT 0
47021: PUSH
47022: LD_INT 0
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: LD_INT 1
47034: NEG
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 1
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 1
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 1
47072: NEG
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 1
47083: NEG
47084: PUSH
47085: LD_INT 1
47087: NEG
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47102: LD_ADDR_VAR 0 61
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: LD_INT 1
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 1
47130: PUSH
47131: LD_INT 0
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 1
47140: PUSH
47141: LD_INT 1
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: LD_INT 1
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 1
47160: NEG
47161: PUSH
47162: LD_INT 0
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 1
47171: NEG
47172: PUSH
47173: LD_INT 1
47175: NEG
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47190: LD_ADDR_VAR 0 62
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 0
47207: PUSH
47208: LD_INT 1
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: LD_INT 1
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: LD_INT 1
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: LD_INT 0
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47278: LD_ADDR_VAR 0 63
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: NEG
47337: PUSH
47338: LD_INT 0
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: LD_INT 1
47351: NEG
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47366: LD_ADDR_VAR 0 64
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: LD_INT 1
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 1
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 1
47424: NEG
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 1
47435: NEG
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: ST_TO_ADDR
// end ; 1 :
47454: GO 53351
47456: LD_INT 1
47458: DOUBLE
47459: EQUAL
47460: IFTRUE 47464
47462: GO 50087
47464: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47465: LD_ADDR_VAR 0 11
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: PUSH
47474: LD_INT 3
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: LD_INT 3
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: PUSH
47496: LD_INT 2
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: LIST
47508: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47509: LD_ADDR_VAR 0 12
47513: PUSH
47514: LD_INT 2
47516: PUSH
47517: LD_INT 1
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 3
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 3
47537: PUSH
47538: LD_INT 1
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: LIST
47549: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47550: LD_ADDR_VAR 0 13
47554: PUSH
47555: LD_INT 3
47557: PUSH
47558: LD_INT 2
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 3
47567: PUSH
47568: LD_INT 3
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 2
47577: PUSH
47578: LD_INT 3
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: LIST
47589: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47590: LD_ADDR_VAR 0 14
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: LD_INT 3
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: LD_INT 3
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 1
47617: NEG
47618: PUSH
47619: LD_INT 2
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: LIST
47630: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47631: LD_ADDR_VAR 0 15
47635: PUSH
47636: LD_INT 2
47638: NEG
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 3
47649: NEG
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 3
47660: NEG
47661: PUSH
47662: LD_INT 1
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: LIST
47674: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47675: LD_ADDR_VAR 0 16
47679: PUSH
47680: LD_INT 2
47682: NEG
47683: PUSH
47684: LD_INT 3
47686: NEG
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 3
47694: NEG
47695: PUSH
47696: LD_INT 2
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 3
47706: NEG
47707: PUSH
47708: LD_INT 3
47710: NEG
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: LIST
47720: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47721: LD_ADDR_VAR 0 17
47725: PUSH
47726: LD_INT 1
47728: NEG
47729: PUSH
47730: LD_INT 3
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: LD_INT 3
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 1
47751: PUSH
47752: LD_INT 2
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: LIST
47764: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47765: LD_ADDR_VAR 0 18
47769: PUSH
47770: LD_INT 2
47772: PUSH
47773: LD_INT 1
47775: NEG
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 3
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 3
47793: PUSH
47794: LD_INT 1
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: LIST
47805: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47806: LD_ADDR_VAR 0 19
47810: PUSH
47811: LD_INT 3
47813: PUSH
47814: LD_INT 2
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 3
47823: PUSH
47824: LD_INT 3
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 2
47833: PUSH
47834: LD_INT 3
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: LIST
47845: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47846: LD_ADDR_VAR 0 20
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: LD_INT 3
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 0
47863: PUSH
47864: LD_INT 3
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: LD_INT 2
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: LIST
47886: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47887: LD_ADDR_VAR 0 21
47891: PUSH
47892: LD_INT 2
47894: NEG
47895: PUSH
47896: LD_INT 1
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 3
47905: NEG
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 3
47916: NEG
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: LIST
47930: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47931: LD_ADDR_VAR 0 22
47935: PUSH
47936: LD_INT 2
47938: NEG
47939: PUSH
47940: LD_INT 3
47942: NEG
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 3
47950: NEG
47951: PUSH
47952: LD_INT 2
47954: NEG
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 3
47962: NEG
47963: PUSH
47964: LD_INT 3
47966: NEG
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: LIST
47976: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47977: LD_ADDR_VAR 0 23
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: LD_INT 3
47987: NEG
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 1
47995: NEG
47996: PUSH
47997: LD_INT 4
47999: NEG
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: PUSH
48008: LD_INT 3
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: LIST
48020: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48021: LD_ADDR_VAR 0 24
48025: PUSH
48026: LD_INT 3
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 3
48038: PUSH
48039: LD_INT 1
48041: NEG
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 4
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: LIST
48061: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48062: LD_ADDR_VAR 0 25
48066: PUSH
48067: LD_INT 3
48069: PUSH
48070: LD_INT 3
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 4
48079: PUSH
48080: LD_INT 3
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 3
48089: PUSH
48090: LD_INT 4
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: LIST
48101: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48102: LD_ADDR_VAR 0 26
48106: PUSH
48107: LD_INT 0
48109: PUSH
48110: LD_INT 3
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 1
48119: PUSH
48120: LD_INT 4
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: LD_INT 3
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: LIST
48142: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48143: LD_ADDR_VAR 0 27
48147: PUSH
48148: LD_INT 3
48150: NEG
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 3
48161: NEG
48162: PUSH
48163: LD_INT 1
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 4
48172: NEG
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: LIST
48186: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48187: LD_ADDR_VAR 0 28
48191: PUSH
48192: LD_INT 3
48194: NEG
48195: PUSH
48196: LD_INT 3
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 3
48206: NEG
48207: PUSH
48208: LD_INT 4
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 4
48218: NEG
48219: PUSH
48220: LD_INT 3
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: LIST
48232: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48233: LD_ADDR_VAR 0 29
48237: PUSH
48238: LD_INT 1
48240: NEG
48241: PUSH
48242: LD_INT 3
48244: NEG
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: LD_INT 3
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: LD_INT 2
48266: NEG
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: LD_INT 4
48278: NEG
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 0
48286: PUSH
48287: LD_INT 4
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 1
48297: PUSH
48298: LD_INT 3
48300: NEG
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 1
48308: NEG
48309: PUSH
48310: LD_INT 5
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 0
48320: PUSH
48321: LD_INT 5
48323: NEG
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 1
48331: PUSH
48332: LD_INT 4
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: NEG
48343: PUSH
48344: LD_INT 6
48346: NEG
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: LD_INT 6
48357: NEG
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: PUSH
48366: LD_INT 5
48368: NEG
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48388: LD_ADDR_VAR 0 30
48392: PUSH
48393: LD_INT 2
48395: PUSH
48396: LD_INT 1
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 3
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 3
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 3
48426: PUSH
48427: LD_INT 1
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 4
48437: PUSH
48438: LD_INT 0
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 4
48447: PUSH
48448: LD_INT 1
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 4
48457: PUSH
48458: LD_INT 1
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 5
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 5
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 5
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 6
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 6
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48531: LD_ADDR_VAR 0 31
48535: PUSH
48536: LD_INT 3
48538: PUSH
48539: LD_INT 2
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 3
48548: PUSH
48549: LD_INT 3
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 2
48558: PUSH
48559: LD_INT 3
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 4
48568: PUSH
48569: LD_INT 3
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 4
48578: PUSH
48579: LD_INT 4
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 3
48588: PUSH
48589: LD_INT 4
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 5
48598: PUSH
48599: LD_INT 4
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 5
48608: PUSH
48609: LD_INT 5
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 4
48618: PUSH
48619: LD_INT 5
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 6
48628: PUSH
48629: LD_INT 5
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 6
48638: PUSH
48639: LD_INT 6
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 5
48648: PUSH
48649: LD_INT 6
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48670: LD_ADDR_VAR 0 32
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: LD_INT 3
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: LD_INT 3
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 1
48697: NEG
48698: PUSH
48699: LD_INT 2
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: PUSH
48709: LD_INT 4
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: LD_INT 4
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 1
48728: NEG
48729: PUSH
48730: LD_INT 3
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: LD_INT 5
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: LD_INT 5
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 1
48759: NEG
48760: PUSH
48761: LD_INT 4
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: PUSH
48771: LD_INT 6
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: LD_INT 6
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: LD_INT 5
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48813: LD_ADDR_VAR 0 33
48817: PUSH
48818: LD_INT 2
48820: NEG
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 3
48831: NEG
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 3
48842: NEG
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 3
48854: NEG
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 4
48865: NEG
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 4
48876: NEG
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 4
48888: NEG
48889: PUSH
48890: LD_INT 1
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 5
48899: NEG
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 5
48910: NEG
48911: PUSH
48912: LD_INT 1
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 5
48922: NEG
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 6
48933: NEG
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 6
48944: NEG
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48968: LD_ADDR_VAR 0 34
48972: PUSH
48973: LD_INT 2
48975: NEG
48976: PUSH
48977: LD_INT 3
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 3
48987: NEG
48988: PUSH
48989: LD_INT 2
48991: NEG
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 3
48999: NEG
49000: PUSH
49001: LD_INT 3
49003: NEG
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 3
49011: NEG
49012: PUSH
49013: LD_INT 4
49015: NEG
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 4
49023: NEG
49024: PUSH
49025: LD_INT 3
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 4
49035: NEG
49036: PUSH
49037: LD_INT 4
49039: NEG
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 4
49047: NEG
49048: PUSH
49049: LD_INT 5
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 5
49059: NEG
49060: PUSH
49061: LD_INT 4
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 5
49071: NEG
49072: PUSH
49073: LD_INT 5
49075: NEG
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 5
49083: NEG
49084: PUSH
49085: LD_INT 6
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 6
49095: NEG
49096: PUSH
49097: LD_INT 5
49099: NEG
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 6
49107: NEG
49108: PUSH
49109: LD_INT 6
49111: NEG
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49131: LD_ADDR_VAR 0 41
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: LD_INT 2
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 1
49149: NEG
49150: PUSH
49151: LD_INT 3
49153: NEG
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: LD_INT 2
49164: NEG
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: LIST
49174: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49175: LD_ADDR_VAR 0 42
49179: PUSH
49180: LD_INT 2
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 2
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 3
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: LIST
49215: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49216: LD_ADDR_VAR 0 43
49220: PUSH
49221: LD_INT 2
49223: PUSH
49224: LD_INT 2
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 3
49233: PUSH
49234: LD_INT 2
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 2
49243: PUSH
49244: LD_INT 3
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: LIST
49255: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49256: LD_ADDR_VAR 0 44
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: LD_INT 2
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 1
49273: PUSH
49274: LD_INT 3
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 1
49283: NEG
49284: PUSH
49285: LD_INT 2
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: LIST
49296: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49297: LD_ADDR_VAR 0 45
49301: PUSH
49302: LD_INT 2
49304: NEG
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 2
49315: NEG
49316: PUSH
49317: LD_INT 1
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 3
49326: NEG
49327: PUSH
49328: LD_INT 1
49330: NEG
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: LIST
49340: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49341: LD_ADDR_VAR 0 46
49345: PUSH
49346: LD_INT 2
49348: NEG
49349: PUSH
49350: LD_INT 2
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 2
49360: NEG
49361: PUSH
49362: LD_INT 3
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 3
49372: NEG
49373: PUSH
49374: LD_INT 2
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: LIST
49386: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49387: LD_ADDR_VAR 0 47
49391: PUSH
49392: LD_INT 2
49394: NEG
49395: PUSH
49396: LD_INT 3
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: NEG
49407: PUSH
49408: LD_INT 3
49410: NEG
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49420: LD_ADDR_VAR 0 48
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: LD_INT 2
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 2
49438: PUSH
49439: LD_INT 1
49441: NEG
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49451: LD_ADDR_VAR 0 49
49455: PUSH
49456: LD_INT 3
49458: PUSH
49459: LD_INT 1
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 3
49468: PUSH
49469: LD_INT 2
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49480: LD_ADDR_VAR 0 50
49484: PUSH
49485: LD_INT 2
49487: PUSH
49488: LD_INT 3
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: LD_INT 3
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49509: LD_ADDR_VAR 0 51
49513: PUSH
49514: LD_INT 1
49516: NEG
49517: PUSH
49518: LD_INT 2
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 2
49527: NEG
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49540: LD_ADDR_VAR 0 52
49544: PUSH
49545: LD_INT 3
49547: NEG
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 3
49559: NEG
49560: PUSH
49561: LD_INT 2
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49573: LD_ADDR_VAR 0 53
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: LD_INT 3
49584: NEG
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: LD_INT 3
49595: NEG
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 1
49603: PUSH
49604: LD_INT 2
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: LIST
49616: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49617: LD_ADDR_VAR 0 54
49621: PUSH
49622: LD_INT 2
49624: PUSH
49625: LD_INT 1
49627: NEG
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 3
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 3
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: LIST
49657: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49658: LD_ADDR_VAR 0 55
49662: PUSH
49663: LD_INT 3
49665: PUSH
49666: LD_INT 2
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 3
49675: PUSH
49676: LD_INT 3
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 2
49685: PUSH
49686: LD_INT 3
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: LIST
49697: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49698: LD_ADDR_VAR 0 56
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: LD_INT 3
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: LD_INT 3
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 1
49725: NEG
49726: PUSH
49727: LD_INT 2
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: LIST
49738: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49739: LD_ADDR_VAR 0 57
49743: PUSH
49744: LD_INT 2
49746: NEG
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 3
49757: NEG
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 3
49768: NEG
49769: PUSH
49770: LD_INT 1
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: LIST
49782: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49783: LD_ADDR_VAR 0 58
49787: PUSH
49788: LD_INT 2
49790: NEG
49791: PUSH
49792: LD_INT 3
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 3
49802: NEG
49803: PUSH
49804: LD_INT 2
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 3
49814: NEG
49815: PUSH
49816: LD_INT 3
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: LIST
49828: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49829: LD_ADDR_VAR 0 59
49833: PUSH
49834: LD_INT 1
49836: NEG
49837: PUSH
49838: LD_INT 2
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 0
49848: PUSH
49849: LD_INT 2
49851: NEG
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 1
49859: PUSH
49860: LD_INT 1
49862: NEG
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: LIST
49872: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49873: LD_ADDR_VAR 0 60
49877: PUSH
49878: LD_INT 1
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 2
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 2
49901: PUSH
49902: LD_INT 1
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: LIST
49913: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49914: LD_ADDR_VAR 0 61
49918: PUSH
49919: LD_INT 2
49921: PUSH
49922: LD_INT 1
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 2
49931: PUSH
49932: LD_INT 2
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 1
49941: PUSH
49942: LD_INT 2
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: LIST
49953: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49954: LD_ADDR_VAR 0 62
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: LD_INT 2
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: LD_INT 2
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: NEG
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: LIST
49994: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49995: LD_ADDR_VAR 0 63
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: LD_INT 1
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 2
50013: NEG
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 2
50024: NEG
50025: PUSH
50026: LD_INT 1
50028: NEG
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: LIST
50038: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50039: LD_ADDR_VAR 0 64
50043: PUSH
50044: LD_INT 1
50046: NEG
50047: PUSH
50048: LD_INT 2
50050: NEG
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 2
50058: NEG
50059: PUSH
50060: LD_INT 1
50062: NEG
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 2
50070: NEG
50071: PUSH
50072: LD_INT 2
50074: NEG
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: LIST
50084: ST_TO_ADDR
// end ; 2 :
50085: GO 53351
50087: LD_INT 2
50089: DOUBLE
50090: EQUAL
50091: IFTRUE 50095
50093: GO 53350
50095: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50096: LD_ADDR_VAR 0 29
50100: PUSH
50101: LD_INT 4
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 4
50113: PUSH
50114: LD_INT 1
50116: NEG
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 5
50124: PUSH
50125: LD_INT 0
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 5
50134: PUSH
50135: LD_INT 1
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 4
50144: PUSH
50145: LD_INT 1
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 3
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 3
50164: PUSH
50165: LD_INT 1
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 3
50175: PUSH
50176: LD_INT 2
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 5
50186: PUSH
50187: LD_INT 2
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 3
50196: PUSH
50197: LD_INT 3
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 3
50206: PUSH
50207: LD_INT 2
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 4
50216: PUSH
50217: LD_INT 3
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 4
50226: PUSH
50227: LD_INT 4
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 3
50236: PUSH
50237: LD_INT 4
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 2
50246: PUSH
50247: LD_INT 3
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 2
50256: PUSH
50257: LD_INT 2
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 4
50266: PUSH
50267: LD_INT 2
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 2
50276: PUSH
50277: LD_INT 4
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: LD_INT 4
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 0
50296: PUSH
50297: LD_INT 3
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: LD_INT 4
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: LD_INT 5
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: LD_INT 5
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: LD_INT 4
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 1
50347: NEG
50348: PUSH
50349: LD_INT 3
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 2
50358: PUSH
50359: LD_INT 5
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 2
50368: NEG
50369: PUSH
50370: LD_INT 3
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 3
50379: NEG
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 3
50390: NEG
50391: PUSH
50392: LD_INT 1
50394: NEG
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 2
50402: NEG
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 2
50413: NEG
50414: PUSH
50415: LD_INT 1
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 3
50424: NEG
50425: PUSH
50426: LD_INT 1
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 4
50435: NEG
50436: PUSH
50437: LD_INT 0
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 4
50446: NEG
50447: PUSH
50448: LD_INT 1
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 4
50458: NEG
50459: PUSH
50460: LD_INT 2
50462: NEG
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 2
50470: NEG
50471: PUSH
50472: LD_INT 2
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 4
50481: NEG
50482: PUSH
50483: LD_INT 4
50485: NEG
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 4
50493: NEG
50494: PUSH
50495: LD_INT 5
50497: NEG
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 3
50505: NEG
50506: PUSH
50507: LD_INT 4
50509: NEG
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 3
50517: NEG
50518: PUSH
50519: LD_INT 3
50521: NEG
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 4
50529: NEG
50530: PUSH
50531: LD_INT 3
50533: NEG
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 5
50541: NEG
50542: PUSH
50543: LD_INT 4
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 5
50553: NEG
50554: PUSH
50555: LD_INT 5
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 3
50565: NEG
50566: PUSH
50567: LD_INT 5
50569: NEG
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 5
50577: NEG
50578: PUSH
50579: LD_INT 3
50581: NEG
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50634: LD_ADDR_VAR 0 30
50638: PUSH
50639: LD_INT 4
50641: PUSH
50642: LD_INT 4
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 4
50651: PUSH
50652: LD_INT 3
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 5
50661: PUSH
50662: LD_INT 4
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 5
50671: PUSH
50672: LD_INT 5
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 4
50681: PUSH
50682: LD_INT 5
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 3
50691: PUSH
50692: LD_INT 4
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 3
50701: PUSH
50702: LD_INT 3
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 5
50711: PUSH
50712: LD_INT 3
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 3
50721: PUSH
50722: LD_INT 5
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: LD_INT 3
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 0
50741: PUSH
50742: LD_INT 2
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 1
50751: PUSH
50752: LD_INT 3
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 1
50761: PUSH
50762: LD_INT 4
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 0
50771: PUSH
50772: LD_INT 4
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 1
50781: NEG
50782: PUSH
50783: LD_INT 3
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 1
50792: NEG
50793: PUSH
50794: LD_INT 2
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 2
50803: PUSH
50804: LD_INT 4
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 2
50813: NEG
50814: PUSH
50815: LD_INT 2
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 4
50824: NEG
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 4
50835: NEG
50836: PUSH
50837: LD_INT 1
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 3
50847: NEG
50848: PUSH
50849: LD_INT 0
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 3
50858: NEG
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 4
50869: NEG
50870: PUSH
50871: LD_INT 1
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 5
50880: NEG
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 5
50891: NEG
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 5
50903: NEG
50904: PUSH
50905: LD_INT 2
50907: NEG
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 3
50915: NEG
50916: PUSH
50917: LD_INT 2
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 3
50926: NEG
50927: PUSH
50928: LD_INT 3
50930: NEG
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 3
50938: NEG
50939: PUSH
50940: LD_INT 4
50942: NEG
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 2
50950: NEG
50951: PUSH
50952: LD_INT 3
50954: NEG
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 2
50962: NEG
50963: PUSH
50964: LD_INT 2
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 3
50974: NEG
50975: PUSH
50976: LD_INT 2
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 4
50986: NEG
50987: PUSH
50988: LD_INT 3
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 4
50998: NEG
50999: PUSH
51000: LD_INT 4
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 2
51010: NEG
51011: PUSH
51012: LD_INT 4
51014: NEG
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 4
51022: NEG
51023: PUSH
51024: LD_INT 2
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: LD_INT 4
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 0
51045: PUSH
51046: LD_INT 5
51048: NEG
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: LD_INT 4
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: LD_INT 3
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: LD_INT 3
51081: NEG
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: LD_INT 4
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 1
51101: NEG
51102: PUSH
51103: LD_INT 5
51105: NEG
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 2
51113: PUSH
51114: LD_INT 3
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 2
51124: NEG
51125: PUSH
51126: LD_INT 5
51128: NEG
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51181: LD_ADDR_VAR 0 31
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: LD_INT 4
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: LD_INT 3
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 1
51208: PUSH
51209: LD_INT 4
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: LD_INT 5
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: LD_INT 5
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: LD_INT 4
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: NEG
51250: PUSH
51251: LD_INT 3
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 2
51260: PUSH
51261: LD_INT 5
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 2
51270: NEG
51271: PUSH
51272: LD_INT 3
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 3
51281: NEG
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 3
51292: NEG
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 2
51304: NEG
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 2
51315: NEG
51316: PUSH
51317: LD_INT 1
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 3
51326: NEG
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 4
51337: NEG
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 4
51348: NEG
51349: PUSH
51350: LD_INT 1
51352: NEG
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 4
51360: NEG
51361: PUSH
51362: LD_INT 2
51364: NEG
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 2
51372: NEG
51373: PUSH
51374: LD_INT 2
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 4
51383: NEG
51384: PUSH
51385: LD_INT 4
51387: NEG
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 4
51395: NEG
51396: PUSH
51397: LD_INT 5
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 3
51407: NEG
51408: PUSH
51409: LD_INT 4
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 3
51419: NEG
51420: PUSH
51421: LD_INT 3
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 4
51431: NEG
51432: PUSH
51433: LD_INT 3
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 5
51443: NEG
51444: PUSH
51445: LD_INT 4
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 5
51455: NEG
51456: PUSH
51457: LD_INT 5
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 3
51467: NEG
51468: PUSH
51469: LD_INT 5
51471: NEG
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 5
51479: NEG
51480: PUSH
51481: LD_INT 3
51483: NEG
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: LD_INT 3
51494: NEG
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 0
51502: PUSH
51503: LD_INT 4
51505: NEG
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 1
51513: PUSH
51514: LD_INT 3
51516: NEG
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 1
51524: PUSH
51525: LD_INT 2
51527: NEG
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 0
51535: PUSH
51536: LD_INT 2
51538: NEG
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: LD_INT 3
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 1
51558: NEG
51559: PUSH
51560: LD_INT 4
51562: NEG
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 2
51570: PUSH
51571: LD_INT 2
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 2
51581: NEG
51582: PUSH
51583: LD_INT 4
51585: NEG
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 4
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 4
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 5
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 5
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 4
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 3
51644: PUSH
51645: LD_INT 0
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 3
51654: PUSH
51655: LD_INT 1
51657: NEG
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 3
51665: PUSH
51666: LD_INT 2
51668: NEG
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 5
51676: PUSH
51677: LD_INT 2
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51731: LD_ADDR_VAR 0 32
51735: PUSH
51736: LD_INT 4
51738: NEG
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 4
51749: NEG
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 3
51761: NEG
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 3
51772: NEG
51773: PUSH
51774: LD_INT 1
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 4
51783: NEG
51784: PUSH
51785: LD_INT 1
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 5
51794: NEG
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 5
51805: NEG
51806: PUSH
51807: LD_INT 1
51809: NEG
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 5
51817: NEG
51818: PUSH
51819: LD_INT 2
51821: NEG
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 3
51829: NEG
51830: PUSH
51831: LD_INT 2
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 3
51840: NEG
51841: PUSH
51842: LD_INT 3
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 3
51852: NEG
51853: PUSH
51854: LD_INT 4
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 2
51864: NEG
51865: PUSH
51866: LD_INT 3
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 2
51876: NEG
51877: PUSH
51878: LD_INT 2
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 3
51888: NEG
51889: PUSH
51890: LD_INT 2
51892: NEG
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 4
51900: NEG
51901: PUSH
51902: LD_INT 3
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 4
51912: NEG
51913: PUSH
51914: LD_INT 4
51916: NEG
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 2
51924: NEG
51925: PUSH
51926: LD_INT 4
51928: NEG
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 4
51936: NEG
51937: PUSH
51938: LD_INT 2
51940: NEG
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: LD_INT 4
51951: NEG
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 0
51959: PUSH
51960: LD_INT 5
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: LD_INT 4
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: LD_INT 3
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: LD_INT 3
51995: NEG
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 1
52003: NEG
52004: PUSH
52005: LD_INT 4
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 1
52015: NEG
52016: PUSH
52017: LD_INT 5
52019: NEG
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 2
52027: PUSH
52028: LD_INT 3
52030: NEG
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 2
52038: NEG
52039: PUSH
52040: LD_INT 5
52042: NEG
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 3
52050: PUSH
52051: LD_INT 0
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 3
52060: PUSH
52061: LD_INT 1
52063: NEG
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 4
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 4
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 3
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 2
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 2
52111: PUSH
52112: LD_INT 1
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 2
52122: PUSH
52123: LD_INT 2
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 4
52133: PUSH
52134: LD_INT 2
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 4
52143: PUSH
52144: LD_INT 4
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 4
52153: PUSH
52154: LD_INT 3
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 5
52163: PUSH
52164: LD_INT 4
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 5
52173: PUSH
52174: LD_INT 5
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 4
52183: PUSH
52184: LD_INT 5
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 3
52193: PUSH
52194: LD_INT 4
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 3
52203: PUSH
52204: LD_INT 3
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 5
52213: PUSH
52214: LD_INT 3
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 3
52223: PUSH
52224: LD_INT 5
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52278: LD_ADDR_VAR 0 33
52282: PUSH
52283: LD_INT 4
52285: NEG
52286: PUSH
52287: LD_INT 4
52289: NEG
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 4
52297: NEG
52298: PUSH
52299: LD_INT 5
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 3
52309: NEG
52310: PUSH
52311: LD_INT 4
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 3
52321: NEG
52322: PUSH
52323: LD_INT 3
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 4
52333: NEG
52334: PUSH
52335: LD_INT 3
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 5
52345: NEG
52346: PUSH
52347: LD_INT 4
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 5
52357: NEG
52358: PUSH
52359: LD_INT 5
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 3
52369: NEG
52370: PUSH
52371: LD_INT 5
52373: NEG
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 5
52381: NEG
52382: PUSH
52383: LD_INT 3
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 0
52393: PUSH
52394: LD_INT 3
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: LD_INT 4
52407: NEG
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: PUSH
52416: LD_INT 3
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: LD_INT 2
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: LD_INT 2
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: NEG
52449: PUSH
52450: LD_INT 3
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 1
52460: NEG
52461: PUSH
52462: LD_INT 4
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 2
52472: PUSH
52473: LD_INT 2
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 2
52483: NEG
52484: PUSH
52485: LD_INT 4
52487: NEG
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 4
52495: PUSH
52496: LD_INT 0
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 4
52505: PUSH
52506: LD_INT 1
52508: NEG
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 5
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 5
52526: PUSH
52527: LD_INT 1
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 4
52536: PUSH
52537: LD_INT 1
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 3
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 3
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 3
52567: PUSH
52568: LD_INT 2
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 5
52578: PUSH
52579: LD_INT 2
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 3
52588: PUSH
52589: LD_INT 3
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 3
52598: PUSH
52599: LD_INT 2
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 4
52608: PUSH
52609: LD_INT 3
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 4
52618: PUSH
52619: LD_INT 4
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 3
52628: PUSH
52629: LD_INT 4
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 2
52638: PUSH
52639: LD_INT 3
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 2
52648: PUSH
52649: LD_INT 2
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 4
52658: PUSH
52659: LD_INT 2
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 2
52668: PUSH
52669: LD_INT 4
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 0
52678: PUSH
52679: LD_INT 4
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: LD_INT 3
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: LD_INT 4
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 1
52708: PUSH
52709: LD_INT 5
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 0
52718: PUSH
52719: LD_INT 5
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 1
52728: NEG
52729: PUSH
52730: LD_INT 4
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: NEG
52740: PUSH
52741: LD_INT 3
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 2
52750: PUSH
52751: LD_INT 5
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 2
52760: NEG
52761: PUSH
52762: LD_INT 3
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52816: LD_ADDR_VAR 0 34
52820: PUSH
52821: LD_INT 0
52823: PUSH
52824: LD_INT 4
52826: NEG
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 0
52834: PUSH
52835: LD_INT 5
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 1
52845: PUSH
52846: LD_INT 4
52848: NEG
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 1
52856: PUSH
52857: LD_INT 3
52859: NEG
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: LD_INT 3
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 1
52878: NEG
52879: PUSH
52880: LD_INT 4
52882: NEG
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 1
52890: NEG
52891: PUSH
52892: LD_INT 5
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 2
52902: PUSH
52903: LD_INT 3
52905: NEG
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 2
52913: NEG
52914: PUSH
52915: LD_INT 5
52917: NEG
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 3
52925: PUSH
52926: LD_INT 0
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 3
52935: PUSH
52936: LD_INT 1
52938: NEG
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 4
52946: PUSH
52947: LD_INT 0
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 4
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 3
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 2
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 2
52986: PUSH
52987: LD_INT 1
52989: NEG
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 2
52997: PUSH
52998: LD_INT 2
53000: NEG
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 4
53008: PUSH
53009: LD_INT 2
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 4
53018: PUSH
53019: LD_INT 4
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 4
53028: PUSH
53029: LD_INT 3
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 5
53038: PUSH
53039: LD_INT 4
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 5
53048: PUSH
53049: LD_INT 5
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 4
53058: PUSH
53059: LD_INT 5
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 3
53068: PUSH
53069: LD_INT 4
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 3
53078: PUSH
53079: LD_INT 3
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 5
53088: PUSH
53089: LD_INT 3
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 3
53098: PUSH
53099: LD_INT 5
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 0
53108: PUSH
53109: LD_INT 3
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 0
53118: PUSH
53119: LD_INT 2
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 1
53128: PUSH
53129: LD_INT 3
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 1
53138: PUSH
53139: LD_INT 4
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: LD_INT 4
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: LD_INT 3
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: LD_INT 2
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 2
53180: PUSH
53181: LD_INT 4
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 2
53190: NEG
53191: PUSH
53192: LD_INT 2
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 4
53201: NEG
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 4
53212: NEG
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 3
53224: NEG
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 3
53235: NEG
53236: PUSH
53237: LD_INT 1
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 4
53246: NEG
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 5
53257: NEG
53258: PUSH
53259: LD_INT 0
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 5
53268: NEG
53269: PUSH
53270: LD_INT 1
53272: NEG
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 5
53280: NEG
53281: PUSH
53282: LD_INT 2
53284: NEG
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 3
53292: NEG
53293: PUSH
53294: LD_INT 2
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: ST_TO_ADDR
// end ; end ;
53348: GO 53351
53350: POP
// case btype of b_depot , b_warehouse :
53351: LD_VAR 0 1
53355: PUSH
53356: LD_INT 0
53358: DOUBLE
53359: EQUAL
53360: IFTRUE 53370
53362: LD_INT 1
53364: DOUBLE
53365: EQUAL
53366: IFTRUE 53370
53368: GO 53571
53370: POP
// case nation of nation_american :
53371: LD_VAR 0 5
53375: PUSH
53376: LD_INT 1
53378: DOUBLE
53379: EQUAL
53380: IFTRUE 53384
53382: GO 53440
53384: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53385: LD_ADDR_VAR 0 9
53389: PUSH
53390: LD_VAR 0 11
53394: PUSH
53395: LD_VAR 0 12
53399: PUSH
53400: LD_VAR 0 13
53404: PUSH
53405: LD_VAR 0 14
53409: PUSH
53410: LD_VAR 0 15
53414: PUSH
53415: LD_VAR 0 16
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: PUSH
53428: LD_VAR 0 4
53432: PUSH
53433: LD_INT 1
53435: PLUS
53436: ARRAY
53437: ST_TO_ADDR
53438: GO 53569
53440: LD_INT 2
53442: DOUBLE
53443: EQUAL
53444: IFTRUE 53448
53446: GO 53504
53448: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53449: LD_ADDR_VAR 0 9
53453: PUSH
53454: LD_VAR 0 17
53458: PUSH
53459: LD_VAR 0 18
53463: PUSH
53464: LD_VAR 0 19
53468: PUSH
53469: LD_VAR 0 20
53473: PUSH
53474: LD_VAR 0 21
53478: PUSH
53479: LD_VAR 0 22
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: PUSH
53492: LD_VAR 0 4
53496: PUSH
53497: LD_INT 1
53499: PLUS
53500: ARRAY
53501: ST_TO_ADDR
53502: GO 53569
53504: LD_INT 3
53506: DOUBLE
53507: EQUAL
53508: IFTRUE 53512
53510: GO 53568
53512: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53513: LD_ADDR_VAR 0 9
53517: PUSH
53518: LD_VAR 0 23
53522: PUSH
53523: LD_VAR 0 24
53527: PUSH
53528: LD_VAR 0 25
53532: PUSH
53533: LD_VAR 0 26
53537: PUSH
53538: LD_VAR 0 27
53542: PUSH
53543: LD_VAR 0 28
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: PUSH
53556: LD_VAR 0 4
53560: PUSH
53561: LD_INT 1
53563: PLUS
53564: ARRAY
53565: ST_TO_ADDR
53566: GO 53569
53568: POP
53569: GO 54124
53571: LD_INT 2
53573: DOUBLE
53574: EQUAL
53575: IFTRUE 53585
53577: LD_INT 3
53579: DOUBLE
53580: EQUAL
53581: IFTRUE 53585
53583: GO 53641
53585: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53586: LD_ADDR_VAR 0 9
53590: PUSH
53591: LD_VAR 0 29
53595: PUSH
53596: LD_VAR 0 30
53600: PUSH
53601: LD_VAR 0 31
53605: PUSH
53606: LD_VAR 0 32
53610: PUSH
53611: LD_VAR 0 33
53615: PUSH
53616: LD_VAR 0 34
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: PUSH
53629: LD_VAR 0 4
53633: PUSH
53634: LD_INT 1
53636: PLUS
53637: ARRAY
53638: ST_TO_ADDR
53639: GO 54124
53641: LD_INT 16
53643: DOUBLE
53644: EQUAL
53645: IFTRUE 53703
53647: LD_INT 17
53649: DOUBLE
53650: EQUAL
53651: IFTRUE 53703
53653: LD_INT 18
53655: DOUBLE
53656: EQUAL
53657: IFTRUE 53703
53659: LD_INT 19
53661: DOUBLE
53662: EQUAL
53663: IFTRUE 53703
53665: LD_INT 22
53667: DOUBLE
53668: EQUAL
53669: IFTRUE 53703
53671: LD_INT 20
53673: DOUBLE
53674: EQUAL
53675: IFTRUE 53703
53677: LD_INT 21
53679: DOUBLE
53680: EQUAL
53681: IFTRUE 53703
53683: LD_INT 23
53685: DOUBLE
53686: EQUAL
53687: IFTRUE 53703
53689: LD_INT 24
53691: DOUBLE
53692: EQUAL
53693: IFTRUE 53703
53695: LD_INT 25
53697: DOUBLE
53698: EQUAL
53699: IFTRUE 53703
53701: GO 53759
53703: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53704: LD_ADDR_VAR 0 9
53708: PUSH
53709: LD_VAR 0 35
53713: PUSH
53714: LD_VAR 0 36
53718: PUSH
53719: LD_VAR 0 37
53723: PUSH
53724: LD_VAR 0 38
53728: PUSH
53729: LD_VAR 0 39
53733: PUSH
53734: LD_VAR 0 40
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: PUSH
53747: LD_VAR 0 4
53751: PUSH
53752: LD_INT 1
53754: PLUS
53755: ARRAY
53756: ST_TO_ADDR
53757: GO 54124
53759: LD_INT 6
53761: DOUBLE
53762: EQUAL
53763: IFTRUE 53815
53765: LD_INT 7
53767: DOUBLE
53768: EQUAL
53769: IFTRUE 53815
53771: LD_INT 8
53773: DOUBLE
53774: EQUAL
53775: IFTRUE 53815
53777: LD_INT 13
53779: DOUBLE
53780: EQUAL
53781: IFTRUE 53815
53783: LD_INT 12
53785: DOUBLE
53786: EQUAL
53787: IFTRUE 53815
53789: LD_INT 15
53791: DOUBLE
53792: EQUAL
53793: IFTRUE 53815
53795: LD_INT 11
53797: DOUBLE
53798: EQUAL
53799: IFTRUE 53815
53801: LD_INT 14
53803: DOUBLE
53804: EQUAL
53805: IFTRUE 53815
53807: LD_INT 10
53809: DOUBLE
53810: EQUAL
53811: IFTRUE 53815
53813: GO 53871
53815: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53816: LD_ADDR_VAR 0 9
53820: PUSH
53821: LD_VAR 0 41
53825: PUSH
53826: LD_VAR 0 42
53830: PUSH
53831: LD_VAR 0 43
53835: PUSH
53836: LD_VAR 0 44
53840: PUSH
53841: LD_VAR 0 45
53845: PUSH
53846: LD_VAR 0 46
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: PUSH
53859: LD_VAR 0 4
53863: PUSH
53864: LD_INT 1
53866: PLUS
53867: ARRAY
53868: ST_TO_ADDR
53869: GO 54124
53871: LD_INT 36
53873: DOUBLE
53874: EQUAL
53875: IFTRUE 53879
53877: GO 53935
53879: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53880: LD_ADDR_VAR 0 9
53884: PUSH
53885: LD_VAR 0 47
53889: PUSH
53890: LD_VAR 0 48
53894: PUSH
53895: LD_VAR 0 49
53899: PUSH
53900: LD_VAR 0 50
53904: PUSH
53905: LD_VAR 0 51
53909: PUSH
53910: LD_VAR 0 52
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: PUSH
53923: LD_VAR 0 4
53927: PUSH
53928: LD_INT 1
53930: PLUS
53931: ARRAY
53932: ST_TO_ADDR
53933: GO 54124
53935: LD_INT 4
53937: DOUBLE
53938: EQUAL
53939: IFTRUE 53961
53941: LD_INT 5
53943: DOUBLE
53944: EQUAL
53945: IFTRUE 53961
53947: LD_INT 34
53949: DOUBLE
53950: EQUAL
53951: IFTRUE 53961
53953: LD_INT 37
53955: DOUBLE
53956: EQUAL
53957: IFTRUE 53961
53959: GO 54017
53961: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53962: LD_ADDR_VAR 0 9
53966: PUSH
53967: LD_VAR 0 53
53971: PUSH
53972: LD_VAR 0 54
53976: PUSH
53977: LD_VAR 0 55
53981: PUSH
53982: LD_VAR 0 56
53986: PUSH
53987: LD_VAR 0 57
53991: PUSH
53992: LD_VAR 0 58
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: PUSH
54005: LD_VAR 0 4
54009: PUSH
54010: LD_INT 1
54012: PLUS
54013: ARRAY
54014: ST_TO_ADDR
54015: GO 54124
54017: LD_INT 31
54019: DOUBLE
54020: EQUAL
54021: IFTRUE 54067
54023: LD_INT 32
54025: DOUBLE
54026: EQUAL
54027: IFTRUE 54067
54029: LD_INT 33
54031: DOUBLE
54032: EQUAL
54033: IFTRUE 54067
54035: LD_INT 27
54037: DOUBLE
54038: EQUAL
54039: IFTRUE 54067
54041: LD_INT 26
54043: DOUBLE
54044: EQUAL
54045: IFTRUE 54067
54047: LD_INT 28
54049: DOUBLE
54050: EQUAL
54051: IFTRUE 54067
54053: LD_INT 29
54055: DOUBLE
54056: EQUAL
54057: IFTRUE 54067
54059: LD_INT 30
54061: DOUBLE
54062: EQUAL
54063: IFTRUE 54067
54065: GO 54123
54067: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54068: LD_ADDR_VAR 0 9
54072: PUSH
54073: LD_VAR 0 59
54077: PUSH
54078: LD_VAR 0 60
54082: PUSH
54083: LD_VAR 0 61
54087: PUSH
54088: LD_VAR 0 62
54092: PUSH
54093: LD_VAR 0 63
54097: PUSH
54098: LD_VAR 0 64
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: PUSH
54111: LD_VAR 0 4
54115: PUSH
54116: LD_INT 1
54118: PLUS
54119: ARRAY
54120: ST_TO_ADDR
54121: GO 54124
54123: POP
// temp_list2 = [ ] ;
54124: LD_ADDR_VAR 0 10
54128: PUSH
54129: EMPTY
54130: ST_TO_ADDR
// for i in temp_list do
54131: LD_ADDR_VAR 0 8
54135: PUSH
54136: LD_VAR 0 9
54140: PUSH
54141: FOR_IN
54142: IFFALSE 54194
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54144: LD_ADDR_VAR 0 10
54148: PUSH
54149: LD_VAR 0 10
54153: PUSH
54154: LD_VAR 0 8
54158: PUSH
54159: LD_INT 1
54161: ARRAY
54162: PUSH
54163: LD_VAR 0 2
54167: PLUS
54168: PUSH
54169: LD_VAR 0 8
54173: PUSH
54174: LD_INT 2
54176: ARRAY
54177: PUSH
54178: LD_VAR 0 3
54182: PLUS
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: EMPTY
54189: LIST
54190: ADD
54191: ST_TO_ADDR
54192: GO 54141
54194: POP
54195: POP
// result = temp_list2 ;
54196: LD_ADDR_VAR 0 7
54200: PUSH
54201: LD_VAR 0 10
54205: ST_TO_ADDR
// end ;
54206: LD_VAR 0 7
54210: RET
// export function EnemyInRange ( unit , dist ) ; begin
54211: LD_INT 0
54213: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54214: LD_ADDR_VAR 0 3
54218: PUSH
54219: LD_VAR 0 1
54223: PPUSH
54224: CALL_OW 255
54228: PPUSH
54229: LD_VAR 0 1
54233: PPUSH
54234: CALL_OW 250
54238: PPUSH
54239: LD_VAR 0 1
54243: PPUSH
54244: CALL_OW 251
54248: PPUSH
54249: LD_VAR 0 2
54253: PPUSH
54254: CALL 27607 0 4
54258: PUSH
54259: LD_INT 4
54261: ARRAY
54262: ST_TO_ADDR
// end ;
54263: LD_VAR 0 3
54267: RET
// export function PlayerSeeMe ( unit ) ; begin
54268: LD_INT 0
54270: PPUSH
// result := See ( your_side , unit ) ;
54271: LD_ADDR_VAR 0 2
54275: PUSH
54276: LD_OWVAR 2
54280: PPUSH
54281: LD_VAR 0 1
54285: PPUSH
54286: CALL_OW 292
54290: ST_TO_ADDR
// end ;
54291: LD_VAR 0 2
54295: RET
// export function ReverseDir ( unit ) ; begin
54296: LD_INT 0
54298: PPUSH
// if not unit then
54299: LD_VAR 0 1
54303: NOT
54304: IFFALSE 54308
// exit ;
54306: GO 54331
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54308: LD_ADDR_VAR 0 2
54312: PUSH
54313: LD_VAR 0 1
54317: PPUSH
54318: CALL_OW 254
54322: PUSH
54323: LD_INT 3
54325: PLUS
54326: PUSH
54327: LD_INT 6
54329: MOD
54330: ST_TO_ADDR
// end ;
54331: LD_VAR 0 2
54335: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
54336: LD_INT 0
54338: PPUSH
54339: PPUSH
54340: PPUSH
54341: PPUSH
54342: PPUSH
// if not hexes then
54343: LD_VAR 0 2
54347: NOT
54348: IFFALSE 54352
// exit ;
54350: GO 54500
// dist := 9999 ;
54352: LD_ADDR_VAR 0 5
54356: PUSH
54357: LD_INT 9999
54359: ST_TO_ADDR
// for i = 1 to hexes do
54360: LD_ADDR_VAR 0 4
54364: PUSH
54365: DOUBLE
54366: LD_INT 1
54368: DEC
54369: ST_TO_ADDR
54370: LD_VAR 0 2
54374: PUSH
54375: FOR_TO
54376: IFFALSE 54488
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
54378: LD_VAR 0 1
54382: PPUSH
54383: LD_VAR 0 2
54387: PUSH
54388: LD_VAR 0 4
54392: ARRAY
54393: PUSH
54394: LD_INT 1
54396: ARRAY
54397: PPUSH
54398: LD_VAR 0 2
54402: PUSH
54403: LD_VAR 0 4
54407: ARRAY
54408: PUSH
54409: LD_INT 2
54411: ARRAY
54412: PPUSH
54413: CALL_OW 297
54417: PUSH
54418: LD_VAR 0 5
54422: LESS
54423: IFFALSE 54486
// begin hex := hexes [ i ] ;
54425: LD_ADDR_VAR 0 7
54429: PUSH
54430: LD_VAR 0 2
54434: PUSH
54435: LD_VAR 0 4
54439: ARRAY
54440: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54441: LD_ADDR_VAR 0 5
54445: PUSH
54446: LD_VAR 0 1
54450: PPUSH
54451: LD_VAR 0 2
54455: PUSH
54456: LD_VAR 0 4
54460: ARRAY
54461: PUSH
54462: LD_INT 1
54464: ARRAY
54465: PPUSH
54466: LD_VAR 0 2
54470: PUSH
54471: LD_VAR 0 4
54475: ARRAY
54476: PUSH
54477: LD_INT 2
54479: ARRAY
54480: PPUSH
54481: CALL_OW 297
54485: ST_TO_ADDR
// end ; end ;
54486: GO 54375
54488: POP
54489: POP
// result := hex ;
54490: LD_ADDR_VAR 0 3
54494: PUSH
54495: LD_VAR 0 7
54499: ST_TO_ADDR
// end ;
54500: LD_VAR 0 3
54504: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54505: LD_INT 0
54507: PPUSH
54508: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54509: LD_VAR 0 1
54513: NOT
54514: PUSH
54515: LD_VAR 0 1
54519: PUSH
54520: LD_INT 21
54522: PUSH
54523: LD_INT 2
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 23
54532: PUSH
54533: LD_INT 2
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PPUSH
54544: CALL_OW 69
54548: IN
54549: NOT
54550: OR
54551: IFFALSE 54555
// exit ;
54553: GO 54602
// for i = 1 to 3 do
54555: LD_ADDR_VAR 0 3
54559: PUSH
54560: DOUBLE
54561: LD_INT 1
54563: DEC
54564: ST_TO_ADDR
54565: LD_INT 3
54567: PUSH
54568: FOR_TO
54569: IFFALSE 54600
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54571: LD_VAR 0 1
54575: PPUSH
54576: CALL_OW 250
54580: PPUSH
54581: LD_VAR 0 1
54585: PPUSH
54586: CALL_OW 251
54590: PPUSH
54591: LD_INT 1
54593: PPUSH
54594: CALL_OW 453
54598: GO 54568
54600: POP
54601: POP
// end ;
54602: LD_VAR 0 2
54606: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54607: LD_INT 0
54609: PPUSH
54610: PPUSH
54611: PPUSH
54612: PPUSH
54613: PPUSH
54614: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54615: LD_VAR 0 1
54619: NOT
54620: PUSH
54621: LD_VAR 0 2
54625: NOT
54626: OR
54627: PUSH
54628: LD_VAR 0 1
54632: PPUSH
54633: CALL_OW 314
54637: OR
54638: IFFALSE 54642
// exit ;
54640: GO 55083
// x := GetX ( enemy_unit ) ;
54642: LD_ADDR_VAR 0 7
54646: PUSH
54647: LD_VAR 0 2
54651: PPUSH
54652: CALL_OW 250
54656: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54657: LD_ADDR_VAR 0 8
54661: PUSH
54662: LD_VAR 0 2
54666: PPUSH
54667: CALL_OW 251
54671: ST_TO_ADDR
// if not x or not y then
54672: LD_VAR 0 7
54676: NOT
54677: PUSH
54678: LD_VAR 0 8
54682: NOT
54683: OR
54684: IFFALSE 54688
// exit ;
54686: GO 55083
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54688: LD_ADDR_VAR 0 6
54692: PUSH
54693: LD_VAR 0 7
54697: PPUSH
54698: LD_INT 0
54700: PPUSH
54701: LD_INT 4
54703: PPUSH
54704: CALL_OW 272
54708: PUSH
54709: LD_VAR 0 8
54713: PPUSH
54714: LD_INT 0
54716: PPUSH
54717: LD_INT 4
54719: PPUSH
54720: CALL_OW 273
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_VAR 0 7
54733: PPUSH
54734: LD_INT 1
54736: PPUSH
54737: LD_INT 4
54739: PPUSH
54740: CALL_OW 272
54744: PUSH
54745: LD_VAR 0 8
54749: PPUSH
54750: LD_INT 1
54752: PPUSH
54753: LD_INT 4
54755: PPUSH
54756: CALL_OW 273
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_VAR 0 7
54769: PPUSH
54770: LD_INT 2
54772: PPUSH
54773: LD_INT 4
54775: PPUSH
54776: CALL_OW 272
54780: PUSH
54781: LD_VAR 0 8
54785: PPUSH
54786: LD_INT 2
54788: PPUSH
54789: LD_INT 4
54791: PPUSH
54792: CALL_OW 273
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_VAR 0 7
54805: PPUSH
54806: LD_INT 3
54808: PPUSH
54809: LD_INT 4
54811: PPUSH
54812: CALL_OW 272
54816: PUSH
54817: LD_VAR 0 8
54821: PPUSH
54822: LD_INT 3
54824: PPUSH
54825: LD_INT 4
54827: PPUSH
54828: CALL_OW 273
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_VAR 0 7
54841: PPUSH
54842: LD_INT 4
54844: PPUSH
54845: LD_INT 4
54847: PPUSH
54848: CALL_OW 272
54852: PUSH
54853: LD_VAR 0 8
54857: PPUSH
54858: LD_INT 4
54860: PPUSH
54861: LD_INT 4
54863: PPUSH
54864: CALL_OW 273
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_VAR 0 7
54877: PPUSH
54878: LD_INT 5
54880: PPUSH
54881: LD_INT 4
54883: PPUSH
54884: CALL_OW 272
54888: PUSH
54889: LD_VAR 0 8
54893: PPUSH
54894: LD_INT 5
54896: PPUSH
54897: LD_INT 4
54899: PPUSH
54900: CALL_OW 273
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: ST_TO_ADDR
// for i = tmp downto 1 do
54917: LD_ADDR_VAR 0 4
54921: PUSH
54922: DOUBLE
54923: LD_VAR 0 6
54927: INC
54928: ST_TO_ADDR
54929: LD_INT 1
54931: PUSH
54932: FOR_DOWNTO
54933: IFFALSE 55034
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54935: LD_VAR 0 6
54939: PUSH
54940: LD_VAR 0 4
54944: ARRAY
54945: PUSH
54946: LD_INT 1
54948: ARRAY
54949: PPUSH
54950: LD_VAR 0 6
54954: PUSH
54955: LD_VAR 0 4
54959: ARRAY
54960: PUSH
54961: LD_INT 2
54963: ARRAY
54964: PPUSH
54965: CALL_OW 488
54969: NOT
54970: PUSH
54971: LD_VAR 0 6
54975: PUSH
54976: LD_VAR 0 4
54980: ARRAY
54981: PUSH
54982: LD_INT 1
54984: ARRAY
54985: PPUSH
54986: LD_VAR 0 6
54990: PUSH
54991: LD_VAR 0 4
54995: ARRAY
54996: PUSH
54997: LD_INT 2
54999: ARRAY
55000: PPUSH
55001: CALL_OW 428
55005: PUSH
55006: LD_INT 0
55008: NONEQUAL
55009: OR
55010: IFFALSE 55032
// tmp := Delete ( tmp , i ) ;
55012: LD_ADDR_VAR 0 6
55016: PUSH
55017: LD_VAR 0 6
55021: PPUSH
55022: LD_VAR 0 4
55026: PPUSH
55027: CALL_OW 3
55031: ST_TO_ADDR
55032: GO 54932
55034: POP
55035: POP
// j := GetClosestHex ( unit , tmp ) ;
55036: LD_ADDR_VAR 0 5
55040: PUSH
55041: LD_VAR 0 1
55045: PPUSH
55046: LD_VAR 0 6
55050: PPUSH
55051: CALL 54336 0 2
55055: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55056: LD_VAR 0 1
55060: PPUSH
55061: LD_VAR 0 5
55065: PUSH
55066: LD_INT 1
55068: ARRAY
55069: PPUSH
55070: LD_VAR 0 5
55074: PUSH
55075: LD_INT 2
55077: ARRAY
55078: PPUSH
55079: CALL_OW 111
// end ;
55083: LD_VAR 0 3
55087: RET
// export function PrepareApemanSoldier ( ) ; begin
55088: LD_INT 0
55090: PPUSH
// uc_nation := 0 ;
55091: LD_ADDR_OWVAR 21
55095: PUSH
55096: LD_INT 0
55098: ST_TO_ADDR
// hc_sex := sex_male ;
55099: LD_ADDR_OWVAR 27
55103: PUSH
55104: LD_INT 1
55106: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
55107: LD_ADDR_OWVAR 28
55111: PUSH
55112: LD_INT 15
55114: ST_TO_ADDR
// hc_gallery :=  ;
55115: LD_ADDR_OWVAR 33
55119: PUSH
55120: LD_STRING 
55122: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55123: LD_ADDR_OWVAR 31
55127: PUSH
55128: LD_INT 0
55130: PPUSH
55131: LD_INT 3
55133: PPUSH
55134: CALL_OW 12
55138: PUSH
55139: LD_INT 0
55141: PPUSH
55142: LD_INT 3
55144: PPUSH
55145: CALL_OW 12
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: ST_TO_ADDR
// end ;
55162: LD_VAR 0 1
55166: RET
// export function PrepareApemanEngineer ( ) ; begin
55167: LD_INT 0
55169: PPUSH
// uc_nation := 0 ;
55170: LD_ADDR_OWVAR 21
55174: PUSH
55175: LD_INT 0
55177: ST_TO_ADDR
// hc_sex := sex_male ;
55178: LD_ADDR_OWVAR 27
55182: PUSH
55183: LD_INT 1
55185: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
55186: LD_ADDR_OWVAR 28
55190: PUSH
55191: LD_INT 16
55193: ST_TO_ADDR
// hc_gallery :=  ;
55194: LD_ADDR_OWVAR 33
55198: PUSH
55199: LD_STRING 
55201: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55202: LD_ADDR_OWVAR 31
55206: PUSH
55207: LD_INT 0
55209: PPUSH
55210: LD_INT 3
55212: PPUSH
55213: CALL_OW 12
55217: PUSH
55218: LD_INT 0
55220: PPUSH
55221: LD_INT 3
55223: PPUSH
55224: CALL_OW 12
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: ST_TO_ADDR
// end ;
55241: LD_VAR 0 1
55245: RET
// export function PrepareApeman ( agressivity ) ; begin
55246: LD_INT 0
55248: PPUSH
// uc_side := 0 ;
55249: LD_ADDR_OWVAR 20
55253: PUSH
55254: LD_INT 0
55256: ST_TO_ADDR
// uc_nation := 0 ;
55257: LD_ADDR_OWVAR 21
55261: PUSH
55262: LD_INT 0
55264: ST_TO_ADDR
// hc_sex := sex_male ;
55265: LD_ADDR_OWVAR 27
55269: PUSH
55270: LD_INT 1
55272: ST_TO_ADDR
// hc_class := class_apeman ;
55273: LD_ADDR_OWVAR 28
55277: PUSH
55278: LD_INT 12
55280: ST_TO_ADDR
// hc_gallery :=  ;
55281: LD_ADDR_OWVAR 33
55285: PUSH
55286: LD_STRING 
55288: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55289: LD_ADDR_OWVAR 35
55293: PUSH
55294: LD_VAR 0 1
55298: NEG
55299: PPUSH
55300: LD_VAR 0 1
55304: PPUSH
55305: CALL_OW 12
55309: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55310: LD_ADDR_OWVAR 31
55314: PUSH
55315: LD_INT 0
55317: PPUSH
55318: LD_INT 3
55320: PPUSH
55321: CALL_OW 12
55325: PUSH
55326: LD_INT 0
55328: PPUSH
55329: LD_INT 3
55331: PPUSH
55332: CALL_OW 12
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: ST_TO_ADDR
// end ;
55349: LD_VAR 0 2
55353: RET
// export function PrepareTiger ( agressivity ) ; begin
55354: LD_INT 0
55356: PPUSH
// uc_side := 0 ;
55357: LD_ADDR_OWVAR 20
55361: PUSH
55362: LD_INT 0
55364: ST_TO_ADDR
// uc_nation := 0 ;
55365: LD_ADDR_OWVAR 21
55369: PUSH
55370: LD_INT 0
55372: ST_TO_ADDR
// hc_class := class_tiger ;
55373: LD_ADDR_OWVAR 28
55377: PUSH
55378: LD_INT 14
55380: ST_TO_ADDR
// hc_gallery :=  ;
55381: LD_ADDR_OWVAR 33
55385: PUSH
55386: LD_STRING 
55388: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55389: LD_ADDR_OWVAR 35
55393: PUSH
55394: LD_VAR 0 1
55398: NEG
55399: PPUSH
55400: LD_VAR 0 1
55404: PPUSH
55405: CALL_OW 12
55409: ST_TO_ADDR
// end ;
55410: LD_VAR 0 2
55414: RET
// export function PrepareEnchidna ( ) ; begin
55415: LD_INT 0
55417: PPUSH
// uc_side := 0 ;
55418: LD_ADDR_OWVAR 20
55422: PUSH
55423: LD_INT 0
55425: ST_TO_ADDR
// uc_nation := 0 ;
55426: LD_ADDR_OWVAR 21
55430: PUSH
55431: LD_INT 0
55433: ST_TO_ADDR
// hc_class := class_baggie ;
55434: LD_ADDR_OWVAR 28
55438: PUSH
55439: LD_INT 13
55441: ST_TO_ADDR
// hc_gallery :=  ;
55442: LD_ADDR_OWVAR 33
55446: PUSH
55447: LD_STRING 
55449: ST_TO_ADDR
// end ;
55450: LD_VAR 0 1
55454: RET
// export function PrepareFrog ( ) ; begin
55455: LD_INT 0
55457: PPUSH
// uc_side := 0 ;
55458: LD_ADDR_OWVAR 20
55462: PUSH
55463: LD_INT 0
55465: ST_TO_ADDR
// uc_nation := 0 ;
55466: LD_ADDR_OWVAR 21
55470: PUSH
55471: LD_INT 0
55473: ST_TO_ADDR
// hc_class := class_frog ;
55474: LD_ADDR_OWVAR 28
55478: PUSH
55479: LD_INT 19
55481: ST_TO_ADDR
// hc_gallery :=  ;
55482: LD_ADDR_OWVAR 33
55486: PUSH
55487: LD_STRING 
55489: ST_TO_ADDR
// end ;
55490: LD_VAR 0 1
55494: RET
// export function PrepareFish ( ) ; begin
55495: LD_INT 0
55497: PPUSH
// uc_side := 0 ;
55498: LD_ADDR_OWVAR 20
55502: PUSH
55503: LD_INT 0
55505: ST_TO_ADDR
// uc_nation := 0 ;
55506: LD_ADDR_OWVAR 21
55510: PUSH
55511: LD_INT 0
55513: ST_TO_ADDR
// hc_class := class_fish ;
55514: LD_ADDR_OWVAR 28
55518: PUSH
55519: LD_INT 20
55521: ST_TO_ADDR
// hc_gallery :=  ;
55522: LD_ADDR_OWVAR 33
55526: PUSH
55527: LD_STRING 
55529: ST_TO_ADDR
// end ;
55530: LD_VAR 0 1
55534: RET
// export function PrepareBird ( ) ; begin
55535: LD_INT 0
55537: PPUSH
// uc_side := 0 ;
55538: LD_ADDR_OWVAR 20
55542: PUSH
55543: LD_INT 0
55545: ST_TO_ADDR
// uc_nation := 0 ;
55546: LD_ADDR_OWVAR 21
55550: PUSH
55551: LD_INT 0
55553: ST_TO_ADDR
// hc_class := class_phororhacos ;
55554: LD_ADDR_OWVAR 28
55558: PUSH
55559: LD_INT 18
55561: ST_TO_ADDR
// hc_gallery :=  ;
55562: LD_ADDR_OWVAR 33
55566: PUSH
55567: LD_STRING 
55569: ST_TO_ADDR
// end ;
55570: LD_VAR 0 1
55574: RET
// export function PrepareHorse ( ) ; begin
55575: LD_INT 0
55577: PPUSH
// uc_side := 0 ;
55578: LD_ADDR_OWVAR 20
55582: PUSH
55583: LD_INT 0
55585: ST_TO_ADDR
// uc_nation := 0 ;
55586: LD_ADDR_OWVAR 21
55590: PUSH
55591: LD_INT 0
55593: ST_TO_ADDR
// hc_class := class_horse ;
55594: LD_ADDR_OWVAR 28
55598: PUSH
55599: LD_INT 21
55601: ST_TO_ADDR
// hc_gallery :=  ;
55602: LD_ADDR_OWVAR 33
55606: PUSH
55607: LD_STRING 
55609: ST_TO_ADDR
// end ;
55610: LD_VAR 0 1
55614: RET
// export function PrepareMastodont ( ) ; begin
55615: LD_INT 0
55617: PPUSH
// uc_side := 0 ;
55618: LD_ADDR_OWVAR 20
55622: PUSH
55623: LD_INT 0
55625: ST_TO_ADDR
// uc_nation := 0 ;
55626: LD_ADDR_OWVAR 21
55630: PUSH
55631: LD_INT 0
55633: ST_TO_ADDR
// vc_chassis := class_mastodont ;
55634: LD_ADDR_OWVAR 37
55638: PUSH
55639: LD_INT 31
55641: ST_TO_ADDR
// vc_control := control_rider ;
55642: LD_ADDR_OWVAR 38
55646: PUSH
55647: LD_INT 4
55649: ST_TO_ADDR
// end ;
55650: LD_VAR 0 1
55654: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55655: LD_INT 0
55657: PPUSH
55658: PPUSH
55659: PPUSH
// uc_side = 0 ;
55660: LD_ADDR_OWVAR 20
55664: PUSH
55665: LD_INT 0
55667: ST_TO_ADDR
// uc_nation = 0 ;
55668: LD_ADDR_OWVAR 21
55672: PUSH
55673: LD_INT 0
55675: ST_TO_ADDR
// InitHc_All ( ) ;
55676: CALL_OW 584
// InitVc ;
55680: CALL_OW 20
// if mastodonts then
55684: LD_VAR 0 6
55688: IFFALSE 55755
// for i = 1 to mastodonts do
55690: LD_ADDR_VAR 0 11
55694: PUSH
55695: DOUBLE
55696: LD_INT 1
55698: DEC
55699: ST_TO_ADDR
55700: LD_VAR 0 6
55704: PUSH
55705: FOR_TO
55706: IFFALSE 55753
// begin vc_chassis := 31 ;
55708: LD_ADDR_OWVAR 37
55712: PUSH
55713: LD_INT 31
55715: ST_TO_ADDR
// vc_control := control_rider ;
55716: LD_ADDR_OWVAR 38
55720: PUSH
55721: LD_INT 4
55723: ST_TO_ADDR
// animal := CreateVehicle ;
55724: LD_ADDR_VAR 0 12
55728: PUSH
55729: CALL_OW 45
55733: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55734: LD_VAR 0 12
55738: PPUSH
55739: LD_VAR 0 8
55743: PPUSH
55744: LD_INT 0
55746: PPUSH
55747: CALL 57890 0 3
// end ;
55751: GO 55705
55753: POP
55754: POP
// if horses then
55755: LD_VAR 0 5
55759: IFFALSE 55826
// for i = 1 to horses do
55761: LD_ADDR_VAR 0 11
55765: PUSH
55766: DOUBLE
55767: LD_INT 1
55769: DEC
55770: ST_TO_ADDR
55771: LD_VAR 0 5
55775: PUSH
55776: FOR_TO
55777: IFFALSE 55824
// begin hc_class := 21 ;
55779: LD_ADDR_OWVAR 28
55783: PUSH
55784: LD_INT 21
55786: ST_TO_ADDR
// hc_gallery :=  ;
55787: LD_ADDR_OWVAR 33
55791: PUSH
55792: LD_STRING 
55794: ST_TO_ADDR
// animal := CreateHuman ;
55795: LD_ADDR_VAR 0 12
55799: PUSH
55800: CALL_OW 44
55804: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55805: LD_VAR 0 12
55809: PPUSH
55810: LD_VAR 0 8
55814: PPUSH
55815: LD_INT 0
55817: PPUSH
55818: CALL 57890 0 3
// end ;
55822: GO 55776
55824: POP
55825: POP
// if birds then
55826: LD_VAR 0 1
55830: IFFALSE 55897
// for i = 1 to birds do
55832: LD_ADDR_VAR 0 11
55836: PUSH
55837: DOUBLE
55838: LD_INT 1
55840: DEC
55841: ST_TO_ADDR
55842: LD_VAR 0 1
55846: PUSH
55847: FOR_TO
55848: IFFALSE 55895
// begin hc_class = 18 ;
55850: LD_ADDR_OWVAR 28
55854: PUSH
55855: LD_INT 18
55857: ST_TO_ADDR
// hc_gallery =  ;
55858: LD_ADDR_OWVAR 33
55862: PUSH
55863: LD_STRING 
55865: ST_TO_ADDR
// animal := CreateHuman ;
55866: LD_ADDR_VAR 0 12
55870: PUSH
55871: CALL_OW 44
55875: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55876: LD_VAR 0 12
55880: PPUSH
55881: LD_VAR 0 8
55885: PPUSH
55886: LD_INT 0
55888: PPUSH
55889: CALL 57890 0 3
// end ;
55893: GO 55847
55895: POP
55896: POP
// if tigers then
55897: LD_VAR 0 2
55901: IFFALSE 55985
// for i = 1 to tigers do
55903: LD_ADDR_VAR 0 11
55907: PUSH
55908: DOUBLE
55909: LD_INT 1
55911: DEC
55912: ST_TO_ADDR
55913: LD_VAR 0 2
55917: PUSH
55918: FOR_TO
55919: IFFALSE 55983
// begin hc_class = class_tiger ;
55921: LD_ADDR_OWVAR 28
55925: PUSH
55926: LD_INT 14
55928: ST_TO_ADDR
// hc_gallery =  ;
55929: LD_ADDR_OWVAR 33
55933: PUSH
55934: LD_STRING 
55936: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55937: LD_ADDR_OWVAR 35
55941: PUSH
55942: LD_INT 7
55944: NEG
55945: PPUSH
55946: LD_INT 7
55948: PPUSH
55949: CALL_OW 12
55953: ST_TO_ADDR
// animal := CreateHuman ;
55954: LD_ADDR_VAR 0 12
55958: PUSH
55959: CALL_OW 44
55963: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55964: LD_VAR 0 12
55968: PPUSH
55969: LD_VAR 0 8
55973: PPUSH
55974: LD_INT 0
55976: PPUSH
55977: CALL 57890 0 3
// end ;
55981: GO 55918
55983: POP
55984: POP
// if apemans then
55985: LD_VAR 0 3
55989: IFFALSE 56112
// for i = 1 to apemans do
55991: LD_ADDR_VAR 0 11
55995: PUSH
55996: DOUBLE
55997: LD_INT 1
55999: DEC
56000: ST_TO_ADDR
56001: LD_VAR 0 3
56005: PUSH
56006: FOR_TO
56007: IFFALSE 56110
// begin hc_class = class_apeman ;
56009: LD_ADDR_OWVAR 28
56013: PUSH
56014: LD_INT 12
56016: ST_TO_ADDR
// hc_gallery =  ;
56017: LD_ADDR_OWVAR 33
56021: PUSH
56022: LD_STRING 
56024: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56025: LD_ADDR_OWVAR 35
56029: PUSH
56030: LD_INT 2
56032: NEG
56033: PPUSH
56034: LD_INT 2
56036: PPUSH
56037: CALL_OW 12
56041: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56042: LD_ADDR_OWVAR 31
56046: PUSH
56047: LD_INT 1
56049: PPUSH
56050: LD_INT 3
56052: PPUSH
56053: CALL_OW 12
56057: PUSH
56058: LD_INT 1
56060: PPUSH
56061: LD_INT 3
56063: PPUSH
56064: CALL_OW 12
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: ST_TO_ADDR
// animal := CreateHuman ;
56081: LD_ADDR_VAR 0 12
56085: PUSH
56086: CALL_OW 44
56090: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56091: LD_VAR 0 12
56095: PPUSH
56096: LD_VAR 0 8
56100: PPUSH
56101: LD_INT 0
56103: PPUSH
56104: CALL 57890 0 3
// end ;
56108: GO 56006
56110: POP
56111: POP
// if enchidnas then
56112: LD_VAR 0 4
56116: IFFALSE 56183
// for i = 1 to enchidnas do
56118: LD_ADDR_VAR 0 11
56122: PUSH
56123: DOUBLE
56124: LD_INT 1
56126: DEC
56127: ST_TO_ADDR
56128: LD_VAR 0 4
56132: PUSH
56133: FOR_TO
56134: IFFALSE 56181
// begin hc_class = 13 ;
56136: LD_ADDR_OWVAR 28
56140: PUSH
56141: LD_INT 13
56143: ST_TO_ADDR
// hc_gallery =  ;
56144: LD_ADDR_OWVAR 33
56148: PUSH
56149: LD_STRING 
56151: ST_TO_ADDR
// animal := CreateHuman ;
56152: LD_ADDR_VAR 0 12
56156: PUSH
56157: CALL_OW 44
56161: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56162: LD_VAR 0 12
56166: PPUSH
56167: LD_VAR 0 8
56171: PPUSH
56172: LD_INT 0
56174: PPUSH
56175: CALL 57890 0 3
// end ;
56179: GO 56133
56181: POP
56182: POP
// if fishes then
56183: LD_VAR 0 7
56187: IFFALSE 56254
// for i = 1 to fishes do
56189: LD_ADDR_VAR 0 11
56193: PUSH
56194: DOUBLE
56195: LD_INT 1
56197: DEC
56198: ST_TO_ADDR
56199: LD_VAR 0 7
56203: PUSH
56204: FOR_TO
56205: IFFALSE 56252
// begin hc_class = 20 ;
56207: LD_ADDR_OWVAR 28
56211: PUSH
56212: LD_INT 20
56214: ST_TO_ADDR
// hc_gallery =  ;
56215: LD_ADDR_OWVAR 33
56219: PUSH
56220: LD_STRING 
56222: ST_TO_ADDR
// animal := CreateHuman ;
56223: LD_ADDR_VAR 0 12
56227: PUSH
56228: CALL_OW 44
56232: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56233: LD_VAR 0 12
56237: PPUSH
56238: LD_VAR 0 9
56242: PPUSH
56243: LD_INT 0
56245: PPUSH
56246: CALL 57890 0 3
// end ;
56250: GO 56204
56252: POP
56253: POP
// end ;
56254: LD_VAR 0 10
56258: RET
// export function WantHeal ( sci , unit ) ; begin
56259: LD_INT 0
56261: PPUSH
// if GetTaskList ( sci ) > 0 then
56262: LD_VAR 0 1
56266: PPUSH
56267: CALL_OW 437
56271: PUSH
56272: LD_INT 0
56274: GREATER
56275: IFFALSE 56345
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56277: LD_VAR 0 1
56281: PPUSH
56282: CALL_OW 437
56286: PUSH
56287: LD_INT 1
56289: ARRAY
56290: PUSH
56291: LD_INT 1
56293: ARRAY
56294: PUSH
56295: LD_STRING l
56297: EQUAL
56298: PUSH
56299: LD_VAR 0 1
56303: PPUSH
56304: CALL_OW 437
56308: PUSH
56309: LD_INT 1
56311: ARRAY
56312: PUSH
56313: LD_INT 4
56315: ARRAY
56316: PUSH
56317: LD_VAR 0 2
56321: EQUAL
56322: AND
56323: IFFALSE 56335
// result := true else
56325: LD_ADDR_VAR 0 3
56329: PUSH
56330: LD_INT 1
56332: ST_TO_ADDR
56333: GO 56343
// result := false ;
56335: LD_ADDR_VAR 0 3
56339: PUSH
56340: LD_INT 0
56342: ST_TO_ADDR
// end else
56343: GO 56353
// result := false ;
56345: LD_ADDR_VAR 0 3
56349: PUSH
56350: LD_INT 0
56352: ST_TO_ADDR
// end ;
56353: LD_VAR 0 3
56357: RET
// export function HealTarget ( sci ) ; begin
56358: LD_INT 0
56360: PPUSH
// if not sci then
56361: LD_VAR 0 1
56365: NOT
56366: IFFALSE 56370
// exit ;
56368: GO 56435
// result := 0 ;
56370: LD_ADDR_VAR 0 2
56374: PUSH
56375: LD_INT 0
56377: ST_TO_ADDR
// if GetTaskList ( sci ) then
56378: LD_VAR 0 1
56382: PPUSH
56383: CALL_OW 437
56387: IFFALSE 56435
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56389: LD_VAR 0 1
56393: PPUSH
56394: CALL_OW 437
56398: PUSH
56399: LD_INT 1
56401: ARRAY
56402: PUSH
56403: LD_INT 1
56405: ARRAY
56406: PUSH
56407: LD_STRING l
56409: EQUAL
56410: IFFALSE 56435
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56412: LD_ADDR_VAR 0 2
56416: PUSH
56417: LD_VAR 0 1
56421: PPUSH
56422: CALL_OW 437
56426: PUSH
56427: LD_INT 1
56429: ARRAY
56430: PUSH
56431: LD_INT 4
56433: ARRAY
56434: ST_TO_ADDR
// end ;
56435: LD_VAR 0 2
56439: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56440: LD_INT 0
56442: PPUSH
56443: PPUSH
56444: PPUSH
56445: PPUSH
// if not base_units then
56446: LD_VAR 0 1
56450: NOT
56451: IFFALSE 56455
// exit ;
56453: GO 56542
// result := false ;
56455: LD_ADDR_VAR 0 2
56459: PUSH
56460: LD_INT 0
56462: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56463: LD_ADDR_VAR 0 5
56467: PUSH
56468: LD_VAR 0 1
56472: PPUSH
56473: LD_INT 21
56475: PUSH
56476: LD_INT 3
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PPUSH
56483: CALL_OW 72
56487: ST_TO_ADDR
// if not tmp then
56488: LD_VAR 0 5
56492: NOT
56493: IFFALSE 56497
// exit ;
56495: GO 56542
// for i in tmp do
56497: LD_ADDR_VAR 0 3
56501: PUSH
56502: LD_VAR 0 5
56506: PUSH
56507: FOR_IN
56508: IFFALSE 56540
// begin result := EnemyInRange ( i , 22 ) ;
56510: LD_ADDR_VAR 0 2
56514: PUSH
56515: LD_VAR 0 3
56519: PPUSH
56520: LD_INT 22
56522: PPUSH
56523: CALL 54211 0 2
56527: ST_TO_ADDR
// if result then
56528: LD_VAR 0 2
56532: IFFALSE 56538
// exit ;
56534: POP
56535: POP
56536: GO 56542
// end ;
56538: GO 56507
56540: POP
56541: POP
// end ;
56542: LD_VAR 0 2
56546: RET
// export function FilterByTag ( units , tag ) ; begin
56547: LD_INT 0
56549: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
56550: LD_ADDR_VAR 0 3
56554: PUSH
56555: LD_VAR 0 1
56559: PPUSH
56560: LD_INT 120
56562: PUSH
56563: LD_VAR 0 2
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PPUSH
56572: CALL_OW 72
56576: ST_TO_ADDR
// end ;
56577: LD_VAR 0 3
56581: RET
// export function IsDriver ( un ) ; begin
56582: LD_INT 0
56584: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56585: LD_ADDR_VAR 0 2
56589: PUSH
56590: LD_VAR 0 1
56594: PUSH
56595: LD_INT 55
56597: PUSH
56598: EMPTY
56599: LIST
56600: PPUSH
56601: CALL_OW 69
56605: IN
56606: ST_TO_ADDR
// end ;
56607: LD_VAR 0 2
56611: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56612: LD_INT 0
56614: PPUSH
56615: PPUSH
// list := [ ] ;
56616: LD_ADDR_VAR 0 5
56620: PUSH
56621: EMPTY
56622: ST_TO_ADDR
// case d of 0 :
56623: LD_VAR 0 3
56627: PUSH
56628: LD_INT 0
56630: DOUBLE
56631: EQUAL
56632: IFTRUE 56636
56634: GO 56769
56636: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56637: LD_ADDR_VAR 0 5
56641: PUSH
56642: LD_VAR 0 1
56646: PUSH
56647: LD_INT 4
56649: MINUS
56650: PUSH
56651: LD_VAR 0 2
56655: PUSH
56656: LD_INT 4
56658: MINUS
56659: PUSH
56660: LD_INT 2
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: LIST
56667: PUSH
56668: LD_VAR 0 1
56672: PUSH
56673: LD_INT 3
56675: MINUS
56676: PUSH
56677: LD_VAR 0 2
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: LIST
56689: PUSH
56690: LD_VAR 0 1
56694: PUSH
56695: LD_INT 4
56697: PLUS
56698: PUSH
56699: LD_VAR 0 2
56703: PUSH
56704: LD_INT 4
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: LIST
56711: PUSH
56712: LD_VAR 0 1
56716: PUSH
56717: LD_INT 3
56719: PLUS
56720: PUSH
56721: LD_VAR 0 2
56725: PUSH
56726: LD_INT 3
56728: PLUS
56729: PUSH
56730: LD_INT 5
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: LIST
56737: PUSH
56738: LD_VAR 0 1
56742: PUSH
56743: LD_VAR 0 2
56747: PUSH
56748: LD_INT 4
56750: PLUS
56751: PUSH
56752: LD_INT 0
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: LIST
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: ST_TO_ADDR
// end ; 1 :
56767: GO 57467
56769: LD_INT 1
56771: DOUBLE
56772: EQUAL
56773: IFTRUE 56777
56775: GO 56910
56777: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56778: LD_ADDR_VAR 0 5
56782: PUSH
56783: LD_VAR 0 1
56787: PUSH
56788: LD_VAR 0 2
56792: PUSH
56793: LD_INT 4
56795: MINUS
56796: PUSH
56797: LD_INT 3
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: LIST
56804: PUSH
56805: LD_VAR 0 1
56809: PUSH
56810: LD_INT 3
56812: MINUS
56813: PUSH
56814: LD_VAR 0 2
56818: PUSH
56819: LD_INT 3
56821: MINUS
56822: PUSH
56823: LD_INT 2
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: LIST
56830: PUSH
56831: LD_VAR 0 1
56835: PUSH
56836: LD_INT 4
56838: MINUS
56839: PUSH
56840: LD_VAR 0 2
56844: PUSH
56845: LD_INT 1
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: LIST
56852: PUSH
56853: LD_VAR 0 1
56857: PUSH
56858: LD_VAR 0 2
56862: PUSH
56863: LD_INT 3
56865: PLUS
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: LIST
56874: PUSH
56875: LD_VAR 0 1
56879: PUSH
56880: LD_INT 4
56882: PLUS
56883: PUSH
56884: LD_VAR 0 2
56888: PUSH
56889: LD_INT 4
56891: PLUS
56892: PUSH
56893: LD_INT 5
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: LIST
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: ST_TO_ADDR
// end ; 2 :
56908: GO 57467
56910: LD_INT 2
56912: DOUBLE
56913: EQUAL
56914: IFTRUE 56918
56916: GO 57047
56918: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56919: LD_ADDR_VAR 0 5
56923: PUSH
56924: LD_VAR 0 1
56928: PUSH
56929: LD_VAR 0 2
56933: PUSH
56934: LD_INT 3
56936: MINUS
56937: PUSH
56938: LD_INT 3
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: LIST
56945: PUSH
56946: LD_VAR 0 1
56950: PUSH
56951: LD_INT 4
56953: PLUS
56954: PUSH
56955: LD_VAR 0 2
56959: PUSH
56960: LD_INT 4
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: LIST
56967: PUSH
56968: LD_VAR 0 1
56972: PUSH
56973: LD_VAR 0 2
56977: PUSH
56978: LD_INT 4
56980: PLUS
56981: PUSH
56982: LD_INT 0
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: LIST
56989: PUSH
56990: LD_VAR 0 1
56994: PUSH
56995: LD_INT 3
56997: MINUS
56998: PUSH
56999: LD_VAR 0 2
57003: PUSH
57004: LD_INT 1
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: LIST
57011: PUSH
57012: LD_VAR 0 1
57016: PUSH
57017: LD_INT 4
57019: MINUS
57020: PUSH
57021: LD_VAR 0 2
57025: PUSH
57026: LD_INT 4
57028: MINUS
57029: PUSH
57030: LD_INT 2
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: LIST
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: ST_TO_ADDR
// end ; 3 :
57045: GO 57467
57047: LD_INT 3
57049: DOUBLE
57050: EQUAL
57051: IFTRUE 57055
57053: GO 57188
57055: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57056: LD_ADDR_VAR 0 5
57060: PUSH
57061: LD_VAR 0 1
57065: PUSH
57066: LD_INT 3
57068: PLUS
57069: PUSH
57070: LD_VAR 0 2
57074: PUSH
57075: LD_INT 4
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: LIST
57082: PUSH
57083: LD_VAR 0 1
57087: PUSH
57088: LD_INT 4
57090: PLUS
57091: PUSH
57092: LD_VAR 0 2
57096: PUSH
57097: LD_INT 4
57099: PLUS
57100: PUSH
57101: LD_INT 5
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: LIST
57108: PUSH
57109: LD_VAR 0 1
57113: PUSH
57114: LD_INT 4
57116: MINUS
57117: PUSH
57118: LD_VAR 0 2
57122: PUSH
57123: LD_INT 1
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: LIST
57130: PUSH
57131: LD_VAR 0 1
57135: PUSH
57136: LD_VAR 0 2
57140: PUSH
57141: LD_INT 4
57143: MINUS
57144: PUSH
57145: LD_INT 3
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: LIST
57152: PUSH
57153: LD_VAR 0 1
57157: PUSH
57158: LD_INT 3
57160: MINUS
57161: PUSH
57162: LD_VAR 0 2
57166: PUSH
57167: LD_INT 3
57169: MINUS
57170: PUSH
57171: LD_INT 2
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: LIST
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: ST_TO_ADDR
// end ; 4 :
57186: GO 57467
57188: LD_INT 4
57190: DOUBLE
57191: EQUAL
57192: IFTRUE 57196
57194: GO 57329
57196: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57197: LD_ADDR_VAR 0 5
57201: PUSH
57202: LD_VAR 0 1
57206: PUSH
57207: LD_VAR 0 2
57211: PUSH
57212: LD_INT 4
57214: PLUS
57215: PUSH
57216: LD_INT 0
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: LIST
57223: PUSH
57224: LD_VAR 0 1
57228: PUSH
57229: LD_INT 3
57231: PLUS
57232: PUSH
57233: LD_VAR 0 2
57237: PUSH
57238: LD_INT 3
57240: PLUS
57241: PUSH
57242: LD_INT 5
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: LIST
57249: PUSH
57250: LD_VAR 0 1
57254: PUSH
57255: LD_INT 4
57257: PLUS
57258: PUSH
57259: LD_VAR 0 2
57263: PUSH
57264: LD_INT 4
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: LIST
57271: PUSH
57272: LD_VAR 0 1
57276: PUSH
57277: LD_VAR 0 2
57281: PUSH
57282: LD_INT 3
57284: MINUS
57285: PUSH
57286: LD_INT 3
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: LIST
57293: PUSH
57294: LD_VAR 0 1
57298: PUSH
57299: LD_INT 4
57301: MINUS
57302: PUSH
57303: LD_VAR 0 2
57307: PUSH
57308: LD_INT 4
57310: MINUS
57311: PUSH
57312: LD_INT 2
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: LIST
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: ST_TO_ADDR
// end ; 5 :
57327: GO 57467
57329: LD_INT 5
57331: DOUBLE
57332: EQUAL
57333: IFTRUE 57337
57335: GO 57466
57337: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57338: LD_ADDR_VAR 0 5
57342: PUSH
57343: LD_VAR 0 1
57347: PUSH
57348: LD_INT 4
57350: MINUS
57351: PUSH
57352: LD_VAR 0 2
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: LIST
57364: PUSH
57365: LD_VAR 0 1
57369: PUSH
57370: LD_VAR 0 2
57374: PUSH
57375: LD_INT 4
57377: MINUS
57378: PUSH
57379: LD_INT 3
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: LIST
57386: PUSH
57387: LD_VAR 0 1
57391: PUSH
57392: LD_INT 4
57394: PLUS
57395: PUSH
57396: LD_VAR 0 2
57400: PUSH
57401: LD_INT 4
57403: PLUS
57404: PUSH
57405: LD_INT 5
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: LIST
57412: PUSH
57413: LD_VAR 0 1
57417: PUSH
57418: LD_INT 3
57420: PLUS
57421: PUSH
57422: LD_VAR 0 2
57426: PUSH
57427: LD_INT 4
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: LIST
57434: PUSH
57435: LD_VAR 0 1
57439: PUSH
57440: LD_VAR 0 2
57444: PUSH
57445: LD_INT 3
57447: PLUS
57448: PUSH
57449: LD_INT 0
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: LIST
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: ST_TO_ADDR
// end ; end ;
57464: GO 57467
57466: POP
// result := list ;
57467: LD_ADDR_VAR 0 4
57471: PUSH
57472: LD_VAR 0 5
57476: ST_TO_ADDR
// end ;
57477: LD_VAR 0 4
57481: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57482: LD_INT 0
57484: PPUSH
57485: PPUSH
57486: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57487: LD_VAR 0 1
57491: NOT
57492: PUSH
57493: LD_VAR 0 2
57497: PUSH
57498: LD_INT 1
57500: PUSH
57501: LD_INT 2
57503: PUSH
57504: LD_INT 3
57506: PUSH
57507: LD_INT 4
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: IN
57516: NOT
57517: OR
57518: IFFALSE 57522
// exit ;
57520: GO 57614
// tmp := [ ] ;
57522: LD_ADDR_VAR 0 5
57526: PUSH
57527: EMPTY
57528: ST_TO_ADDR
// for i in units do
57529: LD_ADDR_VAR 0 4
57533: PUSH
57534: LD_VAR 0 1
57538: PUSH
57539: FOR_IN
57540: IFFALSE 57583
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
57542: LD_ADDR_VAR 0 5
57546: PUSH
57547: LD_VAR 0 5
57551: PPUSH
57552: LD_VAR 0 5
57556: PUSH
57557: LD_INT 1
57559: PLUS
57560: PPUSH
57561: LD_VAR 0 4
57565: PPUSH
57566: LD_VAR 0 2
57570: PPUSH
57571: CALL_OW 259
57575: PPUSH
57576: CALL_OW 2
57580: ST_TO_ADDR
57581: GO 57539
57583: POP
57584: POP
// if not tmp then
57585: LD_VAR 0 5
57589: NOT
57590: IFFALSE 57594
// exit ;
57592: GO 57614
// result := SortListByListDesc ( units , tmp ) ;
57594: LD_ADDR_VAR 0 3
57598: PUSH
57599: LD_VAR 0 1
57603: PPUSH
57604: LD_VAR 0 5
57608: PPUSH
57609: CALL_OW 77
57613: ST_TO_ADDR
// end ;
57614: LD_VAR 0 3
57618: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57619: LD_INT 0
57621: PPUSH
57622: PPUSH
57623: PPUSH
// result := false ;
57624: LD_ADDR_VAR 0 3
57628: PUSH
57629: LD_INT 0
57631: ST_TO_ADDR
// x := GetX ( building ) ;
57632: LD_ADDR_VAR 0 4
57636: PUSH
57637: LD_VAR 0 2
57641: PPUSH
57642: CALL_OW 250
57646: ST_TO_ADDR
// y := GetY ( building ) ;
57647: LD_ADDR_VAR 0 5
57651: PUSH
57652: LD_VAR 0 2
57656: PPUSH
57657: CALL_OW 251
57661: ST_TO_ADDR
// if not building or not x or not y then
57662: LD_VAR 0 2
57666: NOT
57667: PUSH
57668: LD_VAR 0 4
57672: NOT
57673: OR
57674: PUSH
57675: LD_VAR 0 5
57679: NOT
57680: OR
57681: IFFALSE 57685
// exit ;
57683: GO 57777
// if GetTaskList ( unit ) then
57685: LD_VAR 0 1
57689: PPUSH
57690: CALL_OW 437
57694: IFFALSE 57777
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57696: LD_STRING e
57698: PUSH
57699: LD_VAR 0 1
57703: PPUSH
57704: CALL_OW 437
57708: PUSH
57709: LD_INT 1
57711: ARRAY
57712: PUSH
57713: LD_INT 1
57715: ARRAY
57716: EQUAL
57717: PUSH
57718: LD_VAR 0 4
57722: PUSH
57723: LD_VAR 0 1
57727: PPUSH
57728: CALL_OW 437
57732: PUSH
57733: LD_INT 1
57735: ARRAY
57736: PUSH
57737: LD_INT 2
57739: ARRAY
57740: EQUAL
57741: AND
57742: PUSH
57743: LD_VAR 0 5
57747: PUSH
57748: LD_VAR 0 1
57752: PPUSH
57753: CALL_OW 437
57757: PUSH
57758: LD_INT 1
57760: ARRAY
57761: PUSH
57762: LD_INT 3
57764: ARRAY
57765: EQUAL
57766: AND
57767: IFFALSE 57777
// result := true end ;
57769: LD_ADDR_VAR 0 3
57773: PUSH
57774: LD_INT 1
57776: ST_TO_ADDR
// end ;
57777: LD_VAR 0 3
57781: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57782: LD_INT 0
57784: PPUSH
// result := false ;
57785: LD_ADDR_VAR 0 4
57789: PUSH
57790: LD_INT 0
57792: ST_TO_ADDR
// if GetTaskList ( unit ) then
57793: LD_VAR 0 1
57797: PPUSH
57798: CALL_OW 437
57802: IFFALSE 57885
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57804: LD_STRING M
57806: PUSH
57807: LD_VAR 0 1
57811: PPUSH
57812: CALL_OW 437
57816: PUSH
57817: LD_INT 1
57819: ARRAY
57820: PUSH
57821: LD_INT 1
57823: ARRAY
57824: EQUAL
57825: PUSH
57826: LD_VAR 0 2
57830: PUSH
57831: LD_VAR 0 1
57835: PPUSH
57836: CALL_OW 437
57840: PUSH
57841: LD_INT 1
57843: ARRAY
57844: PUSH
57845: LD_INT 2
57847: ARRAY
57848: EQUAL
57849: AND
57850: PUSH
57851: LD_VAR 0 3
57855: PUSH
57856: LD_VAR 0 1
57860: PPUSH
57861: CALL_OW 437
57865: PUSH
57866: LD_INT 1
57868: ARRAY
57869: PUSH
57870: LD_INT 3
57872: ARRAY
57873: EQUAL
57874: AND
57875: IFFALSE 57885
// result := true ;
57877: LD_ADDR_VAR 0 4
57881: PUSH
57882: LD_INT 1
57884: ST_TO_ADDR
// end ; end ;
57885: LD_VAR 0 4
57889: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57890: LD_INT 0
57892: PPUSH
57893: PPUSH
57894: PPUSH
57895: PPUSH
// if not unit or not area then
57896: LD_VAR 0 1
57900: NOT
57901: PUSH
57902: LD_VAR 0 2
57906: NOT
57907: OR
57908: IFFALSE 57912
// exit ;
57910: GO 58076
// tmp := AreaToList ( area , i ) ;
57912: LD_ADDR_VAR 0 6
57916: PUSH
57917: LD_VAR 0 2
57921: PPUSH
57922: LD_VAR 0 5
57926: PPUSH
57927: CALL_OW 517
57931: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57932: LD_ADDR_VAR 0 5
57936: PUSH
57937: DOUBLE
57938: LD_INT 1
57940: DEC
57941: ST_TO_ADDR
57942: LD_VAR 0 6
57946: PUSH
57947: LD_INT 1
57949: ARRAY
57950: PUSH
57951: FOR_TO
57952: IFFALSE 58074
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57954: LD_ADDR_VAR 0 7
57958: PUSH
57959: LD_VAR 0 6
57963: PUSH
57964: LD_INT 1
57966: ARRAY
57967: PUSH
57968: LD_VAR 0 5
57972: ARRAY
57973: PUSH
57974: LD_VAR 0 6
57978: PUSH
57979: LD_INT 2
57981: ARRAY
57982: PUSH
57983: LD_VAR 0 5
57987: ARRAY
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
57993: LD_VAR 0 7
57997: PUSH
57998: LD_INT 1
58000: ARRAY
58001: PPUSH
58002: LD_VAR 0 7
58006: PUSH
58007: LD_INT 2
58009: ARRAY
58010: PPUSH
58011: CALL_OW 428
58015: PUSH
58016: LD_INT 0
58018: EQUAL
58019: IFFALSE 58072
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58021: LD_VAR 0 1
58025: PPUSH
58026: LD_VAR 0 7
58030: PUSH
58031: LD_INT 1
58033: ARRAY
58034: PPUSH
58035: LD_VAR 0 7
58039: PUSH
58040: LD_INT 2
58042: ARRAY
58043: PPUSH
58044: LD_VAR 0 3
58048: PPUSH
58049: CALL_OW 48
// result := IsPlaced ( unit ) ;
58053: LD_ADDR_VAR 0 4
58057: PUSH
58058: LD_VAR 0 1
58062: PPUSH
58063: CALL_OW 305
58067: ST_TO_ADDR
// exit ;
58068: POP
58069: POP
58070: GO 58076
// end ; end ;
58072: GO 57951
58074: POP
58075: POP
// end ;
58076: LD_VAR 0 4
58080: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58081: LD_INT 0
58083: PPUSH
58084: PPUSH
58085: PPUSH
// if not side or side > 8 then
58086: LD_VAR 0 1
58090: NOT
58091: PUSH
58092: LD_VAR 0 1
58096: PUSH
58097: LD_INT 8
58099: GREATER
58100: OR
58101: IFFALSE 58105
// exit ;
58103: GO 58292
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58105: LD_ADDR_VAR 0 4
58109: PUSH
58110: LD_INT 22
58112: PUSH
58113: LD_VAR 0 1
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 21
58124: PUSH
58125: LD_INT 3
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PPUSH
58136: CALL_OW 69
58140: ST_TO_ADDR
// if not tmp then
58141: LD_VAR 0 4
58145: NOT
58146: IFFALSE 58150
// exit ;
58148: GO 58292
// enable_addtolog := true ;
58150: LD_ADDR_OWVAR 81
58154: PUSH
58155: LD_INT 1
58157: ST_TO_ADDR
// AddToLog ( [ ) ;
58158: LD_STRING [
58160: PPUSH
58161: CALL_OW 561
// for i in tmp do
58165: LD_ADDR_VAR 0 3
58169: PUSH
58170: LD_VAR 0 4
58174: PUSH
58175: FOR_IN
58176: IFFALSE 58283
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58178: LD_STRING [
58180: PUSH
58181: LD_VAR 0 3
58185: PPUSH
58186: CALL_OW 266
58190: STR
58191: PUSH
58192: LD_STRING , 
58194: STR
58195: PUSH
58196: LD_VAR 0 3
58200: PPUSH
58201: CALL_OW 250
58205: STR
58206: PUSH
58207: LD_STRING , 
58209: STR
58210: PUSH
58211: LD_VAR 0 3
58215: PPUSH
58216: CALL_OW 251
58220: STR
58221: PUSH
58222: LD_STRING , 
58224: STR
58225: PUSH
58226: LD_VAR 0 3
58230: PPUSH
58231: CALL_OW 254
58235: STR
58236: PUSH
58237: LD_STRING , 
58239: STR
58240: PUSH
58241: LD_VAR 0 3
58245: PPUSH
58246: LD_INT 1
58248: PPUSH
58249: CALL_OW 268
58253: STR
58254: PUSH
58255: LD_STRING , 
58257: STR
58258: PUSH
58259: LD_VAR 0 3
58263: PPUSH
58264: LD_INT 2
58266: PPUSH
58267: CALL_OW 268
58271: STR
58272: PUSH
58273: LD_STRING ],
58275: STR
58276: PPUSH
58277: CALL_OW 561
// end ;
58281: GO 58175
58283: POP
58284: POP
// AddToLog ( ]; ) ;
58285: LD_STRING ];
58287: PPUSH
58288: CALL_OW 561
// end ;
58292: LD_VAR 0 2
58296: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58297: LD_INT 0
58299: PPUSH
58300: PPUSH
58301: PPUSH
58302: PPUSH
58303: PPUSH
// if not area or not rate or not max then
58304: LD_VAR 0 1
58308: NOT
58309: PUSH
58310: LD_VAR 0 2
58314: NOT
58315: OR
58316: PUSH
58317: LD_VAR 0 4
58321: NOT
58322: OR
58323: IFFALSE 58327
// exit ;
58325: GO 58516
// while 1 do
58327: LD_INT 1
58329: IFFALSE 58516
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58331: LD_ADDR_VAR 0 9
58335: PUSH
58336: LD_VAR 0 1
58340: PPUSH
58341: LD_INT 1
58343: PPUSH
58344: CALL_OW 287
58348: PUSH
58349: LD_INT 10
58351: MUL
58352: ST_TO_ADDR
// r := rate / 10 ;
58353: LD_ADDR_VAR 0 7
58357: PUSH
58358: LD_VAR 0 2
58362: PUSH
58363: LD_INT 10
58365: DIVREAL
58366: ST_TO_ADDR
// time := 1 1$00 ;
58367: LD_ADDR_VAR 0 8
58371: PUSH
58372: LD_INT 2100
58374: ST_TO_ADDR
// if amount < min then
58375: LD_VAR 0 9
58379: PUSH
58380: LD_VAR 0 3
58384: LESS
58385: IFFALSE 58403
// r := r * 2 else
58387: LD_ADDR_VAR 0 7
58391: PUSH
58392: LD_VAR 0 7
58396: PUSH
58397: LD_INT 2
58399: MUL
58400: ST_TO_ADDR
58401: GO 58429
// if amount > max then
58403: LD_VAR 0 9
58407: PUSH
58408: LD_VAR 0 4
58412: GREATER
58413: IFFALSE 58429
// r := r / 2 ;
58415: LD_ADDR_VAR 0 7
58419: PUSH
58420: LD_VAR 0 7
58424: PUSH
58425: LD_INT 2
58427: DIVREAL
58428: ST_TO_ADDR
// time := time / r ;
58429: LD_ADDR_VAR 0 8
58433: PUSH
58434: LD_VAR 0 8
58438: PUSH
58439: LD_VAR 0 7
58443: DIVREAL
58444: ST_TO_ADDR
// if time < 0 then
58445: LD_VAR 0 8
58449: PUSH
58450: LD_INT 0
58452: LESS
58453: IFFALSE 58470
// time := time * - 1 ;
58455: LD_ADDR_VAR 0 8
58459: PUSH
58460: LD_VAR 0 8
58464: PUSH
58465: LD_INT 1
58467: NEG
58468: MUL
58469: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
58470: LD_VAR 0 8
58474: PUSH
58475: LD_INT 35
58477: PPUSH
58478: LD_INT 875
58480: PPUSH
58481: CALL_OW 12
58485: PLUS
58486: PPUSH
58487: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58491: LD_INT 1
58493: PPUSH
58494: LD_INT 5
58496: PPUSH
58497: CALL_OW 12
58501: PPUSH
58502: LD_VAR 0 1
58506: PPUSH
58507: LD_INT 1
58509: PPUSH
58510: CALL_OW 55
// end ;
58514: GO 58327
// end ;
58516: LD_VAR 0 5
58520: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58521: LD_INT 0
58523: PPUSH
58524: PPUSH
58525: PPUSH
58526: PPUSH
58527: PPUSH
58528: PPUSH
58529: PPUSH
58530: PPUSH
// if not turrets or not factories then
58531: LD_VAR 0 1
58535: NOT
58536: PUSH
58537: LD_VAR 0 2
58541: NOT
58542: OR
58543: IFFALSE 58547
// exit ;
58545: GO 58854
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58547: LD_ADDR_VAR 0 10
58551: PUSH
58552: LD_INT 5
58554: PUSH
58555: LD_INT 6
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 2
58564: PUSH
58565: LD_INT 4
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 3
58574: PUSH
58575: LD_INT 5
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 24
58589: PUSH
58590: LD_INT 25
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 23
58599: PUSH
58600: LD_INT 27
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 42
58613: PUSH
58614: LD_INT 43
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 44
58623: PUSH
58624: LD_INT 46
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 45
58633: PUSH
58634: LD_INT 47
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: LIST
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: LIST
58650: ST_TO_ADDR
// result := [ ] ;
58651: LD_ADDR_VAR 0 3
58655: PUSH
58656: EMPTY
58657: ST_TO_ADDR
// for i in turrets do
58658: LD_ADDR_VAR 0 4
58662: PUSH
58663: LD_VAR 0 1
58667: PUSH
58668: FOR_IN
58669: IFFALSE 58852
// begin nat := GetNation ( i ) ;
58671: LD_ADDR_VAR 0 7
58675: PUSH
58676: LD_VAR 0 4
58680: PPUSH
58681: CALL_OW 248
58685: ST_TO_ADDR
// weapon := 0 ;
58686: LD_ADDR_VAR 0 8
58690: PUSH
58691: LD_INT 0
58693: ST_TO_ADDR
// if not nat then
58694: LD_VAR 0 7
58698: NOT
58699: IFFALSE 58703
// continue ;
58701: GO 58668
// for j in list [ nat ] do
58703: LD_ADDR_VAR 0 5
58707: PUSH
58708: LD_VAR 0 10
58712: PUSH
58713: LD_VAR 0 7
58717: ARRAY
58718: PUSH
58719: FOR_IN
58720: IFFALSE 58761
// if GetBWeapon ( i ) = j [ 1 ] then
58722: LD_VAR 0 4
58726: PPUSH
58727: CALL_OW 269
58731: PUSH
58732: LD_VAR 0 5
58736: PUSH
58737: LD_INT 1
58739: ARRAY
58740: EQUAL
58741: IFFALSE 58759
// begin weapon := j [ 2 ] ;
58743: LD_ADDR_VAR 0 8
58747: PUSH
58748: LD_VAR 0 5
58752: PUSH
58753: LD_INT 2
58755: ARRAY
58756: ST_TO_ADDR
// break ;
58757: GO 58761
// end ;
58759: GO 58719
58761: POP
58762: POP
// if not weapon then
58763: LD_VAR 0 8
58767: NOT
58768: IFFALSE 58772
// continue ;
58770: GO 58668
// for k in factories do
58772: LD_ADDR_VAR 0 6
58776: PUSH
58777: LD_VAR 0 2
58781: PUSH
58782: FOR_IN
58783: IFFALSE 58848
// begin weapons := AvailableWeaponList ( k ) ;
58785: LD_ADDR_VAR 0 9
58789: PUSH
58790: LD_VAR 0 6
58794: PPUSH
58795: CALL_OW 478
58799: ST_TO_ADDR
// if not weapons then
58800: LD_VAR 0 9
58804: NOT
58805: IFFALSE 58809
// continue ;
58807: GO 58782
// if weapon in weapons then
58809: LD_VAR 0 8
58813: PUSH
58814: LD_VAR 0 9
58818: IN
58819: IFFALSE 58846
// begin result := [ i , weapon ] ;
58821: LD_ADDR_VAR 0 3
58825: PUSH
58826: LD_VAR 0 4
58830: PUSH
58831: LD_VAR 0 8
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: ST_TO_ADDR
// exit ;
58840: POP
58841: POP
58842: POP
58843: POP
58844: GO 58854
// end ; end ;
58846: GO 58782
58848: POP
58849: POP
// end ;
58850: GO 58668
58852: POP
58853: POP
// end ;
58854: LD_VAR 0 3
58858: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58859: LD_INT 0
58861: PPUSH
// if not side or side > 8 then
58862: LD_VAR 0 3
58866: NOT
58867: PUSH
58868: LD_VAR 0 3
58872: PUSH
58873: LD_INT 8
58875: GREATER
58876: OR
58877: IFFALSE 58881
// exit ;
58879: GO 58940
// if not range then
58881: LD_VAR 0 4
58885: NOT
58886: IFFALSE 58897
// range := - 12 ;
58888: LD_ADDR_VAR 0 4
58892: PUSH
58893: LD_INT 12
58895: NEG
58896: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58897: LD_VAR 0 1
58901: PPUSH
58902: LD_VAR 0 2
58906: PPUSH
58907: LD_VAR 0 3
58911: PPUSH
58912: LD_VAR 0 4
58916: PPUSH
58917: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58921: LD_VAR 0 1
58925: PPUSH
58926: LD_VAR 0 2
58930: PPUSH
58931: LD_VAR 0 3
58935: PPUSH
58936: CALL_OW 331
// end ;
58940: LD_VAR 0 5
58944: RET
// export function Video ( mode ) ; begin
58945: LD_INT 0
58947: PPUSH
// ingame_video = mode ;
58948: LD_ADDR_OWVAR 52
58952: PUSH
58953: LD_VAR 0 1
58957: ST_TO_ADDR
// interface_hidden = mode ;
58958: LD_ADDR_OWVAR 54
58962: PUSH
58963: LD_VAR 0 1
58967: ST_TO_ADDR
// end ;
58968: LD_VAR 0 2
58972: RET
// export function Join ( array , element ) ; begin
58973: LD_INT 0
58975: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58976: LD_ADDR_VAR 0 3
58980: PUSH
58981: LD_VAR 0 1
58985: PPUSH
58986: LD_VAR 0 1
58990: PUSH
58991: LD_INT 1
58993: PLUS
58994: PPUSH
58995: LD_VAR 0 2
58999: PPUSH
59000: CALL_OW 1
59004: ST_TO_ADDR
// end ;
59005: LD_VAR 0 3
59009: RET
// export function JoinUnion ( array , element ) ; begin
59010: LD_INT 0
59012: PPUSH
// result := array union element ;
59013: LD_ADDR_VAR 0 3
59017: PUSH
59018: LD_VAR 0 1
59022: PUSH
59023: LD_VAR 0 2
59027: UNION
59028: ST_TO_ADDR
// end ;
59029: LD_VAR 0 3
59033: RET
// export function GetBehemoths ( side ) ; begin
59034: LD_INT 0
59036: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
59037: LD_ADDR_VAR 0 2
59041: PUSH
59042: LD_INT 22
59044: PUSH
59045: LD_VAR 0 1
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 31
59056: PUSH
59057: LD_INT 25
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PPUSH
59068: CALL_OW 69
59072: ST_TO_ADDR
// end ;
59073: LD_VAR 0 2
59077: RET
// export function Shuffle ( array ) ; var i , index ; begin
59078: LD_INT 0
59080: PPUSH
59081: PPUSH
59082: PPUSH
// result := [ ] ;
59083: LD_ADDR_VAR 0 2
59087: PUSH
59088: EMPTY
59089: ST_TO_ADDR
// if not array then
59090: LD_VAR 0 1
59094: NOT
59095: IFFALSE 59099
// exit ;
59097: GO 59198
// Randomize ;
59099: CALL_OW 10
// for i = array downto 1 do
59103: LD_ADDR_VAR 0 3
59107: PUSH
59108: DOUBLE
59109: LD_VAR 0 1
59113: INC
59114: ST_TO_ADDR
59115: LD_INT 1
59117: PUSH
59118: FOR_DOWNTO
59119: IFFALSE 59196
// begin index := rand ( 1 , array ) ;
59121: LD_ADDR_VAR 0 4
59125: PUSH
59126: LD_INT 1
59128: PPUSH
59129: LD_VAR 0 1
59133: PPUSH
59134: CALL_OW 12
59138: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59139: LD_ADDR_VAR 0 2
59143: PUSH
59144: LD_VAR 0 2
59148: PPUSH
59149: LD_VAR 0 2
59153: PUSH
59154: LD_INT 1
59156: PLUS
59157: PPUSH
59158: LD_VAR 0 1
59162: PUSH
59163: LD_VAR 0 4
59167: ARRAY
59168: PPUSH
59169: CALL_OW 2
59173: ST_TO_ADDR
// array := Delete ( array , index ) ;
59174: LD_ADDR_VAR 0 1
59178: PUSH
59179: LD_VAR 0 1
59183: PPUSH
59184: LD_VAR 0 4
59188: PPUSH
59189: CALL_OW 3
59193: ST_TO_ADDR
// end ;
59194: GO 59118
59196: POP
59197: POP
// end ;
59198: LD_VAR 0 2
59202: RET
// export function GetBaseMaterials ( base ) ; begin
59203: LD_INT 0
59205: PPUSH
// result := [ 0 , 0 , 0 ] ;
59206: LD_ADDR_VAR 0 2
59210: PUSH
59211: LD_INT 0
59213: PUSH
59214: LD_INT 0
59216: PUSH
59217: LD_INT 0
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: LIST
59224: ST_TO_ADDR
// if not base then
59225: LD_VAR 0 1
59229: NOT
59230: IFFALSE 59234
// exit ;
59232: GO 59283
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59234: LD_ADDR_VAR 0 2
59238: PUSH
59239: LD_VAR 0 1
59243: PPUSH
59244: LD_INT 1
59246: PPUSH
59247: CALL_OW 275
59251: PUSH
59252: LD_VAR 0 1
59256: PPUSH
59257: LD_INT 2
59259: PPUSH
59260: CALL_OW 275
59264: PUSH
59265: LD_VAR 0 1
59269: PPUSH
59270: LD_INT 3
59272: PPUSH
59273: CALL_OW 275
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: LIST
59282: ST_TO_ADDR
// end ;
59283: LD_VAR 0 2
59287: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59288: LD_INT 0
59290: PPUSH
59291: PPUSH
// result := array ;
59292: LD_ADDR_VAR 0 3
59296: PUSH
59297: LD_VAR 0 1
59301: ST_TO_ADDR
// if size >= result then
59302: LD_VAR 0 2
59306: PUSH
59307: LD_VAR 0 3
59311: GREATEREQUAL
59312: IFFALSE 59316
// exit ;
59314: GO 59366
// if size then
59316: LD_VAR 0 2
59320: IFFALSE 59366
// for i := array downto size do
59322: LD_ADDR_VAR 0 4
59326: PUSH
59327: DOUBLE
59328: LD_VAR 0 1
59332: INC
59333: ST_TO_ADDR
59334: LD_VAR 0 2
59338: PUSH
59339: FOR_DOWNTO
59340: IFFALSE 59364
// result := Delete ( result , result ) ;
59342: LD_ADDR_VAR 0 3
59346: PUSH
59347: LD_VAR 0 3
59351: PPUSH
59352: LD_VAR 0 3
59356: PPUSH
59357: CALL_OW 3
59361: ST_TO_ADDR
59362: GO 59339
59364: POP
59365: POP
// end ;
59366: LD_VAR 0 3
59370: RET
// export function ComExit ( unit ) ; var tmp ; begin
59371: LD_INT 0
59373: PPUSH
59374: PPUSH
// if not IsInUnit ( unit ) then
59375: LD_VAR 0 1
59379: PPUSH
59380: CALL_OW 310
59384: NOT
59385: IFFALSE 59389
// exit ;
59387: GO 59449
// tmp := IsInUnit ( unit ) ;
59389: LD_ADDR_VAR 0 3
59393: PUSH
59394: LD_VAR 0 1
59398: PPUSH
59399: CALL_OW 310
59403: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59404: LD_VAR 0 3
59408: PPUSH
59409: CALL_OW 247
59413: PUSH
59414: LD_INT 2
59416: EQUAL
59417: IFFALSE 59430
// ComExitVehicle ( unit ) else
59419: LD_VAR 0 1
59423: PPUSH
59424: CALL_OW 121
59428: GO 59439
// ComExitBuilding ( unit ) ;
59430: LD_VAR 0 1
59434: PPUSH
59435: CALL_OW 122
// result := tmp ;
59439: LD_ADDR_VAR 0 2
59443: PUSH
59444: LD_VAR 0 3
59448: ST_TO_ADDR
// end ;
59449: LD_VAR 0 2
59453: RET
// export function ComExitAll ( units ) ; var i ; begin
59454: LD_INT 0
59456: PPUSH
59457: PPUSH
// if not units then
59458: LD_VAR 0 1
59462: NOT
59463: IFFALSE 59467
// exit ;
59465: GO 59493
// for i in units do
59467: LD_ADDR_VAR 0 3
59471: PUSH
59472: LD_VAR 0 1
59476: PUSH
59477: FOR_IN
59478: IFFALSE 59491
// ComExit ( i ) ;
59480: LD_VAR 0 3
59484: PPUSH
59485: CALL 59371 0 1
59489: GO 59477
59491: POP
59492: POP
// end ;
59493: LD_VAR 0 2
59497: RET
// export function ResetHc ; begin
59498: LD_INT 0
59500: PPUSH
// InitHc ;
59501: CALL_OW 19
// hc_importance := 0 ;
59505: LD_ADDR_OWVAR 32
59509: PUSH
59510: LD_INT 0
59512: ST_TO_ADDR
// end ;
59513: LD_VAR 0 1
59517: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59518: LD_INT 0
59520: PPUSH
59521: PPUSH
59522: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59523: LD_ADDR_VAR 0 6
59527: PUSH
59528: LD_VAR 0 1
59532: PUSH
59533: LD_VAR 0 3
59537: PLUS
59538: PUSH
59539: LD_INT 2
59541: DIV
59542: ST_TO_ADDR
// if _x < 0 then
59543: LD_VAR 0 6
59547: PUSH
59548: LD_INT 0
59550: LESS
59551: IFFALSE 59568
// _x := _x * - 1 ;
59553: LD_ADDR_VAR 0 6
59557: PUSH
59558: LD_VAR 0 6
59562: PUSH
59563: LD_INT 1
59565: NEG
59566: MUL
59567: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59568: LD_ADDR_VAR 0 7
59572: PUSH
59573: LD_VAR 0 2
59577: PUSH
59578: LD_VAR 0 4
59582: PLUS
59583: PUSH
59584: LD_INT 2
59586: DIV
59587: ST_TO_ADDR
// if _y < 0 then
59588: LD_VAR 0 7
59592: PUSH
59593: LD_INT 0
59595: LESS
59596: IFFALSE 59613
// _y := _y * - 1 ;
59598: LD_ADDR_VAR 0 7
59602: PUSH
59603: LD_VAR 0 7
59607: PUSH
59608: LD_INT 1
59610: NEG
59611: MUL
59612: ST_TO_ADDR
// result := [ _x , _y ] ;
59613: LD_ADDR_VAR 0 5
59617: PUSH
59618: LD_VAR 0 6
59622: PUSH
59623: LD_VAR 0 7
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: ST_TO_ADDR
// end ;
59632: LD_VAR 0 5
59636: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59637: LD_INT 0
59639: PPUSH
59640: PPUSH
59641: PPUSH
59642: PPUSH
// task := GetTaskList ( unit ) ;
59643: LD_ADDR_VAR 0 7
59647: PUSH
59648: LD_VAR 0 1
59652: PPUSH
59653: CALL_OW 437
59657: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59658: LD_VAR 0 7
59662: NOT
59663: PUSH
59664: LD_VAR 0 1
59668: PPUSH
59669: LD_VAR 0 2
59673: PPUSH
59674: CALL_OW 308
59678: NOT
59679: AND
59680: IFFALSE 59684
// exit ;
59682: GO 59802
// if IsInArea ( unit , area ) then
59684: LD_VAR 0 1
59688: PPUSH
59689: LD_VAR 0 2
59693: PPUSH
59694: CALL_OW 308
59698: IFFALSE 59716
// begin ComMoveToArea ( unit , goAway ) ;
59700: LD_VAR 0 1
59704: PPUSH
59705: LD_VAR 0 3
59709: PPUSH
59710: CALL_OW 113
// exit ;
59714: GO 59802
// end ; if task [ 1 ] [ 1 ] <> M then
59716: LD_VAR 0 7
59720: PUSH
59721: LD_INT 1
59723: ARRAY
59724: PUSH
59725: LD_INT 1
59727: ARRAY
59728: PUSH
59729: LD_STRING M
59731: NONEQUAL
59732: IFFALSE 59736
// exit ;
59734: GO 59802
// x := task [ 1 ] [ 2 ] ;
59736: LD_ADDR_VAR 0 5
59740: PUSH
59741: LD_VAR 0 7
59745: PUSH
59746: LD_INT 1
59748: ARRAY
59749: PUSH
59750: LD_INT 2
59752: ARRAY
59753: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59754: LD_ADDR_VAR 0 6
59758: PUSH
59759: LD_VAR 0 7
59763: PUSH
59764: LD_INT 1
59766: ARRAY
59767: PUSH
59768: LD_INT 3
59770: ARRAY
59771: ST_TO_ADDR
// if InArea ( x , y , area ) then
59772: LD_VAR 0 5
59776: PPUSH
59777: LD_VAR 0 6
59781: PPUSH
59782: LD_VAR 0 2
59786: PPUSH
59787: CALL_OW 309
59791: IFFALSE 59802
// ComStop ( unit ) ;
59793: LD_VAR 0 1
59797: PPUSH
59798: CALL_OW 141
// end ;
59802: LD_VAR 0 4
59806: RET
// export function Abs ( value ) ; begin
59807: LD_INT 0
59809: PPUSH
// result := value ;
59810: LD_ADDR_VAR 0 2
59814: PUSH
59815: LD_VAR 0 1
59819: ST_TO_ADDR
// if value < 0 then
59820: LD_VAR 0 1
59824: PUSH
59825: LD_INT 0
59827: LESS
59828: IFFALSE 59845
// result := value * - 1 ;
59830: LD_ADDR_VAR 0 2
59834: PUSH
59835: LD_VAR 0 1
59839: PUSH
59840: LD_INT 1
59842: NEG
59843: MUL
59844: ST_TO_ADDR
// end ;
59845: LD_VAR 0 2
59849: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59850: LD_INT 0
59852: PPUSH
59853: PPUSH
59854: PPUSH
59855: PPUSH
59856: PPUSH
59857: PPUSH
59858: PPUSH
59859: PPUSH
// if not unit or not building then
59860: LD_VAR 0 1
59864: NOT
59865: PUSH
59866: LD_VAR 0 2
59870: NOT
59871: OR
59872: IFFALSE 59876
// exit ;
59874: GO 60102
// x := GetX ( building ) ;
59876: LD_ADDR_VAR 0 4
59880: PUSH
59881: LD_VAR 0 2
59885: PPUSH
59886: CALL_OW 250
59890: ST_TO_ADDR
// y := GetY ( building ) ;
59891: LD_ADDR_VAR 0 6
59895: PUSH
59896: LD_VAR 0 2
59900: PPUSH
59901: CALL_OW 251
59905: ST_TO_ADDR
// d := GetDir ( building ) ;
59906: LD_ADDR_VAR 0 8
59910: PUSH
59911: LD_VAR 0 2
59915: PPUSH
59916: CALL_OW 254
59920: ST_TO_ADDR
// r := 4 ;
59921: LD_ADDR_VAR 0 9
59925: PUSH
59926: LD_INT 4
59928: ST_TO_ADDR
// for i := 1 to 5 do
59929: LD_ADDR_VAR 0 10
59933: PUSH
59934: DOUBLE
59935: LD_INT 1
59937: DEC
59938: ST_TO_ADDR
59939: LD_INT 5
59941: PUSH
59942: FOR_TO
59943: IFFALSE 60100
// begin _x := ShiftX ( x , d , r + i ) ;
59945: LD_ADDR_VAR 0 5
59949: PUSH
59950: LD_VAR 0 4
59954: PPUSH
59955: LD_VAR 0 8
59959: PPUSH
59960: LD_VAR 0 9
59964: PUSH
59965: LD_VAR 0 10
59969: PLUS
59970: PPUSH
59971: CALL_OW 272
59975: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59976: LD_ADDR_VAR 0 7
59980: PUSH
59981: LD_VAR 0 6
59985: PPUSH
59986: LD_VAR 0 8
59990: PPUSH
59991: LD_VAR 0 9
59995: PUSH
59996: LD_VAR 0 10
60000: PLUS
60001: PPUSH
60002: CALL_OW 273
60006: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60007: LD_VAR 0 5
60011: PPUSH
60012: LD_VAR 0 7
60016: PPUSH
60017: CALL_OW 488
60021: PUSH
60022: LD_VAR 0 5
60026: PPUSH
60027: LD_VAR 0 7
60031: PPUSH
60032: CALL_OW 428
60036: PPUSH
60037: CALL_OW 247
60041: PUSH
60042: LD_INT 3
60044: PUSH
60045: LD_INT 2
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: IN
60052: NOT
60053: AND
60054: IFFALSE 60098
// begin ComMoveXY ( unit , _x , _y ) ;
60056: LD_VAR 0 1
60060: PPUSH
60061: LD_VAR 0 5
60065: PPUSH
60066: LD_VAR 0 7
60070: PPUSH
60071: CALL_OW 111
// result := [ _x , _y ] ;
60075: LD_ADDR_VAR 0 3
60079: PUSH
60080: LD_VAR 0 5
60084: PUSH
60085: LD_VAR 0 7
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: ST_TO_ADDR
// exit ;
60094: POP
60095: POP
60096: GO 60102
// end ; end ;
60098: GO 59942
60100: POP
60101: POP
// end ;
60102: LD_VAR 0 3
60106: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60107: LD_INT 0
60109: PPUSH
60110: PPUSH
60111: PPUSH
// result := 0 ;
60112: LD_ADDR_VAR 0 3
60116: PUSH
60117: LD_INT 0
60119: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60120: LD_VAR 0 1
60124: PUSH
60125: LD_INT 0
60127: LESS
60128: PUSH
60129: LD_VAR 0 1
60133: PUSH
60134: LD_INT 8
60136: GREATER
60137: OR
60138: PUSH
60139: LD_VAR 0 2
60143: PUSH
60144: LD_INT 0
60146: LESS
60147: OR
60148: PUSH
60149: LD_VAR 0 2
60153: PUSH
60154: LD_INT 8
60156: GREATER
60157: OR
60158: IFFALSE 60162
// exit ;
60160: GO 60237
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60162: LD_ADDR_VAR 0 4
60166: PUSH
60167: LD_INT 22
60169: PUSH
60170: LD_VAR 0 2
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PPUSH
60179: CALL_OW 69
60183: PUSH
60184: FOR_IN
60185: IFFALSE 60235
// begin un := UnitShoot ( i ) ;
60187: LD_ADDR_VAR 0 5
60191: PUSH
60192: LD_VAR 0 4
60196: PPUSH
60197: CALL_OW 504
60201: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60202: LD_VAR 0 5
60206: PPUSH
60207: CALL_OW 255
60211: PUSH
60212: LD_VAR 0 1
60216: EQUAL
60217: IFFALSE 60233
// begin result := un ;
60219: LD_ADDR_VAR 0 3
60223: PUSH
60224: LD_VAR 0 5
60228: ST_TO_ADDR
// exit ;
60229: POP
60230: POP
60231: GO 60237
// end ; end ;
60233: GO 60184
60235: POP
60236: POP
// end ;
60237: LD_VAR 0 3
60241: RET
// export function GetCargoBay ( units ) ; begin
60242: LD_INT 0
60244: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60245: LD_ADDR_VAR 0 2
60249: PUSH
60250: LD_VAR 0 1
60254: PPUSH
60255: LD_INT 2
60257: PUSH
60258: LD_INT 34
60260: PUSH
60261: LD_INT 12
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 34
60270: PUSH
60271: LD_INT 51
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 34
60280: PUSH
60281: LD_INT 32
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 34
60290: PUSH
60291: LD_EXP 73
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: PPUSH
60307: CALL_OW 72
60311: ST_TO_ADDR
// end ;
60312: LD_VAR 0 2
60316: RET
// export function Negate ( value ) ; begin
60317: LD_INT 0
60319: PPUSH
// result := not value ;
60320: LD_ADDR_VAR 0 2
60324: PUSH
60325: LD_VAR 0 1
60329: NOT
60330: ST_TO_ADDR
// end ;
60331: LD_VAR 0 2
60335: RET
// export function Inc ( value ) ; begin
60336: LD_INT 0
60338: PPUSH
// result := value + 1 ;
60339: LD_ADDR_VAR 0 2
60343: PUSH
60344: LD_VAR 0 1
60348: PUSH
60349: LD_INT 1
60351: PLUS
60352: ST_TO_ADDR
// end ;
60353: LD_VAR 0 2
60357: RET
// export function Dec ( value ) ; begin
60358: LD_INT 0
60360: PPUSH
// result := value - 1 ;
60361: LD_ADDR_VAR 0 2
60365: PUSH
60366: LD_VAR 0 1
60370: PUSH
60371: LD_INT 1
60373: MINUS
60374: ST_TO_ADDR
// end ;
60375: LD_VAR 0 2
60379: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60380: LD_INT 0
60382: PPUSH
60383: PPUSH
60384: PPUSH
60385: PPUSH
60386: PPUSH
60387: PPUSH
60388: PPUSH
60389: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60390: LD_VAR 0 1
60394: PPUSH
60395: LD_VAR 0 2
60399: PPUSH
60400: CALL_OW 488
60404: NOT
60405: PUSH
60406: LD_VAR 0 3
60410: PPUSH
60411: LD_VAR 0 4
60415: PPUSH
60416: CALL_OW 488
60420: NOT
60421: OR
60422: IFFALSE 60435
// begin result := - 1 ;
60424: LD_ADDR_VAR 0 5
60428: PUSH
60429: LD_INT 1
60431: NEG
60432: ST_TO_ADDR
// exit ;
60433: GO 60670
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60435: LD_ADDR_VAR 0 12
60439: PUSH
60440: LD_VAR 0 1
60444: PPUSH
60445: LD_VAR 0 2
60449: PPUSH
60450: LD_VAR 0 3
60454: PPUSH
60455: LD_VAR 0 4
60459: PPUSH
60460: CALL 59518 0 4
60464: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60465: LD_ADDR_VAR 0 11
60469: PUSH
60470: LD_VAR 0 1
60474: PPUSH
60475: LD_VAR 0 2
60479: PPUSH
60480: LD_VAR 0 12
60484: PUSH
60485: LD_INT 1
60487: ARRAY
60488: PPUSH
60489: LD_VAR 0 12
60493: PUSH
60494: LD_INT 2
60496: ARRAY
60497: PPUSH
60498: CALL_OW 298
60502: ST_TO_ADDR
// distance := 9999 ;
60503: LD_ADDR_VAR 0 10
60507: PUSH
60508: LD_INT 9999
60510: ST_TO_ADDR
// for i := 0 to 5 do
60511: LD_ADDR_VAR 0 6
60515: PUSH
60516: DOUBLE
60517: LD_INT 0
60519: DEC
60520: ST_TO_ADDR
60521: LD_INT 5
60523: PUSH
60524: FOR_TO
60525: IFFALSE 60668
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60527: LD_ADDR_VAR 0 7
60531: PUSH
60532: LD_VAR 0 1
60536: PPUSH
60537: LD_VAR 0 6
60541: PPUSH
60542: LD_VAR 0 11
60546: PPUSH
60547: CALL_OW 272
60551: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60552: LD_ADDR_VAR 0 8
60556: PUSH
60557: LD_VAR 0 2
60561: PPUSH
60562: LD_VAR 0 6
60566: PPUSH
60567: LD_VAR 0 11
60571: PPUSH
60572: CALL_OW 273
60576: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60577: LD_VAR 0 7
60581: PPUSH
60582: LD_VAR 0 8
60586: PPUSH
60587: CALL_OW 488
60591: NOT
60592: IFFALSE 60596
// continue ;
60594: GO 60524
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60596: LD_ADDR_VAR 0 9
60600: PUSH
60601: LD_VAR 0 12
60605: PUSH
60606: LD_INT 1
60608: ARRAY
60609: PPUSH
60610: LD_VAR 0 12
60614: PUSH
60615: LD_INT 2
60617: ARRAY
60618: PPUSH
60619: LD_VAR 0 7
60623: PPUSH
60624: LD_VAR 0 8
60628: PPUSH
60629: CALL_OW 298
60633: ST_TO_ADDR
// if tmp < distance then
60634: LD_VAR 0 9
60638: PUSH
60639: LD_VAR 0 10
60643: LESS
60644: IFFALSE 60666
// begin result := i ;
60646: LD_ADDR_VAR 0 5
60650: PUSH
60651: LD_VAR 0 6
60655: ST_TO_ADDR
// distance := tmp ;
60656: LD_ADDR_VAR 0 10
60660: PUSH
60661: LD_VAR 0 9
60665: ST_TO_ADDR
// end ; end ;
60666: GO 60524
60668: POP
60669: POP
// end ;
60670: LD_VAR 0 5
60674: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60675: LD_INT 0
60677: PPUSH
60678: PPUSH
// if not driver or not IsInUnit ( driver ) then
60679: LD_VAR 0 1
60683: NOT
60684: PUSH
60685: LD_VAR 0 1
60689: PPUSH
60690: CALL_OW 310
60694: NOT
60695: OR
60696: IFFALSE 60700
// exit ;
60698: GO 60790
// vehicle := IsInUnit ( driver ) ;
60700: LD_ADDR_VAR 0 3
60704: PUSH
60705: LD_VAR 0 1
60709: PPUSH
60710: CALL_OW 310
60714: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60715: LD_VAR 0 1
60719: PPUSH
60720: LD_STRING \
60722: PUSH
60723: LD_INT 0
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: LD_INT 0
60731: PUSH
60732: LD_INT 0
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: LD_INT 0
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: PUSH
60750: LD_STRING E
60752: PUSH
60753: LD_INT 0
60755: PUSH
60756: LD_INT 0
60758: PUSH
60759: LD_VAR 0 3
60763: PUSH
60764: LD_INT 0
60766: PUSH
60767: LD_INT 0
60769: PUSH
60770: LD_INT 0
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PPUSH
60786: CALL_OW 446
// end ;
60790: LD_VAR 0 2
60794: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60795: LD_INT 0
60797: PPUSH
60798: PPUSH
// if not driver or not IsInUnit ( driver ) then
60799: LD_VAR 0 1
60803: NOT
60804: PUSH
60805: LD_VAR 0 1
60809: PPUSH
60810: CALL_OW 310
60814: NOT
60815: OR
60816: IFFALSE 60820
// exit ;
60818: GO 60910
// vehicle := IsInUnit ( driver ) ;
60820: LD_ADDR_VAR 0 3
60824: PUSH
60825: LD_VAR 0 1
60829: PPUSH
60830: CALL_OW 310
60834: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60835: LD_VAR 0 1
60839: PPUSH
60840: LD_STRING \
60842: PUSH
60843: LD_INT 0
60845: PUSH
60846: LD_INT 0
60848: PUSH
60849: LD_INT 0
60851: PUSH
60852: LD_INT 0
60854: PUSH
60855: LD_INT 0
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: PUSH
60870: LD_STRING E
60872: PUSH
60873: LD_INT 0
60875: PUSH
60876: LD_INT 0
60878: PUSH
60879: LD_VAR 0 3
60883: PUSH
60884: LD_INT 0
60886: PUSH
60887: LD_INT 0
60889: PUSH
60890: LD_INT 0
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PPUSH
60906: CALL_OW 447
// end ;
60910: LD_VAR 0 2
60914: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60915: LD_INT 0
60917: PPUSH
60918: PPUSH
60919: PPUSH
// tmp := [ ] ;
60920: LD_ADDR_VAR 0 5
60924: PUSH
60925: EMPTY
60926: ST_TO_ADDR
// for i in units do
60927: LD_ADDR_VAR 0 4
60931: PUSH
60932: LD_VAR 0 1
60936: PUSH
60937: FOR_IN
60938: IFFALSE 60976
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60940: LD_ADDR_VAR 0 5
60944: PUSH
60945: LD_VAR 0 5
60949: PPUSH
60950: LD_VAR 0 5
60954: PUSH
60955: LD_INT 1
60957: PLUS
60958: PPUSH
60959: LD_VAR 0 4
60963: PPUSH
60964: CALL_OW 256
60968: PPUSH
60969: CALL_OW 2
60973: ST_TO_ADDR
60974: GO 60937
60976: POP
60977: POP
// if not tmp then
60978: LD_VAR 0 5
60982: NOT
60983: IFFALSE 60987
// exit ;
60985: GO 61035
// if asc then
60987: LD_VAR 0 2
60991: IFFALSE 61015
// result := SortListByListAsc ( units , tmp ) else
60993: LD_ADDR_VAR 0 3
60997: PUSH
60998: LD_VAR 0 1
61002: PPUSH
61003: LD_VAR 0 5
61007: PPUSH
61008: CALL_OW 76
61012: ST_TO_ADDR
61013: GO 61035
// result := SortListByListDesc ( units , tmp ) ;
61015: LD_ADDR_VAR 0 3
61019: PUSH
61020: LD_VAR 0 1
61024: PPUSH
61025: LD_VAR 0 5
61029: PPUSH
61030: CALL_OW 77
61034: ST_TO_ADDR
// end ;
61035: LD_VAR 0 3
61039: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61040: LD_INT 0
61042: PPUSH
61043: PPUSH
// task := GetTaskList ( mech ) ;
61044: LD_ADDR_VAR 0 4
61048: PUSH
61049: LD_VAR 0 1
61053: PPUSH
61054: CALL_OW 437
61058: ST_TO_ADDR
// if not task then
61059: LD_VAR 0 4
61063: NOT
61064: IFFALSE 61068
// exit ;
61066: GO 61110
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61068: LD_ADDR_VAR 0 3
61072: PUSH
61073: LD_VAR 0 4
61077: PUSH
61078: LD_INT 1
61080: ARRAY
61081: PUSH
61082: LD_INT 1
61084: ARRAY
61085: PUSH
61086: LD_STRING r
61088: EQUAL
61089: PUSH
61090: LD_VAR 0 4
61094: PUSH
61095: LD_INT 1
61097: ARRAY
61098: PUSH
61099: LD_INT 4
61101: ARRAY
61102: PUSH
61103: LD_VAR 0 2
61107: EQUAL
61108: AND
61109: ST_TO_ADDR
// end ;
61110: LD_VAR 0 3
61114: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61115: LD_INT 0
61117: PPUSH
// SetDir ( unit , d ) ;
61118: LD_VAR 0 1
61122: PPUSH
61123: LD_VAR 0 4
61127: PPUSH
61128: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
61132: LD_VAR 0 1
61136: PPUSH
61137: LD_VAR 0 2
61141: PPUSH
61142: LD_VAR 0 3
61146: PPUSH
61147: LD_VAR 0 5
61151: PPUSH
61152: CALL_OW 48
// end ;
61156: LD_VAR 0 6
61160: RET
// export function ToNaturalNumber ( number ) ; begin
61161: LD_INT 0
61163: PPUSH
// result := number div 1 ;
61164: LD_ADDR_VAR 0 2
61168: PUSH
61169: LD_VAR 0 1
61173: PUSH
61174: LD_INT 1
61176: DIV
61177: ST_TO_ADDR
// if number < 0 then
61178: LD_VAR 0 1
61182: PUSH
61183: LD_INT 0
61185: LESS
61186: IFFALSE 61196
// result := 0 ;
61188: LD_ADDR_VAR 0 2
61192: PUSH
61193: LD_INT 0
61195: ST_TO_ADDR
// end ;
61196: LD_VAR 0 2
61200: RET
// export function SortByClass ( units , class ) ; var un ; begin
61201: LD_INT 0
61203: PPUSH
61204: PPUSH
// if not units or not class then
61205: LD_VAR 0 1
61209: NOT
61210: PUSH
61211: LD_VAR 0 2
61215: NOT
61216: OR
61217: IFFALSE 61221
// exit ;
61219: GO 61316
// result := [ ] ;
61221: LD_ADDR_VAR 0 3
61225: PUSH
61226: EMPTY
61227: ST_TO_ADDR
// for un in units do
61228: LD_ADDR_VAR 0 4
61232: PUSH
61233: LD_VAR 0 1
61237: PUSH
61238: FOR_IN
61239: IFFALSE 61314
// if GetClass ( un ) = class then
61241: LD_VAR 0 4
61245: PPUSH
61246: CALL_OW 257
61250: PUSH
61251: LD_VAR 0 2
61255: EQUAL
61256: IFFALSE 61283
// result := Insert ( result , 1 , un ) else
61258: LD_ADDR_VAR 0 3
61262: PUSH
61263: LD_VAR 0 3
61267: PPUSH
61268: LD_INT 1
61270: PPUSH
61271: LD_VAR 0 4
61275: PPUSH
61276: CALL_OW 2
61280: ST_TO_ADDR
61281: GO 61312
// result := Replace ( result , result + 1 , un ) ;
61283: LD_ADDR_VAR 0 3
61287: PUSH
61288: LD_VAR 0 3
61292: PPUSH
61293: LD_VAR 0 3
61297: PUSH
61298: LD_INT 1
61300: PLUS
61301: PPUSH
61302: LD_VAR 0 4
61306: PPUSH
61307: CALL_OW 1
61311: ST_TO_ADDR
61312: GO 61238
61314: POP
61315: POP
// end ;
61316: LD_VAR 0 3
61320: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61321: LD_INT 0
61323: PPUSH
61324: PPUSH
61325: PPUSH
61326: PPUSH
61327: PPUSH
61328: PPUSH
61329: PPUSH
// result := [ ] ;
61330: LD_ADDR_VAR 0 4
61334: PUSH
61335: EMPTY
61336: ST_TO_ADDR
// if x - r < 0 then
61337: LD_VAR 0 1
61341: PUSH
61342: LD_VAR 0 3
61346: MINUS
61347: PUSH
61348: LD_INT 0
61350: LESS
61351: IFFALSE 61363
// min_x := 0 else
61353: LD_ADDR_VAR 0 8
61357: PUSH
61358: LD_INT 0
61360: ST_TO_ADDR
61361: GO 61379
// min_x := x - r ;
61363: LD_ADDR_VAR 0 8
61367: PUSH
61368: LD_VAR 0 1
61372: PUSH
61373: LD_VAR 0 3
61377: MINUS
61378: ST_TO_ADDR
// if y - r < 0 then
61379: LD_VAR 0 2
61383: PUSH
61384: LD_VAR 0 3
61388: MINUS
61389: PUSH
61390: LD_INT 0
61392: LESS
61393: IFFALSE 61405
// min_y := 0 else
61395: LD_ADDR_VAR 0 7
61399: PUSH
61400: LD_INT 0
61402: ST_TO_ADDR
61403: GO 61421
// min_y := y - r ;
61405: LD_ADDR_VAR 0 7
61409: PUSH
61410: LD_VAR 0 2
61414: PUSH
61415: LD_VAR 0 3
61419: MINUS
61420: ST_TO_ADDR
// max_x := x + r ;
61421: LD_ADDR_VAR 0 9
61425: PUSH
61426: LD_VAR 0 1
61430: PUSH
61431: LD_VAR 0 3
61435: PLUS
61436: ST_TO_ADDR
// max_y := y + r ;
61437: LD_ADDR_VAR 0 10
61441: PUSH
61442: LD_VAR 0 2
61446: PUSH
61447: LD_VAR 0 3
61451: PLUS
61452: ST_TO_ADDR
// for _x = min_x to max_x do
61453: LD_ADDR_VAR 0 5
61457: PUSH
61458: DOUBLE
61459: LD_VAR 0 8
61463: DEC
61464: ST_TO_ADDR
61465: LD_VAR 0 9
61469: PUSH
61470: FOR_TO
61471: IFFALSE 61572
// for _y = min_y to max_y do
61473: LD_ADDR_VAR 0 6
61477: PUSH
61478: DOUBLE
61479: LD_VAR 0 7
61483: DEC
61484: ST_TO_ADDR
61485: LD_VAR 0 10
61489: PUSH
61490: FOR_TO
61491: IFFALSE 61568
// begin if not ValidHex ( _x , _y ) then
61493: LD_VAR 0 5
61497: PPUSH
61498: LD_VAR 0 6
61502: PPUSH
61503: CALL_OW 488
61507: NOT
61508: IFFALSE 61512
// continue ;
61510: GO 61490
// if GetResourceTypeXY ( _x , _y ) then
61512: LD_VAR 0 5
61516: PPUSH
61517: LD_VAR 0 6
61521: PPUSH
61522: CALL_OW 283
61526: IFFALSE 61566
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61528: LD_ADDR_VAR 0 4
61532: PUSH
61533: LD_VAR 0 4
61537: PPUSH
61538: LD_VAR 0 4
61542: PUSH
61543: LD_INT 1
61545: PLUS
61546: PPUSH
61547: LD_VAR 0 5
61551: PUSH
61552: LD_VAR 0 6
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PPUSH
61561: CALL_OW 1
61565: ST_TO_ADDR
// end ;
61566: GO 61490
61568: POP
61569: POP
61570: GO 61470
61572: POP
61573: POP
// end ;
61574: LD_VAR 0 4
61578: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61579: LD_INT 0
61581: PPUSH
61582: PPUSH
61583: PPUSH
61584: PPUSH
61585: PPUSH
61586: PPUSH
61587: PPUSH
61588: PPUSH
// if not units then
61589: LD_VAR 0 1
61593: NOT
61594: IFFALSE 61598
// exit ;
61596: GO 62124
// result := UnitFilter ( units , [ f_ok ] ) ;
61598: LD_ADDR_VAR 0 3
61602: PUSH
61603: LD_VAR 0 1
61607: PPUSH
61608: LD_INT 50
61610: PUSH
61611: EMPTY
61612: LIST
61613: PPUSH
61614: CALL_OW 72
61618: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61619: LD_ADDR_VAR 0 8
61623: PUSH
61624: LD_VAR 0 1
61628: PUSH
61629: LD_INT 1
61631: ARRAY
61632: PPUSH
61633: CALL_OW 255
61637: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
61638: LD_ADDR_VAR 0 10
61642: PUSH
61643: LD_INT 29
61645: PUSH
61646: LD_EXP 76
61650: PUSH
61651: LD_INT 49
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: LIST
61658: ST_TO_ADDR
// if not result then
61659: LD_VAR 0 3
61663: NOT
61664: IFFALSE 61668
// exit ;
61666: GO 62124
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61668: LD_ADDR_VAR 0 5
61672: PUSH
61673: LD_INT 81
61675: PUSH
61676: LD_VAR 0 8
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PPUSH
61685: CALL_OW 69
61689: ST_TO_ADDR
// for i in result do
61690: LD_ADDR_VAR 0 4
61694: PUSH
61695: LD_VAR 0 3
61699: PUSH
61700: FOR_IN
61701: IFFALSE 62122
// begin tag := GetTag ( i ) + 1 ;
61703: LD_ADDR_VAR 0 9
61707: PUSH
61708: LD_VAR 0 4
61712: PPUSH
61713: CALL_OW 110
61717: PUSH
61718: LD_INT 1
61720: PLUS
61721: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
61722: LD_ADDR_VAR 0 7
61726: PUSH
61727: LD_VAR 0 4
61731: PPUSH
61732: CALL_OW 250
61736: PPUSH
61737: LD_VAR 0 4
61741: PPUSH
61742: CALL_OW 251
61746: PPUSH
61747: LD_INT 6
61749: PPUSH
61750: CALL 61321 0 3
61754: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
61755: LD_VAR 0 4
61759: PPUSH
61760: CALL_OW 247
61764: PUSH
61765: LD_INT 2
61767: EQUAL
61768: PUSH
61769: LD_VAR 0 7
61773: AND
61774: PUSH
61775: LD_VAR 0 4
61779: PPUSH
61780: CALL_OW 264
61784: PUSH
61785: LD_VAR 0 10
61789: IN
61790: NOT
61791: AND
61792: IFFALSE 61831
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61794: LD_VAR 0 4
61798: PPUSH
61799: LD_VAR 0 7
61803: PUSH
61804: LD_INT 1
61806: ARRAY
61807: PUSH
61808: LD_INT 1
61810: ARRAY
61811: PPUSH
61812: LD_VAR 0 7
61816: PUSH
61817: LD_INT 1
61819: ARRAY
61820: PUSH
61821: LD_INT 2
61823: ARRAY
61824: PPUSH
61825: CALL_OW 116
61829: GO 62120
// if path > tag then
61831: LD_VAR 0 2
61835: PUSH
61836: LD_VAR 0 9
61840: GREATER
61841: IFFALSE 62049
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
61843: LD_ADDR_VAR 0 6
61847: PUSH
61848: LD_VAR 0 5
61852: PPUSH
61853: LD_INT 91
61855: PUSH
61856: LD_VAR 0 4
61860: PUSH
61861: LD_INT 8
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: LIST
61868: PPUSH
61869: CALL_OW 72
61873: ST_TO_ADDR
// if nearEnemy then
61874: LD_VAR 0 6
61878: IFFALSE 61947
// begin if GetWeapon ( i ) = ru_time_lapser then
61880: LD_VAR 0 4
61884: PPUSH
61885: CALL_OW 264
61889: PUSH
61890: LD_INT 49
61892: EQUAL
61893: IFFALSE 61921
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
61895: LD_VAR 0 4
61899: PPUSH
61900: LD_VAR 0 6
61904: PPUSH
61905: LD_VAR 0 4
61909: PPUSH
61910: CALL_OW 74
61914: PPUSH
61915: CALL_OW 112
61919: GO 61945
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
61921: LD_VAR 0 4
61925: PPUSH
61926: LD_VAR 0 6
61930: PPUSH
61931: LD_VAR 0 4
61935: PPUSH
61936: CALL_OW 74
61940: PPUSH
61941: CALL_OW 115
// end else
61945: GO 62047
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
61947: LD_VAR 0 4
61951: PPUSH
61952: LD_VAR 0 2
61956: PUSH
61957: LD_VAR 0 9
61961: ARRAY
61962: PUSH
61963: LD_INT 1
61965: ARRAY
61966: PPUSH
61967: LD_VAR 0 2
61971: PUSH
61972: LD_VAR 0 9
61976: ARRAY
61977: PUSH
61978: LD_INT 2
61980: ARRAY
61981: PPUSH
61982: CALL_OW 297
61986: PUSH
61987: LD_INT 6
61989: GREATER
61990: IFFALSE 62033
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
61992: LD_VAR 0 4
61996: PPUSH
61997: LD_VAR 0 2
62001: PUSH
62002: LD_VAR 0 9
62006: ARRAY
62007: PUSH
62008: LD_INT 1
62010: ARRAY
62011: PPUSH
62012: LD_VAR 0 2
62016: PUSH
62017: LD_VAR 0 9
62021: ARRAY
62022: PUSH
62023: LD_INT 2
62025: ARRAY
62026: PPUSH
62027: CALL_OW 114
62031: GO 62047
// SetTag ( i , tag ) ;
62033: LD_VAR 0 4
62037: PPUSH
62038: LD_VAR 0 9
62042: PPUSH
62043: CALL_OW 109
// end else
62047: GO 62120
// if enemy then
62049: LD_VAR 0 5
62053: IFFALSE 62120
// begin if GetWeapon ( i ) = ru_time_lapser then
62055: LD_VAR 0 4
62059: PPUSH
62060: CALL_OW 264
62064: PUSH
62065: LD_INT 49
62067: EQUAL
62068: IFFALSE 62096
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
62070: LD_VAR 0 4
62074: PPUSH
62075: LD_VAR 0 5
62079: PPUSH
62080: LD_VAR 0 4
62084: PPUSH
62085: CALL_OW 74
62089: PPUSH
62090: CALL_OW 112
62094: GO 62120
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62096: LD_VAR 0 4
62100: PPUSH
62101: LD_VAR 0 5
62105: PPUSH
62106: LD_VAR 0 4
62110: PPUSH
62111: CALL_OW 74
62115: PPUSH
62116: CALL_OW 115
// end ; end ;
62120: GO 61700
62122: POP
62123: POP
// end ;
62124: LD_VAR 0 3
62128: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62129: LD_INT 0
62131: PPUSH
62132: PPUSH
62133: PPUSH
// if not unit or IsInUnit ( unit ) then
62134: LD_VAR 0 1
62138: NOT
62139: PUSH
62140: LD_VAR 0 1
62144: PPUSH
62145: CALL_OW 310
62149: OR
62150: IFFALSE 62154
// exit ;
62152: GO 62245
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
62154: LD_ADDR_VAR 0 4
62158: PUSH
62159: LD_VAR 0 1
62163: PPUSH
62164: CALL_OW 250
62168: PPUSH
62169: LD_VAR 0 2
62173: PPUSH
62174: LD_INT 1
62176: PPUSH
62177: CALL_OW 272
62181: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
62182: LD_ADDR_VAR 0 5
62186: PUSH
62187: LD_VAR 0 1
62191: PPUSH
62192: CALL_OW 251
62196: PPUSH
62197: LD_VAR 0 2
62201: PPUSH
62202: LD_INT 1
62204: PPUSH
62205: CALL_OW 273
62209: ST_TO_ADDR
// if ValidHex ( x , y ) then
62210: LD_VAR 0 4
62214: PPUSH
62215: LD_VAR 0 5
62219: PPUSH
62220: CALL_OW 488
62224: IFFALSE 62245
// ComTurnXY ( unit , x , y ) ;
62226: LD_VAR 0 1
62230: PPUSH
62231: LD_VAR 0 4
62235: PPUSH
62236: LD_VAR 0 5
62240: PPUSH
62241: CALL_OW 118
// end ;
62245: LD_VAR 0 3
62249: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62250: LD_INT 0
62252: PPUSH
62253: PPUSH
// result := false ;
62254: LD_ADDR_VAR 0 3
62258: PUSH
62259: LD_INT 0
62261: ST_TO_ADDR
// if not units then
62262: LD_VAR 0 2
62266: NOT
62267: IFFALSE 62271
// exit ;
62269: GO 62316
// for i in units do
62271: LD_ADDR_VAR 0 4
62275: PUSH
62276: LD_VAR 0 2
62280: PUSH
62281: FOR_IN
62282: IFFALSE 62314
// if See ( side , i ) then
62284: LD_VAR 0 1
62288: PPUSH
62289: LD_VAR 0 4
62293: PPUSH
62294: CALL_OW 292
62298: IFFALSE 62312
// begin result := true ;
62300: LD_ADDR_VAR 0 3
62304: PUSH
62305: LD_INT 1
62307: ST_TO_ADDR
// exit ;
62308: POP
62309: POP
62310: GO 62316
// end ;
62312: GO 62281
62314: POP
62315: POP
// end ;
62316: LD_VAR 0 3
62320: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62321: LD_INT 0
62323: PPUSH
62324: PPUSH
62325: PPUSH
62326: PPUSH
// if not unit or not points then
62327: LD_VAR 0 1
62331: NOT
62332: PUSH
62333: LD_VAR 0 2
62337: NOT
62338: OR
62339: IFFALSE 62343
// exit ;
62341: GO 62433
// dist := 99999 ;
62343: LD_ADDR_VAR 0 5
62347: PUSH
62348: LD_INT 99999
62350: ST_TO_ADDR
// for i in points do
62351: LD_ADDR_VAR 0 4
62355: PUSH
62356: LD_VAR 0 2
62360: PUSH
62361: FOR_IN
62362: IFFALSE 62431
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62364: LD_ADDR_VAR 0 6
62368: PUSH
62369: LD_VAR 0 1
62373: PPUSH
62374: LD_VAR 0 4
62378: PUSH
62379: LD_INT 1
62381: ARRAY
62382: PPUSH
62383: LD_VAR 0 4
62387: PUSH
62388: LD_INT 2
62390: ARRAY
62391: PPUSH
62392: CALL_OW 297
62396: ST_TO_ADDR
// if tmpDist < dist then
62397: LD_VAR 0 6
62401: PUSH
62402: LD_VAR 0 5
62406: LESS
62407: IFFALSE 62429
// begin result := i ;
62409: LD_ADDR_VAR 0 3
62413: PUSH
62414: LD_VAR 0 4
62418: ST_TO_ADDR
// dist := tmpDist ;
62419: LD_ADDR_VAR 0 5
62423: PUSH
62424: LD_VAR 0 6
62428: ST_TO_ADDR
// end ; end ;
62429: GO 62361
62431: POP
62432: POP
// end ;
62433: LD_VAR 0 3
62437: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
62438: LD_INT 0
62440: PPUSH
// uc_side := side ;
62441: LD_ADDR_OWVAR 20
62445: PUSH
62446: LD_VAR 0 1
62450: ST_TO_ADDR
// uc_nation := 3 ;
62451: LD_ADDR_OWVAR 21
62455: PUSH
62456: LD_INT 3
62458: ST_TO_ADDR
// vc_chassis := 25 ;
62459: LD_ADDR_OWVAR 37
62463: PUSH
62464: LD_INT 25
62466: ST_TO_ADDR
// vc_engine := engine_siberite ;
62467: LD_ADDR_OWVAR 39
62471: PUSH
62472: LD_INT 3
62474: ST_TO_ADDR
// vc_control := control_computer ;
62475: LD_ADDR_OWVAR 38
62479: PUSH
62480: LD_INT 3
62482: ST_TO_ADDR
// vc_weapon := 59 ;
62483: LD_ADDR_OWVAR 40
62487: PUSH
62488: LD_INT 59
62490: ST_TO_ADDR
// result := CreateVehicle ;
62491: LD_ADDR_VAR 0 5
62495: PUSH
62496: CALL_OW 45
62500: ST_TO_ADDR
// SetDir ( result , d ) ;
62501: LD_VAR 0 5
62505: PPUSH
62506: LD_VAR 0 4
62510: PPUSH
62511: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
62515: LD_VAR 0 5
62519: PPUSH
62520: LD_VAR 0 2
62524: PPUSH
62525: LD_VAR 0 3
62529: PPUSH
62530: LD_INT 0
62532: PPUSH
62533: CALL_OW 48
// end ;
62537: LD_VAR 0 5
62541: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
62542: LD_INT 0
62544: PPUSH
62545: PPUSH
62546: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
62547: LD_ADDR_VAR 0 2
62551: PUSH
62552: LD_INT 0
62554: PUSH
62555: LD_INT 0
62557: PUSH
62558: LD_INT 0
62560: PUSH
62561: LD_INT 0
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
62570: LD_VAR 0 1
62574: NOT
62575: PUSH
62576: LD_VAR 0 1
62580: PPUSH
62581: CALL_OW 264
62585: PUSH
62586: LD_INT 12
62588: PUSH
62589: LD_INT 51
62591: PUSH
62592: LD_INT 32
62594: PUSH
62595: LD_EXP 73
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: IN
62606: NOT
62607: OR
62608: IFFALSE 62612
// exit ;
62610: GO 62710
// for i := 1 to 3 do
62612: LD_ADDR_VAR 0 3
62616: PUSH
62617: DOUBLE
62618: LD_INT 1
62620: DEC
62621: ST_TO_ADDR
62622: LD_INT 3
62624: PUSH
62625: FOR_TO
62626: IFFALSE 62708
// begin tmp := GetCargo ( cargo , i ) ;
62628: LD_ADDR_VAR 0 4
62632: PUSH
62633: LD_VAR 0 1
62637: PPUSH
62638: LD_VAR 0 3
62642: PPUSH
62643: CALL_OW 289
62647: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
62648: LD_ADDR_VAR 0 2
62652: PUSH
62653: LD_VAR 0 2
62657: PPUSH
62658: LD_VAR 0 3
62662: PPUSH
62663: LD_VAR 0 4
62667: PPUSH
62668: CALL_OW 1
62672: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
62673: LD_ADDR_VAR 0 2
62677: PUSH
62678: LD_VAR 0 2
62682: PPUSH
62683: LD_INT 4
62685: PPUSH
62686: LD_VAR 0 2
62690: PUSH
62691: LD_INT 4
62693: ARRAY
62694: PUSH
62695: LD_VAR 0 4
62699: PLUS
62700: PPUSH
62701: CALL_OW 1
62705: ST_TO_ADDR
// end ;
62706: GO 62625
62708: POP
62709: POP
// end ;
62710: LD_VAR 0 2
62714: RET
// export function Length ( array ) ; begin
62715: LD_INT 0
62717: PPUSH
// result := array + 0 ;
62718: LD_ADDR_VAR 0 2
62722: PUSH
62723: LD_VAR 0 1
62727: PUSH
62728: LD_INT 0
62730: PLUS
62731: ST_TO_ADDR
// end ;
62732: LD_VAR 0 2
62736: RET
// export function PrepareArray ( array ) ; begin
62737: LD_INT 0
62739: PPUSH
// result := array diff 0 ;
62740: LD_ADDR_VAR 0 2
62744: PUSH
62745: LD_VAR 0 1
62749: PUSH
62750: LD_INT 0
62752: DIFF
62753: ST_TO_ADDR
// if not result [ 1 ] then
62754: LD_VAR 0 2
62758: PUSH
62759: LD_INT 1
62761: ARRAY
62762: NOT
62763: IFFALSE 62783
// result := Delete ( result , 1 ) ;
62765: LD_ADDR_VAR 0 2
62769: PUSH
62770: LD_VAR 0 2
62774: PPUSH
62775: LD_INT 1
62777: PPUSH
62778: CALL_OW 3
62782: ST_TO_ADDR
// end ;
62783: LD_VAR 0 2
62787: RET
