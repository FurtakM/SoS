// every 0 0$1 do var amConvoyGroups ;
   0: GO 2
   2: DISABLE
   3: LD_INT 0
   5: PPUSH
// begin amConvoyGroups := [ [ [ 1 , 2 , 3 , 5 ] [ Difficulty ] , [ 0 , 0 , 1 , 1 ] [ Difficulty ] , [ 1 , 1 , 2 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 0 , 1 , 1 , 2 ] [ Difficulty ] ] , [ [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 0 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] ] , [ [ 1 , 2 , 3 , 4 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] ] , [ [ 3 , 4 , 6 , 7 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 1 , 3 ] [ Difficulty ] ] ] ;
   6: LD_ADDR_VAR 0 1
  10: PUSH
  11: LD_INT 1
  13: PUSH
  14: LD_INT 2
  16: PUSH
  17: LD_INT 3
  19: PUSH
  20: LD_INT 5
  22: PUSH
  23: EMPTY
  24: LIST
  25: LIST
  26: LIST
  27: LIST
  28: PUSH
  29: LD_OWVAR 67
  33: ARRAY
  34: PUSH
  35: LD_INT 0
  37: PUSH
  38: LD_INT 0
  40: PUSH
  41: LD_INT 1
  43: PUSH
  44: LD_INT 1
  46: PUSH
  47: EMPTY
  48: LIST
  49: LIST
  50: LIST
  51: LIST
  52: PUSH
  53: LD_OWVAR 67
  57: ARRAY
  58: PUSH
  59: LD_INT 1
  61: PUSH
  62: LD_INT 1
  64: PUSH
  65: LD_INT 2
  67: PUSH
  68: LD_INT 2
  70: PUSH
  71: EMPTY
  72: LIST
  73: LIST
  74: LIST
  75: LIST
  76: PUSH
  77: LD_OWVAR 67
  81: ARRAY
  82: PUSH
  83: LD_INT 1
  85: PUSH
  86: LD_INT 1
  88: PUSH
  89: LD_INT 1
  91: PUSH
  92: LD_INT 2
  94: PUSH
  95: EMPTY
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: PUSH
 107: LD_INT 0
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: LD_INT 1
 115: PUSH
 116: LD_INT 2
 118: PUSH
 119: EMPTY
 120: LIST
 121: LIST
 122: LIST
 123: LIST
 124: PUSH
 125: LD_OWVAR 67
 129: ARRAY
 130: PUSH
 131: EMPTY
 132: LIST
 133: LIST
 134: LIST
 135: LIST
 136: LIST
 137: PUSH
 138: LD_INT 3
 140: PUSH
 141: LD_INT 4
 143: PUSH
 144: LD_INT 5
 146: PUSH
 147: LD_INT 6
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: LD_OWVAR 67
 160: ARRAY
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 1
 167: PUSH
 168: LD_INT 1
 170: PUSH
 171: LD_INT 2
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_OWVAR 67
 184: ARRAY
 185: PUSH
 186: LD_INT 1
 188: PUSH
 189: LD_INT 1
 191: PUSH
 192: LD_INT 2
 194: PUSH
 195: LD_INT 3
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: PUSH
 210: LD_INT 1
 212: PUSH
 213: LD_INT 1
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: LD_INT 3
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_OWVAR 67
 232: ARRAY
 233: PUSH
 234: LD_INT 1
 236: PUSH
 237: LD_INT 1
 239: PUSH
 240: LD_INT 2
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: PUSH
 252: LD_OWVAR 67
 256: ARRAY
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: LIST
 264: PUSH
 265: LD_INT 1
 267: PUSH
 268: LD_INT 2
 270: PUSH
 271: LD_INT 3
 273: PUSH
 274: LD_INT 4
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: PUSH
 283: LD_OWVAR 67
 287: ARRAY
 288: PUSH
 289: LD_INT 1
 291: PUSH
 292: LD_INT 1
 294: PUSH
 295: LD_INT 1
 297: PUSH
 298: LD_INT 2
 300: PUSH
 301: EMPTY
 302: LIST
 303: LIST
 304: LIST
 305: LIST
 306: PUSH
 307: LD_OWVAR 67
 311: ARRAY
 312: PUSH
 313: LD_INT 1
 315: PUSH
 316: LD_INT 1
 318: PUSH
 319: LD_INT 2
 321: PUSH
 322: LD_INT 2
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: PUSH
 331: LD_OWVAR 67
 335: ARRAY
 336: PUSH
 337: LD_INT 1
 339: PUSH
 340: LD_INT 1
 342: PUSH
 343: LD_INT 1
 345: PUSH
 346: LD_INT 2
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: LIST
 353: LIST
 354: PUSH
 355: LD_OWVAR 67
 359: ARRAY
 360: PUSH
 361: LD_INT 1
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: LD_INT 2
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: LIST
 377: LIST
 378: PUSH
 379: LD_OWVAR 67
 383: ARRAY
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: LIST
 389: LIST
 390: LIST
 391: PUSH
 392: LD_INT 3
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: LD_INT 7
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: PUSH
 410: LD_OWVAR 67
 414: ARRAY
 415: PUSH
 416: LD_INT 1
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: LD_INT 1
 424: PUSH
 425: LD_INT 2
 427: PUSH
 428: EMPTY
 429: LIST
 430: LIST
 431: LIST
 432: LIST
 433: PUSH
 434: LD_OWVAR 67
 438: ARRAY
 439: PUSH
 440: LD_INT 1
 442: PUSH
 443: LD_INT 1
 445: PUSH
 446: LD_INT 2
 448: PUSH
 449: LD_INT 3
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: LIST
 456: LIST
 457: PUSH
 458: LD_OWVAR 67
 462: ARRAY
 463: PUSH
 464: LD_INT 1
 466: PUSH
 467: LD_INT 1
 469: PUSH
 470: LD_INT 2
 472: PUSH
 473: LD_INT 3
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: LD_OWVAR 67
 486: ARRAY
 487: PUSH
 488: LD_INT 1
 490: PUSH
 491: LD_INT 1
 493: PUSH
 494: LD_INT 1
 496: PUSH
 497: LD_INT 3
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: PUSH
 506: LD_OWVAR 67
 510: ARRAY
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: ST_TO_ADDR
// display_strings := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 525: LD_ADDR_OWVAR 47
 529: PUSH
 530: LD_INT 21
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: LD_INT 58
 542: PUSH
 543: EMPTY
 544: LIST
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PPUSH
 550: CALL_OW 69
 554: ST_TO_ADDR
// PrepareAmericanConvoy ( amConvoyGroups [ 1 ] [ 1 ] , amConvoyGroups [ 1 ] [ 2 ] , amConvoyGroups [ 1 ] [ 3 ] , amConvoyGroups [ 1 ] [ 4 ] , amConvoyGroups [ 1 ] [ 5 ] , area11 ) ;
 555: LD_VAR 0 1
 559: PUSH
 560: LD_INT 1
 562: ARRAY
 563: PUSH
 564: LD_INT 1
 566: ARRAY
 567: PPUSH
 568: LD_VAR 0 1
 572: PUSH
 573: LD_INT 1
 575: ARRAY
 576: PUSH
 577: LD_INT 2
 579: ARRAY
 580: PPUSH
 581: LD_VAR 0 1
 585: PUSH
 586: LD_INT 1
 588: ARRAY
 589: PUSH
 590: LD_INT 3
 592: ARRAY
 593: PPUSH
 594: LD_VAR 0 1
 598: PUSH
 599: LD_INT 1
 601: ARRAY
 602: PUSH
 603: LD_INT 4
 605: ARRAY
 606: PPUSH
 607: LD_VAR 0 1
 611: PUSH
 612: LD_INT 1
 614: ARRAY
 615: PUSH
 616: LD_INT 5
 618: ARRAY
 619: PPUSH
 620: LD_INT 1
 622: PPUSH
 623: CALL 630 0 6
// end ;
 627: PPOPN 1
 629: END
// export function PrepareAmericanConvoy ( soldiersAmount , engsAmount , mechsAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road , sols , engs , mechs , scis , enemySkillLevel , amConvoyTroops ; begin
 630: LD_INT 0
 632: PPUSH
 633: PPUSH
 634: PPUSH
 635: PPUSH
 636: PPUSH
 637: PPUSH
 638: PPUSH
 639: PPUSH
 640: PPUSH
 641: PPUSH
 642: PPUSH
// enemySkilllevel := 2 ;
 643: LD_ADDR_VAR 0 16
 647: PUSH
 648: LD_INT 2
 650: ST_TO_ADDR
// uc_side := 1 ;
 651: LD_ADDR_OWVAR 20
 655: PUSH
 656: LD_INT 1
 658: ST_TO_ADDR
// uc_nation := 1 ;
 659: LD_ADDR_OWVAR 21
 663: PUSH
 664: LD_INT 1
 666: ST_TO_ADDR
// hc_name :=  ;
 667: LD_ADDR_OWVAR 26
 671: PUSH
 672: LD_STRING 
 674: ST_TO_ADDR
// hc_gallery :=  ;
 675: LD_ADDR_OWVAR 33
 679: PUSH
 680: LD_STRING 
 682: ST_TO_ADDR
// for i := 1 to soldiersAmount do
 683: LD_ADDR_VAR 0 8
 687: PUSH
 688: DOUBLE
 689: LD_INT 1
 691: DEC
 692: ST_TO_ADDR
 693: LD_VAR 0 1
 697: PUSH
 698: FOR_TO
 699: IFFALSE 774
// begin PrepareSoldier ( false , enemySkillLevel ) ;
 701: LD_INT 0
 703: PPUSH
 704: LD_VAR 0 16
 708: PPUSH
 709: CALL_OW 381
// un = CreateHuman ;
 713: LD_ADDR_VAR 0 9
 717: PUSH
 718: CALL_OW 44
 722: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 723: LD_ADDR_VAR 0 17
 727: PUSH
 728: LD_VAR 0 17
 732: PUSH
 733: LD_VAR 0 9
 737: ADD
 738: ST_TO_ADDR
// sols := sols ^ un ;
 739: LD_ADDR_VAR 0 12
 743: PUSH
 744: LD_VAR 0 12
 748: PUSH
 749: LD_VAR 0 9
 753: ADD
 754: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 755: LD_VAR 0 9
 759: PPUSH
 760: LD_VAR 0 6
 764: PPUSH
 765: LD_INT 0
 767: PPUSH
 768: CALL_OW 49
// end ;
 772: GO 698
 774: POP
 775: POP
// for i := 1 to engsAmount do
 776: LD_ADDR_VAR 0 8
 780: PUSH
 781: DOUBLE
 782: LD_INT 1
 784: DEC
 785: ST_TO_ADDR
 786: LD_VAR 0 2
 790: PUSH
 791: FOR_TO
 792: IFFALSE 867
// begin PrepareEngineer ( false , enemySkillLevel ) ;
 794: LD_INT 0
 796: PPUSH
 797: LD_VAR 0 16
 801: PPUSH
 802: CALL_OW 382
// un = CreateHuman ;
 806: LD_ADDR_VAR 0 9
 810: PUSH
 811: CALL_OW 44
 815: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 816: LD_ADDR_VAR 0 17
 820: PUSH
 821: LD_VAR 0 17
 825: PUSH
 826: LD_VAR 0 9
 830: ADD
 831: ST_TO_ADDR
// engs := engs ^ un ;
 832: LD_ADDR_VAR 0 13
 836: PUSH
 837: LD_VAR 0 13
 841: PUSH
 842: LD_VAR 0 9
 846: ADD
 847: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 848: LD_VAR 0 9
 852: PPUSH
 853: LD_VAR 0 6
 857: PPUSH
 858: LD_INT 0
 860: PPUSH
 861: CALL_OW 49
// end ;
 865: GO 791
 867: POP
 868: POP
// for i := 1 to mechsAmount do
 869: LD_ADDR_VAR 0 8
 873: PUSH
 874: DOUBLE
 875: LD_INT 1
 877: DEC
 878: ST_TO_ADDR
 879: LD_VAR 0 3
 883: PUSH
 884: FOR_TO
 885: IFFALSE 960
// begin PrepareEngineer ( false , enemySkillLevel ) ;
 887: LD_INT 0
 889: PPUSH
 890: LD_VAR 0 16
 894: PPUSH
 895: CALL_OW 382
// un = CreateHuman ;
 899: LD_ADDR_VAR 0 9
 903: PUSH
 904: CALL_OW 44
 908: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 909: LD_ADDR_VAR 0 17
 913: PUSH
 914: LD_VAR 0 17
 918: PUSH
 919: LD_VAR 0 9
 923: ADD
 924: ST_TO_ADDR
// engs := engs ^ un ;
 925: LD_ADDR_VAR 0 13
 929: PUSH
 930: LD_VAR 0 13
 934: PUSH
 935: LD_VAR 0 9
 939: ADD
 940: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 941: LD_VAR 0 9
 945: PPUSH
 946: LD_VAR 0 6
 950: PPUSH
 951: LD_INT 0
 953: PPUSH
 954: CALL_OW 49
// end ;
 958: GO 884
 960: POP
 961: POP
// for i := 1 to scientistsAmount do
 962: LD_ADDR_VAR 0 8
 966: PUSH
 967: DOUBLE
 968: LD_INT 1
 970: DEC
 971: ST_TO_ADDR
 972: LD_VAR 0 4
 976: PUSH
 977: FOR_TO
 978: IFFALSE 1053
// begin PrepareMechanic ( false , enemySkillLevel ) ;
 980: LD_INT 0
 982: PPUSH
 983: LD_VAR 0 16
 987: PPUSH
 988: CALL_OW 383
// un = CreateHuman ;
 992: LD_ADDR_VAR 0 9
 996: PUSH
 997: CALL_OW 44
1001: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
1002: LD_ADDR_VAR 0 17
1006: PUSH
1007: LD_VAR 0 17
1011: PUSH
1012: LD_VAR 0 9
1016: ADD
1017: ST_TO_ADDR
// mechs := mechs ^ un ;
1018: LD_ADDR_VAR 0 14
1022: PUSH
1023: LD_VAR 0 14
1027: PUSH
1028: LD_VAR 0 9
1032: ADD
1033: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1034: LD_VAR 0 9
1038: PPUSH
1039: LD_VAR 0 6
1043: PPUSH
1044: LD_INT 0
1046: PPUSH
1047: CALL_OW 49
// end ;
1051: GO 977
1053: POP
1054: POP
// for i := 1 to vehiclesAmount do
1055: LD_ADDR_VAR 0 8
1059: PUSH
1060: DOUBLE
1061: LD_INT 1
1063: DEC
1064: ST_TO_ADDR
1065: LD_VAR 0 5
1069: PUSH
1070: FOR_TO
1071: IFFALSE 1237
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
1073: LD_ADDR_OWVAR 40
1077: PUSH
1078: LD_INT 2
1080: PUSH
1081: LD_INT 4
1083: PUSH
1084: LD_INT 3
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_INT 1
1094: PPUSH
1095: LD_INT 3
1097: PPUSH
1098: CALL_OW 12
1102: ARRAY
1103: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1104: LD_ADDR_OWVAR 37
1108: PUSH
1109: LD_INT 3
1111: ST_TO_ADDR
// vc_control = control_manual ;
1112: LD_ADDR_OWVAR 38
1116: PUSH
1117: LD_INT 1
1119: ST_TO_ADDR
// vc_engine = engine_combustion ;
1120: LD_ADDR_OWVAR 39
1124: PUSH
1125: LD_INT 1
1127: ST_TO_ADDR
// veh = CreateVehicle ;
1128: LD_ADDR_VAR 0 10
1132: PUSH
1133: CALL_OW 45
1137: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ veh ;
1138: LD_ADDR_VAR 0 17
1142: PUSH
1143: LD_VAR 0 17
1147: PUSH
1148: LD_VAR 0 10
1152: ADD
1153: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
1154: LD_VAR 0 10
1158: PPUSH
1159: LD_VAR 0 6
1163: PPUSH
1164: LD_INT 0
1166: PPUSH
1167: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
1171: LD_INT 0
1173: PPUSH
1174: LD_VAR 0 16
1178: PPUSH
1179: CALL_OW 383
// un = CreateHuman ;
1183: LD_ADDR_VAR 0 9
1187: PUSH
1188: CALL_OW 44
1192: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ un ;
1193: LD_ADDR_VAR 0 17
1197: PUSH
1198: LD_VAR 0 17
1202: PUSH
1203: LD_VAR 0 9
1207: ADD
1208: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1209: LD_VAR 0 9
1213: PPUSH
1214: LD_VAR 0 10
1218: PPUSH
1219: CALL_OW 52
// SetFuel ( veh , 100 ) ;
1223: LD_VAR 0 10
1227: PPUSH
1228: LD_INT 100
1230: PPUSH
1231: CALL_OW 240
// end ;
1235: GO 1070
1237: POP
1238: POP
// end ; end_of_file
1239: LD_VAR 0 7
1243: RET
// every 0 0$1 do
1244: GO 1246
1246: DISABLE
// begin enable ;
1247: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1248: LD_STRING updateTimer(
1250: PUSH
1251: LD_OWVAR 1
1255: STR
1256: PUSH
1257: LD_STRING );
1259: STR
1260: PPUSH
1261: CALL_OW 559
// end ;
1265: END
// export function SOS_MapStart ( ) ; begin
1266: LD_INT 0
1268: PPUSH
// if streamModeActive then
1269: LD_EXP 1
1273: IFFALSE 1282
// DefineStreamItems ( true ) ;
1275: LD_INT 1
1277: PPUSH
1278: CALL 2936 0 1
// UpdateFactoryWaypoints ( ) ;
1282: CALL 15797 0 0
// UpdateWarehouseGatheringPoints ( ) ;
1286: CALL 16054 0 0
// end ;
1290: LD_VAR 0 1
1294: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
1295: LD_INT 0
1297: PPUSH
// if p2 = 100 then
1298: LD_VAR 0 2
1302: PUSH
1303: LD_INT 100
1305: EQUAL
1306: IFFALSE 2309
// begin if not StreamModeActive then
1308: LD_EXP 1
1312: NOT
1313: IFFALSE 1323
// StreamModeActive := true ;
1315: LD_ADDR_EXP 1
1319: PUSH
1320: LD_INT 1
1322: ST_TO_ADDR
// if p3 = 0 then
1323: LD_VAR 0 3
1327: PUSH
1328: LD_INT 0
1330: EQUAL
1331: IFFALSE 1337
// InitStreamMode ;
1333: CALL 2472 0 0
// if p3 = 1 then
1337: LD_VAR 0 3
1341: PUSH
1342: LD_INT 1
1344: EQUAL
1345: IFFALSE 1355
// sRocket := true ;
1347: LD_ADDR_EXP 6
1351: PUSH
1352: LD_INT 1
1354: ST_TO_ADDR
// if p3 = 2 then
1355: LD_VAR 0 3
1359: PUSH
1360: LD_INT 2
1362: EQUAL
1363: IFFALSE 1373
// sSpeed := true ;
1365: LD_ADDR_EXP 5
1369: PUSH
1370: LD_INT 1
1372: ST_TO_ADDR
// if p3 = 3 then
1373: LD_VAR 0 3
1377: PUSH
1378: LD_INT 3
1380: EQUAL
1381: IFFALSE 1391
// sEngine := true ;
1383: LD_ADDR_EXP 7
1387: PUSH
1388: LD_INT 1
1390: ST_TO_ADDR
// if p3 = 4 then
1391: LD_VAR 0 3
1395: PUSH
1396: LD_INT 4
1398: EQUAL
1399: IFFALSE 1409
// sSpec := true ;
1401: LD_ADDR_EXP 4
1405: PUSH
1406: LD_INT 1
1408: ST_TO_ADDR
// if p3 = 5 then
1409: LD_VAR 0 3
1413: PUSH
1414: LD_INT 5
1416: EQUAL
1417: IFFALSE 1427
// sLevel := true ;
1419: LD_ADDR_EXP 8
1423: PUSH
1424: LD_INT 1
1426: ST_TO_ADDR
// if p3 = 6 then
1427: LD_VAR 0 3
1431: PUSH
1432: LD_INT 6
1434: EQUAL
1435: IFFALSE 1445
// sArmoury := true ;
1437: LD_ADDR_EXP 9
1441: PUSH
1442: LD_INT 1
1444: ST_TO_ADDR
// if p3 = 7 then
1445: LD_VAR 0 3
1449: PUSH
1450: LD_INT 7
1452: EQUAL
1453: IFFALSE 1463
// sRadar := true ;
1455: LD_ADDR_EXP 10
1459: PUSH
1460: LD_INT 1
1462: ST_TO_ADDR
// if p3 = 8 then
1463: LD_VAR 0 3
1467: PUSH
1468: LD_INT 8
1470: EQUAL
1471: IFFALSE 1481
// sBunker := true ;
1473: LD_ADDR_EXP 11
1477: PUSH
1478: LD_INT 1
1480: ST_TO_ADDR
// if p3 = 9 then
1481: LD_VAR 0 3
1485: PUSH
1486: LD_INT 9
1488: EQUAL
1489: IFFALSE 1499
// sHack := true ;
1491: LD_ADDR_EXP 12
1495: PUSH
1496: LD_INT 1
1498: ST_TO_ADDR
// if p3 = 10 then
1499: LD_VAR 0 3
1503: PUSH
1504: LD_INT 10
1506: EQUAL
1507: IFFALSE 1517
// sFire := true ;
1509: LD_ADDR_EXP 13
1513: PUSH
1514: LD_INT 1
1516: ST_TO_ADDR
// if p3 = 11 then
1517: LD_VAR 0 3
1521: PUSH
1522: LD_INT 11
1524: EQUAL
1525: IFFALSE 1535
// sRefresh := true ;
1527: LD_ADDR_EXP 14
1531: PUSH
1532: LD_INT 1
1534: ST_TO_ADDR
// if p3 = 12 then
1535: LD_VAR 0 3
1539: PUSH
1540: LD_INT 12
1542: EQUAL
1543: IFFALSE 1553
// sExp := true ;
1545: LD_ADDR_EXP 15
1549: PUSH
1550: LD_INT 1
1552: ST_TO_ADDR
// if p3 = 13 then
1553: LD_VAR 0 3
1557: PUSH
1558: LD_INT 13
1560: EQUAL
1561: IFFALSE 1571
// sDepot := true ;
1563: LD_ADDR_EXP 16
1567: PUSH
1568: LD_INT 1
1570: ST_TO_ADDR
// if p3 = 14 then
1571: LD_VAR 0 3
1575: PUSH
1576: LD_INT 14
1578: EQUAL
1579: IFFALSE 1589
// sFlag := true ;
1581: LD_ADDR_EXP 17
1585: PUSH
1586: LD_INT 1
1588: ST_TO_ADDR
// if p3 = 15 then
1589: LD_VAR 0 3
1593: PUSH
1594: LD_INT 15
1596: EQUAL
1597: IFFALSE 1607
// sKamikadze := true ;
1599: LD_ADDR_EXP 25
1603: PUSH
1604: LD_INT 1
1606: ST_TO_ADDR
// if p3 = 16 then
1607: LD_VAR 0 3
1611: PUSH
1612: LD_INT 16
1614: EQUAL
1615: IFFALSE 1625
// sTroll := true ;
1617: LD_ADDR_EXP 26
1621: PUSH
1622: LD_INT 1
1624: ST_TO_ADDR
// if p3 = 17 then
1625: LD_VAR 0 3
1629: PUSH
1630: LD_INT 17
1632: EQUAL
1633: IFFALSE 1643
// sSlow := true ;
1635: LD_ADDR_EXP 27
1639: PUSH
1640: LD_INT 1
1642: ST_TO_ADDR
// if p3 = 18 then
1643: LD_VAR 0 3
1647: PUSH
1648: LD_INT 18
1650: EQUAL
1651: IFFALSE 1661
// sLack := true ;
1653: LD_ADDR_EXP 28
1657: PUSH
1658: LD_INT 1
1660: ST_TO_ADDR
// if p3 = 19 then
1661: LD_VAR 0 3
1665: PUSH
1666: LD_INT 19
1668: EQUAL
1669: IFFALSE 1679
// sTank := true ;
1671: LD_ADDR_EXP 30
1675: PUSH
1676: LD_INT 1
1678: ST_TO_ADDR
// if p3 = 20 then
1679: LD_VAR 0 3
1683: PUSH
1684: LD_INT 20
1686: EQUAL
1687: IFFALSE 1697
// sRemote := true ;
1689: LD_ADDR_EXP 31
1693: PUSH
1694: LD_INT 1
1696: ST_TO_ADDR
// if p3 = 21 then
1697: LD_VAR 0 3
1701: PUSH
1702: LD_INT 21
1704: EQUAL
1705: IFFALSE 1715
// sPowell := true ;
1707: LD_ADDR_EXP 32
1711: PUSH
1712: LD_INT 1
1714: ST_TO_ADDR
// if p3 = 22 then
1715: LD_VAR 0 3
1719: PUSH
1720: LD_INT 22
1722: EQUAL
1723: IFFALSE 1733
// sTeleport := true ;
1725: LD_ADDR_EXP 35
1729: PUSH
1730: LD_INT 1
1732: ST_TO_ADDR
// if p3 = 23 then
1733: LD_VAR 0 3
1737: PUSH
1738: LD_INT 23
1740: EQUAL
1741: IFFALSE 1751
// sOilTower := true ;
1743: LD_ADDR_EXP 37
1747: PUSH
1748: LD_INT 1
1750: ST_TO_ADDR
// if p3 = 24 then
1751: LD_VAR 0 3
1755: PUSH
1756: LD_INT 24
1758: EQUAL
1759: IFFALSE 1769
// sShovel := true ;
1761: LD_ADDR_EXP 38
1765: PUSH
1766: LD_INT 1
1768: ST_TO_ADDR
// if p3 = 25 then
1769: LD_VAR 0 3
1773: PUSH
1774: LD_INT 25
1776: EQUAL
1777: IFFALSE 1787
// sSheik := true ;
1779: LD_ADDR_EXP 39
1783: PUSH
1784: LD_INT 1
1786: ST_TO_ADDR
// if p3 = 26 then
1787: LD_VAR 0 3
1791: PUSH
1792: LD_INT 26
1794: EQUAL
1795: IFFALSE 1805
// sEarthquake := true ;
1797: LD_ADDR_EXP 41
1801: PUSH
1802: LD_INT 1
1804: ST_TO_ADDR
// if p3 = 27 then
1805: LD_VAR 0 3
1809: PUSH
1810: LD_INT 27
1812: EQUAL
1813: IFFALSE 1823
// sAI := true ;
1815: LD_ADDR_EXP 42
1819: PUSH
1820: LD_INT 1
1822: ST_TO_ADDR
// if p3 = 28 then
1823: LD_VAR 0 3
1827: PUSH
1828: LD_INT 28
1830: EQUAL
1831: IFFALSE 1841
// sCargo := true ;
1833: LD_ADDR_EXP 45
1837: PUSH
1838: LD_INT 1
1840: ST_TO_ADDR
// if p3 = 29 then
1841: LD_VAR 0 3
1845: PUSH
1846: LD_INT 29
1848: EQUAL
1849: IFFALSE 1859
// sDLaser := true ;
1851: LD_ADDR_EXP 46
1855: PUSH
1856: LD_INT 1
1858: ST_TO_ADDR
// if p3 = 30 then
1859: LD_VAR 0 3
1863: PUSH
1864: LD_INT 30
1866: EQUAL
1867: IFFALSE 1877
// sExchange := true ;
1869: LD_ADDR_EXP 47
1873: PUSH
1874: LD_INT 1
1876: ST_TO_ADDR
// if p3 = 31 then
1877: LD_VAR 0 3
1881: PUSH
1882: LD_INT 31
1884: EQUAL
1885: IFFALSE 1895
// sFac := true ;
1887: LD_ADDR_EXP 48
1891: PUSH
1892: LD_INT 1
1894: ST_TO_ADDR
// if p3 = 32 then
1895: LD_VAR 0 3
1899: PUSH
1900: LD_INT 32
1902: EQUAL
1903: IFFALSE 1913
// sPower := true ;
1905: LD_ADDR_EXP 49
1909: PUSH
1910: LD_INT 1
1912: ST_TO_ADDR
// if p3 = 33 then
1913: LD_VAR 0 3
1917: PUSH
1918: LD_INT 33
1920: EQUAL
1921: IFFALSE 1931
// sRandom := true ;
1923: LD_ADDR_EXP 50
1927: PUSH
1928: LD_INT 1
1930: ST_TO_ADDR
// if p3 = 34 then
1931: LD_VAR 0 3
1935: PUSH
1936: LD_INT 34
1938: EQUAL
1939: IFFALSE 1949
// sShield := true ;
1941: LD_ADDR_EXP 51
1945: PUSH
1946: LD_INT 1
1948: ST_TO_ADDR
// if p3 = 35 then
1949: LD_VAR 0 3
1953: PUSH
1954: LD_INT 35
1956: EQUAL
1957: IFFALSE 1967
// sTime := true ;
1959: LD_ADDR_EXP 52
1963: PUSH
1964: LD_INT 1
1966: ST_TO_ADDR
// if p3 = 36 then
1967: LD_VAR 0 3
1971: PUSH
1972: LD_INT 36
1974: EQUAL
1975: IFFALSE 1985
// sTools := true ;
1977: LD_ADDR_EXP 53
1981: PUSH
1982: LD_INT 1
1984: ST_TO_ADDR
// if p3 = 101 then
1985: LD_VAR 0 3
1989: PUSH
1990: LD_INT 101
1992: EQUAL
1993: IFFALSE 2003
// sSold := true ;
1995: LD_ADDR_EXP 18
1999: PUSH
2000: LD_INT 1
2002: ST_TO_ADDR
// if p3 = 102 then
2003: LD_VAR 0 3
2007: PUSH
2008: LD_INT 102
2010: EQUAL
2011: IFFALSE 2021
// sDiff := true ;
2013: LD_ADDR_EXP 19
2017: PUSH
2018: LD_INT 1
2020: ST_TO_ADDR
// if p3 = 103 then
2021: LD_VAR 0 3
2025: PUSH
2026: LD_INT 103
2028: EQUAL
2029: IFFALSE 2039
// sFog := true ;
2031: LD_ADDR_EXP 22
2035: PUSH
2036: LD_INT 1
2038: ST_TO_ADDR
// if p3 = 104 then
2039: LD_VAR 0 3
2043: PUSH
2044: LD_INT 104
2046: EQUAL
2047: IFFALSE 2057
// sReset := true ;
2049: LD_ADDR_EXP 23
2053: PUSH
2054: LD_INT 1
2056: ST_TO_ADDR
// if p3 = 105 then
2057: LD_VAR 0 3
2061: PUSH
2062: LD_INT 105
2064: EQUAL
2065: IFFALSE 2075
// sSun := true ;
2067: LD_ADDR_EXP 24
2071: PUSH
2072: LD_INT 1
2074: ST_TO_ADDR
// if p3 = 106 then
2075: LD_VAR 0 3
2079: PUSH
2080: LD_INT 106
2082: EQUAL
2083: IFFALSE 2093
// sTiger := true ;
2085: LD_ADDR_EXP 20
2089: PUSH
2090: LD_INT 1
2092: ST_TO_ADDR
// if p3 = 107 then
2093: LD_VAR 0 3
2097: PUSH
2098: LD_INT 107
2100: EQUAL
2101: IFFALSE 2111
// sBomb := true ;
2103: LD_ADDR_EXP 21
2107: PUSH
2108: LD_INT 1
2110: ST_TO_ADDR
// if p3 = 108 then
2111: LD_VAR 0 3
2115: PUSH
2116: LD_INT 108
2118: EQUAL
2119: IFFALSE 2129
// sWound := true ;
2121: LD_ADDR_EXP 29
2125: PUSH
2126: LD_INT 1
2128: ST_TO_ADDR
// if p3 = 109 then
2129: LD_VAR 0 3
2133: PUSH
2134: LD_INT 109
2136: EQUAL
2137: IFFALSE 2147
// sBetray := true ;
2139: LD_ADDR_EXP 33
2143: PUSH
2144: LD_INT 1
2146: ST_TO_ADDR
// if p3 = 110 then
2147: LD_VAR 0 3
2151: PUSH
2152: LD_INT 110
2154: EQUAL
2155: IFFALSE 2165
// sContamin := true ;
2157: LD_ADDR_EXP 34
2161: PUSH
2162: LD_INT 1
2164: ST_TO_ADDR
// if p3 = 111 then
2165: LD_VAR 0 3
2169: PUSH
2170: LD_INT 111
2172: EQUAL
2173: IFFALSE 2183
// sOil := true ;
2175: LD_ADDR_EXP 36
2179: PUSH
2180: LD_INT 1
2182: ST_TO_ADDR
// if p3 = 112 then
2183: LD_VAR 0 3
2187: PUSH
2188: LD_INT 112
2190: EQUAL
2191: IFFALSE 2201
// sStu := true ;
2193: LD_ADDR_EXP 40
2197: PUSH
2198: LD_INT 1
2200: ST_TO_ADDR
// if p3 = 113 then
2201: LD_VAR 0 3
2205: PUSH
2206: LD_INT 113
2208: EQUAL
2209: IFFALSE 2219
// sBazooka := true ;
2211: LD_ADDR_EXP 43
2215: PUSH
2216: LD_INT 1
2218: ST_TO_ADDR
// if p3 = 114 then
2219: LD_VAR 0 3
2223: PUSH
2224: LD_INT 114
2226: EQUAL
2227: IFFALSE 2237
// sMortar := true ;
2229: LD_ADDR_EXP 44
2233: PUSH
2234: LD_INT 1
2236: ST_TO_ADDR
// if p3 = 115 then
2237: LD_VAR 0 3
2241: PUSH
2242: LD_INT 115
2244: EQUAL
2245: IFFALSE 2255
// sRanger := true ;
2247: LD_ADDR_EXP 54
2251: PUSH
2252: LD_INT 1
2254: ST_TO_ADDR
// if p3 = 116 then
2255: LD_VAR 0 3
2259: PUSH
2260: LD_INT 116
2262: EQUAL
2263: IFFALSE 2273
// sComputer := true ;
2265: LD_ADDR_EXP 55
2269: PUSH
2270: LD_INT 1
2272: ST_TO_ADDR
// if p3 = 117 then
2273: LD_VAR 0 3
2277: PUSH
2278: LD_INT 117
2280: EQUAL
2281: IFFALSE 2291
// s30 := true ;
2283: LD_ADDR_EXP 56
2287: PUSH
2288: LD_INT 1
2290: ST_TO_ADDR
// if p3 = 118 then
2291: LD_VAR 0 3
2295: PUSH
2296: LD_INT 118
2298: EQUAL
2299: IFFALSE 2309
// s60 := true ;
2301: LD_ADDR_EXP 57
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// end ; if p2 = 101 then
2309: LD_VAR 0 2
2313: PUSH
2314: LD_INT 101
2316: EQUAL
2317: IFFALSE 2445
// begin case p3 of 1 :
2319: LD_VAR 0 3
2323: PUSH
2324: LD_INT 1
2326: DOUBLE
2327: EQUAL
2328: IFTRUE 2332
2330: GO 2339
2332: POP
// hHackUnlimitedResources ; 2 :
2333: CALL 14543 0 0
2337: GO 2445
2339: LD_INT 2
2341: DOUBLE
2342: EQUAL
2343: IFTRUE 2347
2345: GO 2354
2347: POP
// hHackSetLevel10 ; 3 :
2348: CALL 14676 0 0
2352: GO 2445
2354: LD_INT 3
2356: DOUBLE
2357: EQUAL
2358: IFTRUE 2362
2360: GO 2369
2362: POP
// hHackSetLevel10YourUnits ; 4 :
2363: CALL 14761 0 0
2367: GO 2445
2369: LD_INT 4
2371: DOUBLE
2372: EQUAL
2373: IFTRUE 2377
2375: GO 2384
2377: POP
// hHackInvincible ; 5 :
2378: CALL 15209 0 0
2382: GO 2445
2384: LD_INT 5
2386: DOUBLE
2387: EQUAL
2388: IFTRUE 2392
2390: GO 2399
2392: POP
// hHackInvisible ; 6 :
2393: CALL 15320 0 0
2397: GO 2445
2399: LD_INT 6
2401: DOUBLE
2402: EQUAL
2403: IFTRUE 2407
2405: GO 2414
2407: POP
// hHackChangeYourSide ; 7 :
2408: CALL 15377 0 0
2412: GO 2445
2414: LD_INT 7
2416: DOUBLE
2417: EQUAL
2418: IFTRUE 2422
2420: GO 2429
2422: POP
// hHackChangeUnitSide ; 8 :
2423: CALL 15419 0 0
2427: GO 2445
2429: LD_INT 8
2431: DOUBLE
2432: EQUAL
2433: IFTRUE 2437
2435: GO 2444
2437: POP
// hHackFog ; end ;
2438: CALL 15520 0 0
2442: GO 2445
2444: POP
// end ; end ;
2445: LD_VAR 0 7
2449: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
2450: GO 2452
2452: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
2453: LD_STRING initStreamRollete();
2455: PPUSH
2456: CALL_OW 559
// InitStreamMode ;
2460: CALL 2472 0 0
// DefineStreamItems ( false ) ;
2464: LD_INT 0
2466: PPUSH
2467: CALL 2936 0 1
// end ;
2471: END
// function InitStreamMode ; begin
2472: LD_INT 0
2474: PPUSH
// streamModeActive := false ;
2475: LD_ADDR_EXP 1
2479: PUSH
2480: LD_INT 0
2482: ST_TO_ADDR
// normalCounter := 36 ;
2483: LD_ADDR_EXP 2
2487: PUSH
2488: LD_INT 36
2490: ST_TO_ADDR
// hardcoreCounter := 18 ;
2491: LD_ADDR_EXP 3
2495: PUSH
2496: LD_INT 18
2498: ST_TO_ADDR
// sRocket := false ;
2499: LD_ADDR_EXP 6
2503: PUSH
2504: LD_INT 0
2506: ST_TO_ADDR
// sSpeed := false ;
2507: LD_ADDR_EXP 5
2511: PUSH
2512: LD_INT 0
2514: ST_TO_ADDR
// sEngine := false ;
2515: LD_ADDR_EXP 7
2519: PUSH
2520: LD_INT 0
2522: ST_TO_ADDR
// sSpec := false ;
2523: LD_ADDR_EXP 4
2527: PUSH
2528: LD_INT 0
2530: ST_TO_ADDR
// sLevel := false ;
2531: LD_ADDR_EXP 8
2535: PUSH
2536: LD_INT 0
2538: ST_TO_ADDR
// sArmoury := false ;
2539: LD_ADDR_EXP 9
2543: PUSH
2544: LD_INT 0
2546: ST_TO_ADDR
// sRadar := false ;
2547: LD_ADDR_EXP 10
2551: PUSH
2552: LD_INT 0
2554: ST_TO_ADDR
// sBunker := false ;
2555: LD_ADDR_EXP 11
2559: PUSH
2560: LD_INT 0
2562: ST_TO_ADDR
// sHack := false ;
2563: LD_ADDR_EXP 12
2567: PUSH
2568: LD_INT 0
2570: ST_TO_ADDR
// sFire := false ;
2571: LD_ADDR_EXP 13
2575: PUSH
2576: LD_INT 0
2578: ST_TO_ADDR
// sRefresh := false ;
2579: LD_ADDR_EXP 14
2583: PUSH
2584: LD_INT 0
2586: ST_TO_ADDR
// sExp := false ;
2587: LD_ADDR_EXP 15
2591: PUSH
2592: LD_INT 0
2594: ST_TO_ADDR
// sDepot := false ;
2595: LD_ADDR_EXP 16
2599: PUSH
2600: LD_INT 0
2602: ST_TO_ADDR
// sFlag := false ;
2603: LD_ADDR_EXP 17
2607: PUSH
2608: LD_INT 0
2610: ST_TO_ADDR
// sKamikadze := false ;
2611: LD_ADDR_EXP 25
2615: PUSH
2616: LD_INT 0
2618: ST_TO_ADDR
// sTroll := false ;
2619: LD_ADDR_EXP 26
2623: PUSH
2624: LD_INT 0
2626: ST_TO_ADDR
// sSlow := false ;
2627: LD_ADDR_EXP 27
2631: PUSH
2632: LD_INT 0
2634: ST_TO_ADDR
// sLack := false ;
2635: LD_ADDR_EXP 28
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// sTank := false ;
2643: LD_ADDR_EXP 30
2647: PUSH
2648: LD_INT 0
2650: ST_TO_ADDR
// sRemote := false ;
2651: LD_ADDR_EXP 31
2655: PUSH
2656: LD_INT 0
2658: ST_TO_ADDR
// sPowell := false ;
2659: LD_ADDR_EXP 32
2663: PUSH
2664: LD_INT 0
2666: ST_TO_ADDR
// sTeleport := false ;
2667: LD_ADDR_EXP 35
2671: PUSH
2672: LD_INT 0
2674: ST_TO_ADDR
// sOilTower := false ;
2675: LD_ADDR_EXP 37
2679: PUSH
2680: LD_INT 0
2682: ST_TO_ADDR
// sShovel := false ;
2683: LD_ADDR_EXP 38
2687: PUSH
2688: LD_INT 0
2690: ST_TO_ADDR
// sSheik := false ;
2691: LD_ADDR_EXP 39
2695: PUSH
2696: LD_INT 0
2698: ST_TO_ADDR
// sEarthquake := false ;
2699: LD_ADDR_EXP 41
2703: PUSH
2704: LD_INT 0
2706: ST_TO_ADDR
// sAI := false ;
2707: LD_ADDR_EXP 42
2711: PUSH
2712: LD_INT 0
2714: ST_TO_ADDR
// sCargo := false ;
2715: LD_ADDR_EXP 45
2719: PUSH
2720: LD_INT 0
2722: ST_TO_ADDR
// sDLaser := false ;
2723: LD_ADDR_EXP 46
2727: PUSH
2728: LD_INT 0
2730: ST_TO_ADDR
// sExchange := false ;
2731: LD_ADDR_EXP 47
2735: PUSH
2736: LD_INT 0
2738: ST_TO_ADDR
// sFac := false ;
2739: LD_ADDR_EXP 48
2743: PUSH
2744: LD_INT 0
2746: ST_TO_ADDR
// sPower := false ;
2747: LD_ADDR_EXP 49
2751: PUSH
2752: LD_INT 0
2754: ST_TO_ADDR
// sRandom := false ;
2755: LD_ADDR_EXP 50
2759: PUSH
2760: LD_INT 0
2762: ST_TO_ADDR
// sShield := false ;
2763: LD_ADDR_EXP 51
2767: PUSH
2768: LD_INT 0
2770: ST_TO_ADDR
// sTime := false ;
2771: LD_ADDR_EXP 52
2775: PUSH
2776: LD_INT 0
2778: ST_TO_ADDR
// sTools := false ;
2779: LD_ADDR_EXP 53
2783: PUSH
2784: LD_INT 0
2786: ST_TO_ADDR
// sSold := false ;
2787: LD_ADDR_EXP 18
2791: PUSH
2792: LD_INT 0
2794: ST_TO_ADDR
// sDiff := false ;
2795: LD_ADDR_EXP 19
2799: PUSH
2800: LD_INT 0
2802: ST_TO_ADDR
// sFog := false ;
2803: LD_ADDR_EXP 22
2807: PUSH
2808: LD_INT 0
2810: ST_TO_ADDR
// sReset := false ;
2811: LD_ADDR_EXP 23
2815: PUSH
2816: LD_INT 0
2818: ST_TO_ADDR
// sSun := false ;
2819: LD_ADDR_EXP 24
2823: PUSH
2824: LD_INT 0
2826: ST_TO_ADDR
// sTiger := false ;
2827: LD_ADDR_EXP 20
2831: PUSH
2832: LD_INT 0
2834: ST_TO_ADDR
// sBomb := false ;
2835: LD_ADDR_EXP 21
2839: PUSH
2840: LD_INT 0
2842: ST_TO_ADDR
// sWound := false ;
2843: LD_ADDR_EXP 29
2847: PUSH
2848: LD_INT 0
2850: ST_TO_ADDR
// sBetray := false ;
2851: LD_ADDR_EXP 33
2855: PUSH
2856: LD_INT 0
2858: ST_TO_ADDR
// sContamin := false ;
2859: LD_ADDR_EXP 34
2863: PUSH
2864: LD_INT 0
2866: ST_TO_ADDR
// sOil := false ;
2867: LD_ADDR_EXP 36
2871: PUSH
2872: LD_INT 0
2874: ST_TO_ADDR
// sStu := false ;
2875: LD_ADDR_EXP 40
2879: PUSH
2880: LD_INT 0
2882: ST_TO_ADDR
// sBazooka := false ;
2883: LD_ADDR_EXP 43
2887: PUSH
2888: LD_INT 0
2890: ST_TO_ADDR
// sMortar := false ;
2891: LD_ADDR_EXP 44
2895: PUSH
2896: LD_INT 0
2898: ST_TO_ADDR
// sRanger := false ;
2899: LD_ADDR_EXP 54
2903: PUSH
2904: LD_INT 0
2906: ST_TO_ADDR
// sComputer := false ;
2907: LD_ADDR_EXP 55
2911: PUSH
2912: LD_INT 0
2914: ST_TO_ADDR
// s30 := false ;
2915: LD_ADDR_EXP 56
2919: PUSH
2920: LD_INT 0
2922: ST_TO_ADDR
// s60 := false ;
2923: LD_ADDR_EXP 57
2927: PUSH
2928: LD_INT 0
2930: ST_TO_ADDR
// end ;
2931: LD_VAR 0 1
2935: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
2936: LD_INT 0
2938: PPUSH
2939: PPUSH
2940: PPUSH
2941: PPUSH
2942: PPUSH
2943: PPUSH
2944: PPUSH
// result := [ ] ;
2945: LD_ADDR_VAR 0 2
2949: PUSH
2950: EMPTY
2951: ST_TO_ADDR
// if campaign_id = 1 then
2952: LD_OWVAR 69
2956: PUSH
2957: LD_INT 1
2959: EQUAL
2960: IFFALSE 6126
// begin case mission_number of 1 :
2962: LD_OWVAR 70
2966: PUSH
2967: LD_INT 1
2969: DOUBLE
2970: EQUAL
2971: IFTRUE 2975
2973: GO 3051
2975: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
2976: LD_ADDR_VAR 0 2
2980: PUSH
2981: LD_INT 2
2983: PUSH
2984: LD_INT 4
2986: PUSH
2987: LD_INT 11
2989: PUSH
2990: LD_INT 12
2992: PUSH
2993: LD_INT 15
2995: PUSH
2996: LD_INT 16
2998: PUSH
2999: LD_INT 22
3001: PUSH
3002: LD_INT 23
3004: PUSH
3005: LD_INT 26
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: LIST
3016: LIST
3017: LIST
3018: PUSH
3019: LD_INT 101
3021: PUSH
3022: LD_INT 102
3024: PUSH
3025: LD_INT 106
3027: PUSH
3028: LD_INT 116
3030: PUSH
3031: LD_INT 117
3033: PUSH
3034: LD_INT 118
3036: PUSH
3037: EMPTY
3038: LIST
3039: LIST
3040: LIST
3041: LIST
3042: LIST
3043: LIST
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: ST_TO_ADDR
3049: GO 6124
3051: LD_INT 2
3053: DOUBLE
3054: EQUAL
3055: IFTRUE 3059
3057: GO 3143
3059: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3060: LD_ADDR_VAR 0 2
3064: PUSH
3065: LD_INT 2
3067: PUSH
3068: LD_INT 4
3070: PUSH
3071: LD_INT 11
3073: PUSH
3074: LD_INT 12
3076: PUSH
3077: LD_INT 15
3079: PUSH
3080: LD_INT 16
3082: PUSH
3083: LD_INT 22
3085: PUSH
3086: LD_INT 23
3088: PUSH
3089: LD_INT 26
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: PUSH
3103: LD_INT 101
3105: PUSH
3106: LD_INT 102
3108: PUSH
3109: LD_INT 105
3111: PUSH
3112: LD_INT 106
3114: PUSH
3115: LD_INT 108
3117: PUSH
3118: LD_INT 116
3120: PUSH
3121: LD_INT 117
3123: PUSH
3124: LD_INT 118
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: LIST
3136: PUSH
3137: EMPTY
3138: LIST
3139: LIST
3140: ST_TO_ADDR
3141: GO 6124
3143: LD_INT 3
3145: DOUBLE
3146: EQUAL
3147: IFTRUE 3151
3149: GO 3239
3151: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3152: LD_ADDR_VAR 0 2
3156: PUSH
3157: LD_INT 2
3159: PUSH
3160: LD_INT 4
3162: PUSH
3163: LD_INT 5
3165: PUSH
3166: LD_INT 11
3168: PUSH
3169: LD_INT 12
3171: PUSH
3172: LD_INT 15
3174: PUSH
3175: LD_INT 16
3177: PUSH
3178: LD_INT 22
3180: PUSH
3181: LD_INT 26
3183: PUSH
3184: LD_INT 36
3186: PUSH
3187: EMPTY
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: PUSH
3199: LD_INT 101
3201: PUSH
3202: LD_INT 102
3204: PUSH
3205: LD_INT 105
3207: PUSH
3208: LD_INT 106
3210: PUSH
3211: LD_INT 108
3213: PUSH
3214: LD_INT 116
3216: PUSH
3217: LD_INT 117
3219: PUSH
3220: LD_INT 118
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: LIST
3229: LIST
3230: LIST
3231: LIST
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: ST_TO_ADDR
3237: GO 6124
3239: LD_INT 4
3241: DOUBLE
3242: EQUAL
3243: IFTRUE 3247
3245: GO 3343
3247: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
3248: LD_ADDR_VAR 0 2
3252: PUSH
3253: LD_INT 2
3255: PUSH
3256: LD_INT 4
3258: PUSH
3259: LD_INT 5
3261: PUSH
3262: LD_INT 8
3264: PUSH
3265: LD_INT 11
3267: PUSH
3268: LD_INT 12
3270: PUSH
3271: LD_INT 15
3273: PUSH
3274: LD_INT 16
3276: PUSH
3277: LD_INT 22
3279: PUSH
3280: LD_INT 23
3282: PUSH
3283: LD_INT 26
3285: PUSH
3286: LD_INT 36
3288: PUSH
3289: EMPTY
3290: LIST
3291: LIST
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: PUSH
3303: LD_INT 101
3305: PUSH
3306: LD_INT 102
3308: PUSH
3309: LD_INT 105
3311: PUSH
3312: LD_INT 106
3314: PUSH
3315: LD_INT 108
3317: PUSH
3318: LD_INT 116
3320: PUSH
3321: LD_INT 117
3323: PUSH
3324: LD_INT 118
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: LIST
3335: LIST
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: ST_TO_ADDR
3341: GO 6124
3343: LD_INT 5
3345: DOUBLE
3346: EQUAL
3347: IFTRUE 3351
3349: GO 3463
3351: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
3352: LD_ADDR_VAR 0 2
3356: PUSH
3357: LD_INT 2
3359: PUSH
3360: LD_INT 4
3362: PUSH
3363: LD_INT 5
3365: PUSH
3366: LD_INT 6
3368: PUSH
3369: LD_INT 8
3371: PUSH
3372: LD_INT 11
3374: PUSH
3375: LD_INT 12
3377: PUSH
3378: LD_INT 15
3380: PUSH
3381: LD_INT 16
3383: PUSH
3384: LD_INT 22
3386: PUSH
3387: LD_INT 23
3389: PUSH
3390: LD_INT 25
3392: PUSH
3393: LD_INT 26
3395: PUSH
3396: LD_INT 36
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: PUSH
3415: LD_INT 101
3417: PUSH
3418: LD_INT 102
3420: PUSH
3421: LD_INT 105
3423: PUSH
3424: LD_INT 106
3426: PUSH
3427: LD_INT 108
3429: PUSH
3430: LD_INT 109
3432: PUSH
3433: LD_INT 112
3435: PUSH
3436: LD_INT 116
3438: PUSH
3439: LD_INT 117
3441: PUSH
3442: LD_INT 118
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: LIST
3449: LIST
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: ST_TO_ADDR
3461: GO 6124
3463: LD_INT 6
3465: DOUBLE
3466: EQUAL
3467: IFTRUE 3471
3469: GO 3603
3471: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
3472: LD_ADDR_VAR 0 2
3476: PUSH
3477: LD_INT 2
3479: PUSH
3480: LD_INT 4
3482: PUSH
3483: LD_INT 5
3485: PUSH
3486: LD_INT 6
3488: PUSH
3489: LD_INT 8
3491: PUSH
3492: LD_INT 11
3494: PUSH
3495: LD_INT 12
3497: PUSH
3498: LD_INT 15
3500: PUSH
3501: LD_INT 16
3503: PUSH
3504: LD_INT 20
3506: PUSH
3507: LD_INT 21
3509: PUSH
3510: LD_INT 22
3512: PUSH
3513: LD_INT 23
3515: PUSH
3516: LD_INT 25
3518: PUSH
3519: LD_INT 26
3521: PUSH
3522: LD_INT 30
3524: PUSH
3525: LD_INT 31
3527: PUSH
3528: LD_INT 32
3530: PUSH
3531: LD_INT 36
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: PUSH
3555: LD_INT 101
3557: PUSH
3558: LD_INT 102
3560: PUSH
3561: LD_INT 105
3563: PUSH
3564: LD_INT 106
3566: PUSH
3567: LD_INT 108
3569: PUSH
3570: LD_INT 109
3572: PUSH
3573: LD_INT 112
3575: PUSH
3576: LD_INT 116
3578: PUSH
3579: LD_INT 117
3581: PUSH
3582: LD_INT 118
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: ST_TO_ADDR
3601: GO 6124
3603: LD_INT 7
3605: DOUBLE
3606: EQUAL
3607: IFTRUE 3611
3609: GO 3723
3611: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
3612: LD_ADDR_VAR 0 2
3616: PUSH
3617: LD_INT 2
3619: PUSH
3620: LD_INT 4
3622: PUSH
3623: LD_INT 5
3625: PUSH
3626: LD_INT 7
3628: PUSH
3629: LD_INT 11
3631: PUSH
3632: LD_INT 12
3634: PUSH
3635: LD_INT 15
3637: PUSH
3638: LD_INT 16
3640: PUSH
3641: LD_INT 20
3643: PUSH
3644: LD_INT 21
3646: PUSH
3647: LD_INT 22
3649: PUSH
3650: LD_INT 23
3652: PUSH
3653: LD_INT 25
3655: PUSH
3656: LD_INT 26
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: PUSH
3675: LD_INT 101
3677: PUSH
3678: LD_INT 102
3680: PUSH
3681: LD_INT 103
3683: PUSH
3684: LD_INT 105
3686: PUSH
3687: LD_INT 106
3689: PUSH
3690: LD_INT 108
3692: PUSH
3693: LD_INT 112
3695: PUSH
3696: LD_INT 116
3698: PUSH
3699: LD_INT 117
3701: PUSH
3702: LD_INT 118
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: ST_TO_ADDR
3721: GO 6124
3723: LD_INT 8
3725: DOUBLE
3726: EQUAL
3727: IFTRUE 3731
3729: GO 3871
3731: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
3732: LD_ADDR_VAR 0 2
3736: PUSH
3737: LD_INT 2
3739: PUSH
3740: LD_INT 4
3742: PUSH
3743: LD_INT 5
3745: PUSH
3746: LD_INT 6
3748: PUSH
3749: LD_INT 7
3751: PUSH
3752: LD_INT 8
3754: PUSH
3755: LD_INT 11
3757: PUSH
3758: LD_INT 12
3760: PUSH
3761: LD_INT 15
3763: PUSH
3764: LD_INT 16
3766: PUSH
3767: LD_INT 20
3769: PUSH
3770: LD_INT 21
3772: PUSH
3773: LD_INT 22
3775: PUSH
3776: LD_INT 23
3778: PUSH
3779: LD_INT 25
3781: PUSH
3782: LD_INT 26
3784: PUSH
3785: LD_INT 30
3787: PUSH
3788: LD_INT 31
3790: PUSH
3791: LD_INT 32
3793: PUSH
3794: LD_INT 36
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: PUSH
3819: LD_INT 101
3821: PUSH
3822: LD_INT 102
3824: PUSH
3825: LD_INT 103
3827: PUSH
3828: LD_INT 105
3830: PUSH
3831: LD_INT 106
3833: PUSH
3834: LD_INT 108
3836: PUSH
3837: LD_INT 109
3839: PUSH
3840: LD_INT 112
3842: PUSH
3843: LD_INT 116
3845: PUSH
3846: LD_INT 117
3848: PUSH
3849: LD_INT 118
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: PUSH
3865: EMPTY
3866: LIST
3867: LIST
3868: ST_TO_ADDR
3869: GO 6124
3871: LD_INT 9
3873: DOUBLE
3874: EQUAL
3875: IFTRUE 3879
3877: GO 4027
3879: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
3880: LD_ADDR_VAR 0 2
3884: PUSH
3885: LD_INT 2
3887: PUSH
3888: LD_INT 4
3890: PUSH
3891: LD_INT 5
3893: PUSH
3894: LD_INT 6
3896: PUSH
3897: LD_INT 7
3899: PUSH
3900: LD_INT 8
3902: PUSH
3903: LD_INT 11
3905: PUSH
3906: LD_INT 12
3908: PUSH
3909: LD_INT 15
3911: PUSH
3912: LD_INT 16
3914: PUSH
3915: LD_INT 20
3917: PUSH
3918: LD_INT 21
3920: PUSH
3921: LD_INT 22
3923: PUSH
3924: LD_INT 23
3926: PUSH
3927: LD_INT 25
3929: PUSH
3930: LD_INT 26
3932: PUSH
3933: LD_INT 28
3935: PUSH
3936: LD_INT 30
3938: PUSH
3939: LD_INT 31
3941: PUSH
3942: LD_INT 32
3944: PUSH
3945: LD_INT 36
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: LIST
3958: LIST
3959: LIST
3960: LIST
3961: LIST
3962: LIST
3963: LIST
3964: LIST
3965: LIST
3966: LIST
3967: LIST
3968: LIST
3969: LIST
3970: PUSH
3971: LD_INT 101
3973: PUSH
3974: LD_INT 102
3976: PUSH
3977: LD_INT 103
3979: PUSH
3980: LD_INT 105
3982: PUSH
3983: LD_INT 106
3985: PUSH
3986: LD_INT 108
3988: PUSH
3989: LD_INT 109
3991: PUSH
3992: LD_INT 112
3994: PUSH
3995: LD_INT 114
3997: PUSH
3998: LD_INT 116
4000: PUSH
4001: LD_INT 117
4003: PUSH
4004: LD_INT 118
4006: PUSH
4007: EMPTY
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: ST_TO_ADDR
4025: GO 6124
4027: LD_INT 10
4029: DOUBLE
4030: EQUAL
4031: IFTRUE 4035
4033: GO 4231
4035: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4036: LD_ADDR_VAR 0 2
4040: PUSH
4041: LD_INT 2
4043: PUSH
4044: LD_INT 4
4046: PUSH
4047: LD_INT 5
4049: PUSH
4050: LD_INT 6
4052: PUSH
4053: LD_INT 7
4055: PUSH
4056: LD_INT 8
4058: PUSH
4059: LD_INT 9
4061: PUSH
4062: LD_INT 10
4064: PUSH
4065: LD_INT 11
4067: PUSH
4068: LD_INT 12
4070: PUSH
4071: LD_INT 13
4073: PUSH
4074: LD_INT 14
4076: PUSH
4077: LD_INT 15
4079: PUSH
4080: LD_INT 16
4082: PUSH
4083: LD_INT 17
4085: PUSH
4086: LD_INT 18
4088: PUSH
4089: LD_INT 19
4091: PUSH
4092: LD_INT 20
4094: PUSH
4095: LD_INT 21
4097: PUSH
4098: LD_INT 22
4100: PUSH
4101: LD_INT 23
4103: PUSH
4104: LD_INT 24
4106: PUSH
4107: LD_INT 25
4109: PUSH
4110: LD_INT 26
4112: PUSH
4113: LD_INT 28
4115: PUSH
4116: LD_INT 30
4118: PUSH
4119: LD_INT 31
4121: PUSH
4122: LD_INT 32
4124: PUSH
4125: LD_INT 36
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: LIST
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: PUSH
4159: LD_INT 101
4161: PUSH
4162: LD_INT 102
4164: PUSH
4165: LD_INT 103
4167: PUSH
4168: LD_INT 104
4170: PUSH
4171: LD_INT 105
4173: PUSH
4174: LD_INT 106
4176: PUSH
4177: LD_INT 107
4179: PUSH
4180: LD_INT 108
4182: PUSH
4183: LD_INT 109
4185: PUSH
4186: LD_INT 110
4188: PUSH
4189: LD_INT 111
4191: PUSH
4192: LD_INT 112
4194: PUSH
4195: LD_INT 114
4197: PUSH
4198: LD_INT 116
4200: PUSH
4201: LD_INT 117
4203: PUSH
4204: LD_INT 118
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: LIST
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: LIST
4219: LIST
4220: LIST
4221: LIST
4222: LIST
4223: LIST
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: ST_TO_ADDR
4229: GO 6124
4231: LD_INT 11
4233: DOUBLE
4234: EQUAL
4235: IFTRUE 4239
4237: GO 4443
4239: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4240: LD_ADDR_VAR 0 2
4244: PUSH
4245: LD_INT 2
4247: PUSH
4248: LD_INT 3
4250: PUSH
4251: LD_INT 4
4253: PUSH
4254: LD_INT 5
4256: PUSH
4257: LD_INT 6
4259: PUSH
4260: LD_INT 7
4262: PUSH
4263: LD_INT 8
4265: PUSH
4266: LD_INT 9
4268: PUSH
4269: LD_INT 10
4271: PUSH
4272: LD_INT 11
4274: PUSH
4275: LD_INT 12
4277: PUSH
4278: LD_INT 13
4280: PUSH
4281: LD_INT 14
4283: PUSH
4284: LD_INT 15
4286: PUSH
4287: LD_INT 16
4289: PUSH
4290: LD_INT 17
4292: PUSH
4293: LD_INT 18
4295: PUSH
4296: LD_INT 19
4298: PUSH
4299: LD_INT 20
4301: PUSH
4302: LD_INT 21
4304: PUSH
4305: LD_INT 22
4307: PUSH
4308: LD_INT 23
4310: PUSH
4311: LD_INT 24
4313: PUSH
4314: LD_INT 25
4316: PUSH
4317: LD_INT 26
4319: PUSH
4320: LD_INT 28
4322: PUSH
4323: LD_INT 30
4325: PUSH
4326: LD_INT 31
4328: PUSH
4329: LD_INT 32
4331: PUSH
4332: LD_INT 34
4334: PUSH
4335: LD_INT 36
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: PUSH
4371: LD_INT 101
4373: PUSH
4374: LD_INT 102
4376: PUSH
4377: LD_INT 103
4379: PUSH
4380: LD_INT 104
4382: PUSH
4383: LD_INT 105
4385: PUSH
4386: LD_INT 106
4388: PUSH
4389: LD_INT 107
4391: PUSH
4392: LD_INT 108
4394: PUSH
4395: LD_INT 109
4397: PUSH
4398: LD_INT 110
4400: PUSH
4401: LD_INT 111
4403: PUSH
4404: LD_INT 112
4406: PUSH
4407: LD_INT 114
4409: PUSH
4410: LD_INT 116
4412: PUSH
4413: LD_INT 117
4415: PUSH
4416: LD_INT 118
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: LIST
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: ST_TO_ADDR
4441: GO 6124
4443: LD_INT 12
4445: DOUBLE
4446: EQUAL
4447: IFTRUE 4451
4449: GO 4671
4451: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
4452: LD_ADDR_VAR 0 2
4456: PUSH
4457: LD_INT 1
4459: PUSH
4460: LD_INT 2
4462: PUSH
4463: LD_INT 3
4465: PUSH
4466: LD_INT 4
4468: PUSH
4469: LD_INT 5
4471: PUSH
4472: LD_INT 6
4474: PUSH
4475: LD_INT 7
4477: PUSH
4478: LD_INT 8
4480: PUSH
4481: LD_INT 9
4483: PUSH
4484: LD_INT 10
4486: PUSH
4487: LD_INT 11
4489: PUSH
4490: LD_INT 12
4492: PUSH
4493: LD_INT 13
4495: PUSH
4496: LD_INT 14
4498: PUSH
4499: LD_INT 15
4501: PUSH
4502: LD_INT 16
4504: PUSH
4505: LD_INT 17
4507: PUSH
4508: LD_INT 18
4510: PUSH
4511: LD_INT 19
4513: PUSH
4514: LD_INT 20
4516: PUSH
4517: LD_INT 21
4519: PUSH
4520: LD_INT 22
4522: PUSH
4523: LD_INT 23
4525: PUSH
4526: LD_INT 24
4528: PUSH
4529: LD_INT 25
4531: PUSH
4532: LD_INT 26
4534: PUSH
4535: LD_INT 27
4537: PUSH
4538: LD_INT 28
4540: PUSH
4541: LD_INT 30
4543: PUSH
4544: LD_INT 31
4546: PUSH
4547: LD_INT 32
4549: PUSH
4550: LD_INT 33
4552: PUSH
4553: LD_INT 34
4555: PUSH
4556: LD_INT 36
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: PUSH
4595: LD_INT 101
4597: PUSH
4598: LD_INT 102
4600: PUSH
4601: LD_INT 103
4603: PUSH
4604: LD_INT 104
4606: PUSH
4607: LD_INT 105
4609: PUSH
4610: LD_INT 106
4612: PUSH
4613: LD_INT 107
4615: PUSH
4616: LD_INT 108
4618: PUSH
4619: LD_INT 109
4621: PUSH
4622: LD_INT 110
4624: PUSH
4625: LD_INT 111
4627: PUSH
4628: LD_INT 112
4630: PUSH
4631: LD_INT 113
4633: PUSH
4634: LD_INT 114
4636: PUSH
4637: LD_INT 116
4639: PUSH
4640: LD_INT 117
4642: PUSH
4643: LD_INT 118
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: LIST
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: LIST
4658: LIST
4659: LIST
4660: LIST
4661: LIST
4662: LIST
4663: LIST
4664: PUSH
4665: EMPTY
4666: LIST
4667: LIST
4668: ST_TO_ADDR
4669: GO 6124
4671: LD_INT 13
4673: DOUBLE
4674: EQUAL
4675: IFTRUE 4679
4677: GO 4887
4679: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
4680: LD_ADDR_VAR 0 2
4684: PUSH
4685: LD_INT 1
4687: PUSH
4688: LD_INT 2
4690: PUSH
4691: LD_INT 3
4693: PUSH
4694: LD_INT 4
4696: PUSH
4697: LD_INT 5
4699: PUSH
4700: LD_INT 8
4702: PUSH
4703: LD_INT 9
4705: PUSH
4706: LD_INT 10
4708: PUSH
4709: LD_INT 11
4711: PUSH
4712: LD_INT 12
4714: PUSH
4715: LD_INT 14
4717: PUSH
4718: LD_INT 15
4720: PUSH
4721: LD_INT 16
4723: PUSH
4724: LD_INT 17
4726: PUSH
4727: LD_INT 18
4729: PUSH
4730: LD_INT 19
4732: PUSH
4733: LD_INT 20
4735: PUSH
4736: LD_INT 21
4738: PUSH
4739: LD_INT 22
4741: PUSH
4742: LD_INT 23
4744: PUSH
4745: LD_INT 24
4747: PUSH
4748: LD_INT 25
4750: PUSH
4751: LD_INT 26
4753: PUSH
4754: LD_INT 27
4756: PUSH
4757: LD_INT 28
4759: PUSH
4760: LD_INT 30
4762: PUSH
4763: LD_INT 31
4765: PUSH
4766: LD_INT 32
4768: PUSH
4769: LD_INT 33
4771: PUSH
4772: LD_INT 34
4774: PUSH
4775: LD_INT 36
4777: PUSH
4778: EMPTY
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: PUSH
4811: LD_INT 101
4813: PUSH
4814: LD_INT 102
4816: PUSH
4817: LD_INT 103
4819: PUSH
4820: LD_INT 104
4822: PUSH
4823: LD_INT 105
4825: PUSH
4826: LD_INT 106
4828: PUSH
4829: LD_INT 107
4831: PUSH
4832: LD_INT 108
4834: PUSH
4835: LD_INT 109
4837: PUSH
4838: LD_INT 110
4840: PUSH
4841: LD_INT 111
4843: PUSH
4844: LD_INT 112
4846: PUSH
4847: LD_INT 113
4849: PUSH
4850: LD_INT 114
4852: PUSH
4853: LD_INT 116
4855: PUSH
4856: LD_INT 117
4858: PUSH
4859: LD_INT 118
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: ST_TO_ADDR
4885: GO 6124
4887: LD_INT 14
4889: DOUBLE
4890: EQUAL
4891: IFTRUE 4895
4893: GO 5119
4895: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
4896: LD_ADDR_VAR 0 2
4900: PUSH
4901: LD_INT 1
4903: PUSH
4904: LD_INT 2
4906: PUSH
4907: LD_INT 3
4909: PUSH
4910: LD_INT 4
4912: PUSH
4913: LD_INT 5
4915: PUSH
4916: LD_INT 6
4918: PUSH
4919: LD_INT 7
4921: PUSH
4922: LD_INT 8
4924: PUSH
4925: LD_INT 9
4927: PUSH
4928: LD_INT 10
4930: PUSH
4931: LD_INT 11
4933: PUSH
4934: LD_INT 12
4936: PUSH
4937: LD_INT 13
4939: PUSH
4940: LD_INT 14
4942: PUSH
4943: LD_INT 15
4945: PUSH
4946: LD_INT 16
4948: PUSH
4949: LD_INT 17
4951: PUSH
4952: LD_INT 18
4954: PUSH
4955: LD_INT 19
4957: PUSH
4958: LD_INT 20
4960: PUSH
4961: LD_INT 21
4963: PUSH
4964: LD_INT 22
4966: PUSH
4967: LD_INT 23
4969: PUSH
4970: LD_INT 24
4972: PUSH
4973: LD_INT 25
4975: PUSH
4976: LD_INT 26
4978: PUSH
4979: LD_INT 27
4981: PUSH
4982: LD_INT 28
4984: PUSH
4985: LD_INT 29
4987: PUSH
4988: LD_INT 30
4990: PUSH
4991: LD_INT 31
4993: PUSH
4994: LD_INT 32
4996: PUSH
4997: LD_INT 33
4999: PUSH
5000: LD_INT 34
5002: PUSH
5003: LD_INT 36
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: PUSH
5043: LD_INT 101
5045: PUSH
5046: LD_INT 102
5048: PUSH
5049: LD_INT 103
5051: PUSH
5052: LD_INT 104
5054: PUSH
5055: LD_INT 105
5057: PUSH
5058: LD_INT 106
5060: PUSH
5061: LD_INT 107
5063: PUSH
5064: LD_INT 108
5066: PUSH
5067: LD_INT 109
5069: PUSH
5070: LD_INT 110
5072: PUSH
5073: LD_INT 111
5075: PUSH
5076: LD_INT 112
5078: PUSH
5079: LD_INT 113
5081: PUSH
5082: LD_INT 114
5084: PUSH
5085: LD_INT 116
5087: PUSH
5088: LD_INT 117
5090: PUSH
5091: LD_INT 118
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: LIST
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: ST_TO_ADDR
5117: GO 6124
5119: LD_INT 15
5121: DOUBLE
5122: EQUAL
5123: IFTRUE 5127
5125: GO 5351
5127: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5128: LD_ADDR_VAR 0 2
5132: PUSH
5133: LD_INT 1
5135: PUSH
5136: LD_INT 2
5138: PUSH
5139: LD_INT 3
5141: PUSH
5142: LD_INT 4
5144: PUSH
5145: LD_INT 5
5147: PUSH
5148: LD_INT 6
5150: PUSH
5151: LD_INT 7
5153: PUSH
5154: LD_INT 8
5156: PUSH
5157: LD_INT 9
5159: PUSH
5160: LD_INT 10
5162: PUSH
5163: LD_INT 11
5165: PUSH
5166: LD_INT 12
5168: PUSH
5169: LD_INT 13
5171: PUSH
5172: LD_INT 14
5174: PUSH
5175: LD_INT 15
5177: PUSH
5178: LD_INT 16
5180: PUSH
5181: LD_INT 17
5183: PUSH
5184: LD_INT 18
5186: PUSH
5187: LD_INT 19
5189: PUSH
5190: LD_INT 20
5192: PUSH
5193: LD_INT 21
5195: PUSH
5196: LD_INT 22
5198: PUSH
5199: LD_INT 23
5201: PUSH
5202: LD_INT 24
5204: PUSH
5205: LD_INT 25
5207: PUSH
5208: LD_INT 26
5210: PUSH
5211: LD_INT 27
5213: PUSH
5214: LD_INT 28
5216: PUSH
5217: LD_INT 29
5219: PUSH
5220: LD_INT 30
5222: PUSH
5223: LD_INT 31
5225: PUSH
5226: LD_INT 32
5228: PUSH
5229: LD_INT 33
5231: PUSH
5232: LD_INT 34
5234: PUSH
5235: LD_INT 36
5237: PUSH
5238: EMPTY
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: LIST
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: LIST
5264: LIST
5265: LIST
5266: LIST
5267: LIST
5268: LIST
5269: LIST
5270: LIST
5271: LIST
5272: LIST
5273: LIST
5274: PUSH
5275: LD_INT 101
5277: PUSH
5278: LD_INT 102
5280: PUSH
5281: LD_INT 103
5283: PUSH
5284: LD_INT 104
5286: PUSH
5287: LD_INT 105
5289: PUSH
5290: LD_INT 106
5292: PUSH
5293: LD_INT 107
5295: PUSH
5296: LD_INT 108
5298: PUSH
5299: LD_INT 109
5301: PUSH
5302: LD_INT 110
5304: PUSH
5305: LD_INT 111
5307: PUSH
5308: LD_INT 112
5310: PUSH
5311: LD_INT 113
5313: PUSH
5314: LD_INT 114
5316: PUSH
5317: LD_INT 116
5319: PUSH
5320: LD_INT 117
5322: PUSH
5323: LD_INT 118
5325: PUSH
5326: EMPTY
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: ST_TO_ADDR
5349: GO 6124
5351: LD_INT 16
5353: DOUBLE
5354: EQUAL
5355: IFTRUE 5359
5357: GO 5495
5359: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
5360: LD_ADDR_VAR 0 2
5364: PUSH
5365: LD_INT 2
5367: PUSH
5368: LD_INT 4
5370: PUSH
5371: LD_INT 5
5373: PUSH
5374: LD_INT 7
5376: PUSH
5377: LD_INT 11
5379: PUSH
5380: LD_INT 12
5382: PUSH
5383: LD_INT 15
5385: PUSH
5386: LD_INT 16
5388: PUSH
5389: LD_INT 20
5391: PUSH
5392: LD_INT 21
5394: PUSH
5395: LD_INT 22
5397: PUSH
5398: LD_INT 23
5400: PUSH
5401: LD_INT 25
5403: PUSH
5404: LD_INT 26
5406: PUSH
5407: LD_INT 30
5409: PUSH
5410: LD_INT 31
5412: PUSH
5413: LD_INT 32
5415: PUSH
5416: LD_INT 33
5418: PUSH
5419: LD_INT 34
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: PUSH
5443: LD_INT 101
5445: PUSH
5446: LD_INT 102
5448: PUSH
5449: LD_INT 103
5451: PUSH
5452: LD_INT 106
5454: PUSH
5455: LD_INT 108
5457: PUSH
5458: LD_INT 112
5460: PUSH
5461: LD_INT 113
5463: PUSH
5464: LD_INT 114
5466: PUSH
5467: LD_INT 116
5469: PUSH
5470: LD_INT 117
5472: PUSH
5473: LD_INT 118
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: LIST
5480: LIST
5481: LIST
5482: LIST
5483: LIST
5484: LIST
5485: LIST
5486: LIST
5487: LIST
5488: PUSH
5489: EMPTY
5490: LIST
5491: LIST
5492: ST_TO_ADDR
5493: GO 6124
5495: LD_INT 17
5497: DOUBLE
5498: EQUAL
5499: IFTRUE 5503
5501: GO 5727
5503: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
5504: LD_ADDR_VAR 0 2
5508: PUSH
5509: LD_INT 1
5511: PUSH
5512: LD_INT 2
5514: PUSH
5515: LD_INT 3
5517: PUSH
5518: LD_INT 4
5520: PUSH
5521: LD_INT 5
5523: PUSH
5524: LD_INT 6
5526: PUSH
5527: LD_INT 7
5529: PUSH
5530: LD_INT 8
5532: PUSH
5533: LD_INT 9
5535: PUSH
5536: LD_INT 10
5538: PUSH
5539: LD_INT 11
5541: PUSH
5542: LD_INT 12
5544: PUSH
5545: LD_INT 13
5547: PUSH
5548: LD_INT 14
5550: PUSH
5551: LD_INT 15
5553: PUSH
5554: LD_INT 16
5556: PUSH
5557: LD_INT 17
5559: PUSH
5560: LD_INT 18
5562: PUSH
5563: LD_INT 19
5565: PUSH
5566: LD_INT 20
5568: PUSH
5569: LD_INT 21
5571: PUSH
5572: LD_INT 22
5574: PUSH
5575: LD_INT 23
5577: PUSH
5578: LD_INT 24
5580: PUSH
5581: LD_INT 25
5583: PUSH
5584: LD_INT 26
5586: PUSH
5587: LD_INT 27
5589: PUSH
5590: LD_INT 28
5592: PUSH
5593: LD_INT 29
5595: PUSH
5596: LD_INT 30
5598: PUSH
5599: LD_INT 31
5601: PUSH
5602: LD_INT 32
5604: PUSH
5605: LD_INT 33
5607: PUSH
5608: LD_INT 34
5610: PUSH
5611: LD_INT 36
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: LIST
5649: LIST
5650: PUSH
5651: LD_INT 101
5653: PUSH
5654: LD_INT 102
5656: PUSH
5657: LD_INT 103
5659: PUSH
5660: LD_INT 104
5662: PUSH
5663: LD_INT 105
5665: PUSH
5666: LD_INT 106
5668: PUSH
5669: LD_INT 107
5671: PUSH
5672: LD_INT 108
5674: PUSH
5675: LD_INT 109
5677: PUSH
5678: LD_INT 110
5680: PUSH
5681: LD_INT 111
5683: PUSH
5684: LD_INT 112
5686: PUSH
5687: LD_INT 113
5689: PUSH
5690: LD_INT 114
5692: PUSH
5693: LD_INT 116
5695: PUSH
5696: LD_INT 117
5698: PUSH
5699: LD_INT 118
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: PUSH
5721: EMPTY
5722: LIST
5723: LIST
5724: ST_TO_ADDR
5725: GO 6124
5727: LD_INT 18
5729: DOUBLE
5730: EQUAL
5731: IFTRUE 5735
5733: GO 5883
5735: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
5736: LD_ADDR_VAR 0 2
5740: PUSH
5741: LD_INT 2
5743: PUSH
5744: LD_INT 4
5746: PUSH
5747: LD_INT 5
5749: PUSH
5750: LD_INT 7
5752: PUSH
5753: LD_INT 11
5755: PUSH
5756: LD_INT 12
5758: PUSH
5759: LD_INT 15
5761: PUSH
5762: LD_INT 16
5764: PUSH
5765: LD_INT 20
5767: PUSH
5768: LD_INT 21
5770: PUSH
5771: LD_INT 22
5773: PUSH
5774: LD_INT 23
5776: PUSH
5777: LD_INT 25
5779: PUSH
5780: LD_INT 26
5782: PUSH
5783: LD_INT 30
5785: PUSH
5786: LD_INT 31
5788: PUSH
5789: LD_INT 32
5791: PUSH
5792: LD_INT 33
5794: PUSH
5795: LD_INT 34
5797: PUSH
5798: LD_INT 35
5800: PUSH
5801: LD_INT 36
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: LIST
5808: LIST
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: LIST
5814: LIST
5815: LIST
5816: LIST
5817: LIST
5818: LIST
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: LIST
5824: LIST
5825: LIST
5826: PUSH
5827: LD_INT 101
5829: PUSH
5830: LD_INT 102
5832: PUSH
5833: LD_INT 103
5835: PUSH
5836: LD_INT 106
5838: PUSH
5839: LD_INT 108
5841: PUSH
5842: LD_INT 112
5844: PUSH
5845: LD_INT 113
5847: PUSH
5848: LD_INT 114
5850: PUSH
5851: LD_INT 115
5853: PUSH
5854: LD_INT 116
5856: PUSH
5857: LD_INT 117
5859: PUSH
5860: LD_INT 118
5862: PUSH
5863: EMPTY
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: LIST
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: ST_TO_ADDR
5881: GO 6124
5883: LD_INT 19
5885: DOUBLE
5886: EQUAL
5887: IFTRUE 5891
5889: GO 6123
5891: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
5892: LD_ADDR_VAR 0 2
5896: PUSH
5897: LD_INT 1
5899: PUSH
5900: LD_INT 2
5902: PUSH
5903: LD_INT 3
5905: PUSH
5906: LD_INT 4
5908: PUSH
5909: LD_INT 5
5911: PUSH
5912: LD_INT 6
5914: PUSH
5915: LD_INT 7
5917: PUSH
5918: LD_INT 8
5920: PUSH
5921: LD_INT 9
5923: PUSH
5924: LD_INT 10
5926: PUSH
5927: LD_INT 11
5929: PUSH
5930: LD_INT 12
5932: PUSH
5933: LD_INT 13
5935: PUSH
5936: LD_INT 14
5938: PUSH
5939: LD_INT 15
5941: PUSH
5942: LD_INT 16
5944: PUSH
5945: LD_INT 17
5947: PUSH
5948: LD_INT 18
5950: PUSH
5951: LD_INT 19
5953: PUSH
5954: LD_INT 20
5956: PUSH
5957: LD_INT 21
5959: PUSH
5960: LD_INT 22
5962: PUSH
5963: LD_INT 23
5965: PUSH
5966: LD_INT 24
5968: PUSH
5969: LD_INT 25
5971: PUSH
5972: LD_INT 26
5974: PUSH
5975: LD_INT 27
5977: PUSH
5978: LD_INT 28
5980: PUSH
5981: LD_INT 29
5983: PUSH
5984: LD_INT 30
5986: PUSH
5987: LD_INT 31
5989: PUSH
5990: LD_INT 32
5992: PUSH
5993: LD_INT 33
5995: PUSH
5996: LD_INT 34
5998: PUSH
5999: LD_INT 35
6001: PUSH
6002: LD_INT 36
6004: PUSH
6005: EMPTY
6006: LIST
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: LIST
6042: PUSH
6043: LD_INT 101
6045: PUSH
6046: LD_INT 102
6048: PUSH
6049: LD_INT 103
6051: PUSH
6052: LD_INT 104
6054: PUSH
6055: LD_INT 105
6057: PUSH
6058: LD_INT 106
6060: PUSH
6061: LD_INT 107
6063: PUSH
6064: LD_INT 108
6066: PUSH
6067: LD_INT 109
6069: PUSH
6070: LD_INT 110
6072: PUSH
6073: LD_INT 111
6075: PUSH
6076: LD_INT 112
6078: PUSH
6079: LD_INT 113
6081: PUSH
6082: LD_INT 114
6084: PUSH
6085: LD_INT 115
6087: PUSH
6088: LD_INT 116
6090: PUSH
6091: LD_INT 117
6093: PUSH
6094: LD_INT 118
6096: PUSH
6097: EMPTY
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: PUSH
6117: EMPTY
6118: LIST
6119: LIST
6120: ST_TO_ADDR
6121: GO 6124
6123: POP
// end else
6124: GO 6355
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6126: LD_ADDR_VAR 0 2
6130: PUSH
6131: LD_INT 1
6133: PUSH
6134: LD_INT 2
6136: PUSH
6137: LD_INT 3
6139: PUSH
6140: LD_INT 4
6142: PUSH
6143: LD_INT 5
6145: PUSH
6146: LD_INT 6
6148: PUSH
6149: LD_INT 7
6151: PUSH
6152: LD_INT 8
6154: PUSH
6155: LD_INT 9
6157: PUSH
6158: LD_INT 10
6160: PUSH
6161: LD_INT 11
6163: PUSH
6164: LD_INT 12
6166: PUSH
6167: LD_INT 13
6169: PUSH
6170: LD_INT 14
6172: PUSH
6173: LD_INT 15
6175: PUSH
6176: LD_INT 16
6178: PUSH
6179: LD_INT 17
6181: PUSH
6182: LD_INT 18
6184: PUSH
6185: LD_INT 19
6187: PUSH
6188: LD_INT 20
6190: PUSH
6191: LD_INT 21
6193: PUSH
6194: LD_INT 22
6196: PUSH
6197: LD_INT 23
6199: PUSH
6200: LD_INT 24
6202: PUSH
6203: LD_INT 25
6205: PUSH
6206: LD_INT 26
6208: PUSH
6209: LD_INT 27
6211: PUSH
6212: LD_INT 28
6214: PUSH
6215: LD_INT 29
6217: PUSH
6218: LD_INT 30
6220: PUSH
6221: LD_INT 31
6223: PUSH
6224: LD_INT 32
6226: PUSH
6227: LD_INT 33
6229: PUSH
6230: LD_INT 34
6232: PUSH
6233: LD_INT 35
6235: PUSH
6236: LD_INT 36
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: PUSH
6277: LD_INT 101
6279: PUSH
6280: LD_INT 102
6282: PUSH
6283: LD_INT 103
6285: PUSH
6286: LD_INT 104
6288: PUSH
6289: LD_INT 105
6291: PUSH
6292: LD_INT 106
6294: PUSH
6295: LD_INT 107
6297: PUSH
6298: LD_INT 108
6300: PUSH
6301: LD_INT 109
6303: PUSH
6304: LD_INT 110
6306: PUSH
6307: LD_INT 111
6309: PUSH
6310: LD_INT 112
6312: PUSH
6313: LD_INT 113
6315: PUSH
6316: LD_INT 114
6318: PUSH
6319: LD_INT 115
6321: PUSH
6322: LD_INT 116
6324: PUSH
6325: LD_INT 117
6327: PUSH
6328: LD_INT 118
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: ST_TO_ADDR
// if result then
6355: LD_VAR 0 2
6359: IFFALSE 7145
// begin normal :=  ;
6361: LD_ADDR_VAR 0 5
6365: PUSH
6366: LD_STRING 
6368: ST_TO_ADDR
// hardcore :=  ;
6369: LD_ADDR_VAR 0 6
6373: PUSH
6374: LD_STRING 
6376: ST_TO_ADDR
// active :=  ;
6377: LD_ADDR_VAR 0 7
6381: PUSH
6382: LD_STRING 
6384: ST_TO_ADDR
// for i = 1 to normalCounter do
6385: LD_ADDR_VAR 0 8
6389: PUSH
6390: DOUBLE
6391: LD_INT 1
6393: DEC
6394: ST_TO_ADDR
6395: LD_EXP 2
6399: PUSH
6400: FOR_TO
6401: IFFALSE 6502
// begin tmp := 0 ;
6403: LD_ADDR_VAR 0 3
6407: PUSH
6408: LD_STRING 0
6410: ST_TO_ADDR
// if result [ 1 ] then
6411: LD_VAR 0 2
6415: PUSH
6416: LD_INT 1
6418: ARRAY
6419: IFFALSE 6484
// if result [ 1 ] [ 1 ] = i then
6421: LD_VAR 0 2
6425: PUSH
6426: LD_INT 1
6428: ARRAY
6429: PUSH
6430: LD_INT 1
6432: ARRAY
6433: PUSH
6434: LD_VAR 0 8
6438: EQUAL
6439: IFFALSE 6484
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6441: LD_ADDR_VAR 0 2
6445: PUSH
6446: LD_VAR 0 2
6450: PPUSH
6451: LD_INT 1
6453: PPUSH
6454: LD_VAR 0 2
6458: PUSH
6459: LD_INT 1
6461: ARRAY
6462: PPUSH
6463: LD_INT 1
6465: PPUSH
6466: CALL_OW 3
6470: PPUSH
6471: CALL_OW 1
6475: ST_TO_ADDR
// tmp := 1 ;
6476: LD_ADDR_VAR 0 3
6480: PUSH
6481: LD_STRING 1
6483: ST_TO_ADDR
// end ; normal := normal & tmp ;
6484: LD_ADDR_VAR 0 5
6488: PUSH
6489: LD_VAR 0 5
6493: PUSH
6494: LD_VAR 0 3
6498: STR
6499: ST_TO_ADDR
// end ;
6500: GO 6400
6502: POP
6503: POP
// for i = 1 to hardcoreCounter do
6504: LD_ADDR_VAR 0 8
6508: PUSH
6509: DOUBLE
6510: LD_INT 1
6512: DEC
6513: ST_TO_ADDR
6514: LD_EXP 3
6518: PUSH
6519: FOR_TO
6520: IFFALSE 6625
// begin tmp := 0 ;
6522: LD_ADDR_VAR 0 3
6526: PUSH
6527: LD_STRING 0
6529: ST_TO_ADDR
// if result [ 2 ] then
6530: LD_VAR 0 2
6534: PUSH
6535: LD_INT 2
6537: ARRAY
6538: IFFALSE 6607
// if result [ 2 ] [ 1 ] = 100 + i then
6540: LD_VAR 0 2
6544: PUSH
6545: LD_INT 2
6547: ARRAY
6548: PUSH
6549: LD_INT 1
6551: ARRAY
6552: PUSH
6553: LD_INT 100
6555: PUSH
6556: LD_VAR 0 8
6560: PLUS
6561: EQUAL
6562: IFFALSE 6607
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6564: LD_ADDR_VAR 0 2
6568: PUSH
6569: LD_VAR 0 2
6573: PPUSH
6574: LD_INT 2
6576: PPUSH
6577: LD_VAR 0 2
6581: PUSH
6582: LD_INT 2
6584: ARRAY
6585: PPUSH
6586: LD_INT 1
6588: PPUSH
6589: CALL_OW 3
6593: PPUSH
6594: CALL_OW 1
6598: ST_TO_ADDR
// tmp := 1 ;
6599: LD_ADDR_VAR 0 3
6603: PUSH
6604: LD_STRING 1
6606: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6607: LD_ADDR_VAR 0 6
6611: PUSH
6612: LD_VAR 0 6
6616: PUSH
6617: LD_VAR 0 3
6621: STR
6622: ST_TO_ADDR
// end ;
6623: GO 6519
6625: POP
6626: POP
// if isGameLoad then
6627: LD_VAR 0 1
6631: IFFALSE 7106
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
6633: LD_ADDR_VAR 0 4
6637: PUSH
6638: LD_EXP 6
6642: PUSH
6643: LD_EXP 5
6647: PUSH
6648: LD_EXP 7
6652: PUSH
6653: LD_EXP 4
6657: PUSH
6658: LD_EXP 8
6662: PUSH
6663: LD_EXP 9
6667: PUSH
6668: LD_EXP 10
6672: PUSH
6673: LD_EXP 11
6677: PUSH
6678: LD_EXP 12
6682: PUSH
6683: LD_EXP 13
6687: PUSH
6688: LD_EXP 14
6692: PUSH
6693: LD_EXP 15
6697: PUSH
6698: LD_EXP 16
6702: PUSH
6703: LD_EXP 17
6707: PUSH
6708: LD_EXP 25
6712: PUSH
6713: LD_EXP 26
6717: PUSH
6718: LD_EXP 27
6722: PUSH
6723: LD_EXP 28
6727: PUSH
6728: LD_EXP 30
6732: PUSH
6733: LD_EXP 31
6737: PUSH
6738: LD_EXP 32
6742: PUSH
6743: LD_EXP 35
6747: PUSH
6748: LD_EXP 37
6752: PUSH
6753: LD_EXP 38
6757: PUSH
6758: LD_EXP 39
6762: PUSH
6763: LD_EXP 41
6767: PUSH
6768: LD_EXP 42
6772: PUSH
6773: LD_EXP 45
6777: PUSH
6778: LD_EXP 46
6782: PUSH
6783: LD_EXP 47
6787: PUSH
6788: LD_EXP 48
6792: PUSH
6793: LD_EXP 49
6797: PUSH
6798: LD_EXP 50
6802: PUSH
6803: LD_EXP 51
6807: PUSH
6808: LD_EXP 52
6812: PUSH
6813: LD_EXP 53
6817: PUSH
6818: LD_EXP 18
6822: PUSH
6823: LD_EXP 19
6827: PUSH
6828: LD_EXP 22
6832: PUSH
6833: LD_EXP 23
6837: PUSH
6838: LD_EXP 24
6842: PUSH
6843: LD_EXP 20
6847: PUSH
6848: LD_EXP 21
6852: PUSH
6853: LD_EXP 29
6857: PUSH
6858: LD_EXP 33
6862: PUSH
6863: LD_EXP 34
6867: PUSH
6868: LD_EXP 36
6872: PUSH
6873: LD_EXP 40
6877: PUSH
6878: LD_EXP 43
6882: PUSH
6883: LD_EXP 44
6887: PUSH
6888: LD_EXP 54
6892: PUSH
6893: LD_EXP 55
6897: PUSH
6898: LD_EXP 56
6902: PUSH
6903: LD_EXP 57
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: ST_TO_ADDR
// tmp :=  ;
6964: LD_ADDR_VAR 0 3
6968: PUSH
6969: LD_STRING 
6971: ST_TO_ADDR
// for i = 1 to normalCounter do
6972: LD_ADDR_VAR 0 8
6976: PUSH
6977: DOUBLE
6978: LD_INT 1
6980: DEC
6981: ST_TO_ADDR
6982: LD_EXP 2
6986: PUSH
6987: FOR_TO
6988: IFFALSE 7024
// begin if flags [ i ] then
6990: LD_VAR 0 4
6994: PUSH
6995: LD_VAR 0 8
6999: ARRAY
7000: IFFALSE 7022
// tmp := tmp & i & ; ;
7002: LD_ADDR_VAR 0 3
7006: PUSH
7007: LD_VAR 0 3
7011: PUSH
7012: LD_VAR 0 8
7016: STR
7017: PUSH
7018: LD_STRING ;
7020: STR
7021: ST_TO_ADDR
// end ;
7022: GO 6987
7024: POP
7025: POP
// for i = 1 to hardcoreCounter do
7026: LD_ADDR_VAR 0 8
7030: PUSH
7031: DOUBLE
7032: LD_INT 1
7034: DEC
7035: ST_TO_ADDR
7036: LD_EXP 3
7040: PUSH
7041: FOR_TO
7042: IFFALSE 7088
// begin if flags [ normalCounter + i ] then
7044: LD_VAR 0 4
7048: PUSH
7049: LD_EXP 2
7053: PUSH
7054: LD_VAR 0 8
7058: PLUS
7059: ARRAY
7060: IFFALSE 7086
// tmp := tmp & ( 100 + i ) & ; ;
7062: LD_ADDR_VAR 0 3
7066: PUSH
7067: LD_VAR 0 3
7071: PUSH
7072: LD_INT 100
7074: PUSH
7075: LD_VAR 0 8
7079: PLUS
7080: STR
7081: PUSH
7082: LD_STRING ;
7084: STR
7085: ST_TO_ADDR
// end ;
7086: GO 7041
7088: POP
7089: POP
// if tmp then
7090: LD_VAR 0 3
7094: IFFALSE 7106
// active := tmp ;
7096: LD_ADDR_VAR 0 7
7100: PUSH
7101: LD_VAR 0 3
7105: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7106: LD_STRING getStreamItemsFromMission("
7108: PUSH
7109: LD_VAR 0 5
7113: STR
7114: PUSH
7115: LD_STRING ","
7117: STR
7118: PUSH
7119: LD_VAR 0 6
7123: STR
7124: PUSH
7125: LD_STRING ","
7127: STR
7128: PUSH
7129: LD_VAR 0 7
7133: STR
7134: PUSH
7135: LD_STRING ")
7137: STR
7138: PPUSH
7139: CALL_OW 559
// end else
7143: GO 7152
// ToLua ( getStreamItemsFromMission("","","") ) ;
7145: LD_STRING getStreamItemsFromMission("","","")
7147: PPUSH
7148: CALL_OW 559
// end ;
7152: LD_VAR 0 2
7156: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7157: LD_EXP 1
7161: PUSH
7162: LD_EXP 6
7166: AND
7167: IFFALSE 7291
7169: GO 7171
7171: DISABLE
7172: LD_INT 0
7174: PPUSH
7175: PPUSH
// begin enable ;
7176: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7177: LD_ADDR_VAR 0 2
7181: PUSH
7182: LD_INT 22
7184: PUSH
7185: LD_OWVAR 2
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: LD_INT 2
7196: PUSH
7197: LD_INT 34
7199: PUSH
7200: LD_INT 7
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: LD_INT 34
7209: PUSH
7210: LD_INT 45
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: PUSH
7217: LD_INT 34
7219: PUSH
7220: LD_INT 28
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PUSH
7227: LD_INT 34
7229: PUSH
7230: LD_INT 47
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: PPUSH
7248: CALL_OW 69
7252: ST_TO_ADDR
// if not tmp then
7253: LD_VAR 0 2
7257: NOT
7258: IFFALSE 7262
// exit ;
7260: GO 7291
// for i in tmp do
7262: LD_ADDR_VAR 0 1
7266: PUSH
7267: LD_VAR 0 2
7271: PUSH
7272: FOR_IN
7273: IFFALSE 7289
// begin SetLives ( i , 0 ) ;
7275: LD_VAR 0 1
7279: PPUSH
7280: LD_INT 0
7282: PPUSH
7283: CALL_OW 234
// end ;
7287: GO 7272
7289: POP
7290: POP
// end ;
7291: PPOPN 2
7293: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7294: LD_EXP 1
7298: PUSH
7299: LD_EXP 7
7303: AND
7304: IFFALSE 7388
7306: GO 7308
7308: DISABLE
7309: LD_INT 0
7311: PPUSH
7312: PPUSH
// begin enable ;
7313: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7314: LD_ADDR_VAR 0 2
7318: PUSH
7319: LD_INT 22
7321: PUSH
7322: LD_OWVAR 2
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: PUSH
7331: LD_INT 32
7333: PUSH
7334: LD_INT 3
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: PPUSH
7345: CALL_OW 69
7349: ST_TO_ADDR
// if not tmp then
7350: LD_VAR 0 2
7354: NOT
7355: IFFALSE 7359
// exit ;
7357: GO 7388
// for i in tmp do
7359: LD_ADDR_VAR 0 1
7363: PUSH
7364: LD_VAR 0 2
7368: PUSH
7369: FOR_IN
7370: IFFALSE 7386
// begin SetLives ( i , 0 ) ;
7372: LD_VAR 0 1
7376: PPUSH
7377: LD_INT 0
7379: PPUSH
7380: CALL_OW 234
// end ;
7384: GO 7369
7386: POP
7387: POP
// end ;
7388: PPOPN 2
7390: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7391: LD_EXP 1
7395: PUSH
7396: LD_EXP 4
7400: AND
7401: IFFALSE 7494
7403: GO 7405
7405: DISABLE
7406: LD_INT 0
7408: PPUSH
// begin enable ;
7409: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7410: LD_ADDR_VAR 0 1
7414: PUSH
7415: LD_INT 22
7417: PUSH
7418: LD_OWVAR 2
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PUSH
7427: LD_INT 2
7429: PUSH
7430: LD_INT 25
7432: PUSH
7433: LD_INT 5
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: PUSH
7440: LD_INT 25
7442: PUSH
7443: LD_INT 9
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PUSH
7450: LD_INT 25
7452: PUSH
7453: LD_INT 8
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: PPUSH
7470: CALL_OW 69
7474: PUSH
7475: FOR_IN
7476: IFFALSE 7492
// begin SetClass ( i , 1 ) ;
7478: LD_VAR 0 1
7482: PPUSH
7483: LD_INT 1
7485: PPUSH
7486: CALL_OW 336
// end ;
7490: GO 7475
7492: POP
7493: POP
// end ;
7494: PPOPN 1
7496: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7497: LD_EXP 1
7501: PUSH
7502: LD_EXP 5
7506: AND
7507: PUSH
7508: LD_OWVAR 65
7512: PUSH
7513: LD_INT 7
7515: LESS
7516: AND
7517: IFFALSE 7531
7519: GO 7521
7521: DISABLE
// begin enable ;
7522: ENABLE
// game_speed := 7 ;
7523: LD_ADDR_OWVAR 65
7527: PUSH
7528: LD_INT 7
7530: ST_TO_ADDR
// end ;
7531: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7532: LD_EXP 1
7536: PUSH
7537: LD_EXP 8
7541: AND
7542: IFFALSE 7744
7544: GO 7546
7546: DISABLE
7547: LD_INT 0
7549: PPUSH
7550: PPUSH
7551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7552: LD_ADDR_VAR 0 3
7556: PUSH
7557: LD_INT 81
7559: PUSH
7560: LD_OWVAR 2
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: PUSH
7569: LD_INT 21
7571: PUSH
7572: LD_INT 1
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: PPUSH
7583: CALL_OW 69
7587: ST_TO_ADDR
// if not tmp then
7588: LD_VAR 0 3
7592: NOT
7593: IFFALSE 7597
// exit ;
7595: GO 7744
// if tmp > 5 then
7597: LD_VAR 0 3
7601: PUSH
7602: LD_INT 5
7604: GREATER
7605: IFFALSE 7617
// k := 5 else
7607: LD_ADDR_VAR 0 2
7611: PUSH
7612: LD_INT 5
7614: ST_TO_ADDR
7615: GO 7627
// k := tmp ;
7617: LD_ADDR_VAR 0 2
7621: PUSH
7622: LD_VAR 0 3
7626: ST_TO_ADDR
// for i := 1 to k do
7627: LD_ADDR_VAR 0 1
7631: PUSH
7632: DOUBLE
7633: LD_INT 1
7635: DEC
7636: ST_TO_ADDR
7637: LD_VAR 0 2
7641: PUSH
7642: FOR_TO
7643: IFFALSE 7742
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7645: LD_VAR 0 3
7649: PUSH
7650: LD_VAR 0 1
7654: ARRAY
7655: PPUSH
7656: LD_VAR 0 1
7660: PUSH
7661: LD_INT 4
7663: MOD
7664: PUSH
7665: LD_INT 1
7667: PLUS
7668: PPUSH
7669: CALL_OW 259
7673: PUSH
7674: LD_INT 10
7676: LESS
7677: IFFALSE 7740
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7679: LD_VAR 0 3
7683: PUSH
7684: LD_VAR 0 1
7688: ARRAY
7689: PPUSH
7690: LD_VAR 0 1
7694: PUSH
7695: LD_INT 4
7697: MOD
7698: PUSH
7699: LD_INT 1
7701: PLUS
7702: PPUSH
7703: LD_VAR 0 3
7707: PUSH
7708: LD_VAR 0 1
7712: ARRAY
7713: PPUSH
7714: LD_VAR 0 1
7718: PUSH
7719: LD_INT 4
7721: MOD
7722: PUSH
7723: LD_INT 1
7725: PLUS
7726: PPUSH
7727: CALL_OW 259
7731: PUSH
7732: LD_INT 1
7734: PLUS
7735: PPUSH
7736: CALL_OW 237
7740: GO 7642
7742: POP
7743: POP
// end ;
7744: PPOPN 3
7746: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
7747: LD_EXP 1
7751: PUSH
7752: LD_EXP 9
7756: AND
7757: IFFALSE 7777
7759: GO 7761
7761: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
7762: LD_INT 4
7764: PPUSH
7765: LD_OWVAR 2
7769: PPUSH
7770: LD_INT 0
7772: PPUSH
7773: CALL_OW 324
7777: END
// every 0 0$1 trigger StreamModeActive and sShovel do
7778: LD_EXP 1
7782: PUSH
7783: LD_EXP 38
7787: AND
7788: IFFALSE 7808
7790: GO 7792
7792: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
7793: LD_INT 19
7795: PPUSH
7796: LD_OWVAR 2
7800: PPUSH
7801: LD_INT 0
7803: PPUSH
7804: CALL_OW 324
7808: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
7809: LD_EXP 1
7813: PUSH
7814: LD_EXP 10
7818: AND
7819: IFFALSE 7921
7821: GO 7823
7823: DISABLE
7824: LD_INT 0
7826: PPUSH
7827: PPUSH
// begin enable ;
7828: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
7829: LD_ADDR_VAR 0 2
7833: PUSH
7834: LD_INT 22
7836: PUSH
7837: LD_OWVAR 2
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: PUSH
7846: LD_INT 2
7848: PUSH
7849: LD_INT 34
7851: PUSH
7852: LD_INT 11
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PUSH
7859: LD_INT 34
7861: PUSH
7862: LD_INT 30
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: PUSH
7869: EMPTY
7870: LIST
7871: LIST
7872: LIST
7873: PUSH
7874: EMPTY
7875: LIST
7876: LIST
7877: PPUSH
7878: CALL_OW 69
7882: ST_TO_ADDR
// if not tmp then
7883: LD_VAR 0 2
7887: NOT
7888: IFFALSE 7892
// exit ;
7890: GO 7921
// for i in tmp do
7892: LD_ADDR_VAR 0 1
7896: PUSH
7897: LD_VAR 0 2
7901: PUSH
7902: FOR_IN
7903: IFFALSE 7919
// begin SetLives ( i , 0 ) ;
7905: LD_VAR 0 1
7909: PPUSH
7910: LD_INT 0
7912: PPUSH
7913: CALL_OW 234
// end ;
7917: GO 7902
7919: POP
7920: POP
// end ;
7921: PPOPN 2
7923: END
// every 0 0$1 trigger StreamModeActive and sBunker do
7924: LD_EXP 1
7928: PUSH
7929: LD_EXP 11
7933: AND
7934: IFFALSE 7954
7936: GO 7938
7938: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
7939: LD_INT 32
7941: PPUSH
7942: LD_OWVAR 2
7946: PPUSH
7947: LD_INT 0
7949: PPUSH
7950: CALL_OW 324
7954: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
7955: LD_EXP 1
7959: PUSH
7960: LD_EXP 12
7964: AND
7965: IFFALSE 8146
7967: GO 7969
7969: DISABLE
7970: LD_INT 0
7972: PPUSH
7973: PPUSH
7974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
7975: LD_ADDR_VAR 0 2
7979: PUSH
7980: LD_INT 22
7982: PUSH
7983: LD_OWVAR 2
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: PUSH
7992: LD_INT 33
7994: PUSH
7995: LD_INT 3
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: PPUSH
8006: CALL_OW 69
8010: ST_TO_ADDR
// if not tmp then
8011: LD_VAR 0 2
8015: NOT
8016: IFFALSE 8020
// exit ;
8018: GO 8146
// side := 0 ;
8020: LD_ADDR_VAR 0 3
8024: PUSH
8025: LD_INT 0
8027: ST_TO_ADDR
// for i := 1 to 8 do
8028: LD_ADDR_VAR 0 1
8032: PUSH
8033: DOUBLE
8034: LD_INT 1
8036: DEC
8037: ST_TO_ADDR
8038: LD_INT 8
8040: PUSH
8041: FOR_TO
8042: IFFALSE 8090
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8044: LD_OWVAR 2
8048: PUSH
8049: LD_VAR 0 1
8053: NONEQUAL
8054: PUSH
8055: LD_OWVAR 2
8059: PPUSH
8060: LD_VAR 0 1
8064: PPUSH
8065: CALL_OW 81
8069: PUSH
8070: LD_INT 2
8072: EQUAL
8073: AND
8074: IFFALSE 8088
// begin side := i ;
8076: LD_ADDR_VAR 0 3
8080: PUSH
8081: LD_VAR 0 1
8085: ST_TO_ADDR
// break ;
8086: GO 8090
// end ;
8088: GO 8041
8090: POP
8091: POP
// if not side then
8092: LD_VAR 0 3
8096: NOT
8097: IFFALSE 8101
// exit ;
8099: GO 8146
// for i := 1 to tmp do
8101: LD_ADDR_VAR 0 1
8105: PUSH
8106: DOUBLE
8107: LD_INT 1
8109: DEC
8110: ST_TO_ADDR
8111: LD_VAR 0 2
8115: PUSH
8116: FOR_TO
8117: IFFALSE 8144
// if Prob ( 60 ) then
8119: LD_INT 60
8121: PPUSH
8122: CALL_OW 13
8126: IFFALSE 8142
// SetSide ( i , side ) ;
8128: LD_VAR 0 1
8132: PPUSH
8133: LD_VAR 0 3
8137: PPUSH
8138: CALL_OW 235
8142: GO 8116
8144: POP
8145: POP
// end ;
8146: PPOPN 3
8148: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8149: LD_EXP 1
8153: PUSH
8154: LD_EXP 14
8158: AND
8159: IFFALSE 8278
8161: GO 8163
8163: DISABLE
8164: LD_INT 0
8166: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8167: LD_ADDR_VAR 0 1
8171: PUSH
8172: LD_INT 22
8174: PUSH
8175: LD_OWVAR 2
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: PUSH
8184: LD_INT 21
8186: PUSH
8187: LD_INT 1
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: PUSH
8194: LD_INT 3
8196: PUSH
8197: LD_INT 23
8199: PUSH
8200: LD_INT 0
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: LIST
8215: PPUSH
8216: CALL_OW 69
8220: PUSH
8221: FOR_IN
8222: IFFALSE 8276
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8224: LD_VAR 0 1
8228: PPUSH
8229: CALL_OW 257
8233: PUSH
8234: LD_INT 1
8236: PUSH
8237: LD_INT 2
8239: PUSH
8240: LD_INT 3
8242: PUSH
8243: LD_INT 4
8245: PUSH
8246: EMPTY
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: IN
8252: IFFALSE 8274
// SetClass ( un , rand ( 1 , 4 ) ) ;
8254: LD_VAR 0 1
8258: PPUSH
8259: LD_INT 1
8261: PPUSH
8262: LD_INT 4
8264: PPUSH
8265: CALL_OW 12
8269: PPUSH
8270: CALL_OW 336
8274: GO 8221
8276: POP
8277: POP
// end ;
8278: PPOPN 1
8280: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8281: LD_EXP 1
8285: PUSH
8286: LD_EXP 13
8290: AND
8291: IFFALSE 8370
8293: GO 8295
8295: DISABLE
8296: LD_INT 0
8298: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8299: LD_ADDR_VAR 0 1
8303: PUSH
8304: LD_INT 22
8306: PUSH
8307: LD_OWVAR 2
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: PUSH
8316: LD_INT 21
8318: PUSH
8319: LD_INT 3
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PPUSH
8330: CALL_OW 69
8334: ST_TO_ADDR
// if not tmp then
8335: LD_VAR 0 1
8339: NOT
8340: IFFALSE 8344
// exit ;
8342: GO 8370
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8344: LD_VAR 0 1
8348: PUSH
8349: LD_INT 1
8351: PPUSH
8352: LD_VAR 0 1
8356: PPUSH
8357: CALL_OW 12
8361: ARRAY
8362: PPUSH
8363: LD_INT 100
8365: PPUSH
8366: CALL_OW 234
// end ;
8370: PPOPN 1
8372: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8373: LD_EXP 1
8377: PUSH
8378: LD_EXP 15
8382: AND
8383: IFFALSE 8481
8385: GO 8387
8387: DISABLE
8388: LD_INT 0
8390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8391: LD_ADDR_VAR 0 1
8395: PUSH
8396: LD_INT 22
8398: PUSH
8399: LD_OWVAR 2
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PUSH
8408: LD_INT 21
8410: PUSH
8411: LD_INT 1
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: PPUSH
8422: CALL_OW 69
8426: ST_TO_ADDR
// if not tmp then
8427: LD_VAR 0 1
8431: NOT
8432: IFFALSE 8436
// exit ;
8434: GO 8481
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8436: LD_VAR 0 1
8440: PUSH
8441: LD_INT 1
8443: PPUSH
8444: LD_VAR 0 1
8448: PPUSH
8449: CALL_OW 12
8453: ARRAY
8454: PPUSH
8455: LD_INT 1
8457: PPUSH
8458: LD_INT 4
8460: PPUSH
8461: CALL_OW 12
8465: PPUSH
8466: LD_INT 3000
8468: PPUSH
8469: LD_INT 9000
8471: PPUSH
8472: CALL_OW 12
8476: PPUSH
8477: CALL_OW 492
// end ;
8481: PPOPN 1
8483: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8484: LD_EXP 1
8488: PUSH
8489: LD_EXP 16
8493: AND
8494: IFFALSE 8514
8496: GO 8498
8498: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8499: LD_INT 1
8501: PPUSH
8502: LD_OWVAR 2
8506: PPUSH
8507: LD_INT 0
8509: PPUSH
8510: CALL_OW 324
8514: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8515: LD_EXP 1
8519: PUSH
8520: LD_EXP 17
8524: AND
8525: IFFALSE 8608
8527: GO 8529
8529: DISABLE
8530: LD_INT 0
8532: PPUSH
8533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8534: LD_ADDR_VAR 0 2
8538: PUSH
8539: LD_INT 22
8541: PUSH
8542: LD_OWVAR 2
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_INT 21
8553: PUSH
8554: LD_INT 3
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: PPUSH
8565: CALL_OW 69
8569: ST_TO_ADDR
// if not tmp then
8570: LD_VAR 0 2
8574: NOT
8575: IFFALSE 8579
// exit ;
8577: GO 8608
// for i in tmp do
8579: LD_ADDR_VAR 0 1
8583: PUSH
8584: LD_VAR 0 2
8588: PUSH
8589: FOR_IN
8590: IFFALSE 8606
// SetBLevel ( i , 10 ) ;
8592: LD_VAR 0 1
8596: PPUSH
8597: LD_INT 10
8599: PPUSH
8600: CALL_OW 241
8604: GO 8589
8606: POP
8607: POP
// end ;
8608: PPOPN 2
8610: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8611: LD_EXP 1
8615: PUSH
8616: LD_EXP 18
8620: AND
8621: IFFALSE 8732
8623: GO 8625
8625: DISABLE
8626: LD_INT 0
8628: PPUSH
8629: PPUSH
8630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8631: LD_ADDR_VAR 0 3
8635: PUSH
8636: LD_INT 22
8638: PUSH
8639: LD_OWVAR 2
8643: PUSH
8644: EMPTY
8645: LIST
8646: LIST
8647: PUSH
8648: LD_INT 25
8650: PUSH
8651: LD_INT 1
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PPUSH
8662: CALL_OW 69
8666: ST_TO_ADDR
// if not tmp then
8667: LD_VAR 0 3
8671: NOT
8672: IFFALSE 8676
// exit ;
8674: GO 8732
// un := tmp [ rand ( 1 , tmp ) ] ;
8676: LD_ADDR_VAR 0 2
8680: PUSH
8681: LD_VAR 0 3
8685: PUSH
8686: LD_INT 1
8688: PPUSH
8689: LD_VAR 0 3
8693: PPUSH
8694: CALL_OW 12
8698: ARRAY
8699: ST_TO_ADDR
// if Crawls ( un ) then
8700: LD_VAR 0 2
8704: PPUSH
8705: CALL_OW 318
8709: IFFALSE 8720
// ComWalk ( un ) ;
8711: LD_VAR 0 2
8715: PPUSH
8716: CALL_OW 138
// SetClass ( un , class_sniper ) ;
8720: LD_VAR 0 2
8724: PPUSH
8725: LD_INT 5
8727: PPUSH
8728: CALL_OW 336
// end ;
8732: PPOPN 3
8734: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
8735: LD_EXP 1
8739: PUSH
8740: LD_EXP 19
8744: AND
8745: PUSH
8746: LD_OWVAR 67
8750: PUSH
8751: LD_INT 4
8753: LESS
8754: AND
8755: IFFALSE 8774
8757: GO 8759
8759: DISABLE
// begin Difficulty := Difficulty + 1 ;
8760: LD_ADDR_OWVAR 67
8764: PUSH
8765: LD_OWVAR 67
8769: PUSH
8770: LD_INT 1
8772: PLUS
8773: ST_TO_ADDR
// end ;
8774: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
8775: LD_EXP 1
8779: PUSH
8780: LD_EXP 20
8784: AND
8785: IFFALSE 8888
8787: GO 8789
8789: DISABLE
8790: LD_INT 0
8792: PPUSH
// begin for i := 1 to 5 do
8793: LD_ADDR_VAR 0 1
8797: PUSH
8798: DOUBLE
8799: LD_INT 1
8801: DEC
8802: ST_TO_ADDR
8803: LD_INT 5
8805: PUSH
8806: FOR_TO
8807: IFFALSE 8886
// begin uc_nation := nation_nature ;
8809: LD_ADDR_OWVAR 21
8813: PUSH
8814: LD_INT 0
8816: ST_TO_ADDR
// uc_side := 0 ;
8817: LD_ADDR_OWVAR 20
8821: PUSH
8822: LD_INT 0
8824: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8825: LD_ADDR_OWVAR 29
8829: PUSH
8830: LD_INT 12
8832: PUSH
8833: LD_INT 12
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: ST_TO_ADDR
// hc_agressivity := 20 ;
8840: LD_ADDR_OWVAR 35
8844: PUSH
8845: LD_INT 20
8847: ST_TO_ADDR
// hc_class := class_tiger ;
8848: LD_ADDR_OWVAR 28
8852: PUSH
8853: LD_INT 14
8855: ST_TO_ADDR
// hc_gallery :=  ;
8856: LD_ADDR_OWVAR 33
8860: PUSH
8861: LD_STRING 
8863: ST_TO_ADDR
// hc_name :=  ;
8864: LD_ADDR_OWVAR 26
8868: PUSH
8869: LD_STRING 
8871: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
8872: CALL_OW 44
8876: PPUSH
8877: LD_INT 0
8879: PPUSH
8880: CALL_OW 51
// end ;
8884: GO 8806
8886: POP
8887: POP
// end ;
8888: PPOPN 1
8890: END
// every 0 0$1 trigger StreamModeActive and sBomb do
8891: LD_EXP 1
8895: PUSH
8896: LD_EXP 21
8900: AND
8901: IFFALSE 8910
8903: GO 8905
8905: DISABLE
// StreamSibBomb ;
8906: CALL 8911 0 0
8910: END
// export function StreamSibBomb ; var i , x , y ; begin
8911: LD_INT 0
8913: PPUSH
8914: PPUSH
8915: PPUSH
8916: PPUSH
// result := false ;
8917: LD_ADDR_VAR 0 1
8921: PUSH
8922: LD_INT 0
8924: ST_TO_ADDR
// for i := 1 to 16 do
8925: LD_ADDR_VAR 0 2
8929: PUSH
8930: DOUBLE
8931: LD_INT 1
8933: DEC
8934: ST_TO_ADDR
8935: LD_INT 16
8937: PUSH
8938: FOR_TO
8939: IFFALSE 9138
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8941: LD_ADDR_VAR 0 3
8945: PUSH
8946: LD_INT 10
8948: PUSH
8949: LD_INT 20
8951: PUSH
8952: LD_INT 30
8954: PUSH
8955: LD_INT 40
8957: PUSH
8958: LD_INT 50
8960: PUSH
8961: LD_INT 60
8963: PUSH
8964: LD_INT 70
8966: PUSH
8967: LD_INT 80
8969: PUSH
8970: LD_INT 90
8972: PUSH
8973: LD_INT 100
8975: PUSH
8976: LD_INT 110
8978: PUSH
8979: LD_INT 120
8981: PUSH
8982: LD_INT 130
8984: PUSH
8985: LD_INT 140
8987: PUSH
8988: LD_INT 150
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: PUSH
9008: LD_INT 1
9010: PPUSH
9011: LD_INT 15
9013: PPUSH
9014: CALL_OW 12
9018: ARRAY
9019: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9020: LD_ADDR_VAR 0 4
9024: PUSH
9025: LD_INT 10
9027: PUSH
9028: LD_INT 20
9030: PUSH
9031: LD_INT 30
9033: PUSH
9034: LD_INT 40
9036: PUSH
9037: LD_INT 50
9039: PUSH
9040: LD_INT 60
9042: PUSH
9043: LD_INT 70
9045: PUSH
9046: LD_INT 80
9048: PUSH
9049: LD_INT 90
9051: PUSH
9052: LD_INT 100
9054: PUSH
9055: LD_INT 110
9057: PUSH
9058: LD_INT 120
9060: PUSH
9061: LD_INT 130
9063: PUSH
9064: LD_INT 140
9066: PUSH
9067: LD_INT 150
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: PUSH
9087: LD_INT 1
9089: PPUSH
9090: LD_INT 15
9092: PPUSH
9093: CALL_OW 12
9097: ARRAY
9098: ST_TO_ADDR
// if ValidHex ( x , y ) then
9099: LD_VAR 0 3
9103: PPUSH
9104: LD_VAR 0 4
9108: PPUSH
9109: CALL_OW 488
9113: IFFALSE 9136
// begin result := [ x , y ] ;
9115: LD_ADDR_VAR 0 1
9119: PUSH
9120: LD_VAR 0 3
9124: PUSH
9125: LD_VAR 0 4
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: ST_TO_ADDR
// break ;
9134: GO 9138
// end ; end ;
9136: GO 8938
9138: POP
9139: POP
// if result then
9140: LD_VAR 0 1
9144: IFFALSE 9204
// begin ToLua ( playSibBomb() ) ;
9146: LD_STRING playSibBomb()
9148: PPUSH
9149: CALL_OW 559
// wait ( 0 0$14 ) ;
9153: LD_INT 490
9155: PPUSH
9156: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9160: LD_VAR 0 1
9164: PUSH
9165: LD_INT 1
9167: ARRAY
9168: PPUSH
9169: LD_VAR 0 1
9173: PUSH
9174: LD_INT 2
9176: ARRAY
9177: PPUSH
9178: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9182: LD_VAR 0 1
9186: PUSH
9187: LD_INT 1
9189: ARRAY
9190: PPUSH
9191: LD_VAR 0 1
9195: PUSH
9196: LD_INT 2
9198: ARRAY
9199: PPUSH
9200: CALL_OW 429
// end ; end ;
9204: LD_VAR 0 1
9208: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9209: LD_EXP 1
9213: PUSH
9214: LD_EXP 23
9218: AND
9219: IFFALSE 9231
9221: GO 9223
9223: DISABLE
// YouLost (  ) ;
9224: LD_STRING 
9226: PPUSH
9227: CALL_OW 104
9231: END
// every 0 0$1 trigger StreamModeActive and sFog do
9232: LD_EXP 1
9236: PUSH
9237: LD_EXP 22
9241: AND
9242: IFFALSE 9256
9244: GO 9246
9246: DISABLE
// FogOff ( your_side ) ;
9247: LD_OWVAR 2
9251: PPUSH
9252: CALL_OW 344
9256: END
// every 0 0$1 trigger StreamModeActive and sSun do
9257: LD_EXP 1
9261: PUSH
9262: LD_EXP 24
9266: AND
9267: IFFALSE 9295
9269: GO 9271
9271: DISABLE
// begin solar_recharge_percent := 0 ;
9272: LD_ADDR_OWVAR 79
9276: PUSH
9277: LD_INT 0
9279: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9280: LD_INT 10500
9282: PPUSH
9283: CALL_OW 67
// solar_recharge_percent := 100 ;
9287: LD_ADDR_OWVAR 79
9291: PUSH
9292: LD_INT 100
9294: ST_TO_ADDR
// end ;
9295: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9296: LD_EXP 1
9300: PUSH
9301: LD_EXP 25
9305: AND
9306: IFFALSE 9545
9308: GO 9310
9310: DISABLE
9311: LD_INT 0
9313: PPUSH
9314: PPUSH
9315: PPUSH
// begin tmp := [ ] ;
9316: LD_ADDR_VAR 0 3
9320: PUSH
9321: EMPTY
9322: ST_TO_ADDR
// for i := 1 to 6 do
9323: LD_ADDR_VAR 0 1
9327: PUSH
9328: DOUBLE
9329: LD_INT 1
9331: DEC
9332: ST_TO_ADDR
9333: LD_INT 6
9335: PUSH
9336: FOR_TO
9337: IFFALSE 9442
// begin uc_nation := nation_nature ;
9339: LD_ADDR_OWVAR 21
9343: PUSH
9344: LD_INT 0
9346: ST_TO_ADDR
// uc_side := 0 ;
9347: LD_ADDR_OWVAR 20
9351: PUSH
9352: LD_INT 0
9354: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9355: LD_ADDR_OWVAR 29
9359: PUSH
9360: LD_INT 12
9362: PUSH
9363: LD_INT 12
9365: PUSH
9366: EMPTY
9367: LIST
9368: LIST
9369: ST_TO_ADDR
// hc_agressivity := 20 ;
9370: LD_ADDR_OWVAR 35
9374: PUSH
9375: LD_INT 20
9377: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9378: LD_ADDR_OWVAR 28
9382: PUSH
9383: LD_INT 17
9385: ST_TO_ADDR
// hc_gallery :=  ;
9386: LD_ADDR_OWVAR 33
9390: PUSH
9391: LD_STRING 
9393: ST_TO_ADDR
// hc_name :=  ;
9394: LD_ADDR_OWVAR 26
9398: PUSH
9399: LD_STRING 
9401: ST_TO_ADDR
// un := CreateHuman ;
9402: LD_ADDR_VAR 0 2
9406: PUSH
9407: CALL_OW 44
9411: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9412: LD_VAR 0 2
9416: PPUSH
9417: LD_INT 1
9419: PPUSH
9420: CALL_OW 51
// tmp := tmp ^ un ;
9424: LD_ADDR_VAR 0 3
9428: PUSH
9429: LD_VAR 0 3
9433: PUSH
9434: LD_VAR 0 2
9438: ADD
9439: ST_TO_ADDR
// end ;
9440: GO 9336
9442: POP
9443: POP
// repeat wait ( 0 0$1 ) ;
9444: LD_INT 35
9446: PPUSH
9447: CALL_OW 67
// for un in tmp do
9451: LD_ADDR_VAR 0 2
9455: PUSH
9456: LD_VAR 0 3
9460: PUSH
9461: FOR_IN
9462: IFFALSE 9536
// begin if IsDead ( un ) then
9464: LD_VAR 0 2
9468: PPUSH
9469: CALL_OW 301
9473: IFFALSE 9493
// begin tmp := tmp diff un ;
9475: LD_ADDR_VAR 0 3
9479: PUSH
9480: LD_VAR 0 3
9484: PUSH
9485: LD_VAR 0 2
9489: DIFF
9490: ST_TO_ADDR
// continue ;
9491: GO 9461
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9493: LD_VAR 0 2
9497: PPUSH
9498: LD_INT 3
9500: PUSH
9501: LD_INT 22
9503: PUSH
9504: LD_INT 0
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: PPUSH
9515: CALL_OW 69
9519: PPUSH
9520: LD_VAR 0 2
9524: PPUSH
9525: CALL_OW 74
9529: PPUSH
9530: CALL_OW 115
// end ;
9534: GO 9461
9536: POP
9537: POP
// until not tmp ;
9538: LD_VAR 0 3
9542: NOT
9543: IFFALSE 9444
// end ;
9545: PPOPN 3
9547: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9548: LD_EXP 1
9552: PUSH
9553: LD_EXP 26
9557: AND
9558: IFFALSE 9612
9560: GO 9562
9562: DISABLE
// begin ToLua ( displayTroll(); ) ;
9563: LD_STRING displayTroll();
9565: PPUSH
9566: CALL_OW 559
// wait ( 3 3$00 ) ;
9570: LD_INT 6300
9572: PPUSH
9573: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9577: LD_STRING hideTroll();
9579: PPUSH
9580: CALL_OW 559
// wait ( 1 1$00 ) ;
9584: LD_INT 2100
9586: PPUSH
9587: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9591: LD_STRING displayTroll();
9593: PPUSH
9594: CALL_OW 559
// wait ( 1 1$00 ) ;
9598: LD_INT 2100
9600: PPUSH
9601: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9605: LD_STRING hideTroll();
9607: PPUSH
9608: CALL_OW 559
// end ;
9612: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9613: LD_EXP 1
9617: PUSH
9618: LD_EXP 27
9622: AND
9623: IFFALSE 9686
9625: GO 9627
9627: DISABLE
9628: LD_INT 0
9630: PPUSH
// begin p := 0 ;
9631: LD_ADDR_VAR 0 1
9635: PUSH
9636: LD_INT 0
9638: ST_TO_ADDR
// repeat game_speed := 1 ;
9639: LD_ADDR_OWVAR 65
9643: PUSH
9644: LD_INT 1
9646: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9647: LD_INT 35
9649: PPUSH
9650: CALL_OW 67
// p := p + 1 ;
9654: LD_ADDR_VAR 0 1
9658: PUSH
9659: LD_VAR 0 1
9663: PUSH
9664: LD_INT 1
9666: PLUS
9667: ST_TO_ADDR
// until p >= 60 ;
9668: LD_VAR 0 1
9672: PUSH
9673: LD_INT 60
9675: GREATEREQUAL
9676: IFFALSE 9639
// game_speed := 4 ;
9678: LD_ADDR_OWVAR 65
9682: PUSH
9683: LD_INT 4
9685: ST_TO_ADDR
// end ;
9686: PPOPN 1
9688: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9689: LD_EXP 1
9693: PUSH
9694: LD_EXP 28
9698: AND
9699: IFFALSE 9845
9701: GO 9703
9703: DISABLE
9704: LD_INT 0
9706: PPUSH
9707: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9708: LD_ADDR_VAR 0 1
9712: PUSH
9713: LD_INT 22
9715: PUSH
9716: LD_OWVAR 2
9720: PUSH
9721: EMPTY
9722: LIST
9723: LIST
9724: PUSH
9725: LD_INT 2
9727: PUSH
9728: LD_INT 30
9730: PUSH
9731: LD_INT 0
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: PUSH
9738: LD_INT 30
9740: PUSH
9741: LD_INT 1
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: PUSH
9748: EMPTY
9749: LIST
9750: LIST
9751: LIST
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: PPUSH
9757: CALL_OW 69
9761: ST_TO_ADDR
// if not depot then
9762: LD_VAR 0 1
9766: NOT
9767: IFFALSE 9771
// exit ;
9769: GO 9845
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
9771: LD_ADDR_VAR 0 2
9775: PUSH
9776: LD_VAR 0 1
9780: PUSH
9781: LD_INT 1
9783: PPUSH
9784: LD_VAR 0 1
9788: PPUSH
9789: CALL_OW 12
9793: ARRAY
9794: PPUSH
9795: CALL_OW 274
9799: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
9800: LD_VAR 0 2
9804: PPUSH
9805: LD_INT 1
9807: PPUSH
9808: LD_INT 0
9810: PPUSH
9811: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
9815: LD_VAR 0 2
9819: PPUSH
9820: LD_INT 2
9822: PPUSH
9823: LD_INT 0
9825: PPUSH
9826: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
9830: LD_VAR 0 2
9834: PPUSH
9835: LD_INT 3
9837: PPUSH
9838: LD_INT 0
9840: PPUSH
9841: CALL_OW 277
// end ;
9845: PPOPN 2
9847: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
9848: LD_EXP 1
9852: PUSH
9853: LD_EXP 29
9857: AND
9858: IFFALSE 9955
9860: GO 9862
9862: DISABLE
9863: LD_INT 0
9865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
9866: LD_ADDR_VAR 0 1
9870: PUSH
9871: LD_INT 22
9873: PUSH
9874: LD_OWVAR 2
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: PUSH
9883: LD_INT 21
9885: PUSH
9886: LD_INT 1
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: PUSH
9893: LD_INT 3
9895: PUSH
9896: LD_INT 23
9898: PUSH
9899: LD_INT 0
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: LIST
9914: PPUSH
9915: CALL_OW 69
9919: ST_TO_ADDR
// if not tmp then
9920: LD_VAR 0 1
9924: NOT
9925: IFFALSE 9929
// exit ;
9927: GO 9955
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
9929: LD_VAR 0 1
9933: PUSH
9934: LD_INT 1
9936: PPUSH
9937: LD_VAR 0 1
9941: PPUSH
9942: CALL_OW 12
9946: ARRAY
9947: PPUSH
9948: LD_INT 200
9950: PPUSH
9951: CALL_OW 234
// end ;
9955: PPOPN 1
9957: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
9958: LD_EXP 1
9962: PUSH
9963: LD_EXP 30
9967: AND
9968: IFFALSE 10047
9970: GO 9972
9972: DISABLE
9973: LD_INT 0
9975: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
9976: LD_ADDR_VAR 0 1
9980: PUSH
9981: LD_INT 22
9983: PUSH
9984: LD_OWVAR 2
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: LD_INT 21
9995: PUSH
9996: LD_INT 2
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: PPUSH
10007: CALL_OW 69
10011: ST_TO_ADDR
// if not tmp then
10012: LD_VAR 0 1
10016: NOT
10017: IFFALSE 10021
// exit ;
10019: GO 10047
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10021: LD_VAR 0 1
10025: PUSH
10026: LD_INT 1
10028: PPUSH
10029: LD_VAR 0 1
10033: PPUSH
10034: CALL_OW 12
10038: ARRAY
10039: PPUSH
10040: LD_INT 60
10042: PPUSH
10043: CALL_OW 234
// end ;
10047: PPOPN 1
10049: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10050: LD_EXP 1
10054: PUSH
10055: LD_EXP 31
10059: AND
10060: IFFALSE 10159
10062: GO 10064
10064: DISABLE
10065: LD_INT 0
10067: PPUSH
10068: PPUSH
// begin enable ;
10069: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10070: LD_ADDR_VAR 0 1
10074: PUSH
10075: LD_INT 22
10077: PUSH
10078: LD_OWVAR 2
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: PUSH
10087: LD_INT 61
10089: PUSH
10090: EMPTY
10091: LIST
10092: PUSH
10093: LD_INT 33
10095: PUSH
10096: LD_INT 2
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: LIST
10107: PPUSH
10108: CALL_OW 69
10112: ST_TO_ADDR
// if not tmp then
10113: LD_VAR 0 1
10117: NOT
10118: IFFALSE 10122
// exit ;
10120: GO 10159
// for i in tmp do
10122: LD_ADDR_VAR 0 2
10126: PUSH
10127: LD_VAR 0 1
10131: PUSH
10132: FOR_IN
10133: IFFALSE 10157
// if IsControledBy ( i ) then
10135: LD_VAR 0 2
10139: PPUSH
10140: CALL_OW 312
10144: IFFALSE 10155
// ComUnlink ( i ) ;
10146: LD_VAR 0 2
10150: PPUSH
10151: CALL_OW 136
10155: GO 10132
10157: POP
10158: POP
// end ;
10159: PPOPN 2
10161: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10162: LD_EXP 1
10166: PUSH
10167: LD_EXP 32
10171: AND
10172: IFFALSE 10312
10174: GO 10176
10176: DISABLE
10177: LD_INT 0
10179: PPUSH
10180: PPUSH
// begin ToLua ( displayPowell(); ) ;
10181: LD_STRING displayPowell();
10183: PPUSH
10184: CALL_OW 559
// uc_side := 0 ;
10188: LD_ADDR_OWVAR 20
10192: PUSH
10193: LD_INT 0
10195: ST_TO_ADDR
// uc_nation := 2 ;
10196: LD_ADDR_OWVAR 21
10200: PUSH
10201: LD_INT 2
10203: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10204: LD_ADDR_OWVAR 37
10208: PUSH
10209: LD_INT 14
10211: ST_TO_ADDR
// vc_engine := engine_siberite ;
10212: LD_ADDR_OWVAR 39
10216: PUSH
10217: LD_INT 3
10219: ST_TO_ADDR
// vc_control := control_apeman ;
10220: LD_ADDR_OWVAR 38
10224: PUSH
10225: LD_INT 5
10227: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10228: LD_ADDR_OWVAR 40
10232: PUSH
10233: LD_INT 29
10235: ST_TO_ADDR
// un := CreateVehicle ;
10236: LD_ADDR_VAR 0 2
10240: PUSH
10241: CALL_OW 45
10245: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10246: LD_VAR 0 2
10250: PPUSH
10251: LD_INT 1
10253: PPUSH
10254: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10258: LD_INT 35
10260: PPUSH
10261: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10265: LD_VAR 0 2
10269: PPUSH
10270: LD_INT 22
10272: PUSH
10273: LD_OWVAR 2
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: PPUSH
10282: CALL_OW 69
10286: PPUSH
10287: LD_VAR 0 2
10291: PPUSH
10292: CALL_OW 74
10296: PPUSH
10297: CALL_OW 115
// until IsDead ( un ) ;
10301: LD_VAR 0 2
10305: PPUSH
10306: CALL_OW 301
10310: IFFALSE 10258
// end ;
10312: PPOPN 2
10314: END
// every 0 0$1 trigger StreamModeActive and sStu do
10315: LD_EXP 1
10319: PUSH
10320: LD_EXP 40
10324: AND
10325: IFFALSE 10341
10327: GO 10329
10329: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10330: LD_STRING displayStucuk();
10332: PPUSH
10333: CALL_OW 559
// ResetFog ;
10337: CALL_OW 335
// end ;
10341: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10342: LD_EXP 1
10346: PUSH
10347: LD_EXP 33
10351: AND
10352: IFFALSE 10493
10354: GO 10356
10356: DISABLE
10357: LD_INT 0
10359: PPUSH
10360: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10361: LD_ADDR_VAR 0 2
10365: PUSH
10366: LD_INT 22
10368: PUSH
10369: LD_OWVAR 2
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: LD_INT 21
10380: PUSH
10381: LD_INT 1
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: PPUSH
10392: CALL_OW 69
10396: ST_TO_ADDR
// if not tmp then
10397: LD_VAR 0 2
10401: NOT
10402: IFFALSE 10406
// exit ;
10404: GO 10493
// un := tmp [ rand ( 1 , tmp ) ] ;
10406: LD_ADDR_VAR 0 1
10410: PUSH
10411: LD_VAR 0 2
10415: PUSH
10416: LD_INT 1
10418: PPUSH
10419: LD_VAR 0 2
10423: PPUSH
10424: CALL_OW 12
10428: ARRAY
10429: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10430: LD_VAR 0 1
10434: PPUSH
10435: LD_INT 0
10437: PPUSH
10438: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10442: LD_VAR 0 1
10446: PPUSH
10447: LD_OWVAR 3
10451: PUSH
10452: LD_VAR 0 1
10456: DIFF
10457: PPUSH
10458: LD_VAR 0 1
10462: PPUSH
10463: CALL_OW 74
10467: PPUSH
10468: CALL_OW 115
// wait ( 0 0$20 ) ;
10472: LD_INT 700
10474: PPUSH
10475: CALL_OW 67
// SetSide ( un , your_side ) ;
10479: LD_VAR 0 1
10483: PPUSH
10484: LD_OWVAR 2
10488: PPUSH
10489: CALL_OW 235
// end ;
10493: PPOPN 2
10495: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10496: LD_EXP 1
10500: PUSH
10501: LD_EXP 34
10505: AND
10506: IFFALSE 10612
10508: GO 10510
10510: DISABLE
10511: LD_INT 0
10513: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10514: LD_ADDR_VAR 0 1
10518: PUSH
10519: LD_INT 22
10521: PUSH
10522: LD_OWVAR 2
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: PUSH
10531: LD_INT 2
10533: PUSH
10534: LD_INT 30
10536: PUSH
10537: LD_INT 0
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: PUSH
10544: LD_INT 30
10546: PUSH
10547: LD_INT 1
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: LIST
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PPUSH
10563: CALL_OW 69
10567: ST_TO_ADDR
// if not depot then
10568: LD_VAR 0 1
10572: NOT
10573: IFFALSE 10577
// exit ;
10575: GO 10612
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10577: LD_VAR 0 1
10581: PUSH
10582: LD_INT 1
10584: ARRAY
10585: PPUSH
10586: CALL_OW 250
10590: PPUSH
10591: LD_VAR 0 1
10595: PUSH
10596: LD_INT 1
10598: ARRAY
10599: PPUSH
10600: CALL_OW 251
10604: PPUSH
10605: LD_INT 70
10607: PPUSH
10608: CALL_OW 495
// end ;
10612: PPOPN 1
10614: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10615: LD_EXP 1
10619: PUSH
10620: LD_EXP 35
10624: AND
10625: IFFALSE 10836
10627: GO 10629
10629: DISABLE
10630: LD_INT 0
10632: PPUSH
10633: PPUSH
10634: PPUSH
10635: PPUSH
10636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10637: LD_ADDR_VAR 0 5
10641: PUSH
10642: LD_INT 22
10644: PUSH
10645: LD_OWVAR 2
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: PUSH
10654: LD_INT 21
10656: PUSH
10657: LD_INT 1
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PPUSH
10668: CALL_OW 69
10672: ST_TO_ADDR
// if not tmp then
10673: LD_VAR 0 5
10677: NOT
10678: IFFALSE 10682
// exit ;
10680: GO 10836
// for i in tmp do
10682: LD_ADDR_VAR 0 1
10686: PUSH
10687: LD_VAR 0 5
10691: PUSH
10692: FOR_IN
10693: IFFALSE 10834
// begin d := rand ( 0 , 5 ) ;
10695: LD_ADDR_VAR 0 4
10699: PUSH
10700: LD_INT 0
10702: PPUSH
10703: LD_INT 5
10705: PPUSH
10706: CALL_OW 12
10710: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10711: LD_ADDR_VAR 0 2
10715: PUSH
10716: LD_VAR 0 1
10720: PPUSH
10721: CALL_OW 250
10725: PPUSH
10726: LD_VAR 0 4
10730: PPUSH
10731: LD_INT 3
10733: PPUSH
10734: LD_INT 12
10736: PPUSH
10737: CALL_OW 12
10741: PPUSH
10742: CALL_OW 272
10746: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
10747: LD_ADDR_VAR 0 3
10751: PUSH
10752: LD_VAR 0 1
10756: PPUSH
10757: CALL_OW 251
10761: PPUSH
10762: LD_VAR 0 4
10766: PPUSH
10767: LD_INT 3
10769: PPUSH
10770: LD_INT 12
10772: PPUSH
10773: CALL_OW 12
10777: PPUSH
10778: CALL_OW 273
10782: ST_TO_ADDR
// if ValidHex ( x , y ) then
10783: LD_VAR 0 2
10787: PPUSH
10788: LD_VAR 0 3
10792: PPUSH
10793: CALL_OW 488
10797: IFFALSE 10832
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
10799: LD_VAR 0 1
10803: PPUSH
10804: LD_VAR 0 2
10808: PPUSH
10809: LD_VAR 0 3
10813: PPUSH
10814: LD_INT 3
10816: PPUSH
10817: LD_INT 6
10819: PPUSH
10820: CALL_OW 12
10824: PPUSH
10825: LD_INT 1
10827: PPUSH
10828: CALL_OW 483
// end ;
10832: GO 10692
10834: POP
10835: POP
// end ;
10836: PPOPN 5
10838: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
10839: LD_EXP 1
10843: PUSH
10844: LD_EXP 36
10848: AND
10849: IFFALSE 10943
10851: GO 10853
10853: DISABLE
10854: LD_INT 0
10856: PPUSH
10857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
10858: LD_ADDR_VAR 0 2
10862: PUSH
10863: LD_INT 22
10865: PUSH
10866: LD_OWVAR 2
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: PUSH
10875: LD_INT 32
10877: PUSH
10878: LD_INT 1
10880: PUSH
10881: EMPTY
10882: LIST
10883: LIST
10884: PUSH
10885: LD_INT 21
10887: PUSH
10888: LD_INT 2
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: LIST
10899: PPUSH
10900: CALL_OW 69
10904: ST_TO_ADDR
// if not tmp then
10905: LD_VAR 0 2
10909: NOT
10910: IFFALSE 10914
// exit ;
10912: GO 10943
// for i in tmp do
10914: LD_ADDR_VAR 0 1
10918: PUSH
10919: LD_VAR 0 2
10923: PUSH
10924: FOR_IN
10925: IFFALSE 10941
// SetFuel ( i , 0 ) ;
10927: LD_VAR 0 1
10931: PPUSH
10932: LD_INT 0
10934: PPUSH
10935: CALL_OW 240
10939: GO 10924
10941: POP
10942: POP
// end ;
10943: PPOPN 2
10945: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
10946: LD_EXP 1
10950: PUSH
10951: LD_EXP 37
10955: AND
10956: IFFALSE 11022
10958: GO 10960
10960: DISABLE
10961: LD_INT 0
10963: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
10964: LD_ADDR_VAR 0 1
10968: PUSH
10969: LD_INT 22
10971: PUSH
10972: LD_OWVAR 2
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PUSH
10981: LD_INT 30
10983: PUSH
10984: LD_INT 29
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PPUSH
10995: CALL_OW 69
10999: ST_TO_ADDR
// if not tmp then
11000: LD_VAR 0 1
11004: NOT
11005: IFFALSE 11009
// exit ;
11007: GO 11022
// DestroyUnit ( tmp [ 1 ] ) ;
11009: LD_VAR 0 1
11013: PUSH
11014: LD_INT 1
11016: ARRAY
11017: PPUSH
11018: CALL_OW 65
// end ;
11022: PPOPN 1
11024: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11025: LD_EXP 1
11029: PUSH
11030: LD_EXP 39
11034: AND
11035: IFFALSE 11164
11037: GO 11039
11039: DISABLE
11040: LD_INT 0
11042: PPUSH
// begin uc_side := 0 ;
11043: LD_ADDR_OWVAR 20
11047: PUSH
11048: LD_INT 0
11050: ST_TO_ADDR
// uc_nation := nation_arabian ;
11051: LD_ADDR_OWVAR 21
11055: PUSH
11056: LD_INT 2
11058: ST_TO_ADDR
// hc_gallery :=  ;
11059: LD_ADDR_OWVAR 33
11063: PUSH
11064: LD_STRING 
11066: ST_TO_ADDR
// hc_name :=  ;
11067: LD_ADDR_OWVAR 26
11071: PUSH
11072: LD_STRING 
11074: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11075: LD_INT 1
11077: PPUSH
11078: LD_INT 11
11080: PPUSH
11081: LD_INT 10
11083: PPUSH
11084: CALL_OW 380
// un := CreateHuman ;
11088: LD_ADDR_VAR 0 1
11092: PUSH
11093: CALL_OW 44
11097: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11098: LD_VAR 0 1
11102: PPUSH
11103: LD_INT 1
11105: PPUSH
11106: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11110: LD_INT 35
11112: PPUSH
11113: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11117: LD_VAR 0 1
11121: PPUSH
11122: LD_INT 22
11124: PUSH
11125: LD_OWVAR 2
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: PPUSH
11134: CALL_OW 69
11138: PPUSH
11139: LD_VAR 0 1
11143: PPUSH
11144: CALL_OW 74
11148: PPUSH
11149: CALL_OW 115
// until IsDead ( un ) ;
11153: LD_VAR 0 1
11157: PPUSH
11158: CALL_OW 301
11162: IFFALSE 11110
// end ;
11164: PPOPN 1
11166: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11167: LD_EXP 1
11171: PUSH
11172: LD_EXP 41
11176: AND
11177: IFFALSE 11189
11179: GO 11181
11181: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11182: LD_STRING earthquake(getX(game), 0, 32)
11184: PPUSH
11185: CALL_OW 559
11189: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11190: LD_EXP 1
11194: PUSH
11195: LD_EXP 42
11199: AND
11200: IFFALSE 11291
11202: GO 11204
11204: DISABLE
11205: LD_INT 0
11207: PPUSH
// begin enable ;
11208: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11209: LD_ADDR_VAR 0 1
11213: PUSH
11214: LD_INT 22
11216: PUSH
11217: LD_OWVAR 2
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PUSH
11226: LD_INT 21
11228: PUSH
11229: LD_INT 2
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PUSH
11236: LD_INT 33
11238: PUSH
11239: LD_INT 3
11241: PUSH
11242: EMPTY
11243: LIST
11244: LIST
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: LIST
11250: PPUSH
11251: CALL_OW 69
11255: ST_TO_ADDR
// if not tmp then
11256: LD_VAR 0 1
11260: NOT
11261: IFFALSE 11265
// exit ;
11263: GO 11291
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11265: LD_VAR 0 1
11269: PUSH
11270: LD_INT 1
11272: PPUSH
11273: LD_VAR 0 1
11277: PPUSH
11278: CALL_OW 12
11282: ARRAY
11283: PPUSH
11284: LD_INT 1
11286: PPUSH
11287: CALL_OW 234
// end ;
11291: PPOPN 1
11293: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11294: LD_EXP 1
11298: PUSH
11299: LD_EXP 43
11303: AND
11304: IFFALSE 11445
11306: GO 11308
11308: DISABLE
11309: LD_INT 0
11311: PPUSH
11312: PPUSH
11313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11314: LD_ADDR_VAR 0 3
11318: PUSH
11319: LD_INT 22
11321: PUSH
11322: LD_OWVAR 2
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: PUSH
11331: LD_INT 25
11333: PUSH
11334: LD_INT 1
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: PPUSH
11345: CALL_OW 69
11349: ST_TO_ADDR
// if not tmp then
11350: LD_VAR 0 3
11354: NOT
11355: IFFALSE 11359
// exit ;
11357: GO 11445
// un := tmp [ rand ( 1 , tmp ) ] ;
11359: LD_ADDR_VAR 0 2
11363: PUSH
11364: LD_VAR 0 3
11368: PUSH
11369: LD_INT 1
11371: PPUSH
11372: LD_VAR 0 3
11376: PPUSH
11377: CALL_OW 12
11381: ARRAY
11382: ST_TO_ADDR
// if Crawls ( un ) then
11383: LD_VAR 0 2
11387: PPUSH
11388: CALL_OW 318
11392: IFFALSE 11403
// ComWalk ( un ) ;
11394: LD_VAR 0 2
11398: PPUSH
11399: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11403: LD_VAR 0 2
11407: PPUSH
11408: LD_INT 9
11410: PPUSH
11411: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11415: LD_INT 28
11417: PPUSH
11418: LD_OWVAR 2
11422: PPUSH
11423: LD_INT 2
11425: PPUSH
11426: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11430: LD_INT 29
11432: PPUSH
11433: LD_OWVAR 2
11437: PPUSH
11438: LD_INT 2
11440: PPUSH
11441: CALL_OW 322
// end ;
11445: PPOPN 3
11447: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11448: LD_EXP 1
11452: PUSH
11453: LD_EXP 44
11457: AND
11458: IFFALSE 11569
11460: GO 11462
11462: DISABLE
11463: LD_INT 0
11465: PPUSH
11466: PPUSH
11467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11468: LD_ADDR_VAR 0 3
11472: PUSH
11473: LD_INT 22
11475: PUSH
11476: LD_OWVAR 2
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: PUSH
11485: LD_INT 25
11487: PUSH
11488: LD_INT 1
11490: PUSH
11491: EMPTY
11492: LIST
11493: LIST
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: PPUSH
11499: CALL_OW 69
11503: ST_TO_ADDR
// if not tmp then
11504: LD_VAR 0 3
11508: NOT
11509: IFFALSE 11513
// exit ;
11511: GO 11569
// un := tmp [ rand ( 1 , tmp ) ] ;
11513: LD_ADDR_VAR 0 2
11517: PUSH
11518: LD_VAR 0 3
11522: PUSH
11523: LD_INT 1
11525: PPUSH
11526: LD_VAR 0 3
11530: PPUSH
11531: CALL_OW 12
11535: ARRAY
11536: ST_TO_ADDR
// if Crawls ( un ) then
11537: LD_VAR 0 2
11541: PPUSH
11542: CALL_OW 318
11546: IFFALSE 11557
// ComWalk ( un ) ;
11548: LD_VAR 0 2
11552: PPUSH
11553: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11557: LD_VAR 0 2
11561: PPUSH
11562: LD_INT 8
11564: PPUSH
11565: CALL_OW 336
// end ;
11569: PPOPN 3
11571: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11572: LD_EXP 1
11576: PUSH
11577: LD_EXP 45
11581: AND
11582: IFFALSE 11726
11584: GO 11586
11586: DISABLE
11587: LD_INT 0
11589: PPUSH
11590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11591: LD_ADDR_VAR 0 2
11595: PUSH
11596: LD_INT 22
11598: PUSH
11599: LD_OWVAR 2
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PUSH
11608: LD_INT 21
11610: PUSH
11611: LD_INT 2
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: PUSH
11618: LD_INT 2
11620: PUSH
11621: LD_INT 34
11623: PUSH
11624: LD_INT 12
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: PUSH
11631: LD_INT 34
11633: PUSH
11634: LD_INT 51
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: PUSH
11641: LD_INT 34
11643: PUSH
11644: LD_INT 32
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: LIST
11661: PPUSH
11662: CALL_OW 69
11666: ST_TO_ADDR
// if not tmp then
11667: LD_VAR 0 2
11671: NOT
11672: IFFALSE 11676
// exit ;
11674: GO 11726
// for i in tmp do
11676: LD_ADDR_VAR 0 1
11680: PUSH
11681: LD_VAR 0 2
11685: PUSH
11686: FOR_IN
11687: IFFALSE 11724
// if GetCargo ( i , mat_artifact ) = 0 then
11689: LD_VAR 0 1
11693: PPUSH
11694: LD_INT 4
11696: PPUSH
11697: CALL_OW 289
11701: PUSH
11702: LD_INT 0
11704: EQUAL
11705: IFFALSE 11722
// SetCargo ( i , mat_siberit , 100 ) ;
11707: LD_VAR 0 1
11711: PPUSH
11712: LD_INT 3
11714: PPUSH
11715: LD_INT 100
11717: PPUSH
11718: CALL_OW 290
11722: GO 11686
11724: POP
11725: POP
// end ;
11726: PPOPN 2
11728: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
11729: LD_EXP 1
11733: PUSH
11734: LD_EXP 46
11738: AND
11739: IFFALSE 11922
11741: GO 11743
11743: DISABLE
11744: LD_INT 0
11746: PPUSH
11747: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
11748: LD_ADDR_VAR 0 2
11752: PUSH
11753: LD_INT 22
11755: PUSH
11756: LD_OWVAR 2
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: PPUSH
11765: CALL_OW 69
11769: ST_TO_ADDR
// if not tmp then
11770: LD_VAR 0 2
11774: NOT
11775: IFFALSE 11779
// exit ;
11777: GO 11922
// for i := 1 to 2 do
11779: LD_ADDR_VAR 0 1
11783: PUSH
11784: DOUBLE
11785: LD_INT 1
11787: DEC
11788: ST_TO_ADDR
11789: LD_INT 2
11791: PUSH
11792: FOR_TO
11793: IFFALSE 11920
// begin uc_side := your_side ;
11795: LD_ADDR_OWVAR 20
11799: PUSH
11800: LD_OWVAR 2
11804: ST_TO_ADDR
// uc_nation := nation_american ;
11805: LD_ADDR_OWVAR 21
11809: PUSH
11810: LD_INT 1
11812: ST_TO_ADDR
// vc_chassis := us_morphling ;
11813: LD_ADDR_OWVAR 37
11817: PUSH
11818: LD_INT 5
11820: ST_TO_ADDR
// vc_engine := engine_siberite ;
11821: LD_ADDR_OWVAR 39
11825: PUSH
11826: LD_INT 3
11828: ST_TO_ADDR
// vc_control := control_computer ;
11829: LD_ADDR_OWVAR 38
11833: PUSH
11834: LD_INT 3
11836: ST_TO_ADDR
// vc_weapon := us_double_laser ;
11837: LD_ADDR_OWVAR 40
11841: PUSH
11842: LD_INT 10
11844: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
11845: LD_VAR 0 2
11849: PUSH
11850: LD_INT 1
11852: ARRAY
11853: PPUSH
11854: CALL_OW 310
11858: NOT
11859: IFFALSE 11906
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
11861: CALL_OW 45
11865: PPUSH
11866: LD_VAR 0 2
11870: PUSH
11871: LD_INT 1
11873: ARRAY
11874: PPUSH
11875: CALL_OW 250
11879: PPUSH
11880: LD_VAR 0 2
11884: PUSH
11885: LD_INT 1
11887: ARRAY
11888: PPUSH
11889: CALL_OW 251
11893: PPUSH
11894: LD_INT 12
11896: PPUSH
11897: LD_INT 1
11899: PPUSH
11900: CALL_OW 50
11904: GO 11918
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
11906: CALL_OW 45
11910: PPUSH
11911: LD_INT 1
11913: PPUSH
11914: CALL_OW 51
// end ;
11918: GO 11792
11920: POP
11921: POP
// end ;
11922: PPOPN 2
11924: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
11925: LD_EXP 1
11929: PUSH
11930: LD_EXP 47
11934: AND
11935: IFFALSE 12157
11937: GO 11939
11939: DISABLE
11940: LD_INT 0
11942: PPUSH
11943: PPUSH
11944: PPUSH
11945: PPUSH
11946: PPUSH
11947: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11948: LD_ADDR_VAR 0 6
11952: PUSH
11953: LD_INT 22
11955: PUSH
11956: LD_OWVAR 2
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PUSH
11965: LD_INT 21
11967: PUSH
11968: LD_INT 1
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PUSH
11975: LD_INT 3
11977: PUSH
11978: LD_INT 23
11980: PUSH
11981: LD_INT 0
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: LIST
11996: PPUSH
11997: CALL_OW 69
12001: ST_TO_ADDR
// if not tmp then
12002: LD_VAR 0 6
12006: NOT
12007: IFFALSE 12011
// exit ;
12009: GO 12157
// s1 := rand ( 1 , 4 ) ;
12011: LD_ADDR_VAR 0 2
12015: PUSH
12016: LD_INT 1
12018: PPUSH
12019: LD_INT 4
12021: PPUSH
12022: CALL_OW 12
12026: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12027: LD_ADDR_VAR 0 4
12031: PUSH
12032: LD_VAR 0 6
12036: PUSH
12037: LD_INT 1
12039: ARRAY
12040: PPUSH
12041: LD_VAR 0 2
12045: PPUSH
12046: CALL_OW 259
12050: ST_TO_ADDR
// if s1 = 1 then
12051: LD_VAR 0 2
12055: PUSH
12056: LD_INT 1
12058: EQUAL
12059: IFFALSE 12079
// s2 := rand ( 2 , 4 ) else
12061: LD_ADDR_VAR 0 3
12065: PUSH
12066: LD_INT 2
12068: PPUSH
12069: LD_INT 4
12071: PPUSH
12072: CALL_OW 12
12076: ST_TO_ADDR
12077: GO 12087
// s2 := 1 ;
12079: LD_ADDR_VAR 0 3
12083: PUSH
12084: LD_INT 1
12086: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12087: LD_ADDR_VAR 0 5
12091: PUSH
12092: LD_VAR 0 6
12096: PUSH
12097: LD_INT 1
12099: ARRAY
12100: PPUSH
12101: LD_VAR 0 3
12105: PPUSH
12106: CALL_OW 259
12110: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12111: LD_VAR 0 6
12115: PUSH
12116: LD_INT 1
12118: ARRAY
12119: PPUSH
12120: LD_VAR 0 2
12124: PPUSH
12125: LD_VAR 0 5
12129: PPUSH
12130: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12134: LD_VAR 0 6
12138: PUSH
12139: LD_INT 1
12141: ARRAY
12142: PPUSH
12143: LD_VAR 0 3
12147: PPUSH
12148: LD_VAR 0 4
12152: PPUSH
12153: CALL_OW 237
// end ;
12157: PPOPN 6
12159: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12160: LD_EXP 1
12164: PUSH
12165: LD_EXP 48
12169: AND
12170: IFFALSE 12249
12172: GO 12174
12174: DISABLE
12175: LD_INT 0
12177: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12178: LD_ADDR_VAR 0 1
12182: PUSH
12183: LD_INT 22
12185: PUSH
12186: LD_OWVAR 2
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PUSH
12195: LD_INT 30
12197: PUSH
12198: LD_INT 3
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: PPUSH
12209: CALL_OW 69
12213: ST_TO_ADDR
// if not tmp then
12214: LD_VAR 0 1
12218: NOT
12219: IFFALSE 12223
// exit ;
12221: GO 12249
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12223: LD_VAR 0 1
12227: PUSH
12228: LD_INT 1
12230: PPUSH
12231: LD_VAR 0 1
12235: PPUSH
12236: CALL_OW 12
12240: ARRAY
12241: PPUSH
12242: LD_INT 1
12244: PPUSH
12245: CALL_OW 234
// end ;
12249: PPOPN 1
12251: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12252: LD_EXP 1
12256: PUSH
12257: LD_EXP 49
12261: AND
12262: IFFALSE 12374
12264: GO 12266
12266: DISABLE
12267: LD_INT 0
12269: PPUSH
12270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12271: LD_ADDR_VAR 0 2
12275: PUSH
12276: LD_INT 22
12278: PUSH
12279: LD_OWVAR 2
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PUSH
12288: LD_INT 2
12290: PUSH
12291: LD_INT 30
12293: PUSH
12294: LD_INT 27
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: PUSH
12301: LD_INT 30
12303: PUSH
12304: LD_INT 26
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PUSH
12311: LD_INT 30
12313: PUSH
12314: LD_INT 28
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: PPUSH
12331: CALL_OW 69
12335: ST_TO_ADDR
// if not tmp then
12336: LD_VAR 0 2
12340: NOT
12341: IFFALSE 12345
// exit ;
12343: GO 12374
// for i in tmp do
12345: LD_ADDR_VAR 0 1
12349: PUSH
12350: LD_VAR 0 2
12354: PUSH
12355: FOR_IN
12356: IFFALSE 12372
// SetLives ( i , 1 ) ;
12358: LD_VAR 0 1
12362: PPUSH
12363: LD_INT 1
12365: PPUSH
12366: CALL_OW 234
12370: GO 12355
12372: POP
12373: POP
// end ;
12374: PPOPN 2
12376: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12377: LD_EXP 1
12381: PUSH
12382: LD_EXP 50
12386: AND
12387: IFFALSE 12674
12389: GO 12391
12391: DISABLE
12392: LD_INT 0
12394: PPUSH
12395: PPUSH
12396: PPUSH
// begin i := rand ( 1 , 7 ) ;
12397: LD_ADDR_VAR 0 1
12401: PUSH
12402: LD_INT 1
12404: PPUSH
12405: LD_INT 7
12407: PPUSH
12408: CALL_OW 12
12412: ST_TO_ADDR
// case i of 1 :
12413: LD_VAR 0 1
12417: PUSH
12418: LD_INT 1
12420: DOUBLE
12421: EQUAL
12422: IFTRUE 12426
12424: GO 12436
12426: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12427: LD_STRING earthquake(getX(game), 0, 32)
12429: PPUSH
12430: CALL_OW 559
12434: GO 12674
12436: LD_INT 2
12438: DOUBLE
12439: EQUAL
12440: IFTRUE 12444
12442: GO 12458
12444: POP
// begin ToLua ( displayStucuk(); ) ;
12445: LD_STRING displayStucuk();
12447: PPUSH
12448: CALL_OW 559
// ResetFog ;
12452: CALL_OW 335
// end ; 3 :
12456: GO 12674
12458: LD_INT 3
12460: DOUBLE
12461: EQUAL
12462: IFTRUE 12466
12464: GO 12570
12466: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12467: LD_ADDR_VAR 0 2
12471: PUSH
12472: LD_INT 22
12474: PUSH
12475: LD_OWVAR 2
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PUSH
12484: LD_INT 25
12486: PUSH
12487: LD_INT 1
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: PPUSH
12498: CALL_OW 69
12502: ST_TO_ADDR
// if not tmp then
12503: LD_VAR 0 2
12507: NOT
12508: IFFALSE 12512
// exit ;
12510: GO 12674
// un := tmp [ rand ( 1 , tmp ) ] ;
12512: LD_ADDR_VAR 0 3
12516: PUSH
12517: LD_VAR 0 2
12521: PUSH
12522: LD_INT 1
12524: PPUSH
12525: LD_VAR 0 2
12529: PPUSH
12530: CALL_OW 12
12534: ARRAY
12535: ST_TO_ADDR
// if Crawls ( un ) then
12536: LD_VAR 0 3
12540: PPUSH
12541: CALL_OW 318
12545: IFFALSE 12556
// ComWalk ( un ) ;
12547: LD_VAR 0 3
12551: PPUSH
12552: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12556: LD_VAR 0 3
12560: PPUSH
12561: LD_INT 8
12563: PPUSH
12564: CALL_OW 336
// end ; 4 :
12568: GO 12674
12570: LD_INT 4
12572: DOUBLE
12573: EQUAL
12574: IFTRUE 12578
12576: GO 12652
12578: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12579: LD_ADDR_VAR 0 2
12583: PUSH
12584: LD_INT 22
12586: PUSH
12587: LD_OWVAR 2
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: PUSH
12596: LD_INT 30
12598: PUSH
12599: LD_INT 29
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: PPUSH
12610: CALL_OW 69
12614: ST_TO_ADDR
// if not tmp then
12615: LD_VAR 0 2
12619: NOT
12620: IFFALSE 12624
// exit ;
12622: GO 12674
// CenterNowOnUnits ( tmp [ 1 ] ) ;
12624: LD_VAR 0 2
12628: PUSH
12629: LD_INT 1
12631: ARRAY
12632: PPUSH
12633: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
12637: LD_VAR 0 2
12641: PUSH
12642: LD_INT 1
12644: ARRAY
12645: PPUSH
12646: CALL_OW 65
// end ; 5 .. 7 :
12650: GO 12674
12652: LD_INT 5
12654: DOUBLE
12655: GREATEREQUAL
12656: IFFALSE 12664
12658: LD_INT 7
12660: DOUBLE
12661: LESSEQUAL
12662: IFTRUE 12666
12664: GO 12673
12666: POP
// StreamSibBomb ; end ;
12667: CALL 8911 0 0
12671: GO 12674
12673: POP
// end ;
12674: PPOPN 3
12676: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12677: LD_EXP 1
12681: PUSH
12682: LD_EXP 51
12686: AND
12687: IFFALSE 12843
12689: GO 12691
12691: DISABLE
12692: LD_INT 0
12694: PPUSH
12695: PPUSH
12696: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12697: LD_ADDR_VAR 0 2
12701: PUSH
12702: LD_INT 81
12704: PUSH
12705: LD_OWVAR 2
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PUSH
12714: LD_INT 2
12716: PUSH
12717: LD_INT 21
12719: PUSH
12720: LD_INT 1
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: PUSH
12727: LD_INT 21
12729: PUSH
12730: LD_INT 2
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: LIST
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: PPUSH
12746: CALL_OW 69
12750: ST_TO_ADDR
// if not tmp then
12751: LD_VAR 0 2
12755: NOT
12756: IFFALSE 12760
// exit ;
12758: GO 12843
// p := 0 ;
12760: LD_ADDR_VAR 0 3
12764: PUSH
12765: LD_INT 0
12767: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12768: LD_INT 35
12770: PPUSH
12771: CALL_OW 67
// p := p + 1 ;
12775: LD_ADDR_VAR 0 3
12779: PUSH
12780: LD_VAR 0 3
12784: PUSH
12785: LD_INT 1
12787: PLUS
12788: ST_TO_ADDR
// for i in tmp do
12789: LD_ADDR_VAR 0 1
12793: PUSH
12794: LD_VAR 0 2
12798: PUSH
12799: FOR_IN
12800: IFFALSE 12831
// if GetLives ( i ) < 1000 then
12802: LD_VAR 0 1
12806: PPUSH
12807: CALL_OW 256
12811: PUSH
12812: LD_INT 1000
12814: LESS
12815: IFFALSE 12829
// SetLives ( i , 1000 ) ;
12817: LD_VAR 0 1
12821: PPUSH
12822: LD_INT 1000
12824: PPUSH
12825: CALL_OW 234
12829: GO 12799
12831: POP
12832: POP
// until p > 20 ;
12833: LD_VAR 0 3
12837: PUSH
12838: LD_INT 20
12840: GREATER
12841: IFFALSE 12768
// end ;
12843: PPOPN 3
12845: END
// every 0 0$1 trigger StreamModeActive and sTime do
12846: LD_EXP 1
12850: PUSH
12851: LD_EXP 52
12855: AND
12856: IFFALSE 12891
12858: GO 12860
12860: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
12861: LD_INT 28
12863: PPUSH
12864: LD_OWVAR 2
12868: PPUSH
12869: LD_INT 2
12871: PPUSH
12872: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
12876: LD_INT 30
12878: PPUSH
12879: LD_OWVAR 2
12883: PPUSH
12884: LD_INT 2
12886: PPUSH
12887: CALL_OW 322
// end ;
12891: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
12892: LD_EXP 1
12896: PUSH
12897: LD_EXP 53
12901: AND
12902: IFFALSE 13023
12904: GO 12906
12906: DISABLE
12907: LD_INT 0
12909: PPUSH
12910: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12911: LD_ADDR_VAR 0 2
12915: PUSH
12916: LD_INT 22
12918: PUSH
12919: LD_OWVAR 2
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: PUSH
12928: LD_INT 21
12930: PUSH
12931: LD_INT 1
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: PUSH
12938: LD_INT 3
12940: PUSH
12941: LD_INT 23
12943: PUSH
12944: LD_INT 0
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: LIST
12959: PPUSH
12960: CALL_OW 69
12964: ST_TO_ADDR
// if not tmp then
12965: LD_VAR 0 2
12969: NOT
12970: IFFALSE 12974
// exit ;
12972: GO 13023
// for i in tmp do
12974: LD_ADDR_VAR 0 1
12978: PUSH
12979: LD_VAR 0 2
12983: PUSH
12984: FOR_IN
12985: IFFALSE 13021
// begin if Crawls ( i ) then
12987: LD_VAR 0 1
12991: PPUSH
12992: CALL_OW 318
12996: IFFALSE 13007
// ComWalk ( i ) ;
12998: LD_VAR 0 1
13002: PPUSH
13003: CALL_OW 138
// SetClass ( i , 2 ) ;
13007: LD_VAR 0 1
13011: PPUSH
13012: LD_INT 2
13014: PPUSH
13015: CALL_OW 336
// end ;
13019: GO 12984
13021: POP
13022: POP
// end ;
13023: PPOPN 2
13025: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13026: LD_EXP 1
13030: PUSH
13031: LD_EXP 54
13035: AND
13036: IFFALSE 13324
13038: GO 13040
13040: DISABLE
13041: LD_INT 0
13043: PPUSH
13044: PPUSH
13045: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13046: LD_OWVAR 2
13050: PPUSH
13051: LD_INT 9
13053: PPUSH
13054: LD_INT 1
13056: PPUSH
13057: LD_INT 1
13059: PPUSH
13060: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13064: LD_INT 9
13066: PPUSH
13067: LD_OWVAR 2
13071: PPUSH
13072: CALL_OW 343
// uc_side := 9 ;
13076: LD_ADDR_OWVAR 20
13080: PUSH
13081: LD_INT 9
13083: ST_TO_ADDR
// uc_nation := 2 ;
13084: LD_ADDR_OWVAR 21
13088: PUSH
13089: LD_INT 2
13091: ST_TO_ADDR
// hc_name := Dark Warrior ;
13092: LD_ADDR_OWVAR 26
13096: PUSH
13097: LD_STRING Dark Warrior
13099: ST_TO_ADDR
// hc_gallery :=  ;
13100: LD_ADDR_OWVAR 33
13104: PUSH
13105: LD_STRING 
13107: ST_TO_ADDR
// hc_noskilllimit := true ;
13108: LD_ADDR_OWVAR 76
13112: PUSH
13113: LD_INT 1
13115: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13116: LD_ADDR_OWVAR 31
13120: PUSH
13121: LD_INT 30
13123: PUSH
13124: LD_INT 30
13126: PUSH
13127: LD_INT 30
13129: PUSH
13130: LD_INT 30
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: ST_TO_ADDR
// un := CreateHuman ;
13139: LD_ADDR_VAR 0 3
13143: PUSH
13144: CALL_OW 44
13148: ST_TO_ADDR
// hc_noskilllimit := false ;
13149: LD_ADDR_OWVAR 76
13153: PUSH
13154: LD_INT 0
13156: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13157: LD_VAR 0 3
13161: PPUSH
13162: LD_INT 1
13164: PPUSH
13165: CALL_OW 51
// ToLua ( playRanger() ) ;
13169: LD_STRING playRanger()
13171: PPUSH
13172: CALL_OW 559
// p := 0 ;
13176: LD_ADDR_VAR 0 2
13180: PUSH
13181: LD_INT 0
13183: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13184: LD_INT 35
13186: PPUSH
13187: CALL_OW 67
// p := p + 1 ;
13191: LD_ADDR_VAR 0 2
13195: PUSH
13196: LD_VAR 0 2
13200: PUSH
13201: LD_INT 1
13203: PLUS
13204: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13205: LD_VAR 0 3
13209: PPUSH
13210: CALL_OW 256
13214: PUSH
13215: LD_INT 1000
13217: LESS
13218: IFFALSE 13232
// SetLives ( un , 1000 ) ;
13220: LD_VAR 0 3
13224: PPUSH
13225: LD_INT 1000
13227: PPUSH
13228: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13232: LD_VAR 0 3
13236: PPUSH
13237: LD_INT 81
13239: PUSH
13240: LD_OWVAR 2
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: PUSH
13249: LD_INT 91
13251: PUSH
13252: LD_VAR 0 3
13256: PUSH
13257: LD_INT 30
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: LIST
13264: PUSH
13265: EMPTY
13266: LIST
13267: LIST
13268: PPUSH
13269: CALL_OW 69
13273: PPUSH
13274: LD_VAR 0 3
13278: PPUSH
13279: CALL_OW 74
13283: PPUSH
13284: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
13288: LD_VAR 0 2
13292: PUSH
13293: LD_INT 80
13295: GREATER
13296: PUSH
13297: LD_VAR 0 3
13301: PPUSH
13302: CALL_OW 301
13306: OR
13307: IFFALSE 13184
// if un then
13309: LD_VAR 0 3
13313: IFFALSE 13324
// RemoveUnit ( un ) ;
13315: LD_VAR 0 3
13319: PPUSH
13320: CALL_OW 64
// end ;
13324: PPOPN 3
13326: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
13327: LD_EXP 55
13331: IFFALSE 13447
13333: GO 13335
13335: DISABLE
13336: LD_INT 0
13338: PPUSH
13339: PPUSH
13340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13341: LD_ADDR_VAR 0 2
13345: PUSH
13346: LD_INT 81
13348: PUSH
13349: LD_OWVAR 2
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PUSH
13358: LD_INT 21
13360: PUSH
13361: LD_INT 1
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PPUSH
13372: CALL_OW 69
13376: ST_TO_ADDR
// ToLua ( playComputer() ) ;
13377: LD_STRING playComputer()
13379: PPUSH
13380: CALL_OW 559
// if not tmp then
13384: LD_VAR 0 2
13388: NOT
13389: IFFALSE 13393
// exit ;
13391: GO 13447
// for i in tmp do
13393: LD_ADDR_VAR 0 1
13397: PUSH
13398: LD_VAR 0 2
13402: PUSH
13403: FOR_IN
13404: IFFALSE 13445
// for j := 1 to 4 do
13406: LD_ADDR_VAR 0 3
13410: PUSH
13411: DOUBLE
13412: LD_INT 1
13414: DEC
13415: ST_TO_ADDR
13416: LD_INT 4
13418: PUSH
13419: FOR_TO
13420: IFFALSE 13441
// SetSkill ( i , j , 10 ) ;
13422: LD_VAR 0 1
13426: PPUSH
13427: LD_VAR 0 3
13431: PPUSH
13432: LD_INT 10
13434: PPUSH
13435: CALL_OW 237
13439: GO 13419
13441: POP
13442: POP
13443: GO 13403
13445: POP
13446: POP
// end ;
13447: PPOPN 3
13449: END
// every 0 0$1 trigger s30 do var i , tmp ;
13450: LD_EXP 56
13454: IFFALSE 13523
13456: GO 13458
13458: DISABLE
13459: LD_INT 0
13461: PPUSH
13462: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13463: LD_ADDR_VAR 0 2
13467: PUSH
13468: LD_INT 22
13470: PUSH
13471: LD_OWVAR 2
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PPUSH
13480: CALL_OW 69
13484: ST_TO_ADDR
// if not tmp then
13485: LD_VAR 0 2
13489: NOT
13490: IFFALSE 13494
// exit ;
13492: GO 13523
// for i in tmp do
13494: LD_ADDR_VAR 0 1
13498: PUSH
13499: LD_VAR 0 2
13503: PUSH
13504: FOR_IN
13505: IFFALSE 13521
// SetLives ( i , 300 ) ;
13507: LD_VAR 0 1
13511: PPUSH
13512: LD_INT 300
13514: PPUSH
13515: CALL_OW 234
13519: GO 13504
13521: POP
13522: POP
// end ;
13523: PPOPN 2
13525: END
// every 0 0$1 trigger s60 do var i , tmp ;
13526: LD_EXP 57
13530: IFFALSE 13599
13532: GO 13534
13534: DISABLE
13535: LD_INT 0
13537: PPUSH
13538: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13539: LD_ADDR_VAR 0 2
13543: PUSH
13544: LD_INT 22
13546: PUSH
13547: LD_OWVAR 2
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PPUSH
13556: CALL_OW 69
13560: ST_TO_ADDR
// if not tmp then
13561: LD_VAR 0 2
13565: NOT
13566: IFFALSE 13570
// exit ;
13568: GO 13599
// for i in tmp do
13570: LD_ADDR_VAR 0 1
13574: PUSH
13575: LD_VAR 0 2
13579: PUSH
13580: FOR_IN
13581: IFFALSE 13597
// SetLives ( i , 600 ) ;
13583: LD_VAR 0 1
13587: PPUSH
13588: LD_INT 600
13590: PPUSH
13591: CALL_OW 234
13595: GO 13580
13597: POP
13598: POP
// end ;
13599: PPOPN 2
13601: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13602: LD_INT 0
13604: PPUSH
// case cmd of 301 :
13605: LD_VAR 0 1
13609: PUSH
13610: LD_INT 301
13612: DOUBLE
13613: EQUAL
13614: IFTRUE 13618
13616: GO 13650
13618: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
13619: LD_VAR 0 6
13623: PPUSH
13624: LD_VAR 0 7
13628: PPUSH
13629: LD_VAR 0 8
13633: PPUSH
13634: LD_VAR 0 4
13638: PPUSH
13639: LD_VAR 0 5
13643: PPUSH
13644: CALL 14851 0 5
13648: GO 13771
13650: LD_INT 302
13652: DOUBLE
13653: EQUAL
13654: IFTRUE 13658
13656: GO 13695
13658: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
13659: LD_VAR 0 6
13663: PPUSH
13664: LD_VAR 0 7
13668: PPUSH
13669: LD_VAR 0 8
13673: PPUSH
13674: LD_VAR 0 9
13678: PPUSH
13679: LD_VAR 0 4
13683: PPUSH
13684: LD_VAR 0 5
13688: PPUSH
13689: CALL 14942 0 6
13693: GO 13771
13695: LD_INT 303
13697: DOUBLE
13698: EQUAL
13699: IFTRUE 13703
13701: GO 13740
13703: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
13704: LD_VAR 0 6
13708: PPUSH
13709: LD_VAR 0 7
13713: PPUSH
13714: LD_VAR 0 8
13718: PPUSH
13719: LD_VAR 0 9
13723: PPUSH
13724: LD_VAR 0 4
13728: PPUSH
13729: LD_VAR 0 5
13733: PPUSH
13734: CALL 13776 0 6
13738: GO 13771
13740: LD_INT 304
13742: DOUBLE
13743: EQUAL
13744: IFTRUE 13748
13746: GO 13770
13748: POP
// hHackTeleport ( unit , x , y ) ; end ;
13749: LD_VAR 0 2
13753: PPUSH
13754: LD_VAR 0 4
13758: PPUSH
13759: LD_VAR 0 5
13763: PPUSH
13764: CALL 15535 0 3
13768: GO 13771
13770: POP
// end ;
13771: LD_VAR 0 12
13775: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
13776: LD_INT 0
13778: PPUSH
13779: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
13780: LD_VAR 0 1
13784: PUSH
13785: LD_INT 1
13787: LESS
13788: PUSH
13789: LD_VAR 0 1
13793: PUSH
13794: LD_INT 3
13796: GREATER
13797: OR
13798: PUSH
13799: LD_VAR 0 5
13803: PPUSH
13804: LD_VAR 0 6
13808: PPUSH
13809: CALL_OW 428
13813: OR
13814: IFFALSE 13818
// exit ;
13816: GO 14538
// uc_side := your_side ;
13818: LD_ADDR_OWVAR 20
13822: PUSH
13823: LD_OWVAR 2
13827: ST_TO_ADDR
// uc_nation := nation ;
13828: LD_ADDR_OWVAR 21
13832: PUSH
13833: LD_VAR 0 1
13837: ST_TO_ADDR
// bc_level = 1 ;
13838: LD_ADDR_OWVAR 43
13842: PUSH
13843: LD_INT 1
13845: ST_TO_ADDR
// case btype of 1 :
13846: LD_VAR 0 2
13850: PUSH
13851: LD_INT 1
13853: DOUBLE
13854: EQUAL
13855: IFTRUE 13859
13857: GO 13870
13859: POP
// bc_type := b_depot ; 2 :
13860: LD_ADDR_OWVAR 42
13864: PUSH
13865: LD_INT 0
13867: ST_TO_ADDR
13868: GO 14482
13870: LD_INT 2
13872: DOUBLE
13873: EQUAL
13874: IFTRUE 13878
13876: GO 13889
13878: POP
// bc_type := b_warehouse ; 3 :
13879: LD_ADDR_OWVAR 42
13883: PUSH
13884: LD_INT 1
13886: ST_TO_ADDR
13887: GO 14482
13889: LD_INT 3
13891: DOUBLE
13892: EQUAL
13893: IFTRUE 13897
13895: GO 13908
13897: POP
// bc_type := b_lab ; 4 .. 9 :
13898: LD_ADDR_OWVAR 42
13902: PUSH
13903: LD_INT 6
13905: ST_TO_ADDR
13906: GO 14482
13908: LD_INT 4
13910: DOUBLE
13911: GREATEREQUAL
13912: IFFALSE 13920
13914: LD_INT 9
13916: DOUBLE
13917: LESSEQUAL
13918: IFTRUE 13922
13920: GO 13974
13922: POP
// begin bc_type := b_lab_half ;
13923: LD_ADDR_OWVAR 42
13927: PUSH
13928: LD_INT 7
13930: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
13931: LD_ADDR_OWVAR 44
13935: PUSH
13936: LD_INT 10
13938: PUSH
13939: LD_INT 11
13941: PUSH
13942: LD_INT 12
13944: PUSH
13945: LD_INT 15
13947: PUSH
13948: LD_INT 14
13950: PUSH
13951: LD_INT 13
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: PUSH
13962: LD_VAR 0 2
13966: PUSH
13967: LD_INT 3
13969: MINUS
13970: ARRAY
13971: ST_TO_ADDR
// end ; 10 .. 13 :
13972: GO 14482
13974: LD_INT 10
13976: DOUBLE
13977: GREATEREQUAL
13978: IFFALSE 13986
13980: LD_INT 13
13982: DOUBLE
13983: LESSEQUAL
13984: IFTRUE 13988
13986: GO 14065
13988: POP
// begin bc_type := b_lab_full ;
13989: LD_ADDR_OWVAR 42
13993: PUSH
13994: LD_INT 8
13996: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
13997: LD_ADDR_OWVAR 44
14001: PUSH
14002: LD_INT 10
14004: PUSH
14005: LD_INT 12
14007: PUSH
14008: LD_INT 14
14010: PUSH
14011: LD_INT 13
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: PUSH
14020: LD_VAR 0 2
14024: PUSH
14025: LD_INT 9
14027: MINUS
14028: ARRAY
14029: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14030: LD_ADDR_OWVAR 45
14034: PUSH
14035: LD_INT 11
14037: PUSH
14038: LD_INT 15
14040: PUSH
14041: LD_INT 12
14043: PUSH
14044: LD_INT 15
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: PUSH
14053: LD_VAR 0 2
14057: PUSH
14058: LD_INT 9
14060: MINUS
14061: ARRAY
14062: ST_TO_ADDR
// end ; 14 :
14063: GO 14482
14065: LD_INT 14
14067: DOUBLE
14068: EQUAL
14069: IFTRUE 14073
14071: GO 14084
14073: POP
// bc_type := b_workshop ; 15 :
14074: LD_ADDR_OWVAR 42
14078: PUSH
14079: LD_INT 2
14081: ST_TO_ADDR
14082: GO 14482
14084: LD_INT 15
14086: DOUBLE
14087: EQUAL
14088: IFTRUE 14092
14090: GO 14103
14092: POP
// bc_type := b_factory ; 16 :
14093: LD_ADDR_OWVAR 42
14097: PUSH
14098: LD_INT 3
14100: ST_TO_ADDR
14101: GO 14482
14103: LD_INT 16
14105: DOUBLE
14106: EQUAL
14107: IFTRUE 14111
14109: GO 14122
14111: POP
// bc_type := b_ext_gun ; 17 :
14112: LD_ADDR_OWVAR 42
14116: PUSH
14117: LD_INT 17
14119: ST_TO_ADDR
14120: GO 14482
14122: LD_INT 17
14124: DOUBLE
14125: EQUAL
14126: IFTRUE 14130
14128: GO 14158
14130: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14131: LD_ADDR_OWVAR 42
14135: PUSH
14136: LD_INT 19
14138: PUSH
14139: LD_INT 23
14141: PUSH
14142: LD_INT 19
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: LIST
14149: PUSH
14150: LD_VAR 0 1
14154: ARRAY
14155: ST_TO_ADDR
14156: GO 14482
14158: LD_INT 18
14160: DOUBLE
14161: EQUAL
14162: IFTRUE 14166
14164: GO 14177
14166: POP
// bc_type := b_ext_radar ; 19 :
14167: LD_ADDR_OWVAR 42
14171: PUSH
14172: LD_INT 20
14174: ST_TO_ADDR
14175: GO 14482
14177: LD_INT 19
14179: DOUBLE
14180: EQUAL
14181: IFTRUE 14185
14183: GO 14196
14185: POP
// bc_type := b_ext_radio ; 20 :
14186: LD_ADDR_OWVAR 42
14190: PUSH
14191: LD_INT 22
14193: ST_TO_ADDR
14194: GO 14482
14196: LD_INT 20
14198: DOUBLE
14199: EQUAL
14200: IFTRUE 14204
14202: GO 14215
14204: POP
// bc_type := b_ext_siberium ; 21 :
14205: LD_ADDR_OWVAR 42
14209: PUSH
14210: LD_INT 21
14212: ST_TO_ADDR
14213: GO 14482
14215: LD_INT 21
14217: DOUBLE
14218: EQUAL
14219: IFTRUE 14223
14221: GO 14234
14223: POP
// bc_type := b_ext_computer ; 22 :
14224: LD_ADDR_OWVAR 42
14228: PUSH
14229: LD_INT 24
14231: ST_TO_ADDR
14232: GO 14482
14234: LD_INT 22
14236: DOUBLE
14237: EQUAL
14238: IFTRUE 14242
14240: GO 14253
14242: POP
// bc_type := b_ext_track ; 23 :
14243: LD_ADDR_OWVAR 42
14247: PUSH
14248: LD_INT 16
14250: ST_TO_ADDR
14251: GO 14482
14253: LD_INT 23
14255: DOUBLE
14256: EQUAL
14257: IFTRUE 14261
14259: GO 14272
14261: POP
// bc_type := b_ext_laser ; 24 :
14262: LD_ADDR_OWVAR 42
14266: PUSH
14267: LD_INT 25
14269: ST_TO_ADDR
14270: GO 14482
14272: LD_INT 24
14274: DOUBLE
14275: EQUAL
14276: IFTRUE 14280
14278: GO 14291
14280: POP
// bc_type := b_control_tower ; 25 :
14281: LD_ADDR_OWVAR 42
14285: PUSH
14286: LD_INT 36
14288: ST_TO_ADDR
14289: GO 14482
14291: LD_INT 25
14293: DOUBLE
14294: EQUAL
14295: IFTRUE 14299
14297: GO 14310
14299: POP
// bc_type := b_breastwork ; 26 :
14300: LD_ADDR_OWVAR 42
14304: PUSH
14305: LD_INT 31
14307: ST_TO_ADDR
14308: GO 14482
14310: LD_INT 26
14312: DOUBLE
14313: EQUAL
14314: IFTRUE 14318
14316: GO 14329
14318: POP
// bc_type := b_bunker ; 27 :
14319: LD_ADDR_OWVAR 42
14323: PUSH
14324: LD_INT 32
14326: ST_TO_ADDR
14327: GO 14482
14329: LD_INT 27
14331: DOUBLE
14332: EQUAL
14333: IFTRUE 14337
14335: GO 14348
14337: POP
// bc_type := b_turret ; 28 :
14338: LD_ADDR_OWVAR 42
14342: PUSH
14343: LD_INT 33
14345: ST_TO_ADDR
14346: GO 14482
14348: LD_INT 28
14350: DOUBLE
14351: EQUAL
14352: IFTRUE 14356
14354: GO 14367
14356: POP
// bc_type := b_armoury ; 29 :
14357: LD_ADDR_OWVAR 42
14361: PUSH
14362: LD_INT 4
14364: ST_TO_ADDR
14365: GO 14482
14367: LD_INT 29
14369: DOUBLE
14370: EQUAL
14371: IFTRUE 14375
14373: GO 14386
14375: POP
// bc_type := b_barracks ; 30 :
14376: LD_ADDR_OWVAR 42
14380: PUSH
14381: LD_INT 5
14383: ST_TO_ADDR
14384: GO 14482
14386: LD_INT 30
14388: DOUBLE
14389: EQUAL
14390: IFTRUE 14394
14392: GO 14405
14394: POP
// bc_type := b_solar_power ; 31 :
14395: LD_ADDR_OWVAR 42
14399: PUSH
14400: LD_INT 27
14402: ST_TO_ADDR
14403: GO 14482
14405: LD_INT 31
14407: DOUBLE
14408: EQUAL
14409: IFTRUE 14413
14411: GO 14424
14413: POP
// bc_type := b_oil_power ; 32 :
14414: LD_ADDR_OWVAR 42
14418: PUSH
14419: LD_INT 26
14421: ST_TO_ADDR
14422: GO 14482
14424: LD_INT 32
14426: DOUBLE
14427: EQUAL
14428: IFTRUE 14432
14430: GO 14443
14432: POP
// bc_type := b_siberite_power ; 33 :
14433: LD_ADDR_OWVAR 42
14437: PUSH
14438: LD_INT 28
14440: ST_TO_ADDR
14441: GO 14482
14443: LD_INT 33
14445: DOUBLE
14446: EQUAL
14447: IFTRUE 14451
14449: GO 14462
14451: POP
// bc_type := b_oil_mine ; 34 :
14452: LD_ADDR_OWVAR 42
14456: PUSH
14457: LD_INT 29
14459: ST_TO_ADDR
14460: GO 14482
14462: LD_INT 34
14464: DOUBLE
14465: EQUAL
14466: IFTRUE 14470
14468: GO 14481
14470: POP
// bc_type := b_siberite_mine ; end ;
14471: LD_ADDR_OWVAR 42
14475: PUSH
14476: LD_INT 30
14478: ST_TO_ADDR
14479: GO 14482
14481: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
14482: LD_ADDR_VAR 0 8
14486: PUSH
14487: LD_VAR 0 5
14491: PPUSH
14492: LD_VAR 0 6
14496: PPUSH
14497: LD_VAR 0 3
14501: PPUSH
14502: CALL_OW 47
14506: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
14507: LD_OWVAR 42
14511: PUSH
14512: LD_INT 32
14514: PUSH
14515: LD_INT 33
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: IN
14522: IFFALSE 14538
// PlaceWeaponTurret ( b , weapon ) ;
14524: LD_VAR 0 8
14528: PPUSH
14529: LD_VAR 0 4
14533: PPUSH
14534: CALL_OW 431
// end ;
14538: LD_VAR 0 7
14542: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
14543: LD_INT 0
14545: PPUSH
14546: PPUSH
14547: PPUSH
14548: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14549: LD_ADDR_VAR 0 4
14553: PUSH
14554: LD_INT 22
14556: PUSH
14557: LD_OWVAR 2
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: PUSH
14566: LD_INT 2
14568: PUSH
14569: LD_INT 30
14571: PUSH
14572: LD_INT 0
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: PUSH
14579: LD_INT 30
14581: PUSH
14582: LD_INT 1
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: LIST
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: PPUSH
14598: CALL_OW 69
14602: ST_TO_ADDR
// if not tmp then
14603: LD_VAR 0 4
14607: NOT
14608: IFFALSE 14612
// exit ;
14610: GO 14671
// for i in tmp do
14612: LD_ADDR_VAR 0 2
14616: PUSH
14617: LD_VAR 0 4
14621: PUSH
14622: FOR_IN
14623: IFFALSE 14669
// for j = 1 to 3 do
14625: LD_ADDR_VAR 0 3
14629: PUSH
14630: DOUBLE
14631: LD_INT 1
14633: DEC
14634: ST_TO_ADDR
14635: LD_INT 3
14637: PUSH
14638: FOR_TO
14639: IFFALSE 14665
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14641: LD_VAR 0 2
14645: PPUSH
14646: CALL_OW 274
14650: PPUSH
14651: LD_VAR 0 3
14655: PPUSH
14656: LD_INT 99999
14658: PPUSH
14659: CALL_OW 277
14663: GO 14638
14665: POP
14666: POP
14667: GO 14622
14669: POP
14670: POP
// end ;
14671: LD_VAR 0 1
14675: RET
// export function hHackSetLevel10 ; var i , j ; begin
14676: LD_INT 0
14678: PPUSH
14679: PPUSH
14680: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14681: LD_ADDR_VAR 0 2
14685: PUSH
14686: LD_INT 21
14688: PUSH
14689: LD_INT 1
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: PPUSH
14696: CALL_OW 69
14700: PUSH
14701: FOR_IN
14702: IFFALSE 14754
// if IsSelected ( i ) then
14704: LD_VAR 0 2
14708: PPUSH
14709: CALL_OW 306
14713: IFFALSE 14752
// begin for j := 1 to 4 do
14715: LD_ADDR_VAR 0 3
14719: PUSH
14720: DOUBLE
14721: LD_INT 1
14723: DEC
14724: ST_TO_ADDR
14725: LD_INT 4
14727: PUSH
14728: FOR_TO
14729: IFFALSE 14750
// SetSkill ( i , j , 10 ) ;
14731: LD_VAR 0 2
14735: PPUSH
14736: LD_VAR 0 3
14740: PPUSH
14741: LD_INT 10
14743: PPUSH
14744: CALL_OW 237
14748: GO 14728
14750: POP
14751: POP
// end ;
14752: GO 14701
14754: POP
14755: POP
// end ;
14756: LD_VAR 0 1
14760: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
14761: LD_INT 0
14763: PPUSH
14764: PPUSH
14765: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
14766: LD_ADDR_VAR 0 2
14770: PUSH
14771: LD_INT 22
14773: PUSH
14774: LD_OWVAR 2
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PUSH
14783: LD_INT 21
14785: PUSH
14786: LD_INT 1
14788: PUSH
14789: EMPTY
14790: LIST
14791: LIST
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PPUSH
14797: CALL_OW 69
14801: PUSH
14802: FOR_IN
14803: IFFALSE 14844
// begin for j := 1 to 4 do
14805: LD_ADDR_VAR 0 3
14809: PUSH
14810: DOUBLE
14811: LD_INT 1
14813: DEC
14814: ST_TO_ADDR
14815: LD_INT 4
14817: PUSH
14818: FOR_TO
14819: IFFALSE 14840
// SetSkill ( i , j , 10 ) ;
14821: LD_VAR 0 2
14825: PPUSH
14826: LD_VAR 0 3
14830: PPUSH
14831: LD_INT 10
14833: PPUSH
14834: CALL_OW 237
14838: GO 14818
14840: POP
14841: POP
// end ;
14842: GO 14802
14844: POP
14845: POP
// end ;
14846: LD_VAR 0 1
14850: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
14851: LD_INT 0
14853: PPUSH
// uc_side := your_side ;
14854: LD_ADDR_OWVAR 20
14858: PUSH
14859: LD_OWVAR 2
14863: ST_TO_ADDR
// uc_nation := nation ;
14864: LD_ADDR_OWVAR 21
14868: PUSH
14869: LD_VAR 0 1
14873: ST_TO_ADDR
// InitHc ;
14874: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
14878: LD_INT 0
14880: PPUSH
14881: LD_VAR 0 2
14885: PPUSH
14886: LD_VAR 0 3
14890: PPUSH
14891: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
14895: LD_VAR 0 4
14899: PPUSH
14900: LD_VAR 0 5
14904: PPUSH
14905: CALL_OW 428
14909: PUSH
14910: LD_INT 0
14912: EQUAL
14913: IFFALSE 14937
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
14915: CALL_OW 44
14919: PPUSH
14920: LD_VAR 0 4
14924: PPUSH
14925: LD_VAR 0 5
14929: PPUSH
14930: LD_INT 1
14932: PPUSH
14933: CALL_OW 48
// end ;
14937: LD_VAR 0 6
14941: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
14942: LD_INT 0
14944: PPUSH
14945: PPUSH
// uc_side := your_side ;
14946: LD_ADDR_OWVAR 20
14950: PUSH
14951: LD_OWVAR 2
14955: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
14956: LD_VAR 0 1
14960: PUSH
14961: LD_INT 1
14963: PUSH
14964: LD_INT 2
14966: PUSH
14967: LD_INT 3
14969: PUSH
14970: LD_INT 4
14972: PUSH
14973: LD_INT 5
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: IN
14983: IFFALSE 14995
// uc_nation := nation_american else
14985: LD_ADDR_OWVAR 21
14989: PUSH
14990: LD_INT 1
14992: ST_TO_ADDR
14993: GO 15038
// if chassis in [ 11 , 12 , 13 , 14 ] then
14995: LD_VAR 0 1
14999: PUSH
15000: LD_INT 11
15002: PUSH
15003: LD_INT 12
15005: PUSH
15006: LD_INT 13
15008: PUSH
15009: LD_INT 14
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: IN
15018: IFFALSE 15030
// uc_nation := nation_arabian else
15020: LD_ADDR_OWVAR 21
15024: PUSH
15025: LD_INT 2
15027: ST_TO_ADDR
15028: GO 15038
// uc_nation := nation_russian ;
15030: LD_ADDR_OWVAR 21
15034: PUSH
15035: LD_INT 3
15037: ST_TO_ADDR
// vc_chassis := chassis ;
15038: LD_ADDR_OWVAR 37
15042: PUSH
15043: LD_VAR 0 1
15047: ST_TO_ADDR
// vc_engine := engine ;
15048: LD_ADDR_OWVAR 39
15052: PUSH
15053: LD_VAR 0 2
15057: ST_TO_ADDR
// vc_control := control ;
15058: LD_ADDR_OWVAR 38
15062: PUSH
15063: LD_VAR 0 3
15067: ST_TO_ADDR
// vc_weapon := weapon ;
15068: LD_ADDR_OWVAR 40
15072: PUSH
15073: LD_VAR 0 4
15077: ST_TO_ADDR
// un := CreateVehicle ;
15078: LD_ADDR_VAR 0 8
15082: PUSH
15083: CALL_OW 45
15087: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15088: LD_VAR 0 8
15092: PPUSH
15093: LD_INT 0
15095: PPUSH
15096: LD_INT 5
15098: PPUSH
15099: CALL_OW 12
15103: PPUSH
15104: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15108: LD_VAR 0 8
15112: PPUSH
15113: LD_VAR 0 5
15117: PPUSH
15118: LD_VAR 0 6
15122: PPUSH
15123: LD_INT 1
15125: PPUSH
15126: CALL_OW 48
// end ;
15130: LD_VAR 0 7
15134: RET
// export hInvincible ; every 1 do
15135: GO 15137
15137: DISABLE
// hInvincible := [ ] ;
15138: LD_ADDR_EXP 58
15142: PUSH
15143: EMPTY
15144: ST_TO_ADDR
15145: END
// every 10 do var i ;
15146: GO 15148
15148: DISABLE
15149: LD_INT 0
15151: PPUSH
// begin enable ;
15152: ENABLE
// if not hInvincible then
15153: LD_EXP 58
15157: NOT
15158: IFFALSE 15162
// exit ;
15160: GO 15206
// for i in hInvincible do
15162: LD_ADDR_VAR 0 1
15166: PUSH
15167: LD_EXP 58
15171: PUSH
15172: FOR_IN
15173: IFFALSE 15204
// if GetLives ( i ) < 1000 then
15175: LD_VAR 0 1
15179: PPUSH
15180: CALL_OW 256
15184: PUSH
15185: LD_INT 1000
15187: LESS
15188: IFFALSE 15202
// SetLives ( i , 1000 ) ;
15190: LD_VAR 0 1
15194: PPUSH
15195: LD_INT 1000
15197: PPUSH
15198: CALL_OW 234
15202: GO 15172
15204: POP
15205: POP
// end ;
15206: PPOPN 1
15208: END
// export function hHackInvincible ; var i ; begin
15209: LD_INT 0
15211: PPUSH
15212: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15213: LD_ADDR_VAR 0 2
15217: PUSH
15218: LD_INT 2
15220: PUSH
15221: LD_INT 21
15223: PUSH
15224: LD_INT 1
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: PUSH
15231: LD_INT 21
15233: PUSH
15234: LD_INT 2
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: LIST
15245: PPUSH
15246: CALL_OW 69
15250: PUSH
15251: FOR_IN
15252: IFFALSE 15313
// if IsSelected ( i ) then
15254: LD_VAR 0 2
15258: PPUSH
15259: CALL_OW 306
15263: IFFALSE 15311
// begin if i in hInvincible then
15265: LD_VAR 0 2
15269: PUSH
15270: LD_EXP 58
15274: IN
15275: IFFALSE 15295
// hInvincible := hInvincible diff i else
15277: LD_ADDR_EXP 58
15281: PUSH
15282: LD_EXP 58
15286: PUSH
15287: LD_VAR 0 2
15291: DIFF
15292: ST_TO_ADDR
15293: GO 15311
// hInvincible := hInvincible union i ;
15295: LD_ADDR_EXP 58
15299: PUSH
15300: LD_EXP 58
15304: PUSH
15305: LD_VAR 0 2
15309: UNION
15310: ST_TO_ADDR
// end ;
15311: GO 15251
15313: POP
15314: POP
// end ;
15315: LD_VAR 0 1
15319: RET
// export function hHackInvisible ; var i , j ; begin
15320: LD_INT 0
15322: PPUSH
15323: PPUSH
15324: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15325: LD_ADDR_VAR 0 2
15329: PUSH
15330: LD_INT 21
15332: PUSH
15333: LD_INT 1
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: PPUSH
15340: CALL_OW 69
15344: PUSH
15345: FOR_IN
15346: IFFALSE 15370
// if IsSelected ( i ) then
15348: LD_VAR 0 2
15352: PPUSH
15353: CALL_OW 306
15357: IFFALSE 15368
// ComForceInvisible ( i ) ;
15359: LD_VAR 0 2
15363: PPUSH
15364: CALL_OW 496
15368: GO 15345
15370: POP
15371: POP
// end ;
15372: LD_VAR 0 1
15376: RET
// export function hHackChangeYourSide ; begin
15377: LD_INT 0
15379: PPUSH
// if your_side = 8 then
15380: LD_OWVAR 2
15384: PUSH
15385: LD_INT 8
15387: EQUAL
15388: IFFALSE 15400
// your_side := 0 else
15390: LD_ADDR_OWVAR 2
15394: PUSH
15395: LD_INT 0
15397: ST_TO_ADDR
15398: GO 15414
// your_side := your_side + 1 ;
15400: LD_ADDR_OWVAR 2
15404: PUSH
15405: LD_OWVAR 2
15409: PUSH
15410: LD_INT 1
15412: PLUS
15413: ST_TO_ADDR
// end ;
15414: LD_VAR 0 1
15418: RET
// export function hHackChangeUnitSide ; var i , j ; begin
15419: LD_INT 0
15421: PPUSH
15422: PPUSH
15423: PPUSH
// for i in all_units do
15424: LD_ADDR_VAR 0 2
15428: PUSH
15429: LD_OWVAR 3
15433: PUSH
15434: FOR_IN
15435: IFFALSE 15513
// if IsSelected ( i ) then
15437: LD_VAR 0 2
15441: PPUSH
15442: CALL_OW 306
15446: IFFALSE 15511
// begin j := GetSide ( i ) ;
15448: LD_ADDR_VAR 0 3
15452: PUSH
15453: LD_VAR 0 2
15457: PPUSH
15458: CALL_OW 255
15462: ST_TO_ADDR
// if j = 8 then
15463: LD_VAR 0 3
15467: PUSH
15468: LD_INT 8
15470: EQUAL
15471: IFFALSE 15483
// j := 0 else
15473: LD_ADDR_VAR 0 3
15477: PUSH
15478: LD_INT 0
15480: ST_TO_ADDR
15481: GO 15497
// j := j + 1 ;
15483: LD_ADDR_VAR 0 3
15487: PUSH
15488: LD_VAR 0 3
15492: PUSH
15493: LD_INT 1
15495: PLUS
15496: ST_TO_ADDR
// SetSide ( i , j ) ;
15497: LD_VAR 0 2
15501: PPUSH
15502: LD_VAR 0 3
15506: PPUSH
15507: CALL_OW 235
// end ;
15511: GO 15434
15513: POP
15514: POP
// end ;
15515: LD_VAR 0 1
15519: RET
// export function hHackFog ; begin
15520: LD_INT 0
15522: PPUSH
// FogOff ( true ) ;
15523: LD_INT 1
15525: PPUSH
15526: CALL_OW 344
// end ;
15530: LD_VAR 0 1
15534: RET
// export function hHackTeleport ( unit , x , y ) ; begin
15535: LD_INT 0
15537: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
15538: LD_VAR 0 1
15542: PPUSH
15543: LD_VAR 0 2
15547: PPUSH
15548: LD_VAR 0 3
15552: PPUSH
15553: LD_INT 1
15555: PPUSH
15556: LD_INT 1
15558: PPUSH
15559: CALL_OW 483
// CenterOnXY ( x , y ) ;
15563: LD_VAR 0 2
15567: PPUSH
15568: LD_VAR 0 3
15572: PPUSH
15573: CALL_OW 84
// end ;
15577: LD_VAR 0 4
15581: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
15582: LD_INT 0
15584: PPUSH
15585: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
15586: LD_VAR 0 1
15590: NOT
15591: PUSH
15592: LD_VAR 0 2
15596: PPUSH
15597: LD_VAR 0 3
15601: PPUSH
15602: CALL_OW 488
15606: NOT
15607: OR
15608: PUSH
15609: LD_VAR 0 1
15613: PPUSH
15614: CALL_OW 266
15618: PUSH
15619: LD_INT 3
15621: NONEQUAL
15622: PUSH
15623: LD_VAR 0 1
15627: PPUSH
15628: CALL_OW 247
15632: PUSH
15633: LD_INT 1
15635: EQUAL
15636: NOT
15637: AND
15638: OR
15639: IFFALSE 15643
// exit ;
15641: GO 15792
// if GetType ( factory ) = unit_human then
15643: LD_VAR 0 1
15647: PPUSH
15648: CALL_OW 247
15652: PUSH
15653: LD_INT 1
15655: EQUAL
15656: IFFALSE 15673
// factory := IsInUnit ( factory ) ;
15658: LD_ADDR_VAR 0 1
15662: PUSH
15663: LD_VAR 0 1
15667: PPUSH
15668: CALL_OW 310
15672: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
15673: LD_VAR 0 1
15677: PPUSH
15678: CALL_OW 266
15682: PUSH
15683: LD_INT 3
15685: NONEQUAL
15686: IFFALSE 15690
// exit ;
15688: GO 15792
// if HexInfo ( x , y ) = factory then
15690: LD_VAR 0 2
15694: PPUSH
15695: LD_VAR 0 3
15699: PPUSH
15700: CALL_OW 428
15704: PUSH
15705: LD_VAR 0 1
15709: EQUAL
15710: IFFALSE 15737
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
15712: LD_ADDR_EXP 59
15716: PUSH
15717: LD_EXP 59
15721: PPUSH
15722: LD_VAR 0 1
15726: PPUSH
15727: LD_INT 0
15729: PPUSH
15730: CALL_OW 1
15734: ST_TO_ADDR
15735: GO 15788
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
15737: LD_ADDR_EXP 59
15741: PUSH
15742: LD_EXP 59
15746: PPUSH
15747: LD_VAR 0 1
15751: PPUSH
15752: LD_VAR 0 1
15756: PPUSH
15757: CALL_OW 255
15761: PUSH
15762: LD_VAR 0 1
15766: PUSH
15767: LD_VAR 0 2
15771: PUSH
15772: LD_VAR 0 3
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: PPUSH
15783: CALL_OW 1
15787: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15788: CALL 15797 0 0
// end ;
15792: LD_VAR 0 4
15796: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
15797: LD_INT 0
15799: PPUSH
15800: PPUSH
15801: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
15802: LD_STRING resetFactoryWaypoint();
15804: PPUSH
15805: CALL_OW 559
// if factoryWaypoints then
15809: LD_EXP 59
15813: IFFALSE 15939
// begin list := PrepareArray ( factoryWaypoints ) ;
15815: LD_ADDR_VAR 0 3
15819: PUSH
15820: LD_EXP 59
15824: PPUSH
15825: CALL 62736 0 1
15829: ST_TO_ADDR
// for i := 1 to list do
15830: LD_ADDR_VAR 0 2
15834: PUSH
15835: DOUBLE
15836: LD_INT 1
15838: DEC
15839: ST_TO_ADDR
15840: LD_VAR 0 3
15844: PUSH
15845: FOR_TO
15846: IFFALSE 15937
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15848: LD_STRING setFactoryWaypointXY(
15850: PUSH
15851: LD_VAR 0 3
15855: PUSH
15856: LD_VAR 0 2
15860: ARRAY
15861: PUSH
15862: LD_INT 1
15864: ARRAY
15865: STR
15866: PUSH
15867: LD_STRING ,
15869: STR
15870: PUSH
15871: LD_VAR 0 3
15875: PUSH
15876: LD_VAR 0 2
15880: ARRAY
15881: PUSH
15882: LD_INT 2
15884: ARRAY
15885: STR
15886: PUSH
15887: LD_STRING ,
15889: STR
15890: PUSH
15891: LD_VAR 0 3
15895: PUSH
15896: LD_VAR 0 2
15900: ARRAY
15901: PUSH
15902: LD_INT 3
15904: ARRAY
15905: STR
15906: PUSH
15907: LD_STRING ,
15909: STR
15910: PUSH
15911: LD_VAR 0 3
15915: PUSH
15916: LD_VAR 0 2
15920: ARRAY
15921: PUSH
15922: LD_INT 4
15924: ARRAY
15925: STR
15926: PUSH
15927: LD_STRING )
15929: STR
15930: PPUSH
15931: CALL_OW 559
15935: GO 15845
15937: POP
15938: POP
// end ; end ;
15939: LD_VAR 0 1
15943: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
15944: LD_INT 0
15946: PPUSH
// if HexInfo ( x , y ) = warehouse then
15947: LD_VAR 0 2
15951: PPUSH
15952: LD_VAR 0 3
15956: PPUSH
15957: CALL_OW 428
15961: PUSH
15962: LD_VAR 0 1
15966: EQUAL
15967: IFFALSE 15994
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
15969: LD_ADDR_EXP 60
15973: PUSH
15974: LD_EXP 60
15978: PPUSH
15979: LD_VAR 0 1
15983: PPUSH
15984: LD_INT 0
15986: PPUSH
15987: CALL_OW 1
15991: ST_TO_ADDR
15992: GO 16045
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
15994: LD_ADDR_EXP 60
15998: PUSH
15999: LD_EXP 60
16003: PPUSH
16004: LD_VAR 0 1
16008: PPUSH
16009: LD_VAR 0 1
16013: PPUSH
16014: CALL_OW 255
16018: PUSH
16019: LD_VAR 0 1
16023: PUSH
16024: LD_VAR 0 2
16028: PUSH
16029: LD_VAR 0 3
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: PPUSH
16040: CALL_OW 1
16044: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16045: CALL 16054 0 0
// end ;
16049: LD_VAR 0 4
16053: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16054: LD_INT 0
16056: PPUSH
16057: PPUSH
16058: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16059: LD_STRING resetWarehouseGatheringPoints();
16061: PPUSH
16062: CALL_OW 559
// if warehouseGatheringPoints then
16066: LD_EXP 60
16070: IFFALSE 16196
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16072: LD_ADDR_VAR 0 3
16076: PUSH
16077: LD_EXP 60
16081: PPUSH
16082: CALL 62736 0 1
16086: ST_TO_ADDR
// for i := 1 to list do
16087: LD_ADDR_VAR 0 2
16091: PUSH
16092: DOUBLE
16093: LD_INT 1
16095: DEC
16096: ST_TO_ADDR
16097: LD_VAR 0 3
16101: PUSH
16102: FOR_TO
16103: IFFALSE 16194
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16105: LD_STRING setWarehouseGatheringPointXY(
16107: PUSH
16108: LD_VAR 0 3
16112: PUSH
16113: LD_VAR 0 2
16117: ARRAY
16118: PUSH
16119: LD_INT 1
16121: ARRAY
16122: STR
16123: PUSH
16124: LD_STRING ,
16126: STR
16127: PUSH
16128: LD_VAR 0 3
16132: PUSH
16133: LD_VAR 0 2
16137: ARRAY
16138: PUSH
16139: LD_INT 2
16141: ARRAY
16142: STR
16143: PUSH
16144: LD_STRING ,
16146: STR
16147: PUSH
16148: LD_VAR 0 3
16152: PUSH
16153: LD_VAR 0 2
16157: ARRAY
16158: PUSH
16159: LD_INT 3
16161: ARRAY
16162: STR
16163: PUSH
16164: LD_STRING ,
16166: STR
16167: PUSH
16168: LD_VAR 0 3
16172: PUSH
16173: LD_VAR 0 2
16177: ARRAY
16178: PUSH
16179: LD_INT 4
16181: ARRAY
16182: STR
16183: PUSH
16184: LD_STRING )
16186: STR
16187: PPUSH
16188: CALL_OW 559
16192: GO 16102
16194: POP
16195: POP
// end ; end ;
16196: LD_VAR 0 1
16200: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
16201: LD_EXP 60
16205: IFFALSE 16892
16207: GO 16209
16209: DISABLE
16210: LD_INT 0
16212: PPUSH
16213: PPUSH
16214: PPUSH
16215: PPUSH
16216: PPUSH
16217: PPUSH
16218: PPUSH
16219: PPUSH
16220: PPUSH
// begin enable ;
16221: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
16222: LD_ADDR_VAR 0 3
16226: PUSH
16227: LD_EXP 60
16231: PPUSH
16232: CALL 62736 0 1
16236: ST_TO_ADDR
// if not list then
16237: LD_VAR 0 3
16241: NOT
16242: IFFALSE 16246
// exit ;
16244: GO 16892
// for i := 1 to list do
16246: LD_ADDR_VAR 0 1
16250: PUSH
16251: DOUBLE
16252: LD_INT 1
16254: DEC
16255: ST_TO_ADDR
16256: LD_VAR 0 3
16260: PUSH
16261: FOR_TO
16262: IFFALSE 16890
// begin depot := list [ i ] [ 2 ] ;
16264: LD_ADDR_VAR 0 8
16268: PUSH
16269: LD_VAR 0 3
16273: PUSH
16274: LD_VAR 0 1
16278: ARRAY
16279: PUSH
16280: LD_INT 2
16282: ARRAY
16283: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
16284: LD_ADDR_VAR 0 5
16288: PUSH
16289: LD_VAR 0 3
16293: PUSH
16294: LD_VAR 0 1
16298: ARRAY
16299: PUSH
16300: LD_INT 1
16302: ARRAY
16303: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
16304: LD_VAR 0 8
16308: PPUSH
16309: CALL_OW 301
16313: PUSH
16314: LD_VAR 0 5
16318: PUSH
16319: LD_VAR 0 8
16323: PPUSH
16324: CALL_OW 255
16328: NONEQUAL
16329: OR
16330: IFFALSE 16359
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
16332: LD_ADDR_EXP 60
16336: PUSH
16337: LD_EXP 60
16341: PPUSH
16342: LD_VAR 0 8
16346: PPUSH
16347: LD_INT 0
16349: PPUSH
16350: CALL_OW 1
16354: ST_TO_ADDR
// exit ;
16355: POP
16356: POP
16357: GO 16892
// end ; x := list [ i ] [ 3 ] ;
16359: LD_ADDR_VAR 0 6
16363: PUSH
16364: LD_VAR 0 3
16368: PUSH
16369: LD_VAR 0 1
16373: ARRAY
16374: PUSH
16375: LD_INT 3
16377: ARRAY
16378: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
16379: LD_ADDR_VAR 0 7
16383: PUSH
16384: LD_VAR 0 3
16388: PUSH
16389: LD_VAR 0 1
16393: ARRAY
16394: PUSH
16395: LD_INT 4
16397: ARRAY
16398: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
16399: LD_ADDR_VAR 0 9
16403: PUSH
16404: LD_VAR 0 6
16408: PPUSH
16409: LD_VAR 0 7
16413: PPUSH
16414: LD_INT 16
16416: PPUSH
16417: CALL 61320 0 3
16421: ST_TO_ADDR
// if not cratesNearbyPoint then
16422: LD_VAR 0 9
16426: NOT
16427: IFFALSE 16433
// exit ;
16429: POP
16430: POP
16431: GO 16892
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
16433: LD_ADDR_VAR 0 4
16437: PUSH
16438: LD_INT 22
16440: PUSH
16441: LD_VAR 0 5
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: PUSH
16450: LD_INT 3
16452: PUSH
16453: LD_INT 60
16455: PUSH
16456: EMPTY
16457: LIST
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: PUSH
16463: LD_INT 91
16465: PUSH
16466: LD_VAR 0 8
16470: PUSH
16471: LD_INT 6
16473: PUSH
16474: EMPTY
16475: LIST
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 2
16481: PUSH
16482: LD_INT 25
16484: PUSH
16485: LD_INT 2
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PUSH
16492: LD_INT 25
16494: PUSH
16495: LD_INT 16
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: LIST
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: PPUSH
16513: CALL_OW 69
16517: PUSH
16518: LD_VAR 0 8
16522: PPUSH
16523: CALL_OW 313
16527: PPUSH
16528: LD_INT 3
16530: PUSH
16531: LD_INT 60
16533: PUSH
16534: EMPTY
16535: LIST
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 2
16543: PUSH
16544: LD_INT 25
16546: PUSH
16547: LD_INT 2
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: PUSH
16554: LD_INT 25
16556: PUSH
16557: LD_INT 16
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: LIST
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PPUSH
16573: CALL_OW 72
16577: UNION
16578: ST_TO_ADDR
// if tmp then
16579: LD_VAR 0 4
16583: IFFALSE 16663
// begin tmp := ShrinkArray ( tmp , 3 ) ;
16585: LD_ADDR_VAR 0 4
16589: PUSH
16590: LD_VAR 0 4
16594: PPUSH
16595: LD_INT 3
16597: PPUSH
16598: CALL 59287 0 2
16602: ST_TO_ADDR
// for j in tmp do
16603: LD_ADDR_VAR 0 2
16607: PUSH
16608: LD_VAR 0 4
16612: PUSH
16613: FOR_IN
16614: IFFALSE 16657
// begin if IsInUnit ( j ) then
16616: LD_VAR 0 2
16620: PPUSH
16621: CALL_OW 310
16625: IFFALSE 16636
// ComExit ( j ) ;
16627: LD_VAR 0 2
16631: PPUSH
16632: CALL 59370 0 1
// AddComCollect ( j , x , y ) ;
16636: LD_VAR 0 2
16640: PPUSH
16641: LD_VAR 0 6
16645: PPUSH
16646: LD_VAR 0 7
16650: PPUSH
16651: CALL_OW 177
// end ;
16655: GO 16613
16657: POP
16658: POP
// exit ;
16659: POP
16660: POP
16661: GO 16892
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
16663: LD_ADDR_VAR 0 4
16667: PUSH
16668: LD_INT 22
16670: PUSH
16671: LD_VAR 0 5
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: LD_INT 91
16682: PUSH
16683: LD_VAR 0 8
16687: PUSH
16688: LD_INT 8
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: LIST
16695: PUSH
16696: LD_INT 2
16698: PUSH
16699: LD_INT 34
16701: PUSH
16702: LD_INT 12
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: PUSH
16709: LD_INT 34
16711: PUSH
16712: LD_INT 51
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: PUSH
16719: LD_INT 34
16721: PUSH
16722: LD_INT 32
16724: PUSH
16725: EMPTY
16726: LIST
16727: LIST
16728: PUSH
16729: LD_INT 34
16731: PUSH
16732: LD_EXP 73
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: LIST
16752: PPUSH
16753: CALL_OW 69
16757: ST_TO_ADDR
// if tmp then
16758: LD_VAR 0 4
16762: IFFALSE 16888
// begin for j in tmp do
16764: LD_ADDR_VAR 0 2
16768: PUSH
16769: LD_VAR 0 4
16773: PUSH
16774: FOR_IN
16775: IFFALSE 16886
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
16777: LD_VAR 0 2
16781: PPUSH
16782: CALL_OW 262
16786: PUSH
16787: LD_INT 3
16789: EQUAL
16790: PUSH
16791: LD_VAR 0 2
16795: PPUSH
16796: CALL_OW 261
16800: PUSH
16801: LD_INT 20
16803: GREATER
16804: OR
16805: PUSH
16806: LD_VAR 0 2
16810: PPUSH
16811: CALL_OW 314
16815: NOT
16816: AND
16817: PUSH
16818: LD_VAR 0 2
16822: PPUSH
16823: CALL_OW 263
16827: PUSH
16828: LD_INT 1
16830: NONEQUAL
16831: PUSH
16832: LD_VAR 0 2
16836: PPUSH
16837: CALL_OW 311
16841: OR
16842: AND
16843: IFFALSE 16884
// begin ComCollect ( j , x , y ) ;
16845: LD_VAR 0 2
16849: PPUSH
16850: LD_VAR 0 6
16854: PPUSH
16855: LD_VAR 0 7
16859: PPUSH
16860: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
16864: LD_VAR 0 2
16868: PPUSH
16869: LD_VAR 0 8
16873: PPUSH
16874: CALL_OW 172
// exit ;
16878: POP
16879: POP
16880: POP
16881: POP
16882: GO 16892
// end ;
16884: GO 16774
16886: POP
16887: POP
// end ; end ;
16888: GO 16261
16890: POP
16891: POP
// end ; end_of_file
16892: PPOPN 9
16894: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
16895: LD_INT 0
16897: PPUSH
16898: PPUSH
16899: PPUSH
16900: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
16901: LD_VAR 0 1
16905: PPUSH
16906: CALL_OW 264
16910: PUSH
16911: LD_EXP 76
16915: EQUAL
16916: IFFALSE 16988
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
16918: LD_INT 68
16920: PPUSH
16921: LD_VAR 0 1
16925: PPUSH
16926: CALL_OW 255
16930: PPUSH
16931: CALL_OW 321
16935: PUSH
16936: LD_INT 2
16938: EQUAL
16939: IFFALSE 16951
// eff := 70 else
16941: LD_ADDR_VAR 0 4
16945: PUSH
16946: LD_INT 70
16948: ST_TO_ADDR
16949: GO 16959
// eff := 30 ;
16951: LD_ADDR_VAR 0 4
16955: PUSH
16956: LD_INT 30
16958: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
16959: LD_VAR 0 1
16963: PPUSH
16964: CALL_OW 250
16968: PPUSH
16969: LD_VAR 0 1
16973: PPUSH
16974: CALL_OW 251
16978: PPUSH
16979: LD_VAR 0 4
16983: PPUSH
16984: CALL_OW 495
// end ; end ;
16988: LD_VAR 0 2
16992: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
16993: LD_INT 0
16995: PPUSH
// end ;
16996: LD_VAR 0 4
17000: RET
// export function SOS_Command ( cmd ) ; begin
17001: LD_INT 0
17003: PPUSH
// end ;
17004: LD_VAR 0 2
17008: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17009: LD_INT 0
17011: PPUSH
// end ;
17012: LD_VAR 0 6
17016: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
17017: LD_INT 0
17019: PPUSH
17020: PPUSH
// if not vehicle or not factory then
17021: LD_VAR 0 1
17025: NOT
17026: PUSH
17027: LD_VAR 0 2
17031: NOT
17032: OR
17033: IFFALSE 17037
// exit ;
17035: GO 17268
// if factoryWaypoints >= factory then
17037: LD_EXP 59
17041: PUSH
17042: LD_VAR 0 2
17046: GREATEREQUAL
17047: IFFALSE 17268
// if factoryWaypoints [ factory ] then
17049: LD_EXP 59
17053: PUSH
17054: LD_VAR 0 2
17058: ARRAY
17059: IFFALSE 17268
// begin if GetControl ( vehicle ) = control_manual then
17061: LD_VAR 0 1
17065: PPUSH
17066: CALL_OW 263
17070: PUSH
17071: LD_INT 1
17073: EQUAL
17074: IFFALSE 17155
// begin driver := IsDrivenBy ( vehicle ) ;
17076: LD_ADDR_VAR 0 4
17080: PUSH
17081: LD_VAR 0 1
17085: PPUSH
17086: CALL_OW 311
17090: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17091: LD_VAR 0 4
17095: PPUSH
17096: LD_EXP 59
17100: PUSH
17101: LD_VAR 0 2
17105: ARRAY
17106: PUSH
17107: LD_INT 3
17109: ARRAY
17110: PPUSH
17111: LD_EXP 59
17115: PUSH
17116: LD_VAR 0 2
17120: ARRAY
17121: PUSH
17122: LD_INT 4
17124: ARRAY
17125: PPUSH
17126: CALL_OW 171
// AddComExitVehicle ( driver ) ;
17130: LD_VAR 0 4
17134: PPUSH
17135: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
17139: LD_VAR 0 4
17143: PPUSH
17144: LD_VAR 0 2
17148: PPUSH
17149: CALL_OW 180
// end else
17153: GO 17268
// if GetControl ( vehicle ) = control_remote then
17155: LD_VAR 0 1
17159: PPUSH
17160: CALL_OW 263
17164: PUSH
17165: LD_INT 2
17167: EQUAL
17168: IFFALSE 17229
// begin wait ( 0 0$2 ) ;
17170: LD_INT 70
17172: PPUSH
17173: CALL_OW 67
// if Connect ( vehicle ) then
17177: LD_VAR 0 1
17181: PPUSH
17182: CALL 29698 0 1
17186: IFFALSE 17227
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17188: LD_VAR 0 1
17192: PPUSH
17193: LD_EXP 59
17197: PUSH
17198: LD_VAR 0 2
17202: ARRAY
17203: PUSH
17204: LD_INT 3
17206: ARRAY
17207: PPUSH
17208: LD_EXP 59
17212: PUSH
17213: LD_VAR 0 2
17217: ARRAY
17218: PUSH
17219: LD_INT 4
17221: ARRAY
17222: PPUSH
17223: CALL_OW 171
// end else
17227: GO 17268
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17229: LD_VAR 0 1
17233: PPUSH
17234: LD_EXP 59
17238: PUSH
17239: LD_VAR 0 2
17243: ARRAY
17244: PUSH
17245: LD_INT 3
17247: ARRAY
17248: PPUSH
17249: LD_EXP 59
17253: PUSH
17254: LD_VAR 0 2
17258: ARRAY
17259: PUSH
17260: LD_INT 4
17262: ARRAY
17263: PPUSH
17264: CALL_OW 171
// end ; end ;
17268: LD_VAR 0 3
17272: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
17273: LD_INT 0
17275: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
17276: LD_VAR 0 1
17280: PUSH
17281: LD_INT 250
17283: EQUAL
17284: PUSH
17285: LD_VAR 0 2
17289: PPUSH
17290: CALL_OW 264
17294: PUSH
17295: LD_EXP 79
17299: EQUAL
17300: AND
17301: IFFALSE 17322
// MinerPlaceMine ( unit , x , y ) ;
17303: LD_VAR 0 2
17307: PPUSH
17308: LD_VAR 0 4
17312: PPUSH
17313: LD_VAR 0 5
17317: PPUSH
17318: CALL 19721 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
17322: LD_VAR 0 1
17326: PUSH
17327: LD_INT 251
17329: EQUAL
17330: PUSH
17331: LD_VAR 0 2
17335: PPUSH
17336: CALL_OW 264
17340: PUSH
17341: LD_EXP 79
17345: EQUAL
17346: AND
17347: IFFALSE 17368
// MinerDetonateMine ( unit , x , y ) ;
17349: LD_VAR 0 2
17353: PPUSH
17354: LD_VAR 0 4
17358: PPUSH
17359: LD_VAR 0 5
17363: PPUSH
17364: CALL 19998 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
17368: LD_VAR 0 1
17372: PUSH
17373: LD_INT 252
17375: EQUAL
17376: PUSH
17377: LD_VAR 0 2
17381: PPUSH
17382: CALL_OW 264
17386: PUSH
17387: LD_EXP 79
17391: EQUAL
17392: AND
17393: IFFALSE 17414
// MinerCreateMinefield ( unit , x , y ) ;
17395: LD_VAR 0 2
17399: PPUSH
17400: LD_VAR 0 4
17404: PPUSH
17405: LD_VAR 0 5
17409: PPUSH
17410: CALL 20415 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
17414: LD_VAR 0 1
17418: PUSH
17419: LD_INT 253
17421: EQUAL
17422: PUSH
17423: LD_VAR 0 2
17427: PPUSH
17428: CALL_OW 257
17432: PUSH
17433: LD_INT 5
17435: EQUAL
17436: AND
17437: IFFALSE 17458
// ComBinocular ( unit , x , y ) ;
17439: LD_VAR 0 2
17443: PPUSH
17444: LD_VAR 0 4
17448: PPUSH
17449: LD_VAR 0 5
17453: PPUSH
17454: CALL 20786 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
17458: LD_VAR 0 1
17462: PUSH
17463: LD_INT 254
17465: EQUAL
17466: PUSH
17467: LD_VAR 0 2
17471: PPUSH
17472: CALL_OW 264
17476: PUSH
17477: LD_EXP 74
17481: EQUAL
17482: AND
17483: PUSH
17484: LD_VAR 0 3
17488: PPUSH
17489: CALL_OW 263
17493: PUSH
17494: LD_INT 3
17496: EQUAL
17497: AND
17498: IFFALSE 17514
// HackDestroyVehicle ( unit , selectedUnit ) ;
17500: LD_VAR 0 2
17504: PPUSH
17505: LD_VAR 0 3
17509: PPUSH
17510: CALL 19081 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
17514: LD_VAR 0 1
17518: PUSH
17519: LD_INT 255
17521: EQUAL
17522: PUSH
17523: LD_VAR 0 2
17527: PPUSH
17528: CALL_OW 264
17532: PUSH
17533: LD_INT 14
17535: PUSH
17536: LD_INT 53
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: IN
17543: AND
17544: PUSH
17545: LD_VAR 0 4
17549: PPUSH
17550: LD_VAR 0 5
17554: PPUSH
17555: CALL_OW 488
17559: AND
17560: IFFALSE 17584
// CutTreeXYR ( unit , x , y , 12 ) ;
17562: LD_VAR 0 2
17566: PPUSH
17567: LD_VAR 0 4
17571: PPUSH
17572: LD_VAR 0 5
17576: PPUSH
17577: LD_INT 12
17579: PPUSH
17580: CALL 17647 0 4
// if cmd = 256 then
17584: LD_VAR 0 1
17588: PUSH
17589: LD_INT 256
17591: EQUAL
17592: IFFALSE 17613
// SetFactoryWaypoint ( unit , x , y ) ;
17594: LD_VAR 0 2
17598: PPUSH
17599: LD_VAR 0 4
17603: PPUSH
17604: LD_VAR 0 5
17608: PPUSH
17609: CALL 15582 0 3
// if cmd = 257 then
17613: LD_VAR 0 1
17617: PUSH
17618: LD_INT 257
17620: EQUAL
17621: IFFALSE 17642
// SetWarehouseGatheringPoint ( unit , x , y ) ;
17623: LD_VAR 0 2
17627: PPUSH
17628: LD_VAR 0 4
17632: PPUSH
17633: LD_VAR 0 5
17637: PPUSH
17638: CALL 15944 0 3
// end ;
17642: LD_VAR 0 6
17646: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17647: LD_INT 0
17649: PPUSH
17650: PPUSH
17651: PPUSH
17652: PPUSH
17653: PPUSH
17654: PPUSH
17655: PPUSH
17656: PPUSH
17657: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
17658: LD_VAR 0 1
17662: NOT
17663: PUSH
17664: LD_VAR 0 2
17668: PPUSH
17669: LD_VAR 0 3
17673: PPUSH
17674: CALL_OW 488
17678: NOT
17679: OR
17680: PUSH
17681: LD_VAR 0 4
17685: NOT
17686: OR
17687: IFFALSE 17691
// exit ;
17689: GO 18031
// list := [ ] ;
17691: LD_ADDR_VAR 0 13
17695: PUSH
17696: EMPTY
17697: ST_TO_ADDR
// if x - r < 0 then
17698: LD_VAR 0 2
17702: PUSH
17703: LD_VAR 0 4
17707: MINUS
17708: PUSH
17709: LD_INT 0
17711: LESS
17712: IFFALSE 17724
// min_x := 0 else
17714: LD_ADDR_VAR 0 7
17718: PUSH
17719: LD_INT 0
17721: ST_TO_ADDR
17722: GO 17740
// min_x := x - r ;
17724: LD_ADDR_VAR 0 7
17728: PUSH
17729: LD_VAR 0 2
17733: PUSH
17734: LD_VAR 0 4
17738: MINUS
17739: ST_TO_ADDR
// if y - r < 0 then
17740: LD_VAR 0 3
17744: PUSH
17745: LD_VAR 0 4
17749: MINUS
17750: PUSH
17751: LD_INT 0
17753: LESS
17754: IFFALSE 17766
// min_y := 0 else
17756: LD_ADDR_VAR 0 8
17760: PUSH
17761: LD_INT 0
17763: ST_TO_ADDR
17764: GO 17782
// min_y := y - r ;
17766: LD_ADDR_VAR 0 8
17770: PUSH
17771: LD_VAR 0 3
17775: PUSH
17776: LD_VAR 0 4
17780: MINUS
17781: ST_TO_ADDR
// max_x := x + r ;
17782: LD_ADDR_VAR 0 9
17786: PUSH
17787: LD_VAR 0 2
17791: PUSH
17792: LD_VAR 0 4
17796: PLUS
17797: ST_TO_ADDR
// max_y := y + r ;
17798: LD_ADDR_VAR 0 10
17802: PUSH
17803: LD_VAR 0 3
17807: PUSH
17808: LD_VAR 0 4
17812: PLUS
17813: ST_TO_ADDR
// for _x = min_x to max_x do
17814: LD_ADDR_VAR 0 11
17818: PUSH
17819: DOUBLE
17820: LD_VAR 0 7
17824: DEC
17825: ST_TO_ADDR
17826: LD_VAR 0 9
17830: PUSH
17831: FOR_TO
17832: IFFALSE 17949
// for _y = min_y to max_y do
17834: LD_ADDR_VAR 0 12
17838: PUSH
17839: DOUBLE
17840: LD_VAR 0 8
17844: DEC
17845: ST_TO_ADDR
17846: LD_VAR 0 10
17850: PUSH
17851: FOR_TO
17852: IFFALSE 17945
// begin if not ValidHex ( _x , _y ) then
17854: LD_VAR 0 11
17858: PPUSH
17859: LD_VAR 0 12
17863: PPUSH
17864: CALL_OW 488
17868: NOT
17869: IFFALSE 17873
// continue ;
17871: GO 17851
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17873: LD_VAR 0 11
17877: PPUSH
17878: LD_VAR 0 12
17882: PPUSH
17883: CALL_OW 351
17887: PUSH
17888: LD_VAR 0 11
17892: PPUSH
17893: LD_VAR 0 12
17897: PPUSH
17898: CALL_OW 554
17902: AND
17903: IFFALSE 17943
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17905: LD_ADDR_VAR 0 13
17909: PUSH
17910: LD_VAR 0 13
17914: PPUSH
17915: LD_VAR 0 13
17919: PUSH
17920: LD_INT 1
17922: PLUS
17923: PPUSH
17924: LD_VAR 0 11
17928: PUSH
17929: LD_VAR 0 12
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PPUSH
17938: CALL_OW 2
17942: ST_TO_ADDR
// end ;
17943: GO 17851
17945: POP
17946: POP
17947: GO 17831
17949: POP
17950: POP
// if not list then
17951: LD_VAR 0 13
17955: NOT
17956: IFFALSE 17960
// exit ;
17958: GO 18031
// for i in list do
17960: LD_ADDR_VAR 0 6
17964: PUSH
17965: LD_VAR 0 13
17969: PUSH
17970: FOR_IN
17971: IFFALSE 18029
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
17973: LD_VAR 0 1
17977: PPUSH
17978: LD_STRING M
17980: PUSH
17981: LD_VAR 0 6
17985: PUSH
17986: LD_INT 1
17988: ARRAY
17989: PUSH
17990: LD_VAR 0 6
17994: PUSH
17995: LD_INT 2
17997: ARRAY
17998: PUSH
17999: LD_INT 0
18001: PUSH
18002: LD_INT 0
18004: PUSH
18005: LD_INT 0
18007: PUSH
18008: LD_INT 0
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: PUSH
18020: EMPTY
18021: LIST
18022: PPUSH
18023: CALL_OW 447
18027: GO 17970
18029: POP
18030: POP
// end ;
18031: LD_VAR 0 5
18035: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18036: LD_EXP 62
18040: NOT
18041: IFFALSE 18091
18043: GO 18045
18045: DISABLE
// begin initHack := true ;
18046: LD_ADDR_EXP 62
18050: PUSH
18051: LD_INT 1
18053: ST_TO_ADDR
// hackTanks := [ ] ;
18054: LD_ADDR_EXP 63
18058: PUSH
18059: EMPTY
18060: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18061: LD_ADDR_EXP 64
18065: PUSH
18066: EMPTY
18067: ST_TO_ADDR
// hackLimit := 3 ;
18068: LD_ADDR_EXP 65
18072: PUSH
18073: LD_INT 3
18075: ST_TO_ADDR
// hackDist := 12 ;
18076: LD_ADDR_EXP 66
18080: PUSH
18081: LD_INT 12
18083: ST_TO_ADDR
// hackCounter := [ ] ;
18084: LD_ADDR_EXP 67
18088: PUSH
18089: EMPTY
18090: ST_TO_ADDR
// end ;
18091: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18092: LD_EXP 62
18096: PUSH
18097: LD_INT 34
18099: PUSH
18100: LD_EXP 74
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PPUSH
18109: CALL_OW 69
18113: AND
18114: IFFALSE 18369
18116: GO 18118
18118: DISABLE
18119: LD_INT 0
18121: PPUSH
18122: PPUSH
// begin enable ;
18123: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18124: LD_ADDR_VAR 0 1
18128: PUSH
18129: LD_INT 34
18131: PUSH
18132: LD_EXP 74
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PPUSH
18141: CALL_OW 69
18145: PUSH
18146: FOR_IN
18147: IFFALSE 18367
// begin if not i in hackTanks then
18149: LD_VAR 0 1
18153: PUSH
18154: LD_EXP 63
18158: IN
18159: NOT
18160: IFFALSE 18243
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18162: LD_ADDR_EXP 63
18166: PUSH
18167: LD_EXP 63
18171: PPUSH
18172: LD_EXP 63
18176: PUSH
18177: LD_INT 1
18179: PLUS
18180: PPUSH
18181: LD_VAR 0 1
18185: PPUSH
18186: CALL_OW 1
18190: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18191: LD_ADDR_EXP 64
18195: PUSH
18196: LD_EXP 64
18200: PPUSH
18201: LD_EXP 64
18205: PUSH
18206: LD_INT 1
18208: PLUS
18209: PPUSH
18210: EMPTY
18211: PPUSH
18212: CALL_OW 1
18216: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18217: LD_ADDR_EXP 67
18221: PUSH
18222: LD_EXP 67
18226: PPUSH
18227: LD_EXP 67
18231: PUSH
18232: LD_INT 1
18234: PLUS
18235: PPUSH
18236: EMPTY
18237: PPUSH
18238: CALL_OW 1
18242: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18243: LD_VAR 0 1
18247: PPUSH
18248: CALL_OW 302
18252: NOT
18253: IFFALSE 18266
// begin HackUnlinkAll ( i ) ;
18255: LD_VAR 0 1
18259: PPUSH
18260: CALL 18372 0 1
// continue ;
18264: GO 18146
// end ; HackCheckCapturedStatus ( i ) ;
18266: LD_VAR 0 1
18270: PPUSH
18271: CALL 18815 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18275: LD_ADDR_VAR 0 2
18279: PUSH
18280: LD_INT 81
18282: PUSH
18283: LD_VAR 0 1
18287: PPUSH
18288: CALL_OW 255
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: PUSH
18297: LD_INT 33
18299: PUSH
18300: LD_INT 3
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: PUSH
18307: LD_INT 91
18309: PUSH
18310: LD_VAR 0 1
18314: PUSH
18315: LD_EXP 66
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: LIST
18324: PUSH
18325: LD_INT 50
18327: PUSH
18328: EMPTY
18329: LIST
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: PPUSH
18337: CALL_OW 69
18341: ST_TO_ADDR
// if not tmp then
18342: LD_VAR 0 2
18346: NOT
18347: IFFALSE 18351
// continue ;
18349: GO 18146
// HackLink ( i , tmp ) ;
18351: LD_VAR 0 1
18355: PPUSH
18356: LD_VAR 0 2
18360: PPUSH
18361: CALL 18508 0 2
// end ;
18365: GO 18146
18367: POP
18368: POP
// end ;
18369: PPOPN 2
18371: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18372: LD_INT 0
18374: PPUSH
18375: PPUSH
18376: PPUSH
// if not hack in hackTanks then
18377: LD_VAR 0 1
18381: PUSH
18382: LD_EXP 63
18386: IN
18387: NOT
18388: IFFALSE 18392
// exit ;
18390: GO 18503
// index := GetElementIndex ( hackTanks , hack ) ;
18392: LD_ADDR_VAR 0 4
18396: PUSH
18397: LD_EXP 63
18401: PPUSH
18402: LD_VAR 0 1
18406: PPUSH
18407: CALL 26512 0 2
18411: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18412: LD_EXP 64
18416: PUSH
18417: LD_VAR 0 4
18421: ARRAY
18422: IFFALSE 18503
// begin for i in hackTanksCaptured [ index ] do
18424: LD_ADDR_VAR 0 3
18428: PUSH
18429: LD_EXP 64
18433: PUSH
18434: LD_VAR 0 4
18438: ARRAY
18439: PUSH
18440: FOR_IN
18441: IFFALSE 18467
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18443: LD_VAR 0 3
18447: PUSH
18448: LD_INT 1
18450: ARRAY
18451: PPUSH
18452: LD_VAR 0 3
18456: PUSH
18457: LD_INT 2
18459: ARRAY
18460: PPUSH
18461: CALL_OW 235
18465: GO 18440
18467: POP
18468: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18469: LD_ADDR_EXP 64
18473: PUSH
18474: LD_EXP 64
18478: PPUSH
18479: LD_VAR 0 4
18483: PPUSH
18484: EMPTY
18485: PPUSH
18486: CALL_OW 1
18490: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18491: LD_VAR 0 1
18495: PPUSH
18496: LD_INT 0
18498: PPUSH
18499: CALL_OW 505
// end ; end ;
18503: LD_VAR 0 2
18507: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18508: LD_INT 0
18510: PPUSH
18511: PPUSH
18512: PPUSH
// if not hack in hackTanks or not vehicles then
18513: LD_VAR 0 1
18517: PUSH
18518: LD_EXP 63
18522: IN
18523: NOT
18524: PUSH
18525: LD_VAR 0 2
18529: NOT
18530: OR
18531: IFFALSE 18535
// exit ;
18533: GO 18810
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18535: LD_ADDR_VAR 0 2
18539: PUSH
18540: LD_VAR 0 1
18544: PPUSH
18545: LD_VAR 0 2
18549: PPUSH
18550: LD_INT 1
18552: PPUSH
18553: LD_INT 1
18555: PPUSH
18556: CALL 27162 0 4
18560: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18561: LD_ADDR_VAR 0 5
18565: PUSH
18566: LD_EXP 63
18570: PPUSH
18571: LD_VAR 0 1
18575: PPUSH
18576: CALL 26512 0 2
18580: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18581: LD_EXP 64
18585: PUSH
18586: LD_VAR 0 5
18590: ARRAY
18591: PUSH
18592: LD_EXP 65
18596: LESS
18597: IFFALSE 18786
// begin for i := 1 to vehicles do
18599: LD_ADDR_VAR 0 4
18603: PUSH
18604: DOUBLE
18605: LD_INT 1
18607: DEC
18608: ST_TO_ADDR
18609: LD_VAR 0 2
18613: PUSH
18614: FOR_TO
18615: IFFALSE 18784
// begin if hackTanksCaptured [ index ] = hackLimit then
18617: LD_EXP 64
18621: PUSH
18622: LD_VAR 0 5
18626: ARRAY
18627: PUSH
18628: LD_EXP 65
18632: EQUAL
18633: IFFALSE 18637
// break ;
18635: GO 18784
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18637: LD_ADDR_EXP 67
18641: PUSH
18642: LD_EXP 67
18646: PPUSH
18647: LD_VAR 0 5
18651: PPUSH
18652: LD_EXP 67
18656: PUSH
18657: LD_VAR 0 5
18661: ARRAY
18662: PUSH
18663: LD_INT 1
18665: PLUS
18666: PPUSH
18667: CALL_OW 1
18671: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18672: LD_ADDR_EXP 64
18676: PUSH
18677: LD_EXP 64
18681: PPUSH
18682: LD_VAR 0 5
18686: PUSH
18687: LD_EXP 64
18691: PUSH
18692: LD_VAR 0 5
18696: ARRAY
18697: PUSH
18698: LD_INT 1
18700: PLUS
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PPUSH
18706: LD_VAR 0 2
18710: PUSH
18711: LD_VAR 0 4
18715: ARRAY
18716: PUSH
18717: LD_VAR 0 2
18721: PUSH
18722: LD_VAR 0 4
18726: ARRAY
18727: PPUSH
18728: CALL_OW 255
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PPUSH
18737: CALL 26727 0 3
18741: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
18742: LD_VAR 0 2
18746: PUSH
18747: LD_VAR 0 4
18751: ARRAY
18752: PPUSH
18753: LD_VAR 0 1
18757: PPUSH
18758: CALL_OW 255
18762: PPUSH
18763: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
18767: LD_VAR 0 2
18771: PUSH
18772: LD_VAR 0 4
18776: ARRAY
18777: PPUSH
18778: CALL_OW 141
// end ;
18782: GO 18614
18784: POP
18785: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18786: LD_VAR 0 1
18790: PPUSH
18791: LD_EXP 64
18795: PUSH
18796: LD_VAR 0 5
18800: ARRAY
18801: PUSH
18802: LD_INT 0
18804: PLUS
18805: PPUSH
18806: CALL_OW 505
// end ;
18810: LD_VAR 0 3
18814: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
18815: LD_INT 0
18817: PPUSH
18818: PPUSH
18819: PPUSH
18820: PPUSH
// if not hack in hackTanks then
18821: LD_VAR 0 1
18825: PUSH
18826: LD_EXP 63
18830: IN
18831: NOT
18832: IFFALSE 18836
// exit ;
18834: GO 19076
// index := GetElementIndex ( hackTanks , hack ) ;
18836: LD_ADDR_VAR 0 4
18840: PUSH
18841: LD_EXP 63
18845: PPUSH
18846: LD_VAR 0 1
18850: PPUSH
18851: CALL 26512 0 2
18855: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
18856: LD_ADDR_VAR 0 3
18860: PUSH
18861: DOUBLE
18862: LD_EXP 64
18866: PUSH
18867: LD_VAR 0 4
18871: ARRAY
18872: INC
18873: ST_TO_ADDR
18874: LD_INT 1
18876: PUSH
18877: FOR_DOWNTO
18878: IFFALSE 19050
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
18880: LD_ADDR_VAR 0 5
18884: PUSH
18885: LD_EXP 64
18889: PUSH
18890: LD_VAR 0 4
18894: ARRAY
18895: PUSH
18896: LD_VAR 0 3
18900: ARRAY
18901: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
18902: LD_VAR 0 5
18906: PUSH
18907: LD_INT 1
18909: ARRAY
18910: PPUSH
18911: CALL_OW 302
18915: NOT
18916: PUSH
18917: LD_VAR 0 5
18921: PUSH
18922: LD_INT 1
18924: ARRAY
18925: PPUSH
18926: CALL_OW 255
18930: PUSH
18931: LD_VAR 0 1
18935: PPUSH
18936: CALL_OW 255
18940: NONEQUAL
18941: OR
18942: IFFALSE 19048
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
18944: LD_VAR 0 5
18948: PUSH
18949: LD_INT 1
18951: ARRAY
18952: PPUSH
18953: CALL_OW 305
18957: PUSH
18958: LD_VAR 0 5
18962: PUSH
18963: LD_INT 1
18965: ARRAY
18966: PPUSH
18967: CALL_OW 255
18971: PUSH
18972: LD_VAR 0 1
18976: PPUSH
18977: CALL_OW 255
18981: EQUAL
18982: AND
18983: IFFALSE 19007
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
18985: LD_VAR 0 5
18989: PUSH
18990: LD_INT 1
18992: ARRAY
18993: PPUSH
18994: LD_VAR 0 5
18998: PUSH
18999: LD_INT 2
19001: ARRAY
19002: PPUSH
19003: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19007: LD_ADDR_EXP 64
19011: PUSH
19012: LD_EXP 64
19016: PPUSH
19017: LD_VAR 0 4
19021: PPUSH
19022: LD_EXP 64
19026: PUSH
19027: LD_VAR 0 4
19031: ARRAY
19032: PPUSH
19033: LD_VAR 0 3
19037: PPUSH
19038: CALL_OW 3
19042: PPUSH
19043: CALL_OW 1
19047: ST_TO_ADDR
// end ; end ;
19048: GO 18877
19050: POP
19051: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19052: LD_VAR 0 1
19056: PPUSH
19057: LD_EXP 64
19061: PUSH
19062: LD_VAR 0 4
19066: ARRAY
19067: PUSH
19068: LD_INT 0
19070: PLUS
19071: PPUSH
19072: CALL_OW 505
// end ;
19076: LD_VAR 0 2
19080: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19081: LD_INT 0
19083: PPUSH
19084: PPUSH
19085: PPUSH
19086: PPUSH
// if not hack in hackTanks then
19087: LD_VAR 0 1
19091: PUSH
19092: LD_EXP 63
19096: IN
19097: NOT
19098: IFFALSE 19102
// exit ;
19100: GO 19187
// index := GetElementIndex ( hackTanks , hack ) ;
19102: LD_ADDR_VAR 0 5
19106: PUSH
19107: LD_EXP 63
19111: PPUSH
19112: LD_VAR 0 1
19116: PPUSH
19117: CALL 26512 0 2
19121: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19122: LD_ADDR_VAR 0 4
19126: PUSH
19127: DOUBLE
19128: LD_INT 1
19130: DEC
19131: ST_TO_ADDR
19132: LD_EXP 64
19136: PUSH
19137: LD_VAR 0 5
19141: ARRAY
19142: PUSH
19143: FOR_TO
19144: IFFALSE 19185
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19146: LD_EXP 64
19150: PUSH
19151: LD_VAR 0 5
19155: ARRAY
19156: PUSH
19157: LD_VAR 0 4
19161: ARRAY
19162: PUSH
19163: LD_INT 1
19165: ARRAY
19166: PUSH
19167: LD_VAR 0 2
19171: EQUAL
19172: IFFALSE 19183
// KillUnit ( vehicle ) ;
19174: LD_VAR 0 2
19178: PPUSH
19179: CALL_OW 66
19183: GO 19143
19185: POP
19186: POP
// end ;
19187: LD_VAR 0 3
19191: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19192: LD_EXP 68
19196: NOT
19197: IFFALSE 19232
19199: GO 19201
19201: DISABLE
// begin initMiner := true ;
19202: LD_ADDR_EXP 68
19206: PUSH
19207: LD_INT 1
19209: ST_TO_ADDR
// minersList := [ ] ;
19210: LD_ADDR_EXP 69
19214: PUSH
19215: EMPTY
19216: ST_TO_ADDR
// minerMinesList := [ ] ;
19217: LD_ADDR_EXP 70
19221: PUSH
19222: EMPTY
19223: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
19224: LD_ADDR_EXP 71
19228: PUSH
19229: LD_INT 5
19231: ST_TO_ADDR
// end ;
19232: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
19233: LD_EXP 68
19237: PUSH
19238: LD_INT 34
19240: PUSH
19241: LD_EXP 79
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PPUSH
19250: CALL_OW 69
19254: AND
19255: IFFALSE 19718
19257: GO 19259
19259: DISABLE
19260: LD_INT 0
19262: PPUSH
19263: PPUSH
19264: PPUSH
19265: PPUSH
// begin enable ;
19266: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
19267: LD_ADDR_VAR 0 1
19271: PUSH
19272: LD_INT 34
19274: PUSH
19275: LD_EXP 79
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PPUSH
19284: CALL_OW 69
19288: PUSH
19289: FOR_IN
19290: IFFALSE 19362
// begin if not i in minersList then
19292: LD_VAR 0 1
19296: PUSH
19297: LD_EXP 69
19301: IN
19302: NOT
19303: IFFALSE 19360
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
19305: LD_ADDR_EXP 69
19309: PUSH
19310: LD_EXP 69
19314: PPUSH
19315: LD_EXP 69
19319: PUSH
19320: LD_INT 1
19322: PLUS
19323: PPUSH
19324: LD_VAR 0 1
19328: PPUSH
19329: CALL_OW 1
19333: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
19334: LD_ADDR_EXP 70
19338: PUSH
19339: LD_EXP 70
19343: PPUSH
19344: LD_EXP 70
19348: PUSH
19349: LD_INT 1
19351: PLUS
19352: PPUSH
19353: EMPTY
19354: PPUSH
19355: CALL_OW 1
19359: ST_TO_ADDR
// end end ;
19360: GO 19289
19362: POP
19363: POP
// for i := minerMinesList downto 1 do
19364: LD_ADDR_VAR 0 1
19368: PUSH
19369: DOUBLE
19370: LD_EXP 70
19374: INC
19375: ST_TO_ADDR
19376: LD_INT 1
19378: PUSH
19379: FOR_DOWNTO
19380: IFFALSE 19716
// begin if IsLive ( minersList [ i ] ) then
19382: LD_EXP 69
19386: PUSH
19387: LD_VAR 0 1
19391: ARRAY
19392: PPUSH
19393: CALL_OW 300
19397: IFFALSE 19425
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
19399: LD_EXP 69
19403: PUSH
19404: LD_VAR 0 1
19408: ARRAY
19409: PPUSH
19410: LD_EXP 70
19414: PUSH
19415: LD_VAR 0 1
19419: ARRAY
19420: PPUSH
19421: CALL_OW 505
// if not minerMinesList [ i ] then
19425: LD_EXP 70
19429: PUSH
19430: LD_VAR 0 1
19434: ARRAY
19435: NOT
19436: IFFALSE 19440
// continue ;
19438: GO 19379
// for j := minerMinesList [ i ] downto 1 do
19440: LD_ADDR_VAR 0 2
19444: PUSH
19445: DOUBLE
19446: LD_EXP 70
19450: PUSH
19451: LD_VAR 0 1
19455: ARRAY
19456: INC
19457: ST_TO_ADDR
19458: LD_INT 1
19460: PUSH
19461: FOR_DOWNTO
19462: IFFALSE 19712
// begin side := GetSide ( minersList [ i ] ) ;
19464: LD_ADDR_VAR 0 3
19468: PUSH
19469: LD_EXP 69
19473: PUSH
19474: LD_VAR 0 1
19478: ARRAY
19479: PPUSH
19480: CALL_OW 255
19484: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19485: LD_ADDR_VAR 0 4
19489: PUSH
19490: LD_EXP 70
19494: PUSH
19495: LD_VAR 0 1
19499: ARRAY
19500: PUSH
19501: LD_VAR 0 2
19505: ARRAY
19506: PUSH
19507: LD_INT 1
19509: ARRAY
19510: PPUSH
19511: LD_EXP 70
19515: PUSH
19516: LD_VAR 0 1
19520: ARRAY
19521: PUSH
19522: LD_VAR 0 2
19526: ARRAY
19527: PUSH
19528: LD_INT 2
19530: ARRAY
19531: PPUSH
19532: CALL_OW 428
19536: ST_TO_ADDR
// if not tmp then
19537: LD_VAR 0 4
19541: NOT
19542: IFFALSE 19546
// continue ;
19544: GO 19461
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19546: LD_VAR 0 4
19550: PUSH
19551: LD_INT 81
19553: PUSH
19554: LD_VAR 0 3
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PPUSH
19563: CALL_OW 69
19567: IN
19568: PUSH
19569: LD_EXP 70
19573: PUSH
19574: LD_VAR 0 1
19578: ARRAY
19579: PUSH
19580: LD_VAR 0 2
19584: ARRAY
19585: PUSH
19586: LD_INT 1
19588: ARRAY
19589: PPUSH
19590: LD_EXP 70
19594: PUSH
19595: LD_VAR 0 1
19599: ARRAY
19600: PUSH
19601: LD_VAR 0 2
19605: ARRAY
19606: PUSH
19607: LD_INT 2
19609: ARRAY
19610: PPUSH
19611: CALL_OW 458
19615: AND
19616: IFFALSE 19710
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
19618: LD_EXP 70
19622: PUSH
19623: LD_VAR 0 1
19627: ARRAY
19628: PUSH
19629: LD_VAR 0 2
19633: ARRAY
19634: PUSH
19635: LD_INT 1
19637: ARRAY
19638: PPUSH
19639: LD_EXP 70
19643: PUSH
19644: LD_VAR 0 1
19648: ARRAY
19649: PUSH
19650: LD_VAR 0 2
19654: ARRAY
19655: PUSH
19656: LD_INT 2
19658: ARRAY
19659: PPUSH
19660: LD_VAR 0 3
19664: PPUSH
19665: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
19669: LD_ADDR_EXP 70
19673: PUSH
19674: LD_EXP 70
19678: PPUSH
19679: LD_VAR 0 1
19683: PPUSH
19684: LD_EXP 70
19688: PUSH
19689: LD_VAR 0 1
19693: ARRAY
19694: PPUSH
19695: LD_VAR 0 2
19699: PPUSH
19700: CALL_OW 3
19704: PPUSH
19705: CALL_OW 1
19709: ST_TO_ADDR
// end ; end ;
19710: GO 19461
19712: POP
19713: POP
// end ;
19714: GO 19379
19716: POP
19717: POP
// end ;
19718: PPOPN 4
19720: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
19721: LD_INT 0
19723: PPUSH
19724: PPUSH
// result := false ;
19725: LD_ADDR_VAR 0 4
19729: PUSH
19730: LD_INT 0
19732: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
19733: LD_VAR 0 1
19737: PPUSH
19738: CALL_OW 264
19742: PUSH
19743: LD_EXP 79
19747: EQUAL
19748: NOT
19749: IFFALSE 19753
// exit ;
19751: GO 19993
// index := GetElementIndex ( minersList , unit ) ;
19753: LD_ADDR_VAR 0 5
19757: PUSH
19758: LD_EXP 69
19762: PPUSH
19763: LD_VAR 0 1
19767: PPUSH
19768: CALL 26512 0 2
19772: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
19773: LD_EXP 70
19777: PUSH
19778: LD_VAR 0 5
19782: ARRAY
19783: PUSH
19784: LD_EXP 71
19788: GREATEREQUAL
19789: IFFALSE 19793
// exit ;
19791: GO 19993
// ComMoveXY ( unit , x , y ) ;
19793: LD_VAR 0 1
19797: PPUSH
19798: LD_VAR 0 2
19802: PPUSH
19803: LD_VAR 0 3
19807: PPUSH
19808: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19812: LD_INT 35
19814: PPUSH
19815: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
19819: LD_VAR 0 1
19823: PPUSH
19824: LD_VAR 0 2
19828: PPUSH
19829: LD_VAR 0 3
19833: PPUSH
19834: CALL 57781 0 3
19838: NOT
19839: PUSH
19840: LD_VAR 0 1
19844: PPUSH
19845: CALL_OW 314
19849: AND
19850: IFFALSE 19854
// exit ;
19852: GO 19993
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
19854: LD_VAR 0 2
19858: PPUSH
19859: LD_VAR 0 3
19863: PPUSH
19864: CALL_OW 428
19868: PUSH
19869: LD_VAR 0 1
19873: EQUAL
19874: PUSH
19875: LD_VAR 0 1
19879: PPUSH
19880: CALL_OW 314
19884: NOT
19885: AND
19886: IFFALSE 19812
// PlaySoundXY ( x , y , PlantMine ) ;
19888: LD_VAR 0 2
19892: PPUSH
19893: LD_VAR 0 3
19897: PPUSH
19898: LD_STRING PlantMine
19900: PPUSH
19901: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
19905: LD_VAR 0 2
19909: PPUSH
19910: LD_VAR 0 3
19914: PPUSH
19915: LD_VAR 0 1
19919: PPUSH
19920: CALL_OW 255
19924: PPUSH
19925: LD_INT 0
19927: PPUSH
19928: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
19932: LD_ADDR_EXP 70
19936: PUSH
19937: LD_EXP 70
19941: PPUSH
19942: LD_VAR 0 5
19946: PUSH
19947: LD_EXP 70
19951: PUSH
19952: LD_VAR 0 5
19956: ARRAY
19957: PUSH
19958: LD_INT 1
19960: PLUS
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PPUSH
19966: LD_VAR 0 2
19970: PUSH
19971: LD_VAR 0 3
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PPUSH
19980: CALL 26727 0 3
19984: ST_TO_ADDR
// result := true ;
19985: LD_ADDR_VAR 0 4
19989: PUSH
19990: LD_INT 1
19992: ST_TO_ADDR
// end ;
19993: LD_VAR 0 4
19997: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
19998: LD_INT 0
20000: PPUSH
20001: PPUSH
20002: PPUSH
// if not unit in minersList then
20003: LD_VAR 0 1
20007: PUSH
20008: LD_EXP 69
20012: IN
20013: NOT
20014: IFFALSE 20018
// exit ;
20016: GO 20410
// index := GetElementIndex ( minersList , unit ) ;
20018: LD_ADDR_VAR 0 6
20022: PUSH
20023: LD_EXP 69
20027: PPUSH
20028: LD_VAR 0 1
20032: PPUSH
20033: CALL 26512 0 2
20037: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20038: LD_ADDR_VAR 0 5
20042: PUSH
20043: DOUBLE
20044: LD_EXP 70
20048: PUSH
20049: LD_VAR 0 6
20053: ARRAY
20054: INC
20055: ST_TO_ADDR
20056: LD_INT 1
20058: PUSH
20059: FOR_DOWNTO
20060: IFFALSE 20221
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20062: LD_EXP 70
20066: PUSH
20067: LD_VAR 0 6
20071: ARRAY
20072: PUSH
20073: LD_VAR 0 5
20077: ARRAY
20078: PUSH
20079: LD_INT 1
20081: ARRAY
20082: PUSH
20083: LD_VAR 0 2
20087: EQUAL
20088: PUSH
20089: LD_EXP 70
20093: PUSH
20094: LD_VAR 0 6
20098: ARRAY
20099: PUSH
20100: LD_VAR 0 5
20104: ARRAY
20105: PUSH
20106: LD_INT 2
20108: ARRAY
20109: PUSH
20110: LD_VAR 0 3
20114: EQUAL
20115: AND
20116: IFFALSE 20219
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20118: LD_EXP 70
20122: PUSH
20123: LD_VAR 0 6
20127: ARRAY
20128: PUSH
20129: LD_VAR 0 5
20133: ARRAY
20134: PUSH
20135: LD_INT 1
20137: ARRAY
20138: PPUSH
20139: LD_EXP 70
20143: PUSH
20144: LD_VAR 0 6
20148: ARRAY
20149: PUSH
20150: LD_VAR 0 5
20154: ARRAY
20155: PUSH
20156: LD_INT 2
20158: ARRAY
20159: PPUSH
20160: LD_VAR 0 1
20164: PPUSH
20165: CALL_OW 255
20169: PPUSH
20170: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20174: LD_ADDR_EXP 70
20178: PUSH
20179: LD_EXP 70
20183: PPUSH
20184: LD_VAR 0 6
20188: PPUSH
20189: LD_EXP 70
20193: PUSH
20194: LD_VAR 0 6
20198: ARRAY
20199: PPUSH
20200: LD_VAR 0 5
20204: PPUSH
20205: CALL_OW 3
20209: PPUSH
20210: CALL_OW 1
20214: ST_TO_ADDR
// exit ;
20215: POP
20216: POP
20217: GO 20410
// end ; end ;
20219: GO 20059
20221: POP
20222: POP
// for i := minerMinesList [ index ] downto 1 do
20223: LD_ADDR_VAR 0 5
20227: PUSH
20228: DOUBLE
20229: LD_EXP 70
20233: PUSH
20234: LD_VAR 0 6
20238: ARRAY
20239: INC
20240: ST_TO_ADDR
20241: LD_INT 1
20243: PUSH
20244: FOR_DOWNTO
20245: IFFALSE 20408
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
20247: LD_EXP 70
20251: PUSH
20252: LD_VAR 0 6
20256: ARRAY
20257: PUSH
20258: LD_VAR 0 5
20262: ARRAY
20263: PUSH
20264: LD_INT 1
20266: ARRAY
20267: PPUSH
20268: LD_EXP 70
20272: PUSH
20273: LD_VAR 0 6
20277: ARRAY
20278: PUSH
20279: LD_VAR 0 5
20283: ARRAY
20284: PUSH
20285: LD_INT 2
20287: ARRAY
20288: PPUSH
20289: LD_VAR 0 2
20293: PPUSH
20294: LD_VAR 0 3
20298: PPUSH
20299: CALL_OW 298
20303: PUSH
20304: LD_INT 6
20306: LESS
20307: IFFALSE 20406
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20309: LD_EXP 70
20313: PUSH
20314: LD_VAR 0 6
20318: ARRAY
20319: PUSH
20320: LD_VAR 0 5
20324: ARRAY
20325: PUSH
20326: LD_INT 1
20328: ARRAY
20329: PPUSH
20330: LD_EXP 70
20334: PUSH
20335: LD_VAR 0 6
20339: ARRAY
20340: PUSH
20341: LD_VAR 0 5
20345: ARRAY
20346: PUSH
20347: LD_INT 2
20349: ARRAY
20350: PPUSH
20351: LD_VAR 0 1
20355: PPUSH
20356: CALL_OW 255
20360: PPUSH
20361: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20365: LD_ADDR_EXP 70
20369: PUSH
20370: LD_EXP 70
20374: PPUSH
20375: LD_VAR 0 6
20379: PPUSH
20380: LD_EXP 70
20384: PUSH
20385: LD_VAR 0 6
20389: ARRAY
20390: PPUSH
20391: LD_VAR 0 5
20395: PPUSH
20396: CALL_OW 3
20400: PPUSH
20401: CALL_OW 1
20405: ST_TO_ADDR
// end ; end ;
20406: GO 20244
20408: POP
20409: POP
// end ;
20410: LD_VAR 0 4
20414: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20415: LD_INT 0
20417: PPUSH
20418: PPUSH
20419: PPUSH
20420: PPUSH
20421: PPUSH
20422: PPUSH
20423: PPUSH
20424: PPUSH
20425: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20426: LD_VAR 0 1
20430: PPUSH
20431: CALL_OW 264
20435: PUSH
20436: LD_EXP 79
20440: EQUAL
20441: NOT
20442: PUSH
20443: LD_VAR 0 1
20447: PUSH
20448: LD_EXP 69
20452: IN
20453: NOT
20454: OR
20455: IFFALSE 20459
// exit ;
20457: GO 20781
// index := GetElementIndex ( minersList , unit ) ;
20459: LD_ADDR_VAR 0 6
20463: PUSH
20464: LD_EXP 69
20468: PPUSH
20469: LD_VAR 0 1
20473: PPUSH
20474: CALL 26512 0 2
20478: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
20479: LD_ADDR_VAR 0 8
20483: PUSH
20484: LD_EXP 71
20488: PUSH
20489: LD_EXP 70
20493: PUSH
20494: LD_VAR 0 6
20498: ARRAY
20499: MINUS
20500: ST_TO_ADDR
// if not minesFreeAmount then
20501: LD_VAR 0 8
20505: NOT
20506: IFFALSE 20510
// exit ;
20508: GO 20781
// tmp := [ ] ;
20510: LD_ADDR_VAR 0 7
20514: PUSH
20515: EMPTY
20516: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20517: LD_ADDR_VAR 0 5
20521: PUSH
20522: DOUBLE
20523: LD_INT 1
20525: DEC
20526: ST_TO_ADDR
20527: LD_VAR 0 8
20531: PUSH
20532: FOR_TO
20533: IFFALSE 20728
// begin _d := rand ( 0 , 5 ) ;
20535: LD_ADDR_VAR 0 11
20539: PUSH
20540: LD_INT 0
20542: PPUSH
20543: LD_INT 5
20545: PPUSH
20546: CALL_OW 12
20550: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20551: LD_ADDR_VAR 0 12
20555: PUSH
20556: LD_INT 2
20558: PPUSH
20559: LD_INT 6
20561: PPUSH
20562: CALL_OW 12
20566: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
20567: LD_ADDR_VAR 0 9
20571: PUSH
20572: LD_VAR 0 2
20576: PPUSH
20577: LD_VAR 0 11
20581: PPUSH
20582: LD_VAR 0 12
20586: PPUSH
20587: CALL_OW 272
20591: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
20592: LD_ADDR_VAR 0 10
20596: PUSH
20597: LD_VAR 0 3
20601: PPUSH
20602: LD_VAR 0 11
20606: PPUSH
20607: LD_VAR 0 12
20611: PPUSH
20612: CALL_OW 273
20616: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
20617: LD_VAR 0 9
20621: PPUSH
20622: LD_VAR 0 10
20626: PPUSH
20627: CALL_OW 488
20631: PUSH
20632: LD_VAR 0 9
20636: PUSH
20637: LD_VAR 0 10
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: LD_VAR 0 7
20650: IN
20651: NOT
20652: AND
20653: PUSH
20654: LD_VAR 0 9
20658: PPUSH
20659: LD_VAR 0 10
20663: PPUSH
20664: CALL_OW 458
20668: NOT
20669: AND
20670: IFFALSE 20712
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
20672: LD_ADDR_VAR 0 7
20676: PUSH
20677: LD_VAR 0 7
20681: PPUSH
20682: LD_VAR 0 7
20686: PUSH
20687: LD_INT 1
20689: PLUS
20690: PPUSH
20691: LD_VAR 0 9
20695: PUSH
20696: LD_VAR 0 10
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: PPUSH
20705: CALL_OW 1
20709: ST_TO_ADDR
20710: GO 20726
// i := i - 1 ;
20712: LD_ADDR_VAR 0 5
20716: PUSH
20717: LD_VAR 0 5
20721: PUSH
20722: LD_INT 1
20724: MINUS
20725: ST_TO_ADDR
// end ;
20726: GO 20532
20728: POP
20729: POP
// for i in tmp do
20730: LD_ADDR_VAR 0 5
20734: PUSH
20735: LD_VAR 0 7
20739: PUSH
20740: FOR_IN
20741: IFFALSE 20779
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
20743: LD_VAR 0 1
20747: PPUSH
20748: LD_VAR 0 5
20752: PUSH
20753: LD_INT 1
20755: ARRAY
20756: PPUSH
20757: LD_VAR 0 5
20761: PUSH
20762: LD_INT 2
20764: ARRAY
20765: PPUSH
20766: CALL 19721 0 3
20770: NOT
20771: IFFALSE 20777
// exit ;
20773: POP
20774: POP
20775: GO 20781
20777: GO 20740
20779: POP
20780: POP
// end ;
20781: LD_VAR 0 4
20785: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
20786: LD_INT 0
20788: PPUSH
20789: PPUSH
20790: PPUSH
20791: PPUSH
20792: PPUSH
20793: PPUSH
20794: PPUSH
// if not GetClass ( unit ) = class_sniper then
20795: LD_VAR 0 1
20799: PPUSH
20800: CALL_OW 257
20804: PUSH
20805: LD_INT 5
20807: EQUAL
20808: NOT
20809: IFFALSE 20813
// exit ;
20811: GO 21201
// dist := 8 ;
20813: LD_ADDR_VAR 0 5
20817: PUSH
20818: LD_INT 8
20820: ST_TO_ADDR
// viewRange := 12 ;
20821: LD_ADDR_VAR 0 7
20825: PUSH
20826: LD_INT 12
20828: ST_TO_ADDR
// side := GetSide ( unit ) ;
20829: LD_ADDR_VAR 0 6
20833: PUSH
20834: LD_VAR 0 1
20838: PPUSH
20839: CALL_OW 255
20843: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
20844: LD_INT 61
20846: PPUSH
20847: LD_VAR 0 6
20851: PPUSH
20852: CALL_OW 321
20856: PUSH
20857: LD_INT 2
20859: EQUAL
20860: IFFALSE 20870
// viewRange := 16 ;
20862: LD_ADDR_VAR 0 7
20866: PUSH
20867: LD_INT 16
20869: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
20870: LD_VAR 0 1
20874: PPUSH
20875: LD_VAR 0 2
20879: PPUSH
20880: LD_VAR 0 3
20884: PPUSH
20885: CALL_OW 297
20889: PUSH
20890: LD_VAR 0 5
20894: GREATER
20895: IFFALSE 20974
// begin ComMoveXY ( unit , x , y ) ;
20897: LD_VAR 0 1
20901: PPUSH
20902: LD_VAR 0 2
20906: PPUSH
20907: LD_VAR 0 3
20911: PPUSH
20912: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20916: LD_INT 35
20918: PPUSH
20919: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
20923: LD_VAR 0 1
20927: PPUSH
20928: LD_VAR 0 2
20932: PPUSH
20933: LD_VAR 0 3
20937: PPUSH
20938: CALL 57781 0 3
20942: NOT
20943: IFFALSE 20947
// exit ;
20945: GO 21201
// until GetDistUnitXY ( unit , x , y ) < dist ;
20947: LD_VAR 0 1
20951: PPUSH
20952: LD_VAR 0 2
20956: PPUSH
20957: LD_VAR 0 3
20961: PPUSH
20962: CALL_OW 297
20966: PUSH
20967: LD_VAR 0 5
20971: LESS
20972: IFFALSE 20916
// end ; ComTurnXY ( unit , x , y ) ;
20974: LD_VAR 0 1
20978: PPUSH
20979: LD_VAR 0 2
20983: PPUSH
20984: LD_VAR 0 3
20988: PPUSH
20989: CALL_OW 118
// wait ( 5 ) ;
20993: LD_INT 5
20995: PPUSH
20996: CALL_OW 67
// _d := GetDir ( unit ) ;
21000: LD_ADDR_VAR 0 10
21004: PUSH
21005: LD_VAR 0 1
21009: PPUSH
21010: CALL_OW 254
21014: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21015: LD_ADDR_VAR 0 8
21019: PUSH
21020: LD_VAR 0 1
21024: PPUSH
21025: CALL_OW 250
21029: PPUSH
21030: LD_VAR 0 10
21034: PPUSH
21035: LD_VAR 0 5
21039: PPUSH
21040: CALL_OW 272
21044: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21045: LD_ADDR_VAR 0 9
21049: PUSH
21050: LD_VAR 0 1
21054: PPUSH
21055: CALL_OW 251
21059: PPUSH
21060: LD_VAR 0 10
21064: PPUSH
21065: LD_VAR 0 5
21069: PPUSH
21070: CALL_OW 273
21074: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21075: LD_VAR 0 8
21079: PPUSH
21080: LD_VAR 0 9
21084: PPUSH
21085: CALL_OW 488
21089: NOT
21090: IFFALSE 21094
// exit ;
21092: GO 21201
// ComAnimCustom ( unit , 1 ) ;
21094: LD_VAR 0 1
21098: PPUSH
21099: LD_INT 1
21101: PPUSH
21102: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21106: LD_VAR 0 8
21110: PPUSH
21111: LD_VAR 0 9
21115: PPUSH
21116: LD_VAR 0 6
21120: PPUSH
21121: LD_VAR 0 7
21125: PPUSH
21126: CALL_OW 330
// repeat wait ( 1 ) ;
21130: LD_INT 1
21132: PPUSH
21133: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
21137: LD_VAR 0 1
21141: PPUSH
21142: CALL_OW 316
21146: PUSH
21147: LD_VAR 0 1
21151: PPUSH
21152: CALL_OW 314
21156: OR
21157: PUSH
21158: LD_VAR 0 1
21162: PPUSH
21163: CALL_OW 302
21167: NOT
21168: OR
21169: PUSH
21170: LD_VAR 0 1
21174: PPUSH
21175: CALL_OW 301
21179: OR
21180: IFFALSE 21130
// RemoveSeeing ( _x , _y , side ) ;
21182: LD_VAR 0 8
21186: PPUSH
21187: LD_VAR 0 9
21191: PPUSH
21192: LD_VAR 0 6
21196: PPUSH
21197: CALL_OW 331
// end ; end_of_file
21201: LD_VAR 0 4
21205: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
21206: LD_VAR 0 1
21210: PPUSH
21211: LD_VAR 0 2
21215: PPUSH
21216: LD_VAR 0 3
21220: PPUSH
21221: LD_VAR 0 4
21225: PPUSH
21226: LD_VAR 0 5
21230: PPUSH
21231: LD_VAR 0 6
21235: PPUSH
21236: CALL 1295 0 6
// end ;
21240: PPOPN 6
21242: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
21243: LD_INT 0
21245: PPUSH
// begin if not units then
21246: LD_VAR 0 1
21250: NOT
21251: IFFALSE 21255
// exit ;
21253: GO 21255
// end ;
21255: PPOPN 7
21257: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
21258: CALL 1266 0 0
// end ; end_of_file
21262: PPOPN 1
21264: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
21265: LD_VAR 0 1
21269: PUSH
21270: LD_INT 200
21272: DOUBLE
21273: GREATEREQUAL
21274: IFFALSE 21282
21276: LD_INT 299
21278: DOUBLE
21279: LESSEQUAL
21280: IFTRUE 21284
21282: GO 21316
21284: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
21285: LD_VAR 0 1
21289: PPUSH
21290: LD_VAR 0 2
21294: PPUSH
21295: LD_VAR 0 3
21299: PPUSH
21300: LD_VAR 0 4
21304: PPUSH
21305: LD_VAR 0 5
21309: PPUSH
21310: CALL 17273 0 5
21314: GO 21393
21316: LD_INT 300
21318: DOUBLE
21319: GREATEREQUAL
21320: IFFALSE 21328
21322: LD_INT 399
21324: DOUBLE
21325: LESSEQUAL
21326: IFTRUE 21330
21328: GO 21392
21330: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
21331: LD_VAR 0 1
21335: PPUSH
21336: LD_VAR 0 2
21340: PPUSH
21341: LD_VAR 0 3
21345: PPUSH
21346: LD_VAR 0 4
21350: PPUSH
21351: LD_VAR 0 5
21355: PPUSH
21356: LD_VAR 0 6
21360: PPUSH
21361: LD_VAR 0 7
21365: PPUSH
21366: LD_VAR 0 8
21370: PPUSH
21371: LD_VAR 0 9
21375: PPUSH
21376: LD_VAR 0 10
21380: PPUSH
21381: LD_VAR 0 11
21385: PPUSH
21386: CALL 13602 0 11
21390: GO 21393
21392: POP
// end ;
21393: PPOPN 11
21395: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
21396: LD_VAR 0 1
21400: PPUSH
21401: LD_VAR 0 2
21405: PPUSH
21406: LD_VAR 0 3
21410: PPUSH
21411: LD_VAR 0 4
21415: PPUSH
21416: LD_VAR 0 5
21420: PPUSH
21421: CALL 17009 0 5
// end ; end_of_file
21425: PPOPN 5
21427: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
21428: LD_INT 0
21430: PPUSH
// ar_miner := 81 ;
21431: LD_ADDR_EXP 79
21435: PUSH
21436: LD_INT 81
21438: ST_TO_ADDR
// ar_crane := 88 ;
21439: LD_ADDR_EXP 78
21443: PUSH
21444: LD_INT 88
21446: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
21447: LD_ADDR_EXP 73
21451: PUSH
21452: LD_INT 89
21454: ST_TO_ADDR
// us_hack := 99 ;
21455: LD_ADDR_EXP 74
21459: PUSH
21460: LD_INT 99
21462: ST_TO_ADDR
// us_artillery := 97 ;
21463: LD_ADDR_EXP 75
21467: PUSH
21468: LD_INT 97
21470: ST_TO_ADDR
// ar_bio_bomb := 91 ;
21471: LD_ADDR_EXP 76
21475: PUSH
21476: LD_INT 91
21478: ST_TO_ADDR
// ar_mortar := 92 ;
21479: LD_ADDR_EXP 77
21483: PUSH
21484: LD_INT 92
21486: ST_TO_ADDR
// ru_flamethrower := 93 ;
21487: LD_ADDR_EXP 80
21491: PUSH
21492: LD_INT 93
21494: ST_TO_ADDR
// ru_radar := 98 ;
21495: LD_ADDR_EXP 72
21499: PUSH
21500: LD_INT 98
21502: ST_TO_ADDR
// tech_Artillery := 80 ;
21503: LD_ADDR_EXP 81
21507: PUSH
21508: LD_INT 80
21510: ST_TO_ADDR
// tech_RadMat := 81 ;
21511: LD_ADDR_EXP 82
21515: PUSH
21516: LD_INT 81
21518: ST_TO_ADDR
// tech_BasicTools := 82 ;
21519: LD_ADDR_EXP 83
21523: PUSH
21524: LD_INT 82
21526: ST_TO_ADDR
// tech_Cargo := 83 ;
21527: LD_ADDR_EXP 84
21531: PUSH
21532: LD_INT 83
21534: ST_TO_ADDR
// tech_Track := 84 ;
21535: LD_ADDR_EXP 85
21539: PUSH
21540: LD_INT 84
21542: ST_TO_ADDR
// tech_Crane := 85 ;
21543: LD_ADDR_EXP 86
21547: PUSH
21548: LD_INT 85
21550: ST_TO_ADDR
// tech_Bulldozer := 86 ;
21551: LD_ADDR_EXP 87
21555: PUSH
21556: LD_INT 86
21558: ST_TO_ADDR
// tech_Hovercraft := 87 ;
21559: LD_ADDR_EXP 88
21563: PUSH
21564: LD_INT 87
21566: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
21567: LD_ADDR_EXP 89
21571: PUSH
21572: LD_INT 88
21574: ST_TO_ADDR
// end ;
21575: LD_VAR 0 1
21579: RET
// every 1 do
21580: GO 21582
21582: DISABLE
// InitGlobalVariables ; end_of_file
21583: CALL 21428 0 0
21587: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21588: LD_INT 0
21590: PPUSH
21591: PPUSH
// if exist_mode then
21592: LD_VAR 0 2
21596: IFFALSE 21621
// unit := CreateCharacter ( prefix & ident ) else
21598: LD_ADDR_VAR 0 5
21602: PUSH
21603: LD_VAR 0 3
21607: PUSH
21608: LD_VAR 0 1
21612: STR
21613: PPUSH
21614: CALL_OW 34
21618: ST_TO_ADDR
21619: GO 21636
// unit := NewCharacter ( ident ) ;
21621: LD_ADDR_VAR 0 5
21625: PUSH
21626: LD_VAR 0 1
21630: PPUSH
21631: CALL_OW 25
21635: ST_TO_ADDR
// result := unit ;
21636: LD_ADDR_VAR 0 4
21640: PUSH
21641: LD_VAR 0 5
21645: ST_TO_ADDR
// end ;
21646: LD_VAR 0 4
21650: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21651: LD_INT 0
21653: PPUSH
21654: PPUSH
// if not side or not nation then
21655: LD_VAR 0 1
21659: NOT
21660: PUSH
21661: LD_VAR 0 2
21665: NOT
21666: OR
21667: IFFALSE 21671
// exit ;
21669: GO 22439
// case nation of nation_american :
21671: LD_VAR 0 2
21675: PUSH
21676: LD_INT 1
21678: DOUBLE
21679: EQUAL
21680: IFTRUE 21684
21682: GO 21898
21684: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21685: LD_ADDR_VAR 0 4
21689: PUSH
21690: LD_INT 35
21692: PUSH
21693: LD_INT 45
21695: PUSH
21696: LD_INT 46
21698: PUSH
21699: LD_INT 47
21701: PUSH
21702: LD_INT 82
21704: PUSH
21705: LD_INT 83
21707: PUSH
21708: LD_INT 84
21710: PUSH
21711: LD_INT 85
21713: PUSH
21714: LD_INT 86
21716: PUSH
21717: LD_INT 1
21719: PUSH
21720: LD_INT 2
21722: PUSH
21723: LD_INT 6
21725: PUSH
21726: LD_INT 15
21728: PUSH
21729: LD_INT 16
21731: PUSH
21732: LD_INT 7
21734: PUSH
21735: LD_INT 12
21737: PUSH
21738: LD_INT 13
21740: PUSH
21741: LD_INT 10
21743: PUSH
21744: LD_INT 14
21746: PUSH
21747: LD_INT 20
21749: PUSH
21750: LD_INT 21
21752: PUSH
21753: LD_INT 22
21755: PUSH
21756: LD_INT 25
21758: PUSH
21759: LD_INT 32
21761: PUSH
21762: LD_INT 27
21764: PUSH
21765: LD_INT 36
21767: PUSH
21768: LD_INT 69
21770: PUSH
21771: LD_INT 39
21773: PUSH
21774: LD_INT 34
21776: PUSH
21777: LD_INT 40
21779: PUSH
21780: LD_INT 48
21782: PUSH
21783: LD_INT 49
21785: PUSH
21786: LD_INT 50
21788: PUSH
21789: LD_INT 51
21791: PUSH
21792: LD_INT 52
21794: PUSH
21795: LD_INT 53
21797: PUSH
21798: LD_INT 54
21800: PUSH
21801: LD_INT 55
21803: PUSH
21804: LD_INT 56
21806: PUSH
21807: LD_INT 57
21809: PUSH
21810: LD_INT 58
21812: PUSH
21813: LD_INT 59
21815: PUSH
21816: LD_INT 60
21818: PUSH
21819: LD_INT 61
21821: PUSH
21822: LD_INT 62
21824: PUSH
21825: LD_INT 80
21827: PUSH
21828: LD_INT 82
21830: PUSH
21831: LD_INT 83
21833: PUSH
21834: LD_INT 84
21836: PUSH
21837: LD_INT 85
21839: PUSH
21840: LD_INT 86
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: ST_TO_ADDR
21896: GO 22363
21898: LD_INT 2
21900: DOUBLE
21901: EQUAL
21902: IFTRUE 21906
21904: GO 22132
21906: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21907: LD_ADDR_VAR 0 4
21911: PUSH
21912: LD_INT 35
21914: PUSH
21915: LD_INT 45
21917: PUSH
21918: LD_INT 46
21920: PUSH
21921: LD_INT 47
21923: PUSH
21924: LD_INT 82
21926: PUSH
21927: LD_INT 83
21929: PUSH
21930: LD_INT 84
21932: PUSH
21933: LD_INT 85
21935: PUSH
21936: LD_INT 87
21938: PUSH
21939: LD_INT 70
21941: PUSH
21942: LD_INT 1
21944: PUSH
21945: LD_INT 11
21947: PUSH
21948: LD_INT 3
21950: PUSH
21951: LD_INT 4
21953: PUSH
21954: LD_INT 5
21956: PUSH
21957: LD_INT 6
21959: PUSH
21960: LD_INT 15
21962: PUSH
21963: LD_INT 18
21965: PUSH
21966: LD_INT 7
21968: PUSH
21969: LD_INT 17
21971: PUSH
21972: LD_INT 8
21974: PUSH
21975: LD_INT 20
21977: PUSH
21978: LD_INT 21
21980: PUSH
21981: LD_INT 22
21983: PUSH
21984: LD_INT 72
21986: PUSH
21987: LD_INT 26
21989: PUSH
21990: LD_INT 69
21992: PUSH
21993: LD_INT 39
21995: PUSH
21996: LD_INT 40
21998: PUSH
21999: LD_INT 41
22001: PUSH
22002: LD_INT 42
22004: PUSH
22005: LD_INT 43
22007: PUSH
22008: LD_INT 48
22010: PUSH
22011: LD_INT 49
22013: PUSH
22014: LD_INT 50
22016: PUSH
22017: LD_INT 51
22019: PUSH
22020: LD_INT 52
22022: PUSH
22023: LD_INT 53
22025: PUSH
22026: LD_INT 54
22028: PUSH
22029: LD_INT 55
22031: PUSH
22032: LD_INT 56
22034: PUSH
22035: LD_INT 60
22037: PUSH
22038: LD_INT 61
22040: PUSH
22041: LD_INT 62
22043: PUSH
22044: LD_INT 66
22046: PUSH
22047: LD_INT 67
22049: PUSH
22050: LD_INT 68
22052: PUSH
22053: LD_INT 81
22055: PUSH
22056: LD_INT 82
22058: PUSH
22059: LD_INT 83
22061: PUSH
22062: LD_INT 84
22064: PUSH
22065: LD_INT 85
22067: PUSH
22068: LD_INT 87
22070: PUSH
22071: LD_INT 88
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: ST_TO_ADDR
22130: GO 22363
22132: LD_INT 3
22134: DOUBLE
22135: EQUAL
22136: IFTRUE 22140
22138: GO 22362
22140: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22141: LD_ADDR_VAR 0 4
22145: PUSH
22146: LD_INT 46
22148: PUSH
22149: LD_INT 47
22151: PUSH
22152: LD_INT 1
22154: PUSH
22155: LD_INT 2
22157: PUSH
22158: LD_INT 82
22160: PUSH
22161: LD_INT 83
22163: PUSH
22164: LD_INT 84
22166: PUSH
22167: LD_INT 85
22169: PUSH
22170: LD_INT 86
22172: PUSH
22173: LD_INT 11
22175: PUSH
22176: LD_INT 9
22178: PUSH
22179: LD_INT 20
22181: PUSH
22182: LD_INT 19
22184: PUSH
22185: LD_INT 21
22187: PUSH
22188: LD_INT 24
22190: PUSH
22191: LD_INT 22
22193: PUSH
22194: LD_INT 25
22196: PUSH
22197: LD_INT 28
22199: PUSH
22200: LD_INT 29
22202: PUSH
22203: LD_INT 30
22205: PUSH
22206: LD_INT 31
22208: PUSH
22209: LD_INT 37
22211: PUSH
22212: LD_INT 38
22214: PUSH
22215: LD_INT 32
22217: PUSH
22218: LD_INT 27
22220: PUSH
22221: LD_INT 33
22223: PUSH
22224: LD_INT 69
22226: PUSH
22227: LD_INT 39
22229: PUSH
22230: LD_INT 34
22232: PUSH
22233: LD_INT 40
22235: PUSH
22236: LD_INT 71
22238: PUSH
22239: LD_INT 23
22241: PUSH
22242: LD_INT 44
22244: PUSH
22245: LD_INT 48
22247: PUSH
22248: LD_INT 49
22250: PUSH
22251: LD_INT 50
22253: PUSH
22254: LD_INT 51
22256: PUSH
22257: LD_INT 52
22259: PUSH
22260: LD_INT 53
22262: PUSH
22263: LD_INT 54
22265: PUSH
22266: LD_INT 55
22268: PUSH
22269: LD_INT 56
22271: PUSH
22272: LD_INT 57
22274: PUSH
22275: LD_INT 58
22277: PUSH
22278: LD_INT 59
22280: PUSH
22281: LD_INT 63
22283: PUSH
22284: LD_INT 64
22286: PUSH
22287: LD_INT 65
22289: PUSH
22290: LD_INT 82
22292: PUSH
22293: LD_INT 83
22295: PUSH
22296: LD_INT 84
22298: PUSH
22299: LD_INT 85
22301: PUSH
22302: LD_INT 86
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: ST_TO_ADDR
22360: GO 22363
22362: POP
// if state > - 1 and state < 3 then
22363: LD_VAR 0 3
22367: PUSH
22368: LD_INT 1
22370: NEG
22371: GREATER
22372: PUSH
22373: LD_VAR 0 3
22377: PUSH
22378: LD_INT 3
22380: LESS
22381: AND
22382: IFFALSE 22439
// for i in result do
22384: LD_ADDR_VAR 0 5
22388: PUSH
22389: LD_VAR 0 4
22393: PUSH
22394: FOR_IN
22395: IFFALSE 22437
// if GetTech ( i , side ) <> state then
22397: LD_VAR 0 5
22401: PPUSH
22402: LD_VAR 0 1
22406: PPUSH
22407: CALL_OW 321
22411: PUSH
22412: LD_VAR 0 3
22416: NONEQUAL
22417: IFFALSE 22435
// result := result diff i ;
22419: LD_ADDR_VAR 0 4
22423: PUSH
22424: LD_VAR 0 4
22428: PUSH
22429: LD_VAR 0 5
22433: DIFF
22434: ST_TO_ADDR
22435: GO 22394
22437: POP
22438: POP
// end ;
22439: LD_VAR 0 4
22443: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22444: LD_INT 0
22446: PPUSH
22447: PPUSH
22448: PPUSH
// result := true ;
22449: LD_ADDR_VAR 0 3
22453: PUSH
22454: LD_INT 1
22456: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22457: LD_ADDR_VAR 0 5
22461: PUSH
22462: LD_VAR 0 2
22466: PPUSH
22467: CALL_OW 480
22471: ST_TO_ADDR
// if not tmp then
22472: LD_VAR 0 5
22476: NOT
22477: IFFALSE 22481
// exit ;
22479: GO 22530
// for i in tmp do
22481: LD_ADDR_VAR 0 4
22485: PUSH
22486: LD_VAR 0 5
22490: PUSH
22491: FOR_IN
22492: IFFALSE 22528
// if GetTech ( i , side ) <> state_researched then
22494: LD_VAR 0 4
22498: PPUSH
22499: LD_VAR 0 1
22503: PPUSH
22504: CALL_OW 321
22508: PUSH
22509: LD_INT 2
22511: NONEQUAL
22512: IFFALSE 22526
// begin result := false ;
22514: LD_ADDR_VAR 0 3
22518: PUSH
22519: LD_INT 0
22521: ST_TO_ADDR
// exit ;
22522: POP
22523: POP
22524: GO 22530
// end ;
22526: GO 22491
22528: POP
22529: POP
// end ;
22530: LD_VAR 0 3
22534: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22535: LD_INT 0
22537: PPUSH
22538: PPUSH
22539: PPUSH
22540: PPUSH
22541: PPUSH
22542: PPUSH
22543: PPUSH
22544: PPUSH
22545: PPUSH
22546: PPUSH
22547: PPUSH
22548: PPUSH
22549: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22550: LD_VAR 0 1
22554: NOT
22555: PUSH
22556: LD_VAR 0 1
22560: PPUSH
22561: CALL_OW 257
22565: PUSH
22566: LD_INT 9
22568: NONEQUAL
22569: OR
22570: IFFALSE 22574
// exit ;
22572: GO 23147
// side := GetSide ( unit ) ;
22574: LD_ADDR_VAR 0 9
22578: PUSH
22579: LD_VAR 0 1
22583: PPUSH
22584: CALL_OW 255
22588: ST_TO_ADDR
// tech_space := tech_spacanom ;
22589: LD_ADDR_VAR 0 12
22593: PUSH
22594: LD_INT 29
22596: ST_TO_ADDR
// tech_time := tech_taurad ;
22597: LD_ADDR_VAR 0 13
22601: PUSH
22602: LD_INT 28
22604: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22605: LD_ADDR_VAR 0 11
22609: PUSH
22610: LD_VAR 0 1
22614: PPUSH
22615: CALL_OW 310
22619: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22620: LD_VAR 0 11
22624: PPUSH
22625: CALL_OW 247
22629: PUSH
22630: LD_INT 2
22632: EQUAL
22633: IFFALSE 22637
// exit ;
22635: GO 23147
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22637: LD_ADDR_VAR 0 8
22641: PUSH
22642: LD_INT 81
22644: PUSH
22645: LD_VAR 0 9
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PUSH
22654: LD_INT 3
22656: PUSH
22657: LD_INT 21
22659: PUSH
22660: LD_INT 3
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: PPUSH
22675: CALL_OW 69
22679: ST_TO_ADDR
// if not tmp then
22680: LD_VAR 0 8
22684: NOT
22685: IFFALSE 22689
// exit ;
22687: GO 23147
// if in_unit then
22689: LD_VAR 0 11
22693: IFFALSE 22717
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22695: LD_ADDR_VAR 0 10
22699: PUSH
22700: LD_VAR 0 8
22704: PPUSH
22705: LD_VAR 0 11
22709: PPUSH
22710: CALL_OW 74
22714: ST_TO_ADDR
22715: GO 22737
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22717: LD_ADDR_VAR 0 10
22721: PUSH
22722: LD_VAR 0 8
22726: PPUSH
22727: LD_VAR 0 1
22731: PPUSH
22732: CALL_OW 74
22736: ST_TO_ADDR
// if not enemy then
22737: LD_VAR 0 10
22741: NOT
22742: IFFALSE 22746
// exit ;
22744: GO 23147
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22746: LD_VAR 0 11
22750: PUSH
22751: LD_VAR 0 11
22755: PPUSH
22756: LD_VAR 0 10
22760: PPUSH
22761: CALL_OW 296
22765: PUSH
22766: LD_INT 13
22768: GREATER
22769: AND
22770: PUSH
22771: LD_VAR 0 1
22775: PPUSH
22776: LD_VAR 0 10
22780: PPUSH
22781: CALL_OW 296
22785: PUSH
22786: LD_INT 12
22788: GREATER
22789: OR
22790: IFFALSE 22794
// exit ;
22792: GO 23147
// missile := [ 1 ] ;
22794: LD_ADDR_VAR 0 14
22798: PUSH
22799: LD_INT 1
22801: PUSH
22802: EMPTY
22803: LIST
22804: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22805: LD_VAR 0 9
22809: PPUSH
22810: LD_VAR 0 12
22814: PPUSH
22815: CALL_OW 325
22819: IFFALSE 22848
// missile := Replace ( missile , missile + 1 , 2 ) ;
22821: LD_ADDR_VAR 0 14
22825: PUSH
22826: LD_VAR 0 14
22830: PPUSH
22831: LD_VAR 0 14
22835: PUSH
22836: LD_INT 1
22838: PLUS
22839: PPUSH
22840: LD_INT 2
22842: PPUSH
22843: CALL_OW 1
22847: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22848: LD_VAR 0 9
22852: PPUSH
22853: LD_VAR 0 13
22857: PPUSH
22858: CALL_OW 325
22862: PUSH
22863: LD_VAR 0 10
22867: PPUSH
22868: CALL_OW 255
22872: PPUSH
22873: LD_VAR 0 13
22877: PPUSH
22878: CALL_OW 325
22882: NOT
22883: AND
22884: IFFALSE 22913
// missile := Replace ( missile , missile + 1 , 3 ) ;
22886: LD_ADDR_VAR 0 14
22890: PUSH
22891: LD_VAR 0 14
22895: PPUSH
22896: LD_VAR 0 14
22900: PUSH
22901: LD_INT 1
22903: PLUS
22904: PPUSH
22905: LD_INT 3
22907: PPUSH
22908: CALL_OW 1
22912: ST_TO_ADDR
// if missile < 2 then
22913: LD_VAR 0 14
22917: PUSH
22918: LD_INT 2
22920: LESS
22921: IFFALSE 22925
// exit ;
22923: GO 23147
// x := GetX ( enemy ) ;
22925: LD_ADDR_VAR 0 4
22929: PUSH
22930: LD_VAR 0 10
22934: PPUSH
22935: CALL_OW 250
22939: ST_TO_ADDR
// y := GetY ( enemy ) ;
22940: LD_ADDR_VAR 0 5
22944: PUSH
22945: LD_VAR 0 10
22949: PPUSH
22950: CALL_OW 251
22954: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22955: LD_ADDR_VAR 0 6
22959: PUSH
22960: LD_VAR 0 4
22964: PUSH
22965: LD_INT 1
22967: NEG
22968: PPUSH
22969: LD_INT 1
22971: PPUSH
22972: CALL_OW 12
22976: PLUS
22977: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22978: LD_ADDR_VAR 0 7
22982: PUSH
22983: LD_VAR 0 5
22987: PUSH
22988: LD_INT 1
22990: NEG
22991: PPUSH
22992: LD_INT 1
22994: PPUSH
22995: CALL_OW 12
22999: PLUS
23000: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23001: LD_VAR 0 6
23005: PPUSH
23006: LD_VAR 0 7
23010: PPUSH
23011: CALL_OW 488
23015: NOT
23016: IFFALSE 23038
// begin _x := x ;
23018: LD_ADDR_VAR 0 6
23022: PUSH
23023: LD_VAR 0 4
23027: ST_TO_ADDR
// _y := y ;
23028: LD_ADDR_VAR 0 7
23032: PUSH
23033: LD_VAR 0 5
23037: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23038: LD_ADDR_VAR 0 3
23042: PUSH
23043: LD_INT 1
23045: PPUSH
23046: LD_VAR 0 14
23050: PPUSH
23051: CALL_OW 12
23055: ST_TO_ADDR
// case i of 1 :
23056: LD_VAR 0 3
23060: PUSH
23061: LD_INT 1
23063: DOUBLE
23064: EQUAL
23065: IFTRUE 23069
23067: GO 23086
23069: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23070: LD_VAR 0 1
23074: PPUSH
23075: LD_VAR 0 10
23079: PPUSH
23080: CALL_OW 115
23084: GO 23147
23086: LD_INT 2
23088: DOUBLE
23089: EQUAL
23090: IFTRUE 23094
23092: GO 23116
23094: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23095: LD_VAR 0 1
23099: PPUSH
23100: LD_VAR 0 6
23104: PPUSH
23105: LD_VAR 0 7
23109: PPUSH
23110: CALL_OW 153
23114: GO 23147
23116: LD_INT 3
23118: DOUBLE
23119: EQUAL
23120: IFTRUE 23124
23122: GO 23146
23124: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23125: LD_VAR 0 1
23129: PPUSH
23130: LD_VAR 0 6
23134: PPUSH
23135: LD_VAR 0 7
23139: PPUSH
23140: CALL_OW 154
23144: GO 23147
23146: POP
// end ;
23147: LD_VAR 0 2
23151: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23152: LD_INT 0
23154: PPUSH
23155: PPUSH
23156: PPUSH
23157: PPUSH
23158: PPUSH
23159: PPUSH
// if not unit or not building then
23160: LD_VAR 0 1
23164: NOT
23165: PUSH
23166: LD_VAR 0 2
23170: NOT
23171: OR
23172: IFFALSE 23176
// exit ;
23174: GO 23334
// x := GetX ( building ) ;
23176: LD_ADDR_VAR 0 5
23180: PUSH
23181: LD_VAR 0 2
23185: PPUSH
23186: CALL_OW 250
23190: ST_TO_ADDR
// y := GetY ( building ) ;
23191: LD_ADDR_VAR 0 6
23195: PUSH
23196: LD_VAR 0 2
23200: PPUSH
23201: CALL_OW 251
23205: ST_TO_ADDR
// for i = 0 to 5 do
23206: LD_ADDR_VAR 0 4
23210: PUSH
23211: DOUBLE
23212: LD_INT 0
23214: DEC
23215: ST_TO_ADDR
23216: LD_INT 5
23218: PUSH
23219: FOR_TO
23220: IFFALSE 23332
// begin _x := ShiftX ( x , i , 3 ) ;
23222: LD_ADDR_VAR 0 7
23226: PUSH
23227: LD_VAR 0 5
23231: PPUSH
23232: LD_VAR 0 4
23236: PPUSH
23237: LD_INT 3
23239: PPUSH
23240: CALL_OW 272
23244: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23245: LD_ADDR_VAR 0 8
23249: PUSH
23250: LD_VAR 0 6
23254: PPUSH
23255: LD_VAR 0 4
23259: PPUSH
23260: LD_INT 3
23262: PPUSH
23263: CALL_OW 273
23267: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23268: LD_VAR 0 7
23272: PPUSH
23273: LD_VAR 0 8
23277: PPUSH
23278: CALL_OW 488
23282: NOT
23283: IFFALSE 23287
// continue ;
23285: GO 23219
// if HexInfo ( _x , _y ) = 0 then
23287: LD_VAR 0 7
23291: PPUSH
23292: LD_VAR 0 8
23296: PPUSH
23297: CALL_OW 428
23301: PUSH
23302: LD_INT 0
23304: EQUAL
23305: IFFALSE 23330
// begin ComMoveXY ( unit , _x , _y ) ;
23307: LD_VAR 0 1
23311: PPUSH
23312: LD_VAR 0 7
23316: PPUSH
23317: LD_VAR 0 8
23321: PPUSH
23322: CALL_OW 111
// exit ;
23326: POP
23327: POP
23328: GO 23334
// end ; end ;
23330: GO 23219
23332: POP
23333: POP
// end ;
23334: LD_VAR 0 3
23338: RET
// export function ScanBase ( side , base_area ) ; begin
23339: LD_INT 0
23341: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23342: LD_ADDR_VAR 0 3
23346: PUSH
23347: LD_VAR 0 2
23351: PPUSH
23352: LD_INT 81
23354: PUSH
23355: LD_VAR 0 1
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PPUSH
23364: CALL_OW 70
23368: ST_TO_ADDR
// end ;
23369: LD_VAR 0 3
23373: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23374: LD_INT 0
23376: PPUSH
23377: PPUSH
23378: PPUSH
23379: PPUSH
// result := false ;
23380: LD_ADDR_VAR 0 2
23384: PUSH
23385: LD_INT 0
23387: ST_TO_ADDR
// side := GetSide ( unit ) ;
23388: LD_ADDR_VAR 0 3
23392: PUSH
23393: LD_VAR 0 1
23397: PPUSH
23398: CALL_OW 255
23402: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23403: LD_ADDR_VAR 0 4
23407: PUSH
23408: LD_VAR 0 1
23412: PPUSH
23413: CALL_OW 248
23417: ST_TO_ADDR
// case nat of 1 :
23418: LD_VAR 0 4
23422: PUSH
23423: LD_INT 1
23425: DOUBLE
23426: EQUAL
23427: IFTRUE 23431
23429: GO 23442
23431: POP
// tech := tech_lassight ; 2 :
23432: LD_ADDR_VAR 0 5
23436: PUSH
23437: LD_INT 12
23439: ST_TO_ADDR
23440: GO 23481
23442: LD_INT 2
23444: DOUBLE
23445: EQUAL
23446: IFTRUE 23450
23448: GO 23461
23450: POP
// tech := tech_mortar ; 3 :
23451: LD_ADDR_VAR 0 5
23455: PUSH
23456: LD_INT 41
23458: ST_TO_ADDR
23459: GO 23481
23461: LD_INT 3
23463: DOUBLE
23464: EQUAL
23465: IFTRUE 23469
23467: GO 23480
23469: POP
// tech := tech_bazooka ; end ;
23470: LD_ADDR_VAR 0 5
23474: PUSH
23475: LD_INT 44
23477: ST_TO_ADDR
23478: GO 23481
23480: POP
// if Researched ( side , tech ) then
23481: LD_VAR 0 3
23485: PPUSH
23486: LD_VAR 0 5
23490: PPUSH
23491: CALL_OW 325
23495: IFFALSE 23522
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23497: LD_ADDR_VAR 0 2
23501: PUSH
23502: LD_INT 5
23504: PUSH
23505: LD_INT 8
23507: PUSH
23508: LD_INT 9
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: LIST
23515: PUSH
23516: LD_VAR 0 4
23520: ARRAY
23521: ST_TO_ADDR
// end ;
23522: LD_VAR 0 2
23526: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23527: LD_INT 0
23529: PPUSH
23530: PPUSH
23531: PPUSH
// if not mines then
23532: LD_VAR 0 2
23536: NOT
23537: IFFALSE 23541
// exit ;
23539: GO 23685
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23541: LD_ADDR_VAR 0 5
23545: PUSH
23546: LD_INT 81
23548: PUSH
23549: LD_VAR 0 1
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PUSH
23558: LD_INT 3
23560: PUSH
23561: LD_INT 21
23563: PUSH
23564: LD_INT 3
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: PPUSH
23579: CALL_OW 69
23583: ST_TO_ADDR
// for i in mines do
23584: LD_ADDR_VAR 0 4
23588: PUSH
23589: LD_VAR 0 2
23593: PUSH
23594: FOR_IN
23595: IFFALSE 23683
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23597: LD_VAR 0 4
23601: PUSH
23602: LD_INT 1
23604: ARRAY
23605: PPUSH
23606: LD_VAR 0 4
23610: PUSH
23611: LD_INT 2
23613: ARRAY
23614: PPUSH
23615: CALL_OW 458
23619: NOT
23620: IFFALSE 23624
// continue ;
23622: GO 23594
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23624: LD_VAR 0 4
23628: PUSH
23629: LD_INT 1
23631: ARRAY
23632: PPUSH
23633: LD_VAR 0 4
23637: PUSH
23638: LD_INT 2
23640: ARRAY
23641: PPUSH
23642: CALL_OW 428
23646: PUSH
23647: LD_VAR 0 5
23651: IN
23652: IFFALSE 23681
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23654: LD_VAR 0 4
23658: PUSH
23659: LD_INT 1
23661: ARRAY
23662: PPUSH
23663: LD_VAR 0 4
23667: PUSH
23668: LD_INT 2
23670: ARRAY
23671: PPUSH
23672: LD_VAR 0 1
23676: PPUSH
23677: CALL_OW 456
// end ;
23681: GO 23594
23683: POP
23684: POP
// end ;
23685: LD_VAR 0 3
23689: RET
// export function Count ( array ) ; var i ; begin
23690: LD_INT 0
23692: PPUSH
23693: PPUSH
// result := 0 ;
23694: LD_ADDR_VAR 0 2
23698: PUSH
23699: LD_INT 0
23701: ST_TO_ADDR
// for i in array do
23702: LD_ADDR_VAR 0 3
23706: PUSH
23707: LD_VAR 0 1
23711: PUSH
23712: FOR_IN
23713: IFFALSE 23737
// if i then
23715: LD_VAR 0 3
23719: IFFALSE 23735
// result := result + 1 ;
23721: LD_ADDR_VAR 0 2
23725: PUSH
23726: LD_VAR 0 2
23730: PUSH
23731: LD_INT 1
23733: PLUS
23734: ST_TO_ADDR
23735: GO 23712
23737: POP
23738: POP
// end ;
23739: LD_VAR 0 2
23743: RET
// export function IsEmpty ( building ) ; begin
23744: LD_INT 0
23746: PPUSH
// if not building then
23747: LD_VAR 0 1
23751: NOT
23752: IFFALSE 23756
// exit ;
23754: GO 23799
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23756: LD_ADDR_VAR 0 2
23760: PUSH
23761: LD_VAR 0 1
23765: PUSH
23766: LD_INT 22
23768: PUSH
23769: LD_VAR 0 1
23773: PPUSH
23774: CALL_OW 255
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: PUSH
23783: LD_INT 58
23785: PUSH
23786: EMPTY
23787: LIST
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PPUSH
23793: CALL_OW 69
23797: IN
23798: ST_TO_ADDR
// end ;
23799: LD_VAR 0 2
23803: RET
// export function IsNotFull ( building ) ; var places ; begin
23804: LD_INT 0
23806: PPUSH
23807: PPUSH
// if not building then
23808: LD_VAR 0 1
23812: NOT
23813: IFFALSE 23817
// exit ;
23815: GO 23988
// result := false ;
23817: LD_ADDR_VAR 0 2
23821: PUSH
23822: LD_INT 0
23824: ST_TO_ADDR
// places := 0 ;
23825: LD_ADDR_VAR 0 3
23829: PUSH
23830: LD_INT 0
23832: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
23833: LD_VAR 0 1
23837: PPUSH
23838: CALL_OW 266
23842: PUSH
23843: LD_INT 0
23845: DOUBLE
23846: EQUAL
23847: IFTRUE 23905
23849: LD_INT 1
23851: DOUBLE
23852: EQUAL
23853: IFTRUE 23905
23855: LD_INT 6
23857: DOUBLE
23858: EQUAL
23859: IFTRUE 23905
23861: LD_INT 7
23863: DOUBLE
23864: EQUAL
23865: IFTRUE 23905
23867: LD_INT 8
23869: DOUBLE
23870: EQUAL
23871: IFTRUE 23905
23873: LD_INT 4
23875: DOUBLE
23876: EQUAL
23877: IFTRUE 23905
23879: LD_INT 5
23881: DOUBLE
23882: EQUAL
23883: IFTRUE 23905
23885: LD_INT 2
23887: DOUBLE
23888: EQUAL
23889: IFTRUE 23905
23891: LD_INT 3
23893: DOUBLE
23894: EQUAL
23895: IFTRUE 23905
23897: LD_INT 35
23899: DOUBLE
23900: EQUAL
23901: IFTRUE 23905
23903: GO 23916
23905: POP
// places := 6 ; b_bunker , b_breastwork :
23906: LD_ADDR_VAR 0 3
23910: PUSH
23911: LD_INT 6
23913: ST_TO_ADDR
23914: GO 23961
23916: LD_INT 32
23918: DOUBLE
23919: EQUAL
23920: IFTRUE 23930
23922: LD_INT 31
23924: DOUBLE
23925: EQUAL
23926: IFTRUE 23930
23928: GO 23941
23930: POP
// places := 1 ; b_control_tower :
23931: LD_ADDR_VAR 0 3
23935: PUSH
23936: LD_INT 1
23938: ST_TO_ADDR
23939: GO 23961
23941: LD_INT 36
23943: DOUBLE
23944: EQUAL
23945: IFTRUE 23949
23947: GO 23960
23949: POP
// places := 3 ; end ;
23950: LD_ADDR_VAR 0 3
23954: PUSH
23955: LD_INT 3
23957: ST_TO_ADDR
23958: GO 23961
23960: POP
// if places then
23961: LD_VAR 0 3
23965: IFFALSE 23988
// result := UnitsInside ( building ) < places ;
23967: LD_ADDR_VAR 0 2
23971: PUSH
23972: LD_VAR 0 1
23976: PPUSH
23977: CALL_OW 313
23981: PUSH
23982: LD_VAR 0 3
23986: LESS
23987: ST_TO_ADDR
// end ;
23988: LD_VAR 0 2
23992: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23993: LD_INT 0
23995: PPUSH
23996: PPUSH
23997: PPUSH
23998: PPUSH
// tmp := [ ] ;
23999: LD_ADDR_VAR 0 3
24003: PUSH
24004: EMPTY
24005: ST_TO_ADDR
// list := [ ] ;
24006: LD_ADDR_VAR 0 5
24010: PUSH
24011: EMPTY
24012: ST_TO_ADDR
// for i = 16 to 25 do
24013: LD_ADDR_VAR 0 4
24017: PUSH
24018: DOUBLE
24019: LD_INT 16
24021: DEC
24022: ST_TO_ADDR
24023: LD_INT 25
24025: PUSH
24026: FOR_TO
24027: IFFALSE 24100
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24029: LD_ADDR_VAR 0 3
24033: PUSH
24034: LD_VAR 0 3
24038: PUSH
24039: LD_INT 22
24041: PUSH
24042: LD_VAR 0 1
24046: PPUSH
24047: CALL_OW 255
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 91
24058: PUSH
24059: LD_VAR 0 1
24063: PUSH
24064: LD_INT 6
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: LIST
24071: PUSH
24072: LD_INT 30
24074: PUSH
24075: LD_VAR 0 4
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: LIST
24088: PUSH
24089: EMPTY
24090: LIST
24091: PPUSH
24092: CALL_OW 69
24096: ADD
24097: ST_TO_ADDR
24098: GO 24026
24100: POP
24101: POP
// for i = 1 to tmp do
24102: LD_ADDR_VAR 0 4
24106: PUSH
24107: DOUBLE
24108: LD_INT 1
24110: DEC
24111: ST_TO_ADDR
24112: LD_VAR 0 3
24116: PUSH
24117: FOR_TO
24118: IFFALSE 24206
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24120: LD_ADDR_VAR 0 5
24124: PUSH
24125: LD_VAR 0 5
24129: PUSH
24130: LD_VAR 0 3
24134: PUSH
24135: LD_VAR 0 4
24139: ARRAY
24140: PPUSH
24141: CALL_OW 266
24145: PUSH
24146: LD_VAR 0 3
24150: PUSH
24151: LD_VAR 0 4
24155: ARRAY
24156: PPUSH
24157: CALL_OW 250
24161: PUSH
24162: LD_VAR 0 3
24166: PUSH
24167: LD_VAR 0 4
24171: ARRAY
24172: PPUSH
24173: CALL_OW 251
24177: PUSH
24178: LD_VAR 0 3
24182: PUSH
24183: LD_VAR 0 4
24187: ARRAY
24188: PPUSH
24189: CALL_OW 254
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: PUSH
24200: EMPTY
24201: LIST
24202: ADD
24203: ST_TO_ADDR
24204: GO 24117
24206: POP
24207: POP
// result := list ;
24208: LD_ADDR_VAR 0 2
24212: PUSH
24213: LD_VAR 0 5
24217: ST_TO_ADDR
// end ;
24218: LD_VAR 0 2
24222: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24223: LD_INT 0
24225: PPUSH
24226: PPUSH
24227: PPUSH
24228: PPUSH
24229: PPUSH
24230: PPUSH
24231: PPUSH
// if not factory then
24232: LD_VAR 0 1
24236: NOT
24237: IFFALSE 24241
// exit ;
24239: GO 24834
// if control = control_apeman then
24241: LD_VAR 0 4
24245: PUSH
24246: LD_INT 5
24248: EQUAL
24249: IFFALSE 24358
// begin tmp := UnitsInside ( factory ) ;
24251: LD_ADDR_VAR 0 8
24255: PUSH
24256: LD_VAR 0 1
24260: PPUSH
24261: CALL_OW 313
24265: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24266: LD_VAR 0 8
24270: PPUSH
24271: LD_INT 25
24273: PUSH
24274: LD_INT 12
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PPUSH
24281: CALL_OW 72
24285: NOT
24286: IFFALSE 24296
// control := control_manual ;
24288: LD_ADDR_VAR 0 4
24292: PUSH
24293: LD_INT 1
24295: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24296: LD_ADDR_VAR 0 8
24300: PUSH
24301: LD_VAR 0 1
24305: PPUSH
24306: CALL 23993 0 1
24310: ST_TO_ADDR
// if tmp then
24311: LD_VAR 0 8
24315: IFFALSE 24358
// begin for i in tmp do
24317: LD_ADDR_VAR 0 7
24321: PUSH
24322: LD_VAR 0 8
24326: PUSH
24327: FOR_IN
24328: IFFALSE 24356
// if i [ 1 ] = b_ext_radio then
24330: LD_VAR 0 7
24334: PUSH
24335: LD_INT 1
24337: ARRAY
24338: PUSH
24339: LD_INT 22
24341: EQUAL
24342: IFFALSE 24354
// begin control := control_remote ;
24344: LD_ADDR_VAR 0 4
24348: PUSH
24349: LD_INT 2
24351: ST_TO_ADDR
// break ;
24352: GO 24356
// end ;
24354: GO 24327
24356: POP
24357: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24358: LD_VAR 0 1
24362: PPUSH
24363: LD_VAR 0 2
24367: PPUSH
24368: LD_VAR 0 3
24372: PPUSH
24373: LD_VAR 0 4
24377: PPUSH
24378: LD_VAR 0 5
24382: PPUSH
24383: CALL_OW 448
24387: IFFALSE 24422
// begin result := [ chassis , engine , control , weapon ] ;
24389: LD_ADDR_VAR 0 6
24393: PUSH
24394: LD_VAR 0 2
24398: PUSH
24399: LD_VAR 0 3
24403: PUSH
24404: LD_VAR 0 4
24408: PUSH
24409: LD_VAR 0 5
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: ST_TO_ADDR
// exit ;
24420: GO 24834
// end ; _chassis := AvailableChassisList ( factory ) ;
24422: LD_ADDR_VAR 0 9
24426: PUSH
24427: LD_VAR 0 1
24431: PPUSH
24432: CALL_OW 475
24436: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24437: LD_ADDR_VAR 0 11
24441: PUSH
24442: LD_VAR 0 1
24446: PPUSH
24447: CALL_OW 476
24451: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24452: LD_ADDR_VAR 0 12
24456: PUSH
24457: LD_VAR 0 1
24461: PPUSH
24462: CALL_OW 477
24466: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24467: LD_ADDR_VAR 0 10
24471: PUSH
24472: LD_VAR 0 1
24476: PPUSH
24477: CALL_OW 478
24481: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24482: LD_VAR 0 9
24486: NOT
24487: PUSH
24488: LD_VAR 0 11
24492: NOT
24493: OR
24494: PUSH
24495: LD_VAR 0 12
24499: NOT
24500: OR
24501: PUSH
24502: LD_VAR 0 10
24506: NOT
24507: OR
24508: IFFALSE 24543
// begin result := [ chassis , engine , control , weapon ] ;
24510: LD_ADDR_VAR 0 6
24514: PUSH
24515: LD_VAR 0 2
24519: PUSH
24520: LD_VAR 0 3
24524: PUSH
24525: LD_VAR 0 4
24529: PUSH
24530: LD_VAR 0 5
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: ST_TO_ADDR
// exit ;
24541: GO 24834
// end ; if not chassis in _chassis then
24543: LD_VAR 0 2
24547: PUSH
24548: LD_VAR 0 9
24552: IN
24553: NOT
24554: IFFALSE 24580
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24556: LD_ADDR_VAR 0 2
24560: PUSH
24561: LD_VAR 0 9
24565: PUSH
24566: LD_INT 1
24568: PPUSH
24569: LD_VAR 0 9
24573: PPUSH
24574: CALL_OW 12
24578: ARRAY
24579: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24580: LD_VAR 0 2
24584: PPUSH
24585: LD_VAR 0 3
24589: PPUSH
24590: CALL 24839 0 2
24594: NOT
24595: IFFALSE 24654
// repeat engine := _engine [ 1 ] ;
24597: LD_ADDR_VAR 0 3
24601: PUSH
24602: LD_VAR 0 11
24606: PUSH
24607: LD_INT 1
24609: ARRAY
24610: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24611: LD_ADDR_VAR 0 11
24615: PUSH
24616: LD_VAR 0 11
24620: PPUSH
24621: LD_INT 1
24623: PPUSH
24624: CALL_OW 3
24628: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24629: LD_VAR 0 2
24633: PPUSH
24634: LD_VAR 0 3
24638: PPUSH
24639: CALL 24839 0 2
24643: PUSH
24644: LD_VAR 0 11
24648: PUSH
24649: EMPTY
24650: EQUAL
24651: OR
24652: IFFALSE 24597
// if not control in _control then
24654: LD_VAR 0 4
24658: PUSH
24659: LD_VAR 0 12
24663: IN
24664: NOT
24665: IFFALSE 24691
// control := _control [ rand ( 1 , _control ) ] ;
24667: LD_ADDR_VAR 0 4
24671: PUSH
24672: LD_VAR 0 12
24676: PUSH
24677: LD_INT 1
24679: PPUSH
24680: LD_VAR 0 12
24684: PPUSH
24685: CALL_OW 12
24689: ARRAY
24690: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24691: LD_VAR 0 2
24695: PPUSH
24696: LD_VAR 0 5
24700: PPUSH
24701: CALL 25059 0 2
24705: NOT
24706: IFFALSE 24765
// repeat weapon := _weapon [ 1 ] ;
24708: LD_ADDR_VAR 0 5
24712: PUSH
24713: LD_VAR 0 10
24717: PUSH
24718: LD_INT 1
24720: ARRAY
24721: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24722: LD_ADDR_VAR 0 10
24726: PUSH
24727: LD_VAR 0 10
24731: PPUSH
24732: LD_INT 1
24734: PPUSH
24735: CALL_OW 3
24739: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24740: LD_VAR 0 2
24744: PPUSH
24745: LD_VAR 0 5
24749: PPUSH
24750: CALL 25059 0 2
24754: PUSH
24755: LD_VAR 0 10
24759: PUSH
24760: EMPTY
24761: EQUAL
24762: OR
24763: IFFALSE 24708
// result := [ ] ;
24765: LD_ADDR_VAR 0 6
24769: PUSH
24770: EMPTY
24771: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24772: LD_VAR 0 1
24776: PPUSH
24777: LD_VAR 0 2
24781: PPUSH
24782: LD_VAR 0 3
24786: PPUSH
24787: LD_VAR 0 4
24791: PPUSH
24792: LD_VAR 0 5
24796: PPUSH
24797: CALL_OW 448
24801: IFFALSE 24834
// result := [ chassis , engine , control , weapon ] ;
24803: LD_ADDR_VAR 0 6
24807: PUSH
24808: LD_VAR 0 2
24812: PUSH
24813: LD_VAR 0 3
24817: PUSH
24818: LD_VAR 0 4
24822: PUSH
24823: LD_VAR 0 5
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: ST_TO_ADDR
// end ;
24834: LD_VAR 0 6
24838: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24839: LD_INT 0
24841: PPUSH
// if not chassis or not engine then
24842: LD_VAR 0 1
24846: NOT
24847: PUSH
24848: LD_VAR 0 2
24852: NOT
24853: OR
24854: IFFALSE 24858
// exit ;
24856: GO 25054
// case engine of engine_solar :
24858: LD_VAR 0 2
24862: PUSH
24863: LD_INT 2
24865: DOUBLE
24866: EQUAL
24867: IFTRUE 24871
24869: GO 24909
24871: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24872: LD_ADDR_VAR 0 3
24876: PUSH
24877: LD_INT 11
24879: PUSH
24880: LD_INT 12
24882: PUSH
24883: LD_INT 13
24885: PUSH
24886: LD_INT 14
24888: PUSH
24889: LD_INT 1
24891: PUSH
24892: LD_INT 2
24894: PUSH
24895: LD_INT 3
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: ST_TO_ADDR
24907: GO 25038
24909: LD_INT 1
24911: DOUBLE
24912: EQUAL
24913: IFTRUE 24917
24915: GO 24979
24917: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24918: LD_ADDR_VAR 0 3
24922: PUSH
24923: LD_INT 11
24925: PUSH
24926: LD_INT 12
24928: PUSH
24929: LD_INT 13
24931: PUSH
24932: LD_INT 14
24934: PUSH
24935: LD_INT 1
24937: PUSH
24938: LD_INT 2
24940: PUSH
24941: LD_INT 3
24943: PUSH
24944: LD_INT 4
24946: PUSH
24947: LD_INT 5
24949: PUSH
24950: LD_INT 21
24952: PUSH
24953: LD_INT 23
24955: PUSH
24956: LD_INT 22
24958: PUSH
24959: LD_INT 24
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: ST_TO_ADDR
24977: GO 25038
24979: LD_INT 3
24981: DOUBLE
24982: EQUAL
24983: IFTRUE 24987
24985: GO 25037
24987: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24988: LD_ADDR_VAR 0 3
24992: PUSH
24993: LD_INT 13
24995: PUSH
24996: LD_INT 14
24998: PUSH
24999: LD_INT 2
25001: PUSH
25002: LD_INT 3
25004: PUSH
25005: LD_INT 4
25007: PUSH
25008: LD_INT 5
25010: PUSH
25011: LD_INT 21
25013: PUSH
25014: LD_INT 22
25016: PUSH
25017: LD_INT 23
25019: PUSH
25020: LD_INT 24
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: ST_TO_ADDR
25035: GO 25038
25037: POP
// result := ( chassis in result ) ;
25038: LD_ADDR_VAR 0 3
25042: PUSH
25043: LD_VAR 0 1
25047: PUSH
25048: LD_VAR 0 3
25052: IN
25053: ST_TO_ADDR
// end ;
25054: LD_VAR 0 3
25058: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25059: LD_INT 0
25061: PPUSH
// if not chassis or not weapon then
25062: LD_VAR 0 1
25066: NOT
25067: PUSH
25068: LD_VAR 0 2
25072: NOT
25073: OR
25074: IFFALSE 25078
// exit ;
25076: GO 26140
// case weapon of us_machine_gun :
25078: LD_VAR 0 2
25082: PUSH
25083: LD_INT 2
25085: DOUBLE
25086: EQUAL
25087: IFTRUE 25091
25089: GO 25121
25091: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25092: LD_ADDR_VAR 0 3
25096: PUSH
25097: LD_INT 1
25099: PUSH
25100: LD_INT 2
25102: PUSH
25103: LD_INT 3
25105: PUSH
25106: LD_INT 4
25108: PUSH
25109: LD_INT 5
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: ST_TO_ADDR
25119: GO 26124
25121: LD_INT 3
25123: DOUBLE
25124: EQUAL
25125: IFTRUE 25129
25127: GO 25159
25129: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25130: LD_ADDR_VAR 0 3
25134: PUSH
25135: LD_INT 1
25137: PUSH
25138: LD_INT 2
25140: PUSH
25141: LD_INT 3
25143: PUSH
25144: LD_INT 4
25146: PUSH
25147: LD_INT 5
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: ST_TO_ADDR
25157: GO 26124
25159: LD_INT 11
25161: DOUBLE
25162: EQUAL
25163: IFTRUE 25167
25165: GO 25197
25167: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25168: LD_ADDR_VAR 0 3
25172: PUSH
25173: LD_INT 1
25175: PUSH
25176: LD_INT 2
25178: PUSH
25179: LD_INT 3
25181: PUSH
25182: LD_INT 4
25184: PUSH
25185: LD_INT 5
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: ST_TO_ADDR
25195: GO 26124
25197: LD_INT 4
25199: DOUBLE
25200: EQUAL
25201: IFTRUE 25205
25203: GO 25231
25205: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25206: LD_ADDR_VAR 0 3
25210: PUSH
25211: LD_INT 2
25213: PUSH
25214: LD_INT 3
25216: PUSH
25217: LD_INT 4
25219: PUSH
25220: LD_INT 5
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: ST_TO_ADDR
25229: GO 26124
25231: LD_INT 5
25233: DOUBLE
25234: EQUAL
25235: IFTRUE 25239
25237: GO 25265
25239: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25240: LD_ADDR_VAR 0 3
25244: PUSH
25245: LD_INT 2
25247: PUSH
25248: LD_INT 3
25250: PUSH
25251: LD_INT 4
25253: PUSH
25254: LD_INT 5
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: ST_TO_ADDR
25263: GO 26124
25265: LD_INT 9
25267: DOUBLE
25268: EQUAL
25269: IFTRUE 25273
25271: GO 25299
25273: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25274: LD_ADDR_VAR 0 3
25278: PUSH
25279: LD_INT 2
25281: PUSH
25282: LD_INT 3
25284: PUSH
25285: LD_INT 4
25287: PUSH
25288: LD_INT 5
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: ST_TO_ADDR
25297: GO 26124
25299: LD_INT 7
25301: DOUBLE
25302: EQUAL
25303: IFTRUE 25307
25305: GO 25333
25307: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25308: LD_ADDR_VAR 0 3
25312: PUSH
25313: LD_INT 2
25315: PUSH
25316: LD_INT 3
25318: PUSH
25319: LD_INT 4
25321: PUSH
25322: LD_INT 5
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: ST_TO_ADDR
25331: GO 26124
25333: LD_INT 12
25335: DOUBLE
25336: EQUAL
25337: IFTRUE 25341
25339: GO 25367
25341: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25342: LD_ADDR_VAR 0 3
25346: PUSH
25347: LD_INT 2
25349: PUSH
25350: LD_INT 3
25352: PUSH
25353: LD_INT 4
25355: PUSH
25356: LD_INT 5
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: ST_TO_ADDR
25365: GO 26124
25367: LD_INT 13
25369: DOUBLE
25370: EQUAL
25371: IFTRUE 25375
25373: GO 25401
25375: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25376: LD_ADDR_VAR 0 3
25380: PUSH
25381: LD_INT 2
25383: PUSH
25384: LD_INT 3
25386: PUSH
25387: LD_INT 4
25389: PUSH
25390: LD_INT 5
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: ST_TO_ADDR
25399: GO 26124
25401: LD_INT 14
25403: DOUBLE
25404: EQUAL
25405: IFTRUE 25409
25407: GO 25427
25409: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25410: LD_ADDR_VAR 0 3
25414: PUSH
25415: LD_INT 4
25417: PUSH
25418: LD_INT 5
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: ST_TO_ADDR
25425: GO 26124
25427: LD_INT 6
25429: DOUBLE
25430: EQUAL
25431: IFTRUE 25435
25433: GO 25453
25435: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25436: LD_ADDR_VAR 0 3
25440: PUSH
25441: LD_INT 4
25443: PUSH
25444: LD_INT 5
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: ST_TO_ADDR
25451: GO 26124
25453: LD_INT 10
25455: DOUBLE
25456: EQUAL
25457: IFTRUE 25461
25459: GO 25479
25461: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25462: LD_ADDR_VAR 0 3
25466: PUSH
25467: LD_INT 4
25469: PUSH
25470: LD_INT 5
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: ST_TO_ADDR
25477: GO 26124
25479: LD_INT 22
25481: DOUBLE
25482: EQUAL
25483: IFTRUE 25487
25485: GO 25513
25487: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25488: LD_ADDR_VAR 0 3
25492: PUSH
25493: LD_INT 11
25495: PUSH
25496: LD_INT 12
25498: PUSH
25499: LD_INT 13
25501: PUSH
25502: LD_INT 14
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: ST_TO_ADDR
25511: GO 26124
25513: LD_INT 23
25515: DOUBLE
25516: EQUAL
25517: IFTRUE 25521
25519: GO 25547
25521: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25522: LD_ADDR_VAR 0 3
25526: PUSH
25527: LD_INT 11
25529: PUSH
25530: LD_INT 12
25532: PUSH
25533: LD_INT 13
25535: PUSH
25536: LD_INT 14
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: ST_TO_ADDR
25545: GO 26124
25547: LD_INT 24
25549: DOUBLE
25550: EQUAL
25551: IFTRUE 25555
25553: GO 25581
25555: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25556: LD_ADDR_VAR 0 3
25560: PUSH
25561: LD_INT 11
25563: PUSH
25564: LD_INT 12
25566: PUSH
25567: LD_INT 13
25569: PUSH
25570: LD_INT 14
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: ST_TO_ADDR
25579: GO 26124
25581: LD_INT 30
25583: DOUBLE
25584: EQUAL
25585: IFTRUE 25589
25587: GO 25615
25589: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25590: LD_ADDR_VAR 0 3
25594: PUSH
25595: LD_INT 11
25597: PUSH
25598: LD_INT 12
25600: PUSH
25601: LD_INT 13
25603: PUSH
25604: LD_INT 14
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: ST_TO_ADDR
25613: GO 26124
25615: LD_INT 25
25617: DOUBLE
25618: EQUAL
25619: IFTRUE 25623
25621: GO 25641
25623: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25624: LD_ADDR_VAR 0 3
25628: PUSH
25629: LD_INT 13
25631: PUSH
25632: LD_INT 14
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: ST_TO_ADDR
25639: GO 26124
25641: LD_INT 27
25643: DOUBLE
25644: EQUAL
25645: IFTRUE 25649
25647: GO 25667
25649: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25650: LD_ADDR_VAR 0 3
25654: PUSH
25655: LD_INT 13
25657: PUSH
25658: LD_INT 14
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: ST_TO_ADDR
25665: GO 26124
25667: LD_EXP 77
25671: DOUBLE
25672: EQUAL
25673: IFTRUE 25677
25675: GO 25703
25677: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25678: LD_ADDR_VAR 0 3
25682: PUSH
25683: LD_INT 11
25685: PUSH
25686: LD_INT 12
25688: PUSH
25689: LD_INT 13
25691: PUSH
25692: LD_INT 14
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: ST_TO_ADDR
25701: GO 26124
25703: LD_INT 28
25705: DOUBLE
25706: EQUAL
25707: IFTRUE 25711
25709: GO 25729
25711: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25712: LD_ADDR_VAR 0 3
25716: PUSH
25717: LD_INT 13
25719: PUSH
25720: LD_INT 14
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: ST_TO_ADDR
25727: GO 26124
25729: LD_INT 29
25731: DOUBLE
25732: EQUAL
25733: IFTRUE 25737
25735: GO 25755
25737: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25738: LD_ADDR_VAR 0 3
25742: PUSH
25743: LD_INT 13
25745: PUSH
25746: LD_INT 14
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: ST_TO_ADDR
25753: GO 26124
25755: LD_INT 31
25757: DOUBLE
25758: EQUAL
25759: IFTRUE 25763
25761: GO 25781
25763: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25764: LD_ADDR_VAR 0 3
25768: PUSH
25769: LD_INT 13
25771: PUSH
25772: LD_INT 14
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: ST_TO_ADDR
25779: GO 26124
25781: LD_INT 26
25783: DOUBLE
25784: EQUAL
25785: IFTRUE 25789
25787: GO 25807
25789: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25790: LD_ADDR_VAR 0 3
25794: PUSH
25795: LD_INT 13
25797: PUSH
25798: LD_INT 14
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: ST_TO_ADDR
25805: GO 26124
25807: LD_INT 42
25809: DOUBLE
25810: EQUAL
25811: IFTRUE 25815
25813: GO 25841
25815: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25816: LD_ADDR_VAR 0 3
25820: PUSH
25821: LD_INT 21
25823: PUSH
25824: LD_INT 22
25826: PUSH
25827: LD_INT 23
25829: PUSH
25830: LD_INT 24
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: ST_TO_ADDR
25839: GO 26124
25841: LD_INT 43
25843: DOUBLE
25844: EQUAL
25845: IFTRUE 25849
25847: GO 25875
25849: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25850: LD_ADDR_VAR 0 3
25854: PUSH
25855: LD_INT 21
25857: PUSH
25858: LD_INT 22
25860: PUSH
25861: LD_INT 23
25863: PUSH
25864: LD_INT 24
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: ST_TO_ADDR
25873: GO 26124
25875: LD_INT 44
25877: DOUBLE
25878: EQUAL
25879: IFTRUE 25883
25881: GO 25909
25883: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25884: LD_ADDR_VAR 0 3
25888: PUSH
25889: LD_INT 21
25891: PUSH
25892: LD_INT 22
25894: PUSH
25895: LD_INT 23
25897: PUSH
25898: LD_INT 24
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: ST_TO_ADDR
25907: GO 26124
25909: LD_INT 45
25911: DOUBLE
25912: EQUAL
25913: IFTRUE 25917
25915: GO 25943
25917: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25918: LD_ADDR_VAR 0 3
25922: PUSH
25923: LD_INT 21
25925: PUSH
25926: LD_INT 22
25928: PUSH
25929: LD_INT 23
25931: PUSH
25932: LD_INT 24
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: ST_TO_ADDR
25941: GO 26124
25943: LD_INT 49
25945: DOUBLE
25946: EQUAL
25947: IFTRUE 25951
25949: GO 25977
25951: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25952: LD_ADDR_VAR 0 3
25956: PUSH
25957: LD_INT 21
25959: PUSH
25960: LD_INT 22
25962: PUSH
25963: LD_INT 23
25965: PUSH
25966: LD_INT 24
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: ST_TO_ADDR
25975: GO 26124
25977: LD_INT 51
25979: DOUBLE
25980: EQUAL
25981: IFTRUE 25985
25983: GO 26011
25985: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25986: LD_ADDR_VAR 0 3
25990: PUSH
25991: LD_INT 21
25993: PUSH
25994: LD_INT 22
25996: PUSH
25997: LD_INT 23
25999: PUSH
26000: LD_INT 24
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: ST_TO_ADDR
26009: GO 26124
26011: LD_INT 52
26013: DOUBLE
26014: EQUAL
26015: IFTRUE 26019
26017: GO 26045
26019: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26020: LD_ADDR_VAR 0 3
26024: PUSH
26025: LD_INT 21
26027: PUSH
26028: LD_INT 22
26030: PUSH
26031: LD_INT 23
26033: PUSH
26034: LD_INT 24
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: ST_TO_ADDR
26043: GO 26124
26045: LD_INT 53
26047: DOUBLE
26048: EQUAL
26049: IFTRUE 26053
26051: GO 26071
26053: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26054: LD_ADDR_VAR 0 3
26058: PUSH
26059: LD_INT 23
26061: PUSH
26062: LD_INT 24
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: ST_TO_ADDR
26069: GO 26124
26071: LD_INT 46
26073: DOUBLE
26074: EQUAL
26075: IFTRUE 26079
26077: GO 26097
26079: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26080: LD_ADDR_VAR 0 3
26084: PUSH
26085: LD_INT 23
26087: PUSH
26088: LD_INT 24
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: ST_TO_ADDR
26095: GO 26124
26097: LD_INT 47
26099: DOUBLE
26100: EQUAL
26101: IFTRUE 26105
26103: GO 26123
26105: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26106: LD_ADDR_VAR 0 3
26110: PUSH
26111: LD_INT 23
26113: PUSH
26114: LD_INT 24
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: ST_TO_ADDR
26121: GO 26124
26123: POP
// result := ( chassis in result ) ;
26124: LD_ADDR_VAR 0 3
26128: PUSH
26129: LD_VAR 0 1
26133: PUSH
26134: LD_VAR 0 3
26138: IN
26139: ST_TO_ADDR
// end ;
26140: LD_VAR 0 3
26144: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26145: LD_INT 0
26147: PPUSH
26148: PPUSH
26149: PPUSH
26150: PPUSH
26151: PPUSH
26152: PPUSH
26153: PPUSH
// result := array ;
26154: LD_ADDR_VAR 0 5
26158: PUSH
26159: LD_VAR 0 1
26163: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26164: LD_VAR 0 1
26168: NOT
26169: PUSH
26170: LD_VAR 0 2
26174: NOT
26175: OR
26176: PUSH
26177: LD_VAR 0 3
26181: NOT
26182: OR
26183: PUSH
26184: LD_VAR 0 2
26188: PUSH
26189: LD_VAR 0 1
26193: GREATER
26194: OR
26195: PUSH
26196: LD_VAR 0 3
26200: PUSH
26201: LD_VAR 0 1
26205: GREATER
26206: OR
26207: IFFALSE 26211
// exit ;
26209: GO 26507
// if direction then
26211: LD_VAR 0 4
26215: IFFALSE 26279
// begin d := 1 ;
26217: LD_ADDR_VAR 0 9
26221: PUSH
26222: LD_INT 1
26224: ST_TO_ADDR
// if i_from > i_to then
26225: LD_VAR 0 2
26229: PUSH
26230: LD_VAR 0 3
26234: GREATER
26235: IFFALSE 26261
// length := ( array - i_from ) + i_to else
26237: LD_ADDR_VAR 0 11
26241: PUSH
26242: LD_VAR 0 1
26246: PUSH
26247: LD_VAR 0 2
26251: MINUS
26252: PUSH
26253: LD_VAR 0 3
26257: PLUS
26258: ST_TO_ADDR
26259: GO 26277
// length := i_to - i_from ;
26261: LD_ADDR_VAR 0 11
26265: PUSH
26266: LD_VAR 0 3
26270: PUSH
26271: LD_VAR 0 2
26275: MINUS
26276: ST_TO_ADDR
// end else
26277: GO 26340
// begin d := - 1 ;
26279: LD_ADDR_VAR 0 9
26283: PUSH
26284: LD_INT 1
26286: NEG
26287: ST_TO_ADDR
// if i_from > i_to then
26288: LD_VAR 0 2
26292: PUSH
26293: LD_VAR 0 3
26297: GREATER
26298: IFFALSE 26318
// length := i_from - i_to else
26300: LD_ADDR_VAR 0 11
26304: PUSH
26305: LD_VAR 0 2
26309: PUSH
26310: LD_VAR 0 3
26314: MINUS
26315: ST_TO_ADDR
26316: GO 26340
// length := ( array - i_to ) + i_from ;
26318: LD_ADDR_VAR 0 11
26322: PUSH
26323: LD_VAR 0 1
26327: PUSH
26328: LD_VAR 0 3
26332: MINUS
26333: PUSH
26334: LD_VAR 0 2
26338: PLUS
26339: ST_TO_ADDR
// end ; if not length then
26340: LD_VAR 0 11
26344: NOT
26345: IFFALSE 26349
// exit ;
26347: GO 26507
// tmp := array ;
26349: LD_ADDR_VAR 0 10
26353: PUSH
26354: LD_VAR 0 1
26358: ST_TO_ADDR
// for i = 1 to length do
26359: LD_ADDR_VAR 0 6
26363: PUSH
26364: DOUBLE
26365: LD_INT 1
26367: DEC
26368: ST_TO_ADDR
26369: LD_VAR 0 11
26373: PUSH
26374: FOR_TO
26375: IFFALSE 26495
// begin for j = 1 to array do
26377: LD_ADDR_VAR 0 7
26381: PUSH
26382: DOUBLE
26383: LD_INT 1
26385: DEC
26386: ST_TO_ADDR
26387: LD_VAR 0 1
26391: PUSH
26392: FOR_TO
26393: IFFALSE 26481
// begin k := j + d ;
26395: LD_ADDR_VAR 0 8
26399: PUSH
26400: LD_VAR 0 7
26404: PUSH
26405: LD_VAR 0 9
26409: PLUS
26410: ST_TO_ADDR
// if k > array then
26411: LD_VAR 0 8
26415: PUSH
26416: LD_VAR 0 1
26420: GREATER
26421: IFFALSE 26431
// k := 1 ;
26423: LD_ADDR_VAR 0 8
26427: PUSH
26428: LD_INT 1
26430: ST_TO_ADDR
// if not k then
26431: LD_VAR 0 8
26435: NOT
26436: IFFALSE 26448
// k := array ;
26438: LD_ADDR_VAR 0 8
26442: PUSH
26443: LD_VAR 0 1
26447: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26448: LD_ADDR_VAR 0 10
26452: PUSH
26453: LD_VAR 0 10
26457: PPUSH
26458: LD_VAR 0 8
26462: PPUSH
26463: LD_VAR 0 1
26467: PUSH
26468: LD_VAR 0 7
26472: ARRAY
26473: PPUSH
26474: CALL_OW 1
26478: ST_TO_ADDR
// end ;
26479: GO 26392
26481: POP
26482: POP
// array := tmp ;
26483: LD_ADDR_VAR 0 1
26487: PUSH
26488: LD_VAR 0 10
26492: ST_TO_ADDR
// end ;
26493: GO 26374
26495: POP
26496: POP
// result := array ;
26497: LD_ADDR_VAR 0 5
26501: PUSH
26502: LD_VAR 0 1
26506: ST_TO_ADDR
// end ;
26507: LD_VAR 0 5
26511: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26512: LD_INT 0
26514: PPUSH
26515: PPUSH
// result := 0 ;
26516: LD_ADDR_VAR 0 3
26520: PUSH
26521: LD_INT 0
26523: ST_TO_ADDR
// if not array or not value in array then
26524: LD_VAR 0 1
26528: NOT
26529: PUSH
26530: LD_VAR 0 2
26534: PUSH
26535: LD_VAR 0 1
26539: IN
26540: NOT
26541: OR
26542: IFFALSE 26546
// exit ;
26544: GO 26600
// for i = 1 to array do
26546: LD_ADDR_VAR 0 4
26550: PUSH
26551: DOUBLE
26552: LD_INT 1
26554: DEC
26555: ST_TO_ADDR
26556: LD_VAR 0 1
26560: PUSH
26561: FOR_TO
26562: IFFALSE 26598
// if value = array [ i ] then
26564: LD_VAR 0 2
26568: PUSH
26569: LD_VAR 0 1
26573: PUSH
26574: LD_VAR 0 4
26578: ARRAY
26579: EQUAL
26580: IFFALSE 26596
// begin result := i ;
26582: LD_ADDR_VAR 0 3
26586: PUSH
26587: LD_VAR 0 4
26591: ST_TO_ADDR
// exit ;
26592: POP
26593: POP
26594: GO 26600
// end ;
26596: GO 26561
26598: POP
26599: POP
// end ;
26600: LD_VAR 0 3
26604: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26605: LD_INT 0
26607: PPUSH
// vc_chassis := chassis ;
26608: LD_ADDR_OWVAR 37
26612: PUSH
26613: LD_VAR 0 1
26617: ST_TO_ADDR
// vc_engine := engine ;
26618: LD_ADDR_OWVAR 39
26622: PUSH
26623: LD_VAR 0 2
26627: ST_TO_ADDR
// vc_control := control ;
26628: LD_ADDR_OWVAR 38
26632: PUSH
26633: LD_VAR 0 3
26637: ST_TO_ADDR
// vc_weapon := weapon ;
26638: LD_ADDR_OWVAR 40
26642: PUSH
26643: LD_VAR 0 4
26647: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26648: LD_ADDR_OWVAR 41
26652: PUSH
26653: LD_VAR 0 5
26657: ST_TO_ADDR
// end ;
26658: LD_VAR 0 6
26662: RET
// export function WantPlant ( unit ) ; var task ; begin
26663: LD_INT 0
26665: PPUSH
26666: PPUSH
// result := false ;
26667: LD_ADDR_VAR 0 2
26671: PUSH
26672: LD_INT 0
26674: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26675: LD_ADDR_VAR 0 3
26679: PUSH
26680: LD_VAR 0 1
26684: PPUSH
26685: CALL_OW 437
26689: ST_TO_ADDR
// if task then
26690: LD_VAR 0 3
26694: IFFALSE 26722
// if task [ 1 ] [ 1 ] = p then
26696: LD_VAR 0 3
26700: PUSH
26701: LD_INT 1
26703: ARRAY
26704: PUSH
26705: LD_INT 1
26707: ARRAY
26708: PUSH
26709: LD_STRING p
26711: EQUAL
26712: IFFALSE 26722
// result := true ;
26714: LD_ADDR_VAR 0 2
26718: PUSH
26719: LD_INT 1
26721: ST_TO_ADDR
// end ;
26722: LD_VAR 0 2
26726: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26727: LD_INT 0
26729: PPUSH
26730: PPUSH
26731: PPUSH
26732: PPUSH
// if pos < 1 then
26733: LD_VAR 0 2
26737: PUSH
26738: LD_INT 1
26740: LESS
26741: IFFALSE 26745
// exit ;
26743: GO 27048
// if pos = 1 then
26745: LD_VAR 0 2
26749: PUSH
26750: LD_INT 1
26752: EQUAL
26753: IFFALSE 26786
// result := Replace ( arr , pos [ 1 ] , value ) else
26755: LD_ADDR_VAR 0 4
26759: PUSH
26760: LD_VAR 0 1
26764: PPUSH
26765: LD_VAR 0 2
26769: PUSH
26770: LD_INT 1
26772: ARRAY
26773: PPUSH
26774: LD_VAR 0 3
26778: PPUSH
26779: CALL_OW 1
26783: ST_TO_ADDR
26784: GO 27048
// begin tmp := arr ;
26786: LD_ADDR_VAR 0 6
26790: PUSH
26791: LD_VAR 0 1
26795: ST_TO_ADDR
// s_arr := [ tmp ] ;
26796: LD_ADDR_VAR 0 7
26800: PUSH
26801: LD_VAR 0 6
26805: PUSH
26806: EMPTY
26807: LIST
26808: ST_TO_ADDR
// for i = 1 to pos - 1 do
26809: LD_ADDR_VAR 0 5
26813: PUSH
26814: DOUBLE
26815: LD_INT 1
26817: DEC
26818: ST_TO_ADDR
26819: LD_VAR 0 2
26823: PUSH
26824: LD_INT 1
26826: MINUS
26827: PUSH
26828: FOR_TO
26829: IFFALSE 26874
// begin tmp := tmp [ pos [ i ] ] ;
26831: LD_ADDR_VAR 0 6
26835: PUSH
26836: LD_VAR 0 6
26840: PUSH
26841: LD_VAR 0 2
26845: PUSH
26846: LD_VAR 0 5
26850: ARRAY
26851: ARRAY
26852: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26853: LD_ADDR_VAR 0 7
26857: PUSH
26858: LD_VAR 0 7
26862: PUSH
26863: LD_VAR 0 6
26867: PUSH
26868: EMPTY
26869: LIST
26870: ADD
26871: ST_TO_ADDR
// end ;
26872: GO 26828
26874: POP
26875: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26876: LD_ADDR_VAR 0 6
26880: PUSH
26881: LD_VAR 0 6
26885: PPUSH
26886: LD_VAR 0 2
26890: PUSH
26891: LD_VAR 0 2
26895: ARRAY
26896: PPUSH
26897: LD_VAR 0 3
26901: PPUSH
26902: CALL_OW 1
26906: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26907: LD_ADDR_VAR 0 7
26911: PUSH
26912: LD_VAR 0 7
26916: PPUSH
26917: LD_VAR 0 7
26921: PPUSH
26922: LD_VAR 0 6
26926: PPUSH
26927: CALL_OW 1
26931: ST_TO_ADDR
// for i = s_arr downto 2 do
26932: LD_ADDR_VAR 0 5
26936: PUSH
26937: DOUBLE
26938: LD_VAR 0 7
26942: INC
26943: ST_TO_ADDR
26944: LD_INT 2
26946: PUSH
26947: FOR_DOWNTO
26948: IFFALSE 27032
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26950: LD_ADDR_VAR 0 6
26954: PUSH
26955: LD_VAR 0 7
26959: PUSH
26960: LD_VAR 0 5
26964: PUSH
26965: LD_INT 1
26967: MINUS
26968: ARRAY
26969: PPUSH
26970: LD_VAR 0 2
26974: PUSH
26975: LD_VAR 0 5
26979: PUSH
26980: LD_INT 1
26982: MINUS
26983: ARRAY
26984: PPUSH
26985: LD_VAR 0 7
26989: PUSH
26990: LD_VAR 0 5
26994: ARRAY
26995: PPUSH
26996: CALL_OW 1
27000: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27001: LD_ADDR_VAR 0 7
27005: PUSH
27006: LD_VAR 0 7
27010: PPUSH
27011: LD_VAR 0 5
27015: PUSH
27016: LD_INT 1
27018: MINUS
27019: PPUSH
27020: LD_VAR 0 6
27024: PPUSH
27025: CALL_OW 1
27029: ST_TO_ADDR
// end ;
27030: GO 26947
27032: POP
27033: POP
// result := s_arr [ 1 ] ;
27034: LD_ADDR_VAR 0 4
27038: PUSH
27039: LD_VAR 0 7
27043: PUSH
27044: LD_INT 1
27046: ARRAY
27047: ST_TO_ADDR
// end ; end ;
27048: LD_VAR 0 4
27052: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27053: LD_INT 0
27055: PPUSH
27056: PPUSH
// if not list then
27057: LD_VAR 0 1
27061: NOT
27062: IFFALSE 27066
// exit ;
27064: GO 27157
// i := list [ pos1 ] ;
27066: LD_ADDR_VAR 0 5
27070: PUSH
27071: LD_VAR 0 1
27075: PUSH
27076: LD_VAR 0 2
27080: ARRAY
27081: ST_TO_ADDR
// if not i then
27082: LD_VAR 0 5
27086: NOT
27087: IFFALSE 27091
// exit ;
27089: GO 27157
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27091: LD_ADDR_VAR 0 1
27095: PUSH
27096: LD_VAR 0 1
27100: PPUSH
27101: LD_VAR 0 2
27105: PPUSH
27106: LD_VAR 0 1
27110: PUSH
27111: LD_VAR 0 3
27115: ARRAY
27116: PPUSH
27117: CALL_OW 1
27121: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27122: LD_ADDR_VAR 0 1
27126: PUSH
27127: LD_VAR 0 1
27131: PPUSH
27132: LD_VAR 0 3
27136: PPUSH
27137: LD_VAR 0 5
27141: PPUSH
27142: CALL_OW 1
27146: ST_TO_ADDR
// result := list ;
27147: LD_ADDR_VAR 0 4
27151: PUSH
27152: LD_VAR 0 1
27156: ST_TO_ADDR
// end ;
27157: LD_VAR 0 4
27161: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27162: LD_INT 0
27164: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27165: LD_ADDR_VAR 0 5
27169: PUSH
27170: LD_VAR 0 1
27174: PPUSH
27175: CALL_OW 250
27179: PPUSH
27180: LD_VAR 0 1
27184: PPUSH
27185: CALL_OW 251
27189: PPUSH
27190: LD_VAR 0 2
27194: PPUSH
27195: LD_VAR 0 3
27199: PPUSH
27200: LD_VAR 0 4
27204: PPUSH
27205: CALL 27215 0 5
27209: ST_TO_ADDR
// end ;
27210: LD_VAR 0 5
27214: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27215: LD_INT 0
27217: PPUSH
27218: PPUSH
27219: PPUSH
27220: PPUSH
// if not list then
27221: LD_VAR 0 3
27225: NOT
27226: IFFALSE 27230
// exit ;
27228: GO 27618
// result := [ ] ;
27230: LD_ADDR_VAR 0 6
27234: PUSH
27235: EMPTY
27236: ST_TO_ADDR
// for i in list do
27237: LD_ADDR_VAR 0 7
27241: PUSH
27242: LD_VAR 0 3
27246: PUSH
27247: FOR_IN
27248: IFFALSE 27450
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27250: LD_ADDR_VAR 0 9
27254: PUSH
27255: LD_VAR 0 7
27259: PPUSH
27260: LD_VAR 0 1
27264: PPUSH
27265: LD_VAR 0 2
27269: PPUSH
27270: CALL_OW 297
27274: ST_TO_ADDR
// if not result then
27275: LD_VAR 0 6
27279: NOT
27280: IFFALSE 27306
// result := [ [ i , tmp ] ] else
27282: LD_ADDR_VAR 0 6
27286: PUSH
27287: LD_VAR 0 7
27291: PUSH
27292: LD_VAR 0 9
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: EMPTY
27302: LIST
27303: ST_TO_ADDR
27304: GO 27448
// begin if result [ result ] [ 2 ] < tmp then
27306: LD_VAR 0 6
27310: PUSH
27311: LD_VAR 0 6
27315: ARRAY
27316: PUSH
27317: LD_INT 2
27319: ARRAY
27320: PUSH
27321: LD_VAR 0 9
27325: LESS
27326: IFFALSE 27368
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27328: LD_ADDR_VAR 0 6
27332: PUSH
27333: LD_VAR 0 6
27337: PPUSH
27338: LD_VAR 0 6
27342: PUSH
27343: LD_INT 1
27345: PLUS
27346: PPUSH
27347: LD_VAR 0 7
27351: PUSH
27352: LD_VAR 0 9
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PPUSH
27361: CALL_OW 2
27365: ST_TO_ADDR
27366: GO 27448
// for j = 1 to result do
27368: LD_ADDR_VAR 0 8
27372: PUSH
27373: DOUBLE
27374: LD_INT 1
27376: DEC
27377: ST_TO_ADDR
27378: LD_VAR 0 6
27382: PUSH
27383: FOR_TO
27384: IFFALSE 27446
// begin if tmp < result [ j ] [ 2 ] then
27386: LD_VAR 0 9
27390: PUSH
27391: LD_VAR 0 6
27395: PUSH
27396: LD_VAR 0 8
27400: ARRAY
27401: PUSH
27402: LD_INT 2
27404: ARRAY
27405: LESS
27406: IFFALSE 27444
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27408: LD_ADDR_VAR 0 6
27412: PUSH
27413: LD_VAR 0 6
27417: PPUSH
27418: LD_VAR 0 8
27422: PPUSH
27423: LD_VAR 0 7
27427: PUSH
27428: LD_VAR 0 9
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PPUSH
27437: CALL_OW 2
27441: ST_TO_ADDR
// break ;
27442: GO 27446
// end ; end ;
27444: GO 27383
27446: POP
27447: POP
// end ; end ;
27448: GO 27247
27450: POP
27451: POP
// if result and not asc then
27452: LD_VAR 0 6
27456: PUSH
27457: LD_VAR 0 4
27461: NOT
27462: AND
27463: IFFALSE 27538
// begin tmp := result ;
27465: LD_ADDR_VAR 0 9
27469: PUSH
27470: LD_VAR 0 6
27474: ST_TO_ADDR
// for i = tmp downto 1 do
27475: LD_ADDR_VAR 0 7
27479: PUSH
27480: DOUBLE
27481: LD_VAR 0 9
27485: INC
27486: ST_TO_ADDR
27487: LD_INT 1
27489: PUSH
27490: FOR_DOWNTO
27491: IFFALSE 27536
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27493: LD_ADDR_VAR 0 6
27497: PUSH
27498: LD_VAR 0 6
27502: PPUSH
27503: LD_VAR 0 9
27507: PUSH
27508: LD_VAR 0 7
27512: MINUS
27513: PUSH
27514: LD_INT 1
27516: PLUS
27517: PPUSH
27518: LD_VAR 0 9
27522: PUSH
27523: LD_VAR 0 7
27527: ARRAY
27528: PPUSH
27529: CALL_OW 1
27533: ST_TO_ADDR
27534: GO 27490
27536: POP
27537: POP
// end ; tmp := [ ] ;
27538: LD_ADDR_VAR 0 9
27542: PUSH
27543: EMPTY
27544: ST_TO_ADDR
// if mode then
27545: LD_VAR 0 5
27549: IFFALSE 27618
// begin for i = 1 to result do
27551: LD_ADDR_VAR 0 7
27555: PUSH
27556: DOUBLE
27557: LD_INT 1
27559: DEC
27560: ST_TO_ADDR
27561: LD_VAR 0 6
27565: PUSH
27566: FOR_TO
27567: IFFALSE 27606
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27569: LD_ADDR_VAR 0 9
27573: PUSH
27574: LD_VAR 0 9
27578: PPUSH
27579: LD_VAR 0 7
27583: PPUSH
27584: LD_VAR 0 6
27588: PUSH
27589: LD_VAR 0 7
27593: ARRAY
27594: PUSH
27595: LD_INT 1
27597: ARRAY
27598: PPUSH
27599: CALL_OW 1
27603: ST_TO_ADDR
27604: GO 27566
27606: POP
27607: POP
// result := tmp ;
27608: LD_ADDR_VAR 0 6
27612: PUSH
27613: LD_VAR 0 9
27617: ST_TO_ADDR
// end ; end ;
27618: LD_VAR 0 6
27622: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27623: LD_INT 0
27625: PPUSH
27626: PPUSH
27627: PPUSH
27628: PPUSH
27629: PPUSH
27630: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27631: LD_ADDR_VAR 0 5
27635: PUSH
27636: LD_INT 0
27638: PUSH
27639: LD_INT 0
27641: PUSH
27642: LD_INT 0
27644: PUSH
27645: EMPTY
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: ST_TO_ADDR
// if not x or not y then
27653: LD_VAR 0 2
27657: NOT
27658: PUSH
27659: LD_VAR 0 3
27663: NOT
27664: OR
27665: IFFALSE 27669
// exit ;
27667: GO 29321
// if not range then
27669: LD_VAR 0 4
27673: NOT
27674: IFFALSE 27684
// range := 10 ;
27676: LD_ADDR_VAR 0 4
27680: PUSH
27681: LD_INT 10
27683: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27684: LD_ADDR_VAR 0 8
27688: PUSH
27689: LD_INT 81
27691: PUSH
27692: LD_VAR 0 1
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 92
27703: PUSH
27704: LD_VAR 0 2
27708: PUSH
27709: LD_VAR 0 3
27713: PUSH
27714: LD_VAR 0 4
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 3
27727: PUSH
27728: LD_INT 21
27730: PUSH
27731: LD_INT 3
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: LIST
27746: PPUSH
27747: CALL_OW 69
27751: ST_TO_ADDR
// if not tmp then
27752: LD_VAR 0 8
27756: NOT
27757: IFFALSE 27761
// exit ;
27759: GO 29321
// for i in tmp do
27761: LD_ADDR_VAR 0 6
27765: PUSH
27766: LD_VAR 0 8
27770: PUSH
27771: FOR_IN
27772: IFFALSE 29296
// begin points := [ 0 , 0 , 0 ] ;
27774: LD_ADDR_VAR 0 9
27778: PUSH
27779: LD_INT 0
27781: PUSH
27782: LD_INT 0
27784: PUSH
27785: LD_INT 0
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: LIST
27792: ST_TO_ADDR
// bpoints := 1 ;
27793: LD_ADDR_VAR 0 10
27797: PUSH
27798: LD_INT 1
27800: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27801: LD_VAR 0 6
27805: PPUSH
27806: CALL_OW 247
27810: PUSH
27811: LD_INT 1
27813: DOUBLE
27814: EQUAL
27815: IFTRUE 27819
27817: GO 28397
27819: POP
// begin if GetClass ( i ) = 1 then
27820: LD_VAR 0 6
27824: PPUSH
27825: CALL_OW 257
27829: PUSH
27830: LD_INT 1
27832: EQUAL
27833: IFFALSE 27854
// points := [ 10 , 5 , 3 ] ;
27835: LD_ADDR_VAR 0 9
27839: PUSH
27840: LD_INT 10
27842: PUSH
27843: LD_INT 5
27845: PUSH
27846: LD_INT 3
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: LIST
27853: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27854: LD_VAR 0 6
27858: PPUSH
27859: CALL_OW 257
27863: PUSH
27864: LD_INT 2
27866: PUSH
27867: LD_INT 3
27869: PUSH
27870: LD_INT 4
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: LIST
27877: IN
27878: IFFALSE 27899
// points := [ 3 , 2 , 1 ] ;
27880: LD_ADDR_VAR 0 9
27884: PUSH
27885: LD_INT 3
27887: PUSH
27888: LD_INT 2
27890: PUSH
27891: LD_INT 1
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: LIST
27898: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27899: LD_VAR 0 6
27903: PPUSH
27904: CALL_OW 257
27908: PUSH
27909: LD_INT 5
27911: EQUAL
27912: IFFALSE 27933
// points := [ 130 , 5 , 2 ] ;
27914: LD_ADDR_VAR 0 9
27918: PUSH
27919: LD_INT 130
27921: PUSH
27922: LD_INT 5
27924: PUSH
27925: LD_INT 2
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: LIST
27932: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27933: LD_VAR 0 6
27937: PPUSH
27938: CALL_OW 257
27942: PUSH
27943: LD_INT 8
27945: EQUAL
27946: IFFALSE 27967
// points := [ 35 , 35 , 30 ] ;
27948: LD_ADDR_VAR 0 9
27952: PUSH
27953: LD_INT 35
27955: PUSH
27956: LD_INT 35
27958: PUSH
27959: LD_INT 30
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: LIST
27966: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27967: LD_VAR 0 6
27971: PPUSH
27972: CALL_OW 257
27976: PUSH
27977: LD_INT 9
27979: EQUAL
27980: IFFALSE 28001
// points := [ 20 , 55 , 40 ] ;
27982: LD_ADDR_VAR 0 9
27986: PUSH
27987: LD_INT 20
27989: PUSH
27990: LD_INT 55
27992: PUSH
27993: LD_INT 40
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: LIST
28000: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28001: LD_VAR 0 6
28005: PPUSH
28006: CALL_OW 257
28010: PUSH
28011: LD_INT 12
28013: PUSH
28014: LD_INT 16
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: IN
28021: IFFALSE 28042
// points := [ 5 , 3 , 2 ] ;
28023: LD_ADDR_VAR 0 9
28027: PUSH
28028: LD_INT 5
28030: PUSH
28031: LD_INT 3
28033: PUSH
28034: LD_INT 2
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: LIST
28041: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28042: LD_VAR 0 6
28046: PPUSH
28047: CALL_OW 257
28051: PUSH
28052: LD_INT 17
28054: EQUAL
28055: IFFALSE 28076
// points := [ 100 , 50 , 75 ] ;
28057: LD_ADDR_VAR 0 9
28061: PUSH
28062: LD_INT 100
28064: PUSH
28065: LD_INT 50
28067: PUSH
28068: LD_INT 75
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: LIST
28075: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28076: LD_VAR 0 6
28080: PPUSH
28081: CALL_OW 257
28085: PUSH
28086: LD_INT 15
28088: EQUAL
28089: IFFALSE 28110
// points := [ 10 , 5 , 3 ] ;
28091: LD_ADDR_VAR 0 9
28095: PUSH
28096: LD_INT 10
28098: PUSH
28099: LD_INT 5
28101: PUSH
28102: LD_INT 3
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: LIST
28109: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28110: LD_VAR 0 6
28114: PPUSH
28115: CALL_OW 257
28119: PUSH
28120: LD_INT 14
28122: EQUAL
28123: IFFALSE 28144
// points := [ 10 , 0 , 0 ] ;
28125: LD_ADDR_VAR 0 9
28129: PUSH
28130: LD_INT 10
28132: PUSH
28133: LD_INT 0
28135: PUSH
28136: LD_INT 0
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: LIST
28143: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28144: LD_VAR 0 6
28148: PPUSH
28149: CALL_OW 257
28153: PUSH
28154: LD_INT 11
28156: EQUAL
28157: IFFALSE 28178
// points := [ 30 , 10 , 5 ] ;
28159: LD_ADDR_VAR 0 9
28163: PUSH
28164: LD_INT 30
28166: PUSH
28167: LD_INT 10
28169: PUSH
28170: LD_INT 5
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: LIST
28177: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28178: LD_VAR 0 1
28182: PPUSH
28183: LD_INT 5
28185: PPUSH
28186: CALL_OW 321
28190: PUSH
28191: LD_INT 2
28193: EQUAL
28194: IFFALSE 28211
// bpoints := bpoints * 1.8 ;
28196: LD_ADDR_VAR 0 10
28200: PUSH
28201: LD_VAR 0 10
28205: PUSH
28206: LD_REAL  1.80000000000000E+0000
28209: MUL
28210: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28211: LD_VAR 0 6
28215: PPUSH
28216: CALL_OW 257
28220: PUSH
28221: LD_INT 1
28223: PUSH
28224: LD_INT 2
28226: PUSH
28227: LD_INT 3
28229: PUSH
28230: LD_INT 4
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: IN
28239: PUSH
28240: LD_VAR 0 1
28244: PPUSH
28245: LD_INT 51
28247: PPUSH
28248: CALL_OW 321
28252: PUSH
28253: LD_INT 2
28255: EQUAL
28256: AND
28257: IFFALSE 28274
// bpoints := bpoints * 1.2 ;
28259: LD_ADDR_VAR 0 10
28263: PUSH
28264: LD_VAR 0 10
28268: PUSH
28269: LD_REAL  1.20000000000000E+0000
28272: MUL
28273: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28274: LD_VAR 0 6
28278: PPUSH
28279: CALL_OW 257
28283: PUSH
28284: LD_INT 5
28286: PUSH
28287: LD_INT 7
28289: PUSH
28290: LD_INT 9
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: LIST
28297: IN
28298: PUSH
28299: LD_VAR 0 1
28303: PPUSH
28304: LD_INT 52
28306: PPUSH
28307: CALL_OW 321
28311: PUSH
28312: LD_INT 2
28314: EQUAL
28315: AND
28316: IFFALSE 28333
// bpoints := bpoints * 1.5 ;
28318: LD_ADDR_VAR 0 10
28322: PUSH
28323: LD_VAR 0 10
28327: PUSH
28328: LD_REAL  1.50000000000000E+0000
28331: MUL
28332: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28333: LD_VAR 0 1
28337: PPUSH
28338: LD_INT 66
28340: PPUSH
28341: CALL_OW 321
28345: PUSH
28346: LD_INT 2
28348: EQUAL
28349: IFFALSE 28366
// bpoints := bpoints * 1.1 ;
28351: LD_ADDR_VAR 0 10
28355: PUSH
28356: LD_VAR 0 10
28360: PUSH
28361: LD_REAL  1.10000000000000E+0000
28364: MUL
28365: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28366: LD_ADDR_VAR 0 10
28370: PUSH
28371: LD_VAR 0 10
28375: PUSH
28376: LD_VAR 0 6
28380: PPUSH
28381: LD_INT 1
28383: PPUSH
28384: CALL_OW 259
28388: PUSH
28389: LD_REAL  1.15000000000000E+0000
28392: MUL
28393: MUL
28394: ST_TO_ADDR
// end ; unit_vehicle :
28395: GO 29225
28397: LD_INT 2
28399: DOUBLE
28400: EQUAL
28401: IFTRUE 28405
28403: GO 29213
28405: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28406: LD_VAR 0 6
28410: PPUSH
28411: CALL_OW 264
28415: PUSH
28416: LD_INT 2
28418: PUSH
28419: LD_INT 42
28421: PUSH
28422: LD_INT 24
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: LIST
28429: IN
28430: IFFALSE 28451
// points := [ 25 , 5 , 3 ] ;
28432: LD_ADDR_VAR 0 9
28436: PUSH
28437: LD_INT 25
28439: PUSH
28440: LD_INT 5
28442: PUSH
28443: LD_INT 3
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: LIST
28450: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28451: LD_VAR 0 6
28455: PPUSH
28456: CALL_OW 264
28460: PUSH
28461: LD_INT 4
28463: PUSH
28464: LD_INT 43
28466: PUSH
28467: LD_INT 25
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: LIST
28474: IN
28475: IFFALSE 28496
// points := [ 40 , 15 , 5 ] ;
28477: LD_ADDR_VAR 0 9
28481: PUSH
28482: LD_INT 40
28484: PUSH
28485: LD_INT 15
28487: PUSH
28488: LD_INT 5
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: LIST
28495: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28496: LD_VAR 0 6
28500: PPUSH
28501: CALL_OW 264
28505: PUSH
28506: LD_INT 3
28508: PUSH
28509: LD_INT 23
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: IN
28516: IFFALSE 28537
// points := [ 7 , 25 , 8 ] ;
28518: LD_ADDR_VAR 0 9
28522: PUSH
28523: LD_INT 7
28525: PUSH
28526: LD_INT 25
28528: PUSH
28529: LD_INT 8
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: LIST
28536: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28537: LD_VAR 0 6
28541: PPUSH
28542: CALL_OW 264
28546: PUSH
28547: LD_INT 5
28549: PUSH
28550: LD_INT 27
28552: PUSH
28553: LD_INT 44
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: LIST
28560: IN
28561: IFFALSE 28582
// points := [ 14 , 50 , 16 ] ;
28563: LD_ADDR_VAR 0 9
28567: PUSH
28568: LD_INT 14
28570: PUSH
28571: LD_INT 50
28573: PUSH
28574: LD_INT 16
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: LIST
28581: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28582: LD_VAR 0 6
28586: PPUSH
28587: CALL_OW 264
28591: PUSH
28592: LD_INT 6
28594: PUSH
28595: LD_INT 46
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: IN
28602: IFFALSE 28623
// points := [ 32 , 120 , 70 ] ;
28604: LD_ADDR_VAR 0 9
28608: PUSH
28609: LD_INT 32
28611: PUSH
28612: LD_INT 120
28614: PUSH
28615: LD_INT 70
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: LIST
28622: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28623: LD_VAR 0 6
28627: PPUSH
28628: CALL_OW 264
28632: PUSH
28633: LD_INT 7
28635: PUSH
28636: LD_INT 28
28638: PUSH
28639: LD_INT 45
28641: PUSH
28642: LD_EXP 77
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: IN
28653: IFFALSE 28674
// points := [ 35 , 20 , 45 ] ;
28655: LD_ADDR_VAR 0 9
28659: PUSH
28660: LD_INT 35
28662: PUSH
28663: LD_INT 20
28665: PUSH
28666: LD_INT 45
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: LIST
28673: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28674: LD_VAR 0 6
28678: PPUSH
28679: CALL_OW 264
28683: PUSH
28684: LD_INT 47
28686: PUSH
28687: EMPTY
28688: LIST
28689: IN
28690: IFFALSE 28711
// points := [ 67 , 45 , 75 ] ;
28692: LD_ADDR_VAR 0 9
28696: PUSH
28697: LD_INT 67
28699: PUSH
28700: LD_INT 45
28702: PUSH
28703: LD_INT 75
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: LIST
28710: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28711: LD_VAR 0 6
28715: PPUSH
28716: CALL_OW 264
28720: PUSH
28721: LD_INT 26
28723: PUSH
28724: EMPTY
28725: LIST
28726: IN
28727: IFFALSE 28748
// points := [ 120 , 30 , 80 ] ;
28729: LD_ADDR_VAR 0 9
28733: PUSH
28734: LD_INT 120
28736: PUSH
28737: LD_INT 30
28739: PUSH
28740: LD_INT 80
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: LIST
28747: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28748: LD_VAR 0 6
28752: PPUSH
28753: CALL_OW 264
28757: PUSH
28758: LD_INT 22
28760: PUSH
28761: EMPTY
28762: LIST
28763: IN
28764: IFFALSE 28785
// points := [ 40 , 1 , 1 ] ;
28766: LD_ADDR_VAR 0 9
28770: PUSH
28771: LD_INT 40
28773: PUSH
28774: LD_INT 1
28776: PUSH
28777: LD_INT 1
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: LIST
28784: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28785: LD_VAR 0 6
28789: PPUSH
28790: CALL_OW 264
28794: PUSH
28795: LD_INT 29
28797: PUSH
28798: EMPTY
28799: LIST
28800: IN
28801: IFFALSE 28822
// points := [ 70 , 200 , 400 ] ;
28803: LD_ADDR_VAR 0 9
28807: PUSH
28808: LD_INT 70
28810: PUSH
28811: LD_INT 200
28813: PUSH
28814: LD_INT 400
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: LIST
28821: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28822: LD_VAR 0 6
28826: PPUSH
28827: CALL_OW 264
28831: PUSH
28832: LD_INT 14
28834: PUSH
28835: LD_INT 53
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: IN
28842: IFFALSE 28863
// points := [ 40 , 10 , 20 ] ;
28844: LD_ADDR_VAR 0 9
28848: PUSH
28849: LD_INT 40
28851: PUSH
28852: LD_INT 10
28854: PUSH
28855: LD_INT 20
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: LIST
28862: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28863: LD_VAR 0 6
28867: PPUSH
28868: CALL_OW 264
28872: PUSH
28873: LD_INT 9
28875: PUSH
28876: EMPTY
28877: LIST
28878: IN
28879: IFFALSE 28900
// points := [ 5 , 70 , 20 ] ;
28881: LD_ADDR_VAR 0 9
28885: PUSH
28886: LD_INT 5
28888: PUSH
28889: LD_INT 70
28891: PUSH
28892: LD_INT 20
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: LIST
28899: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28900: LD_VAR 0 6
28904: PPUSH
28905: CALL_OW 264
28909: PUSH
28910: LD_INT 10
28912: PUSH
28913: EMPTY
28914: LIST
28915: IN
28916: IFFALSE 28937
// points := [ 35 , 110 , 70 ] ;
28918: LD_ADDR_VAR 0 9
28922: PUSH
28923: LD_INT 35
28925: PUSH
28926: LD_INT 110
28928: PUSH
28929: LD_INT 70
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: LIST
28936: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28937: LD_VAR 0 6
28941: PPUSH
28942: CALL_OW 265
28946: PUSH
28947: LD_INT 25
28949: EQUAL
28950: IFFALSE 28971
// points := [ 80 , 65 , 100 ] ;
28952: LD_ADDR_VAR 0 9
28956: PUSH
28957: LD_INT 80
28959: PUSH
28960: LD_INT 65
28962: PUSH
28963: LD_INT 100
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: LIST
28970: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28971: LD_VAR 0 6
28975: PPUSH
28976: CALL_OW 263
28980: PUSH
28981: LD_INT 1
28983: EQUAL
28984: IFFALSE 29019
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28986: LD_ADDR_VAR 0 10
28990: PUSH
28991: LD_VAR 0 10
28995: PUSH
28996: LD_VAR 0 6
29000: PPUSH
29001: CALL_OW 311
29005: PPUSH
29006: LD_INT 3
29008: PPUSH
29009: CALL_OW 259
29013: PUSH
29014: LD_INT 4
29016: MUL
29017: MUL
29018: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29019: LD_VAR 0 6
29023: PPUSH
29024: CALL_OW 263
29028: PUSH
29029: LD_INT 2
29031: EQUAL
29032: IFFALSE 29083
// begin j := IsControledBy ( i ) ;
29034: LD_ADDR_VAR 0 7
29038: PUSH
29039: LD_VAR 0 6
29043: PPUSH
29044: CALL_OW 312
29048: ST_TO_ADDR
// if j then
29049: LD_VAR 0 7
29053: IFFALSE 29083
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29055: LD_ADDR_VAR 0 10
29059: PUSH
29060: LD_VAR 0 10
29064: PUSH
29065: LD_VAR 0 7
29069: PPUSH
29070: LD_INT 3
29072: PPUSH
29073: CALL_OW 259
29077: PUSH
29078: LD_INT 3
29080: MUL
29081: MUL
29082: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29083: LD_VAR 0 6
29087: PPUSH
29088: CALL_OW 264
29092: PUSH
29093: LD_INT 5
29095: PUSH
29096: LD_INT 6
29098: PUSH
29099: LD_INT 46
29101: PUSH
29102: LD_INT 44
29104: PUSH
29105: LD_INT 47
29107: PUSH
29108: LD_INT 45
29110: PUSH
29111: LD_INT 28
29113: PUSH
29114: LD_INT 7
29116: PUSH
29117: LD_INT 27
29119: PUSH
29120: LD_INT 29
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: IN
29135: PUSH
29136: LD_VAR 0 1
29140: PPUSH
29141: LD_INT 52
29143: PPUSH
29144: CALL_OW 321
29148: PUSH
29149: LD_INT 2
29151: EQUAL
29152: AND
29153: IFFALSE 29170
// bpoints := bpoints * 1.2 ;
29155: LD_ADDR_VAR 0 10
29159: PUSH
29160: LD_VAR 0 10
29164: PUSH
29165: LD_REAL  1.20000000000000E+0000
29168: MUL
29169: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29170: LD_VAR 0 6
29174: PPUSH
29175: CALL_OW 264
29179: PUSH
29180: LD_INT 6
29182: PUSH
29183: LD_INT 46
29185: PUSH
29186: LD_INT 47
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: LIST
29193: IN
29194: IFFALSE 29211
// bpoints := bpoints * 1.2 ;
29196: LD_ADDR_VAR 0 10
29200: PUSH
29201: LD_VAR 0 10
29205: PUSH
29206: LD_REAL  1.20000000000000E+0000
29209: MUL
29210: ST_TO_ADDR
// end ; unit_building :
29211: GO 29225
29213: LD_INT 3
29215: DOUBLE
29216: EQUAL
29217: IFTRUE 29221
29219: GO 29224
29221: POP
// ; end ;
29222: GO 29225
29224: POP
// for j = 1 to 3 do
29225: LD_ADDR_VAR 0 7
29229: PUSH
29230: DOUBLE
29231: LD_INT 1
29233: DEC
29234: ST_TO_ADDR
29235: LD_INT 3
29237: PUSH
29238: FOR_TO
29239: IFFALSE 29292
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29241: LD_ADDR_VAR 0 5
29245: PUSH
29246: LD_VAR 0 5
29250: PPUSH
29251: LD_VAR 0 7
29255: PPUSH
29256: LD_VAR 0 5
29260: PUSH
29261: LD_VAR 0 7
29265: ARRAY
29266: PUSH
29267: LD_VAR 0 9
29271: PUSH
29272: LD_VAR 0 7
29276: ARRAY
29277: PUSH
29278: LD_VAR 0 10
29282: MUL
29283: PLUS
29284: PPUSH
29285: CALL_OW 1
29289: ST_TO_ADDR
29290: GO 29238
29292: POP
29293: POP
// end ;
29294: GO 27771
29296: POP
29297: POP
// result := Replace ( result , 4 , tmp ) ;
29298: LD_ADDR_VAR 0 5
29302: PUSH
29303: LD_VAR 0 5
29307: PPUSH
29308: LD_INT 4
29310: PPUSH
29311: LD_VAR 0 8
29315: PPUSH
29316: CALL_OW 1
29320: ST_TO_ADDR
// end ;
29321: LD_VAR 0 5
29325: RET
// export function DangerAtRange ( unit , range ) ; begin
29326: LD_INT 0
29328: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29329: LD_ADDR_VAR 0 3
29333: PUSH
29334: LD_VAR 0 1
29338: PPUSH
29339: CALL_OW 255
29343: PPUSH
29344: LD_VAR 0 1
29348: PPUSH
29349: CALL_OW 250
29353: PPUSH
29354: LD_VAR 0 1
29358: PPUSH
29359: CALL_OW 251
29363: PPUSH
29364: LD_VAR 0 2
29368: PPUSH
29369: CALL 27623 0 4
29373: ST_TO_ADDR
// end ;
29374: LD_VAR 0 3
29378: RET
// export function DangerInArea ( side , area ) ; begin
29379: LD_INT 0
29381: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29382: LD_ADDR_VAR 0 3
29386: PUSH
29387: LD_VAR 0 2
29391: PPUSH
29392: LD_INT 81
29394: PUSH
29395: LD_VAR 0 1
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PPUSH
29404: CALL_OW 70
29408: ST_TO_ADDR
// end ;
29409: LD_VAR 0 3
29413: RET
// export function IsExtension ( b ) ; begin
29414: LD_INT 0
29416: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29417: LD_ADDR_VAR 0 2
29421: PUSH
29422: LD_VAR 0 1
29426: PUSH
29427: LD_INT 23
29429: PUSH
29430: LD_INT 20
29432: PUSH
29433: LD_INT 22
29435: PUSH
29436: LD_INT 17
29438: PUSH
29439: LD_INT 24
29441: PUSH
29442: LD_INT 21
29444: PUSH
29445: LD_INT 19
29447: PUSH
29448: LD_INT 16
29450: PUSH
29451: LD_INT 25
29453: PUSH
29454: LD_INT 18
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: IN
29469: ST_TO_ADDR
// end ;
29470: LD_VAR 0 2
29474: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29475: LD_INT 0
29477: PPUSH
29478: PPUSH
29479: PPUSH
// result := [ ] ;
29480: LD_ADDR_VAR 0 4
29484: PUSH
29485: EMPTY
29486: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29487: LD_ADDR_VAR 0 5
29491: PUSH
29492: LD_VAR 0 2
29496: PPUSH
29497: LD_INT 21
29499: PUSH
29500: LD_INT 3
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PPUSH
29507: CALL_OW 70
29511: ST_TO_ADDR
// if not tmp then
29512: LD_VAR 0 5
29516: NOT
29517: IFFALSE 29521
// exit ;
29519: GO 29585
// if checkLink then
29521: LD_VAR 0 3
29525: IFFALSE 29575
// begin for i in tmp do
29527: LD_ADDR_VAR 0 6
29531: PUSH
29532: LD_VAR 0 5
29536: PUSH
29537: FOR_IN
29538: IFFALSE 29573
// if GetBase ( i ) <> base then
29540: LD_VAR 0 6
29544: PPUSH
29545: CALL_OW 274
29549: PUSH
29550: LD_VAR 0 1
29554: NONEQUAL
29555: IFFALSE 29571
// ComLinkToBase ( base , i ) ;
29557: LD_VAR 0 1
29561: PPUSH
29562: LD_VAR 0 6
29566: PPUSH
29567: CALL_OW 169
29571: GO 29537
29573: POP
29574: POP
// end ; result := tmp ;
29575: LD_ADDR_VAR 0 4
29579: PUSH
29580: LD_VAR 0 5
29584: ST_TO_ADDR
// end ;
29585: LD_VAR 0 4
29589: RET
// export function ComComplete ( units , b ) ; var i ; begin
29590: LD_INT 0
29592: PPUSH
29593: PPUSH
// if not units then
29594: LD_VAR 0 1
29598: NOT
29599: IFFALSE 29603
// exit ;
29601: GO 29693
// for i in units do
29603: LD_ADDR_VAR 0 4
29607: PUSH
29608: LD_VAR 0 1
29612: PUSH
29613: FOR_IN
29614: IFFALSE 29691
// if BuildingStatus ( b ) = bs_build then
29616: LD_VAR 0 2
29620: PPUSH
29621: CALL_OW 461
29625: PUSH
29626: LD_INT 1
29628: EQUAL
29629: IFFALSE 29689
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29631: LD_VAR 0 4
29635: PPUSH
29636: LD_STRING h
29638: PUSH
29639: LD_VAR 0 2
29643: PPUSH
29644: CALL_OW 250
29648: PUSH
29649: LD_VAR 0 2
29653: PPUSH
29654: CALL_OW 251
29658: PUSH
29659: LD_VAR 0 2
29663: PUSH
29664: LD_INT 0
29666: PUSH
29667: LD_INT 0
29669: PUSH
29670: LD_INT 0
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: PUSH
29682: EMPTY
29683: LIST
29684: PPUSH
29685: CALL_OW 446
29689: GO 29613
29691: POP
29692: POP
// end ;
29693: LD_VAR 0 3
29697: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29698: LD_INT 0
29700: PPUSH
29701: PPUSH
29702: PPUSH
29703: PPUSH
29704: PPUSH
29705: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29706: LD_VAR 0 1
29710: NOT
29711: PUSH
29712: LD_VAR 0 1
29716: PPUSH
29717: CALL_OW 263
29721: PUSH
29722: LD_INT 2
29724: NONEQUAL
29725: OR
29726: IFFALSE 29730
// exit ;
29728: GO 30046
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29730: LD_ADDR_VAR 0 6
29734: PUSH
29735: LD_INT 22
29737: PUSH
29738: LD_VAR 0 1
29742: PPUSH
29743: CALL_OW 255
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 2
29754: PUSH
29755: LD_INT 30
29757: PUSH
29758: LD_INT 36
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 34
29767: PUSH
29768: LD_INT 31
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: LIST
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PPUSH
29784: CALL_OW 69
29788: ST_TO_ADDR
// if not tmp then
29789: LD_VAR 0 6
29793: NOT
29794: IFFALSE 29798
// exit ;
29796: GO 30046
// result := [ ] ;
29798: LD_ADDR_VAR 0 2
29802: PUSH
29803: EMPTY
29804: ST_TO_ADDR
// for i in tmp do
29805: LD_ADDR_VAR 0 3
29809: PUSH
29810: LD_VAR 0 6
29814: PUSH
29815: FOR_IN
29816: IFFALSE 29887
// begin t := UnitsInside ( i ) ;
29818: LD_ADDR_VAR 0 4
29822: PUSH
29823: LD_VAR 0 3
29827: PPUSH
29828: CALL_OW 313
29832: ST_TO_ADDR
// if t then
29833: LD_VAR 0 4
29837: IFFALSE 29885
// for j in t do
29839: LD_ADDR_VAR 0 7
29843: PUSH
29844: LD_VAR 0 4
29848: PUSH
29849: FOR_IN
29850: IFFALSE 29883
// result := Replace ( result , result + 1 , j ) ;
29852: LD_ADDR_VAR 0 2
29856: PUSH
29857: LD_VAR 0 2
29861: PPUSH
29862: LD_VAR 0 2
29866: PUSH
29867: LD_INT 1
29869: PLUS
29870: PPUSH
29871: LD_VAR 0 7
29875: PPUSH
29876: CALL_OW 1
29880: ST_TO_ADDR
29881: GO 29849
29883: POP
29884: POP
// end ;
29885: GO 29815
29887: POP
29888: POP
// if not result then
29889: LD_VAR 0 2
29893: NOT
29894: IFFALSE 29898
// exit ;
29896: GO 30046
// mech := result [ 1 ] ;
29898: LD_ADDR_VAR 0 5
29902: PUSH
29903: LD_VAR 0 2
29907: PUSH
29908: LD_INT 1
29910: ARRAY
29911: ST_TO_ADDR
// if result > 1 then
29912: LD_VAR 0 2
29916: PUSH
29917: LD_INT 1
29919: GREATER
29920: IFFALSE 30032
// begin for i = 2 to result do
29922: LD_ADDR_VAR 0 3
29926: PUSH
29927: DOUBLE
29928: LD_INT 2
29930: DEC
29931: ST_TO_ADDR
29932: LD_VAR 0 2
29936: PUSH
29937: FOR_TO
29938: IFFALSE 30030
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29940: LD_ADDR_VAR 0 4
29944: PUSH
29945: LD_VAR 0 2
29949: PUSH
29950: LD_VAR 0 3
29954: ARRAY
29955: PPUSH
29956: LD_INT 3
29958: PPUSH
29959: CALL_OW 259
29963: PUSH
29964: LD_VAR 0 2
29968: PUSH
29969: LD_VAR 0 3
29973: ARRAY
29974: PPUSH
29975: CALL_OW 432
29979: MINUS
29980: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29981: LD_VAR 0 4
29985: PUSH
29986: LD_VAR 0 5
29990: PPUSH
29991: LD_INT 3
29993: PPUSH
29994: CALL_OW 259
29998: PUSH
29999: LD_VAR 0 5
30003: PPUSH
30004: CALL_OW 432
30008: MINUS
30009: GREATEREQUAL
30010: IFFALSE 30028
// mech := result [ i ] ;
30012: LD_ADDR_VAR 0 5
30016: PUSH
30017: LD_VAR 0 2
30021: PUSH
30022: LD_VAR 0 3
30026: ARRAY
30027: ST_TO_ADDR
// end ;
30028: GO 29937
30030: POP
30031: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30032: LD_VAR 0 1
30036: PPUSH
30037: LD_VAR 0 5
30041: PPUSH
30042: CALL_OW 135
// end ;
30046: LD_VAR 0 2
30050: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30051: LD_INT 0
30053: PPUSH
30054: PPUSH
30055: PPUSH
30056: PPUSH
30057: PPUSH
30058: PPUSH
30059: PPUSH
30060: PPUSH
30061: PPUSH
30062: PPUSH
30063: PPUSH
30064: PPUSH
30065: PPUSH
// result := [ ] ;
30066: LD_ADDR_VAR 0 7
30070: PUSH
30071: EMPTY
30072: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30073: LD_VAR 0 1
30077: PPUSH
30078: CALL_OW 266
30082: PUSH
30083: LD_INT 0
30085: PUSH
30086: LD_INT 1
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: IN
30093: NOT
30094: IFFALSE 30098
// exit ;
30096: GO 31732
// if name then
30098: LD_VAR 0 3
30102: IFFALSE 30118
// SetBName ( base_dep , name ) ;
30104: LD_VAR 0 1
30108: PPUSH
30109: LD_VAR 0 3
30113: PPUSH
30114: CALL_OW 500
// base := GetBase ( base_dep ) ;
30118: LD_ADDR_VAR 0 15
30122: PUSH
30123: LD_VAR 0 1
30127: PPUSH
30128: CALL_OW 274
30132: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30133: LD_ADDR_VAR 0 16
30137: PUSH
30138: LD_VAR 0 1
30142: PPUSH
30143: CALL_OW 255
30147: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30148: LD_ADDR_VAR 0 17
30152: PUSH
30153: LD_VAR 0 1
30157: PPUSH
30158: CALL_OW 248
30162: ST_TO_ADDR
// if sources then
30163: LD_VAR 0 5
30167: IFFALSE 30214
// for i = 1 to 3 do
30169: LD_ADDR_VAR 0 8
30173: PUSH
30174: DOUBLE
30175: LD_INT 1
30177: DEC
30178: ST_TO_ADDR
30179: LD_INT 3
30181: PUSH
30182: FOR_TO
30183: IFFALSE 30212
// AddResourceType ( base , i , sources [ i ] ) ;
30185: LD_VAR 0 15
30189: PPUSH
30190: LD_VAR 0 8
30194: PPUSH
30195: LD_VAR 0 5
30199: PUSH
30200: LD_VAR 0 8
30204: ARRAY
30205: PPUSH
30206: CALL_OW 276
30210: GO 30182
30212: POP
30213: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30214: LD_ADDR_VAR 0 18
30218: PUSH
30219: LD_VAR 0 15
30223: PPUSH
30224: LD_VAR 0 2
30228: PPUSH
30229: LD_INT 1
30231: PPUSH
30232: CALL 29475 0 3
30236: ST_TO_ADDR
// InitHc ;
30237: CALL_OW 19
// InitUc ;
30241: CALL_OW 18
// uc_side := side ;
30245: LD_ADDR_OWVAR 20
30249: PUSH
30250: LD_VAR 0 16
30254: ST_TO_ADDR
// uc_nation := nation ;
30255: LD_ADDR_OWVAR 21
30259: PUSH
30260: LD_VAR 0 17
30264: ST_TO_ADDR
// if buildings then
30265: LD_VAR 0 18
30269: IFFALSE 31591
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30271: LD_ADDR_VAR 0 19
30275: PUSH
30276: LD_VAR 0 18
30280: PPUSH
30281: LD_INT 2
30283: PUSH
30284: LD_INT 30
30286: PUSH
30287: LD_INT 29
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 30
30296: PUSH
30297: LD_INT 30
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: LIST
30308: PPUSH
30309: CALL_OW 72
30313: ST_TO_ADDR
// if tmp then
30314: LD_VAR 0 19
30318: IFFALSE 30366
// for i in tmp do
30320: LD_ADDR_VAR 0 8
30324: PUSH
30325: LD_VAR 0 19
30329: PUSH
30330: FOR_IN
30331: IFFALSE 30364
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30333: LD_VAR 0 8
30337: PPUSH
30338: CALL_OW 250
30342: PPUSH
30343: LD_VAR 0 8
30347: PPUSH
30348: CALL_OW 251
30352: PPUSH
30353: LD_VAR 0 16
30357: PPUSH
30358: CALL_OW 441
30362: GO 30330
30364: POP
30365: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30366: LD_VAR 0 18
30370: PPUSH
30371: LD_INT 2
30373: PUSH
30374: LD_INT 30
30376: PUSH
30377: LD_INT 32
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 30
30386: PUSH
30387: LD_INT 33
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: LIST
30398: PPUSH
30399: CALL_OW 72
30403: IFFALSE 30491
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30405: LD_ADDR_VAR 0 8
30409: PUSH
30410: LD_VAR 0 18
30414: PPUSH
30415: LD_INT 2
30417: PUSH
30418: LD_INT 30
30420: PUSH
30421: LD_INT 32
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 30
30430: PUSH
30431: LD_INT 33
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: LIST
30442: PPUSH
30443: CALL_OW 72
30447: PUSH
30448: FOR_IN
30449: IFFALSE 30489
// begin if not GetBWeapon ( i ) then
30451: LD_VAR 0 8
30455: PPUSH
30456: CALL_OW 269
30460: NOT
30461: IFFALSE 30487
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30463: LD_VAR 0 8
30467: PPUSH
30468: LD_VAR 0 8
30472: PPUSH
30473: LD_VAR 0 2
30477: PPUSH
30478: CALL 31737 0 2
30482: PPUSH
30483: CALL_OW 431
// end ;
30487: GO 30448
30489: POP
30490: POP
// end ; for i = 1 to personel do
30491: LD_ADDR_VAR 0 8
30495: PUSH
30496: DOUBLE
30497: LD_INT 1
30499: DEC
30500: ST_TO_ADDR
30501: LD_VAR 0 6
30505: PUSH
30506: FOR_TO
30507: IFFALSE 31571
// begin if i > 4 then
30509: LD_VAR 0 8
30513: PUSH
30514: LD_INT 4
30516: GREATER
30517: IFFALSE 30521
// break ;
30519: GO 31571
// case i of 1 :
30521: LD_VAR 0 8
30525: PUSH
30526: LD_INT 1
30528: DOUBLE
30529: EQUAL
30530: IFTRUE 30534
30532: GO 30614
30534: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30535: LD_ADDR_VAR 0 12
30539: PUSH
30540: LD_VAR 0 18
30544: PPUSH
30545: LD_INT 22
30547: PUSH
30548: LD_VAR 0 16
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 58
30559: PUSH
30560: EMPTY
30561: LIST
30562: PUSH
30563: LD_INT 2
30565: PUSH
30566: LD_INT 30
30568: PUSH
30569: LD_INT 32
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 30
30578: PUSH
30579: LD_INT 4
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 30
30588: PUSH
30589: LD_INT 5
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: LIST
30606: PPUSH
30607: CALL_OW 72
30611: ST_TO_ADDR
30612: GO 30836
30614: LD_INT 2
30616: DOUBLE
30617: EQUAL
30618: IFTRUE 30622
30620: GO 30684
30622: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30623: LD_ADDR_VAR 0 12
30627: PUSH
30628: LD_VAR 0 18
30632: PPUSH
30633: LD_INT 22
30635: PUSH
30636: LD_VAR 0 16
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 2
30647: PUSH
30648: LD_INT 30
30650: PUSH
30651: LD_INT 0
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 30
30660: PUSH
30661: LD_INT 1
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: LIST
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PPUSH
30677: CALL_OW 72
30681: ST_TO_ADDR
30682: GO 30836
30684: LD_INT 3
30686: DOUBLE
30687: EQUAL
30688: IFTRUE 30692
30690: GO 30754
30692: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30693: LD_ADDR_VAR 0 12
30697: PUSH
30698: LD_VAR 0 18
30702: PPUSH
30703: LD_INT 22
30705: PUSH
30706: LD_VAR 0 16
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 2
30717: PUSH
30718: LD_INT 30
30720: PUSH
30721: LD_INT 2
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 30
30730: PUSH
30731: LD_INT 3
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: LIST
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PPUSH
30747: CALL_OW 72
30751: ST_TO_ADDR
30752: GO 30836
30754: LD_INT 4
30756: DOUBLE
30757: EQUAL
30758: IFTRUE 30762
30760: GO 30835
30762: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30763: LD_ADDR_VAR 0 12
30767: PUSH
30768: LD_VAR 0 18
30772: PPUSH
30773: LD_INT 22
30775: PUSH
30776: LD_VAR 0 16
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 2
30787: PUSH
30788: LD_INT 30
30790: PUSH
30791: LD_INT 6
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 30
30800: PUSH
30801: LD_INT 7
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 30
30810: PUSH
30811: LD_INT 8
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PPUSH
30828: CALL_OW 72
30832: ST_TO_ADDR
30833: GO 30836
30835: POP
// if i = 1 then
30836: LD_VAR 0 8
30840: PUSH
30841: LD_INT 1
30843: EQUAL
30844: IFFALSE 30955
// begin tmp := [ ] ;
30846: LD_ADDR_VAR 0 19
30850: PUSH
30851: EMPTY
30852: ST_TO_ADDR
// for j in f do
30853: LD_ADDR_VAR 0 9
30857: PUSH
30858: LD_VAR 0 12
30862: PUSH
30863: FOR_IN
30864: IFFALSE 30937
// if GetBType ( j ) = b_bunker then
30866: LD_VAR 0 9
30870: PPUSH
30871: CALL_OW 266
30875: PUSH
30876: LD_INT 32
30878: EQUAL
30879: IFFALSE 30906
// tmp := Insert ( tmp , 1 , j ) else
30881: LD_ADDR_VAR 0 19
30885: PUSH
30886: LD_VAR 0 19
30890: PPUSH
30891: LD_INT 1
30893: PPUSH
30894: LD_VAR 0 9
30898: PPUSH
30899: CALL_OW 2
30903: ST_TO_ADDR
30904: GO 30935
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30906: LD_ADDR_VAR 0 19
30910: PUSH
30911: LD_VAR 0 19
30915: PPUSH
30916: LD_VAR 0 19
30920: PUSH
30921: LD_INT 1
30923: PLUS
30924: PPUSH
30925: LD_VAR 0 9
30929: PPUSH
30930: CALL_OW 2
30934: ST_TO_ADDR
30935: GO 30863
30937: POP
30938: POP
// if tmp then
30939: LD_VAR 0 19
30943: IFFALSE 30955
// f := tmp ;
30945: LD_ADDR_VAR 0 12
30949: PUSH
30950: LD_VAR 0 19
30954: ST_TO_ADDR
// end ; x := personel [ i ] ;
30955: LD_ADDR_VAR 0 13
30959: PUSH
30960: LD_VAR 0 6
30964: PUSH
30965: LD_VAR 0 8
30969: ARRAY
30970: ST_TO_ADDR
// if x = - 1 then
30971: LD_VAR 0 13
30975: PUSH
30976: LD_INT 1
30978: NEG
30979: EQUAL
30980: IFFALSE 31189
// begin for j in f do
30982: LD_ADDR_VAR 0 9
30986: PUSH
30987: LD_VAR 0 12
30991: PUSH
30992: FOR_IN
30993: IFFALSE 31185
// repeat InitHc ;
30995: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30999: LD_VAR 0 9
31003: PPUSH
31004: CALL_OW 266
31008: PUSH
31009: LD_INT 5
31011: EQUAL
31012: IFFALSE 31082
// begin if UnitsInside ( j ) < 3 then
31014: LD_VAR 0 9
31018: PPUSH
31019: CALL_OW 313
31023: PUSH
31024: LD_INT 3
31026: LESS
31027: IFFALSE 31063
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31029: LD_INT 0
31031: PPUSH
31032: LD_INT 5
31034: PUSH
31035: LD_INT 8
31037: PUSH
31038: LD_INT 9
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: LIST
31045: PUSH
31046: LD_VAR 0 17
31050: ARRAY
31051: PPUSH
31052: LD_VAR 0 4
31056: PPUSH
31057: CALL_OW 380
31061: GO 31080
// PrepareHuman ( false , i , skill ) ;
31063: LD_INT 0
31065: PPUSH
31066: LD_VAR 0 8
31070: PPUSH
31071: LD_VAR 0 4
31075: PPUSH
31076: CALL_OW 380
// end else
31080: GO 31099
// PrepareHuman ( false , i , skill ) ;
31082: LD_INT 0
31084: PPUSH
31085: LD_VAR 0 8
31089: PPUSH
31090: LD_VAR 0 4
31094: PPUSH
31095: CALL_OW 380
// un := CreateHuman ;
31099: LD_ADDR_VAR 0 14
31103: PUSH
31104: CALL_OW 44
31108: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31109: LD_ADDR_VAR 0 7
31113: PUSH
31114: LD_VAR 0 7
31118: PPUSH
31119: LD_INT 1
31121: PPUSH
31122: LD_VAR 0 14
31126: PPUSH
31127: CALL_OW 2
31131: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31132: LD_VAR 0 14
31136: PPUSH
31137: LD_VAR 0 9
31141: PPUSH
31142: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31146: LD_VAR 0 9
31150: PPUSH
31151: CALL_OW 313
31155: PUSH
31156: LD_INT 6
31158: EQUAL
31159: PUSH
31160: LD_VAR 0 9
31164: PPUSH
31165: CALL_OW 266
31169: PUSH
31170: LD_INT 32
31172: PUSH
31173: LD_INT 31
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: IN
31180: OR
31181: IFFALSE 30995
31183: GO 30992
31185: POP
31186: POP
// end else
31187: GO 31569
// for j = 1 to x do
31189: LD_ADDR_VAR 0 9
31193: PUSH
31194: DOUBLE
31195: LD_INT 1
31197: DEC
31198: ST_TO_ADDR
31199: LD_VAR 0 13
31203: PUSH
31204: FOR_TO
31205: IFFALSE 31567
// begin InitHc ;
31207: CALL_OW 19
// if not f then
31211: LD_VAR 0 12
31215: NOT
31216: IFFALSE 31305
// begin PrepareHuman ( false , i , skill ) ;
31218: LD_INT 0
31220: PPUSH
31221: LD_VAR 0 8
31225: PPUSH
31226: LD_VAR 0 4
31230: PPUSH
31231: CALL_OW 380
// un := CreateHuman ;
31235: LD_ADDR_VAR 0 14
31239: PUSH
31240: CALL_OW 44
31244: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31245: LD_ADDR_VAR 0 7
31249: PUSH
31250: LD_VAR 0 7
31254: PPUSH
31255: LD_INT 1
31257: PPUSH
31258: LD_VAR 0 14
31262: PPUSH
31263: CALL_OW 2
31267: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31268: LD_VAR 0 14
31272: PPUSH
31273: LD_VAR 0 1
31277: PPUSH
31278: CALL_OW 250
31282: PPUSH
31283: LD_VAR 0 1
31287: PPUSH
31288: CALL_OW 251
31292: PPUSH
31293: LD_INT 10
31295: PPUSH
31296: LD_INT 0
31298: PPUSH
31299: CALL_OW 50
// continue ;
31303: GO 31204
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31305: LD_VAR 0 12
31309: PUSH
31310: LD_INT 1
31312: ARRAY
31313: PPUSH
31314: CALL_OW 313
31318: PUSH
31319: LD_VAR 0 12
31323: PUSH
31324: LD_INT 1
31326: ARRAY
31327: PPUSH
31328: CALL_OW 266
31332: PUSH
31333: LD_INT 32
31335: PUSH
31336: LD_INT 31
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: IN
31343: AND
31344: PUSH
31345: LD_VAR 0 12
31349: PUSH
31350: LD_INT 1
31352: ARRAY
31353: PPUSH
31354: CALL_OW 313
31358: PUSH
31359: LD_INT 6
31361: EQUAL
31362: OR
31363: IFFALSE 31383
// f := Delete ( f , 1 ) ;
31365: LD_ADDR_VAR 0 12
31369: PUSH
31370: LD_VAR 0 12
31374: PPUSH
31375: LD_INT 1
31377: PPUSH
31378: CALL_OW 3
31382: ST_TO_ADDR
// if not f then
31383: LD_VAR 0 12
31387: NOT
31388: IFFALSE 31406
// begin x := x + 2 ;
31390: LD_ADDR_VAR 0 13
31394: PUSH
31395: LD_VAR 0 13
31399: PUSH
31400: LD_INT 2
31402: PLUS
31403: ST_TO_ADDR
// continue ;
31404: GO 31204
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31406: LD_VAR 0 12
31410: PUSH
31411: LD_INT 1
31413: ARRAY
31414: PPUSH
31415: CALL_OW 266
31419: PUSH
31420: LD_INT 5
31422: EQUAL
31423: IFFALSE 31497
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31425: LD_VAR 0 12
31429: PUSH
31430: LD_INT 1
31432: ARRAY
31433: PPUSH
31434: CALL_OW 313
31438: PUSH
31439: LD_INT 3
31441: LESS
31442: IFFALSE 31478
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31444: LD_INT 0
31446: PPUSH
31447: LD_INT 5
31449: PUSH
31450: LD_INT 8
31452: PUSH
31453: LD_INT 9
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: LIST
31460: PUSH
31461: LD_VAR 0 17
31465: ARRAY
31466: PPUSH
31467: LD_VAR 0 4
31471: PPUSH
31472: CALL_OW 380
31476: GO 31495
// PrepareHuman ( false , i , skill ) ;
31478: LD_INT 0
31480: PPUSH
31481: LD_VAR 0 8
31485: PPUSH
31486: LD_VAR 0 4
31490: PPUSH
31491: CALL_OW 380
// end else
31495: GO 31514
// PrepareHuman ( false , i , skill ) ;
31497: LD_INT 0
31499: PPUSH
31500: LD_VAR 0 8
31504: PPUSH
31505: LD_VAR 0 4
31509: PPUSH
31510: CALL_OW 380
// un := CreateHuman ;
31514: LD_ADDR_VAR 0 14
31518: PUSH
31519: CALL_OW 44
31523: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31524: LD_ADDR_VAR 0 7
31528: PUSH
31529: LD_VAR 0 7
31533: PPUSH
31534: LD_INT 1
31536: PPUSH
31537: LD_VAR 0 14
31541: PPUSH
31542: CALL_OW 2
31546: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31547: LD_VAR 0 14
31551: PPUSH
31552: LD_VAR 0 12
31556: PUSH
31557: LD_INT 1
31559: ARRAY
31560: PPUSH
31561: CALL_OW 52
// end ;
31565: GO 31204
31567: POP
31568: POP
// end ;
31569: GO 30506
31571: POP
31572: POP
// result := result ^ buildings ;
31573: LD_ADDR_VAR 0 7
31577: PUSH
31578: LD_VAR 0 7
31582: PUSH
31583: LD_VAR 0 18
31587: ADD
31588: ST_TO_ADDR
// end else
31589: GO 31732
// begin for i = 1 to personel do
31591: LD_ADDR_VAR 0 8
31595: PUSH
31596: DOUBLE
31597: LD_INT 1
31599: DEC
31600: ST_TO_ADDR
31601: LD_VAR 0 6
31605: PUSH
31606: FOR_TO
31607: IFFALSE 31730
// begin if i > 4 then
31609: LD_VAR 0 8
31613: PUSH
31614: LD_INT 4
31616: GREATER
31617: IFFALSE 31621
// break ;
31619: GO 31730
// x := personel [ i ] ;
31621: LD_ADDR_VAR 0 13
31625: PUSH
31626: LD_VAR 0 6
31630: PUSH
31631: LD_VAR 0 8
31635: ARRAY
31636: ST_TO_ADDR
// if x = - 1 then
31637: LD_VAR 0 13
31641: PUSH
31642: LD_INT 1
31644: NEG
31645: EQUAL
31646: IFFALSE 31650
// continue ;
31648: GO 31606
// PrepareHuman ( false , i , skill ) ;
31650: LD_INT 0
31652: PPUSH
31653: LD_VAR 0 8
31657: PPUSH
31658: LD_VAR 0 4
31662: PPUSH
31663: CALL_OW 380
// un := CreateHuman ;
31667: LD_ADDR_VAR 0 14
31671: PUSH
31672: CALL_OW 44
31676: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31677: LD_VAR 0 14
31681: PPUSH
31682: LD_VAR 0 1
31686: PPUSH
31687: CALL_OW 250
31691: PPUSH
31692: LD_VAR 0 1
31696: PPUSH
31697: CALL_OW 251
31701: PPUSH
31702: LD_INT 10
31704: PPUSH
31705: LD_INT 0
31707: PPUSH
31708: CALL_OW 50
// result := result ^ un ;
31712: LD_ADDR_VAR 0 7
31716: PUSH
31717: LD_VAR 0 7
31721: PUSH
31722: LD_VAR 0 14
31726: ADD
31727: ST_TO_ADDR
// end ;
31728: GO 31606
31730: POP
31731: POP
// end ; end ;
31732: LD_VAR 0 7
31736: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31737: LD_INT 0
31739: PPUSH
31740: PPUSH
31741: PPUSH
31742: PPUSH
31743: PPUSH
31744: PPUSH
31745: PPUSH
31746: PPUSH
31747: PPUSH
31748: PPUSH
31749: PPUSH
31750: PPUSH
31751: PPUSH
31752: PPUSH
31753: PPUSH
31754: PPUSH
// result := false ;
31755: LD_ADDR_VAR 0 3
31759: PUSH
31760: LD_INT 0
31762: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31763: LD_VAR 0 1
31767: NOT
31768: PUSH
31769: LD_VAR 0 1
31773: PPUSH
31774: CALL_OW 266
31778: PUSH
31779: LD_INT 32
31781: PUSH
31782: LD_INT 33
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: IN
31789: NOT
31790: OR
31791: IFFALSE 31795
// exit ;
31793: GO 32904
// nat := GetNation ( tower ) ;
31795: LD_ADDR_VAR 0 12
31799: PUSH
31800: LD_VAR 0 1
31804: PPUSH
31805: CALL_OW 248
31809: ST_TO_ADDR
// side := GetSide ( tower ) ;
31810: LD_ADDR_VAR 0 16
31814: PUSH
31815: LD_VAR 0 1
31819: PPUSH
31820: CALL_OW 255
31824: ST_TO_ADDR
// x := GetX ( tower ) ;
31825: LD_ADDR_VAR 0 10
31829: PUSH
31830: LD_VAR 0 1
31834: PPUSH
31835: CALL_OW 250
31839: ST_TO_ADDR
// y := GetY ( tower ) ;
31840: LD_ADDR_VAR 0 11
31844: PUSH
31845: LD_VAR 0 1
31849: PPUSH
31850: CALL_OW 251
31854: ST_TO_ADDR
// if not x or not y then
31855: LD_VAR 0 10
31859: NOT
31860: PUSH
31861: LD_VAR 0 11
31865: NOT
31866: OR
31867: IFFALSE 31871
// exit ;
31869: GO 32904
// weapon := 0 ;
31871: LD_ADDR_VAR 0 18
31875: PUSH
31876: LD_INT 0
31878: ST_TO_ADDR
// fac_list := [ ] ;
31879: LD_ADDR_VAR 0 17
31883: PUSH
31884: EMPTY
31885: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31886: LD_ADDR_VAR 0 6
31890: PUSH
31891: LD_VAR 0 1
31895: PPUSH
31896: CALL_OW 274
31900: PPUSH
31901: LD_VAR 0 2
31905: PPUSH
31906: LD_INT 0
31908: PPUSH
31909: CALL 29475 0 3
31913: PPUSH
31914: LD_INT 30
31916: PUSH
31917: LD_INT 3
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PPUSH
31924: CALL_OW 72
31928: ST_TO_ADDR
// if not factories then
31929: LD_VAR 0 6
31933: NOT
31934: IFFALSE 31938
// exit ;
31936: GO 32904
// for i in factories do
31938: LD_ADDR_VAR 0 8
31942: PUSH
31943: LD_VAR 0 6
31947: PUSH
31948: FOR_IN
31949: IFFALSE 31974
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31951: LD_ADDR_VAR 0 17
31955: PUSH
31956: LD_VAR 0 17
31960: PUSH
31961: LD_VAR 0 8
31965: PPUSH
31966: CALL_OW 478
31970: UNION
31971: ST_TO_ADDR
31972: GO 31948
31974: POP
31975: POP
// if not fac_list then
31976: LD_VAR 0 17
31980: NOT
31981: IFFALSE 31985
// exit ;
31983: GO 32904
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31985: LD_ADDR_VAR 0 5
31989: PUSH
31990: LD_INT 4
31992: PUSH
31993: LD_INT 5
31995: PUSH
31996: LD_INT 9
31998: PUSH
31999: LD_INT 10
32001: PUSH
32002: LD_INT 6
32004: PUSH
32005: LD_INT 7
32007: PUSH
32008: LD_INT 11
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 27
32022: PUSH
32023: LD_INT 28
32025: PUSH
32026: LD_INT 26
32028: PUSH
32029: LD_INT 30
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 43
32040: PUSH
32041: LD_INT 44
32043: PUSH
32044: LD_INT 46
32046: PUSH
32047: LD_INT 45
32049: PUSH
32050: LD_INT 47
32052: PUSH
32053: LD_INT 49
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: LIST
32068: PUSH
32069: LD_VAR 0 12
32073: ARRAY
32074: ST_TO_ADDR
// list := list isect fac_list ;
32075: LD_ADDR_VAR 0 5
32079: PUSH
32080: LD_VAR 0 5
32084: PUSH
32085: LD_VAR 0 17
32089: ISECT
32090: ST_TO_ADDR
// if not list then
32091: LD_VAR 0 5
32095: NOT
32096: IFFALSE 32100
// exit ;
32098: GO 32904
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32100: LD_VAR 0 12
32104: PUSH
32105: LD_INT 3
32107: EQUAL
32108: PUSH
32109: LD_INT 49
32111: PUSH
32112: LD_VAR 0 5
32116: IN
32117: AND
32118: PUSH
32119: LD_INT 31
32121: PPUSH
32122: LD_VAR 0 16
32126: PPUSH
32127: CALL_OW 321
32131: PUSH
32132: LD_INT 2
32134: EQUAL
32135: AND
32136: IFFALSE 32196
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32138: LD_INT 22
32140: PUSH
32141: LD_VAR 0 16
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 35
32152: PUSH
32153: LD_INT 49
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 91
32162: PUSH
32163: LD_VAR 0 1
32167: PUSH
32168: LD_INT 10
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: LIST
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: LIST
32180: PPUSH
32181: CALL_OW 69
32185: NOT
32186: IFFALSE 32196
// weapon := ru_time_lapser ;
32188: LD_ADDR_VAR 0 18
32192: PUSH
32193: LD_INT 49
32195: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32196: LD_VAR 0 12
32200: PUSH
32201: LD_INT 1
32203: PUSH
32204: LD_INT 2
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: IN
32211: PUSH
32212: LD_INT 11
32214: PUSH
32215: LD_VAR 0 5
32219: IN
32220: PUSH
32221: LD_INT 30
32223: PUSH
32224: LD_VAR 0 5
32228: IN
32229: OR
32230: AND
32231: PUSH
32232: LD_INT 6
32234: PPUSH
32235: LD_VAR 0 16
32239: PPUSH
32240: CALL_OW 321
32244: PUSH
32245: LD_INT 2
32247: EQUAL
32248: AND
32249: IFFALSE 32414
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32251: LD_INT 22
32253: PUSH
32254: LD_VAR 0 16
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 2
32265: PUSH
32266: LD_INT 35
32268: PUSH
32269: LD_INT 11
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: LD_INT 35
32278: PUSH
32279: LD_INT 30
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 91
32293: PUSH
32294: LD_VAR 0 1
32298: PUSH
32299: LD_INT 18
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: LIST
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: LIST
32311: PPUSH
32312: CALL_OW 69
32316: NOT
32317: PUSH
32318: LD_INT 22
32320: PUSH
32321: LD_VAR 0 16
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 2
32332: PUSH
32333: LD_INT 30
32335: PUSH
32336: LD_INT 32
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 30
32345: PUSH
32346: LD_INT 33
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 91
32360: PUSH
32361: LD_VAR 0 1
32365: PUSH
32366: LD_INT 12
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: LIST
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: LIST
32378: PUSH
32379: EMPTY
32380: LIST
32381: PPUSH
32382: CALL_OW 69
32386: PUSH
32387: LD_INT 2
32389: GREATER
32390: AND
32391: IFFALSE 32414
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32393: LD_ADDR_VAR 0 18
32397: PUSH
32398: LD_INT 11
32400: PUSH
32401: LD_INT 30
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_VAR 0 12
32412: ARRAY
32413: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32414: LD_VAR 0 18
32418: NOT
32419: PUSH
32420: LD_INT 40
32422: PPUSH
32423: LD_VAR 0 16
32427: PPUSH
32428: CALL_OW 321
32432: PUSH
32433: LD_INT 2
32435: EQUAL
32436: AND
32437: PUSH
32438: LD_INT 7
32440: PUSH
32441: LD_VAR 0 5
32445: IN
32446: PUSH
32447: LD_INT 28
32449: PUSH
32450: LD_VAR 0 5
32454: IN
32455: OR
32456: PUSH
32457: LD_INT 45
32459: PUSH
32460: LD_VAR 0 5
32464: IN
32465: OR
32466: AND
32467: IFFALSE 32721
// begin hex := GetHexInfo ( x , y ) ;
32469: LD_ADDR_VAR 0 4
32473: PUSH
32474: LD_VAR 0 10
32478: PPUSH
32479: LD_VAR 0 11
32483: PPUSH
32484: CALL_OW 546
32488: ST_TO_ADDR
// if hex [ 1 ] then
32489: LD_VAR 0 4
32493: PUSH
32494: LD_INT 1
32496: ARRAY
32497: IFFALSE 32501
// exit ;
32499: GO 32904
// height := hex [ 2 ] ;
32501: LD_ADDR_VAR 0 15
32505: PUSH
32506: LD_VAR 0 4
32510: PUSH
32511: LD_INT 2
32513: ARRAY
32514: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32515: LD_ADDR_VAR 0 14
32519: PUSH
32520: LD_INT 0
32522: PUSH
32523: LD_INT 2
32525: PUSH
32526: LD_INT 3
32528: PUSH
32529: LD_INT 5
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: ST_TO_ADDR
// for i in tmp do
32538: LD_ADDR_VAR 0 8
32542: PUSH
32543: LD_VAR 0 14
32547: PUSH
32548: FOR_IN
32549: IFFALSE 32719
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32551: LD_ADDR_VAR 0 9
32555: PUSH
32556: LD_VAR 0 10
32560: PPUSH
32561: LD_VAR 0 8
32565: PPUSH
32566: LD_INT 5
32568: PPUSH
32569: CALL_OW 272
32573: PUSH
32574: LD_VAR 0 11
32578: PPUSH
32579: LD_VAR 0 8
32583: PPUSH
32584: LD_INT 5
32586: PPUSH
32587: CALL_OW 273
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32596: LD_VAR 0 9
32600: PUSH
32601: LD_INT 1
32603: ARRAY
32604: PPUSH
32605: LD_VAR 0 9
32609: PUSH
32610: LD_INT 2
32612: ARRAY
32613: PPUSH
32614: CALL_OW 488
32618: IFFALSE 32717
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32620: LD_ADDR_VAR 0 4
32624: PUSH
32625: LD_VAR 0 9
32629: PUSH
32630: LD_INT 1
32632: ARRAY
32633: PPUSH
32634: LD_VAR 0 9
32638: PUSH
32639: LD_INT 2
32641: ARRAY
32642: PPUSH
32643: CALL_OW 546
32647: ST_TO_ADDR
// if hex [ 1 ] then
32648: LD_VAR 0 4
32652: PUSH
32653: LD_INT 1
32655: ARRAY
32656: IFFALSE 32660
// continue ;
32658: GO 32548
// h := hex [ 2 ] ;
32660: LD_ADDR_VAR 0 13
32664: PUSH
32665: LD_VAR 0 4
32669: PUSH
32670: LD_INT 2
32672: ARRAY
32673: ST_TO_ADDR
// if h + 7 < height then
32674: LD_VAR 0 13
32678: PUSH
32679: LD_INT 7
32681: PLUS
32682: PUSH
32683: LD_VAR 0 15
32687: LESS
32688: IFFALSE 32717
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32690: LD_ADDR_VAR 0 18
32694: PUSH
32695: LD_INT 7
32697: PUSH
32698: LD_INT 28
32700: PUSH
32701: LD_INT 45
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: LIST
32708: PUSH
32709: LD_VAR 0 12
32713: ARRAY
32714: ST_TO_ADDR
// break ;
32715: GO 32719
// end ; end ; end ;
32717: GO 32548
32719: POP
32720: POP
// end ; if not weapon then
32721: LD_VAR 0 18
32725: NOT
32726: IFFALSE 32786
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32728: LD_ADDR_VAR 0 5
32732: PUSH
32733: LD_VAR 0 5
32737: PUSH
32738: LD_INT 11
32740: PUSH
32741: LD_INT 30
32743: PUSH
32744: LD_INT 49
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: LIST
32751: DIFF
32752: ST_TO_ADDR
// if not list then
32753: LD_VAR 0 5
32757: NOT
32758: IFFALSE 32762
// exit ;
32760: GO 32904
// weapon := list [ rand ( 1 , list ) ] ;
32762: LD_ADDR_VAR 0 18
32766: PUSH
32767: LD_VAR 0 5
32771: PUSH
32772: LD_INT 1
32774: PPUSH
32775: LD_VAR 0 5
32779: PPUSH
32780: CALL_OW 12
32784: ARRAY
32785: ST_TO_ADDR
// end ; if weapon then
32786: LD_VAR 0 18
32790: IFFALSE 32904
// begin tmp := CostOfWeapon ( weapon ) ;
32792: LD_ADDR_VAR 0 14
32796: PUSH
32797: LD_VAR 0 18
32801: PPUSH
32802: CALL_OW 451
32806: ST_TO_ADDR
// j := GetBase ( tower ) ;
32807: LD_ADDR_VAR 0 9
32811: PUSH
32812: LD_VAR 0 1
32816: PPUSH
32817: CALL_OW 274
32821: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32822: LD_VAR 0 9
32826: PPUSH
32827: LD_INT 1
32829: PPUSH
32830: CALL_OW 275
32834: PUSH
32835: LD_VAR 0 14
32839: PUSH
32840: LD_INT 1
32842: ARRAY
32843: GREATEREQUAL
32844: PUSH
32845: LD_VAR 0 9
32849: PPUSH
32850: LD_INT 2
32852: PPUSH
32853: CALL_OW 275
32857: PUSH
32858: LD_VAR 0 14
32862: PUSH
32863: LD_INT 2
32865: ARRAY
32866: GREATEREQUAL
32867: AND
32868: PUSH
32869: LD_VAR 0 9
32873: PPUSH
32874: LD_INT 3
32876: PPUSH
32877: CALL_OW 275
32881: PUSH
32882: LD_VAR 0 14
32886: PUSH
32887: LD_INT 3
32889: ARRAY
32890: GREATEREQUAL
32891: AND
32892: IFFALSE 32904
// result := weapon ;
32894: LD_ADDR_VAR 0 3
32898: PUSH
32899: LD_VAR 0 18
32903: ST_TO_ADDR
// end ; end ;
32904: LD_VAR 0 3
32908: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32909: LD_INT 0
32911: PPUSH
32912: PPUSH
// result := true ;
32913: LD_ADDR_VAR 0 3
32917: PUSH
32918: LD_INT 1
32920: ST_TO_ADDR
// if array1 = array2 then
32921: LD_VAR 0 1
32925: PUSH
32926: LD_VAR 0 2
32930: EQUAL
32931: IFFALSE 32991
// begin for i = 1 to array1 do
32933: LD_ADDR_VAR 0 4
32937: PUSH
32938: DOUBLE
32939: LD_INT 1
32941: DEC
32942: ST_TO_ADDR
32943: LD_VAR 0 1
32947: PUSH
32948: FOR_TO
32949: IFFALSE 32987
// if array1 [ i ] <> array2 [ i ] then
32951: LD_VAR 0 1
32955: PUSH
32956: LD_VAR 0 4
32960: ARRAY
32961: PUSH
32962: LD_VAR 0 2
32966: PUSH
32967: LD_VAR 0 4
32971: ARRAY
32972: NONEQUAL
32973: IFFALSE 32985
// begin result := false ;
32975: LD_ADDR_VAR 0 3
32979: PUSH
32980: LD_INT 0
32982: ST_TO_ADDR
// break ;
32983: GO 32987
// end ;
32985: GO 32948
32987: POP
32988: POP
// end else
32989: GO 32999
// result := false ;
32991: LD_ADDR_VAR 0 3
32995: PUSH
32996: LD_INT 0
32998: ST_TO_ADDR
// end ;
32999: LD_VAR 0 3
33003: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33004: LD_INT 0
33006: PPUSH
33007: PPUSH
// if not array1 or not array2 then
33008: LD_VAR 0 1
33012: NOT
33013: PUSH
33014: LD_VAR 0 2
33018: NOT
33019: OR
33020: IFFALSE 33024
// exit ;
33022: GO 33088
// result := true ;
33024: LD_ADDR_VAR 0 3
33028: PUSH
33029: LD_INT 1
33031: ST_TO_ADDR
// for i = 1 to array1 do
33032: LD_ADDR_VAR 0 4
33036: PUSH
33037: DOUBLE
33038: LD_INT 1
33040: DEC
33041: ST_TO_ADDR
33042: LD_VAR 0 1
33046: PUSH
33047: FOR_TO
33048: IFFALSE 33086
// if array1 [ i ] <> array2 [ i ] then
33050: LD_VAR 0 1
33054: PUSH
33055: LD_VAR 0 4
33059: ARRAY
33060: PUSH
33061: LD_VAR 0 2
33065: PUSH
33066: LD_VAR 0 4
33070: ARRAY
33071: NONEQUAL
33072: IFFALSE 33084
// begin result := false ;
33074: LD_ADDR_VAR 0 3
33078: PUSH
33079: LD_INT 0
33081: ST_TO_ADDR
// break ;
33082: GO 33086
// end ;
33084: GO 33047
33086: POP
33087: POP
// end ;
33088: LD_VAR 0 3
33092: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33093: LD_INT 0
33095: PPUSH
33096: PPUSH
33097: PPUSH
// pom := GetBase ( fac ) ;
33098: LD_ADDR_VAR 0 5
33102: PUSH
33103: LD_VAR 0 1
33107: PPUSH
33108: CALL_OW 274
33112: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33113: LD_ADDR_VAR 0 4
33117: PUSH
33118: LD_VAR 0 2
33122: PUSH
33123: LD_INT 1
33125: ARRAY
33126: PPUSH
33127: LD_VAR 0 2
33131: PUSH
33132: LD_INT 2
33134: ARRAY
33135: PPUSH
33136: LD_VAR 0 2
33140: PUSH
33141: LD_INT 3
33143: ARRAY
33144: PPUSH
33145: LD_VAR 0 2
33149: PUSH
33150: LD_INT 4
33152: ARRAY
33153: PPUSH
33154: CALL_OW 449
33158: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33159: LD_ADDR_VAR 0 3
33163: PUSH
33164: LD_VAR 0 5
33168: PPUSH
33169: LD_INT 1
33171: PPUSH
33172: CALL_OW 275
33176: PUSH
33177: LD_VAR 0 4
33181: PUSH
33182: LD_INT 1
33184: ARRAY
33185: GREATEREQUAL
33186: PUSH
33187: LD_VAR 0 5
33191: PPUSH
33192: LD_INT 2
33194: PPUSH
33195: CALL_OW 275
33199: PUSH
33200: LD_VAR 0 4
33204: PUSH
33205: LD_INT 2
33207: ARRAY
33208: GREATEREQUAL
33209: AND
33210: PUSH
33211: LD_VAR 0 5
33215: PPUSH
33216: LD_INT 3
33218: PPUSH
33219: CALL_OW 275
33223: PUSH
33224: LD_VAR 0 4
33228: PUSH
33229: LD_INT 3
33231: ARRAY
33232: GREATEREQUAL
33233: AND
33234: ST_TO_ADDR
// end ;
33235: LD_VAR 0 3
33239: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33240: LD_INT 0
33242: PPUSH
33243: PPUSH
33244: PPUSH
33245: PPUSH
// pom := GetBase ( building ) ;
33246: LD_ADDR_VAR 0 3
33250: PUSH
33251: LD_VAR 0 1
33255: PPUSH
33256: CALL_OW 274
33260: ST_TO_ADDR
// if not pom then
33261: LD_VAR 0 3
33265: NOT
33266: IFFALSE 33270
// exit ;
33268: GO 33440
// btype := GetBType ( building ) ;
33270: LD_ADDR_VAR 0 5
33274: PUSH
33275: LD_VAR 0 1
33279: PPUSH
33280: CALL_OW 266
33284: ST_TO_ADDR
// if btype = b_armoury then
33285: LD_VAR 0 5
33289: PUSH
33290: LD_INT 4
33292: EQUAL
33293: IFFALSE 33303
// btype := b_barracks ;
33295: LD_ADDR_VAR 0 5
33299: PUSH
33300: LD_INT 5
33302: ST_TO_ADDR
// if btype = b_depot then
33303: LD_VAR 0 5
33307: PUSH
33308: LD_INT 0
33310: EQUAL
33311: IFFALSE 33321
// btype := b_warehouse ;
33313: LD_ADDR_VAR 0 5
33317: PUSH
33318: LD_INT 1
33320: ST_TO_ADDR
// if btype = b_workshop then
33321: LD_VAR 0 5
33325: PUSH
33326: LD_INT 2
33328: EQUAL
33329: IFFALSE 33339
// btype := b_factory ;
33331: LD_ADDR_VAR 0 5
33335: PUSH
33336: LD_INT 3
33338: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33339: LD_ADDR_VAR 0 4
33343: PUSH
33344: LD_VAR 0 5
33348: PPUSH
33349: LD_VAR 0 1
33353: PPUSH
33354: CALL_OW 248
33358: PPUSH
33359: CALL_OW 450
33363: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33364: LD_ADDR_VAR 0 2
33368: PUSH
33369: LD_VAR 0 3
33373: PPUSH
33374: LD_INT 1
33376: PPUSH
33377: CALL_OW 275
33381: PUSH
33382: LD_VAR 0 4
33386: PUSH
33387: LD_INT 1
33389: ARRAY
33390: GREATEREQUAL
33391: PUSH
33392: LD_VAR 0 3
33396: PPUSH
33397: LD_INT 2
33399: PPUSH
33400: CALL_OW 275
33404: PUSH
33405: LD_VAR 0 4
33409: PUSH
33410: LD_INT 2
33412: ARRAY
33413: GREATEREQUAL
33414: AND
33415: PUSH
33416: LD_VAR 0 3
33420: PPUSH
33421: LD_INT 3
33423: PPUSH
33424: CALL_OW 275
33428: PUSH
33429: LD_VAR 0 4
33433: PUSH
33434: LD_INT 3
33436: ARRAY
33437: GREATEREQUAL
33438: AND
33439: ST_TO_ADDR
// end ;
33440: LD_VAR 0 2
33444: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33445: LD_INT 0
33447: PPUSH
33448: PPUSH
33449: PPUSH
// pom := GetBase ( building ) ;
33450: LD_ADDR_VAR 0 4
33454: PUSH
33455: LD_VAR 0 1
33459: PPUSH
33460: CALL_OW 274
33464: ST_TO_ADDR
// if not pom then
33465: LD_VAR 0 4
33469: NOT
33470: IFFALSE 33474
// exit ;
33472: GO 33575
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33474: LD_ADDR_VAR 0 5
33478: PUSH
33479: LD_VAR 0 2
33483: PPUSH
33484: LD_VAR 0 1
33488: PPUSH
33489: CALL_OW 248
33493: PPUSH
33494: CALL_OW 450
33498: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33499: LD_ADDR_VAR 0 3
33503: PUSH
33504: LD_VAR 0 4
33508: PPUSH
33509: LD_INT 1
33511: PPUSH
33512: CALL_OW 275
33516: PUSH
33517: LD_VAR 0 5
33521: PUSH
33522: LD_INT 1
33524: ARRAY
33525: GREATEREQUAL
33526: PUSH
33527: LD_VAR 0 4
33531: PPUSH
33532: LD_INT 2
33534: PPUSH
33535: CALL_OW 275
33539: PUSH
33540: LD_VAR 0 5
33544: PUSH
33545: LD_INT 2
33547: ARRAY
33548: GREATEREQUAL
33549: AND
33550: PUSH
33551: LD_VAR 0 4
33555: PPUSH
33556: LD_INT 3
33558: PPUSH
33559: CALL_OW 275
33563: PUSH
33564: LD_VAR 0 5
33568: PUSH
33569: LD_INT 3
33571: ARRAY
33572: GREATEREQUAL
33573: AND
33574: ST_TO_ADDR
// end ;
33575: LD_VAR 0 3
33579: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33580: LD_INT 0
33582: PPUSH
33583: PPUSH
33584: PPUSH
33585: PPUSH
33586: PPUSH
33587: PPUSH
33588: PPUSH
33589: PPUSH
33590: PPUSH
33591: PPUSH
33592: PPUSH
// result := false ;
33593: LD_ADDR_VAR 0 8
33597: PUSH
33598: LD_INT 0
33600: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33601: LD_VAR 0 5
33605: NOT
33606: PUSH
33607: LD_VAR 0 1
33611: NOT
33612: OR
33613: PUSH
33614: LD_VAR 0 2
33618: NOT
33619: OR
33620: PUSH
33621: LD_VAR 0 3
33625: NOT
33626: OR
33627: IFFALSE 33631
// exit ;
33629: GO 34445
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33631: LD_ADDR_VAR 0 14
33635: PUSH
33636: LD_VAR 0 1
33640: PPUSH
33641: LD_VAR 0 2
33645: PPUSH
33646: LD_VAR 0 3
33650: PPUSH
33651: LD_VAR 0 4
33655: PPUSH
33656: LD_VAR 0 5
33660: PUSH
33661: LD_INT 1
33663: ARRAY
33664: PPUSH
33665: CALL_OW 248
33669: PPUSH
33670: LD_INT 0
33672: PPUSH
33673: CALL 35682 0 6
33677: ST_TO_ADDR
// if not hexes then
33678: LD_VAR 0 14
33682: NOT
33683: IFFALSE 33687
// exit ;
33685: GO 34445
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33687: LD_ADDR_VAR 0 17
33691: PUSH
33692: LD_VAR 0 5
33696: PPUSH
33697: LD_INT 22
33699: PUSH
33700: LD_VAR 0 13
33704: PPUSH
33705: CALL_OW 255
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 2
33716: PUSH
33717: LD_INT 30
33719: PUSH
33720: LD_INT 0
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 30
33729: PUSH
33730: LD_INT 1
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: LIST
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PPUSH
33746: CALL_OW 72
33750: ST_TO_ADDR
// for i = 1 to hexes do
33751: LD_ADDR_VAR 0 9
33755: PUSH
33756: DOUBLE
33757: LD_INT 1
33759: DEC
33760: ST_TO_ADDR
33761: LD_VAR 0 14
33765: PUSH
33766: FOR_TO
33767: IFFALSE 34443
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33769: LD_ADDR_VAR 0 13
33773: PUSH
33774: LD_VAR 0 14
33778: PUSH
33779: LD_VAR 0 9
33783: ARRAY
33784: PUSH
33785: LD_INT 1
33787: ARRAY
33788: PPUSH
33789: LD_VAR 0 14
33793: PUSH
33794: LD_VAR 0 9
33798: ARRAY
33799: PUSH
33800: LD_INT 2
33802: ARRAY
33803: PPUSH
33804: CALL_OW 428
33808: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33809: LD_VAR 0 14
33813: PUSH
33814: LD_VAR 0 9
33818: ARRAY
33819: PUSH
33820: LD_INT 1
33822: ARRAY
33823: PPUSH
33824: LD_VAR 0 14
33828: PUSH
33829: LD_VAR 0 9
33833: ARRAY
33834: PUSH
33835: LD_INT 2
33837: ARRAY
33838: PPUSH
33839: CALL_OW 351
33843: PUSH
33844: LD_VAR 0 14
33848: PUSH
33849: LD_VAR 0 9
33853: ARRAY
33854: PUSH
33855: LD_INT 1
33857: ARRAY
33858: PPUSH
33859: LD_VAR 0 14
33863: PUSH
33864: LD_VAR 0 9
33868: ARRAY
33869: PUSH
33870: LD_INT 2
33872: ARRAY
33873: PPUSH
33874: CALL_OW 488
33878: NOT
33879: OR
33880: PUSH
33881: LD_VAR 0 13
33885: PPUSH
33886: CALL_OW 247
33890: PUSH
33891: LD_INT 3
33893: EQUAL
33894: OR
33895: IFFALSE 33901
// exit ;
33897: POP
33898: POP
33899: GO 34445
// if not tmp then
33901: LD_VAR 0 13
33905: NOT
33906: IFFALSE 33910
// continue ;
33908: GO 33766
// result := true ;
33910: LD_ADDR_VAR 0 8
33914: PUSH
33915: LD_INT 1
33917: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33918: LD_VAR 0 6
33922: PUSH
33923: LD_VAR 0 13
33927: PPUSH
33928: CALL_OW 247
33932: PUSH
33933: LD_INT 2
33935: EQUAL
33936: AND
33937: PUSH
33938: LD_VAR 0 13
33942: PPUSH
33943: CALL_OW 263
33947: PUSH
33948: LD_INT 1
33950: EQUAL
33951: AND
33952: IFFALSE 34116
// begin if IsDrivenBy ( tmp ) then
33954: LD_VAR 0 13
33958: PPUSH
33959: CALL_OW 311
33963: IFFALSE 33967
// continue ;
33965: GO 33766
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33967: LD_VAR 0 6
33971: PPUSH
33972: LD_INT 3
33974: PUSH
33975: LD_INT 60
33977: PUSH
33978: EMPTY
33979: LIST
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 3
33987: PUSH
33988: LD_INT 55
33990: PUSH
33991: EMPTY
33992: LIST
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PPUSH
34002: CALL_OW 72
34006: IFFALSE 34114
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34008: LD_ADDR_VAR 0 18
34012: PUSH
34013: LD_VAR 0 6
34017: PPUSH
34018: LD_INT 3
34020: PUSH
34021: LD_INT 60
34023: PUSH
34024: EMPTY
34025: LIST
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 3
34033: PUSH
34034: LD_INT 55
34036: PUSH
34037: EMPTY
34038: LIST
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PPUSH
34048: CALL_OW 72
34052: PUSH
34053: LD_INT 1
34055: ARRAY
34056: ST_TO_ADDR
// if IsInUnit ( driver ) then
34057: LD_VAR 0 18
34061: PPUSH
34062: CALL_OW 310
34066: IFFALSE 34077
// ComExit ( driver ) ;
34068: LD_VAR 0 18
34072: PPUSH
34073: CALL 59370 0 1
// AddComEnterUnit ( driver , tmp ) ;
34077: LD_VAR 0 18
34081: PPUSH
34082: LD_VAR 0 13
34086: PPUSH
34087: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34091: LD_VAR 0 18
34095: PPUSH
34096: LD_VAR 0 7
34100: PPUSH
34101: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34105: LD_VAR 0 18
34109: PPUSH
34110: CALL_OW 181
// end ; continue ;
34114: GO 33766
// end ; if not cleaners or not tmp in cleaners then
34116: LD_VAR 0 6
34120: NOT
34121: PUSH
34122: LD_VAR 0 13
34126: PUSH
34127: LD_VAR 0 6
34131: IN
34132: NOT
34133: OR
34134: IFFALSE 34441
// begin if dep then
34136: LD_VAR 0 17
34140: IFFALSE 34276
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34142: LD_ADDR_VAR 0 16
34146: PUSH
34147: LD_VAR 0 17
34151: PUSH
34152: LD_INT 1
34154: ARRAY
34155: PPUSH
34156: CALL_OW 250
34160: PPUSH
34161: LD_VAR 0 17
34165: PUSH
34166: LD_INT 1
34168: ARRAY
34169: PPUSH
34170: CALL_OW 254
34174: PPUSH
34175: LD_INT 5
34177: PPUSH
34178: CALL_OW 272
34182: PUSH
34183: LD_VAR 0 17
34187: PUSH
34188: LD_INT 1
34190: ARRAY
34191: PPUSH
34192: CALL_OW 251
34196: PPUSH
34197: LD_VAR 0 17
34201: PUSH
34202: LD_INT 1
34204: ARRAY
34205: PPUSH
34206: CALL_OW 254
34210: PPUSH
34211: LD_INT 5
34213: PPUSH
34214: CALL_OW 273
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34223: LD_VAR 0 16
34227: PUSH
34228: LD_INT 1
34230: ARRAY
34231: PPUSH
34232: LD_VAR 0 16
34236: PUSH
34237: LD_INT 2
34239: ARRAY
34240: PPUSH
34241: CALL_OW 488
34245: IFFALSE 34276
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34247: LD_VAR 0 13
34251: PPUSH
34252: LD_VAR 0 16
34256: PUSH
34257: LD_INT 1
34259: ARRAY
34260: PPUSH
34261: LD_VAR 0 16
34265: PUSH
34266: LD_INT 2
34268: ARRAY
34269: PPUSH
34270: CALL_OW 111
// continue ;
34274: GO 33766
// end ; end ; r := GetDir ( tmp ) ;
34276: LD_ADDR_VAR 0 15
34280: PUSH
34281: LD_VAR 0 13
34285: PPUSH
34286: CALL_OW 254
34290: ST_TO_ADDR
// if r = 5 then
34291: LD_VAR 0 15
34295: PUSH
34296: LD_INT 5
34298: EQUAL
34299: IFFALSE 34309
// r := 0 ;
34301: LD_ADDR_VAR 0 15
34305: PUSH
34306: LD_INT 0
34308: ST_TO_ADDR
// for j = r to 5 do
34309: LD_ADDR_VAR 0 10
34313: PUSH
34314: DOUBLE
34315: LD_VAR 0 15
34319: DEC
34320: ST_TO_ADDR
34321: LD_INT 5
34323: PUSH
34324: FOR_TO
34325: IFFALSE 34439
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34327: LD_ADDR_VAR 0 11
34331: PUSH
34332: LD_VAR 0 13
34336: PPUSH
34337: CALL_OW 250
34341: PPUSH
34342: LD_VAR 0 10
34346: PPUSH
34347: LD_INT 2
34349: PPUSH
34350: CALL_OW 272
34354: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34355: LD_ADDR_VAR 0 12
34359: PUSH
34360: LD_VAR 0 13
34364: PPUSH
34365: CALL_OW 251
34369: PPUSH
34370: LD_VAR 0 10
34374: PPUSH
34375: LD_INT 2
34377: PPUSH
34378: CALL_OW 273
34382: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34383: LD_VAR 0 11
34387: PPUSH
34388: LD_VAR 0 12
34392: PPUSH
34393: CALL_OW 488
34397: PUSH
34398: LD_VAR 0 11
34402: PPUSH
34403: LD_VAR 0 12
34407: PPUSH
34408: CALL_OW 428
34412: NOT
34413: AND
34414: IFFALSE 34437
// begin ComMoveXY ( tmp , _x , _y ) ;
34416: LD_VAR 0 13
34420: PPUSH
34421: LD_VAR 0 11
34425: PPUSH
34426: LD_VAR 0 12
34430: PPUSH
34431: CALL_OW 111
// break ;
34435: GO 34439
// end ; end ;
34437: GO 34324
34439: POP
34440: POP
// end ; end ;
34441: GO 33766
34443: POP
34444: POP
// end ;
34445: LD_VAR 0 8
34449: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34450: LD_INT 0
34452: PPUSH
// result := true ;
34453: LD_ADDR_VAR 0 3
34457: PUSH
34458: LD_INT 1
34460: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34461: LD_VAR 0 2
34465: PUSH
34466: LD_INT 24
34468: DOUBLE
34469: EQUAL
34470: IFTRUE 34480
34472: LD_INT 33
34474: DOUBLE
34475: EQUAL
34476: IFTRUE 34480
34478: GO 34505
34480: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34481: LD_ADDR_VAR 0 3
34485: PUSH
34486: LD_INT 32
34488: PPUSH
34489: LD_VAR 0 1
34493: PPUSH
34494: CALL_OW 321
34498: PUSH
34499: LD_INT 2
34501: EQUAL
34502: ST_TO_ADDR
34503: GO 34825
34505: LD_INT 20
34507: DOUBLE
34508: EQUAL
34509: IFTRUE 34513
34511: GO 34538
34513: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34514: LD_ADDR_VAR 0 3
34518: PUSH
34519: LD_INT 6
34521: PPUSH
34522: LD_VAR 0 1
34526: PPUSH
34527: CALL_OW 321
34531: PUSH
34532: LD_INT 2
34534: EQUAL
34535: ST_TO_ADDR
34536: GO 34825
34538: LD_INT 22
34540: DOUBLE
34541: EQUAL
34542: IFTRUE 34552
34544: LD_INT 36
34546: DOUBLE
34547: EQUAL
34548: IFTRUE 34552
34550: GO 34577
34552: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34553: LD_ADDR_VAR 0 3
34557: PUSH
34558: LD_INT 15
34560: PPUSH
34561: LD_VAR 0 1
34565: PPUSH
34566: CALL_OW 321
34570: PUSH
34571: LD_INT 2
34573: EQUAL
34574: ST_TO_ADDR
34575: GO 34825
34577: LD_INT 30
34579: DOUBLE
34580: EQUAL
34581: IFTRUE 34585
34583: GO 34610
34585: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34586: LD_ADDR_VAR 0 3
34590: PUSH
34591: LD_INT 20
34593: PPUSH
34594: LD_VAR 0 1
34598: PPUSH
34599: CALL_OW 321
34603: PUSH
34604: LD_INT 2
34606: EQUAL
34607: ST_TO_ADDR
34608: GO 34825
34610: LD_INT 28
34612: DOUBLE
34613: EQUAL
34614: IFTRUE 34624
34616: LD_INT 21
34618: DOUBLE
34619: EQUAL
34620: IFTRUE 34624
34622: GO 34649
34624: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34625: LD_ADDR_VAR 0 3
34629: PUSH
34630: LD_INT 21
34632: PPUSH
34633: LD_VAR 0 1
34637: PPUSH
34638: CALL_OW 321
34642: PUSH
34643: LD_INT 2
34645: EQUAL
34646: ST_TO_ADDR
34647: GO 34825
34649: LD_INT 16
34651: DOUBLE
34652: EQUAL
34653: IFTRUE 34657
34655: GO 34684
34657: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34658: LD_ADDR_VAR 0 3
34662: PUSH
34663: LD_EXP 85
34667: PPUSH
34668: LD_VAR 0 1
34672: PPUSH
34673: CALL_OW 321
34677: PUSH
34678: LD_INT 2
34680: EQUAL
34681: ST_TO_ADDR
34682: GO 34825
34684: LD_INT 19
34686: DOUBLE
34687: EQUAL
34688: IFTRUE 34698
34690: LD_INT 23
34692: DOUBLE
34693: EQUAL
34694: IFTRUE 34698
34696: GO 34725
34698: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34699: LD_ADDR_VAR 0 3
34703: PUSH
34704: LD_EXP 84
34708: PPUSH
34709: LD_VAR 0 1
34713: PPUSH
34714: CALL_OW 321
34718: PUSH
34719: LD_INT 2
34721: EQUAL
34722: ST_TO_ADDR
34723: GO 34825
34725: LD_INT 17
34727: DOUBLE
34728: EQUAL
34729: IFTRUE 34733
34731: GO 34758
34733: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34734: LD_ADDR_VAR 0 3
34738: PUSH
34739: LD_INT 39
34741: PPUSH
34742: LD_VAR 0 1
34746: PPUSH
34747: CALL_OW 321
34751: PUSH
34752: LD_INT 2
34754: EQUAL
34755: ST_TO_ADDR
34756: GO 34825
34758: LD_INT 18
34760: DOUBLE
34761: EQUAL
34762: IFTRUE 34766
34764: GO 34791
34766: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34767: LD_ADDR_VAR 0 3
34771: PUSH
34772: LD_INT 40
34774: PPUSH
34775: LD_VAR 0 1
34779: PPUSH
34780: CALL_OW 321
34784: PUSH
34785: LD_INT 2
34787: EQUAL
34788: ST_TO_ADDR
34789: GO 34825
34791: LD_INT 27
34793: DOUBLE
34794: EQUAL
34795: IFTRUE 34799
34797: GO 34824
34799: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34800: LD_ADDR_VAR 0 3
34804: PUSH
34805: LD_INT 35
34807: PPUSH
34808: LD_VAR 0 1
34812: PPUSH
34813: CALL_OW 321
34817: PUSH
34818: LD_INT 2
34820: EQUAL
34821: ST_TO_ADDR
34822: GO 34825
34824: POP
// end ;
34825: LD_VAR 0 3
34829: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34830: LD_INT 0
34832: PPUSH
34833: PPUSH
34834: PPUSH
34835: PPUSH
34836: PPUSH
34837: PPUSH
34838: PPUSH
34839: PPUSH
34840: PPUSH
34841: PPUSH
34842: PPUSH
// result := false ;
34843: LD_ADDR_VAR 0 6
34847: PUSH
34848: LD_INT 0
34850: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34851: LD_VAR 0 1
34855: NOT
34856: PUSH
34857: LD_VAR 0 1
34861: PPUSH
34862: CALL_OW 266
34866: PUSH
34867: LD_INT 0
34869: PUSH
34870: LD_INT 1
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: IN
34877: NOT
34878: OR
34879: PUSH
34880: LD_VAR 0 2
34884: NOT
34885: OR
34886: PUSH
34887: LD_VAR 0 5
34891: PUSH
34892: LD_INT 0
34894: PUSH
34895: LD_INT 1
34897: PUSH
34898: LD_INT 2
34900: PUSH
34901: LD_INT 3
34903: PUSH
34904: LD_INT 4
34906: PUSH
34907: LD_INT 5
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: IN
34918: NOT
34919: OR
34920: PUSH
34921: LD_VAR 0 3
34925: PPUSH
34926: LD_VAR 0 4
34930: PPUSH
34931: CALL_OW 488
34935: NOT
34936: OR
34937: IFFALSE 34941
// exit ;
34939: GO 35677
// side := GetSide ( depot ) ;
34941: LD_ADDR_VAR 0 9
34945: PUSH
34946: LD_VAR 0 1
34950: PPUSH
34951: CALL_OW 255
34955: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
34956: LD_VAR 0 9
34960: PPUSH
34961: LD_VAR 0 2
34965: PPUSH
34966: CALL 34450 0 2
34970: NOT
34971: IFFALSE 34975
// exit ;
34973: GO 35677
// pom := GetBase ( depot ) ;
34975: LD_ADDR_VAR 0 10
34979: PUSH
34980: LD_VAR 0 1
34984: PPUSH
34985: CALL_OW 274
34989: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34990: LD_ADDR_VAR 0 11
34994: PUSH
34995: LD_VAR 0 2
34999: PPUSH
35000: LD_VAR 0 1
35004: PPUSH
35005: CALL_OW 248
35009: PPUSH
35010: CALL_OW 450
35014: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35015: LD_VAR 0 10
35019: PPUSH
35020: LD_INT 1
35022: PPUSH
35023: CALL_OW 275
35027: PUSH
35028: LD_VAR 0 11
35032: PUSH
35033: LD_INT 1
35035: ARRAY
35036: GREATEREQUAL
35037: PUSH
35038: LD_VAR 0 10
35042: PPUSH
35043: LD_INT 2
35045: PPUSH
35046: CALL_OW 275
35050: PUSH
35051: LD_VAR 0 11
35055: PUSH
35056: LD_INT 2
35058: ARRAY
35059: GREATEREQUAL
35060: AND
35061: PUSH
35062: LD_VAR 0 10
35066: PPUSH
35067: LD_INT 3
35069: PPUSH
35070: CALL_OW 275
35074: PUSH
35075: LD_VAR 0 11
35079: PUSH
35080: LD_INT 3
35082: ARRAY
35083: GREATEREQUAL
35084: AND
35085: NOT
35086: IFFALSE 35090
// exit ;
35088: GO 35677
// if GetBType ( depot ) = b_depot then
35090: LD_VAR 0 1
35094: PPUSH
35095: CALL_OW 266
35099: PUSH
35100: LD_INT 0
35102: EQUAL
35103: IFFALSE 35115
// dist := 28 else
35105: LD_ADDR_VAR 0 14
35109: PUSH
35110: LD_INT 28
35112: ST_TO_ADDR
35113: GO 35123
// dist := 36 ;
35115: LD_ADDR_VAR 0 14
35119: PUSH
35120: LD_INT 36
35122: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35123: LD_VAR 0 1
35127: PPUSH
35128: LD_VAR 0 3
35132: PPUSH
35133: LD_VAR 0 4
35137: PPUSH
35138: CALL_OW 297
35142: PUSH
35143: LD_VAR 0 14
35147: GREATER
35148: IFFALSE 35152
// exit ;
35150: GO 35677
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35152: LD_ADDR_VAR 0 12
35156: PUSH
35157: LD_VAR 0 2
35161: PPUSH
35162: LD_VAR 0 3
35166: PPUSH
35167: LD_VAR 0 4
35171: PPUSH
35172: LD_VAR 0 5
35176: PPUSH
35177: LD_VAR 0 1
35181: PPUSH
35182: CALL_OW 248
35186: PPUSH
35187: LD_INT 0
35189: PPUSH
35190: CALL 35682 0 6
35194: ST_TO_ADDR
// if not hexes then
35195: LD_VAR 0 12
35199: NOT
35200: IFFALSE 35204
// exit ;
35202: GO 35677
// hex := GetHexInfo ( x , y ) ;
35204: LD_ADDR_VAR 0 15
35208: PUSH
35209: LD_VAR 0 3
35213: PPUSH
35214: LD_VAR 0 4
35218: PPUSH
35219: CALL_OW 546
35223: ST_TO_ADDR
// if hex [ 1 ] then
35224: LD_VAR 0 15
35228: PUSH
35229: LD_INT 1
35231: ARRAY
35232: IFFALSE 35236
// exit ;
35234: GO 35677
// height := hex [ 2 ] ;
35236: LD_ADDR_VAR 0 13
35240: PUSH
35241: LD_VAR 0 15
35245: PUSH
35246: LD_INT 2
35248: ARRAY
35249: ST_TO_ADDR
// for i = 1 to hexes do
35250: LD_ADDR_VAR 0 7
35254: PUSH
35255: DOUBLE
35256: LD_INT 1
35258: DEC
35259: ST_TO_ADDR
35260: LD_VAR 0 12
35264: PUSH
35265: FOR_TO
35266: IFFALSE 35596
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35268: LD_VAR 0 12
35272: PUSH
35273: LD_VAR 0 7
35277: ARRAY
35278: PUSH
35279: LD_INT 1
35281: ARRAY
35282: PPUSH
35283: LD_VAR 0 12
35287: PUSH
35288: LD_VAR 0 7
35292: ARRAY
35293: PUSH
35294: LD_INT 2
35296: ARRAY
35297: PPUSH
35298: CALL_OW 488
35302: NOT
35303: PUSH
35304: LD_VAR 0 12
35308: PUSH
35309: LD_VAR 0 7
35313: ARRAY
35314: PUSH
35315: LD_INT 1
35317: ARRAY
35318: PPUSH
35319: LD_VAR 0 12
35323: PUSH
35324: LD_VAR 0 7
35328: ARRAY
35329: PUSH
35330: LD_INT 2
35332: ARRAY
35333: PPUSH
35334: CALL_OW 428
35338: PUSH
35339: LD_INT 0
35341: GREATER
35342: OR
35343: PUSH
35344: LD_VAR 0 12
35348: PUSH
35349: LD_VAR 0 7
35353: ARRAY
35354: PUSH
35355: LD_INT 1
35357: ARRAY
35358: PPUSH
35359: LD_VAR 0 12
35363: PUSH
35364: LD_VAR 0 7
35368: ARRAY
35369: PUSH
35370: LD_INT 2
35372: ARRAY
35373: PPUSH
35374: CALL_OW 351
35378: OR
35379: IFFALSE 35385
// exit ;
35381: POP
35382: POP
35383: GO 35677
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35385: LD_ADDR_VAR 0 8
35389: PUSH
35390: LD_VAR 0 12
35394: PUSH
35395: LD_VAR 0 7
35399: ARRAY
35400: PUSH
35401: LD_INT 1
35403: ARRAY
35404: PPUSH
35405: LD_VAR 0 12
35409: PUSH
35410: LD_VAR 0 7
35414: ARRAY
35415: PUSH
35416: LD_INT 2
35418: ARRAY
35419: PPUSH
35420: CALL_OW 546
35424: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35425: LD_VAR 0 8
35429: PUSH
35430: LD_INT 1
35432: ARRAY
35433: PUSH
35434: LD_VAR 0 8
35438: PUSH
35439: LD_INT 2
35441: ARRAY
35442: PUSH
35443: LD_VAR 0 13
35447: PUSH
35448: LD_INT 2
35450: PLUS
35451: GREATER
35452: OR
35453: PUSH
35454: LD_VAR 0 8
35458: PUSH
35459: LD_INT 2
35461: ARRAY
35462: PUSH
35463: LD_VAR 0 13
35467: PUSH
35468: LD_INT 2
35470: MINUS
35471: LESS
35472: OR
35473: PUSH
35474: LD_VAR 0 8
35478: PUSH
35479: LD_INT 3
35481: ARRAY
35482: PUSH
35483: LD_INT 0
35485: PUSH
35486: LD_INT 8
35488: PUSH
35489: LD_INT 9
35491: PUSH
35492: LD_INT 10
35494: PUSH
35495: LD_INT 11
35497: PUSH
35498: LD_INT 12
35500: PUSH
35501: LD_INT 13
35503: PUSH
35504: LD_INT 16
35506: PUSH
35507: LD_INT 17
35509: PUSH
35510: LD_INT 18
35512: PUSH
35513: LD_INT 19
35515: PUSH
35516: LD_INT 20
35518: PUSH
35519: LD_INT 21
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: IN
35537: NOT
35538: OR
35539: PUSH
35540: LD_VAR 0 8
35544: PUSH
35545: LD_INT 5
35547: ARRAY
35548: NOT
35549: OR
35550: PUSH
35551: LD_VAR 0 8
35555: PUSH
35556: LD_INT 6
35558: ARRAY
35559: PUSH
35560: LD_INT 1
35562: PUSH
35563: LD_INT 2
35565: PUSH
35566: LD_INT 7
35568: PUSH
35569: LD_INT 9
35571: PUSH
35572: LD_INT 10
35574: PUSH
35575: LD_INT 11
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: IN
35586: NOT
35587: OR
35588: IFFALSE 35594
// exit ;
35590: POP
35591: POP
35592: GO 35677
// end ;
35594: GO 35265
35596: POP
35597: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35598: LD_VAR 0 9
35602: PPUSH
35603: LD_VAR 0 3
35607: PPUSH
35608: LD_VAR 0 4
35612: PPUSH
35613: LD_INT 20
35615: PPUSH
35616: CALL 27623 0 4
35620: PUSH
35621: LD_INT 4
35623: ARRAY
35624: IFFALSE 35628
// exit ;
35626: GO 35677
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35628: LD_VAR 0 2
35632: PUSH
35633: LD_INT 29
35635: PUSH
35636: LD_INT 30
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: IN
35643: PUSH
35644: LD_VAR 0 3
35648: PPUSH
35649: LD_VAR 0 4
35653: PPUSH
35654: LD_VAR 0 9
35658: PPUSH
35659: CALL_OW 440
35663: NOT
35664: AND
35665: IFFALSE 35669
// exit ;
35667: GO 35677
// result := true ;
35669: LD_ADDR_VAR 0 6
35673: PUSH
35674: LD_INT 1
35676: ST_TO_ADDR
// end ;
35677: LD_VAR 0 6
35681: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35682: LD_INT 0
35684: PPUSH
35685: PPUSH
35686: PPUSH
35687: PPUSH
35688: PPUSH
35689: PPUSH
35690: PPUSH
35691: PPUSH
35692: PPUSH
35693: PPUSH
35694: PPUSH
35695: PPUSH
35696: PPUSH
35697: PPUSH
35698: PPUSH
35699: PPUSH
35700: PPUSH
35701: PPUSH
35702: PPUSH
35703: PPUSH
35704: PPUSH
35705: PPUSH
35706: PPUSH
35707: PPUSH
35708: PPUSH
35709: PPUSH
35710: PPUSH
35711: PPUSH
35712: PPUSH
35713: PPUSH
35714: PPUSH
35715: PPUSH
35716: PPUSH
35717: PPUSH
35718: PPUSH
35719: PPUSH
35720: PPUSH
35721: PPUSH
35722: PPUSH
35723: PPUSH
35724: PPUSH
35725: PPUSH
35726: PPUSH
35727: PPUSH
35728: PPUSH
35729: PPUSH
35730: PPUSH
35731: PPUSH
35732: PPUSH
35733: PPUSH
35734: PPUSH
35735: PPUSH
35736: PPUSH
35737: PPUSH
35738: PPUSH
35739: PPUSH
35740: PPUSH
35741: PPUSH
// result = [ ] ;
35742: LD_ADDR_VAR 0 7
35746: PUSH
35747: EMPTY
35748: ST_TO_ADDR
// temp_list = [ ] ;
35749: LD_ADDR_VAR 0 9
35753: PUSH
35754: EMPTY
35755: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35756: LD_VAR 0 4
35760: PUSH
35761: LD_INT 0
35763: PUSH
35764: LD_INT 1
35766: PUSH
35767: LD_INT 2
35769: PUSH
35770: LD_INT 3
35772: PUSH
35773: LD_INT 4
35775: PUSH
35776: LD_INT 5
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: IN
35787: NOT
35788: PUSH
35789: LD_VAR 0 1
35793: PUSH
35794: LD_INT 0
35796: PUSH
35797: LD_INT 1
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: IN
35804: PUSH
35805: LD_VAR 0 5
35809: PUSH
35810: LD_INT 1
35812: PUSH
35813: LD_INT 2
35815: PUSH
35816: LD_INT 3
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: LIST
35823: IN
35824: NOT
35825: AND
35826: OR
35827: IFFALSE 35831
// exit ;
35829: GO 54222
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35831: LD_VAR 0 1
35835: PUSH
35836: LD_INT 6
35838: PUSH
35839: LD_INT 7
35841: PUSH
35842: LD_INT 8
35844: PUSH
35845: LD_INT 13
35847: PUSH
35848: LD_INT 12
35850: PUSH
35851: LD_INT 15
35853: PUSH
35854: LD_INT 11
35856: PUSH
35857: LD_INT 14
35859: PUSH
35860: LD_INT 10
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: IN
35874: IFFALSE 35884
// btype = b_lab ;
35876: LD_ADDR_VAR 0 1
35880: PUSH
35881: LD_INT 6
35883: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35884: LD_VAR 0 6
35888: PUSH
35889: LD_INT 0
35891: PUSH
35892: LD_INT 1
35894: PUSH
35895: LD_INT 2
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: LIST
35902: IN
35903: NOT
35904: PUSH
35905: LD_VAR 0 1
35909: PUSH
35910: LD_INT 0
35912: PUSH
35913: LD_INT 1
35915: PUSH
35916: LD_INT 2
35918: PUSH
35919: LD_INT 3
35921: PUSH
35922: LD_INT 6
35924: PUSH
35925: LD_INT 36
35927: PUSH
35928: LD_INT 4
35930: PUSH
35931: LD_INT 5
35933: PUSH
35934: LD_INT 31
35936: PUSH
35937: LD_INT 32
35939: PUSH
35940: LD_INT 33
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: IN
35956: NOT
35957: PUSH
35958: LD_VAR 0 6
35962: PUSH
35963: LD_INT 1
35965: EQUAL
35966: AND
35967: OR
35968: PUSH
35969: LD_VAR 0 1
35973: PUSH
35974: LD_INT 2
35976: PUSH
35977: LD_INT 3
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: IN
35984: NOT
35985: PUSH
35986: LD_VAR 0 6
35990: PUSH
35991: LD_INT 2
35993: EQUAL
35994: AND
35995: OR
35996: IFFALSE 36006
// mode = 0 ;
35998: LD_ADDR_VAR 0 6
36002: PUSH
36003: LD_INT 0
36005: ST_TO_ADDR
// case mode of 0 :
36006: LD_VAR 0 6
36010: PUSH
36011: LD_INT 0
36013: DOUBLE
36014: EQUAL
36015: IFTRUE 36019
36017: GO 47472
36019: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36020: LD_ADDR_VAR 0 11
36024: PUSH
36025: LD_INT 0
36027: PUSH
36028: LD_INT 0
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 0
36037: PUSH
36038: LD_INT 1
36040: NEG
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: LD_INT 1
36048: PUSH
36049: LD_INT 0
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 1
36058: PUSH
36059: LD_INT 1
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 0
36068: PUSH
36069: LD_INT 1
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 1
36078: NEG
36079: PUSH
36080: LD_INT 0
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 1
36089: NEG
36090: PUSH
36091: LD_INT 1
36093: NEG
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 1
36101: NEG
36102: PUSH
36103: LD_INT 2
36105: NEG
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 0
36113: PUSH
36114: LD_INT 2
36116: NEG
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 1
36124: PUSH
36125: LD_INT 1
36127: NEG
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 1
36135: PUSH
36136: LD_INT 2
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 0
36145: PUSH
36146: LD_INT 2
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: LD_INT 1
36155: NEG
36156: PUSH
36157: LD_INT 1
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 1
36166: PUSH
36167: LD_INT 3
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 0
36176: PUSH
36177: LD_INT 3
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 1
36186: NEG
36187: PUSH
36188: LD_INT 2
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36213: LD_ADDR_VAR 0 12
36217: PUSH
36218: LD_INT 0
36220: PUSH
36221: LD_INT 0
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 0
36230: PUSH
36231: LD_INT 1
36233: NEG
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: LD_INT 1
36241: PUSH
36242: LD_INT 0
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 1
36251: PUSH
36252: LD_INT 1
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: LD_INT 0
36261: PUSH
36262: LD_INT 1
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 1
36271: NEG
36272: PUSH
36273: LD_INT 0
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 1
36282: NEG
36283: PUSH
36284: LD_INT 1
36286: NEG
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 1
36294: PUSH
36295: LD_INT 1
36297: NEG
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 2
36305: PUSH
36306: LD_INT 0
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 2
36315: PUSH
36316: LD_INT 1
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 1
36325: NEG
36326: PUSH
36327: LD_INT 1
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 2
36336: NEG
36337: PUSH
36338: LD_INT 0
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 2
36347: NEG
36348: PUSH
36349: LD_INT 1
36351: NEG
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 2
36359: NEG
36360: PUSH
36361: LD_INT 1
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 3
36370: NEG
36371: PUSH
36372: LD_INT 0
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 3
36381: NEG
36382: PUSH
36383: LD_INT 1
36385: NEG
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36409: LD_ADDR_VAR 0 13
36413: PUSH
36414: LD_INT 0
36416: PUSH
36417: LD_INT 0
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 0
36426: PUSH
36427: LD_INT 1
36429: NEG
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 1
36437: PUSH
36438: LD_INT 0
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 1
36447: PUSH
36448: LD_INT 1
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 0
36457: PUSH
36458: LD_INT 1
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 1
36467: NEG
36468: PUSH
36469: LD_INT 0
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 1
36478: NEG
36479: PUSH
36480: LD_INT 1
36482: NEG
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: LD_INT 1
36490: NEG
36491: PUSH
36492: LD_INT 2
36494: NEG
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 2
36502: PUSH
36503: LD_INT 1
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 2
36512: PUSH
36513: LD_INT 2
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 1
36522: PUSH
36523: LD_INT 2
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 2
36532: NEG
36533: PUSH
36534: LD_INT 1
36536: NEG
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 2
36544: NEG
36545: PUSH
36546: LD_INT 2
36548: NEG
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 2
36556: NEG
36557: PUSH
36558: LD_INT 3
36560: NEG
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 3
36568: NEG
36569: PUSH
36570: LD_INT 2
36572: NEG
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 3
36580: NEG
36581: PUSH
36582: LD_INT 3
36584: NEG
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36608: LD_ADDR_VAR 0 14
36612: PUSH
36613: LD_INT 0
36615: PUSH
36616: LD_INT 0
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 0
36625: PUSH
36626: LD_INT 1
36628: NEG
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 1
36636: PUSH
36637: LD_INT 0
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 1
36646: PUSH
36647: LD_INT 1
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 0
36656: PUSH
36657: LD_INT 1
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 1
36666: NEG
36667: PUSH
36668: LD_INT 0
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 1
36677: NEG
36678: PUSH
36679: LD_INT 1
36681: NEG
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 1
36689: NEG
36690: PUSH
36691: LD_INT 2
36693: NEG
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 0
36701: PUSH
36702: LD_INT 2
36704: NEG
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 1
36712: PUSH
36713: LD_INT 1
36715: NEG
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 1
36723: PUSH
36724: LD_INT 2
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 0
36733: PUSH
36734: LD_INT 2
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 1
36743: NEG
36744: PUSH
36745: LD_INT 1
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 1
36754: NEG
36755: PUSH
36756: LD_INT 3
36758: NEG
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PUSH
36764: LD_INT 0
36766: PUSH
36767: LD_INT 3
36769: NEG
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 1
36777: PUSH
36778: LD_INT 2
36780: NEG
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36804: LD_ADDR_VAR 0 15
36808: PUSH
36809: LD_INT 0
36811: PUSH
36812: LD_INT 0
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 0
36821: PUSH
36822: LD_INT 1
36824: NEG
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 1
36832: PUSH
36833: LD_INT 0
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: PUSH
36840: LD_INT 1
36842: PUSH
36843: LD_INT 1
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 0
36852: PUSH
36853: LD_INT 1
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 1
36862: NEG
36863: PUSH
36864: LD_INT 0
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 1
36873: NEG
36874: PUSH
36875: LD_INT 1
36877: NEG
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 1
36885: PUSH
36886: LD_INT 1
36888: NEG
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 2
36896: PUSH
36897: LD_INT 0
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 2
36906: PUSH
36907: LD_INT 1
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 1
36916: NEG
36917: PUSH
36918: LD_INT 1
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 2
36927: NEG
36928: PUSH
36929: LD_INT 0
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 2
36938: NEG
36939: PUSH
36940: LD_INT 1
36942: NEG
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 2
36950: PUSH
36951: LD_INT 1
36953: NEG
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 3
36961: PUSH
36962: LD_INT 0
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 3
36971: PUSH
36972: LD_INT 1
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36997: LD_ADDR_VAR 0 16
37001: PUSH
37002: LD_INT 0
37004: PUSH
37005: LD_INT 0
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 0
37014: PUSH
37015: LD_INT 1
37017: NEG
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 1
37025: PUSH
37026: LD_INT 0
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 1
37035: PUSH
37036: LD_INT 1
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: LD_INT 1
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 1
37055: NEG
37056: PUSH
37057: LD_INT 0
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 1
37066: NEG
37067: PUSH
37068: LD_INT 1
37070: NEG
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 1
37078: NEG
37079: PUSH
37080: LD_INT 2
37082: NEG
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 2
37090: PUSH
37091: LD_INT 1
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 2
37100: PUSH
37101: LD_INT 2
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 1
37110: PUSH
37111: LD_INT 2
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 2
37120: NEG
37121: PUSH
37122: LD_INT 1
37124: NEG
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 2
37132: NEG
37133: PUSH
37134: LD_INT 2
37136: NEG
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 3
37144: PUSH
37145: LD_INT 2
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 3
37154: PUSH
37155: LD_INT 3
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 2
37164: PUSH
37165: LD_INT 3
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37190: LD_ADDR_VAR 0 17
37194: PUSH
37195: LD_INT 0
37197: PUSH
37198: LD_INT 0
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 0
37207: PUSH
37208: LD_INT 1
37210: NEG
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: LD_INT 1
37218: PUSH
37219: LD_INT 0
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 1
37228: PUSH
37229: LD_INT 1
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 0
37238: PUSH
37239: LD_INT 1
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 1
37248: NEG
37249: PUSH
37250: LD_INT 0
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 1
37259: NEG
37260: PUSH
37261: LD_INT 1
37263: NEG
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 1
37271: NEG
37272: PUSH
37273: LD_INT 2
37275: NEG
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 0
37283: PUSH
37284: LD_INT 2
37286: NEG
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 1
37294: PUSH
37295: LD_INT 1
37297: NEG
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 2
37305: PUSH
37306: LD_INT 0
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 2
37315: PUSH
37316: LD_INT 1
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 2
37325: PUSH
37326: LD_INT 2
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 1
37335: PUSH
37336: LD_INT 2
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 0
37345: PUSH
37346: LD_INT 2
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: LD_INT 1
37355: NEG
37356: PUSH
37357: LD_INT 1
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 2
37366: NEG
37367: PUSH
37368: LD_INT 0
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 2
37377: NEG
37378: PUSH
37379: LD_INT 1
37381: NEG
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 2
37389: NEG
37390: PUSH
37391: LD_INT 2
37393: NEG
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: LIST
37418: LIST
37419: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37420: LD_ADDR_VAR 0 18
37424: PUSH
37425: LD_INT 0
37427: PUSH
37428: LD_INT 0
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 0
37437: PUSH
37438: LD_INT 1
37440: NEG
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 1
37448: PUSH
37449: LD_INT 0
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 1
37458: PUSH
37459: LD_INT 1
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 0
37468: PUSH
37469: LD_INT 1
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 1
37478: NEG
37479: PUSH
37480: LD_INT 0
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 1
37489: NEG
37490: PUSH
37491: LD_INT 1
37493: NEG
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 1
37501: NEG
37502: PUSH
37503: LD_INT 2
37505: NEG
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 0
37513: PUSH
37514: LD_INT 2
37516: NEG
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 1
37524: PUSH
37525: LD_INT 1
37527: NEG
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 2
37535: PUSH
37536: LD_INT 0
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 2
37545: PUSH
37546: LD_INT 1
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 2
37555: PUSH
37556: LD_INT 2
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 1
37565: PUSH
37566: LD_INT 2
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: LD_INT 0
37575: PUSH
37576: LD_INT 2
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 1
37585: NEG
37586: PUSH
37587: LD_INT 1
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 2
37596: NEG
37597: PUSH
37598: LD_INT 0
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 2
37607: NEG
37608: PUSH
37609: LD_INT 1
37611: NEG
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 2
37619: NEG
37620: PUSH
37621: LD_INT 2
37623: NEG
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37650: LD_ADDR_VAR 0 19
37654: PUSH
37655: LD_INT 0
37657: PUSH
37658: LD_INT 0
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 0
37667: PUSH
37668: LD_INT 1
37670: NEG
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 1
37678: PUSH
37679: LD_INT 0
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 1
37688: PUSH
37689: LD_INT 1
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 0
37698: PUSH
37699: LD_INT 1
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 1
37708: NEG
37709: PUSH
37710: LD_INT 0
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 1
37719: NEG
37720: PUSH
37721: LD_INT 1
37723: NEG
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 1
37731: NEG
37732: PUSH
37733: LD_INT 2
37735: NEG
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 0
37743: PUSH
37744: LD_INT 2
37746: NEG
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 1
37754: PUSH
37755: LD_INT 1
37757: NEG
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 2
37765: PUSH
37766: LD_INT 0
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 2
37775: PUSH
37776: LD_INT 1
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 2
37785: PUSH
37786: LD_INT 2
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 1
37795: PUSH
37796: LD_INT 2
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 0
37805: PUSH
37806: LD_INT 2
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 1
37815: NEG
37816: PUSH
37817: LD_INT 1
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 2
37826: NEG
37827: PUSH
37828: LD_INT 0
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 2
37837: NEG
37838: PUSH
37839: LD_INT 1
37841: NEG
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 2
37849: NEG
37850: PUSH
37851: LD_INT 2
37853: NEG
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37880: LD_ADDR_VAR 0 20
37884: PUSH
37885: LD_INT 0
37887: PUSH
37888: LD_INT 0
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 0
37897: PUSH
37898: LD_INT 1
37900: NEG
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: LD_INT 1
37908: PUSH
37909: LD_INT 0
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 1
37918: PUSH
37919: LD_INT 1
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 0
37928: PUSH
37929: LD_INT 1
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 1
37938: NEG
37939: PUSH
37940: LD_INT 0
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 1
37949: NEG
37950: PUSH
37951: LD_INT 1
37953: NEG
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 1
37961: NEG
37962: PUSH
37963: LD_INT 2
37965: NEG
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 0
37973: PUSH
37974: LD_INT 2
37976: NEG
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 1
37984: PUSH
37985: LD_INT 1
37987: NEG
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 2
37995: PUSH
37996: LD_INT 0
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 2
38005: PUSH
38006: LD_INT 1
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 2
38015: PUSH
38016: LD_INT 2
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 1
38025: PUSH
38026: LD_INT 2
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 0
38035: PUSH
38036: LD_INT 2
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 1
38045: NEG
38046: PUSH
38047: LD_INT 1
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 2
38056: NEG
38057: PUSH
38058: LD_INT 0
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 2
38067: NEG
38068: PUSH
38069: LD_INT 1
38071: NEG
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 2
38079: NEG
38080: PUSH
38081: LD_INT 2
38083: NEG
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38110: LD_ADDR_VAR 0 21
38114: PUSH
38115: LD_INT 0
38117: PUSH
38118: LD_INT 0
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 0
38127: PUSH
38128: LD_INT 1
38130: NEG
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 1
38138: PUSH
38139: LD_INT 0
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 1
38148: PUSH
38149: LD_INT 1
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 0
38158: PUSH
38159: LD_INT 1
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 1
38168: NEG
38169: PUSH
38170: LD_INT 0
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 1
38179: NEG
38180: PUSH
38181: LD_INT 1
38183: NEG
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 1
38191: NEG
38192: PUSH
38193: LD_INT 2
38195: NEG
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 0
38203: PUSH
38204: LD_INT 2
38206: NEG
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 1
38214: PUSH
38215: LD_INT 1
38217: NEG
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 2
38225: PUSH
38226: LD_INT 0
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 2
38235: PUSH
38236: LD_INT 1
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 2
38245: PUSH
38246: LD_INT 2
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 1
38255: PUSH
38256: LD_INT 2
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 0
38265: PUSH
38266: LD_INT 2
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 1
38275: NEG
38276: PUSH
38277: LD_INT 1
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 2
38286: NEG
38287: PUSH
38288: LD_INT 0
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 2
38297: NEG
38298: PUSH
38299: LD_INT 1
38301: NEG
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 2
38309: NEG
38310: PUSH
38311: LD_INT 2
38313: NEG
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38340: LD_ADDR_VAR 0 22
38344: PUSH
38345: LD_INT 0
38347: PUSH
38348: LD_INT 0
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 0
38357: PUSH
38358: LD_INT 1
38360: NEG
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 1
38368: PUSH
38369: LD_INT 0
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 1
38378: PUSH
38379: LD_INT 1
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 0
38388: PUSH
38389: LD_INT 1
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 1
38398: NEG
38399: PUSH
38400: LD_INT 0
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 1
38409: NEG
38410: PUSH
38411: LD_INT 1
38413: NEG
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 1
38421: NEG
38422: PUSH
38423: LD_INT 2
38425: NEG
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 0
38433: PUSH
38434: LD_INT 2
38436: NEG
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 1
38444: PUSH
38445: LD_INT 1
38447: NEG
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 2
38455: PUSH
38456: LD_INT 0
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 2
38465: PUSH
38466: LD_INT 1
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 2
38475: PUSH
38476: LD_INT 2
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 1
38485: PUSH
38486: LD_INT 2
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 0
38495: PUSH
38496: LD_INT 2
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 1
38505: NEG
38506: PUSH
38507: LD_INT 1
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 2
38516: NEG
38517: PUSH
38518: LD_INT 0
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 2
38527: NEG
38528: PUSH
38529: LD_INT 1
38531: NEG
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 2
38539: NEG
38540: PUSH
38541: LD_INT 2
38543: NEG
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38570: LD_ADDR_VAR 0 23
38574: PUSH
38575: LD_INT 0
38577: PUSH
38578: LD_INT 0
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 0
38587: PUSH
38588: LD_INT 1
38590: NEG
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 1
38598: PUSH
38599: LD_INT 0
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 1
38608: PUSH
38609: LD_INT 1
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 0
38618: PUSH
38619: LD_INT 1
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 1
38628: NEG
38629: PUSH
38630: LD_INT 0
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 1
38639: NEG
38640: PUSH
38641: LD_INT 1
38643: NEG
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 1
38651: NEG
38652: PUSH
38653: LD_INT 2
38655: NEG
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 0
38663: PUSH
38664: LD_INT 2
38666: NEG
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 1
38674: PUSH
38675: LD_INT 1
38677: NEG
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 2
38685: PUSH
38686: LD_INT 0
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 2
38695: PUSH
38696: LD_INT 1
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 2
38705: PUSH
38706: LD_INT 2
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 1
38715: PUSH
38716: LD_INT 2
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 0
38725: PUSH
38726: LD_INT 2
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 1
38735: NEG
38736: PUSH
38737: LD_INT 1
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 2
38746: NEG
38747: PUSH
38748: LD_INT 0
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 2
38757: NEG
38758: PUSH
38759: LD_INT 1
38761: NEG
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 2
38769: NEG
38770: PUSH
38771: LD_INT 2
38773: NEG
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 2
38781: NEG
38782: PUSH
38783: LD_INT 3
38785: NEG
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 1
38793: NEG
38794: PUSH
38795: LD_INT 3
38797: NEG
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 1
38805: PUSH
38806: LD_INT 2
38808: NEG
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 2
38816: PUSH
38817: LD_INT 1
38819: NEG
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38850: LD_ADDR_VAR 0 24
38854: PUSH
38855: LD_INT 0
38857: PUSH
38858: LD_INT 0
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 0
38867: PUSH
38868: LD_INT 1
38870: NEG
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 1
38878: PUSH
38879: LD_INT 0
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: LD_INT 1
38888: PUSH
38889: LD_INT 1
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 0
38898: PUSH
38899: LD_INT 1
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 1
38908: NEG
38909: PUSH
38910: LD_INT 0
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 1
38919: NEG
38920: PUSH
38921: LD_INT 1
38923: NEG
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 1
38931: NEG
38932: PUSH
38933: LD_INT 2
38935: NEG
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 0
38943: PUSH
38944: LD_INT 2
38946: NEG
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 1
38954: PUSH
38955: LD_INT 1
38957: NEG
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 2
38965: PUSH
38966: LD_INT 0
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 2
38975: PUSH
38976: LD_INT 1
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 2
38985: PUSH
38986: LD_INT 2
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 1
38995: PUSH
38996: LD_INT 2
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 0
39005: PUSH
39006: LD_INT 2
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 1
39015: NEG
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 2
39026: NEG
39027: PUSH
39028: LD_INT 0
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 2
39037: NEG
39038: PUSH
39039: LD_INT 1
39041: NEG
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 2
39049: NEG
39050: PUSH
39051: LD_INT 2
39053: NEG
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 1
39061: PUSH
39062: LD_INT 2
39064: NEG
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 2
39072: PUSH
39073: LD_INT 1
39075: NEG
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 3
39083: PUSH
39084: LD_INT 1
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 3
39093: PUSH
39094: LD_INT 2
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39126: LD_ADDR_VAR 0 25
39130: PUSH
39131: LD_INT 0
39133: PUSH
39134: LD_INT 0
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 0
39143: PUSH
39144: LD_INT 1
39146: NEG
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 1
39154: PUSH
39155: LD_INT 0
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 1
39164: PUSH
39165: LD_INT 1
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 0
39174: PUSH
39175: LD_INT 1
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 1
39184: NEG
39185: PUSH
39186: LD_INT 0
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 1
39195: NEG
39196: PUSH
39197: LD_INT 1
39199: NEG
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 1
39207: NEG
39208: PUSH
39209: LD_INT 2
39211: NEG
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 0
39219: PUSH
39220: LD_INT 2
39222: NEG
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 1
39230: PUSH
39231: LD_INT 1
39233: NEG
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 2
39241: PUSH
39242: LD_INT 0
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 2
39251: PUSH
39252: LD_INT 1
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 2
39261: PUSH
39262: LD_INT 2
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 1
39271: PUSH
39272: LD_INT 2
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 0
39281: PUSH
39282: LD_INT 2
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 1
39291: NEG
39292: PUSH
39293: LD_INT 1
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 2
39302: NEG
39303: PUSH
39304: LD_INT 0
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 2
39313: NEG
39314: PUSH
39315: LD_INT 1
39317: NEG
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 2
39325: NEG
39326: PUSH
39327: LD_INT 2
39329: NEG
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 3
39337: PUSH
39338: LD_INT 1
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 3
39347: PUSH
39348: LD_INT 2
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 2
39357: PUSH
39358: LD_INT 3
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 1
39367: PUSH
39368: LD_INT 3
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39400: LD_ADDR_VAR 0 26
39404: PUSH
39405: LD_INT 0
39407: PUSH
39408: LD_INT 0
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 0
39417: PUSH
39418: LD_INT 1
39420: NEG
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 1
39428: PUSH
39429: LD_INT 0
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 1
39438: PUSH
39439: LD_INT 1
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: LD_INT 1
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 1
39458: NEG
39459: PUSH
39460: LD_INT 0
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 1
39469: NEG
39470: PUSH
39471: LD_INT 1
39473: NEG
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 1
39481: NEG
39482: PUSH
39483: LD_INT 2
39485: NEG
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: LD_INT 2
39496: NEG
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 1
39504: PUSH
39505: LD_INT 1
39507: NEG
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 2
39515: PUSH
39516: LD_INT 0
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 2
39525: PUSH
39526: LD_INT 1
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 2
39535: PUSH
39536: LD_INT 2
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 1
39545: PUSH
39546: LD_INT 2
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 0
39555: PUSH
39556: LD_INT 2
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 1
39565: NEG
39566: PUSH
39567: LD_INT 1
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 2
39576: NEG
39577: PUSH
39578: LD_INT 0
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 2
39587: NEG
39588: PUSH
39589: LD_INT 1
39591: NEG
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 2
39599: NEG
39600: PUSH
39601: LD_INT 2
39603: NEG
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 2
39611: PUSH
39612: LD_INT 3
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 1
39621: PUSH
39622: LD_INT 3
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 1
39631: NEG
39632: PUSH
39633: LD_INT 2
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 2
39642: NEG
39643: PUSH
39644: LD_INT 1
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39676: LD_ADDR_VAR 0 27
39680: PUSH
39681: LD_INT 0
39683: PUSH
39684: LD_INT 0
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 0
39693: PUSH
39694: LD_INT 1
39696: NEG
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 1
39704: PUSH
39705: LD_INT 0
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 1
39714: PUSH
39715: LD_INT 1
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 0
39724: PUSH
39725: LD_INT 1
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 1
39734: NEG
39735: PUSH
39736: LD_INT 0
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 1
39745: NEG
39746: PUSH
39747: LD_INT 1
39749: NEG
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 1
39757: NEG
39758: PUSH
39759: LD_INT 2
39761: NEG
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 0
39769: PUSH
39770: LD_INT 2
39772: NEG
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 1
39780: PUSH
39781: LD_INT 1
39783: NEG
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 2
39791: PUSH
39792: LD_INT 0
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 2
39801: PUSH
39802: LD_INT 1
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 2
39811: PUSH
39812: LD_INT 2
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 1
39821: PUSH
39822: LD_INT 2
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 0
39831: PUSH
39832: LD_INT 2
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 1
39841: NEG
39842: PUSH
39843: LD_INT 1
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 2
39852: NEG
39853: PUSH
39854: LD_INT 0
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 2
39863: NEG
39864: PUSH
39865: LD_INT 1
39867: NEG
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 2
39875: NEG
39876: PUSH
39877: LD_INT 2
39879: NEG
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 1
39887: NEG
39888: PUSH
39889: LD_INT 2
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 2
39898: NEG
39899: PUSH
39900: LD_INT 1
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 3
39909: NEG
39910: PUSH
39911: LD_INT 1
39913: NEG
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 3
39921: NEG
39922: PUSH
39923: LD_INT 2
39925: NEG
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39956: LD_ADDR_VAR 0 28
39960: PUSH
39961: LD_INT 0
39963: PUSH
39964: LD_INT 0
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 0
39973: PUSH
39974: LD_INT 1
39976: NEG
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 1
39984: PUSH
39985: LD_INT 0
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 1
39994: PUSH
39995: LD_INT 1
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 0
40004: PUSH
40005: LD_INT 1
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 1
40014: NEG
40015: PUSH
40016: LD_INT 0
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 1
40025: NEG
40026: PUSH
40027: LD_INT 1
40029: NEG
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 1
40037: NEG
40038: PUSH
40039: LD_INT 2
40041: NEG
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 0
40049: PUSH
40050: LD_INT 2
40052: NEG
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 1
40060: PUSH
40061: LD_INT 1
40063: NEG
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 2
40071: PUSH
40072: LD_INT 0
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 2
40081: PUSH
40082: LD_INT 1
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 2
40091: PUSH
40092: LD_INT 2
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 1
40101: PUSH
40102: LD_INT 2
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: LD_INT 2
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 1
40121: NEG
40122: PUSH
40123: LD_INT 1
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 2
40132: NEG
40133: PUSH
40134: LD_INT 0
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 2
40143: NEG
40144: PUSH
40145: LD_INT 1
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 2
40155: NEG
40156: PUSH
40157: LD_INT 2
40159: NEG
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 2
40167: NEG
40168: PUSH
40169: LD_INT 3
40171: NEG
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 1
40179: NEG
40180: PUSH
40181: LD_INT 3
40183: NEG
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 3
40191: NEG
40192: PUSH
40193: LD_INT 1
40195: NEG
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 3
40203: NEG
40204: PUSH
40205: LD_INT 2
40207: NEG
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40238: LD_ADDR_VAR 0 29
40242: PUSH
40243: LD_INT 0
40245: PUSH
40246: LD_INT 0
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 0
40255: PUSH
40256: LD_INT 1
40258: NEG
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 1
40266: PUSH
40267: LD_INT 0
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: PUSH
40277: LD_INT 1
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 0
40286: PUSH
40287: LD_INT 1
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 1
40296: NEG
40297: PUSH
40298: LD_INT 0
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 1
40307: NEG
40308: PUSH
40309: LD_INT 1
40311: NEG
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 1
40319: NEG
40320: PUSH
40321: LD_INT 2
40323: NEG
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 0
40331: PUSH
40332: LD_INT 2
40334: NEG
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 1
40342: PUSH
40343: LD_INT 1
40345: NEG
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 2
40353: PUSH
40354: LD_INT 0
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 2
40363: PUSH
40364: LD_INT 1
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 1
40373: PUSH
40374: LD_INT 2
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 0
40383: PUSH
40384: LD_INT 2
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 1
40393: NEG
40394: PUSH
40395: LD_INT 1
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 2
40404: NEG
40405: PUSH
40406: LD_INT 1
40408: NEG
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 2
40416: NEG
40417: PUSH
40418: LD_INT 2
40420: NEG
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 2
40428: NEG
40429: PUSH
40430: LD_INT 3
40432: NEG
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 2
40440: PUSH
40441: LD_INT 1
40443: NEG
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 3
40451: PUSH
40452: LD_INT 1
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 1
40461: PUSH
40462: LD_INT 3
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 1
40471: NEG
40472: PUSH
40473: LD_INT 2
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 3
40482: NEG
40483: PUSH
40484: LD_INT 2
40486: NEG
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40517: LD_ADDR_VAR 0 30
40521: PUSH
40522: LD_INT 0
40524: PUSH
40525: LD_INT 0
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 0
40534: PUSH
40535: LD_INT 1
40537: NEG
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 1
40545: PUSH
40546: LD_INT 0
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 1
40555: PUSH
40556: LD_INT 1
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 0
40565: PUSH
40566: LD_INT 1
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 1
40575: NEG
40576: PUSH
40577: LD_INT 0
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 1
40586: NEG
40587: PUSH
40588: LD_INT 1
40590: NEG
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 1
40598: NEG
40599: PUSH
40600: LD_INT 2
40602: NEG
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 0
40610: PUSH
40611: LD_INT 2
40613: NEG
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 1
40621: PUSH
40622: LD_INT 1
40624: NEG
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 2
40632: PUSH
40633: LD_INT 0
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 2
40642: PUSH
40643: LD_INT 1
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 2
40652: PUSH
40653: LD_INT 2
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 1
40662: PUSH
40663: LD_INT 2
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 1
40672: NEG
40673: PUSH
40674: LD_INT 1
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 2
40683: NEG
40684: PUSH
40685: LD_INT 0
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 2
40694: NEG
40695: PUSH
40696: LD_INT 1
40698: NEG
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 1
40706: NEG
40707: PUSH
40708: LD_INT 3
40710: NEG
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 1
40718: PUSH
40719: LD_INT 2
40721: NEG
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 3
40729: PUSH
40730: LD_INT 2
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 2
40739: PUSH
40740: LD_INT 3
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 2
40749: NEG
40750: PUSH
40751: LD_INT 1
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 3
40760: NEG
40761: PUSH
40762: LD_INT 1
40764: NEG
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40795: LD_ADDR_VAR 0 31
40799: PUSH
40800: LD_INT 0
40802: PUSH
40803: LD_INT 0
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 0
40812: PUSH
40813: LD_INT 1
40815: NEG
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 1
40823: PUSH
40824: LD_INT 0
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 1
40833: PUSH
40834: LD_INT 1
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 0
40843: PUSH
40844: LD_INT 1
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 1
40853: NEG
40854: PUSH
40855: LD_INT 0
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 1
40864: NEG
40865: PUSH
40866: LD_INT 1
40868: NEG
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 1
40876: NEG
40877: PUSH
40878: LD_INT 2
40880: NEG
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 1
40888: PUSH
40889: LD_INT 1
40891: NEG
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 2
40899: PUSH
40900: LD_INT 0
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 2
40909: PUSH
40910: LD_INT 1
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 2
40919: PUSH
40920: LD_INT 2
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 1
40929: PUSH
40930: LD_INT 2
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: LD_INT 2
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 2
40960: NEG
40961: PUSH
40962: LD_INT 1
40964: NEG
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 2
40972: NEG
40973: PUSH
40974: LD_INT 2
40976: NEG
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 2
40984: NEG
40985: PUSH
40986: LD_INT 3
40988: NEG
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 2
40996: PUSH
40997: LD_INT 1
40999: NEG
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 3
41007: PUSH
41008: LD_INT 1
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 1
41017: PUSH
41018: LD_INT 3
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 1
41027: NEG
41028: PUSH
41029: LD_INT 2
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 3
41038: NEG
41039: PUSH
41040: LD_INT 2
41042: NEG
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41073: LD_ADDR_VAR 0 32
41077: PUSH
41078: LD_INT 0
41080: PUSH
41081: LD_INT 0
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 0
41090: PUSH
41091: LD_INT 1
41093: NEG
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 1
41101: PUSH
41102: LD_INT 0
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 1
41111: PUSH
41112: LD_INT 1
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 0
41121: PUSH
41122: LD_INT 1
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 1
41131: NEG
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 1
41142: NEG
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 1
41154: NEG
41155: PUSH
41156: LD_INT 2
41158: NEG
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 0
41166: PUSH
41167: LD_INT 2
41169: NEG
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 1
41177: PUSH
41178: LD_INT 1
41180: NEG
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 2
41188: PUSH
41189: LD_INT 1
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 2
41198: PUSH
41199: LD_INT 2
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 1
41208: PUSH
41209: LD_INT 2
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: LD_INT 2
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: LD_INT 1
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 2
41239: NEG
41240: PUSH
41241: LD_INT 0
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 2
41250: NEG
41251: PUSH
41252: LD_INT 1
41254: NEG
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 1
41262: NEG
41263: PUSH
41264: LD_INT 3
41266: NEG
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 1
41274: PUSH
41275: LD_INT 2
41277: NEG
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 3
41285: PUSH
41286: LD_INT 2
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 2
41295: PUSH
41296: LD_INT 3
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 2
41305: NEG
41306: PUSH
41307: LD_INT 1
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 3
41316: NEG
41317: PUSH
41318: LD_INT 1
41320: NEG
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41351: LD_ADDR_VAR 0 33
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: LD_INT 0
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 0
41368: PUSH
41369: LD_INT 1
41371: NEG
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 1
41379: PUSH
41380: LD_INT 0
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: LD_INT 1
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 0
41399: PUSH
41400: LD_INT 1
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 1
41409: NEG
41410: PUSH
41411: LD_INT 0
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 1
41420: NEG
41421: PUSH
41422: LD_INT 1
41424: NEG
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 1
41432: NEG
41433: PUSH
41434: LD_INT 2
41436: NEG
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 1
41444: PUSH
41445: LD_INT 1
41447: NEG
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 2
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 2
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 1
41475: PUSH
41476: LD_INT 2
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: LD_INT 2
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 1
41495: NEG
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 2
41506: NEG
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 2
41517: NEG
41518: PUSH
41519: LD_INT 1
41521: NEG
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 2
41529: NEG
41530: PUSH
41531: LD_INT 2
41533: NEG
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 2
41541: NEG
41542: PUSH
41543: LD_INT 3
41545: NEG
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 2
41553: PUSH
41554: LD_INT 1
41556: NEG
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 3
41564: PUSH
41565: LD_INT 1
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 1
41574: PUSH
41575: LD_INT 3
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 1
41584: NEG
41585: PUSH
41586: LD_INT 2
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 3
41595: NEG
41596: PUSH
41597: LD_INT 2
41599: NEG
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41630: LD_ADDR_VAR 0 34
41634: PUSH
41635: LD_INT 0
41637: PUSH
41638: LD_INT 0
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 0
41647: PUSH
41648: LD_INT 1
41650: NEG
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 1
41658: PUSH
41659: LD_INT 0
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 1
41668: PUSH
41669: LD_INT 1
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 0
41678: PUSH
41679: LD_INT 1
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 1
41688: NEG
41689: PUSH
41690: LD_INT 0
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 1
41699: NEG
41700: PUSH
41701: LD_INT 1
41703: NEG
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 1
41711: NEG
41712: PUSH
41713: LD_INT 2
41715: NEG
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 0
41723: PUSH
41724: LD_INT 2
41726: NEG
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 1
41734: PUSH
41735: LD_INT 1
41737: NEG
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 2
41745: PUSH
41746: LD_INT 1
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 2
41755: PUSH
41756: LD_INT 2
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 1
41765: PUSH
41766: LD_INT 2
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 1
41775: NEG
41776: PUSH
41777: LD_INT 1
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 2
41786: NEG
41787: PUSH
41788: LD_INT 0
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 2
41797: NEG
41798: PUSH
41799: LD_INT 1
41801: NEG
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 2
41809: NEG
41810: PUSH
41811: LD_INT 2
41813: NEG
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 1
41821: NEG
41822: PUSH
41823: LD_INT 3
41825: NEG
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 1
41833: PUSH
41834: LD_INT 2
41836: NEG
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 3
41844: PUSH
41845: LD_INT 2
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 2
41854: PUSH
41855: LD_INT 3
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 2
41864: NEG
41865: PUSH
41866: LD_INT 1
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 3
41875: NEG
41876: PUSH
41877: LD_INT 1
41879: NEG
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41910: LD_ADDR_VAR 0 35
41914: PUSH
41915: LD_INT 0
41917: PUSH
41918: LD_INT 0
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 0
41927: PUSH
41928: LD_INT 1
41930: NEG
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 1
41938: PUSH
41939: LD_INT 0
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 1
41948: PUSH
41949: LD_INT 1
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 0
41958: PUSH
41959: LD_INT 1
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 1
41968: NEG
41969: PUSH
41970: LD_INT 0
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 1
41979: NEG
41980: PUSH
41981: LD_INT 1
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 2
41991: PUSH
41992: LD_INT 1
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 2
42001: NEG
42002: PUSH
42003: LD_INT 1
42005: NEG
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42022: LD_ADDR_VAR 0 36
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 0
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 1
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 1
42060: PUSH
42061: LD_INT 1
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 0
42070: PUSH
42071: LD_INT 1
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 1
42080: NEG
42081: PUSH
42082: LD_INT 0
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 1
42091: NEG
42092: PUSH
42093: LD_INT 1
42095: NEG
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 1
42103: NEG
42104: PUSH
42105: LD_INT 2
42107: NEG
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 1
42115: PUSH
42116: LD_INT 2
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42134: LD_ADDR_VAR 0 37
42138: PUSH
42139: LD_INT 0
42141: PUSH
42142: LD_INT 0
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 0
42151: PUSH
42152: LD_INT 1
42154: NEG
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 1
42172: PUSH
42173: LD_INT 1
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: LD_INT 1
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: LD_INT 0
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: LD_INT 1
42207: NEG
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 1
42215: PUSH
42216: LD_INT 1
42218: NEG
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 1
42226: NEG
42227: PUSH
42228: LD_INT 1
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42246: LD_ADDR_VAR 0 38
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: LD_INT 0
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 0
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 1
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: LD_INT 1
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: LD_INT 1
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 1
42304: NEG
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: LD_INT 1
42319: NEG
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 2
42327: PUSH
42328: LD_INT 1
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 2
42337: NEG
42338: PUSH
42339: LD_INT 1
42341: NEG
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42358: LD_ADDR_VAR 0 39
42362: PUSH
42363: LD_INT 0
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 0
42375: PUSH
42376: LD_INT 1
42378: NEG
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 1
42396: PUSH
42397: LD_INT 1
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: LD_INT 1
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: LD_INT 0
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 1
42427: NEG
42428: PUSH
42429: LD_INT 1
42431: NEG
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 1
42439: NEG
42440: PUSH
42441: LD_INT 2
42443: NEG
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 1
42451: PUSH
42452: LD_INT 2
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42470: LD_ADDR_VAR 0 40
42474: PUSH
42475: LD_INT 0
42477: PUSH
42478: LD_INT 0
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: LD_INT 1
42490: NEG
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 1
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 1
42508: PUSH
42509: LD_INT 1
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 0
42518: PUSH
42519: LD_INT 1
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: LD_INT 0
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 1
42539: NEG
42540: PUSH
42541: LD_INT 1
42543: NEG
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 1
42551: PUSH
42552: LD_INT 1
42554: NEG
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 1
42562: NEG
42563: PUSH
42564: LD_INT 1
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42582: LD_ADDR_VAR 0 41
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: LD_INT 0
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 0
42599: PUSH
42600: LD_INT 1
42602: NEG
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 1
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 1
42620: PUSH
42621: LD_INT 1
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 0
42630: PUSH
42631: LD_INT 1
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: LD_INT 0
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 1
42651: NEG
42652: PUSH
42653: LD_INT 1
42655: NEG
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 1
42663: NEG
42664: PUSH
42665: LD_INT 2
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 1
42675: PUSH
42676: LD_INT 1
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 2
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 2
42696: PUSH
42697: LD_INT 1
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 2
42706: PUSH
42707: LD_INT 2
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 1
42716: PUSH
42717: LD_INT 2
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 1
42726: NEG
42727: PUSH
42728: LD_INT 1
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 2
42737: NEG
42738: PUSH
42739: LD_INT 0
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 2
42748: NEG
42749: PUSH
42750: LD_INT 1
42752: NEG
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 2
42760: NEG
42761: PUSH
42762: LD_INT 2
42764: NEG
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 2
42772: NEG
42773: PUSH
42774: LD_INT 3
42776: NEG
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 2
42784: PUSH
42785: LD_INT 1
42787: NEG
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 3
42795: PUSH
42796: LD_INT 0
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 3
42805: PUSH
42806: LD_INT 1
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 3
42815: PUSH
42816: LD_INT 2
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 3
42825: PUSH
42826: LD_INT 3
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 2
42835: PUSH
42836: LD_INT 3
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 2
42845: NEG
42846: PUSH
42847: LD_INT 1
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 3
42856: NEG
42857: PUSH
42858: LD_INT 0
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 3
42867: NEG
42868: PUSH
42869: LD_INT 1
42871: NEG
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 3
42879: NEG
42880: PUSH
42881: LD_INT 2
42883: NEG
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 3
42891: NEG
42892: PUSH
42893: LD_INT 3
42895: NEG
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42932: LD_ADDR_VAR 0 42
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: LD_INT 0
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 0
42949: PUSH
42950: LD_INT 1
42952: NEG
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 1
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: LD_INT 1
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 0
42980: PUSH
42981: LD_INT 1
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 1
42990: NEG
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 1
43001: NEG
43002: PUSH
43003: LD_INT 1
43005: NEG
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 1
43013: NEG
43014: PUSH
43015: LD_INT 2
43017: NEG
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: LD_INT 2
43028: NEG
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 1
43036: PUSH
43037: LD_INT 1
43039: NEG
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 2
43047: PUSH
43048: LD_INT 1
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 2
43057: PUSH
43058: LD_INT 2
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 1
43067: PUSH
43068: LD_INT 2
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 0
43077: PUSH
43078: LD_INT 2
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 1
43087: NEG
43088: PUSH
43089: LD_INT 1
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 2
43098: NEG
43099: PUSH
43100: LD_INT 1
43102: NEG
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 2
43110: NEG
43111: PUSH
43112: LD_INT 2
43114: NEG
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 2
43122: NEG
43123: PUSH
43124: LD_INT 3
43126: NEG
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 1
43134: NEG
43135: PUSH
43136: LD_INT 3
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 0
43146: PUSH
43147: LD_INT 3
43149: NEG
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 1
43157: PUSH
43158: LD_INT 2
43160: NEG
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 3
43168: PUSH
43169: LD_INT 2
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 3
43178: PUSH
43179: LD_INT 3
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 2
43188: PUSH
43189: LD_INT 3
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 1
43198: PUSH
43199: LD_INT 3
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 0
43208: PUSH
43209: LD_INT 3
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 1
43218: NEG
43219: PUSH
43220: LD_INT 2
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 3
43229: NEG
43230: PUSH
43231: LD_INT 2
43233: NEG
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 3
43241: NEG
43242: PUSH
43243: LD_INT 3
43245: NEG
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43282: LD_ADDR_VAR 0 43
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: LD_INT 0
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 0
43299: PUSH
43300: LD_INT 1
43302: NEG
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 1
43310: PUSH
43311: LD_INT 0
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 1
43320: PUSH
43321: LD_INT 1
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: LD_INT 1
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 1
43340: NEG
43341: PUSH
43342: LD_INT 0
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 1
43351: NEG
43352: PUSH
43353: LD_INT 1
43355: NEG
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 1
43363: NEG
43364: PUSH
43365: LD_INT 2
43367: NEG
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 0
43375: PUSH
43376: LD_INT 2
43378: NEG
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 1
43386: PUSH
43387: LD_INT 1
43389: NEG
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 2
43397: PUSH
43398: LD_INT 0
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 2
43407: PUSH
43408: LD_INT 1
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 1
43417: PUSH
43418: LD_INT 2
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: LD_INT 2
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 1
43437: NEG
43438: PUSH
43439: LD_INT 1
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 2
43448: NEG
43449: PUSH
43450: LD_INT 0
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 2
43459: NEG
43460: PUSH
43461: LD_INT 1
43463: NEG
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 1
43471: NEG
43472: PUSH
43473: LD_INT 3
43475: NEG
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 0
43483: PUSH
43484: LD_INT 3
43486: NEG
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 1
43494: PUSH
43495: LD_INT 2
43497: NEG
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 2
43505: PUSH
43506: LD_INT 1
43508: NEG
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 3
43516: PUSH
43517: LD_INT 0
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 3
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 1
43536: PUSH
43537: LD_INT 3
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 0
43546: PUSH
43547: LD_INT 3
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 1
43556: NEG
43557: PUSH
43558: LD_INT 2
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 2
43567: NEG
43568: PUSH
43569: LD_INT 1
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 3
43578: NEG
43579: PUSH
43580: LD_INT 0
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 3
43589: NEG
43590: PUSH
43591: LD_INT 1
43593: NEG
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43630: LD_ADDR_VAR 0 44
43634: PUSH
43635: LD_INT 0
43637: PUSH
43638: LD_INT 0
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 0
43647: PUSH
43648: LD_INT 1
43650: NEG
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 1
43658: PUSH
43659: LD_INT 0
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 1
43668: PUSH
43669: LD_INT 1
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: LD_INT 1
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 1
43688: NEG
43689: PUSH
43690: LD_INT 0
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 1
43699: NEG
43700: PUSH
43701: LD_INT 1
43703: NEG
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 1
43711: NEG
43712: PUSH
43713: LD_INT 2
43715: NEG
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: LD_INT 1
43726: NEG
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 2
43734: PUSH
43735: LD_INT 0
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 2
43744: PUSH
43745: LD_INT 1
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 2
43754: PUSH
43755: LD_INT 2
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 1
43764: PUSH
43765: LD_INT 2
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 1
43774: NEG
43775: PUSH
43776: LD_INT 1
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 2
43785: NEG
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 2
43796: NEG
43797: PUSH
43798: LD_INT 1
43800: NEG
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 2
43808: NEG
43809: PUSH
43810: LD_INT 2
43812: NEG
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 2
43820: NEG
43821: PUSH
43822: LD_INT 3
43824: NEG
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 2
43832: PUSH
43833: LD_INT 1
43835: NEG
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 3
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 3
43853: PUSH
43854: LD_INT 1
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 3
43863: PUSH
43864: LD_INT 2
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 3
43873: PUSH
43874: LD_INT 3
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 2
43883: PUSH
43884: LD_INT 3
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 2
43893: NEG
43894: PUSH
43895: LD_INT 1
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 3
43904: NEG
43905: PUSH
43906: LD_INT 0
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 3
43915: NEG
43916: PUSH
43917: LD_INT 1
43919: NEG
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 3
43927: NEG
43928: PUSH
43929: LD_INT 2
43931: NEG
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 3
43939: NEG
43940: PUSH
43941: LD_INT 3
43943: NEG
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43980: LD_ADDR_VAR 0 45
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: LD_INT 0
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 0
43997: PUSH
43998: LD_INT 1
44000: NEG
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: LD_INT 0
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: LD_INT 1
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 0
44028: PUSH
44029: LD_INT 1
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 1
44038: NEG
44039: PUSH
44040: LD_INT 0
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 1
44049: NEG
44050: PUSH
44051: LD_INT 1
44053: NEG
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: LD_INT 2
44065: NEG
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: LD_INT 2
44076: NEG
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 1
44084: PUSH
44085: LD_INT 1
44087: NEG
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 2
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 2
44105: PUSH
44106: LD_INT 2
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 1
44115: PUSH
44116: LD_INT 2
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 0
44125: PUSH
44126: LD_INT 2
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 1
44135: NEG
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 2
44146: NEG
44147: PUSH
44148: LD_INT 1
44150: NEG
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 2
44158: NEG
44159: PUSH
44160: LD_INT 2
44162: NEG
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 2
44170: NEG
44171: PUSH
44172: LD_INT 3
44174: NEG
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 1
44182: NEG
44183: PUSH
44184: LD_INT 3
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 0
44194: PUSH
44195: LD_INT 3
44197: NEG
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: LD_INT 2
44208: NEG
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 3
44216: PUSH
44217: LD_INT 2
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 3
44226: PUSH
44227: LD_INT 3
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 2
44236: PUSH
44237: LD_INT 3
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 1
44246: PUSH
44247: LD_INT 3
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 0
44256: PUSH
44257: LD_INT 3
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 1
44266: NEG
44267: PUSH
44268: LD_INT 2
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 3
44277: NEG
44278: PUSH
44279: LD_INT 2
44281: NEG
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 3
44289: NEG
44290: PUSH
44291: LD_INT 3
44293: NEG
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44330: LD_ADDR_VAR 0 46
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: LD_INT 1
44350: NEG
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 1
44358: PUSH
44359: LD_INT 0
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 1
44368: PUSH
44369: LD_INT 1
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 0
44378: PUSH
44379: LD_INT 1
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: LD_INT 0
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 1
44399: NEG
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 1
44411: NEG
44412: PUSH
44413: LD_INT 2
44415: NEG
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 0
44423: PUSH
44424: LD_INT 2
44426: NEG
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: LD_INT 1
44437: NEG
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 2
44445: PUSH
44446: LD_INT 0
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 2
44455: PUSH
44456: LD_INT 1
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: LD_INT 2
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 0
44475: PUSH
44476: LD_INT 2
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 1
44485: NEG
44486: PUSH
44487: LD_INT 1
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 2
44496: NEG
44497: PUSH
44498: LD_INT 0
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 2
44507: NEG
44508: PUSH
44509: LD_INT 1
44511: NEG
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 1
44519: NEG
44520: PUSH
44521: LD_INT 3
44523: NEG
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: LD_INT 3
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: LD_INT 2
44545: NEG
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 2
44553: PUSH
44554: LD_INT 1
44556: NEG
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 3
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 3
44574: PUSH
44575: LD_INT 1
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 1
44584: PUSH
44585: LD_INT 3
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 0
44594: PUSH
44595: LD_INT 3
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 1
44604: NEG
44605: PUSH
44606: LD_INT 2
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 2
44615: NEG
44616: PUSH
44617: LD_INT 1
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 3
44626: NEG
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 3
44637: NEG
44638: PUSH
44639: LD_INT 1
44641: NEG
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44678: LD_ADDR_VAR 0 47
44682: PUSH
44683: LD_INT 0
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: LD_INT 1
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: LD_INT 0
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 1
44716: PUSH
44717: LD_INT 1
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: NEG
44737: PUSH
44738: LD_INT 0
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 1
44747: NEG
44748: PUSH
44749: LD_INT 1
44751: NEG
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: LD_INT 2
44763: NEG
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 0
44771: PUSH
44772: LD_INT 2
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: LD_INT 1
44785: NEG
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 2
44793: NEG
44794: PUSH
44795: LD_INT 1
44797: NEG
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 2
44805: NEG
44806: PUSH
44807: LD_INT 2
44809: NEG
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44829: LD_ADDR_VAR 0 48
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: LD_INT 0
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 0
44846: PUSH
44847: LD_INT 1
44849: NEG
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 1
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: LD_INT 1
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 0
44877: PUSH
44878: LD_INT 1
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 1
44887: NEG
44888: PUSH
44889: LD_INT 0
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 1
44898: NEG
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 1
44910: NEG
44911: PUSH
44912: LD_INT 2
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: LD_INT 2
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 1
44933: PUSH
44934: LD_INT 1
44936: NEG
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 2
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 2
44954: PUSH
44955: LD_INT 1
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44976: LD_ADDR_VAR 0 49
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: LD_INT 1
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: LD_INT 0
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: LD_INT 1
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: LD_INT 1
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: LD_INT 0
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 1
45045: NEG
45046: PUSH
45047: LD_INT 1
45049: NEG
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 1
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 2
45068: PUSH
45069: LD_INT 0
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 2
45078: PUSH
45079: LD_INT 1
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 2
45088: PUSH
45089: LD_INT 2
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: LD_INT 2
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45120: LD_ADDR_VAR 0 50
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: LD_INT 0
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: LD_INT 1
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 1
45148: PUSH
45149: LD_INT 0
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: PUSH
45159: LD_INT 1
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 1
45178: NEG
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 1
45189: NEG
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 2
45201: PUSH
45202: LD_INT 1
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 2
45211: PUSH
45212: LD_INT 2
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 1
45221: PUSH
45222: LD_INT 2
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: LD_INT 2
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 1
45241: NEG
45242: PUSH
45243: LD_INT 1
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45264: LD_ADDR_VAR 0 51
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 0
45281: PUSH
45282: LD_INT 1
45284: NEG
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: LD_INT 0
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 1
45302: PUSH
45303: LD_INT 1
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 1
45333: NEG
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 1
45345: PUSH
45346: LD_INT 2
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: LD_INT 2
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 1
45365: NEG
45366: PUSH
45367: LD_INT 1
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 2
45376: NEG
45377: PUSH
45378: LD_INT 0
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 2
45387: NEG
45388: PUSH
45389: LD_INT 1
45391: NEG
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45411: LD_ADDR_VAR 0 52
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 0
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 1
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 0
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 1
45469: NEG
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 1
45480: NEG
45481: PUSH
45482: LD_INT 1
45484: NEG
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: LD_INT 2
45496: NEG
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 1
45504: NEG
45505: PUSH
45506: LD_INT 1
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 2
45515: NEG
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 2
45526: NEG
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 2
45538: NEG
45539: PUSH
45540: LD_INT 2
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45562: LD_ADDR_VAR 0 53
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: LD_INT 0
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: LD_INT 1
45582: NEG
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 0
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 1
45631: NEG
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 1
45643: NEG
45644: PUSH
45645: LD_INT 2
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: LD_INT 2
45658: NEG
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: LD_INT 1
45669: NEG
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 2
45677: PUSH
45678: LD_INT 0
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 2
45687: PUSH
45688: LD_INT 1
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 2
45697: PUSH
45698: LD_INT 2
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: LD_INT 2
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 0
45717: PUSH
45718: LD_INT 2
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 1
45727: NEG
45728: PUSH
45729: LD_INT 1
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 2
45738: NEG
45739: PUSH
45740: LD_INT 0
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 2
45749: NEG
45750: PUSH
45751: LD_INT 1
45753: NEG
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 2
45761: NEG
45762: PUSH
45763: LD_INT 2
45765: NEG
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45792: LD_ADDR_VAR 0 54
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: LD_INT 0
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 1
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: LD_INT 1
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 0
45840: PUSH
45841: LD_INT 1
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 1
45850: NEG
45851: PUSH
45852: LD_INT 0
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: NEG
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: LD_INT 2
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 0
45885: PUSH
45886: LD_INT 2
45888: NEG
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 1
45896: PUSH
45897: LD_INT 1
45899: NEG
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 2
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 2
45917: PUSH
45918: LD_INT 1
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 2
45927: PUSH
45928: LD_INT 2
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: LD_INT 2
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: LD_INT 2
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 1
45957: NEG
45958: PUSH
45959: LD_INT 1
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 2
45968: NEG
45969: PUSH
45970: LD_INT 0
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 2
45979: NEG
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 2
45991: NEG
45992: PUSH
45993: LD_INT 2
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46022: LD_ADDR_VAR 0 55
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: LD_INT 0
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: LD_INT 1
46042: NEG
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: LD_INT 1
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 0
46070: PUSH
46071: LD_INT 1
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 1
46080: NEG
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: NEG
46104: PUSH
46105: LD_INT 2
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: LD_INT 2
46118: NEG
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 1
46126: PUSH
46127: LD_INT 1
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 2
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 2
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 2
46157: PUSH
46158: LD_INT 2
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 1
46167: PUSH
46168: LD_INT 2
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: LD_INT 2
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 1
46187: NEG
46188: PUSH
46189: LD_INT 1
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 2
46198: NEG
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 2
46209: NEG
46210: PUSH
46211: LD_INT 1
46213: NEG
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 2
46221: NEG
46222: PUSH
46223: LD_INT 2
46225: NEG
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46252: LD_ADDR_VAR 0 56
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: LD_INT 0
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 0
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 1
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 0
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 1
46310: NEG
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 1
46321: NEG
46322: PUSH
46323: LD_INT 1
46325: NEG
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 1
46333: NEG
46334: PUSH
46335: LD_INT 2
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 0
46345: PUSH
46346: LD_INT 2
46348: NEG
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 1
46356: PUSH
46357: LD_INT 1
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 2
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 2
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 2
46387: PUSH
46388: LD_INT 2
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: LD_INT 2
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: LD_INT 2
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 1
46417: NEG
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 2
46428: NEG
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 2
46439: NEG
46440: PUSH
46441: LD_INT 1
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 2
46451: NEG
46452: PUSH
46453: LD_INT 2
46455: NEG
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46482: LD_ADDR_VAR 0 57
46486: PUSH
46487: LD_INT 0
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 1
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 0
46530: PUSH
46531: LD_INT 1
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 1
46551: NEG
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: PUSH
46565: LD_INT 2
46567: NEG
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: LD_INT 2
46578: NEG
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 2
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 2
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 2
46617: PUSH
46618: LD_INT 2
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: LD_INT 2
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 0
46637: PUSH
46638: LD_INT 2
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: LD_INT 1
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 2
46658: NEG
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 2
46669: NEG
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 2
46681: NEG
46682: PUSH
46683: LD_INT 2
46685: NEG
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46712: LD_ADDR_VAR 0 58
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: LD_INT 0
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 0
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 1
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: LD_INT 1
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: LD_INT 1
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 1
46781: NEG
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: NEG
46794: PUSH
46795: LD_INT 2
46797: NEG
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 0
46805: PUSH
46806: LD_INT 2
46808: NEG
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: LD_INT 1
46819: NEG
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 2
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 2
46837: PUSH
46838: LD_INT 1
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 2
46847: PUSH
46848: LD_INT 2
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: LD_INT 2
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: LD_INT 2
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 2
46888: NEG
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 2
46899: NEG
46900: PUSH
46901: LD_INT 1
46903: NEG
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 2
46911: NEG
46912: PUSH
46913: LD_INT 2
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46942: LD_ADDR_VAR 0 59
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: LD_INT 0
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 0
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 1
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 1
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: LD_INT 1
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 1
47011: NEG
47012: PUSH
47013: LD_INT 1
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47030: LD_ADDR_VAR 0 60
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 0
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 1
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 0
47078: PUSH
47079: LD_INT 1
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 1
47088: NEG
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 1
47099: NEG
47100: PUSH
47101: LD_INT 1
47103: NEG
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47118: LD_ADDR_VAR 0 61
47122: PUSH
47123: LD_INT 0
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 0
47135: PUSH
47136: LD_INT 1
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 1
47156: PUSH
47157: LD_INT 1
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: LD_INT 1
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 1
47176: NEG
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: LD_INT 1
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47206: LD_ADDR_VAR 0 62
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: LD_INT 1
47226: NEG
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 1
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: LD_INT 1
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 1
47275: NEG
47276: PUSH
47277: LD_INT 1
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47294: LD_ADDR_VAR 0 63
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 0
47311: PUSH
47312: LD_INT 1
47314: NEG
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: PUSH
47323: LD_INT 0
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 1
47352: NEG
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: LD_INT 1
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47382: LD_ADDR_VAR 0 64
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: LD_INT 0
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: LD_INT 1
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: LD_INT 1
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: LD_INT 1
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 1
47440: NEG
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 1
47451: NEG
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: ST_TO_ADDR
// end ; 1 :
47470: GO 53367
47472: LD_INT 1
47474: DOUBLE
47475: EQUAL
47476: IFTRUE 47480
47478: GO 50103
47480: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47481: LD_ADDR_VAR 0 11
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: LD_INT 3
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: LD_INT 3
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: LD_INT 2
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: LIST
47524: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47525: LD_ADDR_VAR 0 12
47529: PUSH
47530: LD_INT 2
47532: PUSH
47533: LD_INT 1
47535: NEG
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 3
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 3
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: LIST
47565: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47566: LD_ADDR_VAR 0 13
47570: PUSH
47571: LD_INT 3
47573: PUSH
47574: LD_INT 2
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 3
47583: PUSH
47584: LD_INT 3
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 2
47593: PUSH
47594: LD_INT 3
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: LIST
47605: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47606: LD_ADDR_VAR 0 14
47610: PUSH
47611: LD_INT 1
47613: PUSH
47614: LD_INT 3
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: LD_INT 3
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 1
47633: NEG
47634: PUSH
47635: LD_INT 2
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: LIST
47646: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47647: LD_ADDR_VAR 0 15
47651: PUSH
47652: LD_INT 2
47654: NEG
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 3
47665: NEG
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 3
47676: NEG
47677: PUSH
47678: LD_INT 1
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: LIST
47690: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47691: LD_ADDR_VAR 0 16
47695: PUSH
47696: LD_INT 2
47698: NEG
47699: PUSH
47700: LD_INT 3
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 3
47710: NEG
47711: PUSH
47712: LD_INT 2
47714: NEG
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 3
47722: NEG
47723: PUSH
47724: LD_INT 3
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: LIST
47736: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47737: LD_ADDR_VAR 0 17
47741: PUSH
47742: LD_INT 1
47744: NEG
47745: PUSH
47746: LD_INT 3
47748: NEG
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: LD_INT 3
47759: NEG
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: LD_INT 2
47770: NEG
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: LIST
47780: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47781: LD_ADDR_VAR 0 18
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: LD_INT 1
47791: NEG
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 3
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 3
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: LIST
47821: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47822: LD_ADDR_VAR 0 19
47826: PUSH
47827: LD_INT 3
47829: PUSH
47830: LD_INT 2
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 3
47839: PUSH
47840: LD_INT 3
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 2
47849: PUSH
47850: LD_INT 3
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: LIST
47861: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47862: LD_ADDR_VAR 0 20
47866: PUSH
47867: LD_INT 1
47869: PUSH
47870: LD_INT 3
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 0
47879: PUSH
47880: LD_INT 3
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 1
47889: NEG
47890: PUSH
47891: LD_INT 2
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: LIST
47902: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47903: LD_ADDR_VAR 0 21
47907: PUSH
47908: LD_INT 2
47910: NEG
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 3
47921: NEG
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 3
47932: NEG
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: LIST
47946: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47947: LD_ADDR_VAR 0 22
47951: PUSH
47952: LD_INT 2
47954: NEG
47955: PUSH
47956: LD_INT 3
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 3
47966: NEG
47967: PUSH
47968: LD_INT 2
47970: NEG
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 3
47978: NEG
47979: PUSH
47980: LD_INT 3
47982: NEG
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: LIST
47992: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47993: LD_ADDR_VAR 0 23
47997: PUSH
47998: LD_INT 0
48000: PUSH
48001: LD_INT 3
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 1
48011: NEG
48012: PUSH
48013: LD_INT 4
48015: NEG
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 1
48023: PUSH
48024: LD_INT 3
48026: NEG
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: LIST
48036: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48037: LD_ADDR_VAR 0 24
48041: PUSH
48042: LD_INT 3
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 3
48054: PUSH
48055: LD_INT 1
48057: NEG
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 4
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: LIST
48077: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48078: LD_ADDR_VAR 0 25
48082: PUSH
48083: LD_INT 3
48085: PUSH
48086: LD_INT 3
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 4
48095: PUSH
48096: LD_INT 3
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 3
48105: PUSH
48106: LD_INT 4
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: LIST
48117: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48118: LD_ADDR_VAR 0 26
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: LD_INT 3
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: PUSH
48136: LD_INT 4
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: LD_INT 3
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: LIST
48158: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48159: LD_ADDR_VAR 0 27
48163: PUSH
48164: LD_INT 3
48166: NEG
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 3
48177: NEG
48178: PUSH
48179: LD_INT 1
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 4
48188: NEG
48189: PUSH
48190: LD_INT 1
48192: NEG
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: LIST
48202: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48203: LD_ADDR_VAR 0 28
48207: PUSH
48208: LD_INT 3
48210: NEG
48211: PUSH
48212: LD_INT 3
48214: NEG
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 3
48222: NEG
48223: PUSH
48224: LD_INT 4
48226: NEG
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 4
48234: NEG
48235: PUSH
48236: LD_INT 3
48238: NEG
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: LIST
48248: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48249: LD_ADDR_VAR 0 29
48253: PUSH
48254: LD_INT 1
48256: NEG
48257: PUSH
48258: LD_INT 3
48260: NEG
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 0
48268: PUSH
48269: LD_INT 3
48271: NEG
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: LD_INT 2
48282: NEG
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: LD_INT 4
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: LD_INT 4
48305: NEG
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: PUSH
48314: LD_INT 3
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 1
48324: NEG
48325: PUSH
48326: LD_INT 5
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 0
48336: PUSH
48337: LD_INT 5
48339: NEG
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: LD_INT 4
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 1
48358: NEG
48359: PUSH
48360: LD_INT 6
48362: NEG
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: LD_INT 6
48373: NEG
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: LD_INT 5
48384: NEG
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48404: LD_ADDR_VAR 0 30
48408: PUSH
48409: LD_INT 2
48411: PUSH
48412: LD_INT 1
48414: NEG
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 3
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 3
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 3
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 4
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 4
48463: PUSH
48464: LD_INT 1
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 4
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 5
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 5
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 5
48504: PUSH
48505: LD_INT 1
48507: NEG
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 6
48515: PUSH
48516: LD_INT 0
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 6
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48547: LD_ADDR_VAR 0 31
48551: PUSH
48552: LD_INT 3
48554: PUSH
48555: LD_INT 2
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 3
48564: PUSH
48565: LD_INT 3
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 2
48574: PUSH
48575: LD_INT 3
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 4
48584: PUSH
48585: LD_INT 3
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 4
48594: PUSH
48595: LD_INT 4
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 3
48604: PUSH
48605: LD_INT 4
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 5
48614: PUSH
48615: LD_INT 4
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 5
48624: PUSH
48625: LD_INT 5
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 4
48634: PUSH
48635: LD_INT 5
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 6
48644: PUSH
48645: LD_INT 5
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 6
48654: PUSH
48655: LD_INT 6
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 5
48664: PUSH
48665: LD_INT 6
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48686: LD_ADDR_VAR 0 32
48690: PUSH
48691: LD_INT 1
48693: PUSH
48694: LD_INT 3
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: LD_INT 3
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 1
48713: NEG
48714: PUSH
48715: LD_INT 2
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: LD_INT 4
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: LD_INT 4
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: LD_INT 3
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: LD_INT 5
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 0
48765: PUSH
48766: LD_INT 5
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 1
48775: NEG
48776: PUSH
48777: LD_INT 4
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 1
48786: PUSH
48787: LD_INT 6
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 0
48796: PUSH
48797: LD_INT 6
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 1
48806: NEG
48807: PUSH
48808: LD_INT 5
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48829: LD_ADDR_VAR 0 33
48833: PUSH
48834: LD_INT 2
48836: NEG
48837: PUSH
48838: LD_INT 1
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 3
48847: NEG
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 3
48858: NEG
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 3
48870: NEG
48871: PUSH
48872: LD_INT 1
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 4
48881: NEG
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 4
48892: NEG
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 4
48904: NEG
48905: PUSH
48906: LD_INT 1
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 5
48915: NEG
48916: PUSH
48917: LD_INT 0
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 5
48926: NEG
48927: PUSH
48928: LD_INT 1
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 5
48938: NEG
48939: PUSH
48940: LD_INT 1
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 6
48949: NEG
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 6
48960: NEG
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48984: LD_ADDR_VAR 0 34
48988: PUSH
48989: LD_INT 2
48991: NEG
48992: PUSH
48993: LD_INT 3
48995: NEG
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 3
49003: NEG
49004: PUSH
49005: LD_INT 2
49007: NEG
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 3
49015: NEG
49016: PUSH
49017: LD_INT 3
49019: NEG
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 3
49027: NEG
49028: PUSH
49029: LD_INT 4
49031: NEG
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 4
49039: NEG
49040: PUSH
49041: LD_INT 3
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 4
49051: NEG
49052: PUSH
49053: LD_INT 4
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 4
49063: NEG
49064: PUSH
49065: LD_INT 5
49067: NEG
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 5
49075: NEG
49076: PUSH
49077: LD_INT 4
49079: NEG
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 5
49087: NEG
49088: PUSH
49089: LD_INT 5
49091: NEG
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 5
49099: NEG
49100: PUSH
49101: LD_INT 6
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 6
49111: NEG
49112: PUSH
49113: LD_INT 5
49115: NEG
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 6
49123: NEG
49124: PUSH
49125: LD_INT 6
49127: NEG
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49147: LD_ADDR_VAR 0 41
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: LD_INT 2
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 1
49165: NEG
49166: PUSH
49167: LD_INT 3
49169: NEG
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 1
49177: PUSH
49178: LD_INT 2
49180: NEG
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: LIST
49190: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49191: LD_ADDR_VAR 0 42
49195: PUSH
49196: LD_INT 2
49198: PUSH
49199: LD_INT 0
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 2
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 3
49219: PUSH
49220: LD_INT 1
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: LIST
49231: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49232: LD_ADDR_VAR 0 43
49236: PUSH
49237: LD_INT 2
49239: PUSH
49240: LD_INT 2
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 3
49249: PUSH
49250: LD_INT 2
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 2
49259: PUSH
49260: LD_INT 3
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: LIST
49271: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49272: LD_ADDR_VAR 0 44
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: LD_INT 2
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 1
49289: PUSH
49290: LD_INT 3
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: LD_INT 2
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: LIST
49312: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49313: LD_ADDR_VAR 0 45
49317: PUSH
49318: LD_INT 2
49320: NEG
49321: PUSH
49322: LD_INT 0
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 2
49331: NEG
49332: PUSH
49333: LD_INT 1
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 3
49342: NEG
49343: PUSH
49344: LD_INT 1
49346: NEG
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: LIST
49356: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49357: LD_ADDR_VAR 0 46
49361: PUSH
49362: LD_INT 2
49364: NEG
49365: PUSH
49366: LD_INT 2
49368: NEG
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 2
49376: NEG
49377: PUSH
49378: LD_INT 3
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 3
49388: NEG
49389: PUSH
49390: LD_INT 2
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: LIST
49402: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49403: LD_ADDR_VAR 0 47
49407: PUSH
49408: LD_INT 2
49410: NEG
49411: PUSH
49412: LD_INT 3
49414: NEG
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: LD_INT 3
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49436: LD_ADDR_VAR 0 48
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: LD_INT 2
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 2
49454: PUSH
49455: LD_INT 1
49457: NEG
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49467: LD_ADDR_VAR 0 49
49471: PUSH
49472: LD_INT 3
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 3
49484: PUSH
49485: LD_INT 2
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49496: LD_ADDR_VAR 0 50
49500: PUSH
49501: LD_INT 2
49503: PUSH
49504: LD_INT 3
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: LD_INT 3
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49525: LD_ADDR_VAR 0 51
49529: PUSH
49530: LD_INT 1
49532: NEG
49533: PUSH
49534: LD_INT 2
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 2
49543: NEG
49544: PUSH
49545: LD_INT 1
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49556: LD_ADDR_VAR 0 52
49560: PUSH
49561: LD_INT 3
49563: NEG
49564: PUSH
49565: LD_INT 1
49567: NEG
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 3
49575: NEG
49576: PUSH
49577: LD_INT 2
49579: NEG
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49589: LD_ADDR_VAR 0 53
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: LD_INT 3
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: LD_INT 3
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 1
49619: PUSH
49620: LD_INT 2
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: LIST
49632: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49633: LD_ADDR_VAR 0 54
49637: PUSH
49638: LD_INT 2
49640: PUSH
49641: LD_INT 1
49643: NEG
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 3
49651: PUSH
49652: LD_INT 0
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 3
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: LIST
49673: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49674: LD_ADDR_VAR 0 55
49678: PUSH
49679: LD_INT 3
49681: PUSH
49682: LD_INT 2
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 3
49691: PUSH
49692: LD_INT 3
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 2
49701: PUSH
49702: LD_INT 3
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: LIST
49713: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49714: LD_ADDR_VAR 0 56
49718: PUSH
49719: LD_INT 1
49721: PUSH
49722: LD_INT 3
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 0
49731: PUSH
49732: LD_INT 3
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: LD_INT 2
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: LIST
49754: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49755: LD_ADDR_VAR 0 57
49759: PUSH
49760: LD_INT 2
49762: NEG
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 3
49773: NEG
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 3
49784: NEG
49785: PUSH
49786: LD_INT 1
49788: NEG
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: LIST
49798: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49799: LD_ADDR_VAR 0 58
49803: PUSH
49804: LD_INT 2
49806: NEG
49807: PUSH
49808: LD_INT 3
49810: NEG
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 3
49818: NEG
49819: PUSH
49820: LD_INT 2
49822: NEG
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 3
49830: NEG
49831: PUSH
49832: LD_INT 3
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: LIST
49844: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49845: LD_ADDR_VAR 0 59
49849: PUSH
49850: LD_INT 1
49852: NEG
49853: PUSH
49854: LD_INT 2
49856: NEG
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: LD_INT 2
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: LD_INT 1
49878: NEG
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: LIST
49888: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49889: LD_ADDR_VAR 0 60
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: LD_INT 1
49899: NEG
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 2
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 2
49917: PUSH
49918: LD_INT 1
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: LIST
49929: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49930: LD_ADDR_VAR 0 61
49934: PUSH
49935: LD_INT 2
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 2
49947: PUSH
49948: LD_INT 2
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: LD_INT 2
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: LIST
49969: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49970: LD_ADDR_VAR 0 62
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: LD_INT 2
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: LD_INT 2
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 1
49997: NEG
49998: PUSH
49999: LD_INT 1
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: LIST
50010: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50011: LD_ADDR_VAR 0 63
50015: PUSH
50016: LD_INT 1
50018: NEG
50019: PUSH
50020: LD_INT 1
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 2
50029: NEG
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 2
50040: NEG
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: LIST
50054: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50055: LD_ADDR_VAR 0 64
50059: PUSH
50060: LD_INT 1
50062: NEG
50063: PUSH
50064: LD_INT 2
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 2
50074: NEG
50075: PUSH
50076: LD_INT 1
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 2
50086: NEG
50087: PUSH
50088: LD_INT 2
50090: NEG
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: LIST
50100: ST_TO_ADDR
// end ; 2 :
50101: GO 53367
50103: LD_INT 2
50105: DOUBLE
50106: EQUAL
50107: IFTRUE 50111
50109: GO 53366
50111: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50112: LD_ADDR_VAR 0 29
50116: PUSH
50117: LD_INT 4
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 4
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 5
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 5
50150: PUSH
50151: LD_INT 1
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 4
50160: PUSH
50161: LD_INT 1
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 3
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 3
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 3
50191: PUSH
50192: LD_INT 2
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 5
50202: PUSH
50203: LD_INT 2
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 3
50212: PUSH
50213: LD_INT 3
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 3
50222: PUSH
50223: LD_INT 2
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 4
50232: PUSH
50233: LD_INT 3
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 4
50242: PUSH
50243: LD_INT 4
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 3
50252: PUSH
50253: LD_INT 4
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 2
50262: PUSH
50263: LD_INT 3
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 2
50272: PUSH
50273: LD_INT 2
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 4
50282: PUSH
50283: LD_INT 2
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 2
50292: PUSH
50293: LD_INT 4
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: LD_INT 4
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: LD_INT 3
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 1
50322: PUSH
50323: LD_INT 4
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: LD_INT 5
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: LD_INT 5
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: LD_INT 4
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 1
50363: NEG
50364: PUSH
50365: LD_INT 3
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 2
50374: PUSH
50375: LD_INT 5
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 2
50384: NEG
50385: PUSH
50386: LD_INT 3
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 3
50395: NEG
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 3
50406: NEG
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 2
50418: NEG
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 2
50429: NEG
50430: PUSH
50431: LD_INT 1
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 3
50440: NEG
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 4
50451: NEG
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 4
50462: NEG
50463: PUSH
50464: LD_INT 1
50466: NEG
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 4
50474: NEG
50475: PUSH
50476: LD_INT 2
50478: NEG
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 2
50486: NEG
50487: PUSH
50488: LD_INT 2
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 4
50497: NEG
50498: PUSH
50499: LD_INT 4
50501: NEG
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 4
50509: NEG
50510: PUSH
50511: LD_INT 5
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 3
50521: NEG
50522: PUSH
50523: LD_INT 4
50525: NEG
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 3
50533: NEG
50534: PUSH
50535: LD_INT 3
50537: NEG
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 4
50545: NEG
50546: PUSH
50547: LD_INT 3
50549: NEG
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 5
50557: NEG
50558: PUSH
50559: LD_INT 4
50561: NEG
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 5
50569: NEG
50570: PUSH
50571: LD_INT 5
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 3
50581: NEG
50582: PUSH
50583: LD_INT 5
50585: NEG
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 5
50593: NEG
50594: PUSH
50595: LD_INT 3
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50650: LD_ADDR_VAR 0 30
50654: PUSH
50655: LD_INT 4
50657: PUSH
50658: LD_INT 4
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 4
50667: PUSH
50668: LD_INT 3
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 5
50677: PUSH
50678: LD_INT 4
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 5
50687: PUSH
50688: LD_INT 5
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 4
50697: PUSH
50698: LD_INT 5
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 3
50707: PUSH
50708: LD_INT 4
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 3
50717: PUSH
50718: LD_INT 3
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 5
50727: PUSH
50728: LD_INT 3
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 3
50737: PUSH
50738: LD_INT 5
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 0
50747: PUSH
50748: LD_INT 3
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: LD_INT 2
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: LD_INT 3
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 1
50777: PUSH
50778: LD_INT 4
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: LD_INT 4
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: LD_INT 3
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: LD_INT 2
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 2
50819: PUSH
50820: LD_INT 4
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 2
50829: NEG
50830: PUSH
50831: LD_INT 2
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 4
50840: NEG
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 4
50851: NEG
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 3
50863: NEG
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 3
50874: NEG
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 4
50885: NEG
50886: PUSH
50887: LD_INT 1
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 5
50896: NEG
50897: PUSH
50898: LD_INT 0
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 5
50907: NEG
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 5
50919: NEG
50920: PUSH
50921: LD_INT 2
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 3
50931: NEG
50932: PUSH
50933: LD_INT 2
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 3
50942: NEG
50943: PUSH
50944: LD_INT 3
50946: NEG
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 3
50954: NEG
50955: PUSH
50956: LD_INT 4
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 2
50966: NEG
50967: PUSH
50968: LD_INT 3
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 2
50978: NEG
50979: PUSH
50980: LD_INT 2
50982: NEG
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 3
50990: NEG
50991: PUSH
50992: LD_INT 2
50994: NEG
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 4
51002: NEG
51003: PUSH
51004: LD_INT 3
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 4
51014: NEG
51015: PUSH
51016: LD_INT 4
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 2
51026: NEG
51027: PUSH
51028: LD_INT 4
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 4
51038: NEG
51039: PUSH
51040: LD_INT 2
51042: NEG
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 0
51050: PUSH
51051: LD_INT 4
51053: NEG
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: LD_INT 5
51064: NEG
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 1
51072: PUSH
51073: LD_INT 4
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 1
51083: PUSH
51084: LD_INT 3
51086: NEG
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: LD_INT 3
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: NEG
51106: PUSH
51107: LD_INT 4
51109: NEG
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 1
51117: NEG
51118: PUSH
51119: LD_INT 5
51121: NEG
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 2
51129: PUSH
51130: LD_INT 3
51132: NEG
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 2
51140: NEG
51141: PUSH
51142: LD_INT 5
51144: NEG
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51197: LD_ADDR_VAR 0 31
51201: PUSH
51202: LD_INT 0
51204: PUSH
51205: LD_INT 4
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: LD_INT 3
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: LD_INT 4
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: LD_INT 5
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: LD_INT 5
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 1
51254: NEG
51255: PUSH
51256: LD_INT 4
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: NEG
51266: PUSH
51267: LD_INT 3
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 2
51276: PUSH
51277: LD_INT 5
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 2
51286: NEG
51287: PUSH
51288: LD_INT 3
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 3
51297: NEG
51298: PUSH
51299: LD_INT 0
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 3
51308: NEG
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 2
51320: NEG
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 2
51331: NEG
51332: PUSH
51333: LD_INT 1
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 3
51342: NEG
51343: PUSH
51344: LD_INT 1
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 4
51353: NEG
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 4
51364: NEG
51365: PUSH
51366: LD_INT 1
51368: NEG
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 4
51376: NEG
51377: PUSH
51378: LD_INT 2
51380: NEG
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 2
51388: NEG
51389: PUSH
51390: LD_INT 2
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 4
51399: NEG
51400: PUSH
51401: LD_INT 4
51403: NEG
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 4
51411: NEG
51412: PUSH
51413: LD_INT 5
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 3
51423: NEG
51424: PUSH
51425: LD_INT 4
51427: NEG
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 3
51435: NEG
51436: PUSH
51437: LD_INT 3
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 4
51447: NEG
51448: PUSH
51449: LD_INT 3
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 5
51459: NEG
51460: PUSH
51461: LD_INT 4
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 5
51471: NEG
51472: PUSH
51473: LD_INT 5
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 3
51483: NEG
51484: PUSH
51485: LD_INT 5
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 5
51495: NEG
51496: PUSH
51497: LD_INT 3
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: LD_INT 3
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 0
51518: PUSH
51519: LD_INT 4
51521: NEG
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: LD_INT 3
51532: NEG
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 1
51540: PUSH
51541: LD_INT 2
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 0
51551: PUSH
51552: LD_INT 2
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 1
51562: NEG
51563: PUSH
51564: LD_INT 3
51566: NEG
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 1
51574: NEG
51575: PUSH
51576: LD_INT 4
51578: NEG
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 2
51586: PUSH
51587: LD_INT 2
51589: NEG
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 2
51597: NEG
51598: PUSH
51599: LD_INT 4
51601: NEG
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 4
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 4
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 5
51630: PUSH
51631: LD_INT 0
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 5
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 4
51650: PUSH
51651: LD_INT 1
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 3
51660: PUSH
51661: LD_INT 0
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 3
51670: PUSH
51671: LD_INT 1
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 3
51681: PUSH
51682: LD_INT 2
51684: NEG
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 5
51692: PUSH
51693: LD_INT 2
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51747: LD_ADDR_VAR 0 32
51751: PUSH
51752: LD_INT 4
51754: NEG
51755: PUSH
51756: LD_INT 0
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 4
51765: NEG
51766: PUSH
51767: LD_INT 1
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 3
51777: NEG
51778: PUSH
51779: LD_INT 0
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 3
51788: NEG
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 4
51799: NEG
51800: PUSH
51801: LD_INT 1
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 5
51810: NEG
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 5
51821: NEG
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 5
51833: NEG
51834: PUSH
51835: LD_INT 2
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 3
51845: NEG
51846: PUSH
51847: LD_INT 2
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 3
51856: NEG
51857: PUSH
51858: LD_INT 3
51860: NEG
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 3
51868: NEG
51869: PUSH
51870: LD_INT 4
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 2
51880: NEG
51881: PUSH
51882: LD_INT 3
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 2
51892: NEG
51893: PUSH
51894: LD_INT 2
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 3
51904: NEG
51905: PUSH
51906: LD_INT 2
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 4
51916: NEG
51917: PUSH
51918: LD_INT 3
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 4
51928: NEG
51929: PUSH
51930: LD_INT 4
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 2
51940: NEG
51941: PUSH
51942: LD_INT 4
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 4
51952: NEG
51953: PUSH
51954: LD_INT 2
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 0
51964: PUSH
51965: LD_INT 4
51967: NEG
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: LD_INT 5
51978: NEG
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 1
51986: PUSH
51987: LD_INT 4
51989: NEG
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 1
51997: PUSH
51998: LD_INT 3
52000: NEG
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: LD_INT 3
52011: NEG
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 1
52019: NEG
52020: PUSH
52021: LD_INT 4
52023: NEG
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: PUSH
52033: LD_INT 5
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 2
52043: PUSH
52044: LD_INT 3
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 2
52054: NEG
52055: PUSH
52056: LD_INT 5
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 3
52066: PUSH
52067: LD_INT 0
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 3
52076: PUSH
52077: LD_INT 1
52079: NEG
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 4
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 4
52097: PUSH
52098: LD_INT 1
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 3
52107: PUSH
52108: LD_INT 1
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 2
52117: PUSH
52118: LD_INT 0
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 2
52127: PUSH
52128: LD_INT 1
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 2
52138: PUSH
52139: LD_INT 2
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 4
52149: PUSH
52150: LD_INT 2
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 4
52159: PUSH
52160: LD_INT 4
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 4
52169: PUSH
52170: LD_INT 3
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 5
52179: PUSH
52180: LD_INT 4
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 5
52189: PUSH
52190: LD_INT 5
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 4
52199: PUSH
52200: LD_INT 5
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 3
52209: PUSH
52210: LD_INT 4
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 3
52219: PUSH
52220: LD_INT 3
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 5
52229: PUSH
52230: LD_INT 3
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 3
52239: PUSH
52240: LD_INT 5
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52294: LD_ADDR_VAR 0 33
52298: PUSH
52299: LD_INT 4
52301: NEG
52302: PUSH
52303: LD_INT 4
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 4
52313: NEG
52314: PUSH
52315: LD_INT 5
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 3
52325: NEG
52326: PUSH
52327: LD_INT 4
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 3
52337: NEG
52338: PUSH
52339: LD_INT 3
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 4
52349: NEG
52350: PUSH
52351: LD_INT 3
52353: NEG
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 5
52361: NEG
52362: PUSH
52363: LD_INT 4
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 5
52373: NEG
52374: PUSH
52375: LD_INT 5
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 3
52385: NEG
52386: PUSH
52387: LD_INT 5
52389: NEG
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 5
52397: NEG
52398: PUSH
52399: LD_INT 3
52401: NEG
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: LD_INT 3
52412: NEG
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: LD_INT 4
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: LD_INT 3
52434: NEG
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 1
52442: PUSH
52443: LD_INT 2
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 0
52453: PUSH
52454: LD_INT 2
52456: NEG
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 1
52464: NEG
52465: PUSH
52466: LD_INT 3
52468: NEG
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 1
52476: NEG
52477: PUSH
52478: LD_INT 4
52480: NEG
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 2
52488: PUSH
52489: LD_INT 2
52491: NEG
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 2
52499: NEG
52500: PUSH
52501: LD_INT 4
52503: NEG
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 4
52511: PUSH
52512: LD_INT 0
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 4
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 5
52532: PUSH
52533: LD_INT 0
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 5
52542: PUSH
52543: LD_INT 1
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 4
52552: PUSH
52553: LD_INT 1
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 3
52562: PUSH
52563: LD_INT 0
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 3
52572: PUSH
52573: LD_INT 1
52575: NEG
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 3
52583: PUSH
52584: LD_INT 2
52586: NEG
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 5
52594: PUSH
52595: LD_INT 2
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 3
52604: PUSH
52605: LD_INT 3
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 3
52614: PUSH
52615: LD_INT 2
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 4
52624: PUSH
52625: LD_INT 3
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 4
52634: PUSH
52635: LD_INT 4
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 3
52644: PUSH
52645: LD_INT 4
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 2
52654: PUSH
52655: LD_INT 3
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 2
52664: PUSH
52665: LD_INT 2
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 4
52674: PUSH
52675: LD_INT 2
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 2
52684: PUSH
52685: LD_INT 4
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: LD_INT 4
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 0
52704: PUSH
52705: LD_INT 3
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 1
52714: PUSH
52715: LD_INT 4
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: LD_INT 5
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: LD_INT 5
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: LD_INT 4
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: NEG
52756: PUSH
52757: LD_INT 3
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 2
52766: PUSH
52767: LD_INT 5
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 2
52776: NEG
52777: PUSH
52778: LD_INT 3
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52832: LD_ADDR_VAR 0 34
52836: PUSH
52837: LD_INT 0
52839: PUSH
52840: LD_INT 4
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: LD_INT 5
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 1
52861: PUSH
52862: LD_INT 4
52864: NEG
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 1
52872: PUSH
52873: LD_INT 3
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: LD_INT 3
52886: NEG
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: LD_INT 4
52898: NEG
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 1
52906: NEG
52907: PUSH
52908: LD_INT 5
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 2
52918: PUSH
52919: LD_INT 3
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 2
52929: NEG
52930: PUSH
52931: LD_INT 5
52933: NEG
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 3
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 3
52951: PUSH
52952: LD_INT 1
52954: NEG
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 4
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 4
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 3
52982: PUSH
52983: LD_INT 1
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 2
52992: PUSH
52993: LD_INT 0
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 2
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 2
53013: PUSH
53014: LD_INT 2
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 4
53024: PUSH
53025: LD_INT 2
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 4
53034: PUSH
53035: LD_INT 4
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 4
53044: PUSH
53045: LD_INT 3
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 5
53054: PUSH
53055: LD_INT 4
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 5
53064: PUSH
53065: LD_INT 5
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 4
53074: PUSH
53075: LD_INT 5
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 3
53084: PUSH
53085: LD_INT 4
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 3
53094: PUSH
53095: LD_INT 3
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 5
53104: PUSH
53105: LD_INT 3
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 3
53114: PUSH
53115: LD_INT 5
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: LD_INT 3
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: LD_INT 2
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: LD_INT 3
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: LD_INT 4
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: LD_INT 4
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 1
53174: NEG
53175: PUSH
53176: LD_INT 3
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 1
53185: NEG
53186: PUSH
53187: LD_INT 2
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 2
53196: PUSH
53197: LD_INT 4
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 2
53206: NEG
53207: PUSH
53208: LD_INT 2
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 4
53217: NEG
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 4
53228: NEG
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 3
53240: NEG
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 3
53251: NEG
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 4
53262: NEG
53263: PUSH
53264: LD_INT 1
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 5
53273: NEG
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 5
53284: NEG
53285: PUSH
53286: LD_INT 1
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 5
53296: NEG
53297: PUSH
53298: LD_INT 2
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 3
53308: NEG
53309: PUSH
53310: LD_INT 2
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: ST_TO_ADDR
// end ; end ;
53364: GO 53367
53366: POP
// case btype of b_depot , b_warehouse :
53367: LD_VAR 0 1
53371: PUSH
53372: LD_INT 0
53374: DOUBLE
53375: EQUAL
53376: IFTRUE 53386
53378: LD_INT 1
53380: DOUBLE
53381: EQUAL
53382: IFTRUE 53386
53384: GO 53587
53386: POP
// case nation of nation_american :
53387: LD_VAR 0 5
53391: PUSH
53392: LD_INT 1
53394: DOUBLE
53395: EQUAL
53396: IFTRUE 53400
53398: GO 53456
53400: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53401: LD_ADDR_VAR 0 9
53405: PUSH
53406: LD_VAR 0 11
53410: PUSH
53411: LD_VAR 0 12
53415: PUSH
53416: LD_VAR 0 13
53420: PUSH
53421: LD_VAR 0 14
53425: PUSH
53426: LD_VAR 0 15
53430: PUSH
53431: LD_VAR 0 16
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: PUSH
53444: LD_VAR 0 4
53448: PUSH
53449: LD_INT 1
53451: PLUS
53452: ARRAY
53453: ST_TO_ADDR
53454: GO 53585
53456: LD_INT 2
53458: DOUBLE
53459: EQUAL
53460: IFTRUE 53464
53462: GO 53520
53464: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53465: LD_ADDR_VAR 0 9
53469: PUSH
53470: LD_VAR 0 17
53474: PUSH
53475: LD_VAR 0 18
53479: PUSH
53480: LD_VAR 0 19
53484: PUSH
53485: LD_VAR 0 20
53489: PUSH
53490: LD_VAR 0 21
53494: PUSH
53495: LD_VAR 0 22
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: PUSH
53508: LD_VAR 0 4
53512: PUSH
53513: LD_INT 1
53515: PLUS
53516: ARRAY
53517: ST_TO_ADDR
53518: GO 53585
53520: LD_INT 3
53522: DOUBLE
53523: EQUAL
53524: IFTRUE 53528
53526: GO 53584
53528: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53529: LD_ADDR_VAR 0 9
53533: PUSH
53534: LD_VAR 0 23
53538: PUSH
53539: LD_VAR 0 24
53543: PUSH
53544: LD_VAR 0 25
53548: PUSH
53549: LD_VAR 0 26
53553: PUSH
53554: LD_VAR 0 27
53558: PUSH
53559: LD_VAR 0 28
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: PUSH
53572: LD_VAR 0 4
53576: PUSH
53577: LD_INT 1
53579: PLUS
53580: ARRAY
53581: ST_TO_ADDR
53582: GO 53585
53584: POP
53585: GO 54140
53587: LD_INT 2
53589: DOUBLE
53590: EQUAL
53591: IFTRUE 53601
53593: LD_INT 3
53595: DOUBLE
53596: EQUAL
53597: IFTRUE 53601
53599: GO 53657
53601: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53602: LD_ADDR_VAR 0 9
53606: PUSH
53607: LD_VAR 0 29
53611: PUSH
53612: LD_VAR 0 30
53616: PUSH
53617: LD_VAR 0 31
53621: PUSH
53622: LD_VAR 0 32
53626: PUSH
53627: LD_VAR 0 33
53631: PUSH
53632: LD_VAR 0 34
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: PUSH
53645: LD_VAR 0 4
53649: PUSH
53650: LD_INT 1
53652: PLUS
53653: ARRAY
53654: ST_TO_ADDR
53655: GO 54140
53657: LD_INT 16
53659: DOUBLE
53660: EQUAL
53661: IFTRUE 53719
53663: LD_INT 17
53665: DOUBLE
53666: EQUAL
53667: IFTRUE 53719
53669: LD_INT 18
53671: DOUBLE
53672: EQUAL
53673: IFTRUE 53719
53675: LD_INT 19
53677: DOUBLE
53678: EQUAL
53679: IFTRUE 53719
53681: LD_INT 22
53683: DOUBLE
53684: EQUAL
53685: IFTRUE 53719
53687: LD_INT 20
53689: DOUBLE
53690: EQUAL
53691: IFTRUE 53719
53693: LD_INT 21
53695: DOUBLE
53696: EQUAL
53697: IFTRUE 53719
53699: LD_INT 23
53701: DOUBLE
53702: EQUAL
53703: IFTRUE 53719
53705: LD_INT 24
53707: DOUBLE
53708: EQUAL
53709: IFTRUE 53719
53711: LD_INT 25
53713: DOUBLE
53714: EQUAL
53715: IFTRUE 53719
53717: GO 53775
53719: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53720: LD_ADDR_VAR 0 9
53724: PUSH
53725: LD_VAR 0 35
53729: PUSH
53730: LD_VAR 0 36
53734: PUSH
53735: LD_VAR 0 37
53739: PUSH
53740: LD_VAR 0 38
53744: PUSH
53745: LD_VAR 0 39
53749: PUSH
53750: LD_VAR 0 40
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: PUSH
53763: LD_VAR 0 4
53767: PUSH
53768: LD_INT 1
53770: PLUS
53771: ARRAY
53772: ST_TO_ADDR
53773: GO 54140
53775: LD_INT 6
53777: DOUBLE
53778: EQUAL
53779: IFTRUE 53831
53781: LD_INT 7
53783: DOUBLE
53784: EQUAL
53785: IFTRUE 53831
53787: LD_INT 8
53789: DOUBLE
53790: EQUAL
53791: IFTRUE 53831
53793: LD_INT 13
53795: DOUBLE
53796: EQUAL
53797: IFTRUE 53831
53799: LD_INT 12
53801: DOUBLE
53802: EQUAL
53803: IFTRUE 53831
53805: LD_INT 15
53807: DOUBLE
53808: EQUAL
53809: IFTRUE 53831
53811: LD_INT 11
53813: DOUBLE
53814: EQUAL
53815: IFTRUE 53831
53817: LD_INT 14
53819: DOUBLE
53820: EQUAL
53821: IFTRUE 53831
53823: LD_INT 10
53825: DOUBLE
53826: EQUAL
53827: IFTRUE 53831
53829: GO 53887
53831: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53832: LD_ADDR_VAR 0 9
53836: PUSH
53837: LD_VAR 0 41
53841: PUSH
53842: LD_VAR 0 42
53846: PUSH
53847: LD_VAR 0 43
53851: PUSH
53852: LD_VAR 0 44
53856: PUSH
53857: LD_VAR 0 45
53861: PUSH
53862: LD_VAR 0 46
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: PUSH
53875: LD_VAR 0 4
53879: PUSH
53880: LD_INT 1
53882: PLUS
53883: ARRAY
53884: ST_TO_ADDR
53885: GO 54140
53887: LD_INT 36
53889: DOUBLE
53890: EQUAL
53891: IFTRUE 53895
53893: GO 53951
53895: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53896: LD_ADDR_VAR 0 9
53900: PUSH
53901: LD_VAR 0 47
53905: PUSH
53906: LD_VAR 0 48
53910: PUSH
53911: LD_VAR 0 49
53915: PUSH
53916: LD_VAR 0 50
53920: PUSH
53921: LD_VAR 0 51
53925: PUSH
53926: LD_VAR 0 52
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: PUSH
53939: LD_VAR 0 4
53943: PUSH
53944: LD_INT 1
53946: PLUS
53947: ARRAY
53948: ST_TO_ADDR
53949: GO 54140
53951: LD_INT 4
53953: DOUBLE
53954: EQUAL
53955: IFTRUE 53977
53957: LD_INT 5
53959: DOUBLE
53960: EQUAL
53961: IFTRUE 53977
53963: LD_INT 34
53965: DOUBLE
53966: EQUAL
53967: IFTRUE 53977
53969: LD_INT 37
53971: DOUBLE
53972: EQUAL
53973: IFTRUE 53977
53975: GO 54033
53977: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53978: LD_ADDR_VAR 0 9
53982: PUSH
53983: LD_VAR 0 53
53987: PUSH
53988: LD_VAR 0 54
53992: PUSH
53993: LD_VAR 0 55
53997: PUSH
53998: LD_VAR 0 56
54002: PUSH
54003: LD_VAR 0 57
54007: PUSH
54008: LD_VAR 0 58
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: PUSH
54021: LD_VAR 0 4
54025: PUSH
54026: LD_INT 1
54028: PLUS
54029: ARRAY
54030: ST_TO_ADDR
54031: GO 54140
54033: LD_INT 31
54035: DOUBLE
54036: EQUAL
54037: IFTRUE 54083
54039: LD_INT 32
54041: DOUBLE
54042: EQUAL
54043: IFTRUE 54083
54045: LD_INT 33
54047: DOUBLE
54048: EQUAL
54049: IFTRUE 54083
54051: LD_INT 27
54053: DOUBLE
54054: EQUAL
54055: IFTRUE 54083
54057: LD_INT 26
54059: DOUBLE
54060: EQUAL
54061: IFTRUE 54083
54063: LD_INT 28
54065: DOUBLE
54066: EQUAL
54067: IFTRUE 54083
54069: LD_INT 29
54071: DOUBLE
54072: EQUAL
54073: IFTRUE 54083
54075: LD_INT 30
54077: DOUBLE
54078: EQUAL
54079: IFTRUE 54083
54081: GO 54139
54083: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54084: LD_ADDR_VAR 0 9
54088: PUSH
54089: LD_VAR 0 59
54093: PUSH
54094: LD_VAR 0 60
54098: PUSH
54099: LD_VAR 0 61
54103: PUSH
54104: LD_VAR 0 62
54108: PUSH
54109: LD_VAR 0 63
54113: PUSH
54114: LD_VAR 0 64
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: PUSH
54127: LD_VAR 0 4
54131: PUSH
54132: LD_INT 1
54134: PLUS
54135: ARRAY
54136: ST_TO_ADDR
54137: GO 54140
54139: POP
// temp_list2 = [ ] ;
54140: LD_ADDR_VAR 0 10
54144: PUSH
54145: EMPTY
54146: ST_TO_ADDR
// for i in temp_list do
54147: LD_ADDR_VAR 0 8
54151: PUSH
54152: LD_VAR 0 9
54156: PUSH
54157: FOR_IN
54158: IFFALSE 54210
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54160: LD_ADDR_VAR 0 10
54164: PUSH
54165: LD_VAR 0 10
54169: PUSH
54170: LD_VAR 0 8
54174: PUSH
54175: LD_INT 1
54177: ARRAY
54178: PUSH
54179: LD_VAR 0 2
54183: PLUS
54184: PUSH
54185: LD_VAR 0 8
54189: PUSH
54190: LD_INT 2
54192: ARRAY
54193: PUSH
54194: LD_VAR 0 3
54198: PLUS
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: EMPTY
54205: LIST
54206: ADD
54207: ST_TO_ADDR
54208: GO 54157
54210: POP
54211: POP
// result = temp_list2 ;
54212: LD_ADDR_VAR 0 7
54216: PUSH
54217: LD_VAR 0 10
54221: ST_TO_ADDR
// end ;
54222: LD_VAR 0 7
54226: RET
// export function EnemyInRange ( unit , dist ) ; begin
54227: LD_INT 0
54229: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54230: LD_ADDR_VAR 0 3
54234: PUSH
54235: LD_VAR 0 1
54239: PPUSH
54240: CALL_OW 255
54244: PPUSH
54245: LD_VAR 0 1
54249: PPUSH
54250: CALL_OW 250
54254: PPUSH
54255: LD_VAR 0 1
54259: PPUSH
54260: CALL_OW 251
54264: PPUSH
54265: LD_VAR 0 2
54269: PPUSH
54270: CALL 27623 0 4
54274: PUSH
54275: LD_INT 4
54277: ARRAY
54278: ST_TO_ADDR
// end ;
54279: LD_VAR 0 3
54283: RET
// export function PlayerSeeMe ( unit ) ; begin
54284: LD_INT 0
54286: PPUSH
// result := See ( your_side , unit ) ;
54287: LD_ADDR_VAR 0 2
54291: PUSH
54292: LD_OWVAR 2
54296: PPUSH
54297: LD_VAR 0 1
54301: PPUSH
54302: CALL_OW 292
54306: ST_TO_ADDR
// end ;
54307: LD_VAR 0 2
54311: RET
// export function ReverseDir ( unit ) ; begin
54312: LD_INT 0
54314: PPUSH
// if not unit then
54315: LD_VAR 0 1
54319: NOT
54320: IFFALSE 54324
// exit ;
54322: GO 54347
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54324: LD_ADDR_VAR 0 2
54328: PUSH
54329: LD_VAR 0 1
54333: PPUSH
54334: CALL_OW 254
54338: PUSH
54339: LD_INT 3
54341: PLUS
54342: PUSH
54343: LD_INT 6
54345: MOD
54346: ST_TO_ADDR
// end ;
54347: LD_VAR 0 2
54351: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
54352: LD_INT 0
54354: PPUSH
54355: PPUSH
54356: PPUSH
54357: PPUSH
54358: PPUSH
54359: PPUSH
// if not unit or not hexes then
54360: LD_VAR 0 1
54364: NOT
54365: PUSH
54366: LD_VAR 0 2
54370: NOT
54371: OR
54372: IFFALSE 54376
// exit ;
54374: GO 54499
// dist := 9999 ;
54376: LD_ADDR_VAR 0 5
54380: PUSH
54381: LD_INT 9999
54383: ST_TO_ADDR
// for i = 1 to hexes do
54384: LD_ADDR_VAR 0 4
54388: PUSH
54389: DOUBLE
54390: LD_INT 1
54392: DEC
54393: ST_TO_ADDR
54394: LD_VAR 0 2
54398: PUSH
54399: FOR_TO
54400: IFFALSE 54487
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54402: LD_ADDR_VAR 0 6
54406: PUSH
54407: LD_VAR 0 1
54411: PPUSH
54412: LD_VAR 0 2
54416: PUSH
54417: LD_VAR 0 4
54421: ARRAY
54422: PUSH
54423: LD_INT 1
54425: ARRAY
54426: PPUSH
54427: LD_VAR 0 2
54431: PUSH
54432: LD_VAR 0 4
54436: ARRAY
54437: PUSH
54438: LD_INT 2
54440: ARRAY
54441: PPUSH
54442: CALL_OW 297
54446: ST_TO_ADDR
// if tdist < dist then
54447: LD_VAR 0 6
54451: PUSH
54452: LD_VAR 0 5
54456: LESS
54457: IFFALSE 54485
// begin hex := hexes [ i ] ;
54459: LD_ADDR_VAR 0 8
54463: PUSH
54464: LD_VAR 0 2
54468: PUSH
54469: LD_VAR 0 4
54473: ARRAY
54474: ST_TO_ADDR
// dist := tdist ;
54475: LD_ADDR_VAR 0 5
54479: PUSH
54480: LD_VAR 0 6
54484: ST_TO_ADDR
// end ; end ;
54485: GO 54399
54487: POP
54488: POP
// result := hex ;
54489: LD_ADDR_VAR 0 3
54493: PUSH
54494: LD_VAR 0 8
54498: ST_TO_ADDR
// end ;
54499: LD_VAR 0 3
54503: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54504: LD_INT 0
54506: PPUSH
54507: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54508: LD_VAR 0 1
54512: NOT
54513: PUSH
54514: LD_VAR 0 1
54518: PUSH
54519: LD_INT 21
54521: PUSH
54522: LD_INT 2
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 23
54531: PUSH
54532: LD_INT 2
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PPUSH
54543: CALL_OW 69
54547: IN
54548: NOT
54549: OR
54550: IFFALSE 54554
// exit ;
54552: GO 54601
// for i = 1 to 3 do
54554: LD_ADDR_VAR 0 3
54558: PUSH
54559: DOUBLE
54560: LD_INT 1
54562: DEC
54563: ST_TO_ADDR
54564: LD_INT 3
54566: PUSH
54567: FOR_TO
54568: IFFALSE 54599
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54570: LD_VAR 0 1
54574: PPUSH
54575: CALL_OW 250
54579: PPUSH
54580: LD_VAR 0 1
54584: PPUSH
54585: CALL_OW 251
54589: PPUSH
54590: LD_INT 1
54592: PPUSH
54593: CALL_OW 453
54597: GO 54567
54599: POP
54600: POP
// end ;
54601: LD_VAR 0 2
54605: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54606: LD_INT 0
54608: PPUSH
54609: PPUSH
54610: PPUSH
54611: PPUSH
54612: PPUSH
54613: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54614: LD_VAR 0 1
54618: NOT
54619: PUSH
54620: LD_VAR 0 2
54624: NOT
54625: OR
54626: PUSH
54627: LD_VAR 0 1
54631: PPUSH
54632: CALL_OW 314
54636: OR
54637: IFFALSE 54641
// exit ;
54639: GO 55082
// x := GetX ( enemy_unit ) ;
54641: LD_ADDR_VAR 0 7
54645: PUSH
54646: LD_VAR 0 2
54650: PPUSH
54651: CALL_OW 250
54655: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54656: LD_ADDR_VAR 0 8
54660: PUSH
54661: LD_VAR 0 2
54665: PPUSH
54666: CALL_OW 251
54670: ST_TO_ADDR
// if not x or not y then
54671: LD_VAR 0 7
54675: NOT
54676: PUSH
54677: LD_VAR 0 8
54681: NOT
54682: OR
54683: IFFALSE 54687
// exit ;
54685: GO 55082
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54687: LD_ADDR_VAR 0 6
54691: PUSH
54692: LD_VAR 0 7
54696: PPUSH
54697: LD_INT 0
54699: PPUSH
54700: LD_INT 4
54702: PPUSH
54703: CALL_OW 272
54707: PUSH
54708: LD_VAR 0 8
54712: PPUSH
54713: LD_INT 0
54715: PPUSH
54716: LD_INT 4
54718: PPUSH
54719: CALL_OW 273
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_VAR 0 7
54732: PPUSH
54733: LD_INT 1
54735: PPUSH
54736: LD_INT 4
54738: PPUSH
54739: CALL_OW 272
54743: PUSH
54744: LD_VAR 0 8
54748: PPUSH
54749: LD_INT 1
54751: PPUSH
54752: LD_INT 4
54754: PPUSH
54755: CALL_OW 273
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_VAR 0 7
54768: PPUSH
54769: LD_INT 2
54771: PPUSH
54772: LD_INT 4
54774: PPUSH
54775: CALL_OW 272
54779: PUSH
54780: LD_VAR 0 8
54784: PPUSH
54785: LD_INT 2
54787: PPUSH
54788: LD_INT 4
54790: PPUSH
54791: CALL_OW 273
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_VAR 0 7
54804: PPUSH
54805: LD_INT 3
54807: PPUSH
54808: LD_INT 4
54810: PPUSH
54811: CALL_OW 272
54815: PUSH
54816: LD_VAR 0 8
54820: PPUSH
54821: LD_INT 3
54823: PPUSH
54824: LD_INT 4
54826: PPUSH
54827: CALL_OW 273
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_VAR 0 7
54840: PPUSH
54841: LD_INT 4
54843: PPUSH
54844: LD_INT 4
54846: PPUSH
54847: CALL_OW 272
54851: PUSH
54852: LD_VAR 0 8
54856: PPUSH
54857: LD_INT 4
54859: PPUSH
54860: LD_INT 4
54862: PPUSH
54863: CALL_OW 273
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_VAR 0 7
54876: PPUSH
54877: LD_INT 5
54879: PPUSH
54880: LD_INT 4
54882: PPUSH
54883: CALL_OW 272
54887: PUSH
54888: LD_VAR 0 8
54892: PPUSH
54893: LD_INT 5
54895: PPUSH
54896: LD_INT 4
54898: PPUSH
54899: CALL_OW 273
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: ST_TO_ADDR
// for i = tmp downto 1 do
54916: LD_ADDR_VAR 0 4
54920: PUSH
54921: DOUBLE
54922: LD_VAR 0 6
54926: INC
54927: ST_TO_ADDR
54928: LD_INT 1
54930: PUSH
54931: FOR_DOWNTO
54932: IFFALSE 55033
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54934: LD_VAR 0 6
54938: PUSH
54939: LD_VAR 0 4
54943: ARRAY
54944: PUSH
54945: LD_INT 1
54947: ARRAY
54948: PPUSH
54949: LD_VAR 0 6
54953: PUSH
54954: LD_VAR 0 4
54958: ARRAY
54959: PUSH
54960: LD_INT 2
54962: ARRAY
54963: PPUSH
54964: CALL_OW 488
54968: NOT
54969: PUSH
54970: LD_VAR 0 6
54974: PUSH
54975: LD_VAR 0 4
54979: ARRAY
54980: PUSH
54981: LD_INT 1
54983: ARRAY
54984: PPUSH
54985: LD_VAR 0 6
54989: PUSH
54990: LD_VAR 0 4
54994: ARRAY
54995: PUSH
54996: LD_INT 2
54998: ARRAY
54999: PPUSH
55000: CALL_OW 428
55004: PUSH
55005: LD_INT 0
55007: NONEQUAL
55008: OR
55009: IFFALSE 55031
// tmp := Delete ( tmp , i ) ;
55011: LD_ADDR_VAR 0 6
55015: PUSH
55016: LD_VAR 0 6
55020: PPUSH
55021: LD_VAR 0 4
55025: PPUSH
55026: CALL_OW 3
55030: ST_TO_ADDR
55031: GO 54931
55033: POP
55034: POP
// j := GetClosestHex ( unit , tmp ) ;
55035: LD_ADDR_VAR 0 5
55039: PUSH
55040: LD_VAR 0 1
55044: PPUSH
55045: LD_VAR 0 6
55049: PPUSH
55050: CALL 54352 0 2
55054: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55055: LD_VAR 0 1
55059: PPUSH
55060: LD_VAR 0 5
55064: PUSH
55065: LD_INT 1
55067: ARRAY
55068: PPUSH
55069: LD_VAR 0 5
55073: PUSH
55074: LD_INT 2
55076: ARRAY
55077: PPUSH
55078: CALL_OW 111
// end ;
55082: LD_VAR 0 3
55086: RET
// export function PrepareApemanSoldier ( ) ; begin
55087: LD_INT 0
55089: PPUSH
// uc_nation := 0 ;
55090: LD_ADDR_OWVAR 21
55094: PUSH
55095: LD_INT 0
55097: ST_TO_ADDR
// hc_sex := sex_male ;
55098: LD_ADDR_OWVAR 27
55102: PUSH
55103: LD_INT 1
55105: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
55106: LD_ADDR_OWVAR 28
55110: PUSH
55111: LD_INT 15
55113: ST_TO_ADDR
// hc_gallery :=  ;
55114: LD_ADDR_OWVAR 33
55118: PUSH
55119: LD_STRING 
55121: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55122: LD_ADDR_OWVAR 31
55126: PUSH
55127: LD_INT 0
55129: PPUSH
55130: LD_INT 3
55132: PPUSH
55133: CALL_OW 12
55137: PUSH
55138: LD_INT 0
55140: PPUSH
55141: LD_INT 3
55143: PPUSH
55144: CALL_OW 12
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: LD_INT 0
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: ST_TO_ADDR
// end ;
55161: LD_VAR 0 1
55165: RET
// export function PrepareApemanEngineer ( ) ; begin
55166: LD_INT 0
55168: PPUSH
// uc_nation := 0 ;
55169: LD_ADDR_OWVAR 21
55173: PUSH
55174: LD_INT 0
55176: ST_TO_ADDR
// hc_sex := sex_male ;
55177: LD_ADDR_OWVAR 27
55181: PUSH
55182: LD_INT 1
55184: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
55185: LD_ADDR_OWVAR 28
55189: PUSH
55190: LD_INT 16
55192: ST_TO_ADDR
// hc_gallery :=  ;
55193: LD_ADDR_OWVAR 33
55197: PUSH
55198: LD_STRING 
55200: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55201: LD_ADDR_OWVAR 31
55205: PUSH
55206: LD_INT 0
55208: PPUSH
55209: LD_INT 3
55211: PPUSH
55212: CALL_OW 12
55216: PUSH
55217: LD_INT 0
55219: PPUSH
55220: LD_INT 3
55222: PPUSH
55223: CALL_OW 12
55227: PUSH
55228: LD_INT 0
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: ST_TO_ADDR
// end ;
55240: LD_VAR 0 1
55244: RET
// export function PrepareApeman ( agressivity ) ; begin
55245: LD_INT 0
55247: PPUSH
// uc_side := 0 ;
55248: LD_ADDR_OWVAR 20
55252: PUSH
55253: LD_INT 0
55255: ST_TO_ADDR
// uc_nation := 0 ;
55256: LD_ADDR_OWVAR 21
55260: PUSH
55261: LD_INT 0
55263: ST_TO_ADDR
// hc_sex := sex_male ;
55264: LD_ADDR_OWVAR 27
55268: PUSH
55269: LD_INT 1
55271: ST_TO_ADDR
// hc_class := class_apeman ;
55272: LD_ADDR_OWVAR 28
55276: PUSH
55277: LD_INT 12
55279: ST_TO_ADDR
// hc_gallery :=  ;
55280: LD_ADDR_OWVAR 33
55284: PUSH
55285: LD_STRING 
55287: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55288: LD_ADDR_OWVAR 35
55292: PUSH
55293: LD_VAR 0 1
55297: NEG
55298: PPUSH
55299: LD_VAR 0 1
55303: PPUSH
55304: CALL_OW 12
55308: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55309: LD_ADDR_OWVAR 31
55313: PUSH
55314: LD_INT 0
55316: PPUSH
55317: LD_INT 3
55319: PPUSH
55320: CALL_OW 12
55324: PUSH
55325: LD_INT 0
55327: PPUSH
55328: LD_INT 3
55330: PPUSH
55331: CALL_OW 12
55335: PUSH
55336: LD_INT 0
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: ST_TO_ADDR
// end ;
55348: LD_VAR 0 2
55352: RET
// export function PrepareTiger ( agressivity ) ; begin
55353: LD_INT 0
55355: PPUSH
// uc_side := 0 ;
55356: LD_ADDR_OWVAR 20
55360: PUSH
55361: LD_INT 0
55363: ST_TO_ADDR
// uc_nation := 0 ;
55364: LD_ADDR_OWVAR 21
55368: PUSH
55369: LD_INT 0
55371: ST_TO_ADDR
// hc_class := class_tiger ;
55372: LD_ADDR_OWVAR 28
55376: PUSH
55377: LD_INT 14
55379: ST_TO_ADDR
// hc_gallery :=  ;
55380: LD_ADDR_OWVAR 33
55384: PUSH
55385: LD_STRING 
55387: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55388: LD_ADDR_OWVAR 35
55392: PUSH
55393: LD_VAR 0 1
55397: NEG
55398: PPUSH
55399: LD_VAR 0 1
55403: PPUSH
55404: CALL_OW 12
55408: ST_TO_ADDR
// end ;
55409: LD_VAR 0 2
55413: RET
// export function PrepareEnchidna ( ) ; begin
55414: LD_INT 0
55416: PPUSH
// uc_side := 0 ;
55417: LD_ADDR_OWVAR 20
55421: PUSH
55422: LD_INT 0
55424: ST_TO_ADDR
// uc_nation := 0 ;
55425: LD_ADDR_OWVAR 21
55429: PUSH
55430: LD_INT 0
55432: ST_TO_ADDR
// hc_class := class_baggie ;
55433: LD_ADDR_OWVAR 28
55437: PUSH
55438: LD_INT 13
55440: ST_TO_ADDR
// hc_gallery :=  ;
55441: LD_ADDR_OWVAR 33
55445: PUSH
55446: LD_STRING 
55448: ST_TO_ADDR
// end ;
55449: LD_VAR 0 1
55453: RET
// export function PrepareFrog ( ) ; begin
55454: LD_INT 0
55456: PPUSH
// uc_side := 0 ;
55457: LD_ADDR_OWVAR 20
55461: PUSH
55462: LD_INT 0
55464: ST_TO_ADDR
// uc_nation := 0 ;
55465: LD_ADDR_OWVAR 21
55469: PUSH
55470: LD_INT 0
55472: ST_TO_ADDR
// hc_class := class_frog ;
55473: LD_ADDR_OWVAR 28
55477: PUSH
55478: LD_INT 19
55480: ST_TO_ADDR
// hc_gallery :=  ;
55481: LD_ADDR_OWVAR 33
55485: PUSH
55486: LD_STRING 
55488: ST_TO_ADDR
// end ;
55489: LD_VAR 0 1
55493: RET
// export function PrepareFish ( ) ; begin
55494: LD_INT 0
55496: PPUSH
// uc_side := 0 ;
55497: LD_ADDR_OWVAR 20
55501: PUSH
55502: LD_INT 0
55504: ST_TO_ADDR
// uc_nation := 0 ;
55505: LD_ADDR_OWVAR 21
55509: PUSH
55510: LD_INT 0
55512: ST_TO_ADDR
// hc_class := class_fish ;
55513: LD_ADDR_OWVAR 28
55517: PUSH
55518: LD_INT 20
55520: ST_TO_ADDR
// hc_gallery :=  ;
55521: LD_ADDR_OWVAR 33
55525: PUSH
55526: LD_STRING 
55528: ST_TO_ADDR
// end ;
55529: LD_VAR 0 1
55533: RET
// export function PrepareBird ( ) ; begin
55534: LD_INT 0
55536: PPUSH
// uc_side := 0 ;
55537: LD_ADDR_OWVAR 20
55541: PUSH
55542: LD_INT 0
55544: ST_TO_ADDR
// uc_nation := 0 ;
55545: LD_ADDR_OWVAR 21
55549: PUSH
55550: LD_INT 0
55552: ST_TO_ADDR
// hc_class := class_phororhacos ;
55553: LD_ADDR_OWVAR 28
55557: PUSH
55558: LD_INT 18
55560: ST_TO_ADDR
// hc_gallery :=  ;
55561: LD_ADDR_OWVAR 33
55565: PUSH
55566: LD_STRING 
55568: ST_TO_ADDR
// end ;
55569: LD_VAR 0 1
55573: RET
// export function PrepareHorse ( ) ; begin
55574: LD_INT 0
55576: PPUSH
// uc_side := 0 ;
55577: LD_ADDR_OWVAR 20
55581: PUSH
55582: LD_INT 0
55584: ST_TO_ADDR
// uc_nation := 0 ;
55585: LD_ADDR_OWVAR 21
55589: PUSH
55590: LD_INT 0
55592: ST_TO_ADDR
// hc_class := class_horse ;
55593: LD_ADDR_OWVAR 28
55597: PUSH
55598: LD_INT 21
55600: ST_TO_ADDR
// hc_gallery :=  ;
55601: LD_ADDR_OWVAR 33
55605: PUSH
55606: LD_STRING 
55608: ST_TO_ADDR
// end ;
55609: LD_VAR 0 1
55613: RET
// export function PrepareMastodont ( ) ; begin
55614: LD_INT 0
55616: PPUSH
// uc_side := 0 ;
55617: LD_ADDR_OWVAR 20
55621: PUSH
55622: LD_INT 0
55624: ST_TO_ADDR
// uc_nation := 0 ;
55625: LD_ADDR_OWVAR 21
55629: PUSH
55630: LD_INT 0
55632: ST_TO_ADDR
// vc_chassis := class_mastodont ;
55633: LD_ADDR_OWVAR 37
55637: PUSH
55638: LD_INT 31
55640: ST_TO_ADDR
// vc_control := control_rider ;
55641: LD_ADDR_OWVAR 38
55645: PUSH
55646: LD_INT 4
55648: ST_TO_ADDR
// end ;
55649: LD_VAR 0 1
55653: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55654: LD_INT 0
55656: PPUSH
55657: PPUSH
55658: PPUSH
// uc_side = 0 ;
55659: LD_ADDR_OWVAR 20
55663: PUSH
55664: LD_INT 0
55666: ST_TO_ADDR
// uc_nation = 0 ;
55667: LD_ADDR_OWVAR 21
55671: PUSH
55672: LD_INT 0
55674: ST_TO_ADDR
// InitHc_All ( ) ;
55675: CALL_OW 584
// InitVc ;
55679: CALL_OW 20
// if mastodonts then
55683: LD_VAR 0 6
55687: IFFALSE 55754
// for i = 1 to mastodonts do
55689: LD_ADDR_VAR 0 11
55693: PUSH
55694: DOUBLE
55695: LD_INT 1
55697: DEC
55698: ST_TO_ADDR
55699: LD_VAR 0 6
55703: PUSH
55704: FOR_TO
55705: IFFALSE 55752
// begin vc_chassis := 31 ;
55707: LD_ADDR_OWVAR 37
55711: PUSH
55712: LD_INT 31
55714: ST_TO_ADDR
// vc_control := control_rider ;
55715: LD_ADDR_OWVAR 38
55719: PUSH
55720: LD_INT 4
55722: ST_TO_ADDR
// animal := CreateVehicle ;
55723: LD_ADDR_VAR 0 12
55727: PUSH
55728: CALL_OW 45
55732: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55733: LD_VAR 0 12
55737: PPUSH
55738: LD_VAR 0 8
55742: PPUSH
55743: LD_INT 0
55745: PPUSH
55746: CALL 57889 0 3
// end ;
55750: GO 55704
55752: POP
55753: POP
// if horses then
55754: LD_VAR 0 5
55758: IFFALSE 55825
// for i = 1 to horses do
55760: LD_ADDR_VAR 0 11
55764: PUSH
55765: DOUBLE
55766: LD_INT 1
55768: DEC
55769: ST_TO_ADDR
55770: LD_VAR 0 5
55774: PUSH
55775: FOR_TO
55776: IFFALSE 55823
// begin hc_class := 21 ;
55778: LD_ADDR_OWVAR 28
55782: PUSH
55783: LD_INT 21
55785: ST_TO_ADDR
// hc_gallery :=  ;
55786: LD_ADDR_OWVAR 33
55790: PUSH
55791: LD_STRING 
55793: ST_TO_ADDR
// animal := CreateHuman ;
55794: LD_ADDR_VAR 0 12
55798: PUSH
55799: CALL_OW 44
55803: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55804: LD_VAR 0 12
55808: PPUSH
55809: LD_VAR 0 8
55813: PPUSH
55814: LD_INT 0
55816: PPUSH
55817: CALL 57889 0 3
// end ;
55821: GO 55775
55823: POP
55824: POP
// if birds then
55825: LD_VAR 0 1
55829: IFFALSE 55896
// for i = 1 to birds do
55831: LD_ADDR_VAR 0 11
55835: PUSH
55836: DOUBLE
55837: LD_INT 1
55839: DEC
55840: ST_TO_ADDR
55841: LD_VAR 0 1
55845: PUSH
55846: FOR_TO
55847: IFFALSE 55894
// begin hc_class = 18 ;
55849: LD_ADDR_OWVAR 28
55853: PUSH
55854: LD_INT 18
55856: ST_TO_ADDR
// hc_gallery =  ;
55857: LD_ADDR_OWVAR 33
55861: PUSH
55862: LD_STRING 
55864: ST_TO_ADDR
// animal := CreateHuman ;
55865: LD_ADDR_VAR 0 12
55869: PUSH
55870: CALL_OW 44
55874: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55875: LD_VAR 0 12
55879: PPUSH
55880: LD_VAR 0 8
55884: PPUSH
55885: LD_INT 0
55887: PPUSH
55888: CALL 57889 0 3
// end ;
55892: GO 55846
55894: POP
55895: POP
// if tigers then
55896: LD_VAR 0 2
55900: IFFALSE 55984
// for i = 1 to tigers do
55902: LD_ADDR_VAR 0 11
55906: PUSH
55907: DOUBLE
55908: LD_INT 1
55910: DEC
55911: ST_TO_ADDR
55912: LD_VAR 0 2
55916: PUSH
55917: FOR_TO
55918: IFFALSE 55982
// begin hc_class = class_tiger ;
55920: LD_ADDR_OWVAR 28
55924: PUSH
55925: LD_INT 14
55927: ST_TO_ADDR
// hc_gallery =  ;
55928: LD_ADDR_OWVAR 33
55932: PUSH
55933: LD_STRING 
55935: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55936: LD_ADDR_OWVAR 35
55940: PUSH
55941: LD_INT 7
55943: NEG
55944: PPUSH
55945: LD_INT 7
55947: PPUSH
55948: CALL_OW 12
55952: ST_TO_ADDR
// animal := CreateHuman ;
55953: LD_ADDR_VAR 0 12
55957: PUSH
55958: CALL_OW 44
55962: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55963: LD_VAR 0 12
55967: PPUSH
55968: LD_VAR 0 8
55972: PPUSH
55973: LD_INT 0
55975: PPUSH
55976: CALL 57889 0 3
// end ;
55980: GO 55917
55982: POP
55983: POP
// if apemans then
55984: LD_VAR 0 3
55988: IFFALSE 56111
// for i = 1 to apemans do
55990: LD_ADDR_VAR 0 11
55994: PUSH
55995: DOUBLE
55996: LD_INT 1
55998: DEC
55999: ST_TO_ADDR
56000: LD_VAR 0 3
56004: PUSH
56005: FOR_TO
56006: IFFALSE 56109
// begin hc_class = class_apeman ;
56008: LD_ADDR_OWVAR 28
56012: PUSH
56013: LD_INT 12
56015: ST_TO_ADDR
// hc_gallery =  ;
56016: LD_ADDR_OWVAR 33
56020: PUSH
56021: LD_STRING 
56023: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56024: LD_ADDR_OWVAR 35
56028: PUSH
56029: LD_INT 2
56031: NEG
56032: PPUSH
56033: LD_INT 2
56035: PPUSH
56036: CALL_OW 12
56040: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56041: LD_ADDR_OWVAR 31
56045: PUSH
56046: LD_INT 1
56048: PPUSH
56049: LD_INT 3
56051: PPUSH
56052: CALL_OW 12
56056: PUSH
56057: LD_INT 1
56059: PPUSH
56060: LD_INT 3
56062: PPUSH
56063: CALL_OW 12
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: LD_INT 0
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: ST_TO_ADDR
// animal := CreateHuman ;
56080: LD_ADDR_VAR 0 12
56084: PUSH
56085: CALL_OW 44
56089: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56090: LD_VAR 0 12
56094: PPUSH
56095: LD_VAR 0 8
56099: PPUSH
56100: LD_INT 0
56102: PPUSH
56103: CALL 57889 0 3
// end ;
56107: GO 56005
56109: POP
56110: POP
// if enchidnas then
56111: LD_VAR 0 4
56115: IFFALSE 56182
// for i = 1 to enchidnas do
56117: LD_ADDR_VAR 0 11
56121: PUSH
56122: DOUBLE
56123: LD_INT 1
56125: DEC
56126: ST_TO_ADDR
56127: LD_VAR 0 4
56131: PUSH
56132: FOR_TO
56133: IFFALSE 56180
// begin hc_class = 13 ;
56135: LD_ADDR_OWVAR 28
56139: PUSH
56140: LD_INT 13
56142: ST_TO_ADDR
// hc_gallery =  ;
56143: LD_ADDR_OWVAR 33
56147: PUSH
56148: LD_STRING 
56150: ST_TO_ADDR
// animal := CreateHuman ;
56151: LD_ADDR_VAR 0 12
56155: PUSH
56156: CALL_OW 44
56160: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56161: LD_VAR 0 12
56165: PPUSH
56166: LD_VAR 0 8
56170: PPUSH
56171: LD_INT 0
56173: PPUSH
56174: CALL 57889 0 3
// end ;
56178: GO 56132
56180: POP
56181: POP
// if fishes then
56182: LD_VAR 0 7
56186: IFFALSE 56253
// for i = 1 to fishes do
56188: LD_ADDR_VAR 0 11
56192: PUSH
56193: DOUBLE
56194: LD_INT 1
56196: DEC
56197: ST_TO_ADDR
56198: LD_VAR 0 7
56202: PUSH
56203: FOR_TO
56204: IFFALSE 56251
// begin hc_class = 20 ;
56206: LD_ADDR_OWVAR 28
56210: PUSH
56211: LD_INT 20
56213: ST_TO_ADDR
// hc_gallery =  ;
56214: LD_ADDR_OWVAR 33
56218: PUSH
56219: LD_STRING 
56221: ST_TO_ADDR
// animal := CreateHuman ;
56222: LD_ADDR_VAR 0 12
56226: PUSH
56227: CALL_OW 44
56231: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56232: LD_VAR 0 12
56236: PPUSH
56237: LD_VAR 0 9
56241: PPUSH
56242: LD_INT 0
56244: PPUSH
56245: CALL 57889 0 3
// end ;
56249: GO 56203
56251: POP
56252: POP
// end ;
56253: LD_VAR 0 10
56257: RET
// export function WantHeal ( sci , unit ) ; begin
56258: LD_INT 0
56260: PPUSH
// if GetTaskList ( sci ) > 0 then
56261: LD_VAR 0 1
56265: PPUSH
56266: CALL_OW 437
56270: PUSH
56271: LD_INT 0
56273: GREATER
56274: IFFALSE 56344
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56276: LD_VAR 0 1
56280: PPUSH
56281: CALL_OW 437
56285: PUSH
56286: LD_INT 1
56288: ARRAY
56289: PUSH
56290: LD_INT 1
56292: ARRAY
56293: PUSH
56294: LD_STRING l
56296: EQUAL
56297: PUSH
56298: LD_VAR 0 1
56302: PPUSH
56303: CALL_OW 437
56307: PUSH
56308: LD_INT 1
56310: ARRAY
56311: PUSH
56312: LD_INT 4
56314: ARRAY
56315: PUSH
56316: LD_VAR 0 2
56320: EQUAL
56321: AND
56322: IFFALSE 56334
// result := true else
56324: LD_ADDR_VAR 0 3
56328: PUSH
56329: LD_INT 1
56331: ST_TO_ADDR
56332: GO 56342
// result := false ;
56334: LD_ADDR_VAR 0 3
56338: PUSH
56339: LD_INT 0
56341: ST_TO_ADDR
// end else
56342: GO 56352
// result := false ;
56344: LD_ADDR_VAR 0 3
56348: PUSH
56349: LD_INT 0
56351: ST_TO_ADDR
// end ;
56352: LD_VAR 0 3
56356: RET
// export function HealTarget ( sci ) ; begin
56357: LD_INT 0
56359: PPUSH
// if not sci then
56360: LD_VAR 0 1
56364: NOT
56365: IFFALSE 56369
// exit ;
56367: GO 56434
// result := 0 ;
56369: LD_ADDR_VAR 0 2
56373: PUSH
56374: LD_INT 0
56376: ST_TO_ADDR
// if GetTaskList ( sci ) then
56377: LD_VAR 0 1
56381: PPUSH
56382: CALL_OW 437
56386: IFFALSE 56434
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56388: LD_VAR 0 1
56392: PPUSH
56393: CALL_OW 437
56397: PUSH
56398: LD_INT 1
56400: ARRAY
56401: PUSH
56402: LD_INT 1
56404: ARRAY
56405: PUSH
56406: LD_STRING l
56408: EQUAL
56409: IFFALSE 56434
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56411: LD_ADDR_VAR 0 2
56415: PUSH
56416: LD_VAR 0 1
56420: PPUSH
56421: CALL_OW 437
56425: PUSH
56426: LD_INT 1
56428: ARRAY
56429: PUSH
56430: LD_INT 4
56432: ARRAY
56433: ST_TO_ADDR
// end ;
56434: LD_VAR 0 2
56438: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56439: LD_INT 0
56441: PPUSH
56442: PPUSH
56443: PPUSH
56444: PPUSH
// if not base_units then
56445: LD_VAR 0 1
56449: NOT
56450: IFFALSE 56454
// exit ;
56452: GO 56541
// result := false ;
56454: LD_ADDR_VAR 0 2
56458: PUSH
56459: LD_INT 0
56461: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56462: LD_ADDR_VAR 0 5
56466: PUSH
56467: LD_VAR 0 1
56471: PPUSH
56472: LD_INT 21
56474: PUSH
56475: LD_INT 3
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PPUSH
56482: CALL_OW 72
56486: ST_TO_ADDR
// if not tmp then
56487: LD_VAR 0 5
56491: NOT
56492: IFFALSE 56496
// exit ;
56494: GO 56541
// for i in tmp do
56496: LD_ADDR_VAR 0 3
56500: PUSH
56501: LD_VAR 0 5
56505: PUSH
56506: FOR_IN
56507: IFFALSE 56539
// begin result := EnemyInRange ( i , 22 ) ;
56509: LD_ADDR_VAR 0 2
56513: PUSH
56514: LD_VAR 0 3
56518: PPUSH
56519: LD_INT 22
56521: PPUSH
56522: CALL 54227 0 2
56526: ST_TO_ADDR
// if result then
56527: LD_VAR 0 2
56531: IFFALSE 56537
// exit ;
56533: POP
56534: POP
56535: GO 56541
// end ;
56537: GO 56506
56539: POP
56540: POP
// end ;
56541: LD_VAR 0 2
56545: RET
// export function FilterByTag ( units , tag ) ; begin
56546: LD_INT 0
56548: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
56549: LD_ADDR_VAR 0 3
56553: PUSH
56554: LD_VAR 0 1
56558: PPUSH
56559: LD_INT 120
56561: PUSH
56562: LD_VAR 0 2
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PPUSH
56571: CALL_OW 72
56575: ST_TO_ADDR
// end ;
56576: LD_VAR 0 3
56580: RET
// export function IsDriver ( un ) ; begin
56581: LD_INT 0
56583: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56584: LD_ADDR_VAR 0 2
56588: PUSH
56589: LD_VAR 0 1
56593: PUSH
56594: LD_INT 55
56596: PUSH
56597: EMPTY
56598: LIST
56599: PPUSH
56600: CALL_OW 69
56604: IN
56605: ST_TO_ADDR
// end ;
56606: LD_VAR 0 2
56610: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56611: LD_INT 0
56613: PPUSH
56614: PPUSH
// list := [ ] ;
56615: LD_ADDR_VAR 0 5
56619: PUSH
56620: EMPTY
56621: ST_TO_ADDR
// case d of 0 :
56622: LD_VAR 0 3
56626: PUSH
56627: LD_INT 0
56629: DOUBLE
56630: EQUAL
56631: IFTRUE 56635
56633: GO 56768
56635: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56636: LD_ADDR_VAR 0 5
56640: PUSH
56641: LD_VAR 0 1
56645: PUSH
56646: LD_INT 4
56648: MINUS
56649: PUSH
56650: LD_VAR 0 2
56654: PUSH
56655: LD_INT 4
56657: MINUS
56658: PUSH
56659: LD_INT 2
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: LIST
56666: PUSH
56667: LD_VAR 0 1
56671: PUSH
56672: LD_INT 3
56674: MINUS
56675: PUSH
56676: LD_VAR 0 2
56680: PUSH
56681: LD_INT 1
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: LIST
56688: PUSH
56689: LD_VAR 0 1
56693: PUSH
56694: LD_INT 4
56696: PLUS
56697: PUSH
56698: LD_VAR 0 2
56702: PUSH
56703: LD_INT 4
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: LIST
56710: PUSH
56711: LD_VAR 0 1
56715: PUSH
56716: LD_INT 3
56718: PLUS
56719: PUSH
56720: LD_VAR 0 2
56724: PUSH
56725: LD_INT 3
56727: PLUS
56728: PUSH
56729: LD_INT 5
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: LIST
56736: PUSH
56737: LD_VAR 0 1
56741: PUSH
56742: LD_VAR 0 2
56746: PUSH
56747: LD_INT 4
56749: PLUS
56750: PUSH
56751: LD_INT 0
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: LIST
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: ST_TO_ADDR
// end ; 1 :
56766: GO 57466
56768: LD_INT 1
56770: DOUBLE
56771: EQUAL
56772: IFTRUE 56776
56774: GO 56909
56776: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56777: LD_ADDR_VAR 0 5
56781: PUSH
56782: LD_VAR 0 1
56786: PUSH
56787: LD_VAR 0 2
56791: PUSH
56792: LD_INT 4
56794: MINUS
56795: PUSH
56796: LD_INT 3
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: LIST
56803: PUSH
56804: LD_VAR 0 1
56808: PUSH
56809: LD_INT 3
56811: MINUS
56812: PUSH
56813: LD_VAR 0 2
56817: PUSH
56818: LD_INT 3
56820: MINUS
56821: PUSH
56822: LD_INT 2
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: LIST
56829: PUSH
56830: LD_VAR 0 1
56834: PUSH
56835: LD_INT 4
56837: MINUS
56838: PUSH
56839: LD_VAR 0 2
56843: PUSH
56844: LD_INT 1
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: LIST
56851: PUSH
56852: LD_VAR 0 1
56856: PUSH
56857: LD_VAR 0 2
56861: PUSH
56862: LD_INT 3
56864: PLUS
56865: PUSH
56866: LD_INT 0
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: LIST
56873: PUSH
56874: LD_VAR 0 1
56878: PUSH
56879: LD_INT 4
56881: PLUS
56882: PUSH
56883: LD_VAR 0 2
56887: PUSH
56888: LD_INT 4
56890: PLUS
56891: PUSH
56892: LD_INT 5
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: LIST
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: ST_TO_ADDR
// end ; 2 :
56907: GO 57466
56909: LD_INT 2
56911: DOUBLE
56912: EQUAL
56913: IFTRUE 56917
56915: GO 57046
56917: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56918: LD_ADDR_VAR 0 5
56922: PUSH
56923: LD_VAR 0 1
56927: PUSH
56928: LD_VAR 0 2
56932: PUSH
56933: LD_INT 3
56935: MINUS
56936: PUSH
56937: LD_INT 3
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: LIST
56944: PUSH
56945: LD_VAR 0 1
56949: PUSH
56950: LD_INT 4
56952: PLUS
56953: PUSH
56954: LD_VAR 0 2
56958: PUSH
56959: LD_INT 4
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: LIST
56966: PUSH
56967: LD_VAR 0 1
56971: PUSH
56972: LD_VAR 0 2
56976: PUSH
56977: LD_INT 4
56979: PLUS
56980: PUSH
56981: LD_INT 0
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: LIST
56988: PUSH
56989: LD_VAR 0 1
56993: PUSH
56994: LD_INT 3
56996: MINUS
56997: PUSH
56998: LD_VAR 0 2
57002: PUSH
57003: LD_INT 1
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: LIST
57010: PUSH
57011: LD_VAR 0 1
57015: PUSH
57016: LD_INT 4
57018: MINUS
57019: PUSH
57020: LD_VAR 0 2
57024: PUSH
57025: LD_INT 4
57027: MINUS
57028: PUSH
57029: LD_INT 2
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: LIST
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: ST_TO_ADDR
// end ; 3 :
57044: GO 57466
57046: LD_INT 3
57048: DOUBLE
57049: EQUAL
57050: IFTRUE 57054
57052: GO 57187
57054: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57055: LD_ADDR_VAR 0 5
57059: PUSH
57060: LD_VAR 0 1
57064: PUSH
57065: LD_INT 3
57067: PLUS
57068: PUSH
57069: LD_VAR 0 2
57073: PUSH
57074: LD_INT 4
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: LIST
57081: PUSH
57082: LD_VAR 0 1
57086: PUSH
57087: LD_INT 4
57089: PLUS
57090: PUSH
57091: LD_VAR 0 2
57095: PUSH
57096: LD_INT 4
57098: PLUS
57099: PUSH
57100: LD_INT 5
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: LIST
57107: PUSH
57108: LD_VAR 0 1
57112: PUSH
57113: LD_INT 4
57115: MINUS
57116: PUSH
57117: LD_VAR 0 2
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: LIST
57129: PUSH
57130: LD_VAR 0 1
57134: PUSH
57135: LD_VAR 0 2
57139: PUSH
57140: LD_INT 4
57142: MINUS
57143: PUSH
57144: LD_INT 3
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: LIST
57151: PUSH
57152: LD_VAR 0 1
57156: PUSH
57157: LD_INT 3
57159: MINUS
57160: PUSH
57161: LD_VAR 0 2
57165: PUSH
57166: LD_INT 3
57168: MINUS
57169: PUSH
57170: LD_INT 2
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: LIST
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: ST_TO_ADDR
// end ; 4 :
57185: GO 57466
57187: LD_INT 4
57189: DOUBLE
57190: EQUAL
57191: IFTRUE 57195
57193: GO 57328
57195: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57196: LD_ADDR_VAR 0 5
57200: PUSH
57201: LD_VAR 0 1
57205: PUSH
57206: LD_VAR 0 2
57210: PUSH
57211: LD_INT 4
57213: PLUS
57214: PUSH
57215: LD_INT 0
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: LIST
57222: PUSH
57223: LD_VAR 0 1
57227: PUSH
57228: LD_INT 3
57230: PLUS
57231: PUSH
57232: LD_VAR 0 2
57236: PUSH
57237: LD_INT 3
57239: PLUS
57240: PUSH
57241: LD_INT 5
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: LIST
57248: PUSH
57249: LD_VAR 0 1
57253: PUSH
57254: LD_INT 4
57256: PLUS
57257: PUSH
57258: LD_VAR 0 2
57262: PUSH
57263: LD_INT 4
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: LIST
57270: PUSH
57271: LD_VAR 0 1
57275: PUSH
57276: LD_VAR 0 2
57280: PUSH
57281: LD_INT 3
57283: MINUS
57284: PUSH
57285: LD_INT 3
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: LIST
57292: PUSH
57293: LD_VAR 0 1
57297: PUSH
57298: LD_INT 4
57300: MINUS
57301: PUSH
57302: LD_VAR 0 2
57306: PUSH
57307: LD_INT 4
57309: MINUS
57310: PUSH
57311: LD_INT 2
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: LIST
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: ST_TO_ADDR
// end ; 5 :
57326: GO 57466
57328: LD_INT 5
57330: DOUBLE
57331: EQUAL
57332: IFTRUE 57336
57334: GO 57465
57336: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57337: LD_ADDR_VAR 0 5
57341: PUSH
57342: LD_VAR 0 1
57346: PUSH
57347: LD_INT 4
57349: MINUS
57350: PUSH
57351: LD_VAR 0 2
57355: PUSH
57356: LD_INT 1
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: LIST
57363: PUSH
57364: LD_VAR 0 1
57368: PUSH
57369: LD_VAR 0 2
57373: PUSH
57374: LD_INT 4
57376: MINUS
57377: PUSH
57378: LD_INT 3
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: LIST
57385: PUSH
57386: LD_VAR 0 1
57390: PUSH
57391: LD_INT 4
57393: PLUS
57394: PUSH
57395: LD_VAR 0 2
57399: PUSH
57400: LD_INT 4
57402: PLUS
57403: PUSH
57404: LD_INT 5
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: LIST
57411: PUSH
57412: LD_VAR 0 1
57416: PUSH
57417: LD_INT 3
57419: PLUS
57420: PUSH
57421: LD_VAR 0 2
57425: PUSH
57426: LD_INT 4
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: LIST
57433: PUSH
57434: LD_VAR 0 1
57438: PUSH
57439: LD_VAR 0 2
57443: PUSH
57444: LD_INT 3
57446: PLUS
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: LIST
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: ST_TO_ADDR
// end ; end ;
57463: GO 57466
57465: POP
// result := list ;
57466: LD_ADDR_VAR 0 4
57470: PUSH
57471: LD_VAR 0 5
57475: ST_TO_ADDR
// end ;
57476: LD_VAR 0 4
57480: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57481: LD_INT 0
57483: PPUSH
57484: PPUSH
57485: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57486: LD_VAR 0 1
57490: NOT
57491: PUSH
57492: LD_VAR 0 2
57496: PUSH
57497: LD_INT 1
57499: PUSH
57500: LD_INT 2
57502: PUSH
57503: LD_INT 3
57505: PUSH
57506: LD_INT 4
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: IN
57515: NOT
57516: OR
57517: IFFALSE 57521
// exit ;
57519: GO 57613
// tmp := [ ] ;
57521: LD_ADDR_VAR 0 5
57525: PUSH
57526: EMPTY
57527: ST_TO_ADDR
// for i in units do
57528: LD_ADDR_VAR 0 4
57532: PUSH
57533: LD_VAR 0 1
57537: PUSH
57538: FOR_IN
57539: IFFALSE 57582
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
57541: LD_ADDR_VAR 0 5
57545: PUSH
57546: LD_VAR 0 5
57550: PPUSH
57551: LD_VAR 0 5
57555: PUSH
57556: LD_INT 1
57558: PLUS
57559: PPUSH
57560: LD_VAR 0 4
57564: PPUSH
57565: LD_VAR 0 2
57569: PPUSH
57570: CALL_OW 259
57574: PPUSH
57575: CALL_OW 2
57579: ST_TO_ADDR
57580: GO 57538
57582: POP
57583: POP
// if not tmp then
57584: LD_VAR 0 5
57588: NOT
57589: IFFALSE 57593
// exit ;
57591: GO 57613
// result := SortListByListDesc ( units , tmp ) ;
57593: LD_ADDR_VAR 0 3
57597: PUSH
57598: LD_VAR 0 1
57602: PPUSH
57603: LD_VAR 0 5
57607: PPUSH
57608: CALL_OW 77
57612: ST_TO_ADDR
// end ;
57613: LD_VAR 0 3
57617: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57618: LD_INT 0
57620: PPUSH
57621: PPUSH
57622: PPUSH
// result := false ;
57623: LD_ADDR_VAR 0 3
57627: PUSH
57628: LD_INT 0
57630: ST_TO_ADDR
// x := GetX ( building ) ;
57631: LD_ADDR_VAR 0 4
57635: PUSH
57636: LD_VAR 0 2
57640: PPUSH
57641: CALL_OW 250
57645: ST_TO_ADDR
// y := GetY ( building ) ;
57646: LD_ADDR_VAR 0 5
57650: PUSH
57651: LD_VAR 0 2
57655: PPUSH
57656: CALL_OW 251
57660: ST_TO_ADDR
// if not building or not x or not y then
57661: LD_VAR 0 2
57665: NOT
57666: PUSH
57667: LD_VAR 0 4
57671: NOT
57672: OR
57673: PUSH
57674: LD_VAR 0 5
57678: NOT
57679: OR
57680: IFFALSE 57684
// exit ;
57682: GO 57776
// if GetTaskList ( unit ) then
57684: LD_VAR 0 1
57688: PPUSH
57689: CALL_OW 437
57693: IFFALSE 57776
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57695: LD_STRING e
57697: PUSH
57698: LD_VAR 0 1
57702: PPUSH
57703: CALL_OW 437
57707: PUSH
57708: LD_INT 1
57710: ARRAY
57711: PUSH
57712: LD_INT 1
57714: ARRAY
57715: EQUAL
57716: PUSH
57717: LD_VAR 0 4
57721: PUSH
57722: LD_VAR 0 1
57726: PPUSH
57727: CALL_OW 437
57731: PUSH
57732: LD_INT 1
57734: ARRAY
57735: PUSH
57736: LD_INT 2
57738: ARRAY
57739: EQUAL
57740: AND
57741: PUSH
57742: LD_VAR 0 5
57746: PUSH
57747: LD_VAR 0 1
57751: PPUSH
57752: CALL_OW 437
57756: PUSH
57757: LD_INT 1
57759: ARRAY
57760: PUSH
57761: LD_INT 3
57763: ARRAY
57764: EQUAL
57765: AND
57766: IFFALSE 57776
// result := true end ;
57768: LD_ADDR_VAR 0 3
57772: PUSH
57773: LD_INT 1
57775: ST_TO_ADDR
// end ;
57776: LD_VAR 0 3
57780: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57781: LD_INT 0
57783: PPUSH
// result := false ;
57784: LD_ADDR_VAR 0 4
57788: PUSH
57789: LD_INT 0
57791: ST_TO_ADDR
// if GetTaskList ( unit ) then
57792: LD_VAR 0 1
57796: PPUSH
57797: CALL_OW 437
57801: IFFALSE 57884
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57803: LD_STRING M
57805: PUSH
57806: LD_VAR 0 1
57810: PPUSH
57811: CALL_OW 437
57815: PUSH
57816: LD_INT 1
57818: ARRAY
57819: PUSH
57820: LD_INT 1
57822: ARRAY
57823: EQUAL
57824: PUSH
57825: LD_VAR 0 2
57829: PUSH
57830: LD_VAR 0 1
57834: PPUSH
57835: CALL_OW 437
57839: PUSH
57840: LD_INT 1
57842: ARRAY
57843: PUSH
57844: LD_INT 2
57846: ARRAY
57847: EQUAL
57848: AND
57849: PUSH
57850: LD_VAR 0 3
57854: PUSH
57855: LD_VAR 0 1
57859: PPUSH
57860: CALL_OW 437
57864: PUSH
57865: LD_INT 1
57867: ARRAY
57868: PUSH
57869: LD_INT 3
57871: ARRAY
57872: EQUAL
57873: AND
57874: IFFALSE 57884
// result := true ;
57876: LD_ADDR_VAR 0 4
57880: PUSH
57881: LD_INT 1
57883: ST_TO_ADDR
// end ; end ;
57884: LD_VAR 0 4
57888: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57889: LD_INT 0
57891: PPUSH
57892: PPUSH
57893: PPUSH
57894: PPUSH
// if not unit or not area then
57895: LD_VAR 0 1
57899: NOT
57900: PUSH
57901: LD_VAR 0 2
57905: NOT
57906: OR
57907: IFFALSE 57911
// exit ;
57909: GO 58075
// tmp := AreaToList ( area , i ) ;
57911: LD_ADDR_VAR 0 6
57915: PUSH
57916: LD_VAR 0 2
57920: PPUSH
57921: LD_VAR 0 5
57925: PPUSH
57926: CALL_OW 517
57930: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57931: LD_ADDR_VAR 0 5
57935: PUSH
57936: DOUBLE
57937: LD_INT 1
57939: DEC
57940: ST_TO_ADDR
57941: LD_VAR 0 6
57945: PUSH
57946: LD_INT 1
57948: ARRAY
57949: PUSH
57950: FOR_TO
57951: IFFALSE 58073
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57953: LD_ADDR_VAR 0 7
57957: PUSH
57958: LD_VAR 0 6
57962: PUSH
57963: LD_INT 1
57965: ARRAY
57966: PUSH
57967: LD_VAR 0 5
57971: ARRAY
57972: PUSH
57973: LD_VAR 0 6
57977: PUSH
57978: LD_INT 2
57980: ARRAY
57981: PUSH
57982: LD_VAR 0 5
57986: ARRAY
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
57992: LD_VAR 0 7
57996: PUSH
57997: LD_INT 1
57999: ARRAY
58000: PPUSH
58001: LD_VAR 0 7
58005: PUSH
58006: LD_INT 2
58008: ARRAY
58009: PPUSH
58010: CALL_OW 428
58014: PUSH
58015: LD_INT 0
58017: EQUAL
58018: IFFALSE 58071
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58020: LD_VAR 0 1
58024: PPUSH
58025: LD_VAR 0 7
58029: PUSH
58030: LD_INT 1
58032: ARRAY
58033: PPUSH
58034: LD_VAR 0 7
58038: PUSH
58039: LD_INT 2
58041: ARRAY
58042: PPUSH
58043: LD_VAR 0 3
58047: PPUSH
58048: CALL_OW 48
// result := IsPlaced ( unit ) ;
58052: LD_ADDR_VAR 0 4
58056: PUSH
58057: LD_VAR 0 1
58061: PPUSH
58062: CALL_OW 305
58066: ST_TO_ADDR
// exit ;
58067: POP
58068: POP
58069: GO 58075
// end ; end ;
58071: GO 57950
58073: POP
58074: POP
// end ;
58075: LD_VAR 0 4
58079: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58080: LD_INT 0
58082: PPUSH
58083: PPUSH
58084: PPUSH
// if not side or side > 8 then
58085: LD_VAR 0 1
58089: NOT
58090: PUSH
58091: LD_VAR 0 1
58095: PUSH
58096: LD_INT 8
58098: GREATER
58099: OR
58100: IFFALSE 58104
// exit ;
58102: GO 58291
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58104: LD_ADDR_VAR 0 4
58108: PUSH
58109: LD_INT 22
58111: PUSH
58112: LD_VAR 0 1
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 21
58123: PUSH
58124: LD_INT 3
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PPUSH
58135: CALL_OW 69
58139: ST_TO_ADDR
// if not tmp then
58140: LD_VAR 0 4
58144: NOT
58145: IFFALSE 58149
// exit ;
58147: GO 58291
// enable_addtolog := true ;
58149: LD_ADDR_OWVAR 81
58153: PUSH
58154: LD_INT 1
58156: ST_TO_ADDR
// AddToLog ( [ ) ;
58157: LD_STRING [
58159: PPUSH
58160: CALL_OW 561
// for i in tmp do
58164: LD_ADDR_VAR 0 3
58168: PUSH
58169: LD_VAR 0 4
58173: PUSH
58174: FOR_IN
58175: IFFALSE 58282
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58177: LD_STRING [
58179: PUSH
58180: LD_VAR 0 3
58184: PPUSH
58185: CALL_OW 266
58189: STR
58190: PUSH
58191: LD_STRING , 
58193: STR
58194: PUSH
58195: LD_VAR 0 3
58199: PPUSH
58200: CALL_OW 250
58204: STR
58205: PUSH
58206: LD_STRING , 
58208: STR
58209: PUSH
58210: LD_VAR 0 3
58214: PPUSH
58215: CALL_OW 251
58219: STR
58220: PUSH
58221: LD_STRING , 
58223: STR
58224: PUSH
58225: LD_VAR 0 3
58229: PPUSH
58230: CALL_OW 254
58234: STR
58235: PUSH
58236: LD_STRING , 
58238: STR
58239: PUSH
58240: LD_VAR 0 3
58244: PPUSH
58245: LD_INT 1
58247: PPUSH
58248: CALL_OW 268
58252: STR
58253: PUSH
58254: LD_STRING , 
58256: STR
58257: PUSH
58258: LD_VAR 0 3
58262: PPUSH
58263: LD_INT 2
58265: PPUSH
58266: CALL_OW 268
58270: STR
58271: PUSH
58272: LD_STRING ],
58274: STR
58275: PPUSH
58276: CALL_OW 561
// end ;
58280: GO 58174
58282: POP
58283: POP
// AddToLog ( ]; ) ;
58284: LD_STRING ];
58286: PPUSH
58287: CALL_OW 561
// end ;
58291: LD_VAR 0 2
58295: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58296: LD_INT 0
58298: PPUSH
58299: PPUSH
58300: PPUSH
58301: PPUSH
58302: PPUSH
// if not area or not rate or not max then
58303: LD_VAR 0 1
58307: NOT
58308: PUSH
58309: LD_VAR 0 2
58313: NOT
58314: OR
58315: PUSH
58316: LD_VAR 0 4
58320: NOT
58321: OR
58322: IFFALSE 58326
// exit ;
58324: GO 58515
// while 1 do
58326: LD_INT 1
58328: IFFALSE 58515
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58330: LD_ADDR_VAR 0 9
58334: PUSH
58335: LD_VAR 0 1
58339: PPUSH
58340: LD_INT 1
58342: PPUSH
58343: CALL_OW 287
58347: PUSH
58348: LD_INT 10
58350: MUL
58351: ST_TO_ADDR
// r := rate / 10 ;
58352: LD_ADDR_VAR 0 7
58356: PUSH
58357: LD_VAR 0 2
58361: PUSH
58362: LD_INT 10
58364: DIVREAL
58365: ST_TO_ADDR
// time := 1 1$00 ;
58366: LD_ADDR_VAR 0 8
58370: PUSH
58371: LD_INT 2100
58373: ST_TO_ADDR
// if amount < min then
58374: LD_VAR 0 9
58378: PUSH
58379: LD_VAR 0 3
58383: LESS
58384: IFFALSE 58402
// r := r * 2 else
58386: LD_ADDR_VAR 0 7
58390: PUSH
58391: LD_VAR 0 7
58395: PUSH
58396: LD_INT 2
58398: MUL
58399: ST_TO_ADDR
58400: GO 58428
// if amount > max then
58402: LD_VAR 0 9
58406: PUSH
58407: LD_VAR 0 4
58411: GREATER
58412: IFFALSE 58428
// r := r / 2 ;
58414: LD_ADDR_VAR 0 7
58418: PUSH
58419: LD_VAR 0 7
58423: PUSH
58424: LD_INT 2
58426: DIVREAL
58427: ST_TO_ADDR
// time := time / r ;
58428: LD_ADDR_VAR 0 8
58432: PUSH
58433: LD_VAR 0 8
58437: PUSH
58438: LD_VAR 0 7
58442: DIVREAL
58443: ST_TO_ADDR
// if time < 0 then
58444: LD_VAR 0 8
58448: PUSH
58449: LD_INT 0
58451: LESS
58452: IFFALSE 58469
// time := time * - 1 ;
58454: LD_ADDR_VAR 0 8
58458: PUSH
58459: LD_VAR 0 8
58463: PUSH
58464: LD_INT 1
58466: NEG
58467: MUL
58468: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
58469: LD_VAR 0 8
58473: PUSH
58474: LD_INT 35
58476: PPUSH
58477: LD_INT 875
58479: PPUSH
58480: CALL_OW 12
58484: PLUS
58485: PPUSH
58486: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58490: LD_INT 1
58492: PPUSH
58493: LD_INT 5
58495: PPUSH
58496: CALL_OW 12
58500: PPUSH
58501: LD_VAR 0 1
58505: PPUSH
58506: LD_INT 1
58508: PPUSH
58509: CALL_OW 55
// end ;
58513: GO 58326
// end ;
58515: LD_VAR 0 5
58519: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58520: LD_INT 0
58522: PPUSH
58523: PPUSH
58524: PPUSH
58525: PPUSH
58526: PPUSH
58527: PPUSH
58528: PPUSH
58529: PPUSH
// if not turrets or not factories then
58530: LD_VAR 0 1
58534: NOT
58535: PUSH
58536: LD_VAR 0 2
58540: NOT
58541: OR
58542: IFFALSE 58546
// exit ;
58544: GO 58853
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58546: LD_ADDR_VAR 0 10
58550: PUSH
58551: LD_INT 5
58553: PUSH
58554: LD_INT 6
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 2
58563: PUSH
58564: LD_INT 4
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 3
58573: PUSH
58574: LD_INT 5
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 24
58588: PUSH
58589: LD_INT 25
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 23
58598: PUSH
58599: LD_INT 27
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 42
58612: PUSH
58613: LD_INT 43
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 44
58622: PUSH
58623: LD_INT 46
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 45
58632: PUSH
58633: LD_INT 47
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: LIST
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: LIST
58649: ST_TO_ADDR
// result := [ ] ;
58650: LD_ADDR_VAR 0 3
58654: PUSH
58655: EMPTY
58656: ST_TO_ADDR
// for i in turrets do
58657: LD_ADDR_VAR 0 4
58661: PUSH
58662: LD_VAR 0 1
58666: PUSH
58667: FOR_IN
58668: IFFALSE 58851
// begin nat := GetNation ( i ) ;
58670: LD_ADDR_VAR 0 7
58674: PUSH
58675: LD_VAR 0 4
58679: PPUSH
58680: CALL_OW 248
58684: ST_TO_ADDR
// weapon := 0 ;
58685: LD_ADDR_VAR 0 8
58689: PUSH
58690: LD_INT 0
58692: ST_TO_ADDR
// if not nat then
58693: LD_VAR 0 7
58697: NOT
58698: IFFALSE 58702
// continue ;
58700: GO 58667
// for j in list [ nat ] do
58702: LD_ADDR_VAR 0 5
58706: PUSH
58707: LD_VAR 0 10
58711: PUSH
58712: LD_VAR 0 7
58716: ARRAY
58717: PUSH
58718: FOR_IN
58719: IFFALSE 58760
// if GetBWeapon ( i ) = j [ 1 ] then
58721: LD_VAR 0 4
58725: PPUSH
58726: CALL_OW 269
58730: PUSH
58731: LD_VAR 0 5
58735: PUSH
58736: LD_INT 1
58738: ARRAY
58739: EQUAL
58740: IFFALSE 58758
// begin weapon := j [ 2 ] ;
58742: LD_ADDR_VAR 0 8
58746: PUSH
58747: LD_VAR 0 5
58751: PUSH
58752: LD_INT 2
58754: ARRAY
58755: ST_TO_ADDR
// break ;
58756: GO 58760
// end ;
58758: GO 58718
58760: POP
58761: POP
// if not weapon then
58762: LD_VAR 0 8
58766: NOT
58767: IFFALSE 58771
// continue ;
58769: GO 58667
// for k in factories do
58771: LD_ADDR_VAR 0 6
58775: PUSH
58776: LD_VAR 0 2
58780: PUSH
58781: FOR_IN
58782: IFFALSE 58847
// begin weapons := AvailableWeaponList ( k ) ;
58784: LD_ADDR_VAR 0 9
58788: PUSH
58789: LD_VAR 0 6
58793: PPUSH
58794: CALL_OW 478
58798: ST_TO_ADDR
// if not weapons then
58799: LD_VAR 0 9
58803: NOT
58804: IFFALSE 58808
// continue ;
58806: GO 58781
// if weapon in weapons then
58808: LD_VAR 0 8
58812: PUSH
58813: LD_VAR 0 9
58817: IN
58818: IFFALSE 58845
// begin result := [ i , weapon ] ;
58820: LD_ADDR_VAR 0 3
58824: PUSH
58825: LD_VAR 0 4
58829: PUSH
58830: LD_VAR 0 8
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: ST_TO_ADDR
// exit ;
58839: POP
58840: POP
58841: POP
58842: POP
58843: GO 58853
// end ; end ;
58845: GO 58781
58847: POP
58848: POP
// end ;
58849: GO 58667
58851: POP
58852: POP
// end ;
58853: LD_VAR 0 3
58857: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58858: LD_INT 0
58860: PPUSH
// if not side or side > 8 then
58861: LD_VAR 0 3
58865: NOT
58866: PUSH
58867: LD_VAR 0 3
58871: PUSH
58872: LD_INT 8
58874: GREATER
58875: OR
58876: IFFALSE 58880
// exit ;
58878: GO 58939
// if not range then
58880: LD_VAR 0 4
58884: NOT
58885: IFFALSE 58896
// range := - 12 ;
58887: LD_ADDR_VAR 0 4
58891: PUSH
58892: LD_INT 12
58894: NEG
58895: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58896: LD_VAR 0 1
58900: PPUSH
58901: LD_VAR 0 2
58905: PPUSH
58906: LD_VAR 0 3
58910: PPUSH
58911: LD_VAR 0 4
58915: PPUSH
58916: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58920: LD_VAR 0 1
58924: PPUSH
58925: LD_VAR 0 2
58929: PPUSH
58930: LD_VAR 0 3
58934: PPUSH
58935: CALL_OW 331
// end ;
58939: LD_VAR 0 5
58943: RET
// export function Video ( mode ) ; begin
58944: LD_INT 0
58946: PPUSH
// ingame_video = mode ;
58947: LD_ADDR_OWVAR 52
58951: PUSH
58952: LD_VAR 0 1
58956: ST_TO_ADDR
// interface_hidden = mode ;
58957: LD_ADDR_OWVAR 54
58961: PUSH
58962: LD_VAR 0 1
58966: ST_TO_ADDR
// end ;
58967: LD_VAR 0 2
58971: RET
// export function Join ( array , element ) ; begin
58972: LD_INT 0
58974: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58975: LD_ADDR_VAR 0 3
58979: PUSH
58980: LD_VAR 0 1
58984: PPUSH
58985: LD_VAR 0 1
58989: PUSH
58990: LD_INT 1
58992: PLUS
58993: PPUSH
58994: LD_VAR 0 2
58998: PPUSH
58999: CALL_OW 1
59003: ST_TO_ADDR
// end ;
59004: LD_VAR 0 3
59008: RET
// export function JoinUnion ( array , element ) ; begin
59009: LD_INT 0
59011: PPUSH
// result := array union element ;
59012: LD_ADDR_VAR 0 3
59016: PUSH
59017: LD_VAR 0 1
59021: PUSH
59022: LD_VAR 0 2
59026: UNION
59027: ST_TO_ADDR
// end ;
59028: LD_VAR 0 3
59032: RET
// export function GetBehemoths ( side ) ; begin
59033: LD_INT 0
59035: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
59036: LD_ADDR_VAR 0 2
59040: PUSH
59041: LD_INT 22
59043: PUSH
59044: LD_VAR 0 1
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 31
59055: PUSH
59056: LD_INT 25
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PPUSH
59067: CALL_OW 69
59071: ST_TO_ADDR
// end ;
59072: LD_VAR 0 2
59076: RET
// export function Shuffle ( array ) ; var i , index ; begin
59077: LD_INT 0
59079: PPUSH
59080: PPUSH
59081: PPUSH
// result := [ ] ;
59082: LD_ADDR_VAR 0 2
59086: PUSH
59087: EMPTY
59088: ST_TO_ADDR
// if not array then
59089: LD_VAR 0 1
59093: NOT
59094: IFFALSE 59098
// exit ;
59096: GO 59197
// Randomize ;
59098: CALL_OW 10
// for i = array downto 1 do
59102: LD_ADDR_VAR 0 3
59106: PUSH
59107: DOUBLE
59108: LD_VAR 0 1
59112: INC
59113: ST_TO_ADDR
59114: LD_INT 1
59116: PUSH
59117: FOR_DOWNTO
59118: IFFALSE 59195
// begin index := rand ( 1 , array ) ;
59120: LD_ADDR_VAR 0 4
59124: PUSH
59125: LD_INT 1
59127: PPUSH
59128: LD_VAR 0 1
59132: PPUSH
59133: CALL_OW 12
59137: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59138: LD_ADDR_VAR 0 2
59142: PUSH
59143: LD_VAR 0 2
59147: PPUSH
59148: LD_VAR 0 2
59152: PUSH
59153: LD_INT 1
59155: PLUS
59156: PPUSH
59157: LD_VAR 0 1
59161: PUSH
59162: LD_VAR 0 4
59166: ARRAY
59167: PPUSH
59168: CALL_OW 2
59172: ST_TO_ADDR
// array := Delete ( array , index ) ;
59173: LD_ADDR_VAR 0 1
59177: PUSH
59178: LD_VAR 0 1
59182: PPUSH
59183: LD_VAR 0 4
59187: PPUSH
59188: CALL_OW 3
59192: ST_TO_ADDR
// end ;
59193: GO 59117
59195: POP
59196: POP
// end ;
59197: LD_VAR 0 2
59201: RET
// export function GetBaseMaterials ( base ) ; begin
59202: LD_INT 0
59204: PPUSH
// result := [ 0 , 0 , 0 ] ;
59205: LD_ADDR_VAR 0 2
59209: PUSH
59210: LD_INT 0
59212: PUSH
59213: LD_INT 0
59215: PUSH
59216: LD_INT 0
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: LIST
59223: ST_TO_ADDR
// if not base then
59224: LD_VAR 0 1
59228: NOT
59229: IFFALSE 59233
// exit ;
59231: GO 59282
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59233: LD_ADDR_VAR 0 2
59237: PUSH
59238: LD_VAR 0 1
59242: PPUSH
59243: LD_INT 1
59245: PPUSH
59246: CALL_OW 275
59250: PUSH
59251: LD_VAR 0 1
59255: PPUSH
59256: LD_INT 2
59258: PPUSH
59259: CALL_OW 275
59263: PUSH
59264: LD_VAR 0 1
59268: PPUSH
59269: LD_INT 3
59271: PPUSH
59272: CALL_OW 275
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: LIST
59281: ST_TO_ADDR
// end ;
59282: LD_VAR 0 2
59286: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59287: LD_INT 0
59289: PPUSH
59290: PPUSH
// result := array ;
59291: LD_ADDR_VAR 0 3
59295: PUSH
59296: LD_VAR 0 1
59300: ST_TO_ADDR
// if size >= result then
59301: LD_VAR 0 2
59305: PUSH
59306: LD_VAR 0 3
59310: GREATEREQUAL
59311: IFFALSE 59315
// exit ;
59313: GO 59365
// if size then
59315: LD_VAR 0 2
59319: IFFALSE 59365
// for i := array downto size do
59321: LD_ADDR_VAR 0 4
59325: PUSH
59326: DOUBLE
59327: LD_VAR 0 1
59331: INC
59332: ST_TO_ADDR
59333: LD_VAR 0 2
59337: PUSH
59338: FOR_DOWNTO
59339: IFFALSE 59363
// result := Delete ( result , result ) ;
59341: LD_ADDR_VAR 0 3
59345: PUSH
59346: LD_VAR 0 3
59350: PPUSH
59351: LD_VAR 0 3
59355: PPUSH
59356: CALL_OW 3
59360: ST_TO_ADDR
59361: GO 59338
59363: POP
59364: POP
// end ;
59365: LD_VAR 0 3
59369: RET
// export function ComExit ( unit ) ; var tmp ; begin
59370: LD_INT 0
59372: PPUSH
59373: PPUSH
// if not IsInUnit ( unit ) then
59374: LD_VAR 0 1
59378: PPUSH
59379: CALL_OW 310
59383: NOT
59384: IFFALSE 59388
// exit ;
59386: GO 59448
// tmp := IsInUnit ( unit ) ;
59388: LD_ADDR_VAR 0 3
59392: PUSH
59393: LD_VAR 0 1
59397: PPUSH
59398: CALL_OW 310
59402: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59403: LD_VAR 0 3
59407: PPUSH
59408: CALL_OW 247
59412: PUSH
59413: LD_INT 2
59415: EQUAL
59416: IFFALSE 59429
// ComExitVehicle ( unit ) else
59418: LD_VAR 0 1
59422: PPUSH
59423: CALL_OW 121
59427: GO 59438
// ComExitBuilding ( unit ) ;
59429: LD_VAR 0 1
59433: PPUSH
59434: CALL_OW 122
// result := tmp ;
59438: LD_ADDR_VAR 0 2
59442: PUSH
59443: LD_VAR 0 3
59447: ST_TO_ADDR
// end ;
59448: LD_VAR 0 2
59452: RET
// export function ComExitAll ( units ) ; var i ; begin
59453: LD_INT 0
59455: PPUSH
59456: PPUSH
// if not units then
59457: LD_VAR 0 1
59461: NOT
59462: IFFALSE 59466
// exit ;
59464: GO 59492
// for i in units do
59466: LD_ADDR_VAR 0 3
59470: PUSH
59471: LD_VAR 0 1
59475: PUSH
59476: FOR_IN
59477: IFFALSE 59490
// ComExit ( i ) ;
59479: LD_VAR 0 3
59483: PPUSH
59484: CALL 59370 0 1
59488: GO 59476
59490: POP
59491: POP
// end ;
59492: LD_VAR 0 2
59496: RET
// export function ResetHc ; begin
59497: LD_INT 0
59499: PPUSH
// InitHc ;
59500: CALL_OW 19
// hc_importance := 0 ;
59504: LD_ADDR_OWVAR 32
59508: PUSH
59509: LD_INT 0
59511: ST_TO_ADDR
// end ;
59512: LD_VAR 0 1
59516: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59517: LD_INT 0
59519: PPUSH
59520: PPUSH
59521: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59522: LD_ADDR_VAR 0 6
59526: PUSH
59527: LD_VAR 0 1
59531: PUSH
59532: LD_VAR 0 3
59536: PLUS
59537: PUSH
59538: LD_INT 2
59540: DIV
59541: ST_TO_ADDR
// if _x < 0 then
59542: LD_VAR 0 6
59546: PUSH
59547: LD_INT 0
59549: LESS
59550: IFFALSE 59567
// _x := _x * - 1 ;
59552: LD_ADDR_VAR 0 6
59556: PUSH
59557: LD_VAR 0 6
59561: PUSH
59562: LD_INT 1
59564: NEG
59565: MUL
59566: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59567: LD_ADDR_VAR 0 7
59571: PUSH
59572: LD_VAR 0 2
59576: PUSH
59577: LD_VAR 0 4
59581: PLUS
59582: PUSH
59583: LD_INT 2
59585: DIV
59586: ST_TO_ADDR
// if _y < 0 then
59587: LD_VAR 0 7
59591: PUSH
59592: LD_INT 0
59594: LESS
59595: IFFALSE 59612
// _y := _y * - 1 ;
59597: LD_ADDR_VAR 0 7
59601: PUSH
59602: LD_VAR 0 7
59606: PUSH
59607: LD_INT 1
59609: NEG
59610: MUL
59611: ST_TO_ADDR
// result := [ _x , _y ] ;
59612: LD_ADDR_VAR 0 5
59616: PUSH
59617: LD_VAR 0 6
59621: PUSH
59622: LD_VAR 0 7
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: ST_TO_ADDR
// end ;
59631: LD_VAR 0 5
59635: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59636: LD_INT 0
59638: PPUSH
59639: PPUSH
59640: PPUSH
59641: PPUSH
// task := GetTaskList ( unit ) ;
59642: LD_ADDR_VAR 0 7
59646: PUSH
59647: LD_VAR 0 1
59651: PPUSH
59652: CALL_OW 437
59656: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59657: LD_VAR 0 7
59661: NOT
59662: PUSH
59663: LD_VAR 0 1
59667: PPUSH
59668: LD_VAR 0 2
59672: PPUSH
59673: CALL_OW 308
59677: NOT
59678: AND
59679: IFFALSE 59683
// exit ;
59681: GO 59801
// if IsInArea ( unit , area ) then
59683: LD_VAR 0 1
59687: PPUSH
59688: LD_VAR 0 2
59692: PPUSH
59693: CALL_OW 308
59697: IFFALSE 59715
// begin ComMoveToArea ( unit , goAway ) ;
59699: LD_VAR 0 1
59703: PPUSH
59704: LD_VAR 0 3
59708: PPUSH
59709: CALL_OW 113
// exit ;
59713: GO 59801
// end ; if task [ 1 ] [ 1 ] <> M then
59715: LD_VAR 0 7
59719: PUSH
59720: LD_INT 1
59722: ARRAY
59723: PUSH
59724: LD_INT 1
59726: ARRAY
59727: PUSH
59728: LD_STRING M
59730: NONEQUAL
59731: IFFALSE 59735
// exit ;
59733: GO 59801
// x := task [ 1 ] [ 2 ] ;
59735: LD_ADDR_VAR 0 5
59739: PUSH
59740: LD_VAR 0 7
59744: PUSH
59745: LD_INT 1
59747: ARRAY
59748: PUSH
59749: LD_INT 2
59751: ARRAY
59752: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59753: LD_ADDR_VAR 0 6
59757: PUSH
59758: LD_VAR 0 7
59762: PUSH
59763: LD_INT 1
59765: ARRAY
59766: PUSH
59767: LD_INT 3
59769: ARRAY
59770: ST_TO_ADDR
// if InArea ( x , y , area ) then
59771: LD_VAR 0 5
59775: PPUSH
59776: LD_VAR 0 6
59780: PPUSH
59781: LD_VAR 0 2
59785: PPUSH
59786: CALL_OW 309
59790: IFFALSE 59801
// ComStop ( unit ) ;
59792: LD_VAR 0 1
59796: PPUSH
59797: CALL_OW 141
// end ;
59801: LD_VAR 0 4
59805: RET
// export function Abs ( value ) ; begin
59806: LD_INT 0
59808: PPUSH
// result := value ;
59809: LD_ADDR_VAR 0 2
59813: PUSH
59814: LD_VAR 0 1
59818: ST_TO_ADDR
// if value < 0 then
59819: LD_VAR 0 1
59823: PUSH
59824: LD_INT 0
59826: LESS
59827: IFFALSE 59844
// result := value * - 1 ;
59829: LD_ADDR_VAR 0 2
59833: PUSH
59834: LD_VAR 0 1
59838: PUSH
59839: LD_INT 1
59841: NEG
59842: MUL
59843: ST_TO_ADDR
// end ;
59844: LD_VAR 0 2
59848: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59849: LD_INT 0
59851: PPUSH
59852: PPUSH
59853: PPUSH
59854: PPUSH
59855: PPUSH
59856: PPUSH
59857: PPUSH
59858: PPUSH
// if not unit or not building then
59859: LD_VAR 0 1
59863: NOT
59864: PUSH
59865: LD_VAR 0 2
59869: NOT
59870: OR
59871: IFFALSE 59875
// exit ;
59873: GO 60101
// x := GetX ( building ) ;
59875: LD_ADDR_VAR 0 4
59879: PUSH
59880: LD_VAR 0 2
59884: PPUSH
59885: CALL_OW 250
59889: ST_TO_ADDR
// y := GetY ( building ) ;
59890: LD_ADDR_VAR 0 6
59894: PUSH
59895: LD_VAR 0 2
59899: PPUSH
59900: CALL_OW 251
59904: ST_TO_ADDR
// d := GetDir ( building ) ;
59905: LD_ADDR_VAR 0 8
59909: PUSH
59910: LD_VAR 0 2
59914: PPUSH
59915: CALL_OW 254
59919: ST_TO_ADDR
// r := 4 ;
59920: LD_ADDR_VAR 0 9
59924: PUSH
59925: LD_INT 4
59927: ST_TO_ADDR
// for i := 1 to 5 do
59928: LD_ADDR_VAR 0 10
59932: PUSH
59933: DOUBLE
59934: LD_INT 1
59936: DEC
59937: ST_TO_ADDR
59938: LD_INT 5
59940: PUSH
59941: FOR_TO
59942: IFFALSE 60099
// begin _x := ShiftX ( x , d , r + i ) ;
59944: LD_ADDR_VAR 0 5
59948: PUSH
59949: LD_VAR 0 4
59953: PPUSH
59954: LD_VAR 0 8
59958: PPUSH
59959: LD_VAR 0 9
59963: PUSH
59964: LD_VAR 0 10
59968: PLUS
59969: PPUSH
59970: CALL_OW 272
59974: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59975: LD_ADDR_VAR 0 7
59979: PUSH
59980: LD_VAR 0 6
59984: PPUSH
59985: LD_VAR 0 8
59989: PPUSH
59990: LD_VAR 0 9
59994: PUSH
59995: LD_VAR 0 10
59999: PLUS
60000: PPUSH
60001: CALL_OW 273
60005: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60006: LD_VAR 0 5
60010: PPUSH
60011: LD_VAR 0 7
60015: PPUSH
60016: CALL_OW 488
60020: PUSH
60021: LD_VAR 0 5
60025: PPUSH
60026: LD_VAR 0 7
60030: PPUSH
60031: CALL_OW 428
60035: PPUSH
60036: CALL_OW 247
60040: PUSH
60041: LD_INT 3
60043: PUSH
60044: LD_INT 2
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: IN
60051: NOT
60052: AND
60053: IFFALSE 60097
// begin ComMoveXY ( unit , _x , _y ) ;
60055: LD_VAR 0 1
60059: PPUSH
60060: LD_VAR 0 5
60064: PPUSH
60065: LD_VAR 0 7
60069: PPUSH
60070: CALL_OW 111
// result := [ _x , _y ] ;
60074: LD_ADDR_VAR 0 3
60078: PUSH
60079: LD_VAR 0 5
60083: PUSH
60084: LD_VAR 0 7
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: ST_TO_ADDR
// exit ;
60093: POP
60094: POP
60095: GO 60101
// end ; end ;
60097: GO 59941
60099: POP
60100: POP
// end ;
60101: LD_VAR 0 3
60105: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60106: LD_INT 0
60108: PPUSH
60109: PPUSH
60110: PPUSH
// result := 0 ;
60111: LD_ADDR_VAR 0 3
60115: PUSH
60116: LD_INT 0
60118: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60119: LD_VAR 0 1
60123: PUSH
60124: LD_INT 0
60126: LESS
60127: PUSH
60128: LD_VAR 0 1
60132: PUSH
60133: LD_INT 8
60135: GREATER
60136: OR
60137: PUSH
60138: LD_VAR 0 2
60142: PUSH
60143: LD_INT 0
60145: LESS
60146: OR
60147: PUSH
60148: LD_VAR 0 2
60152: PUSH
60153: LD_INT 8
60155: GREATER
60156: OR
60157: IFFALSE 60161
// exit ;
60159: GO 60236
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60161: LD_ADDR_VAR 0 4
60165: PUSH
60166: LD_INT 22
60168: PUSH
60169: LD_VAR 0 2
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PPUSH
60178: CALL_OW 69
60182: PUSH
60183: FOR_IN
60184: IFFALSE 60234
// begin un := UnitShoot ( i ) ;
60186: LD_ADDR_VAR 0 5
60190: PUSH
60191: LD_VAR 0 4
60195: PPUSH
60196: CALL_OW 504
60200: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60201: LD_VAR 0 5
60205: PPUSH
60206: CALL_OW 255
60210: PUSH
60211: LD_VAR 0 1
60215: EQUAL
60216: IFFALSE 60232
// begin result := un ;
60218: LD_ADDR_VAR 0 3
60222: PUSH
60223: LD_VAR 0 5
60227: ST_TO_ADDR
// exit ;
60228: POP
60229: POP
60230: GO 60236
// end ; end ;
60232: GO 60183
60234: POP
60235: POP
// end ;
60236: LD_VAR 0 3
60240: RET
// export function GetCargoBay ( units ) ; begin
60241: LD_INT 0
60243: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60244: LD_ADDR_VAR 0 2
60248: PUSH
60249: LD_VAR 0 1
60253: PPUSH
60254: LD_INT 2
60256: PUSH
60257: LD_INT 34
60259: PUSH
60260: LD_INT 12
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 34
60269: PUSH
60270: LD_INT 51
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 34
60279: PUSH
60280: LD_INT 32
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 34
60289: PUSH
60290: LD_EXP 73
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: PPUSH
60306: CALL_OW 72
60310: ST_TO_ADDR
// end ;
60311: LD_VAR 0 2
60315: RET
// export function Negate ( value ) ; begin
60316: LD_INT 0
60318: PPUSH
// result := not value ;
60319: LD_ADDR_VAR 0 2
60323: PUSH
60324: LD_VAR 0 1
60328: NOT
60329: ST_TO_ADDR
// end ;
60330: LD_VAR 0 2
60334: RET
// export function Inc ( value ) ; begin
60335: LD_INT 0
60337: PPUSH
// result := value + 1 ;
60338: LD_ADDR_VAR 0 2
60342: PUSH
60343: LD_VAR 0 1
60347: PUSH
60348: LD_INT 1
60350: PLUS
60351: ST_TO_ADDR
// end ;
60352: LD_VAR 0 2
60356: RET
// export function Dec ( value ) ; begin
60357: LD_INT 0
60359: PPUSH
// result := value - 1 ;
60360: LD_ADDR_VAR 0 2
60364: PUSH
60365: LD_VAR 0 1
60369: PUSH
60370: LD_INT 1
60372: MINUS
60373: ST_TO_ADDR
// end ;
60374: LD_VAR 0 2
60378: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60379: LD_INT 0
60381: PPUSH
60382: PPUSH
60383: PPUSH
60384: PPUSH
60385: PPUSH
60386: PPUSH
60387: PPUSH
60388: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60389: LD_VAR 0 1
60393: PPUSH
60394: LD_VAR 0 2
60398: PPUSH
60399: CALL_OW 488
60403: NOT
60404: PUSH
60405: LD_VAR 0 3
60409: PPUSH
60410: LD_VAR 0 4
60414: PPUSH
60415: CALL_OW 488
60419: NOT
60420: OR
60421: IFFALSE 60434
// begin result := - 1 ;
60423: LD_ADDR_VAR 0 5
60427: PUSH
60428: LD_INT 1
60430: NEG
60431: ST_TO_ADDR
// exit ;
60432: GO 60669
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60434: LD_ADDR_VAR 0 12
60438: PUSH
60439: LD_VAR 0 1
60443: PPUSH
60444: LD_VAR 0 2
60448: PPUSH
60449: LD_VAR 0 3
60453: PPUSH
60454: LD_VAR 0 4
60458: PPUSH
60459: CALL 59517 0 4
60463: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60464: LD_ADDR_VAR 0 11
60468: PUSH
60469: LD_VAR 0 1
60473: PPUSH
60474: LD_VAR 0 2
60478: PPUSH
60479: LD_VAR 0 12
60483: PUSH
60484: LD_INT 1
60486: ARRAY
60487: PPUSH
60488: LD_VAR 0 12
60492: PUSH
60493: LD_INT 2
60495: ARRAY
60496: PPUSH
60497: CALL_OW 298
60501: ST_TO_ADDR
// distance := 9999 ;
60502: LD_ADDR_VAR 0 10
60506: PUSH
60507: LD_INT 9999
60509: ST_TO_ADDR
// for i := 0 to 5 do
60510: LD_ADDR_VAR 0 6
60514: PUSH
60515: DOUBLE
60516: LD_INT 0
60518: DEC
60519: ST_TO_ADDR
60520: LD_INT 5
60522: PUSH
60523: FOR_TO
60524: IFFALSE 60667
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60526: LD_ADDR_VAR 0 7
60530: PUSH
60531: LD_VAR 0 1
60535: PPUSH
60536: LD_VAR 0 6
60540: PPUSH
60541: LD_VAR 0 11
60545: PPUSH
60546: CALL_OW 272
60550: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60551: LD_ADDR_VAR 0 8
60555: PUSH
60556: LD_VAR 0 2
60560: PPUSH
60561: LD_VAR 0 6
60565: PPUSH
60566: LD_VAR 0 11
60570: PPUSH
60571: CALL_OW 273
60575: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60576: LD_VAR 0 7
60580: PPUSH
60581: LD_VAR 0 8
60585: PPUSH
60586: CALL_OW 488
60590: NOT
60591: IFFALSE 60595
// continue ;
60593: GO 60523
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60595: LD_ADDR_VAR 0 9
60599: PUSH
60600: LD_VAR 0 12
60604: PUSH
60605: LD_INT 1
60607: ARRAY
60608: PPUSH
60609: LD_VAR 0 12
60613: PUSH
60614: LD_INT 2
60616: ARRAY
60617: PPUSH
60618: LD_VAR 0 7
60622: PPUSH
60623: LD_VAR 0 8
60627: PPUSH
60628: CALL_OW 298
60632: ST_TO_ADDR
// if tmp < distance then
60633: LD_VAR 0 9
60637: PUSH
60638: LD_VAR 0 10
60642: LESS
60643: IFFALSE 60665
// begin result := i ;
60645: LD_ADDR_VAR 0 5
60649: PUSH
60650: LD_VAR 0 6
60654: ST_TO_ADDR
// distance := tmp ;
60655: LD_ADDR_VAR 0 10
60659: PUSH
60660: LD_VAR 0 9
60664: ST_TO_ADDR
// end ; end ;
60665: GO 60523
60667: POP
60668: POP
// end ;
60669: LD_VAR 0 5
60673: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60674: LD_INT 0
60676: PPUSH
60677: PPUSH
// if not driver or not IsInUnit ( driver ) then
60678: LD_VAR 0 1
60682: NOT
60683: PUSH
60684: LD_VAR 0 1
60688: PPUSH
60689: CALL_OW 310
60693: NOT
60694: OR
60695: IFFALSE 60699
// exit ;
60697: GO 60789
// vehicle := IsInUnit ( driver ) ;
60699: LD_ADDR_VAR 0 3
60703: PUSH
60704: LD_VAR 0 1
60708: PPUSH
60709: CALL_OW 310
60713: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60714: LD_VAR 0 1
60718: PPUSH
60719: LD_STRING \
60721: PUSH
60722: LD_INT 0
60724: PUSH
60725: LD_INT 0
60727: PUSH
60728: LD_INT 0
60730: PUSH
60731: LD_INT 0
60733: PUSH
60734: LD_INT 0
60736: PUSH
60737: LD_INT 0
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: PUSH
60749: LD_STRING E
60751: PUSH
60752: LD_INT 0
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: LD_VAR 0 3
60762: PUSH
60763: LD_INT 0
60765: PUSH
60766: LD_INT 0
60768: PUSH
60769: LD_INT 0
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PPUSH
60785: CALL_OW 446
// end ;
60789: LD_VAR 0 2
60793: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60794: LD_INT 0
60796: PPUSH
60797: PPUSH
// if not driver or not IsInUnit ( driver ) then
60798: LD_VAR 0 1
60802: NOT
60803: PUSH
60804: LD_VAR 0 1
60808: PPUSH
60809: CALL_OW 310
60813: NOT
60814: OR
60815: IFFALSE 60819
// exit ;
60817: GO 60909
// vehicle := IsInUnit ( driver ) ;
60819: LD_ADDR_VAR 0 3
60823: PUSH
60824: LD_VAR 0 1
60828: PPUSH
60829: CALL_OW 310
60833: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60834: LD_VAR 0 1
60838: PPUSH
60839: LD_STRING \
60841: PUSH
60842: LD_INT 0
60844: PUSH
60845: LD_INT 0
60847: PUSH
60848: LD_INT 0
60850: PUSH
60851: LD_INT 0
60853: PUSH
60854: LD_INT 0
60856: PUSH
60857: LD_INT 0
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: PUSH
60869: LD_STRING E
60871: PUSH
60872: LD_INT 0
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: LD_VAR 0 3
60882: PUSH
60883: LD_INT 0
60885: PUSH
60886: LD_INT 0
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PPUSH
60905: CALL_OW 447
// end ;
60909: LD_VAR 0 2
60913: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60914: LD_INT 0
60916: PPUSH
60917: PPUSH
60918: PPUSH
// tmp := [ ] ;
60919: LD_ADDR_VAR 0 5
60923: PUSH
60924: EMPTY
60925: ST_TO_ADDR
// for i in units do
60926: LD_ADDR_VAR 0 4
60930: PUSH
60931: LD_VAR 0 1
60935: PUSH
60936: FOR_IN
60937: IFFALSE 60975
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60939: LD_ADDR_VAR 0 5
60943: PUSH
60944: LD_VAR 0 5
60948: PPUSH
60949: LD_VAR 0 5
60953: PUSH
60954: LD_INT 1
60956: PLUS
60957: PPUSH
60958: LD_VAR 0 4
60962: PPUSH
60963: CALL_OW 256
60967: PPUSH
60968: CALL_OW 2
60972: ST_TO_ADDR
60973: GO 60936
60975: POP
60976: POP
// if not tmp then
60977: LD_VAR 0 5
60981: NOT
60982: IFFALSE 60986
// exit ;
60984: GO 61034
// if asc then
60986: LD_VAR 0 2
60990: IFFALSE 61014
// result := SortListByListAsc ( units , tmp ) else
60992: LD_ADDR_VAR 0 3
60996: PUSH
60997: LD_VAR 0 1
61001: PPUSH
61002: LD_VAR 0 5
61006: PPUSH
61007: CALL_OW 76
61011: ST_TO_ADDR
61012: GO 61034
// result := SortListByListDesc ( units , tmp ) ;
61014: LD_ADDR_VAR 0 3
61018: PUSH
61019: LD_VAR 0 1
61023: PPUSH
61024: LD_VAR 0 5
61028: PPUSH
61029: CALL_OW 77
61033: ST_TO_ADDR
// end ;
61034: LD_VAR 0 3
61038: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61039: LD_INT 0
61041: PPUSH
61042: PPUSH
// task := GetTaskList ( mech ) ;
61043: LD_ADDR_VAR 0 4
61047: PUSH
61048: LD_VAR 0 1
61052: PPUSH
61053: CALL_OW 437
61057: ST_TO_ADDR
// if not task then
61058: LD_VAR 0 4
61062: NOT
61063: IFFALSE 61067
// exit ;
61065: GO 61109
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61067: LD_ADDR_VAR 0 3
61071: PUSH
61072: LD_VAR 0 4
61076: PUSH
61077: LD_INT 1
61079: ARRAY
61080: PUSH
61081: LD_INT 1
61083: ARRAY
61084: PUSH
61085: LD_STRING r
61087: EQUAL
61088: PUSH
61089: LD_VAR 0 4
61093: PUSH
61094: LD_INT 1
61096: ARRAY
61097: PUSH
61098: LD_INT 4
61100: ARRAY
61101: PUSH
61102: LD_VAR 0 2
61106: EQUAL
61107: AND
61108: ST_TO_ADDR
// end ;
61109: LD_VAR 0 3
61113: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61114: LD_INT 0
61116: PPUSH
// SetDir ( unit , d ) ;
61117: LD_VAR 0 1
61121: PPUSH
61122: LD_VAR 0 4
61126: PPUSH
61127: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
61131: LD_VAR 0 1
61135: PPUSH
61136: LD_VAR 0 2
61140: PPUSH
61141: LD_VAR 0 3
61145: PPUSH
61146: LD_VAR 0 5
61150: PPUSH
61151: CALL_OW 48
// end ;
61155: LD_VAR 0 6
61159: RET
// export function ToNaturalNumber ( number ) ; begin
61160: LD_INT 0
61162: PPUSH
// result := number div 1 ;
61163: LD_ADDR_VAR 0 2
61167: PUSH
61168: LD_VAR 0 1
61172: PUSH
61173: LD_INT 1
61175: DIV
61176: ST_TO_ADDR
// if number < 0 then
61177: LD_VAR 0 1
61181: PUSH
61182: LD_INT 0
61184: LESS
61185: IFFALSE 61195
// result := 0 ;
61187: LD_ADDR_VAR 0 2
61191: PUSH
61192: LD_INT 0
61194: ST_TO_ADDR
// end ;
61195: LD_VAR 0 2
61199: RET
// export function SortByClass ( units , class ) ; var un ; begin
61200: LD_INT 0
61202: PPUSH
61203: PPUSH
// if not units or not class then
61204: LD_VAR 0 1
61208: NOT
61209: PUSH
61210: LD_VAR 0 2
61214: NOT
61215: OR
61216: IFFALSE 61220
// exit ;
61218: GO 61315
// result := [ ] ;
61220: LD_ADDR_VAR 0 3
61224: PUSH
61225: EMPTY
61226: ST_TO_ADDR
// for un in units do
61227: LD_ADDR_VAR 0 4
61231: PUSH
61232: LD_VAR 0 1
61236: PUSH
61237: FOR_IN
61238: IFFALSE 61313
// if GetClass ( un ) = class then
61240: LD_VAR 0 4
61244: PPUSH
61245: CALL_OW 257
61249: PUSH
61250: LD_VAR 0 2
61254: EQUAL
61255: IFFALSE 61282
// result := Insert ( result , 1 , un ) else
61257: LD_ADDR_VAR 0 3
61261: PUSH
61262: LD_VAR 0 3
61266: PPUSH
61267: LD_INT 1
61269: PPUSH
61270: LD_VAR 0 4
61274: PPUSH
61275: CALL_OW 2
61279: ST_TO_ADDR
61280: GO 61311
// result := Replace ( result , result + 1 , un ) ;
61282: LD_ADDR_VAR 0 3
61286: PUSH
61287: LD_VAR 0 3
61291: PPUSH
61292: LD_VAR 0 3
61296: PUSH
61297: LD_INT 1
61299: PLUS
61300: PPUSH
61301: LD_VAR 0 4
61305: PPUSH
61306: CALL_OW 1
61310: ST_TO_ADDR
61311: GO 61237
61313: POP
61314: POP
// end ;
61315: LD_VAR 0 3
61319: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61320: LD_INT 0
61322: PPUSH
61323: PPUSH
61324: PPUSH
61325: PPUSH
61326: PPUSH
61327: PPUSH
61328: PPUSH
// result := [ ] ;
61329: LD_ADDR_VAR 0 4
61333: PUSH
61334: EMPTY
61335: ST_TO_ADDR
// if x - r < 0 then
61336: LD_VAR 0 1
61340: PUSH
61341: LD_VAR 0 3
61345: MINUS
61346: PUSH
61347: LD_INT 0
61349: LESS
61350: IFFALSE 61362
// min_x := 0 else
61352: LD_ADDR_VAR 0 8
61356: PUSH
61357: LD_INT 0
61359: ST_TO_ADDR
61360: GO 61378
// min_x := x - r ;
61362: LD_ADDR_VAR 0 8
61366: PUSH
61367: LD_VAR 0 1
61371: PUSH
61372: LD_VAR 0 3
61376: MINUS
61377: ST_TO_ADDR
// if y - r < 0 then
61378: LD_VAR 0 2
61382: PUSH
61383: LD_VAR 0 3
61387: MINUS
61388: PUSH
61389: LD_INT 0
61391: LESS
61392: IFFALSE 61404
// min_y := 0 else
61394: LD_ADDR_VAR 0 7
61398: PUSH
61399: LD_INT 0
61401: ST_TO_ADDR
61402: GO 61420
// min_y := y - r ;
61404: LD_ADDR_VAR 0 7
61408: PUSH
61409: LD_VAR 0 2
61413: PUSH
61414: LD_VAR 0 3
61418: MINUS
61419: ST_TO_ADDR
// max_x := x + r ;
61420: LD_ADDR_VAR 0 9
61424: PUSH
61425: LD_VAR 0 1
61429: PUSH
61430: LD_VAR 0 3
61434: PLUS
61435: ST_TO_ADDR
// max_y := y + r ;
61436: LD_ADDR_VAR 0 10
61440: PUSH
61441: LD_VAR 0 2
61445: PUSH
61446: LD_VAR 0 3
61450: PLUS
61451: ST_TO_ADDR
// for _x = min_x to max_x do
61452: LD_ADDR_VAR 0 5
61456: PUSH
61457: DOUBLE
61458: LD_VAR 0 8
61462: DEC
61463: ST_TO_ADDR
61464: LD_VAR 0 9
61468: PUSH
61469: FOR_TO
61470: IFFALSE 61571
// for _y = min_y to max_y do
61472: LD_ADDR_VAR 0 6
61476: PUSH
61477: DOUBLE
61478: LD_VAR 0 7
61482: DEC
61483: ST_TO_ADDR
61484: LD_VAR 0 10
61488: PUSH
61489: FOR_TO
61490: IFFALSE 61567
// begin if not ValidHex ( _x , _y ) then
61492: LD_VAR 0 5
61496: PPUSH
61497: LD_VAR 0 6
61501: PPUSH
61502: CALL_OW 488
61506: NOT
61507: IFFALSE 61511
// continue ;
61509: GO 61489
// if GetResourceTypeXY ( _x , _y ) then
61511: LD_VAR 0 5
61515: PPUSH
61516: LD_VAR 0 6
61520: PPUSH
61521: CALL_OW 283
61525: IFFALSE 61565
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61527: LD_ADDR_VAR 0 4
61531: PUSH
61532: LD_VAR 0 4
61536: PPUSH
61537: LD_VAR 0 4
61541: PUSH
61542: LD_INT 1
61544: PLUS
61545: PPUSH
61546: LD_VAR 0 5
61550: PUSH
61551: LD_VAR 0 6
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PPUSH
61560: CALL_OW 1
61564: ST_TO_ADDR
// end ;
61565: GO 61489
61567: POP
61568: POP
61569: GO 61469
61571: POP
61572: POP
// end ;
61573: LD_VAR 0 4
61577: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61578: LD_INT 0
61580: PPUSH
61581: PPUSH
61582: PPUSH
61583: PPUSH
61584: PPUSH
61585: PPUSH
61586: PPUSH
61587: PPUSH
// if not units then
61588: LD_VAR 0 1
61592: NOT
61593: IFFALSE 61597
// exit ;
61595: GO 62123
// result := UnitFilter ( units , [ f_ok ] ) ;
61597: LD_ADDR_VAR 0 3
61601: PUSH
61602: LD_VAR 0 1
61606: PPUSH
61607: LD_INT 50
61609: PUSH
61610: EMPTY
61611: LIST
61612: PPUSH
61613: CALL_OW 72
61617: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61618: LD_ADDR_VAR 0 8
61622: PUSH
61623: LD_VAR 0 1
61627: PUSH
61628: LD_INT 1
61630: ARRAY
61631: PPUSH
61632: CALL_OW 255
61636: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
61637: LD_ADDR_VAR 0 10
61641: PUSH
61642: LD_INT 29
61644: PUSH
61645: LD_EXP 76
61649: PUSH
61650: LD_INT 49
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: LIST
61657: ST_TO_ADDR
// if not result then
61658: LD_VAR 0 3
61662: NOT
61663: IFFALSE 61667
// exit ;
61665: GO 62123
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61667: LD_ADDR_VAR 0 5
61671: PUSH
61672: LD_INT 81
61674: PUSH
61675: LD_VAR 0 8
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PPUSH
61684: CALL_OW 69
61688: ST_TO_ADDR
// for i in result do
61689: LD_ADDR_VAR 0 4
61693: PUSH
61694: LD_VAR 0 3
61698: PUSH
61699: FOR_IN
61700: IFFALSE 62121
// begin tag := GetTag ( i ) + 1 ;
61702: LD_ADDR_VAR 0 9
61706: PUSH
61707: LD_VAR 0 4
61711: PPUSH
61712: CALL_OW 110
61716: PUSH
61717: LD_INT 1
61719: PLUS
61720: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
61721: LD_ADDR_VAR 0 7
61725: PUSH
61726: LD_VAR 0 4
61730: PPUSH
61731: CALL_OW 250
61735: PPUSH
61736: LD_VAR 0 4
61740: PPUSH
61741: CALL_OW 251
61745: PPUSH
61746: LD_INT 6
61748: PPUSH
61749: CALL 61320 0 3
61753: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
61754: LD_VAR 0 4
61758: PPUSH
61759: CALL_OW 247
61763: PUSH
61764: LD_INT 2
61766: EQUAL
61767: PUSH
61768: LD_VAR 0 7
61772: AND
61773: PUSH
61774: LD_VAR 0 4
61778: PPUSH
61779: CALL_OW 264
61783: PUSH
61784: LD_VAR 0 10
61788: IN
61789: NOT
61790: AND
61791: IFFALSE 61830
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61793: LD_VAR 0 4
61797: PPUSH
61798: LD_VAR 0 7
61802: PUSH
61803: LD_INT 1
61805: ARRAY
61806: PUSH
61807: LD_INT 1
61809: ARRAY
61810: PPUSH
61811: LD_VAR 0 7
61815: PUSH
61816: LD_INT 1
61818: ARRAY
61819: PUSH
61820: LD_INT 2
61822: ARRAY
61823: PPUSH
61824: CALL_OW 116
61828: GO 62119
// if path > tag then
61830: LD_VAR 0 2
61834: PUSH
61835: LD_VAR 0 9
61839: GREATER
61840: IFFALSE 62048
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
61842: LD_ADDR_VAR 0 6
61846: PUSH
61847: LD_VAR 0 5
61851: PPUSH
61852: LD_INT 91
61854: PUSH
61855: LD_VAR 0 4
61859: PUSH
61860: LD_INT 8
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: LIST
61867: PPUSH
61868: CALL_OW 72
61872: ST_TO_ADDR
// if nearEnemy then
61873: LD_VAR 0 6
61877: IFFALSE 61946
// begin if GetWeapon ( i ) = ru_time_lapser then
61879: LD_VAR 0 4
61883: PPUSH
61884: CALL_OW 264
61888: PUSH
61889: LD_INT 49
61891: EQUAL
61892: IFFALSE 61920
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
61894: LD_VAR 0 4
61898: PPUSH
61899: LD_VAR 0 6
61903: PPUSH
61904: LD_VAR 0 4
61908: PPUSH
61909: CALL_OW 74
61913: PPUSH
61914: CALL_OW 112
61918: GO 61944
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
61920: LD_VAR 0 4
61924: PPUSH
61925: LD_VAR 0 6
61929: PPUSH
61930: LD_VAR 0 4
61934: PPUSH
61935: CALL_OW 74
61939: PPUSH
61940: CALL_OW 115
// end else
61944: GO 62046
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
61946: LD_VAR 0 4
61950: PPUSH
61951: LD_VAR 0 2
61955: PUSH
61956: LD_VAR 0 9
61960: ARRAY
61961: PUSH
61962: LD_INT 1
61964: ARRAY
61965: PPUSH
61966: LD_VAR 0 2
61970: PUSH
61971: LD_VAR 0 9
61975: ARRAY
61976: PUSH
61977: LD_INT 2
61979: ARRAY
61980: PPUSH
61981: CALL_OW 297
61985: PUSH
61986: LD_INT 6
61988: GREATER
61989: IFFALSE 62032
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
61991: LD_VAR 0 4
61995: PPUSH
61996: LD_VAR 0 2
62000: PUSH
62001: LD_VAR 0 9
62005: ARRAY
62006: PUSH
62007: LD_INT 1
62009: ARRAY
62010: PPUSH
62011: LD_VAR 0 2
62015: PUSH
62016: LD_VAR 0 9
62020: ARRAY
62021: PUSH
62022: LD_INT 2
62024: ARRAY
62025: PPUSH
62026: CALL_OW 114
62030: GO 62046
// SetTag ( i , tag ) ;
62032: LD_VAR 0 4
62036: PPUSH
62037: LD_VAR 0 9
62041: PPUSH
62042: CALL_OW 109
// end else
62046: GO 62119
// if enemy then
62048: LD_VAR 0 5
62052: IFFALSE 62119
// begin if GetWeapon ( i ) = ru_time_lapser then
62054: LD_VAR 0 4
62058: PPUSH
62059: CALL_OW 264
62063: PUSH
62064: LD_INT 49
62066: EQUAL
62067: IFFALSE 62095
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
62069: LD_VAR 0 4
62073: PPUSH
62074: LD_VAR 0 5
62078: PPUSH
62079: LD_VAR 0 4
62083: PPUSH
62084: CALL_OW 74
62088: PPUSH
62089: CALL_OW 112
62093: GO 62119
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62095: LD_VAR 0 4
62099: PPUSH
62100: LD_VAR 0 5
62104: PPUSH
62105: LD_VAR 0 4
62109: PPUSH
62110: CALL_OW 74
62114: PPUSH
62115: CALL_OW 115
// end ; end ;
62119: GO 61699
62121: POP
62122: POP
// end ;
62123: LD_VAR 0 3
62127: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62128: LD_INT 0
62130: PPUSH
62131: PPUSH
62132: PPUSH
// if not unit or IsInUnit ( unit ) then
62133: LD_VAR 0 1
62137: NOT
62138: PUSH
62139: LD_VAR 0 1
62143: PPUSH
62144: CALL_OW 310
62148: OR
62149: IFFALSE 62153
// exit ;
62151: GO 62244
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
62153: LD_ADDR_VAR 0 4
62157: PUSH
62158: LD_VAR 0 1
62162: PPUSH
62163: CALL_OW 250
62167: PPUSH
62168: LD_VAR 0 2
62172: PPUSH
62173: LD_INT 1
62175: PPUSH
62176: CALL_OW 272
62180: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
62181: LD_ADDR_VAR 0 5
62185: PUSH
62186: LD_VAR 0 1
62190: PPUSH
62191: CALL_OW 251
62195: PPUSH
62196: LD_VAR 0 2
62200: PPUSH
62201: LD_INT 1
62203: PPUSH
62204: CALL_OW 273
62208: ST_TO_ADDR
// if ValidHex ( x , y ) then
62209: LD_VAR 0 4
62213: PPUSH
62214: LD_VAR 0 5
62218: PPUSH
62219: CALL_OW 488
62223: IFFALSE 62244
// ComTurnXY ( unit , x , y ) ;
62225: LD_VAR 0 1
62229: PPUSH
62230: LD_VAR 0 4
62234: PPUSH
62235: LD_VAR 0 5
62239: PPUSH
62240: CALL_OW 118
// end ;
62244: LD_VAR 0 3
62248: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62249: LD_INT 0
62251: PPUSH
62252: PPUSH
// result := false ;
62253: LD_ADDR_VAR 0 3
62257: PUSH
62258: LD_INT 0
62260: ST_TO_ADDR
// if not units then
62261: LD_VAR 0 2
62265: NOT
62266: IFFALSE 62270
// exit ;
62268: GO 62315
// for i in units do
62270: LD_ADDR_VAR 0 4
62274: PUSH
62275: LD_VAR 0 2
62279: PUSH
62280: FOR_IN
62281: IFFALSE 62313
// if See ( side , i ) then
62283: LD_VAR 0 1
62287: PPUSH
62288: LD_VAR 0 4
62292: PPUSH
62293: CALL_OW 292
62297: IFFALSE 62311
// begin result := true ;
62299: LD_ADDR_VAR 0 3
62303: PUSH
62304: LD_INT 1
62306: ST_TO_ADDR
// exit ;
62307: POP
62308: POP
62309: GO 62315
// end ;
62311: GO 62280
62313: POP
62314: POP
// end ;
62315: LD_VAR 0 3
62319: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62320: LD_INT 0
62322: PPUSH
62323: PPUSH
62324: PPUSH
62325: PPUSH
// if not unit or not points then
62326: LD_VAR 0 1
62330: NOT
62331: PUSH
62332: LD_VAR 0 2
62336: NOT
62337: OR
62338: IFFALSE 62342
// exit ;
62340: GO 62432
// dist := 99999 ;
62342: LD_ADDR_VAR 0 5
62346: PUSH
62347: LD_INT 99999
62349: ST_TO_ADDR
// for i in points do
62350: LD_ADDR_VAR 0 4
62354: PUSH
62355: LD_VAR 0 2
62359: PUSH
62360: FOR_IN
62361: IFFALSE 62430
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62363: LD_ADDR_VAR 0 6
62367: PUSH
62368: LD_VAR 0 1
62372: PPUSH
62373: LD_VAR 0 4
62377: PUSH
62378: LD_INT 1
62380: ARRAY
62381: PPUSH
62382: LD_VAR 0 4
62386: PUSH
62387: LD_INT 2
62389: ARRAY
62390: PPUSH
62391: CALL_OW 297
62395: ST_TO_ADDR
// if tmpDist < dist then
62396: LD_VAR 0 6
62400: PUSH
62401: LD_VAR 0 5
62405: LESS
62406: IFFALSE 62428
// begin result := i ;
62408: LD_ADDR_VAR 0 3
62412: PUSH
62413: LD_VAR 0 4
62417: ST_TO_ADDR
// dist := tmpDist ;
62418: LD_ADDR_VAR 0 5
62422: PUSH
62423: LD_VAR 0 6
62427: ST_TO_ADDR
// end ; end ;
62428: GO 62360
62430: POP
62431: POP
// end ;
62432: LD_VAR 0 3
62436: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
62437: LD_INT 0
62439: PPUSH
// uc_side := side ;
62440: LD_ADDR_OWVAR 20
62444: PUSH
62445: LD_VAR 0 1
62449: ST_TO_ADDR
// uc_nation := 3 ;
62450: LD_ADDR_OWVAR 21
62454: PUSH
62455: LD_INT 3
62457: ST_TO_ADDR
// vc_chassis := 25 ;
62458: LD_ADDR_OWVAR 37
62462: PUSH
62463: LD_INT 25
62465: ST_TO_ADDR
// vc_engine := engine_siberite ;
62466: LD_ADDR_OWVAR 39
62470: PUSH
62471: LD_INT 3
62473: ST_TO_ADDR
// vc_control := control_computer ;
62474: LD_ADDR_OWVAR 38
62478: PUSH
62479: LD_INT 3
62481: ST_TO_ADDR
// vc_weapon := 59 ;
62482: LD_ADDR_OWVAR 40
62486: PUSH
62487: LD_INT 59
62489: ST_TO_ADDR
// result := CreateVehicle ;
62490: LD_ADDR_VAR 0 5
62494: PUSH
62495: CALL_OW 45
62499: ST_TO_ADDR
// SetDir ( result , d ) ;
62500: LD_VAR 0 5
62504: PPUSH
62505: LD_VAR 0 4
62509: PPUSH
62510: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
62514: LD_VAR 0 5
62518: PPUSH
62519: LD_VAR 0 2
62523: PPUSH
62524: LD_VAR 0 3
62528: PPUSH
62529: LD_INT 0
62531: PPUSH
62532: CALL_OW 48
// end ;
62536: LD_VAR 0 5
62540: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
62541: LD_INT 0
62543: PPUSH
62544: PPUSH
62545: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
62546: LD_ADDR_VAR 0 2
62550: PUSH
62551: LD_INT 0
62553: PUSH
62554: LD_INT 0
62556: PUSH
62557: LD_INT 0
62559: PUSH
62560: LD_INT 0
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
62569: LD_VAR 0 1
62573: NOT
62574: PUSH
62575: LD_VAR 0 1
62579: PPUSH
62580: CALL_OW 264
62584: PUSH
62585: LD_INT 12
62587: PUSH
62588: LD_INT 51
62590: PUSH
62591: LD_INT 32
62593: PUSH
62594: LD_EXP 73
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: IN
62605: NOT
62606: OR
62607: IFFALSE 62611
// exit ;
62609: GO 62709
// for i := 1 to 3 do
62611: LD_ADDR_VAR 0 3
62615: PUSH
62616: DOUBLE
62617: LD_INT 1
62619: DEC
62620: ST_TO_ADDR
62621: LD_INT 3
62623: PUSH
62624: FOR_TO
62625: IFFALSE 62707
// begin tmp := GetCargo ( cargo , i ) ;
62627: LD_ADDR_VAR 0 4
62631: PUSH
62632: LD_VAR 0 1
62636: PPUSH
62637: LD_VAR 0 3
62641: PPUSH
62642: CALL_OW 289
62646: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
62647: LD_ADDR_VAR 0 2
62651: PUSH
62652: LD_VAR 0 2
62656: PPUSH
62657: LD_VAR 0 3
62661: PPUSH
62662: LD_VAR 0 4
62666: PPUSH
62667: CALL_OW 1
62671: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
62672: LD_ADDR_VAR 0 2
62676: PUSH
62677: LD_VAR 0 2
62681: PPUSH
62682: LD_INT 4
62684: PPUSH
62685: LD_VAR 0 2
62689: PUSH
62690: LD_INT 4
62692: ARRAY
62693: PUSH
62694: LD_VAR 0 4
62698: PLUS
62699: PPUSH
62700: CALL_OW 1
62704: ST_TO_ADDR
// end ;
62705: GO 62624
62707: POP
62708: POP
// end ;
62709: LD_VAR 0 2
62713: RET
// export function Length ( array ) ; begin
62714: LD_INT 0
62716: PPUSH
// result := array + 0 ;
62717: LD_ADDR_VAR 0 2
62721: PUSH
62722: LD_VAR 0 1
62726: PUSH
62727: LD_INT 0
62729: PLUS
62730: ST_TO_ADDR
// end ;
62731: LD_VAR 0 2
62735: RET
// export function PrepareArray ( array ) ; begin
62736: LD_INT 0
62738: PPUSH
// result := array diff 0 ;
62739: LD_ADDR_VAR 0 2
62743: PUSH
62744: LD_VAR 0 1
62748: PUSH
62749: LD_INT 0
62751: DIFF
62752: ST_TO_ADDR
// if not result [ 1 ] then
62753: LD_VAR 0 2
62757: PUSH
62758: LD_INT 1
62760: ARRAY
62761: NOT
62762: IFFALSE 62782
// result := Delete ( result , 1 ) ;
62764: LD_ADDR_VAR 0 2
62768: PUSH
62769: LD_VAR 0 2
62773: PPUSH
62774: LD_INT 1
62776: PPUSH
62777: CALL_OW 3
62781: ST_TO_ADDR
// end ;
62782: LD_VAR 0 2
62786: RET
