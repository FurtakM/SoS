// export mineCounter ; every 0 0$1 do var i , tmp , task ;
   0: GO 2
   2: DISABLE
   3: LD_INT 0
   5: PPUSH
   6: PPUSH
   7: PPUSH
// begin mineCounter := 5 ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 5
  15: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
  16: LD_INT 35
  18: PPUSH
  19: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , nation_arabian ] , [ f_class , class_soldier ] ] ) ;
  23: LD_ADDR_VAR 0 2
  27: PUSH
  28: LD_INT 22
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: EMPTY
  35: LIST
  36: LIST
  37: PUSH
  38: LD_INT 23
  40: PUSH
  41: LD_INT 2
  43: PUSH
  44: EMPTY
  45: LIST
  46: LIST
  47: PUSH
  48: LD_INT 25
  50: PUSH
  51: LD_INT 1
  53: PUSH
  54: EMPTY
  55: LIST
  56: LIST
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: PPUSH
  63: CALL_OW 69
  67: ST_TO_ADDR
// if not tmp then
  68: LD_VAR 0 2
  72: NOT
  73: IFFALSE 77
// continue ;
  75: GO 16
// for i in tmp do
  77: LD_ADDR_VAR 0 1
  81: PUSH
  82: LD_VAR 0 2
  86: PUSH
  87: FOR_IN
  88: IFFALSE 277
// begin task := GetTaskList ( i ) ;
  90: LD_ADDR_VAR 0 3
  94: PUSH
  95: LD_VAR 0 1
  99: PPUSH
 100: CALL_OW 437
 104: ST_TO_ADDR
// if not task then
 105: LD_VAR 0 3
 109: NOT
 110: IFFALSE 126
// begin SetTag ( i , 0 ) ;
 112: LD_VAR 0 1
 116: PPUSH
 117: LD_INT 0
 119: PPUSH
 120: CALL_OW 109
// continue ;
 124: GO 87
// end ; if GetTag ( i ) = 1 and task [ 1 ] [ 1 ] <> p then
 126: LD_VAR 0 1
 130: PPUSH
 131: CALL_OW 110
 135: PUSH
 136: LD_INT 1
 138: EQUAL
 139: PUSH
 140: LD_VAR 0 3
 144: PUSH
 145: LD_INT 1
 147: ARRAY
 148: PUSH
 149: LD_INT 1
 151: ARRAY
 152: PUSH
 153: LD_STRING p
 155: NONEQUAL
 156: AND
 157: IFFALSE 173
// begin SetTag ( i , 0 ) ;
 159: LD_VAR 0 1
 163: PPUSH
 164: LD_INT 0
 166: PPUSH
 167: CALL_OW 109
// continue ;
 171: GO 87
// end ; if GetTag ( i ) <> 1 and task [ 1 ] [ 1 ] = p then
 173: LD_VAR 0 1
 177: PPUSH
 178: CALL_OW 110
 182: PUSH
 183: LD_INT 1
 185: NONEQUAL
 186: PUSH
 187: LD_VAR 0 3
 191: PUSH
 192: LD_INT 1
 194: ARRAY
 195: PUSH
 196: LD_INT 1
 198: ARRAY
 199: PUSH
 200: LD_STRING p
 202: EQUAL
 203: AND
 204: IFFALSE 275
// begin SetTag ( i , 1 ) ;
 206: LD_VAR 0 1
 210: PPUSH
 211: LD_INT 1
 213: PPUSH
 214: CALL_OW 109
// RaiseSailEventCustom ( 1 , i , task [ 1 ] [ 2 ] , task [ 1 ] [ 3 ] , task [ 1 ] [ 4 ] , 0 , 0 ) ;
 218: LD_INT 1
 220: PPUSH
 221: LD_VAR 0 1
 225: PPUSH
 226: LD_VAR 0 3
 230: PUSH
 231: LD_INT 1
 233: ARRAY
 234: PUSH
 235: LD_INT 2
 237: ARRAY
 238: PPUSH
 239: LD_VAR 0 3
 243: PUSH
 244: LD_INT 1
 246: ARRAY
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PPUSH
 252: LD_VAR 0 3
 256: PUSH
 257: LD_INT 1
 259: ARRAY
 260: PUSH
 261: LD_INT 4
 263: ARRAY
 264: PPUSH
 265: LD_INT 0
 267: PPUSH
 268: LD_INT 0
 270: PPUSH
 271: CALL_OW 595
// end ; end ;
 275: GO 87
 277: POP
 278: POP
// until mineCounter = 0 ;
 279: LD_EXP 1
 283: PUSH
 284: LD_INT 0
 286: EQUAL
 287: IFFALSE 16
// end ;
 289: PPOPN 3
 291: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = 1 then
 292: LD_VAR 0 1
 296: PUSH
 297: LD_INT 1
 299: EQUAL
 300: IFFALSE 388
// begin repeat wait ( 0 0$1 ) ;
 302: LD_INT 35
 304: PPUSH
 305: CALL_OW 67
// if MineAtPos ( p2 , p3 ) or MineAtRange ( GetX ( p4 ) , GetY ( p4 ) ) then
 309: LD_VAR 0 3
 313: PPUSH
 314: LD_VAR 0 4
 318: PPUSH
 319: CALL_OW 458
 323: PUSH
 324: LD_VAR 0 5
 328: PPUSH
 329: CALL_OW 250
 333: PPUSH
 334: LD_VAR 0 5
 338: PPUSH
 339: CALL_OW 251
 343: PPUSH
 344: CALL 391 0 2
 348: OR
 349: IFFALSE 353
// break ;
 351: GO 374
// if GetTag ( p1 ) <> 1 then
 353: LD_VAR 0 2
 357: PPUSH
 358: CALL_OW 110
 362: PUSH
 363: LD_INT 1
 365: NONEQUAL
 366: IFFALSE 370
// exit ;
 368: GO 388
// until false ;
 370: LD_INT 0
 372: IFFALSE 302
// mineCounter := mineCounter - 1 ;
 374: LD_ADDR_EXP 1
 378: PUSH
 379: LD_EXP 1
 383: PUSH
 384: LD_INT 1
 386: MINUS
 387: ST_TO_ADDR
// end ; end ;
 388: PPOPN 7
 390: END
// export function MineAtRange ( x , y ) ; var _x , _y , _d ; begin
 391: LD_INT 0
 393: PPUSH
 394: PPUSH
 395: PPUSH
 396: PPUSH
// for _d := 0 to 5 do
 397: LD_ADDR_VAR 0 6
 401: PUSH
 402: DOUBLE
 403: LD_INT 0
 405: DEC
 406: ST_TO_ADDR
 407: LD_INT 5
 409: PUSH
 410: FOR_TO
 411: IFFALSE 519
// for _x := - 3 to 3 do
 413: LD_ADDR_VAR 0 4
 417: PUSH
 418: DOUBLE
 419: LD_INT 3
 421: NEG
 422: DEC
 423: ST_TO_ADDR
 424: LD_INT 3
 426: PUSH
 427: FOR_TO
 428: IFFALSE 515
// for _y := - 3 to 3 do
 430: LD_ADDR_VAR 0 5
 434: PUSH
 435: DOUBLE
 436: LD_INT 3
 438: NEG
 439: DEC
 440: ST_TO_ADDR
 441: LD_INT 3
 443: PUSH
 444: FOR_TO
 445: IFFALSE 511
// if MineAtPos ( ShiftX ( x , _d , _x ) , ShiftY ( y , _d , _y ) ) then
 447: LD_VAR 0 1
 451: PPUSH
 452: LD_VAR 0 6
 456: PPUSH
 457: LD_VAR 0 4
 461: PPUSH
 462: CALL_OW 272
 466: PPUSH
 467: LD_VAR 0 2
 471: PPUSH
 472: LD_VAR 0 6
 476: PPUSH
 477: LD_VAR 0 5
 481: PPUSH
 482: CALL_OW 273
 486: PPUSH
 487: CALL_OW 458
 491: IFFALSE 509
// begin result := true ;
 493: LD_ADDR_VAR 0 3
 497: PUSH
 498: LD_INT 1
 500: ST_TO_ADDR
// exit ;
 501: POP
 502: POP
 503: POP
 504: POP
 505: POP
 506: POP
 507: GO 521
// end ;
 509: GO 444
 511: POP
 512: POP
 513: GO 427
 515: POP
 516: POP
 517: GO 410
 519: POP
 520: POP
// end ;
 521: LD_VAR 0 3
 525: RET
// every 0 0$2 do var un , x , y , _r , _x , _y , _d , __x , __y ;
 526: GO 528
 528: DISABLE
 529: LD_INT 0
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
 536: PPUSH
 537: PPUSH
 538: PPUSH
 539: PPUSH
// begin x := 23 ;
 540: LD_ADDR_VAR 0 2
 544: PUSH
 545: LD_INT 23
 547: ST_TO_ADDR
// y := 19 ;
 548: LD_ADDR_VAR 0 3
 552: PUSH
 553: LD_INT 19
 555: ST_TO_ADDR
// uc_side := 8 ;
 556: LD_ADDR_OWVAR 20
 560: PUSH
 561: LD_INT 8
 563: ST_TO_ADDR
// uc_nation := 1 ;
 564: LD_ADDR_OWVAR 21
 568: PUSH
 569: LD_INT 1
 571: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
 572: LD_INT 0
 574: PPUSH
 575: LD_INT 1
 577: PPUSH
 578: CALL_OW 381
// for _r := 1 to 6 do
 582: LD_ADDR_VAR 0 4
 586: PUSH
 587: DOUBLE
 588: LD_INT 1
 590: DEC
 591: ST_TO_ADDR
 592: LD_INT 6
 594: PUSH
 595: FOR_TO
 596: IFFALSE 748
// begin for _x := - _r to _r do
 598: LD_ADDR_VAR 0 5
 602: PUSH
 603: DOUBLE
 604: LD_VAR 0 4
 608: NEG
 609: DEC
 610: ST_TO_ADDR
 611: LD_VAR 0 4
 615: PUSH
 616: FOR_TO
 617: IFFALSE 744
// for _y := - _r to _r do
 619: LD_ADDR_VAR 0 6
 623: PUSH
 624: DOUBLE
 625: LD_VAR 0 4
 629: NEG
 630: DEC
 631: ST_TO_ADDR
 632: LD_VAR 0 4
 636: PUSH
 637: FOR_TO
 638: IFFALSE 740
// begin __x := x + _x ;
 640: LD_ADDR_VAR 0 8
 644: PUSH
 645: LD_VAR 0 2
 649: PUSH
 650: LD_VAR 0 5
 654: PLUS
 655: ST_TO_ADDR
// __y := y + _y ;
 656: LD_ADDR_VAR 0 9
 660: PUSH
 661: LD_VAR 0 3
 665: PUSH
 666: LD_VAR 0 6
 670: PLUS
 671: ST_TO_ADDR
// if HexInfo ( __x , __y ) then
 672: LD_VAR 0 8
 676: PPUSH
 677: LD_VAR 0 9
 681: PPUSH
 682: CALL_OW 428
 686: IFFALSE 690
// continue ;
 688: GO 637
// wait ( 1 ) ;
 690: LD_INT 1
 692: PPUSH
 693: CALL_OW 67
// un := CreateHuman ;
 697: LD_ADDR_VAR 0 1
 701: PUSH
 702: CALL_OW 44
 706: ST_TO_ADDR
// PlaceUnitXY ( un , __x , __y , false ) ;
 707: LD_VAR 0 1
 711: PPUSH
 712: LD_VAR 0 8
 716: PPUSH
 717: LD_VAR 0 9
 721: PPUSH
 722: LD_INT 0
 724: PPUSH
 725: CALL_OW 48
// ComHold ( un ) ;
 729: LD_VAR 0 1
 733: PPUSH
 734: CALL_OW 140
// end ;
 738: GO 637
 740: POP
 741: POP
 742: GO 616
 744: POP
 745: POP
// end ;
 746: GO 595
 748: POP
 749: POP
// end ;
 750: PPOPN 9
 752: END
// export function PrepareAmericanConvoy ( soldiersAmount , engsAmount , mechsAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road , sols , engs , mechs , scis , enemySkillLevel , amConvoyTroops ; begin
 753: LD_INT 0
 755: PPUSH
 756: PPUSH
 757: PPUSH
 758: PPUSH
 759: PPUSH
 760: PPUSH
 761: PPUSH
 762: PPUSH
 763: PPUSH
 764: PPUSH
 765: PPUSH
// enemySkilllevel := 2 ;
 766: LD_ADDR_VAR 0 16
 770: PUSH
 771: LD_INT 2
 773: ST_TO_ADDR
// uc_side := 1 ;
 774: LD_ADDR_OWVAR 20
 778: PUSH
 779: LD_INT 1
 781: ST_TO_ADDR
// uc_nation := 1 ;
 782: LD_ADDR_OWVAR 21
 786: PUSH
 787: LD_INT 1
 789: ST_TO_ADDR
// hc_name :=  ;
 790: LD_ADDR_OWVAR 26
 794: PUSH
 795: LD_STRING 
 797: ST_TO_ADDR
// hc_gallery :=  ;
 798: LD_ADDR_OWVAR 33
 802: PUSH
 803: LD_STRING 
 805: ST_TO_ADDR
// for i := 1 to soldiersAmount do
 806: LD_ADDR_VAR 0 8
 810: PUSH
 811: DOUBLE
 812: LD_INT 1
 814: DEC
 815: ST_TO_ADDR
 816: LD_VAR 0 1
 820: PUSH
 821: FOR_TO
 822: IFFALSE 897
// begin PrepareSoldier ( false , enemySkillLevel ) ;
 824: LD_INT 0
 826: PPUSH
 827: LD_VAR 0 16
 831: PPUSH
 832: CALL_OW 381
// un = CreateHuman ;
 836: LD_ADDR_VAR 0 9
 840: PUSH
 841: CALL_OW 44
 845: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 846: LD_ADDR_VAR 0 17
 850: PUSH
 851: LD_VAR 0 17
 855: PUSH
 856: LD_VAR 0 9
 860: ADD
 861: ST_TO_ADDR
// sols := sols ^ un ;
 862: LD_ADDR_VAR 0 12
 866: PUSH
 867: LD_VAR 0 12
 871: PUSH
 872: LD_VAR 0 9
 876: ADD
 877: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 878: LD_VAR 0 9
 882: PPUSH
 883: LD_VAR 0 6
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 49
// end ;
 895: GO 821
 897: POP
 898: POP
// for i := 1 to engsAmount do
 899: LD_ADDR_VAR 0 8
 903: PUSH
 904: DOUBLE
 905: LD_INT 1
 907: DEC
 908: ST_TO_ADDR
 909: LD_VAR 0 2
 913: PUSH
 914: FOR_TO
 915: IFFALSE 990
// begin PrepareEngineer ( false , enemySkillLevel ) ;
 917: LD_INT 0
 919: PPUSH
 920: LD_VAR 0 16
 924: PPUSH
 925: CALL_OW 382
// un = CreateHuman ;
 929: LD_ADDR_VAR 0 9
 933: PUSH
 934: CALL_OW 44
 938: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 939: LD_ADDR_VAR 0 17
 943: PUSH
 944: LD_VAR 0 17
 948: PUSH
 949: LD_VAR 0 9
 953: ADD
 954: ST_TO_ADDR
// engs := engs ^ un ;
 955: LD_ADDR_VAR 0 13
 959: PUSH
 960: LD_VAR 0 13
 964: PUSH
 965: LD_VAR 0 9
 969: ADD
 970: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 971: LD_VAR 0 9
 975: PPUSH
 976: LD_VAR 0 6
 980: PPUSH
 981: LD_INT 0
 983: PPUSH
 984: CALL_OW 49
// end ;
 988: GO 914
 990: POP
 991: POP
// for i := 1 to mechsAmount do
 992: LD_ADDR_VAR 0 8
 996: PUSH
 997: DOUBLE
 998: LD_INT 1
1000: DEC
1001: ST_TO_ADDR
1002: LD_VAR 0 3
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1083
// begin PrepareEngineer ( false , enemySkillLevel ) ;
1010: LD_INT 0
1012: PPUSH
1013: LD_VAR 0 16
1017: PPUSH
1018: CALL_OW 382
// un = CreateHuman ;
1022: LD_ADDR_VAR 0 9
1026: PUSH
1027: CALL_OW 44
1031: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
1032: LD_ADDR_VAR 0 17
1036: PUSH
1037: LD_VAR 0 17
1041: PUSH
1042: LD_VAR 0 9
1046: ADD
1047: ST_TO_ADDR
// engs := engs ^ un ;
1048: LD_ADDR_VAR 0 13
1052: PUSH
1053: LD_VAR 0 13
1057: PUSH
1058: LD_VAR 0 9
1062: ADD
1063: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1064: LD_VAR 0 9
1068: PPUSH
1069: LD_VAR 0 6
1073: PPUSH
1074: LD_INT 0
1076: PPUSH
1077: CALL_OW 49
// end ;
1081: GO 1007
1083: POP
1084: POP
// for i := 1 to scientistsAmount do
1085: LD_ADDR_VAR 0 8
1089: PUSH
1090: DOUBLE
1091: LD_INT 1
1093: DEC
1094: ST_TO_ADDR
1095: LD_VAR 0 4
1099: PUSH
1100: FOR_TO
1101: IFFALSE 1176
// begin PrepareMechanic ( false , enemySkillLevel ) ;
1103: LD_INT 0
1105: PPUSH
1106: LD_VAR 0 16
1110: PPUSH
1111: CALL_OW 383
// un = CreateHuman ;
1115: LD_ADDR_VAR 0 9
1119: PUSH
1120: CALL_OW 44
1124: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
1125: LD_ADDR_VAR 0 17
1129: PUSH
1130: LD_VAR 0 17
1134: PUSH
1135: LD_VAR 0 9
1139: ADD
1140: ST_TO_ADDR
// mechs := mechs ^ un ;
1141: LD_ADDR_VAR 0 14
1145: PUSH
1146: LD_VAR 0 14
1150: PUSH
1151: LD_VAR 0 9
1155: ADD
1156: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1157: LD_VAR 0 9
1161: PPUSH
1162: LD_VAR 0 6
1166: PPUSH
1167: LD_INT 0
1169: PPUSH
1170: CALL_OW 49
// end ;
1174: GO 1100
1176: POP
1177: POP
// for i := 1 to vehiclesAmount do
1178: LD_ADDR_VAR 0 8
1182: PUSH
1183: DOUBLE
1184: LD_INT 1
1186: DEC
1187: ST_TO_ADDR
1188: LD_VAR 0 5
1192: PUSH
1193: FOR_TO
1194: IFFALSE 1360
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
1196: LD_ADDR_OWVAR 40
1200: PUSH
1201: LD_INT 2
1203: PUSH
1204: LD_INT 4
1206: PUSH
1207: LD_INT 3
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: PUSH
1215: LD_INT 1
1217: PPUSH
1218: LD_INT 3
1220: PPUSH
1221: CALL_OW 12
1225: ARRAY
1226: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1227: LD_ADDR_OWVAR 37
1231: PUSH
1232: LD_INT 3
1234: ST_TO_ADDR
// vc_control = control_manual ;
1235: LD_ADDR_OWVAR 38
1239: PUSH
1240: LD_INT 1
1242: ST_TO_ADDR
// vc_engine = engine_combustion ;
1243: LD_ADDR_OWVAR 39
1247: PUSH
1248: LD_INT 1
1250: ST_TO_ADDR
// veh = CreateVehicle ;
1251: LD_ADDR_VAR 0 10
1255: PUSH
1256: CALL_OW 45
1260: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ veh ;
1261: LD_ADDR_VAR 0 17
1265: PUSH
1266: LD_VAR 0 17
1270: PUSH
1271: LD_VAR 0 10
1275: ADD
1276: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
1277: LD_VAR 0 10
1281: PPUSH
1282: LD_VAR 0 6
1286: PPUSH
1287: LD_INT 0
1289: PPUSH
1290: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
1294: LD_INT 0
1296: PPUSH
1297: LD_VAR 0 16
1301: PPUSH
1302: CALL_OW 383
// un = CreateHuman ;
1306: LD_ADDR_VAR 0 9
1310: PUSH
1311: CALL_OW 44
1315: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ un ;
1316: LD_ADDR_VAR 0 17
1320: PUSH
1321: LD_VAR 0 17
1325: PUSH
1326: LD_VAR 0 9
1330: ADD
1331: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1332: LD_VAR 0 9
1336: PPUSH
1337: LD_VAR 0 10
1341: PPUSH
1342: CALL_OW 52
// SetFuel ( veh , 100 ) ;
1346: LD_VAR 0 10
1350: PPUSH
1351: LD_INT 100
1353: PPUSH
1354: CALL_OW 240
// end ;
1358: GO 1193
1360: POP
1361: POP
// end ; end_of_file
1362: LD_VAR 0 7
1366: RET
// every 0 0$1 do
1367: GO 1369
1369: DISABLE
// begin enable ;
1370: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1371: LD_STRING updateTimer(
1373: PUSH
1374: LD_OWVAR 1
1378: STR
1379: PUSH
1380: LD_STRING );
1382: STR
1383: PPUSH
1384: CALL_OW 559
// end ;
1388: END
// export function SOS_MapStart ( ) ; begin
1389: LD_INT 0
1391: PPUSH
// if streamModeActive then
1392: LD_EXP 2
1396: IFFALSE 1405
// DefineStreamItems ( true ) ;
1398: LD_INT 1
1400: PPUSH
1401: CALL 3059 0 1
// UpdateFactoryWaypoints ( ) ;
1405: CALL 15920 0 0
// UpdateWarehouseGatheringPoints ( ) ;
1409: CALL 16177 0 0
// end ;
1413: LD_VAR 0 1
1417: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
1418: LD_INT 0
1420: PPUSH
// if p2 = hack_mode then
1421: LD_VAR 0 2
1425: PUSH
1426: LD_INT 100
1428: EQUAL
1429: IFFALSE 2432
// begin if not StreamModeActive then
1431: LD_EXP 2
1435: NOT
1436: IFFALSE 1446
// StreamModeActive := true ;
1438: LD_ADDR_EXP 2
1442: PUSH
1443: LD_INT 1
1445: ST_TO_ADDR
// if p3 = 0 then
1446: LD_VAR 0 3
1450: PUSH
1451: LD_INT 0
1453: EQUAL
1454: IFFALSE 1460
// InitStreamMode ;
1456: CALL 2595 0 0
// if p3 = 1 then
1460: LD_VAR 0 3
1464: PUSH
1465: LD_INT 1
1467: EQUAL
1468: IFFALSE 1478
// sRocket := true ;
1470: LD_ADDR_EXP 7
1474: PUSH
1475: LD_INT 1
1477: ST_TO_ADDR
// if p3 = 2 then
1478: LD_VAR 0 3
1482: PUSH
1483: LD_INT 2
1485: EQUAL
1486: IFFALSE 1496
// sSpeed := true ;
1488: LD_ADDR_EXP 6
1492: PUSH
1493: LD_INT 1
1495: ST_TO_ADDR
// if p3 = 3 then
1496: LD_VAR 0 3
1500: PUSH
1501: LD_INT 3
1503: EQUAL
1504: IFFALSE 1514
// sEngine := true ;
1506: LD_ADDR_EXP 8
1510: PUSH
1511: LD_INT 1
1513: ST_TO_ADDR
// if p3 = 4 then
1514: LD_VAR 0 3
1518: PUSH
1519: LD_INT 4
1521: EQUAL
1522: IFFALSE 1532
// sSpec := true ;
1524: LD_ADDR_EXP 5
1528: PUSH
1529: LD_INT 1
1531: ST_TO_ADDR
// if p3 = 5 then
1532: LD_VAR 0 3
1536: PUSH
1537: LD_INT 5
1539: EQUAL
1540: IFFALSE 1550
// sLevel := true ;
1542: LD_ADDR_EXP 9
1546: PUSH
1547: LD_INT 1
1549: ST_TO_ADDR
// if p3 = 6 then
1550: LD_VAR 0 3
1554: PUSH
1555: LD_INT 6
1557: EQUAL
1558: IFFALSE 1568
// sArmoury := true ;
1560: LD_ADDR_EXP 10
1564: PUSH
1565: LD_INT 1
1567: ST_TO_ADDR
// if p3 = 7 then
1568: LD_VAR 0 3
1572: PUSH
1573: LD_INT 7
1575: EQUAL
1576: IFFALSE 1586
// sRadar := true ;
1578: LD_ADDR_EXP 11
1582: PUSH
1583: LD_INT 1
1585: ST_TO_ADDR
// if p3 = 8 then
1586: LD_VAR 0 3
1590: PUSH
1591: LD_INT 8
1593: EQUAL
1594: IFFALSE 1604
// sBunker := true ;
1596: LD_ADDR_EXP 12
1600: PUSH
1601: LD_INT 1
1603: ST_TO_ADDR
// if p3 = 9 then
1604: LD_VAR 0 3
1608: PUSH
1609: LD_INT 9
1611: EQUAL
1612: IFFALSE 1622
// sHack := true ;
1614: LD_ADDR_EXP 13
1618: PUSH
1619: LD_INT 1
1621: ST_TO_ADDR
// if p3 = 10 then
1622: LD_VAR 0 3
1626: PUSH
1627: LD_INT 10
1629: EQUAL
1630: IFFALSE 1640
// sFire := true ;
1632: LD_ADDR_EXP 14
1636: PUSH
1637: LD_INT 1
1639: ST_TO_ADDR
// if p3 = 11 then
1640: LD_VAR 0 3
1644: PUSH
1645: LD_INT 11
1647: EQUAL
1648: IFFALSE 1658
// sRefresh := true ;
1650: LD_ADDR_EXP 15
1654: PUSH
1655: LD_INT 1
1657: ST_TO_ADDR
// if p3 = 12 then
1658: LD_VAR 0 3
1662: PUSH
1663: LD_INT 12
1665: EQUAL
1666: IFFALSE 1676
// sExp := true ;
1668: LD_ADDR_EXP 16
1672: PUSH
1673: LD_INT 1
1675: ST_TO_ADDR
// if p3 = 13 then
1676: LD_VAR 0 3
1680: PUSH
1681: LD_INT 13
1683: EQUAL
1684: IFFALSE 1694
// sDepot := true ;
1686: LD_ADDR_EXP 17
1690: PUSH
1691: LD_INT 1
1693: ST_TO_ADDR
// if p3 = 14 then
1694: LD_VAR 0 3
1698: PUSH
1699: LD_INT 14
1701: EQUAL
1702: IFFALSE 1712
// sFlag := true ;
1704: LD_ADDR_EXP 18
1708: PUSH
1709: LD_INT 1
1711: ST_TO_ADDR
// if p3 = 15 then
1712: LD_VAR 0 3
1716: PUSH
1717: LD_INT 15
1719: EQUAL
1720: IFFALSE 1730
// sKamikadze := true ;
1722: LD_ADDR_EXP 26
1726: PUSH
1727: LD_INT 1
1729: ST_TO_ADDR
// if p3 = 16 then
1730: LD_VAR 0 3
1734: PUSH
1735: LD_INT 16
1737: EQUAL
1738: IFFALSE 1748
// sTroll := true ;
1740: LD_ADDR_EXP 27
1744: PUSH
1745: LD_INT 1
1747: ST_TO_ADDR
// if p3 = 17 then
1748: LD_VAR 0 3
1752: PUSH
1753: LD_INT 17
1755: EQUAL
1756: IFFALSE 1766
// sSlow := true ;
1758: LD_ADDR_EXP 28
1762: PUSH
1763: LD_INT 1
1765: ST_TO_ADDR
// if p3 = 18 then
1766: LD_VAR 0 3
1770: PUSH
1771: LD_INT 18
1773: EQUAL
1774: IFFALSE 1784
// sLack := true ;
1776: LD_ADDR_EXP 29
1780: PUSH
1781: LD_INT 1
1783: ST_TO_ADDR
// if p3 = 19 then
1784: LD_VAR 0 3
1788: PUSH
1789: LD_INT 19
1791: EQUAL
1792: IFFALSE 1802
// sTank := true ;
1794: LD_ADDR_EXP 31
1798: PUSH
1799: LD_INT 1
1801: ST_TO_ADDR
// if p3 = 20 then
1802: LD_VAR 0 3
1806: PUSH
1807: LD_INT 20
1809: EQUAL
1810: IFFALSE 1820
// sRemote := true ;
1812: LD_ADDR_EXP 32
1816: PUSH
1817: LD_INT 1
1819: ST_TO_ADDR
// if p3 = 21 then
1820: LD_VAR 0 3
1824: PUSH
1825: LD_INT 21
1827: EQUAL
1828: IFFALSE 1838
// sPowell := true ;
1830: LD_ADDR_EXP 33
1834: PUSH
1835: LD_INT 1
1837: ST_TO_ADDR
// if p3 = 22 then
1838: LD_VAR 0 3
1842: PUSH
1843: LD_INT 22
1845: EQUAL
1846: IFFALSE 1856
// sTeleport := true ;
1848: LD_ADDR_EXP 36
1852: PUSH
1853: LD_INT 1
1855: ST_TO_ADDR
// if p3 = 23 then
1856: LD_VAR 0 3
1860: PUSH
1861: LD_INT 23
1863: EQUAL
1864: IFFALSE 1874
// sOilTower := true ;
1866: LD_ADDR_EXP 38
1870: PUSH
1871: LD_INT 1
1873: ST_TO_ADDR
// if p3 = 24 then
1874: LD_VAR 0 3
1878: PUSH
1879: LD_INT 24
1881: EQUAL
1882: IFFALSE 1892
// sShovel := true ;
1884: LD_ADDR_EXP 39
1888: PUSH
1889: LD_INT 1
1891: ST_TO_ADDR
// if p3 = 25 then
1892: LD_VAR 0 3
1896: PUSH
1897: LD_INT 25
1899: EQUAL
1900: IFFALSE 1910
// sSheik := true ;
1902: LD_ADDR_EXP 40
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// if p3 = 26 then
1910: LD_VAR 0 3
1914: PUSH
1915: LD_INT 26
1917: EQUAL
1918: IFFALSE 1928
// sEarthquake := true ;
1920: LD_ADDR_EXP 42
1924: PUSH
1925: LD_INT 1
1927: ST_TO_ADDR
// if p3 = 27 then
1928: LD_VAR 0 3
1932: PUSH
1933: LD_INT 27
1935: EQUAL
1936: IFFALSE 1946
// sAI := true ;
1938: LD_ADDR_EXP 43
1942: PUSH
1943: LD_INT 1
1945: ST_TO_ADDR
// if p3 = 28 then
1946: LD_VAR 0 3
1950: PUSH
1951: LD_INT 28
1953: EQUAL
1954: IFFALSE 1964
// sCargo := true ;
1956: LD_ADDR_EXP 46
1960: PUSH
1961: LD_INT 1
1963: ST_TO_ADDR
// if p3 = 29 then
1964: LD_VAR 0 3
1968: PUSH
1969: LD_INT 29
1971: EQUAL
1972: IFFALSE 1982
// sDLaser := true ;
1974: LD_ADDR_EXP 47
1978: PUSH
1979: LD_INT 1
1981: ST_TO_ADDR
// if p3 = 30 then
1982: LD_VAR 0 3
1986: PUSH
1987: LD_INT 30
1989: EQUAL
1990: IFFALSE 2000
// sExchange := true ;
1992: LD_ADDR_EXP 48
1996: PUSH
1997: LD_INT 1
1999: ST_TO_ADDR
// if p3 = 31 then
2000: LD_VAR 0 3
2004: PUSH
2005: LD_INT 31
2007: EQUAL
2008: IFFALSE 2018
// sFac := true ;
2010: LD_ADDR_EXP 49
2014: PUSH
2015: LD_INT 1
2017: ST_TO_ADDR
// if p3 = 32 then
2018: LD_VAR 0 3
2022: PUSH
2023: LD_INT 32
2025: EQUAL
2026: IFFALSE 2036
// sPower := true ;
2028: LD_ADDR_EXP 50
2032: PUSH
2033: LD_INT 1
2035: ST_TO_ADDR
// if p3 = 33 then
2036: LD_VAR 0 3
2040: PUSH
2041: LD_INT 33
2043: EQUAL
2044: IFFALSE 2054
// sRandom := true ;
2046: LD_ADDR_EXP 51
2050: PUSH
2051: LD_INT 1
2053: ST_TO_ADDR
// if p3 = 34 then
2054: LD_VAR 0 3
2058: PUSH
2059: LD_INT 34
2061: EQUAL
2062: IFFALSE 2072
// sShield := true ;
2064: LD_ADDR_EXP 52
2068: PUSH
2069: LD_INT 1
2071: ST_TO_ADDR
// if p3 = 35 then
2072: LD_VAR 0 3
2076: PUSH
2077: LD_INT 35
2079: EQUAL
2080: IFFALSE 2090
// sTime := true ;
2082: LD_ADDR_EXP 53
2086: PUSH
2087: LD_INT 1
2089: ST_TO_ADDR
// if p3 = 36 then
2090: LD_VAR 0 3
2094: PUSH
2095: LD_INT 36
2097: EQUAL
2098: IFFALSE 2108
// sTools := true ;
2100: LD_ADDR_EXP 54
2104: PUSH
2105: LD_INT 1
2107: ST_TO_ADDR
// if p3 = 101 then
2108: LD_VAR 0 3
2112: PUSH
2113: LD_INT 101
2115: EQUAL
2116: IFFALSE 2126
// sSold := true ;
2118: LD_ADDR_EXP 19
2122: PUSH
2123: LD_INT 1
2125: ST_TO_ADDR
// if p3 = 102 then
2126: LD_VAR 0 3
2130: PUSH
2131: LD_INT 102
2133: EQUAL
2134: IFFALSE 2144
// sDiff := true ;
2136: LD_ADDR_EXP 20
2140: PUSH
2141: LD_INT 1
2143: ST_TO_ADDR
// if p3 = 103 then
2144: LD_VAR 0 3
2148: PUSH
2149: LD_INT 103
2151: EQUAL
2152: IFFALSE 2162
// sFog := true ;
2154: LD_ADDR_EXP 23
2158: PUSH
2159: LD_INT 1
2161: ST_TO_ADDR
// if p3 = 104 then
2162: LD_VAR 0 3
2166: PUSH
2167: LD_INT 104
2169: EQUAL
2170: IFFALSE 2180
// sReset := true ;
2172: LD_ADDR_EXP 24
2176: PUSH
2177: LD_INT 1
2179: ST_TO_ADDR
// if p3 = 105 then
2180: LD_VAR 0 3
2184: PUSH
2185: LD_INT 105
2187: EQUAL
2188: IFFALSE 2198
// sSun := true ;
2190: LD_ADDR_EXP 25
2194: PUSH
2195: LD_INT 1
2197: ST_TO_ADDR
// if p3 = 106 then
2198: LD_VAR 0 3
2202: PUSH
2203: LD_INT 106
2205: EQUAL
2206: IFFALSE 2216
// sTiger := true ;
2208: LD_ADDR_EXP 21
2212: PUSH
2213: LD_INT 1
2215: ST_TO_ADDR
// if p3 = 107 then
2216: LD_VAR 0 3
2220: PUSH
2221: LD_INT 107
2223: EQUAL
2224: IFFALSE 2234
// sBomb := true ;
2226: LD_ADDR_EXP 22
2230: PUSH
2231: LD_INT 1
2233: ST_TO_ADDR
// if p3 = 108 then
2234: LD_VAR 0 3
2238: PUSH
2239: LD_INT 108
2241: EQUAL
2242: IFFALSE 2252
// sWound := true ;
2244: LD_ADDR_EXP 30
2248: PUSH
2249: LD_INT 1
2251: ST_TO_ADDR
// if p3 = 109 then
2252: LD_VAR 0 3
2256: PUSH
2257: LD_INT 109
2259: EQUAL
2260: IFFALSE 2270
// sBetray := true ;
2262: LD_ADDR_EXP 34
2266: PUSH
2267: LD_INT 1
2269: ST_TO_ADDR
// if p3 = 110 then
2270: LD_VAR 0 3
2274: PUSH
2275: LD_INT 110
2277: EQUAL
2278: IFFALSE 2288
// sContamin := true ;
2280: LD_ADDR_EXP 35
2284: PUSH
2285: LD_INT 1
2287: ST_TO_ADDR
// if p3 = 111 then
2288: LD_VAR 0 3
2292: PUSH
2293: LD_INT 111
2295: EQUAL
2296: IFFALSE 2306
// sOil := true ;
2298: LD_ADDR_EXP 37
2302: PUSH
2303: LD_INT 1
2305: ST_TO_ADDR
// if p3 = 112 then
2306: LD_VAR 0 3
2310: PUSH
2311: LD_INT 112
2313: EQUAL
2314: IFFALSE 2324
// sStu := true ;
2316: LD_ADDR_EXP 41
2320: PUSH
2321: LD_INT 1
2323: ST_TO_ADDR
// if p3 = 113 then
2324: LD_VAR 0 3
2328: PUSH
2329: LD_INT 113
2331: EQUAL
2332: IFFALSE 2342
// sBazooka := true ;
2334: LD_ADDR_EXP 44
2338: PUSH
2339: LD_INT 1
2341: ST_TO_ADDR
// if p3 = 114 then
2342: LD_VAR 0 3
2346: PUSH
2347: LD_INT 114
2349: EQUAL
2350: IFFALSE 2360
// sMortar := true ;
2352: LD_ADDR_EXP 45
2356: PUSH
2357: LD_INT 1
2359: ST_TO_ADDR
// if p3 = 115 then
2360: LD_VAR 0 3
2364: PUSH
2365: LD_INT 115
2367: EQUAL
2368: IFFALSE 2378
// sRanger := true ;
2370: LD_ADDR_EXP 55
2374: PUSH
2375: LD_INT 1
2377: ST_TO_ADDR
// if p3 = 116 then
2378: LD_VAR 0 3
2382: PUSH
2383: LD_INT 116
2385: EQUAL
2386: IFFALSE 2396
// sComputer := true ;
2388: LD_ADDR_EXP 56
2392: PUSH
2393: LD_INT 1
2395: ST_TO_ADDR
// if p3 = 117 then
2396: LD_VAR 0 3
2400: PUSH
2401: LD_INT 117
2403: EQUAL
2404: IFFALSE 2414
// s30 := true ;
2406: LD_ADDR_EXP 57
2410: PUSH
2411: LD_INT 1
2413: ST_TO_ADDR
// if p3 = 118 then
2414: LD_VAR 0 3
2418: PUSH
2419: LD_INT 118
2421: EQUAL
2422: IFFALSE 2432
// s60 := true ;
2424: LD_ADDR_EXP 58
2428: PUSH
2429: LD_INT 1
2431: ST_TO_ADDR
// end ; if p2 = stream_mode then
2432: LD_VAR 0 2
2436: PUSH
2437: LD_INT 101
2439: EQUAL
2440: IFFALSE 2568
// begin case p3 of 1 :
2442: LD_VAR 0 3
2446: PUSH
2447: LD_INT 1
2449: DOUBLE
2450: EQUAL
2451: IFTRUE 2455
2453: GO 2462
2455: POP
// hHackUnlimitedResources ; 2 :
2456: CALL 14666 0 0
2460: GO 2568
2462: LD_INT 2
2464: DOUBLE
2465: EQUAL
2466: IFTRUE 2470
2468: GO 2477
2470: POP
// hHackSetLevel10 ; 3 :
2471: CALL 14799 0 0
2475: GO 2568
2477: LD_INT 3
2479: DOUBLE
2480: EQUAL
2481: IFTRUE 2485
2483: GO 2492
2485: POP
// hHackSetLevel10YourUnits ; 4 :
2486: CALL 14884 0 0
2490: GO 2568
2492: LD_INT 4
2494: DOUBLE
2495: EQUAL
2496: IFTRUE 2500
2498: GO 2507
2500: POP
// hHackInvincible ; 5 :
2501: CALL 15332 0 0
2505: GO 2568
2507: LD_INT 5
2509: DOUBLE
2510: EQUAL
2511: IFTRUE 2515
2513: GO 2522
2515: POP
// hHackInvisible ; 6 :
2516: CALL 15443 0 0
2520: GO 2568
2522: LD_INT 6
2524: DOUBLE
2525: EQUAL
2526: IFTRUE 2530
2528: GO 2537
2530: POP
// hHackChangeYourSide ; 7 :
2531: CALL 15500 0 0
2535: GO 2568
2537: LD_INT 7
2539: DOUBLE
2540: EQUAL
2541: IFTRUE 2545
2543: GO 2552
2545: POP
// hHackChangeUnitSide ; 8 :
2546: CALL 15542 0 0
2550: GO 2568
2552: LD_INT 8
2554: DOUBLE
2555: EQUAL
2556: IFTRUE 2560
2558: GO 2567
2560: POP
// hHackFog ; end ;
2561: CALL 15643 0 0
2565: GO 2568
2567: POP
// end ; end ;
2568: LD_VAR 0 7
2572: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
2573: GO 2575
2575: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
2576: LD_STRING initStreamRollete();
2578: PPUSH
2579: CALL_OW 559
// InitStreamMode ;
2583: CALL 2595 0 0
// DefineStreamItems ( false ) ;
2587: LD_INT 0
2589: PPUSH
2590: CALL 3059 0 1
// end ;
2594: END
// function InitStreamMode ; begin
2595: LD_INT 0
2597: PPUSH
// streamModeActive := false ;
2598: LD_ADDR_EXP 2
2602: PUSH
2603: LD_INT 0
2605: ST_TO_ADDR
// normalCounter := 36 ;
2606: LD_ADDR_EXP 3
2610: PUSH
2611: LD_INT 36
2613: ST_TO_ADDR
// hardcoreCounter := 18 ;
2614: LD_ADDR_EXP 4
2618: PUSH
2619: LD_INT 18
2621: ST_TO_ADDR
// sRocket := false ;
2622: LD_ADDR_EXP 7
2626: PUSH
2627: LD_INT 0
2629: ST_TO_ADDR
// sSpeed := false ;
2630: LD_ADDR_EXP 6
2634: PUSH
2635: LD_INT 0
2637: ST_TO_ADDR
// sEngine := false ;
2638: LD_ADDR_EXP 8
2642: PUSH
2643: LD_INT 0
2645: ST_TO_ADDR
// sSpec := false ;
2646: LD_ADDR_EXP 5
2650: PUSH
2651: LD_INT 0
2653: ST_TO_ADDR
// sLevel := false ;
2654: LD_ADDR_EXP 9
2658: PUSH
2659: LD_INT 0
2661: ST_TO_ADDR
// sArmoury := false ;
2662: LD_ADDR_EXP 10
2666: PUSH
2667: LD_INT 0
2669: ST_TO_ADDR
// sRadar := false ;
2670: LD_ADDR_EXP 11
2674: PUSH
2675: LD_INT 0
2677: ST_TO_ADDR
// sBunker := false ;
2678: LD_ADDR_EXP 12
2682: PUSH
2683: LD_INT 0
2685: ST_TO_ADDR
// sHack := false ;
2686: LD_ADDR_EXP 13
2690: PUSH
2691: LD_INT 0
2693: ST_TO_ADDR
// sFire := false ;
2694: LD_ADDR_EXP 14
2698: PUSH
2699: LD_INT 0
2701: ST_TO_ADDR
// sRefresh := false ;
2702: LD_ADDR_EXP 15
2706: PUSH
2707: LD_INT 0
2709: ST_TO_ADDR
// sExp := false ;
2710: LD_ADDR_EXP 16
2714: PUSH
2715: LD_INT 0
2717: ST_TO_ADDR
// sDepot := false ;
2718: LD_ADDR_EXP 17
2722: PUSH
2723: LD_INT 0
2725: ST_TO_ADDR
// sFlag := false ;
2726: LD_ADDR_EXP 18
2730: PUSH
2731: LD_INT 0
2733: ST_TO_ADDR
// sKamikadze := false ;
2734: LD_ADDR_EXP 26
2738: PUSH
2739: LD_INT 0
2741: ST_TO_ADDR
// sTroll := false ;
2742: LD_ADDR_EXP 27
2746: PUSH
2747: LD_INT 0
2749: ST_TO_ADDR
// sSlow := false ;
2750: LD_ADDR_EXP 28
2754: PUSH
2755: LD_INT 0
2757: ST_TO_ADDR
// sLack := false ;
2758: LD_ADDR_EXP 29
2762: PUSH
2763: LD_INT 0
2765: ST_TO_ADDR
// sTank := false ;
2766: LD_ADDR_EXP 31
2770: PUSH
2771: LD_INT 0
2773: ST_TO_ADDR
// sRemote := false ;
2774: LD_ADDR_EXP 32
2778: PUSH
2779: LD_INT 0
2781: ST_TO_ADDR
// sPowell := false ;
2782: LD_ADDR_EXP 33
2786: PUSH
2787: LD_INT 0
2789: ST_TO_ADDR
// sTeleport := false ;
2790: LD_ADDR_EXP 36
2794: PUSH
2795: LD_INT 0
2797: ST_TO_ADDR
// sOilTower := false ;
2798: LD_ADDR_EXP 38
2802: PUSH
2803: LD_INT 0
2805: ST_TO_ADDR
// sShovel := false ;
2806: LD_ADDR_EXP 39
2810: PUSH
2811: LD_INT 0
2813: ST_TO_ADDR
// sSheik := false ;
2814: LD_ADDR_EXP 40
2818: PUSH
2819: LD_INT 0
2821: ST_TO_ADDR
// sEarthquake := false ;
2822: LD_ADDR_EXP 42
2826: PUSH
2827: LD_INT 0
2829: ST_TO_ADDR
// sAI := false ;
2830: LD_ADDR_EXP 43
2834: PUSH
2835: LD_INT 0
2837: ST_TO_ADDR
// sCargo := false ;
2838: LD_ADDR_EXP 46
2842: PUSH
2843: LD_INT 0
2845: ST_TO_ADDR
// sDLaser := false ;
2846: LD_ADDR_EXP 47
2850: PUSH
2851: LD_INT 0
2853: ST_TO_ADDR
// sExchange := false ;
2854: LD_ADDR_EXP 48
2858: PUSH
2859: LD_INT 0
2861: ST_TO_ADDR
// sFac := false ;
2862: LD_ADDR_EXP 49
2866: PUSH
2867: LD_INT 0
2869: ST_TO_ADDR
// sPower := false ;
2870: LD_ADDR_EXP 50
2874: PUSH
2875: LD_INT 0
2877: ST_TO_ADDR
// sRandom := false ;
2878: LD_ADDR_EXP 51
2882: PUSH
2883: LD_INT 0
2885: ST_TO_ADDR
// sShield := false ;
2886: LD_ADDR_EXP 52
2890: PUSH
2891: LD_INT 0
2893: ST_TO_ADDR
// sTime := false ;
2894: LD_ADDR_EXP 53
2898: PUSH
2899: LD_INT 0
2901: ST_TO_ADDR
// sTools := false ;
2902: LD_ADDR_EXP 54
2906: PUSH
2907: LD_INT 0
2909: ST_TO_ADDR
// sSold := false ;
2910: LD_ADDR_EXP 19
2914: PUSH
2915: LD_INT 0
2917: ST_TO_ADDR
// sDiff := false ;
2918: LD_ADDR_EXP 20
2922: PUSH
2923: LD_INT 0
2925: ST_TO_ADDR
// sFog := false ;
2926: LD_ADDR_EXP 23
2930: PUSH
2931: LD_INT 0
2933: ST_TO_ADDR
// sReset := false ;
2934: LD_ADDR_EXP 24
2938: PUSH
2939: LD_INT 0
2941: ST_TO_ADDR
// sSun := false ;
2942: LD_ADDR_EXP 25
2946: PUSH
2947: LD_INT 0
2949: ST_TO_ADDR
// sTiger := false ;
2950: LD_ADDR_EXP 21
2954: PUSH
2955: LD_INT 0
2957: ST_TO_ADDR
// sBomb := false ;
2958: LD_ADDR_EXP 22
2962: PUSH
2963: LD_INT 0
2965: ST_TO_ADDR
// sWound := false ;
2966: LD_ADDR_EXP 30
2970: PUSH
2971: LD_INT 0
2973: ST_TO_ADDR
// sBetray := false ;
2974: LD_ADDR_EXP 34
2978: PUSH
2979: LD_INT 0
2981: ST_TO_ADDR
// sContamin := false ;
2982: LD_ADDR_EXP 35
2986: PUSH
2987: LD_INT 0
2989: ST_TO_ADDR
// sOil := false ;
2990: LD_ADDR_EXP 37
2994: PUSH
2995: LD_INT 0
2997: ST_TO_ADDR
// sStu := false ;
2998: LD_ADDR_EXP 41
3002: PUSH
3003: LD_INT 0
3005: ST_TO_ADDR
// sBazooka := false ;
3006: LD_ADDR_EXP 44
3010: PUSH
3011: LD_INT 0
3013: ST_TO_ADDR
// sMortar := false ;
3014: LD_ADDR_EXP 45
3018: PUSH
3019: LD_INT 0
3021: ST_TO_ADDR
// sRanger := false ;
3022: LD_ADDR_EXP 55
3026: PUSH
3027: LD_INT 0
3029: ST_TO_ADDR
// sComputer := false ;
3030: LD_ADDR_EXP 56
3034: PUSH
3035: LD_INT 0
3037: ST_TO_ADDR
// s30 := false ;
3038: LD_ADDR_EXP 57
3042: PUSH
3043: LD_INT 0
3045: ST_TO_ADDR
// s60 := false ;
3046: LD_ADDR_EXP 58
3050: PUSH
3051: LD_INT 0
3053: ST_TO_ADDR
// end ;
3054: LD_VAR 0 1
3058: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3059: LD_INT 0
3061: PPUSH
3062: PPUSH
3063: PPUSH
3064: PPUSH
3065: PPUSH
3066: PPUSH
3067: PPUSH
// result := [ ] ;
3068: LD_ADDR_VAR 0 2
3072: PUSH
3073: EMPTY
3074: ST_TO_ADDR
// if campaign_id = 1 then
3075: LD_OWVAR 69
3079: PUSH
3080: LD_INT 1
3082: EQUAL
3083: IFFALSE 6249
// begin case mission_number of 1 :
3085: LD_OWVAR 70
3089: PUSH
3090: LD_INT 1
3092: DOUBLE
3093: EQUAL
3094: IFTRUE 3098
3096: GO 3174
3098: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3099: LD_ADDR_VAR 0 2
3103: PUSH
3104: LD_INT 2
3106: PUSH
3107: LD_INT 4
3109: PUSH
3110: LD_INT 11
3112: PUSH
3113: LD_INT 12
3115: PUSH
3116: LD_INT 15
3118: PUSH
3119: LD_INT 16
3121: PUSH
3122: LD_INT 22
3124: PUSH
3125: LD_INT 23
3127: PUSH
3128: LD_INT 26
3130: PUSH
3131: EMPTY
3132: LIST
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: LIST
3141: PUSH
3142: LD_INT 101
3144: PUSH
3145: LD_INT 102
3147: PUSH
3148: LD_INT 106
3150: PUSH
3151: LD_INT 116
3153: PUSH
3154: LD_INT 117
3156: PUSH
3157: LD_INT 118
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: ST_TO_ADDR
3172: GO 6247
3174: LD_INT 2
3176: DOUBLE
3177: EQUAL
3178: IFTRUE 3182
3180: GO 3266
3182: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3183: LD_ADDR_VAR 0 2
3187: PUSH
3188: LD_INT 2
3190: PUSH
3191: LD_INT 4
3193: PUSH
3194: LD_INT 11
3196: PUSH
3197: LD_INT 12
3199: PUSH
3200: LD_INT 15
3202: PUSH
3203: LD_INT 16
3205: PUSH
3206: LD_INT 22
3208: PUSH
3209: LD_INT 23
3211: PUSH
3212: LD_INT 26
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: LIST
3224: LIST
3225: PUSH
3226: LD_INT 101
3228: PUSH
3229: LD_INT 102
3231: PUSH
3232: LD_INT 105
3234: PUSH
3235: LD_INT 106
3237: PUSH
3238: LD_INT 108
3240: PUSH
3241: LD_INT 116
3243: PUSH
3244: LD_INT 117
3246: PUSH
3247: LD_INT 118
3249: PUSH
3250: EMPTY
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: LIST
3258: LIST
3259: PUSH
3260: EMPTY
3261: LIST
3262: LIST
3263: ST_TO_ADDR
3264: GO 6247
3266: LD_INT 3
3268: DOUBLE
3269: EQUAL
3270: IFTRUE 3274
3272: GO 3362
3274: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3275: LD_ADDR_VAR 0 2
3279: PUSH
3280: LD_INT 2
3282: PUSH
3283: LD_INT 4
3285: PUSH
3286: LD_INT 5
3288: PUSH
3289: LD_INT 11
3291: PUSH
3292: LD_INT 12
3294: PUSH
3295: LD_INT 15
3297: PUSH
3298: LD_INT 16
3300: PUSH
3301: LD_INT 22
3303: PUSH
3304: LD_INT 26
3306: PUSH
3307: LD_INT 36
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: LIST
3314: LIST
3315: LIST
3316: LIST
3317: LIST
3318: LIST
3319: LIST
3320: LIST
3321: PUSH
3322: LD_INT 101
3324: PUSH
3325: LD_INT 102
3327: PUSH
3328: LD_INT 105
3330: PUSH
3331: LD_INT 106
3333: PUSH
3334: LD_INT 108
3336: PUSH
3337: LD_INT 116
3339: PUSH
3340: LD_INT 117
3342: PUSH
3343: LD_INT 118
3345: PUSH
3346: EMPTY
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: LIST
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: ST_TO_ADDR
3360: GO 6247
3362: LD_INT 4
3364: DOUBLE
3365: EQUAL
3366: IFTRUE 3370
3368: GO 3466
3370: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
3371: LD_ADDR_VAR 0 2
3375: PUSH
3376: LD_INT 2
3378: PUSH
3379: LD_INT 4
3381: PUSH
3382: LD_INT 5
3384: PUSH
3385: LD_INT 8
3387: PUSH
3388: LD_INT 11
3390: PUSH
3391: LD_INT 12
3393: PUSH
3394: LD_INT 15
3396: PUSH
3397: LD_INT 16
3399: PUSH
3400: LD_INT 22
3402: PUSH
3403: LD_INT 23
3405: PUSH
3406: LD_INT 26
3408: PUSH
3409: LD_INT 36
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: PUSH
3426: LD_INT 101
3428: PUSH
3429: LD_INT 102
3431: PUSH
3432: LD_INT 105
3434: PUSH
3435: LD_INT 106
3437: PUSH
3438: LD_INT 108
3440: PUSH
3441: LD_INT 116
3443: PUSH
3444: LD_INT 117
3446: PUSH
3447: LD_INT 118
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: LIST
3458: LIST
3459: PUSH
3460: EMPTY
3461: LIST
3462: LIST
3463: ST_TO_ADDR
3464: GO 6247
3466: LD_INT 5
3468: DOUBLE
3469: EQUAL
3470: IFTRUE 3474
3472: GO 3586
3474: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
3475: LD_ADDR_VAR 0 2
3479: PUSH
3480: LD_INT 2
3482: PUSH
3483: LD_INT 4
3485: PUSH
3486: LD_INT 5
3488: PUSH
3489: LD_INT 6
3491: PUSH
3492: LD_INT 8
3494: PUSH
3495: LD_INT 11
3497: PUSH
3498: LD_INT 12
3500: PUSH
3501: LD_INT 15
3503: PUSH
3504: LD_INT 16
3506: PUSH
3507: LD_INT 22
3509: PUSH
3510: LD_INT 23
3512: PUSH
3513: LD_INT 25
3515: PUSH
3516: LD_INT 26
3518: PUSH
3519: LD_INT 36
3521: PUSH
3522: EMPTY
3523: LIST
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: LIST
3537: PUSH
3538: LD_INT 101
3540: PUSH
3541: LD_INT 102
3543: PUSH
3544: LD_INT 105
3546: PUSH
3547: LD_INT 106
3549: PUSH
3550: LD_INT 108
3552: PUSH
3553: LD_INT 109
3555: PUSH
3556: LD_INT 112
3558: PUSH
3559: LD_INT 116
3561: PUSH
3562: LD_INT 117
3564: PUSH
3565: LD_INT 118
3567: PUSH
3568: EMPTY
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: ST_TO_ADDR
3584: GO 6247
3586: LD_INT 6
3588: DOUBLE
3589: EQUAL
3590: IFTRUE 3594
3592: GO 3726
3594: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
3595: LD_ADDR_VAR 0 2
3599: PUSH
3600: LD_INT 2
3602: PUSH
3603: LD_INT 4
3605: PUSH
3606: LD_INT 5
3608: PUSH
3609: LD_INT 6
3611: PUSH
3612: LD_INT 8
3614: PUSH
3615: LD_INT 11
3617: PUSH
3618: LD_INT 12
3620: PUSH
3621: LD_INT 15
3623: PUSH
3624: LD_INT 16
3626: PUSH
3627: LD_INT 20
3629: PUSH
3630: LD_INT 21
3632: PUSH
3633: LD_INT 22
3635: PUSH
3636: LD_INT 23
3638: PUSH
3639: LD_INT 25
3641: PUSH
3642: LD_INT 26
3644: PUSH
3645: LD_INT 30
3647: PUSH
3648: LD_INT 31
3650: PUSH
3651: LD_INT 32
3653: PUSH
3654: LD_INT 36
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: LIST
3675: LIST
3676: LIST
3677: PUSH
3678: LD_INT 101
3680: PUSH
3681: LD_INT 102
3683: PUSH
3684: LD_INT 105
3686: PUSH
3687: LD_INT 106
3689: PUSH
3690: LD_INT 108
3692: PUSH
3693: LD_INT 109
3695: PUSH
3696: LD_INT 112
3698: PUSH
3699: LD_INT 116
3701: PUSH
3702: LD_INT 117
3704: PUSH
3705: LD_INT 118
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: LIST
3718: LIST
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: ST_TO_ADDR
3724: GO 6247
3726: LD_INT 7
3728: DOUBLE
3729: EQUAL
3730: IFTRUE 3734
3732: GO 3846
3734: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
3735: LD_ADDR_VAR 0 2
3739: PUSH
3740: LD_INT 2
3742: PUSH
3743: LD_INT 4
3745: PUSH
3746: LD_INT 5
3748: PUSH
3749: LD_INT 7
3751: PUSH
3752: LD_INT 11
3754: PUSH
3755: LD_INT 12
3757: PUSH
3758: LD_INT 15
3760: PUSH
3761: LD_INT 16
3763: PUSH
3764: LD_INT 20
3766: PUSH
3767: LD_INT 21
3769: PUSH
3770: LD_INT 22
3772: PUSH
3773: LD_INT 23
3775: PUSH
3776: LD_INT 25
3778: PUSH
3779: LD_INT 26
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: PUSH
3798: LD_INT 101
3800: PUSH
3801: LD_INT 102
3803: PUSH
3804: LD_INT 103
3806: PUSH
3807: LD_INT 105
3809: PUSH
3810: LD_INT 106
3812: PUSH
3813: LD_INT 108
3815: PUSH
3816: LD_INT 112
3818: PUSH
3819: LD_INT 116
3821: PUSH
3822: LD_INT 117
3824: PUSH
3825: LD_INT 118
3827: PUSH
3828: EMPTY
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: ST_TO_ADDR
3844: GO 6247
3846: LD_INT 8
3848: DOUBLE
3849: EQUAL
3850: IFTRUE 3854
3852: GO 3994
3854: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
3855: LD_ADDR_VAR 0 2
3859: PUSH
3860: LD_INT 2
3862: PUSH
3863: LD_INT 4
3865: PUSH
3866: LD_INT 5
3868: PUSH
3869: LD_INT 6
3871: PUSH
3872: LD_INT 7
3874: PUSH
3875: LD_INT 8
3877: PUSH
3878: LD_INT 11
3880: PUSH
3881: LD_INT 12
3883: PUSH
3884: LD_INT 15
3886: PUSH
3887: LD_INT 16
3889: PUSH
3890: LD_INT 20
3892: PUSH
3893: LD_INT 21
3895: PUSH
3896: LD_INT 22
3898: PUSH
3899: LD_INT 23
3901: PUSH
3902: LD_INT 25
3904: PUSH
3905: LD_INT 26
3907: PUSH
3908: LD_INT 30
3910: PUSH
3911: LD_INT 31
3913: PUSH
3914: LD_INT 32
3916: PUSH
3917: LD_INT 36
3919: PUSH
3920: EMPTY
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: PUSH
3942: LD_INT 101
3944: PUSH
3945: LD_INT 102
3947: PUSH
3948: LD_INT 103
3950: PUSH
3951: LD_INT 105
3953: PUSH
3954: LD_INT 106
3956: PUSH
3957: LD_INT 108
3959: PUSH
3960: LD_INT 109
3962: PUSH
3963: LD_INT 112
3965: PUSH
3966: LD_INT 116
3968: PUSH
3969: LD_INT 117
3971: PUSH
3972: LD_INT 118
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: LIST
3985: LIST
3986: LIST
3987: PUSH
3988: EMPTY
3989: LIST
3990: LIST
3991: ST_TO_ADDR
3992: GO 6247
3994: LD_INT 9
3996: DOUBLE
3997: EQUAL
3998: IFTRUE 4002
4000: GO 4150
4002: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4003: LD_ADDR_VAR 0 2
4007: PUSH
4008: LD_INT 2
4010: PUSH
4011: LD_INT 4
4013: PUSH
4014: LD_INT 5
4016: PUSH
4017: LD_INT 6
4019: PUSH
4020: LD_INT 7
4022: PUSH
4023: LD_INT 8
4025: PUSH
4026: LD_INT 11
4028: PUSH
4029: LD_INT 12
4031: PUSH
4032: LD_INT 15
4034: PUSH
4035: LD_INT 16
4037: PUSH
4038: LD_INT 20
4040: PUSH
4041: LD_INT 21
4043: PUSH
4044: LD_INT 22
4046: PUSH
4047: LD_INT 23
4049: PUSH
4050: LD_INT 25
4052: PUSH
4053: LD_INT 26
4055: PUSH
4056: LD_INT 28
4058: PUSH
4059: LD_INT 30
4061: PUSH
4062: LD_INT 31
4064: PUSH
4065: LD_INT 32
4067: PUSH
4068: LD_INT 36
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: LIST
4093: PUSH
4094: LD_INT 101
4096: PUSH
4097: LD_INT 102
4099: PUSH
4100: LD_INT 103
4102: PUSH
4103: LD_INT 105
4105: PUSH
4106: LD_INT 106
4108: PUSH
4109: LD_INT 108
4111: PUSH
4112: LD_INT 109
4114: PUSH
4115: LD_INT 112
4117: PUSH
4118: LD_INT 114
4120: PUSH
4121: LD_INT 116
4123: PUSH
4124: LD_INT 117
4126: PUSH
4127: LD_INT 118
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: LIST
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: ST_TO_ADDR
4148: GO 6247
4150: LD_INT 10
4152: DOUBLE
4153: EQUAL
4154: IFTRUE 4158
4156: GO 4354
4158: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4159: LD_ADDR_VAR 0 2
4163: PUSH
4164: LD_INT 2
4166: PUSH
4167: LD_INT 4
4169: PUSH
4170: LD_INT 5
4172: PUSH
4173: LD_INT 6
4175: PUSH
4176: LD_INT 7
4178: PUSH
4179: LD_INT 8
4181: PUSH
4182: LD_INT 9
4184: PUSH
4185: LD_INT 10
4187: PUSH
4188: LD_INT 11
4190: PUSH
4191: LD_INT 12
4193: PUSH
4194: LD_INT 13
4196: PUSH
4197: LD_INT 14
4199: PUSH
4200: LD_INT 15
4202: PUSH
4203: LD_INT 16
4205: PUSH
4206: LD_INT 17
4208: PUSH
4209: LD_INT 18
4211: PUSH
4212: LD_INT 19
4214: PUSH
4215: LD_INT 20
4217: PUSH
4218: LD_INT 21
4220: PUSH
4221: LD_INT 22
4223: PUSH
4224: LD_INT 23
4226: PUSH
4227: LD_INT 24
4229: PUSH
4230: LD_INT 25
4232: PUSH
4233: LD_INT 26
4235: PUSH
4236: LD_INT 28
4238: PUSH
4239: LD_INT 30
4241: PUSH
4242: LD_INT 31
4244: PUSH
4245: LD_INT 32
4247: PUSH
4248: LD_INT 36
4250: PUSH
4251: EMPTY
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: LIST
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: PUSH
4282: LD_INT 101
4284: PUSH
4285: LD_INT 102
4287: PUSH
4288: LD_INT 103
4290: PUSH
4291: LD_INT 104
4293: PUSH
4294: LD_INT 105
4296: PUSH
4297: LD_INT 106
4299: PUSH
4300: LD_INT 107
4302: PUSH
4303: LD_INT 108
4305: PUSH
4306: LD_INT 109
4308: PUSH
4309: LD_INT 110
4311: PUSH
4312: LD_INT 111
4314: PUSH
4315: LD_INT 112
4317: PUSH
4318: LD_INT 114
4320: PUSH
4321: LD_INT 116
4323: PUSH
4324: LD_INT 117
4326: PUSH
4327: LD_INT 118
4329: PUSH
4330: EMPTY
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: PUSH
4348: EMPTY
4349: LIST
4350: LIST
4351: ST_TO_ADDR
4352: GO 6247
4354: LD_INT 11
4356: DOUBLE
4357: EQUAL
4358: IFTRUE 4362
4360: GO 4566
4362: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4363: LD_ADDR_VAR 0 2
4367: PUSH
4368: LD_INT 2
4370: PUSH
4371: LD_INT 3
4373: PUSH
4374: LD_INT 4
4376: PUSH
4377: LD_INT 5
4379: PUSH
4380: LD_INT 6
4382: PUSH
4383: LD_INT 7
4385: PUSH
4386: LD_INT 8
4388: PUSH
4389: LD_INT 9
4391: PUSH
4392: LD_INT 10
4394: PUSH
4395: LD_INT 11
4397: PUSH
4398: LD_INT 12
4400: PUSH
4401: LD_INT 13
4403: PUSH
4404: LD_INT 14
4406: PUSH
4407: LD_INT 15
4409: PUSH
4410: LD_INT 16
4412: PUSH
4413: LD_INT 17
4415: PUSH
4416: LD_INT 18
4418: PUSH
4419: LD_INT 19
4421: PUSH
4422: LD_INT 20
4424: PUSH
4425: LD_INT 21
4427: PUSH
4428: LD_INT 22
4430: PUSH
4431: LD_INT 23
4433: PUSH
4434: LD_INT 24
4436: PUSH
4437: LD_INT 25
4439: PUSH
4440: LD_INT 26
4442: PUSH
4443: LD_INT 28
4445: PUSH
4446: LD_INT 30
4448: PUSH
4449: LD_INT 31
4451: PUSH
4452: LD_INT 32
4454: PUSH
4455: LD_INT 34
4457: PUSH
4458: LD_INT 36
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: PUSH
4494: LD_INT 101
4496: PUSH
4497: LD_INT 102
4499: PUSH
4500: LD_INT 103
4502: PUSH
4503: LD_INT 104
4505: PUSH
4506: LD_INT 105
4508: PUSH
4509: LD_INT 106
4511: PUSH
4512: LD_INT 107
4514: PUSH
4515: LD_INT 108
4517: PUSH
4518: LD_INT 109
4520: PUSH
4521: LD_INT 110
4523: PUSH
4524: LD_INT 111
4526: PUSH
4527: LD_INT 112
4529: PUSH
4530: LD_INT 114
4532: PUSH
4533: LD_INT 116
4535: PUSH
4536: LD_INT 117
4538: PUSH
4539: LD_INT 118
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: LIST
4557: LIST
4558: LIST
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: ST_TO_ADDR
4564: GO 6247
4566: LD_INT 12
4568: DOUBLE
4569: EQUAL
4570: IFTRUE 4574
4572: GO 4794
4574: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
4575: LD_ADDR_VAR 0 2
4579: PUSH
4580: LD_INT 1
4582: PUSH
4583: LD_INT 2
4585: PUSH
4586: LD_INT 3
4588: PUSH
4589: LD_INT 4
4591: PUSH
4592: LD_INT 5
4594: PUSH
4595: LD_INT 6
4597: PUSH
4598: LD_INT 7
4600: PUSH
4601: LD_INT 8
4603: PUSH
4604: LD_INT 9
4606: PUSH
4607: LD_INT 10
4609: PUSH
4610: LD_INT 11
4612: PUSH
4613: LD_INT 12
4615: PUSH
4616: LD_INT 13
4618: PUSH
4619: LD_INT 14
4621: PUSH
4622: LD_INT 15
4624: PUSH
4625: LD_INT 16
4627: PUSH
4628: LD_INT 17
4630: PUSH
4631: LD_INT 18
4633: PUSH
4634: LD_INT 19
4636: PUSH
4637: LD_INT 20
4639: PUSH
4640: LD_INT 21
4642: PUSH
4643: LD_INT 22
4645: PUSH
4646: LD_INT 23
4648: PUSH
4649: LD_INT 24
4651: PUSH
4652: LD_INT 25
4654: PUSH
4655: LD_INT 26
4657: PUSH
4658: LD_INT 27
4660: PUSH
4661: LD_INT 28
4663: PUSH
4664: LD_INT 30
4666: PUSH
4667: LD_INT 31
4669: PUSH
4670: LD_INT 32
4672: PUSH
4673: LD_INT 33
4675: PUSH
4676: LD_INT 34
4678: PUSH
4679: LD_INT 36
4681: PUSH
4682: EMPTY
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: PUSH
4718: LD_INT 101
4720: PUSH
4721: LD_INT 102
4723: PUSH
4724: LD_INT 103
4726: PUSH
4727: LD_INT 104
4729: PUSH
4730: LD_INT 105
4732: PUSH
4733: LD_INT 106
4735: PUSH
4736: LD_INT 107
4738: PUSH
4739: LD_INT 108
4741: PUSH
4742: LD_INT 109
4744: PUSH
4745: LD_INT 110
4747: PUSH
4748: LD_INT 111
4750: PUSH
4751: LD_INT 112
4753: PUSH
4754: LD_INT 113
4756: PUSH
4757: LD_INT 114
4759: PUSH
4760: LD_INT 116
4762: PUSH
4763: LD_INT 117
4765: PUSH
4766: LD_INT 118
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: ST_TO_ADDR
4792: GO 6247
4794: LD_INT 13
4796: DOUBLE
4797: EQUAL
4798: IFTRUE 4802
4800: GO 5010
4802: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
4803: LD_ADDR_VAR 0 2
4807: PUSH
4808: LD_INT 1
4810: PUSH
4811: LD_INT 2
4813: PUSH
4814: LD_INT 3
4816: PUSH
4817: LD_INT 4
4819: PUSH
4820: LD_INT 5
4822: PUSH
4823: LD_INT 8
4825: PUSH
4826: LD_INT 9
4828: PUSH
4829: LD_INT 10
4831: PUSH
4832: LD_INT 11
4834: PUSH
4835: LD_INT 12
4837: PUSH
4838: LD_INT 14
4840: PUSH
4841: LD_INT 15
4843: PUSH
4844: LD_INT 16
4846: PUSH
4847: LD_INT 17
4849: PUSH
4850: LD_INT 18
4852: PUSH
4853: LD_INT 19
4855: PUSH
4856: LD_INT 20
4858: PUSH
4859: LD_INT 21
4861: PUSH
4862: LD_INT 22
4864: PUSH
4865: LD_INT 23
4867: PUSH
4868: LD_INT 24
4870: PUSH
4871: LD_INT 25
4873: PUSH
4874: LD_INT 26
4876: PUSH
4877: LD_INT 27
4879: PUSH
4880: LD_INT 28
4882: PUSH
4883: LD_INT 30
4885: PUSH
4886: LD_INT 31
4888: PUSH
4889: LD_INT 32
4891: PUSH
4892: LD_INT 33
4894: PUSH
4895: LD_INT 34
4897: PUSH
4898: LD_INT 36
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: PUSH
4934: LD_INT 101
4936: PUSH
4937: LD_INT 102
4939: PUSH
4940: LD_INT 103
4942: PUSH
4943: LD_INT 104
4945: PUSH
4946: LD_INT 105
4948: PUSH
4949: LD_INT 106
4951: PUSH
4952: LD_INT 107
4954: PUSH
4955: LD_INT 108
4957: PUSH
4958: LD_INT 109
4960: PUSH
4961: LD_INT 110
4963: PUSH
4964: LD_INT 111
4966: PUSH
4967: LD_INT 112
4969: PUSH
4970: LD_INT 113
4972: PUSH
4973: LD_INT 114
4975: PUSH
4976: LD_INT 116
4978: PUSH
4979: LD_INT 117
4981: PUSH
4982: LD_INT 118
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: ST_TO_ADDR
5008: GO 6247
5010: LD_INT 14
5012: DOUBLE
5013: EQUAL
5014: IFTRUE 5018
5016: GO 5242
5018: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5019: LD_ADDR_VAR 0 2
5023: PUSH
5024: LD_INT 1
5026: PUSH
5027: LD_INT 2
5029: PUSH
5030: LD_INT 3
5032: PUSH
5033: LD_INT 4
5035: PUSH
5036: LD_INT 5
5038: PUSH
5039: LD_INT 6
5041: PUSH
5042: LD_INT 7
5044: PUSH
5045: LD_INT 8
5047: PUSH
5048: LD_INT 9
5050: PUSH
5051: LD_INT 10
5053: PUSH
5054: LD_INT 11
5056: PUSH
5057: LD_INT 12
5059: PUSH
5060: LD_INT 13
5062: PUSH
5063: LD_INT 14
5065: PUSH
5066: LD_INT 15
5068: PUSH
5069: LD_INT 16
5071: PUSH
5072: LD_INT 17
5074: PUSH
5075: LD_INT 18
5077: PUSH
5078: LD_INT 19
5080: PUSH
5081: LD_INT 20
5083: PUSH
5084: LD_INT 21
5086: PUSH
5087: LD_INT 22
5089: PUSH
5090: LD_INT 23
5092: PUSH
5093: LD_INT 24
5095: PUSH
5096: LD_INT 25
5098: PUSH
5099: LD_INT 26
5101: PUSH
5102: LD_INT 27
5104: PUSH
5105: LD_INT 28
5107: PUSH
5108: LD_INT 29
5110: PUSH
5111: LD_INT 30
5113: PUSH
5114: LD_INT 31
5116: PUSH
5117: LD_INT 32
5119: PUSH
5120: LD_INT 33
5122: PUSH
5123: LD_INT 34
5125: PUSH
5126: LD_INT 36
5128: PUSH
5129: EMPTY
5130: LIST
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: LIST
5148: LIST
5149: LIST
5150: LIST
5151: LIST
5152: LIST
5153: LIST
5154: LIST
5155: LIST
5156: LIST
5157: LIST
5158: LIST
5159: LIST
5160: LIST
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: PUSH
5166: LD_INT 101
5168: PUSH
5169: LD_INT 102
5171: PUSH
5172: LD_INT 103
5174: PUSH
5175: LD_INT 104
5177: PUSH
5178: LD_INT 105
5180: PUSH
5181: LD_INT 106
5183: PUSH
5184: LD_INT 107
5186: PUSH
5187: LD_INT 108
5189: PUSH
5190: LD_INT 109
5192: PUSH
5193: LD_INT 110
5195: PUSH
5196: LD_INT 111
5198: PUSH
5199: LD_INT 112
5201: PUSH
5202: LD_INT 113
5204: PUSH
5205: LD_INT 114
5207: PUSH
5208: LD_INT 116
5210: PUSH
5211: LD_INT 117
5213: PUSH
5214: LD_INT 118
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: ST_TO_ADDR
5240: GO 6247
5242: LD_INT 15
5244: DOUBLE
5245: EQUAL
5246: IFTRUE 5250
5248: GO 5474
5250: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5251: LD_ADDR_VAR 0 2
5255: PUSH
5256: LD_INT 1
5258: PUSH
5259: LD_INT 2
5261: PUSH
5262: LD_INT 3
5264: PUSH
5265: LD_INT 4
5267: PUSH
5268: LD_INT 5
5270: PUSH
5271: LD_INT 6
5273: PUSH
5274: LD_INT 7
5276: PUSH
5277: LD_INT 8
5279: PUSH
5280: LD_INT 9
5282: PUSH
5283: LD_INT 10
5285: PUSH
5286: LD_INT 11
5288: PUSH
5289: LD_INT 12
5291: PUSH
5292: LD_INT 13
5294: PUSH
5295: LD_INT 14
5297: PUSH
5298: LD_INT 15
5300: PUSH
5301: LD_INT 16
5303: PUSH
5304: LD_INT 17
5306: PUSH
5307: LD_INT 18
5309: PUSH
5310: LD_INT 19
5312: PUSH
5313: LD_INT 20
5315: PUSH
5316: LD_INT 21
5318: PUSH
5319: LD_INT 22
5321: PUSH
5322: LD_INT 23
5324: PUSH
5325: LD_INT 24
5327: PUSH
5328: LD_INT 25
5330: PUSH
5331: LD_INT 26
5333: PUSH
5334: LD_INT 27
5336: PUSH
5337: LD_INT 28
5339: PUSH
5340: LD_INT 29
5342: PUSH
5343: LD_INT 30
5345: PUSH
5346: LD_INT 31
5348: PUSH
5349: LD_INT 32
5351: PUSH
5352: LD_INT 33
5354: PUSH
5355: LD_INT 34
5357: PUSH
5358: LD_INT 36
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: LIST
5379: LIST
5380: LIST
5381: LIST
5382: LIST
5383: LIST
5384: LIST
5385: LIST
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: PUSH
5398: LD_INT 101
5400: PUSH
5401: LD_INT 102
5403: PUSH
5404: LD_INT 103
5406: PUSH
5407: LD_INT 104
5409: PUSH
5410: LD_INT 105
5412: PUSH
5413: LD_INT 106
5415: PUSH
5416: LD_INT 107
5418: PUSH
5419: LD_INT 108
5421: PUSH
5422: LD_INT 109
5424: PUSH
5425: LD_INT 110
5427: PUSH
5428: LD_INT 111
5430: PUSH
5431: LD_INT 112
5433: PUSH
5434: LD_INT 113
5436: PUSH
5437: LD_INT 114
5439: PUSH
5440: LD_INT 116
5442: PUSH
5443: LD_INT 117
5445: PUSH
5446: LD_INT 118
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: LIST
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: ST_TO_ADDR
5472: GO 6247
5474: LD_INT 16
5476: DOUBLE
5477: EQUAL
5478: IFTRUE 5482
5480: GO 5618
5482: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
5483: LD_ADDR_VAR 0 2
5487: PUSH
5488: LD_INT 2
5490: PUSH
5491: LD_INT 4
5493: PUSH
5494: LD_INT 5
5496: PUSH
5497: LD_INT 7
5499: PUSH
5500: LD_INT 11
5502: PUSH
5503: LD_INT 12
5505: PUSH
5506: LD_INT 15
5508: PUSH
5509: LD_INT 16
5511: PUSH
5512: LD_INT 20
5514: PUSH
5515: LD_INT 21
5517: PUSH
5518: LD_INT 22
5520: PUSH
5521: LD_INT 23
5523: PUSH
5524: LD_INT 25
5526: PUSH
5527: LD_INT 26
5529: PUSH
5530: LD_INT 30
5532: PUSH
5533: LD_INT 31
5535: PUSH
5536: LD_INT 32
5538: PUSH
5539: LD_INT 33
5541: PUSH
5542: LD_INT 34
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: PUSH
5566: LD_INT 101
5568: PUSH
5569: LD_INT 102
5571: PUSH
5572: LD_INT 103
5574: PUSH
5575: LD_INT 106
5577: PUSH
5578: LD_INT 108
5580: PUSH
5581: LD_INT 112
5583: PUSH
5584: LD_INT 113
5586: PUSH
5587: LD_INT 114
5589: PUSH
5590: LD_INT 116
5592: PUSH
5593: LD_INT 117
5595: PUSH
5596: LD_INT 118
5598: PUSH
5599: EMPTY
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: ST_TO_ADDR
5616: GO 6247
5618: LD_INT 17
5620: DOUBLE
5621: EQUAL
5622: IFTRUE 5626
5624: GO 5850
5626: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
5627: LD_ADDR_VAR 0 2
5631: PUSH
5632: LD_INT 1
5634: PUSH
5635: LD_INT 2
5637: PUSH
5638: LD_INT 3
5640: PUSH
5641: LD_INT 4
5643: PUSH
5644: LD_INT 5
5646: PUSH
5647: LD_INT 6
5649: PUSH
5650: LD_INT 7
5652: PUSH
5653: LD_INT 8
5655: PUSH
5656: LD_INT 9
5658: PUSH
5659: LD_INT 10
5661: PUSH
5662: LD_INT 11
5664: PUSH
5665: LD_INT 12
5667: PUSH
5668: LD_INT 13
5670: PUSH
5671: LD_INT 14
5673: PUSH
5674: LD_INT 15
5676: PUSH
5677: LD_INT 16
5679: PUSH
5680: LD_INT 17
5682: PUSH
5683: LD_INT 18
5685: PUSH
5686: LD_INT 19
5688: PUSH
5689: LD_INT 20
5691: PUSH
5692: LD_INT 21
5694: PUSH
5695: LD_INT 22
5697: PUSH
5698: LD_INT 23
5700: PUSH
5701: LD_INT 24
5703: PUSH
5704: LD_INT 25
5706: PUSH
5707: LD_INT 26
5709: PUSH
5710: LD_INT 27
5712: PUSH
5713: LD_INT 28
5715: PUSH
5716: LD_INT 29
5718: PUSH
5719: LD_INT 30
5721: PUSH
5722: LD_INT 31
5724: PUSH
5725: LD_INT 32
5727: PUSH
5728: LD_INT 33
5730: PUSH
5731: LD_INT 34
5733: PUSH
5734: LD_INT 36
5736: PUSH
5737: EMPTY
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: LIST
5743: LIST
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: LIST
5755: LIST
5756: LIST
5757: LIST
5758: LIST
5759: LIST
5760: LIST
5761: LIST
5762: LIST
5763: LIST
5764: LIST
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: LIST
5773: PUSH
5774: LD_INT 101
5776: PUSH
5777: LD_INT 102
5779: PUSH
5780: LD_INT 103
5782: PUSH
5783: LD_INT 104
5785: PUSH
5786: LD_INT 105
5788: PUSH
5789: LD_INT 106
5791: PUSH
5792: LD_INT 107
5794: PUSH
5795: LD_INT 108
5797: PUSH
5798: LD_INT 109
5800: PUSH
5801: LD_INT 110
5803: PUSH
5804: LD_INT 111
5806: PUSH
5807: LD_INT 112
5809: PUSH
5810: LD_INT 113
5812: PUSH
5813: LD_INT 114
5815: PUSH
5816: LD_INT 116
5818: PUSH
5819: LD_INT 117
5821: PUSH
5822: LD_INT 118
5824: PUSH
5825: EMPTY
5826: LIST
5827: LIST
5828: LIST
5829: LIST
5830: LIST
5831: LIST
5832: LIST
5833: LIST
5834: LIST
5835: LIST
5836: LIST
5837: LIST
5838: LIST
5839: LIST
5840: LIST
5841: LIST
5842: LIST
5843: PUSH
5844: EMPTY
5845: LIST
5846: LIST
5847: ST_TO_ADDR
5848: GO 6247
5850: LD_INT 18
5852: DOUBLE
5853: EQUAL
5854: IFTRUE 5858
5856: GO 6006
5858: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
5859: LD_ADDR_VAR 0 2
5863: PUSH
5864: LD_INT 2
5866: PUSH
5867: LD_INT 4
5869: PUSH
5870: LD_INT 5
5872: PUSH
5873: LD_INT 7
5875: PUSH
5876: LD_INT 11
5878: PUSH
5879: LD_INT 12
5881: PUSH
5882: LD_INT 15
5884: PUSH
5885: LD_INT 16
5887: PUSH
5888: LD_INT 20
5890: PUSH
5891: LD_INT 21
5893: PUSH
5894: LD_INT 22
5896: PUSH
5897: LD_INT 23
5899: PUSH
5900: LD_INT 25
5902: PUSH
5903: LD_INT 26
5905: PUSH
5906: LD_INT 30
5908: PUSH
5909: LD_INT 31
5911: PUSH
5912: LD_INT 32
5914: PUSH
5915: LD_INT 33
5917: PUSH
5918: LD_INT 34
5920: PUSH
5921: LD_INT 35
5923: PUSH
5924: LD_INT 36
5926: PUSH
5927: EMPTY
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: PUSH
5950: LD_INT 101
5952: PUSH
5953: LD_INT 102
5955: PUSH
5956: LD_INT 103
5958: PUSH
5959: LD_INT 106
5961: PUSH
5962: LD_INT 108
5964: PUSH
5965: LD_INT 112
5967: PUSH
5968: LD_INT 113
5970: PUSH
5971: LD_INT 114
5973: PUSH
5974: LD_INT 115
5976: PUSH
5977: LD_INT 116
5979: PUSH
5980: LD_INT 117
5982: PUSH
5983: LD_INT 118
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: ST_TO_ADDR
6004: GO 6247
6006: LD_INT 19
6008: DOUBLE
6009: EQUAL
6010: IFTRUE 6014
6012: GO 6246
6014: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6015: LD_ADDR_VAR 0 2
6019: PUSH
6020: LD_INT 1
6022: PUSH
6023: LD_INT 2
6025: PUSH
6026: LD_INT 3
6028: PUSH
6029: LD_INT 4
6031: PUSH
6032: LD_INT 5
6034: PUSH
6035: LD_INT 6
6037: PUSH
6038: LD_INT 7
6040: PUSH
6041: LD_INT 8
6043: PUSH
6044: LD_INT 9
6046: PUSH
6047: LD_INT 10
6049: PUSH
6050: LD_INT 11
6052: PUSH
6053: LD_INT 12
6055: PUSH
6056: LD_INT 13
6058: PUSH
6059: LD_INT 14
6061: PUSH
6062: LD_INT 15
6064: PUSH
6065: LD_INT 16
6067: PUSH
6068: LD_INT 17
6070: PUSH
6071: LD_INT 18
6073: PUSH
6074: LD_INT 19
6076: PUSH
6077: LD_INT 20
6079: PUSH
6080: LD_INT 21
6082: PUSH
6083: LD_INT 22
6085: PUSH
6086: LD_INT 23
6088: PUSH
6089: LD_INT 24
6091: PUSH
6092: LD_INT 25
6094: PUSH
6095: LD_INT 26
6097: PUSH
6098: LD_INT 27
6100: PUSH
6101: LD_INT 28
6103: PUSH
6104: LD_INT 29
6106: PUSH
6107: LD_INT 30
6109: PUSH
6110: LD_INT 31
6112: PUSH
6113: LD_INT 32
6115: PUSH
6116: LD_INT 33
6118: PUSH
6119: LD_INT 34
6121: PUSH
6122: LD_INT 35
6124: PUSH
6125: LD_INT 36
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: LIST
6163: LIST
6164: LIST
6165: PUSH
6166: LD_INT 101
6168: PUSH
6169: LD_INT 102
6171: PUSH
6172: LD_INT 103
6174: PUSH
6175: LD_INT 104
6177: PUSH
6178: LD_INT 105
6180: PUSH
6181: LD_INT 106
6183: PUSH
6184: LD_INT 107
6186: PUSH
6187: LD_INT 108
6189: PUSH
6190: LD_INT 109
6192: PUSH
6193: LD_INT 110
6195: PUSH
6196: LD_INT 111
6198: PUSH
6199: LD_INT 112
6201: PUSH
6202: LD_INT 113
6204: PUSH
6205: LD_INT 114
6207: PUSH
6208: LD_INT 115
6210: PUSH
6211: LD_INT 116
6213: PUSH
6214: LD_INT 117
6216: PUSH
6217: LD_INT 118
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: LIST
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: ST_TO_ADDR
6244: GO 6247
6246: POP
// end else
6247: GO 6478
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6249: LD_ADDR_VAR 0 2
6253: PUSH
6254: LD_INT 1
6256: PUSH
6257: LD_INT 2
6259: PUSH
6260: LD_INT 3
6262: PUSH
6263: LD_INT 4
6265: PUSH
6266: LD_INT 5
6268: PUSH
6269: LD_INT 6
6271: PUSH
6272: LD_INT 7
6274: PUSH
6275: LD_INT 8
6277: PUSH
6278: LD_INT 9
6280: PUSH
6281: LD_INT 10
6283: PUSH
6284: LD_INT 11
6286: PUSH
6287: LD_INT 12
6289: PUSH
6290: LD_INT 13
6292: PUSH
6293: LD_INT 14
6295: PUSH
6296: LD_INT 15
6298: PUSH
6299: LD_INT 16
6301: PUSH
6302: LD_INT 17
6304: PUSH
6305: LD_INT 18
6307: PUSH
6308: LD_INT 19
6310: PUSH
6311: LD_INT 20
6313: PUSH
6314: LD_INT 21
6316: PUSH
6317: LD_INT 22
6319: PUSH
6320: LD_INT 23
6322: PUSH
6323: LD_INT 24
6325: PUSH
6326: LD_INT 25
6328: PUSH
6329: LD_INT 26
6331: PUSH
6332: LD_INT 27
6334: PUSH
6335: LD_INT 28
6337: PUSH
6338: LD_INT 29
6340: PUSH
6341: LD_INT 30
6343: PUSH
6344: LD_INT 31
6346: PUSH
6347: LD_INT 32
6349: PUSH
6350: LD_INT 33
6352: PUSH
6353: LD_INT 34
6355: PUSH
6356: LD_INT 35
6358: PUSH
6359: LD_INT 36
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: PUSH
6400: LD_INT 101
6402: PUSH
6403: LD_INT 102
6405: PUSH
6406: LD_INT 103
6408: PUSH
6409: LD_INT 104
6411: PUSH
6412: LD_INT 105
6414: PUSH
6415: LD_INT 106
6417: PUSH
6418: LD_INT 107
6420: PUSH
6421: LD_INT 108
6423: PUSH
6424: LD_INT 109
6426: PUSH
6427: LD_INT 110
6429: PUSH
6430: LD_INT 111
6432: PUSH
6433: LD_INT 112
6435: PUSH
6436: LD_INT 113
6438: PUSH
6439: LD_INT 114
6441: PUSH
6442: LD_INT 115
6444: PUSH
6445: LD_INT 116
6447: PUSH
6448: LD_INT 117
6450: PUSH
6451: LD_INT 118
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: ST_TO_ADDR
// if result then
6478: LD_VAR 0 2
6482: IFFALSE 7268
// begin normal :=  ;
6484: LD_ADDR_VAR 0 5
6488: PUSH
6489: LD_STRING 
6491: ST_TO_ADDR
// hardcore :=  ;
6492: LD_ADDR_VAR 0 6
6496: PUSH
6497: LD_STRING 
6499: ST_TO_ADDR
// active :=  ;
6500: LD_ADDR_VAR 0 7
6504: PUSH
6505: LD_STRING 
6507: ST_TO_ADDR
// for i = 1 to normalCounter do
6508: LD_ADDR_VAR 0 8
6512: PUSH
6513: DOUBLE
6514: LD_INT 1
6516: DEC
6517: ST_TO_ADDR
6518: LD_EXP 3
6522: PUSH
6523: FOR_TO
6524: IFFALSE 6625
// begin tmp := 0 ;
6526: LD_ADDR_VAR 0 3
6530: PUSH
6531: LD_STRING 0
6533: ST_TO_ADDR
// if result [ 1 ] then
6534: LD_VAR 0 2
6538: PUSH
6539: LD_INT 1
6541: ARRAY
6542: IFFALSE 6607
// if result [ 1 ] [ 1 ] = i then
6544: LD_VAR 0 2
6548: PUSH
6549: LD_INT 1
6551: ARRAY
6552: PUSH
6553: LD_INT 1
6555: ARRAY
6556: PUSH
6557: LD_VAR 0 8
6561: EQUAL
6562: IFFALSE 6607
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6564: LD_ADDR_VAR 0 2
6568: PUSH
6569: LD_VAR 0 2
6573: PPUSH
6574: LD_INT 1
6576: PPUSH
6577: LD_VAR 0 2
6581: PUSH
6582: LD_INT 1
6584: ARRAY
6585: PPUSH
6586: LD_INT 1
6588: PPUSH
6589: CALL_OW 3
6593: PPUSH
6594: CALL_OW 1
6598: ST_TO_ADDR
// tmp := 1 ;
6599: LD_ADDR_VAR 0 3
6603: PUSH
6604: LD_STRING 1
6606: ST_TO_ADDR
// end ; normal := normal & tmp ;
6607: LD_ADDR_VAR 0 5
6611: PUSH
6612: LD_VAR 0 5
6616: PUSH
6617: LD_VAR 0 3
6621: STR
6622: ST_TO_ADDR
// end ;
6623: GO 6523
6625: POP
6626: POP
// for i = 1 to hardcoreCounter do
6627: LD_ADDR_VAR 0 8
6631: PUSH
6632: DOUBLE
6633: LD_INT 1
6635: DEC
6636: ST_TO_ADDR
6637: LD_EXP 4
6641: PUSH
6642: FOR_TO
6643: IFFALSE 6748
// begin tmp := 0 ;
6645: LD_ADDR_VAR 0 3
6649: PUSH
6650: LD_STRING 0
6652: ST_TO_ADDR
// if result [ 2 ] then
6653: LD_VAR 0 2
6657: PUSH
6658: LD_INT 2
6660: ARRAY
6661: IFFALSE 6730
// if result [ 2 ] [ 1 ] = 100 + i then
6663: LD_VAR 0 2
6667: PUSH
6668: LD_INT 2
6670: ARRAY
6671: PUSH
6672: LD_INT 1
6674: ARRAY
6675: PUSH
6676: LD_INT 100
6678: PUSH
6679: LD_VAR 0 8
6683: PLUS
6684: EQUAL
6685: IFFALSE 6730
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6687: LD_ADDR_VAR 0 2
6691: PUSH
6692: LD_VAR 0 2
6696: PPUSH
6697: LD_INT 2
6699: PPUSH
6700: LD_VAR 0 2
6704: PUSH
6705: LD_INT 2
6707: ARRAY
6708: PPUSH
6709: LD_INT 1
6711: PPUSH
6712: CALL_OW 3
6716: PPUSH
6717: CALL_OW 1
6721: ST_TO_ADDR
// tmp := 1 ;
6722: LD_ADDR_VAR 0 3
6726: PUSH
6727: LD_STRING 1
6729: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6730: LD_ADDR_VAR 0 6
6734: PUSH
6735: LD_VAR 0 6
6739: PUSH
6740: LD_VAR 0 3
6744: STR
6745: ST_TO_ADDR
// end ;
6746: GO 6642
6748: POP
6749: POP
// if isGameLoad then
6750: LD_VAR 0 1
6754: IFFALSE 7229
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
6756: LD_ADDR_VAR 0 4
6760: PUSH
6761: LD_EXP 7
6765: PUSH
6766: LD_EXP 6
6770: PUSH
6771: LD_EXP 8
6775: PUSH
6776: LD_EXP 5
6780: PUSH
6781: LD_EXP 9
6785: PUSH
6786: LD_EXP 10
6790: PUSH
6791: LD_EXP 11
6795: PUSH
6796: LD_EXP 12
6800: PUSH
6801: LD_EXP 13
6805: PUSH
6806: LD_EXP 14
6810: PUSH
6811: LD_EXP 15
6815: PUSH
6816: LD_EXP 16
6820: PUSH
6821: LD_EXP 17
6825: PUSH
6826: LD_EXP 18
6830: PUSH
6831: LD_EXP 26
6835: PUSH
6836: LD_EXP 27
6840: PUSH
6841: LD_EXP 28
6845: PUSH
6846: LD_EXP 29
6850: PUSH
6851: LD_EXP 31
6855: PUSH
6856: LD_EXP 32
6860: PUSH
6861: LD_EXP 33
6865: PUSH
6866: LD_EXP 36
6870: PUSH
6871: LD_EXP 38
6875: PUSH
6876: LD_EXP 39
6880: PUSH
6881: LD_EXP 40
6885: PUSH
6886: LD_EXP 42
6890: PUSH
6891: LD_EXP 43
6895: PUSH
6896: LD_EXP 46
6900: PUSH
6901: LD_EXP 47
6905: PUSH
6906: LD_EXP 48
6910: PUSH
6911: LD_EXP 49
6915: PUSH
6916: LD_EXP 50
6920: PUSH
6921: LD_EXP 51
6925: PUSH
6926: LD_EXP 52
6930: PUSH
6931: LD_EXP 53
6935: PUSH
6936: LD_EXP 54
6940: PUSH
6941: LD_EXP 19
6945: PUSH
6946: LD_EXP 20
6950: PUSH
6951: LD_EXP 23
6955: PUSH
6956: LD_EXP 24
6960: PUSH
6961: LD_EXP 25
6965: PUSH
6966: LD_EXP 21
6970: PUSH
6971: LD_EXP 22
6975: PUSH
6976: LD_EXP 30
6980: PUSH
6981: LD_EXP 34
6985: PUSH
6986: LD_EXP 35
6990: PUSH
6991: LD_EXP 37
6995: PUSH
6996: LD_EXP 41
7000: PUSH
7001: LD_EXP 44
7005: PUSH
7006: LD_EXP 45
7010: PUSH
7011: LD_EXP 55
7015: PUSH
7016: LD_EXP 56
7020: PUSH
7021: LD_EXP 57
7025: PUSH
7026: LD_EXP 58
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: LIST
7086: ST_TO_ADDR
// tmp :=  ;
7087: LD_ADDR_VAR 0 3
7091: PUSH
7092: LD_STRING 
7094: ST_TO_ADDR
// for i = 1 to normalCounter do
7095: LD_ADDR_VAR 0 8
7099: PUSH
7100: DOUBLE
7101: LD_INT 1
7103: DEC
7104: ST_TO_ADDR
7105: LD_EXP 3
7109: PUSH
7110: FOR_TO
7111: IFFALSE 7147
// begin if flags [ i ] then
7113: LD_VAR 0 4
7117: PUSH
7118: LD_VAR 0 8
7122: ARRAY
7123: IFFALSE 7145
// tmp := tmp & i & ; ;
7125: LD_ADDR_VAR 0 3
7129: PUSH
7130: LD_VAR 0 3
7134: PUSH
7135: LD_VAR 0 8
7139: STR
7140: PUSH
7141: LD_STRING ;
7143: STR
7144: ST_TO_ADDR
// end ;
7145: GO 7110
7147: POP
7148: POP
// for i = 1 to hardcoreCounter do
7149: LD_ADDR_VAR 0 8
7153: PUSH
7154: DOUBLE
7155: LD_INT 1
7157: DEC
7158: ST_TO_ADDR
7159: LD_EXP 4
7163: PUSH
7164: FOR_TO
7165: IFFALSE 7211
// begin if flags [ normalCounter + i ] then
7167: LD_VAR 0 4
7171: PUSH
7172: LD_EXP 3
7176: PUSH
7177: LD_VAR 0 8
7181: PLUS
7182: ARRAY
7183: IFFALSE 7209
// tmp := tmp & ( 100 + i ) & ; ;
7185: LD_ADDR_VAR 0 3
7189: PUSH
7190: LD_VAR 0 3
7194: PUSH
7195: LD_INT 100
7197: PUSH
7198: LD_VAR 0 8
7202: PLUS
7203: STR
7204: PUSH
7205: LD_STRING ;
7207: STR
7208: ST_TO_ADDR
// end ;
7209: GO 7164
7211: POP
7212: POP
// if tmp then
7213: LD_VAR 0 3
7217: IFFALSE 7229
// active := tmp ;
7219: LD_ADDR_VAR 0 7
7223: PUSH
7224: LD_VAR 0 3
7228: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7229: LD_STRING getStreamItemsFromMission("
7231: PUSH
7232: LD_VAR 0 5
7236: STR
7237: PUSH
7238: LD_STRING ","
7240: STR
7241: PUSH
7242: LD_VAR 0 6
7246: STR
7247: PUSH
7248: LD_STRING ","
7250: STR
7251: PUSH
7252: LD_VAR 0 7
7256: STR
7257: PUSH
7258: LD_STRING ")
7260: STR
7261: PPUSH
7262: CALL_OW 559
// end else
7266: GO 7275
// ToLua ( getStreamItemsFromMission("","","") ) ;
7268: LD_STRING getStreamItemsFromMission("","","")
7270: PPUSH
7271: CALL_OW 559
// end ;
7275: LD_VAR 0 2
7279: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7280: LD_EXP 2
7284: PUSH
7285: LD_EXP 7
7289: AND
7290: IFFALSE 7414
7292: GO 7294
7294: DISABLE
7295: LD_INT 0
7297: PPUSH
7298: PPUSH
// begin enable ;
7299: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7300: LD_ADDR_VAR 0 2
7304: PUSH
7305: LD_INT 22
7307: PUSH
7308: LD_OWVAR 2
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: PUSH
7317: LD_INT 2
7319: PUSH
7320: LD_INT 34
7322: PUSH
7323: LD_INT 7
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: PUSH
7330: LD_INT 34
7332: PUSH
7333: LD_INT 45
7335: PUSH
7336: EMPTY
7337: LIST
7338: LIST
7339: PUSH
7340: LD_INT 34
7342: PUSH
7343: LD_INT 28
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: PUSH
7350: LD_INT 34
7352: PUSH
7353: LD_INT 47
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: PPUSH
7371: CALL_OW 69
7375: ST_TO_ADDR
// if not tmp then
7376: LD_VAR 0 2
7380: NOT
7381: IFFALSE 7385
// exit ;
7383: GO 7414
// for i in tmp do
7385: LD_ADDR_VAR 0 1
7389: PUSH
7390: LD_VAR 0 2
7394: PUSH
7395: FOR_IN
7396: IFFALSE 7412
// begin SetLives ( i , 0 ) ;
7398: LD_VAR 0 1
7402: PPUSH
7403: LD_INT 0
7405: PPUSH
7406: CALL_OW 234
// end ;
7410: GO 7395
7412: POP
7413: POP
// end ;
7414: PPOPN 2
7416: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7417: LD_EXP 2
7421: PUSH
7422: LD_EXP 8
7426: AND
7427: IFFALSE 7511
7429: GO 7431
7431: DISABLE
7432: LD_INT 0
7434: PPUSH
7435: PPUSH
// begin enable ;
7436: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7437: LD_ADDR_VAR 0 2
7441: PUSH
7442: LD_INT 22
7444: PUSH
7445: LD_OWVAR 2
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PUSH
7454: LD_INT 32
7456: PUSH
7457: LD_INT 3
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: PPUSH
7468: CALL_OW 69
7472: ST_TO_ADDR
// if not tmp then
7473: LD_VAR 0 2
7477: NOT
7478: IFFALSE 7482
// exit ;
7480: GO 7511
// for i in tmp do
7482: LD_ADDR_VAR 0 1
7486: PUSH
7487: LD_VAR 0 2
7491: PUSH
7492: FOR_IN
7493: IFFALSE 7509
// begin SetLives ( i , 0 ) ;
7495: LD_VAR 0 1
7499: PPUSH
7500: LD_INT 0
7502: PPUSH
7503: CALL_OW 234
// end ;
7507: GO 7492
7509: POP
7510: POP
// end ;
7511: PPOPN 2
7513: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7514: LD_EXP 2
7518: PUSH
7519: LD_EXP 5
7523: AND
7524: IFFALSE 7617
7526: GO 7528
7528: DISABLE
7529: LD_INT 0
7531: PPUSH
// begin enable ;
7532: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7533: LD_ADDR_VAR 0 1
7537: PUSH
7538: LD_INT 22
7540: PUSH
7541: LD_OWVAR 2
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: PUSH
7550: LD_INT 2
7552: PUSH
7553: LD_INT 25
7555: PUSH
7556: LD_INT 5
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: PUSH
7563: LD_INT 25
7565: PUSH
7566: LD_INT 9
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PUSH
7573: LD_INT 25
7575: PUSH
7576: LD_INT 8
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: PUSH
7583: EMPTY
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: PPUSH
7593: CALL_OW 69
7597: PUSH
7598: FOR_IN
7599: IFFALSE 7615
// begin SetClass ( i , 1 ) ;
7601: LD_VAR 0 1
7605: PPUSH
7606: LD_INT 1
7608: PPUSH
7609: CALL_OW 336
// end ;
7613: GO 7598
7615: POP
7616: POP
// end ;
7617: PPOPN 1
7619: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7620: LD_EXP 2
7624: PUSH
7625: LD_EXP 6
7629: AND
7630: PUSH
7631: LD_OWVAR 65
7635: PUSH
7636: LD_INT 7
7638: LESS
7639: AND
7640: IFFALSE 7654
7642: GO 7644
7644: DISABLE
// begin enable ;
7645: ENABLE
// game_speed := 7 ;
7646: LD_ADDR_OWVAR 65
7650: PUSH
7651: LD_INT 7
7653: ST_TO_ADDR
// end ;
7654: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7655: LD_EXP 2
7659: PUSH
7660: LD_EXP 9
7664: AND
7665: IFFALSE 7867
7667: GO 7669
7669: DISABLE
7670: LD_INT 0
7672: PPUSH
7673: PPUSH
7674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7675: LD_ADDR_VAR 0 3
7679: PUSH
7680: LD_INT 81
7682: PUSH
7683: LD_OWVAR 2
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PUSH
7692: LD_INT 21
7694: PUSH
7695: LD_INT 1
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: PPUSH
7706: CALL_OW 69
7710: ST_TO_ADDR
// if not tmp then
7711: LD_VAR 0 3
7715: NOT
7716: IFFALSE 7720
// exit ;
7718: GO 7867
// if tmp > 5 then
7720: LD_VAR 0 3
7724: PUSH
7725: LD_INT 5
7727: GREATER
7728: IFFALSE 7740
// k := 5 else
7730: LD_ADDR_VAR 0 2
7734: PUSH
7735: LD_INT 5
7737: ST_TO_ADDR
7738: GO 7750
// k := tmp ;
7740: LD_ADDR_VAR 0 2
7744: PUSH
7745: LD_VAR 0 3
7749: ST_TO_ADDR
// for i := 1 to k do
7750: LD_ADDR_VAR 0 1
7754: PUSH
7755: DOUBLE
7756: LD_INT 1
7758: DEC
7759: ST_TO_ADDR
7760: LD_VAR 0 2
7764: PUSH
7765: FOR_TO
7766: IFFALSE 7865
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7768: LD_VAR 0 3
7772: PUSH
7773: LD_VAR 0 1
7777: ARRAY
7778: PPUSH
7779: LD_VAR 0 1
7783: PUSH
7784: LD_INT 4
7786: MOD
7787: PUSH
7788: LD_INT 1
7790: PLUS
7791: PPUSH
7792: CALL_OW 259
7796: PUSH
7797: LD_INT 10
7799: LESS
7800: IFFALSE 7863
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7802: LD_VAR 0 3
7806: PUSH
7807: LD_VAR 0 1
7811: ARRAY
7812: PPUSH
7813: LD_VAR 0 1
7817: PUSH
7818: LD_INT 4
7820: MOD
7821: PUSH
7822: LD_INT 1
7824: PLUS
7825: PPUSH
7826: LD_VAR 0 3
7830: PUSH
7831: LD_VAR 0 1
7835: ARRAY
7836: PPUSH
7837: LD_VAR 0 1
7841: PUSH
7842: LD_INT 4
7844: MOD
7845: PUSH
7846: LD_INT 1
7848: PLUS
7849: PPUSH
7850: CALL_OW 259
7854: PUSH
7855: LD_INT 1
7857: PLUS
7858: PPUSH
7859: CALL_OW 237
7863: GO 7765
7865: POP
7866: POP
// end ;
7867: PPOPN 3
7869: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
7870: LD_EXP 2
7874: PUSH
7875: LD_EXP 10
7879: AND
7880: IFFALSE 7900
7882: GO 7884
7884: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
7885: LD_INT 4
7887: PPUSH
7888: LD_OWVAR 2
7892: PPUSH
7893: LD_INT 0
7895: PPUSH
7896: CALL_OW 324
7900: END
// every 0 0$1 trigger StreamModeActive and sShovel do
7901: LD_EXP 2
7905: PUSH
7906: LD_EXP 39
7910: AND
7911: IFFALSE 7931
7913: GO 7915
7915: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
7916: LD_INT 19
7918: PPUSH
7919: LD_OWVAR 2
7923: PPUSH
7924: LD_INT 0
7926: PPUSH
7927: CALL_OW 324
7931: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
7932: LD_EXP 2
7936: PUSH
7937: LD_EXP 11
7941: AND
7942: IFFALSE 8044
7944: GO 7946
7946: DISABLE
7947: LD_INT 0
7949: PPUSH
7950: PPUSH
// begin enable ;
7951: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
7952: LD_ADDR_VAR 0 2
7956: PUSH
7957: LD_INT 22
7959: PUSH
7960: LD_OWVAR 2
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: PUSH
7969: LD_INT 2
7971: PUSH
7972: LD_INT 34
7974: PUSH
7975: LD_INT 11
7977: PUSH
7978: EMPTY
7979: LIST
7980: LIST
7981: PUSH
7982: LD_INT 34
7984: PUSH
7985: LD_INT 30
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: LIST
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: PPUSH
8001: CALL_OW 69
8005: ST_TO_ADDR
// if not tmp then
8006: LD_VAR 0 2
8010: NOT
8011: IFFALSE 8015
// exit ;
8013: GO 8044
// for i in tmp do
8015: LD_ADDR_VAR 0 1
8019: PUSH
8020: LD_VAR 0 2
8024: PUSH
8025: FOR_IN
8026: IFFALSE 8042
// begin SetLives ( i , 0 ) ;
8028: LD_VAR 0 1
8032: PPUSH
8033: LD_INT 0
8035: PPUSH
8036: CALL_OW 234
// end ;
8040: GO 8025
8042: POP
8043: POP
// end ;
8044: PPOPN 2
8046: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8047: LD_EXP 2
8051: PUSH
8052: LD_EXP 12
8056: AND
8057: IFFALSE 8077
8059: GO 8061
8061: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8062: LD_INT 32
8064: PPUSH
8065: LD_OWVAR 2
8069: PPUSH
8070: LD_INT 0
8072: PPUSH
8073: CALL_OW 324
8077: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8078: LD_EXP 2
8082: PUSH
8083: LD_EXP 13
8087: AND
8088: IFFALSE 8269
8090: GO 8092
8092: DISABLE
8093: LD_INT 0
8095: PPUSH
8096: PPUSH
8097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8098: LD_ADDR_VAR 0 2
8102: PUSH
8103: LD_INT 22
8105: PUSH
8106: LD_OWVAR 2
8110: PUSH
8111: EMPTY
8112: LIST
8113: LIST
8114: PUSH
8115: LD_INT 33
8117: PUSH
8118: LD_INT 3
8120: PUSH
8121: EMPTY
8122: LIST
8123: LIST
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: PPUSH
8129: CALL_OW 69
8133: ST_TO_ADDR
// if not tmp then
8134: LD_VAR 0 2
8138: NOT
8139: IFFALSE 8143
// exit ;
8141: GO 8269
// side := 0 ;
8143: LD_ADDR_VAR 0 3
8147: PUSH
8148: LD_INT 0
8150: ST_TO_ADDR
// for i := 1 to 8 do
8151: LD_ADDR_VAR 0 1
8155: PUSH
8156: DOUBLE
8157: LD_INT 1
8159: DEC
8160: ST_TO_ADDR
8161: LD_INT 8
8163: PUSH
8164: FOR_TO
8165: IFFALSE 8213
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8167: LD_OWVAR 2
8171: PUSH
8172: LD_VAR 0 1
8176: NONEQUAL
8177: PUSH
8178: LD_OWVAR 2
8182: PPUSH
8183: LD_VAR 0 1
8187: PPUSH
8188: CALL_OW 81
8192: PUSH
8193: LD_INT 2
8195: EQUAL
8196: AND
8197: IFFALSE 8211
// begin side := i ;
8199: LD_ADDR_VAR 0 3
8203: PUSH
8204: LD_VAR 0 1
8208: ST_TO_ADDR
// break ;
8209: GO 8213
// end ;
8211: GO 8164
8213: POP
8214: POP
// if not side then
8215: LD_VAR 0 3
8219: NOT
8220: IFFALSE 8224
// exit ;
8222: GO 8269
// for i := 1 to tmp do
8224: LD_ADDR_VAR 0 1
8228: PUSH
8229: DOUBLE
8230: LD_INT 1
8232: DEC
8233: ST_TO_ADDR
8234: LD_VAR 0 2
8238: PUSH
8239: FOR_TO
8240: IFFALSE 8267
// if Prob ( 60 ) then
8242: LD_INT 60
8244: PPUSH
8245: CALL_OW 13
8249: IFFALSE 8265
// SetSide ( i , side ) ;
8251: LD_VAR 0 1
8255: PPUSH
8256: LD_VAR 0 3
8260: PPUSH
8261: CALL_OW 235
8265: GO 8239
8267: POP
8268: POP
// end ;
8269: PPOPN 3
8271: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8272: LD_EXP 2
8276: PUSH
8277: LD_EXP 15
8281: AND
8282: IFFALSE 8401
8284: GO 8286
8286: DISABLE
8287: LD_INT 0
8289: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8290: LD_ADDR_VAR 0 1
8294: PUSH
8295: LD_INT 22
8297: PUSH
8298: LD_OWVAR 2
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: PUSH
8307: LD_INT 21
8309: PUSH
8310: LD_INT 1
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: PUSH
8317: LD_INT 3
8319: PUSH
8320: LD_INT 23
8322: PUSH
8323: LD_INT 0
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL_OW 69
8343: PUSH
8344: FOR_IN
8345: IFFALSE 8399
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8347: LD_VAR 0 1
8351: PPUSH
8352: CALL_OW 257
8356: PUSH
8357: LD_INT 1
8359: PUSH
8360: LD_INT 2
8362: PUSH
8363: LD_INT 3
8365: PUSH
8366: LD_INT 4
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: IN
8375: IFFALSE 8397
// SetClass ( un , rand ( 1 , 4 ) ) ;
8377: LD_VAR 0 1
8381: PPUSH
8382: LD_INT 1
8384: PPUSH
8385: LD_INT 4
8387: PPUSH
8388: CALL_OW 12
8392: PPUSH
8393: CALL_OW 336
8397: GO 8344
8399: POP
8400: POP
// end ;
8401: PPOPN 1
8403: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8404: LD_EXP 2
8408: PUSH
8409: LD_EXP 14
8413: AND
8414: IFFALSE 8493
8416: GO 8418
8418: DISABLE
8419: LD_INT 0
8421: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8422: LD_ADDR_VAR 0 1
8426: PUSH
8427: LD_INT 22
8429: PUSH
8430: LD_OWVAR 2
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: PUSH
8439: LD_INT 21
8441: PUSH
8442: LD_INT 3
8444: PUSH
8445: EMPTY
8446: LIST
8447: LIST
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: PPUSH
8453: CALL_OW 69
8457: ST_TO_ADDR
// if not tmp then
8458: LD_VAR 0 1
8462: NOT
8463: IFFALSE 8467
// exit ;
8465: GO 8493
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8467: LD_VAR 0 1
8471: PUSH
8472: LD_INT 1
8474: PPUSH
8475: LD_VAR 0 1
8479: PPUSH
8480: CALL_OW 12
8484: ARRAY
8485: PPUSH
8486: LD_INT 100
8488: PPUSH
8489: CALL_OW 234
// end ;
8493: PPOPN 1
8495: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8496: LD_EXP 2
8500: PUSH
8501: LD_EXP 16
8505: AND
8506: IFFALSE 8604
8508: GO 8510
8510: DISABLE
8511: LD_INT 0
8513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8514: LD_ADDR_VAR 0 1
8518: PUSH
8519: LD_INT 22
8521: PUSH
8522: LD_OWVAR 2
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: PUSH
8531: LD_INT 21
8533: PUSH
8534: LD_INT 1
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: PPUSH
8545: CALL_OW 69
8549: ST_TO_ADDR
// if not tmp then
8550: LD_VAR 0 1
8554: NOT
8555: IFFALSE 8559
// exit ;
8557: GO 8604
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8559: LD_VAR 0 1
8563: PUSH
8564: LD_INT 1
8566: PPUSH
8567: LD_VAR 0 1
8571: PPUSH
8572: CALL_OW 12
8576: ARRAY
8577: PPUSH
8578: LD_INT 1
8580: PPUSH
8581: LD_INT 4
8583: PPUSH
8584: CALL_OW 12
8588: PPUSH
8589: LD_INT 3000
8591: PPUSH
8592: LD_INT 9000
8594: PPUSH
8595: CALL_OW 12
8599: PPUSH
8600: CALL_OW 492
// end ;
8604: PPOPN 1
8606: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8607: LD_EXP 2
8611: PUSH
8612: LD_EXP 17
8616: AND
8617: IFFALSE 8637
8619: GO 8621
8621: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8622: LD_INT 1
8624: PPUSH
8625: LD_OWVAR 2
8629: PPUSH
8630: LD_INT 0
8632: PPUSH
8633: CALL_OW 324
8637: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8638: LD_EXP 2
8642: PUSH
8643: LD_EXP 18
8647: AND
8648: IFFALSE 8731
8650: GO 8652
8652: DISABLE
8653: LD_INT 0
8655: PPUSH
8656: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8657: LD_ADDR_VAR 0 2
8661: PUSH
8662: LD_INT 22
8664: PUSH
8665: LD_OWVAR 2
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PUSH
8674: LD_INT 21
8676: PUSH
8677: LD_INT 3
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PPUSH
8688: CALL_OW 69
8692: ST_TO_ADDR
// if not tmp then
8693: LD_VAR 0 2
8697: NOT
8698: IFFALSE 8702
// exit ;
8700: GO 8731
// for i in tmp do
8702: LD_ADDR_VAR 0 1
8706: PUSH
8707: LD_VAR 0 2
8711: PUSH
8712: FOR_IN
8713: IFFALSE 8729
// SetBLevel ( i , 10 ) ;
8715: LD_VAR 0 1
8719: PPUSH
8720: LD_INT 10
8722: PPUSH
8723: CALL_OW 241
8727: GO 8712
8729: POP
8730: POP
// end ;
8731: PPOPN 2
8733: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8734: LD_EXP 2
8738: PUSH
8739: LD_EXP 19
8743: AND
8744: IFFALSE 8855
8746: GO 8748
8748: DISABLE
8749: LD_INT 0
8751: PPUSH
8752: PPUSH
8753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8754: LD_ADDR_VAR 0 3
8758: PUSH
8759: LD_INT 22
8761: PUSH
8762: LD_OWVAR 2
8766: PUSH
8767: EMPTY
8768: LIST
8769: LIST
8770: PUSH
8771: LD_INT 25
8773: PUSH
8774: LD_INT 1
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: PPUSH
8785: CALL_OW 69
8789: ST_TO_ADDR
// if not tmp then
8790: LD_VAR 0 3
8794: NOT
8795: IFFALSE 8799
// exit ;
8797: GO 8855
// un := tmp [ rand ( 1 , tmp ) ] ;
8799: LD_ADDR_VAR 0 2
8803: PUSH
8804: LD_VAR 0 3
8808: PUSH
8809: LD_INT 1
8811: PPUSH
8812: LD_VAR 0 3
8816: PPUSH
8817: CALL_OW 12
8821: ARRAY
8822: ST_TO_ADDR
// if Crawls ( un ) then
8823: LD_VAR 0 2
8827: PPUSH
8828: CALL_OW 318
8832: IFFALSE 8843
// ComWalk ( un ) ;
8834: LD_VAR 0 2
8838: PPUSH
8839: CALL_OW 138
// SetClass ( un , class_sniper ) ;
8843: LD_VAR 0 2
8847: PPUSH
8848: LD_INT 5
8850: PPUSH
8851: CALL_OW 336
// end ;
8855: PPOPN 3
8857: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
8858: LD_EXP 2
8862: PUSH
8863: LD_EXP 20
8867: AND
8868: PUSH
8869: LD_OWVAR 67
8873: PUSH
8874: LD_INT 4
8876: LESS
8877: AND
8878: IFFALSE 8897
8880: GO 8882
8882: DISABLE
// begin Difficulty := Difficulty + 1 ;
8883: LD_ADDR_OWVAR 67
8887: PUSH
8888: LD_OWVAR 67
8892: PUSH
8893: LD_INT 1
8895: PLUS
8896: ST_TO_ADDR
// end ;
8897: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
8898: LD_EXP 2
8902: PUSH
8903: LD_EXP 21
8907: AND
8908: IFFALSE 9011
8910: GO 8912
8912: DISABLE
8913: LD_INT 0
8915: PPUSH
// begin for i := 1 to 5 do
8916: LD_ADDR_VAR 0 1
8920: PUSH
8921: DOUBLE
8922: LD_INT 1
8924: DEC
8925: ST_TO_ADDR
8926: LD_INT 5
8928: PUSH
8929: FOR_TO
8930: IFFALSE 9009
// begin uc_nation := nation_nature ;
8932: LD_ADDR_OWVAR 21
8936: PUSH
8937: LD_INT 0
8939: ST_TO_ADDR
// uc_side := 0 ;
8940: LD_ADDR_OWVAR 20
8944: PUSH
8945: LD_INT 0
8947: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8948: LD_ADDR_OWVAR 29
8952: PUSH
8953: LD_INT 12
8955: PUSH
8956: LD_INT 12
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: ST_TO_ADDR
// hc_agressivity := 20 ;
8963: LD_ADDR_OWVAR 35
8967: PUSH
8968: LD_INT 20
8970: ST_TO_ADDR
// hc_class := class_tiger ;
8971: LD_ADDR_OWVAR 28
8975: PUSH
8976: LD_INT 14
8978: ST_TO_ADDR
// hc_gallery :=  ;
8979: LD_ADDR_OWVAR 33
8983: PUSH
8984: LD_STRING 
8986: ST_TO_ADDR
// hc_name :=  ;
8987: LD_ADDR_OWVAR 26
8991: PUSH
8992: LD_STRING 
8994: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
8995: CALL_OW 44
8999: PPUSH
9000: LD_INT 0
9002: PPUSH
9003: CALL_OW 51
// end ;
9007: GO 8929
9009: POP
9010: POP
// end ;
9011: PPOPN 1
9013: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9014: LD_EXP 2
9018: PUSH
9019: LD_EXP 22
9023: AND
9024: IFFALSE 9033
9026: GO 9028
9028: DISABLE
// StreamSibBomb ;
9029: CALL 9034 0 0
9033: END
// export function StreamSibBomb ; var i , x , y ; begin
9034: LD_INT 0
9036: PPUSH
9037: PPUSH
9038: PPUSH
9039: PPUSH
// result := false ;
9040: LD_ADDR_VAR 0 1
9044: PUSH
9045: LD_INT 0
9047: ST_TO_ADDR
// for i := 1 to 16 do
9048: LD_ADDR_VAR 0 2
9052: PUSH
9053: DOUBLE
9054: LD_INT 1
9056: DEC
9057: ST_TO_ADDR
9058: LD_INT 16
9060: PUSH
9061: FOR_TO
9062: IFFALSE 9261
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9064: LD_ADDR_VAR 0 3
9068: PUSH
9069: LD_INT 10
9071: PUSH
9072: LD_INT 20
9074: PUSH
9075: LD_INT 30
9077: PUSH
9078: LD_INT 40
9080: PUSH
9081: LD_INT 50
9083: PUSH
9084: LD_INT 60
9086: PUSH
9087: LD_INT 70
9089: PUSH
9090: LD_INT 80
9092: PUSH
9093: LD_INT 90
9095: PUSH
9096: LD_INT 100
9098: PUSH
9099: LD_INT 110
9101: PUSH
9102: LD_INT 120
9104: PUSH
9105: LD_INT 130
9107: PUSH
9108: LD_INT 140
9110: PUSH
9111: LD_INT 150
9113: PUSH
9114: EMPTY
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: PUSH
9131: LD_INT 1
9133: PPUSH
9134: LD_INT 15
9136: PPUSH
9137: CALL_OW 12
9141: ARRAY
9142: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9143: LD_ADDR_VAR 0 4
9147: PUSH
9148: LD_INT 10
9150: PUSH
9151: LD_INT 20
9153: PUSH
9154: LD_INT 30
9156: PUSH
9157: LD_INT 40
9159: PUSH
9160: LD_INT 50
9162: PUSH
9163: LD_INT 60
9165: PUSH
9166: LD_INT 70
9168: PUSH
9169: LD_INT 80
9171: PUSH
9172: LD_INT 90
9174: PUSH
9175: LD_INT 100
9177: PUSH
9178: LD_INT 110
9180: PUSH
9181: LD_INT 120
9183: PUSH
9184: LD_INT 130
9186: PUSH
9187: LD_INT 140
9189: PUSH
9190: LD_INT 150
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: PUSH
9210: LD_INT 1
9212: PPUSH
9213: LD_INT 15
9215: PPUSH
9216: CALL_OW 12
9220: ARRAY
9221: ST_TO_ADDR
// if ValidHex ( x , y ) then
9222: LD_VAR 0 3
9226: PPUSH
9227: LD_VAR 0 4
9231: PPUSH
9232: CALL_OW 488
9236: IFFALSE 9259
// begin result := [ x , y ] ;
9238: LD_ADDR_VAR 0 1
9242: PUSH
9243: LD_VAR 0 3
9247: PUSH
9248: LD_VAR 0 4
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: ST_TO_ADDR
// break ;
9257: GO 9261
// end ; end ;
9259: GO 9061
9261: POP
9262: POP
// if result then
9263: LD_VAR 0 1
9267: IFFALSE 9327
// begin ToLua ( playSibBomb() ) ;
9269: LD_STRING playSibBomb()
9271: PPUSH
9272: CALL_OW 559
// wait ( 0 0$14 ) ;
9276: LD_INT 490
9278: PPUSH
9279: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9283: LD_VAR 0 1
9287: PUSH
9288: LD_INT 1
9290: ARRAY
9291: PPUSH
9292: LD_VAR 0 1
9296: PUSH
9297: LD_INT 2
9299: ARRAY
9300: PPUSH
9301: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9305: LD_VAR 0 1
9309: PUSH
9310: LD_INT 1
9312: ARRAY
9313: PPUSH
9314: LD_VAR 0 1
9318: PUSH
9319: LD_INT 2
9321: ARRAY
9322: PPUSH
9323: CALL_OW 429
// end ; end ;
9327: LD_VAR 0 1
9331: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9332: LD_EXP 2
9336: PUSH
9337: LD_EXP 24
9341: AND
9342: IFFALSE 9354
9344: GO 9346
9346: DISABLE
// YouLost (  ) ;
9347: LD_STRING 
9349: PPUSH
9350: CALL_OW 104
9354: END
// every 0 0$1 trigger StreamModeActive and sFog do
9355: LD_EXP 2
9359: PUSH
9360: LD_EXP 23
9364: AND
9365: IFFALSE 9379
9367: GO 9369
9369: DISABLE
// FogOff ( your_side ) ;
9370: LD_OWVAR 2
9374: PPUSH
9375: CALL_OW 344
9379: END
// every 0 0$1 trigger StreamModeActive and sSun do
9380: LD_EXP 2
9384: PUSH
9385: LD_EXP 25
9389: AND
9390: IFFALSE 9418
9392: GO 9394
9394: DISABLE
// begin solar_recharge_percent := 0 ;
9395: LD_ADDR_OWVAR 79
9399: PUSH
9400: LD_INT 0
9402: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9403: LD_INT 10500
9405: PPUSH
9406: CALL_OW 67
// solar_recharge_percent := 100 ;
9410: LD_ADDR_OWVAR 79
9414: PUSH
9415: LD_INT 100
9417: ST_TO_ADDR
// end ;
9418: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9419: LD_EXP 2
9423: PUSH
9424: LD_EXP 26
9428: AND
9429: IFFALSE 9668
9431: GO 9433
9433: DISABLE
9434: LD_INT 0
9436: PPUSH
9437: PPUSH
9438: PPUSH
// begin tmp := [ ] ;
9439: LD_ADDR_VAR 0 3
9443: PUSH
9444: EMPTY
9445: ST_TO_ADDR
// for i := 1 to 6 do
9446: LD_ADDR_VAR 0 1
9450: PUSH
9451: DOUBLE
9452: LD_INT 1
9454: DEC
9455: ST_TO_ADDR
9456: LD_INT 6
9458: PUSH
9459: FOR_TO
9460: IFFALSE 9565
// begin uc_nation := nation_nature ;
9462: LD_ADDR_OWVAR 21
9466: PUSH
9467: LD_INT 0
9469: ST_TO_ADDR
// uc_side := 0 ;
9470: LD_ADDR_OWVAR 20
9474: PUSH
9475: LD_INT 0
9477: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9478: LD_ADDR_OWVAR 29
9482: PUSH
9483: LD_INT 12
9485: PUSH
9486: LD_INT 12
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: ST_TO_ADDR
// hc_agressivity := 20 ;
9493: LD_ADDR_OWVAR 35
9497: PUSH
9498: LD_INT 20
9500: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9501: LD_ADDR_OWVAR 28
9505: PUSH
9506: LD_INT 17
9508: ST_TO_ADDR
// hc_gallery :=  ;
9509: LD_ADDR_OWVAR 33
9513: PUSH
9514: LD_STRING 
9516: ST_TO_ADDR
// hc_name :=  ;
9517: LD_ADDR_OWVAR 26
9521: PUSH
9522: LD_STRING 
9524: ST_TO_ADDR
// un := CreateHuman ;
9525: LD_ADDR_VAR 0 2
9529: PUSH
9530: CALL_OW 44
9534: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9535: LD_VAR 0 2
9539: PPUSH
9540: LD_INT 1
9542: PPUSH
9543: CALL_OW 51
// tmp := tmp ^ un ;
9547: LD_ADDR_VAR 0 3
9551: PUSH
9552: LD_VAR 0 3
9556: PUSH
9557: LD_VAR 0 2
9561: ADD
9562: ST_TO_ADDR
// end ;
9563: GO 9459
9565: POP
9566: POP
// repeat wait ( 0 0$1 ) ;
9567: LD_INT 35
9569: PPUSH
9570: CALL_OW 67
// for un in tmp do
9574: LD_ADDR_VAR 0 2
9578: PUSH
9579: LD_VAR 0 3
9583: PUSH
9584: FOR_IN
9585: IFFALSE 9659
// begin if IsDead ( un ) then
9587: LD_VAR 0 2
9591: PPUSH
9592: CALL_OW 301
9596: IFFALSE 9616
// begin tmp := tmp diff un ;
9598: LD_ADDR_VAR 0 3
9602: PUSH
9603: LD_VAR 0 3
9607: PUSH
9608: LD_VAR 0 2
9612: DIFF
9613: ST_TO_ADDR
// continue ;
9614: GO 9584
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9616: LD_VAR 0 2
9620: PPUSH
9621: LD_INT 3
9623: PUSH
9624: LD_INT 22
9626: PUSH
9627: LD_INT 0
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PPUSH
9638: CALL_OW 69
9642: PPUSH
9643: LD_VAR 0 2
9647: PPUSH
9648: CALL_OW 74
9652: PPUSH
9653: CALL_OW 115
// end ;
9657: GO 9584
9659: POP
9660: POP
// until not tmp ;
9661: LD_VAR 0 3
9665: NOT
9666: IFFALSE 9567
// end ;
9668: PPOPN 3
9670: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9671: LD_EXP 2
9675: PUSH
9676: LD_EXP 27
9680: AND
9681: IFFALSE 9735
9683: GO 9685
9685: DISABLE
// begin ToLua ( displayTroll(); ) ;
9686: LD_STRING displayTroll();
9688: PPUSH
9689: CALL_OW 559
// wait ( 3 3$00 ) ;
9693: LD_INT 6300
9695: PPUSH
9696: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9700: LD_STRING hideTroll();
9702: PPUSH
9703: CALL_OW 559
// wait ( 1 1$00 ) ;
9707: LD_INT 2100
9709: PPUSH
9710: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9714: LD_STRING displayTroll();
9716: PPUSH
9717: CALL_OW 559
// wait ( 1 1$00 ) ;
9721: LD_INT 2100
9723: PPUSH
9724: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9728: LD_STRING hideTroll();
9730: PPUSH
9731: CALL_OW 559
// end ;
9735: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9736: LD_EXP 2
9740: PUSH
9741: LD_EXP 28
9745: AND
9746: IFFALSE 9809
9748: GO 9750
9750: DISABLE
9751: LD_INT 0
9753: PPUSH
// begin p := 0 ;
9754: LD_ADDR_VAR 0 1
9758: PUSH
9759: LD_INT 0
9761: ST_TO_ADDR
// repeat game_speed := 1 ;
9762: LD_ADDR_OWVAR 65
9766: PUSH
9767: LD_INT 1
9769: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9770: LD_INT 35
9772: PPUSH
9773: CALL_OW 67
// p := p + 1 ;
9777: LD_ADDR_VAR 0 1
9781: PUSH
9782: LD_VAR 0 1
9786: PUSH
9787: LD_INT 1
9789: PLUS
9790: ST_TO_ADDR
// until p >= 60 ;
9791: LD_VAR 0 1
9795: PUSH
9796: LD_INT 60
9798: GREATEREQUAL
9799: IFFALSE 9762
// game_speed := 4 ;
9801: LD_ADDR_OWVAR 65
9805: PUSH
9806: LD_INT 4
9808: ST_TO_ADDR
// end ;
9809: PPOPN 1
9811: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9812: LD_EXP 2
9816: PUSH
9817: LD_EXP 29
9821: AND
9822: IFFALSE 9968
9824: GO 9826
9826: DISABLE
9827: LD_INT 0
9829: PPUSH
9830: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9831: LD_ADDR_VAR 0 1
9835: PUSH
9836: LD_INT 22
9838: PUSH
9839: LD_OWVAR 2
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: PUSH
9848: LD_INT 2
9850: PUSH
9851: LD_INT 30
9853: PUSH
9854: LD_INT 0
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: LD_INT 30
9863: PUSH
9864: LD_INT 1
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: LIST
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PPUSH
9880: CALL_OW 69
9884: ST_TO_ADDR
// if not depot then
9885: LD_VAR 0 1
9889: NOT
9890: IFFALSE 9894
// exit ;
9892: GO 9968
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
9894: LD_ADDR_VAR 0 2
9898: PUSH
9899: LD_VAR 0 1
9903: PUSH
9904: LD_INT 1
9906: PPUSH
9907: LD_VAR 0 1
9911: PPUSH
9912: CALL_OW 12
9916: ARRAY
9917: PPUSH
9918: CALL_OW 274
9922: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
9923: LD_VAR 0 2
9927: PPUSH
9928: LD_INT 1
9930: PPUSH
9931: LD_INT 0
9933: PPUSH
9934: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
9938: LD_VAR 0 2
9942: PPUSH
9943: LD_INT 2
9945: PPUSH
9946: LD_INT 0
9948: PPUSH
9949: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
9953: LD_VAR 0 2
9957: PPUSH
9958: LD_INT 3
9960: PPUSH
9961: LD_INT 0
9963: PPUSH
9964: CALL_OW 277
// end ;
9968: PPOPN 2
9970: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
9971: LD_EXP 2
9975: PUSH
9976: LD_EXP 30
9980: AND
9981: IFFALSE 10078
9983: GO 9985
9985: DISABLE
9986: LD_INT 0
9988: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
9989: LD_ADDR_VAR 0 1
9993: PUSH
9994: LD_INT 22
9996: PUSH
9997: LD_OWVAR 2
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: PUSH
10006: LD_INT 21
10008: PUSH
10009: LD_INT 1
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: LD_INT 3
10018: PUSH
10019: LD_INT 23
10021: PUSH
10022: LD_INT 0
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: LIST
10037: PPUSH
10038: CALL_OW 69
10042: ST_TO_ADDR
// if not tmp then
10043: LD_VAR 0 1
10047: NOT
10048: IFFALSE 10052
// exit ;
10050: GO 10078
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10052: LD_VAR 0 1
10056: PUSH
10057: LD_INT 1
10059: PPUSH
10060: LD_VAR 0 1
10064: PPUSH
10065: CALL_OW 12
10069: ARRAY
10070: PPUSH
10071: LD_INT 200
10073: PPUSH
10074: CALL_OW 234
// end ;
10078: PPOPN 1
10080: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10081: LD_EXP 2
10085: PUSH
10086: LD_EXP 31
10090: AND
10091: IFFALSE 10170
10093: GO 10095
10095: DISABLE
10096: LD_INT 0
10098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10099: LD_ADDR_VAR 0 1
10103: PUSH
10104: LD_INT 22
10106: PUSH
10107: LD_OWVAR 2
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: LD_INT 21
10118: PUSH
10119: LD_INT 2
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PPUSH
10130: CALL_OW 69
10134: ST_TO_ADDR
// if not tmp then
10135: LD_VAR 0 1
10139: NOT
10140: IFFALSE 10144
// exit ;
10142: GO 10170
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10144: LD_VAR 0 1
10148: PUSH
10149: LD_INT 1
10151: PPUSH
10152: LD_VAR 0 1
10156: PPUSH
10157: CALL_OW 12
10161: ARRAY
10162: PPUSH
10163: LD_INT 60
10165: PPUSH
10166: CALL_OW 234
// end ;
10170: PPOPN 1
10172: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10173: LD_EXP 2
10177: PUSH
10178: LD_EXP 32
10182: AND
10183: IFFALSE 10282
10185: GO 10187
10187: DISABLE
10188: LD_INT 0
10190: PPUSH
10191: PPUSH
// begin enable ;
10192: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10193: LD_ADDR_VAR 0 1
10197: PUSH
10198: LD_INT 22
10200: PUSH
10201: LD_OWVAR 2
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PUSH
10210: LD_INT 61
10212: PUSH
10213: EMPTY
10214: LIST
10215: PUSH
10216: LD_INT 33
10218: PUSH
10219: LD_INT 2
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: LIST
10230: PPUSH
10231: CALL_OW 69
10235: ST_TO_ADDR
// if not tmp then
10236: LD_VAR 0 1
10240: NOT
10241: IFFALSE 10245
// exit ;
10243: GO 10282
// for i in tmp do
10245: LD_ADDR_VAR 0 2
10249: PUSH
10250: LD_VAR 0 1
10254: PUSH
10255: FOR_IN
10256: IFFALSE 10280
// if IsControledBy ( i ) then
10258: LD_VAR 0 2
10262: PPUSH
10263: CALL_OW 312
10267: IFFALSE 10278
// ComUnlink ( i ) ;
10269: LD_VAR 0 2
10273: PPUSH
10274: CALL_OW 136
10278: GO 10255
10280: POP
10281: POP
// end ;
10282: PPOPN 2
10284: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10285: LD_EXP 2
10289: PUSH
10290: LD_EXP 33
10294: AND
10295: IFFALSE 10435
10297: GO 10299
10299: DISABLE
10300: LD_INT 0
10302: PPUSH
10303: PPUSH
// begin ToLua ( displayPowell(); ) ;
10304: LD_STRING displayPowell();
10306: PPUSH
10307: CALL_OW 559
// uc_side := 0 ;
10311: LD_ADDR_OWVAR 20
10315: PUSH
10316: LD_INT 0
10318: ST_TO_ADDR
// uc_nation := 2 ;
10319: LD_ADDR_OWVAR 21
10323: PUSH
10324: LD_INT 2
10326: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10327: LD_ADDR_OWVAR 37
10331: PUSH
10332: LD_INT 14
10334: ST_TO_ADDR
// vc_engine := engine_siberite ;
10335: LD_ADDR_OWVAR 39
10339: PUSH
10340: LD_INT 3
10342: ST_TO_ADDR
// vc_control := control_apeman ;
10343: LD_ADDR_OWVAR 38
10347: PUSH
10348: LD_INT 5
10350: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10351: LD_ADDR_OWVAR 40
10355: PUSH
10356: LD_INT 29
10358: ST_TO_ADDR
// un := CreateVehicle ;
10359: LD_ADDR_VAR 0 2
10363: PUSH
10364: CALL_OW 45
10368: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10369: LD_VAR 0 2
10373: PPUSH
10374: LD_INT 1
10376: PPUSH
10377: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10381: LD_INT 35
10383: PPUSH
10384: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10388: LD_VAR 0 2
10392: PPUSH
10393: LD_INT 22
10395: PUSH
10396: LD_OWVAR 2
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: PPUSH
10405: CALL_OW 69
10409: PPUSH
10410: LD_VAR 0 2
10414: PPUSH
10415: CALL_OW 74
10419: PPUSH
10420: CALL_OW 115
// until IsDead ( un ) ;
10424: LD_VAR 0 2
10428: PPUSH
10429: CALL_OW 301
10433: IFFALSE 10381
// end ;
10435: PPOPN 2
10437: END
// every 0 0$1 trigger StreamModeActive and sStu do
10438: LD_EXP 2
10442: PUSH
10443: LD_EXP 41
10447: AND
10448: IFFALSE 10464
10450: GO 10452
10452: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10453: LD_STRING displayStucuk();
10455: PPUSH
10456: CALL_OW 559
// ResetFog ;
10460: CALL_OW 335
// end ;
10464: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10465: LD_EXP 2
10469: PUSH
10470: LD_EXP 34
10474: AND
10475: IFFALSE 10616
10477: GO 10479
10479: DISABLE
10480: LD_INT 0
10482: PPUSH
10483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10484: LD_ADDR_VAR 0 2
10488: PUSH
10489: LD_INT 22
10491: PUSH
10492: LD_OWVAR 2
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: PUSH
10501: LD_INT 21
10503: PUSH
10504: LD_INT 1
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: PPUSH
10515: CALL_OW 69
10519: ST_TO_ADDR
// if not tmp then
10520: LD_VAR 0 2
10524: NOT
10525: IFFALSE 10529
// exit ;
10527: GO 10616
// un := tmp [ rand ( 1 , tmp ) ] ;
10529: LD_ADDR_VAR 0 1
10533: PUSH
10534: LD_VAR 0 2
10538: PUSH
10539: LD_INT 1
10541: PPUSH
10542: LD_VAR 0 2
10546: PPUSH
10547: CALL_OW 12
10551: ARRAY
10552: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10553: LD_VAR 0 1
10557: PPUSH
10558: LD_INT 0
10560: PPUSH
10561: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10565: LD_VAR 0 1
10569: PPUSH
10570: LD_OWVAR 3
10574: PUSH
10575: LD_VAR 0 1
10579: DIFF
10580: PPUSH
10581: LD_VAR 0 1
10585: PPUSH
10586: CALL_OW 74
10590: PPUSH
10591: CALL_OW 115
// wait ( 0 0$20 ) ;
10595: LD_INT 700
10597: PPUSH
10598: CALL_OW 67
// SetSide ( un , your_side ) ;
10602: LD_VAR 0 1
10606: PPUSH
10607: LD_OWVAR 2
10611: PPUSH
10612: CALL_OW 235
// end ;
10616: PPOPN 2
10618: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10619: LD_EXP 2
10623: PUSH
10624: LD_EXP 35
10628: AND
10629: IFFALSE 10735
10631: GO 10633
10633: DISABLE
10634: LD_INT 0
10636: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10637: LD_ADDR_VAR 0 1
10641: PUSH
10642: LD_INT 22
10644: PUSH
10645: LD_OWVAR 2
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: PUSH
10654: LD_INT 2
10656: PUSH
10657: LD_INT 30
10659: PUSH
10660: LD_INT 0
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: PUSH
10667: LD_INT 30
10669: PUSH
10670: LD_INT 1
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: LIST
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: PPUSH
10686: CALL_OW 69
10690: ST_TO_ADDR
// if not depot then
10691: LD_VAR 0 1
10695: NOT
10696: IFFALSE 10700
// exit ;
10698: GO 10735
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10700: LD_VAR 0 1
10704: PUSH
10705: LD_INT 1
10707: ARRAY
10708: PPUSH
10709: CALL_OW 250
10713: PPUSH
10714: LD_VAR 0 1
10718: PUSH
10719: LD_INT 1
10721: ARRAY
10722: PPUSH
10723: CALL_OW 251
10727: PPUSH
10728: LD_INT 70
10730: PPUSH
10731: CALL_OW 495
// end ;
10735: PPOPN 1
10737: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10738: LD_EXP 2
10742: PUSH
10743: LD_EXP 36
10747: AND
10748: IFFALSE 10959
10750: GO 10752
10752: DISABLE
10753: LD_INT 0
10755: PPUSH
10756: PPUSH
10757: PPUSH
10758: PPUSH
10759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10760: LD_ADDR_VAR 0 5
10764: PUSH
10765: LD_INT 22
10767: PUSH
10768: LD_OWVAR 2
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: PUSH
10777: LD_INT 21
10779: PUSH
10780: LD_INT 1
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PPUSH
10791: CALL_OW 69
10795: ST_TO_ADDR
// if not tmp then
10796: LD_VAR 0 5
10800: NOT
10801: IFFALSE 10805
// exit ;
10803: GO 10959
// for i in tmp do
10805: LD_ADDR_VAR 0 1
10809: PUSH
10810: LD_VAR 0 5
10814: PUSH
10815: FOR_IN
10816: IFFALSE 10957
// begin d := rand ( 0 , 5 ) ;
10818: LD_ADDR_VAR 0 4
10822: PUSH
10823: LD_INT 0
10825: PPUSH
10826: LD_INT 5
10828: PPUSH
10829: CALL_OW 12
10833: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10834: LD_ADDR_VAR 0 2
10838: PUSH
10839: LD_VAR 0 1
10843: PPUSH
10844: CALL_OW 250
10848: PPUSH
10849: LD_VAR 0 4
10853: PPUSH
10854: LD_INT 3
10856: PPUSH
10857: LD_INT 12
10859: PPUSH
10860: CALL_OW 12
10864: PPUSH
10865: CALL_OW 272
10869: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
10870: LD_ADDR_VAR 0 3
10874: PUSH
10875: LD_VAR 0 1
10879: PPUSH
10880: CALL_OW 251
10884: PPUSH
10885: LD_VAR 0 4
10889: PPUSH
10890: LD_INT 3
10892: PPUSH
10893: LD_INT 12
10895: PPUSH
10896: CALL_OW 12
10900: PPUSH
10901: CALL_OW 273
10905: ST_TO_ADDR
// if ValidHex ( x , y ) then
10906: LD_VAR 0 2
10910: PPUSH
10911: LD_VAR 0 3
10915: PPUSH
10916: CALL_OW 488
10920: IFFALSE 10955
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
10922: LD_VAR 0 1
10926: PPUSH
10927: LD_VAR 0 2
10931: PPUSH
10932: LD_VAR 0 3
10936: PPUSH
10937: LD_INT 3
10939: PPUSH
10940: LD_INT 6
10942: PPUSH
10943: CALL_OW 12
10947: PPUSH
10948: LD_INT 1
10950: PPUSH
10951: CALL_OW 483
// end ;
10955: GO 10815
10957: POP
10958: POP
// end ;
10959: PPOPN 5
10961: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
10962: LD_EXP 2
10966: PUSH
10967: LD_EXP 37
10971: AND
10972: IFFALSE 11066
10974: GO 10976
10976: DISABLE
10977: LD_INT 0
10979: PPUSH
10980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
10981: LD_ADDR_VAR 0 2
10985: PUSH
10986: LD_INT 22
10988: PUSH
10989: LD_OWVAR 2
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: PUSH
10998: LD_INT 32
11000: PUSH
11001: LD_INT 1
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: PUSH
11008: LD_INT 21
11010: PUSH
11011: LD_INT 2
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: LIST
11022: PPUSH
11023: CALL_OW 69
11027: ST_TO_ADDR
// if not tmp then
11028: LD_VAR 0 2
11032: NOT
11033: IFFALSE 11037
// exit ;
11035: GO 11066
// for i in tmp do
11037: LD_ADDR_VAR 0 1
11041: PUSH
11042: LD_VAR 0 2
11046: PUSH
11047: FOR_IN
11048: IFFALSE 11064
// SetFuel ( i , 0 ) ;
11050: LD_VAR 0 1
11054: PPUSH
11055: LD_INT 0
11057: PPUSH
11058: CALL_OW 240
11062: GO 11047
11064: POP
11065: POP
// end ;
11066: PPOPN 2
11068: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11069: LD_EXP 2
11073: PUSH
11074: LD_EXP 38
11078: AND
11079: IFFALSE 11145
11081: GO 11083
11083: DISABLE
11084: LD_INT 0
11086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11087: LD_ADDR_VAR 0 1
11091: PUSH
11092: LD_INT 22
11094: PUSH
11095: LD_OWVAR 2
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: PUSH
11104: LD_INT 30
11106: PUSH
11107: LD_INT 29
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: PPUSH
11118: CALL_OW 69
11122: ST_TO_ADDR
// if not tmp then
11123: LD_VAR 0 1
11127: NOT
11128: IFFALSE 11132
// exit ;
11130: GO 11145
// DestroyUnit ( tmp [ 1 ] ) ;
11132: LD_VAR 0 1
11136: PUSH
11137: LD_INT 1
11139: ARRAY
11140: PPUSH
11141: CALL_OW 65
// end ;
11145: PPOPN 1
11147: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11148: LD_EXP 2
11152: PUSH
11153: LD_EXP 40
11157: AND
11158: IFFALSE 11287
11160: GO 11162
11162: DISABLE
11163: LD_INT 0
11165: PPUSH
// begin uc_side := 0 ;
11166: LD_ADDR_OWVAR 20
11170: PUSH
11171: LD_INT 0
11173: ST_TO_ADDR
// uc_nation := nation_arabian ;
11174: LD_ADDR_OWVAR 21
11178: PUSH
11179: LD_INT 2
11181: ST_TO_ADDR
// hc_gallery :=  ;
11182: LD_ADDR_OWVAR 33
11186: PUSH
11187: LD_STRING 
11189: ST_TO_ADDR
// hc_name :=  ;
11190: LD_ADDR_OWVAR 26
11194: PUSH
11195: LD_STRING 
11197: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11198: LD_INT 1
11200: PPUSH
11201: LD_INT 11
11203: PPUSH
11204: LD_INT 10
11206: PPUSH
11207: CALL_OW 380
// un := CreateHuman ;
11211: LD_ADDR_VAR 0 1
11215: PUSH
11216: CALL_OW 44
11220: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11221: LD_VAR 0 1
11225: PPUSH
11226: LD_INT 1
11228: PPUSH
11229: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11233: LD_INT 35
11235: PPUSH
11236: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11240: LD_VAR 0 1
11244: PPUSH
11245: LD_INT 22
11247: PUSH
11248: LD_OWVAR 2
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PPUSH
11257: CALL_OW 69
11261: PPUSH
11262: LD_VAR 0 1
11266: PPUSH
11267: CALL_OW 74
11271: PPUSH
11272: CALL_OW 115
// until IsDead ( un ) ;
11276: LD_VAR 0 1
11280: PPUSH
11281: CALL_OW 301
11285: IFFALSE 11233
// end ;
11287: PPOPN 1
11289: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11290: LD_EXP 2
11294: PUSH
11295: LD_EXP 42
11299: AND
11300: IFFALSE 11312
11302: GO 11304
11304: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11305: LD_STRING earthquake(getX(game), 0, 32)
11307: PPUSH
11308: CALL_OW 559
11312: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11313: LD_EXP 2
11317: PUSH
11318: LD_EXP 43
11322: AND
11323: IFFALSE 11414
11325: GO 11327
11327: DISABLE
11328: LD_INT 0
11330: PPUSH
// begin enable ;
11331: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11332: LD_ADDR_VAR 0 1
11336: PUSH
11337: LD_INT 22
11339: PUSH
11340: LD_OWVAR 2
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: LD_INT 21
11351: PUSH
11352: LD_INT 2
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PUSH
11359: LD_INT 33
11361: PUSH
11362: LD_INT 3
11364: PUSH
11365: EMPTY
11366: LIST
11367: LIST
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: LIST
11373: PPUSH
11374: CALL_OW 69
11378: ST_TO_ADDR
// if not tmp then
11379: LD_VAR 0 1
11383: NOT
11384: IFFALSE 11388
// exit ;
11386: GO 11414
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11388: LD_VAR 0 1
11392: PUSH
11393: LD_INT 1
11395: PPUSH
11396: LD_VAR 0 1
11400: PPUSH
11401: CALL_OW 12
11405: ARRAY
11406: PPUSH
11407: LD_INT 1
11409: PPUSH
11410: CALL_OW 234
// end ;
11414: PPOPN 1
11416: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11417: LD_EXP 2
11421: PUSH
11422: LD_EXP 44
11426: AND
11427: IFFALSE 11568
11429: GO 11431
11431: DISABLE
11432: LD_INT 0
11434: PPUSH
11435: PPUSH
11436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11437: LD_ADDR_VAR 0 3
11441: PUSH
11442: LD_INT 22
11444: PUSH
11445: LD_OWVAR 2
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: PUSH
11454: LD_INT 25
11456: PUSH
11457: LD_INT 1
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PUSH
11464: EMPTY
11465: LIST
11466: LIST
11467: PPUSH
11468: CALL_OW 69
11472: ST_TO_ADDR
// if not tmp then
11473: LD_VAR 0 3
11477: NOT
11478: IFFALSE 11482
// exit ;
11480: GO 11568
// un := tmp [ rand ( 1 , tmp ) ] ;
11482: LD_ADDR_VAR 0 2
11486: PUSH
11487: LD_VAR 0 3
11491: PUSH
11492: LD_INT 1
11494: PPUSH
11495: LD_VAR 0 3
11499: PPUSH
11500: CALL_OW 12
11504: ARRAY
11505: ST_TO_ADDR
// if Crawls ( un ) then
11506: LD_VAR 0 2
11510: PPUSH
11511: CALL_OW 318
11515: IFFALSE 11526
// ComWalk ( un ) ;
11517: LD_VAR 0 2
11521: PPUSH
11522: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11526: LD_VAR 0 2
11530: PPUSH
11531: LD_INT 9
11533: PPUSH
11534: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11538: LD_INT 28
11540: PPUSH
11541: LD_OWVAR 2
11545: PPUSH
11546: LD_INT 2
11548: PPUSH
11549: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11553: LD_INT 29
11555: PPUSH
11556: LD_OWVAR 2
11560: PPUSH
11561: LD_INT 2
11563: PPUSH
11564: CALL_OW 322
// end ;
11568: PPOPN 3
11570: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11571: LD_EXP 2
11575: PUSH
11576: LD_EXP 45
11580: AND
11581: IFFALSE 11692
11583: GO 11585
11585: DISABLE
11586: LD_INT 0
11588: PPUSH
11589: PPUSH
11590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11591: LD_ADDR_VAR 0 3
11595: PUSH
11596: LD_INT 22
11598: PUSH
11599: LD_OWVAR 2
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PUSH
11608: LD_INT 25
11610: PUSH
11611: LD_INT 1
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PPUSH
11622: CALL_OW 69
11626: ST_TO_ADDR
// if not tmp then
11627: LD_VAR 0 3
11631: NOT
11632: IFFALSE 11636
// exit ;
11634: GO 11692
// un := tmp [ rand ( 1 , tmp ) ] ;
11636: LD_ADDR_VAR 0 2
11640: PUSH
11641: LD_VAR 0 3
11645: PUSH
11646: LD_INT 1
11648: PPUSH
11649: LD_VAR 0 3
11653: PPUSH
11654: CALL_OW 12
11658: ARRAY
11659: ST_TO_ADDR
// if Crawls ( un ) then
11660: LD_VAR 0 2
11664: PPUSH
11665: CALL_OW 318
11669: IFFALSE 11680
// ComWalk ( un ) ;
11671: LD_VAR 0 2
11675: PPUSH
11676: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11680: LD_VAR 0 2
11684: PPUSH
11685: LD_INT 8
11687: PPUSH
11688: CALL_OW 336
// end ;
11692: PPOPN 3
11694: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11695: LD_EXP 2
11699: PUSH
11700: LD_EXP 46
11704: AND
11705: IFFALSE 11849
11707: GO 11709
11709: DISABLE
11710: LD_INT 0
11712: PPUSH
11713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11714: LD_ADDR_VAR 0 2
11718: PUSH
11719: LD_INT 22
11721: PUSH
11722: LD_OWVAR 2
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: PUSH
11731: LD_INT 21
11733: PUSH
11734: LD_INT 2
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: PUSH
11741: LD_INT 2
11743: PUSH
11744: LD_INT 34
11746: PUSH
11747: LD_INT 12
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PUSH
11754: LD_INT 34
11756: PUSH
11757: LD_INT 51
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 34
11766: PUSH
11767: LD_INT 32
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: LIST
11784: PPUSH
11785: CALL_OW 69
11789: ST_TO_ADDR
// if not tmp then
11790: LD_VAR 0 2
11794: NOT
11795: IFFALSE 11799
// exit ;
11797: GO 11849
// for i in tmp do
11799: LD_ADDR_VAR 0 1
11803: PUSH
11804: LD_VAR 0 2
11808: PUSH
11809: FOR_IN
11810: IFFALSE 11847
// if GetCargo ( i , mat_artifact ) = 0 then
11812: LD_VAR 0 1
11816: PPUSH
11817: LD_INT 4
11819: PPUSH
11820: CALL_OW 289
11824: PUSH
11825: LD_INT 0
11827: EQUAL
11828: IFFALSE 11845
// SetCargo ( i , mat_siberit , 100 ) ;
11830: LD_VAR 0 1
11834: PPUSH
11835: LD_INT 3
11837: PPUSH
11838: LD_INT 100
11840: PPUSH
11841: CALL_OW 290
11845: GO 11809
11847: POP
11848: POP
// end ;
11849: PPOPN 2
11851: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
11852: LD_EXP 2
11856: PUSH
11857: LD_EXP 47
11861: AND
11862: IFFALSE 12045
11864: GO 11866
11866: DISABLE
11867: LD_INT 0
11869: PPUSH
11870: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
11871: LD_ADDR_VAR 0 2
11875: PUSH
11876: LD_INT 22
11878: PUSH
11879: LD_OWVAR 2
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: PPUSH
11888: CALL_OW 69
11892: ST_TO_ADDR
// if not tmp then
11893: LD_VAR 0 2
11897: NOT
11898: IFFALSE 11902
// exit ;
11900: GO 12045
// for i := 1 to 2 do
11902: LD_ADDR_VAR 0 1
11906: PUSH
11907: DOUBLE
11908: LD_INT 1
11910: DEC
11911: ST_TO_ADDR
11912: LD_INT 2
11914: PUSH
11915: FOR_TO
11916: IFFALSE 12043
// begin uc_side := your_side ;
11918: LD_ADDR_OWVAR 20
11922: PUSH
11923: LD_OWVAR 2
11927: ST_TO_ADDR
// uc_nation := nation_american ;
11928: LD_ADDR_OWVAR 21
11932: PUSH
11933: LD_INT 1
11935: ST_TO_ADDR
// vc_chassis := us_morphling ;
11936: LD_ADDR_OWVAR 37
11940: PUSH
11941: LD_INT 5
11943: ST_TO_ADDR
// vc_engine := engine_siberite ;
11944: LD_ADDR_OWVAR 39
11948: PUSH
11949: LD_INT 3
11951: ST_TO_ADDR
// vc_control := control_computer ;
11952: LD_ADDR_OWVAR 38
11956: PUSH
11957: LD_INT 3
11959: ST_TO_ADDR
// vc_weapon := us_double_laser ;
11960: LD_ADDR_OWVAR 40
11964: PUSH
11965: LD_INT 10
11967: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
11968: LD_VAR 0 2
11972: PUSH
11973: LD_INT 1
11975: ARRAY
11976: PPUSH
11977: CALL_OW 310
11981: NOT
11982: IFFALSE 12029
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
11984: CALL_OW 45
11988: PPUSH
11989: LD_VAR 0 2
11993: PUSH
11994: LD_INT 1
11996: ARRAY
11997: PPUSH
11998: CALL_OW 250
12002: PPUSH
12003: LD_VAR 0 2
12007: PUSH
12008: LD_INT 1
12010: ARRAY
12011: PPUSH
12012: CALL_OW 251
12016: PPUSH
12017: LD_INT 12
12019: PPUSH
12020: LD_INT 1
12022: PPUSH
12023: CALL_OW 50
12027: GO 12041
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12029: CALL_OW 45
12033: PPUSH
12034: LD_INT 1
12036: PPUSH
12037: CALL_OW 51
// end ;
12041: GO 11915
12043: POP
12044: POP
// end ;
12045: PPOPN 2
12047: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12048: LD_EXP 2
12052: PUSH
12053: LD_EXP 48
12057: AND
12058: IFFALSE 12280
12060: GO 12062
12062: DISABLE
12063: LD_INT 0
12065: PPUSH
12066: PPUSH
12067: PPUSH
12068: PPUSH
12069: PPUSH
12070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12071: LD_ADDR_VAR 0 6
12075: PUSH
12076: LD_INT 22
12078: PUSH
12079: LD_OWVAR 2
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: PUSH
12088: LD_INT 21
12090: PUSH
12091: LD_INT 1
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: PUSH
12098: LD_INT 3
12100: PUSH
12101: LD_INT 23
12103: PUSH
12104: LD_INT 0
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: LIST
12119: PPUSH
12120: CALL_OW 69
12124: ST_TO_ADDR
// if not tmp then
12125: LD_VAR 0 6
12129: NOT
12130: IFFALSE 12134
// exit ;
12132: GO 12280
// s1 := rand ( 1 , 4 ) ;
12134: LD_ADDR_VAR 0 2
12138: PUSH
12139: LD_INT 1
12141: PPUSH
12142: LD_INT 4
12144: PPUSH
12145: CALL_OW 12
12149: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12150: LD_ADDR_VAR 0 4
12154: PUSH
12155: LD_VAR 0 6
12159: PUSH
12160: LD_INT 1
12162: ARRAY
12163: PPUSH
12164: LD_VAR 0 2
12168: PPUSH
12169: CALL_OW 259
12173: ST_TO_ADDR
// if s1 = 1 then
12174: LD_VAR 0 2
12178: PUSH
12179: LD_INT 1
12181: EQUAL
12182: IFFALSE 12202
// s2 := rand ( 2 , 4 ) else
12184: LD_ADDR_VAR 0 3
12188: PUSH
12189: LD_INT 2
12191: PPUSH
12192: LD_INT 4
12194: PPUSH
12195: CALL_OW 12
12199: ST_TO_ADDR
12200: GO 12210
// s2 := 1 ;
12202: LD_ADDR_VAR 0 3
12206: PUSH
12207: LD_INT 1
12209: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12210: LD_ADDR_VAR 0 5
12214: PUSH
12215: LD_VAR 0 6
12219: PUSH
12220: LD_INT 1
12222: ARRAY
12223: PPUSH
12224: LD_VAR 0 3
12228: PPUSH
12229: CALL_OW 259
12233: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12234: LD_VAR 0 6
12238: PUSH
12239: LD_INT 1
12241: ARRAY
12242: PPUSH
12243: LD_VAR 0 2
12247: PPUSH
12248: LD_VAR 0 5
12252: PPUSH
12253: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12257: LD_VAR 0 6
12261: PUSH
12262: LD_INT 1
12264: ARRAY
12265: PPUSH
12266: LD_VAR 0 3
12270: PPUSH
12271: LD_VAR 0 4
12275: PPUSH
12276: CALL_OW 237
// end ;
12280: PPOPN 6
12282: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12283: LD_EXP 2
12287: PUSH
12288: LD_EXP 49
12292: AND
12293: IFFALSE 12372
12295: GO 12297
12297: DISABLE
12298: LD_INT 0
12300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12301: LD_ADDR_VAR 0 1
12305: PUSH
12306: LD_INT 22
12308: PUSH
12309: LD_OWVAR 2
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: PUSH
12318: LD_INT 30
12320: PUSH
12321: LD_INT 3
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PPUSH
12332: CALL_OW 69
12336: ST_TO_ADDR
// if not tmp then
12337: LD_VAR 0 1
12341: NOT
12342: IFFALSE 12346
// exit ;
12344: GO 12372
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12346: LD_VAR 0 1
12350: PUSH
12351: LD_INT 1
12353: PPUSH
12354: LD_VAR 0 1
12358: PPUSH
12359: CALL_OW 12
12363: ARRAY
12364: PPUSH
12365: LD_INT 1
12367: PPUSH
12368: CALL_OW 234
// end ;
12372: PPOPN 1
12374: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12375: LD_EXP 2
12379: PUSH
12380: LD_EXP 50
12384: AND
12385: IFFALSE 12497
12387: GO 12389
12389: DISABLE
12390: LD_INT 0
12392: PPUSH
12393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12394: LD_ADDR_VAR 0 2
12398: PUSH
12399: LD_INT 22
12401: PUSH
12402: LD_OWVAR 2
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: PUSH
12411: LD_INT 2
12413: PUSH
12414: LD_INT 30
12416: PUSH
12417: LD_INT 27
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: PUSH
12424: LD_INT 30
12426: PUSH
12427: LD_INT 26
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: PUSH
12434: LD_INT 30
12436: PUSH
12437: LD_INT 28
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PPUSH
12454: CALL_OW 69
12458: ST_TO_ADDR
// if not tmp then
12459: LD_VAR 0 2
12463: NOT
12464: IFFALSE 12468
// exit ;
12466: GO 12497
// for i in tmp do
12468: LD_ADDR_VAR 0 1
12472: PUSH
12473: LD_VAR 0 2
12477: PUSH
12478: FOR_IN
12479: IFFALSE 12495
// SetLives ( i , 1 ) ;
12481: LD_VAR 0 1
12485: PPUSH
12486: LD_INT 1
12488: PPUSH
12489: CALL_OW 234
12493: GO 12478
12495: POP
12496: POP
// end ;
12497: PPOPN 2
12499: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12500: LD_EXP 2
12504: PUSH
12505: LD_EXP 51
12509: AND
12510: IFFALSE 12797
12512: GO 12514
12514: DISABLE
12515: LD_INT 0
12517: PPUSH
12518: PPUSH
12519: PPUSH
// begin i := rand ( 1 , 7 ) ;
12520: LD_ADDR_VAR 0 1
12524: PUSH
12525: LD_INT 1
12527: PPUSH
12528: LD_INT 7
12530: PPUSH
12531: CALL_OW 12
12535: ST_TO_ADDR
// case i of 1 :
12536: LD_VAR 0 1
12540: PUSH
12541: LD_INT 1
12543: DOUBLE
12544: EQUAL
12545: IFTRUE 12549
12547: GO 12559
12549: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12550: LD_STRING earthquake(getX(game), 0, 32)
12552: PPUSH
12553: CALL_OW 559
12557: GO 12797
12559: LD_INT 2
12561: DOUBLE
12562: EQUAL
12563: IFTRUE 12567
12565: GO 12581
12567: POP
// begin ToLua ( displayStucuk(); ) ;
12568: LD_STRING displayStucuk();
12570: PPUSH
12571: CALL_OW 559
// ResetFog ;
12575: CALL_OW 335
// end ; 3 :
12579: GO 12797
12581: LD_INT 3
12583: DOUBLE
12584: EQUAL
12585: IFTRUE 12589
12587: GO 12693
12589: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12590: LD_ADDR_VAR 0 2
12594: PUSH
12595: LD_INT 22
12597: PUSH
12598: LD_OWVAR 2
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PUSH
12607: LD_INT 25
12609: PUSH
12610: LD_INT 1
12612: PUSH
12613: EMPTY
12614: LIST
12615: LIST
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PPUSH
12621: CALL_OW 69
12625: ST_TO_ADDR
// if not tmp then
12626: LD_VAR 0 2
12630: NOT
12631: IFFALSE 12635
// exit ;
12633: GO 12797
// un := tmp [ rand ( 1 , tmp ) ] ;
12635: LD_ADDR_VAR 0 3
12639: PUSH
12640: LD_VAR 0 2
12644: PUSH
12645: LD_INT 1
12647: PPUSH
12648: LD_VAR 0 2
12652: PPUSH
12653: CALL_OW 12
12657: ARRAY
12658: ST_TO_ADDR
// if Crawls ( un ) then
12659: LD_VAR 0 3
12663: PPUSH
12664: CALL_OW 318
12668: IFFALSE 12679
// ComWalk ( un ) ;
12670: LD_VAR 0 3
12674: PPUSH
12675: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12679: LD_VAR 0 3
12683: PPUSH
12684: LD_INT 8
12686: PPUSH
12687: CALL_OW 336
// end ; 4 :
12691: GO 12797
12693: LD_INT 4
12695: DOUBLE
12696: EQUAL
12697: IFTRUE 12701
12699: GO 12775
12701: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12702: LD_ADDR_VAR 0 2
12706: PUSH
12707: LD_INT 22
12709: PUSH
12710: LD_OWVAR 2
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: LD_INT 30
12721: PUSH
12722: LD_INT 29
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: PPUSH
12733: CALL_OW 69
12737: ST_TO_ADDR
// if not tmp then
12738: LD_VAR 0 2
12742: NOT
12743: IFFALSE 12747
// exit ;
12745: GO 12797
// CenterNowOnUnits ( tmp [ 1 ] ) ;
12747: LD_VAR 0 2
12751: PUSH
12752: LD_INT 1
12754: ARRAY
12755: PPUSH
12756: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
12760: LD_VAR 0 2
12764: PUSH
12765: LD_INT 1
12767: ARRAY
12768: PPUSH
12769: CALL_OW 65
// end ; 5 .. 7 :
12773: GO 12797
12775: LD_INT 5
12777: DOUBLE
12778: GREATEREQUAL
12779: IFFALSE 12787
12781: LD_INT 7
12783: DOUBLE
12784: LESSEQUAL
12785: IFTRUE 12789
12787: GO 12796
12789: POP
// StreamSibBomb ; end ;
12790: CALL 9034 0 0
12794: GO 12797
12796: POP
// end ;
12797: PPOPN 3
12799: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12800: LD_EXP 2
12804: PUSH
12805: LD_EXP 52
12809: AND
12810: IFFALSE 12966
12812: GO 12814
12814: DISABLE
12815: LD_INT 0
12817: PPUSH
12818: PPUSH
12819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12820: LD_ADDR_VAR 0 2
12824: PUSH
12825: LD_INT 81
12827: PUSH
12828: LD_OWVAR 2
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PUSH
12837: LD_INT 2
12839: PUSH
12840: LD_INT 21
12842: PUSH
12843: LD_INT 1
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: PUSH
12850: LD_INT 21
12852: PUSH
12853: LD_INT 2
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: LIST
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: PPUSH
12869: CALL_OW 69
12873: ST_TO_ADDR
// if not tmp then
12874: LD_VAR 0 2
12878: NOT
12879: IFFALSE 12883
// exit ;
12881: GO 12966
// p := 0 ;
12883: LD_ADDR_VAR 0 3
12887: PUSH
12888: LD_INT 0
12890: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12891: LD_INT 35
12893: PPUSH
12894: CALL_OW 67
// p := p + 1 ;
12898: LD_ADDR_VAR 0 3
12902: PUSH
12903: LD_VAR 0 3
12907: PUSH
12908: LD_INT 1
12910: PLUS
12911: ST_TO_ADDR
// for i in tmp do
12912: LD_ADDR_VAR 0 1
12916: PUSH
12917: LD_VAR 0 2
12921: PUSH
12922: FOR_IN
12923: IFFALSE 12954
// if GetLives ( i ) < 1000 then
12925: LD_VAR 0 1
12929: PPUSH
12930: CALL_OW 256
12934: PUSH
12935: LD_INT 1000
12937: LESS
12938: IFFALSE 12952
// SetLives ( i , 1000 ) ;
12940: LD_VAR 0 1
12944: PPUSH
12945: LD_INT 1000
12947: PPUSH
12948: CALL_OW 234
12952: GO 12922
12954: POP
12955: POP
// until p > 20 ;
12956: LD_VAR 0 3
12960: PUSH
12961: LD_INT 20
12963: GREATER
12964: IFFALSE 12891
// end ;
12966: PPOPN 3
12968: END
// every 0 0$1 trigger StreamModeActive and sTime do
12969: LD_EXP 2
12973: PUSH
12974: LD_EXP 53
12978: AND
12979: IFFALSE 13014
12981: GO 12983
12983: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
12984: LD_INT 28
12986: PPUSH
12987: LD_OWVAR 2
12991: PPUSH
12992: LD_INT 2
12994: PPUSH
12995: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
12999: LD_INT 30
13001: PPUSH
13002: LD_OWVAR 2
13006: PPUSH
13007: LD_INT 2
13009: PPUSH
13010: CALL_OW 322
// end ;
13014: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13015: LD_EXP 2
13019: PUSH
13020: LD_EXP 54
13024: AND
13025: IFFALSE 13146
13027: GO 13029
13029: DISABLE
13030: LD_INT 0
13032: PPUSH
13033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13034: LD_ADDR_VAR 0 2
13038: PUSH
13039: LD_INT 22
13041: PUSH
13042: LD_OWVAR 2
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: PUSH
13051: LD_INT 21
13053: PUSH
13054: LD_INT 1
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PUSH
13061: LD_INT 3
13063: PUSH
13064: LD_INT 23
13066: PUSH
13067: LD_INT 0
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: LIST
13082: PPUSH
13083: CALL_OW 69
13087: ST_TO_ADDR
// if not tmp then
13088: LD_VAR 0 2
13092: NOT
13093: IFFALSE 13097
// exit ;
13095: GO 13146
// for i in tmp do
13097: LD_ADDR_VAR 0 1
13101: PUSH
13102: LD_VAR 0 2
13106: PUSH
13107: FOR_IN
13108: IFFALSE 13144
// begin if Crawls ( i ) then
13110: LD_VAR 0 1
13114: PPUSH
13115: CALL_OW 318
13119: IFFALSE 13130
// ComWalk ( i ) ;
13121: LD_VAR 0 1
13125: PPUSH
13126: CALL_OW 138
// SetClass ( i , 2 ) ;
13130: LD_VAR 0 1
13134: PPUSH
13135: LD_INT 2
13137: PPUSH
13138: CALL_OW 336
// end ;
13142: GO 13107
13144: POP
13145: POP
// end ;
13146: PPOPN 2
13148: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13149: LD_EXP 2
13153: PUSH
13154: LD_EXP 55
13158: AND
13159: IFFALSE 13447
13161: GO 13163
13163: DISABLE
13164: LD_INT 0
13166: PPUSH
13167: PPUSH
13168: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13169: LD_OWVAR 2
13173: PPUSH
13174: LD_INT 9
13176: PPUSH
13177: LD_INT 1
13179: PPUSH
13180: LD_INT 1
13182: PPUSH
13183: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13187: LD_INT 9
13189: PPUSH
13190: LD_OWVAR 2
13194: PPUSH
13195: CALL_OW 343
// uc_side := 9 ;
13199: LD_ADDR_OWVAR 20
13203: PUSH
13204: LD_INT 9
13206: ST_TO_ADDR
// uc_nation := 2 ;
13207: LD_ADDR_OWVAR 21
13211: PUSH
13212: LD_INT 2
13214: ST_TO_ADDR
// hc_name := Dark Warrior ;
13215: LD_ADDR_OWVAR 26
13219: PUSH
13220: LD_STRING Dark Warrior
13222: ST_TO_ADDR
// hc_gallery :=  ;
13223: LD_ADDR_OWVAR 33
13227: PUSH
13228: LD_STRING 
13230: ST_TO_ADDR
// hc_noskilllimit := true ;
13231: LD_ADDR_OWVAR 76
13235: PUSH
13236: LD_INT 1
13238: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13239: LD_ADDR_OWVAR 31
13243: PUSH
13244: LD_INT 30
13246: PUSH
13247: LD_INT 30
13249: PUSH
13250: LD_INT 30
13252: PUSH
13253: LD_INT 30
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: ST_TO_ADDR
// un := CreateHuman ;
13262: LD_ADDR_VAR 0 3
13266: PUSH
13267: CALL_OW 44
13271: ST_TO_ADDR
// hc_noskilllimit := false ;
13272: LD_ADDR_OWVAR 76
13276: PUSH
13277: LD_INT 0
13279: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13280: LD_VAR 0 3
13284: PPUSH
13285: LD_INT 1
13287: PPUSH
13288: CALL_OW 51
// ToLua ( playRanger() ) ;
13292: LD_STRING playRanger()
13294: PPUSH
13295: CALL_OW 559
// p := 0 ;
13299: LD_ADDR_VAR 0 2
13303: PUSH
13304: LD_INT 0
13306: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13307: LD_INT 35
13309: PPUSH
13310: CALL_OW 67
// p := p + 1 ;
13314: LD_ADDR_VAR 0 2
13318: PUSH
13319: LD_VAR 0 2
13323: PUSH
13324: LD_INT 1
13326: PLUS
13327: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13328: LD_VAR 0 3
13332: PPUSH
13333: CALL_OW 256
13337: PUSH
13338: LD_INT 1000
13340: LESS
13341: IFFALSE 13355
// SetLives ( un , 1000 ) ;
13343: LD_VAR 0 3
13347: PPUSH
13348: LD_INT 1000
13350: PPUSH
13351: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13355: LD_VAR 0 3
13359: PPUSH
13360: LD_INT 81
13362: PUSH
13363: LD_OWVAR 2
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PUSH
13372: LD_INT 91
13374: PUSH
13375: LD_VAR 0 3
13379: PUSH
13380: LD_INT 30
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: LIST
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PPUSH
13392: CALL_OW 69
13396: PPUSH
13397: LD_VAR 0 3
13401: PPUSH
13402: CALL_OW 74
13406: PPUSH
13407: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
13411: LD_VAR 0 2
13415: PUSH
13416: LD_INT 80
13418: GREATER
13419: PUSH
13420: LD_VAR 0 3
13424: PPUSH
13425: CALL_OW 301
13429: OR
13430: IFFALSE 13307
// if un then
13432: LD_VAR 0 3
13436: IFFALSE 13447
// RemoveUnit ( un ) ;
13438: LD_VAR 0 3
13442: PPUSH
13443: CALL_OW 64
// end ;
13447: PPOPN 3
13449: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
13450: LD_EXP 56
13454: IFFALSE 13570
13456: GO 13458
13458: DISABLE
13459: LD_INT 0
13461: PPUSH
13462: PPUSH
13463: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13464: LD_ADDR_VAR 0 2
13468: PUSH
13469: LD_INT 81
13471: PUSH
13472: LD_OWVAR 2
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PUSH
13481: LD_INT 21
13483: PUSH
13484: LD_INT 1
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: PPUSH
13495: CALL_OW 69
13499: ST_TO_ADDR
// ToLua ( playComputer() ) ;
13500: LD_STRING playComputer()
13502: PPUSH
13503: CALL_OW 559
// if not tmp then
13507: LD_VAR 0 2
13511: NOT
13512: IFFALSE 13516
// exit ;
13514: GO 13570
// for i in tmp do
13516: LD_ADDR_VAR 0 1
13520: PUSH
13521: LD_VAR 0 2
13525: PUSH
13526: FOR_IN
13527: IFFALSE 13568
// for j := 1 to 4 do
13529: LD_ADDR_VAR 0 3
13533: PUSH
13534: DOUBLE
13535: LD_INT 1
13537: DEC
13538: ST_TO_ADDR
13539: LD_INT 4
13541: PUSH
13542: FOR_TO
13543: IFFALSE 13564
// SetSkill ( i , j , 10 ) ;
13545: LD_VAR 0 1
13549: PPUSH
13550: LD_VAR 0 3
13554: PPUSH
13555: LD_INT 10
13557: PPUSH
13558: CALL_OW 237
13562: GO 13542
13564: POP
13565: POP
13566: GO 13526
13568: POP
13569: POP
// end ;
13570: PPOPN 3
13572: END
// every 0 0$1 trigger s30 do var i , tmp ;
13573: LD_EXP 57
13577: IFFALSE 13646
13579: GO 13581
13581: DISABLE
13582: LD_INT 0
13584: PPUSH
13585: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13586: LD_ADDR_VAR 0 2
13590: PUSH
13591: LD_INT 22
13593: PUSH
13594: LD_OWVAR 2
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: PPUSH
13603: CALL_OW 69
13607: ST_TO_ADDR
// if not tmp then
13608: LD_VAR 0 2
13612: NOT
13613: IFFALSE 13617
// exit ;
13615: GO 13646
// for i in tmp do
13617: LD_ADDR_VAR 0 1
13621: PUSH
13622: LD_VAR 0 2
13626: PUSH
13627: FOR_IN
13628: IFFALSE 13644
// SetLives ( i , 300 ) ;
13630: LD_VAR 0 1
13634: PPUSH
13635: LD_INT 300
13637: PPUSH
13638: CALL_OW 234
13642: GO 13627
13644: POP
13645: POP
// end ;
13646: PPOPN 2
13648: END
// every 0 0$1 trigger s60 do var i , tmp ;
13649: LD_EXP 58
13653: IFFALSE 13722
13655: GO 13657
13657: DISABLE
13658: LD_INT 0
13660: PPUSH
13661: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13662: LD_ADDR_VAR 0 2
13666: PUSH
13667: LD_INT 22
13669: PUSH
13670: LD_OWVAR 2
13674: PUSH
13675: EMPTY
13676: LIST
13677: LIST
13678: PPUSH
13679: CALL_OW 69
13683: ST_TO_ADDR
// if not tmp then
13684: LD_VAR 0 2
13688: NOT
13689: IFFALSE 13693
// exit ;
13691: GO 13722
// for i in tmp do
13693: LD_ADDR_VAR 0 1
13697: PUSH
13698: LD_VAR 0 2
13702: PUSH
13703: FOR_IN
13704: IFFALSE 13720
// SetLives ( i , 600 ) ;
13706: LD_VAR 0 1
13710: PPUSH
13711: LD_INT 600
13713: PPUSH
13714: CALL_OW 234
13718: GO 13703
13720: POP
13721: POP
// end ;
13722: PPOPN 2
13724: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13725: LD_INT 0
13727: PPUSH
// case cmd of 301 :
13728: LD_VAR 0 1
13732: PUSH
13733: LD_INT 301
13735: DOUBLE
13736: EQUAL
13737: IFTRUE 13741
13739: GO 13773
13741: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
13742: LD_VAR 0 6
13746: PPUSH
13747: LD_VAR 0 7
13751: PPUSH
13752: LD_VAR 0 8
13756: PPUSH
13757: LD_VAR 0 4
13761: PPUSH
13762: LD_VAR 0 5
13766: PPUSH
13767: CALL 14974 0 5
13771: GO 13894
13773: LD_INT 302
13775: DOUBLE
13776: EQUAL
13777: IFTRUE 13781
13779: GO 13818
13781: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
13782: LD_VAR 0 6
13786: PPUSH
13787: LD_VAR 0 7
13791: PPUSH
13792: LD_VAR 0 8
13796: PPUSH
13797: LD_VAR 0 9
13801: PPUSH
13802: LD_VAR 0 4
13806: PPUSH
13807: LD_VAR 0 5
13811: PPUSH
13812: CALL 15065 0 6
13816: GO 13894
13818: LD_INT 303
13820: DOUBLE
13821: EQUAL
13822: IFTRUE 13826
13824: GO 13863
13826: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
13827: LD_VAR 0 6
13831: PPUSH
13832: LD_VAR 0 7
13836: PPUSH
13837: LD_VAR 0 8
13841: PPUSH
13842: LD_VAR 0 9
13846: PPUSH
13847: LD_VAR 0 4
13851: PPUSH
13852: LD_VAR 0 5
13856: PPUSH
13857: CALL 13899 0 6
13861: GO 13894
13863: LD_INT 304
13865: DOUBLE
13866: EQUAL
13867: IFTRUE 13871
13869: GO 13893
13871: POP
// hHackTeleport ( unit , x , y ) ; end ;
13872: LD_VAR 0 2
13876: PPUSH
13877: LD_VAR 0 4
13881: PPUSH
13882: LD_VAR 0 5
13886: PPUSH
13887: CALL 15658 0 3
13891: GO 13894
13893: POP
// end ;
13894: LD_VAR 0 12
13898: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
13899: LD_INT 0
13901: PPUSH
13902: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
13903: LD_VAR 0 1
13907: PUSH
13908: LD_INT 1
13910: LESS
13911: PUSH
13912: LD_VAR 0 1
13916: PUSH
13917: LD_INT 3
13919: GREATER
13920: OR
13921: PUSH
13922: LD_VAR 0 5
13926: PPUSH
13927: LD_VAR 0 6
13931: PPUSH
13932: CALL_OW 428
13936: OR
13937: IFFALSE 13941
// exit ;
13939: GO 14661
// uc_side := your_side ;
13941: LD_ADDR_OWVAR 20
13945: PUSH
13946: LD_OWVAR 2
13950: ST_TO_ADDR
// uc_nation := nation ;
13951: LD_ADDR_OWVAR 21
13955: PUSH
13956: LD_VAR 0 1
13960: ST_TO_ADDR
// bc_level = 1 ;
13961: LD_ADDR_OWVAR 43
13965: PUSH
13966: LD_INT 1
13968: ST_TO_ADDR
// case btype of 1 :
13969: LD_VAR 0 2
13973: PUSH
13974: LD_INT 1
13976: DOUBLE
13977: EQUAL
13978: IFTRUE 13982
13980: GO 13993
13982: POP
// bc_type := b_depot ; 2 :
13983: LD_ADDR_OWVAR 42
13987: PUSH
13988: LD_INT 0
13990: ST_TO_ADDR
13991: GO 14605
13993: LD_INT 2
13995: DOUBLE
13996: EQUAL
13997: IFTRUE 14001
13999: GO 14012
14001: POP
// bc_type := b_warehouse ; 3 :
14002: LD_ADDR_OWVAR 42
14006: PUSH
14007: LD_INT 1
14009: ST_TO_ADDR
14010: GO 14605
14012: LD_INT 3
14014: DOUBLE
14015: EQUAL
14016: IFTRUE 14020
14018: GO 14031
14020: POP
// bc_type := b_lab ; 4 .. 9 :
14021: LD_ADDR_OWVAR 42
14025: PUSH
14026: LD_INT 6
14028: ST_TO_ADDR
14029: GO 14605
14031: LD_INT 4
14033: DOUBLE
14034: GREATEREQUAL
14035: IFFALSE 14043
14037: LD_INT 9
14039: DOUBLE
14040: LESSEQUAL
14041: IFTRUE 14045
14043: GO 14097
14045: POP
// begin bc_type := b_lab_half ;
14046: LD_ADDR_OWVAR 42
14050: PUSH
14051: LD_INT 7
14053: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14054: LD_ADDR_OWVAR 44
14058: PUSH
14059: LD_INT 10
14061: PUSH
14062: LD_INT 11
14064: PUSH
14065: LD_INT 12
14067: PUSH
14068: LD_INT 15
14070: PUSH
14071: LD_INT 14
14073: PUSH
14074: LD_INT 13
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: PUSH
14085: LD_VAR 0 2
14089: PUSH
14090: LD_INT 3
14092: MINUS
14093: ARRAY
14094: ST_TO_ADDR
// end ; 10 .. 13 :
14095: GO 14605
14097: LD_INT 10
14099: DOUBLE
14100: GREATEREQUAL
14101: IFFALSE 14109
14103: LD_INT 13
14105: DOUBLE
14106: LESSEQUAL
14107: IFTRUE 14111
14109: GO 14188
14111: POP
// begin bc_type := b_lab_full ;
14112: LD_ADDR_OWVAR 42
14116: PUSH
14117: LD_INT 8
14119: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14120: LD_ADDR_OWVAR 44
14124: PUSH
14125: LD_INT 10
14127: PUSH
14128: LD_INT 12
14130: PUSH
14131: LD_INT 14
14133: PUSH
14134: LD_INT 13
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: PUSH
14143: LD_VAR 0 2
14147: PUSH
14148: LD_INT 9
14150: MINUS
14151: ARRAY
14152: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14153: LD_ADDR_OWVAR 45
14157: PUSH
14158: LD_INT 11
14160: PUSH
14161: LD_INT 15
14163: PUSH
14164: LD_INT 12
14166: PUSH
14167: LD_INT 15
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: PUSH
14176: LD_VAR 0 2
14180: PUSH
14181: LD_INT 9
14183: MINUS
14184: ARRAY
14185: ST_TO_ADDR
// end ; 14 :
14186: GO 14605
14188: LD_INT 14
14190: DOUBLE
14191: EQUAL
14192: IFTRUE 14196
14194: GO 14207
14196: POP
// bc_type := b_workshop ; 15 :
14197: LD_ADDR_OWVAR 42
14201: PUSH
14202: LD_INT 2
14204: ST_TO_ADDR
14205: GO 14605
14207: LD_INT 15
14209: DOUBLE
14210: EQUAL
14211: IFTRUE 14215
14213: GO 14226
14215: POP
// bc_type := b_factory ; 16 :
14216: LD_ADDR_OWVAR 42
14220: PUSH
14221: LD_INT 3
14223: ST_TO_ADDR
14224: GO 14605
14226: LD_INT 16
14228: DOUBLE
14229: EQUAL
14230: IFTRUE 14234
14232: GO 14245
14234: POP
// bc_type := b_ext_gun ; 17 :
14235: LD_ADDR_OWVAR 42
14239: PUSH
14240: LD_INT 17
14242: ST_TO_ADDR
14243: GO 14605
14245: LD_INT 17
14247: DOUBLE
14248: EQUAL
14249: IFTRUE 14253
14251: GO 14281
14253: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14254: LD_ADDR_OWVAR 42
14258: PUSH
14259: LD_INT 19
14261: PUSH
14262: LD_INT 23
14264: PUSH
14265: LD_INT 19
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: LIST
14272: PUSH
14273: LD_VAR 0 1
14277: ARRAY
14278: ST_TO_ADDR
14279: GO 14605
14281: LD_INT 18
14283: DOUBLE
14284: EQUAL
14285: IFTRUE 14289
14287: GO 14300
14289: POP
// bc_type := b_ext_radar ; 19 :
14290: LD_ADDR_OWVAR 42
14294: PUSH
14295: LD_INT 20
14297: ST_TO_ADDR
14298: GO 14605
14300: LD_INT 19
14302: DOUBLE
14303: EQUAL
14304: IFTRUE 14308
14306: GO 14319
14308: POP
// bc_type := b_ext_radio ; 20 :
14309: LD_ADDR_OWVAR 42
14313: PUSH
14314: LD_INT 22
14316: ST_TO_ADDR
14317: GO 14605
14319: LD_INT 20
14321: DOUBLE
14322: EQUAL
14323: IFTRUE 14327
14325: GO 14338
14327: POP
// bc_type := b_ext_siberium ; 21 :
14328: LD_ADDR_OWVAR 42
14332: PUSH
14333: LD_INT 21
14335: ST_TO_ADDR
14336: GO 14605
14338: LD_INT 21
14340: DOUBLE
14341: EQUAL
14342: IFTRUE 14346
14344: GO 14357
14346: POP
// bc_type := b_ext_computer ; 22 :
14347: LD_ADDR_OWVAR 42
14351: PUSH
14352: LD_INT 24
14354: ST_TO_ADDR
14355: GO 14605
14357: LD_INT 22
14359: DOUBLE
14360: EQUAL
14361: IFTRUE 14365
14363: GO 14376
14365: POP
// bc_type := b_ext_track ; 23 :
14366: LD_ADDR_OWVAR 42
14370: PUSH
14371: LD_INT 16
14373: ST_TO_ADDR
14374: GO 14605
14376: LD_INT 23
14378: DOUBLE
14379: EQUAL
14380: IFTRUE 14384
14382: GO 14395
14384: POP
// bc_type := b_ext_laser ; 24 :
14385: LD_ADDR_OWVAR 42
14389: PUSH
14390: LD_INT 25
14392: ST_TO_ADDR
14393: GO 14605
14395: LD_INT 24
14397: DOUBLE
14398: EQUAL
14399: IFTRUE 14403
14401: GO 14414
14403: POP
// bc_type := b_control_tower ; 25 :
14404: LD_ADDR_OWVAR 42
14408: PUSH
14409: LD_INT 36
14411: ST_TO_ADDR
14412: GO 14605
14414: LD_INT 25
14416: DOUBLE
14417: EQUAL
14418: IFTRUE 14422
14420: GO 14433
14422: POP
// bc_type := b_breastwork ; 26 :
14423: LD_ADDR_OWVAR 42
14427: PUSH
14428: LD_INT 31
14430: ST_TO_ADDR
14431: GO 14605
14433: LD_INT 26
14435: DOUBLE
14436: EQUAL
14437: IFTRUE 14441
14439: GO 14452
14441: POP
// bc_type := b_bunker ; 27 :
14442: LD_ADDR_OWVAR 42
14446: PUSH
14447: LD_INT 32
14449: ST_TO_ADDR
14450: GO 14605
14452: LD_INT 27
14454: DOUBLE
14455: EQUAL
14456: IFTRUE 14460
14458: GO 14471
14460: POP
// bc_type := b_turret ; 28 :
14461: LD_ADDR_OWVAR 42
14465: PUSH
14466: LD_INT 33
14468: ST_TO_ADDR
14469: GO 14605
14471: LD_INT 28
14473: DOUBLE
14474: EQUAL
14475: IFTRUE 14479
14477: GO 14490
14479: POP
// bc_type := b_armoury ; 29 :
14480: LD_ADDR_OWVAR 42
14484: PUSH
14485: LD_INT 4
14487: ST_TO_ADDR
14488: GO 14605
14490: LD_INT 29
14492: DOUBLE
14493: EQUAL
14494: IFTRUE 14498
14496: GO 14509
14498: POP
// bc_type := b_barracks ; 30 :
14499: LD_ADDR_OWVAR 42
14503: PUSH
14504: LD_INT 5
14506: ST_TO_ADDR
14507: GO 14605
14509: LD_INT 30
14511: DOUBLE
14512: EQUAL
14513: IFTRUE 14517
14515: GO 14528
14517: POP
// bc_type := b_solar_power ; 31 :
14518: LD_ADDR_OWVAR 42
14522: PUSH
14523: LD_INT 27
14525: ST_TO_ADDR
14526: GO 14605
14528: LD_INT 31
14530: DOUBLE
14531: EQUAL
14532: IFTRUE 14536
14534: GO 14547
14536: POP
// bc_type := b_oil_power ; 32 :
14537: LD_ADDR_OWVAR 42
14541: PUSH
14542: LD_INT 26
14544: ST_TO_ADDR
14545: GO 14605
14547: LD_INT 32
14549: DOUBLE
14550: EQUAL
14551: IFTRUE 14555
14553: GO 14566
14555: POP
// bc_type := b_siberite_power ; 33 :
14556: LD_ADDR_OWVAR 42
14560: PUSH
14561: LD_INT 28
14563: ST_TO_ADDR
14564: GO 14605
14566: LD_INT 33
14568: DOUBLE
14569: EQUAL
14570: IFTRUE 14574
14572: GO 14585
14574: POP
// bc_type := b_oil_mine ; 34 :
14575: LD_ADDR_OWVAR 42
14579: PUSH
14580: LD_INT 29
14582: ST_TO_ADDR
14583: GO 14605
14585: LD_INT 34
14587: DOUBLE
14588: EQUAL
14589: IFTRUE 14593
14591: GO 14604
14593: POP
// bc_type := b_siberite_mine ; end ;
14594: LD_ADDR_OWVAR 42
14598: PUSH
14599: LD_INT 30
14601: ST_TO_ADDR
14602: GO 14605
14604: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
14605: LD_ADDR_VAR 0 8
14609: PUSH
14610: LD_VAR 0 5
14614: PPUSH
14615: LD_VAR 0 6
14619: PPUSH
14620: LD_VAR 0 3
14624: PPUSH
14625: CALL_OW 47
14629: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
14630: LD_OWVAR 42
14634: PUSH
14635: LD_INT 32
14637: PUSH
14638: LD_INT 33
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: IN
14645: IFFALSE 14661
// PlaceWeaponTurret ( b , weapon ) ;
14647: LD_VAR 0 8
14651: PPUSH
14652: LD_VAR 0 4
14656: PPUSH
14657: CALL_OW 431
// end ;
14661: LD_VAR 0 7
14665: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
14666: LD_INT 0
14668: PPUSH
14669: PPUSH
14670: PPUSH
14671: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14672: LD_ADDR_VAR 0 4
14676: PUSH
14677: LD_INT 22
14679: PUSH
14680: LD_OWVAR 2
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: PUSH
14689: LD_INT 2
14691: PUSH
14692: LD_INT 30
14694: PUSH
14695: LD_INT 0
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PUSH
14702: LD_INT 30
14704: PUSH
14705: LD_INT 1
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: LIST
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: PPUSH
14721: CALL_OW 69
14725: ST_TO_ADDR
// if not tmp then
14726: LD_VAR 0 4
14730: NOT
14731: IFFALSE 14735
// exit ;
14733: GO 14794
// for i in tmp do
14735: LD_ADDR_VAR 0 2
14739: PUSH
14740: LD_VAR 0 4
14744: PUSH
14745: FOR_IN
14746: IFFALSE 14792
// for j = 1 to 3 do
14748: LD_ADDR_VAR 0 3
14752: PUSH
14753: DOUBLE
14754: LD_INT 1
14756: DEC
14757: ST_TO_ADDR
14758: LD_INT 3
14760: PUSH
14761: FOR_TO
14762: IFFALSE 14788
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14764: LD_VAR 0 2
14768: PPUSH
14769: CALL_OW 274
14773: PPUSH
14774: LD_VAR 0 3
14778: PPUSH
14779: LD_INT 99999
14781: PPUSH
14782: CALL_OW 277
14786: GO 14761
14788: POP
14789: POP
14790: GO 14745
14792: POP
14793: POP
// end ;
14794: LD_VAR 0 1
14798: RET
// export function hHackSetLevel10 ; var i , j ; begin
14799: LD_INT 0
14801: PPUSH
14802: PPUSH
14803: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14804: LD_ADDR_VAR 0 2
14808: PUSH
14809: LD_INT 21
14811: PUSH
14812: LD_INT 1
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: PPUSH
14819: CALL_OW 69
14823: PUSH
14824: FOR_IN
14825: IFFALSE 14877
// if IsSelected ( i ) then
14827: LD_VAR 0 2
14831: PPUSH
14832: CALL_OW 306
14836: IFFALSE 14875
// begin for j := 1 to 4 do
14838: LD_ADDR_VAR 0 3
14842: PUSH
14843: DOUBLE
14844: LD_INT 1
14846: DEC
14847: ST_TO_ADDR
14848: LD_INT 4
14850: PUSH
14851: FOR_TO
14852: IFFALSE 14873
// SetSkill ( i , j , 10 ) ;
14854: LD_VAR 0 2
14858: PPUSH
14859: LD_VAR 0 3
14863: PPUSH
14864: LD_INT 10
14866: PPUSH
14867: CALL_OW 237
14871: GO 14851
14873: POP
14874: POP
// end ;
14875: GO 14824
14877: POP
14878: POP
// end ;
14879: LD_VAR 0 1
14883: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
14884: LD_INT 0
14886: PPUSH
14887: PPUSH
14888: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
14889: LD_ADDR_VAR 0 2
14893: PUSH
14894: LD_INT 22
14896: PUSH
14897: LD_OWVAR 2
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: PUSH
14906: LD_INT 21
14908: PUSH
14909: LD_INT 1
14911: PUSH
14912: EMPTY
14913: LIST
14914: LIST
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: PPUSH
14920: CALL_OW 69
14924: PUSH
14925: FOR_IN
14926: IFFALSE 14967
// begin for j := 1 to 4 do
14928: LD_ADDR_VAR 0 3
14932: PUSH
14933: DOUBLE
14934: LD_INT 1
14936: DEC
14937: ST_TO_ADDR
14938: LD_INT 4
14940: PUSH
14941: FOR_TO
14942: IFFALSE 14963
// SetSkill ( i , j , 10 ) ;
14944: LD_VAR 0 2
14948: PPUSH
14949: LD_VAR 0 3
14953: PPUSH
14954: LD_INT 10
14956: PPUSH
14957: CALL_OW 237
14961: GO 14941
14963: POP
14964: POP
// end ;
14965: GO 14925
14967: POP
14968: POP
// end ;
14969: LD_VAR 0 1
14973: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
14974: LD_INT 0
14976: PPUSH
// uc_side := your_side ;
14977: LD_ADDR_OWVAR 20
14981: PUSH
14982: LD_OWVAR 2
14986: ST_TO_ADDR
// uc_nation := nation ;
14987: LD_ADDR_OWVAR 21
14991: PUSH
14992: LD_VAR 0 1
14996: ST_TO_ADDR
// InitHc ;
14997: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15001: LD_INT 0
15003: PPUSH
15004: LD_VAR 0 2
15008: PPUSH
15009: LD_VAR 0 3
15013: PPUSH
15014: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15018: LD_VAR 0 4
15022: PPUSH
15023: LD_VAR 0 5
15027: PPUSH
15028: CALL_OW 428
15032: PUSH
15033: LD_INT 0
15035: EQUAL
15036: IFFALSE 15060
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15038: CALL_OW 44
15042: PPUSH
15043: LD_VAR 0 4
15047: PPUSH
15048: LD_VAR 0 5
15052: PPUSH
15053: LD_INT 1
15055: PPUSH
15056: CALL_OW 48
// end ;
15060: LD_VAR 0 6
15064: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15065: LD_INT 0
15067: PPUSH
15068: PPUSH
// uc_side := your_side ;
15069: LD_ADDR_OWVAR 20
15073: PUSH
15074: LD_OWVAR 2
15078: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15079: LD_VAR 0 1
15083: PUSH
15084: LD_INT 1
15086: PUSH
15087: LD_INT 2
15089: PUSH
15090: LD_INT 3
15092: PUSH
15093: LD_INT 4
15095: PUSH
15096: LD_INT 5
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: IN
15106: IFFALSE 15118
// uc_nation := nation_american else
15108: LD_ADDR_OWVAR 21
15112: PUSH
15113: LD_INT 1
15115: ST_TO_ADDR
15116: GO 15161
// if chassis in [ 11 , 12 , 13 , 14 ] then
15118: LD_VAR 0 1
15122: PUSH
15123: LD_INT 11
15125: PUSH
15126: LD_INT 12
15128: PUSH
15129: LD_INT 13
15131: PUSH
15132: LD_INT 14
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: IN
15141: IFFALSE 15153
// uc_nation := nation_arabian else
15143: LD_ADDR_OWVAR 21
15147: PUSH
15148: LD_INT 2
15150: ST_TO_ADDR
15151: GO 15161
// uc_nation := nation_russian ;
15153: LD_ADDR_OWVAR 21
15157: PUSH
15158: LD_INT 3
15160: ST_TO_ADDR
// vc_chassis := chassis ;
15161: LD_ADDR_OWVAR 37
15165: PUSH
15166: LD_VAR 0 1
15170: ST_TO_ADDR
// vc_engine := engine ;
15171: LD_ADDR_OWVAR 39
15175: PUSH
15176: LD_VAR 0 2
15180: ST_TO_ADDR
// vc_control := control ;
15181: LD_ADDR_OWVAR 38
15185: PUSH
15186: LD_VAR 0 3
15190: ST_TO_ADDR
// vc_weapon := weapon ;
15191: LD_ADDR_OWVAR 40
15195: PUSH
15196: LD_VAR 0 4
15200: ST_TO_ADDR
// un := CreateVehicle ;
15201: LD_ADDR_VAR 0 8
15205: PUSH
15206: CALL_OW 45
15210: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15211: LD_VAR 0 8
15215: PPUSH
15216: LD_INT 0
15218: PPUSH
15219: LD_INT 5
15221: PPUSH
15222: CALL_OW 12
15226: PPUSH
15227: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15231: LD_VAR 0 8
15235: PPUSH
15236: LD_VAR 0 5
15240: PPUSH
15241: LD_VAR 0 6
15245: PPUSH
15246: LD_INT 1
15248: PPUSH
15249: CALL_OW 48
// end ;
15253: LD_VAR 0 7
15257: RET
// export hInvincible ; every 1 do
15258: GO 15260
15260: DISABLE
// hInvincible := [ ] ;
15261: LD_ADDR_EXP 59
15265: PUSH
15266: EMPTY
15267: ST_TO_ADDR
15268: END
// every 10 do var i ;
15269: GO 15271
15271: DISABLE
15272: LD_INT 0
15274: PPUSH
// begin enable ;
15275: ENABLE
// if not hInvincible then
15276: LD_EXP 59
15280: NOT
15281: IFFALSE 15285
// exit ;
15283: GO 15329
// for i in hInvincible do
15285: LD_ADDR_VAR 0 1
15289: PUSH
15290: LD_EXP 59
15294: PUSH
15295: FOR_IN
15296: IFFALSE 15327
// if GetLives ( i ) < 1000 then
15298: LD_VAR 0 1
15302: PPUSH
15303: CALL_OW 256
15307: PUSH
15308: LD_INT 1000
15310: LESS
15311: IFFALSE 15325
// SetLives ( i , 1000 ) ;
15313: LD_VAR 0 1
15317: PPUSH
15318: LD_INT 1000
15320: PPUSH
15321: CALL_OW 234
15325: GO 15295
15327: POP
15328: POP
// end ;
15329: PPOPN 1
15331: END
// export function hHackInvincible ; var i ; begin
15332: LD_INT 0
15334: PPUSH
15335: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15336: LD_ADDR_VAR 0 2
15340: PUSH
15341: LD_INT 2
15343: PUSH
15344: LD_INT 21
15346: PUSH
15347: LD_INT 1
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: PUSH
15354: LD_INT 21
15356: PUSH
15357: LD_INT 2
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: LIST
15368: PPUSH
15369: CALL_OW 69
15373: PUSH
15374: FOR_IN
15375: IFFALSE 15436
// if IsSelected ( i ) then
15377: LD_VAR 0 2
15381: PPUSH
15382: CALL_OW 306
15386: IFFALSE 15434
// begin if i in hInvincible then
15388: LD_VAR 0 2
15392: PUSH
15393: LD_EXP 59
15397: IN
15398: IFFALSE 15418
// hInvincible := hInvincible diff i else
15400: LD_ADDR_EXP 59
15404: PUSH
15405: LD_EXP 59
15409: PUSH
15410: LD_VAR 0 2
15414: DIFF
15415: ST_TO_ADDR
15416: GO 15434
// hInvincible := hInvincible union i ;
15418: LD_ADDR_EXP 59
15422: PUSH
15423: LD_EXP 59
15427: PUSH
15428: LD_VAR 0 2
15432: UNION
15433: ST_TO_ADDR
// end ;
15434: GO 15374
15436: POP
15437: POP
// end ;
15438: LD_VAR 0 1
15442: RET
// export function hHackInvisible ; var i , j ; begin
15443: LD_INT 0
15445: PPUSH
15446: PPUSH
15447: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15448: LD_ADDR_VAR 0 2
15452: PUSH
15453: LD_INT 21
15455: PUSH
15456: LD_INT 1
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: PPUSH
15463: CALL_OW 69
15467: PUSH
15468: FOR_IN
15469: IFFALSE 15493
// if IsSelected ( i ) then
15471: LD_VAR 0 2
15475: PPUSH
15476: CALL_OW 306
15480: IFFALSE 15491
// ComForceInvisible ( i ) ;
15482: LD_VAR 0 2
15486: PPUSH
15487: CALL_OW 496
15491: GO 15468
15493: POP
15494: POP
// end ;
15495: LD_VAR 0 1
15499: RET
// export function hHackChangeYourSide ; begin
15500: LD_INT 0
15502: PPUSH
// if your_side = 8 then
15503: LD_OWVAR 2
15507: PUSH
15508: LD_INT 8
15510: EQUAL
15511: IFFALSE 15523
// your_side := 0 else
15513: LD_ADDR_OWVAR 2
15517: PUSH
15518: LD_INT 0
15520: ST_TO_ADDR
15521: GO 15537
// your_side := your_side + 1 ;
15523: LD_ADDR_OWVAR 2
15527: PUSH
15528: LD_OWVAR 2
15532: PUSH
15533: LD_INT 1
15535: PLUS
15536: ST_TO_ADDR
// end ;
15537: LD_VAR 0 1
15541: RET
// export function hHackChangeUnitSide ; var i , j ; begin
15542: LD_INT 0
15544: PPUSH
15545: PPUSH
15546: PPUSH
// for i in all_units do
15547: LD_ADDR_VAR 0 2
15551: PUSH
15552: LD_OWVAR 3
15556: PUSH
15557: FOR_IN
15558: IFFALSE 15636
// if IsSelected ( i ) then
15560: LD_VAR 0 2
15564: PPUSH
15565: CALL_OW 306
15569: IFFALSE 15634
// begin j := GetSide ( i ) ;
15571: LD_ADDR_VAR 0 3
15575: PUSH
15576: LD_VAR 0 2
15580: PPUSH
15581: CALL_OW 255
15585: ST_TO_ADDR
// if j = 8 then
15586: LD_VAR 0 3
15590: PUSH
15591: LD_INT 8
15593: EQUAL
15594: IFFALSE 15606
// j := 0 else
15596: LD_ADDR_VAR 0 3
15600: PUSH
15601: LD_INT 0
15603: ST_TO_ADDR
15604: GO 15620
// j := j + 1 ;
15606: LD_ADDR_VAR 0 3
15610: PUSH
15611: LD_VAR 0 3
15615: PUSH
15616: LD_INT 1
15618: PLUS
15619: ST_TO_ADDR
// SetSide ( i , j ) ;
15620: LD_VAR 0 2
15624: PPUSH
15625: LD_VAR 0 3
15629: PPUSH
15630: CALL_OW 235
// end ;
15634: GO 15557
15636: POP
15637: POP
// end ;
15638: LD_VAR 0 1
15642: RET
// export function hHackFog ; begin
15643: LD_INT 0
15645: PPUSH
// FogOff ( true ) ;
15646: LD_INT 1
15648: PPUSH
15649: CALL_OW 344
// end ;
15653: LD_VAR 0 1
15657: RET
// export function hHackTeleport ( unit , x , y ) ; begin
15658: LD_INT 0
15660: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
15661: LD_VAR 0 1
15665: PPUSH
15666: LD_VAR 0 2
15670: PPUSH
15671: LD_VAR 0 3
15675: PPUSH
15676: LD_INT 1
15678: PPUSH
15679: LD_INT 1
15681: PPUSH
15682: CALL_OW 483
// CenterOnXY ( x , y ) ;
15686: LD_VAR 0 2
15690: PPUSH
15691: LD_VAR 0 3
15695: PPUSH
15696: CALL_OW 84
// end ;
15700: LD_VAR 0 4
15704: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
15705: LD_INT 0
15707: PPUSH
15708: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
15709: LD_VAR 0 1
15713: NOT
15714: PUSH
15715: LD_VAR 0 2
15719: PPUSH
15720: LD_VAR 0 3
15724: PPUSH
15725: CALL_OW 488
15729: NOT
15730: OR
15731: PUSH
15732: LD_VAR 0 1
15736: PPUSH
15737: CALL_OW 266
15741: PUSH
15742: LD_INT 3
15744: NONEQUAL
15745: PUSH
15746: LD_VAR 0 1
15750: PPUSH
15751: CALL_OW 247
15755: PUSH
15756: LD_INT 1
15758: EQUAL
15759: NOT
15760: AND
15761: OR
15762: IFFALSE 15766
// exit ;
15764: GO 15915
// if GetType ( factory ) = unit_human then
15766: LD_VAR 0 1
15770: PPUSH
15771: CALL_OW 247
15775: PUSH
15776: LD_INT 1
15778: EQUAL
15779: IFFALSE 15796
// factory := IsInUnit ( factory ) ;
15781: LD_ADDR_VAR 0 1
15785: PUSH
15786: LD_VAR 0 1
15790: PPUSH
15791: CALL_OW 310
15795: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
15796: LD_VAR 0 1
15800: PPUSH
15801: CALL_OW 266
15805: PUSH
15806: LD_INT 3
15808: NONEQUAL
15809: IFFALSE 15813
// exit ;
15811: GO 15915
// if HexInfo ( x , y ) = factory then
15813: LD_VAR 0 2
15817: PPUSH
15818: LD_VAR 0 3
15822: PPUSH
15823: CALL_OW 428
15827: PUSH
15828: LD_VAR 0 1
15832: EQUAL
15833: IFFALSE 15860
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
15835: LD_ADDR_EXP 60
15839: PUSH
15840: LD_EXP 60
15844: PPUSH
15845: LD_VAR 0 1
15849: PPUSH
15850: LD_INT 0
15852: PPUSH
15853: CALL_OW 1
15857: ST_TO_ADDR
15858: GO 15911
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
15860: LD_ADDR_EXP 60
15864: PUSH
15865: LD_EXP 60
15869: PPUSH
15870: LD_VAR 0 1
15874: PPUSH
15875: LD_VAR 0 1
15879: PPUSH
15880: CALL_OW 255
15884: PUSH
15885: LD_VAR 0 1
15889: PUSH
15890: LD_VAR 0 2
15894: PUSH
15895: LD_VAR 0 3
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: PPUSH
15906: CALL_OW 1
15910: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15911: CALL 15920 0 0
// end ;
15915: LD_VAR 0 4
15919: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
15920: LD_INT 0
15922: PPUSH
15923: PPUSH
15924: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
15925: LD_STRING resetFactoryWaypoint();
15927: PPUSH
15928: CALL_OW 559
// if factoryWaypoints then
15932: LD_EXP 60
15936: IFFALSE 16062
// begin list := PrepareArray ( factoryWaypoints ) ;
15938: LD_ADDR_VAR 0 3
15942: PUSH
15943: LD_EXP 60
15947: PPUSH
15948: CALL 62734 0 1
15952: ST_TO_ADDR
// for i := 1 to list do
15953: LD_ADDR_VAR 0 2
15957: PUSH
15958: DOUBLE
15959: LD_INT 1
15961: DEC
15962: ST_TO_ADDR
15963: LD_VAR 0 3
15967: PUSH
15968: FOR_TO
15969: IFFALSE 16060
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15971: LD_STRING setFactoryWaypointXY(
15973: PUSH
15974: LD_VAR 0 3
15978: PUSH
15979: LD_VAR 0 2
15983: ARRAY
15984: PUSH
15985: LD_INT 1
15987: ARRAY
15988: STR
15989: PUSH
15990: LD_STRING ,
15992: STR
15993: PUSH
15994: LD_VAR 0 3
15998: PUSH
15999: LD_VAR 0 2
16003: ARRAY
16004: PUSH
16005: LD_INT 2
16007: ARRAY
16008: STR
16009: PUSH
16010: LD_STRING ,
16012: STR
16013: PUSH
16014: LD_VAR 0 3
16018: PUSH
16019: LD_VAR 0 2
16023: ARRAY
16024: PUSH
16025: LD_INT 3
16027: ARRAY
16028: STR
16029: PUSH
16030: LD_STRING ,
16032: STR
16033: PUSH
16034: LD_VAR 0 3
16038: PUSH
16039: LD_VAR 0 2
16043: ARRAY
16044: PUSH
16045: LD_INT 4
16047: ARRAY
16048: STR
16049: PUSH
16050: LD_STRING )
16052: STR
16053: PPUSH
16054: CALL_OW 559
16058: GO 15968
16060: POP
16061: POP
// end ; end ;
16062: LD_VAR 0 1
16066: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16067: LD_INT 0
16069: PPUSH
// if HexInfo ( x , y ) = warehouse then
16070: LD_VAR 0 2
16074: PPUSH
16075: LD_VAR 0 3
16079: PPUSH
16080: CALL_OW 428
16084: PUSH
16085: LD_VAR 0 1
16089: EQUAL
16090: IFFALSE 16117
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16092: LD_ADDR_EXP 61
16096: PUSH
16097: LD_EXP 61
16101: PPUSH
16102: LD_VAR 0 1
16106: PPUSH
16107: LD_INT 0
16109: PPUSH
16110: CALL_OW 1
16114: ST_TO_ADDR
16115: GO 16168
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16117: LD_ADDR_EXP 61
16121: PUSH
16122: LD_EXP 61
16126: PPUSH
16127: LD_VAR 0 1
16131: PPUSH
16132: LD_VAR 0 1
16136: PPUSH
16137: CALL_OW 255
16141: PUSH
16142: LD_VAR 0 1
16146: PUSH
16147: LD_VAR 0 2
16151: PUSH
16152: LD_VAR 0 3
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: PPUSH
16163: CALL_OW 1
16167: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16168: CALL 16177 0 0
// end ;
16172: LD_VAR 0 4
16176: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16177: LD_INT 0
16179: PPUSH
16180: PPUSH
16181: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16182: LD_STRING resetWarehouseGatheringPoints();
16184: PPUSH
16185: CALL_OW 559
// if warehouseGatheringPoints then
16189: LD_EXP 61
16193: IFFALSE 16319
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16195: LD_ADDR_VAR 0 3
16199: PUSH
16200: LD_EXP 61
16204: PPUSH
16205: CALL 62734 0 1
16209: ST_TO_ADDR
// for i := 1 to list do
16210: LD_ADDR_VAR 0 2
16214: PUSH
16215: DOUBLE
16216: LD_INT 1
16218: DEC
16219: ST_TO_ADDR
16220: LD_VAR 0 3
16224: PUSH
16225: FOR_TO
16226: IFFALSE 16317
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16228: LD_STRING setWarehouseGatheringPointXY(
16230: PUSH
16231: LD_VAR 0 3
16235: PUSH
16236: LD_VAR 0 2
16240: ARRAY
16241: PUSH
16242: LD_INT 1
16244: ARRAY
16245: STR
16246: PUSH
16247: LD_STRING ,
16249: STR
16250: PUSH
16251: LD_VAR 0 3
16255: PUSH
16256: LD_VAR 0 2
16260: ARRAY
16261: PUSH
16262: LD_INT 2
16264: ARRAY
16265: STR
16266: PUSH
16267: LD_STRING ,
16269: STR
16270: PUSH
16271: LD_VAR 0 3
16275: PUSH
16276: LD_VAR 0 2
16280: ARRAY
16281: PUSH
16282: LD_INT 3
16284: ARRAY
16285: STR
16286: PUSH
16287: LD_STRING ,
16289: STR
16290: PUSH
16291: LD_VAR 0 3
16295: PUSH
16296: LD_VAR 0 2
16300: ARRAY
16301: PUSH
16302: LD_INT 4
16304: ARRAY
16305: STR
16306: PUSH
16307: LD_STRING )
16309: STR
16310: PPUSH
16311: CALL_OW 559
16315: GO 16225
16317: POP
16318: POP
// end ; end ;
16319: LD_VAR 0 1
16323: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
16324: LD_EXP 61
16328: IFFALSE 17013
16330: GO 16332
16332: DISABLE
16333: LD_INT 0
16335: PPUSH
16336: PPUSH
16337: PPUSH
16338: PPUSH
16339: PPUSH
16340: PPUSH
16341: PPUSH
16342: PPUSH
16343: PPUSH
// begin enable ;
16344: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
16345: LD_ADDR_VAR 0 3
16349: PUSH
16350: LD_EXP 61
16354: PPUSH
16355: CALL 62734 0 1
16359: ST_TO_ADDR
// if not list then
16360: LD_VAR 0 3
16364: NOT
16365: IFFALSE 16369
// exit ;
16367: GO 17013
// for i := 1 to list do
16369: LD_ADDR_VAR 0 1
16373: PUSH
16374: DOUBLE
16375: LD_INT 1
16377: DEC
16378: ST_TO_ADDR
16379: LD_VAR 0 3
16383: PUSH
16384: FOR_TO
16385: IFFALSE 17011
// begin depot := list [ i ] [ 2 ] ;
16387: LD_ADDR_VAR 0 8
16391: PUSH
16392: LD_VAR 0 3
16396: PUSH
16397: LD_VAR 0 1
16401: ARRAY
16402: PUSH
16403: LD_INT 2
16405: ARRAY
16406: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
16407: LD_ADDR_VAR 0 5
16411: PUSH
16412: LD_VAR 0 3
16416: PUSH
16417: LD_VAR 0 1
16421: ARRAY
16422: PUSH
16423: LD_INT 1
16425: ARRAY
16426: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
16427: LD_VAR 0 8
16431: PPUSH
16432: CALL_OW 301
16436: PUSH
16437: LD_VAR 0 5
16441: PUSH
16442: LD_VAR 0 8
16446: PPUSH
16447: CALL_OW 255
16451: NONEQUAL
16452: OR
16453: IFFALSE 16482
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
16455: LD_ADDR_EXP 61
16459: PUSH
16460: LD_EXP 61
16464: PPUSH
16465: LD_VAR 0 8
16469: PPUSH
16470: LD_INT 0
16472: PPUSH
16473: CALL_OW 1
16477: ST_TO_ADDR
// exit ;
16478: POP
16479: POP
16480: GO 17013
// end ; x := list [ i ] [ 3 ] ;
16482: LD_ADDR_VAR 0 6
16486: PUSH
16487: LD_VAR 0 3
16491: PUSH
16492: LD_VAR 0 1
16496: ARRAY
16497: PUSH
16498: LD_INT 3
16500: ARRAY
16501: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
16502: LD_ADDR_VAR 0 7
16506: PUSH
16507: LD_VAR 0 3
16511: PUSH
16512: LD_VAR 0 1
16516: ARRAY
16517: PUSH
16518: LD_INT 4
16520: ARRAY
16521: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
16522: LD_ADDR_VAR 0 9
16526: PUSH
16527: LD_VAR 0 6
16531: PPUSH
16532: LD_VAR 0 7
16536: PPUSH
16537: LD_INT 16
16539: PPUSH
16540: CALL 61322 0 3
16544: ST_TO_ADDR
// if not cratesNearbyPoint then
16545: LD_VAR 0 9
16549: NOT
16550: IFFALSE 16556
// exit ;
16552: POP
16553: POP
16554: GO 17013
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
16556: LD_ADDR_VAR 0 4
16560: PUSH
16561: LD_INT 22
16563: PUSH
16564: LD_VAR 0 5
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: LD_INT 3
16575: PUSH
16576: LD_INT 60
16578: PUSH
16579: EMPTY
16580: LIST
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: PUSH
16586: LD_INT 91
16588: PUSH
16589: LD_VAR 0 8
16593: PUSH
16594: LD_INT 6
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: LIST
16601: PUSH
16602: LD_INT 2
16604: PUSH
16605: LD_INT 25
16607: PUSH
16608: LD_INT 2
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: LD_INT 25
16617: PUSH
16618: LD_INT 16
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: LIST
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: PPUSH
16636: CALL_OW 69
16640: PUSH
16641: LD_VAR 0 8
16645: PPUSH
16646: CALL_OW 313
16650: PPUSH
16651: LD_INT 3
16653: PUSH
16654: LD_INT 60
16656: PUSH
16657: EMPTY
16658: LIST
16659: PUSH
16660: EMPTY
16661: LIST
16662: LIST
16663: PUSH
16664: LD_INT 2
16666: PUSH
16667: LD_INT 25
16669: PUSH
16670: LD_INT 2
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: LD_INT 25
16679: PUSH
16680: LD_INT 16
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: LIST
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PPUSH
16696: CALL_OW 72
16700: UNION
16701: ST_TO_ADDR
// if tmp then
16702: LD_VAR 0 4
16706: IFFALSE 16786
// begin tmp := ShrinkArray ( tmp , 3 ) ;
16708: LD_ADDR_VAR 0 4
16712: PUSH
16713: LD_VAR 0 4
16717: PPUSH
16718: LD_INT 3
16720: PPUSH
16721: CALL 59291 0 2
16725: ST_TO_ADDR
// for j in tmp do
16726: LD_ADDR_VAR 0 2
16730: PUSH
16731: LD_VAR 0 4
16735: PUSH
16736: FOR_IN
16737: IFFALSE 16780
// begin if IsInUnit ( j ) then
16739: LD_VAR 0 2
16743: PPUSH
16744: CALL_OW 310
16748: IFFALSE 16759
// ComExit ( j ) ;
16750: LD_VAR 0 2
16754: PPUSH
16755: CALL 59374 0 1
// AddComCollect ( j , x , y ) ;
16759: LD_VAR 0 2
16763: PPUSH
16764: LD_VAR 0 6
16768: PPUSH
16769: LD_VAR 0 7
16773: PPUSH
16774: CALL_OW 177
// end ;
16778: GO 16736
16780: POP
16781: POP
// exit ;
16782: POP
16783: POP
16784: GO 17013
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
16786: LD_ADDR_VAR 0 4
16790: PUSH
16791: LD_INT 22
16793: PUSH
16794: LD_VAR 0 5
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PUSH
16803: LD_INT 91
16805: PUSH
16806: LD_VAR 0 8
16810: PUSH
16811: LD_INT 8
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: LIST
16818: PUSH
16819: LD_INT 2
16821: PUSH
16822: LD_INT 34
16824: PUSH
16825: LD_INT 12
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PUSH
16832: LD_INT 34
16834: PUSH
16835: LD_INT 51
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: PUSH
16842: LD_INT 34
16844: PUSH
16845: LD_INT 32
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: PUSH
16852: LD_INT 34
16854: PUSH
16855: LD_INT 89
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PUSH
16862: EMPTY
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: PUSH
16869: EMPTY
16870: LIST
16871: LIST
16872: LIST
16873: PPUSH
16874: CALL_OW 69
16878: ST_TO_ADDR
// if tmp then
16879: LD_VAR 0 4
16883: IFFALSE 17009
// begin for j in tmp do
16885: LD_ADDR_VAR 0 2
16889: PUSH
16890: LD_VAR 0 4
16894: PUSH
16895: FOR_IN
16896: IFFALSE 17007
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
16898: LD_VAR 0 2
16902: PPUSH
16903: CALL_OW 262
16907: PUSH
16908: LD_INT 3
16910: EQUAL
16911: PUSH
16912: LD_VAR 0 2
16916: PPUSH
16917: CALL_OW 261
16921: PUSH
16922: LD_INT 20
16924: GREATER
16925: OR
16926: PUSH
16927: LD_VAR 0 2
16931: PPUSH
16932: CALL_OW 314
16936: NOT
16937: AND
16938: PUSH
16939: LD_VAR 0 2
16943: PPUSH
16944: CALL_OW 263
16948: PUSH
16949: LD_INT 1
16951: NONEQUAL
16952: PUSH
16953: LD_VAR 0 2
16957: PPUSH
16958: CALL_OW 311
16962: OR
16963: AND
16964: IFFALSE 17005
// begin ComCollect ( j , x , y ) ;
16966: LD_VAR 0 2
16970: PPUSH
16971: LD_VAR 0 6
16975: PPUSH
16976: LD_VAR 0 7
16980: PPUSH
16981: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
16985: LD_VAR 0 2
16989: PPUSH
16990: LD_VAR 0 8
16994: PPUSH
16995: CALL_OW 172
// exit ;
16999: POP
17000: POP
17001: POP
17002: POP
17003: GO 17013
// end ;
17005: GO 16895
17007: POP
17008: POP
// end ; end ;
17009: GO 16384
17011: POP
17012: POP
// end ; end_of_file
17013: PPOPN 9
17015: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17016: LD_INT 0
17018: PPUSH
17019: PPUSH
17020: PPUSH
17021: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17022: LD_VAR 0 1
17026: PPUSH
17027: CALL_OW 264
17031: PUSH
17032: LD_INT 91
17034: EQUAL
17035: IFFALSE 17107
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17037: LD_INT 68
17039: PPUSH
17040: LD_VAR 0 1
17044: PPUSH
17045: CALL_OW 255
17049: PPUSH
17050: CALL_OW 321
17054: PUSH
17055: LD_INT 2
17057: EQUAL
17058: IFFALSE 17070
// eff := 70 else
17060: LD_ADDR_VAR 0 4
17064: PUSH
17065: LD_INT 70
17067: ST_TO_ADDR
17068: GO 17078
// eff := 30 ;
17070: LD_ADDR_VAR 0 4
17074: PUSH
17075: LD_INT 30
17077: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17078: LD_VAR 0 1
17082: PPUSH
17083: CALL_OW 250
17087: PPUSH
17088: LD_VAR 0 1
17092: PPUSH
17093: CALL_OW 251
17097: PPUSH
17098: LD_VAR 0 4
17102: PPUSH
17103: CALL_OW 495
// end ; end ;
17107: LD_VAR 0 2
17111: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17112: LD_INT 0
17114: PPUSH
// end ;
17115: LD_VAR 0 4
17119: RET
// export function SOS_Command ( cmd ) ; begin
17120: LD_INT 0
17122: PPUSH
// end ;
17123: LD_VAR 0 2
17127: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17128: LD_INT 0
17130: PPUSH
// end ;
17131: LD_VAR 0 6
17135: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
17136: LD_INT 0
17138: PPUSH
17139: PPUSH
// if not vehicle or not factory then
17140: LD_VAR 0 1
17144: NOT
17145: PUSH
17146: LD_VAR 0 2
17150: NOT
17151: OR
17152: IFFALSE 17156
// exit ;
17154: GO 17387
// if factoryWaypoints >= factory then
17156: LD_EXP 60
17160: PUSH
17161: LD_VAR 0 2
17165: GREATEREQUAL
17166: IFFALSE 17387
// if factoryWaypoints [ factory ] then
17168: LD_EXP 60
17172: PUSH
17173: LD_VAR 0 2
17177: ARRAY
17178: IFFALSE 17387
// begin if GetControl ( vehicle ) = control_manual then
17180: LD_VAR 0 1
17184: PPUSH
17185: CALL_OW 263
17189: PUSH
17190: LD_INT 1
17192: EQUAL
17193: IFFALSE 17274
// begin driver := IsDrivenBy ( vehicle ) ;
17195: LD_ADDR_VAR 0 4
17199: PUSH
17200: LD_VAR 0 1
17204: PPUSH
17205: CALL_OW 311
17209: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17210: LD_VAR 0 4
17214: PPUSH
17215: LD_EXP 60
17219: PUSH
17220: LD_VAR 0 2
17224: ARRAY
17225: PUSH
17226: LD_INT 3
17228: ARRAY
17229: PPUSH
17230: LD_EXP 60
17234: PUSH
17235: LD_VAR 0 2
17239: ARRAY
17240: PUSH
17241: LD_INT 4
17243: ARRAY
17244: PPUSH
17245: CALL_OW 171
// AddComExitVehicle ( driver ) ;
17249: LD_VAR 0 4
17253: PPUSH
17254: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
17258: LD_VAR 0 4
17262: PPUSH
17263: LD_VAR 0 2
17267: PPUSH
17268: CALL_OW 180
// end else
17272: GO 17387
// if GetControl ( vehicle ) = control_remote then
17274: LD_VAR 0 1
17278: PPUSH
17279: CALL_OW 263
17283: PUSH
17284: LD_INT 2
17286: EQUAL
17287: IFFALSE 17348
// begin wait ( 0 0$2 ) ;
17289: LD_INT 70
17291: PPUSH
17292: CALL_OW 67
// if Connect ( vehicle ) then
17296: LD_VAR 0 1
17300: PPUSH
17301: CALL 29633 0 1
17305: IFFALSE 17346
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17307: LD_VAR 0 1
17311: PPUSH
17312: LD_EXP 60
17316: PUSH
17317: LD_VAR 0 2
17321: ARRAY
17322: PUSH
17323: LD_INT 3
17325: ARRAY
17326: PPUSH
17327: LD_EXP 60
17331: PUSH
17332: LD_VAR 0 2
17336: ARRAY
17337: PUSH
17338: LD_INT 4
17340: ARRAY
17341: PPUSH
17342: CALL_OW 171
// end else
17346: GO 17387
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17348: LD_VAR 0 1
17352: PPUSH
17353: LD_EXP 60
17357: PUSH
17358: LD_VAR 0 2
17362: ARRAY
17363: PUSH
17364: LD_INT 3
17366: ARRAY
17367: PPUSH
17368: LD_EXP 60
17372: PUSH
17373: LD_VAR 0 2
17377: ARRAY
17378: PUSH
17379: LD_INT 4
17381: ARRAY
17382: PPUSH
17383: CALL_OW 171
// end ; end ;
17387: LD_VAR 0 3
17391: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
17392: LD_INT 0
17394: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
17395: LD_VAR 0 1
17399: PUSH
17400: LD_INT 250
17402: EQUAL
17403: PUSH
17404: LD_VAR 0 2
17408: PPUSH
17409: CALL_OW 264
17413: PUSH
17414: LD_INT 81
17416: EQUAL
17417: AND
17418: IFFALSE 17439
// MinerPlaceMine ( unit , x , y ) ;
17420: LD_VAR 0 2
17424: PPUSH
17425: LD_VAR 0 4
17429: PPUSH
17430: LD_VAR 0 5
17434: PPUSH
17435: CALL 19824 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
17439: LD_VAR 0 1
17443: PUSH
17444: LD_INT 251
17446: EQUAL
17447: PUSH
17448: LD_VAR 0 2
17452: PPUSH
17453: CALL_OW 264
17457: PUSH
17458: LD_INT 81
17460: EQUAL
17461: AND
17462: IFFALSE 17483
// MinerDetonateMine ( unit , x , y ) ;
17464: LD_VAR 0 2
17468: PPUSH
17469: LD_VAR 0 4
17473: PPUSH
17474: LD_VAR 0 5
17478: PPUSH
17479: CALL 20099 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
17483: LD_VAR 0 1
17487: PUSH
17488: LD_INT 252
17490: EQUAL
17491: PUSH
17492: LD_VAR 0 2
17496: PPUSH
17497: CALL_OW 264
17501: PUSH
17502: LD_INT 81
17504: EQUAL
17505: AND
17506: IFFALSE 17527
// MinerCreateMinefield ( unit , x , y ) ;
17508: LD_VAR 0 2
17512: PPUSH
17513: LD_VAR 0 4
17517: PPUSH
17518: LD_VAR 0 5
17522: PPUSH
17523: CALL 20516 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
17527: LD_VAR 0 1
17531: PUSH
17532: LD_INT 253
17534: EQUAL
17535: PUSH
17536: LD_VAR 0 2
17540: PPUSH
17541: CALL_OW 257
17545: PUSH
17546: LD_INT 5
17548: EQUAL
17549: AND
17550: IFFALSE 17571
// ComBinocular ( unit , x , y ) ;
17552: LD_VAR 0 2
17556: PPUSH
17557: LD_VAR 0 4
17561: PPUSH
17562: LD_VAR 0 5
17566: PPUSH
17567: CALL 20885 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
17571: LD_VAR 0 1
17575: PUSH
17576: LD_INT 254
17578: EQUAL
17579: PUSH
17580: LD_VAR 0 2
17584: PPUSH
17585: CALL_OW 264
17589: PUSH
17590: LD_INT 99
17592: EQUAL
17593: AND
17594: PUSH
17595: LD_VAR 0 3
17599: PPUSH
17600: CALL_OW 263
17604: PUSH
17605: LD_INT 3
17607: EQUAL
17608: AND
17609: IFFALSE 17625
// HackDestroyVehicle ( unit , selectedUnit ) ;
17611: LD_VAR 0 2
17615: PPUSH
17616: LD_VAR 0 3
17620: PPUSH
17621: CALL 19188 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
17625: LD_VAR 0 1
17629: PUSH
17630: LD_INT 255
17632: EQUAL
17633: PUSH
17634: LD_VAR 0 2
17638: PPUSH
17639: CALL_OW 264
17643: PUSH
17644: LD_INT 14
17646: PUSH
17647: LD_INT 53
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: IN
17654: AND
17655: PUSH
17656: LD_VAR 0 4
17660: PPUSH
17661: LD_VAR 0 5
17665: PPUSH
17666: CALL_OW 488
17670: AND
17671: IFFALSE 17695
// CutTreeXYR ( unit , x , y , 12 ) ;
17673: LD_VAR 0 2
17677: PPUSH
17678: LD_VAR 0 4
17682: PPUSH
17683: LD_VAR 0 5
17687: PPUSH
17688: LD_INT 12
17690: PPUSH
17691: CALL 17758 0 4
// if cmd = 256 then
17695: LD_VAR 0 1
17699: PUSH
17700: LD_INT 256
17702: EQUAL
17703: IFFALSE 17724
// SetFactoryWaypoint ( unit , x , y ) ;
17705: LD_VAR 0 2
17709: PPUSH
17710: LD_VAR 0 4
17714: PPUSH
17715: LD_VAR 0 5
17719: PPUSH
17720: CALL 15705 0 3
// if cmd = 257 then
17724: LD_VAR 0 1
17728: PUSH
17729: LD_INT 257
17731: EQUAL
17732: IFFALSE 17753
// SetWarehouseGatheringPoint ( unit , x , y ) ;
17734: LD_VAR 0 2
17738: PPUSH
17739: LD_VAR 0 4
17743: PPUSH
17744: LD_VAR 0 5
17748: PPUSH
17749: CALL 16067 0 3
// end ;
17753: LD_VAR 0 6
17757: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17758: LD_INT 0
17760: PPUSH
17761: PPUSH
17762: PPUSH
17763: PPUSH
17764: PPUSH
17765: PPUSH
17766: PPUSH
17767: PPUSH
17768: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
17769: LD_VAR 0 1
17773: NOT
17774: PUSH
17775: LD_VAR 0 2
17779: PPUSH
17780: LD_VAR 0 3
17784: PPUSH
17785: CALL_OW 488
17789: NOT
17790: OR
17791: PUSH
17792: LD_VAR 0 4
17796: NOT
17797: OR
17798: IFFALSE 17802
// exit ;
17800: GO 18142
// list := [ ] ;
17802: LD_ADDR_VAR 0 13
17806: PUSH
17807: EMPTY
17808: ST_TO_ADDR
// if x - r < 0 then
17809: LD_VAR 0 2
17813: PUSH
17814: LD_VAR 0 4
17818: MINUS
17819: PUSH
17820: LD_INT 0
17822: LESS
17823: IFFALSE 17835
// min_x := 0 else
17825: LD_ADDR_VAR 0 7
17829: PUSH
17830: LD_INT 0
17832: ST_TO_ADDR
17833: GO 17851
// min_x := x - r ;
17835: LD_ADDR_VAR 0 7
17839: PUSH
17840: LD_VAR 0 2
17844: PUSH
17845: LD_VAR 0 4
17849: MINUS
17850: ST_TO_ADDR
// if y - r < 0 then
17851: LD_VAR 0 3
17855: PUSH
17856: LD_VAR 0 4
17860: MINUS
17861: PUSH
17862: LD_INT 0
17864: LESS
17865: IFFALSE 17877
// min_y := 0 else
17867: LD_ADDR_VAR 0 8
17871: PUSH
17872: LD_INT 0
17874: ST_TO_ADDR
17875: GO 17893
// min_y := y - r ;
17877: LD_ADDR_VAR 0 8
17881: PUSH
17882: LD_VAR 0 3
17886: PUSH
17887: LD_VAR 0 4
17891: MINUS
17892: ST_TO_ADDR
// max_x := x + r ;
17893: LD_ADDR_VAR 0 9
17897: PUSH
17898: LD_VAR 0 2
17902: PUSH
17903: LD_VAR 0 4
17907: PLUS
17908: ST_TO_ADDR
// max_y := y + r ;
17909: LD_ADDR_VAR 0 10
17913: PUSH
17914: LD_VAR 0 3
17918: PUSH
17919: LD_VAR 0 4
17923: PLUS
17924: ST_TO_ADDR
// for _x = min_x to max_x do
17925: LD_ADDR_VAR 0 11
17929: PUSH
17930: DOUBLE
17931: LD_VAR 0 7
17935: DEC
17936: ST_TO_ADDR
17937: LD_VAR 0 9
17941: PUSH
17942: FOR_TO
17943: IFFALSE 18060
// for _y = min_y to max_y do
17945: LD_ADDR_VAR 0 12
17949: PUSH
17950: DOUBLE
17951: LD_VAR 0 8
17955: DEC
17956: ST_TO_ADDR
17957: LD_VAR 0 10
17961: PUSH
17962: FOR_TO
17963: IFFALSE 18056
// begin if not ValidHex ( _x , _y ) then
17965: LD_VAR 0 11
17969: PPUSH
17970: LD_VAR 0 12
17974: PPUSH
17975: CALL_OW 488
17979: NOT
17980: IFFALSE 17984
// continue ;
17982: GO 17962
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17984: LD_VAR 0 11
17988: PPUSH
17989: LD_VAR 0 12
17993: PPUSH
17994: CALL_OW 351
17998: PUSH
17999: LD_VAR 0 11
18003: PPUSH
18004: LD_VAR 0 12
18008: PPUSH
18009: CALL_OW 554
18013: AND
18014: IFFALSE 18054
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18016: LD_ADDR_VAR 0 13
18020: PUSH
18021: LD_VAR 0 13
18025: PPUSH
18026: LD_VAR 0 13
18030: PUSH
18031: LD_INT 1
18033: PLUS
18034: PPUSH
18035: LD_VAR 0 11
18039: PUSH
18040: LD_VAR 0 12
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PPUSH
18049: CALL_OW 2
18053: ST_TO_ADDR
// end ;
18054: GO 17962
18056: POP
18057: POP
18058: GO 17942
18060: POP
18061: POP
// if not list then
18062: LD_VAR 0 13
18066: NOT
18067: IFFALSE 18071
// exit ;
18069: GO 18142
// for i in list do
18071: LD_ADDR_VAR 0 6
18075: PUSH
18076: LD_VAR 0 13
18080: PUSH
18081: FOR_IN
18082: IFFALSE 18140
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18084: LD_VAR 0 1
18088: PPUSH
18089: LD_STRING M
18091: PUSH
18092: LD_VAR 0 6
18096: PUSH
18097: LD_INT 1
18099: ARRAY
18100: PUSH
18101: LD_VAR 0 6
18105: PUSH
18106: LD_INT 2
18108: ARRAY
18109: PUSH
18110: LD_INT 0
18112: PUSH
18113: LD_INT 0
18115: PUSH
18116: LD_INT 0
18118: PUSH
18119: LD_INT 0
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: PUSH
18131: EMPTY
18132: LIST
18133: PPUSH
18134: CALL_OW 447
18138: GO 18081
18140: POP
18141: POP
// end ;
18142: LD_VAR 0 5
18146: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18147: LD_EXP 63
18151: NOT
18152: IFFALSE 18202
18154: GO 18156
18156: DISABLE
// begin initHack := true ;
18157: LD_ADDR_EXP 63
18161: PUSH
18162: LD_INT 1
18164: ST_TO_ADDR
// hackTanks := [ ] ;
18165: LD_ADDR_EXP 64
18169: PUSH
18170: EMPTY
18171: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18172: LD_ADDR_EXP 65
18176: PUSH
18177: EMPTY
18178: ST_TO_ADDR
// hackLimit := 3 ;
18179: LD_ADDR_EXP 66
18183: PUSH
18184: LD_INT 3
18186: ST_TO_ADDR
// hackDist := 12 ;
18187: LD_ADDR_EXP 67
18191: PUSH
18192: LD_INT 12
18194: ST_TO_ADDR
// hackCounter := [ ] ;
18195: LD_ADDR_EXP 68
18199: PUSH
18200: EMPTY
18201: ST_TO_ADDR
// end ;
18202: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18203: LD_EXP 63
18207: PUSH
18208: LD_INT 34
18210: PUSH
18211: LD_INT 99
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PPUSH
18218: CALL_OW 69
18222: AND
18223: IFFALSE 18476
18225: GO 18227
18227: DISABLE
18228: LD_INT 0
18230: PPUSH
18231: PPUSH
// begin enable ;
18232: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18233: LD_ADDR_VAR 0 1
18237: PUSH
18238: LD_INT 34
18240: PUSH
18241: LD_INT 99
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PPUSH
18248: CALL_OW 69
18252: PUSH
18253: FOR_IN
18254: IFFALSE 18474
// begin if not i in hackTanks then
18256: LD_VAR 0 1
18260: PUSH
18261: LD_EXP 64
18265: IN
18266: NOT
18267: IFFALSE 18350
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18269: LD_ADDR_EXP 64
18273: PUSH
18274: LD_EXP 64
18278: PPUSH
18279: LD_EXP 64
18283: PUSH
18284: LD_INT 1
18286: PLUS
18287: PPUSH
18288: LD_VAR 0 1
18292: PPUSH
18293: CALL_OW 1
18297: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18298: LD_ADDR_EXP 65
18302: PUSH
18303: LD_EXP 65
18307: PPUSH
18308: LD_EXP 65
18312: PUSH
18313: LD_INT 1
18315: PLUS
18316: PPUSH
18317: EMPTY
18318: PPUSH
18319: CALL_OW 1
18323: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18324: LD_ADDR_EXP 68
18328: PUSH
18329: LD_EXP 68
18333: PPUSH
18334: LD_EXP 68
18338: PUSH
18339: LD_INT 1
18341: PLUS
18342: PPUSH
18343: EMPTY
18344: PPUSH
18345: CALL_OW 1
18349: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18350: LD_VAR 0 1
18354: PPUSH
18355: CALL_OW 302
18359: NOT
18360: IFFALSE 18373
// begin HackUnlinkAll ( i ) ;
18362: LD_VAR 0 1
18366: PPUSH
18367: CALL 18479 0 1
// continue ;
18371: GO 18253
// end ; HackCheckCapturedStatus ( i ) ;
18373: LD_VAR 0 1
18377: PPUSH
18378: CALL 18922 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18382: LD_ADDR_VAR 0 2
18386: PUSH
18387: LD_INT 81
18389: PUSH
18390: LD_VAR 0 1
18394: PPUSH
18395: CALL_OW 255
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 33
18406: PUSH
18407: LD_INT 3
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 91
18416: PUSH
18417: LD_VAR 0 1
18421: PUSH
18422: LD_EXP 67
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: LIST
18431: PUSH
18432: LD_INT 50
18434: PUSH
18435: EMPTY
18436: LIST
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: PPUSH
18444: CALL_OW 69
18448: ST_TO_ADDR
// if not tmp then
18449: LD_VAR 0 2
18453: NOT
18454: IFFALSE 18458
// continue ;
18456: GO 18253
// HackLink ( i , tmp ) ;
18458: LD_VAR 0 1
18462: PPUSH
18463: LD_VAR 0 2
18467: PPUSH
18468: CALL 18615 0 2
// end ;
18472: GO 18253
18474: POP
18475: POP
// end ;
18476: PPOPN 2
18478: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18479: LD_INT 0
18481: PPUSH
18482: PPUSH
18483: PPUSH
// if not hack in hackTanks then
18484: LD_VAR 0 1
18488: PUSH
18489: LD_EXP 64
18493: IN
18494: NOT
18495: IFFALSE 18499
// exit ;
18497: GO 18610
// index := GetElementIndex ( hackTanks , hack ) ;
18499: LD_ADDR_VAR 0 4
18503: PUSH
18504: LD_EXP 64
18508: PPUSH
18509: LD_VAR 0 1
18513: PPUSH
18514: CALL 26449 0 2
18518: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18519: LD_EXP 65
18523: PUSH
18524: LD_VAR 0 4
18528: ARRAY
18529: IFFALSE 18610
// begin for i in hackTanksCaptured [ index ] do
18531: LD_ADDR_VAR 0 3
18535: PUSH
18536: LD_EXP 65
18540: PUSH
18541: LD_VAR 0 4
18545: ARRAY
18546: PUSH
18547: FOR_IN
18548: IFFALSE 18574
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18550: LD_VAR 0 3
18554: PUSH
18555: LD_INT 1
18557: ARRAY
18558: PPUSH
18559: LD_VAR 0 3
18563: PUSH
18564: LD_INT 2
18566: ARRAY
18567: PPUSH
18568: CALL_OW 235
18572: GO 18547
18574: POP
18575: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18576: LD_ADDR_EXP 65
18580: PUSH
18581: LD_EXP 65
18585: PPUSH
18586: LD_VAR 0 4
18590: PPUSH
18591: EMPTY
18592: PPUSH
18593: CALL_OW 1
18597: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18598: LD_VAR 0 1
18602: PPUSH
18603: LD_INT 0
18605: PPUSH
18606: CALL_OW 505
// end ; end ;
18610: LD_VAR 0 2
18614: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18615: LD_INT 0
18617: PPUSH
18618: PPUSH
18619: PPUSH
// if not hack in hackTanks or not vehicles then
18620: LD_VAR 0 1
18624: PUSH
18625: LD_EXP 64
18629: IN
18630: NOT
18631: PUSH
18632: LD_VAR 0 2
18636: NOT
18637: OR
18638: IFFALSE 18642
// exit ;
18640: GO 18917
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18642: LD_ADDR_VAR 0 2
18646: PUSH
18647: LD_VAR 0 1
18651: PPUSH
18652: LD_VAR 0 2
18656: PPUSH
18657: LD_INT 1
18659: PPUSH
18660: LD_INT 1
18662: PPUSH
18663: CALL 27099 0 4
18667: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18668: LD_ADDR_VAR 0 5
18672: PUSH
18673: LD_EXP 64
18677: PPUSH
18678: LD_VAR 0 1
18682: PPUSH
18683: CALL 26449 0 2
18687: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18688: LD_EXP 65
18692: PUSH
18693: LD_VAR 0 5
18697: ARRAY
18698: PUSH
18699: LD_EXP 66
18703: LESS
18704: IFFALSE 18893
// begin for i := 1 to vehicles do
18706: LD_ADDR_VAR 0 4
18710: PUSH
18711: DOUBLE
18712: LD_INT 1
18714: DEC
18715: ST_TO_ADDR
18716: LD_VAR 0 2
18720: PUSH
18721: FOR_TO
18722: IFFALSE 18891
// begin if hackTanksCaptured [ index ] = hackLimit then
18724: LD_EXP 65
18728: PUSH
18729: LD_VAR 0 5
18733: ARRAY
18734: PUSH
18735: LD_EXP 66
18739: EQUAL
18740: IFFALSE 18744
// break ;
18742: GO 18891
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18744: LD_ADDR_EXP 68
18748: PUSH
18749: LD_EXP 68
18753: PPUSH
18754: LD_VAR 0 5
18758: PPUSH
18759: LD_EXP 68
18763: PUSH
18764: LD_VAR 0 5
18768: ARRAY
18769: PUSH
18770: LD_INT 1
18772: PLUS
18773: PPUSH
18774: CALL_OW 1
18778: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18779: LD_ADDR_EXP 65
18783: PUSH
18784: LD_EXP 65
18788: PPUSH
18789: LD_VAR 0 5
18793: PUSH
18794: LD_EXP 65
18798: PUSH
18799: LD_VAR 0 5
18803: ARRAY
18804: PUSH
18805: LD_INT 1
18807: PLUS
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PPUSH
18813: LD_VAR 0 2
18817: PUSH
18818: LD_VAR 0 4
18822: ARRAY
18823: PUSH
18824: LD_VAR 0 2
18828: PUSH
18829: LD_VAR 0 4
18833: ARRAY
18834: PPUSH
18835: CALL_OW 255
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PPUSH
18844: CALL 26664 0 3
18848: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
18849: LD_VAR 0 2
18853: PUSH
18854: LD_VAR 0 4
18858: ARRAY
18859: PPUSH
18860: LD_VAR 0 1
18864: PPUSH
18865: CALL_OW 255
18869: PPUSH
18870: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
18874: LD_VAR 0 2
18878: PUSH
18879: LD_VAR 0 4
18883: ARRAY
18884: PPUSH
18885: CALL_OW 141
// end ;
18889: GO 18721
18891: POP
18892: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18893: LD_VAR 0 1
18897: PPUSH
18898: LD_EXP 65
18902: PUSH
18903: LD_VAR 0 5
18907: ARRAY
18908: PUSH
18909: LD_INT 0
18911: PLUS
18912: PPUSH
18913: CALL_OW 505
// end ;
18917: LD_VAR 0 3
18921: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
18922: LD_INT 0
18924: PPUSH
18925: PPUSH
18926: PPUSH
18927: PPUSH
// if not hack in hackTanks then
18928: LD_VAR 0 1
18932: PUSH
18933: LD_EXP 64
18937: IN
18938: NOT
18939: IFFALSE 18943
// exit ;
18941: GO 19183
// index := GetElementIndex ( hackTanks , hack ) ;
18943: LD_ADDR_VAR 0 4
18947: PUSH
18948: LD_EXP 64
18952: PPUSH
18953: LD_VAR 0 1
18957: PPUSH
18958: CALL 26449 0 2
18962: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
18963: LD_ADDR_VAR 0 3
18967: PUSH
18968: DOUBLE
18969: LD_EXP 65
18973: PUSH
18974: LD_VAR 0 4
18978: ARRAY
18979: INC
18980: ST_TO_ADDR
18981: LD_INT 1
18983: PUSH
18984: FOR_DOWNTO
18985: IFFALSE 19157
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
18987: LD_ADDR_VAR 0 5
18991: PUSH
18992: LD_EXP 65
18996: PUSH
18997: LD_VAR 0 4
19001: ARRAY
19002: PUSH
19003: LD_VAR 0 3
19007: ARRAY
19008: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19009: LD_VAR 0 5
19013: PUSH
19014: LD_INT 1
19016: ARRAY
19017: PPUSH
19018: CALL_OW 302
19022: NOT
19023: PUSH
19024: LD_VAR 0 5
19028: PUSH
19029: LD_INT 1
19031: ARRAY
19032: PPUSH
19033: CALL_OW 255
19037: PUSH
19038: LD_VAR 0 1
19042: PPUSH
19043: CALL_OW 255
19047: NONEQUAL
19048: OR
19049: IFFALSE 19155
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19051: LD_VAR 0 5
19055: PUSH
19056: LD_INT 1
19058: ARRAY
19059: PPUSH
19060: CALL_OW 305
19064: PUSH
19065: LD_VAR 0 5
19069: PUSH
19070: LD_INT 1
19072: ARRAY
19073: PPUSH
19074: CALL_OW 255
19078: PUSH
19079: LD_VAR 0 1
19083: PPUSH
19084: CALL_OW 255
19088: EQUAL
19089: AND
19090: IFFALSE 19114
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19092: LD_VAR 0 5
19096: PUSH
19097: LD_INT 1
19099: ARRAY
19100: PPUSH
19101: LD_VAR 0 5
19105: PUSH
19106: LD_INT 2
19108: ARRAY
19109: PPUSH
19110: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19114: LD_ADDR_EXP 65
19118: PUSH
19119: LD_EXP 65
19123: PPUSH
19124: LD_VAR 0 4
19128: PPUSH
19129: LD_EXP 65
19133: PUSH
19134: LD_VAR 0 4
19138: ARRAY
19139: PPUSH
19140: LD_VAR 0 3
19144: PPUSH
19145: CALL_OW 3
19149: PPUSH
19150: CALL_OW 1
19154: ST_TO_ADDR
// end ; end ;
19155: GO 18984
19157: POP
19158: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19159: LD_VAR 0 1
19163: PPUSH
19164: LD_EXP 65
19168: PUSH
19169: LD_VAR 0 4
19173: ARRAY
19174: PUSH
19175: LD_INT 0
19177: PLUS
19178: PPUSH
19179: CALL_OW 505
// end ;
19183: LD_VAR 0 2
19187: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19188: LD_INT 0
19190: PPUSH
19191: PPUSH
19192: PPUSH
19193: PPUSH
// if not hack in hackTanks then
19194: LD_VAR 0 1
19198: PUSH
19199: LD_EXP 64
19203: IN
19204: NOT
19205: IFFALSE 19209
// exit ;
19207: GO 19294
// index := GetElementIndex ( hackTanks , hack ) ;
19209: LD_ADDR_VAR 0 5
19213: PUSH
19214: LD_EXP 64
19218: PPUSH
19219: LD_VAR 0 1
19223: PPUSH
19224: CALL 26449 0 2
19228: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19229: LD_ADDR_VAR 0 4
19233: PUSH
19234: DOUBLE
19235: LD_INT 1
19237: DEC
19238: ST_TO_ADDR
19239: LD_EXP 65
19243: PUSH
19244: LD_VAR 0 5
19248: ARRAY
19249: PUSH
19250: FOR_TO
19251: IFFALSE 19292
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19253: LD_EXP 65
19257: PUSH
19258: LD_VAR 0 5
19262: ARRAY
19263: PUSH
19264: LD_VAR 0 4
19268: ARRAY
19269: PUSH
19270: LD_INT 1
19272: ARRAY
19273: PUSH
19274: LD_VAR 0 2
19278: EQUAL
19279: IFFALSE 19290
// KillUnit ( vehicle ) ;
19281: LD_VAR 0 2
19285: PPUSH
19286: CALL_OW 66
19290: GO 19250
19292: POP
19293: POP
// end ;
19294: LD_VAR 0 3
19298: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19299: LD_EXP 69
19303: NOT
19304: IFFALSE 19339
19306: GO 19308
19308: DISABLE
// begin initMiner := true ;
19309: LD_ADDR_EXP 69
19313: PUSH
19314: LD_INT 1
19316: ST_TO_ADDR
// minersList := [ ] ;
19317: LD_ADDR_EXP 70
19321: PUSH
19322: EMPTY
19323: ST_TO_ADDR
// minerMinesList := [ ] ;
19324: LD_ADDR_EXP 71
19328: PUSH
19329: EMPTY
19330: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
19331: LD_ADDR_EXP 72
19335: PUSH
19336: LD_INT 5
19338: ST_TO_ADDR
// end ;
19339: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
19340: LD_EXP 69
19344: PUSH
19345: LD_INT 34
19347: PUSH
19348: LD_INT 81
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PPUSH
19355: CALL_OW 69
19359: AND
19360: IFFALSE 19821
19362: GO 19364
19364: DISABLE
19365: LD_INT 0
19367: PPUSH
19368: PPUSH
19369: PPUSH
19370: PPUSH
// begin enable ;
19371: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
19372: LD_ADDR_VAR 0 1
19376: PUSH
19377: LD_INT 34
19379: PUSH
19380: LD_INT 81
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PPUSH
19387: CALL_OW 69
19391: PUSH
19392: FOR_IN
19393: IFFALSE 19465
// begin if not i in minersList then
19395: LD_VAR 0 1
19399: PUSH
19400: LD_EXP 70
19404: IN
19405: NOT
19406: IFFALSE 19463
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
19408: LD_ADDR_EXP 70
19412: PUSH
19413: LD_EXP 70
19417: PPUSH
19418: LD_EXP 70
19422: PUSH
19423: LD_INT 1
19425: PLUS
19426: PPUSH
19427: LD_VAR 0 1
19431: PPUSH
19432: CALL_OW 1
19436: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
19437: LD_ADDR_EXP 71
19441: PUSH
19442: LD_EXP 71
19446: PPUSH
19447: LD_EXP 71
19451: PUSH
19452: LD_INT 1
19454: PLUS
19455: PPUSH
19456: EMPTY
19457: PPUSH
19458: CALL_OW 1
19462: ST_TO_ADDR
// end end ;
19463: GO 19392
19465: POP
19466: POP
// for i := minerMinesList downto 1 do
19467: LD_ADDR_VAR 0 1
19471: PUSH
19472: DOUBLE
19473: LD_EXP 71
19477: INC
19478: ST_TO_ADDR
19479: LD_INT 1
19481: PUSH
19482: FOR_DOWNTO
19483: IFFALSE 19819
// begin if IsLive ( minersList [ i ] ) then
19485: LD_EXP 70
19489: PUSH
19490: LD_VAR 0 1
19494: ARRAY
19495: PPUSH
19496: CALL_OW 300
19500: IFFALSE 19528
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
19502: LD_EXP 70
19506: PUSH
19507: LD_VAR 0 1
19511: ARRAY
19512: PPUSH
19513: LD_EXP 71
19517: PUSH
19518: LD_VAR 0 1
19522: ARRAY
19523: PPUSH
19524: CALL_OW 505
// if not minerMinesList [ i ] then
19528: LD_EXP 71
19532: PUSH
19533: LD_VAR 0 1
19537: ARRAY
19538: NOT
19539: IFFALSE 19543
// continue ;
19541: GO 19482
// for j := minerMinesList [ i ] downto 1 do
19543: LD_ADDR_VAR 0 2
19547: PUSH
19548: DOUBLE
19549: LD_EXP 71
19553: PUSH
19554: LD_VAR 0 1
19558: ARRAY
19559: INC
19560: ST_TO_ADDR
19561: LD_INT 1
19563: PUSH
19564: FOR_DOWNTO
19565: IFFALSE 19815
// begin side := GetSide ( minersList [ i ] ) ;
19567: LD_ADDR_VAR 0 3
19571: PUSH
19572: LD_EXP 70
19576: PUSH
19577: LD_VAR 0 1
19581: ARRAY
19582: PPUSH
19583: CALL_OW 255
19587: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19588: LD_ADDR_VAR 0 4
19592: PUSH
19593: LD_EXP 71
19597: PUSH
19598: LD_VAR 0 1
19602: ARRAY
19603: PUSH
19604: LD_VAR 0 2
19608: ARRAY
19609: PUSH
19610: LD_INT 1
19612: ARRAY
19613: PPUSH
19614: LD_EXP 71
19618: PUSH
19619: LD_VAR 0 1
19623: ARRAY
19624: PUSH
19625: LD_VAR 0 2
19629: ARRAY
19630: PUSH
19631: LD_INT 2
19633: ARRAY
19634: PPUSH
19635: CALL_OW 428
19639: ST_TO_ADDR
// if not tmp then
19640: LD_VAR 0 4
19644: NOT
19645: IFFALSE 19649
// continue ;
19647: GO 19564
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19649: LD_VAR 0 4
19653: PUSH
19654: LD_INT 81
19656: PUSH
19657: LD_VAR 0 3
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PPUSH
19666: CALL_OW 69
19670: IN
19671: PUSH
19672: LD_EXP 71
19676: PUSH
19677: LD_VAR 0 1
19681: ARRAY
19682: PUSH
19683: LD_VAR 0 2
19687: ARRAY
19688: PUSH
19689: LD_INT 1
19691: ARRAY
19692: PPUSH
19693: LD_EXP 71
19697: PUSH
19698: LD_VAR 0 1
19702: ARRAY
19703: PUSH
19704: LD_VAR 0 2
19708: ARRAY
19709: PUSH
19710: LD_INT 2
19712: ARRAY
19713: PPUSH
19714: CALL_OW 458
19718: AND
19719: IFFALSE 19813
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
19721: LD_EXP 71
19725: PUSH
19726: LD_VAR 0 1
19730: ARRAY
19731: PUSH
19732: LD_VAR 0 2
19736: ARRAY
19737: PUSH
19738: LD_INT 1
19740: ARRAY
19741: PPUSH
19742: LD_EXP 71
19746: PUSH
19747: LD_VAR 0 1
19751: ARRAY
19752: PUSH
19753: LD_VAR 0 2
19757: ARRAY
19758: PUSH
19759: LD_INT 2
19761: ARRAY
19762: PPUSH
19763: LD_VAR 0 3
19767: PPUSH
19768: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
19772: LD_ADDR_EXP 71
19776: PUSH
19777: LD_EXP 71
19781: PPUSH
19782: LD_VAR 0 1
19786: PPUSH
19787: LD_EXP 71
19791: PUSH
19792: LD_VAR 0 1
19796: ARRAY
19797: PPUSH
19798: LD_VAR 0 2
19802: PPUSH
19803: CALL_OW 3
19807: PPUSH
19808: CALL_OW 1
19812: ST_TO_ADDR
// end ; end ;
19813: GO 19564
19815: POP
19816: POP
// end ;
19817: GO 19482
19819: POP
19820: POP
// end ;
19821: PPOPN 4
19823: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
19824: LD_INT 0
19826: PPUSH
19827: PPUSH
// result := false ;
19828: LD_ADDR_VAR 0 4
19832: PUSH
19833: LD_INT 0
19835: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
19836: LD_VAR 0 1
19840: PPUSH
19841: CALL_OW 264
19845: PUSH
19846: LD_INT 81
19848: EQUAL
19849: NOT
19850: IFFALSE 19854
// exit ;
19852: GO 20094
// index := GetElementIndex ( minersList , unit ) ;
19854: LD_ADDR_VAR 0 5
19858: PUSH
19859: LD_EXP 70
19863: PPUSH
19864: LD_VAR 0 1
19868: PPUSH
19869: CALL 26449 0 2
19873: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
19874: LD_EXP 71
19878: PUSH
19879: LD_VAR 0 5
19883: ARRAY
19884: PUSH
19885: LD_EXP 72
19889: GREATEREQUAL
19890: IFFALSE 19894
// exit ;
19892: GO 20094
// ComMoveXY ( unit , x , y ) ;
19894: LD_VAR 0 1
19898: PPUSH
19899: LD_VAR 0 2
19903: PPUSH
19904: LD_VAR 0 3
19908: PPUSH
19909: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19913: LD_INT 35
19915: PPUSH
19916: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
19920: LD_VAR 0 1
19924: PPUSH
19925: LD_VAR 0 2
19929: PPUSH
19930: LD_VAR 0 3
19934: PPUSH
19935: CALL 57785 0 3
19939: NOT
19940: PUSH
19941: LD_VAR 0 1
19945: PPUSH
19946: CALL_OW 314
19950: AND
19951: IFFALSE 19955
// exit ;
19953: GO 20094
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
19955: LD_VAR 0 2
19959: PPUSH
19960: LD_VAR 0 3
19964: PPUSH
19965: CALL_OW 428
19969: PUSH
19970: LD_VAR 0 1
19974: EQUAL
19975: PUSH
19976: LD_VAR 0 1
19980: PPUSH
19981: CALL_OW 314
19985: NOT
19986: AND
19987: IFFALSE 19913
// PlaySoundXY ( x , y , PlantMine ) ;
19989: LD_VAR 0 2
19993: PPUSH
19994: LD_VAR 0 3
19998: PPUSH
19999: LD_STRING PlantMine
20001: PPUSH
20002: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20006: LD_VAR 0 2
20010: PPUSH
20011: LD_VAR 0 3
20015: PPUSH
20016: LD_VAR 0 1
20020: PPUSH
20021: CALL_OW 255
20025: PPUSH
20026: LD_INT 0
20028: PPUSH
20029: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20033: LD_ADDR_EXP 71
20037: PUSH
20038: LD_EXP 71
20042: PPUSH
20043: LD_VAR 0 5
20047: PUSH
20048: LD_EXP 71
20052: PUSH
20053: LD_VAR 0 5
20057: ARRAY
20058: PUSH
20059: LD_INT 1
20061: PLUS
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: PPUSH
20067: LD_VAR 0 2
20071: PUSH
20072: LD_VAR 0 3
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PPUSH
20081: CALL 26664 0 3
20085: ST_TO_ADDR
// result := true ;
20086: LD_ADDR_VAR 0 4
20090: PUSH
20091: LD_INT 1
20093: ST_TO_ADDR
// end ;
20094: LD_VAR 0 4
20098: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20099: LD_INT 0
20101: PPUSH
20102: PPUSH
20103: PPUSH
// if not unit in minersList then
20104: LD_VAR 0 1
20108: PUSH
20109: LD_EXP 70
20113: IN
20114: NOT
20115: IFFALSE 20119
// exit ;
20117: GO 20511
// index := GetElementIndex ( minersList , unit ) ;
20119: LD_ADDR_VAR 0 6
20123: PUSH
20124: LD_EXP 70
20128: PPUSH
20129: LD_VAR 0 1
20133: PPUSH
20134: CALL 26449 0 2
20138: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20139: LD_ADDR_VAR 0 5
20143: PUSH
20144: DOUBLE
20145: LD_EXP 71
20149: PUSH
20150: LD_VAR 0 6
20154: ARRAY
20155: INC
20156: ST_TO_ADDR
20157: LD_INT 1
20159: PUSH
20160: FOR_DOWNTO
20161: IFFALSE 20322
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20163: LD_EXP 71
20167: PUSH
20168: LD_VAR 0 6
20172: ARRAY
20173: PUSH
20174: LD_VAR 0 5
20178: ARRAY
20179: PUSH
20180: LD_INT 1
20182: ARRAY
20183: PUSH
20184: LD_VAR 0 2
20188: EQUAL
20189: PUSH
20190: LD_EXP 71
20194: PUSH
20195: LD_VAR 0 6
20199: ARRAY
20200: PUSH
20201: LD_VAR 0 5
20205: ARRAY
20206: PUSH
20207: LD_INT 2
20209: ARRAY
20210: PUSH
20211: LD_VAR 0 3
20215: EQUAL
20216: AND
20217: IFFALSE 20320
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20219: LD_EXP 71
20223: PUSH
20224: LD_VAR 0 6
20228: ARRAY
20229: PUSH
20230: LD_VAR 0 5
20234: ARRAY
20235: PUSH
20236: LD_INT 1
20238: ARRAY
20239: PPUSH
20240: LD_EXP 71
20244: PUSH
20245: LD_VAR 0 6
20249: ARRAY
20250: PUSH
20251: LD_VAR 0 5
20255: ARRAY
20256: PUSH
20257: LD_INT 2
20259: ARRAY
20260: PPUSH
20261: LD_VAR 0 1
20265: PPUSH
20266: CALL_OW 255
20270: PPUSH
20271: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20275: LD_ADDR_EXP 71
20279: PUSH
20280: LD_EXP 71
20284: PPUSH
20285: LD_VAR 0 6
20289: PPUSH
20290: LD_EXP 71
20294: PUSH
20295: LD_VAR 0 6
20299: ARRAY
20300: PPUSH
20301: LD_VAR 0 5
20305: PPUSH
20306: CALL_OW 3
20310: PPUSH
20311: CALL_OW 1
20315: ST_TO_ADDR
// exit ;
20316: POP
20317: POP
20318: GO 20511
// end ; end ;
20320: GO 20160
20322: POP
20323: POP
// for i := minerMinesList [ index ] downto 1 do
20324: LD_ADDR_VAR 0 5
20328: PUSH
20329: DOUBLE
20330: LD_EXP 71
20334: PUSH
20335: LD_VAR 0 6
20339: ARRAY
20340: INC
20341: ST_TO_ADDR
20342: LD_INT 1
20344: PUSH
20345: FOR_DOWNTO
20346: IFFALSE 20509
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
20348: LD_EXP 71
20352: PUSH
20353: LD_VAR 0 6
20357: ARRAY
20358: PUSH
20359: LD_VAR 0 5
20363: ARRAY
20364: PUSH
20365: LD_INT 1
20367: ARRAY
20368: PPUSH
20369: LD_EXP 71
20373: PUSH
20374: LD_VAR 0 6
20378: ARRAY
20379: PUSH
20380: LD_VAR 0 5
20384: ARRAY
20385: PUSH
20386: LD_INT 2
20388: ARRAY
20389: PPUSH
20390: LD_VAR 0 2
20394: PPUSH
20395: LD_VAR 0 3
20399: PPUSH
20400: CALL_OW 298
20404: PUSH
20405: LD_INT 6
20407: LESS
20408: IFFALSE 20507
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20410: LD_EXP 71
20414: PUSH
20415: LD_VAR 0 6
20419: ARRAY
20420: PUSH
20421: LD_VAR 0 5
20425: ARRAY
20426: PUSH
20427: LD_INT 1
20429: ARRAY
20430: PPUSH
20431: LD_EXP 71
20435: PUSH
20436: LD_VAR 0 6
20440: ARRAY
20441: PUSH
20442: LD_VAR 0 5
20446: ARRAY
20447: PUSH
20448: LD_INT 2
20450: ARRAY
20451: PPUSH
20452: LD_VAR 0 1
20456: PPUSH
20457: CALL_OW 255
20461: PPUSH
20462: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20466: LD_ADDR_EXP 71
20470: PUSH
20471: LD_EXP 71
20475: PPUSH
20476: LD_VAR 0 6
20480: PPUSH
20481: LD_EXP 71
20485: PUSH
20486: LD_VAR 0 6
20490: ARRAY
20491: PPUSH
20492: LD_VAR 0 5
20496: PPUSH
20497: CALL_OW 3
20501: PPUSH
20502: CALL_OW 1
20506: ST_TO_ADDR
// end ; end ;
20507: GO 20345
20509: POP
20510: POP
// end ;
20511: LD_VAR 0 4
20515: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20516: LD_INT 0
20518: PPUSH
20519: PPUSH
20520: PPUSH
20521: PPUSH
20522: PPUSH
20523: PPUSH
20524: PPUSH
20525: PPUSH
20526: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20527: LD_VAR 0 1
20531: PPUSH
20532: CALL_OW 264
20536: PUSH
20537: LD_INT 81
20539: EQUAL
20540: NOT
20541: PUSH
20542: LD_VAR 0 1
20546: PUSH
20547: LD_EXP 70
20551: IN
20552: NOT
20553: OR
20554: IFFALSE 20558
// exit ;
20556: GO 20880
// index := GetElementIndex ( minersList , unit ) ;
20558: LD_ADDR_VAR 0 6
20562: PUSH
20563: LD_EXP 70
20567: PPUSH
20568: LD_VAR 0 1
20572: PPUSH
20573: CALL 26449 0 2
20577: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
20578: LD_ADDR_VAR 0 8
20582: PUSH
20583: LD_EXP 72
20587: PUSH
20588: LD_EXP 71
20592: PUSH
20593: LD_VAR 0 6
20597: ARRAY
20598: MINUS
20599: ST_TO_ADDR
// if not minesFreeAmount then
20600: LD_VAR 0 8
20604: NOT
20605: IFFALSE 20609
// exit ;
20607: GO 20880
// tmp := [ ] ;
20609: LD_ADDR_VAR 0 7
20613: PUSH
20614: EMPTY
20615: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20616: LD_ADDR_VAR 0 5
20620: PUSH
20621: DOUBLE
20622: LD_INT 1
20624: DEC
20625: ST_TO_ADDR
20626: LD_VAR 0 8
20630: PUSH
20631: FOR_TO
20632: IFFALSE 20827
// begin _d := rand ( 0 , 5 ) ;
20634: LD_ADDR_VAR 0 11
20638: PUSH
20639: LD_INT 0
20641: PPUSH
20642: LD_INT 5
20644: PPUSH
20645: CALL_OW 12
20649: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20650: LD_ADDR_VAR 0 12
20654: PUSH
20655: LD_INT 2
20657: PPUSH
20658: LD_INT 6
20660: PPUSH
20661: CALL_OW 12
20665: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
20666: LD_ADDR_VAR 0 9
20670: PUSH
20671: LD_VAR 0 2
20675: PPUSH
20676: LD_VAR 0 11
20680: PPUSH
20681: LD_VAR 0 12
20685: PPUSH
20686: CALL_OW 272
20690: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
20691: LD_ADDR_VAR 0 10
20695: PUSH
20696: LD_VAR 0 3
20700: PPUSH
20701: LD_VAR 0 11
20705: PPUSH
20706: LD_VAR 0 12
20710: PPUSH
20711: CALL_OW 273
20715: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
20716: LD_VAR 0 9
20720: PPUSH
20721: LD_VAR 0 10
20725: PPUSH
20726: CALL_OW 488
20730: PUSH
20731: LD_VAR 0 9
20735: PUSH
20736: LD_VAR 0 10
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: LD_VAR 0 7
20749: IN
20750: NOT
20751: AND
20752: PUSH
20753: LD_VAR 0 9
20757: PPUSH
20758: LD_VAR 0 10
20762: PPUSH
20763: CALL_OW 458
20767: NOT
20768: AND
20769: IFFALSE 20811
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
20771: LD_ADDR_VAR 0 7
20775: PUSH
20776: LD_VAR 0 7
20780: PPUSH
20781: LD_VAR 0 7
20785: PUSH
20786: LD_INT 1
20788: PLUS
20789: PPUSH
20790: LD_VAR 0 9
20794: PUSH
20795: LD_VAR 0 10
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PPUSH
20804: CALL_OW 1
20808: ST_TO_ADDR
20809: GO 20825
// i := i - 1 ;
20811: LD_ADDR_VAR 0 5
20815: PUSH
20816: LD_VAR 0 5
20820: PUSH
20821: LD_INT 1
20823: MINUS
20824: ST_TO_ADDR
// end ;
20825: GO 20631
20827: POP
20828: POP
// for i in tmp do
20829: LD_ADDR_VAR 0 5
20833: PUSH
20834: LD_VAR 0 7
20838: PUSH
20839: FOR_IN
20840: IFFALSE 20878
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
20842: LD_VAR 0 1
20846: PPUSH
20847: LD_VAR 0 5
20851: PUSH
20852: LD_INT 1
20854: ARRAY
20855: PPUSH
20856: LD_VAR 0 5
20860: PUSH
20861: LD_INT 2
20863: ARRAY
20864: PPUSH
20865: CALL 19824 0 3
20869: NOT
20870: IFFALSE 20876
// exit ;
20872: POP
20873: POP
20874: GO 20880
20876: GO 20839
20878: POP
20879: POP
// end ;
20880: LD_VAR 0 4
20884: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
20885: LD_INT 0
20887: PPUSH
20888: PPUSH
20889: PPUSH
20890: PPUSH
20891: PPUSH
20892: PPUSH
20893: PPUSH
// if not GetClass ( unit ) = class_sniper then
20894: LD_VAR 0 1
20898: PPUSH
20899: CALL_OW 257
20903: PUSH
20904: LD_INT 5
20906: EQUAL
20907: NOT
20908: IFFALSE 20912
// exit ;
20910: GO 21300
// dist := 8 ;
20912: LD_ADDR_VAR 0 5
20916: PUSH
20917: LD_INT 8
20919: ST_TO_ADDR
// viewRange := 12 ;
20920: LD_ADDR_VAR 0 7
20924: PUSH
20925: LD_INT 12
20927: ST_TO_ADDR
// side := GetSide ( unit ) ;
20928: LD_ADDR_VAR 0 6
20932: PUSH
20933: LD_VAR 0 1
20937: PPUSH
20938: CALL_OW 255
20942: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
20943: LD_INT 61
20945: PPUSH
20946: LD_VAR 0 6
20950: PPUSH
20951: CALL_OW 321
20955: PUSH
20956: LD_INT 2
20958: EQUAL
20959: IFFALSE 20969
// viewRange := 16 ;
20961: LD_ADDR_VAR 0 7
20965: PUSH
20966: LD_INT 16
20968: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
20969: LD_VAR 0 1
20973: PPUSH
20974: LD_VAR 0 2
20978: PPUSH
20979: LD_VAR 0 3
20983: PPUSH
20984: CALL_OW 297
20988: PUSH
20989: LD_VAR 0 5
20993: GREATER
20994: IFFALSE 21073
// begin ComMoveXY ( unit , x , y ) ;
20996: LD_VAR 0 1
21000: PPUSH
21001: LD_VAR 0 2
21005: PPUSH
21006: LD_VAR 0 3
21010: PPUSH
21011: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21015: LD_INT 35
21017: PPUSH
21018: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21022: LD_VAR 0 1
21026: PPUSH
21027: LD_VAR 0 2
21031: PPUSH
21032: LD_VAR 0 3
21036: PPUSH
21037: CALL 57785 0 3
21041: NOT
21042: IFFALSE 21046
// exit ;
21044: GO 21300
// until GetDistUnitXY ( unit , x , y ) < dist ;
21046: LD_VAR 0 1
21050: PPUSH
21051: LD_VAR 0 2
21055: PPUSH
21056: LD_VAR 0 3
21060: PPUSH
21061: CALL_OW 297
21065: PUSH
21066: LD_VAR 0 5
21070: LESS
21071: IFFALSE 21015
// end ; ComTurnXY ( unit , x , y ) ;
21073: LD_VAR 0 1
21077: PPUSH
21078: LD_VAR 0 2
21082: PPUSH
21083: LD_VAR 0 3
21087: PPUSH
21088: CALL_OW 118
// wait ( 5 ) ;
21092: LD_INT 5
21094: PPUSH
21095: CALL_OW 67
// _d := GetDir ( unit ) ;
21099: LD_ADDR_VAR 0 10
21103: PUSH
21104: LD_VAR 0 1
21108: PPUSH
21109: CALL_OW 254
21113: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21114: LD_ADDR_VAR 0 8
21118: PUSH
21119: LD_VAR 0 1
21123: PPUSH
21124: CALL_OW 250
21128: PPUSH
21129: LD_VAR 0 10
21133: PPUSH
21134: LD_VAR 0 5
21138: PPUSH
21139: CALL_OW 272
21143: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21144: LD_ADDR_VAR 0 9
21148: PUSH
21149: LD_VAR 0 1
21153: PPUSH
21154: CALL_OW 251
21158: PPUSH
21159: LD_VAR 0 10
21163: PPUSH
21164: LD_VAR 0 5
21168: PPUSH
21169: CALL_OW 273
21173: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21174: LD_VAR 0 8
21178: PPUSH
21179: LD_VAR 0 9
21183: PPUSH
21184: CALL_OW 488
21188: NOT
21189: IFFALSE 21193
// exit ;
21191: GO 21300
// ComAnimCustom ( unit , 1 ) ;
21193: LD_VAR 0 1
21197: PPUSH
21198: LD_INT 1
21200: PPUSH
21201: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21205: LD_VAR 0 8
21209: PPUSH
21210: LD_VAR 0 9
21214: PPUSH
21215: LD_VAR 0 6
21219: PPUSH
21220: LD_VAR 0 7
21224: PPUSH
21225: CALL_OW 330
// repeat wait ( 1 ) ;
21229: LD_INT 1
21231: PPUSH
21232: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
21236: LD_VAR 0 1
21240: PPUSH
21241: CALL_OW 316
21245: PUSH
21246: LD_VAR 0 1
21250: PPUSH
21251: CALL_OW 314
21255: OR
21256: PUSH
21257: LD_VAR 0 1
21261: PPUSH
21262: CALL_OW 302
21266: NOT
21267: OR
21268: PUSH
21269: LD_VAR 0 1
21273: PPUSH
21274: CALL_OW 301
21278: OR
21279: IFFALSE 21229
// RemoveSeeing ( _x , _y , side ) ;
21281: LD_VAR 0 8
21285: PPUSH
21286: LD_VAR 0 9
21290: PPUSH
21291: LD_VAR 0 6
21295: PPUSH
21296: CALL_OW 331
// end ; end_of_file
21300: LD_VAR 0 4
21304: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
21305: LD_VAR 0 1
21309: PPUSH
21310: LD_VAR 0 2
21314: PPUSH
21315: LD_VAR 0 3
21319: PPUSH
21320: LD_VAR 0 4
21324: PPUSH
21325: LD_VAR 0 5
21329: PPUSH
21330: LD_VAR 0 6
21334: PPUSH
21335: CALL 1418 0 6
// end ;
21339: PPOPN 6
21341: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
21342: LD_INT 0
21344: PPUSH
// begin if not units then
21345: LD_VAR 0 1
21349: NOT
21350: IFFALSE 21354
// exit ;
21352: GO 21354
// end ;
21354: PPOPN 7
21356: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
21357: CALL 1389 0 0
// end ; end_of_file
21361: PPOPN 1
21363: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
21364: LD_VAR 0 1
21368: PUSH
21369: LD_INT 200
21371: DOUBLE
21372: GREATEREQUAL
21373: IFFALSE 21381
21375: LD_INT 299
21377: DOUBLE
21378: LESSEQUAL
21379: IFTRUE 21383
21381: GO 21415
21383: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
21384: LD_VAR 0 1
21388: PPUSH
21389: LD_VAR 0 2
21393: PPUSH
21394: LD_VAR 0 3
21398: PPUSH
21399: LD_VAR 0 4
21403: PPUSH
21404: LD_VAR 0 5
21408: PPUSH
21409: CALL 17392 0 5
21413: GO 21492
21415: LD_INT 300
21417: DOUBLE
21418: GREATEREQUAL
21419: IFFALSE 21427
21421: LD_INT 399
21423: DOUBLE
21424: LESSEQUAL
21425: IFTRUE 21429
21427: GO 21491
21429: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
21430: LD_VAR 0 1
21434: PPUSH
21435: LD_VAR 0 2
21439: PPUSH
21440: LD_VAR 0 3
21444: PPUSH
21445: LD_VAR 0 4
21449: PPUSH
21450: LD_VAR 0 5
21454: PPUSH
21455: LD_VAR 0 6
21459: PPUSH
21460: LD_VAR 0 7
21464: PPUSH
21465: LD_VAR 0 8
21469: PPUSH
21470: LD_VAR 0 9
21474: PPUSH
21475: LD_VAR 0 10
21479: PPUSH
21480: LD_VAR 0 11
21484: PPUSH
21485: CALL 13725 0 11
21489: GO 21492
21491: POP
// end ;
21492: PPOPN 11
21494: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
21495: LD_VAR 0 1
21499: PPUSH
21500: LD_VAR 0 2
21504: PPUSH
21505: LD_VAR 0 3
21509: PPUSH
21510: LD_VAR 0 4
21514: PPUSH
21515: LD_VAR 0 5
21519: PPUSH
21520: CALL 17128 0 5
// end ; end_of_file
21524: PPOPN 5
21526: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21527: LD_INT 0
21529: PPUSH
21530: PPUSH
// if exist_mode then
21531: LD_VAR 0 2
21535: IFFALSE 21560
// unit := CreateCharacter ( prefix & ident ) else
21537: LD_ADDR_VAR 0 5
21541: PUSH
21542: LD_VAR 0 3
21546: PUSH
21547: LD_VAR 0 1
21551: STR
21552: PPUSH
21553: CALL_OW 34
21557: ST_TO_ADDR
21558: GO 21575
// unit := NewCharacter ( ident ) ;
21560: LD_ADDR_VAR 0 5
21564: PUSH
21565: LD_VAR 0 1
21569: PPUSH
21570: CALL_OW 25
21574: ST_TO_ADDR
// result := unit ;
21575: LD_ADDR_VAR 0 4
21579: PUSH
21580: LD_VAR 0 5
21584: ST_TO_ADDR
// end ;
21585: LD_VAR 0 4
21589: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21590: LD_INT 0
21592: PPUSH
21593: PPUSH
// if not side or not nation then
21594: LD_VAR 0 1
21598: NOT
21599: PUSH
21600: LD_VAR 0 2
21604: NOT
21605: OR
21606: IFFALSE 21610
// exit ;
21608: GO 22378
// case nation of nation_american :
21610: LD_VAR 0 2
21614: PUSH
21615: LD_INT 1
21617: DOUBLE
21618: EQUAL
21619: IFTRUE 21623
21621: GO 21837
21623: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21624: LD_ADDR_VAR 0 4
21628: PUSH
21629: LD_INT 35
21631: PUSH
21632: LD_INT 45
21634: PUSH
21635: LD_INT 46
21637: PUSH
21638: LD_INT 47
21640: PUSH
21641: LD_INT 82
21643: PUSH
21644: LD_INT 83
21646: PUSH
21647: LD_INT 84
21649: PUSH
21650: LD_INT 85
21652: PUSH
21653: LD_INT 86
21655: PUSH
21656: LD_INT 1
21658: PUSH
21659: LD_INT 2
21661: PUSH
21662: LD_INT 6
21664: PUSH
21665: LD_INT 15
21667: PUSH
21668: LD_INT 16
21670: PUSH
21671: LD_INT 7
21673: PUSH
21674: LD_INT 12
21676: PUSH
21677: LD_INT 13
21679: PUSH
21680: LD_INT 10
21682: PUSH
21683: LD_INT 14
21685: PUSH
21686: LD_INT 20
21688: PUSH
21689: LD_INT 21
21691: PUSH
21692: LD_INT 22
21694: PUSH
21695: LD_INT 25
21697: PUSH
21698: LD_INT 32
21700: PUSH
21701: LD_INT 27
21703: PUSH
21704: LD_INT 36
21706: PUSH
21707: LD_INT 69
21709: PUSH
21710: LD_INT 39
21712: PUSH
21713: LD_INT 34
21715: PUSH
21716: LD_INT 40
21718: PUSH
21719: LD_INT 48
21721: PUSH
21722: LD_INT 49
21724: PUSH
21725: LD_INT 50
21727: PUSH
21728: LD_INT 51
21730: PUSH
21731: LD_INT 52
21733: PUSH
21734: LD_INT 53
21736: PUSH
21737: LD_INT 54
21739: PUSH
21740: LD_INT 55
21742: PUSH
21743: LD_INT 56
21745: PUSH
21746: LD_INT 57
21748: PUSH
21749: LD_INT 58
21751: PUSH
21752: LD_INT 59
21754: PUSH
21755: LD_INT 60
21757: PUSH
21758: LD_INT 61
21760: PUSH
21761: LD_INT 62
21763: PUSH
21764: LD_INT 80
21766: PUSH
21767: LD_INT 82
21769: PUSH
21770: LD_INT 83
21772: PUSH
21773: LD_INT 84
21775: PUSH
21776: LD_INT 85
21778: PUSH
21779: LD_INT 86
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: ST_TO_ADDR
21835: GO 22302
21837: LD_INT 2
21839: DOUBLE
21840: EQUAL
21841: IFTRUE 21845
21843: GO 22071
21845: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21846: LD_ADDR_VAR 0 4
21850: PUSH
21851: LD_INT 35
21853: PUSH
21854: LD_INT 45
21856: PUSH
21857: LD_INT 46
21859: PUSH
21860: LD_INT 47
21862: PUSH
21863: LD_INT 82
21865: PUSH
21866: LD_INT 83
21868: PUSH
21869: LD_INT 84
21871: PUSH
21872: LD_INT 85
21874: PUSH
21875: LD_INT 87
21877: PUSH
21878: LD_INT 70
21880: PUSH
21881: LD_INT 1
21883: PUSH
21884: LD_INT 11
21886: PUSH
21887: LD_INT 3
21889: PUSH
21890: LD_INT 4
21892: PUSH
21893: LD_INT 5
21895: PUSH
21896: LD_INT 6
21898: PUSH
21899: LD_INT 15
21901: PUSH
21902: LD_INT 18
21904: PUSH
21905: LD_INT 7
21907: PUSH
21908: LD_INT 17
21910: PUSH
21911: LD_INT 8
21913: PUSH
21914: LD_INT 20
21916: PUSH
21917: LD_INT 21
21919: PUSH
21920: LD_INT 22
21922: PUSH
21923: LD_INT 72
21925: PUSH
21926: LD_INT 26
21928: PUSH
21929: LD_INT 69
21931: PUSH
21932: LD_INT 39
21934: PUSH
21935: LD_INT 40
21937: PUSH
21938: LD_INT 41
21940: PUSH
21941: LD_INT 42
21943: PUSH
21944: LD_INT 43
21946: PUSH
21947: LD_INT 48
21949: PUSH
21950: LD_INT 49
21952: PUSH
21953: LD_INT 50
21955: PUSH
21956: LD_INT 51
21958: PUSH
21959: LD_INT 52
21961: PUSH
21962: LD_INT 53
21964: PUSH
21965: LD_INT 54
21967: PUSH
21968: LD_INT 55
21970: PUSH
21971: LD_INT 56
21973: PUSH
21974: LD_INT 60
21976: PUSH
21977: LD_INT 61
21979: PUSH
21980: LD_INT 62
21982: PUSH
21983: LD_INT 66
21985: PUSH
21986: LD_INT 67
21988: PUSH
21989: LD_INT 68
21991: PUSH
21992: LD_INT 81
21994: PUSH
21995: LD_INT 82
21997: PUSH
21998: LD_INT 83
22000: PUSH
22001: LD_INT 84
22003: PUSH
22004: LD_INT 85
22006: PUSH
22007: LD_INT 87
22009: PUSH
22010: LD_INT 88
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: ST_TO_ADDR
22069: GO 22302
22071: LD_INT 3
22073: DOUBLE
22074: EQUAL
22075: IFTRUE 22079
22077: GO 22301
22079: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22080: LD_ADDR_VAR 0 4
22084: PUSH
22085: LD_INT 46
22087: PUSH
22088: LD_INT 47
22090: PUSH
22091: LD_INT 1
22093: PUSH
22094: LD_INT 2
22096: PUSH
22097: LD_INT 82
22099: PUSH
22100: LD_INT 83
22102: PUSH
22103: LD_INT 84
22105: PUSH
22106: LD_INT 85
22108: PUSH
22109: LD_INT 86
22111: PUSH
22112: LD_INT 11
22114: PUSH
22115: LD_INT 9
22117: PUSH
22118: LD_INT 20
22120: PUSH
22121: LD_INT 19
22123: PUSH
22124: LD_INT 21
22126: PUSH
22127: LD_INT 24
22129: PUSH
22130: LD_INT 22
22132: PUSH
22133: LD_INT 25
22135: PUSH
22136: LD_INT 28
22138: PUSH
22139: LD_INT 29
22141: PUSH
22142: LD_INT 30
22144: PUSH
22145: LD_INT 31
22147: PUSH
22148: LD_INT 37
22150: PUSH
22151: LD_INT 38
22153: PUSH
22154: LD_INT 32
22156: PUSH
22157: LD_INT 27
22159: PUSH
22160: LD_INT 33
22162: PUSH
22163: LD_INT 69
22165: PUSH
22166: LD_INT 39
22168: PUSH
22169: LD_INT 34
22171: PUSH
22172: LD_INT 40
22174: PUSH
22175: LD_INT 71
22177: PUSH
22178: LD_INT 23
22180: PUSH
22181: LD_INT 44
22183: PUSH
22184: LD_INT 48
22186: PUSH
22187: LD_INT 49
22189: PUSH
22190: LD_INT 50
22192: PUSH
22193: LD_INT 51
22195: PUSH
22196: LD_INT 52
22198: PUSH
22199: LD_INT 53
22201: PUSH
22202: LD_INT 54
22204: PUSH
22205: LD_INT 55
22207: PUSH
22208: LD_INT 56
22210: PUSH
22211: LD_INT 57
22213: PUSH
22214: LD_INT 58
22216: PUSH
22217: LD_INT 59
22219: PUSH
22220: LD_INT 63
22222: PUSH
22223: LD_INT 64
22225: PUSH
22226: LD_INT 65
22228: PUSH
22229: LD_INT 82
22231: PUSH
22232: LD_INT 83
22234: PUSH
22235: LD_INT 84
22237: PUSH
22238: LD_INT 85
22240: PUSH
22241: LD_INT 86
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: ST_TO_ADDR
22299: GO 22302
22301: POP
// if state > - 1 and state < 3 then
22302: LD_VAR 0 3
22306: PUSH
22307: LD_INT 1
22309: NEG
22310: GREATER
22311: PUSH
22312: LD_VAR 0 3
22316: PUSH
22317: LD_INT 3
22319: LESS
22320: AND
22321: IFFALSE 22378
// for i in result do
22323: LD_ADDR_VAR 0 5
22327: PUSH
22328: LD_VAR 0 4
22332: PUSH
22333: FOR_IN
22334: IFFALSE 22376
// if GetTech ( i , side ) <> state then
22336: LD_VAR 0 5
22340: PPUSH
22341: LD_VAR 0 1
22345: PPUSH
22346: CALL_OW 321
22350: PUSH
22351: LD_VAR 0 3
22355: NONEQUAL
22356: IFFALSE 22374
// result := result diff i ;
22358: LD_ADDR_VAR 0 4
22362: PUSH
22363: LD_VAR 0 4
22367: PUSH
22368: LD_VAR 0 5
22372: DIFF
22373: ST_TO_ADDR
22374: GO 22333
22376: POP
22377: POP
// end ;
22378: LD_VAR 0 4
22382: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22383: LD_INT 0
22385: PPUSH
22386: PPUSH
22387: PPUSH
// result := true ;
22388: LD_ADDR_VAR 0 3
22392: PUSH
22393: LD_INT 1
22395: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22396: LD_ADDR_VAR 0 5
22400: PUSH
22401: LD_VAR 0 2
22405: PPUSH
22406: CALL_OW 480
22410: ST_TO_ADDR
// if not tmp then
22411: LD_VAR 0 5
22415: NOT
22416: IFFALSE 22420
// exit ;
22418: GO 22469
// for i in tmp do
22420: LD_ADDR_VAR 0 4
22424: PUSH
22425: LD_VAR 0 5
22429: PUSH
22430: FOR_IN
22431: IFFALSE 22467
// if GetTech ( i , side ) <> state_researched then
22433: LD_VAR 0 4
22437: PPUSH
22438: LD_VAR 0 1
22442: PPUSH
22443: CALL_OW 321
22447: PUSH
22448: LD_INT 2
22450: NONEQUAL
22451: IFFALSE 22465
// begin result := false ;
22453: LD_ADDR_VAR 0 3
22457: PUSH
22458: LD_INT 0
22460: ST_TO_ADDR
// exit ;
22461: POP
22462: POP
22463: GO 22469
// end ;
22465: GO 22430
22467: POP
22468: POP
// end ;
22469: LD_VAR 0 3
22473: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22474: LD_INT 0
22476: PPUSH
22477: PPUSH
22478: PPUSH
22479: PPUSH
22480: PPUSH
22481: PPUSH
22482: PPUSH
22483: PPUSH
22484: PPUSH
22485: PPUSH
22486: PPUSH
22487: PPUSH
22488: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22489: LD_VAR 0 1
22493: NOT
22494: PUSH
22495: LD_VAR 0 1
22499: PPUSH
22500: CALL_OW 257
22504: PUSH
22505: LD_INT 9
22507: NONEQUAL
22508: OR
22509: IFFALSE 22513
// exit ;
22511: GO 23086
// side := GetSide ( unit ) ;
22513: LD_ADDR_VAR 0 9
22517: PUSH
22518: LD_VAR 0 1
22522: PPUSH
22523: CALL_OW 255
22527: ST_TO_ADDR
// tech_space := tech_spacanom ;
22528: LD_ADDR_VAR 0 12
22532: PUSH
22533: LD_INT 29
22535: ST_TO_ADDR
// tech_time := tech_taurad ;
22536: LD_ADDR_VAR 0 13
22540: PUSH
22541: LD_INT 28
22543: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22544: LD_ADDR_VAR 0 11
22548: PUSH
22549: LD_VAR 0 1
22553: PPUSH
22554: CALL_OW 310
22558: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22559: LD_VAR 0 11
22563: PPUSH
22564: CALL_OW 247
22568: PUSH
22569: LD_INT 2
22571: EQUAL
22572: IFFALSE 22576
// exit ;
22574: GO 23086
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22576: LD_ADDR_VAR 0 8
22580: PUSH
22581: LD_INT 81
22583: PUSH
22584: LD_VAR 0 9
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: LD_INT 3
22595: PUSH
22596: LD_INT 21
22598: PUSH
22599: LD_INT 3
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PPUSH
22614: CALL_OW 69
22618: ST_TO_ADDR
// if not tmp then
22619: LD_VAR 0 8
22623: NOT
22624: IFFALSE 22628
// exit ;
22626: GO 23086
// if in_unit then
22628: LD_VAR 0 11
22632: IFFALSE 22656
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22634: LD_ADDR_VAR 0 10
22638: PUSH
22639: LD_VAR 0 8
22643: PPUSH
22644: LD_VAR 0 11
22648: PPUSH
22649: CALL_OW 74
22653: ST_TO_ADDR
22654: GO 22676
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22656: LD_ADDR_VAR 0 10
22660: PUSH
22661: LD_VAR 0 8
22665: PPUSH
22666: LD_VAR 0 1
22670: PPUSH
22671: CALL_OW 74
22675: ST_TO_ADDR
// if not enemy then
22676: LD_VAR 0 10
22680: NOT
22681: IFFALSE 22685
// exit ;
22683: GO 23086
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22685: LD_VAR 0 11
22689: PUSH
22690: LD_VAR 0 11
22694: PPUSH
22695: LD_VAR 0 10
22699: PPUSH
22700: CALL_OW 296
22704: PUSH
22705: LD_INT 13
22707: GREATER
22708: AND
22709: PUSH
22710: LD_VAR 0 1
22714: PPUSH
22715: LD_VAR 0 10
22719: PPUSH
22720: CALL_OW 296
22724: PUSH
22725: LD_INT 12
22727: GREATER
22728: OR
22729: IFFALSE 22733
// exit ;
22731: GO 23086
// missile := [ 1 ] ;
22733: LD_ADDR_VAR 0 14
22737: PUSH
22738: LD_INT 1
22740: PUSH
22741: EMPTY
22742: LIST
22743: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22744: LD_VAR 0 9
22748: PPUSH
22749: LD_VAR 0 12
22753: PPUSH
22754: CALL_OW 325
22758: IFFALSE 22787
// missile := Replace ( missile , missile + 1 , 2 ) ;
22760: LD_ADDR_VAR 0 14
22764: PUSH
22765: LD_VAR 0 14
22769: PPUSH
22770: LD_VAR 0 14
22774: PUSH
22775: LD_INT 1
22777: PLUS
22778: PPUSH
22779: LD_INT 2
22781: PPUSH
22782: CALL_OW 1
22786: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22787: LD_VAR 0 9
22791: PPUSH
22792: LD_VAR 0 13
22796: PPUSH
22797: CALL_OW 325
22801: PUSH
22802: LD_VAR 0 10
22806: PPUSH
22807: CALL_OW 255
22811: PPUSH
22812: LD_VAR 0 13
22816: PPUSH
22817: CALL_OW 325
22821: NOT
22822: AND
22823: IFFALSE 22852
// missile := Replace ( missile , missile + 1 , 3 ) ;
22825: LD_ADDR_VAR 0 14
22829: PUSH
22830: LD_VAR 0 14
22834: PPUSH
22835: LD_VAR 0 14
22839: PUSH
22840: LD_INT 1
22842: PLUS
22843: PPUSH
22844: LD_INT 3
22846: PPUSH
22847: CALL_OW 1
22851: ST_TO_ADDR
// if missile < 2 then
22852: LD_VAR 0 14
22856: PUSH
22857: LD_INT 2
22859: LESS
22860: IFFALSE 22864
// exit ;
22862: GO 23086
// x := GetX ( enemy ) ;
22864: LD_ADDR_VAR 0 4
22868: PUSH
22869: LD_VAR 0 10
22873: PPUSH
22874: CALL_OW 250
22878: ST_TO_ADDR
// y := GetY ( enemy ) ;
22879: LD_ADDR_VAR 0 5
22883: PUSH
22884: LD_VAR 0 10
22888: PPUSH
22889: CALL_OW 251
22893: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22894: LD_ADDR_VAR 0 6
22898: PUSH
22899: LD_VAR 0 4
22903: PUSH
22904: LD_INT 1
22906: NEG
22907: PPUSH
22908: LD_INT 1
22910: PPUSH
22911: CALL_OW 12
22915: PLUS
22916: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22917: LD_ADDR_VAR 0 7
22921: PUSH
22922: LD_VAR 0 5
22926: PUSH
22927: LD_INT 1
22929: NEG
22930: PPUSH
22931: LD_INT 1
22933: PPUSH
22934: CALL_OW 12
22938: PLUS
22939: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22940: LD_VAR 0 6
22944: PPUSH
22945: LD_VAR 0 7
22949: PPUSH
22950: CALL_OW 488
22954: NOT
22955: IFFALSE 22977
// begin _x := x ;
22957: LD_ADDR_VAR 0 6
22961: PUSH
22962: LD_VAR 0 4
22966: ST_TO_ADDR
// _y := y ;
22967: LD_ADDR_VAR 0 7
22971: PUSH
22972: LD_VAR 0 5
22976: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22977: LD_ADDR_VAR 0 3
22981: PUSH
22982: LD_INT 1
22984: PPUSH
22985: LD_VAR 0 14
22989: PPUSH
22990: CALL_OW 12
22994: ST_TO_ADDR
// case i of 1 :
22995: LD_VAR 0 3
22999: PUSH
23000: LD_INT 1
23002: DOUBLE
23003: EQUAL
23004: IFTRUE 23008
23006: GO 23025
23008: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23009: LD_VAR 0 1
23013: PPUSH
23014: LD_VAR 0 10
23018: PPUSH
23019: CALL_OW 115
23023: GO 23086
23025: LD_INT 2
23027: DOUBLE
23028: EQUAL
23029: IFTRUE 23033
23031: GO 23055
23033: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23034: LD_VAR 0 1
23038: PPUSH
23039: LD_VAR 0 6
23043: PPUSH
23044: LD_VAR 0 7
23048: PPUSH
23049: CALL_OW 153
23053: GO 23086
23055: LD_INT 3
23057: DOUBLE
23058: EQUAL
23059: IFTRUE 23063
23061: GO 23085
23063: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23064: LD_VAR 0 1
23068: PPUSH
23069: LD_VAR 0 6
23073: PPUSH
23074: LD_VAR 0 7
23078: PPUSH
23079: CALL_OW 154
23083: GO 23086
23085: POP
// end ;
23086: LD_VAR 0 2
23090: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23091: LD_INT 0
23093: PPUSH
23094: PPUSH
23095: PPUSH
23096: PPUSH
23097: PPUSH
23098: PPUSH
// if not unit or not building then
23099: LD_VAR 0 1
23103: NOT
23104: PUSH
23105: LD_VAR 0 2
23109: NOT
23110: OR
23111: IFFALSE 23115
// exit ;
23113: GO 23273
// x := GetX ( building ) ;
23115: LD_ADDR_VAR 0 5
23119: PUSH
23120: LD_VAR 0 2
23124: PPUSH
23125: CALL_OW 250
23129: ST_TO_ADDR
// y := GetY ( building ) ;
23130: LD_ADDR_VAR 0 6
23134: PUSH
23135: LD_VAR 0 2
23139: PPUSH
23140: CALL_OW 251
23144: ST_TO_ADDR
// for i = 0 to 5 do
23145: LD_ADDR_VAR 0 4
23149: PUSH
23150: DOUBLE
23151: LD_INT 0
23153: DEC
23154: ST_TO_ADDR
23155: LD_INT 5
23157: PUSH
23158: FOR_TO
23159: IFFALSE 23271
// begin _x := ShiftX ( x , i , 3 ) ;
23161: LD_ADDR_VAR 0 7
23165: PUSH
23166: LD_VAR 0 5
23170: PPUSH
23171: LD_VAR 0 4
23175: PPUSH
23176: LD_INT 3
23178: PPUSH
23179: CALL_OW 272
23183: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23184: LD_ADDR_VAR 0 8
23188: PUSH
23189: LD_VAR 0 6
23193: PPUSH
23194: LD_VAR 0 4
23198: PPUSH
23199: LD_INT 3
23201: PPUSH
23202: CALL_OW 273
23206: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23207: LD_VAR 0 7
23211: PPUSH
23212: LD_VAR 0 8
23216: PPUSH
23217: CALL_OW 488
23221: NOT
23222: IFFALSE 23226
// continue ;
23224: GO 23158
// if HexInfo ( _x , _y ) = 0 then
23226: LD_VAR 0 7
23230: PPUSH
23231: LD_VAR 0 8
23235: PPUSH
23236: CALL_OW 428
23240: PUSH
23241: LD_INT 0
23243: EQUAL
23244: IFFALSE 23269
// begin ComMoveXY ( unit , _x , _y ) ;
23246: LD_VAR 0 1
23250: PPUSH
23251: LD_VAR 0 7
23255: PPUSH
23256: LD_VAR 0 8
23260: PPUSH
23261: CALL_OW 111
// exit ;
23265: POP
23266: POP
23267: GO 23273
// end ; end ;
23269: GO 23158
23271: POP
23272: POP
// end ;
23273: LD_VAR 0 3
23277: RET
// export function ScanBase ( side , base_area ) ; begin
23278: LD_INT 0
23280: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23281: LD_ADDR_VAR 0 3
23285: PUSH
23286: LD_VAR 0 2
23290: PPUSH
23291: LD_INT 81
23293: PUSH
23294: LD_VAR 0 1
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PPUSH
23303: CALL_OW 70
23307: ST_TO_ADDR
// end ;
23308: LD_VAR 0 3
23312: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23313: LD_INT 0
23315: PPUSH
23316: PPUSH
23317: PPUSH
23318: PPUSH
// result := false ;
23319: LD_ADDR_VAR 0 2
23323: PUSH
23324: LD_INT 0
23326: ST_TO_ADDR
// side := GetSide ( unit ) ;
23327: LD_ADDR_VAR 0 3
23331: PUSH
23332: LD_VAR 0 1
23336: PPUSH
23337: CALL_OW 255
23341: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23342: LD_ADDR_VAR 0 4
23346: PUSH
23347: LD_VAR 0 1
23351: PPUSH
23352: CALL_OW 248
23356: ST_TO_ADDR
// case nat of 1 :
23357: LD_VAR 0 4
23361: PUSH
23362: LD_INT 1
23364: DOUBLE
23365: EQUAL
23366: IFTRUE 23370
23368: GO 23381
23370: POP
// tech := tech_lassight ; 2 :
23371: LD_ADDR_VAR 0 5
23375: PUSH
23376: LD_INT 12
23378: ST_TO_ADDR
23379: GO 23420
23381: LD_INT 2
23383: DOUBLE
23384: EQUAL
23385: IFTRUE 23389
23387: GO 23400
23389: POP
// tech := tech_mortar ; 3 :
23390: LD_ADDR_VAR 0 5
23394: PUSH
23395: LD_INT 41
23397: ST_TO_ADDR
23398: GO 23420
23400: LD_INT 3
23402: DOUBLE
23403: EQUAL
23404: IFTRUE 23408
23406: GO 23419
23408: POP
// tech := tech_bazooka ; end ;
23409: LD_ADDR_VAR 0 5
23413: PUSH
23414: LD_INT 44
23416: ST_TO_ADDR
23417: GO 23420
23419: POP
// if Researched ( side , tech ) then
23420: LD_VAR 0 3
23424: PPUSH
23425: LD_VAR 0 5
23429: PPUSH
23430: CALL_OW 325
23434: IFFALSE 23461
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23436: LD_ADDR_VAR 0 2
23440: PUSH
23441: LD_INT 5
23443: PUSH
23444: LD_INT 8
23446: PUSH
23447: LD_INT 9
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: LIST
23454: PUSH
23455: LD_VAR 0 4
23459: ARRAY
23460: ST_TO_ADDR
// end ;
23461: LD_VAR 0 2
23465: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23466: LD_INT 0
23468: PPUSH
23469: PPUSH
23470: PPUSH
// if not mines then
23471: LD_VAR 0 2
23475: NOT
23476: IFFALSE 23480
// exit ;
23478: GO 23624
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23480: LD_ADDR_VAR 0 5
23484: PUSH
23485: LD_INT 81
23487: PUSH
23488: LD_VAR 0 1
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 3
23499: PUSH
23500: LD_INT 21
23502: PUSH
23503: LD_INT 3
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PPUSH
23518: CALL_OW 69
23522: ST_TO_ADDR
// for i in mines do
23523: LD_ADDR_VAR 0 4
23527: PUSH
23528: LD_VAR 0 2
23532: PUSH
23533: FOR_IN
23534: IFFALSE 23622
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23536: LD_VAR 0 4
23540: PUSH
23541: LD_INT 1
23543: ARRAY
23544: PPUSH
23545: LD_VAR 0 4
23549: PUSH
23550: LD_INT 2
23552: ARRAY
23553: PPUSH
23554: CALL_OW 458
23558: NOT
23559: IFFALSE 23563
// continue ;
23561: GO 23533
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23563: LD_VAR 0 4
23567: PUSH
23568: LD_INT 1
23570: ARRAY
23571: PPUSH
23572: LD_VAR 0 4
23576: PUSH
23577: LD_INT 2
23579: ARRAY
23580: PPUSH
23581: CALL_OW 428
23585: PUSH
23586: LD_VAR 0 5
23590: IN
23591: IFFALSE 23620
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23593: LD_VAR 0 4
23597: PUSH
23598: LD_INT 1
23600: ARRAY
23601: PPUSH
23602: LD_VAR 0 4
23606: PUSH
23607: LD_INT 2
23609: ARRAY
23610: PPUSH
23611: LD_VAR 0 1
23615: PPUSH
23616: CALL_OW 456
// end ;
23620: GO 23533
23622: POP
23623: POP
// end ;
23624: LD_VAR 0 3
23628: RET
// export function Count ( array ) ; var i ; begin
23629: LD_INT 0
23631: PPUSH
23632: PPUSH
// result := 0 ;
23633: LD_ADDR_VAR 0 2
23637: PUSH
23638: LD_INT 0
23640: ST_TO_ADDR
// for i in array do
23641: LD_ADDR_VAR 0 3
23645: PUSH
23646: LD_VAR 0 1
23650: PUSH
23651: FOR_IN
23652: IFFALSE 23676
// if i then
23654: LD_VAR 0 3
23658: IFFALSE 23674
// result := result + 1 ;
23660: LD_ADDR_VAR 0 2
23664: PUSH
23665: LD_VAR 0 2
23669: PUSH
23670: LD_INT 1
23672: PLUS
23673: ST_TO_ADDR
23674: GO 23651
23676: POP
23677: POP
// end ;
23678: LD_VAR 0 2
23682: RET
// export function IsEmpty ( building ) ; begin
23683: LD_INT 0
23685: PPUSH
// if not building then
23686: LD_VAR 0 1
23690: NOT
23691: IFFALSE 23695
// exit ;
23693: GO 23738
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23695: LD_ADDR_VAR 0 2
23699: PUSH
23700: LD_VAR 0 1
23704: PUSH
23705: LD_INT 22
23707: PUSH
23708: LD_VAR 0 1
23712: PPUSH
23713: CALL_OW 255
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: LD_INT 58
23724: PUSH
23725: EMPTY
23726: LIST
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PPUSH
23732: CALL_OW 69
23736: IN
23737: ST_TO_ADDR
// end ;
23738: LD_VAR 0 2
23742: RET
// export function IsNotFull ( building ) ; var places ; begin
23743: LD_INT 0
23745: PPUSH
23746: PPUSH
// if not building then
23747: LD_VAR 0 1
23751: NOT
23752: IFFALSE 23756
// exit ;
23754: GO 23927
// result := false ;
23756: LD_ADDR_VAR 0 2
23760: PUSH
23761: LD_INT 0
23763: ST_TO_ADDR
// places := 0 ;
23764: LD_ADDR_VAR 0 3
23768: PUSH
23769: LD_INT 0
23771: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
23772: LD_VAR 0 1
23776: PPUSH
23777: CALL_OW 266
23781: PUSH
23782: LD_INT 0
23784: DOUBLE
23785: EQUAL
23786: IFTRUE 23844
23788: LD_INT 1
23790: DOUBLE
23791: EQUAL
23792: IFTRUE 23844
23794: LD_INT 6
23796: DOUBLE
23797: EQUAL
23798: IFTRUE 23844
23800: LD_INT 7
23802: DOUBLE
23803: EQUAL
23804: IFTRUE 23844
23806: LD_INT 8
23808: DOUBLE
23809: EQUAL
23810: IFTRUE 23844
23812: LD_INT 4
23814: DOUBLE
23815: EQUAL
23816: IFTRUE 23844
23818: LD_INT 5
23820: DOUBLE
23821: EQUAL
23822: IFTRUE 23844
23824: LD_INT 2
23826: DOUBLE
23827: EQUAL
23828: IFTRUE 23844
23830: LD_INT 3
23832: DOUBLE
23833: EQUAL
23834: IFTRUE 23844
23836: LD_INT 35
23838: DOUBLE
23839: EQUAL
23840: IFTRUE 23844
23842: GO 23855
23844: POP
// places := 6 ; b_bunker , b_breastwork :
23845: LD_ADDR_VAR 0 3
23849: PUSH
23850: LD_INT 6
23852: ST_TO_ADDR
23853: GO 23900
23855: LD_INT 32
23857: DOUBLE
23858: EQUAL
23859: IFTRUE 23869
23861: LD_INT 31
23863: DOUBLE
23864: EQUAL
23865: IFTRUE 23869
23867: GO 23880
23869: POP
// places := 1 ; b_control_tower :
23870: LD_ADDR_VAR 0 3
23874: PUSH
23875: LD_INT 1
23877: ST_TO_ADDR
23878: GO 23900
23880: LD_INT 36
23882: DOUBLE
23883: EQUAL
23884: IFTRUE 23888
23886: GO 23899
23888: POP
// places := 3 ; end ;
23889: LD_ADDR_VAR 0 3
23893: PUSH
23894: LD_INT 3
23896: ST_TO_ADDR
23897: GO 23900
23899: POP
// if places then
23900: LD_VAR 0 3
23904: IFFALSE 23927
// result := UnitsInside ( building ) < places ;
23906: LD_ADDR_VAR 0 2
23910: PUSH
23911: LD_VAR 0 1
23915: PPUSH
23916: CALL_OW 313
23920: PUSH
23921: LD_VAR 0 3
23925: LESS
23926: ST_TO_ADDR
// end ;
23927: LD_VAR 0 2
23931: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23932: LD_INT 0
23934: PPUSH
23935: PPUSH
23936: PPUSH
23937: PPUSH
// tmp := [ ] ;
23938: LD_ADDR_VAR 0 3
23942: PUSH
23943: EMPTY
23944: ST_TO_ADDR
// list := [ ] ;
23945: LD_ADDR_VAR 0 5
23949: PUSH
23950: EMPTY
23951: ST_TO_ADDR
// for i = 16 to 25 do
23952: LD_ADDR_VAR 0 4
23956: PUSH
23957: DOUBLE
23958: LD_INT 16
23960: DEC
23961: ST_TO_ADDR
23962: LD_INT 25
23964: PUSH
23965: FOR_TO
23966: IFFALSE 24039
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23968: LD_ADDR_VAR 0 3
23972: PUSH
23973: LD_VAR 0 3
23977: PUSH
23978: LD_INT 22
23980: PUSH
23981: LD_VAR 0 1
23985: PPUSH
23986: CALL_OW 255
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 91
23997: PUSH
23998: LD_VAR 0 1
24002: PUSH
24003: LD_INT 6
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: LIST
24010: PUSH
24011: LD_INT 30
24013: PUSH
24014: LD_VAR 0 4
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: LIST
24027: PUSH
24028: EMPTY
24029: LIST
24030: PPUSH
24031: CALL_OW 69
24035: ADD
24036: ST_TO_ADDR
24037: GO 23965
24039: POP
24040: POP
// for i = 1 to tmp do
24041: LD_ADDR_VAR 0 4
24045: PUSH
24046: DOUBLE
24047: LD_INT 1
24049: DEC
24050: ST_TO_ADDR
24051: LD_VAR 0 3
24055: PUSH
24056: FOR_TO
24057: IFFALSE 24145
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24059: LD_ADDR_VAR 0 5
24063: PUSH
24064: LD_VAR 0 5
24068: PUSH
24069: LD_VAR 0 3
24073: PUSH
24074: LD_VAR 0 4
24078: ARRAY
24079: PPUSH
24080: CALL_OW 266
24084: PUSH
24085: LD_VAR 0 3
24089: PUSH
24090: LD_VAR 0 4
24094: ARRAY
24095: PPUSH
24096: CALL_OW 250
24100: PUSH
24101: LD_VAR 0 3
24105: PUSH
24106: LD_VAR 0 4
24110: ARRAY
24111: PPUSH
24112: CALL_OW 251
24116: PUSH
24117: LD_VAR 0 3
24121: PUSH
24122: LD_VAR 0 4
24126: ARRAY
24127: PPUSH
24128: CALL_OW 254
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: PUSH
24139: EMPTY
24140: LIST
24141: ADD
24142: ST_TO_ADDR
24143: GO 24056
24145: POP
24146: POP
// result := list ;
24147: LD_ADDR_VAR 0 2
24151: PUSH
24152: LD_VAR 0 5
24156: ST_TO_ADDR
// end ;
24157: LD_VAR 0 2
24161: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24162: LD_INT 0
24164: PPUSH
24165: PPUSH
24166: PPUSH
24167: PPUSH
24168: PPUSH
24169: PPUSH
24170: PPUSH
// if not factory then
24171: LD_VAR 0 1
24175: NOT
24176: IFFALSE 24180
// exit ;
24178: GO 24773
// if control = control_apeman then
24180: LD_VAR 0 4
24184: PUSH
24185: LD_INT 5
24187: EQUAL
24188: IFFALSE 24297
// begin tmp := UnitsInside ( factory ) ;
24190: LD_ADDR_VAR 0 8
24194: PUSH
24195: LD_VAR 0 1
24199: PPUSH
24200: CALL_OW 313
24204: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24205: LD_VAR 0 8
24209: PPUSH
24210: LD_INT 25
24212: PUSH
24213: LD_INT 12
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PPUSH
24220: CALL_OW 72
24224: NOT
24225: IFFALSE 24235
// control := control_manual ;
24227: LD_ADDR_VAR 0 4
24231: PUSH
24232: LD_INT 1
24234: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24235: LD_ADDR_VAR 0 8
24239: PUSH
24240: LD_VAR 0 1
24244: PPUSH
24245: CALL 23932 0 1
24249: ST_TO_ADDR
// if tmp then
24250: LD_VAR 0 8
24254: IFFALSE 24297
// begin for i in tmp do
24256: LD_ADDR_VAR 0 7
24260: PUSH
24261: LD_VAR 0 8
24265: PUSH
24266: FOR_IN
24267: IFFALSE 24295
// if i [ 1 ] = b_ext_radio then
24269: LD_VAR 0 7
24273: PUSH
24274: LD_INT 1
24276: ARRAY
24277: PUSH
24278: LD_INT 22
24280: EQUAL
24281: IFFALSE 24293
// begin control := control_remote ;
24283: LD_ADDR_VAR 0 4
24287: PUSH
24288: LD_INT 2
24290: ST_TO_ADDR
// break ;
24291: GO 24295
// end ;
24293: GO 24266
24295: POP
24296: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24297: LD_VAR 0 1
24301: PPUSH
24302: LD_VAR 0 2
24306: PPUSH
24307: LD_VAR 0 3
24311: PPUSH
24312: LD_VAR 0 4
24316: PPUSH
24317: LD_VAR 0 5
24321: PPUSH
24322: CALL_OW 448
24326: IFFALSE 24361
// begin result := [ chassis , engine , control , weapon ] ;
24328: LD_ADDR_VAR 0 6
24332: PUSH
24333: LD_VAR 0 2
24337: PUSH
24338: LD_VAR 0 3
24342: PUSH
24343: LD_VAR 0 4
24347: PUSH
24348: LD_VAR 0 5
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: ST_TO_ADDR
// exit ;
24359: GO 24773
// end ; _chassis := AvailableChassisList ( factory ) ;
24361: LD_ADDR_VAR 0 9
24365: PUSH
24366: LD_VAR 0 1
24370: PPUSH
24371: CALL_OW 475
24375: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24376: LD_ADDR_VAR 0 11
24380: PUSH
24381: LD_VAR 0 1
24385: PPUSH
24386: CALL_OW 476
24390: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24391: LD_ADDR_VAR 0 12
24395: PUSH
24396: LD_VAR 0 1
24400: PPUSH
24401: CALL_OW 477
24405: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24406: LD_ADDR_VAR 0 10
24410: PUSH
24411: LD_VAR 0 1
24415: PPUSH
24416: CALL_OW 478
24420: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24421: LD_VAR 0 9
24425: NOT
24426: PUSH
24427: LD_VAR 0 11
24431: NOT
24432: OR
24433: PUSH
24434: LD_VAR 0 12
24438: NOT
24439: OR
24440: PUSH
24441: LD_VAR 0 10
24445: NOT
24446: OR
24447: IFFALSE 24482
// begin result := [ chassis , engine , control , weapon ] ;
24449: LD_ADDR_VAR 0 6
24453: PUSH
24454: LD_VAR 0 2
24458: PUSH
24459: LD_VAR 0 3
24463: PUSH
24464: LD_VAR 0 4
24468: PUSH
24469: LD_VAR 0 5
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: ST_TO_ADDR
// exit ;
24480: GO 24773
// end ; if not chassis in _chassis then
24482: LD_VAR 0 2
24486: PUSH
24487: LD_VAR 0 9
24491: IN
24492: NOT
24493: IFFALSE 24519
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24495: LD_ADDR_VAR 0 2
24499: PUSH
24500: LD_VAR 0 9
24504: PUSH
24505: LD_INT 1
24507: PPUSH
24508: LD_VAR 0 9
24512: PPUSH
24513: CALL_OW 12
24517: ARRAY
24518: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24519: LD_VAR 0 2
24523: PPUSH
24524: LD_VAR 0 3
24528: PPUSH
24529: CALL 24778 0 2
24533: NOT
24534: IFFALSE 24593
// repeat engine := _engine [ 1 ] ;
24536: LD_ADDR_VAR 0 3
24540: PUSH
24541: LD_VAR 0 11
24545: PUSH
24546: LD_INT 1
24548: ARRAY
24549: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24550: LD_ADDR_VAR 0 11
24554: PUSH
24555: LD_VAR 0 11
24559: PPUSH
24560: LD_INT 1
24562: PPUSH
24563: CALL_OW 3
24567: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24568: LD_VAR 0 2
24572: PPUSH
24573: LD_VAR 0 3
24577: PPUSH
24578: CALL 24778 0 2
24582: PUSH
24583: LD_VAR 0 11
24587: PUSH
24588: EMPTY
24589: EQUAL
24590: OR
24591: IFFALSE 24536
// if not control in _control then
24593: LD_VAR 0 4
24597: PUSH
24598: LD_VAR 0 12
24602: IN
24603: NOT
24604: IFFALSE 24630
// control := _control [ rand ( 1 , _control ) ] ;
24606: LD_ADDR_VAR 0 4
24610: PUSH
24611: LD_VAR 0 12
24615: PUSH
24616: LD_INT 1
24618: PPUSH
24619: LD_VAR 0 12
24623: PPUSH
24624: CALL_OW 12
24628: ARRAY
24629: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24630: LD_VAR 0 2
24634: PPUSH
24635: LD_VAR 0 5
24639: PPUSH
24640: CALL 24998 0 2
24644: NOT
24645: IFFALSE 24704
// repeat weapon := _weapon [ 1 ] ;
24647: LD_ADDR_VAR 0 5
24651: PUSH
24652: LD_VAR 0 10
24656: PUSH
24657: LD_INT 1
24659: ARRAY
24660: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24661: LD_ADDR_VAR 0 10
24665: PUSH
24666: LD_VAR 0 10
24670: PPUSH
24671: LD_INT 1
24673: PPUSH
24674: CALL_OW 3
24678: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24679: LD_VAR 0 2
24683: PPUSH
24684: LD_VAR 0 5
24688: PPUSH
24689: CALL 24998 0 2
24693: PUSH
24694: LD_VAR 0 10
24698: PUSH
24699: EMPTY
24700: EQUAL
24701: OR
24702: IFFALSE 24647
// result := [ ] ;
24704: LD_ADDR_VAR 0 6
24708: PUSH
24709: EMPTY
24710: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24711: LD_VAR 0 1
24715: PPUSH
24716: LD_VAR 0 2
24720: PPUSH
24721: LD_VAR 0 3
24725: PPUSH
24726: LD_VAR 0 4
24730: PPUSH
24731: LD_VAR 0 5
24735: PPUSH
24736: CALL_OW 448
24740: IFFALSE 24773
// result := [ chassis , engine , control , weapon ] ;
24742: LD_ADDR_VAR 0 6
24746: PUSH
24747: LD_VAR 0 2
24751: PUSH
24752: LD_VAR 0 3
24756: PUSH
24757: LD_VAR 0 4
24761: PUSH
24762: LD_VAR 0 5
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: ST_TO_ADDR
// end ;
24773: LD_VAR 0 6
24777: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24778: LD_INT 0
24780: PPUSH
// if not chassis or not engine then
24781: LD_VAR 0 1
24785: NOT
24786: PUSH
24787: LD_VAR 0 2
24791: NOT
24792: OR
24793: IFFALSE 24797
// exit ;
24795: GO 24993
// case engine of engine_solar :
24797: LD_VAR 0 2
24801: PUSH
24802: LD_INT 2
24804: DOUBLE
24805: EQUAL
24806: IFTRUE 24810
24808: GO 24848
24810: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24811: LD_ADDR_VAR 0 3
24815: PUSH
24816: LD_INT 11
24818: PUSH
24819: LD_INT 12
24821: PUSH
24822: LD_INT 13
24824: PUSH
24825: LD_INT 14
24827: PUSH
24828: LD_INT 1
24830: PUSH
24831: LD_INT 2
24833: PUSH
24834: LD_INT 3
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: ST_TO_ADDR
24846: GO 24977
24848: LD_INT 1
24850: DOUBLE
24851: EQUAL
24852: IFTRUE 24856
24854: GO 24918
24856: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24857: LD_ADDR_VAR 0 3
24861: PUSH
24862: LD_INT 11
24864: PUSH
24865: LD_INT 12
24867: PUSH
24868: LD_INT 13
24870: PUSH
24871: LD_INT 14
24873: PUSH
24874: LD_INT 1
24876: PUSH
24877: LD_INT 2
24879: PUSH
24880: LD_INT 3
24882: PUSH
24883: LD_INT 4
24885: PUSH
24886: LD_INT 5
24888: PUSH
24889: LD_INT 21
24891: PUSH
24892: LD_INT 23
24894: PUSH
24895: LD_INT 22
24897: PUSH
24898: LD_INT 24
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: ST_TO_ADDR
24916: GO 24977
24918: LD_INT 3
24920: DOUBLE
24921: EQUAL
24922: IFTRUE 24926
24924: GO 24976
24926: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24927: LD_ADDR_VAR 0 3
24931: PUSH
24932: LD_INT 13
24934: PUSH
24935: LD_INT 14
24937: PUSH
24938: LD_INT 2
24940: PUSH
24941: LD_INT 3
24943: PUSH
24944: LD_INT 4
24946: PUSH
24947: LD_INT 5
24949: PUSH
24950: LD_INT 21
24952: PUSH
24953: LD_INT 22
24955: PUSH
24956: LD_INT 23
24958: PUSH
24959: LD_INT 24
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: ST_TO_ADDR
24974: GO 24977
24976: POP
// result := ( chassis in result ) ;
24977: LD_ADDR_VAR 0 3
24981: PUSH
24982: LD_VAR 0 1
24986: PUSH
24987: LD_VAR 0 3
24991: IN
24992: ST_TO_ADDR
// end ;
24993: LD_VAR 0 3
24997: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24998: LD_INT 0
25000: PPUSH
// if not chassis or not weapon then
25001: LD_VAR 0 1
25005: NOT
25006: PUSH
25007: LD_VAR 0 2
25011: NOT
25012: OR
25013: IFFALSE 25017
// exit ;
25015: GO 26077
// case weapon of us_machine_gun :
25017: LD_VAR 0 2
25021: PUSH
25022: LD_INT 2
25024: DOUBLE
25025: EQUAL
25026: IFTRUE 25030
25028: GO 25060
25030: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25031: LD_ADDR_VAR 0 3
25035: PUSH
25036: LD_INT 1
25038: PUSH
25039: LD_INT 2
25041: PUSH
25042: LD_INT 3
25044: PUSH
25045: LD_INT 4
25047: PUSH
25048: LD_INT 5
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: ST_TO_ADDR
25058: GO 26061
25060: LD_INT 3
25062: DOUBLE
25063: EQUAL
25064: IFTRUE 25068
25066: GO 25098
25068: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25069: LD_ADDR_VAR 0 3
25073: PUSH
25074: LD_INT 1
25076: PUSH
25077: LD_INT 2
25079: PUSH
25080: LD_INT 3
25082: PUSH
25083: LD_INT 4
25085: PUSH
25086: LD_INT 5
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: ST_TO_ADDR
25096: GO 26061
25098: LD_INT 11
25100: DOUBLE
25101: EQUAL
25102: IFTRUE 25106
25104: GO 25136
25106: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25107: LD_ADDR_VAR 0 3
25111: PUSH
25112: LD_INT 1
25114: PUSH
25115: LD_INT 2
25117: PUSH
25118: LD_INT 3
25120: PUSH
25121: LD_INT 4
25123: PUSH
25124: LD_INT 5
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: ST_TO_ADDR
25134: GO 26061
25136: LD_INT 4
25138: DOUBLE
25139: EQUAL
25140: IFTRUE 25144
25142: GO 25170
25144: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25145: LD_ADDR_VAR 0 3
25149: PUSH
25150: LD_INT 2
25152: PUSH
25153: LD_INT 3
25155: PUSH
25156: LD_INT 4
25158: PUSH
25159: LD_INT 5
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: ST_TO_ADDR
25168: GO 26061
25170: LD_INT 5
25172: DOUBLE
25173: EQUAL
25174: IFTRUE 25178
25176: GO 25204
25178: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25179: LD_ADDR_VAR 0 3
25183: PUSH
25184: LD_INT 2
25186: PUSH
25187: LD_INT 3
25189: PUSH
25190: LD_INT 4
25192: PUSH
25193: LD_INT 5
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: ST_TO_ADDR
25202: GO 26061
25204: LD_INT 9
25206: DOUBLE
25207: EQUAL
25208: IFTRUE 25212
25210: GO 25238
25212: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25213: LD_ADDR_VAR 0 3
25217: PUSH
25218: LD_INT 2
25220: PUSH
25221: LD_INT 3
25223: PUSH
25224: LD_INT 4
25226: PUSH
25227: LD_INT 5
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: ST_TO_ADDR
25236: GO 26061
25238: LD_INT 7
25240: DOUBLE
25241: EQUAL
25242: IFTRUE 25246
25244: GO 25272
25246: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25247: LD_ADDR_VAR 0 3
25251: PUSH
25252: LD_INT 2
25254: PUSH
25255: LD_INT 3
25257: PUSH
25258: LD_INT 4
25260: PUSH
25261: LD_INT 5
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: ST_TO_ADDR
25270: GO 26061
25272: LD_INT 12
25274: DOUBLE
25275: EQUAL
25276: IFTRUE 25280
25278: GO 25306
25280: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25281: LD_ADDR_VAR 0 3
25285: PUSH
25286: LD_INT 2
25288: PUSH
25289: LD_INT 3
25291: PUSH
25292: LD_INT 4
25294: PUSH
25295: LD_INT 5
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: ST_TO_ADDR
25304: GO 26061
25306: LD_INT 13
25308: DOUBLE
25309: EQUAL
25310: IFTRUE 25314
25312: GO 25340
25314: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25315: LD_ADDR_VAR 0 3
25319: PUSH
25320: LD_INT 2
25322: PUSH
25323: LD_INT 3
25325: PUSH
25326: LD_INT 4
25328: PUSH
25329: LD_INT 5
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: ST_TO_ADDR
25338: GO 26061
25340: LD_INT 14
25342: DOUBLE
25343: EQUAL
25344: IFTRUE 25348
25346: GO 25366
25348: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25349: LD_ADDR_VAR 0 3
25353: PUSH
25354: LD_INT 4
25356: PUSH
25357: LD_INT 5
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: ST_TO_ADDR
25364: GO 26061
25366: LD_INT 6
25368: DOUBLE
25369: EQUAL
25370: IFTRUE 25374
25372: GO 25392
25374: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25375: LD_ADDR_VAR 0 3
25379: PUSH
25380: LD_INT 4
25382: PUSH
25383: LD_INT 5
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: ST_TO_ADDR
25390: GO 26061
25392: LD_INT 10
25394: DOUBLE
25395: EQUAL
25396: IFTRUE 25400
25398: GO 25418
25400: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25401: LD_ADDR_VAR 0 3
25405: PUSH
25406: LD_INT 4
25408: PUSH
25409: LD_INT 5
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: ST_TO_ADDR
25416: GO 26061
25418: LD_INT 22
25420: DOUBLE
25421: EQUAL
25422: IFTRUE 25426
25424: GO 25452
25426: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25427: LD_ADDR_VAR 0 3
25431: PUSH
25432: LD_INT 11
25434: PUSH
25435: LD_INT 12
25437: PUSH
25438: LD_INT 13
25440: PUSH
25441: LD_INT 14
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: ST_TO_ADDR
25450: GO 26061
25452: LD_INT 23
25454: DOUBLE
25455: EQUAL
25456: IFTRUE 25460
25458: GO 25486
25460: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25461: LD_ADDR_VAR 0 3
25465: PUSH
25466: LD_INT 11
25468: PUSH
25469: LD_INT 12
25471: PUSH
25472: LD_INT 13
25474: PUSH
25475: LD_INT 14
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: ST_TO_ADDR
25484: GO 26061
25486: LD_INT 24
25488: DOUBLE
25489: EQUAL
25490: IFTRUE 25494
25492: GO 25520
25494: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25495: LD_ADDR_VAR 0 3
25499: PUSH
25500: LD_INT 11
25502: PUSH
25503: LD_INT 12
25505: PUSH
25506: LD_INT 13
25508: PUSH
25509: LD_INT 14
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: ST_TO_ADDR
25518: GO 26061
25520: LD_INT 30
25522: DOUBLE
25523: EQUAL
25524: IFTRUE 25528
25526: GO 25554
25528: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25529: LD_ADDR_VAR 0 3
25533: PUSH
25534: LD_INT 11
25536: PUSH
25537: LD_INT 12
25539: PUSH
25540: LD_INT 13
25542: PUSH
25543: LD_INT 14
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: ST_TO_ADDR
25552: GO 26061
25554: LD_INT 25
25556: DOUBLE
25557: EQUAL
25558: IFTRUE 25562
25560: GO 25580
25562: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25563: LD_ADDR_VAR 0 3
25567: PUSH
25568: LD_INT 13
25570: PUSH
25571: LD_INT 14
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: ST_TO_ADDR
25578: GO 26061
25580: LD_INT 27
25582: DOUBLE
25583: EQUAL
25584: IFTRUE 25588
25586: GO 25606
25588: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25589: LD_ADDR_VAR 0 3
25593: PUSH
25594: LD_INT 13
25596: PUSH
25597: LD_INT 14
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: ST_TO_ADDR
25604: GO 26061
25606: LD_INT 92
25608: DOUBLE
25609: EQUAL
25610: IFTRUE 25614
25612: GO 25640
25614: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25615: LD_ADDR_VAR 0 3
25619: PUSH
25620: LD_INT 11
25622: PUSH
25623: LD_INT 12
25625: PUSH
25626: LD_INT 13
25628: PUSH
25629: LD_INT 14
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: ST_TO_ADDR
25638: GO 26061
25640: LD_INT 28
25642: DOUBLE
25643: EQUAL
25644: IFTRUE 25648
25646: GO 25666
25648: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25649: LD_ADDR_VAR 0 3
25653: PUSH
25654: LD_INT 13
25656: PUSH
25657: LD_INT 14
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: ST_TO_ADDR
25664: GO 26061
25666: LD_INT 29
25668: DOUBLE
25669: EQUAL
25670: IFTRUE 25674
25672: GO 25692
25674: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25675: LD_ADDR_VAR 0 3
25679: PUSH
25680: LD_INT 13
25682: PUSH
25683: LD_INT 14
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: ST_TO_ADDR
25690: GO 26061
25692: LD_INT 31
25694: DOUBLE
25695: EQUAL
25696: IFTRUE 25700
25698: GO 25718
25700: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25701: LD_ADDR_VAR 0 3
25705: PUSH
25706: LD_INT 13
25708: PUSH
25709: LD_INT 14
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: ST_TO_ADDR
25716: GO 26061
25718: LD_INT 26
25720: DOUBLE
25721: EQUAL
25722: IFTRUE 25726
25724: GO 25744
25726: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25727: LD_ADDR_VAR 0 3
25731: PUSH
25732: LD_INT 13
25734: PUSH
25735: LD_INT 14
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: ST_TO_ADDR
25742: GO 26061
25744: LD_INT 42
25746: DOUBLE
25747: EQUAL
25748: IFTRUE 25752
25750: GO 25778
25752: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25753: LD_ADDR_VAR 0 3
25757: PUSH
25758: LD_INT 21
25760: PUSH
25761: LD_INT 22
25763: PUSH
25764: LD_INT 23
25766: PUSH
25767: LD_INT 24
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: ST_TO_ADDR
25776: GO 26061
25778: LD_INT 43
25780: DOUBLE
25781: EQUAL
25782: IFTRUE 25786
25784: GO 25812
25786: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25787: LD_ADDR_VAR 0 3
25791: PUSH
25792: LD_INT 21
25794: PUSH
25795: LD_INT 22
25797: PUSH
25798: LD_INT 23
25800: PUSH
25801: LD_INT 24
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: ST_TO_ADDR
25810: GO 26061
25812: LD_INT 44
25814: DOUBLE
25815: EQUAL
25816: IFTRUE 25820
25818: GO 25846
25820: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25821: LD_ADDR_VAR 0 3
25825: PUSH
25826: LD_INT 21
25828: PUSH
25829: LD_INT 22
25831: PUSH
25832: LD_INT 23
25834: PUSH
25835: LD_INT 24
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: ST_TO_ADDR
25844: GO 26061
25846: LD_INT 45
25848: DOUBLE
25849: EQUAL
25850: IFTRUE 25854
25852: GO 25880
25854: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25855: LD_ADDR_VAR 0 3
25859: PUSH
25860: LD_INT 21
25862: PUSH
25863: LD_INT 22
25865: PUSH
25866: LD_INT 23
25868: PUSH
25869: LD_INT 24
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: ST_TO_ADDR
25878: GO 26061
25880: LD_INT 49
25882: DOUBLE
25883: EQUAL
25884: IFTRUE 25888
25886: GO 25914
25888: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25889: LD_ADDR_VAR 0 3
25893: PUSH
25894: LD_INT 21
25896: PUSH
25897: LD_INT 22
25899: PUSH
25900: LD_INT 23
25902: PUSH
25903: LD_INT 24
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: ST_TO_ADDR
25912: GO 26061
25914: LD_INT 51
25916: DOUBLE
25917: EQUAL
25918: IFTRUE 25922
25920: GO 25948
25922: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25923: LD_ADDR_VAR 0 3
25927: PUSH
25928: LD_INT 21
25930: PUSH
25931: LD_INT 22
25933: PUSH
25934: LD_INT 23
25936: PUSH
25937: LD_INT 24
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: ST_TO_ADDR
25946: GO 26061
25948: LD_INT 52
25950: DOUBLE
25951: EQUAL
25952: IFTRUE 25956
25954: GO 25982
25956: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25957: LD_ADDR_VAR 0 3
25961: PUSH
25962: LD_INT 21
25964: PUSH
25965: LD_INT 22
25967: PUSH
25968: LD_INT 23
25970: PUSH
25971: LD_INT 24
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: ST_TO_ADDR
25980: GO 26061
25982: LD_INT 53
25984: DOUBLE
25985: EQUAL
25986: IFTRUE 25990
25988: GO 26008
25990: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25991: LD_ADDR_VAR 0 3
25995: PUSH
25996: LD_INT 23
25998: PUSH
25999: LD_INT 24
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: ST_TO_ADDR
26006: GO 26061
26008: LD_INT 46
26010: DOUBLE
26011: EQUAL
26012: IFTRUE 26016
26014: GO 26034
26016: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26017: LD_ADDR_VAR 0 3
26021: PUSH
26022: LD_INT 23
26024: PUSH
26025: LD_INT 24
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: ST_TO_ADDR
26032: GO 26061
26034: LD_INT 47
26036: DOUBLE
26037: EQUAL
26038: IFTRUE 26042
26040: GO 26060
26042: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26043: LD_ADDR_VAR 0 3
26047: PUSH
26048: LD_INT 23
26050: PUSH
26051: LD_INT 24
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: ST_TO_ADDR
26058: GO 26061
26060: POP
// result := ( chassis in result ) ;
26061: LD_ADDR_VAR 0 3
26065: PUSH
26066: LD_VAR 0 1
26070: PUSH
26071: LD_VAR 0 3
26075: IN
26076: ST_TO_ADDR
// end ;
26077: LD_VAR 0 3
26081: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26082: LD_INT 0
26084: PPUSH
26085: PPUSH
26086: PPUSH
26087: PPUSH
26088: PPUSH
26089: PPUSH
26090: PPUSH
// result := array ;
26091: LD_ADDR_VAR 0 5
26095: PUSH
26096: LD_VAR 0 1
26100: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26101: LD_VAR 0 1
26105: NOT
26106: PUSH
26107: LD_VAR 0 2
26111: NOT
26112: OR
26113: PUSH
26114: LD_VAR 0 3
26118: NOT
26119: OR
26120: PUSH
26121: LD_VAR 0 2
26125: PUSH
26126: LD_VAR 0 1
26130: GREATER
26131: OR
26132: PUSH
26133: LD_VAR 0 3
26137: PUSH
26138: LD_VAR 0 1
26142: GREATER
26143: OR
26144: IFFALSE 26148
// exit ;
26146: GO 26444
// if direction then
26148: LD_VAR 0 4
26152: IFFALSE 26216
// begin d := 1 ;
26154: LD_ADDR_VAR 0 9
26158: PUSH
26159: LD_INT 1
26161: ST_TO_ADDR
// if i_from > i_to then
26162: LD_VAR 0 2
26166: PUSH
26167: LD_VAR 0 3
26171: GREATER
26172: IFFALSE 26198
// length := ( array - i_from ) + i_to else
26174: LD_ADDR_VAR 0 11
26178: PUSH
26179: LD_VAR 0 1
26183: PUSH
26184: LD_VAR 0 2
26188: MINUS
26189: PUSH
26190: LD_VAR 0 3
26194: PLUS
26195: ST_TO_ADDR
26196: GO 26214
// length := i_to - i_from ;
26198: LD_ADDR_VAR 0 11
26202: PUSH
26203: LD_VAR 0 3
26207: PUSH
26208: LD_VAR 0 2
26212: MINUS
26213: ST_TO_ADDR
// end else
26214: GO 26277
// begin d := - 1 ;
26216: LD_ADDR_VAR 0 9
26220: PUSH
26221: LD_INT 1
26223: NEG
26224: ST_TO_ADDR
// if i_from > i_to then
26225: LD_VAR 0 2
26229: PUSH
26230: LD_VAR 0 3
26234: GREATER
26235: IFFALSE 26255
// length := i_from - i_to else
26237: LD_ADDR_VAR 0 11
26241: PUSH
26242: LD_VAR 0 2
26246: PUSH
26247: LD_VAR 0 3
26251: MINUS
26252: ST_TO_ADDR
26253: GO 26277
// length := ( array - i_to ) + i_from ;
26255: LD_ADDR_VAR 0 11
26259: PUSH
26260: LD_VAR 0 1
26264: PUSH
26265: LD_VAR 0 3
26269: MINUS
26270: PUSH
26271: LD_VAR 0 2
26275: PLUS
26276: ST_TO_ADDR
// end ; if not length then
26277: LD_VAR 0 11
26281: NOT
26282: IFFALSE 26286
// exit ;
26284: GO 26444
// tmp := array ;
26286: LD_ADDR_VAR 0 10
26290: PUSH
26291: LD_VAR 0 1
26295: ST_TO_ADDR
// for i = 1 to length do
26296: LD_ADDR_VAR 0 6
26300: PUSH
26301: DOUBLE
26302: LD_INT 1
26304: DEC
26305: ST_TO_ADDR
26306: LD_VAR 0 11
26310: PUSH
26311: FOR_TO
26312: IFFALSE 26432
// begin for j = 1 to array do
26314: LD_ADDR_VAR 0 7
26318: PUSH
26319: DOUBLE
26320: LD_INT 1
26322: DEC
26323: ST_TO_ADDR
26324: LD_VAR 0 1
26328: PUSH
26329: FOR_TO
26330: IFFALSE 26418
// begin k := j + d ;
26332: LD_ADDR_VAR 0 8
26336: PUSH
26337: LD_VAR 0 7
26341: PUSH
26342: LD_VAR 0 9
26346: PLUS
26347: ST_TO_ADDR
// if k > array then
26348: LD_VAR 0 8
26352: PUSH
26353: LD_VAR 0 1
26357: GREATER
26358: IFFALSE 26368
// k := 1 ;
26360: LD_ADDR_VAR 0 8
26364: PUSH
26365: LD_INT 1
26367: ST_TO_ADDR
// if not k then
26368: LD_VAR 0 8
26372: NOT
26373: IFFALSE 26385
// k := array ;
26375: LD_ADDR_VAR 0 8
26379: PUSH
26380: LD_VAR 0 1
26384: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26385: LD_ADDR_VAR 0 10
26389: PUSH
26390: LD_VAR 0 10
26394: PPUSH
26395: LD_VAR 0 8
26399: PPUSH
26400: LD_VAR 0 1
26404: PUSH
26405: LD_VAR 0 7
26409: ARRAY
26410: PPUSH
26411: CALL_OW 1
26415: ST_TO_ADDR
// end ;
26416: GO 26329
26418: POP
26419: POP
// array := tmp ;
26420: LD_ADDR_VAR 0 1
26424: PUSH
26425: LD_VAR 0 10
26429: ST_TO_ADDR
// end ;
26430: GO 26311
26432: POP
26433: POP
// result := array ;
26434: LD_ADDR_VAR 0 5
26438: PUSH
26439: LD_VAR 0 1
26443: ST_TO_ADDR
// end ;
26444: LD_VAR 0 5
26448: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26449: LD_INT 0
26451: PPUSH
26452: PPUSH
// result := 0 ;
26453: LD_ADDR_VAR 0 3
26457: PUSH
26458: LD_INT 0
26460: ST_TO_ADDR
// if not array or not value in array then
26461: LD_VAR 0 1
26465: NOT
26466: PUSH
26467: LD_VAR 0 2
26471: PUSH
26472: LD_VAR 0 1
26476: IN
26477: NOT
26478: OR
26479: IFFALSE 26483
// exit ;
26481: GO 26537
// for i = 1 to array do
26483: LD_ADDR_VAR 0 4
26487: PUSH
26488: DOUBLE
26489: LD_INT 1
26491: DEC
26492: ST_TO_ADDR
26493: LD_VAR 0 1
26497: PUSH
26498: FOR_TO
26499: IFFALSE 26535
// if value = array [ i ] then
26501: LD_VAR 0 2
26505: PUSH
26506: LD_VAR 0 1
26510: PUSH
26511: LD_VAR 0 4
26515: ARRAY
26516: EQUAL
26517: IFFALSE 26533
// begin result := i ;
26519: LD_ADDR_VAR 0 3
26523: PUSH
26524: LD_VAR 0 4
26528: ST_TO_ADDR
// exit ;
26529: POP
26530: POP
26531: GO 26537
// end ;
26533: GO 26498
26535: POP
26536: POP
// end ;
26537: LD_VAR 0 3
26541: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26542: LD_INT 0
26544: PPUSH
// vc_chassis := chassis ;
26545: LD_ADDR_OWVAR 37
26549: PUSH
26550: LD_VAR 0 1
26554: ST_TO_ADDR
// vc_engine := engine ;
26555: LD_ADDR_OWVAR 39
26559: PUSH
26560: LD_VAR 0 2
26564: ST_TO_ADDR
// vc_control := control ;
26565: LD_ADDR_OWVAR 38
26569: PUSH
26570: LD_VAR 0 3
26574: ST_TO_ADDR
// vc_weapon := weapon ;
26575: LD_ADDR_OWVAR 40
26579: PUSH
26580: LD_VAR 0 4
26584: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26585: LD_ADDR_OWVAR 41
26589: PUSH
26590: LD_VAR 0 5
26594: ST_TO_ADDR
// end ;
26595: LD_VAR 0 6
26599: RET
// export function WantPlant ( unit ) ; var task ; begin
26600: LD_INT 0
26602: PPUSH
26603: PPUSH
// result := false ;
26604: LD_ADDR_VAR 0 2
26608: PUSH
26609: LD_INT 0
26611: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26612: LD_ADDR_VAR 0 3
26616: PUSH
26617: LD_VAR 0 1
26621: PPUSH
26622: CALL_OW 437
26626: ST_TO_ADDR
// if task then
26627: LD_VAR 0 3
26631: IFFALSE 26659
// if task [ 1 ] [ 1 ] = p then
26633: LD_VAR 0 3
26637: PUSH
26638: LD_INT 1
26640: ARRAY
26641: PUSH
26642: LD_INT 1
26644: ARRAY
26645: PUSH
26646: LD_STRING p
26648: EQUAL
26649: IFFALSE 26659
// result := true ;
26651: LD_ADDR_VAR 0 2
26655: PUSH
26656: LD_INT 1
26658: ST_TO_ADDR
// end ;
26659: LD_VAR 0 2
26663: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26664: LD_INT 0
26666: PPUSH
26667: PPUSH
26668: PPUSH
26669: PPUSH
// if pos < 1 then
26670: LD_VAR 0 2
26674: PUSH
26675: LD_INT 1
26677: LESS
26678: IFFALSE 26682
// exit ;
26680: GO 26985
// if pos = 1 then
26682: LD_VAR 0 2
26686: PUSH
26687: LD_INT 1
26689: EQUAL
26690: IFFALSE 26723
// result := Replace ( arr , pos [ 1 ] , value ) else
26692: LD_ADDR_VAR 0 4
26696: PUSH
26697: LD_VAR 0 1
26701: PPUSH
26702: LD_VAR 0 2
26706: PUSH
26707: LD_INT 1
26709: ARRAY
26710: PPUSH
26711: LD_VAR 0 3
26715: PPUSH
26716: CALL_OW 1
26720: ST_TO_ADDR
26721: GO 26985
// begin tmp := arr ;
26723: LD_ADDR_VAR 0 6
26727: PUSH
26728: LD_VAR 0 1
26732: ST_TO_ADDR
// s_arr := [ tmp ] ;
26733: LD_ADDR_VAR 0 7
26737: PUSH
26738: LD_VAR 0 6
26742: PUSH
26743: EMPTY
26744: LIST
26745: ST_TO_ADDR
// for i = 1 to pos - 1 do
26746: LD_ADDR_VAR 0 5
26750: PUSH
26751: DOUBLE
26752: LD_INT 1
26754: DEC
26755: ST_TO_ADDR
26756: LD_VAR 0 2
26760: PUSH
26761: LD_INT 1
26763: MINUS
26764: PUSH
26765: FOR_TO
26766: IFFALSE 26811
// begin tmp := tmp [ pos [ i ] ] ;
26768: LD_ADDR_VAR 0 6
26772: PUSH
26773: LD_VAR 0 6
26777: PUSH
26778: LD_VAR 0 2
26782: PUSH
26783: LD_VAR 0 5
26787: ARRAY
26788: ARRAY
26789: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26790: LD_ADDR_VAR 0 7
26794: PUSH
26795: LD_VAR 0 7
26799: PUSH
26800: LD_VAR 0 6
26804: PUSH
26805: EMPTY
26806: LIST
26807: ADD
26808: ST_TO_ADDR
// end ;
26809: GO 26765
26811: POP
26812: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26813: LD_ADDR_VAR 0 6
26817: PUSH
26818: LD_VAR 0 6
26822: PPUSH
26823: LD_VAR 0 2
26827: PUSH
26828: LD_VAR 0 2
26832: ARRAY
26833: PPUSH
26834: LD_VAR 0 3
26838: PPUSH
26839: CALL_OW 1
26843: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26844: LD_ADDR_VAR 0 7
26848: PUSH
26849: LD_VAR 0 7
26853: PPUSH
26854: LD_VAR 0 7
26858: PPUSH
26859: LD_VAR 0 6
26863: PPUSH
26864: CALL_OW 1
26868: ST_TO_ADDR
// for i = s_arr downto 2 do
26869: LD_ADDR_VAR 0 5
26873: PUSH
26874: DOUBLE
26875: LD_VAR 0 7
26879: INC
26880: ST_TO_ADDR
26881: LD_INT 2
26883: PUSH
26884: FOR_DOWNTO
26885: IFFALSE 26969
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26887: LD_ADDR_VAR 0 6
26891: PUSH
26892: LD_VAR 0 7
26896: PUSH
26897: LD_VAR 0 5
26901: PUSH
26902: LD_INT 1
26904: MINUS
26905: ARRAY
26906: PPUSH
26907: LD_VAR 0 2
26911: PUSH
26912: LD_VAR 0 5
26916: PUSH
26917: LD_INT 1
26919: MINUS
26920: ARRAY
26921: PPUSH
26922: LD_VAR 0 7
26926: PUSH
26927: LD_VAR 0 5
26931: ARRAY
26932: PPUSH
26933: CALL_OW 1
26937: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26938: LD_ADDR_VAR 0 7
26942: PUSH
26943: LD_VAR 0 7
26947: PPUSH
26948: LD_VAR 0 5
26952: PUSH
26953: LD_INT 1
26955: MINUS
26956: PPUSH
26957: LD_VAR 0 6
26961: PPUSH
26962: CALL_OW 1
26966: ST_TO_ADDR
// end ;
26967: GO 26884
26969: POP
26970: POP
// result := s_arr [ 1 ] ;
26971: LD_ADDR_VAR 0 4
26975: PUSH
26976: LD_VAR 0 7
26980: PUSH
26981: LD_INT 1
26983: ARRAY
26984: ST_TO_ADDR
// end ; end ;
26985: LD_VAR 0 4
26989: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26990: LD_INT 0
26992: PPUSH
26993: PPUSH
// if not list then
26994: LD_VAR 0 1
26998: NOT
26999: IFFALSE 27003
// exit ;
27001: GO 27094
// i := list [ pos1 ] ;
27003: LD_ADDR_VAR 0 5
27007: PUSH
27008: LD_VAR 0 1
27012: PUSH
27013: LD_VAR 0 2
27017: ARRAY
27018: ST_TO_ADDR
// if not i then
27019: LD_VAR 0 5
27023: NOT
27024: IFFALSE 27028
// exit ;
27026: GO 27094
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27028: LD_ADDR_VAR 0 1
27032: PUSH
27033: LD_VAR 0 1
27037: PPUSH
27038: LD_VAR 0 2
27042: PPUSH
27043: LD_VAR 0 1
27047: PUSH
27048: LD_VAR 0 3
27052: ARRAY
27053: PPUSH
27054: CALL_OW 1
27058: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27059: LD_ADDR_VAR 0 1
27063: PUSH
27064: LD_VAR 0 1
27068: PPUSH
27069: LD_VAR 0 3
27073: PPUSH
27074: LD_VAR 0 5
27078: PPUSH
27079: CALL_OW 1
27083: ST_TO_ADDR
// result := list ;
27084: LD_ADDR_VAR 0 4
27088: PUSH
27089: LD_VAR 0 1
27093: ST_TO_ADDR
// end ;
27094: LD_VAR 0 4
27098: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27099: LD_INT 0
27101: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27102: LD_ADDR_VAR 0 5
27106: PUSH
27107: LD_VAR 0 1
27111: PPUSH
27112: CALL_OW 250
27116: PPUSH
27117: LD_VAR 0 1
27121: PPUSH
27122: CALL_OW 251
27126: PPUSH
27127: LD_VAR 0 2
27131: PPUSH
27132: LD_VAR 0 3
27136: PPUSH
27137: LD_VAR 0 4
27141: PPUSH
27142: CALL 27152 0 5
27146: ST_TO_ADDR
// end ;
27147: LD_VAR 0 5
27151: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27152: LD_INT 0
27154: PPUSH
27155: PPUSH
27156: PPUSH
27157: PPUSH
// if not list then
27158: LD_VAR 0 3
27162: NOT
27163: IFFALSE 27167
// exit ;
27165: GO 27555
// result := [ ] ;
27167: LD_ADDR_VAR 0 6
27171: PUSH
27172: EMPTY
27173: ST_TO_ADDR
// for i in list do
27174: LD_ADDR_VAR 0 7
27178: PUSH
27179: LD_VAR 0 3
27183: PUSH
27184: FOR_IN
27185: IFFALSE 27387
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27187: LD_ADDR_VAR 0 9
27191: PUSH
27192: LD_VAR 0 7
27196: PPUSH
27197: LD_VAR 0 1
27201: PPUSH
27202: LD_VAR 0 2
27206: PPUSH
27207: CALL_OW 297
27211: ST_TO_ADDR
// if not result then
27212: LD_VAR 0 6
27216: NOT
27217: IFFALSE 27243
// result := [ [ i , tmp ] ] else
27219: LD_ADDR_VAR 0 6
27223: PUSH
27224: LD_VAR 0 7
27228: PUSH
27229: LD_VAR 0 9
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: EMPTY
27239: LIST
27240: ST_TO_ADDR
27241: GO 27385
// begin if result [ result ] [ 2 ] < tmp then
27243: LD_VAR 0 6
27247: PUSH
27248: LD_VAR 0 6
27252: ARRAY
27253: PUSH
27254: LD_INT 2
27256: ARRAY
27257: PUSH
27258: LD_VAR 0 9
27262: LESS
27263: IFFALSE 27305
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27265: LD_ADDR_VAR 0 6
27269: PUSH
27270: LD_VAR 0 6
27274: PPUSH
27275: LD_VAR 0 6
27279: PUSH
27280: LD_INT 1
27282: PLUS
27283: PPUSH
27284: LD_VAR 0 7
27288: PUSH
27289: LD_VAR 0 9
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PPUSH
27298: CALL_OW 2
27302: ST_TO_ADDR
27303: GO 27385
// for j = 1 to result do
27305: LD_ADDR_VAR 0 8
27309: PUSH
27310: DOUBLE
27311: LD_INT 1
27313: DEC
27314: ST_TO_ADDR
27315: LD_VAR 0 6
27319: PUSH
27320: FOR_TO
27321: IFFALSE 27383
// begin if tmp < result [ j ] [ 2 ] then
27323: LD_VAR 0 9
27327: PUSH
27328: LD_VAR 0 6
27332: PUSH
27333: LD_VAR 0 8
27337: ARRAY
27338: PUSH
27339: LD_INT 2
27341: ARRAY
27342: LESS
27343: IFFALSE 27381
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27345: LD_ADDR_VAR 0 6
27349: PUSH
27350: LD_VAR 0 6
27354: PPUSH
27355: LD_VAR 0 8
27359: PPUSH
27360: LD_VAR 0 7
27364: PUSH
27365: LD_VAR 0 9
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PPUSH
27374: CALL_OW 2
27378: ST_TO_ADDR
// break ;
27379: GO 27383
// end ; end ;
27381: GO 27320
27383: POP
27384: POP
// end ; end ;
27385: GO 27184
27387: POP
27388: POP
// if result and not asc then
27389: LD_VAR 0 6
27393: PUSH
27394: LD_VAR 0 4
27398: NOT
27399: AND
27400: IFFALSE 27475
// begin tmp := result ;
27402: LD_ADDR_VAR 0 9
27406: PUSH
27407: LD_VAR 0 6
27411: ST_TO_ADDR
// for i = tmp downto 1 do
27412: LD_ADDR_VAR 0 7
27416: PUSH
27417: DOUBLE
27418: LD_VAR 0 9
27422: INC
27423: ST_TO_ADDR
27424: LD_INT 1
27426: PUSH
27427: FOR_DOWNTO
27428: IFFALSE 27473
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27430: LD_ADDR_VAR 0 6
27434: PUSH
27435: LD_VAR 0 6
27439: PPUSH
27440: LD_VAR 0 9
27444: PUSH
27445: LD_VAR 0 7
27449: MINUS
27450: PUSH
27451: LD_INT 1
27453: PLUS
27454: PPUSH
27455: LD_VAR 0 9
27459: PUSH
27460: LD_VAR 0 7
27464: ARRAY
27465: PPUSH
27466: CALL_OW 1
27470: ST_TO_ADDR
27471: GO 27427
27473: POP
27474: POP
// end ; tmp := [ ] ;
27475: LD_ADDR_VAR 0 9
27479: PUSH
27480: EMPTY
27481: ST_TO_ADDR
// if mode then
27482: LD_VAR 0 5
27486: IFFALSE 27555
// begin for i = 1 to result do
27488: LD_ADDR_VAR 0 7
27492: PUSH
27493: DOUBLE
27494: LD_INT 1
27496: DEC
27497: ST_TO_ADDR
27498: LD_VAR 0 6
27502: PUSH
27503: FOR_TO
27504: IFFALSE 27543
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27506: LD_ADDR_VAR 0 9
27510: PUSH
27511: LD_VAR 0 9
27515: PPUSH
27516: LD_VAR 0 7
27520: PPUSH
27521: LD_VAR 0 6
27525: PUSH
27526: LD_VAR 0 7
27530: ARRAY
27531: PUSH
27532: LD_INT 1
27534: ARRAY
27535: PPUSH
27536: CALL_OW 1
27540: ST_TO_ADDR
27541: GO 27503
27543: POP
27544: POP
// result := tmp ;
27545: LD_ADDR_VAR 0 6
27549: PUSH
27550: LD_VAR 0 9
27554: ST_TO_ADDR
// end ; end ;
27555: LD_VAR 0 6
27559: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27560: LD_INT 0
27562: PPUSH
27563: PPUSH
27564: PPUSH
27565: PPUSH
27566: PPUSH
27567: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27568: LD_ADDR_VAR 0 5
27572: PUSH
27573: LD_INT 0
27575: PUSH
27576: LD_INT 0
27578: PUSH
27579: LD_INT 0
27581: PUSH
27582: EMPTY
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: ST_TO_ADDR
// if not x or not y then
27590: LD_VAR 0 2
27594: NOT
27595: PUSH
27596: LD_VAR 0 3
27600: NOT
27601: OR
27602: IFFALSE 27606
// exit ;
27604: GO 29256
// if not range then
27606: LD_VAR 0 4
27610: NOT
27611: IFFALSE 27621
// range := 10 ;
27613: LD_ADDR_VAR 0 4
27617: PUSH
27618: LD_INT 10
27620: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27621: LD_ADDR_VAR 0 8
27625: PUSH
27626: LD_INT 81
27628: PUSH
27629: LD_VAR 0 1
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 92
27640: PUSH
27641: LD_VAR 0 2
27645: PUSH
27646: LD_VAR 0 3
27650: PUSH
27651: LD_VAR 0 4
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 3
27664: PUSH
27665: LD_INT 21
27667: PUSH
27668: LD_INT 3
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: LIST
27683: PPUSH
27684: CALL_OW 69
27688: ST_TO_ADDR
// if not tmp then
27689: LD_VAR 0 8
27693: NOT
27694: IFFALSE 27698
// exit ;
27696: GO 29256
// for i in tmp do
27698: LD_ADDR_VAR 0 6
27702: PUSH
27703: LD_VAR 0 8
27707: PUSH
27708: FOR_IN
27709: IFFALSE 29231
// begin points := [ 0 , 0 , 0 ] ;
27711: LD_ADDR_VAR 0 9
27715: PUSH
27716: LD_INT 0
27718: PUSH
27719: LD_INT 0
27721: PUSH
27722: LD_INT 0
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: LIST
27729: ST_TO_ADDR
// bpoints := 1 ;
27730: LD_ADDR_VAR 0 10
27734: PUSH
27735: LD_INT 1
27737: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27738: LD_VAR 0 6
27742: PPUSH
27743: CALL_OW 247
27747: PUSH
27748: LD_INT 1
27750: DOUBLE
27751: EQUAL
27752: IFTRUE 27756
27754: GO 28334
27756: POP
// begin if GetClass ( i ) = 1 then
27757: LD_VAR 0 6
27761: PPUSH
27762: CALL_OW 257
27766: PUSH
27767: LD_INT 1
27769: EQUAL
27770: IFFALSE 27791
// points := [ 10 , 5 , 3 ] ;
27772: LD_ADDR_VAR 0 9
27776: PUSH
27777: LD_INT 10
27779: PUSH
27780: LD_INT 5
27782: PUSH
27783: LD_INT 3
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: LIST
27790: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27791: LD_VAR 0 6
27795: PPUSH
27796: CALL_OW 257
27800: PUSH
27801: LD_INT 2
27803: PUSH
27804: LD_INT 3
27806: PUSH
27807: LD_INT 4
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: LIST
27814: IN
27815: IFFALSE 27836
// points := [ 3 , 2 , 1 ] ;
27817: LD_ADDR_VAR 0 9
27821: PUSH
27822: LD_INT 3
27824: PUSH
27825: LD_INT 2
27827: PUSH
27828: LD_INT 1
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: LIST
27835: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27836: LD_VAR 0 6
27840: PPUSH
27841: CALL_OW 257
27845: PUSH
27846: LD_INT 5
27848: EQUAL
27849: IFFALSE 27870
// points := [ 130 , 5 , 2 ] ;
27851: LD_ADDR_VAR 0 9
27855: PUSH
27856: LD_INT 130
27858: PUSH
27859: LD_INT 5
27861: PUSH
27862: LD_INT 2
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: LIST
27869: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27870: LD_VAR 0 6
27874: PPUSH
27875: CALL_OW 257
27879: PUSH
27880: LD_INT 8
27882: EQUAL
27883: IFFALSE 27904
// points := [ 35 , 35 , 30 ] ;
27885: LD_ADDR_VAR 0 9
27889: PUSH
27890: LD_INT 35
27892: PUSH
27893: LD_INT 35
27895: PUSH
27896: LD_INT 30
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: LIST
27903: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27904: LD_VAR 0 6
27908: PPUSH
27909: CALL_OW 257
27913: PUSH
27914: LD_INT 9
27916: EQUAL
27917: IFFALSE 27938
// points := [ 20 , 55 , 40 ] ;
27919: LD_ADDR_VAR 0 9
27923: PUSH
27924: LD_INT 20
27926: PUSH
27927: LD_INT 55
27929: PUSH
27930: LD_INT 40
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: LIST
27937: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27938: LD_VAR 0 6
27942: PPUSH
27943: CALL_OW 257
27947: PUSH
27948: LD_INT 12
27950: PUSH
27951: LD_INT 16
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: IN
27958: IFFALSE 27979
// points := [ 5 , 3 , 2 ] ;
27960: LD_ADDR_VAR 0 9
27964: PUSH
27965: LD_INT 5
27967: PUSH
27968: LD_INT 3
27970: PUSH
27971: LD_INT 2
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: LIST
27978: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27979: LD_VAR 0 6
27983: PPUSH
27984: CALL_OW 257
27988: PUSH
27989: LD_INT 17
27991: EQUAL
27992: IFFALSE 28013
// points := [ 100 , 50 , 75 ] ;
27994: LD_ADDR_VAR 0 9
27998: PUSH
27999: LD_INT 100
28001: PUSH
28002: LD_INT 50
28004: PUSH
28005: LD_INT 75
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: LIST
28012: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28013: LD_VAR 0 6
28017: PPUSH
28018: CALL_OW 257
28022: PUSH
28023: LD_INT 15
28025: EQUAL
28026: IFFALSE 28047
// points := [ 10 , 5 , 3 ] ;
28028: LD_ADDR_VAR 0 9
28032: PUSH
28033: LD_INT 10
28035: PUSH
28036: LD_INT 5
28038: PUSH
28039: LD_INT 3
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: LIST
28046: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28047: LD_VAR 0 6
28051: PPUSH
28052: CALL_OW 257
28056: PUSH
28057: LD_INT 14
28059: EQUAL
28060: IFFALSE 28081
// points := [ 10 , 0 , 0 ] ;
28062: LD_ADDR_VAR 0 9
28066: PUSH
28067: LD_INT 10
28069: PUSH
28070: LD_INT 0
28072: PUSH
28073: LD_INT 0
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: LIST
28080: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28081: LD_VAR 0 6
28085: PPUSH
28086: CALL_OW 257
28090: PUSH
28091: LD_INT 11
28093: EQUAL
28094: IFFALSE 28115
// points := [ 30 , 10 , 5 ] ;
28096: LD_ADDR_VAR 0 9
28100: PUSH
28101: LD_INT 30
28103: PUSH
28104: LD_INT 10
28106: PUSH
28107: LD_INT 5
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: LIST
28114: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28115: LD_VAR 0 1
28119: PPUSH
28120: LD_INT 5
28122: PPUSH
28123: CALL_OW 321
28127: PUSH
28128: LD_INT 2
28130: EQUAL
28131: IFFALSE 28148
// bpoints := bpoints * 1.8 ;
28133: LD_ADDR_VAR 0 10
28137: PUSH
28138: LD_VAR 0 10
28142: PUSH
28143: LD_REAL  1.80000000000000E+0000
28146: MUL
28147: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28148: LD_VAR 0 6
28152: PPUSH
28153: CALL_OW 257
28157: PUSH
28158: LD_INT 1
28160: PUSH
28161: LD_INT 2
28163: PUSH
28164: LD_INT 3
28166: PUSH
28167: LD_INT 4
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: IN
28176: PUSH
28177: LD_VAR 0 1
28181: PPUSH
28182: LD_INT 51
28184: PPUSH
28185: CALL_OW 321
28189: PUSH
28190: LD_INT 2
28192: EQUAL
28193: AND
28194: IFFALSE 28211
// bpoints := bpoints * 1.2 ;
28196: LD_ADDR_VAR 0 10
28200: PUSH
28201: LD_VAR 0 10
28205: PUSH
28206: LD_REAL  1.20000000000000E+0000
28209: MUL
28210: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28211: LD_VAR 0 6
28215: PPUSH
28216: CALL_OW 257
28220: PUSH
28221: LD_INT 5
28223: PUSH
28224: LD_INT 7
28226: PUSH
28227: LD_INT 9
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: LIST
28234: IN
28235: PUSH
28236: LD_VAR 0 1
28240: PPUSH
28241: LD_INT 52
28243: PPUSH
28244: CALL_OW 321
28248: PUSH
28249: LD_INT 2
28251: EQUAL
28252: AND
28253: IFFALSE 28270
// bpoints := bpoints * 1.5 ;
28255: LD_ADDR_VAR 0 10
28259: PUSH
28260: LD_VAR 0 10
28264: PUSH
28265: LD_REAL  1.50000000000000E+0000
28268: MUL
28269: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28270: LD_VAR 0 1
28274: PPUSH
28275: LD_INT 66
28277: PPUSH
28278: CALL_OW 321
28282: PUSH
28283: LD_INT 2
28285: EQUAL
28286: IFFALSE 28303
// bpoints := bpoints * 1.1 ;
28288: LD_ADDR_VAR 0 10
28292: PUSH
28293: LD_VAR 0 10
28297: PUSH
28298: LD_REAL  1.10000000000000E+0000
28301: MUL
28302: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28303: LD_ADDR_VAR 0 10
28307: PUSH
28308: LD_VAR 0 10
28312: PUSH
28313: LD_VAR 0 6
28317: PPUSH
28318: LD_INT 1
28320: PPUSH
28321: CALL_OW 259
28325: PUSH
28326: LD_REAL  1.15000000000000E+0000
28329: MUL
28330: MUL
28331: ST_TO_ADDR
// end ; unit_vehicle :
28332: GO 29160
28334: LD_INT 2
28336: DOUBLE
28337: EQUAL
28338: IFTRUE 28342
28340: GO 29148
28342: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28343: LD_VAR 0 6
28347: PPUSH
28348: CALL_OW 264
28352: PUSH
28353: LD_INT 2
28355: PUSH
28356: LD_INT 42
28358: PUSH
28359: LD_INT 24
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: LIST
28366: IN
28367: IFFALSE 28388
// points := [ 25 , 5 , 3 ] ;
28369: LD_ADDR_VAR 0 9
28373: PUSH
28374: LD_INT 25
28376: PUSH
28377: LD_INT 5
28379: PUSH
28380: LD_INT 3
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: LIST
28387: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28388: LD_VAR 0 6
28392: PPUSH
28393: CALL_OW 264
28397: PUSH
28398: LD_INT 4
28400: PUSH
28401: LD_INT 43
28403: PUSH
28404: LD_INT 25
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: LIST
28411: IN
28412: IFFALSE 28433
// points := [ 40 , 15 , 5 ] ;
28414: LD_ADDR_VAR 0 9
28418: PUSH
28419: LD_INT 40
28421: PUSH
28422: LD_INT 15
28424: PUSH
28425: LD_INT 5
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: LIST
28432: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28433: LD_VAR 0 6
28437: PPUSH
28438: CALL_OW 264
28442: PUSH
28443: LD_INT 3
28445: PUSH
28446: LD_INT 23
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: IN
28453: IFFALSE 28474
// points := [ 7 , 25 , 8 ] ;
28455: LD_ADDR_VAR 0 9
28459: PUSH
28460: LD_INT 7
28462: PUSH
28463: LD_INT 25
28465: PUSH
28466: LD_INT 8
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: LIST
28473: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28474: LD_VAR 0 6
28478: PPUSH
28479: CALL_OW 264
28483: PUSH
28484: LD_INT 5
28486: PUSH
28487: LD_INT 27
28489: PUSH
28490: LD_INT 44
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: LIST
28497: IN
28498: IFFALSE 28519
// points := [ 14 , 50 , 16 ] ;
28500: LD_ADDR_VAR 0 9
28504: PUSH
28505: LD_INT 14
28507: PUSH
28508: LD_INT 50
28510: PUSH
28511: LD_INT 16
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: LIST
28518: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28519: LD_VAR 0 6
28523: PPUSH
28524: CALL_OW 264
28528: PUSH
28529: LD_INT 6
28531: PUSH
28532: LD_INT 46
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: IN
28539: IFFALSE 28560
// points := [ 32 , 120 , 70 ] ;
28541: LD_ADDR_VAR 0 9
28545: PUSH
28546: LD_INT 32
28548: PUSH
28549: LD_INT 120
28551: PUSH
28552: LD_INT 70
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: LIST
28559: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28560: LD_VAR 0 6
28564: PPUSH
28565: CALL_OW 264
28569: PUSH
28570: LD_INT 7
28572: PUSH
28573: LD_INT 28
28575: PUSH
28576: LD_INT 45
28578: PUSH
28579: LD_INT 92
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: IN
28588: IFFALSE 28609
// points := [ 35 , 20 , 45 ] ;
28590: LD_ADDR_VAR 0 9
28594: PUSH
28595: LD_INT 35
28597: PUSH
28598: LD_INT 20
28600: PUSH
28601: LD_INT 45
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: LIST
28608: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28609: LD_VAR 0 6
28613: PPUSH
28614: CALL_OW 264
28618: PUSH
28619: LD_INT 47
28621: PUSH
28622: EMPTY
28623: LIST
28624: IN
28625: IFFALSE 28646
// points := [ 67 , 45 , 75 ] ;
28627: LD_ADDR_VAR 0 9
28631: PUSH
28632: LD_INT 67
28634: PUSH
28635: LD_INT 45
28637: PUSH
28638: LD_INT 75
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: LIST
28645: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28646: LD_VAR 0 6
28650: PPUSH
28651: CALL_OW 264
28655: PUSH
28656: LD_INT 26
28658: PUSH
28659: EMPTY
28660: LIST
28661: IN
28662: IFFALSE 28683
// points := [ 120 , 30 , 80 ] ;
28664: LD_ADDR_VAR 0 9
28668: PUSH
28669: LD_INT 120
28671: PUSH
28672: LD_INT 30
28674: PUSH
28675: LD_INT 80
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: LIST
28682: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28683: LD_VAR 0 6
28687: PPUSH
28688: CALL_OW 264
28692: PUSH
28693: LD_INT 22
28695: PUSH
28696: EMPTY
28697: LIST
28698: IN
28699: IFFALSE 28720
// points := [ 40 , 1 , 1 ] ;
28701: LD_ADDR_VAR 0 9
28705: PUSH
28706: LD_INT 40
28708: PUSH
28709: LD_INT 1
28711: PUSH
28712: LD_INT 1
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: LIST
28719: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28720: LD_VAR 0 6
28724: PPUSH
28725: CALL_OW 264
28729: PUSH
28730: LD_INT 29
28732: PUSH
28733: EMPTY
28734: LIST
28735: IN
28736: IFFALSE 28757
// points := [ 70 , 200 , 400 ] ;
28738: LD_ADDR_VAR 0 9
28742: PUSH
28743: LD_INT 70
28745: PUSH
28746: LD_INT 200
28748: PUSH
28749: LD_INT 400
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: LIST
28756: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28757: LD_VAR 0 6
28761: PPUSH
28762: CALL_OW 264
28766: PUSH
28767: LD_INT 14
28769: PUSH
28770: LD_INT 53
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: IN
28777: IFFALSE 28798
// points := [ 40 , 10 , 20 ] ;
28779: LD_ADDR_VAR 0 9
28783: PUSH
28784: LD_INT 40
28786: PUSH
28787: LD_INT 10
28789: PUSH
28790: LD_INT 20
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: LIST
28797: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28798: LD_VAR 0 6
28802: PPUSH
28803: CALL_OW 264
28807: PUSH
28808: LD_INT 9
28810: PUSH
28811: EMPTY
28812: LIST
28813: IN
28814: IFFALSE 28835
// points := [ 5 , 70 , 20 ] ;
28816: LD_ADDR_VAR 0 9
28820: PUSH
28821: LD_INT 5
28823: PUSH
28824: LD_INT 70
28826: PUSH
28827: LD_INT 20
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: LIST
28834: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28835: LD_VAR 0 6
28839: PPUSH
28840: CALL_OW 264
28844: PUSH
28845: LD_INT 10
28847: PUSH
28848: EMPTY
28849: LIST
28850: IN
28851: IFFALSE 28872
// points := [ 35 , 110 , 70 ] ;
28853: LD_ADDR_VAR 0 9
28857: PUSH
28858: LD_INT 35
28860: PUSH
28861: LD_INT 110
28863: PUSH
28864: LD_INT 70
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: LIST
28871: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28872: LD_VAR 0 6
28876: PPUSH
28877: CALL_OW 265
28881: PUSH
28882: LD_INT 25
28884: EQUAL
28885: IFFALSE 28906
// points := [ 80 , 65 , 100 ] ;
28887: LD_ADDR_VAR 0 9
28891: PUSH
28892: LD_INT 80
28894: PUSH
28895: LD_INT 65
28897: PUSH
28898: LD_INT 100
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: LIST
28905: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28906: LD_VAR 0 6
28910: PPUSH
28911: CALL_OW 263
28915: PUSH
28916: LD_INT 1
28918: EQUAL
28919: IFFALSE 28954
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28921: LD_ADDR_VAR 0 10
28925: PUSH
28926: LD_VAR 0 10
28930: PUSH
28931: LD_VAR 0 6
28935: PPUSH
28936: CALL_OW 311
28940: PPUSH
28941: LD_INT 3
28943: PPUSH
28944: CALL_OW 259
28948: PUSH
28949: LD_INT 4
28951: MUL
28952: MUL
28953: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28954: LD_VAR 0 6
28958: PPUSH
28959: CALL_OW 263
28963: PUSH
28964: LD_INT 2
28966: EQUAL
28967: IFFALSE 29018
// begin j := IsControledBy ( i ) ;
28969: LD_ADDR_VAR 0 7
28973: PUSH
28974: LD_VAR 0 6
28978: PPUSH
28979: CALL_OW 312
28983: ST_TO_ADDR
// if j then
28984: LD_VAR 0 7
28988: IFFALSE 29018
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28990: LD_ADDR_VAR 0 10
28994: PUSH
28995: LD_VAR 0 10
28999: PUSH
29000: LD_VAR 0 7
29004: PPUSH
29005: LD_INT 3
29007: PPUSH
29008: CALL_OW 259
29012: PUSH
29013: LD_INT 3
29015: MUL
29016: MUL
29017: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29018: LD_VAR 0 6
29022: PPUSH
29023: CALL_OW 264
29027: PUSH
29028: LD_INT 5
29030: PUSH
29031: LD_INT 6
29033: PUSH
29034: LD_INT 46
29036: PUSH
29037: LD_INT 44
29039: PUSH
29040: LD_INT 47
29042: PUSH
29043: LD_INT 45
29045: PUSH
29046: LD_INT 28
29048: PUSH
29049: LD_INT 7
29051: PUSH
29052: LD_INT 27
29054: PUSH
29055: LD_INT 29
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: IN
29070: PUSH
29071: LD_VAR 0 1
29075: PPUSH
29076: LD_INT 52
29078: PPUSH
29079: CALL_OW 321
29083: PUSH
29084: LD_INT 2
29086: EQUAL
29087: AND
29088: IFFALSE 29105
// bpoints := bpoints * 1.2 ;
29090: LD_ADDR_VAR 0 10
29094: PUSH
29095: LD_VAR 0 10
29099: PUSH
29100: LD_REAL  1.20000000000000E+0000
29103: MUL
29104: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29105: LD_VAR 0 6
29109: PPUSH
29110: CALL_OW 264
29114: PUSH
29115: LD_INT 6
29117: PUSH
29118: LD_INT 46
29120: PUSH
29121: LD_INT 47
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: LIST
29128: IN
29129: IFFALSE 29146
// bpoints := bpoints * 1.2 ;
29131: LD_ADDR_VAR 0 10
29135: PUSH
29136: LD_VAR 0 10
29140: PUSH
29141: LD_REAL  1.20000000000000E+0000
29144: MUL
29145: ST_TO_ADDR
// end ; unit_building :
29146: GO 29160
29148: LD_INT 3
29150: DOUBLE
29151: EQUAL
29152: IFTRUE 29156
29154: GO 29159
29156: POP
// ; end ;
29157: GO 29160
29159: POP
// for j = 1 to 3 do
29160: LD_ADDR_VAR 0 7
29164: PUSH
29165: DOUBLE
29166: LD_INT 1
29168: DEC
29169: ST_TO_ADDR
29170: LD_INT 3
29172: PUSH
29173: FOR_TO
29174: IFFALSE 29227
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29176: LD_ADDR_VAR 0 5
29180: PUSH
29181: LD_VAR 0 5
29185: PPUSH
29186: LD_VAR 0 7
29190: PPUSH
29191: LD_VAR 0 5
29195: PUSH
29196: LD_VAR 0 7
29200: ARRAY
29201: PUSH
29202: LD_VAR 0 9
29206: PUSH
29207: LD_VAR 0 7
29211: ARRAY
29212: PUSH
29213: LD_VAR 0 10
29217: MUL
29218: PLUS
29219: PPUSH
29220: CALL_OW 1
29224: ST_TO_ADDR
29225: GO 29173
29227: POP
29228: POP
// end ;
29229: GO 27708
29231: POP
29232: POP
// result := Replace ( result , 4 , tmp ) ;
29233: LD_ADDR_VAR 0 5
29237: PUSH
29238: LD_VAR 0 5
29242: PPUSH
29243: LD_INT 4
29245: PPUSH
29246: LD_VAR 0 8
29250: PPUSH
29251: CALL_OW 1
29255: ST_TO_ADDR
// end ;
29256: LD_VAR 0 5
29260: RET
// export function DangerAtRange ( unit , range ) ; begin
29261: LD_INT 0
29263: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29264: LD_ADDR_VAR 0 3
29268: PUSH
29269: LD_VAR 0 1
29273: PPUSH
29274: CALL_OW 255
29278: PPUSH
29279: LD_VAR 0 1
29283: PPUSH
29284: CALL_OW 250
29288: PPUSH
29289: LD_VAR 0 1
29293: PPUSH
29294: CALL_OW 251
29298: PPUSH
29299: LD_VAR 0 2
29303: PPUSH
29304: CALL 27560 0 4
29308: ST_TO_ADDR
// end ;
29309: LD_VAR 0 3
29313: RET
// export function DangerInArea ( side , area ) ; begin
29314: LD_INT 0
29316: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29317: LD_ADDR_VAR 0 3
29321: PUSH
29322: LD_VAR 0 2
29326: PPUSH
29327: LD_INT 81
29329: PUSH
29330: LD_VAR 0 1
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PPUSH
29339: CALL_OW 70
29343: ST_TO_ADDR
// end ;
29344: LD_VAR 0 3
29348: RET
// export function IsExtension ( b ) ; begin
29349: LD_INT 0
29351: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29352: LD_ADDR_VAR 0 2
29356: PUSH
29357: LD_VAR 0 1
29361: PUSH
29362: LD_INT 23
29364: PUSH
29365: LD_INT 20
29367: PUSH
29368: LD_INT 22
29370: PUSH
29371: LD_INT 17
29373: PUSH
29374: LD_INT 24
29376: PUSH
29377: LD_INT 21
29379: PUSH
29380: LD_INT 19
29382: PUSH
29383: LD_INT 16
29385: PUSH
29386: LD_INT 25
29388: PUSH
29389: LD_INT 18
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: IN
29404: ST_TO_ADDR
// end ;
29405: LD_VAR 0 2
29409: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29410: LD_INT 0
29412: PPUSH
29413: PPUSH
29414: PPUSH
// result := [ ] ;
29415: LD_ADDR_VAR 0 4
29419: PUSH
29420: EMPTY
29421: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29422: LD_ADDR_VAR 0 5
29426: PUSH
29427: LD_VAR 0 2
29431: PPUSH
29432: LD_INT 21
29434: PUSH
29435: LD_INT 3
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PPUSH
29442: CALL_OW 70
29446: ST_TO_ADDR
// if not tmp then
29447: LD_VAR 0 5
29451: NOT
29452: IFFALSE 29456
// exit ;
29454: GO 29520
// if checkLink then
29456: LD_VAR 0 3
29460: IFFALSE 29510
// begin for i in tmp do
29462: LD_ADDR_VAR 0 6
29466: PUSH
29467: LD_VAR 0 5
29471: PUSH
29472: FOR_IN
29473: IFFALSE 29508
// if GetBase ( i ) <> base then
29475: LD_VAR 0 6
29479: PPUSH
29480: CALL_OW 274
29484: PUSH
29485: LD_VAR 0 1
29489: NONEQUAL
29490: IFFALSE 29506
// ComLinkToBase ( base , i ) ;
29492: LD_VAR 0 1
29496: PPUSH
29497: LD_VAR 0 6
29501: PPUSH
29502: CALL_OW 169
29506: GO 29472
29508: POP
29509: POP
// end ; result := tmp ;
29510: LD_ADDR_VAR 0 4
29514: PUSH
29515: LD_VAR 0 5
29519: ST_TO_ADDR
// end ;
29520: LD_VAR 0 4
29524: RET
// export function ComComplete ( units , b ) ; var i ; begin
29525: LD_INT 0
29527: PPUSH
29528: PPUSH
// if not units then
29529: LD_VAR 0 1
29533: NOT
29534: IFFALSE 29538
// exit ;
29536: GO 29628
// for i in units do
29538: LD_ADDR_VAR 0 4
29542: PUSH
29543: LD_VAR 0 1
29547: PUSH
29548: FOR_IN
29549: IFFALSE 29626
// if BuildingStatus ( b ) = bs_build then
29551: LD_VAR 0 2
29555: PPUSH
29556: CALL_OW 461
29560: PUSH
29561: LD_INT 1
29563: EQUAL
29564: IFFALSE 29624
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29566: LD_VAR 0 4
29570: PPUSH
29571: LD_STRING h
29573: PUSH
29574: LD_VAR 0 2
29578: PPUSH
29579: CALL_OW 250
29583: PUSH
29584: LD_VAR 0 2
29588: PPUSH
29589: CALL_OW 251
29593: PUSH
29594: LD_VAR 0 2
29598: PUSH
29599: LD_INT 0
29601: PUSH
29602: LD_INT 0
29604: PUSH
29605: LD_INT 0
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: PUSH
29617: EMPTY
29618: LIST
29619: PPUSH
29620: CALL_OW 446
29624: GO 29548
29626: POP
29627: POP
// end ;
29628: LD_VAR 0 3
29632: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29633: LD_INT 0
29635: PPUSH
29636: PPUSH
29637: PPUSH
29638: PPUSH
29639: PPUSH
29640: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29641: LD_VAR 0 1
29645: NOT
29646: PUSH
29647: LD_VAR 0 1
29651: PPUSH
29652: CALL_OW 263
29656: PUSH
29657: LD_INT 2
29659: NONEQUAL
29660: OR
29661: IFFALSE 29665
// exit ;
29663: GO 29981
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29665: LD_ADDR_VAR 0 6
29669: PUSH
29670: LD_INT 22
29672: PUSH
29673: LD_VAR 0 1
29677: PPUSH
29678: CALL_OW 255
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 2
29689: PUSH
29690: LD_INT 30
29692: PUSH
29693: LD_INT 36
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 34
29702: PUSH
29703: LD_INT 31
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: LIST
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PPUSH
29719: CALL_OW 69
29723: ST_TO_ADDR
// if not tmp then
29724: LD_VAR 0 6
29728: NOT
29729: IFFALSE 29733
// exit ;
29731: GO 29981
// result := [ ] ;
29733: LD_ADDR_VAR 0 2
29737: PUSH
29738: EMPTY
29739: ST_TO_ADDR
// for i in tmp do
29740: LD_ADDR_VAR 0 3
29744: PUSH
29745: LD_VAR 0 6
29749: PUSH
29750: FOR_IN
29751: IFFALSE 29822
// begin t := UnitsInside ( i ) ;
29753: LD_ADDR_VAR 0 4
29757: PUSH
29758: LD_VAR 0 3
29762: PPUSH
29763: CALL_OW 313
29767: ST_TO_ADDR
// if t then
29768: LD_VAR 0 4
29772: IFFALSE 29820
// for j in t do
29774: LD_ADDR_VAR 0 7
29778: PUSH
29779: LD_VAR 0 4
29783: PUSH
29784: FOR_IN
29785: IFFALSE 29818
// result := Replace ( result , result + 1 , j ) ;
29787: LD_ADDR_VAR 0 2
29791: PUSH
29792: LD_VAR 0 2
29796: PPUSH
29797: LD_VAR 0 2
29801: PUSH
29802: LD_INT 1
29804: PLUS
29805: PPUSH
29806: LD_VAR 0 7
29810: PPUSH
29811: CALL_OW 1
29815: ST_TO_ADDR
29816: GO 29784
29818: POP
29819: POP
// end ;
29820: GO 29750
29822: POP
29823: POP
// if not result then
29824: LD_VAR 0 2
29828: NOT
29829: IFFALSE 29833
// exit ;
29831: GO 29981
// mech := result [ 1 ] ;
29833: LD_ADDR_VAR 0 5
29837: PUSH
29838: LD_VAR 0 2
29842: PUSH
29843: LD_INT 1
29845: ARRAY
29846: ST_TO_ADDR
// if result > 1 then
29847: LD_VAR 0 2
29851: PUSH
29852: LD_INT 1
29854: GREATER
29855: IFFALSE 29967
// begin for i = 2 to result do
29857: LD_ADDR_VAR 0 3
29861: PUSH
29862: DOUBLE
29863: LD_INT 2
29865: DEC
29866: ST_TO_ADDR
29867: LD_VAR 0 2
29871: PUSH
29872: FOR_TO
29873: IFFALSE 29965
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29875: LD_ADDR_VAR 0 4
29879: PUSH
29880: LD_VAR 0 2
29884: PUSH
29885: LD_VAR 0 3
29889: ARRAY
29890: PPUSH
29891: LD_INT 3
29893: PPUSH
29894: CALL_OW 259
29898: PUSH
29899: LD_VAR 0 2
29903: PUSH
29904: LD_VAR 0 3
29908: ARRAY
29909: PPUSH
29910: CALL_OW 432
29914: MINUS
29915: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29916: LD_VAR 0 4
29920: PUSH
29921: LD_VAR 0 5
29925: PPUSH
29926: LD_INT 3
29928: PPUSH
29929: CALL_OW 259
29933: PUSH
29934: LD_VAR 0 5
29938: PPUSH
29939: CALL_OW 432
29943: MINUS
29944: GREATEREQUAL
29945: IFFALSE 29963
// mech := result [ i ] ;
29947: LD_ADDR_VAR 0 5
29951: PUSH
29952: LD_VAR 0 2
29956: PUSH
29957: LD_VAR 0 3
29961: ARRAY
29962: ST_TO_ADDR
// end ;
29963: GO 29872
29965: POP
29966: POP
// end ; ComLinkTo ( vehicle , mech ) ;
29967: LD_VAR 0 1
29971: PPUSH
29972: LD_VAR 0 5
29976: PPUSH
29977: CALL_OW 135
// end ;
29981: LD_VAR 0 2
29985: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29986: LD_INT 0
29988: PPUSH
29989: PPUSH
29990: PPUSH
29991: PPUSH
29992: PPUSH
29993: PPUSH
29994: PPUSH
29995: PPUSH
29996: PPUSH
29997: PPUSH
29998: PPUSH
29999: PPUSH
30000: PPUSH
// result := [ ] ;
30001: LD_ADDR_VAR 0 7
30005: PUSH
30006: EMPTY
30007: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30008: LD_VAR 0 1
30012: PPUSH
30013: CALL_OW 266
30017: PUSH
30018: LD_INT 0
30020: PUSH
30021: LD_INT 1
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: IN
30028: NOT
30029: IFFALSE 30033
// exit ;
30031: GO 31667
// if name then
30033: LD_VAR 0 3
30037: IFFALSE 30053
// SetBName ( base_dep , name ) ;
30039: LD_VAR 0 1
30043: PPUSH
30044: LD_VAR 0 3
30048: PPUSH
30049: CALL_OW 500
// base := GetBase ( base_dep ) ;
30053: LD_ADDR_VAR 0 15
30057: PUSH
30058: LD_VAR 0 1
30062: PPUSH
30063: CALL_OW 274
30067: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30068: LD_ADDR_VAR 0 16
30072: PUSH
30073: LD_VAR 0 1
30077: PPUSH
30078: CALL_OW 255
30082: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30083: LD_ADDR_VAR 0 17
30087: PUSH
30088: LD_VAR 0 1
30092: PPUSH
30093: CALL_OW 248
30097: ST_TO_ADDR
// if sources then
30098: LD_VAR 0 5
30102: IFFALSE 30149
// for i = 1 to 3 do
30104: LD_ADDR_VAR 0 8
30108: PUSH
30109: DOUBLE
30110: LD_INT 1
30112: DEC
30113: ST_TO_ADDR
30114: LD_INT 3
30116: PUSH
30117: FOR_TO
30118: IFFALSE 30147
// AddResourceType ( base , i , sources [ i ] ) ;
30120: LD_VAR 0 15
30124: PPUSH
30125: LD_VAR 0 8
30129: PPUSH
30130: LD_VAR 0 5
30134: PUSH
30135: LD_VAR 0 8
30139: ARRAY
30140: PPUSH
30141: CALL_OW 276
30145: GO 30117
30147: POP
30148: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30149: LD_ADDR_VAR 0 18
30153: PUSH
30154: LD_VAR 0 15
30158: PPUSH
30159: LD_VAR 0 2
30163: PPUSH
30164: LD_INT 1
30166: PPUSH
30167: CALL 29410 0 3
30171: ST_TO_ADDR
// InitHc ;
30172: CALL_OW 19
// InitUc ;
30176: CALL_OW 18
// uc_side := side ;
30180: LD_ADDR_OWVAR 20
30184: PUSH
30185: LD_VAR 0 16
30189: ST_TO_ADDR
// uc_nation := nation ;
30190: LD_ADDR_OWVAR 21
30194: PUSH
30195: LD_VAR 0 17
30199: ST_TO_ADDR
// if buildings then
30200: LD_VAR 0 18
30204: IFFALSE 31526
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30206: LD_ADDR_VAR 0 19
30210: PUSH
30211: LD_VAR 0 18
30215: PPUSH
30216: LD_INT 2
30218: PUSH
30219: LD_INT 30
30221: PUSH
30222: LD_INT 29
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 30
30231: PUSH
30232: LD_INT 30
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: LIST
30243: PPUSH
30244: CALL_OW 72
30248: ST_TO_ADDR
// if tmp then
30249: LD_VAR 0 19
30253: IFFALSE 30301
// for i in tmp do
30255: LD_ADDR_VAR 0 8
30259: PUSH
30260: LD_VAR 0 19
30264: PUSH
30265: FOR_IN
30266: IFFALSE 30299
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30268: LD_VAR 0 8
30272: PPUSH
30273: CALL_OW 250
30277: PPUSH
30278: LD_VAR 0 8
30282: PPUSH
30283: CALL_OW 251
30287: PPUSH
30288: LD_VAR 0 16
30292: PPUSH
30293: CALL_OW 441
30297: GO 30265
30299: POP
30300: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30301: LD_VAR 0 18
30305: PPUSH
30306: LD_INT 2
30308: PUSH
30309: LD_INT 30
30311: PUSH
30312: LD_INT 32
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 30
30321: PUSH
30322: LD_INT 33
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: LIST
30333: PPUSH
30334: CALL_OW 72
30338: IFFALSE 30426
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30340: LD_ADDR_VAR 0 8
30344: PUSH
30345: LD_VAR 0 18
30349: PPUSH
30350: LD_INT 2
30352: PUSH
30353: LD_INT 30
30355: PUSH
30356: LD_INT 32
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: PUSH
30363: LD_INT 30
30365: PUSH
30366: LD_INT 33
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: LIST
30377: PPUSH
30378: CALL_OW 72
30382: PUSH
30383: FOR_IN
30384: IFFALSE 30424
// begin if not GetBWeapon ( i ) then
30386: LD_VAR 0 8
30390: PPUSH
30391: CALL_OW 269
30395: NOT
30396: IFFALSE 30422
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30398: LD_VAR 0 8
30402: PPUSH
30403: LD_VAR 0 8
30407: PPUSH
30408: LD_VAR 0 2
30412: PPUSH
30413: CALL 31672 0 2
30417: PPUSH
30418: CALL_OW 431
// end ;
30422: GO 30383
30424: POP
30425: POP
// end ; for i = 1 to personel do
30426: LD_ADDR_VAR 0 8
30430: PUSH
30431: DOUBLE
30432: LD_INT 1
30434: DEC
30435: ST_TO_ADDR
30436: LD_VAR 0 6
30440: PUSH
30441: FOR_TO
30442: IFFALSE 31506
// begin if i > 4 then
30444: LD_VAR 0 8
30448: PUSH
30449: LD_INT 4
30451: GREATER
30452: IFFALSE 30456
// break ;
30454: GO 31506
// case i of 1 :
30456: LD_VAR 0 8
30460: PUSH
30461: LD_INT 1
30463: DOUBLE
30464: EQUAL
30465: IFTRUE 30469
30467: GO 30549
30469: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30470: LD_ADDR_VAR 0 12
30474: PUSH
30475: LD_VAR 0 18
30479: PPUSH
30480: LD_INT 22
30482: PUSH
30483: LD_VAR 0 16
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 58
30494: PUSH
30495: EMPTY
30496: LIST
30497: PUSH
30498: LD_INT 2
30500: PUSH
30501: LD_INT 30
30503: PUSH
30504: LD_INT 32
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 30
30513: PUSH
30514: LD_INT 4
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 30
30523: PUSH
30524: LD_INT 5
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: LIST
30541: PPUSH
30542: CALL_OW 72
30546: ST_TO_ADDR
30547: GO 30771
30549: LD_INT 2
30551: DOUBLE
30552: EQUAL
30553: IFTRUE 30557
30555: GO 30619
30557: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30558: LD_ADDR_VAR 0 12
30562: PUSH
30563: LD_VAR 0 18
30567: PPUSH
30568: LD_INT 22
30570: PUSH
30571: LD_VAR 0 16
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 2
30582: PUSH
30583: LD_INT 30
30585: PUSH
30586: LD_INT 0
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 30
30595: PUSH
30596: LD_INT 1
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: LIST
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PPUSH
30612: CALL_OW 72
30616: ST_TO_ADDR
30617: GO 30771
30619: LD_INT 3
30621: DOUBLE
30622: EQUAL
30623: IFTRUE 30627
30625: GO 30689
30627: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30628: LD_ADDR_VAR 0 12
30632: PUSH
30633: LD_VAR 0 18
30637: PPUSH
30638: LD_INT 22
30640: PUSH
30641: LD_VAR 0 16
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 2
30652: PUSH
30653: LD_INT 30
30655: PUSH
30656: LD_INT 2
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 30
30665: PUSH
30666: LD_INT 3
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: LIST
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PPUSH
30682: CALL_OW 72
30686: ST_TO_ADDR
30687: GO 30771
30689: LD_INT 4
30691: DOUBLE
30692: EQUAL
30693: IFTRUE 30697
30695: GO 30770
30697: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30698: LD_ADDR_VAR 0 12
30702: PUSH
30703: LD_VAR 0 18
30707: PPUSH
30708: LD_INT 22
30710: PUSH
30711: LD_VAR 0 16
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 2
30722: PUSH
30723: LD_INT 30
30725: PUSH
30726: LD_INT 6
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 30
30735: PUSH
30736: LD_INT 7
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 30
30745: PUSH
30746: LD_INT 8
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PPUSH
30763: CALL_OW 72
30767: ST_TO_ADDR
30768: GO 30771
30770: POP
// if i = 1 then
30771: LD_VAR 0 8
30775: PUSH
30776: LD_INT 1
30778: EQUAL
30779: IFFALSE 30890
// begin tmp := [ ] ;
30781: LD_ADDR_VAR 0 19
30785: PUSH
30786: EMPTY
30787: ST_TO_ADDR
// for j in f do
30788: LD_ADDR_VAR 0 9
30792: PUSH
30793: LD_VAR 0 12
30797: PUSH
30798: FOR_IN
30799: IFFALSE 30872
// if GetBType ( j ) = b_bunker then
30801: LD_VAR 0 9
30805: PPUSH
30806: CALL_OW 266
30810: PUSH
30811: LD_INT 32
30813: EQUAL
30814: IFFALSE 30841
// tmp := Insert ( tmp , 1 , j ) else
30816: LD_ADDR_VAR 0 19
30820: PUSH
30821: LD_VAR 0 19
30825: PPUSH
30826: LD_INT 1
30828: PPUSH
30829: LD_VAR 0 9
30833: PPUSH
30834: CALL_OW 2
30838: ST_TO_ADDR
30839: GO 30870
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30841: LD_ADDR_VAR 0 19
30845: PUSH
30846: LD_VAR 0 19
30850: PPUSH
30851: LD_VAR 0 19
30855: PUSH
30856: LD_INT 1
30858: PLUS
30859: PPUSH
30860: LD_VAR 0 9
30864: PPUSH
30865: CALL_OW 2
30869: ST_TO_ADDR
30870: GO 30798
30872: POP
30873: POP
// if tmp then
30874: LD_VAR 0 19
30878: IFFALSE 30890
// f := tmp ;
30880: LD_ADDR_VAR 0 12
30884: PUSH
30885: LD_VAR 0 19
30889: ST_TO_ADDR
// end ; x := personel [ i ] ;
30890: LD_ADDR_VAR 0 13
30894: PUSH
30895: LD_VAR 0 6
30899: PUSH
30900: LD_VAR 0 8
30904: ARRAY
30905: ST_TO_ADDR
// if x = - 1 then
30906: LD_VAR 0 13
30910: PUSH
30911: LD_INT 1
30913: NEG
30914: EQUAL
30915: IFFALSE 31124
// begin for j in f do
30917: LD_ADDR_VAR 0 9
30921: PUSH
30922: LD_VAR 0 12
30926: PUSH
30927: FOR_IN
30928: IFFALSE 31120
// repeat InitHc ;
30930: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30934: LD_VAR 0 9
30938: PPUSH
30939: CALL_OW 266
30943: PUSH
30944: LD_INT 5
30946: EQUAL
30947: IFFALSE 31017
// begin if UnitsInside ( j ) < 3 then
30949: LD_VAR 0 9
30953: PPUSH
30954: CALL_OW 313
30958: PUSH
30959: LD_INT 3
30961: LESS
30962: IFFALSE 30998
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30964: LD_INT 0
30966: PPUSH
30967: LD_INT 5
30969: PUSH
30970: LD_INT 8
30972: PUSH
30973: LD_INT 9
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: LIST
30980: PUSH
30981: LD_VAR 0 17
30985: ARRAY
30986: PPUSH
30987: LD_VAR 0 4
30991: PPUSH
30992: CALL_OW 380
30996: GO 31015
// PrepareHuman ( false , i , skill ) ;
30998: LD_INT 0
31000: PPUSH
31001: LD_VAR 0 8
31005: PPUSH
31006: LD_VAR 0 4
31010: PPUSH
31011: CALL_OW 380
// end else
31015: GO 31034
// PrepareHuman ( false , i , skill ) ;
31017: LD_INT 0
31019: PPUSH
31020: LD_VAR 0 8
31024: PPUSH
31025: LD_VAR 0 4
31029: PPUSH
31030: CALL_OW 380
// un := CreateHuman ;
31034: LD_ADDR_VAR 0 14
31038: PUSH
31039: CALL_OW 44
31043: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31044: LD_ADDR_VAR 0 7
31048: PUSH
31049: LD_VAR 0 7
31053: PPUSH
31054: LD_INT 1
31056: PPUSH
31057: LD_VAR 0 14
31061: PPUSH
31062: CALL_OW 2
31066: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31067: LD_VAR 0 14
31071: PPUSH
31072: LD_VAR 0 9
31076: PPUSH
31077: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31081: LD_VAR 0 9
31085: PPUSH
31086: CALL_OW 313
31090: PUSH
31091: LD_INT 6
31093: EQUAL
31094: PUSH
31095: LD_VAR 0 9
31099: PPUSH
31100: CALL_OW 266
31104: PUSH
31105: LD_INT 32
31107: PUSH
31108: LD_INT 31
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: IN
31115: OR
31116: IFFALSE 30930
31118: GO 30927
31120: POP
31121: POP
// end else
31122: GO 31504
// for j = 1 to x do
31124: LD_ADDR_VAR 0 9
31128: PUSH
31129: DOUBLE
31130: LD_INT 1
31132: DEC
31133: ST_TO_ADDR
31134: LD_VAR 0 13
31138: PUSH
31139: FOR_TO
31140: IFFALSE 31502
// begin InitHc ;
31142: CALL_OW 19
// if not f then
31146: LD_VAR 0 12
31150: NOT
31151: IFFALSE 31240
// begin PrepareHuman ( false , i , skill ) ;
31153: LD_INT 0
31155: PPUSH
31156: LD_VAR 0 8
31160: PPUSH
31161: LD_VAR 0 4
31165: PPUSH
31166: CALL_OW 380
// un := CreateHuman ;
31170: LD_ADDR_VAR 0 14
31174: PUSH
31175: CALL_OW 44
31179: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31180: LD_ADDR_VAR 0 7
31184: PUSH
31185: LD_VAR 0 7
31189: PPUSH
31190: LD_INT 1
31192: PPUSH
31193: LD_VAR 0 14
31197: PPUSH
31198: CALL_OW 2
31202: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31203: LD_VAR 0 14
31207: PPUSH
31208: LD_VAR 0 1
31212: PPUSH
31213: CALL_OW 250
31217: PPUSH
31218: LD_VAR 0 1
31222: PPUSH
31223: CALL_OW 251
31227: PPUSH
31228: LD_INT 10
31230: PPUSH
31231: LD_INT 0
31233: PPUSH
31234: CALL_OW 50
// continue ;
31238: GO 31139
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31240: LD_VAR 0 12
31244: PUSH
31245: LD_INT 1
31247: ARRAY
31248: PPUSH
31249: CALL_OW 313
31253: PUSH
31254: LD_VAR 0 12
31258: PUSH
31259: LD_INT 1
31261: ARRAY
31262: PPUSH
31263: CALL_OW 266
31267: PUSH
31268: LD_INT 32
31270: PUSH
31271: LD_INT 31
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: IN
31278: AND
31279: PUSH
31280: LD_VAR 0 12
31284: PUSH
31285: LD_INT 1
31287: ARRAY
31288: PPUSH
31289: CALL_OW 313
31293: PUSH
31294: LD_INT 6
31296: EQUAL
31297: OR
31298: IFFALSE 31318
// f := Delete ( f , 1 ) ;
31300: LD_ADDR_VAR 0 12
31304: PUSH
31305: LD_VAR 0 12
31309: PPUSH
31310: LD_INT 1
31312: PPUSH
31313: CALL_OW 3
31317: ST_TO_ADDR
// if not f then
31318: LD_VAR 0 12
31322: NOT
31323: IFFALSE 31341
// begin x := x + 2 ;
31325: LD_ADDR_VAR 0 13
31329: PUSH
31330: LD_VAR 0 13
31334: PUSH
31335: LD_INT 2
31337: PLUS
31338: ST_TO_ADDR
// continue ;
31339: GO 31139
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31341: LD_VAR 0 12
31345: PUSH
31346: LD_INT 1
31348: ARRAY
31349: PPUSH
31350: CALL_OW 266
31354: PUSH
31355: LD_INT 5
31357: EQUAL
31358: IFFALSE 31432
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31360: LD_VAR 0 12
31364: PUSH
31365: LD_INT 1
31367: ARRAY
31368: PPUSH
31369: CALL_OW 313
31373: PUSH
31374: LD_INT 3
31376: LESS
31377: IFFALSE 31413
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31379: LD_INT 0
31381: PPUSH
31382: LD_INT 5
31384: PUSH
31385: LD_INT 8
31387: PUSH
31388: LD_INT 9
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: LIST
31395: PUSH
31396: LD_VAR 0 17
31400: ARRAY
31401: PPUSH
31402: LD_VAR 0 4
31406: PPUSH
31407: CALL_OW 380
31411: GO 31430
// PrepareHuman ( false , i , skill ) ;
31413: LD_INT 0
31415: PPUSH
31416: LD_VAR 0 8
31420: PPUSH
31421: LD_VAR 0 4
31425: PPUSH
31426: CALL_OW 380
// end else
31430: GO 31449
// PrepareHuman ( false , i , skill ) ;
31432: LD_INT 0
31434: PPUSH
31435: LD_VAR 0 8
31439: PPUSH
31440: LD_VAR 0 4
31444: PPUSH
31445: CALL_OW 380
// un := CreateHuman ;
31449: LD_ADDR_VAR 0 14
31453: PUSH
31454: CALL_OW 44
31458: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31459: LD_ADDR_VAR 0 7
31463: PUSH
31464: LD_VAR 0 7
31468: PPUSH
31469: LD_INT 1
31471: PPUSH
31472: LD_VAR 0 14
31476: PPUSH
31477: CALL_OW 2
31481: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31482: LD_VAR 0 14
31486: PPUSH
31487: LD_VAR 0 12
31491: PUSH
31492: LD_INT 1
31494: ARRAY
31495: PPUSH
31496: CALL_OW 52
// end ;
31500: GO 31139
31502: POP
31503: POP
// end ;
31504: GO 30441
31506: POP
31507: POP
// result := result ^ buildings ;
31508: LD_ADDR_VAR 0 7
31512: PUSH
31513: LD_VAR 0 7
31517: PUSH
31518: LD_VAR 0 18
31522: ADD
31523: ST_TO_ADDR
// end else
31524: GO 31667
// begin for i = 1 to personel do
31526: LD_ADDR_VAR 0 8
31530: PUSH
31531: DOUBLE
31532: LD_INT 1
31534: DEC
31535: ST_TO_ADDR
31536: LD_VAR 0 6
31540: PUSH
31541: FOR_TO
31542: IFFALSE 31665
// begin if i > 4 then
31544: LD_VAR 0 8
31548: PUSH
31549: LD_INT 4
31551: GREATER
31552: IFFALSE 31556
// break ;
31554: GO 31665
// x := personel [ i ] ;
31556: LD_ADDR_VAR 0 13
31560: PUSH
31561: LD_VAR 0 6
31565: PUSH
31566: LD_VAR 0 8
31570: ARRAY
31571: ST_TO_ADDR
// if x = - 1 then
31572: LD_VAR 0 13
31576: PUSH
31577: LD_INT 1
31579: NEG
31580: EQUAL
31581: IFFALSE 31585
// continue ;
31583: GO 31541
// PrepareHuman ( false , i , skill ) ;
31585: LD_INT 0
31587: PPUSH
31588: LD_VAR 0 8
31592: PPUSH
31593: LD_VAR 0 4
31597: PPUSH
31598: CALL_OW 380
// un := CreateHuman ;
31602: LD_ADDR_VAR 0 14
31606: PUSH
31607: CALL_OW 44
31611: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31612: LD_VAR 0 14
31616: PPUSH
31617: LD_VAR 0 1
31621: PPUSH
31622: CALL_OW 250
31626: PPUSH
31627: LD_VAR 0 1
31631: PPUSH
31632: CALL_OW 251
31636: PPUSH
31637: LD_INT 10
31639: PPUSH
31640: LD_INT 0
31642: PPUSH
31643: CALL_OW 50
// result := result ^ un ;
31647: LD_ADDR_VAR 0 7
31651: PUSH
31652: LD_VAR 0 7
31656: PUSH
31657: LD_VAR 0 14
31661: ADD
31662: ST_TO_ADDR
// end ;
31663: GO 31541
31665: POP
31666: POP
// end ; end ;
31667: LD_VAR 0 7
31671: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31672: LD_INT 0
31674: PPUSH
31675: PPUSH
31676: PPUSH
31677: PPUSH
31678: PPUSH
31679: PPUSH
31680: PPUSH
31681: PPUSH
31682: PPUSH
31683: PPUSH
31684: PPUSH
31685: PPUSH
31686: PPUSH
31687: PPUSH
31688: PPUSH
31689: PPUSH
// result := false ;
31690: LD_ADDR_VAR 0 3
31694: PUSH
31695: LD_INT 0
31697: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31698: LD_VAR 0 1
31702: NOT
31703: PUSH
31704: LD_VAR 0 1
31708: PPUSH
31709: CALL_OW 266
31713: PUSH
31714: LD_INT 32
31716: PUSH
31717: LD_INT 33
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: IN
31724: NOT
31725: OR
31726: IFFALSE 31730
// exit ;
31728: GO 32839
// nat := GetNation ( tower ) ;
31730: LD_ADDR_VAR 0 12
31734: PUSH
31735: LD_VAR 0 1
31739: PPUSH
31740: CALL_OW 248
31744: ST_TO_ADDR
// side := GetSide ( tower ) ;
31745: LD_ADDR_VAR 0 16
31749: PUSH
31750: LD_VAR 0 1
31754: PPUSH
31755: CALL_OW 255
31759: ST_TO_ADDR
// x := GetX ( tower ) ;
31760: LD_ADDR_VAR 0 10
31764: PUSH
31765: LD_VAR 0 1
31769: PPUSH
31770: CALL_OW 250
31774: ST_TO_ADDR
// y := GetY ( tower ) ;
31775: LD_ADDR_VAR 0 11
31779: PUSH
31780: LD_VAR 0 1
31784: PPUSH
31785: CALL_OW 251
31789: ST_TO_ADDR
// if not x or not y then
31790: LD_VAR 0 10
31794: NOT
31795: PUSH
31796: LD_VAR 0 11
31800: NOT
31801: OR
31802: IFFALSE 31806
// exit ;
31804: GO 32839
// weapon := 0 ;
31806: LD_ADDR_VAR 0 18
31810: PUSH
31811: LD_INT 0
31813: ST_TO_ADDR
// fac_list := [ ] ;
31814: LD_ADDR_VAR 0 17
31818: PUSH
31819: EMPTY
31820: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31821: LD_ADDR_VAR 0 6
31825: PUSH
31826: LD_VAR 0 1
31830: PPUSH
31831: CALL_OW 274
31835: PPUSH
31836: LD_VAR 0 2
31840: PPUSH
31841: LD_INT 0
31843: PPUSH
31844: CALL 29410 0 3
31848: PPUSH
31849: LD_INT 30
31851: PUSH
31852: LD_INT 3
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PPUSH
31859: CALL_OW 72
31863: ST_TO_ADDR
// if not factories then
31864: LD_VAR 0 6
31868: NOT
31869: IFFALSE 31873
// exit ;
31871: GO 32839
// for i in factories do
31873: LD_ADDR_VAR 0 8
31877: PUSH
31878: LD_VAR 0 6
31882: PUSH
31883: FOR_IN
31884: IFFALSE 31909
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31886: LD_ADDR_VAR 0 17
31890: PUSH
31891: LD_VAR 0 17
31895: PUSH
31896: LD_VAR 0 8
31900: PPUSH
31901: CALL_OW 478
31905: UNION
31906: ST_TO_ADDR
31907: GO 31883
31909: POP
31910: POP
// if not fac_list then
31911: LD_VAR 0 17
31915: NOT
31916: IFFALSE 31920
// exit ;
31918: GO 32839
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31920: LD_ADDR_VAR 0 5
31924: PUSH
31925: LD_INT 4
31927: PUSH
31928: LD_INT 5
31930: PUSH
31931: LD_INT 9
31933: PUSH
31934: LD_INT 10
31936: PUSH
31937: LD_INT 6
31939: PUSH
31940: LD_INT 7
31942: PUSH
31943: LD_INT 11
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: PUSH
31955: LD_INT 27
31957: PUSH
31958: LD_INT 28
31960: PUSH
31961: LD_INT 26
31963: PUSH
31964: LD_INT 30
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 43
31975: PUSH
31976: LD_INT 44
31978: PUSH
31979: LD_INT 46
31981: PUSH
31982: LD_INT 45
31984: PUSH
31985: LD_INT 47
31987: PUSH
31988: LD_INT 49
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: LIST
32003: PUSH
32004: LD_VAR 0 12
32008: ARRAY
32009: ST_TO_ADDR
// list := list isect fac_list ;
32010: LD_ADDR_VAR 0 5
32014: PUSH
32015: LD_VAR 0 5
32019: PUSH
32020: LD_VAR 0 17
32024: ISECT
32025: ST_TO_ADDR
// if not list then
32026: LD_VAR 0 5
32030: NOT
32031: IFFALSE 32035
// exit ;
32033: GO 32839
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32035: LD_VAR 0 12
32039: PUSH
32040: LD_INT 3
32042: EQUAL
32043: PUSH
32044: LD_INT 49
32046: PUSH
32047: LD_VAR 0 5
32051: IN
32052: AND
32053: PUSH
32054: LD_INT 31
32056: PPUSH
32057: LD_VAR 0 16
32061: PPUSH
32062: CALL_OW 321
32066: PUSH
32067: LD_INT 2
32069: EQUAL
32070: AND
32071: IFFALSE 32131
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32073: LD_INT 22
32075: PUSH
32076: LD_VAR 0 16
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 35
32087: PUSH
32088: LD_INT 49
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 91
32097: PUSH
32098: LD_VAR 0 1
32102: PUSH
32103: LD_INT 10
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: LIST
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: LIST
32115: PPUSH
32116: CALL_OW 69
32120: NOT
32121: IFFALSE 32131
// weapon := ru_time_lapser ;
32123: LD_ADDR_VAR 0 18
32127: PUSH
32128: LD_INT 49
32130: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32131: LD_VAR 0 12
32135: PUSH
32136: LD_INT 1
32138: PUSH
32139: LD_INT 2
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: IN
32146: PUSH
32147: LD_INT 11
32149: PUSH
32150: LD_VAR 0 5
32154: IN
32155: PUSH
32156: LD_INT 30
32158: PUSH
32159: LD_VAR 0 5
32163: IN
32164: OR
32165: AND
32166: PUSH
32167: LD_INT 6
32169: PPUSH
32170: LD_VAR 0 16
32174: PPUSH
32175: CALL_OW 321
32179: PUSH
32180: LD_INT 2
32182: EQUAL
32183: AND
32184: IFFALSE 32349
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32186: LD_INT 22
32188: PUSH
32189: LD_VAR 0 16
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 2
32200: PUSH
32201: LD_INT 35
32203: PUSH
32204: LD_INT 11
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 35
32213: PUSH
32214: LD_INT 30
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 91
32228: PUSH
32229: LD_VAR 0 1
32233: PUSH
32234: LD_INT 18
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: LIST
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: LIST
32246: PPUSH
32247: CALL_OW 69
32251: NOT
32252: PUSH
32253: LD_INT 22
32255: PUSH
32256: LD_VAR 0 16
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 2
32267: PUSH
32268: LD_INT 30
32270: PUSH
32271: LD_INT 32
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 30
32280: PUSH
32281: LD_INT 33
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 91
32295: PUSH
32296: LD_VAR 0 1
32300: PUSH
32301: LD_INT 12
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: LIST
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: LIST
32313: PUSH
32314: EMPTY
32315: LIST
32316: PPUSH
32317: CALL_OW 69
32321: PUSH
32322: LD_INT 2
32324: GREATER
32325: AND
32326: IFFALSE 32349
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32328: LD_ADDR_VAR 0 18
32332: PUSH
32333: LD_INT 11
32335: PUSH
32336: LD_INT 30
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_VAR 0 12
32347: ARRAY
32348: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32349: LD_VAR 0 18
32353: NOT
32354: PUSH
32355: LD_INT 40
32357: PPUSH
32358: LD_VAR 0 16
32362: PPUSH
32363: CALL_OW 321
32367: PUSH
32368: LD_INT 2
32370: EQUAL
32371: AND
32372: PUSH
32373: LD_INT 7
32375: PUSH
32376: LD_VAR 0 5
32380: IN
32381: PUSH
32382: LD_INT 28
32384: PUSH
32385: LD_VAR 0 5
32389: IN
32390: OR
32391: PUSH
32392: LD_INT 45
32394: PUSH
32395: LD_VAR 0 5
32399: IN
32400: OR
32401: AND
32402: IFFALSE 32656
// begin hex := GetHexInfo ( x , y ) ;
32404: LD_ADDR_VAR 0 4
32408: PUSH
32409: LD_VAR 0 10
32413: PPUSH
32414: LD_VAR 0 11
32418: PPUSH
32419: CALL_OW 546
32423: ST_TO_ADDR
// if hex [ 1 ] then
32424: LD_VAR 0 4
32428: PUSH
32429: LD_INT 1
32431: ARRAY
32432: IFFALSE 32436
// exit ;
32434: GO 32839
// height := hex [ 2 ] ;
32436: LD_ADDR_VAR 0 15
32440: PUSH
32441: LD_VAR 0 4
32445: PUSH
32446: LD_INT 2
32448: ARRAY
32449: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32450: LD_ADDR_VAR 0 14
32454: PUSH
32455: LD_INT 0
32457: PUSH
32458: LD_INT 2
32460: PUSH
32461: LD_INT 3
32463: PUSH
32464: LD_INT 5
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: ST_TO_ADDR
// for i in tmp do
32473: LD_ADDR_VAR 0 8
32477: PUSH
32478: LD_VAR 0 14
32482: PUSH
32483: FOR_IN
32484: IFFALSE 32654
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32486: LD_ADDR_VAR 0 9
32490: PUSH
32491: LD_VAR 0 10
32495: PPUSH
32496: LD_VAR 0 8
32500: PPUSH
32501: LD_INT 5
32503: PPUSH
32504: CALL_OW 272
32508: PUSH
32509: LD_VAR 0 11
32513: PPUSH
32514: LD_VAR 0 8
32518: PPUSH
32519: LD_INT 5
32521: PPUSH
32522: CALL_OW 273
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32531: LD_VAR 0 9
32535: PUSH
32536: LD_INT 1
32538: ARRAY
32539: PPUSH
32540: LD_VAR 0 9
32544: PUSH
32545: LD_INT 2
32547: ARRAY
32548: PPUSH
32549: CALL_OW 488
32553: IFFALSE 32652
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32555: LD_ADDR_VAR 0 4
32559: PUSH
32560: LD_VAR 0 9
32564: PUSH
32565: LD_INT 1
32567: ARRAY
32568: PPUSH
32569: LD_VAR 0 9
32573: PUSH
32574: LD_INT 2
32576: ARRAY
32577: PPUSH
32578: CALL_OW 546
32582: ST_TO_ADDR
// if hex [ 1 ] then
32583: LD_VAR 0 4
32587: PUSH
32588: LD_INT 1
32590: ARRAY
32591: IFFALSE 32595
// continue ;
32593: GO 32483
// h := hex [ 2 ] ;
32595: LD_ADDR_VAR 0 13
32599: PUSH
32600: LD_VAR 0 4
32604: PUSH
32605: LD_INT 2
32607: ARRAY
32608: ST_TO_ADDR
// if h + 7 < height then
32609: LD_VAR 0 13
32613: PUSH
32614: LD_INT 7
32616: PLUS
32617: PUSH
32618: LD_VAR 0 15
32622: LESS
32623: IFFALSE 32652
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32625: LD_ADDR_VAR 0 18
32629: PUSH
32630: LD_INT 7
32632: PUSH
32633: LD_INT 28
32635: PUSH
32636: LD_INT 45
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: LIST
32643: PUSH
32644: LD_VAR 0 12
32648: ARRAY
32649: ST_TO_ADDR
// break ;
32650: GO 32654
// end ; end ; end ;
32652: GO 32483
32654: POP
32655: POP
// end ; if not weapon then
32656: LD_VAR 0 18
32660: NOT
32661: IFFALSE 32721
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32663: LD_ADDR_VAR 0 5
32667: PUSH
32668: LD_VAR 0 5
32672: PUSH
32673: LD_INT 11
32675: PUSH
32676: LD_INT 30
32678: PUSH
32679: LD_INT 49
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: LIST
32686: DIFF
32687: ST_TO_ADDR
// if not list then
32688: LD_VAR 0 5
32692: NOT
32693: IFFALSE 32697
// exit ;
32695: GO 32839
// weapon := list [ rand ( 1 , list ) ] ;
32697: LD_ADDR_VAR 0 18
32701: PUSH
32702: LD_VAR 0 5
32706: PUSH
32707: LD_INT 1
32709: PPUSH
32710: LD_VAR 0 5
32714: PPUSH
32715: CALL_OW 12
32719: ARRAY
32720: ST_TO_ADDR
// end ; if weapon then
32721: LD_VAR 0 18
32725: IFFALSE 32839
// begin tmp := CostOfWeapon ( weapon ) ;
32727: LD_ADDR_VAR 0 14
32731: PUSH
32732: LD_VAR 0 18
32736: PPUSH
32737: CALL_OW 451
32741: ST_TO_ADDR
// j := GetBase ( tower ) ;
32742: LD_ADDR_VAR 0 9
32746: PUSH
32747: LD_VAR 0 1
32751: PPUSH
32752: CALL_OW 274
32756: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32757: LD_VAR 0 9
32761: PPUSH
32762: LD_INT 1
32764: PPUSH
32765: CALL_OW 275
32769: PUSH
32770: LD_VAR 0 14
32774: PUSH
32775: LD_INT 1
32777: ARRAY
32778: GREATEREQUAL
32779: PUSH
32780: LD_VAR 0 9
32784: PPUSH
32785: LD_INT 2
32787: PPUSH
32788: CALL_OW 275
32792: PUSH
32793: LD_VAR 0 14
32797: PUSH
32798: LD_INT 2
32800: ARRAY
32801: GREATEREQUAL
32802: AND
32803: PUSH
32804: LD_VAR 0 9
32808: PPUSH
32809: LD_INT 3
32811: PPUSH
32812: CALL_OW 275
32816: PUSH
32817: LD_VAR 0 14
32821: PUSH
32822: LD_INT 3
32824: ARRAY
32825: GREATEREQUAL
32826: AND
32827: IFFALSE 32839
// result := weapon ;
32829: LD_ADDR_VAR 0 3
32833: PUSH
32834: LD_VAR 0 18
32838: ST_TO_ADDR
// end ; end ;
32839: LD_VAR 0 3
32843: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32844: LD_INT 0
32846: PPUSH
32847: PPUSH
// result := true ;
32848: LD_ADDR_VAR 0 3
32852: PUSH
32853: LD_INT 1
32855: ST_TO_ADDR
// if array1 = array2 then
32856: LD_VAR 0 1
32860: PUSH
32861: LD_VAR 0 2
32865: EQUAL
32866: IFFALSE 32926
// begin for i = 1 to array1 do
32868: LD_ADDR_VAR 0 4
32872: PUSH
32873: DOUBLE
32874: LD_INT 1
32876: DEC
32877: ST_TO_ADDR
32878: LD_VAR 0 1
32882: PUSH
32883: FOR_TO
32884: IFFALSE 32922
// if array1 [ i ] <> array2 [ i ] then
32886: LD_VAR 0 1
32890: PUSH
32891: LD_VAR 0 4
32895: ARRAY
32896: PUSH
32897: LD_VAR 0 2
32901: PUSH
32902: LD_VAR 0 4
32906: ARRAY
32907: NONEQUAL
32908: IFFALSE 32920
// begin result := false ;
32910: LD_ADDR_VAR 0 3
32914: PUSH
32915: LD_INT 0
32917: ST_TO_ADDR
// break ;
32918: GO 32922
// end ;
32920: GO 32883
32922: POP
32923: POP
// end else
32924: GO 32934
// result := false ;
32926: LD_ADDR_VAR 0 3
32930: PUSH
32931: LD_INT 0
32933: ST_TO_ADDR
// end ;
32934: LD_VAR 0 3
32938: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32939: LD_INT 0
32941: PPUSH
32942: PPUSH
// if not array1 or not array2 then
32943: LD_VAR 0 1
32947: NOT
32948: PUSH
32949: LD_VAR 0 2
32953: NOT
32954: OR
32955: IFFALSE 32959
// exit ;
32957: GO 33023
// result := true ;
32959: LD_ADDR_VAR 0 3
32963: PUSH
32964: LD_INT 1
32966: ST_TO_ADDR
// for i = 1 to array1 do
32967: LD_ADDR_VAR 0 4
32971: PUSH
32972: DOUBLE
32973: LD_INT 1
32975: DEC
32976: ST_TO_ADDR
32977: LD_VAR 0 1
32981: PUSH
32982: FOR_TO
32983: IFFALSE 33021
// if array1 [ i ] <> array2 [ i ] then
32985: LD_VAR 0 1
32989: PUSH
32990: LD_VAR 0 4
32994: ARRAY
32995: PUSH
32996: LD_VAR 0 2
33000: PUSH
33001: LD_VAR 0 4
33005: ARRAY
33006: NONEQUAL
33007: IFFALSE 33019
// begin result := false ;
33009: LD_ADDR_VAR 0 3
33013: PUSH
33014: LD_INT 0
33016: ST_TO_ADDR
// break ;
33017: GO 33021
// end ;
33019: GO 32982
33021: POP
33022: POP
// end ;
33023: LD_VAR 0 3
33027: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33028: LD_INT 0
33030: PPUSH
33031: PPUSH
33032: PPUSH
// pom := GetBase ( fac ) ;
33033: LD_ADDR_VAR 0 5
33037: PUSH
33038: LD_VAR 0 1
33042: PPUSH
33043: CALL_OW 274
33047: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33048: LD_ADDR_VAR 0 4
33052: PUSH
33053: LD_VAR 0 2
33057: PUSH
33058: LD_INT 1
33060: ARRAY
33061: PPUSH
33062: LD_VAR 0 2
33066: PUSH
33067: LD_INT 2
33069: ARRAY
33070: PPUSH
33071: LD_VAR 0 2
33075: PUSH
33076: LD_INT 3
33078: ARRAY
33079: PPUSH
33080: LD_VAR 0 2
33084: PUSH
33085: LD_INT 4
33087: ARRAY
33088: PPUSH
33089: CALL_OW 449
33093: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33094: LD_ADDR_VAR 0 3
33098: PUSH
33099: LD_VAR 0 5
33103: PPUSH
33104: LD_INT 1
33106: PPUSH
33107: CALL_OW 275
33111: PUSH
33112: LD_VAR 0 4
33116: PUSH
33117: LD_INT 1
33119: ARRAY
33120: GREATEREQUAL
33121: PUSH
33122: LD_VAR 0 5
33126: PPUSH
33127: LD_INT 2
33129: PPUSH
33130: CALL_OW 275
33134: PUSH
33135: LD_VAR 0 4
33139: PUSH
33140: LD_INT 2
33142: ARRAY
33143: GREATEREQUAL
33144: AND
33145: PUSH
33146: LD_VAR 0 5
33150: PPUSH
33151: LD_INT 3
33153: PPUSH
33154: CALL_OW 275
33158: PUSH
33159: LD_VAR 0 4
33163: PUSH
33164: LD_INT 3
33166: ARRAY
33167: GREATEREQUAL
33168: AND
33169: ST_TO_ADDR
// end ;
33170: LD_VAR 0 3
33174: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33175: LD_INT 0
33177: PPUSH
33178: PPUSH
33179: PPUSH
33180: PPUSH
// pom := GetBase ( building ) ;
33181: LD_ADDR_VAR 0 3
33185: PUSH
33186: LD_VAR 0 1
33190: PPUSH
33191: CALL_OW 274
33195: ST_TO_ADDR
// if not pom then
33196: LD_VAR 0 3
33200: NOT
33201: IFFALSE 33205
// exit ;
33203: GO 33375
// btype := GetBType ( building ) ;
33205: LD_ADDR_VAR 0 5
33209: PUSH
33210: LD_VAR 0 1
33214: PPUSH
33215: CALL_OW 266
33219: ST_TO_ADDR
// if btype = b_armoury then
33220: LD_VAR 0 5
33224: PUSH
33225: LD_INT 4
33227: EQUAL
33228: IFFALSE 33238
// btype := b_barracks ;
33230: LD_ADDR_VAR 0 5
33234: PUSH
33235: LD_INT 5
33237: ST_TO_ADDR
// if btype = b_depot then
33238: LD_VAR 0 5
33242: PUSH
33243: LD_INT 0
33245: EQUAL
33246: IFFALSE 33256
// btype := b_warehouse ;
33248: LD_ADDR_VAR 0 5
33252: PUSH
33253: LD_INT 1
33255: ST_TO_ADDR
// if btype = b_workshop then
33256: LD_VAR 0 5
33260: PUSH
33261: LD_INT 2
33263: EQUAL
33264: IFFALSE 33274
// btype := b_factory ;
33266: LD_ADDR_VAR 0 5
33270: PUSH
33271: LD_INT 3
33273: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33274: LD_ADDR_VAR 0 4
33278: PUSH
33279: LD_VAR 0 5
33283: PPUSH
33284: LD_VAR 0 1
33288: PPUSH
33289: CALL_OW 248
33293: PPUSH
33294: CALL_OW 450
33298: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33299: LD_ADDR_VAR 0 2
33303: PUSH
33304: LD_VAR 0 3
33308: PPUSH
33309: LD_INT 1
33311: PPUSH
33312: CALL_OW 275
33316: PUSH
33317: LD_VAR 0 4
33321: PUSH
33322: LD_INT 1
33324: ARRAY
33325: GREATEREQUAL
33326: PUSH
33327: LD_VAR 0 3
33331: PPUSH
33332: LD_INT 2
33334: PPUSH
33335: CALL_OW 275
33339: PUSH
33340: LD_VAR 0 4
33344: PUSH
33345: LD_INT 2
33347: ARRAY
33348: GREATEREQUAL
33349: AND
33350: PUSH
33351: LD_VAR 0 3
33355: PPUSH
33356: LD_INT 3
33358: PPUSH
33359: CALL_OW 275
33363: PUSH
33364: LD_VAR 0 4
33368: PUSH
33369: LD_INT 3
33371: ARRAY
33372: GREATEREQUAL
33373: AND
33374: ST_TO_ADDR
// end ;
33375: LD_VAR 0 2
33379: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33380: LD_INT 0
33382: PPUSH
33383: PPUSH
33384: PPUSH
// pom := GetBase ( building ) ;
33385: LD_ADDR_VAR 0 4
33389: PUSH
33390: LD_VAR 0 1
33394: PPUSH
33395: CALL_OW 274
33399: ST_TO_ADDR
// if not pom then
33400: LD_VAR 0 4
33404: NOT
33405: IFFALSE 33409
// exit ;
33407: GO 33510
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33409: LD_ADDR_VAR 0 5
33413: PUSH
33414: LD_VAR 0 2
33418: PPUSH
33419: LD_VAR 0 1
33423: PPUSH
33424: CALL_OW 248
33428: PPUSH
33429: CALL_OW 450
33433: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33434: LD_ADDR_VAR 0 3
33438: PUSH
33439: LD_VAR 0 4
33443: PPUSH
33444: LD_INT 1
33446: PPUSH
33447: CALL_OW 275
33451: PUSH
33452: LD_VAR 0 5
33456: PUSH
33457: LD_INT 1
33459: ARRAY
33460: GREATEREQUAL
33461: PUSH
33462: LD_VAR 0 4
33466: PPUSH
33467: LD_INT 2
33469: PPUSH
33470: CALL_OW 275
33474: PUSH
33475: LD_VAR 0 5
33479: PUSH
33480: LD_INT 2
33482: ARRAY
33483: GREATEREQUAL
33484: AND
33485: PUSH
33486: LD_VAR 0 4
33490: PPUSH
33491: LD_INT 3
33493: PPUSH
33494: CALL_OW 275
33498: PUSH
33499: LD_VAR 0 5
33503: PUSH
33504: LD_INT 3
33506: ARRAY
33507: GREATEREQUAL
33508: AND
33509: ST_TO_ADDR
// end ;
33510: LD_VAR 0 3
33514: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33515: LD_INT 0
33517: PPUSH
33518: PPUSH
33519: PPUSH
33520: PPUSH
33521: PPUSH
33522: PPUSH
33523: PPUSH
33524: PPUSH
33525: PPUSH
33526: PPUSH
33527: PPUSH
// result := false ;
33528: LD_ADDR_VAR 0 8
33532: PUSH
33533: LD_INT 0
33535: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33536: LD_VAR 0 5
33540: NOT
33541: PUSH
33542: LD_VAR 0 1
33546: NOT
33547: OR
33548: PUSH
33549: LD_VAR 0 2
33553: NOT
33554: OR
33555: PUSH
33556: LD_VAR 0 3
33560: NOT
33561: OR
33562: IFFALSE 33566
// exit ;
33564: GO 34380
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33566: LD_ADDR_VAR 0 14
33570: PUSH
33571: LD_VAR 0 1
33575: PPUSH
33576: LD_VAR 0 2
33580: PPUSH
33581: LD_VAR 0 3
33585: PPUSH
33586: LD_VAR 0 4
33590: PPUSH
33591: LD_VAR 0 5
33595: PUSH
33596: LD_INT 1
33598: ARRAY
33599: PPUSH
33600: CALL_OW 248
33604: PPUSH
33605: LD_INT 0
33607: PPUSH
33608: CALL 35613 0 6
33612: ST_TO_ADDR
// if not hexes then
33613: LD_VAR 0 14
33617: NOT
33618: IFFALSE 33622
// exit ;
33620: GO 34380
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33622: LD_ADDR_VAR 0 17
33626: PUSH
33627: LD_VAR 0 5
33631: PPUSH
33632: LD_INT 22
33634: PUSH
33635: LD_VAR 0 13
33639: PPUSH
33640: CALL_OW 255
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 2
33651: PUSH
33652: LD_INT 30
33654: PUSH
33655: LD_INT 0
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 30
33664: PUSH
33665: LD_INT 1
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: LIST
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PPUSH
33681: CALL_OW 72
33685: ST_TO_ADDR
// for i = 1 to hexes do
33686: LD_ADDR_VAR 0 9
33690: PUSH
33691: DOUBLE
33692: LD_INT 1
33694: DEC
33695: ST_TO_ADDR
33696: LD_VAR 0 14
33700: PUSH
33701: FOR_TO
33702: IFFALSE 34378
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33704: LD_ADDR_VAR 0 13
33708: PUSH
33709: LD_VAR 0 14
33713: PUSH
33714: LD_VAR 0 9
33718: ARRAY
33719: PUSH
33720: LD_INT 1
33722: ARRAY
33723: PPUSH
33724: LD_VAR 0 14
33728: PUSH
33729: LD_VAR 0 9
33733: ARRAY
33734: PUSH
33735: LD_INT 2
33737: ARRAY
33738: PPUSH
33739: CALL_OW 428
33743: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33744: LD_VAR 0 14
33748: PUSH
33749: LD_VAR 0 9
33753: ARRAY
33754: PUSH
33755: LD_INT 1
33757: ARRAY
33758: PPUSH
33759: LD_VAR 0 14
33763: PUSH
33764: LD_VAR 0 9
33768: ARRAY
33769: PUSH
33770: LD_INT 2
33772: ARRAY
33773: PPUSH
33774: CALL_OW 351
33778: PUSH
33779: LD_VAR 0 14
33783: PUSH
33784: LD_VAR 0 9
33788: ARRAY
33789: PUSH
33790: LD_INT 1
33792: ARRAY
33793: PPUSH
33794: LD_VAR 0 14
33798: PUSH
33799: LD_VAR 0 9
33803: ARRAY
33804: PUSH
33805: LD_INT 2
33807: ARRAY
33808: PPUSH
33809: CALL_OW 488
33813: NOT
33814: OR
33815: PUSH
33816: LD_VAR 0 13
33820: PPUSH
33821: CALL_OW 247
33825: PUSH
33826: LD_INT 3
33828: EQUAL
33829: OR
33830: IFFALSE 33836
// exit ;
33832: POP
33833: POP
33834: GO 34380
// if not tmp then
33836: LD_VAR 0 13
33840: NOT
33841: IFFALSE 33845
// continue ;
33843: GO 33701
// result := true ;
33845: LD_ADDR_VAR 0 8
33849: PUSH
33850: LD_INT 1
33852: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33853: LD_VAR 0 6
33857: PUSH
33858: LD_VAR 0 13
33862: PPUSH
33863: CALL_OW 247
33867: PUSH
33868: LD_INT 2
33870: EQUAL
33871: AND
33872: PUSH
33873: LD_VAR 0 13
33877: PPUSH
33878: CALL_OW 263
33882: PUSH
33883: LD_INT 1
33885: EQUAL
33886: AND
33887: IFFALSE 34051
// begin if IsDrivenBy ( tmp ) then
33889: LD_VAR 0 13
33893: PPUSH
33894: CALL_OW 311
33898: IFFALSE 33902
// continue ;
33900: GO 33701
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33902: LD_VAR 0 6
33906: PPUSH
33907: LD_INT 3
33909: PUSH
33910: LD_INT 60
33912: PUSH
33913: EMPTY
33914: LIST
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 3
33922: PUSH
33923: LD_INT 55
33925: PUSH
33926: EMPTY
33927: LIST
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PPUSH
33937: CALL_OW 72
33941: IFFALSE 34049
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33943: LD_ADDR_VAR 0 18
33947: PUSH
33948: LD_VAR 0 6
33952: PPUSH
33953: LD_INT 3
33955: PUSH
33956: LD_INT 60
33958: PUSH
33959: EMPTY
33960: LIST
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 3
33968: PUSH
33969: LD_INT 55
33971: PUSH
33972: EMPTY
33973: LIST
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PPUSH
33983: CALL_OW 72
33987: PUSH
33988: LD_INT 1
33990: ARRAY
33991: ST_TO_ADDR
// if IsInUnit ( driver ) then
33992: LD_VAR 0 18
33996: PPUSH
33997: CALL_OW 310
34001: IFFALSE 34012
// ComExit ( driver ) ;
34003: LD_VAR 0 18
34007: PPUSH
34008: CALL 59374 0 1
// AddComEnterUnit ( driver , tmp ) ;
34012: LD_VAR 0 18
34016: PPUSH
34017: LD_VAR 0 13
34021: PPUSH
34022: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34026: LD_VAR 0 18
34030: PPUSH
34031: LD_VAR 0 7
34035: PPUSH
34036: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34040: LD_VAR 0 18
34044: PPUSH
34045: CALL_OW 181
// end ; continue ;
34049: GO 33701
// end ; if not cleaners or not tmp in cleaners then
34051: LD_VAR 0 6
34055: NOT
34056: PUSH
34057: LD_VAR 0 13
34061: PUSH
34062: LD_VAR 0 6
34066: IN
34067: NOT
34068: OR
34069: IFFALSE 34376
// begin if dep then
34071: LD_VAR 0 17
34075: IFFALSE 34211
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34077: LD_ADDR_VAR 0 16
34081: PUSH
34082: LD_VAR 0 17
34086: PUSH
34087: LD_INT 1
34089: ARRAY
34090: PPUSH
34091: CALL_OW 250
34095: PPUSH
34096: LD_VAR 0 17
34100: PUSH
34101: LD_INT 1
34103: ARRAY
34104: PPUSH
34105: CALL_OW 254
34109: PPUSH
34110: LD_INT 5
34112: PPUSH
34113: CALL_OW 272
34117: PUSH
34118: LD_VAR 0 17
34122: PUSH
34123: LD_INT 1
34125: ARRAY
34126: PPUSH
34127: CALL_OW 251
34131: PPUSH
34132: LD_VAR 0 17
34136: PUSH
34137: LD_INT 1
34139: ARRAY
34140: PPUSH
34141: CALL_OW 254
34145: PPUSH
34146: LD_INT 5
34148: PPUSH
34149: CALL_OW 273
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34158: LD_VAR 0 16
34162: PUSH
34163: LD_INT 1
34165: ARRAY
34166: PPUSH
34167: LD_VAR 0 16
34171: PUSH
34172: LD_INT 2
34174: ARRAY
34175: PPUSH
34176: CALL_OW 488
34180: IFFALSE 34211
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34182: LD_VAR 0 13
34186: PPUSH
34187: LD_VAR 0 16
34191: PUSH
34192: LD_INT 1
34194: ARRAY
34195: PPUSH
34196: LD_VAR 0 16
34200: PUSH
34201: LD_INT 2
34203: ARRAY
34204: PPUSH
34205: CALL_OW 111
// continue ;
34209: GO 33701
// end ; end ; r := GetDir ( tmp ) ;
34211: LD_ADDR_VAR 0 15
34215: PUSH
34216: LD_VAR 0 13
34220: PPUSH
34221: CALL_OW 254
34225: ST_TO_ADDR
// if r = 5 then
34226: LD_VAR 0 15
34230: PUSH
34231: LD_INT 5
34233: EQUAL
34234: IFFALSE 34244
// r := 0 ;
34236: LD_ADDR_VAR 0 15
34240: PUSH
34241: LD_INT 0
34243: ST_TO_ADDR
// for j = r to 5 do
34244: LD_ADDR_VAR 0 10
34248: PUSH
34249: DOUBLE
34250: LD_VAR 0 15
34254: DEC
34255: ST_TO_ADDR
34256: LD_INT 5
34258: PUSH
34259: FOR_TO
34260: IFFALSE 34374
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34262: LD_ADDR_VAR 0 11
34266: PUSH
34267: LD_VAR 0 13
34271: PPUSH
34272: CALL_OW 250
34276: PPUSH
34277: LD_VAR 0 10
34281: PPUSH
34282: LD_INT 2
34284: PPUSH
34285: CALL_OW 272
34289: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34290: LD_ADDR_VAR 0 12
34294: PUSH
34295: LD_VAR 0 13
34299: PPUSH
34300: CALL_OW 251
34304: PPUSH
34305: LD_VAR 0 10
34309: PPUSH
34310: LD_INT 2
34312: PPUSH
34313: CALL_OW 273
34317: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34318: LD_VAR 0 11
34322: PPUSH
34323: LD_VAR 0 12
34327: PPUSH
34328: CALL_OW 488
34332: PUSH
34333: LD_VAR 0 11
34337: PPUSH
34338: LD_VAR 0 12
34342: PPUSH
34343: CALL_OW 428
34347: NOT
34348: AND
34349: IFFALSE 34372
// begin ComMoveXY ( tmp , _x , _y ) ;
34351: LD_VAR 0 13
34355: PPUSH
34356: LD_VAR 0 11
34360: PPUSH
34361: LD_VAR 0 12
34365: PPUSH
34366: CALL_OW 111
// break ;
34370: GO 34374
// end ; end ;
34372: GO 34259
34374: POP
34375: POP
// end ; end ;
34376: GO 33701
34378: POP
34379: POP
// end ;
34380: LD_VAR 0 8
34384: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34385: LD_INT 0
34387: PPUSH
// result := true ;
34388: LD_ADDR_VAR 0 3
34392: PUSH
34393: LD_INT 1
34395: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34396: LD_VAR 0 2
34400: PUSH
34401: LD_INT 24
34403: DOUBLE
34404: EQUAL
34405: IFTRUE 34415
34407: LD_INT 33
34409: DOUBLE
34410: EQUAL
34411: IFTRUE 34415
34413: GO 34440
34415: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34416: LD_ADDR_VAR 0 3
34420: PUSH
34421: LD_INT 32
34423: PPUSH
34424: LD_VAR 0 1
34428: PPUSH
34429: CALL_OW 321
34433: PUSH
34434: LD_INT 2
34436: EQUAL
34437: ST_TO_ADDR
34438: GO 34756
34440: LD_INT 20
34442: DOUBLE
34443: EQUAL
34444: IFTRUE 34448
34446: GO 34473
34448: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34449: LD_ADDR_VAR 0 3
34453: PUSH
34454: LD_INT 6
34456: PPUSH
34457: LD_VAR 0 1
34461: PPUSH
34462: CALL_OW 321
34466: PUSH
34467: LD_INT 2
34469: EQUAL
34470: ST_TO_ADDR
34471: GO 34756
34473: LD_INT 22
34475: DOUBLE
34476: EQUAL
34477: IFTRUE 34487
34479: LD_INT 36
34481: DOUBLE
34482: EQUAL
34483: IFTRUE 34487
34485: GO 34512
34487: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34488: LD_ADDR_VAR 0 3
34492: PUSH
34493: LD_INT 15
34495: PPUSH
34496: LD_VAR 0 1
34500: PPUSH
34501: CALL_OW 321
34505: PUSH
34506: LD_INT 2
34508: EQUAL
34509: ST_TO_ADDR
34510: GO 34756
34512: LD_INT 30
34514: DOUBLE
34515: EQUAL
34516: IFTRUE 34520
34518: GO 34545
34520: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34521: LD_ADDR_VAR 0 3
34525: PUSH
34526: LD_INT 20
34528: PPUSH
34529: LD_VAR 0 1
34533: PPUSH
34534: CALL_OW 321
34538: PUSH
34539: LD_INT 2
34541: EQUAL
34542: ST_TO_ADDR
34543: GO 34756
34545: LD_INT 28
34547: DOUBLE
34548: EQUAL
34549: IFTRUE 34559
34551: LD_INT 21
34553: DOUBLE
34554: EQUAL
34555: IFTRUE 34559
34557: GO 34584
34559: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34560: LD_ADDR_VAR 0 3
34564: PUSH
34565: LD_INT 21
34567: PPUSH
34568: LD_VAR 0 1
34572: PPUSH
34573: CALL_OW 321
34577: PUSH
34578: LD_INT 2
34580: EQUAL
34581: ST_TO_ADDR
34582: GO 34756
34584: LD_INT 16
34586: DOUBLE
34587: EQUAL
34588: IFTRUE 34592
34590: GO 34617
34592: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34593: LD_ADDR_VAR 0 3
34597: PUSH
34598: LD_INT 84
34600: PPUSH
34601: LD_VAR 0 1
34605: PPUSH
34606: CALL_OW 321
34610: PUSH
34611: LD_INT 2
34613: EQUAL
34614: ST_TO_ADDR
34615: GO 34756
34617: LD_INT 19
34619: DOUBLE
34620: EQUAL
34621: IFTRUE 34631
34623: LD_INT 23
34625: DOUBLE
34626: EQUAL
34627: IFTRUE 34631
34629: GO 34656
34631: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34632: LD_ADDR_VAR 0 3
34636: PUSH
34637: LD_INT 83
34639: PPUSH
34640: LD_VAR 0 1
34644: PPUSH
34645: CALL_OW 321
34649: PUSH
34650: LD_INT 2
34652: EQUAL
34653: ST_TO_ADDR
34654: GO 34756
34656: LD_INT 17
34658: DOUBLE
34659: EQUAL
34660: IFTRUE 34664
34662: GO 34689
34664: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34665: LD_ADDR_VAR 0 3
34669: PUSH
34670: LD_INT 39
34672: PPUSH
34673: LD_VAR 0 1
34677: PPUSH
34678: CALL_OW 321
34682: PUSH
34683: LD_INT 2
34685: EQUAL
34686: ST_TO_ADDR
34687: GO 34756
34689: LD_INT 18
34691: DOUBLE
34692: EQUAL
34693: IFTRUE 34697
34695: GO 34722
34697: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34698: LD_ADDR_VAR 0 3
34702: PUSH
34703: LD_INT 40
34705: PPUSH
34706: LD_VAR 0 1
34710: PPUSH
34711: CALL_OW 321
34715: PUSH
34716: LD_INT 2
34718: EQUAL
34719: ST_TO_ADDR
34720: GO 34756
34722: LD_INT 27
34724: DOUBLE
34725: EQUAL
34726: IFTRUE 34730
34728: GO 34755
34730: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34731: LD_ADDR_VAR 0 3
34735: PUSH
34736: LD_INT 35
34738: PPUSH
34739: LD_VAR 0 1
34743: PPUSH
34744: CALL_OW 321
34748: PUSH
34749: LD_INT 2
34751: EQUAL
34752: ST_TO_ADDR
34753: GO 34756
34755: POP
// end ;
34756: LD_VAR 0 3
34760: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34761: LD_INT 0
34763: PPUSH
34764: PPUSH
34765: PPUSH
34766: PPUSH
34767: PPUSH
34768: PPUSH
34769: PPUSH
34770: PPUSH
34771: PPUSH
34772: PPUSH
34773: PPUSH
// result := false ;
34774: LD_ADDR_VAR 0 6
34778: PUSH
34779: LD_INT 0
34781: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34782: LD_VAR 0 1
34786: NOT
34787: PUSH
34788: LD_VAR 0 1
34792: PPUSH
34793: CALL_OW 266
34797: PUSH
34798: LD_INT 0
34800: PUSH
34801: LD_INT 1
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: IN
34808: NOT
34809: OR
34810: PUSH
34811: LD_VAR 0 2
34815: NOT
34816: OR
34817: PUSH
34818: LD_VAR 0 5
34822: PUSH
34823: LD_INT 0
34825: PUSH
34826: LD_INT 1
34828: PUSH
34829: LD_INT 2
34831: PUSH
34832: LD_INT 3
34834: PUSH
34835: LD_INT 4
34837: PUSH
34838: LD_INT 5
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: IN
34849: NOT
34850: OR
34851: PUSH
34852: LD_VAR 0 3
34856: PPUSH
34857: LD_VAR 0 4
34861: PPUSH
34862: CALL_OW 488
34866: NOT
34867: OR
34868: IFFALSE 34872
// exit ;
34870: GO 35608
// side := GetSide ( depot ) ;
34872: LD_ADDR_VAR 0 9
34876: PUSH
34877: LD_VAR 0 1
34881: PPUSH
34882: CALL_OW 255
34886: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
34887: LD_VAR 0 9
34891: PPUSH
34892: LD_VAR 0 2
34896: PPUSH
34897: CALL 34385 0 2
34901: NOT
34902: IFFALSE 34906
// exit ;
34904: GO 35608
// pom := GetBase ( depot ) ;
34906: LD_ADDR_VAR 0 10
34910: PUSH
34911: LD_VAR 0 1
34915: PPUSH
34916: CALL_OW 274
34920: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34921: LD_ADDR_VAR 0 11
34925: PUSH
34926: LD_VAR 0 2
34930: PPUSH
34931: LD_VAR 0 1
34935: PPUSH
34936: CALL_OW 248
34940: PPUSH
34941: CALL_OW 450
34945: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34946: LD_VAR 0 10
34950: PPUSH
34951: LD_INT 1
34953: PPUSH
34954: CALL_OW 275
34958: PUSH
34959: LD_VAR 0 11
34963: PUSH
34964: LD_INT 1
34966: ARRAY
34967: GREATEREQUAL
34968: PUSH
34969: LD_VAR 0 10
34973: PPUSH
34974: LD_INT 2
34976: PPUSH
34977: CALL_OW 275
34981: PUSH
34982: LD_VAR 0 11
34986: PUSH
34987: LD_INT 2
34989: ARRAY
34990: GREATEREQUAL
34991: AND
34992: PUSH
34993: LD_VAR 0 10
34997: PPUSH
34998: LD_INT 3
35000: PPUSH
35001: CALL_OW 275
35005: PUSH
35006: LD_VAR 0 11
35010: PUSH
35011: LD_INT 3
35013: ARRAY
35014: GREATEREQUAL
35015: AND
35016: NOT
35017: IFFALSE 35021
// exit ;
35019: GO 35608
// if GetBType ( depot ) = b_depot then
35021: LD_VAR 0 1
35025: PPUSH
35026: CALL_OW 266
35030: PUSH
35031: LD_INT 0
35033: EQUAL
35034: IFFALSE 35046
// dist := 28 else
35036: LD_ADDR_VAR 0 14
35040: PUSH
35041: LD_INT 28
35043: ST_TO_ADDR
35044: GO 35054
// dist := 36 ;
35046: LD_ADDR_VAR 0 14
35050: PUSH
35051: LD_INT 36
35053: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35054: LD_VAR 0 1
35058: PPUSH
35059: LD_VAR 0 3
35063: PPUSH
35064: LD_VAR 0 4
35068: PPUSH
35069: CALL_OW 297
35073: PUSH
35074: LD_VAR 0 14
35078: GREATER
35079: IFFALSE 35083
// exit ;
35081: GO 35608
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35083: LD_ADDR_VAR 0 12
35087: PUSH
35088: LD_VAR 0 2
35092: PPUSH
35093: LD_VAR 0 3
35097: PPUSH
35098: LD_VAR 0 4
35102: PPUSH
35103: LD_VAR 0 5
35107: PPUSH
35108: LD_VAR 0 1
35112: PPUSH
35113: CALL_OW 248
35117: PPUSH
35118: LD_INT 0
35120: PPUSH
35121: CALL 35613 0 6
35125: ST_TO_ADDR
// if not hexes then
35126: LD_VAR 0 12
35130: NOT
35131: IFFALSE 35135
// exit ;
35133: GO 35608
// hex := GetHexInfo ( x , y ) ;
35135: LD_ADDR_VAR 0 15
35139: PUSH
35140: LD_VAR 0 3
35144: PPUSH
35145: LD_VAR 0 4
35149: PPUSH
35150: CALL_OW 546
35154: ST_TO_ADDR
// if hex [ 1 ] then
35155: LD_VAR 0 15
35159: PUSH
35160: LD_INT 1
35162: ARRAY
35163: IFFALSE 35167
// exit ;
35165: GO 35608
// height := hex [ 2 ] ;
35167: LD_ADDR_VAR 0 13
35171: PUSH
35172: LD_VAR 0 15
35176: PUSH
35177: LD_INT 2
35179: ARRAY
35180: ST_TO_ADDR
// for i = 1 to hexes do
35181: LD_ADDR_VAR 0 7
35185: PUSH
35186: DOUBLE
35187: LD_INT 1
35189: DEC
35190: ST_TO_ADDR
35191: LD_VAR 0 12
35195: PUSH
35196: FOR_TO
35197: IFFALSE 35527
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35199: LD_VAR 0 12
35203: PUSH
35204: LD_VAR 0 7
35208: ARRAY
35209: PUSH
35210: LD_INT 1
35212: ARRAY
35213: PPUSH
35214: LD_VAR 0 12
35218: PUSH
35219: LD_VAR 0 7
35223: ARRAY
35224: PUSH
35225: LD_INT 2
35227: ARRAY
35228: PPUSH
35229: CALL_OW 488
35233: NOT
35234: PUSH
35235: LD_VAR 0 12
35239: PUSH
35240: LD_VAR 0 7
35244: ARRAY
35245: PUSH
35246: LD_INT 1
35248: ARRAY
35249: PPUSH
35250: LD_VAR 0 12
35254: PUSH
35255: LD_VAR 0 7
35259: ARRAY
35260: PUSH
35261: LD_INT 2
35263: ARRAY
35264: PPUSH
35265: CALL_OW 428
35269: PUSH
35270: LD_INT 0
35272: GREATER
35273: OR
35274: PUSH
35275: LD_VAR 0 12
35279: PUSH
35280: LD_VAR 0 7
35284: ARRAY
35285: PUSH
35286: LD_INT 1
35288: ARRAY
35289: PPUSH
35290: LD_VAR 0 12
35294: PUSH
35295: LD_VAR 0 7
35299: ARRAY
35300: PUSH
35301: LD_INT 2
35303: ARRAY
35304: PPUSH
35305: CALL_OW 351
35309: OR
35310: IFFALSE 35316
// exit ;
35312: POP
35313: POP
35314: GO 35608
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35316: LD_ADDR_VAR 0 8
35320: PUSH
35321: LD_VAR 0 12
35325: PUSH
35326: LD_VAR 0 7
35330: ARRAY
35331: PUSH
35332: LD_INT 1
35334: ARRAY
35335: PPUSH
35336: LD_VAR 0 12
35340: PUSH
35341: LD_VAR 0 7
35345: ARRAY
35346: PUSH
35347: LD_INT 2
35349: ARRAY
35350: PPUSH
35351: CALL_OW 546
35355: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35356: LD_VAR 0 8
35360: PUSH
35361: LD_INT 1
35363: ARRAY
35364: PUSH
35365: LD_VAR 0 8
35369: PUSH
35370: LD_INT 2
35372: ARRAY
35373: PUSH
35374: LD_VAR 0 13
35378: PUSH
35379: LD_INT 2
35381: PLUS
35382: GREATER
35383: OR
35384: PUSH
35385: LD_VAR 0 8
35389: PUSH
35390: LD_INT 2
35392: ARRAY
35393: PUSH
35394: LD_VAR 0 13
35398: PUSH
35399: LD_INT 2
35401: MINUS
35402: LESS
35403: OR
35404: PUSH
35405: LD_VAR 0 8
35409: PUSH
35410: LD_INT 3
35412: ARRAY
35413: PUSH
35414: LD_INT 0
35416: PUSH
35417: LD_INT 8
35419: PUSH
35420: LD_INT 9
35422: PUSH
35423: LD_INT 10
35425: PUSH
35426: LD_INT 11
35428: PUSH
35429: LD_INT 12
35431: PUSH
35432: LD_INT 13
35434: PUSH
35435: LD_INT 16
35437: PUSH
35438: LD_INT 17
35440: PUSH
35441: LD_INT 18
35443: PUSH
35444: LD_INT 19
35446: PUSH
35447: LD_INT 20
35449: PUSH
35450: LD_INT 21
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: IN
35468: NOT
35469: OR
35470: PUSH
35471: LD_VAR 0 8
35475: PUSH
35476: LD_INT 5
35478: ARRAY
35479: NOT
35480: OR
35481: PUSH
35482: LD_VAR 0 8
35486: PUSH
35487: LD_INT 6
35489: ARRAY
35490: PUSH
35491: LD_INT 1
35493: PUSH
35494: LD_INT 2
35496: PUSH
35497: LD_INT 7
35499: PUSH
35500: LD_INT 9
35502: PUSH
35503: LD_INT 10
35505: PUSH
35506: LD_INT 11
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: IN
35517: NOT
35518: OR
35519: IFFALSE 35525
// exit ;
35521: POP
35522: POP
35523: GO 35608
// end ;
35525: GO 35196
35527: POP
35528: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35529: LD_VAR 0 9
35533: PPUSH
35534: LD_VAR 0 3
35538: PPUSH
35539: LD_VAR 0 4
35543: PPUSH
35544: LD_INT 20
35546: PPUSH
35547: CALL 27560 0 4
35551: PUSH
35552: LD_INT 4
35554: ARRAY
35555: IFFALSE 35559
// exit ;
35557: GO 35608
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35559: LD_VAR 0 2
35563: PUSH
35564: LD_INT 29
35566: PUSH
35567: LD_INT 30
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: IN
35574: PUSH
35575: LD_VAR 0 3
35579: PPUSH
35580: LD_VAR 0 4
35584: PPUSH
35585: LD_VAR 0 9
35589: PPUSH
35590: CALL_OW 440
35594: NOT
35595: AND
35596: IFFALSE 35600
// exit ;
35598: GO 35608
// result := true ;
35600: LD_ADDR_VAR 0 6
35604: PUSH
35605: LD_INT 1
35607: ST_TO_ADDR
// end ;
35608: LD_VAR 0 6
35612: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35613: LD_INT 0
35615: PPUSH
35616: PPUSH
35617: PPUSH
35618: PPUSH
35619: PPUSH
35620: PPUSH
35621: PPUSH
35622: PPUSH
35623: PPUSH
35624: PPUSH
35625: PPUSH
35626: PPUSH
35627: PPUSH
35628: PPUSH
35629: PPUSH
35630: PPUSH
35631: PPUSH
35632: PPUSH
35633: PPUSH
35634: PPUSH
35635: PPUSH
35636: PPUSH
35637: PPUSH
35638: PPUSH
35639: PPUSH
35640: PPUSH
35641: PPUSH
35642: PPUSH
35643: PPUSH
35644: PPUSH
35645: PPUSH
35646: PPUSH
35647: PPUSH
35648: PPUSH
35649: PPUSH
35650: PPUSH
35651: PPUSH
35652: PPUSH
35653: PPUSH
35654: PPUSH
35655: PPUSH
35656: PPUSH
35657: PPUSH
35658: PPUSH
35659: PPUSH
35660: PPUSH
35661: PPUSH
35662: PPUSH
35663: PPUSH
35664: PPUSH
35665: PPUSH
35666: PPUSH
35667: PPUSH
35668: PPUSH
35669: PPUSH
35670: PPUSH
35671: PPUSH
35672: PPUSH
// result = [ ] ;
35673: LD_ADDR_VAR 0 7
35677: PUSH
35678: EMPTY
35679: ST_TO_ADDR
// temp_list = [ ] ;
35680: LD_ADDR_VAR 0 9
35684: PUSH
35685: EMPTY
35686: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35687: LD_VAR 0 4
35691: PUSH
35692: LD_INT 0
35694: PUSH
35695: LD_INT 1
35697: PUSH
35698: LD_INT 2
35700: PUSH
35701: LD_INT 3
35703: PUSH
35704: LD_INT 4
35706: PUSH
35707: LD_INT 5
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: IN
35718: NOT
35719: PUSH
35720: LD_VAR 0 1
35724: PUSH
35725: LD_INT 0
35727: PUSH
35728: LD_INT 1
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: IN
35735: PUSH
35736: LD_VAR 0 5
35740: PUSH
35741: LD_INT 1
35743: PUSH
35744: LD_INT 2
35746: PUSH
35747: LD_INT 3
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: LIST
35754: IN
35755: NOT
35756: AND
35757: OR
35758: IFFALSE 35762
// exit ;
35760: GO 54153
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35762: LD_VAR 0 1
35766: PUSH
35767: LD_INT 6
35769: PUSH
35770: LD_INT 7
35772: PUSH
35773: LD_INT 8
35775: PUSH
35776: LD_INT 13
35778: PUSH
35779: LD_INT 12
35781: PUSH
35782: LD_INT 15
35784: PUSH
35785: LD_INT 11
35787: PUSH
35788: LD_INT 14
35790: PUSH
35791: LD_INT 10
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: IN
35805: IFFALSE 35815
// btype = b_lab ;
35807: LD_ADDR_VAR 0 1
35811: PUSH
35812: LD_INT 6
35814: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35815: LD_VAR 0 6
35819: PUSH
35820: LD_INT 0
35822: PUSH
35823: LD_INT 1
35825: PUSH
35826: LD_INT 2
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: LIST
35833: IN
35834: NOT
35835: PUSH
35836: LD_VAR 0 1
35840: PUSH
35841: LD_INT 0
35843: PUSH
35844: LD_INT 1
35846: PUSH
35847: LD_INT 2
35849: PUSH
35850: LD_INT 3
35852: PUSH
35853: LD_INT 6
35855: PUSH
35856: LD_INT 36
35858: PUSH
35859: LD_INT 4
35861: PUSH
35862: LD_INT 5
35864: PUSH
35865: LD_INT 31
35867: PUSH
35868: LD_INT 32
35870: PUSH
35871: LD_INT 33
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: IN
35887: NOT
35888: PUSH
35889: LD_VAR 0 6
35893: PUSH
35894: LD_INT 1
35896: EQUAL
35897: AND
35898: OR
35899: PUSH
35900: LD_VAR 0 1
35904: PUSH
35905: LD_INT 2
35907: PUSH
35908: LD_INT 3
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: IN
35915: NOT
35916: PUSH
35917: LD_VAR 0 6
35921: PUSH
35922: LD_INT 2
35924: EQUAL
35925: AND
35926: OR
35927: IFFALSE 35937
// mode = 0 ;
35929: LD_ADDR_VAR 0 6
35933: PUSH
35934: LD_INT 0
35936: ST_TO_ADDR
// case mode of 0 :
35937: LD_VAR 0 6
35941: PUSH
35942: LD_INT 0
35944: DOUBLE
35945: EQUAL
35946: IFTRUE 35950
35948: GO 47403
35950: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35951: LD_ADDR_VAR 0 11
35955: PUSH
35956: LD_INT 0
35958: PUSH
35959: LD_INT 0
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 0
35968: PUSH
35969: LD_INT 1
35971: NEG
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 1
35979: PUSH
35980: LD_INT 0
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 1
35989: PUSH
35990: LD_INT 1
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 0
35999: PUSH
36000: LD_INT 1
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 1
36009: NEG
36010: PUSH
36011: LD_INT 0
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 1
36020: NEG
36021: PUSH
36022: LD_INT 1
36024: NEG
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: LD_INT 1
36032: NEG
36033: PUSH
36034: LD_INT 2
36036: NEG
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 0
36044: PUSH
36045: LD_INT 2
36047: NEG
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: LD_INT 1
36055: PUSH
36056: LD_INT 1
36058: NEG
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 1
36066: PUSH
36067: LD_INT 2
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PUSH
36074: LD_INT 0
36076: PUSH
36077: LD_INT 2
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 1
36086: NEG
36087: PUSH
36088: LD_INT 1
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 1
36097: PUSH
36098: LD_INT 3
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 0
36107: PUSH
36108: LD_INT 3
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 1
36117: NEG
36118: PUSH
36119: LD_INT 2
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36144: LD_ADDR_VAR 0 12
36148: PUSH
36149: LD_INT 0
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 0
36161: PUSH
36162: LD_INT 1
36164: NEG
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 1
36172: PUSH
36173: LD_INT 0
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 1
36182: PUSH
36183: LD_INT 1
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 0
36192: PUSH
36193: LD_INT 1
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: PUSH
36200: LD_INT 1
36202: NEG
36203: PUSH
36204: LD_INT 0
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 1
36213: NEG
36214: PUSH
36215: LD_INT 1
36217: NEG
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 1
36225: PUSH
36226: LD_INT 1
36228: NEG
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 2
36236: PUSH
36237: LD_INT 0
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 2
36246: PUSH
36247: LD_INT 1
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 1
36256: NEG
36257: PUSH
36258: LD_INT 1
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 2
36267: NEG
36268: PUSH
36269: LD_INT 0
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 2
36278: NEG
36279: PUSH
36280: LD_INT 1
36282: NEG
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 2
36290: NEG
36291: PUSH
36292: LD_INT 1
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 3
36301: NEG
36302: PUSH
36303: LD_INT 0
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 3
36312: NEG
36313: PUSH
36314: LD_INT 1
36316: NEG
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36340: LD_ADDR_VAR 0 13
36344: PUSH
36345: LD_INT 0
36347: PUSH
36348: LD_INT 0
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: LD_INT 1
36360: NEG
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 1
36368: PUSH
36369: LD_INT 0
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 1
36378: PUSH
36379: LD_INT 1
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 0
36388: PUSH
36389: LD_INT 1
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 1
36398: NEG
36399: PUSH
36400: LD_INT 0
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 1
36409: NEG
36410: PUSH
36411: LD_INT 1
36413: NEG
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 1
36421: NEG
36422: PUSH
36423: LD_INT 2
36425: NEG
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 2
36433: PUSH
36434: LD_INT 1
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 2
36443: PUSH
36444: LD_INT 2
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 1
36453: PUSH
36454: LD_INT 2
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 2
36463: NEG
36464: PUSH
36465: LD_INT 1
36467: NEG
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 2
36475: NEG
36476: PUSH
36477: LD_INT 2
36479: NEG
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 2
36487: NEG
36488: PUSH
36489: LD_INT 3
36491: NEG
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 3
36499: NEG
36500: PUSH
36501: LD_INT 2
36503: NEG
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 3
36511: NEG
36512: PUSH
36513: LD_INT 3
36515: NEG
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36539: LD_ADDR_VAR 0 14
36543: PUSH
36544: LD_INT 0
36546: PUSH
36547: LD_INT 0
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 0
36556: PUSH
36557: LD_INT 1
36559: NEG
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 1
36567: PUSH
36568: LD_INT 0
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 1
36577: PUSH
36578: LD_INT 1
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 0
36587: PUSH
36588: LD_INT 1
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 1
36597: NEG
36598: PUSH
36599: LD_INT 0
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 1
36608: NEG
36609: PUSH
36610: LD_INT 1
36612: NEG
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 1
36620: NEG
36621: PUSH
36622: LD_INT 2
36624: NEG
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 0
36632: PUSH
36633: LD_INT 2
36635: NEG
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 1
36643: PUSH
36644: LD_INT 1
36646: NEG
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 1
36654: PUSH
36655: LD_INT 2
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 0
36664: PUSH
36665: LD_INT 2
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 1
36674: NEG
36675: PUSH
36676: LD_INT 1
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 1
36685: NEG
36686: PUSH
36687: LD_INT 3
36689: NEG
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 0
36697: PUSH
36698: LD_INT 3
36700: NEG
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 1
36708: PUSH
36709: LD_INT 2
36711: NEG
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36735: LD_ADDR_VAR 0 15
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: LD_INT 0
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 0
36752: PUSH
36753: LD_INT 1
36755: NEG
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 1
36763: PUSH
36764: LD_INT 0
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 1
36773: PUSH
36774: LD_INT 1
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 0
36783: PUSH
36784: LD_INT 1
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 1
36793: NEG
36794: PUSH
36795: LD_INT 0
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 1
36804: NEG
36805: PUSH
36806: LD_INT 1
36808: NEG
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 1
36816: PUSH
36817: LD_INT 1
36819: NEG
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 2
36827: PUSH
36828: LD_INT 0
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 2
36837: PUSH
36838: LD_INT 1
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 1
36847: NEG
36848: PUSH
36849: LD_INT 1
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 2
36858: NEG
36859: PUSH
36860: LD_INT 0
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: LD_INT 2
36869: NEG
36870: PUSH
36871: LD_INT 1
36873: NEG
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 2
36881: PUSH
36882: LD_INT 1
36884: NEG
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 3
36892: PUSH
36893: LD_INT 0
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 3
36902: PUSH
36903: LD_INT 1
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36928: LD_ADDR_VAR 0 16
36932: PUSH
36933: LD_INT 0
36935: PUSH
36936: LD_INT 0
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 0
36945: PUSH
36946: LD_INT 1
36948: NEG
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 1
36956: PUSH
36957: LD_INT 0
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 1
36966: PUSH
36967: LD_INT 1
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: LD_INT 0
36976: PUSH
36977: LD_INT 1
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 1
36986: NEG
36987: PUSH
36988: LD_INT 0
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 1
36997: NEG
36998: PUSH
36999: LD_INT 1
37001: NEG
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 1
37009: NEG
37010: PUSH
37011: LD_INT 2
37013: NEG
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 2
37021: PUSH
37022: LD_INT 1
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 2
37031: PUSH
37032: LD_INT 2
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 1
37041: PUSH
37042: LD_INT 2
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 2
37051: NEG
37052: PUSH
37053: LD_INT 1
37055: NEG
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 2
37063: NEG
37064: PUSH
37065: LD_INT 2
37067: NEG
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 3
37075: PUSH
37076: LD_INT 2
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 3
37085: PUSH
37086: LD_INT 3
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 2
37095: PUSH
37096: LD_INT 3
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37121: LD_ADDR_VAR 0 17
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: LD_INT 0
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 0
37138: PUSH
37139: LD_INT 1
37141: NEG
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 1
37149: PUSH
37150: LD_INT 0
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 1
37159: PUSH
37160: LD_INT 1
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 0
37169: PUSH
37170: LD_INT 1
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 1
37179: NEG
37180: PUSH
37181: LD_INT 0
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 1
37190: NEG
37191: PUSH
37192: LD_INT 1
37194: NEG
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 1
37202: NEG
37203: PUSH
37204: LD_INT 2
37206: NEG
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 0
37214: PUSH
37215: LD_INT 2
37217: NEG
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 1
37225: PUSH
37226: LD_INT 1
37228: NEG
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 2
37236: PUSH
37237: LD_INT 0
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 2
37246: PUSH
37247: LD_INT 1
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 2
37256: PUSH
37257: LD_INT 2
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 1
37266: PUSH
37267: LD_INT 2
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 0
37276: PUSH
37277: LD_INT 2
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 1
37286: NEG
37287: PUSH
37288: LD_INT 1
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 2
37297: NEG
37298: PUSH
37299: LD_INT 0
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 2
37308: NEG
37309: PUSH
37310: LD_INT 1
37312: NEG
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 2
37320: NEG
37321: PUSH
37322: LD_INT 2
37324: NEG
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37351: LD_ADDR_VAR 0 18
37355: PUSH
37356: LD_INT 0
37358: PUSH
37359: LD_INT 0
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 0
37368: PUSH
37369: LD_INT 1
37371: NEG
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 1
37379: PUSH
37380: LD_INT 0
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 1
37389: PUSH
37390: LD_INT 1
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 0
37399: PUSH
37400: LD_INT 1
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 1
37409: NEG
37410: PUSH
37411: LD_INT 0
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 1
37420: NEG
37421: PUSH
37422: LD_INT 1
37424: NEG
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 1
37432: NEG
37433: PUSH
37434: LD_INT 2
37436: NEG
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 0
37444: PUSH
37445: LD_INT 2
37447: NEG
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 1
37455: PUSH
37456: LD_INT 1
37458: NEG
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 2
37466: PUSH
37467: LD_INT 0
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 2
37476: PUSH
37477: LD_INT 1
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 2
37486: PUSH
37487: LD_INT 2
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 1
37496: PUSH
37497: LD_INT 2
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 0
37506: PUSH
37507: LD_INT 2
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 1
37516: NEG
37517: PUSH
37518: LD_INT 1
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 2
37527: NEG
37528: PUSH
37529: LD_INT 0
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 2
37538: NEG
37539: PUSH
37540: LD_INT 1
37542: NEG
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 2
37550: NEG
37551: PUSH
37552: LD_INT 2
37554: NEG
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37581: LD_ADDR_VAR 0 19
37585: PUSH
37586: LD_INT 0
37588: PUSH
37589: LD_INT 0
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 0
37598: PUSH
37599: LD_INT 1
37601: NEG
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 1
37609: PUSH
37610: LD_INT 0
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 1
37619: PUSH
37620: LD_INT 1
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 0
37629: PUSH
37630: LD_INT 1
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 1
37639: NEG
37640: PUSH
37641: LD_INT 0
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 1
37650: NEG
37651: PUSH
37652: LD_INT 1
37654: NEG
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 1
37662: NEG
37663: PUSH
37664: LD_INT 2
37666: NEG
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 0
37674: PUSH
37675: LD_INT 2
37677: NEG
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 1
37685: PUSH
37686: LD_INT 1
37688: NEG
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 2
37696: PUSH
37697: LD_INT 0
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 2
37706: PUSH
37707: LD_INT 1
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 2
37716: PUSH
37717: LD_INT 2
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 1
37726: PUSH
37727: LD_INT 2
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 0
37736: PUSH
37737: LD_INT 2
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 1
37746: NEG
37747: PUSH
37748: LD_INT 1
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 2
37757: NEG
37758: PUSH
37759: LD_INT 0
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 2
37768: NEG
37769: PUSH
37770: LD_INT 1
37772: NEG
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 2
37780: NEG
37781: PUSH
37782: LD_INT 2
37784: NEG
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37811: LD_ADDR_VAR 0 20
37815: PUSH
37816: LD_INT 0
37818: PUSH
37819: LD_INT 0
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 0
37828: PUSH
37829: LD_INT 1
37831: NEG
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 1
37839: PUSH
37840: LD_INT 0
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 1
37849: PUSH
37850: LD_INT 1
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 0
37859: PUSH
37860: LD_INT 1
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 1
37869: NEG
37870: PUSH
37871: LD_INT 0
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 1
37880: NEG
37881: PUSH
37882: LD_INT 1
37884: NEG
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 1
37892: NEG
37893: PUSH
37894: LD_INT 2
37896: NEG
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 0
37904: PUSH
37905: LD_INT 2
37907: NEG
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 1
37915: PUSH
37916: LD_INT 1
37918: NEG
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 2
37926: PUSH
37927: LD_INT 0
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 2
37936: PUSH
37937: LD_INT 1
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 2
37946: PUSH
37947: LD_INT 2
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 1
37956: PUSH
37957: LD_INT 2
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 0
37966: PUSH
37967: LD_INT 2
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 1
37976: NEG
37977: PUSH
37978: LD_INT 1
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 2
37987: NEG
37988: PUSH
37989: LD_INT 0
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 2
37998: NEG
37999: PUSH
38000: LD_INT 1
38002: NEG
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 2
38010: NEG
38011: PUSH
38012: LD_INT 2
38014: NEG
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38041: LD_ADDR_VAR 0 21
38045: PUSH
38046: LD_INT 0
38048: PUSH
38049: LD_INT 0
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 0
38058: PUSH
38059: LD_INT 1
38061: NEG
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 1
38069: PUSH
38070: LD_INT 0
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 1
38079: PUSH
38080: LD_INT 1
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 0
38089: PUSH
38090: LD_INT 1
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 1
38099: NEG
38100: PUSH
38101: LD_INT 0
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: LD_INT 1
38110: NEG
38111: PUSH
38112: LD_INT 1
38114: NEG
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: LD_INT 1
38122: NEG
38123: PUSH
38124: LD_INT 2
38126: NEG
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 0
38134: PUSH
38135: LD_INT 2
38137: NEG
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 1
38145: PUSH
38146: LD_INT 1
38148: NEG
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 2
38156: PUSH
38157: LD_INT 0
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 2
38166: PUSH
38167: LD_INT 1
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 2
38176: PUSH
38177: LD_INT 2
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 1
38186: PUSH
38187: LD_INT 2
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 0
38196: PUSH
38197: LD_INT 2
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 1
38206: NEG
38207: PUSH
38208: LD_INT 1
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 2
38217: NEG
38218: PUSH
38219: LD_INT 0
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 2
38228: NEG
38229: PUSH
38230: LD_INT 1
38232: NEG
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 2
38240: NEG
38241: PUSH
38242: LD_INT 2
38244: NEG
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38271: LD_ADDR_VAR 0 22
38275: PUSH
38276: LD_INT 0
38278: PUSH
38279: LD_INT 0
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 0
38288: PUSH
38289: LD_INT 1
38291: NEG
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 1
38299: PUSH
38300: LD_INT 0
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 1
38309: PUSH
38310: LD_INT 1
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: LD_INT 1
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 1
38329: NEG
38330: PUSH
38331: LD_INT 0
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 1
38340: NEG
38341: PUSH
38342: LD_INT 1
38344: NEG
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 1
38352: NEG
38353: PUSH
38354: LD_INT 2
38356: NEG
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 0
38364: PUSH
38365: LD_INT 2
38367: NEG
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 1
38375: PUSH
38376: LD_INT 1
38378: NEG
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 2
38386: PUSH
38387: LD_INT 0
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 2
38396: PUSH
38397: LD_INT 1
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 2
38406: PUSH
38407: LD_INT 2
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 1
38416: PUSH
38417: LD_INT 2
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 0
38426: PUSH
38427: LD_INT 2
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: LD_INT 1
38436: NEG
38437: PUSH
38438: LD_INT 1
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 2
38447: NEG
38448: PUSH
38449: LD_INT 0
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 2
38458: NEG
38459: PUSH
38460: LD_INT 1
38462: NEG
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 2
38470: NEG
38471: PUSH
38472: LD_INT 2
38474: NEG
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38501: LD_ADDR_VAR 0 23
38505: PUSH
38506: LD_INT 0
38508: PUSH
38509: LD_INT 0
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 0
38518: PUSH
38519: LD_INT 1
38521: NEG
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 1
38529: PUSH
38530: LD_INT 0
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 1
38539: PUSH
38540: LD_INT 1
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 0
38549: PUSH
38550: LD_INT 1
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 1
38559: NEG
38560: PUSH
38561: LD_INT 0
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: LD_INT 1
38570: NEG
38571: PUSH
38572: LD_INT 1
38574: NEG
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 1
38582: NEG
38583: PUSH
38584: LD_INT 2
38586: NEG
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 0
38594: PUSH
38595: LD_INT 2
38597: NEG
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 1
38605: PUSH
38606: LD_INT 1
38608: NEG
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 2
38616: PUSH
38617: LD_INT 0
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 2
38626: PUSH
38627: LD_INT 1
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 2
38636: PUSH
38637: LD_INT 2
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 1
38646: PUSH
38647: LD_INT 2
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 0
38656: PUSH
38657: LD_INT 2
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 1
38666: NEG
38667: PUSH
38668: LD_INT 1
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 2
38677: NEG
38678: PUSH
38679: LD_INT 0
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 2
38688: NEG
38689: PUSH
38690: LD_INT 1
38692: NEG
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 2
38700: NEG
38701: PUSH
38702: LD_INT 2
38704: NEG
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 2
38712: NEG
38713: PUSH
38714: LD_INT 3
38716: NEG
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 1
38724: NEG
38725: PUSH
38726: LD_INT 3
38728: NEG
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 1
38736: PUSH
38737: LD_INT 2
38739: NEG
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 2
38747: PUSH
38748: LD_INT 1
38750: NEG
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38781: LD_ADDR_VAR 0 24
38785: PUSH
38786: LD_INT 0
38788: PUSH
38789: LD_INT 0
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 0
38798: PUSH
38799: LD_INT 1
38801: NEG
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 1
38809: PUSH
38810: LD_INT 0
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 1
38819: PUSH
38820: LD_INT 1
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 0
38829: PUSH
38830: LD_INT 1
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 1
38839: NEG
38840: PUSH
38841: LD_INT 0
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 1
38850: NEG
38851: PUSH
38852: LD_INT 1
38854: NEG
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 1
38862: NEG
38863: PUSH
38864: LD_INT 2
38866: NEG
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 0
38874: PUSH
38875: LD_INT 2
38877: NEG
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 1
38885: PUSH
38886: LD_INT 1
38888: NEG
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 2
38896: PUSH
38897: LD_INT 0
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 2
38906: PUSH
38907: LD_INT 1
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 2
38916: PUSH
38917: LD_INT 2
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 1
38926: PUSH
38927: LD_INT 2
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 0
38936: PUSH
38937: LD_INT 2
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 1
38946: NEG
38947: PUSH
38948: LD_INT 1
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 2
38957: NEG
38958: PUSH
38959: LD_INT 0
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 2
38968: NEG
38969: PUSH
38970: LD_INT 1
38972: NEG
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 2
38980: NEG
38981: PUSH
38982: LD_INT 2
38984: NEG
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 1
38992: PUSH
38993: LD_INT 2
38995: NEG
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 2
39003: PUSH
39004: LD_INT 1
39006: NEG
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 3
39014: PUSH
39015: LD_INT 1
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 3
39024: PUSH
39025: LD_INT 2
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39057: LD_ADDR_VAR 0 25
39061: PUSH
39062: LD_INT 0
39064: PUSH
39065: LD_INT 0
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 0
39074: PUSH
39075: LD_INT 1
39077: NEG
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 1
39085: PUSH
39086: LD_INT 0
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 1
39095: PUSH
39096: LD_INT 1
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 0
39105: PUSH
39106: LD_INT 1
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 1
39115: NEG
39116: PUSH
39117: LD_INT 0
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 1
39126: NEG
39127: PUSH
39128: LD_INT 1
39130: NEG
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 1
39138: NEG
39139: PUSH
39140: LD_INT 2
39142: NEG
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 0
39150: PUSH
39151: LD_INT 2
39153: NEG
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 1
39161: PUSH
39162: LD_INT 1
39164: NEG
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 2
39172: PUSH
39173: LD_INT 0
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 2
39182: PUSH
39183: LD_INT 1
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 2
39192: PUSH
39193: LD_INT 2
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 1
39202: PUSH
39203: LD_INT 2
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 0
39212: PUSH
39213: LD_INT 2
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 1
39222: NEG
39223: PUSH
39224: LD_INT 1
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 2
39233: NEG
39234: PUSH
39235: LD_INT 0
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 2
39244: NEG
39245: PUSH
39246: LD_INT 1
39248: NEG
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 2
39256: NEG
39257: PUSH
39258: LD_INT 2
39260: NEG
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 3
39268: PUSH
39269: LD_INT 1
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 3
39278: PUSH
39279: LD_INT 2
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 2
39288: PUSH
39289: LD_INT 3
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 1
39298: PUSH
39299: LD_INT 3
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39331: LD_ADDR_VAR 0 26
39335: PUSH
39336: LD_INT 0
39338: PUSH
39339: LD_INT 0
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 0
39348: PUSH
39349: LD_INT 1
39351: NEG
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 1
39359: PUSH
39360: LD_INT 0
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 1
39369: PUSH
39370: LD_INT 1
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 0
39379: PUSH
39380: LD_INT 1
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 1
39389: NEG
39390: PUSH
39391: LD_INT 0
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 1
39400: NEG
39401: PUSH
39402: LD_INT 1
39404: NEG
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 1
39412: NEG
39413: PUSH
39414: LD_INT 2
39416: NEG
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 0
39424: PUSH
39425: LD_INT 2
39427: NEG
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 1
39435: PUSH
39436: LD_INT 1
39438: NEG
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 2
39446: PUSH
39447: LD_INT 0
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 2
39456: PUSH
39457: LD_INT 1
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 2
39466: PUSH
39467: LD_INT 2
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 1
39476: PUSH
39477: LD_INT 2
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 0
39486: PUSH
39487: LD_INT 2
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 1
39496: NEG
39497: PUSH
39498: LD_INT 1
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 2
39507: NEG
39508: PUSH
39509: LD_INT 0
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 2
39518: NEG
39519: PUSH
39520: LD_INT 1
39522: NEG
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 2
39530: NEG
39531: PUSH
39532: LD_INT 2
39534: NEG
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 2
39542: PUSH
39543: LD_INT 3
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 1
39552: PUSH
39553: LD_INT 3
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 1
39562: NEG
39563: PUSH
39564: LD_INT 2
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 2
39573: NEG
39574: PUSH
39575: LD_INT 1
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39607: LD_ADDR_VAR 0 27
39611: PUSH
39612: LD_INT 0
39614: PUSH
39615: LD_INT 0
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 0
39624: PUSH
39625: LD_INT 1
39627: NEG
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 1
39635: PUSH
39636: LD_INT 0
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 1
39645: PUSH
39646: LD_INT 1
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 0
39655: PUSH
39656: LD_INT 1
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 1
39665: NEG
39666: PUSH
39667: LD_INT 0
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 1
39676: NEG
39677: PUSH
39678: LD_INT 1
39680: NEG
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 1
39688: NEG
39689: PUSH
39690: LD_INT 2
39692: NEG
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 0
39700: PUSH
39701: LD_INT 2
39703: NEG
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 1
39711: PUSH
39712: LD_INT 1
39714: NEG
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 2
39722: PUSH
39723: LD_INT 0
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 2
39732: PUSH
39733: LD_INT 1
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 2
39742: PUSH
39743: LD_INT 2
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 1
39752: PUSH
39753: LD_INT 2
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: LD_INT 2
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 1
39772: NEG
39773: PUSH
39774: LD_INT 1
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 2
39783: NEG
39784: PUSH
39785: LD_INT 0
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 2
39794: NEG
39795: PUSH
39796: LD_INT 1
39798: NEG
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 2
39806: NEG
39807: PUSH
39808: LD_INT 2
39810: NEG
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 1
39818: NEG
39819: PUSH
39820: LD_INT 2
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 2
39829: NEG
39830: PUSH
39831: LD_INT 1
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 3
39840: NEG
39841: PUSH
39842: LD_INT 1
39844: NEG
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 3
39852: NEG
39853: PUSH
39854: LD_INT 2
39856: NEG
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39887: LD_ADDR_VAR 0 28
39891: PUSH
39892: LD_INT 0
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 0
39904: PUSH
39905: LD_INT 1
39907: NEG
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 1
39915: PUSH
39916: LD_INT 0
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 1
39925: PUSH
39926: LD_INT 1
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 0
39935: PUSH
39936: LD_INT 1
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 1
39945: NEG
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 1
39956: NEG
39957: PUSH
39958: LD_INT 1
39960: NEG
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 1
39968: NEG
39969: PUSH
39970: LD_INT 2
39972: NEG
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 0
39980: PUSH
39981: LD_INT 2
39983: NEG
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 1
39991: PUSH
39992: LD_INT 1
39994: NEG
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 2
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 2
40012: PUSH
40013: LD_INT 1
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 2
40022: PUSH
40023: LD_INT 2
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 1
40032: PUSH
40033: LD_INT 2
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 0
40042: PUSH
40043: LD_INT 2
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 1
40052: NEG
40053: PUSH
40054: LD_INT 1
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 2
40063: NEG
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 2
40074: NEG
40075: PUSH
40076: LD_INT 1
40078: NEG
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 2
40086: NEG
40087: PUSH
40088: LD_INT 2
40090: NEG
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 2
40098: NEG
40099: PUSH
40100: LD_INT 3
40102: NEG
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 1
40110: NEG
40111: PUSH
40112: LD_INT 3
40114: NEG
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 3
40122: NEG
40123: PUSH
40124: LD_INT 1
40126: NEG
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 3
40134: NEG
40135: PUSH
40136: LD_INT 2
40138: NEG
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40169: LD_ADDR_VAR 0 29
40173: PUSH
40174: LD_INT 0
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 0
40186: PUSH
40187: LD_INT 1
40189: NEG
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 1
40197: PUSH
40198: LD_INT 0
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 1
40207: PUSH
40208: LD_INT 1
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 0
40217: PUSH
40218: LD_INT 1
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 1
40227: NEG
40228: PUSH
40229: LD_INT 0
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 1
40238: NEG
40239: PUSH
40240: LD_INT 1
40242: NEG
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: LD_INT 2
40254: NEG
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 0
40262: PUSH
40263: LD_INT 2
40265: NEG
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 1
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 2
40284: PUSH
40285: LD_INT 0
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 2
40294: PUSH
40295: LD_INT 1
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 1
40304: PUSH
40305: LD_INT 2
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 0
40314: PUSH
40315: LD_INT 2
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 1
40324: NEG
40325: PUSH
40326: LD_INT 1
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 2
40335: NEG
40336: PUSH
40337: LD_INT 1
40339: NEG
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 2
40347: NEG
40348: PUSH
40349: LD_INT 2
40351: NEG
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 2
40359: NEG
40360: PUSH
40361: LD_INT 3
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 2
40371: PUSH
40372: LD_INT 1
40374: NEG
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 3
40382: PUSH
40383: LD_INT 1
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 1
40392: PUSH
40393: LD_INT 3
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 1
40402: NEG
40403: PUSH
40404: LD_INT 2
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 3
40413: NEG
40414: PUSH
40415: LD_INT 2
40417: NEG
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40448: LD_ADDR_VAR 0 30
40452: PUSH
40453: LD_INT 0
40455: PUSH
40456: LD_INT 0
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 0
40465: PUSH
40466: LD_INT 1
40468: NEG
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 1
40476: PUSH
40477: LD_INT 0
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 1
40486: PUSH
40487: LD_INT 1
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 0
40496: PUSH
40497: LD_INT 1
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 1
40506: NEG
40507: PUSH
40508: LD_INT 0
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 1
40517: NEG
40518: PUSH
40519: LD_INT 1
40521: NEG
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 1
40529: NEG
40530: PUSH
40531: LD_INT 2
40533: NEG
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 0
40541: PUSH
40542: LD_INT 2
40544: NEG
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 1
40552: PUSH
40553: LD_INT 1
40555: NEG
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 2
40563: PUSH
40564: LD_INT 0
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 2
40573: PUSH
40574: LD_INT 1
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 2
40583: PUSH
40584: LD_INT 2
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 1
40593: PUSH
40594: LD_INT 2
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 1
40603: NEG
40604: PUSH
40605: LD_INT 1
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 2
40614: NEG
40615: PUSH
40616: LD_INT 0
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 2
40625: NEG
40626: PUSH
40627: LD_INT 1
40629: NEG
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 1
40637: NEG
40638: PUSH
40639: LD_INT 3
40641: NEG
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 1
40649: PUSH
40650: LD_INT 2
40652: NEG
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 3
40660: PUSH
40661: LD_INT 2
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 2
40670: PUSH
40671: LD_INT 3
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 2
40680: NEG
40681: PUSH
40682: LD_INT 1
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 3
40691: NEG
40692: PUSH
40693: LD_INT 1
40695: NEG
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40726: LD_ADDR_VAR 0 31
40730: PUSH
40731: LD_INT 0
40733: PUSH
40734: LD_INT 0
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 0
40743: PUSH
40744: LD_INT 1
40746: NEG
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 1
40754: PUSH
40755: LD_INT 0
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 1
40764: PUSH
40765: LD_INT 1
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 0
40774: PUSH
40775: LD_INT 1
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 1
40784: NEG
40785: PUSH
40786: LD_INT 0
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 1
40795: NEG
40796: PUSH
40797: LD_INT 1
40799: NEG
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 1
40807: NEG
40808: PUSH
40809: LD_INT 2
40811: NEG
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 1
40819: PUSH
40820: LD_INT 1
40822: NEG
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 2
40830: PUSH
40831: LD_INT 0
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 2
40840: PUSH
40841: LD_INT 1
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 2
40850: PUSH
40851: LD_INT 2
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 1
40860: PUSH
40861: LD_INT 2
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 0
40870: PUSH
40871: LD_INT 2
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 1
40880: NEG
40881: PUSH
40882: LD_INT 1
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 2
40891: NEG
40892: PUSH
40893: LD_INT 1
40895: NEG
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 2
40903: NEG
40904: PUSH
40905: LD_INT 2
40907: NEG
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 2
40915: NEG
40916: PUSH
40917: LD_INT 3
40919: NEG
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 2
40927: PUSH
40928: LD_INT 1
40930: NEG
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 3
40938: PUSH
40939: LD_INT 1
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 1
40948: PUSH
40949: LD_INT 3
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 1
40958: NEG
40959: PUSH
40960: LD_INT 2
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 3
40969: NEG
40970: PUSH
40971: LD_INT 2
40973: NEG
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41004: LD_ADDR_VAR 0 32
41008: PUSH
41009: LD_INT 0
41011: PUSH
41012: LD_INT 0
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 0
41021: PUSH
41022: LD_INT 1
41024: NEG
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 1
41032: PUSH
41033: LD_INT 0
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 1
41042: PUSH
41043: LD_INT 1
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 0
41052: PUSH
41053: LD_INT 1
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 1
41062: NEG
41063: PUSH
41064: LD_INT 0
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 1
41073: NEG
41074: PUSH
41075: LD_INT 1
41077: NEG
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 1
41085: NEG
41086: PUSH
41087: LD_INT 2
41089: NEG
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 0
41097: PUSH
41098: LD_INT 2
41100: NEG
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 1
41108: PUSH
41109: LD_INT 1
41111: NEG
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 2
41119: PUSH
41120: LD_INT 1
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 2
41129: PUSH
41130: LD_INT 2
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 1
41139: PUSH
41140: LD_INT 2
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 0
41149: PUSH
41150: LD_INT 2
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 1
41159: NEG
41160: PUSH
41161: LD_INT 1
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 2
41170: NEG
41171: PUSH
41172: LD_INT 0
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 2
41181: NEG
41182: PUSH
41183: LD_INT 1
41185: NEG
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 1
41193: NEG
41194: PUSH
41195: LD_INT 3
41197: NEG
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 1
41205: PUSH
41206: LD_INT 2
41208: NEG
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 3
41216: PUSH
41217: LD_INT 2
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 2
41226: PUSH
41227: LD_INT 3
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 2
41236: NEG
41237: PUSH
41238: LD_INT 1
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 3
41247: NEG
41248: PUSH
41249: LD_INT 1
41251: NEG
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41282: LD_ADDR_VAR 0 33
41286: PUSH
41287: LD_INT 0
41289: PUSH
41290: LD_INT 0
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 0
41299: PUSH
41300: LD_INT 1
41302: NEG
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 1
41310: PUSH
41311: LD_INT 0
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 1
41320: PUSH
41321: LD_INT 1
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 0
41330: PUSH
41331: LD_INT 1
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 1
41340: NEG
41341: PUSH
41342: LD_INT 0
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 1
41351: NEG
41352: PUSH
41353: LD_INT 1
41355: NEG
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: NEG
41364: PUSH
41365: LD_INT 2
41367: NEG
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 1
41375: PUSH
41376: LD_INT 1
41378: NEG
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 2
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 2
41396: PUSH
41397: LD_INT 1
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 1
41406: PUSH
41407: LD_INT 2
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 0
41416: PUSH
41417: LD_INT 2
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 1
41426: NEG
41427: PUSH
41428: LD_INT 1
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 2
41437: NEG
41438: PUSH
41439: LD_INT 0
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 2
41448: NEG
41449: PUSH
41450: LD_INT 1
41452: NEG
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 2
41460: NEG
41461: PUSH
41462: LD_INT 2
41464: NEG
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 2
41472: NEG
41473: PUSH
41474: LD_INT 3
41476: NEG
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 2
41484: PUSH
41485: LD_INT 1
41487: NEG
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 3
41495: PUSH
41496: LD_INT 1
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 1
41505: PUSH
41506: LD_INT 3
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 1
41515: NEG
41516: PUSH
41517: LD_INT 2
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 3
41526: NEG
41527: PUSH
41528: LD_INT 2
41530: NEG
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41561: LD_ADDR_VAR 0 34
41565: PUSH
41566: LD_INT 0
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 0
41578: PUSH
41579: LD_INT 1
41581: NEG
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 1
41589: PUSH
41590: LD_INT 0
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 1
41599: PUSH
41600: LD_INT 1
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 0
41609: PUSH
41610: LD_INT 1
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 1
41619: NEG
41620: PUSH
41621: LD_INT 0
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 1
41630: NEG
41631: PUSH
41632: LD_INT 1
41634: NEG
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 1
41642: NEG
41643: PUSH
41644: LD_INT 2
41646: NEG
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 0
41654: PUSH
41655: LD_INT 2
41657: NEG
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 1
41665: PUSH
41666: LD_INT 1
41668: NEG
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 2
41676: PUSH
41677: LD_INT 1
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 2
41686: PUSH
41687: LD_INT 2
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: LD_INT 2
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: NEG
41707: PUSH
41708: LD_INT 1
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 2
41717: NEG
41718: PUSH
41719: LD_INT 0
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 2
41728: NEG
41729: PUSH
41730: LD_INT 1
41732: NEG
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 2
41740: NEG
41741: PUSH
41742: LD_INT 2
41744: NEG
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 1
41752: NEG
41753: PUSH
41754: LD_INT 3
41756: NEG
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 1
41764: PUSH
41765: LD_INT 2
41767: NEG
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 3
41775: PUSH
41776: LD_INT 2
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 2
41785: PUSH
41786: LD_INT 3
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 2
41795: NEG
41796: PUSH
41797: LD_INT 1
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 3
41806: NEG
41807: PUSH
41808: LD_INT 1
41810: NEG
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41841: LD_ADDR_VAR 0 35
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: LD_INT 0
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 0
41858: PUSH
41859: LD_INT 1
41861: NEG
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 1
41869: PUSH
41870: LD_INT 0
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 1
41879: PUSH
41880: LD_INT 1
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: LD_INT 1
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 1
41899: NEG
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 1
41910: NEG
41911: PUSH
41912: LD_INT 1
41914: NEG
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 2
41922: PUSH
41923: LD_INT 1
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 2
41932: NEG
41933: PUSH
41934: LD_INT 1
41936: NEG
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41953: LD_ADDR_VAR 0 36
41957: PUSH
41958: LD_INT 0
41960: PUSH
41961: LD_INT 0
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: LD_INT 1
41973: NEG
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 1
41981: PUSH
41982: LD_INT 0
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 1
41991: PUSH
41992: LD_INT 1
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 0
42001: PUSH
42002: LD_INT 1
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 1
42011: NEG
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 1
42022: NEG
42023: PUSH
42024: LD_INT 1
42026: NEG
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 1
42034: NEG
42035: PUSH
42036: LD_INT 2
42038: NEG
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 1
42046: PUSH
42047: LD_INT 2
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42065: LD_ADDR_VAR 0 37
42069: PUSH
42070: LD_INT 0
42072: PUSH
42073: LD_INT 0
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 0
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 1
42093: PUSH
42094: LD_INT 0
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 1
42103: PUSH
42104: LD_INT 1
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: LD_INT 1
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: LD_INT 0
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 1
42134: NEG
42135: PUSH
42136: LD_INT 1
42138: NEG
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 1
42146: PUSH
42147: LD_INT 1
42149: NEG
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 1
42157: NEG
42158: PUSH
42159: LD_INT 1
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42177: LD_ADDR_VAR 0 38
42181: PUSH
42182: LD_INT 0
42184: PUSH
42185: LD_INT 0
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 0
42194: PUSH
42195: LD_INT 1
42197: NEG
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 1
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 1
42215: PUSH
42216: LD_INT 1
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: LD_INT 1
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 1
42235: NEG
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 1
42246: NEG
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 2
42258: PUSH
42259: LD_INT 1
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 2
42268: NEG
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42289: LD_ADDR_VAR 0 39
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: LD_INT 0
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: LD_INT 1
42309: NEG
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: LD_INT 0
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 1
42327: PUSH
42328: LD_INT 1
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: LD_INT 1
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 1
42347: NEG
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 1
42358: NEG
42359: PUSH
42360: LD_INT 1
42362: NEG
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 1
42370: NEG
42371: PUSH
42372: LD_INT 2
42374: NEG
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 1
42382: PUSH
42383: LD_INT 2
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42401: LD_ADDR_VAR 0 40
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: LD_INT 0
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 0
42418: PUSH
42419: LD_INT 1
42421: NEG
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 1
42429: PUSH
42430: LD_INT 0
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: LD_INT 1
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: LD_INT 1
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PUSH
42461: LD_INT 0
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: NEG
42471: PUSH
42472: LD_INT 1
42474: NEG
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 1
42482: PUSH
42483: LD_INT 1
42485: NEG
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 1
42493: NEG
42494: PUSH
42495: LD_INT 1
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42513: LD_ADDR_VAR 0 41
42517: PUSH
42518: LD_INT 0
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 0
42530: PUSH
42531: LD_INT 1
42533: NEG
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 1
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 1
42551: PUSH
42552: LD_INT 1
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: LD_INT 1
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 1
42571: NEG
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 1
42582: NEG
42583: PUSH
42584: LD_INT 1
42586: NEG
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 1
42594: NEG
42595: PUSH
42596: LD_INT 2
42598: NEG
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: LD_INT 1
42609: NEG
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 2
42617: PUSH
42618: LD_INT 0
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 2
42627: PUSH
42628: LD_INT 1
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 2
42637: PUSH
42638: LD_INT 2
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 1
42647: PUSH
42648: LD_INT 2
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 1
42657: NEG
42658: PUSH
42659: LD_INT 1
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 2
42668: NEG
42669: PUSH
42670: LD_INT 0
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 2
42679: NEG
42680: PUSH
42681: LD_INT 1
42683: NEG
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 2
42691: NEG
42692: PUSH
42693: LD_INT 2
42695: NEG
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 2
42703: NEG
42704: PUSH
42705: LD_INT 3
42707: NEG
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 2
42715: PUSH
42716: LD_INT 1
42718: NEG
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 3
42726: PUSH
42727: LD_INT 0
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 3
42736: PUSH
42737: LD_INT 1
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 3
42746: PUSH
42747: LD_INT 2
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 3
42756: PUSH
42757: LD_INT 3
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 2
42766: PUSH
42767: LD_INT 3
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 2
42776: NEG
42777: PUSH
42778: LD_INT 1
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 3
42787: NEG
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 3
42798: NEG
42799: PUSH
42800: LD_INT 1
42802: NEG
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 3
42810: NEG
42811: PUSH
42812: LD_INT 2
42814: NEG
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 3
42822: NEG
42823: PUSH
42824: LD_INT 3
42826: NEG
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42863: LD_ADDR_VAR 0 42
42867: PUSH
42868: LD_INT 0
42870: PUSH
42871: LD_INT 0
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 0
42880: PUSH
42881: LD_INT 1
42883: NEG
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 1
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 1
42901: PUSH
42902: LD_INT 1
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 0
42911: PUSH
42912: LD_INT 1
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 1
42921: NEG
42922: PUSH
42923: LD_INT 0
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 1
42932: NEG
42933: PUSH
42934: LD_INT 1
42936: NEG
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 1
42944: NEG
42945: PUSH
42946: LD_INT 2
42948: NEG
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: LD_INT 2
42959: NEG
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 1
42967: PUSH
42968: LD_INT 1
42970: NEG
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 2
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 2
42988: PUSH
42989: LD_INT 2
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 1
42998: PUSH
42999: LD_INT 2
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: LD_INT 2
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 1
43018: NEG
43019: PUSH
43020: LD_INT 1
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 2
43029: NEG
43030: PUSH
43031: LD_INT 1
43033: NEG
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 2
43041: NEG
43042: PUSH
43043: LD_INT 2
43045: NEG
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 2
43053: NEG
43054: PUSH
43055: LD_INT 3
43057: NEG
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 1
43065: NEG
43066: PUSH
43067: LD_INT 3
43069: NEG
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 0
43077: PUSH
43078: LD_INT 3
43080: NEG
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 1
43088: PUSH
43089: LD_INT 2
43091: NEG
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 3
43099: PUSH
43100: LD_INT 2
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 3
43109: PUSH
43110: LD_INT 3
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 2
43119: PUSH
43120: LD_INT 3
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 1
43129: PUSH
43130: LD_INT 3
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 0
43139: PUSH
43140: LD_INT 3
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 1
43149: NEG
43150: PUSH
43151: LD_INT 2
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 3
43160: NEG
43161: PUSH
43162: LD_INT 2
43164: NEG
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 3
43172: NEG
43173: PUSH
43174: LD_INT 3
43176: NEG
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43213: LD_ADDR_VAR 0 43
43217: PUSH
43218: LD_INT 0
43220: PUSH
43221: LD_INT 0
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 0
43230: PUSH
43231: LD_INT 1
43233: NEG
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 1
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 1
43251: PUSH
43252: LD_INT 1
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: LD_INT 1
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 1
43271: NEG
43272: PUSH
43273: LD_INT 0
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 1
43282: NEG
43283: PUSH
43284: LD_INT 1
43286: NEG
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 1
43294: NEG
43295: PUSH
43296: LD_INT 2
43298: NEG
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 0
43306: PUSH
43307: LD_INT 2
43309: NEG
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 1
43317: PUSH
43318: LD_INT 1
43320: NEG
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 2
43328: PUSH
43329: LD_INT 0
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 2
43338: PUSH
43339: LD_INT 1
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 1
43348: PUSH
43349: LD_INT 2
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 0
43358: PUSH
43359: LD_INT 2
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 1
43368: NEG
43369: PUSH
43370: LD_INT 1
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 2
43379: NEG
43380: PUSH
43381: LD_INT 0
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 2
43390: NEG
43391: PUSH
43392: LD_INT 1
43394: NEG
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 1
43402: NEG
43403: PUSH
43404: LD_INT 3
43406: NEG
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 0
43414: PUSH
43415: LD_INT 3
43417: NEG
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 1
43425: PUSH
43426: LD_INT 2
43428: NEG
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 2
43436: PUSH
43437: LD_INT 1
43439: NEG
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 3
43447: PUSH
43448: LD_INT 0
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 3
43457: PUSH
43458: LD_INT 1
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: PUSH
43468: LD_INT 3
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: LD_INT 3
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 1
43487: NEG
43488: PUSH
43489: LD_INT 2
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 2
43498: NEG
43499: PUSH
43500: LD_INT 1
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 3
43509: NEG
43510: PUSH
43511: LD_INT 0
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 3
43520: NEG
43521: PUSH
43522: LD_INT 1
43524: NEG
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43561: LD_ADDR_VAR 0 44
43565: PUSH
43566: LD_INT 0
43568: PUSH
43569: LD_INT 0
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 0
43578: PUSH
43579: LD_INT 1
43581: NEG
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 1
43589: PUSH
43590: LD_INT 0
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 1
43599: PUSH
43600: LD_INT 1
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 0
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 1
43619: NEG
43620: PUSH
43621: LD_INT 0
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 1
43630: NEG
43631: PUSH
43632: LD_INT 1
43634: NEG
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 1
43642: NEG
43643: PUSH
43644: LD_INT 2
43646: NEG
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 1
43654: PUSH
43655: LD_INT 1
43657: NEG
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 2
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 2
43675: PUSH
43676: LD_INT 1
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 2
43685: PUSH
43686: LD_INT 2
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: LD_INT 2
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 1
43705: NEG
43706: PUSH
43707: LD_INT 1
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 2
43716: NEG
43717: PUSH
43718: LD_INT 0
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 2
43727: NEG
43728: PUSH
43729: LD_INT 1
43731: NEG
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 2
43739: NEG
43740: PUSH
43741: LD_INT 2
43743: NEG
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 2
43751: NEG
43752: PUSH
43753: LD_INT 3
43755: NEG
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 2
43763: PUSH
43764: LD_INT 1
43766: NEG
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 3
43774: PUSH
43775: LD_INT 0
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 3
43784: PUSH
43785: LD_INT 1
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 3
43794: PUSH
43795: LD_INT 2
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 3
43804: PUSH
43805: LD_INT 3
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 2
43814: PUSH
43815: LD_INT 3
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 2
43824: NEG
43825: PUSH
43826: LD_INT 1
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 3
43835: NEG
43836: PUSH
43837: LD_INT 0
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 3
43846: NEG
43847: PUSH
43848: LD_INT 1
43850: NEG
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 3
43858: NEG
43859: PUSH
43860: LD_INT 2
43862: NEG
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 3
43870: NEG
43871: PUSH
43872: LD_INT 3
43874: NEG
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43911: LD_ADDR_VAR 0 45
43915: PUSH
43916: LD_INT 0
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 0
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 1
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 1
43949: PUSH
43950: LD_INT 1
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 0
43959: PUSH
43960: LD_INT 1
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: LD_INT 0
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 1
43980: NEG
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: LD_INT 2
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 0
44004: PUSH
44005: LD_INT 2
44007: NEG
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: LD_INT 1
44018: NEG
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 2
44026: PUSH
44027: LD_INT 1
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 2
44036: PUSH
44037: LD_INT 2
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 1
44046: PUSH
44047: LD_INT 2
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: LD_INT 2
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 1
44066: NEG
44067: PUSH
44068: LD_INT 1
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 2
44077: NEG
44078: PUSH
44079: LD_INT 1
44081: NEG
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 2
44089: NEG
44090: PUSH
44091: LD_INT 2
44093: NEG
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 2
44101: NEG
44102: PUSH
44103: LD_INT 3
44105: NEG
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 1
44113: NEG
44114: PUSH
44115: LD_INT 3
44117: NEG
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 0
44125: PUSH
44126: LD_INT 3
44128: NEG
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 1
44136: PUSH
44137: LD_INT 2
44139: NEG
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 3
44147: PUSH
44148: LD_INT 2
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 3
44157: PUSH
44158: LD_INT 3
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 2
44167: PUSH
44168: LD_INT 3
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 1
44177: PUSH
44178: LD_INT 3
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 0
44187: PUSH
44188: LD_INT 3
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 1
44197: NEG
44198: PUSH
44199: LD_INT 2
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 3
44208: NEG
44209: PUSH
44210: LD_INT 2
44212: NEG
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 3
44220: NEG
44221: PUSH
44222: LD_INT 3
44224: NEG
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44261: LD_ADDR_VAR 0 46
44265: PUSH
44266: LD_INT 0
44268: PUSH
44269: LD_INT 0
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: LD_INT 1
44281: NEG
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 1
44299: PUSH
44300: LD_INT 1
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 0
44309: PUSH
44310: LD_INT 1
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 1
44319: NEG
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 1
44330: NEG
44331: PUSH
44332: LD_INT 1
44334: NEG
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: NEG
44343: PUSH
44344: LD_INT 2
44346: NEG
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 0
44354: PUSH
44355: LD_INT 2
44357: NEG
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 1
44365: PUSH
44366: LD_INT 1
44368: NEG
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 2
44376: PUSH
44377: LD_INT 0
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 2
44386: PUSH
44387: LD_INT 1
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 1
44396: PUSH
44397: LD_INT 2
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 0
44406: PUSH
44407: LD_INT 2
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: LD_INT 1
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 2
44427: NEG
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 2
44438: NEG
44439: PUSH
44440: LD_INT 1
44442: NEG
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 1
44450: NEG
44451: PUSH
44452: LD_INT 3
44454: NEG
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: LD_INT 3
44465: NEG
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 1
44473: PUSH
44474: LD_INT 2
44476: NEG
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 2
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 3
44495: PUSH
44496: LD_INT 0
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 3
44505: PUSH
44506: LD_INT 1
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: LD_INT 3
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 0
44525: PUSH
44526: LD_INT 3
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 1
44535: NEG
44536: PUSH
44537: LD_INT 2
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 2
44546: NEG
44547: PUSH
44548: LD_INT 1
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 3
44557: NEG
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 3
44568: NEG
44569: PUSH
44570: LD_INT 1
44572: NEG
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44609: LD_ADDR_VAR 0 47
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: LD_INT 0
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: LD_INT 1
44629: NEG
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 1
44637: PUSH
44638: LD_INT 0
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 1
44647: PUSH
44648: LD_INT 1
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 0
44657: PUSH
44658: LD_INT 1
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 1
44667: NEG
44668: PUSH
44669: LD_INT 0
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: LD_INT 1
44682: NEG
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 1
44690: NEG
44691: PUSH
44692: LD_INT 2
44694: NEG
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 0
44702: PUSH
44703: LD_INT 2
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 1
44713: PUSH
44714: LD_INT 1
44716: NEG
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 2
44724: NEG
44725: PUSH
44726: LD_INT 1
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 2
44736: NEG
44737: PUSH
44738: LD_INT 2
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44760: LD_ADDR_VAR 0 48
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: LD_INT 1
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 0
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 1
44829: NEG
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: LD_INT 2
44845: NEG
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: LD_INT 2
44856: NEG
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 2
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 2
44885: PUSH
44886: LD_INT 1
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44907: LD_ADDR_VAR 0 49
44911: PUSH
44912: LD_INT 0
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: LD_INT 1
44927: NEG
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 1
44965: NEG
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 1
44976: NEG
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: LD_INT 1
44991: NEG
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 2
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 2
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 2
45019: PUSH
45020: LD_INT 2
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 1
45029: PUSH
45030: LD_INT 2
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45051: LD_ADDR_VAR 0 50
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: LD_INT 0
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: LD_INT 1
45071: NEG
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 1
45079: PUSH
45080: LD_INT 0
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 1
45109: NEG
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 1
45120: NEG
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 2
45132: PUSH
45133: LD_INT 1
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 2
45142: PUSH
45143: LD_INT 2
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 1
45152: PUSH
45153: LD_INT 2
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 0
45162: PUSH
45163: LD_INT 2
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 1
45172: NEG
45173: PUSH
45174: LD_INT 1
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45195: LD_ADDR_VAR 0 51
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 0
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 1
45223: PUSH
45224: LD_INT 0
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 1
45233: PUSH
45234: LD_INT 1
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 0
45243: PUSH
45244: LD_INT 1
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 1
45253: NEG
45254: PUSH
45255: LD_INT 0
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 1
45264: NEG
45265: PUSH
45266: LD_INT 1
45268: NEG
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 1
45276: PUSH
45277: LD_INT 2
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 0
45286: PUSH
45287: LD_INT 2
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 1
45296: NEG
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 2
45307: NEG
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 2
45318: NEG
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45342: LD_ADDR_VAR 0 52
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: LD_INT 1
45362: NEG
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: LD_INT 1
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 0
45390: PUSH
45391: LD_INT 1
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 1
45400: NEG
45401: PUSH
45402: LD_INT 0
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: LD_INT 1
45415: NEG
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 1
45423: NEG
45424: PUSH
45425: LD_INT 2
45427: NEG
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 1
45435: NEG
45436: PUSH
45437: LD_INT 1
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 2
45446: NEG
45447: PUSH
45448: LD_INT 0
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 2
45457: NEG
45458: PUSH
45459: LD_INT 1
45461: NEG
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 2
45469: NEG
45470: PUSH
45471: LD_INT 2
45473: NEG
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45493: LD_ADDR_VAR 0 53
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: NEG
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 1
45574: NEG
45575: PUSH
45576: LD_INT 2
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: LD_INT 2
45589: NEG
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: LD_INT 1
45600: NEG
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 2
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 2
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 2
45628: PUSH
45629: LD_INT 2
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 1
45638: PUSH
45639: LD_INT 2
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 0
45648: PUSH
45649: LD_INT 2
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: NEG
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 2
45669: NEG
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 2
45680: NEG
45681: PUSH
45682: LD_INT 1
45684: NEG
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 2
45692: NEG
45693: PUSH
45694: LD_INT 2
45696: NEG
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45723: LD_ADDR_VAR 0 54
45727: PUSH
45728: LD_INT 0
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: LD_INT 1
45743: NEG
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 1
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 1
45761: PUSH
45762: LD_INT 1
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: LD_INT 1
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 1
45781: NEG
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 1
45792: NEG
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 1
45804: NEG
45805: PUSH
45806: LD_INT 2
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: LD_INT 2
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 2
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 2
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 2
45858: PUSH
45859: LD_INT 2
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 1
45868: PUSH
45869: LD_INT 2
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 0
45878: PUSH
45879: LD_INT 2
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 1
45888: NEG
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 2
45899: NEG
45900: PUSH
45901: LD_INT 0
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 2
45910: NEG
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 2
45922: NEG
45923: PUSH
45924: LD_INT 2
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45953: LD_ADDR_VAR 0 55
45957: PUSH
45958: LD_INT 0
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: LD_INT 1
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: LD_INT 1
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: NEG
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 1
46022: NEG
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 1
46034: NEG
46035: PUSH
46036: LD_INT 2
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: LD_INT 2
46049: NEG
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: LD_INT 1
46060: NEG
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 2
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 2
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 2
46088: PUSH
46089: LD_INT 2
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: LD_INT 2
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: LD_INT 2
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: NEG
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 2
46129: NEG
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 2
46140: NEG
46141: PUSH
46142: LD_INT 1
46144: NEG
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 2
46152: NEG
46153: PUSH
46154: LD_INT 2
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46183: LD_ADDR_VAR 0 56
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: NEG
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: LD_INT 1
46256: NEG
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: LD_INT 2
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: LD_INT 2
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 1
46287: PUSH
46288: LD_INT 1
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 2
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 2
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 2
46318: PUSH
46319: LD_INT 2
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: LD_INT 2
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 0
46338: PUSH
46339: LD_INT 2
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 1
46348: NEG
46349: PUSH
46350: LD_INT 1
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 2
46359: NEG
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 2
46370: NEG
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 2
46382: NEG
46383: PUSH
46384: LD_INT 2
46386: NEG
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46413: LD_ADDR_VAR 0 57
46417: PUSH
46418: LD_INT 0
46420: PUSH
46421: LD_INT 0
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 1
46441: PUSH
46442: LD_INT 0
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 1
46451: PUSH
46452: LD_INT 1
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: LD_INT 1
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 1
46471: NEG
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: LD_INT 1
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 1
46494: NEG
46495: PUSH
46496: LD_INT 2
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: LD_INT 2
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: PUSH
46518: LD_INT 1
46520: NEG
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 2
46528: PUSH
46529: LD_INT 0
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 2
46538: PUSH
46539: LD_INT 1
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 2
46548: PUSH
46549: LD_INT 2
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: LD_INT 2
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 0
46568: PUSH
46569: LD_INT 2
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: NEG
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 2
46589: NEG
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 2
46600: NEG
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 2
46612: NEG
46613: PUSH
46614: LD_INT 2
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46643: LD_ADDR_VAR 0 58
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: LD_INT 1
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 1
46671: PUSH
46672: LD_INT 0
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 1
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 0
46691: PUSH
46692: LD_INT 1
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 1
46724: NEG
46725: PUSH
46726: LD_INT 2
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 0
46736: PUSH
46737: LD_INT 2
46739: NEG
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 1
46747: PUSH
46748: LD_INT 1
46750: NEG
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 2
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 2
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 2
46778: PUSH
46779: LD_INT 2
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: LD_INT 2
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: LD_INT 2
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 2
46819: NEG
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 2
46830: NEG
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 2
46842: NEG
46843: PUSH
46844: LD_INT 2
46846: NEG
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46873: LD_ADDR_VAR 0 59
46877: PUSH
46878: LD_INT 0
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: LD_INT 1
46893: NEG
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 1
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: PUSH
46912: LD_INT 1
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 0
46921: PUSH
46922: LD_INT 1
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 1
46931: NEG
46932: PUSH
46933: LD_INT 0
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 1
46942: NEG
46943: PUSH
46944: LD_INT 1
46946: NEG
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46961: LD_ADDR_VAR 0 60
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 1
46989: PUSH
46990: LD_INT 0
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 1
46999: PUSH
47000: LD_INT 1
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 1
47030: NEG
47031: PUSH
47032: LD_INT 1
47034: NEG
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47049: LD_ADDR_VAR 0 61
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 0
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 1
47077: PUSH
47078: LD_INT 0
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 1
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: LD_INT 1
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: LD_INT 0
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 1
47118: NEG
47119: PUSH
47120: LD_INT 1
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47137: LD_ADDR_VAR 0 62
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: LD_INT 1
47157: NEG
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: LD_INT 0
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 1
47175: PUSH
47176: LD_INT 1
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: LD_INT 1
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 1
47195: NEG
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 1
47206: NEG
47207: PUSH
47208: LD_INT 1
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47225: LD_ADDR_VAR 0 63
47229: PUSH
47230: LD_INT 0
47232: PUSH
47233: LD_INT 0
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: PUSH
47264: LD_INT 1
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 1
47283: NEG
47284: PUSH
47285: LD_INT 0
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 1
47294: NEG
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47313: LD_ADDR_VAR 0 64
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: LD_INT 1
47333: NEG
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: LD_INT 1
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 0
47361: PUSH
47362: LD_INT 1
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 1
47382: NEG
47383: PUSH
47384: LD_INT 1
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: ST_TO_ADDR
// end ; 1 :
47401: GO 53298
47403: LD_INT 1
47405: DOUBLE
47406: EQUAL
47407: IFTRUE 47411
47409: GO 50034
47411: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47412: LD_ADDR_VAR 0 11
47416: PUSH
47417: LD_INT 1
47419: NEG
47420: PUSH
47421: LD_INT 3
47423: NEG
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 0
47431: PUSH
47432: LD_INT 3
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: LD_INT 2
47445: NEG
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: LIST
47455: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47456: LD_ADDR_VAR 0 12
47460: PUSH
47461: LD_INT 2
47463: PUSH
47464: LD_INT 1
47466: NEG
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 3
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 3
47484: PUSH
47485: LD_INT 1
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: LIST
47496: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47497: LD_ADDR_VAR 0 13
47501: PUSH
47502: LD_INT 3
47504: PUSH
47505: LD_INT 2
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 3
47514: PUSH
47515: LD_INT 3
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 2
47524: PUSH
47525: LD_INT 3
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: LIST
47536: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47537: LD_ADDR_VAR 0 14
47541: PUSH
47542: LD_INT 1
47544: PUSH
47545: LD_INT 3
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 0
47554: PUSH
47555: LD_INT 3
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: LD_INT 2
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: LIST
47577: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47578: LD_ADDR_VAR 0 15
47582: PUSH
47583: LD_INT 2
47585: NEG
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 3
47596: NEG
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 3
47607: NEG
47608: PUSH
47609: LD_INT 1
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: LIST
47621: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47622: LD_ADDR_VAR 0 16
47626: PUSH
47627: LD_INT 2
47629: NEG
47630: PUSH
47631: LD_INT 3
47633: NEG
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 3
47641: NEG
47642: PUSH
47643: LD_INT 2
47645: NEG
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 3
47653: NEG
47654: PUSH
47655: LD_INT 3
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: LIST
47667: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47668: LD_ADDR_VAR 0 17
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: LD_INT 3
47679: NEG
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: LD_INT 3
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: LD_INT 2
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: LIST
47711: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47712: LD_ADDR_VAR 0 18
47716: PUSH
47717: LD_INT 2
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 3
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 3
47740: PUSH
47741: LD_INT 1
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: LIST
47752: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47753: LD_ADDR_VAR 0 19
47757: PUSH
47758: LD_INT 3
47760: PUSH
47761: LD_INT 2
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 3
47770: PUSH
47771: LD_INT 3
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 2
47780: PUSH
47781: LD_INT 3
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: LIST
47792: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47793: LD_ADDR_VAR 0 20
47797: PUSH
47798: LD_INT 1
47800: PUSH
47801: LD_INT 3
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: LD_INT 3
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: LD_INT 2
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: LIST
47833: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47834: LD_ADDR_VAR 0 21
47838: PUSH
47839: LD_INT 2
47841: NEG
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 3
47852: NEG
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 3
47863: NEG
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: LIST
47877: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47878: LD_ADDR_VAR 0 22
47882: PUSH
47883: LD_INT 2
47885: NEG
47886: PUSH
47887: LD_INT 3
47889: NEG
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 3
47897: NEG
47898: PUSH
47899: LD_INT 2
47901: NEG
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 3
47909: NEG
47910: PUSH
47911: LD_INT 3
47913: NEG
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: LIST
47923: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47924: LD_ADDR_VAR 0 23
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: LD_INT 3
47934: NEG
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: NEG
47943: PUSH
47944: LD_INT 4
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: PUSH
47955: LD_INT 3
47957: NEG
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: LIST
47967: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47968: LD_ADDR_VAR 0 24
47972: PUSH
47973: LD_INT 3
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 3
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 4
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: LIST
48008: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48009: LD_ADDR_VAR 0 25
48013: PUSH
48014: LD_INT 3
48016: PUSH
48017: LD_INT 3
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 4
48026: PUSH
48027: LD_INT 3
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 3
48036: PUSH
48037: LD_INT 4
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: LIST
48048: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48049: LD_ADDR_VAR 0 26
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: LD_INT 3
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 1
48066: PUSH
48067: LD_INT 4
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: LD_INT 3
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: LIST
48089: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48090: LD_ADDR_VAR 0 27
48094: PUSH
48095: LD_INT 3
48097: NEG
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 3
48108: NEG
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 4
48119: NEG
48120: PUSH
48121: LD_INT 1
48123: NEG
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: LIST
48133: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48134: LD_ADDR_VAR 0 28
48138: PUSH
48139: LD_INT 3
48141: NEG
48142: PUSH
48143: LD_INT 3
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 3
48153: NEG
48154: PUSH
48155: LD_INT 4
48157: NEG
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 4
48165: NEG
48166: PUSH
48167: LD_INT 3
48169: NEG
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: LIST
48179: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48180: LD_ADDR_VAR 0 29
48184: PUSH
48185: LD_INT 1
48187: NEG
48188: PUSH
48189: LD_INT 3
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: LD_INT 3
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 1
48210: PUSH
48211: LD_INT 2
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 1
48221: NEG
48222: PUSH
48223: LD_INT 4
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: LD_INT 4
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: LD_INT 3
48247: NEG
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 1
48255: NEG
48256: PUSH
48257: LD_INT 5
48259: NEG
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: LD_INT 5
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: PUSH
48279: LD_INT 4
48281: NEG
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: LD_INT 6
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: LD_INT 6
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 1
48312: PUSH
48313: LD_INT 5
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48335: LD_ADDR_VAR 0 30
48339: PUSH
48340: LD_INT 2
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 3
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 3
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 3
48373: PUSH
48374: LD_INT 1
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 4
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 4
48394: PUSH
48395: LD_INT 1
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 4
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 5
48415: PUSH
48416: LD_INT 0
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 5
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 5
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 6
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 6
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48478: LD_ADDR_VAR 0 31
48482: PUSH
48483: LD_INT 3
48485: PUSH
48486: LD_INT 2
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 3
48495: PUSH
48496: LD_INT 3
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 2
48505: PUSH
48506: LD_INT 3
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 4
48515: PUSH
48516: LD_INT 3
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 4
48525: PUSH
48526: LD_INT 4
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 3
48535: PUSH
48536: LD_INT 4
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 5
48545: PUSH
48546: LD_INT 4
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 5
48555: PUSH
48556: LD_INT 5
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 4
48565: PUSH
48566: LD_INT 5
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 6
48575: PUSH
48576: LD_INT 5
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 6
48585: PUSH
48586: LD_INT 6
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 5
48595: PUSH
48596: LD_INT 6
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48617: LD_ADDR_VAR 0 32
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: LD_INT 3
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 0
48634: PUSH
48635: LD_INT 3
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: LD_INT 2
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 1
48655: PUSH
48656: LD_INT 4
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 0
48665: PUSH
48666: LD_INT 4
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 1
48675: NEG
48676: PUSH
48677: LD_INT 3
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 1
48686: PUSH
48687: LD_INT 5
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 0
48696: PUSH
48697: LD_INT 5
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 1
48706: NEG
48707: PUSH
48708: LD_INT 4
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: LD_INT 6
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: LD_INT 6
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 1
48737: NEG
48738: PUSH
48739: LD_INT 5
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48760: LD_ADDR_VAR 0 33
48764: PUSH
48765: LD_INT 2
48767: NEG
48768: PUSH
48769: LD_INT 1
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 3
48778: NEG
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 3
48789: NEG
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 3
48801: NEG
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 4
48812: NEG
48813: PUSH
48814: LD_INT 0
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 4
48823: NEG
48824: PUSH
48825: LD_INT 1
48827: NEG
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 4
48835: NEG
48836: PUSH
48837: LD_INT 1
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 5
48846: NEG
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 5
48857: NEG
48858: PUSH
48859: LD_INT 1
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 5
48869: NEG
48870: PUSH
48871: LD_INT 1
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 6
48880: NEG
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 6
48891: NEG
48892: PUSH
48893: LD_INT 1
48895: NEG
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48915: LD_ADDR_VAR 0 34
48919: PUSH
48920: LD_INT 2
48922: NEG
48923: PUSH
48924: LD_INT 3
48926: NEG
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 3
48934: NEG
48935: PUSH
48936: LD_INT 2
48938: NEG
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 3
48946: NEG
48947: PUSH
48948: LD_INT 3
48950: NEG
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 3
48958: NEG
48959: PUSH
48960: LD_INT 4
48962: NEG
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 4
48970: NEG
48971: PUSH
48972: LD_INT 3
48974: NEG
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 4
48982: NEG
48983: PUSH
48984: LD_INT 4
48986: NEG
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 4
48994: NEG
48995: PUSH
48996: LD_INT 5
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 5
49006: NEG
49007: PUSH
49008: LD_INT 4
49010: NEG
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 5
49018: NEG
49019: PUSH
49020: LD_INT 5
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 5
49030: NEG
49031: PUSH
49032: LD_INT 6
49034: NEG
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 6
49042: NEG
49043: PUSH
49044: LD_INT 5
49046: NEG
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 6
49054: NEG
49055: PUSH
49056: LD_INT 6
49058: NEG
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49078: LD_ADDR_VAR 0 41
49082: PUSH
49083: LD_INT 0
49085: PUSH
49086: LD_INT 2
49088: NEG
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: LD_INT 3
49100: NEG
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 1
49108: PUSH
49109: LD_INT 2
49111: NEG
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: LIST
49121: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49122: LD_ADDR_VAR 0 42
49126: PUSH
49127: LD_INT 2
49129: PUSH
49130: LD_INT 0
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 2
49139: PUSH
49140: LD_INT 1
49142: NEG
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 3
49150: PUSH
49151: LD_INT 1
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: LIST
49162: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49163: LD_ADDR_VAR 0 43
49167: PUSH
49168: LD_INT 2
49170: PUSH
49171: LD_INT 2
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 3
49180: PUSH
49181: LD_INT 2
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 2
49190: PUSH
49191: LD_INT 3
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: LIST
49202: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49203: LD_ADDR_VAR 0 44
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: LD_INT 2
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 1
49220: PUSH
49221: LD_INT 3
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: NEG
49231: PUSH
49232: LD_INT 2
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: LIST
49243: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49244: LD_ADDR_VAR 0 45
49248: PUSH
49249: LD_INT 2
49251: NEG
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 2
49262: NEG
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 3
49273: NEG
49274: PUSH
49275: LD_INT 1
49277: NEG
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: LIST
49287: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49288: LD_ADDR_VAR 0 46
49292: PUSH
49293: LD_INT 2
49295: NEG
49296: PUSH
49297: LD_INT 2
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 2
49307: NEG
49308: PUSH
49309: LD_INT 3
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 3
49319: NEG
49320: PUSH
49321: LD_INT 2
49323: NEG
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: LIST
49333: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49334: LD_ADDR_VAR 0 47
49338: PUSH
49339: LD_INT 2
49341: NEG
49342: PUSH
49343: LD_INT 3
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 1
49353: NEG
49354: PUSH
49355: LD_INT 3
49357: NEG
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49367: LD_ADDR_VAR 0 48
49371: PUSH
49372: LD_INT 1
49374: PUSH
49375: LD_INT 2
49377: NEG
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 2
49385: PUSH
49386: LD_INT 1
49388: NEG
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49398: LD_ADDR_VAR 0 49
49402: PUSH
49403: LD_INT 3
49405: PUSH
49406: LD_INT 1
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 3
49415: PUSH
49416: LD_INT 2
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49427: LD_ADDR_VAR 0 50
49431: PUSH
49432: LD_INT 2
49434: PUSH
49435: LD_INT 3
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: LD_INT 3
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49456: LD_ADDR_VAR 0 51
49460: PUSH
49461: LD_INT 1
49463: NEG
49464: PUSH
49465: LD_INT 2
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 2
49474: NEG
49475: PUSH
49476: LD_INT 1
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49487: LD_ADDR_VAR 0 52
49491: PUSH
49492: LD_INT 3
49494: NEG
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 3
49506: NEG
49507: PUSH
49508: LD_INT 2
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49520: LD_ADDR_VAR 0 53
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: LD_INT 3
49531: NEG
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: LD_INT 3
49542: NEG
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 1
49550: PUSH
49551: LD_INT 2
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: LIST
49563: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49564: LD_ADDR_VAR 0 54
49568: PUSH
49569: LD_INT 2
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 3
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 3
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: LIST
49604: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49605: LD_ADDR_VAR 0 55
49609: PUSH
49610: LD_INT 3
49612: PUSH
49613: LD_INT 2
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 3
49622: PUSH
49623: LD_INT 3
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 2
49632: PUSH
49633: LD_INT 3
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: LIST
49644: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49645: LD_ADDR_VAR 0 56
49649: PUSH
49650: LD_INT 1
49652: PUSH
49653: LD_INT 3
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: LD_INT 3
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: LD_INT 2
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: LIST
49685: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49686: LD_ADDR_VAR 0 57
49690: PUSH
49691: LD_INT 2
49693: NEG
49694: PUSH
49695: LD_INT 1
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 3
49704: NEG
49705: PUSH
49706: LD_INT 0
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 3
49715: NEG
49716: PUSH
49717: LD_INT 1
49719: NEG
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: LIST
49729: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49730: LD_ADDR_VAR 0 58
49734: PUSH
49735: LD_INT 2
49737: NEG
49738: PUSH
49739: LD_INT 3
49741: NEG
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 3
49749: NEG
49750: PUSH
49751: LD_INT 2
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 3
49761: NEG
49762: PUSH
49763: LD_INT 3
49765: NEG
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: LIST
49775: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49776: LD_ADDR_VAR 0 59
49780: PUSH
49781: LD_INT 1
49783: NEG
49784: PUSH
49785: LD_INT 2
49787: NEG
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: LD_INT 2
49798: NEG
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 1
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: LIST
49819: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49820: LD_ADDR_VAR 0 60
49824: PUSH
49825: LD_INT 1
49827: PUSH
49828: LD_INT 1
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 2
49838: PUSH
49839: LD_INT 0
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 2
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: LIST
49860: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49861: LD_ADDR_VAR 0 61
49865: PUSH
49866: LD_INT 2
49868: PUSH
49869: LD_INT 1
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 2
49878: PUSH
49879: LD_INT 2
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: LD_INT 2
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: LIST
49900: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49901: LD_ADDR_VAR 0 62
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: LD_INT 2
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 0
49918: PUSH
49919: LD_INT 2
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: LD_INT 1
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: LIST
49941: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49942: LD_ADDR_VAR 0 63
49946: PUSH
49947: LD_INT 1
49949: NEG
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 2
49960: NEG
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 2
49971: NEG
49972: PUSH
49973: LD_INT 1
49975: NEG
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: LIST
49985: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49986: LD_ADDR_VAR 0 64
49990: PUSH
49991: LD_INT 1
49993: NEG
49994: PUSH
49995: LD_INT 2
49997: NEG
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 2
50005: NEG
50006: PUSH
50007: LD_INT 1
50009: NEG
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 2
50017: NEG
50018: PUSH
50019: LD_INT 2
50021: NEG
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: LIST
50031: ST_TO_ADDR
// end ; 2 :
50032: GO 53298
50034: LD_INT 2
50036: DOUBLE
50037: EQUAL
50038: IFTRUE 50042
50040: GO 53297
50042: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50043: LD_ADDR_VAR 0 29
50047: PUSH
50048: LD_INT 4
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 4
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 5
50071: PUSH
50072: LD_INT 0
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 5
50081: PUSH
50082: LD_INT 1
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 4
50091: PUSH
50092: LD_INT 1
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 3
50101: PUSH
50102: LD_INT 0
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 3
50111: PUSH
50112: LD_INT 1
50114: NEG
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 3
50122: PUSH
50123: LD_INT 2
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 5
50133: PUSH
50134: LD_INT 2
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 3
50143: PUSH
50144: LD_INT 3
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 3
50153: PUSH
50154: LD_INT 2
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 4
50163: PUSH
50164: LD_INT 3
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 4
50173: PUSH
50174: LD_INT 4
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 3
50183: PUSH
50184: LD_INT 4
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 2
50193: PUSH
50194: LD_INT 3
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 2
50203: PUSH
50204: LD_INT 2
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 4
50213: PUSH
50214: LD_INT 2
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 2
50223: PUSH
50224: LD_INT 4
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 0
50233: PUSH
50234: LD_INT 4
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 0
50243: PUSH
50244: LD_INT 3
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 1
50253: PUSH
50254: LD_INT 4
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 1
50263: PUSH
50264: LD_INT 5
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: LD_INT 5
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: NEG
50284: PUSH
50285: LD_INT 4
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 1
50294: NEG
50295: PUSH
50296: LD_INT 3
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 2
50305: PUSH
50306: LD_INT 5
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 2
50315: NEG
50316: PUSH
50317: LD_INT 3
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 3
50326: NEG
50327: PUSH
50328: LD_INT 0
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 3
50337: NEG
50338: PUSH
50339: LD_INT 1
50341: NEG
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 2
50349: NEG
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 2
50360: NEG
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 3
50371: NEG
50372: PUSH
50373: LD_INT 1
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 4
50382: NEG
50383: PUSH
50384: LD_INT 0
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 4
50393: NEG
50394: PUSH
50395: LD_INT 1
50397: NEG
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 4
50405: NEG
50406: PUSH
50407: LD_INT 2
50409: NEG
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 2
50417: NEG
50418: PUSH
50419: LD_INT 2
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 4
50428: NEG
50429: PUSH
50430: LD_INT 4
50432: NEG
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 4
50440: NEG
50441: PUSH
50442: LD_INT 5
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 3
50452: NEG
50453: PUSH
50454: LD_INT 4
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 3
50464: NEG
50465: PUSH
50466: LD_INT 3
50468: NEG
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 4
50476: NEG
50477: PUSH
50478: LD_INT 3
50480: NEG
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 5
50488: NEG
50489: PUSH
50490: LD_INT 4
50492: NEG
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 5
50500: NEG
50501: PUSH
50502: LD_INT 5
50504: NEG
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 3
50512: NEG
50513: PUSH
50514: LD_INT 5
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 5
50524: NEG
50525: PUSH
50526: LD_INT 3
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50581: LD_ADDR_VAR 0 30
50585: PUSH
50586: LD_INT 4
50588: PUSH
50589: LD_INT 4
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 4
50598: PUSH
50599: LD_INT 3
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 5
50608: PUSH
50609: LD_INT 4
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 5
50618: PUSH
50619: LD_INT 5
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 4
50628: PUSH
50629: LD_INT 5
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 3
50638: PUSH
50639: LD_INT 4
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 3
50648: PUSH
50649: LD_INT 3
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 5
50658: PUSH
50659: LD_INT 3
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 3
50668: PUSH
50669: LD_INT 5
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: LD_INT 3
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: LD_INT 2
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 1
50698: PUSH
50699: LD_INT 3
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 1
50708: PUSH
50709: LD_INT 4
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 0
50718: PUSH
50719: LD_INT 4
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: NEG
50729: PUSH
50730: LD_INT 3
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: LD_INT 2
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 2
50750: PUSH
50751: LD_INT 4
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 2
50760: NEG
50761: PUSH
50762: LD_INT 2
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 4
50771: NEG
50772: PUSH
50773: LD_INT 0
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 4
50782: NEG
50783: PUSH
50784: LD_INT 1
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 3
50794: NEG
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 3
50805: NEG
50806: PUSH
50807: LD_INT 1
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 4
50816: NEG
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 5
50827: NEG
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 5
50838: NEG
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 5
50850: NEG
50851: PUSH
50852: LD_INT 2
50854: NEG
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 3
50862: NEG
50863: PUSH
50864: LD_INT 2
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 3
50873: NEG
50874: PUSH
50875: LD_INT 3
50877: NEG
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 3
50885: NEG
50886: PUSH
50887: LD_INT 4
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 2
50897: NEG
50898: PUSH
50899: LD_INT 3
50901: NEG
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 2
50909: NEG
50910: PUSH
50911: LD_INT 2
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 3
50921: NEG
50922: PUSH
50923: LD_INT 2
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 4
50933: NEG
50934: PUSH
50935: LD_INT 3
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 4
50945: NEG
50946: PUSH
50947: LD_INT 4
50949: NEG
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 2
50957: NEG
50958: PUSH
50959: LD_INT 4
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 4
50969: NEG
50970: PUSH
50971: LD_INT 2
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: LD_INT 4
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 0
50992: PUSH
50993: LD_INT 5
50995: NEG
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 1
51003: PUSH
51004: LD_INT 4
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 1
51014: PUSH
51015: LD_INT 3
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: LD_INT 3
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: PUSH
51038: LD_INT 4
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: NEG
51049: PUSH
51050: LD_INT 5
51052: NEG
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 2
51060: PUSH
51061: LD_INT 3
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 2
51071: NEG
51072: PUSH
51073: LD_INT 5
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51128: LD_ADDR_VAR 0 31
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: LD_INT 4
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: LD_INT 3
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 1
51155: PUSH
51156: LD_INT 4
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: PUSH
51166: LD_INT 5
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 0
51175: PUSH
51176: LD_INT 5
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 1
51185: NEG
51186: PUSH
51187: LD_INT 4
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 1
51196: NEG
51197: PUSH
51198: LD_INT 3
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 2
51207: PUSH
51208: LD_INT 5
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 2
51217: NEG
51218: PUSH
51219: LD_INT 3
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 3
51228: NEG
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 3
51239: NEG
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 2
51251: NEG
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 2
51262: NEG
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 3
51273: NEG
51274: PUSH
51275: LD_INT 1
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 4
51284: NEG
51285: PUSH
51286: LD_INT 0
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 4
51295: NEG
51296: PUSH
51297: LD_INT 1
51299: NEG
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 4
51307: NEG
51308: PUSH
51309: LD_INT 2
51311: NEG
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 2
51319: NEG
51320: PUSH
51321: LD_INT 2
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 4
51330: NEG
51331: PUSH
51332: LD_INT 4
51334: NEG
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 4
51342: NEG
51343: PUSH
51344: LD_INT 5
51346: NEG
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 3
51354: NEG
51355: PUSH
51356: LD_INT 4
51358: NEG
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 3
51366: NEG
51367: PUSH
51368: LD_INT 3
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 4
51378: NEG
51379: PUSH
51380: LD_INT 3
51382: NEG
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 5
51390: NEG
51391: PUSH
51392: LD_INT 4
51394: NEG
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 5
51402: NEG
51403: PUSH
51404: LD_INT 5
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 3
51414: NEG
51415: PUSH
51416: LD_INT 5
51418: NEG
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 5
51426: NEG
51427: PUSH
51428: LD_INT 3
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: LD_INT 3
51441: NEG
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: LD_INT 4
51452: NEG
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 1
51460: PUSH
51461: LD_INT 3
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: LD_INT 2
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: LD_INT 2
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 1
51493: NEG
51494: PUSH
51495: LD_INT 3
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: LD_INT 4
51509: NEG
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 2
51517: PUSH
51518: LD_INT 2
51520: NEG
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 2
51528: NEG
51529: PUSH
51530: LD_INT 4
51532: NEG
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 4
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 4
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 5
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 5
51571: PUSH
51572: LD_INT 1
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 4
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 3
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 3
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 3
51612: PUSH
51613: LD_INT 2
51615: NEG
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 5
51623: PUSH
51624: LD_INT 2
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51678: LD_ADDR_VAR 0 32
51682: PUSH
51683: LD_INT 4
51685: NEG
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 4
51696: NEG
51697: PUSH
51698: LD_INT 1
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 3
51708: NEG
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 3
51719: NEG
51720: PUSH
51721: LD_INT 1
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 4
51730: NEG
51731: PUSH
51732: LD_INT 1
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 5
51741: NEG
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 5
51752: NEG
51753: PUSH
51754: LD_INT 1
51756: NEG
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 5
51764: NEG
51765: PUSH
51766: LD_INT 2
51768: NEG
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 3
51776: NEG
51777: PUSH
51778: LD_INT 2
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 3
51787: NEG
51788: PUSH
51789: LD_INT 3
51791: NEG
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 3
51799: NEG
51800: PUSH
51801: LD_INT 4
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 2
51811: NEG
51812: PUSH
51813: LD_INT 3
51815: NEG
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 2
51823: NEG
51824: PUSH
51825: LD_INT 2
51827: NEG
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 3
51835: NEG
51836: PUSH
51837: LD_INT 2
51839: NEG
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 4
51847: NEG
51848: PUSH
51849: LD_INT 3
51851: NEG
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 4
51859: NEG
51860: PUSH
51861: LD_INT 4
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 2
51871: NEG
51872: PUSH
51873: LD_INT 4
51875: NEG
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 4
51883: NEG
51884: PUSH
51885: LD_INT 2
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: LD_INT 4
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 0
51906: PUSH
51907: LD_INT 5
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 1
51917: PUSH
51918: LD_INT 4
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: LD_INT 3
51931: NEG
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: LD_INT 3
51942: NEG
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: LD_INT 4
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 1
51962: NEG
51963: PUSH
51964: LD_INT 5
51966: NEG
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 2
51974: PUSH
51975: LD_INT 3
51977: NEG
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 2
51985: NEG
51986: PUSH
51987: LD_INT 5
51989: NEG
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 3
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 3
52007: PUSH
52008: LD_INT 1
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 4
52018: PUSH
52019: LD_INT 0
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 4
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 3
52038: PUSH
52039: LD_INT 1
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 2
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 2
52058: PUSH
52059: LD_INT 1
52061: NEG
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 2
52069: PUSH
52070: LD_INT 2
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 4
52080: PUSH
52081: LD_INT 2
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 4
52090: PUSH
52091: LD_INT 4
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 4
52100: PUSH
52101: LD_INT 3
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 5
52110: PUSH
52111: LD_INT 4
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 5
52120: PUSH
52121: LD_INT 5
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 4
52130: PUSH
52131: LD_INT 5
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 3
52140: PUSH
52141: LD_INT 4
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 3
52150: PUSH
52151: LD_INT 3
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 5
52160: PUSH
52161: LD_INT 3
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 3
52170: PUSH
52171: LD_INT 5
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52225: LD_ADDR_VAR 0 33
52229: PUSH
52230: LD_INT 4
52232: NEG
52233: PUSH
52234: LD_INT 4
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 4
52244: NEG
52245: PUSH
52246: LD_INT 5
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 3
52256: NEG
52257: PUSH
52258: LD_INT 4
52260: NEG
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 3
52268: NEG
52269: PUSH
52270: LD_INT 3
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 4
52280: NEG
52281: PUSH
52282: LD_INT 3
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 5
52292: NEG
52293: PUSH
52294: LD_INT 4
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 5
52304: NEG
52305: PUSH
52306: LD_INT 5
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 3
52316: NEG
52317: PUSH
52318: LD_INT 5
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 5
52328: NEG
52329: PUSH
52330: LD_INT 3
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: LD_INT 3
52343: NEG
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: LD_INT 4
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: LD_INT 3
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: LD_INT 2
52376: NEG
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: LD_INT 2
52387: NEG
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: NEG
52396: PUSH
52397: LD_INT 3
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 1
52407: NEG
52408: PUSH
52409: LD_INT 4
52411: NEG
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 2
52419: PUSH
52420: LD_INT 2
52422: NEG
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 2
52430: NEG
52431: PUSH
52432: LD_INT 4
52434: NEG
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 4
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 4
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 5
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 5
52473: PUSH
52474: LD_INT 1
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 4
52483: PUSH
52484: LD_INT 1
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 3
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 3
52503: PUSH
52504: LD_INT 1
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 3
52514: PUSH
52515: LD_INT 2
52517: NEG
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 5
52525: PUSH
52526: LD_INT 2
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 3
52535: PUSH
52536: LD_INT 3
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 3
52545: PUSH
52546: LD_INT 2
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 4
52555: PUSH
52556: LD_INT 3
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 4
52565: PUSH
52566: LD_INT 4
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 3
52575: PUSH
52576: LD_INT 4
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 2
52585: PUSH
52586: LD_INT 3
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 2
52595: PUSH
52596: LD_INT 2
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 4
52605: PUSH
52606: LD_INT 2
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 2
52615: PUSH
52616: LD_INT 4
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: LD_INT 4
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 0
52635: PUSH
52636: LD_INT 3
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 1
52645: PUSH
52646: LD_INT 4
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: LD_INT 5
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: LD_INT 5
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: NEG
52676: PUSH
52677: LD_INT 4
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 1
52686: NEG
52687: PUSH
52688: LD_INT 3
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 2
52697: PUSH
52698: LD_INT 5
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 2
52707: NEG
52708: PUSH
52709: LD_INT 3
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52763: LD_ADDR_VAR 0 34
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: LD_INT 4
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: LD_INT 5
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 1
52792: PUSH
52793: LD_INT 4
52795: NEG
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 1
52803: PUSH
52804: LD_INT 3
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: LD_INT 3
52817: NEG
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: LD_INT 4
52829: NEG
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: LD_INT 5
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 2
52849: PUSH
52850: LD_INT 3
52852: NEG
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 2
52860: NEG
52861: PUSH
52862: LD_INT 5
52864: NEG
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 3
52872: PUSH
52873: LD_INT 0
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 3
52882: PUSH
52883: LD_INT 1
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 4
52893: PUSH
52894: LD_INT 0
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 4
52903: PUSH
52904: LD_INT 1
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 3
52913: PUSH
52914: LD_INT 1
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 2
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 2
52933: PUSH
52934: LD_INT 1
52936: NEG
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 2
52944: PUSH
52945: LD_INT 2
52947: NEG
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 4
52955: PUSH
52956: LD_INT 2
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 4
52965: PUSH
52966: LD_INT 4
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 4
52975: PUSH
52976: LD_INT 3
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 5
52985: PUSH
52986: LD_INT 4
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 5
52995: PUSH
52996: LD_INT 5
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 4
53005: PUSH
53006: LD_INT 5
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 3
53015: PUSH
53016: LD_INT 4
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 3
53025: PUSH
53026: LD_INT 3
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 5
53035: PUSH
53036: LD_INT 3
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 3
53045: PUSH
53046: LD_INT 5
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 0
53055: PUSH
53056: LD_INT 3
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: LD_INT 2
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 1
53075: PUSH
53076: LD_INT 3
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 1
53085: PUSH
53086: LD_INT 4
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: LD_INT 4
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 1
53105: NEG
53106: PUSH
53107: LD_INT 3
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 1
53116: NEG
53117: PUSH
53118: LD_INT 2
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 2
53127: PUSH
53128: LD_INT 4
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 2
53137: NEG
53138: PUSH
53139: LD_INT 2
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 4
53148: NEG
53149: PUSH
53150: LD_INT 0
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 4
53159: NEG
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 3
53171: NEG
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 3
53182: NEG
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 4
53193: NEG
53194: PUSH
53195: LD_INT 1
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 5
53204: NEG
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 5
53215: NEG
53216: PUSH
53217: LD_INT 1
53219: NEG
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 5
53227: NEG
53228: PUSH
53229: LD_INT 2
53231: NEG
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 3
53239: NEG
53240: PUSH
53241: LD_INT 2
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: ST_TO_ADDR
// end ; end ;
53295: GO 53298
53297: POP
// case btype of b_depot , b_warehouse :
53298: LD_VAR 0 1
53302: PUSH
53303: LD_INT 0
53305: DOUBLE
53306: EQUAL
53307: IFTRUE 53317
53309: LD_INT 1
53311: DOUBLE
53312: EQUAL
53313: IFTRUE 53317
53315: GO 53518
53317: POP
// case nation of nation_american :
53318: LD_VAR 0 5
53322: PUSH
53323: LD_INT 1
53325: DOUBLE
53326: EQUAL
53327: IFTRUE 53331
53329: GO 53387
53331: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53332: LD_ADDR_VAR 0 9
53336: PUSH
53337: LD_VAR 0 11
53341: PUSH
53342: LD_VAR 0 12
53346: PUSH
53347: LD_VAR 0 13
53351: PUSH
53352: LD_VAR 0 14
53356: PUSH
53357: LD_VAR 0 15
53361: PUSH
53362: LD_VAR 0 16
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: PUSH
53375: LD_VAR 0 4
53379: PUSH
53380: LD_INT 1
53382: PLUS
53383: ARRAY
53384: ST_TO_ADDR
53385: GO 53516
53387: LD_INT 2
53389: DOUBLE
53390: EQUAL
53391: IFTRUE 53395
53393: GO 53451
53395: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53396: LD_ADDR_VAR 0 9
53400: PUSH
53401: LD_VAR 0 17
53405: PUSH
53406: LD_VAR 0 18
53410: PUSH
53411: LD_VAR 0 19
53415: PUSH
53416: LD_VAR 0 20
53420: PUSH
53421: LD_VAR 0 21
53425: PUSH
53426: LD_VAR 0 22
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: PUSH
53439: LD_VAR 0 4
53443: PUSH
53444: LD_INT 1
53446: PLUS
53447: ARRAY
53448: ST_TO_ADDR
53449: GO 53516
53451: LD_INT 3
53453: DOUBLE
53454: EQUAL
53455: IFTRUE 53459
53457: GO 53515
53459: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53460: LD_ADDR_VAR 0 9
53464: PUSH
53465: LD_VAR 0 23
53469: PUSH
53470: LD_VAR 0 24
53474: PUSH
53475: LD_VAR 0 25
53479: PUSH
53480: LD_VAR 0 26
53484: PUSH
53485: LD_VAR 0 27
53489: PUSH
53490: LD_VAR 0 28
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: PUSH
53503: LD_VAR 0 4
53507: PUSH
53508: LD_INT 1
53510: PLUS
53511: ARRAY
53512: ST_TO_ADDR
53513: GO 53516
53515: POP
53516: GO 54071
53518: LD_INT 2
53520: DOUBLE
53521: EQUAL
53522: IFTRUE 53532
53524: LD_INT 3
53526: DOUBLE
53527: EQUAL
53528: IFTRUE 53532
53530: GO 53588
53532: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53533: LD_ADDR_VAR 0 9
53537: PUSH
53538: LD_VAR 0 29
53542: PUSH
53543: LD_VAR 0 30
53547: PUSH
53548: LD_VAR 0 31
53552: PUSH
53553: LD_VAR 0 32
53557: PUSH
53558: LD_VAR 0 33
53562: PUSH
53563: LD_VAR 0 34
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: PUSH
53576: LD_VAR 0 4
53580: PUSH
53581: LD_INT 1
53583: PLUS
53584: ARRAY
53585: ST_TO_ADDR
53586: GO 54071
53588: LD_INT 16
53590: DOUBLE
53591: EQUAL
53592: IFTRUE 53650
53594: LD_INT 17
53596: DOUBLE
53597: EQUAL
53598: IFTRUE 53650
53600: LD_INT 18
53602: DOUBLE
53603: EQUAL
53604: IFTRUE 53650
53606: LD_INT 19
53608: DOUBLE
53609: EQUAL
53610: IFTRUE 53650
53612: LD_INT 22
53614: DOUBLE
53615: EQUAL
53616: IFTRUE 53650
53618: LD_INT 20
53620: DOUBLE
53621: EQUAL
53622: IFTRUE 53650
53624: LD_INT 21
53626: DOUBLE
53627: EQUAL
53628: IFTRUE 53650
53630: LD_INT 23
53632: DOUBLE
53633: EQUAL
53634: IFTRUE 53650
53636: LD_INT 24
53638: DOUBLE
53639: EQUAL
53640: IFTRUE 53650
53642: LD_INT 25
53644: DOUBLE
53645: EQUAL
53646: IFTRUE 53650
53648: GO 53706
53650: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53651: LD_ADDR_VAR 0 9
53655: PUSH
53656: LD_VAR 0 35
53660: PUSH
53661: LD_VAR 0 36
53665: PUSH
53666: LD_VAR 0 37
53670: PUSH
53671: LD_VAR 0 38
53675: PUSH
53676: LD_VAR 0 39
53680: PUSH
53681: LD_VAR 0 40
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: PUSH
53694: LD_VAR 0 4
53698: PUSH
53699: LD_INT 1
53701: PLUS
53702: ARRAY
53703: ST_TO_ADDR
53704: GO 54071
53706: LD_INT 6
53708: DOUBLE
53709: EQUAL
53710: IFTRUE 53762
53712: LD_INT 7
53714: DOUBLE
53715: EQUAL
53716: IFTRUE 53762
53718: LD_INT 8
53720: DOUBLE
53721: EQUAL
53722: IFTRUE 53762
53724: LD_INT 13
53726: DOUBLE
53727: EQUAL
53728: IFTRUE 53762
53730: LD_INT 12
53732: DOUBLE
53733: EQUAL
53734: IFTRUE 53762
53736: LD_INT 15
53738: DOUBLE
53739: EQUAL
53740: IFTRUE 53762
53742: LD_INT 11
53744: DOUBLE
53745: EQUAL
53746: IFTRUE 53762
53748: LD_INT 14
53750: DOUBLE
53751: EQUAL
53752: IFTRUE 53762
53754: LD_INT 10
53756: DOUBLE
53757: EQUAL
53758: IFTRUE 53762
53760: GO 53818
53762: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53763: LD_ADDR_VAR 0 9
53767: PUSH
53768: LD_VAR 0 41
53772: PUSH
53773: LD_VAR 0 42
53777: PUSH
53778: LD_VAR 0 43
53782: PUSH
53783: LD_VAR 0 44
53787: PUSH
53788: LD_VAR 0 45
53792: PUSH
53793: LD_VAR 0 46
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: PUSH
53806: LD_VAR 0 4
53810: PUSH
53811: LD_INT 1
53813: PLUS
53814: ARRAY
53815: ST_TO_ADDR
53816: GO 54071
53818: LD_INT 36
53820: DOUBLE
53821: EQUAL
53822: IFTRUE 53826
53824: GO 53882
53826: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53827: LD_ADDR_VAR 0 9
53831: PUSH
53832: LD_VAR 0 47
53836: PUSH
53837: LD_VAR 0 48
53841: PUSH
53842: LD_VAR 0 49
53846: PUSH
53847: LD_VAR 0 50
53851: PUSH
53852: LD_VAR 0 51
53856: PUSH
53857: LD_VAR 0 52
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: PUSH
53870: LD_VAR 0 4
53874: PUSH
53875: LD_INT 1
53877: PLUS
53878: ARRAY
53879: ST_TO_ADDR
53880: GO 54071
53882: LD_INT 4
53884: DOUBLE
53885: EQUAL
53886: IFTRUE 53908
53888: LD_INT 5
53890: DOUBLE
53891: EQUAL
53892: IFTRUE 53908
53894: LD_INT 34
53896: DOUBLE
53897: EQUAL
53898: IFTRUE 53908
53900: LD_INT 37
53902: DOUBLE
53903: EQUAL
53904: IFTRUE 53908
53906: GO 53964
53908: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53909: LD_ADDR_VAR 0 9
53913: PUSH
53914: LD_VAR 0 53
53918: PUSH
53919: LD_VAR 0 54
53923: PUSH
53924: LD_VAR 0 55
53928: PUSH
53929: LD_VAR 0 56
53933: PUSH
53934: LD_VAR 0 57
53938: PUSH
53939: LD_VAR 0 58
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: PUSH
53952: LD_VAR 0 4
53956: PUSH
53957: LD_INT 1
53959: PLUS
53960: ARRAY
53961: ST_TO_ADDR
53962: GO 54071
53964: LD_INT 31
53966: DOUBLE
53967: EQUAL
53968: IFTRUE 54014
53970: LD_INT 32
53972: DOUBLE
53973: EQUAL
53974: IFTRUE 54014
53976: LD_INT 33
53978: DOUBLE
53979: EQUAL
53980: IFTRUE 54014
53982: LD_INT 27
53984: DOUBLE
53985: EQUAL
53986: IFTRUE 54014
53988: LD_INT 26
53990: DOUBLE
53991: EQUAL
53992: IFTRUE 54014
53994: LD_INT 28
53996: DOUBLE
53997: EQUAL
53998: IFTRUE 54014
54000: LD_INT 29
54002: DOUBLE
54003: EQUAL
54004: IFTRUE 54014
54006: LD_INT 30
54008: DOUBLE
54009: EQUAL
54010: IFTRUE 54014
54012: GO 54070
54014: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54015: LD_ADDR_VAR 0 9
54019: PUSH
54020: LD_VAR 0 59
54024: PUSH
54025: LD_VAR 0 60
54029: PUSH
54030: LD_VAR 0 61
54034: PUSH
54035: LD_VAR 0 62
54039: PUSH
54040: LD_VAR 0 63
54044: PUSH
54045: LD_VAR 0 64
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: PUSH
54058: LD_VAR 0 4
54062: PUSH
54063: LD_INT 1
54065: PLUS
54066: ARRAY
54067: ST_TO_ADDR
54068: GO 54071
54070: POP
// temp_list2 = [ ] ;
54071: LD_ADDR_VAR 0 10
54075: PUSH
54076: EMPTY
54077: ST_TO_ADDR
// for i in temp_list do
54078: LD_ADDR_VAR 0 8
54082: PUSH
54083: LD_VAR 0 9
54087: PUSH
54088: FOR_IN
54089: IFFALSE 54141
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54091: LD_ADDR_VAR 0 10
54095: PUSH
54096: LD_VAR 0 10
54100: PUSH
54101: LD_VAR 0 8
54105: PUSH
54106: LD_INT 1
54108: ARRAY
54109: PUSH
54110: LD_VAR 0 2
54114: PLUS
54115: PUSH
54116: LD_VAR 0 8
54120: PUSH
54121: LD_INT 2
54123: ARRAY
54124: PUSH
54125: LD_VAR 0 3
54129: PLUS
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: EMPTY
54136: LIST
54137: ADD
54138: ST_TO_ADDR
54139: GO 54088
54141: POP
54142: POP
// result = temp_list2 ;
54143: LD_ADDR_VAR 0 7
54147: PUSH
54148: LD_VAR 0 10
54152: ST_TO_ADDR
// end ;
54153: LD_VAR 0 7
54157: RET
// export function EnemyInRange ( unit , dist ) ; begin
54158: LD_INT 0
54160: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54161: LD_ADDR_VAR 0 3
54165: PUSH
54166: LD_VAR 0 1
54170: PPUSH
54171: CALL_OW 255
54175: PPUSH
54176: LD_VAR 0 1
54180: PPUSH
54181: CALL_OW 250
54185: PPUSH
54186: LD_VAR 0 1
54190: PPUSH
54191: CALL_OW 251
54195: PPUSH
54196: LD_VAR 0 2
54200: PPUSH
54201: CALL 27560 0 4
54205: PUSH
54206: LD_INT 4
54208: ARRAY
54209: ST_TO_ADDR
// end ;
54210: LD_VAR 0 3
54214: RET
// export function PlayerSeeMe ( unit ) ; begin
54215: LD_INT 0
54217: PPUSH
// result := See ( your_side , unit ) ;
54218: LD_ADDR_VAR 0 2
54222: PUSH
54223: LD_OWVAR 2
54227: PPUSH
54228: LD_VAR 0 1
54232: PPUSH
54233: CALL_OW 292
54237: ST_TO_ADDR
// end ;
54238: LD_VAR 0 2
54242: RET
// export function ReverseDir ( unit ) ; begin
54243: LD_INT 0
54245: PPUSH
// if not unit then
54246: LD_VAR 0 1
54250: NOT
54251: IFFALSE 54255
// exit ;
54253: GO 54278
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54255: LD_ADDR_VAR 0 2
54259: PUSH
54260: LD_VAR 0 1
54264: PPUSH
54265: CALL_OW 254
54269: PUSH
54270: LD_INT 3
54272: PLUS
54273: PUSH
54274: LD_INT 6
54276: MOD
54277: ST_TO_ADDR
// end ;
54278: LD_VAR 0 2
54282: RET
// export function ReverseArray ( array ) ; var i ; begin
54283: LD_INT 0
54285: PPUSH
54286: PPUSH
// if not array then
54287: LD_VAR 0 1
54291: NOT
54292: IFFALSE 54296
// exit ;
54294: GO 54351
// result := [ ] ;
54296: LD_ADDR_VAR 0 2
54300: PUSH
54301: EMPTY
54302: ST_TO_ADDR
// for i := array downto 1 do
54303: LD_ADDR_VAR 0 3
54307: PUSH
54308: DOUBLE
54309: LD_VAR 0 1
54313: INC
54314: ST_TO_ADDR
54315: LD_INT 1
54317: PUSH
54318: FOR_DOWNTO
54319: IFFALSE 54349
// result := Join ( result , array [ i ] ) ;
54321: LD_ADDR_VAR 0 2
54325: PUSH
54326: LD_VAR 0 2
54330: PPUSH
54331: LD_VAR 0 1
54335: PUSH
54336: LD_VAR 0 3
54340: ARRAY
54341: PPUSH
54342: CALL 58976 0 2
54346: ST_TO_ADDR
54347: GO 54318
54349: POP
54350: POP
// end ;
54351: LD_VAR 0 2
54355: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
54356: LD_INT 0
54358: PPUSH
54359: PPUSH
54360: PPUSH
54361: PPUSH
54362: PPUSH
54363: PPUSH
// if not unit or not hexes then
54364: LD_VAR 0 1
54368: NOT
54369: PUSH
54370: LD_VAR 0 2
54374: NOT
54375: OR
54376: IFFALSE 54380
// exit ;
54378: GO 54503
// dist := 9999 ;
54380: LD_ADDR_VAR 0 5
54384: PUSH
54385: LD_INT 9999
54387: ST_TO_ADDR
// for i = 1 to hexes do
54388: LD_ADDR_VAR 0 4
54392: PUSH
54393: DOUBLE
54394: LD_INT 1
54396: DEC
54397: ST_TO_ADDR
54398: LD_VAR 0 2
54402: PUSH
54403: FOR_TO
54404: IFFALSE 54491
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54406: LD_ADDR_VAR 0 6
54410: PUSH
54411: LD_VAR 0 1
54415: PPUSH
54416: LD_VAR 0 2
54420: PUSH
54421: LD_VAR 0 4
54425: ARRAY
54426: PUSH
54427: LD_INT 1
54429: ARRAY
54430: PPUSH
54431: LD_VAR 0 2
54435: PUSH
54436: LD_VAR 0 4
54440: ARRAY
54441: PUSH
54442: LD_INT 2
54444: ARRAY
54445: PPUSH
54446: CALL_OW 297
54450: ST_TO_ADDR
// if tdist < dist then
54451: LD_VAR 0 6
54455: PUSH
54456: LD_VAR 0 5
54460: LESS
54461: IFFALSE 54489
// begin hex := hexes [ i ] ;
54463: LD_ADDR_VAR 0 8
54467: PUSH
54468: LD_VAR 0 2
54472: PUSH
54473: LD_VAR 0 4
54477: ARRAY
54478: ST_TO_ADDR
// dist := tdist ;
54479: LD_ADDR_VAR 0 5
54483: PUSH
54484: LD_VAR 0 6
54488: ST_TO_ADDR
// end ; end ;
54489: GO 54403
54491: POP
54492: POP
// result := hex ;
54493: LD_ADDR_VAR 0 3
54497: PUSH
54498: LD_VAR 0 8
54502: ST_TO_ADDR
// end ;
54503: LD_VAR 0 3
54507: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54508: LD_INT 0
54510: PPUSH
54511: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54512: LD_VAR 0 1
54516: NOT
54517: PUSH
54518: LD_VAR 0 1
54522: PUSH
54523: LD_INT 21
54525: PUSH
54526: LD_INT 2
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 23
54535: PUSH
54536: LD_INT 2
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PPUSH
54547: CALL_OW 69
54551: IN
54552: NOT
54553: OR
54554: IFFALSE 54558
// exit ;
54556: GO 54605
// for i = 1 to 3 do
54558: LD_ADDR_VAR 0 3
54562: PUSH
54563: DOUBLE
54564: LD_INT 1
54566: DEC
54567: ST_TO_ADDR
54568: LD_INT 3
54570: PUSH
54571: FOR_TO
54572: IFFALSE 54603
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54574: LD_VAR 0 1
54578: PPUSH
54579: CALL_OW 250
54583: PPUSH
54584: LD_VAR 0 1
54588: PPUSH
54589: CALL_OW 251
54593: PPUSH
54594: LD_INT 1
54596: PPUSH
54597: CALL_OW 453
54601: GO 54571
54603: POP
54604: POP
// end ;
54605: LD_VAR 0 2
54609: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54610: LD_INT 0
54612: PPUSH
54613: PPUSH
54614: PPUSH
54615: PPUSH
54616: PPUSH
54617: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54618: LD_VAR 0 1
54622: NOT
54623: PUSH
54624: LD_VAR 0 2
54628: NOT
54629: OR
54630: PUSH
54631: LD_VAR 0 1
54635: PPUSH
54636: CALL_OW 314
54640: OR
54641: IFFALSE 54645
// exit ;
54643: GO 55086
// x := GetX ( enemy_unit ) ;
54645: LD_ADDR_VAR 0 7
54649: PUSH
54650: LD_VAR 0 2
54654: PPUSH
54655: CALL_OW 250
54659: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54660: LD_ADDR_VAR 0 8
54664: PUSH
54665: LD_VAR 0 2
54669: PPUSH
54670: CALL_OW 251
54674: ST_TO_ADDR
// if not x or not y then
54675: LD_VAR 0 7
54679: NOT
54680: PUSH
54681: LD_VAR 0 8
54685: NOT
54686: OR
54687: IFFALSE 54691
// exit ;
54689: GO 55086
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54691: LD_ADDR_VAR 0 6
54695: PUSH
54696: LD_VAR 0 7
54700: PPUSH
54701: LD_INT 0
54703: PPUSH
54704: LD_INT 4
54706: PPUSH
54707: CALL_OW 272
54711: PUSH
54712: LD_VAR 0 8
54716: PPUSH
54717: LD_INT 0
54719: PPUSH
54720: LD_INT 4
54722: PPUSH
54723: CALL_OW 273
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_VAR 0 7
54736: PPUSH
54737: LD_INT 1
54739: PPUSH
54740: LD_INT 4
54742: PPUSH
54743: CALL_OW 272
54747: PUSH
54748: LD_VAR 0 8
54752: PPUSH
54753: LD_INT 1
54755: PPUSH
54756: LD_INT 4
54758: PPUSH
54759: CALL_OW 273
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_VAR 0 7
54772: PPUSH
54773: LD_INT 2
54775: PPUSH
54776: LD_INT 4
54778: PPUSH
54779: CALL_OW 272
54783: PUSH
54784: LD_VAR 0 8
54788: PPUSH
54789: LD_INT 2
54791: PPUSH
54792: LD_INT 4
54794: PPUSH
54795: CALL_OW 273
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_VAR 0 7
54808: PPUSH
54809: LD_INT 3
54811: PPUSH
54812: LD_INT 4
54814: PPUSH
54815: CALL_OW 272
54819: PUSH
54820: LD_VAR 0 8
54824: PPUSH
54825: LD_INT 3
54827: PPUSH
54828: LD_INT 4
54830: PPUSH
54831: CALL_OW 273
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_VAR 0 7
54844: PPUSH
54845: LD_INT 4
54847: PPUSH
54848: LD_INT 4
54850: PPUSH
54851: CALL_OW 272
54855: PUSH
54856: LD_VAR 0 8
54860: PPUSH
54861: LD_INT 4
54863: PPUSH
54864: LD_INT 4
54866: PPUSH
54867: CALL_OW 273
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_VAR 0 7
54880: PPUSH
54881: LD_INT 5
54883: PPUSH
54884: LD_INT 4
54886: PPUSH
54887: CALL_OW 272
54891: PUSH
54892: LD_VAR 0 8
54896: PPUSH
54897: LD_INT 5
54899: PPUSH
54900: LD_INT 4
54902: PPUSH
54903: CALL_OW 273
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: ST_TO_ADDR
// for i = tmp downto 1 do
54920: LD_ADDR_VAR 0 4
54924: PUSH
54925: DOUBLE
54926: LD_VAR 0 6
54930: INC
54931: ST_TO_ADDR
54932: LD_INT 1
54934: PUSH
54935: FOR_DOWNTO
54936: IFFALSE 55037
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54938: LD_VAR 0 6
54942: PUSH
54943: LD_VAR 0 4
54947: ARRAY
54948: PUSH
54949: LD_INT 1
54951: ARRAY
54952: PPUSH
54953: LD_VAR 0 6
54957: PUSH
54958: LD_VAR 0 4
54962: ARRAY
54963: PUSH
54964: LD_INT 2
54966: ARRAY
54967: PPUSH
54968: CALL_OW 488
54972: NOT
54973: PUSH
54974: LD_VAR 0 6
54978: PUSH
54979: LD_VAR 0 4
54983: ARRAY
54984: PUSH
54985: LD_INT 1
54987: ARRAY
54988: PPUSH
54989: LD_VAR 0 6
54993: PUSH
54994: LD_VAR 0 4
54998: ARRAY
54999: PUSH
55000: LD_INT 2
55002: ARRAY
55003: PPUSH
55004: CALL_OW 428
55008: PUSH
55009: LD_INT 0
55011: NONEQUAL
55012: OR
55013: IFFALSE 55035
// tmp := Delete ( tmp , i ) ;
55015: LD_ADDR_VAR 0 6
55019: PUSH
55020: LD_VAR 0 6
55024: PPUSH
55025: LD_VAR 0 4
55029: PPUSH
55030: CALL_OW 3
55034: ST_TO_ADDR
55035: GO 54935
55037: POP
55038: POP
// j := GetClosestHex ( unit , tmp ) ;
55039: LD_ADDR_VAR 0 5
55043: PUSH
55044: LD_VAR 0 1
55048: PPUSH
55049: LD_VAR 0 6
55053: PPUSH
55054: CALL 54356 0 2
55058: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55059: LD_VAR 0 1
55063: PPUSH
55064: LD_VAR 0 5
55068: PUSH
55069: LD_INT 1
55071: ARRAY
55072: PPUSH
55073: LD_VAR 0 5
55077: PUSH
55078: LD_INT 2
55080: ARRAY
55081: PPUSH
55082: CALL_OW 111
// end ;
55086: LD_VAR 0 3
55090: RET
// export function PrepareApemanSoldier ( ) ; begin
55091: LD_INT 0
55093: PPUSH
// uc_nation := 0 ;
55094: LD_ADDR_OWVAR 21
55098: PUSH
55099: LD_INT 0
55101: ST_TO_ADDR
// hc_sex := sex_male ;
55102: LD_ADDR_OWVAR 27
55106: PUSH
55107: LD_INT 1
55109: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
55110: LD_ADDR_OWVAR 28
55114: PUSH
55115: LD_INT 15
55117: ST_TO_ADDR
// hc_gallery :=  ;
55118: LD_ADDR_OWVAR 33
55122: PUSH
55123: LD_STRING 
55125: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55126: LD_ADDR_OWVAR 31
55130: PUSH
55131: LD_INT 0
55133: PPUSH
55134: LD_INT 3
55136: PPUSH
55137: CALL_OW 12
55141: PUSH
55142: LD_INT 0
55144: PPUSH
55145: LD_INT 3
55147: PPUSH
55148: CALL_OW 12
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: ST_TO_ADDR
// end ;
55165: LD_VAR 0 1
55169: RET
// export function PrepareApemanEngineer ( ) ; begin
55170: LD_INT 0
55172: PPUSH
// uc_nation := 0 ;
55173: LD_ADDR_OWVAR 21
55177: PUSH
55178: LD_INT 0
55180: ST_TO_ADDR
// hc_sex := sex_male ;
55181: LD_ADDR_OWVAR 27
55185: PUSH
55186: LD_INT 1
55188: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
55189: LD_ADDR_OWVAR 28
55193: PUSH
55194: LD_INT 16
55196: ST_TO_ADDR
// hc_gallery :=  ;
55197: LD_ADDR_OWVAR 33
55201: PUSH
55202: LD_STRING 
55204: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55205: LD_ADDR_OWVAR 31
55209: PUSH
55210: LD_INT 0
55212: PPUSH
55213: LD_INT 3
55215: PPUSH
55216: CALL_OW 12
55220: PUSH
55221: LD_INT 0
55223: PPUSH
55224: LD_INT 3
55226: PPUSH
55227: CALL_OW 12
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: LD_INT 0
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: ST_TO_ADDR
// end ;
55244: LD_VAR 0 1
55248: RET
// export function PrepareApeman ( agressivity ) ; begin
55249: LD_INT 0
55251: PPUSH
// uc_side := 0 ;
55252: LD_ADDR_OWVAR 20
55256: PUSH
55257: LD_INT 0
55259: ST_TO_ADDR
// uc_nation := 0 ;
55260: LD_ADDR_OWVAR 21
55264: PUSH
55265: LD_INT 0
55267: ST_TO_ADDR
// hc_sex := sex_male ;
55268: LD_ADDR_OWVAR 27
55272: PUSH
55273: LD_INT 1
55275: ST_TO_ADDR
// hc_class := class_apeman ;
55276: LD_ADDR_OWVAR 28
55280: PUSH
55281: LD_INT 12
55283: ST_TO_ADDR
// hc_gallery :=  ;
55284: LD_ADDR_OWVAR 33
55288: PUSH
55289: LD_STRING 
55291: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55292: LD_ADDR_OWVAR 35
55296: PUSH
55297: LD_VAR 0 1
55301: NEG
55302: PPUSH
55303: LD_VAR 0 1
55307: PPUSH
55308: CALL_OW 12
55312: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55313: LD_ADDR_OWVAR 31
55317: PUSH
55318: LD_INT 0
55320: PPUSH
55321: LD_INT 3
55323: PPUSH
55324: CALL_OW 12
55328: PUSH
55329: LD_INT 0
55331: PPUSH
55332: LD_INT 3
55334: PPUSH
55335: CALL_OW 12
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: ST_TO_ADDR
// end ;
55352: LD_VAR 0 2
55356: RET
// export function PrepareTiger ( agressivity ) ; begin
55357: LD_INT 0
55359: PPUSH
// uc_side := 0 ;
55360: LD_ADDR_OWVAR 20
55364: PUSH
55365: LD_INT 0
55367: ST_TO_ADDR
// uc_nation := 0 ;
55368: LD_ADDR_OWVAR 21
55372: PUSH
55373: LD_INT 0
55375: ST_TO_ADDR
// hc_class := class_tiger ;
55376: LD_ADDR_OWVAR 28
55380: PUSH
55381: LD_INT 14
55383: ST_TO_ADDR
// hc_gallery :=  ;
55384: LD_ADDR_OWVAR 33
55388: PUSH
55389: LD_STRING 
55391: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55392: LD_ADDR_OWVAR 35
55396: PUSH
55397: LD_VAR 0 1
55401: NEG
55402: PPUSH
55403: LD_VAR 0 1
55407: PPUSH
55408: CALL_OW 12
55412: ST_TO_ADDR
// end ;
55413: LD_VAR 0 2
55417: RET
// export function PrepareEnchidna ( ) ; begin
55418: LD_INT 0
55420: PPUSH
// uc_side := 0 ;
55421: LD_ADDR_OWVAR 20
55425: PUSH
55426: LD_INT 0
55428: ST_TO_ADDR
// uc_nation := 0 ;
55429: LD_ADDR_OWVAR 21
55433: PUSH
55434: LD_INT 0
55436: ST_TO_ADDR
// hc_class := class_baggie ;
55437: LD_ADDR_OWVAR 28
55441: PUSH
55442: LD_INT 13
55444: ST_TO_ADDR
// hc_gallery :=  ;
55445: LD_ADDR_OWVAR 33
55449: PUSH
55450: LD_STRING 
55452: ST_TO_ADDR
// end ;
55453: LD_VAR 0 1
55457: RET
// export function PrepareFrog ( ) ; begin
55458: LD_INT 0
55460: PPUSH
// uc_side := 0 ;
55461: LD_ADDR_OWVAR 20
55465: PUSH
55466: LD_INT 0
55468: ST_TO_ADDR
// uc_nation := 0 ;
55469: LD_ADDR_OWVAR 21
55473: PUSH
55474: LD_INT 0
55476: ST_TO_ADDR
// hc_class := class_frog ;
55477: LD_ADDR_OWVAR 28
55481: PUSH
55482: LD_INT 19
55484: ST_TO_ADDR
// hc_gallery :=  ;
55485: LD_ADDR_OWVAR 33
55489: PUSH
55490: LD_STRING 
55492: ST_TO_ADDR
// end ;
55493: LD_VAR 0 1
55497: RET
// export function PrepareFish ( ) ; begin
55498: LD_INT 0
55500: PPUSH
// uc_side := 0 ;
55501: LD_ADDR_OWVAR 20
55505: PUSH
55506: LD_INT 0
55508: ST_TO_ADDR
// uc_nation := 0 ;
55509: LD_ADDR_OWVAR 21
55513: PUSH
55514: LD_INT 0
55516: ST_TO_ADDR
// hc_class := class_fish ;
55517: LD_ADDR_OWVAR 28
55521: PUSH
55522: LD_INT 20
55524: ST_TO_ADDR
// hc_gallery :=  ;
55525: LD_ADDR_OWVAR 33
55529: PUSH
55530: LD_STRING 
55532: ST_TO_ADDR
// end ;
55533: LD_VAR 0 1
55537: RET
// export function PrepareBird ( ) ; begin
55538: LD_INT 0
55540: PPUSH
// uc_side := 0 ;
55541: LD_ADDR_OWVAR 20
55545: PUSH
55546: LD_INT 0
55548: ST_TO_ADDR
// uc_nation := 0 ;
55549: LD_ADDR_OWVAR 21
55553: PUSH
55554: LD_INT 0
55556: ST_TO_ADDR
// hc_class := class_phororhacos ;
55557: LD_ADDR_OWVAR 28
55561: PUSH
55562: LD_INT 18
55564: ST_TO_ADDR
// hc_gallery :=  ;
55565: LD_ADDR_OWVAR 33
55569: PUSH
55570: LD_STRING 
55572: ST_TO_ADDR
// end ;
55573: LD_VAR 0 1
55577: RET
// export function PrepareHorse ( ) ; begin
55578: LD_INT 0
55580: PPUSH
// uc_side := 0 ;
55581: LD_ADDR_OWVAR 20
55585: PUSH
55586: LD_INT 0
55588: ST_TO_ADDR
// uc_nation := 0 ;
55589: LD_ADDR_OWVAR 21
55593: PUSH
55594: LD_INT 0
55596: ST_TO_ADDR
// hc_class := class_horse ;
55597: LD_ADDR_OWVAR 28
55601: PUSH
55602: LD_INT 21
55604: ST_TO_ADDR
// hc_gallery :=  ;
55605: LD_ADDR_OWVAR 33
55609: PUSH
55610: LD_STRING 
55612: ST_TO_ADDR
// end ;
55613: LD_VAR 0 1
55617: RET
// export function PrepareMastodont ( ) ; begin
55618: LD_INT 0
55620: PPUSH
// uc_side := 0 ;
55621: LD_ADDR_OWVAR 20
55625: PUSH
55626: LD_INT 0
55628: ST_TO_ADDR
// uc_nation := 0 ;
55629: LD_ADDR_OWVAR 21
55633: PUSH
55634: LD_INT 0
55636: ST_TO_ADDR
// vc_chassis := class_mastodont ;
55637: LD_ADDR_OWVAR 37
55641: PUSH
55642: LD_INT 31
55644: ST_TO_ADDR
// vc_control := control_rider ;
55645: LD_ADDR_OWVAR 38
55649: PUSH
55650: LD_INT 4
55652: ST_TO_ADDR
// end ;
55653: LD_VAR 0 1
55657: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55658: LD_INT 0
55660: PPUSH
55661: PPUSH
55662: PPUSH
// uc_side = 0 ;
55663: LD_ADDR_OWVAR 20
55667: PUSH
55668: LD_INT 0
55670: ST_TO_ADDR
// uc_nation = 0 ;
55671: LD_ADDR_OWVAR 21
55675: PUSH
55676: LD_INT 0
55678: ST_TO_ADDR
// InitHc_All ( ) ;
55679: CALL_OW 584
// InitVc ;
55683: CALL_OW 20
// if mastodonts then
55687: LD_VAR 0 6
55691: IFFALSE 55758
// for i = 1 to mastodonts do
55693: LD_ADDR_VAR 0 11
55697: PUSH
55698: DOUBLE
55699: LD_INT 1
55701: DEC
55702: ST_TO_ADDR
55703: LD_VAR 0 6
55707: PUSH
55708: FOR_TO
55709: IFFALSE 55756
// begin vc_chassis := 31 ;
55711: LD_ADDR_OWVAR 37
55715: PUSH
55716: LD_INT 31
55718: ST_TO_ADDR
// vc_control := control_rider ;
55719: LD_ADDR_OWVAR 38
55723: PUSH
55724: LD_INT 4
55726: ST_TO_ADDR
// animal := CreateVehicle ;
55727: LD_ADDR_VAR 0 12
55731: PUSH
55732: CALL_OW 45
55736: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55737: LD_VAR 0 12
55741: PPUSH
55742: LD_VAR 0 8
55746: PPUSH
55747: LD_INT 0
55749: PPUSH
55750: CALL 57893 0 3
// end ;
55754: GO 55708
55756: POP
55757: POP
// if horses then
55758: LD_VAR 0 5
55762: IFFALSE 55829
// for i = 1 to horses do
55764: LD_ADDR_VAR 0 11
55768: PUSH
55769: DOUBLE
55770: LD_INT 1
55772: DEC
55773: ST_TO_ADDR
55774: LD_VAR 0 5
55778: PUSH
55779: FOR_TO
55780: IFFALSE 55827
// begin hc_class := 21 ;
55782: LD_ADDR_OWVAR 28
55786: PUSH
55787: LD_INT 21
55789: ST_TO_ADDR
// hc_gallery :=  ;
55790: LD_ADDR_OWVAR 33
55794: PUSH
55795: LD_STRING 
55797: ST_TO_ADDR
// animal := CreateHuman ;
55798: LD_ADDR_VAR 0 12
55802: PUSH
55803: CALL_OW 44
55807: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55808: LD_VAR 0 12
55812: PPUSH
55813: LD_VAR 0 8
55817: PPUSH
55818: LD_INT 0
55820: PPUSH
55821: CALL 57893 0 3
// end ;
55825: GO 55779
55827: POP
55828: POP
// if birds then
55829: LD_VAR 0 1
55833: IFFALSE 55900
// for i = 1 to birds do
55835: LD_ADDR_VAR 0 11
55839: PUSH
55840: DOUBLE
55841: LD_INT 1
55843: DEC
55844: ST_TO_ADDR
55845: LD_VAR 0 1
55849: PUSH
55850: FOR_TO
55851: IFFALSE 55898
// begin hc_class = 18 ;
55853: LD_ADDR_OWVAR 28
55857: PUSH
55858: LD_INT 18
55860: ST_TO_ADDR
// hc_gallery =  ;
55861: LD_ADDR_OWVAR 33
55865: PUSH
55866: LD_STRING 
55868: ST_TO_ADDR
// animal := CreateHuman ;
55869: LD_ADDR_VAR 0 12
55873: PUSH
55874: CALL_OW 44
55878: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55879: LD_VAR 0 12
55883: PPUSH
55884: LD_VAR 0 8
55888: PPUSH
55889: LD_INT 0
55891: PPUSH
55892: CALL 57893 0 3
// end ;
55896: GO 55850
55898: POP
55899: POP
// if tigers then
55900: LD_VAR 0 2
55904: IFFALSE 55988
// for i = 1 to tigers do
55906: LD_ADDR_VAR 0 11
55910: PUSH
55911: DOUBLE
55912: LD_INT 1
55914: DEC
55915: ST_TO_ADDR
55916: LD_VAR 0 2
55920: PUSH
55921: FOR_TO
55922: IFFALSE 55986
// begin hc_class = class_tiger ;
55924: LD_ADDR_OWVAR 28
55928: PUSH
55929: LD_INT 14
55931: ST_TO_ADDR
// hc_gallery =  ;
55932: LD_ADDR_OWVAR 33
55936: PUSH
55937: LD_STRING 
55939: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55940: LD_ADDR_OWVAR 35
55944: PUSH
55945: LD_INT 7
55947: NEG
55948: PPUSH
55949: LD_INT 7
55951: PPUSH
55952: CALL_OW 12
55956: ST_TO_ADDR
// animal := CreateHuman ;
55957: LD_ADDR_VAR 0 12
55961: PUSH
55962: CALL_OW 44
55966: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55967: LD_VAR 0 12
55971: PPUSH
55972: LD_VAR 0 8
55976: PPUSH
55977: LD_INT 0
55979: PPUSH
55980: CALL 57893 0 3
// end ;
55984: GO 55921
55986: POP
55987: POP
// if apemans then
55988: LD_VAR 0 3
55992: IFFALSE 56115
// for i = 1 to apemans do
55994: LD_ADDR_VAR 0 11
55998: PUSH
55999: DOUBLE
56000: LD_INT 1
56002: DEC
56003: ST_TO_ADDR
56004: LD_VAR 0 3
56008: PUSH
56009: FOR_TO
56010: IFFALSE 56113
// begin hc_class = class_apeman ;
56012: LD_ADDR_OWVAR 28
56016: PUSH
56017: LD_INT 12
56019: ST_TO_ADDR
// hc_gallery =  ;
56020: LD_ADDR_OWVAR 33
56024: PUSH
56025: LD_STRING 
56027: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56028: LD_ADDR_OWVAR 35
56032: PUSH
56033: LD_INT 2
56035: NEG
56036: PPUSH
56037: LD_INT 2
56039: PPUSH
56040: CALL_OW 12
56044: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56045: LD_ADDR_OWVAR 31
56049: PUSH
56050: LD_INT 1
56052: PPUSH
56053: LD_INT 3
56055: PPUSH
56056: CALL_OW 12
56060: PUSH
56061: LD_INT 1
56063: PPUSH
56064: LD_INT 3
56066: PPUSH
56067: CALL_OW 12
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: LD_INT 0
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: ST_TO_ADDR
// animal := CreateHuman ;
56084: LD_ADDR_VAR 0 12
56088: PUSH
56089: CALL_OW 44
56093: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56094: LD_VAR 0 12
56098: PPUSH
56099: LD_VAR 0 8
56103: PPUSH
56104: LD_INT 0
56106: PPUSH
56107: CALL 57893 0 3
// end ;
56111: GO 56009
56113: POP
56114: POP
// if enchidnas then
56115: LD_VAR 0 4
56119: IFFALSE 56186
// for i = 1 to enchidnas do
56121: LD_ADDR_VAR 0 11
56125: PUSH
56126: DOUBLE
56127: LD_INT 1
56129: DEC
56130: ST_TO_ADDR
56131: LD_VAR 0 4
56135: PUSH
56136: FOR_TO
56137: IFFALSE 56184
// begin hc_class = 13 ;
56139: LD_ADDR_OWVAR 28
56143: PUSH
56144: LD_INT 13
56146: ST_TO_ADDR
// hc_gallery =  ;
56147: LD_ADDR_OWVAR 33
56151: PUSH
56152: LD_STRING 
56154: ST_TO_ADDR
// animal := CreateHuman ;
56155: LD_ADDR_VAR 0 12
56159: PUSH
56160: CALL_OW 44
56164: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56165: LD_VAR 0 12
56169: PPUSH
56170: LD_VAR 0 8
56174: PPUSH
56175: LD_INT 0
56177: PPUSH
56178: CALL 57893 0 3
// end ;
56182: GO 56136
56184: POP
56185: POP
// if fishes then
56186: LD_VAR 0 7
56190: IFFALSE 56257
// for i = 1 to fishes do
56192: LD_ADDR_VAR 0 11
56196: PUSH
56197: DOUBLE
56198: LD_INT 1
56200: DEC
56201: ST_TO_ADDR
56202: LD_VAR 0 7
56206: PUSH
56207: FOR_TO
56208: IFFALSE 56255
// begin hc_class = 20 ;
56210: LD_ADDR_OWVAR 28
56214: PUSH
56215: LD_INT 20
56217: ST_TO_ADDR
// hc_gallery =  ;
56218: LD_ADDR_OWVAR 33
56222: PUSH
56223: LD_STRING 
56225: ST_TO_ADDR
// animal := CreateHuman ;
56226: LD_ADDR_VAR 0 12
56230: PUSH
56231: CALL_OW 44
56235: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56236: LD_VAR 0 12
56240: PPUSH
56241: LD_VAR 0 9
56245: PPUSH
56246: LD_INT 0
56248: PPUSH
56249: CALL 57893 0 3
// end ;
56253: GO 56207
56255: POP
56256: POP
// end ;
56257: LD_VAR 0 10
56261: RET
// export function WantHeal ( sci , unit ) ; begin
56262: LD_INT 0
56264: PPUSH
// if GetTaskList ( sci ) > 0 then
56265: LD_VAR 0 1
56269: PPUSH
56270: CALL_OW 437
56274: PUSH
56275: LD_INT 0
56277: GREATER
56278: IFFALSE 56348
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56280: LD_VAR 0 1
56284: PPUSH
56285: CALL_OW 437
56289: PUSH
56290: LD_INT 1
56292: ARRAY
56293: PUSH
56294: LD_INT 1
56296: ARRAY
56297: PUSH
56298: LD_STRING l
56300: EQUAL
56301: PUSH
56302: LD_VAR 0 1
56306: PPUSH
56307: CALL_OW 437
56311: PUSH
56312: LD_INT 1
56314: ARRAY
56315: PUSH
56316: LD_INT 4
56318: ARRAY
56319: PUSH
56320: LD_VAR 0 2
56324: EQUAL
56325: AND
56326: IFFALSE 56338
// result := true else
56328: LD_ADDR_VAR 0 3
56332: PUSH
56333: LD_INT 1
56335: ST_TO_ADDR
56336: GO 56346
// result := false ;
56338: LD_ADDR_VAR 0 3
56342: PUSH
56343: LD_INT 0
56345: ST_TO_ADDR
// end else
56346: GO 56356
// result := false ;
56348: LD_ADDR_VAR 0 3
56352: PUSH
56353: LD_INT 0
56355: ST_TO_ADDR
// end ;
56356: LD_VAR 0 3
56360: RET
// export function HealTarget ( sci ) ; begin
56361: LD_INT 0
56363: PPUSH
// if not sci then
56364: LD_VAR 0 1
56368: NOT
56369: IFFALSE 56373
// exit ;
56371: GO 56438
// result := 0 ;
56373: LD_ADDR_VAR 0 2
56377: PUSH
56378: LD_INT 0
56380: ST_TO_ADDR
// if GetTaskList ( sci ) then
56381: LD_VAR 0 1
56385: PPUSH
56386: CALL_OW 437
56390: IFFALSE 56438
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56392: LD_VAR 0 1
56396: PPUSH
56397: CALL_OW 437
56401: PUSH
56402: LD_INT 1
56404: ARRAY
56405: PUSH
56406: LD_INT 1
56408: ARRAY
56409: PUSH
56410: LD_STRING l
56412: EQUAL
56413: IFFALSE 56438
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56415: LD_ADDR_VAR 0 2
56419: PUSH
56420: LD_VAR 0 1
56424: PPUSH
56425: CALL_OW 437
56429: PUSH
56430: LD_INT 1
56432: ARRAY
56433: PUSH
56434: LD_INT 4
56436: ARRAY
56437: ST_TO_ADDR
// end ;
56438: LD_VAR 0 2
56442: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56443: LD_INT 0
56445: PPUSH
56446: PPUSH
56447: PPUSH
56448: PPUSH
// if not base_units then
56449: LD_VAR 0 1
56453: NOT
56454: IFFALSE 56458
// exit ;
56456: GO 56545
// result := false ;
56458: LD_ADDR_VAR 0 2
56462: PUSH
56463: LD_INT 0
56465: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56466: LD_ADDR_VAR 0 5
56470: PUSH
56471: LD_VAR 0 1
56475: PPUSH
56476: LD_INT 21
56478: PUSH
56479: LD_INT 3
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PPUSH
56486: CALL_OW 72
56490: ST_TO_ADDR
// if not tmp then
56491: LD_VAR 0 5
56495: NOT
56496: IFFALSE 56500
// exit ;
56498: GO 56545
// for i in tmp do
56500: LD_ADDR_VAR 0 3
56504: PUSH
56505: LD_VAR 0 5
56509: PUSH
56510: FOR_IN
56511: IFFALSE 56543
// begin result := EnemyInRange ( i , 22 ) ;
56513: LD_ADDR_VAR 0 2
56517: PUSH
56518: LD_VAR 0 3
56522: PPUSH
56523: LD_INT 22
56525: PPUSH
56526: CALL 54158 0 2
56530: ST_TO_ADDR
// if result then
56531: LD_VAR 0 2
56535: IFFALSE 56541
// exit ;
56537: POP
56538: POP
56539: GO 56545
// end ;
56541: GO 56510
56543: POP
56544: POP
// end ;
56545: LD_VAR 0 2
56549: RET
// export function FilterByTag ( units , tag ) ; begin
56550: LD_INT 0
56552: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
56553: LD_ADDR_VAR 0 3
56557: PUSH
56558: LD_VAR 0 1
56562: PPUSH
56563: LD_INT 120
56565: PUSH
56566: LD_VAR 0 2
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PPUSH
56575: CALL_OW 72
56579: ST_TO_ADDR
// end ;
56580: LD_VAR 0 3
56584: RET
// export function IsDriver ( un ) ; begin
56585: LD_INT 0
56587: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56588: LD_ADDR_VAR 0 2
56592: PUSH
56593: LD_VAR 0 1
56597: PUSH
56598: LD_INT 55
56600: PUSH
56601: EMPTY
56602: LIST
56603: PPUSH
56604: CALL_OW 69
56608: IN
56609: ST_TO_ADDR
// end ;
56610: LD_VAR 0 2
56614: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56615: LD_INT 0
56617: PPUSH
56618: PPUSH
// list := [ ] ;
56619: LD_ADDR_VAR 0 5
56623: PUSH
56624: EMPTY
56625: ST_TO_ADDR
// case d of 0 :
56626: LD_VAR 0 3
56630: PUSH
56631: LD_INT 0
56633: DOUBLE
56634: EQUAL
56635: IFTRUE 56639
56637: GO 56772
56639: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56640: LD_ADDR_VAR 0 5
56644: PUSH
56645: LD_VAR 0 1
56649: PUSH
56650: LD_INT 4
56652: MINUS
56653: PUSH
56654: LD_VAR 0 2
56658: PUSH
56659: LD_INT 4
56661: MINUS
56662: PUSH
56663: LD_INT 2
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: LIST
56670: PUSH
56671: LD_VAR 0 1
56675: PUSH
56676: LD_INT 3
56678: MINUS
56679: PUSH
56680: LD_VAR 0 2
56684: PUSH
56685: LD_INT 1
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: LIST
56692: PUSH
56693: LD_VAR 0 1
56697: PUSH
56698: LD_INT 4
56700: PLUS
56701: PUSH
56702: LD_VAR 0 2
56706: PUSH
56707: LD_INT 4
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: LIST
56714: PUSH
56715: LD_VAR 0 1
56719: PUSH
56720: LD_INT 3
56722: PLUS
56723: PUSH
56724: LD_VAR 0 2
56728: PUSH
56729: LD_INT 3
56731: PLUS
56732: PUSH
56733: LD_INT 5
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: LIST
56740: PUSH
56741: LD_VAR 0 1
56745: PUSH
56746: LD_VAR 0 2
56750: PUSH
56751: LD_INT 4
56753: PLUS
56754: PUSH
56755: LD_INT 0
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: LIST
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: ST_TO_ADDR
// end ; 1 :
56770: GO 57470
56772: LD_INT 1
56774: DOUBLE
56775: EQUAL
56776: IFTRUE 56780
56778: GO 56913
56780: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56781: LD_ADDR_VAR 0 5
56785: PUSH
56786: LD_VAR 0 1
56790: PUSH
56791: LD_VAR 0 2
56795: PUSH
56796: LD_INT 4
56798: MINUS
56799: PUSH
56800: LD_INT 3
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: LIST
56807: PUSH
56808: LD_VAR 0 1
56812: PUSH
56813: LD_INT 3
56815: MINUS
56816: PUSH
56817: LD_VAR 0 2
56821: PUSH
56822: LD_INT 3
56824: MINUS
56825: PUSH
56826: LD_INT 2
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: LIST
56833: PUSH
56834: LD_VAR 0 1
56838: PUSH
56839: LD_INT 4
56841: MINUS
56842: PUSH
56843: LD_VAR 0 2
56847: PUSH
56848: LD_INT 1
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: LIST
56855: PUSH
56856: LD_VAR 0 1
56860: PUSH
56861: LD_VAR 0 2
56865: PUSH
56866: LD_INT 3
56868: PLUS
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: LIST
56877: PUSH
56878: LD_VAR 0 1
56882: PUSH
56883: LD_INT 4
56885: PLUS
56886: PUSH
56887: LD_VAR 0 2
56891: PUSH
56892: LD_INT 4
56894: PLUS
56895: PUSH
56896: LD_INT 5
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: LIST
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: ST_TO_ADDR
// end ; 2 :
56911: GO 57470
56913: LD_INT 2
56915: DOUBLE
56916: EQUAL
56917: IFTRUE 56921
56919: GO 57050
56921: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56922: LD_ADDR_VAR 0 5
56926: PUSH
56927: LD_VAR 0 1
56931: PUSH
56932: LD_VAR 0 2
56936: PUSH
56937: LD_INT 3
56939: MINUS
56940: PUSH
56941: LD_INT 3
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: LIST
56948: PUSH
56949: LD_VAR 0 1
56953: PUSH
56954: LD_INT 4
56956: PLUS
56957: PUSH
56958: LD_VAR 0 2
56962: PUSH
56963: LD_INT 4
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: LIST
56970: PUSH
56971: LD_VAR 0 1
56975: PUSH
56976: LD_VAR 0 2
56980: PUSH
56981: LD_INT 4
56983: PLUS
56984: PUSH
56985: LD_INT 0
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: LIST
56992: PUSH
56993: LD_VAR 0 1
56997: PUSH
56998: LD_INT 3
57000: MINUS
57001: PUSH
57002: LD_VAR 0 2
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: LIST
57014: PUSH
57015: LD_VAR 0 1
57019: PUSH
57020: LD_INT 4
57022: MINUS
57023: PUSH
57024: LD_VAR 0 2
57028: PUSH
57029: LD_INT 4
57031: MINUS
57032: PUSH
57033: LD_INT 2
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: LIST
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: ST_TO_ADDR
// end ; 3 :
57048: GO 57470
57050: LD_INT 3
57052: DOUBLE
57053: EQUAL
57054: IFTRUE 57058
57056: GO 57191
57058: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57059: LD_ADDR_VAR 0 5
57063: PUSH
57064: LD_VAR 0 1
57068: PUSH
57069: LD_INT 3
57071: PLUS
57072: PUSH
57073: LD_VAR 0 2
57077: PUSH
57078: LD_INT 4
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: LIST
57085: PUSH
57086: LD_VAR 0 1
57090: PUSH
57091: LD_INT 4
57093: PLUS
57094: PUSH
57095: LD_VAR 0 2
57099: PUSH
57100: LD_INT 4
57102: PLUS
57103: PUSH
57104: LD_INT 5
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: LIST
57111: PUSH
57112: LD_VAR 0 1
57116: PUSH
57117: LD_INT 4
57119: MINUS
57120: PUSH
57121: LD_VAR 0 2
57125: PUSH
57126: LD_INT 1
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: LIST
57133: PUSH
57134: LD_VAR 0 1
57138: PUSH
57139: LD_VAR 0 2
57143: PUSH
57144: LD_INT 4
57146: MINUS
57147: PUSH
57148: LD_INT 3
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: LIST
57155: PUSH
57156: LD_VAR 0 1
57160: PUSH
57161: LD_INT 3
57163: MINUS
57164: PUSH
57165: LD_VAR 0 2
57169: PUSH
57170: LD_INT 3
57172: MINUS
57173: PUSH
57174: LD_INT 2
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: LIST
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: ST_TO_ADDR
// end ; 4 :
57189: GO 57470
57191: LD_INT 4
57193: DOUBLE
57194: EQUAL
57195: IFTRUE 57199
57197: GO 57332
57199: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57200: LD_ADDR_VAR 0 5
57204: PUSH
57205: LD_VAR 0 1
57209: PUSH
57210: LD_VAR 0 2
57214: PUSH
57215: LD_INT 4
57217: PLUS
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: LIST
57226: PUSH
57227: LD_VAR 0 1
57231: PUSH
57232: LD_INT 3
57234: PLUS
57235: PUSH
57236: LD_VAR 0 2
57240: PUSH
57241: LD_INT 3
57243: PLUS
57244: PUSH
57245: LD_INT 5
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: LIST
57252: PUSH
57253: LD_VAR 0 1
57257: PUSH
57258: LD_INT 4
57260: PLUS
57261: PUSH
57262: LD_VAR 0 2
57266: PUSH
57267: LD_INT 4
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: LIST
57274: PUSH
57275: LD_VAR 0 1
57279: PUSH
57280: LD_VAR 0 2
57284: PUSH
57285: LD_INT 3
57287: MINUS
57288: PUSH
57289: LD_INT 3
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: LIST
57296: PUSH
57297: LD_VAR 0 1
57301: PUSH
57302: LD_INT 4
57304: MINUS
57305: PUSH
57306: LD_VAR 0 2
57310: PUSH
57311: LD_INT 4
57313: MINUS
57314: PUSH
57315: LD_INT 2
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: LIST
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: ST_TO_ADDR
// end ; 5 :
57330: GO 57470
57332: LD_INT 5
57334: DOUBLE
57335: EQUAL
57336: IFTRUE 57340
57338: GO 57469
57340: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57341: LD_ADDR_VAR 0 5
57345: PUSH
57346: LD_VAR 0 1
57350: PUSH
57351: LD_INT 4
57353: MINUS
57354: PUSH
57355: LD_VAR 0 2
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: LIST
57367: PUSH
57368: LD_VAR 0 1
57372: PUSH
57373: LD_VAR 0 2
57377: PUSH
57378: LD_INT 4
57380: MINUS
57381: PUSH
57382: LD_INT 3
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: LIST
57389: PUSH
57390: LD_VAR 0 1
57394: PUSH
57395: LD_INT 4
57397: PLUS
57398: PUSH
57399: LD_VAR 0 2
57403: PUSH
57404: LD_INT 4
57406: PLUS
57407: PUSH
57408: LD_INT 5
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: LIST
57415: PUSH
57416: LD_VAR 0 1
57420: PUSH
57421: LD_INT 3
57423: PLUS
57424: PUSH
57425: LD_VAR 0 2
57429: PUSH
57430: LD_INT 4
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: LIST
57437: PUSH
57438: LD_VAR 0 1
57442: PUSH
57443: LD_VAR 0 2
57447: PUSH
57448: LD_INT 3
57450: PLUS
57451: PUSH
57452: LD_INT 0
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: LIST
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: ST_TO_ADDR
// end ; end ;
57467: GO 57470
57469: POP
// result := list ;
57470: LD_ADDR_VAR 0 4
57474: PUSH
57475: LD_VAR 0 5
57479: ST_TO_ADDR
// end ;
57480: LD_VAR 0 4
57484: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57485: LD_INT 0
57487: PPUSH
57488: PPUSH
57489: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57490: LD_VAR 0 1
57494: NOT
57495: PUSH
57496: LD_VAR 0 2
57500: PUSH
57501: LD_INT 1
57503: PUSH
57504: LD_INT 2
57506: PUSH
57507: LD_INT 3
57509: PUSH
57510: LD_INT 4
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: IN
57519: NOT
57520: OR
57521: IFFALSE 57525
// exit ;
57523: GO 57617
// tmp := [ ] ;
57525: LD_ADDR_VAR 0 5
57529: PUSH
57530: EMPTY
57531: ST_TO_ADDR
// for i in units do
57532: LD_ADDR_VAR 0 4
57536: PUSH
57537: LD_VAR 0 1
57541: PUSH
57542: FOR_IN
57543: IFFALSE 57586
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
57545: LD_ADDR_VAR 0 5
57549: PUSH
57550: LD_VAR 0 5
57554: PPUSH
57555: LD_VAR 0 5
57559: PUSH
57560: LD_INT 1
57562: PLUS
57563: PPUSH
57564: LD_VAR 0 4
57568: PPUSH
57569: LD_VAR 0 2
57573: PPUSH
57574: CALL_OW 259
57578: PPUSH
57579: CALL_OW 2
57583: ST_TO_ADDR
57584: GO 57542
57586: POP
57587: POP
// if not tmp then
57588: LD_VAR 0 5
57592: NOT
57593: IFFALSE 57597
// exit ;
57595: GO 57617
// result := SortListByListDesc ( units , tmp ) ;
57597: LD_ADDR_VAR 0 3
57601: PUSH
57602: LD_VAR 0 1
57606: PPUSH
57607: LD_VAR 0 5
57611: PPUSH
57612: CALL_OW 77
57616: ST_TO_ADDR
// end ;
57617: LD_VAR 0 3
57621: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57622: LD_INT 0
57624: PPUSH
57625: PPUSH
57626: PPUSH
// result := false ;
57627: LD_ADDR_VAR 0 3
57631: PUSH
57632: LD_INT 0
57634: ST_TO_ADDR
// x := GetX ( building ) ;
57635: LD_ADDR_VAR 0 4
57639: PUSH
57640: LD_VAR 0 2
57644: PPUSH
57645: CALL_OW 250
57649: ST_TO_ADDR
// y := GetY ( building ) ;
57650: LD_ADDR_VAR 0 5
57654: PUSH
57655: LD_VAR 0 2
57659: PPUSH
57660: CALL_OW 251
57664: ST_TO_ADDR
// if not building or not x or not y then
57665: LD_VAR 0 2
57669: NOT
57670: PUSH
57671: LD_VAR 0 4
57675: NOT
57676: OR
57677: PUSH
57678: LD_VAR 0 5
57682: NOT
57683: OR
57684: IFFALSE 57688
// exit ;
57686: GO 57780
// if GetTaskList ( unit ) then
57688: LD_VAR 0 1
57692: PPUSH
57693: CALL_OW 437
57697: IFFALSE 57780
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57699: LD_STRING e
57701: PUSH
57702: LD_VAR 0 1
57706: PPUSH
57707: CALL_OW 437
57711: PUSH
57712: LD_INT 1
57714: ARRAY
57715: PUSH
57716: LD_INT 1
57718: ARRAY
57719: EQUAL
57720: PUSH
57721: LD_VAR 0 4
57725: PUSH
57726: LD_VAR 0 1
57730: PPUSH
57731: CALL_OW 437
57735: PUSH
57736: LD_INT 1
57738: ARRAY
57739: PUSH
57740: LD_INT 2
57742: ARRAY
57743: EQUAL
57744: AND
57745: PUSH
57746: LD_VAR 0 5
57750: PUSH
57751: LD_VAR 0 1
57755: PPUSH
57756: CALL_OW 437
57760: PUSH
57761: LD_INT 1
57763: ARRAY
57764: PUSH
57765: LD_INT 3
57767: ARRAY
57768: EQUAL
57769: AND
57770: IFFALSE 57780
// result := true end ;
57772: LD_ADDR_VAR 0 3
57776: PUSH
57777: LD_INT 1
57779: ST_TO_ADDR
// end ;
57780: LD_VAR 0 3
57784: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57785: LD_INT 0
57787: PPUSH
// result := false ;
57788: LD_ADDR_VAR 0 4
57792: PUSH
57793: LD_INT 0
57795: ST_TO_ADDR
// if GetTaskList ( unit ) then
57796: LD_VAR 0 1
57800: PPUSH
57801: CALL_OW 437
57805: IFFALSE 57888
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57807: LD_STRING M
57809: PUSH
57810: LD_VAR 0 1
57814: PPUSH
57815: CALL_OW 437
57819: PUSH
57820: LD_INT 1
57822: ARRAY
57823: PUSH
57824: LD_INT 1
57826: ARRAY
57827: EQUAL
57828: PUSH
57829: LD_VAR 0 2
57833: PUSH
57834: LD_VAR 0 1
57838: PPUSH
57839: CALL_OW 437
57843: PUSH
57844: LD_INT 1
57846: ARRAY
57847: PUSH
57848: LD_INT 2
57850: ARRAY
57851: EQUAL
57852: AND
57853: PUSH
57854: LD_VAR 0 3
57858: PUSH
57859: LD_VAR 0 1
57863: PPUSH
57864: CALL_OW 437
57868: PUSH
57869: LD_INT 1
57871: ARRAY
57872: PUSH
57873: LD_INT 3
57875: ARRAY
57876: EQUAL
57877: AND
57878: IFFALSE 57888
// result := true ;
57880: LD_ADDR_VAR 0 4
57884: PUSH
57885: LD_INT 1
57887: ST_TO_ADDR
// end ; end ;
57888: LD_VAR 0 4
57892: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57893: LD_INT 0
57895: PPUSH
57896: PPUSH
57897: PPUSH
57898: PPUSH
// if not unit or not area then
57899: LD_VAR 0 1
57903: NOT
57904: PUSH
57905: LD_VAR 0 2
57909: NOT
57910: OR
57911: IFFALSE 57915
// exit ;
57913: GO 58079
// tmp := AreaToList ( area , i ) ;
57915: LD_ADDR_VAR 0 6
57919: PUSH
57920: LD_VAR 0 2
57924: PPUSH
57925: LD_VAR 0 5
57929: PPUSH
57930: CALL_OW 517
57934: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57935: LD_ADDR_VAR 0 5
57939: PUSH
57940: DOUBLE
57941: LD_INT 1
57943: DEC
57944: ST_TO_ADDR
57945: LD_VAR 0 6
57949: PUSH
57950: LD_INT 1
57952: ARRAY
57953: PUSH
57954: FOR_TO
57955: IFFALSE 58077
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57957: LD_ADDR_VAR 0 7
57961: PUSH
57962: LD_VAR 0 6
57966: PUSH
57967: LD_INT 1
57969: ARRAY
57970: PUSH
57971: LD_VAR 0 5
57975: ARRAY
57976: PUSH
57977: LD_VAR 0 6
57981: PUSH
57982: LD_INT 2
57984: ARRAY
57985: PUSH
57986: LD_VAR 0 5
57990: ARRAY
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
57996: LD_VAR 0 7
58000: PUSH
58001: LD_INT 1
58003: ARRAY
58004: PPUSH
58005: LD_VAR 0 7
58009: PUSH
58010: LD_INT 2
58012: ARRAY
58013: PPUSH
58014: CALL_OW 428
58018: PUSH
58019: LD_INT 0
58021: EQUAL
58022: IFFALSE 58075
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58024: LD_VAR 0 1
58028: PPUSH
58029: LD_VAR 0 7
58033: PUSH
58034: LD_INT 1
58036: ARRAY
58037: PPUSH
58038: LD_VAR 0 7
58042: PUSH
58043: LD_INT 2
58045: ARRAY
58046: PPUSH
58047: LD_VAR 0 3
58051: PPUSH
58052: CALL_OW 48
// result := IsPlaced ( unit ) ;
58056: LD_ADDR_VAR 0 4
58060: PUSH
58061: LD_VAR 0 1
58065: PPUSH
58066: CALL_OW 305
58070: ST_TO_ADDR
// exit ;
58071: POP
58072: POP
58073: GO 58079
// end ; end ;
58075: GO 57954
58077: POP
58078: POP
// end ;
58079: LD_VAR 0 4
58083: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58084: LD_INT 0
58086: PPUSH
58087: PPUSH
58088: PPUSH
// if not side or side > 8 then
58089: LD_VAR 0 1
58093: NOT
58094: PUSH
58095: LD_VAR 0 1
58099: PUSH
58100: LD_INT 8
58102: GREATER
58103: OR
58104: IFFALSE 58108
// exit ;
58106: GO 58295
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58108: LD_ADDR_VAR 0 4
58112: PUSH
58113: LD_INT 22
58115: PUSH
58116: LD_VAR 0 1
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 21
58127: PUSH
58128: LD_INT 3
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PPUSH
58139: CALL_OW 69
58143: ST_TO_ADDR
// if not tmp then
58144: LD_VAR 0 4
58148: NOT
58149: IFFALSE 58153
// exit ;
58151: GO 58295
// enable_addtolog := true ;
58153: LD_ADDR_OWVAR 81
58157: PUSH
58158: LD_INT 1
58160: ST_TO_ADDR
// AddToLog ( [ ) ;
58161: LD_STRING [
58163: PPUSH
58164: CALL_OW 561
// for i in tmp do
58168: LD_ADDR_VAR 0 3
58172: PUSH
58173: LD_VAR 0 4
58177: PUSH
58178: FOR_IN
58179: IFFALSE 58286
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58181: LD_STRING [
58183: PUSH
58184: LD_VAR 0 3
58188: PPUSH
58189: CALL_OW 266
58193: STR
58194: PUSH
58195: LD_STRING , 
58197: STR
58198: PUSH
58199: LD_VAR 0 3
58203: PPUSH
58204: CALL_OW 250
58208: STR
58209: PUSH
58210: LD_STRING , 
58212: STR
58213: PUSH
58214: LD_VAR 0 3
58218: PPUSH
58219: CALL_OW 251
58223: STR
58224: PUSH
58225: LD_STRING , 
58227: STR
58228: PUSH
58229: LD_VAR 0 3
58233: PPUSH
58234: CALL_OW 254
58238: STR
58239: PUSH
58240: LD_STRING , 
58242: STR
58243: PUSH
58244: LD_VAR 0 3
58248: PPUSH
58249: LD_INT 1
58251: PPUSH
58252: CALL_OW 268
58256: STR
58257: PUSH
58258: LD_STRING , 
58260: STR
58261: PUSH
58262: LD_VAR 0 3
58266: PPUSH
58267: LD_INT 2
58269: PPUSH
58270: CALL_OW 268
58274: STR
58275: PUSH
58276: LD_STRING ],
58278: STR
58279: PPUSH
58280: CALL_OW 561
// end ;
58284: GO 58178
58286: POP
58287: POP
// AddToLog ( ]; ) ;
58288: LD_STRING ];
58290: PPUSH
58291: CALL_OW 561
// end ;
58295: LD_VAR 0 2
58299: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58300: LD_INT 0
58302: PPUSH
58303: PPUSH
58304: PPUSH
58305: PPUSH
58306: PPUSH
// if not area or not rate or not max then
58307: LD_VAR 0 1
58311: NOT
58312: PUSH
58313: LD_VAR 0 2
58317: NOT
58318: OR
58319: PUSH
58320: LD_VAR 0 4
58324: NOT
58325: OR
58326: IFFALSE 58330
// exit ;
58328: GO 58519
// while 1 do
58330: LD_INT 1
58332: IFFALSE 58519
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58334: LD_ADDR_VAR 0 9
58338: PUSH
58339: LD_VAR 0 1
58343: PPUSH
58344: LD_INT 1
58346: PPUSH
58347: CALL_OW 287
58351: PUSH
58352: LD_INT 10
58354: MUL
58355: ST_TO_ADDR
// r := rate / 10 ;
58356: LD_ADDR_VAR 0 7
58360: PUSH
58361: LD_VAR 0 2
58365: PUSH
58366: LD_INT 10
58368: DIVREAL
58369: ST_TO_ADDR
// time := 1 1$00 ;
58370: LD_ADDR_VAR 0 8
58374: PUSH
58375: LD_INT 2100
58377: ST_TO_ADDR
// if amount < min then
58378: LD_VAR 0 9
58382: PUSH
58383: LD_VAR 0 3
58387: LESS
58388: IFFALSE 58406
// r := r * 2 else
58390: LD_ADDR_VAR 0 7
58394: PUSH
58395: LD_VAR 0 7
58399: PUSH
58400: LD_INT 2
58402: MUL
58403: ST_TO_ADDR
58404: GO 58432
// if amount > max then
58406: LD_VAR 0 9
58410: PUSH
58411: LD_VAR 0 4
58415: GREATER
58416: IFFALSE 58432
// r := r / 2 ;
58418: LD_ADDR_VAR 0 7
58422: PUSH
58423: LD_VAR 0 7
58427: PUSH
58428: LD_INT 2
58430: DIVREAL
58431: ST_TO_ADDR
// time := time / r ;
58432: LD_ADDR_VAR 0 8
58436: PUSH
58437: LD_VAR 0 8
58441: PUSH
58442: LD_VAR 0 7
58446: DIVREAL
58447: ST_TO_ADDR
// if time < 0 then
58448: LD_VAR 0 8
58452: PUSH
58453: LD_INT 0
58455: LESS
58456: IFFALSE 58473
// time := time * - 1 ;
58458: LD_ADDR_VAR 0 8
58462: PUSH
58463: LD_VAR 0 8
58467: PUSH
58468: LD_INT 1
58470: NEG
58471: MUL
58472: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
58473: LD_VAR 0 8
58477: PUSH
58478: LD_INT 35
58480: PPUSH
58481: LD_INT 875
58483: PPUSH
58484: CALL_OW 12
58488: PLUS
58489: PPUSH
58490: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58494: LD_INT 1
58496: PPUSH
58497: LD_INT 5
58499: PPUSH
58500: CALL_OW 12
58504: PPUSH
58505: LD_VAR 0 1
58509: PPUSH
58510: LD_INT 1
58512: PPUSH
58513: CALL_OW 55
// end ;
58517: GO 58330
// end ;
58519: LD_VAR 0 5
58523: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58524: LD_INT 0
58526: PPUSH
58527: PPUSH
58528: PPUSH
58529: PPUSH
58530: PPUSH
58531: PPUSH
58532: PPUSH
58533: PPUSH
// if not turrets or not factories then
58534: LD_VAR 0 1
58538: NOT
58539: PUSH
58540: LD_VAR 0 2
58544: NOT
58545: OR
58546: IFFALSE 58550
// exit ;
58548: GO 58857
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58550: LD_ADDR_VAR 0 10
58554: PUSH
58555: LD_INT 5
58557: PUSH
58558: LD_INT 6
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 2
58567: PUSH
58568: LD_INT 4
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 3
58577: PUSH
58578: LD_INT 5
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 24
58592: PUSH
58593: LD_INT 25
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 23
58602: PUSH
58603: LD_INT 27
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 42
58616: PUSH
58617: LD_INT 43
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 44
58626: PUSH
58627: LD_INT 46
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 45
58636: PUSH
58637: LD_INT 47
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: LIST
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: LIST
58653: ST_TO_ADDR
// result := [ ] ;
58654: LD_ADDR_VAR 0 3
58658: PUSH
58659: EMPTY
58660: ST_TO_ADDR
// for i in turrets do
58661: LD_ADDR_VAR 0 4
58665: PUSH
58666: LD_VAR 0 1
58670: PUSH
58671: FOR_IN
58672: IFFALSE 58855
// begin nat := GetNation ( i ) ;
58674: LD_ADDR_VAR 0 7
58678: PUSH
58679: LD_VAR 0 4
58683: PPUSH
58684: CALL_OW 248
58688: ST_TO_ADDR
// weapon := 0 ;
58689: LD_ADDR_VAR 0 8
58693: PUSH
58694: LD_INT 0
58696: ST_TO_ADDR
// if not nat then
58697: LD_VAR 0 7
58701: NOT
58702: IFFALSE 58706
// continue ;
58704: GO 58671
// for j in list [ nat ] do
58706: LD_ADDR_VAR 0 5
58710: PUSH
58711: LD_VAR 0 10
58715: PUSH
58716: LD_VAR 0 7
58720: ARRAY
58721: PUSH
58722: FOR_IN
58723: IFFALSE 58764
// if GetBWeapon ( i ) = j [ 1 ] then
58725: LD_VAR 0 4
58729: PPUSH
58730: CALL_OW 269
58734: PUSH
58735: LD_VAR 0 5
58739: PUSH
58740: LD_INT 1
58742: ARRAY
58743: EQUAL
58744: IFFALSE 58762
// begin weapon := j [ 2 ] ;
58746: LD_ADDR_VAR 0 8
58750: PUSH
58751: LD_VAR 0 5
58755: PUSH
58756: LD_INT 2
58758: ARRAY
58759: ST_TO_ADDR
// break ;
58760: GO 58764
// end ;
58762: GO 58722
58764: POP
58765: POP
// if not weapon then
58766: LD_VAR 0 8
58770: NOT
58771: IFFALSE 58775
// continue ;
58773: GO 58671
// for k in factories do
58775: LD_ADDR_VAR 0 6
58779: PUSH
58780: LD_VAR 0 2
58784: PUSH
58785: FOR_IN
58786: IFFALSE 58851
// begin weapons := AvailableWeaponList ( k ) ;
58788: LD_ADDR_VAR 0 9
58792: PUSH
58793: LD_VAR 0 6
58797: PPUSH
58798: CALL_OW 478
58802: ST_TO_ADDR
// if not weapons then
58803: LD_VAR 0 9
58807: NOT
58808: IFFALSE 58812
// continue ;
58810: GO 58785
// if weapon in weapons then
58812: LD_VAR 0 8
58816: PUSH
58817: LD_VAR 0 9
58821: IN
58822: IFFALSE 58849
// begin result := [ i , weapon ] ;
58824: LD_ADDR_VAR 0 3
58828: PUSH
58829: LD_VAR 0 4
58833: PUSH
58834: LD_VAR 0 8
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: ST_TO_ADDR
// exit ;
58843: POP
58844: POP
58845: POP
58846: POP
58847: GO 58857
// end ; end ;
58849: GO 58785
58851: POP
58852: POP
// end ;
58853: GO 58671
58855: POP
58856: POP
// end ;
58857: LD_VAR 0 3
58861: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58862: LD_INT 0
58864: PPUSH
// if not side or side > 8 then
58865: LD_VAR 0 3
58869: NOT
58870: PUSH
58871: LD_VAR 0 3
58875: PUSH
58876: LD_INT 8
58878: GREATER
58879: OR
58880: IFFALSE 58884
// exit ;
58882: GO 58943
// if not range then
58884: LD_VAR 0 4
58888: NOT
58889: IFFALSE 58900
// range := - 12 ;
58891: LD_ADDR_VAR 0 4
58895: PUSH
58896: LD_INT 12
58898: NEG
58899: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58900: LD_VAR 0 1
58904: PPUSH
58905: LD_VAR 0 2
58909: PPUSH
58910: LD_VAR 0 3
58914: PPUSH
58915: LD_VAR 0 4
58919: PPUSH
58920: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58924: LD_VAR 0 1
58928: PPUSH
58929: LD_VAR 0 2
58933: PPUSH
58934: LD_VAR 0 3
58938: PPUSH
58939: CALL_OW 331
// end ;
58943: LD_VAR 0 5
58947: RET
// export function Video ( mode ) ; begin
58948: LD_INT 0
58950: PPUSH
// ingame_video = mode ;
58951: LD_ADDR_OWVAR 52
58955: PUSH
58956: LD_VAR 0 1
58960: ST_TO_ADDR
// interface_hidden = mode ;
58961: LD_ADDR_OWVAR 54
58965: PUSH
58966: LD_VAR 0 1
58970: ST_TO_ADDR
// end ;
58971: LD_VAR 0 2
58975: RET
// export function Join ( array , element ) ; begin
58976: LD_INT 0
58978: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58979: LD_ADDR_VAR 0 3
58983: PUSH
58984: LD_VAR 0 1
58988: PPUSH
58989: LD_VAR 0 1
58993: PUSH
58994: LD_INT 1
58996: PLUS
58997: PPUSH
58998: LD_VAR 0 2
59002: PPUSH
59003: CALL_OW 1
59007: ST_TO_ADDR
// end ;
59008: LD_VAR 0 3
59012: RET
// export function JoinUnion ( array , element ) ; begin
59013: LD_INT 0
59015: PPUSH
// result := array union element ;
59016: LD_ADDR_VAR 0 3
59020: PUSH
59021: LD_VAR 0 1
59025: PUSH
59026: LD_VAR 0 2
59030: UNION
59031: ST_TO_ADDR
// end ;
59032: LD_VAR 0 3
59036: RET
// export function GetBehemoths ( side ) ; begin
59037: LD_INT 0
59039: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
59040: LD_ADDR_VAR 0 2
59044: PUSH
59045: LD_INT 22
59047: PUSH
59048: LD_VAR 0 1
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 31
59059: PUSH
59060: LD_INT 25
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PPUSH
59071: CALL_OW 69
59075: ST_TO_ADDR
// end ;
59076: LD_VAR 0 2
59080: RET
// export function Shuffle ( array ) ; var i , index ; begin
59081: LD_INT 0
59083: PPUSH
59084: PPUSH
59085: PPUSH
// result := [ ] ;
59086: LD_ADDR_VAR 0 2
59090: PUSH
59091: EMPTY
59092: ST_TO_ADDR
// if not array then
59093: LD_VAR 0 1
59097: NOT
59098: IFFALSE 59102
// exit ;
59100: GO 59201
// Randomize ;
59102: CALL_OW 10
// for i = array downto 1 do
59106: LD_ADDR_VAR 0 3
59110: PUSH
59111: DOUBLE
59112: LD_VAR 0 1
59116: INC
59117: ST_TO_ADDR
59118: LD_INT 1
59120: PUSH
59121: FOR_DOWNTO
59122: IFFALSE 59199
// begin index := rand ( 1 , array ) ;
59124: LD_ADDR_VAR 0 4
59128: PUSH
59129: LD_INT 1
59131: PPUSH
59132: LD_VAR 0 1
59136: PPUSH
59137: CALL_OW 12
59141: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59142: LD_ADDR_VAR 0 2
59146: PUSH
59147: LD_VAR 0 2
59151: PPUSH
59152: LD_VAR 0 2
59156: PUSH
59157: LD_INT 1
59159: PLUS
59160: PPUSH
59161: LD_VAR 0 1
59165: PUSH
59166: LD_VAR 0 4
59170: ARRAY
59171: PPUSH
59172: CALL_OW 2
59176: ST_TO_ADDR
// array := Delete ( array , index ) ;
59177: LD_ADDR_VAR 0 1
59181: PUSH
59182: LD_VAR 0 1
59186: PPUSH
59187: LD_VAR 0 4
59191: PPUSH
59192: CALL_OW 3
59196: ST_TO_ADDR
// end ;
59197: GO 59121
59199: POP
59200: POP
// end ;
59201: LD_VAR 0 2
59205: RET
// export function GetBaseMaterials ( base ) ; begin
59206: LD_INT 0
59208: PPUSH
// result := [ 0 , 0 , 0 ] ;
59209: LD_ADDR_VAR 0 2
59213: PUSH
59214: LD_INT 0
59216: PUSH
59217: LD_INT 0
59219: PUSH
59220: LD_INT 0
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: LIST
59227: ST_TO_ADDR
// if not base then
59228: LD_VAR 0 1
59232: NOT
59233: IFFALSE 59237
// exit ;
59235: GO 59286
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59237: LD_ADDR_VAR 0 2
59241: PUSH
59242: LD_VAR 0 1
59246: PPUSH
59247: LD_INT 1
59249: PPUSH
59250: CALL_OW 275
59254: PUSH
59255: LD_VAR 0 1
59259: PPUSH
59260: LD_INT 2
59262: PPUSH
59263: CALL_OW 275
59267: PUSH
59268: LD_VAR 0 1
59272: PPUSH
59273: LD_INT 3
59275: PPUSH
59276: CALL_OW 275
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: LIST
59285: ST_TO_ADDR
// end ;
59286: LD_VAR 0 2
59290: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59291: LD_INT 0
59293: PPUSH
59294: PPUSH
// result := array ;
59295: LD_ADDR_VAR 0 3
59299: PUSH
59300: LD_VAR 0 1
59304: ST_TO_ADDR
// if size >= result then
59305: LD_VAR 0 2
59309: PUSH
59310: LD_VAR 0 3
59314: GREATEREQUAL
59315: IFFALSE 59319
// exit ;
59317: GO 59369
// if size then
59319: LD_VAR 0 2
59323: IFFALSE 59369
// for i := array downto size do
59325: LD_ADDR_VAR 0 4
59329: PUSH
59330: DOUBLE
59331: LD_VAR 0 1
59335: INC
59336: ST_TO_ADDR
59337: LD_VAR 0 2
59341: PUSH
59342: FOR_DOWNTO
59343: IFFALSE 59367
// result := Delete ( result , result ) ;
59345: LD_ADDR_VAR 0 3
59349: PUSH
59350: LD_VAR 0 3
59354: PPUSH
59355: LD_VAR 0 3
59359: PPUSH
59360: CALL_OW 3
59364: ST_TO_ADDR
59365: GO 59342
59367: POP
59368: POP
// end ;
59369: LD_VAR 0 3
59373: RET
// export function ComExit ( unit ) ; var tmp ; begin
59374: LD_INT 0
59376: PPUSH
59377: PPUSH
// if not IsInUnit ( unit ) then
59378: LD_VAR 0 1
59382: PPUSH
59383: CALL_OW 310
59387: NOT
59388: IFFALSE 59392
// exit ;
59390: GO 59452
// tmp := IsInUnit ( unit ) ;
59392: LD_ADDR_VAR 0 3
59396: PUSH
59397: LD_VAR 0 1
59401: PPUSH
59402: CALL_OW 310
59406: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59407: LD_VAR 0 3
59411: PPUSH
59412: CALL_OW 247
59416: PUSH
59417: LD_INT 2
59419: EQUAL
59420: IFFALSE 59433
// ComExitVehicle ( unit ) else
59422: LD_VAR 0 1
59426: PPUSH
59427: CALL_OW 121
59431: GO 59442
// ComExitBuilding ( unit ) ;
59433: LD_VAR 0 1
59437: PPUSH
59438: CALL_OW 122
// result := tmp ;
59442: LD_ADDR_VAR 0 2
59446: PUSH
59447: LD_VAR 0 3
59451: ST_TO_ADDR
// end ;
59452: LD_VAR 0 2
59456: RET
// export function ComExitAll ( units ) ; var i ; begin
59457: LD_INT 0
59459: PPUSH
59460: PPUSH
// if not units then
59461: LD_VAR 0 1
59465: NOT
59466: IFFALSE 59470
// exit ;
59468: GO 59496
// for i in units do
59470: LD_ADDR_VAR 0 3
59474: PUSH
59475: LD_VAR 0 1
59479: PUSH
59480: FOR_IN
59481: IFFALSE 59494
// ComExit ( i ) ;
59483: LD_VAR 0 3
59487: PPUSH
59488: CALL 59374 0 1
59492: GO 59480
59494: POP
59495: POP
// end ;
59496: LD_VAR 0 2
59500: RET
// export function ResetHc ; begin
59501: LD_INT 0
59503: PPUSH
// InitHc ;
59504: CALL_OW 19
// hc_importance := 0 ;
59508: LD_ADDR_OWVAR 32
59512: PUSH
59513: LD_INT 0
59515: ST_TO_ADDR
// end ;
59516: LD_VAR 0 1
59520: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59521: LD_INT 0
59523: PPUSH
59524: PPUSH
59525: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59526: LD_ADDR_VAR 0 6
59530: PUSH
59531: LD_VAR 0 1
59535: PUSH
59536: LD_VAR 0 3
59540: PLUS
59541: PUSH
59542: LD_INT 2
59544: DIV
59545: ST_TO_ADDR
// if _x < 0 then
59546: LD_VAR 0 6
59550: PUSH
59551: LD_INT 0
59553: LESS
59554: IFFALSE 59571
// _x := _x * - 1 ;
59556: LD_ADDR_VAR 0 6
59560: PUSH
59561: LD_VAR 0 6
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: MUL
59570: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59571: LD_ADDR_VAR 0 7
59575: PUSH
59576: LD_VAR 0 2
59580: PUSH
59581: LD_VAR 0 4
59585: PLUS
59586: PUSH
59587: LD_INT 2
59589: DIV
59590: ST_TO_ADDR
// if _y < 0 then
59591: LD_VAR 0 7
59595: PUSH
59596: LD_INT 0
59598: LESS
59599: IFFALSE 59616
// _y := _y * - 1 ;
59601: LD_ADDR_VAR 0 7
59605: PUSH
59606: LD_VAR 0 7
59610: PUSH
59611: LD_INT 1
59613: NEG
59614: MUL
59615: ST_TO_ADDR
// result := [ _x , _y ] ;
59616: LD_ADDR_VAR 0 5
59620: PUSH
59621: LD_VAR 0 6
59625: PUSH
59626: LD_VAR 0 7
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: ST_TO_ADDR
// end ;
59635: LD_VAR 0 5
59639: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59640: LD_INT 0
59642: PPUSH
59643: PPUSH
59644: PPUSH
59645: PPUSH
// task := GetTaskList ( unit ) ;
59646: LD_ADDR_VAR 0 7
59650: PUSH
59651: LD_VAR 0 1
59655: PPUSH
59656: CALL_OW 437
59660: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59661: LD_VAR 0 7
59665: NOT
59666: PUSH
59667: LD_VAR 0 1
59671: PPUSH
59672: LD_VAR 0 2
59676: PPUSH
59677: CALL_OW 308
59681: NOT
59682: AND
59683: IFFALSE 59687
// exit ;
59685: GO 59805
// if IsInArea ( unit , area ) then
59687: LD_VAR 0 1
59691: PPUSH
59692: LD_VAR 0 2
59696: PPUSH
59697: CALL_OW 308
59701: IFFALSE 59719
// begin ComMoveToArea ( unit , goAway ) ;
59703: LD_VAR 0 1
59707: PPUSH
59708: LD_VAR 0 3
59712: PPUSH
59713: CALL_OW 113
// exit ;
59717: GO 59805
// end ; if task [ 1 ] [ 1 ] <> M then
59719: LD_VAR 0 7
59723: PUSH
59724: LD_INT 1
59726: ARRAY
59727: PUSH
59728: LD_INT 1
59730: ARRAY
59731: PUSH
59732: LD_STRING M
59734: NONEQUAL
59735: IFFALSE 59739
// exit ;
59737: GO 59805
// x := task [ 1 ] [ 2 ] ;
59739: LD_ADDR_VAR 0 5
59743: PUSH
59744: LD_VAR 0 7
59748: PUSH
59749: LD_INT 1
59751: ARRAY
59752: PUSH
59753: LD_INT 2
59755: ARRAY
59756: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59757: LD_ADDR_VAR 0 6
59761: PUSH
59762: LD_VAR 0 7
59766: PUSH
59767: LD_INT 1
59769: ARRAY
59770: PUSH
59771: LD_INT 3
59773: ARRAY
59774: ST_TO_ADDR
// if InArea ( x , y , area ) then
59775: LD_VAR 0 5
59779: PPUSH
59780: LD_VAR 0 6
59784: PPUSH
59785: LD_VAR 0 2
59789: PPUSH
59790: CALL_OW 309
59794: IFFALSE 59805
// ComStop ( unit ) ;
59796: LD_VAR 0 1
59800: PPUSH
59801: CALL_OW 141
// end ;
59805: LD_VAR 0 4
59809: RET
// export function Abs ( value ) ; begin
59810: LD_INT 0
59812: PPUSH
// result := value ;
59813: LD_ADDR_VAR 0 2
59817: PUSH
59818: LD_VAR 0 1
59822: ST_TO_ADDR
// if value < 0 then
59823: LD_VAR 0 1
59827: PUSH
59828: LD_INT 0
59830: LESS
59831: IFFALSE 59848
// result := value * - 1 ;
59833: LD_ADDR_VAR 0 2
59837: PUSH
59838: LD_VAR 0 1
59842: PUSH
59843: LD_INT 1
59845: NEG
59846: MUL
59847: ST_TO_ADDR
// end ;
59848: LD_VAR 0 2
59852: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59853: LD_INT 0
59855: PPUSH
59856: PPUSH
59857: PPUSH
59858: PPUSH
59859: PPUSH
59860: PPUSH
59861: PPUSH
59862: PPUSH
// if not unit or not building then
59863: LD_VAR 0 1
59867: NOT
59868: PUSH
59869: LD_VAR 0 2
59873: NOT
59874: OR
59875: IFFALSE 59879
// exit ;
59877: GO 60105
// x := GetX ( building ) ;
59879: LD_ADDR_VAR 0 4
59883: PUSH
59884: LD_VAR 0 2
59888: PPUSH
59889: CALL_OW 250
59893: ST_TO_ADDR
// y := GetY ( building ) ;
59894: LD_ADDR_VAR 0 6
59898: PUSH
59899: LD_VAR 0 2
59903: PPUSH
59904: CALL_OW 251
59908: ST_TO_ADDR
// d := GetDir ( building ) ;
59909: LD_ADDR_VAR 0 8
59913: PUSH
59914: LD_VAR 0 2
59918: PPUSH
59919: CALL_OW 254
59923: ST_TO_ADDR
// r := 4 ;
59924: LD_ADDR_VAR 0 9
59928: PUSH
59929: LD_INT 4
59931: ST_TO_ADDR
// for i := 1 to 5 do
59932: LD_ADDR_VAR 0 10
59936: PUSH
59937: DOUBLE
59938: LD_INT 1
59940: DEC
59941: ST_TO_ADDR
59942: LD_INT 5
59944: PUSH
59945: FOR_TO
59946: IFFALSE 60103
// begin _x := ShiftX ( x , d , r + i ) ;
59948: LD_ADDR_VAR 0 5
59952: PUSH
59953: LD_VAR 0 4
59957: PPUSH
59958: LD_VAR 0 8
59962: PPUSH
59963: LD_VAR 0 9
59967: PUSH
59968: LD_VAR 0 10
59972: PLUS
59973: PPUSH
59974: CALL_OW 272
59978: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59979: LD_ADDR_VAR 0 7
59983: PUSH
59984: LD_VAR 0 6
59988: PPUSH
59989: LD_VAR 0 8
59993: PPUSH
59994: LD_VAR 0 9
59998: PUSH
59999: LD_VAR 0 10
60003: PLUS
60004: PPUSH
60005: CALL_OW 273
60009: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60010: LD_VAR 0 5
60014: PPUSH
60015: LD_VAR 0 7
60019: PPUSH
60020: CALL_OW 488
60024: PUSH
60025: LD_VAR 0 5
60029: PPUSH
60030: LD_VAR 0 7
60034: PPUSH
60035: CALL_OW 428
60039: PPUSH
60040: CALL_OW 247
60044: PUSH
60045: LD_INT 3
60047: PUSH
60048: LD_INT 2
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: IN
60055: NOT
60056: AND
60057: IFFALSE 60101
// begin ComMoveXY ( unit , _x , _y ) ;
60059: LD_VAR 0 1
60063: PPUSH
60064: LD_VAR 0 5
60068: PPUSH
60069: LD_VAR 0 7
60073: PPUSH
60074: CALL_OW 111
// result := [ _x , _y ] ;
60078: LD_ADDR_VAR 0 3
60082: PUSH
60083: LD_VAR 0 5
60087: PUSH
60088: LD_VAR 0 7
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: ST_TO_ADDR
// exit ;
60097: POP
60098: POP
60099: GO 60105
// end ; end ;
60101: GO 59945
60103: POP
60104: POP
// end ;
60105: LD_VAR 0 3
60109: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60110: LD_INT 0
60112: PPUSH
60113: PPUSH
60114: PPUSH
// result := 0 ;
60115: LD_ADDR_VAR 0 3
60119: PUSH
60120: LD_INT 0
60122: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60123: LD_VAR 0 1
60127: PUSH
60128: LD_INT 0
60130: LESS
60131: PUSH
60132: LD_VAR 0 1
60136: PUSH
60137: LD_INT 8
60139: GREATER
60140: OR
60141: PUSH
60142: LD_VAR 0 2
60146: PUSH
60147: LD_INT 0
60149: LESS
60150: OR
60151: PUSH
60152: LD_VAR 0 2
60156: PUSH
60157: LD_INT 8
60159: GREATER
60160: OR
60161: IFFALSE 60165
// exit ;
60163: GO 60240
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60165: LD_ADDR_VAR 0 4
60169: PUSH
60170: LD_INT 22
60172: PUSH
60173: LD_VAR 0 2
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PPUSH
60182: CALL_OW 69
60186: PUSH
60187: FOR_IN
60188: IFFALSE 60238
// begin un := UnitShoot ( i ) ;
60190: LD_ADDR_VAR 0 5
60194: PUSH
60195: LD_VAR 0 4
60199: PPUSH
60200: CALL_OW 504
60204: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60205: LD_VAR 0 5
60209: PPUSH
60210: CALL_OW 255
60214: PUSH
60215: LD_VAR 0 1
60219: EQUAL
60220: IFFALSE 60236
// begin result := un ;
60222: LD_ADDR_VAR 0 3
60226: PUSH
60227: LD_VAR 0 5
60231: ST_TO_ADDR
// exit ;
60232: POP
60233: POP
60234: GO 60240
// end ; end ;
60236: GO 60187
60238: POP
60239: POP
// end ;
60240: LD_VAR 0 3
60244: RET
// export function GetCargoBay ( units ) ; begin
60245: LD_INT 0
60247: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60248: LD_ADDR_VAR 0 2
60252: PUSH
60253: LD_VAR 0 1
60257: PPUSH
60258: LD_INT 2
60260: PUSH
60261: LD_INT 34
60263: PUSH
60264: LD_INT 12
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 34
60273: PUSH
60274: LD_INT 51
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 34
60283: PUSH
60284: LD_INT 32
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 34
60293: PUSH
60294: LD_INT 89
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: PPUSH
60308: CALL_OW 72
60312: ST_TO_ADDR
// end ;
60313: LD_VAR 0 2
60317: RET
// export function Negate ( value ) ; begin
60318: LD_INT 0
60320: PPUSH
// result := not value ;
60321: LD_ADDR_VAR 0 2
60325: PUSH
60326: LD_VAR 0 1
60330: NOT
60331: ST_TO_ADDR
// end ;
60332: LD_VAR 0 2
60336: RET
// export function Inc ( value ) ; begin
60337: LD_INT 0
60339: PPUSH
// result := value + 1 ;
60340: LD_ADDR_VAR 0 2
60344: PUSH
60345: LD_VAR 0 1
60349: PUSH
60350: LD_INT 1
60352: PLUS
60353: ST_TO_ADDR
// end ;
60354: LD_VAR 0 2
60358: RET
// export function Dec ( value ) ; begin
60359: LD_INT 0
60361: PPUSH
// result := value - 1 ;
60362: LD_ADDR_VAR 0 2
60366: PUSH
60367: LD_VAR 0 1
60371: PUSH
60372: LD_INT 1
60374: MINUS
60375: ST_TO_ADDR
// end ;
60376: LD_VAR 0 2
60380: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60381: LD_INT 0
60383: PPUSH
60384: PPUSH
60385: PPUSH
60386: PPUSH
60387: PPUSH
60388: PPUSH
60389: PPUSH
60390: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60391: LD_VAR 0 1
60395: PPUSH
60396: LD_VAR 0 2
60400: PPUSH
60401: CALL_OW 488
60405: NOT
60406: PUSH
60407: LD_VAR 0 3
60411: PPUSH
60412: LD_VAR 0 4
60416: PPUSH
60417: CALL_OW 488
60421: NOT
60422: OR
60423: IFFALSE 60436
// begin result := - 1 ;
60425: LD_ADDR_VAR 0 5
60429: PUSH
60430: LD_INT 1
60432: NEG
60433: ST_TO_ADDR
// exit ;
60434: GO 60671
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60436: LD_ADDR_VAR 0 12
60440: PUSH
60441: LD_VAR 0 1
60445: PPUSH
60446: LD_VAR 0 2
60450: PPUSH
60451: LD_VAR 0 3
60455: PPUSH
60456: LD_VAR 0 4
60460: PPUSH
60461: CALL 59521 0 4
60465: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60466: LD_ADDR_VAR 0 11
60470: PUSH
60471: LD_VAR 0 1
60475: PPUSH
60476: LD_VAR 0 2
60480: PPUSH
60481: LD_VAR 0 12
60485: PUSH
60486: LD_INT 1
60488: ARRAY
60489: PPUSH
60490: LD_VAR 0 12
60494: PUSH
60495: LD_INT 2
60497: ARRAY
60498: PPUSH
60499: CALL_OW 298
60503: ST_TO_ADDR
// distance := 9999 ;
60504: LD_ADDR_VAR 0 10
60508: PUSH
60509: LD_INT 9999
60511: ST_TO_ADDR
// for i := 0 to 5 do
60512: LD_ADDR_VAR 0 6
60516: PUSH
60517: DOUBLE
60518: LD_INT 0
60520: DEC
60521: ST_TO_ADDR
60522: LD_INT 5
60524: PUSH
60525: FOR_TO
60526: IFFALSE 60669
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60528: LD_ADDR_VAR 0 7
60532: PUSH
60533: LD_VAR 0 1
60537: PPUSH
60538: LD_VAR 0 6
60542: PPUSH
60543: LD_VAR 0 11
60547: PPUSH
60548: CALL_OW 272
60552: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60553: LD_ADDR_VAR 0 8
60557: PUSH
60558: LD_VAR 0 2
60562: PPUSH
60563: LD_VAR 0 6
60567: PPUSH
60568: LD_VAR 0 11
60572: PPUSH
60573: CALL_OW 273
60577: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60578: LD_VAR 0 7
60582: PPUSH
60583: LD_VAR 0 8
60587: PPUSH
60588: CALL_OW 488
60592: NOT
60593: IFFALSE 60597
// continue ;
60595: GO 60525
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60597: LD_ADDR_VAR 0 9
60601: PUSH
60602: LD_VAR 0 12
60606: PUSH
60607: LD_INT 1
60609: ARRAY
60610: PPUSH
60611: LD_VAR 0 12
60615: PUSH
60616: LD_INT 2
60618: ARRAY
60619: PPUSH
60620: LD_VAR 0 7
60624: PPUSH
60625: LD_VAR 0 8
60629: PPUSH
60630: CALL_OW 298
60634: ST_TO_ADDR
// if tmp < distance then
60635: LD_VAR 0 9
60639: PUSH
60640: LD_VAR 0 10
60644: LESS
60645: IFFALSE 60667
// begin result := i ;
60647: LD_ADDR_VAR 0 5
60651: PUSH
60652: LD_VAR 0 6
60656: ST_TO_ADDR
// distance := tmp ;
60657: LD_ADDR_VAR 0 10
60661: PUSH
60662: LD_VAR 0 9
60666: ST_TO_ADDR
// end ; end ;
60667: GO 60525
60669: POP
60670: POP
// end ;
60671: LD_VAR 0 5
60675: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60676: LD_INT 0
60678: PPUSH
60679: PPUSH
// if not driver or not IsInUnit ( driver ) then
60680: LD_VAR 0 1
60684: NOT
60685: PUSH
60686: LD_VAR 0 1
60690: PPUSH
60691: CALL_OW 310
60695: NOT
60696: OR
60697: IFFALSE 60701
// exit ;
60699: GO 60791
// vehicle := IsInUnit ( driver ) ;
60701: LD_ADDR_VAR 0 3
60705: PUSH
60706: LD_VAR 0 1
60710: PPUSH
60711: CALL_OW 310
60715: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60716: LD_VAR 0 1
60720: PPUSH
60721: LD_STRING \
60723: PUSH
60724: LD_INT 0
60726: PUSH
60727: LD_INT 0
60729: PUSH
60730: LD_INT 0
60732: PUSH
60733: LD_INT 0
60735: PUSH
60736: LD_INT 0
60738: PUSH
60739: LD_INT 0
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: PUSH
60751: LD_STRING E
60753: PUSH
60754: LD_INT 0
60756: PUSH
60757: LD_INT 0
60759: PUSH
60760: LD_VAR 0 3
60764: PUSH
60765: LD_INT 0
60767: PUSH
60768: LD_INT 0
60770: PUSH
60771: LD_INT 0
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PPUSH
60787: CALL_OW 446
// end ;
60791: LD_VAR 0 2
60795: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60796: LD_INT 0
60798: PPUSH
60799: PPUSH
// if not driver or not IsInUnit ( driver ) then
60800: LD_VAR 0 1
60804: NOT
60805: PUSH
60806: LD_VAR 0 1
60810: PPUSH
60811: CALL_OW 310
60815: NOT
60816: OR
60817: IFFALSE 60821
// exit ;
60819: GO 60911
// vehicle := IsInUnit ( driver ) ;
60821: LD_ADDR_VAR 0 3
60825: PUSH
60826: LD_VAR 0 1
60830: PPUSH
60831: CALL_OW 310
60835: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60836: LD_VAR 0 1
60840: PPUSH
60841: LD_STRING \
60843: PUSH
60844: LD_INT 0
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: LD_INT 0
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: LD_INT 0
60858: PUSH
60859: LD_INT 0
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: PUSH
60871: LD_STRING E
60873: PUSH
60874: LD_INT 0
60876: PUSH
60877: LD_INT 0
60879: PUSH
60880: LD_VAR 0 3
60884: PUSH
60885: LD_INT 0
60887: PUSH
60888: LD_INT 0
60890: PUSH
60891: LD_INT 0
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PPUSH
60907: CALL_OW 447
// end ;
60911: LD_VAR 0 2
60915: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60916: LD_INT 0
60918: PPUSH
60919: PPUSH
60920: PPUSH
// tmp := [ ] ;
60921: LD_ADDR_VAR 0 5
60925: PUSH
60926: EMPTY
60927: ST_TO_ADDR
// for i in units do
60928: LD_ADDR_VAR 0 4
60932: PUSH
60933: LD_VAR 0 1
60937: PUSH
60938: FOR_IN
60939: IFFALSE 60977
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60941: LD_ADDR_VAR 0 5
60945: PUSH
60946: LD_VAR 0 5
60950: PPUSH
60951: LD_VAR 0 5
60955: PUSH
60956: LD_INT 1
60958: PLUS
60959: PPUSH
60960: LD_VAR 0 4
60964: PPUSH
60965: CALL_OW 256
60969: PPUSH
60970: CALL_OW 2
60974: ST_TO_ADDR
60975: GO 60938
60977: POP
60978: POP
// if not tmp then
60979: LD_VAR 0 5
60983: NOT
60984: IFFALSE 60988
// exit ;
60986: GO 61036
// if asc then
60988: LD_VAR 0 2
60992: IFFALSE 61016
// result := SortListByListAsc ( units , tmp ) else
60994: LD_ADDR_VAR 0 3
60998: PUSH
60999: LD_VAR 0 1
61003: PPUSH
61004: LD_VAR 0 5
61008: PPUSH
61009: CALL_OW 76
61013: ST_TO_ADDR
61014: GO 61036
// result := SortListByListDesc ( units , tmp ) ;
61016: LD_ADDR_VAR 0 3
61020: PUSH
61021: LD_VAR 0 1
61025: PPUSH
61026: LD_VAR 0 5
61030: PPUSH
61031: CALL_OW 77
61035: ST_TO_ADDR
// end ;
61036: LD_VAR 0 3
61040: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61041: LD_INT 0
61043: PPUSH
61044: PPUSH
// task := GetTaskList ( mech ) ;
61045: LD_ADDR_VAR 0 4
61049: PUSH
61050: LD_VAR 0 1
61054: PPUSH
61055: CALL_OW 437
61059: ST_TO_ADDR
// if not task then
61060: LD_VAR 0 4
61064: NOT
61065: IFFALSE 61069
// exit ;
61067: GO 61111
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61069: LD_ADDR_VAR 0 3
61073: PUSH
61074: LD_VAR 0 4
61078: PUSH
61079: LD_INT 1
61081: ARRAY
61082: PUSH
61083: LD_INT 1
61085: ARRAY
61086: PUSH
61087: LD_STRING r
61089: EQUAL
61090: PUSH
61091: LD_VAR 0 4
61095: PUSH
61096: LD_INT 1
61098: ARRAY
61099: PUSH
61100: LD_INT 4
61102: ARRAY
61103: PUSH
61104: LD_VAR 0 2
61108: EQUAL
61109: AND
61110: ST_TO_ADDR
// end ;
61111: LD_VAR 0 3
61115: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61116: LD_INT 0
61118: PPUSH
// SetDir ( unit , d ) ;
61119: LD_VAR 0 1
61123: PPUSH
61124: LD_VAR 0 4
61128: PPUSH
61129: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
61133: LD_VAR 0 1
61137: PPUSH
61138: LD_VAR 0 2
61142: PPUSH
61143: LD_VAR 0 3
61147: PPUSH
61148: LD_VAR 0 5
61152: PPUSH
61153: CALL_OW 48
// end ;
61157: LD_VAR 0 6
61161: RET
// export function ToNaturalNumber ( number ) ; begin
61162: LD_INT 0
61164: PPUSH
// result := number div 1 ;
61165: LD_ADDR_VAR 0 2
61169: PUSH
61170: LD_VAR 0 1
61174: PUSH
61175: LD_INT 1
61177: DIV
61178: ST_TO_ADDR
// if number < 0 then
61179: LD_VAR 0 1
61183: PUSH
61184: LD_INT 0
61186: LESS
61187: IFFALSE 61197
// result := 0 ;
61189: LD_ADDR_VAR 0 2
61193: PUSH
61194: LD_INT 0
61196: ST_TO_ADDR
// end ;
61197: LD_VAR 0 2
61201: RET
// export function SortByClass ( units , class ) ; var un ; begin
61202: LD_INT 0
61204: PPUSH
61205: PPUSH
// if not units or not class then
61206: LD_VAR 0 1
61210: NOT
61211: PUSH
61212: LD_VAR 0 2
61216: NOT
61217: OR
61218: IFFALSE 61222
// exit ;
61220: GO 61317
// result := [ ] ;
61222: LD_ADDR_VAR 0 3
61226: PUSH
61227: EMPTY
61228: ST_TO_ADDR
// for un in units do
61229: LD_ADDR_VAR 0 4
61233: PUSH
61234: LD_VAR 0 1
61238: PUSH
61239: FOR_IN
61240: IFFALSE 61315
// if GetClass ( un ) = class then
61242: LD_VAR 0 4
61246: PPUSH
61247: CALL_OW 257
61251: PUSH
61252: LD_VAR 0 2
61256: EQUAL
61257: IFFALSE 61284
// result := Insert ( result , 1 , un ) else
61259: LD_ADDR_VAR 0 3
61263: PUSH
61264: LD_VAR 0 3
61268: PPUSH
61269: LD_INT 1
61271: PPUSH
61272: LD_VAR 0 4
61276: PPUSH
61277: CALL_OW 2
61281: ST_TO_ADDR
61282: GO 61313
// result := Replace ( result , result + 1 , un ) ;
61284: LD_ADDR_VAR 0 3
61288: PUSH
61289: LD_VAR 0 3
61293: PPUSH
61294: LD_VAR 0 3
61298: PUSH
61299: LD_INT 1
61301: PLUS
61302: PPUSH
61303: LD_VAR 0 4
61307: PPUSH
61308: CALL_OW 1
61312: ST_TO_ADDR
61313: GO 61239
61315: POP
61316: POP
// end ;
61317: LD_VAR 0 3
61321: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61322: LD_INT 0
61324: PPUSH
61325: PPUSH
61326: PPUSH
61327: PPUSH
61328: PPUSH
61329: PPUSH
61330: PPUSH
// result := [ ] ;
61331: LD_ADDR_VAR 0 4
61335: PUSH
61336: EMPTY
61337: ST_TO_ADDR
// if x - r < 0 then
61338: LD_VAR 0 1
61342: PUSH
61343: LD_VAR 0 3
61347: MINUS
61348: PUSH
61349: LD_INT 0
61351: LESS
61352: IFFALSE 61364
// min_x := 0 else
61354: LD_ADDR_VAR 0 8
61358: PUSH
61359: LD_INT 0
61361: ST_TO_ADDR
61362: GO 61380
// min_x := x - r ;
61364: LD_ADDR_VAR 0 8
61368: PUSH
61369: LD_VAR 0 1
61373: PUSH
61374: LD_VAR 0 3
61378: MINUS
61379: ST_TO_ADDR
// if y - r < 0 then
61380: LD_VAR 0 2
61384: PUSH
61385: LD_VAR 0 3
61389: MINUS
61390: PUSH
61391: LD_INT 0
61393: LESS
61394: IFFALSE 61406
// min_y := 0 else
61396: LD_ADDR_VAR 0 7
61400: PUSH
61401: LD_INT 0
61403: ST_TO_ADDR
61404: GO 61422
// min_y := y - r ;
61406: LD_ADDR_VAR 0 7
61410: PUSH
61411: LD_VAR 0 2
61415: PUSH
61416: LD_VAR 0 3
61420: MINUS
61421: ST_TO_ADDR
// max_x := x + r ;
61422: LD_ADDR_VAR 0 9
61426: PUSH
61427: LD_VAR 0 1
61431: PUSH
61432: LD_VAR 0 3
61436: PLUS
61437: ST_TO_ADDR
// max_y := y + r ;
61438: LD_ADDR_VAR 0 10
61442: PUSH
61443: LD_VAR 0 2
61447: PUSH
61448: LD_VAR 0 3
61452: PLUS
61453: ST_TO_ADDR
// for _x = min_x to max_x do
61454: LD_ADDR_VAR 0 5
61458: PUSH
61459: DOUBLE
61460: LD_VAR 0 8
61464: DEC
61465: ST_TO_ADDR
61466: LD_VAR 0 9
61470: PUSH
61471: FOR_TO
61472: IFFALSE 61573
// for _y = min_y to max_y do
61474: LD_ADDR_VAR 0 6
61478: PUSH
61479: DOUBLE
61480: LD_VAR 0 7
61484: DEC
61485: ST_TO_ADDR
61486: LD_VAR 0 10
61490: PUSH
61491: FOR_TO
61492: IFFALSE 61569
// begin if not ValidHex ( _x , _y ) then
61494: LD_VAR 0 5
61498: PPUSH
61499: LD_VAR 0 6
61503: PPUSH
61504: CALL_OW 488
61508: NOT
61509: IFFALSE 61513
// continue ;
61511: GO 61491
// if GetResourceTypeXY ( _x , _y ) then
61513: LD_VAR 0 5
61517: PPUSH
61518: LD_VAR 0 6
61522: PPUSH
61523: CALL_OW 283
61527: IFFALSE 61567
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61529: LD_ADDR_VAR 0 4
61533: PUSH
61534: LD_VAR 0 4
61538: PPUSH
61539: LD_VAR 0 4
61543: PUSH
61544: LD_INT 1
61546: PLUS
61547: PPUSH
61548: LD_VAR 0 5
61552: PUSH
61553: LD_VAR 0 6
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PPUSH
61562: CALL_OW 1
61566: ST_TO_ADDR
// end ;
61567: GO 61491
61569: POP
61570: POP
61571: GO 61471
61573: POP
61574: POP
// end ;
61575: LD_VAR 0 4
61579: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61580: LD_INT 0
61582: PPUSH
61583: PPUSH
61584: PPUSH
61585: PPUSH
61586: PPUSH
61587: PPUSH
61588: PPUSH
61589: PPUSH
// if not units then
61590: LD_VAR 0 1
61594: NOT
61595: IFFALSE 61599
// exit ;
61597: GO 62123
// result := UnitFilter ( units , [ f_ok ] ) ;
61599: LD_ADDR_VAR 0 3
61603: PUSH
61604: LD_VAR 0 1
61608: PPUSH
61609: LD_INT 50
61611: PUSH
61612: EMPTY
61613: LIST
61614: PPUSH
61615: CALL_OW 72
61619: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61620: LD_ADDR_VAR 0 8
61624: PUSH
61625: LD_VAR 0 1
61629: PUSH
61630: LD_INT 1
61632: ARRAY
61633: PPUSH
61634: CALL_OW 255
61638: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
61639: LD_ADDR_VAR 0 10
61643: PUSH
61644: LD_INT 29
61646: PUSH
61647: LD_INT 91
61649: PUSH
61650: LD_INT 49
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: LIST
61657: ST_TO_ADDR
// if not result then
61658: LD_VAR 0 3
61662: NOT
61663: IFFALSE 61667
// exit ;
61665: GO 62123
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61667: LD_ADDR_VAR 0 5
61671: PUSH
61672: LD_INT 81
61674: PUSH
61675: LD_VAR 0 8
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PPUSH
61684: CALL_OW 69
61688: ST_TO_ADDR
// for i in result do
61689: LD_ADDR_VAR 0 4
61693: PUSH
61694: LD_VAR 0 3
61698: PUSH
61699: FOR_IN
61700: IFFALSE 62121
// begin tag := GetTag ( i ) + 1 ;
61702: LD_ADDR_VAR 0 9
61706: PUSH
61707: LD_VAR 0 4
61711: PPUSH
61712: CALL_OW 110
61716: PUSH
61717: LD_INT 1
61719: PLUS
61720: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
61721: LD_ADDR_VAR 0 7
61725: PUSH
61726: LD_VAR 0 4
61730: PPUSH
61731: CALL_OW 250
61735: PPUSH
61736: LD_VAR 0 4
61740: PPUSH
61741: CALL_OW 251
61745: PPUSH
61746: LD_INT 6
61748: PPUSH
61749: CALL 61322 0 3
61753: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
61754: LD_VAR 0 4
61758: PPUSH
61759: CALL_OW 247
61763: PUSH
61764: LD_INT 2
61766: EQUAL
61767: PUSH
61768: LD_VAR 0 7
61772: AND
61773: PUSH
61774: LD_VAR 0 4
61778: PPUSH
61779: CALL_OW 264
61783: PUSH
61784: LD_VAR 0 10
61788: IN
61789: NOT
61790: AND
61791: IFFALSE 61830
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61793: LD_VAR 0 4
61797: PPUSH
61798: LD_VAR 0 7
61802: PUSH
61803: LD_INT 1
61805: ARRAY
61806: PUSH
61807: LD_INT 1
61809: ARRAY
61810: PPUSH
61811: LD_VAR 0 7
61815: PUSH
61816: LD_INT 1
61818: ARRAY
61819: PUSH
61820: LD_INT 2
61822: ARRAY
61823: PPUSH
61824: CALL_OW 116
61828: GO 62119
// if path > tag then
61830: LD_VAR 0 2
61834: PUSH
61835: LD_VAR 0 9
61839: GREATER
61840: IFFALSE 62048
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
61842: LD_ADDR_VAR 0 6
61846: PUSH
61847: LD_VAR 0 5
61851: PPUSH
61852: LD_INT 91
61854: PUSH
61855: LD_VAR 0 4
61859: PUSH
61860: LD_INT 8
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: LIST
61867: PPUSH
61868: CALL_OW 72
61872: ST_TO_ADDR
// if nearEnemy then
61873: LD_VAR 0 6
61877: IFFALSE 61946
// begin if GetWeapon ( i ) = ru_time_lapser then
61879: LD_VAR 0 4
61883: PPUSH
61884: CALL_OW 264
61888: PUSH
61889: LD_INT 49
61891: EQUAL
61892: IFFALSE 61920
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
61894: LD_VAR 0 4
61898: PPUSH
61899: LD_VAR 0 6
61903: PPUSH
61904: LD_VAR 0 4
61908: PPUSH
61909: CALL_OW 74
61913: PPUSH
61914: CALL_OW 112
61918: GO 61944
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
61920: LD_VAR 0 4
61924: PPUSH
61925: LD_VAR 0 6
61929: PPUSH
61930: LD_VAR 0 4
61934: PPUSH
61935: CALL_OW 74
61939: PPUSH
61940: CALL_OW 115
// end else
61944: GO 62046
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
61946: LD_VAR 0 4
61950: PPUSH
61951: LD_VAR 0 2
61955: PUSH
61956: LD_VAR 0 9
61960: ARRAY
61961: PUSH
61962: LD_INT 1
61964: ARRAY
61965: PPUSH
61966: LD_VAR 0 2
61970: PUSH
61971: LD_VAR 0 9
61975: ARRAY
61976: PUSH
61977: LD_INT 2
61979: ARRAY
61980: PPUSH
61981: CALL_OW 297
61985: PUSH
61986: LD_INT 6
61988: GREATER
61989: IFFALSE 62032
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
61991: LD_VAR 0 4
61995: PPUSH
61996: LD_VAR 0 2
62000: PUSH
62001: LD_VAR 0 9
62005: ARRAY
62006: PUSH
62007: LD_INT 1
62009: ARRAY
62010: PPUSH
62011: LD_VAR 0 2
62015: PUSH
62016: LD_VAR 0 9
62020: ARRAY
62021: PUSH
62022: LD_INT 2
62024: ARRAY
62025: PPUSH
62026: CALL_OW 114
62030: GO 62046
// SetTag ( i , tag ) ;
62032: LD_VAR 0 4
62036: PPUSH
62037: LD_VAR 0 9
62041: PPUSH
62042: CALL_OW 109
// end else
62046: GO 62119
// if enemy then
62048: LD_VAR 0 5
62052: IFFALSE 62119
// begin if GetWeapon ( i ) = ru_time_lapser then
62054: LD_VAR 0 4
62058: PPUSH
62059: CALL_OW 264
62063: PUSH
62064: LD_INT 49
62066: EQUAL
62067: IFFALSE 62095
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
62069: LD_VAR 0 4
62073: PPUSH
62074: LD_VAR 0 5
62078: PPUSH
62079: LD_VAR 0 4
62083: PPUSH
62084: CALL_OW 74
62088: PPUSH
62089: CALL_OW 112
62093: GO 62119
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62095: LD_VAR 0 4
62099: PPUSH
62100: LD_VAR 0 5
62104: PPUSH
62105: LD_VAR 0 4
62109: PPUSH
62110: CALL_OW 74
62114: PPUSH
62115: CALL_OW 115
// end ; end ;
62119: GO 61699
62121: POP
62122: POP
// end ;
62123: LD_VAR 0 3
62127: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62128: LD_INT 0
62130: PPUSH
62131: PPUSH
62132: PPUSH
// if not unit or IsInUnit ( unit ) then
62133: LD_VAR 0 1
62137: NOT
62138: PUSH
62139: LD_VAR 0 1
62143: PPUSH
62144: CALL_OW 310
62148: OR
62149: IFFALSE 62153
// exit ;
62151: GO 62244
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
62153: LD_ADDR_VAR 0 4
62157: PUSH
62158: LD_VAR 0 1
62162: PPUSH
62163: CALL_OW 250
62167: PPUSH
62168: LD_VAR 0 2
62172: PPUSH
62173: LD_INT 1
62175: PPUSH
62176: CALL_OW 272
62180: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
62181: LD_ADDR_VAR 0 5
62185: PUSH
62186: LD_VAR 0 1
62190: PPUSH
62191: CALL_OW 251
62195: PPUSH
62196: LD_VAR 0 2
62200: PPUSH
62201: LD_INT 1
62203: PPUSH
62204: CALL_OW 273
62208: ST_TO_ADDR
// if ValidHex ( x , y ) then
62209: LD_VAR 0 4
62213: PPUSH
62214: LD_VAR 0 5
62218: PPUSH
62219: CALL_OW 488
62223: IFFALSE 62244
// ComTurnXY ( unit , x , y ) ;
62225: LD_VAR 0 1
62229: PPUSH
62230: LD_VAR 0 4
62234: PPUSH
62235: LD_VAR 0 5
62239: PPUSH
62240: CALL_OW 118
// end ;
62244: LD_VAR 0 3
62248: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62249: LD_INT 0
62251: PPUSH
62252: PPUSH
// result := false ;
62253: LD_ADDR_VAR 0 3
62257: PUSH
62258: LD_INT 0
62260: ST_TO_ADDR
// if not units then
62261: LD_VAR 0 2
62265: NOT
62266: IFFALSE 62270
// exit ;
62268: GO 62315
// for i in units do
62270: LD_ADDR_VAR 0 4
62274: PUSH
62275: LD_VAR 0 2
62279: PUSH
62280: FOR_IN
62281: IFFALSE 62313
// if See ( side , i ) then
62283: LD_VAR 0 1
62287: PPUSH
62288: LD_VAR 0 4
62292: PPUSH
62293: CALL_OW 292
62297: IFFALSE 62311
// begin result := true ;
62299: LD_ADDR_VAR 0 3
62303: PUSH
62304: LD_INT 1
62306: ST_TO_ADDR
// exit ;
62307: POP
62308: POP
62309: GO 62315
// end ;
62311: GO 62280
62313: POP
62314: POP
// end ;
62315: LD_VAR 0 3
62319: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62320: LD_INT 0
62322: PPUSH
62323: PPUSH
62324: PPUSH
62325: PPUSH
// if not unit or not points then
62326: LD_VAR 0 1
62330: NOT
62331: PUSH
62332: LD_VAR 0 2
62336: NOT
62337: OR
62338: IFFALSE 62342
// exit ;
62340: GO 62432
// dist := 99999 ;
62342: LD_ADDR_VAR 0 5
62346: PUSH
62347: LD_INT 99999
62349: ST_TO_ADDR
// for i in points do
62350: LD_ADDR_VAR 0 4
62354: PUSH
62355: LD_VAR 0 2
62359: PUSH
62360: FOR_IN
62361: IFFALSE 62430
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62363: LD_ADDR_VAR 0 6
62367: PUSH
62368: LD_VAR 0 1
62372: PPUSH
62373: LD_VAR 0 4
62377: PUSH
62378: LD_INT 1
62380: ARRAY
62381: PPUSH
62382: LD_VAR 0 4
62386: PUSH
62387: LD_INT 2
62389: ARRAY
62390: PPUSH
62391: CALL_OW 297
62395: ST_TO_ADDR
// if tmpDist < dist then
62396: LD_VAR 0 6
62400: PUSH
62401: LD_VAR 0 5
62405: LESS
62406: IFFALSE 62428
// begin result := i ;
62408: LD_ADDR_VAR 0 3
62412: PUSH
62413: LD_VAR 0 4
62417: ST_TO_ADDR
// dist := tmpDist ;
62418: LD_ADDR_VAR 0 5
62422: PUSH
62423: LD_VAR 0 6
62427: ST_TO_ADDR
// end ; end ;
62428: GO 62360
62430: POP
62431: POP
// end ;
62432: LD_VAR 0 3
62436: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
62437: LD_INT 0
62439: PPUSH
// uc_side := side ;
62440: LD_ADDR_OWVAR 20
62444: PUSH
62445: LD_VAR 0 1
62449: ST_TO_ADDR
// uc_nation := 3 ;
62450: LD_ADDR_OWVAR 21
62454: PUSH
62455: LD_INT 3
62457: ST_TO_ADDR
// vc_chassis := 25 ;
62458: LD_ADDR_OWVAR 37
62462: PUSH
62463: LD_INT 25
62465: ST_TO_ADDR
// vc_engine := engine_siberite ;
62466: LD_ADDR_OWVAR 39
62470: PUSH
62471: LD_INT 3
62473: ST_TO_ADDR
// vc_control := control_computer ;
62474: LD_ADDR_OWVAR 38
62478: PUSH
62479: LD_INT 3
62481: ST_TO_ADDR
// vc_weapon := 59 ;
62482: LD_ADDR_OWVAR 40
62486: PUSH
62487: LD_INT 59
62489: ST_TO_ADDR
// result := CreateVehicle ;
62490: LD_ADDR_VAR 0 5
62494: PUSH
62495: CALL_OW 45
62499: ST_TO_ADDR
// SetDir ( result , d ) ;
62500: LD_VAR 0 5
62504: PPUSH
62505: LD_VAR 0 4
62509: PPUSH
62510: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
62514: LD_VAR 0 5
62518: PPUSH
62519: LD_VAR 0 2
62523: PPUSH
62524: LD_VAR 0 3
62528: PPUSH
62529: LD_INT 0
62531: PPUSH
62532: CALL_OW 48
// end ;
62536: LD_VAR 0 5
62540: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
62541: LD_INT 0
62543: PPUSH
62544: PPUSH
62545: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
62546: LD_ADDR_VAR 0 2
62550: PUSH
62551: LD_INT 0
62553: PUSH
62554: LD_INT 0
62556: PUSH
62557: LD_INT 0
62559: PUSH
62560: LD_INT 0
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
62569: LD_VAR 0 1
62573: NOT
62574: PUSH
62575: LD_VAR 0 1
62579: PPUSH
62580: CALL_OW 264
62584: PUSH
62585: LD_INT 12
62587: PUSH
62588: LD_INT 51
62590: PUSH
62591: LD_INT 32
62593: PUSH
62594: LD_INT 89
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: IN
62603: NOT
62604: OR
62605: IFFALSE 62609
// exit ;
62607: GO 62707
// for i := 1 to 3 do
62609: LD_ADDR_VAR 0 3
62613: PUSH
62614: DOUBLE
62615: LD_INT 1
62617: DEC
62618: ST_TO_ADDR
62619: LD_INT 3
62621: PUSH
62622: FOR_TO
62623: IFFALSE 62705
// begin tmp := GetCargo ( cargo , i ) ;
62625: LD_ADDR_VAR 0 4
62629: PUSH
62630: LD_VAR 0 1
62634: PPUSH
62635: LD_VAR 0 3
62639: PPUSH
62640: CALL_OW 289
62644: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
62645: LD_ADDR_VAR 0 2
62649: PUSH
62650: LD_VAR 0 2
62654: PPUSH
62655: LD_VAR 0 3
62659: PPUSH
62660: LD_VAR 0 4
62664: PPUSH
62665: CALL_OW 1
62669: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
62670: LD_ADDR_VAR 0 2
62674: PUSH
62675: LD_VAR 0 2
62679: PPUSH
62680: LD_INT 4
62682: PPUSH
62683: LD_VAR 0 2
62687: PUSH
62688: LD_INT 4
62690: ARRAY
62691: PUSH
62692: LD_VAR 0 4
62696: PLUS
62697: PPUSH
62698: CALL_OW 1
62702: ST_TO_ADDR
// end ;
62703: GO 62622
62705: POP
62706: POP
// end ;
62707: LD_VAR 0 2
62711: RET
// export function Length ( array ) ; begin
62712: LD_INT 0
62714: PPUSH
// result := array + 0 ;
62715: LD_ADDR_VAR 0 2
62719: PUSH
62720: LD_VAR 0 1
62724: PUSH
62725: LD_INT 0
62727: PLUS
62728: ST_TO_ADDR
// end ;
62729: LD_VAR 0 2
62733: RET
// export function PrepareArray ( array ) ; begin
62734: LD_INT 0
62736: PPUSH
// result := array diff 0 ;
62737: LD_ADDR_VAR 0 2
62741: PUSH
62742: LD_VAR 0 1
62746: PUSH
62747: LD_INT 0
62749: DIFF
62750: ST_TO_ADDR
// if not result [ 1 ] then
62751: LD_VAR 0 2
62755: PUSH
62756: LD_INT 1
62758: ARRAY
62759: NOT
62760: IFFALSE 62780
// result := Delete ( result , 1 ) ;
62762: LD_ADDR_VAR 0 2
62766: PUSH
62767: LD_VAR 0 2
62771: PPUSH
62772: LD_INT 1
62774: PPUSH
62775: CALL_OW 3
62779: ST_TO_ADDR
// end ;
62780: LD_VAR 0 2
62784: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
62785: LD_INT 0
62787: PPUSH
62788: PPUSH
62789: PPUSH
62790: PPUSH
// sibRocketRange := 25 ;
62791: LD_ADDR_VAR 0 6
62795: PUSH
62796: LD_INT 25
62798: ST_TO_ADDR
// result := false ;
62799: LD_ADDR_VAR 0 4
62803: PUSH
62804: LD_INT 0
62806: ST_TO_ADDR
// for i := 0 to 5 do
62807: LD_ADDR_VAR 0 5
62811: PUSH
62812: DOUBLE
62813: LD_INT 0
62815: DEC
62816: ST_TO_ADDR
62817: LD_INT 5
62819: PUSH
62820: FOR_TO
62821: IFFALSE 62888
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
62823: LD_VAR 0 1
62827: PPUSH
62828: LD_VAR 0 5
62832: PPUSH
62833: LD_VAR 0 6
62837: PPUSH
62838: CALL_OW 272
62842: PPUSH
62843: LD_VAR 0 2
62847: PPUSH
62848: LD_VAR 0 5
62852: PPUSH
62853: LD_VAR 0 6
62857: PPUSH
62858: CALL_OW 273
62862: PPUSH
62863: LD_VAR 0 3
62867: PPUSH
62868: CALL_OW 309
62872: IFFALSE 62886
// begin result := true ;
62874: LD_ADDR_VAR 0 4
62878: PUSH
62879: LD_INT 1
62881: ST_TO_ADDR
// exit ;
62882: POP
62883: POP
62884: GO 62890
// end ;
62886: GO 62820
62888: POP
62889: POP
// end ;
62890: LD_VAR 0 4
62894: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
62895: LD_INT 0
62897: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
62898: LD_VAR 0 1
62902: PPUSH
62903: LD_VAR 0 2
62907: PPUSH
62908: LD_INT 0
62910: PPUSH
62911: LD_INT 0
62913: PPUSH
62914: LD_INT 1
62916: PPUSH
62917: LD_INT 0
62919: PPUSH
62920: CALL_OW 587
// end ;
62924: LD_VAR 0 3
62928: RET
