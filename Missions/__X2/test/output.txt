// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
   0: LD_VAR 0 1
   4: PPUSH
   5: LD_VAR 0 2
   9: PPUSH
  10: CALL 14495 0 2
// end ;
  14: PPOPN 2
  16: END
// on LeaveVehicle ( vehicle , unit ) do begin display_strings := [ vehicle , unit ] ;
  17: LD_ADDR_OWVAR 47
  21: PUSH
  22: LD_VAR 0 1
  26: PUSH
  27: LD_VAR 0 2
  31: PUSH
  32: EMPTY
  33: LIST
  34: LIST
  35: ST_TO_ADDR
// end ; end_of_file
  36: PPOPN 2
  38: END
// every 0 0$1 do
  39: GO 41
  41: DISABLE
// begin enable ;
  42: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
  43: LD_STRING updateTimer(
  45: PUSH
  46: LD_OWVAR 1
  50: STR
  51: PUSH
  52: LD_STRING );
  54: STR
  55: PPUSH
  56: CALL_OW 559
// end ;
  60: END
// export function SOS_MapStart ( ) ; begin
  61: LD_INT 0
  63: PPUSH
// if streamModeActive then
  64: LD_EXP 1
  68: IFFALSE 77
// DefineStreamItems ( true ) ;
  70: LD_INT 1
  72: PPUSH
  73: CALL 1727 0 1
// UpdateFactoryWaypoints ( ) ;
  77: CALL 15311 0 0
// end ;
  81: LD_VAR 0 1
  85: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
  86: LD_INT 0
  88: PPUSH
// if p2 = 100 then
  89: LD_VAR 0 2
  93: PUSH
  94: LD_INT 100
  96: EQUAL
  97: IFFALSE 1100
// begin if not StreamModeActive then
  99: LD_EXP 1
 103: NOT
 104: IFFALSE 114
// StreamModeActive := true ;
 106: LD_ADDR_EXP 1
 110: PUSH
 111: LD_INT 1
 113: ST_TO_ADDR
// if p3 = 0 then
 114: LD_VAR 0 3
 118: PUSH
 119: LD_INT 0
 121: EQUAL
 122: IFFALSE 128
// InitStreamMode ;
 124: CALL 1263 0 0
// if p3 = 1 then
 128: LD_VAR 0 3
 132: PUSH
 133: LD_INT 1
 135: EQUAL
 136: IFFALSE 146
// sRocket := true ;
 138: LD_ADDR_EXP 6
 142: PUSH
 143: LD_INT 1
 145: ST_TO_ADDR
// if p3 = 2 then
 146: LD_VAR 0 3
 150: PUSH
 151: LD_INT 2
 153: EQUAL
 154: IFFALSE 164
// sSpeed := true ;
 156: LD_ADDR_EXP 5
 160: PUSH
 161: LD_INT 1
 163: ST_TO_ADDR
// if p3 = 3 then
 164: LD_VAR 0 3
 168: PUSH
 169: LD_INT 3
 171: EQUAL
 172: IFFALSE 182
// sEngine := true ;
 174: LD_ADDR_EXP 7
 178: PUSH
 179: LD_INT 1
 181: ST_TO_ADDR
// if p3 = 4 then
 182: LD_VAR 0 3
 186: PUSH
 187: LD_INT 4
 189: EQUAL
 190: IFFALSE 200
// sSpec := true ;
 192: LD_ADDR_EXP 4
 196: PUSH
 197: LD_INT 1
 199: ST_TO_ADDR
// if p3 = 5 then
 200: LD_VAR 0 3
 204: PUSH
 205: LD_INT 5
 207: EQUAL
 208: IFFALSE 218
// sLevel := true ;
 210: LD_ADDR_EXP 8
 214: PUSH
 215: LD_INT 1
 217: ST_TO_ADDR
// if p3 = 6 then
 218: LD_VAR 0 3
 222: PUSH
 223: LD_INT 6
 225: EQUAL
 226: IFFALSE 236
// sArmoury := true ;
 228: LD_ADDR_EXP 9
 232: PUSH
 233: LD_INT 1
 235: ST_TO_ADDR
// if p3 = 7 then
 236: LD_VAR 0 3
 240: PUSH
 241: LD_INT 7
 243: EQUAL
 244: IFFALSE 254
// sRadar := true ;
 246: LD_ADDR_EXP 10
 250: PUSH
 251: LD_INT 1
 253: ST_TO_ADDR
// if p3 = 8 then
 254: LD_VAR 0 3
 258: PUSH
 259: LD_INT 8
 261: EQUAL
 262: IFFALSE 272
// sBunker := true ;
 264: LD_ADDR_EXP 11
 268: PUSH
 269: LD_INT 1
 271: ST_TO_ADDR
// if p3 = 9 then
 272: LD_VAR 0 3
 276: PUSH
 277: LD_INT 9
 279: EQUAL
 280: IFFALSE 290
// sHack := true ;
 282: LD_ADDR_EXP 12
 286: PUSH
 287: LD_INT 1
 289: ST_TO_ADDR
// if p3 = 10 then
 290: LD_VAR 0 3
 294: PUSH
 295: LD_INT 10
 297: EQUAL
 298: IFFALSE 308
// sFire := true ;
 300: LD_ADDR_EXP 13
 304: PUSH
 305: LD_INT 1
 307: ST_TO_ADDR
// if p3 = 11 then
 308: LD_VAR 0 3
 312: PUSH
 313: LD_INT 11
 315: EQUAL
 316: IFFALSE 326
// sRefresh := true ;
 318: LD_ADDR_EXP 14
 322: PUSH
 323: LD_INT 1
 325: ST_TO_ADDR
// if p3 = 12 then
 326: LD_VAR 0 3
 330: PUSH
 331: LD_INT 12
 333: EQUAL
 334: IFFALSE 344
// sExp := true ;
 336: LD_ADDR_EXP 15
 340: PUSH
 341: LD_INT 1
 343: ST_TO_ADDR
// if p3 = 13 then
 344: LD_VAR 0 3
 348: PUSH
 349: LD_INT 13
 351: EQUAL
 352: IFFALSE 362
// sDepot := true ;
 354: LD_ADDR_EXP 16
 358: PUSH
 359: LD_INT 1
 361: ST_TO_ADDR
// if p3 = 14 then
 362: LD_VAR 0 3
 366: PUSH
 367: LD_INT 14
 369: EQUAL
 370: IFFALSE 380
// sFlag := true ;
 372: LD_ADDR_EXP 17
 376: PUSH
 377: LD_INT 1
 379: ST_TO_ADDR
// if p3 = 15 then
 380: LD_VAR 0 3
 384: PUSH
 385: LD_INT 15
 387: EQUAL
 388: IFFALSE 398
// sKamikadze := true ;
 390: LD_ADDR_EXP 25
 394: PUSH
 395: LD_INT 1
 397: ST_TO_ADDR
// if p3 = 16 then
 398: LD_VAR 0 3
 402: PUSH
 403: LD_INT 16
 405: EQUAL
 406: IFFALSE 416
// sTroll := true ;
 408: LD_ADDR_EXP 26
 412: PUSH
 413: LD_INT 1
 415: ST_TO_ADDR
// if p3 = 17 then
 416: LD_VAR 0 3
 420: PUSH
 421: LD_INT 17
 423: EQUAL
 424: IFFALSE 434
// sSlow := true ;
 426: LD_ADDR_EXP 27
 430: PUSH
 431: LD_INT 1
 433: ST_TO_ADDR
// if p3 = 18 then
 434: LD_VAR 0 3
 438: PUSH
 439: LD_INT 18
 441: EQUAL
 442: IFFALSE 452
// sLack := true ;
 444: LD_ADDR_EXP 28
 448: PUSH
 449: LD_INT 1
 451: ST_TO_ADDR
// if p3 = 19 then
 452: LD_VAR 0 3
 456: PUSH
 457: LD_INT 19
 459: EQUAL
 460: IFFALSE 470
// sTank := true ;
 462: LD_ADDR_EXP 30
 466: PUSH
 467: LD_INT 1
 469: ST_TO_ADDR
// if p3 = 20 then
 470: LD_VAR 0 3
 474: PUSH
 475: LD_INT 20
 477: EQUAL
 478: IFFALSE 488
// sRemote := true ;
 480: LD_ADDR_EXP 31
 484: PUSH
 485: LD_INT 1
 487: ST_TO_ADDR
// if p3 = 21 then
 488: LD_VAR 0 3
 492: PUSH
 493: LD_INT 21
 495: EQUAL
 496: IFFALSE 506
// sPowell := true ;
 498: LD_ADDR_EXP 32
 502: PUSH
 503: LD_INT 1
 505: ST_TO_ADDR
// if p3 = 22 then
 506: LD_VAR 0 3
 510: PUSH
 511: LD_INT 22
 513: EQUAL
 514: IFFALSE 524
// sTeleport := true ;
 516: LD_ADDR_EXP 35
 520: PUSH
 521: LD_INT 1
 523: ST_TO_ADDR
// if p3 = 23 then
 524: LD_VAR 0 3
 528: PUSH
 529: LD_INT 23
 531: EQUAL
 532: IFFALSE 542
// sOilTower := true ;
 534: LD_ADDR_EXP 37
 538: PUSH
 539: LD_INT 1
 541: ST_TO_ADDR
// if p3 = 24 then
 542: LD_VAR 0 3
 546: PUSH
 547: LD_INT 24
 549: EQUAL
 550: IFFALSE 560
// sShovel := true ;
 552: LD_ADDR_EXP 38
 556: PUSH
 557: LD_INT 1
 559: ST_TO_ADDR
// if p3 = 25 then
 560: LD_VAR 0 3
 564: PUSH
 565: LD_INT 25
 567: EQUAL
 568: IFFALSE 578
// sSheik := true ;
 570: LD_ADDR_EXP 39
 574: PUSH
 575: LD_INT 1
 577: ST_TO_ADDR
// if p3 = 26 then
 578: LD_VAR 0 3
 582: PUSH
 583: LD_INT 26
 585: EQUAL
 586: IFFALSE 596
// sEarthquake := true ;
 588: LD_ADDR_EXP 41
 592: PUSH
 593: LD_INT 1
 595: ST_TO_ADDR
// if p3 = 27 then
 596: LD_VAR 0 3
 600: PUSH
 601: LD_INT 27
 603: EQUAL
 604: IFFALSE 614
// sAI := true ;
 606: LD_ADDR_EXP 42
 610: PUSH
 611: LD_INT 1
 613: ST_TO_ADDR
// if p3 = 28 then
 614: LD_VAR 0 3
 618: PUSH
 619: LD_INT 28
 621: EQUAL
 622: IFFALSE 632
// sCargo := true ;
 624: LD_ADDR_EXP 45
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// if p3 = 29 then
 632: LD_VAR 0 3
 636: PUSH
 637: LD_INT 29
 639: EQUAL
 640: IFFALSE 650
// sDLaser := true ;
 642: LD_ADDR_EXP 46
 646: PUSH
 647: LD_INT 1
 649: ST_TO_ADDR
// if p3 = 30 then
 650: LD_VAR 0 3
 654: PUSH
 655: LD_INT 30
 657: EQUAL
 658: IFFALSE 668
// sExchange := true ;
 660: LD_ADDR_EXP 47
 664: PUSH
 665: LD_INT 1
 667: ST_TO_ADDR
// if p3 = 31 then
 668: LD_VAR 0 3
 672: PUSH
 673: LD_INT 31
 675: EQUAL
 676: IFFALSE 686
// sFac := true ;
 678: LD_ADDR_EXP 48
 682: PUSH
 683: LD_INT 1
 685: ST_TO_ADDR
// if p3 = 32 then
 686: LD_VAR 0 3
 690: PUSH
 691: LD_INT 32
 693: EQUAL
 694: IFFALSE 704
// sPower := true ;
 696: LD_ADDR_EXP 49
 700: PUSH
 701: LD_INT 1
 703: ST_TO_ADDR
// if p3 = 33 then
 704: LD_VAR 0 3
 708: PUSH
 709: LD_INT 33
 711: EQUAL
 712: IFFALSE 722
// sRandom := true ;
 714: LD_ADDR_EXP 50
 718: PUSH
 719: LD_INT 1
 721: ST_TO_ADDR
// if p3 = 34 then
 722: LD_VAR 0 3
 726: PUSH
 727: LD_INT 34
 729: EQUAL
 730: IFFALSE 740
// sShield := true ;
 732: LD_ADDR_EXP 51
 736: PUSH
 737: LD_INT 1
 739: ST_TO_ADDR
// if p3 = 35 then
 740: LD_VAR 0 3
 744: PUSH
 745: LD_INT 35
 747: EQUAL
 748: IFFALSE 758
// sTime := true ;
 750: LD_ADDR_EXP 52
 754: PUSH
 755: LD_INT 1
 757: ST_TO_ADDR
// if p3 = 36 then
 758: LD_VAR 0 3
 762: PUSH
 763: LD_INT 36
 765: EQUAL
 766: IFFALSE 776
// sTools := true ;
 768: LD_ADDR_EXP 53
 772: PUSH
 773: LD_INT 1
 775: ST_TO_ADDR
// if p3 = 101 then
 776: LD_VAR 0 3
 780: PUSH
 781: LD_INT 101
 783: EQUAL
 784: IFFALSE 794
// sSold := true ;
 786: LD_ADDR_EXP 18
 790: PUSH
 791: LD_INT 1
 793: ST_TO_ADDR
// if p3 = 102 then
 794: LD_VAR 0 3
 798: PUSH
 799: LD_INT 102
 801: EQUAL
 802: IFFALSE 812
// sDiff := true ;
 804: LD_ADDR_EXP 19
 808: PUSH
 809: LD_INT 1
 811: ST_TO_ADDR
// if p3 = 103 then
 812: LD_VAR 0 3
 816: PUSH
 817: LD_INT 103
 819: EQUAL
 820: IFFALSE 830
// sFog := true ;
 822: LD_ADDR_EXP 22
 826: PUSH
 827: LD_INT 1
 829: ST_TO_ADDR
// if p3 = 104 then
 830: LD_VAR 0 3
 834: PUSH
 835: LD_INT 104
 837: EQUAL
 838: IFFALSE 848
// sReset := true ;
 840: LD_ADDR_EXP 23
 844: PUSH
 845: LD_INT 1
 847: ST_TO_ADDR
// if p3 = 105 then
 848: LD_VAR 0 3
 852: PUSH
 853: LD_INT 105
 855: EQUAL
 856: IFFALSE 866
// sSun := true ;
 858: LD_ADDR_EXP 24
 862: PUSH
 863: LD_INT 1
 865: ST_TO_ADDR
// if p3 = 106 then
 866: LD_VAR 0 3
 870: PUSH
 871: LD_INT 106
 873: EQUAL
 874: IFFALSE 884
// sTiger := true ;
 876: LD_ADDR_EXP 20
 880: PUSH
 881: LD_INT 1
 883: ST_TO_ADDR
// if p3 = 107 then
 884: LD_VAR 0 3
 888: PUSH
 889: LD_INT 107
 891: EQUAL
 892: IFFALSE 902
// sBomb := true ;
 894: LD_ADDR_EXP 21
 898: PUSH
 899: LD_INT 1
 901: ST_TO_ADDR
// if p3 = 108 then
 902: LD_VAR 0 3
 906: PUSH
 907: LD_INT 108
 909: EQUAL
 910: IFFALSE 920
// sWound := true ;
 912: LD_ADDR_EXP 29
 916: PUSH
 917: LD_INT 1
 919: ST_TO_ADDR
// if p3 = 109 then
 920: LD_VAR 0 3
 924: PUSH
 925: LD_INT 109
 927: EQUAL
 928: IFFALSE 938
// sBetray := true ;
 930: LD_ADDR_EXP 33
 934: PUSH
 935: LD_INT 1
 937: ST_TO_ADDR
// if p3 = 110 then
 938: LD_VAR 0 3
 942: PUSH
 943: LD_INT 110
 945: EQUAL
 946: IFFALSE 956
// sContamin := true ;
 948: LD_ADDR_EXP 34
 952: PUSH
 953: LD_INT 1
 955: ST_TO_ADDR
// if p3 = 111 then
 956: LD_VAR 0 3
 960: PUSH
 961: LD_INT 111
 963: EQUAL
 964: IFFALSE 974
// sOil := true ;
 966: LD_ADDR_EXP 36
 970: PUSH
 971: LD_INT 1
 973: ST_TO_ADDR
// if p3 = 112 then
 974: LD_VAR 0 3
 978: PUSH
 979: LD_INT 112
 981: EQUAL
 982: IFFALSE 992
// sStu := true ;
 984: LD_ADDR_EXP 40
 988: PUSH
 989: LD_INT 1
 991: ST_TO_ADDR
// if p3 = 113 then
 992: LD_VAR 0 3
 996: PUSH
 997: LD_INT 113
 999: EQUAL
1000: IFFALSE 1010
// sBazooka := true ;
1002: LD_ADDR_EXP 43
1006: PUSH
1007: LD_INT 1
1009: ST_TO_ADDR
// if p3 = 114 then
1010: LD_VAR 0 3
1014: PUSH
1015: LD_INT 114
1017: EQUAL
1018: IFFALSE 1028
// sMortar := true ;
1020: LD_ADDR_EXP 44
1024: PUSH
1025: LD_INT 1
1027: ST_TO_ADDR
// if p3 = 115 then
1028: LD_VAR 0 3
1032: PUSH
1033: LD_INT 115
1035: EQUAL
1036: IFFALSE 1046
// sRanger := true ;
1038: LD_ADDR_EXP 54
1042: PUSH
1043: LD_INT 1
1045: ST_TO_ADDR
// if p3 = 116 then
1046: LD_VAR 0 3
1050: PUSH
1051: LD_INT 116
1053: EQUAL
1054: IFFALSE 1064
// sComputer := true ;
1056: LD_ADDR_EXP 55
1060: PUSH
1061: LD_INT 1
1063: ST_TO_ADDR
// if p3 = 117 then
1064: LD_VAR 0 3
1068: PUSH
1069: LD_INT 117
1071: EQUAL
1072: IFFALSE 1082
// s30 := true ;
1074: LD_ADDR_EXP 56
1078: PUSH
1079: LD_INT 1
1081: ST_TO_ADDR
// if p3 = 118 then
1082: LD_VAR 0 3
1086: PUSH
1087: LD_INT 118
1089: EQUAL
1090: IFFALSE 1100
// s60 := true ;
1092: LD_ADDR_EXP 57
1096: PUSH
1097: LD_INT 1
1099: ST_TO_ADDR
// end ; if p2 = 101 then
1100: LD_VAR 0 2
1104: PUSH
1105: LD_INT 101
1107: EQUAL
1108: IFFALSE 1236
// begin case p3 of 1 :
1110: LD_VAR 0 3
1114: PUSH
1115: LD_INT 1
1117: DOUBLE
1118: EQUAL
1119: IFTRUE 1123
1121: GO 1130
1123: POP
// hHackUnlimitedResources ; 2 :
1124: CALL 13334 0 0
1128: GO 1236
1130: LD_INT 2
1132: DOUBLE
1133: EQUAL
1134: IFTRUE 1138
1136: GO 1145
1138: POP
// hHackSetLevel10 ; 3 :
1139: CALL 13467 0 0
1143: GO 1236
1145: LD_INT 3
1147: DOUBLE
1148: EQUAL
1149: IFTRUE 1153
1151: GO 1160
1153: POP
// hHackSetLevel10YourUnits ; 4 :
1154: CALL 13552 0 0
1158: GO 1236
1160: LD_INT 4
1162: DOUBLE
1163: EQUAL
1164: IFTRUE 1168
1166: GO 1175
1168: POP
// hHackInvincible ; 5 :
1169: CALL 14000 0 0
1173: GO 1236
1175: LD_INT 5
1177: DOUBLE
1178: EQUAL
1179: IFTRUE 1183
1181: GO 1190
1183: POP
// hHackInvisible ; 6 :
1184: CALL 14111 0 0
1188: GO 1236
1190: LD_INT 6
1192: DOUBLE
1193: EQUAL
1194: IFTRUE 1198
1196: GO 1205
1198: POP
// hHackChangeYourSide ; 7 :
1199: CALL 14168 0 0
1203: GO 1236
1205: LD_INT 7
1207: DOUBLE
1208: EQUAL
1209: IFTRUE 1213
1211: GO 1220
1213: POP
// hHackChangeUnitSide ; 8 :
1214: CALL 14210 0 0
1218: GO 1236
1220: LD_INT 8
1222: DOUBLE
1223: EQUAL
1224: IFTRUE 1228
1226: GO 1235
1228: POP
// hHackFog ; end ;
1229: CALL 14311 0 0
1233: GO 1236
1235: POP
// end ; end ;
1236: LD_VAR 0 7
1240: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
1241: GO 1243
1243: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
1244: LD_STRING initStreamRollete();
1246: PPUSH
1247: CALL_OW 559
// InitStreamMode ;
1251: CALL 1263 0 0
// DefineStreamItems ( false ) ;
1255: LD_INT 0
1257: PPUSH
1258: CALL 1727 0 1
// end ;
1262: END
// function InitStreamMode ; begin
1263: LD_INT 0
1265: PPUSH
// streamModeActive := false ;
1266: LD_ADDR_EXP 1
1270: PUSH
1271: LD_INT 0
1273: ST_TO_ADDR
// normalCounter := 36 ;
1274: LD_ADDR_EXP 2
1278: PUSH
1279: LD_INT 36
1281: ST_TO_ADDR
// hardcoreCounter := 18 ;
1282: LD_ADDR_EXP 3
1286: PUSH
1287: LD_INT 18
1289: ST_TO_ADDR
// sRocket := false ;
1290: LD_ADDR_EXP 6
1294: PUSH
1295: LD_INT 0
1297: ST_TO_ADDR
// sSpeed := false ;
1298: LD_ADDR_EXP 5
1302: PUSH
1303: LD_INT 0
1305: ST_TO_ADDR
// sEngine := false ;
1306: LD_ADDR_EXP 7
1310: PUSH
1311: LD_INT 0
1313: ST_TO_ADDR
// sSpec := false ;
1314: LD_ADDR_EXP 4
1318: PUSH
1319: LD_INT 0
1321: ST_TO_ADDR
// sLevel := false ;
1322: LD_ADDR_EXP 8
1326: PUSH
1327: LD_INT 0
1329: ST_TO_ADDR
// sArmoury := false ;
1330: LD_ADDR_EXP 9
1334: PUSH
1335: LD_INT 0
1337: ST_TO_ADDR
// sRadar := false ;
1338: LD_ADDR_EXP 10
1342: PUSH
1343: LD_INT 0
1345: ST_TO_ADDR
// sBunker := false ;
1346: LD_ADDR_EXP 11
1350: PUSH
1351: LD_INT 0
1353: ST_TO_ADDR
// sHack := false ;
1354: LD_ADDR_EXP 12
1358: PUSH
1359: LD_INT 0
1361: ST_TO_ADDR
// sFire := false ;
1362: LD_ADDR_EXP 13
1366: PUSH
1367: LD_INT 0
1369: ST_TO_ADDR
// sRefresh := false ;
1370: LD_ADDR_EXP 14
1374: PUSH
1375: LD_INT 0
1377: ST_TO_ADDR
// sExp := false ;
1378: LD_ADDR_EXP 15
1382: PUSH
1383: LD_INT 0
1385: ST_TO_ADDR
// sDepot := false ;
1386: LD_ADDR_EXP 16
1390: PUSH
1391: LD_INT 0
1393: ST_TO_ADDR
// sFlag := false ;
1394: LD_ADDR_EXP 17
1398: PUSH
1399: LD_INT 0
1401: ST_TO_ADDR
// sKamikadze := false ;
1402: LD_ADDR_EXP 25
1406: PUSH
1407: LD_INT 0
1409: ST_TO_ADDR
// sTroll := false ;
1410: LD_ADDR_EXP 26
1414: PUSH
1415: LD_INT 0
1417: ST_TO_ADDR
// sSlow := false ;
1418: LD_ADDR_EXP 27
1422: PUSH
1423: LD_INT 0
1425: ST_TO_ADDR
// sLack := false ;
1426: LD_ADDR_EXP 28
1430: PUSH
1431: LD_INT 0
1433: ST_TO_ADDR
// sTank := false ;
1434: LD_ADDR_EXP 30
1438: PUSH
1439: LD_INT 0
1441: ST_TO_ADDR
// sRemote := false ;
1442: LD_ADDR_EXP 31
1446: PUSH
1447: LD_INT 0
1449: ST_TO_ADDR
// sPowell := false ;
1450: LD_ADDR_EXP 32
1454: PUSH
1455: LD_INT 0
1457: ST_TO_ADDR
// sTeleport := false ;
1458: LD_ADDR_EXP 35
1462: PUSH
1463: LD_INT 0
1465: ST_TO_ADDR
// sOilTower := false ;
1466: LD_ADDR_EXP 37
1470: PUSH
1471: LD_INT 0
1473: ST_TO_ADDR
// sShovel := false ;
1474: LD_ADDR_EXP 38
1478: PUSH
1479: LD_INT 0
1481: ST_TO_ADDR
// sSheik := false ;
1482: LD_ADDR_EXP 39
1486: PUSH
1487: LD_INT 0
1489: ST_TO_ADDR
// sEarthquake := false ;
1490: LD_ADDR_EXP 41
1494: PUSH
1495: LD_INT 0
1497: ST_TO_ADDR
// sAI := false ;
1498: LD_ADDR_EXP 42
1502: PUSH
1503: LD_INT 0
1505: ST_TO_ADDR
// sCargo := false ;
1506: LD_ADDR_EXP 45
1510: PUSH
1511: LD_INT 0
1513: ST_TO_ADDR
// sDLaser := false ;
1514: LD_ADDR_EXP 46
1518: PUSH
1519: LD_INT 0
1521: ST_TO_ADDR
// sExchange := false ;
1522: LD_ADDR_EXP 47
1526: PUSH
1527: LD_INT 0
1529: ST_TO_ADDR
// sFac := false ;
1530: LD_ADDR_EXP 48
1534: PUSH
1535: LD_INT 0
1537: ST_TO_ADDR
// sPower := false ;
1538: LD_ADDR_EXP 49
1542: PUSH
1543: LD_INT 0
1545: ST_TO_ADDR
// sRandom := false ;
1546: LD_ADDR_EXP 50
1550: PUSH
1551: LD_INT 0
1553: ST_TO_ADDR
// sShield := false ;
1554: LD_ADDR_EXP 51
1558: PUSH
1559: LD_INT 0
1561: ST_TO_ADDR
// sTime := false ;
1562: LD_ADDR_EXP 52
1566: PUSH
1567: LD_INT 0
1569: ST_TO_ADDR
// sTools := false ;
1570: LD_ADDR_EXP 53
1574: PUSH
1575: LD_INT 0
1577: ST_TO_ADDR
// sSold := false ;
1578: LD_ADDR_EXP 18
1582: PUSH
1583: LD_INT 0
1585: ST_TO_ADDR
// sDiff := false ;
1586: LD_ADDR_EXP 19
1590: PUSH
1591: LD_INT 0
1593: ST_TO_ADDR
// sFog := false ;
1594: LD_ADDR_EXP 22
1598: PUSH
1599: LD_INT 0
1601: ST_TO_ADDR
// sReset := false ;
1602: LD_ADDR_EXP 23
1606: PUSH
1607: LD_INT 0
1609: ST_TO_ADDR
// sSun := false ;
1610: LD_ADDR_EXP 24
1614: PUSH
1615: LD_INT 0
1617: ST_TO_ADDR
// sTiger := false ;
1618: LD_ADDR_EXP 20
1622: PUSH
1623: LD_INT 0
1625: ST_TO_ADDR
// sBomb := false ;
1626: LD_ADDR_EXP 21
1630: PUSH
1631: LD_INT 0
1633: ST_TO_ADDR
// sWound := false ;
1634: LD_ADDR_EXP 29
1638: PUSH
1639: LD_INT 0
1641: ST_TO_ADDR
// sBetray := false ;
1642: LD_ADDR_EXP 33
1646: PUSH
1647: LD_INT 0
1649: ST_TO_ADDR
// sContamin := false ;
1650: LD_ADDR_EXP 34
1654: PUSH
1655: LD_INT 0
1657: ST_TO_ADDR
// sOil := false ;
1658: LD_ADDR_EXP 36
1662: PUSH
1663: LD_INT 0
1665: ST_TO_ADDR
// sStu := false ;
1666: LD_ADDR_EXP 40
1670: PUSH
1671: LD_INT 0
1673: ST_TO_ADDR
// sBazooka := false ;
1674: LD_ADDR_EXP 43
1678: PUSH
1679: LD_INT 0
1681: ST_TO_ADDR
// sMortar := false ;
1682: LD_ADDR_EXP 44
1686: PUSH
1687: LD_INT 0
1689: ST_TO_ADDR
// sRanger := false ;
1690: LD_ADDR_EXP 54
1694: PUSH
1695: LD_INT 0
1697: ST_TO_ADDR
// sComputer := false ;
1698: LD_ADDR_EXP 55
1702: PUSH
1703: LD_INT 0
1705: ST_TO_ADDR
// s30 := false ;
1706: LD_ADDR_EXP 56
1710: PUSH
1711: LD_INT 0
1713: ST_TO_ADDR
// s60 := false ;
1714: LD_ADDR_EXP 57
1718: PUSH
1719: LD_INT 0
1721: ST_TO_ADDR
// end ;
1722: LD_VAR 0 1
1726: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
1727: LD_INT 0
1729: PPUSH
1730: PPUSH
1731: PPUSH
1732: PPUSH
1733: PPUSH
1734: PPUSH
1735: PPUSH
// result := [ ] ;
1736: LD_ADDR_VAR 0 2
1740: PUSH
1741: EMPTY
1742: ST_TO_ADDR
// if campaign_id = 1 then
1743: LD_OWVAR 69
1747: PUSH
1748: LD_INT 1
1750: EQUAL
1751: IFFALSE 4917
// begin case mission_number of 1 :
1753: LD_OWVAR 70
1757: PUSH
1758: LD_INT 1
1760: DOUBLE
1761: EQUAL
1762: IFTRUE 1766
1764: GO 1842
1766: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
1767: LD_ADDR_VAR 0 2
1771: PUSH
1772: LD_INT 2
1774: PUSH
1775: LD_INT 4
1777: PUSH
1778: LD_INT 11
1780: PUSH
1781: LD_INT 12
1783: PUSH
1784: LD_INT 15
1786: PUSH
1787: LD_INT 16
1789: PUSH
1790: LD_INT 22
1792: PUSH
1793: LD_INT 23
1795: PUSH
1796: LD_INT 26
1798: PUSH
1799: EMPTY
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: PUSH
1810: LD_INT 101
1812: PUSH
1813: LD_INT 102
1815: PUSH
1816: LD_INT 106
1818: PUSH
1819: LD_INT 116
1821: PUSH
1822: LD_INT 117
1824: PUSH
1825: LD_INT 118
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: ST_TO_ADDR
1840: GO 4915
1842: LD_INT 2
1844: DOUBLE
1845: EQUAL
1846: IFTRUE 1850
1848: GO 1934
1850: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
1851: LD_ADDR_VAR 0 2
1855: PUSH
1856: LD_INT 2
1858: PUSH
1859: LD_INT 4
1861: PUSH
1862: LD_INT 11
1864: PUSH
1865: LD_INT 12
1867: PUSH
1868: LD_INT 15
1870: PUSH
1871: LD_INT 16
1873: PUSH
1874: LD_INT 22
1876: PUSH
1877: LD_INT 23
1879: PUSH
1880: LD_INT 26
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: PUSH
1894: LD_INT 101
1896: PUSH
1897: LD_INT 102
1899: PUSH
1900: LD_INT 105
1902: PUSH
1903: LD_INT 106
1905: PUSH
1906: LD_INT 108
1908: PUSH
1909: LD_INT 116
1911: PUSH
1912: LD_INT 117
1914: PUSH
1915: LD_INT 118
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: ST_TO_ADDR
1932: GO 4915
1934: LD_INT 3
1936: DOUBLE
1937: EQUAL
1938: IFTRUE 1942
1940: GO 2030
1942: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
1943: LD_ADDR_VAR 0 2
1947: PUSH
1948: LD_INT 2
1950: PUSH
1951: LD_INT 4
1953: PUSH
1954: LD_INT 5
1956: PUSH
1957: LD_INT 11
1959: PUSH
1960: LD_INT 12
1962: PUSH
1963: LD_INT 15
1965: PUSH
1966: LD_INT 16
1968: PUSH
1969: LD_INT 22
1971: PUSH
1972: LD_INT 26
1974: PUSH
1975: LD_INT 36
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: PUSH
1990: LD_INT 101
1992: PUSH
1993: LD_INT 102
1995: PUSH
1996: LD_INT 105
1998: PUSH
1999: LD_INT 106
2001: PUSH
2002: LD_INT 108
2004: PUSH
2005: LD_INT 116
2007: PUSH
2008: LD_INT 117
2010: PUSH
2011: LD_INT 118
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: ST_TO_ADDR
2028: GO 4915
2030: LD_INT 4
2032: DOUBLE
2033: EQUAL
2034: IFTRUE 2038
2036: GO 2134
2038: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
2039: LD_ADDR_VAR 0 2
2043: PUSH
2044: LD_INT 2
2046: PUSH
2047: LD_INT 4
2049: PUSH
2050: LD_INT 5
2052: PUSH
2053: LD_INT 8
2055: PUSH
2056: LD_INT 11
2058: PUSH
2059: LD_INT 12
2061: PUSH
2062: LD_INT 15
2064: PUSH
2065: LD_INT 16
2067: PUSH
2068: LD_INT 22
2070: PUSH
2071: LD_INT 23
2073: PUSH
2074: LD_INT 26
2076: PUSH
2077: LD_INT 36
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: PUSH
2094: LD_INT 101
2096: PUSH
2097: LD_INT 102
2099: PUSH
2100: LD_INT 105
2102: PUSH
2103: LD_INT 106
2105: PUSH
2106: LD_INT 108
2108: PUSH
2109: LD_INT 116
2111: PUSH
2112: LD_INT 117
2114: PUSH
2115: LD_INT 118
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: ST_TO_ADDR
2132: GO 4915
2134: LD_INT 5
2136: DOUBLE
2137: EQUAL
2138: IFTRUE 2142
2140: GO 2254
2142: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
2143: LD_ADDR_VAR 0 2
2147: PUSH
2148: LD_INT 2
2150: PUSH
2151: LD_INT 4
2153: PUSH
2154: LD_INT 5
2156: PUSH
2157: LD_INT 6
2159: PUSH
2160: LD_INT 8
2162: PUSH
2163: LD_INT 11
2165: PUSH
2166: LD_INT 12
2168: PUSH
2169: LD_INT 15
2171: PUSH
2172: LD_INT 16
2174: PUSH
2175: LD_INT 22
2177: PUSH
2178: LD_INT 23
2180: PUSH
2181: LD_INT 25
2183: PUSH
2184: LD_INT 26
2186: PUSH
2187: LD_INT 36
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 101
2208: PUSH
2209: LD_INT 102
2211: PUSH
2212: LD_INT 105
2214: PUSH
2215: LD_INT 106
2217: PUSH
2218: LD_INT 108
2220: PUSH
2221: LD_INT 109
2223: PUSH
2224: LD_INT 112
2226: PUSH
2227: LD_INT 116
2229: PUSH
2230: LD_INT 117
2232: PUSH
2233: LD_INT 118
2235: PUSH
2236: EMPTY
2237: LIST
2238: LIST
2239: LIST
2240: LIST
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: ST_TO_ADDR
2252: GO 4915
2254: LD_INT 6
2256: DOUBLE
2257: EQUAL
2258: IFTRUE 2262
2260: GO 2394
2262: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
2263: LD_ADDR_VAR 0 2
2267: PUSH
2268: LD_INT 2
2270: PUSH
2271: LD_INT 4
2273: PUSH
2274: LD_INT 5
2276: PUSH
2277: LD_INT 6
2279: PUSH
2280: LD_INT 8
2282: PUSH
2283: LD_INT 11
2285: PUSH
2286: LD_INT 12
2288: PUSH
2289: LD_INT 15
2291: PUSH
2292: LD_INT 16
2294: PUSH
2295: LD_INT 20
2297: PUSH
2298: LD_INT 21
2300: PUSH
2301: LD_INT 22
2303: PUSH
2304: LD_INT 23
2306: PUSH
2307: LD_INT 25
2309: PUSH
2310: LD_INT 26
2312: PUSH
2313: LD_INT 30
2315: PUSH
2316: LD_INT 31
2318: PUSH
2319: LD_INT 32
2321: PUSH
2322: LD_INT 36
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: LIST
2343: LIST
2344: LIST
2345: PUSH
2346: LD_INT 101
2348: PUSH
2349: LD_INT 102
2351: PUSH
2352: LD_INT 105
2354: PUSH
2355: LD_INT 106
2357: PUSH
2358: LD_INT 108
2360: PUSH
2361: LD_INT 109
2363: PUSH
2364: LD_INT 112
2366: PUSH
2367: LD_INT 116
2369: PUSH
2370: LD_INT 117
2372: PUSH
2373: LD_INT 118
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: LIST
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: PUSH
2388: EMPTY
2389: LIST
2390: LIST
2391: ST_TO_ADDR
2392: GO 4915
2394: LD_INT 7
2396: DOUBLE
2397: EQUAL
2398: IFTRUE 2402
2400: GO 2514
2402: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
2403: LD_ADDR_VAR 0 2
2407: PUSH
2408: LD_INT 2
2410: PUSH
2411: LD_INT 4
2413: PUSH
2414: LD_INT 5
2416: PUSH
2417: LD_INT 7
2419: PUSH
2420: LD_INT 11
2422: PUSH
2423: LD_INT 12
2425: PUSH
2426: LD_INT 15
2428: PUSH
2429: LD_INT 16
2431: PUSH
2432: LD_INT 20
2434: PUSH
2435: LD_INT 21
2437: PUSH
2438: LD_INT 22
2440: PUSH
2441: LD_INT 23
2443: PUSH
2444: LD_INT 25
2446: PUSH
2447: LD_INT 26
2449: PUSH
2450: EMPTY
2451: LIST
2452: LIST
2453: LIST
2454: LIST
2455: LIST
2456: LIST
2457: LIST
2458: LIST
2459: LIST
2460: LIST
2461: LIST
2462: LIST
2463: LIST
2464: LIST
2465: PUSH
2466: LD_INT 101
2468: PUSH
2469: LD_INT 102
2471: PUSH
2472: LD_INT 103
2474: PUSH
2475: LD_INT 105
2477: PUSH
2478: LD_INT 106
2480: PUSH
2481: LD_INT 108
2483: PUSH
2484: LD_INT 112
2486: PUSH
2487: LD_INT 116
2489: PUSH
2490: LD_INT 117
2492: PUSH
2493: LD_INT 118
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: LIST
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: ST_TO_ADDR
2512: GO 4915
2514: LD_INT 8
2516: DOUBLE
2517: EQUAL
2518: IFTRUE 2522
2520: GO 2662
2522: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
2523: LD_ADDR_VAR 0 2
2527: PUSH
2528: LD_INT 2
2530: PUSH
2531: LD_INT 4
2533: PUSH
2534: LD_INT 5
2536: PUSH
2537: LD_INT 6
2539: PUSH
2540: LD_INT 7
2542: PUSH
2543: LD_INT 8
2545: PUSH
2546: LD_INT 11
2548: PUSH
2549: LD_INT 12
2551: PUSH
2552: LD_INT 15
2554: PUSH
2555: LD_INT 16
2557: PUSH
2558: LD_INT 20
2560: PUSH
2561: LD_INT 21
2563: PUSH
2564: LD_INT 22
2566: PUSH
2567: LD_INT 23
2569: PUSH
2570: LD_INT 25
2572: PUSH
2573: LD_INT 26
2575: PUSH
2576: LD_INT 30
2578: PUSH
2579: LD_INT 31
2581: PUSH
2582: LD_INT 32
2584: PUSH
2585: LD_INT 36
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: LIST
2592: LIST
2593: LIST
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: LIST
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: PUSH
2610: LD_INT 101
2612: PUSH
2613: LD_INT 102
2615: PUSH
2616: LD_INT 103
2618: PUSH
2619: LD_INT 105
2621: PUSH
2622: LD_INT 106
2624: PUSH
2625: LD_INT 108
2627: PUSH
2628: LD_INT 109
2630: PUSH
2631: LD_INT 112
2633: PUSH
2634: LD_INT 116
2636: PUSH
2637: LD_INT 117
2639: PUSH
2640: LD_INT 118
2642: PUSH
2643: EMPTY
2644: LIST
2645: LIST
2646: LIST
2647: LIST
2648: LIST
2649: LIST
2650: LIST
2651: LIST
2652: LIST
2653: LIST
2654: LIST
2655: PUSH
2656: EMPTY
2657: LIST
2658: LIST
2659: ST_TO_ADDR
2660: GO 4915
2662: LD_INT 9
2664: DOUBLE
2665: EQUAL
2666: IFTRUE 2670
2668: GO 2818
2670: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
2671: LD_ADDR_VAR 0 2
2675: PUSH
2676: LD_INT 2
2678: PUSH
2679: LD_INT 4
2681: PUSH
2682: LD_INT 5
2684: PUSH
2685: LD_INT 6
2687: PUSH
2688: LD_INT 7
2690: PUSH
2691: LD_INT 8
2693: PUSH
2694: LD_INT 11
2696: PUSH
2697: LD_INT 12
2699: PUSH
2700: LD_INT 15
2702: PUSH
2703: LD_INT 16
2705: PUSH
2706: LD_INT 20
2708: PUSH
2709: LD_INT 21
2711: PUSH
2712: LD_INT 22
2714: PUSH
2715: LD_INT 23
2717: PUSH
2718: LD_INT 25
2720: PUSH
2721: LD_INT 26
2723: PUSH
2724: LD_INT 28
2726: PUSH
2727: LD_INT 30
2729: PUSH
2730: LD_INT 31
2732: PUSH
2733: LD_INT 32
2735: PUSH
2736: LD_INT 36
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: LIST
2743: LIST
2744: LIST
2745: LIST
2746: LIST
2747: LIST
2748: LIST
2749: LIST
2750: LIST
2751: LIST
2752: LIST
2753: LIST
2754: LIST
2755: LIST
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: LIST
2761: PUSH
2762: LD_INT 101
2764: PUSH
2765: LD_INT 102
2767: PUSH
2768: LD_INT 103
2770: PUSH
2771: LD_INT 105
2773: PUSH
2774: LD_INT 106
2776: PUSH
2777: LD_INT 108
2779: PUSH
2780: LD_INT 109
2782: PUSH
2783: LD_INT 112
2785: PUSH
2786: LD_INT 114
2788: PUSH
2789: LD_INT 116
2791: PUSH
2792: LD_INT 117
2794: PUSH
2795: LD_INT 118
2797: PUSH
2798: EMPTY
2799: LIST
2800: LIST
2801: LIST
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: LIST
2807: LIST
2808: LIST
2809: LIST
2810: LIST
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: ST_TO_ADDR
2816: GO 4915
2818: LD_INT 10
2820: DOUBLE
2821: EQUAL
2822: IFTRUE 2826
2824: GO 3022
2826: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
2827: LD_ADDR_VAR 0 2
2831: PUSH
2832: LD_INT 2
2834: PUSH
2835: LD_INT 4
2837: PUSH
2838: LD_INT 5
2840: PUSH
2841: LD_INT 6
2843: PUSH
2844: LD_INT 7
2846: PUSH
2847: LD_INT 8
2849: PUSH
2850: LD_INT 9
2852: PUSH
2853: LD_INT 10
2855: PUSH
2856: LD_INT 11
2858: PUSH
2859: LD_INT 12
2861: PUSH
2862: LD_INT 13
2864: PUSH
2865: LD_INT 14
2867: PUSH
2868: LD_INT 15
2870: PUSH
2871: LD_INT 16
2873: PUSH
2874: LD_INT 17
2876: PUSH
2877: LD_INT 18
2879: PUSH
2880: LD_INT 19
2882: PUSH
2883: LD_INT 20
2885: PUSH
2886: LD_INT 21
2888: PUSH
2889: LD_INT 22
2891: PUSH
2892: LD_INT 23
2894: PUSH
2895: LD_INT 24
2897: PUSH
2898: LD_INT 25
2900: PUSH
2901: LD_INT 26
2903: PUSH
2904: LD_INT 28
2906: PUSH
2907: LD_INT 30
2909: PUSH
2910: LD_INT 31
2912: PUSH
2913: LD_INT 32
2915: PUSH
2916: LD_INT 36
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: LIST
2923: LIST
2924: LIST
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: LIST
2930: LIST
2931: LIST
2932: LIST
2933: LIST
2934: LIST
2935: LIST
2936: LIST
2937: LIST
2938: LIST
2939: LIST
2940: LIST
2941: LIST
2942: LIST
2943: LIST
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: LIST
2949: PUSH
2950: LD_INT 101
2952: PUSH
2953: LD_INT 102
2955: PUSH
2956: LD_INT 103
2958: PUSH
2959: LD_INT 104
2961: PUSH
2962: LD_INT 105
2964: PUSH
2965: LD_INT 106
2967: PUSH
2968: LD_INT 107
2970: PUSH
2971: LD_INT 108
2973: PUSH
2974: LD_INT 109
2976: PUSH
2977: LD_INT 110
2979: PUSH
2980: LD_INT 111
2982: PUSH
2983: LD_INT 112
2985: PUSH
2986: LD_INT 114
2988: PUSH
2989: LD_INT 116
2991: PUSH
2992: LD_INT 117
2994: PUSH
2995: LD_INT 118
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: LIST
3002: LIST
3003: LIST
3004: LIST
3005: LIST
3006: LIST
3007: LIST
3008: LIST
3009: LIST
3010: LIST
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: ST_TO_ADDR
3020: GO 4915
3022: LD_INT 11
3024: DOUBLE
3025: EQUAL
3026: IFTRUE 3030
3028: GO 3234
3030: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
3031: LD_ADDR_VAR 0 2
3035: PUSH
3036: LD_INT 2
3038: PUSH
3039: LD_INT 3
3041: PUSH
3042: LD_INT 4
3044: PUSH
3045: LD_INT 5
3047: PUSH
3048: LD_INT 6
3050: PUSH
3051: LD_INT 7
3053: PUSH
3054: LD_INT 8
3056: PUSH
3057: LD_INT 9
3059: PUSH
3060: LD_INT 10
3062: PUSH
3063: LD_INT 11
3065: PUSH
3066: LD_INT 12
3068: PUSH
3069: LD_INT 13
3071: PUSH
3072: LD_INT 14
3074: PUSH
3075: LD_INT 15
3077: PUSH
3078: LD_INT 16
3080: PUSH
3081: LD_INT 17
3083: PUSH
3084: LD_INT 18
3086: PUSH
3087: LD_INT 19
3089: PUSH
3090: LD_INT 20
3092: PUSH
3093: LD_INT 21
3095: PUSH
3096: LD_INT 22
3098: PUSH
3099: LD_INT 23
3101: PUSH
3102: LD_INT 24
3104: PUSH
3105: LD_INT 25
3107: PUSH
3108: LD_INT 26
3110: PUSH
3111: LD_INT 28
3113: PUSH
3114: LD_INT 30
3116: PUSH
3117: LD_INT 31
3119: PUSH
3120: LD_INT 32
3122: PUSH
3123: LD_INT 34
3125: PUSH
3126: LD_INT 36
3128: PUSH
3129: EMPTY
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: LIST
3151: LIST
3152: LIST
3153: LIST
3154: LIST
3155: LIST
3156: LIST
3157: LIST
3158: LIST
3159: LIST
3160: LIST
3161: PUSH
3162: LD_INT 101
3164: PUSH
3165: LD_INT 102
3167: PUSH
3168: LD_INT 103
3170: PUSH
3171: LD_INT 104
3173: PUSH
3174: LD_INT 105
3176: PUSH
3177: LD_INT 106
3179: PUSH
3180: LD_INT 107
3182: PUSH
3183: LD_INT 108
3185: PUSH
3186: LD_INT 109
3188: PUSH
3189: LD_INT 110
3191: PUSH
3192: LD_INT 111
3194: PUSH
3195: LD_INT 112
3197: PUSH
3198: LD_INT 114
3200: PUSH
3201: LD_INT 116
3203: PUSH
3204: LD_INT 117
3206: PUSH
3207: LD_INT 118
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: ST_TO_ADDR
3232: GO 4915
3234: LD_INT 12
3236: DOUBLE
3237: EQUAL
3238: IFTRUE 3242
3240: GO 3462
3242: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
3243: LD_ADDR_VAR 0 2
3247: PUSH
3248: LD_INT 1
3250: PUSH
3251: LD_INT 2
3253: PUSH
3254: LD_INT 3
3256: PUSH
3257: LD_INT 4
3259: PUSH
3260: LD_INT 5
3262: PUSH
3263: LD_INT 6
3265: PUSH
3266: LD_INT 7
3268: PUSH
3269: LD_INT 8
3271: PUSH
3272: LD_INT 9
3274: PUSH
3275: LD_INT 10
3277: PUSH
3278: LD_INT 11
3280: PUSH
3281: LD_INT 12
3283: PUSH
3284: LD_INT 13
3286: PUSH
3287: LD_INT 14
3289: PUSH
3290: LD_INT 15
3292: PUSH
3293: LD_INT 16
3295: PUSH
3296: LD_INT 17
3298: PUSH
3299: LD_INT 18
3301: PUSH
3302: LD_INT 19
3304: PUSH
3305: LD_INT 20
3307: PUSH
3308: LD_INT 21
3310: PUSH
3311: LD_INT 22
3313: PUSH
3314: LD_INT 23
3316: PUSH
3317: LD_INT 24
3319: PUSH
3320: LD_INT 25
3322: PUSH
3323: LD_INT 26
3325: PUSH
3326: LD_INT 27
3328: PUSH
3329: LD_INT 28
3331: PUSH
3332: LD_INT 30
3334: PUSH
3335: LD_INT 31
3337: PUSH
3338: LD_INT 32
3340: PUSH
3341: LD_INT 33
3343: PUSH
3344: LD_INT 34
3346: PUSH
3347: LD_INT 36
3349: PUSH
3350: EMPTY
3351: LIST
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: LIST
3367: LIST
3368: LIST
3369: LIST
3370: LIST
3371: LIST
3372: LIST
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: PUSH
3386: LD_INT 101
3388: PUSH
3389: LD_INT 102
3391: PUSH
3392: LD_INT 103
3394: PUSH
3395: LD_INT 104
3397: PUSH
3398: LD_INT 105
3400: PUSH
3401: LD_INT 106
3403: PUSH
3404: LD_INT 107
3406: PUSH
3407: LD_INT 108
3409: PUSH
3410: LD_INT 109
3412: PUSH
3413: LD_INT 110
3415: PUSH
3416: LD_INT 111
3418: PUSH
3419: LD_INT 112
3421: PUSH
3422: LD_INT 113
3424: PUSH
3425: LD_INT 114
3427: PUSH
3428: LD_INT 116
3430: PUSH
3431: LD_INT 117
3433: PUSH
3434: LD_INT 118
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: LIST
3443: LIST
3444: LIST
3445: LIST
3446: LIST
3447: LIST
3448: LIST
3449: LIST
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: ST_TO_ADDR
3460: GO 4915
3462: LD_INT 13
3464: DOUBLE
3465: EQUAL
3466: IFTRUE 3470
3468: GO 3678
3470: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
3471: LD_ADDR_VAR 0 2
3475: PUSH
3476: LD_INT 1
3478: PUSH
3479: LD_INT 2
3481: PUSH
3482: LD_INT 3
3484: PUSH
3485: LD_INT 4
3487: PUSH
3488: LD_INT 5
3490: PUSH
3491: LD_INT 8
3493: PUSH
3494: LD_INT 9
3496: PUSH
3497: LD_INT 10
3499: PUSH
3500: LD_INT 11
3502: PUSH
3503: LD_INT 12
3505: PUSH
3506: LD_INT 14
3508: PUSH
3509: LD_INT 15
3511: PUSH
3512: LD_INT 16
3514: PUSH
3515: LD_INT 17
3517: PUSH
3518: LD_INT 18
3520: PUSH
3521: LD_INT 19
3523: PUSH
3524: LD_INT 20
3526: PUSH
3527: LD_INT 21
3529: PUSH
3530: LD_INT 22
3532: PUSH
3533: LD_INT 23
3535: PUSH
3536: LD_INT 24
3538: PUSH
3539: LD_INT 25
3541: PUSH
3542: LD_INT 26
3544: PUSH
3545: LD_INT 27
3547: PUSH
3548: LD_INT 28
3550: PUSH
3551: LD_INT 30
3553: PUSH
3554: LD_INT 31
3556: PUSH
3557: LD_INT 32
3559: PUSH
3560: LD_INT 33
3562: PUSH
3563: LD_INT 34
3565: PUSH
3566: LD_INT 36
3568: PUSH
3569: EMPTY
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: PUSH
3602: LD_INT 101
3604: PUSH
3605: LD_INT 102
3607: PUSH
3608: LD_INT 103
3610: PUSH
3611: LD_INT 104
3613: PUSH
3614: LD_INT 105
3616: PUSH
3617: LD_INT 106
3619: PUSH
3620: LD_INT 107
3622: PUSH
3623: LD_INT 108
3625: PUSH
3626: LD_INT 109
3628: PUSH
3629: LD_INT 110
3631: PUSH
3632: LD_INT 111
3634: PUSH
3635: LD_INT 112
3637: PUSH
3638: LD_INT 113
3640: PUSH
3641: LD_INT 114
3643: PUSH
3644: LD_INT 116
3646: PUSH
3647: LD_INT 117
3649: PUSH
3650: LD_INT 118
3652: PUSH
3653: EMPTY
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: PUSH
3672: EMPTY
3673: LIST
3674: LIST
3675: ST_TO_ADDR
3676: GO 4915
3678: LD_INT 14
3680: DOUBLE
3681: EQUAL
3682: IFTRUE 3686
3684: GO 3910
3686: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
3687: LD_ADDR_VAR 0 2
3691: PUSH
3692: LD_INT 1
3694: PUSH
3695: LD_INT 2
3697: PUSH
3698: LD_INT 3
3700: PUSH
3701: LD_INT 4
3703: PUSH
3704: LD_INT 5
3706: PUSH
3707: LD_INT 6
3709: PUSH
3710: LD_INT 7
3712: PUSH
3713: LD_INT 8
3715: PUSH
3716: LD_INT 9
3718: PUSH
3719: LD_INT 10
3721: PUSH
3722: LD_INT 11
3724: PUSH
3725: LD_INT 12
3727: PUSH
3728: LD_INT 13
3730: PUSH
3731: LD_INT 14
3733: PUSH
3734: LD_INT 15
3736: PUSH
3737: LD_INT 16
3739: PUSH
3740: LD_INT 17
3742: PUSH
3743: LD_INT 18
3745: PUSH
3746: LD_INT 19
3748: PUSH
3749: LD_INT 20
3751: PUSH
3752: LD_INT 21
3754: PUSH
3755: LD_INT 22
3757: PUSH
3758: LD_INT 23
3760: PUSH
3761: LD_INT 24
3763: PUSH
3764: LD_INT 25
3766: PUSH
3767: LD_INT 26
3769: PUSH
3770: LD_INT 27
3772: PUSH
3773: LD_INT 28
3775: PUSH
3776: LD_INT 29
3778: PUSH
3779: LD_INT 30
3781: PUSH
3782: LD_INT 31
3784: PUSH
3785: LD_INT 32
3787: PUSH
3788: LD_INT 33
3790: PUSH
3791: LD_INT 34
3793: PUSH
3794: LD_INT 36
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: PUSH
3834: LD_INT 101
3836: PUSH
3837: LD_INT 102
3839: PUSH
3840: LD_INT 103
3842: PUSH
3843: LD_INT 104
3845: PUSH
3846: LD_INT 105
3848: PUSH
3849: LD_INT 106
3851: PUSH
3852: LD_INT 107
3854: PUSH
3855: LD_INT 108
3857: PUSH
3858: LD_INT 109
3860: PUSH
3861: LD_INT 110
3863: PUSH
3864: LD_INT 111
3866: PUSH
3867: LD_INT 112
3869: PUSH
3870: LD_INT 113
3872: PUSH
3873: LD_INT 114
3875: PUSH
3876: LD_INT 116
3878: PUSH
3879: LD_INT 117
3881: PUSH
3882: LD_INT 118
3884: PUSH
3885: EMPTY
3886: LIST
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: ST_TO_ADDR
3908: GO 4915
3910: LD_INT 15
3912: DOUBLE
3913: EQUAL
3914: IFTRUE 3918
3916: GO 4142
3918: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
3919: LD_ADDR_VAR 0 2
3923: PUSH
3924: LD_INT 1
3926: PUSH
3927: LD_INT 2
3929: PUSH
3930: LD_INT 3
3932: PUSH
3933: LD_INT 4
3935: PUSH
3936: LD_INT 5
3938: PUSH
3939: LD_INT 6
3941: PUSH
3942: LD_INT 7
3944: PUSH
3945: LD_INT 8
3947: PUSH
3948: LD_INT 9
3950: PUSH
3951: LD_INT 10
3953: PUSH
3954: LD_INT 11
3956: PUSH
3957: LD_INT 12
3959: PUSH
3960: LD_INT 13
3962: PUSH
3963: LD_INT 14
3965: PUSH
3966: LD_INT 15
3968: PUSH
3969: LD_INT 16
3971: PUSH
3972: LD_INT 17
3974: PUSH
3975: LD_INT 18
3977: PUSH
3978: LD_INT 19
3980: PUSH
3981: LD_INT 20
3983: PUSH
3984: LD_INT 21
3986: PUSH
3987: LD_INT 22
3989: PUSH
3990: LD_INT 23
3992: PUSH
3993: LD_INT 24
3995: PUSH
3996: LD_INT 25
3998: PUSH
3999: LD_INT 26
4001: PUSH
4002: LD_INT 27
4004: PUSH
4005: LD_INT 28
4007: PUSH
4008: LD_INT 29
4010: PUSH
4011: LD_INT 30
4013: PUSH
4014: LD_INT 31
4016: PUSH
4017: LD_INT 32
4019: PUSH
4020: LD_INT 33
4022: PUSH
4023: LD_INT 34
4025: PUSH
4026: LD_INT 36
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: LIST
4038: LIST
4039: LIST
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: PUSH
4066: LD_INT 101
4068: PUSH
4069: LD_INT 102
4071: PUSH
4072: LD_INT 103
4074: PUSH
4075: LD_INT 104
4077: PUSH
4078: LD_INT 105
4080: PUSH
4081: LD_INT 106
4083: PUSH
4084: LD_INT 107
4086: PUSH
4087: LD_INT 108
4089: PUSH
4090: LD_INT 109
4092: PUSH
4093: LD_INT 110
4095: PUSH
4096: LD_INT 111
4098: PUSH
4099: LD_INT 112
4101: PUSH
4102: LD_INT 113
4104: PUSH
4105: LD_INT 114
4107: PUSH
4108: LD_INT 116
4110: PUSH
4111: LD_INT 117
4113: PUSH
4114: LD_INT 118
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: LIST
4134: LIST
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: ST_TO_ADDR
4140: GO 4915
4142: LD_INT 16
4144: DOUBLE
4145: EQUAL
4146: IFTRUE 4150
4148: GO 4286
4150: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
4151: LD_ADDR_VAR 0 2
4155: PUSH
4156: LD_INT 2
4158: PUSH
4159: LD_INT 4
4161: PUSH
4162: LD_INT 5
4164: PUSH
4165: LD_INT 7
4167: PUSH
4168: LD_INT 11
4170: PUSH
4171: LD_INT 12
4173: PUSH
4174: LD_INT 15
4176: PUSH
4177: LD_INT 16
4179: PUSH
4180: LD_INT 20
4182: PUSH
4183: LD_INT 21
4185: PUSH
4186: LD_INT 22
4188: PUSH
4189: LD_INT 23
4191: PUSH
4192: LD_INT 25
4194: PUSH
4195: LD_INT 26
4197: PUSH
4198: LD_INT 30
4200: PUSH
4201: LD_INT 31
4203: PUSH
4204: LD_INT 32
4206: PUSH
4207: LD_INT 33
4209: PUSH
4210: LD_INT 34
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: LIST
4219: LIST
4220: LIST
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: LIST
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: LIST
4233: PUSH
4234: LD_INT 101
4236: PUSH
4237: LD_INT 102
4239: PUSH
4240: LD_INT 103
4242: PUSH
4243: LD_INT 106
4245: PUSH
4246: LD_INT 108
4248: PUSH
4249: LD_INT 112
4251: PUSH
4252: LD_INT 113
4254: PUSH
4255: LD_INT 114
4257: PUSH
4258: LD_INT 116
4260: PUSH
4261: LD_INT 117
4263: PUSH
4264: LD_INT 118
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: LIST
4277: LIST
4278: LIST
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: ST_TO_ADDR
4284: GO 4915
4286: LD_INT 17
4288: DOUBLE
4289: EQUAL
4290: IFTRUE 4294
4292: GO 4518
4294: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
4295: LD_ADDR_VAR 0 2
4299: PUSH
4300: LD_INT 1
4302: PUSH
4303: LD_INT 2
4305: PUSH
4306: LD_INT 3
4308: PUSH
4309: LD_INT 4
4311: PUSH
4312: LD_INT 5
4314: PUSH
4315: LD_INT 6
4317: PUSH
4318: LD_INT 7
4320: PUSH
4321: LD_INT 8
4323: PUSH
4324: LD_INT 9
4326: PUSH
4327: LD_INT 10
4329: PUSH
4330: LD_INT 11
4332: PUSH
4333: LD_INT 12
4335: PUSH
4336: LD_INT 13
4338: PUSH
4339: LD_INT 14
4341: PUSH
4342: LD_INT 15
4344: PUSH
4345: LD_INT 16
4347: PUSH
4348: LD_INT 17
4350: PUSH
4351: LD_INT 18
4353: PUSH
4354: LD_INT 19
4356: PUSH
4357: LD_INT 20
4359: PUSH
4360: LD_INT 21
4362: PUSH
4363: LD_INT 22
4365: PUSH
4366: LD_INT 23
4368: PUSH
4369: LD_INT 24
4371: PUSH
4372: LD_INT 25
4374: PUSH
4375: LD_INT 26
4377: PUSH
4378: LD_INT 27
4380: PUSH
4381: LD_INT 28
4383: PUSH
4384: LD_INT 29
4386: PUSH
4387: LD_INT 30
4389: PUSH
4390: LD_INT 31
4392: PUSH
4393: LD_INT 32
4395: PUSH
4396: LD_INT 33
4398: PUSH
4399: LD_INT 34
4401: PUSH
4402: LD_INT 36
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: PUSH
4442: LD_INT 101
4444: PUSH
4445: LD_INT 102
4447: PUSH
4448: LD_INT 103
4450: PUSH
4451: LD_INT 104
4453: PUSH
4454: LD_INT 105
4456: PUSH
4457: LD_INT 106
4459: PUSH
4460: LD_INT 107
4462: PUSH
4463: LD_INT 108
4465: PUSH
4466: LD_INT 109
4468: PUSH
4469: LD_INT 110
4471: PUSH
4472: LD_INT 111
4474: PUSH
4475: LD_INT 112
4477: PUSH
4478: LD_INT 113
4480: PUSH
4481: LD_INT 114
4483: PUSH
4484: LD_INT 116
4486: PUSH
4487: LD_INT 117
4489: PUSH
4490: LD_INT 118
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: LIST
4504: LIST
4505: LIST
4506: LIST
4507: LIST
4508: LIST
4509: LIST
4510: LIST
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: ST_TO_ADDR
4516: GO 4915
4518: LD_INT 18
4520: DOUBLE
4521: EQUAL
4522: IFTRUE 4526
4524: GO 4674
4526: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
4527: LD_ADDR_VAR 0 2
4531: PUSH
4532: LD_INT 2
4534: PUSH
4535: LD_INT 4
4537: PUSH
4538: LD_INT 5
4540: PUSH
4541: LD_INT 7
4543: PUSH
4544: LD_INT 11
4546: PUSH
4547: LD_INT 12
4549: PUSH
4550: LD_INT 15
4552: PUSH
4553: LD_INT 16
4555: PUSH
4556: LD_INT 20
4558: PUSH
4559: LD_INT 21
4561: PUSH
4562: LD_INT 22
4564: PUSH
4565: LD_INT 23
4567: PUSH
4568: LD_INT 25
4570: PUSH
4571: LD_INT 26
4573: PUSH
4574: LD_INT 30
4576: PUSH
4577: LD_INT 31
4579: PUSH
4580: LD_INT 32
4582: PUSH
4583: LD_INT 33
4585: PUSH
4586: LD_INT 34
4588: PUSH
4589: LD_INT 35
4591: PUSH
4592: LD_INT 36
4594: PUSH
4595: EMPTY
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: PUSH
4618: LD_INT 101
4620: PUSH
4621: LD_INT 102
4623: PUSH
4624: LD_INT 103
4626: PUSH
4627: LD_INT 106
4629: PUSH
4630: LD_INT 108
4632: PUSH
4633: LD_INT 112
4635: PUSH
4636: LD_INT 113
4638: PUSH
4639: LD_INT 114
4641: PUSH
4642: LD_INT 115
4644: PUSH
4645: LD_INT 116
4647: PUSH
4648: LD_INT 117
4650: PUSH
4651: LD_INT 118
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: LIST
4658: LIST
4659: LIST
4660: LIST
4661: LIST
4662: LIST
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: PUSH
4668: EMPTY
4669: LIST
4670: LIST
4671: ST_TO_ADDR
4672: GO 4915
4674: LD_INT 19
4676: DOUBLE
4677: EQUAL
4678: IFTRUE 4682
4680: GO 4914
4682: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
4683: LD_ADDR_VAR 0 2
4687: PUSH
4688: LD_INT 1
4690: PUSH
4691: LD_INT 2
4693: PUSH
4694: LD_INT 3
4696: PUSH
4697: LD_INT 4
4699: PUSH
4700: LD_INT 5
4702: PUSH
4703: LD_INT 6
4705: PUSH
4706: LD_INT 7
4708: PUSH
4709: LD_INT 8
4711: PUSH
4712: LD_INT 9
4714: PUSH
4715: LD_INT 10
4717: PUSH
4718: LD_INT 11
4720: PUSH
4721: LD_INT 12
4723: PUSH
4724: LD_INT 13
4726: PUSH
4727: LD_INT 14
4729: PUSH
4730: LD_INT 15
4732: PUSH
4733: LD_INT 16
4735: PUSH
4736: LD_INT 17
4738: PUSH
4739: LD_INT 18
4741: PUSH
4742: LD_INT 19
4744: PUSH
4745: LD_INT 20
4747: PUSH
4748: LD_INT 21
4750: PUSH
4751: LD_INT 22
4753: PUSH
4754: LD_INT 23
4756: PUSH
4757: LD_INT 24
4759: PUSH
4760: LD_INT 25
4762: PUSH
4763: LD_INT 26
4765: PUSH
4766: LD_INT 27
4768: PUSH
4769: LD_INT 28
4771: PUSH
4772: LD_INT 29
4774: PUSH
4775: LD_INT 30
4777: PUSH
4778: LD_INT 31
4780: PUSH
4781: LD_INT 32
4783: PUSH
4784: LD_INT 33
4786: PUSH
4787: LD_INT 34
4789: PUSH
4790: LD_INT 35
4792: PUSH
4793: LD_INT 36
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: PUSH
4834: LD_INT 101
4836: PUSH
4837: LD_INT 102
4839: PUSH
4840: LD_INT 103
4842: PUSH
4843: LD_INT 104
4845: PUSH
4846: LD_INT 105
4848: PUSH
4849: LD_INT 106
4851: PUSH
4852: LD_INT 107
4854: PUSH
4855: LD_INT 108
4857: PUSH
4858: LD_INT 109
4860: PUSH
4861: LD_INT 110
4863: PUSH
4864: LD_INT 111
4866: PUSH
4867: LD_INT 112
4869: PUSH
4870: LD_INT 113
4872: PUSH
4873: LD_INT 114
4875: PUSH
4876: LD_INT 115
4878: PUSH
4879: LD_INT 116
4881: PUSH
4882: LD_INT 117
4884: PUSH
4885: LD_INT 118
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: LIST
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: ST_TO_ADDR
4912: GO 4915
4914: POP
// end else
4915: GO 5146
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
4917: LD_ADDR_VAR 0 2
4921: PUSH
4922: LD_INT 1
4924: PUSH
4925: LD_INT 2
4927: PUSH
4928: LD_INT 3
4930: PUSH
4931: LD_INT 4
4933: PUSH
4934: LD_INT 5
4936: PUSH
4937: LD_INT 6
4939: PUSH
4940: LD_INT 7
4942: PUSH
4943: LD_INT 8
4945: PUSH
4946: LD_INT 9
4948: PUSH
4949: LD_INT 10
4951: PUSH
4952: LD_INT 11
4954: PUSH
4955: LD_INT 12
4957: PUSH
4958: LD_INT 13
4960: PUSH
4961: LD_INT 14
4963: PUSH
4964: LD_INT 15
4966: PUSH
4967: LD_INT 16
4969: PUSH
4970: LD_INT 17
4972: PUSH
4973: LD_INT 18
4975: PUSH
4976: LD_INT 19
4978: PUSH
4979: LD_INT 20
4981: PUSH
4982: LD_INT 21
4984: PUSH
4985: LD_INT 22
4987: PUSH
4988: LD_INT 23
4990: PUSH
4991: LD_INT 24
4993: PUSH
4994: LD_INT 25
4996: PUSH
4997: LD_INT 26
4999: PUSH
5000: LD_INT 27
5002: PUSH
5003: LD_INT 28
5005: PUSH
5006: LD_INT 29
5008: PUSH
5009: LD_INT 30
5011: PUSH
5012: LD_INT 31
5014: PUSH
5015: LD_INT 32
5017: PUSH
5018: LD_INT 33
5020: PUSH
5021: LD_INT 34
5023: PUSH
5024: LD_INT 35
5026: PUSH
5027: LD_INT 36
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: LIST
5051: LIST
5052: LIST
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: LIST
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: PUSH
5068: LD_INT 101
5070: PUSH
5071: LD_INT 102
5073: PUSH
5074: LD_INT 103
5076: PUSH
5077: LD_INT 104
5079: PUSH
5080: LD_INT 105
5082: PUSH
5083: LD_INT 106
5085: PUSH
5086: LD_INT 107
5088: PUSH
5089: LD_INT 108
5091: PUSH
5092: LD_INT 109
5094: PUSH
5095: LD_INT 110
5097: PUSH
5098: LD_INT 111
5100: PUSH
5101: LD_INT 112
5103: PUSH
5104: LD_INT 113
5106: PUSH
5107: LD_INT 114
5109: PUSH
5110: LD_INT 115
5112: PUSH
5113: LD_INT 116
5115: PUSH
5116: LD_INT 117
5118: PUSH
5119: LD_INT 118
5121: PUSH
5122: EMPTY
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: ST_TO_ADDR
// if result then
5146: LD_VAR 0 2
5150: IFFALSE 5936
// begin normal :=  ;
5152: LD_ADDR_VAR 0 5
5156: PUSH
5157: LD_STRING 
5159: ST_TO_ADDR
// hardcore :=  ;
5160: LD_ADDR_VAR 0 6
5164: PUSH
5165: LD_STRING 
5167: ST_TO_ADDR
// active :=  ;
5168: LD_ADDR_VAR 0 7
5172: PUSH
5173: LD_STRING 
5175: ST_TO_ADDR
// for i = 1 to normalCounter do
5176: LD_ADDR_VAR 0 8
5180: PUSH
5181: DOUBLE
5182: LD_INT 1
5184: DEC
5185: ST_TO_ADDR
5186: LD_EXP 2
5190: PUSH
5191: FOR_TO
5192: IFFALSE 5293
// begin tmp := 0 ;
5194: LD_ADDR_VAR 0 3
5198: PUSH
5199: LD_STRING 0
5201: ST_TO_ADDR
// if result [ 1 ] then
5202: LD_VAR 0 2
5206: PUSH
5207: LD_INT 1
5209: ARRAY
5210: IFFALSE 5275
// if result [ 1 ] [ 1 ] = i then
5212: LD_VAR 0 2
5216: PUSH
5217: LD_INT 1
5219: ARRAY
5220: PUSH
5221: LD_INT 1
5223: ARRAY
5224: PUSH
5225: LD_VAR 0 8
5229: EQUAL
5230: IFFALSE 5275
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
5232: LD_ADDR_VAR 0 2
5236: PUSH
5237: LD_VAR 0 2
5241: PPUSH
5242: LD_INT 1
5244: PPUSH
5245: LD_VAR 0 2
5249: PUSH
5250: LD_INT 1
5252: ARRAY
5253: PPUSH
5254: LD_INT 1
5256: PPUSH
5257: CALL_OW 3
5261: PPUSH
5262: CALL_OW 1
5266: ST_TO_ADDR
// tmp := 1 ;
5267: LD_ADDR_VAR 0 3
5271: PUSH
5272: LD_STRING 1
5274: ST_TO_ADDR
// end ; normal := normal & tmp ;
5275: LD_ADDR_VAR 0 5
5279: PUSH
5280: LD_VAR 0 5
5284: PUSH
5285: LD_VAR 0 3
5289: STR
5290: ST_TO_ADDR
// end ;
5291: GO 5191
5293: POP
5294: POP
// for i = 1 to hardcoreCounter do
5295: LD_ADDR_VAR 0 8
5299: PUSH
5300: DOUBLE
5301: LD_INT 1
5303: DEC
5304: ST_TO_ADDR
5305: LD_EXP 3
5309: PUSH
5310: FOR_TO
5311: IFFALSE 5416
// begin tmp := 0 ;
5313: LD_ADDR_VAR 0 3
5317: PUSH
5318: LD_STRING 0
5320: ST_TO_ADDR
// if result [ 2 ] then
5321: LD_VAR 0 2
5325: PUSH
5326: LD_INT 2
5328: ARRAY
5329: IFFALSE 5398
// if result [ 2 ] [ 1 ] = 100 + i then
5331: LD_VAR 0 2
5335: PUSH
5336: LD_INT 2
5338: ARRAY
5339: PUSH
5340: LD_INT 1
5342: ARRAY
5343: PUSH
5344: LD_INT 100
5346: PUSH
5347: LD_VAR 0 8
5351: PLUS
5352: EQUAL
5353: IFFALSE 5398
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
5355: LD_ADDR_VAR 0 2
5359: PUSH
5360: LD_VAR 0 2
5364: PPUSH
5365: LD_INT 2
5367: PPUSH
5368: LD_VAR 0 2
5372: PUSH
5373: LD_INT 2
5375: ARRAY
5376: PPUSH
5377: LD_INT 1
5379: PPUSH
5380: CALL_OW 3
5384: PPUSH
5385: CALL_OW 1
5389: ST_TO_ADDR
// tmp := 1 ;
5390: LD_ADDR_VAR 0 3
5394: PUSH
5395: LD_STRING 1
5397: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
5398: LD_ADDR_VAR 0 6
5402: PUSH
5403: LD_VAR 0 6
5407: PUSH
5408: LD_VAR 0 3
5412: STR
5413: ST_TO_ADDR
// end ;
5414: GO 5310
5416: POP
5417: POP
// if isGameLoad then
5418: LD_VAR 0 1
5422: IFFALSE 5897
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
5424: LD_ADDR_VAR 0 4
5428: PUSH
5429: LD_EXP 6
5433: PUSH
5434: LD_EXP 5
5438: PUSH
5439: LD_EXP 7
5443: PUSH
5444: LD_EXP 4
5448: PUSH
5449: LD_EXP 8
5453: PUSH
5454: LD_EXP 9
5458: PUSH
5459: LD_EXP 10
5463: PUSH
5464: LD_EXP 11
5468: PUSH
5469: LD_EXP 12
5473: PUSH
5474: LD_EXP 13
5478: PUSH
5479: LD_EXP 14
5483: PUSH
5484: LD_EXP 15
5488: PUSH
5489: LD_EXP 16
5493: PUSH
5494: LD_EXP 17
5498: PUSH
5499: LD_EXP 25
5503: PUSH
5504: LD_EXP 26
5508: PUSH
5509: LD_EXP 27
5513: PUSH
5514: LD_EXP 28
5518: PUSH
5519: LD_EXP 30
5523: PUSH
5524: LD_EXP 31
5528: PUSH
5529: LD_EXP 32
5533: PUSH
5534: LD_EXP 35
5538: PUSH
5539: LD_EXP 37
5543: PUSH
5544: LD_EXP 38
5548: PUSH
5549: LD_EXP 39
5553: PUSH
5554: LD_EXP 41
5558: PUSH
5559: LD_EXP 42
5563: PUSH
5564: LD_EXP 45
5568: PUSH
5569: LD_EXP 46
5573: PUSH
5574: LD_EXP 47
5578: PUSH
5579: LD_EXP 48
5583: PUSH
5584: LD_EXP 49
5588: PUSH
5589: LD_EXP 50
5593: PUSH
5594: LD_EXP 51
5598: PUSH
5599: LD_EXP 52
5603: PUSH
5604: LD_EXP 53
5608: PUSH
5609: LD_EXP 18
5613: PUSH
5614: LD_EXP 19
5618: PUSH
5619: LD_EXP 22
5623: PUSH
5624: LD_EXP 23
5628: PUSH
5629: LD_EXP 24
5633: PUSH
5634: LD_EXP 20
5638: PUSH
5639: LD_EXP 21
5643: PUSH
5644: LD_EXP 29
5648: PUSH
5649: LD_EXP 33
5653: PUSH
5654: LD_EXP 34
5658: PUSH
5659: LD_EXP 36
5663: PUSH
5664: LD_EXP 40
5668: PUSH
5669: LD_EXP 43
5673: PUSH
5674: LD_EXP 44
5678: PUSH
5679: LD_EXP 54
5683: PUSH
5684: LD_EXP 55
5688: PUSH
5689: LD_EXP 56
5693: PUSH
5694: LD_EXP 57
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: LIST
5743: LIST
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: ST_TO_ADDR
// tmp :=  ;
5755: LD_ADDR_VAR 0 3
5759: PUSH
5760: LD_STRING 
5762: ST_TO_ADDR
// for i = 1 to normalCounter do
5763: LD_ADDR_VAR 0 8
5767: PUSH
5768: DOUBLE
5769: LD_INT 1
5771: DEC
5772: ST_TO_ADDR
5773: LD_EXP 2
5777: PUSH
5778: FOR_TO
5779: IFFALSE 5815
// begin if flags [ i ] then
5781: LD_VAR 0 4
5785: PUSH
5786: LD_VAR 0 8
5790: ARRAY
5791: IFFALSE 5813
// tmp := tmp & i & ; ;
5793: LD_ADDR_VAR 0 3
5797: PUSH
5798: LD_VAR 0 3
5802: PUSH
5803: LD_VAR 0 8
5807: STR
5808: PUSH
5809: LD_STRING ;
5811: STR
5812: ST_TO_ADDR
// end ;
5813: GO 5778
5815: POP
5816: POP
// for i = 1 to hardcoreCounter do
5817: LD_ADDR_VAR 0 8
5821: PUSH
5822: DOUBLE
5823: LD_INT 1
5825: DEC
5826: ST_TO_ADDR
5827: LD_EXP 3
5831: PUSH
5832: FOR_TO
5833: IFFALSE 5879
// begin if flags [ normalCounter + i ] then
5835: LD_VAR 0 4
5839: PUSH
5840: LD_EXP 2
5844: PUSH
5845: LD_VAR 0 8
5849: PLUS
5850: ARRAY
5851: IFFALSE 5877
// tmp := tmp & ( 100 + i ) & ; ;
5853: LD_ADDR_VAR 0 3
5857: PUSH
5858: LD_VAR 0 3
5862: PUSH
5863: LD_INT 100
5865: PUSH
5866: LD_VAR 0 8
5870: PLUS
5871: STR
5872: PUSH
5873: LD_STRING ;
5875: STR
5876: ST_TO_ADDR
// end ;
5877: GO 5832
5879: POP
5880: POP
// if tmp then
5881: LD_VAR 0 3
5885: IFFALSE 5897
// active := tmp ;
5887: LD_ADDR_VAR 0 7
5891: PUSH
5892: LD_VAR 0 3
5896: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
5897: LD_STRING getStreamItemsFromMission("
5899: PUSH
5900: LD_VAR 0 5
5904: STR
5905: PUSH
5906: LD_STRING ","
5908: STR
5909: PUSH
5910: LD_VAR 0 6
5914: STR
5915: PUSH
5916: LD_STRING ","
5918: STR
5919: PUSH
5920: LD_VAR 0 7
5924: STR
5925: PUSH
5926: LD_STRING ")
5928: STR
5929: PPUSH
5930: CALL_OW 559
// end else
5934: GO 5943
// ToLua ( getStreamItemsFromMission("","","") ) ;
5936: LD_STRING getStreamItemsFromMission("","","")
5938: PPUSH
5939: CALL_OW 559
// end ;
5943: LD_VAR 0 2
5947: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
5948: LD_EXP 1
5952: PUSH
5953: LD_EXP 6
5957: AND
5958: IFFALSE 6082
5960: GO 5962
5962: DISABLE
5963: LD_INT 0
5965: PPUSH
5966: PPUSH
// begin enable ;
5967: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
5968: LD_ADDR_VAR 0 2
5972: PUSH
5973: LD_INT 22
5975: PUSH
5976: LD_OWVAR 2
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: PUSH
5985: LD_INT 2
5987: PUSH
5988: LD_INT 34
5990: PUSH
5991: LD_INT 7
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PUSH
5998: LD_INT 34
6000: PUSH
6001: LD_INT 45
6003: PUSH
6004: EMPTY
6005: LIST
6006: LIST
6007: PUSH
6008: LD_INT 34
6010: PUSH
6011: LD_INT 28
6013: PUSH
6014: EMPTY
6015: LIST
6016: LIST
6017: PUSH
6018: LD_INT 34
6020: PUSH
6021: LD_INT 47
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: PUSH
6028: EMPTY
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: PPUSH
6039: CALL_OW 69
6043: ST_TO_ADDR
// if not tmp then
6044: LD_VAR 0 2
6048: NOT
6049: IFFALSE 6053
// exit ;
6051: GO 6082
// for i in tmp do
6053: LD_ADDR_VAR 0 1
6057: PUSH
6058: LD_VAR 0 2
6062: PUSH
6063: FOR_IN
6064: IFFALSE 6080
// begin SetLives ( i , 0 ) ;
6066: LD_VAR 0 1
6070: PPUSH
6071: LD_INT 0
6073: PPUSH
6074: CALL_OW 234
// end ;
6078: GO 6063
6080: POP
6081: POP
// end ;
6082: PPOPN 2
6084: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
6085: LD_EXP 1
6089: PUSH
6090: LD_EXP 7
6094: AND
6095: IFFALSE 6179
6097: GO 6099
6099: DISABLE
6100: LD_INT 0
6102: PPUSH
6103: PPUSH
// begin enable ;
6104: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
6105: LD_ADDR_VAR 0 2
6109: PUSH
6110: LD_INT 22
6112: PUSH
6113: LD_OWVAR 2
6117: PUSH
6118: EMPTY
6119: LIST
6120: LIST
6121: PUSH
6122: LD_INT 32
6124: PUSH
6125: LD_INT 3
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: PUSH
6132: EMPTY
6133: LIST
6134: LIST
6135: PPUSH
6136: CALL_OW 69
6140: ST_TO_ADDR
// if not tmp then
6141: LD_VAR 0 2
6145: NOT
6146: IFFALSE 6150
// exit ;
6148: GO 6179
// for i in tmp do
6150: LD_ADDR_VAR 0 1
6154: PUSH
6155: LD_VAR 0 2
6159: PUSH
6160: FOR_IN
6161: IFFALSE 6177
// begin SetLives ( i , 0 ) ;
6163: LD_VAR 0 1
6167: PPUSH
6168: LD_INT 0
6170: PPUSH
6171: CALL_OW 234
// end ;
6175: GO 6160
6177: POP
6178: POP
// end ;
6179: PPOPN 2
6181: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
6182: LD_EXP 1
6186: PUSH
6187: LD_EXP 4
6191: AND
6192: IFFALSE 6285
6194: GO 6196
6196: DISABLE
6197: LD_INT 0
6199: PPUSH
// begin enable ;
6200: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
6201: LD_ADDR_VAR 0 1
6205: PUSH
6206: LD_INT 22
6208: PUSH
6209: LD_OWVAR 2
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: LD_INT 2
6220: PUSH
6221: LD_INT 25
6223: PUSH
6224: LD_INT 5
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PUSH
6231: LD_INT 25
6233: PUSH
6234: LD_INT 9
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: LD_INT 25
6243: PUSH
6244: LD_INT 8
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PPUSH
6261: CALL_OW 69
6265: PUSH
6266: FOR_IN
6267: IFFALSE 6283
// begin SetClass ( i , 1 ) ;
6269: LD_VAR 0 1
6273: PPUSH
6274: LD_INT 1
6276: PPUSH
6277: CALL_OW 336
// end ;
6281: GO 6266
6283: POP
6284: POP
// end ;
6285: PPOPN 1
6287: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
6288: LD_EXP 1
6292: PUSH
6293: LD_EXP 5
6297: AND
6298: PUSH
6299: LD_OWVAR 65
6303: PUSH
6304: LD_INT 7
6306: LESS
6307: AND
6308: IFFALSE 6322
6310: GO 6312
6312: DISABLE
// begin enable ;
6313: ENABLE
// game_speed := 7 ;
6314: LD_ADDR_OWVAR 65
6318: PUSH
6319: LD_INT 7
6321: ST_TO_ADDR
// end ;
6322: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
6323: LD_EXP 1
6327: PUSH
6328: LD_EXP 8
6332: AND
6333: IFFALSE 6535
6335: GO 6337
6337: DISABLE
6338: LD_INT 0
6340: PPUSH
6341: PPUSH
6342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
6343: LD_ADDR_VAR 0 3
6347: PUSH
6348: LD_INT 81
6350: PUSH
6351: LD_OWVAR 2
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 21
6362: PUSH
6363: LD_INT 1
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: PPUSH
6374: CALL_OW 69
6378: ST_TO_ADDR
// if not tmp then
6379: LD_VAR 0 3
6383: NOT
6384: IFFALSE 6388
// exit ;
6386: GO 6535
// if tmp > 5 then
6388: LD_VAR 0 3
6392: PUSH
6393: LD_INT 5
6395: GREATER
6396: IFFALSE 6408
// k := 5 else
6398: LD_ADDR_VAR 0 2
6402: PUSH
6403: LD_INT 5
6405: ST_TO_ADDR
6406: GO 6418
// k := tmp ;
6408: LD_ADDR_VAR 0 2
6412: PUSH
6413: LD_VAR 0 3
6417: ST_TO_ADDR
// for i := 1 to k do
6418: LD_ADDR_VAR 0 1
6422: PUSH
6423: DOUBLE
6424: LD_INT 1
6426: DEC
6427: ST_TO_ADDR
6428: LD_VAR 0 2
6432: PUSH
6433: FOR_TO
6434: IFFALSE 6533
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
6436: LD_VAR 0 3
6440: PUSH
6441: LD_VAR 0 1
6445: ARRAY
6446: PPUSH
6447: LD_VAR 0 1
6451: PUSH
6452: LD_INT 4
6454: MOD
6455: PUSH
6456: LD_INT 1
6458: PLUS
6459: PPUSH
6460: CALL_OW 259
6464: PUSH
6465: LD_INT 10
6467: LESS
6468: IFFALSE 6531
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
6470: LD_VAR 0 3
6474: PUSH
6475: LD_VAR 0 1
6479: ARRAY
6480: PPUSH
6481: LD_VAR 0 1
6485: PUSH
6486: LD_INT 4
6488: MOD
6489: PUSH
6490: LD_INT 1
6492: PLUS
6493: PPUSH
6494: LD_VAR 0 3
6498: PUSH
6499: LD_VAR 0 1
6503: ARRAY
6504: PPUSH
6505: LD_VAR 0 1
6509: PUSH
6510: LD_INT 4
6512: MOD
6513: PUSH
6514: LD_INT 1
6516: PLUS
6517: PPUSH
6518: CALL_OW 259
6522: PUSH
6523: LD_INT 1
6525: PLUS
6526: PPUSH
6527: CALL_OW 237
6531: GO 6433
6533: POP
6534: POP
// end ;
6535: PPOPN 3
6537: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
6538: LD_EXP 1
6542: PUSH
6543: LD_EXP 9
6547: AND
6548: IFFALSE 6568
6550: GO 6552
6552: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
6553: LD_INT 4
6555: PPUSH
6556: LD_OWVAR 2
6560: PPUSH
6561: LD_INT 0
6563: PPUSH
6564: CALL_OW 324
6568: END
// every 0 0$1 trigger StreamModeActive and sShovel do
6569: LD_EXP 1
6573: PUSH
6574: LD_EXP 38
6578: AND
6579: IFFALSE 6599
6581: GO 6583
6583: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
6584: LD_INT 19
6586: PPUSH
6587: LD_OWVAR 2
6591: PPUSH
6592: LD_INT 0
6594: PPUSH
6595: CALL_OW 324
6599: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
6600: LD_EXP 1
6604: PUSH
6605: LD_EXP 10
6609: AND
6610: IFFALSE 6712
6612: GO 6614
6614: DISABLE
6615: LD_INT 0
6617: PPUSH
6618: PPUSH
// begin enable ;
6619: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
6620: LD_ADDR_VAR 0 2
6624: PUSH
6625: LD_INT 22
6627: PUSH
6628: LD_OWVAR 2
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: PUSH
6637: LD_INT 2
6639: PUSH
6640: LD_INT 34
6642: PUSH
6643: LD_INT 11
6645: PUSH
6646: EMPTY
6647: LIST
6648: LIST
6649: PUSH
6650: LD_INT 34
6652: PUSH
6653: LD_INT 30
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: LIST
6664: PUSH
6665: EMPTY
6666: LIST
6667: LIST
6668: PPUSH
6669: CALL_OW 69
6673: ST_TO_ADDR
// if not tmp then
6674: LD_VAR 0 2
6678: NOT
6679: IFFALSE 6683
// exit ;
6681: GO 6712
// for i in tmp do
6683: LD_ADDR_VAR 0 1
6687: PUSH
6688: LD_VAR 0 2
6692: PUSH
6693: FOR_IN
6694: IFFALSE 6710
// begin SetLives ( i , 0 ) ;
6696: LD_VAR 0 1
6700: PPUSH
6701: LD_INT 0
6703: PPUSH
6704: CALL_OW 234
// end ;
6708: GO 6693
6710: POP
6711: POP
// end ;
6712: PPOPN 2
6714: END
// every 0 0$1 trigger StreamModeActive and sBunker do
6715: LD_EXP 1
6719: PUSH
6720: LD_EXP 11
6724: AND
6725: IFFALSE 6745
6727: GO 6729
6729: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
6730: LD_INT 32
6732: PPUSH
6733: LD_OWVAR 2
6737: PPUSH
6738: LD_INT 0
6740: PPUSH
6741: CALL_OW 324
6745: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
6746: LD_EXP 1
6750: PUSH
6751: LD_EXP 12
6755: AND
6756: IFFALSE 6937
6758: GO 6760
6760: DISABLE
6761: LD_INT 0
6763: PPUSH
6764: PPUSH
6765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
6766: LD_ADDR_VAR 0 2
6770: PUSH
6771: LD_INT 22
6773: PUSH
6774: LD_OWVAR 2
6778: PUSH
6779: EMPTY
6780: LIST
6781: LIST
6782: PUSH
6783: LD_INT 33
6785: PUSH
6786: LD_INT 3
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PPUSH
6797: CALL_OW 69
6801: ST_TO_ADDR
// if not tmp then
6802: LD_VAR 0 2
6806: NOT
6807: IFFALSE 6811
// exit ;
6809: GO 6937
// side := 0 ;
6811: LD_ADDR_VAR 0 3
6815: PUSH
6816: LD_INT 0
6818: ST_TO_ADDR
// for i := 1 to 8 do
6819: LD_ADDR_VAR 0 1
6823: PUSH
6824: DOUBLE
6825: LD_INT 1
6827: DEC
6828: ST_TO_ADDR
6829: LD_INT 8
6831: PUSH
6832: FOR_TO
6833: IFFALSE 6881
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
6835: LD_OWVAR 2
6839: PUSH
6840: LD_VAR 0 1
6844: NONEQUAL
6845: PUSH
6846: LD_OWVAR 2
6850: PPUSH
6851: LD_VAR 0 1
6855: PPUSH
6856: CALL_OW 81
6860: PUSH
6861: LD_INT 2
6863: EQUAL
6864: AND
6865: IFFALSE 6879
// begin side := i ;
6867: LD_ADDR_VAR 0 3
6871: PUSH
6872: LD_VAR 0 1
6876: ST_TO_ADDR
// break ;
6877: GO 6881
// end ;
6879: GO 6832
6881: POP
6882: POP
// if not side then
6883: LD_VAR 0 3
6887: NOT
6888: IFFALSE 6892
// exit ;
6890: GO 6937
// for i := 1 to tmp do
6892: LD_ADDR_VAR 0 1
6896: PUSH
6897: DOUBLE
6898: LD_INT 1
6900: DEC
6901: ST_TO_ADDR
6902: LD_VAR 0 2
6906: PUSH
6907: FOR_TO
6908: IFFALSE 6935
// if Prob ( 60 ) then
6910: LD_INT 60
6912: PPUSH
6913: CALL_OW 13
6917: IFFALSE 6933
// SetSide ( i , side ) ;
6919: LD_VAR 0 1
6923: PPUSH
6924: LD_VAR 0 3
6928: PPUSH
6929: CALL_OW 235
6933: GO 6907
6935: POP
6936: POP
// end ;
6937: PPOPN 3
6939: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
6940: LD_EXP 1
6944: PUSH
6945: LD_EXP 14
6949: AND
6950: IFFALSE 7069
6952: GO 6954
6954: DISABLE
6955: LD_INT 0
6957: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
6958: LD_ADDR_VAR 0 1
6962: PUSH
6963: LD_INT 22
6965: PUSH
6966: LD_OWVAR 2
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PUSH
6975: LD_INT 21
6977: PUSH
6978: LD_INT 1
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: PUSH
6985: LD_INT 3
6987: PUSH
6988: LD_INT 23
6990: PUSH
6991: LD_INT 0
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: LIST
7006: PPUSH
7007: CALL_OW 69
7011: PUSH
7012: FOR_IN
7013: IFFALSE 7067
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
7015: LD_VAR 0 1
7019: PPUSH
7020: CALL_OW 257
7024: PUSH
7025: LD_INT 1
7027: PUSH
7028: LD_INT 2
7030: PUSH
7031: LD_INT 3
7033: PUSH
7034: LD_INT 4
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: IN
7043: IFFALSE 7065
// SetClass ( un , rand ( 1 , 4 ) ) ;
7045: LD_VAR 0 1
7049: PPUSH
7050: LD_INT 1
7052: PPUSH
7053: LD_INT 4
7055: PPUSH
7056: CALL_OW 12
7060: PPUSH
7061: CALL_OW 336
7065: GO 7012
7067: POP
7068: POP
// end ;
7069: PPOPN 1
7071: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
7072: LD_EXP 1
7076: PUSH
7077: LD_EXP 13
7081: AND
7082: IFFALSE 7161
7084: GO 7086
7086: DISABLE
7087: LD_INT 0
7089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7090: LD_ADDR_VAR 0 1
7094: PUSH
7095: LD_INT 22
7097: PUSH
7098: LD_OWVAR 2
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PUSH
7107: LD_INT 21
7109: PUSH
7110: LD_INT 3
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PPUSH
7121: CALL_OW 69
7125: ST_TO_ADDR
// if not tmp then
7126: LD_VAR 0 1
7130: NOT
7131: IFFALSE 7135
// exit ;
7133: GO 7161
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
7135: LD_VAR 0 1
7139: PUSH
7140: LD_INT 1
7142: PPUSH
7143: LD_VAR 0 1
7147: PPUSH
7148: CALL_OW 12
7152: ARRAY
7153: PPUSH
7154: LD_INT 100
7156: PPUSH
7157: CALL_OW 234
// end ;
7161: PPOPN 1
7163: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
7164: LD_EXP 1
7168: PUSH
7169: LD_EXP 15
7173: AND
7174: IFFALSE 7272
7176: GO 7178
7178: DISABLE
7179: LD_INT 0
7181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
7182: LD_ADDR_VAR 0 1
7186: PUSH
7187: LD_INT 22
7189: PUSH
7190: LD_OWVAR 2
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 21
7201: PUSH
7202: LD_INT 1
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PPUSH
7213: CALL_OW 69
7217: ST_TO_ADDR
// if not tmp then
7218: LD_VAR 0 1
7222: NOT
7223: IFFALSE 7227
// exit ;
7225: GO 7272
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
7227: LD_VAR 0 1
7231: PUSH
7232: LD_INT 1
7234: PPUSH
7235: LD_VAR 0 1
7239: PPUSH
7240: CALL_OW 12
7244: ARRAY
7245: PPUSH
7246: LD_INT 1
7248: PPUSH
7249: LD_INT 4
7251: PPUSH
7252: CALL_OW 12
7256: PPUSH
7257: LD_INT 3000
7259: PPUSH
7260: LD_INT 9000
7262: PPUSH
7263: CALL_OW 12
7267: PPUSH
7268: CALL_OW 492
// end ;
7272: PPOPN 1
7274: END
// every 0 0$1 trigger StreamModeActive and sDepot do
7275: LD_EXP 1
7279: PUSH
7280: LD_EXP 16
7284: AND
7285: IFFALSE 7305
7287: GO 7289
7289: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
7290: LD_INT 1
7292: PPUSH
7293: LD_OWVAR 2
7297: PPUSH
7298: LD_INT 0
7300: PPUSH
7301: CALL_OW 324
7305: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
7306: LD_EXP 1
7310: PUSH
7311: LD_EXP 17
7315: AND
7316: IFFALSE 7399
7318: GO 7320
7320: DISABLE
7321: LD_INT 0
7323: PPUSH
7324: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7325: LD_ADDR_VAR 0 2
7329: PUSH
7330: LD_INT 22
7332: PUSH
7333: LD_OWVAR 2
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: PUSH
7342: LD_INT 21
7344: PUSH
7345: LD_INT 3
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: PPUSH
7356: CALL_OW 69
7360: ST_TO_ADDR
// if not tmp then
7361: LD_VAR 0 2
7365: NOT
7366: IFFALSE 7370
// exit ;
7368: GO 7399
// for i in tmp do
7370: LD_ADDR_VAR 0 1
7374: PUSH
7375: LD_VAR 0 2
7379: PUSH
7380: FOR_IN
7381: IFFALSE 7397
// SetBLevel ( i , 10 ) ;
7383: LD_VAR 0 1
7387: PPUSH
7388: LD_INT 10
7390: PPUSH
7391: CALL_OW 241
7395: GO 7380
7397: POP
7398: POP
// end ;
7399: PPOPN 2
7401: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
7402: LD_EXP 1
7406: PUSH
7407: LD_EXP 18
7411: AND
7412: IFFALSE 7523
7414: GO 7416
7416: DISABLE
7417: LD_INT 0
7419: PPUSH
7420: PPUSH
7421: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
7422: LD_ADDR_VAR 0 3
7426: PUSH
7427: LD_INT 22
7429: PUSH
7430: LD_OWVAR 2
7434: PUSH
7435: EMPTY
7436: LIST
7437: LIST
7438: PUSH
7439: LD_INT 25
7441: PUSH
7442: LD_INT 1
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: PPUSH
7453: CALL_OW 69
7457: ST_TO_ADDR
// if not tmp then
7458: LD_VAR 0 3
7462: NOT
7463: IFFALSE 7467
// exit ;
7465: GO 7523
// un := tmp [ rand ( 1 , tmp ) ] ;
7467: LD_ADDR_VAR 0 2
7471: PUSH
7472: LD_VAR 0 3
7476: PUSH
7477: LD_INT 1
7479: PPUSH
7480: LD_VAR 0 3
7484: PPUSH
7485: CALL_OW 12
7489: ARRAY
7490: ST_TO_ADDR
// if Crawls ( un ) then
7491: LD_VAR 0 2
7495: PPUSH
7496: CALL_OW 318
7500: IFFALSE 7511
// ComWalk ( un ) ;
7502: LD_VAR 0 2
7506: PPUSH
7507: CALL_OW 138
// SetClass ( un , class_sniper ) ;
7511: LD_VAR 0 2
7515: PPUSH
7516: LD_INT 5
7518: PPUSH
7519: CALL_OW 336
// end ;
7523: PPOPN 3
7525: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
7526: LD_EXP 1
7530: PUSH
7531: LD_EXP 19
7535: AND
7536: PUSH
7537: LD_OWVAR 67
7541: PUSH
7542: LD_INT 4
7544: LESS
7545: AND
7546: IFFALSE 7565
7548: GO 7550
7550: DISABLE
// begin Difficulty := Difficulty + 1 ;
7551: LD_ADDR_OWVAR 67
7555: PUSH
7556: LD_OWVAR 67
7560: PUSH
7561: LD_INT 1
7563: PLUS
7564: ST_TO_ADDR
// end ;
7565: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
7566: LD_EXP 1
7570: PUSH
7571: LD_EXP 20
7575: AND
7576: IFFALSE 7679
7578: GO 7580
7580: DISABLE
7581: LD_INT 0
7583: PPUSH
// begin for i := 1 to 5 do
7584: LD_ADDR_VAR 0 1
7588: PUSH
7589: DOUBLE
7590: LD_INT 1
7592: DEC
7593: ST_TO_ADDR
7594: LD_INT 5
7596: PUSH
7597: FOR_TO
7598: IFFALSE 7677
// begin uc_nation := nation_nature ;
7600: LD_ADDR_OWVAR 21
7604: PUSH
7605: LD_INT 0
7607: ST_TO_ADDR
// uc_side := 0 ;
7608: LD_ADDR_OWVAR 20
7612: PUSH
7613: LD_INT 0
7615: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
7616: LD_ADDR_OWVAR 29
7620: PUSH
7621: LD_INT 12
7623: PUSH
7624: LD_INT 12
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: ST_TO_ADDR
// hc_agressivity := 20 ;
7631: LD_ADDR_OWVAR 35
7635: PUSH
7636: LD_INT 20
7638: ST_TO_ADDR
// hc_class := class_tiger ;
7639: LD_ADDR_OWVAR 28
7643: PUSH
7644: LD_INT 14
7646: ST_TO_ADDR
// hc_gallery :=  ;
7647: LD_ADDR_OWVAR 33
7651: PUSH
7652: LD_STRING 
7654: ST_TO_ADDR
// hc_name :=  ;
7655: LD_ADDR_OWVAR 26
7659: PUSH
7660: LD_STRING 
7662: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
7663: CALL_OW 44
7667: PPUSH
7668: LD_INT 0
7670: PPUSH
7671: CALL_OW 51
// end ;
7675: GO 7597
7677: POP
7678: POP
// end ;
7679: PPOPN 1
7681: END
// every 0 0$1 trigger StreamModeActive and sBomb do
7682: LD_EXP 1
7686: PUSH
7687: LD_EXP 21
7691: AND
7692: IFFALSE 7701
7694: GO 7696
7696: DISABLE
// StreamSibBomb ;
7697: CALL 7702 0 0
7701: END
// export function StreamSibBomb ; var i , x , y ; begin
7702: LD_INT 0
7704: PPUSH
7705: PPUSH
7706: PPUSH
7707: PPUSH
// result := false ;
7708: LD_ADDR_VAR 0 1
7712: PUSH
7713: LD_INT 0
7715: ST_TO_ADDR
// for i := 1 to 16 do
7716: LD_ADDR_VAR 0 2
7720: PUSH
7721: DOUBLE
7722: LD_INT 1
7724: DEC
7725: ST_TO_ADDR
7726: LD_INT 16
7728: PUSH
7729: FOR_TO
7730: IFFALSE 7929
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
7732: LD_ADDR_VAR 0 3
7736: PUSH
7737: LD_INT 10
7739: PUSH
7740: LD_INT 20
7742: PUSH
7743: LD_INT 30
7745: PUSH
7746: LD_INT 40
7748: PUSH
7749: LD_INT 50
7751: PUSH
7752: LD_INT 60
7754: PUSH
7755: LD_INT 70
7757: PUSH
7758: LD_INT 80
7760: PUSH
7761: LD_INT 90
7763: PUSH
7764: LD_INT 100
7766: PUSH
7767: LD_INT 110
7769: PUSH
7770: LD_INT 120
7772: PUSH
7773: LD_INT 130
7775: PUSH
7776: LD_INT 140
7778: PUSH
7779: LD_INT 150
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: PUSH
7799: LD_INT 1
7801: PPUSH
7802: LD_INT 15
7804: PPUSH
7805: CALL_OW 12
7809: ARRAY
7810: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
7811: LD_ADDR_VAR 0 4
7815: PUSH
7816: LD_INT 10
7818: PUSH
7819: LD_INT 20
7821: PUSH
7822: LD_INT 30
7824: PUSH
7825: LD_INT 40
7827: PUSH
7828: LD_INT 50
7830: PUSH
7831: LD_INT 60
7833: PUSH
7834: LD_INT 70
7836: PUSH
7837: LD_INT 80
7839: PUSH
7840: LD_INT 90
7842: PUSH
7843: LD_INT 100
7845: PUSH
7846: LD_INT 110
7848: PUSH
7849: LD_INT 120
7851: PUSH
7852: LD_INT 130
7854: PUSH
7855: LD_INT 140
7857: PUSH
7858: LD_INT 150
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: PUSH
7878: LD_INT 1
7880: PPUSH
7881: LD_INT 15
7883: PPUSH
7884: CALL_OW 12
7888: ARRAY
7889: ST_TO_ADDR
// if ValidHex ( x , y ) then
7890: LD_VAR 0 3
7894: PPUSH
7895: LD_VAR 0 4
7899: PPUSH
7900: CALL_OW 488
7904: IFFALSE 7927
// begin result := [ x , y ] ;
7906: LD_ADDR_VAR 0 1
7910: PUSH
7911: LD_VAR 0 3
7915: PUSH
7916: LD_VAR 0 4
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: ST_TO_ADDR
// break ;
7925: GO 7929
// end ; end ;
7927: GO 7729
7929: POP
7930: POP
// if result then
7931: LD_VAR 0 1
7935: IFFALSE 7995
// begin ToLua ( playSibBomb() ) ;
7937: LD_STRING playSibBomb()
7939: PPUSH
7940: CALL_OW 559
// wait ( 0 0$14 ) ;
7944: LD_INT 490
7946: PPUSH
7947: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
7951: LD_VAR 0 1
7955: PUSH
7956: LD_INT 1
7958: ARRAY
7959: PPUSH
7960: LD_VAR 0 1
7964: PUSH
7965: LD_INT 2
7967: ARRAY
7968: PPUSH
7969: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
7973: LD_VAR 0 1
7977: PUSH
7978: LD_INT 1
7980: ARRAY
7981: PPUSH
7982: LD_VAR 0 1
7986: PUSH
7987: LD_INT 2
7989: ARRAY
7990: PPUSH
7991: CALL_OW 429
// end ; end ;
7995: LD_VAR 0 1
7999: RET
// every 0 0$1 trigger StreamModeActive and sReset do
8000: LD_EXP 1
8004: PUSH
8005: LD_EXP 23
8009: AND
8010: IFFALSE 8022
8012: GO 8014
8014: DISABLE
// YouLost (  ) ;
8015: LD_STRING 
8017: PPUSH
8018: CALL_OW 104
8022: END
// every 0 0$1 trigger StreamModeActive and sFog do
8023: LD_EXP 1
8027: PUSH
8028: LD_EXP 22
8032: AND
8033: IFFALSE 8047
8035: GO 8037
8037: DISABLE
// FogOff ( your_side ) ;
8038: LD_OWVAR 2
8042: PPUSH
8043: CALL_OW 344
8047: END
// every 0 0$1 trigger StreamModeActive and sSun do
8048: LD_EXP 1
8052: PUSH
8053: LD_EXP 24
8057: AND
8058: IFFALSE 8086
8060: GO 8062
8062: DISABLE
// begin solar_recharge_percent := 0 ;
8063: LD_ADDR_OWVAR 79
8067: PUSH
8068: LD_INT 0
8070: ST_TO_ADDR
// wait ( 5 5$00 ) ;
8071: LD_INT 10500
8073: PPUSH
8074: CALL_OW 67
// solar_recharge_percent := 100 ;
8078: LD_ADDR_OWVAR 79
8082: PUSH
8083: LD_INT 100
8085: ST_TO_ADDR
// end ;
8086: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
8087: LD_EXP 1
8091: PUSH
8092: LD_EXP 25
8096: AND
8097: IFFALSE 8336
8099: GO 8101
8101: DISABLE
8102: LD_INT 0
8104: PPUSH
8105: PPUSH
8106: PPUSH
// begin tmp := [ ] ;
8107: LD_ADDR_VAR 0 3
8111: PUSH
8112: EMPTY
8113: ST_TO_ADDR
// for i := 1 to 6 do
8114: LD_ADDR_VAR 0 1
8118: PUSH
8119: DOUBLE
8120: LD_INT 1
8122: DEC
8123: ST_TO_ADDR
8124: LD_INT 6
8126: PUSH
8127: FOR_TO
8128: IFFALSE 8233
// begin uc_nation := nation_nature ;
8130: LD_ADDR_OWVAR 21
8134: PUSH
8135: LD_INT 0
8137: ST_TO_ADDR
// uc_side := 0 ;
8138: LD_ADDR_OWVAR 20
8142: PUSH
8143: LD_INT 0
8145: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8146: LD_ADDR_OWVAR 29
8150: PUSH
8151: LD_INT 12
8153: PUSH
8154: LD_INT 12
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: ST_TO_ADDR
// hc_agressivity := 20 ;
8161: LD_ADDR_OWVAR 35
8165: PUSH
8166: LD_INT 20
8168: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
8169: LD_ADDR_OWVAR 28
8173: PUSH
8174: LD_INT 17
8176: ST_TO_ADDR
// hc_gallery :=  ;
8177: LD_ADDR_OWVAR 33
8181: PUSH
8182: LD_STRING 
8184: ST_TO_ADDR
// hc_name :=  ;
8185: LD_ADDR_OWVAR 26
8189: PUSH
8190: LD_STRING 
8192: ST_TO_ADDR
// un := CreateHuman ;
8193: LD_ADDR_VAR 0 2
8197: PUSH
8198: CALL_OW 44
8202: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
8203: LD_VAR 0 2
8207: PPUSH
8208: LD_INT 1
8210: PPUSH
8211: CALL_OW 51
// tmp := tmp ^ un ;
8215: LD_ADDR_VAR 0 3
8219: PUSH
8220: LD_VAR 0 3
8224: PUSH
8225: LD_VAR 0 2
8229: ADD
8230: ST_TO_ADDR
// end ;
8231: GO 8127
8233: POP
8234: POP
// repeat wait ( 0 0$1 ) ;
8235: LD_INT 35
8237: PPUSH
8238: CALL_OW 67
// for un in tmp do
8242: LD_ADDR_VAR 0 2
8246: PUSH
8247: LD_VAR 0 3
8251: PUSH
8252: FOR_IN
8253: IFFALSE 8327
// begin if IsDead ( un ) then
8255: LD_VAR 0 2
8259: PPUSH
8260: CALL_OW 301
8264: IFFALSE 8284
// begin tmp := tmp diff un ;
8266: LD_ADDR_VAR 0 3
8270: PUSH
8271: LD_VAR 0 3
8275: PUSH
8276: LD_VAR 0 2
8280: DIFF
8281: ST_TO_ADDR
// continue ;
8282: GO 8252
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
8284: LD_VAR 0 2
8288: PPUSH
8289: LD_INT 3
8291: PUSH
8292: LD_INT 22
8294: PUSH
8295: LD_INT 0
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: PPUSH
8306: CALL_OW 69
8310: PPUSH
8311: LD_VAR 0 2
8315: PPUSH
8316: CALL_OW 74
8320: PPUSH
8321: CALL_OW 115
// end ;
8325: GO 8252
8327: POP
8328: POP
// until not tmp ;
8329: LD_VAR 0 3
8333: NOT
8334: IFFALSE 8235
// end ;
8336: PPOPN 3
8338: END
// every 0 0$1 trigger StreamModeActive and sTroll do
8339: LD_EXP 1
8343: PUSH
8344: LD_EXP 26
8348: AND
8349: IFFALSE 8403
8351: GO 8353
8353: DISABLE
// begin ToLua ( displayTroll(); ) ;
8354: LD_STRING displayTroll();
8356: PPUSH
8357: CALL_OW 559
// wait ( 3 3$00 ) ;
8361: LD_INT 6300
8363: PPUSH
8364: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8368: LD_STRING hideTroll();
8370: PPUSH
8371: CALL_OW 559
// wait ( 1 1$00 ) ;
8375: LD_INT 2100
8377: PPUSH
8378: CALL_OW 67
// ToLua ( displayTroll(); ) ;
8382: LD_STRING displayTroll();
8384: PPUSH
8385: CALL_OW 559
// wait ( 1 1$00 ) ;
8389: LD_INT 2100
8391: PPUSH
8392: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8396: LD_STRING hideTroll();
8398: PPUSH
8399: CALL_OW 559
// end ;
8403: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
8404: LD_EXP 1
8408: PUSH
8409: LD_EXP 27
8413: AND
8414: IFFALSE 8477
8416: GO 8418
8418: DISABLE
8419: LD_INT 0
8421: PPUSH
// begin p := 0 ;
8422: LD_ADDR_VAR 0 1
8426: PUSH
8427: LD_INT 0
8429: ST_TO_ADDR
// repeat game_speed := 1 ;
8430: LD_ADDR_OWVAR 65
8434: PUSH
8435: LD_INT 1
8437: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8438: LD_INT 35
8440: PPUSH
8441: CALL_OW 67
// p := p + 1 ;
8445: LD_ADDR_VAR 0 1
8449: PUSH
8450: LD_VAR 0 1
8454: PUSH
8455: LD_INT 1
8457: PLUS
8458: ST_TO_ADDR
// until p >= 60 ;
8459: LD_VAR 0 1
8463: PUSH
8464: LD_INT 60
8466: GREATEREQUAL
8467: IFFALSE 8430
// game_speed := 4 ;
8469: LD_ADDR_OWVAR 65
8473: PUSH
8474: LD_INT 4
8476: ST_TO_ADDR
// end ;
8477: PPOPN 1
8479: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
8480: LD_EXP 1
8484: PUSH
8485: LD_EXP 28
8489: AND
8490: IFFALSE 8636
8492: GO 8494
8494: DISABLE
8495: LD_INT 0
8497: PPUSH
8498: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8499: LD_ADDR_VAR 0 1
8503: PUSH
8504: LD_INT 22
8506: PUSH
8507: LD_OWVAR 2
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: PUSH
8516: LD_INT 2
8518: PUSH
8519: LD_INT 30
8521: PUSH
8522: LD_INT 0
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: PUSH
8529: LD_INT 30
8531: PUSH
8532: LD_INT 1
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: LIST
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PPUSH
8548: CALL_OW 69
8552: ST_TO_ADDR
// if not depot then
8553: LD_VAR 0 1
8557: NOT
8558: IFFALSE 8562
// exit ;
8560: GO 8636
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
8562: LD_ADDR_VAR 0 2
8566: PUSH
8567: LD_VAR 0 1
8571: PUSH
8572: LD_INT 1
8574: PPUSH
8575: LD_VAR 0 1
8579: PPUSH
8580: CALL_OW 12
8584: ARRAY
8585: PPUSH
8586: CALL_OW 274
8590: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
8591: LD_VAR 0 2
8595: PPUSH
8596: LD_INT 1
8598: PPUSH
8599: LD_INT 0
8601: PPUSH
8602: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
8606: LD_VAR 0 2
8610: PPUSH
8611: LD_INT 2
8613: PPUSH
8614: LD_INT 0
8616: PPUSH
8617: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
8621: LD_VAR 0 2
8625: PPUSH
8626: LD_INT 3
8628: PPUSH
8629: LD_INT 0
8631: PPUSH
8632: CALL_OW 277
// end ;
8636: PPOPN 2
8638: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
8639: LD_EXP 1
8643: PUSH
8644: LD_EXP 29
8648: AND
8649: IFFALSE 8746
8651: GO 8653
8653: DISABLE
8654: LD_INT 0
8656: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
8657: LD_ADDR_VAR 0 1
8661: PUSH
8662: LD_INT 22
8664: PUSH
8665: LD_OWVAR 2
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PUSH
8674: LD_INT 21
8676: PUSH
8677: LD_INT 1
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: PUSH
8684: LD_INT 3
8686: PUSH
8687: LD_INT 23
8689: PUSH
8690: LD_INT 0
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: LIST
8705: PPUSH
8706: CALL_OW 69
8710: ST_TO_ADDR
// if not tmp then
8711: LD_VAR 0 1
8715: NOT
8716: IFFALSE 8720
// exit ;
8718: GO 8746
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
8720: LD_VAR 0 1
8724: PUSH
8725: LD_INT 1
8727: PPUSH
8728: LD_VAR 0 1
8732: PPUSH
8733: CALL_OW 12
8737: ARRAY
8738: PPUSH
8739: LD_INT 200
8741: PPUSH
8742: CALL_OW 234
// end ;
8746: PPOPN 1
8748: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
8749: LD_EXP 1
8753: PUSH
8754: LD_EXP 30
8758: AND
8759: IFFALSE 8838
8761: GO 8763
8763: DISABLE
8764: LD_INT 0
8766: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
8767: LD_ADDR_VAR 0 1
8771: PUSH
8772: LD_INT 22
8774: PUSH
8775: LD_OWVAR 2
8779: PUSH
8780: EMPTY
8781: LIST
8782: LIST
8783: PUSH
8784: LD_INT 21
8786: PUSH
8787: LD_INT 2
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: PPUSH
8798: CALL_OW 69
8802: ST_TO_ADDR
// if not tmp then
8803: LD_VAR 0 1
8807: NOT
8808: IFFALSE 8812
// exit ;
8810: GO 8838
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
8812: LD_VAR 0 1
8816: PUSH
8817: LD_INT 1
8819: PPUSH
8820: LD_VAR 0 1
8824: PPUSH
8825: CALL_OW 12
8829: ARRAY
8830: PPUSH
8831: LD_INT 60
8833: PPUSH
8834: CALL_OW 234
// end ;
8838: PPOPN 1
8840: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
8841: LD_EXP 1
8845: PUSH
8846: LD_EXP 31
8850: AND
8851: IFFALSE 8950
8853: GO 8855
8855: DISABLE
8856: LD_INT 0
8858: PPUSH
8859: PPUSH
// begin enable ;
8860: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
8861: LD_ADDR_VAR 0 1
8865: PUSH
8866: LD_INT 22
8868: PUSH
8869: LD_OWVAR 2
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: PUSH
8878: LD_INT 61
8880: PUSH
8881: EMPTY
8882: LIST
8883: PUSH
8884: LD_INT 33
8886: PUSH
8887: LD_INT 2
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: LIST
8898: PPUSH
8899: CALL_OW 69
8903: ST_TO_ADDR
// if not tmp then
8904: LD_VAR 0 1
8908: NOT
8909: IFFALSE 8913
// exit ;
8911: GO 8950
// for i in tmp do
8913: LD_ADDR_VAR 0 2
8917: PUSH
8918: LD_VAR 0 1
8922: PUSH
8923: FOR_IN
8924: IFFALSE 8948
// if IsControledBy ( i ) then
8926: LD_VAR 0 2
8930: PPUSH
8931: CALL_OW 312
8935: IFFALSE 8946
// ComUnlink ( i ) ;
8937: LD_VAR 0 2
8941: PPUSH
8942: CALL_OW 136
8946: GO 8923
8948: POP
8949: POP
// end ;
8950: PPOPN 2
8952: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
8953: LD_EXP 1
8957: PUSH
8958: LD_EXP 32
8962: AND
8963: IFFALSE 9103
8965: GO 8967
8967: DISABLE
8968: LD_INT 0
8970: PPUSH
8971: PPUSH
// begin ToLua ( displayPowell(); ) ;
8972: LD_STRING displayPowell();
8974: PPUSH
8975: CALL_OW 559
// uc_side := 0 ;
8979: LD_ADDR_OWVAR 20
8983: PUSH
8984: LD_INT 0
8986: ST_TO_ADDR
// uc_nation := 2 ;
8987: LD_ADDR_OWVAR 21
8991: PUSH
8992: LD_INT 2
8994: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
8995: LD_ADDR_OWVAR 37
8999: PUSH
9000: LD_INT 14
9002: ST_TO_ADDR
// vc_engine := engine_siberite ;
9003: LD_ADDR_OWVAR 39
9007: PUSH
9008: LD_INT 3
9010: ST_TO_ADDR
// vc_control := control_apeman ;
9011: LD_ADDR_OWVAR 38
9015: PUSH
9016: LD_INT 5
9018: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
9019: LD_ADDR_OWVAR 40
9023: PUSH
9024: LD_INT 29
9026: ST_TO_ADDR
// un := CreateVehicle ;
9027: LD_ADDR_VAR 0 2
9031: PUSH
9032: CALL_OW 45
9036: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
9037: LD_VAR 0 2
9041: PPUSH
9042: LD_INT 1
9044: PPUSH
9045: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
9049: LD_INT 35
9051: PPUSH
9052: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
9056: LD_VAR 0 2
9060: PPUSH
9061: LD_INT 22
9063: PUSH
9064: LD_OWVAR 2
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: PPUSH
9073: CALL_OW 69
9077: PPUSH
9078: LD_VAR 0 2
9082: PPUSH
9083: CALL_OW 74
9087: PPUSH
9088: CALL_OW 115
// until IsDead ( un ) ;
9092: LD_VAR 0 2
9096: PPUSH
9097: CALL_OW 301
9101: IFFALSE 9049
// end ;
9103: PPOPN 2
9105: END
// every 0 0$1 trigger StreamModeActive and sStu do
9106: LD_EXP 1
9110: PUSH
9111: LD_EXP 40
9115: AND
9116: IFFALSE 9132
9118: GO 9120
9120: DISABLE
// begin ToLua ( displayStucuk(); ) ;
9121: LD_STRING displayStucuk();
9123: PPUSH
9124: CALL_OW 559
// ResetFog ;
9128: CALL_OW 335
// end ;
9132: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
9133: LD_EXP 1
9137: PUSH
9138: LD_EXP 33
9142: AND
9143: IFFALSE 9284
9145: GO 9147
9147: DISABLE
9148: LD_INT 0
9150: PPUSH
9151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9152: LD_ADDR_VAR 0 2
9156: PUSH
9157: LD_INT 22
9159: PUSH
9160: LD_OWVAR 2
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: PUSH
9169: LD_INT 21
9171: PUSH
9172: LD_INT 1
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: PUSH
9179: EMPTY
9180: LIST
9181: LIST
9182: PPUSH
9183: CALL_OW 69
9187: ST_TO_ADDR
// if not tmp then
9188: LD_VAR 0 2
9192: NOT
9193: IFFALSE 9197
// exit ;
9195: GO 9284
// un := tmp [ rand ( 1 , tmp ) ] ;
9197: LD_ADDR_VAR 0 1
9201: PUSH
9202: LD_VAR 0 2
9206: PUSH
9207: LD_INT 1
9209: PPUSH
9210: LD_VAR 0 2
9214: PPUSH
9215: CALL_OW 12
9219: ARRAY
9220: ST_TO_ADDR
// SetSide ( un , 0 ) ;
9221: LD_VAR 0 1
9225: PPUSH
9226: LD_INT 0
9228: PPUSH
9229: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
9233: LD_VAR 0 1
9237: PPUSH
9238: LD_OWVAR 3
9242: PUSH
9243: LD_VAR 0 1
9247: DIFF
9248: PPUSH
9249: LD_VAR 0 1
9253: PPUSH
9254: CALL_OW 74
9258: PPUSH
9259: CALL_OW 115
// wait ( 0 0$20 ) ;
9263: LD_INT 700
9265: PPUSH
9266: CALL_OW 67
// SetSide ( un , your_side ) ;
9270: LD_VAR 0 1
9274: PPUSH
9275: LD_OWVAR 2
9279: PPUSH
9280: CALL_OW 235
// end ;
9284: PPOPN 2
9286: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
9287: LD_EXP 1
9291: PUSH
9292: LD_EXP 34
9296: AND
9297: IFFALSE 9403
9299: GO 9301
9301: DISABLE
9302: LD_INT 0
9304: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9305: LD_ADDR_VAR 0 1
9309: PUSH
9310: LD_INT 22
9312: PUSH
9313: LD_OWVAR 2
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: PUSH
9322: LD_INT 2
9324: PUSH
9325: LD_INT 30
9327: PUSH
9328: LD_INT 0
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: PUSH
9335: LD_INT 30
9337: PUSH
9338: LD_INT 1
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: LIST
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: PPUSH
9354: CALL_OW 69
9358: ST_TO_ADDR
// if not depot then
9359: LD_VAR 0 1
9363: NOT
9364: IFFALSE 9368
// exit ;
9366: GO 9403
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
9368: LD_VAR 0 1
9372: PUSH
9373: LD_INT 1
9375: ARRAY
9376: PPUSH
9377: CALL_OW 250
9381: PPUSH
9382: LD_VAR 0 1
9386: PUSH
9387: LD_INT 1
9389: ARRAY
9390: PPUSH
9391: CALL_OW 251
9395: PPUSH
9396: LD_INT 70
9398: PPUSH
9399: CALL_OW 495
// end ;
9403: PPOPN 1
9405: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
9406: LD_EXP 1
9410: PUSH
9411: LD_EXP 35
9415: AND
9416: IFFALSE 9627
9418: GO 9420
9420: DISABLE
9421: LD_INT 0
9423: PPUSH
9424: PPUSH
9425: PPUSH
9426: PPUSH
9427: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9428: LD_ADDR_VAR 0 5
9432: PUSH
9433: LD_INT 22
9435: PUSH
9436: LD_OWVAR 2
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: LD_INT 21
9447: PUSH
9448: LD_INT 1
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PPUSH
9459: CALL_OW 69
9463: ST_TO_ADDR
// if not tmp then
9464: LD_VAR 0 5
9468: NOT
9469: IFFALSE 9473
// exit ;
9471: GO 9627
// for i in tmp do
9473: LD_ADDR_VAR 0 1
9477: PUSH
9478: LD_VAR 0 5
9482: PUSH
9483: FOR_IN
9484: IFFALSE 9625
// begin d := rand ( 0 , 5 ) ;
9486: LD_ADDR_VAR 0 4
9490: PUSH
9491: LD_INT 0
9493: PPUSH
9494: LD_INT 5
9496: PPUSH
9497: CALL_OW 12
9501: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
9502: LD_ADDR_VAR 0 2
9506: PUSH
9507: LD_VAR 0 1
9511: PPUSH
9512: CALL_OW 250
9516: PPUSH
9517: LD_VAR 0 4
9521: PPUSH
9522: LD_INT 3
9524: PPUSH
9525: LD_INT 12
9527: PPUSH
9528: CALL_OW 12
9532: PPUSH
9533: CALL_OW 272
9537: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
9538: LD_ADDR_VAR 0 3
9542: PUSH
9543: LD_VAR 0 1
9547: PPUSH
9548: CALL_OW 251
9552: PPUSH
9553: LD_VAR 0 4
9557: PPUSH
9558: LD_INT 3
9560: PPUSH
9561: LD_INT 12
9563: PPUSH
9564: CALL_OW 12
9568: PPUSH
9569: CALL_OW 273
9573: ST_TO_ADDR
// if ValidHex ( x , y ) then
9574: LD_VAR 0 2
9578: PPUSH
9579: LD_VAR 0 3
9583: PPUSH
9584: CALL_OW 488
9588: IFFALSE 9623
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
9590: LD_VAR 0 1
9594: PPUSH
9595: LD_VAR 0 2
9599: PPUSH
9600: LD_VAR 0 3
9604: PPUSH
9605: LD_INT 3
9607: PPUSH
9608: LD_INT 6
9610: PPUSH
9611: CALL_OW 12
9615: PPUSH
9616: LD_INT 1
9618: PPUSH
9619: CALL_OW 483
// end ;
9623: GO 9483
9625: POP
9626: POP
// end ;
9627: PPOPN 5
9629: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
9630: LD_EXP 1
9634: PUSH
9635: LD_EXP 36
9639: AND
9640: IFFALSE 9734
9642: GO 9644
9644: DISABLE
9645: LD_INT 0
9647: PPUSH
9648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
9649: LD_ADDR_VAR 0 2
9653: PUSH
9654: LD_INT 22
9656: PUSH
9657: LD_OWVAR 2
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: PUSH
9666: LD_INT 32
9668: PUSH
9669: LD_INT 1
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: PUSH
9676: LD_INT 21
9678: PUSH
9679: LD_INT 2
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: LIST
9690: PPUSH
9691: CALL_OW 69
9695: ST_TO_ADDR
// if not tmp then
9696: LD_VAR 0 2
9700: NOT
9701: IFFALSE 9705
// exit ;
9703: GO 9734
// for i in tmp do
9705: LD_ADDR_VAR 0 1
9709: PUSH
9710: LD_VAR 0 2
9714: PUSH
9715: FOR_IN
9716: IFFALSE 9732
// SetFuel ( i , 0 ) ;
9718: LD_VAR 0 1
9722: PPUSH
9723: LD_INT 0
9725: PPUSH
9726: CALL_OW 240
9730: GO 9715
9732: POP
9733: POP
// end ;
9734: PPOPN 2
9736: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
9737: LD_EXP 1
9741: PUSH
9742: LD_EXP 37
9746: AND
9747: IFFALSE 9813
9749: GO 9751
9751: DISABLE
9752: LD_INT 0
9754: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
9755: LD_ADDR_VAR 0 1
9759: PUSH
9760: LD_INT 22
9762: PUSH
9763: LD_OWVAR 2
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: PUSH
9772: LD_INT 30
9774: PUSH
9775: LD_INT 29
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: PPUSH
9786: CALL_OW 69
9790: ST_TO_ADDR
// if not tmp then
9791: LD_VAR 0 1
9795: NOT
9796: IFFALSE 9800
// exit ;
9798: GO 9813
// DestroyUnit ( tmp [ 1 ] ) ;
9800: LD_VAR 0 1
9804: PUSH
9805: LD_INT 1
9807: ARRAY
9808: PPUSH
9809: CALL_OW 65
// end ;
9813: PPOPN 1
9815: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
9816: LD_EXP 1
9820: PUSH
9821: LD_EXP 39
9825: AND
9826: IFFALSE 9955
9828: GO 9830
9830: DISABLE
9831: LD_INT 0
9833: PPUSH
// begin uc_side := 0 ;
9834: LD_ADDR_OWVAR 20
9838: PUSH
9839: LD_INT 0
9841: ST_TO_ADDR
// uc_nation := nation_arabian ;
9842: LD_ADDR_OWVAR 21
9846: PUSH
9847: LD_INT 2
9849: ST_TO_ADDR
// hc_gallery :=  ;
9850: LD_ADDR_OWVAR 33
9854: PUSH
9855: LD_STRING 
9857: ST_TO_ADDR
// hc_name :=  ;
9858: LD_ADDR_OWVAR 26
9862: PUSH
9863: LD_STRING 
9865: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
9866: LD_INT 1
9868: PPUSH
9869: LD_INT 11
9871: PPUSH
9872: LD_INT 10
9874: PPUSH
9875: CALL_OW 380
// un := CreateHuman ;
9879: LD_ADDR_VAR 0 1
9883: PUSH
9884: CALL_OW 44
9888: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
9889: LD_VAR 0 1
9893: PPUSH
9894: LD_INT 1
9896: PPUSH
9897: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
9901: LD_INT 35
9903: PPUSH
9904: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
9908: LD_VAR 0 1
9912: PPUSH
9913: LD_INT 22
9915: PUSH
9916: LD_OWVAR 2
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: PPUSH
9925: CALL_OW 69
9929: PPUSH
9930: LD_VAR 0 1
9934: PPUSH
9935: CALL_OW 74
9939: PPUSH
9940: CALL_OW 115
// until IsDead ( un ) ;
9944: LD_VAR 0 1
9948: PPUSH
9949: CALL_OW 301
9953: IFFALSE 9901
// end ;
9955: PPOPN 1
9957: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
9958: LD_EXP 1
9962: PUSH
9963: LD_EXP 41
9967: AND
9968: IFFALSE 9980
9970: GO 9972
9972: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
9973: LD_STRING earthquake(getX(game), 0, 32)
9975: PPUSH
9976: CALL_OW 559
9980: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
9981: LD_EXP 1
9985: PUSH
9986: LD_EXP 42
9990: AND
9991: IFFALSE 10082
9993: GO 9995
9995: DISABLE
9996: LD_INT 0
9998: PPUSH
// begin enable ;
9999: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
10000: LD_ADDR_VAR 0 1
10004: PUSH
10005: LD_INT 22
10007: PUSH
10008: LD_OWVAR 2
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: PUSH
10017: LD_INT 21
10019: PUSH
10020: LD_INT 2
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: PUSH
10027: LD_INT 33
10029: PUSH
10030: LD_INT 3
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: LIST
10041: PPUSH
10042: CALL_OW 69
10046: ST_TO_ADDR
// if not tmp then
10047: LD_VAR 0 1
10051: NOT
10052: IFFALSE 10056
// exit ;
10054: GO 10082
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
10056: LD_VAR 0 1
10060: PUSH
10061: LD_INT 1
10063: PPUSH
10064: LD_VAR 0 1
10068: PPUSH
10069: CALL_OW 12
10073: ARRAY
10074: PPUSH
10075: LD_INT 1
10077: PPUSH
10078: CALL_OW 234
// end ;
10082: PPOPN 1
10084: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
10085: LD_EXP 1
10089: PUSH
10090: LD_EXP 43
10094: AND
10095: IFFALSE 10236
10097: GO 10099
10099: DISABLE
10100: LD_INT 0
10102: PPUSH
10103: PPUSH
10104: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10105: LD_ADDR_VAR 0 3
10109: PUSH
10110: LD_INT 22
10112: PUSH
10113: LD_OWVAR 2
10117: PUSH
10118: EMPTY
10119: LIST
10120: LIST
10121: PUSH
10122: LD_INT 25
10124: PUSH
10125: LD_INT 1
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PPUSH
10136: CALL_OW 69
10140: ST_TO_ADDR
// if not tmp then
10141: LD_VAR 0 3
10145: NOT
10146: IFFALSE 10150
// exit ;
10148: GO 10236
// un := tmp [ rand ( 1 , tmp ) ] ;
10150: LD_ADDR_VAR 0 2
10154: PUSH
10155: LD_VAR 0 3
10159: PUSH
10160: LD_INT 1
10162: PPUSH
10163: LD_VAR 0 3
10167: PPUSH
10168: CALL_OW 12
10172: ARRAY
10173: ST_TO_ADDR
// if Crawls ( un ) then
10174: LD_VAR 0 2
10178: PPUSH
10179: CALL_OW 318
10183: IFFALSE 10194
// ComWalk ( un ) ;
10185: LD_VAR 0 2
10189: PPUSH
10190: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
10194: LD_VAR 0 2
10198: PPUSH
10199: LD_INT 9
10201: PPUSH
10202: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
10206: LD_INT 28
10208: PPUSH
10209: LD_OWVAR 2
10213: PPUSH
10214: LD_INT 2
10216: PPUSH
10217: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
10221: LD_INT 29
10223: PPUSH
10224: LD_OWVAR 2
10228: PPUSH
10229: LD_INT 2
10231: PPUSH
10232: CALL_OW 322
// end ;
10236: PPOPN 3
10238: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
10239: LD_EXP 1
10243: PUSH
10244: LD_EXP 44
10248: AND
10249: IFFALSE 10360
10251: GO 10253
10253: DISABLE
10254: LD_INT 0
10256: PPUSH
10257: PPUSH
10258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10259: LD_ADDR_VAR 0 3
10263: PUSH
10264: LD_INT 22
10266: PUSH
10267: LD_OWVAR 2
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 25
10278: PUSH
10279: LD_INT 1
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PPUSH
10290: CALL_OW 69
10294: ST_TO_ADDR
// if not tmp then
10295: LD_VAR 0 3
10299: NOT
10300: IFFALSE 10304
// exit ;
10302: GO 10360
// un := tmp [ rand ( 1 , tmp ) ] ;
10304: LD_ADDR_VAR 0 2
10308: PUSH
10309: LD_VAR 0 3
10313: PUSH
10314: LD_INT 1
10316: PPUSH
10317: LD_VAR 0 3
10321: PPUSH
10322: CALL_OW 12
10326: ARRAY
10327: ST_TO_ADDR
// if Crawls ( un ) then
10328: LD_VAR 0 2
10332: PPUSH
10333: CALL_OW 318
10337: IFFALSE 10348
// ComWalk ( un ) ;
10339: LD_VAR 0 2
10343: PPUSH
10344: CALL_OW 138
// SetClass ( un , class_mortar ) ;
10348: LD_VAR 0 2
10352: PPUSH
10353: LD_INT 8
10355: PPUSH
10356: CALL_OW 336
// end ;
10360: PPOPN 3
10362: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
10363: LD_EXP 1
10367: PUSH
10368: LD_EXP 45
10372: AND
10373: IFFALSE 10517
10375: GO 10377
10377: DISABLE
10378: LD_INT 0
10380: PPUSH
10381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
10382: LD_ADDR_VAR 0 2
10386: PUSH
10387: LD_INT 22
10389: PUSH
10390: LD_OWVAR 2
10394: PUSH
10395: EMPTY
10396: LIST
10397: LIST
10398: PUSH
10399: LD_INT 21
10401: PUSH
10402: LD_INT 2
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: PUSH
10409: LD_INT 2
10411: PUSH
10412: LD_INT 34
10414: PUSH
10415: LD_INT 12
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: LD_INT 34
10424: PUSH
10425: LD_INT 51
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PUSH
10432: LD_INT 34
10434: PUSH
10435: LD_INT 32
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: PUSH
10448: EMPTY
10449: LIST
10450: LIST
10451: LIST
10452: PPUSH
10453: CALL_OW 69
10457: ST_TO_ADDR
// if not tmp then
10458: LD_VAR 0 2
10462: NOT
10463: IFFALSE 10467
// exit ;
10465: GO 10517
// for i in tmp do
10467: LD_ADDR_VAR 0 1
10471: PUSH
10472: LD_VAR 0 2
10476: PUSH
10477: FOR_IN
10478: IFFALSE 10515
// if GetCargo ( i , mat_artifact ) = 0 then
10480: LD_VAR 0 1
10484: PPUSH
10485: LD_INT 4
10487: PPUSH
10488: CALL_OW 289
10492: PUSH
10493: LD_INT 0
10495: EQUAL
10496: IFFALSE 10513
// SetCargo ( i , mat_siberit , 100 ) ;
10498: LD_VAR 0 1
10502: PPUSH
10503: LD_INT 3
10505: PPUSH
10506: LD_INT 100
10508: PPUSH
10509: CALL_OW 290
10513: GO 10477
10515: POP
10516: POP
// end ;
10517: PPOPN 2
10519: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
10520: LD_EXP 1
10524: PUSH
10525: LD_EXP 46
10529: AND
10530: IFFALSE 10713
10532: GO 10534
10534: DISABLE
10535: LD_INT 0
10537: PPUSH
10538: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
10539: LD_ADDR_VAR 0 2
10543: PUSH
10544: LD_INT 22
10546: PUSH
10547: LD_OWVAR 2
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: PPUSH
10556: CALL_OW 69
10560: ST_TO_ADDR
// if not tmp then
10561: LD_VAR 0 2
10565: NOT
10566: IFFALSE 10570
// exit ;
10568: GO 10713
// for i := 1 to 2 do
10570: LD_ADDR_VAR 0 1
10574: PUSH
10575: DOUBLE
10576: LD_INT 1
10578: DEC
10579: ST_TO_ADDR
10580: LD_INT 2
10582: PUSH
10583: FOR_TO
10584: IFFALSE 10711
// begin uc_side := your_side ;
10586: LD_ADDR_OWVAR 20
10590: PUSH
10591: LD_OWVAR 2
10595: ST_TO_ADDR
// uc_nation := nation_american ;
10596: LD_ADDR_OWVAR 21
10600: PUSH
10601: LD_INT 1
10603: ST_TO_ADDR
// vc_chassis := us_morphling ;
10604: LD_ADDR_OWVAR 37
10608: PUSH
10609: LD_INT 5
10611: ST_TO_ADDR
// vc_engine := engine_siberite ;
10612: LD_ADDR_OWVAR 39
10616: PUSH
10617: LD_INT 3
10619: ST_TO_ADDR
// vc_control := control_computer ;
10620: LD_ADDR_OWVAR 38
10624: PUSH
10625: LD_INT 3
10627: ST_TO_ADDR
// vc_weapon := us_double_laser ;
10628: LD_ADDR_OWVAR 40
10632: PUSH
10633: LD_INT 10
10635: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
10636: LD_VAR 0 2
10640: PUSH
10641: LD_INT 1
10643: ARRAY
10644: PPUSH
10645: CALL_OW 310
10649: NOT
10650: IFFALSE 10697
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
10652: CALL_OW 45
10656: PPUSH
10657: LD_VAR 0 2
10661: PUSH
10662: LD_INT 1
10664: ARRAY
10665: PPUSH
10666: CALL_OW 250
10670: PPUSH
10671: LD_VAR 0 2
10675: PUSH
10676: LD_INT 1
10678: ARRAY
10679: PPUSH
10680: CALL_OW 251
10684: PPUSH
10685: LD_INT 12
10687: PPUSH
10688: LD_INT 1
10690: PPUSH
10691: CALL_OW 50
10695: GO 10709
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
10697: CALL_OW 45
10701: PPUSH
10702: LD_INT 1
10704: PPUSH
10705: CALL_OW 51
// end ;
10709: GO 10583
10711: POP
10712: POP
// end ;
10713: PPOPN 2
10715: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
10716: LD_EXP 1
10720: PUSH
10721: LD_EXP 47
10725: AND
10726: IFFALSE 10948
10728: GO 10730
10730: DISABLE
10731: LD_INT 0
10733: PPUSH
10734: PPUSH
10735: PPUSH
10736: PPUSH
10737: PPUSH
10738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10739: LD_ADDR_VAR 0 6
10743: PUSH
10744: LD_INT 22
10746: PUSH
10747: LD_OWVAR 2
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: PUSH
10756: LD_INT 21
10758: PUSH
10759: LD_INT 1
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: PUSH
10766: LD_INT 3
10768: PUSH
10769: LD_INT 23
10771: PUSH
10772: LD_INT 0
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: LIST
10787: PPUSH
10788: CALL_OW 69
10792: ST_TO_ADDR
// if not tmp then
10793: LD_VAR 0 6
10797: NOT
10798: IFFALSE 10802
// exit ;
10800: GO 10948
// s1 := rand ( 1 , 4 ) ;
10802: LD_ADDR_VAR 0 2
10806: PUSH
10807: LD_INT 1
10809: PPUSH
10810: LD_INT 4
10812: PPUSH
10813: CALL_OW 12
10817: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
10818: LD_ADDR_VAR 0 4
10822: PUSH
10823: LD_VAR 0 6
10827: PUSH
10828: LD_INT 1
10830: ARRAY
10831: PPUSH
10832: LD_VAR 0 2
10836: PPUSH
10837: CALL_OW 259
10841: ST_TO_ADDR
// if s1 = 1 then
10842: LD_VAR 0 2
10846: PUSH
10847: LD_INT 1
10849: EQUAL
10850: IFFALSE 10870
// s2 := rand ( 2 , 4 ) else
10852: LD_ADDR_VAR 0 3
10856: PUSH
10857: LD_INT 2
10859: PPUSH
10860: LD_INT 4
10862: PPUSH
10863: CALL_OW 12
10867: ST_TO_ADDR
10868: GO 10878
// s2 := 1 ;
10870: LD_ADDR_VAR 0 3
10874: PUSH
10875: LD_INT 1
10877: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
10878: LD_ADDR_VAR 0 5
10882: PUSH
10883: LD_VAR 0 6
10887: PUSH
10888: LD_INT 1
10890: ARRAY
10891: PPUSH
10892: LD_VAR 0 3
10896: PPUSH
10897: CALL_OW 259
10901: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
10902: LD_VAR 0 6
10906: PUSH
10907: LD_INT 1
10909: ARRAY
10910: PPUSH
10911: LD_VAR 0 2
10915: PPUSH
10916: LD_VAR 0 5
10920: PPUSH
10921: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
10925: LD_VAR 0 6
10929: PUSH
10930: LD_INT 1
10932: ARRAY
10933: PPUSH
10934: LD_VAR 0 3
10938: PPUSH
10939: LD_VAR 0 4
10943: PPUSH
10944: CALL_OW 237
// end ;
10948: PPOPN 6
10950: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
10951: LD_EXP 1
10955: PUSH
10956: LD_EXP 48
10960: AND
10961: IFFALSE 11040
10963: GO 10965
10965: DISABLE
10966: LD_INT 0
10968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
10969: LD_ADDR_VAR 0 1
10973: PUSH
10974: LD_INT 22
10976: PUSH
10977: LD_OWVAR 2
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: PUSH
10986: LD_INT 30
10988: PUSH
10989: LD_INT 3
10991: PUSH
10992: EMPTY
10993: LIST
10994: LIST
10995: PUSH
10996: EMPTY
10997: LIST
10998: LIST
10999: PPUSH
11000: CALL_OW 69
11004: ST_TO_ADDR
// if not tmp then
11005: LD_VAR 0 1
11009: NOT
11010: IFFALSE 11014
// exit ;
11012: GO 11040
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11014: LD_VAR 0 1
11018: PUSH
11019: LD_INT 1
11021: PPUSH
11022: LD_VAR 0 1
11026: PPUSH
11027: CALL_OW 12
11031: ARRAY
11032: PPUSH
11033: LD_INT 1
11035: PPUSH
11036: CALL_OW 234
// end ;
11040: PPOPN 1
11042: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
11043: LD_EXP 1
11047: PUSH
11048: LD_EXP 49
11052: AND
11053: IFFALSE 11165
11055: GO 11057
11057: DISABLE
11058: LD_INT 0
11060: PPUSH
11061: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
11062: LD_ADDR_VAR 0 2
11066: PUSH
11067: LD_INT 22
11069: PUSH
11070: LD_OWVAR 2
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: PUSH
11079: LD_INT 2
11081: PUSH
11082: LD_INT 30
11084: PUSH
11085: LD_INT 27
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: PUSH
11092: LD_INT 30
11094: PUSH
11095: LD_INT 26
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PUSH
11102: LD_INT 30
11104: PUSH
11105: LD_INT 28
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: PPUSH
11122: CALL_OW 69
11126: ST_TO_ADDR
// if not tmp then
11127: LD_VAR 0 2
11131: NOT
11132: IFFALSE 11136
// exit ;
11134: GO 11165
// for i in tmp do
11136: LD_ADDR_VAR 0 1
11140: PUSH
11141: LD_VAR 0 2
11145: PUSH
11146: FOR_IN
11147: IFFALSE 11163
// SetLives ( i , 1 ) ;
11149: LD_VAR 0 1
11153: PPUSH
11154: LD_INT 1
11156: PPUSH
11157: CALL_OW 234
11161: GO 11146
11163: POP
11164: POP
// end ;
11165: PPOPN 2
11167: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
11168: LD_EXP 1
11172: PUSH
11173: LD_EXP 50
11177: AND
11178: IFFALSE 11465
11180: GO 11182
11182: DISABLE
11183: LD_INT 0
11185: PPUSH
11186: PPUSH
11187: PPUSH
// begin i := rand ( 1 , 7 ) ;
11188: LD_ADDR_VAR 0 1
11192: PUSH
11193: LD_INT 1
11195: PPUSH
11196: LD_INT 7
11198: PPUSH
11199: CALL_OW 12
11203: ST_TO_ADDR
// case i of 1 :
11204: LD_VAR 0 1
11208: PUSH
11209: LD_INT 1
11211: DOUBLE
11212: EQUAL
11213: IFTRUE 11217
11215: GO 11227
11217: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
11218: LD_STRING earthquake(getX(game), 0, 32)
11220: PPUSH
11221: CALL_OW 559
11225: GO 11465
11227: LD_INT 2
11229: DOUBLE
11230: EQUAL
11231: IFTRUE 11235
11233: GO 11249
11235: POP
// begin ToLua ( displayStucuk(); ) ;
11236: LD_STRING displayStucuk();
11238: PPUSH
11239: CALL_OW 559
// ResetFog ;
11243: CALL_OW 335
// end ; 3 :
11247: GO 11465
11249: LD_INT 3
11251: DOUBLE
11252: EQUAL
11253: IFTRUE 11257
11255: GO 11361
11257: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11258: LD_ADDR_VAR 0 2
11262: PUSH
11263: LD_INT 22
11265: PUSH
11266: LD_OWVAR 2
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: PUSH
11275: LD_INT 25
11277: PUSH
11278: LD_INT 1
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: PPUSH
11289: CALL_OW 69
11293: ST_TO_ADDR
// if not tmp then
11294: LD_VAR 0 2
11298: NOT
11299: IFFALSE 11303
// exit ;
11301: GO 11465
// un := tmp [ rand ( 1 , tmp ) ] ;
11303: LD_ADDR_VAR 0 3
11307: PUSH
11308: LD_VAR 0 2
11312: PUSH
11313: LD_INT 1
11315: PPUSH
11316: LD_VAR 0 2
11320: PPUSH
11321: CALL_OW 12
11325: ARRAY
11326: ST_TO_ADDR
// if Crawls ( un ) then
11327: LD_VAR 0 3
11331: PPUSH
11332: CALL_OW 318
11336: IFFALSE 11347
// ComWalk ( un ) ;
11338: LD_VAR 0 3
11342: PPUSH
11343: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11347: LD_VAR 0 3
11351: PPUSH
11352: LD_INT 8
11354: PPUSH
11355: CALL_OW 336
// end ; 4 :
11359: GO 11465
11361: LD_INT 4
11363: DOUBLE
11364: EQUAL
11365: IFTRUE 11369
11367: GO 11443
11369: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11370: LD_ADDR_VAR 0 2
11374: PUSH
11375: LD_INT 22
11377: PUSH
11378: LD_OWVAR 2
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PUSH
11387: LD_INT 30
11389: PUSH
11390: LD_INT 29
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: PPUSH
11401: CALL_OW 69
11405: ST_TO_ADDR
// if not tmp then
11406: LD_VAR 0 2
11410: NOT
11411: IFFALSE 11415
// exit ;
11413: GO 11465
// CenterNowOnUnits ( tmp [ 1 ] ) ;
11415: LD_VAR 0 2
11419: PUSH
11420: LD_INT 1
11422: ARRAY
11423: PPUSH
11424: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
11428: LD_VAR 0 2
11432: PUSH
11433: LD_INT 1
11435: ARRAY
11436: PPUSH
11437: CALL_OW 65
// end ; 5 .. 7 :
11441: GO 11465
11443: LD_INT 5
11445: DOUBLE
11446: GREATEREQUAL
11447: IFFALSE 11455
11449: LD_INT 7
11451: DOUBLE
11452: LESSEQUAL
11453: IFTRUE 11457
11455: GO 11464
11457: POP
// StreamSibBomb ; end ;
11458: CALL 7702 0 0
11462: GO 11465
11464: POP
// end ;
11465: PPOPN 3
11467: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
11468: LD_EXP 1
11472: PUSH
11473: LD_EXP 51
11477: AND
11478: IFFALSE 11634
11480: GO 11482
11482: DISABLE
11483: LD_INT 0
11485: PPUSH
11486: PPUSH
11487: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
11488: LD_ADDR_VAR 0 2
11492: PUSH
11493: LD_INT 81
11495: PUSH
11496: LD_OWVAR 2
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PUSH
11505: LD_INT 2
11507: PUSH
11508: LD_INT 21
11510: PUSH
11511: LD_INT 1
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: PUSH
11518: LD_INT 21
11520: PUSH
11521: LD_INT 2
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: LIST
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: PPUSH
11537: CALL_OW 69
11541: ST_TO_ADDR
// if not tmp then
11542: LD_VAR 0 2
11546: NOT
11547: IFFALSE 11551
// exit ;
11549: GO 11634
// p := 0 ;
11551: LD_ADDR_VAR 0 3
11555: PUSH
11556: LD_INT 0
11558: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11559: LD_INT 35
11561: PPUSH
11562: CALL_OW 67
// p := p + 1 ;
11566: LD_ADDR_VAR 0 3
11570: PUSH
11571: LD_VAR 0 3
11575: PUSH
11576: LD_INT 1
11578: PLUS
11579: ST_TO_ADDR
// for i in tmp do
11580: LD_ADDR_VAR 0 1
11584: PUSH
11585: LD_VAR 0 2
11589: PUSH
11590: FOR_IN
11591: IFFALSE 11622
// if GetLives ( i ) < 1000 then
11593: LD_VAR 0 1
11597: PPUSH
11598: CALL_OW 256
11602: PUSH
11603: LD_INT 1000
11605: LESS
11606: IFFALSE 11620
// SetLives ( i , 1000 ) ;
11608: LD_VAR 0 1
11612: PPUSH
11613: LD_INT 1000
11615: PPUSH
11616: CALL_OW 234
11620: GO 11590
11622: POP
11623: POP
// until p > 20 ;
11624: LD_VAR 0 3
11628: PUSH
11629: LD_INT 20
11631: GREATER
11632: IFFALSE 11559
// end ;
11634: PPOPN 3
11636: END
// every 0 0$1 trigger StreamModeActive and sTime do
11637: LD_EXP 1
11641: PUSH
11642: LD_EXP 52
11646: AND
11647: IFFALSE 11682
11649: GO 11651
11651: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
11652: LD_INT 28
11654: PPUSH
11655: LD_OWVAR 2
11659: PPUSH
11660: LD_INT 2
11662: PPUSH
11663: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
11667: LD_INT 30
11669: PPUSH
11670: LD_OWVAR 2
11674: PPUSH
11675: LD_INT 2
11677: PPUSH
11678: CALL_OW 322
// end ;
11682: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
11683: LD_EXP 1
11687: PUSH
11688: LD_EXP 53
11692: AND
11693: IFFALSE 11814
11695: GO 11697
11697: DISABLE
11698: LD_INT 0
11700: PPUSH
11701: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11702: LD_ADDR_VAR 0 2
11706: PUSH
11707: LD_INT 22
11709: PUSH
11710: LD_OWVAR 2
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: PUSH
11719: LD_INT 21
11721: PUSH
11722: LD_INT 1
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PUSH
11729: LD_INT 3
11731: PUSH
11732: LD_INT 23
11734: PUSH
11735: LD_INT 0
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: LIST
11750: PPUSH
11751: CALL_OW 69
11755: ST_TO_ADDR
// if not tmp then
11756: LD_VAR 0 2
11760: NOT
11761: IFFALSE 11765
// exit ;
11763: GO 11814
// for i in tmp do
11765: LD_ADDR_VAR 0 1
11769: PUSH
11770: LD_VAR 0 2
11774: PUSH
11775: FOR_IN
11776: IFFALSE 11812
// begin if Crawls ( i ) then
11778: LD_VAR 0 1
11782: PPUSH
11783: CALL_OW 318
11787: IFFALSE 11798
// ComWalk ( i ) ;
11789: LD_VAR 0 1
11793: PPUSH
11794: CALL_OW 138
// SetClass ( i , 2 ) ;
11798: LD_VAR 0 1
11802: PPUSH
11803: LD_INT 2
11805: PPUSH
11806: CALL_OW 336
// end ;
11810: GO 11775
11812: POP
11813: POP
// end ;
11814: PPOPN 2
11816: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
11817: LD_EXP 1
11821: PUSH
11822: LD_EXP 54
11826: AND
11827: IFFALSE 12115
11829: GO 11831
11831: DISABLE
11832: LD_INT 0
11834: PPUSH
11835: PPUSH
11836: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
11837: LD_OWVAR 2
11841: PPUSH
11842: LD_INT 9
11844: PPUSH
11845: LD_INT 1
11847: PPUSH
11848: LD_INT 1
11850: PPUSH
11851: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
11855: LD_INT 9
11857: PPUSH
11858: LD_OWVAR 2
11862: PPUSH
11863: CALL_OW 343
// uc_side := 9 ;
11867: LD_ADDR_OWVAR 20
11871: PUSH
11872: LD_INT 9
11874: ST_TO_ADDR
// uc_nation := 2 ;
11875: LD_ADDR_OWVAR 21
11879: PUSH
11880: LD_INT 2
11882: ST_TO_ADDR
// hc_name := Dark Warrior ;
11883: LD_ADDR_OWVAR 26
11887: PUSH
11888: LD_STRING Dark Warrior
11890: ST_TO_ADDR
// hc_gallery :=  ;
11891: LD_ADDR_OWVAR 33
11895: PUSH
11896: LD_STRING 
11898: ST_TO_ADDR
// hc_noskilllimit := true ;
11899: LD_ADDR_OWVAR 76
11903: PUSH
11904: LD_INT 1
11906: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
11907: LD_ADDR_OWVAR 31
11911: PUSH
11912: LD_INT 30
11914: PUSH
11915: LD_INT 30
11917: PUSH
11918: LD_INT 30
11920: PUSH
11921: LD_INT 30
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: ST_TO_ADDR
// un := CreateHuman ;
11930: LD_ADDR_VAR 0 3
11934: PUSH
11935: CALL_OW 44
11939: ST_TO_ADDR
// hc_noskilllimit := false ;
11940: LD_ADDR_OWVAR 76
11944: PUSH
11945: LD_INT 0
11947: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11948: LD_VAR 0 3
11952: PPUSH
11953: LD_INT 1
11955: PPUSH
11956: CALL_OW 51
// ToLua ( playRanger() ) ;
11960: LD_STRING playRanger()
11962: PPUSH
11963: CALL_OW 559
// p := 0 ;
11967: LD_ADDR_VAR 0 2
11971: PUSH
11972: LD_INT 0
11974: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11975: LD_INT 35
11977: PPUSH
11978: CALL_OW 67
// p := p + 1 ;
11982: LD_ADDR_VAR 0 2
11986: PUSH
11987: LD_VAR 0 2
11991: PUSH
11992: LD_INT 1
11994: PLUS
11995: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
11996: LD_VAR 0 3
12000: PPUSH
12001: CALL_OW 256
12005: PUSH
12006: LD_INT 1000
12008: LESS
12009: IFFALSE 12023
// SetLives ( un , 1000 ) ;
12011: LD_VAR 0 3
12015: PPUSH
12016: LD_INT 1000
12018: PPUSH
12019: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
12023: LD_VAR 0 3
12027: PPUSH
12028: LD_INT 81
12030: PUSH
12031: LD_OWVAR 2
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PUSH
12040: LD_INT 91
12042: PUSH
12043: LD_VAR 0 3
12047: PUSH
12048: LD_INT 30
12050: PUSH
12051: EMPTY
12052: LIST
12053: LIST
12054: LIST
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: PPUSH
12060: CALL_OW 69
12064: PPUSH
12065: LD_VAR 0 3
12069: PPUSH
12070: CALL_OW 74
12074: PPUSH
12075: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
12079: LD_VAR 0 2
12083: PUSH
12084: LD_INT 80
12086: GREATER
12087: PUSH
12088: LD_VAR 0 3
12092: PPUSH
12093: CALL_OW 301
12097: OR
12098: IFFALSE 11975
// if un then
12100: LD_VAR 0 3
12104: IFFALSE 12115
// RemoveUnit ( un ) ;
12106: LD_VAR 0 3
12110: PPUSH
12111: CALL_OW 64
// end ;
12115: PPOPN 3
12117: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
12118: LD_EXP 55
12122: IFFALSE 12238
12124: GO 12126
12126: DISABLE
12127: LD_INT 0
12129: PPUSH
12130: PPUSH
12131: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12132: LD_ADDR_VAR 0 2
12136: PUSH
12137: LD_INT 81
12139: PUSH
12140: LD_OWVAR 2
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PUSH
12149: LD_INT 21
12151: PUSH
12152: LD_INT 1
12154: PUSH
12155: EMPTY
12156: LIST
12157: LIST
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PPUSH
12163: CALL_OW 69
12167: ST_TO_ADDR
// ToLua ( playComputer() ) ;
12168: LD_STRING playComputer()
12170: PPUSH
12171: CALL_OW 559
// if not tmp then
12175: LD_VAR 0 2
12179: NOT
12180: IFFALSE 12184
// exit ;
12182: GO 12238
// for i in tmp do
12184: LD_ADDR_VAR 0 1
12188: PUSH
12189: LD_VAR 0 2
12193: PUSH
12194: FOR_IN
12195: IFFALSE 12236
// for j := 1 to 4 do
12197: LD_ADDR_VAR 0 3
12201: PUSH
12202: DOUBLE
12203: LD_INT 1
12205: DEC
12206: ST_TO_ADDR
12207: LD_INT 4
12209: PUSH
12210: FOR_TO
12211: IFFALSE 12232
// SetSkill ( i , j , 10 ) ;
12213: LD_VAR 0 1
12217: PPUSH
12218: LD_VAR 0 3
12222: PPUSH
12223: LD_INT 10
12225: PPUSH
12226: CALL_OW 237
12230: GO 12210
12232: POP
12233: POP
12234: GO 12194
12236: POP
12237: POP
// end ;
12238: PPOPN 3
12240: END
// every 0 0$1 trigger s30 do var i , tmp ;
12241: LD_EXP 56
12245: IFFALSE 12314
12247: GO 12249
12249: DISABLE
12250: LD_INT 0
12252: PPUSH
12253: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12254: LD_ADDR_VAR 0 2
12258: PUSH
12259: LD_INT 22
12261: PUSH
12262: LD_OWVAR 2
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: PPUSH
12271: CALL_OW 69
12275: ST_TO_ADDR
// if not tmp then
12276: LD_VAR 0 2
12280: NOT
12281: IFFALSE 12285
// exit ;
12283: GO 12314
// for i in tmp do
12285: LD_ADDR_VAR 0 1
12289: PUSH
12290: LD_VAR 0 2
12294: PUSH
12295: FOR_IN
12296: IFFALSE 12312
// SetLives ( i , 300 ) ;
12298: LD_VAR 0 1
12302: PPUSH
12303: LD_INT 300
12305: PPUSH
12306: CALL_OW 234
12310: GO 12295
12312: POP
12313: POP
// end ;
12314: PPOPN 2
12316: END
// every 0 0$1 trigger s60 do var i , tmp ;
12317: LD_EXP 57
12321: IFFALSE 12390
12323: GO 12325
12325: DISABLE
12326: LD_INT 0
12328: PPUSH
12329: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12330: LD_ADDR_VAR 0 2
12334: PUSH
12335: LD_INT 22
12337: PUSH
12338: LD_OWVAR 2
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: PPUSH
12347: CALL_OW 69
12351: ST_TO_ADDR
// if not tmp then
12352: LD_VAR 0 2
12356: NOT
12357: IFFALSE 12361
// exit ;
12359: GO 12390
// for i in tmp do
12361: LD_ADDR_VAR 0 1
12365: PUSH
12366: LD_VAR 0 2
12370: PUSH
12371: FOR_IN
12372: IFFALSE 12388
// SetLives ( i , 600 ) ;
12374: LD_VAR 0 1
12378: PPUSH
12379: LD_INT 600
12381: PPUSH
12382: CALL_OW 234
12386: GO 12371
12388: POP
12389: POP
// end ;
12390: PPOPN 2
12392: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12393: LD_INT 0
12395: PPUSH
// case cmd of 301 :
12396: LD_VAR 0 1
12400: PUSH
12401: LD_INT 301
12403: DOUBLE
12404: EQUAL
12405: IFTRUE 12409
12407: GO 12441
12409: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
12410: LD_VAR 0 6
12414: PPUSH
12415: LD_VAR 0 7
12419: PPUSH
12420: LD_VAR 0 8
12424: PPUSH
12425: LD_VAR 0 4
12429: PPUSH
12430: LD_VAR 0 5
12434: PPUSH
12435: CALL 13642 0 5
12439: GO 12562
12441: LD_INT 302
12443: DOUBLE
12444: EQUAL
12445: IFTRUE 12449
12447: GO 12486
12449: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
12450: LD_VAR 0 6
12454: PPUSH
12455: LD_VAR 0 7
12459: PPUSH
12460: LD_VAR 0 8
12464: PPUSH
12465: LD_VAR 0 9
12469: PPUSH
12470: LD_VAR 0 4
12474: PPUSH
12475: LD_VAR 0 5
12479: PPUSH
12480: CALL 13733 0 6
12484: GO 12562
12486: LD_INT 303
12488: DOUBLE
12489: EQUAL
12490: IFTRUE 12494
12492: GO 12531
12494: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
12495: LD_VAR 0 6
12499: PPUSH
12500: LD_VAR 0 7
12504: PPUSH
12505: LD_VAR 0 8
12509: PPUSH
12510: LD_VAR 0 9
12514: PPUSH
12515: LD_VAR 0 4
12519: PPUSH
12520: LD_VAR 0 5
12524: PPUSH
12525: CALL 12567 0 6
12529: GO 12562
12531: LD_INT 304
12533: DOUBLE
12534: EQUAL
12535: IFTRUE 12539
12537: GO 12561
12539: POP
// hHackTeleport ( unit , x , y ) ; end ;
12540: LD_VAR 0 2
12544: PPUSH
12545: LD_VAR 0 4
12549: PPUSH
12550: LD_VAR 0 5
12554: PPUSH
12555: CALL 14326 0 3
12559: GO 12562
12561: POP
// end ;
12562: LD_VAR 0 12
12566: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
12567: LD_INT 0
12569: PPUSH
12570: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
12571: LD_VAR 0 1
12575: PUSH
12576: LD_INT 1
12578: LESS
12579: PUSH
12580: LD_VAR 0 1
12584: PUSH
12585: LD_INT 3
12587: GREATER
12588: OR
12589: PUSH
12590: LD_VAR 0 5
12594: PPUSH
12595: LD_VAR 0 6
12599: PPUSH
12600: CALL_OW 428
12604: OR
12605: IFFALSE 12609
// exit ;
12607: GO 13329
// uc_side := your_side ;
12609: LD_ADDR_OWVAR 20
12613: PUSH
12614: LD_OWVAR 2
12618: ST_TO_ADDR
// uc_nation := nation ;
12619: LD_ADDR_OWVAR 21
12623: PUSH
12624: LD_VAR 0 1
12628: ST_TO_ADDR
// bc_level = 1 ;
12629: LD_ADDR_OWVAR 43
12633: PUSH
12634: LD_INT 1
12636: ST_TO_ADDR
// case btype of 1 :
12637: LD_VAR 0 2
12641: PUSH
12642: LD_INT 1
12644: DOUBLE
12645: EQUAL
12646: IFTRUE 12650
12648: GO 12661
12650: POP
// bc_type := b_depot ; 2 :
12651: LD_ADDR_OWVAR 42
12655: PUSH
12656: LD_INT 0
12658: ST_TO_ADDR
12659: GO 13273
12661: LD_INT 2
12663: DOUBLE
12664: EQUAL
12665: IFTRUE 12669
12667: GO 12680
12669: POP
// bc_type := b_warehouse ; 3 :
12670: LD_ADDR_OWVAR 42
12674: PUSH
12675: LD_INT 1
12677: ST_TO_ADDR
12678: GO 13273
12680: LD_INT 3
12682: DOUBLE
12683: EQUAL
12684: IFTRUE 12688
12686: GO 12699
12688: POP
// bc_type := b_lab ; 4 .. 9 :
12689: LD_ADDR_OWVAR 42
12693: PUSH
12694: LD_INT 6
12696: ST_TO_ADDR
12697: GO 13273
12699: LD_INT 4
12701: DOUBLE
12702: GREATEREQUAL
12703: IFFALSE 12711
12705: LD_INT 9
12707: DOUBLE
12708: LESSEQUAL
12709: IFTRUE 12713
12711: GO 12765
12713: POP
// begin bc_type := b_lab_half ;
12714: LD_ADDR_OWVAR 42
12718: PUSH
12719: LD_INT 7
12721: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
12722: LD_ADDR_OWVAR 44
12726: PUSH
12727: LD_INT 10
12729: PUSH
12730: LD_INT 11
12732: PUSH
12733: LD_INT 12
12735: PUSH
12736: LD_INT 15
12738: PUSH
12739: LD_INT 14
12741: PUSH
12742: LD_INT 13
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: PUSH
12753: LD_VAR 0 2
12757: PUSH
12758: LD_INT 3
12760: MINUS
12761: ARRAY
12762: ST_TO_ADDR
// end ; 10 .. 13 :
12763: GO 13273
12765: LD_INT 10
12767: DOUBLE
12768: GREATEREQUAL
12769: IFFALSE 12777
12771: LD_INT 13
12773: DOUBLE
12774: LESSEQUAL
12775: IFTRUE 12779
12777: GO 12856
12779: POP
// begin bc_type := b_lab_full ;
12780: LD_ADDR_OWVAR 42
12784: PUSH
12785: LD_INT 8
12787: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
12788: LD_ADDR_OWVAR 44
12792: PUSH
12793: LD_INT 10
12795: PUSH
12796: LD_INT 12
12798: PUSH
12799: LD_INT 14
12801: PUSH
12802: LD_INT 13
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: PUSH
12811: LD_VAR 0 2
12815: PUSH
12816: LD_INT 9
12818: MINUS
12819: ARRAY
12820: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
12821: LD_ADDR_OWVAR 45
12825: PUSH
12826: LD_INT 11
12828: PUSH
12829: LD_INT 15
12831: PUSH
12832: LD_INT 12
12834: PUSH
12835: LD_INT 15
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: PUSH
12844: LD_VAR 0 2
12848: PUSH
12849: LD_INT 9
12851: MINUS
12852: ARRAY
12853: ST_TO_ADDR
// end ; 14 :
12854: GO 13273
12856: LD_INT 14
12858: DOUBLE
12859: EQUAL
12860: IFTRUE 12864
12862: GO 12875
12864: POP
// bc_type := b_workshop ; 15 :
12865: LD_ADDR_OWVAR 42
12869: PUSH
12870: LD_INT 2
12872: ST_TO_ADDR
12873: GO 13273
12875: LD_INT 15
12877: DOUBLE
12878: EQUAL
12879: IFTRUE 12883
12881: GO 12894
12883: POP
// bc_type := b_factory ; 16 :
12884: LD_ADDR_OWVAR 42
12888: PUSH
12889: LD_INT 3
12891: ST_TO_ADDR
12892: GO 13273
12894: LD_INT 16
12896: DOUBLE
12897: EQUAL
12898: IFTRUE 12902
12900: GO 12913
12902: POP
// bc_type := b_ext_gun ; 17 :
12903: LD_ADDR_OWVAR 42
12907: PUSH
12908: LD_INT 17
12910: ST_TO_ADDR
12911: GO 13273
12913: LD_INT 17
12915: DOUBLE
12916: EQUAL
12917: IFTRUE 12921
12919: GO 12949
12921: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
12922: LD_ADDR_OWVAR 42
12926: PUSH
12927: LD_INT 19
12929: PUSH
12930: LD_INT 23
12932: PUSH
12933: LD_INT 19
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: LIST
12940: PUSH
12941: LD_VAR 0 1
12945: ARRAY
12946: ST_TO_ADDR
12947: GO 13273
12949: LD_INT 18
12951: DOUBLE
12952: EQUAL
12953: IFTRUE 12957
12955: GO 12968
12957: POP
// bc_type := b_ext_radar ; 19 :
12958: LD_ADDR_OWVAR 42
12962: PUSH
12963: LD_INT 20
12965: ST_TO_ADDR
12966: GO 13273
12968: LD_INT 19
12970: DOUBLE
12971: EQUAL
12972: IFTRUE 12976
12974: GO 12987
12976: POP
// bc_type := b_ext_radio ; 20 :
12977: LD_ADDR_OWVAR 42
12981: PUSH
12982: LD_INT 22
12984: ST_TO_ADDR
12985: GO 13273
12987: LD_INT 20
12989: DOUBLE
12990: EQUAL
12991: IFTRUE 12995
12993: GO 13006
12995: POP
// bc_type := b_ext_siberium ; 21 :
12996: LD_ADDR_OWVAR 42
13000: PUSH
13001: LD_INT 21
13003: ST_TO_ADDR
13004: GO 13273
13006: LD_INT 21
13008: DOUBLE
13009: EQUAL
13010: IFTRUE 13014
13012: GO 13025
13014: POP
// bc_type := b_ext_computer ; 22 :
13015: LD_ADDR_OWVAR 42
13019: PUSH
13020: LD_INT 24
13022: ST_TO_ADDR
13023: GO 13273
13025: LD_INT 22
13027: DOUBLE
13028: EQUAL
13029: IFTRUE 13033
13031: GO 13044
13033: POP
// bc_type := b_ext_track ; 23 :
13034: LD_ADDR_OWVAR 42
13038: PUSH
13039: LD_INT 16
13041: ST_TO_ADDR
13042: GO 13273
13044: LD_INT 23
13046: DOUBLE
13047: EQUAL
13048: IFTRUE 13052
13050: GO 13063
13052: POP
// bc_type := b_ext_laser ; 24 :
13053: LD_ADDR_OWVAR 42
13057: PUSH
13058: LD_INT 25
13060: ST_TO_ADDR
13061: GO 13273
13063: LD_INT 24
13065: DOUBLE
13066: EQUAL
13067: IFTRUE 13071
13069: GO 13082
13071: POP
// bc_type := b_control_tower ; 25 :
13072: LD_ADDR_OWVAR 42
13076: PUSH
13077: LD_INT 36
13079: ST_TO_ADDR
13080: GO 13273
13082: LD_INT 25
13084: DOUBLE
13085: EQUAL
13086: IFTRUE 13090
13088: GO 13101
13090: POP
// bc_type := b_breastwork ; 26 :
13091: LD_ADDR_OWVAR 42
13095: PUSH
13096: LD_INT 31
13098: ST_TO_ADDR
13099: GO 13273
13101: LD_INT 26
13103: DOUBLE
13104: EQUAL
13105: IFTRUE 13109
13107: GO 13120
13109: POP
// bc_type := b_bunker ; 27 :
13110: LD_ADDR_OWVAR 42
13114: PUSH
13115: LD_INT 32
13117: ST_TO_ADDR
13118: GO 13273
13120: LD_INT 27
13122: DOUBLE
13123: EQUAL
13124: IFTRUE 13128
13126: GO 13139
13128: POP
// bc_type := b_turret ; 28 :
13129: LD_ADDR_OWVAR 42
13133: PUSH
13134: LD_INT 33
13136: ST_TO_ADDR
13137: GO 13273
13139: LD_INT 28
13141: DOUBLE
13142: EQUAL
13143: IFTRUE 13147
13145: GO 13158
13147: POP
// bc_type := b_armoury ; 29 :
13148: LD_ADDR_OWVAR 42
13152: PUSH
13153: LD_INT 4
13155: ST_TO_ADDR
13156: GO 13273
13158: LD_INT 29
13160: DOUBLE
13161: EQUAL
13162: IFTRUE 13166
13164: GO 13177
13166: POP
// bc_type := b_barracks ; 30 :
13167: LD_ADDR_OWVAR 42
13171: PUSH
13172: LD_INT 5
13174: ST_TO_ADDR
13175: GO 13273
13177: LD_INT 30
13179: DOUBLE
13180: EQUAL
13181: IFTRUE 13185
13183: GO 13196
13185: POP
// bc_type := b_solar_power ; 31 :
13186: LD_ADDR_OWVAR 42
13190: PUSH
13191: LD_INT 27
13193: ST_TO_ADDR
13194: GO 13273
13196: LD_INT 31
13198: DOUBLE
13199: EQUAL
13200: IFTRUE 13204
13202: GO 13215
13204: POP
// bc_type := b_oil_power ; 32 :
13205: LD_ADDR_OWVAR 42
13209: PUSH
13210: LD_INT 26
13212: ST_TO_ADDR
13213: GO 13273
13215: LD_INT 32
13217: DOUBLE
13218: EQUAL
13219: IFTRUE 13223
13221: GO 13234
13223: POP
// bc_type := b_siberite_power ; 33 :
13224: LD_ADDR_OWVAR 42
13228: PUSH
13229: LD_INT 28
13231: ST_TO_ADDR
13232: GO 13273
13234: LD_INT 33
13236: DOUBLE
13237: EQUAL
13238: IFTRUE 13242
13240: GO 13253
13242: POP
// bc_type := b_oil_mine ; 34 :
13243: LD_ADDR_OWVAR 42
13247: PUSH
13248: LD_INT 29
13250: ST_TO_ADDR
13251: GO 13273
13253: LD_INT 34
13255: DOUBLE
13256: EQUAL
13257: IFTRUE 13261
13259: GO 13272
13261: POP
// bc_type := b_siberite_mine ; end ;
13262: LD_ADDR_OWVAR 42
13266: PUSH
13267: LD_INT 30
13269: ST_TO_ADDR
13270: GO 13273
13272: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
13273: LD_ADDR_VAR 0 8
13277: PUSH
13278: LD_VAR 0 5
13282: PPUSH
13283: LD_VAR 0 6
13287: PPUSH
13288: LD_VAR 0 3
13292: PPUSH
13293: CALL_OW 47
13297: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
13298: LD_OWVAR 42
13302: PUSH
13303: LD_INT 32
13305: PUSH
13306: LD_INT 33
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: IN
13313: IFFALSE 13329
// PlaceWeaponTurret ( b , weapon ) ;
13315: LD_VAR 0 8
13319: PPUSH
13320: LD_VAR 0 4
13324: PPUSH
13325: CALL_OW 431
// end ;
13329: LD_VAR 0 7
13333: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
13334: LD_INT 0
13336: PPUSH
13337: PPUSH
13338: PPUSH
13339: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13340: LD_ADDR_VAR 0 4
13344: PUSH
13345: LD_INT 22
13347: PUSH
13348: LD_OWVAR 2
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PUSH
13357: LD_INT 2
13359: PUSH
13360: LD_INT 30
13362: PUSH
13363: LD_INT 0
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: PUSH
13370: LD_INT 30
13372: PUSH
13373: LD_INT 1
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: LIST
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PPUSH
13389: CALL_OW 69
13393: ST_TO_ADDR
// if not tmp then
13394: LD_VAR 0 4
13398: NOT
13399: IFFALSE 13403
// exit ;
13401: GO 13462
// for i in tmp do
13403: LD_ADDR_VAR 0 2
13407: PUSH
13408: LD_VAR 0 4
13412: PUSH
13413: FOR_IN
13414: IFFALSE 13460
// for j = 1 to 3 do
13416: LD_ADDR_VAR 0 3
13420: PUSH
13421: DOUBLE
13422: LD_INT 1
13424: DEC
13425: ST_TO_ADDR
13426: LD_INT 3
13428: PUSH
13429: FOR_TO
13430: IFFALSE 13456
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
13432: LD_VAR 0 2
13436: PPUSH
13437: CALL_OW 274
13441: PPUSH
13442: LD_VAR 0 3
13446: PPUSH
13447: LD_INT 99999
13449: PPUSH
13450: CALL_OW 277
13454: GO 13429
13456: POP
13457: POP
13458: GO 13413
13460: POP
13461: POP
// end ;
13462: LD_VAR 0 1
13466: RET
// export function hHackSetLevel10 ; var i , j ; begin
13467: LD_INT 0
13469: PPUSH
13470: PPUSH
13471: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
13472: LD_ADDR_VAR 0 2
13476: PUSH
13477: LD_INT 21
13479: PUSH
13480: LD_INT 1
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: PPUSH
13487: CALL_OW 69
13491: PUSH
13492: FOR_IN
13493: IFFALSE 13545
// if IsSelected ( i ) then
13495: LD_VAR 0 2
13499: PPUSH
13500: CALL_OW 306
13504: IFFALSE 13543
// begin for j := 1 to 4 do
13506: LD_ADDR_VAR 0 3
13510: PUSH
13511: DOUBLE
13512: LD_INT 1
13514: DEC
13515: ST_TO_ADDR
13516: LD_INT 4
13518: PUSH
13519: FOR_TO
13520: IFFALSE 13541
// SetSkill ( i , j , 10 ) ;
13522: LD_VAR 0 2
13526: PPUSH
13527: LD_VAR 0 3
13531: PPUSH
13532: LD_INT 10
13534: PPUSH
13535: CALL_OW 237
13539: GO 13519
13541: POP
13542: POP
// end ;
13543: GO 13492
13545: POP
13546: POP
// end ;
13547: LD_VAR 0 1
13551: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
13552: LD_INT 0
13554: PPUSH
13555: PPUSH
13556: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
13557: LD_ADDR_VAR 0 2
13561: PUSH
13562: LD_INT 22
13564: PUSH
13565: LD_OWVAR 2
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 21
13576: PUSH
13577: LD_INT 1
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PPUSH
13588: CALL_OW 69
13592: PUSH
13593: FOR_IN
13594: IFFALSE 13635
// begin for j := 1 to 4 do
13596: LD_ADDR_VAR 0 3
13600: PUSH
13601: DOUBLE
13602: LD_INT 1
13604: DEC
13605: ST_TO_ADDR
13606: LD_INT 4
13608: PUSH
13609: FOR_TO
13610: IFFALSE 13631
// SetSkill ( i , j , 10 ) ;
13612: LD_VAR 0 2
13616: PPUSH
13617: LD_VAR 0 3
13621: PPUSH
13622: LD_INT 10
13624: PPUSH
13625: CALL_OW 237
13629: GO 13609
13631: POP
13632: POP
// end ;
13633: GO 13593
13635: POP
13636: POP
// end ;
13637: LD_VAR 0 1
13641: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
13642: LD_INT 0
13644: PPUSH
// uc_side := your_side ;
13645: LD_ADDR_OWVAR 20
13649: PUSH
13650: LD_OWVAR 2
13654: ST_TO_ADDR
// uc_nation := nation ;
13655: LD_ADDR_OWVAR 21
13659: PUSH
13660: LD_VAR 0 1
13664: ST_TO_ADDR
// InitHc ;
13665: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
13669: LD_INT 0
13671: PPUSH
13672: LD_VAR 0 2
13676: PPUSH
13677: LD_VAR 0 3
13681: PPUSH
13682: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
13686: LD_VAR 0 4
13690: PPUSH
13691: LD_VAR 0 5
13695: PPUSH
13696: CALL_OW 428
13700: PUSH
13701: LD_INT 0
13703: EQUAL
13704: IFFALSE 13728
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
13706: CALL_OW 44
13710: PPUSH
13711: LD_VAR 0 4
13715: PPUSH
13716: LD_VAR 0 5
13720: PPUSH
13721: LD_INT 1
13723: PPUSH
13724: CALL_OW 48
// end ;
13728: LD_VAR 0 6
13732: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
13733: LD_INT 0
13735: PPUSH
13736: PPUSH
// uc_side := your_side ;
13737: LD_ADDR_OWVAR 20
13741: PUSH
13742: LD_OWVAR 2
13746: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
13747: LD_VAR 0 1
13751: PUSH
13752: LD_INT 1
13754: PUSH
13755: LD_INT 2
13757: PUSH
13758: LD_INT 3
13760: PUSH
13761: LD_INT 4
13763: PUSH
13764: LD_INT 5
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: IN
13774: IFFALSE 13786
// uc_nation := nation_american else
13776: LD_ADDR_OWVAR 21
13780: PUSH
13781: LD_INT 1
13783: ST_TO_ADDR
13784: GO 13829
// if chassis in [ 11 , 12 , 13 , 14 ] then
13786: LD_VAR 0 1
13790: PUSH
13791: LD_INT 11
13793: PUSH
13794: LD_INT 12
13796: PUSH
13797: LD_INT 13
13799: PUSH
13800: LD_INT 14
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: IN
13809: IFFALSE 13821
// uc_nation := nation_arabian else
13811: LD_ADDR_OWVAR 21
13815: PUSH
13816: LD_INT 2
13818: ST_TO_ADDR
13819: GO 13829
// uc_nation := nation_russian ;
13821: LD_ADDR_OWVAR 21
13825: PUSH
13826: LD_INT 3
13828: ST_TO_ADDR
// vc_chassis := chassis ;
13829: LD_ADDR_OWVAR 37
13833: PUSH
13834: LD_VAR 0 1
13838: ST_TO_ADDR
// vc_engine := engine ;
13839: LD_ADDR_OWVAR 39
13843: PUSH
13844: LD_VAR 0 2
13848: ST_TO_ADDR
// vc_control := control ;
13849: LD_ADDR_OWVAR 38
13853: PUSH
13854: LD_VAR 0 3
13858: ST_TO_ADDR
// vc_weapon := weapon ;
13859: LD_ADDR_OWVAR 40
13863: PUSH
13864: LD_VAR 0 4
13868: ST_TO_ADDR
// un := CreateVehicle ;
13869: LD_ADDR_VAR 0 8
13873: PUSH
13874: CALL_OW 45
13878: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
13879: LD_VAR 0 8
13883: PPUSH
13884: LD_INT 0
13886: PPUSH
13887: LD_INT 5
13889: PPUSH
13890: CALL_OW 12
13894: PPUSH
13895: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
13899: LD_VAR 0 8
13903: PPUSH
13904: LD_VAR 0 5
13908: PPUSH
13909: LD_VAR 0 6
13913: PPUSH
13914: LD_INT 1
13916: PPUSH
13917: CALL_OW 48
// end ;
13921: LD_VAR 0 7
13925: RET
// export hInvincible ; every 1 do
13926: GO 13928
13928: DISABLE
// hInvincible := [ ] ;
13929: LD_ADDR_EXP 58
13933: PUSH
13934: EMPTY
13935: ST_TO_ADDR
13936: END
// every 10 do var i ;
13937: GO 13939
13939: DISABLE
13940: LD_INT 0
13942: PPUSH
// begin enable ;
13943: ENABLE
// if not hInvincible then
13944: LD_EXP 58
13948: NOT
13949: IFFALSE 13953
// exit ;
13951: GO 13997
// for i in hInvincible do
13953: LD_ADDR_VAR 0 1
13957: PUSH
13958: LD_EXP 58
13962: PUSH
13963: FOR_IN
13964: IFFALSE 13995
// if GetLives ( i ) < 1000 then
13966: LD_VAR 0 1
13970: PPUSH
13971: CALL_OW 256
13975: PUSH
13976: LD_INT 1000
13978: LESS
13979: IFFALSE 13993
// SetLives ( i , 1000 ) ;
13981: LD_VAR 0 1
13985: PPUSH
13986: LD_INT 1000
13988: PPUSH
13989: CALL_OW 234
13993: GO 13963
13995: POP
13996: POP
// end ;
13997: PPOPN 1
13999: END
// export function hHackInvincible ; var i ; begin
14000: LD_INT 0
14002: PPUSH
14003: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
14004: LD_ADDR_VAR 0 2
14008: PUSH
14009: LD_INT 2
14011: PUSH
14012: LD_INT 21
14014: PUSH
14015: LD_INT 1
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: PUSH
14022: LD_INT 21
14024: PUSH
14025: LD_INT 2
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: PUSH
14032: EMPTY
14033: LIST
14034: LIST
14035: LIST
14036: PPUSH
14037: CALL_OW 69
14041: PUSH
14042: FOR_IN
14043: IFFALSE 14104
// if IsSelected ( i ) then
14045: LD_VAR 0 2
14049: PPUSH
14050: CALL_OW 306
14054: IFFALSE 14102
// begin if i in hInvincible then
14056: LD_VAR 0 2
14060: PUSH
14061: LD_EXP 58
14065: IN
14066: IFFALSE 14086
// hInvincible := hInvincible diff i else
14068: LD_ADDR_EXP 58
14072: PUSH
14073: LD_EXP 58
14077: PUSH
14078: LD_VAR 0 2
14082: DIFF
14083: ST_TO_ADDR
14084: GO 14102
// hInvincible := hInvincible union i ;
14086: LD_ADDR_EXP 58
14090: PUSH
14091: LD_EXP 58
14095: PUSH
14096: LD_VAR 0 2
14100: UNION
14101: ST_TO_ADDR
// end ;
14102: GO 14042
14104: POP
14105: POP
// end ;
14106: LD_VAR 0 1
14110: RET
// export function hHackInvisible ; var i , j ; begin
14111: LD_INT 0
14113: PPUSH
14114: PPUSH
14115: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14116: LD_ADDR_VAR 0 2
14120: PUSH
14121: LD_INT 21
14123: PUSH
14124: LD_INT 1
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: PPUSH
14131: CALL_OW 69
14135: PUSH
14136: FOR_IN
14137: IFFALSE 14161
// if IsSelected ( i ) then
14139: LD_VAR 0 2
14143: PPUSH
14144: CALL_OW 306
14148: IFFALSE 14159
// ComForceInvisible ( i ) ;
14150: LD_VAR 0 2
14154: PPUSH
14155: CALL_OW 496
14159: GO 14136
14161: POP
14162: POP
// end ;
14163: LD_VAR 0 1
14167: RET
// export function hHackChangeYourSide ; begin
14168: LD_INT 0
14170: PPUSH
// if your_side = 8 then
14171: LD_OWVAR 2
14175: PUSH
14176: LD_INT 8
14178: EQUAL
14179: IFFALSE 14191
// your_side := 0 else
14181: LD_ADDR_OWVAR 2
14185: PUSH
14186: LD_INT 0
14188: ST_TO_ADDR
14189: GO 14205
// your_side := your_side + 1 ;
14191: LD_ADDR_OWVAR 2
14195: PUSH
14196: LD_OWVAR 2
14200: PUSH
14201: LD_INT 1
14203: PLUS
14204: ST_TO_ADDR
// end ;
14205: LD_VAR 0 1
14209: RET
// export function hHackChangeUnitSide ; var i , j ; begin
14210: LD_INT 0
14212: PPUSH
14213: PPUSH
14214: PPUSH
// for i in all_units do
14215: LD_ADDR_VAR 0 2
14219: PUSH
14220: LD_OWVAR 3
14224: PUSH
14225: FOR_IN
14226: IFFALSE 14304
// if IsSelected ( i ) then
14228: LD_VAR 0 2
14232: PPUSH
14233: CALL_OW 306
14237: IFFALSE 14302
// begin j := GetSide ( i ) ;
14239: LD_ADDR_VAR 0 3
14243: PUSH
14244: LD_VAR 0 2
14248: PPUSH
14249: CALL_OW 255
14253: ST_TO_ADDR
// if j = 8 then
14254: LD_VAR 0 3
14258: PUSH
14259: LD_INT 8
14261: EQUAL
14262: IFFALSE 14274
// j := 0 else
14264: LD_ADDR_VAR 0 3
14268: PUSH
14269: LD_INT 0
14271: ST_TO_ADDR
14272: GO 14288
// j := j + 1 ;
14274: LD_ADDR_VAR 0 3
14278: PUSH
14279: LD_VAR 0 3
14283: PUSH
14284: LD_INT 1
14286: PLUS
14287: ST_TO_ADDR
// SetSide ( i , j ) ;
14288: LD_VAR 0 2
14292: PPUSH
14293: LD_VAR 0 3
14297: PPUSH
14298: CALL_OW 235
// end ;
14302: GO 14225
14304: POP
14305: POP
// end ;
14306: LD_VAR 0 1
14310: RET
// export function hHackFog ; begin
14311: LD_INT 0
14313: PPUSH
// FogOff ( true ) ;
14314: LD_INT 1
14316: PPUSH
14317: CALL_OW 344
// end ;
14321: LD_VAR 0 1
14325: RET
// export function hHackTeleport ( unit , x , y ) ; begin
14326: LD_INT 0
14328: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
14329: LD_VAR 0 1
14333: PPUSH
14334: LD_VAR 0 2
14338: PPUSH
14339: LD_VAR 0 3
14343: PPUSH
14344: LD_INT 1
14346: PPUSH
14347: LD_INT 1
14349: PPUSH
14350: CALL_OW 483
// CenterOnXY ( x , y ) ;
14354: LD_VAR 0 2
14358: PPUSH
14359: LD_VAR 0 3
14363: PPUSH
14364: CALL_OW 84
// end ; end_of_file
14368: LD_VAR 0 4
14372: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
14373: LD_INT 0
14375: PPUSH
14376: PPUSH
14377: PPUSH
14378: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
14379: LD_VAR 0 1
14383: PPUSH
14384: CALL_OW 264
14388: PUSH
14389: LD_EXP 74
14393: EQUAL
14394: IFFALSE 14466
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
14396: LD_INT 68
14398: PPUSH
14399: LD_VAR 0 1
14403: PPUSH
14404: CALL_OW 255
14408: PPUSH
14409: CALL_OW 321
14413: PUSH
14414: LD_INT 2
14416: EQUAL
14417: IFFALSE 14429
// eff := 70 else
14419: LD_ADDR_VAR 0 4
14423: PUSH
14424: LD_INT 70
14426: ST_TO_ADDR
14427: GO 14437
// eff := 30 ;
14429: LD_ADDR_VAR 0 4
14433: PUSH
14434: LD_INT 30
14436: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
14437: LD_VAR 0 1
14441: PPUSH
14442: CALL_OW 250
14446: PPUSH
14447: LD_VAR 0 1
14451: PPUSH
14452: CALL_OW 251
14456: PPUSH
14457: LD_VAR 0 4
14461: PPUSH
14462: CALL_OW 495
// end ; end ;
14466: LD_VAR 0 2
14470: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
14471: LD_INT 0
14473: PPUSH
// end ;
14474: LD_VAR 0 4
14478: RET
// export function SOS_Command ( cmd ) ; begin
14479: LD_INT 0
14481: PPUSH
// end ;
14482: LD_VAR 0 2
14486: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
14487: LD_INT 0
14489: PPUSH
// end ;
14490: LD_VAR 0 6
14494: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
14495: LD_INT 0
14497: PPUSH
14498: PPUSH
// if not vehicle or not factory then
14499: LD_VAR 0 1
14503: NOT
14504: PUSH
14505: LD_VAR 0 2
14509: NOT
14510: OR
14511: IFFALSE 14515
// exit ;
14513: GO 14746
// if factoryWaypoints >= factory then
14515: LD_EXP 59
14519: PUSH
14520: LD_VAR 0 2
14524: GREATEREQUAL
14525: IFFALSE 14746
// if factoryWaypoints [ factory ] then
14527: LD_EXP 59
14531: PUSH
14532: LD_VAR 0 2
14536: ARRAY
14537: IFFALSE 14746
// begin if GetControl ( vehicle ) = control_manual then
14539: LD_VAR 0 1
14543: PPUSH
14544: CALL_OW 263
14548: PUSH
14549: LD_INT 1
14551: EQUAL
14552: IFFALSE 14633
// begin driver := IsDrivenBy ( vehicle ) ;
14554: LD_ADDR_VAR 0 4
14558: PUSH
14559: LD_VAR 0 1
14563: PPUSH
14564: CALL_OW 311
14568: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14569: LD_VAR 0 4
14573: PPUSH
14574: LD_EXP 59
14578: PUSH
14579: LD_VAR 0 2
14583: ARRAY
14584: PUSH
14585: LD_INT 3
14587: ARRAY
14588: PPUSH
14589: LD_EXP 59
14593: PUSH
14594: LD_VAR 0 2
14598: ARRAY
14599: PUSH
14600: LD_INT 4
14602: ARRAY
14603: PPUSH
14604: CALL_OW 171
// AddComExitVehicle ( driver ) ;
14608: LD_VAR 0 4
14612: PPUSH
14613: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
14617: LD_VAR 0 4
14621: PPUSH
14622: LD_VAR 0 2
14626: PPUSH
14627: CALL_OW 180
// end else
14631: GO 14746
// if GetControl ( vehicle ) = control_remote then
14633: LD_VAR 0 1
14637: PPUSH
14638: CALL_OW 263
14642: PUSH
14643: LD_INT 2
14645: EQUAL
14646: IFFALSE 14707
// begin wait ( 0 0$2 ) ;
14648: LD_INT 70
14650: PPUSH
14651: CALL_OW 67
// if Connect ( vehicle ) then
14655: LD_VAR 0 1
14659: PPUSH
14660: CALL 27353 0 1
14664: IFFALSE 14705
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14666: LD_VAR 0 1
14670: PPUSH
14671: LD_EXP 59
14675: PUSH
14676: LD_VAR 0 2
14680: ARRAY
14681: PUSH
14682: LD_INT 3
14684: ARRAY
14685: PPUSH
14686: LD_EXP 59
14690: PUSH
14691: LD_VAR 0 2
14695: ARRAY
14696: PUSH
14697: LD_INT 4
14699: ARRAY
14700: PPUSH
14701: CALL_OW 171
// end else
14705: GO 14746
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14707: LD_VAR 0 1
14711: PPUSH
14712: LD_EXP 59
14716: PUSH
14717: LD_VAR 0 2
14721: ARRAY
14722: PUSH
14723: LD_INT 3
14725: ARRAY
14726: PPUSH
14727: LD_EXP 59
14731: PUSH
14732: LD_VAR 0 2
14736: ARRAY
14737: PUSH
14738: LD_INT 4
14740: ARRAY
14741: PPUSH
14742: CALL_OW 171
// end ; end ;
14746: LD_VAR 0 3
14750: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
14751: LD_INT 0
14753: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
14754: LD_VAR 0 1
14758: PUSH
14759: LD_INT 250
14761: EQUAL
14762: PUSH
14763: LD_VAR 0 2
14767: PPUSH
14768: CALL_OW 264
14772: PUSH
14773: LD_EXP 77
14777: EQUAL
14778: AND
14779: IFFALSE 14800
// MinerPlaceMine ( unit , x , y ) ;
14781: LD_VAR 0 2
14785: PPUSH
14786: LD_VAR 0 4
14790: PPUSH
14791: LD_VAR 0 5
14795: PPUSH
14796: CALL 17528 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
14800: LD_VAR 0 1
14804: PUSH
14805: LD_INT 251
14807: EQUAL
14808: PUSH
14809: LD_VAR 0 2
14813: PPUSH
14814: CALL_OW 264
14818: PUSH
14819: LD_EXP 77
14823: EQUAL
14824: AND
14825: IFFALSE 14846
// MinerDetonateMine ( unit , x , y ) ;
14827: LD_VAR 0 2
14831: PPUSH
14832: LD_VAR 0 4
14836: PPUSH
14837: LD_VAR 0 5
14841: PPUSH
14842: CALL 17805 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
14846: LD_VAR 0 1
14850: PUSH
14851: LD_INT 252
14853: EQUAL
14854: PUSH
14855: LD_VAR 0 2
14859: PPUSH
14860: CALL_OW 264
14864: PUSH
14865: LD_EXP 77
14869: EQUAL
14870: AND
14871: IFFALSE 14892
// MinerCreateMinefield ( unit , x , y ) ;
14873: LD_VAR 0 2
14877: PPUSH
14878: LD_VAR 0 4
14882: PPUSH
14883: LD_VAR 0 5
14887: PPUSH
14888: CALL 18222 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
14892: LD_VAR 0 1
14896: PUSH
14897: LD_INT 253
14899: EQUAL
14900: PUSH
14901: LD_VAR 0 2
14905: PPUSH
14906: CALL_OW 257
14910: PUSH
14911: LD_INT 5
14913: EQUAL
14914: AND
14915: IFFALSE 14936
// ComBinocular ( unit , x , y ) ;
14917: LD_VAR 0 2
14921: PPUSH
14922: LD_VAR 0 4
14926: PPUSH
14927: LD_VAR 0 5
14931: PPUSH
14932: CALL 18593 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
14936: LD_VAR 0 1
14940: PUSH
14941: LD_INT 254
14943: EQUAL
14944: PUSH
14945: LD_VAR 0 2
14949: PPUSH
14950: CALL_OW 264
14954: PUSH
14955: LD_EXP 72
14959: EQUAL
14960: AND
14961: PUSH
14962: LD_VAR 0 3
14966: PPUSH
14967: CALL_OW 263
14971: PUSH
14972: LD_INT 3
14974: EQUAL
14975: AND
14976: IFFALSE 14992
// HackDestroyVehicle ( unit , selectedUnit ) ;
14978: LD_VAR 0 2
14982: PPUSH
14983: LD_VAR 0 3
14987: PPUSH
14988: CALL 16888 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
14992: LD_VAR 0 1
14996: PUSH
14997: LD_INT 255
14999: EQUAL
15000: PUSH
15001: LD_VAR 0 2
15005: PPUSH
15006: CALL_OW 264
15010: PUSH
15011: LD_INT 14
15013: PUSH
15014: LD_INT 53
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: IN
15021: AND
15022: PUSH
15023: LD_VAR 0 4
15027: PPUSH
15028: LD_VAR 0 5
15032: PPUSH
15033: CALL_OW 488
15037: AND
15038: IFFALSE 15062
// CutTreeXYR ( unit , x , y , 12 ) ;
15040: LD_VAR 0 2
15044: PPUSH
15045: LD_VAR 0 4
15049: PPUSH
15050: LD_VAR 0 5
15054: PPUSH
15055: LD_INT 12
15057: PPUSH
15058: CALL 15454 0 4
// if cmd = 256 then
15062: LD_VAR 0 1
15066: PUSH
15067: LD_INT 256
15069: EQUAL
15070: IFFALSE 15091
// SetFactoryWaypoint ( unit , x , y ) ;
15072: LD_VAR 0 2
15076: PPUSH
15077: LD_VAR 0 4
15081: PPUSH
15082: LD_VAR 0 5
15086: PPUSH
15087: CALL 15096 0 3
// end ;
15091: LD_VAR 0 6
15095: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
15096: LD_INT 0
15098: PPUSH
15099: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
15100: LD_VAR 0 1
15104: NOT
15105: PUSH
15106: LD_VAR 0 2
15110: PPUSH
15111: LD_VAR 0 3
15115: PPUSH
15116: CALL_OW 488
15120: NOT
15121: OR
15122: PUSH
15123: LD_VAR 0 1
15127: PPUSH
15128: CALL_OW 266
15132: PUSH
15133: LD_INT 3
15135: NONEQUAL
15136: PUSH
15137: LD_VAR 0 1
15141: PPUSH
15142: CALL_OW 247
15146: PUSH
15147: LD_INT 1
15149: EQUAL
15150: NOT
15151: AND
15152: OR
15153: IFFALSE 15157
// exit ;
15155: GO 15306
// if GetType ( factory ) = unit_human then
15157: LD_VAR 0 1
15161: PPUSH
15162: CALL_OW 247
15166: PUSH
15167: LD_INT 1
15169: EQUAL
15170: IFFALSE 15187
// factory := IsInUnit ( factory ) ;
15172: LD_ADDR_VAR 0 1
15176: PUSH
15177: LD_VAR 0 1
15181: PPUSH
15182: CALL_OW 310
15186: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
15187: LD_VAR 0 1
15191: PPUSH
15192: CALL_OW 266
15196: PUSH
15197: LD_INT 3
15199: NONEQUAL
15200: IFFALSE 15204
// exit ;
15202: GO 15306
// if HexInfo ( x , y ) = factory then
15204: LD_VAR 0 2
15208: PPUSH
15209: LD_VAR 0 3
15213: PPUSH
15214: CALL_OW 428
15218: PUSH
15219: LD_VAR 0 1
15223: EQUAL
15224: IFFALSE 15251
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
15226: LD_ADDR_EXP 59
15230: PUSH
15231: LD_EXP 59
15235: PPUSH
15236: LD_VAR 0 1
15240: PPUSH
15241: LD_INT 0
15243: PPUSH
15244: CALL_OW 1
15248: ST_TO_ADDR
15249: GO 15302
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
15251: LD_ADDR_EXP 59
15255: PUSH
15256: LD_EXP 59
15260: PPUSH
15261: LD_VAR 0 1
15265: PPUSH
15266: LD_VAR 0 1
15270: PPUSH
15271: CALL_OW 255
15275: PUSH
15276: LD_VAR 0 1
15280: PUSH
15281: LD_VAR 0 2
15285: PUSH
15286: LD_VAR 0 3
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: PPUSH
15297: CALL_OW 1
15301: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15302: CALL 15311 0 0
// end ;
15306: LD_VAR 0 4
15310: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
15311: LD_INT 0
15313: PPUSH
15314: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
15315: LD_STRING resetFactoryWaypoint();
15317: PPUSH
15318: CALL_OW 559
// if factoryWaypoints then
15322: LD_EXP 59
15326: IFFALSE 15449
// begin for i := 1 to factoryWaypoints do
15328: LD_ADDR_VAR 0 2
15332: PUSH
15333: DOUBLE
15334: LD_INT 1
15336: DEC
15337: ST_TO_ADDR
15338: LD_EXP 59
15342: PUSH
15343: FOR_TO
15344: IFFALSE 15447
// if factoryWaypoints [ i ] then
15346: LD_EXP 59
15350: PUSH
15351: LD_VAR 0 2
15355: ARRAY
15356: IFFALSE 15445
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
15358: LD_STRING setFactoryWaypointXY(
15360: PUSH
15361: LD_EXP 59
15365: PUSH
15366: LD_VAR 0 2
15370: ARRAY
15371: PUSH
15372: LD_INT 1
15374: ARRAY
15375: STR
15376: PUSH
15377: LD_STRING ,
15379: STR
15380: PUSH
15381: LD_EXP 59
15385: PUSH
15386: LD_VAR 0 2
15390: ARRAY
15391: PUSH
15392: LD_INT 2
15394: ARRAY
15395: STR
15396: PUSH
15397: LD_STRING ,
15399: STR
15400: PUSH
15401: LD_EXP 59
15405: PUSH
15406: LD_VAR 0 2
15410: ARRAY
15411: PUSH
15412: LD_INT 3
15414: ARRAY
15415: STR
15416: PUSH
15417: LD_STRING ,
15419: STR
15420: PUSH
15421: LD_EXP 59
15425: PUSH
15426: LD_VAR 0 2
15430: ARRAY
15431: PUSH
15432: LD_INT 4
15434: ARRAY
15435: STR
15436: PUSH
15437: LD_STRING )
15439: STR
15440: PPUSH
15441: CALL_OW 559
15445: GO 15343
15447: POP
15448: POP
// end ; end ;
15449: LD_VAR 0 1
15453: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15454: LD_INT 0
15456: PPUSH
15457: PPUSH
15458: PPUSH
15459: PPUSH
15460: PPUSH
15461: PPUSH
15462: PPUSH
15463: PPUSH
15464: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15465: LD_VAR 0 1
15469: NOT
15470: PUSH
15471: LD_VAR 0 2
15475: PPUSH
15476: LD_VAR 0 3
15480: PPUSH
15481: CALL_OW 488
15485: NOT
15486: OR
15487: PUSH
15488: LD_VAR 0 4
15492: NOT
15493: OR
15494: IFFALSE 15498
// exit ;
15496: GO 15838
// list := [ ] ;
15498: LD_ADDR_VAR 0 13
15502: PUSH
15503: EMPTY
15504: ST_TO_ADDR
// if x - r < 0 then
15505: LD_VAR 0 2
15509: PUSH
15510: LD_VAR 0 4
15514: MINUS
15515: PUSH
15516: LD_INT 0
15518: LESS
15519: IFFALSE 15531
// min_x := 0 else
15521: LD_ADDR_VAR 0 7
15525: PUSH
15526: LD_INT 0
15528: ST_TO_ADDR
15529: GO 15547
// min_x := x - r ;
15531: LD_ADDR_VAR 0 7
15535: PUSH
15536: LD_VAR 0 2
15540: PUSH
15541: LD_VAR 0 4
15545: MINUS
15546: ST_TO_ADDR
// if y - r < 0 then
15547: LD_VAR 0 3
15551: PUSH
15552: LD_VAR 0 4
15556: MINUS
15557: PUSH
15558: LD_INT 0
15560: LESS
15561: IFFALSE 15573
// min_y := 0 else
15563: LD_ADDR_VAR 0 8
15567: PUSH
15568: LD_INT 0
15570: ST_TO_ADDR
15571: GO 15589
// min_y := y - r ;
15573: LD_ADDR_VAR 0 8
15577: PUSH
15578: LD_VAR 0 3
15582: PUSH
15583: LD_VAR 0 4
15587: MINUS
15588: ST_TO_ADDR
// max_x := x + r ;
15589: LD_ADDR_VAR 0 9
15593: PUSH
15594: LD_VAR 0 2
15598: PUSH
15599: LD_VAR 0 4
15603: PLUS
15604: ST_TO_ADDR
// max_y := y + r ;
15605: LD_ADDR_VAR 0 10
15609: PUSH
15610: LD_VAR 0 3
15614: PUSH
15615: LD_VAR 0 4
15619: PLUS
15620: ST_TO_ADDR
// for _x = min_x to max_x do
15621: LD_ADDR_VAR 0 11
15625: PUSH
15626: DOUBLE
15627: LD_VAR 0 7
15631: DEC
15632: ST_TO_ADDR
15633: LD_VAR 0 9
15637: PUSH
15638: FOR_TO
15639: IFFALSE 15756
// for _y = min_y to max_y do
15641: LD_ADDR_VAR 0 12
15645: PUSH
15646: DOUBLE
15647: LD_VAR 0 8
15651: DEC
15652: ST_TO_ADDR
15653: LD_VAR 0 10
15657: PUSH
15658: FOR_TO
15659: IFFALSE 15752
// begin if not ValidHex ( _x , _y ) then
15661: LD_VAR 0 11
15665: PPUSH
15666: LD_VAR 0 12
15670: PPUSH
15671: CALL_OW 488
15675: NOT
15676: IFFALSE 15680
// continue ;
15678: GO 15658
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15680: LD_VAR 0 11
15684: PPUSH
15685: LD_VAR 0 12
15689: PPUSH
15690: CALL_OW 351
15694: PUSH
15695: LD_VAR 0 11
15699: PPUSH
15700: LD_VAR 0 12
15704: PPUSH
15705: CALL_OW 554
15709: AND
15710: IFFALSE 15750
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15712: LD_ADDR_VAR 0 13
15716: PUSH
15717: LD_VAR 0 13
15721: PPUSH
15722: LD_VAR 0 13
15726: PUSH
15727: LD_INT 1
15729: PLUS
15730: PPUSH
15731: LD_VAR 0 11
15735: PUSH
15736: LD_VAR 0 12
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PPUSH
15745: CALL_OW 2
15749: ST_TO_ADDR
// end ;
15750: GO 15658
15752: POP
15753: POP
15754: GO 15638
15756: POP
15757: POP
// if not list then
15758: LD_VAR 0 13
15762: NOT
15763: IFFALSE 15767
// exit ;
15765: GO 15838
// for i in list do
15767: LD_ADDR_VAR 0 6
15771: PUSH
15772: LD_VAR 0 13
15776: PUSH
15777: FOR_IN
15778: IFFALSE 15836
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
15780: LD_VAR 0 1
15784: PPUSH
15785: LD_STRING M
15787: PUSH
15788: LD_VAR 0 6
15792: PUSH
15793: LD_INT 1
15795: ARRAY
15796: PUSH
15797: LD_VAR 0 6
15801: PUSH
15802: LD_INT 2
15804: ARRAY
15805: PUSH
15806: LD_INT 0
15808: PUSH
15809: LD_INT 0
15811: PUSH
15812: LD_INT 0
15814: PUSH
15815: LD_INT 0
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: PUSH
15827: EMPTY
15828: LIST
15829: PPUSH
15830: CALL_OW 447
15834: GO 15777
15836: POP
15837: POP
// end ;
15838: LD_VAR 0 5
15842: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
15843: LD_EXP 60
15847: NOT
15848: IFFALSE 15898
15850: GO 15852
15852: DISABLE
// begin initHack := true ;
15853: LD_ADDR_EXP 60
15857: PUSH
15858: LD_INT 1
15860: ST_TO_ADDR
// hackTanks := [ ] ;
15861: LD_ADDR_EXP 61
15865: PUSH
15866: EMPTY
15867: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
15868: LD_ADDR_EXP 62
15872: PUSH
15873: EMPTY
15874: ST_TO_ADDR
// hackLimit := 3 ;
15875: LD_ADDR_EXP 63
15879: PUSH
15880: LD_INT 3
15882: ST_TO_ADDR
// hackDist := 12 ;
15883: LD_ADDR_EXP 64
15887: PUSH
15888: LD_INT 12
15890: ST_TO_ADDR
// hackCounter := [ ] ;
15891: LD_ADDR_EXP 65
15895: PUSH
15896: EMPTY
15897: ST_TO_ADDR
// end ;
15898: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
15899: LD_EXP 60
15903: PUSH
15904: LD_INT 34
15906: PUSH
15907: LD_EXP 72
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: PPUSH
15916: CALL_OW 69
15920: AND
15921: IFFALSE 16176
15923: GO 15925
15925: DISABLE
15926: LD_INT 0
15928: PPUSH
15929: PPUSH
// begin enable ;
15930: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
15931: LD_ADDR_VAR 0 1
15935: PUSH
15936: LD_INT 34
15938: PUSH
15939: LD_EXP 72
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: PPUSH
15948: CALL_OW 69
15952: PUSH
15953: FOR_IN
15954: IFFALSE 16174
// begin if not i in hackTanks then
15956: LD_VAR 0 1
15960: PUSH
15961: LD_EXP 61
15965: IN
15966: NOT
15967: IFFALSE 16050
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
15969: LD_ADDR_EXP 61
15973: PUSH
15974: LD_EXP 61
15978: PPUSH
15979: LD_EXP 61
15983: PUSH
15984: LD_INT 1
15986: PLUS
15987: PPUSH
15988: LD_VAR 0 1
15992: PPUSH
15993: CALL_OW 1
15997: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
15998: LD_ADDR_EXP 62
16002: PUSH
16003: LD_EXP 62
16007: PPUSH
16008: LD_EXP 62
16012: PUSH
16013: LD_INT 1
16015: PLUS
16016: PPUSH
16017: EMPTY
16018: PPUSH
16019: CALL_OW 1
16023: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
16024: LD_ADDR_EXP 65
16028: PUSH
16029: LD_EXP 65
16033: PPUSH
16034: LD_EXP 65
16038: PUSH
16039: LD_INT 1
16041: PLUS
16042: PPUSH
16043: EMPTY
16044: PPUSH
16045: CALL_OW 1
16049: ST_TO_ADDR
// end ; if not IsOk ( i ) then
16050: LD_VAR 0 1
16054: PPUSH
16055: CALL_OW 302
16059: NOT
16060: IFFALSE 16073
// begin HackUnlinkAll ( i ) ;
16062: LD_VAR 0 1
16066: PPUSH
16067: CALL 16179 0 1
// continue ;
16071: GO 15953
// end ; HackCheckCapturedStatus ( i ) ;
16073: LD_VAR 0 1
16077: PPUSH
16078: CALL 16622 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
16082: LD_ADDR_VAR 0 2
16086: PUSH
16087: LD_INT 81
16089: PUSH
16090: LD_VAR 0 1
16094: PPUSH
16095: CALL_OW 255
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: PUSH
16104: LD_INT 33
16106: PUSH
16107: LD_INT 3
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: PUSH
16114: LD_INT 91
16116: PUSH
16117: LD_VAR 0 1
16121: PUSH
16122: LD_EXP 64
16126: PUSH
16127: EMPTY
16128: LIST
16129: LIST
16130: LIST
16131: PUSH
16132: LD_INT 50
16134: PUSH
16135: EMPTY
16136: LIST
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: PPUSH
16144: CALL_OW 69
16148: ST_TO_ADDR
// if not tmp then
16149: LD_VAR 0 2
16153: NOT
16154: IFFALSE 16158
// continue ;
16156: GO 15953
// HackLink ( i , tmp ) ;
16158: LD_VAR 0 1
16162: PPUSH
16163: LD_VAR 0 2
16167: PPUSH
16168: CALL 16315 0 2
// end ;
16172: GO 15953
16174: POP
16175: POP
// end ;
16176: PPOPN 2
16178: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
16179: LD_INT 0
16181: PPUSH
16182: PPUSH
16183: PPUSH
// if not hack in hackTanks then
16184: LD_VAR 0 1
16188: PUSH
16189: LD_EXP 61
16193: IN
16194: NOT
16195: IFFALSE 16199
// exit ;
16197: GO 16310
// index := GetElementIndex ( hackTanks , hack ) ;
16199: LD_ADDR_VAR 0 4
16203: PUSH
16204: LD_EXP 61
16208: PPUSH
16209: LD_VAR 0 1
16213: PPUSH
16214: CALL 24167 0 2
16218: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
16219: LD_EXP 62
16223: PUSH
16224: LD_VAR 0 4
16228: ARRAY
16229: IFFALSE 16310
// begin for i in hackTanksCaptured [ index ] do
16231: LD_ADDR_VAR 0 3
16235: PUSH
16236: LD_EXP 62
16240: PUSH
16241: LD_VAR 0 4
16245: ARRAY
16246: PUSH
16247: FOR_IN
16248: IFFALSE 16274
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
16250: LD_VAR 0 3
16254: PUSH
16255: LD_INT 1
16257: ARRAY
16258: PPUSH
16259: LD_VAR 0 3
16263: PUSH
16264: LD_INT 2
16266: ARRAY
16267: PPUSH
16268: CALL_OW 235
16272: GO 16247
16274: POP
16275: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
16276: LD_ADDR_EXP 62
16280: PUSH
16281: LD_EXP 62
16285: PPUSH
16286: LD_VAR 0 4
16290: PPUSH
16291: EMPTY
16292: PPUSH
16293: CALL_OW 1
16297: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
16298: LD_VAR 0 1
16302: PPUSH
16303: LD_INT 0
16305: PPUSH
16306: CALL_OW 505
// end ; end ;
16310: LD_VAR 0 2
16314: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
16315: LD_INT 0
16317: PPUSH
16318: PPUSH
16319: PPUSH
// if not hack in hackTanks or not vehicles then
16320: LD_VAR 0 1
16324: PUSH
16325: LD_EXP 61
16329: IN
16330: NOT
16331: PUSH
16332: LD_VAR 0 2
16336: NOT
16337: OR
16338: IFFALSE 16342
// exit ;
16340: GO 16617
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
16342: LD_ADDR_VAR 0 2
16346: PUSH
16347: LD_VAR 0 1
16351: PPUSH
16352: LD_VAR 0 2
16356: PPUSH
16357: LD_INT 1
16359: PPUSH
16360: LD_INT 1
16362: PPUSH
16363: CALL 24817 0 4
16367: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
16368: LD_ADDR_VAR 0 5
16372: PUSH
16373: LD_EXP 61
16377: PPUSH
16378: LD_VAR 0 1
16382: PPUSH
16383: CALL 24167 0 2
16387: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
16388: LD_EXP 62
16392: PUSH
16393: LD_VAR 0 5
16397: ARRAY
16398: PUSH
16399: LD_EXP 63
16403: LESS
16404: IFFALSE 16593
// begin for i := 1 to vehicles do
16406: LD_ADDR_VAR 0 4
16410: PUSH
16411: DOUBLE
16412: LD_INT 1
16414: DEC
16415: ST_TO_ADDR
16416: LD_VAR 0 2
16420: PUSH
16421: FOR_TO
16422: IFFALSE 16591
// begin if hackTanksCaptured [ index ] = hackLimit then
16424: LD_EXP 62
16428: PUSH
16429: LD_VAR 0 5
16433: ARRAY
16434: PUSH
16435: LD_EXP 63
16439: EQUAL
16440: IFFALSE 16444
// break ;
16442: GO 16591
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
16444: LD_ADDR_EXP 65
16448: PUSH
16449: LD_EXP 65
16453: PPUSH
16454: LD_VAR 0 5
16458: PPUSH
16459: LD_EXP 65
16463: PUSH
16464: LD_VAR 0 5
16468: ARRAY
16469: PUSH
16470: LD_INT 1
16472: PLUS
16473: PPUSH
16474: CALL_OW 1
16478: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
16479: LD_ADDR_EXP 62
16483: PUSH
16484: LD_EXP 62
16488: PPUSH
16489: LD_VAR 0 5
16493: PUSH
16494: LD_EXP 62
16498: PUSH
16499: LD_VAR 0 5
16503: ARRAY
16504: PUSH
16505: LD_INT 1
16507: PLUS
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: PPUSH
16513: LD_VAR 0 2
16517: PUSH
16518: LD_VAR 0 4
16522: ARRAY
16523: PUSH
16524: LD_VAR 0 2
16528: PUSH
16529: LD_VAR 0 4
16533: ARRAY
16534: PPUSH
16535: CALL_OW 255
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PPUSH
16544: CALL 24382 0 3
16548: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
16549: LD_VAR 0 2
16553: PUSH
16554: LD_VAR 0 4
16558: ARRAY
16559: PPUSH
16560: LD_VAR 0 1
16564: PPUSH
16565: CALL_OW 255
16569: PPUSH
16570: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
16574: LD_VAR 0 2
16578: PUSH
16579: LD_VAR 0 4
16583: ARRAY
16584: PPUSH
16585: CALL_OW 141
// end ;
16589: GO 16421
16591: POP
16592: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16593: LD_VAR 0 1
16597: PPUSH
16598: LD_EXP 62
16602: PUSH
16603: LD_VAR 0 5
16607: ARRAY
16608: PUSH
16609: LD_INT 0
16611: PLUS
16612: PPUSH
16613: CALL_OW 505
// end ;
16617: LD_VAR 0 3
16621: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
16622: LD_INT 0
16624: PPUSH
16625: PPUSH
16626: PPUSH
16627: PPUSH
// if not hack in hackTanks then
16628: LD_VAR 0 1
16632: PUSH
16633: LD_EXP 61
16637: IN
16638: NOT
16639: IFFALSE 16643
// exit ;
16641: GO 16883
// index := GetElementIndex ( hackTanks , hack ) ;
16643: LD_ADDR_VAR 0 4
16647: PUSH
16648: LD_EXP 61
16652: PPUSH
16653: LD_VAR 0 1
16657: PPUSH
16658: CALL 24167 0 2
16662: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
16663: LD_ADDR_VAR 0 3
16667: PUSH
16668: DOUBLE
16669: LD_EXP 62
16673: PUSH
16674: LD_VAR 0 4
16678: ARRAY
16679: INC
16680: ST_TO_ADDR
16681: LD_INT 1
16683: PUSH
16684: FOR_DOWNTO
16685: IFFALSE 16857
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
16687: LD_ADDR_VAR 0 5
16691: PUSH
16692: LD_EXP 62
16696: PUSH
16697: LD_VAR 0 4
16701: ARRAY
16702: PUSH
16703: LD_VAR 0 3
16707: ARRAY
16708: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
16709: LD_VAR 0 5
16713: PUSH
16714: LD_INT 1
16716: ARRAY
16717: PPUSH
16718: CALL_OW 302
16722: NOT
16723: PUSH
16724: LD_VAR 0 5
16728: PUSH
16729: LD_INT 1
16731: ARRAY
16732: PPUSH
16733: CALL_OW 255
16737: PUSH
16738: LD_VAR 0 1
16742: PPUSH
16743: CALL_OW 255
16747: NONEQUAL
16748: OR
16749: IFFALSE 16855
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
16751: LD_VAR 0 5
16755: PUSH
16756: LD_INT 1
16758: ARRAY
16759: PPUSH
16760: CALL_OW 305
16764: PUSH
16765: LD_VAR 0 5
16769: PUSH
16770: LD_INT 1
16772: ARRAY
16773: PPUSH
16774: CALL_OW 255
16778: PUSH
16779: LD_VAR 0 1
16783: PPUSH
16784: CALL_OW 255
16788: EQUAL
16789: AND
16790: IFFALSE 16814
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
16792: LD_VAR 0 5
16796: PUSH
16797: LD_INT 1
16799: ARRAY
16800: PPUSH
16801: LD_VAR 0 5
16805: PUSH
16806: LD_INT 2
16808: ARRAY
16809: PPUSH
16810: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
16814: LD_ADDR_EXP 62
16818: PUSH
16819: LD_EXP 62
16823: PPUSH
16824: LD_VAR 0 4
16828: PPUSH
16829: LD_EXP 62
16833: PUSH
16834: LD_VAR 0 4
16838: ARRAY
16839: PPUSH
16840: LD_VAR 0 3
16844: PPUSH
16845: CALL_OW 3
16849: PPUSH
16850: CALL_OW 1
16854: ST_TO_ADDR
// end ; end ;
16855: GO 16684
16857: POP
16858: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16859: LD_VAR 0 1
16863: PPUSH
16864: LD_EXP 62
16868: PUSH
16869: LD_VAR 0 4
16873: ARRAY
16874: PUSH
16875: LD_INT 0
16877: PLUS
16878: PPUSH
16879: CALL_OW 505
// end ;
16883: LD_VAR 0 2
16887: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
16888: LD_INT 0
16890: PPUSH
16891: PPUSH
16892: PPUSH
16893: PPUSH
// if not hack in hackTanks then
16894: LD_VAR 0 1
16898: PUSH
16899: LD_EXP 61
16903: IN
16904: NOT
16905: IFFALSE 16909
// exit ;
16907: GO 16994
// index := GetElementIndex ( hackTanks , hack ) ;
16909: LD_ADDR_VAR 0 5
16913: PUSH
16914: LD_EXP 61
16918: PPUSH
16919: LD_VAR 0 1
16923: PPUSH
16924: CALL 24167 0 2
16928: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
16929: LD_ADDR_VAR 0 4
16933: PUSH
16934: DOUBLE
16935: LD_INT 1
16937: DEC
16938: ST_TO_ADDR
16939: LD_EXP 62
16943: PUSH
16944: LD_VAR 0 5
16948: ARRAY
16949: PUSH
16950: FOR_TO
16951: IFFALSE 16992
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
16953: LD_EXP 62
16957: PUSH
16958: LD_VAR 0 5
16962: ARRAY
16963: PUSH
16964: LD_VAR 0 4
16968: ARRAY
16969: PUSH
16970: LD_INT 1
16972: ARRAY
16973: PUSH
16974: LD_VAR 0 2
16978: EQUAL
16979: IFFALSE 16990
// KillUnit ( vehicle ) ;
16981: LD_VAR 0 2
16985: PPUSH
16986: CALL_OW 66
16990: GO 16950
16992: POP
16993: POP
// end ;
16994: LD_VAR 0 3
16998: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
16999: LD_EXP 66
17003: NOT
17004: IFFALSE 17039
17006: GO 17008
17008: DISABLE
// begin initMiner := true ;
17009: LD_ADDR_EXP 66
17013: PUSH
17014: LD_INT 1
17016: ST_TO_ADDR
// minersList := [ ] ;
17017: LD_ADDR_EXP 67
17021: PUSH
17022: EMPTY
17023: ST_TO_ADDR
// minerMinesList := [ ] ;
17024: LD_ADDR_EXP 68
17028: PUSH
17029: EMPTY
17030: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
17031: LD_ADDR_EXP 69
17035: PUSH
17036: LD_INT 5
17038: ST_TO_ADDR
// end ;
17039: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
17040: LD_EXP 66
17044: PUSH
17045: LD_INT 34
17047: PUSH
17048: LD_EXP 77
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PPUSH
17057: CALL_OW 69
17061: AND
17062: IFFALSE 17525
17064: GO 17066
17066: DISABLE
17067: LD_INT 0
17069: PPUSH
17070: PPUSH
17071: PPUSH
17072: PPUSH
// begin enable ;
17073: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
17074: LD_ADDR_VAR 0 1
17078: PUSH
17079: LD_INT 34
17081: PUSH
17082: LD_EXP 77
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PPUSH
17091: CALL_OW 69
17095: PUSH
17096: FOR_IN
17097: IFFALSE 17169
// begin if not i in minersList then
17099: LD_VAR 0 1
17103: PUSH
17104: LD_EXP 67
17108: IN
17109: NOT
17110: IFFALSE 17167
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
17112: LD_ADDR_EXP 67
17116: PUSH
17117: LD_EXP 67
17121: PPUSH
17122: LD_EXP 67
17126: PUSH
17127: LD_INT 1
17129: PLUS
17130: PPUSH
17131: LD_VAR 0 1
17135: PPUSH
17136: CALL_OW 1
17140: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17141: LD_ADDR_EXP 68
17145: PUSH
17146: LD_EXP 68
17150: PPUSH
17151: LD_EXP 68
17155: PUSH
17156: LD_INT 1
17158: PLUS
17159: PPUSH
17160: EMPTY
17161: PPUSH
17162: CALL_OW 1
17166: ST_TO_ADDR
// end end ;
17167: GO 17096
17169: POP
17170: POP
// for i := minerMinesList downto 1 do
17171: LD_ADDR_VAR 0 1
17175: PUSH
17176: DOUBLE
17177: LD_EXP 68
17181: INC
17182: ST_TO_ADDR
17183: LD_INT 1
17185: PUSH
17186: FOR_DOWNTO
17187: IFFALSE 17523
// begin if IsLive ( minersList [ i ] ) then
17189: LD_EXP 67
17193: PUSH
17194: LD_VAR 0 1
17198: ARRAY
17199: PPUSH
17200: CALL_OW 300
17204: IFFALSE 17232
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
17206: LD_EXP 67
17210: PUSH
17211: LD_VAR 0 1
17215: ARRAY
17216: PPUSH
17217: LD_EXP 68
17221: PUSH
17222: LD_VAR 0 1
17226: ARRAY
17227: PPUSH
17228: CALL_OW 505
// if not minerMinesList [ i ] then
17232: LD_EXP 68
17236: PUSH
17237: LD_VAR 0 1
17241: ARRAY
17242: NOT
17243: IFFALSE 17247
// continue ;
17245: GO 17186
// for j := minerMinesList [ i ] downto 1 do
17247: LD_ADDR_VAR 0 2
17251: PUSH
17252: DOUBLE
17253: LD_EXP 68
17257: PUSH
17258: LD_VAR 0 1
17262: ARRAY
17263: INC
17264: ST_TO_ADDR
17265: LD_INT 1
17267: PUSH
17268: FOR_DOWNTO
17269: IFFALSE 17519
// begin side := GetSide ( minersList [ i ] ) ;
17271: LD_ADDR_VAR 0 3
17275: PUSH
17276: LD_EXP 67
17280: PUSH
17281: LD_VAR 0 1
17285: ARRAY
17286: PPUSH
17287: CALL_OW 255
17291: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
17292: LD_ADDR_VAR 0 4
17296: PUSH
17297: LD_EXP 68
17301: PUSH
17302: LD_VAR 0 1
17306: ARRAY
17307: PUSH
17308: LD_VAR 0 2
17312: ARRAY
17313: PUSH
17314: LD_INT 1
17316: ARRAY
17317: PPUSH
17318: LD_EXP 68
17322: PUSH
17323: LD_VAR 0 1
17327: ARRAY
17328: PUSH
17329: LD_VAR 0 2
17333: ARRAY
17334: PUSH
17335: LD_INT 2
17337: ARRAY
17338: PPUSH
17339: CALL_OW 428
17343: ST_TO_ADDR
// if not tmp then
17344: LD_VAR 0 4
17348: NOT
17349: IFFALSE 17353
// continue ;
17351: GO 17268
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
17353: LD_VAR 0 4
17357: PUSH
17358: LD_INT 81
17360: PUSH
17361: LD_VAR 0 3
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PPUSH
17370: CALL_OW 69
17374: IN
17375: PUSH
17376: LD_EXP 68
17380: PUSH
17381: LD_VAR 0 1
17385: ARRAY
17386: PUSH
17387: LD_VAR 0 2
17391: ARRAY
17392: PUSH
17393: LD_INT 1
17395: ARRAY
17396: PPUSH
17397: LD_EXP 68
17401: PUSH
17402: LD_VAR 0 1
17406: ARRAY
17407: PUSH
17408: LD_VAR 0 2
17412: ARRAY
17413: PUSH
17414: LD_INT 2
17416: ARRAY
17417: PPUSH
17418: CALL_OW 458
17422: AND
17423: IFFALSE 17517
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
17425: LD_EXP 68
17429: PUSH
17430: LD_VAR 0 1
17434: ARRAY
17435: PUSH
17436: LD_VAR 0 2
17440: ARRAY
17441: PUSH
17442: LD_INT 1
17444: ARRAY
17445: PPUSH
17446: LD_EXP 68
17450: PUSH
17451: LD_VAR 0 1
17455: ARRAY
17456: PUSH
17457: LD_VAR 0 2
17461: ARRAY
17462: PUSH
17463: LD_INT 2
17465: ARRAY
17466: PPUSH
17467: LD_VAR 0 3
17471: PPUSH
17472: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
17476: LD_ADDR_EXP 68
17480: PUSH
17481: LD_EXP 68
17485: PPUSH
17486: LD_VAR 0 1
17490: PPUSH
17491: LD_EXP 68
17495: PUSH
17496: LD_VAR 0 1
17500: ARRAY
17501: PPUSH
17502: LD_VAR 0 2
17506: PPUSH
17507: CALL_OW 3
17511: PPUSH
17512: CALL_OW 1
17516: ST_TO_ADDR
// end ; end ;
17517: GO 17268
17519: POP
17520: POP
// end ;
17521: GO 17186
17523: POP
17524: POP
// end ;
17525: PPOPN 4
17527: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
17528: LD_INT 0
17530: PPUSH
17531: PPUSH
// result := false ;
17532: LD_ADDR_VAR 0 4
17536: PUSH
17537: LD_INT 0
17539: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
17540: LD_VAR 0 1
17544: PPUSH
17545: CALL_OW 264
17549: PUSH
17550: LD_EXP 77
17554: EQUAL
17555: NOT
17556: IFFALSE 17560
// exit ;
17558: GO 17800
// index := GetElementIndex ( minersList , unit ) ;
17560: LD_ADDR_VAR 0 5
17564: PUSH
17565: LD_EXP 67
17569: PPUSH
17570: LD_VAR 0 1
17574: PPUSH
17575: CALL 24167 0 2
17579: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
17580: LD_EXP 68
17584: PUSH
17585: LD_VAR 0 5
17589: ARRAY
17590: PUSH
17591: LD_EXP 69
17595: GREATEREQUAL
17596: IFFALSE 17600
// exit ;
17598: GO 17800
// ComMoveXY ( unit , x , y ) ;
17600: LD_VAR 0 1
17604: PPUSH
17605: LD_VAR 0 2
17609: PPUSH
17610: LD_VAR 0 3
17614: PPUSH
17615: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17619: LD_INT 35
17621: PPUSH
17622: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
17626: LD_VAR 0 1
17630: PPUSH
17631: LD_VAR 0 2
17635: PPUSH
17636: LD_VAR 0 3
17640: PPUSH
17641: CALL 54886 0 3
17645: NOT
17646: PUSH
17647: LD_VAR 0 1
17651: PPUSH
17652: CALL_OW 314
17656: AND
17657: IFFALSE 17661
// exit ;
17659: GO 17800
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
17661: LD_VAR 0 2
17665: PPUSH
17666: LD_VAR 0 3
17670: PPUSH
17671: CALL_OW 428
17675: PUSH
17676: LD_VAR 0 1
17680: EQUAL
17681: PUSH
17682: LD_VAR 0 1
17686: PPUSH
17687: CALL_OW 314
17691: NOT
17692: AND
17693: IFFALSE 17619
// PlaySoundXY ( x , y , PlantMine ) ;
17695: LD_VAR 0 2
17699: PPUSH
17700: LD_VAR 0 3
17704: PPUSH
17705: LD_STRING PlantMine
17707: PPUSH
17708: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
17712: LD_VAR 0 2
17716: PPUSH
17717: LD_VAR 0 3
17721: PPUSH
17722: LD_VAR 0 1
17726: PPUSH
17727: CALL_OW 255
17731: PPUSH
17732: LD_INT 0
17734: PPUSH
17735: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17739: LD_ADDR_EXP 68
17743: PUSH
17744: LD_EXP 68
17748: PPUSH
17749: LD_VAR 0 5
17753: PUSH
17754: LD_EXP 68
17758: PUSH
17759: LD_VAR 0 5
17763: ARRAY
17764: PUSH
17765: LD_INT 1
17767: PLUS
17768: PUSH
17769: EMPTY
17770: LIST
17771: LIST
17772: PPUSH
17773: LD_VAR 0 2
17777: PUSH
17778: LD_VAR 0 3
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PPUSH
17787: CALL 24382 0 3
17791: ST_TO_ADDR
// result := true ;
17792: LD_ADDR_VAR 0 4
17796: PUSH
17797: LD_INT 1
17799: ST_TO_ADDR
// end ;
17800: LD_VAR 0 4
17804: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
17805: LD_INT 0
17807: PPUSH
17808: PPUSH
17809: PPUSH
// if not unit in minersList then
17810: LD_VAR 0 1
17814: PUSH
17815: LD_EXP 67
17819: IN
17820: NOT
17821: IFFALSE 17825
// exit ;
17823: GO 18217
// index := GetElementIndex ( minersList , unit ) ;
17825: LD_ADDR_VAR 0 6
17829: PUSH
17830: LD_EXP 67
17834: PPUSH
17835: LD_VAR 0 1
17839: PPUSH
17840: CALL 24167 0 2
17844: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
17845: LD_ADDR_VAR 0 5
17849: PUSH
17850: DOUBLE
17851: LD_EXP 68
17855: PUSH
17856: LD_VAR 0 6
17860: ARRAY
17861: INC
17862: ST_TO_ADDR
17863: LD_INT 1
17865: PUSH
17866: FOR_DOWNTO
17867: IFFALSE 18028
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
17869: LD_EXP 68
17873: PUSH
17874: LD_VAR 0 6
17878: ARRAY
17879: PUSH
17880: LD_VAR 0 5
17884: ARRAY
17885: PUSH
17886: LD_INT 1
17888: ARRAY
17889: PUSH
17890: LD_VAR 0 2
17894: EQUAL
17895: PUSH
17896: LD_EXP 68
17900: PUSH
17901: LD_VAR 0 6
17905: ARRAY
17906: PUSH
17907: LD_VAR 0 5
17911: ARRAY
17912: PUSH
17913: LD_INT 2
17915: ARRAY
17916: PUSH
17917: LD_VAR 0 3
17921: EQUAL
17922: AND
17923: IFFALSE 18026
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17925: LD_EXP 68
17929: PUSH
17930: LD_VAR 0 6
17934: ARRAY
17935: PUSH
17936: LD_VAR 0 5
17940: ARRAY
17941: PUSH
17942: LD_INT 1
17944: ARRAY
17945: PPUSH
17946: LD_EXP 68
17950: PUSH
17951: LD_VAR 0 6
17955: ARRAY
17956: PUSH
17957: LD_VAR 0 5
17961: ARRAY
17962: PUSH
17963: LD_INT 2
17965: ARRAY
17966: PPUSH
17967: LD_VAR 0 1
17971: PPUSH
17972: CALL_OW 255
17976: PPUSH
17977: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17981: LD_ADDR_EXP 68
17985: PUSH
17986: LD_EXP 68
17990: PPUSH
17991: LD_VAR 0 6
17995: PPUSH
17996: LD_EXP 68
18000: PUSH
18001: LD_VAR 0 6
18005: ARRAY
18006: PPUSH
18007: LD_VAR 0 5
18011: PPUSH
18012: CALL_OW 3
18016: PPUSH
18017: CALL_OW 1
18021: ST_TO_ADDR
// exit ;
18022: POP
18023: POP
18024: GO 18217
// end ; end ;
18026: GO 17866
18028: POP
18029: POP
// for i := minerMinesList [ index ] downto 1 do
18030: LD_ADDR_VAR 0 5
18034: PUSH
18035: DOUBLE
18036: LD_EXP 68
18040: PUSH
18041: LD_VAR 0 6
18045: ARRAY
18046: INC
18047: ST_TO_ADDR
18048: LD_INT 1
18050: PUSH
18051: FOR_DOWNTO
18052: IFFALSE 18215
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
18054: LD_EXP 68
18058: PUSH
18059: LD_VAR 0 6
18063: ARRAY
18064: PUSH
18065: LD_VAR 0 5
18069: ARRAY
18070: PUSH
18071: LD_INT 1
18073: ARRAY
18074: PPUSH
18075: LD_EXP 68
18079: PUSH
18080: LD_VAR 0 6
18084: ARRAY
18085: PUSH
18086: LD_VAR 0 5
18090: ARRAY
18091: PUSH
18092: LD_INT 2
18094: ARRAY
18095: PPUSH
18096: LD_VAR 0 2
18100: PPUSH
18101: LD_VAR 0 3
18105: PPUSH
18106: CALL_OW 298
18110: PUSH
18111: LD_INT 6
18113: LESS
18114: IFFALSE 18213
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18116: LD_EXP 68
18120: PUSH
18121: LD_VAR 0 6
18125: ARRAY
18126: PUSH
18127: LD_VAR 0 5
18131: ARRAY
18132: PUSH
18133: LD_INT 1
18135: ARRAY
18136: PPUSH
18137: LD_EXP 68
18141: PUSH
18142: LD_VAR 0 6
18146: ARRAY
18147: PUSH
18148: LD_VAR 0 5
18152: ARRAY
18153: PUSH
18154: LD_INT 2
18156: ARRAY
18157: PPUSH
18158: LD_VAR 0 1
18162: PPUSH
18163: CALL_OW 255
18167: PPUSH
18168: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18172: LD_ADDR_EXP 68
18176: PUSH
18177: LD_EXP 68
18181: PPUSH
18182: LD_VAR 0 6
18186: PPUSH
18187: LD_EXP 68
18191: PUSH
18192: LD_VAR 0 6
18196: ARRAY
18197: PPUSH
18198: LD_VAR 0 5
18202: PPUSH
18203: CALL_OW 3
18207: PPUSH
18208: CALL_OW 1
18212: ST_TO_ADDR
// end ; end ;
18213: GO 18051
18215: POP
18216: POP
// end ;
18217: LD_VAR 0 4
18221: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
18222: LD_INT 0
18224: PPUSH
18225: PPUSH
18226: PPUSH
18227: PPUSH
18228: PPUSH
18229: PPUSH
18230: PPUSH
18231: PPUSH
18232: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
18233: LD_VAR 0 1
18237: PPUSH
18238: CALL_OW 264
18242: PUSH
18243: LD_EXP 77
18247: EQUAL
18248: NOT
18249: PUSH
18250: LD_VAR 0 1
18254: PUSH
18255: LD_EXP 67
18259: IN
18260: NOT
18261: OR
18262: IFFALSE 18266
// exit ;
18264: GO 18588
// index := GetElementIndex ( minersList , unit ) ;
18266: LD_ADDR_VAR 0 6
18270: PUSH
18271: LD_EXP 67
18275: PPUSH
18276: LD_VAR 0 1
18280: PPUSH
18281: CALL 24167 0 2
18285: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
18286: LD_ADDR_VAR 0 8
18290: PUSH
18291: LD_EXP 69
18295: PUSH
18296: LD_EXP 68
18300: PUSH
18301: LD_VAR 0 6
18305: ARRAY
18306: MINUS
18307: ST_TO_ADDR
// if not minesFreeAmount then
18308: LD_VAR 0 8
18312: NOT
18313: IFFALSE 18317
// exit ;
18315: GO 18588
// tmp := [ ] ;
18317: LD_ADDR_VAR 0 7
18321: PUSH
18322: EMPTY
18323: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
18324: LD_ADDR_VAR 0 5
18328: PUSH
18329: DOUBLE
18330: LD_INT 1
18332: DEC
18333: ST_TO_ADDR
18334: LD_VAR 0 8
18338: PUSH
18339: FOR_TO
18340: IFFALSE 18535
// begin _d := rand ( 0 , 5 ) ;
18342: LD_ADDR_VAR 0 11
18346: PUSH
18347: LD_INT 0
18349: PPUSH
18350: LD_INT 5
18352: PPUSH
18353: CALL_OW 12
18357: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
18358: LD_ADDR_VAR 0 12
18362: PUSH
18363: LD_INT 2
18365: PPUSH
18366: LD_INT 6
18368: PPUSH
18369: CALL_OW 12
18373: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
18374: LD_ADDR_VAR 0 9
18378: PUSH
18379: LD_VAR 0 2
18383: PPUSH
18384: LD_VAR 0 11
18388: PPUSH
18389: LD_VAR 0 12
18393: PPUSH
18394: CALL_OW 272
18398: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
18399: LD_ADDR_VAR 0 10
18403: PUSH
18404: LD_VAR 0 3
18408: PPUSH
18409: LD_VAR 0 11
18413: PPUSH
18414: LD_VAR 0 12
18418: PPUSH
18419: CALL_OW 273
18423: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
18424: LD_VAR 0 9
18428: PPUSH
18429: LD_VAR 0 10
18433: PPUSH
18434: CALL_OW 488
18438: PUSH
18439: LD_VAR 0 9
18443: PUSH
18444: LD_VAR 0 10
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: LD_VAR 0 7
18457: IN
18458: NOT
18459: AND
18460: PUSH
18461: LD_VAR 0 9
18465: PPUSH
18466: LD_VAR 0 10
18470: PPUSH
18471: CALL_OW 458
18475: NOT
18476: AND
18477: IFFALSE 18519
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
18479: LD_ADDR_VAR 0 7
18483: PUSH
18484: LD_VAR 0 7
18488: PPUSH
18489: LD_VAR 0 7
18493: PUSH
18494: LD_INT 1
18496: PLUS
18497: PPUSH
18498: LD_VAR 0 9
18502: PUSH
18503: LD_VAR 0 10
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PPUSH
18512: CALL_OW 1
18516: ST_TO_ADDR
18517: GO 18533
// i := i - 1 ;
18519: LD_ADDR_VAR 0 5
18523: PUSH
18524: LD_VAR 0 5
18528: PUSH
18529: LD_INT 1
18531: MINUS
18532: ST_TO_ADDR
// end ;
18533: GO 18339
18535: POP
18536: POP
// for i in tmp do
18537: LD_ADDR_VAR 0 5
18541: PUSH
18542: LD_VAR 0 7
18546: PUSH
18547: FOR_IN
18548: IFFALSE 18586
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
18550: LD_VAR 0 1
18554: PPUSH
18555: LD_VAR 0 5
18559: PUSH
18560: LD_INT 1
18562: ARRAY
18563: PPUSH
18564: LD_VAR 0 5
18568: PUSH
18569: LD_INT 2
18571: ARRAY
18572: PPUSH
18573: CALL 17528 0 3
18577: NOT
18578: IFFALSE 18584
// exit ;
18580: POP
18581: POP
18582: GO 18588
18584: GO 18547
18586: POP
18587: POP
// end ;
18588: LD_VAR 0 4
18592: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
18593: LD_INT 0
18595: PPUSH
18596: PPUSH
18597: PPUSH
18598: PPUSH
18599: PPUSH
18600: PPUSH
18601: PPUSH
// if not GetClass ( unit ) = class_sniper then
18602: LD_VAR 0 1
18606: PPUSH
18607: CALL_OW 257
18611: PUSH
18612: LD_INT 5
18614: EQUAL
18615: NOT
18616: IFFALSE 18620
// exit ;
18618: GO 19008
// dist := 8 ;
18620: LD_ADDR_VAR 0 5
18624: PUSH
18625: LD_INT 8
18627: ST_TO_ADDR
// viewRange := 12 ;
18628: LD_ADDR_VAR 0 7
18632: PUSH
18633: LD_INT 12
18635: ST_TO_ADDR
// side := GetSide ( unit ) ;
18636: LD_ADDR_VAR 0 6
18640: PUSH
18641: LD_VAR 0 1
18645: PPUSH
18646: CALL_OW 255
18650: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
18651: LD_INT 61
18653: PPUSH
18654: LD_VAR 0 6
18658: PPUSH
18659: CALL_OW 321
18663: PUSH
18664: LD_INT 2
18666: EQUAL
18667: IFFALSE 18677
// viewRange := 16 ;
18669: LD_ADDR_VAR 0 7
18673: PUSH
18674: LD_INT 16
18676: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
18677: LD_VAR 0 1
18681: PPUSH
18682: LD_VAR 0 2
18686: PPUSH
18687: LD_VAR 0 3
18691: PPUSH
18692: CALL_OW 297
18696: PUSH
18697: LD_VAR 0 5
18701: GREATER
18702: IFFALSE 18781
// begin ComMoveXY ( unit , x , y ) ;
18704: LD_VAR 0 1
18708: PPUSH
18709: LD_VAR 0 2
18713: PPUSH
18714: LD_VAR 0 3
18718: PPUSH
18719: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18723: LD_INT 35
18725: PPUSH
18726: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
18730: LD_VAR 0 1
18734: PPUSH
18735: LD_VAR 0 2
18739: PPUSH
18740: LD_VAR 0 3
18744: PPUSH
18745: CALL 54886 0 3
18749: NOT
18750: IFFALSE 18754
// exit ;
18752: GO 19008
// until GetDistUnitXY ( unit , x , y ) < dist ;
18754: LD_VAR 0 1
18758: PPUSH
18759: LD_VAR 0 2
18763: PPUSH
18764: LD_VAR 0 3
18768: PPUSH
18769: CALL_OW 297
18773: PUSH
18774: LD_VAR 0 5
18778: LESS
18779: IFFALSE 18723
// end ; ComTurnXY ( unit , x , y ) ;
18781: LD_VAR 0 1
18785: PPUSH
18786: LD_VAR 0 2
18790: PPUSH
18791: LD_VAR 0 3
18795: PPUSH
18796: CALL_OW 118
// wait ( 5 ) ;
18800: LD_INT 5
18802: PPUSH
18803: CALL_OW 67
// _d := GetDir ( unit ) ;
18807: LD_ADDR_VAR 0 10
18811: PUSH
18812: LD_VAR 0 1
18816: PPUSH
18817: CALL_OW 254
18821: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
18822: LD_ADDR_VAR 0 8
18826: PUSH
18827: LD_VAR 0 1
18831: PPUSH
18832: CALL_OW 250
18836: PPUSH
18837: LD_VAR 0 10
18841: PPUSH
18842: LD_VAR 0 5
18846: PPUSH
18847: CALL_OW 272
18851: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
18852: LD_ADDR_VAR 0 9
18856: PUSH
18857: LD_VAR 0 1
18861: PPUSH
18862: CALL_OW 251
18866: PPUSH
18867: LD_VAR 0 10
18871: PPUSH
18872: LD_VAR 0 5
18876: PPUSH
18877: CALL_OW 273
18881: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18882: LD_VAR 0 8
18886: PPUSH
18887: LD_VAR 0 9
18891: PPUSH
18892: CALL_OW 488
18896: NOT
18897: IFFALSE 18901
// exit ;
18899: GO 19008
// ComAnimCustom ( unit , 1 ) ;
18901: LD_VAR 0 1
18905: PPUSH
18906: LD_INT 1
18908: PPUSH
18909: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
18913: LD_VAR 0 8
18917: PPUSH
18918: LD_VAR 0 9
18922: PPUSH
18923: LD_VAR 0 6
18927: PPUSH
18928: LD_VAR 0 7
18932: PPUSH
18933: CALL_OW 330
// repeat wait ( 1 ) ;
18937: LD_INT 1
18939: PPUSH
18940: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
18944: LD_VAR 0 1
18948: PPUSH
18949: CALL_OW 316
18953: PUSH
18954: LD_VAR 0 1
18958: PPUSH
18959: CALL_OW 314
18963: OR
18964: PUSH
18965: LD_VAR 0 1
18969: PPUSH
18970: CALL_OW 302
18974: NOT
18975: OR
18976: PUSH
18977: LD_VAR 0 1
18981: PPUSH
18982: CALL_OW 301
18986: OR
18987: IFFALSE 18937
// RemoveSeeing ( _x , _y , side ) ;
18989: LD_VAR 0 8
18993: PPUSH
18994: LD_VAR 0 9
18998: PPUSH
18999: LD_VAR 0 6
19003: PPUSH
19004: CALL_OW 331
// end ; end_of_file
19008: LD_VAR 0 4
19012: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
19013: LD_VAR 0 1
19017: PPUSH
19018: LD_VAR 0 2
19022: PPUSH
19023: LD_VAR 0 3
19027: PPUSH
19028: LD_VAR 0 4
19032: PPUSH
19033: LD_VAR 0 5
19037: PPUSH
19038: LD_VAR 0 6
19042: PPUSH
19043: CALL 86 0 6
// end ;
19047: PPOPN 6
19049: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
19050: CALL 61 0 0
// end ; end_of_file
19054: PPOPN 1
19056: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
19057: LD_VAR 0 1
19061: PUSH
19062: LD_INT 200
19064: DOUBLE
19065: GREATEREQUAL
19066: IFFALSE 19074
19068: LD_INT 299
19070: DOUBLE
19071: LESSEQUAL
19072: IFTRUE 19076
19074: GO 19108
19076: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
19077: LD_VAR 0 1
19081: PPUSH
19082: LD_VAR 0 2
19086: PPUSH
19087: LD_VAR 0 3
19091: PPUSH
19092: LD_VAR 0 4
19096: PPUSH
19097: LD_VAR 0 5
19101: PPUSH
19102: CALL 14751 0 5
19106: GO 19185
19108: LD_INT 300
19110: DOUBLE
19111: GREATEREQUAL
19112: IFFALSE 19120
19114: LD_INT 399
19116: DOUBLE
19117: LESSEQUAL
19118: IFTRUE 19122
19120: GO 19184
19122: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
19123: LD_VAR 0 1
19127: PPUSH
19128: LD_VAR 0 2
19132: PPUSH
19133: LD_VAR 0 3
19137: PPUSH
19138: LD_VAR 0 4
19142: PPUSH
19143: LD_VAR 0 5
19147: PPUSH
19148: LD_VAR 0 6
19152: PPUSH
19153: LD_VAR 0 7
19157: PPUSH
19158: LD_VAR 0 8
19162: PPUSH
19163: LD_VAR 0 9
19167: PPUSH
19168: LD_VAR 0 10
19172: PPUSH
19173: LD_VAR 0 11
19177: PPUSH
19178: CALL 12393 0 11
19182: GO 19185
19184: POP
// end ;
19185: PPOPN 11
19187: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
19188: LD_VAR 0 1
19192: PPUSH
19193: LD_VAR 0 2
19197: PPUSH
19198: LD_VAR 0 3
19202: PPUSH
19203: LD_VAR 0 4
19207: PPUSH
19208: LD_VAR 0 5
19212: PPUSH
19213: CALL 14487 0 5
// end ; end_of_file
19217: PPOPN 5
19219: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19220: LD_INT 0
19222: PPUSH
// ar_miner := 81 ;
19223: LD_ADDR_EXP 77
19227: PUSH
19228: LD_INT 81
19230: ST_TO_ADDR
// ar_crane := 88 ;
19231: LD_ADDR_EXP 76
19235: PUSH
19236: LD_INT 88
19238: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19239: LD_ADDR_EXP 71
19243: PUSH
19244: LD_INT 89
19246: ST_TO_ADDR
// us_hack := 99 ;
19247: LD_ADDR_EXP 72
19251: PUSH
19252: LD_INT 99
19254: ST_TO_ADDR
// us_artillery := 97 ;
19255: LD_ADDR_EXP 73
19259: PUSH
19260: LD_INT 97
19262: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19263: LD_ADDR_EXP 74
19267: PUSH
19268: LD_INT 91
19270: ST_TO_ADDR
// ar_mortar := 92 ;
19271: LD_ADDR_EXP 75
19275: PUSH
19276: LD_INT 92
19278: ST_TO_ADDR
// ru_flamethrower := 93 ;
19279: LD_ADDR_EXP 78
19283: PUSH
19284: LD_INT 93
19286: ST_TO_ADDR
// ru_radar := 98 ;
19287: LD_ADDR_EXP 70
19291: PUSH
19292: LD_INT 98
19294: ST_TO_ADDR
// tech_Artillery := 80 ;
19295: LD_ADDR_EXP 79
19299: PUSH
19300: LD_INT 80
19302: ST_TO_ADDR
// tech_RadMat := 81 ;
19303: LD_ADDR_EXP 80
19307: PUSH
19308: LD_INT 81
19310: ST_TO_ADDR
// tech_BasicTools := 82 ;
19311: LD_ADDR_EXP 81
19315: PUSH
19316: LD_INT 82
19318: ST_TO_ADDR
// tech_Cargo := 83 ;
19319: LD_ADDR_EXP 82
19323: PUSH
19324: LD_INT 83
19326: ST_TO_ADDR
// tech_Track := 84 ;
19327: LD_ADDR_EXP 83
19331: PUSH
19332: LD_INT 84
19334: ST_TO_ADDR
// tech_Crane := 85 ;
19335: LD_ADDR_EXP 84
19339: PUSH
19340: LD_INT 85
19342: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19343: LD_ADDR_EXP 85
19347: PUSH
19348: LD_INT 86
19350: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19351: LD_ADDR_EXP 86
19355: PUSH
19356: LD_INT 87
19358: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19359: LD_ADDR_EXP 87
19363: PUSH
19364: LD_INT 88
19366: ST_TO_ADDR
// class_mastodont := 31 ;
19367: LD_ADDR_EXP 88
19371: PUSH
19372: LD_INT 31
19374: ST_TO_ADDR
// class_horse := 21 ;
19375: LD_ADDR_EXP 89
19379: PUSH
19380: LD_INT 21
19382: ST_TO_ADDR
// end ;
19383: LD_VAR 0 1
19387: RET
// every 1 do
19388: GO 19390
19390: DISABLE
// InitGlobalVariables ; end_of_file
19391: CALL 19220 0 0
19395: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19396: LD_INT 0
19398: PPUSH
19399: PPUSH
// if exist_mode then
19400: LD_VAR 0 2
19404: IFFALSE 19429
// unit := CreateCharacter ( prefix & ident ) else
19406: LD_ADDR_VAR 0 5
19410: PUSH
19411: LD_VAR 0 3
19415: PUSH
19416: LD_VAR 0 1
19420: STR
19421: PPUSH
19422: CALL_OW 34
19426: ST_TO_ADDR
19427: GO 19444
// unit := NewCharacter ( ident ) ;
19429: LD_ADDR_VAR 0 5
19433: PUSH
19434: LD_VAR 0 1
19438: PPUSH
19439: CALL_OW 25
19443: ST_TO_ADDR
// result := unit ;
19444: LD_ADDR_VAR 0 4
19448: PUSH
19449: LD_VAR 0 5
19453: ST_TO_ADDR
// end ;
19454: LD_VAR 0 4
19458: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19459: LD_INT 0
19461: PPUSH
19462: PPUSH
// if not side or not nation then
19463: LD_VAR 0 1
19467: NOT
19468: PUSH
19469: LD_VAR 0 2
19473: NOT
19474: OR
19475: IFFALSE 19479
// exit ;
19477: GO 20247
// case nation of nation_american :
19479: LD_VAR 0 2
19483: PUSH
19484: LD_INT 1
19486: DOUBLE
19487: EQUAL
19488: IFTRUE 19492
19490: GO 19706
19492: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19493: LD_ADDR_VAR 0 4
19497: PUSH
19498: LD_INT 35
19500: PUSH
19501: LD_INT 45
19503: PUSH
19504: LD_INT 46
19506: PUSH
19507: LD_INT 47
19509: PUSH
19510: LD_INT 82
19512: PUSH
19513: LD_INT 83
19515: PUSH
19516: LD_INT 84
19518: PUSH
19519: LD_INT 85
19521: PUSH
19522: LD_INT 86
19524: PUSH
19525: LD_INT 1
19527: PUSH
19528: LD_INT 2
19530: PUSH
19531: LD_INT 6
19533: PUSH
19534: LD_INT 15
19536: PUSH
19537: LD_INT 16
19539: PUSH
19540: LD_INT 7
19542: PUSH
19543: LD_INT 12
19545: PUSH
19546: LD_INT 13
19548: PUSH
19549: LD_INT 10
19551: PUSH
19552: LD_INT 14
19554: PUSH
19555: LD_INT 20
19557: PUSH
19558: LD_INT 21
19560: PUSH
19561: LD_INT 22
19563: PUSH
19564: LD_INT 25
19566: PUSH
19567: LD_INT 32
19569: PUSH
19570: LD_INT 27
19572: PUSH
19573: LD_INT 36
19575: PUSH
19576: LD_INT 69
19578: PUSH
19579: LD_INT 39
19581: PUSH
19582: LD_INT 34
19584: PUSH
19585: LD_INT 40
19587: PUSH
19588: LD_INT 48
19590: PUSH
19591: LD_INT 49
19593: PUSH
19594: LD_INT 50
19596: PUSH
19597: LD_INT 51
19599: PUSH
19600: LD_INT 52
19602: PUSH
19603: LD_INT 53
19605: PUSH
19606: LD_INT 54
19608: PUSH
19609: LD_INT 55
19611: PUSH
19612: LD_INT 56
19614: PUSH
19615: LD_INT 57
19617: PUSH
19618: LD_INT 58
19620: PUSH
19621: LD_INT 59
19623: PUSH
19624: LD_INT 60
19626: PUSH
19627: LD_INT 61
19629: PUSH
19630: LD_INT 62
19632: PUSH
19633: LD_INT 80
19635: PUSH
19636: LD_INT 82
19638: PUSH
19639: LD_INT 83
19641: PUSH
19642: LD_INT 84
19644: PUSH
19645: LD_INT 85
19647: PUSH
19648: LD_INT 86
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: ST_TO_ADDR
19704: GO 20171
19706: LD_INT 2
19708: DOUBLE
19709: EQUAL
19710: IFTRUE 19714
19712: GO 19940
19714: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
19715: LD_ADDR_VAR 0 4
19719: PUSH
19720: LD_INT 35
19722: PUSH
19723: LD_INT 45
19725: PUSH
19726: LD_INT 46
19728: PUSH
19729: LD_INT 47
19731: PUSH
19732: LD_INT 82
19734: PUSH
19735: LD_INT 83
19737: PUSH
19738: LD_INT 84
19740: PUSH
19741: LD_INT 85
19743: PUSH
19744: LD_INT 87
19746: PUSH
19747: LD_INT 70
19749: PUSH
19750: LD_INT 1
19752: PUSH
19753: LD_INT 11
19755: PUSH
19756: LD_INT 3
19758: PUSH
19759: LD_INT 4
19761: PUSH
19762: LD_INT 5
19764: PUSH
19765: LD_INT 6
19767: PUSH
19768: LD_INT 15
19770: PUSH
19771: LD_INT 18
19773: PUSH
19774: LD_INT 7
19776: PUSH
19777: LD_INT 17
19779: PUSH
19780: LD_INT 8
19782: PUSH
19783: LD_INT 20
19785: PUSH
19786: LD_INT 21
19788: PUSH
19789: LD_INT 22
19791: PUSH
19792: LD_INT 72
19794: PUSH
19795: LD_INT 26
19797: PUSH
19798: LD_INT 69
19800: PUSH
19801: LD_INT 39
19803: PUSH
19804: LD_INT 40
19806: PUSH
19807: LD_INT 41
19809: PUSH
19810: LD_INT 42
19812: PUSH
19813: LD_INT 43
19815: PUSH
19816: LD_INT 48
19818: PUSH
19819: LD_INT 49
19821: PUSH
19822: LD_INT 50
19824: PUSH
19825: LD_INT 51
19827: PUSH
19828: LD_INT 52
19830: PUSH
19831: LD_INT 53
19833: PUSH
19834: LD_INT 54
19836: PUSH
19837: LD_INT 55
19839: PUSH
19840: LD_INT 56
19842: PUSH
19843: LD_INT 60
19845: PUSH
19846: LD_INT 61
19848: PUSH
19849: LD_INT 62
19851: PUSH
19852: LD_INT 66
19854: PUSH
19855: LD_INT 67
19857: PUSH
19858: LD_INT 68
19860: PUSH
19861: LD_INT 81
19863: PUSH
19864: LD_INT 82
19866: PUSH
19867: LD_INT 83
19869: PUSH
19870: LD_INT 84
19872: PUSH
19873: LD_INT 85
19875: PUSH
19876: LD_INT 87
19878: PUSH
19879: LD_INT 88
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: ST_TO_ADDR
19938: GO 20171
19940: LD_INT 3
19942: DOUBLE
19943: EQUAL
19944: IFTRUE 19948
19946: GO 20170
19948: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
19949: LD_ADDR_VAR 0 4
19953: PUSH
19954: LD_INT 46
19956: PUSH
19957: LD_INT 47
19959: PUSH
19960: LD_INT 1
19962: PUSH
19963: LD_INT 2
19965: PUSH
19966: LD_INT 82
19968: PUSH
19969: LD_INT 83
19971: PUSH
19972: LD_INT 84
19974: PUSH
19975: LD_INT 85
19977: PUSH
19978: LD_INT 86
19980: PUSH
19981: LD_INT 11
19983: PUSH
19984: LD_INT 9
19986: PUSH
19987: LD_INT 20
19989: PUSH
19990: LD_INT 19
19992: PUSH
19993: LD_INT 21
19995: PUSH
19996: LD_INT 24
19998: PUSH
19999: LD_INT 22
20001: PUSH
20002: LD_INT 25
20004: PUSH
20005: LD_INT 28
20007: PUSH
20008: LD_INT 29
20010: PUSH
20011: LD_INT 30
20013: PUSH
20014: LD_INT 31
20016: PUSH
20017: LD_INT 37
20019: PUSH
20020: LD_INT 38
20022: PUSH
20023: LD_INT 32
20025: PUSH
20026: LD_INT 27
20028: PUSH
20029: LD_INT 33
20031: PUSH
20032: LD_INT 69
20034: PUSH
20035: LD_INT 39
20037: PUSH
20038: LD_INT 34
20040: PUSH
20041: LD_INT 40
20043: PUSH
20044: LD_INT 71
20046: PUSH
20047: LD_INT 23
20049: PUSH
20050: LD_INT 44
20052: PUSH
20053: LD_INT 48
20055: PUSH
20056: LD_INT 49
20058: PUSH
20059: LD_INT 50
20061: PUSH
20062: LD_INT 51
20064: PUSH
20065: LD_INT 52
20067: PUSH
20068: LD_INT 53
20070: PUSH
20071: LD_INT 54
20073: PUSH
20074: LD_INT 55
20076: PUSH
20077: LD_INT 56
20079: PUSH
20080: LD_INT 57
20082: PUSH
20083: LD_INT 58
20085: PUSH
20086: LD_INT 59
20088: PUSH
20089: LD_INT 63
20091: PUSH
20092: LD_INT 64
20094: PUSH
20095: LD_INT 65
20097: PUSH
20098: LD_INT 82
20100: PUSH
20101: LD_INT 83
20103: PUSH
20104: LD_INT 84
20106: PUSH
20107: LD_INT 85
20109: PUSH
20110: LD_INT 86
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: ST_TO_ADDR
20168: GO 20171
20170: POP
// if state > - 1 and state < 3 then
20171: LD_VAR 0 3
20175: PUSH
20176: LD_INT 1
20178: NEG
20179: GREATER
20180: PUSH
20181: LD_VAR 0 3
20185: PUSH
20186: LD_INT 3
20188: LESS
20189: AND
20190: IFFALSE 20247
// for i in result do
20192: LD_ADDR_VAR 0 5
20196: PUSH
20197: LD_VAR 0 4
20201: PUSH
20202: FOR_IN
20203: IFFALSE 20245
// if GetTech ( i , side ) <> state then
20205: LD_VAR 0 5
20209: PPUSH
20210: LD_VAR 0 1
20214: PPUSH
20215: CALL_OW 321
20219: PUSH
20220: LD_VAR 0 3
20224: NONEQUAL
20225: IFFALSE 20243
// result := result diff i ;
20227: LD_ADDR_VAR 0 4
20231: PUSH
20232: LD_VAR 0 4
20236: PUSH
20237: LD_VAR 0 5
20241: DIFF
20242: ST_TO_ADDR
20243: GO 20202
20245: POP
20246: POP
// end ;
20247: LD_VAR 0 4
20251: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20252: LD_INT 0
20254: PPUSH
20255: PPUSH
20256: PPUSH
// result := true ;
20257: LD_ADDR_VAR 0 3
20261: PUSH
20262: LD_INT 1
20264: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20265: LD_ADDR_VAR 0 5
20269: PUSH
20270: LD_VAR 0 2
20274: PPUSH
20275: CALL_OW 480
20279: ST_TO_ADDR
// if not tmp then
20280: LD_VAR 0 5
20284: NOT
20285: IFFALSE 20289
// exit ;
20287: GO 20338
// for i in tmp do
20289: LD_ADDR_VAR 0 4
20293: PUSH
20294: LD_VAR 0 5
20298: PUSH
20299: FOR_IN
20300: IFFALSE 20336
// if GetTech ( i , side ) <> state_researched then
20302: LD_VAR 0 4
20306: PPUSH
20307: LD_VAR 0 1
20311: PPUSH
20312: CALL_OW 321
20316: PUSH
20317: LD_INT 2
20319: NONEQUAL
20320: IFFALSE 20334
// begin result := false ;
20322: LD_ADDR_VAR 0 3
20326: PUSH
20327: LD_INT 0
20329: ST_TO_ADDR
// exit ;
20330: POP
20331: POP
20332: GO 20338
// end ;
20334: GO 20299
20336: POP
20337: POP
// end ;
20338: LD_VAR 0 3
20342: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20343: LD_INT 0
20345: PPUSH
20346: PPUSH
20347: PPUSH
20348: PPUSH
20349: PPUSH
20350: PPUSH
20351: PPUSH
20352: PPUSH
20353: PPUSH
20354: PPUSH
20355: PPUSH
20356: PPUSH
20357: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20358: LD_VAR 0 1
20362: NOT
20363: PUSH
20364: LD_VAR 0 1
20368: PPUSH
20369: CALL_OW 257
20373: PUSH
20374: LD_INT 9
20376: NONEQUAL
20377: OR
20378: IFFALSE 20382
// exit ;
20380: GO 20955
// side := GetSide ( unit ) ;
20382: LD_ADDR_VAR 0 9
20386: PUSH
20387: LD_VAR 0 1
20391: PPUSH
20392: CALL_OW 255
20396: ST_TO_ADDR
// tech_space := tech_spacanom ;
20397: LD_ADDR_VAR 0 12
20401: PUSH
20402: LD_INT 29
20404: ST_TO_ADDR
// tech_time := tech_taurad ;
20405: LD_ADDR_VAR 0 13
20409: PUSH
20410: LD_INT 28
20412: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20413: LD_ADDR_VAR 0 11
20417: PUSH
20418: LD_VAR 0 1
20422: PPUSH
20423: CALL_OW 310
20427: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20428: LD_VAR 0 11
20432: PPUSH
20433: CALL_OW 247
20437: PUSH
20438: LD_INT 2
20440: EQUAL
20441: IFFALSE 20445
// exit ;
20443: GO 20955
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20445: LD_ADDR_VAR 0 8
20449: PUSH
20450: LD_INT 81
20452: PUSH
20453: LD_VAR 0 9
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: PUSH
20462: LD_INT 3
20464: PUSH
20465: LD_INT 21
20467: PUSH
20468: LD_INT 3
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PPUSH
20483: CALL_OW 69
20487: ST_TO_ADDR
// if not tmp then
20488: LD_VAR 0 8
20492: NOT
20493: IFFALSE 20497
// exit ;
20495: GO 20955
// if in_unit then
20497: LD_VAR 0 11
20501: IFFALSE 20525
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20503: LD_ADDR_VAR 0 10
20507: PUSH
20508: LD_VAR 0 8
20512: PPUSH
20513: LD_VAR 0 11
20517: PPUSH
20518: CALL_OW 74
20522: ST_TO_ADDR
20523: GO 20545
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20525: LD_ADDR_VAR 0 10
20529: PUSH
20530: LD_VAR 0 8
20534: PPUSH
20535: LD_VAR 0 1
20539: PPUSH
20540: CALL_OW 74
20544: ST_TO_ADDR
// if not enemy then
20545: LD_VAR 0 10
20549: NOT
20550: IFFALSE 20554
// exit ;
20552: GO 20955
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20554: LD_VAR 0 11
20558: PUSH
20559: LD_VAR 0 11
20563: PPUSH
20564: LD_VAR 0 10
20568: PPUSH
20569: CALL_OW 296
20573: PUSH
20574: LD_INT 13
20576: GREATER
20577: AND
20578: PUSH
20579: LD_VAR 0 1
20583: PPUSH
20584: LD_VAR 0 10
20588: PPUSH
20589: CALL_OW 296
20593: PUSH
20594: LD_INT 12
20596: GREATER
20597: OR
20598: IFFALSE 20602
// exit ;
20600: GO 20955
// missile := [ 1 ] ;
20602: LD_ADDR_VAR 0 14
20606: PUSH
20607: LD_INT 1
20609: PUSH
20610: EMPTY
20611: LIST
20612: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20613: LD_VAR 0 9
20617: PPUSH
20618: LD_VAR 0 12
20622: PPUSH
20623: CALL_OW 325
20627: IFFALSE 20656
// missile := Replace ( missile , missile + 1 , 2 ) ;
20629: LD_ADDR_VAR 0 14
20633: PUSH
20634: LD_VAR 0 14
20638: PPUSH
20639: LD_VAR 0 14
20643: PUSH
20644: LD_INT 1
20646: PLUS
20647: PPUSH
20648: LD_INT 2
20650: PPUSH
20651: CALL_OW 1
20655: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20656: LD_VAR 0 9
20660: PPUSH
20661: LD_VAR 0 13
20665: PPUSH
20666: CALL_OW 325
20670: PUSH
20671: LD_VAR 0 10
20675: PPUSH
20676: CALL_OW 255
20680: PPUSH
20681: LD_VAR 0 13
20685: PPUSH
20686: CALL_OW 325
20690: NOT
20691: AND
20692: IFFALSE 20721
// missile := Replace ( missile , missile + 1 , 3 ) ;
20694: LD_ADDR_VAR 0 14
20698: PUSH
20699: LD_VAR 0 14
20703: PPUSH
20704: LD_VAR 0 14
20708: PUSH
20709: LD_INT 1
20711: PLUS
20712: PPUSH
20713: LD_INT 3
20715: PPUSH
20716: CALL_OW 1
20720: ST_TO_ADDR
// if missile < 2 then
20721: LD_VAR 0 14
20725: PUSH
20726: LD_INT 2
20728: LESS
20729: IFFALSE 20733
// exit ;
20731: GO 20955
// x := GetX ( enemy ) ;
20733: LD_ADDR_VAR 0 4
20737: PUSH
20738: LD_VAR 0 10
20742: PPUSH
20743: CALL_OW 250
20747: ST_TO_ADDR
// y := GetY ( enemy ) ;
20748: LD_ADDR_VAR 0 5
20752: PUSH
20753: LD_VAR 0 10
20757: PPUSH
20758: CALL_OW 251
20762: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20763: LD_ADDR_VAR 0 6
20767: PUSH
20768: LD_VAR 0 4
20772: PUSH
20773: LD_INT 1
20775: NEG
20776: PPUSH
20777: LD_INT 1
20779: PPUSH
20780: CALL_OW 12
20784: PLUS
20785: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20786: LD_ADDR_VAR 0 7
20790: PUSH
20791: LD_VAR 0 5
20795: PUSH
20796: LD_INT 1
20798: NEG
20799: PPUSH
20800: LD_INT 1
20802: PPUSH
20803: CALL_OW 12
20807: PLUS
20808: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20809: LD_VAR 0 6
20813: PPUSH
20814: LD_VAR 0 7
20818: PPUSH
20819: CALL_OW 488
20823: NOT
20824: IFFALSE 20846
// begin _x := x ;
20826: LD_ADDR_VAR 0 6
20830: PUSH
20831: LD_VAR 0 4
20835: ST_TO_ADDR
// _y := y ;
20836: LD_ADDR_VAR 0 7
20840: PUSH
20841: LD_VAR 0 5
20845: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20846: LD_ADDR_VAR 0 3
20850: PUSH
20851: LD_INT 1
20853: PPUSH
20854: LD_VAR 0 14
20858: PPUSH
20859: CALL_OW 12
20863: ST_TO_ADDR
// case i of 1 :
20864: LD_VAR 0 3
20868: PUSH
20869: LD_INT 1
20871: DOUBLE
20872: EQUAL
20873: IFTRUE 20877
20875: GO 20894
20877: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20878: LD_VAR 0 1
20882: PPUSH
20883: LD_VAR 0 10
20887: PPUSH
20888: CALL_OW 115
20892: GO 20955
20894: LD_INT 2
20896: DOUBLE
20897: EQUAL
20898: IFTRUE 20902
20900: GO 20924
20902: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20903: LD_VAR 0 1
20907: PPUSH
20908: LD_VAR 0 6
20912: PPUSH
20913: LD_VAR 0 7
20917: PPUSH
20918: CALL_OW 153
20922: GO 20955
20924: LD_INT 3
20926: DOUBLE
20927: EQUAL
20928: IFTRUE 20932
20930: GO 20954
20932: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20933: LD_VAR 0 1
20937: PPUSH
20938: LD_VAR 0 6
20942: PPUSH
20943: LD_VAR 0 7
20947: PPUSH
20948: CALL_OW 154
20952: GO 20955
20954: POP
// end ;
20955: LD_VAR 0 2
20959: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20960: LD_INT 0
20962: PPUSH
20963: PPUSH
20964: PPUSH
20965: PPUSH
20966: PPUSH
20967: PPUSH
// if not unit or not building then
20968: LD_VAR 0 1
20972: NOT
20973: PUSH
20974: LD_VAR 0 2
20978: NOT
20979: OR
20980: IFFALSE 20984
// exit ;
20982: GO 21142
// x := GetX ( building ) ;
20984: LD_ADDR_VAR 0 5
20988: PUSH
20989: LD_VAR 0 2
20993: PPUSH
20994: CALL_OW 250
20998: ST_TO_ADDR
// y := GetY ( building ) ;
20999: LD_ADDR_VAR 0 6
21003: PUSH
21004: LD_VAR 0 2
21008: PPUSH
21009: CALL_OW 251
21013: ST_TO_ADDR
// for i = 0 to 5 do
21014: LD_ADDR_VAR 0 4
21018: PUSH
21019: DOUBLE
21020: LD_INT 0
21022: DEC
21023: ST_TO_ADDR
21024: LD_INT 5
21026: PUSH
21027: FOR_TO
21028: IFFALSE 21140
// begin _x := ShiftX ( x , i , 3 ) ;
21030: LD_ADDR_VAR 0 7
21034: PUSH
21035: LD_VAR 0 5
21039: PPUSH
21040: LD_VAR 0 4
21044: PPUSH
21045: LD_INT 3
21047: PPUSH
21048: CALL_OW 272
21052: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21053: LD_ADDR_VAR 0 8
21057: PUSH
21058: LD_VAR 0 6
21062: PPUSH
21063: LD_VAR 0 4
21067: PPUSH
21068: LD_INT 3
21070: PPUSH
21071: CALL_OW 273
21075: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21076: LD_VAR 0 7
21080: PPUSH
21081: LD_VAR 0 8
21085: PPUSH
21086: CALL_OW 488
21090: NOT
21091: IFFALSE 21095
// continue ;
21093: GO 21027
// if HexInfo ( _x , _y ) = 0 then
21095: LD_VAR 0 7
21099: PPUSH
21100: LD_VAR 0 8
21104: PPUSH
21105: CALL_OW 428
21109: PUSH
21110: LD_INT 0
21112: EQUAL
21113: IFFALSE 21138
// begin ComMoveXY ( unit , _x , _y ) ;
21115: LD_VAR 0 1
21119: PPUSH
21120: LD_VAR 0 7
21124: PPUSH
21125: LD_VAR 0 8
21129: PPUSH
21130: CALL_OW 111
// exit ;
21134: POP
21135: POP
21136: GO 21142
// end ; end ;
21138: GO 21027
21140: POP
21141: POP
// end ;
21142: LD_VAR 0 3
21146: RET
// export function ScanBase ( side , base_area ) ; begin
21147: LD_INT 0
21149: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21150: LD_ADDR_VAR 0 3
21154: PUSH
21155: LD_VAR 0 2
21159: PPUSH
21160: LD_INT 81
21162: PUSH
21163: LD_VAR 0 1
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PPUSH
21172: CALL_OW 70
21176: ST_TO_ADDR
// end ;
21177: LD_VAR 0 3
21181: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21182: LD_INT 0
21184: PPUSH
21185: PPUSH
21186: PPUSH
21187: PPUSH
// result := false ;
21188: LD_ADDR_VAR 0 2
21192: PUSH
21193: LD_INT 0
21195: ST_TO_ADDR
// side := GetSide ( unit ) ;
21196: LD_ADDR_VAR 0 3
21200: PUSH
21201: LD_VAR 0 1
21205: PPUSH
21206: CALL_OW 255
21210: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21211: LD_ADDR_VAR 0 4
21215: PUSH
21216: LD_VAR 0 1
21220: PPUSH
21221: CALL_OW 248
21225: ST_TO_ADDR
// case nat of 1 :
21226: LD_VAR 0 4
21230: PUSH
21231: LD_INT 1
21233: DOUBLE
21234: EQUAL
21235: IFTRUE 21239
21237: GO 21250
21239: POP
// tech := tech_lassight ; 2 :
21240: LD_ADDR_VAR 0 5
21244: PUSH
21245: LD_INT 12
21247: ST_TO_ADDR
21248: GO 21289
21250: LD_INT 2
21252: DOUBLE
21253: EQUAL
21254: IFTRUE 21258
21256: GO 21269
21258: POP
// tech := tech_mortar ; 3 :
21259: LD_ADDR_VAR 0 5
21263: PUSH
21264: LD_INT 41
21266: ST_TO_ADDR
21267: GO 21289
21269: LD_INT 3
21271: DOUBLE
21272: EQUAL
21273: IFTRUE 21277
21275: GO 21288
21277: POP
// tech := tech_bazooka ; end ;
21278: LD_ADDR_VAR 0 5
21282: PUSH
21283: LD_INT 44
21285: ST_TO_ADDR
21286: GO 21289
21288: POP
// if Researched ( side , tech ) then
21289: LD_VAR 0 3
21293: PPUSH
21294: LD_VAR 0 5
21298: PPUSH
21299: CALL_OW 325
21303: IFFALSE 21330
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21305: LD_ADDR_VAR 0 2
21309: PUSH
21310: LD_INT 5
21312: PUSH
21313: LD_INT 8
21315: PUSH
21316: LD_INT 9
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: LIST
21323: PUSH
21324: LD_VAR 0 4
21328: ARRAY
21329: ST_TO_ADDR
// end ;
21330: LD_VAR 0 2
21334: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21335: LD_INT 0
21337: PPUSH
21338: PPUSH
21339: PPUSH
// if not mines then
21340: LD_VAR 0 2
21344: NOT
21345: IFFALSE 21349
// exit ;
21347: GO 21493
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21349: LD_ADDR_VAR 0 5
21353: PUSH
21354: LD_INT 81
21356: PUSH
21357: LD_VAR 0 1
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: LD_INT 3
21368: PUSH
21369: LD_INT 21
21371: PUSH
21372: LD_INT 3
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PPUSH
21387: CALL_OW 69
21391: ST_TO_ADDR
// for i in mines do
21392: LD_ADDR_VAR 0 4
21396: PUSH
21397: LD_VAR 0 2
21401: PUSH
21402: FOR_IN
21403: IFFALSE 21491
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21405: LD_VAR 0 4
21409: PUSH
21410: LD_INT 1
21412: ARRAY
21413: PPUSH
21414: LD_VAR 0 4
21418: PUSH
21419: LD_INT 2
21421: ARRAY
21422: PPUSH
21423: CALL_OW 458
21427: NOT
21428: IFFALSE 21432
// continue ;
21430: GO 21402
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21432: LD_VAR 0 4
21436: PUSH
21437: LD_INT 1
21439: ARRAY
21440: PPUSH
21441: LD_VAR 0 4
21445: PUSH
21446: LD_INT 2
21448: ARRAY
21449: PPUSH
21450: CALL_OW 428
21454: PUSH
21455: LD_VAR 0 5
21459: IN
21460: IFFALSE 21489
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21462: LD_VAR 0 4
21466: PUSH
21467: LD_INT 1
21469: ARRAY
21470: PPUSH
21471: LD_VAR 0 4
21475: PUSH
21476: LD_INT 2
21478: ARRAY
21479: PPUSH
21480: LD_VAR 0 1
21484: PPUSH
21485: CALL_OW 456
// end ;
21489: GO 21402
21491: POP
21492: POP
// end ;
21493: LD_VAR 0 3
21497: RET
// export function Count ( array ) ; var i ; begin
21498: LD_INT 0
21500: PPUSH
21501: PPUSH
// result := 0 ;
21502: LD_ADDR_VAR 0 2
21506: PUSH
21507: LD_INT 0
21509: ST_TO_ADDR
// for i in array do
21510: LD_ADDR_VAR 0 3
21514: PUSH
21515: LD_VAR 0 1
21519: PUSH
21520: FOR_IN
21521: IFFALSE 21545
// if i then
21523: LD_VAR 0 3
21527: IFFALSE 21543
// result := result + 1 ;
21529: LD_ADDR_VAR 0 2
21533: PUSH
21534: LD_VAR 0 2
21538: PUSH
21539: LD_INT 1
21541: PLUS
21542: ST_TO_ADDR
21543: GO 21520
21545: POP
21546: POP
// end ;
21547: LD_VAR 0 2
21551: RET
// export function IsEmpty ( building ) ; begin
21552: LD_INT 0
21554: PPUSH
// if not building then
21555: LD_VAR 0 1
21559: NOT
21560: IFFALSE 21564
// exit ;
21562: GO 21607
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
21564: LD_ADDR_VAR 0 2
21568: PUSH
21569: LD_VAR 0 1
21573: PUSH
21574: LD_INT 22
21576: PUSH
21577: LD_VAR 0 1
21581: PPUSH
21582: CALL_OW 255
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 58
21593: PUSH
21594: EMPTY
21595: LIST
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PPUSH
21601: CALL_OW 69
21605: IN
21606: ST_TO_ADDR
// end ;
21607: LD_VAR 0 2
21611: RET
// export function IsNotFull ( building ) ; begin
21612: LD_INT 0
21614: PPUSH
// if not building then
21615: LD_VAR 0 1
21619: NOT
21620: IFFALSE 21624
// exit ;
21622: GO 21643
// result := UnitsInside ( building ) < 6 ;
21624: LD_ADDR_VAR 0 2
21628: PUSH
21629: LD_VAR 0 1
21633: PPUSH
21634: CALL_OW 313
21638: PUSH
21639: LD_INT 6
21641: LESS
21642: ST_TO_ADDR
// end ;
21643: LD_VAR 0 2
21647: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21648: LD_INT 0
21650: PPUSH
21651: PPUSH
21652: PPUSH
21653: PPUSH
// tmp := [ ] ;
21654: LD_ADDR_VAR 0 3
21658: PUSH
21659: EMPTY
21660: ST_TO_ADDR
// list := [ ] ;
21661: LD_ADDR_VAR 0 5
21665: PUSH
21666: EMPTY
21667: ST_TO_ADDR
// for i = 16 to 25 do
21668: LD_ADDR_VAR 0 4
21672: PUSH
21673: DOUBLE
21674: LD_INT 16
21676: DEC
21677: ST_TO_ADDR
21678: LD_INT 25
21680: PUSH
21681: FOR_TO
21682: IFFALSE 21755
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21684: LD_ADDR_VAR 0 3
21688: PUSH
21689: LD_VAR 0 3
21693: PUSH
21694: LD_INT 22
21696: PUSH
21697: LD_VAR 0 1
21701: PPUSH
21702: CALL_OW 255
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PUSH
21711: LD_INT 91
21713: PUSH
21714: LD_VAR 0 1
21718: PUSH
21719: LD_INT 6
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: LIST
21726: PUSH
21727: LD_INT 30
21729: PUSH
21730: LD_VAR 0 4
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: LIST
21743: PUSH
21744: EMPTY
21745: LIST
21746: PPUSH
21747: CALL_OW 69
21751: ADD
21752: ST_TO_ADDR
21753: GO 21681
21755: POP
21756: POP
// for i = 1 to tmp do
21757: LD_ADDR_VAR 0 4
21761: PUSH
21762: DOUBLE
21763: LD_INT 1
21765: DEC
21766: ST_TO_ADDR
21767: LD_VAR 0 3
21771: PUSH
21772: FOR_TO
21773: IFFALSE 21861
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
21775: LD_ADDR_VAR 0 5
21779: PUSH
21780: LD_VAR 0 5
21784: PUSH
21785: LD_VAR 0 3
21789: PUSH
21790: LD_VAR 0 4
21794: ARRAY
21795: PPUSH
21796: CALL_OW 266
21800: PUSH
21801: LD_VAR 0 3
21805: PUSH
21806: LD_VAR 0 4
21810: ARRAY
21811: PPUSH
21812: CALL_OW 250
21816: PUSH
21817: LD_VAR 0 3
21821: PUSH
21822: LD_VAR 0 4
21826: ARRAY
21827: PPUSH
21828: CALL_OW 251
21832: PUSH
21833: LD_VAR 0 3
21837: PUSH
21838: LD_VAR 0 4
21842: ARRAY
21843: PPUSH
21844: CALL_OW 254
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: PUSH
21855: EMPTY
21856: LIST
21857: ADD
21858: ST_TO_ADDR
21859: GO 21772
21861: POP
21862: POP
// result := list ;
21863: LD_ADDR_VAR 0 2
21867: PUSH
21868: LD_VAR 0 5
21872: ST_TO_ADDR
// end ;
21873: LD_VAR 0 2
21877: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
21878: LD_INT 0
21880: PPUSH
21881: PPUSH
21882: PPUSH
21883: PPUSH
21884: PPUSH
21885: PPUSH
21886: PPUSH
// if not factory then
21887: LD_VAR 0 1
21891: NOT
21892: IFFALSE 21896
// exit ;
21894: GO 22489
// if control = control_apeman then
21896: LD_VAR 0 4
21900: PUSH
21901: LD_INT 5
21903: EQUAL
21904: IFFALSE 22013
// begin tmp := UnitsInside ( factory ) ;
21906: LD_ADDR_VAR 0 8
21910: PUSH
21911: LD_VAR 0 1
21915: PPUSH
21916: CALL_OW 313
21920: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
21921: LD_VAR 0 8
21925: PPUSH
21926: LD_INT 25
21928: PUSH
21929: LD_INT 12
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PPUSH
21936: CALL_OW 72
21940: NOT
21941: IFFALSE 21951
// control := control_manual ;
21943: LD_ADDR_VAR 0 4
21947: PUSH
21948: LD_INT 1
21950: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
21951: LD_ADDR_VAR 0 8
21955: PUSH
21956: LD_VAR 0 1
21960: PPUSH
21961: CALL 21648 0 1
21965: ST_TO_ADDR
// if tmp then
21966: LD_VAR 0 8
21970: IFFALSE 22013
// begin for i in tmp do
21972: LD_ADDR_VAR 0 7
21976: PUSH
21977: LD_VAR 0 8
21981: PUSH
21982: FOR_IN
21983: IFFALSE 22011
// if i [ 1 ] = b_ext_radio then
21985: LD_VAR 0 7
21989: PUSH
21990: LD_INT 1
21992: ARRAY
21993: PUSH
21994: LD_INT 22
21996: EQUAL
21997: IFFALSE 22009
// begin control := control_remote ;
21999: LD_ADDR_VAR 0 4
22003: PUSH
22004: LD_INT 2
22006: ST_TO_ADDR
// break ;
22007: GO 22011
// end ;
22009: GO 21982
22011: POP
22012: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22013: LD_VAR 0 1
22017: PPUSH
22018: LD_VAR 0 2
22022: PPUSH
22023: LD_VAR 0 3
22027: PPUSH
22028: LD_VAR 0 4
22032: PPUSH
22033: LD_VAR 0 5
22037: PPUSH
22038: CALL_OW 448
22042: IFFALSE 22077
// begin result := [ chassis , engine , control , weapon ] ;
22044: LD_ADDR_VAR 0 6
22048: PUSH
22049: LD_VAR 0 2
22053: PUSH
22054: LD_VAR 0 3
22058: PUSH
22059: LD_VAR 0 4
22063: PUSH
22064: LD_VAR 0 5
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: ST_TO_ADDR
// exit ;
22075: GO 22489
// end ; _chassis := AvailableChassisList ( factory ) ;
22077: LD_ADDR_VAR 0 9
22081: PUSH
22082: LD_VAR 0 1
22086: PPUSH
22087: CALL_OW 475
22091: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22092: LD_ADDR_VAR 0 11
22096: PUSH
22097: LD_VAR 0 1
22101: PPUSH
22102: CALL_OW 476
22106: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22107: LD_ADDR_VAR 0 12
22111: PUSH
22112: LD_VAR 0 1
22116: PPUSH
22117: CALL_OW 477
22121: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22122: LD_ADDR_VAR 0 10
22126: PUSH
22127: LD_VAR 0 1
22131: PPUSH
22132: CALL_OW 478
22136: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22137: LD_VAR 0 9
22141: NOT
22142: PUSH
22143: LD_VAR 0 11
22147: NOT
22148: OR
22149: PUSH
22150: LD_VAR 0 12
22154: NOT
22155: OR
22156: PUSH
22157: LD_VAR 0 10
22161: NOT
22162: OR
22163: IFFALSE 22198
// begin result := [ chassis , engine , control , weapon ] ;
22165: LD_ADDR_VAR 0 6
22169: PUSH
22170: LD_VAR 0 2
22174: PUSH
22175: LD_VAR 0 3
22179: PUSH
22180: LD_VAR 0 4
22184: PUSH
22185: LD_VAR 0 5
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: ST_TO_ADDR
// exit ;
22196: GO 22489
// end ; if not chassis in _chassis then
22198: LD_VAR 0 2
22202: PUSH
22203: LD_VAR 0 9
22207: IN
22208: NOT
22209: IFFALSE 22235
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22211: LD_ADDR_VAR 0 2
22215: PUSH
22216: LD_VAR 0 9
22220: PUSH
22221: LD_INT 1
22223: PPUSH
22224: LD_VAR 0 9
22228: PPUSH
22229: CALL_OW 12
22233: ARRAY
22234: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22235: LD_VAR 0 2
22239: PPUSH
22240: LD_VAR 0 3
22244: PPUSH
22245: CALL 22494 0 2
22249: NOT
22250: IFFALSE 22309
// repeat engine := _engine [ 1 ] ;
22252: LD_ADDR_VAR 0 3
22256: PUSH
22257: LD_VAR 0 11
22261: PUSH
22262: LD_INT 1
22264: ARRAY
22265: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22266: LD_ADDR_VAR 0 11
22270: PUSH
22271: LD_VAR 0 11
22275: PPUSH
22276: LD_INT 1
22278: PPUSH
22279: CALL_OW 3
22283: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22284: LD_VAR 0 2
22288: PPUSH
22289: LD_VAR 0 3
22293: PPUSH
22294: CALL 22494 0 2
22298: PUSH
22299: LD_VAR 0 11
22303: PUSH
22304: EMPTY
22305: EQUAL
22306: OR
22307: IFFALSE 22252
// if not control in _control then
22309: LD_VAR 0 4
22313: PUSH
22314: LD_VAR 0 12
22318: IN
22319: NOT
22320: IFFALSE 22346
// control := _control [ rand ( 1 , _control ) ] ;
22322: LD_ADDR_VAR 0 4
22326: PUSH
22327: LD_VAR 0 12
22331: PUSH
22332: LD_INT 1
22334: PPUSH
22335: LD_VAR 0 12
22339: PPUSH
22340: CALL_OW 12
22344: ARRAY
22345: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22346: LD_VAR 0 2
22350: PPUSH
22351: LD_VAR 0 5
22355: PPUSH
22356: CALL 22714 0 2
22360: NOT
22361: IFFALSE 22420
// repeat weapon := _weapon [ 1 ] ;
22363: LD_ADDR_VAR 0 5
22367: PUSH
22368: LD_VAR 0 10
22372: PUSH
22373: LD_INT 1
22375: ARRAY
22376: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22377: LD_ADDR_VAR 0 10
22381: PUSH
22382: LD_VAR 0 10
22386: PPUSH
22387: LD_INT 1
22389: PPUSH
22390: CALL_OW 3
22394: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22395: LD_VAR 0 2
22399: PPUSH
22400: LD_VAR 0 5
22404: PPUSH
22405: CALL 22714 0 2
22409: PUSH
22410: LD_VAR 0 10
22414: PUSH
22415: EMPTY
22416: EQUAL
22417: OR
22418: IFFALSE 22363
// result := [ ] ;
22420: LD_ADDR_VAR 0 6
22424: PUSH
22425: EMPTY
22426: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22427: LD_VAR 0 1
22431: PPUSH
22432: LD_VAR 0 2
22436: PPUSH
22437: LD_VAR 0 3
22441: PPUSH
22442: LD_VAR 0 4
22446: PPUSH
22447: LD_VAR 0 5
22451: PPUSH
22452: CALL_OW 448
22456: IFFALSE 22489
// result := [ chassis , engine , control , weapon ] ;
22458: LD_ADDR_VAR 0 6
22462: PUSH
22463: LD_VAR 0 2
22467: PUSH
22468: LD_VAR 0 3
22472: PUSH
22473: LD_VAR 0 4
22477: PUSH
22478: LD_VAR 0 5
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: ST_TO_ADDR
// end ;
22489: LD_VAR 0 6
22493: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22494: LD_INT 0
22496: PPUSH
// if not chassis or not engine then
22497: LD_VAR 0 1
22501: NOT
22502: PUSH
22503: LD_VAR 0 2
22507: NOT
22508: OR
22509: IFFALSE 22513
// exit ;
22511: GO 22709
// case engine of engine_solar :
22513: LD_VAR 0 2
22517: PUSH
22518: LD_INT 2
22520: DOUBLE
22521: EQUAL
22522: IFTRUE 22526
22524: GO 22564
22526: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
22527: LD_ADDR_VAR 0 3
22531: PUSH
22532: LD_INT 11
22534: PUSH
22535: LD_INT 12
22537: PUSH
22538: LD_INT 13
22540: PUSH
22541: LD_INT 14
22543: PUSH
22544: LD_INT 1
22546: PUSH
22547: LD_INT 2
22549: PUSH
22550: LD_INT 3
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: ST_TO_ADDR
22562: GO 22693
22564: LD_INT 1
22566: DOUBLE
22567: EQUAL
22568: IFTRUE 22572
22570: GO 22634
22572: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
22573: LD_ADDR_VAR 0 3
22577: PUSH
22578: LD_INT 11
22580: PUSH
22581: LD_INT 12
22583: PUSH
22584: LD_INT 13
22586: PUSH
22587: LD_INT 14
22589: PUSH
22590: LD_INT 1
22592: PUSH
22593: LD_INT 2
22595: PUSH
22596: LD_INT 3
22598: PUSH
22599: LD_INT 4
22601: PUSH
22602: LD_INT 5
22604: PUSH
22605: LD_INT 21
22607: PUSH
22608: LD_INT 23
22610: PUSH
22611: LD_INT 22
22613: PUSH
22614: LD_INT 24
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: ST_TO_ADDR
22632: GO 22693
22634: LD_INT 3
22636: DOUBLE
22637: EQUAL
22638: IFTRUE 22642
22640: GO 22692
22642: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22643: LD_ADDR_VAR 0 3
22647: PUSH
22648: LD_INT 13
22650: PUSH
22651: LD_INT 14
22653: PUSH
22654: LD_INT 2
22656: PUSH
22657: LD_INT 3
22659: PUSH
22660: LD_INT 4
22662: PUSH
22663: LD_INT 5
22665: PUSH
22666: LD_INT 21
22668: PUSH
22669: LD_INT 22
22671: PUSH
22672: LD_INT 23
22674: PUSH
22675: LD_INT 24
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: ST_TO_ADDR
22690: GO 22693
22692: POP
// result := ( chassis in result ) ;
22693: LD_ADDR_VAR 0 3
22697: PUSH
22698: LD_VAR 0 1
22702: PUSH
22703: LD_VAR 0 3
22707: IN
22708: ST_TO_ADDR
// end ;
22709: LD_VAR 0 3
22713: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
22714: LD_INT 0
22716: PPUSH
// if not chassis or not weapon then
22717: LD_VAR 0 1
22721: NOT
22722: PUSH
22723: LD_VAR 0 2
22727: NOT
22728: OR
22729: IFFALSE 22733
// exit ;
22731: GO 23795
// case weapon of us_machine_gun :
22733: LD_VAR 0 2
22737: PUSH
22738: LD_INT 2
22740: DOUBLE
22741: EQUAL
22742: IFTRUE 22746
22744: GO 22776
22746: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
22747: LD_ADDR_VAR 0 3
22751: PUSH
22752: LD_INT 1
22754: PUSH
22755: LD_INT 2
22757: PUSH
22758: LD_INT 3
22760: PUSH
22761: LD_INT 4
22763: PUSH
22764: LD_INT 5
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: ST_TO_ADDR
22774: GO 23779
22776: LD_INT 3
22778: DOUBLE
22779: EQUAL
22780: IFTRUE 22784
22782: GO 22814
22784: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
22785: LD_ADDR_VAR 0 3
22789: PUSH
22790: LD_INT 1
22792: PUSH
22793: LD_INT 2
22795: PUSH
22796: LD_INT 3
22798: PUSH
22799: LD_INT 4
22801: PUSH
22802: LD_INT 5
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: ST_TO_ADDR
22812: GO 23779
22814: LD_INT 11
22816: DOUBLE
22817: EQUAL
22818: IFTRUE 22822
22820: GO 22852
22822: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
22823: LD_ADDR_VAR 0 3
22827: PUSH
22828: LD_INT 1
22830: PUSH
22831: LD_INT 2
22833: PUSH
22834: LD_INT 3
22836: PUSH
22837: LD_INT 4
22839: PUSH
22840: LD_INT 5
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: ST_TO_ADDR
22850: GO 23779
22852: LD_INT 4
22854: DOUBLE
22855: EQUAL
22856: IFTRUE 22860
22858: GO 22886
22860: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
22861: LD_ADDR_VAR 0 3
22865: PUSH
22866: LD_INT 2
22868: PUSH
22869: LD_INT 3
22871: PUSH
22872: LD_INT 4
22874: PUSH
22875: LD_INT 5
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: ST_TO_ADDR
22884: GO 23779
22886: LD_INT 5
22888: DOUBLE
22889: EQUAL
22890: IFTRUE 22894
22892: GO 22920
22894: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
22895: LD_ADDR_VAR 0 3
22899: PUSH
22900: LD_INT 2
22902: PUSH
22903: LD_INT 3
22905: PUSH
22906: LD_INT 4
22908: PUSH
22909: LD_INT 5
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: ST_TO_ADDR
22918: GO 23779
22920: LD_INT 9
22922: DOUBLE
22923: EQUAL
22924: IFTRUE 22928
22926: GO 22954
22928: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
22929: LD_ADDR_VAR 0 3
22933: PUSH
22934: LD_INT 2
22936: PUSH
22937: LD_INT 3
22939: PUSH
22940: LD_INT 4
22942: PUSH
22943: LD_INT 5
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: ST_TO_ADDR
22952: GO 23779
22954: LD_INT 7
22956: DOUBLE
22957: EQUAL
22958: IFTRUE 22962
22960: GO 22988
22962: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
22963: LD_ADDR_VAR 0 3
22967: PUSH
22968: LD_INT 2
22970: PUSH
22971: LD_INT 3
22973: PUSH
22974: LD_INT 4
22976: PUSH
22977: LD_INT 5
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: ST_TO_ADDR
22986: GO 23779
22988: LD_INT 12
22990: DOUBLE
22991: EQUAL
22992: IFTRUE 22996
22994: GO 23022
22996: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
22997: LD_ADDR_VAR 0 3
23001: PUSH
23002: LD_INT 2
23004: PUSH
23005: LD_INT 3
23007: PUSH
23008: LD_INT 4
23010: PUSH
23011: LD_INT 5
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: ST_TO_ADDR
23020: GO 23779
23022: LD_INT 13
23024: DOUBLE
23025: EQUAL
23026: IFTRUE 23030
23028: GO 23056
23030: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23031: LD_ADDR_VAR 0 3
23035: PUSH
23036: LD_INT 2
23038: PUSH
23039: LD_INT 3
23041: PUSH
23042: LD_INT 4
23044: PUSH
23045: LD_INT 5
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: ST_TO_ADDR
23054: GO 23779
23056: LD_INT 14
23058: DOUBLE
23059: EQUAL
23060: IFTRUE 23064
23062: GO 23082
23064: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23065: LD_ADDR_VAR 0 3
23069: PUSH
23070: LD_INT 4
23072: PUSH
23073: LD_INT 5
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: ST_TO_ADDR
23080: GO 23779
23082: LD_INT 6
23084: DOUBLE
23085: EQUAL
23086: IFTRUE 23090
23088: GO 23108
23090: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23091: LD_ADDR_VAR 0 3
23095: PUSH
23096: LD_INT 4
23098: PUSH
23099: LD_INT 5
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: ST_TO_ADDR
23106: GO 23779
23108: LD_INT 10
23110: DOUBLE
23111: EQUAL
23112: IFTRUE 23116
23114: GO 23134
23116: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23117: LD_ADDR_VAR 0 3
23121: PUSH
23122: LD_INT 4
23124: PUSH
23125: LD_INT 5
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: ST_TO_ADDR
23132: GO 23779
23134: LD_INT 22
23136: DOUBLE
23137: EQUAL
23138: IFTRUE 23142
23140: GO 23168
23142: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23143: LD_ADDR_VAR 0 3
23147: PUSH
23148: LD_INT 11
23150: PUSH
23151: LD_INT 12
23153: PUSH
23154: LD_INT 13
23156: PUSH
23157: LD_INT 14
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: ST_TO_ADDR
23166: GO 23779
23168: LD_INT 23
23170: DOUBLE
23171: EQUAL
23172: IFTRUE 23176
23174: GO 23202
23176: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23177: LD_ADDR_VAR 0 3
23181: PUSH
23182: LD_INT 11
23184: PUSH
23185: LD_INT 12
23187: PUSH
23188: LD_INT 13
23190: PUSH
23191: LD_INT 14
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: ST_TO_ADDR
23200: GO 23779
23202: LD_INT 24
23204: DOUBLE
23205: EQUAL
23206: IFTRUE 23210
23208: GO 23236
23210: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23211: LD_ADDR_VAR 0 3
23215: PUSH
23216: LD_INT 11
23218: PUSH
23219: LD_INT 12
23221: PUSH
23222: LD_INT 13
23224: PUSH
23225: LD_INT 14
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: ST_TO_ADDR
23234: GO 23779
23236: LD_INT 30
23238: DOUBLE
23239: EQUAL
23240: IFTRUE 23244
23242: GO 23270
23244: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23245: LD_ADDR_VAR 0 3
23249: PUSH
23250: LD_INT 11
23252: PUSH
23253: LD_INT 12
23255: PUSH
23256: LD_INT 13
23258: PUSH
23259: LD_INT 14
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: ST_TO_ADDR
23268: GO 23779
23270: LD_INT 25
23272: DOUBLE
23273: EQUAL
23274: IFTRUE 23278
23276: GO 23296
23278: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23279: LD_ADDR_VAR 0 3
23283: PUSH
23284: LD_INT 13
23286: PUSH
23287: LD_INT 14
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: ST_TO_ADDR
23294: GO 23779
23296: LD_INT 27
23298: DOUBLE
23299: EQUAL
23300: IFTRUE 23304
23302: GO 23322
23304: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
23305: LD_ADDR_VAR 0 3
23309: PUSH
23310: LD_INT 13
23312: PUSH
23313: LD_INT 14
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: ST_TO_ADDR
23320: GO 23779
23322: LD_EXP 75
23326: DOUBLE
23327: EQUAL
23328: IFTRUE 23332
23330: GO 23358
23332: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23333: LD_ADDR_VAR 0 3
23337: PUSH
23338: LD_INT 11
23340: PUSH
23341: LD_INT 12
23343: PUSH
23344: LD_INT 13
23346: PUSH
23347: LD_INT 14
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: ST_TO_ADDR
23356: GO 23779
23358: LD_INT 28
23360: DOUBLE
23361: EQUAL
23362: IFTRUE 23366
23364: GO 23384
23366: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23367: LD_ADDR_VAR 0 3
23371: PUSH
23372: LD_INT 13
23374: PUSH
23375: LD_INT 14
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: ST_TO_ADDR
23382: GO 23779
23384: LD_INT 29
23386: DOUBLE
23387: EQUAL
23388: IFTRUE 23392
23390: GO 23410
23392: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23393: LD_ADDR_VAR 0 3
23397: PUSH
23398: LD_INT 13
23400: PUSH
23401: LD_INT 14
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: ST_TO_ADDR
23408: GO 23779
23410: LD_INT 31
23412: DOUBLE
23413: EQUAL
23414: IFTRUE 23418
23416: GO 23436
23418: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23419: LD_ADDR_VAR 0 3
23423: PUSH
23424: LD_INT 13
23426: PUSH
23427: LD_INT 14
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: ST_TO_ADDR
23434: GO 23779
23436: LD_INT 26
23438: DOUBLE
23439: EQUAL
23440: IFTRUE 23444
23442: GO 23462
23444: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23445: LD_ADDR_VAR 0 3
23449: PUSH
23450: LD_INT 13
23452: PUSH
23453: LD_INT 14
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: ST_TO_ADDR
23460: GO 23779
23462: LD_INT 42
23464: DOUBLE
23465: EQUAL
23466: IFTRUE 23470
23468: GO 23496
23470: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23471: LD_ADDR_VAR 0 3
23475: PUSH
23476: LD_INT 21
23478: PUSH
23479: LD_INT 22
23481: PUSH
23482: LD_INT 23
23484: PUSH
23485: LD_INT 24
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: ST_TO_ADDR
23494: GO 23779
23496: LD_INT 43
23498: DOUBLE
23499: EQUAL
23500: IFTRUE 23504
23502: GO 23530
23504: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23505: LD_ADDR_VAR 0 3
23509: PUSH
23510: LD_INT 21
23512: PUSH
23513: LD_INT 22
23515: PUSH
23516: LD_INT 23
23518: PUSH
23519: LD_INT 24
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: ST_TO_ADDR
23528: GO 23779
23530: LD_INT 44
23532: DOUBLE
23533: EQUAL
23534: IFTRUE 23538
23536: GO 23564
23538: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
23539: LD_ADDR_VAR 0 3
23543: PUSH
23544: LD_INT 21
23546: PUSH
23547: LD_INT 22
23549: PUSH
23550: LD_INT 23
23552: PUSH
23553: LD_INT 24
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: ST_TO_ADDR
23562: GO 23779
23564: LD_INT 45
23566: DOUBLE
23567: EQUAL
23568: IFTRUE 23572
23570: GO 23598
23572: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
23573: LD_ADDR_VAR 0 3
23577: PUSH
23578: LD_INT 21
23580: PUSH
23581: LD_INT 22
23583: PUSH
23584: LD_INT 23
23586: PUSH
23587: LD_INT 24
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: ST_TO_ADDR
23596: GO 23779
23598: LD_INT 49
23600: DOUBLE
23601: EQUAL
23602: IFTRUE 23606
23604: GO 23632
23606: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
23607: LD_ADDR_VAR 0 3
23611: PUSH
23612: LD_INT 21
23614: PUSH
23615: LD_INT 22
23617: PUSH
23618: LD_INT 23
23620: PUSH
23621: LD_INT 24
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: ST_TO_ADDR
23630: GO 23779
23632: LD_INT 51
23634: DOUBLE
23635: EQUAL
23636: IFTRUE 23640
23638: GO 23666
23640: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
23641: LD_ADDR_VAR 0 3
23645: PUSH
23646: LD_INT 21
23648: PUSH
23649: LD_INT 22
23651: PUSH
23652: LD_INT 23
23654: PUSH
23655: LD_INT 24
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: ST_TO_ADDR
23664: GO 23779
23666: LD_INT 52
23668: DOUBLE
23669: EQUAL
23670: IFTRUE 23674
23672: GO 23700
23674: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23675: LD_ADDR_VAR 0 3
23679: PUSH
23680: LD_INT 21
23682: PUSH
23683: LD_INT 22
23685: PUSH
23686: LD_INT 23
23688: PUSH
23689: LD_INT 24
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: ST_TO_ADDR
23698: GO 23779
23700: LD_INT 53
23702: DOUBLE
23703: EQUAL
23704: IFTRUE 23708
23706: GO 23726
23708: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
23709: LD_ADDR_VAR 0 3
23713: PUSH
23714: LD_INT 23
23716: PUSH
23717: LD_INT 24
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: ST_TO_ADDR
23724: GO 23779
23726: LD_INT 46
23728: DOUBLE
23729: EQUAL
23730: IFTRUE 23734
23732: GO 23752
23734: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
23735: LD_ADDR_VAR 0 3
23739: PUSH
23740: LD_INT 23
23742: PUSH
23743: LD_INT 24
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: ST_TO_ADDR
23750: GO 23779
23752: LD_INT 47
23754: DOUBLE
23755: EQUAL
23756: IFTRUE 23760
23758: GO 23778
23760: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23761: LD_ADDR_VAR 0 3
23765: PUSH
23766: LD_INT 23
23768: PUSH
23769: LD_INT 24
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: ST_TO_ADDR
23776: GO 23779
23778: POP
// result := ( chassis in result ) ;
23779: LD_ADDR_VAR 0 3
23783: PUSH
23784: LD_VAR 0 1
23788: PUSH
23789: LD_VAR 0 3
23793: IN
23794: ST_TO_ADDR
// end ;
23795: LD_VAR 0 3
23799: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
23800: LD_INT 0
23802: PPUSH
23803: PPUSH
23804: PPUSH
23805: PPUSH
23806: PPUSH
23807: PPUSH
23808: PPUSH
// result := array ;
23809: LD_ADDR_VAR 0 5
23813: PUSH
23814: LD_VAR 0 1
23818: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
23819: LD_VAR 0 1
23823: NOT
23824: PUSH
23825: LD_VAR 0 2
23829: NOT
23830: OR
23831: PUSH
23832: LD_VAR 0 3
23836: NOT
23837: OR
23838: PUSH
23839: LD_VAR 0 2
23843: PUSH
23844: LD_VAR 0 1
23848: GREATER
23849: OR
23850: PUSH
23851: LD_VAR 0 3
23855: PUSH
23856: LD_VAR 0 1
23860: GREATER
23861: OR
23862: IFFALSE 23866
// exit ;
23864: GO 24162
// if direction then
23866: LD_VAR 0 4
23870: IFFALSE 23934
// begin d := 1 ;
23872: LD_ADDR_VAR 0 9
23876: PUSH
23877: LD_INT 1
23879: ST_TO_ADDR
// if i_from > i_to then
23880: LD_VAR 0 2
23884: PUSH
23885: LD_VAR 0 3
23889: GREATER
23890: IFFALSE 23916
// length := ( array - i_from ) + i_to else
23892: LD_ADDR_VAR 0 11
23896: PUSH
23897: LD_VAR 0 1
23901: PUSH
23902: LD_VAR 0 2
23906: MINUS
23907: PUSH
23908: LD_VAR 0 3
23912: PLUS
23913: ST_TO_ADDR
23914: GO 23932
// length := i_to - i_from ;
23916: LD_ADDR_VAR 0 11
23920: PUSH
23921: LD_VAR 0 3
23925: PUSH
23926: LD_VAR 0 2
23930: MINUS
23931: ST_TO_ADDR
// end else
23932: GO 23995
// begin d := - 1 ;
23934: LD_ADDR_VAR 0 9
23938: PUSH
23939: LD_INT 1
23941: NEG
23942: ST_TO_ADDR
// if i_from > i_to then
23943: LD_VAR 0 2
23947: PUSH
23948: LD_VAR 0 3
23952: GREATER
23953: IFFALSE 23973
// length := i_from - i_to else
23955: LD_ADDR_VAR 0 11
23959: PUSH
23960: LD_VAR 0 2
23964: PUSH
23965: LD_VAR 0 3
23969: MINUS
23970: ST_TO_ADDR
23971: GO 23995
// length := ( array - i_to ) + i_from ;
23973: LD_ADDR_VAR 0 11
23977: PUSH
23978: LD_VAR 0 1
23982: PUSH
23983: LD_VAR 0 3
23987: MINUS
23988: PUSH
23989: LD_VAR 0 2
23993: PLUS
23994: ST_TO_ADDR
// end ; if not length then
23995: LD_VAR 0 11
23999: NOT
24000: IFFALSE 24004
// exit ;
24002: GO 24162
// tmp := array ;
24004: LD_ADDR_VAR 0 10
24008: PUSH
24009: LD_VAR 0 1
24013: ST_TO_ADDR
// for i = 1 to length do
24014: LD_ADDR_VAR 0 6
24018: PUSH
24019: DOUBLE
24020: LD_INT 1
24022: DEC
24023: ST_TO_ADDR
24024: LD_VAR 0 11
24028: PUSH
24029: FOR_TO
24030: IFFALSE 24150
// begin for j = 1 to array do
24032: LD_ADDR_VAR 0 7
24036: PUSH
24037: DOUBLE
24038: LD_INT 1
24040: DEC
24041: ST_TO_ADDR
24042: LD_VAR 0 1
24046: PUSH
24047: FOR_TO
24048: IFFALSE 24136
// begin k := j + d ;
24050: LD_ADDR_VAR 0 8
24054: PUSH
24055: LD_VAR 0 7
24059: PUSH
24060: LD_VAR 0 9
24064: PLUS
24065: ST_TO_ADDR
// if k > array then
24066: LD_VAR 0 8
24070: PUSH
24071: LD_VAR 0 1
24075: GREATER
24076: IFFALSE 24086
// k := 1 ;
24078: LD_ADDR_VAR 0 8
24082: PUSH
24083: LD_INT 1
24085: ST_TO_ADDR
// if not k then
24086: LD_VAR 0 8
24090: NOT
24091: IFFALSE 24103
// k := array ;
24093: LD_ADDR_VAR 0 8
24097: PUSH
24098: LD_VAR 0 1
24102: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24103: LD_ADDR_VAR 0 10
24107: PUSH
24108: LD_VAR 0 10
24112: PPUSH
24113: LD_VAR 0 8
24117: PPUSH
24118: LD_VAR 0 1
24122: PUSH
24123: LD_VAR 0 7
24127: ARRAY
24128: PPUSH
24129: CALL_OW 1
24133: ST_TO_ADDR
// end ;
24134: GO 24047
24136: POP
24137: POP
// array := tmp ;
24138: LD_ADDR_VAR 0 1
24142: PUSH
24143: LD_VAR 0 10
24147: ST_TO_ADDR
// end ;
24148: GO 24029
24150: POP
24151: POP
// result := array ;
24152: LD_ADDR_VAR 0 5
24156: PUSH
24157: LD_VAR 0 1
24161: ST_TO_ADDR
// end ;
24162: LD_VAR 0 5
24166: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24167: LD_INT 0
24169: PPUSH
24170: PPUSH
// result := 0 ;
24171: LD_ADDR_VAR 0 3
24175: PUSH
24176: LD_INT 0
24178: ST_TO_ADDR
// if not array or not value in array then
24179: LD_VAR 0 1
24183: NOT
24184: PUSH
24185: LD_VAR 0 2
24189: PUSH
24190: LD_VAR 0 1
24194: IN
24195: NOT
24196: OR
24197: IFFALSE 24201
// exit ;
24199: GO 24255
// for i = 1 to array do
24201: LD_ADDR_VAR 0 4
24205: PUSH
24206: DOUBLE
24207: LD_INT 1
24209: DEC
24210: ST_TO_ADDR
24211: LD_VAR 0 1
24215: PUSH
24216: FOR_TO
24217: IFFALSE 24253
// if value = array [ i ] then
24219: LD_VAR 0 2
24223: PUSH
24224: LD_VAR 0 1
24228: PUSH
24229: LD_VAR 0 4
24233: ARRAY
24234: EQUAL
24235: IFFALSE 24251
// begin result := i ;
24237: LD_ADDR_VAR 0 3
24241: PUSH
24242: LD_VAR 0 4
24246: ST_TO_ADDR
// exit ;
24247: POP
24248: POP
24249: GO 24255
// end ;
24251: GO 24216
24253: POP
24254: POP
// end ;
24255: LD_VAR 0 3
24259: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24260: LD_INT 0
24262: PPUSH
// vc_chassis := chassis ;
24263: LD_ADDR_OWVAR 37
24267: PUSH
24268: LD_VAR 0 1
24272: ST_TO_ADDR
// vc_engine := engine ;
24273: LD_ADDR_OWVAR 39
24277: PUSH
24278: LD_VAR 0 2
24282: ST_TO_ADDR
// vc_control := control ;
24283: LD_ADDR_OWVAR 38
24287: PUSH
24288: LD_VAR 0 3
24292: ST_TO_ADDR
// vc_weapon := weapon ;
24293: LD_ADDR_OWVAR 40
24297: PUSH
24298: LD_VAR 0 4
24302: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24303: LD_ADDR_OWVAR 41
24307: PUSH
24308: LD_VAR 0 5
24312: ST_TO_ADDR
// end ;
24313: LD_VAR 0 6
24317: RET
// export function WantPlant ( unit ) ; var task ; begin
24318: LD_INT 0
24320: PPUSH
24321: PPUSH
// result := false ;
24322: LD_ADDR_VAR 0 2
24326: PUSH
24327: LD_INT 0
24329: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24330: LD_ADDR_VAR 0 3
24334: PUSH
24335: LD_VAR 0 1
24339: PPUSH
24340: CALL_OW 437
24344: ST_TO_ADDR
// if task then
24345: LD_VAR 0 3
24349: IFFALSE 24377
// if task [ 1 ] [ 1 ] = p then
24351: LD_VAR 0 3
24355: PUSH
24356: LD_INT 1
24358: ARRAY
24359: PUSH
24360: LD_INT 1
24362: ARRAY
24363: PUSH
24364: LD_STRING p
24366: EQUAL
24367: IFFALSE 24377
// result := true ;
24369: LD_ADDR_VAR 0 2
24373: PUSH
24374: LD_INT 1
24376: ST_TO_ADDR
// end ;
24377: LD_VAR 0 2
24381: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24382: LD_INT 0
24384: PPUSH
24385: PPUSH
24386: PPUSH
24387: PPUSH
// if pos < 1 then
24388: LD_VAR 0 2
24392: PUSH
24393: LD_INT 1
24395: LESS
24396: IFFALSE 24400
// exit ;
24398: GO 24703
// if pos = 1 then
24400: LD_VAR 0 2
24404: PUSH
24405: LD_INT 1
24407: EQUAL
24408: IFFALSE 24441
// result := Replace ( arr , pos [ 1 ] , value ) else
24410: LD_ADDR_VAR 0 4
24414: PUSH
24415: LD_VAR 0 1
24419: PPUSH
24420: LD_VAR 0 2
24424: PUSH
24425: LD_INT 1
24427: ARRAY
24428: PPUSH
24429: LD_VAR 0 3
24433: PPUSH
24434: CALL_OW 1
24438: ST_TO_ADDR
24439: GO 24703
// begin tmp := arr ;
24441: LD_ADDR_VAR 0 6
24445: PUSH
24446: LD_VAR 0 1
24450: ST_TO_ADDR
// s_arr := [ tmp ] ;
24451: LD_ADDR_VAR 0 7
24455: PUSH
24456: LD_VAR 0 6
24460: PUSH
24461: EMPTY
24462: LIST
24463: ST_TO_ADDR
// for i = 1 to pos - 1 do
24464: LD_ADDR_VAR 0 5
24468: PUSH
24469: DOUBLE
24470: LD_INT 1
24472: DEC
24473: ST_TO_ADDR
24474: LD_VAR 0 2
24478: PUSH
24479: LD_INT 1
24481: MINUS
24482: PUSH
24483: FOR_TO
24484: IFFALSE 24529
// begin tmp := tmp [ pos [ i ] ] ;
24486: LD_ADDR_VAR 0 6
24490: PUSH
24491: LD_VAR 0 6
24495: PUSH
24496: LD_VAR 0 2
24500: PUSH
24501: LD_VAR 0 5
24505: ARRAY
24506: ARRAY
24507: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24508: LD_ADDR_VAR 0 7
24512: PUSH
24513: LD_VAR 0 7
24517: PUSH
24518: LD_VAR 0 6
24522: PUSH
24523: EMPTY
24524: LIST
24525: ADD
24526: ST_TO_ADDR
// end ;
24527: GO 24483
24529: POP
24530: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
24531: LD_ADDR_VAR 0 6
24535: PUSH
24536: LD_VAR 0 6
24540: PPUSH
24541: LD_VAR 0 2
24545: PUSH
24546: LD_VAR 0 2
24550: ARRAY
24551: PPUSH
24552: LD_VAR 0 3
24556: PPUSH
24557: CALL_OW 1
24561: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
24562: LD_ADDR_VAR 0 7
24566: PUSH
24567: LD_VAR 0 7
24571: PPUSH
24572: LD_VAR 0 7
24576: PPUSH
24577: LD_VAR 0 6
24581: PPUSH
24582: CALL_OW 1
24586: ST_TO_ADDR
// for i = s_arr downto 2 do
24587: LD_ADDR_VAR 0 5
24591: PUSH
24592: DOUBLE
24593: LD_VAR 0 7
24597: INC
24598: ST_TO_ADDR
24599: LD_INT 2
24601: PUSH
24602: FOR_DOWNTO
24603: IFFALSE 24687
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
24605: LD_ADDR_VAR 0 6
24609: PUSH
24610: LD_VAR 0 7
24614: PUSH
24615: LD_VAR 0 5
24619: PUSH
24620: LD_INT 1
24622: MINUS
24623: ARRAY
24624: PPUSH
24625: LD_VAR 0 2
24629: PUSH
24630: LD_VAR 0 5
24634: PUSH
24635: LD_INT 1
24637: MINUS
24638: ARRAY
24639: PPUSH
24640: LD_VAR 0 7
24644: PUSH
24645: LD_VAR 0 5
24649: ARRAY
24650: PPUSH
24651: CALL_OW 1
24655: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
24656: LD_ADDR_VAR 0 7
24660: PUSH
24661: LD_VAR 0 7
24665: PPUSH
24666: LD_VAR 0 5
24670: PUSH
24671: LD_INT 1
24673: MINUS
24674: PPUSH
24675: LD_VAR 0 6
24679: PPUSH
24680: CALL_OW 1
24684: ST_TO_ADDR
// end ;
24685: GO 24602
24687: POP
24688: POP
// result := s_arr [ 1 ] ;
24689: LD_ADDR_VAR 0 4
24693: PUSH
24694: LD_VAR 0 7
24698: PUSH
24699: LD_INT 1
24701: ARRAY
24702: ST_TO_ADDR
// end ; end ;
24703: LD_VAR 0 4
24707: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
24708: LD_INT 0
24710: PPUSH
24711: PPUSH
// if not list then
24712: LD_VAR 0 1
24716: NOT
24717: IFFALSE 24721
// exit ;
24719: GO 24812
// i := list [ pos1 ] ;
24721: LD_ADDR_VAR 0 5
24725: PUSH
24726: LD_VAR 0 1
24730: PUSH
24731: LD_VAR 0 2
24735: ARRAY
24736: ST_TO_ADDR
// if not i then
24737: LD_VAR 0 5
24741: NOT
24742: IFFALSE 24746
// exit ;
24744: GO 24812
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
24746: LD_ADDR_VAR 0 1
24750: PUSH
24751: LD_VAR 0 1
24755: PPUSH
24756: LD_VAR 0 2
24760: PPUSH
24761: LD_VAR 0 1
24765: PUSH
24766: LD_VAR 0 3
24770: ARRAY
24771: PPUSH
24772: CALL_OW 1
24776: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
24777: LD_ADDR_VAR 0 1
24781: PUSH
24782: LD_VAR 0 1
24786: PPUSH
24787: LD_VAR 0 3
24791: PPUSH
24792: LD_VAR 0 5
24796: PPUSH
24797: CALL_OW 1
24801: ST_TO_ADDR
// result := list ;
24802: LD_ADDR_VAR 0 4
24806: PUSH
24807: LD_VAR 0 1
24811: ST_TO_ADDR
// end ;
24812: LD_VAR 0 4
24816: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
24817: LD_INT 0
24819: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
24820: LD_ADDR_VAR 0 5
24824: PUSH
24825: LD_VAR 0 1
24829: PPUSH
24830: CALL_OW 250
24834: PPUSH
24835: LD_VAR 0 1
24839: PPUSH
24840: CALL_OW 251
24844: PPUSH
24845: LD_VAR 0 2
24849: PPUSH
24850: LD_VAR 0 3
24854: PPUSH
24855: LD_VAR 0 4
24859: PPUSH
24860: CALL 24870 0 5
24864: ST_TO_ADDR
// end ;
24865: LD_VAR 0 5
24869: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
24870: LD_INT 0
24872: PPUSH
24873: PPUSH
24874: PPUSH
24875: PPUSH
// if not list then
24876: LD_VAR 0 3
24880: NOT
24881: IFFALSE 24885
// exit ;
24883: GO 25273
// result := [ ] ;
24885: LD_ADDR_VAR 0 6
24889: PUSH
24890: EMPTY
24891: ST_TO_ADDR
// for i in list do
24892: LD_ADDR_VAR 0 7
24896: PUSH
24897: LD_VAR 0 3
24901: PUSH
24902: FOR_IN
24903: IFFALSE 25105
// begin tmp := GetDistUnitXY ( i , x , y ) ;
24905: LD_ADDR_VAR 0 9
24909: PUSH
24910: LD_VAR 0 7
24914: PPUSH
24915: LD_VAR 0 1
24919: PPUSH
24920: LD_VAR 0 2
24924: PPUSH
24925: CALL_OW 297
24929: ST_TO_ADDR
// if not result then
24930: LD_VAR 0 6
24934: NOT
24935: IFFALSE 24961
// result := [ [ i , tmp ] ] else
24937: LD_ADDR_VAR 0 6
24941: PUSH
24942: LD_VAR 0 7
24946: PUSH
24947: LD_VAR 0 9
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: EMPTY
24957: LIST
24958: ST_TO_ADDR
24959: GO 25103
// begin if result [ result ] [ 2 ] < tmp then
24961: LD_VAR 0 6
24965: PUSH
24966: LD_VAR 0 6
24970: ARRAY
24971: PUSH
24972: LD_INT 2
24974: ARRAY
24975: PUSH
24976: LD_VAR 0 9
24980: LESS
24981: IFFALSE 25023
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
24983: LD_ADDR_VAR 0 6
24987: PUSH
24988: LD_VAR 0 6
24992: PPUSH
24993: LD_VAR 0 6
24997: PUSH
24998: LD_INT 1
25000: PLUS
25001: PPUSH
25002: LD_VAR 0 7
25006: PUSH
25007: LD_VAR 0 9
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PPUSH
25016: CALL_OW 2
25020: ST_TO_ADDR
25021: GO 25103
// for j = 1 to result do
25023: LD_ADDR_VAR 0 8
25027: PUSH
25028: DOUBLE
25029: LD_INT 1
25031: DEC
25032: ST_TO_ADDR
25033: LD_VAR 0 6
25037: PUSH
25038: FOR_TO
25039: IFFALSE 25101
// begin if tmp < result [ j ] [ 2 ] then
25041: LD_VAR 0 9
25045: PUSH
25046: LD_VAR 0 6
25050: PUSH
25051: LD_VAR 0 8
25055: ARRAY
25056: PUSH
25057: LD_INT 2
25059: ARRAY
25060: LESS
25061: IFFALSE 25099
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25063: LD_ADDR_VAR 0 6
25067: PUSH
25068: LD_VAR 0 6
25072: PPUSH
25073: LD_VAR 0 8
25077: PPUSH
25078: LD_VAR 0 7
25082: PUSH
25083: LD_VAR 0 9
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PPUSH
25092: CALL_OW 2
25096: ST_TO_ADDR
// break ;
25097: GO 25101
// end ; end ;
25099: GO 25038
25101: POP
25102: POP
// end ; end ;
25103: GO 24902
25105: POP
25106: POP
// if result and not asc then
25107: LD_VAR 0 6
25111: PUSH
25112: LD_VAR 0 4
25116: NOT
25117: AND
25118: IFFALSE 25193
// begin tmp := result ;
25120: LD_ADDR_VAR 0 9
25124: PUSH
25125: LD_VAR 0 6
25129: ST_TO_ADDR
// for i = tmp downto 1 do
25130: LD_ADDR_VAR 0 7
25134: PUSH
25135: DOUBLE
25136: LD_VAR 0 9
25140: INC
25141: ST_TO_ADDR
25142: LD_INT 1
25144: PUSH
25145: FOR_DOWNTO
25146: IFFALSE 25191
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25148: LD_ADDR_VAR 0 6
25152: PUSH
25153: LD_VAR 0 6
25157: PPUSH
25158: LD_VAR 0 9
25162: PUSH
25163: LD_VAR 0 7
25167: MINUS
25168: PUSH
25169: LD_INT 1
25171: PLUS
25172: PPUSH
25173: LD_VAR 0 9
25177: PUSH
25178: LD_VAR 0 7
25182: ARRAY
25183: PPUSH
25184: CALL_OW 1
25188: ST_TO_ADDR
25189: GO 25145
25191: POP
25192: POP
// end ; tmp := [ ] ;
25193: LD_ADDR_VAR 0 9
25197: PUSH
25198: EMPTY
25199: ST_TO_ADDR
// if mode then
25200: LD_VAR 0 5
25204: IFFALSE 25273
// begin for i = 1 to result do
25206: LD_ADDR_VAR 0 7
25210: PUSH
25211: DOUBLE
25212: LD_INT 1
25214: DEC
25215: ST_TO_ADDR
25216: LD_VAR 0 6
25220: PUSH
25221: FOR_TO
25222: IFFALSE 25261
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25224: LD_ADDR_VAR 0 9
25228: PUSH
25229: LD_VAR 0 9
25233: PPUSH
25234: LD_VAR 0 7
25238: PPUSH
25239: LD_VAR 0 6
25243: PUSH
25244: LD_VAR 0 7
25248: ARRAY
25249: PUSH
25250: LD_INT 1
25252: ARRAY
25253: PPUSH
25254: CALL_OW 1
25258: ST_TO_ADDR
25259: GO 25221
25261: POP
25262: POP
// result := tmp ;
25263: LD_ADDR_VAR 0 6
25267: PUSH
25268: LD_VAR 0 9
25272: ST_TO_ADDR
// end ; end ;
25273: LD_VAR 0 6
25277: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25278: LD_INT 0
25280: PPUSH
25281: PPUSH
25282: PPUSH
25283: PPUSH
25284: PPUSH
25285: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25286: LD_ADDR_VAR 0 5
25290: PUSH
25291: LD_INT 0
25293: PUSH
25294: LD_INT 0
25296: PUSH
25297: LD_INT 0
25299: PUSH
25300: EMPTY
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: ST_TO_ADDR
// if not x or not y then
25308: LD_VAR 0 2
25312: NOT
25313: PUSH
25314: LD_VAR 0 3
25318: NOT
25319: OR
25320: IFFALSE 25324
// exit ;
25322: GO 26976
// if not range then
25324: LD_VAR 0 4
25328: NOT
25329: IFFALSE 25339
// range := 10 ;
25331: LD_ADDR_VAR 0 4
25335: PUSH
25336: LD_INT 10
25338: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25339: LD_ADDR_VAR 0 8
25343: PUSH
25344: LD_INT 81
25346: PUSH
25347: LD_VAR 0 1
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 92
25358: PUSH
25359: LD_VAR 0 2
25363: PUSH
25364: LD_VAR 0 3
25368: PUSH
25369: LD_VAR 0 4
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 3
25382: PUSH
25383: LD_INT 21
25385: PUSH
25386: LD_INT 3
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: LIST
25401: PPUSH
25402: CALL_OW 69
25406: ST_TO_ADDR
// if not tmp then
25407: LD_VAR 0 8
25411: NOT
25412: IFFALSE 25416
// exit ;
25414: GO 26976
// for i in tmp do
25416: LD_ADDR_VAR 0 6
25420: PUSH
25421: LD_VAR 0 8
25425: PUSH
25426: FOR_IN
25427: IFFALSE 26951
// begin points := [ 0 , 0 , 0 ] ;
25429: LD_ADDR_VAR 0 9
25433: PUSH
25434: LD_INT 0
25436: PUSH
25437: LD_INT 0
25439: PUSH
25440: LD_INT 0
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: LIST
25447: ST_TO_ADDR
// bpoints := 1 ;
25448: LD_ADDR_VAR 0 10
25452: PUSH
25453: LD_INT 1
25455: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25456: LD_VAR 0 6
25460: PPUSH
25461: CALL_OW 247
25465: PUSH
25466: LD_INT 1
25468: DOUBLE
25469: EQUAL
25470: IFTRUE 25474
25472: GO 26052
25474: POP
// begin if GetClass ( i ) = 1 then
25475: LD_VAR 0 6
25479: PPUSH
25480: CALL_OW 257
25484: PUSH
25485: LD_INT 1
25487: EQUAL
25488: IFFALSE 25509
// points := [ 10 , 5 , 3 ] ;
25490: LD_ADDR_VAR 0 9
25494: PUSH
25495: LD_INT 10
25497: PUSH
25498: LD_INT 5
25500: PUSH
25501: LD_INT 3
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: LIST
25508: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25509: LD_VAR 0 6
25513: PPUSH
25514: CALL_OW 257
25518: PUSH
25519: LD_INT 2
25521: PUSH
25522: LD_INT 3
25524: PUSH
25525: LD_INT 4
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: LIST
25532: IN
25533: IFFALSE 25554
// points := [ 3 , 2 , 1 ] ;
25535: LD_ADDR_VAR 0 9
25539: PUSH
25540: LD_INT 3
25542: PUSH
25543: LD_INT 2
25545: PUSH
25546: LD_INT 1
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: LIST
25553: ST_TO_ADDR
// if GetClass ( i ) = 5 then
25554: LD_VAR 0 6
25558: PPUSH
25559: CALL_OW 257
25563: PUSH
25564: LD_INT 5
25566: EQUAL
25567: IFFALSE 25588
// points := [ 130 , 5 , 2 ] ;
25569: LD_ADDR_VAR 0 9
25573: PUSH
25574: LD_INT 130
25576: PUSH
25577: LD_INT 5
25579: PUSH
25580: LD_INT 2
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: LIST
25587: ST_TO_ADDR
// if GetClass ( i ) = 8 then
25588: LD_VAR 0 6
25592: PPUSH
25593: CALL_OW 257
25597: PUSH
25598: LD_INT 8
25600: EQUAL
25601: IFFALSE 25622
// points := [ 35 , 35 , 30 ] ;
25603: LD_ADDR_VAR 0 9
25607: PUSH
25608: LD_INT 35
25610: PUSH
25611: LD_INT 35
25613: PUSH
25614: LD_INT 30
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: LIST
25621: ST_TO_ADDR
// if GetClass ( i ) = 9 then
25622: LD_VAR 0 6
25626: PPUSH
25627: CALL_OW 257
25631: PUSH
25632: LD_INT 9
25634: EQUAL
25635: IFFALSE 25656
// points := [ 20 , 55 , 40 ] ;
25637: LD_ADDR_VAR 0 9
25641: PUSH
25642: LD_INT 20
25644: PUSH
25645: LD_INT 55
25647: PUSH
25648: LD_INT 40
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: LIST
25655: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
25656: LD_VAR 0 6
25660: PPUSH
25661: CALL_OW 257
25665: PUSH
25666: LD_INT 12
25668: PUSH
25669: LD_INT 16
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: IN
25676: IFFALSE 25697
// points := [ 5 , 3 , 2 ] ;
25678: LD_ADDR_VAR 0 9
25682: PUSH
25683: LD_INT 5
25685: PUSH
25686: LD_INT 3
25688: PUSH
25689: LD_INT 2
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: LIST
25696: ST_TO_ADDR
// if GetClass ( i ) = 17 then
25697: LD_VAR 0 6
25701: PPUSH
25702: CALL_OW 257
25706: PUSH
25707: LD_INT 17
25709: EQUAL
25710: IFFALSE 25731
// points := [ 100 , 50 , 75 ] ;
25712: LD_ADDR_VAR 0 9
25716: PUSH
25717: LD_INT 100
25719: PUSH
25720: LD_INT 50
25722: PUSH
25723: LD_INT 75
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: LIST
25730: ST_TO_ADDR
// if GetClass ( i ) = 15 then
25731: LD_VAR 0 6
25735: PPUSH
25736: CALL_OW 257
25740: PUSH
25741: LD_INT 15
25743: EQUAL
25744: IFFALSE 25765
// points := [ 10 , 5 , 3 ] ;
25746: LD_ADDR_VAR 0 9
25750: PUSH
25751: LD_INT 10
25753: PUSH
25754: LD_INT 5
25756: PUSH
25757: LD_INT 3
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: LIST
25764: ST_TO_ADDR
// if GetClass ( i ) = 14 then
25765: LD_VAR 0 6
25769: PPUSH
25770: CALL_OW 257
25774: PUSH
25775: LD_INT 14
25777: EQUAL
25778: IFFALSE 25799
// points := [ 10 , 0 , 0 ] ;
25780: LD_ADDR_VAR 0 9
25784: PUSH
25785: LD_INT 10
25787: PUSH
25788: LD_INT 0
25790: PUSH
25791: LD_INT 0
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: LIST
25798: ST_TO_ADDR
// if GetClass ( i ) = 11 then
25799: LD_VAR 0 6
25803: PPUSH
25804: CALL_OW 257
25808: PUSH
25809: LD_INT 11
25811: EQUAL
25812: IFFALSE 25833
// points := [ 30 , 10 , 5 ] ;
25814: LD_ADDR_VAR 0 9
25818: PUSH
25819: LD_INT 30
25821: PUSH
25822: LD_INT 10
25824: PUSH
25825: LD_INT 5
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: LIST
25832: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
25833: LD_VAR 0 1
25837: PPUSH
25838: LD_INT 5
25840: PPUSH
25841: CALL_OW 321
25845: PUSH
25846: LD_INT 2
25848: EQUAL
25849: IFFALSE 25866
// bpoints := bpoints * 1.8 ;
25851: LD_ADDR_VAR 0 10
25855: PUSH
25856: LD_VAR 0 10
25860: PUSH
25861: LD_REAL  1.80000000000000E+0000
25864: MUL
25865: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
25866: LD_VAR 0 6
25870: PPUSH
25871: CALL_OW 257
25875: PUSH
25876: LD_INT 1
25878: PUSH
25879: LD_INT 2
25881: PUSH
25882: LD_INT 3
25884: PUSH
25885: LD_INT 4
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: IN
25894: PUSH
25895: LD_VAR 0 1
25899: PPUSH
25900: LD_INT 51
25902: PPUSH
25903: CALL_OW 321
25907: PUSH
25908: LD_INT 2
25910: EQUAL
25911: AND
25912: IFFALSE 25929
// bpoints := bpoints * 1.2 ;
25914: LD_ADDR_VAR 0 10
25918: PUSH
25919: LD_VAR 0 10
25923: PUSH
25924: LD_REAL  1.20000000000000E+0000
25927: MUL
25928: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
25929: LD_VAR 0 6
25933: PPUSH
25934: CALL_OW 257
25938: PUSH
25939: LD_INT 5
25941: PUSH
25942: LD_INT 7
25944: PUSH
25945: LD_INT 9
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: LIST
25952: IN
25953: PUSH
25954: LD_VAR 0 1
25958: PPUSH
25959: LD_INT 52
25961: PPUSH
25962: CALL_OW 321
25966: PUSH
25967: LD_INT 2
25969: EQUAL
25970: AND
25971: IFFALSE 25988
// bpoints := bpoints * 1.5 ;
25973: LD_ADDR_VAR 0 10
25977: PUSH
25978: LD_VAR 0 10
25982: PUSH
25983: LD_REAL  1.50000000000000E+0000
25986: MUL
25987: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
25988: LD_VAR 0 1
25992: PPUSH
25993: LD_INT 66
25995: PPUSH
25996: CALL_OW 321
26000: PUSH
26001: LD_INT 2
26003: EQUAL
26004: IFFALSE 26021
// bpoints := bpoints * 1.1 ;
26006: LD_ADDR_VAR 0 10
26010: PUSH
26011: LD_VAR 0 10
26015: PUSH
26016: LD_REAL  1.10000000000000E+0000
26019: MUL
26020: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
26021: LD_ADDR_VAR 0 10
26025: PUSH
26026: LD_VAR 0 10
26030: PUSH
26031: LD_VAR 0 6
26035: PPUSH
26036: LD_INT 1
26038: PPUSH
26039: CALL_OW 259
26043: PUSH
26044: LD_REAL  1.15000000000000E+0000
26047: MUL
26048: MUL
26049: ST_TO_ADDR
// end ; unit_vehicle :
26050: GO 26880
26052: LD_INT 2
26054: DOUBLE
26055: EQUAL
26056: IFTRUE 26060
26058: GO 26868
26060: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
26061: LD_VAR 0 6
26065: PPUSH
26066: CALL_OW 264
26070: PUSH
26071: LD_INT 2
26073: PUSH
26074: LD_INT 42
26076: PUSH
26077: LD_INT 24
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: LIST
26084: IN
26085: IFFALSE 26106
// points := [ 25 , 5 , 3 ] ;
26087: LD_ADDR_VAR 0 9
26091: PUSH
26092: LD_INT 25
26094: PUSH
26095: LD_INT 5
26097: PUSH
26098: LD_INT 3
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: LIST
26105: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26106: LD_VAR 0 6
26110: PPUSH
26111: CALL_OW 264
26115: PUSH
26116: LD_INT 4
26118: PUSH
26119: LD_INT 43
26121: PUSH
26122: LD_INT 25
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: LIST
26129: IN
26130: IFFALSE 26151
// points := [ 40 , 15 , 5 ] ;
26132: LD_ADDR_VAR 0 9
26136: PUSH
26137: LD_INT 40
26139: PUSH
26140: LD_INT 15
26142: PUSH
26143: LD_INT 5
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: LIST
26150: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26151: LD_VAR 0 6
26155: PPUSH
26156: CALL_OW 264
26160: PUSH
26161: LD_INT 3
26163: PUSH
26164: LD_INT 23
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: IN
26171: IFFALSE 26192
// points := [ 7 , 25 , 8 ] ;
26173: LD_ADDR_VAR 0 9
26177: PUSH
26178: LD_INT 7
26180: PUSH
26181: LD_INT 25
26183: PUSH
26184: LD_INT 8
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: LIST
26191: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26192: LD_VAR 0 6
26196: PPUSH
26197: CALL_OW 264
26201: PUSH
26202: LD_INT 5
26204: PUSH
26205: LD_INT 27
26207: PUSH
26208: LD_INT 44
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: LIST
26215: IN
26216: IFFALSE 26237
// points := [ 14 , 50 , 16 ] ;
26218: LD_ADDR_VAR 0 9
26222: PUSH
26223: LD_INT 14
26225: PUSH
26226: LD_INT 50
26228: PUSH
26229: LD_INT 16
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: LIST
26236: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26237: LD_VAR 0 6
26241: PPUSH
26242: CALL_OW 264
26246: PUSH
26247: LD_INT 6
26249: PUSH
26250: LD_INT 46
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: IN
26257: IFFALSE 26278
// points := [ 32 , 120 , 70 ] ;
26259: LD_ADDR_VAR 0 9
26263: PUSH
26264: LD_INT 32
26266: PUSH
26267: LD_INT 120
26269: PUSH
26270: LD_INT 70
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: LIST
26277: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
26278: LD_VAR 0 6
26282: PPUSH
26283: CALL_OW 264
26287: PUSH
26288: LD_INT 7
26290: PUSH
26291: LD_INT 28
26293: PUSH
26294: LD_INT 45
26296: PUSH
26297: LD_EXP 75
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: IN
26308: IFFALSE 26329
// points := [ 35 , 20 , 45 ] ;
26310: LD_ADDR_VAR 0 9
26314: PUSH
26315: LD_INT 35
26317: PUSH
26318: LD_INT 20
26320: PUSH
26321: LD_INT 45
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: LIST
26328: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26329: LD_VAR 0 6
26333: PPUSH
26334: CALL_OW 264
26338: PUSH
26339: LD_INT 47
26341: PUSH
26342: EMPTY
26343: LIST
26344: IN
26345: IFFALSE 26366
// points := [ 67 , 45 , 75 ] ;
26347: LD_ADDR_VAR 0 9
26351: PUSH
26352: LD_INT 67
26354: PUSH
26355: LD_INT 45
26357: PUSH
26358: LD_INT 75
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: LIST
26365: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26366: LD_VAR 0 6
26370: PPUSH
26371: CALL_OW 264
26375: PUSH
26376: LD_INT 26
26378: PUSH
26379: EMPTY
26380: LIST
26381: IN
26382: IFFALSE 26403
// points := [ 120 , 30 , 80 ] ;
26384: LD_ADDR_VAR 0 9
26388: PUSH
26389: LD_INT 120
26391: PUSH
26392: LD_INT 30
26394: PUSH
26395: LD_INT 80
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: LIST
26402: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26403: LD_VAR 0 6
26407: PPUSH
26408: CALL_OW 264
26412: PUSH
26413: LD_INT 22
26415: PUSH
26416: EMPTY
26417: LIST
26418: IN
26419: IFFALSE 26440
// points := [ 40 , 1 , 1 ] ;
26421: LD_ADDR_VAR 0 9
26425: PUSH
26426: LD_INT 40
26428: PUSH
26429: LD_INT 1
26431: PUSH
26432: LD_INT 1
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: LIST
26439: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26440: LD_VAR 0 6
26444: PPUSH
26445: CALL_OW 264
26449: PUSH
26450: LD_INT 29
26452: PUSH
26453: EMPTY
26454: LIST
26455: IN
26456: IFFALSE 26477
// points := [ 70 , 200 , 400 ] ;
26458: LD_ADDR_VAR 0 9
26462: PUSH
26463: LD_INT 70
26465: PUSH
26466: LD_INT 200
26468: PUSH
26469: LD_INT 400
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: LIST
26476: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26477: LD_VAR 0 6
26481: PPUSH
26482: CALL_OW 264
26486: PUSH
26487: LD_INT 14
26489: PUSH
26490: LD_INT 53
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: IN
26497: IFFALSE 26518
// points := [ 40 , 10 , 20 ] ;
26499: LD_ADDR_VAR 0 9
26503: PUSH
26504: LD_INT 40
26506: PUSH
26507: LD_INT 10
26509: PUSH
26510: LD_INT 20
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: LIST
26517: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26518: LD_VAR 0 6
26522: PPUSH
26523: CALL_OW 264
26527: PUSH
26528: LD_INT 9
26530: PUSH
26531: EMPTY
26532: LIST
26533: IN
26534: IFFALSE 26555
// points := [ 5 , 70 , 20 ] ;
26536: LD_ADDR_VAR 0 9
26540: PUSH
26541: LD_INT 5
26543: PUSH
26544: LD_INT 70
26546: PUSH
26547: LD_INT 20
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: LIST
26554: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
26555: LD_VAR 0 6
26559: PPUSH
26560: CALL_OW 264
26564: PUSH
26565: LD_INT 10
26567: PUSH
26568: EMPTY
26569: LIST
26570: IN
26571: IFFALSE 26592
// points := [ 35 , 110 , 70 ] ;
26573: LD_ADDR_VAR 0 9
26577: PUSH
26578: LD_INT 35
26580: PUSH
26581: LD_INT 110
26583: PUSH
26584: LD_INT 70
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: LIST
26591: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
26592: LD_VAR 0 6
26596: PPUSH
26597: CALL_OW 265
26601: PUSH
26602: LD_INT 25
26604: EQUAL
26605: IFFALSE 26626
// points := [ 80 , 65 , 100 ] ;
26607: LD_ADDR_VAR 0 9
26611: PUSH
26612: LD_INT 80
26614: PUSH
26615: LD_INT 65
26617: PUSH
26618: LD_INT 100
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: LIST
26625: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
26626: LD_VAR 0 6
26630: PPUSH
26631: CALL_OW 263
26635: PUSH
26636: LD_INT 1
26638: EQUAL
26639: IFFALSE 26674
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
26641: LD_ADDR_VAR 0 10
26645: PUSH
26646: LD_VAR 0 10
26650: PUSH
26651: LD_VAR 0 6
26655: PPUSH
26656: CALL_OW 311
26660: PPUSH
26661: LD_INT 3
26663: PPUSH
26664: CALL_OW 259
26668: PUSH
26669: LD_INT 4
26671: MUL
26672: MUL
26673: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
26674: LD_VAR 0 6
26678: PPUSH
26679: CALL_OW 263
26683: PUSH
26684: LD_INT 2
26686: EQUAL
26687: IFFALSE 26738
// begin j := IsControledBy ( i ) ;
26689: LD_ADDR_VAR 0 7
26693: PUSH
26694: LD_VAR 0 6
26698: PPUSH
26699: CALL_OW 312
26703: ST_TO_ADDR
// if j then
26704: LD_VAR 0 7
26708: IFFALSE 26738
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
26710: LD_ADDR_VAR 0 10
26714: PUSH
26715: LD_VAR 0 10
26719: PUSH
26720: LD_VAR 0 7
26724: PPUSH
26725: LD_INT 3
26727: PPUSH
26728: CALL_OW 259
26732: PUSH
26733: LD_INT 3
26735: MUL
26736: MUL
26737: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
26738: LD_VAR 0 6
26742: PPUSH
26743: CALL_OW 264
26747: PUSH
26748: LD_INT 5
26750: PUSH
26751: LD_INT 6
26753: PUSH
26754: LD_INT 46
26756: PUSH
26757: LD_INT 44
26759: PUSH
26760: LD_INT 47
26762: PUSH
26763: LD_INT 45
26765: PUSH
26766: LD_INT 28
26768: PUSH
26769: LD_INT 7
26771: PUSH
26772: LD_INT 27
26774: PUSH
26775: LD_INT 29
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: IN
26790: PUSH
26791: LD_VAR 0 1
26795: PPUSH
26796: LD_INT 52
26798: PPUSH
26799: CALL_OW 321
26803: PUSH
26804: LD_INT 2
26806: EQUAL
26807: AND
26808: IFFALSE 26825
// bpoints := bpoints * 1.2 ;
26810: LD_ADDR_VAR 0 10
26814: PUSH
26815: LD_VAR 0 10
26819: PUSH
26820: LD_REAL  1.20000000000000E+0000
26823: MUL
26824: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
26825: LD_VAR 0 6
26829: PPUSH
26830: CALL_OW 264
26834: PUSH
26835: LD_INT 6
26837: PUSH
26838: LD_INT 46
26840: PUSH
26841: LD_INT 47
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: LIST
26848: IN
26849: IFFALSE 26866
// bpoints := bpoints * 1.2 ;
26851: LD_ADDR_VAR 0 10
26855: PUSH
26856: LD_VAR 0 10
26860: PUSH
26861: LD_REAL  1.20000000000000E+0000
26864: MUL
26865: ST_TO_ADDR
// end ; unit_building :
26866: GO 26880
26868: LD_INT 3
26870: DOUBLE
26871: EQUAL
26872: IFTRUE 26876
26874: GO 26879
26876: POP
// ; end ;
26877: GO 26880
26879: POP
// for j = 1 to 3 do
26880: LD_ADDR_VAR 0 7
26884: PUSH
26885: DOUBLE
26886: LD_INT 1
26888: DEC
26889: ST_TO_ADDR
26890: LD_INT 3
26892: PUSH
26893: FOR_TO
26894: IFFALSE 26947
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
26896: LD_ADDR_VAR 0 5
26900: PUSH
26901: LD_VAR 0 5
26905: PPUSH
26906: LD_VAR 0 7
26910: PPUSH
26911: LD_VAR 0 5
26915: PUSH
26916: LD_VAR 0 7
26920: ARRAY
26921: PUSH
26922: LD_VAR 0 9
26926: PUSH
26927: LD_VAR 0 7
26931: ARRAY
26932: PUSH
26933: LD_VAR 0 10
26937: MUL
26938: PLUS
26939: PPUSH
26940: CALL_OW 1
26944: ST_TO_ADDR
26945: GO 26893
26947: POP
26948: POP
// end ;
26949: GO 25426
26951: POP
26952: POP
// result := Replace ( result , 4 , tmp ) ;
26953: LD_ADDR_VAR 0 5
26957: PUSH
26958: LD_VAR 0 5
26962: PPUSH
26963: LD_INT 4
26965: PPUSH
26966: LD_VAR 0 8
26970: PPUSH
26971: CALL_OW 1
26975: ST_TO_ADDR
// end ;
26976: LD_VAR 0 5
26980: RET
// export function DangerAtRange ( unit , range ) ; begin
26981: LD_INT 0
26983: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
26984: LD_ADDR_VAR 0 3
26988: PUSH
26989: LD_VAR 0 1
26993: PPUSH
26994: CALL_OW 255
26998: PPUSH
26999: LD_VAR 0 1
27003: PPUSH
27004: CALL_OW 250
27008: PPUSH
27009: LD_VAR 0 1
27013: PPUSH
27014: CALL_OW 251
27018: PPUSH
27019: LD_VAR 0 2
27023: PPUSH
27024: CALL 25278 0 4
27028: ST_TO_ADDR
// end ;
27029: LD_VAR 0 3
27033: RET
// export function DangerInArea ( side , area ) ; begin
27034: LD_INT 0
27036: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27037: LD_ADDR_VAR 0 3
27041: PUSH
27042: LD_VAR 0 2
27046: PPUSH
27047: LD_INT 81
27049: PUSH
27050: LD_VAR 0 1
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PPUSH
27059: CALL_OW 70
27063: ST_TO_ADDR
// end ;
27064: LD_VAR 0 3
27068: RET
// export function IsExtension ( b ) ; begin
27069: LD_INT 0
27071: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
27072: LD_ADDR_VAR 0 2
27076: PUSH
27077: LD_VAR 0 1
27081: PUSH
27082: LD_INT 23
27084: PUSH
27085: LD_INT 20
27087: PUSH
27088: LD_INT 22
27090: PUSH
27091: LD_INT 17
27093: PUSH
27094: LD_INT 24
27096: PUSH
27097: LD_INT 21
27099: PUSH
27100: LD_INT 19
27102: PUSH
27103: LD_INT 16
27105: PUSH
27106: LD_INT 25
27108: PUSH
27109: LD_INT 18
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: IN
27124: ST_TO_ADDR
// end ;
27125: LD_VAR 0 2
27129: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
27130: LD_INT 0
27132: PPUSH
27133: PPUSH
27134: PPUSH
// result := [ ] ;
27135: LD_ADDR_VAR 0 4
27139: PUSH
27140: EMPTY
27141: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27142: LD_ADDR_VAR 0 5
27146: PUSH
27147: LD_VAR 0 2
27151: PPUSH
27152: LD_INT 21
27154: PUSH
27155: LD_INT 3
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PPUSH
27162: CALL_OW 70
27166: ST_TO_ADDR
// if not tmp then
27167: LD_VAR 0 5
27171: NOT
27172: IFFALSE 27176
// exit ;
27174: GO 27240
// if checkLink then
27176: LD_VAR 0 3
27180: IFFALSE 27230
// begin for i in tmp do
27182: LD_ADDR_VAR 0 6
27186: PUSH
27187: LD_VAR 0 5
27191: PUSH
27192: FOR_IN
27193: IFFALSE 27228
// if GetBase ( i ) <> base then
27195: LD_VAR 0 6
27199: PPUSH
27200: CALL_OW 274
27204: PUSH
27205: LD_VAR 0 1
27209: NONEQUAL
27210: IFFALSE 27226
// ComLinkToBase ( base , i ) ;
27212: LD_VAR 0 1
27216: PPUSH
27217: LD_VAR 0 6
27221: PPUSH
27222: CALL_OW 169
27226: GO 27192
27228: POP
27229: POP
// end ; result := tmp ;
27230: LD_ADDR_VAR 0 4
27234: PUSH
27235: LD_VAR 0 5
27239: ST_TO_ADDR
// end ;
27240: LD_VAR 0 4
27244: RET
// export function ComComplete ( units , b ) ; var i ; begin
27245: LD_INT 0
27247: PPUSH
27248: PPUSH
// if not units then
27249: LD_VAR 0 1
27253: NOT
27254: IFFALSE 27258
// exit ;
27256: GO 27348
// for i in units do
27258: LD_ADDR_VAR 0 4
27262: PUSH
27263: LD_VAR 0 1
27267: PUSH
27268: FOR_IN
27269: IFFALSE 27346
// if BuildingStatus ( b ) = bs_build then
27271: LD_VAR 0 2
27275: PPUSH
27276: CALL_OW 461
27280: PUSH
27281: LD_INT 1
27283: EQUAL
27284: IFFALSE 27344
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27286: LD_VAR 0 4
27290: PPUSH
27291: LD_STRING h
27293: PUSH
27294: LD_VAR 0 2
27298: PPUSH
27299: CALL_OW 250
27303: PUSH
27304: LD_VAR 0 2
27308: PPUSH
27309: CALL_OW 251
27313: PUSH
27314: LD_VAR 0 2
27318: PUSH
27319: LD_INT 0
27321: PUSH
27322: LD_INT 0
27324: PUSH
27325: LD_INT 0
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: PUSH
27337: EMPTY
27338: LIST
27339: PPUSH
27340: CALL_OW 446
27344: GO 27268
27346: POP
27347: POP
// end ;
27348: LD_VAR 0 3
27352: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27353: LD_INT 0
27355: PPUSH
27356: PPUSH
27357: PPUSH
27358: PPUSH
27359: PPUSH
27360: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
27361: LD_VAR 0 1
27365: NOT
27366: PUSH
27367: LD_VAR 0 1
27371: PPUSH
27372: CALL_OW 263
27376: PUSH
27377: LD_INT 2
27379: NONEQUAL
27380: OR
27381: IFFALSE 27385
// exit ;
27383: GO 27701
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27385: LD_ADDR_VAR 0 6
27389: PUSH
27390: LD_INT 22
27392: PUSH
27393: LD_VAR 0 1
27397: PPUSH
27398: CALL_OW 255
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 2
27409: PUSH
27410: LD_INT 30
27412: PUSH
27413: LD_INT 36
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 34
27422: PUSH
27423: LD_INT 31
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: LIST
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PPUSH
27439: CALL_OW 69
27443: ST_TO_ADDR
// if not tmp then
27444: LD_VAR 0 6
27448: NOT
27449: IFFALSE 27453
// exit ;
27451: GO 27701
// result := [ ] ;
27453: LD_ADDR_VAR 0 2
27457: PUSH
27458: EMPTY
27459: ST_TO_ADDR
// for i in tmp do
27460: LD_ADDR_VAR 0 3
27464: PUSH
27465: LD_VAR 0 6
27469: PUSH
27470: FOR_IN
27471: IFFALSE 27542
// begin t := UnitsInside ( i ) ;
27473: LD_ADDR_VAR 0 4
27477: PUSH
27478: LD_VAR 0 3
27482: PPUSH
27483: CALL_OW 313
27487: ST_TO_ADDR
// if t then
27488: LD_VAR 0 4
27492: IFFALSE 27540
// for j in t do
27494: LD_ADDR_VAR 0 7
27498: PUSH
27499: LD_VAR 0 4
27503: PUSH
27504: FOR_IN
27505: IFFALSE 27538
// result := Replace ( result , result + 1 , j ) ;
27507: LD_ADDR_VAR 0 2
27511: PUSH
27512: LD_VAR 0 2
27516: PPUSH
27517: LD_VAR 0 2
27521: PUSH
27522: LD_INT 1
27524: PLUS
27525: PPUSH
27526: LD_VAR 0 7
27530: PPUSH
27531: CALL_OW 1
27535: ST_TO_ADDR
27536: GO 27504
27538: POP
27539: POP
// end ;
27540: GO 27470
27542: POP
27543: POP
// if not result then
27544: LD_VAR 0 2
27548: NOT
27549: IFFALSE 27553
// exit ;
27551: GO 27701
// mech := result [ 1 ] ;
27553: LD_ADDR_VAR 0 5
27557: PUSH
27558: LD_VAR 0 2
27562: PUSH
27563: LD_INT 1
27565: ARRAY
27566: ST_TO_ADDR
// if result > 1 then
27567: LD_VAR 0 2
27571: PUSH
27572: LD_INT 1
27574: GREATER
27575: IFFALSE 27687
// begin for i = 2 to result do
27577: LD_ADDR_VAR 0 3
27581: PUSH
27582: DOUBLE
27583: LD_INT 2
27585: DEC
27586: ST_TO_ADDR
27587: LD_VAR 0 2
27591: PUSH
27592: FOR_TO
27593: IFFALSE 27685
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
27595: LD_ADDR_VAR 0 4
27599: PUSH
27600: LD_VAR 0 2
27604: PUSH
27605: LD_VAR 0 3
27609: ARRAY
27610: PPUSH
27611: LD_INT 3
27613: PPUSH
27614: CALL_OW 259
27618: PUSH
27619: LD_VAR 0 2
27623: PUSH
27624: LD_VAR 0 3
27628: ARRAY
27629: PPUSH
27630: CALL_OW 432
27634: MINUS
27635: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
27636: LD_VAR 0 4
27640: PUSH
27641: LD_VAR 0 5
27645: PPUSH
27646: LD_INT 3
27648: PPUSH
27649: CALL_OW 259
27653: PUSH
27654: LD_VAR 0 5
27658: PPUSH
27659: CALL_OW 432
27663: MINUS
27664: GREATEREQUAL
27665: IFFALSE 27683
// mech := result [ i ] ;
27667: LD_ADDR_VAR 0 5
27671: PUSH
27672: LD_VAR 0 2
27676: PUSH
27677: LD_VAR 0 3
27681: ARRAY
27682: ST_TO_ADDR
// end ;
27683: GO 27592
27685: POP
27686: POP
// end ; ComLinkTo ( vehicle , mech ) ;
27687: LD_VAR 0 1
27691: PPUSH
27692: LD_VAR 0 5
27696: PPUSH
27697: CALL_OW 135
// end ;
27701: LD_VAR 0 2
27705: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
27706: LD_INT 0
27708: PPUSH
27709: PPUSH
27710: PPUSH
27711: PPUSH
27712: PPUSH
27713: PPUSH
27714: PPUSH
27715: PPUSH
27716: PPUSH
27717: PPUSH
27718: PPUSH
27719: PPUSH
27720: PPUSH
// result := [ ] ;
27721: LD_ADDR_VAR 0 7
27725: PUSH
27726: EMPTY
27727: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
27728: LD_VAR 0 1
27732: PPUSH
27733: CALL_OW 266
27737: PUSH
27738: LD_INT 0
27740: PUSH
27741: LD_INT 1
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: IN
27748: NOT
27749: IFFALSE 27753
// exit ;
27751: GO 29387
// if name then
27753: LD_VAR 0 3
27757: IFFALSE 27773
// SetBName ( base_dep , name ) ;
27759: LD_VAR 0 1
27763: PPUSH
27764: LD_VAR 0 3
27768: PPUSH
27769: CALL_OW 500
// base := GetBase ( base_dep ) ;
27773: LD_ADDR_VAR 0 15
27777: PUSH
27778: LD_VAR 0 1
27782: PPUSH
27783: CALL_OW 274
27787: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
27788: LD_ADDR_VAR 0 16
27792: PUSH
27793: LD_VAR 0 1
27797: PPUSH
27798: CALL_OW 255
27802: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
27803: LD_ADDR_VAR 0 17
27807: PUSH
27808: LD_VAR 0 1
27812: PPUSH
27813: CALL_OW 248
27817: ST_TO_ADDR
// if sources then
27818: LD_VAR 0 5
27822: IFFALSE 27869
// for i = 1 to 3 do
27824: LD_ADDR_VAR 0 8
27828: PUSH
27829: DOUBLE
27830: LD_INT 1
27832: DEC
27833: ST_TO_ADDR
27834: LD_INT 3
27836: PUSH
27837: FOR_TO
27838: IFFALSE 27867
// AddResourceType ( base , i , sources [ i ] ) ;
27840: LD_VAR 0 15
27844: PPUSH
27845: LD_VAR 0 8
27849: PPUSH
27850: LD_VAR 0 5
27854: PUSH
27855: LD_VAR 0 8
27859: ARRAY
27860: PPUSH
27861: CALL_OW 276
27865: GO 27837
27867: POP
27868: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
27869: LD_ADDR_VAR 0 18
27873: PUSH
27874: LD_VAR 0 15
27878: PPUSH
27879: LD_VAR 0 2
27883: PPUSH
27884: LD_INT 1
27886: PPUSH
27887: CALL 27130 0 3
27891: ST_TO_ADDR
// InitHc ;
27892: CALL_OW 19
// InitUc ;
27896: CALL_OW 18
// uc_side := side ;
27900: LD_ADDR_OWVAR 20
27904: PUSH
27905: LD_VAR 0 16
27909: ST_TO_ADDR
// uc_nation := nation ;
27910: LD_ADDR_OWVAR 21
27914: PUSH
27915: LD_VAR 0 17
27919: ST_TO_ADDR
// if buildings then
27920: LD_VAR 0 18
27924: IFFALSE 29246
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
27926: LD_ADDR_VAR 0 19
27930: PUSH
27931: LD_VAR 0 18
27935: PPUSH
27936: LD_INT 2
27938: PUSH
27939: LD_INT 30
27941: PUSH
27942: LD_INT 29
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 30
27951: PUSH
27952: LD_INT 30
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: LIST
27963: PPUSH
27964: CALL_OW 72
27968: ST_TO_ADDR
// if tmp then
27969: LD_VAR 0 19
27973: IFFALSE 28021
// for i in tmp do
27975: LD_ADDR_VAR 0 8
27979: PUSH
27980: LD_VAR 0 19
27984: PUSH
27985: FOR_IN
27986: IFFALSE 28019
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
27988: LD_VAR 0 8
27992: PPUSH
27993: CALL_OW 250
27997: PPUSH
27998: LD_VAR 0 8
28002: PPUSH
28003: CALL_OW 251
28007: PPUSH
28008: LD_VAR 0 16
28012: PPUSH
28013: CALL_OW 441
28017: GO 27985
28019: POP
28020: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28021: LD_VAR 0 18
28025: PPUSH
28026: LD_INT 2
28028: PUSH
28029: LD_INT 30
28031: PUSH
28032: LD_INT 32
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 30
28041: PUSH
28042: LD_INT 33
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: LIST
28053: PPUSH
28054: CALL_OW 72
28058: IFFALSE 28146
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28060: LD_ADDR_VAR 0 8
28064: PUSH
28065: LD_VAR 0 18
28069: PPUSH
28070: LD_INT 2
28072: PUSH
28073: LD_INT 30
28075: PUSH
28076: LD_INT 32
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 30
28085: PUSH
28086: LD_INT 33
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: LIST
28097: PPUSH
28098: CALL_OW 72
28102: PUSH
28103: FOR_IN
28104: IFFALSE 28144
// begin if not GetBWeapon ( i ) then
28106: LD_VAR 0 8
28110: PPUSH
28111: CALL_OW 269
28115: NOT
28116: IFFALSE 28142
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
28118: LD_VAR 0 8
28122: PPUSH
28123: LD_VAR 0 8
28127: PPUSH
28128: LD_VAR 0 2
28132: PPUSH
28133: CALL 29392 0 2
28137: PPUSH
28138: CALL_OW 431
// end ;
28142: GO 28103
28144: POP
28145: POP
// end ; for i = 1 to personel do
28146: LD_ADDR_VAR 0 8
28150: PUSH
28151: DOUBLE
28152: LD_INT 1
28154: DEC
28155: ST_TO_ADDR
28156: LD_VAR 0 6
28160: PUSH
28161: FOR_TO
28162: IFFALSE 29226
// begin if i > 4 then
28164: LD_VAR 0 8
28168: PUSH
28169: LD_INT 4
28171: GREATER
28172: IFFALSE 28176
// break ;
28174: GO 29226
// case i of 1 :
28176: LD_VAR 0 8
28180: PUSH
28181: LD_INT 1
28183: DOUBLE
28184: EQUAL
28185: IFTRUE 28189
28187: GO 28269
28189: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28190: LD_ADDR_VAR 0 12
28194: PUSH
28195: LD_VAR 0 18
28199: PPUSH
28200: LD_INT 22
28202: PUSH
28203: LD_VAR 0 16
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: LD_INT 58
28214: PUSH
28215: EMPTY
28216: LIST
28217: PUSH
28218: LD_INT 2
28220: PUSH
28221: LD_INT 30
28223: PUSH
28224: LD_INT 32
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 30
28233: PUSH
28234: LD_INT 4
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 30
28243: PUSH
28244: LD_INT 5
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: LIST
28261: PPUSH
28262: CALL_OW 72
28266: ST_TO_ADDR
28267: GO 28491
28269: LD_INT 2
28271: DOUBLE
28272: EQUAL
28273: IFTRUE 28277
28275: GO 28339
28277: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28278: LD_ADDR_VAR 0 12
28282: PUSH
28283: LD_VAR 0 18
28287: PPUSH
28288: LD_INT 22
28290: PUSH
28291: LD_VAR 0 16
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 2
28302: PUSH
28303: LD_INT 30
28305: PUSH
28306: LD_INT 0
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 30
28315: PUSH
28316: LD_INT 1
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: LIST
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PPUSH
28332: CALL_OW 72
28336: ST_TO_ADDR
28337: GO 28491
28339: LD_INT 3
28341: DOUBLE
28342: EQUAL
28343: IFTRUE 28347
28345: GO 28409
28347: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28348: LD_ADDR_VAR 0 12
28352: PUSH
28353: LD_VAR 0 18
28357: PPUSH
28358: LD_INT 22
28360: PUSH
28361: LD_VAR 0 16
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 2
28372: PUSH
28373: LD_INT 30
28375: PUSH
28376: LD_INT 2
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 30
28385: PUSH
28386: LD_INT 3
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: LIST
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PPUSH
28402: CALL_OW 72
28406: ST_TO_ADDR
28407: GO 28491
28409: LD_INT 4
28411: DOUBLE
28412: EQUAL
28413: IFTRUE 28417
28415: GO 28490
28417: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28418: LD_ADDR_VAR 0 12
28422: PUSH
28423: LD_VAR 0 18
28427: PPUSH
28428: LD_INT 22
28430: PUSH
28431: LD_VAR 0 16
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 2
28442: PUSH
28443: LD_INT 30
28445: PUSH
28446: LD_INT 6
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 30
28455: PUSH
28456: LD_INT 7
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 30
28465: PUSH
28466: LD_INT 8
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PPUSH
28483: CALL_OW 72
28487: ST_TO_ADDR
28488: GO 28491
28490: POP
// if i = 1 then
28491: LD_VAR 0 8
28495: PUSH
28496: LD_INT 1
28498: EQUAL
28499: IFFALSE 28610
// begin tmp := [ ] ;
28501: LD_ADDR_VAR 0 19
28505: PUSH
28506: EMPTY
28507: ST_TO_ADDR
// for j in f do
28508: LD_ADDR_VAR 0 9
28512: PUSH
28513: LD_VAR 0 12
28517: PUSH
28518: FOR_IN
28519: IFFALSE 28592
// if GetBType ( j ) = b_bunker then
28521: LD_VAR 0 9
28525: PPUSH
28526: CALL_OW 266
28530: PUSH
28531: LD_INT 32
28533: EQUAL
28534: IFFALSE 28561
// tmp := Insert ( tmp , 1 , j ) else
28536: LD_ADDR_VAR 0 19
28540: PUSH
28541: LD_VAR 0 19
28545: PPUSH
28546: LD_INT 1
28548: PPUSH
28549: LD_VAR 0 9
28553: PPUSH
28554: CALL_OW 2
28558: ST_TO_ADDR
28559: GO 28590
// tmp := Insert ( tmp , tmp + 1 , j ) ;
28561: LD_ADDR_VAR 0 19
28565: PUSH
28566: LD_VAR 0 19
28570: PPUSH
28571: LD_VAR 0 19
28575: PUSH
28576: LD_INT 1
28578: PLUS
28579: PPUSH
28580: LD_VAR 0 9
28584: PPUSH
28585: CALL_OW 2
28589: ST_TO_ADDR
28590: GO 28518
28592: POP
28593: POP
// if tmp then
28594: LD_VAR 0 19
28598: IFFALSE 28610
// f := tmp ;
28600: LD_ADDR_VAR 0 12
28604: PUSH
28605: LD_VAR 0 19
28609: ST_TO_ADDR
// end ; x := personel [ i ] ;
28610: LD_ADDR_VAR 0 13
28614: PUSH
28615: LD_VAR 0 6
28619: PUSH
28620: LD_VAR 0 8
28624: ARRAY
28625: ST_TO_ADDR
// if x = - 1 then
28626: LD_VAR 0 13
28630: PUSH
28631: LD_INT 1
28633: NEG
28634: EQUAL
28635: IFFALSE 28844
// begin for j in f do
28637: LD_ADDR_VAR 0 9
28641: PUSH
28642: LD_VAR 0 12
28646: PUSH
28647: FOR_IN
28648: IFFALSE 28840
// repeat InitHc ;
28650: CALL_OW 19
// if GetBType ( j ) = b_barracks then
28654: LD_VAR 0 9
28658: PPUSH
28659: CALL_OW 266
28663: PUSH
28664: LD_INT 5
28666: EQUAL
28667: IFFALSE 28737
// begin if UnitsInside ( j ) < 3 then
28669: LD_VAR 0 9
28673: PPUSH
28674: CALL_OW 313
28678: PUSH
28679: LD_INT 3
28681: LESS
28682: IFFALSE 28718
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28684: LD_INT 0
28686: PPUSH
28687: LD_INT 5
28689: PUSH
28690: LD_INT 8
28692: PUSH
28693: LD_INT 9
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: LIST
28700: PUSH
28701: LD_VAR 0 17
28705: ARRAY
28706: PPUSH
28707: LD_VAR 0 4
28711: PPUSH
28712: CALL_OW 380
28716: GO 28735
// PrepareHuman ( false , i , skill ) ;
28718: LD_INT 0
28720: PPUSH
28721: LD_VAR 0 8
28725: PPUSH
28726: LD_VAR 0 4
28730: PPUSH
28731: CALL_OW 380
// end else
28735: GO 28754
// PrepareHuman ( false , i , skill ) ;
28737: LD_INT 0
28739: PPUSH
28740: LD_VAR 0 8
28744: PPUSH
28745: LD_VAR 0 4
28749: PPUSH
28750: CALL_OW 380
// un := CreateHuman ;
28754: LD_ADDR_VAR 0 14
28758: PUSH
28759: CALL_OW 44
28763: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28764: LD_ADDR_VAR 0 7
28768: PUSH
28769: LD_VAR 0 7
28773: PPUSH
28774: LD_INT 1
28776: PPUSH
28777: LD_VAR 0 14
28781: PPUSH
28782: CALL_OW 2
28786: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
28787: LD_VAR 0 14
28791: PPUSH
28792: LD_VAR 0 9
28796: PPUSH
28797: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
28801: LD_VAR 0 9
28805: PPUSH
28806: CALL_OW 313
28810: PUSH
28811: LD_INT 6
28813: EQUAL
28814: PUSH
28815: LD_VAR 0 9
28819: PPUSH
28820: CALL_OW 266
28824: PUSH
28825: LD_INT 32
28827: PUSH
28828: LD_INT 31
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: IN
28835: OR
28836: IFFALSE 28650
28838: GO 28647
28840: POP
28841: POP
// end else
28842: GO 29224
// for j = 1 to x do
28844: LD_ADDR_VAR 0 9
28848: PUSH
28849: DOUBLE
28850: LD_INT 1
28852: DEC
28853: ST_TO_ADDR
28854: LD_VAR 0 13
28858: PUSH
28859: FOR_TO
28860: IFFALSE 29222
// begin InitHc ;
28862: CALL_OW 19
// if not f then
28866: LD_VAR 0 12
28870: NOT
28871: IFFALSE 28960
// begin PrepareHuman ( false , i , skill ) ;
28873: LD_INT 0
28875: PPUSH
28876: LD_VAR 0 8
28880: PPUSH
28881: LD_VAR 0 4
28885: PPUSH
28886: CALL_OW 380
// un := CreateHuman ;
28890: LD_ADDR_VAR 0 14
28894: PUSH
28895: CALL_OW 44
28899: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28900: LD_ADDR_VAR 0 7
28904: PUSH
28905: LD_VAR 0 7
28909: PPUSH
28910: LD_INT 1
28912: PPUSH
28913: LD_VAR 0 14
28917: PPUSH
28918: CALL_OW 2
28922: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
28923: LD_VAR 0 14
28927: PPUSH
28928: LD_VAR 0 1
28932: PPUSH
28933: CALL_OW 250
28937: PPUSH
28938: LD_VAR 0 1
28942: PPUSH
28943: CALL_OW 251
28947: PPUSH
28948: LD_INT 10
28950: PPUSH
28951: LD_INT 0
28953: PPUSH
28954: CALL_OW 50
// continue ;
28958: GO 28859
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
28960: LD_VAR 0 12
28964: PUSH
28965: LD_INT 1
28967: ARRAY
28968: PPUSH
28969: CALL_OW 313
28973: PUSH
28974: LD_VAR 0 12
28978: PUSH
28979: LD_INT 1
28981: ARRAY
28982: PPUSH
28983: CALL_OW 266
28987: PUSH
28988: LD_INT 32
28990: PUSH
28991: LD_INT 31
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: IN
28998: AND
28999: PUSH
29000: LD_VAR 0 12
29004: PUSH
29005: LD_INT 1
29007: ARRAY
29008: PPUSH
29009: CALL_OW 313
29013: PUSH
29014: LD_INT 6
29016: EQUAL
29017: OR
29018: IFFALSE 29038
// f := Delete ( f , 1 ) ;
29020: LD_ADDR_VAR 0 12
29024: PUSH
29025: LD_VAR 0 12
29029: PPUSH
29030: LD_INT 1
29032: PPUSH
29033: CALL_OW 3
29037: ST_TO_ADDR
// if not f then
29038: LD_VAR 0 12
29042: NOT
29043: IFFALSE 29061
// begin x := x + 2 ;
29045: LD_ADDR_VAR 0 13
29049: PUSH
29050: LD_VAR 0 13
29054: PUSH
29055: LD_INT 2
29057: PLUS
29058: ST_TO_ADDR
// continue ;
29059: GO 28859
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29061: LD_VAR 0 12
29065: PUSH
29066: LD_INT 1
29068: ARRAY
29069: PPUSH
29070: CALL_OW 266
29074: PUSH
29075: LD_INT 5
29077: EQUAL
29078: IFFALSE 29152
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29080: LD_VAR 0 12
29084: PUSH
29085: LD_INT 1
29087: ARRAY
29088: PPUSH
29089: CALL_OW 313
29093: PUSH
29094: LD_INT 3
29096: LESS
29097: IFFALSE 29133
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29099: LD_INT 0
29101: PPUSH
29102: LD_INT 5
29104: PUSH
29105: LD_INT 8
29107: PUSH
29108: LD_INT 9
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: LIST
29115: PUSH
29116: LD_VAR 0 17
29120: ARRAY
29121: PPUSH
29122: LD_VAR 0 4
29126: PPUSH
29127: CALL_OW 380
29131: GO 29150
// PrepareHuman ( false , i , skill ) ;
29133: LD_INT 0
29135: PPUSH
29136: LD_VAR 0 8
29140: PPUSH
29141: LD_VAR 0 4
29145: PPUSH
29146: CALL_OW 380
// end else
29150: GO 29169
// PrepareHuman ( false , i , skill ) ;
29152: LD_INT 0
29154: PPUSH
29155: LD_VAR 0 8
29159: PPUSH
29160: LD_VAR 0 4
29164: PPUSH
29165: CALL_OW 380
// un := CreateHuman ;
29169: LD_ADDR_VAR 0 14
29173: PUSH
29174: CALL_OW 44
29178: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29179: LD_ADDR_VAR 0 7
29183: PUSH
29184: LD_VAR 0 7
29188: PPUSH
29189: LD_INT 1
29191: PPUSH
29192: LD_VAR 0 14
29196: PPUSH
29197: CALL_OW 2
29201: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29202: LD_VAR 0 14
29206: PPUSH
29207: LD_VAR 0 12
29211: PUSH
29212: LD_INT 1
29214: ARRAY
29215: PPUSH
29216: CALL_OW 52
// end ;
29220: GO 28859
29222: POP
29223: POP
// end ;
29224: GO 28161
29226: POP
29227: POP
// result := result ^ buildings ;
29228: LD_ADDR_VAR 0 7
29232: PUSH
29233: LD_VAR 0 7
29237: PUSH
29238: LD_VAR 0 18
29242: ADD
29243: ST_TO_ADDR
// end else
29244: GO 29387
// begin for i = 1 to personel do
29246: LD_ADDR_VAR 0 8
29250: PUSH
29251: DOUBLE
29252: LD_INT 1
29254: DEC
29255: ST_TO_ADDR
29256: LD_VAR 0 6
29260: PUSH
29261: FOR_TO
29262: IFFALSE 29385
// begin if i > 4 then
29264: LD_VAR 0 8
29268: PUSH
29269: LD_INT 4
29271: GREATER
29272: IFFALSE 29276
// break ;
29274: GO 29385
// x := personel [ i ] ;
29276: LD_ADDR_VAR 0 13
29280: PUSH
29281: LD_VAR 0 6
29285: PUSH
29286: LD_VAR 0 8
29290: ARRAY
29291: ST_TO_ADDR
// if x = - 1 then
29292: LD_VAR 0 13
29296: PUSH
29297: LD_INT 1
29299: NEG
29300: EQUAL
29301: IFFALSE 29305
// continue ;
29303: GO 29261
// PrepareHuman ( false , i , skill ) ;
29305: LD_INT 0
29307: PPUSH
29308: LD_VAR 0 8
29312: PPUSH
29313: LD_VAR 0 4
29317: PPUSH
29318: CALL_OW 380
// un := CreateHuman ;
29322: LD_ADDR_VAR 0 14
29326: PUSH
29327: CALL_OW 44
29331: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29332: LD_VAR 0 14
29336: PPUSH
29337: LD_VAR 0 1
29341: PPUSH
29342: CALL_OW 250
29346: PPUSH
29347: LD_VAR 0 1
29351: PPUSH
29352: CALL_OW 251
29356: PPUSH
29357: LD_INT 10
29359: PPUSH
29360: LD_INT 0
29362: PPUSH
29363: CALL_OW 50
// result := result ^ un ;
29367: LD_ADDR_VAR 0 7
29371: PUSH
29372: LD_VAR 0 7
29376: PUSH
29377: LD_VAR 0 14
29381: ADD
29382: ST_TO_ADDR
// end ;
29383: GO 29261
29385: POP
29386: POP
// end ; end ;
29387: LD_VAR 0 7
29391: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29392: LD_INT 0
29394: PPUSH
29395: PPUSH
29396: PPUSH
29397: PPUSH
29398: PPUSH
29399: PPUSH
29400: PPUSH
29401: PPUSH
29402: PPUSH
29403: PPUSH
29404: PPUSH
29405: PPUSH
29406: PPUSH
29407: PPUSH
29408: PPUSH
29409: PPUSH
// result := false ;
29410: LD_ADDR_VAR 0 3
29414: PUSH
29415: LD_INT 0
29417: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29418: LD_VAR 0 1
29422: NOT
29423: PUSH
29424: LD_VAR 0 1
29428: PPUSH
29429: CALL_OW 266
29433: PUSH
29434: LD_INT 32
29436: PUSH
29437: LD_INT 33
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: IN
29444: NOT
29445: OR
29446: IFFALSE 29450
// exit ;
29448: GO 30559
// nat := GetNation ( tower ) ;
29450: LD_ADDR_VAR 0 12
29454: PUSH
29455: LD_VAR 0 1
29459: PPUSH
29460: CALL_OW 248
29464: ST_TO_ADDR
// side := GetSide ( tower ) ;
29465: LD_ADDR_VAR 0 16
29469: PUSH
29470: LD_VAR 0 1
29474: PPUSH
29475: CALL_OW 255
29479: ST_TO_ADDR
// x := GetX ( tower ) ;
29480: LD_ADDR_VAR 0 10
29484: PUSH
29485: LD_VAR 0 1
29489: PPUSH
29490: CALL_OW 250
29494: ST_TO_ADDR
// y := GetY ( tower ) ;
29495: LD_ADDR_VAR 0 11
29499: PUSH
29500: LD_VAR 0 1
29504: PPUSH
29505: CALL_OW 251
29509: ST_TO_ADDR
// if not x or not y then
29510: LD_VAR 0 10
29514: NOT
29515: PUSH
29516: LD_VAR 0 11
29520: NOT
29521: OR
29522: IFFALSE 29526
// exit ;
29524: GO 30559
// weapon := 0 ;
29526: LD_ADDR_VAR 0 18
29530: PUSH
29531: LD_INT 0
29533: ST_TO_ADDR
// fac_list := [ ] ;
29534: LD_ADDR_VAR 0 17
29538: PUSH
29539: EMPTY
29540: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
29541: LD_ADDR_VAR 0 6
29545: PUSH
29546: LD_VAR 0 1
29550: PPUSH
29551: CALL_OW 274
29555: PPUSH
29556: LD_VAR 0 2
29560: PPUSH
29561: LD_INT 0
29563: PPUSH
29564: CALL 27130 0 3
29568: PPUSH
29569: LD_INT 30
29571: PUSH
29572: LD_INT 3
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PPUSH
29579: CALL_OW 72
29583: ST_TO_ADDR
// if not factories then
29584: LD_VAR 0 6
29588: NOT
29589: IFFALSE 29593
// exit ;
29591: GO 30559
// for i in factories do
29593: LD_ADDR_VAR 0 8
29597: PUSH
29598: LD_VAR 0 6
29602: PUSH
29603: FOR_IN
29604: IFFALSE 29629
// fac_list := fac_list union AvailableWeaponList ( i ) ;
29606: LD_ADDR_VAR 0 17
29610: PUSH
29611: LD_VAR 0 17
29615: PUSH
29616: LD_VAR 0 8
29620: PPUSH
29621: CALL_OW 478
29625: UNION
29626: ST_TO_ADDR
29627: GO 29603
29629: POP
29630: POP
// if not fac_list then
29631: LD_VAR 0 17
29635: NOT
29636: IFFALSE 29640
// exit ;
29638: GO 30559
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
29640: LD_ADDR_VAR 0 5
29644: PUSH
29645: LD_INT 4
29647: PUSH
29648: LD_INT 5
29650: PUSH
29651: LD_INT 9
29653: PUSH
29654: LD_INT 10
29656: PUSH
29657: LD_INT 6
29659: PUSH
29660: LD_INT 7
29662: PUSH
29663: LD_INT 11
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 27
29677: PUSH
29678: LD_INT 28
29680: PUSH
29681: LD_INT 26
29683: PUSH
29684: LD_INT 30
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 43
29695: PUSH
29696: LD_INT 44
29698: PUSH
29699: LD_INT 46
29701: PUSH
29702: LD_INT 45
29704: PUSH
29705: LD_INT 47
29707: PUSH
29708: LD_INT 49
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: LIST
29723: PUSH
29724: LD_VAR 0 12
29728: ARRAY
29729: ST_TO_ADDR
// list := list isect fac_list ;
29730: LD_ADDR_VAR 0 5
29734: PUSH
29735: LD_VAR 0 5
29739: PUSH
29740: LD_VAR 0 17
29744: ISECT
29745: ST_TO_ADDR
// if not list then
29746: LD_VAR 0 5
29750: NOT
29751: IFFALSE 29755
// exit ;
29753: GO 30559
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
29755: LD_VAR 0 12
29759: PUSH
29760: LD_INT 3
29762: EQUAL
29763: PUSH
29764: LD_INT 49
29766: PUSH
29767: LD_VAR 0 5
29771: IN
29772: AND
29773: PUSH
29774: LD_INT 31
29776: PPUSH
29777: LD_VAR 0 16
29781: PPUSH
29782: CALL_OW 321
29786: PUSH
29787: LD_INT 2
29789: EQUAL
29790: AND
29791: IFFALSE 29851
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
29793: LD_INT 22
29795: PUSH
29796: LD_VAR 0 16
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 35
29807: PUSH
29808: LD_INT 49
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 91
29817: PUSH
29818: LD_VAR 0 1
29822: PUSH
29823: LD_INT 10
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: LIST
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: LIST
29835: PPUSH
29836: CALL_OW 69
29840: NOT
29841: IFFALSE 29851
// weapon := ru_time_lapser ;
29843: LD_ADDR_VAR 0 18
29847: PUSH
29848: LD_INT 49
29850: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
29851: LD_VAR 0 12
29855: PUSH
29856: LD_INT 1
29858: PUSH
29859: LD_INT 2
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: IN
29866: PUSH
29867: LD_INT 11
29869: PUSH
29870: LD_VAR 0 5
29874: IN
29875: PUSH
29876: LD_INT 30
29878: PUSH
29879: LD_VAR 0 5
29883: IN
29884: OR
29885: AND
29886: PUSH
29887: LD_INT 6
29889: PPUSH
29890: LD_VAR 0 16
29894: PPUSH
29895: CALL_OW 321
29899: PUSH
29900: LD_INT 2
29902: EQUAL
29903: AND
29904: IFFALSE 30069
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
29906: LD_INT 22
29908: PUSH
29909: LD_VAR 0 16
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 2
29920: PUSH
29921: LD_INT 35
29923: PUSH
29924: LD_INT 11
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: LD_INT 35
29933: PUSH
29934: LD_INT 30
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 91
29948: PUSH
29949: LD_VAR 0 1
29953: PUSH
29954: LD_INT 18
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: LIST
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: LIST
29966: PPUSH
29967: CALL_OW 69
29971: NOT
29972: PUSH
29973: LD_INT 22
29975: PUSH
29976: LD_VAR 0 16
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 2
29987: PUSH
29988: LD_INT 30
29990: PUSH
29991: LD_INT 32
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 30
30000: PUSH
30001: LD_INT 33
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 91
30015: PUSH
30016: LD_VAR 0 1
30020: PUSH
30021: LD_INT 12
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: LIST
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: LIST
30033: PUSH
30034: EMPTY
30035: LIST
30036: PPUSH
30037: CALL_OW 69
30041: PUSH
30042: LD_INT 2
30044: GREATER
30045: AND
30046: IFFALSE 30069
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30048: LD_ADDR_VAR 0 18
30052: PUSH
30053: LD_INT 11
30055: PUSH
30056: LD_INT 30
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_VAR 0 12
30067: ARRAY
30068: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30069: LD_VAR 0 18
30073: NOT
30074: PUSH
30075: LD_INT 40
30077: PPUSH
30078: LD_VAR 0 16
30082: PPUSH
30083: CALL_OW 321
30087: PUSH
30088: LD_INT 2
30090: EQUAL
30091: AND
30092: PUSH
30093: LD_INT 7
30095: PUSH
30096: LD_VAR 0 5
30100: IN
30101: PUSH
30102: LD_INT 28
30104: PUSH
30105: LD_VAR 0 5
30109: IN
30110: OR
30111: PUSH
30112: LD_INT 45
30114: PUSH
30115: LD_VAR 0 5
30119: IN
30120: OR
30121: AND
30122: IFFALSE 30376
// begin hex := GetHexInfo ( x , y ) ;
30124: LD_ADDR_VAR 0 4
30128: PUSH
30129: LD_VAR 0 10
30133: PPUSH
30134: LD_VAR 0 11
30138: PPUSH
30139: CALL_OW 546
30143: ST_TO_ADDR
// if hex [ 1 ] then
30144: LD_VAR 0 4
30148: PUSH
30149: LD_INT 1
30151: ARRAY
30152: IFFALSE 30156
// exit ;
30154: GO 30559
// height := hex [ 2 ] ;
30156: LD_ADDR_VAR 0 15
30160: PUSH
30161: LD_VAR 0 4
30165: PUSH
30166: LD_INT 2
30168: ARRAY
30169: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30170: LD_ADDR_VAR 0 14
30174: PUSH
30175: LD_INT 0
30177: PUSH
30178: LD_INT 2
30180: PUSH
30181: LD_INT 3
30183: PUSH
30184: LD_INT 5
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: ST_TO_ADDR
// for i in tmp do
30193: LD_ADDR_VAR 0 8
30197: PUSH
30198: LD_VAR 0 14
30202: PUSH
30203: FOR_IN
30204: IFFALSE 30374
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30206: LD_ADDR_VAR 0 9
30210: PUSH
30211: LD_VAR 0 10
30215: PPUSH
30216: LD_VAR 0 8
30220: PPUSH
30221: LD_INT 5
30223: PPUSH
30224: CALL_OW 272
30228: PUSH
30229: LD_VAR 0 11
30233: PPUSH
30234: LD_VAR 0 8
30238: PPUSH
30239: LD_INT 5
30241: PPUSH
30242: CALL_OW 273
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30251: LD_VAR 0 9
30255: PUSH
30256: LD_INT 1
30258: ARRAY
30259: PPUSH
30260: LD_VAR 0 9
30264: PUSH
30265: LD_INT 2
30267: ARRAY
30268: PPUSH
30269: CALL_OW 488
30273: IFFALSE 30372
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30275: LD_ADDR_VAR 0 4
30279: PUSH
30280: LD_VAR 0 9
30284: PUSH
30285: LD_INT 1
30287: ARRAY
30288: PPUSH
30289: LD_VAR 0 9
30293: PUSH
30294: LD_INT 2
30296: ARRAY
30297: PPUSH
30298: CALL_OW 546
30302: ST_TO_ADDR
// if hex [ 1 ] then
30303: LD_VAR 0 4
30307: PUSH
30308: LD_INT 1
30310: ARRAY
30311: IFFALSE 30315
// continue ;
30313: GO 30203
// h := hex [ 2 ] ;
30315: LD_ADDR_VAR 0 13
30319: PUSH
30320: LD_VAR 0 4
30324: PUSH
30325: LD_INT 2
30327: ARRAY
30328: ST_TO_ADDR
// if h + 7 < height then
30329: LD_VAR 0 13
30333: PUSH
30334: LD_INT 7
30336: PLUS
30337: PUSH
30338: LD_VAR 0 15
30342: LESS
30343: IFFALSE 30372
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30345: LD_ADDR_VAR 0 18
30349: PUSH
30350: LD_INT 7
30352: PUSH
30353: LD_INT 28
30355: PUSH
30356: LD_INT 45
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: LIST
30363: PUSH
30364: LD_VAR 0 12
30368: ARRAY
30369: ST_TO_ADDR
// break ;
30370: GO 30374
// end ; end ; end ;
30372: GO 30203
30374: POP
30375: POP
// end ; if not weapon then
30376: LD_VAR 0 18
30380: NOT
30381: IFFALSE 30441
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30383: LD_ADDR_VAR 0 5
30387: PUSH
30388: LD_VAR 0 5
30392: PUSH
30393: LD_INT 11
30395: PUSH
30396: LD_INT 30
30398: PUSH
30399: LD_INT 49
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: LIST
30406: DIFF
30407: ST_TO_ADDR
// if not list then
30408: LD_VAR 0 5
30412: NOT
30413: IFFALSE 30417
// exit ;
30415: GO 30559
// weapon := list [ rand ( 1 , list ) ] ;
30417: LD_ADDR_VAR 0 18
30421: PUSH
30422: LD_VAR 0 5
30426: PUSH
30427: LD_INT 1
30429: PPUSH
30430: LD_VAR 0 5
30434: PPUSH
30435: CALL_OW 12
30439: ARRAY
30440: ST_TO_ADDR
// end ; if weapon then
30441: LD_VAR 0 18
30445: IFFALSE 30559
// begin tmp := CostOfWeapon ( weapon ) ;
30447: LD_ADDR_VAR 0 14
30451: PUSH
30452: LD_VAR 0 18
30456: PPUSH
30457: CALL_OW 451
30461: ST_TO_ADDR
// j := GetBase ( tower ) ;
30462: LD_ADDR_VAR 0 9
30466: PUSH
30467: LD_VAR 0 1
30471: PPUSH
30472: CALL_OW 274
30476: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30477: LD_VAR 0 9
30481: PPUSH
30482: LD_INT 1
30484: PPUSH
30485: CALL_OW 275
30489: PUSH
30490: LD_VAR 0 14
30494: PUSH
30495: LD_INT 1
30497: ARRAY
30498: GREATEREQUAL
30499: PUSH
30500: LD_VAR 0 9
30504: PPUSH
30505: LD_INT 2
30507: PPUSH
30508: CALL_OW 275
30512: PUSH
30513: LD_VAR 0 14
30517: PUSH
30518: LD_INT 2
30520: ARRAY
30521: GREATEREQUAL
30522: AND
30523: PUSH
30524: LD_VAR 0 9
30528: PPUSH
30529: LD_INT 3
30531: PPUSH
30532: CALL_OW 275
30536: PUSH
30537: LD_VAR 0 14
30541: PUSH
30542: LD_INT 3
30544: ARRAY
30545: GREATEREQUAL
30546: AND
30547: IFFALSE 30559
// result := weapon ;
30549: LD_ADDR_VAR 0 3
30553: PUSH
30554: LD_VAR 0 18
30558: ST_TO_ADDR
// end ; end ;
30559: LD_VAR 0 3
30563: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
30564: LD_INT 0
30566: PPUSH
30567: PPUSH
// result := true ;
30568: LD_ADDR_VAR 0 3
30572: PUSH
30573: LD_INT 1
30575: ST_TO_ADDR
// if array1 = array2 then
30576: LD_VAR 0 1
30580: PUSH
30581: LD_VAR 0 2
30585: EQUAL
30586: IFFALSE 30646
// begin for i = 1 to array1 do
30588: LD_ADDR_VAR 0 4
30592: PUSH
30593: DOUBLE
30594: LD_INT 1
30596: DEC
30597: ST_TO_ADDR
30598: LD_VAR 0 1
30602: PUSH
30603: FOR_TO
30604: IFFALSE 30642
// if array1 [ i ] <> array2 [ i ] then
30606: LD_VAR 0 1
30610: PUSH
30611: LD_VAR 0 4
30615: ARRAY
30616: PUSH
30617: LD_VAR 0 2
30621: PUSH
30622: LD_VAR 0 4
30626: ARRAY
30627: NONEQUAL
30628: IFFALSE 30640
// begin result := false ;
30630: LD_ADDR_VAR 0 3
30634: PUSH
30635: LD_INT 0
30637: ST_TO_ADDR
// break ;
30638: GO 30642
// end ;
30640: GO 30603
30642: POP
30643: POP
// end else
30644: GO 30654
// result := false ;
30646: LD_ADDR_VAR 0 3
30650: PUSH
30651: LD_INT 0
30653: ST_TO_ADDR
// end ;
30654: LD_VAR 0 3
30658: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
30659: LD_INT 0
30661: PPUSH
30662: PPUSH
// if not array1 or not array2 then
30663: LD_VAR 0 1
30667: NOT
30668: PUSH
30669: LD_VAR 0 2
30673: NOT
30674: OR
30675: IFFALSE 30679
// exit ;
30677: GO 30743
// result := true ;
30679: LD_ADDR_VAR 0 3
30683: PUSH
30684: LD_INT 1
30686: ST_TO_ADDR
// for i = 1 to array1 do
30687: LD_ADDR_VAR 0 4
30691: PUSH
30692: DOUBLE
30693: LD_INT 1
30695: DEC
30696: ST_TO_ADDR
30697: LD_VAR 0 1
30701: PUSH
30702: FOR_TO
30703: IFFALSE 30741
// if array1 [ i ] <> array2 [ i ] then
30705: LD_VAR 0 1
30709: PUSH
30710: LD_VAR 0 4
30714: ARRAY
30715: PUSH
30716: LD_VAR 0 2
30720: PUSH
30721: LD_VAR 0 4
30725: ARRAY
30726: NONEQUAL
30727: IFFALSE 30739
// begin result := false ;
30729: LD_ADDR_VAR 0 3
30733: PUSH
30734: LD_INT 0
30736: ST_TO_ADDR
// break ;
30737: GO 30741
// end ;
30739: GO 30702
30741: POP
30742: POP
// end ;
30743: LD_VAR 0 3
30747: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
30748: LD_INT 0
30750: PPUSH
30751: PPUSH
30752: PPUSH
// pom := GetBase ( fac ) ;
30753: LD_ADDR_VAR 0 5
30757: PUSH
30758: LD_VAR 0 1
30762: PPUSH
30763: CALL_OW 274
30767: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
30768: LD_ADDR_VAR 0 4
30772: PUSH
30773: LD_VAR 0 2
30777: PUSH
30778: LD_INT 1
30780: ARRAY
30781: PPUSH
30782: LD_VAR 0 2
30786: PUSH
30787: LD_INT 2
30789: ARRAY
30790: PPUSH
30791: LD_VAR 0 2
30795: PUSH
30796: LD_INT 3
30798: ARRAY
30799: PPUSH
30800: LD_VAR 0 2
30804: PUSH
30805: LD_INT 4
30807: ARRAY
30808: PPUSH
30809: CALL_OW 449
30813: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30814: LD_ADDR_VAR 0 3
30818: PUSH
30819: LD_VAR 0 5
30823: PPUSH
30824: LD_INT 1
30826: PPUSH
30827: CALL_OW 275
30831: PUSH
30832: LD_VAR 0 4
30836: PUSH
30837: LD_INT 1
30839: ARRAY
30840: GREATEREQUAL
30841: PUSH
30842: LD_VAR 0 5
30846: PPUSH
30847: LD_INT 2
30849: PPUSH
30850: CALL_OW 275
30854: PUSH
30855: LD_VAR 0 4
30859: PUSH
30860: LD_INT 2
30862: ARRAY
30863: GREATEREQUAL
30864: AND
30865: PUSH
30866: LD_VAR 0 5
30870: PPUSH
30871: LD_INT 3
30873: PPUSH
30874: CALL_OW 275
30878: PUSH
30879: LD_VAR 0 4
30883: PUSH
30884: LD_INT 3
30886: ARRAY
30887: GREATEREQUAL
30888: AND
30889: ST_TO_ADDR
// end ;
30890: LD_VAR 0 3
30894: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
30895: LD_INT 0
30897: PPUSH
30898: PPUSH
30899: PPUSH
30900: PPUSH
// pom := GetBase ( building ) ;
30901: LD_ADDR_VAR 0 3
30905: PUSH
30906: LD_VAR 0 1
30910: PPUSH
30911: CALL_OW 274
30915: ST_TO_ADDR
// if not pom then
30916: LD_VAR 0 3
30920: NOT
30921: IFFALSE 30925
// exit ;
30923: GO 31095
// btype := GetBType ( building ) ;
30925: LD_ADDR_VAR 0 5
30929: PUSH
30930: LD_VAR 0 1
30934: PPUSH
30935: CALL_OW 266
30939: ST_TO_ADDR
// if btype = b_armoury then
30940: LD_VAR 0 5
30944: PUSH
30945: LD_INT 4
30947: EQUAL
30948: IFFALSE 30958
// btype := b_barracks ;
30950: LD_ADDR_VAR 0 5
30954: PUSH
30955: LD_INT 5
30957: ST_TO_ADDR
// if btype = b_depot then
30958: LD_VAR 0 5
30962: PUSH
30963: LD_INT 0
30965: EQUAL
30966: IFFALSE 30976
// btype := b_warehouse ;
30968: LD_ADDR_VAR 0 5
30972: PUSH
30973: LD_INT 1
30975: ST_TO_ADDR
// if btype = b_workshop then
30976: LD_VAR 0 5
30980: PUSH
30981: LD_INT 2
30983: EQUAL
30984: IFFALSE 30994
// btype := b_factory ;
30986: LD_ADDR_VAR 0 5
30990: PUSH
30991: LD_INT 3
30993: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30994: LD_ADDR_VAR 0 4
30998: PUSH
30999: LD_VAR 0 5
31003: PPUSH
31004: LD_VAR 0 1
31008: PPUSH
31009: CALL_OW 248
31013: PPUSH
31014: CALL_OW 450
31018: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31019: LD_ADDR_VAR 0 2
31023: PUSH
31024: LD_VAR 0 3
31028: PPUSH
31029: LD_INT 1
31031: PPUSH
31032: CALL_OW 275
31036: PUSH
31037: LD_VAR 0 4
31041: PUSH
31042: LD_INT 1
31044: ARRAY
31045: GREATEREQUAL
31046: PUSH
31047: LD_VAR 0 3
31051: PPUSH
31052: LD_INT 2
31054: PPUSH
31055: CALL_OW 275
31059: PUSH
31060: LD_VAR 0 4
31064: PUSH
31065: LD_INT 2
31067: ARRAY
31068: GREATEREQUAL
31069: AND
31070: PUSH
31071: LD_VAR 0 3
31075: PPUSH
31076: LD_INT 3
31078: PPUSH
31079: CALL_OW 275
31083: PUSH
31084: LD_VAR 0 4
31088: PUSH
31089: LD_INT 3
31091: ARRAY
31092: GREATEREQUAL
31093: AND
31094: ST_TO_ADDR
// end ;
31095: LD_VAR 0 2
31099: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31100: LD_INT 0
31102: PPUSH
31103: PPUSH
31104: PPUSH
// pom := GetBase ( building ) ;
31105: LD_ADDR_VAR 0 4
31109: PUSH
31110: LD_VAR 0 1
31114: PPUSH
31115: CALL_OW 274
31119: ST_TO_ADDR
// if not pom then
31120: LD_VAR 0 4
31124: NOT
31125: IFFALSE 31129
// exit ;
31127: GO 31230
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31129: LD_ADDR_VAR 0 5
31133: PUSH
31134: LD_VAR 0 2
31138: PPUSH
31139: LD_VAR 0 1
31143: PPUSH
31144: CALL_OW 248
31148: PPUSH
31149: CALL_OW 450
31153: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31154: LD_ADDR_VAR 0 3
31158: PUSH
31159: LD_VAR 0 4
31163: PPUSH
31164: LD_INT 1
31166: PPUSH
31167: CALL_OW 275
31171: PUSH
31172: LD_VAR 0 5
31176: PUSH
31177: LD_INT 1
31179: ARRAY
31180: GREATEREQUAL
31181: PUSH
31182: LD_VAR 0 4
31186: PPUSH
31187: LD_INT 2
31189: PPUSH
31190: CALL_OW 275
31194: PUSH
31195: LD_VAR 0 5
31199: PUSH
31200: LD_INT 2
31202: ARRAY
31203: GREATEREQUAL
31204: AND
31205: PUSH
31206: LD_VAR 0 4
31210: PPUSH
31211: LD_INT 3
31213: PPUSH
31214: CALL_OW 275
31218: PUSH
31219: LD_VAR 0 5
31223: PUSH
31224: LD_INT 3
31226: ARRAY
31227: GREATEREQUAL
31228: AND
31229: ST_TO_ADDR
// end ;
31230: LD_VAR 0 3
31234: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
31235: LD_INT 0
31237: PPUSH
31238: PPUSH
31239: PPUSH
31240: PPUSH
31241: PPUSH
31242: PPUSH
31243: PPUSH
31244: PPUSH
31245: PPUSH
31246: PPUSH
31247: PPUSH
// result := false ;
31248: LD_ADDR_VAR 0 8
31252: PUSH
31253: LD_INT 0
31255: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
31256: LD_VAR 0 5
31260: NOT
31261: PUSH
31262: LD_VAR 0 1
31266: NOT
31267: OR
31268: PUSH
31269: LD_VAR 0 2
31273: NOT
31274: OR
31275: PUSH
31276: LD_VAR 0 3
31280: NOT
31281: OR
31282: IFFALSE 31286
// exit ;
31284: GO 32100
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
31286: LD_ADDR_VAR 0 14
31290: PUSH
31291: LD_VAR 0 1
31295: PPUSH
31296: LD_VAR 0 2
31300: PPUSH
31301: LD_VAR 0 3
31305: PPUSH
31306: LD_VAR 0 4
31310: PPUSH
31311: LD_VAR 0 5
31315: PUSH
31316: LD_INT 1
31318: ARRAY
31319: PPUSH
31320: CALL_OW 248
31324: PPUSH
31325: LD_INT 0
31327: PPUSH
31328: CALL 33337 0 6
31332: ST_TO_ADDR
// if not hexes then
31333: LD_VAR 0 14
31337: NOT
31338: IFFALSE 31342
// exit ;
31340: GO 32100
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31342: LD_ADDR_VAR 0 17
31346: PUSH
31347: LD_VAR 0 5
31351: PPUSH
31352: LD_INT 22
31354: PUSH
31355: LD_VAR 0 13
31359: PPUSH
31360: CALL_OW 255
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 2
31371: PUSH
31372: LD_INT 30
31374: PUSH
31375: LD_INT 0
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 30
31384: PUSH
31385: LD_INT 1
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: LIST
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PPUSH
31401: CALL_OW 72
31405: ST_TO_ADDR
// for i = 1 to hexes do
31406: LD_ADDR_VAR 0 9
31410: PUSH
31411: DOUBLE
31412: LD_INT 1
31414: DEC
31415: ST_TO_ADDR
31416: LD_VAR 0 14
31420: PUSH
31421: FOR_TO
31422: IFFALSE 32098
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31424: LD_ADDR_VAR 0 13
31428: PUSH
31429: LD_VAR 0 14
31433: PUSH
31434: LD_VAR 0 9
31438: ARRAY
31439: PUSH
31440: LD_INT 1
31442: ARRAY
31443: PPUSH
31444: LD_VAR 0 14
31448: PUSH
31449: LD_VAR 0 9
31453: ARRAY
31454: PUSH
31455: LD_INT 2
31457: ARRAY
31458: PPUSH
31459: CALL_OW 428
31463: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31464: LD_VAR 0 14
31468: PUSH
31469: LD_VAR 0 9
31473: ARRAY
31474: PUSH
31475: LD_INT 1
31477: ARRAY
31478: PPUSH
31479: LD_VAR 0 14
31483: PUSH
31484: LD_VAR 0 9
31488: ARRAY
31489: PUSH
31490: LD_INT 2
31492: ARRAY
31493: PPUSH
31494: CALL_OW 351
31498: PUSH
31499: LD_VAR 0 14
31503: PUSH
31504: LD_VAR 0 9
31508: ARRAY
31509: PUSH
31510: LD_INT 1
31512: ARRAY
31513: PPUSH
31514: LD_VAR 0 14
31518: PUSH
31519: LD_VAR 0 9
31523: ARRAY
31524: PUSH
31525: LD_INT 2
31527: ARRAY
31528: PPUSH
31529: CALL_OW 488
31533: NOT
31534: OR
31535: PUSH
31536: LD_VAR 0 13
31540: PPUSH
31541: CALL_OW 247
31545: PUSH
31546: LD_INT 3
31548: EQUAL
31549: OR
31550: IFFALSE 31556
// exit ;
31552: POP
31553: POP
31554: GO 32100
// if not tmp then
31556: LD_VAR 0 13
31560: NOT
31561: IFFALSE 31565
// continue ;
31563: GO 31421
// result := true ;
31565: LD_ADDR_VAR 0 8
31569: PUSH
31570: LD_INT 1
31572: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
31573: LD_VAR 0 6
31577: PUSH
31578: LD_VAR 0 13
31582: PPUSH
31583: CALL_OW 247
31587: PUSH
31588: LD_INT 2
31590: EQUAL
31591: AND
31592: PUSH
31593: LD_VAR 0 13
31597: PPUSH
31598: CALL_OW 263
31602: PUSH
31603: LD_INT 1
31605: EQUAL
31606: AND
31607: IFFALSE 31771
// begin if IsDrivenBy ( tmp ) then
31609: LD_VAR 0 13
31613: PPUSH
31614: CALL_OW 311
31618: IFFALSE 31622
// continue ;
31620: GO 31421
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
31622: LD_VAR 0 6
31626: PPUSH
31627: LD_INT 3
31629: PUSH
31630: LD_INT 60
31632: PUSH
31633: EMPTY
31634: LIST
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 3
31642: PUSH
31643: LD_INT 55
31645: PUSH
31646: EMPTY
31647: LIST
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PPUSH
31657: CALL_OW 72
31661: IFFALSE 31769
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
31663: LD_ADDR_VAR 0 18
31667: PUSH
31668: LD_VAR 0 6
31672: PPUSH
31673: LD_INT 3
31675: PUSH
31676: LD_INT 60
31678: PUSH
31679: EMPTY
31680: LIST
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 3
31688: PUSH
31689: LD_INT 55
31691: PUSH
31692: EMPTY
31693: LIST
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PPUSH
31703: CALL_OW 72
31707: PUSH
31708: LD_INT 1
31710: ARRAY
31711: ST_TO_ADDR
// if IsInUnit ( driver ) then
31712: LD_VAR 0 18
31716: PPUSH
31717: CALL_OW 310
31721: IFFALSE 31732
// ComExit ( driver ) ;
31723: LD_VAR 0 18
31727: PPUSH
31728: CALL 56465 0 1
// AddComEnterUnit ( driver , tmp ) ;
31732: LD_VAR 0 18
31736: PPUSH
31737: LD_VAR 0 13
31741: PPUSH
31742: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
31746: LD_VAR 0 18
31750: PPUSH
31751: LD_VAR 0 7
31755: PPUSH
31756: CALL_OW 173
// AddComExitVehicle ( driver ) ;
31760: LD_VAR 0 18
31764: PPUSH
31765: CALL_OW 181
// end ; continue ;
31769: GO 31421
// end ; if not cleaners or not tmp in cleaners then
31771: LD_VAR 0 6
31775: NOT
31776: PUSH
31777: LD_VAR 0 13
31781: PUSH
31782: LD_VAR 0 6
31786: IN
31787: NOT
31788: OR
31789: IFFALSE 32096
// begin if dep then
31791: LD_VAR 0 17
31795: IFFALSE 31931
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
31797: LD_ADDR_VAR 0 16
31801: PUSH
31802: LD_VAR 0 17
31806: PUSH
31807: LD_INT 1
31809: ARRAY
31810: PPUSH
31811: CALL_OW 250
31815: PPUSH
31816: LD_VAR 0 17
31820: PUSH
31821: LD_INT 1
31823: ARRAY
31824: PPUSH
31825: CALL_OW 254
31829: PPUSH
31830: LD_INT 5
31832: PPUSH
31833: CALL_OW 272
31837: PUSH
31838: LD_VAR 0 17
31842: PUSH
31843: LD_INT 1
31845: ARRAY
31846: PPUSH
31847: CALL_OW 251
31851: PPUSH
31852: LD_VAR 0 17
31856: PUSH
31857: LD_INT 1
31859: ARRAY
31860: PPUSH
31861: CALL_OW 254
31865: PPUSH
31866: LD_INT 5
31868: PPUSH
31869: CALL_OW 273
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
31878: LD_VAR 0 16
31882: PUSH
31883: LD_INT 1
31885: ARRAY
31886: PPUSH
31887: LD_VAR 0 16
31891: PUSH
31892: LD_INT 2
31894: ARRAY
31895: PPUSH
31896: CALL_OW 488
31900: IFFALSE 31931
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
31902: LD_VAR 0 13
31906: PPUSH
31907: LD_VAR 0 16
31911: PUSH
31912: LD_INT 1
31914: ARRAY
31915: PPUSH
31916: LD_VAR 0 16
31920: PUSH
31921: LD_INT 2
31923: ARRAY
31924: PPUSH
31925: CALL_OW 111
// continue ;
31929: GO 31421
// end ; end ; r := GetDir ( tmp ) ;
31931: LD_ADDR_VAR 0 15
31935: PUSH
31936: LD_VAR 0 13
31940: PPUSH
31941: CALL_OW 254
31945: ST_TO_ADDR
// if r = 5 then
31946: LD_VAR 0 15
31950: PUSH
31951: LD_INT 5
31953: EQUAL
31954: IFFALSE 31964
// r := 0 ;
31956: LD_ADDR_VAR 0 15
31960: PUSH
31961: LD_INT 0
31963: ST_TO_ADDR
// for j = r to 5 do
31964: LD_ADDR_VAR 0 10
31968: PUSH
31969: DOUBLE
31970: LD_VAR 0 15
31974: DEC
31975: ST_TO_ADDR
31976: LD_INT 5
31978: PUSH
31979: FOR_TO
31980: IFFALSE 32094
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
31982: LD_ADDR_VAR 0 11
31986: PUSH
31987: LD_VAR 0 13
31991: PPUSH
31992: CALL_OW 250
31996: PPUSH
31997: LD_VAR 0 10
32001: PPUSH
32002: LD_INT 2
32004: PPUSH
32005: CALL_OW 272
32009: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32010: LD_ADDR_VAR 0 12
32014: PUSH
32015: LD_VAR 0 13
32019: PPUSH
32020: CALL_OW 251
32024: PPUSH
32025: LD_VAR 0 10
32029: PPUSH
32030: LD_INT 2
32032: PPUSH
32033: CALL_OW 273
32037: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32038: LD_VAR 0 11
32042: PPUSH
32043: LD_VAR 0 12
32047: PPUSH
32048: CALL_OW 488
32052: PUSH
32053: LD_VAR 0 11
32057: PPUSH
32058: LD_VAR 0 12
32062: PPUSH
32063: CALL_OW 428
32067: NOT
32068: AND
32069: IFFALSE 32092
// begin ComMoveXY ( tmp , _x , _y ) ;
32071: LD_VAR 0 13
32075: PPUSH
32076: LD_VAR 0 11
32080: PPUSH
32081: LD_VAR 0 12
32085: PPUSH
32086: CALL_OW 111
// break ;
32090: GO 32094
// end ; end ;
32092: GO 31979
32094: POP
32095: POP
// end ; end ;
32096: GO 31421
32098: POP
32099: POP
// end ;
32100: LD_VAR 0 8
32104: RET
// export function BuildingTechInvented ( side , btype ) ; begin
32105: LD_INT 0
32107: PPUSH
// result := true ;
32108: LD_ADDR_VAR 0 3
32112: PUSH
32113: LD_INT 1
32115: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
32116: LD_VAR 0 2
32120: PUSH
32121: LD_INT 24
32123: DOUBLE
32124: EQUAL
32125: IFTRUE 32135
32127: LD_INT 33
32129: DOUBLE
32130: EQUAL
32131: IFTRUE 32135
32133: GO 32160
32135: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
32136: LD_ADDR_VAR 0 3
32140: PUSH
32141: LD_INT 32
32143: PPUSH
32144: LD_VAR 0 1
32148: PPUSH
32149: CALL_OW 321
32153: PUSH
32154: LD_INT 2
32156: EQUAL
32157: ST_TO_ADDR
32158: GO 32480
32160: LD_INT 20
32162: DOUBLE
32163: EQUAL
32164: IFTRUE 32168
32166: GO 32193
32168: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
32169: LD_ADDR_VAR 0 3
32173: PUSH
32174: LD_INT 6
32176: PPUSH
32177: LD_VAR 0 1
32181: PPUSH
32182: CALL_OW 321
32186: PUSH
32187: LD_INT 2
32189: EQUAL
32190: ST_TO_ADDR
32191: GO 32480
32193: LD_INT 22
32195: DOUBLE
32196: EQUAL
32197: IFTRUE 32207
32199: LD_INT 36
32201: DOUBLE
32202: EQUAL
32203: IFTRUE 32207
32205: GO 32232
32207: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
32208: LD_ADDR_VAR 0 3
32212: PUSH
32213: LD_INT 15
32215: PPUSH
32216: LD_VAR 0 1
32220: PPUSH
32221: CALL_OW 321
32225: PUSH
32226: LD_INT 2
32228: EQUAL
32229: ST_TO_ADDR
32230: GO 32480
32232: LD_INT 30
32234: DOUBLE
32235: EQUAL
32236: IFTRUE 32240
32238: GO 32265
32240: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
32241: LD_ADDR_VAR 0 3
32245: PUSH
32246: LD_INT 20
32248: PPUSH
32249: LD_VAR 0 1
32253: PPUSH
32254: CALL_OW 321
32258: PUSH
32259: LD_INT 2
32261: EQUAL
32262: ST_TO_ADDR
32263: GO 32480
32265: LD_INT 28
32267: DOUBLE
32268: EQUAL
32269: IFTRUE 32279
32271: LD_INT 21
32273: DOUBLE
32274: EQUAL
32275: IFTRUE 32279
32277: GO 32304
32279: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
32280: LD_ADDR_VAR 0 3
32284: PUSH
32285: LD_INT 21
32287: PPUSH
32288: LD_VAR 0 1
32292: PPUSH
32293: CALL_OW 321
32297: PUSH
32298: LD_INT 2
32300: EQUAL
32301: ST_TO_ADDR
32302: GO 32480
32304: LD_INT 16
32306: DOUBLE
32307: EQUAL
32308: IFTRUE 32312
32310: GO 32339
32312: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
32313: LD_ADDR_VAR 0 3
32317: PUSH
32318: LD_EXP 83
32322: PPUSH
32323: LD_VAR 0 1
32327: PPUSH
32328: CALL_OW 321
32332: PUSH
32333: LD_INT 2
32335: EQUAL
32336: ST_TO_ADDR
32337: GO 32480
32339: LD_INT 19
32341: DOUBLE
32342: EQUAL
32343: IFTRUE 32353
32345: LD_INT 23
32347: DOUBLE
32348: EQUAL
32349: IFTRUE 32353
32351: GO 32380
32353: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
32354: LD_ADDR_VAR 0 3
32358: PUSH
32359: LD_EXP 82
32363: PPUSH
32364: LD_VAR 0 1
32368: PPUSH
32369: CALL_OW 321
32373: PUSH
32374: LD_INT 2
32376: EQUAL
32377: ST_TO_ADDR
32378: GO 32480
32380: LD_INT 17
32382: DOUBLE
32383: EQUAL
32384: IFTRUE 32388
32386: GO 32413
32388: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
32389: LD_ADDR_VAR 0 3
32393: PUSH
32394: LD_INT 39
32396: PPUSH
32397: LD_VAR 0 1
32401: PPUSH
32402: CALL_OW 321
32406: PUSH
32407: LD_INT 2
32409: EQUAL
32410: ST_TO_ADDR
32411: GO 32480
32413: LD_INT 18
32415: DOUBLE
32416: EQUAL
32417: IFTRUE 32421
32419: GO 32446
32421: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
32422: LD_ADDR_VAR 0 3
32426: PUSH
32427: LD_INT 40
32429: PPUSH
32430: LD_VAR 0 1
32434: PPUSH
32435: CALL_OW 321
32439: PUSH
32440: LD_INT 2
32442: EQUAL
32443: ST_TO_ADDR
32444: GO 32480
32446: LD_INT 27
32448: DOUBLE
32449: EQUAL
32450: IFTRUE 32454
32452: GO 32479
32454: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
32455: LD_ADDR_VAR 0 3
32459: PUSH
32460: LD_INT 35
32462: PPUSH
32463: LD_VAR 0 1
32467: PPUSH
32468: CALL_OW 321
32472: PUSH
32473: LD_INT 2
32475: EQUAL
32476: ST_TO_ADDR
32477: GO 32480
32479: POP
// end ;
32480: LD_VAR 0 3
32484: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
32485: LD_INT 0
32487: PPUSH
32488: PPUSH
32489: PPUSH
32490: PPUSH
32491: PPUSH
32492: PPUSH
32493: PPUSH
32494: PPUSH
32495: PPUSH
32496: PPUSH
32497: PPUSH
// result := false ;
32498: LD_ADDR_VAR 0 6
32502: PUSH
32503: LD_INT 0
32505: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
32506: LD_VAR 0 1
32510: NOT
32511: PUSH
32512: LD_VAR 0 1
32516: PPUSH
32517: CALL_OW 266
32521: PUSH
32522: LD_INT 0
32524: PUSH
32525: LD_INT 1
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: IN
32532: NOT
32533: OR
32534: PUSH
32535: LD_VAR 0 2
32539: NOT
32540: OR
32541: PUSH
32542: LD_VAR 0 5
32546: PUSH
32547: LD_INT 0
32549: PUSH
32550: LD_INT 1
32552: PUSH
32553: LD_INT 2
32555: PUSH
32556: LD_INT 3
32558: PUSH
32559: LD_INT 4
32561: PUSH
32562: LD_INT 5
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: IN
32573: NOT
32574: OR
32575: PUSH
32576: LD_VAR 0 3
32580: PPUSH
32581: LD_VAR 0 4
32585: PPUSH
32586: CALL_OW 488
32590: NOT
32591: OR
32592: IFFALSE 32596
// exit ;
32594: GO 33332
// side := GetSide ( depot ) ;
32596: LD_ADDR_VAR 0 9
32600: PUSH
32601: LD_VAR 0 1
32605: PPUSH
32606: CALL_OW 255
32610: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
32611: LD_VAR 0 9
32615: PPUSH
32616: LD_VAR 0 2
32620: PPUSH
32621: CALL 32105 0 2
32625: NOT
32626: IFFALSE 32630
// exit ;
32628: GO 33332
// pom := GetBase ( depot ) ;
32630: LD_ADDR_VAR 0 10
32634: PUSH
32635: LD_VAR 0 1
32639: PPUSH
32640: CALL_OW 274
32644: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
32645: LD_ADDR_VAR 0 11
32649: PUSH
32650: LD_VAR 0 2
32654: PPUSH
32655: LD_VAR 0 1
32659: PPUSH
32660: CALL_OW 248
32664: PPUSH
32665: CALL_OW 450
32669: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
32670: LD_VAR 0 10
32674: PPUSH
32675: LD_INT 1
32677: PPUSH
32678: CALL_OW 275
32682: PUSH
32683: LD_VAR 0 11
32687: PUSH
32688: LD_INT 1
32690: ARRAY
32691: GREATEREQUAL
32692: PUSH
32693: LD_VAR 0 10
32697: PPUSH
32698: LD_INT 2
32700: PPUSH
32701: CALL_OW 275
32705: PUSH
32706: LD_VAR 0 11
32710: PUSH
32711: LD_INT 2
32713: ARRAY
32714: GREATEREQUAL
32715: AND
32716: PUSH
32717: LD_VAR 0 10
32721: PPUSH
32722: LD_INT 3
32724: PPUSH
32725: CALL_OW 275
32729: PUSH
32730: LD_VAR 0 11
32734: PUSH
32735: LD_INT 3
32737: ARRAY
32738: GREATEREQUAL
32739: AND
32740: NOT
32741: IFFALSE 32745
// exit ;
32743: GO 33332
// if GetBType ( depot ) = b_depot then
32745: LD_VAR 0 1
32749: PPUSH
32750: CALL_OW 266
32754: PUSH
32755: LD_INT 0
32757: EQUAL
32758: IFFALSE 32770
// dist := 28 else
32760: LD_ADDR_VAR 0 14
32764: PUSH
32765: LD_INT 28
32767: ST_TO_ADDR
32768: GO 32778
// dist := 36 ;
32770: LD_ADDR_VAR 0 14
32774: PUSH
32775: LD_INT 36
32777: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
32778: LD_VAR 0 1
32782: PPUSH
32783: LD_VAR 0 3
32787: PPUSH
32788: LD_VAR 0 4
32792: PPUSH
32793: CALL_OW 297
32797: PUSH
32798: LD_VAR 0 14
32802: GREATER
32803: IFFALSE 32807
// exit ;
32805: GO 33332
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
32807: LD_ADDR_VAR 0 12
32811: PUSH
32812: LD_VAR 0 2
32816: PPUSH
32817: LD_VAR 0 3
32821: PPUSH
32822: LD_VAR 0 4
32826: PPUSH
32827: LD_VAR 0 5
32831: PPUSH
32832: LD_VAR 0 1
32836: PPUSH
32837: CALL_OW 248
32841: PPUSH
32842: LD_INT 0
32844: PPUSH
32845: CALL 33337 0 6
32849: ST_TO_ADDR
// if not hexes then
32850: LD_VAR 0 12
32854: NOT
32855: IFFALSE 32859
// exit ;
32857: GO 33332
// hex := GetHexInfo ( x , y ) ;
32859: LD_ADDR_VAR 0 15
32863: PUSH
32864: LD_VAR 0 3
32868: PPUSH
32869: LD_VAR 0 4
32873: PPUSH
32874: CALL_OW 546
32878: ST_TO_ADDR
// if hex [ 1 ] then
32879: LD_VAR 0 15
32883: PUSH
32884: LD_INT 1
32886: ARRAY
32887: IFFALSE 32891
// exit ;
32889: GO 33332
// height := hex [ 2 ] ;
32891: LD_ADDR_VAR 0 13
32895: PUSH
32896: LD_VAR 0 15
32900: PUSH
32901: LD_INT 2
32903: ARRAY
32904: ST_TO_ADDR
// for i = 1 to hexes do
32905: LD_ADDR_VAR 0 7
32909: PUSH
32910: DOUBLE
32911: LD_INT 1
32913: DEC
32914: ST_TO_ADDR
32915: LD_VAR 0 12
32919: PUSH
32920: FOR_TO
32921: IFFALSE 33251
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
32923: LD_VAR 0 12
32927: PUSH
32928: LD_VAR 0 7
32932: ARRAY
32933: PUSH
32934: LD_INT 1
32936: ARRAY
32937: PPUSH
32938: LD_VAR 0 12
32942: PUSH
32943: LD_VAR 0 7
32947: ARRAY
32948: PUSH
32949: LD_INT 2
32951: ARRAY
32952: PPUSH
32953: CALL_OW 488
32957: NOT
32958: PUSH
32959: LD_VAR 0 12
32963: PUSH
32964: LD_VAR 0 7
32968: ARRAY
32969: PUSH
32970: LD_INT 1
32972: ARRAY
32973: PPUSH
32974: LD_VAR 0 12
32978: PUSH
32979: LD_VAR 0 7
32983: ARRAY
32984: PUSH
32985: LD_INT 2
32987: ARRAY
32988: PPUSH
32989: CALL_OW 428
32993: PUSH
32994: LD_INT 0
32996: GREATER
32997: OR
32998: PUSH
32999: LD_VAR 0 12
33003: PUSH
33004: LD_VAR 0 7
33008: ARRAY
33009: PUSH
33010: LD_INT 1
33012: ARRAY
33013: PPUSH
33014: LD_VAR 0 12
33018: PUSH
33019: LD_VAR 0 7
33023: ARRAY
33024: PUSH
33025: LD_INT 2
33027: ARRAY
33028: PPUSH
33029: CALL_OW 351
33033: OR
33034: IFFALSE 33040
// exit ;
33036: POP
33037: POP
33038: GO 33332
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33040: LD_ADDR_VAR 0 8
33044: PUSH
33045: LD_VAR 0 12
33049: PUSH
33050: LD_VAR 0 7
33054: ARRAY
33055: PUSH
33056: LD_INT 1
33058: ARRAY
33059: PPUSH
33060: LD_VAR 0 12
33064: PUSH
33065: LD_VAR 0 7
33069: ARRAY
33070: PUSH
33071: LD_INT 2
33073: ARRAY
33074: PPUSH
33075: CALL_OW 546
33079: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33080: LD_VAR 0 8
33084: PUSH
33085: LD_INT 1
33087: ARRAY
33088: PUSH
33089: LD_VAR 0 8
33093: PUSH
33094: LD_INT 2
33096: ARRAY
33097: PUSH
33098: LD_VAR 0 13
33102: PUSH
33103: LD_INT 2
33105: PLUS
33106: GREATER
33107: OR
33108: PUSH
33109: LD_VAR 0 8
33113: PUSH
33114: LD_INT 2
33116: ARRAY
33117: PUSH
33118: LD_VAR 0 13
33122: PUSH
33123: LD_INT 2
33125: MINUS
33126: LESS
33127: OR
33128: PUSH
33129: LD_VAR 0 8
33133: PUSH
33134: LD_INT 3
33136: ARRAY
33137: PUSH
33138: LD_INT 0
33140: PUSH
33141: LD_INT 8
33143: PUSH
33144: LD_INT 9
33146: PUSH
33147: LD_INT 10
33149: PUSH
33150: LD_INT 11
33152: PUSH
33153: LD_INT 12
33155: PUSH
33156: LD_INT 13
33158: PUSH
33159: LD_INT 16
33161: PUSH
33162: LD_INT 17
33164: PUSH
33165: LD_INT 18
33167: PUSH
33168: LD_INT 19
33170: PUSH
33171: LD_INT 20
33173: PUSH
33174: LD_INT 21
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: IN
33192: NOT
33193: OR
33194: PUSH
33195: LD_VAR 0 8
33199: PUSH
33200: LD_INT 5
33202: ARRAY
33203: NOT
33204: OR
33205: PUSH
33206: LD_VAR 0 8
33210: PUSH
33211: LD_INT 6
33213: ARRAY
33214: PUSH
33215: LD_INT 1
33217: PUSH
33218: LD_INT 2
33220: PUSH
33221: LD_INT 7
33223: PUSH
33224: LD_INT 9
33226: PUSH
33227: LD_INT 10
33229: PUSH
33230: LD_INT 11
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: IN
33241: NOT
33242: OR
33243: IFFALSE 33249
// exit ;
33245: POP
33246: POP
33247: GO 33332
// end ;
33249: GO 32920
33251: POP
33252: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33253: LD_VAR 0 9
33257: PPUSH
33258: LD_VAR 0 3
33262: PPUSH
33263: LD_VAR 0 4
33267: PPUSH
33268: LD_INT 20
33270: PPUSH
33271: CALL 25278 0 4
33275: PUSH
33276: LD_INT 4
33278: ARRAY
33279: IFFALSE 33283
// exit ;
33281: GO 33332
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33283: LD_VAR 0 2
33287: PUSH
33288: LD_INT 29
33290: PUSH
33291: LD_INT 30
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: IN
33298: PUSH
33299: LD_VAR 0 3
33303: PPUSH
33304: LD_VAR 0 4
33308: PPUSH
33309: LD_VAR 0 9
33313: PPUSH
33314: CALL_OW 440
33318: NOT
33319: AND
33320: IFFALSE 33324
// exit ;
33322: GO 33332
// result := true ;
33324: LD_ADDR_VAR 0 6
33328: PUSH
33329: LD_INT 1
33331: ST_TO_ADDR
// end ;
33332: LD_VAR 0 6
33336: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
33337: LD_INT 0
33339: PPUSH
33340: PPUSH
33341: PPUSH
33342: PPUSH
33343: PPUSH
33344: PPUSH
33345: PPUSH
33346: PPUSH
33347: PPUSH
33348: PPUSH
33349: PPUSH
33350: PPUSH
33351: PPUSH
33352: PPUSH
33353: PPUSH
33354: PPUSH
33355: PPUSH
33356: PPUSH
33357: PPUSH
33358: PPUSH
33359: PPUSH
33360: PPUSH
33361: PPUSH
33362: PPUSH
33363: PPUSH
33364: PPUSH
33365: PPUSH
33366: PPUSH
33367: PPUSH
33368: PPUSH
33369: PPUSH
33370: PPUSH
33371: PPUSH
33372: PPUSH
33373: PPUSH
33374: PPUSH
33375: PPUSH
33376: PPUSH
33377: PPUSH
33378: PPUSH
33379: PPUSH
33380: PPUSH
33381: PPUSH
33382: PPUSH
33383: PPUSH
33384: PPUSH
33385: PPUSH
33386: PPUSH
33387: PPUSH
33388: PPUSH
33389: PPUSH
33390: PPUSH
33391: PPUSH
33392: PPUSH
33393: PPUSH
33394: PPUSH
33395: PPUSH
33396: PPUSH
// result = [ ] ;
33397: LD_ADDR_VAR 0 7
33401: PUSH
33402: EMPTY
33403: ST_TO_ADDR
// temp_list = [ ] ;
33404: LD_ADDR_VAR 0 9
33408: PUSH
33409: EMPTY
33410: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
33411: LD_VAR 0 4
33415: PUSH
33416: LD_INT 0
33418: PUSH
33419: LD_INT 1
33421: PUSH
33422: LD_INT 2
33424: PUSH
33425: LD_INT 3
33427: PUSH
33428: LD_INT 4
33430: PUSH
33431: LD_INT 5
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: IN
33442: NOT
33443: PUSH
33444: LD_VAR 0 1
33448: PUSH
33449: LD_INT 0
33451: PUSH
33452: LD_INT 1
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: IN
33459: PUSH
33460: LD_VAR 0 5
33464: PUSH
33465: LD_INT 1
33467: PUSH
33468: LD_INT 2
33470: PUSH
33471: LD_INT 3
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: LIST
33478: IN
33479: NOT
33480: AND
33481: OR
33482: IFFALSE 33486
// exit ;
33484: GO 51877
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
33486: LD_VAR 0 1
33490: PUSH
33491: LD_INT 6
33493: PUSH
33494: LD_INT 7
33496: PUSH
33497: LD_INT 8
33499: PUSH
33500: LD_INT 13
33502: PUSH
33503: LD_INT 12
33505: PUSH
33506: LD_INT 15
33508: PUSH
33509: LD_INT 11
33511: PUSH
33512: LD_INT 14
33514: PUSH
33515: LD_INT 10
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: IN
33529: IFFALSE 33539
// btype = b_lab ;
33531: LD_ADDR_VAR 0 1
33535: PUSH
33536: LD_INT 6
33538: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
33539: LD_VAR 0 6
33543: PUSH
33544: LD_INT 0
33546: PUSH
33547: LD_INT 1
33549: PUSH
33550: LD_INT 2
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: LIST
33557: IN
33558: NOT
33559: PUSH
33560: LD_VAR 0 1
33564: PUSH
33565: LD_INT 0
33567: PUSH
33568: LD_INT 1
33570: PUSH
33571: LD_INT 2
33573: PUSH
33574: LD_INT 3
33576: PUSH
33577: LD_INT 6
33579: PUSH
33580: LD_INT 36
33582: PUSH
33583: LD_INT 4
33585: PUSH
33586: LD_INT 5
33588: PUSH
33589: LD_INT 31
33591: PUSH
33592: LD_INT 32
33594: PUSH
33595: LD_INT 33
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: IN
33611: NOT
33612: PUSH
33613: LD_VAR 0 6
33617: PUSH
33618: LD_INT 1
33620: EQUAL
33621: AND
33622: OR
33623: PUSH
33624: LD_VAR 0 1
33628: PUSH
33629: LD_INT 2
33631: PUSH
33632: LD_INT 3
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: IN
33639: NOT
33640: PUSH
33641: LD_VAR 0 6
33645: PUSH
33646: LD_INT 2
33648: EQUAL
33649: AND
33650: OR
33651: IFFALSE 33661
// mode = 0 ;
33653: LD_ADDR_VAR 0 6
33657: PUSH
33658: LD_INT 0
33660: ST_TO_ADDR
// case mode of 0 :
33661: LD_VAR 0 6
33665: PUSH
33666: LD_INT 0
33668: DOUBLE
33669: EQUAL
33670: IFTRUE 33674
33672: GO 45127
33674: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33675: LD_ADDR_VAR 0 11
33679: PUSH
33680: LD_INT 0
33682: PUSH
33683: LD_INT 0
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 0
33692: PUSH
33693: LD_INT 1
33695: NEG
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 1
33703: PUSH
33704: LD_INT 0
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 1
33713: PUSH
33714: LD_INT 1
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 0
33723: PUSH
33724: LD_INT 1
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 1
33733: NEG
33734: PUSH
33735: LD_INT 0
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 1
33744: NEG
33745: PUSH
33746: LD_INT 1
33748: NEG
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 1
33756: NEG
33757: PUSH
33758: LD_INT 2
33760: NEG
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 0
33768: PUSH
33769: LD_INT 2
33771: NEG
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 1
33779: PUSH
33780: LD_INT 1
33782: NEG
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 1
33790: PUSH
33791: LD_INT 2
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 0
33800: PUSH
33801: LD_INT 2
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 1
33810: NEG
33811: PUSH
33812: LD_INT 1
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 1
33821: PUSH
33822: LD_INT 3
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 0
33831: PUSH
33832: LD_INT 3
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 1
33841: NEG
33842: PUSH
33843: LD_INT 2
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33868: LD_ADDR_VAR 0 12
33872: PUSH
33873: LD_INT 0
33875: PUSH
33876: LD_INT 0
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 0
33885: PUSH
33886: LD_INT 1
33888: NEG
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 1
33896: PUSH
33897: LD_INT 0
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 1
33906: PUSH
33907: LD_INT 1
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: LD_INT 0
33916: PUSH
33917: LD_INT 1
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 1
33926: NEG
33927: PUSH
33928: LD_INT 0
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 1
33937: NEG
33938: PUSH
33939: LD_INT 1
33941: NEG
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 1
33949: PUSH
33950: LD_INT 1
33952: NEG
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: PUSH
33958: LD_INT 2
33960: PUSH
33961: LD_INT 0
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 2
33970: PUSH
33971: LD_INT 1
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 1
33980: NEG
33981: PUSH
33982: LD_INT 1
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 2
33991: NEG
33992: PUSH
33993: LD_INT 0
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 2
34002: NEG
34003: PUSH
34004: LD_INT 1
34006: NEG
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 2
34014: NEG
34015: PUSH
34016: LD_INT 1
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 3
34025: NEG
34026: PUSH
34027: LD_INT 0
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 3
34036: NEG
34037: PUSH
34038: LD_INT 1
34040: NEG
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34064: LD_ADDR_VAR 0 13
34068: PUSH
34069: LD_INT 0
34071: PUSH
34072: LD_INT 0
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PUSH
34079: LD_INT 0
34081: PUSH
34082: LD_INT 1
34084: NEG
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 1
34092: PUSH
34093: LD_INT 0
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 1
34102: PUSH
34103: LD_INT 1
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 0
34112: PUSH
34113: LD_INT 1
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 1
34122: NEG
34123: PUSH
34124: LD_INT 0
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 1
34133: NEG
34134: PUSH
34135: LD_INT 1
34137: NEG
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 1
34145: NEG
34146: PUSH
34147: LD_INT 2
34149: NEG
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 2
34157: PUSH
34158: LD_INT 1
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 2
34167: PUSH
34168: LD_INT 2
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 1
34177: PUSH
34178: LD_INT 2
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PUSH
34185: LD_INT 2
34187: NEG
34188: PUSH
34189: LD_INT 1
34191: NEG
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 2
34199: NEG
34200: PUSH
34201: LD_INT 2
34203: NEG
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 2
34211: NEG
34212: PUSH
34213: LD_INT 3
34215: NEG
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 3
34223: NEG
34224: PUSH
34225: LD_INT 2
34227: NEG
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 3
34235: NEG
34236: PUSH
34237: LD_INT 3
34239: NEG
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34263: LD_ADDR_VAR 0 14
34267: PUSH
34268: LD_INT 0
34270: PUSH
34271: LD_INT 0
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 0
34280: PUSH
34281: LD_INT 1
34283: NEG
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 1
34291: PUSH
34292: LD_INT 0
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 1
34301: PUSH
34302: LD_INT 1
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 0
34311: PUSH
34312: LD_INT 1
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 1
34321: NEG
34322: PUSH
34323: LD_INT 0
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 1
34332: NEG
34333: PUSH
34334: LD_INT 1
34336: NEG
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 1
34344: NEG
34345: PUSH
34346: LD_INT 2
34348: NEG
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 0
34356: PUSH
34357: LD_INT 2
34359: NEG
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 1
34367: PUSH
34368: LD_INT 1
34370: NEG
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 1
34378: PUSH
34379: LD_INT 2
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 0
34388: PUSH
34389: LD_INT 2
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 1
34398: NEG
34399: PUSH
34400: LD_INT 1
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 1
34409: NEG
34410: PUSH
34411: LD_INT 3
34413: NEG
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 0
34421: PUSH
34422: LD_INT 3
34424: NEG
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 1
34432: PUSH
34433: LD_INT 2
34435: NEG
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34459: LD_ADDR_VAR 0 15
34463: PUSH
34464: LD_INT 0
34466: PUSH
34467: LD_INT 0
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 0
34476: PUSH
34477: LD_INT 1
34479: NEG
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 1
34487: PUSH
34488: LD_INT 0
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 1
34497: PUSH
34498: LD_INT 1
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 0
34507: PUSH
34508: LD_INT 1
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 1
34517: NEG
34518: PUSH
34519: LD_INT 0
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 1
34528: NEG
34529: PUSH
34530: LD_INT 1
34532: NEG
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 1
34540: PUSH
34541: LD_INT 1
34543: NEG
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 2
34551: PUSH
34552: LD_INT 0
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 2
34561: PUSH
34562: LD_INT 1
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 1
34571: NEG
34572: PUSH
34573: LD_INT 1
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 2
34582: NEG
34583: PUSH
34584: LD_INT 0
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 2
34593: NEG
34594: PUSH
34595: LD_INT 1
34597: NEG
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 2
34605: PUSH
34606: LD_INT 1
34608: NEG
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 3
34616: PUSH
34617: LD_INT 0
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 3
34626: PUSH
34627: LD_INT 1
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34652: LD_ADDR_VAR 0 16
34656: PUSH
34657: LD_INT 0
34659: PUSH
34660: LD_INT 0
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 0
34669: PUSH
34670: LD_INT 1
34672: NEG
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 1
34680: PUSH
34681: LD_INT 0
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PUSH
34688: LD_INT 1
34690: PUSH
34691: LD_INT 1
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 0
34700: PUSH
34701: LD_INT 1
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 1
34710: NEG
34711: PUSH
34712: LD_INT 0
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 1
34721: NEG
34722: PUSH
34723: LD_INT 1
34725: NEG
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 1
34733: NEG
34734: PUSH
34735: LD_INT 2
34737: NEG
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 2
34745: PUSH
34746: LD_INT 1
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 2
34755: PUSH
34756: LD_INT 2
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 1
34765: PUSH
34766: LD_INT 2
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 2
34775: NEG
34776: PUSH
34777: LD_INT 1
34779: NEG
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 2
34787: NEG
34788: PUSH
34789: LD_INT 2
34791: NEG
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 3
34799: PUSH
34800: LD_INT 2
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 3
34809: PUSH
34810: LD_INT 3
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 2
34819: PUSH
34820: LD_INT 3
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34845: LD_ADDR_VAR 0 17
34849: PUSH
34850: LD_INT 0
34852: PUSH
34853: LD_INT 0
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 0
34862: PUSH
34863: LD_INT 1
34865: NEG
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 1
34873: PUSH
34874: LD_INT 0
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 1
34883: PUSH
34884: LD_INT 1
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 0
34893: PUSH
34894: LD_INT 1
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 1
34903: NEG
34904: PUSH
34905: LD_INT 0
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 1
34914: NEG
34915: PUSH
34916: LD_INT 1
34918: NEG
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 1
34926: NEG
34927: PUSH
34928: LD_INT 2
34930: NEG
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 0
34938: PUSH
34939: LD_INT 2
34941: NEG
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 1
34949: PUSH
34950: LD_INT 1
34952: NEG
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 2
34960: PUSH
34961: LD_INT 0
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 2
34970: PUSH
34971: LD_INT 1
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 2
34980: PUSH
34981: LD_INT 2
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 1
34990: PUSH
34991: LD_INT 2
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: LD_INT 2
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 1
35010: NEG
35011: PUSH
35012: LD_INT 1
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 2
35021: NEG
35022: PUSH
35023: LD_INT 0
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 2
35032: NEG
35033: PUSH
35034: LD_INT 1
35036: NEG
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 2
35044: NEG
35045: PUSH
35046: LD_INT 2
35048: NEG
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35075: LD_ADDR_VAR 0 18
35079: PUSH
35080: LD_INT 0
35082: PUSH
35083: LD_INT 0
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 0
35092: PUSH
35093: LD_INT 1
35095: NEG
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 1
35103: PUSH
35104: LD_INT 0
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 1
35113: PUSH
35114: LD_INT 1
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 0
35123: PUSH
35124: LD_INT 1
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 1
35133: NEG
35134: PUSH
35135: LD_INT 0
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 1
35144: NEG
35145: PUSH
35146: LD_INT 1
35148: NEG
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 1
35156: NEG
35157: PUSH
35158: LD_INT 2
35160: NEG
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 0
35168: PUSH
35169: LD_INT 2
35171: NEG
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 1
35179: PUSH
35180: LD_INT 1
35182: NEG
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 2
35190: PUSH
35191: LD_INT 0
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 2
35200: PUSH
35201: LD_INT 1
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 2
35210: PUSH
35211: LD_INT 2
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 1
35220: PUSH
35221: LD_INT 2
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 0
35230: PUSH
35231: LD_INT 2
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 1
35240: NEG
35241: PUSH
35242: LD_INT 1
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 2
35251: NEG
35252: PUSH
35253: LD_INT 0
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 2
35262: NEG
35263: PUSH
35264: LD_INT 1
35266: NEG
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 2
35274: NEG
35275: PUSH
35276: LD_INT 2
35278: NEG
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35305: LD_ADDR_VAR 0 19
35309: PUSH
35310: LD_INT 0
35312: PUSH
35313: LD_INT 0
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 0
35322: PUSH
35323: LD_INT 1
35325: NEG
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 1
35333: PUSH
35334: LD_INT 0
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 1
35343: PUSH
35344: LD_INT 1
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 0
35353: PUSH
35354: LD_INT 1
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 1
35363: NEG
35364: PUSH
35365: LD_INT 0
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 1
35374: NEG
35375: PUSH
35376: LD_INT 1
35378: NEG
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 1
35386: NEG
35387: PUSH
35388: LD_INT 2
35390: NEG
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 0
35398: PUSH
35399: LD_INT 2
35401: NEG
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PUSH
35407: LD_INT 1
35409: PUSH
35410: LD_INT 1
35412: NEG
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: LD_INT 2
35420: PUSH
35421: LD_INT 0
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 2
35430: PUSH
35431: LD_INT 1
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 2
35440: PUSH
35441: LD_INT 2
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 1
35450: PUSH
35451: LD_INT 2
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 0
35460: PUSH
35461: LD_INT 2
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 1
35470: NEG
35471: PUSH
35472: LD_INT 1
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 2
35481: NEG
35482: PUSH
35483: LD_INT 0
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 2
35492: NEG
35493: PUSH
35494: LD_INT 1
35496: NEG
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 2
35504: NEG
35505: PUSH
35506: LD_INT 2
35508: NEG
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35535: LD_ADDR_VAR 0 20
35539: PUSH
35540: LD_INT 0
35542: PUSH
35543: LD_INT 0
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 0
35552: PUSH
35553: LD_INT 1
35555: NEG
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 1
35563: PUSH
35564: LD_INT 0
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 1
35573: PUSH
35574: LD_INT 1
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 0
35583: PUSH
35584: LD_INT 1
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 1
35593: NEG
35594: PUSH
35595: LD_INT 0
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: LD_INT 1
35604: NEG
35605: PUSH
35606: LD_INT 1
35608: NEG
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: LD_INT 1
35616: NEG
35617: PUSH
35618: LD_INT 2
35620: NEG
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 0
35628: PUSH
35629: LD_INT 2
35631: NEG
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 1
35639: PUSH
35640: LD_INT 1
35642: NEG
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 2
35650: PUSH
35651: LD_INT 0
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 2
35660: PUSH
35661: LD_INT 1
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 2
35670: PUSH
35671: LD_INT 2
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 1
35680: PUSH
35681: LD_INT 2
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 0
35690: PUSH
35691: LD_INT 2
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 1
35700: NEG
35701: PUSH
35702: LD_INT 1
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 2
35711: NEG
35712: PUSH
35713: LD_INT 0
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 2
35722: NEG
35723: PUSH
35724: LD_INT 1
35726: NEG
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 2
35734: NEG
35735: PUSH
35736: LD_INT 2
35738: NEG
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: LIST
35763: LIST
35764: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35765: LD_ADDR_VAR 0 21
35769: PUSH
35770: LD_INT 0
35772: PUSH
35773: LD_INT 0
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 0
35782: PUSH
35783: LD_INT 1
35785: NEG
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 1
35793: PUSH
35794: LD_INT 0
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 1
35803: PUSH
35804: LD_INT 1
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 0
35813: PUSH
35814: LD_INT 1
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 1
35823: NEG
35824: PUSH
35825: LD_INT 0
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 1
35834: NEG
35835: PUSH
35836: LD_INT 1
35838: NEG
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 1
35846: NEG
35847: PUSH
35848: LD_INT 2
35850: NEG
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 0
35858: PUSH
35859: LD_INT 2
35861: NEG
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 1
35869: PUSH
35870: LD_INT 1
35872: NEG
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 2
35880: PUSH
35881: LD_INT 0
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 2
35890: PUSH
35891: LD_INT 1
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 2
35900: PUSH
35901: LD_INT 2
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 1
35910: PUSH
35911: LD_INT 2
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 0
35920: PUSH
35921: LD_INT 2
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 1
35930: NEG
35931: PUSH
35932: LD_INT 1
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 2
35941: NEG
35942: PUSH
35943: LD_INT 0
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 2
35952: NEG
35953: PUSH
35954: LD_INT 1
35956: NEG
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: PUSH
35962: LD_INT 2
35964: NEG
35965: PUSH
35966: LD_INT 2
35968: NEG
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35995: LD_ADDR_VAR 0 22
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: LD_INT 0
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 0
36012: PUSH
36013: LD_INT 1
36015: NEG
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 1
36023: PUSH
36024: LD_INT 0
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 1
36033: PUSH
36034: LD_INT 1
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 0
36043: PUSH
36044: LD_INT 1
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 1
36053: NEG
36054: PUSH
36055: LD_INT 0
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 1
36064: NEG
36065: PUSH
36066: LD_INT 1
36068: NEG
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PUSH
36074: LD_INT 1
36076: NEG
36077: PUSH
36078: LD_INT 2
36080: NEG
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 0
36088: PUSH
36089: LD_INT 2
36091: NEG
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 1
36099: PUSH
36100: LD_INT 1
36102: NEG
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 2
36110: PUSH
36111: LD_INT 0
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 2
36120: PUSH
36121: LD_INT 1
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 2
36130: PUSH
36131: LD_INT 2
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 1
36140: PUSH
36141: LD_INT 2
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 0
36150: PUSH
36151: LD_INT 2
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 1
36160: NEG
36161: PUSH
36162: LD_INT 1
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 2
36171: NEG
36172: PUSH
36173: LD_INT 0
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 2
36182: NEG
36183: PUSH
36184: LD_INT 1
36186: NEG
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PUSH
36192: LD_INT 2
36194: NEG
36195: PUSH
36196: LD_INT 2
36198: NEG
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36225: LD_ADDR_VAR 0 23
36229: PUSH
36230: LD_INT 0
36232: PUSH
36233: LD_INT 0
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 0
36242: PUSH
36243: LD_INT 1
36245: NEG
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: LD_INT 1
36253: PUSH
36254: LD_INT 0
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 1
36263: PUSH
36264: LD_INT 1
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 0
36273: PUSH
36274: LD_INT 1
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 1
36283: NEG
36284: PUSH
36285: LD_INT 0
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 1
36294: NEG
36295: PUSH
36296: LD_INT 1
36298: NEG
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 1
36306: NEG
36307: PUSH
36308: LD_INT 2
36310: NEG
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 0
36318: PUSH
36319: LD_INT 2
36321: NEG
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 1
36329: PUSH
36330: LD_INT 1
36332: NEG
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 2
36340: PUSH
36341: LD_INT 0
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 2
36350: PUSH
36351: LD_INT 1
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 2
36360: PUSH
36361: LD_INT 2
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: LD_INT 2
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 0
36380: PUSH
36381: LD_INT 2
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 1
36390: NEG
36391: PUSH
36392: LD_INT 1
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 2
36401: NEG
36402: PUSH
36403: LD_INT 0
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 2
36412: NEG
36413: PUSH
36414: LD_INT 1
36416: NEG
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 2
36424: NEG
36425: PUSH
36426: LD_INT 2
36428: NEG
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 2
36436: NEG
36437: PUSH
36438: LD_INT 3
36440: NEG
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 1
36448: NEG
36449: PUSH
36450: LD_INT 3
36452: NEG
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 1
36460: PUSH
36461: LD_INT 2
36463: NEG
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 2
36471: PUSH
36472: LD_INT 1
36474: NEG
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
36505: LD_ADDR_VAR 0 24
36509: PUSH
36510: LD_INT 0
36512: PUSH
36513: LD_INT 0
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 0
36522: PUSH
36523: LD_INT 1
36525: NEG
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 1
36533: PUSH
36534: LD_INT 0
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 1
36543: PUSH
36544: LD_INT 1
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 0
36553: PUSH
36554: LD_INT 1
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 1
36563: NEG
36564: PUSH
36565: LD_INT 0
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 1
36574: NEG
36575: PUSH
36576: LD_INT 1
36578: NEG
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: LD_INT 1
36586: NEG
36587: PUSH
36588: LD_INT 2
36590: NEG
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 0
36598: PUSH
36599: LD_INT 2
36601: NEG
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 1
36609: PUSH
36610: LD_INT 1
36612: NEG
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 2
36620: PUSH
36621: LD_INT 0
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 2
36630: PUSH
36631: LD_INT 1
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 2
36640: PUSH
36641: LD_INT 2
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 1
36650: PUSH
36651: LD_INT 2
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 0
36660: PUSH
36661: LD_INT 2
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 1
36670: NEG
36671: PUSH
36672: LD_INT 1
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 2
36681: NEG
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 2
36692: NEG
36693: PUSH
36694: LD_INT 1
36696: NEG
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 2
36704: NEG
36705: PUSH
36706: LD_INT 2
36708: NEG
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 1
36716: PUSH
36717: LD_INT 2
36719: NEG
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 2
36727: PUSH
36728: LD_INT 1
36730: NEG
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 3
36738: PUSH
36739: LD_INT 1
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 3
36748: PUSH
36749: LD_INT 2
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
36781: LD_ADDR_VAR 0 25
36785: PUSH
36786: LD_INT 0
36788: PUSH
36789: LD_INT 0
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 0
36798: PUSH
36799: LD_INT 1
36801: NEG
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 1
36809: PUSH
36810: LD_INT 0
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 1
36819: PUSH
36820: LD_INT 1
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 0
36829: PUSH
36830: LD_INT 1
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 1
36839: NEG
36840: PUSH
36841: LD_INT 0
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 1
36850: NEG
36851: PUSH
36852: LD_INT 1
36854: NEG
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 1
36862: NEG
36863: PUSH
36864: LD_INT 2
36866: NEG
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 0
36874: PUSH
36875: LD_INT 2
36877: NEG
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 1
36885: PUSH
36886: LD_INT 1
36888: NEG
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 2
36896: PUSH
36897: LD_INT 0
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 2
36906: PUSH
36907: LD_INT 1
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 2
36916: PUSH
36917: LD_INT 2
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 1
36926: PUSH
36927: LD_INT 2
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 0
36936: PUSH
36937: LD_INT 2
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 1
36946: NEG
36947: PUSH
36948: LD_INT 1
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 2
36957: NEG
36958: PUSH
36959: LD_INT 0
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 2
36968: NEG
36969: PUSH
36970: LD_INT 1
36972: NEG
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 2
36980: NEG
36981: PUSH
36982: LD_INT 2
36984: NEG
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 3
36992: PUSH
36993: LD_INT 1
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 3
37002: PUSH
37003: LD_INT 2
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 2
37012: PUSH
37013: LD_INT 3
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 1
37022: PUSH
37023: LD_INT 3
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37055: LD_ADDR_VAR 0 26
37059: PUSH
37060: LD_INT 0
37062: PUSH
37063: LD_INT 0
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PUSH
37070: LD_INT 0
37072: PUSH
37073: LD_INT 1
37075: NEG
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 1
37083: PUSH
37084: LD_INT 0
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 1
37093: PUSH
37094: LD_INT 1
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 0
37103: PUSH
37104: LD_INT 1
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 1
37113: NEG
37114: PUSH
37115: LD_INT 0
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 1
37124: NEG
37125: PUSH
37126: LD_INT 1
37128: NEG
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 1
37136: NEG
37137: PUSH
37138: LD_INT 2
37140: NEG
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 0
37148: PUSH
37149: LD_INT 2
37151: NEG
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 1
37159: PUSH
37160: LD_INT 1
37162: NEG
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 2
37170: PUSH
37171: LD_INT 0
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 2
37180: PUSH
37181: LD_INT 1
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 2
37190: PUSH
37191: LD_INT 2
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 1
37200: PUSH
37201: LD_INT 2
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 0
37210: PUSH
37211: LD_INT 2
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 1
37220: NEG
37221: PUSH
37222: LD_INT 1
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 2
37231: NEG
37232: PUSH
37233: LD_INT 0
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 2
37242: NEG
37243: PUSH
37244: LD_INT 1
37246: NEG
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 2
37254: NEG
37255: PUSH
37256: LD_INT 2
37258: NEG
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 2
37266: PUSH
37267: LD_INT 3
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 1
37276: PUSH
37277: LD_INT 3
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 1
37286: NEG
37287: PUSH
37288: LD_INT 2
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 2
37297: NEG
37298: PUSH
37299: LD_INT 1
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37331: LD_ADDR_VAR 0 27
37335: PUSH
37336: LD_INT 0
37338: PUSH
37339: LD_INT 0
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 0
37348: PUSH
37349: LD_INT 1
37351: NEG
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 1
37359: PUSH
37360: LD_INT 0
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 1
37369: PUSH
37370: LD_INT 1
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 0
37379: PUSH
37380: LD_INT 1
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 1
37389: NEG
37390: PUSH
37391: LD_INT 0
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 1
37400: NEG
37401: PUSH
37402: LD_INT 1
37404: NEG
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 1
37412: NEG
37413: PUSH
37414: LD_INT 2
37416: NEG
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 0
37424: PUSH
37425: LD_INT 2
37427: NEG
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 1
37435: PUSH
37436: LD_INT 1
37438: NEG
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 2
37446: PUSH
37447: LD_INT 0
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 2
37456: PUSH
37457: LD_INT 1
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 2
37466: PUSH
37467: LD_INT 2
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 1
37476: PUSH
37477: LD_INT 2
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 0
37486: PUSH
37487: LD_INT 2
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 1
37496: NEG
37497: PUSH
37498: LD_INT 1
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 2
37507: NEG
37508: PUSH
37509: LD_INT 0
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 2
37518: NEG
37519: PUSH
37520: LD_INT 1
37522: NEG
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 2
37530: NEG
37531: PUSH
37532: LD_INT 2
37534: NEG
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 1
37542: NEG
37543: PUSH
37544: LD_INT 2
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 2
37553: NEG
37554: PUSH
37555: LD_INT 1
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: LD_INT 3
37564: NEG
37565: PUSH
37566: LD_INT 1
37568: NEG
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 3
37576: NEG
37577: PUSH
37578: LD_INT 2
37580: NEG
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37611: LD_ADDR_VAR 0 28
37615: PUSH
37616: LD_INT 0
37618: PUSH
37619: LD_INT 0
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 0
37628: PUSH
37629: LD_INT 1
37631: NEG
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 1
37639: PUSH
37640: LD_INT 0
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 1
37649: PUSH
37650: LD_INT 1
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 0
37659: PUSH
37660: LD_INT 1
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 1
37669: NEG
37670: PUSH
37671: LD_INT 0
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 1
37680: NEG
37681: PUSH
37682: LD_INT 1
37684: NEG
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 1
37692: NEG
37693: PUSH
37694: LD_INT 2
37696: NEG
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 0
37704: PUSH
37705: LD_INT 2
37707: NEG
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 1
37715: PUSH
37716: LD_INT 1
37718: NEG
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 2
37726: PUSH
37727: LD_INT 0
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 2
37736: PUSH
37737: LD_INT 1
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 2
37746: PUSH
37747: LD_INT 2
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 1
37756: PUSH
37757: LD_INT 2
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 0
37766: PUSH
37767: LD_INT 2
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 1
37776: NEG
37777: PUSH
37778: LD_INT 1
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 2
37787: NEG
37788: PUSH
37789: LD_INT 0
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 2
37798: NEG
37799: PUSH
37800: LD_INT 1
37802: NEG
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 2
37810: NEG
37811: PUSH
37812: LD_INT 2
37814: NEG
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 2
37822: NEG
37823: PUSH
37824: LD_INT 3
37826: NEG
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 1
37834: NEG
37835: PUSH
37836: LD_INT 3
37838: NEG
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 3
37846: NEG
37847: PUSH
37848: LD_INT 1
37850: NEG
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 3
37858: NEG
37859: PUSH
37860: LD_INT 2
37862: NEG
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37893: LD_ADDR_VAR 0 29
37897: PUSH
37898: LD_INT 0
37900: PUSH
37901: LD_INT 0
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 0
37910: PUSH
37911: LD_INT 1
37913: NEG
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 1
37921: PUSH
37922: LD_INT 0
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PUSH
37929: LD_INT 1
37931: PUSH
37932: LD_INT 1
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 0
37941: PUSH
37942: LD_INT 1
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 1
37951: NEG
37952: PUSH
37953: LD_INT 0
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 1
37962: NEG
37963: PUSH
37964: LD_INT 1
37966: NEG
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 1
37974: NEG
37975: PUSH
37976: LD_INT 2
37978: NEG
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 0
37986: PUSH
37987: LD_INT 2
37989: NEG
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 1
37997: PUSH
37998: LD_INT 1
38000: NEG
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 2
38008: PUSH
38009: LD_INT 0
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 2
38018: PUSH
38019: LD_INT 1
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 1
38028: PUSH
38029: LD_INT 2
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 0
38038: PUSH
38039: LD_INT 2
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PUSH
38046: LD_INT 1
38048: NEG
38049: PUSH
38050: LD_INT 1
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PUSH
38057: LD_INT 2
38059: NEG
38060: PUSH
38061: LD_INT 1
38063: NEG
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 2
38071: NEG
38072: PUSH
38073: LD_INT 2
38075: NEG
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 2
38083: NEG
38084: PUSH
38085: LD_INT 3
38087: NEG
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 2
38095: PUSH
38096: LD_INT 1
38098: NEG
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 3
38106: PUSH
38107: LD_INT 1
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 1
38116: PUSH
38117: LD_INT 3
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 1
38126: NEG
38127: PUSH
38128: LD_INT 2
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 3
38137: NEG
38138: PUSH
38139: LD_INT 2
38141: NEG
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38172: LD_ADDR_VAR 0 30
38176: PUSH
38177: LD_INT 0
38179: PUSH
38180: LD_INT 0
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 0
38189: PUSH
38190: LD_INT 1
38192: NEG
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 1
38200: PUSH
38201: LD_INT 0
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 1
38210: PUSH
38211: LD_INT 1
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 0
38220: PUSH
38221: LD_INT 1
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 1
38230: NEG
38231: PUSH
38232: LD_INT 0
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 1
38241: NEG
38242: PUSH
38243: LD_INT 1
38245: NEG
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 1
38253: NEG
38254: PUSH
38255: LD_INT 2
38257: NEG
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 0
38265: PUSH
38266: LD_INT 2
38268: NEG
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 1
38276: PUSH
38277: LD_INT 1
38279: NEG
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 2
38287: PUSH
38288: LD_INT 0
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 2
38297: PUSH
38298: LD_INT 1
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 2
38307: PUSH
38308: LD_INT 2
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 1
38317: PUSH
38318: LD_INT 2
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 1
38327: NEG
38328: PUSH
38329: LD_INT 1
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 2
38338: NEG
38339: PUSH
38340: LD_INT 0
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 2
38349: NEG
38350: PUSH
38351: LD_INT 1
38353: NEG
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 1
38361: NEG
38362: PUSH
38363: LD_INT 3
38365: NEG
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 1
38373: PUSH
38374: LD_INT 2
38376: NEG
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 3
38384: PUSH
38385: LD_INT 2
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 2
38394: PUSH
38395: LD_INT 3
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 2
38404: NEG
38405: PUSH
38406: LD_INT 1
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 3
38415: NEG
38416: PUSH
38417: LD_INT 1
38419: NEG
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38450: LD_ADDR_VAR 0 31
38454: PUSH
38455: LD_INT 0
38457: PUSH
38458: LD_INT 0
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 0
38467: PUSH
38468: LD_INT 1
38470: NEG
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: LD_INT 1
38478: PUSH
38479: LD_INT 0
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 1
38488: PUSH
38489: LD_INT 1
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 0
38498: PUSH
38499: LD_INT 1
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 1
38508: NEG
38509: PUSH
38510: LD_INT 0
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 1
38519: NEG
38520: PUSH
38521: LD_INT 1
38523: NEG
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 1
38531: NEG
38532: PUSH
38533: LD_INT 2
38535: NEG
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 1
38543: PUSH
38544: LD_INT 1
38546: NEG
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 2
38554: PUSH
38555: LD_INT 0
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 2
38564: PUSH
38565: LD_INT 1
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 2
38574: PUSH
38575: LD_INT 2
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 1
38584: PUSH
38585: LD_INT 2
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 0
38594: PUSH
38595: LD_INT 2
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 1
38604: NEG
38605: PUSH
38606: LD_INT 1
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 2
38615: NEG
38616: PUSH
38617: LD_INT 1
38619: NEG
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 2
38627: NEG
38628: PUSH
38629: LD_INT 2
38631: NEG
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 2
38639: NEG
38640: PUSH
38641: LD_INT 3
38643: NEG
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 2
38651: PUSH
38652: LD_INT 1
38654: NEG
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 3
38662: PUSH
38663: LD_INT 1
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 1
38672: PUSH
38673: LD_INT 3
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 1
38682: NEG
38683: PUSH
38684: LD_INT 2
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 3
38693: NEG
38694: PUSH
38695: LD_INT 2
38697: NEG
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38728: LD_ADDR_VAR 0 32
38732: PUSH
38733: LD_INT 0
38735: PUSH
38736: LD_INT 0
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 0
38745: PUSH
38746: LD_INT 1
38748: NEG
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 1
38756: PUSH
38757: LD_INT 0
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 1
38766: PUSH
38767: LD_INT 1
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 0
38776: PUSH
38777: LD_INT 1
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 1
38786: NEG
38787: PUSH
38788: LD_INT 0
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 1
38797: NEG
38798: PUSH
38799: LD_INT 1
38801: NEG
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 1
38809: NEG
38810: PUSH
38811: LD_INT 2
38813: NEG
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 0
38821: PUSH
38822: LD_INT 2
38824: NEG
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 1
38832: PUSH
38833: LD_INT 1
38835: NEG
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 2
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 2
38853: PUSH
38854: LD_INT 2
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 1
38863: PUSH
38864: LD_INT 2
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 0
38873: PUSH
38874: LD_INT 2
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 1
38883: NEG
38884: PUSH
38885: LD_INT 1
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 2
38894: NEG
38895: PUSH
38896: LD_INT 0
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 2
38905: NEG
38906: PUSH
38907: LD_INT 1
38909: NEG
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 1
38917: NEG
38918: PUSH
38919: LD_INT 3
38921: NEG
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 1
38929: PUSH
38930: LD_INT 2
38932: NEG
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 3
38940: PUSH
38941: LD_INT 2
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 2
38950: PUSH
38951: LD_INT 3
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 2
38960: NEG
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 3
38971: NEG
38972: PUSH
38973: LD_INT 1
38975: NEG
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39006: LD_ADDR_VAR 0 33
39010: PUSH
39011: LD_INT 0
39013: PUSH
39014: LD_INT 0
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 0
39023: PUSH
39024: LD_INT 1
39026: NEG
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 1
39034: PUSH
39035: LD_INT 0
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 1
39044: PUSH
39045: LD_INT 1
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 0
39054: PUSH
39055: LD_INT 1
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 1
39064: NEG
39065: PUSH
39066: LD_INT 0
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 1
39075: NEG
39076: PUSH
39077: LD_INT 1
39079: NEG
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_INT 1
39087: NEG
39088: PUSH
39089: LD_INT 2
39091: NEG
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 1
39099: PUSH
39100: LD_INT 1
39102: NEG
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 2
39110: PUSH
39111: LD_INT 0
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 2
39120: PUSH
39121: LD_INT 1
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 1
39130: PUSH
39131: LD_INT 2
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 0
39140: PUSH
39141: LD_INT 2
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 1
39150: NEG
39151: PUSH
39152: LD_INT 1
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 2
39161: NEG
39162: PUSH
39163: LD_INT 0
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 2
39172: NEG
39173: PUSH
39174: LD_INT 1
39176: NEG
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 2
39184: NEG
39185: PUSH
39186: LD_INT 2
39188: NEG
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 2
39196: NEG
39197: PUSH
39198: LD_INT 3
39200: NEG
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 2
39208: PUSH
39209: LD_INT 1
39211: NEG
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 3
39219: PUSH
39220: LD_INT 1
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 1
39229: PUSH
39230: LD_INT 3
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 1
39239: NEG
39240: PUSH
39241: LD_INT 2
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 3
39250: NEG
39251: PUSH
39252: LD_INT 2
39254: NEG
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39285: LD_ADDR_VAR 0 34
39289: PUSH
39290: LD_INT 0
39292: PUSH
39293: LD_INT 0
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 0
39302: PUSH
39303: LD_INT 1
39305: NEG
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 1
39313: PUSH
39314: LD_INT 0
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 1
39323: PUSH
39324: LD_INT 1
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 0
39333: PUSH
39334: LD_INT 1
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 1
39343: NEG
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 1
39354: NEG
39355: PUSH
39356: LD_INT 1
39358: NEG
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 1
39366: NEG
39367: PUSH
39368: LD_INT 2
39370: NEG
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 0
39378: PUSH
39379: LD_INT 2
39381: NEG
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 1
39389: PUSH
39390: LD_INT 1
39392: NEG
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 2
39400: PUSH
39401: LD_INT 1
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 2
39410: PUSH
39411: LD_INT 2
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 1
39420: PUSH
39421: LD_INT 2
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 1
39430: NEG
39431: PUSH
39432: LD_INT 1
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 2
39441: NEG
39442: PUSH
39443: LD_INT 0
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 2
39452: NEG
39453: PUSH
39454: LD_INT 1
39456: NEG
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 2
39464: NEG
39465: PUSH
39466: LD_INT 2
39468: NEG
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 1
39476: NEG
39477: PUSH
39478: LD_INT 3
39480: NEG
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 1
39488: PUSH
39489: LD_INT 2
39491: NEG
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 3
39499: PUSH
39500: LD_INT 2
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 2
39509: PUSH
39510: LD_INT 3
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 2
39519: NEG
39520: PUSH
39521: LD_INT 1
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 3
39530: NEG
39531: PUSH
39532: LD_INT 1
39534: NEG
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39565: LD_ADDR_VAR 0 35
39569: PUSH
39570: LD_INT 0
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 0
39582: PUSH
39583: LD_INT 1
39585: NEG
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 1
39593: PUSH
39594: LD_INT 0
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 1
39603: PUSH
39604: LD_INT 1
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 0
39613: PUSH
39614: LD_INT 1
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 1
39623: NEG
39624: PUSH
39625: LD_INT 0
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 1
39634: NEG
39635: PUSH
39636: LD_INT 1
39638: NEG
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 2
39646: PUSH
39647: LD_INT 1
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 2
39656: NEG
39657: PUSH
39658: LD_INT 1
39660: NEG
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39677: LD_ADDR_VAR 0 36
39681: PUSH
39682: LD_INT 0
39684: PUSH
39685: LD_INT 0
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 0
39694: PUSH
39695: LD_INT 1
39697: NEG
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 1
39705: PUSH
39706: LD_INT 0
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 1
39715: PUSH
39716: LD_INT 1
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 0
39725: PUSH
39726: LD_INT 1
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 1
39735: NEG
39736: PUSH
39737: LD_INT 0
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 1
39746: NEG
39747: PUSH
39748: LD_INT 1
39750: NEG
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 1
39758: NEG
39759: PUSH
39760: LD_INT 2
39762: NEG
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 1
39770: PUSH
39771: LD_INT 2
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39789: LD_ADDR_VAR 0 37
39793: PUSH
39794: LD_INT 0
39796: PUSH
39797: LD_INT 0
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 0
39806: PUSH
39807: LD_INT 1
39809: NEG
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 1
39817: PUSH
39818: LD_INT 0
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 1
39827: PUSH
39828: LD_INT 1
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 0
39837: PUSH
39838: LD_INT 1
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 1
39847: NEG
39848: PUSH
39849: LD_INT 0
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 1
39858: NEG
39859: PUSH
39860: LD_INT 1
39862: NEG
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 1
39870: PUSH
39871: LD_INT 1
39873: NEG
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 1
39881: NEG
39882: PUSH
39883: LD_INT 1
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39901: LD_ADDR_VAR 0 38
39905: PUSH
39906: LD_INT 0
39908: PUSH
39909: LD_INT 0
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 0
39918: PUSH
39919: LD_INT 1
39921: NEG
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 1
39929: PUSH
39930: LD_INT 0
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 1
39939: PUSH
39940: LD_INT 1
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: LD_INT 1
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 1
39959: NEG
39960: PUSH
39961: LD_INT 0
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 1
39970: NEG
39971: PUSH
39972: LD_INT 1
39974: NEG
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 2
39982: PUSH
39983: LD_INT 1
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 2
39992: NEG
39993: PUSH
39994: LD_INT 1
39996: NEG
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40013: LD_ADDR_VAR 0 39
40017: PUSH
40018: LD_INT 0
40020: PUSH
40021: LD_INT 0
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 0
40030: PUSH
40031: LD_INT 1
40033: NEG
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 1
40041: PUSH
40042: LD_INT 0
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 1
40051: PUSH
40052: LD_INT 1
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 0
40061: PUSH
40062: LD_INT 1
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 1
40071: NEG
40072: PUSH
40073: LD_INT 0
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 1
40082: NEG
40083: PUSH
40084: LD_INT 1
40086: NEG
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 1
40094: NEG
40095: PUSH
40096: LD_INT 2
40098: NEG
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 1
40106: PUSH
40107: LD_INT 2
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40125: LD_ADDR_VAR 0 40
40129: PUSH
40130: LD_INT 0
40132: PUSH
40133: LD_INT 0
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: LD_INT 1
40145: NEG
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 1
40153: PUSH
40154: LD_INT 0
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 1
40163: PUSH
40164: LD_INT 1
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 0
40173: PUSH
40174: LD_INT 1
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 1
40183: NEG
40184: PUSH
40185: LD_INT 0
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 1
40194: NEG
40195: PUSH
40196: LD_INT 1
40198: NEG
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 1
40206: PUSH
40207: LD_INT 1
40209: NEG
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 1
40217: NEG
40218: PUSH
40219: LD_INT 1
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40237: LD_ADDR_VAR 0 41
40241: PUSH
40242: LD_INT 0
40244: PUSH
40245: LD_INT 0
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 0
40254: PUSH
40255: LD_INT 1
40257: NEG
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 1
40265: PUSH
40266: LD_INT 0
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 1
40275: PUSH
40276: LD_INT 1
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 0
40285: PUSH
40286: LD_INT 1
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 1
40295: NEG
40296: PUSH
40297: LD_INT 0
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 1
40306: NEG
40307: PUSH
40308: LD_INT 1
40310: NEG
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 1
40318: NEG
40319: PUSH
40320: LD_INT 2
40322: NEG
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 1
40330: PUSH
40331: LD_INT 1
40333: NEG
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 2
40341: PUSH
40342: LD_INT 0
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 2
40351: PUSH
40352: LD_INT 1
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 2
40361: PUSH
40362: LD_INT 2
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 1
40371: PUSH
40372: LD_INT 2
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 1
40381: NEG
40382: PUSH
40383: LD_INT 1
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 2
40392: NEG
40393: PUSH
40394: LD_INT 0
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 2
40403: NEG
40404: PUSH
40405: LD_INT 1
40407: NEG
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 2
40415: NEG
40416: PUSH
40417: LD_INT 2
40419: NEG
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 2
40427: NEG
40428: PUSH
40429: LD_INT 3
40431: NEG
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 2
40439: PUSH
40440: LD_INT 1
40442: NEG
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 3
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 3
40460: PUSH
40461: LD_INT 1
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 3
40470: PUSH
40471: LD_INT 2
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 3
40480: PUSH
40481: LD_INT 3
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 2
40490: PUSH
40491: LD_INT 3
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 2
40500: NEG
40501: PUSH
40502: LD_INT 1
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 3
40511: NEG
40512: PUSH
40513: LD_INT 0
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 3
40522: NEG
40523: PUSH
40524: LD_INT 1
40526: NEG
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 3
40534: NEG
40535: PUSH
40536: LD_INT 2
40538: NEG
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 3
40546: NEG
40547: PUSH
40548: LD_INT 3
40550: NEG
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40587: LD_ADDR_VAR 0 42
40591: PUSH
40592: LD_INT 0
40594: PUSH
40595: LD_INT 0
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 0
40604: PUSH
40605: LD_INT 1
40607: NEG
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 1
40615: PUSH
40616: LD_INT 0
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 1
40625: PUSH
40626: LD_INT 1
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 0
40635: PUSH
40636: LD_INT 1
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 1
40645: NEG
40646: PUSH
40647: LD_INT 0
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 1
40656: NEG
40657: PUSH
40658: LD_INT 1
40660: NEG
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 1
40668: NEG
40669: PUSH
40670: LD_INT 2
40672: NEG
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 0
40680: PUSH
40681: LD_INT 2
40683: NEG
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 1
40691: PUSH
40692: LD_INT 1
40694: NEG
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 2
40702: PUSH
40703: LD_INT 1
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 2
40712: PUSH
40713: LD_INT 2
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 1
40722: PUSH
40723: LD_INT 2
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 0
40732: PUSH
40733: LD_INT 2
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 1
40742: NEG
40743: PUSH
40744: LD_INT 1
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 2
40753: NEG
40754: PUSH
40755: LD_INT 1
40757: NEG
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 2
40765: NEG
40766: PUSH
40767: LD_INT 2
40769: NEG
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 2
40777: NEG
40778: PUSH
40779: LD_INT 3
40781: NEG
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 1
40789: NEG
40790: PUSH
40791: LD_INT 3
40793: NEG
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 0
40801: PUSH
40802: LD_INT 3
40804: NEG
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 1
40812: PUSH
40813: LD_INT 2
40815: NEG
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 3
40823: PUSH
40824: LD_INT 2
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 3
40833: PUSH
40834: LD_INT 3
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 2
40843: PUSH
40844: LD_INT 3
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 1
40853: PUSH
40854: LD_INT 3
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: LD_INT 3
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 1
40873: NEG
40874: PUSH
40875: LD_INT 2
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 3
40884: NEG
40885: PUSH
40886: LD_INT 2
40888: NEG
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 3
40896: NEG
40897: PUSH
40898: LD_INT 3
40900: NEG
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40937: LD_ADDR_VAR 0 43
40941: PUSH
40942: LD_INT 0
40944: PUSH
40945: LD_INT 0
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 0
40954: PUSH
40955: LD_INT 1
40957: NEG
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 1
40965: PUSH
40966: LD_INT 0
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 1
40975: PUSH
40976: LD_INT 1
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 0
40985: PUSH
40986: LD_INT 1
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 1
40995: NEG
40996: PUSH
40997: LD_INT 0
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 1
41006: NEG
41007: PUSH
41008: LD_INT 1
41010: NEG
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 1
41018: NEG
41019: PUSH
41020: LD_INT 2
41022: NEG
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 0
41030: PUSH
41031: LD_INT 2
41033: NEG
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 1
41041: PUSH
41042: LD_INT 1
41044: NEG
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 2
41052: PUSH
41053: LD_INT 0
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 2
41062: PUSH
41063: LD_INT 1
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 1
41072: PUSH
41073: LD_INT 2
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 0
41082: PUSH
41083: LD_INT 2
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 1
41092: NEG
41093: PUSH
41094: LD_INT 1
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 2
41103: NEG
41104: PUSH
41105: LD_INT 0
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 2
41114: NEG
41115: PUSH
41116: LD_INT 1
41118: NEG
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 1
41126: NEG
41127: PUSH
41128: LD_INT 3
41130: NEG
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: LD_INT 3
41141: NEG
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 1
41149: PUSH
41150: LD_INT 2
41152: NEG
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 2
41160: PUSH
41161: LD_INT 1
41163: NEG
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 3
41171: PUSH
41172: LD_INT 0
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 3
41181: PUSH
41182: LD_INT 1
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 1
41191: PUSH
41192: LD_INT 3
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 0
41201: PUSH
41202: LD_INT 3
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 1
41211: NEG
41212: PUSH
41213: LD_INT 2
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 2
41222: NEG
41223: PUSH
41224: LD_INT 1
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 3
41233: NEG
41234: PUSH
41235: LD_INT 0
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 3
41244: NEG
41245: PUSH
41246: LD_INT 1
41248: NEG
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41285: LD_ADDR_VAR 0 44
41289: PUSH
41290: LD_INT 0
41292: PUSH
41293: LD_INT 0
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 0
41302: PUSH
41303: LD_INT 1
41305: NEG
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: LD_INT 0
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 1
41323: PUSH
41324: LD_INT 1
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 0
41333: PUSH
41334: LD_INT 1
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 1
41343: NEG
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 1
41354: NEG
41355: PUSH
41356: LD_INT 1
41358: NEG
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 1
41366: NEG
41367: PUSH
41368: LD_INT 2
41370: NEG
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 1
41378: PUSH
41379: LD_INT 1
41381: NEG
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 2
41389: PUSH
41390: LD_INT 0
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 2
41399: PUSH
41400: LD_INT 1
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 2
41409: PUSH
41410: LD_INT 2
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 1
41419: PUSH
41420: LD_INT 2
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 1
41429: NEG
41430: PUSH
41431: LD_INT 1
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 2
41440: NEG
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 2
41451: NEG
41452: PUSH
41453: LD_INT 1
41455: NEG
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 2
41463: NEG
41464: PUSH
41465: LD_INT 2
41467: NEG
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 2
41475: NEG
41476: PUSH
41477: LD_INT 3
41479: NEG
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 2
41487: PUSH
41488: LD_INT 1
41490: NEG
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 3
41498: PUSH
41499: LD_INT 0
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 3
41508: PUSH
41509: LD_INT 1
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 3
41518: PUSH
41519: LD_INT 2
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 3
41528: PUSH
41529: LD_INT 3
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 2
41538: PUSH
41539: LD_INT 3
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 2
41548: NEG
41549: PUSH
41550: LD_INT 1
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 3
41559: NEG
41560: PUSH
41561: LD_INT 0
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 3
41570: NEG
41571: PUSH
41572: LD_INT 1
41574: NEG
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 3
41582: NEG
41583: PUSH
41584: LD_INT 2
41586: NEG
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 3
41594: NEG
41595: PUSH
41596: LD_INT 3
41598: NEG
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41635: LD_ADDR_VAR 0 45
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: LD_INT 0
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 0
41652: PUSH
41653: LD_INT 1
41655: NEG
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 1
41663: PUSH
41664: LD_INT 0
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 1
41673: PUSH
41674: LD_INT 1
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 0
41683: PUSH
41684: LD_INT 1
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 1
41693: NEG
41694: PUSH
41695: LD_INT 0
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 1
41704: NEG
41705: PUSH
41706: LD_INT 1
41708: NEG
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: NEG
41717: PUSH
41718: LD_INT 2
41720: NEG
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 0
41728: PUSH
41729: LD_INT 2
41731: NEG
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 1
41739: PUSH
41740: LD_INT 1
41742: NEG
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 2
41750: PUSH
41751: LD_INT 1
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 2
41760: PUSH
41761: LD_INT 2
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 1
41770: PUSH
41771: LD_INT 2
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: LD_INT 2
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 1
41790: NEG
41791: PUSH
41792: LD_INT 1
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 2
41801: NEG
41802: PUSH
41803: LD_INT 1
41805: NEG
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 2
41813: NEG
41814: PUSH
41815: LD_INT 2
41817: NEG
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 2
41825: NEG
41826: PUSH
41827: LD_INT 3
41829: NEG
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 1
41837: NEG
41838: PUSH
41839: LD_INT 3
41841: NEG
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: LD_INT 3
41852: NEG
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 1
41860: PUSH
41861: LD_INT 2
41863: NEG
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 3
41871: PUSH
41872: LD_INT 2
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 3
41881: PUSH
41882: LD_INT 3
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 2
41891: PUSH
41892: LD_INT 3
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: LD_INT 3
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 0
41911: PUSH
41912: LD_INT 3
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 1
41921: NEG
41922: PUSH
41923: LD_INT 2
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 3
41932: NEG
41933: PUSH
41934: LD_INT 2
41936: NEG
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 3
41944: NEG
41945: PUSH
41946: LD_INT 3
41948: NEG
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41985: LD_ADDR_VAR 0 46
41989: PUSH
41990: LD_INT 0
41992: PUSH
41993: LD_INT 0
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 0
42002: PUSH
42003: LD_INT 1
42005: NEG
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 1
42013: PUSH
42014: LD_INT 0
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 1
42023: PUSH
42024: LD_INT 1
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: LD_INT 1
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 1
42043: NEG
42044: PUSH
42045: LD_INT 0
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 1
42054: NEG
42055: PUSH
42056: LD_INT 1
42058: NEG
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 1
42066: NEG
42067: PUSH
42068: LD_INT 2
42070: NEG
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 0
42078: PUSH
42079: LD_INT 2
42081: NEG
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 1
42089: PUSH
42090: LD_INT 1
42092: NEG
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 2
42100: PUSH
42101: LD_INT 0
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 2
42110: PUSH
42111: LD_INT 1
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: LD_INT 2
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 0
42130: PUSH
42131: LD_INT 2
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 1
42140: NEG
42141: PUSH
42142: LD_INT 1
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 2
42151: NEG
42152: PUSH
42153: LD_INT 0
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 2
42162: NEG
42163: PUSH
42164: LD_INT 1
42166: NEG
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 1
42174: NEG
42175: PUSH
42176: LD_INT 3
42178: NEG
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: LD_INT 3
42189: NEG
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 1
42197: PUSH
42198: LD_INT 2
42200: NEG
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 2
42208: PUSH
42209: LD_INT 1
42211: NEG
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 3
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 3
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 1
42239: PUSH
42240: LD_INT 3
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 0
42249: PUSH
42250: LD_INT 3
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 1
42259: NEG
42260: PUSH
42261: LD_INT 2
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 2
42270: NEG
42271: PUSH
42272: LD_INT 1
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 3
42281: NEG
42282: PUSH
42283: LD_INT 0
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 3
42292: NEG
42293: PUSH
42294: LD_INT 1
42296: NEG
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42333: LD_ADDR_VAR 0 47
42337: PUSH
42338: LD_INT 0
42340: PUSH
42341: LD_INT 0
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 0
42350: PUSH
42351: LD_INT 1
42353: NEG
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 1
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 1
42371: PUSH
42372: LD_INT 1
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 0
42381: PUSH
42382: LD_INT 1
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 1
42391: NEG
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 1
42402: NEG
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 1
42414: NEG
42415: PUSH
42416: LD_INT 2
42418: NEG
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 0
42426: PUSH
42427: LD_INT 2
42429: NEG
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 1
42437: PUSH
42438: LD_INT 1
42440: NEG
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 2
42448: NEG
42449: PUSH
42450: LD_INT 1
42452: NEG
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 2
42460: NEG
42461: PUSH
42462: LD_INT 2
42464: NEG
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42484: LD_ADDR_VAR 0 48
42488: PUSH
42489: LD_INT 0
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: LD_INT 1
42504: NEG
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 1
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 1
42522: PUSH
42523: LD_INT 1
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 0
42532: PUSH
42533: LD_INT 1
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 1
42542: NEG
42543: PUSH
42544: LD_INT 0
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 1
42553: NEG
42554: PUSH
42555: LD_INT 1
42557: NEG
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 1
42565: NEG
42566: PUSH
42567: LD_INT 2
42569: NEG
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: LD_INT 2
42580: NEG
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 1
42588: PUSH
42589: LD_INT 1
42591: NEG
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 2
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 2
42609: PUSH
42610: LD_INT 1
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42631: LD_ADDR_VAR 0 49
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: LD_INT 0
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 0
42648: PUSH
42649: LD_INT 1
42651: NEG
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: LD_INT 0
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 1
42669: PUSH
42670: LD_INT 1
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 0
42679: PUSH
42680: LD_INT 1
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 1
42689: NEG
42690: PUSH
42691: LD_INT 0
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 1
42700: NEG
42701: PUSH
42702: LD_INT 1
42704: NEG
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 1
42712: PUSH
42713: LD_INT 1
42715: NEG
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 2
42723: PUSH
42724: LD_INT 0
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 2
42733: PUSH
42734: LD_INT 1
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 2
42743: PUSH
42744: LD_INT 2
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 1
42753: PUSH
42754: LD_INT 2
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42775: LD_ADDR_VAR 0 50
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 0
42792: PUSH
42793: LD_INT 1
42795: NEG
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 1
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 1
42813: PUSH
42814: LD_INT 1
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: LD_INT 1
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 1
42833: NEG
42834: PUSH
42835: LD_INT 0
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 1
42844: NEG
42845: PUSH
42846: LD_INT 1
42848: NEG
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 2
42856: PUSH
42857: LD_INT 1
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 2
42866: PUSH
42867: LD_INT 2
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 1
42876: PUSH
42877: LD_INT 2
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 0
42886: PUSH
42887: LD_INT 2
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 1
42896: NEG
42897: PUSH
42898: LD_INT 1
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42919: LD_ADDR_VAR 0 51
42923: PUSH
42924: LD_INT 0
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: LD_INT 1
42939: NEG
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 1
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 1
42957: PUSH
42958: LD_INT 1
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: LD_INT 1
42992: NEG
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 1
43000: PUSH
43001: LD_INT 2
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: LD_INT 2
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 1
43020: NEG
43021: PUSH
43022: LD_INT 1
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 2
43031: NEG
43032: PUSH
43033: LD_INT 0
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 2
43042: NEG
43043: PUSH
43044: LD_INT 1
43046: NEG
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43066: LD_ADDR_VAR 0 52
43070: PUSH
43071: LD_INT 0
43073: PUSH
43074: LD_INT 0
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 0
43083: PUSH
43084: LD_INT 1
43086: NEG
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 1
43094: PUSH
43095: LD_INT 0
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 1
43104: PUSH
43105: LD_INT 1
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 0
43114: PUSH
43115: LD_INT 1
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 1
43124: NEG
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 1
43135: NEG
43136: PUSH
43137: LD_INT 1
43139: NEG
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: LD_INT 2
43151: NEG
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 1
43159: NEG
43160: PUSH
43161: LD_INT 1
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 2
43170: NEG
43171: PUSH
43172: LD_INT 0
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 2
43181: NEG
43182: PUSH
43183: LD_INT 1
43185: NEG
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 2
43193: NEG
43194: PUSH
43195: LD_INT 2
43197: NEG
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43217: LD_ADDR_VAR 0 53
43221: PUSH
43222: LD_INT 0
43224: PUSH
43225: LD_INT 0
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: LD_INT 1
43237: NEG
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 1
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: LD_INT 1
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 0
43265: PUSH
43266: LD_INT 1
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 1
43275: NEG
43276: PUSH
43277: LD_INT 0
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 1
43286: NEG
43287: PUSH
43288: LD_INT 1
43290: NEG
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 1
43298: NEG
43299: PUSH
43300: LD_INT 2
43302: NEG
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 0
43310: PUSH
43311: LD_INT 2
43313: NEG
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 1
43321: PUSH
43322: LD_INT 1
43324: NEG
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 2
43332: PUSH
43333: LD_INT 0
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 2
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 2
43352: PUSH
43353: LD_INT 2
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 1
43362: PUSH
43363: LD_INT 2
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 0
43372: PUSH
43373: LD_INT 2
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 1
43382: NEG
43383: PUSH
43384: LD_INT 1
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 2
43393: NEG
43394: PUSH
43395: LD_INT 0
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 2
43404: NEG
43405: PUSH
43406: LD_INT 1
43408: NEG
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 2
43416: NEG
43417: PUSH
43418: LD_INT 2
43420: NEG
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43447: LD_ADDR_VAR 0 54
43451: PUSH
43452: LD_INT 0
43454: PUSH
43455: LD_INT 0
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: LD_INT 1
43467: NEG
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 1
43475: PUSH
43476: LD_INT 0
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 1
43485: PUSH
43486: LD_INT 1
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: LD_INT 1
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 1
43505: NEG
43506: PUSH
43507: LD_INT 0
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 1
43516: NEG
43517: PUSH
43518: LD_INT 1
43520: NEG
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 1
43528: NEG
43529: PUSH
43530: LD_INT 2
43532: NEG
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 0
43540: PUSH
43541: LD_INT 2
43543: NEG
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 1
43551: PUSH
43552: LD_INT 1
43554: NEG
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 2
43562: PUSH
43563: LD_INT 0
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 2
43572: PUSH
43573: LD_INT 1
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 2
43582: PUSH
43583: LD_INT 2
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 1
43592: PUSH
43593: LD_INT 2
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 0
43602: PUSH
43603: LD_INT 2
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 1
43612: NEG
43613: PUSH
43614: LD_INT 1
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 2
43623: NEG
43624: PUSH
43625: LD_INT 0
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 2
43634: NEG
43635: PUSH
43636: LD_INT 1
43638: NEG
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 2
43646: NEG
43647: PUSH
43648: LD_INT 2
43650: NEG
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43677: LD_ADDR_VAR 0 55
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: LD_INT 0
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: LD_INT 1
43697: NEG
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 1
43715: PUSH
43716: LD_INT 1
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: LD_INT 1
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: LD_INT 0
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 1
43746: NEG
43747: PUSH
43748: LD_INT 1
43750: NEG
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: LD_INT 2
43762: NEG
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 0
43770: PUSH
43771: LD_INT 2
43773: NEG
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 1
43781: PUSH
43782: LD_INT 1
43784: NEG
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 2
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 2
43802: PUSH
43803: LD_INT 1
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 2
43812: PUSH
43813: LD_INT 2
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 1
43822: PUSH
43823: LD_INT 2
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 0
43832: PUSH
43833: LD_INT 2
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 1
43842: NEG
43843: PUSH
43844: LD_INT 1
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 2
43853: NEG
43854: PUSH
43855: LD_INT 0
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 2
43864: NEG
43865: PUSH
43866: LD_INT 1
43868: NEG
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 2
43876: NEG
43877: PUSH
43878: LD_INT 2
43880: NEG
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43907: LD_ADDR_VAR 0 56
43911: PUSH
43912: LD_INT 0
43914: PUSH
43915: LD_INT 0
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: LD_INT 1
43927: NEG
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 1
43935: PUSH
43936: LD_INT 0
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 1
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 0
43955: PUSH
43956: LD_INT 1
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 1
43965: NEG
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 1
43976: NEG
43977: PUSH
43978: LD_INT 1
43980: NEG
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 1
43988: NEG
43989: PUSH
43990: LD_INT 2
43992: NEG
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 0
44000: PUSH
44001: LD_INT 2
44003: NEG
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 1
44011: PUSH
44012: LD_INT 1
44014: NEG
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 2
44022: PUSH
44023: LD_INT 0
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 2
44032: PUSH
44033: LD_INT 1
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 2
44042: PUSH
44043: LD_INT 2
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 1
44052: PUSH
44053: LD_INT 2
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 0
44062: PUSH
44063: LD_INT 2
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 1
44072: NEG
44073: PUSH
44074: LD_INT 1
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 2
44083: NEG
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 2
44094: NEG
44095: PUSH
44096: LD_INT 1
44098: NEG
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 2
44106: NEG
44107: PUSH
44108: LD_INT 2
44110: NEG
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44137: LD_ADDR_VAR 0 57
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: LD_INT 0
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 0
44154: PUSH
44155: LD_INT 1
44157: NEG
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 1
44165: PUSH
44166: LD_INT 0
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 1
44175: PUSH
44176: LD_INT 1
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 0
44185: PUSH
44186: LD_INT 1
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 1
44195: NEG
44196: PUSH
44197: LD_INT 0
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 1
44206: NEG
44207: PUSH
44208: LD_INT 1
44210: NEG
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: LD_INT 2
44222: NEG
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 0
44230: PUSH
44231: LD_INT 2
44233: NEG
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 1
44241: PUSH
44242: LD_INT 1
44244: NEG
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 2
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 2
44262: PUSH
44263: LD_INT 1
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 2
44272: PUSH
44273: LD_INT 2
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: LD_INT 2
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: LD_INT 2
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 1
44302: NEG
44303: PUSH
44304: LD_INT 1
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 2
44313: NEG
44314: PUSH
44315: LD_INT 0
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 2
44324: NEG
44325: PUSH
44326: LD_INT 1
44328: NEG
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 2
44336: NEG
44337: PUSH
44338: LD_INT 2
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44367: LD_ADDR_VAR 0 58
44371: PUSH
44372: LD_INT 0
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 0
44384: PUSH
44385: LD_INT 1
44387: NEG
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 1
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 1
44405: PUSH
44406: LD_INT 1
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: LD_INT 1
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 1
44425: NEG
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 1
44436: NEG
44437: PUSH
44438: LD_INT 1
44440: NEG
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 1
44448: NEG
44449: PUSH
44450: LD_INT 2
44452: NEG
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 0
44460: PUSH
44461: LD_INT 2
44463: NEG
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 1
44471: PUSH
44472: LD_INT 1
44474: NEG
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 2
44482: PUSH
44483: LD_INT 0
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 2
44492: PUSH
44493: LD_INT 1
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 2
44502: PUSH
44503: LD_INT 2
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 1
44512: PUSH
44513: LD_INT 2
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 0
44522: PUSH
44523: LD_INT 2
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 1
44532: NEG
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 2
44543: NEG
44544: PUSH
44545: LD_INT 0
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 2
44554: NEG
44555: PUSH
44556: LD_INT 1
44558: NEG
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 2
44566: NEG
44567: PUSH
44568: LD_INT 2
44570: NEG
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44597: LD_ADDR_VAR 0 59
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 1
44635: PUSH
44636: LD_INT 1
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: LD_INT 1
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 1
44655: NEG
44656: PUSH
44657: LD_INT 0
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: LD_INT 1
44670: NEG
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44685: LD_ADDR_VAR 0 60
44689: PUSH
44690: LD_INT 0
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 0
44702: PUSH
44703: LD_INT 1
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 1
44713: PUSH
44714: LD_INT 0
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 1
44723: PUSH
44724: LD_INT 1
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 0
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 1
44743: NEG
44744: PUSH
44745: LD_INT 0
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: LD_INT 1
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44773: LD_ADDR_VAR 0 61
44777: PUSH
44778: LD_INT 0
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: LD_INT 1
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 0
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 1
44831: NEG
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 1
44842: NEG
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44861: LD_ADDR_VAR 0 62
44865: PUSH
44866: LD_INT 0
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 1
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 0
44909: PUSH
44910: LD_INT 1
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 1
44919: NEG
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 1
44930: NEG
44931: PUSH
44932: LD_INT 1
44934: NEG
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44949: LD_ADDR_VAR 0 63
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: LD_INT 1
44969: NEG
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 1
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 1
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: LD_INT 1
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 1
45007: NEG
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 1
45018: NEG
45019: PUSH
45020: LD_INT 1
45022: NEG
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45037: LD_ADDR_VAR 0 64
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: LD_INT 0
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 0
45054: PUSH
45055: LD_INT 1
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 1
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 0
45085: PUSH
45086: LD_INT 1
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 1
45106: NEG
45107: PUSH
45108: LD_INT 1
45110: NEG
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: ST_TO_ADDR
// end ; 1 :
45125: GO 51022
45127: LD_INT 1
45129: DOUBLE
45130: EQUAL
45131: IFTRUE 45135
45133: GO 47758
45135: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45136: LD_ADDR_VAR 0 11
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: LD_INT 3
45147: NEG
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 0
45155: PUSH
45156: LD_INT 3
45158: NEG
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 1
45166: PUSH
45167: LD_INT 2
45169: NEG
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: LIST
45179: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45180: LD_ADDR_VAR 0 12
45184: PUSH
45185: LD_INT 2
45187: PUSH
45188: LD_INT 1
45190: NEG
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 3
45198: PUSH
45199: LD_INT 0
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 3
45208: PUSH
45209: LD_INT 1
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: LIST
45220: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45221: LD_ADDR_VAR 0 13
45225: PUSH
45226: LD_INT 3
45228: PUSH
45229: LD_INT 2
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 3
45238: PUSH
45239: LD_INT 3
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 2
45248: PUSH
45249: LD_INT 3
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: LIST
45260: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45261: LD_ADDR_VAR 0 14
45265: PUSH
45266: LD_INT 1
45268: PUSH
45269: LD_INT 3
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 0
45278: PUSH
45279: LD_INT 3
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 1
45288: NEG
45289: PUSH
45290: LD_INT 2
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: LIST
45301: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45302: LD_ADDR_VAR 0 15
45306: PUSH
45307: LD_INT 2
45309: NEG
45310: PUSH
45311: LD_INT 1
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 3
45320: NEG
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 3
45331: NEG
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: LIST
45345: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45346: LD_ADDR_VAR 0 16
45350: PUSH
45351: LD_INT 2
45353: NEG
45354: PUSH
45355: LD_INT 3
45357: NEG
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 3
45365: NEG
45366: PUSH
45367: LD_INT 2
45369: NEG
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 3
45377: NEG
45378: PUSH
45379: LD_INT 3
45381: NEG
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: LIST
45391: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45392: LD_ADDR_VAR 0 17
45396: PUSH
45397: LD_INT 1
45399: NEG
45400: PUSH
45401: LD_INT 3
45403: NEG
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 0
45411: PUSH
45412: LD_INT 3
45414: NEG
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: PUSH
45423: LD_INT 2
45425: NEG
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: LIST
45435: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45436: LD_ADDR_VAR 0 18
45440: PUSH
45441: LD_INT 2
45443: PUSH
45444: LD_INT 1
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 3
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 3
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: LIST
45476: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45477: LD_ADDR_VAR 0 19
45481: PUSH
45482: LD_INT 3
45484: PUSH
45485: LD_INT 2
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 3
45494: PUSH
45495: LD_INT 3
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 2
45504: PUSH
45505: LD_INT 3
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: LIST
45516: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45517: LD_ADDR_VAR 0 20
45521: PUSH
45522: LD_INT 1
45524: PUSH
45525: LD_INT 3
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: LD_INT 3
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 1
45544: NEG
45545: PUSH
45546: LD_INT 2
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: LIST
45557: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45558: LD_ADDR_VAR 0 21
45562: PUSH
45563: LD_INT 2
45565: NEG
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 3
45576: NEG
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 3
45587: NEG
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: LIST
45601: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45602: LD_ADDR_VAR 0 22
45606: PUSH
45607: LD_INT 2
45609: NEG
45610: PUSH
45611: LD_INT 3
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 3
45621: NEG
45622: PUSH
45623: LD_INT 2
45625: NEG
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 3
45633: NEG
45634: PUSH
45635: LD_INT 3
45637: NEG
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: LIST
45647: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
45648: LD_ADDR_VAR 0 23
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: LD_INT 3
45658: NEG
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: LD_INT 4
45670: NEG
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 1
45678: PUSH
45679: LD_INT 3
45681: NEG
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: LIST
45691: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
45692: LD_ADDR_VAR 0 24
45696: PUSH
45697: LD_INT 3
45699: PUSH
45700: LD_INT 0
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 3
45709: PUSH
45710: LD_INT 1
45712: NEG
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 4
45720: PUSH
45721: LD_INT 1
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: LIST
45732: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
45733: LD_ADDR_VAR 0 25
45737: PUSH
45738: LD_INT 3
45740: PUSH
45741: LD_INT 3
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 4
45750: PUSH
45751: LD_INT 3
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 3
45760: PUSH
45761: LD_INT 4
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: LIST
45772: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
45773: LD_ADDR_VAR 0 26
45777: PUSH
45778: LD_INT 0
45780: PUSH
45781: LD_INT 3
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 1
45790: PUSH
45791: LD_INT 4
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: LD_INT 3
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: LIST
45813: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
45814: LD_ADDR_VAR 0 27
45818: PUSH
45819: LD_INT 3
45821: NEG
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 3
45832: NEG
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 4
45843: NEG
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: LIST
45857: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
45858: LD_ADDR_VAR 0 28
45862: PUSH
45863: LD_INT 3
45865: NEG
45866: PUSH
45867: LD_INT 3
45869: NEG
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 3
45877: NEG
45878: PUSH
45879: LD_INT 4
45881: NEG
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 4
45889: NEG
45890: PUSH
45891: LD_INT 3
45893: NEG
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: LIST
45903: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
45904: LD_ADDR_VAR 0 29
45908: PUSH
45909: LD_INT 1
45911: NEG
45912: PUSH
45913: LD_INT 3
45915: NEG
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: LD_INT 3
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 1
45934: PUSH
45935: LD_INT 2
45937: NEG
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 1
45945: NEG
45946: PUSH
45947: LD_INT 4
45949: NEG
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: LD_INT 4
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 1
45968: PUSH
45969: LD_INT 3
45971: NEG
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: LD_INT 5
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: LD_INT 5
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 1
46002: PUSH
46003: LD_INT 4
46005: NEG
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 1
46013: NEG
46014: PUSH
46015: LD_INT 6
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: LD_INT 6
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: LD_INT 5
46039: NEG
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46059: LD_ADDR_VAR 0 30
46063: PUSH
46064: LD_INT 2
46066: PUSH
46067: LD_INT 1
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 3
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 3
46087: PUSH
46088: LD_INT 1
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 3
46097: PUSH
46098: LD_INT 1
46100: NEG
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 4
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 4
46118: PUSH
46119: LD_INT 1
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 4
46128: PUSH
46129: LD_INT 1
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 5
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 5
46149: PUSH
46150: LD_INT 1
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 5
46159: PUSH
46160: LD_INT 1
46162: NEG
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 6
46170: PUSH
46171: LD_INT 0
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 6
46180: PUSH
46181: LD_INT 1
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46202: LD_ADDR_VAR 0 31
46206: PUSH
46207: LD_INT 3
46209: PUSH
46210: LD_INT 2
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 3
46219: PUSH
46220: LD_INT 3
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 2
46229: PUSH
46230: LD_INT 3
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 4
46239: PUSH
46240: LD_INT 3
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 4
46249: PUSH
46250: LD_INT 4
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 3
46259: PUSH
46260: LD_INT 4
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 5
46269: PUSH
46270: LD_INT 4
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 5
46279: PUSH
46280: LD_INT 5
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 4
46289: PUSH
46290: LD_INT 5
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 6
46299: PUSH
46300: LD_INT 5
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 6
46309: PUSH
46310: LD_INT 6
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 5
46319: PUSH
46320: LD_INT 6
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46341: LD_ADDR_VAR 0 32
46345: PUSH
46346: LD_INT 1
46348: PUSH
46349: LD_INT 3
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: LD_INT 3
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: LD_INT 2
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 1
46379: PUSH
46380: LD_INT 4
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 0
46389: PUSH
46390: LD_INT 4
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 1
46399: NEG
46400: PUSH
46401: LD_INT 3
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 1
46410: PUSH
46411: LD_INT 5
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 0
46420: PUSH
46421: LD_INT 5
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 1
46430: NEG
46431: PUSH
46432: LD_INT 4
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 1
46441: PUSH
46442: LD_INT 6
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: LD_INT 6
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 1
46461: NEG
46462: PUSH
46463: LD_INT 5
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
46484: LD_ADDR_VAR 0 33
46488: PUSH
46489: LD_INT 2
46491: NEG
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 3
46502: NEG
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 3
46513: NEG
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 3
46525: NEG
46526: PUSH
46527: LD_INT 1
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 4
46536: NEG
46537: PUSH
46538: LD_INT 0
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 4
46547: NEG
46548: PUSH
46549: LD_INT 1
46551: NEG
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 4
46559: NEG
46560: PUSH
46561: LD_INT 1
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 5
46570: NEG
46571: PUSH
46572: LD_INT 0
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 5
46581: NEG
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 5
46593: NEG
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 6
46604: NEG
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 6
46615: NEG
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
46639: LD_ADDR_VAR 0 34
46643: PUSH
46644: LD_INT 2
46646: NEG
46647: PUSH
46648: LD_INT 3
46650: NEG
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 3
46658: NEG
46659: PUSH
46660: LD_INT 2
46662: NEG
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 3
46670: NEG
46671: PUSH
46672: LD_INT 3
46674: NEG
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 3
46682: NEG
46683: PUSH
46684: LD_INT 4
46686: NEG
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 4
46694: NEG
46695: PUSH
46696: LD_INT 3
46698: NEG
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 4
46706: NEG
46707: PUSH
46708: LD_INT 4
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 4
46718: NEG
46719: PUSH
46720: LD_INT 5
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 5
46730: NEG
46731: PUSH
46732: LD_INT 4
46734: NEG
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 5
46742: NEG
46743: PUSH
46744: LD_INT 5
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 5
46754: NEG
46755: PUSH
46756: LD_INT 6
46758: NEG
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 6
46766: NEG
46767: PUSH
46768: LD_INT 5
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 6
46778: NEG
46779: PUSH
46780: LD_INT 6
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
46802: LD_ADDR_VAR 0 41
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: LD_INT 2
46812: NEG
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: LD_INT 3
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: LD_INT 2
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: LIST
46845: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
46846: LD_ADDR_VAR 0 42
46850: PUSH
46851: LD_INT 2
46853: PUSH
46854: LD_INT 0
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 2
46863: PUSH
46864: LD_INT 1
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 3
46874: PUSH
46875: LD_INT 1
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: LIST
46886: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
46887: LD_ADDR_VAR 0 43
46891: PUSH
46892: LD_INT 2
46894: PUSH
46895: LD_INT 2
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 3
46904: PUSH
46905: LD_INT 2
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 2
46914: PUSH
46915: LD_INT 3
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: LIST
46926: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
46927: LD_ADDR_VAR 0 44
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: LD_INT 2
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: LD_INT 3
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 1
46954: NEG
46955: PUSH
46956: LD_INT 2
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: LIST
46967: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46968: LD_ADDR_VAR 0 45
46972: PUSH
46973: LD_INT 2
46975: NEG
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 2
46986: NEG
46987: PUSH
46988: LD_INT 1
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 3
46997: NEG
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: LIST
47011: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47012: LD_ADDR_VAR 0 46
47016: PUSH
47017: LD_INT 2
47019: NEG
47020: PUSH
47021: LD_INT 2
47023: NEG
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 2
47031: NEG
47032: PUSH
47033: LD_INT 3
47035: NEG
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 3
47043: NEG
47044: PUSH
47045: LD_INT 2
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: LIST
47057: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47058: LD_ADDR_VAR 0 47
47062: PUSH
47063: LD_INT 2
47065: NEG
47066: PUSH
47067: LD_INT 3
47069: NEG
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 1
47077: NEG
47078: PUSH
47079: LD_INT 3
47081: NEG
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47091: LD_ADDR_VAR 0 48
47095: PUSH
47096: LD_INT 1
47098: PUSH
47099: LD_INT 2
47101: NEG
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 2
47109: PUSH
47110: LD_INT 1
47112: NEG
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47122: LD_ADDR_VAR 0 49
47126: PUSH
47127: LD_INT 3
47129: PUSH
47130: LD_INT 1
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 3
47139: PUSH
47140: LD_INT 2
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47151: LD_ADDR_VAR 0 50
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: LD_INT 3
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: LD_INT 3
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47180: LD_ADDR_VAR 0 51
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: LD_INT 2
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 2
47198: NEG
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47211: LD_ADDR_VAR 0 52
47215: PUSH
47216: LD_INT 3
47218: NEG
47219: PUSH
47220: LD_INT 1
47222: NEG
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 3
47230: NEG
47231: PUSH
47232: LD_INT 2
47234: NEG
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47244: LD_ADDR_VAR 0 53
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: LD_INT 3
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: LD_INT 3
47266: NEG
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 1
47274: PUSH
47275: LD_INT 2
47277: NEG
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: LIST
47287: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47288: LD_ADDR_VAR 0 54
47292: PUSH
47293: LD_INT 2
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 3
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 3
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: LIST
47328: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47329: LD_ADDR_VAR 0 55
47333: PUSH
47334: LD_INT 3
47336: PUSH
47337: LD_INT 2
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 3
47346: PUSH
47347: LD_INT 3
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 2
47356: PUSH
47357: LD_INT 3
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: LIST
47368: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47369: LD_ADDR_VAR 0 56
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: LD_INT 3
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 3
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: LD_INT 2
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: LIST
47409: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47410: LD_ADDR_VAR 0 57
47414: PUSH
47415: LD_INT 2
47417: NEG
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 3
47428: NEG
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 3
47439: NEG
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: LIST
47453: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47454: LD_ADDR_VAR 0 58
47458: PUSH
47459: LD_INT 2
47461: NEG
47462: PUSH
47463: LD_INT 3
47465: NEG
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 3
47473: NEG
47474: PUSH
47475: LD_INT 2
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 3
47485: NEG
47486: PUSH
47487: LD_INT 3
47489: NEG
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: LIST
47499: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
47500: LD_ADDR_VAR 0 59
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: LD_INT 2
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: LD_INT 2
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: LIST
47543: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47544: LD_ADDR_VAR 0 60
47548: PUSH
47549: LD_INT 1
47551: PUSH
47552: LD_INT 1
47554: NEG
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 2
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 2
47572: PUSH
47573: LD_INT 1
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: LIST
47584: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47585: LD_ADDR_VAR 0 61
47589: PUSH
47590: LD_INT 2
47592: PUSH
47593: LD_INT 1
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 2
47602: PUSH
47603: LD_INT 2
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: LD_INT 2
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: LIST
47624: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47625: LD_ADDR_VAR 0 62
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: LD_INT 2
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: LD_INT 2
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: LD_INT 1
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: LIST
47665: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47666: LD_ADDR_VAR 0 63
47670: PUSH
47671: LD_INT 1
47673: NEG
47674: PUSH
47675: LD_INT 1
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 2
47684: NEG
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 2
47695: NEG
47696: PUSH
47697: LD_INT 1
47699: NEG
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: LIST
47709: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47710: LD_ADDR_VAR 0 64
47714: PUSH
47715: LD_INT 1
47717: NEG
47718: PUSH
47719: LD_INT 2
47721: NEG
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 2
47729: NEG
47730: PUSH
47731: LD_INT 1
47733: NEG
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 2
47741: NEG
47742: PUSH
47743: LD_INT 2
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: LIST
47755: ST_TO_ADDR
// end ; 2 :
47756: GO 51022
47758: LD_INT 2
47760: DOUBLE
47761: EQUAL
47762: IFTRUE 47766
47764: GO 51021
47766: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
47767: LD_ADDR_VAR 0 29
47771: PUSH
47772: LD_INT 4
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 4
47784: PUSH
47785: LD_INT 1
47787: NEG
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 5
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 5
47805: PUSH
47806: LD_INT 1
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 4
47815: PUSH
47816: LD_INT 1
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 3
47825: PUSH
47826: LD_INT 0
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 3
47835: PUSH
47836: LD_INT 1
47838: NEG
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 3
47846: PUSH
47847: LD_INT 2
47849: NEG
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 5
47857: PUSH
47858: LD_INT 2
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 3
47867: PUSH
47868: LD_INT 3
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 3
47877: PUSH
47878: LD_INT 2
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 4
47887: PUSH
47888: LD_INT 3
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 4
47897: PUSH
47898: LD_INT 4
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 3
47907: PUSH
47908: LD_INT 4
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 2
47917: PUSH
47918: LD_INT 3
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 2
47927: PUSH
47928: LD_INT 2
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 4
47937: PUSH
47938: LD_INT 2
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 2
47947: PUSH
47948: LD_INT 4
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: LD_INT 4
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 0
47967: PUSH
47968: LD_INT 3
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: LD_INT 4
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: LD_INT 5
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 0
47997: PUSH
47998: LD_INT 5
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: LD_INT 4
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: LD_INT 3
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 2
48029: PUSH
48030: LD_INT 5
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 2
48039: NEG
48040: PUSH
48041: LD_INT 3
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 3
48050: NEG
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 3
48061: NEG
48062: PUSH
48063: LD_INT 1
48065: NEG
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 2
48073: NEG
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 2
48084: NEG
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 3
48095: NEG
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 4
48106: NEG
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 4
48117: NEG
48118: PUSH
48119: LD_INT 1
48121: NEG
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 4
48129: NEG
48130: PUSH
48131: LD_INT 2
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 2
48141: NEG
48142: PUSH
48143: LD_INT 2
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 4
48152: NEG
48153: PUSH
48154: LD_INT 4
48156: NEG
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 4
48164: NEG
48165: PUSH
48166: LD_INT 5
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 3
48176: NEG
48177: PUSH
48178: LD_INT 4
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 3
48188: NEG
48189: PUSH
48190: LD_INT 3
48192: NEG
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 4
48200: NEG
48201: PUSH
48202: LD_INT 3
48204: NEG
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 5
48212: NEG
48213: PUSH
48214: LD_INT 4
48216: NEG
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 5
48224: NEG
48225: PUSH
48226: LD_INT 5
48228: NEG
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 3
48236: NEG
48237: PUSH
48238: LD_INT 5
48240: NEG
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 5
48248: NEG
48249: PUSH
48250: LD_INT 3
48252: NEG
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48305: LD_ADDR_VAR 0 30
48309: PUSH
48310: LD_INT 4
48312: PUSH
48313: LD_INT 4
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 4
48322: PUSH
48323: LD_INT 3
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 5
48332: PUSH
48333: LD_INT 4
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 5
48342: PUSH
48343: LD_INT 5
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 4
48352: PUSH
48353: LD_INT 5
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 3
48362: PUSH
48363: LD_INT 4
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 3
48372: PUSH
48373: LD_INT 3
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 5
48382: PUSH
48383: LD_INT 3
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 3
48392: PUSH
48393: LD_INT 5
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: LD_INT 3
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: LD_INT 2
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: LD_INT 3
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: LD_INT 4
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 0
48442: PUSH
48443: LD_INT 4
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 1
48452: NEG
48453: PUSH
48454: LD_INT 3
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 1
48463: NEG
48464: PUSH
48465: LD_INT 2
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 2
48474: PUSH
48475: LD_INT 4
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 2
48484: NEG
48485: PUSH
48486: LD_INT 2
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 4
48495: NEG
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 4
48506: NEG
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 3
48518: NEG
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 3
48529: NEG
48530: PUSH
48531: LD_INT 1
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 4
48540: NEG
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 5
48551: NEG
48552: PUSH
48553: LD_INT 0
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 5
48562: NEG
48563: PUSH
48564: LD_INT 1
48566: NEG
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 5
48574: NEG
48575: PUSH
48576: LD_INT 2
48578: NEG
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 3
48586: NEG
48587: PUSH
48588: LD_INT 2
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 3
48597: NEG
48598: PUSH
48599: LD_INT 3
48601: NEG
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 3
48609: NEG
48610: PUSH
48611: LD_INT 4
48613: NEG
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 2
48621: NEG
48622: PUSH
48623: LD_INT 3
48625: NEG
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 2
48633: NEG
48634: PUSH
48635: LD_INT 2
48637: NEG
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 3
48645: NEG
48646: PUSH
48647: LD_INT 2
48649: NEG
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 4
48657: NEG
48658: PUSH
48659: LD_INT 3
48661: NEG
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 4
48669: NEG
48670: PUSH
48671: LD_INT 4
48673: NEG
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 2
48681: NEG
48682: PUSH
48683: LD_INT 4
48685: NEG
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 4
48693: NEG
48694: PUSH
48695: LD_INT 2
48697: NEG
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: LD_INT 4
48708: NEG
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: LD_INT 5
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 1
48727: PUSH
48728: LD_INT 4
48730: NEG
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 1
48738: PUSH
48739: LD_INT 3
48741: NEG
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: LD_INT 3
48752: NEG
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 1
48760: NEG
48761: PUSH
48762: LD_INT 4
48764: NEG
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 1
48772: NEG
48773: PUSH
48774: LD_INT 5
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 2
48784: PUSH
48785: LD_INT 3
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 2
48795: NEG
48796: PUSH
48797: LD_INT 5
48799: NEG
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
48852: LD_ADDR_VAR 0 31
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: LD_INT 4
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: LD_INT 3
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 1
48879: PUSH
48880: LD_INT 4
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 1
48889: PUSH
48890: LD_INT 5
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: LD_INT 5
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 1
48909: NEG
48910: PUSH
48911: LD_INT 4
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: LD_INT 3
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 2
48931: PUSH
48932: LD_INT 5
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 2
48941: NEG
48942: PUSH
48943: LD_INT 3
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 3
48952: NEG
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 3
48963: NEG
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 2
48975: NEG
48976: PUSH
48977: LD_INT 0
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 2
48986: NEG
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 3
48997: NEG
48998: PUSH
48999: LD_INT 1
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 4
49008: NEG
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 4
49019: NEG
49020: PUSH
49021: LD_INT 1
49023: NEG
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 4
49031: NEG
49032: PUSH
49033: LD_INT 2
49035: NEG
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 2
49043: NEG
49044: PUSH
49045: LD_INT 2
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 4
49054: NEG
49055: PUSH
49056: LD_INT 4
49058: NEG
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 4
49066: NEG
49067: PUSH
49068: LD_INT 5
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 3
49078: NEG
49079: PUSH
49080: LD_INT 4
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 3
49090: NEG
49091: PUSH
49092: LD_INT 3
49094: NEG
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 4
49102: NEG
49103: PUSH
49104: LD_INT 3
49106: NEG
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 5
49114: NEG
49115: PUSH
49116: LD_INT 4
49118: NEG
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 5
49126: NEG
49127: PUSH
49128: LD_INT 5
49130: NEG
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 3
49138: NEG
49139: PUSH
49140: LD_INT 5
49142: NEG
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 5
49150: NEG
49151: PUSH
49152: LD_INT 3
49154: NEG
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: LD_INT 3
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 0
49173: PUSH
49174: LD_INT 4
49176: NEG
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 1
49184: PUSH
49185: LD_INT 3
49187: NEG
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 1
49195: PUSH
49196: LD_INT 2
49198: NEG
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 0
49206: PUSH
49207: LD_INT 2
49209: NEG
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: LD_INT 3
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 1
49229: NEG
49230: PUSH
49231: LD_INT 4
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 2
49241: PUSH
49242: LD_INT 2
49244: NEG
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 2
49252: NEG
49253: PUSH
49254: LD_INT 4
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 4
49264: PUSH
49265: LD_INT 0
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 4
49274: PUSH
49275: LD_INT 1
49277: NEG
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 5
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 5
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 4
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 3
49315: PUSH
49316: LD_INT 0
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 3
49325: PUSH
49326: LD_INT 1
49328: NEG
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 3
49336: PUSH
49337: LD_INT 2
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 5
49347: PUSH
49348: LD_INT 2
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49402: LD_ADDR_VAR 0 32
49406: PUSH
49407: LD_INT 4
49409: NEG
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 4
49420: NEG
49421: PUSH
49422: LD_INT 1
49424: NEG
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 3
49432: NEG
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 3
49443: NEG
49444: PUSH
49445: LD_INT 1
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 4
49454: NEG
49455: PUSH
49456: LD_INT 1
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 5
49465: NEG
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 5
49476: NEG
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 5
49488: NEG
49489: PUSH
49490: LD_INT 2
49492: NEG
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 3
49500: NEG
49501: PUSH
49502: LD_INT 2
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 3
49511: NEG
49512: PUSH
49513: LD_INT 3
49515: NEG
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 3
49523: NEG
49524: PUSH
49525: LD_INT 4
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 2
49535: NEG
49536: PUSH
49537: LD_INT 3
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 2
49547: NEG
49548: PUSH
49549: LD_INT 2
49551: NEG
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 3
49559: NEG
49560: PUSH
49561: LD_INT 2
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 4
49571: NEG
49572: PUSH
49573: LD_INT 3
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 4
49583: NEG
49584: PUSH
49585: LD_INT 4
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 2
49595: NEG
49596: PUSH
49597: LD_INT 4
49599: NEG
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 4
49607: NEG
49608: PUSH
49609: LD_INT 2
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: LD_INT 4
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 0
49630: PUSH
49631: LD_INT 5
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: PUSH
49642: LD_INT 4
49644: NEG
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 1
49652: PUSH
49653: LD_INT 3
49655: NEG
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: LD_INT 3
49666: NEG
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: LD_INT 4
49678: NEG
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 1
49686: NEG
49687: PUSH
49688: LD_INT 5
49690: NEG
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 2
49698: PUSH
49699: LD_INT 3
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 2
49709: NEG
49710: PUSH
49711: LD_INT 5
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 3
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 3
49731: PUSH
49732: LD_INT 1
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 4
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 4
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 3
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 2
49772: PUSH
49773: LD_INT 0
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 2
49782: PUSH
49783: LD_INT 1
49785: NEG
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 2
49793: PUSH
49794: LD_INT 2
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 4
49804: PUSH
49805: LD_INT 2
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 4
49814: PUSH
49815: LD_INT 4
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 4
49824: PUSH
49825: LD_INT 3
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 5
49834: PUSH
49835: LD_INT 4
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 5
49844: PUSH
49845: LD_INT 5
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 4
49854: PUSH
49855: LD_INT 5
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 3
49864: PUSH
49865: LD_INT 4
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 3
49874: PUSH
49875: LD_INT 3
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 5
49884: PUSH
49885: LD_INT 3
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 3
49894: PUSH
49895: LD_INT 5
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
49949: LD_ADDR_VAR 0 33
49953: PUSH
49954: LD_INT 4
49956: NEG
49957: PUSH
49958: LD_INT 4
49960: NEG
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 4
49968: NEG
49969: PUSH
49970: LD_INT 5
49972: NEG
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 3
49980: NEG
49981: PUSH
49982: LD_INT 4
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 3
49992: NEG
49993: PUSH
49994: LD_INT 3
49996: NEG
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 4
50004: NEG
50005: PUSH
50006: LD_INT 3
50008: NEG
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 5
50016: NEG
50017: PUSH
50018: LD_INT 4
50020: NEG
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 5
50028: NEG
50029: PUSH
50030: LD_INT 5
50032: NEG
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 3
50040: NEG
50041: PUSH
50042: LD_INT 5
50044: NEG
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 5
50052: NEG
50053: PUSH
50054: LD_INT 3
50056: NEG
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: LD_INT 3
50067: NEG
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: LD_INT 4
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: LD_INT 3
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: LD_INT 2
50100: NEG
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 0
50108: PUSH
50109: LD_INT 2
50111: NEG
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: LD_INT 3
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: NEG
50132: PUSH
50133: LD_INT 4
50135: NEG
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 2
50143: PUSH
50144: LD_INT 2
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 2
50154: NEG
50155: PUSH
50156: LD_INT 4
50158: NEG
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 4
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 4
50176: PUSH
50177: LD_INT 1
50179: NEG
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 5
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 5
50197: PUSH
50198: LD_INT 1
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 4
50207: PUSH
50208: LD_INT 1
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 3
50217: PUSH
50218: LD_INT 0
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 3
50227: PUSH
50228: LD_INT 1
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 3
50238: PUSH
50239: LD_INT 2
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 5
50249: PUSH
50250: LD_INT 2
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 3
50259: PUSH
50260: LD_INT 3
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 3
50269: PUSH
50270: LD_INT 2
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 4
50279: PUSH
50280: LD_INT 3
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 4
50289: PUSH
50290: LD_INT 4
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 3
50299: PUSH
50300: LD_INT 4
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 2
50309: PUSH
50310: LD_INT 3
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 2
50319: PUSH
50320: LD_INT 2
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 4
50329: PUSH
50330: LD_INT 2
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 2
50339: PUSH
50340: LD_INT 4
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 0
50349: PUSH
50350: LD_INT 4
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 0
50359: PUSH
50360: LD_INT 3
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 1
50369: PUSH
50370: LD_INT 4
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 1
50379: PUSH
50380: LD_INT 5
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 0
50389: PUSH
50390: LD_INT 5
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 1
50399: NEG
50400: PUSH
50401: LD_INT 4
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: PUSH
50412: LD_INT 3
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 2
50421: PUSH
50422: LD_INT 5
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 2
50431: NEG
50432: PUSH
50433: LD_INT 3
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
50487: LD_ADDR_VAR 0 34
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: LD_INT 4
50497: NEG
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: LD_INT 5
50508: NEG
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 1
50516: PUSH
50517: LD_INT 4
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: LD_INT 3
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: LD_INT 3
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: NEG
50550: PUSH
50551: LD_INT 4
50553: NEG
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 1
50561: NEG
50562: PUSH
50563: LD_INT 5
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 2
50573: PUSH
50574: LD_INT 3
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 2
50584: NEG
50585: PUSH
50586: LD_INT 5
50588: NEG
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 3
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 3
50606: PUSH
50607: LD_INT 1
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 4
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 4
50627: PUSH
50628: LD_INT 1
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 3
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 2
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 2
50657: PUSH
50658: LD_INT 1
50660: NEG
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 2
50668: PUSH
50669: LD_INT 2
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 4
50679: PUSH
50680: LD_INT 2
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 4
50689: PUSH
50690: LD_INT 4
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 4
50699: PUSH
50700: LD_INT 3
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 5
50709: PUSH
50710: LD_INT 4
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 5
50719: PUSH
50720: LD_INT 5
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 4
50729: PUSH
50730: LD_INT 5
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 3
50739: PUSH
50740: LD_INT 4
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 3
50749: PUSH
50750: LD_INT 3
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 5
50759: PUSH
50760: LD_INT 3
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 3
50769: PUSH
50770: LD_INT 5
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: LD_INT 3
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 0
50789: PUSH
50790: LD_INT 2
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 1
50799: PUSH
50800: LD_INT 3
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 1
50809: PUSH
50810: LD_INT 4
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: LD_INT 4
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 1
50829: NEG
50830: PUSH
50831: LD_INT 3
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 1
50840: NEG
50841: PUSH
50842: LD_INT 2
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 2
50851: PUSH
50852: LD_INT 4
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 2
50861: NEG
50862: PUSH
50863: LD_INT 2
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 4
50872: NEG
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 4
50883: NEG
50884: PUSH
50885: LD_INT 1
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 3
50895: NEG
50896: PUSH
50897: LD_INT 0
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 3
50906: NEG
50907: PUSH
50908: LD_INT 1
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 4
50917: NEG
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 5
50928: NEG
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 5
50939: NEG
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 5
50951: NEG
50952: PUSH
50953: LD_INT 2
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 3
50963: NEG
50964: PUSH
50965: LD_INT 2
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: ST_TO_ADDR
// end ; end ;
51019: GO 51022
51021: POP
// case btype of b_depot , b_warehouse :
51022: LD_VAR 0 1
51026: PUSH
51027: LD_INT 0
51029: DOUBLE
51030: EQUAL
51031: IFTRUE 51041
51033: LD_INT 1
51035: DOUBLE
51036: EQUAL
51037: IFTRUE 51041
51039: GO 51242
51041: POP
// case nation of nation_american :
51042: LD_VAR 0 5
51046: PUSH
51047: LD_INT 1
51049: DOUBLE
51050: EQUAL
51051: IFTRUE 51055
51053: GO 51111
51055: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
51056: LD_ADDR_VAR 0 9
51060: PUSH
51061: LD_VAR 0 11
51065: PUSH
51066: LD_VAR 0 12
51070: PUSH
51071: LD_VAR 0 13
51075: PUSH
51076: LD_VAR 0 14
51080: PUSH
51081: LD_VAR 0 15
51085: PUSH
51086: LD_VAR 0 16
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: PUSH
51099: LD_VAR 0 4
51103: PUSH
51104: LD_INT 1
51106: PLUS
51107: ARRAY
51108: ST_TO_ADDR
51109: GO 51240
51111: LD_INT 2
51113: DOUBLE
51114: EQUAL
51115: IFTRUE 51119
51117: GO 51175
51119: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
51120: LD_ADDR_VAR 0 9
51124: PUSH
51125: LD_VAR 0 17
51129: PUSH
51130: LD_VAR 0 18
51134: PUSH
51135: LD_VAR 0 19
51139: PUSH
51140: LD_VAR 0 20
51144: PUSH
51145: LD_VAR 0 21
51149: PUSH
51150: LD_VAR 0 22
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: PUSH
51163: LD_VAR 0 4
51167: PUSH
51168: LD_INT 1
51170: PLUS
51171: ARRAY
51172: ST_TO_ADDR
51173: GO 51240
51175: LD_INT 3
51177: DOUBLE
51178: EQUAL
51179: IFTRUE 51183
51181: GO 51239
51183: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51184: LD_ADDR_VAR 0 9
51188: PUSH
51189: LD_VAR 0 23
51193: PUSH
51194: LD_VAR 0 24
51198: PUSH
51199: LD_VAR 0 25
51203: PUSH
51204: LD_VAR 0 26
51208: PUSH
51209: LD_VAR 0 27
51213: PUSH
51214: LD_VAR 0 28
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: PUSH
51227: LD_VAR 0 4
51231: PUSH
51232: LD_INT 1
51234: PLUS
51235: ARRAY
51236: ST_TO_ADDR
51237: GO 51240
51239: POP
51240: GO 51795
51242: LD_INT 2
51244: DOUBLE
51245: EQUAL
51246: IFTRUE 51256
51248: LD_INT 3
51250: DOUBLE
51251: EQUAL
51252: IFTRUE 51256
51254: GO 51312
51256: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51257: LD_ADDR_VAR 0 9
51261: PUSH
51262: LD_VAR 0 29
51266: PUSH
51267: LD_VAR 0 30
51271: PUSH
51272: LD_VAR 0 31
51276: PUSH
51277: LD_VAR 0 32
51281: PUSH
51282: LD_VAR 0 33
51286: PUSH
51287: LD_VAR 0 34
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: PUSH
51300: LD_VAR 0 4
51304: PUSH
51305: LD_INT 1
51307: PLUS
51308: ARRAY
51309: ST_TO_ADDR
51310: GO 51795
51312: LD_INT 16
51314: DOUBLE
51315: EQUAL
51316: IFTRUE 51374
51318: LD_INT 17
51320: DOUBLE
51321: EQUAL
51322: IFTRUE 51374
51324: LD_INT 18
51326: DOUBLE
51327: EQUAL
51328: IFTRUE 51374
51330: LD_INT 19
51332: DOUBLE
51333: EQUAL
51334: IFTRUE 51374
51336: LD_INT 22
51338: DOUBLE
51339: EQUAL
51340: IFTRUE 51374
51342: LD_INT 20
51344: DOUBLE
51345: EQUAL
51346: IFTRUE 51374
51348: LD_INT 21
51350: DOUBLE
51351: EQUAL
51352: IFTRUE 51374
51354: LD_INT 23
51356: DOUBLE
51357: EQUAL
51358: IFTRUE 51374
51360: LD_INT 24
51362: DOUBLE
51363: EQUAL
51364: IFTRUE 51374
51366: LD_INT 25
51368: DOUBLE
51369: EQUAL
51370: IFTRUE 51374
51372: GO 51430
51374: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51375: LD_ADDR_VAR 0 9
51379: PUSH
51380: LD_VAR 0 35
51384: PUSH
51385: LD_VAR 0 36
51389: PUSH
51390: LD_VAR 0 37
51394: PUSH
51395: LD_VAR 0 38
51399: PUSH
51400: LD_VAR 0 39
51404: PUSH
51405: LD_VAR 0 40
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: PUSH
51418: LD_VAR 0 4
51422: PUSH
51423: LD_INT 1
51425: PLUS
51426: ARRAY
51427: ST_TO_ADDR
51428: GO 51795
51430: LD_INT 6
51432: DOUBLE
51433: EQUAL
51434: IFTRUE 51486
51436: LD_INT 7
51438: DOUBLE
51439: EQUAL
51440: IFTRUE 51486
51442: LD_INT 8
51444: DOUBLE
51445: EQUAL
51446: IFTRUE 51486
51448: LD_INT 13
51450: DOUBLE
51451: EQUAL
51452: IFTRUE 51486
51454: LD_INT 12
51456: DOUBLE
51457: EQUAL
51458: IFTRUE 51486
51460: LD_INT 15
51462: DOUBLE
51463: EQUAL
51464: IFTRUE 51486
51466: LD_INT 11
51468: DOUBLE
51469: EQUAL
51470: IFTRUE 51486
51472: LD_INT 14
51474: DOUBLE
51475: EQUAL
51476: IFTRUE 51486
51478: LD_INT 10
51480: DOUBLE
51481: EQUAL
51482: IFTRUE 51486
51484: GO 51542
51486: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
51487: LD_ADDR_VAR 0 9
51491: PUSH
51492: LD_VAR 0 41
51496: PUSH
51497: LD_VAR 0 42
51501: PUSH
51502: LD_VAR 0 43
51506: PUSH
51507: LD_VAR 0 44
51511: PUSH
51512: LD_VAR 0 45
51516: PUSH
51517: LD_VAR 0 46
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: PUSH
51530: LD_VAR 0 4
51534: PUSH
51535: LD_INT 1
51537: PLUS
51538: ARRAY
51539: ST_TO_ADDR
51540: GO 51795
51542: LD_INT 36
51544: DOUBLE
51545: EQUAL
51546: IFTRUE 51550
51548: GO 51606
51550: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
51551: LD_ADDR_VAR 0 9
51555: PUSH
51556: LD_VAR 0 47
51560: PUSH
51561: LD_VAR 0 48
51565: PUSH
51566: LD_VAR 0 49
51570: PUSH
51571: LD_VAR 0 50
51575: PUSH
51576: LD_VAR 0 51
51580: PUSH
51581: LD_VAR 0 52
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: PUSH
51594: LD_VAR 0 4
51598: PUSH
51599: LD_INT 1
51601: PLUS
51602: ARRAY
51603: ST_TO_ADDR
51604: GO 51795
51606: LD_INT 4
51608: DOUBLE
51609: EQUAL
51610: IFTRUE 51632
51612: LD_INT 5
51614: DOUBLE
51615: EQUAL
51616: IFTRUE 51632
51618: LD_INT 34
51620: DOUBLE
51621: EQUAL
51622: IFTRUE 51632
51624: LD_INT 37
51626: DOUBLE
51627: EQUAL
51628: IFTRUE 51632
51630: GO 51688
51632: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
51633: LD_ADDR_VAR 0 9
51637: PUSH
51638: LD_VAR 0 53
51642: PUSH
51643: LD_VAR 0 54
51647: PUSH
51648: LD_VAR 0 55
51652: PUSH
51653: LD_VAR 0 56
51657: PUSH
51658: LD_VAR 0 57
51662: PUSH
51663: LD_VAR 0 58
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: PUSH
51676: LD_VAR 0 4
51680: PUSH
51681: LD_INT 1
51683: PLUS
51684: ARRAY
51685: ST_TO_ADDR
51686: GO 51795
51688: LD_INT 31
51690: DOUBLE
51691: EQUAL
51692: IFTRUE 51738
51694: LD_INT 32
51696: DOUBLE
51697: EQUAL
51698: IFTRUE 51738
51700: LD_INT 33
51702: DOUBLE
51703: EQUAL
51704: IFTRUE 51738
51706: LD_INT 27
51708: DOUBLE
51709: EQUAL
51710: IFTRUE 51738
51712: LD_INT 26
51714: DOUBLE
51715: EQUAL
51716: IFTRUE 51738
51718: LD_INT 28
51720: DOUBLE
51721: EQUAL
51722: IFTRUE 51738
51724: LD_INT 29
51726: DOUBLE
51727: EQUAL
51728: IFTRUE 51738
51730: LD_INT 30
51732: DOUBLE
51733: EQUAL
51734: IFTRUE 51738
51736: GO 51794
51738: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
51739: LD_ADDR_VAR 0 9
51743: PUSH
51744: LD_VAR 0 59
51748: PUSH
51749: LD_VAR 0 60
51753: PUSH
51754: LD_VAR 0 61
51758: PUSH
51759: LD_VAR 0 62
51763: PUSH
51764: LD_VAR 0 63
51768: PUSH
51769: LD_VAR 0 64
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: PUSH
51782: LD_VAR 0 4
51786: PUSH
51787: LD_INT 1
51789: PLUS
51790: ARRAY
51791: ST_TO_ADDR
51792: GO 51795
51794: POP
// temp_list2 = [ ] ;
51795: LD_ADDR_VAR 0 10
51799: PUSH
51800: EMPTY
51801: ST_TO_ADDR
// for i in temp_list do
51802: LD_ADDR_VAR 0 8
51806: PUSH
51807: LD_VAR 0 9
51811: PUSH
51812: FOR_IN
51813: IFFALSE 51865
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
51815: LD_ADDR_VAR 0 10
51819: PUSH
51820: LD_VAR 0 10
51824: PUSH
51825: LD_VAR 0 8
51829: PUSH
51830: LD_INT 1
51832: ARRAY
51833: PUSH
51834: LD_VAR 0 2
51838: PLUS
51839: PUSH
51840: LD_VAR 0 8
51844: PUSH
51845: LD_INT 2
51847: ARRAY
51848: PUSH
51849: LD_VAR 0 3
51853: PLUS
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: EMPTY
51860: LIST
51861: ADD
51862: ST_TO_ADDR
51863: GO 51812
51865: POP
51866: POP
// result = temp_list2 ;
51867: LD_ADDR_VAR 0 7
51871: PUSH
51872: LD_VAR 0 10
51876: ST_TO_ADDR
// end ;
51877: LD_VAR 0 7
51881: RET
// export function EnemyInRange ( unit , dist ) ; begin
51882: LD_INT 0
51884: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
51885: LD_ADDR_VAR 0 3
51889: PUSH
51890: LD_VAR 0 1
51894: PPUSH
51895: CALL_OW 255
51899: PPUSH
51900: LD_VAR 0 1
51904: PPUSH
51905: CALL_OW 250
51909: PPUSH
51910: LD_VAR 0 1
51914: PPUSH
51915: CALL_OW 251
51919: PPUSH
51920: LD_VAR 0 2
51924: PPUSH
51925: CALL 25278 0 4
51929: PUSH
51930: LD_INT 4
51932: ARRAY
51933: ST_TO_ADDR
// end ;
51934: LD_VAR 0 3
51938: RET
// export function PlayerSeeMe ( unit ) ; begin
51939: LD_INT 0
51941: PPUSH
// result := See ( your_side , unit ) ;
51942: LD_ADDR_VAR 0 2
51946: PUSH
51947: LD_OWVAR 2
51951: PPUSH
51952: LD_VAR 0 1
51956: PPUSH
51957: CALL_OW 292
51961: ST_TO_ADDR
// end ;
51962: LD_VAR 0 2
51966: RET
// export function ReverseDir ( unit ) ; begin
51967: LD_INT 0
51969: PPUSH
// if not unit then
51970: LD_VAR 0 1
51974: NOT
51975: IFFALSE 51979
// exit ;
51977: GO 52002
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
51979: LD_ADDR_VAR 0 2
51983: PUSH
51984: LD_VAR 0 1
51988: PPUSH
51989: CALL_OW 254
51993: PUSH
51994: LD_INT 3
51996: PLUS
51997: PUSH
51998: LD_INT 6
52000: MOD
52001: ST_TO_ADDR
// end ;
52002: LD_VAR 0 2
52006: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52007: LD_INT 0
52009: PPUSH
52010: PPUSH
52011: PPUSH
52012: PPUSH
52013: PPUSH
// if not hexes then
52014: LD_VAR 0 2
52018: NOT
52019: IFFALSE 52023
// exit ;
52021: GO 52171
// dist := 9999 ;
52023: LD_ADDR_VAR 0 5
52027: PUSH
52028: LD_INT 9999
52030: ST_TO_ADDR
// for i = 1 to hexes do
52031: LD_ADDR_VAR 0 4
52035: PUSH
52036: DOUBLE
52037: LD_INT 1
52039: DEC
52040: ST_TO_ADDR
52041: LD_VAR 0 2
52045: PUSH
52046: FOR_TO
52047: IFFALSE 52159
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52049: LD_VAR 0 1
52053: PPUSH
52054: LD_VAR 0 2
52058: PUSH
52059: LD_VAR 0 4
52063: ARRAY
52064: PUSH
52065: LD_INT 1
52067: ARRAY
52068: PPUSH
52069: LD_VAR 0 2
52073: PUSH
52074: LD_VAR 0 4
52078: ARRAY
52079: PUSH
52080: LD_INT 2
52082: ARRAY
52083: PPUSH
52084: CALL_OW 297
52088: PUSH
52089: LD_VAR 0 5
52093: LESS
52094: IFFALSE 52157
// begin hex := hexes [ i ] ;
52096: LD_ADDR_VAR 0 7
52100: PUSH
52101: LD_VAR 0 2
52105: PUSH
52106: LD_VAR 0 4
52110: ARRAY
52111: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52112: LD_ADDR_VAR 0 5
52116: PUSH
52117: LD_VAR 0 1
52121: PPUSH
52122: LD_VAR 0 2
52126: PUSH
52127: LD_VAR 0 4
52131: ARRAY
52132: PUSH
52133: LD_INT 1
52135: ARRAY
52136: PPUSH
52137: LD_VAR 0 2
52141: PUSH
52142: LD_VAR 0 4
52146: ARRAY
52147: PUSH
52148: LD_INT 2
52150: ARRAY
52151: PPUSH
52152: CALL_OW 297
52156: ST_TO_ADDR
// end ; end ;
52157: GO 52046
52159: POP
52160: POP
// result := hex ;
52161: LD_ADDR_VAR 0 3
52165: PUSH
52166: LD_VAR 0 7
52170: ST_TO_ADDR
// end ;
52171: LD_VAR 0 3
52175: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52176: LD_INT 0
52178: PPUSH
52179: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52180: LD_VAR 0 1
52184: NOT
52185: PUSH
52186: LD_VAR 0 1
52190: PUSH
52191: LD_INT 21
52193: PUSH
52194: LD_INT 2
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 23
52203: PUSH
52204: LD_INT 2
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PPUSH
52215: CALL_OW 69
52219: IN
52220: NOT
52221: OR
52222: IFFALSE 52226
// exit ;
52224: GO 52273
// for i = 1 to 3 do
52226: LD_ADDR_VAR 0 3
52230: PUSH
52231: DOUBLE
52232: LD_INT 1
52234: DEC
52235: ST_TO_ADDR
52236: LD_INT 3
52238: PUSH
52239: FOR_TO
52240: IFFALSE 52271
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52242: LD_VAR 0 1
52246: PPUSH
52247: CALL_OW 250
52251: PPUSH
52252: LD_VAR 0 1
52256: PPUSH
52257: CALL_OW 251
52261: PPUSH
52262: LD_INT 1
52264: PPUSH
52265: CALL_OW 453
52269: GO 52239
52271: POP
52272: POP
// end ;
52273: LD_VAR 0 2
52277: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52278: LD_INT 0
52280: PPUSH
52281: PPUSH
52282: PPUSH
52283: PPUSH
52284: PPUSH
52285: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52286: LD_VAR 0 1
52290: NOT
52291: PUSH
52292: LD_VAR 0 2
52296: NOT
52297: OR
52298: PUSH
52299: LD_VAR 0 1
52303: PPUSH
52304: CALL_OW 314
52308: OR
52309: IFFALSE 52313
// exit ;
52311: GO 52754
// x := GetX ( enemy_unit ) ;
52313: LD_ADDR_VAR 0 7
52317: PUSH
52318: LD_VAR 0 2
52322: PPUSH
52323: CALL_OW 250
52327: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52328: LD_ADDR_VAR 0 8
52332: PUSH
52333: LD_VAR 0 2
52337: PPUSH
52338: CALL_OW 251
52342: ST_TO_ADDR
// if not x or not y then
52343: LD_VAR 0 7
52347: NOT
52348: PUSH
52349: LD_VAR 0 8
52353: NOT
52354: OR
52355: IFFALSE 52359
// exit ;
52357: GO 52754
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52359: LD_ADDR_VAR 0 6
52363: PUSH
52364: LD_VAR 0 7
52368: PPUSH
52369: LD_INT 0
52371: PPUSH
52372: LD_INT 4
52374: PPUSH
52375: CALL_OW 272
52379: PUSH
52380: LD_VAR 0 8
52384: PPUSH
52385: LD_INT 0
52387: PPUSH
52388: LD_INT 4
52390: PPUSH
52391: CALL_OW 273
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_VAR 0 7
52404: PPUSH
52405: LD_INT 1
52407: PPUSH
52408: LD_INT 4
52410: PPUSH
52411: CALL_OW 272
52415: PUSH
52416: LD_VAR 0 8
52420: PPUSH
52421: LD_INT 1
52423: PPUSH
52424: LD_INT 4
52426: PPUSH
52427: CALL_OW 273
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_VAR 0 7
52440: PPUSH
52441: LD_INT 2
52443: PPUSH
52444: LD_INT 4
52446: PPUSH
52447: CALL_OW 272
52451: PUSH
52452: LD_VAR 0 8
52456: PPUSH
52457: LD_INT 2
52459: PPUSH
52460: LD_INT 4
52462: PPUSH
52463: CALL_OW 273
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_VAR 0 7
52476: PPUSH
52477: LD_INT 3
52479: PPUSH
52480: LD_INT 4
52482: PPUSH
52483: CALL_OW 272
52487: PUSH
52488: LD_VAR 0 8
52492: PPUSH
52493: LD_INT 3
52495: PPUSH
52496: LD_INT 4
52498: PPUSH
52499: CALL_OW 273
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_VAR 0 7
52512: PPUSH
52513: LD_INT 4
52515: PPUSH
52516: LD_INT 4
52518: PPUSH
52519: CALL_OW 272
52523: PUSH
52524: LD_VAR 0 8
52528: PPUSH
52529: LD_INT 4
52531: PPUSH
52532: LD_INT 4
52534: PPUSH
52535: CALL_OW 273
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_VAR 0 7
52548: PPUSH
52549: LD_INT 5
52551: PPUSH
52552: LD_INT 4
52554: PPUSH
52555: CALL_OW 272
52559: PUSH
52560: LD_VAR 0 8
52564: PPUSH
52565: LD_INT 5
52567: PPUSH
52568: LD_INT 4
52570: PPUSH
52571: CALL_OW 273
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: ST_TO_ADDR
// for i = tmp downto 1 do
52588: LD_ADDR_VAR 0 4
52592: PUSH
52593: DOUBLE
52594: LD_VAR 0 6
52598: INC
52599: ST_TO_ADDR
52600: LD_INT 1
52602: PUSH
52603: FOR_DOWNTO
52604: IFFALSE 52705
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
52606: LD_VAR 0 6
52610: PUSH
52611: LD_VAR 0 4
52615: ARRAY
52616: PUSH
52617: LD_INT 1
52619: ARRAY
52620: PPUSH
52621: LD_VAR 0 6
52625: PUSH
52626: LD_VAR 0 4
52630: ARRAY
52631: PUSH
52632: LD_INT 2
52634: ARRAY
52635: PPUSH
52636: CALL_OW 488
52640: NOT
52641: PUSH
52642: LD_VAR 0 6
52646: PUSH
52647: LD_VAR 0 4
52651: ARRAY
52652: PUSH
52653: LD_INT 1
52655: ARRAY
52656: PPUSH
52657: LD_VAR 0 6
52661: PUSH
52662: LD_VAR 0 4
52666: ARRAY
52667: PUSH
52668: LD_INT 2
52670: ARRAY
52671: PPUSH
52672: CALL_OW 428
52676: PUSH
52677: LD_INT 0
52679: NONEQUAL
52680: OR
52681: IFFALSE 52703
// tmp := Delete ( tmp , i ) ;
52683: LD_ADDR_VAR 0 6
52687: PUSH
52688: LD_VAR 0 6
52692: PPUSH
52693: LD_VAR 0 4
52697: PPUSH
52698: CALL_OW 3
52702: ST_TO_ADDR
52703: GO 52603
52705: POP
52706: POP
// j := GetClosestHex ( unit , tmp ) ;
52707: LD_ADDR_VAR 0 5
52711: PUSH
52712: LD_VAR 0 1
52716: PPUSH
52717: LD_VAR 0 6
52721: PPUSH
52722: CALL 52007 0 2
52726: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
52727: LD_VAR 0 1
52731: PPUSH
52732: LD_VAR 0 5
52736: PUSH
52737: LD_INT 1
52739: ARRAY
52740: PPUSH
52741: LD_VAR 0 5
52745: PUSH
52746: LD_INT 2
52748: ARRAY
52749: PPUSH
52750: CALL_OW 111
// end ;
52754: LD_VAR 0 3
52758: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
52759: LD_INT 0
52761: PPUSH
52762: PPUSH
52763: PPUSH
// uc_side = 0 ;
52764: LD_ADDR_OWVAR 20
52768: PUSH
52769: LD_INT 0
52771: ST_TO_ADDR
// uc_nation = 0 ;
52772: LD_ADDR_OWVAR 21
52776: PUSH
52777: LD_INT 0
52779: ST_TO_ADDR
// InitHc_All ( ) ;
52780: CALL_OW 584
// InitVc ;
52784: CALL_OW 20
// if mastodonts then
52788: LD_VAR 0 6
52792: IFFALSE 52859
// for i = 1 to mastodonts do
52794: LD_ADDR_VAR 0 11
52798: PUSH
52799: DOUBLE
52800: LD_INT 1
52802: DEC
52803: ST_TO_ADDR
52804: LD_VAR 0 6
52808: PUSH
52809: FOR_TO
52810: IFFALSE 52857
// begin vc_chassis := 31 ;
52812: LD_ADDR_OWVAR 37
52816: PUSH
52817: LD_INT 31
52819: ST_TO_ADDR
// vc_control := control_rider ;
52820: LD_ADDR_OWVAR 38
52824: PUSH
52825: LD_INT 4
52827: ST_TO_ADDR
// animal := CreateVehicle ;
52828: LD_ADDR_VAR 0 12
52832: PUSH
52833: CALL_OW 45
52837: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52838: LD_VAR 0 12
52842: PPUSH
52843: LD_VAR 0 8
52847: PPUSH
52848: LD_INT 0
52850: PPUSH
52851: CALL 54994 0 3
// end ;
52855: GO 52809
52857: POP
52858: POP
// if horses then
52859: LD_VAR 0 5
52863: IFFALSE 52930
// for i = 1 to horses do
52865: LD_ADDR_VAR 0 11
52869: PUSH
52870: DOUBLE
52871: LD_INT 1
52873: DEC
52874: ST_TO_ADDR
52875: LD_VAR 0 5
52879: PUSH
52880: FOR_TO
52881: IFFALSE 52928
// begin hc_class := 21 ;
52883: LD_ADDR_OWVAR 28
52887: PUSH
52888: LD_INT 21
52890: ST_TO_ADDR
// hc_gallery :=  ;
52891: LD_ADDR_OWVAR 33
52895: PUSH
52896: LD_STRING 
52898: ST_TO_ADDR
// animal := CreateHuman ;
52899: LD_ADDR_VAR 0 12
52903: PUSH
52904: CALL_OW 44
52908: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52909: LD_VAR 0 12
52913: PPUSH
52914: LD_VAR 0 8
52918: PPUSH
52919: LD_INT 0
52921: PPUSH
52922: CALL 54994 0 3
// end ;
52926: GO 52880
52928: POP
52929: POP
// if birds then
52930: LD_VAR 0 1
52934: IFFALSE 53001
// for i = 1 to birds do
52936: LD_ADDR_VAR 0 11
52940: PUSH
52941: DOUBLE
52942: LD_INT 1
52944: DEC
52945: ST_TO_ADDR
52946: LD_VAR 0 1
52950: PUSH
52951: FOR_TO
52952: IFFALSE 52999
// begin hc_class = 18 ;
52954: LD_ADDR_OWVAR 28
52958: PUSH
52959: LD_INT 18
52961: ST_TO_ADDR
// hc_gallery =  ;
52962: LD_ADDR_OWVAR 33
52966: PUSH
52967: LD_STRING 
52969: ST_TO_ADDR
// animal := CreateHuman ;
52970: LD_ADDR_VAR 0 12
52974: PUSH
52975: CALL_OW 44
52979: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52980: LD_VAR 0 12
52984: PPUSH
52985: LD_VAR 0 8
52989: PPUSH
52990: LD_INT 0
52992: PPUSH
52993: CALL 54994 0 3
// end ;
52997: GO 52951
52999: POP
53000: POP
// if tigers then
53001: LD_VAR 0 2
53005: IFFALSE 53089
// for i = 1 to tigers do
53007: LD_ADDR_VAR 0 11
53011: PUSH
53012: DOUBLE
53013: LD_INT 1
53015: DEC
53016: ST_TO_ADDR
53017: LD_VAR 0 2
53021: PUSH
53022: FOR_TO
53023: IFFALSE 53087
// begin hc_class = class_tiger ;
53025: LD_ADDR_OWVAR 28
53029: PUSH
53030: LD_INT 14
53032: ST_TO_ADDR
// hc_gallery =  ;
53033: LD_ADDR_OWVAR 33
53037: PUSH
53038: LD_STRING 
53040: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53041: LD_ADDR_OWVAR 35
53045: PUSH
53046: LD_INT 7
53048: NEG
53049: PPUSH
53050: LD_INT 7
53052: PPUSH
53053: CALL_OW 12
53057: ST_TO_ADDR
// animal := CreateHuman ;
53058: LD_ADDR_VAR 0 12
53062: PUSH
53063: CALL_OW 44
53067: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53068: LD_VAR 0 12
53072: PPUSH
53073: LD_VAR 0 8
53077: PPUSH
53078: LD_INT 0
53080: PPUSH
53081: CALL 54994 0 3
// end ;
53085: GO 53022
53087: POP
53088: POP
// if apemans then
53089: LD_VAR 0 3
53093: IFFALSE 53216
// for i = 1 to apemans do
53095: LD_ADDR_VAR 0 11
53099: PUSH
53100: DOUBLE
53101: LD_INT 1
53103: DEC
53104: ST_TO_ADDR
53105: LD_VAR 0 3
53109: PUSH
53110: FOR_TO
53111: IFFALSE 53214
// begin hc_class = class_apeman ;
53113: LD_ADDR_OWVAR 28
53117: PUSH
53118: LD_INT 12
53120: ST_TO_ADDR
// hc_gallery =  ;
53121: LD_ADDR_OWVAR 33
53125: PUSH
53126: LD_STRING 
53128: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
53129: LD_ADDR_OWVAR 35
53133: PUSH
53134: LD_INT 2
53136: NEG
53137: PPUSH
53138: LD_INT 2
53140: PPUSH
53141: CALL_OW 12
53145: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53146: LD_ADDR_OWVAR 31
53150: PUSH
53151: LD_INT 1
53153: PPUSH
53154: LD_INT 3
53156: PPUSH
53157: CALL_OW 12
53161: PUSH
53162: LD_INT 1
53164: PPUSH
53165: LD_INT 3
53167: PPUSH
53168: CALL_OW 12
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: LD_INT 0
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: ST_TO_ADDR
// animal := CreateHuman ;
53185: LD_ADDR_VAR 0 12
53189: PUSH
53190: CALL_OW 44
53194: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53195: LD_VAR 0 12
53199: PPUSH
53200: LD_VAR 0 8
53204: PPUSH
53205: LD_INT 0
53207: PPUSH
53208: CALL 54994 0 3
// end ;
53212: GO 53110
53214: POP
53215: POP
// if enchidnas then
53216: LD_VAR 0 4
53220: IFFALSE 53287
// for i = 1 to enchidnas do
53222: LD_ADDR_VAR 0 11
53226: PUSH
53227: DOUBLE
53228: LD_INT 1
53230: DEC
53231: ST_TO_ADDR
53232: LD_VAR 0 4
53236: PUSH
53237: FOR_TO
53238: IFFALSE 53285
// begin hc_class = 13 ;
53240: LD_ADDR_OWVAR 28
53244: PUSH
53245: LD_INT 13
53247: ST_TO_ADDR
// hc_gallery =  ;
53248: LD_ADDR_OWVAR 33
53252: PUSH
53253: LD_STRING 
53255: ST_TO_ADDR
// animal := CreateHuman ;
53256: LD_ADDR_VAR 0 12
53260: PUSH
53261: CALL_OW 44
53265: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53266: LD_VAR 0 12
53270: PPUSH
53271: LD_VAR 0 8
53275: PPUSH
53276: LD_INT 0
53278: PPUSH
53279: CALL 54994 0 3
// end ;
53283: GO 53237
53285: POP
53286: POP
// if fishes then
53287: LD_VAR 0 7
53291: IFFALSE 53358
// for i = 1 to fishes do
53293: LD_ADDR_VAR 0 11
53297: PUSH
53298: DOUBLE
53299: LD_INT 1
53301: DEC
53302: ST_TO_ADDR
53303: LD_VAR 0 7
53307: PUSH
53308: FOR_TO
53309: IFFALSE 53356
// begin hc_class = 20 ;
53311: LD_ADDR_OWVAR 28
53315: PUSH
53316: LD_INT 20
53318: ST_TO_ADDR
// hc_gallery =  ;
53319: LD_ADDR_OWVAR 33
53323: PUSH
53324: LD_STRING 
53326: ST_TO_ADDR
// animal := CreateHuman ;
53327: LD_ADDR_VAR 0 12
53331: PUSH
53332: CALL_OW 44
53336: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53337: LD_VAR 0 12
53341: PPUSH
53342: LD_VAR 0 9
53346: PPUSH
53347: LD_INT 0
53349: PPUSH
53350: CALL 54994 0 3
// end ;
53354: GO 53308
53356: POP
53357: POP
// end ;
53358: LD_VAR 0 10
53362: RET
// export function WantHeal ( sci , unit ) ; begin
53363: LD_INT 0
53365: PPUSH
// if GetTaskList ( sci ) > 0 then
53366: LD_VAR 0 1
53370: PPUSH
53371: CALL_OW 437
53375: PUSH
53376: LD_INT 0
53378: GREATER
53379: IFFALSE 53449
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53381: LD_VAR 0 1
53385: PPUSH
53386: CALL_OW 437
53390: PUSH
53391: LD_INT 1
53393: ARRAY
53394: PUSH
53395: LD_INT 1
53397: ARRAY
53398: PUSH
53399: LD_STRING l
53401: EQUAL
53402: PUSH
53403: LD_VAR 0 1
53407: PPUSH
53408: CALL_OW 437
53412: PUSH
53413: LD_INT 1
53415: ARRAY
53416: PUSH
53417: LD_INT 4
53419: ARRAY
53420: PUSH
53421: LD_VAR 0 2
53425: EQUAL
53426: AND
53427: IFFALSE 53439
// result := true else
53429: LD_ADDR_VAR 0 3
53433: PUSH
53434: LD_INT 1
53436: ST_TO_ADDR
53437: GO 53447
// result := false ;
53439: LD_ADDR_VAR 0 3
53443: PUSH
53444: LD_INT 0
53446: ST_TO_ADDR
// end else
53447: GO 53457
// result := false ;
53449: LD_ADDR_VAR 0 3
53453: PUSH
53454: LD_INT 0
53456: ST_TO_ADDR
// end ;
53457: LD_VAR 0 3
53461: RET
// export function HealTarget ( sci ) ; begin
53462: LD_INT 0
53464: PPUSH
// if not sci then
53465: LD_VAR 0 1
53469: NOT
53470: IFFALSE 53474
// exit ;
53472: GO 53539
// result := 0 ;
53474: LD_ADDR_VAR 0 2
53478: PUSH
53479: LD_INT 0
53481: ST_TO_ADDR
// if GetTaskList ( sci ) then
53482: LD_VAR 0 1
53486: PPUSH
53487: CALL_OW 437
53491: IFFALSE 53539
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
53493: LD_VAR 0 1
53497: PPUSH
53498: CALL_OW 437
53502: PUSH
53503: LD_INT 1
53505: ARRAY
53506: PUSH
53507: LD_INT 1
53509: ARRAY
53510: PUSH
53511: LD_STRING l
53513: EQUAL
53514: IFFALSE 53539
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
53516: LD_ADDR_VAR 0 2
53520: PUSH
53521: LD_VAR 0 1
53525: PPUSH
53526: CALL_OW 437
53530: PUSH
53531: LD_INT 1
53533: ARRAY
53534: PUSH
53535: LD_INT 4
53537: ARRAY
53538: ST_TO_ADDR
// end ;
53539: LD_VAR 0 2
53543: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
53544: LD_INT 0
53546: PPUSH
53547: PPUSH
53548: PPUSH
53549: PPUSH
// if not base_units then
53550: LD_VAR 0 1
53554: NOT
53555: IFFALSE 53559
// exit ;
53557: GO 53646
// result := false ;
53559: LD_ADDR_VAR 0 2
53563: PUSH
53564: LD_INT 0
53566: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
53567: LD_ADDR_VAR 0 5
53571: PUSH
53572: LD_VAR 0 1
53576: PPUSH
53577: LD_INT 21
53579: PUSH
53580: LD_INT 3
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PPUSH
53587: CALL_OW 72
53591: ST_TO_ADDR
// if not tmp then
53592: LD_VAR 0 5
53596: NOT
53597: IFFALSE 53601
// exit ;
53599: GO 53646
// for i in tmp do
53601: LD_ADDR_VAR 0 3
53605: PUSH
53606: LD_VAR 0 5
53610: PUSH
53611: FOR_IN
53612: IFFALSE 53644
// begin result := EnemyInRange ( i , 22 ) ;
53614: LD_ADDR_VAR 0 2
53618: PUSH
53619: LD_VAR 0 3
53623: PPUSH
53624: LD_INT 22
53626: PPUSH
53627: CALL 51882 0 2
53631: ST_TO_ADDR
// if result then
53632: LD_VAR 0 2
53636: IFFALSE 53642
// exit ;
53638: POP
53639: POP
53640: GO 53646
// end ;
53642: GO 53611
53644: POP
53645: POP
// end ;
53646: LD_VAR 0 2
53650: RET
// export function FilterByTag ( units , tag ) ; begin
53651: LD_INT 0
53653: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
53654: LD_ADDR_VAR 0 3
53658: PUSH
53659: LD_VAR 0 1
53663: PPUSH
53664: LD_INT 120
53666: PUSH
53667: LD_VAR 0 2
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PPUSH
53676: CALL_OW 72
53680: ST_TO_ADDR
// end ;
53681: LD_VAR 0 3
53685: RET
// export function IsDriver ( un ) ; begin
53686: LD_INT 0
53688: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
53689: LD_ADDR_VAR 0 2
53693: PUSH
53694: LD_VAR 0 1
53698: PUSH
53699: LD_INT 55
53701: PUSH
53702: EMPTY
53703: LIST
53704: PPUSH
53705: CALL_OW 69
53709: IN
53710: ST_TO_ADDR
// end ;
53711: LD_VAR 0 2
53715: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
53716: LD_INT 0
53718: PPUSH
53719: PPUSH
// list := [ ] ;
53720: LD_ADDR_VAR 0 5
53724: PUSH
53725: EMPTY
53726: ST_TO_ADDR
// case d of 0 :
53727: LD_VAR 0 3
53731: PUSH
53732: LD_INT 0
53734: DOUBLE
53735: EQUAL
53736: IFTRUE 53740
53738: GO 53873
53740: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
53741: LD_ADDR_VAR 0 5
53745: PUSH
53746: LD_VAR 0 1
53750: PUSH
53751: LD_INT 4
53753: MINUS
53754: PUSH
53755: LD_VAR 0 2
53759: PUSH
53760: LD_INT 4
53762: MINUS
53763: PUSH
53764: LD_INT 2
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: LIST
53771: PUSH
53772: LD_VAR 0 1
53776: PUSH
53777: LD_INT 3
53779: MINUS
53780: PUSH
53781: LD_VAR 0 2
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: LIST
53793: PUSH
53794: LD_VAR 0 1
53798: PUSH
53799: LD_INT 4
53801: PLUS
53802: PUSH
53803: LD_VAR 0 2
53807: PUSH
53808: LD_INT 4
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: LIST
53815: PUSH
53816: LD_VAR 0 1
53820: PUSH
53821: LD_INT 3
53823: PLUS
53824: PUSH
53825: LD_VAR 0 2
53829: PUSH
53830: LD_INT 3
53832: PLUS
53833: PUSH
53834: LD_INT 5
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: LIST
53841: PUSH
53842: LD_VAR 0 1
53846: PUSH
53847: LD_VAR 0 2
53851: PUSH
53852: LD_INT 4
53854: PLUS
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: LIST
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: ST_TO_ADDR
// end ; 1 :
53871: GO 54571
53873: LD_INT 1
53875: DOUBLE
53876: EQUAL
53877: IFTRUE 53881
53879: GO 54014
53881: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53882: LD_ADDR_VAR 0 5
53886: PUSH
53887: LD_VAR 0 1
53891: PUSH
53892: LD_VAR 0 2
53896: PUSH
53897: LD_INT 4
53899: MINUS
53900: PUSH
53901: LD_INT 3
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: LIST
53908: PUSH
53909: LD_VAR 0 1
53913: PUSH
53914: LD_INT 3
53916: MINUS
53917: PUSH
53918: LD_VAR 0 2
53922: PUSH
53923: LD_INT 3
53925: MINUS
53926: PUSH
53927: LD_INT 2
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: LIST
53934: PUSH
53935: LD_VAR 0 1
53939: PUSH
53940: LD_INT 4
53942: MINUS
53943: PUSH
53944: LD_VAR 0 2
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: LIST
53956: PUSH
53957: LD_VAR 0 1
53961: PUSH
53962: LD_VAR 0 2
53966: PUSH
53967: LD_INT 3
53969: PLUS
53970: PUSH
53971: LD_INT 0
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: LIST
53978: PUSH
53979: LD_VAR 0 1
53983: PUSH
53984: LD_INT 4
53986: PLUS
53987: PUSH
53988: LD_VAR 0 2
53992: PUSH
53993: LD_INT 4
53995: PLUS
53996: PUSH
53997: LD_INT 5
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: LIST
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: ST_TO_ADDR
// end ; 2 :
54012: GO 54571
54014: LD_INT 2
54016: DOUBLE
54017: EQUAL
54018: IFTRUE 54022
54020: GO 54151
54022: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54023: LD_ADDR_VAR 0 5
54027: PUSH
54028: LD_VAR 0 1
54032: PUSH
54033: LD_VAR 0 2
54037: PUSH
54038: LD_INT 3
54040: MINUS
54041: PUSH
54042: LD_INT 3
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: LIST
54049: PUSH
54050: LD_VAR 0 1
54054: PUSH
54055: LD_INT 4
54057: PLUS
54058: PUSH
54059: LD_VAR 0 2
54063: PUSH
54064: LD_INT 4
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: LIST
54071: PUSH
54072: LD_VAR 0 1
54076: PUSH
54077: LD_VAR 0 2
54081: PUSH
54082: LD_INT 4
54084: PLUS
54085: PUSH
54086: LD_INT 0
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: LIST
54093: PUSH
54094: LD_VAR 0 1
54098: PUSH
54099: LD_INT 3
54101: MINUS
54102: PUSH
54103: LD_VAR 0 2
54107: PUSH
54108: LD_INT 1
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: LIST
54115: PUSH
54116: LD_VAR 0 1
54120: PUSH
54121: LD_INT 4
54123: MINUS
54124: PUSH
54125: LD_VAR 0 2
54129: PUSH
54130: LD_INT 4
54132: MINUS
54133: PUSH
54134: LD_INT 2
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: LIST
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: ST_TO_ADDR
// end ; 3 :
54149: GO 54571
54151: LD_INT 3
54153: DOUBLE
54154: EQUAL
54155: IFTRUE 54159
54157: GO 54292
54159: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
54160: LD_ADDR_VAR 0 5
54164: PUSH
54165: LD_VAR 0 1
54169: PUSH
54170: LD_INT 3
54172: PLUS
54173: PUSH
54174: LD_VAR 0 2
54178: PUSH
54179: LD_INT 4
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: LIST
54186: PUSH
54187: LD_VAR 0 1
54191: PUSH
54192: LD_INT 4
54194: PLUS
54195: PUSH
54196: LD_VAR 0 2
54200: PUSH
54201: LD_INT 4
54203: PLUS
54204: PUSH
54205: LD_INT 5
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: LIST
54212: PUSH
54213: LD_VAR 0 1
54217: PUSH
54218: LD_INT 4
54220: MINUS
54221: PUSH
54222: LD_VAR 0 2
54226: PUSH
54227: LD_INT 1
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: LIST
54234: PUSH
54235: LD_VAR 0 1
54239: PUSH
54240: LD_VAR 0 2
54244: PUSH
54245: LD_INT 4
54247: MINUS
54248: PUSH
54249: LD_INT 3
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: LIST
54256: PUSH
54257: LD_VAR 0 1
54261: PUSH
54262: LD_INT 3
54264: MINUS
54265: PUSH
54266: LD_VAR 0 2
54270: PUSH
54271: LD_INT 3
54273: MINUS
54274: PUSH
54275: LD_INT 2
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: LIST
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: ST_TO_ADDR
// end ; 4 :
54290: GO 54571
54292: LD_INT 4
54294: DOUBLE
54295: EQUAL
54296: IFTRUE 54300
54298: GO 54433
54300: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
54301: LD_ADDR_VAR 0 5
54305: PUSH
54306: LD_VAR 0 1
54310: PUSH
54311: LD_VAR 0 2
54315: PUSH
54316: LD_INT 4
54318: PLUS
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: LIST
54327: PUSH
54328: LD_VAR 0 1
54332: PUSH
54333: LD_INT 3
54335: PLUS
54336: PUSH
54337: LD_VAR 0 2
54341: PUSH
54342: LD_INT 3
54344: PLUS
54345: PUSH
54346: LD_INT 5
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: LIST
54353: PUSH
54354: LD_VAR 0 1
54358: PUSH
54359: LD_INT 4
54361: PLUS
54362: PUSH
54363: LD_VAR 0 2
54367: PUSH
54368: LD_INT 4
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: LIST
54375: PUSH
54376: LD_VAR 0 1
54380: PUSH
54381: LD_VAR 0 2
54385: PUSH
54386: LD_INT 3
54388: MINUS
54389: PUSH
54390: LD_INT 3
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: LIST
54397: PUSH
54398: LD_VAR 0 1
54402: PUSH
54403: LD_INT 4
54405: MINUS
54406: PUSH
54407: LD_VAR 0 2
54411: PUSH
54412: LD_INT 4
54414: MINUS
54415: PUSH
54416: LD_INT 2
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: LIST
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: ST_TO_ADDR
// end ; 5 :
54431: GO 54571
54433: LD_INT 5
54435: DOUBLE
54436: EQUAL
54437: IFTRUE 54441
54439: GO 54570
54441: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
54442: LD_ADDR_VAR 0 5
54446: PUSH
54447: LD_VAR 0 1
54451: PUSH
54452: LD_INT 4
54454: MINUS
54455: PUSH
54456: LD_VAR 0 2
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: LIST
54468: PUSH
54469: LD_VAR 0 1
54473: PUSH
54474: LD_VAR 0 2
54478: PUSH
54479: LD_INT 4
54481: MINUS
54482: PUSH
54483: LD_INT 3
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: LIST
54490: PUSH
54491: LD_VAR 0 1
54495: PUSH
54496: LD_INT 4
54498: PLUS
54499: PUSH
54500: LD_VAR 0 2
54504: PUSH
54505: LD_INT 4
54507: PLUS
54508: PUSH
54509: LD_INT 5
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: LIST
54516: PUSH
54517: LD_VAR 0 1
54521: PUSH
54522: LD_INT 3
54524: PLUS
54525: PUSH
54526: LD_VAR 0 2
54530: PUSH
54531: LD_INT 4
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: LIST
54538: PUSH
54539: LD_VAR 0 1
54543: PUSH
54544: LD_VAR 0 2
54548: PUSH
54549: LD_INT 3
54551: PLUS
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: LIST
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: ST_TO_ADDR
// end ; end ;
54568: GO 54571
54570: POP
// result := list ;
54571: LD_ADDR_VAR 0 4
54575: PUSH
54576: LD_VAR 0 5
54580: ST_TO_ADDR
// end ;
54581: LD_VAR 0 4
54585: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
54586: LD_INT 0
54588: PPUSH
54589: PPUSH
54590: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
54591: LD_VAR 0 1
54595: NOT
54596: PUSH
54597: LD_VAR 0 2
54601: PUSH
54602: LD_INT 1
54604: PUSH
54605: LD_INT 2
54607: PUSH
54608: LD_INT 3
54610: PUSH
54611: LD_INT 4
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: IN
54620: NOT
54621: OR
54622: IFFALSE 54626
// exit ;
54624: GO 54718
// tmp := [ ] ;
54626: LD_ADDR_VAR 0 5
54630: PUSH
54631: EMPTY
54632: ST_TO_ADDR
// for i in units do
54633: LD_ADDR_VAR 0 4
54637: PUSH
54638: LD_VAR 0 1
54642: PUSH
54643: FOR_IN
54644: IFFALSE 54687
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
54646: LD_ADDR_VAR 0 5
54650: PUSH
54651: LD_VAR 0 5
54655: PPUSH
54656: LD_VAR 0 5
54660: PUSH
54661: LD_INT 1
54663: PLUS
54664: PPUSH
54665: LD_VAR 0 4
54669: PPUSH
54670: LD_VAR 0 2
54674: PPUSH
54675: CALL_OW 259
54679: PPUSH
54680: CALL_OW 2
54684: ST_TO_ADDR
54685: GO 54643
54687: POP
54688: POP
// if not tmp then
54689: LD_VAR 0 5
54693: NOT
54694: IFFALSE 54698
// exit ;
54696: GO 54718
// result := SortListByListDesc ( units , tmp ) ;
54698: LD_ADDR_VAR 0 3
54702: PUSH
54703: LD_VAR 0 1
54707: PPUSH
54708: LD_VAR 0 5
54712: PPUSH
54713: CALL_OW 77
54717: ST_TO_ADDR
// end ;
54718: LD_VAR 0 3
54722: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
54723: LD_INT 0
54725: PPUSH
54726: PPUSH
54727: PPUSH
// result := false ;
54728: LD_ADDR_VAR 0 3
54732: PUSH
54733: LD_INT 0
54735: ST_TO_ADDR
// x := GetX ( building ) ;
54736: LD_ADDR_VAR 0 4
54740: PUSH
54741: LD_VAR 0 2
54745: PPUSH
54746: CALL_OW 250
54750: ST_TO_ADDR
// y := GetY ( building ) ;
54751: LD_ADDR_VAR 0 5
54755: PUSH
54756: LD_VAR 0 2
54760: PPUSH
54761: CALL_OW 251
54765: ST_TO_ADDR
// if not building or not x or not y then
54766: LD_VAR 0 2
54770: NOT
54771: PUSH
54772: LD_VAR 0 4
54776: NOT
54777: OR
54778: PUSH
54779: LD_VAR 0 5
54783: NOT
54784: OR
54785: IFFALSE 54789
// exit ;
54787: GO 54881
// if GetTaskList ( unit ) then
54789: LD_VAR 0 1
54793: PPUSH
54794: CALL_OW 437
54798: IFFALSE 54881
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54800: LD_STRING e
54802: PUSH
54803: LD_VAR 0 1
54807: PPUSH
54808: CALL_OW 437
54812: PUSH
54813: LD_INT 1
54815: ARRAY
54816: PUSH
54817: LD_INT 1
54819: ARRAY
54820: EQUAL
54821: PUSH
54822: LD_VAR 0 4
54826: PUSH
54827: LD_VAR 0 1
54831: PPUSH
54832: CALL_OW 437
54836: PUSH
54837: LD_INT 1
54839: ARRAY
54840: PUSH
54841: LD_INT 2
54843: ARRAY
54844: EQUAL
54845: AND
54846: PUSH
54847: LD_VAR 0 5
54851: PUSH
54852: LD_VAR 0 1
54856: PPUSH
54857: CALL_OW 437
54861: PUSH
54862: LD_INT 1
54864: ARRAY
54865: PUSH
54866: LD_INT 3
54868: ARRAY
54869: EQUAL
54870: AND
54871: IFFALSE 54881
// result := true end ;
54873: LD_ADDR_VAR 0 3
54877: PUSH
54878: LD_INT 1
54880: ST_TO_ADDR
// end ;
54881: LD_VAR 0 3
54885: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
54886: LD_INT 0
54888: PPUSH
// result := false ;
54889: LD_ADDR_VAR 0 4
54893: PUSH
54894: LD_INT 0
54896: ST_TO_ADDR
// if GetTaskList ( unit ) then
54897: LD_VAR 0 1
54901: PPUSH
54902: CALL_OW 437
54906: IFFALSE 54989
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54908: LD_STRING M
54910: PUSH
54911: LD_VAR 0 1
54915: PPUSH
54916: CALL_OW 437
54920: PUSH
54921: LD_INT 1
54923: ARRAY
54924: PUSH
54925: LD_INT 1
54927: ARRAY
54928: EQUAL
54929: PUSH
54930: LD_VAR 0 2
54934: PUSH
54935: LD_VAR 0 1
54939: PPUSH
54940: CALL_OW 437
54944: PUSH
54945: LD_INT 1
54947: ARRAY
54948: PUSH
54949: LD_INT 2
54951: ARRAY
54952: EQUAL
54953: AND
54954: PUSH
54955: LD_VAR 0 3
54959: PUSH
54960: LD_VAR 0 1
54964: PPUSH
54965: CALL_OW 437
54969: PUSH
54970: LD_INT 1
54972: ARRAY
54973: PUSH
54974: LD_INT 3
54976: ARRAY
54977: EQUAL
54978: AND
54979: IFFALSE 54989
// result := true ;
54981: LD_ADDR_VAR 0 4
54985: PUSH
54986: LD_INT 1
54988: ST_TO_ADDR
// end ; end ;
54989: LD_VAR 0 4
54993: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54994: LD_INT 0
54996: PPUSH
54997: PPUSH
54998: PPUSH
54999: PPUSH
// if not unit or not area then
55000: LD_VAR 0 1
55004: NOT
55005: PUSH
55006: LD_VAR 0 2
55010: NOT
55011: OR
55012: IFFALSE 55016
// exit ;
55014: GO 55180
// tmp := AreaToList ( area , i ) ;
55016: LD_ADDR_VAR 0 6
55020: PUSH
55021: LD_VAR 0 2
55025: PPUSH
55026: LD_VAR 0 5
55030: PPUSH
55031: CALL_OW 517
55035: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55036: LD_ADDR_VAR 0 5
55040: PUSH
55041: DOUBLE
55042: LD_INT 1
55044: DEC
55045: ST_TO_ADDR
55046: LD_VAR 0 6
55050: PUSH
55051: LD_INT 1
55053: ARRAY
55054: PUSH
55055: FOR_TO
55056: IFFALSE 55178
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
55058: LD_ADDR_VAR 0 7
55062: PUSH
55063: LD_VAR 0 6
55067: PUSH
55068: LD_INT 1
55070: ARRAY
55071: PUSH
55072: LD_VAR 0 5
55076: ARRAY
55077: PUSH
55078: LD_VAR 0 6
55082: PUSH
55083: LD_INT 2
55085: ARRAY
55086: PUSH
55087: LD_VAR 0 5
55091: ARRAY
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
55097: LD_VAR 0 7
55101: PUSH
55102: LD_INT 1
55104: ARRAY
55105: PPUSH
55106: LD_VAR 0 7
55110: PUSH
55111: LD_INT 2
55113: ARRAY
55114: PPUSH
55115: CALL_OW 428
55119: PUSH
55120: LD_INT 0
55122: EQUAL
55123: IFFALSE 55176
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
55125: LD_VAR 0 1
55129: PPUSH
55130: LD_VAR 0 7
55134: PUSH
55135: LD_INT 1
55137: ARRAY
55138: PPUSH
55139: LD_VAR 0 7
55143: PUSH
55144: LD_INT 2
55146: ARRAY
55147: PPUSH
55148: LD_VAR 0 3
55152: PPUSH
55153: CALL_OW 48
// result := IsPlaced ( unit ) ;
55157: LD_ADDR_VAR 0 4
55161: PUSH
55162: LD_VAR 0 1
55166: PPUSH
55167: CALL_OW 305
55171: ST_TO_ADDR
// exit ;
55172: POP
55173: POP
55174: GO 55180
// end ; end ;
55176: GO 55055
55178: POP
55179: POP
// end ;
55180: LD_VAR 0 4
55184: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
55185: LD_INT 0
55187: PPUSH
55188: PPUSH
55189: PPUSH
// if not side or side > 8 then
55190: LD_VAR 0 1
55194: NOT
55195: PUSH
55196: LD_VAR 0 1
55200: PUSH
55201: LD_INT 8
55203: GREATER
55204: OR
55205: IFFALSE 55209
// exit ;
55207: GO 55396
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
55209: LD_ADDR_VAR 0 4
55213: PUSH
55214: LD_INT 22
55216: PUSH
55217: LD_VAR 0 1
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 21
55228: PUSH
55229: LD_INT 3
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PPUSH
55240: CALL_OW 69
55244: ST_TO_ADDR
// if not tmp then
55245: LD_VAR 0 4
55249: NOT
55250: IFFALSE 55254
// exit ;
55252: GO 55396
// enable_addtolog := true ;
55254: LD_ADDR_OWVAR 81
55258: PUSH
55259: LD_INT 1
55261: ST_TO_ADDR
// AddToLog ( [ ) ;
55262: LD_STRING [
55264: PPUSH
55265: CALL_OW 561
// for i in tmp do
55269: LD_ADDR_VAR 0 3
55273: PUSH
55274: LD_VAR 0 4
55278: PUSH
55279: FOR_IN
55280: IFFALSE 55387
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
55282: LD_STRING [
55284: PUSH
55285: LD_VAR 0 3
55289: PPUSH
55290: CALL_OW 266
55294: STR
55295: PUSH
55296: LD_STRING , 
55298: STR
55299: PUSH
55300: LD_VAR 0 3
55304: PPUSH
55305: CALL_OW 250
55309: STR
55310: PUSH
55311: LD_STRING , 
55313: STR
55314: PUSH
55315: LD_VAR 0 3
55319: PPUSH
55320: CALL_OW 251
55324: STR
55325: PUSH
55326: LD_STRING , 
55328: STR
55329: PUSH
55330: LD_VAR 0 3
55334: PPUSH
55335: CALL_OW 254
55339: STR
55340: PUSH
55341: LD_STRING , 
55343: STR
55344: PUSH
55345: LD_VAR 0 3
55349: PPUSH
55350: LD_INT 1
55352: PPUSH
55353: CALL_OW 268
55357: STR
55358: PUSH
55359: LD_STRING , 
55361: STR
55362: PUSH
55363: LD_VAR 0 3
55367: PPUSH
55368: LD_INT 2
55370: PPUSH
55371: CALL_OW 268
55375: STR
55376: PUSH
55377: LD_STRING ],
55379: STR
55380: PPUSH
55381: CALL_OW 561
// end ;
55385: GO 55279
55387: POP
55388: POP
// AddToLog ( ]; ) ;
55389: LD_STRING ];
55391: PPUSH
55392: CALL_OW 561
// end ;
55396: LD_VAR 0 2
55400: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
55401: LD_INT 0
55403: PPUSH
55404: PPUSH
55405: PPUSH
55406: PPUSH
55407: PPUSH
// if not area or not rate or not max then
55408: LD_VAR 0 1
55412: NOT
55413: PUSH
55414: LD_VAR 0 2
55418: NOT
55419: OR
55420: PUSH
55421: LD_VAR 0 4
55425: NOT
55426: OR
55427: IFFALSE 55431
// exit ;
55429: GO 55620
// while 1 do
55431: LD_INT 1
55433: IFFALSE 55620
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
55435: LD_ADDR_VAR 0 9
55439: PUSH
55440: LD_VAR 0 1
55444: PPUSH
55445: LD_INT 1
55447: PPUSH
55448: CALL_OW 287
55452: PUSH
55453: LD_INT 10
55455: MUL
55456: ST_TO_ADDR
// r := rate / 10 ;
55457: LD_ADDR_VAR 0 7
55461: PUSH
55462: LD_VAR 0 2
55466: PUSH
55467: LD_INT 10
55469: DIVREAL
55470: ST_TO_ADDR
// time := 1 1$00 ;
55471: LD_ADDR_VAR 0 8
55475: PUSH
55476: LD_INT 2100
55478: ST_TO_ADDR
// if amount < min then
55479: LD_VAR 0 9
55483: PUSH
55484: LD_VAR 0 3
55488: LESS
55489: IFFALSE 55507
// r := r * 2 else
55491: LD_ADDR_VAR 0 7
55495: PUSH
55496: LD_VAR 0 7
55500: PUSH
55501: LD_INT 2
55503: MUL
55504: ST_TO_ADDR
55505: GO 55533
// if amount > max then
55507: LD_VAR 0 9
55511: PUSH
55512: LD_VAR 0 4
55516: GREATER
55517: IFFALSE 55533
// r := r / 2 ;
55519: LD_ADDR_VAR 0 7
55523: PUSH
55524: LD_VAR 0 7
55528: PUSH
55529: LD_INT 2
55531: DIVREAL
55532: ST_TO_ADDR
// time := time / r ;
55533: LD_ADDR_VAR 0 8
55537: PUSH
55538: LD_VAR 0 8
55542: PUSH
55543: LD_VAR 0 7
55547: DIVREAL
55548: ST_TO_ADDR
// if time < 0 then
55549: LD_VAR 0 8
55553: PUSH
55554: LD_INT 0
55556: LESS
55557: IFFALSE 55574
// time := time * - 1 ;
55559: LD_ADDR_VAR 0 8
55563: PUSH
55564: LD_VAR 0 8
55568: PUSH
55569: LD_INT 1
55571: NEG
55572: MUL
55573: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
55574: LD_VAR 0 8
55578: PUSH
55579: LD_INT 35
55581: PPUSH
55582: LD_INT 875
55584: PPUSH
55585: CALL_OW 12
55589: PLUS
55590: PPUSH
55591: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
55595: LD_INT 1
55597: PPUSH
55598: LD_INT 5
55600: PPUSH
55601: CALL_OW 12
55605: PPUSH
55606: LD_VAR 0 1
55610: PPUSH
55611: LD_INT 1
55613: PPUSH
55614: CALL_OW 55
// end ;
55618: GO 55431
// end ;
55620: LD_VAR 0 5
55624: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
55625: LD_INT 0
55627: PPUSH
55628: PPUSH
55629: PPUSH
55630: PPUSH
55631: PPUSH
55632: PPUSH
55633: PPUSH
55634: PPUSH
// if not turrets or not factories then
55635: LD_VAR 0 1
55639: NOT
55640: PUSH
55641: LD_VAR 0 2
55645: NOT
55646: OR
55647: IFFALSE 55651
// exit ;
55649: GO 55958
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
55651: LD_ADDR_VAR 0 10
55655: PUSH
55656: LD_INT 5
55658: PUSH
55659: LD_INT 6
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 2
55668: PUSH
55669: LD_INT 4
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 3
55678: PUSH
55679: LD_INT 5
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 24
55693: PUSH
55694: LD_INT 25
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 23
55703: PUSH
55704: LD_INT 27
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 42
55717: PUSH
55718: LD_INT 43
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 44
55727: PUSH
55728: LD_INT 46
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 45
55737: PUSH
55738: LD_INT 47
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: LIST
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: LIST
55754: ST_TO_ADDR
// result := [ ] ;
55755: LD_ADDR_VAR 0 3
55759: PUSH
55760: EMPTY
55761: ST_TO_ADDR
// for i in turrets do
55762: LD_ADDR_VAR 0 4
55766: PUSH
55767: LD_VAR 0 1
55771: PUSH
55772: FOR_IN
55773: IFFALSE 55956
// begin nat := GetNation ( i ) ;
55775: LD_ADDR_VAR 0 7
55779: PUSH
55780: LD_VAR 0 4
55784: PPUSH
55785: CALL_OW 248
55789: ST_TO_ADDR
// weapon := 0 ;
55790: LD_ADDR_VAR 0 8
55794: PUSH
55795: LD_INT 0
55797: ST_TO_ADDR
// if not nat then
55798: LD_VAR 0 7
55802: NOT
55803: IFFALSE 55807
// continue ;
55805: GO 55772
// for j in list [ nat ] do
55807: LD_ADDR_VAR 0 5
55811: PUSH
55812: LD_VAR 0 10
55816: PUSH
55817: LD_VAR 0 7
55821: ARRAY
55822: PUSH
55823: FOR_IN
55824: IFFALSE 55865
// if GetBWeapon ( i ) = j [ 1 ] then
55826: LD_VAR 0 4
55830: PPUSH
55831: CALL_OW 269
55835: PUSH
55836: LD_VAR 0 5
55840: PUSH
55841: LD_INT 1
55843: ARRAY
55844: EQUAL
55845: IFFALSE 55863
// begin weapon := j [ 2 ] ;
55847: LD_ADDR_VAR 0 8
55851: PUSH
55852: LD_VAR 0 5
55856: PUSH
55857: LD_INT 2
55859: ARRAY
55860: ST_TO_ADDR
// break ;
55861: GO 55865
// end ;
55863: GO 55823
55865: POP
55866: POP
// if not weapon then
55867: LD_VAR 0 8
55871: NOT
55872: IFFALSE 55876
// continue ;
55874: GO 55772
// for k in factories do
55876: LD_ADDR_VAR 0 6
55880: PUSH
55881: LD_VAR 0 2
55885: PUSH
55886: FOR_IN
55887: IFFALSE 55952
// begin weapons := AvailableWeaponList ( k ) ;
55889: LD_ADDR_VAR 0 9
55893: PUSH
55894: LD_VAR 0 6
55898: PPUSH
55899: CALL_OW 478
55903: ST_TO_ADDR
// if not weapons then
55904: LD_VAR 0 9
55908: NOT
55909: IFFALSE 55913
// continue ;
55911: GO 55886
// if weapon in weapons then
55913: LD_VAR 0 8
55917: PUSH
55918: LD_VAR 0 9
55922: IN
55923: IFFALSE 55950
// begin result := [ i , weapon ] ;
55925: LD_ADDR_VAR 0 3
55929: PUSH
55930: LD_VAR 0 4
55934: PUSH
55935: LD_VAR 0 8
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: ST_TO_ADDR
// exit ;
55944: POP
55945: POP
55946: POP
55947: POP
55948: GO 55958
// end ; end ;
55950: GO 55886
55952: POP
55953: POP
// end ;
55954: GO 55772
55956: POP
55957: POP
// end ;
55958: LD_VAR 0 3
55962: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55963: LD_INT 0
55965: PPUSH
// if not side or side > 8 then
55966: LD_VAR 0 3
55970: NOT
55971: PUSH
55972: LD_VAR 0 3
55976: PUSH
55977: LD_INT 8
55979: GREATER
55980: OR
55981: IFFALSE 55985
// exit ;
55983: GO 56044
// if not range then
55985: LD_VAR 0 4
55989: NOT
55990: IFFALSE 56001
// range := - 12 ;
55992: LD_ADDR_VAR 0 4
55996: PUSH
55997: LD_INT 12
55999: NEG
56000: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
56001: LD_VAR 0 1
56005: PPUSH
56006: LD_VAR 0 2
56010: PPUSH
56011: LD_VAR 0 3
56015: PPUSH
56016: LD_VAR 0 4
56020: PPUSH
56021: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56025: LD_VAR 0 1
56029: PPUSH
56030: LD_VAR 0 2
56034: PPUSH
56035: LD_VAR 0 3
56039: PPUSH
56040: CALL_OW 331
// end ;
56044: LD_VAR 0 5
56048: RET
// export function Video ( mode ) ; begin
56049: LD_INT 0
56051: PPUSH
// ingame_video = mode ;
56052: LD_ADDR_OWVAR 52
56056: PUSH
56057: LD_VAR 0 1
56061: ST_TO_ADDR
// interface_hidden = mode ;
56062: LD_ADDR_OWVAR 54
56066: PUSH
56067: LD_VAR 0 1
56071: ST_TO_ADDR
// end ;
56072: LD_VAR 0 2
56076: RET
// export function Join ( array , element ) ; begin
56077: LD_INT 0
56079: PPUSH
// result := Replace ( array , array + 1 , element ) ;
56080: LD_ADDR_VAR 0 3
56084: PUSH
56085: LD_VAR 0 1
56089: PPUSH
56090: LD_VAR 0 1
56094: PUSH
56095: LD_INT 1
56097: PLUS
56098: PPUSH
56099: LD_VAR 0 2
56103: PPUSH
56104: CALL_OW 1
56108: ST_TO_ADDR
// end ;
56109: LD_VAR 0 3
56113: RET
// export function JoinUnion ( array , element ) ; begin
56114: LD_INT 0
56116: PPUSH
// result := array union element ;
56117: LD_ADDR_VAR 0 3
56121: PUSH
56122: LD_VAR 0 1
56126: PUSH
56127: LD_VAR 0 2
56131: UNION
56132: ST_TO_ADDR
// end ;
56133: LD_VAR 0 3
56137: RET
// export function GetBehemoths ( side ) ; begin
56138: LD_INT 0
56140: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
56141: LD_ADDR_VAR 0 2
56145: PUSH
56146: LD_INT 22
56148: PUSH
56149: LD_VAR 0 1
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 31
56160: PUSH
56161: LD_INT 25
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PPUSH
56172: CALL_OW 69
56176: ST_TO_ADDR
// end ;
56177: LD_VAR 0 2
56181: RET
// export function Shuffle ( array ) ; var i , index ; begin
56182: LD_INT 0
56184: PPUSH
56185: PPUSH
56186: PPUSH
// result := [ ] ;
56187: LD_ADDR_VAR 0 2
56191: PUSH
56192: EMPTY
56193: ST_TO_ADDR
// if not array then
56194: LD_VAR 0 1
56198: NOT
56199: IFFALSE 56203
// exit ;
56201: GO 56302
// Randomize ;
56203: CALL_OW 10
// for i = array downto 1 do
56207: LD_ADDR_VAR 0 3
56211: PUSH
56212: DOUBLE
56213: LD_VAR 0 1
56217: INC
56218: ST_TO_ADDR
56219: LD_INT 1
56221: PUSH
56222: FOR_DOWNTO
56223: IFFALSE 56300
// begin index := rand ( 1 , array ) ;
56225: LD_ADDR_VAR 0 4
56229: PUSH
56230: LD_INT 1
56232: PPUSH
56233: LD_VAR 0 1
56237: PPUSH
56238: CALL_OW 12
56242: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
56243: LD_ADDR_VAR 0 2
56247: PUSH
56248: LD_VAR 0 2
56252: PPUSH
56253: LD_VAR 0 2
56257: PUSH
56258: LD_INT 1
56260: PLUS
56261: PPUSH
56262: LD_VAR 0 1
56266: PUSH
56267: LD_VAR 0 4
56271: ARRAY
56272: PPUSH
56273: CALL_OW 2
56277: ST_TO_ADDR
// array := Delete ( array , index ) ;
56278: LD_ADDR_VAR 0 1
56282: PUSH
56283: LD_VAR 0 1
56287: PPUSH
56288: LD_VAR 0 4
56292: PPUSH
56293: CALL_OW 3
56297: ST_TO_ADDR
// end ;
56298: GO 56222
56300: POP
56301: POP
// end ;
56302: LD_VAR 0 2
56306: RET
// export function GetBaseMaterials ( base ) ; begin
56307: LD_INT 0
56309: PPUSH
// result := [ 0 , 0 , 0 ] ;
56310: LD_ADDR_VAR 0 2
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: LD_INT 0
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: LIST
56328: ST_TO_ADDR
// if not base then
56329: LD_VAR 0 1
56333: NOT
56334: IFFALSE 56338
// exit ;
56336: GO 56387
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
56338: LD_ADDR_VAR 0 2
56342: PUSH
56343: LD_VAR 0 1
56347: PPUSH
56348: LD_INT 1
56350: PPUSH
56351: CALL_OW 275
56355: PUSH
56356: LD_VAR 0 1
56360: PPUSH
56361: LD_INT 2
56363: PPUSH
56364: CALL_OW 275
56368: PUSH
56369: LD_VAR 0 1
56373: PPUSH
56374: LD_INT 3
56376: PPUSH
56377: CALL_OW 275
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: LIST
56386: ST_TO_ADDR
// end ;
56387: LD_VAR 0 2
56391: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
56392: LD_INT 0
56394: PPUSH
56395: PPUSH
// result := array ;
56396: LD_ADDR_VAR 0 3
56400: PUSH
56401: LD_VAR 0 1
56405: ST_TO_ADDR
// if size > 0 then
56406: LD_VAR 0 2
56410: PUSH
56411: LD_INT 0
56413: GREATER
56414: IFFALSE 56460
// for i := array downto size do
56416: LD_ADDR_VAR 0 4
56420: PUSH
56421: DOUBLE
56422: LD_VAR 0 1
56426: INC
56427: ST_TO_ADDR
56428: LD_VAR 0 2
56432: PUSH
56433: FOR_DOWNTO
56434: IFFALSE 56458
// result := Delete ( result , result ) ;
56436: LD_ADDR_VAR 0 3
56440: PUSH
56441: LD_VAR 0 3
56445: PPUSH
56446: LD_VAR 0 3
56450: PPUSH
56451: CALL_OW 3
56455: ST_TO_ADDR
56456: GO 56433
56458: POP
56459: POP
// end ;
56460: LD_VAR 0 3
56464: RET
// export function ComExit ( unit ) ; var tmp ; begin
56465: LD_INT 0
56467: PPUSH
56468: PPUSH
// if not IsInUnit ( unit ) then
56469: LD_VAR 0 1
56473: PPUSH
56474: CALL_OW 310
56478: NOT
56479: IFFALSE 56483
// exit ;
56481: GO 56543
// tmp := IsInUnit ( unit ) ;
56483: LD_ADDR_VAR 0 3
56487: PUSH
56488: LD_VAR 0 1
56492: PPUSH
56493: CALL_OW 310
56497: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
56498: LD_VAR 0 3
56502: PPUSH
56503: CALL_OW 247
56507: PUSH
56508: LD_INT 2
56510: EQUAL
56511: IFFALSE 56524
// ComExitVehicle ( unit ) else
56513: LD_VAR 0 1
56517: PPUSH
56518: CALL_OW 121
56522: GO 56533
// ComExitBuilding ( unit ) ;
56524: LD_VAR 0 1
56528: PPUSH
56529: CALL_OW 122
// result := tmp ;
56533: LD_ADDR_VAR 0 2
56537: PUSH
56538: LD_VAR 0 3
56542: ST_TO_ADDR
// end ;
56543: LD_VAR 0 2
56547: RET
// export function ComExitAll ( units ) ; var i ; begin
56548: LD_INT 0
56550: PPUSH
56551: PPUSH
// if not units then
56552: LD_VAR 0 1
56556: NOT
56557: IFFALSE 56561
// exit ;
56559: GO 56587
// for i in units do
56561: LD_ADDR_VAR 0 3
56565: PUSH
56566: LD_VAR 0 1
56570: PUSH
56571: FOR_IN
56572: IFFALSE 56585
// ComExit ( i ) ;
56574: LD_VAR 0 3
56578: PPUSH
56579: CALL 56465 0 1
56583: GO 56571
56585: POP
56586: POP
// end ;
56587: LD_VAR 0 2
56591: RET
// export function ResetHc ; begin
56592: LD_INT 0
56594: PPUSH
// InitHc ;
56595: CALL_OW 19
// hc_importance := 0 ;
56599: LD_ADDR_OWVAR 32
56603: PUSH
56604: LD_INT 0
56606: ST_TO_ADDR
// end ;
56607: LD_VAR 0 1
56611: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
56612: LD_INT 0
56614: PPUSH
56615: PPUSH
56616: PPUSH
// _x := ( x1 + x2 ) div 2 ;
56617: LD_ADDR_VAR 0 6
56621: PUSH
56622: LD_VAR 0 1
56626: PUSH
56627: LD_VAR 0 3
56631: PLUS
56632: PUSH
56633: LD_INT 2
56635: DIV
56636: ST_TO_ADDR
// if _x < 0 then
56637: LD_VAR 0 6
56641: PUSH
56642: LD_INT 0
56644: LESS
56645: IFFALSE 56662
// _x := _x * - 1 ;
56647: LD_ADDR_VAR 0 6
56651: PUSH
56652: LD_VAR 0 6
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: MUL
56661: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
56662: LD_ADDR_VAR 0 7
56666: PUSH
56667: LD_VAR 0 2
56671: PUSH
56672: LD_VAR 0 4
56676: PLUS
56677: PUSH
56678: LD_INT 2
56680: DIV
56681: ST_TO_ADDR
// if _y < 0 then
56682: LD_VAR 0 7
56686: PUSH
56687: LD_INT 0
56689: LESS
56690: IFFALSE 56707
// _y := _y * - 1 ;
56692: LD_ADDR_VAR 0 7
56696: PUSH
56697: LD_VAR 0 7
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: MUL
56706: ST_TO_ADDR
// result := [ _x , _y ] ;
56707: LD_ADDR_VAR 0 5
56711: PUSH
56712: LD_VAR 0 6
56716: PUSH
56717: LD_VAR 0 7
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: ST_TO_ADDR
// end ;
56726: LD_VAR 0 5
56730: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
56731: LD_INT 0
56733: PPUSH
56734: PPUSH
56735: PPUSH
56736: PPUSH
// task := GetTaskList ( unit ) ;
56737: LD_ADDR_VAR 0 7
56741: PUSH
56742: LD_VAR 0 1
56746: PPUSH
56747: CALL_OW 437
56751: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
56752: LD_VAR 0 7
56756: NOT
56757: PUSH
56758: LD_VAR 0 1
56762: PPUSH
56763: LD_VAR 0 2
56767: PPUSH
56768: CALL_OW 308
56772: NOT
56773: AND
56774: IFFALSE 56778
// exit ;
56776: GO 56896
// if IsInArea ( unit , area ) then
56778: LD_VAR 0 1
56782: PPUSH
56783: LD_VAR 0 2
56787: PPUSH
56788: CALL_OW 308
56792: IFFALSE 56810
// begin ComMoveToArea ( unit , goAway ) ;
56794: LD_VAR 0 1
56798: PPUSH
56799: LD_VAR 0 3
56803: PPUSH
56804: CALL_OW 113
// exit ;
56808: GO 56896
// end ; if task [ 1 ] [ 1 ] <> M then
56810: LD_VAR 0 7
56814: PUSH
56815: LD_INT 1
56817: ARRAY
56818: PUSH
56819: LD_INT 1
56821: ARRAY
56822: PUSH
56823: LD_STRING M
56825: NONEQUAL
56826: IFFALSE 56830
// exit ;
56828: GO 56896
// x := task [ 1 ] [ 2 ] ;
56830: LD_ADDR_VAR 0 5
56834: PUSH
56835: LD_VAR 0 7
56839: PUSH
56840: LD_INT 1
56842: ARRAY
56843: PUSH
56844: LD_INT 2
56846: ARRAY
56847: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
56848: LD_ADDR_VAR 0 6
56852: PUSH
56853: LD_VAR 0 7
56857: PUSH
56858: LD_INT 1
56860: ARRAY
56861: PUSH
56862: LD_INT 3
56864: ARRAY
56865: ST_TO_ADDR
// if InArea ( x , y , area ) then
56866: LD_VAR 0 5
56870: PPUSH
56871: LD_VAR 0 6
56875: PPUSH
56876: LD_VAR 0 2
56880: PPUSH
56881: CALL_OW 309
56885: IFFALSE 56896
// ComStop ( unit ) ;
56887: LD_VAR 0 1
56891: PPUSH
56892: CALL_OW 141
// end ;
56896: LD_VAR 0 4
56900: RET
// export function Abs ( value ) ; begin
56901: LD_INT 0
56903: PPUSH
// result := value ;
56904: LD_ADDR_VAR 0 2
56908: PUSH
56909: LD_VAR 0 1
56913: ST_TO_ADDR
// if value < 0 then
56914: LD_VAR 0 1
56918: PUSH
56919: LD_INT 0
56921: LESS
56922: IFFALSE 56939
// result := value * - 1 ;
56924: LD_ADDR_VAR 0 2
56928: PUSH
56929: LD_VAR 0 1
56933: PUSH
56934: LD_INT 1
56936: NEG
56937: MUL
56938: ST_TO_ADDR
// end ;
56939: LD_VAR 0 2
56943: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
56944: LD_INT 0
56946: PPUSH
56947: PPUSH
56948: PPUSH
56949: PPUSH
56950: PPUSH
56951: PPUSH
56952: PPUSH
56953: PPUSH
// if not unit or not building then
56954: LD_VAR 0 1
56958: NOT
56959: PUSH
56960: LD_VAR 0 2
56964: NOT
56965: OR
56966: IFFALSE 56970
// exit ;
56968: GO 57196
// x := GetX ( building ) ;
56970: LD_ADDR_VAR 0 4
56974: PUSH
56975: LD_VAR 0 2
56979: PPUSH
56980: CALL_OW 250
56984: ST_TO_ADDR
// y := GetY ( building ) ;
56985: LD_ADDR_VAR 0 6
56989: PUSH
56990: LD_VAR 0 2
56994: PPUSH
56995: CALL_OW 251
56999: ST_TO_ADDR
// d := GetDir ( building ) ;
57000: LD_ADDR_VAR 0 8
57004: PUSH
57005: LD_VAR 0 2
57009: PPUSH
57010: CALL_OW 254
57014: ST_TO_ADDR
// r := 4 ;
57015: LD_ADDR_VAR 0 9
57019: PUSH
57020: LD_INT 4
57022: ST_TO_ADDR
// for i := 1 to 5 do
57023: LD_ADDR_VAR 0 10
57027: PUSH
57028: DOUBLE
57029: LD_INT 1
57031: DEC
57032: ST_TO_ADDR
57033: LD_INT 5
57035: PUSH
57036: FOR_TO
57037: IFFALSE 57194
// begin _x := ShiftX ( x , d , r + i ) ;
57039: LD_ADDR_VAR 0 5
57043: PUSH
57044: LD_VAR 0 4
57048: PPUSH
57049: LD_VAR 0 8
57053: PPUSH
57054: LD_VAR 0 9
57058: PUSH
57059: LD_VAR 0 10
57063: PLUS
57064: PPUSH
57065: CALL_OW 272
57069: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
57070: LD_ADDR_VAR 0 7
57074: PUSH
57075: LD_VAR 0 6
57079: PPUSH
57080: LD_VAR 0 8
57084: PPUSH
57085: LD_VAR 0 9
57089: PUSH
57090: LD_VAR 0 10
57094: PLUS
57095: PPUSH
57096: CALL_OW 273
57100: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
57101: LD_VAR 0 5
57105: PPUSH
57106: LD_VAR 0 7
57110: PPUSH
57111: CALL_OW 488
57115: PUSH
57116: LD_VAR 0 5
57120: PPUSH
57121: LD_VAR 0 7
57125: PPUSH
57126: CALL_OW 428
57130: PPUSH
57131: CALL_OW 247
57135: PUSH
57136: LD_INT 3
57138: PUSH
57139: LD_INT 2
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: IN
57146: NOT
57147: AND
57148: IFFALSE 57192
// begin ComMoveXY ( unit , _x , _y ) ;
57150: LD_VAR 0 1
57154: PPUSH
57155: LD_VAR 0 5
57159: PPUSH
57160: LD_VAR 0 7
57164: PPUSH
57165: CALL_OW 111
// result := [ _x , _y ] ;
57169: LD_ADDR_VAR 0 3
57173: PUSH
57174: LD_VAR 0 5
57178: PUSH
57179: LD_VAR 0 7
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: ST_TO_ADDR
// exit ;
57188: POP
57189: POP
57190: GO 57196
// end ; end ;
57192: GO 57036
57194: POP
57195: POP
// end ;
57196: LD_VAR 0 3
57200: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
57201: LD_INT 0
57203: PPUSH
57204: PPUSH
57205: PPUSH
// result := 0 ;
57206: LD_ADDR_VAR 0 3
57210: PUSH
57211: LD_INT 0
57213: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
57214: LD_VAR 0 1
57218: PUSH
57219: LD_INT 0
57221: LESS
57222: PUSH
57223: LD_VAR 0 1
57227: PUSH
57228: LD_INT 8
57230: GREATER
57231: OR
57232: PUSH
57233: LD_VAR 0 2
57237: PUSH
57238: LD_INT 0
57240: LESS
57241: OR
57242: PUSH
57243: LD_VAR 0 2
57247: PUSH
57248: LD_INT 8
57250: GREATER
57251: OR
57252: IFFALSE 57256
// exit ;
57254: GO 57331
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
57256: LD_ADDR_VAR 0 4
57260: PUSH
57261: LD_INT 22
57263: PUSH
57264: LD_VAR 0 2
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PPUSH
57273: CALL_OW 69
57277: PUSH
57278: FOR_IN
57279: IFFALSE 57329
// begin un := UnitShoot ( i ) ;
57281: LD_ADDR_VAR 0 5
57285: PUSH
57286: LD_VAR 0 4
57290: PPUSH
57291: CALL_OW 504
57295: ST_TO_ADDR
// if GetSide ( un ) = side1 then
57296: LD_VAR 0 5
57300: PPUSH
57301: CALL_OW 255
57305: PUSH
57306: LD_VAR 0 1
57310: EQUAL
57311: IFFALSE 57327
// begin result := un ;
57313: LD_ADDR_VAR 0 3
57317: PUSH
57318: LD_VAR 0 5
57322: ST_TO_ADDR
// exit ;
57323: POP
57324: POP
57325: GO 57331
// end ; end ;
57327: GO 57278
57329: POP
57330: POP
// end ;
57331: LD_VAR 0 3
57335: RET
// export function GetCargoBay ( units ) ; begin
57336: LD_INT 0
57338: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
57339: LD_ADDR_VAR 0 2
57343: PUSH
57344: LD_VAR 0 1
57348: PPUSH
57349: LD_INT 2
57351: PUSH
57352: LD_INT 34
57354: PUSH
57355: LD_INT 12
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 34
57364: PUSH
57365: LD_INT 51
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 34
57374: PUSH
57375: LD_INT 32
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 34
57384: PUSH
57385: LD_EXP 71
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: PPUSH
57401: CALL_OW 72
57405: ST_TO_ADDR
// end ;
57406: LD_VAR 0 2
57410: RET
// export function Negate ( value ) ; begin
57411: LD_INT 0
57413: PPUSH
// result := not value ;
57414: LD_ADDR_VAR 0 2
57418: PUSH
57419: LD_VAR 0 1
57423: NOT
57424: ST_TO_ADDR
// end ;
57425: LD_VAR 0 2
57429: RET
// export function Inc ( value ) ; begin
57430: LD_INT 0
57432: PPUSH
// result := value + 1 ;
57433: LD_ADDR_VAR 0 2
57437: PUSH
57438: LD_VAR 0 1
57442: PUSH
57443: LD_INT 1
57445: PLUS
57446: ST_TO_ADDR
// end ;
57447: LD_VAR 0 2
57451: RET
// export function Dec ( value ) ; begin
57452: LD_INT 0
57454: PPUSH
// result := value - 1 ;
57455: LD_ADDR_VAR 0 2
57459: PUSH
57460: LD_VAR 0 1
57464: PUSH
57465: LD_INT 1
57467: MINUS
57468: ST_TO_ADDR
// end ;
57469: LD_VAR 0 2
57473: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
57474: LD_INT 0
57476: PPUSH
57477: PPUSH
57478: PPUSH
57479: PPUSH
57480: PPUSH
57481: PPUSH
57482: PPUSH
57483: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
57484: LD_VAR 0 1
57488: PPUSH
57489: LD_VAR 0 2
57493: PPUSH
57494: CALL_OW 488
57498: NOT
57499: PUSH
57500: LD_VAR 0 3
57504: PPUSH
57505: LD_VAR 0 4
57509: PPUSH
57510: CALL_OW 488
57514: NOT
57515: OR
57516: IFFALSE 57529
// begin result := - 1 ;
57518: LD_ADDR_VAR 0 5
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: ST_TO_ADDR
// exit ;
57527: GO 57764
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
57529: LD_ADDR_VAR 0 12
57533: PUSH
57534: LD_VAR 0 1
57538: PPUSH
57539: LD_VAR 0 2
57543: PPUSH
57544: LD_VAR 0 3
57548: PPUSH
57549: LD_VAR 0 4
57553: PPUSH
57554: CALL 56612 0 4
57558: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
57559: LD_ADDR_VAR 0 11
57563: PUSH
57564: LD_VAR 0 1
57568: PPUSH
57569: LD_VAR 0 2
57573: PPUSH
57574: LD_VAR 0 12
57578: PUSH
57579: LD_INT 1
57581: ARRAY
57582: PPUSH
57583: LD_VAR 0 12
57587: PUSH
57588: LD_INT 2
57590: ARRAY
57591: PPUSH
57592: CALL_OW 298
57596: ST_TO_ADDR
// distance := 9999 ;
57597: LD_ADDR_VAR 0 10
57601: PUSH
57602: LD_INT 9999
57604: ST_TO_ADDR
// for i := 0 to 5 do
57605: LD_ADDR_VAR 0 6
57609: PUSH
57610: DOUBLE
57611: LD_INT 0
57613: DEC
57614: ST_TO_ADDR
57615: LD_INT 5
57617: PUSH
57618: FOR_TO
57619: IFFALSE 57762
// begin _x := ShiftX ( x1 , i , centerDist ) ;
57621: LD_ADDR_VAR 0 7
57625: PUSH
57626: LD_VAR 0 1
57630: PPUSH
57631: LD_VAR 0 6
57635: PPUSH
57636: LD_VAR 0 11
57640: PPUSH
57641: CALL_OW 272
57645: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
57646: LD_ADDR_VAR 0 8
57650: PUSH
57651: LD_VAR 0 2
57655: PPUSH
57656: LD_VAR 0 6
57660: PPUSH
57661: LD_VAR 0 11
57665: PPUSH
57666: CALL_OW 273
57670: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57671: LD_VAR 0 7
57675: PPUSH
57676: LD_VAR 0 8
57680: PPUSH
57681: CALL_OW 488
57685: NOT
57686: IFFALSE 57690
// continue ;
57688: GO 57618
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
57690: LD_ADDR_VAR 0 9
57694: PUSH
57695: LD_VAR 0 12
57699: PUSH
57700: LD_INT 1
57702: ARRAY
57703: PPUSH
57704: LD_VAR 0 12
57708: PUSH
57709: LD_INT 2
57711: ARRAY
57712: PPUSH
57713: LD_VAR 0 7
57717: PPUSH
57718: LD_VAR 0 8
57722: PPUSH
57723: CALL_OW 298
57727: ST_TO_ADDR
// if tmp < distance then
57728: LD_VAR 0 9
57732: PUSH
57733: LD_VAR 0 10
57737: LESS
57738: IFFALSE 57760
// begin result := i ;
57740: LD_ADDR_VAR 0 5
57744: PUSH
57745: LD_VAR 0 6
57749: ST_TO_ADDR
// distance := tmp ;
57750: LD_ADDR_VAR 0 10
57754: PUSH
57755: LD_VAR 0 9
57759: ST_TO_ADDR
// end ; end ;
57760: GO 57618
57762: POP
57763: POP
// end ;
57764: LD_VAR 0 5
57768: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57769: LD_INT 0
57771: PPUSH
57772: PPUSH
// if not driver or not IsInUnit ( driver ) then
57773: LD_VAR 0 1
57777: NOT
57778: PUSH
57779: LD_VAR 0 1
57783: PPUSH
57784: CALL_OW 310
57788: NOT
57789: OR
57790: IFFALSE 57794
// exit ;
57792: GO 57884
// vehicle := IsInUnit ( driver ) ;
57794: LD_ADDR_VAR 0 3
57798: PUSH
57799: LD_VAR 0 1
57803: PPUSH
57804: CALL_OW 310
57808: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57809: LD_VAR 0 1
57813: PPUSH
57814: LD_STRING \
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: LD_INT 0
57822: PUSH
57823: LD_INT 0
57825: PUSH
57826: LD_INT 0
57828: PUSH
57829: LD_INT 0
57831: PUSH
57832: LD_INT 0
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: PUSH
57844: LD_STRING E
57846: PUSH
57847: LD_INT 0
57849: PUSH
57850: LD_INT 0
57852: PUSH
57853: LD_VAR 0 3
57857: PUSH
57858: LD_INT 0
57860: PUSH
57861: LD_INT 0
57863: PUSH
57864: LD_INT 0
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PPUSH
57880: CALL_OW 446
// end ;
57884: LD_VAR 0 2
57888: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57889: LD_INT 0
57891: PPUSH
57892: PPUSH
// if not driver or not IsInUnit ( driver ) then
57893: LD_VAR 0 1
57897: NOT
57898: PUSH
57899: LD_VAR 0 1
57903: PPUSH
57904: CALL_OW 310
57908: NOT
57909: OR
57910: IFFALSE 57914
// exit ;
57912: GO 58004
// vehicle := IsInUnit ( driver ) ;
57914: LD_ADDR_VAR 0 3
57918: PUSH
57919: LD_VAR 0 1
57923: PPUSH
57924: CALL_OW 310
57928: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57929: LD_VAR 0 1
57933: PPUSH
57934: LD_STRING \
57936: PUSH
57937: LD_INT 0
57939: PUSH
57940: LD_INT 0
57942: PUSH
57943: LD_INT 0
57945: PUSH
57946: LD_INT 0
57948: PUSH
57949: LD_INT 0
57951: PUSH
57952: LD_INT 0
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: PUSH
57964: LD_STRING E
57966: PUSH
57967: LD_INT 0
57969: PUSH
57970: LD_INT 0
57972: PUSH
57973: LD_VAR 0 3
57977: PUSH
57978: LD_INT 0
57980: PUSH
57981: LD_INT 0
57983: PUSH
57984: LD_INT 0
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PPUSH
58000: CALL_OW 447
// end ;
58004: LD_VAR 0 2
58008: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
58009: LD_INT 0
58011: PPUSH
58012: PPUSH
58013: PPUSH
// tmp := [ ] ;
58014: LD_ADDR_VAR 0 5
58018: PUSH
58019: EMPTY
58020: ST_TO_ADDR
// for i in units do
58021: LD_ADDR_VAR 0 4
58025: PUSH
58026: LD_VAR 0 1
58030: PUSH
58031: FOR_IN
58032: IFFALSE 58070
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
58034: LD_ADDR_VAR 0 5
58038: PUSH
58039: LD_VAR 0 5
58043: PPUSH
58044: LD_VAR 0 5
58048: PUSH
58049: LD_INT 1
58051: PLUS
58052: PPUSH
58053: LD_VAR 0 4
58057: PPUSH
58058: CALL_OW 256
58062: PPUSH
58063: CALL_OW 2
58067: ST_TO_ADDR
58068: GO 58031
58070: POP
58071: POP
// if not tmp then
58072: LD_VAR 0 5
58076: NOT
58077: IFFALSE 58081
// exit ;
58079: GO 58129
// if asc then
58081: LD_VAR 0 2
58085: IFFALSE 58109
// result := SortListByListAsc ( units , tmp ) else
58087: LD_ADDR_VAR 0 3
58091: PUSH
58092: LD_VAR 0 1
58096: PPUSH
58097: LD_VAR 0 5
58101: PPUSH
58102: CALL_OW 76
58106: ST_TO_ADDR
58107: GO 58129
// result := SortListByListDesc ( units , tmp ) ;
58109: LD_ADDR_VAR 0 3
58113: PUSH
58114: LD_VAR 0 1
58118: PPUSH
58119: LD_VAR 0 5
58123: PPUSH
58124: CALL_OW 77
58128: ST_TO_ADDR
// end ;
58129: LD_VAR 0 3
58133: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
58134: LD_INT 0
58136: PPUSH
58137: PPUSH
// task := GetTaskList ( mech ) ;
58138: LD_ADDR_VAR 0 4
58142: PUSH
58143: LD_VAR 0 1
58147: PPUSH
58148: CALL_OW 437
58152: ST_TO_ADDR
// if not task then
58153: LD_VAR 0 4
58157: NOT
58158: IFFALSE 58162
// exit ;
58160: GO 58204
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
58162: LD_ADDR_VAR 0 3
58166: PUSH
58167: LD_VAR 0 4
58171: PUSH
58172: LD_INT 1
58174: ARRAY
58175: PUSH
58176: LD_INT 1
58178: ARRAY
58179: PUSH
58180: LD_STRING r
58182: EQUAL
58183: PUSH
58184: LD_VAR 0 4
58188: PUSH
58189: LD_INT 1
58191: ARRAY
58192: PUSH
58193: LD_INT 4
58195: ARRAY
58196: PUSH
58197: LD_VAR 0 2
58201: EQUAL
58202: AND
58203: ST_TO_ADDR
// end ;
58204: LD_VAR 0 3
58208: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
58209: LD_INT 0
58211: PPUSH
// SetDir ( unit , d ) ;
58212: LD_VAR 0 1
58216: PPUSH
58217: LD_VAR 0 4
58221: PPUSH
58222: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
58226: LD_VAR 0 1
58230: PPUSH
58231: LD_VAR 0 2
58235: PPUSH
58236: LD_VAR 0 3
58240: PPUSH
58241: LD_VAR 0 5
58245: PPUSH
58246: CALL_OW 48
// end ;
58250: LD_VAR 0 6
58254: RET
// export function ToNaturalNumber ( number ) ; begin
58255: LD_INT 0
58257: PPUSH
// result := number div 1 ;
58258: LD_ADDR_VAR 0 2
58262: PUSH
58263: LD_VAR 0 1
58267: PUSH
58268: LD_INT 1
58270: DIV
58271: ST_TO_ADDR
// if number < 0 then
58272: LD_VAR 0 1
58276: PUSH
58277: LD_INT 0
58279: LESS
58280: IFFALSE 58290
// result := 0 ;
58282: LD_ADDR_VAR 0 2
58286: PUSH
58287: LD_INT 0
58289: ST_TO_ADDR
// end ;
58290: LD_VAR 0 2
58294: RET
// export function SortByClass ( units , class ) ; var un ; begin
58295: LD_INT 0
58297: PPUSH
58298: PPUSH
// if not units or not class then
58299: LD_VAR 0 1
58303: NOT
58304: PUSH
58305: LD_VAR 0 2
58309: NOT
58310: OR
58311: IFFALSE 58315
// exit ;
58313: GO 58410
// result := [ ] ;
58315: LD_ADDR_VAR 0 3
58319: PUSH
58320: EMPTY
58321: ST_TO_ADDR
// for un in units do
58322: LD_ADDR_VAR 0 4
58326: PUSH
58327: LD_VAR 0 1
58331: PUSH
58332: FOR_IN
58333: IFFALSE 58408
// if GetClass ( un ) = class then
58335: LD_VAR 0 4
58339: PPUSH
58340: CALL_OW 257
58344: PUSH
58345: LD_VAR 0 2
58349: EQUAL
58350: IFFALSE 58377
// result := Insert ( result , 1 , un ) else
58352: LD_ADDR_VAR 0 3
58356: PUSH
58357: LD_VAR 0 3
58361: PPUSH
58362: LD_INT 1
58364: PPUSH
58365: LD_VAR 0 4
58369: PPUSH
58370: CALL_OW 2
58374: ST_TO_ADDR
58375: GO 58406
// result := Replace ( result , result + 1 , un ) ;
58377: LD_ADDR_VAR 0 3
58381: PUSH
58382: LD_VAR 0 3
58386: PPUSH
58387: LD_VAR 0 3
58391: PUSH
58392: LD_INT 1
58394: PLUS
58395: PPUSH
58396: LD_VAR 0 4
58400: PPUSH
58401: CALL_OW 1
58405: ST_TO_ADDR
58406: GO 58332
58408: POP
58409: POP
// end ;
58410: LD_VAR 0 3
58414: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
58415: LD_INT 0
58417: PPUSH
58418: PPUSH
58419: PPUSH
58420: PPUSH
58421: PPUSH
58422: PPUSH
58423: PPUSH
// result := [ ] ;
58424: LD_ADDR_VAR 0 4
58428: PUSH
58429: EMPTY
58430: ST_TO_ADDR
// if x - r < 0 then
58431: LD_VAR 0 1
58435: PUSH
58436: LD_VAR 0 3
58440: MINUS
58441: PUSH
58442: LD_INT 0
58444: LESS
58445: IFFALSE 58457
// min_x := 0 else
58447: LD_ADDR_VAR 0 8
58451: PUSH
58452: LD_INT 0
58454: ST_TO_ADDR
58455: GO 58473
// min_x := x - r ;
58457: LD_ADDR_VAR 0 8
58461: PUSH
58462: LD_VAR 0 1
58466: PUSH
58467: LD_VAR 0 3
58471: MINUS
58472: ST_TO_ADDR
// if y - r < 0 then
58473: LD_VAR 0 2
58477: PUSH
58478: LD_VAR 0 3
58482: MINUS
58483: PUSH
58484: LD_INT 0
58486: LESS
58487: IFFALSE 58499
// min_y := 0 else
58489: LD_ADDR_VAR 0 7
58493: PUSH
58494: LD_INT 0
58496: ST_TO_ADDR
58497: GO 58515
// min_y := y - r ;
58499: LD_ADDR_VAR 0 7
58503: PUSH
58504: LD_VAR 0 2
58508: PUSH
58509: LD_VAR 0 3
58513: MINUS
58514: ST_TO_ADDR
// max_x := x + r ;
58515: LD_ADDR_VAR 0 9
58519: PUSH
58520: LD_VAR 0 1
58524: PUSH
58525: LD_VAR 0 3
58529: PLUS
58530: ST_TO_ADDR
// max_y := y + r ;
58531: LD_ADDR_VAR 0 10
58535: PUSH
58536: LD_VAR 0 2
58540: PUSH
58541: LD_VAR 0 3
58545: PLUS
58546: ST_TO_ADDR
// for _x = min_x to max_x do
58547: LD_ADDR_VAR 0 5
58551: PUSH
58552: DOUBLE
58553: LD_VAR 0 8
58557: DEC
58558: ST_TO_ADDR
58559: LD_VAR 0 9
58563: PUSH
58564: FOR_TO
58565: IFFALSE 58666
// for _y = min_y to max_y do
58567: LD_ADDR_VAR 0 6
58571: PUSH
58572: DOUBLE
58573: LD_VAR 0 7
58577: DEC
58578: ST_TO_ADDR
58579: LD_VAR 0 10
58583: PUSH
58584: FOR_TO
58585: IFFALSE 58662
// begin if not ValidHex ( _x , _y ) then
58587: LD_VAR 0 5
58591: PPUSH
58592: LD_VAR 0 6
58596: PPUSH
58597: CALL_OW 488
58601: NOT
58602: IFFALSE 58606
// continue ;
58604: GO 58584
// if GetResourceTypeXY ( _x , _y ) then
58606: LD_VAR 0 5
58610: PPUSH
58611: LD_VAR 0 6
58615: PPUSH
58616: CALL_OW 283
58620: IFFALSE 58660
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
58622: LD_ADDR_VAR 0 4
58626: PUSH
58627: LD_VAR 0 4
58631: PPUSH
58632: LD_VAR 0 4
58636: PUSH
58637: LD_INT 1
58639: PLUS
58640: PPUSH
58641: LD_VAR 0 5
58645: PUSH
58646: LD_VAR 0 6
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PPUSH
58655: CALL_OW 1
58659: ST_TO_ADDR
// end ;
58660: GO 58584
58662: POP
58663: POP
58664: GO 58564
58666: POP
58667: POP
// end ;
58668: LD_VAR 0 4
58672: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
58673: LD_INT 0
58675: PPUSH
58676: PPUSH
58677: PPUSH
58678: PPUSH
58679: PPUSH
58680: PPUSH
58681: PPUSH
58682: PPUSH
// if not units then
58683: LD_VAR 0 1
58687: NOT
58688: IFFALSE 58692
// exit ;
58690: GO 59203
// result := UnitFilter ( units , [ f_ok ] ) ;
58692: LD_ADDR_VAR 0 3
58696: PUSH
58697: LD_VAR 0 1
58701: PPUSH
58702: LD_INT 50
58704: PUSH
58705: EMPTY
58706: LIST
58707: PPUSH
58708: CALL_OW 72
58712: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
58713: LD_ADDR_VAR 0 8
58717: PUSH
58718: LD_VAR 0 1
58722: PUSH
58723: LD_INT 1
58725: ARRAY
58726: PPUSH
58727: CALL_OW 255
58731: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
58732: LD_ADDR_VAR 0 10
58736: PUSH
58737: LD_INT 29
58739: PUSH
58740: LD_EXP 74
58744: PUSH
58745: LD_INT 49
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: LIST
58752: ST_TO_ADDR
// if not result then
58753: LD_VAR 0 3
58757: NOT
58758: IFFALSE 58762
// exit ;
58760: GO 59203
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
58762: LD_ADDR_VAR 0 5
58766: PUSH
58767: LD_INT 81
58769: PUSH
58770: LD_VAR 0 8
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PPUSH
58779: CALL_OW 69
58783: ST_TO_ADDR
// for i in result do
58784: LD_ADDR_VAR 0 4
58788: PUSH
58789: LD_VAR 0 3
58793: PUSH
58794: FOR_IN
58795: IFFALSE 59201
// begin tag := GetTag ( i ) + 1 ;
58797: LD_ADDR_VAR 0 9
58801: PUSH
58802: LD_VAR 0 4
58806: PPUSH
58807: CALL_OW 110
58811: PUSH
58812: LD_INT 1
58814: PLUS
58815: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
58816: LD_ADDR_VAR 0 7
58820: PUSH
58821: LD_VAR 0 4
58825: PPUSH
58826: CALL_OW 250
58830: PPUSH
58831: LD_VAR 0 4
58835: PPUSH
58836: CALL_OW 251
58840: PPUSH
58841: LD_INT 6
58843: PPUSH
58844: CALL 58415 0 3
58848: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
58849: LD_VAR 0 7
58853: PUSH
58854: LD_VAR 0 4
58858: PPUSH
58859: CALL_OW 264
58863: PUSH
58864: LD_VAR 0 10
58868: IN
58869: NOT
58870: AND
58871: IFFALSE 58910
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
58873: LD_VAR 0 4
58877: PPUSH
58878: LD_VAR 0 7
58882: PUSH
58883: LD_INT 1
58885: ARRAY
58886: PUSH
58887: LD_INT 1
58889: ARRAY
58890: PPUSH
58891: LD_VAR 0 7
58895: PUSH
58896: LD_INT 1
58898: ARRAY
58899: PUSH
58900: LD_INT 2
58902: ARRAY
58903: PPUSH
58904: CALL_OW 116
58908: GO 59199
// if path > tag then
58910: LD_VAR 0 2
58914: PUSH
58915: LD_VAR 0 9
58919: GREATER
58920: IFFALSE 59128
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
58922: LD_ADDR_VAR 0 6
58926: PUSH
58927: LD_VAR 0 5
58931: PPUSH
58932: LD_INT 91
58934: PUSH
58935: LD_VAR 0 4
58939: PUSH
58940: LD_INT 12
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: LIST
58947: PPUSH
58948: CALL_OW 72
58952: ST_TO_ADDR
// if nearEnemy then
58953: LD_VAR 0 6
58957: IFFALSE 59026
// begin if GetWeapon ( i ) = ru_time_lapser then
58959: LD_VAR 0 4
58963: PPUSH
58964: CALL_OW 264
58968: PUSH
58969: LD_INT 49
58971: EQUAL
58972: IFFALSE 59000
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
58974: LD_VAR 0 4
58978: PPUSH
58979: LD_VAR 0 6
58983: PPUSH
58984: LD_VAR 0 4
58988: PPUSH
58989: CALL_OW 74
58993: PPUSH
58994: CALL_OW 112
58998: GO 59024
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
59000: LD_VAR 0 4
59004: PPUSH
59005: LD_VAR 0 6
59009: PPUSH
59010: LD_VAR 0 4
59014: PPUSH
59015: CALL_OW 74
59019: PPUSH
59020: CALL_OW 115
// end else
59024: GO 59126
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
59026: LD_VAR 0 4
59030: PPUSH
59031: LD_VAR 0 2
59035: PUSH
59036: LD_VAR 0 9
59040: ARRAY
59041: PUSH
59042: LD_INT 1
59044: ARRAY
59045: PPUSH
59046: LD_VAR 0 2
59050: PUSH
59051: LD_VAR 0 9
59055: ARRAY
59056: PUSH
59057: LD_INT 2
59059: ARRAY
59060: PPUSH
59061: CALL_OW 297
59065: PUSH
59066: LD_INT 6
59068: GREATER
59069: IFFALSE 59112
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
59071: LD_VAR 0 4
59075: PPUSH
59076: LD_VAR 0 2
59080: PUSH
59081: LD_VAR 0 9
59085: ARRAY
59086: PUSH
59087: LD_INT 1
59089: ARRAY
59090: PPUSH
59091: LD_VAR 0 2
59095: PUSH
59096: LD_VAR 0 9
59100: ARRAY
59101: PUSH
59102: LD_INT 2
59104: ARRAY
59105: PPUSH
59106: CALL_OW 114
59110: GO 59126
// SetTag ( i , tag ) ;
59112: LD_VAR 0 4
59116: PPUSH
59117: LD_VAR 0 9
59121: PPUSH
59122: CALL_OW 109
// end else
59126: GO 59199
// if enemy then
59128: LD_VAR 0 5
59132: IFFALSE 59199
// begin if GetWeapon ( i ) = ru_time_lapser then
59134: LD_VAR 0 4
59138: PPUSH
59139: CALL_OW 264
59143: PUSH
59144: LD_INT 49
59146: EQUAL
59147: IFFALSE 59175
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
59149: LD_VAR 0 4
59153: PPUSH
59154: LD_VAR 0 5
59158: PPUSH
59159: LD_VAR 0 4
59163: PPUSH
59164: CALL_OW 74
59168: PPUSH
59169: CALL_OW 112
59173: GO 59199
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
59175: LD_VAR 0 4
59179: PPUSH
59180: LD_VAR 0 5
59184: PPUSH
59185: LD_VAR 0 4
59189: PPUSH
59190: CALL_OW 74
59194: PPUSH
59195: CALL_OW 115
// end ; end ;
59199: GO 58794
59201: POP
59202: POP
// end ;
59203: LD_VAR 0 3
59207: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
59208: LD_INT 0
59210: PPUSH
59211: PPUSH
59212: PPUSH
// if not unit or IsInUnit ( unit ) then
59213: LD_VAR 0 1
59217: NOT
59218: PUSH
59219: LD_VAR 0 1
59223: PPUSH
59224: CALL_OW 310
59228: OR
59229: IFFALSE 59233
// exit ;
59231: GO 59324
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
59233: LD_ADDR_VAR 0 4
59237: PUSH
59238: LD_VAR 0 1
59242: PPUSH
59243: CALL_OW 250
59247: PPUSH
59248: LD_VAR 0 2
59252: PPUSH
59253: LD_INT 1
59255: PPUSH
59256: CALL_OW 272
59260: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
59261: LD_ADDR_VAR 0 5
59265: PUSH
59266: LD_VAR 0 1
59270: PPUSH
59271: CALL_OW 251
59275: PPUSH
59276: LD_VAR 0 2
59280: PPUSH
59281: LD_INT 1
59283: PPUSH
59284: CALL_OW 273
59288: ST_TO_ADDR
// if ValidHex ( x , y ) then
59289: LD_VAR 0 4
59293: PPUSH
59294: LD_VAR 0 5
59298: PPUSH
59299: CALL_OW 488
59303: IFFALSE 59324
// ComTurnXY ( unit , x , y ) ;
59305: LD_VAR 0 1
59309: PPUSH
59310: LD_VAR 0 4
59314: PPUSH
59315: LD_VAR 0 5
59319: PPUSH
59320: CALL_OW 118
// end ;
59324: LD_VAR 0 3
59328: RET
// export function SeeUnits ( side , units ) ; var i ; begin
59329: LD_INT 0
59331: PPUSH
59332: PPUSH
// result := false ;
59333: LD_ADDR_VAR 0 3
59337: PUSH
59338: LD_INT 0
59340: ST_TO_ADDR
// if not units then
59341: LD_VAR 0 2
59345: NOT
59346: IFFALSE 59350
// exit ;
59348: GO 59395
// for i in units do
59350: LD_ADDR_VAR 0 4
59354: PUSH
59355: LD_VAR 0 2
59359: PUSH
59360: FOR_IN
59361: IFFALSE 59393
// if See ( side , i ) then
59363: LD_VAR 0 1
59367: PPUSH
59368: LD_VAR 0 4
59372: PPUSH
59373: CALL_OW 292
59377: IFFALSE 59391
// begin result := true ;
59379: LD_ADDR_VAR 0 3
59383: PUSH
59384: LD_INT 1
59386: ST_TO_ADDR
// exit ;
59387: POP
59388: POP
59389: GO 59395
// end ;
59391: GO 59360
59393: POP
59394: POP
// end ;
59395: LD_VAR 0 3
59399: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
59400: LD_INT 0
59402: PPUSH
59403: PPUSH
59404: PPUSH
59405: PPUSH
// if not unit or not points then
59406: LD_VAR 0 1
59410: NOT
59411: PUSH
59412: LD_VAR 0 2
59416: NOT
59417: OR
59418: IFFALSE 59422
// exit ;
59420: GO 59512
// dist := 99999 ;
59422: LD_ADDR_VAR 0 5
59426: PUSH
59427: LD_INT 99999
59429: ST_TO_ADDR
// for i in points do
59430: LD_ADDR_VAR 0 4
59434: PUSH
59435: LD_VAR 0 2
59439: PUSH
59440: FOR_IN
59441: IFFALSE 59510
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
59443: LD_ADDR_VAR 0 6
59447: PUSH
59448: LD_VAR 0 1
59452: PPUSH
59453: LD_VAR 0 4
59457: PUSH
59458: LD_INT 1
59460: ARRAY
59461: PPUSH
59462: LD_VAR 0 4
59466: PUSH
59467: LD_INT 2
59469: ARRAY
59470: PPUSH
59471: CALL_OW 297
59475: ST_TO_ADDR
// if tmpDist < dist then
59476: LD_VAR 0 6
59480: PUSH
59481: LD_VAR 0 5
59485: LESS
59486: IFFALSE 59508
// begin result := i ;
59488: LD_ADDR_VAR 0 3
59492: PUSH
59493: LD_VAR 0 4
59497: ST_TO_ADDR
// dist := tmpDist ;
59498: LD_ADDR_VAR 0 5
59502: PUSH
59503: LD_VAR 0 6
59507: ST_TO_ADDR
// end ; end ;
59508: GO 59440
59510: POP
59511: POP
// end ;
59512: LD_VAR 0 3
59516: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
59517: LD_INT 0
59519: PPUSH
// uc_side := side ;
59520: LD_ADDR_OWVAR 20
59524: PUSH
59525: LD_VAR 0 1
59529: ST_TO_ADDR
// uc_nation := 3 ;
59530: LD_ADDR_OWVAR 21
59534: PUSH
59535: LD_INT 3
59537: ST_TO_ADDR
// vc_chassis := 25 ;
59538: LD_ADDR_OWVAR 37
59542: PUSH
59543: LD_INT 25
59545: ST_TO_ADDR
// vc_engine := engine_siberite ;
59546: LD_ADDR_OWVAR 39
59550: PUSH
59551: LD_INT 3
59553: ST_TO_ADDR
// vc_control := control_computer ;
59554: LD_ADDR_OWVAR 38
59558: PUSH
59559: LD_INT 3
59561: ST_TO_ADDR
// vc_weapon := 59 ;
59562: LD_ADDR_OWVAR 40
59566: PUSH
59567: LD_INT 59
59569: ST_TO_ADDR
// result := CreateVehicle ;
59570: LD_ADDR_VAR 0 5
59574: PUSH
59575: CALL_OW 45
59579: ST_TO_ADDR
// SetDir ( result , d ) ;
59580: LD_VAR 0 5
59584: PPUSH
59585: LD_VAR 0 4
59589: PPUSH
59590: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
59594: LD_VAR 0 5
59598: PPUSH
59599: LD_VAR 0 2
59603: PPUSH
59604: LD_VAR 0 3
59608: PPUSH
59609: LD_INT 0
59611: PPUSH
59612: CALL_OW 48
// end ;
59616: LD_VAR 0 5
59620: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
59621: LD_INT 0
59623: PPUSH
59624: PPUSH
59625: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
59626: LD_ADDR_VAR 0 2
59630: PUSH
59631: LD_INT 0
59633: PUSH
59634: LD_INT 0
59636: PUSH
59637: LD_INT 0
59639: PUSH
59640: LD_INT 0
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
59649: LD_VAR 0 1
59653: NOT
59654: PUSH
59655: LD_VAR 0 1
59659: PPUSH
59660: CALL_OW 264
59664: PUSH
59665: LD_INT 12
59667: PUSH
59668: LD_INT 51
59670: PUSH
59671: LD_INT 32
59673: PUSH
59674: LD_EXP 71
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: IN
59685: NOT
59686: OR
59687: IFFALSE 59691
// exit ;
59689: GO 59789
// for i := 1 to 3 do
59691: LD_ADDR_VAR 0 3
59695: PUSH
59696: DOUBLE
59697: LD_INT 1
59699: DEC
59700: ST_TO_ADDR
59701: LD_INT 3
59703: PUSH
59704: FOR_TO
59705: IFFALSE 59787
// begin tmp := GetCargo ( cargo , i ) ;
59707: LD_ADDR_VAR 0 4
59711: PUSH
59712: LD_VAR 0 1
59716: PPUSH
59717: LD_VAR 0 3
59721: PPUSH
59722: CALL_OW 289
59726: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
59727: LD_ADDR_VAR 0 2
59731: PUSH
59732: LD_VAR 0 2
59736: PPUSH
59737: LD_VAR 0 3
59741: PPUSH
59742: LD_VAR 0 4
59746: PPUSH
59747: CALL_OW 1
59751: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
59752: LD_ADDR_VAR 0 2
59756: PUSH
59757: LD_VAR 0 2
59761: PPUSH
59762: LD_INT 4
59764: PPUSH
59765: LD_VAR 0 2
59769: PUSH
59770: LD_INT 4
59772: ARRAY
59773: PUSH
59774: LD_VAR 0 4
59778: PLUS
59779: PPUSH
59780: CALL_OW 1
59784: ST_TO_ADDR
// end ;
59785: GO 59704
59787: POP
59788: POP
// end ;
59789: LD_VAR 0 2
59793: RET
