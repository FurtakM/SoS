// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
   0: LD_VAR 0 1
   4: PPUSH
   5: LD_VAR 0 2
   9: PPUSH
  10: CALL 14473 0 2
// end ; end_of_file
  14: PPOPN 2
  16: END
// every 0 0$1 do
  17: GO 19
  19: DISABLE
// begin enable ;
  20: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
  21: LD_STRING updateTimer(
  23: PUSH
  24: LD_OWVAR 1
  28: STR
  29: PUSH
  30: LD_STRING );
  32: STR
  33: PPUSH
  34: CALL_OW 559
// end ;
  38: END
// export function SOS_MapStart ( ) ; begin
  39: LD_INT 0
  41: PPUSH
// if streamModeActive then
  42: LD_EXP 1
  46: IFFALSE 55
// DefineStreamItems ( true ) ;
  48: LD_INT 1
  50: PPUSH
  51: CALL 1705 0 1
// UpdateFactoryWaypoints ( ) ;
  55: CALL 15289 0 0
// end ;
  59: LD_VAR 0 1
  63: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
  64: LD_INT 0
  66: PPUSH
// if p2 = 100 then
  67: LD_VAR 0 2
  71: PUSH
  72: LD_INT 100
  74: EQUAL
  75: IFFALSE 1078
// begin if not StreamModeActive then
  77: LD_EXP 1
  81: NOT
  82: IFFALSE 92
// StreamModeActive := true ;
  84: LD_ADDR_EXP 1
  88: PUSH
  89: LD_INT 1
  91: ST_TO_ADDR
// if p3 = 0 then
  92: LD_VAR 0 3
  96: PUSH
  97: LD_INT 0
  99: EQUAL
 100: IFFALSE 106
// InitStreamMode ;
 102: CALL 1241 0 0
// if p3 = 1 then
 106: LD_VAR 0 3
 110: PUSH
 111: LD_INT 1
 113: EQUAL
 114: IFFALSE 124
// sRocket := true ;
 116: LD_ADDR_EXP 6
 120: PUSH
 121: LD_INT 1
 123: ST_TO_ADDR
// if p3 = 2 then
 124: LD_VAR 0 3
 128: PUSH
 129: LD_INT 2
 131: EQUAL
 132: IFFALSE 142
// sSpeed := true ;
 134: LD_ADDR_EXP 5
 138: PUSH
 139: LD_INT 1
 141: ST_TO_ADDR
// if p3 = 3 then
 142: LD_VAR 0 3
 146: PUSH
 147: LD_INT 3
 149: EQUAL
 150: IFFALSE 160
// sEngine := true ;
 152: LD_ADDR_EXP 7
 156: PUSH
 157: LD_INT 1
 159: ST_TO_ADDR
// if p3 = 4 then
 160: LD_VAR 0 3
 164: PUSH
 165: LD_INT 4
 167: EQUAL
 168: IFFALSE 178
// sSpec := true ;
 170: LD_ADDR_EXP 4
 174: PUSH
 175: LD_INT 1
 177: ST_TO_ADDR
// if p3 = 5 then
 178: LD_VAR 0 3
 182: PUSH
 183: LD_INT 5
 185: EQUAL
 186: IFFALSE 196
// sLevel := true ;
 188: LD_ADDR_EXP 8
 192: PUSH
 193: LD_INT 1
 195: ST_TO_ADDR
// if p3 = 6 then
 196: LD_VAR 0 3
 200: PUSH
 201: LD_INT 6
 203: EQUAL
 204: IFFALSE 214
// sArmoury := true ;
 206: LD_ADDR_EXP 9
 210: PUSH
 211: LD_INT 1
 213: ST_TO_ADDR
// if p3 = 7 then
 214: LD_VAR 0 3
 218: PUSH
 219: LD_INT 7
 221: EQUAL
 222: IFFALSE 232
// sRadar := true ;
 224: LD_ADDR_EXP 10
 228: PUSH
 229: LD_INT 1
 231: ST_TO_ADDR
// if p3 = 8 then
 232: LD_VAR 0 3
 236: PUSH
 237: LD_INT 8
 239: EQUAL
 240: IFFALSE 250
// sBunker := true ;
 242: LD_ADDR_EXP 11
 246: PUSH
 247: LD_INT 1
 249: ST_TO_ADDR
// if p3 = 9 then
 250: LD_VAR 0 3
 254: PUSH
 255: LD_INT 9
 257: EQUAL
 258: IFFALSE 268
// sHack := true ;
 260: LD_ADDR_EXP 12
 264: PUSH
 265: LD_INT 1
 267: ST_TO_ADDR
// if p3 = 10 then
 268: LD_VAR 0 3
 272: PUSH
 273: LD_INT 10
 275: EQUAL
 276: IFFALSE 286
// sFire := true ;
 278: LD_ADDR_EXP 13
 282: PUSH
 283: LD_INT 1
 285: ST_TO_ADDR
// if p3 = 11 then
 286: LD_VAR 0 3
 290: PUSH
 291: LD_INT 11
 293: EQUAL
 294: IFFALSE 304
// sRefresh := true ;
 296: LD_ADDR_EXP 14
 300: PUSH
 301: LD_INT 1
 303: ST_TO_ADDR
// if p3 = 12 then
 304: LD_VAR 0 3
 308: PUSH
 309: LD_INT 12
 311: EQUAL
 312: IFFALSE 322
// sExp := true ;
 314: LD_ADDR_EXP 15
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// if p3 = 13 then
 322: LD_VAR 0 3
 326: PUSH
 327: LD_INT 13
 329: EQUAL
 330: IFFALSE 340
// sDepot := true ;
 332: LD_ADDR_EXP 16
 336: PUSH
 337: LD_INT 1
 339: ST_TO_ADDR
// if p3 = 14 then
 340: LD_VAR 0 3
 344: PUSH
 345: LD_INT 14
 347: EQUAL
 348: IFFALSE 358
// sFlag := true ;
 350: LD_ADDR_EXP 17
 354: PUSH
 355: LD_INT 1
 357: ST_TO_ADDR
// if p3 = 15 then
 358: LD_VAR 0 3
 362: PUSH
 363: LD_INT 15
 365: EQUAL
 366: IFFALSE 376
// sKamikadze := true ;
 368: LD_ADDR_EXP 25
 372: PUSH
 373: LD_INT 1
 375: ST_TO_ADDR
// if p3 = 16 then
 376: LD_VAR 0 3
 380: PUSH
 381: LD_INT 16
 383: EQUAL
 384: IFFALSE 394
// sTroll := true ;
 386: LD_ADDR_EXP 26
 390: PUSH
 391: LD_INT 1
 393: ST_TO_ADDR
// if p3 = 17 then
 394: LD_VAR 0 3
 398: PUSH
 399: LD_INT 17
 401: EQUAL
 402: IFFALSE 412
// sSlow := true ;
 404: LD_ADDR_EXP 27
 408: PUSH
 409: LD_INT 1
 411: ST_TO_ADDR
// if p3 = 18 then
 412: LD_VAR 0 3
 416: PUSH
 417: LD_INT 18
 419: EQUAL
 420: IFFALSE 430
// sLack := true ;
 422: LD_ADDR_EXP 28
 426: PUSH
 427: LD_INT 1
 429: ST_TO_ADDR
// if p3 = 19 then
 430: LD_VAR 0 3
 434: PUSH
 435: LD_INT 19
 437: EQUAL
 438: IFFALSE 448
// sTank := true ;
 440: LD_ADDR_EXP 30
 444: PUSH
 445: LD_INT 1
 447: ST_TO_ADDR
// if p3 = 20 then
 448: LD_VAR 0 3
 452: PUSH
 453: LD_INT 20
 455: EQUAL
 456: IFFALSE 466
// sRemote := true ;
 458: LD_ADDR_EXP 31
 462: PUSH
 463: LD_INT 1
 465: ST_TO_ADDR
// if p3 = 21 then
 466: LD_VAR 0 3
 470: PUSH
 471: LD_INT 21
 473: EQUAL
 474: IFFALSE 484
// sPowell := true ;
 476: LD_ADDR_EXP 32
 480: PUSH
 481: LD_INT 1
 483: ST_TO_ADDR
// if p3 = 22 then
 484: LD_VAR 0 3
 488: PUSH
 489: LD_INT 22
 491: EQUAL
 492: IFFALSE 502
// sTeleport := true ;
 494: LD_ADDR_EXP 35
 498: PUSH
 499: LD_INT 1
 501: ST_TO_ADDR
// if p3 = 23 then
 502: LD_VAR 0 3
 506: PUSH
 507: LD_INT 23
 509: EQUAL
 510: IFFALSE 520
// sOilTower := true ;
 512: LD_ADDR_EXP 37
 516: PUSH
 517: LD_INT 1
 519: ST_TO_ADDR
// if p3 = 24 then
 520: LD_VAR 0 3
 524: PUSH
 525: LD_INT 24
 527: EQUAL
 528: IFFALSE 538
// sShovel := true ;
 530: LD_ADDR_EXP 38
 534: PUSH
 535: LD_INT 1
 537: ST_TO_ADDR
// if p3 = 25 then
 538: LD_VAR 0 3
 542: PUSH
 543: LD_INT 25
 545: EQUAL
 546: IFFALSE 556
// sSheik := true ;
 548: LD_ADDR_EXP 39
 552: PUSH
 553: LD_INT 1
 555: ST_TO_ADDR
// if p3 = 26 then
 556: LD_VAR 0 3
 560: PUSH
 561: LD_INT 26
 563: EQUAL
 564: IFFALSE 574
// sEarthquake := true ;
 566: LD_ADDR_EXP 41
 570: PUSH
 571: LD_INT 1
 573: ST_TO_ADDR
// if p3 = 27 then
 574: LD_VAR 0 3
 578: PUSH
 579: LD_INT 27
 581: EQUAL
 582: IFFALSE 592
// sAI := true ;
 584: LD_ADDR_EXP 42
 588: PUSH
 589: LD_INT 1
 591: ST_TO_ADDR
// if p3 = 28 then
 592: LD_VAR 0 3
 596: PUSH
 597: LD_INT 28
 599: EQUAL
 600: IFFALSE 610
// sCargo := true ;
 602: LD_ADDR_EXP 45
 606: PUSH
 607: LD_INT 1
 609: ST_TO_ADDR
// if p3 = 29 then
 610: LD_VAR 0 3
 614: PUSH
 615: LD_INT 29
 617: EQUAL
 618: IFFALSE 628
// sDLaser := true ;
 620: LD_ADDR_EXP 46
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// if p3 = 30 then
 628: LD_VAR 0 3
 632: PUSH
 633: LD_INT 30
 635: EQUAL
 636: IFFALSE 646
// sExchange := true ;
 638: LD_ADDR_EXP 47
 642: PUSH
 643: LD_INT 1
 645: ST_TO_ADDR
// if p3 = 31 then
 646: LD_VAR 0 3
 650: PUSH
 651: LD_INT 31
 653: EQUAL
 654: IFFALSE 664
// sFac := true ;
 656: LD_ADDR_EXP 48
 660: PUSH
 661: LD_INT 1
 663: ST_TO_ADDR
// if p3 = 32 then
 664: LD_VAR 0 3
 668: PUSH
 669: LD_INT 32
 671: EQUAL
 672: IFFALSE 682
// sPower := true ;
 674: LD_ADDR_EXP 49
 678: PUSH
 679: LD_INT 1
 681: ST_TO_ADDR
// if p3 = 33 then
 682: LD_VAR 0 3
 686: PUSH
 687: LD_INT 33
 689: EQUAL
 690: IFFALSE 700
// sRandom := true ;
 692: LD_ADDR_EXP 50
 696: PUSH
 697: LD_INT 1
 699: ST_TO_ADDR
// if p3 = 34 then
 700: LD_VAR 0 3
 704: PUSH
 705: LD_INT 34
 707: EQUAL
 708: IFFALSE 718
// sShield := true ;
 710: LD_ADDR_EXP 51
 714: PUSH
 715: LD_INT 1
 717: ST_TO_ADDR
// if p3 = 35 then
 718: LD_VAR 0 3
 722: PUSH
 723: LD_INT 35
 725: EQUAL
 726: IFFALSE 736
// sTime := true ;
 728: LD_ADDR_EXP 52
 732: PUSH
 733: LD_INT 1
 735: ST_TO_ADDR
// if p3 = 36 then
 736: LD_VAR 0 3
 740: PUSH
 741: LD_INT 36
 743: EQUAL
 744: IFFALSE 754
// sTools := true ;
 746: LD_ADDR_EXP 53
 750: PUSH
 751: LD_INT 1
 753: ST_TO_ADDR
// if p3 = 101 then
 754: LD_VAR 0 3
 758: PUSH
 759: LD_INT 101
 761: EQUAL
 762: IFFALSE 772
// sSold := true ;
 764: LD_ADDR_EXP 18
 768: PUSH
 769: LD_INT 1
 771: ST_TO_ADDR
// if p3 = 102 then
 772: LD_VAR 0 3
 776: PUSH
 777: LD_INT 102
 779: EQUAL
 780: IFFALSE 790
// sDiff := true ;
 782: LD_ADDR_EXP 19
 786: PUSH
 787: LD_INT 1
 789: ST_TO_ADDR
// if p3 = 103 then
 790: LD_VAR 0 3
 794: PUSH
 795: LD_INT 103
 797: EQUAL
 798: IFFALSE 808
// sFog := true ;
 800: LD_ADDR_EXP 22
 804: PUSH
 805: LD_INT 1
 807: ST_TO_ADDR
// if p3 = 104 then
 808: LD_VAR 0 3
 812: PUSH
 813: LD_INT 104
 815: EQUAL
 816: IFFALSE 826
// sReset := true ;
 818: LD_ADDR_EXP 23
 822: PUSH
 823: LD_INT 1
 825: ST_TO_ADDR
// if p3 = 105 then
 826: LD_VAR 0 3
 830: PUSH
 831: LD_INT 105
 833: EQUAL
 834: IFFALSE 844
// sSun := true ;
 836: LD_ADDR_EXP 24
 840: PUSH
 841: LD_INT 1
 843: ST_TO_ADDR
// if p3 = 106 then
 844: LD_VAR 0 3
 848: PUSH
 849: LD_INT 106
 851: EQUAL
 852: IFFALSE 862
// sTiger := true ;
 854: LD_ADDR_EXP 20
 858: PUSH
 859: LD_INT 1
 861: ST_TO_ADDR
// if p3 = 107 then
 862: LD_VAR 0 3
 866: PUSH
 867: LD_INT 107
 869: EQUAL
 870: IFFALSE 880
// sBomb := true ;
 872: LD_ADDR_EXP 21
 876: PUSH
 877: LD_INT 1
 879: ST_TO_ADDR
// if p3 = 108 then
 880: LD_VAR 0 3
 884: PUSH
 885: LD_INT 108
 887: EQUAL
 888: IFFALSE 898
// sWound := true ;
 890: LD_ADDR_EXP 29
 894: PUSH
 895: LD_INT 1
 897: ST_TO_ADDR
// if p3 = 109 then
 898: LD_VAR 0 3
 902: PUSH
 903: LD_INT 109
 905: EQUAL
 906: IFFALSE 916
// sBetray := true ;
 908: LD_ADDR_EXP 33
 912: PUSH
 913: LD_INT 1
 915: ST_TO_ADDR
// if p3 = 110 then
 916: LD_VAR 0 3
 920: PUSH
 921: LD_INT 110
 923: EQUAL
 924: IFFALSE 934
// sContamin := true ;
 926: LD_ADDR_EXP 34
 930: PUSH
 931: LD_INT 1
 933: ST_TO_ADDR
// if p3 = 111 then
 934: LD_VAR 0 3
 938: PUSH
 939: LD_INT 111
 941: EQUAL
 942: IFFALSE 952
// sOil := true ;
 944: LD_ADDR_EXP 36
 948: PUSH
 949: LD_INT 1
 951: ST_TO_ADDR
// if p3 = 112 then
 952: LD_VAR 0 3
 956: PUSH
 957: LD_INT 112
 959: EQUAL
 960: IFFALSE 970
// sStu := true ;
 962: LD_ADDR_EXP 40
 966: PUSH
 967: LD_INT 1
 969: ST_TO_ADDR
// if p3 = 113 then
 970: LD_VAR 0 3
 974: PUSH
 975: LD_INT 113
 977: EQUAL
 978: IFFALSE 988
// sBazooka := true ;
 980: LD_ADDR_EXP 43
 984: PUSH
 985: LD_INT 1
 987: ST_TO_ADDR
// if p3 = 114 then
 988: LD_VAR 0 3
 992: PUSH
 993: LD_INT 114
 995: EQUAL
 996: IFFALSE 1006
// sMortar := true ;
 998: LD_ADDR_EXP 44
1002: PUSH
1003: LD_INT 1
1005: ST_TO_ADDR
// if p3 = 115 then
1006: LD_VAR 0 3
1010: PUSH
1011: LD_INT 115
1013: EQUAL
1014: IFFALSE 1024
// sRanger := true ;
1016: LD_ADDR_EXP 54
1020: PUSH
1021: LD_INT 1
1023: ST_TO_ADDR
// if p3 = 116 then
1024: LD_VAR 0 3
1028: PUSH
1029: LD_INT 116
1031: EQUAL
1032: IFFALSE 1042
// sComputer := true ;
1034: LD_ADDR_EXP 55
1038: PUSH
1039: LD_INT 1
1041: ST_TO_ADDR
// if p3 = 117 then
1042: LD_VAR 0 3
1046: PUSH
1047: LD_INT 117
1049: EQUAL
1050: IFFALSE 1060
// s30 := true ;
1052: LD_ADDR_EXP 56
1056: PUSH
1057: LD_INT 1
1059: ST_TO_ADDR
// if p3 = 118 then
1060: LD_VAR 0 3
1064: PUSH
1065: LD_INT 118
1067: EQUAL
1068: IFFALSE 1078
// s60 := true ;
1070: LD_ADDR_EXP 57
1074: PUSH
1075: LD_INT 1
1077: ST_TO_ADDR
// end ; if p2 = 101 then
1078: LD_VAR 0 2
1082: PUSH
1083: LD_INT 101
1085: EQUAL
1086: IFFALSE 1214
// begin case p3 of 1 :
1088: LD_VAR 0 3
1092: PUSH
1093: LD_INT 1
1095: DOUBLE
1096: EQUAL
1097: IFTRUE 1101
1099: GO 1108
1101: POP
// hHackUnlimitedResources ; 2 :
1102: CALL 13312 0 0
1106: GO 1214
1108: LD_INT 2
1110: DOUBLE
1111: EQUAL
1112: IFTRUE 1116
1114: GO 1123
1116: POP
// hHackSetLevel10 ; 3 :
1117: CALL 13445 0 0
1121: GO 1214
1123: LD_INT 3
1125: DOUBLE
1126: EQUAL
1127: IFTRUE 1131
1129: GO 1138
1131: POP
// hHackSetLevel10YourUnits ; 4 :
1132: CALL 13530 0 0
1136: GO 1214
1138: LD_INT 4
1140: DOUBLE
1141: EQUAL
1142: IFTRUE 1146
1144: GO 1153
1146: POP
// hHackInvincible ; 5 :
1147: CALL 13978 0 0
1151: GO 1214
1153: LD_INT 5
1155: DOUBLE
1156: EQUAL
1157: IFTRUE 1161
1159: GO 1168
1161: POP
// hHackInvisible ; 6 :
1162: CALL 14089 0 0
1166: GO 1214
1168: LD_INT 6
1170: DOUBLE
1171: EQUAL
1172: IFTRUE 1176
1174: GO 1183
1176: POP
// hHackChangeYourSide ; 7 :
1177: CALL 14146 0 0
1181: GO 1214
1183: LD_INT 7
1185: DOUBLE
1186: EQUAL
1187: IFTRUE 1191
1189: GO 1198
1191: POP
// hHackChangeUnitSide ; 8 :
1192: CALL 14188 0 0
1196: GO 1214
1198: LD_INT 8
1200: DOUBLE
1201: EQUAL
1202: IFTRUE 1206
1204: GO 1213
1206: POP
// hHackFog ; end ;
1207: CALL 14289 0 0
1211: GO 1214
1213: POP
// end ; end ;
1214: LD_VAR 0 7
1218: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
1219: GO 1221
1221: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
1222: LD_STRING initStreamRollete();
1224: PPUSH
1225: CALL_OW 559
// InitStreamMode ;
1229: CALL 1241 0 0
// DefineStreamItems ( false ) ;
1233: LD_INT 0
1235: PPUSH
1236: CALL 1705 0 1
// end ;
1240: END
// function InitStreamMode ; begin
1241: LD_INT 0
1243: PPUSH
// streamModeActive := false ;
1244: LD_ADDR_EXP 1
1248: PUSH
1249: LD_INT 0
1251: ST_TO_ADDR
// normalCounter := 36 ;
1252: LD_ADDR_EXP 2
1256: PUSH
1257: LD_INT 36
1259: ST_TO_ADDR
// hardcoreCounter := 18 ;
1260: LD_ADDR_EXP 3
1264: PUSH
1265: LD_INT 18
1267: ST_TO_ADDR
// sRocket := false ;
1268: LD_ADDR_EXP 6
1272: PUSH
1273: LD_INT 0
1275: ST_TO_ADDR
// sSpeed := false ;
1276: LD_ADDR_EXP 5
1280: PUSH
1281: LD_INT 0
1283: ST_TO_ADDR
// sEngine := false ;
1284: LD_ADDR_EXP 7
1288: PUSH
1289: LD_INT 0
1291: ST_TO_ADDR
// sSpec := false ;
1292: LD_ADDR_EXP 4
1296: PUSH
1297: LD_INT 0
1299: ST_TO_ADDR
// sLevel := false ;
1300: LD_ADDR_EXP 8
1304: PUSH
1305: LD_INT 0
1307: ST_TO_ADDR
// sArmoury := false ;
1308: LD_ADDR_EXP 9
1312: PUSH
1313: LD_INT 0
1315: ST_TO_ADDR
// sRadar := false ;
1316: LD_ADDR_EXP 10
1320: PUSH
1321: LD_INT 0
1323: ST_TO_ADDR
// sBunker := false ;
1324: LD_ADDR_EXP 11
1328: PUSH
1329: LD_INT 0
1331: ST_TO_ADDR
// sHack := false ;
1332: LD_ADDR_EXP 12
1336: PUSH
1337: LD_INT 0
1339: ST_TO_ADDR
// sFire := false ;
1340: LD_ADDR_EXP 13
1344: PUSH
1345: LD_INT 0
1347: ST_TO_ADDR
// sRefresh := false ;
1348: LD_ADDR_EXP 14
1352: PUSH
1353: LD_INT 0
1355: ST_TO_ADDR
// sExp := false ;
1356: LD_ADDR_EXP 15
1360: PUSH
1361: LD_INT 0
1363: ST_TO_ADDR
// sDepot := false ;
1364: LD_ADDR_EXP 16
1368: PUSH
1369: LD_INT 0
1371: ST_TO_ADDR
// sFlag := false ;
1372: LD_ADDR_EXP 17
1376: PUSH
1377: LD_INT 0
1379: ST_TO_ADDR
// sKamikadze := false ;
1380: LD_ADDR_EXP 25
1384: PUSH
1385: LD_INT 0
1387: ST_TO_ADDR
// sTroll := false ;
1388: LD_ADDR_EXP 26
1392: PUSH
1393: LD_INT 0
1395: ST_TO_ADDR
// sSlow := false ;
1396: LD_ADDR_EXP 27
1400: PUSH
1401: LD_INT 0
1403: ST_TO_ADDR
// sLack := false ;
1404: LD_ADDR_EXP 28
1408: PUSH
1409: LD_INT 0
1411: ST_TO_ADDR
// sTank := false ;
1412: LD_ADDR_EXP 30
1416: PUSH
1417: LD_INT 0
1419: ST_TO_ADDR
// sRemote := false ;
1420: LD_ADDR_EXP 31
1424: PUSH
1425: LD_INT 0
1427: ST_TO_ADDR
// sPowell := false ;
1428: LD_ADDR_EXP 32
1432: PUSH
1433: LD_INT 0
1435: ST_TO_ADDR
// sTeleport := false ;
1436: LD_ADDR_EXP 35
1440: PUSH
1441: LD_INT 0
1443: ST_TO_ADDR
// sOilTower := false ;
1444: LD_ADDR_EXP 37
1448: PUSH
1449: LD_INT 0
1451: ST_TO_ADDR
// sShovel := false ;
1452: LD_ADDR_EXP 38
1456: PUSH
1457: LD_INT 0
1459: ST_TO_ADDR
// sSheik := false ;
1460: LD_ADDR_EXP 39
1464: PUSH
1465: LD_INT 0
1467: ST_TO_ADDR
// sEarthquake := false ;
1468: LD_ADDR_EXP 41
1472: PUSH
1473: LD_INT 0
1475: ST_TO_ADDR
// sAI := false ;
1476: LD_ADDR_EXP 42
1480: PUSH
1481: LD_INT 0
1483: ST_TO_ADDR
// sCargo := false ;
1484: LD_ADDR_EXP 45
1488: PUSH
1489: LD_INT 0
1491: ST_TO_ADDR
// sDLaser := false ;
1492: LD_ADDR_EXP 46
1496: PUSH
1497: LD_INT 0
1499: ST_TO_ADDR
// sExchange := false ;
1500: LD_ADDR_EXP 47
1504: PUSH
1505: LD_INT 0
1507: ST_TO_ADDR
// sFac := false ;
1508: LD_ADDR_EXP 48
1512: PUSH
1513: LD_INT 0
1515: ST_TO_ADDR
// sPower := false ;
1516: LD_ADDR_EXP 49
1520: PUSH
1521: LD_INT 0
1523: ST_TO_ADDR
// sRandom := false ;
1524: LD_ADDR_EXP 50
1528: PUSH
1529: LD_INT 0
1531: ST_TO_ADDR
// sShield := false ;
1532: LD_ADDR_EXP 51
1536: PUSH
1537: LD_INT 0
1539: ST_TO_ADDR
// sTime := false ;
1540: LD_ADDR_EXP 52
1544: PUSH
1545: LD_INT 0
1547: ST_TO_ADDR
// sTools := false ;
1548: LD_ADDR_EXP 53
1552: PUSH
1553: LD_INT 0
1555: ST_TO_ADDR
// sSold := false ;
1556: LD_ADDR_EXP 18
1560: PUSH
1561: LD_INT 0
1563: ST_TO_ADDR
// sDiff := false ;
1564: LD_ADDR_EXP 19
1568: PUSH
1569: LD_INT 0
1571: ST_TO_ADDR
// sFog := false ;
1572: LD_ADDR_EXP 22
1576: PUSH
1577: LD_INT 0
1579: ST_TO_ADDR
// sReset := false ;
1580: LD_ADDR_EXP 23
1584: PUSH
1585: LD_INT 0
1587: ST_TO_ADDR
// sSun := false ;
1588: LD_ADDR_EXP 24
1592: PUSH
1593: LD_INT 0
1595: ST_TO_ADDR
// sTiger := false ;
1596: LD_ADDR_EXP 20
1600: PUSH
1601: LD_INT 0
1603: ST_TO_ADDR
// sBomb := false ;
1604: LD_ADDR_EXP 21
1608: PUSH
1609: LD_INT 0
1611: ST_TO_ADDR
// sWound := false ;
1612: LD_ADDR_EXP 29
1616: PUSH
1617: LD_INT 0
1619: ST_TO_ADDR
// sBetray := false ;
1620: LD_ADDR_EXP 33
1624: PUSH
1625: LD_INT 0
1627: ST_TO_ADDR
// sContamin := false ;
1628: LD_ADDR_EXP 34
1632: PUSH
1633: LD_INT 0
1635: ST_TO_ADDR
// sOil := false ;
1636: LD_ADDR_EXP 36
1640: PUSH
1641: LD_INT 0
1643: ST_TO_ADDR
// sStu := false ;
1644: LD_ADDR_EXP 40
1648: PUSH
1649: LD_INT 0
1651: ST_TO_ADDR
// sBazooka := false ;
1652: LD_ADDR_EXP 43
1656: PUSH
1657: LD_INT 0
1659: ST_TO_ADDR
// sMortar := false ;
1660: LD_ADDR_EXP 44
1664: PUSH
1665: LD_INT 0
1667: ST_TO_ADDR
// sRanger := false ;
1668: LD_ADDR_EXP 54
1672: PUSH
1673: LD_INT 0
1675: ST_TO_ADDR
// sComputer := false ;
1676: LD_ADDR_EXP 55
1680: PUSH
1681: LD_INT 0
1683: ST_TO_ADDR
// s30 := false ;
1684: LD_ADDR_EXP 56
1688: PUSH
1689: LD_INT 0
1691: ST_TO_ADDR
// s60 := false ;
1692: LD_ADDR_EXP 57
1696: PUSH
1697: LD_INT 0
1699: ST_TO_ADDR
// end ;
1700: LD_VAR 0 1
1704: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
1705: LD_INT 0
1707: PPUSH
1708: PPUSH
1709: PPUSH
1710: PPUSH
1711: PPUSH
1712: PPUSH
1713: PPUSH
// result := [ ] ;
1714: LD_ADDR_VAR 0 2
1718: PUSH
1719: EMPTY
1720: ST_TO_ADDR
// if campaign_id = 1 then
1721: LD_OWVAR 69
1725: PUSH
1726: LD_INT 1
1728: EQUAL
1729: IFFALSE 4895
// begin case mission_number of 1 :
1731: LD_OWVAR 70
1735: PUSH
1736: LD_INT 1
1738: DOUBLE
1739: EQUAL
1740: IFTRUE 1744
1742: GO 1820
1744: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
1745: LD_ADDR_VAR 0 2
1749: PUSH
1750: LD_INT 2
1752: PUSH
1753: LD_INT 4
1755: PUSH
1756: LD_INT 11
1758: PUSH
1759: LD_INT 12
1761: PUSH
1762: LD_INT 15
1764: PUSH
1765: LD_INT 16
1767: PUSH
1768: LD_INT 22
1770: PUSH
1771: LD_INT 23
1773: PUSH
1774: LD_INT 26
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: PUSH
1788: LD_INT 101
1790: PUSH
1791: LD_INT 102
1793: PUSH
1794: LD_INT 106
1796: PUSH
1797: LD_INT 116
1799: PUSH
1800: LD_INT 117
1802: PUSH
1803: LD_INT 118
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: ST_TO_ADDR
1818: GO 4893
1820: LD_INT 2
1822: DOUBLE
1823: EQUAL
1824: IFTRUE 1828
1826: GO 1912
1828: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
1829: LD_ADDR_VAR 0 2
1833: PUSH
1834: LD_INT 2
1836: PUSH
1837: LD_INT 4
1839: PUSH
1840: LD_INT 11
1842: PUSH
1843: LD_INT 12
1845: PUSH
1846: LD_INT 15
1848: PUSH
1849: LD_INT 16
1851: PUSH
1852: LD_INT 22
1854: PUSH
1855: LD_INT 23
1857: PUSH
1858: LD_INT 26
1860: PUSH
1861: EMPTY
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: PUSH
1872: LD_INT 101
1874: PUSH
1875: LD_INT 102
1877: PUSH
1878: LD_INT 105
1880: PUSH
1881: LD_INT 106
1883: PUSH
1884: LD_INT 108
1886: PUSH
1887: LD_INT 116
1889: PUSH
1890: LD_INT 117
1892: PUSH
1893: LD_INT 118
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: PUSH
1906: EMPTY
1907: LIST
1908: LIST
1909: ST_TO_ADDR
1910: GO 4893
1912: LD_INT 3
1914: DOUBLE
1915: EQUAL
1916: IFTRUE 1920
1918: GO 2008
1920: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
1921: LD_ADDR_VAR 0 2
1925: PUSH
1926: LD_INT 2
1928: PUSH
1929: LD_INT 4
1931: PUSH
1932: LD_INT 5
1934: PUSH
1935: LD_INT 11
1937: PUSH
1938: LD_INT 12
1940: PUSH
1941: LD_INT 15
1943: PUSH
1944: LD_INT 16
1946: PUSH
1947: LD_INT 22
1949: PUSH
1950: LD_INT 26
1952: PUSH
1953: LD_INT 36
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: PUSH
1968: LD_INT 101
1970: PUSH
1971: LD_INT 102
1973: PUSH
1974: LD_INT 105
1976: PUSH
1977: LD_INT 106
1979: PUSH
1980: LD_INT 108
1982: PUSH
1983: LD_INT 116
1985: PUSH
1986: LD_INT 117
1988: PUSH
1989: LD_INT 118
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: ST_TO_ADDR
2006: GO 4893
2008: LD_INT 4
2010: DOUBLE
2011: EQUAL
2012: IFTRUE 2016
2014: GO 2112
2016: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
2017: LD_ADDR_VAR 0 2
2021: PUSH
2022: LD_INT 2
2024: PUSH
2025: LD_INT 4
2027: PUSH
2028: LD_INT 5
2030: PUSH
2031: LD_INT 8
2033: PUSH
2034: LD_INT 11
2036: PUSH
2037: LD_INT 12
2039: PUSH
2040: LD_INT 15
2042: PUSH
2043: LD_INT 16
2045: PUSH
2046: LD_INT 22
2048: PUSH
2049: LD_INT 23
2051: PUSH
2052: LD_INT 26
2054: PUSH
2055: LD_INT 36
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: PUSH
2072: LD_INT 101
2074: PUSH
2075: LD_INT 102
2077: PUSH
2078: LD_INT 105
2080: PUSH
2081: LD_INT 106
2083: PUSH
2084: LD_INT 108
2086: PUSH
2087: LD_INT 116
2089: PUSH
2090: LD_INT 117
2092: PUSH
2093: LD_INT 118
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: ST_TO_ADDR
2110: GO 4893
2112: LD_INT 5
2114: DOUBLE
2115: EQUAL
2116: IFTRUE 2120
2118: GO 2232
2120: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
2121: LD_ADDR_VAR 0 2
2125: PUSH
2126: LD_INT 2
2128: PUSH
2129: LD_INT 4
2131: PUSH
2132: LD_INT 5
2134: PUSH
2135: LD_INT 6
2137: PUSH
2138: LD_INT 8
2140: PUSH
2141: LD_INT 11
2143: PUSH
2144: LD_INT 12
2146: PUSH
2147: LD_INT 15
2149: PUSH
2150: LD_INT 16
2152: PUSH
2153: LD_INT 22
2155: PUSH
2156: LD_INT 23
2158: PUSH
2159: LD_INT 25
2161: PUSH
2162: LD_INT 26
2164: PUSH
2165: LD_INT 36
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: PUSH
2184: LD_INT 101
2186: PUSH
2187: LD_INT 102
2189: PUSH
2190: LD_INT 105
2192: PUSH
2193: LD_INT 106
2195: PUSH
2196: LD_INT 108
2198: PUSH
2199: LD_INT 109
2201: PUSH
2202: LD_INT 112
2204: PUSH
2205: LD_INT 116
2207: PUSH
2208: LD_INT 117
2210: PUSH
2211: LD_INT 118
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: LIST
2218: LIST
2219: LIST
2220: LIST
2221: LIST
2222: LIST
2223: LIST
2224: LIST
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: ST_TO_ADDR
2230: GO 4893
2232: LD_INT 6
2234: DOUBLE
2235: EQUAL
2236: IFTRUE 2240
2238: GO 2372
2240: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
2241: LD_ADDR_VAR 0 2
2245: PUSH
2246: LD_INT 2
2248: PUSH
2249: LD_INT 4
2251: PUSH
2252: LD_INT 5
2254: PUSH
2255: LD_INT 6
2257: PUSH
2258: LD_INT 8
2260: PUSH
2261: LD_INT 11
2263: PUSH
2264: LD_INT 12
2266: PUSH
2267: LD_INT 15
2269: PUSH
2270: LD_INT 16
2272: PUSH
2273: LD_INT 20
2275: PUSH
2276: LD_INT 21
2278: PUSH
2279: LD_INT 22
2281: PUSH
2282: LD_INT 23
2284: PUSH
2285: LD_INT 25
2287: PUSH
2288: LD_INT 26
2290: PUSH
2291: LD_INT 30
2293: PUSH
2294: LD_INT 31
2296: PUSH
2297: LD_INT 32
2299: PUSH
2300: LD_INT 36
2302: PUSH
2303: EMPTY
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: PUSH
2324: LD_INT 101
2326: PUSH
2327: LD_INT 102
2329: PUSH
2330: LD_INT 105
2332: PUSH
2333: LD_INT 106
2335: PUSH
2336: LD_INT 108
2338: PUSH
2339: LD_INT 109
2341: PUSH
2342: LD_INT 112
2344: PUSH
2345: LD_INT 116
2347: PUSH
2348: LD_INT 117
2350: PUSH
2351: LD_INT 118
2353: PUSH
2354: EMPTY
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: LIST
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: ST_TO_ADDR
2370: GO 4893
2372: LD_INT 7
2374: DOUBLE
2375: EQUAL
2376: IFTRUE 2380
2378: GO 2492
2380: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
2381: LD_ADDR_VAR 0 2
2385: PUSH
2386: LD_INT 2
2388: PUSH
2389: LD_INT 4
2391: PUSH
2392: LD_INT 5
2394: PUSH
2395: LD_INT 7
2397: PUSH
2398: LD_INT 11
2400: PUSH
2401: LD_INT 12
2403: PUSH
2404: LD_INT 15
2406: PUSH
2407: LD_INT 16
2409: PUSH
2410: LD_INT 20
2412: PUSH
2413: LD_INT 21
2415: PUSH
2416: LD_INT 22
2418: PUSH
2419: LD_INT 23
2421: PUSH
2422: LD_INT 25
2424: PUSH
2425: LD_INT 26
2427: PUSH
2428: EMPTY
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: LIST
2439: LIST
2440: LIST
2441: LIST
2442: LIST
2443: PUSH
2444: LD_INT 101
2446: PUSH
2447: LD_INT 102
2449: PUSH
2450: LD_INT 103
2452: PUSH
2453: LD_INT 105
2455: PUSH
2456: LD_INT 106
2458: PUSH
2459: LD_INT 108
2461: PUSH
2462: LD_INT 112
2464: PUSH
2465: LD_INT 116
2467: PUSH
2468: LD_INT 117
2470: PUSH
2471: LD_INT 118
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: LIST
2478: LIST
2479: LIST
2480: LIST
2481: LIST
2482: LIST
2483: LIST
2484: LIST
2485: PUSH
2486: EMPTY
2487: LIST
2488: LIST
2489: ST_TO_ADDR
2490: GO 4893
2492: LD_INT 8
2494: DOUBLE
2495: EQUAL
2496: IFTRUE 2500
2498: GO 2640
2500: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
2501: LD_ADDR_VAR 0 2
2505: PUSH
2506: LD_INT 2
2508: PUSH
2509: LD_INT 4
2511: PUSH
2512: LD_INT 5
2514: PUSH
2515: LD_INT 6
2517: PUSH
2518: LD_INT 7
2520: PUSH
2521: LD_INT 8
2523: PUSH
2524: LD_INT 11
2526: PUSH
2527: LD_INT 12
2529: PUSH
2530: LD_INT 15
2532: PUSH
2533: LD_INT 16
2535: PUSH
2536: LD_INT 20
2538: PUSH
2539: LD_INT 21
2541: PUSH
2542: LD_INT 22
2544: PUSH
2545: LD_INT 23
2547: PUSH
2548: LD_INT 25
2550: PUSH
2551: LD_INT 26
2553: PUSH
2554: LD_INT 30
2556: PUSH
2557: LD_INT 31
2559: PUSH
2560: LD_INT 32
2562: PUSH
2563: LD_INT 36
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: LIST
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: LIST
2585: LIST
2586: LIST
2587: PUSH
2588: LD_INT 101
2590: PUSH
2591: LD_INT 102
2593: PUSH
2594: LD_INT 103
2596: PUSH
2597: LD_INT 105
2599: PUSH
2600: LD_INT 106
2602: PUSH
2603: LD_INT 108
2605: PUSH
2606: LD_INT 109
2608: PUSH
2609: LD_INT 112
2611: PUSH
2612: LD_INT 116
2614: PUSH
2615: LD_INT 117
2617: PUSH
2618: LD_INT 118
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: LIST
2632: LIST
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: ST_TO_ADDR
2638: GO 4893
2640: LD_INT 9
2642: DOUBLE
2643: EQUAL
2644: IFTRUE 2648
2646: GO 2796
2648: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
2649: LD_ADDR_VAR 0 2
2653: PUSH
2654: LD_INT 2
2656: PUSH
2657: LD_INT 4
2659: PUSH
2660: LD_INT 5
2662: PUSH
2663: LD_INT 6
2665: PUSH
2666: LD_INT 7
2668: PUSH
2669: LD_INT 8
2671: PUSH
2672: LD_INT 11
2674: PUSH
2675: LD_INT 12
2677: PUSH
2678: LD_INT 15
2680: PUSH
2681: LD_INT 16
2683: PUSH
2684: LD_INT 20
2686: PUSH
2687: LD_INT 21
2689: PUSH
2690: LD_INT 22
2692: PUSH
2693: LD_INT 23
2695: PUSH
2696: LD_INT 25
2698: PUSH
2699: LD_INT 26
2701: PUSH
2702: LD_INT 28
2704: PUSH
2705: LD_INT 30
2707: PUSH
2708: LD_INT 31
2710: PUSH
2711: LD_INT 32
2713: PUSH
2714: LD_INT 36
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: LIST
2721: LIST
2722: LIST
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: LIST
2729: LIST
2730: LIST
2731: LIST
2732: LIST
2733: LIST
2734: LIST
2735: LIST
2736: LIST
2737: LIST
2738: LIST
2739: PUSH
2740: LD_INT 101
2742: PUSH
2743: LD_INT 102
2745: PUSH
2746: LD_INT 103
2748: PUSH
2749: LD_INT 105
2751: PUSH
2752: LD_INT 106
2754: PUSH
2755: LD_INT 108
2757: PUSH
2758: LD_INT 109
2760: PUSH
2761: LD_INT 112
2763: PUSH
2764: LD_INT 114
2766: PUSH
2767: LD_INT 116
2769: PUSH
2770: LD_INT 117
2772: PUSH
2773: LD_INT 118
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: LIST
2780: LIST
2781: LIST
2782: LIST
2783: LIST
2784: LIST
2785: LIST
2786: LIST
2787: LIST
2788: LIST
2789: PUSH
2790: EMPTY
2791: LIST
2792: LIST
2793: ST_TO_ADDR
2794: GO 4893
2796: LD_INT 10
2798: DOUBLE
2799: EQUAL
2800: IFTRUE 2804
2802: GO 3000
2804: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
2805: LD_ADDR_VAR 0 2
2809: PUSH
2810: LD_INT 2
2812: PUSH
2813: LD_INT 4
2815: PUSH
2816: LD_INT 5
2818: PUSH
2819: LD_INT 6
2821: PUSH
2822: LD_INT 7
2824: PUSH
2825: LD_INT 8
2827: PUSH
2828: LD_INT 9
2830: PUSH
2831: LD_INT 10
2833: PUSH
2834: LD_INT 11
2836: PUSH
2837: LD_INT 12
2839: PUSH
2840: LD_INT 13
2842: PUSH
2843: LD_INT 14
2845: PUSH
2846: LD_INT 15
2848: PUSH
2849: LD_INT 16
2851: PUSH
2852: LD_INT 17
2854: PUSH
2855: LD_INT 18
2857: PUSH
2858: LD_INT 19
2860: PUSH
2861: LD_INT 20
2863: PUSH
2864: LD_INT 21
2866: PUSH
2867: LD_INT 22
2869: PUSH
2870: LD_INT 23
2872: PUSH
2873: LD_INT 24
2875: PUSH
2876: LD_INT 25
2878: PUSH
2879: LD_INT 26
2881: PUSH
2882: LD_INT 28
2884: PUSH
2885: LD_INT 30
2887: PUSH
2888: LD_INT 31
2890: PUSH
2891: LD_INT 32
2893: PUSH
2894: LD_INT 36
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: LIST
2901: LIST
2902: LIST
2903: LIST
2904: LIST
2905: LIST
2906: LIST
2907: LIST
2908: LIST
2909: LIST
2910: LIST
2911: LIST
2912: LIST
2913: LIST
2914: LIST
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: LIST
2920: LIST
2921: LIST
2922: LIST
2923: LIST
2924: LIST
2925: LIST
2926: LIST
2927: PUSH
2928: LD_INT 101
2930: PUSH
2931: LD_INT 102
2933: PUSH
2934: LD_INT 103
2936: PUSH
2937: LD_INT 104
2939: PUSH
2940: LD_INT 105
2942: PUSH
2943: LD_INT 106
2945: PUSH
2946: LD_INT 107
2948: PUSH
2949: LD_INT 108
2951: PUSH
2952: LD_INT 109
2954: PUSH
2955: LD_INT 110
2957: PUSH
2958: LD_INT 111
2960: PUSH
2961: LD_INT 112
2963: PUSH
2964: LD_INT 114
2966: PUSH
2967: LD_INT 116
2969: PUSH
2970: LD_INT 117
2972: PUSH
2973: LD_INT 118
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: LIST
2982: LIST
2983: LIST
2984: LIST
2985: LIST
2986: LIST
2987: LIST
2988: LIST
2989: LIST
2990: LIST
2991: LIST
2992: LIST
2993: PUSH
2994: EMPTY
2995: LIST
2996: LIST
2997: ST_TO_ADDR
2998: GO 4893
3000: LD_INT 11
3002: DOUBLE
3003: EQUAL
3004: IFTRUE 3008
3006: GO 3212
3008: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
3009: LD_ADDR_VAR 0 2
3013: PUSH
3014: LD_INT 2
3016: PUSH
3017: LD_INT 3
3019: PUSH
3020: LD_INT 4
3022: PUSH
3023: LD_INT 5
3025: PUSH
3026: LD_INT 6
3028: PUSH
3029: LD_INT 7
3031: PUSH
3032: LD_INT 8
3034: PUSH
3035: LD_INT 9
3037: PUSH
3038: LD_INT 10
3040: PUSH
3041: LD_INT 11
3043: PUSH
3044: LD_INT 12
3046: PUSH
3047: LD_INT 13
3049: PUSH
3050: LD_INT 14
3052: PUSH
3053: LD_INT 15
3055: PUSH
3056: LD_INT 16
3058: PUSH
3059: LD_INT 17
3061: PUSH
3062: LD_INT 18
3064: PUSH
3065: LD_INT 19
3067: PUSH
3068: LD_INT 20
3070: PUSH
3071: LD_INT 21
3073: PUSH
3074: LD_INT 22
3076: PUSH
3077: LD_INT 23
3079: PUSH
3080: LD_INT 24
3082: PUSH
3083: LD_INT 25
3085: PUSH
3086: LD_INT 26
3088: PUSH
3089: LD_INT 28
3091: PUSH
3092: LD_INT 30
3094: PUSH
3095: LD_INT 31
3097: PUSH
3098: LD_INT 32
3100: PUSH
3101: LD_INT 34
3103: PUSH
3104: LD_INT 36
3106: PUSH
3107: EMPTY
3108: LIST
3109: LIST
3110: LIST
3111: LIST
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: LIST
3117: LIST
3118: LIST
3119: LIST
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: LIST
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: PUSH
3140: LD_INT 101
3142: PUSH
3143: LD_INT 102
3145: PUSH
3146: LD_INT 103
3148: PUSH
3149: LD_INT 104
3151: PUSH
3152: LD_INT 105
3154: PUSH
3155: LD_INT 106
3157: PUSH
3158: LD_INT 107
3160: PUSH
3161: LD_INT 108
3163: PUSH
3164: LD_INT 109
3166: PUSH
3167: LD_INT 110
3169: PUSH
3170: LD_INT 111
3172: PUSH
3173: LD_INT 112
3175: PUSH
3176: LD_INT 114
3178: PUSH
3179: LD_INT 116
3181: PUSH
3182: LD_INT 117
3184: PUSH
3185: LD_INT 118
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: ST_TO_ADDR
3210: GO 4893
3212: LD_INT 12
3214: DOUBLE
3215: EQUAL
3216: IFTRUE 3220
3218: GO 3440
3220: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
3221: LD_ADDR_VAR 0 2
3225: PUSH
3226: LD_INT 1
3228: PUSH
3229: LD_INT 2
3231: PUSH
3232: LD_INT 3
3234: PUSH
3235: LD_INT 4
3237: PUSH
3238: LD_INT 5
3240: PUSH
3241: LD_INT 6
3243: PUSH
3244: LD_INT 7
3246: PUSH
3247: LD_INT 8
3249: PUSH
3250: LD_INT 9
3252: PUSH
3253: LD_INT 10
3255: PUSH
3256: LD_INT 11
3258: PUSH
3259: LD_INT 12
3261: PUSH
3262: LD_INT 13
3264: PUSH
3265: LD_INT 14
3267: PUSH
3268: LD_INT 15
3270: PUSH
3271: LD_INT 16
3273: PUSH
3274: LD_INT 17
3276: PUSH
3277: LD_INT 18
3279: PUSH
3280: LD_INT 19
3282: PUSH
3283: LD_INT 20
3285: PUSH
3286: LD_INT 21
3288: PUSH
3289: LD_INT 22
3291: PUSH
3292: LD_INT 23
3294: PUSH
3295: LD_INT 24
3297: PUSH
3298: LD_INT 25
3300: PUSH
3301: LD_INT 26
3303: PUSH
3304: LD_INT 27
3306: PUSH
3307: LD_INT 28
3309: PUSH
3310: LD_INT 30
3312: PUSH
3313: LD_INT 31
3315: PUSH
3316: LD_INT 32
3318: PUSH
3319: LD_INT 33
3321: PUSH
3322: LD_INT 34
3324: PUSH
3325: LD_INT 36
3327: PUSH
3328: EMPTY
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: LIST
3335: LIST
3336: LIST
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: LIST
3343: LIST
3344: LIST
3345: LIST
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: PUSH
3364: LD_INT 101
3366: PUSH
3367: LD_INT 102
3369: PUSH
3370: LD_INT 103
3372: PUSH
3373: LD_INT 104
3375: PUSH
3376: LD_INT 105
3378: PUSH
3379: LD_INT 106
3381: PUSH
3382: LD_INT 107
3384: PUSH
3385: LD_INT 108
3387: PUSH
3388: LD_INT 109
3390: PUSH
3391: LD_INT 110
3393: PUSH
3394: LD_INT 111
3396: PUSH
3397: LD_INT 112
3399: PUSH
3400: LD_INT 113
3402: PUSH
3403: LD_INT 114
3405: PUSH
3406: LD_INT 116
3408: PUSH
3409: LD_INT 117
3411: PUSH
3412: LD_INT 118
3414: PUSH
3415: EMPTY
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: PUSH
3434: EMPTY
3435: LIST
3436: LIST
3437: ST_TO_ADDR
3438: GO 4893
3440: LD_INT 13
3442: DOUBLE
3443: EQUAL
3444: IFTRUE 3448
3446: GO 3656
3448: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
3449: LD_ADDR_VAR 0 2
3453: PUSH
3454: LD_INT 1
3456: PUSH
3457: LD_INT 2
3459: PUSH
3460: LD_INT 3
3462: PUSH
3463: LD_INT 4
3465: PUSH
3466: LD_INT 5
3468: PUSH
3469: LD_INT 8
3471: PUSH
3472: LD_INT 9
3474: PUSH
3475: LD_INT 10
3477: PUSH
3478: LD_INT 11
3480: PUSH
3481: LD_INT 12
3483: PUSH
3484: LD_INT 14
3486: PUSH
3487: LD_INT 15
3489: PUSH
3490: LD_INT 16
3492: PUSH
3493: LD_INT 17
3495: PUSH
3496: LD_INT 18
3498: PUSH
3499: LD_INT 19
3501: PUSH
3502: LD_INT 20
3504: PUSH
3505: LD_INT 21
3507: PUSH
3508: LD_INT 22
3510: PUSH
3511: LD_INT 23
3513: PUSH
3514: LD_INT 24
3516: PUSH
3517: LD_INT 25
3519: PUSH
3520: LD_INT 26
3522: PUSH
3523: LD_INT 27
3525: PUSH
3526: LD_INT 28
3528: PUSH
3529: LD_INT 30
3531: PUSH
3532: LD_INT 31
3534: PUSH
3535: LD_INT 32
3537: PUSH
3538: LD_INT 33
3540: PUSH
3541: LD_INT 34
3543: PUSH
3544: LD_INT 36
3546: PUSH
3547: EMPTY
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: PUSH
3580: LD_INT 101
3582: PUSH
3583: LD_INT 102
3585: PUSH
3586: LD_INT 103
3588: PUSH
3589: LD_INT 104
3591: PUSH
3592: LD_INT 105
3594: PUSH
3595: LD_INT 106
3597: PUSH
3598: LD_INT 107
3600: PUSH
3601: LD_INT 108
3603: PUSH
3604: LD_INT 109
3606: PUSH
3607: LD_INT 110
3609: PUSH
3610: LD_INT 111
3612: PUSH
3613: LD_INT 112
3615: PUSH
3616: LD_INT 113
3618: PUSH
3619: LD_INT 114
3621: PUSH
3622: LD_INT 116
3624: PUSH
3625: LD_INT 117
3627: PUSH
3628: LD_INT 118
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: ST_TO_ADDR
3654: GO 4893
3656: LD_INT 14
3658: DOUBLE
3659: EQUAL
3660: IFTRUE 3664
3662: GO 3888
3664: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
3665: LD_ADDR_VAR 0 2
3669: PUSH
3670: LD_INT 1
3672: PUSH
3673: LD_INT 2
3675: PUSH
3676: LD_INT 3
3678: PUSH
3679: LD_INT 4
3681: PUSH
3682: LD_INT 5
3684: PUSH
3685: LD_INT 6
3687: PUSH
3688: LD_INT 7
3690: PUSH
3691: LD_INT 8
3693: PUSH
3694: LD_INT 9
3696: PUSH
3697: LD_INT 10
3699: PUSH
3700: LD_INT 11
3702: PUSH
3703: LD_INT 12
3705: PUSH
3706: LD_INT 13
3708: PUSH
3709: LD_INT 14
3711: PUSH
3712: LD_INT 15
3714: PUSH
3715: LD_INT 16
3717: PUSH
3718: LD_INT 17
3720: PUSH
3721: LD_INT 18
3723: PUSH
3724: LD_INT 19
3726: PUSH
3727: LD_INT 20
3729: PUSH
3730: LD_INT 21
3732: PUSH
3733: LD_INT 22
3735: PUSH
3736: LD_INT 23
3738: PUSH
3739: LD_INT 24
3741: PUSH
3742: LD_INT 25
3744: PUSH
3745: LD_INT 26
3747: PUSH
3748: LD_INT 27
3750: PUSH
3751: LD_INT 28
3753: PUSH
3754: LD_INT 29
3756: PUSH
3757: LD_INT 30
3759: PUSH
3760: LD_INT 31
3762: PUSH
3763: LD_INT 32
3765: PUSH
3766: LD_INT 33
3768: PUSH
3769: LD_INT 34
3771: PUSH
3772: LD_INT 36
3774: PUSH
3775: EMPTY
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: PUSH
3812: LD_INT 101
3814: PUSH
3815: LD_INT 102
3817: PUSH
3818: LD_INT 103
3820: PUSH
3821: LD_INT 104
3823: PUSH
3824: LD_INT 105
3826: PUSH
3827: LD_INT 106
3829: PUSH
3830: LD_INT 107
3832: PUSH
3833: LD_INT 108
3835: PUSH
3836: LD_INT 109
3838: PUSH
3839: LD_INT 110
3841: PUSH
3842: LD_INT 111
3844: PUSH
3845: LD_INT 112
3847: PUSH
3848: LD_INT 113
3850: PUSH
3851: LD_INT 114
3853: PUSH
3854: LD_INT 116
3856: PUSH
3857: LD_INT 117
3859: PUSH
3860: LD_INT 118
3862: PUSH
3863: EMPTY
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: ST_TO_ADDR
3886: GO 4893
3888: LD_INT 15
3890: DOUBLE
3891: EQUAL
3892: IFTRUE 3896
3894: GO 4120
3896: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
3897: LD_ADDR_VAR 0 2
3901: PUSH
3902: LD_INT 1
3904: PUSH
3905: LD_INT 2
3907: PUSH
3908: LD_INT 3
3910: PUSH
3911: LD_INT 4
3913: PUSH
3914: LD_INT 5
3916: PUSH
3917: LD_INT 6
3919: PUSH
3920: LD_INT 7
3922: PUSH
3923: LD_INT 8
3925: PUSH
3926: LD_INT 9
3928: PUSH
3929: LD_INT 10
3931: PUSH
3932: LD_INT 11
3934: PUSH
3935: LD_INT 12
3937: PUSH
3938: LD_INT 13
3940: PUSH
3941: LD_INT 14
3943: PUSH
3944: LD_INT 15
3946: PUSH
3947: LD_INT 16
3949: PUSH
3950: LD_INT 17
3952: PUSH
3953: LD_INT 18
3955: PUSH
3956: LD_INT 19
3958: PUSH
3959: LD_INT 20
3961: PUSH
3962: LD_INT 21
3964: PUSH
3965: LD_INT 22
3967: PUSH
3968: LD_INT 23
3970: PUSH
3971: LD_INT 24
3973: PUSH
3974: LD_INT 25
3976: PUSH
3977: LD_INT 26
3979: PUSH
3980: LD_INT 27
3982: PUSH
3983: LD_INT 28
3985: PUSH
3986: LD_INT 29
3988: PUSH
3989: LD_INT 30
3991: PUSH
3992: LD_INT 31
3994: PUSH
3995: LD_INT 32
3997: PUSH
3998: LD_INT 33
4000: PUSH
4001: LD_INT 34
4003: PUSH
4004: LD_INT 36
4006: PUSH
4007: EMPTY
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: LIST
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: LIST
4038: LIST
4039: LIST
4040: LIST
4041: LIST
4042: LIST
4043: PUSH
4044: LD_INT 101
4046: PUSH
4047: LD_INT 102
4049: PUSH
4050: LD_INT 103
4052: PUSH
4053: LD_INT 104
4055: PUSH
4056: LD_INT 105
4058: PUSH
4059: LD_INT 106
4061: PUSH
4062: LD_INT 107
4064: PUSH
4065: LD_INT 108
4067: PUSH
4068: LD_INT 109
4070: PUSH
4071: LD_INT 110
4073: PUSH
4074: LD_INT 111
4076: PUSH
4077: LD_INT 112
4079: PUSH
4080: LD_INT 113
4082: PUSH
4083: LD_INT 114
4085: PUSH
4086: LD_INT 116
4088: PUSH
4089: LD_INT 117
4091: PUSH
4092: LD_INT 118
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: ST_TO_ADDR
4118: GO 4893
4120: LD_INT 16
4122: DOUBLE
4123: EQUAL
4124: IFTRUE 4128
4126: GO 4264
4128: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
4129: LD_ADDR_VAR 0 2
4133: PUSH
4134: LD_INT 2
4136: PUSH
4137: LD_INT 4
4139: PUSH
4140: LD_INT 5
4142: PUSH
4143: LD_INT 7
4145: PUSH
4146: LD_INT 11
4148: PUSH
4149: LD_INT 12
4151: PUSH
4152: LD_INT 15
4154: PUSH
4155: LD_INT 16
4157: PUSH
4158: LD_INT 20
4160: PUSH
4161: LD_INT 21
4163: PUSH
4164: LD_INT 22
4166: PUSH
4167: LD_INT 23
4169: PUSH
4170: LD_INT 25
4172: PUSH
4173: LD_INT 26
4175: PUSH
4176: LD_INT 30
4178: PUSH
4179: LD_INT 31
4181: PUSH
4182: LD_INT 32
4184: PUSH
4185: LD_INT 33
4187: PUSH
4188: LD_INT 34
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: PUSH
4212: LD_INT 101
4214: PUSH
4215: LD_INT 102
4217: PUSH
4218: LD_INT 103
4220: PUSH
4221: LD_INT 106
4223: PUSH
4224: LD_INT 108
4226: PUSH
4227: LD_INT 112
4229: PUSH
4230: LD_INT 113
4232: PUSH
4233: LD_INT 114
4235: PUSH
4236: LD_INT 116
4238: PUSH
4239: LD_INT 117
4241: PUSH
4242: LD_INT 118
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: PUSH
4258: EMPTY
4259: LIST
4260: LIST
4261: ST_TO_ADDR
4262: GO 4893
4264: LD_INT 17
4266: DOUBLE
4267: EQUAL
4268: IFTRUE 4272
4270: GO 4496
4272: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
4273: LD_ADDR_VAR 0 2
4277: PUSH
4278: LD_INT 1
4280: PUSH
4281: LD_INT 2
4283: PUSH
4284: LD_INT 3
4286: PUSH
4287: LD_INT 4
4289: PUSH
4290: LD_INT 5
4292: PUSH
4293: LD_INT 6
4295: PUSH
4296: LD_INT 7
4298: PUSH
4299: LD_INT 8
4301: PUSH
4302: LD_INT 9
4304: PUSH
4305: LD_INT 10
4307: PUSH
4308: LD_INT 11
4310: PUSH
4311: LD_INT 12
4313: PUSH
4314: LD_INT 13
4316: PUSH
4317: LD_INT 14
4319: PUSH
4320: LD_INT 15
4322: PUSH
4323: LD_INT 16
4325: PUSH
4326: LD_INT 17
4328: PUSH
4329: LD_INT 18
4331: PUSH
4332: LD_INT 19
4334: PUSH
4335: LD_INT 20
4337: PUSH
4338: LD_INT 21
4340: PUSH
4341: LD_INT 22
4343: PUSH
4344: LD_INT 23
4346: PUSH
4347: LD_INT 24
4349: PUSH
4350: LD_INT 25
4352: PUSH
4353: LD_INT 26
4355: PUSH
4356: LD_INT 27
4358: PUSH
4359: LD_INT 28
4361: PUSH
4362: LD_INT 29
4364: PUSH
4365: LD_INT 30
4367: PUSH
4368: LD_INT 31
4370: PUSH
4371: LD_INT 32
4373: PUSH
4374: LD_INT 33
4376: PUSH
4377: LD_INT 34
4379: PUSH
4380: LD_INT 36
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: PUSH
4420: LD_INT 101
4422: PUSH
4423: LD_INT 102
4425: PUSH
4426: LD_INT 103
4428: PUSH
4429: LD_INT 104
4431: PUSH
4432: LD_INT 105
4434: PUSH
4435: LD_INT 106
4437: PUSH
4438: LD_INT 107
4440: PUSH
4441: LD_INT 108
4443: PUSH
4444: LD_INT 109
4446: PUSH
4447: LD_INT 110
4449: PUSH
4450: LD_INT 111
4452: PUSH
4453: LD_INT 112
4455: PUSH
4456: LD_INT 113
4458: PUSH
4459: LD_INT 114
4461: PUSH
4462: LD_INT 116
4464: PUSH
4465: LD_INT 117
4467: PUSH
4468: LD_INT 118
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: ST_TO_ADDR
4494: GO 4893
4496: LD_INT 18
4498: DOUBLE
4499: EQUAL
4500: IFTRUE 4504
4502: GO 4652
4504: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
4505: LD_ADDR_VAR 0 2
4509: PUSH
4510: LD_INT 2
4512: PUSH
4513: LD_INT 4
4515: PUSH
4516: LD_INT 5
4518: PUSH
4519: LD_INT 7
4521: PUSH
4522: LD_INT 11
4524: PUSH
4525: LD_INT 12
4527: PUSH
4528: LD_INT 15
4530: PUSH
4531: LD_INT 16
4533: PUSH
4534: LD_INT 20
4536: PUSH
4537: LD_INT 21
4539: PUSH
4540: LD_INT 22
4542: PUSH
4543: LD_INT 23
4545: PUSH
4546: LD_INT 25
4548: PUSH
4549: LD_INT 26
4551: PUSH
4552: LD_INT 30
4554: PUSH
4555: LD_INT 31
4557: PUSH
4558: LD_INT 32
4560: PUSH
4561: LD_INT 33
4563: PUSH
4564: LD_INT 34
4566: PUSH
4567: LD_INT 35
4569: PUSH
4570: LD_INT 36
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: PUSH
4596: LD_INT 101
4598: PUSH
4599: LD_INT 102
4601: PUSH
4602: LD_INT 103
4604: PUSH
4605: LD_INT 106
4607: PUSH
4608: LD_INT 108
4610: PUSH
4611: LD_INT 112
4613: PUSH
4614: LD_INT 113
4616: PUSH
4617: LD_INT 114
4619: PUSH
4620: LD_INT 115
4622: PUSH
4623: LD_INT 116
4625: PUSH
4626: LD_INT 117
4628: PUSH
4629: LD_INT 118
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: ST_TO_ADDR
4650: GO 4893
4652: LD_INT 19
4654: DOUBLE
4655: EQUAL
4656: IFTRUE 4660
4658: GO 4892
4660: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
4661: LD_ADDR_VAR 0 2
4665: PUSH
4666: LD_INT 1
4668: PUSH
4669: LD_INT 2
4671: PUSH
4672: LD_INT 3
4674: PUSH
4675: LD_INT 4
4677: PUSH
4678: LD_INT 5
4680: PUSH
4681: LD_INT 6
4683: PUSH
4684: LD_INT 7
4686: PUSH
4687: LD_INT 8
4689: PUSH
4690: LD_INT 9
4692: PUSH
4693: LD_INT 10
4695: PUSH
4696: LD_INT 11
4698: PUSH
4699: LD_INT 12
4701: PUSH
4702: LD_INT 13
4704: PUSH
4705: LD_INT 14
4707: PUSH
4708: LD_INT 15
4710: PUSH
4711: LD_INT 16
4713: PUSH
4714: LD_INT 17
4716: PUSH
4717: LD_INT 18
4719: PUSH
4720: LD_INT 19
4722: PUSH
4723: LD_INT 20
4725: PUSH
4726: LD_INT 21
4728: PUSH
4729: LD_INT 22
4731: PUSH
4732: LD_INT 23
4734: PUSH
4735: LD_INT 24
4737: PUSH
4738: LD_INT 25
4740: PUSH
4741: LD_INT 26
4743: PUSH
4744: LD_INT 27
4746: PUSH
4747: LD_INT 28
4749: PUSH
4750: LD_INT 29
4752: PUSH
4753: LD_INT 30
4755: PUSH
4756: LD_INT 31
4758: PUSH
4759: LD_INT 32
4761: PUSH
4762: LD_INT 33
4764: PUSH
4765: LD_INT 34
4767: PUSH
4768: LD_INT 35
4770: PUSH
4771: LD_INT 36
4773: PUSH
4774: EMPTY
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: PUSH
4812: LD_INT 101
4814: PUSH
4815: LD_INT 102
4817: PUSH
4818: LD_INT 103
4820: PUSH
4821: LD_INT 104
4823: PUSH
4824: LD_INT 105
4826: PUSH
4827: LD_INT 106
4829: PUSH
4830: LD_INT 107
4832: PUSH
4833: LD_INT 108
4835: PUSH
4836: LD_INT 109
4838: PUSH
4839: LD_INT 110
4841: PUSH
4842: LD_INT 111
4844: PUSH
4845: LD_INT 112
4847: PUSH
4848: LD_INT 113
4850: PUSH
4851: LD_INT 114
4853: PUSH
4854: LD_INT 115
4856: PUSH
4857: LD_INT 116
4859: PUSH
4860: LD_INT 117
4862: PUSH
4863: LD_INT 118
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: ST_TO_ADDR
4890: GO 4893
4892: POP
// end else
4893: GO 5124
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
4895: LD_ADDR_VAR 0 2
4899: PUSH
4900: LD_INT 1
4902: PUSH
4903: LD_INT 2
4905: PUSH
4906: LD_INT 3
4908: PUSH
4909: LD_INT 4
4911: PUSH
4912: LD_INT 5
4914: PUSH
4915: LD_INT 6
4917: PUSH
4918: LD_INT 7
4920: PUSH
4921: LD_INT 8
4923: PUSH
4924: LD_INT 9
4926: PUSH
4927: LD_INT 10
4929: PUSH
4930: LD_INT 11
4932: PUSH
4933: LD_INT 12
4935: PUSH
4936: LD_INT 13
4938: PUSH
4939: LD_INT 14
4941: PUSH
4942: LD_INT 15
4944: PUSH
4945: LD_INT 16
4947: PUSH
4948: LD_INT 17
4950: PUSH
4951: LD_INT 18
4953: PUSH
4954: LD_INT 19
4956: PUSH
4957: LD_INT 20
4959: PUSH
4960: LD_INT 21
4962: PUSH
4963: LD_INT 22
4965: PUSH
4966: LD_INT 23
4968: PUSH
4969: LD_INT 24
4971: PUSH
4972: LD_INT 25
4974: PUSH
4975: LD_INT 26
4977: PUSH
4978: LD_INT 27
4980: PUSH
4981: LD_INT 28
4983: PUSH
4984: LD_INT 29
4986: PUSH
4987: LD_INT 30
4989: PUSH
4990: LD_INT 31
4992: PUSH
4993: LD_INT 32
4995: PUSH
4996: LD_INT 33
4998: PUSH
4999: LD_INT 34
5001: PUSH
5002: LD_INT 35
5004: PUSH
5005: LD_INT 36
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: PUSH
5046: LD_INT 101
5048: PUSH
5049: LD_INT 102
5051: PUSH
5052: LD_INT 103
5054: PUSH
5055: LD_INT 104
5057: PUSH
5058: LD_INT 105
5060: PUSH
5061: LD_INT 106
5063: PUSH
5064: LD_INT 107
5066: PUSH
5067: LD_INT 108
5069: PUSH
5070: LD_INT 109
5072: PUSH
5073: LD_INT 110
5075: PUSH
5076: LD_INT 111
5078: PUSH
5079: LD_INT 112
5081: PUSH
5082: LD_INT 113
5084: PUSH
5085: LD_INT 114
5087: PUSH
5088: LD_INT 115
5090: PUSH
5091: LD_INT 116
5093: PUSH
5094: LD_INT 117
5096: PUSH
5097: LD_INT 118
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: LIST
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: ST_TO_ADDR
// if result then
5124: LD_VAR 0 2
5128: IFFALSE 5914
// begin normal :=  ;
5130: LD_ADDR_VAR 0 5
5134: PUSH
5135: LD_STRING 
5137: ST_TO_ADDR
// hardcore :=  ;
5138: LD_ADDR_VAR 0 6
5142: PUSH
5143: LD_STRING 
5145: ST_TO_ADDR
// active :=  ;
5146: LD_ADDR_VAR 0 7
5150: PUSH
5151: LD_STRING 
5153: ST_TO_ADDR
// for i = 1 to normalCounter do
5154: LD_ADDR_VAR 0 8
5158: PUSH
5159: DOUBLE
5160: LD_INT 1
5162: DEC
5163: ST_TO_ADDR
5164: LD_EXP 2
5168: PUSH
5169: FOR_TO
5170: IFFALSE 5271
// begin tmp := 0 ;
5172: LD_ADDR_VAR 0 3
5176: PUSH
5177: LD_STRING 0
5179: ST_TO_ADDR
// if result [ 1 ] then
5180: LD_VAR 0 2
5184: PUSH
5185: LD_INT 1
5187: ARRAY
5188: IFFALSE 5253
// if result [ 1 ] [ 1 ] = i then
5190: LD_VAR 0 2
5194: PUSH
5195: LD_INT 1
5197: ARRAY
5198: PUSH
5199: LD_INT 1
5201: ARRAY
5202: PUSH
5203: LD_VAR 0 8
5207: EQUAL
5208: IFFALSE 5253
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
5210: LD_ADDR_VAR 0 2
5214: PUSH
5215: LD_VAR 0 2
5219: PPUSH
5220: LD_INT 1
5222: PPUSH
5223: LD_VAR 0 2
5227: PUSH
5228: LD_INT 1
5230: ARRAY
5231: PPUSH
5232: LD_INT 1
5234: PPUSH
5235: CALL_OW 3
5239: PPUSH
5240: CALL_OW 1
5244: ST_TO_ADDR
// tmp := 1 ;
5245: LD_ADDR_VAR 0 3
5249: PUSH
5250: LD_STRING 1
5252: ST_TO_ADDR
// end ; normal := normal & tmp ;
5253: LD_ADDR_VAR 0 5
5257: PUSH
5258: LD_VAR 0 5
5262: PUSH
5263: LD_VAR 0 3
5267: STR
5268: ST_TO_ADDR
// end ;
5269: GO 5169
5271: POP
5272: POP
// for i = 1 to hardcoreCounter do
5273: LD_ADDR_VAR 0 8
5277: PUSH
5278: DOUBLE
5279: LD_INT 1
5281: DEC
5282: ST_TO_ADDR
5283: LD_EXP 3
5287: PUSH
5288: FOR_TO
5289: IFFALSE 5394
// begin tmp := 0 ;
5291: LD_ADDR_VAR 0 3
5295: PUSH
5296: LD_STRING 0
5298: ST_TO_ADDR
// if result [ 2 ] then
5299: LD_VAR 0 2
5303: PUSH
5304: LD_INT 2
5306: ARRAY
5307: IFFALSE 5376
// if result [ 2 ] [ 1 ] = 100 + i then
5309: LD_VAR 0 2
5313: PUSH
5314: LD_INT 2
5316: ARRAY
5317: PUSH
5318: LD_INT 1
5320: ARRAY
5321: PUSH
5322: LD_INT 100
5324: PUSH
5325: LD_VAR 0 8
5329: PLUS
5330: EQUAL
5331: IFFALSE 5376
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
5333: LD_ADDR_VAR 0 2
5337: PUSH
5338: LD_VAR 0 2
5342: PPUSH
5343: LD_INT 2
5345: PPUSH
5346: LD_VAR 0 2
5350: PUSH
5351: LD_INT 2
5353: ARRAY
5354: PPUSH
5355: LD_INT 1
5357: PPUSH
5358: CALL_OW 3
5362: PPUSH
5363: CALL_OW 1
5367: ST_TO_ADDR
// tmp := 1 ;
5368: LD_ADDR_VAR 0 3
5372: PUSH
5373: LD_STRING 1
5375: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
5376: LD_ADDR_VAR 0 6
5380: PUSH
5381: LD_VAR 0 6
5385: PUSH
5386: LD_VAR 0 3
5390: STR
5391: ST_TO_ADDR
// end ;
5392: GO 5288
5394: POP
5395: POP
// if isGameLoad then
5396: LD_VAR 0 1
5400: IFFALSE 5875
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
5402: LD_ADDR_VAR 0 4
5406: PUSH
5407: LD_EXP 6
5411: PUSH
5412: LD_EXP 5
5416: PUSH
5417: LD_EXP 7
5421: PUSH
5422: LD_EXP 4
5426: PUSH
5427: LD_EXP 8
5431: PUSH
5432: LD_EXP 9
5436: PUSH
5437: LD_EXP 10
5441: PUSH
5442: LD_EXP 11
5446: PUSH
5447: LD_EXP 12
5451: PUSH
5452: LD_EXP 13
5456: PUSH
5457: LD_EXP 14
5461: PUSH
5462: LD_EXP 15
5466: PUSH
5467: LD_EXP 16
5471: PUSH
5472: LD_EXP 17
5476: PUSH
5477: LD_EXP 25
5481: PUSH
5482: LD_EXP 26
5486: PUSH
5487: LD_EXP 27
5491: PUSH
5492: LD_EXP 28
5496: PUSH
5497: LD_EXP 30
5501: PUSH
5502: LD_EXP 31
5506: PUSH
5507: LD_EXP 32
5511: PUSH
5512: LD_EXP 35
5516: PUSH
5517: LD_EXP 37
5521: PUSH
5522: LD_EXP 38
5526: PUSH
5527: LD_EXP 39
5531: PUSH
5532: LD_EXP 41
5536: PUSH
5537: LD_EXP 42
5541: PUSH
5542: LD_EXP 45
5546: PUSH
5547: LD_EXP 46
5551: PUSH
5552: LD_EXP 47
5556: PUSH
5557: LD_EXP 48
5561: PUSH
5562: LD_EXP 49
5566: PUSH
5567: LD_EXP 50
5571: PUSH
5572: LD_EXP 51
5576: PUSH
5577: LD_EXP 52
5581: PUSH
5582: LD_EXP 53
5586: PUSH
5587: LD_EXP 18
5591: PUSH
5592: LD_EXP 19
5596: PUSH
5597: LD_EXP 22
5601: PUSH
5602: LD_EXP 23
5606: PUSH
5607: LD_EXP 24
5611: PUSH
5612: LD_EXP 20
5616: PUSH
5617: LD_EXP 21
5621: PUSH
5622: LD_EXP 29
5626: PUSH
5627: LD_EXP 33
5631: PUSH
5632: LD_EXP 34
5636: PUSH
5637: LD_EXP 36
5641: PUSH
5642: LD_EXP 40
5646: PUSH
5647: LD_EXP 43
5651: PUSH
5652: LD_EXP 44
5656: PUSH
5657: LD_EXP 54
5661: PUSH
5662: LD_EXP 55
5666: PUSH
5667: LD_EXP 56
5671: PUSH
5672: LD_EXP 57
5676: PUSH
5677: EMPTY
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: LIST
5683: LIST
5684: LIST
5685: LIST
5686: LIST
5687: LIST
5688: LIST
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: ST_TO_ADDR
// tmp :=  ;
5733: LD_ADDR_VAR 0 3
5737: PUSH
5738: LD_STRING 
5740: ST_TO_ADDR
// for i = 1 to normalCounter do
5741: LD_ADDR_VAR 0 8
5745: PUSH
5746: DOUBLE
5747: LD_INT 1
5749: DEC
5750: ST_TO_ADDR
5751: LD_EXP 2
5755: PUSH
5756: FOR_TO
5757: IFFALSE 5793
// begin if flags [ i ] then
5759: LD_VAR 0 4
5763: PUSH
5764: LD_VAR 0 8
5768: ARRAY
5769: IFFALSE 5791
// tmp := tmp & i & ; ;
5771: LD_ADDR_VAR 0 3
5775: PUSH
5776: LD_VAR 0 3
5780: PUSH
5781: LD_VAR 0 8
5785: STR
5786: PUSH
5787: LD_STRING ;
5789: STR
5790: ST_TO_ADDR
// end ;
5791: GO 5756
5793: POP
5794: POP
// for i = 1 to hardcoreCounter do
5795: LD_ADDR_VAR 0 8
5799: PUSH
5800: DOUBLE
5801: LD_INT 1
5803: DEC
5804: ST_TO_ADDR
5805: LD_EXP 3
5809: PUSH
5810: FOR_TO
5811: IFFALSE 5857
// begin if flags [ normalCounter + i ] then
5813: LD_VAR 0 4
5817: PUSH
5818: LD_EXP 2
5822: PUSH
5823: LD_VAR 0 8
5827: PLUS
5828: ARRAY
5829: IFFALSE 5855
// tmp := tmp & ( 100 + i ) & ; ;
5831: LD_ADDR_VAR 0 3
5835: PUSH
5836: LD_VAR 0 3
5840: PUSH
5841: LD_INT 100
5843: PUSH
5844: LD_VAR 0 8
5848: PLUS
5849: STR
5850: PUSH
5851: LD_STRING ;
5853: STR
5854: ST_TO_ADDR
// end ;
5855: GO 5810
5857: POP
5858: POP
// if tmp then
5859: LD_VAR 0 3
5863: IFFALSE 5875
// active := tmp ;
5865: LD_ADDR_VAR 0 7
5869: PUSH
5870: LD_VAR 0 3
5874: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
5875: LD_STRING getStreamItemsFromMission("
5877: PUSH
5878: LD_VAR 0 5
5882: STR
5883: PUSH
5884: LD_STRING ","
5886: STR
5887: PUSH
5888: LD_VAR 0 6
5892: STR
5893: PUSH
5894: LD_STRING ","
5896: STR
5897: PUSH
5898: LD_VAR 0 7
5902: STR
5903: PUSH
5904: LD_STRING ")
5906: STR
5907: PPUSH
5908: CALL_OW 559
// end else
5912: GO 5921
// ToLua ( getStreamItemsFromMission("","","") ) ;
5914: LD_STRING getStreamItemsFromMission("","","")
5916: PPUSH
5917: CALL_OW 559
// end ;
5921: LD_VAR 0 2
5925: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
5926: LD_EXP 1
5930: PUSH
5931: LD_EXP 6
5935: AND
5936: IFFALSE 6060
5938: GO 5940
5940: DISABLE
5941: LD_INT 0
5943: PPUSH
5944: PPUSH
// begin enable ;
5945: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
5946: LD_ADDR_VAR 0 2
5950: PUSH
5951: LD_INT 22
5953: PUSH
5954: LD_OWVAR 2
5958: PUSH
5959: EMPTY
5960: LIST
5961: LIST
5962: PUSH
5963: LD_INT 2
5965: PUSH
5966: LD_INT 34
5968: PUSH
5969: LD_INT 7
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: PUSH
5976: LD_INT 34
5978: PUSH
5979: LD_INT 45
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: PUSH
5986: LD_INT 34
5988: PUSH
5989: LD_INT 28
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: PUSH
5996: LD_INT 34
5998: PUSH
5999: LD_INT 47
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: PUSH
6006: EMPTY
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: PPUSH
6017: CALL_OW 69
6021: ST_TO_ADDR
// if not tmp then
6022: LD_VAR 0 2
6026: NOT
6027: IFFALSE 6031
// exit ;
6029: GO 6060
// for i in tmp do
6031: LD_ADDR_VAR 0 1
6035: PUSH
6036: LD_VAR 0 2
6040: PUSH
6041: FOR_IN
6042: IFFALSE 6058
// begin SetLives ( i , 0 ) ;
6044: LD_VAR 0 1
6048: PPUSH
6049: LD_INT 0
6051: PPUSH
6052: CALL_OW 234
// end ;
6056: GO 6041
6058: POP
6059: POP
// end ;
6060: PPOPN 2
6062: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
6063: LD_EXP 1
6067: PUSH
6068: LD_EXP 7
6072: AND
6073: IFFALSE 6157
6075: GO 6077
6077: DISABLE
6078: LD_INT 0
6080: PPUSH
6081: PPUSH
// begin enable ;
6082: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
6083: LD_ADDR_VAR 0 2
6087: PUSH
6088: LD_INT 22
6090: PUSH
6091: LD_OWVAR 2
6095: PUSH
6096: EMPTY
6097: LIST
6098: LIST
6099: PUSH
6100: LD_INT 32
6102: PUSH
6103: LD_INT 3
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: PPUSH
6114: CALL_OW 69
6118: ST_TO_ADDR
// if not tmp then
6119: LD_VAR 0 2
6123: NOT
6124: IFFALSE 6128
// exit ;
6126: GO 6157
// for i in tmp do
6128: LD_ADDR_VAR 0 1
6132: PUSH
6133: LD_VAR 0 2
6137: PUSH
6138: FOR_IN
6139: IFFALSE 6155
// begin SetLives ( i , 0 ) ;
6141: LD_VAR 0 1
6145: PPUSH
6146: LD_INT 0
6148: PPUSH
6149: CALL_OW 234
// end ;
6153: GO 6138
6155: POP
6156: POP
// end ;
6157: PPOPN 2
6159: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
6160: LD_EXP 1
6164: PUSH
6165: LD_EXP 4
6169: AND
6170: IFFALSE 6263
6172: GO 6174
6174: DISABLE
6175: LD_INT 0
6177: PPUSH
// begin enable ;
6178: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
6179: LD_ADDR_VAR 0 1
6183: PUSH
6184: LD_INT 22
6186: PUSH
6187: LD_OWVAR 2
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: LD_INT 2
6198: PUSH
6199: LD_INT 25
6201: PUSH
6202: LD_INT 5
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: LD_INT 25
6211: PUSH
6212: LD_INT 9
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: PUSH
6219: LD_INT 25
6221: PUSH
6222: LD_INT 8
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PPUSH
6239: CALL_OW 69
6243: PUSH
6244: FOR_IN
6245: IFFALSE 6261
// begin SetClass ( i , 1 ) ;
6247: LD_VAR 0 1
6251: PPUSH
6252: LD_INT 1
6254: PPUSH
6255: CALL_OW 336
// end ;
6259: GO 6244
6261: POP
6262: POP
// end ;
6263: PPOPN 1
6265: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
6266: LD_EXP 1
6270: PUSH
6271: LD_EXP 5
6275: AND
6276: PUSH
6277: LD_OWVAR 65
6281: PUSH
6282: LD_INT 7
6284: LESS
6285: AND
6286: IFFALSE 6300
6288: GO 6290
6290: DISABLE
// begin enable ;
6291: ENABLE
// game_speed := 7 ;
6292: LD_ADDR_OWVAR 65
6296: PUSH
6297: LD_INT 7
6299: ST_TO_ADDR
// end ;
6300: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
6301: LD_EXP 1
6305: PUSH
6306: LD_EXP 8
6310: AND
6311: IFFALSE 6513
6313: GO 6315
6315: DISABLE
6316: LD_INT 0
6318: PPUSH
6319: PPUSH
6320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
6321: LD_ADDR_VAR 0 3
6325: PUSH
6326: LD_INT 81
6328: PUSH
6329: LD_OWVAR 2
6333: PUSH
6334: EMPTY
6335: LIST
6336: LIST
6337: PUSH
6338: LD_INT 21
6340: PUSH
6341: LD_INT 1
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PPUSH
6352: CALL_OW 69
6356: ST_TO_ADDR
// if not tmp then
6357: LD_VAR 0 3
6361: NOT
6362: IFFALSE 6366
// exit ;
6364: GO 6513
// if tmp > 5 then
6366: LD_VAR 0 3
6370: PUSH
6371: LD_INT 5
6373: GREATER
6374: IFFALSE 6386
// k := 5 else
6376: LD_ADDR_VAR 0 2
6380: PUSH
6381: LD_INT 5
6383: ST_TO_ADDR
6384: GO 6396
// k := tmp ;
6386: LD_ADDR_VAR 0 2
6390: PUSH
6391: LD_VAR 0 3
6395: ST_TO_ADDR
// for i := 1 to k do
6396: LD_ADDR_VAR 0 1
6400: PUSH
6401: DOUBLE
6402: LD_INT 1
6404: DEC
6405: ST_TO_ADDR
6406: LD_VAR 0 2
6410: PUSH
6411: FOR_TO
6412: IFFALSE 6511
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
6414: LD_VAR 0 3
6418: PUSH
6419: LD_VAR 0 1
6423: ARRAY
6424: PPUSH
6425: LD_VAR 0 1
6429: PUSH
6430: LD_INT 4
6432: MOD
6433: PUSH
6434: LD_INT 1
6436: PLUS
6437: PPUSH
6438: CALL_OW 259
6442: PUSH
6443: LD_INT 10
6445: LESS
6446: IFFALSE 6509
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
6448: LD_VAR 0 3
6452: PUSH
6453: LD_VAR 0 1
6457: ARRAY
6458: PPUSH
6459: LD_VAR 0 1
6463: PUSH
6464: LD_INT 4
6466: MOD
6467: PUSH
6468: LD_INT 1
6470: PLUS
6471: PPUSH
6472: LD_VAR 0 3
6476: PUSH
6477: LD_VAR 0 1
6481: ARRAY
6482: PPUSH
6483: LD_VAR 0 1
6487: PUSH
6488: LD_INT 4
6490: MOD
6491: PUSH
6492: LD_INT 1
6494: PLUS
6495: PPUSH
6496: CALL_OW 259
6500: PUSH
6501: LD_INT 1
6503: PLUS
6504: PPUSH
6505: CALL_OW 237
6509: GO 6411
6511: POP
6512: POP
// end ;
6513: PPOPN 3
6515: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
6516: LD_EXP 1
6520: PUSH
6521: LD_EXP 9
6525: AND
6526: IFFALSE 6546
6528: GO 6530
6530: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
6531: LD_INT 4
6533: PPUSH
6534: LD_OWVAR 2
6538: PPUSH
6539: LD_INT 0
6541: PPUSH
6542: CALL_OW 324
6546: END
// every 0 0$1 trigger StreamModeActive and sShovel do
6547: LD_EXP 1
6551: PUSH
6552: LD_EXP 38
6556: AND
6557: IFFALSE 6577
6559: GO 6561
6561: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
6562: LD_INT 19
6564: PPUSH
6565: LD_OWVAR 2
6569: PPUSH
6570: LD_INT 0
6572: PPUSH
6573: CALL_OW 324
6577: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
6578: LD_EXP 1
6582: PUSH
6583: LD_EXP 10
6587: AND
6588: IFFALSE 6690
6590: GO 6592
6592: DISABLE
6593: LD_INT 0
6595: PPUSH
6596: PPUSH
// begin enable ;
6597: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
6598: LD_ADDR_VAR 0 2
6602: PUSH
6603: LD_INT 22
6605: PUSH
6606: LD_OWVAR 2
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: PUSH
6615: LD_INT 2
6617: PUSH
6618: LD_INT 34
6620: PUSH
6621: LD_INT 11
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: PUSH
6628: LD_INT 34
6630: PUSH
6631: LD_INT 30
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: LIST
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PPUSH
6647: CALL_OW 69
6651: ST_TO_ADDR
// if not tmp then
6652: LD_VAR 0 2
6656: NOT
6657: IFFALSE 6661
// exit ;
6659: GO 6690
// for i in tmp do
6661: LD_ADDR_VAR 0 1
6665: PUSH
6666: LD_VAR 0 2
6670: PUSH
6671: FOR_IN
6672: IFFALSE 6688
// begin SetLives ( i , 0 ) ;
6674: LD_VAR 0 1
6678: PPUSH
6679: LD_INT 0
6681: PPUSH
6682: CALL_OW 234
// end ;
6686: GO 6671
6688: POP
6689: POP
// end ;
6690: PPOPN 2
6692: END
// every 0 0$1 trigger StreamModeActive and sBunker do
6693: LD_EXP 1
6697: PUSH
6698: LD_EXP 11
6702: AND
6703: IFFALSE 6723
6705: GO 6707
6707: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
6708: LD_INT 32
6710: PPUSH
6711: LD_OWVAR 2
6715: PPUSH
6716: LD_INT 0
6718: PPUSH
6719: CALL_OW 324
6723: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
6724: LD_EXP 1
6728: PUSH
6729: LD_EXP 12
6733: AND
6734: IFFALSE 6915
6736: GO 6738
6738: DISABLE
6739: LD_INT 0
6741: PPUSH
6742: PPUSH
6743: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
6744: LD_ADDR_VAR 0 2
6748: PUSH
6749: LD_INT 22
6751: PUSH
6752: LD_OWVAR 2
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 33
6763: PUSH
6764: LD_INT 3
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PUSH
6771: EMPTY
6772: LIST
6773: LIST
6774: PPUSH
6775: CALL_OW 69
6779: ST_TO_ADDR
// if not tmp then
6780: LD_VAR 0 2
6784: NOT
6785: IFFALSE 6789
// exit ;
6787: GO 6915
// side := 0 ;
6789: LD_ADDR_VAR 0 3
6793: PUSH
6794: LD_INT 0
6796: ST_TO_ADDR
// for i := 1 to 8 do
6797: LD_ADDR_VAR 0 1
6801: PUSH
6802: DOUBLE
6803: LD_INT 1
6805: DEC
6806: ST_TO_ADDR
6807: LD_INT 8
6809: PUSH
6810: FOR_TO
6811: IFFALSE 6859
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
6813: LD_OWVAR 2
6817: PUSH
6818: LD_VAR 0 1
6822: NONEQUAL
6823: PUSH
6824: LD_OWVAR 2
6828: PPUSH
6829: LD_VAR 0 1
6833: PPUSH
6834: CALL_OW 81
6838: PUSH
6839: LD_INT 2
6841: EQUAL
6842: AND
6843: IFFALSE 6857
// begin side := i ;
6845: LD_ADDR_VAR 0 3
6849: PUSH
6850: LD_VAR 0 1
6854: ST_TO_ADDR
// break ;
6855: GO 6859
// end ;
6857: GO 6810
6859: POP
6860: POP
// if not side then
6861: LD_VAR 0 3
6865: NOT
6866: IFFALSE 6870
// exit ;
6868: GO 6915
// for i := 1 to tmp do
6870: LD_ADDR_VAR 0 1
6874: PUSH
6875: DOUBLE
6876: LD_INT 1
6878: DEC
6879: ST_TO_ADDR
6880: LD_VAR 0 2
6884: PUSH
6885: FOR_TO
6886: IFFALSE 6913
// if Prob ( 60 ) then
6888: LD_INT 60
6890: PPUSH
6891: CALL_OW 13
6895: IFFALSE 6911
// SetSide ( i , side ) ;
6897: LD_VAR 0 1
6901: PPUSH
6902: LD_VAR 0 3
6906: PPUSH
6907: CALL_OW 235
6911: GO 6885
6913: POP
6914: POP
// end ;
6915: PPOPN 3
6917: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
6918: LD_EXP 1
6922: PUSH
6923: LD_EXP 14
6927: AND
6928: IFFALSE 7047
6930: GO 6932
6932: DISABLE
6933: LD_INT 0
6935: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
6936: LD_ADDR_VAR 0 1
6940: PUSH
6941: LD_INT 22
6943: PUSH
6944: LD_OWVAR 2
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PUSH
6953: LD_INT 21
6955: PUSH
6956: LD_INT 1
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PUSH
6963: LD_INT 3
6965: PUSH
6966: LD_INT 23
6968: PUSH
6969: LD_INT 0
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: LIST
6984: PPUSH
6985: CALL_OW 69
6989: PUSH
6990: FOR_IN
6991: IFFALSE 7045
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
6993: LD_VAR 0 1
6997: PPUSH
6998: CALL_OW 257
7002: PUSH
7003: LD_INT 1
7005: PUSH
7006: LD_INT 2
7008: PUSH
7009: LD_INT 3
7011: PUSH
7012: LD_INT 4
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: IN
7021: IFFALSE 7043
// SetClass ( un , rand ( 1 , 4 ) ) ;
7023: LD_VAR 0 1
7027: PPUSH
7028: LD_INT 1
7030: PPUSH
7031: LD_INT 4
7033: PPUSH
7034: CALL_OW 12
7038: PPUSH
7039: CALL_OW 336
7043: GO 6990
7045: POP
7046: POP
// end ;
7047: PPOPN 1
7049: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
7050: LD_EXP 1
7054: PUSH
7055: LD_EXP 13
7059: AND
7060: IFFALSE 7139
7062: GO 7064
7064: DISABLE
7065: LD_INT 0
7067: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7068: LD_ADDR_VAR 0 1
7072: PUSH
7073: LD_INT 22
7075: PUSH
7076: LD_OWVAR 2
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PUSH
7085: LD_INT 21
7087: PUSH
7088: LD_INT 3
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: PPUSH
7099: CALL_OW 69
7103: ST_TO_ADDR
// if not tmp then
7104: LD_VAR 0 1
7108: NOT
7109: IFFALSE 7113
// exit ;
7111: GO 7139
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
7113: LD_VAR 0 1
7117: PUSH
7118: LD_INT 1
7120: PPUSH
7121: LD_VAR 0 1
7125: PPUSH
7126: CALL_OW 12
7130: ARRAY
7131: PPUSH
7132: LD_INT 100
7134: PPUSH
7135: CALL_OW 234
// end ;
7139: PPOPN 1
7141: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
7142: LD_EXP 1
7146: PUSH
7147: LD_EXP 15
7151: AND
7152: IFFALSE 7250
7154: GO 7156
7156: DISABLE
7157: LD_INT 0
7159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
7160: LD_ADDR_VAR 0 1
7164: PUSH
7165: LD_INT 22
7167: PUSH
7168: LD_OWVAR 2
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 21
7179: PUSH
7180: LD_INT 1
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: PPUSH
7191: CALL_OW 69
7195: ST_TO_ADDR
// if not tmp then
7196: LD_VAR 0 1
7200: NOT
7201: IFFALSE 7205
// exit ;
7203: GO 7250
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
7205: LD_VAR 0 1
7209: PUSH
7210: LD_INT 1
7212: PPUSH
7213: LD_VAR 0 1
7217: PPUSH
7218: CALL_OW 12
7222: ARRAY
7223: PPUSH
7224: LD_INT 1
7226: PPUSH
7227: LD_INT 4
7229: PPUSH
7230: CALL_OW 12
7234: PPUSH
7235: LD_INT 3000
7237: PPUSH
7238: LD_INT 9000
7240: PPUSH
7241: CALL_OW 12
7245: PPUSH
7246: CALL_OW 492
// end ;
7250: PPOPN 1
7252: END
// every 0 0$1 trigger StreamModeActive and sDepot do
7253: LD_EXP 1
7257: PUSH
7258: LD_EXP 16
7262: AND
7263: IFFALSE 7283
7265: GO 7267
7267: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
7268: LD_INT 1
7270: PPUSH
7271: LD_OWVAR 2
7275: PPUSH
7276: LD_INT 0
7278: PPUSH
7279: CALL_OW 324
7283: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
7284: LD_EXP 1
7288: PUSH
7289: LD_EXP 17
7293: AND
7294: IFFALSE 7377
7296: GO 7298
7298: DISABLE
7299: LD_INT 0
7301: PPUSH
7302: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7303: LD_ADDR_VAR 0 2
7307: PUSH
7308: LD_INT 22
7310: PUSH
7311: LD_OWVAR 2
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: PUSH
7320: LD_INT 21
7322: PUSH
7323: LD_INT 3
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: PPUSH
7334: CALL_OW 69
7338: ST_TO_ADDR
// if not tmp then
7339: LD_VAR 0 2
7343: NOT
7344: IFFALSE 7348
// exit ;
7346: GO 7377
// for i in tmp do
7348: LD_ADDR_VAR 0 1
7352: PUSH
7353: LD_VAR 0 2
7357: PUSH
7358: FOR_IN
7359: IFFALSE 7375
// SetBLevel ( i , 10 ) ;
7361: LD_VAR 0 1
7365: PPUSH
7366: LD_INT 10
7368: PPUSH
7369: CALL_OW 241
7373: GO 7358
7375: POP
7376: POP
// end ;
7377: PPOPN 2
7379: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
7380: LD_EXP 1
7384: PUSH
7385: LD_EXP 18
7389: AND
7390: IFFALSE 7501
7392: GO 7394
7394: DISABLE
7395: LD_INT 0
7397: PPUSH
7398: PPUSH
7399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
7400: LD_ADDR_VAR 0 3
7404: PUSH
7405: LD_INT 22
7407: PUSH
7408: LD_OWVAR 2
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: PUSH
7417: LD_INT 25
7419: PUSH
7420: LD_INT 1
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: PPUSH
7431: CALL_OW 69
7435: ST_TO_ADDR
// if not tmp then
7436: LD_VAR 0 3
7440: NOT
7441: IFFALSE 7445
// exit ;
7443: GO 7501
// un := tmp [ rand ( 1 , tmp ) ] ;
7445: LD_ADDR_VAR 0 2
7449: PUSH
7450: LD_VAR 0 3
7454: PUSH
7455: LD_INT 1
7457: PPUSH
7458: LD_VAR 0 3
7462: PPUSH
7463: CALL_OW 12
7467: ARRAY
7468: ST_TO_ADDR
// if Crawls ( un ) then
7469: LD_VAR 0 2
7473: PPUSH
7474: CALL_OW 318
7478: IFFALSE 7489
// ComWalk ( un ) ;
7480: LD_VAR 0 2
7484: PPUSH
7485: CALL_OW 138
// SetClass ( un , class_sniper ) ;
7489: LD_VAR 0 2
7493: PPUSH
7494: LD_INT 5
7496: PPUSH
7497: CALL_OW 336
// end ;
7501: PPOPN 3
7503: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
7504: LD_EXP 1
7508: PUSH
7509: LD_EXP 19
7513: AND
7514: PUSH
7515: LD_OWVAR 67
7519: PUSH
7520: LD_INT 4
7522: LESS
7523: AND
7524: IFFALSE 7543
7526: GO 7528
7528: DISABLE
// begin Difficulty := Difficulty + 1 ;
7529: LD_ADDR_OWVAR 67
7533: PUSH
7534: LD_OWVAR 67
7538: PUSH
7539: LD_INT 1
7541: PLUS
7542: ST_TO_ADDR
// end ;
7543: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
7544: LD_EXP 1
7548: PUSH
7549: LD_EXP 20
7553: AND
7554: IFFALSE 7657
7556: GO 7558
7558: DISABLE
7559: LD_INT 0
7561: PPUSH
// begin for i := 1 to 5 do
7562: LD_ADDR_VAR 0 1
7566: PUSH
7567: DOUBLE
7568: LD_INT 1
7570: DEC
7571: ST_TO_ADDR
7572: LD_INT 5
7574: PUSH
7575: FOR_TO
7576: IFFALSE 7655
// begin uc_nation := nation_nature ;
7578: LD_ADDR_OWVAR 21
7582: PUSH
7583: LD_INT 0
7585: ST_TO_ADDR
// uc_side := 0 ;
7586: LD_ADDR_OWVAR 20
7590: PUSH
7591: LD_INT 0
7593: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
7594: LD_ADDR_OWVAR 29
7598: PUSH
7599: LD_INT 12
7601: PUSH
7602: LD_INT 12
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: ST_TO_ADDR
// hc_agressivity := 20 ;
7609: LD_ADDR_OWVAR 35
7613: PUSH
7614: LD_INT 20
7616: ST_TO_ADDR
// hc_class := class_tiger ;
7617: LD_ADDR_OWVAR 28
7621: PUSH
7622: LD_INT 14
7624: ST_TO_ADDR
// hc_gallery :=  ;
7625: LD_ADDR_OWVAR 33
7629: PUSH
7630: LD_STRING 
7632: ST_TO_ADDR
// hc_name :=  ;
7633: LD_ADDR_OWVAR 26
7637: PUSH
7638: LD_STRING 
7640: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
7641: CALL_OW 44
7645: PPUSH
7646: LD_INT 0
7648: PPUSH
7649: CALL_OW 51
// end ;
7653: GO 7575
7655: POP
7656: POP
// end ;
7657: PPOPN 1
7659: END
// every 0 0$1 trigger StreamModeActive and sBomb do
7660: LD_EXP 1
7664: PUSH
7665: LD_EXP 21
7669: AND
7670: IFFALSE 7679
7672: GO 7674
7674: DISABLE
// StreamSibBomb ;
7675: CALL 7680 0 0
7679: END
// export function StreamSibBomb ; var i , x , y ; begin
7680: LD_INT 0
7682: PPUSH
7683: PPUSH
7684: PPUSH
7685: PPUSH
// result := false ;
7686: LD_ADDR_VAR 0 1
7690: PUSH
7691: LD_INT 0
7693: ST_TO_ADDR
// for i := 1 to 16 do
7694: LD_ADDR_VAR 0 2
7698: PUSH
7699: DOUBLE
7700: LD_INT 1
7702: DEC
7703: ST_TO_ADDR
7704: LD_INT 16
7706: PUSH
7707: FOR_TO
7708: IFFALSE 7907
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
7710: LD_ADDR_VAR 0 3
7714: PUSH
7715: LD_INT 10
7717: PUSH
7718: LD_INT 20
7720: PUSH
7721: LD_INT 30
7723: PUSH
7724: LD_INT 40
7726: PUSH
7727: LD_INT 50
7729: PUSH
7730: LD_INT 60
7732: PUSH
7733: LD_INT 70
7735: PUSH
7736: LD_INT 80
7738: PUSH
7739: LD_INT 90
7741: PUSH
7742: LD_INT 100
7744: PUSH
7745: LD_INT 110
7747: PUSH
7748: LD_INT 120
7750: PUSH
7751: LD_INT 130
7753: PUSH
7754: LD_INT 140
7756: PUSH
7757: LD_INT 150
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: PUSH
7777: LD_INT 1
7779: PPUSH
7780: LD_INT 15
7782: PPUSH
7783: CALL_OW 12
7787: ARRAY
7788: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
7789: LD_ADDR_VAR 0 4
7793: PUSH
7794: LD_INT 10
7796: PUSH
7797: LD_INT 20
7799: PUSH
7800: LD_INT 30
7802: PUSH
7803: LD_INT 40
7805: PUSH
7806: LD_INT 50
7808: PUSH
7809: LD_INT 60
7811: PUSH
7812: LD_INT 70
7814: PUSH
7815: LD_INT 80
7817: PUSH
7818: LD_INT 90
7820: PUSH
7821: LD_INT 100
7823: PUSH
7824: LD_INT 110
7826: PUSH
7827: LD_INT 120
7829: PUSH
7830: LD_INT 130
7832: PUSH
7833: LD_INT 140
7835: PUSH
7836: LD_INT 150
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: PUSH
7856: LD_INT 1
7858: PPUSH
7859: LD_INT 15
7861: PPUSH
7862: CALL_OW 12
7866: ARRAY
7867: ST_TO_ADDR
// if ValidHex ( x , y ) then
7868: LD_VAR 0 3
7872: PPUSH
7873: LD_VAR 0 4
7877: PPUSH
7878: CALL_OW 488
7882: IFFALSE 7905
// begin result := [ x , y ] ;
7884: LD_ADDR_VAR 0 1
7888: PUSH
7889: LD_VAR 0 3
7893: PUSH
7894: LD_VAR 0 4
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: ST_TO_ADDR
// break ;
7903: GO 7907
// end ; end ;
7905: GO 7707
7907: POP
7908: POP
// if result then
7909: LD_VAR 0 1
7913: IFFALSE 7973
// begin ToLua ( playSibBomb() ) ;
7915: LD_STRING playSibBomb()
7917: PPUSH
7918: CALL_OW 559
// wait ( 0 0$14 ) ;
7922: LD_INT 490
7924: PPUSH
7925: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
7929: LD_VAR 0 1
7933: PUSH
7934: LD_INT 1
7936: ARRAY
7937: PPUSH
7938: LD_VAR 0 1
7942: PUSH
7943: LD_INT 2
7945: ARRAY
7946: PPUSH
7947: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
7951: LD_VAR 0 1
7955: PUSH
7956: LD_INT 1
7958: ARRAY
7959: PPUSH
7960: LD_VAR 0 1
7964: PUSH
7965: LD_INT 2
7967: ARRAY
7968: PPUSH
7969: CALL_OW 429
// end ; end ;
7973: LD_VAR 0 1
7977: RET
// every 0 0$1 trigger StreamModeActive and sReset do
7978: LD_EXP 1
7982: PUSH
7983: LD_EXP 23
7987: AND
7988: IFFALSE 8000
7990: GO 7992
7992: DISABLE
// YouLost (  ) ;
7993: LD_STRING 
7995: PPUSH
7996: CALL_OW 104
8000: END
// every 0 0$1 trigger StreamModeActive and sFog do
8001: LD_EXP 1
8005: PUSH
8006: LD_EXP 22
8010: AND
8011: IFFALSE 8025
8013: GO 8015
8015: DISABLE
// FogOff ( your_side ) ;
8016: LD_OWVAR 2
8020: PPUSH
8021: CALL_OW 344
8025: END
// every 0 0$1 trigger StreamModeActive and sSun do
8026: LD_EXP 1
8030: PUSH
8031: LD_EXP 24
8035: AND
8036: IFFALSE 8064
8038: GO 8040
8040: DISABLE
// begin solar_recharge_percent := 0 ;
8041: LD_ADDR_OWVAR 79
8045: PUSH
8046: LD_INT 0
8048: ST_TO_ADDR
// wait ( 5 5$00 ) ;
8049: LD_INT 10500
8051: PPUSH
8052: CALL_OW 67
// solar_recharge_percent := 100 ;
8056: LD_ADDR_OWVAR 79
8060: PUSH
8061: LD_INT 100
8063: ST_TO_ADDR
// end ;
8064: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
8065: LD_EXP 1
8069: PUSH
8070: LD_EXP 25
8074: AND
8075: IFFALSE 8314
8077: GO 8079
8079: DISABLE
8080: LD_INT 0
8082: PPUSH
8083: PPUSH
8084: PPUSH
// begin tmp := [ ] ;
8085: LD_ADDR_VAR 0 3
8089: PUSH
8090: EMPTY
8091: ST_TO_ADDR
// for i := 1 to 6 do
8092: LD_ADDR_VAR 0 1
8096: PUSH
8097: DOUBLE
8098: LD_INT 1
8100: DEC
8101: ST_TO_ADDR
8102: LD_INT 6
8104: PUSH
8105: FOR_TO
8106: IFFALSE 8211
// begin uc_nation := nation_nature ;
8108: LD_ADDR_OWVAR 21
8112: PUSH
8113: LD_INT 0
8115: ST_TO_ADDR
// uc_side := 0 ;
8116: LD_ADDR_OWVAR 20
8120: PUSH
8121: LD_INT 0
8123: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8124: LD_ADDR_OWVAR 29
8128: PUSH
8129: LD_INT 12
8131: PUSH
8132: LD_INT 12
8134: PUSH
8135: EMPTY
8136: LIST
8137: LIST
8138: ST_TO_ADDR
// hc_agressivity := 20 ;
8139: LD_ADDR_OWVAR 35
8143: PUSH
8144: LD_INT 20
8146: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
8147: LD_ADDR_OWVAR 28
8151: PUSH
8152: LD_INT 17
8154: ST_TO_ADDR
// hc_gallery :=  ;
8155: LD_ADDR_OWVAR 33
8159: PUSH
8160: LD_STRING 
8162: ST_TO_ADDR
// hc_name :=  ;
8163: LD_ADDR_OWVAR 26
8167: PUSH
8168: LD_STRING 
8170: ST_TO_ADDR
// un := CreateHuman ;
8171: LD_ADDR_VAR 0 2
8175: PUSH
8176: CALL_OW 44
8180: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
8181: LD_VAR 0 2
8185: PPUSH
8186: LD_INT 1
8188: PPUSH
8189: CALL_OW 51
// tmp := tmp ^ un ;
8193: LD_ADDR_VAR 0 3
8197: PUSH
8198: LD_VAR 0 3
8202: PUSH
8203: LD_VAR 0 2
8207: ADD
8208: ST_TO_ADDR
// end ;
8209: GO 8105
8211: POP
8212: POP
// repeat wait ( 0 0$1 ) ;
8213: LD_INT 35
8215: PPUSH
8216: CALL_OW 67
// for un in tmp do
8220: LD_ADDR_VAR 0 2
8224: PUSH
8225: LD_VAR 0 3
8229: PUSH
8230: FOR_IN
8231: IFFALSE 8305
// begin if IsDead ( un ) then
8233: LD_VAR 0 2
8237: PPUSH
8238: CALL_OW 301
8242: IFFALSE 8262
// begin tmp := tmp diff un ;
8244: LD_ADDR_VAR 0 3
8248: PUSH
8249: LD_VAR 0 3
8253: PUSH
8254: LD_VAR 0 2
8258: DIFF
8259: ST_TO_ADDR
// continue ;
8260: GO 8230
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
8262: LD_VAR 0 2
8266: PPUSH
8267: LD_INT 3
8269: PUSH
8270: LD_INT 22
8272: PUSH
8273: LD_INT 0
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: PUSH
8280: EMPTY
8281: LIST
8282: LIST
8283: PPUSH
8284: CALL_OW 69
8288: PPUSH
8289: LD_VAR 0 2
8293: PPUSH
8294: CALL_OW 74
8298: PPUSH
8299: CALL_OW 115
// end ;
8303: GO 8230
8305: POP
8306: POP
// until not tmp ;
8307: LD_VAR 0 3
8311: NOT
8312: IFFALSE 8213
// end ;
8314: PPOPN 3
8316: END
// every 0 0$1 trigger StreamModeActive and sTroll do
8317: LD_EXP 1
8321: PUSH
8322: LD_EXP 26
8326: AND
8327: IFFALSE 8381
8329: GO 8331
8331: DISABLE
// begin ToLua ( displayTroll(); ) ;
8332: LD_STRING displayTroll();
8334: PPUSH
8335: CALL_OW 559
// wait ( 3 3$00 ) ;
8339: LD_INT 6300
8341: PPUSH
8342: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8346: LD_STRING hideTroll();
8348: PPUSH
8349: CALL_OW 559
// wait ( 1 1$00 ) ;
8353: LD_INT 2100
8355: PPUSH
8356: CALL_OW 67
// ToLua ( displayTroll(); ) ;
8360: LD_STRING displayTroll();
8362: PPUSH
8363: CALL_OW 559
// wait ( 1 1$00 ) ;
8367: LD_INT 2100
8369: PPUSH
8370: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8374: LD_STRING hideTroll();
8376: PPUSH
8377: CALL_OW 559
// end ;
8381: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
8382: LD_EXP 1
8386: PUSH
8387: LD_EXP 27
8391: AND
8392: IFFALSE 8455
8394: GO 8396
8396: DISABLE
8397: LD_INT 0
8399: PPUSH
// begin p := 0 ;
8400: LD_ADDR_VAR 0 1
8404: PUSH
8405: LD_INT 0
8407: ST_TO_ADDR
// repeat game_speed := 1 ;
8408: LD_ADDR_OWVAR 65
8412: PUSH
8413: LD_INT 1
8415: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8416: LD_INT 35
8418: PPUSH
8419: CALL_OW 67
// p := p + 1 ;
8423: LD_ADDR_VAR 0 1
8427: PUSH
8428: LD_VAR 0 1
8432: PUSH
8433: LD_INT 1
8435: PLUS
8436: ST_TO_ADDR
// until p >= 60 ;
8437: LD_VAR 0 1
8441: PUSH
8442: LD_INT 60
8444: GREATEREQUAL
8445: IFFALSE 8408
// game_speed := 4 ;
8447: LD_ADDR_OWVAR 65
8451: PUSH
8452: LD_INT 4
8454: ST_TO_ADDR
// end ;
8455: PPOPN 1
8457: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
8458: LD_EXP 1
8462: PUSH
8463: LD_EXP 28
8467: AND
8468: IFFALSE 8614
8470: GO 8472
8472: DISABLE
8473: LD_INT 0
8475: PPUSH
8476: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8477: LD_ADDR_VAR 0 1
8481: PUSH
8482: LD_INT 22
8484: PUSH
8485: LD_OWVAR 2
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: PUSH
8494: LD_INT 2
8496: PUSH
8497: LD_INT 30
8499: PUSH
8500: LD_INT 0
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PUSH
8507: LD_INT 30
8509: PUSH
8510: LD_INT 1
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: LIST
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: PPUSH
8526: CALL_OW 69
8530: ST_TO_ADDR
// if not depot then
8531: LD_VAR 0 1
8535: NOT
8536: IFFALSE 8540
// exit ;
8538: GO 8614
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
8540: LD_ADDR_VAR 0 2
8544: PUSH
8545: LD_VAR 0 1
8549: PUSH
8550: LD_INT 1
8552: PPUSH
8553: LD_VAR 0 1
8557: PPUSH
8558: CALL_OW 12
8562: ARRAY
8563: PPUSH
8564: CALL_OW 274
8568: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
8569: LD_VAR 0 2
8573: PPUSH
8574: LD_INT 1
8576: PPUSH
8577: LD_INT 0
8579: PPUSH
8580: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
8584: LD_VAR 0 2
8588: PPUSH
8589: LD_INT 2
8591: PPUSH
8592: LD_INT 0
8594: PPUSH
8595: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
8599: LD_VAR 0 2
8603: PPUSH
8604: LD_INT 3
8606: PPUSH
8607: LD_INT 0
8609: PPUSH
8610: CALL_OW 277
// end ;
8614: PPOPN 2
8616: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
8617: LD_EXP 1
8621: PUSH
8622: LD_EXP 29
8626: AND
8627: IFFALSE 8724
8629: GO 8631
8631: DISABLE
8632: LD_INT 0
8634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
8635: LD_ADDR_VAR 0 1
8639: PUSH
8640: LD_INT 22
8642: PUSH
8643: LD_OWVAR 2
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: PUSH
8652: LD_INT 21
8654: PUSH
8655: LD_INT 1
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PUSH
8662: LD_INT 3
8664: PUSH
8665: LD_INT 23
8667: PUSH
8668: LD_INT 0
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: PUSH
8675: EMPTY
8676: LIST
8677: LIST
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: LIST
8683: PPUSH
8684: CALL_OW 69
8688: ST_TO_ADDR
// if not tmp then
8689: LD_VAR 0 1
8693: NOT
8694: IFFALSE 8698
// exit ;
8696: GO 8724
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
8698: LD_VAR 0 1
8702: PUSH
8703: LD_INT 1
8705: PPUSH
8706: LD_VAR 0 1
8710: PPUSH
8711: CALL_OW 12
8715: ARRAY
8716: PPUSH
8717: LD_INT 200
8719: PPUSH
8720: CALL_OW 234
// end ;
8724: PPOPN 1
8726: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
8727: LD_EXP 1
8731: PUSH
8732: LD_EXP 30
8736: AND
8737: IFFALSE 8816
8739: GO 8741
8741: DISABLE
8742: LD_INT 0
8744: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
8745: LD_ADDR_VAR 0 1
8749: PUSH
8750: LD_INT 22
8752: PUSH
8753: LD_OWVAR 2
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PUSH
8762: LD_INT 21
8764: PUSH
8765: LD_INT 2
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: PPUSH
8776: CALL_OW 69
8780: ST_TO_ADDR
// if not tmp then
8781: LD_VAR 0 1
8785: NOT
8786: IFFALSE 8790
// exit ;
8788: GO 8816
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
8790: LD_VAR 0 1
8794: PUSH
8795: LD_INT 1
8797: PPUSH
8798: LD_VAR 0 1
8802: PPUSH
8803: CALL_OW 12
8807: ARRAY
8808: PPUSH
8809: LD_INT 60
8811: PPUSH
8812: CALL_OW 234
// end ;
8816: PPOPN 1
8818: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
8819: LD_EXP 1
8823: PUSH
8824: LD_EXP 31
8828: AND
8829: IFFALSE 8928
8831: GO 8833
8833: DISABLE
8834: LD_INT 0
8836: PPUSH
8837: PPUSH
// begin enable ;
8838: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
8839: LD_ADDR_VAR 0 1
8843: PUSH
8844: LD_INT 22
8846: PUSH
8847: LD_OWVAR 2
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PUSH
8856: LD_INT 61
8858: PUSH
8859: EMPTY
8860: LIST
8861: PUSH
8862: LD_INT 33
8864: PUSH
8865: LD_INT 2
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: LIST
8876: PPUSH
8877: CALL_OW 69
8881: ST_TO_ADDR
// if not tmp then
8882: LD_VAR 0 1
8886: NOT
8887: IFFALSE 8891
// exit ;
8889: GO 8928
// for i in tmp do
8891: LD_ADDR_VAR 0 2
8895: PUSH
8896: LD_VAR 0 1
8900: PUSH
8901: FOR_IN
8902: IFFALSE 8926
// if IsControledBy ( i ) then
8904: LD_VAR 0 2
8908: PPUSH
8909: CALL_OW 312
8913: IFFALSE 8924
// ComUnlink ( i ) ;
8915: LD_VAR 0 2
8919: PPUSH
8920: CALL_OW 136
8924: GO 8901
8926: POP
8927: POP
// end ;
8928: PPOPN 2
8930: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
8931: LD_EXP 1
8935: PUSH
8936: LD_EXP 32
8940: AND
8941: IFFALSE 9081
8943: GO 8945
8945: DISABLE
8946: LD_INT 0
8948: PPUSH
8949: PPUSH
// begin ToLua ( displayPowell(); ) ;
8950: LD_STRING displayPowell();
8952: PPUSH
8953: CALL_OW 559
// uc_side := 0 ;
8957: LD_ADDR_OWVAR 20
8961: PUSH
8962: LD_INT 0
8964: ST_TO_ADDR
// uc_nation := 2 ;
8965: LD_ADDR_OWVAR 21
8969: PUSH
8970: LD_INT 2
8972: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
8973: LD_ADDR_OWVAR 37
8977: PUSH
8978: LD_INT 14
8980: ST_TO_ADDR
// vc_engine := engine_siberite ;
8981: LD_ADDR_OWVAR 39
8985: PUSH
8986: LD_INT 3
8988: ST_TO_ADDR
// vc_control := control_apeman ;
8989: LD_ADDR_OWVAR 38
8993: PUSH
8994: LD_INT 5
8996: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
8997: LD_ADDR_OWVAR 40
9001: PUSH
9002: LD_INT 29
9004: ST_TO_ADDR
// un := CreateVehicle ;
9005: LD_ADDR_VAR 0 2
9009: PUSH
9010: CALL_OW 45
9014: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
9015: LD_VAR 0 2
9019: PPUSH
9020: LD_INT 1
9022: PPUSH
9023: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
9027: LD_INT 35
9029: PPUSH
9030: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
9034: LD_VAR 0 2
9038: PPUSH
9039: LD_INT 22
9041: PUSH
9042: LD_OWVAR 2
9046: PUSH
9047: EMPTY
9048: LIST
9049: LIST
9050: PPUSH
9051: CALL_OW 69
9055: PPUSH
9056: LD_VAR 0 2
9060: PPUSH
9061: CALL_OW 74
9065: PPUSH
9066: CALL_OW 115
// until IsDead ( un ) ;
9070: LD_VAR 0 2
9074: PPUSH
9075: CALL_OW 301
9079: IFFALSE 9027
// end ;
9081: PPOPN 2
9083: END
// every 0 0$1 trigger StreamModeActive and sStu do
9084: LD_EXP 1
9088: PUSH
9089: LD_EXP 40
9093: AND
9094: IFFALSE 9110
9096: GO 9098
9098: DISABLE
// begin ToLua ( displayStucuk(); ) ;
9099: LD_STRING displayStucuk();
9101: PPUSH
9102: CALL_OW 559
// ResetFog ;
9106: CALL_OW 335
// end ;
9110: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
9111: LD_EXP 1
9115: PUSH
9116: LD_EXP 33
9120: AND
9121: IFFALSE 9262
9123: GO 9125
9125: DISABLE
9126: LD_INT 0
9128: PPUSH
9129: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9130: LD_ADDR_VAR 0 2
9134: PUSH
9135: LD_INT 22
9137: PUSH
9138: LD_OWVAR 2
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: PUSH
9147: LD_INT 21
9149: PUSH
9150: LD_INT 1
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: PUSH
9157: EMPTY
9158: LIST
9159: LIST
9160: PPUSH
9161: CALL_OW 69
9165: ST_TO_ADDR
// if not tmp then
9166: LD_VAR 0 2
9170: NOT
9171: IFFALSE 9175
// exit ;
9173: GO 9262
// un := tmp [ rand ( 1 , tmp ) ] ;
9175: LD_ADDR_VAR 0 1
9179: PUSH
9180: LD_VAR 0 2
9184: PUSH
9185: LD_INT 1
9187: PPUSH
9188: LD_VAR 0 2
9192: PPUSH
9193: CALL_OW 12
9197: ARRAY
9198: ST_TO_ADDR
// SetSide ( un , 0 ) ;
9199: LD_VAR 0 1
9203: PPUSH
9204: LD_INT 0
9206: PPUSH
9207: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
9211: LD_VAR 0 1
9215: PPUSH
9216: LD_OWVAR 3
9220: PUSH
9221: LD_VAR 0 1
9225: DIFF
9226: PPUSH
9227: LD_VAR 0 1
9231: PPUSH
9232: CALL_OW 74
9236: PPUSH
9237: CALL_OW 115
// wait ( 0 0$20 ) ;
9241: LD_INT 700
9243: PPUSH
9244: CALL_OW 67
// SetSide ( un , your_side ) ;
9248: LD_VAR 0 1
9252: PPUSH
9253: LD_OWVAR 2
9257: PPUSH
9258: CALL_OW 235
// end ;
9262: PPOPN 2
9264: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
9265: LD_EXP 1
9269: PUSH
9270: LD_EXP 34
9274: AND
9275: IFFALSE 9381
9277: GO 9279
9279: DISABLE
9280: LD_INT 0
9282: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9283: LD_ADDR_VAR 0 1
9287: PUSH
9288: LD_INT 22
9290: PUSH
9291: LD_OWVAR 2
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: PUSH
9300: LD_INT 2
9302: PUSH
9303: LD_INT 30
9305: PUSH
9306: LD_INT 0
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: PUSH
9313: LD_INT 30
9315: PUSH
9316: LD_INT 1
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: LIST
9327: PUSH
9328: EMPTY
9329: LIST
9330: LIST
9331: PPUSH
9332: CALL_OW 69
9336: ST_TO_ADDR
// if not depot then
9337: LD_VAR 0 1
9341: NOT
9342: IFFALSE 9346
// exit ;
9344: GO 9381
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
9346: LD_VAR 0 1
9350: PUSH
9351: LD_INT 1
9353: ARRAY
9354: PPUSH
9355: CALL_OW 250
9359: PPUSH
9360: LD_VAR 0 1
9364: PUSH
9365: LD_INT 1
9367: ARRAY
9368: PPUSH
9369: CALL_OW 251
9373: PPUSH
9374: LD_INT 70
9376: PPUSH
9377: CALL_OW 495
// end ;
9381: PPOPN 1
9383: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
9384: LD_EXP 1
9388: PUSH
9389: LD_EXP 35
9393: AND
9394: IFFALSE 9605
9396: GO 9398
9398: DISABLE
9399: LD_INT 0
9401: PPUSH
9402: PPUSH
9403: PPUSH
9404: PPUSH
9405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9406: LD_ADDR_VAR 0 5
9410: PUSH
9411: LD_INT 22
9413: PUSH
9414: LD_OWVAR 2
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: PUSH
9423: LD_INT 21
9425: PUSH
9426: LD_INT 1
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: PPUSH
9437: CALL_OW 69
9441: ST_TO_ADDR
// if not tmp then
9442: LD_VAR 0 5
9446: NOT
9447: IFFALSE 9451
// exit ;
9449: GO 9605
// for i in tmp do
9451: LD_ADDR_VAR 0 1
9455: PUSH
9456: LD_VAR 0 5
9460: PUSH
9461: FOR_IN
9462: IFFALSE 9603
// begin d := rand ( 0 , 5 ) ;
9464: LD_ADDR_VAR 0 4
9468: PUSH
9469: LD_INT 0
9471: PPUSH
9472: LD_INT 5
9474: PPUSH
9475: CALL_OW 12
9479: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
9480: LD_ADDR_VAR 0 2
9484: PUSH
9485: LD_VAR 0 1
9489: PPUSH
9490: CALL_OW 250
9494: PPUSH
9495: LD_VAR 0 4
9499: PPUSH
9500: LD_INT 3
9502: PPUSH
9503: LD_INT 12
9505: PPUSH
9506: CALL_OW 12
9510: PPUSH
9511: CALL_OW 272
9515: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
9516: LD_ADDR_VAR 0 3
9520: PUSH
9521: LD_VAR 0 1
9525: PPUSH
9526: CALL_OW 251
9530: PPUSH
9531: LD_VAR 0 4
9535: PPUSH
9536: LD_INT 3
9538: PPUSH
9539: LD_INT 12
9541: PPUSH
9542: CALL_OW 12
9546: PPUSH
9547: CALL_OW 273
9551: ST_TO_ADDR
// if ValidHex ( x , y ) then
9552: LD_VAR 0 2
9556: PPUSH
9557: LD_VAR 0 3
9561: PPUSH
9562: CALL_OW 488
9566: IFFALSE 9601
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
9568: LD_VAR 0 1
9572: PPUSH
9573: LD_VAR 0 2
9577: PPUSH
9578: LD_VAR 0 3
9582: PPUSH
9583: LD_INT 3
9585: PPUSH
9586: LD_INT 6
9588: PPUSH
9589: CALL_OW 12
9593: PPUSH
9594: LD_INT 1
9596: PPUSH
9597: CALL_OW 483
// end ;
9601: GO 9461
9603: POP
9604: POP
// end ;
9605: PPOPN 5
9607: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
9608: LD_EXP 1
9612: PUSH
9613: LD_EXP 36
9617: AND
9618: IFFALSE 9712
9620: GO 9622
9622: DISABLE
9623: LD_INT 0
9625: PPUSH
9626: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
9627: LD_ADDR_VAR 0 2
9631: PUSH
9632: LD_INT 22
9634: PUSH
9635: LD_OWVAR 2
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: LD_INT 32
9646: PUSH
9647: LD_INT 1
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: PUSH
9654: LD_INT 21
9656: PUSH
9657: LD_INT 2
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: LIST
9668: PPUSH
9669: CALL_OW 69
9673: ST_TO_ADDR
// if not tmp then
9674: LD_VAR 0 2
9678: NOT
9679: IFFALSE 9683
// exit ;
9681: GO 9712
// for i in tmp do
9683: LD_ADDR_VAR 0 1
9687: PUSH
9688: LD_VAR 0 2
9692: PUSH
9693: FOR_IN
9694: IFFALSE 9710
// SetFuel ( i , 0 ) ;
9696: LD_VAR 0 1
9700: PPUSH
9701: LD_INT 0
9703: PPUSH
9704: CALL_OW 240
9708: GO 9693
9710: POP
9711: POP
// end ;
9712: PPOPN 2
9714: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
9715: LD_EXP 1
9719: PUSH
9720: LD_EXP 37
9724: AND
9725: IFFALSE 9791
9727: GO 9729
9729: DISABLE
9730: LD_INT 0
9732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
9733: LD_ADDR_VAR 0 1
9737: PUSH
9738: LD_INT 22
9740: PUSH
9741: LD_OWVAR 2
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: PUSH
9750: LD_INT 30
9752: PUSH
9753: LD_INT 29
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: PPUSH
9764: CALL_OW 69
9768: ST_TO_ADDR
// if not tmp then
9769: LD_VAR 0 1
9773: NOT
9774: IFFALSE 9778
// exit ;
9776: GO 9791
// DestroyUnit ( tmp [ 1 ] ) ;
9778: LD_VAR 0 1
9782: PUSH
9783: LD_INT 1
9785: ARRAY
9786: PPUSH
9787: CALL_OW 65
// end ;
9791: PPOPN 1
9793: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
9794: LD_EXP 1
9798: PUSH
9799: LD_EXP 39
9803: AND
9804: IFFALSE 9933
9806: GO 9808
9808: DISABLE
9809: LD_INT 0
9811: PPUSH
// begin uc_side := 0 ;
9812: LD_ADDR_OWVAR 20
9816: PUSH
9817: LD_INT 0
9819: ST_TO_ADDR
// uc_nation := nation_arabian ;
9820: LD_ADDR_OWVAR 21
9824: PUSH
9825: LD_INT 2
9827: ST_TO_ADDR
// hc_gallery :=  ;
9828: LD_ADDR_OWVAR 33
9832: PUSH
9833: LD_STRING 
9835: ST_TO_ADDR
// hc_name :=  ;
9836: LD_ADDR_OWVAR 26
9840: PUSH
9841: LD_STRING 
9843: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
9844: LD_INT 1
9846: PPUSH
9847: LD_INT 11
9849: PPUSH
9850: LD_INT 10
9852: PPUSH
9853: CALL_OW 380
// un := CreateHuman ;
9857: LD_ADDR_VAR 0 1
9861: PUSH
9862: CALL_OW 44
9866: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
9867: LD_VAR 0 1
9871: PPUSH
9872: LD_INT 1
9874: PPUSH
9875: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
9879: LD_INT 35
9881: PPUSH
9882: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
9886: LD_VAR 0 1
9890: PPUSH
9891: LD_INT 22
9893: PUSH
9894: LD_OWVAR 2
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PPUSH
9903: CALL_OW 69
9907: PPUSH
9908: LD_VAR 0 1
9912: PPUSH
9913: CALL_OW 74
9917: PPUSH
9918: CALL_OW 115
// until IsDead ( un ) ;
9922: LD_VAR 0 1
9926: PPUSH
9927: CALL_OW 301
9931: IFFALSE 9879
// end ;
9933: PPOPN 1
9935: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
9936: LD_EXP 1
9940: PUSH
9941: LD_EXP 41
9945: AND
9946: IFFALSE 9958
9948: GO 9950
9950: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
9951: LD_STRING earthquake(getX(game), 0, 32)
9953: PPUSH
9954: CALL_OW 559
9958: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
9959: LD_EXP 1
9963: PUSH
9964: LD_EXP 42
9968: AND
9969: IFFALSE 10060
9971: GO 9973
9973: DISABLE
9974: LD_INT 0
9976: PPUSH
// begin enable ;
9977: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
9978: LD_ADDR_VAR 0 1
9982: PUSH
9983: LD_INT 22
9985: PUSH
9986: LD_OWVAR 2
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PUSH
9995: LD_INT 21
9997: PUSH
9998: LD_INT 2
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: PUSH
10005: LD_INT 33
10007: PUSH
10008: LD_INT 3
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: LIST
10019: PPUSH
10020: CALL_OW 69
10024: ST_TO_ADDR
// if not tmp then
10025: LD_VAR 0 1
10029: NOT
10030: IFFALSE 10034
// exit ;
10032: GO 10060
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
10034: LD_VAR 0 1
10038: PUSH
10039: LD_INT 1
10041: PPUSH
10042: LD_VAR 0 1
10046: PPUSH
10047: CALL_OW 12
10051: ARRAY
10052: PPUSH
10053: LD_INT 1
10055: PPUSH
10056: CALL_OW 234
// end ;
10060: PPOPN 1
10062: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
10063: LD_EXP 1
10067: PUSH
10068: LD_EXP 43
10072: AND
10073: IFFALSE 10214
10075: GO 10077
10077: DISABLE
10078: LD_INT 0
10080: PPUSH
10081: PPUSH
10082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10083: LD_ADDR_VAR 0 3
10087: PUSH
10088: LD_INT 22
10090: PUSH
10091: LD_OWVAR 2
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PUSH
10100: LD_INT 25
10102: PUSH
10103: LD_INT 1
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: PPUSH
10114: CALL_OW 69
10118: ST_TO_ADDR
// if not tmp then
10119: LD_VAR 0 3
10123: NOT
10124: IFFALSE 10128
// exit ;
10126: GO 10214
// un := tmp [ rand ( 1 , tmp ) ] ;
10128: LD_ADDR_VAR 0 2
10132: PUSH
10133: LD_VAR 0 3
10137: PUSH
10138: LD_INT 1
10140: PPUSH
10141: LD_VAR 0 3
10145: PPUSH
10146: CALL_OW 12
10150: ARRAY
10151: ST_TO_ADDR
// if Crawls ( un ) then
10152: LD_VAR 0 2
10156: PPUSH
10157: CALL_OW 318
10161: IFFALSE 10172
// ComWalk ( un ) ;
10163: LD_VAR 0 2
10167: PPUSH
10168: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
10172: LD_VAR 0 2
10176: PPUSH
10177: LD_INT 9
10179: PPUSH
10180: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
10184: LD_INT 28
10186: PPUSH
10187: LD_OWVAR 2
10191: PPUSH
10192: LD_INT 2
10194: PPUSH
10195: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
10199: LD_INT 29
10201: PPUSH
10202: LD_OWVAR 2
10206: PPUSH
10207: LD_INT 2
10209: PPUSH
10210: CALL_OW 322
// end ;
10214: PPOPN 3
10216: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
10217: LD_EXP 1
10221: PUSH
10222: LD_EXP 44
10226: AND
10227: IFFALSE 10338
10229: GO 10231
10231: DISABLE
10232: LD_INT 0
10234: PPUSH
10235: PPUSH
10236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10237: LD_ADDR_VAR 0 3
10241: PUSH
10242: LD_INT 22
10244: PUSH
10245: LD_OWVAR 2
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: LD_INT 25
10256: PUSH
10257: LD_INT 1
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: PPUSH
10268: CALL_OW 69
10272: ST_TO_ADDR
// if not tmp then
10273: LD_VAR 0 3
10277: NOT
10278: IFFALSE 10282
// exit ;
10280: GO 10338
// un := tmp [ rand ( 1 , tmp ) ] ;
10282: LD_ADDR_VAR 0 2
10286: PUSH
10287: LD_VAR 0 3
10291: PUSH
10292: LD_INT 1
10294: PPUSH
10295: LD_VAR 0 3
10299: PPUSH
10300: CALL_OW 12
10304: ARRAY
10305: ST_TO_ADDR
// if Crawls ( un ) then
10306: LD_VAR 0 2
10310: PPUSH
10311: CALL_OW 318
10315: IFFALSE 10326
// ComWalk ( un ) ;
10317: LD_VAR 0 2
10321: PPUSH
10322: CALL_OW 138
// SetClass ( un , class_mortar ) ;
10326: LD_VAR 0 2
10330: PPUSH
10331: LD_INT 8
10333: PPUSH
10334: CALL_OW 336
// end ;
10338: PPOPN 3
10340: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
10341: LD_EXP 1
10345: PUSH
10346: LD_EXP 45
10350: AND
10351: IFFALSE 10495
10353: GO 10355
10355: DISABLE
10356: LD_INT 0
10358: PPUSH
10359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
10360: LD_ADDR_VAR 0 2
10364: PUSH
10365: LD_INT 22
10367: PUSH
10368: LD_OWVAR 2
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: LD_INT 21
10379: PUSH
10380: LD_INT 2
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: LD_INT 2
10389: PUSH
10390: LD_INT 34
10392: PUSH
10393: LD_INT 12
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: LD_INT 34
10402: PUSH
10403: LD_INT 51
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: PUSH
10410: LD_INT 34
10412: PUSH
10413: LD_INT 32
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: LIST
10430: PPUSH
10431: CALL_OW 69
10435: ST_TO_ADDR
// if not tmp then
10436: LD_VAR 0 2
10440: NOT
10441: IFFALSE 10445
// exit ;
10443: GO 10495
// for i in tmp do
10445: LD_ADDR_VAR 0 1
10449: PUSH
10450: LD_VAR 0 2
10454: PUSH
10455: FOR_IN
10456: IFFALSE 10493
// if GetCargo ( i , mat_artifact ) = 0 then
10458: LD_VAR 0 1
10462: PPUSH
10463: LD_INT 4
10465: PPUSH
10466: CALL_OW 289
10470: PUSH
10471: LD_INT 0
10473: EQUAL
10474: IFFALSE 10491
// SetCargo ( i , mat_siberit , 100 ) ;
10476: LD_VAR 0 1
10480: PPUSH
10481: LD_INT 3
10483: PPUSH
10484: LD_INT 100
10486: PPUSH
10487: CALL_OW 290
10491: GO 10455
10493: POP
10494: POP
// end ;
10495: PPOPN 2
10497: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
10498: LD_EXP 1
10502: PUSH
10503: LD_EXP 46
10507: AND
10508: IFFALSE 10691
10510: GO 10512
10512: DISABLE
10513: LD_INT 0
10515: PPUSH
10516: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
10517: LD_ADDR_VAR 0 2
10521: PUSH
10522: LD_INT 22
10524: PUSH
10525: LD_OWVAR 2
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: PPUSH
10534: CALL_OW 69
10538: ST_TO_ADDR
// if not tmp then
10539: LD_VAR 0 2
10543: NOT
10544: IFFALSE 10548
// exit ;
10546: GO 10691
// for i := 1 to 2 do
10548: LD_ADDR_VAR 0 1
10552: PUSH
10553: DOUBLE
10554: LD_INT 1
10556: DEC
10557: ST_TO_ADDR
10558: LD_INT 2
10560: PUSH
10561: FOR_TO
10562: IFFALSE 10689
// begin uc_side := your_side ;
10564: LD_ADDR_OWVAR 20
10568: PUSH
10569: LD_OWVAR 2
10573: ST_TO_ADDR
// uc_nation := nation_american ;
10574: LD_ADDR_OWVAR 21
10578: PUSH
10579: LD_INT 1
10581: ST_TO_ADDR
// vc_chassis := us_morphling ;
10582: LD_ADDR_OWVAR 37
10586: PUSH
10587: LD_INT 5
10589: ST_TO_ADDR
// vc_engine := engine_siberite ;
10590: LD_ADDR_OWVAR 39
10594: PUSH
10595: LD_INT 3
10597: ST_TO_ADDR
// vc_control := control_computer ;
10598: LD_ADDR_OWVAR 38
10602: PUSH
10603: LD_INT 3
10605: ST_TO_ADDR
// vc_weapon := us_double_laser ;
10606: LD_ADDR_OWVAR 40
10610: PUSH
10611: LD_INT 10
10613: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
10614: LD_VAR 0 2
10618: PUSH
10619: LD_INT 1
10621: ARRAY
10622: PPUSH
10623: CALL_OW 310
10627: NOT
10628: IFFALSE 10675
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
10630: CALL_OW 45
10634: PPUSH
10635: LD_VAR 0 2
10639: PUSH
10640: LD_INT 1
10642: ARRAY
10643: PPUSH
10644: CALL_OW 250
10648: PPUSH
10649: LD_VAR 0 2
10653: PUSH
10654: LD_INT 1
10656: ARRAY
10657: PPUSH
10658: CALL_OW 251
10662: PPUSH
10663: LD_INT 12
10665: PPUSH
10666: LD_INT 1
10668: PPUSH
10669: CALL_OW 50
10673: GO 10687
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
10675: CALL_OW 45
10679: PPUSH
10680: LD_INT 1
10682: PPUSH
10683: CALL_OW 51
// end ;
10687: GO 10561
10689: POP
10690: POP
// end ;
10691: PPOPN 2
10693: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
10694: LD_EXP 1
10698: PUSH
10699: LD_EXP 47
10703: AND
10704: IFFALSE 10926
10706: GO 10708
10708: DISABLE
10709: LD_INT 0
10711: PPUSH
10712: PPUSH
10713: PPUSH
10714: PPUSH
10715: PPUSH
10716: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10717: LD_ADDR_VAR 0 6
10721: PUSH
10722: LD_INT 22
10724: PUSH
10725: LD_OWVAR 2
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: PUSH
10734: LD_INT 21
10736: PUSH
10737: LD_INT 1
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: PUSH
10744: LD_INT 3
10746: PUSH
10747: LD_INT 23
10749: PUSH
10750: LD_INT 0
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PUSH
10761: EMPTY
10762: LIST
10763: LIST
10764: LIST
10765: PPUSH
10766: CALL_OW 69
10770: ST_TO_ADDR
// if not tmp then
10771: LD_VAR 0 6
10775: NOT
10776: IFFALSE 10780
// exit ;
10778: GO 10926
// s1 := rand ( 1 , 4 ) ;
10780: LD_ADDR_VAR 0 2
10784: PUSH
10785: LD_INT 1
10787: PPUSH
10788: LD_INT 4
10790: PPUSH
10791: CALL_OW 12
10795: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
10796: LD_ADDR_VAR 0 4
10800: PUSH
10801: LD_VAR 0 6
10805: PUSH
10806: LD_INT 1
10808: ARRAY
10809: PPUSH
10810: LD_VAR 0 2
10814: PPUSH
10815: CALL_OW 259
10819: ST_TO_ADDR
// if s1 = 1 then
10820: LD_VAR 0 2
10824: PUSH
10825: LD_INT 1
10827: EQUAL
10828: IFFALSE 10848
// s2 := rand ( 2 , 4 ) else
10830: LD_ADDR_VAR 0 3
10834: PUSH
10835: LD_INT 2
10837: PPUSH
10838: LD_INT 4
10840: PPUSH
10841: CALL_OW 12
10845: ST_TO_ADDR
10846: GO 10856
// s2 := 1 ;
10848: LD_ADDR_VAR 0 3
10852: PUSH
10853: LD_INT 1
10855: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
10856: LD_ADDR_VAR 0 5
10860: PUSH
10861: LD_VAR 0 6
10865: PUSH
10866: LD_INT 1
10868: ARRAY
10869: PPUSH
10870: LD_VAR 0 3
10874: PPUSH
10875: CALL_OW 259
10879: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
10880: LD_VAR 0 6
10884: PUSH
10885: LD_INT 1
10887: ARRAY
10888: PPUSH
10889: LD_VAR 0 2
10893: PPUSH
10894: LD_VAR 0 5
10898: PPUSH
10899: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
10903: LD_VAR 0 6
10907: PUSH
10908: LD_INT 1
10910: ARRAY
10911: PPUSH
10912: LD_VAR 0 3
10916: PPUSH
10917: LD_VAR 0 4
10921: PPUSH
10922: CALL_OW 237
// end ;
10926: PPOPN 6
10928: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
10929: LD_EXP 1
10933: PUSH
10934: LD_EXP 48
10938: AND
10939: IFFALSE 11018
10941: GO 10943
10943: DISABLE
10944: LD_INT 0
10946: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
10947: LD_ADDR_VAR 0 1
10951: PUSH
10952: LD_INT 22
10954: PUSH
10955: LD_OWVAR 2
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PUSH
10964: LD_INT 30
10966: PUSH
10967: LD_INT 3
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: PPUSH
10978: CALL_OW 69
10982: ST_TO_ADDR
// if not tmp then
10983: LD_VAR 0 1
10987: NOT
10988: IFFALSE 10992
// exit ;
10990: GO 11018
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
10992: LD_VAR 0 1
10996: PUSH
10997: LD_INT 1
10999: PPUSH
11000: LD_VAR 0 1
11004: PPUSH
11005: CALL_OW 12
11009: ARRAY
11010: PPUSH
11011: LD_INT 1
11013: PPUSH
11014: CALL_OW 234
// end ;
11018: PPOPN 1
11020: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
11021: LD_EXP 1
11025: PUSH
11026: LD_EXP 49
11030: AND
11031: IFFALSE 11143
11033: GO 11035
11035: DISABLE
11036: LD_INT 0
11038: PPUSH
11039: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
11040: LD_ADDR_VAR 0 2
11044: PUSH
11045: LD_INT 22
11047: PUSH
11048: LD_OWVAR 2
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: PUSH
11057: LD_INT 2
11059: PUSH
11060: LD_INT 30
11062: PUSH
11063: LD_INT 27
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PUSH
11070: LD_INT 30
11072: PUSH
11073: LD_INT 26
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PUSH
11080: LD_INT 30
11082: PUSH
11083: LD_INT 28
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: PPUSH
11100: CALL_OW 69
11104: ST_TO_ADDR
// if not tmp then
11105: LD_VAR 0 2
11109: NOT
11110: IFFALSE 11114
// exit ;
11112: GO 11143
// for i in tmp do
11114: LD_ADDR_VAR 0 1
11118: PUSH
11119: LD_VAR 0 2
11123: PUSH
11124: FOR_IN
11125: IFFALSE 11141
// SetLives ( i , 1 ) ;
11127: LD_VAR 0 1
11131: PPUSH
11132: LD_INT 1
11134: PPUSH
11135: CALL_OW 234
11139: GO 11124
11141: POP
11142: POP
// end ;
11143: PPOPN 2
11145: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
11146: LD_EXP 1
11150: PUSH
11151: LD_EXP 50
11155: AND
11156: IFFALSE 11443
11158: GO 11160
11160: DISABLE
11161: LD_INT 0
11163: PPUSH
11164: PPUSH
11165: PPUSH
// begin i := rand ( 1 , 7 ) ;
11166: LD_ADDR_VAR 0 1
11170: PUSH
11171: LD_INT 1
11173: PPUSH
11174: LD_INT 7
11176: PPUSH
11177: CALL_OW 12
11181: ST_TO_ADDR
// case i of 1 :
11182: LD_VAR 0 1
11186: PUSH
11187: LD_INT 1
11189: DOUBLE
11190: EQUAL
11191: IFTRUE 11195
11193: GO 11205
11195: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
11196: LD_STRING earthquake(getX(game), 0, 32)
11198: PPUSH
11199: CALL_OW 559
11203: GO 11443
11205: LD_INT 2
11207: DOUBLE
11208: EQUAL
11209: IFTRUE 11213
11211: GO 11227
11213: POP
// begin ToLua ( displayStucuk(); ) ;
11214: LD_STRING displayStucuk();
11216: PPUSH
11217: CALL_OW 559
// ResetFog ;
11221: CALL_OW 335
// end ; 3 :
11225: GO 11443
11227: LD_INT 3
11229: DOUBLE
11230: EQUAL
11231: IFTRUE 11235
11233: GO 11339
11235: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11236: LD_ADDR_VAR 0 2
11240: PUSH
11241: LD_INT 22
11243: PUSH
11244: LD_OWVAR 2
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: PUSH
11253: LD_INT 25
11255: PUSH
11256: LD_INT 1
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PPUSH
11267: CALL_OW 69
11271: ST_TO_ADDR
// if not tmp then
11272: LD_VAR 0 2
11276: NOT
11277: IFFALSE 11281
// exit ;
11279: GO 11443
// un := tmp [ rand ( 1 , tmp ) ] ;
11281: LD_ADDR_VAR 0 3
11285: PUSH
11286: LD_VAR 0 2
11290: PUSH
11291: LD_INT 1
11293: PPUSH
11294: LD_VAR 0 2
11298: PPUSH
11299: CALL_OW 12
11303: ARRAY
11304: ST_TO_ADDR
// if Crawls ( un ) then
11305: LD_VAR 0 3
11309: PPUSH
11310: CALL_OW 318
11314: IFFALSE 11325
// ComWalk ( un ) ;
11316: LD_VAR 0 3
11320: PPUSH
11321: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11325: LD_VAR 0 3
11329: PPUSH
11330: LD_INT 8
11332: PPUSH
11333: CALL_OW 336
// end ; 4 :
11337: GO 11443
11339: LD_INT 4
11341: DOUBLE
11342: EQUAL
11343: IFTRUE 11347
11345: GO 11421
11347: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11348: LD_ADDR_VAR 0 2
11352: PUSH
11353: LD_INT 22
11355: PUSH
11356: LD_OWVAR 2
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: LD_INT 30
11367: PUSH
11368: LD_INT 29
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PPUSH
11379: CALL_OW 69
11383: ST_TO_ADDR
// if not tmp then
11384: LD_VAR 0 2
11388: NOT
11389: IFFALSE 11393
// exit ;
11391: GO 11443
// CenterNowOnUnits ( tmp [ 1 ] ) ;
11393: LD_VAR 0 2
11397: PUSH
11398: LD_INT 1
11400: ARRAY
11401: PPUSH
11402: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
11406: LD_VAR 0 2
11410: PUSH
11411: LD_INT 1
11413: ARRAY
11414: PPUSH
11415: CALL_OW 65
// end ; 5 .. 7 :
11419: GO 11443
11421: LD_INT 5
11423: DOUBLE
11424: GREATEREQUAL
11425: IFFALSE 11433
11427: LD_INT 7
11429: DOUBLE
11430: LESSEQUAL
11431: IFTRUE 11435
11433: GO 11442
11435: POP
// StreamSibBomb ; end ;
11436: CALL 7680 0 0
11440: GO 11443
11442: POP
// end ;
11443: PPOPN 3
11445: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
11446: LD_EXP 1
11450: PUSH
11451: LD_EXP 51
11455: AND
11456: IFFALSE 11612
11458: GO 11460
11460: DISABLE
11461: LD_INT 0
11463: PPUSH
11464: PPUSH
11465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
11466: LD_ADDR_VAR 0 2
11470: PUSH
11471: LD_INT 81
11473: PUSH
11474: LD_OWVAR 2
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PUSH
11483: LD_INT 2
11485: PUSH
11486: LD_INT 21
11488: PUSH
11489: LD_INT 1
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PUSH
11496: LD_INT 21
11498: PUSH
11499: LD_INT 2
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: LIST
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PPUSH
11515: CALL_OW 69
11519: ST_TO_ADDR
// if not tmp then
11520: LD_VAR 0 2
11524: NOT
11525: IFFALSE 11529
// exit ;
11527: GO 11612
// p := 0 ;
11529: LD_ADDR_VAR 0 3
11533: PUSH
11534: LD_INT 0
11536: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11537: LD_INT 35
11539: PPUSH
11540: CALL_OW 67
// p := p + 1 ;
11544: LD_ADDR_VAR 0 3
11548: PUSH
11549: LD_VAR 0 3
11553: PUSH
11554: LD_INT 1
11556: PLUS
11557: ST_TO_ADDR
// for i in tmp do
11558: LD_ADDR_VAR 0 1
11562: PUSH
11563: LD_VAR 0 2
11567: PUSH
11568: FOR_IN
11569: IFFALSE 11600
// if GetLives ( i ) < 1000 then
11571: LD_VAR 0 1
11575: PPUSH
11576: CALL_OW 256
11580: PUSH
11581: LD_INT 1000
11583: LESS
11584: IFFALSE 11598
// SetLives ( i , 1000 ) ;
11586: LD_VAR 0 1
11590: PPUSH
11591: LD_INT 1000
11593: PPUSH
11594: CALL_OW 234
11598: GO 11568
11600: POP
11601: POP
// until p > 20 ;
11602: LD_VAR 0 3
11606: PUSH
11607: LD_INT 20
11609: GREATER
11610: IFFALSE 11537
// end ;
11612: PPOPN 3
11614: END
// every 0 0$1 trigger StreamModeActive and sTime do
11615: LD_EXP 1
11619: PUSH
11620: LD_EXP 52
11624: AND
11625: IFFALSE 11660
11627: GO 11629
11629: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
11630: LD_INT 28
11632: PPUSH
11633: LD_OWVAR 2
11637: PPUSH
11638: LD_INT 2
11640: PPUSH
11641: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
11645: LD_INT 30
11647: PPUSH
11648: LD_OWVAR 2
11652: PPUSH
11653: LD_INT 2
11655: PPUSH
11656: CALL_OW 322
// end ;
11660: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
11661: LD_EXP 1
11665: PUSH
11666: LD_EXP 53
11670: AND
11671: IFFALSE 11792
11673: GO 11675
11675: DISABLE
11676: LD_INT 0
11678: PPUSH
11679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11680: LD_ADDR_VAR 0 2
11684: PUSH
11685: LD_INT 22
11687: PUSH
11688: LD_OWVAR 2
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: LD_INT 21
11699: PUSH
11700: LD_INT 1
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: LD_INT 3
11709: PUSH
11710: LD_INT 23
11712: PUSH
11713: LD_INT 0
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: LIST
11728: PPUSH
11729: CALL_OW 69
11733: ST_TO_ADDR
// if not tmp then
11734: LD_VAR 0 2
11738: NOT
11739: IFFALSE 11743
// exit ;
11741: GO 11792
// for i in tmp do
11743: LD_ADDR_VAR 0 1
11747: PUSH
11748: LD_VAR 0 2
11752: PUSH
11753: FOR_IN
11754: IFFALSE 11790
// begin if Crawls ( i ) then
11756: LD_VAR 0 1
11760: PPUSH
11761: CALL_OW 318
11765: IFFALSE 11776
// ComWalk ( i ) ;
11767: LD_VAR 0 1
11771: PPUSH
11772: CALL_OW 138
// SetClass ( i , 2 ) ;
11776: LD_VAR 0 1
11780: PPUSH
11781: LD_INT 2
11783: PPUSH
11784: CALL_OW 336
// end ;
11788: GO 11753
11790: POP
11791: POP
// end ;
11792: PPOPN 2
11794: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
11795: LD_EXP 1
11799: PUSH
11800: LD_EXP 54
11804: AND
11805: IFFALSE 12093
11807: GO 11809
11809: DISABLE
11810: LD_INT 0
11812: PPUSH
11813: PPUSH
11814: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
11815: LD_OWVAR 2
11819: PPUSH
11820: LD_INT 9
11822: PPUSH
11823: LD_INT 1
11825: PPUSH
11826: LD_INT 1
11828: PPUSH
11829: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
11833: LD_INT 9
11835: PPUSH
11836: LD_OWVAR 2
11840: PPUSH
11841: CALL_OW 343
// uc_side := 9 ;
11845: LD_ADDR_OWVAR 20
11849: PUSH
11850: LD_INT 9
11852: ST_TO_ADDR
// uc_nation := 2 ;
11853: LD_ADDR_OWVAR 21
11857: PUSH
11858: LD_INT 2
11860: ST_TO_ADDR
// hc_name := Dark Warrior ;
11861: LD_ADDR_OWVAR 26
11865: PUSH
11866: LD_STRING Dark Warrior
11868: ST_TO_ADDR
// hc_gallery :=  ;
11869: LD_ADDR_OWVAR 33
11873: PUSH
11874: LD_STRING 
11876: ST_TO_ADDR
// hc_noskilllimit := true ;
11877: LD_ADDR_OWVAR 76
11881: PUSH
11882: LD_INT 1
11884: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
11885: LD_ADDR_OWVAR 31
11889: PUSH
11890: LD_INT 30
11892: PUSH
11893: LD_INT 30
11895: PUSH
11896: LD_INT 30
11898: PUSH
11899: LD_INT 30
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: ST_TO_ADDR
// un := CreateHuman ;
11908: LD_ADDR_VAR 0 3
11912: PUSH
11913: CALL_OW 44
11917: ST_TO_ADDR
// hc_noskilllimit := false ;
11918: LD_ADDR_OWVAR 76
11922: PUSH
11923: LD_INT 0
11925: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11926: LD_VAR 0 3
11930: PPUSH
11931: LD_INT 1
11933: PPUSH
11934: CALL_OW 51
// ToLua ( playRanger() ) ;
11938: LD_STRING playRanger()
11940: PPUSH
11941: CALL_OW 559
// p := 0 ;
11945: LD_ADDR_VAR 0 2
11949: PUSH
11950: LD_INT 0
11952: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11953: LD_INT 35
11955: PPUSH
11956: CALL_OW 67
// p := p + 1 ;
11960: LD_ADDR_VAR 0 2
11964: PUSH
11965: LD_VAR 0 2
11969: PUSH
11970: LD_INT 1
11972: PLUS
11973: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
11974: LD_VAR 0 3
11978: PPUSH
11979: CALL_OW 256
11983: PUSH
11984: LD_INT 1000
11986: LESS
11987: IFFALSE 12001
// SetLives ( un , 1000 ) ;
11989: LD_VAR 0 3
11993: PPUSH
11994: LD_INT 1000
11996: PPUSH
11997: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
12001: LD_VAR 0 3
12005: PPUSH
12006: LD_INT 81
12008: PUSH
12009: LD_OWVAR 2
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PUSH
12018: LD_INT 91
12020: PUSH
12021: LD_VAR 0 3
12025: PUSH
12026: LD_INT 30
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: LIST
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PPUSH
12038: CALL_OW 69
12042: PPUSH
12043: LD_VAR 0 3
12047: PPUSH
12048: CALL_OW 74
12052: PPUSH
12053: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
12057: LD_VAR 0 2
12061: PUSH
12062: LD_INT 80
12064: GREATER
12065: PUSH
12066: LD_VAR 0 3
12070: PPUSH
12071: CALL_OW 301
12075: OR
12076: IFFALSE 11953
// if un then
12078: LD_VAR 0 3
12082: IFFALSE 12093
// RemoveUnit ( un ) ;
12084: LD_VAR 0 3
12088: PPUSH
12089: CALL_OW 64
// end ;
12093: PPOPN 3
12095: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
12096: LD_EXP 55
12100: IFFALSE 12216
12102: GO 12104
12104: DISABLE
12105: LD_INT 0
12107: PPUSH
12108: PPUSH
12109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12110: LD_ADDR_VAR 0 2
12114: PUSH
12115: LD_INT 81
12117: PUSH
12118: LD_OWVAR 2
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 21
12129: PUSH
12130: LD_INT 1
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PPUSH
12141: CALL_OW 69
12145: ST_TO_ADDR
// ToLua ( playComputer() ) ;
12146: LD_STRING playComputer()
12148: PPUSH
12149: CALL_OW 559
// if not tmp then
12153: LD_VAR 0 2
12157: NOT
12158: IFFALSE 12162
// exit ;
12160: GO 12216
// for i in tmp do
12162: LD_ADDR_VAR 0 1
12166: PUSH
12167: LD_VAR 0 2
12171: PUSH
12172: FOR_IN
12173: IFFALSE 12214
// for j := 1 to 4 do
12175: LD_ADDR_VAR 0 3
12179: PUSH
12180: DOUBLE
12181: LD_INT 1
12183: DEC
12184: ST_TO_ADDR
12185: LD_INT 4
12187: PUSH
12188: FOR_TO
12189: IFFALSE 12210
// SetSkill ( i , j , 10 ) ;
12191: LD_VAR 0 1
12195: PPUSH
12196: LD_VAR 0 3
12200: PPUSH
12201: LD_INT 10
12203: PPUSH
12204: CALL_OW 237
12208: GO 12188
12210: POP
12211: POP
12212: GO 12172
12214: POP
12215: POP
// end ;
12216: PPOPN 3
12218: END
// every 0 0$1 trigger s30 do var i , tmp ;
12219: LD_EXP 56
12223: IFFALSE 12292
12225: GO 12227
12227: DISABLE
12228: LD_INT 0
12230: PPUSH
12231: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12232: LD_ADDR_VAR 0 2
12236: PUSH
12237: LD_INT 22
12239: PUSH
12240: LD_OWVAR 2
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PPUSH
12249: CALL_OW 69
12253: ST_TO_ADDR
// if not tmp then
12254: LD_VAR 0 2
12258: NOT
12259: IFFALSE 12263
// exit ;
12261: GO 12292
// for i in tmp do
12263: LD_ADDR_VAR 0 1
12267: PUSH
12268: LD_VAR 0 2
12272: PUSH
12273: FOR_IN
12274: IFFALSE 12290
// SetLives ( i , 300 ) ;
12276: LD_VAR 0 1
12280: PPUSH
12281: LD_INT 300
12283: PPUSH
12284: CALL_OW 234
12288: GO 12273
12290: POP
12291: POP
// end ;
12292: PPOPN 2
12294: END
// every 0 0$1 trigger s60 do var i , tmp ;
12295: LD_EXP 57
12299: IFFALSE 12368
12301: GO 12303
12303: DISABLE
12304: LD_INT 0
12306: PPUSH
12307: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12308: LD_ADDR_VAR 0 2
12312: PUSH
12313: LD_INT 22
12315: PUSH
12316: LD_OWVAR 2
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: PPUSH
12325: CALL_OW 69
12329: ST_TO_ADDR
// if not tmp then
12330: LD_VAR 0 2
12334: NOT
12335: IFFALSE 12339
// exit ;
12337: GO 12368
// for i in tmp do
12339: LD_ADDR_VAR 0 1
12343: PUSH
12344: LD_VAR 0 2
12348: PUSH
12349: FOR_IN
12350: IFFALSE 12366
// SetLives ( i , 600 ) ;
12352: LD_VAR 0 1
12356: PPUSH
12357: LD_INT 600
12359: PPUSH
12360: CALL_OW 234
12364: GO 12349
12366: POP
12367: POP
// end ;
12368: PPOPN 2
12370: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12371: LD_INT 0
12373: PPUSH
// case cmd of 301 :
12374: LD_VAR 0 1
12378: PUSH
12379: LD_INT 301
12381: DOUBLE
12382: EQUAL
12383: IFTRUE 12387
12385: GO 12419
12387: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
12388: LD_VAR 0 6
12392: PPUSH
12393: LD_VAR 0 7
12397: PPUSH
12398: LD_VAR 0 8
12402: PPUSH
12403: LD_VAR 0 4
12407: PPUSH
12408: LD_VAR 0 5
12412: PPUSH
12413: CALL 13620 0 5
12417: GO 12540
12419: LD_INT 302
12421: DOUBLE
12422: EQUAL
12423: IFTRUE 12427
12425: GO 12464
12427: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
12428: LD_VAR 0 6
12432: PPUSH
12433: LD_VAR 0 7
12437: PPUSH
12438: LD_VAR 0 8
12442: PPUSH
12443: LD_VAR 0 9
12447: PPUSH
12448: LD_VAR 0 4
12452: PPUSH
12453: LD_VAR 0 5
12457: PPUSH
12458: CALL 13711 0 6
12462: GO 12540
12464: LD_INT 303
12466: DOUBLE
12467: EQUAL
12468: IFTRUE 12472
12470: GO 12509
12472: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
12473: LD_VAR 0 6
12477: PPUSH
12478: LD_VAR 0 7
12482: PPUSH
12483: LD_VAR 0 8
12487: PPUSH
12488: LD_VAR 0 9
12492: PPUSH
12493: LD_VAR 0 4
12497: PPUSH
12498: LD_VAR 0 5
12502: PPUSH
12503: CALL 12545 0 6
12507: GO 12540
12509: LD_INT 304
12511: DOUBLE
12512: EQUAL
12513: IFTRUE 12517
12515: GO 12539
12517: POP
// hHackTeleport ( unit , x , y ) ; end ;
12518: LD_VAR 0 2
12522: PPUSH
12523: LD_VAR 0 4
12527: PPUSH
12528: LD_VAR 0 5
12532: PPUSH
12533: CALL 14304 0 3
12537: GO 12540
12539: POP
// end ;
12540: LD_VAR 0 12
12544: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
12545: LD_INT 0
12547: PPUSH
12548: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
12549: LD_VAR 0 1
12553: PUSH
12554: LD_INT 1
12556: LESS
12557: PUSH
12558: LD_VAR 0 1
12562: PUSH
12563: LD_INT 3
12565: GREATER
12566: OR
12567: PUSH
12568: LD_VAR 0 5
12572: PPUSH
12573: LD_VAR 0 6
12577: PPUSH
12578: CALL_OW 428
12582: OR
12583: IFFALSE 12587
// exit ;
12585: GO 13307
// uc_side := your_side ;
12587: LD_ADDR_OWVAR 20
12591: PUSH
12592: LD_OWVAR 2
12596: ST_TO_ADDR
// uc_nation := nation ;
12597: LD_ADDR_OWVAR 21
12601: PUSH
12602: LD_VAR 0 1
12606: ST_TO_ADDR
// bc_level = 1 ;
12607: LD_ADDR_OWVAR 43
12611: PUSH
12612: LD_INT 1
12614: ST_TO_ADDR
// case btype of 1 :
12615: LD_VAR 0 2
12619: PUSH
12620: LD_INT 1
12622: DOUBLE
12623: EQUAL
12624: IFTRUE 12628
12626: GO 12639
12628: POP
// bc_type := b_depot ; 2 :
12629: LD_ADDR_OWVAR 42
12633: PUSH
12634: LD_INT 0
12636: ST_TO_ADDR
12637: GO 13251
12639: LD_INT 2
12641: DOUBLE
12642: EQUAL
12643: IFTRUE 12647
12645: GO 12658
12647: POP
// bc_type := b_warehouse ; 3 :
12648: LD_ADDR_OWVAR 42
12652: PUSH
12653: LD_INT 1
12655: ST_TO_ADDR
12656: GO 13251
12658: LD_INT 3
12660: DOUBLE
12661: EQUAL
12662: IFTRUE 12666
12664: GO 12677
12666: POP
// bc_type := b_lab ; 4 .. 9 :
12667: LD_ADDR_OWVAR 42
12671: PUSH
12672: LD_INT 6
12674: ST_TO_ADDR
12675: GO 13251
12677: LD_INT 4
12679: DOUBLE
12680: GREATEREQUAL
12681: IFFALSE 12689
12683: LD_INT 9
12685: DOUBLE
12686: LESSEQUAL
12687: IFTRUE 12691
12689: GO 12743
12691: POP
// begin bc_type := b_lab_half ;
12692: LD_ADDR_OWVAR 42
12696: PUSH
12697: LD_INT 7
12699: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
12700: LD_ADDR_OWVAR 44
12704: PUSH
12705: LD_INT 10
12707: PUSH
12708: LD_INT 11
12710: PUSH
12711: LD_INT 12
12713: PUSH
12714: LD_INT 15
12716: PUSH
12717: LD_INT 14
12719: PUSH
12720: LD_INT 13
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: PUSH
12731: LD_VAR 0 2
12735: PUSH
12736: LD_INT 3
12738: MINUS
12739: ARRAY
12740: ST_TO_ADDR
// end ; 10 .. 13 :
12741: GO 13251
12743: LD_INT 10
12745: DOUBLE
12746: GREATEREQUAL
12747: IFFALSE 12755
12749: LD_INT 13
12751: DOUBLE
12752: LESSEQUAL
12753: IFTRUE 12757
12755: GO 12834
12757: POP
// begin bc_type := b_lab_full ;
12758: LD_ADDR_OWVAR 42
12762: PUSH
12763: LD_INT 8
12765: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
12766: LD_ADDR_OWVAR 44
12770: PUSH
12771: LD_INT 10
12773: PUSH
12774: LD_INT 12
12776: PUSH
12777: LD_INT 14
12779: PUSH
12780: LD_INT 13
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: PUSH
12789: LD_VAR 0 2
12793: PUSH
12794: LD_INT 9
12796: MINUS
12797: ARRAY
12798: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
12799: LD_ADDR_OWVAR 45
12803: PUSH
12804: LD_INT 11
12806: PUSH
12807: LD_INT 15
12809: PUSH
12810: LD_INT 12
12812: PUSH
12813: LD_INT 15
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: PUSH
12822: LD_VAR 0 2
12826: PUSH
12827: LD_INT 9
12829: MINUS
12830: ARRAY
12831: ST_TO_ADDR
// end ; 14 :
12832: GO 13251
12834: LD_INT 14
12836: DOUBLE
12837: EQUAL
12838: IFTRUE 12842
12840: GO 12853
12842: POP
// bc_type := b_workshop ; 15 :
12843: LD_ADDR_OWVAR 42
12847: PUSH
12848: LD_INT 2
12850: ST_TO_ADDR
12851: GO 13251
12853: LD_INT 15
12855: DOUBLE
12856: EQUAL
12857: IFTRUE 12861
12859: GO 12872
12861: POP
// bc_type := b_factory ; 16 :
12862: LD_ADDR_OWVAR 42
12866: PUSH
12867: LD_INT 3
12869: ST_TO_ADDR
12870: GO 13251
12872: LD_INT 16
12874: DOUBLE
12875: EQUAL
12876: IFTRUE 12880
12878: GO 12891
12880: POP
// bc_type := b_ext_gun ; 17 :
12881: LD_ADDR_OWVAR 42
12885: PUSH
12886: LD_INT 17
12888: ST_TO_ADDR
12889: GO 13251
12891: LD_INT 17
12893: DOUBLE
12894: EQUAL
12895: IFTRUE 12899
12897: GO 12927
12899: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
12900: LD_ADDR_OWVAR 42
12904: PUSH
12905: LD_INT 19
12907: PUSH
12908: LD_INT 23
12910: PUSH
12911: LD_INT 19
12913: PUSH
12914: EMPTY
12915: LIST
12916: LIST
12917: LIST
12918: PUSH
12919: LD_VAR 0 1
12923: ARRAY
12924: ST_TO_ADDR
12925: GO 13251
12927: LD_INT 18
12929: DOUBLE
12930: EQUAL
12931: IFTRUE 12935
12933: GO 12946
12935: POP
// bc_type := b_ext_radar ; 19 :
12936: LD_ADDR_OWVAR 42
12940: PUSH
12941: LD_INT 20
12943: ST_TO_ADDR
12944: GO 13251
12946: LD_INT 19
12948: DOUBLE
12949: EQUAL
12950: IFTRUE 12954
12952: GO 12965
12954: POP
// bc_type := b_ext_radio ; 20 :
12955: LD_ADDR_OWVAR 42
12959: PUSH
12960: LD_INT 22
12962: ST_TO_ADDR
12963: GO 13251
12965: LD_INT 20
12967: DOUBLE
12968: EQUAL
12969: IFTRUE 12973
12971: GO 12984
12973: POP
// bc_type := b_ext_siberium ; 21 :
12974: LD_ADDR_OWVAR 42
12978: PUSH
12979: LD_INT 21
12981: ST_TO_ADDR
12982: GO 13251
12984: LD_INT 21
12986: DOUBLE
12987: EQUAL
12988: IFTRUE 12992
12990: GO 13003
12992: POP
// bc_type := b_ext_computer ; 22 :
12993: LD_ADDR_OWVAR 42
12997: PUSH
12998: LD_INT 24
13000: ST_TO_ADDR
13001: GO 13251
13003: LD_INT 22
13005: DOUBLE
13006: EQUAL
13007: IFTRUE 13011
13009: GO 13022
13011: POP
// bc_type := b_ext_track ; 23 :
13012: LD_ADDR_OWVAR 42
13016: PUSH
13017: LD_INT 16
13019: ST_TO_ADDR
13020: GO 13251
13022: LD_INT 23
13024: DOUBLE
13025: EQUAL
13026: IFTRUE 13030
13028: GO 13041
13030: POP
// bc_type := b_ext_laser ; 24 :
13031: LD_ADDR_OWVAR 42
13035: PUSH
13036: LD_INT 25
13038: ST_TO_ADDR
13039: GO 13251
13041: LD_INT 24
13043: DOUBLE
13044: EQUAL
13045: IFTRUE 13049
13047: GO 13060
13049: POP
// bc_type := b_control_tower ; 25 :
13050: LD_ADDR_OWVAR 42
13054: PUSH
13055: LD_INT 36
13057: ST_TO_ADDR
13058: GO 13251
13060: LD_INT 25
13062: DOUBLE
13063: EQUAL
13064: IFTRUE 13068
13066: GO 13079
13068: POP
// bc_type := b_breastwork ; 26 :
13069: LD_ADDR_OWVAR 42
13073: PUSH
13074: LD_INT 31
13076: ST_TO_ADDR
13077: GO 13251
13079: LD_INT 26
13081: DOUBLE
13082: EQUAL
13083: IFTRUE 13087
13085: GO 13098
13087: POP
// bc_type := b_bunker ; 27 :
13088: LD_ADDR_OWVAR 42
13092: PUSH
13093: LD_INT 32
13095: ST_TO_ADDR
13096: GO 13251
13098: LD_INT 27
13100: DOUBLE
13101: EQUAL
13102: IFTRUE 13106
13104: GO 13117
13106: POP
// bc_type := b_turret ; 28 :
13107: LD_ADDR_OWVAR 42
13111: PUSH
13112: LD_INT 33
13114: ST_TO_ADDR
13115: GO 13251
13117: LD_INT 28
13119: DOUBLE
13120: EQUAL
13121: IFTRUE 13125
13123: GO 13136
13125: POP
// bc_type := b_armoury ; 29 :
13126: LD_ADDR_OWVAR 42
13130: PUSH
13131: LD_INT 4
13133: ST_TO_ADDR
13134: GO 13251
13136: LD_INT 29
13138: DOUBLE
13139: EQUAL
13140: IFTRUE 13144
13142: GO 13155
13144: POP
// bc_type := b_barracks ; 30 :
13145: LD_ADDR_OWVAR 42
13149: PUSH
13150: LD_INT 5
13152: ST_TO_ADDR
13153: GO 13251
13155: LD_INT 30
13157: DOUBLE
13158: EQUAL
13159: IFTRUE 13163
13161: GO 13174
13163: POP
// bc_type := b_solar_power ; 31 :
13164: LD_ADDR_OWVAR 42
13168: PUSH
13169: LD_INT 27
13171: ST_TO_ADDR
13172: GO 13251
13174: LD_INT 31
13176: DOUBLE
13177: EQUAL
13178: IFTRUE 13182
13180: GO 13193
13182: POP
// bc_type := b_oil_power ; 32 :
13183: LD_ADDR_OWVAR 42
13187: PUSH
13188: LD_INT 26
13190: ST_TO_ADDR
13191: GO 13251
13193: LD_INT 32
13195: DOUBLE
13196: EQUAL
13197: IFTRUE 13201
13199: GO 13212
13201: POP
// bc_type := b_siberite_power ; 33 :
13202: LD_ADDR_OWVAR 42
13206: PUSH
13207: LD_INT 28
13209: ST_TO_ADDR
13210: GO 13251
13212: LD_INT 33
13214: DOUBLE
13215: EQUAL
13216: IFTRUE 13220
13218: GO 13231
13220: POP
// bc_type := b_oil_mine ; 34 :
13221: LD_ADDR_OWVAR 42
13225: PUSH
13226: LD_INT 29
13228: ST_TO_ADDR
13229: GO 13251
13231: LD_INT 34
13233: DOUBLE
13234: EQUAL
13235: IFTRUE 13239
13237: GO 13250
13239: POP
// bc_type := b_siberite_mine ; end ;
13240: LD_ADDR_OWVAR 42
13244: PUSH
13245: LD_INT 30
13247: ST_TO_ADDR
13248: GO 13251
13250: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
13251: LD_ADDR_VAR 0 8
13255: PUSH
13256: LD_VAR 0 5
13260: PPUSH
13261: LD_VAR 0 6
13265: PPUSH
13266: LD_VAR 0 3
13270: PPUSH
13271: CALL_OW 47
13275: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
13276: LD_OWVAR 42
13280: PUSH
13281: LD_INT 32
13283: PUSH
13284: LD_INT 33
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: IN
13291: IFFALSE 13307
// PlaceWeaponTurret ( b , weapon ) ;
13293: LD_VAR 0 8
13297: PPUSH
13298: LD_VAR 0 4
13302: PPUSH
13303: CALL_OW 431
// end ;
13307: LD_VAR 0 7
13311: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
13312: LD_INT 0
13314: PPUSH
13315: PPUSH
13316: PPUSH
13317: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13318: LD_ADDR_VAR 0 4
13322: PUSH
13323: LD_INT 22
13325: PUSH
13326: LD_OWVAR 2
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: PUSH
13335: LD_INT 2
13337: PUSH
13338: LD_INT 30
13340: PUSH
13341: LD_INT 0
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: PUSH
13348: LD_INT 30
13350: PUSH
13351: LD_INT 1
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: LIST
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PPUSH
13367: CALL_OW 69
13371: ST_TO_ADDR
// if not tmp then
13372: LD_VAR 0 4
13376: NOT
13377: IFFALSE 13381
// exit ;
13379: GO 13440
// for i in tmp do
13381: LD_ADDR_VAR 0 2
13385: PUSH
13386: LD_VAR 0 4
13390: PUSH
13391: FOR_IN
13392: IFFALSE 13438
// for j = 1 to 3 do
13394: LD_ADDR_VAR 0 3
13398: PUSH
13399: DOUBLE
13400: LD_INT 1
13402: DEC
13403: ST_TO_ADDR
13404: LD_INT 3
13406: PUSH
13407: FOR_TO
13408: IFFALSE 13434
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
13410: LD_VAR 0 2
13414: PPUSH
13415: CALL_OW 274
13419: PPUSH
13420: LD_VAR 0 3
13424: PPUSH
13425: LD_INT 99999
13427: PPUSH
13428: CALL_OW 277
13432: GO 13407
13434: POP
13435: POP
13436: GO 13391
13438: POP
13439: POP
// end ;
13440: LD_VAR 0 1
13444: RET
// export function hHackSetLevel10 ; var i , j ; begin
13445: LD_INT 0
13447: PPUSH
13448: PPUSH
13449: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
13450: LD_ADDR_VAR 0 2
13454: PUSH
13455: LD_INT 21
13457: PUSH
13458: LD_INT 1
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: PPUSH
13465: CALL_OW 69
13469: PUSH
13470: FOR_IN
13471: IFFALSE 13523
// if IsSelected ( i ) then
13473: LD_VAR 0 2
13477: PPUSH
13478: CALL_OW 306
13482: IFFALSE 13521
// begin for j := 1 to 4 do
13484: LD_ADDR_VAR 0 3
13488: PUSH
13489: DOUBLE
13490: LD_INT 1
13492: DEC
13493: ST_TO_ADDR
13494: LD_INT 4
13496: PUSH
13497: FOR_TO
13498: IFFALSE 13519
// SetSkill ( i , j , 10 ) ;
13500: LD_VAR 0 2
13504: PPUSH
13505: LD_VAR 0 3
13509: PPUSH
13510: LD_INT 10
13512: PPUSH
13513: CALL_OW 237
13517: GO 13497
13519: POP
13520: POP
// end ;
13521: GO 13470
13523: POP
13524: POP
// end ;
13525: LD_VAR 0 1
13529: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
13530: LD_INT 0
13532: PPUSH
13533: PPUSH
13534: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
13535: LD_ADDR_VAR 0 2
13539: PUSH
13540: LD_INT 22
13542: PUSH
13543: LD_OWVAR 2
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: PUSH
13552: LD_INT 21
13554: PUSH
13555: LD_INT 1
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: PPUSH
13566: CALL_OW 69
13570: PUSH
13571: FOR_IN
13572: IFFALSE 13613
// begin for j := 1 to 4 do
13574: LD_ADDR_VAR 0 3
13578: PUSH
13579: DOUBLE
13580: LD_INT 1
13582: DEC
13583: ST_TO_ADDR
13584: LD_INT 4
13586: PUSH
13587: FOR_TO
13588: IFFALSE 13609
// SetSkill ( i , j , 10 ) ;
13590: LD_VAR 0 2
13594: PPUSH
13595: LD_VAR 0 3
13599: PPUSH
13600: LD_INT 10
13602: PPUSH
13603: CALL_OW 237
13607: GO 13587
13609: POP
13610: POP
// end ;
13611: GO 13571
13613: POP
13614: POP
// end ;
13615: LD_VAR 0 1
13619: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
13620: LD_INT 0
13622: PPUSH
// uc_side := your_side ;
13623: LD_ADDR_OWVAR 20
13627: PUSH
13628: LD_OWVAR 2
13632: ST_TO_ADDR
// uc_nation := nation ;
13633: LD_ADDR_OWVAR 21
13637: PUSH
13638: LD_VAR 0 1
13642: ST_TO_ADDR
// InitHc ;
13643: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
13647: LD_INT 0
13649: PPUSH
13650: LD_VAR 0 2
13654: PPUSH
13655: LD_VAR 0 3
13659: PPUSH
13660: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
13664: LD_VAR 0 4
13668: PPUSH
13669: LD_VAR 0 5
13673: PPUSH
13674: CALL_OW 428
13678: PUSH
13679: LD_INT 0
13681: EQUAL
13682: IFFALSE 13706
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
13684: CALL_OW 44
13688: PPUSH
13689: LD_VAR 0 4
13693: PPUSH
13694: LD_VAR 0 5
13698: PPUSH
13699: LD_INT 1
13701: PPUSH
13702: CALL_OW 48
// end ;
13706: LD_VAR 0 6
13710: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
13711: LD_INT 0
13713: PPUSH
13714: PPUSH
// uc_side := your_side ;
13715: LD_ADDR_OWVAR 20
13719: PUSH
13720: LD_OWVAR 2
13724: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
13725: LD_VAR 0 1
13729: PUSH
13730: LD_INT 1
13732: PUSH
13733: LD_INT 2
13735: PUSH
13736: LD_INT 3
13738: PUSH
13739: LD_INT 4
13741: PUSH
13742: LD_INT 5
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: IN
13752: IFFALSE 13764
// uc_nation := nation_american else
13754: LD_ADDR_OWVAR 21
13758: PUSH
13759: LD_INT 1
13761: ST_TO_ADDR
13762: GO 13807
// if chassis in [ 11 , 12 , 13 , 14 ] then
13764: LD_VAR 0 1
13768: PUSH
13769: LD_INT 11
13771: PUSH
13772: LD_INT 12
13774: PUSH
13775: LD_INT 13
13777: PUSH
13778: LD_INT 14
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: IN
13787: IFFALSE 13799
// uc_nation := nation_arabian else
13789: LD_ADDR_OWVAR 21
13793: PUSH
13794: LD_INT 2
13796: ST_TO_ADDR
13797: GO 13807
// uc_nation := nation_russian ;
13799: LD_ADDR_OWVAR 21
13803: PUSH
13804: LD_INT 3
13806: ST_TO_ADDR
// vc_chassis := chassis ;
13807: LD_ADDR_OWVAR 37
13811: PUSH
13812: LD_VAR 0 1
13816: ST_TO_ADDR
// vc_engine := engine ;
13817: LD_ADDR_OWVAR 39
13821: PUSH
13822: LD_VAR 0 2
13826: ST_TO_ADDR
// vc_control := control ;
13827: LD_ADDR_OWVAR 38
13831: PUSH
13832: LD_VAR 0 3
13836: ST_TO_ADDR
// vc_weapon := weapon ;
13837: LD_ADDR_OWVAR 40
13841: PUSH
13842: LD_VAR 0 4
13846: ST_TO_ADDR
// un := CreateVehicle ;
13847: LD_ADDR_VAR 0 8
13851: PUSH
13852: CALL_OW 45
13856: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
13857: LD_VAR 0 8
13861: PPUSH
13862: LD_INT 0
13864: PPUSH
13865: LD_INT 5
13867: PPUSH
13868: CALL_OW 12
13872: PPUSH
13873: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
13877: LD_VAR 0 8
13881: PPUSH
13882: LD_VAR 0 5
13886: PPUSH
13887: LD_VAR 0 6
13891: PPUSH
13892: LD_INT 1
13894: PPUSH
13895: CALL_OW 48
// end ;
13899: LD_VAR 0 7
13903: RET
// export hInvincible ; every 1 do
13904: GO 13906
13906: DISABLE
// hInvincible := [ ] ;
13907: LD_ADDR_EXP 58
13911: PUSH
13912: EMPTY
13913: ST_TO_ADDR
13914: END
// every 10 do var i ;
13915: GO 13917
13917: DISABLE
13918: LD_INT 0
13920: PPUSH
// begin enable ;
13921: ENABLE
// if not hInvincible then
13922: LD_EXP 58
13926: NOT
13927: IFFALSE 13931
// exit ;
13929: GO 13975
// for i in hInvincible do
13931: LD_ADDR_VAR 0 1
13935: PUSH
13936: LD_EXP 58
13940: PUSH
13941: FOR_IN
13942: IFFALSE 13973
// if GetLives ( i ) < 1000 then
13944: LD_VAR 0 1
13948: PPUSH
13949: CALL_OW 256
13953: PUSH
13954: LD_INT 1000
13956: LESS
13957: IFFALSE 13971
// SetLives ( i , 1000 ) ;
13959: LD_VAR 0 1
13963: PPUSH
13964: LD_INT 1000
13966: PPUSH
13967: CALL_OW 234
13971: GO 13941
13973: POP
13974: POP
// end ;
13975: PPOPN 1
13977: END
// export function hHackInvincible ; var i ; begin
13978: LD_INT 0
13980: PPUSH
13981: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
13982: LD_ADDR_VAR 0 2
13986: PUSH
13987: LD_INT 2
13989: PUSH
13990: LD_INT 21
13992: PUSH
13993: LD_INT 1
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: PUSH
14000: LD_INT 21
14002: PUSH
14003: LD_INT 2
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: LIST
14014: PPUSH
14015: CALL_OW 69
14019: PUSH
14020: FOR_IN
14021: IFFALSE 14082
// if IsSelected ( i ) then
14023: LD_VAR 0 2
14027: PPUSH
14028: CALL_OW 306
14032: IFFALSE 14080
// begin if i in hInvincible then
14034: LD_VAR 0 2
14038: PUSH
14039: LD_EXP 58
14043: IN
14044: IFFALSE 14064
// hInvincible := hInvincible diff i else
14046: LD_ADDR_EXP 58
14050: PUSH
14051: LD_EXP 58
14055: PUSH
14056: LD_VAR 0 2
14060: DIFF
14061: ST_TO_ADDR
14062: GO 14080
// hInvincible := hInvincible union i ;
14064: LD_ADDR_EXP 58
14068: PUSH
14069: LD_EXP 58
14073: PUSH
14074: LD_VAR 0 2
14078: UNION
14079: ST_TO_ADDR
// end ;
14080: GO 14020
14082: POP
14083: POP
// end ;
14084: LD_VAR 0 1
14088: RET
// export function hHackInvisible ; var i , j ; begin
14089: LD_INT 0
14091: PPUSH
14092: PPUSH
14093: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14094: LD_ADDR_VAR 0 2
14098: PUSH
14099: LD_INT 21
14101: PUSH
14102: LD_INT 1
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: PPUSH
14109: CALL_OW 69
14113: PUSH
14114: FOR_IN
14115: IFFALSE 14139
// if IsSelected ( i ) then
14117: LD_VAR 0 2
14121: PPUSH
14122: CALL_OW 306
14126: IFFALSE 14137
// ComForceInvisible ( i ) ;
14128: LD_VAR 0 2
14132: PPUSH
14133: CALL_OW 496
14137: GO 14114
14139: POP
14140: POP
// end ;
14141: LD_VAR 0 1
14145: RET
// export function hHackChangeYourSide ; begin
14146: LD_INT 0
14148: PPUSH
// if your_side = 8 then
14149: LD_OWVAR 2
14153: PUSH
14154: LD_INT 8
14156: EQUAL
14157: IFFALSE 14169
// your_side := 0 else
14159: LD_ADDR_OWVAR 2
14163: PUSH
14164: LD_INT 0
14166: ST_TO_ADDR
14167: GO 14183
// your_side := your_side + 1 ;
14169: LD_ADDR_OWVAR 2
14173: PUSH
14174: LD_OWVAR 2
14178: PUSH
14179: LD_INT 1
14181: PLUS
14182: ST_TO_ADDR
// end ;
14183: LD_VAR 0 1
14187: RET
// export function hHackChangeUnitSide ; var i , j ; begin
14188: LD_INT 0
14190: PPUSH
14191: PPUSH
14192: PPUSH
// for i in all_units do
14193: LD_ADDR_VAR 0 2
14197: PUSH
14198: LD_OWVAR 3
14202: PUSH
14203: FOR_IN
14204: IFFALSE 14282
// if IsSelected ( i ) then
14206: LD_VAR 0 2
14210: PPUSH
14211: CALL_OW 306
14215: IFFALSE 14280
// begin j := GetSide ( i ) ;
14217: LD_ADDR_VAR 0 3
14221: PUSH
14222: LD_VAR 0 2
14226: PPUSH
14227: CALL_OW 255
14231: ST_TO_ADDR
// if j = 8 then
14232: LD_VAR 0 3
14236: PUSH
14237: LD_INT 8
14239: EQUAL
14240: IFFALSE 14252
// j := 0 else
14242: LD_ADDR_VAR 0 3
14246: PUSH
14247: LD_INT 0
14249: ST_TO_ADDR
14250: GO 14266
// j := j + 1 ;
14252: LD_ADDR_VAR 0 3
14256: PUSH
14257: LD_VAR 0 3
14261: PUSH
14262: LD_INT 1
14264: PLUS
14265: ST_TO_ADDR
// SetSide ( i , j ) ;
14266: LD_VAR 0 2
14270: PPUSH
14271: LD_VAR 0 3
14275: PPUSH
14276: CALL_OW 235
// end ;
14280: GO 14203
14282: POP
14283: POP
// end ;
14284: LD_VAR 0 1
14288: RET
// export function hHackFog ; begin
14289: LD_INT 0
14291: PPUSH
// FogOff ( true ) ;
14292: LD_INT 1
14294: PPUSH
14295: CALL_OW 344
// end ;
14299: LD_VAR 0 1
14303: RET
// export function hHackTeleport ( unit , x , y ) ; begin
14304: LD_INT 0
14306: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
14307: LD_VAR 0 1
14311: PPUSH
14312: LD_VAR 0 2
14316: PPUSH
14317: LD_VAR 0 3
14321: PPUSH
14322: LD_INT 1
14324: PPUSH
14325: LD_INT 1
14327: PPUSH
14328: CALL_OW 483
// CenterOnXY ( x , y ) ;
14332: LD_VAR 0 2
14336: PPUSH
14337: LD_VAR 0 3
14341: PPUSH
14342: CALL_OW 84
// end ; end_of_file
14346: LD_VAR 0 4
14350: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
14351: LD_INT 0
14353: PPUSH
14354: PPUSH
14355: PPUSH
14356: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
14357: LD_VAR 0 1
14361: PPUSH
14362: CALL_OW 264
14366: PUSH
14367: LD_EXP 74
14371: EQUAL
14372: IFFALSE 14444
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
14374: LD_INT 68
14376: PPUSH
14377: LD_VAR 0 1
14381: PPUSH
14382: CALL_OW 255
14386: PPUSH
14387: CALL_OW 321
14391: PUSH
14392: LD_INT 2
14394: EQUAL
14395: IFFALSE 14407
// eff := 70 else
14397: LD_ADDR_VAR 0 4
14401: PUSH
14402: LD_INT 70
14404: ST_TO_ADDR
14405: GO 14415
// eff := 30 ;
14407: LD_ADDR_VAR 0 4
14411: PUSH
14412: LD_INT 30
14414: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
14415: LD_VAR 0 1
14419: PPUSH
14420: CALL_OW 250
14424: PPUSH
14425: LD_VAR 0 1
14429: PPUSH
14430: CALL_OW 251
14434: PPUSH
14435: LD_VAR 0 4
14439: PPUSH
14440: CALL_OW 495
// end ; end ;
14444: LD_VAR 0 2
14448: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
14449: LD_INT 0
14451: PPUSH
// end ;
14452: LD_VAR 0 4
14456: RET
// export function SOS_Command ( cmd ) ; begin
14457: LD_INT 0
14459: PPUSH
// end ;
14460: LD_VAR 0 2
14464: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
14465: LD_INT 0
14467: PPUSH
// end ;
14468: LD_VAR 0 6
14472: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
14473: LD_INT 0
14475: PPUSH
14476: PPUSH
// if not vehicle or not factory then
14477: LD_VAR 0 1
14481: NOT
14482: PUSH
14483: LD_VAR 0 2
14487: NOT
14488: OR
14489: IFFALSE 14493
// exit ;
14491: GO 14724
// if factoryWaypoints >= factory then
14493: LD_EXP 59
14497: PUSH
14498: LD_VAR 0 2
14502: GREATEREQUAL
14503: IFFALSE 14724
// if factoryWaypoints [ factory ] then
14505: LD_EXP 59
14509: PUSH
14510: LD_VAR 0 2
14514: ARRAY
14515: IFFALSE 14724
// begin if GetControl ( vehicle ) = control_manual then
14517: LD_VAR 0 1
14521: PPUSH
14522: CALL_OW 263
14526: PUSH
14527: LD_INT 1
14529: EQUAL
14530: IFFALSE 14611
// begin driver := IsDrivenBy ( vehicle ) ;
14532: LD_ADDR_VAR 0 4
14536: PUSH
14537: LD_VAR 0 1
14541: PPUSH
14542: CALL_OW 311
14546: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14547: LD_VAR 0 4
14551: PPUSH
14552: LD_EXP 59
14556: PUSH
14557: LD_VAR 0 2
14561: ARRAY
14562: PUSH
14563: LD_INT 3
14565: ARRAY
14566: PPUSH
14567: LD_EXP 59
14571: PUSH
14572: LD_VAR 0 2
14576: ARRAY
14577: PUSH
14578: LD_INT 4
14580: ARRAY
14581: PPUSH
14582: CALL_OW 171
// AddComExitVehicle ( driver ) ;
14586: LD_VAR 0 4
14590: PPUSH
14591: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
14595: LD_VAR 0 4
14599: PPUSH
14600: LD_VAR 0 2
14604: PPUSH
14605: CALL_OW 180
// end else
14609: GO 14724
// if GetControl ( vehicle ) = control_remote then
14611: LD_VAR 0 1
14615: PPUSH
14616: CALL_OW 263
14620: PUSH
14621: LD_INT 2
14623: EQUAL
14624: IFFALSE 14685
// begin wait ( 0 0$2 ) ;
14626: LD_INT 70
14628: PPUSH
14629: CALL_OW 67
// if Connect ( vehicle ) then
14633: LD_VAR 0 1
14637: PPUSH
14638: CALL 27323 0 1
14642: IFFALSE 14683
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14644: LD_VAR 0 1
14648: PPUSH
14649: LD_EXP 59
14653: PUSH
14654: LD_VAR 0 2
14658: ARRAY
14659: PUSH
14660: LD_INT 3
14662: ARRAY
14663: PPUSH
14664: LD_EXP 59
14668: PUSH
14669: LD_VAR 0 2
14673: ARRAY
14674: PUSH
14675: LD_INT 4
14677: ARRAY
14678: PPUSH
14679: CALL_OW 171
// end else
14683: GO 14724
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14685: LD_VAR 0 1
14689: PPUSH
14690: LD_EXP 59
14694: PUSH
14695: LD_VAR 0 2
14699: ARRAY
14700: PUSH
14701: LD_INT 3
14703: ARRAY
14704: PPUSH
14705: LD_EXP 59
14709: PUSH
14710: LD_VAR 0 2
14714: ARRAY
14715: PUSH
14716: LD_INT 4
14718: ARRAY
14719: PPUSH
14720: CALL_OW 171
// end ; end ;
14724: LD_VAR 0 3
14728: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
14729: LD_INT 0
14731: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
14732: LD_VAR 0 1
14736: PUSH
14737: LD_INT 250
14739: EQUAL
14740: PUSH
14741: LD_VAR 0 2
14745: PPUSH
14746: CALL_OW 264
14750: PUSH
14751: LD_EXP 77
14755: EQUAL
14756: AND
14757: IFFALSE 14778
// MinerPlaceMine ( unit , x , y ) ;
14759: LD_VAR 0 2
14763: PPUSH
14764: LD_VAR 0 4
14768: PPUSH
14769: LD_VAR 0 5
14773: PPUSH
14774: CALL 17506 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
14778: LD_VAR 0 1
14782: PUSH
14783: LD_INT 251
14785: EQUAL
14786: PUSH
14787: LD_VAR 0 2
14791: PPUSH
14792: CALL_OW 264
14796: PUSH
14797: LD_EXP 77
14801: EQUAL
14802: AND
14803: IFFALSE 14824
// MinerDetonateMine ( unit , x , y ) ;
14805: LD_VAR 0 2
14809: PPUSH
14810: LD_VAR 0 4
14814: PPUSH
14815: LD_VAR 0 5
14819: PPUSH
14820: CALL 17783 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
14824: LD_VAR 0 1
14828: PUSH
14829: LD_INT 252
14831: EQUAL
14832: PUSH
14833: LD_VAR 0 2
14837: PPUSH
14838: CALL_OW 264
14842: PUSH
14843: LD_EXP 77
14847: EQUAL
14848: AND
14849: IFFALSE 14870
// MinerCreateMinefield ( unit , x , y ) ;
14851: LD_VAR 0 2
14855: PPUSH
14856: LD_VAR 0 4
14860: PPUSH
14861: LD_VAR 0 5
14865: PPUSH
14866: CALL 18200 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
14870: LD_VAR 0 1
14874: PUSH
14875: LD_INT 253
14877: EQUAL
14878: PUSH
14879: LD_VAR 0 2
14883: PPUSH
14884: CALL_OW 257
14888: PUSH
14889: LD_INT 5
14891: EQUAL
14892: AND
14893: IFFALSE 14914
// ComBinocular ( unit , x , y ) ;
14895: LD_VAR 0 2
14899: PPUSH
14900: LD_VAR 0 4
14904: PPUSH
14905: LD_VAR 0 5
14909: PPUSH
14910: CALL 18571 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
14914: LD_VAR 0 1
14918: PUSH
14919: LD_INT 254
14921: EQUAL
14922: PUSH
14923: LD_VAR 0 2
14927: PPUSH
14928: CALL_OW 264
14932: PUSH
14933: LD_EXP 72
14937: EQUAL
14938: AND
14939: PUSH
14940: LD_VAR 0 3
14944: PPUSH
14945: CALL_OW 263
14949: PUSH
14950: LD_INT 3
14952: EQUAL
14953: AND
14954: IFFALSE 14970
// HackDestroyVehicle ( unit , selectedUnit ) ;
14956: LD_VAR 0 2
14960: PPUSH
14961: LD_VAR 0 3
14965: PPUSH
14966: CALL 16866 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
14970: LD_VAR 0 1
14974: PUSH
14975: LD_INT 255
14977: EQUAL
14978: PUSH
14979: LD_VAR 0 2
14983: PPUSH
14984: CALL_OW 264
14988: PUSH
14989: LD_INT 14
14991: PUSH
14992: LD_INT 53
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: IN
14999: AND
15000: PUSH
15001: LD_VAR 0 4
15005: PPUSH
15006: LD_VAR 0 5
15010: PPUSH
15011: CALL_OW 488
15015: AND
15016: IFFALSE 15040
// CutTreeXYR ( unit , x , y , 12 ) ;
15018: LD_VAR 0 2
15022: PPUSH
15023: LD_VAR 0 4
15027: PPUSH
15028: LD_VAR 0 5
15032: PPUSH
15033: LD_INT 12
15035: PPUSH
15036: CALL 15432 0 4
// if cmd = 256 then
15040: LD_VAR 0 1
15044: PUSH
15045: LD_INT 256
15047: EQUAL
15048: IFFALSE 15069
// SetFactoryWaypoint ( unit , x , y ) ;
15050: LD_VAR 0 2
15054: PPUSH
15055: LD_VAR 0 4
15059: PPUSH
15060: LD_VAR 0 5
15064: PPUSH
15065: CALL 15074 0 3
// end ;
15069: LD_VAR 0 6
15073: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
15074: LD_INT 0
15076: PPUSH
15077: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
15078: LD_VAR 0 1
15082: NOT
15083: PUSH
15084: LD_VAR 0 2
15088: PPUSH
15089: LD_VAR 0 3
15093: PPUSH
15094: CALL_OW 488
15098: NOT
15099: OR
15100: PUSH
15101: LD_VAR 0 1
15105: PPUSH
15106: CALL_OW 266
15110: PUSH
15111: LD_INT 3
15113: NONEQUAL
15114: PUSH
15115: LD_VAR 0 1
15119: PPUSH
15120: CALL_OW 247
15124: PUSH
15125: LD_INT 1
15127: EQUAL
15128: NOT
15129: AND
15130: OR
15131: IFFALSE 15135
// exit ;
15133: GO 15284
// if GetType ( factory ) = unit_human then
15135: LD_VAR 0 1
15139: PPUSH
15140: CALL_OW 247
15144: PUSH
15145: LD_INT 1
15147: EQUAL
15148: IFFALSE 15165
// factory := IsInUnit ( factory ) ;
15150: LD_ADDR_VAR 0 1
15154: PUSH
15155: LD_VAR 0 1
15159: PPUSH
15160: CALL_OW 310
15164: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
15165: LD_VAR 0 1
15169: PPUSH
15170: CALL_OW 266
15174: PUSH
15175: LD_INT 3
15177: NONEQUAL
15178: IFFALSE 15182
// exit ;
15180: GO 15284
// if HexInfo ( x , y ) = factory then
15182: LD_VAR 0 2
15186: PPUSH
15187: LD_VAR 0 3
15191: PPUSH
15192: CALL_OW 428
15196: PUSH
15197: LD_VAR 0 1
15201: EQUAL
15202: IFFALSE 15229
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
15204: LD_ADDR_EXP 59
15208: PUSH
15209: LD_EXP 59
15213: PPUSH
15214: LD_VAR 0 1
15218: PPUSH
15219: LD_INT 0
15221: PPUSH
15222: CALL_OW 1
15226: ST_TO_ADDR
15227: GO 15280
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
15229: LD_ADDR_EXP 59
15233: PUSH
15234: LD_EXP 59
15238: PPUSH
15239: LD_VAR 0 1
15243: PPUSH
15244: LD_VAR 0 1
15248: PPUSH
15249: CALL_OW 255
15253: PUSH
15254: LD_VAR 0 1
15258: PUSH
15259: LD_VAR 0 2
15263: PUSH
15264: LD_VAR 0 3
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: PPUSH
15275: CALL_OW 1
15279: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15280: CALL 15289 0 0
// end ;
15284: LD_VAR 0 4
15288: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
15289: LD_INT 0
15291: PPUSH
15292: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
15293: LD_STRING resetFactoryWaypoint();
15295: PPUSH
15296: CALL_OW 559
// if factoryWaypoints then
15300: LD_EXP 59
15304: IFFALSE 15427
// begin for i := 1 to factoryWaypoints do
15306: LD_ADDR_VAR 0 2
15310: PUSH
15311: DOUBLE
15312: LD_INT 1
15314: DEC
15315: ST_TO_ADDR
15316: LD_EXP 59
15320: PUSH
15321: FOR_TO
15322: IFFALSE 15425
// if factoryWaypoints [ i ] then
15324: LD_EXP 59
15328: PUSH
15329: LD_VAR 0 2
15333: ARRAY
15334: IFFALSE 15423
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
15336: LD_STRING setFactoryWaypointXY(
15338: PUSH
15339: LD_EXP 59
15343: PUSH
15344: LD_VAR 0 2
15348: ARRAY
15349: PUSH
15350: LD_INT 1
15352: ARRAY
15353: STR
15354: PUSH
15355: LD_STRING ,
15357: STR
15358: PUSH
15359: LD_EXP 59
15363: PUSH
15364: LD_VAR 0 2
15368: ARRAY
15369: PUSH
15370: LD_INT 2
15372: ARRAY
15373: STR
15374: PUSH
15375: LD_STRING ,
15377: STR
15378: PUSH
15379: LD_EXP 59
15383: PUSH
15384: LD_VAR 0 2
15388: ARRAY
15389: PUSH
15390: LD_INT 3
15392: ARRAY
15393: STR
15394: PUSH
15395: LD_STRING ,
15397: STR
15398: PUSH
15399: LD_EXP 59
15403: PUSH
15404: LD_VAR 0 2
15408: ARRAY
15409: PUSH
15410: LD_INT 4
15412: ARRAY
15413: STR
15414: PUSH
15415: LD_STRING )
15417: STR
15418: PPUSH
15419: CALL_OW 559
15423: GO 15321
15425: POP
15426: POP
// end ; end ;
15427: LD_VAR 0 1
15431: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15432: LD_INT 0
15434: PPUSH
15435: PPUSH
15436: PPUSH
15437: PPUSH
15438: PPUSH
15439: PPUSH
15440: PPUSH
15441: PPUSH
15442: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15443: LD_VAR 0 1
15447: NOT
15448: PUSH
15449: LD_VAR 0 2
15453: PPUSH
15454: LD_VAR 0 3
15458: PPUSH
15459: CALL_OW 488
15463: NOT
15464: OR
15465: PUSH
15466: LD_VAR 0 4
15470: NOT
15471: OR
15472: IFFALSE 15476
// exit ;
15474: GO 15816
// list := [ ] ;
15476: LD_ADDR_VAR 0 13
15480: PUSH
15481: EMPTY
15482: ST_TO_ADDR
// if x - r < 0 then
15483: LD_VAR 0 2
15487: PUSH
15488: LD_VAR 0 4
15492: MINUS
15493: PUSH
15494: LD_INT 0
15496: LESS
15497: IFFALSE 15509
// min_x := 0 else
15499: LD_ADDR_VAR 0 7
15503: PUSH
15504: LD_INT 0
15506: ST_TO_ADDR
15507: GO 15525
// min_x := x - r ;
15509: LD_ADDR_VAR 0 7
15513: PUSH
15514: LD_VAR 0 2
15518: PUSH
15519: LD_VAR 0 4
15523: MINUS
15524: ST_TO_ADDR
// if y - r < 0 then
15525: LD_VAR 0 3
15529: PUSH
15530: LD_VAR 0 4
15534: MINUS
15535: PUSH
15536: LD_INT 0
15538: LESS
15539: IFFALSE 15551
// min_y := 0 else
15541: LD_ADDR_VAR 0 8
15545: PUSH
15546: LD_INT 0
15548: ST_TO_ADDR
15549: GO 15567
// min_y := y - r ;
15551: LD_ADDR_VAR 0 8
15555: PUSH
15556: LD_VAR 0 3
15560: PUSH
15561: LD_VAR 0 4
15565: MINUS
15566: ST_TO_ADDR
// max_x := x + r ;
15567: LD_ADDR_VAR 0 9
15571: PUSH
15572: LD_VAR 0 2
15576: PUSH
15577: LD_VAR 0 4
15581: PLUS
15582: ST_TO_ADDR
// max_y := y + r ;
15583: LD_ADDR_VAR 0 10
15587: PUSH
15588: LD_VAR 0 3
15592: PUSH
15593: LD_VAR 0 4
15597: PLUS
15598: ST_TO_ADDR
// for _x = min_x to max_x do
15599: LD_ADDR_VAR 0 11
15603: PUSH
15604: DOUBLE
15605: LD_VAR 0 7
15609: DEC
15610: ST_TO_ADDR
15611: LD_VAR 0 9
15615: PUSH
15616: FOR_TO
15617: IFFALSE 15734
// for _y = min_y to max_y do
15619: LD_ADDR_VAR 0 12
15623: PUSH
15624: DOUBLE
15625: LD_VAR 0 8
15629: DEC
15630: ST_TO_ADDR
15631: LD_VAR 0 10
15635: PUSH
15636: FOR_TO
15637: IFFALSE 15730
// begin if not ValidHex ( _x , _y ) then
15639: LD_VAR 0 11
15643: PPUSH
15644: LD_VAR 0 12
15648: PPUSH
15649: CALL_OW 488
15653: NOT
15654: IFFALSE 15658
// continue ;
15656: GO 15636
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15658: LD_VAR 0 11
15662: PPUSH
15663: LD_VAR 0 12
15667: PPUSH
15668: CALL_OW 351
15672: PUSH
15673: LD_VAR 0 11
15677: PPUSH
15678: LD_VAR 0 12
15682: PPUSH
15683: CALL_OW 554
15687: AND
15688: IFFALSE 15728
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15690: LD_ADDR_VAR 0 13
15694: PUSH
15695: LD_VAR 0 13
15699: PPUSH
15700: LD_VAR 0 13
15704: PUSH
15705: LD_INT 1
15707: PLUS
15708: PPUSH
15709: LD_VAR 0 11
15713: PUSH
15714: LD_VAR 0 12
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: PPUSH
15723: CALL_OW 2
15727: ST_TO_ADDR
// end ;
15728: GO 15636
15730: POP
15731: POP
15732: GO 15616
15734: POP
15735: POP
// if not list then
15736: LD_VAR 0 13
15740: NOT
15741: IFFALSE 15745
// exit ;
15743: GO 15816
// for i in list do
15745: LD_ADDR_VAR 0 6
15749: PUSH
15750: LD_VAR 0 13
15754: PUSH
15755: FOR_IN
15756: IFFALSE 15814
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
15758: LD_VAR 0 1
15762: PPUSH
15763: LD_STRING M
15765: PUSH
15766: LD_VAR 0 6
15770: PUSH
15771: LD_INT 1
15773: ARRAY
15774: PUSH
15775: LD_VAR 0 6
15779: PUSH
15780: LD_INT 2
15782: ARRAY
15783: PUSH
15784: LD_INT 0
15786: PUSH
15787: LD_INT 0
15789: PUSH
15790: LD_INT 0
15792: PUSH
15793: LD_INT 0
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: PUSH
15805: EMPTY
15806: LIST
15807: PPUSH
15808: CALL_OW 447
15812: GO 15755
15814: POP
15815: POP
// end ;
15816: LD_VAR 0 5
15820: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
15821: LD_EXP 60
15825: NOT
15826: IFFALSE 15876
15828: GO 15830
15830: DISABLE
// begin initHack := true ;
15831: LD_ADDR_EXP 60
15835: PUSH
15836: LD_INT 1
15838: ST_TO_ADDR
// hackTanks := [ ] ;
15839: LD_ADDR_EXP 61
15843: PUSH
15844: EMPTY
15845: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
15846: LD_ADDR_EXP 62
15850: PUSH
15851: EMPTY
15852: ST_TO_ADDR
// hackLimit := 3 ;
15853: LD_ADDR_EXP 63
15857: PUSH
15858: LD_INT 3
15860: ST_TO_ADDR
// hackDist := 12 ;
15861: LD_ADDR_EXP 64
15865: PUSH
15866: LD_INT 12
15868: ST_TO_ADDR
// hackCounter := [ ] ;
15869: LD_ADDR_EXP 65
15873: PUSH
15874: EMPTY
15875: ST_TO_ADDR
// end ;
15876: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
15877: LD_EXP 60
15881: PUSH
15882: LD_INT 34
15884: PUSH
15885: LD_EXP 72
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PPUSH
15894: CALL_OW 69
15898: AND
15899: IFFALSE 16154
15901: GO 15903
15903: DISABLE
15904: LD_INT 0
15906: PPUSH
15907: PPUSH
// begin enable ;
15908: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
15909: LD_ADDR_VAR 0 1
15913: PUSH
15914: LD_INT 34
15916: PUSH
15917: LD_EXP 72
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: PPUSH
15926: CALL_OW 69
15930: PUSH
15931: FOR_IN
15932: IFFALSE 16152
// begin if not i in hackTanks then
15934: LD_VAR 0 1
15938: PUSH
15939: LD_EXP 61
15943: IN
15944: NOT
15945: IFFALSE 16028
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
15947: LD_ADDR_EXP 61
15951: PUSH
15952: LD_EXP 61
15956: PPUSH
15957: LD_EXP 61
15961: PUSH
15962: LD_INT 1
15964: PLUS
15965: PPUSH
15966: LD_VAR 0 1
15970: PPUSH
15971: CALL_OW 1
15975: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
15976: LD_ADDR_EXP 62
15980: PUSH
15981: LD_EXP 62
15985: PPUSH
15986: LD_EXP 62
15990: PUSH
15991: LD_INT 1
15993: PLUS
15994: PPUSH
15995: EMPTY
15996: PPUSH
15997: CALL_OW 1
16001: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
16002: LD_ADDR_EXP 65
16006: PUSH
16007: LD_EXP 65
16011: PPUSH
16012: LD_EXP 65
16016: PUSH
16017: LD_INT 1
16019: PLUS
16020: PPUSH
16021: EMPTY
16022: PPUSH
16023: CALL_OW 1
16027: ST_TO_ADDR
// end ; if not IsOk ( i ) then
16028: LD_VAR 0 1
16032: PPUSH
16033: CALL_OW 302
16037: NOT
16038: IFFALSE 16051
// begin HackUnlinkAll ( i ) ;
16040: LD_VAR 0 1
16044: PPUSH
16045: CALL 16157 0 1
// continue ;
16049: GO 15931
// end ; HackCheckCapturedStatus ( i ) ;
16051: LD_VAR 0 1
16055: PPUSH
16056: CALL 16600 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
16060: LD_ADDR_VAR 0 2
16064: PUSH
16065: LD_INT 81
16067: PUSH
16068: LD_VAR 0 1
16072: PPUSH
16073: CALL_OW 255
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: PUSH
16082: LD_INT 33
16084: PUSH
16085: LD_INT 3
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PUSH
16092: LD_INT 91
16094: PUSH
16095: LD_VAR 0 1
16099: PUSH
16100: LD_EXP 64
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: LIST
16109: PUSH
16110: LD_INT 50
16112: PUSH
16113: EMPTY
16114: LIST
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: PPUSH
16122: CALL_OW 69
16126: ST_TO_ADDR
// if not tmp then
16127: LD_VAR 0 2
16131: NOT
16132: IFFALSE 16136
// continue ;
16134: GO 15931
// HackLink ( i , tmp ) ;
16136: LD_VAR 0 1
16140: PPUSH
16141: LD_VAR 0 2
16145: PPUSH
16146: CALL 16293 0 2
// end ;
16150: GO 15931
16152: POP
16153: POP
// end ;
16154: PPOPN 2
16156: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
16157: LD_INT 0
16159: PPUSH
16160: PPUSH
16161: PPUSH
// if not hack in hackTanks then
16162: LD_VAR 0 1
16166: PUSH
16167: LD_EXP 61
16171: IN
16172: NOT
16173: IFFALSE 16177
// exit ;
16175: GO 16288
// index := GetElementIndex ( hackTanks , hack ) ;
16177: LD_ADDR_VAR 0 4
16181: PUSH
16182: LD_EXP 61
16186: PPUSH
16187: LD_VAR 0 1
16191: PPUSH
16192: CALL 24137 0 2
16196: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
16197: LD_EXP 62
16201: PUSH
16202: LD_VAR 0 4
16206: ARRAY
16207: IFFALSE 16288
// begin for i in hackTanksCaptured [ index ] do
16209: LD_ADDR_VAR 0 3
16213: PUSH
16214: LD_EXP 62
16218: PUSH
16219: LD_VAR 0 4
16223: ARRAY
16224: PUSH
16225: FOR_IN
16226: IFFALSE 16252
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
16228: LD_VAR 0 3
16232: PUSH
16233: LD_INT 1
16235: ARRAY
16236: PPUSH
16237: LD_VAR 0 3
16241: PUSH
16242: LD_INT 2
16244: ARRAY
16245: PPUSH
16246: CALL_OW 235
16250: GO 16225
16252: POP
16253: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
16254: LD_ADDR_EXP 62
16258: PUSH
16259: LD_EXP 62
16263: PPUSH
16264: LD_VAR 0 4
16268: PPUSH
16269: EMPTY
16270: PPUSH
16271: CALL_OW 1
16275: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
16276: LD_VAR 0 1
16280: PPUSH
16281: LD_INT 0
16283: PPUSH
16284: CALL_OW 505
// end ; end ;
16288: LD_VAR 0 2
16292: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
16293: LD_INT 0
16295: PPUSH
16296: PPUSH
16297: PPUSH
// if not hack in hackTanks or not vehicles then
16298: LD_VAR 0 1
16302: PUSH
16303: LD_EXP 61
16307: IN
16308: NOT
16309: PUSH
16310: LD_VAR 0 2
16314: NOT
16315: OR
16316: IFFALSE 16320
// exit ;
16318: GO 16595
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
16320: LD_ADDR_VAR 0 2
16324: PUSH
16325: LD_VAR 0 1
16329: PPUSH
16330: LD_VAR 0 2
16334: PPUSH
16335: LD_INT 1
16337: PPUSH
16338: LD_INT 1
16340: PPUSH
16341: CALL 24787 0 4
16345: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
16346: LD_ADDR_VAR 0 5
16350: PUSH
16351: LD_EXP 61
16355: PPUSH
16356: LD_VAR 0 1
16360: PPUSH
16361: CALL 24137 0 2
16365: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
16366: LD_EXP 62
16370: PUSH
16371: LD_VAR 0 5
16375: ARRAY
16376: PUSH
16377: LD_EXP 63
16381: LESS
16382: IFFALSE 16571
// begin for i := 1 to vehicles do
16384: LD_ADDR_VAR 0 4
16388: PUSH
16389: DOUBLE
16390: LD_INT 1
16392: DEC
16393: ST_TO_ADDR
16394: LD_VAR 0 2
16398: PUSH
16399: FOR_TO
16400: IFFALSE 16569
// begin if hackTanksCaptured [ index ] = hackLimit then
16402: LD_EXP 62
16406: PUSH
16407: LD_VAR 0 5
16411: ARRAY
16412: PUSH
16413: LD_EXP 63
16417: EQUAL
16418: IFFALSE 16422
// break ;
16420: GO 16569
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
16422: LD_ADDR_EXP 65
16426: PUSH
16427: LD_EXP 65
16431: PPUSH
16432: LD_VAR 0 5
16436: PPUSH
16437: LD_EXP 65
16441: PUSH
16442: LD_VAR 0 5
16446: ARRAY
16447: PUSH
16448: LD_INT 1
16450: PLUS
16451: PPUSH
16452: CALL_OW 1
16456: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
16457: LD_ADDR_EXP 62
16461: PUSH
16462: LD_EXP 62
16466: PPUSH
16467: LD_VAR 0 5
16471: PUSH
16472: LD_EXP 62
16476: PUSH
16477: LD_VAR 0 5
16481: ARRAY
16482: PUSH
16483: LD_INT 1
16485: PLUS
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PPUSH
16491: LD_VAR 0 2
16495: PUSH
16496: LD_VAR 0 4
16500: ARRAY
16501: PUSH
16502: LD_VAR 0 2
16506: PUSH
16507: LD_VAR 0 4
16511: ARRAY
16512: PPUSH
16513: CALL_OW 255
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PPUSH
16522: CALL 24352 0 3
16526: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
16527: LD_VAR 0 2
16531: PUSH
16532: LD_VAR 0 4
16536: ARRAY
16537: PPUSH
16538: LD_VAR 0 1
16542: PPUSH
16543: CALL_OW 255
16547: PPUSH
16548: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
16552: LD_VAR 0 2
16556: PUSH
16557: LD_VAR 0 4
16561: ARRAY
16562: PPUSH
16563: CALL_OW 141
// end ;
16567: GO 16399
16569: POP
16570: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16571: LD_VAR 0 1
16575: PPUSH
16576: LD_EXP 62
16580: PUSH
16581: LD_VAR 0 5
16585: ARRAY
16586: PUSH
16587: LD_INT 0
16589: PLUS
16590: PPUSH
16591: CALL_OW 505
// end ;
16595: LD_VAR 0 3
16599: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
16600: LD_INT 0
16602: PPUSH
16603: PPUSH
16604: PPUSH
16605: PPUSH
// if not hack in hackTanks then
16606: LD_VAR 0 1
16610: PUSH
16611: LD_EXP 61
16615: IN
16616: NOT
16617: IFFALSE 16621
// exit ;
16619: GO 16861
// index := GetElementIndex ( hackTanks , hack ) ;
16621: LD_ADDR_VAR 0 4
16625: PUSH
16626: LD_EXP 61
16630: PPUSH
16631: LD_VAR 0 1
16635: PPUSH
16636: CALL 24137 0 2
16640: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
16641: LD_ADDR_VAR 0 3
16645: PUSH
16646: DOUBLE
16647: LD_EXP 62
16651: PUSH
16652: LD_VAR 0 4
16656: ARRAY
16657: INC
16658: ST_TO_ADDR
16659: LD_INT 1
16661: PUSH
16662: FOR_DOWNTO
16663: IFFALSE 16835
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
16665: LD_ADDR_VAR 0 5
16669: PUSH
16670: LD_EXP 62
16674: PUSH
16675: LD_VAR 0 4
16679: ARRAY
16680: PUSH
16681: LD_VAR 0 3
16685: ARRAY
16686: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
16687: LD_VAR 0 5
16691: PUSH
16692: LD_INT 1
16694: ARRAY
16695: PPUSH
16696: CALL_OW 302
16700: NOT
16701: PUSH
16702: LD_VAR 0 5
16706: PUSH
16707: LD_INT 1
16709: ARRAY
16710: PPUSH
16711: CALL_OW 255
16715: PUSH
16716: LD_VAR 0 1
16720: PPUSH
16721: CALL_OW 255
16725: NONEQUAL
16726: OR
16727: IFFALSE 16833
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
16729: LD_VAR 0 5
16733: PUSH
16734: LD_INT 1
16736: ARRAY
16737: PPUSH
16738: CALL_OW 305
16742: PUSH
16743: LD_VAR 0 5
16747: PUSH
16748: LD_INT 1
16750: ARRAY
16751: PPUSH
16752: CALL_OW 255
16756: PUSH
16757: LD_VAR 0 1
16761: PPUSH
16762: CALL_OW 255
16766: EQUAL
16767: AND
16768: IFFALSE 16792
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
16770: LD_VAR 0 5
16774: PUSH
16775: LD_INT 1
16777: ARRAY
16778: PPUSH
16779: LD_VAR 0 5
16783: PUSH
16784: LD_INT 2
16786: ARRAY
16787: PPUSH
16788: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
16792: LD_ADDR_EXP 62
16796: PUSH
16797: LD_EXP 62
16801: PPUSH
16802: LD_VAR 0 4
16806: PPUSH
16807: LD_EXP 62
16811: PUSH
16812: LD_VAR 0 4
16816: ARRAY
16817: PPUSH
16818: LD_VAR 0 3
16822: PPUSH
16823: CALL_OW 3
16827: PPUSH
16828: CALL_OW 1
16832: ST_TO_ADDR
// end ; end ;
16833: GO 16662
16835: POP
16836: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16837: LD_VAR 0 1
16841: PPUSH
16842: LD_EXP 62
16846: PUSH
16847: LD_VAR 0 4
16851: ARRAY
16852: PUSH
16853: LD_INT 0
16855: PLUS
16856: PPUSH
16857: CALL_OW 505
// end ;
16861: LD_VAR 0 2
16865: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
16866: LD_INT 0
16868: PPUSH
16869: PPUSH
16870: PPUSH
16871: PPUSH
// if not hack in hackTanks then
16872: LD_VAR 0 1
16876: PUSH
16877: LD_EXP 61
16881: IN
16882: NOT
16883: IFFALSE 16887
// exit ;
16885: GO 16972
// index := GetElementIndex ( hackTanks , hack ) ;
16887: LD_ADDR_VAR 0 5
16891: PUSH
16892: LD_EXP 61
16896: PPUSH
16897: LD_VAR 0 1
16901: PPUSH
16902: CALL 24137 0 2
16906: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
16907: LD_ADDR_VAR 0 4
16911: PUSH
16912: DOUBLE
16913: LD_INT 1
16915: DEC
16916: ST_TO_ADDR
16917: LD_EXP 62
16921: PUSH
16922: LD_VAR 0 5
16926: ARRAY
16927: PUSH
16928: FOR_TO
16929: IFFALSE 16970
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
16931: LD_EXP 62
16935: PUSH
16936: LD_VAR 0 5
16940: ARRAY
16941: PUSH
16942: LD_VAR 0 4
16946: ARRAY
16947: PUSH
16948: LD_INT 1
16950: ARRAY
16951: PUSH
16952: LD_VAR 0 2
16956: EQUAL
16957: IFFALSE 16968
// KillUnit ( vehicle ) ;
16959: LD_VAR 0 2
16963: PPUSH
16964: CALL_OW 66
16968: GO 16928
16970: POP
16971: POP
// end ;
16972: LD_VAR 0 3
16976: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
16977: LD_EXP 66
16981: NOT
16982: IFFALSE 17017
16984: GO 16986
16986: DISABLE
// begin initMiner := true ;
16987: LD_ADDR_EXP 66
16991: PUSH
16992: LD_INT 1
16994: ST_TO_ADDR
// minersList := [ ] ;
16995: LD_ADDR_EXP 67
16999: PUSH
17000: EMPTY
17001: ST_TO_ADDR
// minerMinesList := [ ] ;
17002: LD_ADDR_EXP 68
17006: PUSH
17007: EMPTY
17008: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
17009: LD_ADDR_EXP 69
17013: PUSH
17014: LD_INT 5
17016: ST_TO_ADDR
// end ;
17017: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
17018: LD_EXP 66
17022: PUSH
17023: LD_INT 34
17025: PUSH
17026: LD_EXP 77
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: PPUSH
17035: CALL_OW 69
17039: AND
17040: IFFALSE 17503
17042: GO 17044
17044: DISABLE
17045: LD_INT 0
17047: PPUSH
17048: PPUSH
17049: PPUSH
17050: PPUSH
// begin enable ;
17051: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
17052: LD_ADDR_VAR 0 1
17056: PUSH
17057: LD_INT 34
17059: PUSH
17060: LD_EXP 77
17064: PUSH
17065: EMPTY
17066: LIST
17067: LIST
17068: PPUSH
17069: CALL_OW 69
17073: PUSH
17074: FOR_IN
17075: IFFALSE 17147
// begin if not i in minersList then
17077: LD_VAR 0 1
17081: PUSH
17082: LD_EXP 67
17086: IN
17087: NOT
17088: IFFALSE 17145
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
17090: LD_ADDR_EXP 67
17094: PUSH
17095: LD_EXP 67
17099: PPUSH
17100: LD_EXP 67
17104: PUSH
17105: LD_INT 1
17107: PLUS
17108: PPUSH
17109: LD_VAR 0 1
17113: PPUSH
17114: CALL_OW 1
17118: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17119: LD_ADDR_EXP 68
17123: PUSH
17124: LD_EXP 68
17128: PPUSH
17129: LD_EXP 68
17133: PUSH
17134: LD_INT 1
17136: PLUS
17137: PPUSH
17138: EMPTY
17139: PPUSH
17140: CALL_OW 1
17144: ST_TO_ADDR
// end end ;
17145: GO 17074
17147: POP
17148: POP
// for i := minerMinesList downto 1 do
17149: LD_ADDR_VAR 0 1
17153: PUSH
17154: DOUBLE
17155: LD_EXP 68
17159: INC
17160: ST_TO_ADDR
17161: LD_INT 1
17163: PUSH
17164: FOR_DOWNTO
17165: IFFALSE 17501
// begin if IsLive ( minersList [ i ] ) then
17167: LD_EXP 67
17171: PUSH
17172: LD_VAR 0 1
17176: ARRAY
17177: PPUSH
17178: CALL_OW 300
17182: IFFALSE 17210
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
17184: LD_EXP 67
17188: PUSH
17189: LD_VAR 0 1
17193: ARRAY
17194: PPUSH
17195: LD_EXP 68
17199: PUSH
17200: LD_VAR 0 1
17204: ARRAY
17205: PPUSH
17206: CALL_OW 505
// if not minerMinesList [ i ] then
17210: LD_EXP 68
17214: PUSH
17215: LD_VAR 0 1
17219: ARRAY
17220: NOT
17221: IFFALSE 17225
// continue ;
17223: GO 17164
// for j := minerMinesList [ i ] downto 1 do
17225: LD_ADDR_VAR 0 2
17229: PUSH
17230: DOUBLE
17231: LD_EXP 68
17235: PUSH
17236: LD_VAR 0 1
17240: ARRAY
17241: INC
17242: ST_TO_ADDR
17243: LD_INT 1
17245: PUSH
17246: FOR_DOWNTO
17247: IFFALSE 17497
// begin side := GetSide ( minersList [ i ] ) ;
17249: LD_ADDR_VAR 0 3
17253: PUSH
17254: LD_EXP 67
17258: PUSH
17259: LD_VAR 0 1
17263: ARRAY
17264: PPUSH
17265: CALL_OW 255
17269: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
17270: LD_ADDR_VAR 0 4
17274: PUSH
17275: LD_EXP 68
17279: PUSH
17280: LD_VAR 0 1
17284: ARRAY
17285: PUSH
17286: LD_VAR 0 2
17290: ARRAY
17291: PUSH
17292: LD_INT 1
17294: ARRAY
17295: PPUSH
17296: LD_EXP 68
17300: PUSH
17301: LD_VAR 0 1
17305: ARRAY
17306: PUSH
17307: LD_VAR 0 2
17311: ARRAY
17312: PUSH
17313: LD_INT 2
17315: ARRAY
17316: PPUSH
17317: CALL_OW 428
17321: ST_TO_ADDR
// if not tmp then
17322: LD_VAR 0 4
17326: NOT
17327: IFFALSE 17331
// continue ;
17329: GO 17246
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
17331: LD_VAR 0 4
17335: PUSH
17336: LD_INT 81
17338: PUSH
17339: LD_VAR 0 3
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PPUSH
17348: CALL_OW 69
17352: IN
17353: PUSH
17354: LD_EXP 68
17358: PUSH
17359: LD_VAR 0 1
17363: ARRAY
17364: PUSH
17365: LD_VAR 0 2
17369: ARRAY
17370: PUSH
17371: LD_INT 1
17373: ARRAY
17374: PPUSH
17375: LD_EXP 68
17379: PUSH
17380: LD_VAR 0 1
17384: ARRAY
17385: PUSH
17386: LD_VAR 0 2
17390: ARRAY
17391: PUSH
17392: LD_INT 2
17394: ARRAY
17395: PPUSH
17396: CALL_OW 458
17400: AND
17401: IFFALSE 17495
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
17403: LD_EXP 68
17407: PUSH
17408: LD_VAR 0 1
17412: ARRAY
17413: PUSH
17414: LD_VAR 0 2
17418: ARRAY
17419: PUSH
17420: LD_INT 1
17422: ARRAY
17423: PPUSH
17424: LD_EXP 68
17428: PUSH
17429: LD_VAR 0 1
17433: ARRAY
17434: PUSH
17435: LD_VAR 0 2
17439: ARRAY
17440: PUSH
17441: LD_INT 2
17443: ARRAY
17444: PPUSH
17445: LD_VAR 0 3
17449: PPUSH
17450: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
17454: LD_ADDR_EXP 68
17458: PUSH
17459: LD_EXP 68
17463: PPUSH
17464: LD_VAR 0 1
17468: PPUSH
17469: LD_EXP 68
17473: PUSH
17474: LD_VAR 0 1
17478: ARRAY
17479: PPUSH
17480: LD_VAR 0 2
17484: PPUSH
17485: CALL_OW 3
17489: PPUSH
17490: CALL_OW 1
17494: ST_TO_ADDR
// end ; end ;
17495: GO 17246
17497: POP
17498: POP
// end ;
17499: GO 17164
17501: POP
17502: POP
// end ;
17503: PPOPN 4
17505: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
17506: LD_INT 0
17508: PPUSH
17509: PPUSH
// result := false ;
17510: LD_ADDR_VAR 0 4
17514: PUSH
17515: LD_INT 0
17517: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
17518: LD_VAR 0 1
17522: PPUSH
17523: CALL_OW 264
17527: PUSH
17528: LD_EXP 77
17532: EQUAL
17533: NOT
17534: IFFALSE 17538
// exit ;
17536: GO 17778
// index := GetElementIndex ( minersList , unit ) ;
17538: LD_ADDR_VAR 0 5
17542: PUSH
17543: LD_EXP 67
17547: PPUSH
17548: LD_VAR 0 1
17552: PPUSH
17553: CALL 24137 0 2
17557: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
17558: LD_EXP 68
17562: PUSH
17563: LD_VAR 0 5
17567: ARRAY
17568: PUSH
17569: LD_EXP 69
17573: GREATEREQUAL
17574: IFFALSE 17578
// exit ;
17576: GO 17778
// ComMoveXY ( unit , x , y ) ;
17578: LD_VAR 0 1
17582: PPUSH
17583: LD_VAR 0 2
17587: PPUSH
17588: LD_VAR 0 3
17592: PPUSH
17593: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17597: LD_INT 35
17599: PPUSH
17600: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
17604: LD_VAR 0 1
17608: PPUSH
17609: LD_VAR 0 2
17613: PPUSH
17614: LD_VAR 0 3
17618: PPUSH
17619: CALL 54909 0 3
17623: NOT
17624: PUSH
17625: LD_VAR 0 1
17629: PPUSH
17630: CALL_OW 314
17634: AND
17635: IFFALSE 17639
// exit ;
17637: GO 17778
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
17639: LD_VAR 0 2
17643: PPUSH
17644: LD_VAR 0 3
17648: PPUSH
17649: CALL_OW 428
17653: PUSH
17654: LD_VAR 0 1
17658: EQUAL
17659: PUSH
17660: LD_VAR 0 1
17664: PPUSH
17665: CALL_OW 314
17669: NOT
17670: AND
17671: IFFALSE 17597
// PlaySoundXY ( x , y , PlantMine ) ;
17673: LD_VAR 0 2
17677: PPUSH
17678: LD_VAR 0 3
17682: PPUSH
17683: LD_STRING PlantMine
17685: PPUSH
17686: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
17690: LD_VAR 0 2
17694: PPUSH
17695: LD_VAR 0 3
17699: PPUSH
17700: LD_VAR 0 1
17704: PPUSH
17705: CALL_OW 255
17709: PPUSH
17710: LD_INT 0
17712: PPUSH
17713: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17717: LD_ADDR_EXP 68
17721: PUSH
17722: LD_EXP 68
17726: PPUSH
17727: LD_VAR 0 5
17731: PUSH
17732: LD_EXP 68
17736: PUSH
17737: LD_VAR 0 5
17741: ARRAY
17742: PUSH
17743: LD_INT 1
17745: PLUS
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PPUSH
17751: LD_VAR 0 2
17755: PUSH
17756: LD_VAR 0 3
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: PPUSH
17765: CALL 24352 0 3
17769: ST_TO_ADDR
// result := true ;
17770: LD_ADDR_VAR 0 4
17774: PUSH
17775: LD_INT 1
17777: ST_TO_ADDR
// end ;
17778: LD_VAR 0 4
17782: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
17783: LD_INT 0
17785: PPUSH
17786: PPUSH
17787: PPUSH
// if not unit in minersList then
17788: LD_VAR 0 1
17792: PUSH
17793: LD_EXP 67
17797: IN
17798: NOT
17799: IFFALSE 17803
// exit ;
17801: GO 18195
// index := GetElementIndex ( minersList , unit ) ;
17803: LD_ADDR_VAR 0 6
17807: PUSH
17808: LD_EXP 67
17812: PPUSH
17813: LD_VAR 0 1
17817: PPUSH
17818: CALL 24137 0 2
17822: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
17823: LD_ADDR_VAR 0 5
17827: PUSH
17828: DOUBLE
17829: LD_EXP 68
17833: PUSH
17834: LD_VAR 0 6
17838: ARRAY
17839: INC
17840: ST_TO_ADDR
17841: LD_INT 1
17843: PUSH
17844: FOR_DOWNTO
17845: IFFALSE 18006
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
17847: LD_EXP 68
17851: PUSH
17852: LD_VAR 0 6
17856: ARRAY
17857: PUSH
17858: LD_VAR 0 5
17862: ARRAY
17863: PUSH
17864: LD_INT 1
17866: ARRAY
17867: PUSH
17868: LD_VAR 0 2
17872: EQUAL
17873: PUSH
17874: LD_EXP 68
17878: PUSH
17879: LD_VAR 0 6
17883: ARRAY
17884: PUSH
17885: LD_VAR 0 5
17889: ARRAY
17890: PUSH
17891: LD_INT 2
17893: ARRAY
17894: PUSH
17895: LD_VAR 0 3
17899: EQUAL
17900: AND
17901: IFFALSE 18004
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17903: LD_EXP 68
17907: PUSH
17908: LD_VAR 0 6
17912: ARRAY
17913: PUSH
17914: LD_VAR 0 5
17918: ARRAY
17919: PUSH
17920: LD_INT 1
17922: ARRAY
17923: PPUSH
17924: LD_EXP 68
17928: PUSH
17929: LD_VAR 0 6
17933: ARRAY
17934: PUSH
17935: LD_VAR 0 5
17939: ARRAY
17940: PUSH
17941: LD_INT 2
17943: ARRAY
17944: PPUSH
17945: LD_VAR 0 1
17949: PPUSH
17950: CALL_OW 255
17954: PPUSH
17955: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17959: LD_ADDR_EXP 68
17963: PUSH
17964: LD_EXP 68
17968: PPUSH
17969: LD_VAR 0 6
17973: PPUSH
17974: LD_EXP 68
17978: PUSH
17979: LD_VAR 0 6
17983: ARRAY
17984: PPUSH
17985: LD_VAR 0 5
17989: PPUSH
17990: CALL_OW 3
17994: PPUSH
17995: CALL_OW 1
17999: ST_TO_ADDR
// exit ;
18000: POP
18001: POP
18002: GO 18195
// end ; end ;
18004: GO 17844
18006: POP
18007: POP
// for i := minerMinesList [ index ] downto 1 do
18008: LD_ADDR_VAR 0 5
18012: PUSH
18013: DOUBLE
18014: LD_EXP 68
18018: PUSH
18019: LD_VAR 0 6
18023: ARRAY
18024: INC
18025: ST_TO_ADDR
18026: LD_INT 1
18028: PUSH
18029: FOR_DOWNTO
18030: IFFALSE 18193
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
18032: LD_EXP 68
18036: PUSH
18037: LD_VAR 0 6
18041: ARRAY
18042: PUSH
18043: LD_VAR 0 5
18047: ARRAY
18048: PUSH
18049: LD_INT 1
18051: ARRAY
18052: PPUSH
18053: LD_EXP 68
18057: PUSH
18058: LD_VAR 0 6
18062: ARRAY
18063: PUSH
18064: LD_VAR 0 5
18068: ARRAY
18069: PUSH
18070: LD_INT 2
18072: ARRAY
18073: PPUSH
18074: LD_VAR 0 2
18078: PPUSH
18079: LD_VAR 0 3
18083: PPUSH
18084: CALL_OW 298
18088: PUSH
18089: LD_INT 6
18091: LESS
18092: IFFALSE 18191
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18094: LD_EXP 68
18098: PUSH
18099: LD_VAR 0 6
18103: ARRAY
18104: PUSH
18105: LD_VAR 0 5
18109: ARRAY
18110: PUSH
18111: LD_INT 1
18113: ARRAY
18114: PPUSH
18115: LD_EXP 68
18119: PUSH
18120: LD_VAR 0 6
18124: ARRAY
18125: PUSH
18126: LD_VAR 0 5
18130: ARRAY
18131: PUSH
18132: LD_INT 2
18134: ARRAY
18135: PPUSH
18136: LD_VAR 0 1
18140: PPUSH
18141: CALL_OW 255
18145: PPUSH
18146: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18150: LD_ADDR_EXP 68
18154: PUSH
18155: LD_EXP 68
18159: PPUSH
18160: LD_VAR 0 6
18164: PPUSH
18165: LD_EXP 68
18169: PUSH
18170: LD_VAR 0 6
18174: ARRAY
18175: PPUSH
18176: LD_VAR 0 5
18180: PPUSH
18181: CALL_OW 3
18185: PPUSH
18186: CALL_OW 1
18190: ST_TO_ADDR
// end ; end ;
18191: GO 18029
18193: POP
18194: POP
// end ;
18195: LD_VAR 0 4
18199: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
18200: LD_INT 0
18202: PPUSH
18203: PPUSH
18204: PPUSH
18205: PPUSH
18206: PPUSH
18207: PPUSH
18208: PPUSH
18209: PPUSH
18210: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
18211: LD_VAR 0 1
18215: PPUSH
18216: CALL_OW 264
18220: PUSH
18221: LD_EXP 77
18225: EQUAL
18226: NOT
18227: PUSH
18228: LD_VAR 0 1
18232: PUSH
18233: LD_EXP 67
18237: IN
18238: NOT
18239: OR
18240: IFFALSE 18244
// exit ;
18242: GO 18566
// index := GetElementIndex ( minersList , unit ) ;
18244: LD_ADDR_VAR 0 6
18248: PUSH
18249: LD_EXP 67
18253: PPUSH
18254: LD_VAR 0 1
18258: PPUSH
18259: CALL 24137 0 2
18263: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
18264: LD_ADDR_VAR 0 8
18268: PUSH
18269: LD_EXP 69
18273: PUSH
18274: LD_EXP 68
18278: PUSH
18279: LD_VAR 0 6
18283: ARRAY
18284: MINUS
18285: ST_TO_ADDR
// if not minesFreeAmount then
18286: LD_VAR 0 8
18290: NOT
18291: IFFALSE 18295
// exit ;
18293: GO 18566
// tmp := [ ] ;
18295: LD_ADDR_VAR 0 7
18299: PUSH
18300: EMPTY
18301: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
18302: LD_ADDR_VAR 0 5
18306: PUSH
18307: DOUBLE
18308: LD_INT 1
18310: DEC
18311: ST_TO_ADDR
18312: LD_VAR 0 8
18316: PUSH
18317: FOR_TO
18318: IFFALSE 18513
// begin _d := rand ( 0 , 5 ) ;
18320: LD_ADDR_VAR 0 11
18324: PUSH
18325: LD_INT 0
18327: PPUSH
18328: LD_INT 5
18330: PPUSH
18331: CALL_OW 12
18335: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
18336: LD_ADDR_VAR 0 12
18340: PUSH
18341: LD_INT 2
18343: PPUSH
18344: LD_INT 6
18346: PPUSH
18347: CALL_OW 12
18351: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
18352: LD_ADDR_VAR 0 9
18356: PUSH
18357: LD_VAR 0 2
18361: PPUSH
18362: LD_VAR 0 11
18366: PPUSH
18367: LD_VAR 0 12
18371: PPUSH
18372: CALL_OW 272
18376: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
18377: LD_ADDR_VAR 0 10
18381: PUSH
18382: LD_VAR 0 3
18386: PPUSH
18387: LD_VAR 0 11
18391: PPUSH
18392: LD_VAR 0 12
18396: PPUSH
18397: CALL_OW 273
18401: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
18402: LD_VAR 0 9
18406: PPUSH
18407: LD_VAR 0 10
18411: PPUSH
18412: CALL_OW 488
18416: PUSH
18417: LD_VAR 0 9
18421: PUSH
18422: LD_VAR 0 10
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: LD_VAR 0 7
18435: IN
18436: NOT
18437: AND
18438: PUSH
18439: LD_VAR 0 9
18443: PPUSH
18444: LD_VAR 0 10
18448: PPUSH
18449: CALL_OW 458
18453: NOT
18454: AND
18455: IFFALSE 18497
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
18457: LD_ADDR_VAR 0 7
18461: PUSH
18462: LD_VAR 0 7
18466: PPUSH
18467: LD_VAR 0 7
18471: PUSH
18472: LD_INT 1
18474: PLUS
18475: PPUSH
18476: LD_VAR 0 9
18480: PUSH
18481: LD_VAR 0 10
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PPUSH
18490: CALL_OW 1
18494: ST_TO_ADDR
18495: GO 18511
// i := i - 1 ;
18497: LD_ADDR_VAR 0 5
18501: PUSH
18502: LD_VAR 0 5
18506: PUSH
18507: LD_INT 1
18509: MINUS
18510: ST_TO_ADDR
// end ;
18511: GO 18317
18513: POP
18514: POP
// for i in tmp do
18515: LD_ADDR_VAR 0 5
18519: PUSH
18520: LD_VAR 0 7
18524: PUSH
18525: FOR_IN
18526: IFFALSE 18564
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
18528: LD_VAR 0 1
18532: PPUSH
18533: LD_VAR 0 5
18537: PUSH
18538: LD_INT 1
18540: ARRAY
18541: PPUSH
18542: LD_VAR 0 5
18546: PUSH
18547: LD_INT 2
18549: ARRAY
18550: PPUSH
18551: CALL 17506 0 3
18555: NOT
18556: IFFALSE 18562
// exit ;
18558: POP
18559: POP
18560: GO 18566
18562: GO 18525
18564: POP
18565: POP
// end ;
18566: LD_VAR 0 4
18570: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
18571: LD_INT 0
18573: PPUSH
18574: PPUSH
18575: PPUSH
18576: PPUSH
18577: PPUSH
18578: PPUSH
18579: PPUSH
// if not GetClass ( unit ) = class_sniper then
18580: LD_VAR 0 1
18584: PPUSH
18585: CALL_OW 257
18589: PUSH
18590: LD_INT 5
18592: EQUAL
18593: NOT
18594: IFFALSE 18598
// exit ;
18596: GO 18986
// dist := 8 ;
18598: LD_ADDR_VAR 0 5
18602: PUSH
18603: LD_INT 8
18605: ST_TO_ADDR
// viewRange := 12 ;
18606: LD_ADDR_VAR 0 7
18610: PUSH
18611: LD_INT 12
18613: ST_TO_ADDR
// side := GetSide ( unit ) ;
18614: LD_ADDR_VAR 0 6
18618: PUSH
18619: LD_VAR 0 1
18623: PPUSH
18624: CALL_OW 255
18628: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
18629: LD_INT 61
18631: PPUSH
18632: LD_VAR 0 6
18636: PPUSH
18637: CALL_OW 321
18641: PUSH
18642: LD_INT 2
18644: EQUAL
18645: IFFALSE 18655
// viewRange := 16 ;
18647: LD_ADDR_VAR 0 7
18651: PUSH
18652: LD_INT 16
18654: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
18655: LD_VAR 0 1
18659: PPUSH
18660: LD_VAR 0 2
18664: PPUSH
18665: LD_VAR 0 3
18669: PPUSH
18670: CALL_OW 297
18674: PUSH
18675: LD_VAR 0 5
18679: GREATER
18680: IFFALSE 18759
// begin ComMoveXY ( unit , x , y ) ;
18682: LD_VAR 0 1
18686: PPUSH
18687: LD_VAR 0 2
18691: PPUSH
18692: LD_VAR 0 3
18696: PPUSH
18697: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18701: LD_INT 35
18703: PPUSH
18704: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
18708: LD_VAR 0 1
18712: PPUSH
18713: LD_VAR 0 2
18717: PPUSH
18718: LD_VAR 0 3
18722: PPUSH
18723: CALL 54909 0 3
18727: NOT
18728: IFFALSE 18732
// exit ;
18730: GO 18986
// until GetDistUnitXY ( unit , x , y ) < dist ;
18732: LD_VAR 0 1
18736: PPUSH
18737: LD_VAR 0 2
18741: PPUSH
18742: LD_VAR 0 3
18746: PPUSH
18747: CALL_OW 297
18751: PUSH
18752: LD_VAR 0 5
18756: LESS
18757: IFFALSE 18701
// end ; ComTurnXY ( unit , x , y ) ;
18759: LD_VAR 0 1
18763: PPUSH
18764: LD_VAR 0 2
18768: PPUSH
18769: LD_VAR 0 3
18773: PPUSH
18774: CALL_OW 118
// wait ( 5 ) ;
18778: LD_INT 5
18780: PPUSH
18781: CALL_OW 67
// _d := GetDir ( unit ) ;
18785: LD_ADDR_VAR 0 10
18789: PUSH
18790: LD_VAR 0 1
18794: PPUSH
18795: CALL_OW 254
18799: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
18800: LD_ADDR_VAR 0 8
18804: PUSH
18805: LD_VAR 0 1
18809: PPUSH
18810: CALL_OW 250
18814: PPUSH
18815: LD_VAR 0 10
18819: PPUSH
18820: LD_VAR 0 5
18824: PPUSH
18825: CALL_OW 272
18829: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
18830: LD_ADDR_VAR 0 9
18834: PUSH
18835: LD_VAR 0 1
18839: PPUSH
18840: CALL_OW 251
18844: PPUSH
18845: LD_VAR 0 10
18849: PPUSH
18850: LD_VAR 0 5
18854: PPUSH
18855: CALL_OW 273
18859: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18860: LD_VAR 0 8
18864: PPUSH
18865: LD_VAR 0 9
18869: PPUSH
18870: CALL_OW 488
18874: NOT
18875: IFFALSE 18879
// exit ;
18877: GO 18986
// ComAnimCustom ( unit , 1 ) ;
18879: LD_VAR 0 1
18883: PPUSH
18884: LD_INT 1
18886: PPUSH
18887: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
18891: LD_VAR 0 8
18895: PPUSH
18896: LD_VAR 0 9
18900: PPUSH
18901: LD_VAR 0 6
18905: PPUSH
18906: LD_VAR 0 7
18910: PPUSH
18911: CALL_OW 330
// repeat wait ( 1 ) ;
18915: LD_INT 1
18917: PPUSH
18918: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
18922: LD_VAR 0 1
18926: PPUSH
18927: CALL_OW 316
18931: PUSH
18932: LD_VAR 0 1
18936: PPUSH
18937: CALL_OW 314
18941: OR
18942: PUSH
18943: LD_VAR 0 1
18947: PPUSH
18948: CALL_OW 302
18952: NOT
18953: OR
18954: PUSH
18955: LD_VAR 0 1
18959: PPUSH
18960: CALL_OW 301
18964: OR
18965: IFFALSE 18915
// RemoveSeeing ( _x , _y , side ) ;
18967: LD_VAR 0 8
18971: PPUSH
18972: LD_VAR 0 9
18976: PPUSH
18977: LD_VAR 0 6
18981: PPUSH
18982: CALL_OW 331
// end ; end_of_file
18986: LD_VAR 0 4
18990: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
18991: LD_VAR 0 1
18995: PPUSH
18996: LD_VAR 0 2
19000: PPUSH
19001: LD_VAR 0 3
19005: PPUSH
19006: LD_VAR 0 4
19010: PPUSH
19011: LD_VAR 0 5
19015: PPUSH
19016: LD_VAR 0 6
19020: PPUSH
19021: CALL 64 0 6
// end ;
19025: PPOPN 6
19027: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
19028: CALL 39 0 0
// end ; end_of_file
19032: PPOPN 1
19034: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
19035: LD_VAR 0 1
19039: PUSH
19040: LD_INT 200
19042: DOUBLE
19043: GREATEREQUAL
19044: IFFALSE 19052
19046: LD_INT 299
19048: DOUBLE
19049: LESSEQUAL
19050: IFTRUE 19054
19052: GO 19086
19054: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
19055: LD_VAR 0 1
19059: PPUSH
19060: LD_VAR 0 2
19064: PPUSH
19065: LD_VAR 0 3
19069: PPUSH
19070: LD_VAR 0 4
19074: PPUSH
19075: LD_VAR 0 5
19079: PPUSH
19080: CALL 14729 0 5
19084: GO 19163
19086: LD_INT 300
19088: DOUBLE
19089: GREATEREQUAL
19090: IFFALSE 19098
19092: LD_INT 399
19094: DOUBLE
19095: LESSEQUAL
19096: IFTRUE 19100
19098: GO 19162
19100: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
19101: LD_VAR 0 1
19105: PPUSH
19106: LD_VAR 0 2
19110: PPUSH
19111: LD_VAR 0 3
19115: PPUSH
19116: LD_VAR 0 4
19120: PPUSH
19121: LD_VAR 0 5
19125: PPUSH
19126: LD_VAR 0 6
19130: PPUSH
19131: LD_VAR 0 7
19135: PPUSH
19136: LD_VAR 0 8
19140: PPUSH
19141: LD_VAR 0 9
19145: PPUSH
19146: LD_VAR 0 10
19150: PPUSH
19151: LD_VAR 0 11
19155: PPUSH
19156: CALL 12371 0 11
19160: GO 19163
19162: POP
// end ;
19163: PPOPN 11
19165: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
19166: LD_VAR 0 1
19170: PPUSH
19171: LD_VAR 0 2
19175: PPUSH
19176: LD_VAR 0 3
19180: PPUSH
19181: LD_VAR 0 4
19185: PPUSH
19186: LD_VAR 0 5
19190: PPUSH
19191: CALL 14465 0 5
// end ; end_of_file
19195: PPOPN 5
19197: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19198: LD_INT 0
19200: PPUSH
// ar_miner := 81 ;
19201: LD_ADDR_EXP 77
19205: PUSH
19206: LD_INT 81
19208: ST_TO_ADDR
// ar_crane := 88 ;
19209: LD_ADDR_EXP 76
19213: PUSH
19214: LD_INT 88
19216: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19217: LD_ADDR_EXP 71
19221: PUSH
19222: LD_INT 89
19224: ST_TO_ADDR
// us_hack := 99 ;
19225: LD_ADDR_EXP 72
19229: PUSH
19230: LD_INT 99
19232: ST_TO_ADDR
// us_artillery := 97 ;
19233: LD_ADDR_EXP 73
19237: PUSH
19238: LD_INT 97
19240: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19241: LD_ADDR_EXP 74
19245: PUSH
19246: LD_INT 91
19248: ST_TO_ADDR
// ar_mortar := 92 ;
19249: LD_ADDR_EXP 75
19253: PUSH
19254: LD_INT 92
19256: ST_TO_ADDR
// ru_radar := 98 ;
19257: LD_ADDR_EXP 70
19261: PUSH
19262: LD_INT 98
19264: ST_TO_ADDR
// tech_Artillery := 80 ;
19265: LD_ADDR_EXP 78
19269: PUSH
19270: LD_INT 80
19272: ST_TO_ADDR
// tech_RadMat := 81 ;
19273: LD_ADDR_EXP 79
19277: PUSH
19278: LD_INT 81
19280: ST_TO_ADDR
// tech_BasicTools := 82 ;
19281: LD_ADDR_EXP 80
19285: PUSH
19286: LD_INT 82
19288: ST_TO_ADDR
// tech_Cargo := 83 ;
19289: LD_ADDR_EXP 81
19293: PUSH
19294: LD_INT 83
19296: ST_TO_ADDR
// tech_Track := 84 ;
19297: LD_ADDR_EXP 82
19301: PUSH
19302: LD_INT 84
19304: ST_TO_ADDR
// tech_Crane := 85 ;
19305: LD_ADDR_EXP 83
19309: PUSH
19310: LD_INT 85
19312: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19313: LD_ADDR_EXP 84
19317: PUSH
19318: LD_INT 86
19320: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19321: LD_ADDR_EXP 85
19325: PUSH
19326: LD_INT 87
19328: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19329: LD_ADDR_EXP 86
19333: PUSH
19334: LD_INT 88
19336: ST_TO_ADDR
// class_mastodont := 31 ;
19337: LD_ADDR_EXP 87
19341: PUSH
19342: LD_INT 31
19344: ST_TO_ADDR
// class_horse := 21 ;
19345: LD_ADDR_EXP 88
19349: PUSH
19350: LD_INT 21
19352: ST_TO_ADDR
// end ;
19353: LD_VAR 0 1
19357: RET
// every 1 do
19358: GO 19360
19360: DISABLE
// InitGlobalVariables ; end_of_file
19361: CALL 19198 0 0
19365: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19366: LD_INT 0
19368: PPUSH
19369: PPUSH
// if exist_mode then
19370: LD_VAR 0 2
19374: IFFALSE 19399
// unit := CreateCharacter ( prefix & ident ) else
19376: LD_ADDR_VAR 0 5
19380: PUSH
19381: LD_VAR 0 3
19385: PUSH
19386: LD_VAR 0 1
19390: STR
19391: PPUSH
19392: CALL_OW 34
19396: ST_TO_ADDR
19397: GO 19414
// unit := NewCharacter ( ident ) ;
19399: LD_ADDR_VAR 0 5
19403: PUSH
19404: LD_VAR 0 1
19408: PPUSH
19409: CALL_OW 25
19413: ST_TO_ADDR
// result := unit ;
19414: LD_ADDR_VAR 0 4
19418: PUSH
19419: LD_VAR 0 5
19423: ST_TO_ADDR
// end ;
19424: LD_VAR 0 4
19428: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19429: LD_INT 0
19431: PPUSH
19432: PPUSH
// if not side or not nation then
19433: LD_VAR 0 1
19437: NOT
19438: PUSH
19439: LD_VAR 0 2
19443: NOT
19444: OR
19445: IFFALSE 19449
// exit ;
19447: GO 20217
// case nation of nation_american :
19449: LD_VAR 0 2
19453: PUSH
19454: LD_INT 1
19456: DOUBLE
19457: EQUAL
19458: IFTRUE 19462
19460: GO 19676
19462: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19463: LD_ADDR_VAR 0 4
19467: PUSH
19468: LD_INT 35
19470: PUSH
19471: LD_INT 45
19473: PUSH
19474: LD_INT 46
19476: PUSH
19477: LD_INT 47
19479: PUSH
19480: LD_INT 82
19482: PUSH
19483: LD_INT 83
19485: PUSH
19486: LD_INT 84
19488: PUSH
19489: LD_INT 85
19491: PUSH
19492: LD_INT 86
19494: PUSH
19495: LD_INT 1
19497: PUSH
19498: LD_INT 2
19500: PUSH
19501: LD_INT 6
19503: PUSH
19504: LD_INT 15
19506: PUSH
19507: LD_INT 16
19509: PUSH
19510: LD_INT 7
19512: PUSH
19513: LD_INT 12
19515: PUSH
19516: LD_INT 13
19518: PUSH
19519: LD_INT 10
19521: PUSH
19522: LD_INT 14
19524: PUSH
19525: LD_INT 20
19527: PUSH
19528: LD_INT 21
19530: PUSH
19531: LD_INT 22
19533: PUSH
19534: LD_INT 25
19536: PUSH
19537: LD_INT 32
19539: PUSH
19540: LD_INT 27
19542: PUSH
19543: LD_INT 36
19545: PUSH
19546: LD_INT 69
19548: PUSH
19549: LD_INT 39
19551: PUSH
19552: LD_INT 34
19554: PUSH
19555: LD_INT 40
19557: PUSH
19558: LD_INT 48
19560: PUSH
19561: LD_INT 49
19563: PUSH
19564: LD_INT 50
19566: PUSH
19567: LD_INT 51
19569: PUSH
19570: LD_INT 52
19572: PUSH
19573: LD_INT 53
19575: PUSH
19576: LD_INT 54
19578: PUSH
19579: LD_INT 55
19581: PUSH
19582: LD_INT 56
19584: PUSH
19585: LD_INT 57
19587: PUSH
19588: LD_INT 58
19590: PUSH
19591: LD_INT 59
19593: PUSH
19594: LD_INT 60
19596: PUSH
19597: LD_INT 61
19599: PUSH
19600: LD_INT 62
19602: PUSH
19603: LD_INT 80
19605: PUSH
19606: LD_INT 82
19608: PUSH
19609: LD_INT 83
19611: PUSH
19612: LD_INT 84
19614: PUSH
19615: LD_INT 85
19617: PUSH
19618: LD_INT 86
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: ST_TO_ADDR
19674: GO 20141
19676: LD_INT 2
19678: DOUBLE
19679: EQUAL
19680: IFTRUE 19684
19682: GO 19910
19684: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
19685: LD_ADDR_VAR 0 4
19689: PUSH
19690: LD_INT 35
19692: PUSH
19693: LD_INT 45
19695: PUSH
19696: LD_INT 46
19698: PUSH
19699: LD_INT 47
19701: PUSH
19702: LD_INT 82
19704: PUSH
19705: LD_INT 83
19707: PUSH
19708: LD_INT 84
19710: PUSH
19711: LD_INT 85
19713: PUSH
19714: LD_INT 87
19716: PUSH
19717: LD_INT 70
19719: PUSH
19720: LD_INT 1
19722: PUSH
19723: LD_INT 11
19725: PUSH
19726: LD_INT 3
19728: PUSH
19729: LD_INT 4
19731: PUSH
19732: LD_INT 5
19734: PUSH
19735: LD_INT 6
19737: PUSH
19738: LD_INT 15
19740: PUSH
19741: LD_INT 18
19743: PUSH
19744: LD_INT 7
19746: PUSH
19747: LD_INT 17
19749: PUSH
19750: LD_INT 8
19752: PUSH
19753: LD_INT 20
19755: PUSH
19756: LD_INT 21
19758: PUSH
19759: LD_INT 22
19761: PUSH
19762: LD_INT 72
19764: PUSH
19765: LD_INT 26
19767: PUSH
19768: LD_INT 69
19770: PUSH
19771: LD_INT 39
19773: PUSH
19774: LD_INT 40
19776: PUSH
19777: LD_INT 41
19779: PUSH
19780: LD_INT 42
19782: PUSH
19783: LD_INT 43
19785: PUSH
19786: LD_INT 48
19788: PUSH
19789: LD_INT 49
19791: PUSH
19792: LD_INT 50
19794: PUSH
19795: LD_INT 51
19797: PUSH
19798: LD_INT 52
19800: PUSH
19801: LD_INT 53
19803: PUSH
19804: LD_INT 54
19806: PUSH
19807: LD_INT 55
19809: PUSH
19810: LD_INT 56
19812: PUSH
19813: LD_INT 60
19815: PUSH
19816: LD_INT 61
19818: PUSH
19819: LD_INT 62
19821: PUSH
19822: LD_INT 66
19824: PUSH
19825: LD_INT 67
19827: PUSH
19828: LD_INT 68
19830: PUSH
19831: LD_INT 81
19833: PUSH
19834: LD_INT 82
19836: PUSH
19837: LD_INT 83
19839: PUSH
19840: LD_INT 84
19842: PUSH
19843: LD_INT 85
19845: PUSH
19846: LD_INT 87
19848: PUSH
19849: LD_INT 88
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: ST_TO_ADDR
19908: GO 20141
19910: LD_INT 3
19912: DOUBLE
19913: EQUAL
19914: IFTRUE 19918
19916: GO 20140
19918: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
19919: LD_ADDR_VAR 0 4
19923: PUSH
19924: LD_INT 46
19926: PUSH
19927: LD_INT 47
19929: PUSH
19930: LD_INT 1
19932: PUSH
19933: LD_INT 2
19935: PUSH
19936: LD_INT 82
19938: PUSH
19939: LD_INT 83
19941: PUSH
19942: LD_INT 84
19944: PUSH
19945: LD_INT 85
19947: PUSH
19948: LD_INT 86
19950: PUSH
19951: LD_INT 11
19953: PUSH
19954: LD_INT 9
19956: PUSH
19957: LD_INT 20
19959: PUSH
19960: LD_INT 19
19962: PUSH
19963: LD_INT 21
19965: PUSH
19966: LD_INT 24
19968: PUSH
19969: LD_INT 22
19971: PUSH
19972: LD_INT 25
19974: PUSH
19975: LD_INT 28
19977: PUSH
19978: LD_INT 29
19980: PUSH
19981: LD_INT 30
19983: PUSH
19984: LD_INT 31
19986: PUSH
19987: LD_INT 37
19989: PUSH
19990: LD_INT 38
19992: PUSH
19993: LD_INT 32
19995: PUSH
19996: LD_INT 27
19998: PUSH
19999: LD_INT 33
20001: PUSH
20002: LD_INT 69
20004: PUSH
20005: LD_INT 39
20007: PUSH
20008: LD_INT 34
20010: PUSH
20011: LD_INT 40
20013: PUSH
20014: LD_INT 71
20016: PUSH
20017: LD_INT 23
20019: PUSH
20020: LD_INT 44
20022: PUSH
20023: LD_INT 48
20025: PUSH
20026: LD_INT 49
20028: PUSH
20029: LD_INT 50
20031: PUSH
20032: LD_INT 51
20034: PUSH
20035: LD_INT 52
20037: PUSH
20038: LD_INT 53
20040: PUSH
20041: LD_INT 54
20043: PUSH
20044: LD_INT 55
20046: PUSH
20047: LD_INT 56
20049: PUSH
20050: LD_INT 57
20052: PUSH
20053: LD_INT 58
20055: PUSH
20056: LD_INT 59
20058: PUSH
20059: LD_INT 63
20061: PUSH
20062: LD_INT 64
20064: PUSH
20065: LD_INT 65
20067: PUSH
20068: LD_INT 82
20070: PUSH
20071: LD_INT 83
20073: PUSH
20074: LD_INT 84
20076: PUSH
20077: LD_INT 85
20079: PUSH
20080: LD_INT 86
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: ST_TO_ADDR
20138: GO 20141
20140: POP
// if state > - 1 and state < 3 then
20141: LD_VAR 0 3
20145: PUSH
20146: LD_INT 1
20148: NEG
20149: GREATER
20150: PUSH
20151: LD_VAR 0 3
20155: PUSH
20156: LD_INT 3
20158: LESS
20159: AND
20160: IFFALSE 20217
// for i in result do
20162: LD_ADDR_VAR 0 5
20166: PUSH
20167: LD_VAR 0 4
20171: PUSH
20172: FOR_IN
20173: IFFALSE 20215
// if GetTech ( i , side ) <> state then
20175: LD_VAR 0 5
20179: PPUSH
20180: LD_VAR 0 1
20184: PPUSH
20185: CALL_OW 321
20189: PUSH
20190: LD_VAR 0 3
20194: NONEQUAL
20195: IFFALSE 20213
// result := result diff i ;
20197: LD_ADDR_VAR 0 4
20201: PUSH
20202: LD_VAR 0 4
20206: PUSH
20207: LD_VAR 0 5
20211: DIFF
20212: ST_TO_ADDR
20213: GO 20172
20215: POP
20216: POP
// end ;
20217: LD_VAR 0 4
20221: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20222: LD_INT 0
20224: PPUSH
20225: PPUSH
20226: PPUSH
// result := true ;
20227: LD_ADDR_VAR 0 3
20231: PUSH
20232: LD_INT 1
20234: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20235: LD_ADDR_VAR 0 5
20239: PUSH
20240: LD_VAR 0 2
20244: PPUSH
20245: CALL_OW 480
20249: ST_TO_ADDR
// if not tmp then
20250: LD_VAR 0 5
20254: NOT
20255: IFFALSE 20259
// exit ;
20257: GO 20308
// for i in tmp do
20259: LD_ADDR_VAR 0 4
20263: PUSH
20264: LD_VAR 0 5
20268: PUSH
20269: FOR_IN
20270: IFFALSE 20306
// if GetTech ( i , side ) <> state_researched then
20272: LD_VAR 0 4
20276: PPUSH
20277: LD_VAR 0 1
20281: PPUSH
20282: CALL_OW 321
20286: PUSH
20287: LD_INT 2
20289: NONEQUAL
20290: IFFALSE 20304
// begin result := false ;
20292: LD_ADDR_VAR 0 3
20296: PUSH
20297: LD_INT 0
20299: ST_TO_ADDR
// exit ;
20300: POP
20301: POP
20302: GO 20308
// end ;
20304: GO 20269
20306: POP
20307: POP
// end ;
20308: LD_VAR 0 3
20312: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20313: LD_INT 0
20315: PPUSH
20316: PPUSH
20317: PPUSH
20318: PPUSH
20319: PPUSH
20320: PPUSH
20321: PPUSH
20322: PPUSH
20323: PPUSH
20324: PPUSH
20325: PPUSH
20326: PPUSH
20327: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20328: LD_VAR 0 1
20332: NOT
20333: PUSH
20334: LD_VAR 0 1
20338: PPUSH
20339: CALL_OW 257
20343: PUSH
20344: LD_INT 9
20346: NONEQUAL
20347: OR
20348: IFFALSE 20352
// exit ;
20350: GO 20925
// side := GetSide ( unit ) ;
20352: LD_ADDR_VAR 0 9
20356: PUSH
20357: LD_VAR 0 1
20361: PPUSH
20362: CALL_OW 255
20366: ST_TO_ADDR
// tech_space := tech_spacanom ;
20367: LD_ADDR_VAR 0 12
20371: PUSH
20372: LD_INT 29
20374: ST_TO_ADDR
// tech_time := tech_taurad ;
20375: LD_ADDR_VAR 0 13
20379: PUSH
20380: LD_INT 28
20382: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20383: LD_ADDR_VAR 0 11
20387: PUSH
20388: LD_VAR 0 1
20392: PPUSH
20393: CALL_OW 310
20397: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20398: LD_VAR 0 11
20402: PPUSH
20403: CALL_OW 247
20407: PUSH
20408: LD_INT 2
20410: EQUAL
20411: IFFALSE 20415
// exit ;
20413: GO 20925
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20415: LD_ADDR_VAR 0 8
20419: PUSH
20420: LD_INT 81
20422: PUSH
20423: LD_VAR 0 9
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 3
20434: PUSH
20435: LD_INT 21
20437: PUSH
20438: LD_INT 3
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PPUSH
20453: CALL_OW 69
20457: ST_TO_ADDR
// if not tmp then
20458: LD_VAR 0 8
20462: NOT
20463: IFFALSE 20467
// exit ;
20465: GO 20925
// if in_unit then
20467: LD_VAR 0 11
20471: IFFALSE 20495
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20473: LD_ADDR_VAR 0 10
20477: PUSH
20478: LD_VAR 0 8
20482: PPUSH
20483: LD_VAR 0 11
20487: PPUSH
20488: CALL_OW 74
20492: ST_TO_ADDR
20493: GO 20515
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20495: LD_ADDR_VAR 0 10
20499: PUSH
20500: LD_VAR 0 8
20504: PPUSH
20505: LD_VAR 0 1
20509: PPUSH
20510: CALL_OW 74
20514: ST_TO_ADDR
// if not enemy then
20515: LD_VAR 0 10
20519: NOT
20520: IFFALSE 20524
// exit ;
20522: GO 20925
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20524: LD_VAR 0 11
20528: PUSH
20529: LD_VAR 0 11
20533: PPUSH
20534: LD_VAR 0 10
20538: PPUSH
20539: CALL_OW 296
20543: PUSH
20544: LD_INT 13
20546: GREATER
20547: AND
20548: PUSH
20549: LD_VAR 0 1
20553: PPUSH
20554: LD_VAR 0 10
20558: PPUSH
20559: CALL_OW 296
20563: PUSH
20564: LD_INT 12
20566: GREATER
20567: OR
20568: IFFALSE 20572
// exit ;
20570: GO 20925
// missile := [ 1 ] ;
20572: LD_ADDR_VAR 0 14
20576: PUSH
20577: LD_INT 1
20579: PUSH
20580: EMPTY
20581: LIST
20582: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20583: LD_VAR 0 9
20587: PPUSH
20588: LD_VAR 0 12
20592: PPUSH
20593: CALL_OW 325
20597: IFFALSE 20626
// missile := Insert ( missile , missile + 1 , 2 ) ;
20599: LD_ADDR_VAR 0 14
20603: PUSH
20604: LD_VAR 0 14
20608: PPUSH
20609: LD_VAR 0 14
20613: PUSH
20614: LD_INT 1
20616: PLUS
20617: PPUSH
20618: LD_INT 2
20620: PPUSH
20621: CALL_OW 2
20625: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20626: LD_VAR 0 9
20630: PPUSH
20631: LD_VAR 0 13
20635: PPUSH
20636: CALL_OW 325
20640: PUSH
20641: LD_VAR 0 10
20645: PPUSH
20646: CALL_OW 255
20650: PPUSH
20651: LD_VAR 0 13
20655: PPUSH
20656: CALL_OW 325
20660: NOT
20661: AND
20662: IFFALSE 20691
// missile := Insert ( missile , missile + 1 , 3 ) ;
20664: LD_ADDR_VAR 0 14
20668: PUSH
20669: LD_VAR 0 14
20673: PPUSH
20674: LD_VAR 0 14
20678: PUSH
20679: LD_INT 1
20681: PLUS
20682: PPUSH
20683: LD_INT 3
20685: PPUSH
20686: CALL_OW 2
20690: ST_TO_ADDR
// if missile < 2 then
20691: LD_VAR 0 14
20695: PUSH
20696: LD_INT 2
20698: LESS
20699: IFFALSE 20703
// exit ;
20701: GO 20925
// x := GetX ( enemy ) ;
20703: LD_ADDR_VAR 0 4
20707: PUSH
20708: LD_VAR 0 10
20712: PPUSH
20713: CALL_OW 250
20717: ST_TO_ADDR
// y := GetY ( enemy ) ;
20718: LD_ADDR_VAR 0 5
20722: PUSH
20723: LD_VAR 0 10
20727: PPUSH
20728: CALL_OW 251
20732: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20733: LD_ADDR_VAR 0 6
20737: PUSH
20738: LD_VAR 0 4
20742: PUSH
20743: LD_INT 1
20745: NEG
20746: PPUSH
20747: LD_INT 1
20749: PPUSH
20750: CALL_OW 12
20754: PLUS
20755: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20756: LD_ADDR_VAR 0 7
20760: PUSH
20761: LD_VAR 0 5
20765: PUSH
20766: LD_INT 1
20768: NEG
20769: PPUSH
20770: LD_INT 1
20772: PPUSH
20773: CALL_OW 12
20777: PLUS
20778: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20779: LD_VAR 0 6
20783: PPUSH
20784: LD_VAR 0 7
20788: PPUSH
20789: CALL_OW 488
20793: NOT
20794: IFFALSE 20816
// begin _x := x ;
20796: LD_ADDR_VAR 0 6
20800: PUSH
20801: LD_VAR 0 4
20805: ST_TO_ADDR
// _y := y ;
20806: LD_ADDR_VAR 0 7
20810: PUSH
20811: LD_VAR 0 5
20815: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20816: LD_ADDR_VAR 0 3
20820: PUSH
20821: LD_INT 1
20823: PPUSH
20824: LD_VAR 0 14
20828: PPUSH
20829: CALL_OW 12
20833: ST_TO_ADDR
// case i of 1 :
20834: LD_VAR 0 3
20838: PUSH
20839: LD_INT 1
20841: DOUBLE
20842: EQUAL
20843: IFTRUE 20847
20845: GO 20864
20847: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20848: LD_VAR 0 1
20852: PPUSH
20853: LD_VAR 0 10
20857: PPUSH
20858: CALL_OW 115
20862: GO 20925
20864: LD_INT 2
20866: DOUBLE
20867: EQUAL
20868: IFTRUE 20872
20870: GO 20894
20872: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20873: LD_VAR 0 1
20877: PPUSH
20878: LD_VAR 0 6
20882: PPUSH
20883: LD_VAR 0 7
20887: PPUSH
20888: CALL_OW 153
20892: GO 20925
20894: LD_INT 3
20896: DOUBLE
20897: EQUAL
20898: IFTRUE 20902
20900: GO 20924
20902: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20903: LD_VAR 0 1
20907: PPUSH
20908: LD_VAR 0 6
20912: PPUSH
20913: LD_VAR 0 7
20917: PPUSH
20918: CALL_OW 154
20922: GO 20925
20924: POP
// end ;
20925: LD_VAR 0 2
20929: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20930: LD_INT 0
20932: PPUSH
20933: PPUSH
20934: PPUSH
20935: PPUSH
20936: PPUSH
20937: PPUSH
// if not unit or not building then
20938: LD_VAR 0 1
20942: NOT
20943: PUSH
20944: LD_VAR 0 2
20948: NOT
20949: OR
20950: IFFALSE 20954
// exit ;
20952: GO 21112
// x := GetX ( building ) ;
20954: LD_ADDR_VAR 0 5
20958: PUSH
20959: LD_VAR 0 2
20963: PPUSH
20964: CALL_OW 250
20968: ST_TO_ADDR
// y := GetY ( building ) ;
20969: LD_ADDR_VAR 0 6
20973: PUSH
20974: LD_VAR 0 2
20978: PPUSH
20979: CALL_OW 251
20983: ST_TO_ADDR
// for i = 0 to 5 do
20984: LD_ADDR_VAR 0 4
20988: PUSH
20989: DOUBLE
20990: LD_INT 0
20992: DEC
20993: ST_TO_ADDR
20994: LD_INT 5
20996: PUSH
20997: FOR_TO
20998: IFFALSE 21110
// begin _x := ShiftX ( x , i , 3 ) ;
21000: LD_ADDR_VAR 0 7
21004: PUSH
21005: LD_VAR 0 5
21009: PPUSH
21010: LD_VAR 0 4
21014: PPUSH
21015: LD_INT 3
21017: PPUSH
21018: CALL_OW 272
21022: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21023: LD_ADDR_VAR 0 8
21027: PUSH
21028: LD_VAR 0 6
21032: PPUSH
21033: LD_VAR 0 4
21037: PPUSH
21038: LD_INT 3
21040: PPUSH
21041: CALL_OW 273
21045: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21046: LD_VAR 0 7
21050: PPUSH
21051: LD_VAR 0 8
21055: PPUSH
21056: CALL_OW 488
21060: NOT
21061: IFFALSE 21065
// continue ;
21063: GO 20997
// if HexInfo ( _x , _y ) = 0 then
21065: LD_VAR 0 7
21069: PPUSH
21070: LD_VAR 0 8
21074: PPUSH
21075: CALL_OW 428
21079: PUSH
21080: LD_INT 0
21082: EQUAL
21083: IFFALSE 21108
// begin ComMoveXY ( unit , _x , _y ) ;
21085: LD_VAR 0 1
21089: PPUSH
21090: LD_VAR 0 7
21094: PPUSH
21095: LD_VAR 0 8
21099: PPUSH
21100: CALL_OW 111
// exit ;
21104: POP
21105: POP
21106: GO 21112
// end ; end ;
21108: GO 20997
21110: POP
21111: POP
// end ;
21112: LD_VAR 0 3
21116: RET
// export function ScanBase ( side , base_area ) ; begin
21117: LD_INT 0
21119: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21120: LD_ADDR_VAR 0 3
21124: PUSH
21125: LD_VAR 0 2
21129: PPUSH
21130: LD_INT 81
21132: PUSH
21133: LD_VAR 0 1
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PPUSH
21142: CALL_OW 70
21146: ST_TO_ADDR
// end ;
21147: LD_VAR 0 3
21151: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21152: LD_INT 0
21154: PPUSH
21155: PPUSH
21156: PPUSH
21157: PPUSH
// result := false ;
21158: LD_ADDR_VAR 0 2
21162: PUSH
21163: LD_INT 0
21165: ST_TO_ADDR
// side := GetSide ( unit ) ;
21166: LD_ADDR_VAR 0 3
21170: PUSH
21171: LD_VAR 0 1
21175: PPUSH
21176: CALL_OW 255
21180: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21181: LD_ADDR_VAR 0 4
21185: PUSH
21186: LD_VAR 0 1
21190: PPUSH
21191: CALL_OW 248
21195: ST_TO_ADDR
// case nat of 1 :
21196: LD_VAR 0 4
21200: PUSH
21201: LD_INT 1
21203: DOUBLE
21204: EQUAL
21205: IFTRUE 21209
21207: GO 21220
21209: POP
// tech := tech_lassight ; 2 :
21210: LD_ADDR_VAR 0 5
21214: PUSH
21215: LD_INT 12
21217: ST_TO_ADDR
21218: GO 21259
21220: LD_INT 2
21222: DOUBLE
21223: EQUAL
21224: IFTRUE 21228
21226: GO 21239
21228: POP
// tech := tech_mortar ; 3 :
21229: LD_ADDR_VAR 0 5
21233: PUSH
21234: LD_INT 41
21236: ST_TO_ADDR
21237: GO 21259
21239: LD_INT 3
21241: DOUBLE
21242: EQUAL
21243: IFTRUE 21247
21245: GO 21258
21247: POP
// tech := tech_bazooka ; end ;
21248: LD_ADDR_VAR 0 5
21252: PUSH
21253: LD_INT 44
21255: ST_TO_ADDR
21256: GO 21259
21258: POP
// if Researched ( side , tech ) then
21259: LD_VAR 0 3
21263: PPUSH
21264: LD_VAR 0 5
21268: PPUSH
21269: CALL_OW 325
21273: IFFALSE 21300
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21275: LD_ADDR_VAR 0 2
21279: PUSH
21280: LD_INT 5
21282: PUSH
21283: LD_INT 8
21285: PUSH
21286: LD_INT 9
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: LIST
21293: PUSH
21294: LD_VAR 0 4
21298: ARRAY
21299: ST_TO_ADDR
// end ;
21300: LD_VAR 0 2
21304: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21305: LD_INT 0
21307: PPUSH
21308: PPUSH
21309: PPUSH
// if not mines then
21310: LD_VAR 0 2
21314: NOT
21315: IFFALSE 21319
// exit ;
21317: GO 21463
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21319: LD_ADDR_VAR 0 5
21323: PUSH
21324: LD_INT 81
21326: PUSH
21327: LD_VAR 0 1
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: LD_INT 3
21338: PUSH
21339: LD_INT 21
21341: PUSH
21342: LD_INT 3
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PPUSH
21357: CALL_OW 69
21361: ST_TO_ADDR
// for i in mines do
21362: LD_ADDR_VAR 0 4
21366: PUSH
21367: LD_VAR 0 2
21371: PUSH
21372: FOR_IN
21373: IFFALSE 21461
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21375: LD_VAR 0 4
21379: PUSH
21380: LD_INT 1
21382: ARRAY
21383: PPUSH
21384: LD_VAR 0 4
21388: PUSH
21389: LD_INT 2
21391: ARRAY
21392: PPUSH
21393: CALL_OW 458
21397: NOT
21398: IFFALSE 21402
// continue ;
21400: GO 21372
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21402: LD_VAR 0 4
21406: PUSH
21407: LD_INT 1
21409: ARRAY
21410: PPUSH
21411: LD_VAR 0 4
21415: PUSH
21416: LD_INT 2
21418: ARRAY
21419: PPUSH
21420: CALL_OW 428
21424: PUSH
21425: LD_VAR 0 5
21429: IN
21430: IFFALSE 21459
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21432: LD_VAR 0 4
21436: PUSH
21437: LD_INT 1
21439: ARRAY
21440: PPUSH
21441: LD_VAR 0 4
21445: PUSH
21446: LD_INT 2
21448: ARRAY
21449: PPUSH
21450: LD_VAR 0 1
21454: PPUSH
21455: CALL_OW 456
// end ;
21459: GO 21372
21461: POP
21462: POP
// end ;
21463: LD_VAR 0 3
21467: RET
// export function Count ( array ) ; var i ; begin
21468: LD_INT 0
21470: PPUSH
21471: PPUSH
// result := 0 ;
21472: LD_ADDR_VAR 0 2
21476: PUSH
21477: LD_INT 0
21479: ST_TO_ADDR
// for i in array do
21480: LD_ADDR_VAR 0 3
21484: PUSH
21485: LD_VAR 0 1
21489: PUSH
21490: FOR_IN
21491: IFFALSE 21515
// if i then
21493: LD_VAR 0 3
21497: IFFALSE 21513
// result := result + 1 ;
21499: LD_ADDR_VAR 0 2
21503: PUSH
21504: LD_VAR 0 2
21508: PUSH
21509: LD_INT 1
21511: PLUS
21512: ST_TO_ADDR
21513: GO 21490
21515: POP
21516: POP
// end ;
21517: LD_VAR 0 2
21521: RET
// export function IsEmpty ( building ) ; begin
21522: LD_INT 0
21524: PPUSH
// if not building then
21525: LD_VAR 0 1
21529: NOT
21530: IFFALSE 21534
// exit ;
21532: GO 21577
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
21534: LD_ADDR_VAR 0 2
21538: PUSH
21539: LD_VAR 0 1
21543: PUSH
21544: LD_INT 22
21546: PUSH
21547: LD_VAR 0 1
21551: PPUSH
21552: CALL_OW 255
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: LD_INT 58
21563: PUSH
21564: EMPTY
21565: LIST
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PPUSH
21571: CALL_OW 69
21575: IN
21576: ST_TO_ADDR
// end ;
21577: LD_VAR 0 2
21581: RET
// export function IsNotFull ( building ) ; begin
21582: LD_INT 0
21584: PPUSH
// if not building then
21585: LD_VAR 0 1
21589: NOT
21590: IFFALSE 21594
// exit ;
21592: GO 21613
// result := UnitsInside ( building ) < 6 ;
21594: LD_ADDR_VAR 0 2
21598: PUSH
21599: LD_VAR 0 1
21603: PPUSH
21604: CALL_OW 313
21608: PUSH
21609: LD_INT 6
21611: LESS
21612: ST_TO_ADDR
// end ;
21613: LD_VAR 0 2
21617: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21618: LD_INT 0
21620: PPUSH
21621: PPUSH
21622: PPUSH
21623: PPUSH
// tmp := [ ] ;
21624: LD_ADDR_VAR 0 3
21628: PUSH
21629: EMPTY
21630: ST_TO_ADDR
// list := [ ] ;
21631: LD_ADDR_VAR 0 5
21635: PUSH
21636: EMPTY
21637: ST_TO_ADDR
// for i = 16 to 25 do
21638: LD_ADDR_VAR 0 4
21642: PUSH
21643: DOUBLE
21644: LD_INT 16
21646: DEC
21647: ST_TO_ADDR
21648: LD_INT 25
21650: PUSH
21651: FOR_TO
21652: IFFALSE 21725
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21654: LD_ADDR_VAR 0 3
21658: PUSH
21659: LD_VAR 0 3
21663: PUSH
21664: LD_INT 22
21666: PUSH
21667: LD_VAR 0 1
21671: PPUSH
21672: CALL_OW 255
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PUSH
21681: LD_INT 91
21683: PUSH
21684: LD_VAR 0 1
21688: PUSH
21689: LD_INT 6
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 30
21699: PUSH
21700: LD_VAR 0 4
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: LIST
21713: PUSH
21714: EMPTY
21715: LIST
21716: PPUSH
21717: CALL_OW 69
21721: ADD
21722: ST_TO_ADDR
21723: GO 21651
21725: POP
21726: POP
// for i = 1 to tmp do
21727: LD_ADDR_VAR 0 4
21731: PUSH
21732: DOUBLE
21733: LD_INT 1
21735: DEC
21736: ST_TO_ADDR
21737: LD_VAR 0 3
21741: PUSH
21742: FOR_TO
21743: IFFALSE 21831
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
21745: LD_ADDR_VAR 0 5
21749: PUSH
21750: LD_VAR 0 5
21754: PUSH
21755: LD_VAR 0 3
21759: PUSH
21760: LD_VAR 0 4
21764: ARRAY
21765: PPUSH
21766: CALL_OW 266
21770: PUSH
21771: LD_VAR 0 3
21775: PUSH
21776: LD_VAR 0 4
21780: ARRAY
21781: PPUSH
21782: CALL_OW 250
21786: PUSH
21787: LD_VAR 0 3
21791: PUSH
21792: LD_VAR 0 4
21796: ARRAY
21797: PPUSH
21798: CALL_OW 251
21802: PUSH
21803: LD_VAR 0 3
21807: PUSH
21808: LD_VAR 0 4
21812: ARRAY
21813: PPUSH
21814: CALL_OW 254
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: PUSH
21825: EMPTY
21826: LIST
21827: ADD
21828: ST_TO_ADDR
21829: GO 21742
21831: POP
21832: POP
// result := list ;
21833: LD_ADDR_VAR 0 2
21837: PUSH
21838: LD_VAR 0 5
21842: ST_TO_ADDR
// end ;
21843: LD_VAR 0 2
21847: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
21848: LD_INT 0
21850: PPUSH
21851: PPUSH
21852: PPUSH
21853: PPUSH
21854: PPUSH
21855: PPUSH
21856: PPUSH
// if not factory then
21857: LD_VAR 0 1
21861: NOT
21862: IFFALSE 21866
// exit ;
21864: GO 22459
// if control = control_apeman then
21866: LD_VAR 0 4
21870: PUSH
21871: LD_INT 5
21873: EQUAL
21874: IFFALSE 21983
// begin tmp := UnitsInside ( factory ) ;
21876: LD_ADDR_VAR 0 8
21880: PUSH
21881: LD_VAR 0 1
21885: PPUSH
21886: CALL_OW 313
21890: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
21891: LD_VAR 0 8
21895: PPUSH
21896: LD_INT 25
21898: PUSH
21899: LD_INT 12
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: PPUSH
21906: CALL_OW 72
21910: NOT
21911: IFFALSE 21921
// control := control_manual ;
21913: LD_ADDR_VAR 0 4
21917: PUSH
21918: LD_INT 1
21920: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
21921: LD_ADDR_VAR 0 8
21925: PUSH
21926: LD_VAR 0 1
21930: PPUSH
21931: CALL 21618 0 1
21935: ST_TO_ADDR
// if tmp then
21936: LD_VAR 0 8
21940: IFFALSE 21983
// begin for i in tmp do
21942: LD_ADDR_VAR 0 7
21946: PUSH
21947: LD_VAR 0 8
21951: PUSH
21952: FOR_IN
21953: IFFALSE 21981
// if i [ 1 ] = b_ext_radio then
21955: LD_VAR 0 7
21959: PUSH
21960: LD_INT 1
21962: ARRAY
21963: PUSH
21964: LD_INT 22
21966: EQUAL
21967: IFFALSE 21979
// begin control := control_remote ;
21969: LD_ADDR_VAR 0 4
21973: PUSH
21974: LD_INT 2
21976: ST_TO_ADDR
// break ;
21977: GO 21981
// end ;
21979: GO 21952
21981: POP
21982: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21983: LD_VAR 0 1
21987: PPUSH
21988: LD_VAR 0 2
21992: PPUSH
21993: LD_VAR 0 3
21997: PPUSH
21998: LD_VAR 0 4
22002: PPUSH
22003: LD_VAR 0 5
22007: PPUSH
22008: CALL_OW 448
22012: IFFALSE 22047
// begin result := [ chassis , engine , control , weapon ] ;
22014: LD_ADDR_VAR 0 6
22018: PUSH
22019: LD_VAR 0 2
22023: PUSH
22024: LD_VAR 0 3
22028: PUSH
22029: LD_VAR 0 4
22033: PUSH
22034: LD_VAR 0 5
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: ST_TO_ADDR
// exit ;
22045: GO 22459
// end ; _chassis := AvailableChassisList ( factory ) ;
22047: LD_ADDR_VAR 0 9
22051: PUSH
22052: LD_VAR 0 1
22056: PPUSH
22057: CALL_OW 475
22061: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22062: LD_ADDR_VAR 0 11
22066: PUSH
22067: LD_VAR 0 1
22071: PPUSH
22072: CALL_OW 476
22076: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22077: LD_ADDR_VAR 0 12
22081: PUSH
22082: LD_VAR 0 1
22086: PPUSH
22087: CALL_OW 477
22091: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22092: LD_ADDR_VAR 0 10
22096: PUSH
22097: LD_VAR 0 1
22101: PPUSH
22102: CALL_OW 478
22106: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22107: LD_VAR 0 9
22111: NOT
22112: PUSH
22113: LD_VAR 0 11
22117: NOT
22118: OR
22119: PUSH
22120: LD_VAR 0 12
22124: NOT
22125: OR
22126: PUSH
22127: LD_VAR 0 10
22131: NOT
22132: OR
22133: IFFALSE 22168
// begin result := [ chassis , engine , control , weapon ] ;
22135: LD_ADDR_VAR 0 6
22139: PUSH
22140: LD_VAR 0 2
22144: PUSH
22145: LD_VAR 0 3
22149: PUSH
22150: LD_VAR 0 4
22154: PUSH
22155: LD_VAR 0 5
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: ST_TO_ADDR
// exit ;
22166: GO 22459
// end ; if not chassis in _chassis then
22168: LD_VAR 0 2
22172: PUSH
22173: LD_VAR 0 9
22177: IN
22178: NOT
22179: IFFALSE 22205
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22181: LD_ADDR_VAR 0 2
22185: PUSH
22186: LD_VAR 0 9
22190: PUSH
22191: LD_INT 1
22193: PPUSH
22194: LD_VAR 0 9
22198: PPUSH
22199: CALL_OW 12
22203: ARRAY
22204: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22205: LD_VAR 0 2
22209: PPUSH
22210: LD_VAR 0 3
22214: PPUSH
22215: CALL 22464 0 2
22219: NOT
22220: IFFALSE 22279
// repeat engine := _engine [ 1 ] ;
22222: LD_ADDR_VAR 0 3
22226: PUSH
22227: LD_VAR 0 11
22231: PUSH
22232: LD_INT 1
22234: ARRAY
22235: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22236: LD_ADDR_VAR 0 11
22240: PUSH
22241: LD_VAR 0 11
22245: PPUSH
22246: LD_INT 1
22248: PPUSH
22249: CALL_OW 3
22253: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22254: LD_VAR 0 2
22258: PPUSH
22259: LD_VAR 0 3
22263: PPUSH
22264: CALL 22464 0 2
22268: PUSH
22269: LD_VAR 0 11
22273: PUSH
22274: EMPTY
22275: EQUAL
22276: OR
22277: IFFALSE 22222
// if not control in _control then
22279: LD_VAR 0 4
22283: PUSH
22284: LD_VAR 0 12
22288: IN
22289: NOT
22290: IFFALSE 22316
// control := _control [ rand ( 1 , _control ) ] ;
22292: LD_ADDR_VAR 0 4
22296: PUSH
22297: LD_VAR 0 12
22301: PUSH
22302: LD_INT 1
22304: PPUSH
22305: LD_VAR 0 12
22309: PPUSH
22310: CALL_OW 12
22314: ARRAY
22315: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22316: LD_VAR 0 2
22320: PPUSH
22321: LD_VAR 0 5
22325: PPUSH
22326: CALL 22684 0 2
22330: NOT
22331: IFFALSE 22390
// repeat weapon := _weapon [ 1 ] ;
22333: LD_ADDR_VAR 0 5
22337: PUSH
22338: LD_VAR 0 10
22342: PUSH
22343: LD_INT 1
22345: ARRAY
22346: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22347: LD_ADDR_VAR 0 10
22351: PUSH
22352: LD_VAR 0 10
22356: PPUSH
22357: LD_INT 1
22359: PPUSH
22360: CALL_OW 3
22364: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22365: LD_VAR 0 2
22369: PPUSH
22370: LD_VAR 0 5
22374: PPUSH
22375: CALL 22684 0 2
22379: PUSH
22380: LD_VAR 0 10
22384: PUSH
22385: EMPTY
22386: EQUAL
22387: OR
22388: IFFALSE 22333
// result := [ ] ;
22390: LD_ADDR_VAR 0 6
22394: PUSH
22395: EMPTY
22396: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22397: LD_VAR 0 1
22401: PPUSH
22402: LD_VAR 0 2
22406: PPUSH
22407: LD_VAR 0 3
22411: PPUSH
22412: LD_VAR 0 4
22416: PPUSH
22417: LD_VAR 0 5
22421: PPUSH
22422: CALL_OW 448
22426: IFFALSE 22459
// result := [ chassis , engine , control , weapon ] ;
22428: LD_ADDR_VAR 0 6
22432: PUSH
22433: LD_VAR 0 2
22437: PUSH
22438: LD_VAR 0 3
22442: PUSH
22443: LD_VAR 0 4
22447: PUSH
22448: LD_VAR 0 5
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: ST_TO_ADDR
// end ;
22459: LD_VAR 0 6
22463: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22464: LD_INT 0
22466: PPUSH
// if not chassis or not engine then
22467: LD_VAR 0 1
22471: NOT
22472: PUSH
22473: LD_VAR 0 2
22477: NOT
22478: OR
22479: IFFALSE 22483
// exit ;
22481: GO 22679
// case engine of engine_solar :
22483: LD_VAR 0 2
22487: PUSH
22488: LD_INT 2
22490: DOUBLE
22491: EQUAL
22492: IFTRUE 22496
22494: GO 22534
22496: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
22497: LD_ADDR_VAR 0 3
22501: PUSH
22502: LD_INT 11
22504: PUSH
22505: LD_INT 12
22507: PUSH
22508: LD_INT 13
22510: PUSH
22511: LD_INT 14
22513: PUSH
22514: LD_INT 1
22516: PUSH
22517: LD_INT 2
22519: PUSH
22520: LD_INT 3
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: ST_TO_ADDR
22532: GO 22663
22534: LD_INT 1
22536: DOUBLE
22537: EQUAL
22538: IFTRUE 22542
22540: GO 22604
22542: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
22543: LD_ADDR_VAR 0 3
22547: PUSH
22548: LD_INT 11
22550: PUSH
22551: LD_INT 12
22553: PUSH
22554: LD_INT 13
22556: PUSH
22557: LD_INT 14
22559: PUSH
22560: LD_INT 1
22562: PUSH
22563: LD_INT 2
22565: PUSH
22566: LD_INT 3
22568: PUSH
22569: LD_INT 4
22571: PUSH
22572: LD_INT 5
22574: PUSH
22575: LD_INT 21
22577: PUSH
22578: LD_INT 23
22580: PUSH
22581: LD_INT 22
22583: PUSH
22584: LD_INT 24
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: ST_TO_ADDR
22602: GO 22663
22604: LD_INT 3
22606: DOUBLE
22607: EQUAL
22608: IFTRUE 22612
22610: GO 22662
22612: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22613: LD_ADDR_VAR 0 3
22617: PUSH
22618: LD_INT 13
22620: PUSH
22621: LD_INT 14
22623: PUSH
22624: LD_INT 2
22626: PUSH
22627: LD_INT 3
22629: PUSH
22630: LD_INT 4
22632: PUSH
22633: LD_INT 5
22635: PUSH
22636: LD_INT 21
22638: PUSH
22639: LD_INT 22
22641: PUSH
22642: LD_INT 23
22644: PUSH
22645: LD_INT 24
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: ST_TO_ADDR
22660: GO 22663
22662: POP
// result := ( chassis in result ) ;
22663: LD_ADDR_VAR 0 3
22667: PUSH
22668: LD_VAR 0 1
22672: PUSH
22673: LD_VAR 0 3
22677: IN
22678: ST_TO_ADDR
// end ;
22679: LD_VAR 0 3
22683: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
22684: LD_INT 0
22686: PPUSH
// if not chassis or not weapon then
22687: LD_VAR 0 1
22691: NOT
22692: PUSH
22693: LD_VAR 0 2
22697: NOT
22698: OR
22699: IFFALSE 22703
// exit ;
22701: GO 23765
// case weapon of us_machine_gun :
22703: LD_VAR 0 2
22707: PUSH
22708: LD_INT 2
22710: DOUBLE
22711: EQUAL
22712: IFTRUE 22716
22714: GO 22746
22716: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
22717: LD_ADDR_VAR 0 3
22721: PUSH
22722: LD_INT 1
22724: PUSH
22725: LD_INT 2
22727: PUSH
22728: LD_INT 3
22730: PUSH
22731: LD_INT 4
22733: PUSH
22734: LD_INT 5
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: ST_TO_ADDR
22744: GO 23749
22746: LD_INT 3
22748: DOUBLE
22749: EQUAL
22750: IFTRUE 22754
22752: GO 22784
22754: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
22755: LD_ADDR_VAR 0 3
22759: PUSH
22760: LD_INT 1
22762: PUSH
22763: LD_INT 2
22765: PUSH
22766: LD_INT 3
22768: PUSH
22769: LD_INT 4
22771: PUSH
22772: LD_INT 5
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: ST_TO_ADDR
22782: GO 23749
22784: LD_INT 11
22786: DOUBLE
22787: EQUAL
22788: IFTRUE 22792
22790: GO 22822
22792: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
22793: LD_ADDR_VAR 0 3
22797: PUSH
22798: LD_INT 1
22800: PUSH
22801: LD_INT 2
22803: PUSH
22804: LD_INT 3
22806: PUSH
22807: LD_INT 4
22809: PUSH
22810: LD_INT 5
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: ST_TO_ADDR
22820: GO 23749
22822: LD_INT 4
22824: DOUBLE
22825: EQUAL
22826: IFTRUE 22830
22828: GO 22856
22830: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
22831: LD_ADDR_VAR 0 3
22835: PUSH
22836: LD_INT 2
22838: PUSH
22839: LD_INT 3
22841: PUSH
22842: LD_INT 4
22844: PUSH
22845: LD_INT 5
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: ST_TO_ADDR
22854: GO 23749
22856: LD_INT 5
22858: DOUBLE
22859: EQUAL
22860: IFTRUE 22864
22862: GO 22890
22864: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
22865: LD_ADDR_VAR 0 3
22869: PUSH
22870: LD_INT 2
22872: PUSH
22873: LD_INT 3
22875: PUSH
22876: LD_INT 4
22878: PUSH
22879: LD_INT 5
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: ST_TO_ADDR
22888: GO 23749
22890: LD_INT 9
22892: DOUBLE
22893: EQUAL
22894: IFTRUE 22898
22896: GO 22924
22898: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
22899: LD_ADDR_VAR 0 3
22903: PUSH
22904: LD_INT 2
22906: PUSH
22907: LD_INT 3
22909: PUSH
22910: LD_INT 4
22912: PUSH
22913: LD_INT 5
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: ST_TO_ADDR
22922: GO 23749
22924: LD_INT 7
22926: DOUBLE
22927: EQUAL
22928: IFTRUE 22932
22930: GO 22958
22932: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
22933: LD_ADDR_VAR 0 3
22937: PUSH
22938: LD_INT 2
22940: PUSH
22941: LD_INT 3
22943: PUSH
22944: LD_INT 4
22946: PUSH
22947: LD_INT 5
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: ST_TO_ADDR
22956: GO 23749
22958: LD_INT 12
22960: DOUBLE
22961: EQUAL
22962: IFTRUE 22966
22964: GO 22992
22966: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
22967: LD_ADDR_VAR 0 3
22971: PUSH
22972: LD_INT 2
22974: PUSH
22975: LD_INT 3
22977: PUSH
22978: LD_INT 4
22980: PUSH
22981: LD_INT 5
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: ST_TO_ADDR
22990: GO 23749
22992: LD_INT 13
22994: DOUBLE
22995: EQUAL
22996: IFTRUE 23000
22998: GO 23026
23000: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23001: LD_ADDR_VAR 0 3
23005: PUSH
23006: LD_INT 2
23008: PUSH
23009: LD_INT 3
23011: PUSH
23012: LD_INT 4
23014: PUSH
23015: LD_INT 5
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: ST_TO_ADDR
23024: GO 23749
23026: LD_INT 14
23028: DOUBLE
23029: EQUAL
23030: IFTRUE 23034
23032: GO 23052
23034: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23035: LD_ADDR_VAR 0 3
23039: PUSH
23040: LD_INT 4
23042: PUSH
23043: LD_INT 5
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: ST_TO_ADDR
23050: GO 23749
23052: LD_INT 6
23054: DOUBLE
23055: EQUAL
23056: IFTRUE 23060
23058: GO 23078
23060: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23061: LD_ADDR_VAR 0 3
23065: PUSH
23066: LD_INT 4
23068: PUSH
23069: LD_INT 5
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: ST_TO_ADDR
23076: GO 23749
23078: LD_INT 10
23080: DOUBLE
23081: EQUAL
23082: IFTRUE 23086
23084: GO 23104
23086: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23087: LD_ADDR_VAR 0 3
23091: PUSH
23092: LD_INT 4
23094: PUSH
23095: LD_INT 5
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: ST_TO_ADDR
23102: GO 23749
23104: LD_INT 22
23106: DOUBLE
23107: EQUAL
23108: IFTRUE 23112
23110: GO 23138
23112: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23113: LD_ADDR_VAR 0 3
23117: PUSH
23118: LD_INT 11
23120: PUSH
23121: LD_INT 12
23123: PUSH
23124: LD_INT 13
23126: PUSH
23127: LD_INT 14
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: ST_TO_ADDR
23136: GO 23749
23138: LD_INT 23
23140: DOUBLE
23141: EQUAL
23142: IFTRUE 23146
23144: GO 23172
23146: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23147: LD_ADDR_VAR 0 3
23151: PUSH
23152: LD_INT 11
23154: PUSH
23155: LD_INT 12
23157: PUSH
23158: LD_INT 13
23160: PUSH
23161: LD_INT 14
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: ST_TO_ADDR
23170: GO 23749
23172: LD_INT 24
23174: DOUBLE
23175: EQUAL
23176: IFTRUE 23180
23178: GO 23206
23180: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23181: LD_ADDR_VAR 0 3
23185: PUSH
23186: LD_INT 11
23188: PUSH
23189: LD_INT 12
23191: PUSH
23192: LD_INT 13
23194: PUSH
23195: LD_INT 14
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: ST_TO_ADDR
23204: GO 23749
23206: LD_INT 30
23208: DOUBLE
23209: EQUAL
23210: IFTRUE 23214
23212: GO 23240
23214: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23215: LD_ADDR_VAR 0 3
23219: PUSH
23220: LD_INT 11
23222: PUSH
23223: LD_INT 12
23225: PUSH
23226: LD_INT 13
23228: PUSH
23229: LD_INT 14
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: ST_TO_ADDR
23238: GO 23749
23240: LD_INT 25
23242: DOUBLE
23243: EQUAL
23244: IFTRUE 23248
23246: GO 23266
23248: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23249: LD_ADDR_VAR 0 3
23253: PUSH
23254: LD_INT 13
23256: PUSH
23257: LD_INT 14
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: ST_TO_ADDR
23264: GO 23749
23266: LD_INT 27
23268: DOUBLE
23269: EQUAL
23270: IFTRUE 23274
23272: GO 23292
23274: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
23275: LD_ADDR_VAR 0 3
23279: PUSH
23280: LD_INT 13
23282: PUSH
23283: LD_INT 14
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: ST_TO_ADDR
23290: GO 23749
23292: LD_EXP 75
23296: DOUBLE
23297: EQUAL
23298: IFTRUE 23302
23300: GO 23328
23302: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23303: LD_ADDR_VAR 0 3
23307: PUSH
23308: LD_INT 11
23310: PUSH
23311: LD_INT 12
23313: PUSH
23314: LD_INT 13
23316: PUSH
23317: LD_INT 14
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: ST_TO_ADDR
23326: GO 23749
23328: LD_INT 28
23330: DOUBLE
23331: EQUAL
23332: IFTRUE 23336
23334: GO 23354
23336: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23337: LD_ADDR_VAR 0 3
23341: PUSH
23342: LD_INT 13
23344: PUSH
23345: LD_INT 14
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: ST_TO_ADDR
23352: GO 23749
23354: LD_INT 29
23356: DOUBLE
23357: EQUAL
23358: IFTRUE 23362
23360: GO 23380
23362: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23363: LD_ADDR_VAR 0 3
23367: PUSH
23368: LD_INT 13
23370: PUSH
23371: LD_INT 14
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: ST_TO_ADDR
23378: GO 23749
23380: LD_INT 31
23382: DOUBLE
23383: EQUAL
23384: IFTRUE 23388
23386: GO 23406
23388: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23389: LD_ADDR_VAR 0 3
23393: PUSH
23394: LD_INT 13
23396: PUSH
23397: LD_INT 14
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: ST_TO_ADDR
23404: GO 23749
23406: LD_INT 26
23408: DOUBLE
23409: EQUAL
23410: IFTRUE 23414
23412: GO 23432
23414: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23415: LD_ADDR_VAR 0 3
23419: PUSH
23420: LD_INT 13
23422: PUSH
23423: LD_INT 14
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: ST_TO_ADDR
23430: GO 23749
23432: LD_INT 42
23434: DOUBLE
23435: EQUAL
23436: IFTRUE 23440
23438: GO 23466
23440: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23441: LD_ADDR_VAR 0 3
23445: PUSH
23446: LD_INT 21
23448: PUSH
23449: LD_INT 22
23451: PUSH
23452: LD_INT 23
23454: PUSH
23455: LD_INT 24
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: ST_TO_ADDR
23464: GO 23749
23466: LD_INT 43
23468: DOUBLE
23469: EQUAL
23470: IFTRUE 23474
23472: GO 23500
23474: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23475: LD_ADDR_VAR 0 3
23479: PUSH
23480: LD_INT 21
23482: PUSH
23483: LD_INT 22
23485: PUSH
23486: LD_INT 23
23488: PUSH
23489: LD_INT 24
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: ST_TO_ADDR
23498: GO 23749
23500: LD_INT 44
23502: DOUBLE
23503: EQUAL
23504: IFTRUE 23508
23506: GO 23534
23508: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
23509: LD_ADDR_VAR 0 3
23513: PUSH
23514: LD_INT 21
23516: PUSH
23517: LD_INT 22
23519: PUSH
23520: LD_INT 23
23522: PUSH
23523: LD_INT 24
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: ST_TO_ADDR
23532: GO 23749
23534: LD_INT 45
23536: DOUBLE
23537: EQUAL
23538: IFTRUE 23542
23540: GO 23568
23542: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
23543: LD_ADDR_VAR 0 3
23547: PUSH
23548: LD_INT 21
23550: PUSH
23551: LD_INT 22
23553: PUSH
23554: LD_INT 23
23556: PUSH
23557: LD_INT 24
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: ST_TO_ADDR
23566: GO 23749
23568: LD_INT 49
23570: DOUBLE
23571: EQUAL
23572: IFTRUE 23576
23574: GO 23602
23576: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
23577: LD_ADDR_VAR 0 3
23581: PUSH
23582: LD_INT 21
23584: PUSH
23585: LD_INT 22
23587: PUSH
23588: LD_INT 23
23590: PUSH
23591: LD_INT 24
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: ST_TO_ADDR
23600: GO 23749
23602: LD_INT 51
23604: DOUBLE
23605: EQUAL
23606: IFTRUE 23610
23608: GO 23636
23610: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
23611: LD_ADDR_VAR 0 3
23615: PUSH
23616: LD_INT 21
23618: PUSH
23619: LD_INT 22
23621: PUSH
23622: LD_INT 23
23624: PUSH
23625: LD_INT 24
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: ST_TO_ADDR
23634: GO 23749
23636: LD_INT 52
23638: DOUBLE
23639: EQUAL
23640: IFTRUE 23644
23642: GO 23670
23644: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23645: LD_ADDR_VAR 0 3
23649: PUSH
23650: LD_INT 21
23652: PUSH
23653: LD_INT 22
23655: PUSH
23656: LD_INT 23
23658: PUSH
23659: LD_INT 24
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: ST_TO_ADDR
23668: GO 23749
23670: LD_INT 53
23672: DOUBLE
23673: EQUAL
23674: IFTRUE 23678
23676: GO 23696
23678: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
23679: LD_ADDR_VAR 0 3
23683: PUSH
23684: LD_INT 23
23686: PUSH
23687: LD_INT 24
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: ST_TO_ADDR
23694: GO 23749
23696: LD_INT 46
23698: DOUBLE
23699: EQUAL
23700: IFTRUE 23704
23702: GO 23722
23704: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
23705: LD_ADDR_VAR 0 3
23709: PUSH
23710: LD_INT 23
23712: PUSH
23713: LD_INT 24
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: ST_TO_ADDR
23720: GO 23749
23722: LD_INT 47
23724: DOUBLE
23725: EQUAL
23726: IFTRUE 23730
23728: GO 23748
23730: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23731: LD_ADDR_VAR 0 3
23735: PUSH
23736: LD_INT 23
23738: PUSH
23739: LD_INT 24
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: ST_TO_ADDR
23746: GO 23749
23748: POP
// result := ( chassis in result ) ;
23749: LD_ADDR_VAR 0 3
23753: PUSH
23754: LD_VAR 0 1
23758: PUSH
23759: LD_VAR 0 3
23763: IN
23764: ST_TO_ADDR
// end ;
23765: LD_VAR 0 3
23769: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
23770: LD_INT 0
23772: PPUSH
23773: PPUSH
23774: PPUSH
23775: PPUSH
23776: PPUSH
23777: PPUSH
23778: PPUSH
// result := array ;
23779: LD_ADDR_VAR 0 5
23783: PUSH
23784: LD_VAR 0 1
23788: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
23789: LD_VAR 0 1
23793: NOT
23794: PUSH
23795: LD_VAR 0 2
23799: NOT
23800: OR
23801: PUSH
23802: LD_VAR 0 3
23806: NOT
23807: OR
23808: PUSH
23809: LD_VAR 0 2
23813: PUSH
23814: LD_VAR 0 1
23818: GREATER
23819: OR
23820: PUSH
23821: LD_VAR 0 3
23825: PUSH
23826: LD_VAR 0 1
23830: GREATER
23831: OR
23832: IFFALSE 23836
// exit ;
23834: GO 24132
// if direction then
23836: LD_VAR 0 4
23840: IFFALSE 23904
// begin d := 1 ;
23842: LD_ADDR_VAR 0 9
23846: PUSH
23847: LD_INT 1
23849: ST_TO_ADDR
// if i_from > i_to then
23850: LD_VAR 0 2
23854: PUSH
23855: LD_VAR 0 3
23859: GREATER
23860: IFFALSE 23886
// length := ( array - i_from ) + i_to else
23862: LD_ADDR_VAR 0 11
23866: PUSH
23867: LD_VAR 0 1
23871: PUSH
23872: LD_VAR 0 2
23876: MINUS
23877: PUSH
23878: LD_VAR 0 3
23882: PLUS
23883: ST_TO_ADDR
23884: GO 23902
// length := i_to - i_from ;
23886: LD_ADDR_VAR 0 11
23890: PUSH
23891: LD_VAR 0 3
23895: PUSH
23896: LD_VAR 0 2
23900: MINUS
23901: ST_TO_ADDR
// end else
23902: GO 23965
// begin d := - 1 ;
23904: LD_ADDR_VAR 0 9
23908: PUSH
23909: LD_INT 1
23911: NEG
23912: ST_TO_ADDR
// if i_from > i_to then
23913: LD_VAR 0 2
23917: PUSH
23918: LD_VAR 0 3
23922: GREATER
23923: IFFALSE 23943
// length := i_from - i_to else
23925: LD_ADDR_VAR 0 11
23929: PUSH
23930: LD_VAR 0 2
23934: PUSH
23935: LD_VAR 0 3
23939: MINUS
23940: ST_TO_ADDR
23941: GO 23965
// length := ( array - i_to ) + i_from ;
23943: LD_ADDR_VAR 0 11
23947: PUSH
23948: LD_VAR 0 1
23952: PUSH
23953: LD_VAR 0 3
23957: MINUS
23958: PUSH
23959: LD_VAR 0 2
23963: PLUS
23964: ST_TO_ADDR
// end ; if not length then
23965: LD_VAR 0 11
23969: NOT
23970: IFFALSE 23974
// exit ;
23972: GO 24132
// tmp := array ;
23974: LD_ADDR_VAR 0 10
23978: PUSH
23979: LD_VAR 0 1
23983: ST_TO_ADDR
// for i = 1 to length do
23984: LD_ADDR_VAR 0 6
23988: PUSH
23989: DOUBLE
23990: LD_INT 1
23992: DEC
23993: ST_TO_ADDR
23994: LD_VAR 0 11
23998: PUSH
23999: FOR_TO
24000: IFFALSE 24120
// begin for j = 1 to array do
24002: LD_ADDR_VAR 0 7
24006: PUSH
24007: DOUBLE
24008: LD_INT 1
24010: DEC
24011: ST_TO_ADDR
24012: LD_VAR 0 1
24016: PUSH
24017: FOR_TO
24018: IFFALSE 24106
// begin k := j + d ;
24020: LD_ADDR_VAR 0 8
24024: PUSH
24025: LD_VAR 0 7
24029: PUSH
24030: LD_VAR 0 9
24034: PLUS
24035: ST_TO_ADDR
// if k > array then
24036: LD_VAR 0 8
24040: PUSH
24041: LD_VAR 0 1
24045: GREATER
24046: IFFALSE 24056
// k := 1 ;
24048: LD_ADDR_VAR 0 8
24052: PUSH
24053: LD_INT 1
24055: ST_TO_ADDR
// if not k then
24056: LD_VAR 0 8
24060: NOT
24061: IFFALSE 24073
// k := array ;
24063: LD_ADDR_VAR 0 8
24067: PUSH
24068: LD_VAR 0 1
24072: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24073: LD_ADDR_VAR 0 10
24077: PUSH
24078: LD_VAR 0 10
24082: PPUSH
24083: LD_VAR 0 8
24087: PPUSH
24088: LD_VAR 0 1
24092: PUSH
24093: LD_VAR 0 7
24097: ARRAY
24098: PPUSH
24099: CALL_OW 1
24103: ST_TO_ADDR
// end ;
24104: GO 24017
24106: POP
24107: POP
// array := tmp ;
24108: LD_ADDR_VAR 0 1
24112: PUSH
24113: LD_VAR 0 10
24117: ST_TO_ADDR
// end ;
24118: GO 23999
24120: POP
24121: POP
// result := array ;
24122: LD_ADDR_VAR 0 5
24126: PUSH
24127: LD_VAR 0 1
24131: ST_TO_ADDR
// end ;
24132: LD_VAR 0 5
24136: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24137: LD_INT 0
24139: PPUSH
24140: PPUSH
// result := 0 ;
24141: LD_ADDR_VAR 0 3
24145: PUSH
24146: LD_INT 0
24148: ST_TO_ADDR
// if not array or not value in array then
24149: LD_VAR 0 1
24153: NOT
24154: PUSH
24155: LD_VAR 0 2
24159: PUSH
24160: LD_VAR 0 1
24164: IN
24165: NOT
24166: OR
24167: IFFALSE 24171
// exit ;
24169: GO 24225
// for i = 1 to array do
24171: LD_ADDR_VAR 0 4
24175: PUSH
24176: DOUBLE
24177: LD_INT 1
24179: DEC
24180: ST_TO_ADDR
24181: LD_VAR 0 1
24185: PUSH
24186: FOR_TO
24187: IFFALSE 24223
// if value = array [ i ] then
24189: LD_VAR 0 2
24193: PUSH
24194: LD_VAR 0 1
24198: PUSH
24199: LD_VAR 0 4
24203: ARRAY
24204: EQUAL
24205: IFFALSE 24221
// begin result := i ;
24207: LD_ADDR_VAR 0 3
24211: PUSH
24212: LD_VAR 0 4
24216: ST_TO_ADDR
// exit ;
24217: POP
24218: POP
24219: GO 24225
// end ;
24221: GO 24186
24223: POP
24224: POP
// end ;
24225: LD_VAR 0 3
24229: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24230: LD_INT 0
24232: PPUSH
// vc_chassis := chassis ;
24233: LD_ADDR_OWVAR 37
24237: PUSH
24238: LD_VAR 0 1
24242: ST_TO_ADDR
// vc_engine := engine ;
24243: LD_ADDR_OWVAR 39
24247: PUSH
24248: LD_VAR 0 2
24252: ST_TO_ADDR
// vc_control := control ;
24253: LD_ADDR_OWVAR 38
24257: PUSH
24258: LD_VAR 0 3
24262: ST_TO_ADDR
// vc_weapon := weapon ;
24263: LD_ADDR_OWVAR 40
24267: PUSH
24268: LD_VAR 0 4
24272: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24273: LD_ADDR_OWVAR 41
24277: PUSH
24278: LD_VAR 0 5
24282: ST_TO_ADDR
// end ;
24283: LD_VAR 0 6
24287: RET
// export function WantPlant ( unit ) ; var task ; begin
24288: LD_INT 0
24290: PPUSH
24291: PPUSH
// result := false ;
24292: LD_ADDR_VAR 0 2
24296: PUSH
24297: LD_INT 0
24299: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24300: LD_ADDR_VAR 0 3
24304: PUSH
24305: LD_VAR 0 1
24309: PPUSH
24310: CALL_OW 437
24314: ST_TO_ADDR
// if task then
24315: LD_VAR 0 3
24319: IFFALSE 24347
// if task [ 1 ] [ 1 ] = p then
24321: LD_VAR 0 3
24325: PUSH
24326: LD_INT 1
24328: ARRAY
24329: PUSH
24330: LD_INT 1
24332: ARRAY
24333: PUSH
24334: LD_STRING p
24336: EQUAL
24337: IFFALSE 24347
// result := true ;
24339: LD_ADDR_VAR 0 2
24343: PUSH
24344: LD_INT 1
24346: ST_TO_ADDR
// end ;
24347: LD_VAR 0 2
24351: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24352: LD_INT 0
24354: PPUSH
24355: PPUSH
24356: PPUSH
24357: PPUSH
// if pos < 1 then
24358: LD_VAR 0 2
24362: PUSH
24363: LD_INT 1
24365: LESS
24366: IFFALSE 24370
// exit ;
24368: GO 24673
// if pos = 1 then
24370: LD_VAR 0 2
24374: PUSH
24375: LD_INT 1
24377: EQUAL
24378: IFFALSE 24411
// result := Replace ( arr , pos [ 1 ] , value ) else
24380: LD_ADDR_VAR 0 4
24384: PUSH
24385: LD_VAR 0 1
24389: PPUSH
24390: LD_VAR 0 2
24394: PUSH
24395: LD_INT 1
24397: ARRAY
24398: PPUSH
24399: LD_VAR 0 3
24403: PPUSH
24404: CALL_OW 1
24408: ST_TO_ADDR
24409: GO 24673
// begin tmp := arr ;
24411: LD_ADDR_VAR 0 6
24415: PUSH
24416: LD_VAR 0 1
24420: ST_TO_ADDR
// s_arr := [ tmp ] ;
24421: LD_ADDR_VAR 0 7
24425: PUSH
24426: LD_VAR 0 6
24430: PUSH
24431: EMPTY
24432: LIST
24433: ST_TO_ADDR
// for i = 1 to pos - 1 do
24434: LD_ADDR_VAR 0 5
24438: PUSH
24439: DOUBLE
24440: LD_INT 1
24442: DEC
24443: ST_TO_ADDR
24444: LD_VAR 0 2
24448: PUSH
24449: LD_INT 1
24451: MINUS
24452: PUSH
24453: FOR_TO
24454: IFFALSE 24499
// begin tmp := tmp [ pos [ i ] ] ;
24456: LD_ADDR_VAR 0 6
24460: PUSH
24461: LD_VAR 0 6
24465: PUSH
24466: LD_VAR 0 2
24470: PUSH
24471: LD_VAR 0 5
24475: ARRAY
24476: ARRAY
24477: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24478: LD_ADDR_VAR 0 7
24482: PUSH
24483: LD_VAR 0 7
24487: PUSH
24488: LD_VAR 0 6
24492: PUSH
24493: EMPTY
24494: LIST
24495: ADD
24496: ST_TO_ADDR
// end ;
24497: GO 24453
24499: POP
24500: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
24501: LD_ADDR_VAR 0 6
24505: PUSH
24506: LD_VAR 0 6
24510: PPUSH
24511: LD_VAR 0 2
24515: PUSH
24516: LD_VAR 0 2
24520: ARRAY
24521: PPUSH
24522: LD_VAR 0 3
24526: PPUSH
24527: CALL_OW 1
24531: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
24532: LD_ADDR_VAR 0 7
24536: PUSH
24537: LD_VAR 0 7
24541: PPUSH
24542: LD_VAR 0 7
24546: PPUSH
24547: LD_VAR 0 6
24551: PPUSH
24552: CALL_OW 1
24556: ST_TO_ADDR
// for i = s_arr downto 2 do
24557: LD_ADDR_VAR 0 5
24561: PUSH
24562: DOUBLE
24563: LD_VAR 0 7
24567: INC
24568: ST_TO_ADDR
24569: LD_INT 2
24571: PUSH
24572: FOR_DOWNTO
24573: IFFALSE 24657
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
24575: LD_ADDR_VAR 0 6
24579: PUSH
24580: LD_VAR 0 7
24584: PUSH
24585: LD_VAR 0 5
24589: PUSH
24590: LD_INT 1
24592: MINUS
24593: ARRAY
24594: PPUSH
24595: LD_VAR 0 2
24599: PUSH
24600: LD_VAR 0 5
24604: PUSH
24605: LD_INT 1
24607: MINUS
24608: ARRAY
24609: PPUSH
24610: LD_VAR 0 7
24614: PUSH
24615: LD_VAR 0 5
24619: ARRAY
24620: PPUSH
24621: CALL_OW 1
24625: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
24626: LD_ADDR_VAR 0 7
24630: PUSH
24631: LD_VAR 0 7
24635: PPUSH
24636: LD_VAR 0 5
24640: PUSH
24641: LD_INT 1
24643: MINUS
24644: PPUSH
24645: LD_VAR 0 6
24649: PPUSH
24650: CALL_OW 1
24654: ST_TO_ADDR
// end ;
24655: GO 24572
24657: POP
24658: POP
// result := s_arr [ 1 ] ;
24659: LD_ADDR_VAR 0 4
24663: PUSH
24664: LD_VAR 0 7
24668: PUSH
24669: LD_INT 1
24671: ARRAY
24672: ST_TO_ADDR
// end ; end ;
24673: LD_VAR 0 4
24677: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
24678: LD_INT 0
24680: PPUSH
24681: PPUSH
// if not list then
24682: LD_VAR 0 1
24686: NOT
24687: IFFALSE 24691
// exit ;
24689: GO 24782
// i := list [ pos1 ] ;
24691: LD_ADDR_VAR 0 5
24695: PUSH
24696: LD_VAR 0 1
24700: PUSH
24701: LD_VAR 0 2
24705: ARRAY
24706: ST_TO_ADDR
// if not i then
24707: LD_VAR 0 5
24711: NOT
24712: IFFALSE 24716
// exit ;
24714: GO 24782
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
24716: LD_ADDR_VAR 0 1
24720: PUSH
24721: LD_VAR 0 1
24725: PPUSH
24726: LD_VAR 0 2
24730: PPUSH
24731: LD_VAR 0 1
24735: PUSH
24736: LD_VAR 0 3
24740: ARRAY
24741: PPUSH
24742: CALL_OW 1
24746: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
24747: LD_ADDR_VAR 0 1
24751: PUSH
24752: LD_VAR 0 1
24756: PPUSH
24757: LD_VAR 0 3
24761: PPUSH
24762: LD_VAR 0 5
24766: PPUSH
24767: CALL_OW 1
24771: ST_TO_ADDR
// result := list ;
24772: LD_ADDR_VAR 0 4
24776: PUSH
24777: LD_VAR 0 1
24781: ST_TO_ADDR
// end ;
24782: LD_VAR 0 4
24786: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
24787: LD_INT 0
24789: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
24790: LD_ADDR_VAR 0 5
24794: PUSH
24795: LD_VAR 0 1
24799: PPUSH
24800: CALL_OW 250
24804: PPUSH
24805: LD_VAR 0 1
24809: PPUSH
24810: CALL_OW 251
24814: PPUSH
24815: LD_VAR 0 2
24819: PPUSH
24820: LD_VAR 0 3
24824: PPUSH
24825: LD_VAR 0 4
24829: PPUSH
24830: CALL 24840 0 5
24834: ST_TO_ADDR
// end ;
24835: LD_VAR 0 5
24839: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
24840: LD_INT 0
24842: PPUSH
24843: PPUSH
24844: PPUSH
24845: PPUSH
// if not list then
24846: LD_VAR 0 3
24850: NOT
24851: IFFALSE 24855
// exit ;
24853: GO 25243
// result := [ ] ;
24855: LD_ADDR_VAR 0 6
24859: PUSH
24860: EMPTY
24861: ST_TO_ADDR
// for i in list do
24862: LD_ADDR_VAR 0 7
24866: PUSH
24867: LD_VAR 0 3
24871: PUSH
24872: FOR_IN
24873: IFFALSE 25075
// begin tmp := GetDistUnitXY ( i , x , y ) ;
24875: LD_ADDR_VAR 0 9
24879: PUSH
24880: LD_VAR 0 7
24884: PPUSH
24885: LD_VAR 0 1
24889: PPUSH
24890: LD_VAR 0 2
24894: PPUSH
24895: CALL_OW 297
24899: ST_TO_ADDR
// if not result then
24900: LD_VAR 0 6
24904: NOT
24905: IFFALSE 24931
// result := [ [ i , tmp ] ] else
24907: LD_ADDR_VAR 0 6
24911: PUSH
24912: LD_VAR 0 7
24916: PUSH
24917: LD_VAR 0 9
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: EMPTY
24927: LIST
24928: ST_TO_ADDR
24929: GO 25073
// begin if result [ result ] [ 2 ] < tmp then
24931: LD_VAR 0 6
24935: PUSH
24936: LD_VAR 0 6
24940: ARRAY
24941: PUSH
24942: LD_INT 2
24944: ARRAY
24945: PUSH
24946: LD_VAR 0 9
24950: LESS
24951: IFFALSE 24993
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
24953: LD_ADDR_VAR 0 6
24957: PUSH
24958: LD_VAR 0 6
24962: PPUSH
24963: LD_VAR 0 6
24967: PUSH
24968: LD_INT 1
24970: PLUS
24971: PPUSH
24972: LD_VAR 0 7
24976: PUSH
24977: LD_VAR 0 9
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PPUSH
24986: CALL_OW 2
24990: ST_TO_ADDR
24991: GO 25073
// for j = 1 to result do
24993: LD_ADDR_VAR 0 8
24997: PUSH
24998: DOUBLE
24999: LD_INT 1
25001: DEC
25002: ST_TO_ADDR
25003: LD_VAR 0 6
25007: PUSH
25008: FOR_TO
25009: IFFALSE 25071
// begin if tmp < result [ j ] [ 2 ] then
25011: LD_VAR 0 9
25015: PUSH
25016: LD_VAR 0 6
25020: PUSH
25021: LD_VAR 0 8
25025: ARRAY
25026: PUSH
25027: LD_INT 2
25029: ARRAY
25030: LESS
25031: IFFALSE 25069
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25033: LD_ADDR_VAR 0 6
25037: PUSH
25038: LD_VAR 0 6
25042: PPUSH
25043: LD_VAR 0 8
25047: PPUSH
25048: LD_VAR 0 7
25052: PUSH
25053: LD_VAR 0 9
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PPUSH
25062: CALL_OW 2
25066: ST_TO_ADDR
// break ;
25067: GO 25071
// end ; end ;
25069: GO 25008
25071: POP
25072: POP
// end ; end ;
25073: GO 24872
25075: POP
25076: POP
// if result and not asc then
25077: LD_VAR 0 6
25081: PUSH
25082: LD_VAR 0 4
25086: NOT
25087: AND
25088: IFFALSE 25163
// begin tmp := result ;
25090: LD_ADDR_VAR 0 9
25094: PUSH
25095: LD_VAR 0 6
25099: ST_TO_ADDR
// for i = tmp downto 1 do
25100: LD_ADDR_VAR 0 7
25104: PUSH
25105: DOUBLE
25106: LD_VAR 0 9
25110: INC
25111: ST_TO_ADDR
25112: LD_INT 1
25114: PUSH
25115: FOR_DOWNTO
25116: IFFALSE 25161
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25118: LD_ADDR_VAR 0 6
25122: PUSH
25123: LD_VAR 0 6
25127: PPUSH
25128: LD_VAR 0 9
25132: PUSH
25133: LD_VAR 0 7
25137: MINUS
25138: PUSH
25139: LD_INT 1
25141: PLUS
25142: PPUSH
25143: LD_VAR 0 9
25147: PUSH
25148: LD_VAR 0 7
25152: ARRAY
25153: PPUSH
25154: CALL_OW 1
25158: ST_TO_ADDR
25159: GO 25115
25161: POP
25162: POP
// end ; tmp := [ ] ;
25163: LD_ADDR_VAR 0 9
25167: PUSH
25168: EMPTY
25169: ST_TO_ADDR
// if mode then
25170: LD_VAR 0 5
25174: IFFALSE 25243
// begin for i = 1 to result do
25176: LD_ADDR_VAR 0 7
25180: PUSH
25181: DOUBLE
25182: LD_INT 1
25184: DEC
25185: ST_TO_ADDR
25186: LD_VAR 0 6
25190: PUSH
25191: FOR_TO
25192: IFFALSE 25231
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25194: LD_ADDR_VAR 0 9
25198: PUSH
25199: LD_VAR 0 9
25203: PPUSH
25204: LD_VAR 0 7
25208: PPUSH
25209: LD_VAR 0 6
25213: PUSH
25214: LD_VAR 0 7
25218: ARRAY
25219: PUSH
25220: LD_INT 1
25222: ARRAY
25223: PPUSH
25224: CALL_OW 1
25228: ST_TO_ADDR
25229: GO 25191
25231: POP
25232: POP
// result := tmp ;
25233: LD_ADDR_VAR 0 6
25237: PUSH
25238: LD_VAR 0 9
25242: ST_TO_ADDR
// end ; end ;
25243: LD_VAR 0 6
25247: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25248: LD_INT 0
25250: PPUSH
25251: PPUSH
25252: PPUSH
25253: PPUSH
25254: PPUSH
25255: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25256: LD_ADDR_VAR 0 5
25260: PUSH
25261: LD_INT 0
25263: PUSH
25264: LD_INT 0
25266: PUSH
25267: LD_INT 0
25269: PUSH
25270: EMPTY
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: ST_TO_ADDR
// if not x or not y then
25278: LD_VAR 0 2
25282: NOT
25283: PUSH
25284: LD_VAR 0 3
25288: NOT
25289: OR
25290: IFFALSE 25294
// exit ;
25292: GO 26946
// if not range then
25294: LD_VAR 0 4
25298: NOT
25299: IFFALSE 25309
// range := 10 ;
25301: LD_ADDR_VAR 0 4
25305: PUSH
25306: LD_INT 10
25308: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25309: LD_ADDR_VAR 0 8
25313: PUSH
25314: LD_INT 81
25316: PUSH
25317: LD_VAR 0 1
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 92
25328: PUSH
25329: LD_VAR 0 2
25333: PUSH
25334: LD_VAR 0 3
25338: PUSH
25339: LD_VAR 0 4
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 3
25352: PUSH
25353: LD_INT 21
25355: PUSH
25356: LD_INT 3
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: LIST
25371: PPUSH
25372: CALL_OW 69
25376: ST_TO_ADDR
// if not tmp then
25377: LD_VAR 0 8
25381: NOT
25382: IFFALSE 25386
// exit ;
25384: GO 26946
// for i in tmp do
25386: LD_ADDR_VAR 0 6
25390: PUSH
25391: LD_VAR 0 8
25395: PUSH
25396: FOR_IN
25397: IFFALSE 26921
// begin points := [ 0 , 0 , 0 ] ;
25399: LD_ADDR_VAR 0 9
25403: PUSH
25404: LD_INT 0
25406: PUSH
25407: LD_INT 0
25409: PUSH
25410: LD_INT 0
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: LIST
25417: ST_TO_ADDR
// bpoints := 1 ;
25418: LD_ADDR_VAR 0 10
25422: PUSH
25423: LD_INT 1
25425: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25426: LD_VAR 0 6
25430: PPUSH
25431: CALL_OW 247
25435: PUSH
25436: LD_INT 1
25438: DOUBLE
25439: EQUAL
25440: IFTRUE 25444
25442: GO 26022
25444: POP
// begin if GetClass ( i ) = 1 then
25445: LD_VAR 0 6
25449: PPUSH
25450: CALL_OW 257
25454: PUSH
25455: LD_INT 1
25457: EQUAL
25458: IFFALSE 25479
// points := [ 10 , 5 , 3 ] ;
25460: LD_ADDR_VAR 0 9
25464: PUSH
25465: LD_INT 10
25467: PUSH
25468: LD_INT 5
25470: PUSH
25471: LD_INT 3
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: LIST
25478: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25479: LD_VAR 0 6
25483: PPUSH
25484: CALL_OW 257
25488: PUSH
25489: LD_INT 2
25491: PUSH
25492: LD_INT 3
25494: PUSH
25495: LD_INT 4
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: LIST
25502: IN
25503: IFFALSE 25524
// points := [ 3 , 2 , 1 ] ;
25505: LD_ADDR_VAR 0 9
25509: PUSH
25510: LD_INT 3
25512: PUSH
25513: LD_INT 2
25515: PUSH
25516: LD_INT 1
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: LIST
25523: ST_TO_ADDR
// if GetClass ( i ) = 5 then
25524: LD_VAR 0 6
25528: PPUSH
25529: CALL_OW 257
25533: PUSH
25534: LD_INT 5
25536: EQUAL
25537: IFFALSE 25558
// points := [ 130 , 5 , 2 ] ;
25539: LD_ADDR_VAR 0 9
25543: PUSH
25544: LD_INT 130
25546: PUSH
25547: LD_INT 5
25549: PUSH
25550: LD_INT 2
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: LIST
25557: ST_TO_ADDR
// if GetClass ( i ) = 8 then
25558: LD_VAR 0 6
25562: PPUSH
25563: CALL_OW 257
25567: PUSH
25568: LD_INT 8
25570: EQUAL
25571: IFFALSE 25592
// points := [ 35 , 35 , 30 ] ;
25573: LD_ADDR_VAR 0 9
25577: PUSH
25578: LD_INT 35
25580: PUSH
25581: LD_INT 35
25583: PUSH
25584: LD_INT 30
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: LIST
25591: ST_TO_ADDR
// if GetClass ( i ) = 9 then
25592: LD_VAR 0 6
25596: PPUSH
25597: CALL_OW 257
25601: PUSH
25602: LD_INT 9
25604: EQUAL
25605: IFFALSE 25626
// points := [ 20 , 55 , 40 ] ;
25607: LD_ADDR_VAR 0 9
25611: PUSH
25612: LD_INT 20
25614: PUSH
25615: LD_INT 55
25617: PUSH
25618: LD_INT 40
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: LIST
25625: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
25626: LD_VAR 0 6
25630: PPUSH
25631: CALL_OW 257
25635: PUSH
25636: LD_INT 12
25638: PUSH
25639: LD_INT 16
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: IN
25646: IFFALSE 25667
// points := [ 5 , 3 , 2 ] ;
25648: LD_ADDR_VAR 0 9
25652: PUSH
25653: LD_INT 5
25655: PUSH
25656: LD_INT 3
25658: PUSH
25659: LD_INT 2
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: LIST
25666: ST_TO_ADDR
// if GetClass ( i ) = 17 then
25667: LD_VAR 0 6
25671: PPUSH
25672: CALL_OW 257
25676: PUSH
25677: LD_INT 17
25679: EQUAL
25680: IFFALSE 25701
// points := [ 100 , 50 , 75 ] ;
25682: LD_ADDR_VAR 0 9
25686: PUSH
25687: LD_INT 100
25689: PUSH
25690: LD_INT 50
25692: PUSH
25693: LD_INT 75
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: LIST
25700: ST_TO_ADDR
// if GetClass ( i ) = 15 then
25701: LD_VAR 0 6
25705: PPUSH
25706: CALL_OW 257
25710: PUSH
25711: LD_INT 15
25713: EQUAL
25714: IFFALSE 25735
// points := [ 10 , 5 , 3 ] ;
25716: LD_ADDR_VAR 0 9
25720: PUSH
25721: LD_INT 10
25723: PUSH
25724: LD_INT 5
25726: PUSH
25727: LD_INT 3
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: LIST
25734: ST_TO_ADDR
// if GetClass ( i ) = 14 then
25735: LD_VAR 0 6
25739: PPUSH
25740: CALL_OW 257
25744: PUSH
25745: LD_INT 14
25747: EQUAL
25748: IFFALSE 25769
// points := [ 10 , 0 , 0 ] ;
25750: LD_ADDR_VAR 0 9
25754: PUSH
25755: LD_INT 10
25757: PUSH
25758: LD_INT 0
25760: PUSH
25761: LD_INT 0
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: LIST
25768: ST_TO_ADDR
// if GetClass ( i ) = 11 then
25769: LD_VAR 0 6
25773: PPUSH
25774: CALL_OW 257
25778: PUSH
25779: LD_INT 11
25781: EQUAL
25782: IFFALSE 25803
// points := [ 30 , 10 , 5 ] ;
25784: LD_ADDR_VAR 0 9
25788: PUSH
25789: LD_INT 30
25791: PUSH
25792: LD_INT 10
25794: PUSH
25795: LD_INT 5
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: LIST
25802: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
25803: LD_VAR 0 1
25807: PPUSH
25808: LD_INT 5
25810: PPUSH
25811: CALL_OW 321
25815: PUSH
25816: LD_INT 2
25818: EQUAL
25819: IFFALSE 25836
// bpoints := bpoints * 1.8 ;
25821: LD_ADDR_VAR 0 10
25825: PUSH
25826: LD_VAR 0 10
25830: PUSH
25831: LD_REAL  1.80000000000000E+0000
25834: MUL
25835: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
25836: LD_VAR 0 6
25840: PPUSH
25841: CALL_OW 257
25845: PUSH
25846: LD_INT 1
25848: PUSH
25849: LD_INT 2
25851: PUSH
25852: LD_INT 3
25854: PUSH
25855: LD_INT 4
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: IN
25864: PUSH
25865: LD_VAR 0 1
25869: PPUSH
25870: LD_INT 51
25872: PPUSH
25873: CALL_OW 321
25877: PUSH
25878: LD_INT 2
25880: EQUAL
25881: AND
25882: IFFALSE 25899
// bpoints := bpoints * 1.2 ;
25884: LD_ADDR_VAR 0 10
25888: PUSH
25889: LD_VAR 0 10
25893: PUSH
25894: LD_REAL  1.20000000000000E+0000
25897: MUL
25898: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
25899: LD_VAR 0 6
25903: PPUSH
25904: CALL_OW 257
25908: PUSH
25909: LD_INT 5
25911: PUSH
25912: LD_INT 7
25914: PUSH
25915: LD_INT 9
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: LIST
25922: IN
25923: PUSH
25924: LD_VAR 0 1
25928: PPUSH
25929: LD_INT 52
25931: PPUSH
25932: CALL_OW 321
25936: PUSH
25937: LD_INT 2
25939: EQUAL
25940: AND
25941: IFFALSE 25958
// bpoints := bpoints * 1.5 ;
25943: LD_ADDR_VAR 0 10
25947: PUSH
25948: LD_VAR 0 10
25952: PUSH
25953: LD_REAL  1.50000000000000E+0000
25956: MUL
25957: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
25958: LD_VAR 0 1
25962: PPUSH
25963: LD_INT 66
25965: PPUSH
25966: CALL_OW 321
25970: PUSH
25971: LD_INT 2
25973: EQUAL
25974: IFFALSE 25991
// bpoints := bpoints * 1.1 ;
25976: LD_ADDR_VAR 0 10
25980: PUSH
25981: LD_VAR 0 10
25985: PUSH
25986: LD_REAL  1.10000000000000E+0000
25989: MUL
25990: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
25991: LD_ADDR_VAR 0 10
25995: PUSH
25996: LD_VAR 0 10
26000: PUSH
26001: LD_VAR 0 6
26005: PPUSH
26006: LD_INT 1
26008: PPUSH
26009: CALL_OW 259
26013: PUSH
26014: LD_REAL  1.15000000000000E+0000
26017: MUL
26018: MUL
26019: ST_TO_ADDR
// end ; unit_vehicle :
26020: GO 26850
26022: LD_INT 2
26024: DOUBLE
26025: EQUAL
26026: IFTRUE 26030
26028: GO 26838
26030: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
26031: LD_VAR 0 6
26035: PPUSH
26036: CALL_OW 264
26040: PUSH
26041: LD_INT 2
26043: PUSH
26044: LD_INT 42
26046: PUSH
26047: LD_INT 24
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: LIST
26054: IN
26055: IFFALSE 26076
// points := [ 25 , 5 , 3 ] ;
26057: LD_ADDR_VAR 0 9
26061: PUSH
26062: LD_INT 25
26064: PUSH
26065: LD_INT 5
26067: PUSH
26068: LD_INT 3
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: LIST
26075: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26076: LD_VAR 0 6
26080: PPUSH
26081: CALL_OW 264
26085: PUSH
26086: LD_INT 4
26088: PUSH
26089: LD_INT 43
26091: PUSH
26092: LD_INT 25
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: LIST
26099: IN
26100: IFFALSE 26121
// points := [ 40 , 15 , 5 ] ;
26102: LD_ADDR_VAR 0 9
26106: PUSH
26107: LD_INT 40
26109: PUSH
26110: LD_INT 15
26112: PUSH
26113: LD_INT 5
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: LIST
26120: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26121: LD_VAR 0 6
26125: PPUSH
26126: CALL_OW 264
26130: PUSH
26131: LD_INT 3
26133: PUSH
26134: LD_INT 23
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: IN
26141: IFFALSE 26162
// points := [ 7 , 25 , 8 ] ;
26143: LD_ADDR_VAR 0 9
26147: PUSH
26148: LD_INT 7
26150: PUSH
26151: LD_INT 25
26153: PUSH
26154: LD_INT 8
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: LIST
26161: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26162: LD_VAR 0 6
26166: PPUSH
26167: CALL_OW 264
26171: PUSH
26172: LD_INT 5
26174: PUSH
26175: LD_INT 27
26177: PUSH
26178: LD_INT 44
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: LIST
26185: IN
26186: IFFALSE 26207
// points := [ 14 , 50 , 16 ] ;
26188: LD_ADDR_VAR 0 9
26192: PUSH
26193: LD_INT 14
26195: PUSH
26196: LD_INT 50
26198: PUSH
26199: LD_INT 16
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: LIST
26206: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26207: LD_VAR 0 6
26211: PPUSH
26212: CALL_OW 264
26216: PUSH
26217: LD_INT 6
26219: PUSH
26220: LD_INT 46
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: IN
26227: IFFALSE 26248
// points := [ 32 , 120 , 70 ] ;
26229: LD_ADDR_VAR 0 9
26233: PUSH
26234: LD_INT 32
26236: PUSH
26237: LD_INT 120
26239: PUSH
26240: LD_INT 70
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: LIST
26247: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
26248: LD_VAR 0 6
26252: PPUSH
26253: CALL_OW 264
26257: PUSH
26258: LD_INT 7
26260: PUSH
26261: LD_INT 28
26263: PUSH
26264: LD_INT 45
26266: PUSH
26267: LD_EXP 75
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: IN
26278: IFFALSE 26299
// points := [ 35 , 20 , 45 ] ;
26280: LD_ADDR_VAR 0 9
26284: PUSH
26285: LD_INT 35
26287: PUSH
26288: LD_INT 20
26290: PUSH
26291: LD_INT 45
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: LIST
26298: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26299: LD_VAR 0 6
26303: PPUSH
26304: CALL_OW 264
26308: PUSH
26309: LD_INT 47
26311: PUSH
26312: EMPTY
26313: LIST
26314: IN
26315: IFFALSE 26336
// points := [ 67 , 45 , 75 ] ;
26317: LD_ADDR_VAR 0 9
26321: PUSH
26322: LD_INT 67
26324: PUSH
26325: LD_INT 45
26327: PUSH
26328: LD_INT 75
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: LIST
26335: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26336: LD_VAR 0 6
26340: PPUSH
26341: CALL_OW 264
26345: PUSH
26346: LD_INT 26
26348: PUSH
26349: EMPTY
26350: LIST
26351: IN
26352: IFFALSE 26373
// points := [ 120 , 30 , 80 ] ;
26354: LD_ADDR_VAR 0 9
26358: PUSH
26359: LD_INT 120
26361: PUSH
26362: LD_INT 30
26364: PUSH
26365: LD_INT 80
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: LIST
26372: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26373: LD_VAR 0 6
26377: PPUSH
26378: CALL_OW 264
26382: PUSH
26383: LD_INT 22
26385: PUSH
26386: EMPTY
26387: LIST
26388: IN
26389: IFFALSE 26410
// points := [ 40 , 1 , 1 ] ;
26391: LD_ADDR_VAR 0 9
26395: PUSH
26396: LD_INT 40
26398: PUSH
26399: LD_INT 1
26401: PUSH
26402: LD_INT 1
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: LIST
26409: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26410: LD_VAR 0 6
26414: PPUSH
26415: CALL_OW 264
26419: PUSH
26420: LD_INT 29
26422: PUSH
26423: EMPTY
26424: LIST
26425: IN
26426: IFFALSE 26447
// points := [ 70 , 200 , 400 ] ;
26428: LD_ADDR_VAR 0 9
26432: PUSH
26433: LD_INT 70
26435: PUSH
26436: LD_INT 200
26438: PUSH
26439: LD_INT 400
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: LIST
26446: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26447: LD_VAR 0 6
26451: PPUSH
26452: CALL_OW 264
26456: PUSH
26457: LD_INT 14
26459: PUSH
26460: LD_INT 53
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: IN
26467: IFFALSE 26488
// points := [ 40 , 10 , 20 ] ;
26469: LD_ADDR_VAR 0 9
26473: PUSH
26474: LD_INT 40
26476: PUSH
26477: LD_INT 10
26479: PUSH
26480: LD_INT 20
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: LIST
26487: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26488: LD_VAR 0 6
26492: PPUSH
26493: CALL_OW 264
26497: PUSH
26498: LD_INT 9
26500: PUSH
26501: EMPTY
26502: LIST
26503: IN
26504: IFFALSE 26525
// points := [ 5 , 70 , 20 ] ;
26506: LD_ADDR_VAR 0 9
26510: PUSH
26511: LD_INT 5
26513: PUSH
26514: LD_INT 70
26516: PUSH
26517: LD_INT 20
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: LIST
26524: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
26525: LD_VAR 0 6
26529: PPUSH
26530: CALL_OW 264
26534: PUSH
26535: LD_INT 10
26537: PUSH
26538: EMPTY
26539: LIST
26540: IN
26541: IFFALSE 26562
// points := [ 35 , 110 , 70 ] ;
26543: LD_ADDR_VAR 0 9
26547: PUSH
26548: LD_INT 35
26550: PUSH
26551: LD_INT 110
26553: PUSH
26554: LD_INT 70
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: LIST
26561: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
26562: LD_VAR 0 6
26566: PPUSH
26567: CALL_OW 265
26571: PUSH
26572: LD_INT 25
26574: EQUAL
26575: IFFALSE 26596
// points := [ 80 , 65 , 100 ] ;
26577: LD_ADDR_VAR 0 9
26581: PUSH
26582: LD_INT 80
26584: PUSH
26585: LD_INT 65
26587: PUSH
26588: LD_INT 100
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: LIST
26595: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
26596: LD_VAR 0 6
26600: PPUSH
26601: CALL_OW 263
26605: PUSH
26606: LD_INT 1
26608: EQUAL
26609: IFFALSE 26644
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
26611: LD_ADDR_VAR 0 10
26615: PUSH
26616: LD_VAR 0 10
26620: PUSH
26621: LD_VAR 0 6
26625: PPUSH
26626: CALL_OW 311
26630: PPUSH
26631: LD_INT 3
26633: PPUSH
26634: CALL_OW 259
26638: PUSH
26639: LD_INT 4
26641: MUL
26642: MUL
26643: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
26644: LD_VAR 0 6
26648: PPUSH
26649: CALL_OW 263
26653: PUSH
26654: LD_INT 2
26656: EQUAL
26657: IFFALSE 26708
// begin j := IsControledBy ( i ) ;
26659: LD_ADDR_VAR 0 7
26663: PUSH
26664: LD_VAR 0 6
26668: PPUSH
26669: CALL_OW 312
26673: ST_TO_ADDR
// if j then
26674: LD_VAR 0 7
26678: IFFALSE 26708
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
26680: LD_ADDR_VAR 0 10
26684: PUSH
26685: LD_VAR 0 10
26689: PUSH
26690: LD_VAR 0 7
26694: PPUSH
26695: LD_INT 3
26697: PPUSH
26698: CALL_OW 259
26702: PUSH
26703: LD_INT 3
26705: MUL
26706: MUL
26707: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
26708: LD_VAR 0 6
26712: PPUSH
26713: CALL_OW 264
26717: PUSH
26718: LD_INT 5
26720: PUSH
26721: LD_INT 6
26723: PUSH
26724: LD_INT 46
26726: PUSH
26727: LD_INT 44
26729: PUSH
26730: LD_INT 47
26732: PUSH
26733: LD_INT 45
26735: PUSH
26736: LD_INT 28
26738: PUSH
26739: LD_INT 7
26741: PUSH
26742: LD_INT 27
26744: PUSH
26745: LD_INT 29
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: IN
26760: PUSH
26761: LD_VAR 0 1
26765: PPUSH
26766: LD_INT 52
26768: PPUSH
26769: CALL_OW 321
26773: PUSH
26774: LD_INT 2
26776: EQUAL
26777: AND
26778: IFFALSE 26795
// bpoints := bpoints * 1.2 ;
26780: LD_ADDR_VAR 0 10
26784: PUSH
26785: LD_VAR 0 10
26789: PUSH
26790: LD_REAL  1.20000000000000E+0000
26793: MUL
26794: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
26795: LD_VAR 0 6
26799: PPUSH
26800: CALL_OW 264
26804: PUSH
26805: LD_INT 6
26807: PUSH
26808: LD_INT 46
26810: PUSH
26811: LD_INT 47
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: LIST
26818: IN
26819: IFFALSE 26836
// bpoints := bpoints * 1.2 ;
26821: LD_ADDR_VAR 0 10
26825: PUSH
26826: LD_VAR 0 10
26830: PUSH
26831: LD_REAL  1.20000000000000E+0000
26834: MUL
26835: ST_TO_ADDR
// end ; unit_building :
26836: GO 26850
26838: LD_INT 3
26840: DOUBLE
26841: EQUAL
26842: IFTRUE 26846
26844: GO 26849
26846: POP
// ; end ;
26847: GO 26850
26849: POP
// for j = 1 to 3 do
26850: LD_ADDR_VAR 0 7
26854: PUSH
26855: DOUBLE
26856: LD_INT 1
26858: DEC
26859: ST_TO_ADDR
26860: LD_INT 3
26862: PUSH
26863: FOR_TO
26864: IFFALSE 26917
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
26866: LD_ADDR_VAR 0 5
26870: PUSH
26871: LD_VAR 0 5
26875: PPUSH
26876: LD_VAR 0 7
26880: PPUSH
26881: LD_VAR 0 5
26885: PUSH
26886: LD_VAR 0 7
26890: ARRAY
26891: PUSH
26892: LD_VAR 0 9
26896: PUSH
26897: LD_VAR 0 7
26901: ARRAY
26902: PUSH
26903: LD_VAR 0 10
26907: MUL
26908: PLUS
26909: PPUSH
26910: CALL_OW 1
26914: ST_TO_ADDR
26915: GO 26863
26917: POP
26918: POP
// end ;
26919: GO 25396
26921: POP
26922: POP
// result := Replace ( result , 4 , tmp ) ;
26923: LD_ADDR_VAR 0 5
26927: PUSH
26928: LD_VAR 0 5
26932: PPUSH
26933: LD_INT 4
26935: PPUSH
26936: LD_VAR 0 8
26940: PPUSH
26941: CALL_OW 1
26945: ST_TO_ADDR
// end ;
26946: LD_VAR 0 5
26950: RET
// export function DangerAtRange ( unit , range ) ; begin
26951: LD_INT 0
26953: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
26954: LD_ADDR_VAR 0 3
26958: PUSH
26959: LD_VAR 0 1
26963: PPUSH
26964: CALL_OW 255
26968: PPUSH
26969: LD_VAR 0 1
26973: PPUSH
26974: CALL_OW 250
26978: PPUSH
26979: LD_VAR 0 1
26983: PPUSH
26984: CALL_OW 251
26988: PPUSH
26989: LD_VAR 0 2
26993: PPUSH
26994: CALL 25248 0 4
26998: ST_TO_ADDR
// end ;
26999: LD_VAR 0 3
27003: RET
// export function DangerInArea ( side , area ) ; begin
27004: LD_INT 0
27006: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27007: LD_ADDR_VAR 0 3
27011: PUSH
27012: LD_VAR 0 2
27016: PPUSH
27017: LD_INT 81
27019: PUSH
27020: LD_VAR 0 1
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PPUSH
27029: CALL_OW 70
27033: ST_TO_ADDR
// end ;
27034: LD_VAR 0 3
27038: RET
// export function IsExtension ( b ) ; begin
27039: LD_INT 0
27041: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
27042: LD_ADDR_VAR 0 2
27046: PUSH
27047: LD_VAR 0 1
27051: PUSH
27052: LD_INT 23
27054: PUSH
27055: LD_INT 20
27057: PUSH
27058: LD_INT 22
27060: PUSH
27061: LD_INT 17
27063: PUSH
27064: LD_INT 24
27066: PUSH
27067: LD_INT 21
27069: PUSH
27070: LD_INT 19
27072: PUSH
27073: LD_INT 16
27075: PUSH
27076: LD_INT 25
27078: PUSH
27079: LD_INT 18
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: IN
27094: ST_TO_ADDR
// end ;
27095: LD_VAR 0 2
27099: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
27100: LD_INT 0
27102: PPUSH
27103: PPUSH
27104: PPUSH
// result := [ ] ;
27105: LD_ADDR_VAR 0 4
27109: PUSH
27110: EMPTY
27111: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27112: LD_ADDR_VAR 0 5
27116: PUSH
27117: LD_VAR 0 2
27121: PPUSH
27122: LD_INT 21
27124: PUSH
27125: LD_INT 3
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PPUSH
27132: CALL_OW 70
27136: ST_TO_ADDR
// if not tmp then
27137: LD_VAR 0 5
27141: NOT
27142: IFFALSE 27146
// exit ;
27144: GO 27210
// if checkLink then
27146: LD_VAR 0 3
27150: IFFALSE 27200
// begin for i in tmp do
27152: LD_ADDR_VAR 0 6
27156: PUSH
27157: LD_VAR 0 5
27161: PUSH
27162: FOR_IN
27163: IFFALSE 27198
// if GetBase ( i ) <> base then
27165: LD_VAR 0 6
27169: PPUSH
27170: CALL_OW 274
27174: PUSH
27175: LD_VAR 0 1
27179: NONEQUAL
27180: IFFALSE 27196
// ComLinkToBase ( base , i ) ;
27182: LD_VAR 0 1
27186: PPUSH
27187: LD_VAR 0 6
27191: PPUSH
27192: CALL_OW 169
27196: GO 27162
27198: POP
27199: POP
// end ; result := tmp ;
27200: LD_ADDR_VAR 0 4
27204: PUSH
27205: LD_VAR 0 5
27209: ST_TO_ADDR
// end ;
27210: LD_VAR 0 4
27214: RET
// export function ComComplete ( units , b ) ; var i ; begin
27215: LD_INT 0
27217: PPUSH
27218: PPUSH
// if not units then
27219: LD_VAR 0 1
27223: NOT
27224: IFFALSE 27228
// exit ;
27226: GO 27318
// for i in units do
27228: LD_ADDR_VAR 0 4
27232: PUSH
27233: LD_VAR 0 1
27237: PUSH
27238: FOR_IN
27239: IFFALSE 27316
// if BuildingStatus ( b ) = bs_build then
27241: LD_VAR 0 2
27245: PPUSH
27246: CALL_OW 461
27250: PUSH
27251: LD_INT 1
27253: EQUAL
27254: IFFALSE 27314
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27256: LD_VAR 0 4
27260: PPUSH
27261: LD_STRING h
27263: PUSH
27264: LD_VAR 0 2
27268: PPUSH
27269: CALL_OW 250
27273: PUSH
27274: LD_VAR 0 2
27278: PPUSH
27279: CALL_OW 251
27283: PUSH
27284: LD_VAR 0 2
27288: PUSH
27289: LD_INT 0
27291: PUSH
27292: LD_INT 0
27294: PUSH
27295: LD_INT 0
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: PUSH
27307: EMPTY
27308: LIST
27309: PPUSH
27310: CALL_OW 446
27314: GO 27238
27316: POP
27317: POP
// end ;
27318: LD_VAR 0 3
27322: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27323: LD_INT 0
27325: PPUSH
27326: PPUSH
27327: PPUSH
27328: PPUSH
27329: PPUSH
27330: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
27331: LD_VAR 0 1
27335: NOT
27336: PUSH
27337: LD_VAR 0 1
27341: PPUSH
27342: CALL_OW 263
27346: PUSH
27347: LD_INT 2
27349: NONEQUAL
27350: OR
27351: IFFALSE 27355
// exit ;
27353: GO 27671
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27355: LD_ADDR_VAR 0 6
27359: PUSH
27360: LD_INT 22
27362: PUSH
27363: LD_VAR 0 1
27367: PPUSH
27368: CALL_OW 255
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 2
27379: PUSH
27380: LD_INT 30
27382: PUSH
27383: LD_INT 36
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 34
27392: PUSH
27393: LD_INT 31
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: LIST
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PPUSH
27409: CALL_OW 69
27413: ST_TO_ADDR
// if not tmp then
27414: LD_VAR 0 6
27418: NOT
27419: IFFALSE 27423
// exit ;
27421: GO 27671
// result := [ ] ;
27423: LD_ADDR_VAR 0 2
27427: PUSH
27428: EMPTY
27429: ST_TO_ADDR
// for i in tmp do
27430: LD_ADDR_VAR 0 3
27434: PUSH
27435: LD_VAR 0 6
27439: PUSH
27440: FOR_IN
27441: IFFALSE 27512
// begin t := UnitsInside ( i ) ;
27443: LD_ADDR_VAR 0 4
27447: PUSH
27448: LD_VAR 0 3
27452: PPUSH
27453: CALL_OW 313
27457: ST_TO_ADDR
// if t then
27458: LD_VAR 0 4
27462: IFFALSE 27510
// for j in t do
27464: LD_ADDR_VAR 0 7
27468: PUSH
27469: LD_VAR 0 4
27473: PUSH
27474: FOR_IN
27475: IFFALSE 27508
// result := Replace ( result , result + 1 , j ) ;
27477: LD_ADDR_VAR 0 2
27481: PUSH
27482: LD_VAR 0 2
27486: PPUSH
27487: LD_VAR 0 2
27491: PUSH
27492: LD_INT 1
27494: PLUS
27495: PPUSH
27496: LD_VAR 0 7
27500: PPUSH
27501: CALL_OW 1
27505: ST_TO_ADDR
27506: GO 27474
27508: POP
27509: POP
// end ;
27510: GO 27440
27512: POP
27513: POP
// if not result then
27514: LD_VAR 0 2
27518: NOT
27519: IFFALSE 27523
// exit ;
27521: GO 27671
// mech := result [ 1 ] ;
27523: LD_ADDR_VAR 0 5
27527: PUSH
27528: LD_VAR 0 2
27532: PUSH
27533: LD_INT 1
27535: ARRAY
27536: ST_TO_ADDR
// if result > 1 then
27537: LD_VAR 0 2
27541: PUSH
27542: LD_INT 1
27544: GREATER
27545: IFFALSE 27657
// begin for i = 2 to result do
27547: LD_ADDR_VAR 0 3
27551: PUSH
27552: DOUBLE
27553: LD_INT 2
27555: DEC
27556: ST_TO_ADDR
27557: LD_VAR 0 2
27561: PUSH
27562: FOR_TO
27563: IFFALSE 27655
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
27565: LD_ADDR_VAR 0 4
27569: PUSH
27570: LD_VAR 0 2
27574: PUSH
27575: LD_VAR 0 3
27579: ARRAY
27580: PPUSH
27581: LD_INT 3
27583: PPUSH
27584: CALL_OW 259
27588: PUSH
27589: LD_VAR 0 2
27593: PUSH
27594: LD_VAR 0 3
27598: ARRAY
27599: PPUSH
27600: CALL_OW 432
27604: MINUS
27605: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
27606: LD_VAR 0 4
27610: PUSH
27611: LD_VAR 0 5
27615: PPUSH
27616: LD_INT 3
27618: PPUSH
27619: CALL_OW 259
27623: PUSH
27624: LD_VAR 0 5
27628: PPUSH
27629: CALL_OW 432
27633: MINUS
27634: GREATEREQUAL
27635: IFFALSE 27653
// mech := result [ i ] ;
27637: LD_ADDR_VAR 0 5
27641: PUSH
27642: LD_VAR 0 2
27646: PUSH
27647: LD_VAR 0 3
27651: ARRAY
27652: ST_TO_ADDR
// end ;
27653: GO 27562
27655: POP
27656: POP
// end ; ComLinkTo ( vehicle , mech ) ;
27657: LD_VAR 0 1
27661: PPUSH
27662: LD_VAR 0 5
27666: PPUSH
27667: CALL_OW 135
// end ;
27671: LD_VAR 0 2
27675: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
27676: LD_INT 0
27678: PPUSH
27679: PPUSH
27680: PPUSH
27681: PPUSH
27682: PPUSH
27683: PPUSH
27684: PPUSH
27685: PPUSH
27686: PPUSH
27687: PPUSH
27688: PPUSH
27689: PPUSH
27690: PPUSH
// result := [ ] ;
27691: LD_ADDR_VAR 0 7
27695: PUSH
27696: EMPTY
27697: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
27698: LD_VAR 0 1
27702: PPUSH
27703: CALL_OW 266
27707: PUSH
27708: LD_INT 0
27710: PUSH
27711: LD_INT 1
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: IN
27718: NOT
27719: IFFALSE 27723
// exit ;
27721: GO 29357
// if name then
27723: LD_VAR 0 3
27727: IFFALSE 27743
// SetBName ( base_dep , name ) ;
27729: LD_VAR 0 1
27733: PPUSH
27734: LD_VAR 0 3
27738: PPUSH
27739: CALL_OW 500
// base := GetBase ( base_dep ) ;
27743: LD_ADDR_VAR 0 15
27747: PUSH
27748: LD_VAR 0 1
27752: PPUSH
27753: CALL_OW 274
27757: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
27758: LD_ADDR_VAR 0 16
27762: PUSH
27763: LD_VAR 0 1
27767: PPUSH
27768: CALL_OW 255
27772: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
27773: LD_ADDR_VAR 0 17
27777: PUSH
27778: LD_VAR 0 1
27782: PPUSH
27783: CALL_OW 248
27787: ST_TO_ADDR
// if sources then
27788: LD_VAR 0 5
27792: IFFALSE 27839
// for i = 1 to 3 do
27794: LD_ADDR_VAR 0 8
27798: PUSH
27799: DOUBLE
27800: LD_INT 1
27802: DEC
27803: ST_TO_ADDR
27804: LD_INT 3
27806: PUSH
27807: FOR_TO
27808: IFFALSE 27837
// AddResourceType ( base , i , sources [ i ] ) ;
27810: LD_VAR 0 15
27814: PPUSH
27815: LD_VAR 0 8
27819: PPUSH
27820: LD_VAR 0 5
27824: PUSH
27825: LD_VAR 0 8
27829: ARRAY
27830: PPUSH
27831: CALL_OW 276
27835: GO 27807
27837: POP
27838: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
27839: LD_ADDR_VAR 0 18
27843: PUSH
27844: LD_VAR 0 15
27848: PPUSH
27849: LD_VAR 0 2
27853: PPUSH
27854: LD_INT 1
27856: PPUSH
27857: CALL 27100 0 3
27861: ST_TO_ADDR
// InitHc ;
27862: CALL_OW 19
// InitUc ;
27866: CALL_OW 18
// uc_side := side ;
27870: LD_ADDR_OWVAR 20
27874: PUSH
27875: LD_VAR 0 16
27879: ST_TO_ADDR
// uc_nation := nation ;
27880: LD_ADDR_OWVAR 21
27884: PUSH
27885: LD_VAR 0 17
27889: ST_TO_ADDR
// if buildings then
27890: LD_VAR 0 18
27894: IFFALSE 29216
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
27896: LD_ADDR_VAR 0 19
27900: PUSH
27901: LD_VAR 0 18
27905: PPUSH
27906: LD_INT 2
27908: PUSH
27909: LD_INT 30
27911: PUSH
27912: LD_INT 29
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 30
27921: PUSH
27922: LD_INT 30
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: LIST
27933: PPUSH
27934: CALL_OW 72
27938: ST_TO_ADDR
// if tmp then
27939: LD_VAR 0 19
27943: IFFALSE 27991
// for i in tmp do
27945: LD_ADDR_VAR 0 8
27949: PUSH
27950: LD_VAR 0 19
27954: PUSH
27955: FOR_IN
27956: IFFALSE 27989
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
27958: LD_VAR 0 8
27962: PPUSH
27963: CALL_OW 250
27967: PPUSH
27968: LD_VAR 0 8
27972: PPUSH
27973: CALL_OW 251
27977: PPUSH
27978: LD_VAR 0 16
27982: PPUSH
27983: CALL_OW 441
27987: GO 27955
27989: POP
27990: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
27991: LD_VAR 0 18
27995: PPUSH
27996: LD_INT 2
27998: PUSH
27999: LD_INT 30
28001: PUSH
28002: LD_INT 32
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 30
28011: PUSH
28012: LD_INT 33
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: LIST
28023: PPUSH
28024: CALL_OW 72
28028: IFFALSE 28116
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28030: LD_ADDR_VAR 0 8
28034: PUSH
28035: LD_VAR 0 18
28039: PPUSH
28040: LD_INT 2
28042: PUSH
28043: LD_INT 30
28045: PUSH
28046: LD_INT 32
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 30
28055: PUSH
28056: LD_INT 33
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: LIST
28067: PPUSH
28068: CALL_OW 72
28072: PUSH
28073: FOR_IN
28074: IFFALSE 28114
// begin if not GetBWeapon ( i ) then
28076: LD_VAR 0 8
28080: PPUSH
28081: CALL_OW 269
28085: NOT
28086: IFFALSE 28112
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
28088: LD_VAR 0 8
28092: PPUSH
28093: LD_VAR 0 8
28097: PPUSH
28098: LD_VAR 0 2
28102: PPUSH
28103: CALL 29362 0 2
28107: PPUSH
28108: CALL_OW 431
// end ;
28112: GO 28073
28114: POP
28115: POP
// end ; for i = 1 to personel do
28116: LD_ADDR_VAR 0 8
28120: PUSH
28121: DOUBLE
28122: LD_INT 1
28124: DEC
28125: ST_TO_ADDR
28126: LD_VAR 0 6
28130: PUSH
28131: FOR_TO
28132: IFFALSE 29196
// begin if i > 4 then
28134: LD_VAR 0 8
28138: PUSH
28139: LD_INT 4
28141: GREATER
28142: IFFALSE 28146
// break ;
28144: GO 29196
// case i of 1 :
28146: LD_VAR 0 8
28150: PUSH
28151: LD_INT 1
28153: DOUBLE
28154: EQUAL
28155: IFTRUE 28159
28157: GO 28239
28159: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28160: LD_ADDR_VAR 0 12
28164: PUSH
28165: LD_VAR 0 18
28169: PPUSH
28170: LD_INT 22
28172: PUSH
28173: LD_VAR 0 16
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 58
28184: PUSH
28185: EMPTY
28186: LIST
28187: PUSH
28188: LD_INT 2
28190: PUSH
28191: LD_INT 30
28193: PUSH
28194: LD_INT 32
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 30
28203: PUSH
28204: LD_INT 4
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 30
28213: PUSH
28214: LD_INT 5
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: LIST
28231: PPUSH
28232: CALL_OW 72
28236: ST_TO_ADDR
28237: GO 28461
28239: LD_INT 2
28241: DOUBLE
28242: EQUAL
28243: IFTRUE 28247
28245: GO 28309
28247: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28248: LD_ADDR_VAR 0 12
28252: PUSH
28253: LD_VAR 0 18
28257: PPUSH
28258: LD_INT 22
28260: PUSH
28261: LD_VAR 0 16
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: LD_INT 2
28272: PUSH
28273: LD_INT 30
28275: PUSH
28276: LD_INT 0
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 30
28285: PUSH
28286: LD_INT 1
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: LIST
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PPUSH
28302: CALL_OW 72
28306: ST_TO_ADDR
28307: GO 28461
28309: LD_INT 3
28311: DOUBLE
28312: EQUAL
28313: IFTRUE 28317
28315: GO 28379
28317: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28318: LD_ADDR_VAR 0 12
28322: PUSH
28323: LD_VAR 0 18
28327: PPUSH
28328: LD_INT 22
28330: PUSH
28331: LD_VAR 0 16
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 2
28342: PUSH
28343: LD_INT 30
28345: PUSH
28346: LD_INT 2
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: LD_INT 30
28355: PUSH
28356: LD_INT 3
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: LIST
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PPUSH
28372: CALL_OW 72
28376: ST_TO_ADDR
28377: GO 28461
28379: LD_INT 4
28381: DOUBLE
28382: EQUAL
28383: IFTRUE 28387
28385: GO 28460
28387: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28388: LD_ADDR_VAR 0 12
28392: PUSH
28393: LD_VAR 0 18
28397: PPUSH
28398: LD_INT 22
28400: PUSH
28401: LD_VAR 0 16
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 2
28412: PUSH
28413: LD_INT 30
28415: PUSH
28416: LD_INT 6
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 30
28425: PUSH
28426: LD_INT 7
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: LD_INT 30
28435: PUSH
28436: LD_INT 8
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PPUSH
28453: CALL_OW 72
28457: ST_TO_ADDR
28458: GO 28461
28460: POP
// if i = 1 then
28461: LD_VAR 0 8
28465: PUSH
28466: LD_INT 1
28468: EQUAL
28469: IFFALSE 28580
// begin tmp := [ ] ;
28471: LD_ADDR_VAR 0 19
28475: PUSH
28476: EMPTY
28477: ST_TO_ADDR
// for j in f do
28478: LD_ADDR_VAR 0 9
28482: PUSH
28483: LD_VAR 0 12
28487: PUSH
28488: FOR_IN
28489: IFFALSE 28562
// if GetBType ( j ) = b_bunker then
28491: LD_VAR 0 9
28495: PPUSH
28496: CALL_OW 266
28500: PUSH
28501: LD_INT 32
28503: EQUAL
28504: IFFALSE 28531
// tmp := Insert ( tmp , 1 , j ) else
28506: LD_ADDR_VAR 0 19
28510: PUSH
28511: LD_VAR 0 19
28515: PPUSH
28516: LD_INT 1
28518: PPUSH
28519: LD_VAR 0 9
28523: PPUSH
28524: CALL_OW 2
28528: ST_TO_ADDR
28529: GO 28560
// tmp := Insert ( tmp , tmp + 1 , j ) ;
28531: LD_ADDR_VAR 0 19
28535: PUSH
28536: LD_VAR 0 19
28540: PPUSH
28541: LD_VAR 0 19
28545: PUSH
28546: LD_INT 1
28548: PLUS
28549: PPUSH
28550: LD_VAR 0 9
28554: PPUSH
28555: CALL_OW 2
28559: ST_TO_ADDR
28560: GO 28488
28562: POP
28563: POP
// if tmp then
28564: LD_VAR 0 19
28568: IFFALSE 28580
// f := tmp ;
28570: LD_ADDR_VAR 0 12
28574: PUSH
28575: LD_VAR 0 19
28579: ST_TO_ADDR
// end ; x := personel [ i ] ;
28580: LD_ADDR_VAR 0 13
28584: PUSH
28585: LD_VAR 0 6
28589: PUSH
28590: LD_VAR 0 8
28594: ARRAY
28595: ST_TO_ADDR
// if x = - 1 then
28596: LD_VAR 0 13
28600: PUSH
28601: LD_INT 1
28603: NEG
28604: EQUAL
28605: IFFALSE 28814
// begin for j in f do
28607: LD_ADDR_VAR 0 9
28611: PUSH
28612: LD_VAR 0 12
28616: PUSH
28617: FOR_IN
28618: IFFALSE 28810
// repeat InitHc ;
28620: CALL_OW 19
// if GetBType ( j ) = b_barracks then
28624: LD_VAR 0 9
28628: PPUSH
28629: CALL_OW 266
28633: PUSH
28634: LD_INT 5
28636: EQUAL
28637: IFFALSE 28707
// begin if UnitsInside ( j ) < 3 then
28639: LD_VAR 0 9
28643: PPUSH
28644: CALL_OW 313
28648: PUSH
28649: LD_INT 3
28651: LESS
28652: IFFALSE 28688
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28654: LD_INT 0
28656: PPUSH
28657: LD_INT 5
28659: PUSH
28660: LD_INT 8
28662: PUSH
28663: LD_INT 9
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: LIST
28670: PUSH
28671: LD_VAR 0 17
28675: ARRAY
28676: PPUSH
28677: LD_VAR 0 4
28681: PPUSH
28682: CALL_OW 380
28686: GO 28705
// PrepareHuman ( false , i , skill ) ;
28688: LD_INT 0
28690: PPUSH
28691: LD_VAR 0 8
28695: PPUSH
28696: LD_VAR 0 4
28700: PPUSH
28701: CALL_OW 380
// end else
28705: GO 28724
// PrepareHuman ( false , i , skill ) ;
28707: LD_INT 0
28709: PPUSH
28710: LD_VAR 0 8
28714: PPUSH
28715: LD_VAR 0 4
28719: PPUSH
28720: CALL_OW 380
// un := CreateHuman ;
28724: LD_ADDR_VAR 0 14
28728: PUSH
28729: CALL_OW 44
28733: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28734: LD_ADDR_VAR 0 7
28738: PUSH
28739: LD_VAR 0 7
28743: PPUSH
28744: LD_INT 1
28746: PPUSH
28747: LD_VAR 0 14
28751: PPUSH
28752: CALL_OW 2
28756: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
28757: LD_VAR 0 14
28761: PPUSH
28762: LD_VAR 0 9
28766: PPUSH
28767: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
28771: LD_VAR 0 9
28775: PPUSH
28776: CALL_OW 313
28780: PUSH
28781: LD_INT 6
28783: EQUAL
28784: PUSH
28785: LD_VAR 0 9
28789: PPUSH
28790: CALL_OW 266
28794: PUSH
28795: LD_INT 32
28797: PUSH
28798: LD_INT 31
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: IN
28805: OR
28806: IFFALSE 28620
28808: GO 28617
28810: POP
28811: POP
// end else
28812: GO 29194
// for j = 1 to x do
28814: LD_ADDR_VAR 0 9
28818: PUSH
28819: DOUBLE
28820: LD_INT 1
28822: DEC
28823: ST_TO_ADDR
28824: LD_VAR 0 13
28828: PUSH
28829: FOR_TO
28830: IFFALSE 29192
// begin InitHc ;
28832: CALL_OW 19
// if not f then
28836: LD_VAR 0 12
28840: NOT
28841: IFFALSE 28930
// begin PrepareHuman ( false , i , skill ) ;
28843: LD_INT 0
28845: PPUSH
28846: LD_VAR 0 8
28850: PPUSH
28851: LD_VAR 0 4
28855: PPUSH
28856: CALL_OW 380
// un := CreateHuman ;
28860: LD_ADDR_VAR 0 14
28864: PUSH
28865: CALL_OW 44
28869: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28870: LD_ADDR_VAR 0 7
28874: PUSH
28875: LD_VAR 0 7
28879: PPUSH
28880: LD_INT 1
28882: PPUSH
28883: LD_VAR 0 14
28887: PPUSH
28888: CALL_OW 2
28892: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
28893: LD_VAR 0 14
28897: PPUSH
28898: LD_VAR 0 1
28902: PPUSH
28903: CALL_OW 250
28907: PPUSH
28908: LD_VAR 0 1
28912: PPUSH
28913: CALL_OW 251
28917: PPUSH
28918: LD_INT 10
28920: PPUSH
28921: LD_INT 0
28923: PPUSH
28924: CALL_OW 50
// continue ;
28928: GO 28829
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
28930: LD_VAR 0 12
28934: PUSH
28935: LD_INT 1
28937: ARRAY
28938: PPUSH
28939: CALL_OW 313
28943: PUSH
28944: LD_VAR 0 12
28948: PUSH
28949: LD_INT 1
28951: ARRAY
28952: PPUSH
28953: CALL_OW 266
28957: PUSH
28958: LD_INT 32
28960: PUSH
28961: LD_INT 31
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: IN
28968: AND
28969: PUSH
28970: LD_VAR 0 12
28974: PUSH
28975: LD_INT 1
28977: ARRAY
28978: PPUSH
28979: CALL_OW 313
28983: PUSH
28984: LD_INT 6
28986: EQUAL
28987: OR
28988: IFFALSE 29008
// f := Delete ( f , 1 ) ;
28990: LD_ADDR_VAR 0 12
28994: PUSH
28995: LD_VAR 0 12
28999: PPUSH
29000: LD_INT 1
29002: PPUSH
29003: CALL_OW 3
29007: ST_TO_ADDR
// if not f then
29008: LD_VAR 0 12
29012: NOT
29013: IFFALSE 29031
// begin x := x + 2 ;
29015: LD_ADDR_VAR 0 13
29019: PUSH
29020: LD_VAR 0 13
29024: PUSH
29025: LD_INT 2
29027: PLUS
29028: ST_TO_ADDR
// continue ;
29029: GO 28829
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29031: LD_VAR 0 12
29035: PUSH
29036: LD_INT 1
29038: ARRAY
29039: PPUSH
29040: CALL_OW 266
29044: PUSH
29045: LD_INT 5
29047: EQUAL
29048: IFFALSE 29122
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29050: LD_VAR 0 12
29054: PUSH
29055: LD_INT 1
29057: ARRAY
29058: PPUSH
29059: CALL_OW 313
29063: PUSH
29064: LD_INT 3
29066: LESS
29067: IFFALSE 29103
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29069: LD_INT 0
29071: PPUSH
29072: LD_INT 5
29074: PUSH
29075: LD_INT 8
29077: PUSH
29078: LD_INT 9
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: LIST
29085: PUSH
29086: LD_VAR 0 17
29090: ARRAY
29091: PPUSH
29092: LD_VAR 0 4
29096: PPUSH
29097: CALL_OW 380
29101: GO 29120
// PrepareHuman ( false , i , skill ) ;
29103: LD_INT 0
29105: PPUSH
29106: LD_VAR 0 8
29110: PPUSH
29111: LD_VAR 0 4
29115: PPUSH
29116: CALL_OW 380
// end else
29120: GO 29139
// PrepareHuman ( false , i , skill ) ;
29122: LD_INT 0
29124: PPUSH
29125: LD_VAR 0 8
29129: PPUSH
29130: LD_VAR 0 4
29134: PPUSH
29135: CALL_OW 380
// un := CreateHuman ;
29139: LD_ADDR_VAR 0 14
29143: PUSH
29144: CALL_OW 44
29148: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29149: LD_ADDR_VAR 0 7
29153: PUSH
29154: LD_VAR 0 7
29158: PPUSH
29159: LD_INT 1
29161: PPUSH
29162: LD_VAR 0 14
29166: PPUSH
29167: CALL_OW 2
29171: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29172: LD_VAR 0 14
29176: PPUSH
29177: LD_VAR 0 12
29181: PUSH
29182: LD_INT 1
29184: ARRAY
29185: PPUSH
29186: CALL_OW 52
// end ;
29190: GO 28829
29192: POP
29193: POP
// end ;
29194: GO 28131
29196: POP
29197: POP
// result := result ^ buildings ;
29198: LD_ADDR_VAR 0 7
29202: PUSH
29203: LD_VAR 0 7
29207: PUSH
29208: LD_VAR 0 18
29212: ADD
29213: ST_TO_ADDR
// end else
29214: GO 29357
// begin for i = 1 to personel do
29216: LD_ADDR_VAR 0 8
29220: PUSH
29221: DOUBLE
29222: LD_INT 1
29224: DEC
29225: ST_TO_ADDR
29226: LD_VAR 0 6
29230: PUSH
29231: FOR_TO
29232: IFFALSE 29355
// begin if i > 4 then
29234: LD_VAR 0 8
29238: PUSH
29239: LD_INT 4
29241: GREATER
29242: IFFALSE 29246
// break ;
29244: GO 29355
// x := personel [ i ] ;
29246: LD_ADDR_VAR 0 13
29250: PUSH
29251: LD_VAR 0 6
29255: PUSH
29256: LD_VAR 0 8
29260: ARRAY
29261: ST_TO_ADDR
// if x = - 1 then
29262: LD_VAR 0 13
29266: PUSH
29267: LD_INT 1
29269: NEG
29270: EQUAL
29271: IFFALSE 29275
// continue ;
29273: GO 29231
// PrepareHuman ( false , i , skill ) ;
29275: LD_INT 0
29277: PPUSH
29278: LD_VAR 0 8
29282: PPUSH
29283: LD_VAR 0 4
29287: PPUSH
29288: CALL_OW 380
// un := CreateHuman ;
29292: LD_ADDR_VAR 0 14
29296: PUSH
29297: CALL_OW 44
29301: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29302: LD_VAR 0 14
29306: PPUSH
29307: LD_VAR 0 1
29311: PPUSH
29312: CALL_OW 250
29316: PPUSH
29317: LD_VAR 0 1
29321: PPUSH
29322: CALL_OW 251
29326: PPUSH
29327: LD_INT 10
29329: PPUSH
29330: LD_INT 0
29332: PPUSH
29333: CALL_OW 50
// result := result ^ un ;
29337: LD_ADDR_VAR 0 7
29341: PUSH
29342: LD_VAR 0 7
29346: PUSH
29347: LD_VAR 0 14
29351: ADD
29352: ST_TO_ADDR
// end ;
29353: GO 29231
29355: POP
29356: POP
// end ; end ;
29357: LD_VAR 0 7
29361: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29362: LD_INT 0
29364: PPUSH
29365: PPUSH
29366: PPUSH
29367: PPUSH
29368: PPUSH
29369: PPUSH
29370: PPUSH
29371: PPUSH
29372: PPUSH
29373: PPUSH
29374: PPUSH
29375: PPUSH
29376: PPUSH
29377: PPUSH
29378: PPUSH
29379: PPUSH
// result := false ;
29380: LD_ADDR_VAR 0 3
29384: PUSH
29385: LD_INT 0
29387: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29388: LD_VAR 0 1
29392: NOT
29393: PUSH
29394: LD_VAR 0 1
29398: PPUSH
29399: CALL_OW 266
29403: PUSH
29404: LD_INT 32
29406: PUSH
29407: LD_INT 33
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: IN
29414: NOT
29415: OR
29416: IFFALSE 29420
// exit ;
29418: GO 30529
// nat := GetNation ( tower ) ;
29420: LD_ADDR_VAR 0 12
29424: PUSH
29425: LD_VAR 0 1
29429: PPUSH
29430: CALL_OW 248
29434: ST_TO_ADDR
// side := GetSide ( tower ) ;
29435: LD_ADDR_VAR 0 16
29439: PUSH
29440: LD_VAR 0 1
29444: PPUSH
29445: CALL_OW 255
29449: ST_TO_ADDR
// x := GetX ( tower ) ;
29450: LD_ADDR_VAR 0 10
29454: PUSH
29455: LD_VAR 0 1
29459: PPUSH
29460: CALL_OW 250
29464: ST_TO_ADDR
// y := GetY ( tower ) ;
29465: LD_ADDR_VAR 0 11
29469: PUSH
29470: LD_VAR 0 1
29474: PPUSH
29475: CALL_OW 251
29479: ST_TO_ADDR
// if not x or not y then
29480: LD_VAR 0 10
29484: NOT
29485: PUSH
29486: LD_VAR 0 11
29490: NOT
29491: OR
29492: IFFALSE 29496
// exit ;
29494: GO 30529
// weapon := 0 ;
29496: LD_ADDR_VAR 0 18
29500: PUSH
29501: LD_INT 0
29503: ST_TO_ADDR
// fac_list := [ ] ;
29504: LD_ADDR_VAR 0 17
29508: PUSH
29509: EMPTY
29510: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
29511: LD_ADDR_VAR 0 6
29515: PUSH
29516: LD_VAR 0 1
29520: PPUSH
29521: CALL_OW 274
29525: PPUSH
29526: LD_VAR 0 2
29530: PPUSH
29531: LD_INT 0
29533: PPUSH
29534: CALL 27100 0 3
29538: PPUSH
29539: LD_INT 30
29541: PUSH
29542: LD_INT 3
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PPUSH
29549: CALL_OW 72
29553: ST_TO_ADDR
// if not factories then
29554: LD_VAR 0 6
29558: NOT
29559: IFFALSE 29563
// exit ;
29561: GO 30529
// for i in factories do
29563: LD_ADDR_VAR 0 8
29567: PUSH
29568: LD_VAR 0 6
29572: PUSH
29573: FOR_IN
29574: IFFALSE 29599
// fac_list := fac_list union AvailableWeaponList ( i ) ;
29576: LD_ADDR_VAR 0 17
29580: PUSH
29581: LD_VAR 0 17
29585: PUSH
29586: LD_VAR 0 8
29590: PPUSH
29591: CALL_OW 478
29595: UNION
29596: ST_TO_ADDR
29597: GO 29573
29599: POP
29600: POP
// if not fac_list then
29601: LD_VAR 0 17
29605: NOT
29606: IFFALSE 29610
// exit ;
29608: GO 30529
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
29610: LD_ADDR_VAR 0 5
29614: PUSH
29615: LD_INT 4
29617: PUSH
29618: LD_INT 5
29620: PUSH
29621: LD_INT 9
29623: PUSH
29624: LD_INT 10
29626: PUSH
29627: LD_INT 6
29629: PUSH
29630: LD_INT 7
29632: PUSH
29633: LD_INT 11
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 27
29647: PUSH
29648: LD_INT 28
29650: PUSH
29651: LD_INT 26
29653: PUSH
29654: LD_INT 30
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 43
29665: PUSH
29666: LD_INT 44
29668: PUSH
29669: LD_INT 46
29671: PUSH
29672: LD_INT 45
29674: PUSH
29675: LD_INT 47
29677: PUSH
29678: LD_INT 49
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: LIST
29693: PUSH
29694: LD_VAR 0 12
29698: ARRAY
29699: ST_TO_ADDR
// list := list isect fac_list ;
29700: LD_ADDR_VAR 0 5
29704: PUSH
29705: LD_VAR 0 5
29709: PUSH
29710: LD_VAR 0 17
29714: ISECT
29715: ST_TO_ADDR
// if not list then
29716: LD_VAR 0 5
29720: NOT
29721: IFFALSE 29725
// exit ;
29723: GO 30529
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
29725: LD_VAR 0 12
29729: PUSH
29730: LD_INT 3
29732: EQUAL
29733: PUSH
29734: LD_INT 49
29736: PUSH
29737: LD_VAR 0 5
29741: IN
29742: AND
29743: PUSH
29744: LD_INT 31
29746: PPUSH
29747: LD_VAR 0 16
29751: PPUSH
29752: CALL_OW 321
29756: PUSH
29757: LD_INT 2
29759: EQUAL
29760: AND
29761: IFFALSE 29821
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
29763: LD_INT 22
29765: PUSH
29766: LD_VAR 0 16
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 35
29777: PUSH
29778: LD_INT 49
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 91
29787: PUSH
29788: LD_VAR 0 1
29792: PUSH
29793: LD_INT 10
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: LIST
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: LIST
29805: PPUSH
29806: CALL_OW 69
29810: NOT
29811: IFFALSE 29821
// weapon := ru_time_lapser ;
29813: LD_ADDR_VAR 0 18
29817: PUSH
29818: LD_INT 49
29820: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
29821: LD_VAR 0 12
29825: PUSH
29826: LD_INT 1
29828: PUSH
29829: LD_INT 2
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: IN
29836: PUSH
29837: LD_INT 11
29839: PUSH
29840: LD_VAR 0 5
29844: IN
29845: PUSH
29846: LD_INT 30
29848: PUSH
29849: LD_VAR 0 5
29853: IN
29854: OR
29855: AND
29856: PUSH
29857: LD_INT 6
29859: PPUSH
29860: LD_VAR 0 16
29864: PPUSH
29865: CALL_OW 321
29869: PUSH
29870: LD_INT 2
29872: EQUAL
29873: AND
29874: IFFALSE 30039
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
29876: LD_INT 22
29878: PUSH
29879: LD_VAR 0 16
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 2
29890: PUSH
29891: LD_INT 35
29893: PUSH
29894: LD_INT 11
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: LD_INT 35
29903: PUSH
29904: LD_INT 30
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 91
29918: PUSH
29919: LD_VAR 0 1
29923: PUSH
29924: LD_INT 18
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: LIST
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: LIST
29936: PPUSH
29937: CALL_OW 69
29941: NOT
29942: PUSH
29943: LD_INT 22
29945: PUSH
29946: LD_VAR 0 16
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 2
29957: PUSH
29958: LD_INT 30
29960: PUSH
29961: LD_INT 32
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 30
29970: PUSH
29971: LD_INT 33
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 91
29985: PUSH
29986: LD_VAR 0 1
29990: PUSH
29991: LD_INT 12
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: LIST
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: LIST
30003: PUSH
30004: EMPTY
30005: LIST
30006: PPUSH
30007: CALL_OW 69
30011: PUSH
30012: LD_INT 2
30014: GREATER
30015: AND
30016: IFFALSE 30039
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30018: LD_ADDR_VAR 0 18
30022: PUSH
30023: LD_INT 11
30025: PUSH
30026: LD_INT 30
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: LD_VAR 0 12
30037: ARRAY
30038: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30039: LD_VAR 0 18
30043: NOT
30044: PUSH
30045: LD_INT 40
30047: PPUSH
30048: LD_VAR 0 16
30052: PPUSH
30053: CALL_OW 321
30057: PUSH
30058: LD_INT 2
30060: EQUAL
30061: AND
30062: PUSH
30063: LD_INT 7
30065: PUSH
30066: LD_VAR 0 5
30070: IN
30071: PUSH
30072: LD_INT 28
30074: PUSH
30075: LD_VAR 0 5
30079: IN
30080: OR
30081: PUSH
30082: LD_INT 45
30084: PUSH
30085: LD_VAR 0 5
30089: IN
30090: OR
30091: AND
30092: IFFALSE 30346
// begin hex := GetHexInfo ( x , y ) ;
30094: LD_ADDR_VAR 0 4
30098: PUSH
30099: LD_VAR 0 10
30103: PPUSH
30104: LD_VAR 0 11
30108: PPUSH
30109: CALL_OW 546
30113: ST_TO_ADDR
// if hex [ 1 ] then
30114: LD_VAR 0 4
30118: PUSH
30119: LD_INT 1
30121: ARRAY
30122: IFFALSE 30126
// exit ;
30124: GO 30529
// height := hex [ 2 ] ;
30126: LD_ADDR_VAR 0 15
30130: PUSH
30131: LD_VAR 0 4
30135: PUSH
30136: LD_INT 2
30138: ARRAY
30139: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30140: LD_ADDR_VAR 0 14
30144: PUSH
30145: LD_INT 0
30147: PUSH
30148: LD_INT 2
30150: PUSH
30151: LD_INT 3
30153: PUSH
30154: LD_INT 5
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: ST_TO_ADDR
// for i in tmp do
30163: LD_ADDR_VAR 0 8
30167: PUSH
30168: LD_VAR 0 14
30172: PUSH
30173: FOR_IN
30174: IFFALSE 30344
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30176: LD_ADDR_VAR 0 9
30180: PUSH
30181: LD_VAR 0 10
30185: PPUSH
30186: LD_VAR 0 8
30190: PPUSH
30191: LD_INT 5
30193: PPUSH
30194: CALL_OW 272
30198: PUSH
30199: LD_VAR 0 11
30203: PPUSH
30204: LD_VAR 0 8
30208: PPUSH
30209: LD_INT 5
30211: PPUSH
30212: CALL_OW 273
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30221: LD_VAR 0 9
30225: PUSH
30226: LD_INT 1
30228: ARRAY
30229: PPUSH
30230: LD_VAR 0 9
30234: PUSH
30235: LD_INT 2
30237: ARRAY
30238: PPUSH
30239: CALL_OW 488
30243: IFFALSE 30342
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30245: LD_ADDR_VAR 0 4
30249: PUSH
30250: LD_VAR 0 9
30254: PUSH
30255: LD_INT 1
30257: ARRAY
30258: PPUSH
30259: LD_VAR 0 9
30263: PUSH
30264: LD_INT 2
30266: ARRAY
30267: PPUSH
30268: CALL_OW 546
30272: ST_TO_ADDR
// if hex [ 1 ] then
30273: LD_VAR 0 4
30277: PUSH
30278: LD_INT 1
30280: ARRAY
30281: IFFALSE 30285
// continue ;
30283: GO 30173
// h := hex [ 2 ] ;
30285: LD_ADDR_VAR 0 13
30289: PUSH
30290: LD_VAR 0 4
30294: PUSH
30295: LD_INT 2
30297: ARRAY
30298: ST_TO_ADDR
// if h + 7 < height then
30299: LD_VAR 0 13
30303: PUSH
30304: LD_INT 7
30306: PLUS
30307: PUSH
30308: LD_VAR 0 15
30312: LESS
30313: IFFALSE 30342
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30315: LD_ADDR_VAR 0 18
30319: PUSH
30320: LD_INT 7
30322: PUSH
30323: LD_INT 28
30325: PUSH
30326: LD_INT 45
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: LIST
30333: PUSH
30334: LD_VAR 0 12
30338: ARRAY
30339: ST_TO_ADDR
// break ;
30340: GO 30344
// end ; end ; end ;
30342: GO 30173
30344: POP
30345: POP
// end ; if not weapon then
30346: LD_VAR 0 18
30350: NOT
30351: IFFALSE 30411
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30353: LD_ADDR_VAR 0 5
30357: PUSH
30358: LD_VAR 0 5
30362: PUSH
30363: LD_INT 11
30365: PUSH
30366: LD_INT 30
30368: PUSH
30369: LD_INT 49
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: LIST
30376: DIFF
30377: ST_TO_ADDR
// if not list then
30378: LD_VAR 0 5
30382: NOT
30383: IFFALSE 30387
// exit ;
30385: GO 30529
// weapon := list [ rand ( 1 , list ) ] ;
30387: LD_ADDR_VAR 0 18
30391: PUSH
30392: LD_VAR 0 5
30396: PUSH
30397: LD_INT 1
30399: PPUSH
30400: LD_VAR 0 5
30404: PPUSH
30405: CALL_OW 12
30409: ARRAY
30410: ST_TO_ADDR
// end ; if weapon then
30411: LD_VAR 0 18
30415: IFFALSE 30529
// begin tmp := CostOfWeapon ( weapon ) ;
30417: LD_ADDR_VAR 0 14
30421: PUSH
30422: LD_VAR 0 18
30426: PPUSH
30427: CALL_OW 451
30431: ST_TO_ADDR
// j := GetBase ( tower ) ;
30432: LD_ADDR_VAR 0 9
30436: PUSH
30437: LD_VAR 0 1
30441: PPUSH
30442: CALL_OW 274
30446: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30447: LD_VAR 0 9
30451: PPUSH
30452: LD_INT 1
30454: PPUSH
30455: CALL_OW 275
30459: PUSH
30460: LD_VAR 0 14
30464: PUSH
30465: LD_INT 1
30467: ARRAY
30468: GREATEREQUAL
30469: PUSH
30470: LD_VAR 0 9
30474: PPUSH
30475: LD_INT 2
30477: PPUSH
30478: CALL_OW 275
30482: PUSH
30483: LD_VAR 0 14
30487: PUSH
30488: LD_INT 2
30490: ARRAY
30491: GREATEREQUAL
30492: AND
30493: PUSH
30494: LD_VAR 0 9
30498: PPUSH
30499: LD_INT 3
30501: PPUSH
30502: CALL_OW 275
30506: PUSH
30507: LD_VAR 0 14
30511: PUSH
30512: LD_INT 3
30514: ARRAY
30515: GREATEREQUAL
30516: AND
30517: IFFALSE 30529
// result := weapon ;
30519: LD_ADDR_VAR 0 3
30523: PUSH
30524: LD_VAR 0 18
30528: ST_TO_ADDR
// end ; end ;
30529: LD_VAR 0 3
30533: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
30534: LD_INT 0
30536: PPUSH
30537: PPUSH
// result := true ;
30538: LD_ADDR_VAR 0 3
30542: PUSH
30543: LD_INT 1
30545: ST_TO_ADDR
// if array1 = array2 then
30546: LD_VAR 0 1
30550: PUSH
30551: LD_VAR 0 2
30555: EQUAL
30556: IFFALSE 30616
// begin for i = 1 to array1 do
30558: LD_ADDR_VAR 0 4
30562: PUSH
30563: DOUBLE
30564: LD_INT 1
30566: DEC
30567: ST_TO_ADDR
30568: LD_VAR 0 1
30572: PUSH
30573: FOR_TO
30574: IFFALSE 30612
// if array1 [ i ] <> array2 [ i ] then
30576: LD_VAR 0 1
30580: PUSH
30581: LD_VAR 0 4
30585: ARRAY
30586: PUSH
30587: LD_VAR 0 2
30591: PUSH
30592: LD_VAR 0 4
30596: ARRAY
30597: NONEQUAL
30598: IFFALSE 30610
// begin result := false ;
30600: LD_ADDR_VAR 0 3
30604: PUSH
30605: LD_INT 0
30607: ST_TO_ADDR
// break ;
30608: GO 30612
// end ;
30610: GO 30573
30612: POP
30613: POP
// end else
30614: GO 30624
// result := false ;
30616: LD_ADDR_VAR 0 3
30620: PUSH
30621: LD_INT 0
30623: ST_TO_ADDR
// end ;
30624: LD_VAR 0 3
30628: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
30629: LD_INT 0
30631: PPUSH
30632: PPUSH
// if not array1 or not array2 then
30633: LD_VAR 0 1
30637: NOT
30638: PUSH
30639: LD_VAR 0 2
30643: NOT
30644: OR
30645: IFFALSE 30649
// exit ;
30647: GO 30713
// result := true ;
30649: LD_ADDR_VAR 0 3
30653: PUSH
30654: LD_INT 1
30656: ST_TO_ADDR
// for i = 1 to array1 do
30657: LD_ADDR_VAR 0 4
30661: PUSH
30662: DOUBLE
30663: LD_INT 1
30665: DEC
30666: ST_TO_ADDR
30667: LD_VAR 0 1
30671: PUSH
30672: FOR_TO
30673: IFFALSE 30711
// if array1 [ i ] <> array2 [ i ] then
30675: LD_VAR 0 1
30679: PUSH
30680: LD_VAR 0 4
30684: ARRAY
30685: PUSH
30686: LD_VAR 0 2
30690: PUSH
30691: LD_VAR 0 4
30695: ARRAY
30696: NONEQUAL
30697: IFFALSE 30709
// begin result := false ;
30699: LD_ADDR_VAR 0 3
30703: PUSH
30704: LD_INT 0
30706: ST_TO_ADDR
// break ;
30707: GO 30711
// end ;
30709: GO 30672
30711: POP
30712: POP
// end ;
30713: LD_VAR 0 3
30717: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
30718: LD_INT 0
30720: PPUSH
30721: PPUSH
30722: PPUSH
// pom := GetBase ( fac ) ;
30723: LD_ADDR_VAR 0 5
30727: PUSH
30728: LD_VAR 0 1
30732: PPUSH
30733: CALL_OW 274
30737: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
30738: LD_ADDR_VAR 0 4
30742: PUSH
30743: LD_VAR 0 2
30747: PUSH
30748: LD_INT 1
30750: ARRAY
30751: PPUSH
30752: LD_VAR 0 2
30756: PUSH
30757: LD_INT 2
30759: ARRAY
30760: PPUSH
30761: LD_VAR 0 2
30765: PUSH
30766: LD_INT 3
30768: ARRAY
30769: PPUSH
30770: LD_VAR 0 2
30774: PUSH
30775: LD_INT 4
30777: ARRAY
30778: PPUSH
30779: CALL_OW 449
30783: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30784: LD_ADDR_VAR 0 3
30788: PUSH
30789: LD_VAR 0 5
30793: PPUSH
30794: LD_INT 1
30796: PPUSH
30797: CALL_OW 275
30801: PUSH
30802: LD_VAR 0 4
30806: PUSH
30807: LD_INT 1
30809: ARRAY
30810: GREATEREQUAL
30811: PUSH
30812: LD_VAR 0 5
30816: PPUSH
30817: LD_INT 2
30819: PPUSH
30820: CALL_OW 275
30824: PUSH
30825: LD_VAR 0 4
30829: PUSH
30830: LD_INT 2
30832: ARRAY
30833: GREATEREQUAL
30834: AND
30835: PUSH
30836: LD_VAR 0 5
30840: PPUSH
30841: LD_INT 3
30843: PPUSH
30844: CALL_OW 275
30848: PUSH
30849: LD_VAR 0 4
30853: PUSH
30854: LD_INT 3
30856: ARRAY
30857: GREATEREQUAL
30858: AND
30859: ST_TO_ADDR
// end ;
30860: LD_VAR 0 3
30864: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
30865: LD_INT 0
30867: PPUSH
30868: PPUSH
30869: PPUSH
30870: PPUSH
// pom := GetBase ( building ) ;
30871: LD_ADDR_VAR 0 3
30875: PUSH
30876: LD_VAR 0 1
30880: PPUSH
30881: CALL_OW 274
30885: ST_TO_ADDR
// if not pom then
30886: LD_VAR 0 3
30890: NOT
30891: IFFALSE 30895
// exit ;
30893: GO 31065
// btype := GetBType ( building ) ;
30895: LD_ADDR_VAR 0 5
30899: PUSH
30900: LD_VAR 0 1
30904: PPUSH
30905: CALL_OW 266
30909: ST_TO_ADDR
// if btype = b_armoury then
30910: LD_VAR 0 5
30914: PUSH
30915: LD_INT 4
30917: EQUAL
30918: IFFALSE 30928
// btype := b_barracks ;
30920: LD_ADDR_VAR 0 5
30924: PUSH
30925: LD_INT 5
30927: ST_TO_ADDR
// if btype = b_depot then
30928: LD_VAR 0 5
30932: PUSH
30933: LD_INT 0
30935: EQUAL
30936: IFFALSE 30946
// btype := b_warehouse ;
30938: LD_ADDR_VAR 0 5
30942: PUSH
30943: LD_INT 1
30945: ST_TO_ADDR
// if btype = b_workshop then
30946: LD_VAR 0 5
30950: PUSH
30951: LD_INT 2
30953: EQUAL
30954: IFFALSE 30964
// btype := b_factory ;
30956: LD_ADDR_VAR 0 5
30960: PUSH
30961: LD_INT 3
30963: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30964: LD_ADDR_VAR 0 4
30968: PUSH
30969: LD_VAR 0 5
30973: PPUSH
30974: LD_VAR 0 1
30978: PPUSH
30979: CALL_OW 248
30983: PPUSH
30984: CALL_OW 450
30988: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30989: LD_ADDR_VAR 0 2
30993: PUSH
30994: LD_VAR 0 3
30998: PPUSH
30999: LD_INT 1
31001: PPUSH
31002: CALL_OW 275
31006: PUSH
31007: LD_VAR 0 4
31011: PUSH
31012: LD_INT 1
31014: ARRAY
31015: GREATEREQUAL
31016: PUSH
31017: LD_VAR 0 3
31021: PPUSH
31022: LD_INT 2
31024: PPUSH
31025: CALL_OW 275
31029: PUSH
31030: LD_VAR 0 4
31034: PUSH
31035: LD_INT 2
31037: ARRAY
31038: GREATEREQUAL
31039: AND
31040: PUSH
31041: LD_VAR 0 3
31045: PPUSH
31046: LD_INT 3
31048: PPUSH
31049: CALL_OW 275
31053: PUSH
31054: LD_VAR 0 4
31058: PUSH
31059: LD_INT 3
31061: ARRAY
31062: GREATEREQUAL
31063: AND
31064: ST_TO_ADDR
// end ;
31065: LD_VAR 0 2
31069: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31070: LD_INT 0
31072: PPUSH
31073: PPUSH
31074: PPUSH
// pom := GetBase ( building ) ;
31075: LD_ADDR_VAR 0 4
31079: PUSH
31080: LD_VAR 0 1
31084: PPUSH
31085: CALL_OW 274
31089: ST_TO_ADDR
// if not pom then
31090: LD_VAR 0 4
31094: NOT
31095: IFFALSE 31099
// exit ;
31097: GO 31200
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31099: LD_ADDR_VAR 0 5
31103: PUSH
31104: LD_VAR 0 2
31108: PPUSH
31109: LD_VAR 0 1
31113: PPUSH
31114: CALL_OW 248
31118: PPUSH
31119: CALL_OW 450
31123: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31124: LD_ADDR_VAR 0 3
31128: PUSH
31129: LD_VAR 0 4
31133: PPUSH
31134: LD_INT 1
31136: PPUSH
31137: CALL_OW 275
31141: PUSH
31142: LD_VAR 0 5
31146: PUSH
31147: LD_INT 1
31149: ARRAY
31150: GREATEREQUAL
31151: PUSH
31152: LD_VAR 0 4
31156: PPUSH
31157: LD_INT 2
31159: PPUSH
31160: CALL_OW 275
31164: PUSH
31165: LD_VAR 0 5
31169: PUSH
31170: LD_INT 2
31172: ARRAY
31173: GREATEREQUAL
31174: AND
31175: PUSH
31176: LD_VAR 0 4
31180: PPUSH
31181: LD_INT 3
31183: PPUSH
31184: CALL_OW 275
31188: PUSH
31189: LD_VAR 0 5
31193: PUSH
31194: LD_INT 3
31196: ARRAY
31197: GREATEREQUAL
31198: AND
31199: ST_TO_ADDR
// end ;
31200: LD_VAR 0 3
31204: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
31205: LD_INT 0
31207: PPUSH
31208: PPUSH
31209: PPUSH
31210: PPUSH
31211: PPUSH
31212: PPUSH
31213: PPUSH
31214: PPUSH
31215: PPUSH
31216: PPUSH
31217: PPUSH
// result := false ;
31218: LD_ADDR_VAR 0 8
31222: PUSH
31223: LD_INT 0
31225: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
31226: LD_VAR 0 5
31230: NOT
31231: PUSH
31232: LD_VAR 0 1
31236: NOT
31237: OR
31238: PUSH
31239: LD_VAR 0 2
31243: NOT
31244: OR
31245: PUSH
31246: LD_VAR 0 3
31250: NOT
31251: OR
31252: IFFALSE 31256
// exit ;
31254: GO 32070
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
31256: LD_ADDR_VAR 0 14
31260: PUSH
31261: LD_VAR 0 1
31265: PPUSH
31266: LD_VAR 0 2
31270: PPUSH
31271: LD_VAR 0 3
31275: PPUSH
31276: LD_VAR 0 4
31280: PPUSH
31281: LD_VAR 0 5
31285: PUSH
31286: LD_INT 1
31288: ARRAY
31289: PPUSH
31290: CALL_OW 248
31294: PPUSH
31295: LD_INT 0
31297: PPUSH
31298: CALL 33307 0 6
31302: ST_TO_ADDR
// if not hexes then
31303: LD_VAR 0 14
31307: NOT
31308: IFFALSE 31312
// exit ;
31310: GO 32070
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31312: LD_ADDR_VAR 0 17
31316: PUSH
31317: LD_VAR 0 5
31321: PPUSH
31322: LD_INT 22
31324: PUSH
31325: LD_VAR 0 13
31329: PPUSH
31330: CALL_OW 255
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 2
31341: PUSH
31342: LD_INT 30
31344: PUSH
31345: LD_INT 0
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 30
31354: PUSH
31355: LD_INT 1
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: LIST
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PPUSH
31371: CALL_OW 72
31375: ST_TO_ADDR
// for i = 1 to hexes do
31376: LD_ADDR_VAR 0 9
31380: PUSH
31381: DOUBLE
31382: LD_INT 1
31384: DEC
31385: ST_TO_ADDR
31386: LD_VAR 0 14
31390: PUSH
31391: FOR_TO
31392: IFFALSE 32068
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31394: LD_ADDR_VAR 0 13
31398: PUSH
31399: LD_VAR 0 14
31403: PUSH
31404: LD_VAR 0 9
31408: ARRAY
31409: PUSH
31410: LD_INT 1
31412: ARRAY
31413: PPUSH
31414: LD_VAR 0 14
31418: PUSH
31419: LD_VAR 0 9
31423: ARRAY
31424: PUSH
31425: LD_INT 2
31427: ARRAY
31428: PPUSH
31429: CALL_OW 428
31433: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31434: LD_VAR 0 14
31438: PUSH
31439: LD_VAR 0 9
31443: ARRAY
31444: PUSH
31445: LD_INT 1
31447: ARRAY
31448: PPUSH
31449: LD_VAR 0 14
31453: PUSH
31454: LD_VAR 0 9
31458: ARRAY
31459: PUSH
31460: LD_INT 2
31462: ARRAY
31463: PPUSH
31464: CALL_OW 351
31468: PUSH
31469: LD_VAR 0 14
31473: PUSH
31474: LD_VAR 0 9
31478: ARRAY
31479: PUSH
31480: LD_INT 1
31482: ARRAY
31483: PPUSH
31484: LD_VAR 0 14
31488: PUSH
31489: LD_VAR 0 9
31493: ARRAY
31494: PUSH
31495: LD_INT 2
31497: ARRAY
31498: PPUSH
31499: CALL_OW 488
31503: NOT
31504: OR
31505: PUSH
31506: LD_VAR 0 13
31510: PPUSH
31511: CALL_OW 247
31515: PUSH
31516: LD_INT 3
31518: EQUAL
31519: OR
31520: IFFALSE 31526
// exit ;
31522: POP
31523: POP
31524: GO 32070
// if not tmp then
31526: LD_VAR 0 13
31530: NOT
31531: IFFALSE 31535
// continue ;
31533: GO 31391
// result := true ;
31535: LD_ADDR_VAR 0 8
31539: PUSH
31540: LD_INT 1
31542: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
31543: LD_VAR 0 6
31547: PUSH
31548: LD_VAR 0 13
31552: PPUSH
31553: CALL_OW 247
31557: PUSH
31558: LD_INT 2
31560: EQUAL
31561: AND
31562: PUSH
31563: LD_VAR 0 13
31567: PPUSH
31568: CALL_OW 263
31572: PUSH
31573: LD_INT 1
31575: EQUAL
31576: AND
31577: IFFALSE 31741
// begin if IsDrivenBy ( tmp ) then
31579: LD_VAR 0 13
31583: PPUSH
31584: CALL_OW 311
31588: IFFALSE 31592
// continue ;
31590: GO 31391
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
31592: LD_VAR 0 6
31596: PPUSH
31597: LD_INT 3
31599: PUSH
31600: LD_INT 60
31602: PUSH
31603: EMPTY
31604: LIST
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 3
31612: PUSH
31613: LD_INT 55
31615: PUSH
31616: EMPTY
31617: LIST
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PPUSH
31627: CALL_OW 72
31631: IFFALSE 31739
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
31633: LD_ADDR_VAR 0 18
31637: PUSH
31638: LD_VAR 0 6
31642: PPUSH
31643: LD_INT 3
31645: PUSH
31646: LD_INT 60
31648: PUSH
31649: EMPTY
31650: LIST
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 3
31658: PUSH
31659: LD_INT 55
31661: PUSH
31662: EMPTY
31663: LIST
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PPUSH
31673: CALL_OW 72
31677: PUSH
31678: LD_INT 1
31680: ARRAY
31681: ST_TO_ADDR
// if IsInUnit ( driver ) then
31682: LD_VAR 0 18
31686: PPUSH
31687: CALL_OW 310
31691: IFFALSE 31702
// ComExit ( driver ) ;
31693: LD_VAR 0 18
31697: PPUSH
31698: CALL 56491 0 1
// AddComEnterUnit ( driver , tmp ) ;
31702: LD_VAR 0 18
31706: PPUSH
31707: LD_VAR 0 13
31711: PPUSH
31712: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
31716: LD_VAR 0 18
31720: PPUSH
31721: LD_VAR 0 7
31725: PPUSH
31726: CALL_OW 173
// AddComExitVehicle ( driver ) ;
31730: LD_VAR 0 18
31734: PPUSH
31735: CALL_OW 181
// end ; continue ;
31739: GO 31391
// end ; if not cleaners or not tmp in cleaners then
31741: LD_VAR 0 6
31745: NOT
31746: PUSH
31747: LD_VAR 0 13
31751: PUSH
31752: LD_VAR 0 6
31756: IN
31757: NOT
31758: OR
31759: IFFALSE 32066
// begin if dep then
31761: LD_VAR 0 17
31765: IFFALSE 31901
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
31767: LD_ADDR_VAR 0 16
31771: PUSH
31772: LD_VAR 0 17
31776: PUSH
31777: LD_INT 1
31779: ARRAY
31780: PPUSH
31781: CALL_OW 250
31785: PPUSH
31786: LD_VAR 0 17
31790: PUSH
31791: LD_INT 1
31793: ARRAY
31794: PPUSH
31795: CALL_OW 254
31799: PPUSH
31800: LD_INT 5
31802: PPUSH
31803: CALL_OW 272
31807: PUSH
31808: LD_VAR 0 17
31812: PUSH
31813: LD_INT 1
31815: ARRAY
31816: PPUSH
31817: CALL_OW 251
31821: PPUSH
31822: LD_VAR 0 17
31826: PUSH
31827: LD_INT 1
31829: ARRAY
31830: PPUSH
31831: CALL_OW 254
31835: PPUSH
31836: LD_INT 5
31838: PPUSH
31839: CALL_OW 273
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
31848: LD_VAR 0 16
31852: PUSH
31853: LD_INT 1
31855: ARRAY
31856: PPUSH
31857: LD_VAR 0 16
31861: PUSH
31862: LD_INT 2
31864: ARRAY
31865: PPUSH
31866: CALL_OW 488
31870: IFFALSE 31901
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
31872: LD_VAR 0 13
31876: PPUSH
31877: LD_VAR 0 16
31881: PUSH
31882: LD_INT 1
31884: ARRAY
31885: PPUSH
31886: LD_VAR 0 16
31890: PUSH
31891: LD_INT 2
31893: ARRAY
31894: PPUSH
31895: CALL_OW 111
// continue ;
31899: GO 31391
// end ; end ; r := GetDir ( tmp ) ;
31901: LD_ADDR_VAR 0 15
31905: PUSH
31906: LD_VAR 0 13
31910: PPUSH
31911: CALL_OW 254
31915: ST_TO_ADDR
// if r = 5 then
31916: LD_VAR 0 15
31920: PUSH
31921: LD_INT 5
31923: EQUAL
31924: IFFALSE 31934
// r := 0 ;
31926: LD_ADDR_VAR 0 15
31930: PUSH
31931: LD_INT 0
31933: ST_TO_ADDR
// for j = r to 5 do
31934: LD_ADDR_VAR 0 10
31938: PUSH
31939: DOUBLE
31940: LD_VAR 0 15
31944: DEC
31945: ST_TO_ADDR
31946: LD_INT 5
31948: PUSH
31949: FOR_TO
31950: IFFALSE 32064
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
31952: LD_ADDR_VAR 0 11
31956: PUSH
31957: LD_VAR 0 13
31961: PPUSH
31962: CALL_OW 250
31966: PPUSH
31967: LD_VAR 0 10
31971: PPUSH
31972: LD_INT 2
31974: PPUSH
31975: CALL_OW 272
31979: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
31980: LD_ADDR_VAR 0 12
31984: PUSH
31985: LD_VAR 0 13
31989: PPUSH
31990: CALL_OW 251
31994: PPUSH
31995: LD_VAR 0 10
31999: PPUSH
32000: LD_INT 2
32002: PPUSH
32003: CALL_OW 273
32007: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32008: LD_VAR 0 11
32012: PPUSH
32013: LD_VAR 0 12
32017: PPUSH
32018: CALL_OW 488
32022: PUSH
32023: LD_VAR 0 11
32027: PPUSH
32028: LD_VAR 0 12
32032: PPUSH
32033: CALL_OW 428
32037: NOT
32038: AND
32039: IFFALSE 32062
// begin ComMoveXY ( tmp , _x , _y ) ;
32041: LD_VAR 0 13
32045: PPUSH
32046: LD_VAR 0 11
32050: PPUSH
32051: LD_VAR 0 12
32055: PPUSH
32056: CALL_OW 111
// break ;
32060: GO 32064
// end ; end ;
32062: GO 31949
32064: POP
32065: POP
// end ; end ;
32066: GO 31391
32068: POP
32069: POP
// end ;
32070: LD_VAR 0 8
32074: RET
// export function BuildingTechInvented ( side , btype ) ; begin
32075: LD_INT 0
32077: PPUSH
// result := true ;
32078: LD_ADDR_VAR 0 3
32082: PUSH
32083: LD_INT 1
32085: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
32086: LD_VAR 0 2
32090: PUSH
32091: LD_INT 24
32093: DOUBLE
32094: EQUAL
32095: IFTRUE 32105
32097: LD_INT 33
32099: DOUBLE
32100: EQUAL
32101: IFTRUE 32105
32103: GO 32130
32105: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
32106: LD_ADDR_VAR 0 3
32110: PUSH
32111: LD_INT 32
32113: PPUSH
32114: LD_VAR 0 1
32118: PPUSH
32119: CALL_OW 321
32123: PUSH
32124: LD_INT 2
32126: EQUAL
32127: ST_TO_ADDR
32128: GO 32450
32130: LD_INT 20
32132: DOUBLE
32133: EQUAL
32134: IFTRUE 32138
32136: GO 32163
32138: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
32139: LD_ADDR_VAR 0 3
32143: PUSH
32144: LD_INT 6
32146: PPUSH
32147: LD_VAR 0 1
32151: PPUSH
32152: CALL_OW 321
32156: PUSH
32157: LD_INT 2
32159: EQUAL
32160: ST_TO_ADDR
32161: GO 32450
32163: LD_INT 22
32165: DOUBLE
32166: EQUAL
32167: IFTRUE 32177
32169: LD_INT 36
32171: DOUBLE
32172: EQUAL
32173: IFTRUE 32177
32175: GO 32202
32177: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
32178: LD_ADDR_VAR 0 3
32182: PUSH
32183: LD_INT 15
32185: PPUSH
32186: LD_VAR 0 1
32190: PPUSH
32191: CALL_OW 321
32195: PUSH
32196: LD_INT 2
32198: EQUAL
32199: ST_TO_ADDR
32200: GO 32450
32202: LD_INT 30
32204: DOUBLE
32205: EQUAL
32206: IFTRUE 32210
32208: GO 32235
32210: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
32211: LD_ADDR_VAR 0 3
32215: PUSH
32216: LD_INT 20
32218: PPUSH
32219: LD_VAR 0 1
32223: PPUSH
32224: CALL_OW 321
32228: PUSH
32229: LD_INT 2
32231: EQUAL
32232: ST_TO_ADDR
32233: GO 32450
32235: LD_INT 28
32237: DOUBLE
32238: EQUAL
32239: IFTRUE 32249
32241: LD_INT 21
32243: DOUBLE
32244: EQUAL
32245: IFTRUE 32249
32247: GO 32274
32249: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
32250: LD_ADDR_VAR 0 3
32254: PUSH
32255: LD_INT 21
32257: PPUSH
32258: LD_VAR 0 1
32262: PPUSH
32263: CALL_OW 321
32267: PUSH
32268: LD_INT 2
32270: EQUAL
32271: ST_TO_ADDR
32272: GO 32450
32274: LD_INT 16
32276: DOUBLE
32277: EQUAL
32278: IFTRUE 32282
32280: GO 32309
32282: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
32283: LD_ADDR_VAR 0 3
32287: PUSH
32288: LD_EXP 82
32292: PPUSH
32293: LD_VAR 0 1
32297: PPUSH
32298: CALL_OW 321
32302: PUSH
32303: LD_INT 2
32305: EQUAL
32306: ST_TO_ADDR
32307: GO 32450
32309: LD_INT 19
32311: DOUBLE
32312: EQUAL
32313: IFTRUE 32323
32315: LD_INT 23
32317: DOUBLE
32318: EQUAL
32319: IFTRUE 32323
32321: GO 32350
32323: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
32324: LD_ADDR_VAR 0 3
32328: PUSH
32329: LD_EXP 81
32333: PPUSH
32334: LD_VAR 0 1
32338: PPUSH
32339: CALL_OW 321
32343: PUSH
32344: LD_INT 2
32346: EQUAL
32347: ST_TO_ADDR
32348: GO 32450
32350: LD_INT 17
32352: DOUBLE
32353: EQUAL
32354: IFTRUE 32358
32356: GO 32383
32358: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
32359: LD_ADDR_VAR 0 3
32363: PUSH
32364: LD_INT 39
32366: PPUSH
32367: LD_VAR 0 1
32371: PPUSH
32372: CALL_OW 321
32376: PUSH
32377: LD_INT 2
32379: EQUAL
32380: ST_TO_ADDR
32381: GO 32450
32383: LD_INT 18
32385: DOUBLE
32386: EQUAL
32387: IFTRUE 32391
32389: GO 32416
32391: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
32392: LD_ADDR_VAR 0 3
32396: PUSH
32397: LD_INT 40
32399: PPUSH
32400: LD_VAR 0 1
32404: PPUSH
32405: CALL_OW 321
32409: PUSH
32410: LD_INT 2
32412: EQUAL
32413: ST_TO_ADDR
32414: GO 32450
32416: LD_INT 27
32418: DOUBLE
32419: EQUAL
32420: IFTRUE 32424
32422: GO 32449
32424: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
32425: LD_ADDR_VAR 0 3
32429: PUSH
32430: LD_INT 35
32432: PPUSH
32433: LD_VAR 0 1
32437: PPUSH
32438: CALL_OW 321
32442: PUSH
32443: LD_INT 2
32445: EQUAL
32446: ST_TO_ADDR
32447: GO 32450
32449: POP
// end ;
32450: LD_VAR 0 3
32454: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
32455: LD_INT 0
32457: PPUSH
32458: PPUSH
32459: PPUSH
32460: PPUSH
32461: PPUSH
32462: PPUSH
32463: PPUSH
32464: PPUSH
32465: PPUSH
32466: PPUSH
32467: PPUSH
// result := false ;
32468: LD_ADDR_VAR 0 6
32472: PUSH
32473: LD_INT 0
32475: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
32476: LD_VAR 0 1
32480: NOT
32481: PUSH
32482: LD_VAR 0 1
32486: PPUSH
32487: CALL_OW 266
32491: PUSH
32492: LD_INT 0
32494: PUSH
32495: LD_INT 1
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: IN
32502: NOT
32503: OR
32504: PUSH
32505: LD_VAR 0 2
32509: NOT
32510: OR
32511: PUSH
32512: LD_VAR 0 5
32516: PUSH
32517: LD_INT 0
32519: PUSH
32520: LD_INT 1
32522: PUSH
32523: LD_INT 2
32525: PUSH
32526: LD_INT 3
32528: PUSH
32529: LD_INT 4
32531: PUSH
32532: LD_INT 5
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: IN
32543: NOT
32544: OR
32545: PUSH
32546: LD_VAR 0 3
32550: PPUSH
32551: LD_VAR 0 4
32555: PPUSH
32556: CALL_OW 488
32560: NOT
32561: OR
32562: IFFALSE 32566
// exit ;
32564: GO 33302
// side := GetSide ( depot ) ;
32566: LD_ADDR_VAR 0 9
32570: PUSH
32571: LD_VAR 0 1
32575: PPUSH
32576: CALL_OW 255
32580: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
32581: LD_VAR 0 9
32585: PPUSH
32586: LD_VAR 0 2
32590: PPUSH
32591: CALL 32075 0 2
32595: NOT
32596: IFFALSE 32600
// exit ;
32598: GO 33302
// pom := GetBase ( depot ) ;
32600: LD_ADDR_VAR 0 10
32604: PUSH
32605: LD_VAR 0 1
32609: PPUSH
32610: CALL_OW 274
32614: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
32615: LD_ADDR_VAR 0 11
32619: PUSH
32620: LD_VAR 0 2
32624: PPUSH
32625: LD_VAR 0 1
32629: PPUSH
32630: CALL_OW 248
32634: PPUSH
32635: CALL_OW 450
32639: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
32640: LD_VAR 0 10
32644: PPUSH
32645: LD_INT 1
32647: PPUSH
32648: CALL_OW 275
32652: PUSH
32653: LD_VAR 0 11
32657: PUSH
32658: LD_INT 1
32660: ARRAY
32661: GREATEREQUAL
32662: PUSH
32663: LD_VAR 0 10
32667: PPUSH
32668: LD_INT 2
32670: PPUSH
32671: CALL_OW 275
32675: PUSH
32676: LD_VAR 0 11
32680: PUSH
32681: LD_INT 2
32683: ARRAY
32684: GREATEREQUAL
32685: AND
32686: PUSH
32687: LD_VAR 0 10
32691: PPUSH
32692: LD_INT 3
32694: PPUSH
32695: CALL_OW 275
32699: PUSH
32700: LD_VAR 0 11
32704: PUSH
32705: LD_INT 3
32707: ARRAY
32708: GREATEREQUAL
32709: AND
32710: NOT
32711: IFFALSE 32715
// exit ;
32713: GO 33302
// if GetBType ( depot ) = b_depot then
32715: LD_VAR 0 1
32719: PPUSH
32720: CALL_OW 266
32724: PUSH
32725: LD_INT 0
32727: EQUAL
32728: IFFALSE 32740
// dist := 28 else
32730: LD_ADDR_VAR 0 14
32734: PUSH
32735: LD_INT 28
32737: ST_TO_ADDR
32738: GO 32748
// dist := 36 ;
32740: LD_ADDR_VAR 0 14
32744: PUSH
32745: LD_INT 36
32747: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
32748: LD_VAR 0 1
32752: PPUSH
32753: LD_VAR 0 3
32757: PPUSH
32758: LD_VAR 0 4
32762: PPUSH
32763: CALL_OW 297
32767: PUSH
32768: LD_VAR 0 14
32772: GREATER
32773: IFFALSE 32777
// exit ;
32775: GO 33302
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
32777: LD_ADDR_VAR 0 12
32781: PUSH
32782: LD_VAR 0 2
32786: PPUSH
32787: LD_VAR 0 3
32791: PPUSH
32792: LD_VAR 0 4
32796: PPUSH
32797: LD_VAR 0 5
32801: PPUSH
32802: LD_VAR 0 1
32806: PPUSH
32807: CALL_OW 248
32811: PPUSH
32812: LD_INT 0
32814: PPUSH
32815: CALL 33307 0 6
32819: ST_TO_ADDR
// if not hexes then
32820: LD_VAR 0 12
32824: NOT
32825: IFFALSE 32829
// exit ;
32827: GO 33302
// hex := GetHexInfo ( x , y ) ;
32829: LD_ADDR_VAR 0 15
32833: PUSH
32834: LD_VAR 0 3
32838: PPUSH
32839: LD_VAR 0 4
32843: PPUSH
32844: CALL_OW 546
32848: ST_TO_ADDR
// if hex [ 1 ] then
32849: LD_VAR 0 15
32853: PUSH
32854: LD_INT 1
32856: ARRAY
32857: IFFALSE 32861
// exit ;
32859: GO 33302
// height := hex [ 2 ] ;
32861: LD_ADDR_VAR 0 13
32865: PUSH
32866: LD_VAR 0 15
32870: PUSH
32871: LD_INT 2
32873: ARRAY
32874: ST_TO_ADDR
// for i = 1 to hexes do
32875: LD_ADDR_VAR 0 7
32879: PUSH
32880: DOUBLE
32881: LD_INT 1
32883: DEC
32884: ST_TO_ADDR
32885: LD_VAR 0 12
32889: PUSH
32890: FOR_TO
32891: IFFALSE 33221
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
32893: LD_VAR 0 12
32897: PUSH
32898: LD_VAR 0 7
32902: ARRAY
32903: PUSH
32904: LD_INT 1
32906: ARRAY
32907: PPUSH
32908: LD_VAR 0 12
32912: PUSH
32913: LD_VAR 0 7
32917: ARRAY
32918: PUSH
32919: LD_INT 2
32921: ARRAY
32922: PPUSH
32923: CALL_OW 488
32927: NOT
32928: PUSH
32929: LD_VAR 0 12
32933: PUSH
32934: LD_VAR 0 7
32938: ARRAY
32939: PUSH
32940: LD_INT 1
32942: ARRAY
32943: PPUSH
32944: LD_VAR 0 12
32948: PUSH
32949: LD_VAR 0 7
32953: ARRAY
32954: PUSH
32955: LD_INT 2
32957: ARRAY
32958: PPUSH
32959: CALL_OW 428
32963: PUSH
32964: LD_INT 0
32966: GREATER
32967: OR
32968: PUSH
32969: LD_VAR 0 12
32973: PUSH
32974: LD_VAR 0 7
32978: ARRAY
32979: PUSH
32980: LD_INT 1
32982: ARRAY
32983: PPUSH
32984: LD_VAR 0 12
32988: PUSH
32989: LD_VAR 0 7
32993: ARRAY
32994: PUSH
32995: LD_INT 2
32997: ARRAY
32998: PPUSH
32999: CALL_OW 351
33003: OR
33004: IFFALSE 33010
// exit ;
33006: POP
33007: POP
33008: GO 33302
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33010: LD_ADDR_VAR 0 8
33014: PUSH
33015: LD_VAR 0 12
33019: PUSH
33020: LD_VAR 0 7
33024: ARRAY
33025: PUSH
33026: LD_INT 1
33028: ARRAY
33029: PPUSH
33030: LD_VAR 0 12
33034: PUSH
33035: LD_VAR 0 7
33039: ARRAY
33040: PUSH
33041: LD_INT 2
33043: ARRAY
33044: PPUSH
33045: CALL_OW 546
33049: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33050: LD_VAR 0 8
33054: PUSH
33055: LD_INT 1
33057: ARRAY
33058: PUSH
33059: LD_VAR 0 8
33063: PUSH
33064: LD_INT 2
33066: ARRAY
33067: PUSH
33068: LD_VAR 0 13
33072: PUSH
33073: LD_INT 2
33075: PLUS
33076: GREATER
33077: OR
33078: PUSH
33079: LD_VAR 0 8
33083: PUSH
33084: LD_INT 2
33086: ARRAY
33087: PUSH
33088: LD_VAR 0 13
33092: PUSH
33093: LD_INT 2
33095: MINUS
33096: LESS
33097: OR
33098: PUSH
33099: LD_VAR 0 8
33103: PUSH
33104: LD_INT 3
33106: ARRAY
33107: PUSH
33108: LD_INT 0
33110: PUSH
33111: LD_INT 8
33113: PUSH
33114: LD_INT 9
33116: PUSH
33117: LD_INT 10
33119: PUSH
33120: LD_INT 11
33122: PUSH
33123: LD_INT 12
33125: PUSH
33126: LD_INT 13
33128: PUSH
33129: LD_INT 16
33131: PUSH
33132: LD_INT 17
33134: PUSH
33135: LD_INT 18
33137: PUSH
33138: LD_INT 19
33140: PUSH
33141: LD_INT 20
33143: PUSH
33144: LD_INT 21
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: IN
33162: NOT
33163: OR
33164: PUSH
33165: LD_VAR 0 8
33169: PUSH
33170: LD_INT 5
33172: ARRAY
33173: NOT
33174: OR
33175: PUSH
33176: LD_VAR 0 8
33180: PUSH
33181: LD_INT 6
33183: ARRAY
33184: PUSH
33185: LD_INT 1
33187: PUSH
33188: LD_INT 2
33190: PUSH
33191: LD_INT 7
33193: PUSH
33194: LD_INT 9
33196: PUSH
33197: LD_INT 10
33199: PUSH
33200: LD_INT 11
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: IN
33211: NOT
33212: OR
33213: IFFALSE 33219
// exit ;
33215: POP
33216: POP
33217: GO 33302
// end ;
33219: GO 32890
33221: POP
33222: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33223: LD_VAR 0 9
33227: PPUSH
33228: LD_VAR 0 3
33232: PPUSH
33233: LD_VAR 0 4
33237: PPUSH
33238: LD_INT 20
33240: PPUSH
33241: CALL 25248 0 4
33245: PUSH
33246: LD_INT 4
33248: ARRAY
33249: IFFALSE 33253
// exit ;
33251: GO 33302
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33253: LD_VAR 0 2
33257: PUSH
33258: LD_INT 29
33260: PUSH
33261: LD_INT 30
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: IN
33268: PUSH
33269: LD_VAR 0 3
33273: PPUSH
33274: LD_VAR 0 4
33278: PPUSH
33279: LD_VAR 0 9
33283: PPUSH
33284: CALL_OW 440
33288: NOT
33289: AND
33290: IFFALSE 33294
// exit ;
33292: GO 33302
// result := true ;
33294: LD_ADDR_VAR 0 6
33298: PUSH
33299: LD_INT 1
33301: ST_TO_ADDR
// end ;
33302: LD_VAR 0 6
33306: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
33307: LD_INT 0
33309: PPUSH
33310: PPUSH
33311: PPUSH
33312: PPUSH
33313: PPUSH
33314: PPUSH
33315: PPUSH
33316: PPUSH
33317: PPUSH
33318: PPUSH
33319: PPUSH
33320: PPUSH
33321: PPUSH
33322: PPUSH
33323: PPUSH
33324: PPUSH
33325: PPUSH
33326: PPUSH
33327: PPUSH
33328: PPUSH
33329: PPUSH
33330: PPUSH
33331: PPUSH
33332: PPUSH
33333: PPUSH
33334: PPUSH
33335: PPUSH
33336: PPUSH
33337: PPUSH
33338: PPUSH
33339: PPUSH
33340: PPUSH
33341: PPUSH
33342: PPUSH
33343: PPUSH
33344: PPUSH
33345: PPUSH
33346: PPUSH
33347: PPUSH
33348: PPUSH
33349: PPUSH
33350: PPUSH
33351: PPUSH
33352: PPUSH
33353: PPUSH
33354: PPUSH
33355: PPUSH
33356: PPUSH
33357: PPUSH
33358: PPUSH
33359: PPUSH
33360: PPUSH
33361: PPUSH
33362: PPUSH
33363: PPUSH
33364: PPUSH
33365: PPUSH
33366: PPUSH
// result = [ ] ;
33367: LD_ADDR_VAR 0 7
33371: PUSH
33372: EMPTY
33373: ST_TO_ADDR
// temp_list = [ ] ;
33374: LD_ADDR_VAR 0 9
33378: PUSH
33379: EMPTY
33380: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
33381: LD_VAR 0 4
33385: PUSH
33386: LD_INT 0
33388: PUSH
33389: LD_INT 1
33391: PUSH
33392: LD_INT 2
33394: PUSH
33395: LD_INT 3
33397: PUSH
33398: LD_INT 4
33400: PUSH
33401: LD_INT 5
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: IN
33412: NOT
33413: PUSH
33414: LD_VAR 0 1
33418: PUSH
33419: LD_INT 0
33421: PUSH
33422: LD_INT 1
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: IN
33429: PUSH
33430: LD_VAR 0 5
33434: PUSH
33435: LD_INT 1
33437: PUSH
33438: LD_INT 2
33440: PUSH
33441: LD_INT 3
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: LIST
33448: IN
33449: NOT
33450: AND
33451: OR
33452: IFFALSE 33456
// exit ;
33454: GO 51847
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
33456: LD_VAR 0 1
33460: PUSH
33461: LD_INT 6
33463: PUSH
33464: LD_INT 7
33466: PUSH
33467: LD_INT 8
33469: PUSH
33470: LD_INT 13
33472: PUSH
33473: LD_INT 12
33475: PUSH
33476: LD_INT 15
33478: PUSH
33479: LD_INT 11
33481: PUSH
33482: LD_INT 14
33484: PUSH
33485: LD_INT 10
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: IN
33499: IFFALSE 33509
// btype = b_lab ;
33501: LD_ADDR_VAR 0 1
33505: PUSH
33506: LD_INT 6
33508: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
33509: LD_VAR 0 6
33513: PUSH
33514: LD_INT 0
33516: PUSH
33517: LD_INT 1
33519: PUSH
33520: LD_INT 2
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: LIST
33527: IN
33528: NOT
33529: PUSH
33530: LD_VAR 0 1
33534: PUSH
33535: LD_INT 0
33537: PUSH
33538: LD_INT 1
33540: PUSH
33541: LD_INT 2
33543: PUSH
33544: LD_INT 3
33546: PUSH
33547: LD_INT 6
33549: PUSH
33550: LD_INT 36
33552: PUSH
33553: LD_INT 4
33555: PUSH
33556: LD_INT 5
33558: PUSH
33559: LD_INT 31
33561: PUSH
33562: LD_INT 32
33564: PUSH
33565: LD_INT 33
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: IN
33581: NOT
33582: PUSH
33583: LD_VAR 0 6
33587: PUSH
33588: LD_INT 1
33590: EQUAL
33591: AND
33592: OR
33593: PUSH
33594: LD_VAR 0 1
33598: PUSH
33599: LD_INT 2
33601: PUSH
33602: LD_INT 3
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: IN
33609: NOT
33610: PUSH
33611: LD_VAR 0 6
33615: PUSH
33616: LD_INT 2
33618: EQUAL
33619: AND
33620: OR
33621: IFFALSE 33631
// mode = 0 ;
33623: LD_ADDR_VAR 0 6
33627: PUSH
33628: LD_INT 0
33630: ST_TO_ADDR
// case mode of 0 :
33631: LD_VAR 0 6
33635: PUSH
33636: LD_INT 0
33638: DOUBLE
33639: EQUAL
33640: IFTRUE 33644
33642: GO 45097
33644: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33645: LD_ADDR_VAR 0 11
33649: PUSH
33650: LD_INT 0
33652: PUSH
33653: LD_INT 0
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 0
33662: PUSH
33663: LD_INT 1
33665: NEG
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 1
33673: PUSH
33674: LD_INT 0
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 1
33683: PUSH
33684: LD_INT 1
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 0
33693: PUSH
33694: LD_INT 1
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 1
33703: NEG
33704: PUSH
33705: LD_INT 0
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 1
33714: NEG
33715: PUSH
33716: LD_INT 1
33718: NEG
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 1
33726: NEG
33727: PUSH
33728: LD_INT 2
33730: NEG
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 0
33738: PUSH
33739: LD_INT 2
33741: NEG
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 1
33749: PUSH
33750: LD_INT 1
33752: NEG
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 1
33760: PUSH
33761: LD_INT 2
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 0
33770: PUSH
33771: LD_INT 2
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 1
33780: NEG
33781: PUSH
33782: LD_INT 1
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 1
33791: PUSH
33792: LD_INT 3
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 0
33801: PUSH
33802: LD_INT 3
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 1
33811: NEG
33812: PUSH
33813: LD_INT 2
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33838: LD_ADDR_VAR 0 12
33842: PUSH
33843: LD_INT 0
33845: PUSH
33846: LD_INT 0
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 0
33855: PUSH
33856: LD_INT 1
33858: NEG
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 1
33866: PUSH
33867: LD_INT 0
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 1
33876: PUSH
33877: LD_INT 1
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 0
33886: PUSH
33887: LD_INT 1
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 1
33896: NEG
33897: PUSH
33898: LD_INT 0
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: LD_INT 1
33907: NEG
33908: PUSH
33909: LD_INT 1
33911: NEG
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 1
33919: PUSH
33920: LD_INT 1
33922: NEG
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 2
33930: PUSH
33931: LD_INT 0
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 2
33940: PUSH
33941: LD_INT 1
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 1
33950: NEG
33951: PUSH
33952: LD_INT 1
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 2
33961: NEG
33962: PUSH
33963: LD_INT 0
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 2
33972: NEG
33973: PUSH
33974: LD_INT 1
33976: NEG
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 2
33984: NEG
33985: PUSH
33986: LD_INT 1
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 3
33995: NEG
33996: PUSH
33997: LD_INT 0
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 3
34006: NEG
34007: PUSH
34008: LD_INT 1
34010: NEG
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34034: LD_ADDR_VAR 0 13
34038: PUSH
34039: LD_INT 0
34041: PUSH
34042: LD_INT 0
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 0
34051: PUSH
34052: LD_INT 1
34054: NEG
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 1
34062: PUSH
34063: LD_INT 0
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 1
34072: PUSH
34073: LD_INT 1
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 0
34082: PUSH
34083: LD_INT 1
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 1
34092: NEG
34093: PUSH
34094: LD_INT 0
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 1
34103: NEG
34104: PUSH
34105: LD_INT 1
34107: NEG
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 1
34115: NEG
34116: PUSH
34117: LD_INT 2
34119: NEG
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 2
34127: PUSH
34128: LD_INT 1
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 2
34137: PUSH
34138: LD_INT 2
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 1
34147: PUSH
34148: LD_INT 2
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 2
34157: NEG
34158: PUSH
34159: LD_INT 1
34161: NEG
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 2
34169: NEG
34170: PUSH
34171: LD_INT 2
34173: NEG
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 2
34181: NEG
34182: PUSH
34183: LD_INT 3
34185: NEG
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 3
34193: NEG
34194: PUSH
34195: LD_INT 2
34197: NEG
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 3
34205: NEG
34206: PUSH
34207: LD_INT 3
34209: NEG
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34233: LD_ADDR_VAR 0 14
34237: PUSH
34238: LD_INT 0
34240: PUSH
34241: LD_INT 0
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 0
34250: PUSH
34251: LD_INT 1
34253: NEG
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 1
34261: PUSH
34262: LD_INT 0
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 1
34271: PUSH
34272: LD_INT 1
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 0
34281: PUSH
34282: LD_INT 1
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 1
34291: NEG
34292: PUSH
34293: LD_INT 0
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 1
34302: NEG
34303: PUSH
34304: LD_INT 1
34306: NEG
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 1
34314: NEG
34315: PUSH
34316: LD_INT 2
34318: NEG
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 0
34326: PUSH
34327: LD_INT 2
34329: NEG
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 1
34337: PUSH
34338: LD_INT 1
34340: NEG
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 1
34348: PUSH
34349: LD_INT 2
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 0
34358: PUSH
34359: LD_INT 2
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 1
34368: NEG
34369: PUSH
34370: LD_INT 1
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 1
34379: NEG
34380: PUSH
34381: LD_INT 3
34383: NEG
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 0
34391: PUSH
34392: LD_INT 3
34394: NEG
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 1
34402: PUSH
34403: LD_INT 2
34405: NEG
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34429: LD_ADDR_VAR 0 15
34433: PUSH
34434: LD_INT 0
34436: PUSH
34437: LD_INT 0
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 0
34446: PUSH
34447: LD_INT 1
34449: NEG
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 1
34457: PUSH
34458: LD_INT 0
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 1
34467: PUSH
34468: LD_INT 1
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 0
34477: PUSH
34478: LD_INT 1
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 1
34487: NEG
34488: PUSH
34489: LD_INT 0
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 1
34498: NEG
34499: PUSH
34500: LD_INT 1
34502: NEG
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 1
34510: PUSH
34511: LD_INT 1
34513: NEG
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 2
34521: PUSH
34522: LD_INT 0
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 2
34531: PUSH
34532: LD_INT 1
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: LD_INT 1
34541: NEG
34542: PUSH
34543: LD_INT 1
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 2
34552: NEG
34553: PUSH
34554: LD_INT 0
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 2
34563: NEG
34564: PUSH
34565: LD_INT 1
34567: NEG
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 2
34575: PUSH
34576: LD_INT 1
34578: NEG
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 3
34586: PUSH
34587: LD_INT 0
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 3
34596: PUSH
34597: LD_INT 1
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34622: LD_ADDR_VAR 0 16
34626: PUSH
34627: LD_INT 0
34629: PUSH
34630: LD_INT 0
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 0
34639: PUSH
34640: LD_INT 1
34642: NEG
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 1
34650: PUSH
34651: LD_INT 0
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 1
34660: PUSH
34661: LD_INT 1
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 0
34670: PUSH
34671: LD_INT 1
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 1
34680: NEG
34681: PUSH
34682: LD_INT 0
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 1
34691: NEG
34692: PUSH
34693: LD_INT 1
34695: NEG
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 1
34703: NEG
34704: PUSH
34705: LD_INT 2
34707: NEG
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 2
34715: PUSH
34716: LD_INT 1
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 2
34725: PUSH
34726: LD_INT 2
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 1
34735: PUSH
34736: LD_INT 2
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 2
34745: NEG
34746: PUSH
34747: LD_INT 1
34749: NEG
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 2
34757: NEG
34758: PUSH
34759: LD_INT 2
34761: NEG
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 3
34769: PUSH
34770: LD_INT 2
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 3
34779: PUSH
34780: LD_INT 3
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 2
34789: PUSH
34790: LD_INT 3
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34815: LD_ADDR_VAR 0 17
34819: PUSH
34820: LD_INT 0
34822: PUSH
34823: LD_INT 0
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: LD_INT 1
34835: NEG
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: LD_INT 0
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 1
34853: PUSH
34854: LD_INT 1
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 0
34863: PUSH
34864: LD_INT 1
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 1
34873: NEG
34874: PUSH
34875: LD_INT 0
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 1
34884: NEG
34885: PUSH
34886: LD_INT 1
34888: NEG
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 1
34896: NEG
34897: PUSH
34898: LD_INT 2
34900: NEG
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 0
34908: PUSH
34909: LD_INT 2
34911: NEG
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 1
34919: PUSH
34920: LD_INT 1
34922: NEG
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 2
34930: PUSH
34931: LD_INT 0
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 2
34940: PUSH
34941: LD_INT 1
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 2
34950: PUSH
34951: LD_INT 2
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 1
34960: PUSH
34961: LD_INT 2
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 0
34970: PUSH
34971: LD_INT 2
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 1
34980: NEG
34981: PUSH
34982: LD_INT 1
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 2
34991: NEG
34992: PUSH
34993: LD_INT 0
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 2
35002: NEG
35003: PUSH
35004: LD_INT 1
35006: NEG
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 2
35014: NEG
35015: PUSH
35016: LD_INT 2
35018: NEG
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35045: LD_ADDR_VAR 0 18
35049: PUSH
35050: LD_INT 0
35052: PUSH
35053: LD_INT 0
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 0
35062: PUSH
35063: LD_INT 1
35065: NEG
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: LD_INT 0
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 1
35083: PUSH
35084: LD_INT 1
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 0
35093: PUSH
35094: LD_INT 1
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 1
35103: NEG
35104: PUSH
35105: LD_INT 0
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 1
35114: NEG
35115: PUSH
35116: LD_INT 1
35118: NEG
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 1
35126: NEG
35127: PUSH
35128: LD_INT 2
35130: NEG
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: LD_INT 0
35138: PUSH
35139: LD_INT 2
35141: NEG
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 1
35149: PUSH
35150: LD_INT 1
35152: NEG
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 2
35160: PUSH
35161: LD_INT 0
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 2
35170: PUSH
35171: LD_INT 1
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 2
35180: PUSH
35181: LD_INT 2
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 1
35190: PUSH
35191: LD_INT 2
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 0
35200: PUSH
35201: LD_INT 2
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 1
35210: NEG
35211: PUSH
35212: LD_INT 1
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 2
35221: NEG
35222: PUSH
35223: LD_INT 0
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 2
35232: NEG
35233: PUSH
35234: LD_INT 1
35236: NEG
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 2
35244: NEG
35245: PUSH
35246: LD_INT 2
35248: NEG
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35275: LD_ADDR_VAR 0 19
35279: PUSH
35280: LD_INT 0
35282: PUSH
35283: LD_INT 0
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 0
35292: PUSH
35293: LD_INT 1
35295: NEG
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 1
35303: PUSH
35304: LD_INT 0
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 1
35313: PUSH
35314: LD_INT 1
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 0
35323: PUSH
35324: LD_INT 1
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 1
35333: NEG
35334: PUSH
35335: LD_INT 0
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 1
35344: NEG
35345: PUSH
35346: LD_INT 1
35348: NEG
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 1
35356: NEG
35357: PUSH
35358: LD_INT 2
35360: NEG
35361: PUSH
35362: EMPTY
35363: LIST
35364: LIST
35365: PUSH
35366: LD_INT 0
35368: PUSH
35369: LD_INT 2
35371: NEG
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 1
35379: PUSH
35380: LD_INT 1
35382: NEG
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PUSH
35388: LD_INT 2
35390: PUSH
35391: LD_INT 0
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 2
35400: PUSH
35401: LD_INT 1
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 2
35410: PUSH
35411: LD_INT 2
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: LD_INT 1
35420: PUSH
35421: LD_INT 2
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 0
35430: PUSH
35431: LD_INT 2
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 1
35440: NEG
35441: PUSH
35442: LD_INT 1
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 2
35451: NEG
35452: PUSH
35453: LD_INT 0
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 2
35462: NEG
35463: PUSH
35464: LD_INT 1
35466: NEG
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 2
35474: NEG
35475: PUSH
35476: LD_INT 2
35478: NEG
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35505: LD_ADDR_VAR 0 20
35509: PUSH
35510: LD_INT 0
35512: PUSH
35513: LD_INT 0
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 0
35522: PUSH
35523: LD_INT 1
35525: NEG
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 1
35533: PUSH
35534: LD_INT 0
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 1
35543: PUSH
35544: LD_INT 1
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 0
35553: PUSH
35554: LD_INT 1
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 1
35563: NEG
35564: PUSH
35565: LD_INT 0
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 1
35574: NEG
35575: PUSH
35576: LD_INT 1
35578: NEG
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 1
35586: NEG
35587: PUSH
35588: LD_INT 2
35590: NEG
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 0
35598: PUSH
35599: LD_INT 2
35601: NEG
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 1
35609: PUSH
35610: LD_INT 1
35612: NEG
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 2
35620: PUSH
35621: LD_INT 0
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 2
35630: PUSH
35631: LD_INT 1
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 2
35640: PUSH
35641: LD_INT 2
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 1
35650: PUSH
35651: LD_INT 2
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 0
35660: PUSH
35661: LD_INT 2
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 1
35670: NEG
35671: PUSH
35672: LD_INT 1
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: LD_INT 2
35681: NEG
35682: PUSH
35683: LD_INT 0
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 2
35692: NEG
35693: PUSH
35694: LD_INT 1
35696: NEG
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 2
35704: NEG
35705: PUSH
35706: LD_INT 2
35708: NEG
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: LIST
35734: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35735: LD_ADDR_VAR 0 21
35739: PUSH
35740: LD_INT 0
35742: PUSH
35743: LD_INT 0
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 0
35752: PUSH
35753: LD_INT 1
35755: NEG
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 1
35763: PUSH
35764: LD_INT 0
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 1
35773: PUSH
35774: LD_INT 1
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 0
35783: PUSH
35784: LD_INT 1
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 1
35793: NEG
35794: PUSH
35795: LD_INT 0
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 1
35804: NEG
35805: PUSH
35806: LD_INT 1
35808: NEG
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 1
35816: NEG
35817: PUSH
35818: LD_INT 2
35820: NEG
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 0
35828: PUSH
35829: LD_INT 2
35831: NEG
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 1
35839: PUSH
35840: LD_INT 1
35842: NEG
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 2
35850: PUSH
35851: LD_INT 0
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: LD_INT 2
35860: PUSH
35861: LD_INT 1
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 2
35870: PUSH
35871: LD_INT 2
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 1
35880: PUSH
35881: LD_INT 2
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 0
35890: PUSH
35891: LD_INT 2
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 1
35900: NEG
35901: PUSH
35902: LD_INT 1
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 2
35911: NEG
35912: PUSH
35913: LD_INT 0
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 2
35922: NEG
35923: PUSH
35924: LD_INT 1
35926: NEG
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 2
35934: NEG
35935: PUSH
35936: LD_INT 2
35938: NEG
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35965: LD_ADDR_VAR 0 22
35969: PUSH
35970: LD_INT 0
35972: PUSH
35973: LD_INT 0
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 0
35982: PUSH
35983: LD_INT 1
35985: NEG
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 1
35993: PUSH
35994: LD_INT 0
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: LD_INT 1
36003: PUSH
36004: LD_INT 1
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 0
36013: PUSH
36014: LD_INT 1
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 1
36023: NEG
36024: PUSH
36025: LD_INT 0
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 1
36034: NEG
36035: PUSH
36036: LD_INT 1
36038: NEG
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 1
36046: NEG
36047: PUSH
36048: LD_INT 2
36050: NEG
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 0
36058: PUSH
36059: LD_INT 2
36061: NEG
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 1
36069: PUSH
36070: LD_INT 1
36072: NEG
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 2
36080: PUSH
36081: LD_INT 0
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PUSH
36088: LD_INT 2
36090: PUSH
36091: LD_INT 1
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 2
36100: PUSH
36101: LD_INT 2
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 1
36110: PUSH
36111: LD_INT 2
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 0
36120: PUSH
36121: LD_INT 2
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 1
36130: NEG
36131: PUSH
36132: LD_INT 1
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 2
36141: NEG
36142: PUSH
36143: LD_INT 0
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 2
36152: NEG
36153: PUSH
36154: LD_INT 1
36156: NEG
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 2
36164: NEG
36165: PUSH
36166: LD_INT 2
36168: NEG
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36195: LD_ADDR_VAR 0 23
36199: PUSH
36200: LD_INT 0
36202: PUSH
36203: LD_INT 0
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 0
36212: PUSH
36213: LD_INT 1
36215: NEG
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 1
36223: PUSH
36224: LD_INT 0
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: PUSH
36231: LD_INT 1
36233: PUSH
36234: LD_INT 1
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 0
36243: PUSH
36244: LD_INT 1
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: LD_INT 1
36253: NEG
36254: PUSH
36255: LD_INT 0
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 1
36264: NEG
36265: PUSH
36266: LD_INT 1
36268: NEG
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 1
36276: NEG
36277: PUSH
36278: LD_INT 2
36280: NEG
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 0
36288: PUSH
36289: LD_INT 2
36291: NEG
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 1
36299: PUSH
36300: LD_INT 1
36302: NEG
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 2
36310: PUSH
36311: LD_INT 0
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: LD_INT 2
36320: PUSH
36321: LD_INT 1
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: LD_INT 2
36330: PUSH
36331: LD_INT 2
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 1
36340: PUSH
36341: LD_INT 2
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 0
36350: PUSH
36351: LD_INT 2
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 1
36360: NEG
36361: PUSH
36362: LD_INT 1
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 2
36371: NEG
36372: PUSH
36373: LD_INT 0
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 2
36382: NEG
36383: PUSH
36384: LD_INT 1
36386: NEG
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: LD_INT 2
36394: NEG
36395: PUSH
36396: LD_INT 2
36398: NEG
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 2
36406: NEG
36407: PUSH
36408: LD_INT 3
36410: NEG
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 1
36418: NEG
36419: PUSH
36420: LD_INT 3
36422: NEG
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 1
36430: PUSH
36431: LD_INT 2
36433: NEG
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 2
36441: PUSH
36442: LD_INT 1
36444: NEG
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
36475: LD_ADDR_VAR 0 24
36479: PUSH
36480: LD_INT 0
36482: PUSH
36483: LD_INT 0
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 0
36492: PUSH
36493: LD_INT 1
36495: NEG
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 1
36503: PUSH
36504: LD_INT 0
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 1
36513: PUSH
36514: LD_INT 1
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 0
36523: PUSH
36524: LD_INT 1
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 1
36533: NEG
36534: PUSH
36535: LD_INT 0
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 1
36544: NEG
36545: PUSH
36546: LD_INT 1
36548: NEG
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 1
36556: NEG
36557: PUSH
36558: LD_INT 2
36560: NEG
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 0
36568: PUSH
36569: LD_INT 2
36571: NEG
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 1
36579: PUSH
36580: LD_INT 1
36582: NEG
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 2
36590: PUSH
36591: LD_INT 0
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 2
36600: PUSH
36601: LD_INT 1
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 2
36610: PUSH
36611: LD_INT 2
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 1
36620: PUSH
36621: LD_INT 2
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 0
36630: PUSH
36631: LD_INT 2
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 1
36640: NEG
36641: PUSH
36642: LD_INT 1
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 2
36651: NEG
36652: PUSH
36653: LD_INT 0
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: LD_INT 2
36662: NEG
36663: PUSH
36664: LD_INT 1
36666: NEG
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 2
36674: NEG
36675: PUSH
36676: LD_INT 2
36678: NEG
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 1
36686: PUSH
36687: LD_INT 2
36689: NEG
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 2
36697: PUSH
36698: LD_INT 1
36700: NEG
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 3
36708: PUSH
36709: LD_INT 1
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 3
36718: PUSH
36719: LD_INT 2
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
36751: LD_ADDR_VAR 0 25
36755: PUSH
36756: LD_INT 0
36758: PUSH
36759: LD_INT 0
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 0
36768: PUSH
36769: LD_INT 1
36771: NEG
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 1
36779: PUSH
36780: LD_INT 0
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 1
36789: PUSH
36790: LD_INT 1
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 0
36799: PUSH
36800: LD_INT 1
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 1
36809: NEG
36810: PUSH
36811: LD_INT 0
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 1
36820: NEG
36821: PUSH
36822: LD_INT 1
36824: NEG
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 1
36832: NEG
36833: PUSH
36834: LD_INT 2
36836: NEG
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 0
36844: PUSH
36845: LD_INT 2
36847: NEG
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 1
36855: PUSH
36856: LD_INT 1
36858: NEG
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 2
36866: PUSH
36867: LD_INT 0
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: LD_INT 2
36876: PUSH
36877: LD_INT 1
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 2
36886: PUSH
36887: LD_INT 2
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 1
36896: PUSH
36897: LD_INT 2
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 0
36906: PUSH
36907: LD_INT 2
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 1
36916: NEG
36917: PUSH
36918: LD_INT 1
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 2
36927: NEG
36928: PUSH
36929: LD_INT 0
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 2
36938: NEG
36939: PUSH
36940: LD_INT 1
36942: NEG
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 2
36950: NEG
36951: PUSH
36952: LD_INT 2
36954: NEG
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 3
36962: PUSH
36963: LD_INT 1
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 3
36972: PUSH
36973: LD_INT 2
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 2
36982: PUSH
36983: LD_INT 3
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 1
36992: PUSH
36993: LD_INT 3
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37025: LD_ADDR_VAR 0 26
37029: PUSH
37030: LD_INT 0
37032: PUSH
37033: LD_INT 0
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 0
37042: PUSH
37043: LD_INT 1
37045: NEG
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 1
37053: PUSH
37054: LD_INT 0
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 1
37063: PUSH
37064: LD_INT 1
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 0
37073: PUSH
37074: LD_INT 1
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 1
37083: NEG
37084: PUSH
37085: LD_INT 0
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 1
37094: NEG
37095: PUSH
37096: LD_INT 1
37098: NEG
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 1
37106: NEG
37107: PUSH
37108: LD_INT 2
37110: NEG
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 0
37118: PUSH
37119: LD_INT 2
37121: NEG
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 1
37129: PUSH
37130: LD_INT 1
37132: NEG
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 2
37140: PUSH
37141: LD_INT 0
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 2
37150: PUSH
37151: LD_INT 1
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 2
37160: PUSH
37161: LD_INT 2
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 1
37170: PUSH
37171: LD_INT 2
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 0
37180: PUSH
37181: LD_INT 2
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 1
37190: NEG
37191: PUSH
37192: LD_INT 1
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 2
37201: NEG
37202: PUSH
37203: LD_INT 0
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 2
37212: NEG
37213: PUSH
37214: LD_INT 1
37216: NEG
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 2
37224: NEG
37225: PUSH
37226: LD_INT 2
37228: NEG
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 2
37236: PUSH
37237: LD_INT 3
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 1
37246: PUSH
37247: LD_INT 3
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 1
37256: NEG
37257: PUSH
37258: LD_INT 2
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 2
37267: NEG
37268: PUSH
37269: LD_INT 1
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37301: LD_ADDR_VAR 0 27
37305: PUSH
37306: LD_INT 0
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 0
37318: PUSH
37319: LD_INT 1
37321: NEG
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 1
37329: PUSH
37330: LD_INT 0
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 1
37339: PUSH
37340: LD_INT 1
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 0
37349: PUSH
37350: LD_INT 1
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 1
37359: NEG
37360: PUSH
37361: LD_INT 0
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 1
37370: NEG
37371: PUSH
37372: LD_INT 1
37374: NEG
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 1
37382: NEG
37383: PUSH
37384: LD_INT 2
37386: NEG
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: LD_INT 2
37397: NEG
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 1
37405: PUSH
37406: LD_INT 1
37408: NEG
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 2
37416: PUSH
37417: LD_INT 0
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 2
37426: PUSH
37427: LD_INT 1
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 2
37436: PUSH
37437: LD_INT 2
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 1
37446: PUSH
37447: LD_INT 2
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 0
37456: PUSH
37457: LD_INT 2
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 1
37466: NEG
37467: PUSH
37468: LD_INT 1
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 2
37477: NEG
37478: PUSH
37479: LD_INT 0
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 2
37488: NEG
37489: PUSH
37490: LD_INT 1
37492: NEG
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 2
37500: NEG
37501: PUSH
37502: LD_INT 2
37504: NEG
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 1
37512: NEG
37513: PUSH
37514: LD_INT 2
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 2
37523: NEG
37524: PUSH
37525: LD_INT 1
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 3
37534: NEG
37535: PUSH
37536: LD_INT 1
37538: NEG
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 3
37546: NEG
37547: PUSH
37548: LD_INT 2
37550: NEG
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37581: LD_ADDR_VAR 0 28
37585: PUSH
37586: LD_INT 0
37588: PUSH
37589: LD_INT 0
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 0
37598: PUSH
37599: LD_INT 1
37601: NEG
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 1
37609: PUSH
37610: LD_INT 0
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 1
37619: PUSH
37620: LD_INT 1
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 0
37629: PUSH
37630: LD_INT 1
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 1
37639: NEG
37640: PUSH
37641: LD_INT 0
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 1
37650: NEG
37651: PUSH
37652: LD_INT 1
37654: NEG
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 1
37662: NEG
37663: PUSH
37664: LD_INT 2
37666: NEG
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 0
37674: PUSH
37675: LD_INT 2
37677: NEG
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 1
37685: PUSH
37686: LD_INT 1
37688: NEG
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 2
37696: PUSH
37697: LD_INT 0
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 2
37706: PUSH
37707: LD_INT 1
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 2
37716: PUSH
37717: LD_INT 2
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 1
37726: PUSH
37727: LD_INT 2
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 0
37736: PUSH
37737: LD_INT 2
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 1
37746: NEG
37747: PUSH
37748: LD_INT 1
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 2
37757: NEG
37758: PUSH
37759: LD_INT 0
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 2
37768: NEG
37769: PUSH
37770: LD_INT 1
37772: NEG
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 2
37780: NEG
37781: PUSH
37782: LD_INT 2
37784: NEG
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 2
37792: NEG
37793: PUSH
37794: LD_INT 3
37796: NEG
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 1
37804: NEG
37805: PUSH
37806: LD_INT 3
37808: NEG
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 3
37816: NEG
37817: PUSH
37818: LD_INT 1
37820: NEG
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 3
37828: NEG
37829: PUSH
37830: LD_INT 2
37832: NEG
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37863: LD_ADDR_VAR 0 29
37867: PUSH
37868: LD_INT 0
37870: PUSH
37871: LD_INT 0
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 0
37880: PUSH
37881: LD_INT 1
37883: NEG
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 1
37891: PUSH
37892: LD_INT 0
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 1
37901: PUSH
37902: LD_INT 1
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 0
37911: PUSH
37912: LD_INT 1
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 1
37921: NEG
37922: PUSH
37923: LD_INT 0
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 1
37932: NEG
37933: PUSH
37934: LD_INT 1
37936: NEG
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 1
37944: NEG
37945: PUSH
37946: LD_INT 2
37948: NEG
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 0
37956: PUSH
37957: LD_INT 2
37959: NEG
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 1
37967: PUSH
37968: LD_INT 1
37970: NEG
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 2
37978: PUSH
37979: LD_INT 0
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 2
37988: PUSH
37989: LD_INT 1
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 1
37998: PUSH
37999: LD_INT 2
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 0
38008: PUSH
38009: LD_INT 2
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 1
38018: NEG
38019: PUSH
38020: LD_INT 1
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 2
38029: NEG
38030: PUSH
38031: LD_INT 1
38033: NEG
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 2
38041: NEG
38042: PUSH
38043: LD_INT 2
38045: NEG
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 2
38053: NEG
38054: PUSH
38055: LD_INT 3
38057: NEG
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 2
38065: PUSH
38066: LD_INT 1
38068: NEG
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 3
38076: PUSH
38077: LD_INT 1
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 1
38086: PUSH
38087: LD_INT 3
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 1
38096: NEG
38097: PUSH
38098: LD_INT 2
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 3
38107: NEG
38108: PUSH
38109: LD_INT 2
38111: NEG
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38142: LD_ADDR_VAR 0 30
38146: PUSH
38147: LD_INT 0
38149: PUSH
38150: LD_INT 0
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 0
38159: PUSH
38160: LD_INT 1
38162: NEG
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 1
38170: PUSH
38171: LD_INT 0
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 1
38180: PUSH
38181: LD_INT 1
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 0
38190: PUSH
38191: LD_INT 1
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 1
38200: NEG
38201: PUSH
38202: LD_INT 0
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 1
38211: NEG
38212: PUSH
38213: LD_INT 1
38215: NEG
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 1
38223: NEG
38224: PUSH
38225: LD_INT 2
38227: NEG
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 0
38235: PUSH
38236: LD_INT 2
38238: NEG
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 1
38246: PUSH
38247: LD_INT 1
38249: NEG
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 2
38257: PUSH
38258: LD_INT 0
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 2
38267: PUSH
38268: LD_INT 1
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: LD_INT 2
38277: PUSH
38278: LD_INT 2
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 1
38287: PUSH
38288: LD_INT 2
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 1
38297: NEG
38298: PUSH
38299: LD_INT 1
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 2
38308: NEG
38309: PUSH
38310: LD_INT 0
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 2
38319: NEG
38320: PUSH
38321: LD_INT 1
38323: NEG
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 1
38331: NEG
38332: PUSH
38333: LD_INT 3
38335: NEG
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 1
38343: PUSH
38344: LD_INT 2
38346: NEG
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 3
38354: PUSH
38355: LD_INT 2
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 2
38364: PUSH
38365: LD_INT 3
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: LD_INT 2
38374: NEG
38375: PUSH
38376: LD_INT 1
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 3
38385: NEG
38386: PUSH
38387: LD_INT 1
38389: NEG
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38420: LD_ADDR_VAR 0 31
38424: PUSH
38425: LD_INT 0
38427: PUSH
38428: LD_INT 0
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 0
38437: PUSH
38438: LD_INT 1
38440: NEG
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: LD_INT 1
38448: PUSH
38449: LD_INT 0
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 1
38458: PUSH
38459: LD_INT 1
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 0
38468: PUSH
38469: LD_INT 1
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: LD_INT 1
38478: NEG
38479: PUSH
38480: LD_INT 0
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 1
38489: NEG
38490: PUSH
38491: LD_INT 1
38493: NEG
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 1
38501: NEG
38502: PUSH
38503: LD_INT 2
38505: NEG
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 1
38513: PUSH
38514: LD_INT 1
38516: NEG
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 2
38524: PUSH
38525: LD_INT 0
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 2
38534: PUSH
38535: LD_INT 1
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 2
38544: PUSH
38545: LD_INT 2
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 1
38554: PUSH
38555: LD_INT 2
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 0
38564: PUSH
38565: LD_INT 2
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 1
38574: NEG
38575: PUSH
38576: LD_INT 1
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 2
38585: NEG
38586: PUSH
38587: LD_INT 1
38589: NEG
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 2
38597: NEG
38598: PUSH
38599: LD_INT 2
38601: NEG
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 2
38609: NEG
38610: PUSH
38611: LD_INT 3
38613: NEG
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 2
38621: PUSH
38622: LD_INT 1
38624: NEG
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 3
38632: PUSH
38633: LD_INT 1
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 1
38642: PUSH
38643: LD_INT 3
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 1
38652: NEG
38653: PUSH
38654: LD_INT 2
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 3
38663: NEG
38664: PUSH
38665: LD_INT 2
38667: NEG
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38698: LD_ADDR_VAR 0 32
38702: PUSH
38703: LD_INT 0
38705: PUSH
38706: LD_INT 0
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 0
38715: PUSH
38716: LD_INT 1
38718: NEG
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 1
38726: PUSH
38727: LD_INT 0
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 1
38736: PUSH
38737: LD_INT 1
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 0
38746: PUSH
38747: LD_INT 1
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 1
38756: NEG
38757: PUSH
38758: LD_INT 0
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 1
38767: NEG
38768: PUSH
38769: LD_INT 1
38771: NEG
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 1
38779: NEG
38780: PUSH
38781: LD_INT 2
38783: NEG
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 0
38791: PUSH
38792: LD_INT 2
38794: NEG
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 1
38802: PUSH
38803: LD_INT 1
38805: NEG
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 2
38813: PUSH
38814: LD_INT 1
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 2
38823: PUSH
38824: LD_INT 2
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 1
38833: PUSH
38834: LD_INT 2
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 0
38843: PUSH
38844: LD_INT 2
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 1
38853: NEG
38854: PUSH
38855: LD_INT 1
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 2
38864: NEG
38865: PUSH
38866: LD_INT 0
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 2
38875: NEG
38876: PUSH
38877: LD_INT 1
38879: NEG
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 1
38887: NEG
38888: PUSH
38889: LD_INT 3
38891: NEG
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 1
38899: PUSH
38900: LD_INT 2
38902: NEG
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 3
38910: PUSH
38911: LD_INT 2
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 2
38920: PUSH
38921: LD_INT 3
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 2
38930: NEG
38931: PUSH
38932: LD_INT 1
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 3
38941: NEG
38942: PUSH
38943: LD_INT 1
38945: NEG
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38976: LD_ADDR_VAR 0 33
38980: PUSH
38981: LD_INT 0
38983: PUSH
38984: LD_INT 0
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 0
38993: PUSH
38994: LD_INT 1
38996: NEG
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 1
39004: PUSH
39005: LD_INT 0
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 1
39014: PUSH
39015: LD_INT 1
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 0
39024: PUSH
39025: LD_INT 1
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 1
39034: NEG
39035: PUSH
39036: LD_INT 0
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 1
39045: NEG
39046: PUSH
39047: LD_INT 1
39049: NEG
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 1
39057: NEG
39058: PUSH
39059: LD_INT 2
39061: NEG
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 1
39069: PUSH
39070: LD_INT 1
39072: NEG
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 2
39080: PUSH
39081: LD_INT 0
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 2
39090: PUSH
39091: LD_INT 1
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 1
39100: PUSH
39101: LD_INT 2
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 0
39110: PUSH
39111: LD_INT 2
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 1
39120: NEG
39121: PUSH
39122: LD_INT 1
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 2
39131: NEG
39132: PUSH
39133: LD_INT 0
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 2
39142: NEG
39143: PUSH
39144: LD_INT 1
39146: NEG
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 2
39154: NEG
39155: PUSH
39156: LD_INT 2
39158: NEG
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 2
39166: NEG
39167: PUSH
39168: LD_INT 3
39170: NEG
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 2
39178: PUSH
39179: LD_INT 1
39181: NEG
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 3
39189: PUSH
39190: LD_INT 1
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 1
39199: PUSH
39200: LD_INT 3
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 1
39209: NEG
39210: PUSH
39211: LD_INT 2
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 3
39220: NEG
39221: PUSH
39222: LD_INT 2
39224: NEG
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39255: LD_ADDR_VAR 0 34
39259: PUSH
39260: LD_INT 0
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 0
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 1
39283: PUSH
39284: LD_INT 0
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 1
39293: PUSH
39294: LD_INT 1
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 0
39303: PUSH
39304: LD_INT 1
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 1
39313: NEG
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 1
39324: NEG
39325: PUSH
39326: LD_INT 1
39328: NEG
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 1
39336: NEG
39337: PUSH
39338: LD_INT 2
39340: NEG
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 0
39348: PUSH
39349: LD_INT 2
39351: NEG
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 1
39359: PUSH
39360: LD_INT 1
39362: NEG
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 2
39370: PUSH
39371: LD_INT 1
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 2
39380: PUSH
39381: LD_INT 2
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 1
39390: PUSH
39391: LD_INT 2
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 1
39400: NEG
39401: PUSH
39402: LD_INT 1
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 2
39411: NEG
39412: PUSH
39413: LD_INT 0
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 2
39422: NEG
39423: PUSH
39424: LD_INT 1
39426: NEG
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 2
39434: NEG
39435: PUSH
39436: LD_INT 2
39438: NEG
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 1
39446: NEG
39447: PUSH
39448: LD_INT 3
39450: NEG
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 1
39458: PUSH
39459: LD_INT 2
39461: NEG
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 3
39469: PUSH
39470: LD_INT 2
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 2
39479: PUSH
39480: LD_INT 3
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 2
39489: NEG
39490: PUSH
39491: LD_INT 1
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 3
39500: NEG
39501: PUSH
39502: LD_INT 1
39504: NEG
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39535: LD_ADDR_VAR 0 35
39539: PUSH
39540: LD_INT 0
39542: PUSH
39543: LD_INT 0
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 0
39552: PUSH
39553: LD_INT 1
39555: NEG
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 1
39563: PUSH
39564: LD_INT 0
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 1
39573: PUSH
39574: LD_INT 1
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 0
39583: PUSH
39584: LD_INT 1
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 1
39593: NEG
39594: PUSH
39595: LD_INT 0
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 1
39604: NEG
39605: PUSH
39606: LD_INT 1
39608: NEG
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 2
39616: PUSH
39617: LD_INT 1
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 2
39626: NEG
39627: PUSH
39628: LD_INT 1
39630: NEG
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39647: LD_ADDR_VAR 0 36
39651: PUSH
39652: LD_INT 0
39654: PUSH
39655: LD_INT 0
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 0
39664: PUSH
39665: LD_INT 1
39667: NEG
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 1
39675: PUSH
39676: LD_INT 0
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 1
39685: PUSH
39686: LD_INT 1
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 0
39695: PUSH
39696: LD_INT 1
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 1
39705: NEG
39706: PUSH
39707: LD_INT 0
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 1
39716: NEG
39717: PUSH
39718: LD_INT 1
39720: NEG
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 1
39728: NEG
39729: PUSH
39730: LD_INT 2
39732: NEG
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 1
39740: PUSH
39741: LD_INT 2
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39759: LD_ADDR_VAR 0 37
39763: PUSH
39764: LD_INT 0
39766: PUSH
39767: LD_INT 0
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 0
39776: PUSH
39777: LD_INT 1
39779: NEG
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 1
39787: PUSH
39788: LD_INT 0
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 1
39797: PUSH
39798: LD_INT 1
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 0
39807: PUSH
39808: LD_INT 1
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 1
39817: NEG
39818: PUSH
39819: LD_INT 0
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 1
39828: NEG
39829: PUSH
39830: LD_INT 1
39832: NEG
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 1
39840: PUSH
39841: LD_INT 1
39843: NEG
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 1
39851: NEG
39852: PUSH
39853: LD_INT 1
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39871: LD_ADDR_VAR 0 38
39875: PUSH
39876: LD_INT 0
39878: PUSH
39879: LD_INT 0
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 0
39888: PUSH
39889: LD_INT 1
39891: NEG
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 1
39899: PUSH
39900: LD_INT 0
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 1
39909: PUSH
39910: LD_INT 1
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: LD_INT 1
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 1
39929: NEG
39930: PUSH
39931: LD_INT 0
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 1
39940: NEG
39941: PUSH
39942: LD_INT 1
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 2
39952: PUSH
39953: LD_INT 1
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 2
39962: NEG
39963: PUSH
39964: LD_INT 1
39966: NEG
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39983: LD_ADDR_VAR 0 39
39987: PUSH
39988: LD_INT 0
39990: PUSH
39991: LD_INT 0
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 0
40000: PUSH
40001: LD_INT 1
40003: NEG
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 1
40011: PUSH
40012: LD_INT 0
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 1
40021: PUSH
40022: LD_INT 1
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: LD_INT 1
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 1
40041: NEG
40042: PUSH
40043: LD_INT 0
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 1
40052: NEG
40053: PUSH
40054: LD_INT 1
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 1
40064: NEG
40065: PUSH
40066: LD_INT 2
40068: NEG
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 1
40076: PUSH
40077: LD_INT 2
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40095: LD_ADDR_VAR 0 40
40099: PUSH
40100: LD_INT 0
40102: PUSH
40103: LD_INT 0
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: LD_INT 1
40115: NEG
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 1
40123: PUSH
40124: LD_INT 0
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 1
40133: PUSH
40134: LD_INT 1
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 0
40143: PUSH
40144: LD_INT 1
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 1
40153: NEG
40154: PUSH
40155: LD_INT 0
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 1
40164: NEG
40165: PUSH
40166: LD_INT 1
40168: NEG
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 1
40176: PUSH
40177: LD_INT 1
40179: NEG
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 1
40187: NEG
40188: PUSH
40189: LD_INT 1
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40207: LD_ADDR_VAR 0 41
40211: PUSH
40212: LD_INT 0
40214: PUSH
40215: LD_INT 0
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 0
40224: PUSH
40225: LD_INT 1
40227: NEG
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 1
40235: PUSH
40236: LD_INT 0
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 1
40245: PUSH
40246: LD_INT 1
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 0
40255: PUSH
40256: LD_INT 1
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 1
40265: NEG
40266: PUSH
40267: LD_INT 0
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: LD_INT 1
40280: NEG
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 1
40288: NEG
40289: PUSH
40290: LD_INT 2
40292: NEG
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 1
40300: PUSH
40301: LD_INT 1
40303: NEG
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 2
40311: PUSH
40312: LD_INT 0
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 2
40321: PUSH
40322: LD_INT 1
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 2
40331: PUSH
40332: LD_INT 2
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 1
40341: PUSH
40342: LD_INT 2
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 1
40351: NEG
40352: PUSH
40353: LD_INT 1
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 2
40362: NEG
40363: PUSH
40364: LD_INT 0
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 2
40373: NEG
40374: PUSH
40375: LD_INT 1
40377: NEG
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 2
40385: NEG
40386: PUSH
40387: LD_INT 2
40389: NEG
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 2
40397: NEG
40398: PUSH
40399: LD_INT 3
40401: NEG
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 2
40409: PUSH
40410: LD_INT 1
40412: NEG
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 3
40420: PUSH
40421: LD_INT 0
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 3
40430: PUSH
40431: LD_INT 1
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 3
40440: PUSH
40441: LD_INT 2
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 3
40450: PUSH
40451: LD_INT 3
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 2
40460: PUSH
40461: LD_INT 3
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 2
40470: NEG
40471: PUSH
40472: LD_INT 1
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 3
40481: NEG
40482: PUSH
40483: LD_INT 0
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 3
40492: NEG
40493: PUSH
40494: LD_INT 1
40496: NEG
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 3
40504: NEG
40505: PUSH
40506: LD_INT 2
40508: NEG
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 3
40516: NEG
40517: PUSH
40518: LD_INT 3
40520: NEG
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40557: LD_ADDR_VAR 0 42
40561: PUSH
40562: LD_INT 0
40564: PUSH
40565: LD_INT 0
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 0
40574: PUSH
40575: LD_INT 1
40577: NEG
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 1
40585: PUSH
40586: LD_INT 0
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 1
40595: PUSH
40596: LD_INT 1
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 0
40605: PUSH
40606: LD_INT 1
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 1
40615: NEG
40616: PUSH
40617: LD_INT 0
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 1
40626: NEG
40627: PUSH
40628: LD_INT 1
40630: NEG
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 1
40638: NEG
40639: PUSH
40640: LD_INT 2
40642: NEG
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 0
40650: PUSH
40651: LD_INT 2
40653: NEG
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 1
40661: PUSH
40662: LD_INT 1
40664: NEG
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 2
40672: PUSH
40673: LD_INT 1
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 2
40682: PUSH
40683: LD_INT 2
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 1
40692: PUSH
40693: LD_INT 2
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 0
40702: PUSH
40703: LD_INT 2
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 1
40712: NEG
40713: PUSH
40714: LD_INT 1
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 2
40723: NEG
40724: PUSH
40725: LD_INT 1
40727: NEG
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 2
40735: NEG
40736: PUSH
40737: LD_INT 2
40739: NEG
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 2
40747: NEG
40748: PUSH
40749: LD_INT 3
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 1
40759: NEG
40760: PUSH
40761: LD_INT 3
40763: NEG
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 0
40771: PUSH
40772: LD_INT 3
40774: NEG
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 1
40782: PUSH
40783: LD_INT 2
40785: NEG
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 3
40793: PUSH
40794: LD_INT 2
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 3
40803: PUSH
40804: LD_INT 3
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 2
40813: PUSH
40814: LD_INT 3
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 1
40823: PUSH
40824: LD_INT 3
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 0
40833: PUSH
40834: LD_INT 3
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 1
40843: NEG
40844: PUSH
40845: LD_INT 2
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 3
40854: NEG
40855: PUSH
40856: LD_INT 2
40858: NEG
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 3
40866: NEG
40867: PUSH
40868: LD_INT 3
40870: NEG
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40907: LD_ADDR_VAR 0 43
40911: PUSH
40912: LD_INT 0
40914: PUSH
40915: LD_INT 0
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: LD_INT 1
40927: NEG
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 1
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 1
40945: PUSH
40946: LD_INT 1
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 0
40955: PUSH
40956: LD_INT 1
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 1
40965: NEG
40966: PUSH
40967: LD_INT 0
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 1
40976: NEG
40977: PUSH
40978: LD_INT 1
40980: NEG
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 1
40988: NEG
40989: PUSH
40990: LD_INT 2
40992: NEG
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 0
41000: PUSH
41001: LD_INT 2
41003: NEG
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 1
41011: PUSH
41012: LD_INT 1
41014: NEG
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 2
41022: PUSH
41023: LD_INT 0
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 2
41032: PUSH
41033: LD_INT 1
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 1
41042: PUSH
41043: LD_INT 2
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 0
41052: PUSH
41053: LD_INT 2
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 1
41062: NEG
41063: PUSH
41064: LD_INT 1
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 2
41073: NEG
41074: PUSH
41075: LD_INT 0
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 2
41084: NEG
41085: PUSH
41086: LD_INT 1
41088: NEG
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 1
41096: NEG
41097: PUSH
41098: LD_INT 3
41100: NEG
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 0
41108: PUSH
41109: LD_INT 3
41111: NEG
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 1
41119: PUSH
41120: LD_INT 2
41122: NEG
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 2
41130: PUSH
41131: LD_INT 1
41133: NEG
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 3
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 3
41151: PUSH
41152: LD_INT 1
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 1
41161: PUSH
41162: LD_INT 3
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 0
41171: PUSH
41172: LD_INT 3
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 1
41181: NEG
41182: PUSH
41183: LD_INT 2
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 2
41192: NEG
41193: PUSH
41194: LD_INT 1
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 3
41203: NEG
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 3
41214: NEG
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41255: LD_ADDR_VAR 0 44
41259: PUSH
41260: LD_INT 0
41262: PUSH
41263: LD_INT 0
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 0
41272: PUSH
41273: LD_INT 1
41275: NEG
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 1
41283: PUSH
41284: LD_INT 0
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 1
41293: PUSH
41294: LD_INT 1
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: LD_INT 1
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 1
41313: NEG
41314: PUSH
41315: LD_INT 0
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 1
41324: NEG
41325: PUSH
41326: LD_INT 1
41328: NEG
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 1
41336: NEG
41337: PUSH
41338: LD_INT 2
41340: NEG
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 1
41348: PUSH
41349: LD_INT 1
41351: NEG
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 2
41359: PUSH
41360: LD_INT 0
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 2
41369: PUSH
41370: LD_INT 1
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 2
41379: PUSH
41380: LD_INT 2
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: LD_INT 2
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 1
41399: NEG
41400: PUSH
41401: LD_INT 1
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 2
41410: NEG
41411: PUSH
41412: LD_INT 0
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 2
41421: NEG
41422: PUSH
41423: LD_INT 1
41425: NEG
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 2
41433: NEG
41434: PUSH
41435: LD_INT 2
41437: NEG
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 2
41445: NEG
41446: PUSH
41447: LD_INT 3
41449: NEG
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 2
41457: PUSH
41458: LD_INT 1
41460: NEG
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 3
41468: PUSH
41469: LD_INT 0
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 3
41478: PUSH
41479: LD_INT 1
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 3
41488: PUSH
41489: LD_INT 2
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 3
41498: PUSH
41499: LD_INT 3
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 2
41508: PUSH
41509: LD_INT 3
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 2
41518: NEG
41519: PUSH
41520: LD_INT 1
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 3
41529: NEG
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 3
41540: NEG
41541: PUSH
41542: LD_INT 1
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 3
41552: NEG
41553: PUSH
41554: LD_INT 2
41556: NEG
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 3
41564: NEG
41565: PUSH
41566: LD_INT 3
41568: NEG
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41605: LD_ADDR_VAR 0 45
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: LD_INT 0
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: LD_INT 1
41625: NEG
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 1
41633: PUSH
41634: LD_INT 0
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 1
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: LD_INT 1
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 1
41663: NEG
41664: PUSH
41665: LD_INT 0
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: PUSH
41676: LD_INT 1
41678: NEG
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 1
41686: NEG
41687: PUSH
41688: LD_INT 2
41690: NEG
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 0
41698: PUSH
41699: LD_INT 2
41701: NEG
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: LD_INT 1
41712: NEG
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 2
41720: PUSH
41721: LD_INT 1
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 2
41730: PUSH
41731: LD_INT 2
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 1
41740: PUSH
41741: LD_INT 2
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: LD_INT 2
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 1
41760: NEG
41761: PUSH
41762: LD_INT 1
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 2
41771: NEG
41772: PUSH
41773: LD_INT 1
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 2
41783: NEG
41784: PUSH
41785: LD_INT 2
41787: NEG
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 2
41795: NEG
41796: PUSH
41797: LD_INT 3
41799: NEG
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 1
41807: NEG
41808: PUSH
41809: LD_INT 3
41811: NEG
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 0
41819: PUSH
41820: LD_INT 3
41822: NEG
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 1
41830: PUSH
41831: LD_INT 2
41833: NEG
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 3
41841: PUSH
41842: LD_INT 2
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 3
41851: PUSH
41852: LD_INT 3
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 2
41861: PUSH
41862: LD_INT 3
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 1
41871: PUSH
41872: LD_INT 3
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 0
41881: PUSH
41882: LD_INT 3
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 1
41891: NEG
41892: PUSH
41893: LD_INT 2
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 3
41902: NEG
41903: PUSH
41904: LD_INT 2
41906: NEG
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 3
41914: NEG
41915: PUSH
41916: LD_INT 3
41918: NEG
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41955: LD_ADDR_VAR 0 46
41959: PUSH
41960: LD_INT 0
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 0
41972: PUSH
41973: LD_INT 1
41975: NEG
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 1
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 1
41993: PUSH
41994: LD_INT 1
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: LD_INT 1
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 1
42013: NEG
42014: PUSH
42015: LD_INT 0
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: LD_INT 1
42028: NEG
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 1
42036: NEG
42037: PUSH
42038: LD_INT 2
42040: NEG
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: LD_INT 2
42051: NEG
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 1
42059: PUSH
42060: LD_INT 1
42062: NEG
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 2
42070: PUSH
42071: LD_INT 0
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 2
42080: PUSH
42081: LD_INT 1
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 1
42090: PUSH
42091: LD_INT 2
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 0
42100: PUSH
42101: LD_INT 2
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 1
42110: NEG
42111: PUSH
42112: LD_INT 1
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 2
42121: NEG
42122: PUSH
42123: LD_INT 0
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 2
42132: NEG
42133: PUSH
42134: LD_INT 1
42136: NEG
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 1
42144: NEG
42145: PUSH
42146: LD_INT 3
42148: NEG
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 0
42156: PUSH
42157: LD_INT 3
42159: NEG
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 1
42167: PUSH
42168: LD_INT 2
42170: NEG
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 2
42178: PUSH
42179: LD_INT 1
42181: NEG
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 3
42189: PUSH
42190: LD_INT 0
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 3
42199: PUSH
42200: LD_INT 1
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 1
42209: PUSH
42210: LD_INT 3
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 0
42219: PUSH
42220: LD_INT 3
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 1
42229: NEG
42230: PUSH
42231: LD_INT 2
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 2
42240: NEG
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 3
42251: NEG
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 3
42262: NEG
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42303: LD_ADDR_VAR 0 47
42307: PUSH
42308: LD_INT 0
42310: PUSH
42311: LD_INT 0
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 0
42320: PUSH
42321: LD_INT 1
42323: NEG
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 1
42331: PUSH
42332: LD_INT 0
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 1
42341: PUSH
42342: LD_INT 1
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: LD_INT 1
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 1
42361: NEG
42362: PUSH
42363: LD_INT 0
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 1
42372: NEG
42373: PUSH
42374: LD_INT 1
42376: NEG
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 1
42384: NEG
42385: PUSH
42386: LD_INT 2
42388: NEG
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: LD_INT 2
42399: NEG
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 1
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 2
42418: NEG
42419: PUSH
42420: LD_INT 1
42422: NEG
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 2
42430: NEG
42431: PUSH
42432: LD_INT 2
42434: NEG
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42454: LD_ADDR_VAR 0 48
42458: PUSH
42459: LD_INT 0
42461: PUSH
42462: LD_INT 0
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: LD_INT 1
42474: NEG
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 1
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 1
42492: PUSH
42493: LD_INT 1
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 0
42502: PUSH
42503: LD_INT 1
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 1
42512: NEG
42513: PUSH
42514: LD_INT 0
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: NEG
42524: PUSH
42525: LD_INT 1
42527: NEG
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 1
42535: NEG
42536: PUSH
42537: LD_INT 2
42539: NEG
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 0
42547: PUSH
42548: LD_INT 2
42550: NEG
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 1
42558: PUSH
42559: LD_INT 1
42561: NEG
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 2
42569: PUSH
42570: LD_INT 0
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 2
42579: PUSH
42580: LD_INT 1
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42601: LD_ADDR_VAR 0 49
42605: PUSH
42606: LD_INT 0
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 0
42618: PUSH
42619: LD_INT 1
42621: NEG
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 1
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 1
42639: PUSH
42640: LD_INT 1
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 0
42649: PUSH
42650: LD_INT 1
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 1
42659: NEG
42660: PUSH
42661: LD_INT 0
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 1
42670: NEG
42671: PUSH
42672: LD_INT 1
42674: NEG
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 1
42682: PUSH
42683: LD_INT 1
42685: NEG
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 2
42693: PUSH
42694: LD_INT 0
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 2
42703: PUSH
42704: LD_INT 1
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 2
42713: PUSH
42714: LD_INT 2
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 1
42723: PUSH
42724: LD_INT 2
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42745: LD_ADDR_VAR 0 50
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: LD_INT 0
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 0
42762: PUSH
42763: LD_INT 1
42765: NEG
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 1
42773: PUSH
42774: LD_INT 0
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 1
42783: PUSH
42784: LD_INT 1
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 0
42793: PUSH
42794: LD_INT 1
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 1
42803: NEG
42804: PUSH
42805: LD_INT 0
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 1
42814: NEG
42815: PUSH
42816: LD_INT 1
42818: NEG
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 2
42826: PUSH
42827: LD_INT 1
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 2
42836: PUSH
42837: LD_INT 2
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 1
42846: PUSH
42847: LD_INT 2
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: LD_INT 2
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: LD_INT 1
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42889: LD_ADDR_VAR 0 51
42893: PUSH
42894: LD_INT 0
42896: PUSH
42897: LD_INT 0
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 0
42906: PUSH
42907: LD_INT 1
42909: NEG
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 1
42917: PUSH
42918: LD_INT 0
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 1
42927: PUSH
42928: LD_INT 1
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: LD_INT 1
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 1
42947: NEG
42948: PUSH
42949: LD_INT 0
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 1
42958: NEG
42959: PUSH
42960: LD_INT 1
42962: NEG
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: LD_INT 2
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 0
42980: PUSH
42981: LD_INT 2
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 1
42990: NEG
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 2
43001: NEG
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 2
43012: NEG
43013: PUSH
43014: LD_INT 1
43016: NEG
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43036: LD_ADDR_VAR 0 52
43040: PUSH
43041: LD_INT 0
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 0
43053: PUSH
43054: LD_INT 1
43056: NEG
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 1
43064: PUSH
43065: LD_INT 0
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 1
43074: PUSH
43075: LD_INT 1
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 0
43084: PUSH
43085: LD_INT 1
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 1
43094: NEG
43095: PUSH
43096: LD_INT 0
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 1
43105: NEG
43106: PUSH
43107: LD_INT 1
43109: NEG
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 1
43117: NEG
43118: PUSH
43119: LD_INT 2
43121: NEG
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 1
43129: NEG
43130: PUSH
43131: LD_INT 1
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 2
43140: NEG
43141: PUSH
43142: LD_INT 0
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 2
43151: NEG
43152: PUSH
43153: LD_INT 1
43155: NEG
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 2
43163: NEG
43164: PUSH
43165: LD_INT 2
43167: NEG
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43187: LD_ADDR_VAR 0 53
43191: PUSH
43192: LD_INT 0
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 0
43204: PUSH
43205: LD_INT 1
43207: NEG
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: LD_INT 0
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: LD_INT 1
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 0
43235: PUSH
43236: LD_INT 1
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 1
43245: NEG
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: NEG
43257: PUSH
43258: LD_INT 1
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 1
43268: NEG
43269: PUSH
43270: LD_INT 2
43272: NEG
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 0
43280: PUSH
43281: LD_INT 2
43283: NEG
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 1
43291: PUSH
43292: LD_INT 1
43294: NEG
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 2
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 2
43312: PUSH
43313: LD_INT 1
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 2
43322: PUSH
43323: LD_INT 2
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 1
43332: PUSH
43333: LD_INT 2
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: LD_INT 2
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 1
43352: NEG
43353: PUSH
43354: LD_INT 1
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 2
43363: NEG
43364: PUSH
43365: LD_INT 0
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 2
43374: NEG
43375: PUSH
43376: LD_INT 1
43378: NEG
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 2
43386: NEG
43387: PUSH
43388: LD_INT 2
43390: NEG
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43417: LD_ADDR_VAR 0 54
43421: PUSH
43422: LD_INT 0
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: LD_INT 1
43437: NEG
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 1
43445: PUSH
43446: LD_INT 0
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 1
43455: PUSH
43456: LD_INT 1
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 0
43465: PUSH
43466: LD_INT 1
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 1
43475: NEG
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 1
43486: NEG
43487: PUSH
43488: LD_INT 1
43490: NEG
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 1
43498: NEG
43499: PUSH
43500: LD_INT 2
43502: NEG
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 0
43510: PUSH
43511: LD_INT 2
43513: NEG
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 1
43521: PUSH
43522: LD_INT 1
43524: NEG
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 2
43532: PUSH
43533: LD_INT 0
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 2
43542: PUSH
43543: LD_INT 1
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 2
43552: PUSH
43553: LD_INT 2
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 1
43562: PUSH
43563: LD_INT 2
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 0
43572: PUSH
43573: LD_INT 2
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 1
43582: NEG
43583: PUSH
43584: LD_INT 1
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 2
43593: NEG
43594: PUSH
43595: LD_INT 0
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 2
43604: NEG
43605: PUSH
43606: LD_INT 1
43608: NEG
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 2
43616: NEG
43617: PUSH
43618: LD_INT 2
43620: NEG
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43647: LD_ADDR_VAR 0 55
43651: PUSH
43652: LD_INT 0
43654: PUSH
43655: LD_INT 0
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: LD_INT 1
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 1
43685: PUSH
43686: LD_INT 1
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 0
43695: PUSH
43696: LD_INT 1
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 1
43705: NEG
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 1
43716: NEG
43717: PUSH
43718: LD_INT 1
43720: NEG
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 1
43728: NEG
43729: PUSH
43730: LD_INT 2
43732: NEG
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 0
43740: PUSH
43741: LD_INT 2
43743: NEG
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 1
43751: PUSH
43752: LD_INT 1
43754: NEG
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 2
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 2
43772: PUSH
43773: LD_INT 1
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 2
43782: PUSH
43783: LD_INT 2
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 1
43792: PUSH
43793: LD_INT 2
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: LD_INT 2
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 1
43812: NEG
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 2
43823: NEG
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 2
43834: NEG
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 2
43846: NEG
43847: PUSH
43848: LD_INT 2
43850: NEG
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43877: LD_ADDR_VAR 0 56
43881: PUSH
43882: LD_INT 0
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 0
43894: PUSH
43895: LD_INT 1
43897: NEG
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 1
43905: PUSH
43906: LD_INT 0
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: LD_INT 1
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 0
43925: PUSH
43926: LD_INT 1
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 1
43935: NEG
43936: PUSH
43937: LD_INT 0
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: NEG
43947: PUSH
43948: LD_INT 1
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 1
43958: NEG
43959: PUSH
43960: LD_INT 2
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 0
43970: PUSH
43971: LD_INT 2
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 2
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 2
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 2
44012: PUSH
44013: LD_INT 2
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: PUSH
44023: LD_INT 2
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: LD_INT 2
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 1
44042: NEG
44043: PUSH
44044: LD_INT 1
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 2
44053: NEG
44054: PUSH
44055: LD_INT 0
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 2
44064: NEG
44065: PUSH
44066: LD_INT 1
44068: NEG
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 2
44076: NEG
44077: PUSH
44078: LD_INT 2
44080: NEG
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44107: LD_ADDR_VAR 0 57
44111: PUSH
44112: LD_INT 0
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 0
44124: PUSH
44125: LD_INT 1
44127: NEG
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 1
44135: PUSH
44136: LD_INT 0
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 1
44145: PUSH
44146: LD_INT 1
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 0
44155: PUSH
44156: LD_INT 1
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 1
44165: NEG
44166: PUSH
44167: LD_INT 0
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 1
44176: NEG
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 1
44188: NEG
44189: PUSH
44190: LD_INT 2
44192: NEG
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: LD_INT 2
44203: NEG
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: PUSH
44212: LD_INT 1
44214: NEG
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 2
44222: PUSH
44223: LD_INT 0
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 2
44232: PUSH
44233: LD_INT 1
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 2
44242: PUSH
44243: LD_INT 2
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 1
44252: PUSH
44253: LD_INT 2
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 0
44262: PUSH
44263: LD_INT 2
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 1
44272: NEG
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 2
44283: NEG
44284: PUSH
44285: LD_INT 0
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 2
44294: NEG
44295: PUSH
44296: LD_INT 1
44298: NEG
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 2
44306: NEG
44307: PUSH
44308: LD_INT 2
44310: NEG
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44337: LD_ADDR_VAR 0 58
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 0
44354: PUSH
44355: LD_INT 1
44357: NEG
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 1
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: LD_INT 1
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 0
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 1
44395: NEG
44396: PUSH
44397: LD_INT 0
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 1
44406: NEG
44407: PUSH
44408: LD_INT 1
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 1
44418: NEG
44419: PUSH
44420: LD_INT 2
44422: NEG
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: LD_INT 2
44433: NEG
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 1
44441: PUSH
44442: LD_INT 1
44444: NEG
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 2
44452: PUSH
44453: LD_INT 0
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 2
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 2
44472: PUSH
44473: LD_INT 2
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 1
44482: PUSH
44483: LD_INT 2
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 0
44492: PUSH
44493: LD_INT 2
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: NEG
44503: PUSH
44504: LD_INT 1
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 2
44513: NEG
44514: PUSH
44515: LD_INT 0
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 2
44524: NEG
44525: PUSH
44526: LD_INT 1
44528: NEG
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 2
44536: NEG
44537: PUSH
44538: LD_INT 2
44540: NEG
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44567: LD_ADDR_VAR 0 59
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: LD_INT 0
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 0
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: NEG
44626: PUSH
44627: LD_INT 0
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: LD_INT 1
44640: NEG
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44655: LD_ADDR_VAR 0 60
44659: PUSH
44660: LD_INT 0
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 0
44672: PUSH
44673: LD_INT 1
44675: NEG
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 1
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 1
44724: NEG
44725: PUSH
44726: LD_INT 1
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44743: LD_ADDR_VAR 0 61
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: LD_INT 0
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 0
44760: PUSH
44761: LD_INT 1
44763: NEG
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 1
44771: PUSH
44772: LD_INT 0
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 1
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: LD_INT 1
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 1
44801: NEG
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 1
44812: NEG
44813: PUSH
44814: LD_INT 1
44816: NEG
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44831: LD_ADDR_VAR 0 62
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: LD_INT 0
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: LD_INT 1
44851: NEG
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 1
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 1
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 1
44889: NEG
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 1
44900: NEG
44901: PUSH
44902: LD_INT 1
44904: NEG
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44919: LD_ADDR_VAR 0 63
44923: PUSH
44924: LD_INT 0
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 0
44936: PUSH
44937: LD_INT 1
44939: NEG
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 1
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 1
44957: PUSH
44958: LD_INT 1
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: LD_INT 1
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 1
44977: NEG
44978: PUSH
44979: LD_INT 0
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: NEG
44989: PUSH
44990: LD_INT 1
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45007: LD_ADDR_VAR 0 64
45011: PUSH
45012: LD_INT 0
45014: PUSH
45015: LD_INT 0
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: LD_INT 1
45027: NEG
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: LD_INT 0
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 1
45045: PUSH
45046: LD_INT 1
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 0
45055: PUSH
45056: LD_INT 1
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: NEG
45066: PUSH
45067: LD_INT 0
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 1
45076: NEG
45077: PUSH
45078: LD_INT 1
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: ST_TO_ADDR
// end ; 1 :
45095: GO 50992
45097: LD_INT 1
45099: DOUBLE
45100: EQUAL
45101: IFTRUE 45105
45103: GO 47728
45105: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45106: LD_ADDR_VAR 0 11
45110: PUSH
45111: LD_INT 1
45113: NEG
45114: PUSH
45115: LD_INT 3
45117: NEG
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: LD_INT 3
45128: NEG
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 1
45136: PUSH
45137: LD_INT 2
45139: NEG
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: LIST
45149: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45150: LD_ADDR_VAR 0 12
45154: PUSH
45155: LD_INT 2
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 3
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 3
45178: PUSH
45179: LD_INT 1
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: LIST
45190: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45191: LD_ADDR_VAR 0 13
45195: PUSH
45196: LD_INT 3
45198: PUSH
45199: LD_INT 2
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 3
45208: PUSH
45209: LD_INT 3
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 2
45218: PUSH
45219: LD_INT 3
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: LIST
45230: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45231: LD_ADDR_VAR 0 14
45235: PUSH
45236: LD_INT 1
45238: PUSH
45239: LD_INT 3
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 0
45248: PUSH
45249: LD_INT 3
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 1
45258: NEG
45259: PUSH
45260: LD_INT 2
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: LIST
45271: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45272: LD_ADDR_VAR 0 15
45276: PUSH
45277: LD_INT 2
45279: NEG
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 3
45290: NEG
45291: PUSH
45292: LD_INT 0
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 3
45301: NEG
45302: PUSH
45303: LD_INT 1
45305: NEG
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: LIST
45315: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45316: LD_ADDR_VAR 0 16
45320: PUSH
45321: LD_INT 2
45323: NEG
45324: PUSH
45325: LD_INT 3
45327: NEG
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 3
45335: NEG
45336: PUSH
45337: LD_INT 2
45339: NEG
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 3
45347: NEG
45348: PUSH
45349: LD_INT 3
45351: NEG
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: LIST
45361: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45362: LD_ADDR_VAR 0 17
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: LD_INT 3
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 0
45381: PUSH
45382: LD_INT 3
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 1
45392: PUSH
45393: LD_INT 2
45395: NEG
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: LIST
45405: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45406: LD_ADDR_VAR 0 18
45410: PUSH
45411: LD_INT 2
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 3
45424: PUSH
45425: LD_INT 0
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 3
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: LIST
45446: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45447: LD_ADDR_VAR 0 19
45451: PUSH
45452: LD_INT 3
45454: PUSH
45455: LD_INT 2
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 3
45464: PUSH
45465: LD_INT 3
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 2
45474: PUSH
45475: LD_INT 3
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: LIST
45486: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45487: LD_ADDR_VAR 0 20
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: LD_INT 3
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 0
45504: PUSH
45505: LD_INT 3
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 1
45514: NEG
45515: PUSH
45516: LD_INT 2
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: LIST
45527: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45528: LD_ADDR_VAR 0 21
45532: PUSH
45533: LD_INT 2
45535: NEG
45536: PUSH
45537: LD_INT 1
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 3
45546: NEG
45547: PUSH
45548: LD_INT 0
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 3
45557: NEG
45558: PUSH
45559: LD_INT 1
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: LIST
45571: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45572: LD_ADDR_VAR 0 22
45576: PUSH
45577: LD_INT 2
45579: NEG
45580: PUSH
45581: LD_INT 3
45583: NEG
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 3
45591: NEG
45592: PUSH
45593: LD_INT 2
45595: NEG
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 3
45603: NEG
45604: PUSH
45605: LD_INT 3
45607: NEG
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: LIST
45617: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
45618: LD_ADDR_VAR 0 23
45622: PUSH
45623: LD_INT 0
45625: PUSH
45626: LD_INT 3
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: LD_INT 4
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 1
45648: PUSH
45649: LD_INT 3
45651: NEG
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: LIST
45661: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
45662: LD_ADDR_VAR 0 24
45666: PUSH
45667: LD_INT 3
45669: PUSH
45670: LD_INT 0
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 3
45679: PUSH
45680: LD_INT 1
45682: NEG
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 4
45690: PUSH
45691: LD_INT 1
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: LIST
45702: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
45703: LD_ADDR_VAR 0 25
45707: PUSH
45708: LD_INT 3
45710: PUSH
45711: LD_INT 3
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 4
45720: PUSH
45721: LD_INT 3
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 3
45730: PUSH
45731: LD_INT 4
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: LIST
45742: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
45743: LD_ADDR_VAR 0 26
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: LD_INT 3
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: LD_INT 4
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: NEG
45771: PUSH
45772: LD_INT 3
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: LIST
45783: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
45784: LD_ADDR_VAR 0 27
45788: PUSH
45789: LD_INT 3
45791: NEG
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 3
45802: NEG
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 4
45813: NEG
45814: PUSH
45815: LD_INT 1
45817: NEG
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: LIST
45827: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
45828: LD_ADDR_VAR 0 28
45832: PUSH
45833: LD_INT 3
45835: NEG
45836: PUSH
45837: LD_INT 3
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 3
45847: NEG
45848: PUSH
45849: LD_INT 4
45851: NEG
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 4
45859: NEG
45860: PUSH
45861: LD_INT 3
45863: NEG
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: LIST
45873: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
45874: LD_ADDR_VAR 0 29
45878: PUSH
45879: LD_INT 1
45881: NEG
45882: PUSH
45883: LD_INT 3
45885: NEG
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 0
45893: PUSH
45894: LD_INT 3
45896: NEG
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 1
45904: PUSH
45905: LD_INT 2
45907: NEG
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 1
45915: NEG
45916: PUSH
45917: LD_INT 4
45919: NEG
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: LD_INT 4
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: LD_INT 3
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: NEG
45950: PUSH
45951: LD_INT 5
45953: NEG
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: LD_INT 5
45964: NEG
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: LD_INT 4
45975: NEG
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: LD_INT 6
45987: NEG
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: LD_INT 6
45998: NEG
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 1
46006: PUSH
46007: LD_INT 5
46009: NEG
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46029: LD_ADDR_VAR 0 30
46033: PUSH
46034: LD_INT 2
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 3
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 3
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 3
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 4
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 4
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 4
46098: PUSH
46099: LD_INT 1
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 5
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 5
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 5
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 6
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 6
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46172: LD_ADDR_VAR 0 31
46176: PUSH
46177: LD_INT 3
46179: PUSH
46180: LD_INT 2
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 3
46189: PUSH
46190: LD_INT 3
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 2
46199: PUSH
46200: LD_INT 3
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 4
46209: PUSH
46210: LD_INT 3
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 4
46219: PUSH
46220: LD_INT 4
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 3
46229: PUSH
46230: LD_INT 4
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 5
46239: PUSH
46240: LD_INT 4
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 5
46249: PUSH
46250: LD_INT 5
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 4
46259: PUSH
46260: LD_INT 5
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 6
46269: PUSH
46270: LD_INT 5
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 6
46279: PUSH
46280: LD_INT 6
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 5
46289: PUSH
46290: LD_INT 6
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46311: LD_ADDR_VAR 0 32
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: LD_INT 3
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 0
46328: PUSH
46329: LD_INT 3
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 1
46338: NEG
46339: PUSH
46340: LD_INT 2
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 1
46349: PUSH
46350: LD_INT 4
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 0
46359: PUSH
46360: LD_INT 4
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 1
46369: NEG
46370: PUSH
46371: LD_INT 3
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: LD_INT 5
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: LD_INT 5
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: LD_INT 4
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: LD_INT 6
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 0
46421: PUSH
46422: LD_INT 6
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 1
46431: NEG
46432: PUSH
46433: LD_INT 5
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
46454: LD_ADDR_VAR 0 33
46458: PUSH
46459: LD_INT 2
46461: NEG
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 3
46472: NEG
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 3
46483: NEG
46484: PUSH
46485: LD_INT 1
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 3
46495: NEG
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 4
46506: NEG
46507: PUSH
46508: LD_INT 0
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 4
46517: NEG
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 4
46529: NEG
46530: PUSH
46531: LD_INT 1
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 5
46540: NEG
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 5
46551: NEG
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 5
46563: NEG
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 6
46574: NEG
46575: PUSH
46576: LD_INT 0
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 6
46585: NEG
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
46609: LD_ADDR_VAR 0 34
46613: PUSH
46614: LD_INT 2
46616: NEG
46617: PUSH
46618: LD_INT 3
46620: NEG
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 3
46628: NEG
46629: PUSH
46630: LD_INT 2
46632: NEG
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 3
46640: NEG
46641: PUSH
46642: LD_INT 3
46644: NEG
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 3
46652: NEG
46653: PUSH
46654: LD_INT 4
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 4
46664: NEG
46665: PUSH
46666: LD_INT 3
46668: NEG
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 4
46676: NEG
46677: PUSH
46678: LD_INT 4
46680: NEG
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 4
46688: NEG
46689: PUSH
46690: LD_INT 5
46692: NEG
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 5
46700: NEG
46701: PUSH
46702: LD_INT 4
46704: NEG
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 5
46712: NEG
46713: PUSH
46714: LD_INT 5
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 5
46724: NEG
46725: PUSH
46726: LD_INT 6
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 6
46736: NEG
46737: PUSH
46738: LD_INT 5
46740: NEG
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 6
46748: NEG
46749: PUSH
46750: LD_INT 6
46752: NEG
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
46772: LD_ADDR_VAR 0 41
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: LD_INT 2
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: LD_INT 3
46794: NEG
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: PUSH
46803: LD_INT 2
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: LIST
46815: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
46816: LD_ADDR_VAR 0 42
46820: PUSH
46821: LD_INT 2
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 2
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 3
46844: PUSH
46845: LD_INT 1
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: LIST
46856: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
46857: LD_ADDR_VAR 0 43
46861: PUSH
46862: LD_INT 2
46864: PUSH
46865: LD_INT 2
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 3
46874: PUSH
46875: LD_INT 2
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 2
46884: PUSH
46885: LD_INT 3
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: LIST
46896: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
46897: LD_ADDR_VAR 0 44
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: LD_INT 2
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 1
46914: PUSH
46915: LD_INT 3
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 1
46924: NEG
46925: PUSH
46926: LD_INT 2
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: LIST
46937: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46938: LD_ADDR_VAR 0 45
46942: PUSH
46943: LD_INT 2
46945: NEG
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 2
46956: NEG
46957: PUSH
46958: LD_INT 1
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 3
46967: NEG
46968: PUSH
46969: LD_INT 1
46971: NEG
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: LIST
46981: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
46982: LD_ADDR_VAR 0 46
46986: PUSH
46987: LD_INT 2
46989: NEG
46990: PUSH
46991: LD_INT 2
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 2
47001: NEG
47002: PUSH
47003: LD_INT 3
47005: NEG
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 3
47013: NEG
47014: PUSH
47015: LD_INT 2
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: LIST
47027: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47028: LD_ADDR_VAR 0 47
47032: PUSH
47033: LD_INT 2
47035: NEG
47036: PUSH
47037: LD_INT 3
47039: NEG
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: LD_INT 3
47051: NEG
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47061: LD_ADDR_VAR 0 48
47065: PUSH
47066: LD_INT 1
47068: PUSH
47069: LD_INT 2
47071: NEG
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 2
47079: PUSH
47080: LD_INT 1
47082: NEG
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47092: LD_ADDR_VAR 0 49
47096: PUSH
47097: LD_INT 3
47099: PUSH
47100: LD_INT 1
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 3
47109: PUSH
47110: LD_INT 2
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47121: LD_ADDR_VAR 0 50
47125: PUSH
47126: LD_INT 2
47128: PUSH
47129: LD_INT 3
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: LD_INT 3
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47150: LD_ADDR_VAR 0 51
47154: PUSH
47155: LD_INT 1
47157: NEG
47158: PUSH
47159: LD_INT 2
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 2
47168: NEG
47169: PUSH
47170: LD_INT 1
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47181: LD_ADDR_VAR 0 52
47185: PUSH
47186: LD_INT 3
47188: NEG
47189: PUSH
47190: LD_INT 1
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 3
47200: NEG
47201: PUSH
47202: LD_INT 2
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47214: LD_ADDR_VAR 0 53
47218: PUSH
47219: LD_INT 1
47221: NEG
47222: PUSH
47223: LD_INT 3
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 0
47233: PUSH
47234: LD_INT 3
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: PUSH
47245: LD_INT 2
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: LIST
47257: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47258: LD_ADDR_VAR 0 54
47262: PUSH
47263: LD_INT 2
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 3
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 3
47286: PUSH
47287: LD_INT 1
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: LIST
47298: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47299: LD_ADDR_VAR 0 55
47303: PUSH
47304: LD_INT 3
47306: PUSH
47307: LD_INT 2
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 3
47316: PUSH
47317: LD_INT 3
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 2
47326: PUSH
47327: LD_INT 3
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: LIST
47338: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47339: LD_ADDR_VAR 0 56
47343: PUSH
47344: LD_INT 1
47346: PUSH
47347: LD_INT 3
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: LD_INT 3
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: LD_INT 2
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: LIST
47379: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47380: LD_ADDR_VAR 0 57
47384: PUSH
47385: LD_INT 2
47387: NEG
47388: PUSH
47389: LD_INT 1
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 3
47398: NEG
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 3
47409: NEG
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: LIST
47423: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47424: LD_ADDR_VAR 0 58
47428: PUSH
47429: LD_INT 2
47431: NEG
47432: PUSH
47433: LD_INT 3
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 3
47443: NEG
47444: PUSH
47445: LD_INT 2
47447: NEG
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 3
47455: NEG
47456: PUSH
47457: LD_INT 3
47459: NEG
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: LIST
47469: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
47470: LD_ADDR_VAR 0 59
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: LD_INT 2
47481: NEG
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: LD_INT 2
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: LIST
47513: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47514: LD_ADDR_VAR 0 60
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: LD_INT 1
47524: NEG
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 2
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 2
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: LIST
47554: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47555: LD_ADDR_VAR 0 61
47559: PUSH
47560: LD_INT 2
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 2
47572: PUSH
47573: LD_INT 2
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 1
47582: PUSH
47583: LD_INT 2
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: LIST
47594: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47595: LD_ADDR_VAR 0 62
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: LD_INT 2
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: LD_INT 2
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: LD_INT 1
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: LIST
47635: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47636: LD_ADDR_VAR 0 63
47640: PUSH
47641: LD_INT 1
47643: NEG
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 2
47654: NEG
47655: PUSH
47656: LD_INT 0
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 2
47665: NEG
47666: PUSH
47667: LD_INT 1
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: LIST
47679: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47680: LD_ADDR_VAR 0 64
47684: PUSH
47685: LD_INT 1
47687: NEG
47688: PUSH
47689: LD_INT 2
47691: NEG
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 2
47699: NEG
47700: PUSH
47701: LD_INT 1
47703: NEG
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 2
47711: NEG
47712: PUSH
47713: LD_INT 2
47715: NEG
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: LIST
47725: ST_TO_ADDR
// end ; 2 :
47726: GO 50992
47728: LD_INT 2
47730: DOUBLE
47731: EQUAL
47732: IFTRUE 47736
47734: GO 50991
47736: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
47737: LD_ADDR_VAR 0 29
47741: PUSH
47742: LD_INT 4
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 4
47754: PUSH
47755: LD_INT 1
47757: NEG
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 5
47765: PUSH
47766: LD_INT 0
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 5
47775: PUSH
47776: LD_INT 1
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 4
47785: PUSH
47786: LD_INT 1
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 3
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 3
47805: PUSH
47806: LD_INT 1
47808: NEG
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 3
47816: PUSH
47817: LD_INT 2
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 5
47827: PUSH
47828: LD_INT 2
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 3
47837: PUSH
47838: LD_INT 3
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 3
47847: PUSH
47848: LD_INT 2
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 4
47857: PUSH
47858: LD_INT 3
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 4
47867: PUSH
47868: LD_INT 4
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 3
47877: PUSH
47878: LD_INT 4
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 2
47887: PUSH
47888: LD_INT 3
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 2
47897: PUSH
47898: LD_INT 2
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 4
47907: PUSH
47908: LD_INT 2
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 2
47917: PUSH
47918: LD_INT 4
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: LD_INT 4
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: LD_INT 3
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: LD_INT 4
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 1
47957: PUSH
47958: LD_INT 5
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 0
47967: PUSH
47968: LD_INT 5
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 1
47977: NEG
47978: PUSH
47979: LD_INT 4
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: LD_INT 3
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 2
47999: PUSH
48000: LD_INT 5
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 2
48009: NEG
48010: PUSH
48011: LD_INT 3
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 3
48020: NEG
48021: PUSH
48022: LD_INT 0
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 3
48031: NEG
48032: PUSH
48033: LD_INT 1
48035: NEG
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 2
48043: NEG
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 2
48054: NEG
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 3
48065: NEG
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 4
48076: NEG
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 4
48087: NEG
48088: PUSH
48089: LD_INT 1
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 4
48099: NEG
48100: PUSH
48101: LD_INT 2
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 2
48111: NEG
48112: PUSH
48113: LD_INT 2
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 4
48122: NEG
48123: PUSH
48124: LD_INT 4
48126: NEG
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 4
48134: NEG
48135: PUSH
48136: LD_INT 5
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 3
48146: NEG
48147: PUSH
48148: LD_INT 4
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 3
48158: NEG
48159: PUSH
48160: LD_INT 3
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 4
48170: NEG
48171: PUSH
48172: LD_INT 3
48174: NEG
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 5
48182: NEG
48183: PUSH
48184: LD_INT 4
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 5
48194: NEG
48195: PUSH
48196: LD_INT 5
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 3
48206: NEG
48207: PUSH
48208: LD_INT 5
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 5
48218: NEG
48219: PUSH
48220: LD_INT 3
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48275: LD_ADDR_VAR 0 30
48279: PUSH
48280: LD_INT 4
48282: PUSH
48283: LD_INT 4
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 4
48292: PUSH
48293: LD_INT 3
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 5
48302: PUSH
48303: LD_INT 4
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 5
48312: PUSH
48313: LD_INT 5
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 4
48322: PUSH
48323: LD_INT 5
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 3
48332: PUSH
48333: LD_INT 4
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 3
48342: PUSH
48343: LD_INT 3
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 5
48352: PUSH
48353: LD_INT 3
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 3
48362: PUSH
48363: LD_INT 5
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 0
48372: PUSH
48373: LD_INT 3
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: LD_INT 2
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 1
48392: PUSH
48393: LD_INT 3
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 1
48402: PUSH
48403: LD_INT 4
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: LD_INT 4
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 1
48422: NEG
48423: PUSH
48424: LD_INT 3
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 2
48444: PUSH
48445: LD_INT 4
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 2
48454: NEG
48455: PUSH
48456: LD_INT 2
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 4
48465: NEG
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 4
48476: NEG
48477: PUSH
48478: LD_INT 1
48480: NEG
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 3
48488: NEG
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 3
48499: NEG
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 4
48510: NEG
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 5
48521: NEG
48522: PUSH
48523: LD_INT 0
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 5
48532: NEG
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 5
48544: NEG
48545: PUSH
48546: LD_INT 2
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 3
48556: NEG
48557: PUSH
48558: LD_INT 2
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 3
48567: NEG
48568: PUSH
48569: LD_INT 3
48571: NEG
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 3
48579: NEG
48580: PUSH
48581: LD_INT 4
48583: NEG
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 2
48591: NEG
48592: PUSH
48593: LD_INT 3
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 2
48603: NEG
48604: PUSH
48605: LD_INT 2
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 3
48615: NEG
48616: PUSH
48617: LD_INT 2
48619: NEG
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 4
48627: NEG
48628: PUSH
48629: LD_INT 3
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 4
48639: NEG
48640: PUSH
48641: LD_INT 4
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 2
48651: NEG
48652: PUSH
48653: LD_INT 4
48655: NEG
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 4
48663: NEG
48664: PUSH
48665: LD_INT 2
48667: NEG
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 0
48675: PUSH
48676: LD_INT 4
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: LD_INT 5
48689: NEG
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: LD_INT 4
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: PUSH
48709: LD_INT 3
48711: NEG
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 0
48719: PUSH
48720: LD_INT 3
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: LD_INT 4
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 1
48742: NEG
48743: PUSH
48744: LD_INT 5
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 2
48754: PUSH
48755: LD_INT 3
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 2
48765: NEG
48766: PUSH
48767: LD_INT 5
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
48822: LD_ADDR_VAR 0 31
48826: PUSH
48827: LD_INT 0
48829: PUSH
48830: LD_INT 4
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: LD_INT 3
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 1
48849: PUSH
48850: LD_INT 4
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: LD_INT 5
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: LD_INT 5
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 1
48879: NEG
48880: PUSH
48881: LD_INT 4
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: NEG
48891: PUSH
48892: LD_INT 3
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 2
48901: PUSH
48902: LD_INT 5
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 2
48911: NEG
48912: PUSH
48913: LD_INT 3
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 3
48922: NEG
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 3
48933: NEG
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 2
48945: NEG
48946: PUSH
48947: LD_INT 0
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 2
48956: NEG
48957: PUSH
48958: LD_INT 1
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 3
48967: NEG
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 4
48978: NEG
48979: PUSH
48980: LD_INT 0
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 4
48989: NEG
48990: PUSH
48991: LD_INT 1
48993: NEG
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 4
49001: NEG
49002: PUSH
49003: LD_INT 2
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 2
49013: NEG
49014: PUSH
49015: LD_INT 2
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 4
49024: NEG
49025: PUSH
49026: LD_INT 4
49028: NEG
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 4
49036: NEG
49037: PUSH
49038: LD_INT 5
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 3
49048: NEG
49049: PUSH
49050: LD_INT 4
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 3
49060: NEG
49061: PUSH
49062: LD_INT 3
49064: NEG
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 4
49072: NEG
49073: PUSH
49074: LD_INT 3
49076: NEG
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 5
49084: NEG
49085: PUSH
49086: LD_INT 4
49088: NEG
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 5
49096: NEG
49097: PUSH
49098: LD_INT 5
49100: NEG
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 3
49108: NEG
49109: PUSH
49110: LD_INT 5
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 5
49120: NEG
49121: PUSH
49122: LD_INT 3
49124: NEG
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 0
49132: PUSH
49133: LD_INT 3
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: LD_INT 4
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: LD_INT 3
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 1
49165: PUSH
49166: LD_INT 2
49168: NEG
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: LD_INT 2
49179: NEG
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 1
49187: NEG
49188: PUSH
49189: LD_INT 3
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: LD_INT 4
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 2
49211: PUSH
49212: LD_INT 2
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 2
49222: NEG
49223: PUSH
49224: LD_INT 4
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 4
49234: PUSH
49235: LD_INT 0
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 4
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 5
49255: PUSH
49256: LD_INT 0
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 5
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 4
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 3
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 3
49295: PUSH
49296: LD_INT 1
49298: NEG
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 3
49306: PUSH
49307: LD_INT 2
49309: NEG
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 5
49317: PUSH
49318: LD_INT 2
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49372: LD_ADDR_VAR 0 32
49376: PUSH
49377: LD_INT 4
49379: NEG
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 4
49390: NEG
49391: PUSH
49392: LD_INT 1
49394: NEG
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 3
49402: NEG
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 3
49413: NEG
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 4
49424: NEG
49425: PUSH
49426: LD_INT 1
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 5
49435: NEG
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 5
49446: NEG
49447: PUSH
49448: LD_INT 1
49450: NEG
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 5
49458: NEG
49459: PUSH
49460: LD_INT 2
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 3
49470: NEG
49471: PUSH
49472: LD_INT 2
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 3
49481: NEG
49482: PUSH
49483: LD_INT 3
49485: NEG
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 3
49493: NEG
49494: PUSH
49495: LD_INT 4
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 2
49505: NEG
49506: PUSH
49507: LD_INT 3
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 2
49517: NEG
49518: PUSH
49519: LD_INT 2
49521: NEG
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 3
49529: NEG
49530: PUSH
49531: LD_INT 2
49533: NEG
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 4
49541: NEG
49542: PUSH
49543: LD_INT 3
49545: NEG
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 4
49553: NEG
49554: PUSH
49555: LD_INT 4
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 2
49565: NEG
49566: PUSH
49567: LD_INT 4
49569: NEG
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 4
49577: NEG
49578: PUSH
49579: LD_INT 2
49581: NEG
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: LD_INT 4
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: LD_INT 5
49603: NEG
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 1
49611: PUSH
49612: LD_INT 4
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 1
49622: PUSH
49623: LD_INT 3
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: LD_INT 3
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: NEG
49645: PUSH
49646: LD_INT 4
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 1
49656: NEG
49657: PUSH
49658: LD_INT 5
49660: NEG
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 2
49668: PUSH
49669: LD_INT 3
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 2
49679: NEG
49680: PUSH
49681: LD_INT 5
49683: NEG
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 3
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 3
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 4
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 4
49722: PUSH
49723: LD_INT 1
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 3
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 2
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 2
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 2
49763: PUSH
49764: LD_INT 2
49766: NEG
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 4
49774: PUSH
49775: LD_INT 2
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 4
49784: PUSH
49785: LD_INT 4
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 4
49794: PUSH
49795: LD_INT 3
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 5
49804: PUSH
49805: LD_INT 4
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 5
49814: PUSH
49815: LD_INT 5
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 4
49824: PUSH
49825: LD_INT 5
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 3
49834: PUSH
49835: LD_INT 4
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 3
49844: PUSH
49845: LD_INT 3
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 5
49854: PUSH
49855: LD_INT 3
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 3
49864: PUSH
49865: LD_INT 5
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
49919: LD_ADDR_VAR 0 33
49923: PUSH
49924: LD_INT 4
49926: NEG
49927: PUSH
49928: LD_INT 4
49930: NEG
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 4
49938: NEG
49939: PUSH
49940: LD_INT 5
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 3
49950: NEG
49951: PUSH
49952: LD_INT 4
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 3
49962: NEG
49963: PUSH
49964: LD_INT 3
49966: NEG
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 4
49974: NEG
49975: PUSH
49976: LD_INT 3
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 5
49986: NEG
49987: PUSH
49988: LD_INT 4
49990: NEG
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 5
49998: NEG
49999: PUSH
50000: LD_INT 5
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 3
50010: NEG
50011: PUSH
50012: LD_INT 5
50014: NEG
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 5
50022: NEG
50023: PUSH
50024: LD_INT 3
50026: NEG
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: LD_INT 3
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: LD_INT 4
50048: NEG
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: LD_INT 3
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: LD_INT 2
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: LD_INT 2
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: NEG
50090: PUSH
50091: LD_INT 3
50093: NEG
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 1
50101: NEG
50102: PUSH
50103: LD_INT 4
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 2
50113: PUSH
50114: LD_INT 2
50116: NEG
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 2
50124: NEG
50125: PUSH
50126: LD_INT 4
50128: NEG
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 4
50136: PUSH
50137: LD_INT 0
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 4
50146: PUSH
50147: LD_INT 1
50149: NEG
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 5
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 5
50167: PUSH
50168: LD_INT 1
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 4
50177: PUSH
50178: LD_INT 1
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 3
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 3
50197: PUSH
50198: LD_INT 1
50200: NEG
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 3
50208: PUSH
50209: LD_INT 2
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 5
50219: PUSH
50220: LD_INT 2
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 3
50229: PUSH
50230: LD_INT 3
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 3
50239: PUSH
50240: LD_INT 2
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 4
50249: PUSH
50250: LD_INT 3
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 4
50259: PUSH
50260: LD_INT 4
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 3
50269: PUSH
50270: LD_INT 4
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 2
50279: PUSH
50280: LD_INT 3
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 2
50289: PUSH
50290: LD_INT 2
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 4
50299: PUSH
50300: LD_INT 2
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 2
50309: PUSH
50310: LD_INT 4
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: LD_INT 4
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 0
50329: PUSH
50330: LD_INT 3
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 1
50339: PUSH
50340: LD_INT 4
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: LD_INT 5
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 0
50359: PUSH
50360: LD_INT 5
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 1
50369: NEG
50370: PUSH
50371: LD_INT 4
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 1
50380: NEG
50381: PUSH
50382: LD_INT 3
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 2
50391: PUSH
50392: LD_INT 5
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 2
50401: NEG
50402: PUSH
50403: LD_INT 3
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
50457: LD_ADDR_VAR 0 34
50461: PUSH
50462: LD_INT 0
50464: PUSH
50465: LD_INT 4
50467: NEG
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: LD_INT 5
50478: NEG
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: LD_INT 4
50489: NEG
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 1
50497: PUSH
50498: LD_INT 3
50500: NEG
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: LD_INT 3
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: LD_INT 4
50523: NEG
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 1
50531: NEG
50532: PUSH
50533: LD_INT 5
50535: NEG
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 2
50543: PUSH
50544: LD_INT 3
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 2
50554: NEG
50555: PUSH
50556: LD_INT 5
50558: NEG
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 3
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 3
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 4
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 4
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 3
50607: PUSH
50608: LD_INT 1
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 2
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 2
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 2
50638: PUSH
50639: LD_INT 2
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 4
50649: PUSH
50650: LD_INT 2
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 4
50659: PUSH
50660: LD_INT 4
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 4
50669: PUSH
50670: LD_INT 3
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 5
50679: PUSH
50680: LD_INT 4
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 5
50689: PUSH
50690: LD_INT 5
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 4
50699: PUSH
50700: LD_INT 5
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 3
50709: PUSH
50710: LD_INT 4
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 3
50719: PUSH
50720: LD_INT 3
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 5
50729: PUSH
50730: LD_INT 3
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 3
50739: PUSH
50740: LD_INT 5
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 0
50749: PUSH
50750: LD_INT 3
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: LD_INT 2
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: LD_INT 3
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 1
50779: PUSH
50780: LD_INT 4
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 0
50789: PUSH
50790: LD_INT 4
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 1
50799: NEG
50800: PUSH
50801: LD_INT 3
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 1
50810: NEG
50811: PUSH
50812: LD_INT 2
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 2
50821: PUSH
50822: LD_INT 4
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 2
50831: NEG
50832: PUSH
50833: LD_INT 2
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 4
50842: NEG
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 4
50853: NEG
50854: PUSH
50855: LD_INT 1
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 3
50865: NEG
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 3
50876: NEG
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 4
50887: NEG
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 5
50898: NEG
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 5
50909: NEG
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 5
50921: NEG
50922: PUSH
50923: LD_INT 2
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 3
50933: NEG
50934: PUSH
50935: LD_INT 2
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: ST_TO_ADDR
// end ; end ;
50989: GO 50992
50991: POP
// case btype of b_depot , b_warehouse :
50992: LD_VAR 0 1
50996: PUSH
50997: LD_INT 0
50999: DOUBLE
51000: EQUAL
51001: IFTRUE 51011
51003: LD_INT 1
51005: DOUBLE
51006: EQUAL
51007: IFTRUE 51011
51009: GO 51212
51011: POP
// case nation of nation_american :
51012: LD_VAR 0 5
51016: PUSH
51017: LD_INT 1
51019: DOUBLE
51020: EQUAL
51021: IFTRUE 51025
51023: GO 51081
51025: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
51026: LD_ADDR_VAR 0 9
51030: PUSH
51031: LD_VAR 0 11
51035: PUSH
51036: LD_VAR 0 12
51040: PUSH
51041: LD_VAR 0 13
51045: PUSH
51046: LD_VAR 0 14
51050: PUSH
51051: LD_VAR 0 15
51055: PUSH
51056: LD_VAR 0 16
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: PUSH
51069: LD_VAR 0 4
51073: PUSH
51074: LD_INT 1
51076: PLUS
51077: ARRAY
51078: ST_TO_ADDR
51079: GO 51210
51081: LD_INT 2
51083: DOUBLE
51084: EQUAL
51085: IFTRUE 51089
51087: GO 51145
51089: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
51090: LD_ADDR_VAR 0 9
51094: PUSH
51095: LD_VAR 0 17
51099: PUSH
51100: LD_VAR 0 18
51104: PUSH
51105: LD_VAR 0 19
51109: PUSH
51110: LD_VAR 0 20
51114: PUSH
51115: LD_VAR 0 21
51119: PUSH
51120: LD_VAR 0 22
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: PUSH
51133: LD_VAR 0 4
51137: PUSH
51138: LD_INT 1
51140: PLUS
51141: ARRAY
51142: ST_TO_ADDR
51143: GO 51210
51145: LD_INT 3
51147: DOUBLE
51148: EQUAL
51149: IFTRUE 51153
51151: GO 51209
51153: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51154: LD_ADDR_VAR 0 9
51158: PUSH
51159: LD_VAR 0 23
51163: PUSH
51164: LD_VAR 0 24
51168: PUSH
51169: LD_VAR 0 25
51173: PUSH
51174: LD_VAR 0 26
51178: PUSH
51179: LD_VAR 0 27
51183: PUSH
51184: LD_VAR 0 28
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: PUSH
51197: LD_VAR 0 4
51201: PUSH
51202: LD_INT 1
51204: PLUS
51205: ARRAY
51206: ST_TO_ADDR
51207: GO 51210
51209: POP
51210: GO 51765
51212: LD_INT 2
51214: DOUBLE
51215: EQUAL
51216: IFTRUE 51226
51218: LD_INT 3
51220: DOUBLE
51221: EQUAL
51222: IFTRUE 51226
51224: GO 51282
51226: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51227: LD_ADDR_VAR 0 9
51231: PUSH
51232: LD_VAR 0 29
51236: PUSH
51237: LD_VAR 0 30
51241: PUSH
51242: LD_VAR 0 31
51246: PUSH
51247: LD_VAR 0 32
51251: PUSH
51252: LD_VAR 0 33
51256: PUSH
51257: LD_VAR 0 34
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: PUSH
51270: LD_VAR 0 4
51274: PUSH
51275: LD_INT 1
51277: PLUS
51278: ARRAY
51279: ST_TO_ADDR
51280: GO 51765
51282: LD_INT 16
51284: DOUBLE
51285: EQUAL
51286: IFTRUE 51344
51288: LD_INT 17
51290: DOUBLE
51291: EQUAL
51292: IFTRUE 51344
51294: LD_INT 18
51296: DOUBLE
51297: EQUAL
51298: IFTRUE 51344
51300: LD_INT 19
51302: DOUBLE
51303: EQUAL
51304: IFTRUE 51344
51306: LD_INT 22
51308: DOUBLE
51309: EQUAL
51310: IFTRUE 51344
51312: LD_INT 20
51314: DOUBLE
51315: EQUAL
51316: IFTRUE 51344
51318: LD_INT 21
51320: DOUBLE
51321: EQUAL
51322: IFTRUE 51344
51324: LD_INT 23
51326: DOUBLE
51327: EQUAL
51328: IFTRUE 51344
51330: LD_INT 24
51332: DOUBLE
51333: EQUAL
51334: IFTRUE 51344
51336: LD_INT 25
51338: DOUBLE
51339: EQUAL
51340: IFTRUE 51344
51342: GO 51400
51344: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51345: LD_ADDR_VAR 0 9
51349: PUSH
51350: LD_VAR 0 35
51354: PUSH
51355: LD_VAR 0 36
51359: PUSH
51360: LD_VAR 0 37
51364: PUSH
51365: LD_VAR 0 38
51369: PUSH
51370: LD_VAR 0 39
51374: PUSH
51375: LD_VAR 0 40
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: PUSH
51388: LD_VAR 0 4
51392: PUSH
51393: LD_INT 1
51395: PLUS
51396: ARRAY
51397: ST_TO_ADDR
51398: GO 51765
51400: LD_INT 6
51402: DOUBLE
51403: EQUAL
51404: IFTRUE 51456
51406: LD_INT 7
51408: DOUBLE
51409: EQUAL
51410: IFTRUE 51456
51412: LD_INT 8
51414: DOUBLE
51415: EQUAL
51416: IFTRUE 51456
51418: LD_INT 13
51420: DOUBLE
51421: EQUAL
51422: IFTRUE 51456
51424: LD_INT 12
51426: DOUBLE
51427: EQUAL
51428: IFTRUE 51456
51430: LD_INT 15
51432: DOUBLE
51433: EQUAL
51434: IFTRUE 51456
51436: LD_INT 11
51438: DOUBLE
51439: EQUAL
51440: IFTRUE 51456
51442: LD_INT 14
51444: DOUBLE
51445: EQUAL
51446: IFTRUE 51456
51448: LD_INT 10
51450: DOUBLE
51451: EQUAL
51452: IFTRUE 51456
51454: GO 51512
51456: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
51457: LD_ADDR_VAR 0 9
51461: PUSH
51462: LD_VAR 0 41
51466: PUSH
51467: LD_VAR 0 42
51471: PUSH
51472: LD_VAR 0 43
51476: PUSH
51477: LD_VAR 0 44
51481: PUSH
51482: LD_VAR 0 45
51486: PUSH
51487: LD_VAR 0 46
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: PUSH
51500: LD_VAR 0 4
51504: PUSH
51505: LD_INT 1
51507: PLUS
51508: ARRAY
51509: ST_TO_ADDR
51510: GO 51765
51512: LD_INT 36
51514: DOUBLE
51515: EQUAL
51516: IFTRUE 51520
51518: GO 51576
51520: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
51521: LD_ADDR_VAR 0 9
51525: PUSH
51526: LD_VAR 0 47
51530: PUSH
51531: LD_VAR 0 48
51535: PUSH
51536: LD_VAR 0 49
51540: PUSH
51541: LD_VAR 0 50
51545: PUSH
51546: LD_VAR 0 51
51550: PUSH
51551: LD_VAR 0 52
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: PUSH
51564: LD_VAR 0 4
51568: PUSH
51569: LD_INT 1
51571: PLUS
51572: ARRAY
51573: ST_TO_ADDR
51574: GO 51765
51576: LD_INT 4
51578: DOUBLE
51579: EQUAL
51580: IFTRUE 51602
51582: LD_INT 5
51584: DOUBLE
51585: EQUAL
51586: IFTRUE 51602
51588: LD_INT 34
51590: DOUBLE
51591: EQUAL
51592: IFTRUE 51602
51594: LD_INT 37
51596: DOUBLE
51597: EQUAL
51598: IFTRUE 51602
51600: GO 51658
51602: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
51603: LD_ADDR_VAR 0 9
51607: PUSH
51608: LD_VAR 0 53
51612: PUSH
51613: LD_VAR 0 54
51617: PUSH
51618: LD_VAR 0 55
51622: PUSH
51623: LD_VAR 0 56
51627: PUSH
51628: LD_VAR 0 57
51632: PUSH
51633: LD_VAR 0 58
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: PUSH
51646: LD_VAR 0 4
51650: PUSH
51651: LD_INT 1
51653: PLUS
51654: ARRAY
51655: ST_TO_ADDR
51656: GO 51765
51658: LD_INT 31
51660: DOUBLE
51661: EQUAL
51662: IFTRUE 51708
51664: LD_INT 32
51666: DOUBLE
51667: EQUAL
51668: IFTRUE 51708
51670: LD_INT 33
51672: DOUBLE
51673: EQUAL
51674: IFTRUE 51708
51676: LD_INT 27
51678: DOUBLE
51679: EQUAL
51680: IFTRUE 51708
51682: LD_INT 26
51684: DOUBLE
51685: EQUAL
51686: IFTRUE 51708
51688: LD_INT 28
51690: DOUBLE
51691: EQUAL
51692: IFTRUE 51708
51694: LD_INT 29
51696: DOUBLE
51697: EQUAL
51698: IFTRUE 51708
51700: LD_INT 30
51702: DOUBLE
51703: EQUAL
51704: IFTRUE 51708
51706: GO 51764
51708: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
51709: LD_ADDR_VAR 0 9
51713: PUSH
51714: LD_VAR 0 59
51718: PUSH
51719: LD_VAR 0 60
51723: PUSH
51724: LD_VAR 0 61
51728: PUSH
51729: LD_VAR 0 62
51733: PUSH
51734: LD_VAR 0 63
51738: PUSH
51739: LD_VAR 0 64
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: PUSH
51752: LD_VAR 0 4
51756: PUSH
51757: LD_INT 1
51759: PLUS
51760: ARRAY
51761: ST_TO_ADDR
51762: GO 51765
51764: POP
// temp_list2 = [ ] ;
51765: LD_ADDR_VAR 0 10
51769: PUSH
51770: EMPTY
51771: ST_TO_ADDR
// for i in temp_list do
51772: LD_ADDR_VAR 0 8
51776: PUSH
51777: LD_VAR 0 9
51781: PUSH
51782: FOR_IN
51783: IFFALSE 51835
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
51785: LD_ADDR_VAR 0 10
51789: PUSH
51790: LD_VAR 0 10
51794: PUSH
51795: LD_VAR 0 8
51799: PUSH
51800: LD_INT 1
51802: ARRAY
51803: PUSH
51804: LD_VAR 0 2
51808: PLUS
51809: PUSH
51810: LD_VAR 0 8
51814: PUSH
51815: LD_INT 2
51817: ARRAY
51818: PUSH
51819: LD_VAR 0 3
51823: PLUS
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: EMPTY
51830: LIST
51831: ADD
51832: ST_TO_ADDR
51833: GO 51782
51835: POP
51836: POP
// result = temp_list2 ;
51837: LD_ADDR_VAR 0 7
51841: PUSH
51842: LD_VAR 0 10
51846: ST_TO_ADDR
// end ;
51847: LD_VAR 0 7
51851: RET
// export function EnemyInRange ( unit , dist ) ; begin
51852: LD_INT 0
51854: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
51855: LD_ADDR_VAR 0 3
51859: PUSH
51860: LD_VAR 0 1
51864: PPUSH
51865: CALL_OW 255
51869: PPUSH
51870: LD_VAR 0 1
51874: PPUSH
51875: CALL_OW 250
51879: PPUSH
51880: LD_VAR 0 1
51884: PPUSH
51885: CALL_OW 251
51889: PPUSH
51890: LD_VAR 0 2
51894: PPUSH
51895: CALL 25248 0 4
51899: PUSH
51900: LD_INT 4
51902: ARRAY
51903: ST_TO_ADDR
// end ;
51904: LD_VAR 0 3
51908: RET
// export function PlayerSeeMe ( unit ) ; begin
51909: LD_INT 0
51911: PPUSH
// result := See ( your_side , unit ) ;
51912: LD_ADDR_VAR 0 2
51916: PUSH
51917: LD_OWVAR 2
51921: PPUSH
51922: LD_VAR 0 1
51926: PPUSH
51927: CALL_OW 292
51931: ST_TO_ADDR
// end ;
51932: LD_VAR 0 2
51936: RET
// export function ReverseDir ( unit ) ; begin
51937: LD_INT 0
51939: PPUSH
// if not unit then
51940: LD_VAR 0 1
51944: NOT
51945: IFFALSE 51949
// exit ;
51947: GO 51972
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
51949: LD_ADDR_VAR 0 2
51953: PUSH
51954: LD_VAR 0 1
51958: PPUSH
51959: CALL_OW 254
51963: PUSH
51964: LD_INT 3
51966: PLUS
51967: PUSH
51968: LD_INT 6
51970: MOD
51971: ST_TO_ADDR
// end ;
51972: LD_VAR 0 2
51976: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
51977: LD_INT 0
51979: PPUSH
51980: PPUSH
51981: PPUSH
51982: PPUSH
51983: PPUSH
// if not hexes then
51984: LD_VAR 0 2
51988: NOT
51989: IFFALSE 51993
// exit ;
51991: GO 52141
// dist := 9999 ;
51993: LD_ADDR_VAR 0 5
51997: PUSH
51998: LD_INT 9999
52000: ST_TO_ADDR
// for i = 1 to hexes do
52001: LD_ADDR_VAR 0 4
52005: PUSH
52006: DOUBLE
52007: LD_INT 1
52009: DEC
52010: ST_TO_ADDR
52011: LD_VAR 0 2
52015: PUSH
52016: FOR_TO
52017: IFFALSE 52129
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52019: LD_VAR 0 1
52023: PPUSH
52024: LD_VAR 0 2
52028: PUSH
52029: LD_VAR 0 4
52033: ARRAY
52034: PUSH
52035: LD_INT 1
52037: ARRAY
52038: PPUSH
52039: LD_VAR 0 2
52043: PUSH
52044: LD_VAR 0 4
52048: ARRAY
52049: PUSH
52050: LD_INT 2
52052: ARRAY
52053: PPUSH
52054: CALL_OW 297
52058: PUSH
52059: LD_VAR 0 5
52063: LESS
52064: IFFALSE 52127
// begin hex := hexes [ i ] ;
52066: LD_ADDR_VAR 0 7
52070: PUSH
52071: LD_VAR 0 2
52075: PUSH
52076: LD_VAR 0 4
52080: ARRAY
52081: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52082: LD_ADDR_VAR 0 5
52086: PUSH
52087: LD_VAR 0 1
52091: PPUSH
52092: LD_VAR 0 2
52096: PUSH
52097: LD_VAR 0 4
52101: ARRAY
52102: PUSH
52103: LD_INT 1
52105: ARRAY
52106: PPUSH
52107: LD_VAR 0 2
52111: PUSH
52112: LD_VAR 0 4
52116: ARRAY
52117: PUSH
52118: LD_INT 2
52120: ARRAY
52121: PPUSH
52122: CALL_OW 297
52126: ST_TO_ADDR
// end ; end ;
52127: GO 52016
52129: POP
52130: POP
// result := hex ;
52131: LD_ADDR_VAR 0 3
52135: PUSH
52136: LD_VAR 0 7
52140: ST_TO_ADDR
// end ;
52141: LD_VAR 0 3
52145: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52146: LD_INT 0
52148: PPUSH
52149: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52150: LD_VAR 0 1
52154: NOT
52155: PUSH
52156: LD_VAR 0 1
52160: PUSH
52161: LD_INT 21
52163: PUSH
52164: LD_INT 2
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 23
52173: PUSH
52174: LD_INT 2
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PPUSH
52185: CALL_OW 69
52189: IN
52190: NOT
52191: OR
52192: IFFALSE 52196
// exit ;
52194: GO 52243
// for i = 1 to 3 do
52196: LD_ADDR_VAR 0 3
52200: PUSH
52201: DOUBLE
52202: LD_INT 1
52204: DEC
52205: ST_TO_ADDR
52206: LD_INT 3
52208: PUSH
52209: FOR_TO
52210: IFFALSE 52241
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52212: LD_VAR 0 1
52216: PPUSH
52217: CALL_OW 250
52221: PPUSH
52222: LD_VAR 0 1
52226: PPUSH
52227: CALL_OW 251
52231: PPUSH
52232: LD_INT 1
52234: PPUSH
52235: CALL_OW 453
52239: GO 52209
52241: POP
52242: POP
// end ;
52243: LD_VAR 0 2
52247: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52248: LD_INT 0
52250: PPUSH
52251: PPUSH
52252: PPUSH
52253: PPUSH
52254: PPUSH
52255: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52256: LD_VAR 0 1
52260: NOT
52261: PUSH
52262: LD_VAR 0 2
52266: NOT
52267: OR
52268: PUSH
52269: LD_VAR 0 1
52273: PPUSH
52274: CALL_OW 314
52278: OR
52279: IFFALSE 52283
// exit ;
52281: GO 52724
// x := GetX ( enemy_unit ) ;
52283: LD_ADDR_VAR 0 7
52287: PUSH
52288: LD_VAR 0 2
52292: PPUSH
52293: CALL_OW 250
52297: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52298: LD_ADDR_VAR 0 8
52302: PUSH
52303: LD_VAR 0 2
52307: PPUSH
52308: CALL_OW 251
52312: ST_TO_ADDR
// if not x or not y then
52313: LD_VAR 0 7
52317: NOT
52318: PUSH
52319: LD_VAR 0 8
52323: NOT
52324: OR
52325: IFFALSE 52329
// exit ;
52327: GO 52724
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52329: LD_ADDR_VAR 0 6
52333: PUSH
52334: LD_VAR 0 7
52338: PPUSH
52339: LD_INT 0
52341: PPUSH
52342: LD_INT 4
52344: PPUSH
52345: CALL_OW 272
52349: PUSH
52350: LD_VAR 0 8
52354: PPUSH
52355: LD_INT 0
52357: PPUSH
52358: LD_INT 4
52360: PPUSH
52361: CALL_OW 273
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_VAR 0 7
52374: PPUSH
52375: LD_INT 1
52377: PPUSH
52378: LD_INT 4
52380: PPUSH
52381: CALL_OW 272
52385: PUSH
52386: LD_VAR 0 8
52390: PPUSH
52391: LD_INT 1
52393: PPUSH
52394: LD_INT 4
52396: PPUSH
52397: CALL_OW 273
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_VAR 0 7
52410: PPUSH
52411: LD_INT 2
52413: PPUSH
52414: LD_INT 4
52416: PPUSH
52417: CALL_OW 272
52421: PUSH
52422: LD_VAR 0 8
52426: PPUSH
52427: LD_INT 2
52429: PPUSH
52430: LD_INT 4
52432: PPUSH
52433: CALL_OW 273
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_VAR 0 7
52446: PPUSH
52447: LD_INT 3
52449: PPUSH
52450: LD_INT 4
52452: PPUSH
52453: CALL_OW 272
52457: PUSH
52458: LD_VAR 0 8
52462: PPUSH
52463: LD_INT 3
52465: PPUSH
52466: LD_INT 4
52468: PPUSH
52469: CALL_OW 273
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_VAR 0 7
52482: PPUSH
52483: LD_INT 4
52485: PPUSH
52486: LD_INT 4
52488: PPUSH
52489: CALL_OW 272
52493: PUSH
52494: LD_VAR 0 8
52498: PPUSH
52499: LD_INT 4
52501: PPUSH
52502: LD_INT 4
52504: PPUSH
52505: CALL_OW 273
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_VAR 0 7
52518: PPUSH
52519: LD_INT 5
52521: PPUSH
52522: LD_INT 4
52524: PPUSH
52525: CALL_OW 272
52529: PUSH
52530: LD_VAR 0 8
52534: PPUSH
52535: LD_INT 5
52537: PPUSH
52538: LD_INT 4
52540: PPUSH
52541: CALL_OW 273
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: ST_TO_ADDR
// for i = tmp downto 1 do
52558: LD_ADDR_VAR 0 4
52562: PUSH
52563: DOUBLE
52564: LD_VAR 0 6
52568: INC
52569: ST_TO_ADDR
52570: LD_INT 1
52572: PUSH
52573: FOR_DOWNTO
52574: IFFALSE 52675
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
52576: LD_VAR 0 6
52580: PUSH
52581: LD_VAR 0 4
52585: ARRAY
52586: PUSH
52587: LD_INT 1
52589: ARRAY
52590: PPUSH
52591: LD_VAR 0 6
52595: PUSH
52596: LD_VAR 0 4
52600: ARRAY
52601: PUSH
52602: LD_INT 2
52604: ARRAY
52605: PPUSH
52606: CALL_OW 488
52610: NOT
52611: PUSH
52612: LD_VAR 0 6
52616: PUSH
52617: LD_VAR 0 4
52621: ARRAY
52622: PUSH
52623: LD_INT 1
52625: ARRAY
52626: PPUSH
52627: LD_VAR 0 6
52631: PUSH
52632: LD_VAR 0 4
52636: ARRAY
52637: PUSH
52638: LD_INT 2
52640: ARRAY
52641: PPUSH
52642: CALL_OW 428
52646: PUSH
52647: LD_INT 0
52649: NONEQUAL
52650: OR
52651: IFFALSE 52673
// tmp := Delete ( tmp , i ) ;
52653: LD_ADDR_VAR 0 6
52657: PUSH
52658: LD_VAR 0 6
52662: PPUSH
52663: LD_VAR 0 4
52667: PPUSH
52668: CALL_OW 3
52672: ST_TO_ADDR
52673: GO 52573
52675: POP
52676: POP
// j := GetClosestHex ( unit , tmp ) ;
52677: LD_ADDR_VAR 0 5
52681: PUSH
52682: LD_VAR 0 1
52686: PPUSH
52687: LD_VAR 0 6
52691: PPUSH
52692: CALL 51977 0 2
52696: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
52697: LD_VAR 0 1
52701: PPUSH
52702: LD_VAR 0 5
52706: PUSH
52707: LD_INT 1
52709: ARRAY
52710: PPUSH
52711: LD_VAR 0 5
52715: PUSH
52716: LD_INT 2
52718: ARRAY
52719: PPUSH
52720: CALL_OW 111
// end ;
52724: LD_VAR 0 3
52728: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
52729: LD_INT 0
52731: PPUSH
52732: PPUSH
52733: PPUSH
// uc_side = 0 ;
52734: LD_ADDR_OWVAR 20
52738: PUSH
52739: LD_INT 0
52741: ST_TO_ADDR
// uc_nation = 0 ;
52742: LD_ADDR_OWVAR 21
52746: PUSH
52747: LD_INT 0
52749: ST_TO_ADDR
// InitHc_All ( ) ;
52750: CALL_OW 584
// InitVc ;
52754: CALL_OW 20
// if mastodonts then
52758: LD_VAR 0 6
52762: IFFALSE 52829
// for i = 1 to mastodonts do
52764: LD_ADDR_VAR 0 11
52768: PUSH
52769: DOUBLE
52770: LD_INT 1
52772: DEC
52773: ST_TO_ADDR
52774: LD_VAR 0 6
52778: PUSH
52779: FOR_TO
52780: IFFALSE 52827
// begin vc_chassis := 31 ;
52782: LD_ADDR_OWVAR 37
52786: PUSH
52787: LD_INT 31
52789: ST_TO_ADDR
// vc_control := control_rider ;
52790: LD_ADDR_OWVAR 38
52794: PUSH
52795: LD_INT 4
52797: ST_TO_ADDR
// animal := CreateVehicle ;
52798: LD_ADDR_VAR 0 12
52802: PUSH
52803: CALL_OW 45
52807: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52808: LD_VAR 0 12
52812: PPUSH
52813: LD_VAR 0 8
52817: PPUSH
52818: LD_INT 0
52820: PPUSH
52821: CALL 55017 0 3
// end ;
52825: GO 52779
52827: POP
52828: POP
// if horses then
52829: LD_VAR 0 5
52833: IFFALSE 52900
// for i = 1 to horses do
52835: LD_ADDR_VAR 0 11
52839: PUSH
52840: DOUBLE
52841: LD_INT 1
52843: DEC
52844: ST_TO_ADDR
52845: LD_VAR 0 5
52849: PUSH
52850: FOR_TO
52851: IFFALSE 52898
// begin hc_class := 21 ;
52853: LD_ADDR_OWVAR 28
52857: PUSH
52858: LD_INT 21
52860: ST_TO_ADDR
// hc_gallery :=  ;
52861: LD_ADDR_OWVAR 33
52865: PUSH
52866: LD_STRING 
52868: ST_TO_ADDR
// animal := CreateHuman ;
52869: LD_ADDR_VAR 0 12
52873: PUSH
52874: CALL_OW 44
52878: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52879: LD_VAR 0 12
52883: PPUSH
52884: LD_VAR 0 8
52888: PPUSH
52889: LD_INT 0
52891: PPUSH
52892: CALL 55017 0 3
// end ;
52896: GO 52850
52898: POP
52899: POP
// if birds then
52900: LD_VAR 0 1
52904: IFFALSE 52971
// for i = 1 to birds do
52906: LD_ADDR_VAR 0 11
52910: PUSH
52911: DOUBLE
52912: LD_INT 1
52914: DEC
52915: ST_TO_ADDR
52916: LD_VAR 0 1
52920: PUSH
52921: FOR_TO
52922: IFFALSE 52969
// begin hc_class = 18 ;
52924: LD_ADDR_OWVAR 28
52928: PUSH
52929: LD_INT 18
52931: ST_TO_ADDR
// hc_gallery =  ;
52932: LD_ADDR_OWVAR 33
52936: PUSH
52937: LD_STRING 
52939: ST_TO_ADDR
// animal := CreateHuman ;
52940: LD_ADDR_VAR 0 12
52944: PUSH
52945: CALL_OW 44
52949: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52950: LD_VAR 0 12
52954: PPUSH
52955: LD_VAR 0 8
52959: PPUSH
52960: LD_INT 0
52962: PPUSH
52963: CALL 55017 0 3
// end ;
52967: GO 52921
52969: POP
52970: POP
// if tigers then
52971: LD_VAR 0 2
52975: IFFALSE 53059
// for i = 1 to tigers do
52977: LD_ADDR_VAR 0 11
52981: PUSH
52982: DOUBLE
52983: LD_INT 1
52985: DEC
52986: ST_TO_ADDR
52987: LD_VAR 0 2
52991: PUSH
52992: FOR_TO
52993: IFFALSE 53057
// begin hc_class = class_tiger ;
52995: LD_ADDR_OWVAR 28
52999: PUSH
53000: LD_INT 14
53002: ST_TO_ADDR
// hc_gallery =  ;
53003: LD_ADDR_OWVAR 33
53007: PUSH
53008: LD_STRING 
53010: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53011: LD_ADDR_OWVAR 35
53015: PUSH
53016: LD_INT 7
53018: NEG
53019: PPUSH
53020: LD_INT 7
53022: PPUSH
53023: CALL_OW 12
53027: ST_TO_ADDR
// animal := CreateHuman ;
53028: LD_ADDR_VAR 0 12
53032: PUSH
53033: CALL_OW 44
53037: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53038: LD_VAR 0 12
53042: PPUSH
53043: LD_VAR 0 8
53047: PPUSH
53048: LD_INT 0
53050: PPUSH
53051: CALL 55017 0 3
// end ;
53055: GO 52992
53057: POP
53058: POP
// if apemans then
53059: LD_VAR 0 3
53063: IFFALSE 53186
// for i = 1 to apemans do
53065: LD_ADDR_VAR 0 11
53069: PUSH
53070: DOUBLE
53071: LD_INT 1
53073: DEC
53074: ST_TO_ADDR
53075: LD_VAR 0 3
53079: PUSH
53080: FOR_TO
53081: IFFALSE 53184
// begin hc_class = class_apeman ;
53083: LD_ADDR_OWVAR 28
53087: PUSH
53088: LD_INT 12
53090: ST_TO_ADDR
// hc_gallery =  ;
53091: LD_ADDR_OWVAR 33
53095: PUSH
53096: LD_STRING 
53098: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
53099: LD_ADDR_OWVAR 35
53103: PUSH
53104: LD_INT 2
53106: NEG
53107: PPUSH
53108: LD_INT 2
53110: PPUSH
53111: CALL_OW 12
53115: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53116: LD_ADDR_OWVAR 31
53120: PUSH
53121: LD_INT 1
53123: PPUSH
53124: LD_INT 3
53126: PPUSH
53127: CALL_OW 12
53131: PUSH
53132: LD_INT 1
53134: PPUSH
53135: LD_INT 3
53137: PPUSH
53138: CALL_OW 12
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: ST_TO_ADDR
// animal := CreateHuman ;
53155: LD_ADDR_VAR 0 12
53159: PUSH
53160: CALL_OW 44
53164: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53165: LD_VAR 0 12
53169: PPUSH
53170: LD_VAR 0 8
53174: PPUSH
53175: LD_INT 0
53177: PPUSH
53178: CALL 55017 0 3
// end ;
53182: GO 53080
53184: POP
53185: POP
// if enchidnas then
53186: LD_VAR 0 4
53190: IFFALSE 53257
// for i = 1 to enchidnas do
53192: LD_ADDR_VAR 0 11
53196: PUSH
53197: DOUBLE
53198: LD_INT 1
53200: DEC
53201: ST_TO_ADDR
53202: LD_VAR 0 4
53206: PUSH
53207: FOR_TO
53208: IFFALSE 53255
// begin hc_class = 13 ;
53210: LD_ADDR_OWVAR 28
53214: PUSH
53215: LD_INT 13
53217: ST_TO_ADDR
// hc_gallery =  ;
53218: LD_ADDR_OWVAR 33
53222: PUSH
53223: LD_STRING 
53225: ST_TO_ADDR
// animal := CreateHuman ;
53226: LD_ADDR_VAR 0 12
53230: PUSH
53231: CALL_OW 44
53235: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53236: LD_VAR 0 12
53240: PPUSH
53241: LD_VAR 0 8
53245: PPUSH
53246: LD_INT 0
53248: PPUSH
53249: CALL 55017 0 3
// end ;
53253: GO 53207
53255: POP
53256: POP
// if fishes then
53257: LD_VAR 0 7
53261: IFFALSE 53328
// for i = 1 to fishes do
53263: LD_ADDR_VAR 0 11
53267: PUSH
53268: DOUBLE
53269: LD_INT 1
53271: DEC
53272: ST_TO_ADDR
53273: LD_VAR 0 7
53277: PUSH
53278: FOR_TO
53279: IFFALSE 53326
// begin hc_class = 20 ;
53281: LD_ADDR_OWVAR 28
53285: PUSH
53286: LD_INT 20
53288: ST_TO_ADDR
// hc_gallery =  ;
53289: LD_ADDR_OWVAR 33
53293: PUSH
53294: LD_STRING 
53296: ST_TO_ADDR
// animal := CreateHuman ;
53297: LD_ADDR_VAR 0 12
53301: PUSH
53302: CALL_OW 44
53306: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53307: LD_VAR 0 12
53311: PPUSH
53312: LD_VAR 0 9
53316: PPUSH
53317: LD_INT 0
53319: PPUSH
53320: CALL 55017 0 3
// end ;
53324: GO 53278
53326: POP
53327: POP
// end ;
53328: LD_VAR 0 10
53332: RET
// export function WantHeal ( sci , unit ) ; begin
53333: LD_INT 0
53335: PPUSH
// if GetTaskList ( sci ) > 0 then
53336: LD_VAR 0 1
53340: PPUSH
53341: CALL_OW 437
53345: PUSH
53346: LD_INT 0
53348: GREATER
53349: IFFALSE 53419
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53351: LD_VAR 0 1
53355: PPUSH
53356: CALL_OW 437
53360: PUSH
53361: LD_INT 1
53363: ARRAY
53364: PUSH
53365: LD_INT 1
53367: ARRAY
53368: PUSH
53369: LD_STRING l
53371: EQUAL
53372: PUSH
53373: LD_VAR 0 1
53377: PPUSH
53378: CALL_OW 437
53382: PUSH
53383: LD_INT 1
53385: ARRAY
53386: PUSH
53387: LD_INT 4
53389: ARRAY
53390: PUSH
53391: LD_VAR 0 2
53395: EQUAL
53396: AND
53397: IFFALSE 53409
// result := true else
53399: LD_ADDR_VAR 0 3
53403: PUSH
53404: LD_INT 1
53406: ST_TO_ADDR
53407: GO 53417
// result := false ;
53409: LD_ADDR_VAR 0 3
53413: PUSH
53414: LD_INT 0
53416: ST_TO_ADDR
// end else
53417: GO 53427
// result := false ;
53419: LD_ADDR_VAR 0 3
53423: PUSH
53424: LD_INT 0
53426: ST_TO_ADDR
// end ;
53427: LD_VAR 0 3
53431: RET
// export function HealTarget ( sci ) ; begin
53432: LD_INT 0
53434: PPUSH
// if not sci then
53435: LD_VAR 0 1
53439: NOT
53440: IFFALSE 53444
// exit ;
53442: GO 53509
// result := 0 ;
53444: LD_ADDR_VAR 0 2
53448: PUSH
53449: LD_INT 0
53451: ST_TO_ADDR
// if GetTaskList ( sci ) then
53452: LD_VAR 0 1
53456: PPUSH
53457: CALL_OW 437
53461: IFFALSE 53509
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
53463: LD_VAR 0 1
53467: PPUSH
53468: CALL_OW 437
53472: PUSH
53473: LD_INT 1
53475: ARRAY
53476: PUSH
53477: LD_INT 1
53479: ARRAY
53480: PUSH
53481: LD_STRING l
53483: EQUAL
53484: IFFALSE 53509
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
53486: LD_ADDR_VAR 0 2
53490: PUSH
53491: LD_VAR 0 1
53495: PPUSH
53496: CALL_OW 437
53500: PUSH
53501: LD_INT 1
53503: ARRAY
53504: PUSH
53505: LD_INT 4
53507: ARRAY
53508: ST_TO_ADDR
// end ;
53509: LD_VAR 0 2
53513: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
53514: LD_INT 0
53516: PPUSH
53517: PPUSH
53518: PPUSH
53519: PPUSH
// if not base_units then
53520: LD_VAR 0 1
53524: NOT
53525: IFFALSE 53529
// exit ;
53527: GO 53616
// result := false ;
53529: LD_ADDR_VAR 0 2
53533: PUSH
53534: LD_INT 0
53536: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
53537: LD_ADDR_VAR 0 5
53541: PUSH
53542: LD_VAR 0 1
53546: PPUSH
53547: LD_INT 21
53549: PUSH
53550: LD_INT 3
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PPUSH
53557: CALL_OW 72
53561: ST_TO_ADDR
// if not tmp then
53562: LD_VAR 0 5
53566: NOT
53567: IFFALSE 53571
// exit ;
53569: GO 53616
// for i in tmp do
53571: LD_ADDR_VAR 0 3
53575: PUSH
53576: LD_VAR 0 5
53580: PUSH
53581: FOR_IN
53582: IFFALSE 53614
// begin result := EnemyInRange ( i , 22 ) ;
53584: LD_ADDR_VAR 0 2
53588: PUSH
53589: LD_VAR 0 3
53593: PPUSH
53594: LD_INT 22
53596: PPUSH
53597: CALL 51852 0 2
53601: ST_TO_ADDR
// if result then
53602: LD_VAR 0 2
53606: IFFALSE 53612
// exit ;
53608: POP
53609: POP
53610: GO 53616
// end ;
53612: GO 53581
53614: POP
53615: POP
// end ;
53616: LD_VAR 0 2
53620: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
53621: LD_INT 0
53623: PPUSH
53624: PPUSH
// if not units then
53625: LD_VAR 0 1
53629: NOT
53630: IFFALSE 53634
// exit ;
53632: GO 53704
// result := [ ] ;
53634: LD_ADDR_VAR 0 3
53638: PUSH
53639: EMPTY
53640: ST_TO_ADDR
// for i in units do
53641: LD_ADDR_VAR 0 4
53645: PUSH
53646: LD_VAR 0 1
53650: PUSH
53651: FOR_IN
53652: IFFALSE 53702
// if GetTag ( i ) = tag then
53654: LD_VAR 0 4
53658: PPUSH
53659: CALL_OW 110
53663: PUSH
53664: LD_VAR 0 2
53668: EQUAL
53669: IFFALSE 53700
// result := Replace ( result , result + 1 , i ) ;
53671: LD_ADDR_VAR 0 3
53675: PUSH
53676: LD_VAR 0 3
53680: PPUSH
53681: LD_VAR 0 3
53685: PUSH
53686: LD_INT 1
53688: PLUS
53689: PPUSH
53690: LD_VAR 0 4
53694: PPUSH
53695: CALL_OW 1
53699: ST_TO_ADDR
53700: GO 53651
53702: POP
53703: POP
// end ;
53704: LD_VAR 0 3
53708: RET
// export function IsDriver ( un ) ; begin
53709: LD_INT 0
53711: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
53712: LD_ADDR_VAR 0 2
53716: PUSH
53717: LD_VAR 0 1
53721: PUSH
53722: LD_INT 55
53724: PUSH
53725: EMPTY
53726: LIST
53727: PPUSH
53728: CALL_OW 69
53732: IN
53733: ST_TO_ADDR
// end ;
53734: LD_VAR 0 2
53738: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
53739: LD_INT 0
53741: PPUSH
53742: PPUSH
// list := [ ] ;
53743: LD_ADDR_VAR 0 5
53747: PUSH
53748: EMPTY
53749: ST_TO_ADDR
// case d of 0 :
53750: LD_VAR 0 3
53754: PUSH
53755: LD_INT 0
53757: DOUBLE
53758: EQUAL
53759: IFTRUE 53763
53761: GO 53896
53763: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
53764: LD_ADDR_VAR 0 5
53768: PUSH
53769: LD_VAR 0 1
53773: PUSH
53774: LD_INT 4
53776: MINUS
53777: PUSH
53778: LD_VAR 0 2
53782: PUSH
53783: LD_INT 4
53785: MINUS
53786: PUSH
53787: LD_INT 2
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: LIST
53794: PUSH
53795: LD_VAR 0 1
53799: PUSH
53800: LD_INT 3
53802: MINUS
53803: PUSH
53804: LD_VAR 0 2
53808: PUSH
53809: LD_INT 1
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: LIST
53816: PUSH
53817: LD_VAR 0 1
53821: PUSH
53822: LD_INT 4
53824: PLUS
53825: PUSH
53826: LD_VAR 0 2
53830: PUSH
53831: LD_INT 4
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: LIST
53838: PUSH
53839: LD_VAR 0 1
53843: PUSH
53844: LD_INT 3
53846: PLUS
53847: PUSH
53848: LD_VAR 0 2
53852: PUSH
53853: LD_INT 3
53855: PLUS
53856: PUSH
53857: LD_INT 5
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: LIST
53864: PUSH
53865: LD_VAR 0 1
53869: PUSH
53870: LD_VAR 0 2
53874: PUSH
53875: LD_INT 4
53877: PLUS
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: LIST
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: ST_TO_ADDR
// end ; 1 :
53894: GO 54594
53896: LD_INT 1
53898: DOUBLE
53899: EQUAL
53900: IFTRUE 53904
53902: GO 54037
53904: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53905: LD_ADDR_VAR 0 5
53909: PUSH
53910: LD_VAR 0 1
53914: PUSH
53915: LD_VAR 0 2
53919: PUSH
53920: LD_INT 4
53922: MINUS
53923: PUSH
53924: LD_INT 3
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: LIST
53931: PUSH
53932: LD_VAR 0 1
53936: PUSH
53937: LD_INT 3
53939: MINUS
53940: PUSH
53941: LD_VAR 0 2
53945: PUSH
53946: LD_INT 3
53948: MINUS
53949: PUSH
53950: LD_INT 2
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: LIST
53957: PUSH
53958: LD_VAR 0 1
53962: PUSH
53963: LD_INT 4
53965: MINUS
53966: PUSH
53967: LD_VAR 0 2
53971: PUSH
53972: LD_INT 1
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: LIST
53979: PUSH
53980: LD_VAR 0 1
53984: PUSH
53985: LD_VAR 0 2
53989: PUSH
53990: LD_INT 3
53992: PLUS
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: LIST
54001: PUSH
54002: LD_VAR 0 1
54006: PUSH
54007: LD_INT 4
54009: PLUS
54010: PUSH
54011: LD_VAR 0 2
54015: PUSH
54016: LD_INT 4
54018: PLUS
54019: PUSH
54020: LD_INT 5
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: LIST
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: ST_TO_ADDR
// end ; 2 :
54035: GO 54594
54037: LD_INT 2
54039: DOUBLE
54040: EQUAL
54041: IFTRUE 54045
54043: GO 54174
54045: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54046: LD_ADDR_VAR 0 5
54050: PUSH
54051: LD_VAR 0 1
54055: PUSH
54056: LD_VAR 0 2
54060: PUSH
54061: LD_INT 3
54063: MINUS
54064: PUSH
54065: LD_INT 3
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: LIST
54072: PUSH
54073: LD_VAR 0 1
54077: PUSH
54078: LD_INT 4
54080: PLUS
54081: PUSH
54082: LD_VAR 0 2
54086: PUSH
54087: LD_INT 4
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: LIST
54094: PUSH
54095: LD_VAR 0 1
54099: PUSH
54100: LD_VAR 0 2
54104: PUSH
54105: LD_INT 4
54107: PLUS
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: LIST
54116: PUSH
54117: LD_VAR 0 1
54121: PUSH
54122: LD_INT 3
54124: MINUS
54125: PUSH
54126: LD_VAR 0 2
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: LIST
54138: PUSH
54139: LD_VAR 0 1
54143: PUSH
54144: LD_INT 4
54146: MINUS
54147: PUSH
54148: LD_VAR 0 2
54152: PUSH
54153: LD_INT 4
54155: MINUS
54156: PUSH
54157: LD_INT 2
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: LIST
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: ST_TO_ADDR
// end ; 3 :
54172: GO 54594
54174: LD_INT 3
54176: DOUBLE
54177: EQUAL
54178: IFTRUE 54182
54180: GO 54315
54182: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
54183: LD_ADDR_VAR 0 5
54187: PUSH
54188: LD_VAR 0 1
54192: PUSH
54193: LD_INT 3
54195: PLUS
54196: PUSH
54197: LD_VAR 0 2
54201: PUSH
54202: LD_INT 4
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: LIST
54209: PUSH
54210: LD_VAR 0 1
54214: PUSH
54215: LD_INT 4
54217: PLUS
54218: PUSH
54219: LD_VAR 0 2
54223: PUSH
54224: LD_INT 4
54226: PLUS
54227: PUSH
54228: LD_INT 5
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: LIST
54235: PUSH
54236: LD_VAR 0 1
54240: PUSH
54241: LD_INT 4
54243: MINUS
54244: PUSH
54245: LD_VAR 0 2
54249: PUSH
54250: LD_INT 1
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: LIST
54257: PUSH
54258: LD_VAR 0 1
54262: PUSH
54263: LD_VAR 0 2
54267: PUSH
54268: LD_INT 4
54270: MINUS
54271: PUSH
54272: LD_INT 3
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: LIST
54279: PUSH
54280: LD_VAR 0 1
54284: PUSH
54285: LD_INT 3
54287: MINUS
54288: PUSH
54289: LD_VAR 0 2
54293: PUSH
54294: LD_INT 3
54296: MINUS
54297: PUSH
54298: LD_INT 2
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: LIST
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: ST_TO_ADDR
// end ; 4 :
54313: GO 54594
54315: LD_INT 4
54317: DOUBLE
54318: EQUAL
54319: IFTRUE 54323
54321: GO 54456
54323: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
54324: LD_ADDR_VAR 0 5
54328: PUSH
54329: LD_VAR 0 1
54333: PUSH
54334: LD_VAR 0 2
54338: PUSH
54339: LD_INT 4
54341: PLUS
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: LIST
54350: PUSH
54351: LD_VAR 0 1
54355: PUSH
54356: LD_INT 3
54358: PLUS
54359: PUSH
54360: LD_VAR 0 2
54364: PUSH
54365: LD_INT 3
54367: PLUS
54368: PUSH
54369: LD_INT 5
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: LIST
54376: PUSH
54377: LD_VAR 0 1
54381: PUSH
54382: LD_INT 4
54384: PLUS
54385: PUSH
54386: LD_VAR 0 2
54390: PUSH
54391: LD_INT 4
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: LIST
54398: PUSH
54399: LD_VAR 0 1
54403: PUSH
54404: LD_VAR 0 2
54408: PUSH
54409: LD_INT 3
54411: MINUS
54412: PUSH
54413: LD_INT 3
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: LIST
54420: PUSH
54421: LD_VAR 0 1
54425: PUSH
54426: LD_INT 4
54428: MINUS
54429: PUSH
54430: LD_VAR 0 2
54434: PUSH
54435: LD_INT 4
54437: MINUS
54438: PUSH
54439: LD_INT 2
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: LIST
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: ST_TO_ADDR
// end ; 5 :
54454: GO 54594
54456: LD_INT 5
54458: DOUBLE
54459: EQUAL
54460: IFTRUE 54464
54462: GO 54593
54464: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
54465: LD_ADDR_VAR 0 5
54469: PUSH
54470: LD_VAR 0 1
54474: PUSH
54475: LD_INT 4
54477: MINUS
54478: PUSH
54479: LD_VAR 0 2
54483: PUSH
54484: LD_INT 1
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: LIST
54491: PUSH
54492: LD_VAR 0 1
54496: PUSH
54497: LD_VAR 0 2
54501: PUSH
54502: LD_INT 4
54504: MINUS
54505: PUSH
54506: LD_INT 3
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: LIST
54513: PUSH
54514: LD_VAR 0 1
54518: PUSH
54519: LD_INT 4
54521: PLUS
54522: PUSH
54523: LD_VAR 0 2
54527: PUSH
54528: LD_INT 4
54530: PLUS
54531: PUSH
54532: LD_INT 5
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: LIST
54539: PUSH
54540: LD_VAR 0 1
54544: PUSH
54545: LD_INT 3
54547: PLUS
54548: PUSH
54549: LD_VAR 0 2
54553: PUSH
54554: LD_INT 4
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: LIST
54561: PUSH
54562: LD_VAR 0 1
54566: PUSH
54567: LD_VAR 0 2
54571: PUSH
54572: LD_INT 3
54574: PLUS
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: LIST
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: ST_TO_ADDR
// end ; end ;
54591: GO 54594
54593: POP
// result := list ;
54594: LD_ADDR_VAR 0 4
54598: PUSH
54599: LD_VAR 0 5
54603: ST_TO_ADDR
// end ;
54604: LD_VAR 0 4
54608: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
54609: LD_INT 0
54611: PPUSH
54612: PPUSH
54613: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
54614: LD_VAR 0 1
54618: NOT
54619: PUSH
54620: LD_VAR 0 2
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: LD_INT 2
54630: PUSH
54631: LD_INT 3
54633: PUSH
54634: LD_INT 4
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: IN
54643: NOT
54644: OR
54645: IFFALSE 54649
// exit ;
54647: GO 54741
// tmp := [ ] ;
54649: LD_ADDR_VAR 0 5
54653: PUSH
54654: EMPTY
54655: ST_TO_ADDR
// for i in units do
54656: LD_ADDR_VAR 0 4
54660: PUSH
54661: LD_VAR 0 1
54665: PUSH
54666: FOR_IN
54667: IFFALSE 54710
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
54669: LD_ADDR_VAR 0 5
54673: PUSH
54674: LD_VAR 0 5
54678: PPUSH
54679: LD_VAR 0 5
54683: PUSH
54684: LD_INT 1
54686: PLUS
54687: PPUSH
54688: LD_VAR 0 4
54692: PPUSH
54693: LD_VAR 0 2
54697: PPUSH
54698: CALL_OW 259
54702: PPUSH
54703: CALL_OW 2
54707: ST_TO_ADDR
54708: GO 54666
54710: POP
54711: POP
// if not tmp then
54712: LD_VAR 0 5
54716: NOT
54717: IFFALSE 54721
// exit ;
54719: GO 54741
// result := SortListByListDesc ( units , tmp ) ;
54721: LD_ADDR_VAR 0 3
54725: PUSH
54726: LD_VAR 0 1
54730: PPUSH
54731: LD_VAR 0 5
54735: PPUSH
54736: CALL_OW 77
54740: ST_TO_ADDR
// end ;
54741: LD_VAR 0 3
54745: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
54746: LD_INT 0
54748: PPUSH
54749: PPUSH
54750: PPUSH
// result := false ;
54751: LD_ADDR_VAR 0 3
54755: PUSH
54756: LD_INT 0
54758: ST_TO_ADDR
// x := GetX ( building ) ;
54759: LD_ADDR_VAR 0 4
54763: PUSH
54764: LD_VAR 0 2
54768: PPUSH
54769: CALL_OW 250
54773: ST_TO_ADDR
// y := GetY ( building ) ;
54774: LD_ADDR_VAR 0 5
54778: PUSH
54779: LD_VAR 0 2
54783: PPUSH
54784: CALL_OW 251
54788: ST_TO_ADDR
// if not building or not x or not y then
54789: LD_VAR 0 2
54793: NOT
54794: PUSH
54795: LD_VAR 0 4
54799: NOT
54800: OR
54801: PUSH
54802: LD_VAR 0 5
54806: NOT
54807: OR
54808: IFFALSE 54812
// exit ;
54810: GO 54904
// if GetTaskList ( unit ) then
54812: LD_VAR 0 1
54816: PPUSH
54817: CALL_OW 437
54821: IFFALSE 54904
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54823: LD_STRING e
54825: PUSH
54826: LD_VAR 0 1
54830: PPUSH
54831: CALL_OW 437
54835: PUSH
54836: LD_INT 1
54838: ARRAY
54839: PUSH
54840: LD_INT 1
54842: ARRAY
54843: EQUAL
54844: PUSH
54845: LD_VAR 0 4
54849: PUSH
54850: LD_VAR 0 1
54854: PPUSH
54855: CALL_OW 437
54859: PUSH
54860: LD_INT 1
54862: ARRAY
54863: PUSH
54864: LD_INT 2
54866: ARRAY
54867: EQUAL
54868: AND
54869: PUSH
54870: LD_VAR 0 5
54874: PUSH
54875: LD_VAR 0 1
54879: PPUSH
54880: CALL_OW 437
54884: PUSH
54885: LD_INT 1
54887: ARRAY
54888: PUSH
54889: LD_INT 3
54891: ARRAY
54892: EQUAL
54893: AND
54894: IFFALSE 54904
// result := true end ;
54896: LD_ADDR_VAR 0 3
54900: PUSH
54901: LD_INT 1
54903: ST_TO_ADDR
// end ;
54904: LD_VAR 0 3
54908: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
54909: LD_INT 0
54911: PPUSH
// result := false ;
54912: LD_ADDR_VAR 0 4
54916: PUSH
54917: LD_INT 0
54919: ST_TO_ADDR
// if GetTaskList ( unit ) then
54920: LD_VAR 0 1
54924: PPUSH
54925: CALL_OW 437
54929: IFFALSE 55012
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54931: LD_STRING M
54933: PUSH
54934: LD_VAR 0 1
54938: PPUSH
54939: CALL_OW 437
54943: PUSH
54944: LD_INT 1
54946: ARRAY
54947: PUSH
54948: LD_INT 1
54950: ARRAY
54951: EQUAL
54952: PUSH
54953: LD_VAR 0 2
54957: PUSH
54958: LD_VAR 0 1
54962: PPUSH
54963: CALL_OW 437
54967: PUSH
54968: LD_INT 1
54970: ARRAY
54971: PUSH
54972: LD_INT 2
54974: ARRAY
54975: EQUAL
54976: AND
54977: PUSH
54978: LD_VAR 0 3
54982: PUSH
54983: LD_VAR 0 1
54987: PPUSH
54988: CALL_OW 437
54992: PUSH
54993: LD_INT 1
54995: ARRAY
54996: PUSH
54997: LD_INT 3
54999: ARRAY
55000: EQUAL
55001: AND
55002: IFFALSE 55012
// result := true ;
55004: LD_ADDR_VAR 0 4
55008: PUSH
55009: LD_INT 1
55011: ST_TO_ADDR
// end ; end ;
55012: LD_VAR 0 4
55016: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
55017: LD_INT 0
55019: PPUSH
55020: PPUSH
55021: PPUSH
55022: PPUSH
// if not unit or not area then
55023: LD_VAR 0 1
55027: NOT
55028: PUSH
55029: LD_VAR 0 2
55033: NOT
55034: OR
55035: IFFALSE 55039
// exit ;
55037: GO 55203
// tmp := AreaToList ( area , i ) ;
55039: LD_ADDR_VAR 0 6
55043: PUSH
55044: LD_VAR 0 2
55048: PPUSH
55049: LD_VAR 0 5
55053: PPUSH
55054: CALL_OW 517
55058: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55059: LD_ADDR_VAR 0 5
55063: PUSH
55064: DOUBLE
55065: LD_INT 1
55067: DEC
55068: ST_TO_ADDR
55069: LD_VAR 0 6
55073: PUSH
55074: LD_INT 1
55076: ARRAY
55077: PUSH
55078: FOR_TO
55079: IFFALSE 55201
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
55081: LD_ADDR_VAR 0 7
55085: PUSH
55086: LD_VAR 0 6
55090: PUSH
55091: LD_INT 1
55093: ARRAY
55094: PUSH
55095: LD_VAR 0 5
55099: ARRAY
55100: PUSH
55101: LD_VAR 0 6
55105: PUSH
55106: LD_INT 2
55108: ARRAY
55109: PUSH
55110: LD_VAR 0 5
55114: ARRAY
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
55120: LD_VAR 0 7
55124: PUSH
55125: LD_INT 1
55127: ARRAY
55128: PPUSH
55129: LD_VAR 0 7
55133: PUSH
55134: LD_INT 2
55136: ARRAY
55137: PPUSH
55138: CALL_OW 428
55142: PUSH
55143: LD_INT 0
55145: EQUAL
55146: IFFALSE 55199
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
55148: LD_VAR 0 1
55152: PPUSH
55153: LD_VAR 0 7
55157: PUSH
55158: LD_INT 1
55160: ARRAY
55161: PPUSH
55162: LD_VAR 0 7
55166: PUSH
55167: LD_INT 2
55169: ARRAY
55170: PPUSH
55171: LD_VAR 0 3
55175: PPUSH
55176: CALL_OW 48
// result := IsPlaced ( unit ) ;
55180: LD_ADDR_VAR 0 4
55184: PUSH
55185: LD_VAR 0 1
55189: PPUSH
55190: CALL_OW 305
55194: ST_TO_ADDR
// exit ;
55195: POP
55196: POP
55197: GO 55203
// end ; end ;
55199: GO 55078
55201: POP
55202: POP
// end ;
55203: LD_VAR 0 4
55207: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
55208: LD_INT 0
55210: PPUSH
55211: PPUSH
55212: PPUSH
// if not side or side > 8 then
55213: LD_VAR 0 1
55217: NOT
55218: PUSH
55219: LD_VAR 0 1
55223: PUSH
55224: LD_INT 8
55226: GREATER
55227: OR
55228: IFFALSE 55232
// exit ;
55230: GO 55419
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
55232: LD_ADDR_VAR 0 4
55236: PUSH
55237: LD_INT 22
55239: PUSH
55240: LD_VAR 0 1
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 21
55251: PUSH
55252: LD_INT 3
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PPUSH
55263: CALL_OW 69
55267: ST_TO_ADDR
// if not tmp then
55268: LD_VAR 0 4
55272: NOT
55273: IFFALSE 55277
// exit ;
55275: GO 55419
// enable_addtolog := true ;
55277: LD_ADDR_OWVAR 81
55281: PUSH
55282: LD_INT 1
55284: ST_TO_ADDR
// AddToLog ( [ ) ;
55285: LD_STRING [
55287: PPUSH
55288: CALL_OW 561
// for i in tmp do
55292: LD_ADDR_VAR 0 3
55296: PUSH
55297: LD_VAR 0 4
55301: PUSH
55302: FOR_IN
55303: IFFALSE 55410
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
55305: LD_STRING [
55307: PUSH
55308: LD_VAR 0 3
55312: PPUSH
55313: CALL_OW 266
55317: STR
55318: PUSH
55319: LD_STRING , 
55321: STR
55322: PUSH
55323: LD_VAR 0 3
55327: PPUSH
55328: CALL_OW 250
55332: STR
55333: PUSH
55334: LD_STRING , 
55336: STR
55337: PUSH
55338: LD_VAR 0 3
55342: PPUSH
55343: CALL_OW 251
55347: STR
55348: PUSH
55349: LD_STRING , 
55351: STR
55352: PUSH
55353: LD_VAR 0 3
55357: PPUSH
55358: CALL_OW 254
55362: STR
55363: PUSH
55364: LD_STRING , 
55366: STR
55367: PUSH
55368: LD_VAR 0 3
55372: PPUSH
55373: LD_INT 1
55375: PPUSH
55376: CALL_OW 268
55380: STR
55381: PUSH
55382: LD_STRING , 
55384: STR
55385: PUSH
55386: LD_VAR 0 3
55390: PPUSH
55391: LD_INT 2
55393: PPUSH
55394: CALL_OW 268
55398: STR
55399: PUSH
55400: LD_STRING ],
55402: STR
55403: PPUSH
55404: CALL_OW 561
// end ;
55408: GO 55302
55410: POP
55411: POP
// AddToLog ( ]; ) ;
55412: LD_STRING ];
55414: PPUSH
55415: CALL_OW 561
// end ;
55419: LD_VAR 0 2
55423: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
55424: LD_INT 0
55426: PPUSH
55427: PPUSH
55428: PPUSH
55429: PPUSH
55430: PPUSH
// if not area or not rate or not max then
55431: LD_VAR 0 1
55435: NOT
55436: PUSH
55437: LD_VAR 0 2
55441: NOT
55442: OR
55443: PUSH
55444: LD_VAR 0 4
55448: NOT
55449: OR
55450: IFFALSE 55454
// exit ;
55452: GO 55646
// while 1 do
55454: LD_INT 1
55456: IFFALSE 55646
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
55458: LD_ADDR_VAR 0 9
55462: PUSH
55463: LD_VAR 0 1
55467: PPUSH
55468: LD_INT 1
55470: PPUSH
55471: CALL_OW 287
55475: PUSH
55476: LD_INT 10
55478: MUL
55479: ST_TO_ADDR
// r := rate / 10 ;
55480: LD_ADDR_VAR 0 7
55484: PUSH
55485: LD_VAR 0 2
55489: PUSH
55490: LD_INT 10
55492: DIVREAL
55493: ST_TO_ADDR
// time := 1 1$00 ;
55494: LD_ADDR_VAR 0 8
55498: PUSH
55499: LD_INT 2100
55501: ST_TO_ADDR
// if amount < min then
55502: LD_VAR 0 9
55506: PUSH
55507: LD_VAR 0 3
55511: LESS
55512: IFFALSE 55530
// r := r * 2 else
55514: LD_ADDR_VAR 0 7
55518: PUSH
55519: LD_VAR 0 7
55523: PUSH
55524: LD_INT 2
55526: MUL
55527: ST_TO_ADDR
55528: GO 55556
// if amount > max then
55530: LD_VAR 0 9
55534: PUSH
55535: LD_VAR 0 4
55539: GREATER
55540: IFFALSE 55556
// r := r / 2 ;
55542: LD_ADDR_VAR 0 7
55546: PUSH
55547: LD_VAR 0 7
55551: PUSH
55552: LD_INT 2
55554: DIVREAL
55555: ST_TO_ADDR
// time := time / r ;
55556: LD_ADDR_VAR 0 8
55560: PUSH
55561: LD_VAR 0 8
55565: PUSH
55566: LD_VAR 0 7
55570: DIVREAL
55571: ST_TO_ADDR
// if time < 0 then
55572: LD_VAR 0 8
55576: PUSH
55577: LD_INT 0
55579: LESS
55580: IFFALSE 55597
// time := time * - 1 ;
55582: LD_ADDR_VAR 0 8
55586: PUSH
55587: LD_VAR 0 8
55591: PUSH
55592: LD_INT 1
55594: NEG
55595: MUL
55596: ST_TO_ADDR
// wait ( time ) ;
55597: LD_VAR 0 8
55601: PPUSH
55602: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
55606: LD_INT 35
55608: PPUSH
55609: LD_INT 875
55611: PPUSH
55612: CALL_OW 12
55616: PPUSH
55617: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
55621: LD_INT 1
55623: PPUSH
55624: LD_INT 5
55626: PPUSH
55627: CALL_OW 12
55631: PPUSH
55632: LD_VAR 0 1
55636: PPUSH
55637: LD_INT 1
55639: PPUSH
55640: CALL_OW 55
// end ;
55644: GO 55454
// end ;
55646: LD_VAR 0 5
55650: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
55651: LD_INT 0
55653: PPUSH
55654: PPUSH
55655: PPUSH
55656: PPUSH
55657: PPUSH
55658: PPUSH
55659: PPUSH
55660: PPUSH
// if not turrets or not factories then
55661: LD_VAR 0 1
55665: NOT
55666: PUSH
55667: LD_VAR 0 2
55671: NOT
55672: OR
55673: IFFALSE 55677
// exit ;
55675: GO 55984
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
55677: LD_ADDR_VAR 0 10
55681: PUSH
55682: LD_INT 5
55684: PUSH
55685: LD_INT 6
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 2
55694: PUSH
55695: LD_INT 4
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 3
55704: PUSH
55705: LD_INT 5
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 24
55719: PUSH
55720: LD_INT 25
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 23
55729: PUSH
55730: LD_INT 27
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 42
55743: PUSH
55744: LD_INT 43
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 44
55753: PUSH
55754: LD_INT 46
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 45
55763: PUSH
55764: LD_INT 47
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: LIST
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: LIST
55780: ST_TO_ADDR
// result := [ ] ;
55781: LD_ADDR_VAR 0 3
55785: PUSH
55786: EMPTY
55787: ST_TO_ADDR
// for i in turrets do
55788: LD_ADDR_VAR 0 4
55792: PUSH
55793: LD_VAR 0 1
55797: PUSH
55798: FOR_IN
55799: IFFALSE 55982
// begin nat := GetNation ( i ) ;
55801: LD_ADDR_VAR 0 7
55805: PUSH
55806: LD_VAR 0 4
55810: PPUSH
55811: CALL_OW 248
55815: ST_TO_ADDR
// weapon := 0 ;
55816: LD_ADDR_VAR 0 8
55820: PUSH
55821: LD_INT 0
55823: ST_TO_ADDR
// if not nat then
55824: LD_VAR 0 7
55828: NOT
55829: IFFALSE 55833
// continue ;
55831: GO 55798
// for j in list [ nat ] do
55833: LD_ADDR_VAR 0 5
55837: PUSH
55838: LD_VAR 0 10
55842: PUSH
55843: LD_VAR 0 7
55847: ARRAY
55848: PUSH
55849: FOR_IN
55850: IFFALSE 55891
// if GetBWeapon ( i ) = j [ 1 ] then
55852: LD_VAR 0 4
55856: PPUSH
55857: CALL_OW 269
55861: PUSH
55862: LD_VAR 0 5
55866: PUSH
55867: LD_INT 1
55869: ARRAY
55870: EQUAL
55871: IFFALSE 55889
// begin weapon := j [ 2 ] ;
55873: LD_ADDR_VAR 0 8
55877: PUSH
55878: LD_VAR 0 5
55882: PUSH
55883: LD_INT 2
55885: ARRAY
55886: ST_TO_ADDR
// break ;
55887: GO 55891
// end ;
55889: GO 55849
55891: POP
55892: POP
// if not weapon then
55893: LD_VAR 0 8
55897: NOT
55898: IFFALSE 55902
// continue ;
55900: GO 55798
// for k in factories do
55902: LD_ADDR_VAR 0 6
55906: PUSH
55907: LD_VAR 0 2
55911: PUSH
55912: FOR_IN
55913: IFFALSE 55978
// begin weapons := AvailableWeaponList ( k ) ;
55915: LD_ADDR_VAR 0 9
55919: PUSH
55920: LD_VAR 0 6
55924: PPUSH
55925: CALL_OW 478
55929: ST_TO_ADDR
// if not weapons then
55930: LD_VAR 0 9
55934: NOT
55935: IFFALSE 55939
// continue ;
55937: GO 55912
// if weapon in weapons then
55939: LD_VAR 0 8
55943: PUSH
55944: LD_VAR 0 9
55948: IN
55949: IFFALSE 55976
// begin result := [ i , weapon ] ;
55951: LD_ADDR_VAR 0 3
55955: PUSH
55956: LD_VAR 0 4
55960: PUSH
55961: LD_VAR 0 8
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: ST_TO_ADDR
// exit ;
55970: POP
55971: POP
55972: POP
55973: POP
55974: GO 55984
// end ; end ;
55976: GO 55912
55978: POP
55979: POP
// end ;
55980: GO 55798
55982: POP
55983: POP
// end ;
55984: LD_VAR 0 3
55988: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55989: LD_INT 0
55991: PPUSH
// if not side or side > 8 then
55992: LD_VAR 0 3
55996: NOT
55997: PUSH
55998: LD_VAR 0 3
56002: PUSH
56003: LD_INT 8
56005: GREATER
56006: OR
56007: IFFALSE 56011
// exit ;
56009: GO 56070
// if not range then
56011: LD_VAR 0 4
56015: NOT
56016: IFFALSE 56027
// range := - 12 ;
56018: LD_ADDR_VAR 0 4
56022: PUSH
56023: LD_INT 12
56025: NEG
56026: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
56027: LD_VAR 0 1
56031: PPUSH
56032: LD_VAR 0 2
56036: PPUSH
56037: LD_VAR 0 3
56041: PPUSH
56042: LD_VAR 0 4
56046: PPUSH
56047: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56051: LD_VAR 0 1
56055: PPUSH
56056: LD_VAR 0 2
56060: PPUSH
56061: LD_VAR 0 3
56065: PPUSH
56066: CALL_OW 331
// end ;
56070: LD_VAR 0 5
56074: RET
// export function Video ( mode ) ; begin
56075: LD_INT 0
56077: PPUSH
// ingame_video = mode ;
56078: LD_ADDR_OWVAR 52
56082: PUSH
56083: LD_VAR 0 1
56087: ST_TO_ADDR
// interface_hidden = mode ;
56088: LD_ADDR_OWVAR 54
56092: PUSH
56093: LD_VAR 0 1
56097: ST_TO_ADDR
// end ;
56098: LD_VAR 0 2
56102: RET
// export function Join ( array , element ) ; begin
56103: LD_INT 0
56105: PPUSH
// result := Replace ( array , array + 1 , element ) ;
56106: LD_ADDR_VAR 0 3
56110: PUSH
56111: LD_VAR 0 1
56115: PPUSH
56116: LD_VAR 0 1
56120: PUSH
56121: LD_INT 1
56123: PLUS
56124: PPUSH
56125: LD_VAR 0 2
56129: PPUSH
56130: CALL_OW 1
56134: ST_TO_ADDR
// end ;
56135: LD_VAR 0 3
56139: RET
// export function JoinUnion ( array , element ) ; begin
56140: LD_INT 0
56142: PPUSH
// result := array union element ;
56143: LD_ADDR_VAR 0 3
56147: PUSH
56148: LD_VAR 0 1
56152: PUSH
56153: LD_VAR 0 2
56157: UNION
56158: ST_TO_ADDR
// end ;
56159: LD_VAR 0 3
56163: RET
// export function GetBehemoths ( side ) ; begin
56164: LD_INT 0
56166: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
56167: LD_ADDR_VAR 0 2
56171: PUSH
56172: LD_INT 22
56174: PUSH
56175: LD_VAR 0 1
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 31
56186: PUSH
56187: LD_INT 25
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PPUSH
56198: CALL_OW 69
56202: ST_TO_ADDR
// end ;
56203: LD_VAR 0 2
56207: RET
// export function Shuffle ( array ) ; var i , index ; begin
56208: LD_INT 0
56210: PPUSH
56211: PPUSH
56212: PPUSH
// result := [ ] ;
56213: LD_ADDR_VAR 0 2
56217: PUSH
56218: EMPTY
56219: ST_TO_ADDR
// if not array then
56220: LD_VAR 0 1
56224: NOT
56225: IFFALSE 56229
// exit ;
56227: GO 56328
// Randomize ;
56229: CALL_OW 10
// for i = array downto 1 do
56233: LD_ADDR_VAR 0 3
56237: PUSH
56238: DOUBLE
56239: LD_VAR 0 1
56243: INC
56244: ST_TO_ADDR
56245: LD_INT 1
56247: PUSH
56248: FOR_DOWNTO
56249: IFFALSE 56326
// begin index := rand ( 1 , array ) ;
56251: LD_ADDR_VAR 0 4
56255: PUSH
56256: LD_INT 1
56258: PPUSH
56259: LD_VAR 0 1
56263: PPUSH
56264: CALL_OW 12
56268: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
56269: LD_ADDR_VAR 0 2
56273: PUSH
56274: LD_VAR 0 2
56278: PPUSH
56279: LD_VAR 0 2
56283: PUSH
56284: LD_INT 1
56286: PLUS
56287: PPUSH
56288: LD_VAR 0 1
56292: PUSH
56293: LD_VAR 0 4
56297: ARRAY
56298: PPUSH
56299: CALL_OW 2
56303: ST_TO_ADDR
// array := Delete ( array , index ) ;
56304: LD_ADDR_VAR 0 1
56308: PUSH
56309: LD_VAR 0 1
56313: PPUSH
56314: LD_VAR 0 4
56318: PPUSH
56319: CALL_OW 3
56323: ST_TO_ADDR
// end ;
56324: GO 56248
56326: POP
56327: POP
// end ;
56328: LD_VAR 0 2
56332: RET
// export function GetBaseMaterials ( base ) ; begin
56333: LD_INT 0
56335: PPUSH
// result := [ 0 , 0 , 0 ] ;
56336: LD_ADDR_VAR 0 2
56340: PUSH
56341: LD_INT 0
56343: PUSH
56344: LD_INT 0
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: LIST
56354: ST_TO_ADDR
// if not base then
56355: LD_VAR 0 1
56359: NOT
56360: IFFALSE 56364
// exit ;
56362: GO 56413
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
56364: LD_ADDR_VAR 0 2
56368: PUSH
56369: LD_VAR 0 1
56373: PPUSH
56374: LD_INT 1
56376: PPUSH
56377: CALL_OW 275
56381: PUSH
56382: LD_VAR 0 1
56386: PPUSH
56387: LD_INT 2
56389: PPUSH
56390: CALL_OW 275
56394: PUSH
56395: LD_VAR 0 1
56399: PPUSH
56400: LD_INT 3
56402: PPUSH
56403: CALL_OW 275
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: LIST
56412: ST_TO_ADDR
// end ;
56413: LD_VAR 0 2
56417: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
56418: LD_INT 0
56420: PPUSH
56421: PPUSH
// result := array ;
56422: LD_ADDR_VAR 0 3
56426: PUSH
56427: LD_VAR 0 1
56431: ST_TO_ADDR
// if size > 0 then
56432: LD_VAR 0 2
56436: PUSH
56437: LD_INT 0
56439: GREATER
56440: IFFALSE 56486
// for i := array downto size do
56442: LD_ADDR_VAR 0 4
56446: PUSH
56447: DOUBLE
56448: LD_VAR 0 1
56452: INC
56453: ST_TO_ADDR
56454: LD_VAR 0 2
56458: PUSH
56459: FOR_DOWNTO
56460: IFFALSE 56484
// result := Delete ( result , result ) ;
56462: LD_ADDR_VAR 0 3
56466: PUSH
56467: LD_VAR 0 3
56471: PPUSH
56472: LD_VAR 0 3
56476: PPUSH
56477: CALL_OW 3
56481: ST_TO_ADDR
56482: GO 56459
56484: POP
56485: POP
// end ;
56486: LD_VAR 0 3
56490: RET
// export function ComExit ( unit ) ; var tmp ; begin
56491: LD_INT 0
56493: PPUSH
56494: PPUSH
// if not IsInUnit ( unit ) then
56495: LD_VAR 0 1
56499: PPUSH
56500: CALL_OW 310
56504: NOT
56505: IFFALSE 56509
// exit ;
56507: GO 56569
// tmp := IsInUnit ( unit ) ;
56509: LD_ADDR_VAR 0 3
56513: PUSH
56514: LD_VAR 0 1
56518: PPUSH
56519: CALL_OW 310
56523: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
56524: LD_VAR 0 3
56528: PPUSH
56529: CALL_OW 247
56533: PUSH
56534: LD_INT 2
56536: EQUAL
56537: IFFALSE 56550
// ComExitVehicle ( unit ) else
56539: LD_VAR 0 1
56543: PPUSH
56544: CALL_OW 121
56548: GO 56559
// ComExitBuilding ( unit ) ;
56550: LD_VAR 0 1
56554: PPUSH
56555: CALL_OW 122
// result := tmp ;
56559: LD_ADDR_VAR 0 2
56563: PUSH
56564: LD_VAR 0 3
56568: ST_TO_ADDR
// end ;
56569: LD_VAR 0 2
56573: RET
// export function ComExitAll ( units ) ; var i ; begin
56574: LD_INT 0
56576: PPUSH
56577: PPUSH
// if not units then
56578: LD_VAR 0 1
56582: NOT
56583: IFFALSE 56587
// exit ;
56585: GO 56613
// for i in units do
56587: LD_ADDR_VAR 0 3
56591: PUSH
56592: LD_VAR 0 1
56596: PUSH
56597: FOR_IN
56598: IFFALSE 56611
// ComExit ( i ) ;
56600: LD_VAR 0 3
56604: PPUSH
56605: CALL 56491 0 1
56609: GO 56597
56611: POP
56612: POP
// end ;
56613: LD_VAR 0 2
56617: RET
// export function ResetHc ; begin
56618: LD_INT 0
56620: PPUSH
// InitHc ;
56621: CALL_OW 19
// hc_importance := 0 ;
56625: LD_ADDR_OWVAR 32
56629: PUSH
56630: LD_INT 0
56632: ST_TO_ADDR
// end ;
56633: LD_VAR 0 1
56637: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
56638: LD_INT 0
56640: PPUSH
56641: PPUSH
56642: PPUSH
// _x := ( x1 + x2 ) div 2 ;
56643: LD_ADDR_VAR 0 6
56647: PUSH
56648: LD_VAR 0 1
56652: PUSH
56653: LD_VAR 0 3
56657: PLUS
56658: PUSH
56659: LD_INT 2
56661: DIV
56662: ST_TO_ADDR
// if _x < 0 then
56663: LD_VAR 0 6
56667: PUSH
56668: LD_INT 0
56670: LESS
56671: IFFALSE 56688
// _x := _x * - 1 ;
56673: LD_ADDR_VAR 0 6
56677: PUSH
56678: LD_VAR 0 6
56682: PUSH
56683: LD_INT 1
56685: NEG
56686: MUL
56687: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
56688: LD_ADDR_VAR 0 7
56692: PUSH
56693: LD_VAR 0 2
56697: PUSH
56698: LD_VAR 0 4
56702: PLUS
56703: PUSH
56704: LD_INT 2
56706: DIV
56707: ST_TO_ADDR
// if _y < 0 then
56708: LD_VAR 0 7
56712: PUSH
56713: LD_INT 0
56715: LESS
56716: IFFALSE 56733
// _y := _y * - 1 ;
56718: LD_ADDR_VAR 0 7
56722: PUSH
56723: LD_VAR 0 7
56727: PUSH
56728: LD_INT 1
56730: NEG
56731: MUL
56732: ST_TO_ADDR
// result := [ _x , _y ] ;
56733: LD_ADDR_VAR 0 5
56737: PUSH
56738: LD_VAR 0 6
56742: PUSH
56743: LD_VAR 0 7
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: ST_TO_ADDR
// end ;
56752: LD_VAR 0 5
56756: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
56757: LD_INT 0
56759: PPUSH
56760: PPUSH
56761: PPUSH
56762: PPUSH
// task := GetTaskList ( unit ) ;
56763: LD_ADDR_VAR 0 7
56767: PUSH
56768: LD_VAR 0 1
56772: PPUSH
56773: CALL_OW 437
56777: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
56778: LD_VAR 0 7
56782: NOT
56783: PUSH
56784: LD_VAR 0 1
56788: PPUSH
56789: LD_VAR 0 2
56793: PPUSH
56794: CALL_OW 308
56798: NOT
56799: AND
56800: IFFALSE 56804
// exit ;
56802: GO 56922
// if IsInArea ( unit , area ) then
56804: LD_VAR 0 1
56808: PPUSH
56809: LD_VAR 0 2
56813: PPUSH
56814: CALL_OW 308
56818: IFFALSE 56836
// begin ComMoveToArea ( unit , goAway ) ;
56820: LD_VAR 0 1
56824: PPUSH
56825: LD_VAR 0 3
56829: PPUSH
56830: CALL_OW 113
// exit ;
56834: GO 56922
// end ; if task [ 1 ] [ 1 ] <> M then
56836: LD_VAR 0 7
56840: PUSH
56841: LD_INT 1
56843: ARRAY
56844: PUSH
56845: LD_INT 1
56847: ARRAY
56848: PUSH
56849: LD_STRING M
56851: NONEQUAL
56852: IFFALSE 56856
// exit ;
56854: GO 56922
// x := task [ 1 ] [ 2 ] ;
56856: LD_ADDR_VAR 0 5
56860: PUSH
56861: LD_VAR 0 7
56865: PUSH
56866: LD_INT 1
56868: ARRAY
56869: PUSH
56870: LD_INT 2
56872: ARRAY
56873: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
56874: LD_ADDR_VAR 0 6
56878: PUSH
56879: LD_VAR 0 7
56883: PUSH
56884: LD_INT 1
56886: ARRAY
56887: PUSH
56888: LD_INT 3
56890: ARRAY
56891: ST_TO_ADDR
// if InArea ( x , y , area ) then
56892: LD_VAR 0 5
56896: PPUSH
56897: LD_VAR 0 6
56901: PPUSH
56902: LD_VAR 0 2
56906: PPUSH
56907: CALL_OW 309
56911: IFFALSE 56922
// ComStop ( unit ) ;
56913: LD_VAR 0 1
56917: PPUSH
56918: CALL_OW 141
// end ;
56922: LD_VAR 0 4
56926: RET
// export function Abs ( value ) ; begin
56927: LD_INT 0
56929: PPUSH
// result := value ;
56930: LD_ADDR_VAR 0 2
56934: PUSH
56935: LD_VAR 0 1
56939: ST_TO_ADDR
// if value < 0 then
56940: LD_VAR 0 1
56944: PUSH
56945: LD_INT 0
56947: LESS
56948: IFFALSE 56965
// result := value * - 1 ;
56950: LD_ADDR_VAR 0 2
56954: PUSH
56955: LD_VAR 0 1
56959: PUSH
56960: LD_INT 1
56962: NEG
56963: MUL
56964: ST_TO_ADDR
// end ;
56965: LD_VAR 0 2
56969: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
56970: LD_INT 0
56972: PPUSH
56973: PPUSH
56974: PPUSH
56975: PPUSH
56976: PPUSH
56977: PPUSH
56978: PPUSH
56979: PPUSH
// if not unit or not building then
56980: LD_VAR 0 1
56984: NOT
56985: PUSH
56986: LD_VAR 0 2
56990: NOT
56991: OR
56992: IFFALSE 56996
// exit ;
56994: GO 57222
// x := GetX ( building ) ;
56996: LD_ADDR_VAR 0 4
57000: PUSH
57001: LD_VAR 0 2
57005: PPUSH
57006: CALL_OW 250
57010: ST_TO_ADDR
// y := GetY ( building ) ;
57011: LD_ADDR_VAR 0 6
57015: PUSH
57016: LD_VAR 0 2
57020: PPUSH
57021: CALL_OW 251
57025: ST_TO_ADDR
// d := GetDir ( building ) ;
57026: LD_ADDR_VAR 0 8
57030: PUSH
57031: LD_VAR 0 2
57035: PPUSH
57036: CALL_OW 254
57040: ST_TO_ADDR
// r := 4 ;
57041: LD_ADDR_VAR 0 9
57045: PUSH
57046: LD_INT 4
57048: ST_TO_ADDR
// for i := 1 to 5 do
57049: LD_ADDR_VAR 0 10
57053: PUSH
57054: DOUBLE
57055: LD_INT 1
57057: DEC
57058: ST_TO_ADDR
57059: LD_INT 5
57061: PUSH
57062: FOR_TO
57063: IFFALSE 57220
// begin _x := ShiftX ( x , d , r + i ) ;
57065: LD_ADDR_VAR 0 5
57069: PUSH
57070: LD_VAR 0 4
57074: PPUSH
57075: LD_VAR 0 8
57079: PPUSH
57080: LD_VAR 0 9
57084: PUSH
57085: LD_VAR 0 10
57089: PLUS
57090: PPUSH
57091: CALL_OW 272
57095: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
57096: LD_ADDR_VAR 0 7
57100: PUSH
57101: LD_VAR 0 6
57105: PPUSH
57106: LD_VAR 0 8
57110: PPUSH
57111: LD_VAR 0 9
57115: PUSH
57116: LD_VAR 0 10
57120: PLUS
57121: PPUSH
57122: CALL_OW 273
57126: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
57127: LD_VAR 0 5
57131: PPUSH
57132: LD_VAR 0 7
57136: PPUSH
57137: CALL_OW 488
57141: PUSH
57142: LD_VAR 0 5
57146: PPUSH
57147: LD_VAR 0 7
57151: PPUSH
57152: CALL_OW 428
57156: PPUSH
57157: CALL_OW 247
57161: PUSH
57162: LD_INT 3
57164: PUSH
57165: LD_INT 2
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: IN
57172: NOT
57173: AND
57174: IFFALSE 57218
// begin ComMoveXY ( unit , _x , _y ) ;
57176: LD_VAR 0 1
57180: PPUSH
57181: LD_VAR 0 5
57185: PPUSH
57186: LD_VAR 0 7
57190: PPUSH
57191: CALL_OW 111
// result := [ _x , _y ] ;
57195: LD_ADDR_VAR 0 3
57199: PUSH
57200: LD_VAR 0 5
57204: PUSH
57205: LD_VAR 0 7
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: ST_TO_ADDR
// exit ;
57214: POP
57215: POP
57216: GO 57222
// end ; end ;
57218: GO 57062
57220: POP
57221: POP
// end ;
57222: LD_VAR 0 3
57226: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
57227: LD_INT 0
57229: PPUSH
57230: PPUSH
57231: PPUSH
// result := 0 ;
57232: LD_ADDR_VAR 0 3
57236: PUSH
57237: LD_INT 0
57239: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
57240: LD_VAR 0 1
57244: PUSH
57245: LD_INT 0
57247: LESS
57248: PUSH
57249: LD_VAR 0 1
57253: PUSH
57254: LD_INT 8
57256: GREATER
57257: OR
57258: PUSH
57259: LD_VAR 0 2
57263: PUSH
57264: LD_INT 0
57266: LESS
57267: OR
57268: PUSH
57269: LD_VAR 0 2
57273: PUSH
57274: LD_INT 8
57276: GREATER
57277: OR
57278: IFFALSE 57282
// exit ;
57280: GO 57357
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
57282: LD_ADDR_VAR 0 4
57286: PUSH
57287: LD_INT 22
57289: PUSH
57290: LD_VAR 0 2
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PPUSH
57299: CALL_OW 69
57303: PUSH
57304: FOR_IN
57305: IFFALSE 57355
// begin un := UnitShoot ( i ) ;
57307: LD_ADDR_VAR 0 5
57311: PUSH
57312: LD_VAR 0 4
57316: PPUSH
57317: CALL_OW 504
57321: ST_TO_ADDR
// if GetSide ( un ) = side1 then
57322: LD_VAR 0 5
57326: PPUSH
57327: CALL_OW 255
57331: PUSH
57332: LD_VAR 0 1
57336: EQUAL
57337: IFFALSE 57353
// begin result := un ;
57339: LD_ADDR_VAR 0 3
57343: PUSH
57344: LD_VAR 0 5
57348: ST_TO_ADDR
// exit ;
57349: POP
57350: POP
57351: GO 57357
// end ; end ;
57353: GO 57304
57355: POP
57356: POP
// end ;
57357: LD_VAR 0 3
57361: RET
// export function GetCargoBay ( units ) ; begin
57362: LD_INT 0
57364: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
57365: LD_ADDR_VAR 0 2
57369: PUSH
57370: LD_VAR 0 1
57374: PPUSH
57375: LD_INT 2
57377: PUSH
57378: LD_INT 34
57380: PUSH
57381: LD_INT 12
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 34
57390: PUSH
57391: LD_INT 51
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 34
57400: PUSH
57401: LD_INT 32
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 34
57410: PUSH
57411: LD_EXP 71
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: PPUSH
57427: CALL_OW 72
57431: ST_TO_ADDR
// end ;
57432: LD_VAR 0 2
57436: RET
// export function Negate ( value ) ; begin
57437: LD_INT 0
57439: PPUSH
// result := not value ;
57440: LD_ADDR_VAR 0 2
57444: PUSH
57445: LD_VAR 0 1
57449: NOT
57450: ST_TO_ADDR
// end ;
57451: LD_VAR 0 2
57455: RET
// export function Inc ( value ) ; begin
57456: LD_INT 0
57458: PPUSH
// result := value + 1 ;
57459: LD_ADDR_VAR 0 2
57463: PUSH
57464: LD_VAR 0 1
57468: PUSH
57469: LD_INT 1
57471: PLUS
57472: ST_TO_ADDR
// end ;
57473: LD_VAR 0 2
57477: RET
// export function Dec ( value ) ; begin
57478: LD_INT 0
57480: PPUSH
// result := value - 1 ;
57481: LD_ADDR_VAR 0 2
57485: PUSH
57486: LD_VAR 0 1
57490: PUSH
57491: LD_INT 1
57493: MINUS
57494: ST_TO_ADDR
// end ;
57495: LD_VAR 0 2
57499: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
57500: LD_INT 0
57502: PPUSH
57503: PPUSH
57504: PPUSH
57505: PPUSH
57506: PPUSH
57507: PPUSH
57508: PPUSH
57509: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
57510: LD_VAR 0 1
57514: PPUSH
57515: LD_VAR 0 2
57519: PPUSH
57520: CALL_OW 488
57524: NOT
57525: PUSH
57526: LD_VAR 0 3
57530: PPUSH
57531: LD_VAR 0 4
57535: PPUSH
57536: CALL_OW 488
57540: NOT
57541: OR
57542: IFFALSE 57555
// begin result := - 1 ;
57544: LD_ADDR_VAR 0 5
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: ST_TO_ADDR
// exit ;
57553: GO 57790
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
57555: LD_ADDR_VAR 0 12
57559: PUSH
57560: LD_VAR 0 1
57564: PPUSH
57565: LD_VAR 0 2
57569: PPUSH
57570: LD_VAR 0 3
57574: PPUSH
57575: LD_VAR 0 4
57579: PPUSH
57580: CALL 56638 0 4
57584: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
57585: LD_ADDR_VAR 0 11
57589: PUSH
57590: LD_VAR 0 1
57594: PPUSH
57595: LD_VAR 0 2
57599: PPUSH
57600: LD_VAR 0 12
57604: PUSH
57605: LD_INT 1
57607: ARRAY
57608: PPUSH
57609: LD_VAR 0 12
57613: PUSH
57614: LD_INT 2
57616: ARRAY
57617: PPUSH
57618: CALL_OW 298
57622: ST_TO_ADDR
// distance := 9999 ;
57623: LD_ADDR_VAR 0 10
57627: PUSH
57628: LD_INT 9999
57630: ST_TO_ADDR
// for i := 0 to 5 do
57631: LD_ADDR_VAR 0 6
57635: PUSH
57636: DOUBLE
57637: LD_INT 0
57639: DEC
57640: ST_TO_ADDR
57641: LD_INT 5
57643: PUSH
57644: FOR_TO
57645: IFFALSE 57788
// begin _x := ShiftX ( x1 , i , centerDist ) ;
57647: LD_ADDR_VAR 0 7
57651: PUSH
57652: LD_VAR 0 1
57656: PPUSH
57657: LD_VAR 0 6
57661: PPUSH
57662: LD_VAR 0 11
57666: PPUSH
57667: CALL_OW 272
57671: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
57672: LD_ADDR_VAR 0 8
57676: PUSH
57677: LD_VAR 0 2
57681: PPUSH
57682: LD_VAR 0 6
57686: PPUSH
57687: LD_VAR 0 11
57691: PPUSH
57692: CALL_OW 273
57696: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57697: LD_VAR 0 7
57701: PPUSH
57702: LD_VAR 0 8
57706: PPUSH
57707: CALL_OW 488
57711: NOT
57712: IFFALSE 57716
// continue ;
57714: GO 57644
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
57716: LD_ADDR_VAR 0 9
57720: PUSH
57721: LD_VAR 0 12
57725: PUSH
57726: LD_INT 1
57728: ARRAY
57729: PPUSH
57730: LD_VAR 0 12
57734: PUSH
57735: LD_INT 2
57737: ARRAY
57738: PPUSH
57739: LD_VAR 0 7
57743: PPUSH
57744: LD_VAR 0 8
57748: PPUSH
57749: CALL_OW 298
57753: ST_TO_ADDR
// if tmp < distance then
57754: LD_VAR 0 9
57758: PUSH
57759: LD_VAR 0 10
57763: LESS
57764: IFFALSE 57786
// begin result := i ;
57766: LD_ADDR_VAR 0 5
57770: PUSH
57771: LD_VAR 0 6
57775: ST_TO_ADDR
// distance := tmp ;
57776: LD_ADDR_VAR 0 10
57780: PUSH
57781: LD_VAR 0 9
57785: ST_TO_ADDR
// end ; end ;
57786: GO 57644
57788: POP
57789: POP
// end ;
57790: LD_VAR 0 5
57794: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57795: LD_INT 0
57797: PPUSH
57798: PPUSH
// if not driver or not IsInUnit ( driver ) then
57799: LD_VAR 0 1
57803: NOT
57804: PUSH
57805: LD_VAR 0 1
57809: PPUSH
57810: CALL_OW 310
57814: NOT
57815: OR
57816: IFFALSE 57820
// exit ;
57818: GO 57910
// vehicle := IsInUnit ( driver ) ;
57820: LD_ADDR_VAR 0 3
57824: PUSH
57825: LD_VAR 0 1
57829: PPUSH
57830: CALL_OW 310
57834: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57835: LD_VAR 0 1
57839: PPUSH
57840: LD_STRING \
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: LD_INT 0
57848: PUSH
57849: LD_INT 0
57851: PUSH
57852: LD_INT 0
57854: PUSH
57855: LD_INT 0
57857: PUSH
57858: LD_INT 0
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: PUSH
57870: LD_STRING E
57872: PUSH
57873: LD_INT 0
57875: PUSH
57876: LD_INT 0
57878: PUSH
57879: LD_VAR 0 3
57883: PUSH
57884: LD_INT 0
57886: PUSH
57887: LD_INT 0
57889: PUSH
57890: LD_INT 0
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PPUSH
57906: CALL_OW 446
// end ;
57910: LD_VAR 0 2
57914: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57915: LD_INT 0
57917: PPUSH
57918: PPUSH
// if not driver or not IsInUnit ( driver ) then
57919: LD_VAR 0 1
57923: NOT
57924: PUSH
57925: LD_VAR 0 1
57929: PPUSH
57930: CALL_OW 310
57934: NOT
57935: OR
57936: IFFALSE 57940
// exit ;
57938: GO 58030
// vehicle := IsInUnit ( driver ) ;
57940: LD_ADDR_VAR 0 3
57944: PUSH
57945: LD_VAR 0 1
57949: PPUSH
57950: CALL_OW 310
57954: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57955: LD_VAR 0 1
57959: PPUSH
57960: LD_STRING \
57962: PUSH
57963: LD_INT 0
57965: PUSH
57966: LD_INT 0
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: LD_INT 0
57974: PUSH
57975: LD_INT 0
57977: PUSH
57978: LD_INT 0
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: PUSH
57990: LD_STRING E
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: LD_INT 0
57998: PUSH
57999: LD_VAR 0 3
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: LD_INT 0
58009: PUSH
58010: LD_INT 0
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PPUSH
58026: CALL_OW 447
// end ;
58030: LD_VAR 0 2
58034: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
58035: LD_INT 0
58037: PPUSH
58038: PPUSH
58039: PPUSH
// tmp := [ ] ;
58040: LD_ADDR_VAR 0 5
58044: PUSH
58045: EMPTY
58046: ST_TO_ADDR
// for i in units do
58047: LD_ADDR_VAR 0 4
58051: PUSH
58052: LD_VAR 0 1
58056: PUSH
58057: FOR_IN
58058: IFFALSE 58096
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
58060: LD_ADDR_VAR 0 5
58064: PUSH
58065: LD_VAR 0 5
58069: PPUSH
58070: LD_VAR 0 5
58074: PUSH
58075: LD_INT 1
58077: PLUS
58078: PPUSH
58079: LD_VAR 0 4
58083: PPUSH
58084: CALL_OW 256
58088: PPUSH
58089: CALL_OW 2
58093: ST_TO_ADDR
58094: GO 58057
58096: POP
58097: POP
// if not tmp then
58098: LD_VAR 0 5
58102: NOT
58103: IFFALSE 58107
// exit ;
58105: GO 58155
// if asc then
58107: LD_VAR 0 2
58111: IFFALSE 58135
// result := SortListByListAsc ( units , tmp ) else
58113: LD_ADDR_VAR 0 3
58117: PUSH
58118: LD_VAR 0 1
58122: PPUSH
58123: LD_VAR 0 5
58127: PPUSH
58128: CALL_OW 76
58132: ST_TO_ADDR
58133: GO 58155
// result := SortListByListDesc ( units , tmp ) ;
58135: LD_ADDR_VAR 0 3
58139: PUSH
58140: LD_VAR 0 1
58144: PPUSH
58145: LD_VAR 0 5
58149: PPUSH
58150: CALL_OW 77
58154: ST_TO_ADDR
// end ;
58155: LD_VAR 0 3
58159: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
58160: LD_INT 0
58162: PPUSH
58163: PPUSH
// task := GetTaskList ( mech ) ;
58164: LD_ADDR_VAR 0 4
58168: PUSH
58169: LD_VAR 0 1
58173: PPUSH
58174: CALL_OW 437
58178: ST_TO_ADDR
// if not task then
58179: LD_VAR 0 4
58183: NOT
58184: IFFALSE 58188
// exit ;
58186: GO 58230
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
58188: LD_ADDR_VAR 0 3
58192: PUSH
58193: LD_VAR 0 4
58197: PUSH
58198: LD_INT 1
58200: ARRAY
58201: PUSH
58202: LD_INT 1
58204: ARRAY
58205: PUSH
58206: LD_STRING r
58208: EQUAL
58209: PUSH
58210: LD_VAR 0 4
58214: PUSH
58215: LD_INT 1
58217: ARRAY
58218: PUSH
58219: LD_INT 4
58221: ARRAY
58222: PUSH
58223: LD_VAR 0 2
58227: EQUAL
58228: AND
58229: ST_TO_ADDR
// end ;
58230: LD_VAR 0 3
58234: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
58235: LD_INT 0
58237: PPUSH
// SetDir ( unit , d ) ;
58238: LD_VAR 0 1
58242: PPUSH
58243: LD_VAR 0 4
58247: PPUSH
58248: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
58252: LD_VAR 0 1
58256: PPUSH
58257: LD_VAR 0 2
58261: PPUSH
58262: LD_VAR 0 3
58266: PPUSH
58267: LD_VAR 0 5
58271: PPUSH
58272: CALL_OW 48
// end ;
58276: LD_VAR 0 6
58280: RET
// export function ToNaturalNumber ( number ) ; begin
58281: LD_INT 0
58283: PPUSH
// result := number div 1 ;
58284: LD_ADDR_VAR 0 2
58288: PUSH
58289: LD_VAR 0 1
58293: PUSH
58294: LD_INT 1
58296: DIV
58297: ST_TO_ADDR
// if number < 0 then
58298: LD_VAR 0 1
58302: PUSH
58303: LD_INT 0
58305: LESS
58306: IFFALSE 58316
// result := 0 ;
58308: LD_ADDR_VAR 0 2
58312: PUSH
58313: LD_INT 0
58315: ST_TO_ADDR
// end ;
58316: LD_VAR 0 2
58320: RET
// export function SortByClass ( units , class ) ; var un ; begin
58321: LD_INT 0
58323: PPUSH
58324: PPUSH
// if not units or not class then
58325: LD_VAR 0 1
58329: NOT
58330: PUSH
58331: LD_VAR 0 2
58335: NOT
58336: OR
58337: IFFALSE 58341
// exit ;
58339: GO 58436
// result := [ ] ;
58341: LD_ADDR_VAR 0 3
58345: PUSH
58346: EMPTY
58347: ST_TO_ADDR
// for un in units do
58348: LD_ADDR_VAR 0 4
58352: PUSH
58353: LD_VAR 0 1
58357: PUSH
58358: FOR_IN
58359: IFFALSE 58434
// if GetClass ( un ) = class then
58361: LD_VAR 0 4
58365: PPUSH
58366: CALL_OW 257
58370: PUSH
58371: LD_VAR 0 2
58375: EQUAL
58376: IFFALSE 58403
// result := Insert ( result , 1 , un ) else
58378: LD_ADDR_VAR 0 3
58382: PUSH
58383: LD_VAR 0 3
58387: PPUSH
58388: LD_INT 1
58390: PPUSH
58391: LD_VAR 0 4
58395: PPUSH
58396: CALL_OW 2
58400: ST_TO_ADDR
58401: GO 58432
// result := Replace ( result , result + 1 , un ) ;
58403: LD_ADDR_VAR 0 3
58407: PUSH
58408: LD_VAR 0 3
58412: PPUSH
58413: LD_VAR 0 3
58417: PUSH
58418: LD_INT 1
58420: PLUS
58421: PPUSH
58422: LD_VAR 0 4
58426: PPUSH
58427: CALL_OW 1
58431: ST_TO_ADDR
58432: GO 58358
58434: POP
58435: POP
// end ;
58436: LD_VAR 0 3
58440: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
58441: LD_INT 0
58443: PPUSH
58444: PPUSH
58445: PPUSH
58446: PPUSH
58447: PPUSH
58448: PPUSH
58449: PPUSH
// result := [ ] ;
58450: LD_ADDR_VAR 0 4
58454: PUSH
58455: EMPTY
58456: ST_TO_ADDR
// if x - r < 0 then
58457: LD_VAR 0 1
58461: PUSH
58462: LD_VAR 0 3
58466: MINUS
58467: PUSH
58468: LD_INT 0
58470: LESS
58471: IFFALSE 58483
// min_x := 0 else
58473: LD_ADDR_VAR 0 8
58477: PUSH
58478: LD_INT 0
58480: ST_TO_ADDR
58481: GO 58499
// min_x := x - r ;
58483: LD_ADDR_VAR 0 8
58487: PUSH
58488: LD_VAR 0 1
58492: PUSH
58493: LD_VAR 0 3
58497: MINUS
58498: ST_TO_ADDR
// if y - r < 0 then
58499: LD_VAR 0 2
58503: PUSH
58504: LD_VAR 0 3
58508: MINUS
58509: PUSH
58510: LD_INT 0
58512: LESS
58513: IFFALSE 58525
// min_y := 0 else
58515: LD_ADDR_VAR 0 7
58519: PUSH
58520: LD_INT 0
58522: ST_TO_ADDR
58523: GO 58541
// min_y := y - r ;
58525: LD_ADDR_VAR 0 7
58529: PUSH
58530: LD_VAR 0 2
58534: PUSH
58535: LD_VAR 0 3
58539: MINUS
58540: ST_TO_ADDR
// max_x := x + r ;
58541: LD_ADDR_VAR 0 9
58545: PUSH
58546: LD_VAR 0 1
58550: PUSH
58551: LD_VAR 0 3
58555: PLUS
58556: ST_TO_ADDR
// max_y := y + r ;
58557: LD_ADDR_VAR 0 10
58561: PUSH
58562: LD_VAR 0 2
58566: PUSH
58567: LD_VAR 0 3
58571: PLUS
58572: ST_TO_ADDR
// for _x = min_x to max_x do
58573: LD_ADDR_VAR 0 5
58577: PUSH
58578: DOUBLE
58579: LD_VAR 0 8
58583: DEC
58584: ST_TO_ADDR
58585: LD_VAR 0 9
58589: PUSH
58590: FOR_TO
58591: IFFALSE 58692
// for _y = min_y to max_y do
58593: LD_ADDR_VAR 0 6
58597: PUSH
58598: DOUBLE
58599: LD_VAR 0 7
58603: DEC
58604: ST_TO_ADDR
58605: LD_VAR 0 10
58609: PUSH
58610: FOR_TO
58611: IFFALSE 58688
// begin if not ValidHex ( _x , _y ) then
58613: LD_VAR 0 5
58617: PPUSH
58618: LD_VAR 0 6
58622: PPUSH
58623: CALL_OW 488
58627: NOT
58628: IFFALSE 58632
// continue ;
58630: GO 58610
// if GetResourceTypeXY ( _x , _y ) then
58632: LD_VAR 0 5
58636: PPUSH
58637: LD_VAR 0 6
58641: PPUSH
58642: CALL_OW 283
58646: IFFALSE 58686
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
58648: LD_ADDR_VAR 0 4
58652: PUSH
58653: LD_VAR 0 4
58657: PPUSH
58658: LD_VAR 0 4
58662: PUSH
58663: LD_INT 1
58665: PLUS
58666: PPUSH
58667: LD_VAR 0 5
58671: PUSH
58672: LD_VAR 0 6
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PPUSH
58681: CALL_OW 1
58685: ST_TO_ADDR
// end ;
58686: GO 58610
58688: POP
58689: POP
58690: GO 58590
58692: POP
58693: POP
// end ;
58694: LD_VAR 0 4
58698: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
58699: LD_INT 0
58701: PPUSH
58702: PPUSH
58703: PPUSH
58704: PPUSH
58705: PPUSH
58706: PPUSH
58707: PPUSH
58708: PPUSH
// if not units then
58709: LD_VAR 0 1
58713: NOT
58714: IFFALSE 58718
// exit ;
58716: GO 59143
// result := UnitFilter ( units , [ f_ok ] ) ;
58718: LD_ADDR_VAR 0 3
58722: PUSH
58723: LD_VAR 0 1
58727: PPUSH
58728: LD_INT 50
58730: PUSH
58731: EMPTY
58732: LIST
58733: PPUSH
58734: CALL_OW 72
58738: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
58739: LD_ADDR_VAR 0 8
58743: PUSH
58744: LD_VAR 0 1
58748: PUSH
58749: LD_INT 1
58751: ARRAY
58752: PPUSH
58753: CALL_OW 255
58757: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
58758: LD_ADDR_VAR 0 10
58762: PUSH
58763: LD_INT 29
58765: PUSH
58766: LD_EXP 74
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: ST_TO_ADDR
// if not result then
58775: LD_VAR 0 3
58779: NOT
58780: IFFALSE 58784
// exit ;
58782: GO 59143
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
58784: LD_ADDR_VAR 0 5
58788: PUSH
58789: LD_INT 81
58791: PUSH
58792: LD_VAR 0 8
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PPUSH
58801: CALL_OW 69
58805: ST_TO_ADDR
// for i in result do
58806: LD_ADDR_VAR 0 4
58810: PUSH
58811: LD_VAR 0 3
58815: PUSH
58816: FOR_IN
58817: IFFALSE 59141
// begin tag := GetTag ( i ) + 1 ;
58819: LD_ADDR_VAR 0 9
58823: PUSH
58824: LD_VAR 0 4
58828: PPUSH
58829: CALL_OW 110
58833: PUSH
58834: LD_INT 1
58836: PLUS
58837: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
58838: LD_ADDR_VAR 0 7
58842: PUSH
58843: LD_VAR 0 4
58847: PPUSH
58848: CALL_OW 250
58852: PPUSH
58853: LD_VAR 0 4
58857: PPUSH
58858: CALL_OW 251
58862: PPUSH
58863: LD_INT 6
58865: PPUSH
58866: CALL 58441 0 3
58870: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
58871: LD_VAR 0 7
58875: PUSH
58876: LD_VAR 0 4
58880: PPUSH
58881: CALL_OW 264
58885: PUSH
58886: LD_VAR 0 10
58890: IN
58891: NOT
58892: AND
58893: IFFALSE 58932
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
58895: LD_VAR 0 4
58899: PPUSH
58900: LD_VAR 0 7
58904: PUSH
58905: LD_INT 1
58907: ARRAY
58908: PUSH
58909: LD_INT 1
58911: ARRAY
58912: PPUSH
58913: LD_VAR 0 7
58917: PUSH
58918: LD_INT 1
58920: ARRAY
58921: PUSH
58922: LD_INT 2
58924: ARRAY
58925: PPUSH
58926: CALL_OW 116
58930: GO 59139
// if path > tag then
58932: LD_VAR 0 2
58936: PUSH
58937: LD_VAR 0 9
58941: GREATER
58942: IFFALSE 59109
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
58944: LD_ADDR_VAR 0 6
58948: PUSH
58949: LD_VAR 0 5
58953: PPUSH
58954: LD_INT 91
58956: PUSH
58957: LD_VAR 0 4
58961: PUSH
58962: LD_INT 12
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: LIST
58969: PPUSH
58970: CALL_OW 72
58974: ST_TO_ADDR
// if nearEnemy then
58975: LD_VAR 0 6
58979: IFFALSE 59007
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
58981: LD_VAR 0 4
58985: PPUSH
58986: LD_VAR 0 6
58990: PPUSH
58991: LD_VAR 0 4
58995: PPUSH
58996: CALL_OW 74
59000: PPUSH
59001: CALL_OW 115
59005: GO 59107
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
59007: LD_VAR 0 4
59011: PPUSH
59012: LD_VAR 0 2
59016: PUSH
59017: LD_VAR 0 9
59021: ARRAY
59022: PUSH
59023: LD_INT 1
59025: ARRAY
59026: PPUSH
59027: LD_VAR 0 2
59031: PUSH
59032: LD_VAR 0 9
59036: ARRAY
59037: PUSH
59038: LD_INT 2
59040: ARRAY
59041: PPUSH
59042: CALL_OW 297
59046: PUSH
59047: LD_INT 6
59049: GREATER
59050: IFFALSE 59093
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
59052: LD_VAR 0 4
59056: PPUSH
59057: LD_VAR 0 2
59061: PUSH
59062: LD_VAR 0 9
59066: ARRAY
59067: PUSH
59068: LD_INT 1
59070: ARRAY
59071: PPUSH
59072: LD_VAR 0 2
59076: PUSH
59077: LD_VAR 0 9
59081: ARRAY
59082: PUSH
59083: LD_INT 2
59085: ARRAY
59086: PPUSH
59087: CALL_OW 114
59091: GO 59107
// SetTag ( i , tag ) ;
59093: LD_VAR 0 4
59097: PPUSH
59098: LD_VAR 0 9
59102: PPUSH
59103: CALL_OW 109
// end else
59107: GO 59139
// if enemy then
59109: LD_VAR 0 5
59113: IFFALSE 59139
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
59115: LD_VAR 0 4
59119: PPUSH
59120: LD_VAR 0 5
59124: PPUSH
59125: LD_VAR 0 4
59129: PPUSH
59130: CALL_OW 74
59134: PPUSH
59135: CALL_OW 115
// end ;
59139: GO 58816
59141: POP
59142: POP
// end ;
59143: LD_VAR 0 3
59147: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
59148: LD_INT 0
59150: PPUSH
59151: PPUSH
59152: PPUSH
// if not unit or IsInUnit ( unit ) then
59153: LD_VAR 0 1
59157: NOT
59158: PUSH
59159: LD_VAR 0 1
59163: PPUSH
59164: CALL_OW 310
59168: OR
59169: IFFALSE 59173
// exit ;
59171: GO 59264
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
59173: LD_ADDR_VAR 0 4
59177: PUSH
59178: LD_VAR 0 1
59182: PPUSH
59183: CALL_OW 250
59187: PPUSH
59188: LD_VAR 0 2
59192: PPUSH
59193: LD_INT 1
59195: PPUSH
59196: CALL_OW 272
59200: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
59201: LD_ADDR_VAR 0 5
59205: PUSH
59206: LD_VAR 0 1
59210: PPUSH
59211: CALL_OW 251
59215: PPUSH
59216: LD_VAR 0 2
59220: PPUSH
59221: LD_INT 1
59223: PPUSH
59224: CALL_OW 273
59228: ST_TO_ADDR
// if ValidHex ( x , y ) then
59229: LD_VAR 0 4
59233: PPUSH
59234: LD_VAR 0 5
59238: PPUSH
59239: CALL_OW 488
59243: IFFALSE 59264
// ComTurnXY ( unit , x , y ) ;
59245: LD_VAR 0 1
59249: PPUSH
59250: LD_VAR 0 4
59254: PPUSH
59255: LD_VAR 0 5
59259: PPUSH
59260: CALL_OW 118
// end ;
59264: LD_VAR 0 3
59268: RET
// export function SeeUnits ( side , units ) ; var i ; begin
59269: LD_INT 0
59271: PPUSH
59272: PPUSH
// result := false ;
59273: LD_ADDR_VAR 0 3
59277: PUSH
59278: LD_INT 0
59280: ST_TO_ADDR
// if not units then
59281: LD_VAR 0 2
59285: NOT
59286: IFFALSE 59290
// exit ;
59288: GO 59335
// for i in units do
59290: LD_ADDR_VAR 0 4
59294: PUSH
59295: LD_VAR 0 2
59299: PUSH
59300: FOR_IN
59301: IFFALSE 59333
// if See ( side , i ) then
59303: LD_VAR 0 1
59307: PPUSH
59308: LD_VAR 0 4
59312: PPUSH
59313: CALL_OW 292
59317: IFFALSE 59331
// begin result := true ;
59319: LD_ADDR_VAR 0 3
59323: PUSH
59324: LD_INT 1
59326: ST_TO_ADDR
// exit ;
59327: POP
59328: POP
59329: GO 59335
// end ;
59331: GO 59300
59333: POP
59334: POP
// end ;
59335: LD_VAR 0 3
59339: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
59340: LD_INT 0
59342: PPUSH
59343: PPUSH
59344: PPUSH
59345: PPUSH
// if not unit or not points then
59346: LD_VAR 0 1
59350: NOT
59351: PUSH
59352: LD_VAR 0 2
59356: NOT
59357: OR
59358: IFFALSE 59362
// exit ;
59360: GO 59452
// dist := 99999 ;
59362: LD_ADDR_VAR 0 5
59366: PUSH
59367: LD_INT 99999
59369: ST_TO_ADDR
// for i in points do
59370: LD_ADDR_VAR 0 4
59374: PUSH
59375: LD_VAR 0 2
59379: PUSH
59380: FOR_IN
59381: IFFALSE 59450
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
59383: LD_ADDR_VAR 0 6
59387: PUSH
59388: LD_VAR 0 1
59392: PPUSH
59393: LD_VAR 0 4
59397: PUSH
59398: LD_INT 1
59400: ARRAY
59401: PPUSH
59402: LD_VAR 0 4
59406: PUSH
59407: LD_INT 2
59409: ARRAY
59410: PPUSH
59411: CALL_OW 297
59415: ST_TO_ADDR
// if tmpDist < dist then
59416: LD_VAR 0 6
59420: PUSH
59421: LD_VAR 0 5
59425: LESS
59426: IFFALSE 59448
// begin result := i ;
59428: LD_ADDR_VAR 0 3
59432: PUSH
59433: LD_VAR 0 4
59437: ST_TO_ADDR
// dist := tmpDist ;
59438: LD_ADDR_VAR 0 5
59442: PUSH
59443: LD_VAR 0 6
59447: ST_TO_ADDR
// end ; end ;
59448: GO 59380
59450: POP
59451: POP
// end ;
59452: LD_VAR 0 3
59456: RET
