// every 0 0$1 do var amConvoyGroups ;
   0: GO 2
   2: DISABLE
   3: LD_INT 0
   5: PPUSH
// begin amConvoyGroups := [ [ [ 1 , 2 , 3 , 5 ] [ Difficulty ] , [ 0 , 0 , 1 , 1 ] [ Difficulty ] , [ 1 , 1 , 2 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 0 , 1 , 1 , 2 ] [ Difficulty ] ] , [ [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 0 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] ] , [ [ 1 , 2 , 3 , 4 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] ] , [ [ 3 , 4 , 6 , 7 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 1 , 3 ] [ Difficulty ] ] ] ;
   6: LD_ADDR_VAR 0 1
  10: PUSH
  11: LD_INT 1
  13: PUSH
  14: LD_INT 2
  16: PUSH
  17: LD_INT 3
  19: PUSH
  20: LD_INT 5
  22: PUSH
  23: EMPTY
  24: LIST
  25: LIST
  26: LIST
  27: LIST
  28: PUSH
  29: LD_OWVAR 67
  33: ARRAY
  34: PUSH
  35: LD_INT 0
  37: PUSH
  38: LD_INT 0
  40: PUSH
  41: LD_INT 1
  43: PUSH
  44: LD_INT 1
  46: PUSH
  47: EMPTY
  48: LIST
  49: LIST
  50: LIST
  51: LIST
  52: PUSH
  53: LD_OWVAR 67
  57: ARRAY
  58: PUSH
  59: LD_INT 1
  61: PUSH
  62: LD_INT 1
  64: PUSH
  65: LD_INT 2
  67: PUSH
  68: LD_INT 2
  70: PUSH
  71: EMPTY
  72: LIST
  73: LIST
  74: LIST
  75: LIST
  76: PUSH
  77: LD_OWVAR 67
  81: ARRAY
  82: PUSH
  83: LD_INT 1
  85: PUSH
  86: LD_INT 1
  88: PUSH
  89: LD_INT 1
  91: PUSH
  92: LD_INT 2
  94: PUSH
  95: EMPTY
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: PUSH
 107: LD_INT 0
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: LD_INT 1
 115: PUSH
 116: LD_INT 2
 118: PUSH
 119: EMPTY
 120: LIST
 121: LIST
 122: LIST
 123: LIST
 124: PUSH
 125: LD_OWVAR 67
 129: ARRAY
 130: PUSH
 131: EMPTY
 132: LIST
 133: LIST
 134: LIST
 135: LIST
 136: LIST
 137: PUSH
 138: LD_INT 3
 140: PUSH
 141: LD_INT 4
 143: PUSH
 144: LD_INT 5
 146: PUSH
 147: LD_INT 6
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: LD_OWVAR 67
 160: ARRAY
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 1
 167: PUSH
 168: LD_INT 1
 170: PUSH
 171: LD_INT 2
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_OWVAR 67
 184: ARRAY
 185: PUSH
 186: LD_INT 1
 188: PUSH
 189: LD_INT 1
 191: PUSH
 192: LD_INT 2
 194: PUSH
 195: LD_INT 3
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: PUSH
 210: LD_INT 1
 212: PUSH
 213: LD_INT 1
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: LD_INT 3
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_OWVAR 67
 232: ARRAY
 233: PUSH
 234: LD_INT 1
 236: PUSH
 237: LD_INT 1
 239: PUSH
 240: LD_INT 2
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: PUSH
 252: LD_OWVAR 67
 256: ARRAY
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: LIST
 264: PUSH
 265: LD_INT 1
 267: PUSH
 268: LD_INT 2
 270: PUSH
 271: LD_INT 3
 273: PUSH
 274: LD_INT 4
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: PUSH
 283: LD_OWVAR 67
 287: ARRAY
 288: PUSH
 289: LD_INT 1
 291: PUSH
 292: LD_INT 1
 294: PUSH
 295: LD_INT 1
 297: PUSH
 298: LD_INT 2
 300: PUSH
 301: EMPTY
 302: LIST
 303: LIST
 304: LIST
 305: LIST
 306: PUSH
 307: LD_OWVAR 67
 311: ARRAY
 312: PUSH
 313: LD_INT 1
 315: PUSH
 316: LD_INT 1
 318: PUSH
 319: LD_INT 2
 321: PUSH
 322: LD_INT 2
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: PUSH
 331: LD_OWVAR 67
 335: ARRAY
 336: PUSH
 337: LD_INT 1
 339: PUSH
 340: LD_INT 1
 342: PUSH
 343: LD_INT 1
 345: PUSH
 346: LD_INT 2
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: LIST
 353: LIST
 354: PUSH
 355: LD_OWVAR 67
 359: ARRAY
 360: PUSH
 361: LD_INT 1
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: LD_INT 2
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: LIST
 377: LIST
 378: PUSH
 379: LD_OWVAR 67
 383: ARRAY
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: LIST
 389: LIST
 390: LIST
 391: PUSH
 392: LD_INT 3
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: LD_INT 7
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: PUSH
 410: LD_OWVAR 67
 414: ARRAY
 415: PUSH
 416: LD_INT 1
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: LD_INT 1
 424: PUSH
 425: LD_INT 2
 427: PUSH
 428: EMPTY
 429: LIST
 430: LIST
 431: LIST
 432: LIST
 433: PUSH
 434: LD_OWVAR 67
 438: ARRAY
 439: PUSH
 440: LD_INT 1
 442: PUSH
 443: LD_INT 1
 445: PUSH
 446: LD_INT 2
 448: PUSH
 449: LD_INT 3
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: LIST
 456: LIST
 457: PUSH
 458: LD_OWVAR 67
 462: ARRAY
 463: PUSH
 464: LD_INT 1
 466: PUSH
 467: LD_INT 1
 469: PUSH
 470: LD_INT 2
 472: PUSH
 473: LD_INT 3
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: LD_OWVAR 67
 486: ARRAY
 487: PUSH
 488: LD_INT 1
 490: PUSH
 491: LD_INT 1
 493: PUSH
 494: LD_INT 1
 496: PUSH
 497: LD_INT 3
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: PUSH
 506: LD_OWVAR 67
 510: ARRAY
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: ST_TO_ADDR
// display_strings := amConvoyGroups [ 1 ] ;
 525: LD_ADDR_OWVAR 47
 529: PUSH
 530: LD_VAR 0 1
 534: PUSH
 535: LD_INT 1
 537: ARRAY
 538: ST_TO_ADDR
// PrepareAmericanConvoy ( amConvoyGroups [ 1 ] [ 1 ] , amConvoyGroups [ 1 ] [ 2 ] , amConvoyGroups [ 1 ] [ 3 ] , amConvoyGroups [ 1 ] [ 4 ] , amConvoyGroups [ 1 ] [ 5 ] , area11 ) ;
 539: LD_VAR 0 1
 543: PUSH
 544: LD_INT 1
 546: ARRAY
 547: PUSH
 548: LD_INT 1
 550: ARRAY
 551: PPUSH
 552: LD_VAR 0 1
 556: PUSH
 557: LD_INT 1
 559: ARRAY
 560: PUSH
 561: LD_INT 2
 563: ARRAY
 564: PPUSH
 565: LD_VAR 0 1
 569: PUSH
 570: LD_INT 1
 572: ARRAY
 573: PUSH
 574: LD_INT 3
 576: ARRAY
 577: PPUSH
 578: LD_VAR 0 1
 582: PUSH
 583: LD_INT 1
 585: ARRAY
 586: PUSH
 587: LD_INT 4
 589: ARRAY
 590: PPUSH
 591: LD_VAR 0 1
 595: PUSH
 596: LD_INT 1
 598: ARRAY
 599: PUSH
 600: LD_INT 5
 602: ARRAY
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL 614 0 6
// end ;
 611: PPOPN 1
 613: END
// export function PrepareAmericanConvoy ( soldiersAmount , engsAmount , mechsAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road , sols , engs , mechs , scis , enemySkillLevel , amConvoyTroops ; begin
 614: LD_INT 0
 616: PPUSH
 617: PPUSH
 618: PPUSH
 619: PPUSH
 620: PPUSH
 621: PPUSH
 622: PPUSH
 623: PPUSH
 624: PPUSH
 625: PPUSH
 626: PPUSH
// enemySkilllevel := 2 ;
 627: LD_ADDR_VAR 0 16
 631: PUSH
 632: LD_INT 2
 634: ST_TO_ADDR
// uc_side := 1 ;
 635: LD_ADDR_OWVAR 20
 639: PUSH
 640: LD_INT 1
 642: ST_TO_ADDR
// uc_nation := 1 ;
 643: LD_ADDR_OWVAR 21
 647: PUSH
 648: LD_INT 1
 650: ST_TO_ADDR
// hc_name :=  ;
 651: LD_ADDR_OWVAR 26
 655: PUSH
 656: LD_STRING 
 658: ST_TO_ADDR
// hc_gallery :=  ;
 659: LD_ADDR_OWVAR 33
 663: PUSH
 664: LD_STRING 
 666: ST_TO_ADDR
// for i := 1 to soldiersAmount do
 667: LD_ADDR_VAR 0 8
 671: PUSH
 672: DOUBLE
 673: LD_INT 1
 675: DEC
 676: ST_TO_ADDR
 677: LD_VAR 0 1
 681: PUSH
 682: FOR_TO
 683: IFFALSE 758
// begin PrepareSoldier ( false , enemySkillLevel ) ;
 685: LD_INT 0
 687: PPUSH
 688: LD_VAR 0 16
 692: PPUSH
 693: CALL_OW 381
// un = CreateHuman ;
 697: LD_ADDR_VAR 0 9
 701: PUSH
 702: CALL_OW 44
 706: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 707: LD_ADDR_VAR 0 17
 711: PUSH
 712: LD_VAR 0 17
 716: PUSH
 717: LD_VAR 0 9
 721: ADD
 722: ST_TO_ADDR
// sols := sols ^ un ;
 723: LD_ADDR_VAR 0 12
 727: PUSH
 728: LD_VAR 0 12
 732: PUSH
 733: LD_VAR 0 9
 737: ADD
 738: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 739: LD_VAR 0 9
 743: PPUSH
 744: LD_VAR 0 6
 748: PPUSH
 749: LD_INT 0
 751: PPUSH
 752: CALL_OW 49
// end ;
 756: GO 682
 758: POP
 759: POP
// for i := 1 to engsAmount do
 760: LD_ADDR_VAR 0 8
 764: PUSH
 765: DOUBLE
 766: LD_INT 1
 768: DEC
 769: ST_TO_ADDR
 770: LD_VAR 0 2
 774: PUSH
 775: FOR_TO
 776: IFFALSE 851
// begin PrepareEngineer ( false , enemySkillLevel ) ;
 778: LD_INT 0
 780: PPUSH
 781: LD_VAR 0 16
 785: PPUSH
 786: CALL_OW 382
// un = CreateHuman ;
 790: LD_ADDR_VAR 0 9
 794: PUSH
 795: CALL_OW 44
 799: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 800: LD_ADDR_VAR 0 17
 804: PUSH
 805: LD_VAR 0 17
 809: PUSH
 810: LD_VAR 0 9
 814: ADD
 815: ST_TO_ADDR
// engs := engs ^ un ;
 816: LD_ADDR_VAR 0 13
 820: PUSH
 821: LD_VAR 0 13
 825: PUSH
 826: LD_VAR 0 9
 830: ADD
 831: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 832: LD_VAR 0 9
 836: PPUSH
 837: LD_VAR 0 6
 841: PPUSH
 842: LD_INT 0
 844: PPUSH
 845: CALL_OW 49
// end ;
 849: GO 775
 851: POP
 852: POP
// for i := 1 to mechsAmount do
 853: LD_ADDR_VAR 0 8
 857: PUSH
 858: DOUBLE
 859: LD_INT 1
 861: DEC
 862: ST_TO_ADDR
 863: LD_VAR 0 3
 867: PUSH
 868: FOR_TO
 869: IFFALSE 944
// begin PrepareEngineer ( false , enemySkillLevel ) ;
 871: LD_INT 0
 873: PPUSH
 874: LD_VAR 0 16
 878: PPUSH
 879: CALL_OW 382
// un = CreateHuman ;
 883: LD_ADDR_VAR 0 9
 887: PUSH
 888: CALL_OW 44
 892: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 893: LD_ADDR_VAR 0 17
 897: PUSH
 898: LD_VAR 0 17
 902: PUSH
 903: LD_VAR 0 9
 907: ADD
 908: ST_TO_ADDR
// engs := engs ^ un ;
 909: LD_ADDR_VAR 0 13
 913: PUSH
 914: LD_VAR 0 13
 918: PUSH
 919: LD_VAR 0 9
 923: ADD
 924: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 925: LD_VAR 0 9
 929: PPUSH
 930: LD_VAR 0 6
 934: PPUSH
 935: LD_INT 0
 937: PPUSH
 938: CALL_OW 49
// end ;
 942: GO 868
 944: POP
 945: POP
// for i := 1 to scientistsAmount do
 946: LD_ADDR_VAR 0 8
 950: PUSH
 951: DOUBLE
 952: LD_INT 1
 954: DEC
 955: ST_TO_ADDR
 956: LD_VAR 0 4
 960: PUSH
 961: FOR_TO
 962: IFFALSE 1037
// begin PrepareMechanic ( false , enemySkillLevel ) ;
 964: LD_INT 0
 966: PPUSH
 967: LD_VAR 0 16
 971: PPUSH
 972: CALL_OW 383
// un = CreateHuman ;
 976: LD_ADDR_VAR 0 9
 980: PUSH
 981: CALL_OW 44
 985: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 986: LD_ADDR_VAR 0 17
 990: PUSH
 991: LD_VAR 0 17
 995: PUSH
 996: LD_VAR 0 9
1000: ADD
1001: ST_TO_ADDR
// mechs := mechs ^ un ;
1002: LD_ADDR_VAR 0 14
1006: PUSH
1007: LD_VAR 0 14
1011: PUSH
1012: LD_VAR 0 9
1016: ADD
1017: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1018: LD_VAR 0 9
1022: PPUSH
1023: LD_VAR 0 6
1027: PPUSH
1028: LD_INT 0
1030: PPUSH
1031: CALL_OW 49
// end ;
1035: GO 961
1037: POP
1038: POP
// for i := 1 to vehiclesAmount do
1039: LD_ADDR_VAR 0 8
1043: PUSH
1044: DOUBLE
1045: LD_INT 1
1047: DEC
1048: ST_TO_ADDR
1049: LD_VAR 0 5
1053: PUSH
1054: FOR_TO
1055: IFFALSE 1221
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
1057: LD_ADDR_OWVAR 40
1061: PUSH
1062: LD_INT 2
1064: PUSH
1065: LD_INT 4
1067: PUSH
1068: LD_INT 3
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_INT 1
1078: PPUSH
1079: LD_INT 3
1081: PPUSH
1082: CALL_OW 12
1086: ARRAY
1087: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1088: LD_ADDR_OWVAR 37
1092: PUSH
1093: LD_INT 3
1095: ST_TO_ADDR
// vc_control = control_manual ;
1096: LD_ADDR_OWVAR 38
1100: PUSH
1101: LD_INT 1
1103: ST_TO_ADDR
// vc_engine = engine_combustion ;
1104: LD_ADDR_OWVAR 39
1108: PUSH
1109: LD_INT 1
1111: ST_TO_ADDR
// veh = CreateVehicle ;
1112: LD_ADDR_VAR 0 10
1116: PUSH
1117: CALL_OW 45
1121: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ veh ;
1122: LD_ADDR_VAR 0 17
1126: PUSH
1127: LD_VAR 0 17
1131: PUSH
1132: LD_VAR 0 10
1136: ADD
1137: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
1138: LD_VAR 0 10
1142: PPUSH
1143: LD_VAR 0 6
1147: PPUSH
1148: LD_INT 0
1150: PPUSH
1151: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
1155: LD_INT 0
1157: PPUSH
1158: LD_VAR 0 16
1162: PPUSH
1163: CALL_OW 383
// un = CreateHuman ;
1167: LD_ADDR_VAR 0 9
1171: PUSH
1172: CALL_OW 44
1176: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ un ;
1177: LD_ADDR_VAR 0 17
1181: PUSH
1182: LD_VAR 0 17
1186: PUSH
1187: LD_VAR 0 9
1191: ADD
1192: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1193: LD_VAR 0 9
1197: PPUSH
1198: LD_VAR 0 10
1202: PPUSH
1203: CALL_OW 52
// SetFuel ( veh , 100 ) ;
1207: LD_VAR 0 10
1211: PPUSH
1212: LD_INT 100
1214: PPUSH
1215: CALL_OW 240
// end ;
1219: GO 1054
1221: POP
1222: POP
// end ; end_of_file
1223: LD_VAR 0 7
1227: RET
// every 0 0$1 do
1228: GO 1230
1230: DISABLE
// begin enable ;
1231: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1232: LD_STRING updateTimer(
1234: PUSH
1235: LD_OWVAR 1
1239: STR
1240: PUSH
1241: LD_STRING );
1243: STR
1244: PPUSH
1245: CALL_OW 559
// end ;
1249: END
// export function SOS_MapStart ( ) ; begin
1250: LD_INT 0
1252: PPUSH
// if streamModeActive then
1253: LD_EXP 1
1257: IFFALSE 1266
// DefineStreamItems ( true ) ;
1259: LD_INT 1
1261: PPUSH
1262: CALL 2916 0 1
// UpdateFactoryWaypoints ( ) ;
1266: CALL 16500 0 0
// end ;
1270: LD_VAR 0 1
1274: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
1275: LD_INT 0
1277: PPUSH
// if p2 = 100 then
1278: LD_VAR 0 2
1282: PUSH
1283: LD_INT 100
1285: EQUAL
1286: IFFALSE 2289
// begin if not StreamModeActive then
1288: LD_EXP 1
1292: NOT
1293: IFFALSE 1303
// StreamModeActive := true ;
1295: LD_ADDR_EXP 1
1299: PUSH
1300: LD_INT 1
1302: ST_TO_ADDR
// if p3 = 0 then
1303: LD_VAR 0 3
1307: PUSH
1308: LD_INT 0
1310: EQUAL
1311: IFFALSE 1317
// InitStreamMode ;
1313: CALL 2452 0 0
// if p3 = 1 then
1317: LD_VAR 0 3
1321: PUSH
1322: LD_INT 1
1324: EQUAL
1325: IFFALSE 1335
// sRocket := true ;
1327: LD_ADDR_EXP 6
1331: PUSH
1332: LD_INT 1
1334: ST_TO_ADDR
// if p3 = 2 then
1335: LD_VAR 0 3
1339: PUSH
1340: LD_INT 2
1342: EQUAL
1343: IFFALSE 1353
// sSpeed := true ;
1345: LD_ADDR_EXP 5
1349: PUSH
1350: LD_INT 1
1352: ST_TO_ADDR
// if p3 = 3 then
1353: LD_VAR 0 3
1357: PUSH
1358: LD_INT 3
1360: EQUAL
1361: IFFALSE 1371
// sEngine := true ;
1363: LD_ADDR_EXP 7
1367: PUSH
1368: LD_INT 1
1370: ST_TO_ADDR
// if p3 = 4 then
1371: LD_VAR 0 3
1375: PUSH
1376: LD_INT 4
1378: EQUAL
1379: IFFALSE 1389
// sSpec := true ;
1381: LD_ADDR_EXP 4
1385: PUSH
1386: LD_INT 1
1388: ST_TO_ADDR
// if p3 = 5 then
1389: LD_VAR 0 3
1393: PUSH
1394: LD_INT 5
1396: EQUAL
1397: IFFALSE 1407
// sLevel := true ;
1399: LD_ADDR_EXP 8
1403: PUSH
1404: LD_INT 1
1406: ST_TO_ADDR
// if p3 = 6 then
1407: LD_VAR 0 3
1411: PUSH
1412: LD_INT 6
1414: EQUAL
1415: IFFALSE 1425
// sArmoury := true ;
1417: LD_ADDR_EXP 9
1421: PUSH
1422: LD_INT 1
1424: ST_TO_ADDR
// if p3 = 7 then
1425: LD_VAR 0 3
1429: PUSH
1430: LD_INT 7
1432: EQUAL
1433: IFFALSE 1443
// sRadar := true ;
1435: LD_ADDR_EXP 10
1439: PUSH
1440: LD_INT 1
1442: ST_TO_ADDR
// if p3 = 8 then
1443: LD_VAR 0 3
1447: PUSH
1448: LD_INT 8
1450: EQUAL
1451: IFFALSE 1461
// sBunker := true ;
1453: LD_ADDR_EXP 11
1457: PUSH
1458: LD_INT 1
1460: ST_TO_ADDR
// if p3 = 9 then
1461: LD_VAR 0 3
1465: PUSH
1466: LD_INT 9
1468: EQUAL
1469: IFFALSE 1479
// sHack := true ;
1471: LD_ADDR_EXP 12
1475: PUSH
1476: LD_INT 1
1478: ST_TO_ADDR
// if p3 = 10 then
1479: LD_VAR 0 3
1483: PUSH
1484: LD_INT 10
1486: EQUAL
1487: IFFALSE 1497
// sFire := true ;
1489: LD_ADDR_EXP 13
1493: PUSH
1494: LD_INT 1
1496: ST_TO_ADDR
// if p3 = 11 then
1497: LD_VAR 0 3
1501: PUSH
1502: LD_INT 11
1504: EQUAL
1505: IFFALSE 1515
// sRefresh := true ;
1507: LD_ADDR_EXP 14
1511: PUSH
1512: LD_INT 1
1514: ST_TO_ADDR
// if p3 = 12 then
1515: LD_VAR 0 3
1519: PUSH
1520: LD_INT 12
1522: EQUAL
1523: IFFALSE 1533
// sExp := true ;
1525: LD_ADDR_EXP 15
1529: PUSH
1530: LD_INT 1
1532: ST_TO_ADDR
// if p3 = 13 then
1533: LD_VAR 0 3
1537: PUSH
1538: LD_INT 13
1540: EQUAL
1541: IFFALSE 1551
// sDepot := true ;
1543: LD_ADDR_EXP 16
1547: PUSH
1548: LD_INT 1
1550: ST_TO_ADDR
// if p3 = 14 then
1551: LD_VAR 0 3
1555: PUSH
1556: LD_INT 14
1558: EQUAL
1559: IFFALSE 1569
// sFlag := true ;
1561: LD_ADDR_EXP 17
1565: PUSH
1566: LD_INT 1
1568: ST_TO_ADDR
// if p3 = 15 then
1569: LD_VAR 0 3
1573: PUSH
1574: LD_INT 15
1576: EQUAL
1577: IFFALSE 1587
// sKamikadze := true ;
1579: LD_ADDR_EXP 25
1583: PUSH
1584: LD_INT 1
1586: ST_TO_ADDR
// if p3 = 16 then
1587: LD_VAR 0 3
1591: PUSH
1592: LD_INT 16
1594: EQUAL
1595: IFFALSE 1605
// sTroll := true ;
1597: LD_ADDR_EXP 26
1601: PUSH
1602: LD_INT 1
1604: ST_TO_ADDR
// if p3 = 17 then
1605: LD_VAR 0 3
1609: PUSH
1610: LD_INT 17
1612: EQUAL
1613: IFFALSE 1623
// sSlow := true ;
1615: LD_ADDR_EXP 27
1619: PUSH
1620: LD_INT 1
1622: ST_TO_ADDR
// if p3 = 18 then
1623: LD_VAR 0 3
1627: PUSH
1628: LD_INT 18
1630: EQUAL
1631: IFFALSE 1641
// sLack := true ;
1633: LD_ADDR_EXP 28
1637: PUSH
1638: LD_INT 1
1640: ST_TO_ADDR
// if p3 = 19 then
1641: LD_VAR 0 3
1645: PUSH
1646: LD_INT 19
1648: EQUAL
1649: IFFALSE 1659
// sTank := true ;
1651: LD_ADDR_EXP 30
1655: PUSH
1656: LD_INT 1
1658: ST_TO_ADDR
// if p3 = 20 then
1659: LD_VAR 0 3
1663: PUSH
1664: LD_INT 20
1666: EQUAL
1667: IFFALSE 1677
// sRemote := true ;
1669: LD_ADDR_EXP 31
1673: PUSH
1674: LD_INT 1
1676: ST_TO_ADDR
// if p3 = 21 then
1677: LD_VAR 0 3
1681: PUSH
1682: LD_INT 21
1684: EQUAL
1685: IFFALSE 1695
// sPowell := true ;
1687: LD_ADDR_EXP 32
1691: PUSH
1692: LD_INT 1
1694: ST_TO_ADDR
// if p3 = 22 then
1695: LD_VAR 0 3
1699: PUSH
1700: LD_INT 22
1702: EQUAL
1703: IFFALSE 1713
// sTeleport := true ;
1705: LD_ADDR_EXP 35
1709: PUSH
1710: LD_INT 1
1712: ST_TO_ADDR
// if p3 = 23 then
1713: LD_VAR 0 3
1717: PUSH
1718: LD_INT 23
1720: EQUAL
1721: IFFALSE 1731
// sOilTower := true ;
1723: LD_ADDR_EXP 37
1727: PUSH
1728: LD_INT 1
1730: ST_TO_ADDR
// if p3 = 24 then
1731: LD_VAR 0 3
1735: PUSH
1736: LD_INT 24
1738: EQUAL
1739: IFFALSE 1749
// sShovel := true ;
1741: LD_ADDR_EXP 38
1745: PUSH
1746: LD_INT 1
1748: ST_TO_ADDR
// if p3 = 25 then
1749: LD_VAR 0 3
1753: PUSH
1754: LD_INT 25
1756: EQUAL
1757: IFFALSE 1767
// sSheik := true ;
1759: LD_ADDR_EXP 39
1763: PUSH
1764: LD_INT 1
1766: ST_TO_ADDR
// if p3 = 26 then
1767: LD_VAR 0 3
1771: PUSH
1772: LD_INT 26
1774: EQUAL
1775: IFFALSE 1785
// sEarthquake := true ;
1777: LD_ADDR_EXP 41
1781: PUSH
1782: LD_INT 1
1784: ST_TO_ADDR
// if p3 = 27 then
1785: LD_VAR 0 3
1789: PUSH
1790: LD_INT 27
1792: EQUAL
1793: IFFALSE 1803
// sAI := true ;
1795: LD_ADDR_EXP 42
1799: PUSH
1800: LD_INT 1
1802: ST_TO_ADDR
// if p3 = 28 then
1803: LD_VAR 0 3
1807: PUSH
1808: LD_INT 28
1810: EQUAL
1811: IFFALSE 1821
// sCargo := true ;
1813: LD_ADDR_EXP 45
1817: PUSH
1818: LD_INT 1
1820: ST_TO_ADDR
// if p3 = 29 then
1821: LD_VAR 0 3
1825: PUSH
1826: LD_INT 29
1828: EQUAL
1829: IFFALSE 1839
// sDLaser := true ;
1831: LD_ADDR_EXP 46
1835: PUSH
1836: LD_INT 1
1838: ST_TO_ADDR
// if p3 = 30 then
1839: LD_VAR 0 3
1843: PUSH
1844: LD_INT 30
1846: EQUAL
1847: IFFALSE 1857
// sExchange := true ;
1849: LD_ADDR_EXP 47
1853: PUSH
1854: LD_INT 1
1856: ST_TO_ADDR
// if p3 = 31 then
1857: LD_VAR 0 3
1861: PUSH
1862: LD_INT 31
1864: EQUAL
1865: IFFALSE 1875
// sFac := true ;
1867: LD_ADDR_EXP 48
1871: PUSH
1872: LD_INT 1
1874: ST_TO_ADDR
// if p3 = 32 then
1875: LD_VAR 0 3
1879: PUSH
1880: LD_INT 32
1882: EQUAL
1883: IFFALSE 1893
// sPower := true ;
1885: LD_ADDR_EXP 49
1889: PUSH
1890: LD_INT 1
1892: ST_TO_ADDR
// if p3 = 33 then
1893: LD_VAR 0 3
1897: PUSH
1898: LD_INT 33
1900: EQUAL
1901: IFFALSE 1911
// sRandom := true ;
1903: LD_ADDR_EXP 50
1907: PUSH
1908: LD_INT 1
1910: ST_TO_ADDR
// if p3 = 34 then
1911: LD_VAR 0 3
1915: PUSH
1916: LD_INT 34
1918: EQUAL
1919: IFFALSE 1929
// sShield := true ;
1921: LD_ADDR_EXP 51
1925: PUSH
1926: LD_INT 1
1928: ST_TO_ADDR
// if p3 = 35 then
1929: LD_VAR 0 3
1933: PUSH
1934: LD_INT 35
1936: EQUAL
1937: IFFALSE 1947
// sTime := true ;
1939: LD_ADDR_EXP 52
1943: PUSH
1944: LD_INT 1
1946: ST_TO_ADDR
// if p3 = 36 then
1947: LD_VAR 0 3
1951: PUSH
1952: LD_INT 36
1954: EQUAL
1955: IFFALSE 1965
// sTools := true ;
1957: LD_ADDR_EXP 53
1961: PUSH
1962: LD_INT 1
1964: ST_TO_ADDR
// if p3 = 101 then
1965: LD_VAR 0 3
1969: PUSH
1970: LD_INT 101
1972: EQUAL
1973: IFFALSE 1983
// sSold := true ;
1975: LD_ADDR_EXP 18
1979: PUSH
1980: LD_INT 1
1982: ST_TO_ADDR
// if p3 = 102 then
1983: LD_VAR 0 3
1987: PUSH
1988: LD_INT 102
1990: EQUAL
1991: IFFALSE 2001
// sDiff := true ;
1993: LD_ADDR_EXP 19
1997: PUSH
1998: LD_INT 1
2000: ST_TO_ADDR
// if p3 = 103 then
2001: LD_VAR 0 3
2005: PUSH
2006: LD_INT 103
2008: EQUAL
2009: IFFALSE 2019
// sFog := true ;
2011: LD_ADDR_EXP 22
2015: PUSH
2016: LD_INT 1
2018: ST_TO_ADDR
// if p3 = 104 then
2019: LD_VAR 0 3
2023: PUSH
2024: LD_INT 104
2026: EQUAL
2027: IFFALSE 2037
// sReset := true ;
2029: LD_ADDR_EXP 23
2033: PUSH
2034: LD_INT 1
2036: ST_TO_ADDR
// if p3 = 105 then
2037: LD_VAR 0 3
2041: PUSH
2042: LD_INT 105
2044: EQUAL
2045: IFFALSE 2055
// sSun := true ;
2047: LD_ADDR_EXP 24
2051: PUSH
2052: LD_INT 1
2054: ST_TO_ADDR
// if p3 = 106 then
2055: LD_VAR 0 3
2059: PUSH
2060: LD_INT 106
2062: EQUAL
2063: IFFALSE 2073
// sTiger := true ;
2065: LD_ADDR_EXP 20
2069: PUSH
2070: LD_INT 1
2072: ST_TO_ADDR
// if p3 = 107 then
2073: LD_VAR 0 3
2077: PUSH
2078: LD_INT 107
2080: EQUAL
2081: IFFALSE 2091
// sBomb := true ;
2083: LD_ADDR_EXP 21
2087: PUSH
2088: LD_INT 1
2090: ST_TO_ADDR
// if p3 = 108 then
2091: LD_VAR 0 3
2095: PUSH
2096: LD_INT 108
2098: EQUAL
2099: IFFALSE 2109
// sWound := true ;
2101: LD_ADDR_EXP 29
2105: PUSH
2106: LD_INT 1
2108: ST_TO_ADDR
// if p3 = 109 then
2109: LD_VAR 0 3
2113: PUSH
2114: LD_INT 109
2116: EQUAL
2117: IFFALSE 2127
// sBetray := true ;
2119: LD_ADDR_EXP 33
2123: PUSH
2124: LD_INT 1
2126: ST_TO_ADDR
// if p3 = 110 then
2127: LD_VAR 0 3
2131: PUSH
2132: LD_INT 110
2134: EQUAL
2135: IFFALSE 2145
// sContamin := true ;
2137: LD_ADDR_EXP 34
2141: PUSH
2142: LD_INT 1
2144: ST_TO_ADDR
// if p3 = 111 then
2145: LD_VAR 0 3
2149: PUSH
2150: LD_INT 111
2152: EQUAL
2153: IFFALSE 2163
// sOil := true ;
2155: LD_ADDR_EXP 36
2159: PUSH
2160: LD_INT 1
2162: ST_TO_ADDR
// if p3 = 112 then
2163: LD_VAR 0 3
2167: PUSH
2168: LD_INT 112
2170: EQUAL
2171: IFFALSE 2181
// sStu := true ;
2173: LD_ADDR_EXP 40
2177: PUSH
2178: LD_INT 1
2180: ST_TO_ADDR
// if p3 = 113 then
2181: LD_VAR 0 3
2185: PUSH
2186: LD_INT 113
2188: EQUAL
2189: IFFALSE 2199
// sBazooka := true ;
2191: LD_ADDR_EXP 43
2195: PUSH
2196: LD_INT 1
2198: ST_TO_ADDR
// if p3 = 114 then
2199: LD_VAR 0 3
2203: PUSH
2204: LD_INT 114
2206: EQUAL
2207: IFFALSE 2217
// sMortar := true ;
2209: LD_ADDR_EXP 44
2213: PUSH
2214: LD_INT 1
2216: ST_TO_ADDR
// if p3 = 115 then
2217: LD_VAR 0 3
2221: PUSH
2222: LD_INT 115
2224: EQUAL
2225: IFFALSE 2235
// sRanger := true ;
2227: LD_ADDR_EXP 54
2231: PUSH
2232: LD_INT 1
2234: ST_TO_ADDR
// if p3 = 116 then
2235: LD_VAR 0 3
2239: PUSH
2240: LD_INT 116
2242: EQUAL
2243: IFFALSE 2253
// sComputer := true ;
2245: LD_ADDR_EXP 55
2249: PUSH
2250: LD_INT 1
2252: ST_TO_ADDR
// if p3 = 117 then
2253: LD_VAR 0 3
2257: PUSH
2258: LD_INT 117
2260: EQUAL
2261: IFFALSE 2271
// s30 := true ;
2263: LD_ADDR_EXP 56
2267: PUSH
2268: LD_INT 1
2270: ST_TO_ADDR
// if p3 = 118 then
2271: LD_VAR 0 3
2275: PUSH
2276: LD_INT 118
2278: EQUAL
2279: IFFALSE 2289
// s60 := true ;
2281: LD_ADDR_EXP 57
2285: PUSH
2286: LD_INT 1
2288: ST_TO_ADDR
// end ; if p2 = 101 then
2289: LD_VAR 0 2
2293: PUSH
2294: LD_INT 101
2296: EQUAL
2297: IFFALSE 2425
// begin case p3 of 1 :
2299: LD_VAR 0 3
2303: PUSH
2304: LD_INT 1
2306: DOUBLE
2307: EQUAL
2308: IFTRUE 2312
2310: GO 2319
2312: POP
// hHackUnlimitedResources ; 2 :
2313: CALL 14523 0 0
2317: GO 2425
2319: LD_INT 2
2321: DOUBLE
2322: EQUAL
2323: IFTRUE 2327
2325: GO 2334
2327: POP
// hHackSetLevel10 ; 3 :
2328: CALL 14656 0 0
2332: GO 2425
2334: LD_INT 3
2336: DOUBLE
2337: EQUAL
2338: IFTRUE 2342
2340: GO 2349
2342: POP
// hHackSetLevel10YourUnits ; 4 :
2343: CALL 14741 0 0
2347: GO 2425
2349: LD_INT 4
2351: DOUBLE
2352: EQUAL
2353: IFTRUE 2357
2355: GO 2364
2357: POP
// hHackInvincible ; 5 :
2358: CALL 15189 0 0
2362: GO 2425
2364: LD_INT 5
2366: DOUBLE
2367: EQUAL
2368: IFTRUE 2372
2370: GO 2379
2372: POP
// hHackInvisible ; 6 :
2373: CALL 15300 0 0
2377: GO 2425
2379: LD_INT 6
2381: DOUBLE
2382: EQUAL
2383: IFTRUE 2387
2385: GO 2394
2387: POP
// hHackChangeYourSide ; 7 :
2388: CALL 15357 0 0
2392: GO 2425
2394: LD_INT 7
2396: DOUBLE
2397: EQUAL
2398: IFTRUE 2402
2400: GO 2409
2402: POP
// hHackChangeUnitSide ; 8 :
2403: CALL 15399 0 0
2407: GO 2425
2409: LD_INT 8
2411: DOUBLE
2412: EQUAL
2413: IFTRUE 2417
2415: GO 2424
2417: POP
// hHackFog ; end ;
2418: CALL 15500 0 0
2422: GO 2425
2424: POP
// end ; end ;
2425: LD_VAR 0 7
2429: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
2430: GO 2432
2432: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
2433: LD_STRING initStreamRollete();
2435: PPUSH
2436: CALL_OW 559
// InitStreamMode ;
2440: CALL 2452 0 0
// DefineStreamItems ( false ) ;
2444: LD_INT 0
2446: PPUSH
2447: CALL 2916 0 1
// end ;
2451: END
// function InitStreamMode ; begin
2452: LD_INT 0
2454: PPUSH
// streamModeActive := false ;
2455: LD_ADDR_EXP 1
2459: PUSH
2460: LD_INT 0
2462: ST_TO_ADDR
// normalCounter := 36 ;
2463: LD_ADDR_EXP 2
2467: PUSH
2468: LD_INT 36
2470: ST_TO_ADDR
// hardcoreCounter := 18 ;
2471: LD_ADDR_EXP 3
2475: PUSH
2476: LD_INT 18
2478: ST_TO_ADDR
// sRocket := false ;
2479: LD_ADDR_EXP 6
2483: PUSH
2484: LD_INT 0
2486: ST_TO_ADDR
// sSpeed := false ;
2487: LD_ADDR_EXP 5
2491: PUSH
2492: LD_INT 0
2494: ST_TO_ADDR
// sEngine := false ;
2495: LD_ADDR_EXP 7
2499: PUSH
2500: LD_INT 0
2502: ST_TO_ADDR
// sSpec := false ;
2503: LD_ADDR_EXP 4
2507: PUSH
2508: LD_INT 0
2510: ST_TO_ADDR
// sLevel := false ;
2511: LD_ADDR_EXP 8
2515: PUSH
2516: LD_INT 0
2518: ST_TO_ADDR
// sArmoury := false ;
2519: LD_ADDR_EXP 9
2523: PUSH
2524: LD_INT 0
2526: ST_TO_ADDR
// sRadar := false ;
2527: LD_ADDR_EXP 10
2531: PUSH
2532: LD_INT 0
2534: ST_TO_ADDR
// sBunker := false ;
2535: LD_ADDR_EXP 11
2539: PUSH
2540: LD_INT 0
2542: ST_TO_ADDR
// sHack := false ;
2543: LD_ADDR_EXP 12
2547: PUSH
2548: LD_INT 0
2550: ST_TO_ADDR
// sFire := false ;
2551: LD_ADDR_EXP 13
2555: PUSH
2556: LD_INT 0
2558: ST_TO_ADDR
// sRefresh := false ;
2559: LD_ADDR_EXP 14
2563: PUSH
2564: LD_INT 0
2566: ST_TO_ADDR
// sExp := false ;
2567: LD_ADDR_EXP 15
2571: PUSH
2572: LD_INT 0
2574: ST_TO_ADDR
// sDepot := false ;
2575: LD_ADDR_EXP 16
2579: PUSH
2580: LD_INT 0
2582: ST_TO_ADDR
// sFlag := false ;
2583: LD_ADDR_EXP 17
2587: PUSH
2588: LD_INT 0
2590: ST_TO_ADDR
// sKamikadze := false ;
2591: LD_ADDR_EXP 25
2595: PUSH
2596: LD_INT 0
2598: ST_TO_ADDR
// sTroll := false ;
2599: LD_ADDR_EXP 26
2603: PUSH
2604: LD_INT 0
2606: ST_TO_ADDR
// sSlow := false ;
2607: LD_ADDR_EXP 27
2611: PUSH
2612: LD_INT 0
2614: ST_TO_ADDR
// sLack := false ;
2615: LD_ADDR_EXP 28
2619: PUSH
2620: LD_INT 0
2622: ST_TO_ADDR
// sTank := false ;
2623: LD_ADDR_EXP 30
2627: PUSH
2628: LD_INT 0
2630: ST_TO_ADDR
// sRemote := false ;
2631: LD_ADDR_EXP 31
2635: PUSH
2636: LD_INT 0
2638: ST_TO_ADDR
// sPowell := false ;
2639: LD_ADDR_EXP 32
2643: PUSH
2644: LD_INT 0
2646: ST_TO_ADDR
// sTeleport := false ;
2647: LD_ADDR_EXP 35
2651: PUSH
2652: LD_INT 0
2654: ST_TO_ADDR
// sOilTower := false ;
2655: LD_ADDR_EXP 37
2659: PUSH
2660: LD_INT 0
2662: ST_TO_ADDR
// sShovel := false ;
2663: LD_ADDR_EXP 38
2667: PUSH
2668: LD_INT 0
2670: ST_TO_ADDR
// sSheik := false ;
2671: LD_ADDR_EXP 39
2675: PUSH
2676: LD_INT 0
2678: ST_TO_ADDR
// sEarthquake := false ;
2679: LD_ADDR_EXP 41
2683: PUSH
2684: LD_INT 0
2686: ST_TO_ADDR
// sAI := false ;
2687: LD_ADDR_EXP 42
2691: PUSH
2692: LD_INT 0
2694: ST_TO_ADDR
// sCargo := false ;
2695: LD_ADDR_EXP 45
2699: PUSH
2700: LD_INT 0
2702: ST_TO_ADDR
// sDLaser := false ;
2703: LD_ADDR_EXP 46
2707: PUSH
2708: LD_INT 0
2710: ST_TO_ADDR
// sExchange := false ;
2711: LD_ADDR_EXP 47
2715: PUSH
2716: LD_INT 0
2718: ST_TO_ADDR
// sFac := false ;
2719: LD_ADDR_EXP 48
2723: PUSH
2724: LD_INT 0
2726: ST_TO_ADDR
// sPower := false ;
2727: LD_ADDR_EXP 49
2731: PUSH
2732: LD_INT 0
2734: ST_TO_ADDR
// sRandom := false ;
2735: LD_ADDR_EXP 50
2739: PUSH
2740: LD_INT 0
2742: ST_TO_ADDR
// sShield := false ;
2743: LD_ADDR_EXP 51
2747: PUSH
2748: LD_INT 0
2750: ST_TO_ADDR
// sTime := false ;
2751: LD_ADDR_EXP 52
2755: PUSH
2756: LD_INT 0
2758: ST_TO_ADDR
// sTools := false ;
2759: LD_ADDR_EXP 53
2763: PUSH
2764: LD_INT 0
2766: ST_TO_ADDR
// sSold := false ;
2767: LD_ADDR_EXP 18
2771: PUSH
2772: LD_INT 0
2774: ST_TO_ADDR
// sDiff := false ;
2775: LD_ADDR_EXP 19
2779: PUSH
2780: LD_INT 0
2782: ST_TO_ADDR
// sFog := false ;
2783: LD_ADDR_EXP 22
2787: PUSH
2788: LD_INT 0
2790: ST_TO_ADDR
// sReset := false ;
2791: LD_ADDR_EXP 23
2795: PUSH
2796: LD_INT 0
2798: ST_TO_ADDR
// sSun := false ;
2799: LD_ADDR_EXP 24
2803: PUSH
2804: LD_INT 0
2806: ST_TO_ADDR
// sTiger := false ;
2807: LD_ADDR_EXP 20
2811: PUSH
2812: LD_INT 0
2814: ST_TO_ADDR
// sBomb := false ;
2815: LD_ADDR_EXP 21
2819: PUSH
2820: LD_INT 0
2822: ST_TO_ADDR
// sWound := false ;
2823: LD_ADDR_EXP 29
2827: PUSH
2828: LD_INT 0
2830: ST_TO_ADDR
// sBetray := false ;
2831: LD_ADDR_EXP 33
2835: PUSH
2836: LD_INT 0
2838: ST_TO_ADDR
// sContamin := false ;
2839: LD_ADDR_EXP 34
2843: PUSH
2844: LD_INT 0
2846: ST_TO_ADDR
// sOil := false ;
2847: LD_ADDR_EXP 36
2851: PUSH
2852: LD_INT 0
2854: ST_TO_ADDR
// sStu := false ;
2855: LD_ADDR_EXP 40
2859: PUSH
2860: LD_INT 0
2862: ST_TO_ADDR
// sBazooka := false ;
2863: LD_ADDR_EXP 43
2867: PUSH
2868: LD_INT 0
2870: ST_TO_ADDR
// sMortar := false ;
2871: LD_ADDR_EXP 44
2875: PUSH
2876: LD_INT 0
2878: ST_TO_ADDR
// sRanger := false ;
2879: LD_ADDR_EXP 54
2883: PUSH
2884: LD_INT 0
2886: ST_TO_ADDR
// sComputer := false ;
2887: LD_ADDR_EXP 55
2891: PUSH
2892: LD_INT 0
2894: ST_TO_ADDR
// s30 := false ;
2895: LD_ADDR_EXP 56
2899: PUSH
2900: LD_INT 0
2902: ST_TO_ADDR
// s60 := false ;
2903: LD_ADDR_EXP 57
2907: PUSH
2908: LD_INT 0
2910: ST_TO_ADDR
// end ;
2911: LD_VAR 0 1
2915: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
2916: LD_INT 0
2918: PPUSH
2919: PPUSH
2920: PPUSH
2921: PPUSH
2922: PPUSH
2923: PPUSH
2924: PPUSH
// result := [ ] ;
2925: LD_ADDR_VAR 0 2
2929: PUSH
2930: EMPTY
2931: ST_TO_ADDR
// if campaign_id = 1 then
2932: LD_OWVAR 69
2936: PUSH
2937: LD_INT 1
2939: EQUAL
2940: IFFALSE 6106
// begin case mission_number of 1 :
2942: LD_OWVAR 70
2946: PUSH
2947: LD_INT 1
2949: DOUBLE
2950: EQUAL
2951: IFTRUE 2955
2953: GO 3031
2955: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
2956: LD_ADDR_VAR 0 2
2960: PUSH
2961: LD_INT 2
2963: PUSH
2964: LD_INT 4
2966: PUSH
2967: LD_INT 11
2969: PUSH
2970: LD_INT 12
2972: PUSH
2973: LD_INT 15
2975: PUSH
2976: LD_INT 16
2978: PUSH
2979: LD_INT 22
2981: PUSH
2982: LD_INT 23
2984: PUSH
2985: LD_INT 26
2987: PUSH
2988: EMPTY
2989: LIST
2990: LIST
2991: LIST
2992: LIST
2993: LIST
2994: LIST
2995: LIST
2996: LIST
2997: LIST
2998: PUSH
2999: LD_INT 101
3001: PUSH
3002: LD_INT 102
3004: PUSH
3005: LD_INT 106
3007: PUSH
3008: LD_INT 116
3010: PUSH
3011: LD_INT 117
3013: PUSH
3014: LD_INT 118
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: LIST
3021: LIST
3022: LIST
3023: LIST
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: ST_TO_ADDR
3029: GO 6104
3031: LD_INT 2
3033: DOUBLE
3034: EQUAL
3035: IFTRUE 3039
3037: GO 3123
3039: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3040: LD_ADDR_VAR 0 2
3044: PUSH
3045: LD_INT 2
3047: PUSH
3048: LD_INT 4
3050: PUSH
3051: LD_INT 11
3053: PUSH
3054: LD_INT 12
3056: PUSH
3057: LD_INT 15
3059: PUSH
3060: LD_INT 16
3062: PUSH
3063: LD_INT 22
3065: PUSH
3066: LD_INT 23
3068: PUSH
3069: LD_INT 26
3071: PUSH
3072: EMPTY
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: LIST
3082: PUSH
3083: LD_INT 101
3085: PUSH
3086: LD_INT 102
3088: PUSH
3089: LD_INT 105
3091: PUSH
3092: LD_INT 106
3094: PUSH
3095: LD_INT 108
3097: PUSH
3098: LD_INT 116
3100: PUSH
3101: LD_INT 117
3103: PUSH
3104: LD_INT 118
3106: PUSH
3107: EMPTY
3108: LIST
3109: LIST
3110: LIST
3111: LIST
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: ST_TO_ADDR
3121: GO 6104
3123: LD_INT 3
3125: DOUBLE
3126: EQUAL
3127: IFTRUE 3131
3129: GO 3219
3131: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3132: LD_ADDR_VAR 0 2
3136: PUSH
3137: LD_INT 2
3139: PUSH
3140: LD_INT 4
3142: PUSH
3143: LD_INT 5
3145: PUSH
3146: LD_INT 11
3148: PUSH
3149: LD_INT 12
3151: PUSH
3152: LD_INT 15
3154: PUSH
3155: LD_INT 16
3157: PUSH
3158: LD_INT 22
3160: PUSH
3161: LD_INT 26
3163: PUSH
3164: LD_INT 36
3166: PUSH
3167: EMPTY
3168: LIST
3169: LIST
3170: LIST
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: PUSH
3179: LD_INT 101
3181: PUSH
3182: LD_INT 102
3184: PUSH
3185: LD_INT 105
3187: PUSH
3188: LD_INT 106
3190: PUSH
3191: LD_INT 108
3193: PUSH
3194: LD_INT 116
3196: PUSH
3197: LD_INT 117
3199: PUSH
3200: LD_INT 118
3202: PUSH
3203: EMPTY
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: ST_TO_ADDR
3217: GO 6104
3219: LD_INT 4
3221: DOUBLE
3222: EQUAL
3223: IFTRUE 3227
3225: GO 3323
3227: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
3228: LD_ADDR_VAR 0 2
3232: PUSH
3233: LD_INT 2
3235: PUSH
3236: LD_INT 4
3238: PUSH
3239: LD_INT 5
3241: PUSH
3242: LD_INT 8
3244: PUSH
3245: LD_INT 11
3247: PUSH
3248: LD_INT 12
3250: PUSH
3251: LD_INT 15
3253: PUSH
3254: LD_INT 16
3256: PUSH
3257: LD_INT 22
3259: PUSH
3260: LD_INT 23
3262: PUSH
3263: LD_INT 26
3265: PUSH
3266: LD_INT 36
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: PUSH
3283: LD_INT 101
3285: PUSH
3286: LD_INT 102
3288: PUSH
3289: LD_INT 105
3291: PUSH
3292: LD_INT 106
3294: PUSH
3295: LD_INT 108
3297: PUSH
3298: LD_INT 116
3300: PUSH
3301: LD_INT 117
3303: PUSH
3304: LD_INT 118
3306: PUSH
3307: EMPTY
3308: LIST
3309: LIST
3310: LIST
3311: LIST
3312: LIST
3313: LIST
3314: LIST
3315: LIST
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: ST_TO_ADDR
3321: GO 6104
3323: LD_INT 5
3325: DOUBLE
3326: EQUAL
3327: IFTRUE 3331
3329: GO 3443
3331: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
3332: LD_ADDR_VAR 0 2
3336: PUSH
3337: LD_INT 2
3339: PUSH
3340: LD_INT 4
3342: PUSH
3343: LD_INT 5
3345: PUSH
3346: LD_INT 6
3348: PUSH
3349: LD_INT 8
3351: PUSH
3352: LD_INT 11
3354: PUSH
3355: LD_INT 12
3357: PUSH
3358: LD_INT 15
3360: PUSH
3361: LD_INT 16
3363: PUSH
3364: LD_INT 22
3366: PUSH
3367: LD_INT 23
3369: PUSH
3370: LD_INT 25
3372: PUSH
3373: LD_INT 26
3375: PUSH
3376: LD_INT 36
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: PUSH
3395: LD_INT 101
3397: PUSH
3398: LD_INT 102
3400: PUSH
3401: LD_INT 105
3403: PUSH
3404: LD_INT 106
3406: PUSH
3407: LD_INT 108
3409: PUSH
3410: LD_INT 109
3412: PUSH
3413: LD_INT 112
3415: PUSH
3416: LD_INT 116
3418: PUSH
3419: LD_INT 117
3421: PUSH
3422: LD_INT 118
3424: PUSH
3425: EMPTY
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: ST_TO_ADDR
3441: GO 6104
3443: LD_INT 6
3445: DOUBLE
3446: EQUAL
3447: IFTRUE 3451
3449: GO 3583
3451: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
3452: LD_ADDR_VAR 0 2
3456: PUSH
3457: LD_INT 2
3459: PUSH
3460: LD_INT 4
3462: PUSH
3463: LD_INT 5
3465: PUSH
3466: LD_INT 6
3468: PUSH
3469: LD_INT 8
3471: PUSH
3472: LD_INT 11
3474: PUSH
3475: LD_INT 12
3477: PUSH
3478: LD_INT 15
3480: PUSH
3481: LD_INT 16
3483: PUSH
3484: LD_INT 20
3486: PUSH
3487: LD_INT 21
3489: PUSH
3490: LD_INT 22
3492: PUSH
3493: LD_INT 23
3495: PUSH
3496: LD_INT 25
3498: PUSH
3499: LD_INT 26
3501: PUSH
3502: LD_INT 30
3504: PUSH
3505: LD_INT 31
3507: PUSH
3508: LD_INT 32
3510: PUSH
3511: LD_INT 36
3513: PUSH
3514: EMPTY
3515: LIST
3516: LIST
3517: LIST
3518: LIST
3519: LIST
3520: LIST
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: PUSH
3535: LD_INT 101
3537: PUSH
3538: LD_INT 102
3540: PUSH
3541: LD_INT 105
3543: PUSH
3544: LD_INT 106
3546: PUSH
3547: LD_INT 108
3549: PUSH
3550: LD_INT 109
3552: PUSH
3553: LD_INT 112
3555: PUSH
3556: LD_INT 116
3558: PUSH
3559: LD_INT 117
3561: PUSH
3562: LD_INT 118
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: PUSH
3577: EMPTY
3578: LIST
3579: LIST
3580: ST_TO_ADDR
3581: GO 6104
3583: LD_INT 7
3585: DOUBLE
3586: EQUAL
3587: IFTRUE 3591
3589: GO 3703
3591: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
3592: LD_ADDR_VAR 0 2
3596: PUSH
3597: LD_INT 2
3599: PUSH
3600: LD_INT 4
3602: PUSH
3603: LD_INT 5
3605: PUSH
3606: LD_INT 7
3608: PUSH
3609: LD_INT 11
3611: PUSH
3612: LD_INT 12
3614: PUSH
3615: LD_INT 15
3617: PUSH
3618: LD_INT 16
3620: PUSH
3621: LD_INT 20
3623: PUSH
3624: LD_INT 21
3626: PUSH
3627: LD_INT 22
3629: PUSH
3630: LD_INT 23
3632: PUSH
3633: LD_INT 25
3635: PUSH
3636: LD_INT 26
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: PUSH
3655: LD_INT 101
3657: PUSH
3658: LD_INT 102
3660: PUSH
3661: LD_INT 103
3663: PUSH
3664: LD_INT 105
3666: PUSH
3667: LD_INT 106
3669: PUSH
3670: LD_INT 108
3672: PUSH
3673: LD_INT 112
3675: PUSH
3676: LD_INT 116
3678: PUSH
3679: LD_INT 117
3681: PUSH
3682: LD_INT 118
3684: PUSH
3685: EMPTY
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: ST_TO_ADDR
3701: GO 6104
3703: LD_INT 8
3705: DOUBLE
3706: EQUAL
3707: IFTRUE 3711
3709: GO 3851
3711: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
3712: LD_ADDR_VAR 0 2
3716: PUSH
3717: LD_INT 2
3719: PUSH
3720: LD_INT 4
3722: PUSH
3723: LD_INT 5
3725: PUSH
3726: LD_INT 6
3728: PUSH
3729: LD_INT 7
3731: PUSH
3732: LD_INT 8
3734: PUSH
3735: LD_INT 11
3737: PUSH
3738: LD_INT 12
3740: PUSH
3741: LD_INT 15
3743: PUSH
3744: LD_INT 16
3746: PUSH
3747: LD_INT 20
3749: PUSH
3750: LD_INT 21
3752: PUSH
3753: LD_INT 22
3755: PUSH
3756: LD_INT 23
3758: PUSH
3759: LD_INT 25
3761: PUSH
3762: LD_INT 26
3764: PUSH
3765: LD_INT 30
3767: PUSH
3768: LD_INT 31
3770: PUSH
3771: LD_INT 32
3773: PUSH
3774: LD_INT 36
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: PUSH
3799: LD_INT 101
3801: PUSH
3802: LD_INT 102
3804: PUSH
3805: LD_INT 103
3807: PUSH
3808: LD_INT 105
3810: PUSH
3811: LD_INT 106
3813: PUSH
3814: LD_INT 108
3816: PUSH
3817: LD_INT 109
3819: PUSH
3820: LD_INT 112
3822: PUSH
3823: LD_INT 116
3825: PUSH
3826: LD_INT 117
3828: PUSH
3829: LD_INT 118
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: ST_TO_ADDR
3849: GO 6104
3851: LD_INT 9
3853: DOUBLE
3854: EQUAL
3855: IFTRUE 3859
3857: GO 4007
3859: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
3860: LD_ADDR_VAR 0 2
3864: PUSH
3865: LD_INT 2
3867: PUSH
3868: LD_INT 4
3870: PUSH
3871: LD_INT 5
3873: PUSH
3874: LD_INT 6
3876: PUSH
3877: LD_INT 7
3879: PUSH
3880: LD_INT 8
3882: PUSH
3883: LD_INT 11
3885: PUSH
3886: LD_INT 12
3888: PUSH
3889: LD_INT 15
3891: PUSH
3892: LD_INT 16
3894: PUSH
3895: LD_INT 20
3897: PUSH
3898: LD_INT 21
3900: PUSH
3901: LD_INT 22
3903: PUSH
3904: LD_INT 23
3906: PUSH
3907: LD_INT 25
3909: PUSH
3910: LD_INT 26
3912: PUSH
3913: LD_INT 28
3915: PUSH
3916: LD_INT 30
3918: PUSH
3919: LD_INT 31
3921: PUSH
3922: LD_INT 32
3924: PUSH
3925: LD_INT 36
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: PUSH
3951: LD_INT 101
3953: PUSH
3954: LD_INT 102
3956: PUSH
3957: LD_INT 103
3959: PUSH
3960: LD_INT 105
3962: PUSH
3963: LD_INT 106
3965: PUSH
3966: LD_INT 108
3968: PUSH
3969: LD_INT 109
3971: PUSH
3972: LD_INT 112
3974: PUSH
3975: LD_INT 114
3977: PUSH
3978: LD_INT 116
3980: PUSH
3981: LD_INT 117
3983: PUSH
3984: LD_INT 118
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: LIST
3991: LIST
3992: LIST
3993: LIST
3994: LIST
3995: LIST
3996: LIST
3997: LIST
3998: LIST
3999: LIST
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: ST_TO_ADDR
4005: GO 6104
4007: LD_INT 10
4009: DOUBLE
4010: EQUAL
4011: IFTRUE 4015
4013: GO 4211
4015: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4016: LD_ADDR_VAR 0 2
4020: PUSH
4021: LD_INT 2
4023: PUSH
4024: LD_INT 4
4026: PUSH
4027: LD_INT 5
4029: PUSH
4030: LD_INT 6
4032: PUSH
4033: LD_INT 7
4035: PUSH
4036: LD_INT 8
4038: PUSH
4039: LD_INT 9
4041: PUSH
4042: LD_INT 10
4044: PUSH
4045: LD_INT 11
4047: PUSH
4048: LD_INT 12
4050: PUSH
4051: LD_INT 13
4053: PUSH
4054: LD_INT 14
4056: PUSH
4057: LD_INT 15
4059: PUSH
4060: LD_INT 16
4062: PUSH
4063: LD_INT 17
4065: PUSH
4066: LD_INT 18
4068: PUSH
4069: LD_INT 19
4071: PUSH
4072: LD_INT 20
4074: PUSH
4075: LD_INT 21
4077: PUSH
4078: LD_INT 22
4080: PUSH
4081: LD_INT 23
4083: PUSH
4084: LD_INT 24
4086: PUSH
4087: LD_INT 25
4089: PUSH
4090: LD_INT 26
4092: PUSH
4093: LD_INT 28
4095: PUSH
4096: LD_INT 30
4098: PUSH
4099: LD_INT 31
4101: PUSH
4102: LD_INT 32
4104: PUSH
4105: LD_INT 36
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: PUSH
4139: LD_INT 101
4141: PUSH
4142: LD_INT 102
4144: PUSH
4145: LD_INT 103
4147: PUSH
4148: LD_INT 104
4150: PUSH
4151: LD_INT 105
4153: PUSH
4154: LD_INT 106
4156: PUSH
4157: LD_INT 107
4159: PUSH
4160: LD_INT 108
4162: PUSH
4163: LD_INT 109
4165: PUSH
4166: LD_INT 110
4168: PUSH
4169: LD_INT 111
4171: PUSH
4172: LD_INT 112
4174: PUSH
4175: LD_INT 114
4177: PUSH
4178: LD_INT 116
4180: PUSH
4181: LD_INT 117
4183: PUSH
4184: LD_INT 118
4186: PUSH
4187: EMPTY
4188: LIST
4189: LIST
4190: LIST
4191: LIST
4192: LIST
4193: LIST
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: ST_TO_ADDR
4209: GO 6104
4211: LD_INT 11
4213: DOUBLE
4214: EQUAL
4215: IFTRUE 4219
4217: GO 4423
4219: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4220: LD_ADDR_VAR 0 2
4224: PUSH
4225: LD_INT 2
4227: PUSH
4228: LD_INT 3
4230: PUSH
4231: LD_INT 4
4233: PUSH
4234: LD_INT 5
4236: PUSH
4237: LD_INT 6
4239: PUSH
4240: LD_INT 7
4242: PUSH
4243: LD_INT 8
4245: PUSH
4246: LD_INT 9
4248: PUSH
4249: LD_INT 10
4251: PUSH
4252: LD_INT 11
4254: PUSH
4255: LD_INT 12
4257: PUSH
4258: LD_INT 13
4260: PUSH
4261: LD_INT 14
4263: PUSH
4264: LD_INT 15
4266: PUSH
4267: LD_INT 16
4269: PUSH
4270: LD_INT 17
4272: PUSH
4273: LD_INT 18
4275: PUSH
4276: LD_INT 19
4278: PUSH
4279: LD_INT 20
4281: PUSH
4282: LD_INT 21
4284: PUSH
4285: LD_INT 22
4287: PUSH
4288: LD_INT 23
4290: PUSH
4291: LD_INT 24
4293: PUSH
4294: LD_INT 25
4296: PUSH
4297: LD_INT 26
4299: PUSH
4300: LD_INT 28
4302: PUSH
4303: LD_INT 30
4305: PUSH
4306: LD_INT 31
4308: PUSH
4309: LD_INT 32
4311: PUSH
4312: LD_INT 34
4314: PUSH
4315: LD_INT 36
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: PUSH
4351: LD_INT 101
4353: PUSH
4354: LD_INT 102
4356: PUSH
4357: LD_INT 103
4359: PUSH
4360: LD_INT 104
4362: PUSH
4363: LD_INT 105
4365: PUSH
4366: LD_INT 106
4368: PUSH
4369: LD_INT 107
4371: PUSH
4372: LD_INT 108
4374: PUSH
4375: LD_INT 109
4377: PUSH
4378: LD_INT 110
4380: PUSH
4381: LD_INT 111
4383: PUSH
4384: LD_INT 112
4386: PUSH
4387: LD_INT 114
4389: PUSH
4390: LD_INT 116
4392: PUSH
4393: LD_INT 117
4395: PUSH
4396: LD_INT 118
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: ST_TO_ADDR
4421: GO 6104
4423: LD_INT 12
4425: DOUBLE
4426: EQUAL
4427: IFTRUE 4431
4429: GO 4651
4431: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
4432: LD_ADDR_VAR 0 2
4436: PUSH
4437: LD_INT 1
4439: PUSH
4440: LD_INT 2
4442: PUSH
4443: LD_INT 3
4445: PUSH
4446: LD_INT 4
4448: PUSH
4449: LD_INT 5
4451: PUSH
4452: LD_INT 6
4454: PUSH
4455: LD_INT 7
4457: PUSH
4458: LD_INT 8
4460: PUSH
4461: LD_INT 9
4463: PUSH
4464: LD_INT 10
4466: PUSH
4467: LD_INT 11
4469: PUSH
4470: LD_INT 12
4472: PUSH
4473: LD_INT 13
4475: PUSH
4476: LD_INT 14
4478: PUSH
4479: LD_INT 15
4481: PUSH
4482: LD_INT 16
4484: PUSH
4485: LD_INT 17
4487: PUSH
4488: LD_INT 18
4490: PUSH
4491: LD_INT 19
4493: PUSH
4494: LD_INT 20
4496: PUSH
4497: LD_INT 21
4499: PUSH
4500: LD_INT 22
4502: PUSH
4503: LD_INT 23
4505: PUSH
4506: LD_INT 24
4508: PUSH
4509: LD_INT 25
4511: PUSH
4512: LD_INT 26
4514: PUSH
4515: LD_INT 27
4517: PUSH
4518: LD_INT 28
4520: PUSH
4521: LD_INT 30
4523: PUSH
4524: LD_INT 31
4526: PUSH
4527: LD_INT 32
4529: PUSH
4530: LD_INT 33
4532: PUSH
4533: LD_INT 34
4535: PUSH
4536: LD_INT 36
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: LIST
4557: LIST
4558: LIST
4559: LIST
4560: LIST
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: PUSH
4575: LD_INT 101
4577: PUSH
4578: LD_INT 102
4580: PUSH
4581: LD_INT 103
4583: PUSH
4584: LD_INT 104
4586: PUSH
4587: LD_INT 105
4589: PUSH
4590: LD_INT 106
4592: PUSH
4593: LD_INT 107
4595: PUSH
4596: LD_INT 108
4598: PUSH
4599: LD_INT 109
4601: PUSH
4602: LD_INT 110
4604: PUSH
4605: LD_INT 111
4607: PUSH
4608: LD_INT 112
4610: PUSH
4611: LD_INT 113
4613: PUSH
4614: LD_INT 114
4616: PUSH
4617: LD_INT 116
4619: PUSH
4620: LD_INT 117
4622: PUSH
4623: LD_INT 118
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: ST_TO_ADDR
4649: GO 6104
4651: LD_INT 13
4653: DOUBLE
4654: EQUAL
4655: IFTRUE 4659
4657: GO 4867
4659: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
4660: LD_ADDR_VAR 0 2
4664: PUSH
4665: LD_INT 1
4667: PUSH
4668: LD_INT 2
4670: PUSH
4671: LD_INT 3
4673: PUSH
4674: LD_INT 4
4676: PUSH
4677: LD_INT 5
4679: PUSH
4680: LD_INT 8
4682: PUSH
4683: LD_INT 9
4685: PUSH
4686: LD_INT 10
4688: PUSH
4689: LD_INT 11
4691: PUSH
4692: LD_INT 12
4694: PUSH
4695: LD_INT 14
4697: PUSH
4698: LD_INT 15
4700: PUSH
4701: LD_INT 16
4703: PUSH
4704: LD_INT 17
4706: PUSH
4707: LD_INT 18
4709: PUSH
4710: LD_INT 19
4712: PUSH
4713: LD_INT 20
4715: PUSH
4716: LD_INT 21
4718: PUSH
4719: LD_INT 22
4721: PUSH
4722: LD_INT 23
4724: PUSH
4725: LD_INT 24
4727: PUSH
4728: LD_INT 25
4730: PUSH
4731: LD_INT 26
4733: PUSH
4734: LD_INT 27
4736: PUSH
4737: LD_INT 28
4739: PUSH
4740: LD_INT 30
4742: PUSH
4743: LD_INT 31
4745: PUSH
4746: LD_INT 32
4748: PUSH
4749: LD_INT 33
4751: PUSH
4752: LD_INT 34
4754: PUSH
4755: LD_INT 36
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: PUSH
4791: LD_INT 101
4793: PUSH
4794: LD_INT 102
4796: PUSH
4797: LD_INT 103
4799: PUSH
4800: LD_INT 104
4802: PUSH
4803: LD_INT 105
4805: PUSH
4806: LD_INT 106
4808: PUSH
4809: LD_INT 107
4811: PUSH
4812: LD_INT 108
4814: PUSH
4815: LD_INT 109
4817: PUSH
4818: LD_INT 110
4820: PUSH
4821: LD_INT 111
4823: PUSH
4824: LD_INT 112
4826: PUSH
4827: LD_INT 113
4829: PUSH
4830: LD_INT 114
4832: PUSH
4833: LD_INT 116
4835: PUSH
4836: LD_INT 117
4838: PUSH
4839: LD_INT 118
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: ST_TO_ADDR
4865: GO 6104
4867: LD_INT 14
4869: DOUBLE
4870: EQUAL
4871: IFTRUE 4875
4873: GO 5099
4875: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
4876: LD_ADDR_VAR 0 2
4880: PUSH
4881: LD_INT 1
4883: PUSH
4884: LD_INT 2
4886: PUSH
4887: LD_INT 3
4889: PUSH
4890: LD_INT 4
4892: PUSH
4893: LD_INT 5
4895: PUSH
4896: LD_INT 6
4898: PUSH
4899: LD_INT 7
4901: PUSH
4902: LD_INT 8
4904: PUSH
4905: LD_INT 9
4907: PUSH
4908: LD_INT 10
4910: PUSH
4911: LD_INT 11
4913: PUSH
4914: LD_INT 12
4916: PUSH
4917: LD_INT 13
4919: PUSH
4920: LD_INT 14
4922: PUSH
4923: LD_INT 15
4925: PUSH
4926: LD_INT 16
4928: PUSH
4929: LD_INT 17
4931: PUSH
4932: LD_INT 18
4934: PUSH
4935: LD_INT 19
4937: PUSH
4938: LD_INT 20
4940: PUSH
4941: LD_INT 21
4943: PUSH
4944: LD_INT 22
4946: PUSH
4947: LD_INT 23
4949: PUSH
4950: LD_INT 24
4952: PUSH
4953: LD_INT 25
4955: PUSH
4956: LD_INT 26
4958: PUSH
4959: LD_INT 27
4961: PUSH
4962: LD_INT 28
4964: PUSH
4965: LD_INT 29
4967: PUSH
4968: LD_INT 30
4970: PUSH
4971: LD_INT 31
4973: PUSH
4974: LD_INT 32
4976: PUSH
4977: LD_INT 33
4979: PUSH
4980: LD_INT 34
4982: PUSH
4983: LD_INT 36
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: PUSH
5023: LD_INT 101
5025: PUSH
5026: LD_INT 102
5028: PUSH
5029: LD_INT 103
5031: PUSH
5032: LD_INT 104
5034: PUSH
5035: LD_INT 105
5037: PUSH
5038: LD_INT 106
5040: PUSH
5041: LD_INT 107
5043: PUSH
5044: LD_INT 108
5046: PUSH
5047: LD_INT 109
5049: PUSH
5050: LD_INT 110
5052: PUSH
5053: LD_INT 111
5055: PUSH
5056: LD_INT 112
5058: PUSH
5059: LD_INT 113
5061: PUSH
5062: LD_INT 114
5064: PUSH
5065: LD_INT 116
5067: PUSH
5068: LD_INT 117
5070: PUSH
5071: LD_INT 118
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: LIST
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: ST_TO_ADDR
5097: GO 6104
5099: LD_INT 15
5101: DOUBLE
5102: EQUAL
5103: IFTRUE 5107
5105: GO 5331
5107: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5108: LD_ADDR_VAR 0 2
5112: PUSH
5113: LD_INT 1
5115: PUSH
5116: LD_INT 2
5118: PUSH
5119: LD_INT 3
5121: PUSH
5122: LD_INT 4
5124: PUSH
5125: LD_INT 5
5127: PUSH
5128: LD_INT 6
5130: PUSH
5131: LD_INT 7
5133: PUSH
5134: LD_INT 8
5136: PUSH
5137: LD_INT 9
5139: PUSH
5140: LD_INT 10
5142: PUSH
5143: LD_INT 11
5145: PUSH
5146: LD_INT 12
5148: PUSH
5149: LD_INT 13
5151: PUSH
5152: LD_INT 14
5154: PUSH
5155: LD_INT 15
5157: PUSH
5158: LD_INT 16
5160: PUSH
5161: LD_INT 17
5163: PUSH
5164: LD_INT 18
5166: PUSH
5167: LD_INT 19
5169: PUSH
5170: LD_INT 20
5172: PUSH
5173: LD_INT 21
5175: PUSH
5176: LD_INT 22
5178: PUSH
5179: LD_INT 23
5181: PUSH
5182: LD_INT 24
5184: PUSH
5185: LD_INT 25
5187: PUSH
5188: LD_INT 26
5190: PUSH
5191: LD_INT 27
5193: PUSH
5194: LD_INT 28
5196: PUSH
5197: LD_INT 29
5199: PUSH
5200: LD_INT 30
5202: PUSH
5203: LD_INT 31
5205: PUSH
5206: LD_INT 32
5208: PUSH
5209: LD_INT 33
5211: PUSH
5212: LD_INT 34
5214: PUSH
5215: LD_INT 36
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: PUSH
5255: LD_INT 101
5257: PUSH
5258: LD_INT 102
5260: PUSH
5261: LD_INT 103
5263: PUSH
5264: LD_INT 104
5266: PUSH
5267: LD_INT 105
5269: PUSH
5270: LD_INT 106
5272: PUSH
5273: LD_INT 107
5275: PUSH
5276: LD_INT 108
5278: PUSH
5279: LD_INT 109
5281: PUSH
5282: LD_INT 110
5284: PUSH
5285: LD_INT 111
5287: PUSH
5288: LD_INT 112
5290: PUSH
5291: LD_INT 113
5293: PUSH
5294: LD_INT 114
5296: PUSH
5297: LD_INT 116
5299: PUSH
5300: LD_INT 117
5302: PUSH
5303: LD_INT 118
5305: PUSH
5306: EMPTY
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: PUSH
5325: EMPTY
5326: LIST
5327: LIST
5328: ST_TO_ADDR
5329: GO 6104
5331: LD_INT 16
5333: DOUBLE
5334: EQUAL
5335: IFTRUE 5339
5337: GO 5475
5339: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
5340: LD_ADDR_VAR 0 2
5344: PUSH
5345: LD_INT 2
5347: PUSH
5348: LD_INT 4
5350: PUSH
5351: LD_INT 5
5353: PUSH
5354: LD_INT 7
5356: PUSH
5357: LD_INT 11
5359: PUSH
5360: LD_INT 12
5362: PUSH
5363: LD_INT 15
5365: PUSH
5366: LD_INT 16
5368: PUSH
5369: LD_INT 20
5371: PUSH
5372: LD_INT 21
5374: PUSH
5375: LD_INT 22
5377: PUSH
5378: LD_INT 23
5380: PUSH
5381: LD_INT 25
5383: PUSH
5384: LD_INT 26
5386: PUSH
5387: LD_INT 30
5389: PUSH
5390: LD_INT 31
5392: PUSH
5393: LD_INT 32
5395: PUSH
5396: LD_INT 33
5398: PUSH
5399: LD_INT 34
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: LIST
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: LIST
5411: LIST
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: LIST
5422: PUSH
5423: LD_INT 101
5425: PUSH
5426: LD_INT 102
5428: PUSH
5429: LD_INT 103
5431: PUSH
5432: LD_INT 106
5434: PUSH
5435: LD_INT 108
5437: PUSH
5438: LD_INT 112
5440: PUSH
5441: LD_INT 113
5443: PUSH
5444: LD_INT 114
5446: PUSH
5447: LD_INT 116
5449: PUSH
5450: LD_INT 117
5452: PUSH
5453: LD_INT 118
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: LIST
5467: LIST
5468: PUSH
5469: EMPTY
5470: LIST
5471: LIST
5472: ST_TO_ADDR
5473: GO 6104
5475: LD_INT 17
5477: DOUBLE
5478: EQUAL
5479: IFTRUE 5483
5481: GO 5707
5483: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
5484: LD_ADDR_VAR 0 2
5488: PUSH
5489: LD_INT 1
5491: PUSH
5492: LD_INT 2
5494: PUSH
5495: LD_INT 3
5497: PUSH
5498: LD_INT 4
5500: PUSH
5501: LD_INT 5
5503: PUSH
5504: LD_INT 6
5506: PUSH
5507: LD_INT 7
5509: PUSH
5510: LD_INT 8
5512: PUSH
5513: LD_INT 9
5515: PUSH
5516: LD_INT 10
5518: PUSH
5519: LD_INT 11
5521: PUSH
5522: LD_INT 12
5524: PUSH
5525: LD_INT 13
5527: PUSH
5528: LD_INT 14
5530: PUSH
5531: LD_INT 15
5533: PUSH
5534: LD_INT 16
5536: PUSH
5537: LD_INT 17
5539: PUSH
5540: LD_INT 18
5542: PUSH
5543: LD_INT 19
5545: PUSH
5546: LD_INT 20
5548: PUSH
5549: LD_INT 21
5551: PUSH
5552: LD_INT 22
5554: PUSH
5555: LD_INT 23
5557: PUSH
5558: LD_INT 24
5560: PUSH
5561: LD_INT 25
5563: PUSH
5564: LD_INT 26
5566: PUSH
5567: LD_INT 27
5569: PUSH
5570: LD_INT 28
5572: PUSH
5573: LD_INT 29
5575: PUSH
5576: LD_INT 30
5578: PUSH
5579: LD_INT 31
5581: PUSH
5582: LD_INT 32
5584: PUSH
5585: LD_INT 33
5587: PUSH
5588: LD_INT 34
5590: PUSH
5591: LD_INT 36
5593: PUSH
5594: EMPTY
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: PUSH
5631: LD_INT 101
5633: PUSH
5634: LD_INT 102
5636: PUSH
5637: LD_INT 103
5639: PUSH
5640: LD_INT 104
5642: PUSH
5643: LD_INT 105
5645: PUSH
5646: LD_INT 106
5648: PUSH
5649: LD_INT 107
5651: PUSH
5652: LD_INT 108
5654: PUSH
5655: LD_INT 109
5657: PUSH
5658: LD_INT 110
5660: PUSH
5661: LD_INT 111
5663: PUSH
5664: LD_INT 112
5666: PUSH
5667: LD_INT 113
5669: PUSH
5670: LD_INT 114
5672: PUSH
5673: LD_INT 116
5675: PUSH
5676: LD_INT 117
5678: PUSH
5679: LD_INT 118
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: LIST
5686: LIST
5687: LIST
5688: LIST
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: ST_TO_ADDR
5705: GO 6104
5707: LD_INT 18
5709: DOUBLE
5710: EQUAL
5711: IFTRUE 5715
5713: GO 5863
5715: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
5716: LD_ADDR_VAR 0 2
5720: PUSH
5721: LD_INT 2
5723: PUSH
5724: LD_INT 4
5726: PUSH
5727: LD_INT 5
5729: PUSH
5730: LD_INT 7
5732: PUSH
5733: LD_INT 11
5735: PUSH
5736: LD_INT 12
5738: PUSH
5739: LD_INT 15
5741: PUSH
5742: LD_INT 16
5744: PUSH
5745: LD_INT 20
5747: PUSH
5748: LD_INT 21
5750: PUSH
5751: LD_INT 22
5753: PUSH
5754: LD_INT 23
5756: PUSH
5757: LD_INT 25
5759: PUSH
5760: LD_INT 26
5762: PUSH
5763: LD_INT 30
5765: PUSH
5766: LD_INT 31
5768: PUSH
5769: LD_INT 32
5771: PUSH
5772: LD_INT 33
5774: PUSH
5775: LD_INT 34
5777: PUSH
5778: LD_INT 35
5780: PUSH
5781: LD_INT 36
5783: PUSH
5784: EMPTY
5785: LIST
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: LIST
5799: LIST
5800: LIST
5801: LIST
5802: LIST
5803: LIST
5804: LIST
5805: LIST
5806: PUSH
5807: LD_INT 101
5809: PUSH
5810: LD_INT 102
5812: PUSH
5813: LD_INT 103
5815: PUSH
5816: LD_INT 106
5818: PUSH
5819: LD_INT 108
5821: PUSH
5822: LD_INT 112
5824: PUSH
5825: LD_INT 113
5827: PUSH
5828: LD_INT 114
5830: PUSH
5831: LD_INT 115
5833: PUSH
5834: LD_INT 116
5836: PUSH
5837: LD_INT 117
5839: PUSH
5840: LD_INT 118
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: LIST
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: PUSH
5857: EMPTY
5858: LIST
5859: LIST
5860: ST_TO_ADDR
5861: GO 6104
5863: LD_INT 19
5865: DOUBLE
5866: EQUAL
5867: IFTRUE 5871
5869: GO 6103
5871: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
5872: LD_ADDR_VAR 0 2
5876: PUSH
5877: LD_INT 1
5879: PUSH
5880: LD_INT 2
5882: PUSH
5883: LD_INT 3
5885: PUSH
5886: LD_INT 4
5888: PUSH
5889: LD_INT 5
5891: PUSH
5892: LD_INT 6
5894: PUSH
5895: LD_INT 7
5897: PUSH
5898: LD_INT 8
5900: PUSH
5901: LD_INT 9
5903: PUSH
5904: LD_INT 10
5906: PUSH
5907: LD_INT 11
5909: PUSH
5910: LD_INT 12
5912: PUSH
5913: LD_INT 13
5915: PUSH
5916: LD_INT 14
5918: PUSH
5919: LD_INT 15
5921: PUSH
5922: LD_INT 16
5924: PUSH
5925: LD_INT 17
5927: PUSH
5928: LD_INT 18
5930: PUSH
5931: LD_INT 19
5933: PUSH
5934: LD_INT 20
5936: PUSH
5937: LD_INT 21
5939: PUSH
5940: LD_INT 22
5942: PUSH
5943: LD_INT 23
5945: PUSH
5946: LD_INT 24
5948: PUSH
5949: LD_INT 25
5951: PUSH
5952: LD_INT 26
5954: PUSH
5955: LD_INT 27
5957: PUSH
5958: LD_INT 28
5960: PUSH
5961: LD_INT 29
5963: PUSH
5964: LD_INT 30
5966: PUSH
5967: LD_INT 31
5969: PUSH
5970: LD_INT 32
5972: PUSH
5973: LD_INT 33
5975: PUSH
5976: LD_INT 34
5978: PUSH
5979: LD_INT 35
5981: PUSH
5982: LD_INT 36
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: PUSH
6023: LD_INT 101
6025: PUSH
6026: LD_INT 102
6028: PUSH
6029: LD_INT 103
6031: PUSH
6032: LD_INT 104
6034: PUSH
6035: LD_INT 105
6037: PUSH
6038: LD_INT 106
6040: PUSH
6041: LD_INT 107
6043: PUSH
6044: LD_INT 108
6046: PUSH
6047: LD_INT 109
6049: PUSH
6050: LD_INT 110
6052: PUSH
6053: LD_INT 111
6055: PUSH
6056: LD_INT 112
6058: PUSH
6059: LD_INT 113
6061: PUSH
6062: LD_INT 114
6064: PUSH
6065: LD_INT 115
6067: PUSH
6068: LD_INT 116
6070: PUSH
6071: LD_INT 117
6073: PUSH
6074: LD_INT 118
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: PUSH
6097: EMPTY
6098: LIST
6099: LIST
6100: ST_TO_ADDR
6101: GO 6104
6103: POP
// end else
6104: GO 6335
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6106: LD_ADDR_VAR 0 2
6110: PUSH
6111: LD_INT 1
6113: PUSH
6114: LD_INT 2
6116: PUSH
6117: LD_INT 3
6119: PUSH
6120: LD_INT 4
6122: PUSH
6123: LD_INT 5
6125: PUSH
6126: LD_INT 6
6128: PUSH
6129: LD_INT 7
6131: PUSH
6132: LD_INT 8
6134: PUSH
6135: LD_INT 9
6137: PUSH
6138: LD_INT 10
6140: PUSH
6141: LD_INT 11
6143: PUSH
6144: LD_INT 12
6146: PUSH
6147: LD_INT 13
6149: PUSH
6150: LD_INT 14
6152: PUSH
6153: LD_INT 15
6155: PUSH
6156: LD_INT 16
6158: PUSH
6159: LD_INT 17
6161: PUSH
6162: LD_INT 18
6164: PUSH
6165: LD_INT 19
6167: PUSH
6168: LD_INT 20
6170: PUSH
6171: LD_INT 21
6173: PUSH
6174: LD_INT 22
6176: PUSH
6177: LD_INT 23
6179: PUSH
6180: LD_INT 24
6182: PUSH
6183: LD_INT 25
6185: PUSH
6186: LD_INT 26
6188: PUSH
6189: LD_INT 27
6191: PUSH
6192: LD_INT 28
6194: PUSH
6195: LD_INT 29
6197: PUSH
6198: LD_INT 30
6200: PUSH
6201: LD_INT 31
6203: PUSH
6204: LD_INT 32
6206: PUSH
6207: LD_INT 33
6209: PUSH
6210: LD_INT 34
6212: PUSH
6213: LD_INT 35
6215: PUSH
6216: LD_INT 36
6218: PUSH
6219: EMPTY
6220: LIST
6221: LIST
6222: LIST
6223: LIST
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: PUSH
6257: LD_INT 101
6259: PUSH
6260: LD_INT 102
6262: PUSH
6263: LD_INT 103
6265: PUSH
6266: LD_INT 104
6268: PUSH
6269: LD_INT 105
6271: PUSH
6272: LD_INT 106
6274: PUSH
6275: LD_INT 107
6277: PUSH
6278: LD_INT 108
6280: PUSH
6281: LD_INT 109
6283: PUSH
6284: LD_INT 110
6286: PUSH
6287: LD_INT 111
6289: PUSH
6290: LD_INT 112
6292: PUSH
6293: LD_INT 113
6295: PUSH
6296: LD_INT 114
6298: PUSH
6299: LD_INT 115
6301: PUSH
6302: LD_INT 116
6304: PUSH
6305: LD_INT 117
6307: PUSH
6308: LD_INT 118
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: ST_TO_ADDR
// if result then
6335: LD_VAR 0 2
6339: IFFALSE 7125
// begin normal :=  ;
6341: LD_ADDR_VAR 0 5
6345: PUSH
6346: LD_STRING 
6348: ST_TO_ADDR
// hardcore :=  ;
6349: LD_ADDR_VAR 0 6
6353: PUSH
6354: LD_STRING 
6356: ST_TO_ADDR
// active :=  ;
6357: LD_ADDR_VAR 0 7
6361: PUSH
6362: LD_STRING 
6364: ST_TO_ADDR
// for i = 1 to normalCounter do
6365: LD_ADDR_VAR 0 8
6369: PUSH
6370: DOUBLE
6371: LD_INT 1
6373: DEC
6374: ST_TO_ADDR
6375: LD_EXP 2
6379: PUSH
6380: FOR_TO
6381: IFFALSE 6482
// begin tmp := 0 ;
6383: LD_ADDR_VAR 0 3
6387: PUSH
6388: LD_STRING 0
6390: ST_TO_ADDR
// if result [ 1 ] then
6391: LD_VAR 0 2
6395: PUSH
6396: LD_INT 1
6398: ARRAY
6399: IFFALSE 6464
// if result [ 1 ] [ 1 ] = i then
6401: LD_VAR 0 2
6405: PUSH
6406: LD_INT 1
6408: ARRAY
6409: PUSH
6410: LD_INT 1
6412: ARRAY
6413: PUSH
6414: LD_VAR 0 8
6418: EQUAL
6419: IFFALSE 6464
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6421: LD_ADDR_VAR 0 2
6425: PUSH
6426: LD_VAR 0 2
6430: PPUSH
6431: LD_INT 1
6433: PPUSH
6434: LD_VAR 0 2
6438: PUSH
6439: LD_INT 1
6441: ARRAY
6442: PPUSH
6443: LD_INT 1
6445: PPUSH
6446: CALL_OW 3
6450: PPUSH
6451: CALL_OW 1
6455: ST_TO_ADDR
// tmp := 1 ;
6456: LD_ADDR_VAR 0 3
6460: PUSH
6461: LD_STRING 1
6463: ST_TO_ADDR
// end ; normal := normal & tmp ;
6464: LD_ADDR_VAR 0 5
6468: PUSH
6469: LD_VAR 0 5
6473: PUSH
6474: LD_VAR 0 3
6478: STR
6479: ST_TO_ADDR
// end ;
6480: GO 6380
6482: POP
6483: POP
// for i = 1 to hardcoreCounter do
6484: LD_ADDR_VAR 0 8
6488: PUSH
6489: DOUBLE
6490: LD_INT 1
6492: DEC
6493: ST_TO_ADDR
6494: LD_EXP 3
6498: PUSH
6499: FOR_TO
6500: IFFALSE 6605
// begin tmp := 0 ;
6502: LD_ADDR_VAR 0 3
6506: PUSH
6507: LD_STRING 0
6509: ST_TO_ADDR
// if result [ 2 ] then
6510: LD_VAR 0 2
6514: PUSH
6515: LD_INT 2
6517: ARRAY
6518: IFFALSE 6587
// if result [ 2 ] [ 1 ] = 100 + i then
6520: LD_VAR 0 2
6524: PUSH
6525: LD_INT 2
6527: ARRAY
6528: PUSH
6529: LD_INT 1
6531: ARRAY
6532: PUSH
6533: LD_INT 100
6535: PUSH
6536: LD_VAR 0 8
6540: PLUS
6541: EQUAL
6542: IFFALSE 6587
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6544: LD_ADDR_VAR 0 2
6548: PUSH
6549: LD_VAR 0 2
6553: PPUSH
6554: LD_INT 2
6556: PPUSH
6557: LD_VAR 0 2
6561: PUSH
6562: LD_INT 2
6564: ARRAY
6565: PPUSH
6566: LD_INT 1
6568: PPUSH
6569: CALL_OW 3
6573: PPUSH
6574: CALL_OW 1
6578: ST_TO_ADDR
// tmp := 1 ;
6579: LD_ADDR_VAR 0 3
6583: PUSH
6584: LD_STRING 1
6586: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6587: LD_ADDR_VAR 0 6
6591: PUSH
6592: LD_VAR 0 6
6596: PUSH
6597: LD_VAR 0 3
6601: STR
6602: ST_TO_ADDR
// end ;
6603: GO 6499
6605: POP
6606: POP
// if isGameLoad then
6607: LD_VAR 0 1
6611: IFFALSE 7086
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
6613: LD_ADDR_VAR 0 4
6617: PUSH
6618: LD_EXP 6
6622: PUSH
6623: LD_EXP 5
6627: PUSH
6628: LD_EXP 7
6632: PUSH
6633: LD_EXP 4
6637: PUSH
6638: LD_EXP 8
6642: PUSH
6643: LD_EXP 9
6647: PUSH
6648: LD_EXP 10
6652: PUSH
6653: LD_EXP 11
6657: PUSH
6658: LD_EXP 12
6662: PUSH
6663: LD_EXP 13
6667: PUSH
6668: LD_EXP 14
6672: PUSH
6673: LD_EXP 15
6677: PUSH
6678: LD_EXP 16
6682: PUSH
6683: LD_EXP 17
6687: PUSH
6688: LD_EXP 25
6692: PUSH
6693: LD_EXP 26
6697: PUSH
6698: LD_EXP 27
6702: PUSH
6703: LD_EXP 28
6707: PUSH
6708: LD_EXP 30
6712: PUSH
6713: LD_EXP 31
6717: PUSH
6718: LD_EXP 32
6722: PUSH
6723: LD_EXP 35
6727: PUSH
6728: LD_EXP 37
6732: PUSH
6733: LD_EXP 38
6737: PUSH
6738: LD_EXP 39
6742: PUSH
6743: LD_EXP 41
6747: PUSH
6748: LD_EXP 42
6752: PUSH
6753: LD_EXP 45
6757: PUSH
6758: LD_EXP 46
6762: PUSH
6763: LD_EXP 47
6767: PUSH
6768: LD_EXP 48
6772: PUSH
6773: LD_EXP 49
6777: PUSH
6778: LD_EXP 50
6782: PUSH
6783: LD_EXP 51
6787: PUSH
6788: LD_EXP 52
6792: PUSH
6793: LD_EXP 53
6797: PUSH
6798: LD_EXP 18
6802: PUSH
6803: LD_EXP 19
6807: PUSH
6808: LD_EXP 22
6812: PUSH
6813: LD_EXP 23
6817: PUSH
6818: LD_EXP 24
6822: PUSH
6823: LD_EXP 20
6827: PUSH
6828: LD_EXP 21
6832: PUSH
6833: LD_EXP 29
6837: PUSH
6838: LD_EXP 33
6842: PUSH
6843: LD_EXP 34
6847: PUSH
6848: LD_EXP 36
6852: PUSH
6853: LD_EXP 40
6857: PUSH
6858: LD_EXP 43
6862: PUSH
6863: LD_EXP 44
6867: PUSH
6868: LD_EXP 54
6872: PUSH
6873: LD_EXP 55
6877: PUSH
6878: LD_EXP 56
6882: PUSH
6883: LD_EXP 57
6887: PUSH
6888: EMPTY
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: LIST
6899: LIST
6900: LIST
6901: LIST
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: ST_TO_ADDR
// tmp :=  ;
6944: LD_ADDR_VAR 0 3
6948: PUSH
6949: LD_STRING 
6951: ST_TO_ADDR
// for i = 1 to normalCounter do
6952: LD_ADDR_VAR 0 8
6956: PUSH
6957: DOUBLE
6958: LD_INT 1
6960: DEC
6961: ST_TO_ADDR
6962: LD_EXP 2
6966: PUSH
6967: FOR_TO
6968: IFFALSE 7004
// begin if flags [ i ] then
6970: LD_VAR 0 4
6974: PUSH
6975: LD_VAR 0 8
6979: ARRAY
6980: IFFALSE 7002
// tmp := tmp & i & ; ;
6982: LD_ADDR_VAR 0 3
6986: PUSH
6987: LD_VAR 0 3
6991: PUSH
6992: LD_VAR 0 8
6996: STR
6997: PUSH
6998: LD_STRING ;
7000: STR
7001: ST_TO_ADDR
// end ;
7002: GO 6967
7004: POP
7005: POP
// for i = 1 to hardcoreCounter do
7006: LD_ADDR_VAR 0 8
7010: PUSH
7011: DOUBLE
7012: LD_INT 1
7014: DEC
7015: ST_TO_ADDR
7016: LD_EXP 3
7020: PUSH
7021: FOR_TO
7022: IFFALSE 7068
// begin if flags [ normalCounter + i ] then
7024: LD_VAR 0 4
7028: PUSH
7029: LD_EXP 2
7033: PUSH
7034: LD_VAR 0 8
7038: PLUS
7039: ARRAY
7040: IFFALSE 7066
// tmp := tmp & ( 100 + i ) & ; ;
7042: LD_ADDR_VAR 0 3
7046: PUSH
7047: LD_VAR 0 3
7051: PUSH
7052: LD_INT 100
7054: PUSH
7055: LD_VAR 0 8
7059: PLUS
7060: STR
7061: PUSH
7062: LD_STRING ;
7064: STR
7065: ST_TO_ADDR
// end ;
7066: GO 7021
7068: POP
7069: POP
// if tmp then
7070: LD_VAR 0 3
7074: IFFALSE 7086
// active := tmp ;
7076: LD_ADDR_VAR 0 7
7080: PUSH
7081: LD_VAR 0 3
7085: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7086: LD_STRING getStreamItemsFromMission("
7088: PUSH
7089: LD_VAR 0 5
7093: STR
7094: PUSH
7095: LD_STRING ","
7097: STR
7098: PUSH
7099: LD_VAR 0 6
7103: STR
7104: PUSH
7105: LD_STRING ","
7107: STR
7108: PUSH
7109: LD_VAR 0 7
7113: STR
7114: PUSH
7115: LD_STRING ")
7117: STR
7118: PPUSH
7119: CALL_OW 559
// end else
7123: GO 7132
// ToLua ( getStreamItemsFromMission("","","") ) ;
7125: LD_STRING getStreamItemsFromMission("","","")
7127: PPUSH
7128: CALL_OW 559
// end ;
7132: LD_VAR 0 2
7136: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7137: LD_EXP 1
7141: PUSH
7142: LD_EXP 6
7146: AND
7147: IFFALSE 7271
7149: GO 7151
7151: DISABLE
7152: LD_INT 0
7154: PPUSH
7155: PPUSH
// begin enable ;
7156: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7157: LD_ADDR_VAR 0 2
7161: PUSH
7162: LD_INT 22
7164: PUSH
7165: LD_OWVAR 2
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: PUSH
7174: LD_INT 2
7176: PUSH
7177: LD_INT 34
7179: PUSH
7180: LD_INT 7
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PUSH
7187: LD_INT 34
7189: PUSH
7190: LD_INT 45
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: LD_INT 34
7199: PUSH
7200: LD_INT 28
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: LD_INT 34
7209: PUSH
7210: LD_INT 47
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: PPUSH
7228: CALL_OW 69
7232: ST_TO_ADDR
// if not tmp then
7233: LD_VAR 0 2
7237: NOT
7238: IFFALSE 7242
// exit ;
7240: GO 7271
// for i in tmp do
7242: LD_ADDR_VAR 0 1
7246: PUSH
7247: LD_VAR 0 2
7251: PUSH
7252: FOR_IN
7253: IFFALSE 7269
// begin SetLives ( i , 0 ) ;
7255: LD_VAR 0 1
7259: PPUSH
7260: LD_INT 0
7262: PPUSH
7263: CALL_OW 234
// end ;
7267: GO 7252
7269: POP
7270: POP
// end ;
7271: PPOPN 2
7273: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7274: LD_EXP 1
7278: PUSH
7279: LD_EXP 7
7283: AND
7284: IFFALSE 7368
7286: GO 7288
7288: DISABLE
7289: LD_INT 0
7291: PPUSH
7292: PPUSH
// begin enable ;
7293: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7294: LD_ADDR_VAR 0 2
7298: PUSH
7299: LD_INT 22
7301: PUSH
7302: LD_OWVAR 2
7306: PUSH
7307: EMPTY
7308: LIST
7309: LIST
7310: PUSH
7311: LD_INT 32
7313: PUSH
7314: LD_INT 3
7316: PUSH
7317: EMPTY
7318: LIST
7319: LIST
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: PPUSH
7325: CALL_OW 69
7329: ST_TO_ADDR
// if not tmp then
7330: LD_VAR 0 2
7334: NOT
7335: IFFALSE 7339
// exit ;
7337: GO 7368
// for i in tmp do
7339: LD_ADDR_VAR 0 1
7343: PUSH
7344: LD_VAR 0 2
7348: PUSH
7349: FOR_IN
7350: IFFALSE 7366
// begin SetLives ( i , 0 ) ;
7352: LD_VAR 0 1
7356: PPUSH
7357: LD_INT 0
7359: PPUSH
7360: CALL_OW 234
// end ;
7364: GO 7349
7366: POP
7367: POP
// end ;
7368: PPOPN 2
7370: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7371: LD_EXP 1
7375: PUSH
7376: LD_EXP 4
7380: AND
7381: IFFALSE 7474
7383: GO 7385
7385: DISABLE
7386: LD_INT 0
7388: PPUSH
// begin enable ;
7389: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7390: LD_ADDR_VAR 0 1
7394: PUSH
7395: LD_INT 22
7397: PUSH
7398: LD_OWVAR 2
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: PUSH
7407: LD_INT 2
7409: PUSH
7410: LD_INT 25
7412: PUSH
7413: LD_INT 5
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: PUSH
7420: LD_INT 25
7422: PUSH
7423: LD_INT 9
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: PUSH
7430: LD_INT 25
7432: PUSH
7433: LD_INT 8
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PPUSH
7450: CALL_OW 69
7454: PUSH
7455: FOR_IN
7456: IFFALSE 7472
// begin SetClass ( i , 1 ) ;
7458: LD_VAR 0 1
7462: PPUSH
7463: LD_INT 1
7465: PPUSH
7466: CALL_OW 336
// end ;
7470: GO 7455
7472: POP
7473: POP
// end ;
7474: PPOPN 1
7476: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7477: LD_EXP 1
7481: PUSH
7482: LD_EXP 5
7486: AND
7487: PUSH
7488: LD_OWVAR 65
7492: PUSH
7493: LD_INT 7
7495: LESS
7496: AND
7497: IFFALSE 7511
7499: GO 7501
7501: DISABLE
// begin enable ;
7502: ENABLE
// game_speed := 7 ;
7503: LD_ADDR_OWVAR 65
7507: PUSH
7508: LD_INT 7
7510: ST_TO_ADDR
// end ;
7511: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7512: LD_EXP 1
7516: PUSH
7517: LD_EXP 8
7521: AND
7522: IFFALSE 7724
7524: GO 7526
7526: DISABLE
7527: LD_INT 0
7529: PPUSH
7530: PPUSH
7531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7532: LD_ADDR_VAR 0 3
7536: PUSH
7537: LD_INT 81
7539: PUSH
7540: LD_OWVAR 2
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: PUSH
7549: LD_INT 21
7551: PUSH
7552: LD_INT 1
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: PPUSH
7563: CALL_OW 69
7567: ST_TO_ADDR
// if not tmp then
7568: LD_VAR 0 3
7572: NOT
7573: IFFALSE 7577
// exit ;
7575: GO 7724
// if tmp > 5 then
7577: LD_VAR 0 3
7581: PUSH
7582: LD_INT 5
7584: GREATER
7585: IFFALSE 7597
// k := 5 else
7587: LD_ADDR_VAR 0 2
7591: PUSH
7592: LD_INT 5
7594: ST_TO_ADDR
7595: GO 7607
// k := tmp ;
7597: LD_ADDR_VAR 0 2
7601: PUSH
7602: LD_VAR 0 3
7606: ST_TO_ADDR
// for i := 1 to k do
7607: LD_ADDR_VAR 0 1
7611: PUSH
7612: DOUBLE
7613: LD_INT 1
7615: DEC
7616: ST_TO_ADDR
7617: LD_VAR 0 2
7621: PUSH
7622: FOR_TO
7623: IFFALSE 7722
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7625: LD_VAR 0 3
7629: PUSH
7630: LD_VAR 0 1
7634: ARRAY
7635: PPUSH
7636: LD_VAR 0 1
7640: PUSH
7641: LD_INT 4
7643: MOD
7644: PUSH
7645: LD_INT 1
7647: PLUS
7648: PPUSH
7649: CALL_OW 259
7653: PUSH
7654: LD_INT 10
7656: LESS
7657: IFFALSE 7720
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7659: LD_VAR 0 3
7663: PUSH
7664: LD_VAR 0 1
7668: ARRAY
7669: PPUSH
7670: LD_VAR 0 1
7674: PUSH
7675: LD_INT 4
7677: MOD
7678: PUSH
7679: LD_INT 1
7681: PLUS
7682: PPUSH
7683: LD_VAR 0 3
7687: PUSH
7688: LD_VAR 0 1
7692: ARRAY
7693: PPUSH
7694: LD_VAR 0 1
7698: PUSH
7699: LD_INT 4
7701: MOD
7702: PUSH
7703: LD_INT 1
7705: PLUS
7706: PPUSH
7707: CALL_OW 259
7711: PUSH
7712: LD_INT 1
7714: PLUS
7715: PPUSH
7716: CALL_OW 237
7720: GO 7622
7722: POP
7723: POP
// end ;
7724: PPOPN 3
7726: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
7727: LD_EXP 1
7731: PUSH
7732: LD_EXP 9
7736: AND
7737: IFFALSE 7757
7739: GO 7741
7741: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
7742: LD_INT 4
7744: PPUSH
7745: LD_OWVAR 2
7749: PPUSH
7750: LD_INT 0
7752: PPUSH
7753: CALL_OW 324
7757: END
// every 0 0$1 trigger StreamModeActive and sShovel do
7758: LD_EXP 1
7762: PUSH
7763: LD_EXP 38
7767: AND
7768: IFFALSE 7788
7770: GO 7772
7772: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
7773: LD_INT 19
7775: PPUSH
7776: LD_OWVAR 2
7780: PPUSH
7781: LD_INT 0
7783: PPUSH
7784: CALL_OW 324
7788: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
7789: LD_EXP 1
7793: PUSH
7794: LD_EXP 10
7798: AND
7799: IFFALSE 7901
7801: GO 7803
7803: DISABLE
7804: LD_INT 0
7806: PPUSH
7807: PPUSH
// begin enable ;
7808: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
7809: LD_ADDR_VAR 0 2
7813: PUSH
7814: LD_INT 22
7816: PUSH
7817: LD_OWVAR 2
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: PUSH
7826: LD_INT 2
7828: PUSH
7829: LD_INT 34
7831: PUSH
7832: LD_INT 11
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: PUSH
7839: LD_INT 34
7841: PUSH
7842: LD_INT 30
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: LIST
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PPUSH
7858: CALL_OW 69
7862: ST_TO_ADDR
// if not tmp then
7863: LD_VAR 0 2
7867: NOT
7868: IFFALSE 7872
// exit ;
7870: GO 7901
// for i in tmp do
7872: LD_ADDR_VAR 0 1
7876: PUSH
7877: LD_VAR 0 2
7881: PUSH
7882: FOR_IN
7883: IFFALSE 7899
// begin SetLives ( i , 0 ) ;
7885: LD_VAR 0 1
7889: PPUSH
7890: LD_INT 0
7892: PPUSH
7893: CALL_OW 234
// end ;
7897: GO 7882
7899: POP
7900: POP
// end ;
7901: PPOPN 2
7903: END
// every 0 0$1 trigger StreamModeActive and sBunker do
7904: LD_EXP 1
7908: PUSH
7909: LD_EXP 11
7913: AND
7914: IFFALSE 7934
7916: GO 7918
7918: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
7919: LD_INT 32
7921: PPUSH
7922: LD_OWVAR 2
7926: PPUSH
7927: LD_INT 0
7929: PPUSH
7930: CALL_OW 324
7934: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
7935: LD_EXP 1
7939: PUSH
7940: LD_EXP 12
7944: AND
7945: IFFALSE 8126
7947: GO 7949
7949: DISABLE
7950: LD_INT 0
7952: PPUSH
7953: PPUSH
7954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
7955: LD_ADDR_VAR 0 2
7959: PUSH
7960: LD_INT 22
7962: PUSH
7963: LD_OWVAR 2
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: PUSH
7972: LD_INT 33
7974: PUSH
7975: LD_INT 3
7977: PUSH
7978: EMPTY
7979: LIST
7980: LIST
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: PPUSH
7986: CALL_OW 69
7990: ST_TO_ADDR
// if not tmp then
7991: LD_VAR 0 2
7995: NOT
7996: IFFALSE 8000
// exit ;
7998: GO 8126
// side := 0 ;
8000: LD_ADDR_VAR 0 3
8004: PUSH
8005: LD_INT 0
8007: ST_TO_ADDR
// for i := 1 to 8 do
8008: LD_ADDR_VAR 0 1
8012: PUSH
8013: DOUBLE
8014: LD_INT 1
8016: DEC
8017: ST_TO_ADDR
8018: LD_INT 8
8020: PUSH
8021: FOR_TO
8022: IFFALSE 8070
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8024: LD_OWVAR 2
8028: PUSH
8029: LD_VAR 0 1
8033: NONEQUAL
8034: PUSH
8035: LD_OWVAR 2
8039: PPUSH
8040: LD_VAR 0 1
8044: PPUSH
8045: CALL_OW 81
8049: PUSH
8050: LD_INT 2
8052: EQUAL
8053: AND
8054: IFFALSE 8068
// begin side := i ;
8056: LD_ADDR_VAR 0 3
8060: PUSH
8061: LD_VAR 0 1
8065: ST_TO_ADDR
// break ;
8066: GO 8070
// end ;
8068: GO 8021
8070: POP
8071: POP
// if not side then
8072: LD_VAR 0 3
8076: NOT
8077: IFFALSE 8081
// exit ;
8079: GO 8126
// for i := 1 to tmp do
8081: LD_ADDR_VAR 0 1
8085: PUSH
8086: DOUBLE
8087: LD_INT 1
8089: DEC
8090: ST_TO_ADDR
8091: LD_VAR 0 2
8095: PUSH
8096: FOR_TO
8097: IFFALSE 8124
// if Prob ( 60 ) then
8099: LD_INT 60
8101: PPUSH
8102: CALL_OW 13
8106: IFFALSE 8122
// SetSide ( i , side ) ;
8108: LD_VAR 0 1
8112: PPUSH
8113: LD_VAR 0 3
8117: PPUSH
8118: CALL_OW 235
8122: GO 8096
8124: POP
8125: POP
// end ;
8126: PPOPN 3
8128: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8129: LD_EXP 1
8133: PUSH
8134: LD_EXP 14
8138: AND
8139: IFFALSE 8258
8141: GO 8143
8143: DISABLE
8144: LD_INT 0
8146: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8147: LD_ADDR_VAR 0 1
8151: PUSH
8152: LD_INT 22
8154: PUSH
8155: LD_OWVAR 2
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PUSH
8164: LD_INT 21
8166: PUSH
8167: LD_INT 1
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: PUSH
8174: LD_INT 3
8176: PUSH
8177: LD_INT 23
8179: PUSH
8180: LD_INT 0
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: LIST
8195: PPUSH
8196: CALL_OW 69
8200: PUSH
8201: FOR_IN
8202: IFFALSE 8256
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8204: LD_VAR 0 1
8208: PPUSH
8209: CALL_OW 257
8213: PUSH
8214: LD_INT 1
8216: PUSH
8217: LD_INT 2
8219: PUSH
8220: LD_INT 3
8222: PUSH
8223: LD_INT 4
8225: PUSH
8226: EMPTY
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: IN
8232: IFFALSE 8254
// SetClass ( un , rand ( 1 , 4 ) ) ;
8234: LD_VAR 0 1
8238: PPUSH
8239: LD_INT 1
8241: PPUSH
8242: LD_INT 4
8244: PPUSH
8245: CALL_OW 12
8249: PPUSH
8250: CALL_OW 336
8254: GO 8201
8256: POP
8257: POP
// end ;
8258: PPOPN 1
8260: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8261: LD_EXP 1
8265: PUSH
8266: LD_EXP 13
8270: AND
8271: IFFALSE 8350
8273: GO 8275
8275: DISABLE
8276: LD_INT 0
8278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8279: LD_ADDR_VAR 0 1
8283: PUSH
8284: LD_INT 22
8286: PUSH
8287: LD_OWVAR 2
8291: PUSH
8292: EMPTY
8293: LIST
8294: LIST
8295: PUSH
8296: LD_INT 21
8298: PUSH
8299: LD_INT 3
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: PPUSH
8310: CALL_OW 69
8314: ST_TO_ADDR
// if not tmp then
8315: LD_VAR 0 1
8319: NOT
8320: IFFALSE 8324
// exit ;
8322: GO 8350
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8324: LD_VAR 0 1
8328: PUSH
8329: LD_INT 1
8331: PPUSH
8332: LD_VAR 0 1
8336: PPUSH
8337: CALL_OW 12
8341: ARRAY
8342: PPUSH
8343: LD_INT 100
8345: PPUSH
8346: CALL_OW 234
// end ;
8350: PPOPN 1
8352: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8353: LD_EXP 1
8357: PUSH
8358: LD_EXP 15
8362: AND
8363: IFFALSE 8461
8365: GO 8367
8367: DISABLE
8368: LD_INT 0
8370: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8371: LD_ADDR_VAR 0 1
8375: PUSH
8376: LD_INT 22
8378: PUSH
8379: LD_OWVAR 2
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: PUSH
8388: LD_INT 21
8390: PUSH
8391: LD_INT 1
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: PPUSH
8402: CALL_OW 69
8406: ST_TO_ADDR
// if not tmp then
8407: LD_VAR 0 1
8411: NOT
8412: IFFALSE 8416
// exit ;
8414: GO 8461
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8416: LD_VAR 0 1
8420: PUSH
8421: LD_INT 1
8423: PPUSH
8424: LD_VAR 0 1
8428: PPUSH
8429: CALL_OW 12
8433: ARRAY
8434: PPUSH
8435: LD_INT 1
8437: PPUSH
8438: LD_INT 4
8440: PPUSH
8441: CALL_OW 12
8445: PPUSH
8446: LD_INT 3000
8448: PPUSH
8449: LD_INT 9000
8451: PPUSH
8452: CALL_OW 12
8456: PPUSH
8457: CALL_OW 492
// end ;
8461: PPOPN 1
8463: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8464: LD_EXP 1
8468: PUSH
8469: LD_EXP 16
8473: AND
8474: IFFALSE 8494
8476: GO 8478
8478: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8479: LD_INT 1
8481: PPUSH
8482: LD_OWVAR 2
8486: PPUSH
8487: LD_INT 0
8489: PPUSH
8490: CALL_OW 324
8494: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8495: LD_EXP 1
8499: PUSH
8500: LD_EXP 17
8504: AND
8505: IFFALSE 8588
8507: GO 8509
8509: DISABLE
8510: LD_INT 0
8512: PPUSH
8513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8514: LD_ADDR_VAR 0 2
8518: PUSH
8519: LD_INT 22
8521: PUSH
8522: LD_OWVAR 2
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: PUSH
8531: LD_INT 21
8533: PUSH
8534: LD_INT 3
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: PPUSH
8545: CALL_OW 69
8549: ST_TO_ADDR
// if not tmp then
8550: LD_VAR 0 2
8554: NOT
8555: IFFALSE 8559
// exit ;
8557: GO 8588
// for i in tmp do
8559: LD_ADDR_VAR 0 1
8563: PUSH
8564: LD_VAR 0 2
8568: PUSH
8569: FOR_IN
8570: IFFALSE 8586
// SetBLevel ( i , 10 ) ;
8572: LD_VAR 0 1
8576: PPUSH
8577: LD_INT 10
8579: PPUSH
8580: CALL_OW 241
8584: GO 8569
8586: POP
8587: POP
// end ;
8588: PPOPN 2
8590: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8591: LD_EXP 1
8595: PUSH
8596: LD_EXP 18
8600: AND
8601: IFFALSE 8712
8603: GO 8605
8605: DISABLE
8606: LD_INT 0
8608: PPUSH
8609: PPUSH
8610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8611: LD_ADDR_VAR 0 3
8615: PUSH
8616: LD_INT 22
8618: PUSH
8619: LD_OWVAR 2
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: PUSH
8628: LD_INT 25
8630: PUSH
8631: LD_INT 1
8633: PUSH
8634: EMPTY
8635: LIST
8636: LIST
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: PPUSH
8642: CALL_OW 69
8646: ST_TO_ADDR
// if not tmp then
8647: LD_VAR 0 3
8651: NOT
8652: IFFALSE 8656
// exit ;
8654: GO 8712
// un := tmp [ rand ( 1 , tmp ) ] ;
8656: LD_ADDR_VAR 0 2
8660: PUSH
8661: LD_VAR 0 3
8665: PUSH
8666: LD_INT 1
8668: PPUSH
8669: LD_VAR 0 3
8673: PPUSH
8674: CALL_OW 12
8678: ARRAY
8679: ST_TO_ADDR
// if Crawls ( un ) then
8680: LD_VAR 0 2
8684: PPUSH
8685: CALL_OW 318
8689: IFFALSE 8700
// ComWalk ( un ) ;
8691: LD_VAR 0 2
8695: PPUSH
8696: CALL_OW 138
// SetClass ( un , class_sniper ) ;
8700: LD_VAR 0 2
8704: PPUSH
8705: LD_INT 5
8707: PPUSH
8708: CALL_OW 336
// end ;
8712: PPOPN 3
8714: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
8715: LD_EXP 1
8719: PUSH
8720: LD_EXP 19
8724: AND
8725: PUSH
8726: LD_OWVAR 67
8730: PUSH
8731: LD_INT 4
8733: LESS
8734: AND
8735: IFFALSE 8754
8737: GO 8739
8739: DISABLE
// begin Difficulty := Difficulty + 1 ;
8740: LD_ADDR_OWVAR 67
8744: PUSH
8745: LD_OWVAR 67
8749: PUSH
8750: LD_INT 1
8752: PLUS
8753: ST_TO_ADDR
// end ;
8754: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
8755: LD_EXP 1
8759: PUSH
8760: LD_EXP 20
8764: AND
8765: IFFALSE 8868
8767: GO 8769
8769: DISABLE
8770: LD_INT 0
8772: PPUSH
// begin for i := 1 to 5 do
8773: LD_ADDR_VAR 0 1
8777: PUSH
8778: DOUBLE
8779: LD_INT 1
8781: DEC
8782: ST_TO_ADDR
8783: LD_INT 5
8785: PUSH
8786: FOR_TO
8787: IFFALSE 8866
// begin uc_nation := nation_nature ;
8789: LD_ADDR_OWVAR 21
8793: PUSH
8794: LD_INT 0
8796: ST_TO_ADDR
// uc_side := 0 ;
8797: LD_ADDR_OWVAR 20
8801: PUSH
8802: LD_INT 0
8804: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8805: LD_ADDR_OWVAR 29
8809: PUSH
8810: LD_INT 12
8812: PUSH
8813: LD_INT 12
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: ST_TO_ADDR
// hc_agressivity := 20 ;
8820: LD_ADDR_OWVAR 35
8824: PUSH
8825: LD_INT 20
8827: ST_TO_ADDR
// hc_class := class_tiger ;
8828: LD_ADDR_OWVAR 28
8832: PUSH
8833: LD_INT 14
8835: ST_TO_ADDR
// hc_gallery :=  ;
8836: LD_ADDR_OWVAR 33
8840: PUSH
8841: LD_STRING 
8843: ST_TO_ADDR
// hc_name :=  ;
8844: LD_ADDR_OWVAR 26
8848: PUSH
8849: LD_STRING 
8851: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
8852: CALL_OW 44
8856: PPUSH
8857: LD_INT 0
8859: PPUSH
8860: CALL_OW 51
// end ;
8864: GO 8786
8866: POP
8867: POP
// end ;
8868: PPOPN 1
8870: END
// every 0 0$1 trigger StreamModeActive and sBomb do
8871: LD_EXP 1
8875: PUSH
8876: LD_EXP 21
8880: AND
8881: IFFALSE 8890
8883: GO 8885
8885: DISABLE
// StreamSibBomb ;
8886: CALL 8891 0 0
8890: END
// export function StreamSibBomb ; var i , x , y ; begin
8891: LD_INT 0
8893: PPUSH
8894: PPUSH
8895: PPUSH
8896: PPUSH
// result := false ;
8897: LD_ADDR_VAR 0 1
8901: PUSH
8902: LD_INT 0
8904: ST_TO_ADDR
// for i := 1 to 16 do
8905: LD_ADDR_VAR 0 2
8909: PUSH
8910: DOUBLE
8911: LD_INT 1
8913: DEC
8914: ST_TO_ADDR
8915: LD_INT 16
8917: PUSH
8918: FOR_TO
8919: IFFALSE 9118
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8921: LD_ADDR_VAR 0 3
8925: PUSH
8926: LD_INT 10
8928: PUSH
8929: LD_INT 20
8931: PUSH
8932: LD_INT 30
8934: PUSH
8935: LD_INT 40
8937: PUSH
8938: LD_INT 50
8940: PUSH
8941: LD_INT 60
8943: PUSH
8944: LD_INT 70
8946: PUSH
8947: LD_INT 80
8949: PUSH
8950: LD_INT 90
8952: PUSH
8953: LD_INT 100
8955: PUSH
8956: LD_INT 110
8958: PUSH
8959: LD_INT 120
8961: PUSH
8962: LD_INT 130
8964: PUSH
8965: LD_INT 140
8967: PUSH
8968: LD_INT 150
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: PUSH
8988: LD_INT 1
8990: PPUSH
8991: LD_INT 15
8993: PPUSH
8994: CALL_OW 12
8998: ARRAY
8999: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9000: LD_ADDR_VAR 0 4
9004: PUSH
9005: LD_INT 10
9007: PUSH
9008: LD_INT 20
9010: PUSH
9011: LD_INT 30
9013: PUSH
9014: LD_INT 40
9016: PUSH
9017: LD_INT 50
9019: PUSH
9020: LD_INT 60
9022: PUSH
9023: LD_INT 70
9025: PUSH
9026: LD_INT 80
9028: PUSH
9029: LD_INT 90
9031: PUSH
9032: LD_INT 100
9034: PUSH
9035: LD_INT 110
9037: PUSH
9038: LD_INT 120
9040: PUSH
9041: LD_INT 130
9043: PUSH
9044: LD_INT 140
9046: PUSH
9047: LD_INT 150
9049: PUSH
9050: EMPTY
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: PUSH
9067: LD_INT 1
9069: PPUSH
9070: LD_INT 15
9072: PPUSH
9073: CALL_OW 12
9077: ARRAY
9078: ST_TO_ADDR
// if ValidHex ( x , y ) then
9079: LD_VAR 0 3
9083: PPUSH
9084: LD_VAR 0 4
9088: PPUSH
9089: CALL_OW 488
9093: IFFALSE 9116
// begin result := [ x , y ] ;
9095: LD_ADDR_VAR 0 1
9099: PUSH
9100: LD_VAR 0 3
9104: PUSH
9105: LD_VAR 0 4
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: ST_TO_ADDR
// break ;
9114: GO 9118
// end ; end ;
9116: GO 8918
9118: POP
9119: POP
// if result then
9120: LD_VAR 0 1
9124: IFFALSE 9184
// begin ToLua ( playSibBomb() ) ;
9126: LD_STRING playSibBomb()
9128: PPUSH
9129: CALL_OW 559
// wait ( 0 0$14 ) ;
9133: LD_INT 490
9135: PPUSH
9136: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9140: LD_VAR 0 1
9144: PUSH
9145: LD_INT 1
9147: ARRAY
9148: PPUSH
9149: LD_VAR 0 1
9153: PUSH
9154: LD_INT 2
9156: ARRAY
9157: PPUSH
9158: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9162: LD_VAR 0 1
9166: PUSH
9167: LD_INT 1
9169: ARRAY
9170: PPUSH
9171: LD_VAR 0 1
9175: PUSH
9176: LD_INT 2
9178: ARRAY
9179: PPUSH
9180: CALL_OW 429
// end ; end ;
9184: LD_VAR 0 1
9188: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9189: LD_EXP 1
9193: PUSH
9194: LD_EXP 23
9198: AND
9199: IFFALSE 9211
9201: GO 9203
9203: DISABLE
// YouLost (  ) ;
9204: LD_STRING 
9206: PPUSH
9207: CALL_OW 104
9211: END
// every 0 0$1 trigger StreamModeActive and sFog do
9212: LD_EXP 1
9216: PUSH
9217: LD_EXP 22
9221: AND
9222: IFFALSE 9236
9224: GO 9226
9226: DISABLE
// FogOff ( your_side ) ;
9227: LD_OWVAR 2
9231: PPUSH
9232: CALL_OW 344
9236: END
// every 0 0$1 trigger StreamModeActive and sSun do
9237: LD_EXP 1
9241: PUSH
9242: LD_EXP 24
9246: AND
9247: IFFALSE 9275
9249: GO 9251
9251: DISABLE
// begin solar_recharge_percent := 0 ;
9252: LD_ADDR_OWVAR 79
9256: PUSH
9257: LD_INT 0
9259: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9260: LD_INT 10500
9262: PPUSH
9263: CALL_OW 67
// solar_recharge_percent := 100 ;
9267: LD_ADDR_OWVAR 79
9271: PUSH
9272: LD_INT 100
9274: ST_TO_ADDR
// end ;
9275: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9276: LD_EXP 1
9280: PUSH
9281: LD_EXP 25
9285: AND
9286: IFFALSE 9525
9288: GO 9290
9290: DISABLE
9291: LD_INT 0
9293: PPUSH
9294: PPUSH
9295: PPUSH
// begin tmp := [ ] ;
9296: LD_ADDR_VAR 0 3
9300: PUSH
9301: EMPTY
9302: ST_TO_ADDR
// for i := 1 to 6 do
9303: LD_ADDR_VAR 0 1
9307: PUSH
9308: DOUBLE
9309: LD_INT 1
9311: DEC
9312: ST_TO_ADDR
9313: LD_INT 6
9315: PUSH
9316: FOR_TO
9317: IFFALSE 9422
// begin uc_nation := nation_nature ;
9319: LD_ADDR_OWVAR 21
9323: PUSH
9324: LD_INT 0
9326: ST_TO_ADDR
// uc_side := 0 ;
9327: LD_ADDR_OWVAR 20
9331: PUSH
9332: LD_INT 0
9334: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9335: LD_ADDR_OWVAR 29
9339: PUSH
9340: LD_INT 12
9342: PUSH
9343: LD_INT 12
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: ST_TO_ADDR
// hc_agressivity := 20 ;
9350: LD_ADDR_OWVAR 35
9354: PUSH
9355: LD_INT 20
9357: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9358: LD_ADDR_OWVAR 28
9362: PUSH
9363: LD_INT 17
9365: ST_TO_ADDR
// hc_gallery :=  ;
9366: LD_ADDR_OWVAR 33
9370: PUSH
9371: LD_STRING 
9373: ST_TO_ADDR
// hc_name :=  ;
9374: LD_ADDR_OWVAR 26
9378: PUSH
9379: LD_STRING 
9381: ST_TO_ADDR
// un := CreateHuman ;
9382: LD_ADDR_VAR 0 2
9386: PUSH
9387: CALL_OW 44
9391: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9392: LD_VAR 0 2
9396: PPUSH
9397: LD_INT 1
9399: PPUSH
9400: CALL_OW 51
// tmp := tmp ^ un ;
9404: LD_ADDR_VAR 0 3
9408: PUSH
9409: LD_VAR 0 3
9413: PUSH
9414: LD_VAR 0 2
9418: ADD
9419: ST_TO_ADDR
// end ;
9420: GO 9316
9422: POP
9423: POP
// repeat wait ( 0 0$1 ) ;
9424: LD_INT 35
9426: PPUSH
9427: CALL_OW 67
// for un in tmp do
9431: LD_ADDR_VAR 0 2
9435: PUSH
9436: LD_VAR 0 3
9440: PUSH
9441: FOR_IN
9442: IFFALSE 9516
// begin if IsDead ( un ) then
9444: LD_VAR 0 2
9448: PPUSH
9449: CALL_OW 301
9453: IFFALSE 9473
// begin tmp := tmp diff un ;
9455: LD_ADDR_VAR 0 3
9459: PUSH
9460: LD_VAR 0 3
9464: PUSH
9465: LD_VAR 0 2
9469: DIFF
9470: ST_TO_ADDR
// continue ;
9471: GO 9441
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9473: LD_VAR 0 2
9477: PPUSH
9478: LD_INT 3
9480: PUSH
9481: LD_INT 22
9483: PUSH
9484: LD_INT 0
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: PPUSH
9495: CALL_OW 69
9499: PPUSH
9500: LD_VAR 0 2
9504: PPUSH
9505: CALL_OW 74
9509: PPUSH
9510: CALL_OW 115
// end ;
9514: GO 9441
9516: POP
9517: POP
// until not tmp ;
9518: LD_VAR 0 3
9522: NOT
9523: IFFALSE 9424
// end ;
9525: PPOPN 3
9527: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9528: LD_EXP 1
9532: PUSH
9533: LD_EXP 26
9537: AND
9538: IFFALSE 9592
9540: GO 9542
9542: DISABLE
// begin ToLua ( displayTroll(); ) ;
9543: LD_STRING displayTroll();
9545: PPUSH
9546: CALL_OW 559
// wait ( 3 3$00 ) ;
9550: LD_INT 6300
9552: PPUSH
9553: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9557: LD_STRING hideTroll();
9559: PPUSH
9560: CALL_OW 559
// wait ( 1 1$00 ) ;
9564: LD_INT 2100
9566: PPUSH
9567: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9571: LD_STRING displayTroll();
9573: PPUSH
9574: CALL_OW 559
// wait ( 1 1$00 ) ;
9578: LD_INT 2100
9580: PPUSH
9581: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9585: LD_STRING hideTroll();
9587: PPUSH
9588: CALL_OW 559
// end ;
9592: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9593: LD_EXP 1
9597: PUSH
9598: LD_EXP 27
9602: AND
9603: IFFALSE 9666
9605: GO 9607
9607: DISABLE
9608: LD_INT 0
9610: PPUSH
// begin p := 0 ;
9611: LD_ADDR_VAR 0 1
9615: PUSH
9616: LD_INT 0
9618: ST_TO_ADDR
// repeat game_speed := 1 ;
9619: LD_ADDR_OWVAR 65
9623: PUSH
9624: LD_INT 1
9626: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9627: LD_INT 35
9629: PPUSH
9630: CALL_OW 67
// p := p + 1 ;
9634: LD_ADDR_VAR 0 1
9638: PUSH
9639: LD_VAR 0 1
9643: PUSH
9644: LD_INT 1
9646: PLUS
9647: ST_TO_ADDR
// until p >= 60 ;
9648: LD_VAR 0 1
9652: PUSH
9653: LD_INT 60
9655: GREATEREQUAL
9656: IFFALSE 9619
// game_speed := 4 ;
9658: LD_ADDR_OWVAR 65
9662: PUSH
9663: LD_INT 4
9665: ST_TO_ADDR
// end ;
9666: PPOPN 1
9668: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9669: LD_EXP 1
9673: PUSH
9674: LD_EXP 28
9678: AND
9679: IFFALSE 9825
9681: GO 9683
9683: DISABLE
9684: LD_INT 0
9686: PPUSH
9687: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9688: LD_ADDR_VAR 0 1
9692: PUSH
9693: LD_INT 22
9695: PUSH
9696: LD_OWVAR 2
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: PUSH
9705: LD_INT 2
9707: PUSH
9708: LD_INT 30
9710: PUSH
9711: LD_INT 0
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: PUSH
9718: LD_INT 30
9720: PUSH
9721: LD_INT 1
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: LIST
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: PPUSH
9737: CALL_OW 69
9741: ST_TO_ADDR
// if not depot then
9742: LD_VAR 0 1
9746: NOT
9747: IFFALSE 9751
// exit ;
9749: GO 9825
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
9751: LD_ADDR_VAR 0 2
9755: PUSH
9756: LD_VAR 0 1
9760: PUSH
9761: LD_INT 1
9763: PPUSH
9764: LD_VAR 0 1
9768: PPUSH
9769: CALL_OW 12
9773: ARRAY
9774: PPUSH
9775: CALL_OW 274
9779: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
9780: LD_VAR 0 2
9784: PPUSH
9785: LD_INT 1
9787: PPUSH
9788: LD_INT 0
9790: PPUSH
9791: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
9795: LD_VAR 0 2
9799: PPUSH
9800: LD_INT 2
9802: PPUSH
9803: LD_INT 0
9805: PPUSH
9806: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
9810: LD_VAR 0 2
9814: PPUSH
9815: LD_INT 3
9817: PPUSH
9818: LD_INT 0
9820: PPUSH
9821: CALL_OW 277
// end ;
9825: PPOPN 2
9827: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
9828: LD_EXP 1
9832: PUSH
9833: LD_EXP 29
9837: AND
9838: IFFALSE 9935
9840: GO 9842
9842: DISABLE
9843: LD_INT 0
9845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
9846: LD_ADDR_VAR 0 1
9850: PUSH
9851: LD_INT 22
9853: PUSH
9854: LD_OWVAR 2
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PUSH
9863: LD_INT 21
9865: PUSH
9866: LD_INT 1
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: LD_INT 3
9875: PUSH
9876: LD_INT 23
9878: PUSH
9879: LD_INT 0
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: LIST
9894: PPUSH
9895: CALL_OW 69
9899: ST_TO_ADDR
// if not tmp then
9900: LD_VAR 0 1
9904: NOT
9905: IFFALSE 9909
// exit ;
9907: GO 9935
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
9909: LD_VAR 0 1
9913: PUSH
9914: LD_INT 1
9916: PPUSH
9917: LD_VAR 0 1
9921: PPUSH
9922: CALL_OW 12
9926: ARRAY
9927: PPUSH
9928: LD_INT 200
9930: PPUSH
9931: CALL_OW 234
// end ;
9935: PPOPN 1
9937: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
9938: LD_EXP 1
9942: PUSH
9943: LD_EXP 30
9947: AND
9948: IFFALSE 10027
9950: GO 9952
9952: DISABLE
9953: LD_INT 0
9955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
9956: LD_ADDR_VAR 0 1
9960: PUSH
9961: LD_INT 22
9963: PUSH
9964: LD_OWVAR 2
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: PUSH
9973: LD_INT 21
9975: PUSH
9976: LD_INT 2
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PUSH
9983: EMPTY
9984: LIST
9985: LIST
9986: PPUSH
9987: CALL_OW 69
9991: ST_TO_ADDR
// if not tmp then
9992: LD_VAR 0 1
9996: NOT
9997: IFFALSE 10001
// exit ;
9999: GO 10027
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10001: LD_VAR 0 1
10005: PUSH
10006: LD_INT 1
10008: PPUSH
10009: LD_VAR 0 1
10013: PPUSH
10014: CALL_OW 12
10018: ARRAY
10019: PPUSH
10020: LD_INT 60
10022: PPUSH
10023: CALL_OW 234
// end ;
10027: PPOPN 1
10029: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10030: LD_EXP 1
10034: PUSH
10035: LD_EXP 31
10039: AND
10040: IFFALSE 10139
10042: GO 10044
10044: DISABLE
10045: LD_INT 0
10047: PPUSH
10048: PPUSH
// begin enable ;
10049: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10050: LD_ADDR_VAR 0 1
10054: PUSH
10055: LD_INT 22
10057: PUSH
10058: LD_OWVAR 2
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: PUSH
10067: LD_INT 61
10069: PUSH
10070: EMPTY
10071: LIST
10072: PUSH
10073: LD_INT 33
10075: PUSH
10076: LD_INT 2
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: LIST
10087: PPUSH
10088: CALL_OW 69
10092: ST_TO_ADDR
// if not tmp then
10093: LD_VAR 0 1
10097: NOT
10098: IFFALSE 10102
// exit ;
10100: GO 10139
// for i in tmp do
10102: LD_ADDR_VAR 0 2
10106: PUSH
10107: LD_VAR 0 1
10111: PUSH
10112: FOR_IN
10113: IFFALSE 10137
// if IsControledBy ( i ) then
10115: LD_VAR 0 2
10119: PPUSH
10120: CALL_OW 312
10124: IFFALSE 10135
// ComUnlink ( i ) ;
10126: LD_VAR 0 2
10130: PPUSH
10131: CALL_OW 136
10135: GO 10112
10137: POP
10138: POP
// end ;
10139: PPOPN 2
10141: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10142: LD_EXP 1
10146: PUSH
10147: LD_EXP 32
10151: AND
10152: IFFALSE 10292
10154: GO 10156
10156: DISABLE
10157: LD_INT 0
10159: PPUSH
10160: PPUSH
// begin ToLua ( displayPowell(); ) ;
10161: LD_STRING displayPowell();
10163: PPUSH
10164: CALL_OW 559
// uc_side := 0 ;
10168: LD_ADDR_OWVAR 20
10172: PUSH
10173: LD_INT 0
10175: ST_TO_ADDR
// uc_nation := 2 ;
10176: LD_ADDR_OWVAR 21
10180: PUSH
10181: LD_INT 2
10183: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10184: LD_ADDR_OWVAR 37
10188: PUSH
10189: LD_INT 14
10191: ST_TO_ADDR
// vc_engine := engine_siberite ;
10192: LD_ADDR_OWVAR 39
10196: PUSH
10197: LD_INT 3
10199: ST_TO_ADDR
// vc_control := control_apeman ;
10200: LD_ADDR_OWVAR 38
10204: PUSH
10205: LD_INT 5
10207: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10208: LD_ADDR_OWVAR 40
10212: PUSH
10213: LD_INT 29
10215: ST_TO_ADDR
// un := CreateVehicle ;
10216: LD_ADDR_VAR 0 2
10220: PUSH
10221: CALL_OW 45
10225: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10226: LD_VAR 0 2
10230: PPUSH
10231: LD_INT 1
10233: PPUSH
10234: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10238: LD_INT 35
10240: PPUSH
10241: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10245: LD_VAR 0 2
10249: PPUSH
10250: LD_INT 22
10252: PUSH
10253: LD_OWVAR 2
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: PPUSH
10262: CALL_OW 69
10266: PPUSH
10267: LD_VAR 0 2
10271: PPUSH
10272: CALL_OW 74
10276: PPUSH
10277: CALL_OW 115
// until IsDead ( un ) ;
10281: LD_VAR 0 2
10285: PPUSH
10286: CALL_OW 301
10290: IFFALSE 10238
// end ;
10292: PPOPN 2
10294: END
// every 0 0$1 trigger StreamModeActive and sStu do
10295: LD_EXP 1
10299: PUSH
10300: LD_EXP 40
10304: AND
10305: IFFALSE 10321
10307: GO 10309
10309: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10310: LD_STRING displayStucuk();
10312: PPUSH
10313: CALL_OW 559
// ResetFog ;
10317: CALL_OW 335
// end ;
10321: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10322: LD_EXP 1
10326: PUSH
10327: LD_EXP 33
10331: AND
10332: IFFALSE 10473
10334: GO 10336
10336: DISABLE
10337: LD_INT 0
10339: PPUSH
10340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10341: LD_ADDR_VAR 0 2
10345: PUSH
10346: LD_INT 22
10348: PUSH
10349: LD_OWVAR 2
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PUSH
10358: LD_INT 21
10360: PUSH
10361: LD_INT 1
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: PPUSH
10372: CALL_OW 69
10376: ST_TO_ADDR
// if not tmp then
10377: LD_VAR 0 2
10381: NOT
10382: IFFALSE 10386
// exit ;
10384: GO 10473
// un := tmp [ rand ( 1 , tmp ) ] ;
10386: LD_ADDR_VAR 0 1
10390: PUSH
10391: LD_VAR 0 2
10395: PUSH
10396: LD_INT 1
10398: PPUSH
10399: LD_VAR 0 2
10403: PPUSH
10404: CALL_OW 12
10408: ARRAY
10409: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10410: LD_VAR 0 1
10414: PPUSH
10415: LD_INT 0
10417: PPUSH
10418: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10422: LD_VAR 0 1
10426: PPUSH
10427: LD_OWVAR 3
10431: PUSH
10432: LD_VAR 0 1
10436: DIFF
10437: PPUSH
10438: LD_VAR 0 1
10442: PPUSH
10443: CALL_OW 74
10447: PPUSH
10448: CALL_OW 115
// wait ( 0 0$20 ) ;
10452: LD_INT 700
10454: PPUSH
10455: CALL_OW 67
// SetSide ( un , your_side ) ;
10459: LD_VAR 0 1
10463: PPUSH
10464: LD_OWVAR 2
10468: PPUSH
10469: CALL_OW 235
// end ;
10473: PPOPN 2
10475: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10476: LD_EXP 1
10480: PUSH
10481: LD_EXP 34
10485: AND
10486: IFFALSE 10592
10488: GO 10490
10490: DISABLE
10491: LD_INT 0
10493: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10494: LD_ADDR_VAR 0 1
10498: PUSH
10499: LD_INT 22
10501: PUSH
10502: LD_OWVAR 2
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: PUSH
10511: LD_INT 2
10513: PUSH
10514: LD_INT 30
10516: PUSH
10517: LD_INT 0
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: PUSH
10524: LD_INT 30
10526: PUSH
10527: LD_INT 1
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: PUSH
10534: EMPTY
10535: LIST
10536: LIST
10537: LIST
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: PPUSH
10543: CALL_OW 69
10547: ST_TO_ADDR
// if not depot then
10548: LD_VAR 0 1
10552: NOT
10553: IFFALSE 10557
// exit ;
10555: GO 10592
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10557: LD_VAR 0 1
10561: PUSH
10562: LD_INT 1
10564: ARRAY
10565: PPUSH
10566: CALL_OW 250
10570: PPUSH
10571: LD_VAR 0 1
10575: PUSH
10576: LD_INT 1
10578: ARRAY
10579: PPUSH
10580: CALL_OW 251
10584: PPUSH
10585: LD_INT 70
10587: PPUSH
10588: CALL_OW 495
// end ;
10592: PPOPN 1
10594: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10595: LD_EXP 1
10599: PUSH
10600: LD_EXP 35
10604: AND
10605: IFFALSE 10816
10607: GO 10609
10609: DISABLE
10610: LD_INT 0
10612: PPUSH
10613: PPUSH
10614: PPUSH
10615: PPUSH
10616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10617: LD_ADDR_VAR 0 5
10621: PUSH
10622: LD_INT 22
10624: PUSH
10625: LD_OWVAR 2
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PUSH
10634: LD_INT 21
10636: PUSH
10637: LD_INT 1
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: PPUSH
10648: CALL_OW 69
10652: ST_TO_ADDR
// if not tmp then
10653: LD_VAR 0 5
10657: NOT
10658: IFFALSE 10662
// exit ;
10660: GO 10816
// for i in tmp do
10662: LD_ADDR_VAR 0 1
10666: PUSH
10667: LD_VAR 0 5
10671: PUSH
10672: FOR_IN
10673: IFFALSE 10814
// begin d := rand ( 0 , 5 ) ;
10675: LD_ADDR_VAR 0 4
10679: PUSH
10680: LD_INT 0
10682: PPUSH
10683: LD_INT 5
10685: PPUSH
10686: CALL_OW 12
10690: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10691: LD_ADDR_VAR 0 2
10695: PUSH
10696: LD_VAR 0 1
10700: PPUSH
10701: CALL_OW 250
10705: PPUSH
10706: LD_VAR 0 4
10710: PPUSH
10711: LD_INT 3
10713: PPUSH
10714: LD_INT 12
10716: PPUSH
10717: CALL_OW 12
10721: PPUSH
10722: CALL_OW 272
10726: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
10727: LD_ADDR_VAR 0 3
10731: PUSH
10732: LD_VAR 0 1
10736: PPUSH
10737: CALL_OW 251
10741: PPUSH
10742: LD_VAR 0 4
10746: PPUSH
10747: LD_INT 3
10749: PPUSH
10750: LD_INT 12
10752: PPUSH
10753: CALL_OW 12
10757: PPUSH
10758: CALL_OW 273
10762: ST_TO_ADDR
// if ValidHex ( x , y ) then
10763: LD_VAR 0 2
10767: PPUSH
10768: LD_VAR 0 3
10772: PPUSH
10773: CALL_OW 488
10777: IFFALSE 10812
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
10779: LD_VAR 0 1
10783: PPUSH
10784: LD_VAR 0 2
10788: PPUSH
10789: LD_VAR 0 3
10793: PPUSH
10794: LD_INT 3
10796: PPUSH
10797: LD_INT 6
10799: PPUSH
10800: CALL_OW 12
10804: PPUSH
10805: LD_INT 1
10807: PPUSH
10808: CALL_OW 483
// end ;
10812: GO 10672
10814: POP
10815: POP
// end ;
10816: PPOPN 5
10818: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
10819: LD_EXP 1
10823: PUSH
10824: LD_EXP 36
10828: AND
10829: IFFALSE 10923
10831: GO 10833
10833: DISABLE
10834: LD_INT 0
10836: PPUSH
10837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
10838: LD_ADDR_VAR 0 2
10842: PUSH
10843: LD_INT 22
10845: PUSH
10846: LD_OWVAR 2
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PUSH
10855: LD_INT 32
10857: PUSH
10858: LD_INT 1
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: PUSH
10865: LD_INT 21
10867: PUSH
10868: LD_INT 2
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: LIST
10879: PPUSH
10880: CALL_OW 69
10884: ST_TO_ADDR
// if not tmp then
10885: LD_VAR 0 2
10889: NOT
10890: IFFALSE 10894
// exit ;
10892: GO 10923
// for i in tmp do
10894: LD_ADDR_VAR 0 1
10898: PUSH
10899: LD_VAR 0 2
10903: PUSH
10904: FOR_IN
10905: IFFALSE 10921
// SetFuel ( i , 0 ) ;
10907: LD_VAR 0 1
10911: PPUSH
10912: LD_INT 0
10914: PPUSH
10915: CALL_OW 240
10919: GO 10904
10921: POP
10922: POP
// end ;
10923: PPOPN 2
10925: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
10926: LD_EXP 1
10930: PUSH
10931: LD_EXP 37
10935: AND
10936: IFFALSE 11002
10938: GO 10940
10940: DISABLE
10941: LD_INT 0
10943: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
10944: LD_ADDR_VAR 0 1
10948: PUSH
10949: LD_INT 22
10951: PUSH
10952: LD_OWVAR 2
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: PUSH
10961: LD_INT 30
10963: PUSH
10964: LD_INT 29
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: PPUSH
10975: CALL_OW 69
10979: ST_TO_ADDR
// if not tmp then
10980: LD_VAR 0 1
10984: NOT
10985: IFFALSE 10989
// exit ;
10987: GO 11002
// DestroyUnit ( tmp [ 1 ] ) ;
10989: LD_VAR 0 1
10993: PUSH
10994: LD_INT 1
10996: ARRAY
10997: PPUSH
10998: CALL_OW 65
// end ;
11002: PPOPN 1
11004: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11005: LD_EXP 1
11009: PUSH
11010: LD_EXP 39
11014: AND
11015: IFFALSE 11144
11017: GO 11019
11019: DISABLE
11020: LD_INT 0
11022: PPUSH
// begin uc_side := 0 ;
11023: LD_ADDR_OWVAR 20
11027: PUSH
11028: LD_INT 0
11030: ST_TO_ADDR
// uc_nation := nation_arabian ;
11031: LD_ADDR_OWVAR 21
11035: PUSH
11036: LD_INT 2
11038: ST_TO_ADDR
// hc_gallery :=  ;
11039: LD_ADDR_OWVAR 33
11043: PUSH
11044: LD_STRING 
11046: ST_TO_ADDR
// hc_name :=  ;
11047: LD_ADDR_OWVAR 26
11051: PUSH
11052: LD_STRING 
11054: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11055: LD_INT 1
11057: PPUSH
11058: LD_INT 11
11060: PPUSH
11061: LD_INT 10
11063: PPUSH
11064: CALL_OW 380
// un := CreateHuman ;
11068: LD_ADDR_VAR 0 1
11072: PUSH
11073: CALL_OW 44
11077: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11078: LD_VAR 0 1
11082: PPUSH
11083: LD_INT 1
11085: PPUSH
11086: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11090: LD_INT 35
11092: PPUSH
11093: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11097: LD_VAR 0 1
11101: PPUSH
11102: LD_INT 22
11104: PUSH
11105: LD_OWVAR 2
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: PPUSH
11114: CALL_OW 69
11118: PPUSH
11119: LD_VAR 0 1
11123: PPUSH
11124: CALL_OW 74
11128: PPUSH
11129: CALL_OW 115
// until IsDead ( un ) ;
11133: LD_VAR 0 1
11137: PPUSH
11138: CALL_OW 301
11142: IFFALSE 11090
// end ;
11144: PPOPN 1
11146: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11147: LD_EXP 1
11151: PUSH
11152: LD_EXP 41
11156: AND
11157: IFFALSE 11169
11159: GO 11161
11161: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11162: LD_STRING earthquake(getX(game), 0, 32)
11164: PPUSH
11165: CALL_OW 559
11169: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11170: LD_EXP 1
11174: PUSH
11175: LD_EXP 42
11179: AND
11180: IFFALSE 11271
11182: GO 11184
11184: DISABLE
11185: LD_INT 0
11187: PPUSH
// begin enable ;
11188: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11189: LD_ADDR_VAR 0 1
11193: PUSH
11194: LD_INT 22
11196: PUSH
11197: LD_OWVAR 2
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: LD_INT 21
11208: PUSH
11209: LD_INT 2
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: PUSH
11216: LD_INT 33
11218: PUSH
11219: LD_INT 3
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: LIST
11230: PPUSH
11231: CALL_OW 69
11235: ST_TO_ADDR
// if not tmp then
11236: LD_VAR 0 1
11240: NOT
11241: IFFALSE 11245
// exit ;
11243: GO 11271
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11245: LD_VAR 0 1
11249: PUSH
11250: LD_INT 1
11252: PPUSH
11253: LD_VAR 0 1
11257: PPUSH
11258: CALL_OW 12
11262: ARRAY
11263: PPUSH
11264: LD_INT 1
11266: PPUSH
11267: CALL_OW 234
// end ;
11271: PPOPN 1
11273: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11274: LD_EXP 1
11278: PUSH
11279: LD_EXP 43
11283: AND
11284: IFFALSE 11425
11286: GO 11288
11288: DISABLE
11289: LD_INT 0
11291: PPUSH
11292: PPUSH
11293: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11294: LD_ADDR_VAR 0 3
11298: PUSH
11299: LD_INT 22
11301: PUSH
11302: LD_OWVAR 2
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: PUSH
11311: LD_INT 25
11313: PUSH
11314: LD_INT 1
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PPUSH
11325: CALL_OW 69
11329: ST_TO_ADDR
// if not tmp then
11330: LD_VAR 0 3
11334: NOT
11335: IFFALSE 11339
// exit ;
11337: GO 11425
// un := tmp [ rand ( 1 , tmp ) ] ;
11339: LD_ADDR_VAR 0 2
11343: PUSH
11344: LD_VAR 0 3
11348: PUSH
11349: LD_INT 1
11351: PPUSH
11352: LD_VAR 0 3
11356: PPUSH
11357: CALL_OW 12
11361: ARRAY
11362: ST_TO_ADDR
// if Crawls ( un ) then
11363: LD_VAR 0 2
11367: PPUSH
11368: CALL_OW 318
11372: IFFALSE 11383
// ComWalk ( un ) ;
11374: LD_VAR 0 2
11378: PPUSH
11379: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11383: LD_VAR 0 2
11387: PPUSH
11388: LD_INT 9
11390: PPUSH
11391: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11395: LD_INT 28
11397: PPUSH
11398: LD_OWVAR 2
11402: PPUSH
11403: LD_INT 2
11405: PPUSH
11406: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11410: LD_INT 29
11412: PPUSH
11413: LD_OWVAR 2
11417: PPUSH
11418: LD_INT 2
11420: PPUSH
11421: CALL_OW 322
// end ;
11425: PPOPN 3
11427: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11428: LD_EXP 1
11432: PUSH
11433: LD_EXP 44
11437: AND
11438: IFFALSE 11549
11440: GO 11442
11442: DISABLE
11443: LD_INT 0
11445: PPUSH
11446: PPUSH
11447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11448: LD_ADDR_VAR 0 3
11452: PUSH
11453: LD_INT 22
11455: PUSH
11456: LD_OWVAR 2
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PUSH
11465: LD_INT 25
11467: PUSH
11468: LD_INT 1
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: PPUSH
11479: CALL_OW 69
11483: ST_TO_ADDR
// if not tmp then
11484: LD_VAR 0 3
11488: NOT
11489: IFFALSE 11493
// exit ;
11491: GO 11549
// un := tmp [ rand ( 1 , tmp ) ] ;
11493: LD_ADDR_VAR 0 2
11497: PUSH
11498: LD_VAR 0 3
11502: PUSH
11503: LD_INT 1
11505: PPUSH
11506: LD_VAR 0 3
11510: PPUSH
11511: CALL_OW 12
11515: ARRAY
11516: ST_TO_ADDR
// if Crawls ( un ) then
11517: LD_VAR 0 2
11521: PPUSH
11522: CALL_OW 318
11526: IFFALSE 11537
// ComWalk ( un ) ;
11528: LD_VAR 0 2
11532: PPUSH
11533: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11537: LD_VAR 0 2
11541: PPUSH
11542: LD_INT 8
11544: PPUSH
11545: CALL_OW 336
// end ;
11549: PPOPN 3
11551: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11552: LD_EXP 1
11556: PUSH
11557: LD_EXP 45
11561: AND
11562: IFFALSE 11706
11564: GO 11566
11566: DISABLE
11567: LD_INT 0
11569: PPUSH
11570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11571: LD_ADDR_VAR 0 2
11575: PUSH
11576: LD_INT 22
11578: PUSH
11579: LD_OWVAR 2
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PUSH
11588: LD_INT 21
11590: PUSH
11591: LD_INT 2
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PUSH
11598: LD_INT 2
11600: PUSH
11601: LD_INT 34
11603: PUSH
11604: LD_INT 12
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PUSH
11611: LD_INT 34
11613: PUSH
11614: LD_INT 51
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: PUSH
11621: LD_INT 34
11623: PUSH
11624: LD_INT 32
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: LIST
11641: PPUSH
11642: CALL_OW 69
11646: ST_TO_ADDR
// if not tmp then
11647: LD_VAR 0 2
11651: NOT
11652: IFFALSE 11656
// exit ;
11654: GO 11706
// for i in tmp do
11656: LD_ADDR_VAR 0 1
11660: PUSH
11661: LD_VAR 0 2
11665: PUSH
11666: FOR_IN
11667: IFFALSE 11704
// if GetCargo ( i , mat_artifact ) = 0 then
11669: LD_VAR 0 1
11673: PPUSH
11674: LD_INT 4
11676: PPUSH
11677: CALL_OW 289
11681: PUSH
11682: LD_INT 0
11684: EQUAL
11685: IFFALSE 11702
// SetCargo ( i , mat_siberit , 100 ) ;
11687: LD_VAR 0 1
11691: PPUSH
11692: LD_INT 3
11694: PPUSH
11695: LD_INT 100
11697: PPUSH
11698: CALL_OW 290
11702: GO 11666
11704: POP
11705: POP
// end ;
11706: PPOPN 2
11708: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
11709: LD_EXP 1
11713: PUSH
11714: LD_EXP 46
11718: AND
11719: IFFALSE 11902
11721: GO 11723
11723: DISABLE
11724: LD_INT 0
11726: PPUSH
11727: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
11728: LD_ADDR_VAR 0 2
11732: PUSH
11733: LD_INT 22
11735: PUSH
11736: LD_OWVAR 2
11740: PUSH
11741: EMPTY
11742: LIST
11743: LIST
11744: PPUSH
11745: CALL_OW 69
11749: ST_TO_ADDR
// if not tmp then
11750: LD_VAR 0 2
11754: NOT
11755: IFFALSE 11759
// exit ;
11757: GO 11902
// for i := 1 to 2 do
11759: LD_ADDR_VAR 0 1
11763: PUSH
11764: DOUBLE
11765: LD_INT 1
11767: DEC
11768: ST_TO_ADDR
11769: LD_INT 2
11771: PUSH
11772: FOR_TO
11773: IFFALSE 11900
// begin uc_side := your_side ;
11775: LD_ADDR_OWVAR 20
11779: PUSH
11780: LD_OWVAR 2
11784: ST_TO_ADDR
// uc_nation := nation_american ;
11785: LD_ADDR_OWVAR 21
11789: PUSH
11790: LD_INT 1
11792: ST_TO_ADDR
// vc_chassis := us_morphling ;
11793: LD_ADDR_OWVAR 37
11797: PUSH
11798: LD_INT 5
11800: ST_TO_ADDR
// vc_engine := engine_siberite ;
11801: LD_ADDR_OWVAR 39
11805: PUSH
11806: LD_INT 3
11808: ST_TO_ADDR
// vc_control := control_computer ;
11809: LD_ADDR_OWVAR 38
11813: PUSH
11814: LD_INT 3
11816: ST_TO_ADDR
// vc_weapon := us_double_laser ;
11817: LD_ADDR_OWVAR 40
11821: PUSH
11822: LD_INT 10
11824: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
11825: LD_VAR 0 2
11829: PUSH
11830: LD_INT 1
11832: ARRAY
11833: PPUSH
11834: CALL_OW 310
11838: NOT
11839: IFFALSE 11886
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
11841: CALL_OW 45
11845: PPUSH
11846: LD_VAR 0 2
11850: PUSH
11851: LD_INT 1
11853: ARRAY
11854: PPUSH
11855: CALL_OW 250
11859: PPUSH
11860: LD_VAR 0 2
11864: PUSH
11865: LD_INT 1
11867: ARRAY
11868: PPUSH
11869: CALL_OW 251
11873: PPUSH
11874: LD_INT 12
11876: PPUSH
11877: LD_INT 1
11879: PPUSH
11880: CALL_OW 50
11884: GO 11898
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
11886: CALL_OW 45
11890: PPUSH
11891: LD_INT 1
11893: PPUSH
11894: CALL_OW 51
// end ;
11898: GO 11772
11900: POP
11901: POP
// end ;
11902: PPOPN 2
11904: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
11905: LD_EXP 1
11909: PUSH
11910: LD_EXP 47
11914: AND
11915: IFFALSE 12137
11917: GO 11919
11919: DISABLE
11920: LD_INT 0
11922: PPUSH
11923: PPUSH
11924: PPUSH
11925: PPUSH
11926: PPUSH
11927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11928: LD_ADDR_VAR 0 6
11932: PUSH
11933: LD_INT 22
11935: PUSH
11936: LD_OWVAR 2
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PUSH
11945: LD_INT 21
11947: PUSH
11948: LD_INT 1
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PUSH
11955: LD_INT 3
11957: PUSH
11958: LD_INT 23
11960: PUSH
11961: LD_INT 0
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: LIST
11976: PPUSH
11977: CALL_OW 69
11981: ST_TO_ADDR
// if not tmp then
11982: LD_VAR 0 6
11986: NOT
11987: IFFALSE 11991
// exit ;
11989: GO 12137
// s1 := rand ( 1 , 4 ) ;
11991: LD_ADDR_VAR 0 2
11995: PUSH
11996: LD_INT 1
11998: PPUSH
11999: LD_INT 4
12001: PPUSH
12002: CALL_OW 12
12006: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12007: LD_ADDR_VAR 0 4
12011: PUSH
12012: LD_VAR 0 6
12016: PUSH
12017: LD_INT 1
12019: ARRAY
12020: PPUSH
12021: LD_VAR 0 2
12025: PPUSH
12026: CALL_OW 259
12030: ST_TO_ADDR
// if s1 = 1 then
12031: LD_VAR 0 2
12035: PUSH
12036: LD_INT 1
12038: EQUAL
12039: IFFALSE 12059
// s2 := rand ( 2 , 4 ) else
12041: LD_ADDR_VAR 0 3
12045: PUSH
12046: LD_INT 2
12048: PPUSH
12049: LD_INT 4
12051: PPUSH
12052: CALL_OW 12
12056: ST_TO_ADDR
12057: GO 12067
// s2 := 1 ;
12059: LD_ADDR_VAR 0 3
12063: PUSH
12064: LD_INT 1
12066: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12067: LD_ADDR_VAR 0 5
12071: PUSH
12072: LD_VAR 0 6
12076: PUSH
12077: LD_INT 1
12079: ARRAY
12080: PPUSH
12081: LD_VAR 0 3
12085: PPUSH
12086: CALL_OW 259
12090: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12091: LD_VAR 0 6
12095: PUSH
12096: LD_INT 1
12098: ARRAY
12099: PPUSH
12100: LD_VAR 0 2
12104: PPUSH
12105: LD_VAR 0 5
12109: PPUSH
12110: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12114: LD_VAR 0 6
12118: PUSH
12119: LD_INT 1
12121: ARRAY
12122: PPUSH
12123: LD_VAR 0 3
12127: PPUSH
12128: LD_VAR 0 4
12132: PPUSH
12133: CALL_OW 237
// end ;
12137: PPOPN 6
12139: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12140: LD_EXP 1
12144: PUSH
12145: LD_EXP 48
12149: AND
12150: IFFALSE 12229
12152: GO 12154
12154: DISABLE
12155: LD_INT 0
12157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12158: LD_ADDR_VAR 0 1
12162: PUSH
12163: LD_INT 22
12165: PUSH
12166: LD_OWVAR 2
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: PUSH
12175: LD_INT 30
12177: PUSH
12178: LD_INT 3
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: PPUSH
12189: CALL_OW 69
12193: ST_TO_ADDR
// if not tmp then
12194: LD_VAR 0 1
12198: NOT
12199: IFFALSE 12203
// exit ;
12201: GO 12229
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12203: LD_VAR 0 1
12207: PUSH
12208: LD_INT 1
12210: PPUSH
12211: LD_VAR 0 1
12215: PPUSH
12216: CALL_OW 12
12220: ARRAY
12221: PPUSH
12222: LD_INT 1
12224: PPUSH
12225: CALL_OW 234
// end ;
12229: PPOPN 1
12231: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12232: LD_EXP 1
12236: PUSH
12237: LD_EXP 49
12241: AND
12242: IFFALSE 12354
12244: GO 12246
12246: DISABLE
12247: LD_INT 0
12249: PPUSH
12250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12251: LD_ADDR_VAR 0 2
12255: PUSH
12256: LD_INT 22
12258: PUSH
12259: LD_OWVAR 2
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: LD_INT 2
12270: PUSH
12271: LD_INT 30
12273: PUSH
12274: LD_INT 27
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: PUSH
12281: LD_INT 30
12283: PUSH
12284: LD_INT 26
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: LD_INT 30
12293: PUSH
12294: LD_INT 28
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PPUSH
12311: CALL_OW 69
12315: ST_TO_ADDR
// if not tmp then
12316: LD_VAR 0 2
12320: NOT
12321: IFFALSE 12325
// exit ;
12323: GO 12354
// for i in tmp do
12325: LD_ADDR_VAR 0 1
12329: PUSH
12330: LD_VAR 0 2
12334: PUSH
12335: FOR_IN
12336: IFFALSE 12352
// SetLives ( i , 1 ) ;
12338: LD_VAR 0 1
12342: PPUSH
12343: LD_INT 1
12345: PPUSH
12346: CALL_OW 234
12350: GO 12335
12352: POP
12353: POP
// end ;
12354: PPOPN 2
12356: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12357: LD_EXP 1
12361: PUSH
12362: LD_EXP 50
12366: AND
12367: IFFALSE 12654
12369: GO 12371
12371: DISABLE
12372: LD_INT 0
12374: PPUSH
12375: PPUSH
12376: PPUSH
// begin i := rand ( 1 , 7 ) ;
12377: LD_ADDR_VAR 0 1
12381: PUSH
12382: LD_INT 1
12384: PPUSH
12385: LD_INT 7
12387: PPUSH
12388: CALL_OW 12
12392: ST_TO_ADDR
// case i of 1 :
12393: LD_VAR 0 1
12397: PUSH
12398: LD_INT 1
12400: DOUBLE
12401: EQUAL
12402: IFTRUE 12406
12404: GO 12416
12406: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12407: LD_STRING earthquake(getX(game), 0, 32)
12409: PPUSH
12410: CALL_OW 559
12414: GO 12654
12416: LD_INT 2
12418: DOUBLE
12419: EQUAL
12420: IFTRUE 12424
12422: GO 12438
12424: POP
// begin ToLua ( displayStucuk(); ) ;
12425: LD_STRING displayStucuk();
12427: PPUSH
12428: CALL_OW 559
// ResetFog ;
12432: CALL_OW 335
// end ; 3 :
12436: GO 12654
12438: LD_INT 3
12440: DOUBLE
12441: EQUAL
12442: IFTRUE 12446
12444: GO 12550
12446: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12447: LD_ADDR_VAR 0 2
12451: PUSH
12452: LD_INT 22
12454: PUSH
12455: LD_OWVAR 2
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: PUSH
12464: LD_INT 25
12466: PUSH
12467: LD_INT 1
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: PPUSH
12478: CALL_OW 69
12482: ST_TO_ADDR
// if not tmp then
12483: LD_VAR 0 2
12487: NOT
12488: IFFALSE 12492
// exit ;
12490: GO 12654
// un := tmp [ rand ( 1 , tmp ) ] ;
12492: LD_ADDR_VAR 0 3
12496: PUSH
12497: LD_VAR 0 2
12501: PUSH
12502: LD_INT 1
12504: PPUSH
12505: LD_VAR 0 2
12509: PPUSH
12510: CALL_OW 12
12514: ARRAY
12515: ST_TO_ADDR
// if Crawls ( un ) then
12516: LD_VAR 0 3
12520: PPUSH
12521: CALL_OW 318
12525: IFFALSE 12536
// ComWalk ( un ) ;
12527: LD_VAR 0 3
12531: PPUSH
12532: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12536: LD_VAR 0 3
12540: PPUSH
12541: LD_INT 8
12543: PPUSH
12544: CALL_OW 336
// end ; 4 :
12548: GO 12654
12550: LD_INT 4
12552: DOUBLE
12553: EQUAL
12554: IFTRUE 12558
12556: GO 12632
12558: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12559: LD_ADDR_VAR 0 2
12563: PUSH
12564: LD_INT 22
12566: PUSH
12567: LD_OWVAR 2
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: PUSH
12576: LD_INT 30
12578: PUSH
12579: LD_INT 29
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PPUSH
12590: CALL_OW 69
12594: ST_TO_ADDR
// if not tmp then
12595: LD_VAR 0 2
12599: NOT
12600: IFFALSE 12604
// exit ;
12602: GO 12654
// CenterNowOnUnits ( tmp [ 1 ] ) ;
12604: LD_VAR 0 2
12608: PUSH
12609: LD_INT 1
12611: ARRAY
12612: PPUSH
12613: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
12617: LD_VAR 0 2
12621: PUSH
12622: LD_INT 1
12624: ARRAY
12625: PPUSH
12626: CALL_OW 65
// end ; 5 .. 7 :
12630: GO 12654
12632: LD_INT 5
12634: DOUBLE
12635: GREATEREQUAL
12636: IFFALSE 12644
12638: LD_INT 7
12640: DOUBLE
12641: LESSEQUAL
12642: IFTRUE 12646
12644: GO 12653
12646: POP
// StreamSibBomb ; end ;
12647: CALL 8891 0 0
12651: GO 12654
12653: POP
// end ;
12654: PPOPN 3
12656: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12657: LD_EXP 1
12661: PUSH
12662: LD_EXP 51
12666: AND
12667: IFFALSE 12823
12669: GO 12671
12671: DISABLE
12672: LD_INT 0
12674: PPUSH
12675: PPUSH
12676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12677: LD_ADDR_VAR 0 2
12681: PUSH
12682: LD_INT 81
12684: PUSH
12685: LD_OWVAR 2
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: PUSH
12694: LD_INT 2
12696: PUSH
12697: LD_INT 21
12699: PUSH
12700: LD_INT 1
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: PUSH
12707: LD_INT 21
12709: PUSH
12710: LD_INT 2
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: LIST
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: PPUSH
12726: CALL_OW 69
12730: ST_TO_ADDR
// if not tmp then
12731: LD_VAR 0 2
12735: NOT
12736: IFFALSE 12740
// exit ;
12738: GO 12823
// p := 0 ;
12740: LD_ADDR_VAR 0 3
12744: PUSH
12745: LD_INT 0
12747: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12748: LD_INT 35
12750: PPUSH
12751: CALL_OW 67
// p := p + 1 ;
12755: LD_ADDR_VAR 0 3
12759: PUSH
12760: LD_VAR 0 3
12764: PUSH
12765: LD_INT 1
12767: PLUS
12768: ST_TO_ADDR
// for i in tmp do
12769: LD_ADDR_VAR 0 1
12773: PUSH
12774: LD_VAR 0 2
12778: PUSH
12779: FOR_IN
12780: IFFALSE 12811
// if GetLives ( i ) < 1000 then
12782: LD_VAR 0 1
12786: PPUSH
12787: CALL_OW 256
12791: PUSH
12792: LD_INT 1000
12794: LESS
12795: IFFALSE 12809
// SetLives ( i , 1000 ) ;
12797: LD_VAR 0 1
12801: PPUSH
12802: LD_INT 1000
12804: PPUSH
12805: CALL_OW 234
12809: GO 12779
12811: POP
12812: POP
// until p > 20 ;
12813: LD_VAR 0 3
12817: PUSH
12818: LD_INT 20
12820: GREATER
12821: IFFALSE 12748
// end ;
12823: PPOPN 3
12825: END
// every 0 0$1 trigger StreamModeActive and sTime do
12826: LD_EXP 1
12830: PUSH
12831: LD_EXP 52
12835: AND
12836: IFFALSE 12871
12838: GO 12840
12840: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
12841: LD_INT 28
12843: PPUSH
12844: LD_OWVAR 2
12848: PPUSH
12849: LD_INT 2
12851: PPUSH
12852: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
12856: LD_INT 30
12858: PPUSH
12859: LD_OWVAR 2
12863: PPUSH
12864: LD_INT 2
12866: PPUSH
12867: CALL_OW 322
// end ;
12871: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
12872: LD_EXP 1
12876: PUSH
12877: LD_EXP 53
12881: AND
12882: IFFALSE 13003
12884: GO 12886
12886: DISABLE
12887: LD_INT 0
12889: PPUSH
12890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12891: LD_ADDR_VAR 0 2
12895: PUSH
12896: LD_INT 22
12898: PUSH
12899: LD_OWVAR 2
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: PUSH
12908: LD_INT 21
12910: PUSH
12911: LD_INT 1
12913: PUSH
12914: EMPTY
12915: LIST
12916: LIST
12917: PUSH
12918: LD_INT 3
12920: PUSH
12921: LD_INT 23
12923: PUSH
12924: LD_INT 0
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: LIST
12939: PPUSH
12940: CALL_OW 69
12944: ST_TO_ADDR
// if not tmp then
12945: LD_VAR 0 2
12949: NOT
12950: IFFALSE 12954
// exit ;
12952: GO 13003
// for i in tmp do
12954: LD_ADDR_VAR 0 1
12958: PUSH
12959: LD_VAR 0 2
12963: PUSH
12964: FOR_IN
12965: IFFALSE 13001
// begin if Crawls ( i ) then
12967: LD_VAR 0 1
12971: PPUSH
12972: CALL_OW 318
12976: IFFALSE 12987
// ComWalk ( i ) ;
12978: LD_VAR 0 1
12982: PPUSH
12983: CALL_OW 138
// SetClass ( i , 2 ) ;
12987: LD_VAR 0 1
12991: PPUSH
12992: LD_INT 2
12994: PPUSH
12995: CALL_OW 336
// end ;
12999: GO 12964
13001: POP
13002: POP
// end ;
13003: PPOPN 2
13005: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13006: LD_EXP 1
13010: PUSH
13011: LD_EXP 54
13015: AND
13016: IFFALSE 13304
13018: GO 13020
13020: DISABLE
13021: LD_INT 0
13023: PPUSH
13024: PPUSH
13025: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13026: LD_OWVAR 2
13030: PPUSH
13031: LD_INT 9
13033: PPUSH
13034: LD_INT 1
13036: PPUSH
13037: LD_INT 1
13039: PPUSH
13040: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13044: LD_INT 9
13046: PPUSH
13047: LD_OWVAR 2
13051: PPUSH
13052: CALL_OW 343
// uc_side := 9 ;
13056: LD_ADDR_OWVAR 20
13060: PUSH
13061: LD_INT 9
13063: ST_TO_ADDR
// uc_nation := 2 ;
13064: LD_ADDR_OWVAR 21
13068: PUSH
13069: LD_INT 2
13071: ST_TO_ADDR
// hc_name := Dark Warrior ;
13072: LD_ADDR_OWVAR 26
13076: PUSH
13077: LD_STRING Dark Warrior
13079: ST_TO_ADDR
// hc_gallery :=  ;
13080: LD_ADDR_OWVAR 33
13084: PUSH
13085: LD_STRING 
13087: ST_TO_ADDR
// hc_noskilllimit := true ;
13088: LD_ADDR_OWVAR 76
13092: PUSH
13093: LD_INT 1
13095: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13096: LD_ADDR_OWVAR 31
13100: PUSH
13101: LD_INT 30
13103: PUSH
13104: LD_INT 30
13106: PUSH
13107: LD_INT 30
13109: PUSH
13110: LD_INT 30
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: ST_TO_ADDR
// un := CreateHuman ;
13119: LD_ADDR_VAR 0 3
13123: PUSH
13124: CALL_OW 44
13128: ST_TO_ADDR
// hc_noskilllimit := false ;
13129: LD_ADDR_OWVAR 76
13133: PUSH
13134: LD_INT 0
13136: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13137: LD_VAR 0 3
13141: PPUSH
13142: LD_INT 1
13144: PPUSH
13145: CALL_OW 51
// ToLua ( playRanger() ) ;
13149: LD_STRING playRanger()
13151: PPUSH
13152: CALL_OW 559
// p := 0 ;
13156: LD_ADDR_VAR 0 2
13160: PUSH
13161: LD_INT 0
13163: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13164: LD_INT 35
13166: PPUSH
13167: CALL_OW 67
// p := p + 1 ;
13171: LD_ADDR_VAR 0 2
13175: PUSH
13176: LD_VAR 0 2
13180: PUSH
13181: LD_INT 1
13183: PLUS
13184: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13185: LD_VAR 0 3
13189: PPUSH
13190: CALL_OW 256
13194: PUSH
13195: LD_INT 1000
13197: LESS
13198: IFFALSE 13212
// SetLives ( un , 1000 ) ;
13200: LD_VAR 0 3
13204: PPUSH
13205: LD_INT 1000
13207: PPUSH
13208: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13212: LD_VAR 0 3
13216: PPUSH
13217: LD_INT 81
13219: PUSH
13220: LD_OWVAR 2
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: PUSH
13229: LD_INT 91
13231: PUSH
13232: LD_VAR 0 3
13236: PUSH
13237: LD_INT 30
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: LIST
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: PPUSH
13249: CALL_OW 69
13253: PPUSH
13254: LD_VAR 0 3
13258: PPUSH
13259: CALL_OW 74
13263: PPUSH
13264: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
13268: LD_VAR 0 2
13272: PUSH
13273: LD_INT 80
13275: GREATER
13276: PUSH
13277: LD_VAR 0 3
13281: PPUSH
13282: CALL_OW 301
13286: OR
13287: IFFALSE 13164
// if un then
13289: LD_VAR 0 3
13293: IFFALSE 13304
// RemoveUnit ( un ) ;
13295: LD_VAR 0 3
13299: PPUSH
13300: CALL_OW 64
// end ;
13304: PPOPN 3
13306: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
13307: LD_EXP 55
13311: IFFALSE 13427
13313: GO 13315
13315: DISABLE
13316: LD_INT 0
13318: PPUSH
13319: PPUSH
13320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13321: LD_ADDR_VAR 0 2
13325: PUSH
13326: LD_INT 81
13328: PUSH
13329: LD_OWVAR 2
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PUSH
13338: LD_INT 21
13340: PUSH
13341: LD_INT 1
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: PPUSH
13352: CALL_OW 69
13356: ST_TO_ADDR
// ToLua ( playComputer() ) ;
13357: LD_STRING playComputer()
13359: PPUSH
13360: CALL_OW 559
// if not tmp then
13364: LD_VAR 0 2
13368: NOT
13369: IFFALSE 13373
// exit ;
13371: GO 13427
// for i in tmp do
13373: LD_ADDR_VAR 0 1
13377: PUSH
13378: LD_VAR 0 2
13382: PUSH
13383: FOR_IN
13384: IFFALSE 13425
// for j := 1 to 4 do
13386: LD_ADDR_VAR 0 3
13390: PUSH
13391: DOUBLE
13392: LD_INT 1
13394: DEC
13395: ST_TO_ADDR
13396: LD_INT 4
13398: PUSH
13399: FOR_TO
13400: IFFALSE 13421
// SetSkill ( i , j , 10 ) ;
13402: LD_VAR 0 1
13406: PPUSH
13407: LD_VAR 0 3
13411: PPUSH
13412: LD_INT 10
13414: PPUSH
13415: CALL_OW 237
13419: GO 13399
13421: POP
13422: POP
13423: GO 13383
13425: POP
13426: POP
// end ;
13427: PPOPN 3
13429: END
// every 0 0$1 trigger s30 do var i , tmp ;
13430: LD_EXP 56
13434: IFFALSE 13503
13436: GO 13438
13438: DISABLE
13439: LD_INT 0
13441: PPUSH
13442: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13443: LD_ADDR_VAR 0 2
13447: PUSH
13448: LD_INT 22
13450: PUSH
13451: LD_OWVAR 2
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PPUSH
13460: CALL_OW 69
13464: ST_TO_ADDR
// if not tmp then
13465: LD_VAR 0 2
13469: NOT
13470: IFFALSE 13474
// exit ;
13472: GO 13503
// for i in tmp do
13474: LD_ADDR_VAR 0 1
13478: PUSH
13479: LD_VAR 0 2
13483: PUSH
13484: FOR_IN
13485: IFFALSE 13501
// SetLives ( i , 300 ) ;
13487: LD_VAR 0 1
13491: PPUSH
13492: LD_INT 300
13494: PPUSH
13495: CALL_OW 234
13499: GO 13484
13501: POP
13502: POP
// end ;
13503: PPOPN 2
13505: END
// every 0 0$1 trigger s60 do var i , tmp ;
13506: LD_EXP 57
13510: IFFALSE 13579
13512: GO 13514
13514: DISABLE
13515: LD_INT 0
13517: PPUSH
13518: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13519: LD_ADDR_VAR 0 2
13523: PUSH
13524: LD_INT 22
13526: PUSH
13527: LD_OWVAR 2
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: PPUSH
13536: CALL_OW 69
13540: ST_TO_ADDR
// if not tmp then
13541: LD_VAR 0 2
13545: NOT
13546: IFFALSE 13550
// exit ;
13548: GO 13579
// for i in tmp do
13550: LD_ADDR_VAR 0 1
13554: PUSH
13555: LD_VAR 0 2
13559: PUSH
13560: FOR_IN
13561: IFFALSE 13577
// SetLives ( i , 600 ) ;
13563: LD_VAR 0 1
13567: PPUSH
13568: LD_INT 600
13570: PPUSH
13571: CALL_OW 234
13575: GO 13560
13577: POP
13578: POP
// end ;
13579: PPOPN 2
13581: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13582: LD_INT 0
13584: PPUSH
// case cmd of 301 :
13585: LD_VAR 0 1
13589: PUSH
13590: LD_INT 301
13592: DOUBLE
13593: EQUAL
13594: IFTRUE 13598
13596: GO 13630
13598: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
13599: LD_VAR 0 6
13603: PPUSH
13604: LD_VAR 0 7
13608: PPUSH
13609: LD_VAR 0 8
13613: PPUSH
13614: LD_VAR 0 4
13618: PPUSH
13619: LD_VAR 0 5
13623: PPUSH
13624: CALL 14831 0 5
13628: GO 13751
13630: LD_INT 302
13632: DOUBLE
13633: EQUAL
13634: IFTRUE 13638
13636: GO 13675
13638: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
13639: LD_VAR 0 6
13643: PPUSH
13644: LD_VAR 0 7
13648: PPUSH
13649: LD_VAR 0 8
13653: PPUSH
13654: LD_VAR 0 9
13658: PPUSH
13659: LD_VAR 0 4
13663: PPUSH
13664: LD_VAR 0 5
13668: PPUSH
13669: CALL 14922 0 6
13673: GO 13751
13675: LD_INT 303
13677: DOUBLE
13678: EQUAL
13679: IFTRUE 13683
13681: GO 13720
13683: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
13684: LD_VAR 0 6
13688: PPUSH
13689: LD_VAR 0 7
13693: PPUSH
13694: LD_VAR 0 8
13698: PPUSH
13699: LD_VAR 0 9
13703: PPUSH
13704: LD_VAR 0 4
13708: PPUSH
13709: LD_VAR 0 5
13713: PPUSH
13714: CALL 13756 0 6
13718: GO 13751
13720: LD_INT 304
13722: DOUBLE
13723: EQUAL
13724: IFTRUE 13728
13726: GO 13750
13728: POP
// hHackTeleport ( unit , x , y ) ; end ;
13729: LD_VAR 0 2
13733: PPUSH
13734: LD_VAR 0 4
13738: PPUSH
13739: LD_VAR 0 5
13743: PPUSH
13744: CALL 15515 0 3
13748: GO 13751
13750: POP
// end ;
13751: LD_VAR 0 12
13755: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
13756: LD_INT 0
13758: PPUSH
13759: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
13760: LD_VAR 0 1
13764: PUSH
13765: LD_INT 1
13767: LESS
13768: PUSH
13769: LD_VAR 0 1
13773: PUSH
13774: LD_INT 3
13776: GREATER
13777: OR
13778: PUSH
13779: LD_VAR 0 5
13783: PPUSH
13784: LD_VAR 0 6
13788: PPUSH
13789: CALL_OW 428
13793: OR
13794: IFFALSE 13798
// exit ;
13796: GO 14518
// uc_side := your_side ;
13798: LD_ADDR_OWVAR 20
13802: PUSH
13803: LD_OWVAR 2
13807: ST_TO_ADDR
// uc_nation := nation ;
13808: LD_ADDR_OWVAR 21
13812: PUSH
13813: LD_VAR 0 1
13817: ST_TO_ADDR
// bc_level = 1 ;
13818: LD_ADDR_OWVAR 43
13822: PUSH
13823: LD_INT 1
13825: ST_TO_ADDR
// case btype of 1 :
13826: LD_VAR 0 2
13830: PUSH
13831: LD_INT 1
13833: DOUBLE
13834: EQUAL
13835: IFTRUE 13839
13837: GO 13850
13839: POP
// bc_type := b_depot ; 2 :
13840: LD_ADDR_OWVAR 42
13844: PUSH
13845: LD_INT 0
13847: ST_TO_ADDR
13848: GO 14462
13850: LD_INT 2
13852: DOUBLE
13853: EQUAL
13854: IFTRUE 13858
13856: GO 13869
13858: POP
// bc_type := b_warehouse ; 3 :
13859: LD_ADDR_OWVAR 42
13863: PUSH
13864: LD_INT 1
13866: ST_TO_ADDR
13867: GO 14462
13869: LD_INT 3
13871: DOUBLE
13872: EQUAL
13873: IFTRUE 13877
13875: GO 13888
13877: POP
// bc_type := b_lab ; 4 .. 9 :
13878: LD_ADDR_OWVAR 42
13882: PUSH
13883: LD_INT 6
13885: ST_TO_ADDR
13886: GO 14462
13888: LD_INT 4
13890: DOUBLE
13891: GREATEREQUAL
13892: IFFALSE 13900
13894: LD_INT 9
13896: DOUBLE
13897: LESSEQUAL
13898: IFTRUE 13902
13900: GO 13954
13902: POP
// begin bc_type := b_lab_half ;
13903: LD_ADDR_OWVAR 42
13907: PUSH
13908: LD_INT 7
13910: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
13911: LD_ADDR_OWVAR 44
13915: PUSH
13916: LD_INT 10
13918: PUSH
13919: LD_INT 11
13921: PUSH
13922: LD_INT 12
13924: PUSH
13925: LD_INT 15
13927: PUSH
13928: LD_INT 14
13930: PUSH
13931: LD_INT 13
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: PUSH
13942: LD_VAR 0 2
13946: PUSH
13947: LD_INT 3
13949: MINUS
13950: ARRAY
13951: ST_TO_ADDR
// end ; 10 .. 13 :
13952: GO 14462
13954: LD_INT 10
13956: DOUBLE
13957: GREATEREQUAL
13958: IFFALSE 13966
13960: LD_INT 13
13962: DOUBLE
13963: LESSEQUAL
13964: IFTRUE 13968
13966: GO 14045
13968: POP
// begin bc_type := b_lab_full ;
13969: LD_ADDR_OWVAR 42
13973: PUSH
13974: LD_INT 8
13976: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
13977: LD_ADDR_OWVAR 44
13981: PUSH
13982: LD_INT 10
13984: PUSH
13985: LD_INT 12
13987: PUSH
13988: LD_INT 14
13990: PUSH
13991: LD_INT 13
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: PUSH
14000: LD_VAR 0 2
14004: PUSH
14005: LD_INT 9
14007: MINUS
14008: ARRAY
14009: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14010: LD_ADDR_OWVAR 45
14014: PUSH
14015: LD_INT 11
14017: PUSH
14018: LD_INT 15
14020: PUSH
14021: LD_INT 12
14023: PUSH
14024: LD_INT 15
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: PUSH
14033: LD_VAR 0 2
14037: PUSH
14038: LD_INT 9
14040: MINUS
14041: ARRAY
14042: ST_TO_ADDR
// end ; 14 :
14043: GO 14462
14045: LD_INT 14
14047: DOUBLE
14048: EQUAL
14049: IFTRUE 14053
14051: GO 14064
14053: POP
// bc_type := b_workshop ; 15 :
14054: LD_ADDR_OWVAR 42
14058: PUSH
14059: LD_INT 2
14061: ST_TO_ADDR
14062: GO 14462
14064: LD_INT 15
14066: DOUBLE
14067: EQUAL
14068: IFTRUE 14072
14070: GO 14083
14072: POP
// bc_type := b_factory ; 16 :
14073: LD_ADDR_OWVAR 42
14077: PUSH
14078: LD_INT 3
14080: ST_TO_ADDR
14081: GO 14462
14083: LD_INT 16
14085: DOUBLE
14086: EQUAL
14087: IFTRUE 14091
14089: GO 14102
14091: POP
// bc_type := b_ext_gun ; 17 :
14092: LD_ADDR_OWVAR 42
14096: PUSH
14097: LD_INT 17
14099: ST_TO_ADDR
14100: GO 14462
14102: LD_INT 17
14104: DOUBLE
14105: EQUAL
14106: IFTRUE 14110
14108: GO 14138
14110: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14111: LD_ADDR_OWVAR 42
14115: PUSH
14116: LD_INT 19
14118: PUSH
14119: LD_INT 23
14121: PUSH
14122: LD_INT 19
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: LIST
14129: PUSH
14130: LD_VAR 0 1
14134: ARRAY
14135: ST_TO_ADDR
14136: GO 14462
14138: LD_INT 18
14140: DOUBLE
14141: EQUAL
14142: IFTRUE 14146
14144: GO 14157
14146: POP
// bc_type := b_ext_radar ; 19 :
14147: LD_ADDR_OWVAR 42
14151: PUSH
14152: LD_INT 20
14154: ST_TO_ADDR
14155: GO 14462
14157: LD_INT 19
14159: DOUBLE
14160: EQUAL
14161: IFTRUE 14165
14163: GO 14176
14165: POP
// bc_type := b_ext_radio ; 20 :
14166: LD_ADDR_OWVAR 42
14170: PUSH
14171: LD_INT 22
14173: ST_TO_ADDR
14174: GO 14462
14176: LD_INT 20
14178: DOUBLE
14179: EQUAL
14180: IFTRUE 14184
14182: GO 14195
14184: POP
// bc_type := b_ext_siberium ; 21 :
14185: LD_ADDR_OWVAR 42
14189: PUSH
14190: LD_INT 21
14192: ST_TO_ADDR
14193: GO 14462
14195: LD_INT 21
14197: DOUBLE
14198: EQUAL
14199: IFTRUE 14203
14201: GO 14214
14203: POP
// bc_type := b_ext_computer ; 22 :
14204: LD_ADDR_OWVAR 42
14208: PUSH
14209: LD_INT 24
14211: ST_TO_ADDR
14212: GO 14462
14214: LD_INT 22
14216: DOUBLE
14217: EQUAL
14218: IFTRUE 14222
14220: GO 14233
14222: POP
// bc_type := b_ext_track ; 23 :
14223: LD_ADDR_OWVAR 42
14227: PUSH
14228: LD_INT 16
14230: ST_TO_ADDR
14231: GO 14462
14233: LD_INT 23
14235: DOUBLE
14236: EQUAL
14237: IFTRUE 14241
14239: GO 14252
14241: POP
// bc_type := b_ext_laser ; 24 :
14242: LD_ADDR_OWVAR 42
14246: PUSH
14247: LD_INT 25
14249: ST_TO_ADDR
14250: GO 14462
14252: LD_INT 24
14254: DOUBLE
14255: EQUAL
14256: IFTRUE 14260
14258: GO 14271
14260: POP
// bc_type := b_control_tower ; 25 :
14261: LD_ADDR_OWVAR 42
14265: PUSH
14266: LD_INT 36
14268: ST_TO_ADDR
14269: GO 14462
14271: LD_INT 25
14273: DOUBLE
14274: EQUAL
14275: IFTRUE 14279
14277: GO 14290
14279: POP
// bc_type := b_breastwork ; 26 :
14280: LD_ADDR_OWVAR 42
14284: PUSH
14285: LD_INT 31
14287: ST_TO_ADDR
14288: GO 14462
14290: LD_INT 26
14292: DOUBLE
14293: EQUAL
14294: IFTRUE 14298
14296: GO 14309
14298: POP
// bc_type := b_bunker ; 27 :
14299: LD_ADDR_OWVAR 42
14303: PUSH
14304: LD_INT 32
14306: ST_TO_ADDR
14307: GO 14462
14309: LD_INT 27
14311: DOUBLE
14312: EQUAL
14313: IFTRUE 14317
14315: GO 14328
14317: POP
// bc_type := b_turret ; 28 :
14318: LD_ADDR_OWVAR 42
14322: PUSH
14323: LD_INT 33
14325: ST_TO_ADDR
14326: GO 14462
14328: LD_INT 28
14330: DOUBLE
14331: EQUAL
14332: IFTRUE 14336
14334: GO 14347
14336: POP
// bc_type := b_armoury ; 29 :
14337: LD_ADDR_OWVAR 42
14341: PUSH
14342: LD_INT 4
14344: ST_TO_ADDR
14345: GO 14462
14347: LD_INT 29
14349: DOUBLE
14350: EQUAL
14351: IFTRUE 14355
14353: GO 14366
14355: POP
// bc_type := b_barracks ; 30 :
14356: LD_ADDR_OWVAR 42
14360: PUSH
14361: LD_INT 5
14363: ST_TO_ADDR
14364: GO 14462
14366: LD_INT 30
14368: DOUBLE
14369: EQUAL
14370: IFTRUE 14374
14372: GO 14385
14374: POP
// bc_type := b_solar_power ; 31 :
14375: LD_ADDR_OWVAR 42
14379: PUSH
14380: LD_INT 27
14382: ST_TO_ADDR
14383: GO 14462
14385: LD_INT 31
14387: DOUBLE
14388: EQUAL
14389: IFTRUE 14393
14391: GO 14404
14393: POP
// bc_type := b_oil_power ; 32 :
14394: LD_ADDR_OWVAR 42
14398: PUSH
14399: LD_INT 26
14401: ST_TO_ADDR
14402: GO 14462
14404: LD_INT 32
14406: DOUBLE
14407: EQUAL
14408: IFTRUE 14412
14410: GO 14423
14412: POP
// bc_type := b_siberite_power ; 33 :
14413: LD_ADDR_OWVAR 42
14417: PUSH
14418: LD_INT 28
14420: ST_TO_ADDR
14421: GO 14462
14423: LD_INT 33
14425: DOUBLE
14426: EQUAL
14427: IFTRUE 14431
14429: GO 14442
14431: POP
// bc_type := b_oil_mine ; 34 :
14432: LD_ADDR_OWVAR 42
14436: PUSH
14437: LD_INT 29
14439: ST_TO_ADDR
14440: GO 14462
14442: LD_INT 34
14444: DOUBLE
14445: EQUAL
14446: IFTRUE 14450
14448: GO 14461
14450: POP
// bc_type := b_siberite_mine ; end ;
14451: LD_ADDR_OWVAR 42
14455: PUSH
14456: LD_INT 30
14458: ST_TO_ADDR
14459: GO 14462
14461: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
14462: LD_ADDR_VAR 0 8
14466: PUSH
14467: LD_VAR 0 5
14471: PPUSH
14472: LD_VAR 0 6
14476: PPUSH
14477: LD_VAR 0 3
14481: PPUSH
14482: CALL_OW 47
14486: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
14487: LD_OWVAR 42
14491: PUSH
14492: LD_INT 32
14494: PUSH
14495: LD_INT 33
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: IN
14502: IFFALSE 14518
// PlaceWeaponTurret ( b , weapon ) ;
14504: LD_VAR 0 8
14508: PPUSH
14509: LD_VAR 0 4
14513: PPUSH
14514: CALL_OW 431
// end ;
14518: LD_VAR 0 7
14522: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
14523: LD_INT 0
14525: PPUSH
14526: PPUSH
14527: PPUSH
14528: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14529: LD_ADDR_VAR 0 4
14533: PUSH
14534: LD_INT 22
14536: PUSH
14537: LD_OWVAR 2
14541: PUSH
14542: EMPTY
14543: LIST
14544: LIST
14545: PUSH
14546: LD_INT 2
14548: PUSH
14549: LD_INT 30
14551: PUSH
14552: LD_INT 0
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: PUSH
14559: LD_INT 30
14561: PUSH
14562: LD_INT 1
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: LIST
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: PPUSH
14578: CALL_OW 69
14582: ST_TO_ADDR
// if not tmp then
14583: LD_VAR 0 4
14587: NOT
14588: IFFALSE 14592
// exit ;
14590: GO 14651
// for i in tmp do
14592: LD_ADDR_VAR 0 2
14596: PUSH
14597: LD_VAR 0 4
14601: PUSH
14602: FOR_IN
14603: IFFALSE 14649
// for j = 1 to 3 do
14605: LD_ADDR_VAR 0 3
14609: PUSH
14610: DOUBLE
14611: LD_INT 1
14613: DEC
14614: ST_TO_ADDR
14615: LD_INT 3
14617: PUSH
14618: FOR_TO
14619: IFFALSE 14645
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14621: LD_VAR 0 2
14625: PPUSH
14626: CALL_OW 274
14630: PPUSH
14631: LD_VAR 0 3
14635: PPUSH
14636: LD_INT 99999
14638: PPUSH
14639: CALL_OW 277
14643: GO 14618
14645: POP
14646: POP
14647: GO 14602
14649: POP
14650: POP
// end ;
14651: LD_VAR 0 1
14655: RET
// export function hHackSetLevel10 ; var i , j ; begin
14656: LD_INT 0
14658: PPUSH
14659: PPUSH
14660: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14661: LD_ADDR_VAR 0 2
14665: PUSH
14666: LD_INT 21
14668: PUSH
14669: LD_INT 1
14671: PUSH
14672: EMPTY
14673: LIST
14674: LIST
14675: PPUSH
14676: CALL_OW 69
14680: PUSH
14681: FOR_IN
14682: IFFALSE 14734
// if IsSelected ( i ) then
14684: LD_VAR 0 2
14688: PPUSH
14689: CALL_OW 306
14693: IFFALSE 14732
// begin for j := 1 to 4 do
14695: LD_ADDR_VAR 0 3
14699: PUSH
14700: DOUBLE
14701: LD_INT 1
14703: DEC
14704: ST_TO_ADDR
14705: LD_INT 4
14707: PUSH
14708: FOR_TO
14709: IFFALSE 14730
// SetSkill ( i , j , 10 ) ;
14711: LD_VAR 0 2
14715: PPUSH
14716: LD_VAR 0 3
14720: PPUSH
14721: LD_INT 10
14723: PPUSH
14724: CALL_OW 237
14728: GO 14708
14730: POP
14731: POP
// end ;
14732: GO 14681
14734: POP
14735: POP
// end ;
14736: LD_VAR 0 1
14740: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
14741: LD_INT 0
14743: PPUSH
14744: PPUSH
14745: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
14746: LD_ADDR_VAR 0 2
14750: PUSH
14751: LD_INT 22
14753: PUSH
14754: LD_OWVAR 2
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PUSH
14763: LD_INT 21
14765: PUSH
14766: LD_INT 1
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: PPUSH
14777: CALL_OW 69
14781: PUSH
14782: FOR_IN
14783: IFFALSE 14824
// begin for j := 1 to 4 do
14785: LD_ADDR_VAR 0 3
14789: PUSH
14790: DOUBLE
14791: LD_INT 1
14793: DEC
14794: ST_TO_ADDR
14795: LD_INT 4
14797: PUSH
14798: FOR_TO
14799: IFFALSE 14820
// SetSkill ( i , j , 10 ) ;
14801: LD_VAR 0 2
14805: PPUSH
14806: LD_VAR 0 3
14810: PPUSH
14811: LD_INT 10
14813: PPUSH
14814: CALL_OW 237
14818: GO 14798
14820: POP
14821: POP
// end ;
14822: GO 14782
14824: POP
14825: POP
// end ;
14826: LD_VAR 0 1
14830: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
14831: LD_INT 0
14833: PPUSH
// uc_side := your_side ;
14834: LD_ADDR_OWVAR 20
14838: PUSH
14839: LD_OWVAR 2
14843: ST_TO_ADDR
// uc_nation := nation ;
14844: LD_ADDR_OWVAR 21
14848: PUSH
14849: LD_VAR 0 1
14853: ST_TO_ADDR
// InitHc ;
14854: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
14858: LD_INT 0
14860: PPUSH
14861: LD_VAR 0 2
14865: PPUSH
14866: LD_VAR 0 3
14870: PPUSH
14871: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
14875: LD_VAR 0 4
14879: PPUSH
14880: LD_VAR 0 5
14884: PPUSH
14885: CALL_OW 428
14889: PUSH
14890: LD_INT 0
14892: EQUAL
14893: IFFALSE 14917
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
14895: CALL_OW 44
14899: PPUSH
14900: LD_VAR 0 4
14904: PPUSH
14905: LD_VAR 0 5
14909: PPUSH
14910: LD_INT 1
14912: PPUSH
14913: CALL_OW 48
// end ;
14917: LD_VAR 0 6
14921: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
14922: LD_INT 0
14924: PPUSH
14925: PPUSH
// uc_side := your_side ;
14926: LD_ADDR_OWVAR 20
14930: PUSH
14931: LD_OWVAR 2
14935: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
14936: LD_VAR 0 1
14940: PUSH
14941: LD_INT 1
14943: PUSH
14944: LD_INT 2
14946: PUSH
14947: LD_INT 3
14949: PUSH
14950: LD_INT 4
14952: PUSH
14953: LD_INT 5
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: IN
14963: IFFALSE 14975
// uc_nation := nation_american else
14965: LD_ADDR_OWVAR 21
14969: PUSH
14970: LD_INT 1
14972: ST_TO_ADDR
14973: GO 15018
// if chassis in [ 11 , 12 , 13 , 14 ] then
14975: LD_VAR 0 1
14979: PUSH
14980: LD_INT 11
14982: PUSH
14983: LD_INT 12
14985: PUSH
14986: LD_INT 13
14988: PUSH
14989: LD_INT 14
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: IN
14998: IFFALSE 15010
// uc_nation := nation_arabian else
15000: LD_ADDR_OWVAR 21
15004: PUSH
15005: LD_INT 2
15007: ST_TO_ADDR
15008: GO 15018
// uc_nation := nation_russian ;
15010: LD_ADDR_OWVAR 21
15014: PUSH
15015: LD_INT 3
15017: ST_TO_ADDR
// vc_chassis := chassis ;
15018: LD_ADDR_OWVAR 37
15022: PUSH
15023: LD_VAR 0 1
15027: ST_TO_ADDR
// vc_engine := engine ;
15028: LD_ADDR_OWVAR 39
15032: PUSH
15033: LD_VAR 0 2
15037: ST_TO_ADDR
// vc_control := control ;
15038: LD_ADDR_OWVAR 38
15042: PUSH
15043: LD_VAR 0 3
15047: ST_TO_ADDR
// vc_weapon := weapon ;
15048: LD_ADDR_OWVAR 40
15052: PUSH
15053: LD_VAR 0 4
15057: ST_TO_ADDR
// un := CreateVehicle ;
15058: LD_ADDR_VAR 0 8
15062: PUSH
15063: CALL_OW 45
15067: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15068: LD_VAR 0 8
15072: PPUSH
15073: LD_INT 0
15075: PPUSH
15076: LD_INT 5
15078: PPUSH
15079: CALL_OW 12
15083: PPUSH
15084: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15088: LD_VAR 0 8
15092: PPUSH
15093: LD_VAR 0 5
15097: PPUSH
15098: LD_VAR 0 6
15102: PPUSH
15103: LD_INT 1
15105: PPUSH
15106: CALL_OW 48
// end ;
15110: LD_VAR 0 7
15114: RET
// export hInvincible ; every 1 do
15115: GO 15117
15117: DISABLE
// hInvincible := [ ] ;
15118: LD_ADDR_EXP 58
15122: PUSH
15123: EMPTY
15124: ST_TO_ADDR
15125: END
// every 10 do var i ;
15126: GO 15128
15128: DISABLE
15129: LD_INT 0
15131: PPUSH
// begin enable ;
15132: ENABLE
// if not hInvincible then
15133: LD_EXP 58
15137: NOT
15138: IFFALSE 15142
// exit ;
15140: GO 15186
// for i in hInvincible do
15142: LD_ADDR_VAR 0 1
15146: PUSH
15147: LD_EXP 58
15151: PUSH
15152: FOR_IN
15153: IFFALSE 15184
// if GetLives ( i ) < 1000 then
15155: LD_VAR 0 1
15159: PPUSH
15160: CALL_OW 256
15164: PUSH
15165: LD_INT 1000
15167: LESS
15168: IFFALSE 15182
// SetLives ( i , 1000 ) ;
15170: LD_VAR 0 1
15174: PPUSH
15175: LD_INT 1000
15177: PPUSH
15178: CALL_OW 234
15182: GO 15152
15184: POP
15185: POP
// end ;
15186: PPOPN 1
15188: END
// export function hHackInvincible ; var i ; begin
15189: LD_INT 0
15191: PPUSH
15192: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15193: LD_ADDR_VAR 0 2
15197: PUSH
15198: LD_INT 2
15200: PUSH
15201: LD_INT 21
15203: PUSH
15204: LD_INT 1
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PUSH
15211: LD_INT 21
15213: PUSH
15214: LD_INT 2
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: LIST
15225: PPUSH
15226: CALL_OW 69
15230: PUSH
15231: FOR_IN
15232: IFFALSE 15293
// if IsSelected ( i ) then
15234: LD_VAR 0 2
15238: PPUSH
15239: CALL_OW 306
15243: IFFALSE 15291
// begin if i in hInvincible then
15245: LD_VAR 0 2
15249: PUSH
15250: LD_EXP 58
15254: IN
15255: IFFALSE 15275
// hInvincible := hInvincible diff i else
15257: LD_ADDR_EXP 58
15261: PUSH
15262: LD_EXP 58
15266: PUSH
15267: LD_VAR 0 2
15271: DIFF
15272: ST_TO_ADDR
15273: GO 15291
// hInvincible := hInvincible union i ;
15275: LD_ADDR_EXP 58
15279: PUSH
15280: LD_EXP 58
15284: PUSH
15285: LD_VAR 0 2
15289: UNION
15290: ST_TO_ADDR
// end ;
15291: GO 15231
15293: POP
15294: POP
// end ;
15295: LD_VAR 0 1
15299: RET
// export function hHackInvisible ; var i , j ; begin
15300: LD_INT 0
15302: PPUSH
15303: PPUSH
15304: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15305: LD_ADDR_VAR 0 2
15309: PUSH
15310: LD_INT 21
15312: PUSH
15313: LD_INT 1
15315: PUSH
15316: EMPTY
15317: LIST
15318: LIST
15319: PPUSH
15320: CALL_OW 69
15324: PUSH
15325: FOR_IN
15326: IFFALSE 15350
// if IsSelected ( i ) then
15328: LD_VAR 0 2
15332: PPUSH
15333: CALL_OW 306
15337: IFFALSE 15348
// ComForceInvisible ( i ) ;
15339: LD_VAR 0 2
15343: PPUSH
15344: CALL_OW 496
15348: GO 15325
15350: POP
15351: POP
// end ;
15352: LD_VAR 0 1
15356: RET
// export function hHackChangeYourSide ; begin
15357: LD_INT 0
15359: PPUSH
// if your_side = 8 then
15360: LD_OWVAR 2
15364: PUSH
15365: LD_INT 8
15367: EQUAL
15368: IFFALSE 15380
// your_side := 0 else
15370: LD_ADDR_OWVAR 2
15374: PUSH
15375: LD_INT 0
15377: ST_TO_ADDR
15378: GO 15394
// your_side := your_side + 1 ;
15380: LD_ADDR_OWVAR 2
15384: PUSH
15385: LD_OWVAR 2
15389: PUSH
15390: LD_INT 1
15392: PLUS
15393: ST_TO_ADDR
// end ;
15394: LD_VAR 0 1
15398: RET
// export function hHackChangeUnitSide ; var i , j ; begin
15399: LD_INT 0
15401: PPUSH
15402: PPUSH
15403: PPUSH
// for i in all_units do
15404: LD_ADDR_VAR 0 2
15408: PUSH
15409: LD_OWVAR 3
15413: PUSH
15414: FOR_IN
15415: IFFALSE 15493
// if IsSelected ( i ) then
15417: LD_VAR 0 2
15421: PPUSH
15422: CALL_OW 306
15426: IFFALSE 15491
// begin j := GetSide ( i ) ;
15428: LD_ADDR_VAR 0 3
15432: PUSH
15433: LD_VAR 0 2
15437: PPUSH
15438: CALL_OW 255
15442: ST_TO_ADDR
// if j = 8 then
15443: LD_VAR 0 3
15447: PUSH
15448: LD_INT 8
15450: EQUAL
15451: IFFALSE 15463
// j := 0 else
15453: LD_ADDR_VAR 0 3
15457: PUSH
15458: LD_INT 0
15460: ST_TO_ADDR
15461: GO 15477
// j := j + 1 ;
15463: LD_ADDR_VAR 0 3
15467: PUSH
15468: LD_VAR 0 3
15472: PUSH
15473: LD_INT 1
15475: PLUS
15476: ST_TO_ADDR
// SetSide ( i , j ) ;
15477: LD_VAR 0 2
15481: PPUSH
15482: LD_VAR 0 3
15486: PPUSH
15487: CALL_OW 235
// end ;
15491: GO 15414
15493: POP
15494: POP
// end ;
15495: LD_VAR 0 1
15499: RET
// export function hHackFog ; begin
15500: LD_INT 0
15502: PPUSH
// FogOff ( true ) ;
15503: LD_INT 1
15505: PPUSH
15506: CALL_OW 344
// end ;
15510: LD_VAR 0 1
15514: RET
// export function hHackTeleport ( unit , x , y ) ; begin
15515: LD_INT 0
15517: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
15518: LD_VAR 0 1
15522: PPUSH
15523: LD_VAR 0 2
15527: PPUSH
15528: LD_VAR 0 3
15532: PPUSH
15533: LD_INT 1
15535: PPUSH
15536: LD_INT 1
15538: PPUSH
15539: CALL_OW 483
// CenterOnXY ( x , y ) ;
15543: LD_VAR 0 2
15547: PPUSH
15548: LD_VAR 0 3
15552: PPUSH
15553: CALL_OW 84
// end ; end_of_file
15557: LD_VAR 0 4
15561: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
15562: LD_INT 0
15564: PPUSH
15565: PPUSH
15566: PPUSH
15567: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15568: LD_VAR 0 1
15572: PPUSH
15573: CALL_OW 264
15577: PUSH
15578: LD_EXP 74
15582: EQUAL
15583: IFFALSE 15655
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15585: LD_INT 68
15587: PPUSH
15588: LD_VAR 0 1
15592: PPUSH
15593: CALL_OW 255
15597: PPUSH
15598: CALL_OW 321
15602: PUSH
15603: LD_INT 2
15605: EQUAL
15606: IFFALSE 15618
// eff := 70 else
15608: LD_ADDR_VAR 0 4
15612: PUSH
15613: LD_INT 70
15615: ST_TO_ADDR
15616: GO 15626
// eff := 30 ;
15618: LD_ADDR_VAR 0 4
15622: PUSH
15623: LD_INT 30
15625: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15626: LD_VAR 0 1
15630: PPUSH
15631: CALL_OW 250
15635: PPUSH
15636: LD_VAR 0 1
15640: PPUSH
15641: CALL_OW 251
15645: PPUSH
15646: LD_VAR 0 4
15650: PPUSH
15651: CALL_OW 495
// end ; end ;
15655: LD_VAR 0 2
15659: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15660: LD_INT 0
15662: PPUSH
// end ;
15663: LD_VAR 0 4
15667: RET
// export function SOS_Command ( cmd ) ; begin
15668: LD_INT 0
15670: PPUSH
// end ;
15671: LD_VAR 0 2
15675: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
15676: LD_INT 0
15678: PPUSH
// end ;
15679: LD_VAR 0 6
15683: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
15684: LD_INT 0
15686: PPUSH
15687: PPUSH
// if not vehicle or not factory then
15688: LD_VAR 0 1
15692: NOT
15693: PUSH
15694: LD_VAR 0 2
15698: NOT
15699: OR
15700: IFFALSE 15704
// exit ;
15702: GO 15935
// if factoryWaypoints >= factory then
15704: LD_EXP 59
15708: PUSH
15709: LD_VAR 0 2
15713: GREATEREQUAL
15714: IFFALSE 15935
// if factoryWaypoints [ factory ] then
15716: LD_EXP 59
15720: PUSH
15721: LD_VAR 0 2
15725: ARRAY
15726: IFFALSE 15935
// begin if GetControl ( vehicle ) = control_manual then
15728: LD_VAR 0 1
15732: PPUSH
15733: CALL_OW 263
15737: PUSH
15738: LD_INT 1
15740: EQUAL
15741: IFFALSE 15822
// begin driver := IsDrivenBy ( vehicle ) ;
15743: LD_ADDR_VAR 0 4
15747: PUSH
15748: LD_VAR 0 1
15752: PPUSH
15753: CALL_OW 311
15757: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
15758: LD_VAR 0 4
15762: PPUSH
15763: LD_EXP 59
15767: PUSH
15768: LD_VAR 0 2
15772: ARRAY
15773: PUSH
15774: LD_INT 3
15776: ARRAY
15777: PPUSH
15778: LD_EXP 59
15782: PUSH
15783: LD_VAR 0 2
15787: ARRAY
15788: PUSH
15789: LD_INT 4
15791: ARRAY
15792: PPUSH
15793: CALL_OW 171
// AddComExitVehicle ( driver ) ;
15797: LD_VAR 0 4
15801: PPUSH
15802: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
15806: LD_VAR 0 4
15810: PPUSH
15811: LD_VAR 0 2
15815: PPUSH
15816: CALL_OW 180
// end else
15820: GO 15935
// if GetControl ( vehicle ) = control_remote then
15822: LD_VAR 0 1
15826: PPUSH
15827: CALL_OW 263
15831: PUSH
15832: LD_INT 2
15834: EQUAL
15835: IFFALSE 15896
// begin wait ( 0 0$2 ) ;
15837: LD_INT 70
15839: PPUSH
15840: CALL_OW 67
// if Connect ( vehicle ) then
15844: LD_VAR 0 1
15848: PPUSH
15849: CALL 28710 0 1
15853: IFFALSE 15894
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
15855: LD_VAR 0 1
15859: PPUSH
15860: LD_EXP 59
15864: PUSH
15865: LD_VAR 0 2
15869: ARRAY
15870: PUSH
15871: LD_INT 3
15873: ARRAY
15874: PPUSH
15875: LD_EXP 59
15879: PUSH
15880: LD_VAR 0 2
15884: ARRAY
15885: PUSH
15886: LD_INT 4
15888: ARRAY
15889: PPUSH
15890: CALL_OW 171
// end else
15894: GO 15935
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
15896: LD_VAR 0 1
15900: PPUSH
15901: LD_EXP 59
15905: PUSH
15906: LD_VAR 0 2
15910: ARRAY
15911: PUSH
15912: LD_INT 3
15914: ARRAY
15915: PPUSH
15916: LD_EXP 59
15920: PUSH
15921: LD_VAR 0 2
15925: ARRAY
15926: PUSH
15927: LD_INT 4
15929: ARRAY
15930: PPUSH
15931: CALL_OW 171
// end ; end ;
15935: LD_VAR 0 3
15939: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
15940: LD_INT 0
15942: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
15943: LD_VAR 0 1
15947: PUSH
15948: LD_INT 250
15950: EQUAL
15951: PUSH
15952: LD_VAR 0 2
15956: PPUSH
15957: CALL_OW 264
15961: PUSH
15962: LD_EXP 77
15966: EQUAL
15967: AND
15968: IFFALSE 15989
// MinerPlaceMine ( unit , x , y ) ;
15970: LD_VAR 0 2
15974: PPUSH
15975: LD_VAR 0 4
15979: PPUSH
15980: LD_VAR 0 5
15984: PPUSH
15985: CALL 18717 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
15989: LD_VAR 0 1
15993: PUSH
15994: LD_INT 251
15996: EQUAL
15997: PUSH
15998: LD_VAR 0 2
16002: PPUSH
16003: CALL_OW 264
16007: PUSH
16008: LD_EXP 77
16012: EQUAL
16013: AND
16014: IFFALSE 16035
// MinerDetonateMine ( unit , x , y ) ;
16016: LD_VAR 0 2
16020: PPUSH
16021: LD_VAR 0 4
16025: PPUSH
16026: LD_VAR 0 5
16030: PPUSH
16031: CALL 18994 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
16035: LD_VAR 0 1
16039: PUSH
16040: LD_INT 252
16042: EQUAL
16043: PUSH
16044: LD_VAR 0 2
16048: PPUSH
16049: CALL_OW 264
16053: PUSH
16054: LD_EXP 77
16058: EQUAL
16059: AND
16060: IFFALSE 16081
// MinerCreateMinefield ( unit , x , y ) ;
16062: LD_VAR 0 2
16066: PPUSH
16067: LD_VAR 0 4
16071: PPUSH
16072: LD_VAR 0 5
16076: PPUSH
16077: CALL 19411 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
16081: LD_VAR 0 1
16085: PUSH
16086: LD_INT 253
16088: EQUAL
16089: PUSH
16090: LD_VAR 0 2
16094: PPUSH
16095: CALL_OW 257
16099: PUSH
16100: LD_INT 5
16102: EQUAL
16103: AND
16104: IFFALSE 16125
// ComBinocular ( unit , x , y ) ;
16106: LD_VAR 0 2
16110: PPUSH
16111: LD_VAR 0 4
16115: PPUSH
16116: LD_VAR 0 5
16120: PPUSH
16121: CALL 19782 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
16125: LD_VAR 0 1
16129: PUSH
16130: LD_INT 254
16132: EQUAL
16133: PUSH
16134: LD_VAR 0 2
16138: PPUSH
16139: CALL_OW 264
16143: PUSH
16144: LD_EXP 72
16148: EQUAL
16149: AND
16150: PUSH
16151: LD_VAR 0 3
16155: PPUSH
16156: CALL_OW 263
16160: PUSH
16161: LD_INT 3
16163: EQUAL
16164: AND
16165: IFFALSE 16181
// HackDestroyVehicle ( unit , selectedUnit ) ;
16167: LD_VAR 0 2
16171: PPUSH
16172: LD_VAR 0 3
16176: PPUSH
16177: CALL 18077 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
16181: LD_VAR 0 1
16185: PUSH
16186: LD_INT 255
16188: EQUAL
16189: PUSH
16190: LD_VAR 0 2
16194: PPUSH
16195: CALL_OW 264
16199: PUSH
16200: LD_INT 14
16202: PUSH
16203: LD_INT 53
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: IN
16210: AND
16211: PUSH
16212: LD_VAR 0 4
16216: PPUSH
16217: LD_VAR 0 5
16221: PPUSH
16222: CALL_OW 488
16226: AND
16227: IFFALSE 16251
// CutTreeXYR ( unit , x , y , 12 ) ;
16229: LD_VAR 0 2
16233: PPUSH
16234: LD_VAR 0 4
16238: PPUSH
16239: LD_VAR 0 5
16243: PPUSH
16244: LD_INT 12
16246: PPUSH
16247: CALL 16643 0 4
// if cmd = 256 then
16251: LD_VAR 0 1
16255: PUSH
16256: LD_INT 256
16258: EQUAL
16259: IFFALSE 16280
// SetFactoryWaypoint ( unit , x , y ) ;
16261: LD_VAR 0 2
16265: PPUSH
16266: LD_VAR 0 4
16270: PPUSH
16271: LD_VAR 0 5
16275: PPUSH
16276: CALL 16285 0 3
// end ;
16280: LD_VAR 0 6
16284: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
16285: LD_INT 0
16287: PPUSH
16288: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
16289: LD_VAR 0 1
16293: NOT
16294: PUSH
16295: LD_VAR 0 2
16299: PPUSH
16300: LD_VAR 0 3
16304: PPUSH
16305: CALL_OW 488
16309: NOT
16310: OR
16311: PUSH
16312: LD_VAR 0 1
16316: PPUSH
16317: CALL_OW 266
16321: PUSH
16322: LD_INT 3
16324: NONEQUAL
16325: PUSH
16326: LD_VAR 0 1
16330: PPUSH
16331: CALL_OW 247
16335: PUSH
16336: LD_INT 1
16338: EQUAL
16339: NOT
16340: AND
16341: OR
16342: IFFALSE 16346
// exit ;
16344: GO 16495
// if GetType ( factory ) = unit_human then
16346: LD_VAR 0 1
16350: PPUSH
16351: CALL_OW 247
16355: PUSH
16356: LD_INT 1
16358: EQUAL
16359: IFFALSE 16376
// factory := IsInUnit ( factory ) ;
16361: LD_ADDR_VAR 0 1
16365: PUSH
16366: LD_VAR 0 1
16370: PPUSH
16371: CALL_OW 310
16375: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
16376: LD_VAR 0 1
16380: PPUSH
16381: CALL_OW 266
16385: PUSH
16386: LD_INT 3
16388: NONEQUAL
16389: IFFALSE 16393
// exit ;
16391: GO 16495
// if HexInfo ( x , y ) = factory then
16393: LD_VAR 0 2
16397: PPUSH
16398: LD_VAR 0 3
16402: PPUSH
16403: CALL_OW 428
16407: PUSH
16408: LD_VAR 0 1
16412: EQUAL
16413: IFFALSE 16440
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
16415: LD_ADDR_EXP 59
16419: PUSH
16420: LD_EXP 59
16424: PPUSH
16425: LD_VAR 0 1
16429: PPUSH
16430: LD_INT 0
16432: PPUSH
16433: CALL_OW 1
16437: ST_TO_ADDR
16438: GO 16491
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
16440: LD_ADDR_EXP 59
16444: PUSH
16445: LD_EXP 59
16449: PPUSH
16450: LD_VAR 0 1
16454: PPUSH
16455: LD_VAR 0 1
16459: PPUSH
16460: CALL_OW 255
16464: PUSH
16465: LD_VAR 0 1
16469: PUSH
16470: LD_VAR 0 2
16474: PUSH
16475: LD_VAR 0 3
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: PPUSH
16486: CALL_OW 1
16490: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16491: CALL 16500 0 0
// end ;
16495: LD_VAR 0 4
16499: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
16500: LD_INT 0
16502: PPUSH
16503: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16504: LD_STRING resetFactoryWaypoint();
16506: PPUSH
16507: CALL_OW 559
// if factoryWaypoints then
16511: LD_EXP 59
16515: IFFALSE 16638
// begin for i := 1 to factoryWaypoints do
16517: LD_ADDR_VAR 0 2
16521: PUSH
16522: DOUBLE
16523: LD_INT 1
16525: DEC
16526: ST_TO_ADDR
16527: LD_EXP 59
16531: PUSH
16532: FOR_TO
16533: IFFALSE 16636
// if factoryWaypoints [ i ] then
16535: LD_EXP 59
16539: PUSH
16540: LD_VAR 0 2
16544: ARRAY
16545: IFFALSE 16634
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
16547: LD_STRING setFactoryWaypointXY(
16549: PUSH
16550: LD_EXP 59
16554: PUSH
16555: LD_VAR 0 2
16559: ARRAY
16560: PUSH
16561: LD_INT 1
16563: ARRAY
16564: STR
16565: PUSH
16566: LD_STRING ,
16568: STR
16569: PUSH
16570: LD_EXP 59
16574: PUSH
16575: LD_VAR 0 2
16579: ARRAY
16580: PUSH
16581: LD_INT 2
16583: ARRAY
16584: STR
16585: PUSH
16586: LD_STRING ,
16588: STR
16589: PUSH
16590: LD_EXP 59
16594: PUSH
16595: LD_VAR 0 2
16599: ARRAY
16600: PUSH
16601: LD_INT 3
16603: ARRAY
16604: STR
16605: PUSH
16606: LD_STRING ,
16608: STR
16609: PUSH
16610: LD_EXP 59
16614: PUSH
16615: LD_VAR 0 2
16619: ARRAY
16620: PUSH
16621: LD_INT 4
16623: ARRAY
16624: STR
16625: PUSH
16626: LD_STRING )
16628: STR
16629: PPUSH
16630: CALL_OW 559
16634: GO 16532
16636: POP
16637: POP
// end ; end ;
16638: LD_VAR 0 1
16642: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
16643: LD_INT 0
16645: PPUSH
16646: PPUSH
16647: PPUSH
16648: PPUSH
16649: PPUSH
16650: PPUSH
16651: PPUSH
16652: PPUSH
16653: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
16654: LD_VAR 0 1
16658: NOT
16659: PUSH
16660: LD_VAR 0 2
16664: PPUSH
16665: LD_VAR 0 3
16669: PPUSH
16670: CALL_OW 488
16674: NOT
16675: OR
16676: PUSH
16677: LD_VAR 0 4
16681: NOT
16682: OR
16683: IFFALSE 16687
// exit ;
16685: GO 17027
// list := [ ] ;
16687: LD_ADDR_VAR 0 13
16691: PUSH
16692: EMPTY
16693: ST_TO_ADDR
// if x - r < 0 then
16694: LD_VAR 0 2
16698: PUSH
16699: LD_VAR 0 4
16703: MINUS
16704: PUSH
16705: LD_INT 0
16707: LESS
16708: IFFALSE 16720
// min_x := 0 else
16710: LD_ADDR_VAR 0 7
16714: PUSH
16715: LD_INT 0
16717: ST_TO_ADDR
16718: GO 16736
// min_x := x - r ;
16720: LD_ADDR_VAR 0 7
16724: PUSH
16725: LD_VAR 0 2
16729: PUSH
16730: LD_VAR 0 4
16734: MINUS
16735: ST_TO_ADDR
// if y - r < 0 then
16736: LD_VAR 0 3
16740: PUSH
16741: LD_VAR 0 4
16745: MINUS
16746: PUSH
16747: LD_INT 0
16749: LESS
16750: IFFALSE 16762
// min_y := 0 else
16752: LD_ADDR_VAR 0 8
16756: PUSH
16757: LD_INT 0
16759: ST_TO_ADDR
16760: GO 16778
// min_y := y - r ;
16762: LD_ADDR_VAR 0 8
16766: PUSH
16767: LD_VAR 0 3
16771: PUSH
16772: LD_VAR 0 4
16776: MINUS
16777: ST_TO_ADDR
// max_x := x + r ;
16778: LD_ADDR_VAR 0 9
16782: PUSH
16783: LD_VAR 0 2
16787: PUSH
16788: LD_VAR 0 4
16792: PLUS
16793: ST_TO_ADDR
// max_y := y + r ;
16794: LD_ADDR_VAR 0 10
16798: PUSH
16799: LD_VAR 0 3
16803: PUSH
16804: LD_VAR 0 4
16808: PLUS
16809: ST_TO_ADDR
// for _x = min_x to max_x do
16810: LD_ADDR_VAR 0 11
16814: PUSH
16815: DOUBLE
16816: LD_VAR 0 7
16820: DEC
16821: ST_TO_ADDR
16822: LD_VAR 0 9
16826: PUSH
16827: FOR_TO
16828: IFFALSE 16945
// for _y = min_y to max_y do
16830: LD_ADDR_VAR 0 12
16834: PUSH
16835: DOUBLE
16836: LD_VAR 0 8
16840: DEC
16841: ST_TO_ADDR
16842: LD_VAR 0 10
16846: PUSH
16847: FOR_TO
16848: IFFALSE 16941
// begin if not ValidHex ( _x , _y ) then
16850: LD_VAR 0 11
16854: PPUSH
16855: LD_VAR 0 12
16859: PPUSH
16860: CALL_OW 488
16864: NOT
16865: IFFALSE 16869
// continue ;
16867: GO 16847
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16869: LD_VAR 0 11
16873: PPUSH
16874: LD_VAR 0 12
16878: PPUSH
16879: CALL_OW 351
16883: PUSH
16884: LD_VAR 0 11
16888: PPUSH
16889: LD_VAR 0 12
16893: PPUSH
16894: CALL_OW 554
16898: AND
16899: IFFALSE 16939
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16901: LD_ADDR_VAR 0 13
16905: PUSH
16906: LD_VAR 0 13
16910: PPUSH
16911: LD_VAR 0 13
16915: PUSH
16916: LD_INT 1
16918: PLUS
16919: PPUSH
16920: LD_VAR 0 11
16924: PUSH
16925: LD_VAR 0 12
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: PPUSH
16934: CALL_OW 2
16938: ST_TO_ADDR
// end ;
16939: GO 16847
16941: POP
16942: POP
16943: GO 16827
16945: POP
16946: POP
// if not list then
16947: LD_VAR 0 13
16951: NOT
16952: IFFALSE 16956
// exit ;
16954: GO 17027
// for i in list do
16956: LD_ADDR_VAR 0 6
16960: PUSH
16961: LD_VAR 0 13
16965: PUSH
16966: FOR_IN
16967: IFFALSE 17025
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16969: LD_VAR 0 1
16973: PPUSH
16974: LD_STRING M
16976: PUSH
16977: LD_VAR 0 6
16981: PUSH
16982: LD_INT 1
16984: ARRAY
16985: PUSH
16986: LD_VAR 0 6
16990: PUSH
16991: LD_INT 2
16993: ARRAY
16994: PUSH
16995: LD_INT 0
16997: PUSH
16998: LD_INT 0
17000: PUSH
17001: LD_INT 0
17003: PUSH
17004: LD_INT 0
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: PUSH
17016: EMPTY
17017: LIST
17018: PPUSH
17019: CALL_OW 447
17023: GO 16966
17025: POP
17026: POP
// end ;
17027: LD_VAR 0 5
17031: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
17032: LD_EXP 60
17036: NOT
17037: IFFALSE 17087
17039: GO 17041
17041: DISABLE
// begin initHack := true ;
17042: LD_ADDR_EXP 60
17046: PUSH
17047: LD_INT 1
17049: ST_TO_ADDR
// hackTanks := [ ] ;
17050: LD_ADDR_EXP 61
17054: PUSH
17055: EMPTY
17056: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
17057: LD_ADDR_EXP 62
17061: PUSH
17062: EMPTY
17063: ST_TO_ADDR
// hackLimit := 3 ;
17064: LD_ADDR_EXP 63
17068: PUSH
17069: LD_INT 3
17071: ST_TO_ADDR
// hackDist := 12 ;
17072: LD_ADDR_EXP 64
17076: PUSH
17077: LD_INT 12
17079: ST_TO_ADDR
// hackCounter := [ ] ;
17080: LD_ADDR_EXP 65
17084: PUSH
17085: EMPTY
17086: ST_TO_ADDR
// end ;
17087: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
17088: LD_EXP 60
17092: PUSH
17093: LD_INT 34
17095: PUSH
17096: LD_EXP 72
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: PPUSH
17105: CALL_OW 69
17109: AND
17110: IFFALSE 17365
17112: GO 17114
17114: DISABLE
17115: LD_INT 0
17117: PPUSH
17118: PPUSH
// begin enable ;
17119: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
17120: LD_ADDR_VAR 0 1
17124: PUSH
17125: LD_INT 34
17127: PUSH
17128: LD_EXP 72
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PPUSH
17137: CALL_OW 69
17141: PUSH
17142: FOR_IN
17143: IFFALSE 17363
// begin if not i in hackTanks then
17145: LD_VAR 0 1
17149: PUSH
17150: LD_EXP 61
17154: IN
17155: NOT
17156: IFFALSE 17239
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
17158: LD_ADDR_EXP 61
17162: PUSH
17163: LD_EXP 61
17167: PPUSH
17168: LD_EXP 61
17172: PUSH
17173: LD_INT 1
17175: PLUS
17176: PPUSH
17177: LD_VAR 0 1
17181: PPUSH
17182: CALL_OW 1
17186: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
17187: LD_ADDR_EXP 62
17191: PUSH
17192: LD_EXP 62
17196: PPUSH
17197: LD_EXP 62
17201: PUSH
17202: LD_INT 1
17204: PLUS
17205: PPUSH
17206: EMPTY
17207: PPUSH
17208: CALL_OW 1
17212: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
17213: LD_ADDR_EXP 65
17217: PUSH
17218: LD_EXP 65
17222: PPUSH
17223: LD_EXP 65
17227: PUSH
17228: LD_INT 1
17230: PLUS
17231: PPUSH
17232: EMPTY
17233: PPUSH
17234: CALL_OW 1
17238: ST_TO_ADDR
// end ; if not IsOk ( i ) then
17239: LD_VAR 0 1
17243: PPUSH
17244: CALL_OW 302
17248: NOT
17249: IFFALSE 17262
// begin HackUnlinkAll ( i ) ;
17251: LD_VAR 0 1
17255: PPUSH
17256: CALL 17368 0 1
// continue ;
17260: GO 17142
// end ; HackCheckCapturedStatus ( i ) ;
17262: LD_VAR 0 1
17266: PPUSH
17267: CALL 17811 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
17271: LD_ADDR_VAR 0 2
17275: PUSH
17276: LD_INT 81
17278: PUSH
17279: LD_VAR 0 1
17283: PPUSH
17284: CALL_OW 255
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: LD_INT 33
17295: PUSH
17296: LD_INT 3
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PUSH
17303: LD_INT 91
17305: PUSH
17306: LD_VAR 0 1
17310: PUSH
17311: LD_EXP 64
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: LIST
17320: PUSH
17321: LD_INT 50
17323: PUSH
17324: EMPTY
17325: LIST
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: PPUSH
17333: CALL_OW 69
17337: ST_TO_ADDR
// if not tmp then
17338: LD_VAR 0 2
17342: NOT
17343: IFFALSE 17347
// continue ;
17345: GO 17142
// HackLink ( i , tmp ) ;
17347: LD_VAR 0 1
17351: PPUSH
17352: LD_VAR 0 2
17356: PPUSH
17357: CALL 17504 0 2
// end ;
17361: GO 17142
17363: POP
17364: POP
// end ;
17365: PPOPN 2
17367: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
17368: LD_INT 0
17370: PPUSH
17371: PPUSH
17372: PPUSH
// if not hack in hackTanks then
17373: LD_VAR 0 1
17377: PUSH
17378: LD_EXP 61
17382: IN
17383: NOT
17384: IFFALSE 17388
// exit ;
17386: GO 17499
// index := GetElementIndex ( hackTanks , hack ) ;
17388: LD_ADDR_VAR 0 4
17392: PUSH
17393: LD_EXP 61
17397: PPUSH
17398: LD_VAR 0 1
17402: PPUSH
17403: CALL 25524 0 2
17407: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
17408: LD_EXP 62
17412: PUSH
17413: LD_VAR 0 4
17417: ARRAY
17418: IFFALSE 17499
// begin for i in hackTanksCaptured [ index ] do
17420: LD_ADDR_VAR 0 3
17424: PUSH
17425: LD_EXP 62
17429: PUSH
17430: LD_VAR 0 4
17434: ARRAY
17435: PUSH
17436: FOR_IN
17437: IFFALSE 17463
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
17439: LD_VAR 0 3
17443: PUSH
17444: LD_INT 1
17446: ARRAY
17447: PPUSH
17448: LD_VAR 0 3
17452: PUSH
17453: LD_INT 2
17455: ARRAY
17456: PPUSH
17457: CALL_OW 235
17461: GO 17436
17463: POP
17464: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
17465: LD_ADDR_EXP 62
17469: PUSH
17470: LD_EXP 62
17474: PPUSH
17475: LD_VAR 0 4
17479: PPUSH
17480: EMPTY
17481: PPUSH
17482: CALL_OW 1
17486: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
17487: LD_VAR 0 1
17491: PPUSH
17492: LD_INT 0
17494: PPUSH
17495: CALL_OW 505
// end ; end ;
17499: LD_VAR 0 2
17503: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
17504: LD_INT 0
17506: PPUSH
17507: PPUSH
17508: PPUSH
// if not hack in hackTanks or not vehicles then
17509: LD_VAR 0 1
17513: PUSH
17514: LD_EXP 61
17518: IN
17519: NOT
17520: PUSH
17521: LD_VAR 0 2
17525: NOT
17526: OR
17527: IFFALSE 17531
// exit ;
17529: GO 17806
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
17531: LD_ADDR_VAR 0 2
17535: PUSH
17536: LD_VAR 0 1
17540: PPUSH
17541: LD_VAR 0 2
17545: PPUSH
17546: LD_INT 1
17548: PPUSH
17549: LD_INT 1
17551: PPUSH
17552: CALL 26174 0 4
17556: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
17557: LD_ADDR_VAR 0 5
17561: PUSH
17562: LD_EXP 61
17566: PPUSH
17567: LD_VAR 0 1
17571: PPUSH
17572: CALL 25524 0 2
17576: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
17577: LD_EXP 62
17581: PUSH
17582: LD_VAR 0 5
17586: ARRAY
17587: PUSH
17588: LD_EXP 63
17592: LESS
17593: IFFALSE 17782
// begin for i := 1 to vehicles do
17595: LD_ADDR_VAR 0 4
17599: PUSH
17600: DOUBLE
17601: LD_INT 1
17603: DEC
17604: ST_TO_ADDR
17605: LD_VAR 0 2
17609: PUSH
17610: FOR_TO
17611: IFFALSE 17780
// begin if hackTanksCaptured [ index ] = hackLimit then
17613: LD_EXP 62
17617: PUSH
17618: LD_VAR 0 5
17622: ARRAY
17623: PUSH
17624: LD_EXP 63
17628: EQUAL
17629: IFFALSE 17633
// break ;
17631: GO 17780
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
17633: LD_ADDR_EXP 65
17637: PUSH
17638: LD_EXP 65
17642: PPUSH
17643: LD_VAR 0 5
17647: PPUSH
17648: LD_EXP 65
17652: PUSH
17653: LD_VAR 0 5
17657: ARRAY
17658: PUSH
17659: LD_INT 1
17661: PLUS
17662: PPUSH
17663: CALL_OW 1
17667: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
17668: LD_ADDR_EXP 62
17672: PUSH
17673: LD_EXP 62
17677: PPUSH
17678: LD_VAR 0 5
17682: PUSH
17683: LD_EXP 62
17687: PUSH
17688: LD_VAR 0 5
17692: ARRAY
17693: PUSH
17694: LD_INT 1
17696: PLUS
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PPUSH
17702: LD_VAR 0 2
17706: PUSH
17707: LD_VAR 0 4
17711: ARRAY
17712: PUSH
17713: LD_VAR 0 2
17717: PUSH
17718: LD_VAR 0 4
17722: ARRAY
17723: PPUSH
17724: CALL_OW 255
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PPUSH
17733: CALL 25739 0 3
17737: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
17738: LD_VAR 0 2
17742: PUSH
17743: LD_VAR 0 4
17747: ARRAY
17748: PPUSH
17749: LD_VAR 0 1
17753: PPUSH
17754: CALL_OW 255
17758: PPUSH
17759: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
17763: LD_VAR 0 2
17767: PUSH
17768: LD_VAR 0 4
17772: ARRAY
17773: PPUSH
17774: CALL_OW 141
// end ;
17778: GO 17610
17780: POP
17781: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17782: LD_VAR 0 1
17786: PPUSH
17787: LD_EXP 62
17791: PUSH
17792: LD_VAR 0 5
17796: ARRAY
17797: PUSH
17798: LD_INT 0
17800: PLUS
17801: PPUSH
17802: CALL_OW 505
// end ;
17806: LD_VAR 0 3
17810: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
17811: LD_INT 0
17813: PPUSH
17814: PPUSH
17815: PPUSH
17816: PPUSH
// if not hack in hackTanks then
17817: LD_VAR 0 1
17821: PUSH
17822: LD_EXP 61
17826: IN
17827: NOT
17828: IFFALSE 17832
// exit ;
17830: GO 18072
// index := GetElementIndex ( hackTanks , hack ) ;
17832: LD_ADDR_VAR 0 4
17836: PUSH
17837: LD_EXP 61
17841: PPUSH
17842: LD_VAR 0 1
17846: PPUSH
17847: CALL 25524 0 2
17851: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
17852: LD_ADDR_VAR 0 3
17856: PUSH
17857: DOUBLE
17858: LD_EXP 62
17862: PUSH
17863: LD_VAR 0 4
17867: ARRAY
17868: INC
17869: ST_TO_ADDR
17870: LD_INT 1
17872: PUSH
17873: FOR_DOWNTO
17874: IFFALSE 18046
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
17876: LD_ADDR_VAR 0 5
17880: PUSH
17881: LD_EXP 62
17885: PUSH
17886: LD_VAR 0 4
17890: ARRAY
17891: PUSH
17892: LD_VAR 0 3
17896: ARRAY
17897: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
17898: LD_VAR 0 5
17902: PUSH
17903: LD_INT 1
17905: ARRAY
17906: PPUSH
17907: CALL_OW 302
17911: NOT
17912: PUSH
17913: LD_VAR 0 5
17917: PUSH
17918: LD_INT 1
17920: ARRAY
17921: PPUSH
17922: CALL_OW 255
17926: PUSH
17927: LD_VAR 0 1
17931: PPUSH
17932: CALL_OW 255
17936: NONEQUAL
17937: OR
17938: IFFALSE 18044
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
17940: LD_VAR 0 5
17944: PUSH
17945: LD_INT 1
17947: ARRAY
17948: PPUSH
17949: CALL_OW 305
17953: PUSH
17954: LD_VAR 0 5
17958: PUSH
17959: LD_INT 1
17961: ARRAY
17962: PPUSH
17963: CALL_OW 255
17967: PUSH
17968: LD_VAR 0 1
17972: PPUSH
17973: CALL_OW 255
17977: EQUAL
17978: AND
17979: IFFALSE 18003
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
17981: LD_VAR 0 5
17985: PUSH
17986: LD_INT 1
17988: ARRAY
17989: PPUSH
17990: LD_VAR 0 5
17994: PUSH
17995: LD_INT 2
17997: ARRAY
17998: PPUSH
17999: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
18003: LD_ADDR_EXP 62
18007: PUSH
18008: LD_EXP 62
18012: PPUSH
18013: LD_VAR 0 4
18017: PPUSH
18018: LD_EXP 62
18022: PUSH
18023: LD_VAR 0 4
18027: ARRAY
18028: PPUSH
18029: LD_VAR 0 3
18033: PPUSH
18034: CALL_OW 3
18038: PPUSH
18039: CALL_OW 1
18043: ST_TO_ADDR
// end ; end ;
18044: GO 17873
18046: POP
18047: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18048: LD_VAR 0 1
18052: PPUSH
18053: LD_EXP 62
18057: PUSH
18058: LD_VAR 0 4
18062: ARRAY
18063: PUSH
18064: LD_INT 0
18066: PLUS
18067: PPUSH
18068: CALL_OW 505
// end ;
18072: LD_VAR 0 2
18076: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
18077: LD_INT 0
18079: PPUSH
18080: PPUSH
18081: PPUSH
18082: PPUSH
// if not hack in hackTanks then
18083: LD_VAR 0 1
18087: PUSH
18088: LD_EXP 61
18092: IN
18093: NOT
18094: IFFALSE 18098
// exit ;
18096: GO 18183
// index := GetElementIndex ( hackTanks , hack ) ;
18098: LD_ADDR_VAR 0 5
18102: PUSH
18103: LD_EXP 61
18107: PPUSH
18108: LD_VAR 0 1
18112: PPUSH
18113: CALL 25524 0 2
18117: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
18118: LD_ADDR_VAR 0 4
18122: PUSH
18123: DOUBLE
18124: LD_INT 1
18126: DEC
18127: ST_TO_ADDR
18128: LD_EXP 62
18132: PUSH
18133: LD_VAR 0 5
18137: ARRAY
18138: PUSH
18139: FOR_TO
18140: IFFALSE 18181
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
18142: LD_EXP 62
18146: PUSH
18147: LD_VAR 0 5
18151: ARRAY
18152: PUSH
18153: LD_VAR 0 4
18157: ARRAY
18158: PUSH
18159: LD_INT 1
18161: ARRAY
18162: PUSH
18163: LD_VAR 0 2
18167: EQUAL
18168: IFFALSE 18179
// KillUnit ( vehicle ) ;
18170: LD_VAR 0 2
18174: PPUSH
18175: CALL_OW 66
18179: GO 18139
18181: POP
18182: POP
// end ;
18183: LD_VAR 0 3
18187: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
18188: LD_EXP 66
18192: NOT
18193: IFFALSE 18228
18195: GO 18197
18197: DISABLE
// begin initMiner := true ;
18198: LD_ADDR_EXP 66
18202: PUSH
18203: LD_INT 1
18205: ST_TO_ADDR
// minersList := [ ] ;
18206: LD_ADDR_EXP 67
18210: PUSH
18211: EMPTY
18212: ST_TO_ADDR
// minerMinesList := [ ] ;
18213: LD_ADDR_EXP 68
18217: PUSH
18218: EMPTY
18219: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
18220: LD_ADDR_EXP 69
18224: PUSH
18225: LD_INT 5
18227: ST_TO_ADDR
// end ;
18228: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
18229: LD_EXP 66
18233: PUSH
18234: LD_INT 34
18236: PUSH
18237: LD_EXP 77
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PPUSH
18246: CALL_OW 69
18250: AND
18251: IFFALSE 18714
18253: GO 18255
18255: DISABLE
18256: LD_INT 0
18258: PPUSH
18259: PPUSH
18260: PPUSH
18261: PPUSH
// begin enable ;
18262: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
18263: LD_ADDR_VAR 0 1
18267: PUSH
18268: LD_INT 34
18270: PUSH
18271: LD_EXP 77
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PPUSH
18280: CALL_OW 69
18284: PUSH
18285: FOR_IN
18286: IFFALSE 18358
// begin if not i in minersList then
18288: LD_VAR 0 1
18292: PUSH
18293: LD_EXP 67
18297: IN
18298: NOT
18299: IFFALSE 18356
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
18301: LD_ADDR_EXP 67
18305: PUSH
18306: LD_EXP 67
18310: PPUSH
18311: LD_EXP 67
18315: PUSH
18316: LD_INT 1
18318: PLUS
18319: PPUSH
18320: LD_VAR 0 1
18324: PPUSH
18325: CALL_OW 1
18329: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
18330: LD_ADDR_EXP 68
18334: PUSH
18335: LD_EXP 68
18339: PPUSH
18340: LD_EXP 68
18344: PUSH
18345: LD_INT 1
18347: PLUS
18348: PPUSH
18349: EMPTY
18350: PPUSH
18351: CALL_OW 1
18355: ST_TO_ADDR
// end end ;
18356: GO 18285
18358: POP
18359: POP
// for i := minerMinesList downto 1 do
18360: LD_ADDR_VAR 0 1
18364: PUSH
18365: DOUBLE
18366: LD_EXP 68
18370: INC
18371: ST_TO_ADDR
18372: LD_INT 1
18374: PUSH
18375: FOR_DOWNTO
18376: IFFALSE 18712
// begin if IsLive ( minersList [ i ] ) then
18378: LD_EXP 67
18382: PUSH
18383: LD_VAR 0 1
18387: ARRAY
18388: PPUSH
18389: CALL_OW 300
18393: IFFALSE 18421
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
18395: LD_EXP 67
18399: PUSH
18400: LD_VAR 0 1
18404: ARRAY
18405: PPUSH
18406: LD_EXP 68
18410: PUSH
18411: LD_VAR 0 1
18415: ARRAY
18416: PPUSH
18417: CALL_OW 505
// if not minerMinesList [ i ] then
18421: LD_EXP 68
18425: PUSH
18426: LD_VAR 0 1
18430: ARRAY
18431: NOT
18432: IFFALSE 18436
// continue ;
18434: GO 18375
// for j := minerMinesList [ i ] downto 1 do
18436: LD_ADDR_VAR 0 2
18440: PUSH
18441: DOUBLE
18442: LD_EXP 68
18446: PUSH
18447: LD_VAR 0 1
18451: ARRAY
18452: INC
18453: ST_TO_ADDR
18454: LD_INT 1
18456: PUSH
18457: FOR_DOWNTO
18458: IFFALSE 18708
// begin side := GetSide ( minersList [ i ] ) ;
18460: LD_ADDR_VAR 0 3
18464: PUSH
18465: LD_EXP 67
18469: PUSH
18470: LD_VAR 0 1
18474: ARRAY
18475: PPUSH
18476: CALL_OW 255
18480: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
18481: LD_ADDR_VAR 0 4
18485: PUSH
18486: LD_EXP 68
18490: PUSH
18491: LD_VAR 0 1
18495: ARRAY
18496: PUSH
18497: LD_VAR 0 2
18501: ARRAY
18502: PUSH
18503: LD_INT 1
18505: ARRAY
18506: PPUSH
18507: LD_EXP 68
18511: PUSH
18512: LD_VAR 0 1
18516: ARRAY
18517: PUSH
18518: LD_VAR 0 2
18522: ARRAY
18523: PUSH
18524: LD_INT 2
18526: ARRAY
18527: PPUSH
18528: CALL_OW 428
18532: ST_TO_ADDR
// if not tmp then
18533: LD_VAR 0 4
18537: NOT
18538: IFFALSE 18542
// continue ;
18540: GO 18457
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
18542: LD_VAR 0 4
18546: PUSH
18547: LD_INT 81
18549: PUSH
18550: LD_VAR 0 3
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PPUSH
18559: CALL_OW 69
18563: IN
18564: PUSH
18565: LD_EXP 68
18569: PUSH
18570: LD_VAR 0 1
18574: ARRAY
18575: PUSH
18576: LD_VAR 0 2
18580: ARRAY
18581: PUSH
18582: LD_INT 1
18584: ARRAY
18585: PPUSH
18586: LD_EXP 68
18590: PUSH
18591: LD_VAR 0 1
18595: ARRAY
18596: PUSH
18597: LD_VAR 0 2
18601: ARRAY
18602: PUSH
18603: LD_INT 2
18605: ARRAY
18606: PPUSH
18607: CALL_OW 458
18611: AND
18612: IFFALSE 18706
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
18614: LD_EXP 68
18618: PUSH
18619: LD_VAR 0 1
18623: ARRAY
18624: PUSH
18625: LD_VAR 0 2
18629: ARRAY
18630: PUSH
18631: LD_INT 1
18633: ARRAY
18634: PPUSH
18635: LD_EXP 68
18639: PUSH
18640: LD_VAR 0 1
18644: ARRAY
18645: PUSH
18646: LD_VAR 0 2
18650: ARRAY
18651: PUSH
18652: LD_INT 2
18654: ARRAY
18655: PPUSH
18656: LD_VAR 0 3
18660: PPUSH
18661: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
18665: LD_ADDR_EXP 68
18669: PUSH
18670: LD_EXP 68
18674: PPUSH
18675: LD_VAR 0 1
18679: PPUSH
18680: LD_EXP 68
18684: PUSH
18685: LD_VAR 0 1
18689: ARRAY
18690: PPUSH
18691: LD_VAR 0 2
18695: PPUSH
18696: CALL_OW 3
18700: PPUSH
18701: CALL_OW 1
18705: ST_TO_ADDR
// end ; end ;
18706: GO 18457
18708: POP
18709: POP
// end ;
18710: GO 18375
18712: POP
18713: POP
// end ;
18714: PPOPN 4
18716: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
18717: LD_INT 0
18719: PPUSH
18720: PPUSH
// result := false ;
18721: LD_ADDR_VAR 0 4
18725: PUSH
18726: LD_INT 0
18728: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
18729: LD_VAR 0 1
18733: PPUSH
18734: CALL_OW 264
18738: PUSH
18739: LD_EXP 77
18743: EQUAL
18744: NOT
18745: IFFALSE 18749
// exit ;
18747: GO 18989
// index := GetElementIndex ( minersList , unit ) ;
18749: LD_ADDR_VAR 0 5
18753: PUSH
18754: LD_EXP 67
18758: PPUSH
18759: LD_VAR 0 1
18763: PPUSH
18764: CALL 25524 0 2
18768: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
18769: LD_EXP 68
18773: PUSH
18774: LD_VAR 0 5
18778: ARRAY
18779: PUSH
18780: LD_EXP 69
18784: GREATEREQUAL
18785: IFFALSE 18789
// exit ;
18787: GO 18989
// ComMoveXY ( unit , x , y ) ;
18789: LD_VAR 0 1
18793: PPUSH
18794: LD_VAR 0 2
18798: PPUSH
18799: LD_VAR 0 3
18803: PPUSH
18804: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18808: LD_INT 35
18810: PPUSH
18811: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
18815: LD_VAR 0 1
18819: PPUSH
18820: LD_VAR 0 2
18824: PPUSH
18825: LD_VAR 0 3
18829: PPUSH
18830: CALL 56243 0 3
18834: NOT
18835: PUSH
18836: LD_VAR 0 1
18840: PPUSH
18841: CALL_OW 314
18845: AND
18846: IFFALSE 18850
// exit ;
18848: GO 18989
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
18850: LD_VAR 0 2
18854: PPUSH
18855: LD_VAR 0 3
18859: PPUSH
18860: CALL_OW 428
18864: PUSH
18865: LD_VAR 0 1
18869: EQUAL
18870: PUSH
18871: LD_VAR 0 1
18875: PPUSH
18876: CALL_OW 314
18880: NOT
18881: AND
18882: IFFALSE 18808
// PlaySoundXY ( x , y , PlantMine ) ;
18884: LD_VAR 0 2
18888: PPUSH
18889: LD_VAR 0 3
18893: PPUSH
18894: LD_STRING PlantMine
18896: PPUSH
18897: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
18901: LD_VAR 0 2
18905: PPUSH
18906: LD_VAR 0 3
18910: PPUSH
18911: LD_VAR 0 1
18915: PPUSH
18916: CALL_OW 255
18920: PPUSH
18921: LD_INT 0
18923: PPUSH
18924: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
18928: LD_ADDR_EXP 68
18932: PUSH
18933: LD_EXP 68
18937: PPUSH
18938: LD_VAR 0 5
18942: PUSH
18943: LD_EXP 68
18947: PUSH
18948: LD_VAR 0 5
18952: ARRAY
18953: PUSH
18954: LD_INT 1
18956: PLUS
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PPUSH
18962: LD_VAR 0 2
18966: PUSH
18967: LD_VAR 0 3
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: PPUSH
18976: CALL 25739 0 3
18980: ST_TO_ADDR
// result := true ;
18981: LD_ADDR_VAR 0 4
18985: PUSH
18986: LD_INT 1
18988: ST_TO_ADDR
// end ;
18989: LD_VAR 0 4
18993: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
18994: LD_INT 0
18996: PPUSH
18997: PPUSH
18998: PPUSH
// if not unit in minersList then
18999: LD_VAR 0 1
19003: PUSH
19004: LD_EXP 67
19008: IN
19009: NOT
19010: IFFALSE 19014
// exit ;
19012: GO 19406
// index := GetElementIndex ( minersList , unit ) ;
19014: LD_ADDR_VAR 0 6
19018: PUSH
19019: LD_EXP 67
19023: PPUSH
19024: LD_VAR 0 1
19028: PPUSH
19029: CALL 25524 0 2
19033: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
19034: LD_ADDR_VAR 0 5
19038: PUSH
19039: DOUBLE
19040: LD_EXP 68
19044: PUSH
19045: LD_VAR 0 6
19049: ARRAY
19050: INC
19051: ST_TO_ADDR
19052: LD_INT 1
19054: PUSH
19055: FOR_DOWNTO
19056: IFFALSE 19217
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
19058: LD_EXP 68
19062: PUSH
19063: LD_VAR 0 6
19067: ARRAY
19068: PUSH
19069: LD_VAR 0 5
19073: ARRAY
19074: PUSH
19075: LD_INT 1
19077: ARRAY
19078: PUSH
19079: LD_VAR 0 2
19083: EQUAL
19084: PUSH
19085: LD_EXP 68
19089: PUSH
19090: LD_VAR 0 6
19094: ARRAY
19095: PUSH
19096: LD_VAR 0 5
19100: ARRAY
19101: PUSH
19102: LD_INT 2
19104: ARRAY
19105: PUSH
19106: LD_VAR 0 3
19110: EQUAL
19111: AND
19112: IFFALSE 19215
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
19114: LD_EXP 68
19118: PUSH
19119: LD_VAR 0 6
19123: ARRAY
19124: PUSH
19125: LD_VAR 0 5
19129: ARRAY
19130: PUSH
19131: LD_INT 1
19133: ARRAY
19134: PPUSH
19135: LD_EXP 68
19139: PUSH
19140: LD_VAR 0 6
19144: ARRAY
19145: PUSH
19146: LD_VAR 0 5
19150: ARRAY
19151: PUSH
19152: LD_INT 2
19154: ARRAY
19155: PPUSH
19156: LD_VAR 0 1
19160: PPUSH
19161: CALL_OW 255
19165: PPUSH
19166: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
19170: LD_ADDR_EXP 68
19174: PUSH
19175: LD_EXP 68
19179: PPUSH
19180: LD_VAR 0 6
19184: PPUSH
19185: LD_EXP 68
19189: PUSH
19190: LD_VAR 0 6
19194: ARRAY
19195: PPUSH
19196: LD_VAR 0 5
19200: PPUSH
19201: CALL_OW 3
19205: PPUSH
19206: CALL_OW 1
19210: ST_TO_ADDR
// exit ;
19211: POP
19212: POP
19213: GO 19406
// end ; end ;
19215: GO 19055
19217: POP
19218: POP
// for i := minerMinesList [ index ] downto 1 do
19219: LD_ADDR_VAR 0 5
19223: PUSH
19224: DOUBLE
19225: LD_EXP 68
19229: PUSH
19230: LD_VAR 0 6
19234: ARRAY
19235: INC
19236: ST_TO_ADDR
19237: LD_INT 1
19239: PUSH
19240: FOR_DOWNTO
19241: IFFALSE 19404
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
19243: LD_EXP 68
19247: PUSH
19248: LD_VAR 0 6
19252: ARRAY
19253: PUSH
19254: LD_VAR 0 5
19258: ARRAY
19259: PUSH
19260: LD_INT 1
19262: ARRAY
19263: PPUSH
19264: LD_EXP 68
19268: PUSH
19269: LD_VAR 0 6
19273: ARRAY
19274: PUSH
19275: LD_VAR 0 5
19279: ARRAY
19280: PUSH
19281: LD_INT 2
19283: ARRAY
19284: PPUSH
19285: LD_VAR 0 2
19289: PPUSH
19290: LD_VAR 0 3
19294: PPUSH
19295: CALL_OW 298
19299: PUSH
19300: LD_INT 6
19302: LESS
19303: IFFALSE 19402
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
19305: LD_EXP 68
19309: PUSH
19310: LD_VAR 0 6
19314: ARRAY
19315: PUSH
19316: LD_VAR 0 5
19320: ARRAY
19321: PUSH
19322: LD_INT 1
19324: ARRAY
19325: PPUSH
19326: LD_EXP 68
19330: PUSH
19331: LD_VAR 0 6
19335: ARRAY
19336: PUSH
19337: LD_VAR 0 5
19341: ARRAY
19342: PUSH
19343: LD_INT 2
19345: ARRAY
19346: PPUSH
19347: LD_VAR 0 1
19351: PPUSH
19352: CALL_OW 255
19356: PPUSH
19357: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
19361: LD_ADDR_EXP 68
19365: PUSH
19366: LD_EXP 68
19370: PPUSH
19371: LD_VAR 0 6
19375: PPUSH
19376: LD_EXP 68
19380: PUSH
19381: LD_VAR 0 6
19385: ARRAY
19386: PPUSH
19387: LD_VAR 0 5
19391: PPUSH
19392: CALL_OW 3
19396: PPUSH
19397: CALL_OW 1
19401: ST_TO_ADDR
// end ; end ;
19402: GO 19240
19404: POP
19405: POP
// end ;
19406: LD_VAR 0 4
19410: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
19411: LD_INT 0
19413: PPUSH
19414: PPUSH
19415: PPUSH
19416: PPUSH
19417: PPUSH
19418: PPUSH
19419: PPUSH
19420: PPUSH
19421: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
19422: LD_VAR 0 1
19426: PPUSH
19427: CALL_OW 264
19431: PUSH
19432: LD_EXP 77
19436: EQUAL
19437: NOT
19438: PUSH
19439: LD_VAR 0 1
19443: PUSH
19444: LD_EXP 67
19448: IN
19449: NOT
19450: OR
19451: IFFALSE 19455
// exit ;
19453: GO 19777
// index := GetElementIndex ( minersList , unit ) ;
19455: LD_ADDR_VAR 0 6
19459: PUSH
19460: LD_EXP 67
19464: PPUSH
19465: LD_VAR 0 1
19469: PPUSH
19470: CALL 25524 0 2
19474: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
19475: LD_ADDR_VAR 0 8
19479: PUSH
19480: LD_EXP 69
19484: PUSH
19485: LD_EXP 68
19489: PUSH
19490: LD_VAR 0 6
19494: ARRAY
19495: MINUS
19496: ST_TO_ADDR
// if not minesFreeAmount then
19497: LD_VAR 0 8
19501: NOT
19502: IFFALSE 19506
// exit ;
19504: GO 19777
// tmp := [ ] ;
19506: LD_ADDR_VAR 0 7
19510: PUSH
19511: EMPTY
19512: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
19513: LD_ADDR_VAR 0 5
19517: PUSH
19518: DOUBLE
19519: LD_INT 1
19521: DEC
19522: ST_TO_ADDR
19523: LD_VAR 0 8
19527: PUSH
19528: FOR_TO
19529: IFFALSE 19724
// begin _d := rand ( 0 , 5 ) ;
19531: LD_ADDR_VAR 0 11
19535: PUSH
19536: LD_INT 0
19538: PPUSH
19539: LD_INT 5
19541: PPUSH
19542: CALL_OW 12
19546: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
19547: LD_ADDR_VAR 0 12
19551: PUSH
19552: LD_INT 2
19554: PPUSH
19555: LD_INT 6
19557: PPUSH
19558: CALL_OW 12
19562: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
19563: LD_ADDR_VAR 0 9
19567: PUSH
19568: LD_VAR 0 2
19572: PPUSH
19573: LD_VAR 0 11
19577: PPUSH
19578: LD_VAR 0 12
19582: PPUSH
19583: CALL_OW 272
19587: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
19588: LD_ADDR_VAR 0 10
19592: PUSH
19593: LD_VAR 0 3
19597: PPUSH
19598: LD_VAR 0 11
19602: PPUSH
19603: LD_VAR 0 12
19607: PPUSH
19608: CALL_OW 273
19612: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
19613: LD_VAR 0 9
19617: PPUSH
19618: LD_VAR 0 10
19622: PPUSH
19623: CALL_OW 488
19627: PUSH
19628: LD_VAR 0 9
19632: PUSH
19633: LD_VAR 0 10
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: LD_VAR 0 7
19646: IN
19647: NOT
19648: AND
19649: PUSH
19650: LD_VAR 0 9
19654: PPUSH
19655: LD_VAR 0 10
19659: PPUSH
19660: CALL_OW 458
19664: NOT
19665: AND
19666: IFFALSE 19708
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
19668: LD_ADDR_VAR 0 7
19672: PUSH
19673: LD_VAR 0 7
19677: PPUSH
19678: LD_VAR 0 7
19682: PUSH
19683: LD_INT 1
19685: PLUS
19686: PPUSH
19687: LD_VAR 0 9
19691: PUSH
19692: LD_VAR 0 10
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PPUSH
19701: CALL_OW 1
19705: ST_TO_ADDR
19706: GO 19722
// i := i - 1 ;
19708: LD_ADDR_VAR 0 5
19712: PUSH
19713: LD_VAR 0 5
19717: PUSH
19718: LD_INT 1
19720: MINUS
19721: ST_TO_ADDR
// end ;
19722: GO 19528
19724: POP
19725: POP
// for i in tmp do
19726: LD_ADDR_VAR 0 5
19730: PUSH
19731: LD_VAR 0 7
19735: PUSH
19736: FOR_IN
19737: IFFALSE 19775
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
19739: LD_VAR 0 1
19743: PPUSH
19744: LD_VAR 0 5
19748: PUSH
19749: LD_INT 1
19751: ARRAY
19752: PPUSH
19753: LD_VAR 0 5
19757: PUSH
19758: LD_INT 2
19760: ARRAY
19761: PPUSH
19762: CALL 18717 0 3
19766: NOT
19767: IFFALSE 19773
// exit ;
19769: POP
19770: POP
19771: GO 19777
19773: GO 19736
19775: POP
19776: POP
// end ;
19777: LD_VAR 0 4
19781: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
19782: LD_INT 0
19784: PPUSH
19785: PPUSH
19786: PPUSH
19787: PPUSH
19788: PPUSH
19789: PPUSH
19790: PPUSH
// if not GetClass ( unit ) = class_sniper then
19791: LD_VAR 0 1
19795: PPUSH
19796: CALL_OW 257
19800: PUSH
19801: LD_INT 5
19803: EQUAL
19804: NOT
19805: IFFALSE 19809
// exit ;
19807: GO 20197
// dist := 8 ;
19809: LD_ADDR_VAR 0 5
19813: PUSH
19814: LD_INT 8
19816: ST_TO_ADDR
// viewRange := 12 ;
19817: LD_ADDR_VAR 0 7
19821: PUSH
19822: LD_INT 12
19824: ST_TO_ADDR
// side := GetSide ( unit ) ;
19825: LD_ADDR_VAR 0 6
19829: PUSH
19830: LD_VAR 0 1
19834: PPUSH
19835: CALL_OW 255
19839: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
19840: LD_INT 61
19842: PPUSH
19843: LD_VAR 0 6
19847: PPUSH
19848: CALL_OW 321
19852: PUSH
19853: LD_INT 2
19855: EQUAL
19856: IFFALSE 19866
// viewRange := 16 ;
19858: LD_ADDR_VAR 0 7
19862: PUSH
19863: LD_INT 16
19865: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
19866: LD_VAR 0 1
19870: PPUSH
19871: LD_VAR 0 2
19875: PPUSH
19876: LD_VAR 0 3
19880: PPUSH
19881: CALL_OW 297
19885: PUSH
19886: LD_VAR 0 5
19890: GREATER
19891: IFFALSE 19970
// begin ComMoveXY ( unit , x , y ) ;
19893: LD_VAR 0 1
19897: PPUSH
19898: LD_VAR 0 2
19902: PPUSH
19903: LD_VAR 0 3
19907: PPUSH
19908: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19912: LD_INT 35
19914: PPUSH
19915: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
19919: LD_VAR 0 1
19923: PPUSH
19924: LD_VAR 0 2
19928: PPUSH
19929: LD_VAR 0 3
19933: PPUSH
19934: CALL 56243 0 3
19938: NOT
19939: IFFALSE 19943
// exit ;
19941: GO 20197
// until GetDistUnitXY ( unit , x , y ) < dist ;
19943: LD_VAR 0 1
19947: PPUSH
19948: LD_VAR 0 2
19952: PPUSH
19953: LD_VAR 0 3
19957: PPUSH
19958: CALL_OW 297
19962: PUSH
19963: LD_VAR 0 5
19967: LESS
19968: IFFALSE 19912
// end ; ComTurnXY ( unit , x , y ) ;
19970: LD_VAR 0 1
19974: PPUSH
19975: LD_VAR 0 2
19979: PPUSH
19980: LD_VAR 0 3
19984: PPUSH
19985: CALL_OW 118
// wait ( 5 ) ;
19989: LD_INT 5
19991: PPUSH
19992: CALL_OW 67
// _d := GetDir ( unit ) ;
19996: LD_ADDR_VAR 0 10
20000: PUSH
20001: LD_VAR 0 1
20005: PPUSH
20006: CALL_OW 254
20010: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
20011: LD_ADDR_VAR 0 8
20015: PUSH
20016: LD_VAR 0 1
20020: PPUSH
20021: CALL_OW 250
20025: PPUSH
20026: LD_VAR 0 10
20030: PPUSH
20031: LD_VAR 0 5
20035: PPUSH
20036: CALL_OW 272
20040: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
20041: LD_ADDR_VAR 0 9
20045: PUSH
20046: LD_VAR 0 1
20050: PPUSH
20051: CALL_OW 251
20055: PPUSH
20056: LD_VAR 0 10
20060: PPUSH
20061: LD_VAR 0 5
20065: PPUSH
20066: CALL_OW 273
20070: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20071: LD_VAR 0 8
20075: PPUSH
20076: LD_VAR 0 9
20080: PPUSH
20081: CALL_OW 488
20085: NOT
20086: IFFALSE 20090
// exit ;
20088: GO 20197
// ComAnimCustom ( unit , 1 ) ;
20090: LD_VAR 0 1
20094: PPUSH
20095: LD_INT 1
20097: PPUSH
20098: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
20102: LD_VAR 0 8
20106: PPUSH
20107: LD_VAR 0 9
20111: PPUSH
20112: LD_VAR 0 6
20116: PPUSH
20117: LD_VAR 0 7
20121: PPUSH
20122: CALL_OW 330
// repeat wait ( 1 ) ;
20126: LD_INT 1
20128: PPUSH
20129: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
20133: LD_VAR 0 1
20137: PPUSH
20138: CALL_OW 316
20142: PUSH
20143: LD_VAR 0 1
20147: PPUSH
20148: CALL_OW 314
20152: OR
20153: PUSH
20154: LD_VAR 0 1
20158: PPUSH
20159: CALL_OW 302
20163: NOT
20164: OR
20165: PUSH
20166: LD_VAR 0 1
20170: PPUSH
20171: CALL_OW 301
20175: OR
20176: IFFALSE 20126
// RemoveSeeing ( _x , _y , side ) ;
20178: LD_VAR 0 8
20182: PPUSH
20183: LD_VAR 0 9
20187: PPUSH
20188: LD_VAR 0 6
20192: PPUSH
20193: CALL_OW 331
// end ; end_of_file
20197: LD_VAR 0 4
20201: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
20202: LD_VAR 0 1
20206: PPUSH
20207: LD_VAR 0 2
20211: PPUSH
20212: LD_VAR 0 3
20216: PPUSH
20217: LD_VAR 0 4
20221: PPUSH
20222: LD_VAR 0 5
20226: PPUSH
20227: LD_VAR 0 6
20231: PPUSH
20232: CALL 1275 0 6
// end ;
20236: PPOPN 6
20238: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
20239: LD_INT 0
20241: PPUSH
// begin if not units then
20242: LD_VAR 0 1
20246: NOT
20247: IFFALSE 20251
// exit ;
20249: GO 20251
// end ;
20251: PPOPN 7
20253: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
20254: CALL 1250 0 0
// end ; end_of_file
20258: PPOPN 1
20260: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
20261: LD_VAR 0 1
20265: PUSH
20266: LD_INT 200
20268: DOUBLE
20269: GREATEREQUAL
20270: IFFALSE 20278
20272: LD_INT 299
20274: DOUBLE
20275: LESSEQUAL
20276: IFTRUE 20280
20278: GO 20312
20280: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
20281: LD_VAR 0 1
20285: PPUSH
20286: LD_VAR 0 2
20290: PPUSH
20291: LD_VAR 0 3
20295: PPUSH
20296: LD_VAR 0 4
20300: PPUSH
20301: LD_VAR 0 5
20305: PPUSH
20306: CALL 15940 0 5
20310: GO 20389
20312: LD_INT 300
20314: DOUBLE
20315: GREATEREQUAL
20316: IFFALSE 20324
20318: LD_INT 399
20320: DOUBLE
20321: LESSEQUAL
20322: IFTRUE 20326
20324: GO 20388
20326: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
20327: LD_VAR 0 1
20331: PPUSH
20332: LD_VAR 0 2
20336: PPUSH
20337: LD_VAR 0 3
20341: PPUSH
20342: LD_VAR 0 4
20346: PPUSH
20347: LD_VAR 0 5
20351: PPUSH
20352: LD_VAR 0 6
20356: PPUSH
20357: LD_VAR 0 7
20361: PPUSH
20362: LD_VAR 0 8
20366: PPUSH
20367: LD_VAR 0 9
20371: PPUSH
20372: LD_VAR 0 10
20376: PPUSH
20377: LD_VAR 0 11
20381: PPUSH
20382: CALL 13582 0 11
20386: GO 20389
20388: POP
// end ;
20389: PPOPN 11
20391: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
20392: LD_VAR 0 1
20396: PPUSH
20397: LD_VAR 0 2
20401: PPUSH
20402: LD_VAR 0 3
20406: PPUSH
20407: LD_VAR 0 4
20411: PPUSH
20412: LD_VAR 0 5
20416: PPUSH
20417: CALL 15676 0 5
// end ; end_of_file
20421: PPOPN 5
20423: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
20424: LD_INT 0
20426: PPUSH
// ar_miner := 81 ;
20427: LD_ADDR_EXP 77
20431: PUSH
20432: LD_INT 81
20434: ST_TO_ADDR
// ar_crane := 88 ;
20435: LD_ADDR_EXP 76
20439: PUSH
20440: LD_INT 88
20442: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
20443: LD_ADDR_EXP 71
20447: PUSH
20448: LD_INT 89
20450: ST_TO_ADDR
// us_hack := 99 ;
20451: LD_ADDR_EXP 72
20455: PUSH
20456: LD_INT 99
20458: ST_TO_ADDR
// us_artillery := 97 ;
20459: LD_ADDR_EXP 73
20463: PUSH
20464: LD_INT 97
20466: ST_TO_ADDR
// ar_bio_bomb := 91 ;
20467: LD_ADDR_EXP 74
20471: PUSH
20472: LD_INT 91
20474: ST_TO_ADDR
// ar_mortar := 92 ;
20475: LD_ADDR_EXP 75
20479: PUSH
20480: LD_INT 92
20482: ST_TO_ADDR
// ru_flamethrower := 93 ;
20483: LD_ADDR_EXP 78
20487: PUSH
20488: LD_INT 93
20490: ST_TO_ADDR
// ru_radar := 98 ;
20491: LD_ADDR_EXP 70
20495: PUSH
20496: LD_INT 98
20498: ST_TO_ADDR
// tech_Artillery := 80 ;
20499: LD_ADDR_EXP 79
20503: PUSH
20504: LD_INT 80
20506: ST_TO_ADDR
// tech_RadMat := 81 ;
20507: LD_ADDR_EXP 80
20511: PUSH
20512: LD_INT 81
20514: ST_TO_ADDR
// tech_BasicTools := 82 ;
20515: LD_ADDR_EXP 81
20519: PUSH
20520: LD_INT 82
20522: ST_TO_ADDR
// tech_Cargo := 83 ;
20523: LD_ADDR_EXP 82
20527: PUSH
20528: LD_INT 83
20530: ST_TO_ADDR
// tech_Track := 84 ;
20531: LD_ADDR_EXP 83
20535: PUSH
20536: LD_INT 84
20538: ST_TO_ADDR
// tech_Crane := 85 ;
20539: LD_ADDR_EXP 84
20543: PUSH
20544: LD_INT 85
20546: ST_TO_ADDR
// tech_Bulldozer := 86 ;
20547: LD_ADDR_EXP 85
20551: PUSH
20552: LD_INT 86
20554: ST_TO_ADDR
// tech_Hovercraft := 87 ;
20555: LD_ADDR_EXP 86
20559: PUSH
20560: LD_INT 87
20562: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
20563: LD_ADDR_EXP 87
20567: PUSH
20568: LD_INT 88
20570: ST_TO_ADDR
// class_mastodont := 31 ;
20571: LD_ADDR_EXP 88
20575: PUSH
20576: LD_INT 31
20578: ST_TO_ADDR
// class_horse := 21 ;
20579: LD_ADDR_EXP 89
20583: PUSH
20584: LD_INT 21
20586: ST_TO_ADDR
// end ;
20587: LD_VAR 0 1
20591: RET
// every 1 do
20592: GO 20594
20594: DISABLE
// InitGlobalVariables ; end_of_file
20595: CALL 20424 0 0
20599: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20600: LD_INT 0
20602: PPUSH
20603: PPUSH
// if exist_mode then
20604: LD_VAR 0 2
20608: IFFALSE 20633
// unit := CreateCharacter ( prefix & ident ) else
20610: LD_ADDR_VAR 0 5
20614: PUSH
20615: LD_VAR 0 3
20619: PUSH
20620: LD_VAR 0 1
20624: STR
20625: PPUSH
20626: CALL_OW 34
20630: ST_TO_ADDR
20631: GO 20648
// unit := NewCharacter ( ident ) ;
20633: LD_ADDR_VAR 0 5
20637: PUSH
20638: LD_VAR 0 1
20642: PPUSH
20643: CALL_OW 25
20647: ST_TO_ADDR
// result := unit ;
20648: LD_ADDR_VAR 0 4
20652: PUSH
20653: LD_VAR 0 5
20657: ST_TO_ADDR
// end ;
20658: LD_VAR 0 4
20662: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20663: LD_INT 0
20665: PPUSH
20666: PPUSH
// if not side or not nation then
20667: LD_VAR 0 1
20671: NOT
20672: PUSH
20673: LD_VAR 0 2
20677: NOT
20678: OR
20679: IFFALSE 20683
// exit ;
20681: GO 21451
// case nation of nation_american :
20683: LD_VAR 0 2
20687: PUSH
20688: LD_INT 1
20690: DOUBLE
20691: EQUAL
20692: IFTRUE 20696
20694: GO 20910
20696: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20697: LD_ADDR_VAR 0 4
20701: PUSH
20702: LD_INT 35
20704: PUSH
20705: LD_INT 45
20707: PUSH
20708: LD_INT 46
20710: PUSH
20711: LD_INT 47
20713: PUSH
20714: LD_INT 82
20716: PUSH
20717: LD_INT 83
20719: PUSH
20720: LD_INT 84
20722: PUSH
20723: LD_INT 85
20725: PUSH
20726: LD_INT 86
20728: PUSH
20729: LD_INT 1
20731: PUSH
20732: LD_INT 2
20734: PUSH
20735: LD_INT 6
20737: PUSH
20738: LD_INT 15
20740: PUSH
20741: LD_INT 16
20743: PUSH
20744: LD_INT 7
20746: PUSH
20747: LD_INT 12
20749: PUSH
20750: LD_INT 13
20752: PUSH
20753: LD_INT 10
20755: PUSH
20756: LD_INT 14
20758: PUSH
20759: LD_INT 20
20761: PUSH
20762: LD_INT 21
20764: PUSH
20765: LD_INT 22
20767: PUSH
20768: LD_INT 25
20770: PUSH
20771: LD_INT 32
20773: PUSH
20774: LD_INT 27
20776: PUSH
20777: LD_INT 36
20779: PUSH
20780: LD_INT 69
20782: PUSH
20783: LD_INT 39
20785: PUSH
20786: LD_INT 34
20788: PUSH
20789: LD_INT 40
20791: PUSH
20792: LD_INT 48
20794: PUSH
20795: LD_INT 49
20797: PUSH
20798: LD_INT 50
20800: PUSH
20801: LD_INT 51
20803: PUSH
20804: LD_INT 52
20806: PUSH
20807: LD_INT 53
20809: PUSH
20810: LD_INT 54
20812: PUSH
20813: LD_INT 55
20815: PUSH
20816: LD_INT 56
20818: PUSH
20819: LD_INT 57
20821: PUSH
20822: LD_INT 58
20824: PUSH
20825: LD_INT 59
20827: PUSH
20828: LD_INT 60
20830: PUSH
20831: LD_INT 61
20833: PUSH
20834: LD_INT 62
20836: PUSH
20837: LD_INT 80
20839: PUSH
20840: LD_INT 82
20842: PUSH
20843: LD_INT 83
20845: PUSH
20846: LD_INT 84
20848: PUSH
20849: LD_INT 85
20851: PUSH
20852: LD_INT 86
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: ST_TO_ADDR
20908: GO 21375
20910: LD_INT 2
20912: DOUBLE
20913: EQUAL
20914: IFTRUE 20918
20916: GO 21144
20918: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
20919: LD_ADDR_VAR 0 4
20923: PUSH
20924: LD_INT 35
20926: PUSH
20927: LD_INT 45
20929: PUSH
20930: LD_INT 46
20932: PUSH
20933: LD_INT 47
20935: PUSH
20936: LD_INT 82
20938: PUSH
20939: LD_INT 83
20941: PUSH
20942: LD_INT 84
20944: PUSH
20945: LD_INT 85
20947: PUSH
20948: LD_INT 87
20950: PUSH
20951: LD_INT 70
20953: PUSH
20954: LD_INT 1
20956: PUSH
20957: LD_INT 11
20959: PUSH
20960: LD_INT 3
20962: PUSH
20963: LD_INT 4
20965: PUSH
20966: LD_INT 5
20968: PUSH
20969: LD_INT 6
20971: PUSH
20972: LD_INT 15
20974: PUSH
20975: LD_INT 18
20977: PUSH
20978: LD_INT 7
20980: PUSH
20981: LD_INT 17
20983: PUSH
20984: LD_INT 8
20986: PUSH
20987: LD_INT 20
20989: PUSH
20990: LD_INT 21
20992: PUSH
20993: LD_INT 22
20995: PUSH
20996: LD_INT 72
20998: PUSH
20999: LD_INT 26
21001: PUSH
21002: LD_INT 69
21004: PUSH
21005: LD_INT 39
21007: PUSH
21008: LD_INT 40
21010: PUSH
21011: LD_INT 41
21013: PUSH
21014: LD_INT 42
21016: PUSH
21017: LD_INT 43
21019: PUSH
21020: LD_INT 48
21022: PUSH
21023: LD_INT 49
21025: PUSH
21026: LD_INT 50
21028: PUSH
21029: LD_INT 51
21031: PUSH
21032: LD_INT 52
21034: PUSH
21035: LD_INT 53
21037: PUSH
21038: LD_INT 54
21040: PUSH
21041: LD_INT 55
21043: PUSH
21044: LD_INT 56
21046: PUSH
21047: LD_INT 60
21049: PUSH
21050: LD_INT 61
21052: PUSH
21053: LD_INT 62
21055: PUSH
21056: LD_INT 66
21058: PUSH
21059: LD_INT 67
21061: PUSH
21062: LD_INT 68
21064: PUSH
21065: LD_INT 81
21067: PUSH
21068: LD_INT 82
21070: PUSH
21071: LD_INT 83
21073: PUSH
21074: LD_INT 84
21076: PUSH
21077: LD_INT 85
21079: PUSH
21080: LD_INT 87
21082: PUSH
21083: LD_INT 88
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: ST_TO_ADDR
21142: GO 21375
21144: LD_INT 3
21146: DOUBLE
21147: EQUAL
21148: IFTRUE 21152
21150: GO 21374
21152: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21153: LD_ADDR_VAR 0 4
21157: PUSH
21158: LD_INT 46
21160: PUSH
21161: LD_INT 47
21163: PUSH
21164: LD_INT 1
21166: PUSH
21167: LD_INT 2
21169: PUSH
21170: LD_INT 82
21172: PUSH
21173: LD_INT 83
21175: PUSH
21176: LD_INT 84
21178: PUSH
21179: LD_INT 85
21181: PUSH
21182: LD_INT 86
21184: PUSH
21185: LD_INT 11
21187: PUSH
21188: LD_INT 9
21190: PUSH
21191: LD_INT 20
21193: PUSH
21194: LD_INT 19
21196: PUSH
21197: LD_INT 21
21199: PUSH
21200: LD_INT 24
21202: PUSH
21203: LD_INT 22
21205: PUSH
21206: LD_INT 25
21208: PUSH
21209: LD_INT 28
21211: PUSH
21212: LD_INT 29
21214: PUSH
21215: LD_INT 30
21217: PUSH
21218: LD_INT 31
21220: PUSH
21221: LD_INT 37
21223: PUSH
21224: LD_INT 38
21226: PUSH
21227: LD_INT 32
21229: PUSH
21230: LD_INT 27
21232: PUSH
21233: LD_INT 33
21235: PUSH
21236: LD_INT 69
21238: PUSH
21239: LD_INT 39
21241: PUSH
21242: LD_INT 34
21244: PUSH
21245: LD_INT 40
21247: PUSH
21248: LD_INT 71
21250: PUSH
21251: LD_INT 23
21253: PUSH
21254: LD_INT 44
21256: PUSH
21257: LD_INT 48
21259: PUSH
21260: LD_INT 49
21262: PUSH
21263: LD_INT 50
21265: PUSH
21266: LD_INT 51
21268: PUSH
21269: LD_INT 52
21271: PUSH
21272: LD_INT 53
21274: PUSH
21275: LD_INT 54
21277: PUSH
21278: LD_INT 55
21280: PUSH
21281: LD_INT 56
21283: PUSH
21284: LD_INT 57
21286: PUSH
21287: LD_INT 58
21289: PUSH
21290: LD_INT 59
21292: PUSH
21293: LD_INT 63
21295: PUSH
21296: LD_INT 64
21298: PUSH
21299: LD_INT 65
21301: PUSH
21302: LD_INT 82
21304: PUSH
21305: LD_INT 83
21307: PUSH
21308: LD_INT 84
21310: PUSH
21311: LD_INT 85
21313: PUSH
21314: LD_INT 86
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: ST_TO_ADDR
21372: GO 21375
21374: POP
// if state > - 1 and state < 3 then
21375: LD_VAR 0 3
21379: PUSH
21380: LD_INT 1
21382: NEG
21383: GREATER
21384: PUSH
21385: LD_VAR 0 3
21389: PUSH
21390: LD_INT 3
21392: LESS
21393: AND
21394: IFFALSE 21451
// for i in result do
21396: LD_ADDR_VAR 0 5
21400: PUSH
21401: LD_VAR 0 4
21405: PUSH
21406: FOR_IN
21407: IFFALSE 21449
// if GetTech ( i , side ) <> state then
21409: LD_VAR 0 5
21413: PPUSH
21414: LD_VAR 0 1
21418: PPUSH
21419: CALL_OW 321
21423: PUSH
21424: LD_VAR 0 3
21428: NONEQUAL
21429: IFFALSE 21447
// result := result diff i ;
21431: LD_ADDR_VAR 0 4
21435: PUSH
21436: LD_VAR 0 4
21440: PUSH
21441: LD_VAR 0 5
21445: DIFF
21446: ST_TO_ADDR
21447: GO 21406
21449: POP
21450: POP
// end ;
21451: LD_VAR 0 4
21455: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21456: LD_INT 0
21458: PPUSH
21459: PPUSH
21460: PPUSH
// result := true ;
21461: LD_ADDR_VAR 0 3
21465: PUSH
21466: LD_INT 1
21468: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21469: LD_ADDR_VAR 0 5
21473: PUSH
21474: LD_VAR 0 2
21478: PPUSH
21479: CALL_OW 480
21483: ST_TO_ADDR
// if not tmp then
21484: LD_VAR 0 5
21488: NOT
21489: IFFALSE 21493
// exit ;
21491: GO 21542
// for i in tmp do
21493: LD_ADDR_VAR 0 4
21497: PUSH
21498: LD_VAR 0 5
21502: PUSH
21503: FOR_IN
21504: IFFALSE 21540
// if GetTech ( i , side ) <> state_researched then
21506: LD_VAR 0 4
21510: PPUSH
21511: LD_VAR 0 1
21515: PPUSH
21516: CALL_OW 321
21520: PUSH
21521: LD_INT 2
21523: NONEQUAL
21524: IFFALSE 21538
// begin result := false ;
21526: LD_ADDR_VAR 0 3
21530: PUSH
21531: LD_INT 0
21533: ST_TO_ADDR
// exit ;
21534: POP
21535: POP
21536: GO 21542
// end ;
21538: GO 21503
21540: POP
21541: POP
// end ;
21542: LD_VAR 0 3
21546: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21547: LD_INT 0
21549: PPUSH
21550: PPUSH
21551: PPUSH
21552: PPUSH
21553: PPUSH
21554: PPUSH
21555: PPUSH
21556: PPUSH
21557: PPUSH
21558: PPUSH
21559: PPUSH
21560: PPUSH
21561: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21562: LD_VAR 0 1
21566: NOT
21567: PUSH
21568: LD_VAR 0 1
21572: PPUSH
21573: CALL_OW 257
21577: PUSH
21578: LD_INT 9
21580: NONEQUAL
21581: OR
21582: IFFALSE 21586
// exit ;
21584: GO 22159
// side := GetSide ( unit ) ;
21586: LD_ADDR_VAR 0 9
21590: PUSH
21591: LD_VAR 0 1
21595: PPUSH
21596: CALL_OW 255
21600: ST_TO_ADDR
// tech_space := tech_spacanom ;
21601: LD_ADDR_VAR 0 12
21605: PUSH
21606: LD_INT 29
21608: ST_TO_ADDR
// tech_time := tech_taurad ;
21609: LD_ADDR_VAR 0 13
21613: PUSH
21614: LD_INT 28
21616: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21617: LD_ADDR_VAR 0 11
21621: PUSH
21622: LD_VAR 0 1
21626: PPUSH
21627: CALL_OW 310
21631: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21632: LD_VAR 0 11
21636: PPUSH
21637: CALL_OW 247
21641: PUSH
21642: LD_INT 2
21644: EQUAL
21645: IFFALSE 21649
// exit ;
21647: GO 22159
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21649: LD_ADDR_VAR 0 8
21653: PUSH
21654: LD_INT 81
21656: PUSH
21657: LD_VAR 0 9
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 3
21668: PUSH
21669: LD_INT 21
21671: PUSH
21672: LD_INT 3
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PPUSH
21687: CALL_OW 69
21691: ST_TO_ADDR
// if not tmp then
21692: LD_VAR 0 8
21696: NOT
21697: IFFALSE 21701
// exit ;
21699: GO 22159
// if in_unit then
21701: LD_VAR 0 11
21705: IFFALSE 21729
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21707: LD_ADDR_VAR 0 10
21711: PUSH
21712: LD_VAR 0 8
21716: PPUSH
21717: LD_VAR 0 11
21721: PPUSH
21722: CALL_OW 74
21726: ST_TO_ADDR
21727: GO 21749
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21729: LD_ADDR_VAR 0 10
21733: PUSH
21734: LD_VAR 0 8
21738: PPUSH
21739: LD_VAR 0 1
21743: PPUSH
21744: CALL_OW 74
21748: ST_TO_ADDR
// if not enemy then
21749: LD_VAR 0 10
21753: NOT
21754: IFFALSE 21758
// exit ;
21756: GO 22159
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21758: LD_VAR 0 11
21762: PUSH
21763: LD_VAR 0 11
21767: PPUSH
21768: LD_VAR 0 10
21772: PPUSH
21773: CALL_OW 296
21777: PUSH
21778: LD_INT 13
21780: GREATER
21781: AND
21782: PUSH
21783: LD_VAR 0 1
21787: PPUSH
21788: LD_VAR 0 10
21792: PPUSH
21793: CALL_OW 296
21797: PUSH
21798: LD_INT 12
21800: GREATER
21801: OR
21802: IFFALSE 21806
// exit ;
21804: GO 22159
// missile := [ 1 ] ;
21806: LD_ADDR_VAR 0 14
21810: PUSH
21811: LD_INT 1
21813: PUSH
21814: EMPTY
21815: LIST
21816: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21817: LD_VAR 0 9
21821: PPUSH
21822: LD_VAR 0 12
21826: PPUSH
21827: CALL_OW 325
21831: IFFALSE 21860
// missile := Replace ( missile , missile + 1 , 2 ) ;
21833: LD_ADDR_VAR 0 14
21837: PUSH
21838: LD_VAR 0 14
21842: PPUSH
21843: LD_VAR 0 14
21847: PUSH
21848: LD_INT 1
21850: PLUS
21851: PPUSH
21852: LD_INT 2
21854: PPUSH
21855: CALL_OW 1
21859: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21860: LD_VAR 0 9
21864: PPUSH
21865: LD_VAR 0 13
21869: PPUSH
21870: CALL_OW 325
21874: PUSH
21875: LD_VAR 0 10
21879: PPUSH
21880: CALL_OW 255
21884: PPUSH
21885: LD_VAR 0 13
21889: PPUSH
21890: CALL_OW 325
21894: NOT
21895: AND
21896: IFFALSE 21925
// missile := Replace ( missile , missile + 1 , 3 ) ;
21898: LD_ADDR_VAR 0 14
21902: PUSH
21903: LD_VAR 0 14
21907: PPUSH
21908: LD_VAR 0 14
21912: PUSH
21913: LD_INT 1
21915: PLUS
21916: PPUSH
21917: LD_INT 3
21919: PPUSH
21920: CALL_OW 1
21924: ST_TO_ADDR
// if missile < 2 then
21925: LD_VAR 0 14
21929: PUSH
21930: LD_INT 2
21932: LESS
21933: IFFALSE 21937
// exit ;
21935: GO 22159
// x := GetX ( enemy ) ;
21937: LD_ADDR_VAR 0 4
21941: PUSH
21942: LD_VAR 0 10
21946: PPUSH
21947: CALL_OW 250
21951: ST_TO_ADDR
// y := GetY ( enemy ) ;
21952: LD_ADDR_VAR 0 5
21956: PUSH
21957: LD_VAR 0 10
21961: PPUSH
21962: CALL_OW 251
21966: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21967: LD_ADDR_VAR 0 6
21971: PUSH
21972: LD_VAR 0 4
21976: PUSH
21977: LD_INT 1
21979: NEG
21980: PPUSH
21981: LD_INT 1
21983: PPUSH
21984: CALL_OW 12
21988: PLUS
21989: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21990: LD_ADDR_VAR 0 7
21994: PUSH
21995: LD_VAR 0 5
21999: PUSH
22000: LD_INT 1
22002: NEG
22003: PPUSH
22004: LD_INT 1
22006: PPUSH
22007: CALL_OW 12
22011: PLUS
22012: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22013: LD_VAR 0 6
22017: PPUSH
22018: LD_VAR 0 7
22022: PPUSH
22023: CALL_OW 488
22027: NOT
22028: IFFALSE 22050
// begin _x := x ;
22030: LD_ADDR_VAR 0 6
22034: PUSH
22035: LD_VAR 0 4
22039: ST_TO_ADDR
// _y := y ;
22040: LD_ADDR_VAR 0 7
22044: PUSH
22045: LD_VAR 0 5
22049: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22050: LD_ADDR_VAR 0 3
22054: PUSH
22055: LD_INT 1
22057: PPUSH
22058: LD_VAR 0 14
22062: PPUSH
22063: CALL_OW 12
22067: ST_TO_ADDR
// case i of 1 :
22068: LD_VAR 0 3
22072: PUSH
22073: LD_INT 1
22075: DOUBLE
22076: EQUAL
22077: IFTRUE 22081
22079: GO 22098
22081: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22082: LD_VAR 0 1
22086: PPUSH
22087: LD_VAR 0 10
22091: PPUSH
22092: CALL_OW 115
22096: GO 22159
22098: LD_INT 2
22100: DOUBLE
22101: EQUAL
22102: IFTRUE 22106
22104: GO 22128
22106: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22107: LD_VAR 0 1
22111: PPUSH
22112: LD_VAR 0 6
22116: PPUSH
22117: LD_VAR 0 7
22121: PPUSH
22122: CALL_OW 153
22126: GO 22159
22128: LD_INT 3
22130: DOUBLE
22131: EQUAL
22132: IFTRUE 22136
22134: GO 22158
22136: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22137: LD_VAR 0 1
22141: PPUSH
22142: LD_VAR 0 6
22146: PPUSH
22147: LD_VAR 0 7
22151: PPUSH
22152: CALL_OW 154
22156: GO 22159
22158: POP
// end ;
22159: LD_VAR 0 2
22163: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22164: LD_INT 0
22166: PPUSH
22167: PPUSH
22168: PPUSH
22169: PPUSH
22170: PPUSH
22171: PPUSH
// if not unit or not building then
22172: LD_VAR 0 1
22176: NOT
22177: PUSH
22178: LD_VAR 0 2
22182: NOT
22183: OR
22184: IFFALSE 22188
// exit ;
22186: GO 22346
// x := GetX ( building ) ;
22188: LD_ADDR_VAR 0 5
22192: PUSH
22193: LD_VAR 0 2
22197: PPUSH
22198: CALL_OW 250
22202: ST_TO_ADDR
// y := GetY ( building ) ;
22203: LD_ADDR_VAR 0 6
22207: PUSH
22208: LD_VAR 0 2
22212: PPUSH
22213: CALL_OW 251
22217: ST_TO_ADDR
// for i = 0 to 5 do
22218: LD_ADDR_VAR 0 4
22222: PUSH
22223: DOUBLE
22224: LD_INT 0
22226: DEC
22227: ST_TO_ADDR
22228: LD_INT 5
22230: PUSH
22231: FOR_TO
22232: IFFALSE 22344
// begin _x := ShiftX ( x , i , 3 ) ;
22234: LD_ADDR_VAR 0 7
22238: PUSH
22239: LD_VAR 0 5
22243: PPUSH
22244: LD_VAR 0 4
22248: PPUSH
22249: LD_INT 3
22251: PPUSH
22252: CALL_OW 272
22256: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22257: LD_ADDR_VAR 0 8
22261: PUSH
22262: LD_VAR 0 6
22266: PPUSH
22267: LD_VAR 0 4
22271: PPUSH
22272: LD_INT 3
22274: PPUSH
22275: CALL_OW 273
22279: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22280: LD_VAR 0 7
22284: PPUSH
22285: LD_VAR 0 8
22289: PPUSH
22290: CALL_OW 488
22294: NOT
22295: IFFALSE 22299
// continue ;
22297: GO 22231
// if HexInfo ( _x , _y ) = 0 then
22299: LD_VAR 0 7
22303: PPUSH
22304: LD_VAR 0 8
22308: PPUSH
22309: CALL_OW 428
22313: PUSH
22314: LD_INT 0
22316: EQUAL
22317: IFFALSE 22342
// begin ComMoveXY ( unit , _x , _y ) ;
22319: LD_VAR 0 1
22323: PPUSH
22324: LD_VAR 0 7
22328: PPUSH
22329: LD_VAR 0 8
22333: PPUSH
22334: CALL_OW 111
// exit ;
22338: POP
22339: POP
22340: GO 22346
// end ; end ;
22342: GO 22231
22344: POP
22345: POP
// end ;
22346: LD_VAR 0 3
22350: RET
// export function ScanBase ( side , base_area ) ; begin
22351: LD_INT 0
22353: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22354: LD_ADDR_VAR 0 3
22358: PUSH
22359: LD_VAR 0 2
22363: PPUSH
22364: LD_INT 81
22366: PUSH
22367: LD_VAR 0 1
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PPUSH
22376: CALL_OW 70
22380: ST_TO_ADDR
// end ;
22381: LD_VAR 0 3
22385: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22386: LD_INT 0
22388: PPUSH
22389: PPUSH
22390: PPUSH
22391: PPUSH
// result := false ;
22392: LD_ADDR_VAR 0 2
22396: PUSH
22397: LD_INT 0
22399: ST_TO_ADDR
// side := GetSide ( unit ) ;
22400: LD_ADDR_VAR 0 3
22404: PUSH
22405: LD_VAR 0 1
22409: PPUSH
22410: CALL_OW 255
22414: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22415: LD_ADDR_VAR 0 4
22419: PUSH
22420: LD_VAR 0 1
22424: PPUSH
22425: CALL_OW 248
22429: ST_TO_ADDR
// case nat of 1 :
22430: LD_VAR 0 4
22434: PUSH
22435: LD_INT 1
22437: DOUBLE
22438: EQUAL
22439: IFTRUE 22443
22441: GO 22454
22443: POP
// tech := tech_lassight ; 2 :
22444: LD_ADDR_VAR 0 5
22448: PUSH
22449: LD_INT 12
22451: ST_TO_ADDR
22452: GO 22493
22454: LD_INT 2
22456: DOUBLE
22457: EQUAL
22458: IFTRUE 22462
22460: GO 22473
22462: POP
// tech := tech_mortar ; 3 :
22463: LD_ADDR_VAR 0 5
22467: PUSH
22468: LD_INT 41
22470: ST_TO_ADDR
22471: GO 22493
22473: LD_INT 3
22475: DOUBLE
22476: EQUAL
22477: IFTRUE 22481
22479: GO 22492
22481: POP
// tech := tech_bazooka ; end ;
22482: LD_ADDR_VAR 0 5
22486: PUSH
22487: LD_INT 44
22489: ST_TO_ADDR
22490: GO 22493
22492: POP
// if Researched ( side , tech ) then
22493: LD_VAR 0 3
22497: PPUSH
22498: LD_VAR 0 5
22502: PPUSH
22503: CALL_OW 325
22507: IFFALSE 22534
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22509: LD_ADDR_VAR 0 2
22513: PUSH
22514: LD_INT 5
22516: PUSH
22517: LD_INT 8
22519: PUSH
22520: LD_INT 9
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: LIST
22527: PUSH
22528: LD_VAR 0 4
22532: ARRAY
22533: ST_TO_ADDR
// end ;
22534: LD_VAR 0 2
22538: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22539: LD_INT 0
22541: PPUSH
22542: PPUSH
22543: PPUSH
// if not mines then
22544: LD_VAR 0 2
22548: NOT
22549: IFFALSE 22553
// exit ;
22551: GO 22697
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22553: LD_ADDR_VAR 0 5
22557: PUSH
22558: LD_INT 81
22560: PUSH
22561: LD_VAR 0 1
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 3
22572: PUSH
22573: LD_INT 21
22575: PUSH
22576: LD_INT 3
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PPUSH
22591: CALL_OW 69
22595: ST_TO_ADDR
// for i in mines do
22596: LD_ADDR_VAR 0 4
22600: PUSH
22601: LD_VAR 0 2
22605: PUSH
22606: FOR_IN
22607: IFFALSE 22695
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22609: LD_VAR 0 4
22613: PUSH
22614: LD_INT 1
22616: ARRAY
22617: PPUSH
22618: LD_VAR 0 4
22622: PUSH
22623: LD_INT 2
22625: ARRAY
22626: PPUSH
22627: CALL_OW 458
22631: NOT
22632: IFFALSE 22636
// continue ;
22634: GO 22606
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22636: LD_VAR 0 4
22640: PUSH
22641: LD_INT 1
22643: ARRAY
22644: PPUSH
22645: LD_VAR 0 4
22649: PUSH
22650: LD_INT 2
22652: ARRAY
22653: PPUSH
22654: CALL_OW 428
22658: PUSH
22659: LD_VAR 0 5
22663: IN
22664: IFFALSE 22693
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22666: LD_VAR 0 4
22670: PUSH
22671: LD_INT 1
22673: ARRAY
22674: PPUSH
22675: LD_VAR 0 4
22679: PUSH
22680: LD_INT 2
22682: ARRAY
22683: PPUSH
22684: LD_VAR 0 1
22688: PPUSH
22689: CALL_OW 456
// end ;
22693: GO 22606
22695: POP
22696: POP
// end ;
22697: LD_VAR 0 3
22701: RET
// export function Count ( array ) ; var i ; begin
22702: LD_INT 0
22704: PPUSH
22705: PPUSH
// result := 0 ;
22706: LD_ADDR_VAR 0 2
22710: PUSH
22711: LD_INT 0
22713: ST_TO_ADDR
// for i in array do
22714: LD_ADDR_VAR 0 3
22718: PUSH
22719: LD_VAR 0 1
22723: PUSH
22724: FOR_IN
22725: IFFALSE 22749
// if i then
22727: LD_VAR 0 3
22731: IFFALSE 22747
// result := result + 1 ;
22733: LD_ADDR_VAR 0 2
22737: PUSH
22738: LD_VAR 0 2
22742: PUSH
22743: LD_INT 1
22745: PLUS
22746: ST_TO_ADDR
22747: GO 22724
22749: POP
22750: POP
// end ;
22751: LD_VAR 0 2
22755: RET
// export function IsEmpty ( building ) ; begin
22756: LD_INT 0
22758: PPUSH
// if not building then
22759: LD_VAR 0 1
22763: NOT
22764: IFFALSE 22768
// exit ;
22766: GO 22811
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22768: LD_ADDR_VAR 0 2
22772: PUSH
22773: LD_VAR 0 1
22777: PUSH
22778: LD_INT 22
22780: PUSH
22781: LD_VAR 0 1
22785: PPUSH
22786: CALL_OW 255
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: PUSH
22795: LD_INT 58
22797: PUSH
22798: EMPTY
22799: LIST
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PPUSH
22805: CALL_OW 69
22809: IN
22810: ST_TO_ADDR
// end ;
22811: LD_VAR 0 2
22815: RET
// export function IsNotFull ( building ) ; var places ; begin
22816: LD_INT 0
22818: PPUSH
22819: PPUSH
// if not building then
22820: LD_VAR 0 1
22824: NOT
22825: IFFALSE 22829
// exit ;
22827: GO 23000
// result := false ;
22829: LD_ADDR_VAR 0 2
22833: PUSH
22834: LD_INT 0
22836: ST_TO_ADDR
// places := 0 ;
22837: LD_ADDR_VAR 0 3
22841: PUSH
22842: LD_INT 0
22844: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
22845: LD_VAR 0 1
22849: PPUSH
22850: CALL_OW 266
22854: PUSH
22855: LD_INT 0
22857: DOUBLE
22858: EQUAL
22859: IFTRUE 22917
22861: LD_INT 1
22863: DOUBLE
22864: EQUAL
22865: IFTRUE 22917
22867: LD_INT 6
22869: DOUBLE
22870: EQUAL
22871: IFTRUE 22917
22873: LD_INT 7
22875: DOUBLE
22876: EQUAL
22877: IFTRUE 22917
22879: LD_INT 8
22881: DOUBLE
22882: EQUAL
22883: IFTRUE 22917
22885: LD_INT 4
22887: DOUBLE
22888: EQUAL
22889: IFTRUE 22917
22891: LD_INT 5
22893: DOUBLE
22894: EQUAL
22895: IFTRUE 22917
22897: LD_INT 2
22899: DOUBLE
22900: EQUAL
22901: IFTRUE 22917
22903: LD_INT 3
22905: DOUBLE
22906: EQUAL
22907: IFTRUE 22917
22909: LD_INT 35
22911: DOUBLE
22912: EQUAL
22913: IFTRUE 22917
22915: GO 22928
22917: POP
// places := 6 ; b_bunker , b_breastwork :
22918: LD_ADDR_VAR 0 3
22922: PUSH
22923: LD_INT 6
22925: ST_TO_ADDR
22926: GO 22973
22928: LD_INT 32
22930: DOUBLE
22931: EQUAL
22932: IFTRUE 22942
22934: LD_INT 31
22936: DOUBLE
22937: EQUAL
22938: IFTRUE 22942
22940: GO 22953
22942: POP
// places := 1 ; b_control_tower :
22943: LD_ADDR_VAR 0 3
22947: PUSH
22948: LD_INT 1
22950: ST_TO_ADDR
22951: GO 22973
22953: LD_INT 36
22955: DOUBLE
22956: EQUAL
22957: IFTRUE 22961
22959: GO 22972
22961: POP
// places := 3 ; end ;
22962: LD_ADDR_VAR 0 3
22966: PUSH
22967: LD_INT 3
22969: ST_TO_ADDR
22970: GO 22973
22972: POP
// if places then
22973: LD_VAR 0 3
22977: IFFALSE 23000
// result := UnitsInside ( building ) < places ;
22979: LD_ADDR_VAR 0 2
22983: PUSH
22984: LD_VAR 0 1
22988: PPUSH
22989: CALL_OW 313
22993: PUSH
22994: LD_VAR 0 3
22998: LESS
22999: ST_TO_ADDR
// end ;
23000: LD_VAR 0 2
23004: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23005: LD_INT 0
23007: PPUSH
23008: PPUSH
23009: PPUSH
23010: PPUSH
// tmp := [ ] ;
23011: LD_ADDR_VAR 0 3
23015: PUSH
23016: EMPTY
23017: ST_TO_ADDR
// list := [ ] ;
23018: LD_ADDR_VAR 0 5
23022: PUSH
23023: EMPTY
23024: ST_TO_ADDR
// for i = 16 to 25 do
23025: LD_ADDR_VAR 0 4
23029: PUSH
23030: DOUBLE
23031: LD_INT 16
23033: DEC
23034: ST_TO_ADDR
23035: LD_INT 25
23037: PUSH
23038: FOR_TO
23039: IFFALSE 23112
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23041: LD_ADDR_VAR 0 3
23045: PUSH
23046: LD_VAR 0 3
23050: PUSH
23051: LD_INT 22
23053: PUSH
23054: LD_VAR 0 1
23058: PPUSH
23059: CALL_OW 255
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: LD_INT 91
23070: PUSH
23071: LD_VAR 0 1
23075: PUSH
23076: LD_INT 6
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 30
23086: PUSH
23087: LD_VAR 0 4
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: LIST
23100: PUSH
23101: EMPTY
23102: LIST
23103: PPUSH
23104: CALL_OW 69
23108: ADD
23109: ST_TO_ADDR
23110: GO 23038
23112: POP
23113: POP
// for i = 1 to tmp do
23114: LD_ADDR_VAR 0 4
23118: PUSH
23119: DOUBLE
23120: LD_INT 1
23122: DEC
23123: ST_TO_ADDR
23124: LD_VAR 0 3
23128: PUSH
23129: FOR_TO
23130: IFFALSE 23218
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23132: LD_ADDR_VAR 0 5
23136: PUSH
23137: LD_VAR 0 5
23141: PUSH
23142: LD_VAR 0 3
23146: PUSH
23147: LD_VAR 0 4
23151: ARRAY
23152: PPUSH
23153: CALL_OW 266
23157: PUSH
23158: LD_VAR 0 3
23162: PUSH
23163: LD_VAR 0 4
23167: ARRAY
23168: PPUSH
23169: CALL_OW 250
23173: PUSH
23174: LD_VAR 0 3
23178: PUSH
23179: LD_VAR 0 4
23183: ARRAY
23184: PPUSH
23185: CALL_OW 251
23189: PUSH
23190: LD_VAR 0 3
23194: PUSH
23195: LD_VAR 0 4
23199: ARRAY
23200: PPUSH
23201: CALL_OW 254
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: PUSH
23212: EMPTY
23213: LIST
23214: ADD
23215: ST_TO_ADDR
23216: GO 23129
23218: POP
23219: POP
// result := list ;
23220: LD_ADDR_VAR 0 2
23224: PUSH
23225: LD_VAR 0 5
23229: ST_TO_ADDR
// end ;
23230: LD_VAR 0 2
23234: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23235: LD_INT 0
23237: PPUSH
23238: PPUSH
23239: PPUSH
23240: PPUSH
23241: PPUSH
23242: PPUSH
23243: PPUSH
// if not factory then
23244: LD_VAR 0 1
23248: NOT
23249: IFFALSE 23253
// exit ;
23251: GO 23846
// if control = control_apeman then
23253: LD_VAR 0 4
23257: PUSH
23258: LD_INT 5
23260: EQUAL
23261: IFFALSE 23370
// begin tmp := UnitsInside ( factory ) ;
23263: LD_ADDR_VAR 0 8
23267: PUSH
23268: LD_VAR 0 1
23272: PPUSH
23273: CALL_OW 313
23277: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23278: LD_VAR 0 8
23282: PPUSH
23283: LD_INT 25
23285: PUSH
23286: LD_INT 12
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PPUSH
23293: CALL_OW 72
23297: NOT
23298: IFFALSE 23308
// control := control_manual ;
23300: LD_ADDR_VAR 0 4
23304: PUSH
23305: LD_INT 1
23307: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23308: LD_ADDR_VAR 0 8
23312: PUSH
23313: LD_VAR 0 1
23317: PPUSH
23318: CALL 23005 0 1
23322: ST_TO_ADDR
// if tmp then
23323: LD_VAR 0 8
23327: IFFALSE 23370
// begin for i in tmp do
23329: LD_ADDR_VAR 0 7
23333: PUSH
23334: LD_VAR 0 8
23338: PUSH
23339: FOR_IN
23340: IFFALSE 23368
// if i [ 1 ] = b_ext_radio then
23342: LD_VAR 0 7
23346: PUSH
23347: LD_INT 1
23349: ARRAY
23350: PUSH
23351: LD_INT 22
23353: EQUAL
23354: IFFALSE 23366
// begin control := control_remote ;
23356: LD_ADDR_VAR 0 4
23360: PUSH
23361: LD_INT 2
23363: ST_TO_ADDR
// break ;
23364: GO 23368
// end ;
23366: GO 23339
23368: POP
23369: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23370: LD_VAR 0 1
23374: PPUSH
23375: LD_VAR 0 2
23379: PPUSH
23380: LD_VAR 0 3
23384: PPUSH
23385: LD_VAR 0 4
23389: PPUSH
23390: LD_VAR 0 5
23394: PPUSH
23395: CALL_OW 448
23399: IFFALSE 23434
// begin result := [ chassis , engine , control , weapon ] ;
23401: LD_ADDR_VAR 0 6
23405: PUSH
23406: LD_VAR 0 2
23410: PUSH
23411: LD_VAR 0 3
23415: PUSH
23416: LD_VAR 0 4
23420: PUSH
23421: LD_VAR 0 5
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: ST_TO_ADDR
// exit ;
23432: GO 23846
// end ; _chassis := AvailableChassisList ( factory ) ;
23434: LD_ADDR_VAR 0 9
23438: PUSH
23439: LD_VAR 0 1
23443: PPUSH
23444: CALL_OW 475
23448: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23449: LD_ADDR_VAR 0 11
23453: PUSH
23454: LD_VAR 0 1
23458: PPUSH
23459: CALL_OW 476
23463: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23464: LD_ADDR_VAR 0 12
23468: PUSH
23469: LD_VAR 0 1
23473: PPUSH
23474: CALL_OW 477
23478: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23479: LD_ADDR_VAR 0 10
23483: PUSH
23484: LD_VAR 0 1
23488: PPUSH
23489: CALL_OW 478
23493: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23494: LD_VAR 0 9
23498: NOT
23499: PUSH
23500: LD_VAR 0 11
23504: NOT
23505: OR
23506: PUSH
23507: LD_VAR 0 12
23511: NOT
23512: OR
23513: PUSH
23514: LD_VAR 0 10
23518: NOT
23519: OR
23520: IFFALSE 23555
// begin result := [ chassis , engine , control , weapon ] ;
23522: LD_ADDR_VAR 0 6
23526: PUSH
23527: LD_VAR 0 2
23531: PUSH
23532: LD_VAR 0 3
23536: PUSH
23537: LD_VAR 0 4
23541: PUSH
23542: LD_VAR 0 5
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: ST_TO_ADDR
// exit ;
23553: GO 23846
// end ; if not chassis in _chassis then
23555: LD_VAR 0 2
23559: PUSH
23560: LD_VAR 0 9
23564: IN
23565: NOT
23566: IFFALSE 23592
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23568: LD_ADDR_VAR 0 2
23572: PUSH
23573: LD_VAR 0 9
23577: PUSH
23578: LD_INT 1
23580: PPUSH
23581: LD_VAR 0 9
23585: PPUSH
23586: CALL_OW 12
23590: ARRAY
23591: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23592: LD_VAR 0 2
23596: PPUSH
23597: LD_VAR 0 3
23601: PPUSH
23602: CALL 23851 0 2
23606: NOT
23607: IFFALSE 23666
// repeat engine := _engine [ 1 ] ;
23609: LD_ADDR_VAR 0 3
23613: PUSH
23614: LD_VAR 0 11
23618: PUSH
23619: LD_INT 1
23621: ARRAY
23622: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23623: LD_ADDR_VAR 0 11
23627: PUSH
23628: LD_VAR 0 11
23632: PPUSH
23633: LD_INT 1
23635: PPUSH
23636: CALL_OW 3
23640: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23641: LD_VAR 0 2
23645: PPUSH
23646: LD_VAR 0 3
23650: PPUSH
23651: CALL 23851 0 2
23655: PUSH
23656: LD_VAR 0 11
23660: PUSH
23661: EMPTY
23662: EQUAL
23663: OR
23664: IFFALSE 23609
// if not control in _control then
23666: LD_VAR 0 4
23670: PUSH
23671: LD_VAR 0 12
23675: IN
23676: NOT
23677: IFFALSE 23703
// control := _control [ rand ( 1 , _control ) ] ;
23679: LD_ADDR_VAR 0 4
23683: PUSH
23684: LD_VAR 0 12
23688: PUSH
23689: LD_INT 1
23691: PPUSH
23692: LD_VAR 0 12
23696: PPUSH
23697: CALL_OW 12
23701: ARRAY
23702: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23703: LD_VAR 0 2
23707: PPUSH
23708: LD_VAR 0 5
23712: PPUSH
23713: CALL 24071 0 2
23717: NOT
23718: IFFALSE 23777
// repeat weapon := _weapon [ 1 ] ;
23720: LD_ADDR_VAR 0 5
23724: PUSH
23725: LD_VAR 0 10
23729: PUSH
23730: LD_INT 1
23732: ARRAY
23733: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23734: LD_ADDR_VAR 0 10
23738: PUSH
23739: LD_VAR 0 10
23743: PPUSH
23744: LD_INT 1
23746: PPUSH
23747: CALL_OW 3
23751: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23752: LD_VAR 0 2
23756: PPUSH
23757: LD_VAR 0 5
23761: PPUSH
23762: CALL 24071 0 2
23766: PUSH
23767: LD_VAR 0 10
23771: PUSH
23772: EMPTY
23773: EQUAL
23774: OR
23775: IFFALSE 23720
// result := [ ] ;
23777: LD_ADDR_VAR 0 6
23781: PUSH
23782: EMPTY
23783: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23784: LD_VAR 0 1
23788: PPUSH
23789: LD_VAR 0 2
23793: PPUSH
23794: LD_VAR 0 3
23798: PPUSH
23799: LD_VAR 0 4
23803: PPUSH
23804: LD_VAR 0 5
23808: PPUSH
23809: CALL_OW 448
23813: IFFALSE 23846
// result := [ chassis , engine , control , weapon ] ;
23815: LD_ADDR_VAR 0 6
23819: PUSH
23820: LD_VAR 0 2
23824: PUSH
23825: LD_VAR 0 3
23829: PUSH
23830: LD_VAR 0 4
23834: PUSH
23835: LD_VAR 0 5
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: ST_TO_ADDR
// end ;
23846: LD_VAR 0 6
23850: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23851: LD_INT 0
23853: PPUSH
// if not chassis or not engine then
23854: LD_VAR 0 1
23858: NOT
23859: PUSH
23860: LD_VAR 0 2
23864: NOT
23865: OR
23866: IFFALSE 23870
// exit ;
23868: GO 24066
// case engine of engine_solar :
23870: LD_VAR 0 2
23874: PUSH
23875: LD_INT 2
23877: DOUBLE
23878: EQUAL
23879: IFTRUE 23883
23881: GO 23921
23883: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23884: LD_ADDR_VAR 0 3
23888: PUSH
23889: LD_INT 11
23891: PUSH
23892: LD_INT 12
23894: PUSH
23895: LD_INT 13
23897: PUSH
23898: LD_INT 14
23900: PUSH
23901: LD_INT 1
23903: PUSH
23904: LD_INT 2
23906: PUSH
23907: LD_INT 3
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: ST_TO_ADDR
23919: GO 24050
23921: LD_INT 1
23923: DOUBLE
23924: EQUAL
23925: IFTRUE 23929
23927: GO 23991
23929: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23930: LD_ADDR_VAR 0 3
23934: PUSH
23935: LD_INT 11
23937: PUSH
23938: LD_INT 12
23940: PUSH
23941: LD_INT 13
23943: PUSH
23944: LD_INT 14
23946: PUSH
23947: LD_INT 1
23949: PUSH
23950: LD_INT 2
23952: PUSH
23953: LD_INT 3
23955: PUSH
23956: LD_INT 4
23958: PUSH
23959: LD_INT 5
23961: PUSH
23962: LD_INT 21
23964: PUSH
23965: LD_INT 23
23967: PUSH
23968: LD_INT 22
23970: PUSH
23971: LD_INT 24
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: ST_TO_ADDR
23989: GO 24050
23991: LD_INT 3
23993: DOUBLE
23994: EQUAL
23995: IFTRUE 23999
23997: GO 24049
23999: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24000: LD_ADDR_VAR 0 3
24004: PUSH
24005: LD_INT 13
24007: PUSH
24008: LD_INT 14
24010: PUSH
24011: LD_INT 2
24013: PUSH
24014: LD_INT 3
24016: PUSH
24017: LD_INT 4
24019: PUSH
24020: LD_INT 5
24022: PUSH
24023: LD_INT 21
24025: PUSH
24026: LD_INT 22
24028: PUSH
24029: LD_INT 23
24031: PUSH
24032: LD_INT 24
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: ST_TO_ADDR
24047: GO 24050
24049: POP
// result := ( chassis in result ) ;
24050: LD_ADDR_VAR 0 3
24054: PUSH
24055: LD_VAR 0 1
24059: PUSH
24060: LD_VAR 0 3
24064: IN
24065: ST_TO_ADDR
// end ;
24066: LD_VAR 0 3
24070: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24071: LD_INT 0
24073: PPUSH
// if not chassis or not weapon then
24074: LD_VAR 0 1
24078: NOT
24079: PUSH
24080: LD_VAR 0 2
24084: NOT
24085: OR
24086: IFFALSE 24090
// exit ;
24088: GO 25152
// case weapon of us_machine_gun :
24090: LD_VAR 0 2
24094: PUSH
24095: LD_INT 2
24097: DOUBLE
24098: EQUAL
24099: IFTRUE 24103
24101: GO 24133
24103: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24104: LD_ADDR_VAR 0 3
24108: PUSH
24109: LD_INT 1
24111: PUSH
24112: LD_INT 2
24114: PUSH
24115: LD_INT 3
24117: PUSH
24118: LD_INT 4
24120: PUSH
24121: LD_INT 5
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: ST_TO_ADDR
24131: GO 25136
24133: LD_INT 3
24135: DOUBLE
24136: EQUAL
24137: IFTRUE 24141
24139: GO 24171
24141: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24142: LD_ADDR_VAR 0 3
24146: PUSH
24147: LD_INT 1
24149: PUSH
24150: LD_INT 2
24152: PUSH
24153: LD_INT 3
24155: PUSH
24156: LD_INT 4
24158: PUSH
24159: LD_INT 5
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: ST_TO_ADDR
24169: GO 25136
24171: LD_INT 11
24173: DOUBLE
24174: EQUAL
24175: IFTRUE 24179
24177: GO 24209
24179: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24180: LD_ADDR_VAR 0 3
24184: PUSH
24185: LD_INT 1
24187: PUSH
24188: LD_INT 2
24190: PUSH
24191: LD_INT 3
24193: PUSH
24194: LD_INT 4
24196: PUSH
24197: LD_INT 5
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: ST_TO_ADDR
24207: GO 25136
24209: LD_INT 4
24211: DOUBLE
24212: EQUAL
24213: IFTRUE 24217
24215: GO 24243
24217: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24218: LD_ADDR_VAR 0 3
24222: PUSH
24223: LD_INT 2
24225: PUSH
24226: LD_INT 3
24228: PUSH
24229: LD_INT 4
24231: PUSH
24232: LD_INT 5
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: ST_TO_ADDR
24241: GO 25136
24243: LD_INT 5
24245: DOUBLE
24246: EQUAL
24247: IFTRUE 24251
24249: GO 24277
24251: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24252: LD_ADDR_VAR 0 3
24256: PUSH
24257: LD_INT 2
24259: PUSH
24260: LD_INT 3
24262: PUSH
24263: LD_INT 4
24265: PUSH
24266: LD_INT 5
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: ST_TO_ADDR
24275: GO 25136
24277: LD_INT 9
24279: DOUBLE
24280: EQUAL
24281: IFTRUE 24285
24283: GO 24311
24285: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24286: LD_ADDR_VAR 0 3
24290: PUSH
24291: LD_INT 2
24293: PUSH
24294: LD_INT 3
24296: PUSH
24297: LD_INT 4
24299: PUSH
24300: LD_INT 5
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: ST_TO_ADDR
24309: GO 25136
24311: LD_INT 7
24313: DOUBLE
24314: EQUAL
24315: IFTRUE 24319
24317: GO 24345
24319: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24320: LD_ADDR_VAR 0 3
24324: PUSH
24325: LD_INT 2
24327: PUSH
24328: LD_INT 3
24330: PUSH
24331: LD_INT 4
24333: PUSH
24334: LD_INT 5
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: ST_TO_ADDR
24343: GO 25136
24345: LD_INT 12
24347: DOUBLE
24348: EQUAL
24349: IFTRUE 24353
24351: GO 24379
24353: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24354: LD_ADDR_VAR 0 3
24358: PUSH
24359: LD_INT 2
24361: PUSH
24362: LD_INT 3
24364: PUSH
24365: LD_INT 4
24367: PUSH
24368: LD_INT 5
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: ST_TO_ADDR
24377: GO 25136
24379: LD_INT 13
24381: DOUBLE
24382: EQUAL
24383: IFTRUE 24387
24385: GO 24413
24387: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24388: LD_ADDR_VAR 0 3
24392: PUSH
24393: LD_INT 2
24395: PUSH
24396: LD_INT 3
24398: PUSH
24399: LD_INT 4
24401: PUSH
24402: LD_INT 5
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: ST_TO_ADDR
24411: GO 25136
24413: LD_INT 14
24415: DOUBLE
24416: EQUAL
24417: IFTRUE 24421
24419: GO 24439
24421: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24422: LD_ADDR_VAR 0 3
24426: PUSH
24427: LD_INT 4
24429: PUSH
24430: LD_INT 5
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: ST_TO_ADDR
24437: GO 25136
24439: LD_INT 6
24441: DOUBLE
24442: EQUAL
24443: IFTRUE 24447
24445: GO 24465
24447: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24448: LD_ADDR_VAR 0 3
24452: PUSH
24453: LD_INT 4
24455: PUSH
24456: LD_INT 5
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: ST_TO_ADDR
24463: GO 25136
24465: LD_INT 10
24467: DOUBLE
24468: EQUAL
24469: IFTRUE 24473
24471: GO 24491
24473: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24474: LD_ADDR_VAR 0 3
24478: PUSH
24479: LD_INT 4
24481: PUSH
24482: LD_INT 5
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: ST_TO_ADDR
24489: GO 25136
24491: LD_INT 22
24493: DOUBLE
24494: EQUAL
24495: IFTRUE 24499
24497: GO 24525
24499: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24500: LD_ADDR_VAR 0 3
24504: PUSH
24505: LD_INT 11
24507: PUSH
24508: LD_INT 12
24510: PUSH
24511: LD_INT 13
24513: PUSH
24514: LD_INT 14
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: ST_TO_ADDR
24523: GO 25136
24525: LD_INT 23
24527: DOUBLE
24528: EQUAL
24529: IFTRUE 24533
24531: GO 24559
24533: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24534: LD_ADDR_VAR 0 3
24538: PUSH
24539: LD_INT 11
24541: PUSH
24542: LD_INT 12
24544: PUSH
24545: LD_INT 13
24547: PUSH
24548: LD_INT 14
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: ST_TO_ADDR
24557: GO 25136
24559: LD_INT 24
24561: DOUBLE
24562: EQUAL
24563: IFTRUE 24567
24565: GO 24593
24567: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24568: LD_ADDR_VAR 0 3
24572: PUSH
24573: LD_INT 11
24575: PUSH
24576: LD_INT 12
24578: PUSH
24579: LD_INT 13
24581: PUSH
24582: LD_INT 14
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: ST_TO_ADDR
24591: GO 25136
24593: LD_INT 30
24595: DOUBLE
24596: EQUAL
24597: IFTRUE 24601
24599: GO 24627
24601: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24602: LD_ADDR_VAR 0 3
24606: PUSH
24607: LD_INT 11
24609: PUSH
24610: LD_INT 12
24612: PUSH
24613: LD_INT 13
24615: PUSH
24616: LD_INT 14
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: ST_TO_ADDR
24625: GO 25136
24627: LD_INT 25
24629: DOUBLE
24630: EQUAL
24631: IFTRUE 24635
24633: GO 24653
24635: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24636: LD_ADDR_VAR 0 3
24640: PUSH
24641: LD_INT 13
24643: PUSH
24644: LD_INT 14
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: ST_TO_ADDR
24651: GO 25136
24653: LD_INT 27
24655: DOUBLE
24656: EQUAL
24657: IFTRUE 24661
24659: GO 24679
24661: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
24662: LD_ADDR_VAR 0 3
24666: PUSH
24667: LD_INT 13
24669: PUSH
24670: LD_INT 14
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: ST_TO_ADDR
24677: GO 25136
24679: LD_EXP 75
24683: DOUBLE
24684: EQUAL
24685: IFTRUE 24689
24687: GO 24715
24689: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24690: LD_ADDR_VAR 0 3
24694: PUSH
24695: LD_INT 11
24697: PUSH
24698: LD_INT 12
24700: PUSH
24701: LD_INT 13
24703: PUSH
24704: LD_INT 14
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: ST_TO_ADDR
24713: GO 25136
24715: LD_INT 28
24717: DOUBLE
24718: EQUAL
24719: IFTRUE 24723
24721: GO 24741
24723: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24724: LD_ADDR_VAR 0 3
24728: PUSH
24729: LD_INT 13
24731: PUSH
24732: LD_INT 14
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: ST_TO_ADDR
24739: GO 25136
24741: LD_INT 29
24743: DOUBLE
24744: EQUAL
24745: IFTRUE 24749
24747: GO 24767
24749: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24750: LD_ADDR_VAR 0 3
24754: PUSH
24755: LD_INT 13
24757: PUSH
24758: LD_INT 14
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: ST_TO_ADDR
24765: GO 25136
24767: LD_INT 31
24769: DOUBLE
24770: EQUAL
24771: IFTRUE 24775
24773: GO 24793
24775: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24776: LD_ADDR_VAR 0 3
24780: PUSH
24781: LD_INT 13
24783: PUSH
24784: LD_INT 14
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: ST_TO_ADDR
24791: GO 25136
24793: LD_INT 26
24795: DOUBLE
24796: EQUAL
24797: IFTRUE 24801
24799: GO 24819
24801: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24802: LD_ADDR_VAR 0 3
24806: PUSH
24807: LD_INT 13
24809: PUSH
24810: LD_INT 14
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: ST_TO_ADDR
24817: GO 25136
24819: LD_INT 42
24821: DOUBLE
24822: EQUAL
24823: IFTRUE 24827
24825: GO 24853
24827: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24828: LD_ADDR_VAR 0 3
24832: PUSH
24833: LD_INT 21
24835: PUSH
24836: LD_INT 22
24838: PUSH
24839: LD_INT 23
24841: PUSH
24842: LD_INT 24
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: ST_TO_ADDR
24851: GO 25136
24853: LD_INT 43
24855: DOUBLE
24856: EQUAL
24857: IFTRUE 24861
24859: GO 24887
24861: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24862: LD_ADDR_VAR 0 3
24866: PUSH
24867: LD_INT 21
24869: PUSH
24870: LD_INT 22
24872: PUSH
24873: LD_INT 23
24875: PUSH
24876: LD_INT 24
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: ST_TO_ADDR
24885: GO 25136
24887: LD_INT 44
24889: DOUBLE
24890: EQUAL
24891: IFTRUE 24895
24893: GO 24921
24895: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24896: LD_ADDR_VAR 0 3
24900: PUSH
24901: LD_INT 21
24903: PUSH
24904: LD_INT 22
24906: PUSH
24907: LD_INT 23
24909: PUSH
24910: LD_INT 24
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: ST_TO_ADDR
24919: GO 25136
24921: LD_INT 45
24923: DOUBLE
24924: EQUAL
24925: IFTRUE 24929
24927: GO 24955
24929: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24930: LD_ADDR_VAR 0 3
24934: PUSH
24935: LD_INT 21
24937: PUSH
24938: LD_INT 22
24940: PUSH
24941: LD_INT 23
24943: PUSH
24944: LD_INT 24
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: ST_TO_ADDR
24953: GO 25136
24955: LD_INT 49
24957: DOUBLE
24958: EQUAL
24959: IFTRUE 24963
24961: GO 24989
24963: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24964: LD_ADDR_VAR 0 3
24968: PUSH
24969: LD_INT 21
24971: PUSH
24972: LD_INT 22
24974: PUSH
24975: LD_INT 23
24977: PUSH
24978: LD_INT 24
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: ST_TO_ADDR
24987: GO 25136
24989: LD_INT 51
24991: DOUBLE
24992: EQUAL
24993: IFTRUE 24997
24995: GO 25023
24997: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24998: LD_ADDR_VAR 0 3
25002: PUSH
25003: LD_INT 21
25005: PUSH
25006: LD_INT 22
25008: PUSH
25009: LD_INT 23
25011: PUSH
25012: LD_INT 24
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: ST_TO_ADDR
25021: GO 25136
25023: LD_INT 52
25025: DOUBLE
25026: EQUAL
25027: IFTRUE 25031
25029: GO 25057
25031: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25032: LD_ADDR_VAR 0 3
25036: PUSH
25037: LD_INT 21
25039: PUSH
25040: LD_INT 22
25042: PUSH
25043: LD_INT 23
25045: PUSH
25046: LD_INT 24
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: ST_TO_ADDR
25055: GO 25136
25057: LD_INT 53
25059: DOUBLE
25060: EQUAL
25061: IFTRUE 25065
25063: GO 25083
25065: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25066: LD_ADDR_VAR 0 3
25070: PUSH
25071: LD_INT 23
25073: PUSH
25074: LD_INT 24
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: ST_TO_ADDR
25081: GO 25136
25083: LD_INT 46
25085: DOUBLE
25086: EQUAL
25087: IFTRUE 25091
25089: GO 25109
25091: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25092: LD_ADDR_VAR 0 3
25096: PUSH
25097: LD_INT 23
25099: PUSH
25100: LD_INT 24
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: ST_TO_ADDR
25107: GO 25136
25109: LD_INT 47
25111: DOUBLE
25112: EQUAL
25113: IFTRUE 25117
25115: GO 25135
25117: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25118: LD_ADDR_VAR 0 3
25122: PUSH
25123: LD_INT 23
25125: PUSH
25126: LD_INT 24
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: ST_TO_ADDR
25133: GO 25136
25135: POP
// result := ( chassis in result ) ;
25136: LD_ADDR_VAR 0 3
25140: PUSH
25141: LD_VAR 0 1
25145: PUSH
25146: LD_VAR 0 3
25150: IN
25151: ST_TO_ADDR
// end ;
25152: LD_VAR 0 3
25156: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25157: LD_INT 0
25159: PPUSH
25160: PPUSH
25161: PPUSH
25162: PPUSH
25163: PPUSH
25164: PPUSH
25165: PPUSH
// result := array ;
25166: LD_ADDR_VAR 0 5
25170: PUSH
25171: LD_VAR 0 1
25175: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25176: LD_VAR 0 1
25180: NOT
25181: PUSH
25182: LD_VAR 0 2
25186: NOT
25187: OR
25188: PUSH
25189: LD_VAR 0 3
25193: NOT
25194: OR
25195: PUSH
25196: LD_VAR 0 2
25200: PUSH
25201: LD_VAR 0 1
25205: GREATER
25206: OR
25207: PUSH
25208: LD_VAR 0 3
25212: PUSH
25213: LD_VAR 0 1
25217: GREATER
25218: OR
25219: IFFALSE 25223
// exit ;
25221: GO 25519
// if direction then
25223: LD_VAR 0 4
25227: IFFALSE 25291
// begin d := 1 ;
25229: LD_ADDR_VAR 0 9
25233: PUSH
25234: LD_INT 1
25236: ST_TO_ADDR
// if i_from > i_to then
25237: LD_VAR 0 2
25241: PUSH
25242: LD_VAR 0 3
25246: GREATER
25247: IFFALSE 25273
// length := ( array - i_from ) + i_to else
25249: LD_ADDR_VAR 0 11
25253: PUSH
25254: LD_VAR 0 1
25258: PUSH
25259: LD_VAR 0 2
25263: MINUS
25264: PUSH
25265: LD_VAR 0 3
25269: PLUS
25270: ST_TO_ADDR
25271: GO 25289
// length := i_to - i_from ;
25273: LD_ADDR_VAR 0 11
25277: PUSH
25278: LD_VAR 0 3
25282: PUSH
25283: LD_VAR 0 2
25287: MINUS
25288: ST_TO_ADDR
// end else
25289: GO 25352
// begin d := - 1 ;
25291: LD_ADDR_VAR 0 9
25295: PUSH
25296: LD_INT 1
25298: NEG
25299: ST_TO_ADDR
// if i_from > i_to then
25300: LD_VAR 0 2
25304: PUSH
25305: LD_VAR 0 3
25309: GREATER
25310: IFFALSE 25330
// length := i_from - i_to else
25312: LD_ADDR_VAR 0 11
25316: PUSH
25317: LD_VAR 0 2
25321: PUSH
25322: LD_VAR 0 3
25326: MINUS
25327: ST_TO_ADDR
25328: GO 25352
// length := ( array - i_to ) + i_from ;
25330: LD_ADDR_VAR 0 11
25334: PUSH
25335: LD_VAR 0 1
25339: PUSH
25340: LD_VAR 0 3
25344: MINUS
25345: PUSH
25346: LD_VAR 0 2
25350: PLUS
25351: ST_TO_ADDR
// end ; if not length then
25352: LD_VAR 0 11
25356: NOT
25357: IFFALSE 25361
// exit ;
25359: GO 25519
// tmp := array ;
25361: LD_ADDR_VAR 0 10
25365: PUSH
25366: LD_VAR 0 1
25370: ST_TO_ADDR
// for i = 1 to length do
25371: LD_ADDR_VAR 0 6
25375: PUSH
25376: DOUBLE
25377: LD_INT 1
25379: DEC
25380: ST_TO_ADDR
25381: LD_VAR 0 11
25385: PUSH
25386: FOR_TO
25387: IFFALSE 25507
// begin for j = 1 to array do
25389: LD_ADDR_VAR 0 7
25393: PUSH
25394: DOUBLE
25395: LD_INT 1
25397: DEC
25398: ST_TO_ADDR
25399: LD_VAR 0 1
25403: PUSH
25404: FOR_TO
25405: IFFALSE 25493
// begin k := j + d ;
25407: LD_ADDR_VAR 0 8
25411: PUSH
25412: LD_VAR 0 7
25416: PUSH
25417: LD_VAR 0 9
25421: PLUS
25422: ST_TO_ADDR
// if k > array then
25423: LD_VAR 0 8
25427: PUSH
25428: LD_VAR 0 1
25432: GREATER
25433: IFFALSE 25443
// k := 1 ;
25435: LD_ADDR_VAR 0 8
25439: PUSH
25440: LD_INT 1
25442: ST_TO_ADDR
// if not k then
25443: LD_VAR 0 8
25447: NOT
25448: IFFALSE 25460
// k := array ;
25450: LD_ADDR_VAR 0 8
25454: PUSH
25455: LD_VAR 0 1
25459: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25460: LD_ADDR_VAR 0 10
25464: PUSH
25465: LD_VAR 0 10
25469: PPUSH
25470: LD_VAR 0 8
25474: PPUSH
25475: LD_VAR 0 1
25479: PUSH
25480: LD_VAR 0 7
25484: ARRAY
25485: PPUSH
25486: CALL_OW 1
25490: ST_TO_ADDR
// end ;
25491: GO 25404
25493: POP
25494: POP
// array := tmp ;
25495: LD_ADDR_VAR 0 1
25499: PUSH
25500: LD_VAR 0 10
25504: ST_TO_ADDR
// end ;
25505: GO 25386
25507: POP
25508: POP
// result := array ;
25509: LD_ADDR_VAR 0 5
25513: PUSH
25514: LD_VAR 0 1
25518: ST_TO_ADDR
// end ;
25519: LD_VAR 0 5
25523: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25524: LD_INT 0
25526: PPUSH
25527: PPUSH
// result := 0 ;
25528: LD_ADDR_VAR 0 3
25532: PUSH
25533: LD_INT 0
25535: ST_TO_ADDR
// if not array or not value in array then
25536: LD_VAR 0 1
25540: NOT
25541: PUSH
25542: LD_VAR 0 2
25546: PUSH
25547: LD_VAR 0 1
25551: IN
25552: NOT
25553: OR
25554: IFFALSE 25558
// exit ;
25556: GO 25612
// for i = 1 to array do
25558: LD_ADDR_VAR 0 4
25562: PUSH
25563: DOUBLE
25564: LD_INT 1
25566: DEC
25567: ST_TO_ADDR
25568: LD_VAR 0 1
25572: PUSH
25573: FOR_TO
25574: IFFALSE 25610
// if value = array [ i ] then
25576: LD_VAR 0 2
25580: PUSH
25581: LD_VAR 0 1
25585: PUSH
25586: LD_VAR 0 4
25590: ARRAY
25591: EQUAL
25592: IFFALSE 25608
// begin result := i ;
25594: LD_ADDR_VAR 0 3
25598: PUSH
25599: LD_VAR 0 4
25603: ST_TO_ADDR
// exit ;
25604: POP
25605: POP
25606: GO 25612
// end ;
25608: GO 25573
25610: POP
25611: POP
// end ;
25612: LD_VAR 0 3
25616: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25617: LD_INT 0
25619: PPUSH
// vc_chassis := chassis ;
25620: LD_ADDR_OWVAR 37
25624: PUSH
25625: LD_VAR 0 1
25629: ST_TO_ADDR
// vc_engine := engine ;
25630: LD_ADDR_OWVAR 39
25634: PUSH
25635: LD_VAR 0 2
25639: ST_TO_ADDR
// vc_control := control ;
25640: LD_ADDR_OWVAR 38
25644: PUSH
25645: LD_VAR 0 3
25649: ST_TO_ADDR
// vc_weapon := weapon ;
25650: LD_ADDR_OWVAR 40
25654: PUSH
25655: LD_VAR 0 4
25659: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25660: LD_ADDR_OWVAR 41
25664: PUSH
25665: LD_VAR 0 5
25669: ST_TO_ADDR
// end ;
25670: LD_VAR 0 6
25674: RET
// export function WantPlant ( unit ) ; var task ; begin
25675: LD_INT 0
25677: PPUSH
25678: PPUSH
// result := false ;
25679: LD_ADDR_VAR 0 2
25683: PUSH
25684: LD_INT 0
25686: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25687: LD_ADDR_VAR 0 3
25691: PUSH
25692: LD_VAR 0 1
25696: PPUSH
25697: CALL_OW 437
25701: ST_TO_ADDR
// if task then
25702: LD_VAR 0 3
25706: IFFALSE 25734
// if task [ 1 ] [ 1 ] = p then
25708: LD_VAR 0 3
25712: PUSH
25713: LD_INT 1
25715: ARRAY
25716: PUSH
25717: LD_INT 1
25719: ARRAY
25720: PUSH
25721: LD_STRING p
25723: EQUAL
25724: IFFALSE 25734
// result := true ;
25726: LD_ADDR_VAR 0 2
25730: PUSH
25731: LD_INT 1
25733: ST_TO_ADDR
// end ;
25734: LD_VAR 0 2
25738: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25739: LD_INT 0
25741: PPUSH
25742: PPUSH
25743: PPUSH
25744: PPUSH
// if pos < 1 then
25745: LD_VAR 0 2
25749: PUSH
25750: LD_INT 1
25752: LESS
25753: IFFALSE 25757
// exit ;
25755: GO 26060
// if pos = 1 then
25757: LD_VAR 0 2
25761: PUSH
25762: LD_INT 1
25764: EQUAL
25765: IFFALSE 25798
// result := Replace ( arr , pos [ 1 ] , value ) else
25767: LD_ADDR_VAR 0 4
25771: PUSH
25772: LD_VAR 0 1
25776: PPUSH
25777: LD_VAR 0 2
25781: PUSH
25782: LD_INT 1
25784: ARRAY
25785: PPUSH
25786: LD_VAR 0 3
25790: PPUSH
25791: CALL_OW 1
25795: ST_TO_ADDR
25796: GO 26060
// begin tmp := arr ;
25798: LD_ADDR_VAR 0 6
25802: PUSH
25803: LD_VAR 0 1
25807: ST_TO_ADDR
// s_arr := [ tmp ] ;
25808: LD_ADDR_VAR 0 7
25812: PUSH
25813: LD_VAR 0 6
25817: PUSH
25818: EMPTY
25819: LIST
25820: ST_TO_ADDR
// for i = 1 to pos - 1 do
25821: LD_ADDR_VAR 0 5
25825: PUSH
25826: DOUBLE
25827: LD_INT 1
25829: DEC
25830: ST_TO_ADDR
25831: LD_VAR 0 2
25835: PUSH
25836: LD_INT 1
25838: MINUS
25839: PUSH
25840: FOR_TO
25841: IFFALSE 25886
// begin tmp := tmp [ pos [ i ] ] ;
25843: LD_ADDR_VAR 0 6
25847: PUSH
25848: LD_VAR 0 6
25852: PUSH
25853: LD_VAR 0 2
25857: PUSH
25858: LD_VAR 0 5
25862: ARRAY
25863: ARRAY
25864: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25865: LD_ADDR_VAR 0 7
25869: PUSH
25870: LD_VAR 0 7
25874: PUSH
25875: LD_VAR 0 6
25879: PUSH
25880: EMPTY
25881: LIST
25882: ADD
25883: ST_TO_ADDR
// end ;
25884: GO 25840
25886: POP
25887: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25888: LD_ADDR_VAR 0 6
25892: PUSH
25893: LD_VAR 0 6
25897: PPUSH
25898: LD_VAR 0 2
25902: PUSH
25903: LD_VAR 0 2
25907: ARRAY
25908: PPUSH
25909: LD_VAR 0 3
25913: PPUSH
25914: CALL_OW 1
25918: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25919: LD_ADDR_VAR 0 7
25923: PUSH
25924: LD_VAR 0 7
25928: PPUSH
25929: LD_VAR 0 7
25933: PPUSH
25934: LD_VAR 0 6
25938: PPUSH
25939: CALL_OW 1
25943: ST_TO_ADDR
// for i = s_arr downto 2 do
25944: LD_ADDR_VAR 0 5
25948: PUSH
25949: DOUBLE
25950: LD_VAR 0 7
25954: INC
25955: ST_TO_ADDR
25956: LD_INT 2
25958: PUSH
25959: FOR_DOWNTO
25960: IFFALSE 26044
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25962: LD_ADDR_VAR 0 6
25966: PUSH
25967: LD_VAR 0 7
25971: PUSH
25972: LD_VAR 0 5
25976: PUSH
25977: LD_INT 1
25979: MINUS
25980: ARRAY
25981: PPUSH
25982: LD_VAR 0 2
25986: PUSH
25987: LD_VAR 0 5
25991: PUSH
25992: LD_INT 1
25994: MINUS
25995: ARRAY
25996: PPUSH
25997: LD_VAR 0 7
26001: PUSH
26002: LD_VAR 0 5
26006: ARRAY
26007: PPUSH
26008: CALL_OW 1
26012: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26013: LD_ADDR_VAR 0 7
26017: PUSH
26018: LD_VAR 0 7
26022: PPUSH
26023: LD_VAR 0 5
26027: PUSH
26028: LD_INT 1
26030: MINUS
26031: PPUSH
26032: LD_VAR 0 6
26036: PPUSH
26037: CALL_OW 1
26041: ST_TO_ADDR
// end ;
26042: GO 25959
26044: POP
26045: POP
// result := s_arr [ 1 ] ;
26046: LD_ADDR_VAR 0 4
26050: PUSH
26051: LD_VAR 0 7
26055: PUSH
26056: LD_INT 1
26058: ARRAY
26059: ST_TO_ADDR
// end ; end ;
26060: LD_VAR 0 4
26064: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26065: LD_INT 0
26067: PPUSH
26068: PPUSH
// if not list then
26069: LD_VAR 0 1
26073: NOT
26074: IFFALSE 26078
// exit ;
26076: GO 26169
// i := list [ pos1 ] ;
26078: LD_ADDR_VAR 0 5
26082: PUSH
26083: LD_VAR 0 1
26087: PUSH
26088: LD_VAR 0 2
26092: ARRAY
26093: ST_TO_ADDR
// if not i then
26094: LD_VAR 0 5
26098: NOT
26099: IFFALSE 26103
// exit ;
26101: GO 26169
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26103: LD_ADDR_VAR 0 1
26107: PUSH
26108: LD_VAR 0 1
26112: PPUSH
26113: LD_VAR 0 2
26117: PPUSH
26118: LD_VAR 0 1
26122: PUSH
26123: LD_VAR 0 3
26127: ARRAY
26128: PPUSH
26129: CALL_OW 1
26133: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26134: LD_ADDR_VAR 0 1
26138: PUSH
26139: LD_VAR 0 1
26143: PPUSH
26144: LD_VAR 0 3
26148: PPUSH
26149: LD_VAR 0 5
26153: PPUSH
26154: CALL_OW 1
26158: ST_TO_ADDR
// result := list ;
26159: LD_ADDR_VAR 0 4
26163: PUSH
26164: LD_VAR 0 1
26168: ST_TO_ADDR
// end ;
26169: LD_VAR 0 4
26173: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26174: LD_INT 0
26176: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26177: LD_ADDR_VAR 0 5
26181: PUSH
26182: LD_VAR 0 1
26186: PPUSH
26187: CALL_OW 250
26191: PPUSH
26192: LD_VAR 0 1
26196: PPUSH
26197: CALL_OW 251
26201: PPUSH
26202: LD_VAR 0 2
26206: PPUSH
26207: LD_VAR 0 3
26211: PPUSH
26212: LD_VAR 0 4
26216: PPUSH
26217: CALL 26227 0 5
26221: ST_TO_ADDR
// end ;
26222: LD_VAR 0 5
26226: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26227: LD_INT 0
26229: PPUSH
26230: PPUSH
26231: PPUSH
26232: PPUSH
// if not list then
26233: LD_VAR 0 3
26237: NOT
26238: IFFALSE 26242
// exit ;
26240: GO 26630
// result := [ ] ;
26242: LD_ADDR_VAR 0 6
26246: PUSH
26247: EMPTY
26248: ST_TO_ADDR
// for i in list do
26249: LD_ADDR_VAR 0 7
26253: PUSH
26254: LD_VAR 0 3
26258: PUSH
26259: FOR_IN
26260: IFFALSE 26462
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26262: LD_ADDR_VAR 0 9
26266: PUSH
26267: LD_VAR 0 7
26271: PPUSH
26272: LD_VAR 0 1
26276: PPUSH
26277: LD_VAR 0 2
26281: PPUSH
26282: CALL_OW 297
26286: ST_TO_ADDR
// if not result then
26287: LD_VAR 0 6
26291: NOT
26292: IFFALSE 26318
// result := [ [ i , tmp ] ] else
26294: LD_ADDR_VAR 0 6
26298: PUSH
26299: LD_VAR 0 7
26303: PUSH
26304: LD_VAR 0 9
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: EMPTY
26314: LIST
26315: ST_TO_ADDR
26316: GO 26460
// begin if result [ result ] [ 2 ] < tmp then
26318: LD_VAR 0 6
26322: PUSH
26323: LD_VAR 0 6
26327: ARRAY
26328: PUSH
26329: LD_INT 2
26331: ARRAY
26332: PUSH
26333: LD_VAR 0 9
26337: LESS
26338: IFFALSE 26380
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26340: LD_ADDR_VAR 0 6
26344: PUSH
26345: LD_VAR 0 6
26349: PPUSH
26350: LD_VAR 0 6
26354: PUSH
26355: LD_INT 1
26357: PLUS
26358: PPUSH
26359: LD_VAR 0 7
26363: PUSH
26364: LD_VAR 0 9
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PPUSH
26373: CALL_OW 2
26377: ST_TO_ADDR
26378: GO 26460
// for j = 1 to result do
26380: LD_ADDR_VAR 0 8
26384: PUSH
26385: DOUBLE
26386: LD_INT 1
26388: DEC
26389: ST_TO_ADDR
26390: LD_VAR 0 6
26394: PUSH
26395: FOR_TO
26396: IFFALSE 26458
// begin if tmp < result [ j ] [ 2 ] then
26398: LD_VAR 0 9
26402: PUSH
26403: LD_VAR 0 6
26407: PUSH
26408: LD_VAR 0 8
26412: ARRAY
26413: PUSH
26414: LD_INT 2
26416: ARRAY
26417: LESS
26418: IFFALSE 26456
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26420: LD_ADDR_VAR 0 6
26424: PUSH
26425: LD_VAR 0 6
26429: PPUSH
26430: LD_VAR 0 8
26434: PPUSH
26435: LD_VAR 0 7
26439: PUSH
26440: LD_VAR 0 9
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PPUSH
26449: CALL_OW 2
26453: ST_TO_ADDR
// break ;
26454: GO 26458
// end ; end ;
26456: GO 26395
26458: POP
26459: POP
// end ; end ;
26460: GO 26259
26462: POP
26463: POP
// if result and not asc then
26464: LD_VAR 0 6
26468: PUSH
26469: LD_VAR 0 4
26473: NOT
26474: AND
26475: IFFALSE 26550
// begin tmp := result ;
26477: LD_ADDR_VAR 0 9
26481: PUSH
26482: LD_VAR 0 6
26486: ST_TO_ADDR
// for i = tmp downto 1 do
26487: LD_ADDR_VAR 0 7
26491: PUSH
26492: DOUBLE
26493: LD_VAR 0 9
26497: INC
26498: ST_TO_ADDR
26499: LD_INT 1
26501: PUSH
26502: FOR_DOWNTO
26503: IFFALSE 26548
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26505: LD_ADDR_VAR 0 6
26509: PUSH
26510: LD_VAR 0 6
26514: PPUSH
26515: LD_VAR 0 9
26519: PUSH
26520: LD_VAR 0 7
26524: MINUS
26525: PUSH
26526: LD_INT 1
26528: PLUS
26529: PPUSH
26530: LD_VAR 0 9
26534: PUSH
26535: LD_VAR 0 7
26539: ARRAY
26540: PPUSH
26541: CALL_OW 1
26545: ST_TO_ADDR
26546: GO 26502
26548: POP
26549: POP
// end ; tmp := [ ] ;
26550: LD_ADDR_VAR 0 9
26554: PUSH
26555: EMPTY
26556: ST_TO_ADDR
// if mode then
26557: LD_VAR 0 5
26561: IFFALSE 26630
// begin for i = 1 to result do
26563: LD_ADDR_VAR 0 7
26567: PUSH
26568: DOUBLE
26569: LD_INT 1
26571: DEC
26572: ST_TO_ADDR
26573: LD_VAR 0 6
26577: PUSH
26578: FOR_TO
26579: IFFALSE 26618
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26581: LD_ADDR_VAR 0 9
26585: PUSH
26586: LD_VAR 0 9
26590: PPUSH
26591: LD_VAR 0 7
26595: PPUSH
26596: LD_VAR 0 6
26600: PUSH
26601: LD_VAR 0 7
26605: ARRAY
26606: PUSH
26607: LD_INT 1
26609: ARRAY
26610: PPUSH
26611: CALL_OW 1
26615: ST_TO_ADDR
26616: GO 26578
26618: POP
26619: POP
// result := tmp ;
26620: LD_ADDR_VAR 0 6
26624: PUSH
26625: LD_VAR 0 9
26629: ST_TO_ADDR
// end ; end ;
26630: LD_VAR 0 6
26634: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26635: LD_INT 0
26637: PPUSH
26638: PPUSH
26639: PPUSH
26640: PPUSH
26641: PPUSH
26642: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26643: LD_ADDR_VAR 0 5
26647: PUSH
26648: LD_INT 0
26650: PUSH
26651: LD_INT 0
26653: PUSH
26654: LD_INT 0
26656: PUSH
26657: EMPTY
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: ST_TO_ADDR
// if not x or not y then
26665: LD_VAR 0 2
26669: NOT
26670: PUSH
26671: LD_VAR 0 3
26675: NOT
26676: OR
26677: IFFALSE 26681
// exit ;
26679: GO 28333
// if not range then
26681: LD_VAR 0 4
26685: NOT
26686: IFFALSE 26696
// range := 10 ;
26688: LD_ADDR_VAR 0 4
26692: PUSH
26693: LD_INT 10
26695: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26696: LD_ADDR_VAR 0 8
26700: PUSH
26701: LD_INT 81
26703: PUSH
26704: LD_VAR 0 1
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 92
26715: PUSH
26716: LD_VAR 0 2
26720: PUSH
26721: LD_VAR 0 3
26725: PUSH
26726: LD_VAR 0 4
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 3
26739: PUSH
26740: LD_INT 21
26742: PUSH
26743: LD_INT 3
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: LIST
26758: PPUSH
26759: CALL_OW 69
26763: ST_TO_ADDR
// if not tmp then
26764: LD_VAR 0 8
26768: NOT
26769: IFFALSE 26773
// exit ;
26771: GO 28333
// for i in tmp do
26773: LD_ADDR_VAR 0 6
26777: PUSH
26778: LD_VAR 0 8
26782: PUSH
26783: FOR_IN
26784: IFFALSE 28308
// begin points := [ 0 , 0 , 0 ] ;
26786: LD_ADDR_VAR 0 9
26790: PUSH
26791: LD_INT 0
26793: PUSH
26794: LD_INT 0
26796: PUSH
26797: LD_INT 0
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: LIST
26804: ST_TO_ADDR
// bpoints := 1 ;
26805: LD_ADDR_VAR 0 10
26809: PUSH
26810: LD_INT 1
26812: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26813: LD_VAR 0 6
26817: PPUSH
26818: CALL_OW 247
26822: PUSH
26823: LD_INT 1
26825: DOUBLE
26826: EQUAL
26827: IFTRUE 26831
26829: GO 27409
26831: POP
// begin if GetClass ( i ) = 1 then
26832: LD_VAR 0 6
26836: PPUSH
26837: CALL_OW 257
26841: PUSH
26842: LD_INT 1
26844: EQUAL
26845: IFFALSE 26866
// points := [ 10 , 5 , 3 ] ;
26847: LD_ADDR_VAR 0 9
26851: PUSH
26852: LD_INT 10
26854: PUSH
26855: LD_INT 5
26857: PUSH
26858: LD_INT 3
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: LIST
26865: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26866: LD_VAR 0 6
26870: PPUSH
26871: CALL_OW 257
26875: PUSH
26876: LD_INT 2
26878: PUSH
26879: LD_INT 3
26881: PUSH
26882: LD_INT 4
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: LIST
26889: IN
26890: IFFALSE 26911
// points := [ 3 , 2 , 1 ] ;
26892: LD_ADDR_VAR 0 9
26896: PUSH
26897: LD_INT 3
26899: PUSH
26900: LD_INT 2
26902: PUSH
26903: LD_INT 1
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: LIST
26910: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26911: LD_VAR 0 6
26915: PPUSH
26916: CALL_OW 257
26920: PUSH
26921: LD_INT 5
26923: EQUAL
26924: IFFALSE 26945
// points := [ 130 , 5 , 2 ] ;
26926: LD_ADDR_VAR 0 9
26930: PUSH
26931: LD_INT 130
26933: PUSH
26934: LD_INT 5
26936: PUSH
26937: LD_INT 2
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: LIST
26944: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26945: LD_VAR 0 6
26949: PPUSH
26950: CALL_OW 257
26954: PUSH
26955: LD_INT 8
26957: EQUAL
26958: IFFALSE 26979
// points := [ 35 , 35 , 30 ] ;
26960: LD_ADDR_VAR 0 9
26964: PUSH
26965: LD_INT 35
26967: PUSH
26968: LD_INT 35
26970: PUSH
26971: LD_INT 30
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: LIST
26978: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26979: LD_VAR 0 6
26983: PPUSH
26984: CALL_OW 257
26988: PUSH
26989: LD_INT 9
26991: EQUAL
26992: IFFALSE 27013
// points := [ 20 , 55 , 40 ] ;
26994: LD_ADDR_VAR 0 9
26998: PUSH
26999: LD_INT 20
27001: PUSH
27002: LD_INT 55
27004: PUSH
27005: LD_INT 40
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: LIST
27012: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27013: LD_VAR 0 6
27017: PPUSH
27018: CALL_OW 257
27022: PUSH
27023: LD_INT 12
27025: PUSH
27026: LD_INT 16
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: IN
27033: IFFALSE 27054
// points := [ 5 , 3 , 2 ] ;
27035: LD_ADDR_VAR 0 9
27039: PUSH
27040: LD_INT 5
27042: PUSH
27043: LD_INT 3
27045: PUSH
27046: LD_INT 2
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: LIST
27053: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27054: LD_VAR 0 6
27058: PPUSH
27059: CALL_OW 257
27063: PUSH
27064: LD_INT 17
27066: EQUAL
27067: IFFALSE 27088
// points := [ 100 , 50 , 75 ] ;
27069: LD_ADDR_VAR 0 9
27073: PUSH
27074: LD_INT 100
27076: PUSH
27077: LD_INT 50
27079: PUSH
27080: LD_INT 75
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: LIST
27087: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27088: LD_VAR 0 6
27092: PPUSH
27093: CALL_OW 257
27097: PUSH
27098: LD_INT 15
27100: EQUAL
27101: IFFALSE 27122
// points := [ 10 , 5 , 3 ] ;
27103: LD_ADDR_VAR 0 9
27107: PUSH
27108: LD_INT 10
27110: PUSH
27111: LD_INT 5
27113: PUSH
27114: LD_INT 3
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: LIST
27121: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27122: LD_VAR 0 6
27126: PPUSH
27127: CALL_OW 257
27131: PUSH
27132: LD_INT 14
27134: EQUAL
27135: IFFALSE 27156
// points := [ 10 , 0 , 0 ] ;
27137: LD_ADDR_VAR 0 9
27141: PUSH
27142: LD_INT 10
27144: PUSH
27145: LD_INT 0
27147: PUSH
27148: LD_INT 0
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: LIST
27155: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27156: LD_VAR 0 6
27160: PPUSH
27161: CALL_OW 257
27165: PUSH
27166: LD_INT 11
27168: EQUAL
27169: IFFALSE 27190
// points := [ 30 , 10 , 5 ] ;
27171: LD_ADDR_VAR 0 9
27175: PUSH
27176: LD_INT 30
27178: PUSH
27179: LD_INT 10
27181: PUSH
27182: LD_INT 5
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: LIST
27189: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27190: LD_VAR 0 1
27194: PPUSH
27195: LD_INT 5
27197: PPUSH
27198: CALL_OW 321
27202: PUSH
27203: LD_INT 2
27205: EQUAL
27206: IFFALSE 27223
// bpoints := bpoints * 1.8 ;
27208: LD_ADDR_VAR 0 10
27212: PUSH
27213: LD_VAR 0 10
27217: PUSH
27218: LD_REAL  1.80000000000000E+0000
27221: MUL
27222: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27223: LD_VAR 0 6
27227: PPUSH
27228: CALL_OW 257
27232: PUSH
27233: LD_INT 1
27235: PUSH
27236: LD_INT 2
27238: PUSH
27239: LD_INT 3
27241: PUSH
27242: LD_INT 4
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: IN
27251: PUSH
27252: LD_VAR 0 1
27256: PPUSH
27257: LD_INT 51
27259: PPUSH
27260: CALL_OW 321
27264: PUSH
27265: LD_INT 2
27267: EQUAL
27268: AND
27269: IFFALSE 27286
// bpoints := bpoints * 1.2 ;
27271: LD_ADDR_VAR 0 10
27275: PUSH
27276: LD_VAR 0 10
27280: PUSH
27281: LD_REAL  1.20000000000000E+0000
27284: MUL
27285: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27286: LD_VAR 0 6
27290: PPUSH
27291: CALL_OW 257
27295: PUSH
27296: LD_INT 5
27298: PUSH
27299: LD_INT 7
27301: PUSH
27302: LD_INT 9
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: LIST
27309: IN
27310: PUSH
27311: LD_VAR 0 1
27315: PPUSH
27316: LD_INT 52
27318: PPUSH
27319: CALL_OW 321
27323: PUSH
27324: LD_INT 2
27326: EQUAL
27327: AND
27328: IFFALSE 27345
// bpoints := bpoints * 1.5 ;
27330: LD_ADDR_VAR 0 10
27334: PUSH
27335: LD_VAR 0 10
27339: PUSH
27340: LD_REAL  1.50000000000000E+0000
27343: MUL
27344: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27345: LD_VAR 0 1
27349: PPUSH
27350: LD_INT 66
27352: PPUSH
27353: CALL_OW 321
27357: PUSH
27358: LD_INT 2
27360: EQUAL
27361: IFFALSE 27378
// bpoints := bpoints * 1.1 ;
27363: LD_ADDR_VAR 0 10
27367: PUSH
27368: LD_VAR 0 10
27372: PUSH
27373: LD_REAL  1.10000000000000E+0000
27376: MUL
27377: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27378: LD_ADDR_VAR 0 10
27382: PUSH
27383: LD_VAR 0 10
27387: PUSH
27388: LD_VAR 0 6
27392: PPUSH
27393: LD_INT 1
27395: PPUSH
27396: CALL_OW 259
27400: PUSH
27401: LD_REAL  1.15000000000000E+0000
27404: MUL
27405: MUL
27406: ST_TO_ADDR
// end ; unit_vehicle :
27407: GO 28237
27409: LD_INT 2
27411: DOUBLE
27412: EQUAL
27413: IFTRUE 27417
27415: GO 28225
27417: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27418: LD_VAR 0 6
27422: PPUSH
27423: CALL_OW 264
27427: PUSH
27428: LD_INT 2
27430: PUSH
27431: LD_INT 42
27433: PUSH
27434: LD_INT 24
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: LIST
27441: IN
27442: IFFALSE 27463
// points := [ 25 , 5 , 3 ] ;
27444: LD_ADDR_VAR 0 9
27448: PUSH
27449: LD_INT 25
27451: PUSH
27452: LD_INT 5
27454: PUSH
27455: LD_INT 3
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: LIST
27462: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27463: LD_VAR 0 6
27467: PPUSH
27468: CALL_OW 264
27472: PUSH
27473: LD_INT 4
27475: PUSH
27476: LD_INT 43
27478: PUSH
27479: LD_INT 25
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: LIST
27486: IN
27487: IFFALSE 27508
// points := [ 40 , 15 , 5 ] ;
27489: LD_ADDR_VAR 0 9
27493: PUSH
27494: LD_INT 40
27496: PUSH
27497: LD_INT 15
27499: PUSH
27500: LD_INT 5
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: LIST
27507: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27508: LD_VAR 0 6
27512: PPUSH
27513: CALL_OW 264
27517: PUSH
27518: LD_INT 3
27520: PUSH
27521: LD_INT 23
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: IN
27528: IFFALSE 27549
// points := [ 7 , 25 , 8 ] ;
27530: LD_ADDR_VAR 0 9
27534: PUSH
27535: LD_INT 7
27537: PUSH
27538: LD_INT 25
27540: PUSH
27541: LD_INT 8
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: LIST
27548: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27549: LD_VAR 0 6
27553: PPUSH
27554: CALL_OW 264
27558: PUSH
27559: LD_INT 5
27561: PUSH
27562: LD_INT 27
27564: PUSH
27565: LD_INT 44
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: LIST
27572: IN
27573: IFFALSE 27594
// points := [ 14 , 50 , 16 ] ;
27575: LD_ADDR_VAR 0 9
27579: PUSH
27580: LD_INT 14
27582: PUSH
27583: LD_INT 50
27585: PUSH
27586: LD_INT 16
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: LIST
27593: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27594: LD_VAR 0 6
27598: PPUSH
27599: CALL_OW 264
27603: PUSH
27604: LD_INT 6
27606: PUSH
27607: LD_INT 46
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: IN
27614: IFFALSE 27635
// points := [ 32 , 120 , 70 ] ;
27616: LD_ADDR_VAR 0 9
27620: PUSH
27621: LD_INT 32
27623: PUSH
27624: LD_INT 120
27626: PUSH
27627: LD_INT 70
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: LIST
27634: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
27635: LD_VAR 0 6
27639: PPUSH
27640: CALL_OW 264
27644: PUSH
27645: LD_INT 7
27647: PUSH
27648: LD_INT 28
27650: PUSH
27651: LD_INT 45
27653: PUSH
27654: LD_EXP 75
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: IN
27665: IFFALSE 27686
// points := [ 35 , 20 , 45 ] ;
27667: LD_ADDR_VAR 0 9
27671: PUSH
27672: LD_INT 35
27674: PUSH
27675: LD_INT 20
27677: PUSH
27678: LD_INT 45
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: LIST
27685: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27686: LD_VAR 0 6
27690: PPUSH
27691: CALL_OW 264
27695: PUSH
27696: LD_INT 47
27698: PUSH
27699: EMPTY
27700: LIST
27701: IN
27702: IFFALSE 27723
// points := [ 67 , 45 , 75 ] ;
27704: LD_ADDR_VAR 0 9
27708: PUSH
27709: LD_INT 67
27711: PUSH
27712: LD_INT 45
27714: PUSH
27715: LD_INT 75
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: LIST
27722: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27723: LD_VAR 0 6
27727: PPUSH
27728: CALL_OW 264
27732: PUSH
27733: LD_INT 26
27735: PUSH
27736: EMPTY
27737: LIST
27738: IN
27739: IFFALSE 27760
// points := [ 120 , 30 , 80 ] ;
27741: LD_ADDR_VAR 0 9
27745: PUSH
27746: LD_INT 120
27748: PUSH
27749: LD_INT 30
27751: PUSH
27752: LD_INT 80
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: LIST
27759: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27760: LD_VAR 0 6
27764: PPUSH
27765: CALL_OW 264
27769: PUSH
27770: LD_INT 22
27772: PUSH
27773: EMPTY
27774: LIST
27775: IN
27776: IFFALSE 27797
// points := [ 40 , 1 , 1 ] ;
27778: LD_ADDR_VAR 0 9
27782: PUSH
27783: LD_INT 40
27785: PUSH
27786: LD_INT 1
27788: PUSH
27789: LD_INT 1
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: LIST
27796: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27797: LD_VAR 0 6
27801: PPUSH
27802: CALL_OW 264
27806: PUSH
27807: LD_INT 29
27809: PUSH
27810: EMPTY
27811: LIST
27812: IN
27813: IFFALSE 27834
// points := [ 70 , 200 , 400 ] ;
27815: LD_ADDR_VAR 0 9
27819: PUSH
27820: LD_INT 70
27822: PUSH
27823: LD_INT 200
27825: PUSH
27826: LD_INT 400
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: LIST
27833: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27834: LD_VAR 0 6
27838: PPUSH
27839: CALL_OW 264
27843: PUSH
27844: LD_INT 14
27846: PUSH
27847: LD_INT 53
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: IN
27854: IFFALSE 27875
// points := [ 40 , 10 , 20 ] ;
27856: LD_ADDR_VAR 0 9
27860: PUSH
27861: LD_INT 40
27863: PUSH
27864: LD_INT 10
27866: PUSH
27867: LD_INT 20
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: LIST
27874: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27875: LD_VAR 0 6
27879: PPUSH
27880: CALL_OW 264
27884: PUSH
27885: LD_INT 9
27887: PUSH
27888: EMPTY
27889: LIST
27890: IN
27891: IFFALSE 27912
// points := [ 5 , 70 , 20 ] ;
27893: LD_ADDR_VAR 0 9
27897: PUSH
27898: LD_INT 5
27900: PUSH
27901: LD_INT 70
27903: PUSH
27904: LD_INT 20
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: LIST
27911: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27912: LD_VAR 0 6
27916: PPUSH
27917: CALL_OW 264
27921: PUSH
27922: LD_INT 10
27924: PUSH
27925: EMPTY
27926: LIST
27927: IN
27928: IFFALSE 27949
// points := [ 35 , 110 , 70 ] ;
27930: LD_ADDR_VAR 0 9
27934: PUSH
27935: LD_INT 35
27937: PUSH
27938: LD_INT 110
27940: PUSH
27941: LD_INT 70
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: LIST
27948: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27949: LD_VAR 0 6
27953: PPUSH
27954: CALL_OW 265
27958: PUSH
27959: LD_INT 25
27961: EQUAL
27962: IFFALSE 27983
// points := [ 80 , 65 , 100 ] ;
27964: LD_ADDR_VAR 0 9
27968: PUSH
27969: LD_INT 80
27971: PUSH
27972: LD_INT 65
27974: PUSH
27975: LD_INT 100
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: LIST
27982: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27983: LD_VAR 0 6
27987: PPUSH
27988: CALL_OW 263
27992: PUSH
27993: LD_INT 1
27995: EQUAL
27996: IFFALSE 28031
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27998: LD_ADDR_VAR 0 10
28002: PUSH
28003: LD_VAR 0 10
28007: PUSH
28008: LD_VAR 0 6
28012: PPUSH
28013: CALL_OW 311
28017: PPUSH
28018: LD_INT 3
28020: PPUSH
28021: CALL_OW 259
28025: PUSH
28026: LD_INT 4
28028: MUL
28029: MUL
28030: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28031: LD_VAR 0 6
28035: PPUSH
28036: CALL_OW 263
28040: PUSH
28041: LD_INT 2
28043: EQUAL
28044: IFFALSE 28095
// begin j := IsControledBy ( i ) ;
28046: LD_ADDR_VAR 0 7
28050: PUSH
28051: LD_VAR 0 6
28055: PPUSH
28056: CALL_OW 312
28060: ST_TO_ADDR
// if j then
28061: LD_VAR 0 7
28065: IFFALSE 28095
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28067: LD_ADDR_VAR 0 10
28071: PUSH
28072: LD_VAR 0 10
28076: PUSH
28077: LD_VAR 0 7
28081: PPUSH
28082: LD_INT 3
28084: PPUSH
28085: CALL_OW 259
28089: PUSH
28090: LD_INT 3
28092: MUL
28093: MUL
28094: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28095: LD_VAR 0 6
28099: PPUSH
28100: CALL_OW 264
28104: PUSH
28105: LD_INT 5
28107: PUSH
28108: LD_INT 6
28110: PUSH
28111: LD_INT 46
28113: PUSH
28114: LD_INT 44
28116: PUSH
28117: LD_INT 47
28119: PUSH
28120: LD_INT 45
28122: PUSH
28123: LD_INT 28
28125: PUSH
28126: LD_INT 7
28128: PUSH
28129: LD_INT 27
28131: PUSH
28132: LD_INT 29
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: IN
28147: PUSH
28148: LD_VAR 0 1
28152: PPUSH
28153: LD_INT 52
28155: PPUSH
28156: CALL_OW 321
28160: PUSH
28161: LD_INT 2
28163: EQUAL
28164: AND
28165: IFFALSE 28182
// bpoints := bpoints * 1.2 ;
28167: LD_ADDR_VAR 0 10
28171: PUSH
28172: LD_VAR 0 10
28176: PUSH
28177: LD_REAL  1.20000000000000E+0000
28180: MUL
28181: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28182: LD_VAR 0 6
28186: PPUSH
28187: CALL_OW 264
28191: PUSH
28192: LD_INT 6
28194: PUSH
28195: LD_INT 46
28197: PUSH
28198: LD_INT 47
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: LIST
28205: IN
28206: IFFALSE 28223
// bpoints := bpoints * 1.2 ;
28208: LD_ADDR_VAR 0 10
28212: PUSH
28213: LD_VAR 0 10
28217: PUSH
28218: LD_REAL  1.20000000000000E+0000
28221: MUL
28222: ST_TO_ADDR
// end ; unit_building :
28223: GO 28237
28225: LD_INT 3
28227: DOUBLE
28228: EQUAL
28229: IFTRUE 28233
28231: GO 28236
28233: POP
// ; end ;
28234: GO 28237
28236: POP
// for j = 1 to 3 do
28237: LD_ADDR_VAR 0 7
28241: PUSH
28242: DOUBLE
28243: LD_INT 1
28245: DEC
28246: ST_TO_ADDR
28247: LD_INT 3
28249: PUSH
28250: FOR_TO
28251: IFFALSE 28304
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28253: LD_ADDR_VAR 0 5
28257: PUSH
28258: LD_VAR 0 5
28262: PPUSH
28263: LD_VAR 0 7
28267: PPUSH
28268: LD_VAR 0 5
28272: PUSH
28273: LD_VAR 0 7
28277: ARRAY
28278: PUSH
28279: LD_VAR 0 9
28283: PUSH
28284: LD_VAR 0 7
28288: ARRAY
28289: PUSH
28290: LD_VAR 0 10
28294: MUL
28295: PLUS
28296: PPUSH
28297: CALL_OW 1
28301: ST_TO_ADDR
28302: GO 28250
28304: POP
28305: POP
// end ;
28306: GO 26783
28308: POP
28309: POP
// result := Replace ( result , 4 , tmp ) ;
28310: LD_ADDR_VAR 0 5
28314: PUSH
28315: LD_VAR 0 5
28319: PPUSH
28320: LD_INT 4
28322: PPUSH
28323: LD_VAR 0 8
28327: PPUSH
28328: CALL_OW 1
28332: ST_TO_ADDR
// end ;
28333: LD_VAR 0 5
28337: RET
// export function DangerAtRange ( unit , range ) ; begin
28338: LD_INT 0
28340: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28341: LD_ADDR_VAR 0 3
28345: PUSH
28346: LD_VAR 0 1
28350: PPUSH
28351: CALL_OW 255
28355: PPUSH
28356: LD_VAR 0 1
28360: PPUSH
28361: CALL_OW 250
28365: PPUSH
28366: LD_VAR 0 1
28370: PPUSH
28371: CALL_OW 251
28375: PPUSH
28376: LD_VAR 0 2
28380: PPUSH
28381: CALL 26635 0 4
28385: ST_TO_ADDR
// end ;
28386: LD_VAR 0 3
28390: RET
// export function DangerInArea ( side , area ) ; begin
28391: LD_INT 0
28393: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28394: LD_ADDR_VAR 0 3
28398: PUSH
28399: LD_VAR 0 2
28403: PPUSH
28404: LD_INT 81
28406: PUSH
28407: LD_VAR 0 1
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PPUSH
28416: CALL_OW 70
28420: ST_TO_ADDR
// end ;
28421: LD_VAR 0 3
28425: RET
// export function IsExtension ( b ) ; begin
28426: LD_INT 0
28428: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28429: LD_ADDR_VAR 0 2
28433: PUSH
28434: LD_VAR 0 1
28438: PUSH
28439: LD_INT 23
28441: PUSH
28442: LD_INT 20
28444: PUSH
28445: LD_INT 22
28447: PUSH
28448: LD_INT 17
28450: PUSH
28451: LD_INT 24
28453: PUSH
28454: LD_INT 21
28456: PUSH
28457: LD_INT 19
28459: PUSH
28460: LD_INT 16
28462: PUSH
28463: LD_INT 25
28465: PUSH
28466: LD_INT 18
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: IN
28481: ST_TO_ADDR
// end ;
28482: LD_VAR 0 2
28486: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
28487: LD_INT 0
28489: PPUSH
28490: PPUSH
28491: PPUSH
// result := [ ] ;
28492: LD_ADDR_VAR 0 4
28496: PUSH
28497: EMPTY
28498: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28499: LD_ADDR_VAR 0 5
28503: PUSH
28504: LD_VAR 0 2
28508: PPUSH
28509: LD_INT 21
28511: PUSH
28512: LD_INT 3
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PPUSH
28519: CALL_OW 70
28523: ST_TO_ADDR
// if not tmp then
28524: LD_VAR 0 5
28528: NOT
28529: IFFALSE 28533
// exit ;
28531: GO 28597
// if checkLink then
28533: LD_VAR 0 3
28537: IFFALSE 28587
// begin for i in tmp do
28539: LD_ADDR_VAR 0 6
28543: PUSH
28544: LD_VAR 0 5
28548: PUSH
28549: FOR_IN
28550: IFFALSE 28585
// if GetBase ( i ) <> base then
28552: LD_VAR 0 6
28556: PPUSH
28557: CALL_OW 274
28561: PUSH
28562: LD_VAR 0 1
28566: NONEQUAL
28567: IFFALSE 28583
// ComLinkToBase ( base , i ) ;
28569: LD_VAR 0 1
28573: PPUSH
28574: LD_VAR 0 6
28578: PPUSH
28579: CALL_OW 169
28583: GO 28549
28585: POP
28586: POP
// end ; result := tmp ;
28587: LD_ADDR_VAR 0 4
28591: PUSH
28592: LD_VAR 0 5
28596: ST_TO_ADDR
// end ;
28597: LD_VAR 0 4
28601: RET
// export function ComComplete ( units , b ) ; var i ; begin
28602: LD_INT 0
28604: PPUSH
28605: PPUSH
// if not units then
28606: LD_VAR 0 1
28610: NOT
28611: IFFALSE 28615
// exit ;
28613: GO 28705
// for i in units do
28615: LD_ADDR_VAR 0 4
28619: PUSH
28620: LD_VAR 0 1
28624: PUSH
28625: FOR_IN
28626: IFFALSE 28703
// if BuildingStatus ( b ) = bs_build then
28628: LD_VAR 0 2
28632: PPUSH
28633: CALL_OW 461
28637: PUSH
28638: LD_INT 1
28640: EQUAL
28641: IFFALSE 28701
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28643: LD_VAR 0 4
28647: PPUSH
28648: LD_STRING h
28650: PUSH
28651: LD_VAR 0 2
28655: PPUSH
28656: CALL_OW 250
28660: PUSH
28661: LD_VAR 0 2
28665: PPUSH
28666: CALL_OW 251
28670: PUSH
28671: LD_VAR 0 2
28675: PUSH
28676: LD_INT 0
28678: PUSH
28679: LD_INT 0
28681: PUSH
28682: LD_INT 0
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: PUSH
28694: EMPTY
28695: LIST
28696: PPUSH
28697: CALL_OW 446
28701: GO 28625
28703: POP
28704: POP
// end ;
28705: LD_VAR 0 3
28709: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28710: LD_INT 0
28712: PPUSH
28713: PPUSH
28714: PPUSH
28715: PPUSH
28716: PPUSH
28717: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
28718: LD_VAR 0 1
28722: NOT
28723: PUSH
28724: LD_VAR 0 1
28728: PPUSH
28729: CALL_OW 263
28733: PUSH
28734: LD_INT 2
28736: NONEQUAL
28737: OR
28738: IFFALSE 28742
// exit ;
28740: GO 29058
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28742: LD_ADDR_VAR 0 6
28746: PUSH
28747: LD_INT 22
28749: PUSH
28750: LD_VAR 0 1
28754: PPUSH
28755: CALL_OW 255
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 2
28766: PUSH
28767: LD_INT 30
28769: PUSH
28770: LD_INT 36
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 34
28779: PUSH
28780: LD_INT 31
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: LIST
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PPUSH
28796: CALL_OW 69
28800: ST_TO_ADDR
// if not tmp then
28801: LD_VAR 0 6
28805: NOT
28806: IFFALSE 28810
// exit ;
28808: GO 29058
// result := [ ] ;
28810: LD_ADDR_VAR 0 2
28814: PUSH
28815: EMPTY
28816: ST_TO_ADDR
// for i in tmp do
28817: LD_ADDR_VAR 0 3
28821: PUSH
28822: LD_VAR 0 6
28826: PUSH
28827: FOR_IN
28828: IFFALSE 28899
// begin t := UnitsInside ( i ) ;
28830: LD_ADDR_VAR 0 4
28834: PUSH
28835: LD_VAR 0 3
28839: PPUSH
28840: CALL_OW 313
28844: ST_TO_ADDR
// if t then
28845: LD_VAR 0 4
28849: IFFALSE 28897
// for j in t do
28851: LD_ADDR_VAR 0 7
28855: PUSH
28856: LD_VAR 0 4
28860: PUSH
28861: FOR_IN
28862: IFFALSE 28895
// result := Replace ( result , result + 1 , j ) ;
28864: LD_ADDR_VAR 0 2
28868: PUSH
28869: LD_VAR 0 2
28873: PPUSH
28874: LD_VAR 0 2
28878: PUSH
28879: LD_INT 1
28881: PLUS
28882: PPUSH
28883: LD_VAR 0 7
28887: PPUSH
28888: CALL_OW 1
28892: ST_TO_ADDR
28893: GO 28861
28895: POP
28896: POP
// end ;
28897: GO 28827
28899: POP
28900: POP
// if not result then
28901: LD_VAR 0 2
28905: NOT
28906: IFFALSE 28910
// exit ;
28908: GO 29058
// mech := result [ 1 ] ;
28910: LD_ADDR_VAR 0 5
28914: PUSH
28915: LD_VAR 0 2
28919: PUSH
28920: LD_INT 1
28922: ARRAY
28923: ST_TO_ADDR
// if result > 1 then
28924: LD_VAR 0 2
28928: PUSH
28929: LD_INT 1
28931: GREATER
28932: IFFALSE 29044
// begin for i = 2 to result do
28934: LD_ADDR_VAR 0 3
28938: PUSH
28939: DOUBLE
28940: LD_INT 2
28942: DEC
28943: ST_TO_ADDR
28944: LD_VAR 0 2
28948: PUSH
28949: FOR_TO
28950: IFFALSE 29042
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28952: LD_ADDR_VAR 0 4
28956: PUSH
28957: LD_VAR 0 2
28961: PUSH
28962: LD_VAR 0 3
28966: ARRAY
28967: PPUSH
28968: LD_INT 3
28970: PPUSH
28971: CALL_OW 259
28975: PUSH
28976: LD_VAR 0 2
28980: PUSH
28981: LD_VAR 0 3
28985: ARRAY
28986: PPUSH
28987: CALL_OW 432
28991: MINUS
28992: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28993: LD_VAR 0 4
28997: PUSH
28998: LD_VAR 0 5
29002: PPUSH
29003: LD_INT 3
29005: PPUSH
29006: CALL_OW 259
29010: PUSH
29011: LD_VAR 0 5
29015: PPUSH
29016: CALL_OW 432
29020: MINUS
29021: GREATEREQUAL
29022: IFFALSE 29040
// mech := result [ i ] ;
29024: LD_ADDR_VAR 0 5
29028: PUSH
29029: LD_VAR 0 2
29033: PUSH
29034: LD_VAR 0 3
29038: ARRAY
29039: ST_TO_ADDR
// end ;
29040: GO 28949
29042: POP
29043: POP
// end ; ComLinkTo ( vehicle , mech ) ;
29044: LD_VAR 0 1
29048: PPUSH
29049: LD_VAR 0 5
29053: PPUSH
29054: CALL_OW 135
// end ;
29058: LD_VAR 0 2
29062: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29063: LD_INT 0
29065: PPUSH
29066: PPUSH
29067: PPUSH
29068: PPUSH
29069: PPUSH
29070: PPUSH
29071: PPUSH
29072: PPUSH
29073: PPUSH
29074: PPUSH
29075: PPUSH
29076: PPUSH
29077: PPUSH
// result := [ ] ;
29078: LD_ADDR_VAR 0 7
29082: PUSH
29083: EMPTY
29084: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29085: LD_VAR 0 1
29089: PPUSH
29090: CALL_OW 266
29094: PUSH
29095: LD_INT 0
29097: PUSH
29098: LD_INT 1
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: IN
29105: NOT
29106: IFFALSE 29110
// exit ;
29108: GO 30744
// if name then
29110: LD_VAR 0 3
29114: IFFALSE 29130
// SetBName ( base_dep , name ) ;
29116: LD_VAR 0 1
29120: PPUSH
29121: LD_VAR 0 3
29125: PPUSH
29126: CALL_OW 500
// base := GetBase ( base_dep ) ;
29130: LD_ADDR_VAR 0 15
29134: PUSH
29135: LD_VAR 0 1
29139: PPUSH
29140: CALL_OW 274
29144: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29145: LD_ADDR_VAR 0 16
29149: PUSH
29150: LD_VAR 0 1
29154: PPUSH
29155: CALL_OW 255
29159: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29160: LD_ADDR_VAR 0 17
29164: PUSH
29165: LD_VAR 0 1
29169: PPUSH
29170: CALL_OW 248
29174: ST_TO_ADDR
// if sources then
29175: LD_VAR 0 5
29179: IFFALSE 29226
// for i = 1 to 3 do
29181: LD_ADDR_VAR 0 8
29185: PUSH
29186: DOUBLE
29187: LD_INT 1
29189: DEC
29190: ST_TO_ADDR
29191: LD_INT 3
29193: PUSH
29194: FOR_TO
29195: IFFALSE 29224
// AddResourceType ( base , i , sources [ i ] ) ;
29197: LD_VAR 0 15
29201: PPUSH
29202: LD_VAR 0 8
29206: PPUSH
29207: LD_VAR 0 5
29211: PUSH
29212: LD_VAR 0 8
29216: ARRAY
29217: PPUSH
29218: CALL_OW 276
29222: GO 29194
29224: POP
29225: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29226: LD_ADDR_VAR 0 18
29230: PUSH
29231: LD_VAR 0 15
29235: PPUSH
29236: LD_VAR 0 2
29240: PPUSH
29241: LD_INT 1
29243: PPUSH
29244: CALL 28487 0 3
29248: ST_TO_ADDR
// InitHc ;
29249: CALL_OW 19
// InitUc ;
29253: CALL_OW 18
// uc_side := side ;
29257: LD_ADDR_OWVAR 20
29261: PUSH
29262: LD_VAR 0 16
29266: ST_TO_ADDR
// uc_nation := nation ;
29267: LD_ADDR_OWVAR 21
29271: PUSH
29272: LD_VAR 0 17
29276: ST_TO_ADDR
// if buildings then
29277: LD_VAR 0 18
29281: IFFALSE 30603
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29283: LD_ADDR_VAR 0 19
29287: PUSH
29288: LD_VAR 0 18
29292: PPUSH
29293: LD_INT 2
29295: PUSH
29296: LD_INT 30
29298: PUSH
29299: LD_INT 29
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 30
29308: PUSH
29309: LD_INT 30
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: LIST
29320: PPUSH
29321: CALL_OW 72
29325: ST_TO_ADDR
// if tmp then
29326: LD_VAR 0 19
29330: IFFALSE 29378
// for i in tmp do
29332: LD_ADDR_VAR 0 8
29336: PUSH
29337: LD_VAR 0 19
29341: PUSH
29342: FOR_IN
29343: IFFALSE 29376
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29345: LD_VAR 0 8
29349: PPUSH
29350: CALL_OW 250
29354: PPUSH
29355: LD_VAR 0 8
29359: PPUSH
29360: CALL_OW 251
29364: PPUSH
29365: LD_VAR 0 16
29369: PPUSH
29370: CALL_OW 441
29374: GO 29342
29376: POP
29377: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29378: LD_VAR 0 18
29382: PPUSH
29383: LD_INT 2
29385: PUSH
29386: LD_INT 30
29388: PUSH
29389: LD_INT 32
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 30
29398: PUSH
29399: LD_INT 33
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: LIST
29410: PPUSH
29411: CALL_OW 72
29415: IFFALSE 29503
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29417: LD_ADDR_VAR 0 8
29421: PUSH
29422: LD_VAR 0 18
29426: PPUSH
29427: LD_INT 2
29429: PUSH
29430: LD_INT 30
29432: PUSH
29433: LD_INT 32
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 30
29442: PUSH
29443: LD_INT 33
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: LIST
29454: PPUSH
29455: CALL_OW 72
29459: PUSH
29460: FOR_IN
29461: IFFALSE 29501
// begin if not GetBWeapon ( i ) then
29463: LD_VAR 0 8
29467: PPUSH
29468: CALL_OW 269
29472: NOT
29473: IFFALSE 29499
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29475: LD_VAR 0 8
29479: PPUSH
29480: LD_VAR 0 8
29484: PPUSH
29485: LD_VAR 0 2
29489: PPUSH
29490: CALL 30749 0 2
29494: PPUSH
29495: CALL_OW 431
// end ;
29499: GO 29460
29501: POP
29502: POP
// end ; for i = 1 to personel do
29503: LD_ADDR_VAR 0 8
29507: PUSH
29508: DOUBLE
29509: LD_INT 1
29511: DEC
29512: ST_TO_ADDR
29513: LD_VAR 0 6
29517: PUSH
29518: FOR_TO
29519: IFFALSE 30583
// begin if i > 4 then
29521: LD_VAR 0 8
29525: PUSH
29526: LD_INT 4
29528: GREATER
29529: IFFALSE 29533
// break ;
29531: GO 30583
// case i of 1 :
29533: LD_VAR 0 8
29537: PUSH
29538: LD_INT 1
29540: DOUBLE
29541: EQUAL
29542: IFTRUE 29546
29544: GO 29626
29546: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29547: LD_ADDR_VAR 0 12
29551: PUSH
29552: LD_VAR 0 18
29556: PPUSH
29557: LD_INT 22
29559: PUSH
29560: LD_VAR 0 16
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: LD_INT 58
29571: PUSH
29572: EMPTY
29573: LIST
29574: PUSH
29575: LD_INT 2
29577: PUSH
29578: LD_INT 30
29580: PUSH
29581: LD_INT 32
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 30
29590: PUSH
29591: LD_INT 4
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 30
29600: PUSH
29601: LD_INT 5
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: LIST
29618: PPUSH
29619: CALL_OW 72
29623: ST_TO_ADDR
29624: GO 29848
29626: LD_INT 2
29628: DOUBLE
29629: EQUAL
29630: IFTRUE 29634
29632: GO 29696
29634: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29635: LD_ADDR_VAR 0 12
29639: PUSH
29640: LD_VAR 0 18
29644: PPUSH
29645: LD_INT 22
29647: PUSH
29648: LD_VAR 0 16
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 2
29659: PUSH
29660: LD_INT 30
29662: PUSH
29663: LD_INT 0
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 30
29672: PUSH
29673: LD_INT 1
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: LIST
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PPUSH
29689: CALL_OW 72
29693: ST_TO_ADDR
29694: GO 29848
29696: LD_INT 3
29698: DOUBLE
29699: EQUAL
29700: IFTRUE 29704
29702: GO 29766
29704: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29705: LD_ADDR_VAR 0 12
29709: PUSH
29710: LD_VAR 0 18
29714: PPUSH
29715: LD_INT 22
29717: PUSH
29718: LD_VAR 0 16
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 2
29729: PUSH
29730: LD_INT 30
29732: PUSH
29733: LD_INT 2
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 30
29742: PUSH
29743: LD_INT 3
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: LIST
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PPUSH
29759: CALL_OW 72
29763: ST_TO_ADDR
29764: GO 29848
29766: LD_INT 4
29768: DOUBLE
29769: EQUAL
29770: IFTRUE 29774
29772: GO 29847
29774: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29775: LD_ADDR_VAR 0 12
29779: PUSH
29780: LD_VAR 0 18
29784: PPUSH
29785: LD_INT 22
29787: PUSH
29788: LD_VAR 0 16
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 2
29799: PUSH
29800: LD_INT 30
29802: PUSH
29803: LD_INT 6
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 30
29812: PUSH
29813: LD_INT 7
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 30
29822: PUSH
29823: LD_INT 8
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PPUSH
29840: CALL_OW 72
29844: ST_TO_ADDR
29845: GO 29848
29847: POP
// if i = 1 then
29848: LD_VAR 0 8
29852: PUSH
29853: LD_INT 1
29855: EQUAL
29856: IFFALSE 29967
// begin tmp := [ ] ;
29858: LD_ADDR_VAR 0 19
29862: PUSH
29863: EMPTY
29864: ST_TO_ADDR
// for j in f do
29865: LD_ADDR_VAR 0 9
29869: PUSH
29870: LD_VAR 0 12
29874: PUSH
29875: FOR_IN
29876: IFFALSE 29949
// if GetBType ( j ) = b_bunker then
29878: LD_VAR 0 9
29882: PPUSH
29883: CALL_OW 266
29887: PUSH
29888: LD_INT 32
29890: EQUAL
29891: IFFALSE 29918
// tmp := Insert ( tmp , 1 , j ) else
29893: LD_ADDR_VAR 0 19
29897: PUSH
29898: LD_VAR 0 19
29902: PPUSH
29903: LD_INT 1
29905: PPUSH
29906: LD_VAR 0 9
29910: PPUSH
29911: CALL_OW 2
29915: ST_TO_ADDR
29916: GO 29947
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29918: LD_ADDR_VAR 0 19
29922: PUSH
29923: LD_VAR 0 19
29927: PPUSH
29928: LD_VAR 0 19
29932: PUSH
29933: LD_INT 1
29935: PLUS
29936: PPUSH
29937: LD_VAR 0 9
29941: PPUSH
29942: CALL_OW 2
29946: ST_TO_ADDR
29947: GO 29875
29949: POP
29950: POP
// if tmp then
29951: LD_VAR 0 19
29955: IFFALSE 29967
// f := tmp ;
29957: LD_ADDR_VAR 0 12
29961: PUSH
29962: LD_VAR 0 19
29966: ST_TO_ADDR
// end ; x := personel [ i ] ;
29967: LD_ADDR_VAR 0 13
29971: PUSH
29972: LD_VAR 0 6
29976: PUSH
29977: LD_VAR 0 8
29981: ARRAY
29982: ST_TO_ADDR
// if x = - 1 then
29983: LD_VAR 0 13
29987: PUSH
29988: LD_INT 1
29990: NEG
29991: EQUAL
29992: IFFALSE 30201
// begin for j in f do
29994: LD_ADDR_VAR 0 9
29998: PUSH
29999: LD_VAR 0 12
30003: PUSH
30004: FOR_IN
30005: IFFALSE 30197
// repeat InitHc ;
30007: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30011: LD_VAR 0 9
30015: PPUSH
30016: CALL_OW 266
30020: PUSH
30021: LD_INT 5
30023: EQUAL
30024: IFFALSE 30094
// begin if UnitsInside ( j ) < 3 then
30026: LD_VAR 0 9
30030: PPUSH
30031: CALL_OW 313
30035: PUSH
30036: LD_INT 3
30038: LESS
30039: IFFALSE 30075
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30041: LD_INT 0
30043: PPUSH
30044: LD_INT 5
30046: PUSH
30047: LD_INT 8
30049: PUSH
30050: LD_INT 9
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: LIST
30057: PUSH
30058: LD_VAR 0 17
30062: ARRAY
30063: PPUSH
30064: LD_VAR 0 4
30068: PPUSH
30069: CALL_OW 380
30073: GO 30092
// PrepareHuman ( false , i , skill ) ;
30075: LD_INT 0
30077: PPUSH
30078: LD_VAR 0 8
30082: PPUSH
30083: LD_VAR 0 4
30087: PPUSH
30088: CALL_OW 380
// end else
30092: GO 30111
// PrepareHuman ( false , i , skill ) ;
30094: LD_INT 0
30096: PPUSH
30097: LD_VAR 0 8
30101: PPUSH
30102: LD_VAR 0 4
30106: PPUSH
30107: CALL_OW 380
// un := CreateHuman ;
30111: LD_ADDR_VAR 0 14
30115: PUSH
30116: CALL_OW 44
30120: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30121: LD_ADDR_VAR 0 7
30125: PUSH
30126: LD_VAR 0 7
30130: PPUSH
30131: LD_INT 1
30133: PPUSH
30134: LD_VAR 0 14
30138: PPUSH
30139: CALL_OW 2
30143: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30144: LD_VAR 0 14
30148: PPUSH
30149: LD_VAR 0 9
30153: PPUSH
30154: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30158: LD_VAR 0 9
30162: PPUSH
30163: CALL_OW 313
30167: PUSH
30168: LD_INT 6
30170: EQUAL
30171: PUSH
30172: LD_VAR 0 9
30176: PPUSH
30177: CALL_OW 266
30181: PUSH
30182: LD_INT 32
30184: PUSH
30185: LD_INT 31
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: IN
30192: OR
30193: IFFALSE 30007
30195: GO 30004
30197: POP
30198: POP
// end else
30199: GO 30581
// for j = 1 to x do
30201: LD_ADDR_VAR 0 9
30205: PUSH
30206: DOUBLE
30207: LD_INT 1
30209: DEC
30210: ST_TO_ADDR
30211: LD_VAR 0 13
30215: PUSH
30216: FOR_TO
30217: IFFALSE 30579
// begin InitHc ;
30219: CALL_OW 19
// if not f then
30223: LD_VAR 0 12
30227: NOT
30228: IFFALSE 30317
// begin PrepareHuman ( false , i , skill ) ;
30230: LD_INT 0
30232: PPUSH
30233: LD_VAR 0 8
30237: PPUSH
30238: LD_VAR 0 4
30242: PPUSH
30243: CALL_OW 380
// un := CreateHuman ;
30247: LD_ADDR_VAR 0 14
30251: PUSH
30252: CALL_OW 44
30256: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30257: LD_ADDR_VAR 0 7
30261: PUSH
30262: LD_VAR 0 7
30266: PPUSH
30267: LD_INT 1
30269: PPUSH
30270: LD_VAR 0 14
30274: PPUSH
30275: CALL_OW 2
30279: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30280: LD_VAR 0 14
30284: PPUSH
30285: LD_VAR 0 1
30289: PPUSH
30290: CALL_OW 250
30294: PPUSH
30295: LD_VAR 0 1
30299: PPUSH
30300: CALL_OW 251
30304: PPUSH
30305: LD_INT 10
30307: PPUSH
30308: LD_INT 0
30310: PPUSH
30311: CALL_OW 50
// continue ;
30315: GO 30216
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30317: LD_VAR 0 12
30321: PUSH
30322: LD_INT 1
30324: ARRAY
30325: PPUSH
30326: CALL_OW 313
30330: PUSH
30331: LD_VAR 0 12
30335: PUSH
30336: LD_INT 1
30338: ARRAY
30339: PPUSH
30340: CALL_OW 266
30344: PUSH
30345: LD_INT 32
30347: PUSH
30348: LD_INT 31
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: IN
30355: AND
30356: PUSH
30357: LD_VAR 0 12
30361: PUSH
30362: LD_INT 1
30364: ARRAY
30365: PPUSH
30366: CALL_OW 313
30370: PUSH
30371: LD_INT 6
30373: EQUAL
30374: OR
30375: IFFALSE 30395
// f := Delete ( f , 1 ) ;
30377: LD_ADDR_VAR 0 12
30381: PUSH
30382: LD_VAR 0 12
30386: PPUSH
30387: LD_INT 1
30389: PPUSH
30390: CALL_OW 3
30394: ST_TO_ADDR
// if not f then
30395: LD_VAR 0 12
30399: NOT
30400: IFFALSE 30418
// begin x := x + 2 ;
30402: LD_ADDR_VAR 0 13
30406: PUSH
30407: LD_VAR 0 13
30411: PUSH
30412: LD_INT 2
30414: PLUS
30415: ST_TO_ADDR
// continue ;
30416: GO 30216
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30418: LD_VAR 0 12
30422: PUSH
30423: LD_INT 1
30425: ARRAY
30426: PPUSH
30427: CALL_OW 266
30431: PUSH
30432: LD_INT 5
30434: EQUAL
30435: IFFALSE 30509
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30437: LD_VAR 0 12
30441: PUSH
30442: LD_INT 1
30444: ARRAY
30445: PPUSH
30446: CALL_OW 313
30450: PUSH
30451: LD_INT 3
30453: LESS
30454: IFFALSE 30490
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30456: LD_INT 0
30458: PPUSH
30459: LD_INT 5
30461: PUSH
30462: LD_INT 8
30464: PUSH
30465: LD_INT 9
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: LIST
30472: PUSH
30473: LD_VAR 0 17
30477: ARRAY
30478: PPUSH
30479: LD_VAR 0 4
30483: PPUSH
30484: CALL_OW 380
30488: GO 30507
// PrepareHuman ( false , i , skill ) ;
30490: LD_INT 0
30492: PPUSH
30493: LD_VAR 0 8
30497: PPUSH
30498: LD_VAR 0 4
30502: PPUSH
30503: CALL_OW 380
// end else
30507: GO 30526
// PrepareHuman ( false , i , skill ) ;
30509: LD_INT 0
30511: PPUSH
30512: LD_VAR 0 8
30516: PPUSH
30517: LD_VAR 0 4
30521: PPUSH
30522: CALL_OW 380
// un := CreateHuman ;
30526: LD_ADDR_VAR 0 14
30530: PUSH
30531: CALL_OW 44
30535: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30536: LD_ADDR_VAR 0 7
30540: PUSH
30541: LD_VAR 0 7
30545: PPUSH
30546: LD_INT 1
30548: PPUSH
30549: LD_VAR 0 14
30553: PPUSH
30554: CALL_OW 2
30558: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30559: LD_VAR 0 14
30563: PPUSH
30564: LD_VAR 0 12
30568: PUSH
30569: LD_INT 1
30571: ARRAY
30572: PPUSH
30573: CALL_OW 52
// end ;
30577: GO 30216
30579: POP
30580: POP
// end ;
30581: GO 29518
30583: POP
30584: POP
// result := result ^ buildings ;
30585: LD_ADDR_VAR 0 7
30589: PUSH
30590: LD_VAR 0 7
30594: PUSH
30595: LD_VAR 0 18
30599: ADD
30600: ST_TO_ADDR
// end else
30601: GO 30744
// begin for i = 1 to personel do
30603: LD_ADDR_VAR 0 8
30607: PUSH
30608: DOUBLE
30609: LD_INT 1
30611: DEC
30612: ST_TO_ADDR
30613: LD_VAR 0 6
30617: PUSH
30618: FOR_TO
30619: IFFALSE 30742
// begin if i > 4 then
30621: LD_VAR 0 8
30625: PUSH
30626: LD_INT 4
30628: GREATER
30629: IFFALSE 30633
// break ;
30631: GO 30742
// x := personel [ i ] ;
30633: LD_ADDR_VAR 0 13
30637: PUSH
30638: LD_VAR 0 6
30642: PUSH
30643: LD_VAR 0 8
30647: ARRAY
30648: ST_TO_ADDR
// if x = - 1 then
30649: LD_VAR 0 13
30653: PUSH
30654: LD_INT 1
30656: NEG
30657: EQUAL
30658: IFFALSE 30662
// continue ;
30660: GO 30618
// PrepareHuman ( false , i , skill ) ;
30662: LD_INT 0
30664: PPUSH
30665: LD_VAR 0 8
30669: PPUSH
30670: LD_VAR 0 4
30674: PPUSH
30675: CALL_OW 380
// un := CreateHuman ;
30679: LD_ADDR_VAR 0 14
30683: PUSH
30684: CALL_OW 44
30688: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30689: LD_VAR 0 14
30693: PPUSH
30694: LD_VAR 0 1
30698: PPUSH
30699: CALL_OW 250
30703: PPUSH
30704: LD_VAR 0 1
30708: PPUSH
30709: CALL_OW 251
30713: PPUSH
30714: LD_INT 10
30716: PPUSH
30717: LD_INT 0
30719: PPUSH
30720: CALL_OW 50
// result := result ^ un ;
30724: LD_ADDR_VAR 0 7
30728: PUSH
30729: LD_VAR 0 7
30733: PUSH
30734: LD_VAR 0 14
30738: ADD
30739: ST_TO_ADDR
// end ;
30740: GO 30618
30742: POP
30743: POP
// end ; end ;
30744: LD_VAR 0 7
30748: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30749: LD_INT 0
30751: PPUSH
30752: PPUSH
30753: PPUSH
30754: PPUSH
30755: PPUSH
30756: PPUSH
30757: PPUSH
30758: PPUSH
30759: PPUSH
30760: PPUSH
30761: PPUSH
30762: PPUSH
30763: PPUSH
30764: PPUSH
30765: PPUSH
30766: PPUSH
// result := false ;
30767: LD_ADDR_VAR 0 3
30771: PUSH
30772: LD_INT 0
30774: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30775: LD_VAR 0 1
30779: NOT
30780: PUSH
30781: LD_VAR 0 1
30785: PPUSH
30786: CALL_OW 266
30790: PUSH
30791: LD_INT 32
30793: PUSH
30794: LD_INT 33
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: IN
30801: NOT
30802: OR
30803: IFFALSE 30807
// exit ;
30805: GO 31916
// nat := GetNation ( tower ) ;
30807: LD_ADDR_VAR 0 12
30811: PUSH
30812: LD_VAR 0 1
30816: PPUSH
30817: CALL_OW 248
30821: ST_TO_ADDR
// side := GetSide ( tower ) ;
30822: LD_ADDR_VAR 0 16
30826: PUSH
30827: LD_VAR 0 1
30831: PPUSH
30832: CALL_OW 255
30836: ST_TO_ADDR
// x := GetX ( tower ) ;
30837: LD_ADDR_VAR 0 10
30841: PUSH
30842: LD_VAR 0 1
30846: PPUSH
30847: CALL_OW 250
30851: ST_TO_ADDR
// y := GetY ( tower ) ;
30852: LD_ADDR_VAR 0 11
30856: PUSH
30857: LD_VAR 0 1
30861: PPUSH
30862: CALL_OW 251
30866: ST_TO_ADDR
// if not x or not y then
30867: LD_VAR 0 10
30871: NOT
30872: PUSH
30873: LD_VAR 0 11
30877: NOT
30878: OR
30879: IFFALSE 30883
// exit ;
30881: GO 31916
// weapon := 0 ;
30883: LD_ADDR_VAR 0 18
30887: PUSH
30888: LD_INT 0
30890: ST_TO_ADDR
// fac_list := [ ] ;
30891: LD_ADDR_VAR 0 17
30895: PUSH
30896: EMPTY
30897: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
30898: LD_ADDR_VAR 0 6
30902: PUSH
30903: LD_VAR 0 1
30907: PPUSH
30908: CALL_OW 274
30912: PPUSH
30913: LD_VAR 0 2
30917: PPUSH
30918: LD_INT 0
30920: PPUSH
30921: CALL 28487 0 3
30925: PPUSH
30926: LD_INT 30
30928: PUSH
30929: LD_INT 3
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PPUSH
30936: CALL_OW 72
30940: ST_TO_ADDR
// if not factories then
30941: LD_VAR 0 6
30945: NOT
30946: IFFALSE 30950
// exit ;
30948: GO 31916
// for i in factories do
30950: LD_ADDR_VAR 0 8
30954: PUSH
30955: LD_VAR 0 6
30959: PUSH
30960: FOR_IN
30961: IFFALSE 30986
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30963: LD_ADDR_VAR 0 17
30967: PUSH
30968: LD_VAR 0 17
30972: PUSH
30973: LD_VAR 0 8
30977: PPUSH
30978: CALL_OW 478
30982: UNION
30983: ST_TO_ADDR
30984: GO 30960
30986: POP
30987: POP
// if not fac_list then
30988: LD_VAR 0 17
30992: NOT
30993: IFFALSE 30997
// exit ;
30995: GO 31916
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30997: LD_ADDR_VAR 0 5
31001: PUSH
31002: LD_INT 4
31004: PUSH
31005: LD_INT 5
31007: PUSH
31008: LD_INT 9
31010: PUSH
31011: LD_INT 10
31013: PUSH
31014: LD_INT 6
31016: PUSH
31017: LD_INT 7
31019: PUSH
31020: LD_INT 11
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 27
31034: PUSH
31035: LD_INT 28
31037: PUSH
31038: LD_INT 26
31040: PUSH
31041: LD_INT 30
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 43
31052: PUSH
31053: LD_INT 44
31055: PUSH
31056: LD_INT 46
31058: PUSH
31059: LD_INT 45
31061: PUSH
31062: LD_INT 47
31064: PUSH
31065: LD_INT 49
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: LIST
31080: PUSH
31081: LD_VAR 0 12
31085: ARRAY
31086: ST_TO_ADDR
// list := list isect fac_list ;
31087: LD_ADDR_VAR 0 5
31091: PUSH
31092: LD_VAR 0 5
31096: PUSH
31097: LD_VAR 0 17
31101: ISECT
31102: ST_TO_ADDR
// if not list then
31103: LD_VAR 0 5
31107: NOT
31108: IFFALSE 31112
// exit ;
31110: GO 31916
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31112: LD_VAR 0 12
31116: PUSH
31117: LD_INT 3
31119: EQUAL
31120: PUSH
31121: LD_INT 49
31123: PUSH
31124: LD_VAR 0 5
31128: IN
31129: AND
31130: PUSH
31131: LD_INT 31
31133: PPUSH
31134: LD_VAR 0 16
31138: PPUSH
31139: CALL_OW 321
31143: PUSH
31144: LD_INT 2
31146: EQUAL
31147: AND
31148: IFFALSE 31208
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31150: LD_INT 22
31152: PUSH
31153: LD_VAR 0 16
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 35
31164: PUSH
31165: LD_INT 49
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 91
31174: PUSH
31175: LD_VAR 0 1
31179: PUSH
31180: LD_INT 10
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: LIST
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: LIST
31192: PPUSH
31193: CALL_OW 69
31197: NOT
31198: IFFALSE 31208
// weapon := ru_time_lapser ;
31200: LD_ADDR_VAR 0 18
31204: PUSH
31205: LD_INT 49
31207: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31208: LD_VAR 0 12
31212: PUSH
31213: LD_INT 1
31215: PUSH
31216: LD_INT 2
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: IN
31223: PUSH
31224: LD_INT 11
31226: PUSH
31227: LD_VAR 0 5
31231: IN
31232: PUSH
31233: LD_INT 30
31235: PUSH
31236: LD_VAR 0 5
31240: IN
31241: OR
31242: AND
31243: PUSH
31244: LD_INT 6
31246: PPUSH
31247: LD_VAR 0 16
31251: PPUSH
31252: CALL_OW 321
31256: PUSH
31257: LD_INT 2
31259: EQUAL
31260: AND
31261: IFFALSE 31426
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31263: LD_INT 22
31265: PUSH
31266: LD_VAR 0 16
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 2
31277: PUSH
31278: LD_INT 35
31280: PUSH
31281: LD_INT 11
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 35
31290: PUSH
31291: LD_INT 30
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 91
31305: PUSH
31306: LD_VAR 0 1
31310: PUSH
31311: LD_INT 18
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: LIST
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: LIST
31323: PPUSH
31324: CALL_OW 69
31328: NOT
31329: PUSH
31330: LD_INT 22
31332: PUSH
31333: LD_VAR 0 16
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 2
31344: PUSH
31345: LD_INT 30
31347: PUSH
31348: LD_INT 32
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 30
31357: PUSH
31358: LD_INT 33
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 91
31372: PUSH
31373: LD_VAR 0 1
31377: PUSH
31378: LD_INT 12
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: LIST
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: LIST
31390: PUSH
31391: EMPTY
31392: LIST
31393: PPUSH
31394: CALL_OW 69
31398: PUSH
31399: LD_INT 2
31401: GREATER
31402: AND
31403: IFFALSE 31426
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31405: LD_ADDR_VAR 0 18
31409: PUSH
31410: LD_INT 11
31412: PUSH
31413: LD_INT 30
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_VAR 0 12
31424: ARRAY
31425: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31426: LD_VAR 0 18
31430: NOT
31431: PUSH
31432: LD_INT 40
31434: PPUSH
31435: LD_VAR 0 16
31439: PPUSH
31440: CALL_OW 321
31444: PUSH
31445: LD_INT 2
31447: EQUAL
31448: AND
31449: PUSH
31450: LD_INT 7
31452: PUSH
31453: LD_VAR 0 5
31457: IN
31458: PUSH
31459: LD_INT 28
31461: PUSH
31462: LD_VAR 0 5
31466: IN
31467: OR
31468: PUSH
31469: LD_INT 45
31471: PUSH
31472: LD_VAR 0 5
31476: IN
31477: OR
31478: AND
31479: IFFALSE 31733
// begin hex := GetHexInfo ( x , y ) ;
31481: LD_ADDR_VAR 0 4
31485: PUSH
31486: LD_VAR 0 10
31490: PPUSH
31491: LD_VAR 0 11
31495: PPUSH
31496: CALL_OW 546
31500: ST_TO_ADDR
// if hex [ 1 ] then
31501: LD_VAR 0 4
31505: PUSH
31506: LD_INT 1
31508: ARRAY
31509: IFFALSE 31513
// exit ;
31511: GO 31916
// height := hex [ 2 ] ;
31513: LD_ADDR_VAR 0 15
31517: PUSH
31518: LD_VAR 0 4
31522: PUSH
31523: LD_INT 2
31525: ARRAY
31526: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31527: LD_ADDR_VAR 0 14
31531: PUSH
31532: LD_INT 0
31534: PUSH
31535: LD_INT 2
31537: PUSH
31538: LD_INT 3
31540: PUSH
31541: LD_INT 5
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: ST_TO_ADDR
// for i in tmp do
31550: LD_ADDR_VAR 0 8
31554: PUSH
31555: LD_VAR 0 14
31559: PUSH
31560: FOR_IN
31561: IFFALSE 31731
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31563: LD_ADDR_VAR 0 9
31567: PUSH
31568: LD_VAR 0 10
31572: PPUSH
31573: LD_VAR 0 8
31577: PPUSH
31578: LD_INT 5
31580: PPUSH
31581: CALL_OW 272
31585: PUSH
31586: LD_VAR 0 11
31590: PPUSH
31591: LD_VAR 0 8
31595: PPUSH
31596: LD_INT 5
31598: PPUSH
31599: CALL_OW 273
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31608: LD_VAR 0 9
31612: PUSH
31613: LD_INT 1
31615: ARRAY
31616: PPUSH
31617: LD_VAR 0 9
31621: PUSH
31622: LD_INT 2
31624: ARRAY
31625: PPUSH
31626: CALL_OW 488
31630: IFFALSE 31729
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31632: LD_ADDR_VAR 0 4
31636: PUSH
31637: LD_VAR 0 9
31641: PUSH
31642: LD_INT 1
31644: ARRAY
31645: PPUSH
31646: LD_VAR 0 9
31650: PUSH
31651: LD_INT 2
31653: ARRAY
31654: PPUSH
31655: CALL_OW 546
31659: ST_TO_ADDR
// if hex [ 1 ] then
31660: LD_VAR 0 4
31664: PUSH
31665: LD_INT 1
31667: ARRAY
31668: IFFALSE 31672
// continue ;
31670: GO 31560
// h := hex [ 2 ] ;
31672: LD_ADDR_VAR 0 13
31676: PUSH
31677: LD_VAR 0 4
31681: PUSH
31682: LD_INT 2
31684: ARRAY
31685: ST_TO_ADDR
// if h + 7 < height then
31686: LD_VAR 0 13
31690: PUSH
31691: LD_INT 7
31693: PLUS
31694: PUSH
31695: LD_VAR 0 15
31699: LESS
31700: IFFALSE 31729
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31702: LD_ADDR_VAR 0 18
31706: PUSH
31707: LD_INT 7
31709: PUSH
31710: LD_INT 28
31712: PUSH
31713: LD_INT 45
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: LIST
31720: PUSH
31721: LD_VAR 0 12
31725: ARRAY
31726: ST_TO_ADDR
// break ;
31727: GO 31731
// end ; end ; end ;
31729: GO 31560
31731: POP
31732: POP
// end ; if not weapon then
31733: LD_VAR 0 18
31737: NOT
31738: IFFALSE 31798
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31740: LD_ADDR_VAR 0 5
31744: PUSH
31745: LD_VAR 0 5
31749: PUSH
31750: LD_INT 11
31752: PUSH
31753: LD_INT 30
31755: PUSH
31756: LD_INT 49
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: LIST
31763: DIFF
31764: ST_TO_ADDR
// if not list then
31765: LD_VAR 0 5
31769: NOT
31770: IFFALSE 31774
// exit ;
31772: GO 31916
// weapon := list [ rand ( 1 , list ) ] ;
31774: LD_ADDR_VAR 0 18
31778: PUSH
31779: LD_VAR 0 5
31783: PUSH
31784: LD_INT 1
31786: PPUSH
31787: LD_VAR 0 5
31791: PPUSH
31792: CALL_OW 12
31796: ARRAY
31797: ST_TO_ADDR
// end ; if weapon then
31798: LD_VAR 0 18
31802: IFFALSE 31916
// begin tmp := CostOfWeapon ( weapon ) ;
31804: LD_ADDR_VAR 0 14
31808: PUSH
31809: LD_VAR 0 18
31813: PPUSH
31814: CALL_OW 451
31818: ST_TO_ADDR
// j := GetBase ( tower ) ;
31819: LD_ADDR_VAR 0 9
31823: PUSH
31824: LD_VAR 0 1
31828: PPUSH
31829: CALL_OW 274
31833: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31834: LD_VAR 0 9
31838: PPUSH
31839: LD_INT 1
31841: PPUSH
31842: CALL_OW 275
31846: PUSH
31847: LD_VAR 0 14
31851: PUSH
31852: LD_INT 1
31854: ARRAY
31855: GREATEREQUAL
31856: PUSH
31857: LD_VAR 0 9
31861: PPUSH
31862: LD_INT 2
31864: PPUSH
31865: CALL_OW 275
31869: PUSH
31870: LD_VAR 0 14
31874: PUSH
31875: LD_INT 2
31877: ARRAY
31878: GREATEREQUAL
31879: AND
31880: PUSH
31881: LD_VAR 0 9
31885: PPUSH
31886: LD_INT 3
31888: PPUSH
31889: CALL_OW 275
31893: PUSH
31894: LD_VAR 0 14
31898: PUSH
31899: LD_INT 3
31901: ARRAY
31902: GREATEREQUAL
31903: AND
31904: IFFALSE 31916
// result := weapon ;
31906: LD_ADDR_VAR 0 3
31910: PUSH
31911: LD_VAR 0 18
31915: ST_TO_ADDR
// end ; end ;
31916: LD_VAR 0 3
31920: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31921: LD_INT 0
31923: PPUSH
31924: PPUSH
// result := true ;
31925: LD_ADDR_VAR 0 3
31929: PUSH
31930: LD_INT 1
31932: ST_TO_ADDR
// if array1 = array2 then
31933: LD_VAR 0 1
31937: PUSH
31938: LD_VAR 0 2
31942: EQUAL
31943: IFFALSE 32003
// begin for i = 1 to array1 do
31945: LD_ADDR_VAR 0 4
31949: PUSH
31950: DOUBLE
31951: LD_INT 1
31953: DEC
31954: ST_TO_ADDR
31955: LD_VAR 0 1
31959: PUSH
31960: FOR_TO
31961: IFFALSE 31999
// if array1 [ i ] <> array2 [ i ] then
31963: LD_VAR 0 1
31967: PUSH
31968: LD_VAR 0 4
31972: ARRAY
31973: PUSH
31974: LD_VAR 0 2
31978: PUSH
31979: LD_VAR 0 4
31983: ARRAY
31984: NONEQUAL
31985: IFFALSE 31997
// begin result := false ;
31987: LD_ADDR_VAR 0 3
31991: PUSH
31992: LD_INT 0
31994: ST_TO_ADDR
// break ;
31995: GO 31999
// end ;
31997: GO 31960
31999: POP
32000: POP
// end else
32001: GO 32011
// result := false ;
32003: LD_ADDR_VAR 0 3
32007: PUSH
32008: LD_INT 0
32010: ST_TO_ADDR
// end ;
32011: LD_VAR 0 3
32015: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32016: LD_INT 0
32018: PPUSH
32019: PPUSH
// if not array1 or not array2 then
32020: LD_VAR 0 1
32024: NOT
32025: PUSH
32026: LD_VAR 0 2
32030: NOT
32031: OR
32032: IFFALSE 32036
// exit ;
32034: GO 32100
// result := true ;
32036: LD_ADDR_VAR 0 3
32040: PUSH
32041: LD_INT 1
32043: ST_TO_ADDR
// for i = 1 to array1 do
32044: LD_ADDR_VAR 0 4
32048: PUSH
32049: DOUBLE
32050: LD_INT 1
32052: DEC
32053: ST_TO_ADDR
32054: LD_VAR 0 1
32058: PUSH
32059: FOR_TO
32060: IFFALSE 32098
// if array1 [ i ] <> array2 [ i ] then
32062: LD_VAR 0 1
32066: PUSH
32067: LD_VAR 0 4
32071: ARRAY
32072: PUSH
32073: LD_VAR 0 2
32077: PUSH
32078: LD_VAR 0 4
32082: ARRAY
32083: NONEQUAL
32084: IFFALSE 32096
// begin result := false ;
32086: LD_ADDR_VAR 0 3
32090: PUSH
32091: LD_INT 0
32093: ST_TO_ADDR
// break ;
32094: GO 32098
// end ;
32096: GO 32059
32098: POP
32099: POP
// end ;
32100: LD_VAR 0 3
32104: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32105: LD_INT 0
32107: PPUSH
32108: PPUSH
32109: PPUSH
// pom := GetBase ( fac ) ;
32110: LD_ADDR_VAR 0 5
32114: PUSH
32115: LD_VAR 0 1
32119: PPUSH
32120: CALL_OW 274
32124: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32125: LD_ADDR_VAR 0 4
32129: PUSH
32130: LD_VAR 0 2
32134: PUSH
32135: LD_INT 1
32137: ARRAY
32138: PPUSH
32139: LD_VAR 0 2
32143: PUSH
32144: LD_INT 2
32146: ARRAY
32147: PPUSH
32148: LD_VAR 0 2
32152: PUSH
32153: LD_INT 3
32155: ARRAY
32156: PPUSH
32157: LD_VAR 0 2
32161: PUSH
32162: LD_INT 4
32164: ARRAY
32165: PPUSH
32166: CALL_OW 449
32170: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32171: LD_ADDR_VAR 0 3
32175: PUSH
32176: LD_VAR 0 5
32180: PPUSH
32181: LD_INT 1
32183: PPUSH
32184: CALL_OW 275
32188: PUSH
32189: LD_VAR 0 4
32193: PUSH
32194: LD_INT 1
32196: ARRAY
32197: GREATEREQUAL
32198: PUSH
32199: LD_VAR 0 5
32203: PPUSH
32204: LD_INT 2
32206: PPUSH
32207: CALL_OW 275
32211: PUSH
32212: LD_VAR 0 4
32216: PUSH
32217: LD_INT 2
32219: ARRAY
32220: GREATEREQUAL
32221: AND
32222: PUSH
32223: LD_VAR 0 5
32227: PPUSH
32228: LD_INT 3
32230: PPUSH
32231: CALL_OW 275
32235: PUSH
32236: LD_VAR 0 4
32240: PUSH
32241: LD_INT 3
32243: ARRAY
32244: GREATEREQUAL
32245: AND
32246: ST_TO_ADDR
// end ;
32247: LD_VAR 0 3
32251: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32252: LD_INT 0
32254: PPUSH
32255: PPUSH
32256: PPUSH
32257: PPUSH
// pom := GetBase ( building ) ;
32258: LD_ADDR_VAR 0 3
32262: PUSH
32263: LD_VAR 0 1
32267: PPUSH
32268: CALL_OW 274
32272: ST_TO_ADDR
// if not pom then
32273: LD_VAR 0 3
32277: NOT
32278: IFFALSE 32282
// exit ;
32280: GO 32452
// btype := GetBType ( building ) ;
32282: LD_ADDR_VAR 0 5
32286: PUSH
32287: LD_VAR 0 1
32291: PPUSH
32292: CALL_OW 266
32296: ST_TO_ADDR
// if btype = b_armoury then
32297: LD_VAR 0 5
32301: PUSH
32302: LD_INT 4
32304: EQUAL
32305: IFFALSE 32315
// btype := b_barracks ;
32307: LD_ADDR_VAR 0 5
32311: PUSH
32312: LD_INT 5
32314: ST_TO_ADDR
// if btype = b_depot then
32315: LD_VAR 0 5
32319: PUSH
32320: LD_INT 0
32322: EQUAL
32323: IFFALSE 32333
// btype := b_warehouse ;
32325: LD_ADDR_VAR 0 5
32329: PUSH
32330: LD_INT 1
32332: ST_TO_ADDR
// if btype = b_workshop then
32333: LD_VAR 0 5
32337: PUSH
32338: LD_INT 2
32340: EQUAL
32341: IFFALSE 32351
// btype := b_factory ;
32343: LD_ADDR_VAR 0 5
32347: PUSH
32348: LD_INT 3
32350: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32351: LD_ADDR_VAR 0 4
32355: PUSH
32356: LD_VAR 0 5
32360: PPUSH
32361: LD_VAR 0 1
32365: PPUSH
32366: CALL_OW 248
32370: PPUSH
32371: CALL_OW 450
32375: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32376: LD_ADDR_VAR 0 2
32380: PUSH
32381: LD_VAR 0 3
32385: PPUSH
32386: LD_INT 1
32388: PPUSH
32389: CALL_OW 275
32393: PUSH
32394: LD_VAR 0 4
32398: PUSH
32399: LD_INT 1
32401: ARRAY
32402: GREATEREQUAL
32403: PUSH
32404: LD_VAR 0 3
32408: PPUSH
32409: LD_INT 2
32411: PPUSH
32412: CALL_OW 275
32416: PUSH
32417: LD_VAR 0 4
32421: PUSH
32422: LD_INT 2
32424: ARRAY
32425: GREATEREQUAL
32426: AND
32427: PUSH
32428: LD_VAR 0 3
32432: PPUSH
32433: LD_INT 3
32435: PPUSH
32436: CALL_OW 275
32440: PUSH
32441: LD_VAR 0 4
32445: PUSH
32446: LD_INT 3
32448: ARRAY
32449: GREATEREQUAL
32450: AND
32451: ST_TO_ADDR
// end ;
32452: LD_VAR 0 2
32456: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32457: LD_INT 0
32459: PPUSH
32460: PPUSH
32461: PPUSH
// pom := GetBase ( building ) ;
32462: LD_ADDR_VAR 0 4
32466: PUSH
32467: LD_VAR 0 1
32471: PPUSH
32472: CALL_OW 274
32476: ST_TO_ADDR
// if not pom then
32477: LD_VAR 0 4
32481: NOT
32482: IFFALSE 32486
// exit ;
32484: GO 32587
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32486: LD_ADDR_VAR 0 5
32490: PUSH
32491: LD_VAR 0 2
32495: PPUSH
32496: LD_VAR 0 1
32500: PPUSH
32501: CALL_OW 248
32505: PPUSH
32506: CALL_OW 450
32510: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32511: LD_ADDR_VAR 0 3
32515: PUSH
32516: LD_VAR 0 4
32520: PPUSH
32521: LD_INT 1
32523: PPUSH
32524: CALL_OW 275
32528: PUSH
32529: LD_VAR 0 5
32533: PUSH
32534: LD_INT 1
32536: ARRAY
32537: GREATEREQUAL
32538: PUSH
32539: LD_VAR 0 4
32543: PPUSH
32544: LD_INT 2
32546: PPUSH
32547: CALL_OW 275
32551: PUSH
32552: LD_VAR 0 5
32556: PUSH
32557: LD_INT 2
32559: ARRAY
32560: GREATEREQUAL
32561: AND
32562: PUSH
32563: LD_VAR 0 4
32567: PPUSH
32568: LD_INT 3
32570: PPUSH
32571: CALL_OW 275
32575: PUSH
32576: LD_VAR 0 5
32580: PUSH
32581: LD_INT 3
32583: ARRAY
32584: GREATEREQUAL
32585: AND
32586: ST_TO_ADDR
// end ;
32587: LD_VAR 0 3
32591: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
32592: LD_INT 0
32594: PPUSH
32595: PPUSH
32596: PPUSH
32597: PPUSH
32598: PPUSH
32599: PPUSH
32600: PPUSH
32601: PPUSH
32602: PPUSH
32603: PPUSH
32604: PPUSH
// result := false ;
32605: LD_ADDR_VAR 0 8
32609: PUSH
32610: LD_INT 0
32612: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
32613: LD_VAR 0 5
32617: NOT
32618: PUSH
32619: LD_VAR 0 1
32623: NOT
32624: OR
32625: PUSH
32626: LD_VAR 0 2
32630: NOT
32631: OR
32632: PUSH
32633: LD_VAR 0 3
32637: NOT
32638: OR
32639: IFFALSE 32643
// exit ;
32641: GO 33457
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
32643: LD_ADDR_VAR 0 14
32647: PUSH
32648: LD_VAR 0 1
32652: PPUSH
32653: LD_VAR 0 2
32657: PPUSH
32658: LD_VAR 0 3
32662: PPUSH
32663: LD_VAR 0 4
32667: PPUSH
32668: LD_VAR 0 5
32672: PUSH
32673: LD_INT 1
32675: ARRAY
32676: PPUSH
32677: CALL_OW 248
32681: PPUSH
32682: LD_INT 0
32684: PPUSH
32685: CALL 34694 0 6
32689: ST_TO_ADDR
// if not hexes then
32690: LD_VAR 0 14
32694: NOT
32695: IFFALSE 32699
// exit ;
32697: GO 33457
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32699: LD_ADDR_VAR 0 17
32703: PUSH
32704: LD_VAR 0 5
32708: PPUSH
32709: LD_INT 22
32711: PUSH
32712: LD_VAR 0 13
32716: PPUSH
32717: CALL_OW 255
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 2
32728: PUSH
32729: LD_INT 30
32731: PUSH
32732: LD_INT 0
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 30
32741: PUSH
32742: LD_INT 1
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: LIST
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PPUSH
32758: CALL_OW 72
32762: ST_TO_ADDR
// for i = 1 to hexes do
32763: LD_ADDR_VAR 0 9
32767: PUSH
32768: DOUBLE
32769: LD_INT 1
32771: DEC
32772: ST_TO_ADDR
32773: LD_VAR 0 14
32777: PUSH
32778: FOR_TO
32779: IFFALSE 33455
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32781: LD_ADDR_VAR 0 13
32785: PUSH
32786: LD_VAR 0 14
32790: PUSH
32791: LD_VAR 0 9
32795: ARRAY
32796: PUSH
32797: LD_INT 1
32799: ARRAY
32800: PPUSH
32801: LD_VAR 0 14
32805: PUSH
32806: LD_VAR 0 9
32810: ARRAY
32811: PUSH
32812: LD_INT 2
32814: ARRAY
32815: PPUSH
32816: CALL_OW 428
32820: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32821: LD_VAR 0 14
32825: PUSH
32826: LD_VAR 0 9
32830: ARRAY
32831: PUSH
32832: LD_INT 1
32834: ARRAY
32835: PPUSH
32836: LD_VAR 0 14
32840: PUSH
32841: LD_VAR 0 9
32845: ARRAY
32846: PUSH
32847: LD_INT 2
32849: ARRAY
32850: PPUSH
32851: CALL_OW 351
32855: PUSH
32856: LD_VAR 0 14
32860: PUSH
32861: LD_VAR 0 9
32865: ARRAY
32866: PUSH
32867: LD_INT 1
32869: ARRAY
32870: PPUSH
32871: LD_VAR 0 14
32875: PUSH
32876: LD_VAR 0 9
32880: ARRAY
32881: PUSH
32882: LD_INT 2
32884: ARRAY
32885: PPUSH
32886: CALL_OW 488
32890: NOT
32891: OR
32892: PUSH
32893: LD_VAR 0 13
32897: PPUSH
32898: CALL_OW 247
32902: PUSH
32903: LD_INT 3
32905: EQUAL
32906: OR
32907: IFFALSE 32913
// exit ;
32909: POP
32910: POP
32911: GO 33457
// if not tmp then
32913: LD_VAR 0 13
32917: NOT
32918: IFFALSE 32922
// continue ;
32920: GO 32778
// result := true ;
32922: LD_ADDR_VAR 0 8
32926: PUSH
32927: LD_INT 1
32929: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
32930: LD_VAR 0 6
32934: PUSH
32935: LD_VAR 0 13
32939: PPUSH
32940: CALL_OW 247
32944: PUSH
32945: LD_INT 2
32947: EQUAL
32948: AND
32949: PUSH
32950: LD_VAR 0 13
32954: PPUSH
32955: CALL_OW 263
32959: PUSH
32960: LD_INT 1
32962: EQUAL
32963: AND
32964: IFFALSE 33128
// begin if IsDrivenBy ( tmp ) then
32966: LD_VAR 0 13
32970: PPUSH
32971: CALL_OW 311
32975: IFFALSE 32979
// continue ;
32977: GO 32778
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
32979: LD_VAR 0 6
32983: PPUSH
32984: LD_INT 3
32986: PUSH
32987: LD_INT 60
32989: PUSH
32990: EMPTY
32991: LIST
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 3
32999: PUSH
33000: LD_INT 55
33002: PUSH
33003: EMPTY
33004: LIST
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PPUSH
33014: CALL_OW 72
33018: IFFALSE 33126
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33020: LD_ADDR_VAR 0 18
33024: PUSH
33025: LD_VAR 0 6
33029: PPUSH
33030: LD_INT 3
33032: PUSH
33033: LD_INT 60
33035: PUSH
33036: EMPTY
33037: LIST
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 3
33045: PUSH
33046: LD_INT 55
33048: PUSH
33049: EMPTY
33050: LIST
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PPUSH
33060: CALL_OW 72
33064: PUSH
33065: LD_INT 1
33067: ARRAY
33068: ST_TO_ADDR
// if IsInUnit ( driver ) then
33069: LD_VAR 0 18
33073: PPUSH
33074: CALL_OW 310
33078: IFFALSE 33089
// ComExit ( driver ) ;
33080: LD_VAR 0 18
33084: PPUSH
33085: CALL 57822 0 1
// AddComEnterUnit ( driver , tmp ) ;
33089: LD_VAR 0 18
33093: PPUSH
33094: LD_VAR 0 13
33098: PPUSH
33099: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33103: LD_VAR 0 18
33107: PPUSH
33108: LD_VAR 0 7
33112: PPUSH
33113: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33117: LD_VAR 0 18
33121: PPUSH
33122: CALL_OW 181
// end ; continue ;
33126: GO 32778
// end ; if not cleaners or not tmp in cleaners then
33128: LD_VAR 0 6
33132: NOT
33133: PUSH
33134: LD_VAR 0 13
33138: PUSH
33139: LD_VAR 0 6
33143: IN
33144: NOT
33145: OR
33146: IFFALSE 33453
// begin if dep then
33148: LD_VAR 0 17
33152: IFFALSE 33288
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33154: LD_ADDR_VAR 0 16
33158: PUSH
33159: LD_VAR 0 17
33163: PUSH
33164: LD_INT 1
33166: ARRAY
33167: PPUSH
33168: CALL_OW 250
33172: PPUSH
33173: LD_VAR 0 17
33177: PUSH
33178: LD_INT 1
33180: ARRAY
33181: PPUSH
33182: CALL_OW 254
33186: PPUSH
33187: LD_INT 5
33189: PPUSH
33190: CALL_OW 272
33194: PUSH
33195: LD_VAR 0 17
33199: PUSH
33200: LD_INT 1
33202: ARRAY
33203: PPUSH
33204: CALL_OW 251
33208: PPUSH
33209: LD_VAR 0 17
33213: PUSH
33214: LD_INT 1
33216: ARRAY
33217: PPUSH
33218: CALL_OW 254
33222: PPUSH
33223: LD_INT 5
33225: PPUSH
33226: CALL_OW 273
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33235: LD_VAR 0 16
33239: PUSH
33240: LD_INT 1
33242: ARRAY
33243: PPUSH
33244: LD_VAR 0 16
33248: PUSH
33249: LD_INT 2
33251: ARRAY
33252: PPUSH
33253: CALL_OW 488
33257: IFFALSE 33288
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33259: LD_VAR 0 13
33263: PPUSH
33264: LD_VAR 0 16
33268: PUSH
33269: LD_INT 1
33271: ARRAY
33272: PPUSH
33273: LD_VAR 0 16
33277: PUSH
33278: LD_INT 2
33280: ARRAY
33281: PPUSH
33282: CALL_OW 111
// continue ;
33286: GO 32778
// end ; end ; r := GetDir ( tmp ) ;
33288: LD_ADDR_VAR 0 15
33292: PUSH
33293: LD_VAR 0 13
33297: PPUSH
33298: CALL_OW 254
33302: ST_TO_ADDR
// if r = 5 then
33303: LD_VAR 0 15
33307: PUSH
33308: LD_INT 5
33310: EQUAL
33311: IFFALSE 33321
// r := 0 ;
33313: LD_ADDR_VAR 0 15
33317: PUSH
33318: LD_INT 0
33320: ST_TO_ADDR
// for j = r to 5 do
33321: LD_ADDR_VAR 0 10
33325: PUSH
33326: DOUBLE
33327: LD_VAR 0 15
33331: DEC
33332: ST_TO_ADDR
33333: LD_INT 5
33335: PUSH
33336: FOR_TO
33337: IFFALSE 33451
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33339: LD_ADDR_VAR 0 11
33343: PUSH
33344: LD_VAR 0 13
33348: PPUSH
33349: CALL_OW 250
33353: PPUSH
33354: LD_VAR 0 10
33358: PPUSH
33359: LD_INT 2
33361: PPUSH
33362: CALL_OW 272
33366: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33367: LD_ADDR_VAR 0 12
33371: PUSH
33372: LD_VAR 0 13
33376: PPUSH
33377: CALL_OW 251
33381: PPUSH
33382: LD_VAR 0 10
33386: PPUSH
33387: LD_INT 2
33389: PPUSH
33390: CALL_OW 273
33394: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33395: LD_VAR 0 11
33399: PPUSH
33400: LD_VAR 0 12
33404: PPUSH
33405: CALL_OW 488
33409: PUSH
33410: LD_VAR 0 11
33414: PPUSH
33415: LD_VAR 0 12
33419: PPUSH
33420: CALL_OW 428
33424: NOT
33425: AND
33426: IFFALSE 33449
// begin ComMoveXY ( tmp , _x , _y ) ;
33428: LD_VAR 0 13
33432: PPUSH
33433: LD_VAR 0 11
33437: PPUSH
33438: LD_VAR 0 12
33442: PPUSH
33443: CALL_OW 111
// break ;
33447: GO 33451
// end ; end ;
33449: GO 33336
33451: POP
33452: POP
// end ; end ;
33453: GO 32778
33455: POP
33456: POP
// end ;
33457: LD_VAR 0 8
33461: RET
// export function BuildingTechInvented ( side , btype ) ; begin
33462: LD_INT 0
33464: PPUSH
// result := true ;
33465: LD_ADDR_VAR 0 3
33469: PUSH
33470: LD_INT 1
33472: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
33473: LD_VAR 0 2
33477: PUSH
33478: LD_INT 24
33480: DOUBLE
33481: EQUAL
33482: IFTRUE 33492
33484: LD_INT 33
33486: DOUBLE
33487: EQUAL
33488: IFTRUE 33492
33490: GO 33517
33492: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
33493: LD_ADDR_VAR 0 3
33497: PUSH
33498: LD_INT 32
33500: PPUSH
33501: LD_VAR 0 1
33505: PPUSH
33506: CALL_OW 321
33510: PUSH
33511: LD_INT 2
33513: EQUAL
33514: ST_TO_ADDR
33515: GO 33837
33517: LD_INT 20
33519: DOUBLE
33520: EQUAL
33521: IFTRUE 33525
33523: GO 33550
33525: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
33526: LD_ADDR_VAR 0 3
33530: PUSH
33531: LD_INT 6
33533: PPUSH
33534: LD_VAR 0 1
33538: PPUSH
33539: CALL_OW 321
33543: PUSH
33544: LD_INT 2
33546: EQUAL
33547: ST_TO_ADDR
33548: GO 33837
33550: LD_INT 22
33552: DOUBLE
33553: EQUAL
33554: IFTRUE 33564
33556: LD_INT 36
33558: DOUBLE
33559: EQUAL
33560: IFTRUE 33564
33562: GO 33589
33564: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
33565: LD_ADDR_VAR 0 3
33569: PUSH
33570: LD_INT 15
33572: PPUSH
33573: LD_VAR 0 1
33577: PPUSH
33578: CALL_OW 321
33582: PUSH
33583: LD_INT 2
33585: EQUAL
33586: ST_TO_ADDR
33587: GO 33837
33589: LD_INT 30
33591: DOUBLE
33592: EQUAL
33593: IFTRUE 33597
33595: GO 33622
33597: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
33598: LD_ADDR_VAR 0 3
33602: PUSH
33603: LD_INT 20
33605: PPUSH
33606: LD_VAR 0 1
33610: PPUSH
33611: CALL_OW 321
33615: PUSH
33616: LD_INT 2
33618: EQUAL
33619: ST_TO_ADDR
33620: GO 33837
33622: LD_INT 28
33624: DOUBLE
33625: EQUAL
33626: IFTRUE 33636
33628: LD_INT 21
33630: DOUBLE
33631: EQUAL
33632: IFTRUE 33636
33634: GO 33661
33636: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
33637: LD_ADDR_VAR 0 3
33641: PUSH
33642: LD_INT 21
33644: PPUSH
33645: LD_VAR 0 1
33649: PPUSH
33650: CALL_OW 321
33654: PUSH
33655: LD_INT 2
33657: EQUAL
33658: ST_TO_ADDR
33659: GO 33837
33661: LD_INT 16
33663: DOUBLE
33664: EQUAL
33665: IFTRUE 33669
33667: GO 33696
33669: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
33670: LD_ADDR_VAR 0 3
33674: PUSH
33675: LD_EXP 83
33679: PPUSH
33680: LD_VAR 0 1
33684: PPUSH
33685: CALL_OW 321
33689: PUSH
33690: LD_INT 2
33692: EQUAL
33693: ST_TO_ADDR
33694: GO 33837
33696: LD_INT 19
33698: DOUBLE
33699: EQUAL
33700: IFTRUE 33710
33702: LD_INT 23
33704: DOUBLE
33705: EQUAL
33706: IFTRUE 33710
33708: GO 33737
33710: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
33711: LD_ADDR_VAR 0 3
33715: PUSH
33716: LD_EXP 82
33720: PPUSH
33721: LD_VAR 0 1
33725: PPUSH
33726: CALL_OW 321
33730: PUSH
33731: LD_INT 2
33733: EQUAL
33734: ST_TO_ADDR
33735: GO 33837
33737: LD_INT 17
33739: DOUBLE
33740: EQUAL
33741: IFTRUE 33745
33743: GO 33770
33745: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
33746: LD_ADDR_VAR 0 3
33750: PUSH
33751: LD_INT 39
33753: PPUSH
33754: LD_VAR 0 1
33758: PPUSH
33759: CALL_OW 321
33763: PUSH
33764: LD_INT 2
33766: EQUAL
33767: ST_TO_ADDR
33768: GO 33837
33770: LD_INT 18
33772: DOUBLE
33773: EQUAL
33774: IFTRUE 33778
33776: GO 33803
33778: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
33779: LD_ADDR_VAR 0 3
33783: PUSH
33784: LD_INT 40
33786: PPUSH
33787: LD_VAR 0 1
33791: PPUSH
33792: CALL_OW 321
33796: PUSH
33797: LD_INT 2
33799: EQUAL
33800: ST_TO_ADDR
33801: GO 33837
33803: LD_INT 27
33805: DOUBLE
33806: EQUAL
33807: IFTRUE 33811
33809: GO 33836
33811: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
33812: LD_ADDR_VAR 0 3
33816: PUSH
33817: LD_INT 35
33819: PPUSH
33820: LD_VAR 0 1
33824: PPUSH
33825: CALL_OW 321
33829: PUSH
33830: LD_INT 2
33832: EQUAL
33833: ST_TO_ADDR
33834: GO 33837
33836: POP
// end ;
33837: LD_VAR 0 3
33841: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
33842: LD_INT 0
33844: PPUSH
33845: PPUSH
33846: PPUSH
33847: PPUSH
33848: PPUSH
33849: PPUSH
33850: PPUSH
33851: PPUSH
33852: PPUSH
33853: PPUSH
33854: PPUSH
// result := false ;
33855: LD_ADDR_VAR 0 6
33859: PUSH
33860: LD_INT 0
33862: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33863: LD_VAR 0 1
33867: NOT
33868: PUSH
33869: LD_VAR 0 1
33873: PPUSH
33874: CALL_OW 266
33878: PUSH
33879: LD_INT 0
33881: PUSH
33882: LD_INT 1
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: IN
33889: NOT
33890: OR
33891: PUSH
33892: LD_VAR 0 2
33896: NOT
33897: OR
33898: PUSH
33899: LD_VAR 0 5
33903: PUSH
33904: LD_INT 0
33906: PUSH
33907: LD_INT 1
33909: PUSH
33910: LD_INT 2
33912: PUSH
33913: LD_INT 3
33915: PUSH
33916: LD_INT 4
33918: PUSH
33919: LD_INT 5
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: IN
33930: NOT
33931: OR
33932: PUSH
33933: LD_VAR 0 3
33937: PPUSH
33938: LD_VAR 0 4
33942: PPUSH
33943: CALL_OW 488
33947: NOT
33948: OR
33949: IFFALSE 33953
// exit ;
33951: GO 34689
// side := GetSide ( depot ) ;
33953: LD_ADDR_VAR 0 9
33957: PUSH
33958: LD_VAR 0 1
33962: PPUSH
33963: CALL_OW 255
33967: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
33968: LD_VAR 0 9
33972: PPUSH
33973: LD_VAR 0 2
33977: PPUSH
33978: CALL 33462 0 2
33982: NOT
33983: IFFALSE 33987
// exit ;
33985: GO 34689
// pom := GetBase ( depot ) ;
33987: LD_ADDR_VAR 0 10
33991: PUSH
33992: LD_VAR 0 1
33996: PPUSH
33997: CALL_OW 274
34001: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34002: LD_ADDR_VAR 0 11
34006: PUSH
34007: LD_VAR 0 2
34011: PPUSH
34012: LD_VAR 0 1
34016: PPUSH
34017: CALL_OW 248
34021: PPUSH
34022: CALL_OW 450
34026: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34027: LD_VAR 0 10
34031: PPUSH
34032: LD_INT 1
34034: PPUSH
34035: CALL_OW 275
34039: PUSH
34040: LD_VAR 0 11
34044: PUSH
34045: LD_INT 1
34047: ARRAY
34048: GREATEREQUAL
34049: PUSH
34050: LD_VAR 0 10
34054: PPUSH
34055: LD_INT 2
34057: PPUSH
34058: CALL_OW 275
34062: PUSH
34063: LD_VAR 0 11
34067: PUSH
34068: LD_INT 2
34070: ARRAY
34071: GREATEREQUAL
34072: AND
34073: PUSH
34074: LD_VAR 0 10
34078: PPUSH
34079: LD_INT 3
34081: PPUSH
34082: CALL_OW 275
34086: PUSH
34087: LD_VAR 0 11
34091: PUSH
34092: LD_INT 3
34094: ARRAY
34095: GREATEREQUAL
34096: AND
34097: NOT
34098: IFFALSE 34102
// exit ;
34100: GO 34689
// if GetBType ( depot ) = b_depot then
34102: LD_VAR 0 1
34106: PPUSH
34107: CALL_OW 266
34111: PUSH
34112: LD_INT 0
34114: EQUAL
34115: IFFALSE 34127
// dist := 28 else
34117: LD_ADDR_VAR 0 14
34121: PUSH
34122: LD_INT 28
34124: ST_TO_ADDR
34125: GO 34135
// dist := 36 ;
34127: LD_ADDR_VAR 0 14
34131: PUSH
34132: LD_INT 36
34134: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34135: LD_VAR 0 1
34139: PPUSH
34140: LD_VAR 0 3
34144: PPUSH
34145: LD_VAR 0 4
34149: PPUSH
34150: CALL_OW 297
34154: PUSH
34155: LD_VAR 0 14
34159: GREATER
34160: IFFALSE 34164
// exit ;
34162: GO 34689
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34164: LD_ADDR_VAR 0 12
34168: PUSH
34169: LD_VAR 0 2
34173: PPUSH
34174: LD_VAR 0 3
34178: PPUSH
34179: LD_VAR 0 4
34183: PPUSH
34184: LD_VAR 0 5
34188: PPUSH
34189: LD_VAR 0 1
34193: PPUSH
34194: CALL_OW 248
34198: PPUSH
34199: LD_INT 0
34201: PPUSH
34202: CALL 34694 0 6
34206: ST_TO_ADDR
// if not hexes then
34207: LD_VAR 0 12
34211: NOT
34212: IFFALSE 34216
// exit ;
34214: GO 34689
// hex := GetHexInfo ( x , y ) ;
34216: LD_ADDR_VAR 0 15
34220: PUSH
34221: LD_VAR 0 3
34225: PPUSH
34226: LD_VAR 0 4
34230: PPUSH
34231: CALL_OW 546
34235: ST_TO_ADDR
// if hex [ 1 ] then
34236: LD_VAR 0 15
34240: PUSH
34241: LD_INT 1
34243: ARRAY
34244: IFFALSE 34248
// exit ;
34246: GO 34689
// height := hex [ 2 ] ;
34248: LD_ADDR_VAR 0 13
34252: PUSH
34253: LD_VAR 0 15
34257: PUSH
34258: LD_INT 2
34260: ARRAY
34261: ST_TO_ADDR
// for i = 1 to hexes do
34262: LD_ADDR_VAR 0 7
34266: PUSH
34267: DOUBLE
34268: LD_INT 1
34270: DEC
34271: ST_TO_ADDR
34272: LD_VAR 0 12
34276: PUSH
34277: FOR_TO
34278: IFFALSE 34608
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34280: LD_VAR 0 12
34284: PUSH
34285: LD_VAR 0 7
34289: ARRAY
34290: PUSH
34291: LD_INT 1
34293: ARRAY
34294: PPUSH
34295: LD_VAR 0 12
34299: PUSH
34300: LD_VAR 0 7
34304: ARRAY
34305: PUSH
34306: LD_INT 2
34308: ARRAY
34309: PPUSH
34310: CALL_OW 488
34314: NOT
34315: PUSH
34316: LD_VAR 0 12
34320: PUSH
34321: LD_VAR 0 7
34325: ARRAY
34326: PUSH
34327: LD_INT 1
34329: ARRAY
34330: PPUSH
34331: LD_VAR 0 12
34335: PUSH
34336: LD_VAR 0 7
34340: ARRAY
34341: PUSH
34342: LD_INT 2
34344: ARRAY
34345: PPUSH
34346: CALL_OW 428
34350: PUSH
34351: LD_INT 0
34353: GREATER
34354: OR
34355: PUSH
34356: LD_VAR 0 12
34360: PUSH
34361: LD_VAR 0 7
34365: ARRAY
34366: PUSH
34367: LD_INT 1
34369: ARRAY
34370: PPUSH
34371: LD_VAR 0 12
34375: PUSH
34376: LD_VAR 0 7
34380: ARRAY
34381: PUSH
34382: LD_INT 2
34384: ARRAY
34385: PPUSH
34386: CALL_OW 351
34390: OR
34391: IFFALSE 34397
// exit ;
34393: POP
34394: POP
34395: GO 34689
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34397: LD_ADDR_VAR 0 8
34401: PUSH
34402: LD_VAR 0 12
34406: PUSH
34407: LD_VAR 0 7
34411: ARRAY
34412: PUSH
34413: LD_INT 1
34415: ARRAY
34416: PPUSH
34417: LD_VAR 0 12
34421: PUSH
34422: LD_VAR 0 7
34426: ARRAY
34427: PUSH
34428: LD_INT 2
34430: ARRAY
34431: PPUSH
34432: CALL_OW 546
34436: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34437: LD_VAR 0 8
34441: PUSH
34442: LD_INT 1
34444: ARRAY
34445: PUSH
34446: LD_VAR 0 8
34450: PUSH
34451: LD_INT 2
34453: ARRAY
34454: PUSH
34455: LD_VAR 0 13
34459: PUSH
34460: LD_INT 2
34462: PLUS
34463: GREATER
34464: OR
34465: PUSH
34466: LD_VAR 0 8
34470: PUSH
34471: LD_INT 2
34473: ARRAY
34474: PUSH
34475: LD_VAR 0 13
34479: PUSH
34480: LD_INT 2
34482: MINUS
34483: LESS
34484: OR
34485: PUSH
34486: LD_VAR 0 8
34490: PUSH
34491: LD_INT 3
34493: ARRAY
34494: PUSH
34495: LD_INT 0
34497: PUSH
34498: LD_INT 8
34500: PUSH
34501: LD_INT 9
34503: PUSH
34504: LD_INT 10
34506: PUSH
34507: LD_INT 11
34509: PUSH
34510: LD_INT 12
34512: PUSH
34513: LD_INT 13
34515: PUSH
34516: LD_INT 16
34518: PUSH
34519: LD_INT 17
34521: PUSH
34522: LD_INT 18
34524: PUSH
34525: LD_INT 19
34527: PUSH
34528: LD_INT 20
34530: PUSH
34531: LD_INT 21
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: IN
34549: NOT
34550: OR
34551: PUSH
34552: LD_VAR 0 8
34556: PUSH
34557: LD_INT 5
34559: ARRAY
34560: NOT
34561: OR
34562: PUSH
34563: LD_VAR 0 8
34567: PUSH
34568: LD_INT 6
34570: ARRAY
34571: PUSH
34572: LD_INT 1
34574: PUSH
34575: LD_INT 2
34577: PUSH
34578: LD_INT 7
34580: PUSH
34581: LD_INT 9
34583: PUSH
34584: LD_INT 10
34586: PUSH
34587: LD_INT 11
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: IN
34598: NOT
34599: OR
34600: IFFALSE 34606
// exit ;
34602: POP
34603: POP
34604: GO 34689
// end ;
34606: GO 34277
34608: POP
34609: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34610: LD_VAR 0 9
34614: PPUSH
34615: LD_VAR 0 3
34619: PPUSH
34620: LD_VAR 0 4
34624: PPUSH
34625: LD_INT 20
34627: PPUSH
34628: CALL 26635 0 4
34632: PUSH
34633: LD_INT 4
34635: ARRAY
34636: IFFALSE 34640
// exit ;
34638: GO 34689
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34640: LD_VAR 0 2
34644: PUSH
34645: LD_INT 29
34647: PUSH
34648: LD_INT 30
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: IN
34655: PUSH
34656: LD_VAR 0 3
34660: PPUSH
34661: LD_VAR 0 4
34665: PPUSH
34666: LD_VAR 0 9
34670: PPUSH
34671: CALL_OW 440
34675: NOT
34676: AND
34677: IFFALSE 34681
// exit ;
34679: GO 34689
// result := true ;
34681: LD_ADDR_VAR 0 6
34685: PUSH
34686: LD_INT 1
34688: ST_TO_ADDR
// end ;
34689: LD_VAR 0 6
34693: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34694: LD_INT 0
34696: PPUSH
34697: PPUSH
34698: PPUSH
34699: PPUSH
34700: PPUSH
34701: PPUSH
34702: PPUSH
34703: PPUSH
34704: PPUSH
34705: PPUSH
34706: PPUSH
34707: PPUSH
34708: PPUSH
34709: PPUSH
34710: PPUSH
34711: PPUSH
34712: PPUSH
34713: PPUSH
34714: PPUSH
34715: PPUSH
34716: PPUSH
34717: PPUSH
34718: PPUSH
34719: PPUSH
34720: PPUSH
34721: PPUSH
34722: PPUSH
34723: PPUSH
34724: PPUSH
34725: PPUSH
34726: PPUSH
34727: PPUSH
34728: PPUSH
34729: PPUSH
34730: PPUSH
34731: PPUSH
34732: PPUSH
34733: PPUSH
34734: PPUSH
34735: PPUSH
34736: PPUSH
34737: PPUSH
34738: PPUSH
34739: PPUSH
34740: PPUSH
34741: PPUSH
34742: PPUSH
34743: PPUSH
34744: PPUSH
34745: PPUSH
34746: PPUSH
34747: PPUSH
34748: PPUSH
34749: PPUSH
34750: PPUSH
34751: PPUSH
34752: PPUSH
34753: PPUSH
// result = [ ] ;
34754: LD_ADDR_VAR 0 7
34758: PUSH
34759: EMPTY
34760: ST_TO_ADDR
// temp_list = [ ] ;
34761: LD_ADDR_VAR 0 9
34765: PUSH
34766: EMPTY
34767: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34768: LD_VAR 0 4
34772: PUSH
34773: LD_INT 0
34775: PUSH
34776: LD_INT 1
34778: PUSH
34779: LD_INT 2
34781: PUSH
34782: LD_INT 3
34784: PUSH
34785: LD_INT 4
34787: PUSH
34788: LD_INT 5
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: IN
34799: NOT
34800: PUSH
34801: LD_VAR 0 1
34805: PUSH
34806: LD_INT 0
34808: PUSH
34809: LD_INT 1
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: IN
34816: PUSH
34817: LD_VAR 0 5
34821: PUSH
34822: LD_INT 1
34824: PUSH
34825: LD_INT 2
34827: PUSH
34828: LD_INT 3
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: LIST
34835: IN
34836: NOT
34837: AND
34838: OR
34839: IFFALSE 34843
// exit ;
34841: GO 53234
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34843: LD_VAR 0 1
34847: PUSH
34848: LD_INT 6
34850: PUSH
34851: LD_INT 7
34853: PUSH
34854: LD_INT 8
34856: PUSH
34857: LD_INT 13
34859: PUSH
34860: LD_INT 12
34862: PUSH
34863: LD_INT 15
34865: PUSH
34866: LD_INT 11
34868: PUSH
34869: LD_INT 14
34871: PUSH
34872: LD_INT 10
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: IN
34886: IFFALSE 34896
// btype = b_lab ;
34888: LD_ADDR_VAR 0 1
34892: PUSH
34893: LD_INT 6
34895: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34896: LD_VAR 0 6
34900: PUSH
34901: LD_INT 0
34903: PUSH
34904: LD_INT 1
34906: PUSH
34907: LD_INT 2
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: LIST
34914: IN
34915: NOT
34916: PUSH
34917: LD_VAR 0 1
34921: PUSH
34922: LD_INT 0
34924: PUSH
34925: LD_INT 1
34927: PUSH
34928: LD_INT 2
34930: PUSH
34931: LD_INT 3
34933: PUSH
34934: LD_INT 6
34936: PUSH
34937: LD_INT 36
34939: PUSH
34940: LD_INT 4
34942: PUSH
34943: LD_INT 5
34945: PUSH
34946: LD_INT 31
34948: PUSH
34949: LD_INT 32
34951: PUSH
34952: LD_INT 33
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: IN
34968: NOT
34969: PUSH
34970: LD_VAR 0 6
34974: PUSH
34975: LD_INT 1
34977: EQUAL
34978: AND
34979: OR
34980: PUSH
34981: LD_VAR 0 1
34985: PUSH
34986: LD_INT 2
34988: PUSH
34989: LD_INT 3
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: IN
34996: NOT
34997: PUSH
34998: LD_VAR 0 6
35002: PUSH
35003: LD_INT 2
35005: EQUAL
35006: AND
35007: OR
35008: IFFALSE 35018
// mode = 0 ;
35010: LD_ADDR_VAR 0 6
35014: PUSH
35015: LD_INT 0
35017: ST_TO_ADDR
// case mode of 0 :
35018: LD_VAR 0 6
35022: PUSH
35023: LD_INT 0
35025: DOUBLE
35026: EQUAL
35027: IFTRUE 35031
35029: GO 46484
35031: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35032: LD_ADDR_VAR 0 11
35036: PUSH
35037: LD_INT 0
35039: PUSH
35040: LD_INT 0
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: LD_INT 0
35049: PUSH
35050: LD_INT 1
35052: NEG
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 1
35060: PUSH
35061: LD_INT 0
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 1
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 0
35080: PUSH
35081: LD_INT 1
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 1
35090: NEG
35091: PUSH
35092: LD_INT 0
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 1
35101: NEG
35102: PUSH
35103: LD_INT 1
35105: NEG
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 1
35113: NEG
35114: PUSH
35115: LD_INT 2
35117: NEG
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 0
35125: PUSH
35126: LD_INT 2
35128: NEG
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 1
35136: PUSH
35137: LD_INT 1
35139: NEG
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 1
35147: PUSH
35148: LD_INT 2
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 0
35157: PUSH
35158: LD_INT 2
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 1
35167: NEG
35168: PUSH
35169: LD_INT 1
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 1
35178: PUSH
35179: LD_INT 3
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 0
35188: PUSH
35189: LD_INT 3
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 1
35198: NEG
35199: PUSH
35200: LD_INT 2
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35225: LD_ADDR_VAR 0 12
35229: PUSH
35230: LD_INT 0
35232: PUSH
35233: LD_INT 0
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 0
35242: PUSH
35243: LD_INT 1
35245: NEG
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 1
35253: PUSH
35254: LD_INT 0
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 1
35263: PUSH
35264: LD_INT 1
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 0
35273: PUSH
35274: LD_INT 1
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 1
35283: NEG
35284: PUSH
35285: LD_INT 0
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 1
35294: NEG
35295: PUSH
35296: LD_INT 1
35298: NEG
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 1
35306: PUSH
35307: LD_INT 1
35309: NEG
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 2
35317: PUSH
35318: LD_INT 0
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 2
35327: PUSH
35328: LD_INT 1
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 1
35337: NEG
35338: PUSH
35339: LD_INT 1
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: LD_INT 2
35348: NEG
35349: PUSH
35350: LD_INT 0
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 2
35359: NEG
35360: PUSH
35361: LD_INT 1
35363: NEG
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 2
35371: NEG
35372: PUSH
35373: LD_INT 1
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 3
35382: NEG
35383: PUSH
35384: LD_INT 0
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 3
35393: NEG
35394: PUSH
35395: LD_INT 1
35397: NEG
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35421: LD_ADDR_VAR 0 13
35425: PUSH
35426: LD_INT 0
35428: PUSH
35429: LD_INT 0
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 0
35438: PUSH
35439: LD_INT 1
35441: NEG
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 1
35449: PUSH
35450: LD_INT 0
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 1
35459: PUSH
35460: LD_INT 1
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 0
35469: PUSH
35470: LD_INT 1
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 1
35479: NEG
35480: PUSH
35481: LD_INT 0
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 1
35490: NEG
35491: PUSH
35492: LD_INT 1
35494: NEG
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 1
35502: NEG
35503: PUSH
35504: LD_INT 2
35506: NEG
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 2
35514: PUSH
35515: LD_INT 1
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 2
35524: PUSH
35525: LD_INT 2
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 1
35534: PUSH
35535: LD_INT 2
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 2
35544: NEG
35545: PUSH
35546: LD_INT 1
35548: NEG
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 2
35556: NEG
35557: PUSH
35558: LD_INT 2
35560: NEG
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 2
35568: NEG
35569: PUSH
35570: LD_INT 3
35572: NEG
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 3
35580: NEG
35581: PUSH
35582: LD_INT 2
35584: NEG
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 3
35592: NEG
35593: PUSH
35594: LD_INT 3
35596: NEG
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35620: LD_ADDR_VAR 0 14
35624: PUSH
35625: LD_INT 0
35627: PUSH
35628: LD_INT 0
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 0
35637: PUSH
35638: LD_INT 1
35640: NEG
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 1
35648: PUSH
35649: LD_INT 0
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 1
35658: PUSH
35659: LD_INT 1
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 0
35668: PUSH
35669: LD_INT 1
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 1
35678: NEG
35679: PUSH
35680: LD_INT 0
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 1
35689: NEG
35690: PUSH
35691: LD_INT 1
35693: NEG
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 1
35701: NEG
35702: PUSH
35703: LD_INT 2
35705: NEG
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 0
35713: PUSH
35714: LD_INT 2
35716: NEG
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 1
35724: PUSH
35725: LD_INT 1
35727: NEG
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 1
35735: PUSH
35736: LD_INT 2
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 0
35745: PUSH
35746: LD_INT 2
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 1
35755: NEG
35756: PUSH
35757: LD_INT 1
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 1
35766: NEG
35767: PUSH
35768: LD_INT 3
35770: NEG
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 0
35778: PUSH
35779: LD_INT 3
35781: NEG
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 1
35789: PUSH
35790: LD_INT 2
35792: NEG
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35816: LD_ADDR_VAR 0 15
35820: PUSH
35821: LD_INT 0
35823: PUSH
35824: LD_INT 0
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 0
35833: PUSH
35834: LD_INT 1
35836: NEG
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 1
35844: PUSH
35845: LD_INT 0
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 1
35854: PUSH
35855: LD_INT 1
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 0
35864: PUSH
35865: LD_INT 1
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 1
35874: NEG
35875: PUSH
35876: LD_INT 0
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 1
35885: NEG
35886: PUSH
35887: LD_INT 1
35889: NEG
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 1
35897: PUSH
35898: LD_INT 1
35900: NEG
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 2
35908: PUSH
35909: LD_INT 0
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 2
35918: PUSH
35919: LD_INT 1
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 1
35928: NEG
35929: PUSH
35930: LD_INT 1
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 2
35939: NEG
35940: PUSH
35941: LD_INT 0
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 2
35950: NEG
35951: PUSH
35952: LD_INT 1
35954: NEG
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 2
35962: PUSH
35963: LD_INT 1
35965: NEG
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 3
35973: PUSH
35974: LD_INT 0
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 3
35983: PUSH
35984: LD_INT 1
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36009: LD_ADDR_VAR 0 16
36013: PUSH
36014: LD_INT 0
36016: PUSH
36017: LD_INT 0
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 0
36026: PUSH
36027: LD_INT 1
36029: NEG
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 1
36037: PUSH
36038: LD_INT 0
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 1
36047: PUSH
36048: LD_INT 1
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 0
36057: PUSH
36058: LD_INT 1
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 1
36067: NEG
36068: PUSH
36069: LD_INT 0
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 1
36078: NEG
36079: PUSH
36080: LD_INT 1
36082: NEG
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PUSH
36088: LD_INT 1
36090: NEG
36091: PUSH
36092: LD_INT 2
36094: NEG
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 2
36102: PUSH
36103: LD_INT 1
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 2
36112: PUSH
36113: LD_INT 2
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 1
36122: PUSH
36123: LD_INT 2
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 2
36132: NEG
36133: PUSH
36134: LD_INT 1
36136: NEG
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 2
36144: NEG
36145: PUSH
36146: LD_INT 2
36148: NEG
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 3
36156: PUSH
36157: LD_INT 2
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 3
36166: PUSH
36167: LD_INT 3
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 2
36176: PUSH
36177: LD_INT 3
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36202: LD_ADDR_VAR 0 17
36206: PUSH
36207: LD_INT 0
36209: PUSH
36210: LD_INT 0
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 0
36219: PUSH
36220: LD_INT 1
36222: NEG
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 1
36230: PUSH
36231: LD_INT 0
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 1
36240: PUSH
36241: LD_INT 1
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 0
36250: PUSH
36251: LD_INT 1
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 1
36260: NEG
36261: PUSH
36262: LD_INT 0
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 1
36271: NEG
36272: PUSH
36273: LD_INT 1
36275: NEG
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 1
36283: NEG
36284: PUSH
36285: LD_INT 2
36287: NEG
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 0
36295: PUSH
36296: LD_INT 2
36298: NEG
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 1
36306: PUSH
36307: LD_INT 1
36309: NEG
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 2
36317: PUSH
36318: LD_INT 0
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 2
36327: PUSH
36328: LD_INT 1
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 2
36337: PUSH
36338: LD_INT 2
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 1
36347: PUSH
36348: LD_INT 2
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: LD_INT 2
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 1
36367: NEG
36368: PUSH
36369: LD_INT 1
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 2
36378: NEG
36379: PUSH
36380: LD_INT 0
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 2
36389: NEG
36390: PUSH
36391: LD_INT 1
36393: NEG
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 2
36401: NEG
36402: PUSH
36403: LD_INT 2
36405: NEG
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36432: LD_ADDR_VAR 0 18
36436: PUSH
36437: LD_INT 0
36439: PUSH
36440: LD_INT 0
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 0
36449: PUSH
36450: LD_INT 1
36452: NEG
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 1
36460: PUSH
36461: LD_INT 0
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 1
36470: PUSH
36471: LD_INT 1
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 0
36480: PUSH
36481: LD_INT 1
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: LD_INT 1
36490: NEG
36491: PUSH
36492: LD_INT 0
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 1
36501: NEG
36502: PUSH
36503: LD_INT 1
36505: NEG
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 1
36513: NEG
36514: PUSH
36515: LD_INT 2
36517: NEG
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 0
36525: PUSH
36526: LD_INT 2
36528: NEG
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PUSH
36534: LD_INT 1
36536: PUSH
36537: LD_INT 1
36539: NEG
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 2
36547: PUSH
36548: LD_INT 0
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 2
36557: PUSH
36558: LD_INT 1
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 2
36567: PUSH
36568: LD_INT 2
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 1
36577: PUSH
36578: LD_INT 2
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 0
36587: PUSH
36588: LD_INT 2
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 1
36597: NEG
36598: PUSH
36599: LD_INT 1
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 2
36608: NEG
36609: PUSH
36610: LD_INT 0
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 2
36619: NEG
36620: PUSH
36621: LD_INT 1
36623: NEG
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 2
36631: NEG
36632: PUSH
36633: LD_INT 2
36635: NEG
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36662: LD_ADDR_VAR 0 19
36666: PUSH
36667: LD_INT 0
36669: PUSH
36670: LD_INT 0
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 0
36679: PUSH
36680: LD_INT 1
36682: NEG
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 1
36690: PUSH
36691: LD_INT 0
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 1
36700: PUSH
36701: LD_INT 1
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: LD_INT 0
36710: PUSH
36711: LD_INT 1
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 1
36720: NEG
36721: PUSH
36722: LD_INT 0
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 1
36731: NEG
36732: PUSH
36733: LD_INT 1
36735: NEG
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 1
36743: NEG
36744: PUSH
36745: LD_INT 2
36747: NEG
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 0
36755: PUSH
36756: LD_INT 2
36758: NEG
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PUSH
36764: LD_INT 1
36766: PUSH
36767: LD_INT 1
36769: NEG
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 2
36777: PUSH
36778: LD_INT 0
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 2
36787: PUSH
36788: LD_INT 1
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 2
36797: PUSH
36798: LD_INT 2
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 1
36807: PUSH
36808: LD_INT 2
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 0
36817: PUSH
36818: LD_INT 2
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 1
36827: NEG
36828: PUSH
36829: LD_INT 1
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 2
36838: NEG
36839: PUSH
36840: LD_INT 0
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 2
36849: NEG
36850: PUSH
36851: LD_INT 1
36853: NEG
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 2
36861: NEG
36862: PUSH
36863: LD_INT 2
36865: NEG
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36892: LD_ADDR_VAR 0 20
36896: PUSH
36897: LD_INT 0
36899: PUSH
36900: LD_INT 0
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 0
36909: PUSH
36910: LD_INT 1
36912: NEG
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 1
36920: PUSH
36921: LD_INT 0
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 1
36930: PUSH
36931: LD_INT 1
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 0
36940: PUSH
36941: LD_INT 1
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 1
36950: NEG
36951: PUSH
36952: LD_INT 0
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 1
36961: NEG
36962: PUSH
36963: LD_INT 1
36965: NEG
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 1
36973: NEG
36974: PUSH
36975: LD_INT 2
36977: NEG
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 0
36985: PUSH
36986: LD_INT 2
36988: NEG
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 1
36996: PUSH
36997: LD_INT 1
36999: NEG
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 2
37007: PUSH
37008: LD_INT 0
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 2
37017: PUSH
37018: LD_INT 1
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 2
37027: PUSH
37028: LD_INT 2
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 1
37037: PUSH
37038: LD_INT 2
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 0
37047: PUSH
37048: LD_INT 2
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 1
37057: NEG
37058: PUSH
37059: LD_INT 1
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 2
37068: NEG
37069: PUSH
37070: LD_INT 0
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 2
37079: NEG
37080: PUSH
37081: LD_INT 1
37083: NEG
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 2
37091: NEG
37092: PUSH
37093: LD_INT 2
37095: NEG
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37122: LD_ADDR_VAR 0 21
37126: PUSH
37127: LD_INT 0
37129: PUSH
37130: LD_INT 0
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 0
37139: PUSH
37140: LD_INT 1
37142: NEG
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 1
37150: PUSH
37151: LD_INT 0
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 1
37160: PUSH
37161: LD_INT 1
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 0
37170: PUSH
37171: LD_INT 1
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 1
37180: NEG
37181: PUSH
37182: LD_INT 0
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 1
37191: NEG
37192: PUSH
37193: LD_INT 1
37195: NEG
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 1
37203: NEG
37204: PUSH
37205: LD_INT 2
37207: NEG
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 0
37215: PUSH
37216: LD_INT 2
37218: NEG
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 1
37226: PUSH
37227: LD_INT 1
37229: NEG
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 2
37237: PUSH
37238: LD_INT 0
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 2
37247: PUSH
37248: LD_INT 1
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 2
37257: PUSH
37258: LD_INT 2
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 1
37267: PUSH
37268: LD_INT 2
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 0
37277: PUSH
37278: LD_INT 2
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 1
37287: NEG
37288: PUSH
37289: LD_INT 1
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: LD_INT 2
37298: NEG
37299: PUSH
37300: LD_INT 0
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 2
37309: NEG
37310: PUSH
37311: LD_INT 1
37313: NEG
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 2
37321: NEG
37322: PUSH
37323: LD_INT 2
37325: NEG
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37352: LD_ADDR_VAR 0 22
37356: PUSH
37357: LD_INT 0
37359: PUSH
37360: LD_INT 0
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 0
37369: PUSH
37370: LD_INT 1
37372: NEG
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 1
37380: PUSH
37381: LD_INT 0
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_INT 1
37390: PUSH
37391: LD_INT 1
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 0
37400: PUSH
37401: LD_INT 1
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 1
37410: NEG
37411: PUSH
37412: LD_INT 0
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 1
37421: NEG
37422: PUSH
37423: LD_INT 1
37425: NEG
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 1
37433: NEG
37434: PUSH
37435: LD_INT 2
37437: NEG
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 0
37445: PUSH
37446: LD_INT 2
37448: NEG
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 1
37456: PUSH
37457: LD_INT 1
37459: NEG
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 2
37467: PUSH
37468: LD_INT 0
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 2
37477: PUSH
37478: LD_INT 1
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 2
37487: PUSH
37488: LD_INT 2
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 1
37497: PUSH
37498: LD_INT 2
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 0
37507: PUSH
37508: LD_INT 2
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 1
37517: NEG
37518: PUSH
37519: LD_INT 1
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 2
37528: NEG
37529: PUSH
37530: LD_INT 0
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 2
37539: NEG
37540: PUSH
37541: LD_INT 1
37543: NEG
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 2
37551: NEG
37552: PUSH
37553: LD_INT 2
37555: NEG
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37582: LD_ADDR_VAR 0 23
37586: PUSH
37587: LD_INT 0
37589: PUSH
37590: LD_INT 0
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 0
37599: PUSH
37600: LD_INT 1
37602: NEG
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 1
37610: PUSH
37611: LD_INT 0
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 1
37620: PUSH
37621: LD_INT 1
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 0
37630: PUSH
37631: LD_INT 1
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 1
37640: NEG
37641: PUSH
37642: LD_INT 0
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 1
37651: NEG
37652: PUSH
37653: LD_INT 1
37655: NEG
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: LD_INT 1
37663: NEG
37664: PUSH
37665: LD_INT 2
37667: NEG
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 0
37675: PUSH
37676: LD_INT 2
37678: NEG
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 1
37686: PUSH
37687: LD_INT 1
37689: NEG
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 2
37697: PUSH
37698: LD_INT 0
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 2
37707: PUSH
37708: LD_INT 1
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 2
37717: PUSH
37718: LD_INT 2
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 1
37727: PUSH
37728: LD_INT 2
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 0
37737: PUSH
37738: LD_INT 2
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 1
37747: NEG
37748: PUSH
37749: LD_INT 1
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 2
37758: NEG
37759: PUSH
37760: LD_INT 0
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 2
37769: NEG
37770: PUSH
37771: LD_INT 1
37773: NEG
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 2
37781: NEG
37782: PUSH
37783: LD_INT 2
37785: NEG
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 2
37793: NEG
37794: PUSH
37795: LD_INT 3
37797: NEG
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 1
37805: NEG
37806: PUSH
37807: LD_INT 3
37809: NEG
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 1
37817: PUSH
37818: LD_INT 2
37820: NEG
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 2
37828: PUSH
37829: LD_INT 1
37831: NEG
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37862: LD_ADDR_VAR 0 24
37866: PUSH
37867: LD_INT 0
37869: PUSH
37870: LD_INT 0
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 0
37879: PUSH
37880: LD_INT 1
37882: NEG
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 1
37890: PUSH
37891: LD_INT 0
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 1
37900: PUSH
37901: LD_INT 1
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 0
37910: PUSH
37911: LD_INT 1
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 1
37920: NEG
37921: PUSH
37922: LD_INT 0
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PUSH
37929: LD_INT 1
37931: NEG
37932: PUSH
37933: LD_INT 1
37935: NEG
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 1
37943: NEG
37944: PUSH
37945: LD_INT 2
37947: NEG
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 0
37955: PUSH
37956: LD_INT 2
37958: NEG
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 1
37966: PUSH
37967: LD_INT 1
37969: NEG
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 2
37977: PUSH
37978: LD_INT 0
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 2
37987: PUSH
37988: LD_INT 1
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 2
37997: PUSH
37998: LD_INT 2
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 1
38007: PUSH
38008: LD_INT 2
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 0
38017: PUSH
38018: LD_INT 2
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 1
38027: NEG
38028: PUSH
38029: LD_INT 1
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 2
38038: NEG
38039: PUSH
38040: LD_INT 0
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 2
38049: NEG
38050: PUSH
38051: LD_INT 1
38053: NEG
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 2
38061: NEG
38062: PUSH
38063: LD_INT 2
38065: NEG
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 1
38073: PUSH
38074: LD_INT 2
38076: NEG
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 2
38084: PUSH
38085: LD_INT 1
38087: NEG
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 3
38095: PUSH
38096: LD_INT 1
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 3
38105: PUSH
38106: LD_INT 2
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38138: LD_ADDR_VAR 0 25
38142: PUSH
38143: LD_INT 0
38145: PUSH
38146: LD_INT 0
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 0
38155: PUSH
38156: LD_INT 1
38158: NEG
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 1
38166: PUSH
38167: LD_INT 0
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 1
38176: PUSH
38177: LD_INT 1
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 0
38186: PUSH
38187: LD_INT 1
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 1
38196: NEG
38197: PUSH
38198: LD_INT 0
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 1
38207: NEG
38208: PUSH
38209: LD_INT 1
38211: NEG
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 1
38219: NEG
38220: PUSH
38221: LD_INT 2
38223: NEG
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 0
38231: PUSH
38232: LD_INT 2
38234: NEG
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 1
38242: PUSH
38243: LD_INT 1
38245: NEG
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 2
38253: PUSH
38254: LD_INT 0
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 2
38263: PUSH
38264: LD_INT 1
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 2
38273: PUSH
38274: LD_INT 2
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 1
38283: PUSH
38284: LD_INT 2
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 0
38293: PUSH
38294: LD_INT 2
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 1
38303: NEG
38304: PUSH
38305: LD_INT 1
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 2
38314: NEG
38315: PUSH
38316: LD_INT 0
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 2
38325: NEG
38326: PUSH
38327: LD_INT 1
38329: NEG
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 2
38337: NEG
38338: PUSH
38339: LD_INT 2
38341: NEG
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 3
38349: PUSH
38350: LD_INT 1
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 3
38359: PUSH
38360: LD_INT 2
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 2
38369: PUSH
38370: LD_INT 3
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 1
38379: PUSH
38380: LD_INT 3
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38412: LD_ADDR_VAR 0 26
38416: PUSH
38417: LD_INT 0
38419: PUSH
38420: LD_INT 0
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 0
38429: PUSH
38430: LD_INT 1
38432: NEG
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 1
38440: PUSH
38441: LD_INT 0
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 1
38450: PUSH
38451: LD_INT 1
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 0
38460: PUSH
38461: LD_INT 1
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 1
38470: NEG
38471: PUSH
38472: LD_INT 0
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 1
38481: NEG
38482: PUSH
38483: LD_INT 1
38485: NEG
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 1
38493: NEG
38494: PUSH
38495: LD_INT 2
38497: NEG
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 0
38505: PUSH
38506: LD_INT 2
38508: NEG
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 1
38516: PUSH
38517: LD_INT 1
38519: NEG
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 2
38527: PUSH
38528: LD_INT 0
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 2
38537: PUSH
38538: LD_INT 1
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 2
38547: PUSH
38548: LD_INT 2
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 1
38557: PUSH
38558: LD_INT 2
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 0
38567: PUSH
38568: LD_INT 2
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 1
38577: NEG
38578: PUSH
38579: LD_INT 1
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 2
38588: NEG
38589: PUSH
38590: LD_INT 0
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 2
38599: NEG
38600: PUSH
38601: LD_INT 1
38603: NEG
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 2
38611: NEG
38612: PUSH
38613: LD_INT 2
38615: NEG
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 2
38623: PUSH
38624: LD_INT 3
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 1
38633: PUSH
38634: LD_INT 3
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 1
38643: NEG
38644: PUSH
38645: LD_INT 2
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 2
38654: NEG
38655: PUSH
38656: LD_INT 1
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38688: LD_ADDR_VAR 0 27
38692: PUSH
38693: LD_INT 0
38695: PUSH
38696: LD_INT 0
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 0
38705: PUSH
38706: LD_INT 1
38708: NEG
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 1
38716: PUSH
38717: LD_INT 0
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 1
38726: PUSH
38727: LD_INT 1
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 0
38736: PUSH
38737: LD_INT 1
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 1
38746: NEG
38747: PUSH
38748: LD_INT 0
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 1
38757: NEG
38758: PUSH
38759: LD_INT 1
38761: NEG
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 1
38769: NEG
38770: PUSH
38771: LD_INT 2
38773: NEG
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 0
38781: PUSH
38782: LD_INT 2
38784: NEG
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 1
38792: PUSH
38793: LD_INT 1
38795: NEG
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 2
38803: PUSH
38804: LD_INT 0
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 2
38813: PUSH
38814: LD_INT 1
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 2
38823: PUSH
38824: LD_INT 2
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 1
38833: PUSH
38834: LD_INT 2
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 0
38843: PUSH
38844: LD_INT 2
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 1
38853: NEG
38854: PUSH
38855: LD_INT 1
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 2
38864: NEG
38865: PUSH
38866: LD_INT 0
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 2
38875: NEG
38876: PUSH
38877: LD_INT 1
38879: NEG
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 2
38887: NEG
38888: PUSH
38889: LD_INT 2
38891: NEG
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 1
38899: NEG
38900: PUSH
38901: LD_INT 2
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 2
38910: NEG
38911: PUSH
38912: LD_INT 1
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 3
38921: NEG
38922: PUSH
38923: LD_INT 1
38925: NEG
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 3
38933: NEG
38934: PUSH
38935: LD_INT 2
38937: NEG
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38968: LD_ADDR_VAR 0 28
38972: PUSH
38973: LD_INT 0
38975: PUSH
38976: LD_INT 0
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 0
38985: PUSH
38986: LD_INT 1
38988: NEG
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 1
38996: PUSH
38997: LD_INT 0
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 1
39006: PUSH
39007: LD_INT 1
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 0
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 1
39026: NEG
39027: PUSH
39028: LD_INT 0
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 1
39037: NEG
39038: PUSH
39039: LD_INT 1
39041: NEG
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 1
39049: NEG
39050: PUSH
39051: LD_INT 2
39053: NEG
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 0
39061: PUSH
39062: LD_INT 2
39064: NEG
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 1
39072: PUSH
39073: LD_INT 1
39075: NEG
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 2
39083: PUSH
39084: LD_INT 0
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 2
39093: PUSH
39094: LD_INT 1
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 2
39103: PUSH
39104: LD_INT 2
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 1
39113: PUSH
39114: LD_INT 2
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: LD_INT 2
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 1
39133: NEG
39134: PUSH
39135: LD_INT 1
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 2
39144: NEG
39145: PUSH
39146: LD_INT 0
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 2
39155: NEG
39156: PUSH
39157: LD_INT 1
39159: NEG
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 2
39167: NEG
39168: PUSH
39169: LD_INT 2
39171: NEG
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 2
39179: NEG
39180: PUSH
39181: LD_INT 3
39183: NEG
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 1
39191: NEG
39192: PUSH
39193: LD_INT 3
39195: NEG
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 3
39203: NEG
39204: PUSH
39205: LD_INT 1
39207: NEG
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 3
39215: NEG
39216: PUSH
39217: LD_INT 2
39219: NEG
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39250: LD_ADDR_VAR 0 29
39254: PUSH
39255: LD_INT 0
39257: PUSH
39258: LD_INT 0
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 0
39267: PUSH
39268: LD_INT 1
39270: NEG
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 1
39278: PUSH
39279: LD_INT 0
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 1
39288: PUSH
39289: LD_INT 1
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 0
39298: PUSH
39299: LD_INT 1
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 1
39308: NEG
39309: PUSH
39310: LD_INT 0
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 1
39319: NEG
39320: PUSH
39321: LD_INT 1
39323: NEG
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 1
39331: NEG
39332: PUSH
39333: LD_INT 2
39335: NEG
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 0
39343: PUSH
39344: LD_INT 2
39346: NEG
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 1
39354: PUSH
39355: LD_INT 1
39357: NEG
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 2
39365: PUSH
39366: LD_INT 0
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 2
39375: PUSH
39376: LD_INT 1
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: LD_INT 2
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 0
39395: PUSH
39396: LD_INT 2
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 1
39405: NEG
39406: PUSH
39407: LD_INT 1
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 2
39416: NEG
39417: PUSH
39418: LD_INT 1
39420: NEG
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 2
39428: NEG
39429: PUSH
39430: LD_INT 2
39432: NEG
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 2
39440: NEG
39441: PUSH
39442: LD_INT 3
39444: NEG
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 2
39452: PUSH
39453: LD_INT 1
39455: NEG
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 3
39463: PUSH
39464: LD_INT 1
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 1
39473: PUSH
39474: LD_INT 3
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 1
39483: NEG
39484: PUSH
39485: LD_INT 2
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 3
39494: NEG
39495: PUSH
39496: LD_INT 2
39498: NEG
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39529: LD_ADDR_VAR 0 30
39533: PUSH
39534: LD_INT 0
39536: PUSH
39537: LD_INT 0
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 0
39546: PUSH
39547: LD_INT 1
39549: NEG
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 1
39557: PUSH
39558: LD_INT 0
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 1
39567: PUSH
39568: LD_INT 1
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 0
39577: PUSH
39578: LD_INT 1
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 1
39587: NEG
39588: PUSH
39589: LD_INT 0
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 1
39598: NEG
39599: PUSH
39600: LD_INT 1
39602: NEG
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 1
39610: NEG
39611: PUSH
39612: LD_INT 2
39614: NEG
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 0
39622: PUSH
39623: LD_INT 2
39625: NEG
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 1
39633: PUSH
39634: LD_INT 1
39636: NEG
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 2
39644: PUSH
39645: LD_INT 0
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 2
39654: PUSH
39655: LD_INT 1
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 2
39664: PUSH
39665: LD_INT 2
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 1
39674: PUSH
39675: LD_INT 2
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 1
39684: NEG
39685: PUSH
39686: LD_INT 1
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 2
39695: NEG
39696: PUSH
39697: LD_INT 0
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 2
39706: NEG
39707: PUSH
39708: LD_INT 1
39710: NEG
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 1
39718: NEG
39719: PUSH
39720: LD_INT 3
39722: NEG
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 1
39730: PUSH
39731: LD_INT 2
39733: NEG
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 3
39741: PUSH
39742: LD_INT 2
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 2
39751: PUSH
39752: LD_INT 3
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 2
39761: NEG
39762: PUSH
39763: LD_INT 1
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 3
39772: NEG
39773: PUSH
39774: LD_INT 1
39776: NEG
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39807: LD_ADDR_VAR 0 31
39811: PUSH
39812: LD_INT 0
39814: PUSH
39815: LD_INT 0
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 0
39824: PUSH
39825: LD_INT 1
39827: NEG
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 1
39835: PUSH
39836: LD_INT 0
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 1
39845: PUSH
39846: LD_INT 1
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 0
39855: PUSH
39856: LD_INT 1
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 1
39865: NEG
39866: PUSH
39867: LD_INT 0
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 1
39876: NEG
39877: PUSH
39878: LD_INT 1
39880: NEG
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 1
39888: NEG
39889: PUSH
39890: LD_INT 2
39892: NEG
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 1
39900: PUSH
39901: LD_INT 1
39903: NEG
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 2
39911: PUSH
39912: LD_INT 0
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 2
39921: PUSH
39922: LD_INT 1
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 2
39931: PUSH
39932: LD_INT 2
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 1
39941: PUSH
39942: LD_INT 2
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 0
39951: PUSH
39952: LD_INT 2
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 1
39961: NEG
39962: PUSH
39963: LD_INT 1
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 2
39972: NEG
39973: PUSH
39974: LD_INT 1
39976: NEG
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 2
39984: NEG
39985: PUSH
39986: LD_INT 2
39988: NEG
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 2
39996: NEG
39997: PUSH
39998: LD_INT 3
40000: NEG
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 2
40008: PUSH
40009: LD_INT 1
40011: NEG
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 3
40019: PUSH
40020: LD_INT 1
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 1
40029: PUSH
40030: LD_INT 3
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 1
40039: NEG
40040: PUSH
40041: LD_INT 2
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 3
40050: NEG
40051: PUSH
40052: LD_INT 2
40054: NEG
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40085: LD_ADDR_VAR 0 32
40089: PUSH
40090: LD_INT 0
40092: PUSH
40093: LD_INT 0
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 0
40102: PUSH
40103: LD_INT 1
40105: NEG
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 1
40113: PUSH
40114: LD_INT 0
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 1
40123: PUSH
40124: LD_INT 1
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 0
40133: PUSH
40134: LD_INT 1
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 1
40143: NEG
40144: PUSH
40145: LD_INT 0
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 1
40154: NEG
40155: PUSH
40156: LD_INT 1
40158: NEG
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 1
40166: NEG
40167: PUSH
40168: LD_INT 2
40170: NEG
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 0
40178: PUSH
40179: LD_INT 2
40181: NEG
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 1
40189: PUSH
40190: LD_INT 1
40192: NEG
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 2
40200: PUSH
40201: LD_INT 1
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 2
40210: PUSH
40211: LD_INT 2
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 1
40220: PUSH
40221: LD_INT 2
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 0
40230: PUSH
40231: LD_INT 2
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 1
40240: NEG
40241: PUSH
40242: LD_INT 1
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 2
40251: NEG
40252: PUSH
40253: LD_INT 0
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 2
40262: NEG
40263: PUSH
40264: LD_INT 1
40266: NEG
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 1
40274: NEG
40275: PUSH
40276: LD_INT 3
40278: NEG
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 1
40286: PUSH
40287: LD_INT 2
40289: NEG
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 3
40297: PUSH
40298: LD_INT 2
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 2
40307: PUSH
40308: LD_INT 3
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 2
40317: NEG
40318: PUSH
40319: LD_INT 1
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 3
40328: NEG
40329: PUSH
40330: LD_INT 1
40332: NEG
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40363: LD_ADDR_VAR 0 33
40367: PUSH
40368: LD_INT 0
40370: PUSH
40371: LD_INT 0
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 0
40380: PUSH
40381: LD_INT 1
40383: NEG
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 1
40391: PUSH
40392: LD_INT 0
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 1
40401: PUSH
40402: LD_INT 1
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 0
40411: PUSH
40412: LD_INT 1
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 1
40421: NEG
40422: PUSH
40423: LD_INT 0
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 1
40432: NEG
40433: PUSH
40434: LD_INT 1
40436: NEG
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: LD_INT 2
40448: NEG
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 1
40456: PUSH
40457: LD_INT 1
40459: NEG
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 2
40467: PUSH
40468: LD_INT 0
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 2
40477: PUSH
40478: LD_INT 1
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 1
40487: PUSH
40488: LD_INT 2
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 0
40497: PUSH
40498: LD_INT 2
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 1
40507: NEG
40508: PUSH
40509: LD_INT 1
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 2
40518: NEG
40519: PUSH
40520: LD_INT 0
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 2
40529: NEG
40530: PUSH
40531: LD_INT 1
40533: NEG
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 2
40541: NEG
40542: PUSH
40543: LD_INT 2
40545: NEG
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 2
40553: NEG
40554: PUSH
40555: LD_INT 3
40557: NEG
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 2
40565: PUSH
40566: LD_INT 1
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 3
40576: PUSH
40577: LD_INT 1
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 1
40586: PUSH
40587: LD_INT 3
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 1
40596: NEG
40597: PUSH
40598: LD_INT 2
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 3
40607: NEG
40608: PUSH
40609: LD_INT 2
40611: NEG
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40642: LD_ADDR_VAR 0 34
40646: PUSH
40647: LD_INT 0
40649: PUSH
40650: LD_INT 0
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 0
40659: PUSH
40660: LD_INT 1
40662: NEG
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 1
40670: PUSH
40671: LD_INT 0
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 1
40680: PUSH
40681: LD_INT 1
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 0
40690: PUSH
40691: LD_INT 1
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 1
40700: NEG
40701: PUSH
40702: LD_INT 0
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 1
40711: NEG
40712: PUSH
40713: LD_INT 1
40715: NEG
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 1
40723: NEG
40724: PUSH
40725: LD_INT 2
40727: NEG
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: LD_INT 2
40738: NEG
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 1
40746: PUSH
40747: LD_INT 1
40749: NEG
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 2
40757: PUSH
40758: LD_INT 1
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 2
40767: PUSH
40768: LD_INT 2
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 1
40777: PUSH
40778: LD_INT 2
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 1
40787: NEG
40788: PUSH
40789: LD_INT 1
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 2
40798: NEG
40799: PUSH
40800: LD_INT 0
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 2
40809: NEG
40810: PUSH
40811: LD_INT 1
40813: NEG
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 2
40821: NEG
40822: PUSH
40823: LD_INT 2
40825: NEG
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 1
40833: NEG
40834: PUSH
40835: LD_INT 3
40837: NEG
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 1
40845: PUSH
40846: LD_INT 2
40848: NEG
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 3
40856: PUSH
40857: LD_INT 2
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 2
40866: PUSH
40867: LD_INT 3
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 2
40876: NEG
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 3
40887: NEG
40888: PUSH
40889: LD_INT 1
40891: NEG
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40922: LD_ADDR_VAR 0 35
40926: PUSH
40927: LD_INT 0
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: LD_INT 1
40942: NEG
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 1
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 1
40960: PUSH
40961: LD_INT 1
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 0
40970: PUSH
40971: LD_INT 1
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 1
40980: NEG
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 1
40991: NEG
40992: PUSH
40993: LD_INT 1
40995: NEG
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 2
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 2
41013: NEG
41014: PUSH
41015: LD_INT 1
41017: NEG
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41034: LD_ADDR_VAR 0 36
41038: PUSH
41039: LD_INT 0
41041: PUSH
41042: LD_INT 0
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 0
41051: PUSH
41052: LD_INT 1
41054: NEG
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 1
41062: PUSH
41063: LD_INT 0
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 1
41072: PUSH
41073: LD_INT 1
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 0
41082: PUSH
41083: LD_INT 1
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 1
41092: NEG
41093: PUSH
41094: LD_INT 0
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 1
41103: NEG
41104: PUSH
41105: LD_INT 1
41107: NEG
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 1
41115: NEG
41116: PUSH
41117: LD_INT 2
41119: NEG
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 1
41127: PUSH
41128: LD_INT 2
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41146: LD_ADDR_VAR 0 37
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 0
41163: PUSH
41164: LD_INT 1
41166: NEG
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 1
41174: PUSH
41175: LD_INT 0
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 1
41184: PUSH
41185: LD_INT 1
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 0
41194: PUSH
41195: LD_INT 1
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 1
41204: NEG
41205: PUSH
41206: LD_INT 0
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 1
41215: NEG
41216: PUSH
41217: LD_INT 1
41219: NEG
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 1
41227: PUSH
41228: LD_INT 1
41230: NEG
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 1
41238: NEG
41239: PUSH
41240: LD_INT 1
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41258: LD_ADDR_VAR 0 38
41262: PUSH
41263: LD_INT 0
41265: PUSH
41266: LD_INT 0
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 0
41275: PUSH
41276: LD_INT 1
41278: NEG
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 1
41286: PUSH
41287: LD_INT 0
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 1
41296: PUSH
41297: LD_INT 1
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: LD_INT 1
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 1
41316: NEG
41317: PUSH
41318: LD_INT 0
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 1
41327: NEG
41328: PUSH
41329: LD_INT 1
41331: NEG
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 2
41339: PUSH
41340: LD_INT 1
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 2
41349: NEG
41350: PUSH
41351: LD_INT 1
41353: NEG
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41370: LD_ADDR_VAR 0 39
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: LD_INT 0
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 0
41387: PUSH
41388: LD_INT 1
41390: NEG
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 1
41398: PUSH
41399: LD_INT 0
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 1
41408: PUSH
41409: LD_INT 1
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 0
41418: PUSH
41419: LD_INT 1
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 1
41428: NEG
41429: PUSH
41430: LD_INT 0
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 1
41439: NEG
41440: PUSH
41441: LD_INT 1
41443: NEG
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 1
41451: NEG
41452: PUSH
41453: LD_INT 2
41455: NEG
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 1
41463: PUSH
41464: LD_INT 2
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41482: LD_ADDR_VAR 0 40
41486: PUSH
41487: LD_INT 0
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 0
41499: PUSH
41500: LD_INT 1
41502: NEG
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 1
41510: PUSH
41511: LD_INT 0
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 1
41520: PUSH
41521: LD_INT 1
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: LD_INT 1
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 1
41540: NEG
41541: PUSH
41542: LD_INT 0
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 1
41551: NEG
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 1
41563: PUSH
41564: LD_INT 1
41566: NEG
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 1
41574: NEG
41575: PUSH
41576: LD_INT 1
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41594: LD_ADDR_VAR 0 41
41598: PUSH
41599: LD_INT 0
41601: PUSH
41602: LD_INT 0
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 0
41611: PUSH
41612: LD_INT 1
41614: NEG
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 1
41622: PUSH
41623: LD_INT 0
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: LD_INT 1
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: LD_INT 1
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 1
41652: NEG
41653: PUSH
41654: LD_INT 0
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 1
41663: NEG
41664: PUSH
41665: LD_INT 1
41667: NEG
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 1
41675: NEG
41676: PUSH
41677: LD_INT 2
41679: NEG
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 1
41687: PUSH
41688: LD_INT 1
41690: NEG
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 2
41698: PUSH
41699: LD_INT 0
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 2
41708: PUSH
41709: LD_INT 1
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 2
41718: PUSH
41719: LD_INT 2
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 1
41728: PUSH
41729: LD_INT 2
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 1
41738: NEG
41739: PUSH
41740: LD_INT 1
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 2
41749: NEG
41750: PUSH
41751: LD_INT 0
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 2
41760: NEG
41761: PUSH
41762: LD_INT 1
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 2
41772: NEG
41773: PUSH
41774: LD_INT 2
41776: NEG
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 2
41784: NEG
41785: PUSH
41786: LD_INT 3
41788: NEG
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 2
41796: PUSH
41797: LD_INT 1
41799: NEG
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 3
41807: PUSH
41808: LD_INT 0
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 3
41817: PUSH
41818: LD_INT 1
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 3
41827: PUSH
41828: LD_INT 2
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 3
41837: PUSH
41838: LD_INT 3
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 2
41847: PUSH
41848: LD_INT 3
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 2
41857: NEG
41858: PUSH
41859: LD_INT 1
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 3
41868: NEG
41869: PUSH
41870: LD_INT 0
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 3
41879: NEG
41880: PUSH
41881: LD_INT 1
41883: NEG
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 3
41891: NEG
41892: PUSH
41893: LD_INT 2
41895: NEG
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 3
41903: NEG
41904: PUSH
41905: LD_INT 3
41907: NEG
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41944: LD_ADDR_VAR 0 42
41948: PUSH
41949: LD_INT 0
41951: PUSH
41952: LD_INT 0
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 0
41961: PUSH
41962: LD_INT 1
41964: NEG
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 1
41972: PUSH
41973: LD_INT 0
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 1
41982: PUSH
41983: LD_INT 1
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 0
41992: PUSH
41993: LD_INT 1
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 1
42002: NEG
42003: PUSH
42004: LD_INT 0
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 1
42013: NEG
42014: PUSH
42015: LD_INT 1
42017: NEG
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 1
42025: NEG
42026: PUSH
42027: LD_INT 2
42029: NEG
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 0
42037: PUSH
42038: LD_INT 2
42040: NEG
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 1
42048: PUSH
42049: LD_INT 1
42051: NEG
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 2
42059: PUSH
42060: LD_INT 1
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 2
42069: PUSH
42070: LD_INT 2
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 1
42079: PUSH
42080: LD_INT 2
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 0
42089: PUSH
42090: LD_INT 2
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 1
42099: NEG
42100: PUSH
42101: LD_INT 1
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 2
42110: NEG
42111: PUSH
42112: LD_INT 1
42114: NEG
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 2
42122: NEG
42123: PUSH
42124: LD_INT 2
42126: NEG
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 2
42134: NEG
42135: PUSH
42136: LD_INT 3
42138: NEG
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 1
42146: NEG
42147: PUSH
42148: LD_INT 3
42150: NEG
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: LD_INT 3
42161: NEG
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 1
42169: PUSH
42170: LD_INT 2
42172: NEG
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 3
42180: PUSH
42181: LD_INT 2
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 3
42190: PUSH
42191: LD_INT 3
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 2
42200: PUSH
42201: LD_INT 3
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 1
42210: PUSH
42211: LD_INT 3
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 0
42220: PUSH
42221: LD_INT 3
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 1
42230: NEG
42231: PUSH
42232: LD_INT 2
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 3
42241: NEG
42242: PUSH
42243: LD_INT 2
42245: NEG
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 3
42253: NEG
42254: PUSH
42255: LD_INT 3
42257: NEG
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42294: LD_ADDR_VAR 0 43
42298: PUSH
42299: LD_INT 0
42301: PUSH
42302: LD_INT 0
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 0
42311: PUSH
42312: LD_INT 1
42314: NEG
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 1
42322: PUSH
42323: LD_INT 0
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 1
42332: PUSH
42333: LD_INT 1
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 0
42342: PUSH
42343: LD_INT 1
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 1
42352: NEG
42353: PUSH
42354: LD_INT 0
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 1
42363: NEG
42364: PUSH
42365: LD_INT 1
42367: NEG
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 1
42375: NEG
42376: PUSH
42377: LD_INT 2
42379: NEG
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: LD_INT 2
42390: NEG
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 1
42398: PUSH
42399: LD_INT 1
42401: NEG
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 2
42409: PUSH
42410: LD_INT 0
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 2
42419: PUSH
42420: LD_INT 1
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 1
42429: PUSH
42430: LD_INT 2
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 0
42439: PUSH
42440: LD_INT 2
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 1
42449: NEG
42450: PUSH
42451: LD_INT 1
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 2
42460: NEG
42461: PUSH
42462: LD_INT 0
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 2
42471: NEG
42472: PUSH
42473: LD_INT 1
42475: NEG
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 1
42483: NEG
42484: PUSH
42485: LD_INT 3
42487: NEG
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 0
42495: PUSH
42496: LD_INT 3
42498: NEG
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 1
42506: PUSH
42507: LD_INT 2
42509: NEG
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 2
42517: PUSH
42518: LD_INT 1
42520: NEG
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 3
42528: PUSH
42529: LD_INT 0
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 3
42538: PUSH
42539: LD_INT 1
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 1
42548: PUSH
42549: LD_INT 3
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 0
42558: PUSH
42559: LD_INT 3
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 1
42568: NEG
42569: PUSH
42570: LD_INT 2
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 2
42579: NEG
42580: PUSH
42581: LD_INT 1
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 3
42590: NEG
42591: PUSH
42592: LD_INT 0
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 3
42601: NEG
42602: PUSH
42603: LD_INT 1
42605: NEG
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42642: LD_ADDR_VAR 0 44
42646: PUSH
42647: LD_INT 0
42649: PUSH
42650: LD_INT 0
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 0
42659: PUSH
42660: LD_INT 1
42662: NEG
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 1
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 1
42680: PUSH
42681: LD_INT 1
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 0
42690: PUSH
42691: LD_INT 1
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 1
42700: NEG
42701: PUSH
42702: LD_INT 0
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 1
42711: NEG
42712: PUSH
42713: LD_INT 1
42715: NEG
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 1
42723: NEG
42724: PUSH
42725: LD_INT 2
42727: NEG
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 1
42735: PUSH
42736: LD_INT 1
42738: NEG
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 2
42746: PUSH
42747: LD_INT 0
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 2
42756: PUSH
42757: LD_INT 1
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 2
42766: PUSH
42767: LD_INT 2
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 1
42776: PUSH
42777: LD_INT 2
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 1
42786: NEG
42787: PUSH
42788: LD_INT 1
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 2
42797: NEG
42798: PUSH
42799: LD_INT 0
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 2
42808: NEG
42809: PUSH
42810: LD_INT 1
42812: NEG
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 2
42820: NEG
42821: PUSH
42822: LD_INT 2
42824: NEG
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 2
42832: NEG
42833: PUSH
42834: LD_INT 3
42836: NEG
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 2
42844: PUSH
42845: LD_INT 1
42847: NEG
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 3
42855: PUSH
42856: LD_INT 0
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 3
42865: PUSH
42866: LD_INT 1
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 3
42875: PUSH
42876: LD_INT 2
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 3
42885: PUSH
42886: LD_INT 3
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 2
42895: PUSH
42896: LD_INT 3
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 2
42905: NEG
42906: PUSH
42907: LD_INT 1
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 3
42916: NEG
42917: PUSH
42918: LD_INT 0
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 3
42927: NEG
42928: PUSH
42929: LD_INT 1
42931: NEG
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 3
42939: NEG
42940: PUSH
42941: LD_INT 2
42943: NEG
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 3
42951: NEG
42952: PUSH
42953: LD_INT 3
42955: NEG
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42992: LD_ADDR_VAR 0 45
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 0
43009: PUSH
43010: LD_INT 1
43012: NEG
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 1
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 1
43030: PUSH
43031: LD_INT 1
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 0
43040: PUSH
43041: LD_INT 1
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 1
43050: NEG
43051: PUSH
43052: LD_INT 0
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 1
43061: NEG
43062: PUSH
43063: LD_INT 1
43065: NEG
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 1
43073: NEG
43074: PUSH
43075: LD_INT 2
43077: NEG
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: LD_INT 2
43088: NEG
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 1
43096: PUSH
43097: LD_INT 1
43099: NEG
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 2
43107: PUSH
43108: LD_INT 1
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 2
43117: PUSH
43118: LD_INT 2
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 1
43127: PUSH
43128: LD_INT 2
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 0
43137: PUSH
43138: LD_INT 2
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: LD_INT 1
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 2
43158: NEG
43159: PUSH
43160: LD_INT 1
43162: NEG
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 2
43170: NEG
43171: PUSH
43172: LD_INT 2
43174: NEG
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 2
43182: NEG
43183: PUSH
43184: LD_INT 3
43186: NEG
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 1
43194: NEG
43195: PUSH
43196: LD_INT 3
43198: NEG
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 0
43206: PUSH
43207: LD_INT 3
43209: NEG
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 1
43217: PUSH
43218: LD_INT 2
43220: NEG
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 3
43228: PUSH
43229: LD_INT 2
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 3
43238: PUSH
43239: LD_INT 3
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 2
43248: PUSH
43249: LD_INT 3
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 1
43258: PUSH
43259: LD_INT 3
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: LD_INT 3
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 1
43278: NEG
43279: PUSH
43280: LD_INT 2
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 3
43289: NEG
43290: PUSH
43291: LD_INT 2
43293: NEG
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 3
43301: NEG
43302: PUSH
43303: LD_INT 3
43305: NEG
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43342: LD_ADDR_VAR 0 46
43346: PUSH
43347: LD_INT 0
43349: PUSH
43350: LD_INT 0
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: LD_INT 1
43362: NEG
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 1
43370: PUSH
43371: LD_INT 0
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 1
43380: PUSH
43381: LD_INT 1
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 0
43390: PUSH
43391: LD_INT 1
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 1
43400: NEG
43401: PUSH
43402: LD_INT 0
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 1
43411: NEG
43412: PUSH
43413: LD_INT 1
43415: NEG
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 1
43423: NEG
43424: PUSH
43425: LD_INT 2
43427: NEG
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 0
43435: PUSH
43436: LD_INT 2
43438: NEG
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 1
43446: PUSH
43447: LD_INT 1
43449: NEG
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 2
43457: PUSH
43458: LD_INT 0
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 2
43467: PUSH
43468: LD_INT 1
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 1
43477: PUSH
43478: LD_INT 2
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 0
43487: PUSH
43488: LD_INT 2
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 1
43497: NEG
43498: PUSH
43499: LD_INT 1
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 2
43508: NEG
43509: PUSH
43510: LD_INT 0
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 2
43519: NEG
43520: PUSH
43521: LD_INT 1
43523: NEG
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 1
43531: NEG
43532: PUSH
43533: LD_INT 3
43535: NEG
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 0
43543: PUSH
43544: LD_INT 3
43546: NEG
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 1
43554: PUSH
43555: LD_INT 2
43557: NEG
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 2
43565: PUSH
43566: LD_INT 1
43568: NEG
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 3
43576: PUSH
43577: LD_INT 0
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 3
43586: PUSH
43587: LD_INT 1
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 1
43596: PUSH
43597: LD_INT 3
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 0
43606: PUSH
43607: LD_INT 3
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 1
43616: NEG
43617: PUSH
43618: LD_INT 2
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 2
43627: NEG
43628: PUSH
43629: LD_INT 1
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 3
43638: NEG
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 3
43649: NEG
43650: PUSH
43651: LD_INT 1
43653: NEG
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43690: LD_ADDR_VAR 0 47
43694: PUSH
43695: LD_INT 0
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 0
43707: PUSH
43708: LD_INT 1
43710: NEG
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 1
43718: PUSH
43719: LD_INT 0
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 1
43728: PUSH
43729: LD_INT 1
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: LD_INT 1
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 1
43748: NEG
43749: PUSH
43750: LD_INT 0
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 1
43759: NEG
43760: PUSH
43761: LD_INT 1
43763: NEG
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 1
43771: NEG
43772: PUSH
43773: LD_INT 2
43775: NEG
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 0
43783: PUSH
43784: LD_INT 2
43786: NEG
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 1
43794: PUSH
43795: LD_INT 1
43797: NEG
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 2
43805: NEG
43806: PUSH
43807: LD_INT 1
43809: NEG
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 2
43817: NEG
43818: PUSH
43819: LD_INT 2
43821: NEG
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43841: LD_ADDR_VAR 0 48
43845: PUSH
43846: LD_INT 0
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 0
43858: PUSH
43859: LD_INT 1
43861: NEG
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 1
43869: PUSH
43870: LD_INT 0
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 1
43879: PUSH
43880: LD_INT 1
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 0
43889: PUSH
43890: LD_INT 1
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 1
43899: NEG
43900: PUSH
43901: LD_INT 0
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 1
43910: NEG
43911: PUSH
43912: LD_INT 1
43914: NEG
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 1
43922: NEG
43923: PUSH
43924: LD_INT 2
43926: NEG
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 0
43934: PUSH
43935: LD_INT 2
43937: NEG
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 1
43945: PUSH
43946: LD_INT 1
43948: NEG
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 2
43956: PUSH
43957: LD_INT 0
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 2
43966: PUSH
43967: LD_INT 1
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43988: LD_ADDR_VAR 0 49
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: LD_INT 0
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: LD_INT 1
44008: NEG
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 1
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 1
44026: PUSH
44027: LD_INT 1
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 0
44036: PUSH
44037: LD_INT 1
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 1
44046: NEG
44047: PUSH
44048: LD_INT 0
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 1
44057: NEG
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: LD_INT 1
44072: NEG
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 2
44080: PUSH
44081: LD_INT 0
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 2
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 2
44100: PUSH
44101: LD_INT 2
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: PUSH
44111: LD_INT 2
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44132: LD_ADDR_VAR 0 50
44136: PUSH
44137: LD_INT 0
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 0
44149: PUSH
44150: LD_INT 1
44152: NEG
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 1
44160: PUSH
44161: LD_INT 0
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 1
44170: PUSH
44171: LD_INT 1
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 0
44180: PUSH
44181: LD_INT 1
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 1
44190: NEG
44191: PUSH
44192: LD_INT 0
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 1
44201: NEG
44202: PUSH
44203: LD_INT 1
44205: NEG
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 2
44213: PUSH
44214: LD_INT 1
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 2
44223: PUSH
44224: LD_INT 2
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 1
44233: PUSH
44234: LD_INT 2
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 0
44243: PUSH
44244: LD_INT 2
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 1
44253: NEG
44254: PUSH
44255: LD_INT 1
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44276: LD_ADDR_VAR 0 51
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: LD_INT 1
44296: NEG
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 1
44304: PUSH
44305: LD_INT 0
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 1
44314: PUSH
44315: LD_INT 1
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 0
44324: PUSH
44325: LD_INT 1
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 1
44334: NEG
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: LD_INT 1
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: LD_INT 2
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 0
44367: PUSH
44368: LD_INT 2
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 1
44377: NEG
44378: PUSH
44379: LD_INT 1
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 2
44388: NEG
44389: PUSH
44390: LD_INT 0
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 2
44399: NEG
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44423: LD_ADDR_VAR 0 52
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 0
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 1
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 1
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 0
44471: PUSH
44472: LD_INT 1
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 1
44481: NEG
44482: PUSH
44483: LD_INT 0
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: LD_INT 1
44496: NEG
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 1
44504: NEG
44505: PUSH
44506: LD_INT 2
44508: NEG
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 1
44516: NEG
44517: PUSH
44518: LD_INT 1
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 2
44527: NEG
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 2
44538: NEG
44539: PUSH
44540: LD_INT 1
44542: NEG
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 2
44550: NEG
44551: PUSH
44552: LD_INT 2
44554: NEG
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44574: LD_ADDR_VAR 0 53
44578: PUSH
44579: LD_INT 0
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 0
44591: PUSH
44592: LD_INT 1
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 1
44602: PUSH
44603: LD_INT 0
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 1
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 1
44632: NEG
44633: PUSH
44634: LD_INT 0
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 1
44643: NEG
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 1
44655: NEG
44656: PUSH
44657: LD_INT 2
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 0
44667: PUSH
44668: LD_INT 2
44670: NEG
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 1
44678: PUSH
44679: LD_INT 1
44681: NEG
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 2
44689: PUSH
44690: LD_INT 0
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 2
44699: PUSH
44700: LD_INT 1
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 2
44709: PUSH
44710: LD_INT 2
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 1
44719: PUSH
44720: LD_INT 2
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 0
44729: PUSH
44730: LD_INT 2
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 1
44739: NEG
44740: PUSH
44741: LD_INT 1
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 2
44750: NEG
44751: PUSH
44752: LD_INT 0
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 2
44761: NEG
44762: PUSH
44763: LD_INT 1
44765: NEG
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 2
44773: NEG
44774: PUSH
44775: LD_INT 2
44777: NEG
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44804: LD_ADDR_VAR 0 54
44808: PUSH
44809: LD_INT 0
44811: PUSH
44812: LD_INT 0
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 0
44821: PUSH
44822: LD_INT 1
44824: NEG
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 1
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 1
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: LD_INT 1
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 1
44862: NEG
44863: PUSH
44864: LD_INT 0
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: LD_INT 1
44877: NEG
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: NEG
44886: PUSH
44887: LD_INT 2
44889: NEG
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 0
44897: PUSH
44898: LD_INT 2
44900: NEG
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 1
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 2
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 2
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 2
44939: PUSH
44940: LD_INT 2
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 1
44949: PUSH
44950: LD_INT 2
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: LD_INT 2
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: NEG
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 2
44980: NEG
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 2
44991: NEG
44992: PUSH
44993: LD_INT 1
44995: NEG
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 2
45003: NEG
45004: PUSH
45005: LD_INT 2
45007: NEG
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45034: LD_ADDR_VAR 0 55
45038: PUSH
45039: LD_INT 0
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 0
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 1
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 1
45072: PUSH
45073: LD_INT 1
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 0
45082: PUSH
45083: LD_INT 1
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 1
45092: NEG
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 1
45103: NEG
45104: PUSH
45105: LD_INT 1
45107: NEG
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: NEG
45116: PUSH
45117: LD_INT 2
45119: NEG
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: LD_INT 2
45130: NEG
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: LD_INT 1
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 2
45149: PUSH
45150: LD_INT 0
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 2
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 2
45169: PUSH
45170: LD_INT 2
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 1
45179: PUSH
45180: LD_INT 2
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 0
45189: PUSH
45190: LD_INT 2
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 1
45199: NEG
45200: PUSH
45201: LD_INT 1
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 2
45210: NEG
45211: PUSH
45212: LD_INT 0
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 2
45221: NEG
45222: PUSH
45223: LD_INT 1
45225: NEG
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 2
45233: NEG
45234: PUSH
45235: LD_INT 2
45237: NEG
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45264: LD_ADDR_VAR 0 56
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 0
45281: PUSH
45282: LD_INT 1
45284: NEG
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: LD_INT 0
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 1
45302: PUSH
45303: LD_INT 1
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 1
45333: NEG
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 1
45345: NEG
45346: PUSH
45347: LD_INT 2
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 0
45357: PUSH
45358: LD_INT 2
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: PUSH
45369: LD_INT 1
45371: NEG
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 2
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 2
45389: PUSH
45390: LD_INT 1
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 2
45399: PUSH
45400: LD_INT 2
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 1
45409: PUSH
45410: LD_INT 2
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 0
45419: PUSH
45420: LD_INT 2
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: LD_INT 1
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 2
45440: NEG
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 2
45451: NEG
45452: PUSH
45453: LD_INT 1
45455: NEG
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 2
45463: NEG
45464: PUSH
45465: LD_INT 2
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45494: LD_ADDR_VAR 0 57
45498: PUSH
45499: LD_INT 0
45501: PUSH
45502: LD_INT 0
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 0
45511: PUSH
45512: LD_INT 1
45514: NEG
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 1
45522: PUSH
45523: LD_INT 0
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 1
45532: PUSH
45533: LD_INT 1
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 0
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 1
45552: NEG
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 1
45563: NEG
45564: PUSH
45565: LD_INT 1
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: LD_INT 2
45579: NEG
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: LD_INT 2
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 1
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 2
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 2
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 2
45629: PUSH
45630: LD_INT 2
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 1
45639: PUSH
45640: LD_INT 2
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 0
45649: PUSH
45650: LD_INT 2
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 2
45670: NEG
45671: PUSH
45672: LD_INT 0
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 2
45681: NEG
45682: PUSH
45683: LD_INT 1
45685: NEG
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 2
45693: NEG
45694: PUSH
45695: LD_INT 2
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45724: LD_ADDR_VAR 0 58
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: LD_INT 0
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: LD_INT 1
45744: NEG
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 1
45752: PUSH
45753: LD_INT 0
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 1
45762: PUSH
45763: LD_INT 1
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 0
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 1
45782: NEG
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 1
45793: NEG
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: LD_INT 2
45809: NEG
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: LD_INT 2
45820: NEG
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 1
45828: PUSH
45829: LD_INT 1
45831: NEG
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 2
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 2
45849: PUSH
45850: LD_INT 1
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 2
45859: PUSH
45860: LD_INT 2
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 1
45869: PUSH
45870: LD_INT 2
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 0
45879: PUSH
45880: LD_INT 2
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 1
45889: NEG
45890: PUSH
45891: LD_INT 1
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 2
45900: NEG
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 2
45911: NEG
45912: PUSH
45913: LD_INT 1
45915: NEG
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 2
45923: NEG
45924: PUSH
45925: LD_INT 2
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45954: LD_ADDR_VAR 0 59
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: LD_INT 0
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: LD_INT 1
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 1
45982: PUSH
45983: LD_INT 0
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 1
45992: PUSH
45993: LD_INT 1
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 1
46023: NEG
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46042: LD_ADDR_VAR 0 60
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: LD_INT 0
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: LD_INT 1
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: PUSH
46071: LD_INT 0
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 1
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 1
46100: NEG
46101: PUSH
46102: LD_INT 0
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: LD_INT 1
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46130: LD_ADDR_VAR 0 61
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: LD_INT 1
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: LD_INT 1
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 1
46199: NEG
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46218: LD_ADDR_VAR 0 62
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: LD_INT 0
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 0
46235: PUSH
46236: LD_INT 1
46238: NEG
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: PUSH
46247: LD_INT 0
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 1
46256: PUSH
46257: LD_INT 1
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 1
46287: NEG
46288: PUSH
46289: LD_INT 1
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46306: LD_ADDR_VAR 0 63
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: LD_INT 1
46326: NEG
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: LD_INT 0
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 1
46344: PUSH
46345: LD_INT 1
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: LD_INT 1
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 1
46364: NEG
46365: PUSH
46366: LD_INT 0
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: LD_INT 1
46379: NEG
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46394: LD_ADDR_VAR 0 64
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: LD_INT 1
46414: NEG
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 1
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: LD_INT 1
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: NEG
46453: PUSH
46454: LD_INT 0
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 1
46463: NEG
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: ST_TO_ADDR
// end ; 1 :
46482: GO 52379
46484: LD_INT 1
46486: DOUBLE
46487: EQUAL
46488: IFTRUE 46492
46490: GO 49115
46492: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46493: LD_ADDR_VAR 0 11
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: LD_INT 3
46504: NEG
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: LD_INT 3
46515: NEG
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: LD_INT 2
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: LIST
46536: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46537: LD_ADDR_VAR 0 12
46541: PUSH
46542: LD_INT 2
46544: PUSH
46545: LD_INT 1
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 3
46555: PUSH
46556: LD_INT 0
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 3
46565: PUSH
46566: LD_INT 1
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: LIST
46577: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46578: LD_ADDR_VAR 0 13
46582: PUSH
46583: LD_INT 3
46585: PUSH
46586: LD_INT 2
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 3
46595: PUSH
46596: LD_INT 3
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 2
46605: PUSH
46606: LD_INT 3
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: LIST
46617: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46618: LD_ADDR_VAR 0 14
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: LD_INT 3
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: LD_INT 3
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: LD_INT 2
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: LIST
46658: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46659: LD_ADDR_VAR 0 15
46663: PUSH
46664: LD_INT 2
46666: NEG
46667: PUSH
46668: LD_INT 1
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 3
46677: NEG
46678: PUSH
46679: LD_INT 0
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 3
46688: NEG
46689: PUSH
46690: LD_INT 1
46692: NEG
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: LIST
46702: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46703: LD_ADDR_VAR 0 16
46707: PUSH
46708: LD_INT 2
46710: NEG
46711: PUSH
46712: LD_INT 3
46714: NEG
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 3
46722: NEG
46723: PUSH
46724: LD_INT 2
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 3
46734: NEG
46735: PUSH
46736: LD_INT 3
46738: NEG
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: LIST
46748: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46749: LD_ADDR_VAR 0 17
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: LD_INT 3
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: LD_INT 3
46771: NEG
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: LD_INT 2
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: LIST
46792: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46793: LD_ADDR_VAR 0 18
46797: PUSH
46798: LD_INT 2
46800: PUSH
46801: LD_INT 1
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 3
46811: PUSH
46812: LD_INT 0
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 3
46821: PUSH
46822: LD_INT 1
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: LIST
46833: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46834: LD_ADDR_VAR 0 19
46838: PUSH
46839: LD_INT 3
46841: PUSH
46842: LD_INT 2
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 3
46851: PUSH
46852: LD_INT 3
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 2
46861: PUSH
46862: LD_INT 3
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: LIST
46873: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46874: LD_ADDR_VAR 0 20
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: LD_INT 3
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: LD_INT 3
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 1
46901: NEG
46902: PUSH
46903: LD_INT 2
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: LIST
46914: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46915: LD_ADDR_VAR 0 21
46919: PUSH
46920: LD_INT 2
46922: NEG
46923: PUSH
46924: LD_INT 1
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 3
46933: NEG
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 3
46944: NEG
46945: PUSH
46946: LD_INT 1
46948: NEG
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: LIST
46958: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46959: LD_ADDR_VAR 0 22
46963: PUSH
46964: LD_INT 2
46966: NEG
46967: PUSH
46968: LD_INT 3
46970: NEG
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 3
46978: NEG
46979: PUSH
46980: LD_INT 2
46982: NEG
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 3
46990: NEG
46991: PUSH
46992: LD_INT 3
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: LIST
47004: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47005: LD_ADDR_VAR 0 23
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: LD_INT 3
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 1
47023: NEG
47024: PUSH
47025: LD_INT 4
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 1
47035: PUSH
47036: LD_INT 3
47038: NEG
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: LIST
47048: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47049: LD_ADDR_VAR 0 24
47053: PUSH
47054: LD_INT 3
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 3
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 4
47077: PUSH
47078: LD_INT 1
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: LIST
47089: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47090: LD_ADDR_VAR 0 25
47094: PUSH
47095: LD_INT 3
47097: PUSH
47098: LD_INT 3
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 4
47107: PUSH
47108: LD_INT 3
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 3
47117: PUSH
47118: LD_INT 4
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: LIST
47129: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47130: LD_ADDR_VAR 0 26
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: LD_INT 3
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: LD_INT 4
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 1
47157: NEG
47158: PUSH
47159: LD_INT 3
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: LIST
47170: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47171: LD_ADDR_VAR 0 27
47175: PUSH
47176: LD_INT 3
47178: NEG
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 3
47189: NEG
47190: PUSH
47191: LD_INT 1
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 4
47200: NEG
47201: PUSH
47202: LD_INT 1
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: LIST
47214: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47215: LD_ADDR_VAR 0 28
47219: PUSH
47220: LD_INT 3
47222: NEG
47223: PUSH
47224: LD_INT 3
47226: NEG
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 3
47234: NEG
47235: PUSH
47236: LD_INT 4
47238: NEG
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 4
47246: NEG
47247: PUSH
47248: LD_INT 3
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: LIST
47260: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47261: LD_ADDR_VAR 0 29
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: LD_INT 3
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: LD_INT 3
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: LD_INT 2
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 1
47302: NEG
47303: PUSH
47304: LD_INT 4
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: LD_INT 4
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: LD_INT 3
47328: NEG
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: NEG
47337: PUSH
47338: LD_INT 5
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: LD_INT 5
47351: NEG
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 1
47359: PUSH
47360: LD_INT 4
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: LD_INT 6
47374: NEG
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: LD_INT 6
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: LD_INT 5
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47416: LD_ADDR_VAR 0 30
47420: PUSH
47421: LD_INT 2
47423: PUSH
47424: LD_INT 1
47426: NEG
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 3
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 3
47444: PUSH
47445: LD_INT 1
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 3
47454: PUSH
47455: LD_INT 1
47457: NEG
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 4
47465: PUSH
47466: LD_INT 0
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 4
47475: PUSH
47476: LD_INT 1
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 4
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 5
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 5
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 5
47516: PUSH
47517: LD_INT 1
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 6
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 6
47537: PUSH
47538: LD_INT 1
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47559: LD_ADDR_VAR 0 31
47563: PUSH
47564: LD_INT 3
47566: PUSH
47567: LD_INT 2
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 3
47576: PUSH
47577: LD_INT 3
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 2
47586: PUSH
47587: LD_INT 3
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 4
47596: PUSH
47597: LD_INT 3
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 4
47606: PUSH
47607: LD_INT 4
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 3
47616: PUSH
47617: LD_INT 4
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 5
47626: PUSH
47627: LD_INT 4
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 5
47636: PUSH
47637: LD_INT 5
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 4
47646: PUSH
47647: LD_INT 5
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 6
47656: PUSH
47657: LD_INT 5
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 6
47666: PUSH
47667: LD_INT 6
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 5
47676: PUSH
47677: LD_INT 6
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47698: LD_ADDR_VAR 0 32
47702: PUSH
47703: LD_INT 1
47705: PUSH
47706: LD_INT 3
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: LD_INT 3
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 1
47725: NEG
47726: PUSH
47727: LD_INT 2
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 1
47736: PUSH
47737: LD_INT 4
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: LD_INT 4
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: NEG
47757: PUSH
47758: LD_INT 3
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: LD_INT 5
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: LD_INT 5
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: NEG
47788: PUSH
47789: LD_INT 4
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 1
47798: PUSH
47799: LD_INT 6
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: LD_INT 6
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: LD_INT 5
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47841: LD_ADDR_VAR 0 33
47845: PUSH
47846: LD_INT 2
47848: NEG
47849: PUSH
47850: LD_INT 1
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 3
47859: NEG
47860: PUSH
47861: LD_INT 0
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 3
47870: NEG
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 3
47882: NEG
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 4
47893: NEG
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 4
47904: NEG
47905: PUSH
47906: LD_INT 1
47908: NEG
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 4
47916: NEG
47917: PUSH
47918: LD_INT 1
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 5
47927: NEG
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 5
47938: NEG
47939: PUSH
47940: LD_INT 1
47942: NEG
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 5
47950: NEG
47951: PUSH
47952: LD_INT 1
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 6
47961: NEG
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 6
47972: NEG
47973: PUSH
47974: LD_INT 1
47976: NEG
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47996: LD_ADDR_VAR 0 34
48000: PUSH
48001: LD_INT 2
48003: NEG
48004: PUSH
48005: LD_INT 3
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 3
48015: NEG
48016: PUSH
48017: LD_INT 2
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 3
48027: NEG
48028: PUSH
48029: LD_INT 3
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 3
48039: NEG
48040: PUSH
48041: LD_INT 4
48043: NEG
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 4
48051: NEG
48052: PUSH
48053: LD_INT 3
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 4
48063: NEG
48064: PUSH
48065: LD_INT 4
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 4
48075: NEG
48076: PUSH
48077: LD_INT 5
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 5
48087: NEG
48088: PUSH
48089: LD_INT 4
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 5
48099: NEG
48100: PUSH
48101: LD_INT 5
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 5
48111: NEG
48112: PUSH
48113: LD_INT 6
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 6
48123: NEG
48124: PUSH
48125: LD_INT 5
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 6
48135: NEG
48136: PUSH
48137: LD_INT 6
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48159: LD_ADDR_VAR 0 41
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: LD_INT 2
48169: NEG
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 1
48177: NEG
48178: PUSH
48179: LD_INT 3
48181: NEG
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 1
48189: PUSH
48190: LD_INT 2
48192: NEG
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: LIST
48202: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48203: LD_ADDR_VAR 0 42
48207: PUSH
48208: LD_INT 2
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 2
48220: PUSH
48221: LD_INT 1
48223: NEG
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 3
48231: PUSH
48232: LD_INT 1
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: LIST
48243: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48244: LD_ADDR_VAR 0 43
48248: PUSH
48249: LD_INT 2
48251: PUSH
48252: LD_INT 2
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 3
48261: PUSH
48262: LD_INT 2
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 2
48271: PUSH
48272: LD_INT 3
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: LIST
48283: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48284: LD_ADDR_VAR 0 44
48288: PUSH
48289: LD_INT 0
48291: PUSH
48292: LD_INT 2
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 1
48301: PUSH
48302: LD_INT 3
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 1
48311: NEG
48312: PUSH
48313: LD_INT 2
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: LIST
48324: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48325: LD_ADDR_VAR 0 45
48329: PUSH
48330: LD_INT 2
48332: NEG
48333: PUSH
48334: LD_INT 0
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 2
48343: NEG
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 3
48354: NEG
48355: PUSH
48356: LD_INT 1
48358: NEG
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: LIST
48368: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48369: LD_ADDR_VAR 0 46
48373: PUSH
48374: LD_INT 2
48376: NEG
48377: PUSH
48378: LD_INT 2
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 2
48388: NEG
48389: PUSH
48390: LD_INT 3
48392: NEG
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 3
48400: NEG
48401: PUSH
48402: LD_INT 2
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: LIST
48414: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48415: LD_ADDR_VAR 0 47
48419: PUSH
48420: LD_INT 2
48422: NEG
48423: PUSH
48424: LD_INT 3
48426: NEG
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 1
48434: NEG
48435: PUSH
48436: LD_INT 3
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48448: LD_ADDR_VAR 0 48
48452: PUSH
48453: LD_INT 1
48455: PUSH
48456: LD_INT 2
48458: NEG
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 2
48466: PUSH
48467: LD_INT 1
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48479: LD_ADDR_VAR 0 49
48483: PUSH
48484: LD_INT 3
48486: PUSH
48487: LD_INT 1
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 3
48496: PUSH
48497: LD_INT 2
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48508: LD_ADDR_VAR 0 50
48512: PUSH
48513: LD_INT 2
48515: PUSH
48516: LD_INT 3
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: LD_INT 3
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48537: LD_ADDR_VAR 0 51
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: LD_INT 2
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 2
48555: NEG
48556: PUSH
48557: LD_INT 1
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48568: LD_ADDR_VAR 0 52
48572: PUSH
48573: LD_INT 3
48575: NEG
48576: PUSH
48577: LD_INT 1
48579: NEG
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 3
48587: NEG
48588: PUSH
48589: LD_INT 2
48591: NEG
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48601: LD_ADDR_VAR 0 53
48605: PUSH
48606: LD_INT 1
48608: NEG
48609: PUSH
48610: LD_INT 3
48612: NEG
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: LD_INT 3
48623: NEG
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: PUSH
48632: LD_INT 2
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: LIST
48644: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48645: LD_ADDR_VAR 0 54
48649: PUSH
48650: LD_INT 2
48652: PUSH
48653: LD_INT 1
48655: NEG
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 3
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 3
48673: PUSH
48674: LD_INT 1
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: LIST
48685: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48686: LD_ADDR_VAR 0 55
48690: PUSH
48691: LD_INT 3
48693: PUSH
48694: LD_INT 2
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 3
48703: PUSH
48704: LD_INT 3
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 2
48713: PUSH
48714: LD_INT 3
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: LIST
48725: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48726: LD_ADDR_VAR 0 56
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: LD_INT 3
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: LD_INT 3
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: LD_INT 2
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: LIST
48766: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48767: LD_ADDR_VAR 0 57
48771: PUSH
48772: LD_INT 2
48774: NEG
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 3
48785: NEG
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 3
48796: NEG
48797: PUSH
48798: LD_INT 1
48800: NEG
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: LIST
48810: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48811: LD_ADDR_VAR 0 58
48815: PUSH
48816: LD_INT 2
48818: NEG
48819: PUSH
48820: LD_INT 3
48822: NEG
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 3
48830: NEG
48831: PUSH
48832: LD_INT 2
48834: NEG
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 3
48842: NEG
48843: PUSH
48844: LD_INT 3
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: LIST
48856: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48857: LD_ADDR_VAR 0 59
48861: PUSH
48862: LD_INT 1
48864: NEG
48865: PUSH
48866: LD_INT 2
48868: NEG
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: LD_INT 2
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: LD_INT 1
48890: NEG
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: LIST
48900: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48901: LD_ADDR_VAR 0 60
48905: PUSH
48906: LD_INT 1
48908: PUSH
48909: LD_INT 1
48911: NEG
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 2
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 2
48929: PUSH
48930: LD_INT 1
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: LIST
48941: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48942: LD_ADDR_VAR 0 61
48946: PUSH
48947: LD_INT 2
48949: PUSH
48950: LD_INT 1
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 2
48959: PUSH
48960: LD_INT 2
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 1
48969: PUSH
48970: LD_INT 2
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: LIST
48981: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48982: LD_ADDR_VAR 0 62
48986: PUSH
48987: LD_INT 1
48989: PUSH
48990: LD_INT 2
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: LD_INT 2
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: LIST
49022: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49023: LD_ADDR_VAR 0 63
49027: PUSH
49028: LD_INT 1
49030: NEG
49031: PUSH
49032: LD_INT 1
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 2
49041: NEG
49042: PUSH
49043: LD_INT 0
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 2
49052: NEG
49053: PUSH
49054: LD_INT 1
49056: NEG
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: LIST
49066: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49067: LD_ADDR_VAR 0 64
49071: PUSH
49072: LD_INT 1
49074: NEG
49075: PUSH
49076: LD_INT 2
49078: NEG
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 2
49086: NEG
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 2
49098: NEG
49099: PUSH
49100: LD_INT 2
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: LIST
49112: ST_TO_ADDR
// end ; 2 :
49113: GO 52379
49115: LD_INT 2
49117: DOUBLE
49118: EQUAL
49119: IFTRUE 49123
49121: GO 52378
49123: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49124: LD_ADDR_VAR 0 29
49128: PUSH
49129: LD_INT 4
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 4
49141: PUSH
49142: LD_INT 1
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 5
49152: PUSH
49153: LD_INT 0
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 5
49162: PUSH
49163: LD_INT 1
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 4
49172: PUSH
49173: LD_INT 1
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 3
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 3
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 3
49203: PUSH
49204: LD_INT 2
49206: NEG
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 5
49214: PUSH
49215: LD_INT 2
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 3
49224: PUSH
49225: LD_INT 3
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 3
49234: PUSH
49235: LD_INT 2
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 4
49244: PUSH
49245: LD_INT 3
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 4
49254: PUSH
49255: LD_INT 4
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 3
49264: PUSH
49265: LD_INT 4
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: LD_INT 3
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 2
49284: PUSH
49285: LD_INT 2
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 4
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 2
49304: PUSH
49305: LD_INT 4
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 0
49314: PUSH
49315: LD_INT 4
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 0
49324: PUSH
49325: LD_INT 3
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 1
49334: PUSH
49335: LD_INT 4
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 1
49344: PUSH
49345: LD_INT 5
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 0
49354: PUSH
49355: LD_INT 5
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: LD_INT 4
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 1
49375: NEG
49376: PUSH
49377: LD_INT 3
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 2
49386: PUSH
49387: LD_INT 5
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 2
49396: NEG
49397: PUSH
49398: LD_INT 3
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 3
49407: NEG
49408: PUSH
49409: LD_INT 0
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 3
49418: NEG
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 2
49430: NEG
49431: PUSH
49432: LD_INT 0
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 2
49441: NEG
49442: PUSH
49443: LD_INT 1
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 3
49452: NEG
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 4
49463: NEG
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 4
49474: NEG
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 4
49486: NEG
49487: PUSH
49488: LD_INT 2
49490: NEG
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 2
49498: NEG
49499: PUSH
49500: LD_INT 2
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 4
49509: NEG
49510: PUSH
49511: LD_INT 4
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 4
49521: NEG
49522: PUSH
49523: LD_INT 5
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 3
49533: NEG
49534: PUSH
49535: LD_INT 4
49537: NEG
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 3
49545: NEG
49546: PUSH
49547: LD_INT 3
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 4
49557: NEG
49558: PUSH
49559: LD_INT 3
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 5
49569: NEG
49570: PUSH
49571: LD_INT 4
49573: NEG
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 5
49581: NEG
49582: PUSH
49583: LD_INT 5
49585: NEG
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 3
49593: NEG
49594: PUSH
49595: LD_INT 5
49597: NEG
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 5
49605: NEG
49606: PUSH
49607: LD_INT 3
49609: NEG
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49662: LD_ADDR_VAR 0 30
49666: PUSH
49667: LD_INT 4
49669: PUSH
49670: LD_INT 4
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 4
49679: PUSH
49680: LD_INT 3
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 5
49689: PUSH
49690: LD_INT 4
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 5
49699: PUSH
49700: LD_INT 5
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 4
49709: PUSH
49710: LD_INT 5
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 3
49719: PUSH
49720: LD_INT 4
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 3
49729: PUSH
49730: LD_INT 3
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 5
49739: PUSH
49740: LD_INT 3
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 3
49749: PUSH
49750: LD_INT 5
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: LD_INT 3
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: LD_INT 2
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: LD_INT 3
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: PUSH
49790: LD_INT 4
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: LD_INT 4
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: LD_INT 3
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: LD_INT 2
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 2
49831: PUSH
49832: LD_INT 4
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 2
49841: NEG
49842: PUSH
49843: LD_INT 2
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 4
49852: NEG
49853: PUSH
49854: LD_INT 0
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 4
49863: NEG
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 3
49875: NEG
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 3
49886: NEG
49887: PUSH
49888: LD_INT 1
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 4
49897: NEG
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 5
49908: NEG
49909: PUSH
49910: LD_INT 0
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 5
49919: NEG
49920: PUSH
49921: LD_INT 1
49923: NEG
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 5
49931: NEG
49932: PUSH
49933: LD_INT 2
49935: NEG
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 3
49943: NEG
49944: PUSH
49945: LD_INT 2
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 3
49954: NEG
49955: PUSH
49956: LD_INT 3
49958: NEG
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 3
49966: NEG
49967: PUSH
49968: LD_INT 4
49970: NEG
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 2
49978: NEG
49979: PUSH
49980: LD_INT 3
49982: NEG
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 2
49990: NEG
49991: PUSH
49992: LD_INT 2
49994: NEG
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 3
50002: NEG
50003: PUSH
50004: LD_INT 2
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 4
50014: NEG
50015: PUSH
50016: LD_INT 3
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 4
50026: NEG
50027: PUSH
50028: LD_INT 4
50030: NEG
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 2
50038: NEG
50039: PUSH
50040: LD_INT 4
50042: NEG
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 4
50050: NEG
50051: PUSH
50052: LD_INT 2
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: LD_INT 4
50065: NEG
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: LD_INT 5
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 1
50084: PUSH
50085: LD_INT 4
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 1
50095: PUSH
50096: LD_INT 3
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: LD_INT 3
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: NEG
50118: PUSH
50119: LD_INT 4
50121: NEG
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 1
50129: NEG
50130: PUSH
50131: LD_INT 5
50133: NEG
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 2
50141: PUSH
50142: LD_INT 3
50144: NEG
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 2
50152: NEG
50153: PUSH
50154: LD_INT 5
50156: NEG
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50209: LD_ADDR_VAR 0 31
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: LD_INT 4
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: LD_INT 3
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: LD_INT 4
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: LD_INT 5
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 0
50256: PUSH
50257: LD_INT 5
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: LD_INT 4
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: LD_INT 3
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 2
50288: PUSH
50289: LD_INT 5
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 2
50298: NEG
50299: PUSH
50300: LD_INT 3
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 3
50309: NEG
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 3
50320: NEG
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 2
50332: NEG
50333: PUSH
50334: LD_INT 0
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 2
50343: NEG
50344: PUSH
50345: LD_INT 1
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 3
50354: NEG
50355: PUSH
50356: LD_INT 1
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 4
50365: NEG
50366: PUSH
50367: LD_INT 0
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 4
50376: NEG
50377: PUSH
50378: LD_INT 1
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 4
50388: NEG
50389: PUSH
50390: LD_INT 2
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 2
50400: NEG
50401: PUSH
50402: LD_INT 2
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 4
50411: NEG
50412: PUSH
50413: LD_INT 4
50415: NEG
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 4
50423: NEG
50424: PUSH
50425: LD_INT 5
50427: NEG
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 3
50435: NEG
50436: PUSH
50437: LD_INT 4
50439: NEG
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 3
50447: NEG
50448: PUSH
50449: LD_INT 3
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 4
50459: NEG
50460: PUSH
50461: LD_INT 3
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 5
50471: NEG
50472: PUSH
50473: LD_INT 4
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 5
50483: NEG
50484: PUSH
50485: LD_INT 5
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 3
50495: NEG
50496: PUSH
50497: LD_INT 5
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 5
50507: NEG
50508: PUSH
50509: LD_INT 3
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 0
50519: PUSH
50520: LD_INT 3
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: LD_INT 4
50533: NEG
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 1
50541: PUSH
50542: LD_INT 3
50544: NEG
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 1
50552: PUSH
50553: LD_INT 2
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: LD_INT 2
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: LD_INT 3
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 1
50586: NEG
50587: PUSH
50588: LD_INT 4
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 2
50598: PUSH
50599: LD_INT 2
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 2
50609: NEG
50610: PUSH
50611: LD_INT 4
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 4
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 4
50631: PUSH
50632: LD_INT 1
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 5
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 5
50652: PUSH
50653: LD_INT 1
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 4
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 3
50672: PUSH
50673: LD_INT 0
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 3
50682: PUSH
50683: LD_INT 1
50685: NEG
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 3
50693: PUSH
50694: LD_INT 2
50696: NEG
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 5
50704: PUSH
50705: LD_INT 2
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50759: LD_ADDR_VAR 0 32
50763: PUSH
50764: LD_INT 4
50766: NEG
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 4
50777: NEG
50778: PUSH
50779: LD_INT 1
50781: NEG
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 3
50789: NEG
50790: PUSH
50791: LD_INT 0
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 3
50800: NEG
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 4
50811: NEG
50812: PUSH
50813: LD_INT 1
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 5
50822: NEG
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 5
50833: NEG
50834: PUSH
50835: LD_INT 1
50837: NEG
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 5
50845: NEG
50846: PUSH
50847: LD_INT 2
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 3
50857: NEG
50858: PUSH
50859: LD_INT 2
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 3
50868: NEG
50869: PUSH
50870: LD_INT 3
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 3
50880: NEG
50881: PUSH
50882: LD_INT 4
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 2
50892: NEG
50893: PUSH
50894: LD_INT 3
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 2
50904: NEG
50905: PUSH
50906: LD_INT 2
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 3
50916: NEG
50917: PUSH
50918: LD_INT 2
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 4
50928: NEG
50929: PUSH
50930: LD_INT 3
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 4
50940: NEG
50941: PUSH
50942: LD_INT 4
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 2
50952: NEG
50953: PUSH
50954: LD_INT 4
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 4
50964: NEG
50965: PUSH
50966: LD_INT 2
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 0
50976: PUSH
50977: LD_INT 4
50979: NEG
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 0
50987: PUSH
50988: LD_INT 5
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 1
50998: PUSH
50999: LD_INT 4
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 1
51009: PUSH
51010: LD_INT 3
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: LD_INT 3
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 1
51031: NEG
51032: PUSH
51033: LD_INT 4
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 1
51043: NEG
51044: PUSH
51045: LD_INT 5
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 2
51055: PUSH
51056: LD_INT 3
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 2
51066: NEG
51067: PUSH
51068: LD_INT 5
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 3
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 3
51088: PUSH
51089: LD_INT 1
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 4
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 4
51109: PUSH
51110: LD_INT 1
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 3
51119: PUSH
51120: LD_INT 1
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 2
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 2
51139: PUSH
51140: LD_INT 1
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 2
51150: PUSH
51151: LD_INT 2
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 4
51161: PUSH
51162: LD_INT 2
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 4
51171: PUSH
51172: LD_INT 4
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 4
51181: PUSH
51182: LD_INT 3
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 5
51191: PUSH
51192: LD_INT 4
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 5
51201: PUSH
51202: LD_INT 5
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 4
51211: PUSH
51212: LD_INT 5
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 3
51221: PUSH
51222: LD_INT 4
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 3
51231: PUSH
51232: LD_INT 3
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 5
51241: PUSH
51242: LD_INT 3
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 3
51251: PUSH
51252: LD_INT 5
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51306: LD_ADDR_VAR 0 33
51310: PUSH
51311: LD_INT 4
51313: NEG
51314: PUSH
51315: LD_INT 4
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 4
51325: NEG
51326: PUSH
51327: LD_INT 5
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 3
51337: NEG
51338: PUSH
51339: LD_INT 4
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 3
51349: NEG
51350: PUSH
51351: LD_INT 3
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 4
51361: NEG
51362: PUSH
51363: LD_INT 3
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 5
51373: NEG
51374: PUSH
51375: LD_INT 4
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 5
51385: NEG
51386: PUSH
51387: LD_INT 5
51389: NEG
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 3
51397: NEG
51398: PUSH
51399: LD_INT 5
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 5
51409: NEG
51410: PUSH
51411: LD_INT 3
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: LD_INT 3
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: LD_INT 4
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 1
51443: PUSH
51444: LD_INT 3
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: LD_INT 2
51457: NEG
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: LD_INT 2
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 1
51476: NEG
51477: PUSH
51478: LD_INT 3
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: LD_INT 4
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 2
51500: PUSH
51501: LD_INT 2
51503: NEG
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 2
51511: NEG
51512: PUSH
51513: LD_INT 4
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 4
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 4
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 5
51544: PUSH
51545: LD_INT 0
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 5
51554: PUSH
51555: LD_INT 1
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 4
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 3
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 3
51584: PUSH
51585: LD_INT 1
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 3
51595: PUSH
51596: LD_INT 2
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 5
51606: PUSH
51607: LD_INT 2
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 3
51616: PUSH
51617: LD_INT 3
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 3
51626: PUSH
51627: LD_INT 2
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 4
51636: PUSH
51637: LD_INT 3
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 4
51646: PUSH
51647: LD_INT 4
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 3
51656: PUSH
51657: LD_INT 4
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 2
51666: PUSH
51667: LD_INT 3
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 2
51676: PUSH
51677: LD_INT 2
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 4
51686: PUSH
51687: LD_INT 2
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 2
51696: PUSH
51697: LD_INT 4
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: LD_INT 4
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 0
51716: PUSH
51717: LD_INT 3
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 1
51726: PUSH
51727: LD_INT 4
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 1
51736: PUSH
51737: LD_INT 5
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 0
51746: PUSH
51747: LD_INT 5
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 1
51756: NEG
51757: PUSH
51758: LD_INT 4
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 1
51767: NEG
51768: PUSH
51769: LD_INT 3
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 2
51778: PUSH
51779: LD_INT 5
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 2
51788: NEG
51789: PUSH
51790: LD_INT 3
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51844: LD_ADDR_VAR 0 34
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: LD_INT 4
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: LD_INT 5
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 1
51873: PUSH
51874: LD_INT 4
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: LD_INT 3
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: LD_INT 3
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 1
51906: NEG
51907: PUSH
51908: LD_INT 4
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: LD_INT 5
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 2
51930: PUSH
51931: LD_INT 3
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 2
51941: NEG
51942: PUSH
51943: LD_INT 5
51945: NEG
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 3
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 3
51963: PUSH
51964: LD_INT 1
51966: NEG
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 4
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 4
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 3
51994: PUSH
51995: LD_INT 1
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 2
52004: PUSH
52005: LD_INT 0
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 2
52014: PUSH
52015: LD_INT 1
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 2
52025: PUSH
52026: LD_INT 2
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 4
52036: PUSH
52037: LD_INT 2
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 4
52046: PUSH
52047: LD_INT 4
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 4
52056: PUSH
52057: LD_INT 3
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 5
52066: PUSH
52067: LD_INT 4
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 5
52076: PUSH
52077: LD_INT 5
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 4
52086: PUSH
52087: LD_INT 5
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 3
52096: PUSH
52097: LD_INT 4
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 3
52106: PUSH
52107: LD_INT 3
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 5
52116: PUSH
52117: LD_INT 3
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 3
52126: PUSH
52127: LD_INT 5
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: LD_INT 3
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: LD_INT 2
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: LD_INT 3
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 1
52166: PUSH
52167: LD_INT 4
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 0
52176: PUSH
52177: LD_INT 4
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 1
52186: NEG
52187: PUSH
52188: LD_INT 3
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 1
52197: NEG
52198: PUSH
52199: LD_INT 2
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 2
52208: PUSH
52209: LD_INT 4
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 2
52218: NEG
52219: PUSH
52220: LD_INT 2
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 4
52229: NEG
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 4
52240: NEG
52241: PUSH
52242: LD_INT 1
52244: NEG
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 3
52252: NEG
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 3
52263: NEG
52264: PUSH
52265: LD_INT 1
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 4
52274: NEG
52275: PUSH
52276: LD_INT 1
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 5
52285: NEG
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 5
52296: NEG
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 5
52308: NEG
52309: PUSH
52310: LD_INT 2
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 3
52320: NEG
52321: PUSH
52322: LD_INT 2
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: ST_TO_ADDR
// end ; end ;
52376: GO 52379
52378: POP
// case btype of b_depot , b_warehouse :
52379: LD_VAR 0 1
52383: PUSH
52384: LD_INT 0
52386: DOUBLE
52387: EQUAL
52388: IFTRUE 52398
52390: LD_INT 1
52392: DOUBLE
52393: EQUAL
52394: IFTRUE 52398
52396: GO 52599
52398: POP
// case nation of nation_american :
52399: LD_VAR 0 5
52403: PUSH
52404: LD_INT 1
52406: DOUBLE
52407: EQUAL
52408: IFTRUE 52412
52410: GO 52468
52412: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52413: LD_ADDR_VAR 0 9
52417: PUSH
52418: LD_VAR 0 11
52422: PUSH
52423: LD_VAR 0 12
52427: PUSH
52428: LD_VAR 0 13
52432: PUSH
52433: LD_VAR 0 14
52437: PUSH
52438: LD_VAR 0 15
52442: PUSH
52443: LD_VAR 0 16
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: PUSH
52456: LD_VAR 0 4
52460: PUSH
52461: LD_INT 1
52463: PLUS
52464: ARRAY
52465: ST_TO_ADDR
52466: GO 52597
52468: LD_INT 2
52470: DOUBLE
52471: EQUAL
52472: IFTRUE 52476
52474: GO 52532
52476: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52477: LD_ADDR_VAR 0 9
52481: PUSH
52482: LD_VAR 0 17
52486: PUSH
52487: LD_VAR 0 18
52491: PUSH
52492: LD_VAR 0 19
52496: PUSH
52497: LD_VAR 0 20
52501: PUSH
52502: LD_VAR 0 21
52506: PUSH
52507: LD_VAR 0 22
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: PUSH
52520: LD_VAR 0 4
52524: PUSH
52525: LD_INT 1
52527: PLUS
52528: ARRAY
52529: ST_TO_ADDR
52530: GO 52597
52532: LD_INT 3
52534: DOUBLE
52535: EQUAL
52536: IFTRUE 52540
52538: GO 52596
52540: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52541: LD_ADDR_VAR 0 9
52545: PUSH
52546: LD_VAR 0 23
52550: PUSH
52551: LD_VAR 0 24
52555: PUSH
52556: LD_VAR 0 25
52560: PUSH
52561: LD_VAR 0 26
52565: PUSH
52566: LD_VAR 0 27
52570: PUSH
52571: LD_VAR 0 28
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: PUSH
52584: LD_VAR 0 4
52588: PUSH
52589: LD_INT 1
52591: PLUS
52592: ARRAY
52593: ST_TO_ADDR
52594: GO 52597
52596: POP
52597: GO 53152
52599: LD_INT 2
52601: DOUBLE
52602: EQUAL
52603: IFTRUE 52613
52605: LD_INT 3
52607: DOUBLE
52608: EQUAL
52609: IFTRUE 52613
52611: GO 52669
52613: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52614: LD_ADDR_VAR 0 9
52618: PUSH
52619: LD_VAR 0 29
52623: PUSH
52624: LD_VAR 0 30
52628: PUSH
52629: LD_VAR 0 31
52633: PUSH
52634: LD_VAR 0 32
52638: PUSH
52639: LD_VAR 0 33
52643: PUSH
52644: LD_VAR 0 34
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: PUSH
52657: LD_VAR 0 4
52661: PUSH
52662: LD_INT 1
52664: PLUS
52665: ARRAY
52666: ST_TO_ADDR
52667: GO 53152
52669: LD_INT 16
52671: DOUBLE
52672: EQUAL
52673: IFTRUE 52731
52675: LD_INT 17
52677: DOUBLE
52678: EQUAL
52679: IFTRUE 52731
52681: LD_INT 18
52683: DOUBLE
52684: EQUAL
52685: IFTRUE 52731
52687: LD_INT 19
52689: DOUBLE
52690: EQUAL
52691: IFTRUE 52731
52693: LD_INT 22
52695: DOUBLE
52696: EQUAL
52697: IFTRUE 52731
52699: LD_INT 20
52701: DOUBLE
52702: EQUAL
52703: IFTRUE 52731
52705: LD_INT 21
52707: DOUBLE
52708: EQUAL
52709: IFTRUE 52731
52711: LD_INT 23
52713: DOUBLE
52714: EQUAL
52715: IFTRUE 52731
52717: LD_INT 24
52719: DOUBLE
52720: EQUAL
52721: IFTRUE 52731
52723: LD_INT 25
52725: DOUBLE
52726: EQUAL
52727: IFTRUE 52731
52729: GO 52787
52731: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52732: LD_ADDR_VAR 0 9
52736: PUSH
52737: LD_VAR 0 35
52741: PUSH
52742: LD_VAR 0 36
52746: PUSH
52747: LD_VAR 0 37
52751: PUSH
52752: LD_VAR 0 38
52756: PUSH
52757: LD_VAR 0 39
52761: PUSH
52762: LD_VAR 0 40
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: PUSH
52775: LD_VAR 0 4
52779: PUSH
52780: LD_INT 1
52782: PLUS
52783: ARRAY
52784: ST_TO_ADDR
52785: GO 53152
52787: LD_INT 6
52789: DOUBLE
52790: EQUAL
52791: IFTRUE 52843
52793: LD_INT 7
52795: DOUBLE
52796: EQUAL
52797: IFTRUE 52843
52799: LD_INT 8
52801: DOUBLE
52802: EQUAL
52803: IFTRUE 52843
52805: LD_INT 13
52807: DOUBLE
52808: EQUAL
52809: IFTRUE 52843
52811: LD_INT 12
52813: DOUBLE
52814: EQUAL
52815: IFTRUE 52843
52817: LD_INT 15
52819: DOUBLE
52820: EQUAL
52821: IFTRUE 52843
52823: LD_INT 11
52825: DOUBLE
52826: EQUAL
52827: IFTRUE 52843
52829: LD_INT 14
52831: DOUBLE
52832: EQUAL
52833: IFTRUE 52843
52835: LD_INT 10
52837: DOUBLE
52838: EQUAL
52839: IFTRUE 52843
52841: GO 52899
52843: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52844: LD_ADDR_VAR 0 9
52848: PUSH
52849: LD_VAR 0 41
52853: PUSH
52854: LD_VAR 0 42
52858: PUSH
52859: LD_VAR 0 43
52863: PUSH
52864: LD_VAR 0 44
52868: PUSH
52869: LD_VAR 0 45
52873: PUSH
52874: LD_VAR 0 46
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: PUSH
52887: LD_VAR 0 4
52891: PUSH
52892: LD_INT 1
52894: PLUS
52895: ARRAY
52896: ST_TO_ADDR
52897: GO 53152
52899: LD_INT 36
52901: DOUBLE
52902: EQUAL
52903: IFTRUE 52907
52905: GO 52963
52907: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52908: LD_ADDR_VAR 0 9
52912: PUSH
52913: LD_VAR 0 47
52917: PUSH
52918: LD_VAR 0 48
52922: PUSH
52923: LD_VAR 0 49
52927: PUSH
52928: LD_VAR 0 50
52932: PUSH
52933: LD_VAR 0 51
52937: PUSH
52938: LD_VAR 0 52
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: PUSH
52951: LD_VAR 0 4
52955: PUSH
52956: LD_INT 1
52958: PLUS
52959: ARRAY
52960: ST_TO_ADDR
52961: GO 53152
52963: LD_INT 4
52965: DOUBLE
52966: EQUAL
52967: IFTRUE 52989
52969: LD_INT 5
52971: DOUBLE
52972: EQUAL
52973: IFTRUE 52989
52975: LD_INT 34
52977: DOUBLE
52978: EQUAL
52979: IFTRUE 52989
52981: LD_INT 37
52983: DOUBLE
52984: EQUAL
52985: IFTRUE 52989
52987: GO 53045
52989: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52990: LD_ADDR_VAR 0 9
52994: PUSH
52995: LD_VAR 0 53
52999: PUSH
53000: LD_VAR 0 54
53004: PUSH
53005: LD_VAR 0 55
53009: PUSH
53010: LD_VAR 0 56
53014: PUSH
53015: LD_VAR 0 57
53019: PUSH
53020: LD_VAR 0 58
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: PUSH
53033: LD_VAR 0 4
53037: PUSH
53038: LD_INT 1
53040: PLUS
53041: ARRAY
53042: ST_TO_ADDR
53043: GO 53152
53045: LD_INT 31
53047: DOUBLE
53048: EQUAL
53049: IFTRUE 53095
53051: LD_INT 32
53053: DOUBLE
53054: EQUAL
53055: IFTRUE 53095
53057: LD_INT 33
53059: DOUBLE
53060: EQUAL
53061: IFTRUE 53095
53063: LD_INT 27
53065: DOUBLE
53066: EQUAL
53067: IFTRUE 53095
53069: LD_INT 26
53071: DOUBLE
53072: EQUAL
53073: IFTRUE 53095
53075: LD_INT 28
53077: DOUBLE
53078: EQUAL
53079: IFTRUE 53095
53081: LD_INT 29
53083: DOUBLE
53084: EQUAL
53085: IFTRUE 53095
53087: LD_INT 30
53089: DOUBLE
53090: EQUAL
53091: IFTRUE 53095
53093: GO 53151
53095: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53096: LD_ADDR_VAR 0 9
53100: PUSH
53101: LD_VAR 0 59
53105: PUSH
53106: LD_VAR 0 60
53110: PUSH
53111: LD_VAR 0 61
53115: PUSH
53116: LD_VAR 0 62
53120: PUSH
53121: LD_VAR 0 63
53125: PUSH
53126: LD_VAR 0 64
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: PUSH
53139: LD_VAR 0 4
53143: PUSH
53144: LD_INT 1
53146: PLUS
53147: ARRAY
53148: ST_TO_ADDR
53149: GO 53152
53151: POP
// temp_list2 = [ ] ;
53152: LD_ADDR_VAR 0 10
53156: PUSH
53157: EMPTY
53158: ST_TO_ADDR
// for i in temp_list do
53159: LD_ADDR_VAR 0 8
53163: PUSH
53164: LD_VAR 0 9
53168: PUSH
53169: FOR_IN
53170: IFFALSE 53222
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53172: LD_ADDR_VAR 0 10
53176: PUSH
53177: LD_VAR 0 10
53181: PUSH
53182: LD_VAR 0 8
53186: PUSH
53187: LD_INT 1
53189: ARRAY
53190: PUSH
53191: LD_VAR 0 2
53195: PLUS
53196: PUSH
53197: LD_VAR 0 8
53201: PUSH
53202: LD_INT 2
53204: ARRAY
53205: PUSH
53206: LD_VAR 0 3
53210: PLUS
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: EMPTY
53217: LIST
53218: ADD
53219: ST_TO_ADDR
53220: GO 53169
53222: POP
53223: POP
// result = temp_list2 ;
53224: LD_ADDR_VAR 0 7
53228: PUSH
53229: LD_VAR 0 10
53233: ST_TO_ADDR
// end ;
53234: LD_VAR 0 7
53238: RET
// export function EnemyInRange ( unit , dist ) ; begin
53239: LD_INT 0
53241: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53242: LD_ADDR_VAR 0 3
53246: PUSH
53247: LD_VAR 0 1
53251: PPUSH
53252: CALL_OW 255
53256: PPUSH
53257: LD_VAR 0 1
53261: PPUSH
53262: CALL_OW 250
53266: PPUSH
53267: LD_VAR 0 1
53271: PPUSH
53272: CALL_OW 251
53276: PPUSH
53277: LD_VAR 0 2
53281: PPUSH
53282: CALL 26635 0 4
53286: PUSH
53287: LD_INT 4
53289: ARRAY
53290: ST_TO_ADDR
// end ;
53291: LD_VAR 0 3
53295: RET
// export function PlayerSeeMe ( unit ) ; begin
53296: LD_INT 0
53298: PPUSH
// result := See ( your_side , unit ) ;
53299: LD_ADDR_VAR 0 2
53303: PUSH
53304: LD_OWVAR 2
53308: PPUSH
53309: LD_VAR 0 1
53313: PPUSH
53314: CALL_OW 292
53318: ST_TO_ADDR
// end ;
53319: LD_VAR 0 2
53323: RET
// export function ReverseDir ( unit ) ; begin
53324: LD_INT 0
53326: PPUSH
// if not unit then
53327: LD_VAR 0 1
53331: NOT
53332: IFFALSE 53336
// exit ;
53334: GO 53359
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53336: LD_ADDR_VAR 0 2
53340: PUSH
53341: LD_VAR 0 1
53345: PPUSH
53346: CALL_OW 254
53350: PUSH
53351: LD_INT 3
53353: PLUS
53354: PUSH
53355: LD_INT 6
53357: MOD
53358: ST_TO_ADDR
// end ;
53359: LD_VAR 0 2
53363: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53364: LD_INT 0
53366: PPUSH
53367: PPUSH
53368: PPUSH
53369: PPUSH
53370: PPUSH
// if not hexes then
53371: LD_VAR 0 2
53375: NOT
53376: IFFALSE 53380
// exit ;
53378: GO 53528
// dist := 9999 ;
53380: LD_ADDR_VAR 0 5
53384: PUSH
53385: LD_INT 9999
53387: ST_TO_ADDR
// for i = 1 to hexes do
53388: LD_ADDR_VAR 0 4
53392: PUSH
53393: DOUBLE
53394: LD_INT 1
53396: DEC
53397: ST_TO_ADDR
53398: LD_VAR 0 2
53402: PUSH
53403: FOR_TO
53404: IFFALSE 53516
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53406: LD_VAR 0 1
53410: PPUSH
53411: LD_VAR 0 2
53415: PUSH
53416: LD_VAR 0 4
53420: ARRAY
53421: PUSH
53422: LD_INT 1
53424: ARRAY
53425: PPUSH
53426: LD_VAR 0 2
53430: PUSH
53431: LD_VAR 0 4
53435: ARRAY
53436: PUSH
53437: LD_INT 2
53439: ARRAY
53440: PPUSH
53441: CALL_OW 297
53445: PUSH
53446: LD_VAR 0 5
53450: LESS
53451: IFFALSE 53514
// begin hex := hexes [ i ] ;
53453: LD_ADDR_VAR 0 7
53457: PUSH
53458: LD_VAR 0 2
53462: PUSH
53463: LD_VAR 0 4
53467: ARRAY
53468: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53469: LD_ADDR_VAR 0 5
53473: PUSH
53474: LD_VAR 0 1
53478: PPUSH
53479: LD_VAR 0 2
53483: PUSH
53484: LD_VAR 0 4
53488: ARRAY
53489: PUSH
53490: LD_INT 1
53492: ARRAY
53493: PPUSH
53494: LD_VAR 0 2
53498: PUSH
53499: LD_VAR 0 4
53503: ARRAY
53504: PUSH
53505: LD_INT 2
53507: ARRAY
53508: PPUSH
53509: CALL_OW 297
53513: ST_TO_ADDR
// end ; end ;
53514: GO 53403
53516: POP
53517: POP
// result := hex ;
53518: LD_ADDR_VAR 0 3
53522: PUSH
53523: LD_VAR 0 7
53527: ST_TO_ADDR
// end ;
53528: LD_VAR 0 3
53532: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53533: LD_INT 0
53535: PPUSH
53536: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53537: LD_VAR 0 1
53541: NOT
53542: PUSH
53543: LD_VAR 0 1
53547: PUSH
53548: LD_INT 21
53550: PUSH
53551: LD_INT 2
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 23
53560: PUSH
53561: LD_INT 2
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PPUSH
53572: CALL_OW 69
53576: IN
53577: NOT
53578: OR
53579: IFFALSE 53583
// exit ;
53581: GO 53630
// for i = 1 to 3 do
53583: LD_ADDR_VAR 0 3
53587: PUSH
53588: DOUBLE
53589: LD_INT 1
53591: DEC
53592: ST_TO_ADDR
53593: LD_INT 3
53595: PUSH
53596: FOR_TO
53597: IFFALSE 53628
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53599: LD_VAR 0 1
53603: PPUSH
53604: CALL_OW 250
53608: PPUSH
53609: LD_VAR 0 1
53613: PPUSH
53614: CALL_OW 251
53618: PPUSH
53619: LD_INT 1
53621: PPUSH
53622: CALL_OW 453
53626: GO 53596
53628: POP
53629: POP
// end ;
53630: LD_VAR 0 2
53634: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53635: LD_INT 0
53637: PPUSH
53638: PPUSH
53639: PPUSH
53640: PPUSH
53641: PPUSH
53642: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53643: LD_VAR 0 1
53647: NOT
53648: PUSH
53649: LD_VAR 0 2
53653: NOT
53654: OR
53655: PUSH
53656: LD_VAR 0 1
53660: PPUSH
53661: CALL_OW 314
53665: OR
53666: IFFALSE 53670
// exit ;
53668: GO 54111
// x := GetX ( enemy_unit ) ;
53670: LD_ADDR_VAR 0 7
53674: PUSH
53675: LD_VAR 0 2
53679: PPUSH
53680: CALL_OW 250
53684: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53685: LD_ADDR_VAR 0 8
53689: PUSH
53690: LD_VAR 0 2
53694: PPUSH
53695: CALL_OW 251
53699: ST_TO_ADDR
// if not x or not y then
53700: LD_VAR 0 7
53704: NOT
53705: PUSH
53706: LD_VAR 0 8
53710: NOT
53711: OR
53712: IFFALSE 53716
// exit ;
53714: GO 54111
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53716: LD_ADDR_VAR 0 6
53720: PUSH
53721: LD_VAR 0 7
53725: PPUSH
53726: LD_INT 0
53728: PPUSH
53729: LD_INT 4
53731: PPUSH
53732: CALL_OW 272
53736: PUSH
53737: LD_VAR 0 8
53741: PPUSH
53742: LD_INT 0
53744: PPUSH
53745: LD_INT 4
53747: PPUSH
53748: CALL_OW 273
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_VAR 0 7
53761: PPUSH
53762: LD_INT 1
53764: PPUSH
53765: LD_INT 4
53767: PPUSH
53768: CALL_OW 272
53772: PUSH
53773: LD_VAR 0 8
53777: PPUSH
53778: LD_INT 1
53780: PPUSH
53781: LD_INT 4
53783: PPUSH
53784: CALL_OW 273
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_VAR 0 7
53797: PPUSH
53798: LD_INT 2
53800: PPUSH
53801: LD_INT 4
53803: PPUSH
53804: CALL_OW 272
53808: PUSH
53809: LD_VAR 0 8
53813: PPUSH
53814: LD_INT 2
53816: PPUSH
53817: LD_INT 4
53819: PPUSH
53820: CALL_OW 273
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_VAR 0 7
53833: PPUSH
53834: LD_INT 3
53836: PPUSH
53837: LD_INT 4
53839: PPUSH
53840: CALL_OW 272
53844: PUSH
53845: LD_VAR 0 8
53849: PPUSH
53850: LD_INT 3
53852: PPUSH
53853: LD_INT 4
53855: PPUSH
53856: CALL_OW 273
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_VAR 0 7
53869: PPUSH
53870: LD_INT 4
53872: PPUSH
53873: LD_INT 4
53875: PPUSH
53876: CALL_OW 272
53880: PUSH
53881: LD_VAR 0 8
53885: PPUSH
53886: LD_INT 4
53888: PPUSH
53889: LD_INT 4
53891: PPUSH
53892: CALL_OW 273
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_VAR 0 7
53905: PPUSH
53906: LD_INT 5
53908: PPUSH
53909: LD_INT 4
53911: PPUSH
53912: CALL_OW 272
53916: PUSH
53917: LD_VAR 0 8
53921: PPUSH
53922: LD_INT 5
53924: PPUSH
53925: LD_INT 4
53927: PPUSH
53928: CALL_OW 273
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: ST_TO_ADDR
// for i = tmp downto 1 do
53945: LD_ADDR_VAR 0 4
53949: PUSH
53950: DOUBLE
53951: LD_VAR 0 6
53955: INC
53956: ST_TO_ADDR
53957: LD_INT 1
53959: PUSH
53960: FOR_DOWNTO
53961: IFFALSE 54062
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53963: LD_VAR 0 6
53967: PUSH
53968: LD_VAR 0 4
53972: ARRAY
53973: PUSH
53974: LD_INT 1
53976: ARRAY
53977: PPUSH
53978: LD_VAR 0 6
53982: PUSH
53983: LD_VAR 0 4
53987: ARRAY
53988: PUSH
53989: LD_INT 2
53991: ARRAY
53992: PPUSH
53993: CALL_OW 488
53997: NOT
53998: PUSH
53999: LD_VAR 0 6
54003: PUSH
54004: LD_VAR 0 4
54008: ARRAY
54009: PUSH
54010: LD_INT 1
54012: ARRAY
54013: PPUSH
54014: LD_VAR 0 6
54018: PUSH
54019: LD_VAR 0 4
54023: ARRAY
54024: PUSH
54025: LD_INT 2
54027: ARRAY
54028: PPUSH
54029: CALL_OW 428
54033: PUSH
54034: LD_INT 0
54036: NONEQUAL
54037: OR
54038: IFFALSE 54060
// tmp := Delete ( tmp , i ) ;
54040: LD_ADDR_VAR 0 6
54044: PUSH
54045: LD_VAR 0 6
54049: PPUSH
54050: LD_VAR 0 4
54054: PPUSH
54055: CALL_OW 3
54059: ST_TO_ADDR
54060: GO 53960
54062: POP
54063: POP
// j := GetClosestHex ( unit , tmp ) ;
54064: LD_ADDR_VAR 0 5
54068: PUSH
54069: LD_VAR 0 1
54073: PPUSH
54074: LD_VAR 0 6
54078: PPUSH
54079: CALL 53364 0 2
54083: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54084: LD_VAR 0 1
54088: PPUSH
54089: LD_VAR 0 5
54093: PUSH
54094: LD_INT 1
54096: ARRAY
54097: PPUSH
54098: LD_VAR 0 5
54102: PUSH
54103: LD_INT 2
54105: ARRAY
54106: PPUSH
54107: CALL_OW 111
// end ;
54111: LD_VAR 0 3
54115: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54116: LD_INT 0
54118: PPUSH
54119: PPUSH
54120: PPUSH
// uc_side = 0 ;
54121: LD_ADDR_OWVAR 20
54125: PUSH
54126: LD_INT 0
54128: ST_TO_ADDR
// uc_nation = 0 ;
54129: LD_ADDR_OWVAR 21
54133: PUSH
54134: LD_INT 0
54136: ST_TO_ADDR
// InitHc_All ( ) ;
54137: CALL_OW 584
// InitVc ;
54141: CALL_OW 20
// if mastodonts then
54145: LD_VAR 0 6
54149: IFFALSE 54216
// for i = 1 to mastodonts do
54151: LD_ADDR_VAR 0 11
54155: PUSH
54156: DOUBLE
54157: LD_INT 1
54159: DEC
54160: ST_TO_ADDR
54161: LD_VAR 0 6
54165: PUSH
54166: FOR_TO
54167: IFFALSE 54214
// begin vc_chassis := 31 ;
54169: LD_ADDR_OWVAR 37
54173: PUSH
54174: LD_INT 31
54176: ST_TO_ADDR
// vc_control := control_rider ;
54177: LD_ADDR_OWVAR 38
54181: PUSH
54182: LD_INT 4
54184: ST_TO_ADDR
// animal := CreateVehicle ;
54185: LD_ADDR_VAR 0 12
54189: PUSH
54190: CALL_OW 45
54194: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54195: LD_VAR 0 12
54199: PPUSH
54200: LD_VAR 0 8
54204: PPUSH
54205: LD_INT 0
54207: PPUSH
54208: CALL 56351 0 3
// end ;
54212: GO 54166
54214: POP
54215: POP
// if horses then
54216: LD_VAR 0 5
54220: IFFALSE 54287
// for i = 1 to horses do
54222: LD_ADDR_VAR 0 11
54226: PUSH
54227: DOUBLE
54228: LD_INT 1
54230: DEC
54231: ST_TO_ADDR
54232: LD_VAR 0 5
54236: PUSH
54237: FOR_TO
54238: IFFALSE 54285
// begin hc_class := 21 ;
54240: LD_ADDR_OWVAR 28
54244: PUSH
54245: LD_INT 21
54247: ST_TO_ADDR
// hc_gallery :=  ;
54248: LD_ADDR_OWVAR 33
54252: PUSH
54253: LD_STRING 
54255: ST_TO_ADDR
// animal := CreateHuman ;
54256: LD_ADDR_VAR 0 12
54260: PUSH
54261: CALL_OW 44
54265: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54266: LD_VAR 0 12
54270: PPUSH
54271: LD_VAR 0 8
54275: PPUSH
54276: LD_INT 0
54278: PPUSH
54279: CALL 56351 0 3
// end ;
54283: GO 54237
54285: POP
54286: POP
// if birds then
54287: LD_VAR 0 1
54291: IFFALSE 54358
// for i = 1 to birds do
54293: LD_ADDR_VAR 0 11
54297: PUSH
54298: DOUBLE
54299: LD_INT 1
54301: DEC
54302: ST_TO_ADDR
54303: LD_VAR 0 1
54307: PUSH
54308: FOR_TO
54309: IFFALSE 54356
// begin hc_class = 18 ;
54311: LD_ADDR_OWVAR 28
54315: PUSH
54316: LD_INT 18
54318: ST_TO_ADDR
// hc_gallery =  ;
54319: LD_ADDR_OWVAR 33
54323: PUSH
54324: LD_STRING 
54326: ST_TO_ADDR
// animal := CreateHuman ;
54327: LD_ADDR_VAR 0 12
54331: PUSH
54332: CALL_OW 44
54336: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54337: LD_VAR 0 12
54341: PPUSH
54342: LD_VAR 0 8
54346: PPUSH
54347: LD_INT 0
54349: PPUSH
54350: CALL 56351 0 3
// end ;
54354: GO 54308
54356: POP
54357: POP
// if tigers then
54358: LD_VAR 0 2
54362: IFFALSE 54446
// for i = 1 to tigers do
54364: LD_ADDR_VAR 0 11
54368: PUSH
54369: DOUBLE
54370: LD_INT 1
54372: DEC
54373: ST_TO_ADDR
54374: LD_VAR 0 2
54378: PUSH
54379: FOR_TO
54380: IFFALSE 54444
// begin hc_class = class_tiger ;
54382: LD_ADDR_OWVAR 28
54386: PUSH
54387: LD_INT 14
54389: ST_TO_ADDR
// hc_gallery =  ;
54390: LD_ADDR_OWVAR 33
54394: PUSH
54395: LD_STRING 
54397: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54398: LD_ADDR_OWVAR 35
54402: PUSH
54403: LD_INT 7
54405: NEG
54406: PPUSH
54407: LD_INT 7
54409: PPUSH
54410: CALL_OW 12
54414: ST_TO_ADDR
// animal := CreateHuman ;
54415: LD_ADDR_VAR 0 12
54419: PUSH
54420: CALL_OW 44
54424: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54425: LD_VAR 0 12
54429: PPUSH
54430: LD_VAR 0 8
54434: PPUSH
54435: LD_INT 0
54437: PPUSH
54438: CALL 56351 0 3
// end ;
54442: GO 54379
54444: POP
54445: POP
// if apemans then
54446: LD_VAR 0 3
54450: IFFALSE 54573
// for i = 1 to apemans do
54452: LD_ADDR_VAR 0 11
54456: PUSH
54457: DOUBLE
54458: LD_INT 1
54460: DEC
54461: ST_TO_ADDR
54462: LD_VAR 0 3
54466: PUSH
54467: FOR_TO
54468: IFFALSE 54571
// begin hc_class = class_apeman ;
54470: LD_ADDR_OWVAR 28
54474: PUSH
54475: LD_INT 12
54477: ST_TO_ADDR
// hc_gallery =  ;
54478: LD_ADDR_OWVAR 33
54482: PUSH
54483: LD_STRING 
54485: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
54486: LD_ADDR_OWVAR 35
54490: PUSH
54491: LD_INT 2
54493: NEG
54494: PPUSH
54495: LD_INT 2
54497: PPUSH
54498: CALL_OW 12
54502: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54503: LD_ADDR_OWVAR 31
54507: PUSH
54508: LD_INT 1
54510: PPUSH
54511: LD_INT 3
54513: PPUSH
54514: CALL_OW 12
54518: PUSH
54519: LD_INT 1
54521: PPUSH
54522: LD_INT 3
54524: PPUSH
54525: CALL_OW 12
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: ST_TO_ADDR
// animal := CreateHuman ;
54542: LD_ADDR_VAR 0 12
54546: PUSH
54547: CALL_OW 44
54551: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54552: LD_VAR 0 12
54556: PPUSH
54557: LD_VAR 0 8
54561: PPUSH
54562: LD_INT 0
54564: PPUSH
54565: CALL 56351 0 3
// end ;
54569: GO 54467
54571: POP
54572: POP
// if enchidnas then
54573: LD_VAR 0 4
54577: IFFALSE 54644
// for i = 1 to enchidnas do
54579: LD_ADDR_VAR 0 11
54583: PUSH
54584: DOUBLE
54585: LD_INT 1
54587: DEC
54588: ST_TO_ADDR
54589: LD_VAR 0 4
54593: PUSH
54594: FOR_TO
54595: IFFALSE 54642
// begin hc_class = 13 ;
54597: LD_ADDR_OWVAR 28
54601: PUSH
54602: LD_INT 13
54604: ST_TO_ADDR
// hc_gallery =  ;
54605: LD_ADDR_OWVAR 33
54609: PUSH
54610: LD_STRING 
54612: ST_TO_ADDR
// animal := CreateHuman ;
54613: LD_ADDR_VAR 0 12
54617: PUSH
54618: CALL_OW 44
54622: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54623: LD_VAR 0 12
54627: PPUSH
54628: LD_VAR 0 8
54632: PPUSH
54633: LD_INT 0
54635: PPUSH
54636: CALL 56351 0 3
// end ;
54640: GO 54594
54642: POP
54643: POP
// if fishes then
54644: LD_VAR 0 7
54648: IFFALSE 54715
// for i = 1 to fishes do
54650: LD_ADDR_VAR 0 11
54654: PUSH
54655: DOUBLE
54656: LD_INT 1
54658: DEC
54659: ST_TO_ADDR
54660: LD_VAR 0 7
54664: PUSH
54665: FOR_TO
54666: IFFALSE 54713
// begin hc_class = 20 ;
54668: LD_ADDR_OWVAR 28
54672: PUSH
54673: LD_INT 20
54675: ST_TO_ADDR
// hc_gallery =  ;
54676: LD_ADDR_OWVAR 33
54680: PUSH
54681: LD_STRING 
54683: ST_TO_ADDR
// animal := CreateHuman ;
54684: LD_ADDR_VAR 0 12
54688: PUSH
54689: CALL_OW 44
54693: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54694: LD_VAR 0 12
54698: PPUSH
54699: LD_VAR 0 9
54703: PPUSH
54704: LD_INT 0
54706: PPUSH
54707: CALL 56351 0 3
// end ;
54711: GO 54665
54713: POP
54714: POP
// end ;
54715: LD_VAR 0 10
54719: RET
// export function WantHeal ( sci , unit ) ; begin
54720: LD_INT 0
54722: PPUSH
// if GetTaskList ( sci ) > 0 then
54723: LD_VAR 0 1
54727: PPUSH
54728: CALL_OW 437
54732: PUSH
54733: LD_INT 0
54735: GREATER
54736: IFFALSE 54806
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54738: LD_VAR 0 1
54742: PPUSH
54743: CALL_OW 437
54747: PUSH
54748: LD_INT 1
54750: ARRAY
54751: PUSH
54752: LD_INT 1
54754: ARRAY
54755: PUSH
54756: LD_STRING l
54758: EQUAL
54759: PUSH
54760: LD_VAR 0 1
54764: PPUSH
54765: CALL_OW 437
54769: PUSH
54770: LD_INT 1
54772: ARRAY
54773: PUSH
54774: LD_INT 4
54776: ARRAY
54777: PUSH
54778: LD_VAR 0 2
54782: EQUAL
54783: AND
54784: IFFALSE 54796
// result := true else
54786: LD_ADDR_VAR 0 3
54790: PUSH
54791: LD_INT 1
54793: ST_TO_ADDR
54794: GO 54804
// result := false ;
54796: LD_ADDR_VAR 0 3
54800: PUSH
54801: LD_INT 0
54803: ST_TO_ADDR
// end else
54804: GO 54814
// result := false ;
54806: LD_ADDR_VAR 0 3
54810: PUSH
54811: LD_INT 0
54813: ST_TO_ADDR
// end ;
54814: LD_VAR 0 3
54818: RET
// export function HealTarget ( sci ) ; begin
54819: LD_INT 0
54821: PPUSH
// if not sci then
54822: LD_VAR 0 1
54826: NOT
54827: IFFALSE 54831
// exit ;
54829: GO 54896
// result := 0 ;
54831: LD_ADDR_VAR 0 2
54835: PUSH
54836: LD_INT 0
54838: ST_TO_ADDR
// if GetTaskList ( sci ) then
54839: LD_VAR 0 1
54843: PPUSH
54844: CALL_OW 437
54848: IFFALSE 54896
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54850: LD_VAR 0 1
54854: PPUSH
54855: CALL_OW 437
54859: PUSH
54860: LD_INT 1
54862: ARRAY
54863: PUSH
54864: LD_INT 1
54866: ARRAY
54867: PUSH
54868: LD_STRING l
54870: EQUAL
54871: IFFALSE 54896
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54873: LD_ADDR_VAR 0 2
54877: PUSH
54878: LD_VAR 0 1
54882: PPUSH
54883: CALL_OW 437
54887: PUSH
54888: LD_INT 1
54890: ARRAY
54891: PUSH
54892: LD_INT 4
54894: ARRAY
54895: ST_TO_ADDR
// end ;
54896: LD_VAR 0 2
54900: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54901: LD_INT 0
54903: PPUSH
54904: PPUSH
54905: PPUSH
54906: PPUSH
// if not base_units then
54907: LD_VAR 0 1
54911: NOT
54912: IFFALSE 54916
// exit ;
54914: GO 55003
// result := false ;
54916: LD_ADDR_VAR 0 2
54920: PUSH
54921: LD_INT 0
54923: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54924: LD_ADDR_VAR 0 5
54928: PUSH
54929: LD_VAR 0 1
54933: PPUSH
54934: LD_INT 21
54936: PUSH
54937: LD_INT 3
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PPUSH
54944: CALL_OW 72
54948: ST_TO_ADDR
// if not tmp then
54949: LD_VAR 0 5
54953: NOT
54954: IFFALSE 54958
// exit ;
54956: GO 55003
// for i in tmp do
54958: LD_ADDR_VAR 0 3
54962: PUSH
54963: LD_VAR 0 5
54967: PUSH
54968: FOR_IN
54969: IFFALSE 55001
// begin result := EnemyInRange ( i , 22 ) ;
54971: LD_ADDR_VAR 0 2
54975: PUSH
54976: LD_VAR 0 3
54980: PPUSH
54981: LD_INT 22
54983: PPUSH
54984: CALL 53239 0 2
54988: ST_TO_ADDR
// if result then
54989: LD_VAR 0 2
54993: IFFALSE 54999
// exit ;
54995: POP
54996: POP
54997: GO 55003
// end ;
54999: GO 54968
55001: POP
55002: POP
// end ;
55003: LD_VAR 0 2
55007: RET
// export function FilterByTag ( units , tag ) ; begin
55008: LD_INT 0
55010: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
55011: LD_ADDR_VAR 0 3
55015: PUSH
55016: LD_VAR 0 1
55020: PPUSH
55021: LD_INT 120
55023: PUSH
55024: LD_VAR 0 2
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PPUSH
55033: CALL_OW 72
55037: ST_TO_ADDR
// end ;
55038: LD_VAR 0 3
55042: RET
// export function IsDriver ( un ) ; begin
55043: LD_INT 0
55045: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55046: LD_ADDR_VAR 0 2
55050: PUSH
55051: LD_VAR 0 1
55055: PUSH
55056: LD_INT 55
55058: PUSH
55059: EMPTY
55060: LIST
55061: PPUSH
55062: CALL_OW 69
55066: IN
55067: ST_TO_ADDR
// end ;
55068: LD_VAR 0 2
55072: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55073: LD_INT 0
55075: PPUSH
55076: PPUSH
// list := [ ] ;
55077: LD_ADDR_VAR 0 5
55081: PUSH
55082: EMPTY
55083: ST_TO_ADDR
// case d of 0 :
55084: LD_VAR 0 3
55088: PUSH
55089: LD_INT 0
55091: DOUBLE
55092: EQUAL
55093: IFTRUE 55097
55095: GO 55230
55097: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55098: LD_ADDR_VAR 0 5
55102: PUSH
55103: LD_VAR 0 1
55107: PUSH
55108: LD_INT 4
55110: MINUS
55111: PUSH
55112: LD_VAR 0 2
55116: PUSH
55117: LD_INT 4
55119: MINUS
55120: PUSH
55121: LD_INT 2
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: LIST
55128: PUSH
55129: LD_VAR 0 1
55133: PUSH
55134: LD_INT 3
55136: MINUS
55137: PUSH
55138: LD_VAR 0 2
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: LIST
55150: PUSH
55151: LD_VAR 0 1
55155: PUSH
55156: LD_INT 4
55158: PLUS
55159: PUSH
55160: LD_VAR 0 2
55164: PUSH
55165: LD_INT 4
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: LIST
55172: PUSH
55173: LD_VAR 0 1
55177: PUSH
55178: LD_INT 3
55180: PLUS
55181: PUSH
55182: LD_VAR 0 2
55186: PUSH
55187: LD_INT 3
55189: PLUS
55190: PUSH
55191: LD_INT 5
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: LIST
55198: PUSH
55199: LD_VAR 0 1
55203: PUSH
55204: LD_VAR 0 2
55208: PUSH
55209: LD_INT 4
55211: PLUS
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: LIST
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: ST_TO_ADDR
// end ; 1 :
55228: GO 55928
55230: LD_INT 1
55232: DOUBLE
55233: EQUAL
55234: IFTRUE 55238
55236: GO 55371
55238: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55239: LD_ADDR_VAR 0 5
55243: PUSH
55244: LD_VAR 0 1
55248: PUSH
55249: LD_VAR 0 2
55253: PUSH
55254: LD_INT 4
55256: MINUS
55257: PUSH
55258: LD_INT 3
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: LIST
55265: PUSH
55266: LD_VAR 0 1
55270: PUSH
55271: LD_INT 3
55273: MINUS
55274: PUSH
55275: LD_VAR 0 2
55279: PUSH
55280: LD_INT 3
55282: MINUS
55283: PUSH
55284: LD_INT 2
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: LIST
55291: PUSH
55292: LD_VAR 0 1
55296: PUSH
55297: LD_INT 4
55299: MINUS
55300: PUSH
55301: LD_VAR 0 2
55305: PUSH
55306: LD_INT 1
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: LIST
55313: PUSH
55314: LD_VAR 0 1
55318: PUSH
55319: LD_VAR 0 2
55323: PUSH
55324: LD_INT 3
55326: PLUS
55327: PUSH
55328: LD_INT 0
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: LIST
55335: PUSH
55336: LD_VAR 0 1
55340: PUSH
55341: LD_INT 4
55343: PLUS
55344: PUSH
55345: LD_VAR 0 2
55349: PUSH
55350: LD_INT 4
55352: PLUS
55353: PUSH
55354: LD_INT 5
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: LIST
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: ST_TO_ADDR
// end ; 2 :
55369: GO 55928
55371: LD_INT 2
55373: DOUBLE
55374: EQUAL
55375: IFTRUE 55379
55377: GO 55508
55379: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55380: LD_ADDR_VAR 0 5
55384: PUSH
55385: LD_VAR 0 1
55389: PUSH
55390: LD_VAR 0 2
55394: PUSH
55395: LD_INT 3
55397: MINUS
55398: PUSH
55399: LD_INT 3
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: LIST
55406: PUSH
55407: LD_VAR 0 1
55411: PUSH
55412: LD_INT 4
55414: PLUS
55415: PUSH
55416: LD_VAR 0 2
55420: PUSH
55421: LD_INT 4
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: LIST
55428: PUSH
55429: LD_VAR 0 1
55433: PUSH
55434: LD_VAR 0 2
55438: PUSH
55439: LD_INT 4
55441: PLUS
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: LIST
55450: PUSH
55451: LD_VAR 0 1
55455: PUSH
55456: LD_INT 3
55458: MINUS
55459: PUSH
55460: LD_VAR 0 2
55464: PUSH
55465: LD_INT 1
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: LIST
55472: PUSH
55473: LD_VAR 0 1
55477: PUSH
55478: LD_INT 4
55480: MINUS
55481: PUSH
55482: LD_VAR 0 2
55486: PUSH
55487: LD_INT 4
55489: MINUS
55490: PUSH
55491: LD_INT 2
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: LIST
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: ST_TO_ADDR
// end ; 3 :
55506: GO 55928
55508: LD_INT 3
55510: DOUBLE
55511: EQUAL
55512: IFTRUE 55516
55514: GO 55649
55516: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55517: LD_ADDR_VAR 0 5
55521: PUSH
55522: LD_VAR 0 1
55526: PUSH
55527: LD_INT 3
55529: PLUS
55530: PUSH
55531: LD_VAR 0 2
55535: PUSH
55536: LD_INT 4
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: LIST
55543: PUSH
55544: LD_VAR 0 1
55548: PUSH
55549: LD_INT 4
55551: PLUS
55552: PUSH
55553: LD_VAR 0 2
55557: PUSH
55558: LD_INT 4
55560: PLUS
55561: PUSH
55562: LD_INT 5
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: LIST
55569: PUSH
55570: LD_VAR 0 1
55574: PUSH
55575: LD_INT 4
55577: MINUS
55578: PUSH
55579: LD_VAR 0 2
55583: PUSH
55584: LD_INT 1
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: LIST
55591: PUSH
55592: LD_VAR 0 1
55596: PUSH
55597: LD_VAR 0 2
55601: PUSH
55602: LD_INT 4
55604: MINUS
55605: PUSH
55606: LD_INT 3
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: LIST
55613: PUSH
55614: LD_VAR 0 1
55618: PUSH
55619: LD_INT 3
55621: MINUS
55622: PUSH
55623: LD_VAR 0 2
55627: PUSH
55628: LD_INT 3
55630: MINUS
55631: PUSH
55632: LD_INT 2
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: LIST
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: ST_TO_ADDR
// end ; 4 :
55647: GO 55928
55649: LD_INT 4
55651: DOUBLE
55652: EQUAL
55653: IFTRUE 55657
55655: GO 55790
55657: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55658: LD_ADDR_VAR 0 5
55662: PUSH
55663: LD_VAR 0 1
55667: PUSH
55668: LD_VAR 0 2
55672: PUSH
55673: LD_INT 4
55675: PLUS
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: LIST
55684: PUSH
55685: LD_VAR 0 1
55689: PUSH
55690: LD_INT 3
55692: PLUS
55693: PUSH
55694: LD_VAR 0 2
55698: PUSH
55699: LD_INT 3
55701: PLUS
55702: PUSH
55703: LD_INT 5
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: LIST
55710: PUSH
55711: LD_VAR 0 1
55715: PUSH
55716: LD_INT 4
55718: PLUS
55719: PUSH
55720: LD_VAR 0 2
55724: PUSH
55725: LD_INT 4
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: LIST
55732: PUSH
55733: LD_VAR 0 1
55737: PUSH
55738: LD_VAR 0 2
55742: PUSH
55743: LD_INT 3
55745: MINUS
55746: PUSH
55747: LD_INT 3
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: LIST
55754: PUSH
55755: LD_VAR 0 1
55759: PUSH
55760: LD_INT 4
55762: MINUS
55763: PUSH
55764: LD_VAR 0 2
55768: PUSH
55769: LD_INT 4
55771: MINUS
55772: PUSH
55773: LD_INT 2
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: LIST
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: ST_TO_ADDR
// end ; 5 :
55788: GO 55928
55790: LD_INT 5
55792: DOUBLE
55793: EQUAL
55794: IFTRUE 55798
55796: GO 55927
55798: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55799: LD_ADDR_VAR 0 5
55803: PUSH
55804: LD_VAR 0 1
55808: PUSH
55809: LD_INT 4
55811: MINUS
55812: PUSH
55813: LD_VAR 0 2
55817: PUSH
55818: LD_INT 1
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: LIST
55825: PUSH
55826: LD_VAR 0 1
55830: PUSH
55831: LD_VAR 0 2
55835: PUSH
55836: LD_INT 4
55838: MINUS
55839: PUSH
55840: LD_INT 3
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: LIST
55847: PUSH
55848: LD_VAR 0 1
55852: PUSH
55853: LD_INT 4
55855: PLUS
55856: PUSH
55857: LD_VAR 0 2
55861: PUSH
55862: LD_INT 4
55864: PLUS
55865: PUSH
55866: LD_INT 5
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: LIST
55873: PUSH
55874: LD_VAR 0 1
55878: PUSH
55879: LD_INT 3
55881: PLUS
55882: PUSH
55883: LD_VAR 0 2
55887: PUSH
55888: LD_INT 4
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: LIST
55895: PUSH
55896: LD_VAR 0 1
55900: PUSH
55901: LD_VAR 0 2
55905: PUSH
55906: LD_INT 3
55908: PLUS
55909: PUSH
55910: LD_INT 0
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: LIST
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: ST_TO_ADDR
// end ; end ;
55925: GO 55928
55927: POP
// result := list ;
55928: LD_ADDR_VAR 0 4
55932: PUSH
55933: LD_VAR 0 5
55937: ST_TO_ADDR
// end ;
55938: LD_VAR 0 4
55942: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55943: LD_INT 0
55945: PPUSH
55946: PPUSH
55947: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55948: LD_VAR 0 1
55952: NOT
55953: PUSH
55954: LD_VAR 0 2
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: LD_INT 2
55964: PUSH
55965: LD_INT 3
55967: PUSH
55968: LD_INT 4
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: IN
55977: NOT
55978: OR
55979: IFFALSE 55983
// exit ;
55981: GO 56075
// tmp := [ ] ;
55983: LD_ADDR_VAR 0 5
55987: PUSH
55988: EMPTY
55989: ST_TO_ADDR
// for i in units do
55990: LD_ADDR_VAR 0 4
55994: PUSH
55995: LD_VAR 0 1
55999: PUSH
56000: FOR_IN
56001: IFFALSE 56044
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
56003: LD_ADDR_VAR 0 5
56007: PUSH
56008: LD_VAR 0 5
56012: PPUSH
56013: LD_VAR 0 5
56017: PUSH
56018: LD_INT 1
56020: PLUS
56021: PPUSH
56022: LD_VAR 0 4
56026: PPUSH
56027: LD_VAR 0 2
56031: PPUSH
56032: CALL_OW 259
56036: PPUSH
56037: CALL_OW 2
56041: ST_TO_ADDR
56042: GO 56000
56044: POP
56045: POP
// if not tmp then
56046: LD_VAR 0 5
56050: NOT
56051: IFFALSE 56055
// exit ;
56053: GO 56075
// result := SortListByListDesc ( units , tmp ) ;
56055: LD_ADDR_VAR 0 3
56059: PUSH
56060: LD_VAR 0 1
56064: PPUSH
56065: LD_VAR 0 5
56069: PPUSH
56070: CALL_OW 77
56074: ST_TO_ADDR
// end ;
56075: LD_VAR 0 3
56079: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56080: LD_INT 0
56082: PPUSH
56083: PPUSH
56084: PPUSH
// result := false ;
56085: LD_ADDR_VAR 0 3
56089: PUSH
56090: LD_INT 0
56092: ST_TO_ADDR
// x := GetX ( building ) ;
56093: LD_ADDR_VAR 0 4
56097: PUSH
56098: LD_VAR 0 2
56102: PPUSH
56103: CALL_OW 250
56107: ST_TO_ADDR
// y := GetY ( building ) ;
56108: LD_ADDR_VAR 0 5
56112: PUSH
56113: LD_VAR 0 2
56117: PPUSH
56118: CALL_OW 251
56122: ST_TO_ADDR
// if not building or not x or not y then
56123: LD_VAR 0 2
56127: NOT
56128: PUSH
56129: LD_VAR 0 4
56133: NOT
56134: OR
56135: PUSH
56136: LD_VAR 0 5
56140: NOT
56141: OR
56142: IFFALSE 56146
// exit ;
56144: GO 56238
// if GetTaskList ( unit ) then
56146: LD_VAR 0 1
56150: PPUSH
56151: CALL_OW 437
56155: IFFALSE 56238
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56157: LD_STRING e
56159: PUSH
56160: LD_VAR 0 1
56164: PPUSH
56165: CALL_OW 437
56169: PUSH
56170: LD_INT 1
56172: ARRAY
56173: PUSH
56174: LD_INT 1
56176: ARRAY
56177: EQUAL
56178: PUSH
56179: LD_VAR 0 4
56183: PUSH
56184: LD_VAR 0 1
56188: PPUSH
56189: CALL_OW 437
56193: PUSH
56194: LD_INT 1
56196: ARRAY
56197: PUSH
56198: LD_INT 2
56200: ARRAY
56201: EQUAL
56202: AND
56203: PUSH
56204: LD_VAR 0 5
56208: PUSH
56209: LD_VAR 0 1
56213: PPUSH
56214: CALL_OW 437
56218: PUSH
56219: LD_INT 1
56221: ARRAY
56222: PUSH
56223: LD_INT 3
56225: ARRAY
56226: EQUAL
56227: AND
56228: IFFALSE 56238
// result := true end ;
56230: LD_ADDR_VAR 0 3
56234: PUSH
56235: LD_INT 1
56237: ST_TO_ADDR
// end ;
56238: LD_VAR 0 3
56242: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56243: LD_INT 0
56245: PPUSH
// result := false ;
56246: LD_ADDR_VAR 0 4
56250: PUSH
56251: LD_INT 0
56253: ST_TO_ADDR
// if GetTaskList ( unit ) then
56254: LD_VAR 0 1
56258: PPUSH
56259: CALL_OW 437
56263: IFFALSE 56346
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56265: LD_STRING M
56267: PUSH
56268: LD_VAR 0 1
56272: PPUSH
56273: CALL_OW 437
56277: PUSH
56278: LD_INT 1
56280: ARRAY
56281: PUSH
56282: LD_INT 1
56284: ARRAY
56285: EQUAL
56286: PUSH
56287: LD_VAR 0 2
56291: PUSH
56292: LD_VAR 0 1
56296: PPUSH
56297: CALL_OW 437
56301: PUSH
56302: LD_INT 1
56304: ARRAY
56305: PUSH
56306: LD_INT 2
56308: ARRAY
56309: EQUAL
56310: AND
56311: PUSH
56312: LD_VAR 0 3
56316: PUSH
56317: LD_VAR 0 1
56321: PPUSH
56322: CALL_OW 437
56326: PUSH
56327: LD_INT 1
56329: ARRAY
56330: PUSH
56331: LD_INT 3
56333: ARRAY
56334: EQUAL
56335: AND
56336: IFFALSE 56346
// result := true ;
56338: LD_ADDR_VAR 0 4
56342: PUSH
56343: LD_INT 1
56345: ST_TO_ADDR
// end ; end ;
56346: LD_VAR 0 4
56350: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56351: LD_INT 0
56353: PPUSH
56354: PPUSH
56355: PPUSH
56356: PPUSH
// if not unit or not area then
56357: LD_VAR 0 1
56361: NOT
56362: PUSH
56363: LD_VAR 0 2
56367: NOT
56368: OR
56369: IFFALSE 56373
// exit ;
56371: GO 56537
// tmp := AreaToList ( area , i ) ;
56373: LD_ADDR_VAR 0 6
56377: PUSH
56378: LD_VAR 0 2
56382: PPUSH
56383: LD_VAR 0 5
56387: PPUSH
56388: CALL_OW 517
56392: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56393: LD_ADDR_VAR 0 5
56397: PUSH
56398: DOUBLE
56399: LD_INT 1
56401: DEC
56402: ST_TO_ADDR
56403: LD_VAR 0 6
56407: PUSH
56408: LD_INT 1
56410: ARRAY
56411: PUSH
56412: FOR_TO
56413: IFFALSE 56535
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56415: LD_ADDR_VAR 0 7
56419: PUSH
56420: LD_VAR 0 6
56424: PUSH
56425: LD_INT 1
56427: ARRAY
56428: PUSH
56429: LD_VAR 0 5
56433: ARRAY
56434: PUSH
56435: LD_VAR 0 6
56439: PUSH
56440: LD_INT 2
56442: ARRAY
56443: PUSH
56444: LD_VAR 0 5
56448: ARRAY
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
56454: LD_VAR 0 7
56458: PUSH
56459: LD_INT 1
56461: ARRAY
56462: PPUSH
56463: LD_VAR 0 7
56467: PUSH
56468: LD_INT 2
56470: ARRAY
56471: PPUSH
56472: CALL_OW 428
56476: PUSH
56477: LD_INT 0
56479: EQUAL
56480: IFFALSE 56533
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
56482: LD_VAR 0 1
56486: PPUSH
56487: LD_VAR 0 7
56491: PUSH
56492: LD_INT 1
56494: ARRAY
56495: PPUSH
56496: LD_VAR 0 7
56500: PUSH
56501: LD_INT 2
56503: ARRAY
56504: PPUSH
56505: LD_VAR 0 3
56509: PPUSH
56510: CALL_OW 48
// result := IsPlaced ( unit ) ;
56514: LD_ADDR_VAR 0 4
56518: PUSH
56519: LD_VAR 0 1
56523: PPUSH
56524: CALL_OW 305
56528: ST_TO_ADDR
// exit ;
56529: POP
56530: POP
56531: GO 56537
// end ; end ;
56533: GO 56412
56535: POP
56536: POP
// end ;
56537: LD_VAR 0 4
56541: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56542: LD_INT 0
56544: PPUSH
56545: PPUSH
56546: PPUSH
// if not side or side > 8 then
56547: LD_VAR 0 1
56551: NOT
56552: PUSH
56553: LD_VAR 0 1
56557: PUSH
56558: LD_INT 8
56560: GREATER
56561: OR
56562: IFFALSE 56566
// exit ;
56564: GO 56753
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56566: LD_ADDR_VAR 0 4
56570: PUSH
56571: LD_INT 22
56573: PUSH
56574: LD_VAR 0 1
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 21
56585: PUSH
56586: LD_INT 3
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PPUSH
56597: CALL_OW 69
56601: ST_TO_ADDR
// if not tmp then
56602: LD_VAR 0 4
56606: NOT
56607: IFFALSE 56611
// exit ;
56609: GO 56753
// enable_addtolog := true ;
56611: LD_ADDR_OWVAR 81
56615: PUSH
56616: LD_INT 1
56618: ST_TO_ADDR
// AddToLog ( [ ) ;
56619: LD_STRING [
56621: PPUSH
56622: CALL_OW 561
// for i in tmp do
56626: LD_ADDR_VAR 0 3
56630: PUSH
56631: LD_VAR 0 4
56635: PUSH
56636: FOR_IN
56637: IFFALSE 56744
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56639: LD_STRING [
56641: PUSH
56642: LD_VAR 0 3
56646: PPUSH
56647: CALL_OW 266
56651: STR
56652: PUSH
56653: LD_STRING , 
56655: STR
56656: PUSH
56657: LD_VAR 0 3
56661: PPUSH
56662: CALL_OW 250
56666: STR
56667: PUSH
56668: LD_STRING , 
56670: STR
56671: PUSH
56672: LD_VAR 0 3
56676: PPUSH
56677: CALL_OW 251
56681: STR
56682: PUSH
56683: LD_STRING , 
56685: STR
56686: PUSH
56687: LD_VAR 0 3
56691: PPUSH
56692: CALL_OW 254
56696: STR
56697: PUSH
56698: LD_STRING , 
56700: STR
56701: PUSH
56702: LD_VAR 0 3
56706: PPUSH
56707: LD_INT 1
56709: PPUSH
56710: CALL_OW 268
56714: STR
56715: PUSH
56716: LD_STRING , 
56718: STR
56719: PUSH
56720: LD_VAR 0 3
56724: PPUSH
56725: LD_INT 2
56727: PPUSH
56728: CALL_OW 268
56732: STR
56733: PUSH
56734: LD_STRING ],
56736: STR
56737: PPUSH
56738: CALL_OW 561
// end ;
56742: GO 56636
56744: POP
56745: POP
// AddToLog ( ]; ) ;
56746: LD_STRING ];
56748: PPUSH
56749: CALL_OW 561
// end ;
56753: LD_VAR 0 2
56757: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56758: LD_INT 0
56760: PPUSH
56761: PPUSH
56762: PPUSH
56763: PPUSH
56764: PPUSH
// if not area or not rate or not max then
56765: LD_VAR 0 1
56769: NOT
56770: PUSH
56771: LD_VAR 0 2
56775: NOT
56776: OR
56777: PUSH
56778: LD_VAR 0 4
56782: NOT
56783: OR
56784: IFFALSE 56788
// exit ;
56786: GO 56977
// while 1 do
56788: LD_INT 1
56790: IFFALSE 56977
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56792: LD_ADDR_VAR 0 9
56796: PUSH
56797: LD_VAR 0 1
56801: PPUSH
56802: LD_INT 1
56804: PPUSH
56805: CALL_OW 287
56809: PUSH
56810: LD_INT 10
56812: MUL
56813: ST_TO_ADDR
// r := rate / 10 ;
56814: LD_ADDR_VAR 0 7
56818: PUSH
56819: LD_VAR 0 2
56823: PUSH
56824: LD_INT 10
56826: DIVREAL
56827: ST_TO_ADDR
// time := 1 1$00 ;
56828: LD_ADDR_VAR 0 8
56832: PUSH
56833: LD_INT 2100
56835: ST_TO_ADDR
// if amount < min then
56836: LD_VAR 0 9
56840: PUSH
56841: LD_VAR 0 3
56845: LESS
56846: IFFALSE 56864
// r := r * 2 else
56848: LD_ADDR_VAR 0 7
56852: PUSH
56853: LD_VAR 0 7
56857: PUSH
56858: LD_INT 2
56860: MUL
56861: ST_TO_ADDR
56862: GO 56890
// if amount > max then
56864: LD_VAR 0 9
56868: PUSH
56869: LD_VAR 0 4
56873: GREATER
56874: IFFALSE 56890
// r := r / 2 ;
56876: LD_ADDR_VAR 0 7
56880: PUSH
56881: LD_VAR 0 7
56885: PUSH
56886: LD_INT 2
56888: DIVREAL
56889: ST_TO_ADDR
// time := time / r ;
56890: LD_ADDR_VAR 0 8
56894: PUSH
56895: LD_VAR 0 8
56899: PUSH
56900: LD_VAR 0 7
56904: DIVREAL
56905: ST_TO_ADDR
// if time < 0 then
56906: LD_VAR 0 8
56910: PUSH
56911: LD_INT 0
56913: LESS
56914: IFFALSE 56931
// time := time * - 1 ;
56916: LD_ADDR_VAR 0 8
56920: PUSH
56921: LD_VAR 0 8
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: MUL
56930: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
56931: LD_VAR 0 8
56935: PUSH
56936: LD_INT 35
56938: PPUSH
56939: LD_INT 875
56941: PPUSH
56942: CALL_OW 12
56946: PLUS
56947: PPUSH
56948: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56952: LD_INT 1
56954: PPUSH
56955: LD_INT 5
56957: PPUSH
56958: CALL_OW 12
56962: PPUSH
56963: LD_VAR 0 1
56967: PPUSH
56968: LD_INT 1
56970: PPUSH
56971: CALL_OW 55
// end ;
56975: GO 56788
// end ;
56977: LD_VAR 0 5
56981: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56982: LD_INT 0
56984: PPUSH
56985: PPUSH
56986: PPUSH
56987: PPUSH
56988: PPUSH
56989: PPUSH
56990: PPUSH
56991: PPUSH
// if not turrets or not factories then
56992: LD_VAR 0 1
56996: NOT
56997: PUSH
56998: LD_VAR 0 2
57002: NOT
57003: OR
57004: IFFALSE 57008
// exit ;
57006: GO 57315
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57008: LD_ADDR_VAR 0 10
57012: PUSH
57013: LD_INT 5
57015: PUSH
57016: LD_INT 6
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 2
57025: PUSH
57026: LD_INT 4
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 3
57035: PUSH
57036: LD_INT 5
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 24
57050: PUSH
57051: LD_INT 25
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 23
57060: PUSH
57061: LD_INT 27
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 42
57074: PUSH
57075: LD_INT 43
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 44
57084: PUSH
57085: LD_INT 46
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 45
57094: PUSH
57095: LD_INT 47
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: LIST
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: LIST
57111: ST_TO_ADDR
// result := [ ] ;
57112: LD_ADDR_VAR 0 3
57116: PUSH
57117: EMPTY
57118: ST_TO_ADDR
// for i in turrets do
57119: LD_ADDR_VAR 0 4
57123: PUSH
57124: LD_VAR 0 1
57128: PUSH
57129: FOR_IN
57130: IFFALSE 57313
// begin nat := GetNation ( i ) ;
57132: LD_ADDR_VAR 0 7
57136: PUSH
57137: LD_VAR 0 4
57141: PPUSH
57142: CALL_OW 248
57146: ST_TO_ADDR
// weapon := 0 ;
57147: LD_ADDR_VAR 0 8
57151: PUSH
57152: LD_INT 0
57154: ST_TO_ADDR
// if not nat then
57155: LD_VAR 0 7
57159: NOT
57160: IFFALSE 57164
// continue ;
57162: GO 57129
// for j in list [ nat ] do
57164: LD_ADDR_VAR 0 5
57168: PUSH
57169: LD_VAR 0 10
57173: PUSH
57174: LD_VAR 0 7
57178: ARRAY
57179: PUSH
57180: FOR_IN
57181: IFFALSE 57222
// if GetBWeapon ( i ) = j [ 1 ] then
57183: LD_VAR 0 4
57187: PPUSH
57188: CALL_OW 269
57192: PUSH
57193: LD_VAR 0 5
57197: PUSH
57198: LD_INT 1
57200: ARRAY
57201: EQUAL
57202: IFFALSE 57220
// begin weapon := j [ 2 ] ;
57204: LD_ADDR_VAR 0 8
57208: PUSH
57209: LD_VAR 0 5
57213: PUSH
57214: LD_INT 2
57216: ARRAY
57217: ST_TO_ADDR
// break ;
57218: GO 57222
// end ;
57220: GO 57180
57222: POP
57223: POP
// if not weapon then
57224: LD_VAR 0 8
57228: NOT
57229: IFFALSE 57233
// continue ;
57231: GO 57129
// for k in factories do
57233: LD_ADDR_VAR 0 6
57237: PUSH
57238: LD_VAR 0 2
57242: PUSH
57243: FOR_IN
57244: IFFALSE 57309
// begin weapons := AvailableWeaponList ( k ) ;
57246: LD_ADDR_VAR 0 9
57250: PUSH
57251: LD_VAR 0 6
57255: PPUSH
57256: CALL_OW 478
57260: ST_TO_ADDR
// if not weapons then
57261: LD_VAR 0 9
57265: NOT
57266: IFFALSE 57270
// continue ;
57268: GO 57243
// if weapon in weapons then
57270: LD_VAR 0 8
57274: PUSH
57275: LD_VAR 0 9
57279: IN
57280: IFFALSE 57307
// begin result := [ i , weapon ] ;
57282: LD_ADDR_VAR 0 3
57286: PUSH
57287: LD_VAR 0 4
57291: PUSH
57292: LD_VAR 0 8
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: ST_TO_ADDR
// exit ;
57301: POP
57302: POP
57303: POP
57304: POP
57305: GO 57315
// end ; end ;
57307: GO 57243
57309: POP
57310: POP
// end ;
57311: GO 57129
57313: POP
57314: POP
// end ;
57315: LD_VAR 0 3
57319: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57320: LD_INT 0
57322: PPUSH
// if not side or side > 8 then
57323: LD_VAR 0 3
57327: NOT
57328: PUSH
57329: LD_VAR 0 3
57333: PUSH
57334: LD_INT 8
57336: GREATER
57337: OR
57338: IFFALSE 57342
// exit ;
57340: GO 57401
// if not range then
57342: LD_VAR 0 4
57346: NOT
57347: IFFALSE 57358
// range := - 12 ;
57349: LD_ADDR_VAR 0 4
57353: PUSH
57354: LD_INT 12
57356: NEG
57357: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57358: LD_VAR 0 1
57362: PPUSH
57363: LD_VAR 0 2
57367: PPUSH
57368: LD_VAR 0 3
57372: PPUSH
57373: LD_VAR 0 4
57377: PPUSH
57378: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57382: LD_VAR 0 1
57386: PPUSH
57387: LD_VAR 0 2
57391: PPUSH
57392: LD_VAR 0 3
57396: PPUSH
57397: CALL_OW 331
// end ;
57401: LD_VAR 0 5
57405: RET
// export function Video ( mode ) ; begin
57406: LD_INT 0
57408: PPUSH
// ingame_video = mode ;
57409: LD_ADDR_OWVAR 52
57413: PUSH
57414: LD_VAR 0 1
57418: ST_TO_ADDR
// interface_hidden = mode ;
57419: LD_ADDR_OWVAR 54
57423: PUSH
57424: LD_VAR 0 1
57428: ST_TO_ADDR
// end ;
57429: LD_VAR 0 2
57433: RET
// export function Join ( array , element ) ; begin
57434: LD_INT 0
57436: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57437: LD_ADDR_VAR 0 3
57441: PUSH
57442: LD_VAR 0 1
57446: PPUSH
57447: LD_VAR 0 1
57451: PUSH
57452: LD_INT 1
57454: PLUS
57455: PPUSH
57456: LD_VAR 0 2
57460: PPUSH
57461: CALL_OW 1
57465: ST_TO_ADDR
// end ;
57466: LD_VAR 0 3
57470: RET
// export function JoinUnion ( array , element ) ; begin
57471: LD_INT 0
57473: PPUSH
// result := array union element ;
57474: LD_ADDR_VAR 0 3
57478: PUSH
57479: LD_VAR 0 1
57483: PUSH
57484: LD_VAR 0 2
57488: UNION
57489: ST_TO_ADDR
// end ;
57490: LD_VAR 0 3
57494: RET
// export function GetBehemoths ( side ) ; begin
57495: LD_INT 0
57497: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
57498: LD_ADDR_VAR 0 2
57502: PUSH
57503: LD_INT 22
57505: PUSH
57506: LD_VAR 0 1
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 31
57517: PUSH
57518: LD_INT 25
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PPUSH
57529: CALL_OW 69
57533: ST_TO_ADDR
// end ;
57534: LD_VAR 0 2
57538: RET
// export function Shuffle ( array ) ; var i , index ; begin
57539: LD_INT 0
57541: PPUSH
57542: PPUSH
57543: PPUSH
// result := [ ] ;
57544: LD_ADDR_VAR 0 2
57548: PUSH
57549: EMPTY
57550: ST_TO_ADDR
// if not array then
57551: LD_VAR 0 1
57555: NOT
57556: IFFALSE 57560
// exit ;
57558: GO 57659
// Randomize ;
57560: CALL_OW 10
// for i = array downto 1 do
57564: LD_ADDR_VAR 0 3
57568: PUSH
57569: DOUBLE
57570: LD_VAR 0 1
57574: INC
57575: ST_TO_ADDR
57576: LD_INT 1
57578: PUSH
57579: FOR_DOWNTO
57580: IFFALSE 57657
// begin index := rand ( 1 , array ) ;
57582: LD_ADDR_VAR 0 4
57586: PUSH
57587: LD_INT 1
57589: PPUSH
57590: LD_VAR 0 1
57594: PPUSH
57595: CALL_OW 12
57599: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57600: LD_ADDR_VAR 0 2
57604: PUSH
57605: LD_VAR 0 2
57609: PPUSH
57610: LD_VAR 0 2
57614: PUSH
57615: LD_INT 1
57617: PLUS
57618: PPUSH
57619: LD_VAR 0 1
57623: PUSH
57624: LD_VAR 0 4
57628: ARRAY
57629: PPUSH
57630: CALL_OW 2
57634: ST_TO_ADDR
// array := Delete ( array , index ) ;
57635: LD_ADDR_VAR 0 1
57639: PUSH
57640: LD_VAR 0 1
57644: PPUSH
57645: LD_VAR 0 4
57649: PPUSH
57650: CALL_OW 3
57654: ST_TO_ADDR
// end ;
57655: GO 57579
57657: POP
57658: POP
// end ;
57659: LD_VAR 0 2
57663: RET
// export function GetBaseMaterials ( base ) ; begin
57664: LD_INT 0
57666: PPUSH
// result := [ 0 , 0 , 0 ] ;
57667: LD_ADDR_VAR 0 2
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: LD_INT 0
57677: PUSH
57678: LD_INT 0
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: LIST
57685: ST_TO_ADDR
// if not base then
57686: LD_VAR 0 1
57690: NOT
57691: IFFALSE 57695
// exit ;
57693: GO 57744
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57695: LD_ADDR_VAR 0 2
57699: PUSH
57700: LD_VAR 0 1
57704: PPUSH
57705: LD_INT 1
57707: PPUSH
57708: CALL_OW 275
57712: PUSH
57713: LD_VAR 0 1
57717: PPUSH
57718: LD_INT 2
57720: PPUSH
57721: CALL_OW 275
57725: PUSH
57726: LD_VAR 0 1
57730: PPUSH
57731: LD_INT 3
57733: PPUSH
57734: CALL_OW 275
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: LIST
57743: ST_TO_ADDR
// end ;
57744: LD_VAR 0 2
57748: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57749: LD_INT 0
57751: PPUSH
57752: PPUSH
// result := array ;
57753: LD_ADDR_VAR 0 3
57757: PUSH
57758: LD_VAR 0 1
57762: ST_TO_ADDR
// if size > 0 then
57763: LD_VAR 0 2
57767: PUSH
57768: LD_INT 0
57770: GREATER
57771: IFFALSE 57817
// for i := array downto size do
57773: LD_ADDR_VAR 0 4
57777: PUSH
57778: DOUBLE
57779: LD_VAR 0 1
57783: INC
57784: ST_TO_ADDR
57785: LD_VAR 0 2
57789: PUSH
57790: FOR_DOWNTO
57791: IFFALSE 57815
// result := Delete ( result , result ) ;
57793: LD_ADDR_VAR 0 3
57797: PUSH
57798: LD_VAR 0 3
57802: PPUSH
57803: LD_VAR 0 3
57807: PPUSH
57808: CALL_OW 3
57812: ST_TO_ADDR
57813: GO 57790
57815: POP
57816: POP
// end ;
57817: LD_VAR 0 3
57821: RET
// export function ComExit ( unit ) ; var tmp ; begin
57822: LD_INT 0
57824: PPUSH
57825: PPUSH
// if not IsInUnit ( unit ) then
57826: LD_VAR 0 1
57830: PPUSH
57831: CALL_OW 310
57835: NOT
57836: IFFALSE 57840
// exit ;
57838: GO 57900
// tmp := IsInUnit ( unit ) ;
57840: LD_ADDR_VAR 0 3
57844: PUSH
57845: LD_VAR 0 1
57849: PPUSH
57850: CALL_OW 310
57854: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57855: LD_VAR 0 3
57859: PPUSH
57860: CALL_OW 247
57864: PUSH
57865: LD_INT 2
57867: EQUAL
57868: IFFALSE 57881
// ComExitVehicle ( unit ) else
57870: LD_VAR 0 1
57874: PPUSH
57875: CALL_OW 121
57879: GO 57890
// ComExitBuilding ( unit ) ;
57881: LD_VAR 0 1
57885: PPUSH
57886: CALL_OW 122
// result := tmp ;
57890: LD_ADDR_VAR 0 2
57894: PUSH
57895: LD_VAR 0 3
57899: ST_TO_ADDR
// end ;
57900: LD_VAR 0 2
57904: RET
// export function ComExitAll ( units ) ; var i ; begin
57905: LD_INT 0
57907: PPUSH
57908: PPUSH
// if not units then
57909: LD_VAR 0 1
57913: NOT
57914: IFFALSE 57918
// exit ;
57916: GO 57944
// for i in units do
57918: LD_ADDR_VAR 0 3
57922: PUSH
57923: LD_VAR 0 1
57927: PUSH
57928: FOR_IN
57929: IFFALSE 57942
// ComExit ( i ) ;
57931: LD_VAR 0 3
57935: PPUSH
57936: CALL 57822 0 1
57940: GO 57928
57942: POP
57943: POP
// end ;
57944: LD_VAR 0 2
57948: RET
// export function ResetHc ; begin
57949: LD_INT 0
57951: PPUSH
// InitHc ;
57952: CALL_OW 19
// hc_importance := 0 ;
57956: LD_ADDR_OWVAR 32
57960: PUSH
57961: LD_INT 0
57963: ST_TO_ADDR
// end ;
57964: LD_VAR 0 1
57968: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
57969: LD_INT 0
57971: PPUSH
57972: PPUSH
57973: PPUSH
// _x := ( x1 + x2 ) div 2 ;
57974: LD_ADDR_VAR 0 6
57978: PUSH
57979: LD_VAR 0 1
57983: PUSH
57984: LD_VAR 0 3
57988: PLUS
57989: PUSH
57990: LD_INT 2
57992: DIV
57993: ST_TO_ADDR
// if _x < 0 then
57994: LD_VAR 0 6
57998: PUSH
57999: LD_INT 0
58001: LESS
58002: IFFALSE 58019
// _x := _x * - 1 ;
58004: LD_ADDR_VAR 0 6
58008: PUSH
58009: LD_VAR 0 6
58013: PUSH
58014: LD_INT 1
58016: NEG
58017: MUL
58018: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58019: LD_ADDR_VAR 0 7
58023: PUSH
58024: LD_VAR 0 2
58028: PUSH
58029: LD_VAR 0 4
58033: PLUS
58034: PUSH
58035: LD_INT 2
58037: DIV
58038: ST_TO_ADDR
// if _y < 0 then
58039: LD_VAR 0 7
58043: PUSH
58044: LD_INT 0
58046: LESS
58047: IFFALSE 58064
// _y := _y * - 1 ;
58049: LD_ADDR_VAR 0 7
58053: PUSH
58054: LD_VAR 0 7
58058: PUSH
58059: LD_INT 1
58061: NEG
58062: MUL
58063: ST_TO_ADDR
// result := [ _x , _y ] ;
58064: LD_ADDR_VAR 0 5
58068: PUSH
58069: LD_VAR 0 6
58073: PUSH
58074: LD_VAR 0 7
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: ST_TO_ADDR
// end ;
58083: LD_VAR 0 5
58087: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58088: LD_INT 0
58090: PPUSH
58091: PPUSH
58092: PPUSH
58093: PPUSH
// task := GetTaskList ( unit ) ;
58094: LD_ADDR_VAR 0 7
58098: PUSH
58099: LD_VAR 0 1
58103: PPUSH
58104: CALL_OW 437
58108: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58109: LD_VAR 0 7
58113: NOT
58114: PUSH
58115: LD_VAR 0 1
58119: PPUSH
58120: LD_VAR 0 2
58124: PPUSH
58125: CALL_OW 308
58129: NOT
58130: AND
58131: IFFALSE 58135
// exit ;
58133: GO 58253
// if IsInArea ( unit , area ) then
58135: LD_VAR 0 1
58139: PPUSH
58140: LD_VAR 0 2
58144: PPUSH
58145: CALL_OW 308
58149: IFFALSE 58167
// begin ComMoveToArea ( unit , goAway ) ;
58151: LD_VAR 0 1
58155: PPUSH
58156: LD_VAR 0 3
58160: PPUSH
58161: CALL_OW 113
// exit ;
58165: GO 58253
// end ; if task [ 1 ] [ 1 ] <> M then
58167: LD_VAR 0 7
58171: PUSH
58172: LD_INT 1
58174: ARRAY
58175: PUSH
58176: LD_INT 1
58178: ARRAY
58179: PUSH
58180: LD_STRING M
58182: NONEQUAL
58183: IFFALSE 58187
// exit ;
58185: GO 58253
// x := task [ 1 ] [ 2 ] ;
58187: LD_ADDR_VAR 0 5
58191: PUSH
58192: LD_VAR 0 7
58196: PUSH
58197: LD_INT 1
58199: ARRAY
58200: PUSH
58201: LD_INT 2
58203: ARRAY
58204: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
58205: LD_ADDR_VAR 0 6
58209: PUSH
58210: LD_VAR 0 7
58214: PUSH
58215: LD_INT 1
58217: ARRAY
58218: PUSH
58219: LD_INT 3
58221: ARRAY
58222: ST_TO_ADDR
// if InArea ( x , y , area ) then
58223: LD_VAR 0 5
58227: PPUSH
58228: LD_VAR 0 6
58232: PPUSH
58233: LD_VAR 0 2
58237: PPUSH
58238: CALL_OW 309
58242: IFFALSE 58253
// ComStop ( unit ) ;
58244: LD_VAR 0 1
58248: PPUSH
58249: CALL_OW 141
// end ;
58253: LD_VAR 0 4
58257: RET
// export function Abs ( value ) ; begin
58258: LD_INT 0
58260: PPUSH
// result := value ;
58261: LD_ADDR_VAR 0 2
58265: PUSH
58266: LD_VAR 0 1
58270: ST_TO_ADDR
// if value < 0 then
58271: LD_VAR 0 1
58275: PUSH
58276: LD_INT 0
58278: LESS
58279: IFFALSE 58296
// result := value * - 1 ;
58281: LD_ADDR_VAR 0 2
58285: PUSH
58286: LD_VAR 0 1
58290: PUSH
58291: LD_INT 1
58293: NEG
58294: MUL
58295: ST_TO_ADDR
// end ;
58296: LD_VAR 0 2
58300: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
58301: LD_INT 0
58303: PPUSH
58304: PPUSH
58305: PPUSH
58306: PPUSH
58307: PPUSH
58308: PPUSH
58309: PPUSH
58310: PPUSH
// if not unit or not building then
58311: LD_VAR 0 1
58315: NOT
58316: PUSH
58317: LD_VAR 0 2
58321: NOT
58322: OR
58323: IFFALSE 58327
// exit ;
58325: GO 58553
// x := GetX ( building ) ;
58327: LD_ADDR_VAR 0 4
58331: PUSH
58332: LD_VAR 0 2
58336: PPUSH
58337: CALL_OW 250
58341: ST_TO_ADDR
// y := GetY ( building ) ;
58342: LD_ADDR_VAR 0 6
58346: PUSH
58347: LD_VAR 0 2
58351: PPUSH
58352: CALL_OW 251
58356: ST_TO_ADDR
// d := GetDir ( building ) ;
58357: LD_ADDR_VAR 0 8
58361: PUSH
58362: LD_VAR 0 2
58366: PPUSH
58367: CALL_OW 254
58371: ST_TO_ADDR
// r := 4 ;
58372: LD_ADDR_VAR 0 9
58376: PUSH
58377: LD_INT 4
58379: ST_TO_ADDR
// for i := 1 to 5 do
58380: LD_ADDR_VAR 0 10
58384: PUSH
58385: DOUBLE
58386: LD_INT 1
58388: DEC
58389: ST_TO_ADDR
58390: LD_INT 5
58392: PUSH
58393: FOR_TO
58394: IFFALSE 58551
// begin _x := ShiftX ( x , d , r + i ) ;
58396: LD_ADDR_VAR 0 5
58400: PUSH
58401: LD_VAR 0 4
58405: PPUSH
58406: LD_VAR 0 8
58410: PPUSH
58411: LD_VAR 0 9
58415: PUSH
58416: LD_VAR 0 10
58420: PLUS
58421: PPUSH
58422: CALL_OW 272
58426: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
58427: LD_ADDR_VAR 0 7
58431: PUSH
58432: LD_VAR 0 6
58436: PPUSH
58437: LD_VAR 0 8
58441: PPUSH
58442: LD_VAR 0 9
58446: PUSH
58447: LD_VAR 0 10
58451: PLUS
58452: PPUSH
58453: CALL_OW 273
58457: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
58458: LD_VAR 0 5
58462: PPUSH
58463: LD_VAR 0 7
58467: PPUSH
58468: CALL_OW 488
58472: PUSH
58473: LD_VAR 0 5
58477: PPUSH
58478: LD_VAR 0 7
58482: PPUSH
58483: CALL_OW 428
58487: PPUSH
58488: CALL_OW 247
58492: PUSH
58493: LD_INT 3
58495: PUSH
58496: LD_INT 2
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: IN
58503: NOT
58504: AND
58505: IFFALSE 58549
// begin ComMoveXY ( unit , _x , _y ) ;
58507: LD_VAR 0 1
58511: PPUSH
58512: LD_VAR 0 5
58516: PPUSH
58517: LD_VAR 0 7
58521: PPUSH
58522: CALL_OW 111
// result := [ _x , _y ] ;
58526: LD_ADDR_VAR 0 3
58530: PUSH
58531: LD_VAR 0 5
58535: PUSH
58536: LD_VAR 0 7
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: ST_TO_ADDR
// exit ;
58545: POP
58546: POP
58547: GO 58553
// end ; end ;
58549: GO 58393
58551: POP
58552: POP
// end ;
58553: LD_VAR 0 3
58557: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
58558: LD_INT 0
58560: PPUSH
58561: PPUSH
58562: PPUSH
// result := 0 ;
58563: LD_ADDR_VAR 0 3
58567: PUSH
58568: LD_INT 0
58570: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
58571: LD_VAR 0 1
58575: PUSH
58576: LD_INT 0
58578: LESS
58579: PUSH
58580: LD_VAR 0 1
58584: PUSH
58585: LD_INT 8
58587: GREATER
58588: OR
58589: PUSH
58590: LD_VAR 0 2
58594: PUSH
58595: LD_INT 0
58597: LESS
58598: OR
58599: PUSH
58600: LD_VAR 0 2
58604: PUSH
58605: LD_INT 8
58607: GREATER
58608: OR
58609: IFFALSE 58613
// exit ;
58611: GO 58688
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
58613: LD_ADDR_VAR 0 4
58617: PUSH
58618: LD_INT 22
58620: PUSH
58621: LD_VAR 0 2
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PPUSH
58630: CALL_OW 69
58634: PUSH
58635: FOR_IN
58636: IFFALSE 58686
// begin un := UnitShoot ( i ) ;
58638: LD_ADDR_VAR 0 5
58642: PUSH
58643: LD_VAR 0 4
58647: PPUSH
58648: CALL_OW 504
58652: ST_TO_ADDR
// if GetSide ( un ) = side1 then
58653: LD_VAR 0 5
58657: PPUSH
58658: CALL_OW 255
58662: PUSH
58663: LD_VAR 0 1
58667: EQUAL
58668: IFFALSE 58684
// begin result := un ;
58670: LD_ADDR_VAR 0 3
58674: PUSH
58675: LD_VAR 0 5
58679: ST_TO_ADDR
// exit ;
58680: POP
58681: POP
58682: GO 58688
// end ; end ;
58684: GO 58635
58686: POP
58687: POP
// end ;
58688: LD_VAR 0 3
58692: RET
// export function GetCargoBay ( units ) ; begin
58693: LD_INT 0
58695: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
58696: LD_ADDR_VAR 0 2
58700: PUSH
58701: LD_VAR 0 1
58705: PPUSH
58706: LD_INT 2
58708: PUSH
58709: LD_INT 34
58711: PUSH
58712: LD_INT 12
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 34
58721: PUSH
58722: LD_INT 51
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 34
58731: PUSH
58732: LD_INT 32
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 34
58741: PUSH
58742: LD_EXP 71
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: PPUSH
58758: CALL_OW 72
58762: ST_TO_ADDR
// end ;
58763: LD_VAR 0 2
58767: RET
// export function Negate ( value ) ; begin
58768: LD_INT 0
58770: PPUSH
// result := not value ;
58771: LD_ADDR_VAR 0 2
58775: PUSH
58776: LD_VAR 0 1
58780: NOT
58781: ST_TO_ADDR
// end ;
58782: LD_VAR 0 2
58786: RET
// export function Inc ( value ) ; begin
58787: LD_INT 0
58789: PPUSH
// result := value + 1 ;
58790: LD_ADDR_VAR 0 2
58794: PUSH
58795: LD_VAR 0 1
58799: PUSH
58800: LD_INT 1
58802: PLUS
58803: ST_TO_ADDR
// end ;
58804: LD_VAR 0 2
58808: RET
// export function Dec ( value ) ; begin
58809: LD_INT 0
58811: PPUSH
// result := value - 1 ;
58812: LD_ADDR_VAR 0 2
58816: PUSH
58817: LD_VAR 0 1
58821: PUSH
58822: LD_INT 1
58824: MINUS
58825: ST_TO_ADDR
// end ;
58826: LD_VAR 0 2
58830: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
58831: LD_INT 0
58833: PPUSH
58834: PPUSH
58835: PPUSH
58836: PPUSH
58837: PPUSH
58838: PPUSH
58839: PPUSH
58840: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
58841: LD_VAR 0 1
58845: PPUSH
58846: LD_VAR 0 2
58850: PPUSH
58851: CALL_OW 488
58855: NOT
58856: PUSH
58857: LD_VAR 0 3
58861: PPUSH
58862: LD_VAR 0 4
58866: PPUSH
58867: CALL_OW 488
58871: NOT
58872: OR
58873: IFFALSE 58886
// begin result := - 1 ;
58875: LD_ADDR_VAR 0 5
58879: PUSH
58880: LD_INT 1
58882: NEG
58883: ST_TO_ADDR
// exit ;
58884: GO 59121
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
58886: LD_ADDR_VAR 0 12
58890: PUSH
58891: LD_VAR 0 1
58895: PPUSH
58896: LD_VAR 0 2
58900: PPUSH
58901: LD_VAR 0 3
58905: PPUSH
58906: LD_VAR 0 4
58910: PPUSH
58911: CALL 57969 0 4
58915: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
58916: LD_ADDR_VAR 0 11
58920: PUSH
58921: LD_VAR 0 1
58925: PPUSH
58926: LD_VAR 0 2
58930: PPUSH
58931: LD_VAR 0 12
58935: PUSH
58936: LD_INT 1
58938: ARRAY
58939: PPUSH
58940: LD_VAR 0 12
58944: PUSH
58945: LD_INT 2
58947: ARRAY
58948: PPUSH
58949: CALL_OW 298
58953: ST_TO_ADDR
// distance := 9999 ;
58954: LD_ADDR_VAR 0 10
58958: PUSH
58959: LD_INT 9999
58961: ST_TO_ADDR
// for i := 0 to 5 do
58962: LD_ADDR_VAR 0 6
58966: PUSH
58967: DOUBLE
58968: LD_INT 0
58970: DEC
58971: ST_TO_ADDR
58972: LD_INT 5
58974: PUSH
58975: FOR_TO
58976: IFFALSE 59119
// begin _x := ShiftX ( x1 , i , centerDist ) ;
58978: LD_ADDR_VAR 0 7
58982: PUSH
58983: LD_VAR 0 1
58987: PPUSH
58988: LD_VAR 0 6
58992: PPUSH
58993: LD_VAR 0 11
58997: PPUSH
58998: CALL_OW 272
59002: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
59003: LD_ADDR_VAR 0 8
59007: PUSH
59008: LD_VAR 0 2
59012: PPUSH
59013: LD_VAR 0 6
59017: PPUSH
59018: LD_VAR 0 11
59022: PPUSH
59023: CALL_OW 273
59027: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59028: LD_VAR 0 7
59032: PPUSH
59033: LD_VAR 0 8
59037: PPUSH
59038: CALL_OW 488
59042: NOT
59043: IFFALSE 59047
// continue ;
59045: GO 58975
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
59047: LD_ADDR_VAR 0 9
59051: PUSH
59052: LD_VAR 0 12
59056: PUSH
59057: LD_INT 1
59059: ARRAY
59060: PPUSH
59061: LD_VAR 0 12
59065: PUSH
59066: LD_INT 2
59068: ARRAY
59069: PPUSH
59070: LD_VAR 0 7
59074: PPUSH
59075: LD_VAR 0 8
59079: PPUSH
59080: CALL_OW 298
59084: ST_TO_ADDR
// if tmp < distance then
59085: LD_VAR 0 9
59089: PUSH
59090: LD_VAR 0 10
59094: LESS
59095: IFFALSE 59117
// begin result := i ;
59097: LD_ADDR_VAR 0 5
59101: PUSH
59102: LD_VAR 0 6
59106: ST_TO_ADDR
// distance := tmp ;
59107: LD_ADDR_VAR 0 10
59111: PUSH
59112: LD_VAR 0 9
59116: ST_TO_ADDR
// end ; end ;
59117: GO 58975
59119: POP
59120: POP
// end ;
59121: LD_VAR 0 5
59125: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59126: LD_INT 0
59128: PPUSH
59129: PPUSH
// if not driver or not IsInUnit ( driver ) then
59130: LD_VAR 0 1
59134: NOT
59135: PUSH
59136: LD_VAR 0 1
59140: PPUSH
59141: CALL_OW 310
59145: NOT
59146: OR
59147: IFFALSE 59151
// exit ;
59149: GO 59241
// vehicle := IsInUnit ( driver ) ;
59151: LD_ADDR_VAR 0 3
59155: PUSH
59156: LD_VAR 0 1
59160: PPUSH
59161: CALL_OW 310
59165: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59166: LD_VAR 0 1
59170: PPUSH
59171: LD_STRING \
59173: PUSH
59174: LD_INT 0
59176: PUSH
59177: LD_INT 0
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: LD_INT 0
59185: PUSH
59186: LD_INT 0
59188: PUSH
59189: LD_INT 0
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: PUSH
59201: LD_STRING E
59203: PUSH
59204: LD_INT 0
59206: PUSH
59207: LD_INT 0
59209: PUSH
59210: LD_VAR 0 3
59214: PUSH
59215: LD_INT 0
59217: PUSH
59218: LD_INT 0
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PPUSH
59237: CALL_OW 446
// end ;
59241: LD_VAR 0 2
59245: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59246: LD_INT 0
59248: PPUSH
59249: PPUSH
// if not driver or not IsInUnit ( driver ) then
59250: LD_VAR 0 1
59254: NOT
59255: PUSH
59256: LD_VAR 0 1
59260: PPUSH
59261: CALL_OW 310
59265: NOT
59266: OR
59267: IFFALSE 59271
// exit ;
59269: GO 59361
// vehicle := IsInUnit ( driver ) ;
59271: LD_ADDR_VAR 0 3
59275: PUSH
59276: LD_VAR 0 1
59280: PPUSH
59281: CALL_OW 310
59285: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59286: LD_VAR 0 1
59290: PPUSH
59291: LD_STRING \
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: LD_INT 0
59299: PUSH
59300: LD_INT 0
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: LD_INT 0
59308: PUSH
59309: LD_INT 0
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: PUSH
59321: LD_STRING E
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: LD_INT 0
59329: PUSH
59330: LD_VAR 0 3
59334: PUSH
59335: LD_INT 0
59337: PUSH
59338: LD_INT 0
59340: PUSH
59341: LD_INT 0
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PPUSH
59357: CALL_OW 447
// end ;
59361: LD_VAR 0 2
59365: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
59366: LD_INT 0
59368: PPUSH
59369: PPUSH
59370: PPUSH
// tmp := [ ] ;
59371: LD_ADDR_VAR 0 5
59375: PUSH
59376: EMPTY
59377: ST_TO_ADDR
// for i in units do
59378: LD_ADDR_VAR 0 4
59382: PUSH
59383: LD_VAR 0 1
59387: PUSH
59388: FOR_IN
59389: IFFALSE 59427
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
59391: LD_ADDR_VAR 0 5
59395: PUSH
59396: LD_VAR 0 5
59400: PPUSH
59401: LD_VAR 0 5
59405: PUSH
59406: LD_INT 1
59408: PLUS
59409: PPUSH
59410: LD_VAR 0 4
59414: PPUSH
59415: CALL_OW 256
59419: PPUSH
59420: CALL_OW 2
59424: ST_TO_ADDR
59425: GO 59388
59427: POP
59428: POP
// if not tmp then
59429: LD_VAR 0 5
59433: NOT
59434: IFFALSE 59438
// exit ;
59436: GO 59486
// if asc then
59438: LD_VAR 0 2
59442: IFFALSE 59466
// result := SortListByListAsc ( units , tmp ) else
59444: LD_ADDR_VAR 0 3
59448: PUSH
59449: LD_VAR 0 1
59453: PPUSH
59454: LD_VAR 0 5
59458: PPUSH
59459: CALL_OW 76
59463: ST_TO_ADDR
59464: GO 59486
// result := SortListByListDesc ( units , tmp ) ;
59466: LD_ADDR_VAR 0 3
59470: PUSH
59471: LD_VAR 0 1
59475: PPUSH
59476: LD_VAR 0 5
59480: PPUSH
59481: CALL_OW 77
59485: ST_TO_ADDR
// end ;
59486: LD_VAR 0 3
59490: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
59491: LD_INT 0
59493: PPUSH
59494: PPUSH
// task := GetTaskList ( mech ) ;
59495: LD_ADDR_VAR 0 4
59499: PUSH
59500: LD_VAR 0 1
59504: PPUSH
59505: CALL_OW 437
59509: ST_TO_ADDR
// if not task then
59510: LD_VAR 0 4
59514: NOT
59515: IFFALSE 59519
// exit ;
59517: GO 59561
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
59519: LD_ADDR_VAR 0 3
59523: PUSH
59524: LD_VAR 0 4
59528: PUSH
59529: LD_INT 1
59531: ARRAY
59532: PUSH
59533: LD_INT 1
59535: ARRAY
59536: PUSH
59537: LD_STRING r
59539: EQUAL
59540: PUSH
59541: LD_VAR 0 4
59545: PUSH
59546: LD_INT 1
59548: ARRAY
59549: PUSH
59550: LD_INT 4
59552: ARRAY
59553: PUSH
59554: LD_VAR 0 2
59558: EQUAL
59559: AND
59560: ST_TO_ADDR
// end ;
59561: LD_VAR 0 3
59565: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
59566: LD_INT 0
59568: PPUSH
// SetDir ( unit , d ) ;
59569: LD_VAR 0 1
59573: PPUSH
59574: LD_VAR 0 4
59578: PPUSH
59579: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
59583: LD_VAR 0 1
59587: PPUSH
59588: LD_VAR 0 2
59592: PPUSH
59593: LD_VAR 0 3
59597: PPUSH
59598: LD_VAR 0 5
59602: PPUSH
59603: CALL_OW 48
// end ;
59607: LD_VAR 0 6
59611: RET
// export function ToNaturalNumber ( number ) ; begin
59612: LD_INT 0
59614: PPUSH
// result := number div 1 ;
59615: LD_ADDR_VAR 0 2
59619: PUSH
59620: LD_VAR 0 1
59624: PUSH
59625: LD_INT 1
59627: DIV
59628: ST_TO_ADDR
// if number < 0 then
59629: LD_VAR 0 1
59633: PUSH
59634: LD_INT 0
59636: LESS
59637: IFFALSE 59647
// result := 0 ;
59639: LD_ADDR_VAR 0 2
59643: PUSH
59644: LD_INT 0
59646: ST_TO_ADDR
// end ;
59647: LD_VAR 0 2
59651: RET
// export function SortByClass ( units , class ) ; var un ; begin
59652: LD_INT 0
59654: PPUSH
59655: PPUSH
// if not units or not class then
59656: LD_VAR 0 1
59660: NOT
59661: PUSH
59662: LD_VAR 0 2
59666: NOT
59667: OR
59668: IFFALSE 59672
// exit ;
59670: GO 59767
// result := [ ] ;
59672: LD_ADDR_VAR 0 3
59676: PUSH
59677: EMPTY
59678: ST_TO_ADDR
// for un in units do
59679: LD_ADDR_VAR 0 4
59683: PUSH
59684: LD_VAR 0 1
59688: PUSH
59689: FOR_IN
59690: IFFALSE 59765
// if GetClass ( un ) = class then
59692: LD_VAR 0 4
59696: PPUSH
59697: CALL_OW 257
59701: PUSH
59702: LD_VAR 0 2
59706: EQUAL
59707: IFFALSE 59734
// result := Insert ( result , 1 , un ) else
59709: LD_ADDR_VAR 0 3
59713: PUSH
59714: LD_VAR 0 3
59718: PPUSH
59719: LD_INT 1
59721: PPUSH
59722: LD_VAR 0 4
59726: PPUSH
59727: CALL_OW 2
59731: ST_TO_ADDR
59732: GO 59763
// result := Replace ( result , result + 1 , un ) ;
59734: LD_ADDR_VAR 0 3
59738: PUSH
59739: LD_VAR 0 3
59743: PPUSH
59744: LD_VAR 0 3
59748: PUSH
59749: LD_INT 1
59751: PLUS
59752: PPUSH
59753: LD_VAR 0 4
59757: PPUSH
59758: CALL_OW 1
59762: ST_TO_ADDR
59763: GO 59689
59765: POP
59766: POP
// end ;
59767: LD_VAR 0 3
59771: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
59772: LD_INT 0
59774: PPUSH
59775: PPUSH
59776: PPUSH
59777: PPUSH
59778: PPUSH
59779: PPUSH
59780: PPUSH
// result := [ ] ;
59781: LD_ADDR_VAR 0 4
59785: PUSH
59786: EMPTY
59787: ST_TO_ADDR
// if x - r < 0 then
59788: LD_VAR 0 1
59792: PUSH
59793: LD_VAR 0 3
59797: MINUS
59798: PUSH
59799: LD_INT 0
59801: LESS
59802: IFFALSE 59814
// min_x := 0 else
59804: LD_ADDR_VAR 0 8
59808: PUSH
59809: LD_INT 0
59811: ST_TO_ADDR
59812: GO 59830
// min_x := x - r ;
59814: LD_ADDR_VAR 0 8
59818: PUSH
59819: LD_VAR 0 1
59823: PUSH
59824: LD_VAR 0 3
59828: MINUS
59829: ST_TO_ADDR
// if y - r < 0 then
59830: LD_VAR 0 2
59834: PUSH
59835: LD_VAR 0 3
59839: MINUS
59840: PUSH
59841: LD_INT 0
59843: LESS
59844: IFFALSE 59856
// min_y := 0 else
59846: LD_ADDR_VAR 0 7
59850: PUSH
59851: LD_INT 0
59853: ST_TO_ADDR
59854: GO 59872
// min_y := y - r ;
59856: LD_ADDR_VAR 0 7
59860: PUSH
59861: LD_VAR 0 2
59865: PUSH
59866: LD_VAR 0 3
59870: MINUS
59871: ST_TO_ADDR
// max_x := x + r ;
59872: LD_ADDR_VAR 0 9
59876: PUSH
59877: LD_VAR 0 1
59881: PUSH
59882: LD_VAR 0 3
59886: PLUS
59887: ST_TO_ADDR
// max_y := y + r ;
59888: LD_ADDR_VAR 0 10
59892: PUSH
59893: LD_VAR 0 2
59897: PUSH
59898: LD_VAR 0 3
59902: PLUS
59903: ST_TO_ADDR
// for _x = min_x to max_x do
59904: LD_ADDR_VAR 0 5
59908: PUSH
59909: DOUBLE
59910: LD_VAR 0 8
59914: DEC
59915: ST_TO_ADDR
59916: LD_VAR 0 9
59920: PUSH
59921: FOR_TO
59922: IFFALSE 60023
// for _y = min_y to max_y do
59924: LD_ADDR_VAR 0 6
59928: PUSH
59929: DOUBLE
59930: LD_VAR 0 7
59934: DEC
59935: ST_TO_ADDR
59936: LD_VAR 0 10
59940: PUSH
59941: FOR_TO
59942: IFFALSE 60019
// begin if not ValidHex ( _x , _y ) then
59944: LD_VAR 0 5
59948: PPUSH
59949: LD_VAR 0 6
59953: PPUSH
59954: CALL_OW 488
59958: NOT
59959: IFFALSE 59963
// continue ;
59961: GO 59941
// if GetResourceTypeXY ( _x , _y ) then
59963: LD_VAR 0 5
59967: PPUSH
59968: LD_VAR 0 6
59972: PPUSH
59973: CALL_OW 283
59977: IFFALSE 60017
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
59979: LD_ADDR_VAR 0 4
59983: PUSH
59984: LD_VAR 0 4
59988: PPUSH
59989: LD_VAR 0 4
59993: PUSH
59994: LD_INT 1
59996: PLUS
59997: PPUSH
59998: LD_VAR 0 5
60002: PUSH
60003: LD_VAR 0 6
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PPUSH
60012: CALL_OW 1
60016: ST_TO_ADDR
// end ;
60017: GO 59941
60019: POP
60020: POP
60021: GO 59921
60023: POP
60024: POP
// end ;
60025: LD_VAR 0 4
60029: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
60030: LD_INT 0
60032: PPUSH
60033: PPUSH
60034: PPUSH
60035: PPUSH
60036: PPUSH
60037: PPUSH
60038: PPUSH
60039: PPUSH
// if not units then
60040: LD_VAR 0 1
60044: NOT
60045: IFFALSE 60049
// exit ;
60047: GO 60575
// result := UnitFilter ( units , [ f_ok ] ) ;
60049: LD_ADDR_VAR 0 3
60053: PUSH
60054: LD_VAR 0 1
60058: PPUSH
60059: LD_INT 50
60061: PUSH
60062: EMPTY
60063: LIST
60064: PPUSH
60065: CALL_OW 72
60069: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
60070: LD_ADDR_VAR 0 8
60074: PUSH
60075: LD_VAR 0 1
60079: PUSH
60080: LD_INT 1
60082: ARRAY
60083: PPUSH
60084: CALL_OW 255
60088: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
60089: LD_ADDR_VAR 0 10
60093: PUSH
60094: LD_INT 29
60096: PUSH
60097: LD_EXP 74
60101: PUSH
60102: LD_INT 49
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: LIST
60109: ST_TO_ADDR
// if not result then
60110: LD_VAR 0 3
60114: NOT
60115: IFFALSE 60119
// exit ;
60117: GO 60575
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
60119: LD_ADDR_VAR 0 5
60123: PUSH
60124: LD_INT 81
60126: PUSH
60127: LD_VAR 0 8
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PPUSH
60136: CALL_OW 69
60140: ST_TO_ADDR
// for i in result do
60141: LD_ADDR_VAR 0 4
60145: PUSH
60146: LD_VAR 0 3
60150: PUSH
60151: FOR_IN
60152: IFFALSE 60573
// begin tag := GetTag ( i ) + 1 ;
60154: LD_ADDR_VAR 0 9
60158: PUSH
60159: LD_VAR 0 4
60163: PPUSH
60164: CALL_OW 110
60168: PUSH
60169: LD_INT 1
60171: PLUS
60172: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
60173: LD_ADDR_VAR 0 7
60177: PUSH
60178: LD_VAR 0 4
60182: PPUSH
60183: CALL_OW 250
60187: PPUSH
60188: LD_VAR 0 4
60192: PPUSH
60193: CALL_OW 251
60197: PPUSH
60198: LD_INT 6
60200: PPUSH
60201: CALL 59772 0 3
60205: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
60206: LD_VAR 0 4
60210: PPUSH
60211: CALL_OW 247
60215: PUSH
60216: LD_INT 2
60218: EQUAL
60219: PUSH
60220: LD_VAR 0 7
60224: AND
60225: PUSH
60226: LD_VAR 0 4
60230: PPUSH
60231: CALL_OW 264
60235: PUSH
60236: LD_VAR 0 10
60240: IN
60241: NOT
60242: AND
60243: IFFALSE 60282
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
60245: LD_VAR 0 4
60249: PPUSH
60250: LD_VAR 0 7
60254: PUSH
60255: LD_INT 1
60257: ARRAY
60258: PUSH
60259: LD_INT 1
60261: ARRAY
60262: PPUSH
60263: LD_VAR 0 7
60267: PUSH
60268: LD_INT 1
60270: ARRAY
60271: PUSH
60272: LD_INT 2
60274: ARRAY
60275: PPUSH
60276: CALL_OW 116
60280: GO 60571
// if path > tag then
60282: LD_VAR 0 2
60286: PUSH
60287: LD_VAR 0 9
60291: GREATER
60292: IFFALSE 60500
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
60294: LD_ADDR_VAR 0 6
60298: PUSH
60299: LD_VAR 0 5
60303: PPUSH
60304: LD_INT 91
60306: PUSH
60307: LD_VAR 0 4
60311: PUSH
60312: LD_INT 8
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: LIST
60319: PPUSH
60320: CALL_OW 72
60324: ST_TO_ADDR
// if nearEnemy then
60325: LD_VAR 0 6
60329: IFFALSE 60398
// begin if GetWeapon ( i ) = ru_time_lapser then
60331: LD_VAR 0 4
60335: PPUSH
60336: CALL_OW 264
60340: PUSH
60341: LD_INT 49
60343: EQUAL
60344: IFFALSE 60372
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
60346: LD_VAR 0 4
60350: PPUSH
60351: LD_VAR 0 6
60355: PPUSH
60356: LD_VAR 0 4
60360: PPUSH
60361: CALL_OW 74
60365: PPUSH
60366: CALL_OW 112
60370: GO 60396
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
60372: LD_VAR 0 4
60376: PPUSH
60377: LD_VAR 0 6
60381: PPUSH
60382: LD_VAR 0 4
60386: PPUSH
60387: CALL_OW 74
60391: PPUSH
60392: CALL_OW 115
// end else
60396: GO 60498
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
60398: LD_VAR 0 4
60402: PPUSH
60403: LD_VAR 0 2
60407: PUSH
60408: LD_VAR 0 9
60412: ARRAY
60413: PUSH
60414: LD_INT 1
60416: ARRAY
60417: PPUSH
60418: LD_VAR 0 2
60422: PUSH
60423: LD_VAR 0 9
60427: ARRAY
60428: PUSH
60429: LD_INT 2
60431: ARRAY
60432: PPUSH
60433: CALL_OW 297
60437: PUSH
60438: LD_INT 6
60440: GREATER
60441: IFFALSE 60484
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
60443: LD_VAR 0 4
60447: PPUSH
60448: LD_VAR 0 2
60452: PUSH
60453: LD_VAR 0 9
60457: ARRAY
60458: PUSH
60459: LD_INT 1
60461: ARRAY
60462: PPUSH
60463: LD_VAR 0 2
60467: PUSH
60468: LD_VAR 0 9
60472: ARRAY
60473: PUSH
60474: LD_INT 2
60476: ARRAY
60477: PPUSH
60478: CALL_OW 114
60482: GO 60498
// SetTag ( i , tag ) ;
60484: LD_VAR 0 4
60488: PPUSH
60489: LD_VAR 0 9
60493: PPUSH
60494: CALL_OW 109
// end else
60498: GO 60571
// if enemy then
60500: LD_VAR 0 5
60504: IFFALSE 60571
// begin if GetWeapon ( i ) = ru_time_lapser then
60506: LD_VAR 0 4
60510: PPUSH
60511: CALL_OW 264
60515: PUSH
60516: LD_INT 49
60518: EQUAL
60519: IFFALSE 60547
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
60521: LD_VAR 0 4
60525: PPUSH
60526: LD_VAR 0 5
60530: PPUSH
60531: LD_VAR 0 4
60535: PPUSH
60536: CALL_OW 74
60540: PPUSH
60541: CALL_OW 112
60545: GO 60571
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
60547: LD_VAR 0 4
60551: PPUSH
60552: LD_VAR 0 5
60556: PPUSH
60557: LD_VAR 0 4
60561: PPUSH
60562: CALL_OW 74
60566: PPUSH
60567: CALL_OW 115
// end ; end ;
60571: GO 60151
60573: POP
60574: POP
// end ;
60575: LD_VAR 0 3
60579: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
60580: LD_INT 0
60582: PPUSH
60583: PPUSH
60584: PPUSH
// if not unit or IsInUnit ( unit ) then
60585: LD_VAR 0 1
60589: NOT
60590: PUSH
60591: LD_VAR 0 1
60595: PPUSH
60596: CALL_OW 310
60600: OR
60601: IFFALSE 60605
// exit ;
60603: GO 60696
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
60605: LD_ADDR_VAR 0 4
60609: PUSH
60610: LD_VAR 0 1
60614: PPUSH
60615: CALL_OW 250
60619: PPUSH
60620: LD_VAR 0 2
60624: PPUSH
60625: LD_INT 1
60627: PPUSH
60628: CALL_OW 272
60632: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
60633: LD_ADDR_VAR 0 5
60637: PUSH
60638: LD_VAR 0 1
60642: PPUSH
60643: CALL_OW 251
60647: PPUSH
60648: LD_VAR 0 2
60652: PPUSH
60653: LD_INT 1
60655: PPUSH
60656: CALL_OW 273
60660: ST_TO_ADDR
// if ValidHex ( x , y ) then
60661: LD_VAR 0 4
60665: PPUSH
60666: LD_VAR 0 5
60670: PPUSH
60671: CALL_OW 488
60675: IFFALSE 60696
// ComTurnXY ( unit , x , y ) ;
60677: LD_VAR 0 1
60681: PPUSH
60682: LD_VAR 0 4
60686: PPUSH
60687: LD_VAR 0 5
60691: PPUSH
60692: CALL_OW 118
// end ;
60696: LD_VAR 0 3
60700: RET
// export function SeeUnits ( side , units ) ; var i ; begin
60701: LD_INT 0
60703: PPUSH
60704: PPUSH
// result := false ;
60705: LD_ADDR_VAR 0 3
60709: PUSH
60710: LD_INT 0
60712: ST_TO_ADDR
// if not units then
60713: LD_VAR 0 2
60717: NOT
60718: IFFALSE 60722
// exit ;
60720: GO 60767
// for i in units do
60722: LD_ADDR_VAR 0 4
60726: PUSH
60727: LD_VAR 0 2
60731: PUSH
60732: FOR_IN
60733: IFFALSE 60765
// if See ( side , i ) then
60735: LD_VAR 0 1
60739: PPUSH
60740: LD_VAR 0 4
60744: PPUSH
60745: CALL_OW 292
60749: IFFALSE 60763
// begin result := true ;
60751: LD_ADDR_VAR 0 3
60755: PUSH
60756: LD_INT 1
60758: ST_TO_ADDR
// exit ;
60759: POP
60760: POP
60761: GO 60767
// end ;
60763: GO 60732
60765: POP
60766: POP
// end ;
60767: LD_VAR 0 3
60771: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
60772: LD_INT 0
60774: PPUSH
60775: PPUSH
60776: PPUSH
60777: PPUSH
// if not unit or not points then
60778: LD_VAR 0 1
60782: NOT
60783: PUSH
60784: LD_VAR 0 2
60788: NOT
60789: OR
60790: IFFALSE 60794
// exit ;
60792: GO 60884
// dist := 99999 ;
60794: LD_ADDR_VAR 0 5
60798: PUSH
60799: LD_INT 99999
60801: ST_TO_ADDR
// for i in points do
60802: LD_ADDR_VAR 0 4
60806: PUSH
60807: LD_VAR 0 2
60811: PUSH
60812: FOR_IN
60813: IFFALSE 60882
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
60815: LD_ADDR_VAR 0 6
60819: PUSH
60820: LD_VAR 0 1
60824: PPUSH
60825: LD_VAR 0 4
60829: PUSH
60830: LD_INT 1
60832: ARRAY
60833: PPUSH
60834: LD_VAR 0 4
60838: PUSH
60839: LD_INT 2
60841: ARRAY
60842: PPUSH
60843: CALL_OW 297
60847: ST_TO_ADDR
// if tmpDist < dist then
60848: LD_VAR 0 6
60852: PUSH
60853: LD_VAR 0 5
60857: LESS
60858: IFFALSE 60880
// begin result := i ;
60860: LD_ADDR_VAR 0 3
60864: PUSH
60865: LD_VAR 0 4
60869: ST_TO_ADDR
// dist := tmpDist ;
60870: LD_ADDR_VAR 0 5
60874: PUSH
60875: LD_VAR 0 6
60879: ST_TO_ADDR
// end ; end ;
60880: GO 60812
60882: POP
60883: POP
// end ;
60884: LD_VAR 0 3
60888: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
60889: LD_INT 0
60891: PPUSH
// uc_side := side ;
60892: LD_ADDR_OWVAR 20
60896: PUSH
60897: LD_VAR 0 1
60901: ST_TO_ADDR
// uc_nation := 3 ;
60902: LD_ADDR_OWVAR 21
60906: PUSH
60907: LD_INT 3
60909: ST_TO_ADDR
// vc_chassis := 25 ;
60910: LD_ADDR_OWVAR 37
60914: PUSH
60915: LD_INT 25
60917: ST_TO_ADDR
// vc_engine := engine_siberite ;
60918: LD_ADDR_OWVAR 39
60922: PUSH
60923: LD_INT 3
60925: ST_TO_ADDR
// vc_control := control_computer ;
60926: LD_ADDR_OWVAR 38
60930: PUSH
60931: LD_INT 3
60933: ST_TO_ADDR
// vc_weapon := 59 ;
60934: LD_ADDR_OWVAR 40
60938: PUSH
60939: LD_INT 59
60941: ST_TO_ADDR
// result := CreateVehicle ;
60942: LD_ADDR_VAR 0 5
60946: PUSH
60947: CALL_OW 45
60951: ST_TO_ADDR
// SetDir ( result , d ) ;
60952: LD_VAR 0 5
60956: PPUSH
60957: LD_VAR 0 4
60961: PPUSH
60962: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
60966: LD_VAR 0 5
60970: PPUSH
60971: LD_VAR 0 2
60975: PPUSH
60976: LD_VAR 0 3
60980: PPUSH
60981: LD_INT 0
60983: PPUSH
60984: CALL_OW 48
// end ;
60988: LD_VAR 0 5
60992: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
60993: LD_INT 0
60995: PPUSH
60996: PPUSH
60997: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
60998: LD_ADDR_VAR 0 2
61002: PUSH
61003: LD_INT 0
61005: PUSH
61006: LD_INT 0
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: LD_INT 0
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
61021: LD_VAR 0 1
61025: NOT
61026: PUSH
61027: LD_VAR 0 1
61031: PPUSH
61032: CALL_OW 264
61036: PUSH
61037: LD_INT 12
61039: PUSH
61040: LD_INT 51
61042: PUSH
61043: LD_INT 32
61045: PUSH
61046: LD_EXP 71
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: IN
61057: NOT
61058: OR
61059: IFFALSE 61063
// exit ;
61061: GO 61161
// for i := 1 to 3 do
61063: LD_ADDR_VAR 0 3
61067: PUSH
61068: DOUBLE
61069: LD_INT 1
61071: DEC
61072: ST_TO_ADDR
61073: LD_INT 3
61075: PUSH
61076: FOR_TO
61077: IFFALSE 61159
// begin tmp := GetCargo ( cargo , i ) ;
61079: LD_ADDR_VAR 0 4
61083: PUSH
61084: LD_VAR 0 1
61088: PPUSH
61089: LD_VAR 0 3
61093: PPUSH
61094: CALL_OW 289
61098: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
61099: LD_ADDR_VAR 0 2
61103: PUSH
61104: LD_VAR 0 2
61108: PPUSH
61109: LD_VAR 0 3
61113: PPUSH
61114: LD_VAR 0 4
61118: PPUSH
61119: CALL_OW 1
61123: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
61124: LD_ADDR_VAR 0 2
61128: PUSH
61129: LD_VAR 0 2
61133: PPUSH
61134: LD_INT 4
61136: PPUSH
61137: LD_VAR 0 2
61141: PUSH
61142: LD_INT 4
61144: ARRAY
61145: PUSH
61146: LD_VAR 0 4
61150: PLUS
61151: PPUSH
61152: CALL_OW 1
61156: ST_TO_ADDR
// end ;
61157: GO 61076
61159: POP
61160: POP
// end ;
61161: LD_VAR 0 2
61165: RET
// export function Length ( array ) ; begin
61166: LD_INT 0
61168: PPUSH
// result := array + 0 ;
61169: LD_ADDR_VAR 0 2
61173: PUSH
61174: LD_VAR 0 1
61178: PUSH
61179: LD_INT 0
61181: PLUS
61182: ST_TO_ADDR
// end ;
61183: LD_VAR 0 2
61187: RET
