// export mineCounter ; every 0 0$1 do var i , tmp , task ;
   0: GO 2
   2: DISABLE
   3: LD_INT 0
   5: PPUSH
   6: PPUSH
   7: PPUSH
// begin mineCounter := 5 ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 5
  15: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
  16: LD_INT 35
  18: PPUSH
  19: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , nation_arabian ] , [ f_class , class_soldier ] ] ) ;
  23: LD_ADDR_VAR 0 2
  27: PUSH
  28: LD_INT 22
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: EMPTY
  35: LIST
  36: LIST
  37: PUSH
  38: LD_INT 23
  40: PUSH
  41: LD_INT 2
  43: PUSH
  44: EMPTY
  45: LIST
  46: LIST
  47: PUSH
  48: LD_INT 25
  50: PUSH
  51: LD_INT 1
  53: PUSH
  54: EMPTY
  55: LIST
  56: LIST
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: PPUSH
  63: CALL_OW 69
  67: ST_TO_ADDR
// if not tmp then
  68: LD_VAR 0 2
  72: NOT
  73: IFFALSE 77
// continue ;
  75: GO 16
// for i in tmp do
  77: LD_ADDR_VAR 0 1
  81: PUSH
  82: LD_VAR 0 2
  86: PUSH
  87: FOR_IN
  88: IFFALSE 277
// begin task := GetTaskList ( i ) ;
  90: LD_ADDR_VAR 0 3
  94: PUSH
  95: LD_VAR 0 1
  99: PPUSH
 100: CALL_OW 437
 104: ST_TO_ADDR
// if not task then
 105: LD_VAR 0 3
 109: NOT
 110: IFFALSE 126
// begin SetTag ( i , 0 ) ;
 112: LD_VAR 0 1
 116: PPUSH
 117: LD_INT 0
 119: PPUSH
 120: CALL_OW 109
// continue ;
 124: GO 87
// end ; if GetTag ( i ) = 1 and task [ 1 ] [ 1 ] <> p then
 126: LD_VAR 0 1
 130: PPUSH
 131: CALL_OW 110
 135: PUSH
 136: LD_INT 1
 138: EQUAL
 139: PUSH
 140: LD_VAR 0 3
 144: PUSH
 145: LD_INT 1
 147: ARRAY
 148: PUSH
 149: LD_INT 1
 151: ARRAY
 152: PUSH
 153: LD_STRING p
 155: NONEQUAL
 156: AND
 157: IFFALSE 173
// begin SetTag ( i , 0 ) ;
 159: LD_VAR 0 1
 163: PPUSH
 164: LD_INT 0
 166: PPUSH
 167: CALL_OW 109
// continue ;
 171: GO 87
// end ; if GetTag ( i ) <> 1 and task [ 1 ] [ 1 ] = p then
 173: LD_VAR 0 1
 177: PPUSH
 178: CALL_OW 110
 182: PUSH
 183: LD_INT 1
 185: NONEQUAL
 186: PUSH
 187: LD_VAR 0 3
 191: PUSH
 192: LD_INT 1
 194: ARRAY
 195: PUSH
 196: LD_INT 1
 198: ARRAY
 199: PUSH
 200: LD_STRING p
 202: EQUAL
 203: AND
 204: IFFALSE 275
// begin SetTag ( i , 1 ) ;
 206: LD_VAR 0 1
 210: PPUSH
 211: LD_INT 1
 213: PPUSH
 214: CALL_OW 109
// RaiseSailEventCustom ( 1 , i , task [ 1 ] [ 2 ] , task [ 1 ] [ 3 ] , task [ 1 ] [ 4 ] , 0 , 0 ) ;
 218: LD_INT 1
 220: PPUSH
 221: LD_VAR 0 1
 225: PPUSH
 226: LD_VAR 0 3
 230: PUSH
 231: LD_INT 1
 233: ARRAY
 234: PUSH
 235: LD_INT 2
 237: ARRAY
 238: PPUSH
 239: LD_VAR 0 3
 243: PUSH
 244: LD_INT 1
 246: ARRAY
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PPUSH
 252: LD_VAR 0 3
 256: PUSH
 257: LD_INT 1
 259: ARRAY
 260: PUSH
 261: LD_INT 4
 263: ARRAY
 264: PPUSH
 265: LD_INT 0
 267: PPUSH
 268: LD_INT 0
 270: PPUSH
 271: CALL_OW 595
// end ; end ;
 275: GO 87
 277: POP
 278: POP
// until mineCounter = 0 ;
 279: LD_EXP 1
 283: PUSH
 284: LD_INT 0
 286: EQUAL
 287: IFFALSE 16
// end ;
 289: PPOPN 3
 291: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = 1 then
 292: LD_VAR 0 1
 296: PUSH
 297: LD_INT 1
 299: EQUAL
 300: IFFALSE 388
// begin repeat wait ( 0 0$1 ) ;
 302: LD_INT 35
 304: PPUSH
 305: CALL_OW 67
// if MineAtPos ( p2 , p3 ) or MineAtRange ( GetX ( p4 ) , GetY ( p4 ) ) then
 309: LD_VAR 0 3
 313: PPUSH
 314: LD_VAR 0 4
 318: PPUSH
 319: CALL_OW 458
 323: PUSH
 324: LD_VAR 0 5
 328: PPUSH
 329: CALL_OW 250
 333: PPUSH
 334: LD_VAR 0 5
 338: PPUSH
 339: CALL_OW 251
 343: PPUSH
 344: CALL 391 0 2
 348: OR
 349: IFFALSE 353
// break ;
 351: GO 374
// if GetTag ( p1 ) <> 1 then
 353: LD_VAR 0 2
 357: PPUSH
 358: CALL_OW 110
 362: PUSH
 363: LD_INT 1
 365: NONEQUAL
 366: IFFALSE 370
// exit ;
 368: GO 388
// until false ;
 370: LD_INT 0
 372: IFFALSE 302
// mineCounter := mineCounter - 1 ;
 374: LD_ADDR_EXP 1
 378: PUSH
 379: LD_EXP 1
 383: PUSH
 384: LD_INT 1
 386: MINUS
 387: ST_TO_ADDR
// end ; end ;
 388: PPOPN 7
 390: END
// export function MineAtRange ( x , y ) ; var _x , _y , _d ; begin
 391: LD_INT 0
 393: PPUSH
 394: PPUSH
 395: PPUSH
 396: PPUSH
// for _d := 0 to 5 do
 397: LD_ADDR_VAR 0 6
 401: PUSH
 402: DOUBLE
 403: LD_INT 0
 405: DEC
 406: ST_TO_ADDR
 407: LD_INT 5
 409: PUSH
 410: FOR_TO
 411: IFFALSE 519
// for _x := - 3 to 3 do
 413: LD_ADDR_VAR 0 4
 417: PUSH
 418: DOUBLE
 419: LD_INT 3
 421: NEG
 422: DEC
 423: ST_TO_ADDR
 424: LD_INT 3
 426: PUSH
 427: FOR_TO
 428: IFFALSE 515
// for _y := - 3 to 3 do
 430: LD_ADDR_VAR 0 5
 434: PUSH
 435: DOUBLE
 436: LD_INT 3
 438: NEG
 439: DEC
 440: ST_TO_ADDR
 441: LD_INT 3
 443: PUSH
 444: FOR_TO
 445: IFFALSE 511
// if MineAtPos ( ShiftX ( x , _d , _x ) , ShiftY ( y , _d , _y ) ) then
 447: LD_VAR 0 1
 451: PPUSH
 452: LD_VAR 0 6
 456: PPUSH
 457: LD_VAR 0 4
 461: PPUSH
 462: CALL_OW 272
 466: PPUSH
 467: LD_VAR 0 2
 471: PPUSH
 472: LD_VAR 0 6
 476: PPUSH
 477: LD_VAR 0 5
 481: PPUSH
 482: CALL_OW 273
 486: PPUSH
 487: CALL_OW 458
 491: IFFALSE 509
// begin result := true ;
 493: LD_ADDR_VAR 0 3
 497: PUSH
 498: LD_INT 1
 500: ST_TO_ADDR
// exit ;
 501: POP
 502: POP
 503: POP
 504: POP
 505: POP
 506: POP
 507: GO 521
// end ;
 509: GO 444
 511: POP
 512: POP
 513: GO 427
 515: POP
 516: POP
 517: GO 410
 519: POP
 520: POP
// end ;
 521: LD_VAR 0 3
 525: RET
// every 0 0$2 do var un , x , y , _r , _x , _y , _d , __x , __y ;
 526: GO 528
 528: DISABLE
 529: LD_INT 0
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
 536: PPUSH
 537: PPUSH
 538: PPUSH
 539: PPUSH
// begin x := 23 ;
 540: LD_ADDR_VAR 0 2
 544: PUSH
 545: LD_INT 23
 547: ST_TO_ADDR
// y := 19 ;
 548: LD_ADDR_VAR 0 3
 552: PUSH
 553: LD_INT 19
 555: ST_TO_ADDR
// uc_side := 8 ;
 556: LD_ADDR_OWVAR 20
 560: PUSH
 561: LD_INT 8
 563: ST_TO_ADDR
// uc_nation := 1 ;
 564: LD_ADDR_OWVAR 21
 568: PUSH
 569: LD_INT 1
 571: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
 572: LD_INT 0
 574: PPUSH
 575: LD_INT 1
 577: PPUSH
 578: CALL_OW 381
// for _r := 1 to 6 do
 582: LD_ADDR_VAR 0 4
 586: PUSH
 587: DOUBLE
 588: LD_INT 1
 590: DEC
 591: ST_TO_ADDR
 592: LD_INT 6
 594: PUSH
 595: FOR_TO
 596: IFFALSE 748
// begin for _x := - _r to _r do
 598: LD_ADDR_VAR 0 5
 602: PUSH
 603: DOUBLE
 604: LD_VAR 0 4
 608: NEG
 609: DEC
 610: ST_TO_ADDR
 611: LD_VAR 0 4
 615: PUSH
 616: FOR_TO
 617: IFFALSE 744
// for _y := - _r to _r do
 619: LD_ADDR_VAR 0 6
 623: PUSH
 624: DOUBLE
 625: LD_VAR 0 4
 629: NEG
 630: DEC
 631: ST_TO_ADDR
 632: LD_VAR 0 4
 636: PUSH
 637: FOR_TO
 638: IFFALSE 740
// begin __x := x + _x ;
 640: LD_ADDR_VAR 0 8
 644: PUSH
 645: LD_VAR 0 2
 649: PUSH
 650: LD_VAR 0 5
 654: PLUS
 655: ST_TO_ADDR
// __y := y + _y ;
 656: LD_ADDR_VAR 0 9
 660: PUSH
 661: LD_VAR 0 3
 665: PUSH
 666: LD_VAR 0 6
 670: PLUS
 671: ST_TO_ADDR
// if HexInfo ( __x , __y ) then
 672: LD_VAR 0 8
 676: PPUSH
 677: LD_VAR 0 9
 681: PPUSH
 682: CALL_OW 428
 686: IFFALSE 690
// continue ;
 688: GO 637
// wait ( 1 ) ;
 690: LD_INT 1
 692: PPUSH
 693: CALL_OW 67
// un := CreateHuman ;
 697: LD_ADDR_VAR 0 1
 701: PUSH
 702: CALL_OW 44
 706: ST_TO_ADDR
// PlaceUnitXY ( un , __x , __y , false ) ;
 707: LD_VAR 0 1
 711: PPUSH
 712: LD_VAR 0 8
 716: PPUSH
 717: LD_VAR 0 9
 721: PPUSH
 722: LD_INT 0
 724: PPUSH
 725: CALL_OW 48
// ComHold ( un ) ;
 729: LD_VAR 0 1
 733: PPUSH
 734: CALL_OW 140
// end ;
 738: GO 637
 740: POP
 741: POP
 742: GO 616
 744: POP
 745: POP
// end ;
 746: GO 595
 748: POP
 749: POP
// end ;
 750: PPOPN 9
 752: END
// export function PrepareAmericanConvoy ( soldiersAmount , engsAmount , mechsAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road , sols , engs , mechs , scis , enemySkillLevel , amConvoyTroops ; begin
 753: LD_INT 0
 755: PPUSH
 756: PPUSH
 757: PPUSH
 758: PPUSH
 759: PPUSH
 760: PPUSH
 761: PPUSH
 762: PPUSH
 763: PPUSH
 764: PPUSH
 765: PPUSH
// enemySkilllevel := 2 ;
 766: LD_ADDR_VAR 0 16
 770: PUSH
 771: LD_INT 2
 773: ST_TO_ADDR
// uc_side := 1 ;
 774: LD_ADDR_OWVAR 20
 778: PUSH
 779: LD_INT 1
 781: ST_TO_ADDR
// uc_nation := 1 ;
 782: LD_ADDR_OWVAR 21
 786: PUSH
 787: LD_INT 1
 789: ST_TO_ADDR
// hc_name :=  ;
 790: LD_ADDR_OWVAR 26
 794: PUSH
 795: LD_STRING 
 797: ST_TO_ADDR
// hc_gallery :=  ;
 798: LD_ADDR_OWVAR 33
 802: PUSH
 803: LD_STRING 
 805: ST_TO_ADDR
// for i := 1 to soldiersAmount do
 806: LD_ADDR_VAR 0 8
 810: PUSH
 811: DOUBLE
 812: LD_INT 1
 814: DEC
 815: ST_TO_ADDR
 816: LD_VAR 0 1
 820: PUSH
 821: FOR_TO
 822: IFFALSE 897
// begin PrepareSoldier ( false , enemySkillLevel ) ;
 824: LD_INT 0
 826: PPUSH
 827: LD_VAR 0 16
 831: PPUSH
 832: CALL_OW 381
// un = CreateHuman ;
 836: LD_ADDR_VAR 0 9
 840: PUSH
 841: CALL_OW 44
 845: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 846: LD_ADDR_VAR 0 17
 850: PUSH
 851: LD_VAR 0 17
 855: PUSH
 856: LD_VAR 0 9
 860: ADD
 861: ST_TO_ADDR
// sols := sols ^ un ;
 862: LD_ADDR_VAR 0 12
 866: PUSH
 867: LD_VAR 0 12
 871: PUSH
 872: LD_VAR 0 9
 876: ADD
 877: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 878: LD_VAR 0 9
 882: PPUSH
 883: LD_VAR 0 6
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 49
// end ;
 895: GO 821
 897: POP
 898: POP
// for i := 1 to engsAmount do
 899: LD_ADDR_VAR 0 8
 903: PUSH
 904: DOUBLE
 905: LD_INT 1
 907: DEC
 908: ST_TO_ADDR
 909: LD_VAR 0 2
 913: PUSH
 914: FOR_TO
 915: IFFALSE 990
// begin PrepareEngineer ( false , enemySkillLevel ) ;
 917: LD_INT 0
 919: PPUSH
 920: LD_VAR 0 16
 924: PPUSH
 925: CALL_OW 382
// un = CreateHuman ;
 929: LD_ADDR_VAR 0 9
 933: PUSH
 934: CALL_OW 44
 938: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 939: LD_ADDR_VAR 0 17
 943: PUSH
 944: LD_VAR 0 17
 948: PUSH
 949: LD_VAR 0 9
 953: ADD
 954: ST_TO_ADDR
// engs := engs ^ un ;
 955: LD_ADDR_VAR 0 13
 959: PUSH
 960: LD_VAR 0 13
 964: PUSH
 965: LD_VAR 0 9
 969: ADD
 970: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 971: LD_VAR 0 9
 975: PPUSH
 976: LD_VAR 0 6
 980: PPUSH
 981: LD_INT 0
 983: PPUSH
 984: CALL_OW 49
// end ;
 988: GO 914
 990: POP
 991: POP
// for i := 1 to mechsAmount do
 992: LD_ADDR_VAR 0 8
 996: PUSH
 997: DOUBLE
 998: LD_INT 1
1000: DEC
1001: ST_TO_ADDR
1002: LD_VAR 0 3
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1083
// begin PrepareEngineer ( false , enemySkillLevel ) ;
1010: LD_INT 0
1012: PPUSH
1013: LD_VAR 0 16
1017: PPUSH
1018: CALL_OW 382
// un = CreateHuman ;
1022: LD_ADDR_VAR 0 9
1026: PUSH
1027: CALL_OW 44
1031: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
1032: LD_ADDR_VAR 0 17
1036: PUSH
1037: LD_VAR 0 17
1041: PUSH
1042: LD_VAR 0 9
1046: ADD
1047: ST_TO_ADDR
// engs := engs ^ un ;
1048: LD_ADDR_VAR 0 13
1052: PUSH
1053: LD_VAR 0 13
1057: PUSH
1058: LD_VAR 0 9
1062: ADD
1063: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1064: LD_VAR 0 9
1068: PPUSH
1069: LD_VAR 0 6
1073: PPUSH
1074: LD_INT 0
1076: PPUSH
1077: CALL_OW 49
// end ;
1081: GO 1007
1083: POP
1084: POP
// for i := 1 to scientistsAmount do
1085: LD_ADDR_VAR 0 8
1089: PUSH
1090: DOUBLE
1091: LD_INT 1
1093: DEC
1094: ST_TO_ADDR
1095: LD_VAR 0 4
1099: PUSH
1100: FOR_TO
1101: IFFALSE 1176
// begin PrepareMechanic ( false , enemySkillLevel ) ;
1103: LD_INT 0
1105: PPUSH
1106: LD_VAR 0 16
1110: PPUSH
1111: CALL_OW 383
// un = CreateHuman ;
1115: LD_ADDR_VAR 0 9
1119: PUSH
1120: CALL_OW 44
1124: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
1125: LD_ADDR_VAR 0 17
1129: PUSH
1130: LD_VAR 0 17
1134: PUSH
1135: LD_VAR 0 9
1139: ADD
1140: ST_TO_ADDR
// mechs := mechs ^ un ;
1141: LD_ADDR_VAR 0 14
1145: PUSH
1146: LD_VAR 0 14
1150: PUSH
1151: LD_VAR 0 9
1155: ADD
1156: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1157: LD_VAR 0 9
1161: PPUSH
1162: LD_VAR 0 6
1166: PPUSH
1167: LD_INT 0
1169: PPUSH
1170: CALL_OW 49
// end ;
1174: GO 1100
1176: POP
1177: POP
// for i := 1 to vehiclesAmount do
1178: LD_ADDR_VAR 0 8
1182: PUSH
1183: DOUBLE
1184: LD_INT 1
1186: DEC
1187: ST_TO_ADDR
1188: LD_VAR 0 5
1192: PUSH
1193: FOR_TO
1194: IFFALSE 1360
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
1196: LD_ADDR_OWVAR 40
1200: PUSH
1201: LD_INT 2
1203: PUSH
1204: LD_INT 4
1206: PUSH
1207: LD_INT 3
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: PUSH
1215: LD_INT 1
1217: PPUSH
1218: LD_INT 3
1220: PPUSH
1221: CALL_OW 12
1225: ARRAY
1226: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1227: LD_ADDR_OWVAR 37
1231: PUSH
1232: LD_INT 3
1234: ST_TO_ADDR
// vc_control = control_manual ;
1235: LD_ADDR_OWVAR 38
1239: PUSH
1240: LD_INT 1
1242: ST_TO_ADDR
// vc_engine = engine_combustion ;
1243: LD_ADDR_OWVAR 39
1247: PUSH
1248: LD_INT 1
1250: ST_TO_ADDR
// veh = CreateVehicle ;
1251: LD_ADDR_VAR 0 10
1255: PUSH
1256: CALL_OW 45
1260: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ veh ;
1261: LD_ADDR_VAR 0 17
1265: PUSH
1266: LD_VAR 0 17
1270: PUSH
1271: LD_VAR 0 10
1275: ADD
1276: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
1277: LD_VAR 0 10
1281: PPUSH
1282: LD_VAR 0 6
1286: PPUSH
1287: LD_INT 0
1289: PPUSH
1290: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
1294: LD_INT 0
1296: PPUSH
1297: LD_VAR 0 16
1301: PPUSH
1302: CALL_OW 383
// un = CreateHuman ;
1306: LD_ADDR_VAR 0 9
1310: PUSH
1311: CALL_OW 44
1315: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ un ;
1316: LD_ADDR_VAR 0 17
1320: PUSH
1321: LD_VAR 0 17
1325: PUSH
1326: LD_VAR 0 9
1330: ADD
1331: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1332: LD_VAR 0 9
1336: PPUSH
1337: LD_VAR 0 10
1341: PPUSH
1342: CALL_OW 52
// SetFuel ( veh , 100 ) ;
1346: LD_VAR 0 10
1350: PPUSH
1351: LD_INT 100
1353: PPUSH
1354: CALL_OW 240
// end ;
1358: GO 1193
1360: POP
1361: POP
// end ; end_of_file
1362: LD_VAR 0 7
1366: RET
// export globalGameSaveCounter ; every 0 0$1 do
1367: GO 1369
1369: DISABLE
// begin enable ;
1370: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1371: LD_STRING updateTimer(
1373: PUSH
1374: LD_OWVAR 1
1378: STR
1379: PUSH
1380: LD_STRING );
1382: STR
1383: PPUSH
1384: CALL_OW 559
// end ;
1388: END
// every 0 0$1 do
1389: GO 1391
1391: DISABLE
// begin globalGameSaveCounter := 0 ;
1392: LD_ADDR_EXP 2
1396: PUSH
1397: LD_INT 0
1399: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
1400: LD_STRING setGameSaveCounter(0)
1402: PPUSH
1403: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
1407: LD_STRING initStreamRollete();
1409: PPUSH
1410: CALL_OW 559
// InitStreamMode ;
1414: CALL 2740 0 0
// DefineStreamItems ( false ) ;
1418: LD_INT 0
1420: PPUSH
1421: CALL 3204 0 1
// end ;
1425: END
// export function SOS_MapStart ( ) ; begin
1426: LD_INT 0
1428: PPUSH
// if streamModeActive then
1429: LD_EXP 3
1433: IFFALSE 1442
// DefineStreamItems ( true ) ;
1435: LD_INT 1
1437: PPUSH
1438: CALL 3204 0 1
// UpdateLuaVariables ( ) ;
1442: CALL 1459 0 0
// UpdateFactoryWaypoints ( ) ;
1446: CALL 16073 0 0
// UpdateWarehouseGatheringPoints ( ) ;
1450: CALL 16330 0 0
// end ;
1454: LD_VAR 0 1
1458: RET
// function UpdateLuaVariables ( ) ; begin
1459: LD_INT 0
1461: PPUSH
// if globalGameSaveCounter then
1462: LD_EXP 2
1466: IFFALSE 1500
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
1468: LD_ADDR_EXP 2
1472: PUSH
1473: LD_EXP 2
1477: PPUSH
1478: CALL 61215 0 1
1482: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1483: LD_STRING setGameSaveCounter(
1485: PUSH
1486: LD_EXP 2
1490: STR
1491: PUSH
1492: LD_STRING )
1494: STR
1495: PPUSH
1496: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
1500: LD_STRING setGameDifficulty(
1502: PUSH
1503: LD_OWVAR 67
1507: STR
1508: PUSH
1509: LD_STRING )
1511: STR
1512: PPUSH
1513: CALL_OW 559
// end ;
1517: LD_VAR 0 1
1521: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
1522: LD_INT 0
1524: PPUSH
// if p2 = stream_mode then
1525: LD_VAR 0 2
1529: PUSH
1530: LD_INT 100
1532: EQUAL
1533: IFFALSE 2536
// begin if not StreamModeActive then
1535: LD_EXP 3
1539: NOT
1540: IFFALSE 1550
// StreamModeActive := true ;
1542: LD_ADDR_EXP 3
1546: PUSH
1547: LD_INT 1
1549: ST_TO_ADDR
// if p3 = 0 then
1550: LD_VAR 0 3
1554: PUSH
1555: LD_INT 0
1557: EQUAL
1558: IFFALSE 1564
// InitStreamMode ;
1560: CALL 2740 0 0
// if p3 = 1 then
1564: LD_VAR 0 3
1568: PUSH
1569: LD_INT 1
1571: EQUAL
1572: IFFALSE 1582
// sRocket := true ;
1574: LD_ADDR_EXP 8
1578: PUSH
1579: LD_INT 1
1581: ST_TO_ADDR
// if p3 = 2 then
1582: LD_VAR 0 3
1586: PUSH
1587: LD_INT 2
1589: EQUAL
1590: IFFALSE 1600
// sSpeed := true ;
1592: LD_ADDR_EXP 7
1596: PUSH
1597: LD_INT 1
1599: ST_TO_ADDR
// if p3 = 3 then
1600: LD_VAR 0 3
1604: PUSH
1605: LD_INT 3
1607: EQUAL
1608: IFFALSE 1618
// sEngine := true ;
1610: LD_ADDR_EXP 9
1614: PUSH
1615: LD_INT 1
1617: ST_TO_ADDR
// if p3 = 4 then
1618: LD_VAR 0 3
1622: PUSH
1623: LD_INT 4
1625: EQUAL
1626: IFFALSE 1636
// sSpec := true ;
1628: LD_ADDR_EXP 6
1632: PUSH
1633: LD_INT 1
1635: ST_TO_ADDR
// if p3 = 5 then
1636: LD_VAR 0 3
1640: PUSH
1641: LD_INT 5
1643: EQUAL
1644: IFFALSE 1654
// sLevel := true ;
1646: LD_ADDR_EXP 10
1650: PUSH
1651: LD_INT 1
1653: ST_TO_ADDR
// if p3 = 6 then
1654: LD_VAR 0 3
1658: PUSH
1659: LD_INT 6
1661: EQUAL
1662: IFFALSE 1672
// sArmoury := true ;
1664: LD_ADDR_EXP 11
1668: PUSH
1669: LD_INT 1
1671: ST_TO_ADDR
// if p3 = 7 then
1672: LD_VAR 0 3
1676: PUSH
1677: LD_INT 7
1679: EQUAL
1680: IFFALSE 1690
// sRadar := true ;
1682: LD_ADDR_EXP 12
1686: PUSH
1687: LD_INT 1
1689: ST_TO_ADDR
// if p3 = 8 then
1690: LD_VAR 0 3
1694: PUSH
1695: LD_INT 8
1697: EQUAL
1698: IFFALSE 1708
// sBunker := true ;
1700: LD_ADDR_EXP 13
1704: PUSH
1705: LD_INT 1
1707: ST_TO_ADDR
// if p3 = 9 then
1708: LD_VAR 0 3
1712: PUSH
1713: LD_INT 9
1715: EQUAL
1716: IFFALSE 1726
// sHack := true ;
1718: LD_ADDR_EXP 14
1722: PUSH
1723: LD_INT 1
1725: ST_TO_ADDR
// if p3 = 10 then
1726: LD_VAR 0 3
1730: PUSH
1731: LD_INT 10
1733: EQUAL
1734: IFFALSE 1744
// sFire := true ;
1736: LD_ADDR_EXP 15
1740: PUSH
1741: LD_INT 1
1743: ST_TO_ADDR
// if p3 = 11 then
1744: LD_VAR 0 3
1748: PUSH
1749: LD_INT 11
1751: EQUAL
1752: IFFALSE 1762
// sRefresh := true ;
1754: LD_ADDR_EXP 16
1758: PUSH
1759: LD_INT 1
1761: ST_TO_ADDR
// if p3 = 12 then
1762: LD_VAR 0 3
1766: PUSH
1767: LD_INT 12
1769: EQUAL
1770: IFFALSE 1780
// sExp := true ;
1772: LD_ADDR_EXP 17
1776: PUSH
1777: LD_INT 1
1779: ST_TO_ADDR
// if p3 = 13 then
1780: LD_VAR 0 3
1784: PUSH
1785: LD_INT 13
1787: EQUAL
1788: IFFALSE 1798
// sDepot := true ;
1790: LD_ADDR_EXP 18
1794: PUSH
1795: LD_INT 1
1797: ST_TO_ADDR
// if p3 = 14 then
1798: LD_VAR 0 3
1802: PUSH
1803: LD_INT 14
1805: EQUAL
1806: IFFALSE 1816
// sFlag := true ;
1808: LD_ADDR_EXP 19
1812: PUSH
1813: LD_INT 1
1815: ST_TO_ADDR
// if p3 = 15 then
1816: LD_VAR 0 3
1820: PUSH
1821: LD_INT 15
1823: EQUAL
1824: IFFALSE 1834
// sKamikadze := true ;
1826: LD_ADDR_EXP 27
1830: PUSH
1831: LD_INT 1
1833: ST_TO_ADDR
// if p3 = 16 then
1834: LD_VAR 0 3
1838: PUSH
1839: LD_INT 16
1841: EQUAL
1842: IFFALSE 1852
// sTroll := true ;
1844: LD_ADDR_EXP 28
1848: PUSH
1849: LD_INT 1
1851: ST_TO_ADDR
// if p3 = 17 then
1852: LD_VAR 0 3
1856: PUSH
1857: LD_INT 17
1859: EQUAL
1860: IFFALSE 1870
// sSlow := true ;
1862: LD_ADDR_EXP 29
1866: PUSH
1867: LD_INT 1
1869: ST_TO_ADDR
// if p3 = 18 then
1870: LD_VAR 0 3
1874: PUSH
1875: LD_INT 18
1877: EQUAL
1878: IFFALSE 1888
// sLack := true ;
1880: LD_ADDR_EXP 30
1884: PUSH
1885: LD_INT 1
1887: ST_TO_ADDR
// if p3 = 19 then
1888: LD_VAR 0 3
1892: PUSH
1893: LD_INT 19
1895: EQUAL
1896: IFFALSE 1906
// sTank := true ;
1898: LD_ADDR_EXP 32
1902: PUSH
1903: LD_INT 1
1905: ST_TO_ADDR
// if p3 = 20 then
1906: LD_VAR 0 3
1910: PUSH
1911: LD_INT 20
1913: EQUAL
1914: IFFALSE 1924
// sRemote := true ;
1916: LD_ADDR_EXP 33
1920: PUSH
1921: LD_INT 1
1923: ST_TO_ADDR
// if p3 = 21 then
1924: LD_VAR 0 3
1928: PUSH
1929: LD_INT 21
1931: EQUAL
1932: IFFALSE 1942
// sPowell := true ;
1934: LD_ADDR_EXP 34
1938: PUSH
1939: LD_INT 1
1941: ST_TO_ADDR
// if p3 = 22 then
1942: LD_VAR 0 3
1946: PUSH
1947: LD_INT 22
1949: EQUAL
1950: IFFALSE 1960
// sTeleport := true ;
1952: LD_ADDR_EXP 37
1956: PUSH
1957: LD_INT 1
1959: ST_TO_ADDR
// if p3 = 23 then
1960: LD_VAR 0 3
1964: PUSH
1965: LD_INT 23
1967: EQUAL
1968: IFFALSE 1978
// sOilTower := true ;
1970: LD_ADDR_EXP 39
1974: PUSH
1975: LD_INT 1
1977: ST_TO_ADDR
// if p3 = 24 then
1978: LD_VAR 0 3
1982: PUSH
1983: LD_INT 24
1985: EQUAL
1986: IFFALSE 1996
// sShovel := true ;
1988: LD_ADDR_EXP 40
1992: PUSH
1993: LD_INT 1
1995: ST_TO_ADDR
// if p3 = 25 then
1996: LD_VAR 0 3
2000: PUSH
2001: LD_INT 25
2003: EQUAL
2004: IFFALSE 2014
// sSheik := true ;
2006: LD_ADDR_EXP 41
2010: PUSH
2011: LD_INT 1
2013: ST_TO_ADDR
// if p3 = 26 then
2014: LD_VAR 0 3
2018: PUSH
2019: LD_INT 26
2021: EQUAL
2022: IFFALSE 2032
// sEarthquake := true ;
2024: LD_ADDR_EXP 43
2028: PUSH
2029: LD_INT 1
2031: ST_TO_ADDR
// if p3 = 27 then
2032: LD_VAR 0 3
2036: PUSH
2037: LD_INT 27
2039: EQUAL
2040: IFFALSE 2050
// sAI := true ;
2042: LD_ADDR_EXP 44
2046: PUSH
2047: LD_INT 1
2049: ST_TO_ADDR
// if p3 = 28 then
2050: LD_VAR 0 3
2054: PUSH
2055: LD_INT 28
2057: EQUAL
2058: IFFALSE 2068
// sCargo := true ;
2060: LD_ADDR_EXP 47
2064: PUSH
2065: LD_INT 1
2067: ST_TO_ADDR
// if p3 = 29 then
2068: LD_VAR 0 3
2072: PUSH
2073: LD_INT 29
2075: EQUAL
2076: IFFALSE 2086
// sDLaser := true ;
2078: LD_ADDR_EXP 48
2082: PUSH
2083: LD_INT 1
2085: ST_TO_ADDR
// if p3 = 30 then
2086: LD_VAR 0 3
2090: PUSH
2091: LD_INT 30
2093: EQUAL
2094: IFFALSE 2104
// sExchange := true ;
2096: LD_ADDR_EXP 49
2100: PUSH
2101: LD_INT 1
2103: ST_TO_ADDR
// if p3 = 31 then
2104: LD_VAR 0 3
2108: PUSH
2109: LD_INT 31
2111: EQUAL
2112: IFFALSE 2122
// sFac := true ;
2114: LD_ADDR_EXP 50
2118: PUSH
2119: LD_INT 1
2121: ST_TO_ADDR
// if p3 = 32 then
2122: LD_VAR 0 3
2126: PUSH
2127: LD_INT 32
2129: EQUAL
2130: IFFALSE 2140
// sPower := true ;
2132: LD_ADDR_EXP 51
2136: PUSH
2137: LD_INT 1
2139: ST_TO_ADDR
// if p3 = 33 then
2140: LD_VAR 0 3
2144: PUSH
2145: LD_INT 33
2147: EQUAL
2148: IFFALSE 2158
// sRandom := true ;
2150: LD_ADDR_EXP 52
2154: PUSH
2155: LD_INT 1
2157: ST_TO_ADDR
// if p3 = 34 then
2158: LD_VAR 0 3
2162: PUSH
2163: LD_INT 34
2165: EQUAL
2166: IFFALSE 2176
// sShield := true ;
2168: LD_ADDR_EXP 53
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// if p3 = 35 then
2176: LD_VAR 0 3
2180: PUSH
2181: LD_INT 35
2183: EQUAL
2184: IFFALSE 2194
// sTime := true ;
2186: LD_ADDR_EXP 54
2190: PUSH
2191: LD_INT 1
2193: ST_TO_ADDR
// if p3 = 36 then
2194: LD_VAR 0 3
2198: PUSH
2199: LD_INT 36
2201: EQUAL
2202: IFFALSE 2212
// sTools := true ;
2204: LD_ADDR_EXP 55
2208: PUSH
2209: LD_INT 1
2211: ST_TO_ADDR
// if p3 = 101 then
2212: LD_VAR 0 3
2216: PUSH
2217: LD_INT 101
2219: EQUAL
2220: IFFALSE 2230
// sSold := true ;
2222: LD_ADDR_EXP 20
2226: PUSH
2227: LD_INT 1
2229: ST_TO_ADDR
// if p3 = 102 then
2230: LD_VAR 0 3
2234: PUSH
2235: LD_INT 102
2237: EQUAL
2238: IFFALSE 2248
// sDiff := true ;
2240: LD_ADDR_EXP 21
2244: PUSH
2245: LD_INT 1
2247: ST_TO_ADDR
// if p3 = 103 then
2248: LD_VAR 0 3
2252: PUSH
2253: LD_INT 103
2255: EQUAL
2256: IFFALSE 2266
// sFog := true ;
2258: LD_ADDR_EXP 24
2262: PUSH
2263: LD_INT 1
2265: ST_TO_ADDR
// if p3 = 104 then
2266: LD_VAR 0 3
2270: PUSH
2271: LD_INT 104
2273: EQUAL
2274: IFFALSE 2284
// sReset := true ;
2276: LD_ADDR_EXP 25
2280: PUSH
2281: LD_INT 1
2283: ST_TO_ADDR
// if p3 = 105 then
2284: LD_VAR 0 3
2288: PUSH
2289: LD_INT 105
2291: EQUAL
2292: IFFALSE 2302
// sSun := true ;
2294: LD_ADDR_EXP 26
2298: PUSH
2299: LD_INT 1
2301: ST_TO_ADDR
// if p3 = 106 then
2302: LD_VAR 0 3
2306: PUSH
2307: LD_INT 106
2309: EQUAL
2310: IFFALSE 2320
// sTiger := true ;
2312: LD_ADDR_EXP 22
2316: PUSH
2317: LD_INT 1
2319: ST_TO_ADDR
// if p3 = 107 then
2320: LD_VAR 0 3
2324: PUSH
2325: LD_INT 107
2327: EQUAL
2328: IFFALSE 2338
// sBomb := true ;
2330: LD_ADDR_EXP 23
2334: PUSH
2335: LD_INT 1
2337: ST_TO_ADDR
// if p3 = 108 then
2338: LD_VAR 0 3
2342: PUSH
2343: LD_INT 108
2345: EQUAL
2346: IFFALSE 2356
// sWound := true ;
2348: LD_ADDR_EXP 31
2352: PUSH
2353: LD_INT 1
2355: ST_TO_ADDR
// if p3 = 109 then
2356: LD_VAR 0 3
2360: PUSH
2361: LD_INT 109
2363: EQUAL
2364: IFFALSE 2374
// sBetray := true ;
2366: LD_ADDR_EXP 35
2370: PUSH
2371: LD_INT 1
2373: ST_TO_ADDR
// if p3 = 110 then
2374: LD_VAR 0 3
2378: PUSH
2379: LD_INT 110
2381: EQUAL
2382: IFFALSE 2392
// sContamin := true ;
2384: LD_ADDR_EXP 36
2388: PUSH
2389: LD_INT 1
2391: ST_TO_ADDR
// if p3 = 111 then
2392: LD_VAR 0 3
2396: PUSH
2397: LD_INT 111
2399: EQUAL
2400: IFFALSE 2410
// sOil := true ;
2402: LD_ADDR_EXP 38
2406: PUSH
2407: LD_INT 1
2409: ST_TO_ADDR
// if p3 = 112 then
2410: LD_VAR 0 3
2414: PUSH
2415: LD_INT 112
2417: EQUAL
2418: IFFALSE 2428
// sStu := true ;
2420: LD_ADDR_EXP 42
2424: PUSH
2425: LD_INT 1
2427: ST_TO_ADDR
// if p3 = 113 then
2428: LD_VAR 0 3
2432: PUSH
2433: LD_INT 113
2435: EQUAL
2436: IFFALSE 2446
// sBazooka := true ;
2438: LD_ADDR_EXP 45
2442: PUSH
2443: LD_INT 1
2445: ST_TO_ADDR
// if p3 = 114 then
2446: LD_VAR 0 3
2450: PUSH
2451: LD_INT 114
2453: EQUAL
2454: IFFALSE 2464
// sMortar := true ;
2456: LD_ADDR_EXP 46
2460: PUSH
2461: LD_INT 1
2463: ST_TO_ADDR
// if p3 = 115 then
2464: LD_VAR 0 3
2468: PUSH
2469: LD_INT 115
2471: EQUAL
2472: IFFALSE 2482
// sRanger := true ;
2474: LD_ADDR_EXP 56
2478: PUSH
2479: LD_INT 1
2481: ST_TO_ADDR
// if p3 = 116 then
2482: LD_VAR 0 3
2486: PUSH
2487: LD_INT 116
2489: EQUAL
2490: IFFALSE 2500
// sComputer := true ;
2492: LD_ADDR_EXP 57
2496: PUSH
2497: LD_INT 1
2499: ST_TO_ADDR
// if p3 = 117 then
2500: LD_VAR 0 3
2504: PUSH
2505: LD_INT 117
2507: EQUAL
2508: IFFALSE 2518
// s30 := true ;
2510: LD_ADDR_EXP 58
2514: PUSH
2515: LD_INT 1
2517: ST_TO_ADDR
// if p3 = 118 then
2518: LD_VAR 0 3
2522: PUSH
2523: LD_INT 118
2525: EQUAL
2526: IFFALSE 2536
// s60 := true ;
2528: LD_ADDR_EXP 59
2532: PUSH
2533: LD_INT 1
2535: ST_TO_ADDR
// end ; if p2 = hack_mode then
2536: LD_VAR 0 2
2540: PUSH
2541: LD_INT 101
2543: EQUAL
2544: IFFALSE 2672
// begin case p3 of 1 :
2546: LD_VAR 0 3
2550: PUSH
2551: LD_INT 1
2553: DOUBLE
2554: EQUAL
2555: IFTRUE 2559
2557: GO 2566
2559: POP
// hHackUnlimitedResources ; 2 :
2560: CALL 14819 0 0
2564: GO 2672
2566: LD_INT 2
2568: DOUBLE
2569: EQUAL
2570: IFTRUE 2574
2572: GO 2581
2574: POP
// hHackSetLevel10 ; 3 :
2575: CALL 14952 0 0
2579: GO 2672
2581: LD_INT 3
2583: DOUBLE
2584: EQUAL
2585: IFTRUE 2589
2587: GO 2596
2589: POP
// hHackSetLevel10YourUnits ; 4 :
2590: CALL 15037 0 0
2594: GO 2672
2596: LD_INT 4
2598: DOUBLE
2599: EQUAL
2600: IFTRUE 2604
2602: GO 2611
2604: POP
// hHackInvincible ; 5 :
2605: CALL 15485 0 0
2609: GO 2672
2611: LD_INT 5
2613: DOUBLE
2614: EQUAL
2615: IFTRUE 2619
2617: GO 2626
2619: POP
// hHackInvisible ; 6 :
2620: CALL 15596 0 0
2624: GO 2672
2626: LD_INT 6
2628: DOUBLE
2629: EQUAL
2630: IFTRUE 2634
2632: GO 2641
2634: POP
// hHackChangeYourSide ; 7 :
2635: CALL 15653 0 0
2639: GO 2672
2641: LD_INT 7
2643: DOUBLE
2644: EQUAL
2645: IFTRUE 2649
2647: GO 2656
2649: POP
// hHackChangeUnitSide ; 8 :
2650: CALL 15695 0 0
2654: GO 2672
2656: LD_INT 8
2658: DOUBLE
2659: EQUAL
2660: IFTRUE 2664
2662: GO 2671
2664: POP
// hHackFog ; end ;
2665: CALL 15796 0 0
2669: GO 2672
2671: POP
// end ; if p2 = game_save_mode then
2672: LD_VAR 0 2
2676: PUSH
2677: LD_INT 102
2679: EQUAL
2680: IFFALSE 2735
// begin if p3 = 1 then
2682: LD_VAR 0 3
2686: PUSH
2687: LD_INT 1
2689: EQUAL
2690: IFFALSE 2702
// globalGameSaveCounter := p4 ;
2692: LD_ADDR_EXP 2
2696: PUSH
2697: LD_VAR 0 4
2701: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
2702: LD_VAR 0 3
2706: PUSH
2707: LD_INT 2
2709: EQUAL
2710: PUSH
2711: LD_EXP 2
2715: AND
2716: IFFALSE 2735
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
2718: LD_STRING setGameSaveCounter(
2720: PUSH
2721: LD_EXP 2
2725: STR
2726: PUSH
2727: LD_STRING )
2729: STR
2730: PPUSH
2731: CALL_OW 559
// end ; end ;
2735: LD_VAR 0 7
2739: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
2740: LD_INT 0
2742: PPUSH
// streamModeActive := false ;
2743: LD_ADDR_EXP 3
2747: PUSH
2748: LD_INT 0
2750: ST_TO_ADDR
// normalCounter := 36 ;
2751: LD_ADDR_EXP 4
2755: PUSH
2756: LD_INT 36
2758: ST_TO_ADDR
// hardcoreCounter := 18 ;
2759: LD_ADDR_EXP 5
2763: PUSH
2764: LD_INT 18
2766: ST_TO_ADDR
// sRocket := false ;
2767: LD_ADDR_EXP 8
2771: PUSH
2772: LD_INT 0
2774: ST_TO_ADDR
// sSpeed := false ;
2775: LD_ADDR_EXP 7
2779: PUSH
2780: LD_INT 0
2782: ST_TO_ADDR
// sEngine := false ;
2783: LD_ADDR_EXP 9
2787: PUSH
2788: LD_INT 0
2790: ST_TO_ADDR
// sSpec := false ;
2791: LD_ADDR_EXP 6
2795: PUSH
2796: LD_INT 0
2798: ST_TO_ADDR
// sLevel := false ;
2799: LD_ADDR_EXP 10
2803: PUSH
2804: LD_INT 0
2806: ST_TO_ADDR
// sArmoury := false ;
2807: LD_ADDR_EXP 11
2811: PUSH
2812: LD_INT 0
2814: ST_TO_ADDR
// sRadar := false ;
2815: LD_ADDR_EXP 12
2819: PUSH
2820: LD_INT 0
2822: ST_TO_ADDR
// sBunker := false ;
2823: LD_ADDR_EXP 13
2827: PUSH
2828: LD_INT 0
2830: ST_TO_ADDR
// sHack := false ;
2831: LD_ADDR_EXP 14
2835: PUSH
2836: LD_INT 0
2838: ST_TO_ADDR
// sFire := false ;
2839: LD_ADDR_EXP 15
2843: PUSH
2844: LD_INT 0
2846: ST_TO_ADDR
// sRefresh := false ;
2847: LD_ADDR_EXP 16
2851: PUSH
2852: LD_INT 0
2854: ST_TO_ADDR
// sExp := false ;
2855: LD_ADDR_EXP 17
2859: PUSH
2860: LD_INT 0
2862: ST_TO_ADDR
// sDepot := false ;
2863: LD_ADDR_EXP 18
2867: PUSH
2868: LD_INT 0
2870: ST_TO_ADDR
// sFlag := false ;
2871: LD_ADDR_EXP 19
2875: PUSH
2876: LD_INT 0
2878: ST_TO_ADDR
// sKamikadze := false ;
2879: LD_ADDR_EXP 27
2883: PUSH
2884: LD_INT 0
2886: ST_TO_ADDR
// sTroll := false ;
2887: LD_ADDR_EXP 28
2891: PUSH
2892: LD_INT 0
2894: ST_TO_ADDR
// sSlow := false ;
2895: LD_ADDR_EXP 29
2899: PUSH
2900: LD_INT 0
2902: ST_TO_ADDR
// sLack := false ;
2903: LD_ADDR_EXP 30
2907: PUSH
2908: LD_INT 0
2910: ST_TO_ADDR
// sTank := false ;
2911: LD_ADDR_EXP 32
2915: PUSH
2916: LD_INT 0
2918: ST_TO_ADDR
// sRemote := false ;
2919: LD_ADDR_EXP 33
2923: PUSH
2924: LD_INT 0
2926: ST_TO_ADDR
// sPowell := false ;
2927: LD_ADDR_EXP 34
2931: PUSH
2932: LD_INT 0
2934: ST_TO_ADDR
// sTeleport := false ;
2935: LD_ADDR_EXP 37
2939: PUSH
2940: LD_INT 0
2942: ST_TO_ADDR
// sOilTower := false ;
2943: LD_ADDR_EXP 39
2947: PUSH
2948: LD_INT 0
2950: ST_TO_ADDR
// sShovel := false ;
2951: LD_ADDR_EXP 40
2955: PUSH
2956: LD_INT 0
2958: ST_TO_ADDR
// sSheik := false ;
2959: LD_ADDR_EXP 41
2963: PUSH
2964: LD_INT 0
2966: ST_TO_ADDR
// sEarthquake := false ;
2967: LD_ADDR_EXP 43
2971: PUSH
2972: LD_INT 0
2974: ST_TO_ADDR
// sAI := false ;
2975: LD_ADDR_EXP 44
2979: PUSH
2980: LD_INT 0
2982: ST_TO_ADDR
// sCargo := false ;
2983: LD_ADDR_EXP 47
2987: PUSH
2988: LD_INT 0
2990: ST_TO_ADDR
// sDLaser := false ;
2991: LD_ADDR_EXP 48
2995: PUSH
2996: LD_INT 0
2998: ST_TO_ADDR
// sExchange := false ;
2999: LD_ADDR_EXP 49
3003: PUSH
3004: LD_INT 0
3006: ST_TO_ADDR
// sFac := false ;
3007: LD_ADDR_EXP 50
3011: PUSH
3012: LD_INT 0
3014: ST_TO_ADDR
// sPower := false ;
3015: LD_ADDR_EXP 51
3019: PUSH
3020: LD_INT 0
3022: ST_TO_ADDR
// sRandom := false ;
3023: LD_ADDR_EXP 52
3027: PUSH
3028: LD_INT 0
3030: ST_TO_ADDR
// sShield := false ;
3031: LD_ADDR_EXP 53
3035: PUSH
3036: LD_INT 0
3038: ST_TO_ADDR
// sTime := false ;
3039: LD_ADDR_EXP 54
3043: PUSH
3044: LD_INT 0
3046: ST_TO_ADDR
// sTools := false ;
3047: LD_ADDR_EXP 55
3051: PUSH
3052: LD_INT 0
3054: ST_TO_ADDR
// sSold := false ;
3055: LD_ADDR_EXP 20
3059: PUSH
3060: LD_INT 0
3062: ST_TO_ADDR
// sDiff := false ;
3063: LD_ADDR_EXP 21
3067: PUSH
3068: LD_INT 0
3070: ST_TO_ADDR
// sFog := false ;
3071: LD_ADDR_EXP 24
3075: PUSH
3076: LD_INT 0
3078: ST_TO_ADDR
// sReset := false ;
3079: LD_ADDR_EXP 25
3083: PUSH
3084: LD_INT 0
3086: ST_TO_ADDR
// sSun := false ;
3087: LD_ADDR_EXP 26
3091: PUSH
3092: LD_INT 0
3094: ST_TO_ADDR
// sTiger := false ;
3095: LD_ADDR_EXP 22
3099: PUSH
3100: LD_INT 0
3102: ST_TO_ADDR
// sBomb := false ;
3103: LD_ADDR_EXP 23
3107: PUSH
3108: LD_INT 0
3110: ST_TO_ADDR
// sWound := false ;
3111: LD_ADDR_EXP 31
3115: PUSH
3116: LD_INT 0
3118: ST_TO_ADDR
// sBetray := false ;
3119: LD_ADDR_EXP 35
3123: PUSH
3124: LD_INT 0
3126: ST_TO_ADDR
// sContamin := false ;
3127: LD_ADDR_EXP 36
3131: PUSH
3132: LD_INT 0
3134: ST_TO_ADDR
// sOil := false ;
3135: LD_ADDR_EXP 38
3139: PUSH
3140: LD_INT 0
3142: ST_TO_ADDR
// sStu := false ;
3143: LD_ADDR_EXP 42
3147: PUSH
3148: LD_INT 0
3150: ST_TO_ADDR
// sBazooka := false ;
3151: LD_ADDR_EXP 45
3155: PUSH
3156: LD_INT 0
3158: ST_TO_ADDR
// sMortar := false ;
3159: LD_ADDR_EXP 46
3163: PUSH
3164: LD_INT 0
3166: ST_TO_ADDR
// sRanger := false ;
3167: LD_ADDR_EXP 56
3171: PUSH
3172: LD_INT 0
3174: ST_TO_ADDR
// sComputer := false ;
3175: LD_ADDR_EXP 57
3179: PUSH
3180: LD_INT 0
3182: ST_TO_ADDR
// s30 := false ;
3183: LD_ADDR_EXP 58
3187: PUSH
3188: LD_INT 0
3190: ST_TO_ADDR
// s60 := false ;
3191: LD_ADDR_EXP 59
3195: PUSH
3196: LD_INT 0
3198: ST_TO_ADDR
// end ;
3199: LD_VAR 0 1
3203: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3204: LD_INT 0
3206: PPUSH
3207: PPUSH
3208: PPUSH
3209: PPUSH
3210: PPUSH
3211: PPUSH
3212: PPUSH
// result := [ ] ;
3213: LD_ADDR_VAR 0 2
3217: PUSH
3218: EMPTY
3219: ST_TO_ADDR
// if campaign_id = 1 then
3220: LD_OWVAR 69
3224: PUSH
3225: LD_INT 1
3227: EQUAL
3228: IFFALSE 6394
// begin case mission_number of 1 :
3230: LD_OWVAR 70
3234: PUSH
3235: LD_INT 1
3237: DOUBLE
3238: EQUAL
3239: IFTRUE 3243
3241: GO 3319
3243: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3244: LD_ADDR_VAR 0 2
3248: PUSH
3249: LD_INT 2
3251: PUSH
3252: LD_INT 4
3254: PUSH
3255: LD_INT 11
3257: PUSH
3258: LD_INT 12
3260: PUSH
3261: LD_INT 15
3263: PUSH
3264: LD_INT 16
3266: PUSH
3267: LD_INT 22
3269: PUSH
3270: LD_INT 23
3272: PUSH
3273: LD_INT 26
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: PUSH
3287: LD_INT 101
3289: PUSH
3290: LD_INT 102
3292: PUSH
3293: LD_INT 106
3295: PUSH
3296: LD_INT 116
3298: PUSH
3299: LD_INT 117
3301: PUSH
3302: LD_INT 118
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: LIST
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: ST_TO_ADDR
3317: GO 6392
3319: LD_INT 2
3321: DOUBLE
3322: EQUAL
3323: IFTRUE 3327
3325: GO 3411
3327: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3328: LD_ADDR_VAR 0 2
3332: PUSH
3333: LD_INT 2
3335: PUSH
3336: LD_INT 4
3338: PUSH
3339: LD_INT 11
3341: PUSH
3342: LD_INT 12
3344: PUSH
3345: LD_INT 15
3347: PUSH
3348: LD_INT 16
3350: PUSH
3351: LD_INT 22
3353: PUSH
3354: LD_INT 23
3356: PUSH
3357: LD_INT 26
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: LIST
3367: LIST
3368: LIST
3369: LIST
3370: PUSH
3371: LD_INT 101
3373: PUSH
3374: LD_INT 102
3376: PUSH
3377: LD_INT 105
3379: PUSH
3380: LD_INT 106
3382: PUSH
3383: LD_INT 108
3385: PUSH
3386: LD_INT 116
3388: PUSH
3389: LD_INT 117
3391: PUSH
3392: LD_INT 118
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: PUSH
3405: EMPTY
3406: LIST
3407: LIST
3408: ST_TO_ADDR
3409: GO 6392
3411: LD_INT 3
3413: DOUBLE
3414: EQUAL
3415: IFTRUE 3419
3417: GO 3507
3419: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3420: LD_ADDR_VAR 0 2
3424: PUSH
3425: LD_INT 2
3427: PUSH
3428: LD_INT 4
3430: PUSH
3431: LD_INT 5
3433: PUSH
3434: LD_INT 11
3436: PUSH
3437: LD_INT 12
3439: PUSH
3440: LD_INT 15
3442: PUSH
3443: LD_INT 16
3445: PUSH
3446: LD_INT 22
3448: PUSH
3449: LD_INT 26
3451: PUSH
3452: LD_INT 36
3454: PUSH
3455: EMPTY
3456: LIST
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: PUSH
3467: LD_INT 101
3469: PUSH
3470: LD_INT 102
3472: PUSH
3473: LD_INT 105
3475: PUSH
3476: LD_INT 106
3478: PUSH
3479: LD_INT 108
3481: PUSH
3482: LD_INT 116
3484: PUSH
3485: LD_INT 117
3487: PUSH
3488: LD_INT 118
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: ST_TO_ADDR
3505: GO 6392
3507: LD_INT 4
3509: DOUBLE
3510: EQUAL
3511: IFTRUE 3515
3513: GO 3611
3515: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
3516: LD_ADDR_VAR 0 2
3520: PUSH
3521: LD_INT 2
3523: PUSH
3524: LD_INT 4
3526: PUSH
3527: LD_INT 5
3529: PUSH
3530: LD_INT 8
3532: PUSH
3533: LD_INT 11
3535: PUSH
3536: LD_INT 12
3538: PUSH
3539: LD_INT 15
3541: PUSH
3542: LD_INT 16
3544: PUSH
3545: LD_INT 22
3547: PUSH
3548: LD_INT 23
3550: PUSH
3551: LD_INT 26
3553: PUSH
3554: LD_INT 36
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: PUSH
3571: LD_INT 101
3573: PUSH
3574: LD_INT 102
3576: PUSH
3577: LD_INT 105
3579: PUSH
3580: LD_INT 106
3582: PUSH
3583: LD_INT 108
3585: PUSH
3586: LD_INT 116
3588: PUSH
3589: LD_INT 117
3591: PUSH
3592: LD_INT 118
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: ST_TO_ADDR
3609: GO 6392
3611: LD_INT 5
3613: DOUBLE
3614: EQUAL
3615: IFTRUE 3619
3617: GO 3731
3619: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
3620: LD_ADDR_VAR 0 2
3624: PUSH
3625: LD_INT 2
3627: PUSH
3628: LD_INT 4
3630: PUSH
3631: LD_INT 5
3633: PUSH
3634: LD_INT 6
3636: PUSH
3637: LD_INT 8
3639: PUSH
3640: LD_INT 11
3642: PUSH
3643: LD_INT 12
3645: PUSH
3646: LD_INT 15
3648: PUSH
3649: LD_INT 16
3651: PUSH
3652: LD_INT 22
3654: PUSH
3655: LD_INT 23
3657: PUSH
3658: LD_INT 25
3660: PUSH
3661: LD_INT 26
3663: PUSH
3664: LD_INT 36
3666: PUSH
3667: EMPTY
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: PUSH
3683: LD_INT 101
3685: PUSH
3686: LD_INT 102
3688: PUSH
3689: LD_INT 105
3691: PUSH
3692: LD_INT 106
3694: PUSH
3695: LD_INT 108
3697: PUSH
3698: LD_INT 109
3700: PUSH
3701: LD_INT 112
3703: PUSH
3704: LD_INT 116
3706: PUSH
3707: LD_INT 117
3709: PUSH
3710: LD_INT 118
3712: PUSH
3713: EMPTY
3714: LIST
3715: LIST
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: LIST
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: ST_TO_ADDR
3729: GO 6392
3731: LD_INT 6
3733: DOUBLE
3734: EQUAL
3735: IFTRUE 3739
3737: GO 3871
3739: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
3740: LD_ADDR_VAR 0 2
3744: PUSH
3745: LD_INT 2
3747: PUSH
3748: LD_INT 4
3750: PUSH
3751: LD_INT 5
3753: PUSH
3754: LD_INT 6
3756: PUSH
3757: LD_INT 8
3759: PUSH
3760: LD_INT 11
3762: PUSH
3763: LD_INT 12
3765: PUSH
3766: LD_INT 15
3768: PUSH
3769: LD_INT 16
3771: PUSH
3772: LD_INT 20
3774: PUSH
3775: LD_INT 21
3777: PUSH
3778: LD_INT 22
3780: PUSH
3781: LD_INT 23
3783: PUSH
3784: LD_INT 25
3786: PUSH
3787: LD_INT 26
3789: PUSH
3790: LD_INT 30
3792: PUSH
3793: LD_INT 31
3795: PUSH
3796: LD_INT 32
3798: PUSH
3799: LD_INT 36
3801: PUSH
3802: EMPTY
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 101
3825: PUSH
3826: LD_INT 102
3828: PUSH
3829: LD_INT 105
3831: PUSH
3832: LD_INT 106
3834: PUSH
3835: LD_INT 108
3837: PUSH
3838: LD_INT 109
3840: PUSH
3841: LD_INT 112
3843: PUSH
3844: LD_INT 116
3846: PUSH
3847: LD_INT 117
3849: PUSH
3850: LD_INT 118
3852: PUSH
3853: EMPTY
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: PUSH
3865: EMPTY
3866: LIST
3867: LIST
3868: ST_TO_ADDR
3869: GO 6392
3871: LD_INT 7
3873: DOUBLE
3874: EQUAL
3875: IFTRUE 3879
3877: GO 3991
3879: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
3880: LD_ADDR_VAR 0 2
3884: PUSH
3885: LD_INT 2
3887: PUSH
3888: LD_INT 4
3890: PUSH
3891: LD_INT 5
3893: PUSH
3894: LD_INT 7
3896: PUSH
3897: LD_INT 11
3899: PUSH
3900: LD_INT 12
3902: PUSH
3903: LD_INT 15
3905: PUSH
3906: LD_INT 16
3908: PUSH
3909: LD_INT 20
3911: PUSH
3912: LD_INT 21
3914: PUSH
3915: LD_INT 22
3917: PUSH
3918: LD_INT 23
3920: PUSH
3921: LD_INT 25
3923: PUSH
3924: LD_INT 26
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: PUSH
3943: LD_INT 101
3945: PUSH
3946: LD_INT 102
3948: PUSH
3949: LD_INT 103
3951: PUSH
3952: LD_INT 105
3954: PUSH
3955: LD_INT 106
3957: PUSH
3958: LD_INT 108
3960: PUSH
3961: LD_INT 112
3963: PUSH
3964: LD_INT 116
3966: PUSH
3967: LD_INT 117
3969: PUSH
3970: LD_INT 118
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: LIST
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: PUSH
3985: EMPTY
3986: LIST
3987: LIST
3988: ST_TO_ADDR
3989: GO 6392
3991: LD_INT 8
3993: DOUBLE
3994: EQUAL
3995: IFTRUE 3999
3997: GO 4139
3999: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4000: LD_ADDR_VAR 0 2
4004: PUSH
4005: LD_INT 2
4007: PUSH
4008: LD_INT 4
4010: PUSH
4011: LD_INT 5
4013: PUSH
4014: LD_INT 6
4016: PUSH
4017: LD_INT 7
4019: PUSH
4020: LD_INT 8
4022: PUSH
4023: LD_INT 11
4025: PUSH
4026: LD_INT 12
4028: PUSH
4029: LD_INT 15
4031: PUSH
4032: LD_INT 16
4034: PUSH
4035: LD_INT 20
4037: PUSH
4038: LD_INT 21
4040: PUSH
4041: LD_INT 22
4043: PUSH
4044: LD_INT 23
4046: PUSH
4047: LD_INT 25
4049: PUSH
4050: LD_INT 26
4052: PUSH
4053: LD_INT 30
4055: PUSH
4056: LD_INT 31
4058: PUSH
4059: LD_INT 32
4061: PUSH
4062: LD_INT 36
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: PUSH
4087: LD_INT 101
4089: PUSH
4090: LD_INT 102
4092: PUSH
4093: LD_INT 103
4095: PUSH
4096: LD_INT 105
4098: PUSH
4099: LD_INT 106
4101: PUSH
4102: LD_INT 108
4104: PUSH
4105: LD_INT 109
4107: PUSH
4108: LD_INT 112
4110: PUSH
4111: LD_INT 116
4113: PUSH
4114: LD_INT 117
4116: PUSH
4117: LD_INT 118
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: PUSH
4133: EMPTY
4134: LIST
4135: LIST
4136: ST_TO_ADDR
4137: GO 6392
4139: LD_INT 9
4141: DOUBLE
4142: EQUAL
4143: IFTRUE 4147
4145: GO 4295
4147: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4148: LD_ADDR_VAR 0 2
4152: PUSH
4153: LD_INT 2
4155: PUSH
4156: LD_INT 4
4158: PUSH
4159: LD_INT 5
4161: PUSH
4162: LD_INT 6
4164: PUSH
4165: LD_INT 7
4167: PUSH
4168: LD_INT 8
4170: PUSH
4171: LD_INT 11
4173: PUSH
4174: LD_INT 12
4176: PUSH
4177: LD_INT 15
4179: PUSH
4180: LD_INT 16
4182: PUSH
4183: LD_INT 20
4185: PUSH
4186: LD_INT 21
4188: PUSH
4189: LD_INT 22
4191: PUSH
4192: LD_INT 23
4194: PUSH
4195: LD_INT 25
4197: PUSH
4198: LD_INT 26
4200: PUSH
4201: LD_INT 28
4203: PUSH
4204: LD_INT 30
4206: PUSH
4207: LD_INT 31
4209: PUSH
4210: LD_INT 32
4212: PUSH
4213: LD_INT 36
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: LIST
4220: LIST
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: LIST
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: LIST
4238: PUSH
4239: LD_INT 101
4241: PUSH
4242: LD_INT 102
4244: PUSH
4245: LD_INT 103
4247: PUSH
4248: LD_INT 105
4250: PUSH
4251: LD_INT 106
4253: PUSH
4254: LD_INT 108
4256: PUSH
4257: LD_INT 109
4259: PUSH
4260: LD_INT 112
4262: PUSH
4263: LD_INT 114
4265: PUSH
4266: LD_INT 116
4268: PUSH
4269: LD_INT 117
4271: PUSH
4272: LD_INT 118
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: ST_TO_ADDR
4293: GO 6392
4295: LD_INT 10
4297: DOUBLE
4298: EQUAL
4299: IFTRUE 4303
4301: GO 4499
4303: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4304: LD_ADDR_VAR 0 2
4308: PUSH
4309: LD_INT 2
4311: PUSH
4312: LD_INT 4
4314: PUSH
4315: LD_INT 5
4317: PUSH
4318: LD_INT 6
4320: PUSH
4321: LD_INT 7
4323: PUSH
4324: LD_INT 8
4326: PUSH
4327: LD_INT 9
4329: PUSH
4330: LD_INT 10
4332: PUSH
4333: LD_INT 11
4335: PUSH
4336: LD_INT 12
4338: PUSH
4339: LD_INT 13
4341: PUSH
4342: LD_INT 14
4344: PUSH
4345: LD_INT 15
4347: PUSH
4348: LD_INT 16
4350: PUSH
4351: LD_INT 17
4353: PUSH
4354: LD_INT 18
4356: PUSH
4357: LD_INT 19
4359: PUSH
4360: LD_INT 20
4362: PUSH
4363: LD_INT 21
4365: PUSH
4366: LD_INT 22
4368: PUSH
4369: LD_INT 23
4371: PUSH
4372: LD_INT 24
4374: PUSH
4375: LD_INT 25
4377: PUSH
4378: LD_INT 26
4380: PUSH
4381: LD_INT 28
4383: PUSH
4384: LD_INT 30
4386: PUSH
4387: LD_INT 31
4389: PUSH
4390: LD_INT 32
4392: PUSH
4393: LD_INT 36
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: PUSH
4427: LD_INT 101
4429: PUSH
4430: LD_INT 102
4432: PUSH
4433: LD_INT 103
4435: PUSH
4436: LD_INT 104
4438: PUSH
4439: LD_INT 105
4441: PUSH
4442: LD_INT 106
4444: PUSH
4445: LD_INT 107
4447: PUSH
4448: LD_INT 108
4450: PUSH
4451: LD_INT 109
4453: PUSH
4454: LD_INT 110
4456: PUSH
4457: LD_INT 111
4459: PUSH
4460: LD_INT 112
4462: PUSH
4463: LD_INT 114
4465: PUSH
4466: LD_INT 116
4468: PUSH
4469: LD_INT 117
4471: PUSH
4472: LD_INT 118
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: ST_TO_ADDR
4497: GO 6392
4499: LD_INT 11
4501: DOUBLE
4502: EQUAL
4503: IFTRUE 4507
4505: GO 4711
4507: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4508: LD_ADDR_VAR 0 2
4512: PUSH
4513: LD_INT 2
4515: PUSH
4516: LD_INT 3
4518: PUSH
4519: LD_INT 4
4521: PUSH
4522: LD_INT 5
4524: PUSH
4525: LD_INT 6
4527: PUSH
4528: LD_INT 7
4530: PUSH
4531: LD_INT 8
4533: PUSH
4534: LD_INT 9
4536: PUSH
4537: LD_INT 10
4539: PUSH
4540: LD_INT 11
4542: PUSH
4543: LD_INT 12
4545: PUSH
4546: LD_INT 13
4548: PUSH
4549: LD_INT 14
4551: PUSH
4552: LD_INT 15
4554: PUSH
4555: LD_INT 16
4557: PUSH
4558: LD_INT 17
4560: PUSH
4561: LD_INT 18
4563: PUSH
4564: LD_INT 19
4566: PUSH
4567: LD_INT 20
4569: PUSH
4570: LD_INT 21
4572: PUSH
4573: LD_INT 22
4575: PUSH
4576: LD_INT 23
4578: PUSH
4579: LD_INT 24
4581: PUSH
4582: LD_INT 25
4584: PUSH
4585: LD_INT 26
4587: PUSH
4588: LD_INT 28
4590: PUSH
4591: LD_INT 30
4593: PUSH
4594: LD_INT 31
4596: PUSH
4597: LD_INT 32
4599: PUSH
4600: LD_INT 34
4602: PUSH
4603: LD_INT 36
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: LIST
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: PUSH
4639: LD_INT 101
4641: PUSH
4642: LD_INT 102
4644: PUSH
4645: LD_INT 103
4647: PUSH
4648: LD_INT 104
4650: PUSH
4651: LD_INT 105
4653: PUSH
4654: LD_INT 106
4656: PUSH
4657: LD_INT 107
4659: PUSH
4660: LD_INT 108
4662: PUSH
4663: LD_INT 109
4665: PUSH
4666: LD_INT 110
4668: PUSH
4669: LD_INT 111
4671: PUSH
4672: LD_INT 112
4674: PUSH
4675: LD_INT 114
4677: PUSH
4678: LD_INT 116
4680: PUSH
4681: LD_INT 117
4683: PUSH
4684: LD_INT 118
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: ST_TO_ADDR
4709: GO 6392
4711: LD_INT 12
4713: DOUBLE
4714: EQUAL
4715: IFTRUE 4719
4717: GO 4939
4719: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
4720: LD_ADDR_VAR 0 2
4724: PUSH
4725: LD_INT 1
4727: PUSH
4728: LD_INT 2
4730: PUSH
4731: LD_INT 3
4733: PUSH
4734: LD_INT 4
4736: PUSH
4737: LD_INT 5
4739: PUSH
4740: LD_INT 6
4742: PUSH
4743: LD_INT 7
4745: PUSH
4746: LD_INT 8
4748: PUSH
4749: LD_INT 9
4751: PUSH
4752: LD_INT 10
4754: PUSH
4755: LD_INT 11
4757: PUSH
4758: LD_INT 12
4760: PUSH
4761: LD_INT 13
4763: PUSH
4764: LD_INT 14
4766: PUSH
4767: LD_INT 15
4769: PUSH
4770: LD_INT 16
4772: PUSH
4773: LD_INT 17
4775: PUSH
4776: LD_INT 18
4778: PUSH
4779: LD_INT 19
4781: PUSH
4782: LD_INT 20
4784: PUSH
4785: LD_INT 21
4787: PUSH
4788: LD_INT 22
4790: PUSH
4791: LD_INT 23
4793: PUSH
4794: LD_INT 24
4796: PUSH
4797: LD_INT 25
4799: PUSH
4800: LD_INT 26
4802: PUSH
4803: LD_INT 27
4805: PUSH
4806: LD_INT 28
4808: PUSH
4809: LD_INT 30
4811: PUSH
4812: LD_INT 31
4814: PUSH
4815: LD_INT 32
4817: PUSH
4818: LD_INT 33
4820: PUSH
4821: LD_INT 34
4823: PUSH
4824: LD_INT 36
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: LD_INT 101
4865: PUSH
4866: LD_INT 102
4868: PUSH
4869: LD_INT 103
4871: PUSH
4872: LD_INT 104
4874: PUSH
4875: LD_INT 105
4877: PUSH
4878: LD_INT 106
4880: PUSH
4881: LD_INT 107
4883: PUSH
4884: LD_INT 108
4886: PUSH
4887: LD_INT 109
4889: PUSH
4890: LD_INT 110
4892: PUSH
4893: LD_INT 111
4895: PUSH
4896: LD_INT 112
4898: PUSH
4899: LD_INT 113
4901: PUSH
4902: LD_INT 114
4904: PUSH
4905: LD_INT 116
4907: PUSH
4908: LD_INT 117
4910: PUSH
4911: LD_INT 118
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: ST_TO_ADDR
4937: GO 6392
4939: LD_INT 13
4941: DOUBLE
4942: EQUAL
4943: IFTRUE 4947
4945: GO 5155
4947: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
4948: LD_ADDR_VAR 0 2
4952: PUSH
4953: LD_INT 1
4955: PUSH
4956: LD_INT 2
4958: PUSH
4959: LD_INT 3
4961: PUSH
4962: LD_INT 4
4964: PUSH
4965: LD_INT 5
4967: PUSH
4968: LD_INT 8
4970: PUSH
4971: LD_INT 9
4973: PUSH
4974: LD_INT 10
4976: PUSH
4977: LD_INT 11
4979: PUSH
4980: LD_INT 12
4982: PUSH
4983: LD_INT 14
4985: PUSH
4986: LD_INT 15
4988: PUSH
4989: LD_INT 16
4991: PUSH
4992: LD_INT 17
4994: PUSH
4995: LD_INT 18
4997: PUSH
4998: LD_INT 19
5000: PUSH
5001: LD_INT 20
5003: PUSH
5004: LD_INT 21
5006: PUSH
5007: LD_INT 22
5009: PUSH
5010: LD_INT 23
5012: PUSH
5013: LD_INT 24
5015: PUSH
5016: LD_INT 25
5018: PUSH
5019: LD_INT 26
5021: PUSH
5022: LD_INT 27
5024: PUSH
5025: LD_INT 28
5027: PUSH
5028: LD_INT 30
5030: PUSH
5031: LD_INT 31
5033: PUSH
5034: LD_INT 32
5036: PUSH
5037: LD_INT 33
5039: PUSH
5040: LD_INT 34
5042: PUSH
5043: LD_INT 36
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: LIST
5050: LIST
5051: LIST
5052: LIST
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: LIST
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: PUSH
5079: LD_INT 101
5081: PUSH
5082: LD_INT 102
5084: PUSH
5085: LD_INT 103
5087: PUSH
5088: LD_INT 104
5090: PUSH
5091: LD_INT 105
5093: PUSH
5094: LD_INT 106
5096: PUSH
5097: LD_INT 107
5099: PUSH
5100: LD_INT 108
5102: PUSH
5103: LD_INT 109
5105: PUSH
5106: LD_INT 110
5108: PUSH
5109: LD_INT 111
5111: PUSH
5112: LD_INT 112
5114: PUSH
5115: LD_INT 113
5117: PUSH
5118: LD_INT 114
5120: PUSH
5121: LD_INT 116
5123: PUSH
5124: LD_INT 117
5126: PUSH
5127: LD_INT 118
5129: PUSH
5130: EMPTY
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: LIST
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: ST_TO_ADDR
5153: GO 6392
5155: LD_INT 14
5157: DOUBLE
5158: EQUAL
5159: IFTRUE 5163
5161: GO 5387
5163: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5164: LD_ADDR_VAR 0 2
5168: PUSH
5169: LD_INT 1
5171: PUSH
5172: LD_INT 2
5174: PUSH
5175: LD_INT 3
5177: PUSH
5178: LD_INT 4
5180: PUSH
5181: LD_INT 5
5183: PUSH
5184: LD_INT 6
5186: PUSH
5187: LD_INT 7
5189: PUSH
5190: LD_INT 8
5192: PUSH
5193: LD_INT 9
5195: PUSH
5196: LD_INT 10
5198: PUSH
5199: LD_INT 11
5201: PUSH
5202: LD_INT 12
5204: PUSH
5205: LD_INT 13
5207: PUSH
5208: LD_INT 14
5210: PUSH
5211: LD_INT 15
5213: PUSH
5214: LD_INT 16
5216: PUSH
5217: LD_INT 17
5219: PUSH
5220: LD_INT 18
5222: PUSH
5223: LD_INT 19
5225: PUSH
5226: LD_INT 20
5228: PUSH
5229: LD_INT 21
5231: PUSH
5232: LD_INT 22
5234: PUSH
5235: LD_INT 23
5237: PUSH
5238: LD_INT 24
5240: PUSH
5241: LD_INT 25
5243: PUSH
5244: LD_INT 26
5246: PUSH
5247: LD_INT 27
5249: PUSH
5250: LD_INT 28
5252: PUSH
5253: LD_INT 29
5255: PUSH
5256: LD_INT 30
5258: PUSH
5259: LD_INT 31
5261: PUSH
5262: LD_INT 32
5264: PUSH
5265: LD_INT 33
5267: PUSH
5268: LD_INT 34
5270: PUSH
5271: LD_INT 36
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: PUSH
5311: LD_INT 101
5313: PUSH
5314: LD_INT 102
5316: PUSH
5317: LD_INT 103
5319: PUSH
5320: LD_INT 104
5322: PUSH
5323: LD_INT 105
5325: PUSH
5326: LD_INT 106
5328: PUSH
5329: LD_INT 107
5331: PUSH
5332: LD_INT 108
5334: PUSH
5335: LD_INT 109
5337: PUSH
5338: LD_INT 110
5340: PUSH
5341: LD_INT 111
5343: PUSH
5344: LD_INT 112
5346: PUSH
5347: LD_INT 113
5349: PUSH
5350: LD_INT 114
5352: PUSH
5353: LD_INT 116
5355: PUSH
5356: LD_INT 117
5358: PUSH
5359: LD_INT 118
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: LIST
5379: LIST
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: ST_TO_ADDR
5385: GO 6392
5387: LD_INT 15
5389: DOUBLE
5390: EQUAL
5391: IFTRUE 5395
5393: GO 5619
5395: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5396: LD_ADDR_VAR 0 2
5400: PUSH
5401: LD_INT 1
5403: PUSH
5404: LD_INT 2
5406: PUSH
5407: LD_INT 3
5409: PUSH
5410: LD_INT 4
5412: PUSH
5413: LD_INT 5
5415: PUSH
5416: LD_INT 6
5418: PUSH
5419: LD_INT 7
5421: PUSH
5422: LD_INT 8
5424: PUSH
5425: LD_INT 9
5427: PUSH
5428: LD_INT 10
5430: PUSH
5431: LD_INT 11
5433: PUSH
5434: LD_INT 12
5436: PUSH
5437: LD_INT 13
5439: PUSH
5440: LD_INT 14
5442: PUSH
5443: LD_INT 15
5445: PUSH
5446: LD_INT 16
5448: PUSH
5449: LD_INT 17
5451: PUSH
5452: LD_INT 18
5454: PUSH
5455: LD_INT 19
5457: PUSH
5458: LD_INT 20
5460: PUSH
5461: LD_INT 21
5463: PUSH
5464: LD_INT 22
5466: PUSH
5467: LD_INT 23
5469: PUSH
5470: LD_INT 24
5472: PUSH
5473: LD_INT 25
5475: PUSH
5476: LD_INT 26
5478: PUSH
5479: LD_INT 27
5481: PUSH
5482: LD_INT 28
5484: PUSH
5485: LD_INT 29
5487: PUSH
5488: LD_INT 30
5490: PUSH
5491: LD_INT 31
5493: PUSH
5494: LD_INT 32
5496: PUSH
5497: LD_INT 33
5499: PUSH
5500: LD_INT 34
5502: PUSH
5503: LD_INT 36
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: LIST
5519: LIST
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: PUSH
5543: LD_INT 101
5545: PUSH
5546: LD_INT 102
5548: PUSH
5549: LD_INT 103
5551: PUSH
5552: LD_INT 104
5554: PUSH
5555: LD_INT 105
5557: PUSH
5558: LD_INT 106
5560: PUSH
5561: LD_INT 107
5563: PUSH
5564: LD_INT 108
5566: PUSH
5567: LD_INT 109
5569: PUSH
5570: LD_INT 110
5572: PUSH
5573: LD_INT 111
5575: PUSH
5576: LD_INT 112
5578: PUSH
5579: LD_INT 113
5581: PUSH
5582: LD_INT 114
5584: PUSH
5585: LD_INT 116
5587: PUSH
5588: LD_INT 117
5590: PUSH
5591: LD_INT 118
5593: PUSH
5594: EMPTY
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: PUSH
5613: EMPTY
5614: LIST
5615: LIST
5616: ST_TO_ADDR
5617: GO 6392
5619: LD_INT 16
5621: DOUBLE
5622: EQUAL
5623: IFTRUE 5627
5625: GO 5763
5627: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
5628: LD_ADDR_VAR 0 2
5632: PUSH
5633: LD_INT 2
5635: PUSH
5636: LD_INT 4
5638: PUSH
5639: LD_INT 5
5641: PUSH
5642: LD_INT 7
5644: PUSH
5645: LD_INT 11
5647: PUSH
5648: LD_INT 12
5650: PUSH
5651: LD_INT 15
5653: PUSH
5654: LD_INT 16
5656: PUSH
5657: LD_INT 20
5659: PUSH
5660: LD_INT 21
5662: PUSH
5663: LD_INT 22
5665: PUSH
5666: LD_INT 23
5668: PUSH
5669: LD_INT 25
5671: PUSH
5672: LD_INT 26
5674: PUSH
5675: LD_INT 30
5677: PUSH
5678: LD_INT 31
5680: PUSH
5681: LD_INT 32
5683: PUSH
5684: LD_INT 33
5686: PUSH
5687: LD_INT 34
5689: PUSH
5690: EMPTY
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: PUSH
5711: LD_INT 101
5713: PUSH
5714: LD_INT 102
5716: PUSH
5717: LD_INT 103
5719: PUSH
5720: LD_INT 106
5722: PUSH
5723: LD_INT 108
5725: PUSH
5726: LD_INT 112
5728: PUSH
5729: LD_INT 113
5731: PUSH
5732: LD_INT 114
5734: PUSH
5735: LD_INT 116
5737: PUSH
5738: LD_INT 117
5740: PUSH
5741: LD_INT 118
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: LIST
5755: LIST
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: ST_TO_ADDR
5761: GO 6392
5763: LD_INT 17
5765: DOUBLE
5766: EQUAL
5767: IFTRUE 5771
5769: GO 5995
5771: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
5772: LD_ADDR_VAR 0 2
5776: PUSH
5777: LD_INT 1
5779: PUSH
5780: LD_INT 2
5782: PUSH
5783: LD_INT 3
5785: PUSH
5786: LD_INT 4
5788: PUSH
5789: LD_INT 5
5791: PUSH
5792: LD_INT 6
5794: PUSH
5795: LD_INT 7
5797: PUSH
5798: LD_INT 8
5800: PUSH
5801: LD_INT 9
5803: PUSH
5804: LD_INT 10
5806: PUSH
5807: LD_INT 11
5809: PUSH
5810: LD_INT 12
5812: PUSH
5813: LD_INT 13
5815: PUSH
5816: LD_INT 14
5818: PUSH
5819: LD_INT 15
5821: PUSH
5822: LD_INT 16
5824: PUSH
5825: LD_INT 17
5827: PUSH
5828: LD_INT 18
5830: PUSH
5831: LD_INT 19
5833: PUSH
5834: LD_INT 20
5836: PUSH
5837: LD_INT 21
5839: PUSH
5840: LD_INT 22
5842: PUSH
5843: LD_INT 23
5845: PUSH
5846: LD_INT 24
5848: PUSH
5849: LD_INT 25
5851: PUSH
5852: LD_INT 26
5854: PUSH
5855: LD_INT 27
5857: PUSH
5858: LD_INT 28
5860: PUSH
5861: LD_INT 29
5863: PUSH
5864: LD_INT 30
5866: PUSH
5867: LD_INT 31
5869: PUSH
5870: LD_INT 32
5872: PUSH
5873: LD_INT 33
5875: PUSH
5876: LD_INT 34
5878: PUSH
5879: LD_INT 36
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: PUSH
5919: LD_INT 101
5921: PUSH
5922: LD_INT 102
5924: PUSH
5925: LD_INT 103
5927: PUSH
5928: LD_INT 104
5930: PUSH
5931: LD_INT 105
5933: PUSH
5934: LD_INT 106
5936: PUSH
5937: LD_INT 107
5939: PUSH
5940: LD_INT 108
5942: PUSH
5943: LD_INT 109
5945: PUSH
5946: LD_INT 110
5948: PUSH
5949: LD_INT 111
5951: PUSH
5952: LD_INT 112
5954: PUSH
5955: LD_INT 113
5957: PUSH
5958: LD_INT 114
5960: PUSH
5961: LD_INT 116
5963: PUSH
5964: LD_INT 117
5966: PUSH
5967: LD_INT 118
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: PUSH
5989: EMPTY
5990: LIST
5991: LIST
5992: ST_TO_ADDR
5993: GO 6392
5995: LD_INT 18
5997: DOUBLE
5998: EQUAL
5999: IFTRUE 6003
6001: GO 6151
6003: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6004: LD_ADDR_VAR 0 2
6008: PUSH
6009: LD_INT 2
6011: PUSH
6012: LD_INT 4
6014: PUSH
6015: LD_INT 5
6017: PUSH
6018: LD_INT 7
6020: PUSH
6021: LD_INT 11
6023: PUSH
6024: LD_INT 12
6026: PUSH
6027: LD_INT 15
6029: PUSH
6030: LD_INT 16
6032: PUSH
6033: LD_INT 20
6035: PUSH
6036: LD_INT 21
6038: PUSH
6039: LD_INT 22
6041: PUSH
6042: LD_INT 23
6044: PUSH
6045: LD_INT 25
6047: PUSH
6048: LD_INT 26
6050: PUSH
6051: LD_INT 30
6053: PUSH
6054: LD_INT 31
6056: PUSH
6057: LD_INT 32
6059: PUSH
6060: LD_INT 33
6062: PUSH
6063: LD_INT 34
6065: PUSH
6066: LD_INT 35
6068: PUSH
6069: LD_INT 36
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: PUSH
6095: LD_INT 101
6097: PUSH
6098: LD_INT 102
6100: PUSH
6101: LD_INT 103
6103: PUSH
6104: LD_INT 106
6106: PUSH
6107: LD_INT 108
6109: PUSH
6110: LD_INT 112
6112: PUSH
6113: LD_INT 113
6115: PUSH
6116: LD_INT 114
6118: PUSH
6119: LD_INT 115
6121: PUSH
6122: LD_INT 116
6124: PUSH
6125: LD_INT 117
6127: PUSH
6128: LD_INT 118
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: ST_TO_ADDR
6149: GO 6392
6151: LD_INT 19
6153: DOUBLE
6154: EQUAL
6155: IFTRUE 6159
6157: GO 6391
6159: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6160: LD_ADDR_VAR 0 2
6164: PUSH
6165: LD_INT 1
6167: PUSH
6168: LD_INT 2
6170: PUSH
6171: LD_INT 3
6173: PUSH
6174: LD_INT 4
6176: PUSH
6177: LD_INT 5
6179: PUSH
6180: LD_INT 6
6182: PUSH
6183: LD_INT 7
6185: PUSH
6186: LD_INT 8
6188: PUSH
6189: LD_INT 9
6191: PUSH
6192: LD_INT 10
6194: PUSH
6195: LD_INT 11
6197: PUSH
6198: LD_INT 12
6200: PUSH
6201: LD_INT 13
6203: PUSH
6204: LD_INT 14
6206: PUSH
6207: LD_INT 15
6209: PUSH
6210: LD_INT 16
6212: PUSH
6213: LD_INT 17
6215: PUSH
6216: LD_INT 18
6218: PUSH
6219: LD_INT 19
6221: PUSH
6222: LD_INT 20
6224: PUSH
6225: LD_INT 21
6227: PUSH
6228: LD_INT 22
6230: PUSH
6231: LD_INT 23
6233: PUSH
6234: LD_INT 24
6236: PUSH
6237: LD_INT 25
6239: PUSH
6240: LD_INT 26
6242: PUSH
6243: LD_INT 27
6245: PUSH
6246: LD_INT 28
6248: PUSH
6249: LD_INT 29
6251: PUSH
6252: LD_INT 30
6254: PUSH
6255: LD_INT 31
6257: PUSH
6258: LD_INT 32
6260: PUSH
6261: LD_INT 33
6263: PUSH
6264: LD_INT 34
6266: PUSH
6267: LD_INT 35
6269: PUSH
6270: LD_INT 36
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: PUSH
6311: LD_INT 101
6313: PUSH
6314: LD_INT 102
6316: PUSH
6317: LD_INT 103
6319: PUSH
6320: LD_INT 104
6322: PUSH
6323: LD_INT 105
6325: PUSH
6326: LD_INT 106
6328: PUSH
6329: LD_INT 107
6331: PUSH
6332: LD_INT 108
6334: PUSH
6335: LD_INT 109
6337: PUSH
6338: LD_INT 110
6340: PUSH
6341: LD_INT 111
6343: PUSH
6344: LD_INT 112
6346: PUSH
6347: LD_INT 113
6349: PUSH
6350: LD_INT 114
6352: PUSH
6353: LD_INT 115
6355: PUSH
6356: LD_INT 116
6358: PUSH
6359: LD_INT 117
6361: PUSH
6362: LD_INT 118
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: ST_TO_ADDR
6389: GO 6392
6391: POP
// end else
6392: GO 6623
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6394: LD_ADDR_VAR 0 2
6398: PUSH
6399: LD_INT 1
6401: PUSH
6402: LD_INT 2
6404: PUSH
6405: LD_INT 3
6407: PUSH
6408: LD_INT 4
6410: PUSH
6411: LD_INT 5
6413: PUSH
6414: LD_INT 6
6416: PUSH
6417: LD_INT 7
6419: PUSH
6420: LD_INT 8
6422: PUSH
6423: LD_INT 9
6425: PUSH
6426: LD_INT 10
6428: PUSH
6429: LD_INT 11
6431: PUSH
6432: LD_INT 12
6434: PUSH
6435: LD_INT 13
6437: PUSH
6438: LD_INT 14
6440: PUSH
6441: LD_INT 15
6443: PUSH
6444: LD_INT 16
6446: PUSH
6447: LD_INT 17
6449: PUSH
6450: LD_INT 18
6452: PUSH
6453: LD_INT 19
6455: PUSH
6456: LD_INT 20
6458: PUSH
6459: LD_INT 21
6461: PUSH
6462: LD_INT 22
6464: PUSH
6465: LD_INT 23
6467: PUSH
6468: LD_INT 24
6470: PUSH
6471: LD_INT 25
6473: PUSH
6474: LD_INT 26
6476: PUSH
6477: LD_INT 27
6479: PUSH
6480: LD_INT 28
6482: PUSH
6483: LD_INT 29
6485: PUSH
6486: LD_INT 30
6488: PUSH
6489: LD_INT 31
6491: PUSH
6492: LD_INT 32
6494: PUSH
6495: LD_INT 33
6497: PUSH
6498: LD_INT 34
6500: PUSH
6501: LD_INT 35
6503: PUSH
6504: LD_INT 36
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: PUSH
6545: LD_INT 101
6547: PUSH
6548: LD_INT 102
6550: PUSH
6551: LD_INT 103
6553: PUSH
6554: LD_INT 104
6556: PUSH
6557: LD_INT 105
6559: PUSH
6560: LD_INT 106
6562: PUSH
6563: LD_INT 107
6565: PUSH
6566: LD_INT 108
6568: PUSH
6569: LD_INT 109
6571: PUSH
6572: LD_INT 110
6574: PUSH
6575: LD_INT 111
6577: PUSH
6578: LD_INT 112
6580: PUSH
6581: LD_INT 113
6583: PUSH
6584: LD_INT 114
6586: PUSH
6587: LD_INT 115
6589: PUSH
6590: LD_INT 116
6592: PUSH
6593: LD_INT 117
6595: PUSH
6596: LD_INT 118
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: ST_TO_ADDR
// if result then
6623: LD_VAR 0 2
6627: IFFALSE 7413
// begin normal :=  ;
6629: LD_ADDR_VAR 0 5
6633: PUSH
6634: LD_STRING 
6636: ST_TO_ADDR
// hardcore :=  ;
6637: LD_ADDR_VAR 0 6
6641: PUSH
6642: LD_STRING 
6644: ST_TO_ADDR
// active :=  ;
6645: LD_ADDR_VAR 0 7
6649: PUSH
6650: LD_STRING 
6652: ST_TO_ADDR
// for i = 1 to normalCounter do
6653: LD_ADDR_VAR 0 8
6657: PUSH
6658: DOUBLE
6659: LD_INT 1
6661: DEC
6662: ST_TO_ADDR
6663: LD_EXP 4
6667: PUSH
6668: FOR_TO
6669: IFFALSE 6770
// begin tmp := 0 ;
6671: LD_ADDR_VAR 0 3
6675: PUSH
6676: LD_STRING 0
6678: ST_TO_ADDR
// if result [ 1 ] then
6679: LD_VAR 0 2
6683: PUSH
6684: LD_INT 1
6686: ARRAY
6687: IFFALSE 6752
// if result [ 1 ] [ 1 ] = i then
6689: LD_VAR 0 2
6693: PUSH
6694: LD_INT 1
6696: ARRAY
6697: PUSH
6698: LD_INT 1
6700: ARRAY
6701: PUSH
6702: LD_VAR 0 8
6706: EQUAL
6707: IFFALSE 6752
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6709: LD_ADDR_VAR 0 2
6713: PUSH
6714: LD_VAR 0 2
6718: PPUSH
6719: LD_INT 1
6721: PPUSH
6722: LD_VAR 0 2
6726: PUSH
6727: LD_INT 1
6729: ARRAY
6730: PPUSH
6731: LD_INT 1
6733: PPUSH
6734: CALL_OW 3
6738: PPUSH
6739: CALL_OW 1
6743: ST_TO_ADDR
// tmp := 1 ;
6744: LD_ADDR_VAR 0 3
6748: PUSH
6749: LD_STRING 1
6751: ST_TO_ADDR
// end ; normal := normal & tmp ;
6752: LD_ADDR_VAR 0 5
6756: PUSH
6757: LD_VAR 0 5
6761: PUSH
6762: LD_VAR 0 3
6766: STR
6767: ST_TO_ADDR
// end ;
6768: GO 6668
6770: POP
6771: POP
// for i = 1 to hardcoreCounter do
6772: LD_ADDR_VAR 0 8
6776: PUSH
6777: DOUBLE
6778: LD_INT 1
6780: DEC
6781: ST_TO_ADDR
6782: LD_EXP 5
6786: PUSH
6787: FOR_TO
6788: IFFALSE 6893
// begin tmp := 0 ;
6790: LD_ADDR_VAR 0 3
6794: PUSH
6795: LD_STRING 0
6797: ST_TO_ADDR
// if result [ 2 ] then
6798: LD_VAR 0 2
6802: PUSH
6803: LD_INT 2
6805: ARRAY
6806: IFFALSE 6875
// if result [ 2 ] [ 1 ] = 100 + i then
6808: LD_VAR 0 2
6812: PUSH
6813: LD_INT 2
6815: ARRAY
6816: PUSH
6817: LD_INT 1
6819: ARRAY
6820: PUSH
6821: LD_INT 100
6823: PUSH
6824: LD_VAR 0 8
6828: PLUS
6829: EQUAL
6830: IFFALSE 6875
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6832: LD_ADDR_VAR 0 2
6836: PUSH
6837: LD_VAR 0 2
6841: PPUSH
6842: LD_INT 2
6844: PPUSH
6845: LD_VAR 0 2
6849: PUSH
6850: LD_INT 2
6852: ARRAY
6853: PPUSH
6854: LD_INT 1
6856: PPUSH
6857: CALL_OW 3
6861: PPUSH
6862: CALL_OW 1
6866: ST_TO_ADDR
// tmp := 1 ;
6867: LD_ADDR_VAR 0 3
6871: PUSH
6872: LD_STRING 1
6874: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6875: LD_ADDR_VAR 0 6
6879: PUSH
6880: LD_VAR 0 6
6884: PUSH
6885: LD_VAR 0 3
6889: STR
6890: ST_TO_ADDR
// end ;
6891: GO 6787
6893: POP
6894: POP
// if isGameLoad then
6895: LD_VAR 0 1
6899: IFFALSE 7374
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
6901: LD_ADDR_VAR 0 4
6905: PUSH
6906: LD_EXP 8
6910: PUSH
6911: LD_EXP 7
6915: PUSH
6916: LD_EXP 9
6920: PUSH
6921: LD_EXP 6
6925: PUSH
6926: LD_EXP 10
6930: PUSH
6931: LD_EXP 11
6935: PUSH
6936: LD_EXP 12
6940: PUSH
6941: LD_EXP 13
6945: PUSH
6946: LD_EXP 14
6950: PUSH
6951: LD_EXP 15
6955: PUSH
6956: LD_EXP 16
6960: PUSH
6961: LD_EXP 17
6965: PUSH
6966: LD_EXP 18
6970: PUSH
6971: LD_EXP 19
6975: PUSH
6976: LD_EXP 27
6980: PUSH
6981: LD_EXP 28
6985: PUSH
6986: LD_EXP 29
6990: PUSH
6991: LD_EXP 30
6995: PUSH
6996: LD_EXP 32
7000: PUSH
7001: LD_EXP 33
7005: PUSH
7006: LD_EXP 34
7010: PUSH
7011: LD_EXP 37
7015: PUSH
7016: LD_EXP 39
7020: PUSH
7021: LD_EXP 40
7025: PUSH
7026: LD_EXP 41
7030: PUSH
7031: LD_EXP 43
7035: PUSH
7036: LD_EXP 44
7040: PUSH
7041: LD_EXP 47
7045: PUSH
7046: LD_EXP 48
7050: PUSH
7051: LD_EXP 49
7055: PUSH
7056: LD_EXP 50
7060: PUSH
7061: LD_EXP 51
7065: PUSH
7066: LD_EXP 52
7070: PUSH
7071: LD_EXP 53
7075: PUSH
7076: LD_EXP 54
7080: PUSH
7081: LD_EXP 55
7085: PUSH
7086: LD_EXP 20
7090: PUSH
7091: LD_EXP 21
7095: PUSH
7096: LD_EXP 24
7100: PUSH
7101: LD_EXP 25
7105: PUSH
7106: LD_EXP 26
7110: PUSH
7111: LD_EXP 22
7115: PUSH
7116: LD_EXP 23
7120: PUSH
7121: LD_EXP 31
7125: PUSH
7126: LD_EXP 35
7130: PUSH
7131: LD_EXP 36
7135: PUSH
7136: LD_EXP 38
7140: PUSH
7141: LD_EXP 42
7145: PUSH
7146: LD_EXP 45
7150: PUSH
7151: LD_EXP 46
7155: PUSH
7156: LD_EXP 56
7160: PUSH
7161: LD_EXP 57
7165: PUSH
7166: LD_EXP 58
7170: PUSH
7171: LD_EXP 59
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: ST_TO_ADDR
// tmp :=  ;
7232: LD_ADDR_VAR 0 3
7236: PUSH
7237: LD_STRING 
7239: ST_TO_ADDR
// for i = 1 to normalCounter do
7240: LD_ADDR_VAR 0 8
7244: PUSH
7245: DOUBLE
7246: LD_INT 1
7248: DEC
7249: ST_TO_ADDR
7250: LD_EXP 4
7254: PUSH
7255: FOR_TO
7256: IFFALSE 7292
// begin if flags [ i ] then
7258: LD_VAR 0 4
7262: PUSH
7263: LD_VAR 0 8
7267: ARRAY
7268: IFFALSE 7290
// tmp := tmp & i & ; ;
7270: LD_ADDR_VAR 0 3
7274: PUSH
7275: LD_VAR 0 3
7279: PUSH
7280: LD_VAR 0 8
7284: STR
7285: PUSH
7286: LD_STRING ;
7288: STR
7289: ST_TO_ADDR
// end ;
7290: GO 7255
7292: POP
7293: POP
// for i = 1 to hardcoreCounter do
7294: LD_ADDR_VAR 0 8
7298: PUSH
7299: DOUBLE
7300: LD_INT 1
7302: DEC
7303: ST_TO_ADDR
7304: LD_EXP 5
7308: PUSH
7309: FOR_TO
7310: IFFALSE 7356
// begin if flags [ normalCounter + i ] then
7312: LD_VAR 0 4
7316: PUSH
7317: LD_EXP 4
7321: PUSH
7322: LD_VAR 0 8
7326: PLUS
7327: ARRAY
7328: IFFALSE 7354
// tmp := tmp & ( 100 + i ) & ; ;
7330: LD_ADDR_VAR 0 3
7334: PUSH
7335: LD_VAR 0 3
7339: PUSH
7340: LD_INT 100
7342: PUSH
7343: LD_VAR 0 8
7347: PLUS
7348: STR
7349: PUSH
7350: LD_STRING ;
7352: STR
7353: ST_TO_ADDR
// end ;
7354: GO 7309
7356: POP
7357: POP
// if tmp then
7358: LD_VAR 0 3
7362: IFFALSE 7374
// active := tmp ;
7364: LD_ADDR_VAR 0 7
7368: PUSH
7369: LD_VAR 0 3
7373: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7374: LD_STRING getStreamItemsFromMission("
7376: PUSH
7377: LD_VAR 0 5
7381: STR
7382: PUSH
7383: LD_STRING ","
7385: STR
7386: PUSH
7387: LD_VAR 0 6
7391: STR
7392: PUSH
7393: LD_STRING ","
7395: STR
7396: PUSH
7397: LD_VAR 0 7
7401: STR
7402: PUSH
7403: LD_STRING ")
7405: STR
7406: PPUSH
7407: CALL_OW 559
// end else
7411: GO 7420
// ToLua ( getStreamItemsFromMission("","","") ) ;
7413: LD_STRING getStreamItemsFromMission("","","")
7415: PPUSH
7416: CALL_OW 559
// end ;
7420: LD_VAR 0 2
7424: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7425: LD_EXP 3
7429: PUSH
7430: LD_EXP 8
7434: AND
7435: IFFALSE 7559
7437: GO 7439
7439: DISABLE
7440: LD_INT 0
7442: PPUSH
7443: PPUSH
// begin enable ;
7444: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7445: LD_ADDR_VAR 0 2
7449: PUSH
7450: LD_INT 22
7452: PUSH
7453: LD_OWVAR 2
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: LD_INT 2
7464: PUSH
7465: LD_INT 34
7467: PUSH
7468: LD_INT 7
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: LD_INT 34
7477: PUSH
7478: LD_INT 45
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: LD_INT 34
7487: PUSH
7488: LD_INT 28
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PUSH
7495: LD_INT 34
7497: PUSH
7498: LD_INT 47
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PPUSH
7516: CALL_OW 69
7520: ST_TO_ADDR
// if not tmp then
7521: LD_VAR 0 2
7525: NOT
7526: IFFALSE 7530
// exit ;
7528: GO 7559
// for i in tmp do
7530: LD_ADDR_VAR 0 1
7534: PUSH
7535: LD_VAR 0 2
7539: PUSH
7540: FOR_IN
7541: IFFALSE 7557
// begin SetLives ( i , 0 ) ;
7543: LD_VAR 0 1
7547: PPUSH
7548: LD_INT 0
7550: PPUSH
7551: CALL_OW 234
// end ;
7555: GO 7540
7557: POP
7558: POP
// end ;
7559: PPOPN 2
7561: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7562: LD_EXP 3
7566: PUSH
7567: LD_EXP 9
7571: AND
7572: IFFALSE 7656
7574: GO 7576
7576: DISABLE
7577: LD_INT 0
7579: PPUSH
7580: PPUSH
// begin enable ;
7581: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7582: LD_ADDR_VAR 0 2
7586: PUSH
7587: LD_INT 22
7589: PUSH
7590: LD_OWVAR 2
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: PUSH
7599: LD_INT 32
7601: PUSH
7602: LD_INT 3
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: PPUSH
7613: CALL_OW 69
7617: ST_TO_ADDR
// if not tmp then
7618: LD_VAR 0 2
7622: NOT
7623: IFFALSE 7627
// exit ;
7625: GO 7656
// for i in tmp do
7627: LD_ADDR_VAR 0 1
7631: PUSH
7632: LD_VAR 0 2
7636: PUSH
7637: FOR_IN
7638: IFFALSE 7654
// begin SetLives ( i , 0 ) ;
7640: LD_VAR 0 1
7644: PPUSH
7645: LD_INT 0
7647: PPUSH
7648: CALL_OW 234
// end ;
7652: GO 7637
7654: POP
7655: POP
// end ;
7656: PPOPN 2
7658: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7659: LD_EXP 3
7663: PUSH
7664: LD_EXP 6
7668: AND
7669: IFFALSE 7762
7671: GO 7673
7673: DISABLE
7674: LD_INT 0
7676: PPUSH
// begin enable ;
7677: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7678: LD_ADDR_VAR 0 1
7682: PUSH
7683: LD_INT 22
7685: PUSH
7686: LD_OWVAR 2
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: PUSH
7695: LD_INT 2
7697: PUSH
7698: LD_INT 25
7700: PUSH
7701: LD_INT 5
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PUSH
7708: LD_INT 25
7710: PUSH
7711: LD_INT 9
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PUSH
7718: LD_INT 25
7720: PUSH
7721: LD_INT 8
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: PPUSH
7738: CALL_OW 69
7742: PUSH
7743: FOR_IN
7744: IFFALSE 7760
// begin SetClass ( i , 1 ) ;
7746: LD_VAR 0 1
7750: PPUSH
7751: LD_INT 1
7753: PPUSH
7754: CALL_OW 336
// end ;
7758: GO 7743
7760: POP
7761: POP
// end ;
7762: PPOPN 1
7764: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7765: LD_EXP 3
7769: PUSH
7770: LD_EXP 7
7774: AND
7775: PUSH
7776: LD_OWVAR 65
7780: PUSH
7781: LD_INT 7
7783: LESS
7784: AND
7785: IFFALSE 7799
7787: GO 7789
7789: DISABLE
// begin enable ;
7790: ENABLE
// game_speed := 7 ;
7791: LD_ADDR_OWVAR 65
7795: PUSH
7796: LD_INT 7
7798: ST_TO_ADDR
// end ;
7799: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7800: LD_EXP 3
7804: PUSH
7805: LD_EXP 10
7809: AND
7810: IFFALSE 8012
7812: GO 7814
7814: DISABLE
7815: LD_INT 0
7817: PPUSH
7818: PPUSH
7819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7820: LD_ADDR_VAR 0 3
7824: PUSH
7825: LD_INT 81
7827: PUSH
7828: LD_OWVAR 2
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: PUSH
7837: LD_INT 21
7839: PUSH
7840: LD_INT 1
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PPUSH
7851: CALL_OW 69
7855: ST_TO_ADDR
// if not tmp then
7856: LD_VAR 0 3
7860: NOT
7861: IFFALSE 7865
// exit ;
7863: GO 8012
// if tmp > 5 then
7865: LD_VAR 0 3
7869: PUSH
7870: LD_INT 5
7872: GREATER
7873: IFFALSE 7885
// k := 5 else
7875: LD_ADDR_VAR 0 2
7879: PUSH
7880: LD_INT 5
7882: ST_TO_ADDR
7883: GO 7895
// k := tmp ;
7885: LD_ADDR_VAR 0 2
7889: PUSH
7890: LD_VAR 0 3
7894: ST_TO_ADDR
// for i := 1 to k do
7895: LD_ADDR_VAR 0 1
7899: PUSH
7900: DOUBLE
7901: LD_INT 1
7903: DEC
7904: ST_TO_ADDR
7905: LD_VAR 0 2
7909: PUSH
7910: FOR_TO
7911: IFFALSE 8010
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7913: LD_VAR 0 3
7917: PUSH
7918: LD_VAR 0 1
7922: ARRAY
7923: PPUSH
7924: LD_VAR 0 1
7928: PUSH
7929: LD_INT 4
7931: MOD
7932: PUSH
7933: LD_INT 1
7935: PLUS
7936: PPUSH
7937: CALL_OW 259
7941: PUSH
7942: LD_INT 10
7944: LESS
7945: IFFALSE 8008
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7947: LD_VAR 0 3
7951: PUSH
7952: LD_VAR 0 1
7956: ARRAY
7957: PPUSH
7958: LD_VAR 0 1
7962: PUSH
7963: LD_INT 4
7965: MOD
7966: PUSH
7967: LD_INT 1
7969: PLUS
7970: PPUSH
7971: LD_VAR 0 3
7975: PUSH
7976: LD_VAR 0 1
7980: ARRAY
7981: PPUSH
7982: LD_VAR 0 1
7986: PUSH
7987: LD_INT 4
7989: MOD
7990: PUSH
7991: LD_INT 1
7993: PLUS
7994: PPUSH
7995: CALL_OW 259
7999: PUSH
8000: LD_INT 1
8002: PLUS
8003: PPUSH
8004: CALL_OW 237
8008: GO 7910
8010: POP
8011: POP
// end ;
8012: PPOPN 3
8014: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8015: LD_EXP 3
8019: PUSH
8020: LD_EXP 11
8024: AND
8025: IFFALSE 8045
8027: GO 8029
8029: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8030: LD_INT 4
8032: PPUSH
8033: LD_OWVAR 2
8037: PPUSH
8038: LD_INT 0
8040: PPUSH
8041: CALL_OW 324
8045: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8046: LD_EXP 3
8050: PUSH
8051: LD_EXP 40
8055: AND
8056: IFFALSE 8076
8058: GO 8060
8060: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8061: LD_INT 19
8063: PPUSH
8064: LD_OWVAR 2
8068: PPUSH
8069: LD_INT 0
8071: PPUSH
8072: CALL_OW 324
8076: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8077: LD_EXP 3
8081: PUSH
8082: LD_EXP 12
8086: AND
8087: IFFALSE 8189
8089: GO 8091
8091: DISABLE
8092: LD_INT 0
8094: PPUSH
8095: PPUSH
// begin enable ;
8096: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8097: LD_ADDR_VAR 0 2
8101: PUSH
8102: LD_INT 22
8104: PUSH
8105: LD_OWVAR 2
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: PUSH
8114: LD_INT 2
8116: PUSH
8117: LD_INT 34
8119: PUSH
8120: LD_INT 11
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: PUSH
8127: LD_INT 34
8129: PUSH
8130: LD_INT 30
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: LIST
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: PPUSH
8146: CALL_OW 69
8150: ST_TO_ADDR
// if not tmp then
8151: LD_VAR 0 2
8155: NOT
8156: IFFALSE 8160
// exit ;
8158: GO 8189
// for i in tmp do
8160: LD_ADDR_VAR 0 1
8164: PUSH
8165: LD_VAR 0 2
8169: PUSH
8170: FOR_IN
8171: IFFALSE 8187
// begin SetLives ( i , 0 ) ;
8173: LD_VAR 0 1
8177: PPUSH
8178: LD_INT 0
8180: PPUSH
8181: CALL_OW 234
// end ;
8185: GO 8170
8187: POP
8188: POP
// end ;
8189: PPOPN 2
8191: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8192: LD_EXP 3
8196: PUSH
8197: LD_EXP 13
8201: AND
8202: IFFALSE 8222
8204: GO 8206
8206: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8207: LD_INT 32
8209: PPUSH
8210: LD_OWVAR 2
8214: PPUSH
8215: LD_INT 0
8217: PPUSH
8218: CALL_OW 324
8222: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8223: LD_EXP 3
8227: PUSH
8228: LD_EXP 14
8232: AND
8233: IFFALSE 8414
8235: GO 8237
8237: DISABLE
8238: LD_INT 0
8240: PPUSH
8241: PPUSH
8242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8243: LD_ADDR_VAR 0 2
8247: PUSH
8248: LD_INT 22
8250: PUSH
8251: LD_OWVAR 2
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: PUSH
8260: LD_INT 33
8262: PUSH
8263: LD_INT 3
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: PPUSH
8274: CALL_OW 69
8278: ST_TO_ADDR
// if not tmp then
8279: LD_VAR 0 2
8283: NOT
8284: IFFALSE 8288
// exit ;
8286: GO 8414
// side := 0 ;
8288: LD_ADDR_VAR 0 3
8292: PUSH
8293: LD_INT 0
8295: ST_TO_ADDR
// for i := 1 to 8 do
8296: LD_ADDR_VAR 0 1
8300: PUSH
8301: DOUBLE
8302: LD_INT 1
8304: DEC
8305: ST_TO_ADDR
8306: LD_INT 8
8308: PUSH
8309: FOR_TO
8310: IFFALSE 8358
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8312: LD_OWVAR 2
8316: PUSH
8317: LD_VAR 0 1
8321: NONEQUAL
8322: PUSH
8323: LD_OWVAR 2
8327: PPUSH
8328: LD_VAR 0 1
8332: PPUSH
8333: CALL_OW 81
8337: PUSH
8338: LD_INT 2
8340: EQUAL
8341: AND
8342: IFFALSE 8356
// begin side := i ;
8344: LD_ADDR_VAR 0 3
8348: PUSH
8349: LD_VAR 0 1
8353: ST_TO_ADDR
// break ;
8354: GO 8358
// end ;
8356: GO 8309
8358: POP
8359: POP
// if not side then
8360: LD_VAR 0 3
8364: NOT
8365: IFFALSE 8369
// exit ;
8367: GO 8414
// for i := 1 to tmp do
8369: LD_ADDR_VAR 0 1
8373: PUSH
8374: DOUBLE
8375: LD_INT 1
8377: DEC
8378: ST_TO_ADDR
8379: LD_VAR 0 2
8383: PUSH
8384: FOR_TO
8385: IFFALSE 8412
// if Prob ( 60 ) then
8387: LD_INT 60
8389: PPUSH
8390: CALL_OW 13
8394: IFFALSE 8410
// SetSide ( i , side ) ;
8396: LD_VAR 0 1
8400: PPUSH
8401: LD_VAR 0 3
8405: PPUSH
8406: CALL_OW 235
8410: GO 8384
8412: POP
8413: POP
// end ;
8414: PPOPN 3
8416: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8417: LD_EXP 3
8421: PUSH
8422: LD_EXP 16
8426: AND
8427: IFFALSE 8546
8429: GO 8431
8431: DISABLE
8432: LD_INT 0
8434: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8435: LD_ADDR_VAR 0 1
8439: PUSH
8440: LD_INT 22
8442: PUSH
8443: LD_OWVAR 2
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: PUSH
8452: LD_INT 21
8454: PUSH
8455: LD_INT 1
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: PUSH
8462: LD_INT 3
8464: PUSH
8465: LD_INT 23
8467: PUSH
8468: LD_INT 0
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: LIST
8483: PPUSH
8484: CALL_OW 69
8488: PUSH
8489: FOR_IN
8490: IFFALSE 8544
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8492: LD_VAR 0 1
8496: PPUSH
8497: CALL_OW 257
8501: PUSH
8502: LD_INT 1
8504: PUSH
8505: LD_INT 2
8507: PUSH
8508: LD_INT 3
8510: PUSH
8511: LD_INT 4
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: IN
8520: IFFALSE 8542
// SetClass ( un , rand ( 1 , 4 ) ) ;
8522: LD_VAR 0 1
8526: PPUSH
8527: LD_INT 1
8529: PPUSH
8530: LD_INT 4
8532: PPUSH
8533: CALL_OW 12
8537: PPUSH
8538: CALL_OW 336
8542: GO 8489
8544: POP
8545: POP
// end ;
8546: PPOPN 1
8548: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8549: LD_EXP 3
8553: PUSH
8554: LD_EXP 15
8558: AND
8559: IFFALSE 8638
8561: GO 8563
8563: DISABLE
8564: LD_INT 0
8566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8567: LD_ADDR_VAR 0 1
8571: PUSH
8572: LD_INT 22
8574: PUSH
8575: LD_OWVAR 2
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: PUSH
8584: LD_INT 21
8586: PUSH
8587: LD_INT 3
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PPUSH
8598: CALL_OW 69
8602: ST_TO_ADDR
// if not tmp then
8603: LD_VAR 0 1
8607: NOT
8608: IFFALSE 8612
// exit ;
8610: GO 8638
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8612: LD_VAR 0 1
8616: PUSH
8617: LD_INT 1
8619: PPUSH
8620: LD_VAR 0 1
8624: PPUSH
8625: CALL_OW 12
8629: ARRAY
8630: PPUSH
8631: LD_INT 100
8633: PPUSH
8634: CALL_OW 234
// end ;
8638: PPOPN 1
8640: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8641: LD_EXP 3
8645: PUSH
8646: LD_EXP 17
8650: AND
8651: IFFALSE 8749
8653: GO 8655
8655: DISABLE
8656: LD_INT 0
8658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8659: LD_ADDR_VAR 0 1
8663: PUSH
8664: LD_INT 22
8666: PUSH
8667: LD_OWVAR 2
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: PUSH
8676: LD_INT 21
8678: PUSH
8679: LD_INT 1
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: PPUSH
8690: CALL_OW 69
8694: ST_TO_ADDR
// if not tmp then
8695: LD_VAR 0 1
8699: NOT
8700: IFFALSE 8704
// exit ;
8702: GO 8749
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8704: LD_VAR 0 1
8708: PUSH
8709: LD_INT 1
8711: PPUSH
8712: LD_VAR 0 1
8716: PPUSH
8717: CALL_OW 12
8721: ARRAY
8722: PPUSH
8723: LD_INT 1
8725: PPUSH
8726: LD_INT 4
8728: PPUSH
8729: CALL_OW 12
8733: PPUSH
8734: LD_INT 3000
8736: PPUSH
8737: LD_INT 9000
8739: PPUSH
8740: CALL_OW 12
8744: PPUSH
8745: CALL_OW 492
// end ;
8749: PPOPN 1
8751: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8752: LD_EXP 3
8756: PUSH
8757: LD_EXP 18
8761: AND
8762: IFFALSE 8782
8764: GO 8766
8766: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8767: LD_INT 1
8769: PPUSH
8770: LD_OWVAR 2
8774: PPUSH
8775: LD_INT 0
8777: PPUSH
8778: CALL_OW 324
8782: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8783: LD_EXP 3
8787: PUSH
8788: LD_EXP 19
8792: AND
8793: IFFALSE 8876
8795: GO 8797
8797: DISABLE
8798: LD_INT 0
8800: PPUSH
8801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8802: LD_ADDR_VAR 0 2
8806: PUSH
8807: LD_INT 22
8809: PUSH
8810: LD_OWVAR 2
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PUSH
8819: LD_INT 21
8821: PUSH
8822: LD_INT 3
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PPUSH
8833: CALL_OW 69
8837: ST_TO_ADDR
// if not tmp then
8838: LD_VAR 0 2
8842: NOT
8843: IFFALSE 8847
// exit ;
8845: GO 8876
// for i in tmp do
8847: LD_ADDR_VAR 0 1
8851: PUSH
8852: LD_VAR 0 2
8856: PUSH
8857: FOR_IN
8858: IFFALSE 8874
// SetBLevel ( i , 10 ) ;
8860: LD_VAR 0 1
8864: PPUSH
8865: LD_INT 10
8867: PPUSH
8868: CALL_OW 241
8872: GO 8857
8874: POP
8875: POP
// end ;
8876: PPOPN 2
8878: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8879: LD_EXP 3
8883: PUSH
8884: LD_EXP 20
8888: AND
8889: IFFALSE 9000
8891: GO 8893
8893: DISABLE
8894: LD_INT 0
8896: PPUSH
8897: PPUSH
8898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8899: LD_ADDR_VAR 0 3
8903: PUSH
8904: LD_INT 22
8906: PUSH
8907: LD_OWVAR 2
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: PUSH
8916: LD_INT 25
8918: PUSH
8919: LD_INT 1
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PPUSH
8930: CALL_OW 69
8934: ST_TO_ADDR
// if not tmp then
8935: LD_VAR 0 3
8939: NOT
8940: IFFALSE 8944
// exit ;
8942: GO 9000
// un := tmp [ rand ( 1 , tmp ) ] ;
8944: LD_ADDR_VAR 0 2
8948: PUSH
8949: LD_VAR 0 3
8953: PUSH
8954: LD_INT 1
8956: PPUSH
8957: LD_VAR 0 3
8961: PPUSH
8962: CALL_OW 12
8966: ARRAY
8967: ST_TO_ADDR
// if Crawls ( un ) then
8968: LD_VAR 0 2
8972: PPUSH
8973: CALL_OW 318
8977: IFFALSE 8988
// ComWalk ( un ) ;
8979: LD_VAR 0 2
8983: PPUSH
8984: CALL_OW 138
// SetClass ( un , class_sniper ) ;
8988: LD_VAR 0 2
8992: PPUSH
8993: LD_INT 5
8995: PPUSH
8996: CALL_OW 336
// end ;
9000: PPOPN 3
9002: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9003: LD_EXP 3
9007: PUSH
9008: LD_EXP 21
9012: AND
9013: PUSH
9014: LD_OWVAR 67
9018: PUSH
9019: LD_INT 4
9021: LESS
9022: AND
9023: IFFALSE 9042
9025: GO 9027
9027: DISABLE
// begin Difficulty := Difficulty + 1 ;
9028: LD_ADDR_OWVAR 67
9032: PUSH
9033: LD_OWVAR 67
9037: PUSH
9038: LD_INT 1
9040: PLUS
9041: ST_TO_ADDR
// end ;
9042: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9043: LD_EXP 3
9047: PUSH
9048: LD_EXP 22
9052: AND
9053: IFFALSE 9156
9055: GO 9057
9057: DISABLE
9058: LD_INT 0
9060: PPUSH
// begin for i := 1 to 5 do
9061: LD_ADDR_VAR 0 1
9065: PUSH
9066: DOUBLE
9067: LD_INT 1
9069: DEC
9070: ST_TO_ADDR
9071: LD_INT 5
9073: PUSH
9074: FOR_TO
9075: IFFALSE 9154
// begin uc_nation := nation_nature ;
9077: LD_ADDR_OWVAR 21
9081: PUSH
9082: LD_INT 0
9084: ST_TO_ADDR
// uc_side := 0 ;
9085: LD_ADDR_OWVAR 20
9089: PUSH
9090: LD_INT 0
9092: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9093: LD_ADDR_OWVAR 29
9097: PUSH
9098: LD_INT 12
9100: PUSH
9101: LD_INT 12
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: ST_TO_ADDR
// hc_agressivity := 20 ;
9108: LD_ADDR_OWVAR 35
9112: PUSH
9113: LD_INT 20
9115: ST_TO_ADDR
// hc_class := class_tiger ;
9116: LD_ADDR_OWVAR 28
9120: PUSH
9121: LD_INT 14
9123: ST_TO_ADDR
// hc_gallery :=  ;
9124: LD_ADDR_OWVAR 33
9128: PUSH
9129: LD_STRING 
9131: ST_TO_ADDR
// hc_name :=  ;
9132: LD_ADDR_OWVAR 26
9136: PUSH
9137: LD_STRING 
9139: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9140: CALL_OW 44
9144: PPUSH
9145: LD_INT 0
9147: PPUSH
9148: CALL_OW 51
// end ;
9152: GO 9074
9154: POP
9155: POP
// end ;
9156: PPOPN 1
9158: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9159: LD_EXP 3
9163: PUSH
9164: LD_EXP 23
9168: AND
9169: IFFALSE 9178
9171: GO 9173
9173: DISABLE
// StreamSibBomb ;
9174: CALL 9179 0 0
9178: END
// export function StreamSibBomb ; var i , x , y ; begin
9179: LD_INT 0
9181: PPUSH
9182: PPUSH
9183: PPUSH
9184: PPUSH
// result := false ;
9185: LD_ADDR_VAR 0 1
9189: PUSH
9190: LD_INT 0
9192: ST_TO_ADDR
// for i := 1 to 16 do
9193: LD_ADDR_VAR 0 2
9197: PUSH
9198: DOUBLE
9199: LD_INT 1
9201: DEC
9202: ST_TO_ADDR
9203: LD_INT 16
9205: PUSH
9206: FOR_TO
9207: IFFALSE 9406
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9209: LD_ADDR_VAR 0 3
9213: PUSH
9214: LD_INT 10
9216: PUSH
9217: LD_INT 20
9219: PUSH
9220: LD_INT 30
9222: PUSH
9223: LD_INT 40
9225: PUSH
9226: LD_INT 50
9228: PUSH
9229: LD_INT 60
9231: PUSH
9232: LD_INT 70
9234: PUSH
9235: LD_INT 80
9237: PUSH
9238: LD_INT 90
9240: PUSH
9241: LD_INT 100
9243: PUSH
9244: LD_INT 110
9246: PUSH
9247: LD_INT 120
9249: PUSH
9250: LD_INT 130
9252: PUSH
9253: LD_INT 140
9255: PUSH
9256: LD_INT 150
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: PUSH
9276: LD_INT 1
9278: PPUSH
9279: LD_INT 15
9281: PPUSH
9282: CALL_OW 12
9286: ARRAY
9287: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9288: LD_ADDR_VAR 0 4
9292: PUSH
9293: LD_INT 10
9295: PUSH
9296: LD_INT 20
9298: PUSH
9299: LD_INT 30
9301: PUSH
9302: LD_INT 40
9304: PUSH
9305: LD_INT 50
9307: PUSH
9308: LD_INT 60
9310: PUSH
9311: LD_INT 70
9313: PUSH
9314: LD_INT 80
9316: PUSH
9317: LD_INT 90
9319: PUSH
9320: LD_INT 100
9322: PUSH
9323: LD_INT 110
9325: PUSH
9326: LD_INT 120
9328: PUSH
9329: LD_INT 130
9331: PUSH
9332: LD_INT 140
9334: PUSH
9335: LD_INT 150
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: PUSH
9355: LD_INT 1
9357: PPUSH
9358: LD_INT 15
9360: PPUSH
9361: CALL_OW 12
9365: ARRAY
9366: ST_TO_ADDR
// if ValidHex ( x , y ) then
9367: LD_VAR 0 3
9371: PPUSH
9372: LD_VAR 0 4
9376: PPUSH
9377: CALL_OW 488
9381: IFFALSE 9404
// begin result := [ x , y ] ;
9383: LD_ADDR_VAR 0 1
9387: PUSH
9388: LD_VAR 0 3
9392: PUSH
9393: LD_VAR 0 4
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: ST_TO_ADDR
// break ;
9402: GO 9406
// end ; end ;
9404: GO 9206
9406: POP
9407: POP
// if result then
9408: LD_VAR 0 1
9412: IFFALSE 9472
// begin ToLua ( playSibBomb() ) ;
9414: LD_STRING playSibBomb()
9416: PPUSH
9417: CALL_OW 559
// wait ( 0 0$14 ) ;
9421: LD_INT 490
9423: PPUSH
9424: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9428: LD_VAR 0 1
9432: PUSH
9433: LD_INT 1
9435: ARRAY
9436: PPUSH
9437: LD_VAR 0 1
9441: PUSH
9442: LD_INT 2
9444: ARRAY
9445: PPUSH
9446: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9450: LD_VAR 0 1
9454: PUSH
9455: LD_INT 1
9457: ARRAY
9458: PPUSH
9459: LD_VAR 0 1
9463: PUSH
9464: LD_INT 2
9466: ARRAY
9467: PPUSH
9468: CALL_OW 429
// end ; end ;
9472: LD_VAR 0 1
9476: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9477: LD_EXP 3
9481: PUSH
9482: LD_EXP 25
9486: AND
9487: IFFALSE 9499
9489: GO 9491
9491: DISABLE
// YouLost (  ) ;
9492: LD_STRING 
9494: PPUSH
9495: CALL_OW 104
9499: END
// every 0 0$1 trigger StreamModeActive and sFog do
9500: LD_EXP 3
9504: PUSH
9505: LD_EXP 24
9509: AND
9510: IFFALSE 9524
9512: GO 9514
9514: DISABLE
// FogOff ( your_side ) ;
9515: LD_OWVAR 2
9519: PPUSH
9520: CALL_OW 344
9524: END
// every 0 0$1 trigger StreamModeActive and sSun do
9525: LD_EXP 3
9529: PUSH
9530: LD_EXP 26
9534: AND
9535: IFFALSE 9563
9537: GO 9539
9539: DISABLE
// begin solar_recharge_percent := 0 ;
9540: LD_ADDR_OWVAR 79
9544: PUSH
9545: LD_INT 0
9547: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9548: LD_INT 10500
9550: PPUSH
9551: CALL_OW 67
// solar_recharge_percent := 100 ;
9555: LD_ADDR_OWVAR 79
9559: PUSH
9560: LD_INT 100
9562: ST_TO_ADDR
// end ;
9563: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9564: LD_EXP 3
9568: PUSH
9569: LD_EXP 27
9573: AND
9574: IFFALSE 9813
9576: GO 9578
9578: DISABLE
9579: LD_INT 0
9581: PPUSH
9582: PPUSH
9583: PPUSH
// begin tmp := [ ] ;
9584: LD_ADDR_VAR 0 3
9588: PUSH
9589: EMPTY
9590: ST_TO_ADDR
// for i := 1 to 6 do
9591: LD_ADDR_VAR 0 1
9595: PUSH
9596: DOUBLE
9597: LD_INT 1
9599: DEC
9600: ST_TO_ADDR
9601: LD_INT 6
9603: PUSH
9604: FOR_TO
9605: IFFALSE 9710
// begin uc_nation := nation_nature ;
9607: LD_ADDR_OWVAR 21
9611: PUSH
9612: LD_INT 0
9614: ST_TO_ADDR
// uc_side := 0 ;
9615: LD_ADDR_OWVAR 20
9619: PUSH
9620: LD_INT 0
9622: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9623: LD_ADDR_OWVAR 29
9627: PUSH
9628: LD_INT 12
9630: PUSH
9631: LD_INT 12
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: ST_TO_ADDR
// hc_agressivity := 20 ;
9638: LD_ADDR_OWVAR 35
9642: PUSH
9643: LD_INT 20
9645: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9646: LD_ADDR_OWVAR 28
9650: PUSH
9651: LD_INT 17
9653: ST_TO_ADDR
// hc_gallery :=  ;
9654: LD_ADDR_OWVAR 33
9658: PUSH
9659: LD_STRING 
9661: ST_TO_ADDR
// hc_name :=  ;
9662: LD_ADDR_OWVAR 26
9666: PUSH
9667: LD_STRING 
9669: ST_TO_ADDR
// un := CreateHuman ;
9670: LD_ADDR_VAR 0 2
9674: PUSH
9675: CALL_OW 44
9679: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9680: LD_VAR 0 2
9684: PPUSH
9685: LD_INT 1
9687: PPUSH
9688: CALL_OW 51
// tmp := tmp ^ un ;
9692: LD_ADDR_VAR 0 3
9696: PUSH
9697: LD_VAR 0 3
9701: PUSH
9702: LD_VAR 0 2
9706: ADD
9707: ST_TO_ADDR
// end ;
9708: GO 9604
9710: POP
9711: POP
// repeat wait ( 0 0$1 ) ;
9712: LD_INT 35
9714: PPUSH
9715: CALL_OW 67
// for un in tmp do
9719: LD_ADDR_VAR 0 2
9723: PUSH
9724: LD_VAR 0 3
9728: PUSH
9729: FOR_IN
9730: IFFALSE 9804
// begin if IsDead ( un ) then
9732: LD_VAR 0 2
9736: PPUSH
9737: CALL_OW 301
9741: IFFALSE 9761
// begin tmp := tmp diff un ;
9743: LD_ADDR_VAR 0 3
9747: PUSH
9748: LD_VAR 0 3
9752: PUSH
9753: LD_VAR 0 2
9757: DIFF
9758: ST_TO_ADDR
// continue ;
9759: GO 9729
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9761: LD_VAR 0 2
9765: PPUSH
9766: LD_INT 3
9768: PUSH
9769: LD_INT 22
9771: PUSH
9772: LD_INT 0
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: PPUSH
9783: CALL_OW 69
9787: PPUSH
9788: LD_VAR 0 2
9792: PPUSH
9793: CALL_OW 74
9797: PPUSH
9798: CALL_OW 115
// end ;
9802: GO 9729
9804: POP
9805: POP
// until not tmp ;
9806: LD_VAR 0 3
9810: NOT
9811: IFFALSE 9712
// end ;
9813: PPOPN 3
9815: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9816: LD_EXP 3
9820: PUSH
9821: LD_EXP 28
9825: AND
9826: IFFALSE 9880
9828: GO 9830
9830: DISABLE
// begin ToLua ( displayTroll(); ) ;
9831: LD_STRING displayTroll();
9833: PPUSH
9834: CALL_OW 559
// wait ( 3 3$00 ) ;
9838: LD_INT 6300
9840: PPUSH
9841: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9845: LD_STRING hideTroll();
9847: PPUSH
9848: CALL_OW 559
// wait ( 1 1$00 ) ;
9852: LD_INT 2100
9854: PPUSH
9855: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9859: LD_STRING displayTroll();
9861: PPUSH
9862: CALL_OW 559
// wait ( 1 1$00 ) ;
9866: LD_INT 2100
9868: PPUSH
9869: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9873: LD_STRING hideTroll();
9875: PPUSH
9876: CALL_OW 559
// end ;
9880: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9881: LD_EXP 3
9885: PUSH
9886: LD_EXP 29
9890: AND
9891: IFFALSE 9954
9893: GO 9895
9895: DISABLE
9896: LD_INT 0
9898: PPUSH
// begin p := 0 ;
9899: LD_ADDR_VAR 0 1
9903: PUSH
9904: LD_INT 0
9906: ST_TO_ADDR
// repeat game_speed := 1 ;
9907: LD_ADDR_OWVAR 65
9911: PUSH
9912: LD_INT 1
9914: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9915: LD_INT 35
9917: PPUSH
9918: CALL_OW 67
// p := p + 1 ;
9922: LD_ADDR_VAR 0 1
9926: PUSH
9927: LD_VAR 0 1
9931: PUSH
9932: LD_INT 1
9934: PLUS
9935: ST_TO_ADDR
// until p >= 60 ;
9936: LD_VAR 0 1
9940: PUSH
9941: LD_INT 60
9943: GREATEREQUAL
9944: IFFALSE 9907
// game_speed := 4 ;
9946: LD_ADDR_OWVAR 65
9950: PUSH
9951: LD_INT 4
9953: ST_TO_ADDR
// end ;
9954: PPOPN 1
9956: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9957: LD_EXP 3
9961: PUSH
9962: LD_EXP 30
9966: AND
9967: IFFALSE 10113
9969: GO 9971
9971: DISABLE
9972: LD_INT 0
9974: PPUSH
9975: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9976: LD_ADDR_VAR 0 1
9980: PUSH
9981: LD_INT 22
9983: PUSH
9984: LD_OWVAR 2
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: LD_INT 2
9995: PUSH
9996: LD_INT 30
9998: PUSH
9999: LD_INT 0
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: PUSH
10006: LD_INT 30
10008: PUSH
10009: LD_INT 1
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: LIST
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PPUSH
10025: CALL_OW 69
10029: ST_TO_ADDR
// if not depot then
10030: LD_VAR 0 1
10034: NOT
10035: IFFALSE 10039
// exit ;
10037: GO 10113
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10039: LD_ADDR_VAR 0 2
10043: PUSH
10044: LD_VAR 0 1
10048: PUSH
10049: LD_INT 1
10051: PPUSH
10052: LD_VAR 0 1
10056: PPUSH
10057: CALL_OW 12
10061: ARRAY
10062: PPUSH
10063: CALL_OW 274
10067: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10068: LD_VAR 0 2
10072: PPUSH
10073: LD_INT 1
10075: PPUSH
10076: LD_INT 0
10078: PPUSH
10079: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10083: LD_VAR 0 2
10087: PPUSH
10088: LD_INT 2
10090: PPUSH
10091: LD_INT 0
10093: PPUSH
10094: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10098: LD_VAR 0 2
10102: PPUSH
10103: LD_INT 3
10105: PPUSH
10106: LD_INT 0
10108: PPUSH
10109: CALL_OW 277
// end ;
10113: PPOPN 2
10115: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10116: LD_EXP 3
10120: PUSH
10121: LD_EXP 31
10125: AND
10126: IFFALSE 10223
10128: GO 10130
10130: DISABLE
10131: LD_INT 0
10133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10134: LD_ADDR_VAR 0 1
10138: PUSH
10139: LD_INT 22
10141: PUSH
10142: LD_OWVAR 2
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: PUSH
10151: LD_INT 21
10153: PUSH
10154: LD_INT 1
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PUSH
10161: LD_INT 3
10163: PUSH
10164: LD_INT 23
10166: PUSH
10167: LD_INT 0
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: LIST
10182: PPUSH
10183: CALL_OW 69
10187: ST_TO_ADDR
// if not tmp then
10188: LD_VAR 0 1
10192: NOT
10193: IFFALSE 10197
// exit ;
10195: GO 10223
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10197: LD_VAR 0 1
10201: PUSH
10202: LD_INT 1
10204: PPUSH
10205: LD_VAR 0 1
10209: PPUSH
10210: CALL_OW 12
10214: ARRAY
10215: PPUSH
10216: LD_INT 200
10218: PPUSH
10219: CALL_OW 234
// end ;
10223: PPOPN 1
10225: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10226: LD_EXP 3
10230: PUSH
10231: LD_EXP 32
10235: AND
10236: IFFALSE 10315
10238: GO 10240
10240: DISABLE
10241: LD_INT 0
10243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10244: LD_ADDR_VAR 0 1
10248: PUSH
10249: LD_INT 22
10251: PUSH
10252: LD_OWVAR 2
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: PUSH
10261: LD_INT 21
10263: PUSH
10264: LD_INT 2
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: PPUSH
10275: CALL_OW 69
10279: ST_TO_ADDR
// if not tmp then
10280: LD_VAR 0 1
10284: NOT
10285: IFFALSE 10289
// exit ;
10287: GO 10315
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10289: LD_VAR 0 1
10293: PUSH
10294: LD_INT 1
10296: PPUSH
10297: LD_VAR 0 1
10301: PPUSH
10302: CALL_OW 12
10306: ARRAY
10307: PPUSH
10308: LD_INT 60
10310: PPUSH
10311: CALL_OW 234
// end ;
10315: PPOPN 1
10317: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10318: LD_EXP 3
10322: PUSH
10323: LD_EXP 33
10327: AND
10328: IFFALSE 10427
10330: GO 10332
10332: DISABLE
10333: LD_INT 0
10335: PPUSH
10336: PPUSH
// begin enable ;
10337: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10338: LD_ADDR_VAR 0 1
10342: PUSH
10343: LD_INT 22
10345: PUSH
10346: LD_OWVAR 2
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: LD_INT 61
10357: PUSH
10358: EMPTY
10359: LIST
10360: PUSH
10361: LD_INT 33
10363: PUSH
10364: LD_INT 2
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: LIST
10375: PPUSH
10376: CALL_OW 69
10380: ST_TO_ADDR
// if not tmp then
10381: LD_VAR 0 1
10385: NOT
10386: IFFALSE 10390
// exit ;
10388: GO 10427
// for i in tmp do
10390: LD_ADDR_VAR 0 2
10394: PUSH
10395: LD_VAR 0 1
10399: PUSH
10400: FOR_IN
10401: IFFALSE 10425
// if IsControledBy ( i ) then
10403: LD_VAR 0 2
10407: PPUSH
10408: CALL_OW 312
10412: IFFALSE 10423
// ComUnlink ( i ) ;
10414: LD_VAR 0 2
10418: PPUSH
10419: CALL_OW 136
10423: GO 10400
10425: POP
10426: POP
// end ;
10427: PPOPN 2
10429: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10430: LD_EXP 3
10434: PUSH
10435: LD_EXP 34
10439: AND
10440: IFFALSE 10580
10442: GO 10444
10444: DISABLE
10445: LD_INT 0
10447: PPUSH
10448: PPUSH
// begin ToLua ( displayPowell(); ) ;
10449: LD_STRING displayPowell();
10451: PPUSH
10452: CALL_OW 559
// uc_side := 0 ;
10456: LD_ADDR_OWVAR 20
10460: PUSH
10461: LD_INT 0
10463: ST_TO_ADDR
// uc_nation := 2 ;
10464: LD_ADDR_OWVAR 21
10468: PUSH
10469: LD_INT 2
10471: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10472: LD_ADDR_OWVAR 37
10476: PUSH
10477: LD_INT 14
10479: ST_TO_ADDR
// vc_engine := engine_siberite ;
10480: LD_ADDR_OWVAR 39
10484: PUSH
10485: LD_INT 3
10487: ST_TO_ADDR
// vc_control := control_apeman ;
10488: LD_ADDR_OWVAR 38
10492: PUSH
10493: LD_INT 5
10495: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10496: LD_ADDR_OWVAR 40
10500: PUSH
10501: LD_INT 29
10503: ST_TO_ADDR
// un := CreateVehicle ;
10504: LD_ADDR_VAR 0 2
10508: PUSH
10509: CALL_OW 45
10513: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10514: LD_VAR 0 2
10518: PPUSH
10519: LD_INT 1
10521: PPUSH
10522: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10526: LD_INT 35
10528: PPUSH
10529: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10533: LD_VAR 0 2
10537: PPUSH
10538: LD_INT 22
10540: PUSH
10541: LD_OWVAR 2
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: PPUSH
10550: CALL_OW 69
10554: PPUSH
10555: LD_VAR 0 2
10559: PPUSH
10560: CALL_OW 74
10564: PPUSH
10565: CALL_OW 115
// until IsDead ( un ) ;
10569: LD_VAR 0 2
10573: PPUSH
10574: CALL_OW 301
10578: IFFALSE 10526
// end ;
10580: PPOPN 2
10582: END
// every 0 0$1 trigger StreamModeActive and sStu do
10583: LD_EXP 3
10587: PUSH
10588: LD_EXP 42
10592: AND
10593: IFFALSE 10609
10595: GO 10597
10597: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10598: LD_STRING displayStucuk();
10600: PPUSH
10601: CALL_OW 559
// ResetFog ;
10605: CALL_OW 335
// end ;
10609: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10610: LD_EXP 3
10614: PUSH
10615: LD_EXP 35
10619: AND
10620: IFFALSE 10761
10622: GO 10624
10624: DISABLE
10625: LD_INT 0
10627: PPUSH
10628: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10629: LD_ADDR_VAR 0 2
10633: PUSH
10634: LD_INT 22
10636: PUSH
10637: LD_OWVAR 2
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: LD_INT 21
10648: PUSH
10649: LD_INT 1
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PPUSH
10660: CALL_OW 69
10664: ST_TO_ADDR
// if not tmp then
10665: LD_VAR 0 2
10669: NOT
10670: IFFALSE 10674
// exit ;
10672: GO 10761
// un := tmp [ rand ( 1 , tmp ) ] ;
10674: LD_ADDR_VAR 0 1
10678: PUSH
10679: LD_VAR 0 2
10683: PUSH
10684: LD_INT 1
10686: PPUSH
10687: LD_VAR 0 2
10691: PPUSH
10692: CALL_OW 12
10696: ARRAY
10697: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10698: LD_VAR 0 1
10702: PPUSH
10703: LD_INT 0
10705: PPUSH
10706: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10710: LD_VAR 0 1
10714: PPUSH
10715: LD_OWVAR 3
10719: PUSH
10720: LD_VAR 0 1
10724: DIFF
10725: PPUSH
10726: LD_VAR 0 1
10730: PPUSH
10731: CALL_OW 74
10735: PPUSH
10736: CALL_OW 115
// wait ( 0 0$20 ) ;
10740: LD_INT 700
10742: PPUSH
10743: CALL_OW 67
// SetSide ( un , your_side ) ;
10747: LD_VAR 0 1
10751: PPUSH
10752: LD_OWVAR 2
10756: PPUSH
10757: CALL_OW 235
// end ;
10761: PPOPN 2
10763: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10764: LD_EXP 3
10768: PUSH
10769: LD_EXP 36
10773: AND
10774: IFFALSE 10880
10776: GO 10778
10778: DISABLE
10779: LD_INT 0
10781: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10782: LD_ADDR_VAR 0 1
10786: PUSH
10787: LD_INT 22
10789: PUSH
10790: LD_OWVAR 2
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: LD_INT 2
10801: PUSH
10802: LD_INT 30
10804: PUSH
10805: LD_INT 0
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: PUSH
10812: LD_INT 30
10814: PUSH
10815: LD_INT 1
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: LIST
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: PPUSH
10831: CALL_OW 69
10835: ST_TO_ADDR
// if not depot then
10836: LD_VAR 0 1
10840: NOT
10841: IFFALSE 10845
// exit ;
10843: GO 10880
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10845: LD_VAR 0 1
10849: PUSH
10850: LD_INT 1
10852: ARRAY
10853: PPUSH
10854: CALL_OW 250
10858: PPUSH
10859: LD_VAR 0 1
10863: PUSH
10864: LD_INT 1
10866: ARRAY
10867: PPUSH
10868: CALL_OW 251
10872: PPUSH
10873: LD_INT 70
10875: PPUSH
10876: CALL_OW 495
// end ;
10880: PPOPN 1
10882: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10883: LD_EXP 3
10887: PUSH
10888: LD_EXP 37
10892: AND
10893: IFFALSE 11104
10895: GO 10897
10897: DISABLE
10898: LD_INT 0
10900: PPUSH
10901: PPUSH
10902: PPUSH
10903: PPUSH
10904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10905: LD_ADDR_VAR 0 5
10909: PUSH
10910: LD_INT 22
10912: PUSH
10913: LD_OWVAR 2
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: LD_INT 21
10924: PUSH
10925: LD_INT 1
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: PPUSH
10936: CALL_OW 69
10940: ST_TO_ADDR
// if not tmp then
10941: LD_VAR 0 5
10945: NOT
10946: IFFALSE 10950
// exit ;
10948: GO 11104
// for i in tmp do
10950: LD_ADDR_VAR 0 1
10954: PUSH
10955: LD_VAR 0 5
10959: PUSH
10960: FOR_IN
10961: IFFALSE 11102
// begin d := rand ( 0 , 5 ) ;
10963: LD_ADDR_VAR 0 4
10967: PUSH
10968: LD_INT 0
10970: PPUSH
10971: LD_INT 5
10973: PPUSH
10974: CALL_OW 12
10978: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10979: LD_ADDR_VAR 0 2
10983: PUSH
10984: LD_VAR 0 1
10988: PPUSH
10989: CALL_OW 250
10993: PPUSH
10994: LD_VAR 0 4
10998: PPUSH
10999: LD_INT 3
11001: PPUSH
11002: LD_INT 12
11004: PPUSH
11005: CALL_OW 12
11009: PPUSH
11010: CALL_OW 272
11014: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11015: LD_ADDR_VAR 0 3
11019: PUSH
11020: LD_VAR 0 1
11024: PPUSH
11025: CALL_OW 251
11029: PPUSH
11030: LD_VAR 0 4
11034: PPUSH
11035: LD_INT 3
11037: PPUSH
11038: LD_INT 12
11040: PPUSH
11041: CALL_OW 12
11045: PPUSH
11046: CALL_OW 273
11050: ST_TO_ADDR
// if ValidHex ( x , y ) then
11051: LD_VAR 0 2
11055: PPUSH
11056: LD_VAR 0 3
11060: PPUSH
11061: CALL_OW 488
11065: IFFALSE 11100
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11067: LD_VAR 0 1
11071: PPUSH
11072: LD_VAR 0 2
11076: PPUSH
11077: LD_VAR 0 3
11081: PPUSH
11082: LD_INT 3
11084: PPUSH
11085: LD_INT 6
11087: PPUSH
11088: CALL_OW 12
11092: PPUSH
11093: LD_INT 1
11095: PPUSH
11096: CALL_OW 483
// end ;
11100: GO 10960
11102: POP
11103: POP
// end ;
11104: PPOPN 5
11106: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11107: LD_EXP 3
11111: PUSH
11112: LD_EXP 38
11116: AND
11117: IFFALSE 11211
11119: GO 11121
11121: DISABLE
11122: LD_INT 0
11124: PPUSH
11125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11126: LD_ADDR_VAR 0 2
11130: PUSH
11131: LD_INT 22
11133: PUSH
11134: LD_OWVAR 2
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: PUSH
11143: LD_INT 32
11145: PUSH
11146: LD_INT 1
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: PUSH
11153: LD_INT 21
11155: PUSH
11156: LD_INT 2
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: LIST
11167: PPUSH
11168: CALL_OW 69
11172: ST_TO_ADDR
// if not tmp then
11173: LD_VAR 0 2
11177: NOT
11178: IFFALSE 11182
// exit ;
11180: GO 11211
// for i in tmp do
11182: LD_ADDR_VAR 0 1
11186: PUSH
11187: LD_VAR 0 2
11191: PUSH
11192: FOR_IN
11193: IFFALSE 11209
// SetFuel ( i , 0 ) ;
11195: LD_VAR 0 1
11199: PPUSH
11200: LD_INT 0
11202: PPUSH
11203: CALL_OW 240
11207: GO 11192
11209: POP
11210: POP
// end ;
11211: PPOPN 2
11213: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11214: LD_EXP 3
11218: PUSH
11219: LD_EXP 39
11223: AND
11224: IFFALSE 11290
11226: GO 11228
11228: DISABLE
11229: LD_INT 0
11231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11232: LD_ADDR_VAR 0 1
11236: PUSH
11237: LD_INT 22
11239: PUSH
11240: LD_OWVAR 2
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: PUSH
11249: LD_INT 30
11251: PUSH
11252: LD_INT 29
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: PPUSH
11263: CALL_OW 69
11267: ST_TO_ADDR
// if not tmp then
11268: LD_VAR 0 1
11272: NOT
11273: IFFALSE 11277
// exit ;
11275: GO 11290
// DestroyUnit ( tmp [ 1 ] ) ;
11277: LD_VAR 0 1
11281: PUSH
11282: LD_INT 1
11284: ARRAY
11285: PPUSH
11286: CALL_OW 65
// end ;
11290: PPOPN 1
11292: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11293: LD_EXP 3
11297: PUSH
11298: LD_EXP 41
11302: AND
11303: IFFALSE 11432
11305: GO 11307
11307: DISABLE
11308: LD_INT 0
11310: PPUSH
// begin uc_side := 0 ;
11311: LD_ADDR_OWVAR 20
11315: PUSH
11316: LD_INT 0
11318: ST_TO_ADDR
// uc_nation := nation_arabian ;
11319: LD_ADDR_OWVAR 21
11323: PUSH
11324: LD_INT 2
11326: ST_TO_ADDR
// hc_gallery :=  ;
11327: LD_ADDR_OWVAR 33
11331: PUSH
11332: LD_STRING 
11334: ST_TO_ADDR
// hc_name :=  ;
11335: LD_ADDR_OWVAR 26
11339: PUSH
11340: LD_STRING 
11342: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11343: LD_INT 1
11345: PPUSH
11346: LD_INT 11
11348: PPUSH
11349: LD_INT 10
11351: PPUSH
11352: CALL_OW 380
// un := CreateHuman ;
11356: LD_ADDR_VAR 0 1
11360: PUSH
11361: CALL_OW 44
11365: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11366: LD_VAR 0 1
11370: PPUSH
11371: LD_INT 1
11373: PPUSH
11374: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11378: LD_INT 35
11380: PPUSH
11381: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11385: LD_VAR 0 1
11389: PPUSH
11390: LD_INT 22
11392: PUSH
11393: LD_OWVAR 2
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PPUSH
11402: CALL_OW 69
11406: PPUSH
11407: LD_VAR 0 1
11411: PPUSH
11412: CALL_OW 74
11416: PPUSH
11417: CALL_OW 115
// until IsDead ( un ) ;
11421: LD_VAR 0 1
11425: PPUSH
11426: CALL_OW 301
11430: IFFALSE 11378
// end ;
11432: PPOPN 1
11434: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11435: LD_EXP 3
11439: PUSH
11440: LD_EXP 43
11444: AND
11445: IFFALSE 11457
11447: GO 11449
11449: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11450: LD_STRING earthquake(getX(game), 0, 32)
11452: PPUSH
11453: CALL_OW 559
11457: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11458: LD_EXP 3
11462: PUSH
11463: LD_EXP 44
11467: AND
11468: IFFALSE 11559
11470: GO 11472
11472: DISABLE
11473: LD_INT 0
11475: PPUSH
// begin enable ;
11476: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11477: LD_ADDR_VAR 0 1
11481: PUSH
11482: LD_INT 22
11484: PUSH
11485: LD_OWVAR 2
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: PUSH
11494: LD_INT 21
11496: PUSH
11497: LD_INT 2
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: PUSH
11504: LD_INT 33
11506: PUSH
11507: LD_INT 3
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: LIST
11518: PPUSH
11519: CALL_OW 69
11523: ST_TO_ADDR
// if not tmp then
11524: LD_VAR 0 1
11528: NOT
11529: IFFALSE 11533
// exit ;
11531: GO 11559
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11533: LD_VAR 0 1
11537: PUSH
11538: LD_INT 1
11540: PPUSH
11541: LD_VAR 0 1
11545: PPUSH
11546: CALL_OW 12
11550: ARRAY
11551: PPUSH
11552: LD_INT 1
11554: PPUSH
11555: CALL_OW 234
// end ;
11559: PPOPN 1
11561: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11562: LD_EXP 3
11566: PUSH
11567: LD_EXP 45
11571: AND
11572: IFFALSE 11713
11574: GO 11576
11576: DISABLE
11577: LD_INT 0
11579: PPUSH
11580: PPUSH
11581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11582: LD_ADDR_VAR 0 3
11586: PUSH
11587: LD_INT 22
11589: PUSH
11590: LD_OWVAR 2
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PUSH
11599: LD_INT 25
11601: PUSH
11602: LD_INT 1
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PPUSH
11613: CALL_OW 69
11617: ST_TO_ADDR
// if not tmp then
11618: LD_VAR 0 3
11622: NOT
11623: IFFALSE 11627
// exit ;
11625: GO 11713
// un := tmp [ rand ( 1 , tmp ) ] ;
11627: LD_ADDR_VAR 0 2
11631: PUSH
11632: LD_VAR 0 3
11636: PUSH
11637: LD_INT 1
11639: PPUSH
11640: LD_VAR 0 3
11644: PPUSH
11645: CALL_OW 12
11649: ARRAY
11650: ST_TO_ADDR
// if Crawls ( un ) then
11651: LD_VAR 0 2
11655: PPUSH
11656: CALL_OW 318
11660: IFFALSE 11671
// ComWalk ( un ) ;
11662: LD_VAR 0 2
11666: PPUSH
11667: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11671: LD_VAR 0 2
11675: PPUSH
11676: LD_INT 9
11678: PPUSH
11679: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11683: LD_INT 28
11685: PPUSH
11686: LD_OWVAR 2
11690: PPUSH
11691: LD_INT 2
11693: PPUSH
11694: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11698: LD_INT 29
11700: PPUSH
11701: LD_OWVAR 2
11705: PPUSH
11706: LD_INT 2
11708: PPUSH
11709: CALL_OW 322
// end ;
11713: PPOPN 3
11715: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11716: LD_EXP 3
11720: PUSH
11721: LD_EXP 46
11725: AND
11726: IFFALSE 11837
11728: GO 11730
11730: DISABLE
11731: LD_INT 0
11733: PPUSH
11734: PPUSH
11735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11736: LD_ADDR_VAR 0 3
11740: PUSH
11741: LD_INT 22
11743: PUSH
11744: LD_OWVAR 2
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PUSH
11753: LD_INT 25
11755: PUSH
11756: LD_INT 1
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: PPUSH
11767: CALL_OW 69
11771: ST_TO_ADDR
// if not tmp then
11772: LD_VAR 0 3
11776: NOT
11777: IFFALSE 11781
// exit ;
11779: GO 11837
// un := tmp [ rand ( 1 , tmp ) ] ;
11781: LD_ADDR_VAR 0 2
11785: PUSH
11786: LD_VAR 0 3
11790: PUSH
11791: LD_INT 1
11793: PPUSH
11794: LD_VAR 0 3
11798: PPUSH
11799: CALL_OW 12
11803: ARRAY
11804: ST_TO_ADDR
// if Crawls ( un ) then
11805: LD_VAR 0 2
11809: PPUSH
11810: CALL_OW 318
11814: IFFALSE 11825
// ComWalk ( un ) ;
11816: LD_VAR 0 2
11820: PPUSH
11821: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11825: LD_VAR 0 2
11829: PPUSH
11830: LD_INT 8
11832: PPUSH
11833: CALL_OW 336
// end ;
11837: PPOPN 3
11839: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11840: LD_EXP 3
11844: PUSH
11845: LD_EXP 47
11849: AND
11850: IFFALSE 11994
11852: GO 11854
11854: DISABLE
11855: LD_INT 0
11857: PPUSH
11858: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11859: LD_ADDR_VAR 0 2
11863: PUSH
11864: LD_INT 22
11866: PUSH
11867: LD_OWVAR 2
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: LD_INT 21
11878: PUSH
11879: LD_INT 2
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: LD_INT 2
11888: PUSH
11889: LD_INT 34
11891: PUSH
11892: LD_INT 12
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 34
11901: PUSH
11902: LD_INT 51
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: LD_INT 34
11911: PUSH
11912: LD_INT 32
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: LIST
11929: PPUSH
11930: CALL_OW 69
11934: ST_TO_ADDR
// if not tmp then
11935: LD_VAR 0 2
11939: NOT
11940: IFFALSE 11944
// exit ;
11942: GO 11994
// for i in tmp do
11944: LD_ADDR_VAR 0 1
11948: PUSH
11949: LD_VAR 0 2
11953: PUSH
11954: FOR_IN
11955: IFFALSE 11992
// if GetCargo ( i , mat_artifact ) = 0 then
11957: LD_VAR 0 1
11961: PPUSH
11962: LD_INT 4
11964: PPUSH
11965: CALL_OW 289
11969: PUSH
11970: LD_INT 0
11972: EQUAL
11973: IFFALSE 11990
// SetCargo ( i , mat_siberit , 100 ) ;
11975: LD_VAR 0 1
11979: PPUSH
11980: LD_INT 3
11982: PPUSH
11983: LD_INT 100
11985: PPUSH
11986: CALL_OW 290
11990: GO 11954
11992: POP
11993: POP
// end ;
11994: PPOPN 2
11996: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
11997: LD_EXP 3
12001: PUSH
12002: LD_EXP 48
12006: AND
12007: IFFALSE 12190
12009: GO 12011
12011: DISABLE
12012: LD_INT 0
12014: PPUSH
12015: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12016: LD_ADDR_VAR 0 2
12020: PUSH
12021: LD_INT 22
12023: PUSH
12024: LD_OWVAR 2
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PPUSH
12033: CALL_OW 69
12037: ST_TO_ADDR
// if not tmp then
12038: LD_VAR 0 2
12042: NOT
12043: IFFALSE 12047
// exit ;
12045: GO 12190
// for i := 1 to 2 do
12047: LD_ADDR_VAR 0 1
12051: PUSH
12052: DOUBLE
12053: LD_INT 1
12055: DEC
12056: ST_TO_ADDR
12057: LD_INT 2
12059: PUSH
12060: FOR_TO
12061: IFFALSE 12188
// begin uc_side := your_side ;
12063: LD_ADDR_OWVAR 20
12067: PUSH
12068: LD_OWVAR 2
12072: ST_TO_ADDR
// uc_nation := nation_american ;
12073: LD_ADDR_OWVAR 21
12077: PUSH
12078: LD_INT 1
12080: ST_TO_ADDR
// vc_chassis := us_morphling ;
12081: LD_ADDR_OWVAR 37
12085: PUSH
12086: LD_INT 5
12088: ST_TO_ADDR
// vc_engine := engine_siberite ;
12089: LD_ADDR_OWVAR 39
12093: PUSH
12094: LD_INT 3
12096: ST_TO_ADDR
// vc_control := control_computer ;
12097: LD_ADDR_OWVAR 38
12101: PUSH
12102: LD_INT 3
12104: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12105: LD_ADDR_OWVAR 40
12109: PUSH
12110: LD_INT 10
12112: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12113: LD_VAR 0 2
12117: PUSH
12118: LD_INT 1
12120: ARRAY
12121: PPUSH
12122: CALL_OW 310
12126: NOT
12127: IFFALSE 12174
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12129: CALL_OW 45
12133: PPUSH
12134: LD_VAR 0 2
12138: PUSH
12139: LD_INT 1
12141: ARRAY
12142: PPUSH
12143: CALL_OW 250
12147: PPUSH
12148: LD_VAR 0 2
12152: PUSH
12153: LD_INT 1
12155: ARRAY
12156: PPUSH
12157: CALL_OW 251
12161: PPUSH
12162: LD_INT 12
12164: PPUSH
12165: LD_INT 1
12167: PPUSH
12168: CALL_OW 50
12172: GO 12186
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12174: CALL_OW 45
12178: PPUSH
12179: LD_INT 1
12181: PPUSH
12182: CALL_OW 51
// end ;
12186: GO 12060
12188: POP
12189: POP
// end ;
12190: PPOPN 2
12192: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12193: LD_EXP 3
12197: PUSH
12198: LD_EXP 49
12202: AND
12203: IFFALSE 12425
12205: GO 12207
12207: DISABLE
12208: LD_INT 0
12210: PPUSH
12211: PPUSH
12212: PPUSH
12213: PPUSH
12214: PPUSH
12215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12216: LD_ADDR_VAR 0 6
12220: PUSH
12221: LD_INT 22
12223: PUSH
12224: LD_OWVAR 2
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: PUSH
12233: LD_INT 21
12235: PUSH
12236: LD_INT 1
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 3
12245: PUSH
12246: LD_INT 23
12248: PUSH
12249: LD_INT 0
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: LIST
12264: PPUSH
12265: CALL_OW 69
12269: ST_TO_ADDR
// if not tmp then
12270: LD_VAR 0 6
12274: NOT
12275: IFFALSE 12279
// exit ;
12277: GO 12425
// s1 := rand ( 1 , 4 ) ;
12279: LD_ADDR_VAR 0 2
12283: PUSH
12284: LD_INT 1
12286: PPUSH
12287: LD_INT 4
12289: PPUSH
12290: CALL_OW 12
12294: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12295: LD_ADDR_VAR 0 4
12299: PUSH
12300: LD_VAR 0 6
12304: PUSH
12305: LD_INT 1
12307: ARRAY
12308: PPUSH
12309: LD_VAR 0 2
12313: PPUSH
12314: CALL_OW 259
12318: ST_TO_ADDR
// if s1 = 1 then
12319: LD_VAR 0 2
12323: PUSH
12324: LD_INT 1
12326: EQUAL
12327: IFFALSE 12347
// s2 := rand ( 2 , 4 ) else
12329: LD_ADDR_VAR 0 3
12333: PUSH
12334: LD_INT 2
12336: PPUSH
12337: LD_INT 4
12339: PPUSH
12340: CALL_OW 12
12344: ST_TO_ADDR
12345: GO 12355
// s2 := 1 ;
12347: LD_ADDR_VAR 0 3
12351: PUSH
12352: LD_INT 1
12354: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12355: LD_ADDR_VAR 0 5
12359: PUSH
12360: LD_VAR 0 6
12364: PUSH
12365: LD_INT 1
12367: ARRAY
12368: PPUSH
12369: LD_VAR 0 3
12373: PPUSH
12374: CALL_OW 259
12378: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12379: LD_VAR 0 6
12383: PUSH
12384: LD_INT 1
12386: ARRAY
12387: PPUSH
12388: LD_VAR 0 2
12392: PPUSH
12393: LD_VAR 0 5
12397: PPUSH
12398: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12402: LD_VAR 0 6
12406: PUSH
12407: LD_INT 1
12409: ARRAY
12410: PPUSH
12411: LD_VAR 0 3
12415: PPUSH
12416: LD_VAR 0 4
12420: PPUSH
12421: CALL_OW 237
// end ;
12425: PPOPN 6
12427: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12428: LD_EXP 3
12432: PUSH
12433: LD_EXP 50
12437: AND
12438: IFFALSE 12517
12440: GO 12442
12442: DISABLE
12443: LD_INT 0
12445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12446: LD_ADDR_VAR 0 1
12450: PUSH
12451: LD_INT 22
12453: PUSH
12454: LD_OWVAR 2
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: PUSH
12463: LD_INT 30
12465: PUSH
12466: LD_INT 3
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: PPUSH
12477: CALL_OW 69
12481: ST_TO_ADDR
// if not tmp then
12482: LD_VAR 0 1
12486: NOT
12487: IFFALSE 12491
// exit ;
12489: GO 12517
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12491: LD_VAR 0 1
12495: PUSH
12496: LD_INT 1
12498: PPUSH
12499: LD_VAR 0 1
12503: PPUSH
12504: CALL_OW 12
12508: ARRAY
12509: PPUSH
12510: LD_INT 1
12512: PPUSH
12513: CALL_OW 234
// end ;
12517: PPOPN 1
12519: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12520: LD_EXP 3
12524: PUSH
12525: LD_EXP 51
12529: AND
12530: IFFALSE 12642
12532: GO 12534
12534: DISABLE
12535: LD_INT 0
12537: PPUSH
12538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12539: LD_ADDR_VAR 0 2
12543: PUSH
12544: LD_INT 22
12546: PUSH
12547: LD_OWVAR 2
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: PUSH
12556: LD_INT 2
12558: PUSH
12559: LD_INT 30
12561: PUSH
12562: LD_INT 27
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: PUSH
12569: LD_INT 30
12571: PUSH
12572: LD_INT 26
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PUSH
12579: LD_INT 30
12581: PUSH
12582: LD_INT 28
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PPUSH
12599: CALL_OW 69
12603: ST_TO_ADDR
// if not tmp then
12604: LD_VAR 0 2
12608: NOT
12609: IFFALSE 12613
// exit ;
12611: GO 12642
// for i in tmp do
12613: LD_ADDR_VAR 0 1
12617: PUSH
12618: LD_VAR 0 2
12622: PUSH
12623: FOR_IN
12624: IFFALSE 12640
// SetLives ( i , 1 ) ;
12626: LD_VAR 0 1
12630: PPUSH
12631: LD_INT 1
12633: PPUSH
12634: CALL_OW 234
12638: GO 12623
12640: POP
12641: POP
// end ;
12642: PPOPN 2
12644: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12645: LD_EXP 3
12649: PUSH
12650: LD_EXP 52
12654: AND
12655: IFFALSE 12942
12657: GO 12659
12659: DISABLE
12660: LD_INT 0
12662: PPUSH
12663: PPUSH
12664: PPUSH
// begin i := rand ( 1 , 7 ) ;
12665: LD_ADDR_VAR 0 1
12669: PUSH
12670: LD_INT 1
12672: PPUSH
12673: LD_INT 7
12675: PPUSH
12676: CALL_OW 12
12680: ST_TO_ADDR
// case i of 1 :
12681: LD_VAR 0 1
12685: PUSH
12686: LD_INT 1
12688: DOUBLE
12689: EQUAL
12690: IFTRUE 12694
12692: GO 12704
12694: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12695: LD_STRING earthquake(getX(game), 0, 32)
12697: PPUSH
12698: CALL_OW 559
12702: GO 12942
12704: LD_INT 2
12706: DOUBLE
12707: EQUAL
12708: IFTRUE 12712
12710: GO 12726
12712: POP
// begin ToLua ( displayStucuk(); ) ;
12713: LD_STRING displayStucuk();
12715: PPUSH
12716: CALL_OW 559
// ResetFog ;
12720: CALL_OW 335
// end ; 3 :
12724: GO 12942
12726: LD_INT 3
12728: DOUBLE
12729: EQUAL
12730: IFTRUE 12734
12732: GO 12838
12734: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12735: LD_ADDR_VAR 0 2
12739: PUSH
12740: LD_INT 22
12742: PUSH
12743: LD_OWVAR 2
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: PUSH
12752: LD_INT 25
12754: PUSH
12755: LD_INT 1
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: PPUSH
12766: CALL_OW 69
12770: ST_TO_ADDR
// if not tmp then
12771: LD_VAR 0 2
12775: NOT
12776: IFFALSE 12780
// exit ;
12778: GO 12942
// un := tmp [ rand ( 1 , tmp ) ] ;
12780: LD_ADDR_VAR 0 3
12784: PUSH
12785: LD_VAR 0 2
12789: PUSH
12790: LD_INT 1
12792: PPUSH
12793: LD_VAR 0 2
12797: PPUSH
12798: CALL_OW 12
12802: ARRAY
12803: ST_TO_ADDR
// if Crawls ( un ) then
12804: LD_VAR 0 3
12808: PPUSH
12809: CALL_OW 318
12813: IFFALSE 12824
// ComWalk ( un ) ;
12815: LD_VAR 0 3
12819: PPUSH
12820: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12824: LD_VAR 0 3
12828: PPUSH
12829: LD_INT 8
12831: PPUSH
12832: CALL_OW 336
// end ; 4 :
12836: GO 12942
12838: LD_INT 4
12840: DOUBLE
12841: EQUAL
12842: IFTRUE 12846
12844: GO 12920
12846: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12847: LD_ADDR_VAR 0 2
12851: PUSH
12852: LD_INT 22
12854: PUSH
12855: LD_OWVAR 2
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: PUSH
12864: LD_INT 30
12866: PUSH
12867: LD_INT 29
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: PPUSH
12878: CALL_OW 69
12882: ST_TO_ADDR
// if not tmp then
12883: LD_VAR 0 2
12887: NOT
12888: IFFALSE 12892
// exit ;
12890: GO 12942
// CenterNowOnUnits ( tmp [ 1 ] ) ;
12892: LD_VAR 0 2
12896: PUSH
12897: LD_INT 1
12899: ARRAY
12900: PPUSH
12901: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
12905: LD_VAR 0 2
12909: PUSH
12910: LD_INT 1
12912: ARRAY
12913: PPUSH
12914: CALL_OW 65
// end ; 5 .. 7 :
12918: GO 12942
12920: LD_INT 5
12922: DOUBLE
12923: GREATEREQUAL
12924: IFFALSE 12932
12926: LD_INT 7
12928: DOUBLE
12929: LESSEQUAL
12930: IFTRUE 12934
12932: GO 12941
12934: POP
// StreamSibBomb ; end ;
12935: CALL 9179 0 0
12939: GO 12942
12941: POP
// end ;
12942: PPOPN 3
12944: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12945: LD_EXP 3
12949: PUSH
12950: LD_EXP 53
12954: AND
12955: IFFALSE 13111
12957: GO 12959
12959: DISABLE
12960: LD_INT 0
12962: PPUSH
12963: PPUSH
12964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12965: LD_ADDR_VAR 0 2
12969: PUSH
12970: LD_INT 81
12972: PUSH
12973: LD_OWVAR 2
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: PUSH
12982: LD_INT 2
12984: PUSH
12985: LD_INT 21
12987: PUSH
12988: LD_INT 1
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: PUSH
12995: LD_INT 21
12997: PUSH
12998: LD_INT 2
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: LIST
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PPUSH
13014: CALL_OW 69
13018: ST_TO_ADDR
// if not tmp then
13019: LD_VAR 0 2
13023: NOT
13024: IFFALSE 13028
// exit ;
13026: GO 13111
// p := 0 ;
13028: LD_ADDR_VAR 0 3
13032: PUSH
13033: LD_INT 0
13035: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13036: LD_INT 35
13038: PPUSH
13039: CALL_OW 67
// p := p + 1 ;
13043: LD_ADDR_VAR 0 3
13047: PUSH
13048: LD_VAR 0 3
13052: PUSH
13053: LD_INT 1
13055: PLUS
13056: ST_TO_ADDR
// for i in tmp do
13057: LD_ADDR_VAR 0 1
13061: PUSH
13062: LD_VAR 0 2
13066: PUSH
13067: FOR_IN
13068: IFFALSE 13099
// if GetLives ( i ) < 1000 then
13070: LD_VAR 0 1
13074: PPUSH
13075: CALL_OW 256
13079: PUSH
13080: LD_INT 1000
13082: LESS
13083: IFFALSE 13097
// SetLives ( i , 1000 ) ;
13085: LD_VAR 0 1
13089: PPUSH
13090: LD_INT 1000
13092: PPUSH
13093: CALL_OW 234
13097: GO 13067
13099: POP
13100: POP
// until p > 20 ;
13101: LD_VAR 0 3
13105: PUSH
13106: LD_INT 20
13108: GREATER
13109: IFFALSE 13036
// end ;
13111: PPOPN 3
13113: END
// every 0 0$1 trigger StreamModeActive and sTime do
13114: LD_EXP 3
13118: PUSH
13119: LD_EXP 54
13123: AND
13124: IFFALSE 13159
13126: GO 13128
13128: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13129: LD_INT 28
13131: PPUSH
13132: LD_OWVAR 2
13136: PPUSH
13137: LD_INT 2
13139: PPUSH
13140: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13144: LD_INT 30
13146: PPUSH
13147: LD_OWVAR 2
13151: PPUSH
13152: LD_INT 2
13154: PPUSH
13155: CALL_OW 322
// end ;
13159: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13160: LD_EXP 3
13164: PUSH
13165: LD_EXP 55
13169: AND
13170: IFFALSE 13291
13172: GO 13174
13174: DISABLE
13175: LD_INT 0
13177: PPUSH
13178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13179: LD_ADDR_VAR 0 2
13183: PUSH
13184: LD_INT 22
13186: PUSH
13187: LD_OWVAR 2
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: PUSH
13196: LD_INT 21
13198: PUSH
13199: LD_INT 1
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PUSH
13206: LD_INT 3
13208: PUSH
13209: LD_INT 23
13211: PUSH
13212: LD_INT 0
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: LIST
13227: PPUSH
13228: CALL_OW 69
13232: ST_TO_ADDR
// if not tmp then
13233: LD_VAR 0 2
13237: NOT
13238: IFFALSE 13242
// exit ;
13240: GO 13291
// for i in tmp do
13242: LD_ADDR_VAR 0 1
13246: PUSH
13247: LD_VAR 0 2
13251: PUSH
13252: FOR_IN
13253: IFFALSE 13289
// begin if Crawls ( i ) then
13255: LD_VAR 0 1
13259: PPUSH
13260: CALL_OW 318
13264: IFFALSE 13275
// ComWalk ( i ) ;
13266: LD_VAR 0 1
13270: PPUSH
13271: CALL_OW 138
// SetClass ( i , 2 ) ;
13275: LD_VAR 0 1
13279: PPUSH
13280: LD_INT 2
13282: PPUSH
13283: CALL_OW 336
// end ;
13287: GO 13252
13289: POP
13290: POP
// end ;
13291: PPOPN 2
13293: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13294: LD_EXP 3
13298: PUSH
13299: LD_EXP 56
13303: AND
13304: IFFALSE 13592
13306: GO 13308
13308: DISABLE
13309: LD_INT 0
13311: PPUSH
13312: PPUSH
13313: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13314: LD_OWVAR 2
13318: PPUSH
13319: LD_INT 9
13321: PPUSH
13322: LD_INT 1
13324: PPUSH
13325: LD_INT 1
13327: PPUSH
13328: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13332: LD_INT 9
13334: PPUSH
13335: LD_OWVAR 2
13339: PPUSH
13340: CALL_OW 343
// uc_side := 9 ;
13344: LD_ADDR_OWVAR 20
13348: PUSH
13349: LD_INT 9
13351: ST_TO_ADDR
// uc_nation := 2 ;
13352: LD_ADDR_OWVAR 21
13356: PUSH
13357: LD_INT 2
13359: ST_TO_ADDR
// hc_name := Dark Warrior ;
13360: LD_ADDR_OWVAR 26
13364: PUSH
13365: LD_STRING Dark Warrior
13367: ST_TO_ADDR
// hc_gallery :=  ;
13368: LD_ADDR_OWVAR 33
13372: PUSH
13373: LD_STRING 
13375: ST_TO_ADDR
// hc_noskilllimit := true ;
13376: LD_ADDR_OWVAR 76
13380: PUSH
13381: LD_INT 1
13383: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13384: LD_ADDR_OWVAR 31
13388: PUSH
13389: LD_INT 30
13391: PUSH
13392: LD_INT 30
13394: PUSH
13395: LD_INT 30
13397: PUSH
13398: LD_INT 30
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: ST_TO_ADDR
// un := CreateHuman ;
13407: LD_ADDR_VAR 0 3
13411: PUSH
13412: CALL_OW 44
13416: ST_TO_ADDR
// hc_noskilllimit := false ;
13417: LD_ADDR_OWVAR 76
13421: PUSH
13422: LD_INT 0
13424: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13425: LD_VAR 0 3
13429: PPUSH
13430: LD_INT 1
13432: PPUSH
13433: CALL_OW 51
// ToLua ( playRanger() ) ;
13437: LD_STRING playRanger()
13439: PPUSH
13440: CALL_OW 559
// p := 0 ;
13444: LD_ADDR_VAR 0 2
13448: PUSH
13449: LD_INT 0
13451: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13452: LD_INT 35
13454: PPUSH
13455: CALL_OW 67
// p := p + 1 ;
13459: LD_ADDR_VAR 0 2
13463: PUSH
13464: LD_VAR 0 2
13468: PUSH
13469: LD_INT 1
13471: PLUS
13472: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13473: LD_VAR 0 3
13477: PPUSH
13478: CALL_OW 256
13482: PUSH
13483: LD_INT 1000
13485: LESS
13486: IFFALSE 13500
// SetLives ( un , 1000 ) ;
13488: LD_VAR 0 3
13492: PPUSH
13493: LD_INT 1000
13495: PPUSH
13496: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13500: LD_VAR 0 3
13504: PPUSH
13505: LD_INT 81
13507: PUSH
13508: LD_OWVAR 2
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PUSH
13517: LD_INT 91
13519: PUSH
13520: LD_VAR 0 3
13524: PUSH
13525: LD_INT 30
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: LIST
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: PPUSH
13537: CALL_OW 69
13541: PPUSH
13542: LD_VAR 0 3
13546: PPUSH
13547: CALL_OW 74
13551: PPUSH
13552: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
13556: LD_VAR 0 2
13560: PUSH
13561: LD_INT 80
13563: GREATER
13564: PUSH
13565: LD_VAR 0 3
13569: PPUSH
13570: CALL_OW 301
13574: OR
13575: IFFALSE 13452
// if un then
13577: LD_VAR 0 3
13581: IFFALSE 13592
// RemoveUnit ( un ) ;
13583: LD_VAR 0 3
13587: PPUSH
13588: CALL_OW 64
// end ;
13592: PPOPN 3
13594: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
13595: LD_EXP 57
13599: IFFALSE 13715
13601: GO 13603
13603: DISABLE
13604: LD_INT 0
13606: PPUSH
13607: PPUSH
13608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13609: LD_ADDR_VAR 0 2
13613: PUSH
13614: LD_INT 81
13616: PUSH
13617: LD_OWVAR 2
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PUSH
13626: LD_INT 21
13628: PUSH
13629: LD_INT 1
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: PPUSH
13640: CALL_OW 69
13644: ST_TO_ADDR
// ToLua ( playComputer() ) ;
13645: LD_STRING playComputer()
13647: PPUSH
13648: CALL_OW 559
// if not tmp then
13652: LD_VAR 0 2
13656: NOT
13657: IFFALSE 13661
// exit ;
13659: GO 13715
// for i in tmp do
13661: LD_ADDR_VAR 0 1
13665: PUSH
13666: LD_VAR 0 2
13670: PUSH
13671: FOR_IN
13672: IFFALSE 13713
// for j := 1 to 4 do
13674: LD_ADDR_VAR 0 3
13678: PUSH
13679: DOUBLE
13680: LD_INT 1
13682: DEC
13683: ST_TO_ADDR
13684: LD_INT 4
13686: PUSH
13687: FOR_TO
13688: IFFALSE 13709
// SetSkill ( i , j , 10 ) ;
13690: LD_VAR 0 1
13694: PPUSH
13695: LD_VAR 0 3
13699: PPUSH
13700: LD_INT 10
13702: PPUSH
13703: CALL_OW 237
13707: GO 13687
13709: POP
13710: POP
13711: GO 13671
13713: POP
13714: POP
// end ;
13715: PPOPN 3
13717: END
// every 0 0$1 trigger s30 do var i , tmp ;
13718: LD_EXP 58
13722: IFFALSE 13791
13724: GO 13726
13726: DISABLE
13727: LD_INT 0
13729: PPUSH
13730: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13731: LD_ADDR_VAR 0 2
13735: PUSH
13736: LD_INT 22
13738: PUSH
13739: LD_OWVAR 2
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PPUSH
13748: CALL_OW 69
13752: ST_TO_ADDR
// if not tmp then
13753: LD_VAR 0 2
13757: NOT
13758: IFFALSE 13762
// exit ;
13760: GO 13791
// for i in tmp do
13762: LD_ADDR_VAR 0 1
13766: PUSH
13767: LD_VAR 0 2
13771: PUSH
13772: FOR_IN
13773: IFFALSE 13789
// SetLives ( i , 300 ) ;
13775: LD_VAR 0 1
13779: PPUSH
13780: LD_INT 300
13782: PPUSH
13783: CALL_OW 234
13787: GO 13772
13789: POP
13790: POP
// end ;
13791: PPOPN 2
13793: END
// every 0 0$1 trigger s60 do var i , tmp ;
13794: LD_EXP 59
13798: IFFALSE 13867
13800: GO 13802
13802: DISABLE
13803: LD_INT 0
13805: PPUSH
13806: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13807: LD_ADDR_VAR 0 2
13811: PUSH
13812: LD_INT 22
13814: PUSH
13815: LD_OWVAR 2
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PPUSH
13824: CALL_OW 69
13828: ST_TO_ADDR
// if not tmp then
13829: LD_VAR 0 2
13833: NOT
13834: IFFALSE 13838
// exit ;
13836: GO 13867
// for i in tmp do
13838: LD_ADDR_VAR 0 1
13842: PUSH
13843: LD_VAR 0 2
13847: PUSH
13848: FOR_IN
13849: IFFALSE 13865
// SetLives ( i , 600 ) ;
13851: LD_VAR 0 1
13855: PPUSH
13856: LD_INT 600
13858: PPUSH
13859: CALL_OW 234
13863: GO 13848
13865: POP
13866: POP
// end ;
13867: PPOPN 2
13869: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13870: LD_INT 0
13872: PPUSH
// case cmd of 301 :
13873: LD_VAR 0 1
13877: PUSH
13878: LD_INT 301
13880: DOUBLE
13881: EQUAL
13882: IFTRUE 13886
13884: GO 13918
13886: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
13887: LD_VAR 0 6
13891: PPUSH
13892: LD_VAR 0 7
13896: PPUSH
13897: LD_VAR 0 8
13901: PPUSH
13902: LD_VAR 0 4
13906: PPUSH
13907: LD_VAR 0 5
13911: PPUSH
13912: CALL 15127 0 5
13916: GO 14039
13918: LD_INT 302
13920: DOUBLE
13921: EQUAL
13922: IFTRUE 13926
13924: GO 13963
13926: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
13927: LD_VAR 0 6
13931: PPUSH
13932: LD_VAR 0 7
13936: PPUSH
13937: LD_VAR 0 8
13941: PPUSH
13942: LD_VAR 0 9
13946: PPUSH
13947: LD_VAR 0 4
13951: PPUSH
13952: LD_VAR 0 5
13956: PPUSH
13957: CALL 15218 0 6
13961: GO 14039
13963: LD_INT 303
13965: DOUBLE
13966: EQUAL
13967: IFTRUE 13971
13969: GO 14008
13971: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
13972: LD_VAR 0 6
13976: PPUSH
13977: LD_VAR 0 7
13981: PPUSH
13982: LD_VAR 0 8
13986: PPUSH
13987: LD_VAR 0 9
13991: PPUSH
13992: LD_VAR 0 4
13996: PPUSH
13997: LD_VAR 0 5
14001: PPUSH
14002: CALL 14044 0 6
14006: GO 14039
14008: LD_INT 304
14010: DOUBLE
14011: EQUAL
14012: IFTRUE 14016
14014: GO 14038
14016: POP
// hHackTeleport ( unit , x , y ) ; end ;
14017: LD_VAR 0 2
14021: PPUSH
14022: LD_VAR 0 4
14026: PPUSH
14027: LD_VAR 0 5
14031: PPUSH
14032: CALL 15811 0 3
14036: GO 14039
14038: POP
// end ;
14039: LD_VAR 0 12
14043: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14044: LD_INT 0
14046: PPUSH
14047: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14048: LD_VAR 0 1
14052: PUSH
14053: LD_INT 1
14055: LESS
14056: PUSH
14057: LD_VAR 0 1
14061: PUSH
14062: LD_INT 3
14064: GREATER
14065: OR
14066: PUSH
14067: LD_VAR 0 5
14071: PPUSH
14072: LD_VAR 0 6
14076: PPUSH
14077: CALL_OW 428
14081: OR
14082: IFFALSE 14086
// exit ;
14084: GO 14814
// uc_side := your_side ;
14086: LD_ADDR_OWVAR 20
14090: PUSH
14091: LD_OWVAR 2
14095: ST_TO_ADDR
// uc_nation := nation ;
14096: LD_ADDR_OWVAR 21
14100: PUSH
14101: LD_VAR 0 1
14105: ST_TO_ADDR
// bc_level = 1 ;
14106: LD_ADDR_OWVAR 43
14110: PUSH
14111: LD_INT 1
14113: ST_TO_ADDR
// case btype of 1 :
14114: LD_VAR 0 2
14118: PUSH
14119: LD_INT 1
14121: DOUBLE
14122: EQUAL
14123: IFTRUE 14127
14125: GO 14138
14127: POP
// bc_type := b_depot ; 2 :
14128: LD_ADDR_OWVAR 42
14132: PUSH
14133: LD_INT 0
14135: ST_TO_ADDR
14136: GO 14758
14138: LD_INT 2
14140: DOUBLE
14141: EQUAL
14142: IFTRUE 14146
14144: GO 14157
14146: POP
// bc_type := b_warehouse ; 3 :
14147: LD_ADDR_OWVAR 42
14151: PUSH
14152: LD_INT 1
14154: ST_TO_ADDR
14155: GO 14758
14157: LD_INT 3
14159: DOUBLE
14160: EQUAL
14161: IFTRUE 14165
14163: GO 14176
14165: POP
// bc_type := b_lab ; 4 .. 9 :
14166: LD_ADDR_OWVAR 42
14170: PUSH
14171: LD_INT 6
14173: ST_TO_ADDR
14174: GO 14758
14176: LD_INT 4
14178: DOUBLE
14179: GREATEREQUAL
14180: IFFALSE 14188
14182: LD_INT 9
14184: DOUBLE
14185: LESSEQUAL
14186: IFTRUE 14190
14188: GO 14250
14190: POP
// begin bc_type := b_lab_half ;
14191: LD_ADDR_OWVAR 42
14195: PUSH
14196: LD_INT 7
14198: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14199: LD_ADDR_OWVAR 44
14203: PUSH
14204: LD_INT 10
14206: PUSH
14207: LD_INT 11
14209: PUSH
14210: LD_INT 12
14212: PUSH
14213: LD_INT 15
14215: PUSH
14216: LD_INT 14
14218: PUSH
14219: LD_INT 13
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: PUSH
14230: LD_VAR 0 2
14234: PUSH
14235: LD_INT 3
14237: MINUS
14238: ARRAY
14239: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
14240: LD_ADDR_OWVAR 45
14244: PUSH
14245: LD_INT 9
14247: ST_TO_ADDR
// end ; 10 .. 13 :
14248: GO 14758
14250: LD_INT 10
14252: DOUBLE
14253: GREATEREQUAL
14254: IFFALSE 14262
14256: LD_INT 13
14258: DOUBLE
14259: LESSEQUAL
14260: IFTRUE 14264
14262: GO 14341
14264: POP
// begin bc_type := b_lab_full ;
14265: LD_ADDR_OWVAR 42
14269: PUSH
14270: LD_INT 8
14272: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14273: LD_ADDR_OWVAR 44
14277: PUSH
14278: LD_INT 10
14280: PUSH
14281: LD_INT 12
14283: PUSH
14284: LD_INT 14
14286: PUSH
14287: LD_INT 13
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: PUSH
14296: LD_VAR 0 2
14300: PUSH
14301: LD_INT 9
14303: MINUS
14304: ARRAY
14305: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14306: LD_ADDR_OWVAR 45
14310: PUSH
14311: LD_INT 11
14313: PUSH
14314: LD_INT 15
14316: PUSH
14317: LD_INT 12
14319: PUSH
14320: LD_INT 15
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: PUSH
14329: LD_VAR 0 2
14333: PUSH
14334: LD_INT 9
14336: MINUS
14337: ARRAY
14338: ST_TO_ADDR
// end ; 14 :
14339: GO 14758
14341: LD_INT 14
14343: DOUBLE
14344: EQUAL
14345: IFTRUE 14349
14347: GO 14360
14349: POP
// bc_type := b_workshop ; 15 :
14350: LD_ADDR_OWVAR 42
14354: PUSH
14355: LD_INT 2
14357: ST_TO_ADDR
14358: GO 14758
14360: LD_INT 15
14362: DOUBLE
14363: EQUAL
14364: IFTRUE 14368
14366: GO 14379
14368: POP
// bc_type := b_factory ; 16 :
14369: LD_ADDR_OWVAR 42
14373: PUSH
14374: LD_INT 3
14376: ST_TO_ADDR
14377: GO 14758
14379: LD_INT 16
14381: DOUBLE
14382: EQUAL
14383: IFTRUE 14387
14385: GO 14398
14387: POP
// bc_type := b_ext_gun ; 17 :
14388: LD_ADDR_OWVAR 42
14392: PUSH
14393: LD_INT 17
14395: ST_TO_ADDR
14396: GO 14758
14398: LD_INT 17
14400: DOUBLE
14401: EQUAL
14402: IFTRUE 14406
14404: GO 14434
14406: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14407: LD_ADDR_OWVAR 42
14411: PUSH
14412: LD_INT 19
14414: PUSH
14415: LD_INT 23
14417: PUSH
14418: LD_INT 19
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: LIST
14425: PUSH
14426: LD_VAR 0 1
14430: ARRAY
14431: ST_TO_ADDR
14432: GO 14758
14434: LD_INT 18
14436: DOUBLE
14437: EQUAL
14438: IFTRUE 14442
14440: GO 14453
14442: POP
// bc_type := b_ext_radar ; 19 :
14443: LD_ADDR_OWVAR 42
14447: PUSH
14448: LD_INT 20
14450: ST_TO_ADDR
14451: GO 14758
14453: LD_INT 19
14455: DOUBLE
14456: EQUAL
14457: IFTRUE 14461
14459: GO 14472
14461: POP
// bc_type := b_ext_radio ; 20 :
14462: LD_ADDR_OWVAR 42
14466: PUSH
14467: LD_INT 22
14469: ST_TO_ADDR
14470: GO 14758
14472: LD_INT 20
14474: DOUBLE
14475: EQUAL
14476: IFTRUE 14480
14478: GO 14491
14480: POP
// bc_type := b_ext_siberium ; 21 :
14481: LD_ADDR_OWVAR 42
14485: PUSH
14486: LD_INT 21
14488: ST_TO_ADDR
14489: GO 14758
14491: LD_INT 21
14493: DOUBLE
14494: EQUAL
14495: IFTRUE 14499
14497: GO 14510
14499: POP
// bc_type := b_ext_computer ; 22 :
14500: LD_ADDR_OWVAR 42
14504: PUSH
14505: LD_INT 24
14507: ST_TO_ADDR
14508: GO 14758
14510: LD_INT 22
14512: DOUBLE
14513: EQUAL
14514: IFTRUE 14518
14516: GO 14529
14518: POP
// bc_type := b_ext_track ; 23 :
14519: LD_ADDR_OWVAR 42
14523: PUSH
14524: LD_INT 16
14526: ST_TO_ADDR
14527: GO 14758
14529: LD_INT 23
14531: DOUBLE
14532: EQUAL
14533: IFTRUE 14537
14535: GO 14548
14537: POP
// bc_type := b_ext_laser ; 24 :
14538: LD_ADDR_OWVAR 42
14542: PUSH
14543: LD_INT 25
14545: ST_TO_ADDR
14546: GO 14758
14548: LD_INT 24
14550: DOUBLE
14551: EQUAL
14552: IFTRUE 14556
14554: GO 14567
14556: POP
// bc_type := b_control_tower ; 25 :
14557: LD_ADDR_OWVAR 42
14561: PUSH
14562: LD_INT 36
14564: ST_TO_ADDR
14565: GO 14758
14567: LD_INT 25
14569: DOUBLE
14570: EQUAL
14571: IFTRUE 14575
14573: GO 14586
14575: POP
// bc_type := b_breastwork ; 26 :
14576: LD_ADDR_OWVAR 42
14580: PUSH
14581: LD_INT 31
14583: ST_TO_ADDR
14584: GO 14758
14586: LD_INT 26
14588: DOUBLE
14589: EQUAL
14590: IFTRUE 14594
14592: GO 14605
14594: POP
// bc_type := b_bunker ; 27 :
14595: LD_ADDR_OWVAR 42
14599: PUSH
14600: LD_INT 32
14602: ST_TO_ADDR
14603: GO 14758
14605: LD_INT 27
14607: DOUBLE
14608: EQUAL
14609: IFTRUE 14613
14611: GO 14624
14613: POP
// bc_type := b_turret ; 28 :
14614: LD_ADDR_OWVAR 42
14618: PUSH
14619: LD_INT 33
14621: ST_TO_ADDR
14622: GO 14758
14624: LD_INT 28
14626: DOUBLE
14627: EQUAL
14628: IFTRUE 14632
14630: GO 14643
14632: POP
// bc_type := b_armoury ; 29 :
14633: LD_ADDR_OWVAR 42
14637: PUSH
14638: LD_INT 4
14640: ST_TO_ADDR
14641: GO 14758
14643: LD_INT 29
14645: DOUBLE
14646: EQUAL
14647: IFTRUE 14651
14649: GO 14662
14651: POP
// bc_type := b_barracks ; 30 :
14652: LD_ADDR_OWVAR 42
14656: PUSH
14657: LD_INT 5
14659: ST_TO_ADDR
14660: GO 14758
14662: LD_INT 30
14664: DOUBLE
14665: EQUAL
14666: IFTRUE 14670
14668: GO 14681
14670: POP
// bc_type := b_solar_power ; 31 :
14671: LD_ADDR_OWVAR 42
14675: PUSH
14676: LD_INT 27
14678: ST_TO_ADDR
14679: GO 14758
14681: LD_INT 31
14683: DOUBLE
14684: EQUAL
14685: IFTRUE 14689
14687: GO 14700
14689: POP
// bc_type := b_oil_power ; 32 :
14690: LD_ADDR_OWVAR 42
14694: PUSH
14695: LD_INT 26
14697: ST_TO_ADDR
14698: GO 14758
14700: LD_INT 32
14702: DOUBLE
14703: EQUAL
14704: IFTRUE 14708
14706: GO 14719
14708: POP
// bc_type := b_siberite_power ; 33 :
14709: LD_ADDR_OWVAR 42
14713: PUSH
14714: LD_INT 28
14716: ST_TO_ADDR
14717: GO 14758
14719: LD_INT 33
14721: DOUBLE
14722: EQUAL
14723: IFTRUE 14727
14725: GO 14738
14727: POP
// bc_type := b_oil_mine ; 34 :
14728: LD_ADDR_OWVAR 42
14732: PUSH
14733: LD_INT 29
14735: ST_TO_ADDR
14736: GO 14758
14738: LD_INT 34
14740: DOUBLE
14741: EQUAL
14742: IFTRUE 14746
14744: GO 14757
14746: POP
// bc_type := b_siberite_mine ; end ;
14747: LD_ADDR_OWVAR 42
14751: PUSH
14752: LD_INT 30
14754: ST_TO_ADDR
14755: GO 14758
14757: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
14758: LD_ADDR_VAR 0 8
14762: PUSH
14763: LD_VAR 0 5
14767: PPUSH
14768: LD_VAR 0 6
14772: PPUSH
14773: LD_VAR 0 3
14777: PPUSH
14778: CALL_OW 47
14782: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
14783: LD_OWVAR 42
14787: PUSH
14788: LD_INT 32
14790: PUSH
14791: LD_INT 33
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: IN
14798: IFFALSE 14814
// PlaceWeaponTurret ( b , weapon ) ;
14800: LD_VAR 0 8
14804: PPUSH
14805: LD_VAR 0 4
14809: PPUSH
14810: CALL_OW 431
// end ;
14814: LD_VAR 0 7
14818: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
14819: LD_INT 0
14821: PPUSH
14822: PPUSH
14823: PPUSH
14824: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14825: LD_ADDR_VAR 0 4
14829: PUSH
14830: LD_INT 22
14832: PUSH
14833: LD_OWVAR 2
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: PUSH
14842: LD_INT 2
14844: PUSH
14845: LD_INT 30
14847: PUSH
14848: LD_INT 0
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PUSH
14855: LD_INT 30
14857: PUSH
14858: LD_INT 1
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: LIST
14869: PUSH
14870: EMPTY
14871: LIST
14872: LIST
14873: PPUSH
14874: CALL_OW 69
14878: ST_TO_ADDR
// if not tmp then
14879: LD_VAR 0 4
14883: NOT
14884: IFFALSE 14888
// exit ;
14886: GO 14947
// for i in tmp do
14888: LD_ADDR_VAR 0 2
14892: PUSH
14893: LD_VAR 0 4
14897: PUSH
14898: FOR_IN
14899: IFFALSE 14945
// for j = 1 to 3 do
14901: LD_ADDR_VAR 0 3
14905: PUSH
14906: DOUBLE
14907: LD_INT 1
14909: DEC
14910: ST_TO_ADDR
14911: LD_INT 3
14913: PUSH
14914: FOR_TO
14915: IFFALSE 14941
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14917: LD_VAR 0 2
14921: PPUSH
14922: CALL_OW 274
14926: PPUSH
14927: LD_VAR 0 3
14931: PPUSH
14932: LD_INT 99999
14934: PPUSH
14935: CALL_OW 277
14939: GO 14914
14941: POP
14942: POP
14943: GO 14898
14945: POP
14946: POP
// end ;
14947: LD_VAR 0 1
14951: RET
// export function hHackSetLevel10 ; var i , j ; begin
14952: LD_INT 0
14954: PPUSH
14955: PPUSH
14956: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14957: LD_ADDR_VAR 0 2
14961: PUSH
14962: LD_INT 21
14964: PUSH
14965: LD_INT 1
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PPUSH
14972: CALL_OW 69
14976: PUSH
14977: FOR_IN
14978: IFFALSE 15030
// if IsSelected ( i ) then
14980: LD_VAR 0 2
14984: PPUSH
14985: CALL_OW 306
14989: IFFALSE 15028
// begin for j := 1 to 4 do
14991: LD_ADDR_VAR 0 3
14995: PUSH
14996: DOUBLE
14997: LD_INT 1
14999: DEC
15000: ST_TO_ADDR
15001: LD_INT 4
15003: PUSH
15004: FOR_TO
15005: IFFALSE 15026
// SetSkill ( i , j , 10 ) ;
15007: LD_VAR 0 2
15011: PPUSH
15012: LD_VAR 0 3
15016: PPUSH
15017: LD_INT 10
15019: PPUSH
15020: CALL_OW 237
15024: GO 15004
15026: POP
15027: POP
// end ;
15028: GO 14977
15030: POP
15031: POP
// end ;
15032: LD_VAR 0 1
15036: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15037: LD_INT 0
15039: PPUSH
15040: PPUSH
15041: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15042: LD_ADDR_VAR 0 2
15046: PUSH
15047: LD_INT 22
15049: PUSH
15050: LD_OWVAR 2
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: PUSH
15059: LD_INT 21
15061: PUSH
15062: LD_INT 1
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PPUSH
15073: CALL_OW 69
15077: PUSH
15078: FOR_IN
15079: IFFALSE 15120
// begin for j := 1 to 4 do
15081: LD_ADDR_VAR 0 3
15085: PUSH
15086: DOUBLE
15087: LD_INT 1
15089: DEC
15090: ST_TO_ADDR
15091: LD_INT 4
15093: PUSH
15094: FOR_TO
15095: IFFALSE 15116
// SetSkill ( i , j , 10 ) ;
15097: LD_VAR 0 2
15101: PPUSH
15102: LD_VAR 0 3
15106: PPUSH
15107: LD_INT 10
15109: PPUSH
15110: CALL_OW 237
15114: GO 15094
15116: POP
15117: POP
// end ;
15118: GO 15078
15120: POP
15121: POP
// end ;
15122: LD_VAR 0 1
15126: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15127: LD_INT 0
15129: PPUSH
// uc_side := your_side ;
15130: LD_ADDR_OWVAR 20
15134: PUSH
15135: LD_OWVAR 2
15139: ST_TO_ADDR
// uc_nation := nation ;
15140: LD_ADDR_OWVAR 21
15144: PUSH
15145: LD_VAR 0 1
15149: ST_TO_ADDR
// InitHc ;
15150: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15154: LD_INT 0
15156: PPUSH
15157: LD_VAR 0 2
15161: PPUSH
15162: LD_VAR 0 3
15166: PPUSH
15167: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15171: LD_VAR 0 4
15175: PPUSH
15176: LD_VAR 0 5
15180: PPUSH
15181: CALL_OW 428
15185: PUSH
15186: LD_INT 0
15188: EQUAL
15189: IFFALSE 15213
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15191: CALL_OW 44
15195: PPUSH
15196: LD_VAR 0 4
15200: PPUSH
15201: LD_VAR 0 5
15205: PPUSH
15206: LD_INT 1
15208: PPUSH
15209: CALL_OW 48
// end ;
15213: LD_VAR 0 6
15217: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15218: LD_INT 0
15220: PPUSH
15221: PPUSH
// uc_side := your_side ;
15222: LD_ADDR_OWVAR 20
15226: PUSH
15227: LD_OWVAR 2
15231: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15232: LD_VAR 0 1
15236: PUSH
15237: LD_INT 1
15239: PUSH
15240: LD_INT 2
15242: PUSH
15243: LD_INT 3
15245: PUSH
15246: LD_INT 4
15248: PUSH
15249: LD_INT 5
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: IN
15259: IFFALSE 15271
// uc_nation := nation_american else
15261: LD_ADDR_OWVAR 21
15265: PUSH
15266: LD_INT 1
15268: ST_TO_ADDR
15269: GO 15314
// if chassis in [ 11 , 12 , 13 , 14 ] then
15271: LD_VAR 0 1
15275: PUSH
15276: LD_INT 11
15278: PUSH
15279: LD_INT 12
15281: PUSH
15282: LD_INT 13
15284: PUSH
15285: LD_INT 14
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: IN
15294: IFFALSE 15306
// uc_nation := nation_arabian else
15296: LD_ADDR_OWVAR 21
15300: PUSH
15301: LD_INT 2
15303: ST_TO_ADDR
15304: GO 15314
// uc_nation := nation_russian ;
15306: LD_ADDR_OWVAR 21
15310: PUSH
15311: LD_INT 3
15313: ST_TO_ADDR
// vc_chassis := chassis ;
15314: LD_ADDR_OWVAR 37
15318: PUSH
15319: LD_VAR 0 1
15323: ST_TO_ADDR
// vc_engine := engine ;
15324: LD_ADDR_OWVAR 39
15328: PUSH
15329: LD_VAR 0 2
15333: ST_TO_ADDR
// vc_control := control ;
15334: LD_ADDR_OWVAR 38
15338: PUSH
15339: LD_VAR 0 3
15343: ST_TO_ADDR
// vc_weapon := weapon ;
15344: LD_ADDR_OWVAR 40
15348: PUSH
15349: LD_VAR 0 4
15353: ST_TO_ADDR
// un := CreateVehicle ;
15354: LD_ADDR_VAR 0 8
15358: PUSH
15359: CALL_OW 45
15363: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15364: LD_VAR 0 8
15368: PPUSH
15369: LD_INT 0
15371: PPUSH
15372: LD_INT 5
15374: PPUSH
15375: CALL_OW 12
15379: PPUSH
15380: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15384: LD_VAR 0 8
15388: PPUSH
15389: LD_VAR 0 5
15393: PPUSH
15394: LD_VAR 0 6
15398: PPUSH
15399: LD_INT 1
15401: PPUSH
15402: CALL_OW 48
// end ;
15406: LD_VAR 0 7
15410: RET
// export hInvincible ; every 1 do
15411: GO 15413
15413: DISABLE
// hInvincible := [ ] ;
15414: LD_ADDR_EXP 60
15418: PUSH
15419: EMPTY
15420: ST_TO_ADDR
15421: END
// every 10 do var i ;
15422: GO 15424
15424: DISABLE
15425: LD_INT 0
15427: PPUSH
// begin enable ;
15428: ENABLE
// if not hInvincible then
15429: LD_EXP 60
15433: NOT
15434: IFFALSE 15438
// exit ;
15436: GO 15482
// for i in hInvincible do
15438: LD_ADDR_VAR 0 1
15442: PUSH
15443: LD_EXP 60
15447: PUSH
15448: FOR_IN
15449: IFFALSE 15480
// if GetLives ( i ) < 1000 then
15451: LD_VAR 0 1
15455: PPUSH
15456: CALL_OW 256
15460: PUSH
15461: LD_INT 1000
15463: LESS
15464: IFFALSE 15478
// SetLives ( i , 1000 ) ;
15466: LD_VAR 0 1
15470: PPUSH
15471: LD_INT 1000
15473: PPUSH
15474: CALL_OW 234
15478: GO 15448
15480: POP
15481: POP
// end ;
15482: PPOPN 1
15484: END
// export function hHackInvincible ; var i ; begin
15485: LD_INT 0
15487: PPUSH
15488: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15489: LD_ADDR_VAR 0 2
15493: PUSH
15494: LD_INT 2
15496: PUSH
15497: LD_INT 21
15499: PUSH
15500: LD_INT 1
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: PUSH
15507: LD_INT 21
15509: PUSH
15510: LD_INT 2
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: LIST
15521: PPUSH
15522: CALL_OW 69
15526: PUSH
15527: FOR_IN
15528: IFFALSE 15589
// if IsSelected ( i ) then
15530: LD_VAR 0 2
15534: PPUSH
15535: CALL_OW 306
15539: IFFALSE 15587
// begin if i in hInvincible then
15541: LD_VAR 0 2
15545: PUSH
15546: LD_EXP 60
15550: IN
15551: IFFALSE 15571
// hInvincible := hInvincible diff i else
15553: LD_ADDR_EXP 60
15557: PUSH
15558: LD_EXP 60
15562: PUSH
15563: LD_VAR 0 2
15567: DIFF
15568: ST_TO_ADDR
15569: GO 15587
// hInvincible := hInvincible union i ;
15571: LD_ADDR_EXP 60
15575: PUSH
15576: LD_EXP 60
15580: PUSH
15581: LD_VAR 0 2
15585: UNION
15586: ST_TO_ADDR
// end ;
15587: GO 15527
15589: POP
15590: POP
// end ;
15591: LD_VAR 0 1
15595: RET
// export function hHackInvisible ; var i , j ; begin
15596: LD_INT 0
15598: PPUSH
15599: PPUSH
15600: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15601: LD_ADDR_VAR 0 2
15605: PUSH
15606: LD_INT 21
15608: PUSH
15609: LD_INT 1
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PPUSH
15616: CALL_OW 69
15620: PUSH
15621: FOR_IN
15622: IFFALSE 15646
// if IsSelected ( i ) then
15624: LD_VAR 0 2
15628: PPUSH
15629: CALL_OW 306
15633: IFFALSE 15644
// ComForceInvisible ( i ) ;
15635: LD_VAR 0 2
15639: PPUSH
15640: CALL_OW 496
15644: GO 15621
15646: POP
15647: POP
// end ;
15648: LD_VAR 0 1
15652: RET
// export function hHackChangeYourSide ; begin
15653: LD_INT 0
15655: PPUSH
// if your_side = 8 then
15656: LD_OWVAR 2
15660: PUSH
15661: LD_INT 8
15663: EQUAL
15664: IFFALSE 15676
// your_side := 0 else
15666: LD_ADDR_OWVAR 2
15670: PUSH
15671: LD_INT 0
15673: ST_TO_ADDR
15674: GO 15690
// your_side := your_side + 1 ;
15676: LD_ADDR_OWVAR 2
15680: PUSH
15681: LD_OWVAR 2
15685: PUSH
15686: LD_INT 1
15688: PLUS
15689: ST_TO_ADDR
// end ;
15690: LD_VAR 0 1
15694: RET
// export function hHackChangeUnitSide ; var i , j ; begin
15695: LD_INT 0
15697: PPUSH
15698: PPUSH
15699: PPUSH
// for i in all_units do
15700: LD_ADDR_VAR 0 2
15704: PUSH
15705: LD_OWVAR 3
15709: PUSH
15710: FOR_IN
15711: IFFALSE 15789
// if IsSelected ( i ) then
15713: LD_VAR 0 2
15717: PPUSH
15718: CALL_OW 306
15722: IFFALSE 15787
// begin j := GetSide ( i ) ;
15724: LD_ADDR_VAR 0 3
15728: PUSH
15729: LD_VAR 0 2
15733: PPUSH
15734: CALL_OW 255
15738: ST_TO_ADDR
// if j = 8 then
15739: LD_VAR 0 3
15743: PUSH
15744: LD_INT 8
15746: EQUAL
15747: IFFALSE 15759
// j := 0 else
15749: LD_ADDR_VAR 0 3
15753: PUSH
15754: LD_INT 0
15756: ST_TO_ADDR
15757: GO 15773
// j := j + 1 ;
15759: LD_ADDR_VAR 0 3
15763: PUSH
15764: LD_VAR 0 3
15768: PUSH
15769: LD_INT 1
15771: PLUS
15772: ST_TO_ADDR
// SetSide ( i , j ) ;
15773: LD_VAR 0 2
15777: PPUSH
15778: LD_VAR 0 3
15782: PPUSH
15783: CALL_OW 235
// end ;
15787: GO 15710
15789: POP
15790: POP
// end ;
15791: LD_VAR 0 1
15795: RET
// export function hHackFog ; begin
15796: LD_INT 0
15798: PPUSH
// FogOff ( true ) ;
15799: LD_INT 1
15801: PPUSH
15802: CALL_OW 344
// end ;
15806: LD_VAR 0 1
15810: RET
// export function hHackTeleport ( unit , x , y ) ; begin
15811: LD_INT 0
15813: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
15814: LD_VAR 0 1
15818: PPUSH
15819: LD_VAR 0 2
15823: PPUSH
15824: LD_VAR 0 3
15828: PPUSH
15829: LD_INT 1
15831: PPUSH
15832: LD_INT 1
15834: PPUSH
15835: CALL_OW 483
// CenterOnXY ( x , y ) ;
15839: LD_VAR 0 2
15843: PPUSH
15844: LD_VAR 0 3
15848: PPUSH
15849: CALL_OW 84
// end ;
15853: LD_VAR 0 4
15857: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
15858: LD_INT 0
15860: PPUSH
15861: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
15862: LD_VAR 0 1
15866: NOT
15867: PUSH
15868: LD_VAR 0 2
15872: PPUSH
15873: LD_VAR 0 3
15877: PPUSH
15878: CALL_OW 488
15882: NOT
15883: OR
15884: PUSH
15885: LD_VAR 0 1
15889: PPUSH
15890: CALL_OW 266
15894: PUSH
15895: LD_INT 3
15897: NONEQUAL
15898: PUSH
15899: LD_VAR 0 1
15903: PPUSH
15904: CALL_OW 247
15908: PUSH
15909: LD_INT 1
15911: EQUAL
15912: NOT
15913: AND
15914: OR
15915: IFFALSE 15919
// exit ;
15917: GO 16068
// if GetType ( factory ) = unit_human then
15919: LD_VAR 0 1
15923: PPUSH
15924: CALL_OW 247
15928: PUSH
15929: LD_INT 1
15931: EQUAL
15932: IFFALSE 15949
// factory := IsInUnit ( factory ) ;
15934: LD_ADDR_VAR 0 1
15938: PUSH
15939: LD_VAR 0 1
15943: PPUSH
15944: CALL_OW 310
15948: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
15949: LD_VAR 0 1
15953: PPUSH
15954: CALL_OW 266
15958: PUSH
15959: LD_INT 3
15961: NONEQUAL
15962: IFFALSE 15966
// exit ;
15964: GO 16068
// if HexInfo ( x , y ) = factory then
15966: LD_VAR 0 2
15970: PPUSH
15971: LD_VAR 0 3
15975: PPUSH
15976: CALL_OW 428
15980: PUSH
15981: LD_VAR 0 1
15985: EQUAL
15986: IFFALSE 16013
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
15988: LD_ADDR_EXP 61
15992: PUSH
15993: LD_EXP 61
15997: PPUSH
15998: LD_VAR 0 1
16002: PPUSH
16003: LD_INT 0
16005: PPUSH
16006: CALL_OW 1
16010: ST_TO_ADDR
16011: GO 16064
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
16013: LD_ADDR_EXP 61
16017: PUSH
16018: LD_EXP 61
16022: PPUSH
16023: LD_VAR 0 1
16027: PPUSH
16028: LD_VAR 0 1
16032: PPUSH
16033: CALL_OW 255
16037: PUSH
16038: LD_VAR 0 1
16042: PUSH
16043: LD_VAR 0 2
16047: PUSH
16048: LD_VAR 0 3
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: PPUSH
16059: CALL_OW 1
16063: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16064: CALL 16073 0 0
// end ;
16068: LD_VAR 0 4
16072: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16073: LD_INT 0
16075: PPUSH
16076: PPUSH
16077: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16078: LD_STRING resetFactoryWaypoint();
16080: PPUSH
16081: CALL_OW 559
// if factoryWaypoints then
16085: LD_EXP 61
16089: IFFALSE 16215
// begin list := PrepareArray ( factoryWaypoints ) ;
16091: LD_ADDR_VAR 0 3
16095: PUSH
16096: LD_EXP 61
16100: PPUSH
16101: CALL 63612 0 1
16105: ST_TO_ADDR
// for i := 1 to list do
16106: LD_ADDR_VAR 0 2
16110: PUSH
16111: DOUBLE
16112: LD_INT 1
16114: DEC
16115: ST_TO_ADDR
16116: LD_VAR 0 3
16120: PUSH
16121: FOR_TO
16122: IFFALSE 16213
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16124: LD_STRING setFactoryWaypointXY(
16126: PUSH
16127: LD_VAR 0 3
16131: PUSH
16132: LD_VAR 0 2
16136: ARRAY
16137: PUSH
16138: LD_INT 1
16140: ARRAY
16141: STR
16142: PUSH
16143: LD_STRING ,
16145: STR
16146: PUSH
16147: LD_VAR 0 3
16151: PUSH
16152: LD_VAR 0 2
16156: ARRAY
16157: PUSH
16158: LD_INT 2
16160: ARRAY
16161: STR
16162: PUSH
16163: LD_STRING ,
16165: STR
16166: PUSH
16167: LD_VAR 0 3
16171: PUSH
16172: LD_VAR 0 2
16176: ARRAY
16177: PUSH
16178: LD_INT 3
16180: ARRAY
16181: STR
16182: PUSH
16183: LD_STRING ,
16185: STR
16186: PUSH
16187: LD_VAR 0 3
16191: PUSH
16192: LD_VAR 0 2
16196: ARRAY
16197: PUSH
16198: LD_INT 4
16200: ARRAY
16201: STR
16202: PUSH
16203: LD_STRING )
16205: STR
16206: PPUSH
16207: CALL_OW 559
16211: GO 16121
16213: POP
16214: POP
// end ; end ;
16215: LD_VAR 0 1
16219: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16220: LD_INT 0
16222: PPUSH
// if HexInfo ( x , y ) = warehouse then
16223: LD_VAR 0 2
16227: PPUSH
16228: LD_VAR 0 3
16232: PPUSH
16233: CALL_OW 428
16237: PUSH
16238: LD_VAR 0 1
16242: EQUAL
16243: IFFALSE 16270
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16245: LD_ADDR_EXP 62
16249: PUSH
16250: LD_EXP 62
16254: PPUSH
16255: LD_VAR 0 1
16259: PPUSH
16260: LD_INT 0
16262: PPUSH
16263: CALL_OW 1
16267: ST_TO_ADDR
16268: GO 16321
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16270: LD_ADDR_EXP 62
16274: PUSH
16275: LD_EXP 62
16279: PPUSH
16280: LD_VAR 0 1
16284: PPUSH
16285: LD_VAR 0 1
16289: PPUSH
16290: CALL_OW 255
16294: PUSH
16295: LD_VAR 0 1
16299: PUSH
16300: LD_VAR 0 2
16304: PUSH
16305: LD_VAR 0 3
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: PPUSH
16316: CALL_OW 1
16320: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16321: CALL 16330 0 0
// end ;
16325: LD_VAR 0 4
16329: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16330: LD_INT 0
16332: PPUSH
16333: PPUSH
16334: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16335: LD_STRING resetWarehouseGatheringPoints();
16337: PPUSH
16338: CALL_OW 559
// if warehouseGatheringPoints then
16342: LD_EXP 62
16346: IFFALSE 16472
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16348: LD_ADDR_VAR 0 3
16352: PUSH
16353: LD_EXP 62
16357: PPUSH
16358: CALL 63612 0 1
16362: ST_TO_ADDR
// for i := 1 to list do
16363: LD_ADDR_VAR 0 2
16367: PUSH
16368: DOUBLE
16369: LD_INT 1
16371: DEC
16372: ST_TO_ADDR
16373: LD_VAR 0 3
16377: PUSH
16378: FOR_TO
16379: IFFALSE 16470
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16381: LD_STRING setWarehouseGatheringPointXY(
16383: PUSH
16384: LD_VAR 0 3
16388: PUSH
16389: LD_VAR 0 2
16393: ARRAY
16394: PUSH
16395: LD_INT 1
16397: ARRAY
16398: STR
16399: PUSH
16400: LD_STRING ,
16402: STR
16403: PUSH
16404: LD_VAR 0 3
16408: PUSH
16409: LD_VAR 0 2
16413: ARRAY
16414: PUSH
16415: LD_INT 2
16417: ARRAY
16418: STR
16419: PUSH
16420: LD_STRING ,
16422: STR
16423: PUSH
16424: LD_VAR 0 3
16428: PUSH
16429: LD_VAR 0 2
16433: ARRAY
16434: PUSH
16435: LD_INT 3
16437: ARRAY
16438: STR
16439: PUSH
16440: LD_STRING ,
16442: STR
16443: PUSH
16444: LD_VAR 0 3
16448: PUSH
16449: LD_VAR 0 2
16453: ARRAY
16454: PUSH
16455: LD_INT 4
16457: ARRAY
16458: STR
16459: PUSH
16460: LD_STRING )
16462: STR
16463: PPUSH
16464: CALL_OW 559
16468: GO 16378
16470: POP
16471: POP
// end ; end ;
16472: LD_VAR 0 1
16476: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
16477: LD_EXP 62
16481: IFFALSE 17166
16483: GO 16485
16485: DISABLE
16486: LD_INT 0
16488: PPUSH
16489: PPUSH
16490: PPUSH
16491: PPUSH
16492: PPUSH
16493: PPUSH
16494: PPUSH
16495: PPUSH
16496: PPUSH
// begin enable ;
16497: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
16498: LD_ADDR_VAR 0 3
16502: PUSH
16503: LD_EXP 62
16507: PPUSH
16508: CALL 63612 0 1
16512: ST_TO_ADDR
// if not list then
16513: LD_VAR 0 3
16517: NOT
16518: IFFALSE 16522
// exit ;
16520: GO 17166
// for i := 1 to list do
16522: LD_ADDR_VAR 0 1
16526: PUSH
16527: DOUBLE
16528: LD_INT 1
16530: DEC
16531: ST_TO_ADDR
16532: LD_VAR 0 3
16536: PUSH
16537: FOR_TO
16538: IFFALSE 17164
// begin depot := list [ i ] [ 2 ] ;
16540: LD_ADDR_VAR 0 8
16544: PUSH
16545: LD_VAR 0 3
16549: PUSH
16550: LD_VAR 0 1
16554: ARRAY
16555: PUSH
16556: LD_INT 2
16558: ARRAY
16559: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
16560: LD_ADDR_VAR 0 5
16564: PUSH
16565: LD_VAR 0 3
16569: PUSH
16570: LD_VAR 0 1
16574: ARRAY
16575: PUSH
16576: LD_INT 1
16578: ARRAY
16579: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
16580: LD_VAR 0 8
16584: PPUSH
16585: CALL_OW 301
16589: PUSH
16590: LD_VAR 0 5
16594: PUSH
16595: LD_VAR 0 8
16599: PPUSH
16600: CALL_OW 255
16604: NONEQUAL
16605: OR
16606: IFFALSE 16635
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
16608: LD_ADDR_EXP 62
16612: PUSH
16613: LD_EXP 62
16617: PPUSH
16618: LD_VAR 0 8
16622: PPUSH
16623: LD_INT 0
16625: PPUSH
16626: CALL_OW 1
16630: ST_TO_ADDR
// exit ;
16631: POP
16632: POP
16633: GO 17166
// end ; x := list [ i ] [ 3 ] ;
16635: LD_ADDR_VAR 0 6
16639: PUSH
16640: LD_VAR 0 3
16644: PUSH
16645: LD_VAR 0 1
16649: ARRAY
16650: PUSH
16651: LD_INT 3
16653: ARRAY
16654: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
16655: LD_ADDR_VAR 0 7
16659: PUSH
16660: LD_VAR 0 3
16664: PUSH
16665: LD_VAR 0 1
16669: ARRAY
16670: PUSH
16671: LD_INT 4
16673: ARRAY
16674: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
16675: LD_ADDR_VAR 0 9
16679: PUSH
16680: LD_VAR 0 6
16684: PPUSH
16685: LD_VAR 0 7
16689: PPUSH
16690: LD_INT 16
16692: PPUSH
16693: CALL 62200 0 3
16697: ST_TO_ADDR
// if not cratesNearbyPoint then
16698: LD_VAR 0 9
16702: NOT
16703: IFFALSE 16709
// exit ;
16705: POP
16706: POP
16707: GO 17166
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
16709: LD_ADDR_VAR 0 4
16713: PUSH
16714: LD_INT 22
16716: PUSH
16717: LD_VAR 0 5
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: LD_INT 3
16728: PUSH
16729: LD_INT 60
16731: PUSH
16732: EMPTY
16733: LIST
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PUSH
16739: LD_INT 91
16741: PUSH
16742: LD_VAR 0 8
16746: PUSH
16747: LD_INT 6
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: LIST
16754: PUSH
16755: LD_INT 2
16757: PUSH
16758: LD_INT 25
16760: PUSH
16761: LD_INT 2
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: LD_INT 25
16770: PUSH
16771: LD_INT 16
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: LIST
16782: PUSH
16783: EMPTY
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: PPUSH
16789: CALL_OW 69
16793: PUSH
16794: LD_VAR 0 8
16798: PPUSH
16799: CALL_OW 313
16803: PPUSH
16804: LD_INT 3
16806: PUSH
16807: LD_INT 60
16809: PUSH
16810: EMPTY
16811: LIST
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: PUSH
16817: LD_INT 2
16819: PUSH
16820: LD_INT 25
16822: PUSH
16823: LD_INT 2
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: LD_INT 25
16832: PUSH
16833: LD_INT 16
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: LIST
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: PPUSH
16849: CALL_OW 72
16853: UNION
16854: ST_TO_ADDR
// if tmp then
16855: LD_VAR 0 4
16859: IFFALSE 16939
// begin tmp := ShrinkArray ( tmp , 3 ) ;
16861: LD_ADDR_VAR 0 4
16865: PUSH
16866: LD_VAR 0 4
16870: PPUSH
16871: LD_INT 3
16873: PPUSH
16874: CALL 60169 0 2
16878: ST_TO_ADDR
// for j in tmp do
16879: LD_ADDR_VAR 0 2
16883: PUSH
16884: LD_VAR 0 4
16888: PUSH
16889: FOR_IN
16890: IFFALSE 16933
// begin if IsInUnit ( j ) then
16892: LD_VAR 0 2
16896: PPUSH
16897: CALL_OW 310
16901: IFFALSE 16912
// ComExit ( j ) ;
16903: LD_VAR 0 2
16907: PPUSH
16908: CALL 60252 0 1
// AddComCollect ( j , x , y ) ;
16912: LD_VAR 0 2
16916: PPUSH
16917: LD_VAR 0 6
16921: PPUSH
16922: LD_VAR 0 7
16926: PPUSH
16927: CALL_OW 177
// end ;
16931: GO 16889
16933: POP
16934: POP
// exit ;
16935: POP
16936: POP
16937: GO 17166
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
16939: LD_ADDR_VAR 0 4
16943: PUSH
16944: LD_INT 22
16946: PUSH
16947: LD_VAR 0 5
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: PUSH
16956: LD_INT 91
16958: PUSH
16959: LD_VAR 0 8
16963: PUSH
16964: LD_INT 8
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: LIST
16971: PUSH
16972: LD_INT 2
16974: PUSH
16975: LD_INT 34
16977: PUSH
16978: LD_INT 12
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: PUSH
16985: LD_INT 34
16987: PUSH
16988: LD_INT 51
16990: PUSH
16991: EMPTY
16992: LIST
16993: LIST
16994: PUSH
16995: LD_INT 34
16997: PUSH
16998: LD_INT 32
17000: PUSH
17001: EMPTY
17002: LIST
17003: LIST
17004: PUSH
17005: LD_INT 34
17007: PUSH
17008: LD_INT 89
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: LIST
17026: PPUSH
17027: CALL_OW 69
17031: ST_TO_ADDR
// if tmp then
17032: LD_VAR 0 4
17036: IFFALSE 17162
// begin for j in tmp do
17038: LD_ADDR_VAR 0 2
17042: PUSH
17043: LD_VAR 0 4
17047: PUSH
17048: FOR_IN
17049: IFFALSE 17160
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
17051: LD_VAR 0 2
17055: PPUSH
17056: CALL_OW 262
17060: PUSH
17061: LD_INT 3
17063: EQUAL
17064: PUSH
17065: LD_VAR 0 2
17069: PPUSH
17070: CALL_OW 261
17074: PUSH
17075: LD_INT 20
17077: GREATER
17078: OR
17079: PUSH
17080: LD_VAR 0 2
17084: PPUSH
17085: CALL_OW 314
17089: NOT
17090: AND
17091: PUSH
17092: LD_VAR 0 2
17096: PPUSH
17097: CALL_OW 263
17101: PUSH
17102: LD_INT 1
17104: NONEQUAL
17105: PUSH
17106: LD_VAR 0 2
17110: PPUSH
17111: CALL_OW 311
17115: OR
17116: AND
17117: IFFALSE 17158
// begin ComCollect ( j , x , y ) ;
17119: LD_VAR 0 2
17123: PPUSH
17124: LD_VAR 0 6
17128: PPUSH
17129: LD_VAR 0 7
17133: PPUSH
17134: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
17138: LD_VAR 0 2
17142: PPUSH
17143: LD_VAR 0 8
17147: PPUSH
17148: CALL_OW 172
// exit ;
17152: POP
17153: POP
17154: POP
17155: POP
17156: GO 17166
// end ;
17158: GO 17048
17160: POP
17161: POP
// end ; end ;
17162: GO 16537
17164: POP
17165: POP
// end ; end_of_file
17166: PPOPN 9
17168: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17169: LD_INT 0
17171: PPUSH
17172: PPUSH
17173: PPUSH
17174: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17175: LD_VAR 0 1
17179: PPUSH
17180: CALL_OW 264
17184: PUSH
17185: LD_INT 91
17187: EQUAL
17188: IFFALSE 17260
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17190: LD_INT 68
17192: PPUSH
17193: LD_VAR 0 1
17197: PPUSH
17198: CALL_OW 255
17202: PPUSH
17203: CALL_OW 321
17207: PUSH
17208: LD_INT 2
17210: EQUAL
17211: IFFALSE 17223
// eff := 70 else
17213: LD_ADDR_VAR 0 4
17217: PUSH
17218: LD_INT 70
17220: ST_TO_ADDR
17221: GO 17231
// eff := 30 ;
17223: LD_ADDR_VAR 0 4
17227: PUSH
17228: LD_INT 30
17230: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17231: LD_VAR 0 1
17235: PPUSH
17236: CALL_OW 250
17240: PPUSH
17241: LD_VAR 0 1
17245: PPUSH
17246: CALL_OW 251
17250: PPUSH
17251: LD_VAR 0 4
17255: PPUSH
17256: CALL_OW 495
// end ; end ;
17260: LD_VAR 0 2
17264: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17265: LD_INT 0
17267: PPUSH
// end ;
17268: LD_VAR 0 4
17272: RET
// export function SOS_Command ( cmd ) ; begin
17273: LD_INT 0
17275: PPUSH
// end ;
17276: LD_VAR 0 2
17280: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17281: LD_INT 0
17283: PPUSH
// end ;
17284: LD_VAR 0 6
17288: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
17289: LD_INT 0
17291: PPUSH
17292: PPUSH
// if not vehicle or not factory then
17293: LD_VAR 0 1
17297: NOT
17298: PUSH
17299: LD_VAR 0 2
17303: NOT
17304: OR
17305: IFFALSE 17309
// exit ;
17307: GO 17540
// if factoryWaypoints >= factory then
17309: LD_EXP 61
17313: PUSH
17314: LD_VAR 0 2
17318: GREATEREQUAL
17319: IFFALSE 17540
// if factoryWaypoints [ factory ] then
17321: LD_EXP 61
17325: PUSH
17326: LD_VAR 0 2
17330: ARRAY
17331: IFFALSE 17540
// begin if GetControl ( vehicle ) = control_manual then
17333: LD_VAR 0 1
17337: PPUSH
17338: CALL_OW 263
17342: PUSH
17343: LD_INT 1
17345: EQUAL
17346: IFFALSE 17427
// begin driver := IsDrivenBy ( vehicle ) ;
17348: LD_ADDR_VAR 0 4
17352: PUSH
17353: LD_VAR 0 1
17357: PPUSH
17358: CALL_OW 311
17362: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17363: LD_VAR 0 4
17367: PPUSH
17368: LD_EXP 61
17372: PUSH
17373: LD_VAR 0 2
17377: ARRAY
17378: PUSH
17379: LD_INT 3
17381: ARRAY
17382: PPUSH
17383: LD_EXP 61
17387: PUSH
17388: LD_VAR 0 2
17392: ARRAY
17393: PUSH
17394: LD_INT 4
17396: ARRAY
17397: PPUSH
17398: CALL_OW 171
// AddComExitVehicle ( driver ) ;
17402: LD_VAR 0 4
17406: PPUSH
17407: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
17411: LD_VAR 0 4
17415: PPUSH
17416: LD_VAR 0 2
17420: PPUSH
17421: CALL_OW 180
// end else
17425: GO 17540
// if GetControl ( vehicle ) = control_remote then
17427: LD_VAR 0 1
17431: PPUSH
17432: CALL_OW 263
17436: PUSH
17437: LD_INT 2
17439: EQUAL
17440: IFFALSE 17501
// begin wait ( 0 0$2 ) ;
17442: LD_INT 70
17444: PPUSH
17445: CALL_OW 67
// if Connect ( vehicle ) then
17449: LD_VAR 0 1
17453: PPUSH
17454: CALL 30473 0 1
17458: IFFALSE 17499
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17460: LD_VAR 0 1
17464: PPUSH
17465: LD_EXP 61
17469: PUSH
17470: LD_VAR 0 2
17474: ARRAY
17475: PUSH
17476: LD_INT 3
17478: ARRAY
17479: PPUSH
17480: LD_EXP 61
17484: PUSH
17485: LD_VAR 0 2
17489: ARRAY
17490: PUSH
17491: LD_INT 4
17493: ARRAY
17494: PPUSH
17495: CALL_OW 171
// end else
17499: GO 17540
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17501: LD_VAR 0 1
17505: PPUSH
17506: LD_EXP 61
17510: PUSH
17511: LD_VAR 0 2
17515: ARRAY
17516: PUSH
17517: LD_INT 3
17519: ARRAY
17520: PPUSH
17521: LD_EXP 61
17525: PUSH
17526: LD_VAR 0 2
17530: ARRAY
17531: PUSH
17532: LD_INT 4
17534: ARRAY
17535: PPUSH
17536: CALL_OW 171
// end ; end ;
17540: LD_VAR 0 3
17544: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
17545: LD_INT 0
17547: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
17548: LD_VAR 0 1
17552: PUSH
17553: LD_INT 250
17555: EQUAL
17556: PUSH
17557: LD_VAR 0 2
17561: PPUSH
17562: CALL_OW 264
17566: PUSH
17567: LD_INT 81
17569: EQUAL
17570: AND
17571: IFFALSE 17592
// MinerPlaceMine ( unit , x , y ) ;
17573: LD_VAR 0 2
17577: PPUSH
17578: LD_VAR 0 4
17582: PPUSH
17583: LD_VAR 0 5
17587: PPUSH
17588: CALL 20407 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
17592: LD_VAR 0 1
17596: PUSH
17597: LD_INT 251
17599: EQUAL
17600: PUSH
17601: LD_VAR 0 2
17605: PPUSH
17606: CALL_OW 264
17610: PUSH
17611: LD_INT 81
17613: EQUAL
17614: AND
17615: IFFALSE 17636
// MinerDetonateMine ( unit , x , y ) ;
17617: LD_VAR 0 2
17621: PPUSH
17622: LD_VAR 0 4
17626: PPUSH
17627: LD_VAR 0 5
17631: PPUSH
17632: CALL 20682 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
17636: LD_VAR 0 1
17640: PUSH
17641: LD_INT 252
17643: EQUAL
17644: PUSH
17645: LD_VAR 0 2
17649: PPUSH
17650: CALL_OW 264
17654: PUSH
17655: LD_INT 81
17657: EQUAL
17658: AND
17659: IFFALSE 17680
// MinerCreateMinefield ( unit , x , y ) ;
17661: LD_VAR 0 2
17665: PPUSH
17666: LD_VAR 0 4
17670: PPUSH
17671: LD_VAR 0 5
17675: PPUSH
17676: CALL 21099 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
17680: LD_VAR 0 1
17684: PUSH
17685: LD_INT 253
17687: EQUAL
17688: PUSH
17689: LD_VAR 0 2
17693: PPUSH
17694: CALL_OW 257
17698: PUSH
17699: LD_INT 5
17701: EQUAL
17702: AND
17703: IFFALSE 17724
// ComBinocular ( unit , x , y ) ;
17705: LD_VAR 0 2
17709: PPUSH
17710: LD_VAR 0 4
17714: PPUSH
17715: LD_VAR 0 5
17719: PPUSH
17720: CALL 21468 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
17724: LD_VAR 0 1
17728: PUSH
17729: LD_INT 254
17731: EQUAL
17732: PUSH
17733: LD_VAR 0 2
17737: PPUSH
17738: CALL_OW 264
17742: PUSH
17743: LD_INT 99
17745: EQUAL
17746: AND
17747: PUSH
17748: LD_VAR 0 3
17752: PPUSH
17753: CALL_OW 263
17757: PUSH
17758: LD_INT 3
17760: EQUAL
17761: AND
17762: IFFALSE 17778
// HackDestroyVehicle ( unit , selectedUnit ) ;
17764: LD_VAR 0 2
17768: PPUSH
17769: LD_VAR 0 3
17773: PPUSH
17774: CALL 19771 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
17778: LD_VAR 0 1
17782: PUSH
17783: LD_INT 255
17785: EQUAL
17786: PUSH
17787: LD_VAR 0 2
17791: PPUSH
17792: CALL_OW 264
17796: PUSH
17797: LD_INT 14
17799: PUSH
17800: LD_INT 53
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: IN
17807: AND
17808: PUSH
17809: LD_VAR 0 4
17813: PPUSH
17814: LD_VAR 0 5
17818: PPUSH
17819: CALL_OW 488
17823: AND
17824: IFFALSE 17848
// CutTreeXYR ( unit , x , y , 12 ) ;
17826: LD_VAR 0 2
17830: PPUSH
17831: LD_VAR 0 4
17835: PPUSH
17836: LD_VAR 0 5
17840: PPUSH
17841: LD_INT 12
17843: PPUSH
17844: CALL 17943 0 4
// if cmd = 256 then
17848: LD_VAR 0 1
17852: PUSH
17853: LD_INT 256
17855: EQUAL
17856: IFFALSE 17877
// SetFactoryWaypoint ( unit , x , y ) ;
17858: LD_VAR 0 2
17862: PPUSH
17863: LD_VAR 0 4
17867: PPUSH
17868: LD_VAR 0 5
17872: PPUSH
17873: CALL 15858 0 3
// if cmd = 257 then
17877: LD_VAR 0 1
17881: PUSH
17882: LD_INT 257
17884: EQUAL
17885: IFFALSE 17906
// SetWarehouseGatheringPoint ( unit , x , y ) ;
17887: LD_VAR 0 2
17891: PPUSH
17892: LD_VAR 0 4
17896: PPUSH
17897: LD_VAR 0 5
17901: PPUSH
17902: CALL 16220 0 3
// if cmd = 258 then
17906: LD_VAR 0 1
17910: PUSH
17911: LD_INT 258
17913: EQUAL
17914: IFFALSE 17938
// BurnTreeXYR ( unit , x , y , 8 ) ;
17916: LD_VAR 0 2
17920: PPUSH
17921: LD_VAR 0 4
17925: PPUSH
17926: LD_VAR 0 5
17930: PPUSH
17931: LD_INT 8
17933: PPUSH
17934: CALL 18337 0 4
// end ;
17938: LD_VAR 0 6
17942: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17943: LD_INT 0
17945: PPUSH
17946: PPUSH
17947: PPUSH
17948: PPUSH
17949: PPUSH
17950: PPUSH
17951: PPUSH
17952: PPUSH
17953: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
17954: LD_VAR 0 1
17958: PPUSH
17959: CALL_OW 302
17963: NOT
17964: PUSH
17965: LD_VAR 0 2
17969: PPUSH
17970: LD_VAR 0 3
17974: PPUSH
17975: CALL_OW 488
17979: NOT
17980: OR
17981: PUSH
17982: LD_VAR 0 4
17986: NOT
17987: OR
17988: IFFALSE 17992
// exit ;
17990: GO 18332
// list := [ ] ;
17992: LD_ADDR_VAR 0 13
17996: PUSH
17997: EMPTY
17998: ST_TO_ADDR
// if x - r < 0 then
17999: LD_VAR 0 2
18003: PUSH
18004: LD_VAR 0 4
18008: MINUS
18009: PUSH
18010: LD_INT 0
18012: LESS
18013: IFFALSE 18025
// min_x := 0 else
18015: LD_ADDR_VAR 0 7
18019: PUSH
18020: LD_INT 0
18022: ST_TO_ADDR
18023: GO 18041
// min_x := x - r ;
18025: LD_ADDR_VAR 0 7
18029: PUSH
18030: LD_VAR 0 2
18034: PUSH
18035: LD_VAR 0 4
18039: MINUS
18040: ST_TO_ADDR
// if y - r < 0 then
18041: LD_VAR 0 3
18045: PUSH
18046: LD_VAR 0 4
18050: MINUS
18051: PUSH
18052: LD_INT 0
18054: LESS
18055: IFFALSE 18067
// min_y := 0 else
18057: LD_ADDR_VAR 0 8
18061: PUSH
18062: LD_INT 0
18064: ST_TO_ADDR
18065: GO 18083
// min_y := y - r ;
18067: LD_ADDR_VAR 0 8
18071: PUSH
18072: LD_VAR 0 3
18076: PUSH
18077: LD_VAR 0 4
18081: MINUS
18082: ST_TO_ADDR
// max_x := x + r ;
18083: LD_ADDR_VAR 0 9
18087: PUSH
18088: LD_VAR 0 2
18092: PUSH
18093: LD_VAR 0 4
18097: PLUS
18098: ST_TO_ADDR
// max_y := y + r ;
18099: LD_ADDR_VAR 0 10
18103: PUSH
18104: LD_VAR 0 3
18108: PUSH
18109: LD_VAR 0 4
18113: PLUS
18114: ST_TO_ADDR
// for _x = min_x to max_x do
18115: LD_ADDR_VAR 0 11
18119: PUSH
18120: DOUBLE
18121: LD_VAR 0 7
18125: DEC
18126: ST_TO_ADDR
18127: LD_VAR 0 9
18131: PUSH
18132: FOR_TO
18133: IFFALSE 18250
// for _y = min_y to max_y do
18135: LD_ADDR_VAR 0 12
18139: PUSH
18140: DOUBLE
18141: LD_VAR 0 8
18145: DEC
18146: ST_TO_ADDR
18147: LD_VAR 0 10
18151: PUSH
18152: FOR_TO
18153: IFFALSE 18246
// begin if not ValidHex ( _x , _y ) then
18155: LD_VAR 0 11
18159: PPUSH
18160: LD_VAR 0 12
18164: PPUSH
18165: CALL_OW 488
18169: NOT
18170: IFFALSE 18174
// continue ;
18172: GO 18152
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18174: LD_VAR 0 11
18178: PPUSH
18179: LD_VAR 0 12
18183: PPUSH
18184: CALL_OW 351
18188: PUSH
18189: LD_VAR 0 11
18193: PPUSH
18194: LD_VAR 0 12
18198: PPUSH
18199: CALL_OW 554
18203: AND
18204: IFFALSE 18244
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18206: LD_ADDR_VAR 0 13
18210: PUSH
18211: LD_VAR 0 13
18215: PPUSH
18216: LD_VAR 0 13
18220: PUSH
18221: LD_INT 1
18223: PLUS
18224: PPUSH
18225: LD_VAR 0 11
18229: PUSH
18230: LD_VAR 0 12
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PPUSH
18239: CALL_OW 2
18243: ST_TO_ADDR
// end ;
18244: GO 18152
18246: POP
18247: POP
18248: GO 18132
18250: POP
18251: POP
// if not list then
18252: LD_VAR 0 13
18256: NOT
18257: IFFALSE 18261
// exit ;
18259: GO 18332
// for i in list do
18261: LD_ADDR_VAR 0 6
18265: PUSH
18266: LD_VAR 0 13
18270: PUSH
18271: FOR_IN
18272: IFFALSE 18330
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18274: LD_VAR 0 1
18278: PPUSH
18279: LD_STRING M
18281: PUSH
18282: LD_VAR 0 6
18286: PUSH
18287: LD_INT 1
18289: ARRAY
18290: PUSH
18291: LD_VAR 0 6
18295: PUSH
18296: LD_INT 2
18298: ARRAY
18299: PUSH
18300: LD_INT 0
18302: PUSH
18303: LD_INT 0
18305: PUSH
18306: LD_INT 0
18308: PUSH
18309: LD_INT 0
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: PUSH
18321: EMPTY
18322: LIST
18323: PPUSH
18324: CALL_OW 447
18328: GO 18271
18330: POP
18331: POP
// end ;
18332: LD_VAR 0 5
18336: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18337: LD_INT 0
18339: PPUSH
18340: PPUSH
18341: PPUSH
18342: PPUSH
18343: PPUSH
18344: PPUSH
18345: PPUSH
18346: PPUSH
18347: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
18348: LD_VAR 0 1
18352: PPUSH
18353: CALL_OW 302
18357: NOT
18358: PUSH
18359: LD_VAR 0 2
18363: PPUSH
18364: LD_VAR 0 3
18368: PPUSH
18369: CALL_OW 488
18373: NOT
18374: OR
18375: PUSH
18376: LD_VAR 0 4
18380: NOT
18381: OR
18382: IFFALSE 18386
// exit ;
18384: GO 18725
// list := [ ] ;
18386: LD_ADDR_VAR 0 13
18390: PUSH
18391: EMPTY
18392: ST_TO_ADDR
// if x - r < 0 then
18393: LD_VAR 0 2
18397: PUSH
18398: LD_VAR 0 4
18402: MINUS
18403: PUSH
18404: LD_INT 0
18406: LESS
18407: IFFALSE 18419
// min_x := 0 else
18409: LD_ADDR_VAR 0 7
18413: PUSH
18414: LD_INT 0
18416: ST_TO_ADDR
18417: GO 18435
// min_x := x - r ;
18419: LD_ADDR_VAR 0 7
18423: PUSH
18424: LD_VAR 0 2
18428: PUSH
18429: LD_VAR 0 4
18433: MINUS
18434: ST_TO_ADDR
// if y - r < 0 then
18435: LD_VAR 0 3
18439: PUSH
18440: LD_VAR 0 4
18444: MINUS
18445: PUSH
18446: LD_INT 0
18448: LESS
18449: IFFALSE 18461
// min_y := 0 else
18451: LD_ADDR_VAR 0 8
18455: PUSH
18456: LD_INT 0
18458: ST_TO_ADDR
18459: GO 18477
// min_y := y - r ;
18461: LD_ADDR_VAR 0 8
18465: PUSH
18466: LD_VAR 0 3
18470: PUSH
18471: LD_VAR 0 4
18475: MINUS
18476: ST_TO_ADDR
// max_x := x + r ;
18477: LD_ADDR_VAR 0 9
18481: PUSH
18482: LD_VAR 0 2
18486: PUSH
18487: LD_VAR 0 4
18491: PLUS
18492: ST_TO_ADDR
// max_y := y + r ;
18493: LD_ADDR_VAR 0 10
18497: PUSH
18498: LD_VAR 0 3
18502: PUSH
18503: LD_VAR 0 4
18507: PLUS
18508: ST_TO_ADDR
// for _x = min_x to max_x do
18509: LD_ADDR_VAR 0 11
18513: PUSH
18514: DOUBLE
18515: LD_VAR 0 7
18519: DEC
18520: ST_TO_ADDR
18521: LD_VAR 0 9
18525: PUSH
18526: FOR_TO
18527: IFFALSE 18644
// for _y = min_y to max_y do
18529: LD_ADDR_VAR 0 12
18533: PUSH
18534: DOUBLE
18535: LD_VAR 0 8
18539: DEC
18540: ST_TO_ADDR
18541: LD_VAR 0 10
18545: PUSH
18546: FOR_TO
18547: IFFALSE 18640
// begin if not ValidHex ( _x , _y ) then
18549: LD_VAR 0 11
18553: PPUSH
18554: LD_VAR 0 12
18558: PPUSH
18559: CALL_OW 488
18563: NOT
18564: IFFALSE 18568
// continue ;
18566: GO 18546
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18568: LD_VAR 0 11
18572: PPUSH
18573: LD_VAR 0 12
18577: PPUSH
18578: CALL_OW 351
18582: PUSH
18583: LD_VAR 0 11
18587: PPUSH
18588: LD_VAR 0 12
18592: PPUSH
18593: CALL_OW 554
18597: AND
18598: IFFALSE 18638
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18600: LD_ADDR_VAR 0 13
18604: PUSH
18605: LD_VAR 0 13
18609: PPUSH
18610: LD_VAR 0 13
18614: PUSH
18615: LD_INT 1
18617: PLUS
18618: PPUSH
18619: LD_VAR 0 11
18623: PUSH
18624: LD_VAR 0 12
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PPUSH
18633: CALL_OW 2
18637: ST_TO_ADDR
// end ;
18638: GO 18546
18640: POP
18641: POP
18642: GO 18526
18644: POP
18645: POP
// if not list then
18646: LD_VAR 0 13
18650: NOT
18651: IFFALSE 18655
// exit ;
18653: GO 18725
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
18655: LD_ADDR_VAR 0 13
18659: PUSH
18660: LD_VAR 0 1
18664: PPUSH
18665: LD_VAR 0 13
18669: PPUSH
18670: LD_INT 1
18672: PPUSH
18673: LD_INT 1
18675: PPUSH
18676: CALL 27560 0 4
18680: ST_TO_ADDR
// for i in list do
18681: LD_ADDR_VAR 0 6
18685: PUSH
18686: LD_VAR 0 13
18690: PUSH
18691: FOR_IN
18692: IFFALSE 18723
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
18694: LD_VAR 0 1
18698: PPUSH
18699: LD_VAR 0 6
18703: PUSH
18704: LD_INT 1
18706: ARRAY
18707: PPUSH
18708: LD_VAR 0 6
18712: PUSH
18713: LD_INT 2
18715: ARRAY
18716: PPUSH
18717: CALL_OW 176
18721: GO 18691
18723: POP
18724: POP
// end ;
18725: LD_VAR 0 5
18729: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18730: LD_EXP 64
18734: NOT
18735: IFFALSE 18785
18737: GO 18739
18739: DISABLE
// begin initHack := true ;
18740: LD_ADDR_EXP 64
18744: PUSH
18745: LD_INT 1
18747: ST_TO_ADDR
// hackTanks := [ ] ;
18748: LD_ADDR_EXP 65
18752: PUSH
18753: EMPTY
18754: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18755: LD_ADDR_EXP 66
18759: PUSH
18760: EMPTY
18761: ST_TO_ADDR
// hackLimit := 3 ;
18762: LD_ADDR_EXP 67
18766: PUSH
18767: LD_INT 3
18769: ST_TO_ADDR
// hackDist := 12 ;
18770: LD_ADDR_EXP 68
18774: PUSH
18775: LD_INT 12
18777: ST_TO_ADDR
// hackCounter := [ ] ;
18778: LD_ADDR_EXP 69
18782: PUSH
18783: EMPTY
18784: ST_TO_ADDR
// end ;
18785: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18786: LD_EXP 64
18790: PUSH
18791: LD_INT 34
18793: PUSH
18794: LD_INT 99
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PPUSH
18801: CALL_OW 69
18805: AND
18806: IFFALSE 19059
18808: GO 18810
18810: DISABLE
18811: LD_INT 0
18813: PPUSH
18814: PPUSH
// begin enable ;
18815: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18816: LD_ADDR_VAR 0 1
18820: PUSH
18821: LD_INT 34
18823: PUSH
18824: LD_INT 99
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: PPUSH
18831: CALL_OW 69
18835: PUSH
18836: FOR_IN
18837: IFFALSE 19057
// begin if not i in hackTanks then
18839: LD_VAR 0 1
18843: PUSH
18844: LD_EXP 65
18848: IN
18849: NOT
18850: IFFALSE 18933
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18852: LD_ADDR_EXP 65
18856: PUSH
18857: LD_EXP 65
18861: PPUSH
18862: LD_EXP 65
18866: PUSH
18867: LD_INT 1
18869: PLUS
18870: PPUSH
18871: LD_VAR 0 1
18875: PPUSH
18876: CALL_OW 1
18880: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18881: LD_ADDR_EXP 66
18885: PUSH
18886: LD_EXP 66
18890: PPUSH
18891: LD_EXP 66
18895: PUSH
18896: LD_INT 1
18898: PLUS
18899: PPUSH
18900: EMPTY
18901: PPUSH
18902: CALL_OW 1
18906: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18907: LD_ADDR_EXP 69
18911: PUSH
18912: LD_EXP 69
18916: PPUSH
18917: LD_EXP 69
18921: PUSH
18922: LD_INT 1
18924: PLUS
18925: PPUSH
18926: EMPTY
18927: PPUSH
18928: CALL_OW 1
18932: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18933: LD_VAR 0 1
18937: PPUSH
18938: CALL_OW 302
18942: NOT
18943: IFFALSE 18956
// begin HackUnlinkAll ( i ) ;
18945: LD_VAR 0 1
18949: PPUSH
18950: CALL 19062 0 1
// continue ;
18954: GO 18836
// end ; HackCheckCapturedStatus ( i ) ;
18956: LD_VAR 0 1
18960: PPUSH
18961: CALL 19505 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18965: LD_ADDR_VAR 0 2
18969: PUSH
18970: LD_INT 81
18972: PUSH
18973: LD_VAR 0 1
18977: PPUSH
18978: CALL_OW 255
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: LD_INT 33
18989: PUSH
18990: LD_INT 3
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 91
18999: PUSH
19000: LD_VAR 0 1
19004: PUSH
19005: LD_EXP 68
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 50
19017: PUSH
19018: EMPTY
19019: LIST
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: PPUSH
19027: CALL_OW 69
19031: ST_TO_ADDR
// if not tmp then
19032: LD_VAR 0 2
19036: NOT
19037: IFFALSE 19041
// continue ;
19039: GO 18836
// HackLink ( i , tmp ) ;
19041: LD_VAR 0 1
19045: PPUSH
19046: LD_VAR 0 2
19050: PPUSH
19051: CALL 19198 0 2
// end ;
19055: GO 18836
19057: POP
19058: POP
// end ;
19059: PPOPN 2
19061: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19062: LD_INT 0
19064: PPUSH
19065: PPUSH
19066: PPUSH
// if not hack in hackTanks then
19067: LD_VAR 0 1
19071: PUSH
19072: LD_EXP 65
19076: IN
19077: NOT
19078: IFFALSE 19082
// exit ;
19080: GO 19193
// index := GetElementIndex ( hackTanks , hack ) ;
19082: LD_ADDR_VAR 0 4
19086: PUSH
19087: LD_EXP 65
19091: PPUSH
19092: LD_VAR 0 1
19096: PPUSH
19097: CALL 26857 0 2
19101: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19102: LD_EXP 66
19106: PUSH
19107: LD_VAR 0 4
19111: ARRAY
19112: IFFALSE 19193
// begin for i in hackTanksCaptured [ index ] do
19114: LD_ADDR_VAR 0 3
19118: PUSH
19119: LD_EXP 66
19123: PUSH
19124: LD_VAR 0 4
19128: ARRAY
19129: PUSH
19130: FOR_IN
19131: IFFALSE 19157
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19133: LD_VAR 0 3
19137: PUSH
19138: LD_INT 1
19140: ARRAY
19141: PPUSH
19142: LD_VAR 0 3
19146: PUSH
19147: LD_INT 2
19149: ARRAY
19150: PPUSH
19151: CALL_OW 235
19155: GO 19130
19157: POP
19158: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19159: LD_ADDR_EXP 66
19163: PUSH
19164: LD_EXP 66
19168: PPUSH
19169: LD_VAR 0 4
19173: PPUSH
19174: EMPTY
19175: PPUSH
19176: CALL_OW 1
19180: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19181: LD_VAR 0 1
19185: PPUSH
19186: LD_INT 0
19188: PPUSH
19189: CALL_OW 505
// end ; end ;
19193: LD_VAR 0 2
19197: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19198: LD_INT 0
19200: PPUSH
19201: PPUSH
19202: PPUSH
// if not hack in hackTanks or not vehicles then
19203: LD_VAR 0 1
19207: PUSH
19208: LD_EXP 65
19212: IN
19213: NOT
19214: PUSH
19215: LD_VAR 0 2
19219: NOT
19220: OR
19221: IFFALSE 19225
// exit ;
19223: GO 19500
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19225: LD_ADDR_VAR 0 2
19229: PUSH
19230: LD_VAR 0 1
19234: PPUSH
19235: LD_VAR 0 2
19239: PPUSH
19240: LD_INT 1
19242: PPUSH
19243: LD_INT 1
19245: PPUSH
19246: CALL 27507 0 4
19250: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19251: LD_ADDR_VAR 0 5
19255: PUSH
19256: LD_EXP 65
19260: PPUSH
19261: LD_VAR 0 1
19265: PPUSH
19266: CALL 26857 0 2
19270: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19271: LD_EXP 66
19275: PUSH
19276: LD_VAR 0 5
19280: ARRAY
19281: PUSH
19282: LD_EXP 67
19286: LESS
19287: IFFALSE 19476
// begin for i := 1 to vehicles do
19289: LD_ADDR_VAR 0 4
19293: PUSH
19294: DOUBLE
19295: LD_INT 1
19297: DEC
19298: ST_TO_ADDR
19299: LD_VAR 0 2
19303: PUSH
19304: FOR_TO
19305: IFFALSE 19474
// begin if hackTanksCaptured [ index ] = hackLimit then
19307: LD_EXP 66
19311: PUSH
19312: LD_VAR 0 5
19316: ARRAY
19317: PUSH
19318: LD_EXP 67
19322: EQUAL
19323: IFFALSE 19327
// break ;
19325: GO 19474
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19327: LD_ADDR_EXP 69
19331: PUSH
19332: LD_EXP 69
19336: PPUSH
19337: LD_VAR 0 5
19341: PPUSH
19342: LD_EXP 69
19346: PUSH
19347: LD_VAR 0 5
19351: ARRAY
19352: PUSH
19353: LD_INT 1
19355: PLUS
19356: PPUSH
19357: CALL_OW 1
19361: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19362: LD_ADDR_EXP 66
19366: PUSH
19367: LD_EXP 66
19371: PPUSH
19372: LD_VAR 0 5
19376: PUSH
19377: LD_EXP 66
19381: PUSH
19382: LD_VAR 0 5
19386: ARRAY
19387: PUSH
19388: LD_INT 1
19390: PLUS
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PPUSH
19396: LD_VAR 0 2
19400: PUSH
19401: LD_VAR 0 4
19405: ARRAY
19406: PUSH
19407: LD_VAR 0 2
19411: PUSH
19412: LD_VAR 0 4
19416: ARRAY
19417: PPUSH
19418: CALL_OW 255
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PPUSH
19427: CALL 27072 0 3
19431: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19432: LD_VAR 0 2
19436: PUSH
19437: LD_VAR 0 4
19441: ARRAY
19442: PPUSH
19443: LD_VAR 0 1
19447: PPUSH
19448: CALL_OW 255
19452: PPUSH
19453: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19457: LD_VAR 0 2
19461: PUSH
19462: LD_VAR 0 4
19466: ARRAY
19467: PPUSH
19468: CALL_OW 141
// end ;
19472: GO 19304
19474: POP
19475: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19476: LD_VAR 0 1
19480: PPUSH
19481: LD_EXP 66
19485: PUSH
19486: LD_VAR 0 5
19490: ARRAY
19491: PUSH
19492: LD_INT 0
19494: PLUS
19495: PPUSH
19496: CALL_OW 505
// end ;
19500: LD_VAR 0 3
19504: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19505: LD_INT 0
19507: PPUSH
19508: PPUSH
19509: PPUSH
19510: PPUSH
// if not hack in hackTanks then
19511: LD_VAR 0 1
19515: PUSH
19516: LD_EXP 65
19520: IN
19521: NOT
19522: IFFALSE 19526
// exit ;
19524: GO 19766
// index := GetElementIndex ( hackTanks , hack ) ;
19526: LD_ADDR_VAR 0 4
19530: PUSH
19531: LD_EXP 65
19535: PPUSH
19536: LD_VAR 0 1
19540: PPUSH
19541: CALL 26857 0 2
19545: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19546: LD_ADDR_VAR 0 3
19550: PUSH
19551: DOUBLE
19552: LD_EXP 66
19556: PUSH
19557: LD_VAR 0 4
19561: ARRAY
19562: INC
19563: ST_TO_ADDR
19564: LD_INT 1
19566: PUSH
19567: FOR_DOWNTO
19568: IFFALSE 19740
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19570: LD_ADDR_VAR 0 5
19574: PUSH
19575: LD_EXP 66
19579: PUSH
19580: LD_VAR 0 4
19584: ARRAY
19585: PUSH
19586: LD_VAR 0 3
19590: ARRAY
19591: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19592: LD_VAR 0 5
19596: PUSH
19597: LD_INT 1
19599: ARRAY
19600: PPUSH
19601: CALL_OW 302
19605: NOT
19606: PUSH
19607: LD_VAR 0 5
19611: PUSH
19612: LD_INT 1
19614: ARRAY
19615: PPUSH
19616: CALL_OW 255
19620: PUSH
19621: LD_VAR 0 1
19625: PPUSH
19626: CALL_OW 255
19630: NONEQUAL
19631: OR
19632: IFFALSE 19738
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19634: LD_VAR 0 5
19638: PUSH
19639: LD_INT 1
19641: ARRAY
19642: PPUSH
19643: CALL_OW 305
19647: PUSH
19648: LD_VAR 0 5
19652: PUSH
19653: LD_INT 1
19655: ARRAY
19656: PPUSH
19657: CALL_OW 255
19661: PUSH
19662: LD_VAR 0 1
19666: PPUSH
19667: CALL_OW 255
19671: EQUAL
19672: AND
19673: IFFALSE 19697
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19675: LD_VAR 0 5
19679: PUSH
19680: LD_INT 1
19682: ARRAY
19683: PPUSH
19684: LD_VAR 0 5
19688: PUSH
19689: LD_INT 2
19691: ARRAY
19692: PPUSH
19693: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19697: LD_ADDR_EXP 66
19701: PUSH
19702: LD_EXP 66
19706: PPUSH
19707: LD_VAR 0 4
19711: PPUSH
19712: LD_EXP 66
19716: PUSH
19717: LD_VAR 0 4
19721: ARRAY
19722: PPUSH
19723: LD_VAR 0 3
19727: PPUSH
19728: CALL_OW 3
19732: PPUSH
19733: CALL_OW 1
19737: ST_TO_ADDR
// end ; end ;
19738: GO 19567
19740: POP
19741: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19742: LD_VAR 0 1
19746: PPUSH
19747: LD_EXP 66
19751: PUSH
19752: LD_VAR 0 4
19756: ARRAY
19757: PUSH
19758: LD_INT 0
19760: PLUS
19761: PPUSH
19762: CALL_OW 505
// end ;
19766: LD_VAR 0 2
19770: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19771: LD_INT 0
19773: PPUSH
19774: PPUSH
19775: PPUSH
19776: PPUSH
// if not hack in hackTanks then
19777: LD_VAR 0 1
19781: PUSH
19782: LD_EXP 65
19786: IN
19787: NOT
19788: IFFALSE 19792
// exit ;
19790: GO 19877
// index := GetElementIndex ( hackTanks , hack ) ;
19792: LD_ADDR_VAR 0 5
19796: PUSH
19797: LD_EXP 65
19801: PPUSH
19802: LD_VAR 0 1
19806: PPUSH
19807: CALL 26857 0 2
19811: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19812: LD_ADDR_VAR 0 4
19816: PUSH
19817: DOUBLE
19818: LD_INT 1
19820: DEC
19821: ST_TO_ADDR
19822: LD_EXP 66
19826: PUSH
19827: LD_VAR 0 5
19831: ARRAY
19832: PUSH
19833: FOR_TO
19834: IFFALSE 19875
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19836: LD_EXP 66
19840: PUSH
19841: LD_VAR 0 5
19845: ARRAY
19846: PUSH
19847: LD_VAR 0 4
19851: ARRAY
19852: PUSH
19853: LD_INT 1
19855: ARRAY
19856: PUSH
19857: LD_VAR 0 2
19861: EQUAL
19862: IFFALSE 19873
// KillUnit ( vehicle ) ;
19864: LD_VAR 0 2
19868: PPUSH
19869: CALL_OW 66
19873: GO 19833
19875: POP
19876: POP
// end ;
19877: LD_VAR 0 3
19881: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19882: LD_EXP 70
19886: NOT
19887: IFFALSE 19922
19889: GO 19891
19891: DISABLE
// begin initMiner := true ;
19892: LD_ADDR_EXP 70
19896: PUSH
19897: LD_INT 1
19899: ST_TO_ADDR
// minersList := [ ] ;
19900: LD_ADDR_EXP 71
19904: PUSH
19905: EMPTY
19906: ST_TO_ADDR
// minerMinesList := [ ] ;
19907: LD_ADDR_EXP 72
19911: PUSH
19912: EMPTY
19913: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
19914: LD_ADDR_EXP 73
19918: PUSH
19919: LD_INT 5
19921: ST_TO_ADDR
// end ;
19922: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
19923: LD_EXP 70
19927: PUSH
19928: LD_INT 34
19930: PUSH
19931: LD_INT 81
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PPUSH
19938: CALL_OW 69
19942: AND
19943: IFFALSE 20404
19945: GO 19947
19947: DISABLE
19948: LD_INT 0
19950: PPUSH
19951: PPUSH
19952: PPUSH
19953: PPUSH
// begin enable ;
19954: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
19955: LD_ADDR_VAR 0 1
19959: PUSH
19960: LD_INT 34
19962: PUSH
19963: LD_INT 81
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PPUSH
19970: CALL_OW 69
19974: PUSH
19975: FOR_IN
19976: IFFALSE 20048
// begin if not i in minersList then
19978: LD_VAR 0 1
19982: PUSH
19983: LD_EXP 71
19987: IN
19988: NOT
19989: IFFALSE 20046
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
19991: LD_ADDR_EXP 71
19995: PUSH
19996: LD_EXP 71
20000: PPUSH
20001: LD_EXP 71
20005: PUSH
20006: LD_INT 1
20008: PLUS
20009: PPUSH
20010: LD_VAR 0 1
20014: PPUSH
20015: CALL_OW 1
20019: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20020: LD_ADDR_EXP 72
20024: PUSH
20025: LD_EXP 72
20029: PPUSH
20030: LD_EXP 72
20034: PUSH
20035: LD_INT 1
20037: PLUS
20038: PPUSH
20039: EMPTY
20040: PPUSH
20041: CALL_OW 1
20045: ST_TO_ADDR
// end end ;
20046: GO 19975
20048: POP
20049: POP
// for i := minerMinesList downto 1 do
20050: LD_ADDR_VAR 0 1
20054: PUSH
20055: DOUBLE
20056: LD_EXP 72
20060: INC
20061: ST_TO_ADDR
20062: LD_INT 1
20064: PUSH
20065: FOR_DOWNTO
20066: IFFALSE 20402
// begin if IsLive ( minersList [ i ] ) then
20068: LD_EXP 71
20072: PUSH
20073: LD_VAR 0 1
20077: ARRAY
20078: PPUSH
20079: CALL_OW 300
20083: IFFALSE 20111
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20085: LD_EXP 71
20089: PUSH
20090: LD_VAR 0 1
20094: ARRAY
20095: PPUSH
20096: LD_EXP 72
20100: PUSH
20101: LD_VAR 0 1
20105: ARRAY
20106: PPUSH
20107: CALL_OW 505
// if not minerMinesList [ i ] then
20111: LD_EXP 72
20115: PUSH
20116: LD_VAR 0 1
20120: ARRAY
20121: NOT
20122: IFFALSE 20126
// continue ;
20124: GO 20065
// for j := minerMinesList [ i ] downto 1 do
20126: LD_ADDR_VAR 0 2
20130: PUSH
20131: DOUBLE
20132: LD_EXP 72
20136: PUSH
20137: LD_VAR 0 1
20141: ARRAY
20142: INC
20143: ST_TO_ADDR
20144: LD_INT 1
20146: PUSH
20147: FOR_DOWNTO
20148: IFFALSE 20398
// begin side := GetSide ( minersList [ i ] ) ;
20150: LD_ADDR_VAR 0 3
20154: PUSH
20155: LD_EXP 71
20159: PUSH
20160: LD_VAR 0 1
20164: ARRAY
20165: PPUSH
20166: CALL_OW 255
20170: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20171: LD_ADDR_VAR 0 4
20175: PUSH
20176: LD_EXP 72
20180: PUSH
20181: LD_VAR 0 1
20185: ARRAY
20186: PUSH
20187: LD_VAR 0 2
20191: ARRAY
20192: PUSH
20193: LD_INT 1
20195: ARRAY
20196: PPUSH
20197: LD_EXP 72
20201: PUSH
20202: LD_VAR 0 1
20206: ARRAY
20207: PUSH
20208: LD_VAR 0 2
20212: ARRAY
20213: PUSH
20214: LD_INT 2
20216: ARRAY
20217: PPUSH
20218: CALL_OW 428
20222: ST_TO_ADDR
// if not tmp then
20223: LD_VAR 0 4
20227: NOT
20228: IFFALSE 20232
// continue ;
20230: GO 20147
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20232: LD_VAR 0 4
20236: PUSH
20237: LD_INT 81
20239: PUSH
20240: LD_VAR 0 3
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PPUSH
20249: CALL_OW 69
20253: IN
20254: PUSH
20255: LD_EXP 72
20259: PUSH
20260: LD_VAR 0 1
20264: ARRAY
20265: PUSH
20266: LD_VAR 0 2
20270: ARRAY
20271: PUSH
20272: LD_INT 1
20274: ARRAY
20275: PPUSH
20276: LD_EXP 72
20280: PUSH
20281: LD_VAR 0 1
20285: ARRAY
20286: PUSH
20287: LD_VAR 0 2
20291: ARRAY
20292: PUSH
20293: LD_INT 2
20295: ARRAY
20296: PPUSH
20297: CALL_OW 458
20301: AND
20302: IFFALSE 20396
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20304: LD_EXP 72
20308: PUSH
20309: LD_VAR 0 1
20313: ARRAY
20314: PUSH
20315: LD_VAR 0 2
20319: ARRAY
20320: PUSH
20321: LD_INT 1
20323: ARRAY
20324: PPUSH
20325: LD_EXP 72
20329: PUSH
20330: LD_VAR 0 1
20334: ARRAY
20335: PUSH
20336: LD_VAR 0 2
20340: ARRAY
20341: PUSH
20342: LD_INT 2
20344: ARRAY
20345: PPUSH
20346: LD_VAR 0 3
20350: PPUSH
20351: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20355: LD_ADDR_EXP 72
20359: PUSH
20360: LD_EXP 72
20364: PPUSH
20365: LD_VAR 0 1
20369: PPUSH
20370: LD_EXP 72
20374: PUSH
20375: LD_VAR 0 1
20379: ARRAY
20380: PPUSH
20381: LD_VAR 0 2
20385: PPUSH
20386: CALL_OW 3
20390: PPUSH
20391: CALL_OW 1
20395: ST_TO_ADDR
// end ; end ;
20396: GO 20147
20398: POP
20399: POP
// end ;
20400: GO 20065
20402: POP
20403: POP
// end ;
20404: PPOPN 4
20406: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20407: LD_INT 0
20409: PPUSH
20410: PPUSH
// result := false ;
20411: LD_ADDR_VAR 0 4
20415: PUSH
20416: LD_INT 0
20418: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20419: LD_VAR 0 1
20423: PPUSH
20424: CALL_OW 264
20428: PUSH
20429: LD_INT 81
20431: EQUAL
20432: NOT
20433: IFFALSE 20437
// exit ;
20435: GO 20677
// index := GetElementIndex ( minersList , unit ) ;
20437: LD_ADDR_VAR 0 5
20441: PUSH
20442: LD_EXP 71
20446: PPUSH
20447: LD_VAR 0 1
20451: PPUSH
20452: CALL 26857 0 2
20456: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20457: LD_EXP 72
20461: PUSH
20462: LD_VAR 0 5
20466: ARRAY
20467: PUSH
20468: LD_EXP 73
20472: GREATEREQUAL
20473: IFFALSE 20477
// exit ;
20475: GO 20677
// ComMoveXY ( unit , x , y ) ;
20477: LD_VAR 0 1
20481: PPUSH
20482: LD_VAR 0 2
20486: PPUSH
20487: LD_VAR 0 3
20491: PPUSH
20492: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20496: LD_INT 35
20498: PPUSH
20499: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20503: LD_VAR 0 1
20507: PPUSH
20508: LD_VAR 0 2
20512: PPUSH
20513: LD_VAR 0 3
20517: PPUSH
20518: CALL 58664 0 3
20522: NOT
20523: PUSH
20524: LD_VAR 0 1
20528: PPUSH
20529: CALL_OW 314
20533: AND
20534: IFFALSE 20538
// exit ;
20536: GO 20677
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20538: LD_VAR 0 2
20542: PPUSH
20543: LD_VAR 0 3
20547: PPUSH
20548: CALL_OW 428
20552: PUSH
20553: LD_VAR 0 1
20557: EQUAL
20558: PUSH
20559: LD_VAR 0 1
20563: PPUSH
20564: CALL_OW 314
20568: NOT
20569: AND
20570: IFFALSE 20496
// PlaySoundXY ( x , y , PlantMine ) ;
20572: LD_VAR 0 2
20576: PPUSH
20577: LD_VAR 0 3
20581: PPUSH
20582: LD_STRING PlantMine
20584: PPUSH
20585: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20589: LD_VAR 0 2
20593: PPUSH
20594: LD_VAR 0 3
20598: PPUSH
20599: LD_VAR 0 1
20603: PPUSH
20604: CALL_OW 255
20608: PPUSH
20609: LD_INT 0
20611: PPUSH
20612: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20616: LD_ADDR_EXP 72
20620: PUSH
20621: LD_EXP 72
20625: PPUSH
20626: LD_VAR 0 5
20630: PUSH
20631: LD_EXP 72
20635: PUSH
20636: LD_VAR 0 5
20640: ARRAY
20641: PUSH
20642: LD_INT 1
20644: PLUS
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PPUSH
20650: LD_VAR 0 2
20654: PUSH
20655: LD_VAR 0 3
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PPUSH
20664: CALL 27072 0 3
20668: ST_TO_ADDR
// result := true ;
20669: LD_ADDR_VAR 0 4
20673: PUSH
20674: LD_INT 1
20676: ST_TO_ADDR
// end ;
20677: LD_VAR 0 4
20681: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20682: LD_INT 0
20684: PPUSH
20685: PPUSH
20686: PPUSH
// if not unit in minersList then
20687: LD_VAR 0 1
20691: PUSH
20692: LD_EXP 71
20696: IN
20697: NOT
20698: IFFALSE 20702
// exit ;
20700: GO 21094
// index := GetElementIndex ( minersList , unit ) ;
20702: LD_ADDR_VAR 0 6
20706: PUSH
20707: LD_EXP 71
20711: PPUSH
20712: LD_VAR 0 1
20716: PPUSH
20717: CALL 26857 0 2
20721: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20722: LD_ADDR_VAR 0 5
20726: PUSH
20727: DOUBLE
20728: LD_EXP 72
20732: PUSH
20733: LD_VAR 0 6
20737: ARRAY
20738: INC
20739: ST_TO_ADDR
20740: LD_INT 1
20742: PUSH
20743: FOR_DOWNTO
20744: IFFALSE 20905
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20746: LD_EXP 72
20750: PUSH
20751: LD_VAR 0 6
20755: ARRAY
20756: PUSH
20757: LD_VAR 0 5
20761: ARRAY
20762: PUSH
20763: LD_INT 1
20765: ARRAY
20766: PUSH
20767: LD_VAR 0 2
20771: EQUAL
20772: PUSH
20773: LD_EXP 72
20777: PUSH
20778: LD_VAR 0 6
20782: ARRAY
20783: PUSH
20784: LD_VAR 0 5
20788: ARRAY
20789: PUSH
20790: LD_INT 2
20792: ARRAY
20793: PUSH
20794: LD_VAR 0 3
20798: EQUAL
20799: AND
20800: IFFALSE 20903
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20802: LD_EXP 72
20806: PUSH
20807: LD_VAR 0 6
20811: ARRAY
20812: PUSH
20813: LD_VAR 0 5
20817: ARRAY
20818: PUSH
20819: LD_INT 1
20821: ARRAY
20822: PPUSH
20823: LD_EXP 72
20827: PUSH
20828: LD_VAR 0 6
20832: ARRAY
20833: PUSH
20834: LD_VAR 0 5
20838: ARRAY
20839: PUSH
20840: LD_INT 2
20842: ARRAY
20843: PPUSH
20844: LD_VAR 0 1
20848: PPUSH
20849: CALL_OW 255
20853: PPUSH
20854: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20858: LD_ADDR_EXP 72
20862: PUSH
20863: LD_EXP 72
20867: PPUSH
20868: LD_VAR 0 6
20872: PPUSH
20873: LD_EXP 72
20877: PUSH
20878: LD_VAR 0 6
20882: ARRAY
20883: PPUSH
20884: LD_VAR 0 5
20888: PPUSH
20889: CALL_OW 3
20893: PPUSH
20894: CALL_OW 1
20898: ST_TO_ADDR
// exit ;
20899: POP
20900: POP
20901: GO 21094
// end ; end ;
20903: GO 20743
20905: POP
20906: POP
// for i := minerMinesList [ index ] downto 1 do
20907: LD_ADDR_VAR 0 5
20911: PUSH
20912: DOUBLE
20913: LD_EXP 72
20917: PUSH
20918: LD_VAR 0 6
20922: ARRAY
20923: INC
20924: ST_TO_ADDR
20925: LD_INT 1
20927: PUSH
20928: FOR_DOWNTO
20929: IFFALSE 21092
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
20931: LD_EXP 72
20935: PUSH
20936: LD_VAR 0 6
20940: ARRAY
20941: PUSH
20942: LD_VAR 0 5
20946: ARRAY
20947: PUSH
20948: LD_INT 1
20950: ARRAY
20951: PPUSH
20952: LD_EXP 72
20956: PUSH
20957: LD_VAR 0 6
20961: ARRAY
20962: PUSH
20963: LD_VAR 0 5
20967: ARRAY
20968: PUSH
20969: LD_INT 2
20971: ARRAY
20972: PPUSH
20973: LD_VAR 0 2
20977: PPUSH
20978: LD_VAR 0 3
20982: PPUSH
20983: CALL_OW 298
20987: PUSH
20988: LD_INT 6
20990: LESS
20991: IFFALSE 21090
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20993: LD_EXP 72
20997: PUSH
20998: LD_VAR 0 6
21002: ARRAY
21003: PUSH
21004: LD_VAR 0 5
21008: ARRAY
21009: PUSH
21010: LD_INT 1
21012: ARRAY
21013: PPUSH
21014: LD_EXP 72
21018: PUSH
21019: LD_VAR 0 6
21023: ARRAY
21024: PUSH
21025: LD_VAR 0 5
21029: ARRAY
21030: PUSH
21031: LD_INT 2
21033: ARRAY
21034: PPUSH
21035: LD_VAR 0 1
21039: PPUSH
21040: CALL_OW 255
21044: PPUSH
21045: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21049: LD_ADDR_EXP 72
21053: PUSH
21054: LD_EXP 72
21058: PPUSH
21059: LD_VAR 0 6
21063: PPUSH
21064: LD_EXP 72
21068: PUSH
21069: LD_VAR 0 6
21073: ARRAY
21074: PPUSH
21075: LD_VAR 0 5
21079: PPUSH
21080: CALL_OW 3
21084: PPUSH
21085: CALL_OW 1
21089: ST_TO_ADDR
// end ; end ;
21090: GO 20928
21092: POP
21093: POP
// end ;
21094: LD_VAR 0 4
21098: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21099: LD_INT 0
21101: PPUSH
21102: PPUSH
21103: PPUSH
21104: PPUSH
21105: PPUSH
21106: PPUSH
21107: PPUSH
21108: PPUSH
21109: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21110: LD_VAR 0 1
21114: PPUSH
21115: CALL_OW 264
21119: PUSH
21120: LD_INT 81
21122: EQUAL
21123: NOT
21124: PUSH
21125: LD_VAR 0 1
21129: PUSH
21130: LD_EXP 71
21134: IN
21135: NOT
21136: OR
21137: IFFALSE 21141
// exit ;
21139: GO 21463
// index := GetElementIndex ( minersList , unit ) ;
21141: LD_ADDR_VAR 0 6
21145: PUSH
21146: LD_EXP 71
21150: PPUSH
21151: LD_VAR 0 1
21155: PPUSH
21156: CALL 26857 0 2
21160: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21161: LD_ADDR_VAR 0 8
21165: PUSH
21166: LD_EXP 73
21170: PUSH
21171: LD_EXP 72
21175: PUSH
21176: LD_VAR 0 6
21180: ARRAY
21181: MINUS
21182: ST_TO_ADDR
// if not minesFreeAmount then
21183: LD_VAR 0 8
21187: NOT
21188: IFFALSE 21192
// exit ;
21190: GO 21463
// tmp := [ ] ;
21192: LD_ADDR_VAR 0 7
21196: PUSH
21197: EMPTY
21198: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21199: LD_ADDR_VAR 0 5
21203: PUSH
21204: DOUBLE
21205: LD_INT 1
21207: DEC
21208: ST_TO_ADDR
21209: LD_VAR 0 8
21213: PUSH
21214: FOR_TO
21215: IFFALSE 21410
// begin _d := rand ( 0 , 5 ) ;
21217: LD_ADDR_VAR 0 11
21221: PUSH
21222: LD_INT 0
21224: PPUSH
21225: LD_INT 5
21227: PPUSH
21228: CALL_OW 12
21232: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21233: LD_ADDR_VAR 0 12
21237: PUSH
21238: LD_INT 2
21240: PPUSH
21241: LD_INT 6
21243: PPUSH
21244: CALL_OW 12
21248: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21249: LD_ADDR_VAR 0 9
21253: PUSH
21254: LD_VAR 0 2
21258: PPUSH
21259: LD_VAR 0 11
21263: PPUSH
21264: LD_VAR 0 12
21268: PPUSH
21269: CALL_OW 272
21273: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21274: LD_ADDR_VAR 0 10
21278: PUSH
21279: LD_VAR 0 3
21283: PPUSH
21284: LD_VAR 0 11
21288: PPUSH
21289: LD_VAR 0 12
21293: PPUSH
21294: CALL_OW 273
21298: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21299: LD_VAR 0 9
21303: PPUSH
21304: LD_VAR 0 10
21308: PPUSH
21309: CALL_OW 488
21313: PUSH
21314: LD_VAR 0 9
21318: PUSH
21319: LD_VAR 0 10
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_VAR 0 7
21332: IN
21333: NOT
21334: AND
21335: PUSH
21336: LD_VAR 0 9
21340: PPUSH
21341: LD_VAR 0 10
21345: PPUSH
21346: CALL_OW 458
21350: NOT
21351: AND
21352: IFFALSE 21394
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21354: LD_ADDR_VAR 0 7
21358: PUSH
21359: LD_VAR 0 7
21363: PPUSH
21364: LD_VAR 0 7
21368: PUSH
21369: LD_INT 1
21371: PLUS
21372: PPUSH
21373: LD_VAR 0 9
21377: PUSH
21378: LD_VAR 0 10
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PPUSH
21387: CALL_OW 1
21391: ST_TO_ADDR
21392: GO 21408
// i := i - 1 ;
21394: LD_ADDR_VAR 0 5
21398: PUSH
21399: LD_VAR 0 5
21403: PUSH
21404: LD_INT 1
21406: MINUS
21407: ST_TO_ADDR
// end ;
21408: GO 21214
21410: POP
21411: POP
// for i in tmp do
21412: LD_ADDR_VAR 0 5
21416: PUSH
21417: LD_VAR 0 7
21421: PUSH
21422: FOR_IN
21423: IFFALSE 21461
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21425: LD_VAR 0 1
21429: PPUSH
21430: LD_VAR 0 5
21434: PUSH
21435: LD_INT 1
21437: ARRAY
21438: PPUSH
21439: LD_VAR 0 5
21443: PUSH
21444: LD_INT 2
21446: ARRAY
21447: PPUSH
21448: CALL 20407 0 3
21452: NOT
21453: IFFALSE 21459
// exit ;
21455: POP
21456: POP
21457: GO 21463
21459: GO 21422
21461: POP
21462: POP
// end ;
21463: LD_VAR 0 4
21467: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21468: LD_INT 0
21470: PPUSH
21471: PPUSH
21472: PPUSH
21473: PPUSH
21474: PPUSH
21475: PPUSH
21476: PPUSH
// if not GetClass ( unit ) = class_sniper then
21477: LD_VAR 0 1
21481: PPUSH
21482: CALL_OW 257
21486: PUSH
21487: LD_INT 5
21489: EQUAL
21490: NOT
21491: IFFALSE 21495
// exit ;
21493: GO 21883
// dist := 8 ;
21495: LD_ADDR_VAR 0 5
21499: PUSH
21500: LD_INT 8
21502: ST_TO_ADDR
// viewRange := 12 ;
21503: LD_ADDR_VAR 0 7
21507: PUSH
21508: LD_INT 12
21510: ST_TO_ADDR
// side := GetSide ( unit ) ;
21511: LD_ADDR_VAR 0 6
21515: PUSH
21516: LD_VAR 0 1
21520: PPUSH
21521: CALL_OW 255
21525: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21526: LD_INT 61
21528: PPUSH
21529: LD_VAR 0 6
21533: PPUSH
21534: CALL_OW 321
21538: PUSH
21539: LD_INT 2
21541: EQUAL
21542: IFFALSE 21552
// viewRange := 16 ;
21544: LD_ADDR_VAR 0 7
21548: PUSH
21549: LD_INT 16
21551: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21552: LD_VAR 0 1
21556: PPUSH
21557: LD_VAR 0 2
21561: PPUSH
21562: LD_VAR 0 3
21566: PPUSH
21567: CALL_OW 297
21571: PUSH
21572: LD_VAR 0 5
21576: GREATER
21577: IFFALSE 21656
// begin ComMoveXY ( unit , x , y ) ;
21579: LD_VAR 0 1
21583: PPUSH
21584: LD_VAR 0 2
21588: PPUSH
21589: LD_VAR 0 3
21593: PPUSH
21594: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21598: LD_INT 35
21600: PPUSH
21601: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21605: LD_VAR 0 1
21609: PPUSH
21610: LD_VAR 0 2
21614: PPUSH
21615: LD_VAR 0 3
21619: PPUSH
21620: CALL 58664 0 3
21624: NOT
21625: IFFALSE 21629
// exit ;
21627: GO 21883
// until GetDistUnitXY ( unit , x , y ) < dist ;
21629: LD_VAR 0 1
21633: PPUSH
21634: LD_VAR 0 2
21638: PPUSH
21639: LD_VAR 0 3
21643: PPUSH
21644: CALL_OW 297
21648: PUSH
21649: LD_VAR 0 5
21653: LESS
21654: IFFALSE 21598
// end ; ComTurnXY ( unit , x , y ) ;
21656: LD_VAR 0 1
21660: PPUSH
21661: LD_VAR 0 2
21665: PPUSH
21666: LD_VAR 0 3
21670: PPUSH
21671: CALL_OW 118
// wait ( 5 ) ;
21675: LD_INT 5
21677: PPUSH
21678: CALL_OW 67
// _d := GetDir ( unit ) ;
21682: LD_ADDR_VAR 0 10
21686: PUSH
21687: LD_VAR 0 1
21691: PPUSH
21692: CALL_OW 254
21696: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21697: LD_ADDR_VAR 0 8
21701: PUSH
21702: LD_VAR 0 1
21706: PPUSH
21707: CALL_OW 250
21711: PPUSH
21712: LD_VAR 0 10
21716: PPUSH
21717: LD_VAR 0 5
21721: PPUSH
21722: CALL_OW 272
21726: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21727: LD_ADDR_VAR 0 9
21731: PUSH
21732: LD_VAR 0 1
21736: PPUSH
21737: CALL_OW 251
21741: PPUSH
21742: LD_VAR 0 10
21746: PPUSH
21747: LD_VAR 0 5
21751: PPUSH
21752: CALL_OW 273
21756: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21757: LD_VAR 0 8
21761: PPUSH
21762: LD_VAR 0 9
21766: PPUSH
21767: CALL_OW 488
21771: NOT
21772: IFFALSE 21776
// exit ;
21774: GO 21883
// ComAnimCustom ( unit , 1 ) ;
21776: LD_VAR 0 1
21780: PPUSH
21781: LD_INT 1
21783: PPUSH
21784: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21788: LD_VAR 0 8
21792: PPUSH
21793: LD_VAR 0 9
21797: PPUSH
21798: LD_VAR 0 6
21802: PPUSH
21803: LD_VAR 0 7
21807: PPUSH
21808: CALL_OW 330
// repeat wait ( 1 ) ;
21812: LD_INT 1
21814: PPUSH
21815: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
21819: LD_VAR 0 1
21823: PPUSH
21824: CALL_OW 316
21828: PUSH
21829: LD_VAR 0 1
21833: PPUSH
21834: CALL_OW 314
21838: OR
21839: PUSH
21840: LD_VAR 0 1
21844: PPUSH
21845: CALL_OW 302
21849: NOT
21850: OR
21851: PUSH
21852: LD_VAR 0 1
21856: PPUSH
21857: CALL_OW 301
21861: OR
21862: IFFALSE 21812
// RemoveSeeing ( _x , _y , side ) ;
21864: LD_VAR 0 8
21868: PPUSH
21869: LD_VAR 0 9
21873: PPUSH
21874: LD_VAR 0 6
21878: PPUSH
21879: CALL_OW 331
// end ; end_of_file
21883: LD_VAR 0 4
21887: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
21888: LD_VAR 0 1
21892: PPUSH
21893: LD_VAR 0 2
21897: PPUSH
21898: LD_VAR 0 3
21902: PPUSH
21903: LD_VAR 0 4
21907: PPUSH
21908: LD_VAR 0 5
21912: PPUSH
21913: LD_VAR 0 6
21917: PPUSH
21918: CALL 1522 0 6
// end ;
21922: PPOPN 6
21924: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
21925: LD_INT 0
21927: PPUSH
// begin if not units then
21928: LD_VAR 0 1
21932: NOT
21933: IFFALSE 21937
// exit ;
21935: GO 21937
// end ;
21937: PPOPN 7
21939: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
21940: CALL 1426 0 0
// end ; end_of_file
21944: PPOPN 1
21946: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
21947: LD_VAR 0 1
21951: PUSH
21952: LD_INT 200
21954: DOUBLE
21955: GREATEREQUAL
21956: IFFALSE 21964
21958: LD_INT 299
21960: DOUBLE
21961: LESSEQUAL
21962: IFTRUE 21966
21964: GO 21998
21966: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
21967: LD_VAR 0 1
21971: PPUSH
21972: LD_VAR 0 2
21976: PPUSH
21977: LD_VAR 0 3
21981: PPUSH
21982: LD_VAR 0 4
21986: PPUSH
21987: LD_VAR 0 5
21991: PPUSH
21992: CALL 17545 0 5
21996: GO 22075
21998: LD_INT 300
22000: DOUBLE
22001: GREATEREQUAL
22002: IFFALSE 22010
22004: LD_INT 399
22006: DOUBLE
22007: LESSEQUAL
22008: IFTRUE 22012
22010: GO 22074
22012: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
22013: LD_VAR 0 1
22017: PPUSH
22018: LD_VAR 0 2
22022: PPUSH
22023: LD_VAR 0 3
22027: PPUSH
22028: LD_VAR 0 4
22032: PPUSH
22033: LD_VAR 0 5
22037: PPUSH
22038: LD_VAR 0 6
22042: PPUSH
22043: LD_VAR 0 7
22047: PPUSH
22048: LD_VAR 0 8
22052: PPUSH
22053: LD_VAR 0 9
22057: PPUSH
22058: LD_VAR 0 10
22062: PPUSH
22063: LD_VAR 0 11
22067: PPUSH
22068: CALL 13870 0 11
22072: GO 22075
22074: POP
// end ;
22075: PPOPN 11
22077: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
22078: LD_VAR 0 1
22082: PPUSH
22083: LD_VAR 0 2
22087: PPUSH
22088: LD_VAR 0 3
22092: PPUSH
22093: LD_VAR 0 4
22097: PPUSH
22098: LD_VAR 0 5
22102: PPUSH
22103: CALL 17281 0 5
// end ; end_of_file
22107: PPOPN 5
22109: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22110: LD_INT 0
22112: PPUSH
22113: PPUSH
// if exist_mode then
22114: LD_VAR 0 2
22118: IFFALSE 22143
// unit := CreateCharacter ( prefix & ident ) else
22120: LD_ADDR_VAR 0 5
22124: PUSH
22125: LD_VAR 0 3
22129: PUSH
22130: LD_VAR 0 1
22134: STR
22135: PPUSH
22136: CALL_OW 34
22140: ST_TO_ADDR
22141: GO 22158
// unit := NewCharacter ( ident ) ;
22143: LD_ADDR_VAR 0 5
22147: PUSH
22148: LD_VAR 0 1
22152: PPUSH
22153: CALL_OW 25
22157: ST_TO_ADDR
// result := unit ;
22158: LD_ADDR_VAR 0 4
22162: PUSH
22163: LD_VAR 0 5
22167: ST_TO_ADDR
// end ;
22168: LD_VAR 0 4
22172: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22173: LD_INT 0
22175: PPUSH
22176: PPUSH
// if not side or not nation then
22177: LD_VAR 0 1
22181: NOT
22182: PUSH
22183: LD_VAR 0 2
22187: NOT
22188: OR
22189: IFFALSE 22193
// exit ;
22191: GO 22961
// case nation of nation_american :
22193: LD_VAR 0 2
22197: PUSH
22198: LD_INT 1
22200: DOUBLE
22201: EQUAL
22202: IFTRUE 22206
22204: GO 22420
22206: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22207: LD_ADDR_VAR 0 4
22211: PUSH
22212: LD_INT 35
22214: PUSH
22215: LD_INT 45
22217: PUSH
22218: LD_INT 46
22220: PUSH
22221: LD_INT 47
22223: PUSH
22224: LD_INT 82
22226: PUSH
22227: LD_INT 83
22229: PUSH
22230: LD_INT 84
22232: PUSH
22233: LD_INT 85
22235: PUSH
22236: LD_INT 86
22238: PUSH
22239: LD_INT 1
22241: PUSH
22242: LD_INT 2
22244: PUSH
22245: LD_INT 6
22247: PUSH
22248: LD_INT 15
22250: PUSH
22251: LD_INT 16
22253: PUSH
22254: LD_INT 7
22256: PUSH
22257: LD_INT 12
22259: PUSH
22260: LD_INT 13
22262: PUSH
22263: LD_INT 10
22265: PUSH
22266: LD_INT 14
22268: PUSH
22269: LD_INT 20
22271: PUSH
22272: LD_INT 21
22274: PUSH
22275: LD_INT 22
22277: PUSH
22278: LD_INT 25
22280: PUSH
22281: LD_INT 32
22283: PUSH
22284: LD_INT 27
22286: PUSH
22287: LD_INT 36
22289: PUSH
22290: LD_INT 69
22292: PUSH
22293: LD_INT 39
22295: PUSH
22296: LD_INT 34
22298: PUSH
22299: LD_INT 40
22301: PUSH
22302: LD_INT 48
22304: PUSH
22305: LD_INT 49
22307: PUSH
22308: LD_INT 50
22310: PUSH
22311: LD_INT 51
22313: PUSH
22314: LD_INT 52
22316: PUSH
22317: LD_INT 53
22319: PUSH
22320: LD_INT 54
22322: PUSH
22323: LD_INT 55
22325: PUSH
22326: LD_INT 56
22328: PUSH
22329: LD_INT 57
22331: PUSH
22332: LD_INT 58
22334: PUSH
22335: LD_INT 59
22337: PUSH
22338: LD_INT 60
22340: PUSH
22341: LD_INT 61
22343: PUSH
22344: LD_INT 62
22346: PUSH
22347: LD_INT 80
22349: PUSH
22350: LD_INT 82
22352: PUSH
22353: LD_INT 83
22355: PUSH
22356: LD_INT 84
22358: PUSH
22359: LD_INT 85
22361: PUSH
22362: LD_INT 86
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: ST_TO_ADDR
22418: GO 22885
22420: LD_INT 2
22422: DOUBLE
22423: EQUAL
22424: IFTRUE 22428
22426: GO 22654
22428: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
22429: LD_ADDR_VAR 0 4
22433: PUSH
22434: LD_INT 35
22436: PUSH
22437: LD_INT 45
22439: PUSH
22440: LD_INT 46
22442: PUSH
22443: LD_INT 47
22445: PUSH
22446: LD_INT 82
22448: PUSH
22449: LD_INT 83
22451: PUSH
22452: LD_INT 84
22454: PUSH
22455: LD_INT 85
22457: PUSH
22458: LD_INT 87
22460: PUSH
22461: LD_INT 70
22463: PUSH
22464: LD_INT 1
22466: PUSH
22467: LD_INT 11
22469: PUSH
22470: LD_INT 3
22472: PUSH
22473: LD_INT 4
22475: PUSH
22476: LD_INT 5
22478: PUSH
22479: LD_INT 6
22481: PUSH
22482: LD_INT 15
22484: PUSH
22485: LD_INT 18
22487: PUSH
22488: LD_INT 7
22490: PUSH
22491: LD_INT 17
22493: PUSH
22494: LD_INT 8
22496: PUSH
22497: LD_INT 20
22499: PUSH
22500: LD_INT 21
22502: PUSH
22503: LD_INT 22
22505: PUSH
22506: LD_INT 72
22508: PUSH
22509: LD_INT 26
22511: PUSH
22512: LD_INT 69
22514: PUSH
22515: LD_INT 39
22517: PUSH
22518: LD_INT 40
22520: PUSH
22521: LD_INT 41
22523: PUSH
22524: LD_INT 42
22526: PUSH
22527: LD_INT 43
22529: PUSH
22530: LD_INT 48
22532: PUSH
22533: LD_INT 49
22535: PUSH
22536: LD_INT 50
22538: PUSH
22539: LD_INT 51
22541: PUSH
22542: LD_INT 52
22544: PUSH
22545: LD_INT 53
22547: PUSH
22548: LD_INT 54
22550: PUSH
22551: LD_INT 55
22553: PUSH
22554: LD_INT 56
22556: PUSH
22557: LD_INT 60
22559: PUSH
22560: LD_INT 61
22562: PUSH
22563: LD_INT 62
22565: PUSH
22566: LD_INT 66
22568: PUSH
22569: LD_INT 67
22571: PUSH
22572: LD_INT 68
22574: PUSH
22575: LD_INT 81
22577: PUSH
22578: LD_INT 82
22580: PUSH
22581: LD_INT 83
22583: PUSH
22584: LD_INT 84
22586: PUSH
22587: LD_INT 85
22589: PUSH
22590: LD_INT 87
22592: PUSH
22593: LD_INT 88
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: ST_TO_ADDR
22652: GO 22885
22654: LD_INT 3
22656: DOUBLE
22657: EQUAL
22658: IFTRUE 22662
22660: GO 22884
22662: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22663: LD_ADDR_VAR 0 4
22667: PUSH
22668: LD_INT 46
22670: PUSH
22671: LD_INT 47
22673: PUSH
22674: LD_INT 1
22676: PUSH
22677: LD_INT 2
22679: PUSH
22680: LD_INT 82
22682: PUSH
22683: LD_INT 83
22685: PUSH
22686: LD_INT 84
22688: PUSH
22689: LD_INT 85
22691: PUSH
22692: LD_INT 86
22694: PUSH
22695: LD_INT 11
22697: PUSH
22698: LD_INT 9
22700: PUSH
22701: LD_INT 20
22703: PUSH
22704: LD_INT 19
22706: PUSH
22707: LD_INT 21
22709: PUSH
22710: LD_INT 24
22712: PUSH
22713: LD_INT 22
22715: PUSH
22716: LD_INT 25
22718: PUSH
22719: LD_INT 28
22721: PUSH
22722: LD_INT 29
22724: PUSH
22725: LD_INT 30
22727: PUSH
22728: LD_INT 31
22730: PUSH
22731: LD_INT 37
22733: PUSH
22734: LD_INT 38
22736: PUSH
22737: LD_INT 32
22739: PUSH
22740: LD_INT 27
22742: PUSH
22743: LD_INT 33
22745: PUSH
22746: LD_INT 69
22748: PUSH
22749: LD_INT 39
22751: PUSH
22752: LD_INT 34
22754: PUSH
22755: LD_INT 40
22757: PUSH
22758: LD_INT 71
22760: PUSH
22761: LD_INT 23
22763: PUSH
22764: LD_INT 44
22766: PUSH
22767: LD_INT 48
22769: PUSH
22770: LD_INT 49
22772: PUSH
22773: LD_INT 50
22775: PUSH
22776: LD_INT 51
22778: PUSH
22779: LD_INT 52
22781: PUSH
22782: LD_INT 53
22784: PUSH
22785: LD_INT 54
22787: PUSH
22788: LD_INT 55
22790: PUSH
22791: LD_INT 56
22793: PUSH
22794: LD_INT 57
22796: PUSH
22797: LD_INT 58
22799: PUSH
22800: LD_INT 59
22802: PUSH
22803: LD_INT 63
22805: PUSH
22806: LD_INT 64
22808: PUSH
22809: LD_INT 65
22811: PUSH
22812: LD_INT 82
22814: PUSH
22815: LD_INT 83
22817: PUSH
22818: LD_INT 84
22820: PUSH
22821: LD_INT 85
22823: PUSH
22824: LD_INT 86
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: ST_TO_ADDR
22882: GO 22885
22884: POP
// if state > - 1 and state < 3 then
22885: LD_VAR 0 3
22889: PUSH
22890: LD_INT 1
22892: NEG
22893: GREATER
22894: PUSH
22895: LD_VAR 0 3
22899: PUSH
22900: LD_INT 3
22902: LESS
22903: AND
22904: IFFALSE 22961
// for i in result do
22906: LD_ADDR_VAR 0 5
22910: PUSH
22911: LD_VAR 0 4
22915: PUSH
22916: FOR_IN
22917: IFFALSE 22959
// if GetTech ( i , side ) <> state then
22919: LD_VAR 0 5
22923: PPUSH
22924: LD_VAR 0 1
22928: PPUSH
22929: CALL_OW 321
22933: PUSH
22934: LD_VAR 0 3
22938: NONEQUAL
22939: IFFALSE 22957
// result := result diff i ;
22941: LD_ADDR_VAR 0 4
22945: PUSH
22946: LD_VAR 0 4
22950: PUSH
22951: LD_VAR 0 5
22955: DIFF
22956: ST_TO_ADDR
22957: GO 22916
22959: POP
22960: POP
// end ;
22961: LD_VAR 0 4
22965: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22966: LD_INT 0
22968: PPUSH
22969: PPUSH
22970: PPUSH
// result := true ;
22971: LD_ADDR_VAR 0 3
22975: PUSH
22976: LD_INT 1
22978: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22979: LD_ADDR_VAR 0 5
22983: PUSH
22984: LD_VAR 0 2
22988: PPUSH
22989: CALL_OW 480
22993: ST_TO_ADDR
// if not tmp then
22994: LD_VAR 0 5
22998: NOT
22999: IFFALSE 23003
// exit ;
23001: GO 23052
// for i in tmp do
23003: LD_ADDR_VAR 0 4
23007: PUSH
23008: LD_VAR 0 5
23012: PUSH
23013: FOR_IN
23014: IFFALSE 23050
// if GetTech ( i , side ) <> state_researched then
23016: LD_VAR 0 4
23020: PPUSH
23021: LD_VAR 0 1
23025: PPUSH
23026: CALL_OW 321
23030: PUSH
23031: LD_INT 2
23033: NONEQUAL
23034: IFFALSE 23048
// begin result := false ;
23036: LD_ADDR_VAR 0 3
23040: PUSH
23041: LD_INT 0
23043: ST_TO_ADDR
// exit ;
23044: POP
23045: POP
23046: GO 23052
// end ;
23048: GO 23013
23050: POP
23051: POP
// end ;
23052: LD_VAR 0 3
23056: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23057: LD_INT 0
23059: PPUSH
23060: PPUSH
23061: PPUSH
23062: PPUSH
23063: PPUSH
23064: PPUSH
23065: PPUSH
23066: PPUSH
23067: PPUSH
23068: PPUSH
23069: PPUSH
23070: PPUSH
23071: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23072: LD_VAR 0 1
23076: NOT
23077: PUSH
23078: LD_VAR 0 1
23082: PPUSH
23083: CALL_OW 257
23087: PUSH
23088: LD_INT 9
23090: NONEQUAL
23091: OR
23092: IFFALSE 23096
// exit ;
23094: GO 23669
// side := GetSide ( unit ) ;
23096: LD_ADDR_VAR 0 9
23100: PUSH
23101: LD_VAR 0 1
23105: PPUSH
23106: CALL_OW 255
23110: ST_TO_ADDR
// tech_space := tech_spacanom ;
23111: LD_ADDR_VAR 0 12
23115: PUSH
23116: LD_INT 29
23118: ST_TO_ADDR
// tech_time := tech_taurad ;
23119: LD_ADDR_VAR 0 13
23123: PUSH
23124: LD_INT 28
23126: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23127: LD_ADDR_VAR 0 11
23131: PUSH
23132: LD_VAR 0 1
23136: PPUSH
23137: CALL_OW 310
23141: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23142: LD_VAR 0 11
23146: PPUSH
23147: CALL_OW 247
23151: PUSH
23152: LD_INT 2
23154: EQUAL
23155: IFFALSE 23159
// exit ;
23157: GO 23669
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23159: LD_ADDR_VAR 0 8
23163: PUSH
23164: LD_INT 81
23166: PUSH
23167: LD_VAR 0 9
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: PUSH
23176: LD_INT 3
23178: PUSH
23179: LD_INT 21
23181: PUSH
23182: LD_INT 3
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PPUSH
23197: CALL_OW 69
23201: ST_TO_ADDR
// if not tmp then
23202: LD_VAR 0 8
23206: NOT
23207: IFFALSE 23211
// exit ;
23209: GO 23669
// if in_unit then
23211: LD_VAR 0 11
23215: IFFALSE 23239
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23217: LD_ADDR_VAR 0 10
23221: PUSH
23222: LD_VAR 0 8
23226: PPUSH
23227: LD_VAR 0 11
23231: PPUSH
23232: CALL_OW 74
23236: ST_TO_ADDR
23237: GO 23259
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23239: LD_ADDR_VAR 0 10
23243: PUSH
23244: LD_VAR 0 8
23248: PPUSH
23249: LD_VAR 0 1
23253: PPUSH
23254: CALL_OW 74
23258: ST_TO_ADDR
// if not enemy then
23259: LD_VAR 0 10
23263: NOT
23264: IFFALSE 23268
// exit ;
23266: GO 23669
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23268: LD_VAR 0 11
23272: PUSH
23273: LD_VAR 0 11
23277: PPUSH
23278: LD_VAR 0 10
23282: PPUSH
23283: CALL_OW 296
23287: PUSH
23288: LD_INT 13
23290: GREATER
23291: AND
23292: PUSH
23293: LD_VAR 0 1
23297: PPUSH
23298: LD_VAR 0 10
23302: PPUSH
23303: CALL_OW 296
23307: PUSH
23308: LD_INT 12
23310: GREATER
23311: OR
23312: IFFALSE 23316
// exit ;
23314: GO 23669
// missile := [ 1 ] ;
23316: LD_ADDR_VAR 0 14
23320: PUSH
23321: LD_INT 1
23323: PUSH
23324: EMPTY
23325: LIST
23326: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23327: LD_VAR 0 9
23331: PPUSH
23332: LD_VAR 0 12
23336: PPUSH
23337: CALL_OW 325
23341: IFFALSE 23370
// missile := Replace ( missile , missile + 1 , 2 ) ;
23343: LD_ADDR_VAR 0 14
23347: PUSH
23348: LD_VAR 0 14
23352: PPUSH
23353: LD_VAR 0 14
23357: PUSH
23358: LD_INT 1
23360: PLUS
23361: PPUSH
23362: LD_INT 2
23364: PPUSH
23365: CALL_OW 1
23369: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23370: LD_VAR 0 9
23374: PPUSH
23375: LD_VAR 0 13
23379: PPUSH
23380: CALL_OW 325
23384: PUSH
23385: LD_VAR 0 10
23389: PPUSH
23390: CALL_OW 255
23394: PPUSH
23395: LD_VAR 0 13
23399: PPUSH
23400: CALL_OW 325
23404: NOT
23405: AND
23406: IFFALSE 23435
// missile := Replace ( missile , missile + 1 , 3 ) ;
23408: LD_ADDR_VAR 0 14
23412: PUSH
23413: LD_VAR 0 14
23417: PPUSH
23418: LD_VAR 0 14
23422: PUSH
23423: LD_INT 1
23425: PLUS
23426: PPUSH
23427: LD_INT 3
23429: PPUSH
23430: CALL_OW 1
23434: ST_TO_ADDR
// if missile < 2 then
23435: LD_VAR 0 14
23439: PUSH
23440: LD_INT 2
23442: LESS
23443: IFFALSE 23447
// exit ;
23445: GO 23669
// x := GetX ( enemy ) ;
23447: LD_ADDR_VAR 0 4
23451: PUSH
23452: LD_VAR 0 10
23456: PPUSH
23457: CALL_OW 250
23461: ST_TO_ADDR
// y := GetY ( enemy ) ;
23462: LD_ADDR_VAR 0 5
23466: PUSH
23467: LD_VAR 0 10
23471: PPUSH
23472: CALL_OW 251
23476: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23477: LD_ADDR_VAR 0 6
23481: PUSH
23482: LD_VAR 0 4
23486: PUSH
23487: LD_INT 1
23489: NEG
23490: PPUSH
23491: LD_INT 1
23493: PPUSH
23494: CALL_OW 12
23498: PLUS
23499: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23500: LD_ADDR_VAR 0 7
23504: PUSH
23505: LD_VAR 0 5
23509: PUSH
23510: LD_INT 1
23512: NEG
23513: PPUSH
23514: LD_INT 1
23516: PPUSH
23517: CALL_OW 12
23521: PLUS
23522: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23523: LD_VAR 0 6
23527: PPUSH
23528: LD_VAR 0 7
23532: PPUSH
23533: CALL_OW 488
23537: NOT
23538: IFFALSE 23560
// begin _x := x ;
23540: LD_ADDR_VAR 0 6
23544: PUSH
23545: LD_VAR 0 4
23549: ST_TO_ADDR
// _y := y ;
23550: LD_ADDR_VAR 0 7
23554: PUSH
23555: LD_VAR 0 5
23559: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23560: LD_ADDR_VAR 0 3
23564: PUSH
23565: LD_INT 1
23567: PPUSH
23568: LD_VAR 0 14
23572: PPUSH
23573: CALL_OW 12
23577: ST_TO_ADDR
// case i of 1 :
23578: LD_VAR 0 3
23582: PUSH
23583: LD_INT 1
23585: DOUBLE
23586: EQUAL
23587: IFTRUE 23591
23589: GO 23608
23591: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23592: LD_VAR 0 1
23596: PPUSH
23597: LD_VAR 0 10
23601: PPUSH
23602: CALL_OW 115
23606: GO 23669
23608: LD_INT 2
23610: DOUBLE
23611: EQUAL
23612: IFTRUE 23616
23614: GO 23638
23616: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23617: LD_VAR 0 1
23621: PPUSH
23622: LD_VAR 0 6
23626: PPUSH
23627: LD_VAR 0 7
23631: PPUSH
23632: CALL_OW 153
23636: GO 23669
23638: LD_INT 3
23640: DOUBLE
23641: EQUAL
23642: IFTRUE 23646
23644: GO 23668
23646: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23647: LD_VAR 0 1
23651: PPUSH
23652: LD_VAR 0 6
23656: PPUSH
23657: LD_VAR 0 7
23661: PPUSH
23662: CALL_OW 154
23666: GO 23669
23668: POP
// end ;
23669: LD_VAR 0 2
23673: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23674: LD_INT 0
23676: PPUSH
23677: PPUSH
23678: PPUSH
23679: PPUSH
23680: PPUSH
23681: PPUSH
// if not unit or not building then
23682: LD_VAR 0 1
23686: NOT
23687: PUSH
23688: LD_VAR 0 2
23692: NOT
23693: OR
23694: IFFALSE 23698
// exit ;
23696: GO 23856
// x := GetX ( building ) ;
23698: LD_ADDR_VAR 0 5
23702: PUSH
23703: LD_VAR 0 2
23707: PPUSH
23708: CALL_OW 250
23712: ST_TO_ADDR
// y := GetY ( building ) ;
23713: LD_ADDR_VAR 0 6
23717: PUSH
23718: LD_VAR 0 2
23722: PPUSH
23723: CALL_OW 251
23727: ST_TO_ADDR
// for i = 0 to 5 do
23728: LD_ADDR_VAR 0 4
23732: PUSH
23733: DOUBLE
23734: LD_INT 0
23736: DEC
23737: ST_TO_ADDR
23738: LD_INT 5
23740: PUSH
23741: FOR_TO
23742: IFFALSE 23854
// begin _x := ShiftX ( x , i , 3 ) ;
23744: LD_ADDR_VAR 0 7
23748: PUSH
23749: LD_VAR 0 5
23753: PPUSH
23754: LD_VAR 0 4
23758: PPUSH
23759: LD_INT 3
23761: PPUSH
23762: CALL_OW 272
23766: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23767: LD_ADDR_VAR 0 8
23771: PUSH
23772: LD_VAR 0 6
23776: PPUSH
23777: LD_VAR 0 4
23781: PPUSH
23782: LD_INT 3
23784: PPUSH
23785: CALL_OW 273
23789: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23790: LD_VAR 0 7
23794: PPUSH
23795: LD_VAR 0 8
23799: PPUSH
23800: CALL_OW 488
23804: NOT
23805: IFFALSE 23809
// continue ;
23807: GO 23741
// if HexInfo ( _x , _y ) = 0 then
23809: LD_VAR 0 7
23813: PPUSH
23814: LD_VAR 0 8
23818: PPUSH
23819: CALL_OW 428
23823: PUSH
23824: LD_INT 0
23826: EQUAL
23827: IFFALSE 23852
// begin ComMoveXY ( unit , _x , _y ) ;
23829: LD_VAR 0 1
23833: PPUSH
23834: LD_VAR 0 7
23838: PPUSH
23839: LD_VAR 0 8
23843: PPUSH
23844: CALL_OW 111
// exit ;
23848: POP
23849: POP
23850: GO 23856
// end ; end ;
23852: GO 23741
23854: POP
23855: POP
// end ;
23856: LD_VAR 0 3
23860: RET
// export function ScanBase ( side , base_area ) ; begin
23861: LD_INT 0
23863: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23864: LD_ADDR_VAR 0 3
23868: PUSH
23869: LD_VAR 0 2
23873: PPUSH
23874: LD_INT 81
23876: PUSH
23877: LD_VAR 0 1
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PPUSH
23886: CALL_OW 70
23890: ST_TO_ADDR
// end ;
23891: LD_VAR 0 3
23895: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23896: LD_INT 0
23898: PPUSH
23899: PPUSH
23900: PPUSH
23901: PPUSH
// result := false ;
23902: LD_ADDR_VAR 0 2
23906: PUSH
23907: LD_INT 0
23909: ST_TO_ADDR
// side := GetSide ( unit ) ;
23910: LD_ADDR_VAR 0 3
23914: PUSH
23915: LD_VAR 0 1
23919: PPUSH
23920: CALL_OW 255
23924: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23925: LD_ADDR_VAR 0 4
23929: PUSH
23930: LD_VAR 0 1
23934: PPUSH
23935: CALL_OW 248
23939: ST_TO_ADDR
// case nat of 1 :
23940: LD_VAR 0 4
23944: PUSH
23945: LD_INT 1
23947: DOUBLE
23948: EQUAL
23949: IFTRUE 23953
23951: GO 23964
23953: POP
// tech := tech_lassight ; 2 :
23954: LD_ADDR_VAR 0 5
23958: PUSH
23959: LD_INT 12
23961: ST_TO_ADDR
23962: GO 24003
23964: LD_INT 2
23966: DOUBLE
23967: EQUAL
23968: IFTRUE 23972
23970: GO 23983
23972: POP
// tech := tech_mortar ; 3 :
23973: LD_ADDR_VAR 0 5
23977: PUSH
23978: LD_INT 41
23980: ST_TO_ADDR
23981: GO 24003
23983: LD_INT 3
23985: DOUBLE
23986: EQUAL
23987: IFTRUE 23991
23989: GO 24002
23991: POP
// tech := tech_bazooka ; end ;
23992: LD_ADDR_VAR 0 5
23996: PUSH
23997: LD_INT 44
23999: ST_TO_ADDR
24000: GO 24003
24002: POP
// if Researched ( side , tech ) then
24003: LD_VAR 0 3
24007: PPUSH
24008: LD_VAR 0 5
24012: PPUSH
24013: CALL_OW 325
24017: IFFALSE 24044
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24019: LD_ADDR_VAR 0 2
24023: PUSH
24024: LD_INT 5
24026: PUSH
24027: LD_INT 8
24029: PUSH
24030: LD_INT 9
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: LIST
24037: PUSH
24038: LD_VAR 0 4
24042: ARRAY
24043: ST_TO_ADDR
// end ;
24044: LD_VAR 0 2
24048: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24049: LD_INT 0
24051: PPUSH
24052: PPUSH
24053: PPUSH
// if not mines then
24054: LD_VAR 0 2
24058: NOT
24059: IFFALSE 24063
// exit ;
24061: GO 24207
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24063: LD_ADDR_VAR 0 5
24067: PUSH
24068: LD_INT 81
24070: PUSH
24071: LD_VAR 0 1
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 3
24082: PUSH
24083: LD_INT 21
24085: PUSH
24086: LD_INT 3
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PPUSH
24101: CALL_OW 69
24105: ST_TO_ADDR
// for i in mines do
24106: LD_ADDR_VAR 0 4
24110: PUSH
24111: LD_VAR 0 2
24115: PUSH
24116: FOR_IN
24117: IFFALSE 24205
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24119: LD_VAR 0 4
24123: PUSH
24124: LD_INT 1
24126: ARRAY
24127: PPUSH
24128: LD_VAR 0 4
24132: PUSH
24133: LD_INT 2
24135: ARRAY
24136: PPUSH
24137: CALL_OW 458
24141: NOT
24142: IFFALSE 24146
// continue ;
24144: GO 24116
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24146: LD_VAR 0 4
24150: PUSH
24151: LD_INT 1
24153: ARRAY
24154: PPUSH
24155: LD_VAR 0 4
24159: PUSH
24160: LD_INT 2
24162: ARRAY
24163: PPUSH
24164: CALL_OW 428
24168: PUSH
24169: LD_VAR 0 5
24173: IN
24174: IFFALSE 24203
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24176: LD_VAR 0 4
24180: PUSH
24181: LD_INT 1
24183: ARRAY
24184: PPUSH
24185: LD_VAR 0 4
24189: PUSH
24190: LD_INT 2
24192: ARRAY
24193: PPUSH
24194: LD_VAR 0 1
24198: PPUSH
24199: CALL_OW 456
// end ;
24203: GO 24116
24205: POP
24206: POP
// end ;
24207: LD_VAR 0 3
24211: RET
// export function Count ( array ) ; begin
24212: LD_INT 0
24214: PPUSH
// result := array + 0 ;
24215: LD_ADDR_VAR 0 2
24219: PUSH
24220: LD_VAR 0 1
24224: PUSH
24225: LD_INT 0
24227: PLUS
24228: ST_TO_ADDR
// end ;
24229: LD_VAR 0 2
24233: RET
// export function IsEmpty ( building ) ; begin
24234: LD_INT 0
24236: PPUSH
// if not building then
24237: LD_VAR 0 1
24241: NOT
24242: IFFALSE 24246
// exit ;
24244: GO 24289
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24246: LD_ADDR_VAR 0 2
24250: PUSH
24251: LD_VAR 0 1
24255: PUSH
24256: LD_INT 22
24258: PUSH
24259: LD_VAR 0 1
24263: PPUSH
24264: CALL_OW 255
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 58
24275: PUSH
24276: EMPTY
24277: LIST
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PPUSH
24283: CALL_OW 69
24287: IN
24288: ST_TO_ADDR
// end ;
24289: LD_VAR 0 2
24293: RET
// export function IsNotFull ( building ) ; var places ; begin
24294: LD_INT 0
24296: PPUSH
24297: PPUSH
// if not building then
24298: LD_VAR 0 1
24302: NOT
24303: IFFALSE 24307
// exit ;
24305: GO 24335
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
24307: LD_ADDR_VAR 0 2
24311: PUSH
24312: LD_VAR 0 1
24316: PPUSH
24317: LD_INT 3
24319: PUSH
24320: LD_INT 62
24322: PUSH
24323: EMPTY
24324: LIST
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PPUSH
24330: CALL_OW 72
24334: ST_TO_ADDR
// end ;
24335: LD_VAR 0 2
24339: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24340: LD_INT 0
24342: PPUSH
24343: PPUSH
24344: PPUSH
24345: PPUSH
// tmp := [ ] ;
24346: LD_ADDR_VAR 0 3
24350: PUSH
24351: EMPTY
24352: ST_TO_ADDR
// list := [ ] ;
24353: LD_ADDR_VAR 0 5
24357: PUSH
24358: EMPTY
24359: ST_TO_ADDR
// for i = 16 to 25 do
24360: LD_ADDR_VAR 0 4
24364: PUSH
24365: DOUBLE
24366: LD_INT 16
24368: DEC
24369: ST_TO_ADDR
24370: LD_INT 25
24372: PUSH
24373: FOR_TO
24374: IFFALSE 24447
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24376: LD_ADDR_VAR 0 3
24380: PUSH
24381: LD_VAR 0 3
24385: PUSH
24386: LD_INT 22
24388: PUSH
24389: LD_VAR 0 1
24393: PPUSH
24394: CALL_OW 255
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 91
24405: PUSH
24406: LD_VAR 0 1
24410: PUSH
24411: LD_INT 6
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 30
24421: PUSH
24422: LD_VAR 0 4
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: LIST
24435: PUSH
24436: EMPTY
24437: LIST
24438: PPUSH
24439: CALL_OW 69
24443: ADD
24444: ST_TO_ADDR
24445: GO 24373
24447: POP
24448: POP
// for i = 1 to tmp do
24449: LD_ADDR_VAR 0 4
24453: PUSH
24454: DOUBLE
24455: LD_INT 1
24457: DEC
24458: ST_TO_ADDR
24459: LD_VAR 0 3
24463: PUSH
24464: FOR_TO
24465: IFFALSE 24553
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24467: LD_ADDR_VAR 0 5
24471: PUSH
24472: LD_VAR 0 5
24476: PUSH
24477: LD_VAR 0 3
24481: PUSH
24482: LD_VAR 0 4
24486: ARRAY
24487: PPUSH
24488: CALL_OW 266
24492: PUSH
24493: LD_VAR 0 3
24497: PUSH
24498: LD_VAR 0 4
24502: ARRAY
24503: PPUSH
24504: CALL_OW 250
24508: PUSH
24509: LD_VAR 0 3
24513: PUSH
24514: LD_VAR 0 4
24518: ARRAY
24519: PPUSH
24520: CALL_OW 251
24524: PUSH
24525: LD_VAR 0 3
24529: PUSH
24530: LD_VAR 0 4
24534: ARRAY
24535: PPUSH
24536: CALL_OW 254
24540: PUSH
24541: EMPTY
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: PUSH
24547: EMPTY
24548: LIST
24549: ADD
24550: ST_TO_ADDR
24551: GO 24464
24553: POP
24554: POP
// result := list ;
24555: LD_ADDR_VAR 0 2
24559: PUSH
24560: LD_VAR 0 5
24564: ST_TO_ADDR
// end ;
24565: LD_VAR 0 2
24569: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24570: LD_INT 0
24572: PPUSH
24573: PPUSH
24574: PPUSH
24575: PPUSH
24576: PPUSH
24577: PPUSH
24578: PPUSH
// if not factory then
24579: LD_VAR 0 1
24583: NOT
24584: IFFALSE 24588
// exit ;
24586: GO 25181
// if control = control_apeman then
24588: LD_VAR 0 4
24592: PUSH
24593: LD_INT 5
24595: EQUAL
24596: IFFALSE 24705
// begin tmp := UnitsInside ( factory ) ;
24598: LD_ADDR_VAR 0 8
24602: PUSH
24603: LD_VAR 0 1
24607: PPUSH
24608: CALL_OW 313
24612: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24613: LD_VAR 0 8
24617: PPUSH
24618: LD_INT 25
24620: PUSH
24621: LD_INT 12
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PPUSH
24628: CALL_OW 72
24632: NOT
24633: IFFALSE 24643
// control := control_manual ;
24635: LD_ADDR_VAR 0 4
24639: PUSH
24640: LD_INT 1
24642: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24643: LD_ADDR_VAR 0 8
24647: PUSH
24648: LD_VAR 0 1
24652: PPUSH
24653: CALL 24340 0 1
24657: ST_TO_ADDR
// if tmp then
24658: LD_VAR 0 8
24662: IFFALSE 24705
// begin for i in tmp do
24664: LD_ADDR_VAR 0 7
24668: PUSH
24669: LD_VAR 0 8
24673: PUSH
24674: FOR_IN
24675: IFFALSE 24703
// if i [ 1 ] = b_ext_radio then
24677: LD_VAR 0 7
24681: PUSH
24682: LD_INT 1
24684: ARRAY
24685: PUSH
24686: LD_INT 22
24688: EQUAL
24689: IFFALSE 24701
// begin control := control_remote ;
24691: LD_ADDR_VAR 0 4
24695: PUSH
24696: LD_INT 2
24698: ST_TO_ADDR
// break ;
24699: GO 24703
// end ;
24701: GO 24674
24703: POP
24704: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24705: LD_VAR 0 1
24709: PPUSH
24710: LD_VAR 0 2
24714: PPUSH
24715: LD_VAR 0 3
24719: PPUSH
24720: LD_VAR 0 4
24724: PPUSH
24725: LD_VAR 0 5
24729: PPUSH
24730: CALL_OW 448
24734: IFFALSE 24769
// begin result := [ chassis , engine , control , weapon ] ;
24736: LD_ADDR_VAR 0 6
24740: PUSH
24741: LD_VAR 0 2
24745: PUSH
24746: LD_VAR 0 3
24750: PUSH
24751: LD_VAR 0 4
24755: PUSH
24756: LD_VAR 0 5
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: ST_TO_ADDR
// exit ;
24767: GO 25181
// end ; _chassis := AvailableChassisList ( factory ) ;
24769: LD_ADDR_VAR 0 9
24773: PUSH
24774: LD_VAR 0 1
24778: PPUSH
24779: CALL_OW 475
24783: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24784: LD_ADDR_VAR 0 11
24788: PUSH
24789: LD_VAR 0 1
24793: PPUSH
24794: CALL_OW 476
24798: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24799: LD_ADDR_VAR 0 12
24803: PUSH
24804: LD_VAR 0 1
24808: PPUSH
24809: CALL_OW 477
24813: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24814: LD_ADDR_VAR 0 10
24818: PUSH
24819: LD_VAR 0 1
24823: PPUSH
24824: CALL_OW 478
24828: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24829: LD_VAR 0 9
24833: NOT
24834: PUSH
24835: LD_VAR 0 11
24839: NOT
24840: OR
24841: PUSH
24842: LD_VAR 0 12
24846: NOT
24847: OR
24848: PUSH
24849: LD_VAR 0 10
24853: NOT
24854: OR
24855: IFFALSE 24890
// begin result := [ chassis , engine , control , weapon ] ;
24857: LD_ADDR_VAR 0 6
24861: PUSH
24862: LD_VAR 0 2
24866: PUSH
24867: LD_VAR 0 3
24871: PUSH
24872: LD_VAR 0 4
24876: PUSH
24877: LD_VAR 0 5
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: ST_TO_ADDR
// exit ;
24888: GO 25181
// end ; if not chassis in _chassis then
24890: LD_VAR 0 2
24894: PUSH
24895: LD_VAR 0 9
24899: IN
24900: NOT
24901: IFFALSE 24927
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24903: LD_ADDR_VAR 0 2
24907: PUSH
24908: LD_VAR 0 9
24912: PUSH
24913: LD_INT 1
24915: PPUSH
24916: LD_VAR 0 9
24920: PPUSH
24921: CALL_OW 12
24925: ARRAY
24926: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24927: LD_VAR 0 2
24931: PPUSH
24932: LD_VAR 0 3
24936: PPUSH
24937: CALL 25186 0 2
24941: NOT
24942: IFFALSE 25001
// repeat engine := _engine [ 1 ] ;
24944: LD_ADDR_VAR 0 3
24948: PUSH
24949: LD_VAR 0 11
24953: PUSH
24954: LD_INT 1
24956: ARRAY
24957: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24958: LD_ADDR_VAR 0 11
24962: PUSH
24963: LD_VAR 0 11
24967: PPUSH
24968: LD_INT 1
24970: PPUSH
24971: CALL_OW 3
24975: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24976: LD_VAR 0 2
24980: PPUSH
24981: LD_VAR 0 3
24985: PPUSH
24986: CALL 25186 0 2
24990: PUSH
24991: LD_VAR 0 11
24995: PUSH
24996: EMPTY
24997: EQUAL
24998: OR
24999: IFFALSE 24944
// if not control in _control then
25001: LD_VAR 0 4
25005: PUSH
25006: LD_VAR 0 12
25010: IN
25011: NOT
25012: IFFALSE 25038
// control := _control [ rand ( 1 , _control ) ] ;
25014: LD_ADDR_VAR 0 4
25018: PUSH
25019: LD_VAR 0 12
25023: PUSH
25024: LD_INT 1
25026: PPUSH
25027: LD_VAR 0 12
25031: PPUSH
25032: CALL_OW 12
25036: ARRAY
25037: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25038: LD_VAR 0 2
25042: PPUSH
25043: LD_VAR 0 5
25047: PPUSH
25048: CALL 25406 0 2
25052: NOT
25053: IFFALSE 25112
// repeat weapon := _weapon [ 1 ] ;
25055: LD_ADDR_VAR 0 5
25059: PUSH
25060: LD_VAR 0 10
25064: PUSH
25065: LD_INT 1
25067: ARRAY
25068: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25069: LD_ADDR_VAR 0 10
25073: PUSH
25074: LD_VAR 0 10
25078: PPUSH
25079: LD_INT 1
25081: PPUSH
25082: CALL_OW 3
25086: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25087: LD_VAR 0 2
25091: PPUSH
25092: LD_VAR 0 5
25096: PPUSH
25097: CALL 25406 0 2
25101: PUSH
25102: LD_VAR 0 10
25106: PUSH
25107: EMPTY
25108: EQUAL
25109: OR
25110: IFFALSE 25055
// result := [ ] ;
25112: LD_ADDR_VAR 0 6
25116: PUSH
25117: EMPTY
25118: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25119: LD_VAR 0 1
25123: PPUSH
25124: LD_VAR 0 2
25128: PPUSH
25129: LD_VAR 0 3
25133: PPUSH
25134: LD_VAR 0 4
25138: PPUSH
25139: LD_VAR 0 5
25143: PPUSH
25144: CALL_OW 448
25148: IFFALSE 25181
// result := [ chassis , engine , control , weapon ] ;
25150: LD_ADDR_VAR 0 6
25154: PUSH
25155: LD_VAR 0 2
25159: PUSH
25160: LD_VAR 0 3
25164: PUSH
25165: LD_VAR 0 4
25169: PUSH
25170: LD_VAR 0 5
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: ST_TO_ADDR
// end ;
25181: LD_VAR 0 6
25185: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25186: LD_INT 0
25188: PPUSH
// if not chassis or not engine then
25189: LD_VAR 0 1
25193: NOT
25194: PUSH
25195: LD_VAR 0 2
25199: NOT
25200: OR
25201: IFFALSE 25205
// exit ;
25203: GO 25401
// case engine of engine_solar :
25205: LD_VAR 0 2
25209: PUSH
25210: LD_INT 2
25212: DOUBLE
25213: EQUAL
25214: IFTRUE 25218
25216: GO 25256
25218: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25219: LD_ADDR_VAR 0 3
25223: PUSH
25224: LD_INT 11
25226: PUSH
25227: LD_INT 12
25229: PUSH
25230: LD_INT 13
25232: PUSH
25233: LD_INT 14
25235: PUSH
25236: LD_INT 1
25238: PUSH
25239: LD_INT 2
25241: PUSH
25242: LD_INT 3
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: ST_TO_ADDR
25254: GO 25385
25256: LD_INT 1
25258: DOUBLE
25259: EQUAL
25260: IFTRUE 25264
25262: GO 25326
25264: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25265: LD_ADDR_VAR 0 3
25269: PUSH
25270: LD_INT 11
25272: PUSH
25273: LD_INT 12
25275: PUSH
25276: LD_INT 13
25278: PUSH
25279: LD_INT 14
25281: PUSH
25282: LD_INT 1
25284: PUSH
25285: LD_INT 2
25287: PUSH
25288: LD_INT 3
25290: PUSH
25291: LD_INT 4
25293: PUSH
25294: LD_INT 5
25296: PUSH
25297: LD_INT 21
25299: PUSH
25300: LD_INT 23
25302: PUSH
25303: LD_INT 22
25305: PUSH
25306: LD_INT 24
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: ST_TO_ADDR
25324: GO 25385
25326: LD_INT 3
25328: DOUBLE
25329: EQUAL
25330: IFTRUE 25334
25332: GO 25384
25334: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25335: LD_ADDR_VAR 0 3
25339: PUSH
25340: LD_INT 13
25342: PUSH
25343: LD_INT 14
25345: PUSH
25346: LD_INT 2
25348: PUSH
25349: LD_INT 3
25351: PUSH
25352: LD_INT 4
25354: PUSH
25355: LD_INT 5
25357: PUSH
25358: LD_INT 21
25360: PUSH
25361: LD_INT 22
25363: PUSH
25364: LD_INT 23
25366: PUSH
25367: LD_INT 24
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: ST_TO_ADDR
25382: GO 25385
25384: POP
// result := ( chassis in result ) ;
25385: LD_ADDR_VAR 0 3
25389: PUSH
25390: LD_VAR 0 1
25394: PUSH
25395: LD_VAR 0 3
25399: IN
25400: ST_TO_ADDR
// end ;
25401: LD_VAR 0 3
25405: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25406: LD_INT 0
25408: PPUSH
// if not chassis or not weapon then
25409: LD_VAR 0 1
25413: NOT
25414: PUSH
25415: LD_VAR 0 2
25419: NOT
25420: OR
25421: IFFALSE 25425
// exit ;
25423: GO 26485
// case weapon of us_machine_gun :
25425: LD_VAR 0 2
25429: PUSH
25430: LD_INT 2
25432: DOUBLE
25433: EQUAL
25434: IFTRUE 25438
25436: GO 25468
25438: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25439: LD_ADDR_VAR 0 3
25443: PUSH
25444: LD_INT 1
25446: PUSH
25447: LD_INT 2
25449: PUSH
25450: LD_INT 3
25452: PUSH
25453: LD_INT 4
25455: PUSH
25456: LD_INT 5
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: ST_TO_ADDR
25466: GO 26469
25468: LD_INT 3
25470: DOUBLE
25471: EQUAL
25472: IFTRUE 25476
25474: GO 25506
25476: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25477: LD_ADDR_VAR 0 3
25481: PUSH
25482: LD_INT 1
25484: PUSH
25485: LD_INT 2
25487: PUSH
25488: LD_INT 3
25490: PUSH
25491: LD_INT 4
25493: PUSH
25494: LD_INT 5
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: ST_TO_ADDR
25504: GO 26469
25506: LD_INT 11
25508: DOUBLE
25509: EQUAL
25510: IFTRUE 25514
25512: GO 25544
25514: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25515: LD_ADDR_VAR 0 3
25519: PUSH
25520: LD_INT 1
25522: PUSH
25523: LD_INT 2
25525: PUSH
25526: LD_INT 3
25528: PUSH
25529: LD_INT 4
25531: PUSH
25532: LD_INT 5
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: ST_TO_ADDR
25542: GO 26469
25544: LD_INT 4
25546: DOUBLE
25547: EQUAL
25548: IFTRUE 25552
25550: GO 25578
25552: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25553: LD_ADDR_VAR 0 3
25557: PUSH
25558: LD_INT 2
25560: PUSH
25561: LD_INT 3
25563: PUSH
25564: LD_INT 4
25566: PUSH
25567: LD_INT 5
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: ST_TO_ADDR
25576: GO 26469
25578: LD_INT 5
25580: DOUBLE
25581: EQUAL
25582: IFTRUE 25586
25584: GO 25612
25586: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25587: LD_ADDR_VAR 0 3
25591: PUSH
25592: LD_INT 2
25594: PUSH
25595: LD_INT 3
25597: PUSH
25598: LD_INT 4
25600: PUSH
25601: LD_INT 5
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: ST_TO_ADDR
25610: GO 26469
25612: LD_INT 9
25614: DOUBLE
25615: EQUAL
25616: IFTRUE 25620
25618: GO 25646
25620: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25621: LD_ADDR_VAR 0 3
25625: PUSH
25626: LD_INT 2
25628: PUSH
25629: LD_INT 3
25631: PUSH
25632: LD_INT 4
25634: PUSH
25635: LD_INT 5
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: ST_TO_ADDR
25644: GO 26469
25646: LD_INT 7
25648: DOUBLE
25649: EQUAL
25650: IFTRUE 25654
25652: GO 25680
25654: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25655: LD_ADDR_VAR 0 3
25659: PUSH
25660: LD_INT 2
25662: PUSH
25663: LD_INT 3
25665: PUSH
25666: LD_INT 4
25668: PUSH
25669: LD_INT 5
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: ST_TO_ADDR
25678: GO 26469
25680: LD_INT 12
25682: DOUBLE
25683: EQUAL
25684: IFTRUE 25688
25686: GO 25714
25688: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25689: LD_ADDR_VAR 0 3
25693: PUSH
25694: LD_INT 2
25696: PUSH
25697: LD_INT 3
25699: PUSH
25700: LD_INT 4
25702: PUSH
25703: LD_INT 5
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: ST_TO_ADDR
25712: GO 26469
25714: LD_INT 13
25716: DOUBLE
25717: EQUAL
25718: IFTRUE 25722
25720: GO 25748
25722: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25723: LD_ADDR_VAR 0 3
25727: PUSH
25728: LD_INT 2
25730: PUSH
25731: LD_INT 3
25733: PUSH
25734: LD_INT 4
25736: PUSH
25737: LD_INT 5
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: ST_TO_ADDR
25746: GO 26469
25748: LD_INT 14
25750: DOUBLE
25751: EQUAL
25752: IFTRUE 25756
25754: GO 25774
25756: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25757: LD_ADDR_VAR 0 3
25761: PUSH
25762: LD_INT 4
25764: PUSH
25765: LD_INT 5
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: ST_TO_ADDR
25772: GO 26469
25774: LD_INT 6
25776: DOUBLE
25777: EQUAL
25778: IFTRUE 25782
25780: GO 25800
25782: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25783: LD_ADDR_VAR 0 3
25787: PUSH
25788: LD_INT 4
25790: PUSH
25791: LD_INT 5
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: ST_TO_ADDR
25798: GO 26469
25800: LD_INT 10
25802: DOUBLE
25803: EQUAL
25804: IFTRUE 25808
25806: GO 25826
25808: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25809: LD_ADDR_VAR 0 3
25813: PUSH
25814: LD_INT 4
25816: PUSH
25817: LD_INT 5
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: ST_TO_ADDR
25824: GO 26469
25826: LD_INT 22
25828: DOUBLE
25829: EQUAL
25830: IFTRUE 25834
25832: GO 25860
25834: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25835: LD_ADDR_VAR 0 3
25839: PUSH
25840: LD_INT 11
25842: PUSH
25843: LD_INT 12
25845: PUSH
25846: LD_INT 13
25848: PUSH
25849: LD_INT 14
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: ST_TO_ADDR
25858: GO 26469
25860: LD_INT 23
25862: DOUBLE
25863: EQUAL
25864: IFTRUE 25868
25866: GO 25894
25868: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25869: LD_ADDR_VAR 0 3
25873: PUSH
25874: LD_INT 11
25876: PUSH
25877: LD_INT 12
25879: PUSH
25880: LD_INT 13
25882: PUSH
25883: LD_INT 14
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: ST_TO_ADDR
25892: GO 26469
25894: LD_INT 24
25896: DOUBLE
25897: EQUAL
25898: IFTRUE 25902
25900: GO 25928
25902: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25903: LD_ADDR_VAR 0 3
25907: PUSH
25908: LD_INT 11
25910: PUSH
25911: LD_INT 12
25913: PUSH
25914: LD_INT 13
25916: PUSH
25917: LD_INT 14
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: ST_TO_ADDR
25926: GO 26469
25928: LD_INT 30
25930: DOUBLE
25931: EQUAL
25932: IFTRUE 25936
25934: GO 25962
25936: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25937: LD_ADDR_VAR 0 3
25941: PUSH
25942: LD_INT 11
25944: PUSH
25945: LD_INT 12
25947: PUSH
25948: LD_INT 13
25950: PUSH
25951: LD_INT 14
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: ST_TO_ADDR
25960: GO 26469
25962: LD_INT 25
25964: DOUBLE
25965: EQUAL
25966: IFTRUE 25970
25968: GO 25988
25970: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25971: LD_ADDR_VAR 0 3
25975: PUSH
25976: LD_INT 13
25978: PUSH
25979: LD_INT 14
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: ST_TO_ADDR
25986: GO 26469
25988: LD_INT 27
25990: DOUBLE
25991: EQUAL
25992: IFTRUE 25996
25994: GO 26014
25996: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25997: LD_ADDR_VAR 0 3
26001: PUSH
26002: LD_INT 13
26004: PUSH
26005: LD_INT 14
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: ST_TO_ADDR
26012: GO 26469
26014: LD_INT 92
26016: DOUBLE
26017: EQUAL
26018: IFTRUE 26022
26020: GO 26048
26022: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26023: LD_ADDR_VAR 0 3
26027: PUSH
26028: LD_INT 11
26030: PUSH
26031: LD_INT 12
26033: PUSH
26034: LD_INT 13
26036: PUSH
26037: LD_INT 14
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: ST_TO_ADDR
26046: GO 26469
26048: LD_INT 28
26050: DOUBLE
26051: EQUAL
26052: IFTRUE 26056
26054: GO 26074
26056: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26057: LD_ADDR_VAR 0 3
26061: PUSH
26062: LD_INT 13
26064: PUSH
26065: LD_INT 14
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: ST_TO_ADDR
26072: GO 26469
26074: LD_INT 29
26076: DOUBLE
26077: EQUAL
26078: IFTRUE 26082
26080: GO 26100
26082: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26083: LD_ADDR_VAR 0 3
26087: PUSH
26088: LD_INT 13
26090: PUSH
26091: LD_INT 14
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: ST_TO_ADDR
26098: GO 26469
26100: LD_INT 31
26102: DOUBLE
26103: EQUAL
26104: IFTRUE 26108
26106: GO 26126
26108: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26109: LD_ADDR_VAR 0 3
26113: PUSH
26114: LD_INT 13
26116: PUSH
26117: LD_INT 14
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: ST_TO_ADDR
26124: GO 26469
26126: LD_INT 26
26128: DOUBLE
26129: EQUAL
26130: IFTRUE 26134
26132: GO 26152
26134: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26135: LD_ADDR_VAR 0 3
26139: PUSH
26140: LD_INT 13
26142: PUSH
26143: LD_INT 14
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: ST_TO_ADDR
26150: GO 26469
26152: LD_INT 42
26154: DOUBLE
26155: EQUAL
26156: IFTRUE 26160
26158: GO 26186
26160: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26161: LD_ADDR_VAR 0 3
26165: PUSH
26166: LD_INT 21
26168: PUSH
26169: LD_INT 22
26171: PUSH
26172: LD_INT 23
26174: PUSH
26175: LD_INT 24
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: ST_TO_ADDR
26184: GO 26469
26186: LD_INT 43
26188: DOUBLE
26189: EQUAL
26190: IFTRUE 26194
26192: GO 26220
26194: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26195: LD_ADDR_VAR 0 3
26199: PUSH
26200: LD_INT 21
26202: PUSH
26203: LD_INT 22
26205: PUSH
26206: LD_INT 23
26208: PUSH
26209: LD_INT 24
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: ST_TO_ADDR
26218: GO 26469
26220: LD_INT 44
26222: DOUBLE
26223: EQUAL
26224: IFTRUE 26228
26226: GO 26254
26228: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26229: LD_ADDR_VAR 0 3
26233: PUSH
26234: LD_INT 21
26236: PUSH
26237: LD_INT 22
26239: PUSH
26240: LD_INT 23
26242: PUSH
26243: LD_INT 24
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: ST_TO_ADDR
26252: GO 26469
26254: LD_INT 45
26256: DOUBLE
26257: EQUAL
26258: IFTRUE 26262
26260: GO 26288
26262: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26263: LD_ADDR_VAR 0 3
26267: PUSH
26268: LD_INT 21
26270: PUSH
26271: LD_INT 22
26273: PUSH
26274: LD_INT 23
26276: PUSH
26277: LD_INT 24
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: ST_TO_ADDR
26286: GO 26469
26288: LD_INT 49
26290: DOUBLE
26291: EQUAL
26292: IFTRUE 26296
26294: GO 26322
26296: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26297: LD_ADDR_VAR 0 3
26301: PUSH
26302: LD_INT 21
26304: PUSH
26305: LD_INT 22
26307: PUSH
26308: LD_INT 23
26310: PUSH
26311: LD_INT 24
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: ST_TO_ADDR
26320: GO 26469
26322: LD_INT 51
26324: DOUBLE
26325: EQUAL
26326: IFTRUE 26330
26328: GO 26356
26330: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26331: LD_ADDR_VAR 0 3
26335: PUSH
26336: LD_INT 21
26338: PUSH
26339: LD_INT 22
26341: PUSH
26342: LD_INT 23
26344: PUSH
26345: LD_INT 24
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: ST_TO_ADDR
26354: GO 26469
26356: LD_INT 52
26358: DOUBLE
26359: EQUAL
26360: IFTRUE 26364
26362: GO 26390
26364: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26365: LD_ADDR_VAR 0 3
26369: PUSH
26370: LD_INT 21
26372: PUSH
26373: LD_INT 22
26375: PUSH
26376: LD_INT 23
26378: PUSH
26379: LD_INT 24
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: ST_TO_ADDR
26388: GO 26469
26390: LD_INT 53
26392: DOUBLE
26393: EQUAL
26394: IFTRUE 26398
26396: GO 26416
26398: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26399: LD_ADDR_VAR 0 3
26403: PUSH
26404: LD_INT 23
26406: PUSH
26407: LD_INT 24
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: ST_TO_ADDR
26414: GO 26469
26416: LD_INT 46
26418: DOUBLE
26419: EQUAL
26420: IFTRUE 26424
26422: GO 26442
26424: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26425: LD_ADDR_VAR 0 3
26429: PUSH
26430: LD_INT 23
26432: PUSH
26433: LD_INT 24
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: ST_TO_ADDR
26440: GO 26469
26442: LD_INT 47
26444: DOUBLE
26445: EQUAL
26446: IFTRUE 26450
26448: GO 26468
26450: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26451: LD_ADDR_VAR 0 3
26455: PUSH
26456: LD_INT 23
26458: PUSH
26459: LD_INT 24
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: ST_TO_ADDR
26466: GO 26469
26468: POP
// result := ( chassis in result ) ;
26469: LD_ADDR_VAR 0 3
26473: PUSH
26474: LD_VAR 0 1
26478: PUSH
26479: LD_VAR 0 3
26483: IN
26484: ST_TO_ADDR
// end ;
26485: LD_VAR 0 3
26489: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26490: LD_INT 0
26492: PPUSH
26493: PPUSH
26494: PPUSH
26495: PPUSH
26496: PPUSH
26497: PPUSH
26498: PPUSH
// result := array ;
26499: LD_ADDR_VAR 0 5
26503: PUSH
26504: LD_VAR 0 1
26508: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26509: LD_VAR 0 1
26513: NOT
26514: PUSH
26515: LD_VAR 0 2
26519: NOT
26520: OR
26521: PUSH
26522: LD_VAR 0 3
26526: NOT
26527: OR
26528: PUSH
26529: LD_VAR 0 2
26533: PUSH
26534: LD_VAR 0 1
26538: GREATER
26539: OR
26540: PUSH
26541: LD_VAR 0 3
26545: PUSH
26546: LD_VAR 0 1
26550: GREATER
26551: OR
26552: IFFALSE 26556
// exit ;
26554: GO 26852
// if direction then
26556: LD_VAR 0 4
26560: IFFALSE 26624
// begin d := 1 ;
26562: LD_ADDR_VAR 0 9
26566: PUSH
26567: LD_INT 1
26569: ST_TO_ADDR
// if i_from > i_to then
26570: LD_VAR 0 2
26574: PUSH
26575: LD_VAR 0 3
26579: GREATER
26580: IFFALSE 26606
// length := ( array - i_from ) + i_to else
26582: LD_ADDR_VAR 0 11
26586: PUSH
26587: LD_VAR 0 1
26591: PUSH
26592: LD_VAR 0 2
26596: MINUS
26597: PUSH
26598: LD_VAR 0 3
26602: PLUS
26603: ST_TO_ADDR
26604: GO 26622
// length := i_to - i_from ;
26606: LD_ADDR_VAR 0 11
26610: PUSH
26611: LD_VAR 0 3
26615: PUSH
26616: LD_VAR 0 2
26620: MINUS
26621: ST_TO_ADDR
// end else
26622: GO 26685
// begin d := - 1 ;
26624: LD_ADDR_VAR 0 9
26628: PUSH
26629: LD_INT 1
26631: NEG
26632: ST_TO_ADDR
// if i_from > i_to then
26633: LD_VAR 0 2
26637: PUSH
26638: LD_VAR 0 3
26642: GREATER
26643: IFFALSE 26663
// length := i_from - i_to else
26645: LD_ADDR_VAR 0 11
26649: PUSH
26650: LD_VAR 0 2
26654: PUSH
26655: LD_VAR 0 3
26659: MINUS
26660: ST_TO_ADDR
26661: GO 26685
// length := ( array - i_to ) + i_from ;
26663: LD_ADDR_VAR 0 11
26667: PUSH
26668: LD_VAR 0 1
26672: PUSH
26673: LD_VAR 0 3
26677: MINUS
26678: PUSH
26679: LD_VAR 0 2
26683: PLUS
26684: ST_TO_ADDR
// end ; if not length then
26685: LD_VAR 0 11
26689: NOT
26690: IFFALSE 26694
// exit ;
26692: GO 26852
// tmp := array ;
26694: LD_ADDR_VAR 0 10
26698: PUSH
26699: LD_VAR 0 1
26703: ST_TO_ADDR
// for i = 1 to length do
26704: LD_ADDR_VAR 0 6
26708: PUSH
26709: DOUBLE
26710: LD_INT 1
26712: DEC
26713: ST_TO_ADDR
26714: LD_VAR 0 11
26718: PUSH
26719: FOR_TO
26720: IFFALSE 26840
// begin for j = 1 to array do
26722: LD_ADDR_VAR 0 7
26726: PUSH
26727: DOUBLE
26728: LD_INT 1
26730: DEC
26731: ST_TO_ADDR
26732: LD_VAR 0 1
26736: PUSH
26737: FOR_TO
26738: IFFALSE 26826
// begin k := j + d ;
26740: LD_ADDR_VAR 0 8
26744: PUSH
26745: LD_VAR 0 7
26749: PUSH
26750: LD_VAR 0 9
26754: PLUS
26755: ST_TO_ADDR
// if k > array then
26756: LD_VAR 0 8
26760: PUSH
26761: LD_VAR 0 1
26765: GREATER
26766: IFFALSE 26776
// k := 1 ;
26768: LD_ADDR_VAR 0 8
26772: PUSH
26773: LD_INT 1
26775: ST_TO_ADDR
// if not k then
26776: LD_VAR 0 8
26780: NOT
26781: IFFALSE 26793
// k := array ;
26783: LD_ADDR_VAR 0 8
26787: PUSH
26788: LD_VAR 0 1
26792: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26793: LD_ADDR_VAR 0 10
26797: PUSH
26798: LD_VAR 0 10
26802: PPUSH
26803: LD_VAR 0 8
26807: PPUSH
26808: LD_VAR 0 1
26812: PUSH
26813: LD_VAR 0 7
26817: ARRAY
26818: PPUSH
26819: CALL_OW 1
26823: ST_TO_ADDR
// end ;
26824: GO 26737
26826: POP
26827: POP
// array := tmp ;
26828: LD_ADDR_VAR 0 1
26832: PUSH
26833: LD_VAR 0 10
26837: ST_TO_ADDR
// end ;
26838: GO 26719
26840: POP
26841: POP
// result := array ;
26842: LD_ADDR_VAR 0 5
26846: PUSH
26847: LD_VAR 0 1
26851: ST_TO_ADDR
// end ;
26852: LD_VAR 0 5
26856: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26857: LD_INT 0
26859: PPUSH
26860: PPUSH
// result := 0 ;
26861: LD_ADDR_VAR 0 3
26865: PUSH
26866: LD_INT 0
26868: ST_TO_ADDR
// if not array or not value in array then
26869: LD_VAR 0 1
26873: NOT
26874: PUSH
26875: LD_VAR 0 2
26879: PUSH
26880: LD_VAR 0 1
26884: IN
26885: NOT
26886: OR
26887: IFFALSE 26891
// exit ;
26889: GO 26945
// for i = 1 to array do
26891: LD_ADDR_VAR 0 4
26895: PUSH
26896: DOUBLE
26897: LD_INT 1
26899: DEC
26900: ST_TO_ADDR
26901: LD_VAR 0 1
26905: PUSH
26906: FOR_TO
26907: IFFALSE 26943
// if value = array [ i ] then
26909: LD_VAR 0 2
26913: PUSH
26914: LD_VAR 0 1
26918: PUSH
26919: LD_VAR 0 4
26923: ARRAY
26924: EQUAL
26925: IFFALSE 26941
// begin result := i ;
26927: LD_ADDR_VAR 0 3
26931: PUSH
26932: LD_VAR 0 4
26936: ST_TO_ADDR
// exit ;
26937: POP
26938: POP
26939: GO 26945
// end ;
26941: GO 26906
26943: POP
26944: POP
// end ;
26945: LD_VAR 0 3
26949: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26950: LD_INT 0
26952: PPUSH
// vc_chassis := chassis ;
26953: LD_ADDR_OWVAR 37
26957: PUSH
26958: LD_VAR 0 1
26962: ST_TO_ADDR
// vc_engine := engine ;
26963: LD_ADDR_OWVAR 39
26967: PUSH
26968: LD_VAR 0 2
26972: ST_TO_ADDR
// vc_control := control ;
26973: LD_ADDR_OWVAR 38
26977: PUSH
26978: LD_VAR 0 3
26982: ST_TO_ADDR
// vc_weapon := weapon ;
26983: LD_ADDR_OWVAR 40
26987: PUSH
26988: LD_VAR 0 4
26992: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26993: LD_ADDR_OWVAR 41
26997: PUSH
26998: LD_VAR 0 5
27002: ST_TO_ADDR
// end ;
27003: LD_VAR 0 6
27007: RET
// export function WantPlant ( unit ) ; var task ; begin
27008: LD_INT 0
27010: PPUSH
27011: PPUSH
// result := false ;
27012: LD_ADDR_VAR 0 2
27016: PUSH
27017: LD_INT 0
27019: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27020: LD_ADDR_VAR 0 3
27024: PUSH
27025: LD_VAR 0 1
27029: PPUSH
27030: CALL_OW 437
27034: ST_TO_ADDR
// if task then
27035: LD_VAR 0 3
27039: IFFALSE 27067
// if task [ 1 ] [ 1 ] = p then
27041: LD_VAR 0 3
27045: PUSH
27046: LD_INT 1
27048: ARRAY
27049: PUSH
27050: LD_INT 1
27052: ARRAY
27053: PUSH
27054: LD_STRING p
27056: EQUAL
27057: IFFALSE 27067
// result := true ;
27059: LD_ADDR_VAR 0 2
27063: PUSH
27064: LD_INT 1
27066: ST_TO_ADDR
// end ;
27067: LD_VAR 0 2
27071: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27072: LD_INT 0
27074: PPUSH
27075: PPUSH
27076: PPUSH
27077: PPUSH
// if pos < 1 then
27078: LD_VAR 0 2
27082: PUSH
27083: LD_INT 1
27085: LESS
27086: IFFALSE 27090
// exit ;
27088: GO 27393
// if pos = 1 then
27090: LD_VAR 0 2
27094: PUSH
27095: LD_INT 1
27097: EQUAL
27098: IFFALSE 27131
// result := Replace ( arr , pos [ 1 ] , value ) else
27100: LD_ADDR_VAR 0 4
27104: PUSH
27105: LD_VAR 0 1
27109: PPUSH
27110: LD_VAR 0 2
27114: PUSH
27115: LD_INT 1
27117: ARRAY
27118: PPUSH
27119: LD_VAR 0 3
27123: PPUSH
27124: CALL_OW 1
27128: ST_TO_ADDR
27129: GO 27393
// begin tmp := arr ;
27131: LD_ADDR_VAR 0 6
27135: PUSH
27136: LD_VAR 0 1
27140: ST_TO_ADDR
// s_arr := [ tmp ] ;
27141: LD_ADDR_VAR 0 7
27145: PUSH
27146: LD_VAR 0 6
27150: PUSH
27151: EMPTY
27152: LIST
27153: ST_TO_ADDR
// for i = 1 to pos - 1 do
27154: LD_ADDR_VAR 0 5
27158: PUSH
27159: DOUBLE
27160: LD_INT 1
27162: DEC
27163: ST_TO_ADDR
27164: LD_VAR 0 2
27168: PUSH
27169: LD_INT 1
27171: MINUS
27172: PUSH
27173: FOR_TO
27174: IFFALSE 27219
// begin tmp := tmp [ pos [ i ] ] ;
27176: LD_ADDR_VAR 0 6
27180: PUSH
27181: LD_VAR 0 6
27185: PUSH
27186: LD_VAR 0 2
27190: PUSH
27191: LD_VAR 0 5
27195: ARRAY
27196: ARRAY
27197: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27198: LD_ADDR_VAR 0 7
27202: PUSH
27203: LD_VAR 0 7
27207: PUSH
27208: LD_VAR 0 6
27212: PUSH
27213: EMPTY
27214: LIST
27215: ADD
27216: ST_TO_ADDR
// end ;
27217: GO 27173
27219: POP
27220: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27221: LD_ADDR_VAR 0 6
27225: PUSH
27226: LD_VAR 0 6
27230: PPUSH
27231: LD_VAR 0 2
27235: PUSH
27236: LD_VAR 0 2
27240: ARRAY
27241: PPUSH
27242: LD_VAR 0 3
27246: PPUSH
27247: CALL_OW 1
27251: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27252: LD_ADDR_VAR 0 7
27256: PUSH
27257: LD_VAR 0 7
27261: PPUSH
27262: LD_VAR 0 7
27266: PPUSH
27267: LD_VAR 0 6
27271: PPUSH
27272: CALL_OW 1
27276: ST_TO_ADDR
// for i = s_arr downto 2 do
27277: LD_ADDR_VAR 0 5
27281: PUSH
27282: DOUBLE
27283: LD_VAR 0 7
27287: INC
27288: ST_TO_ADDR
27289: LD_INT 2
27291: PUSH
27292: FOR_DOWNTO
27293: IFFALSE 27377
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27295: LD_ADDR_VAR 0 6
27299: PUSH
27300: LD_VAR 0 7
27304: PUSH
27305: LD_VAR 0 5
27309: PUSH
27310: LD_INT 1
27312: MINUS
27313: ARRAY
27314: PPUSH
27315: LD_VAR 0 2
27319: PUSH
27320: LD_VAR 0 5
27324: PUSH
27325: LD_INT 1
27327: MINUS
27328: ARRAY
27329: PPUSH
27330: LD_VAR 0 7
27334: PUSH
27335: LD_VAR 0 5
27339: ARRAY
27340: PPUSH
27341: CALL_OW 1
27345: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27346: LD_ADDR_VAR 0 7
27350: PUSH
27351: LD_VAR 0 7
27355: PPUSH
27356: LD_VAR 0 5
27360: PUSH
27361: LD_INT 1
27363: MINUS
27364: PPUSH
27365: LD_VAR 0 6
27369: PPUSH
27370: CALL_OW 1
27374: ST_TO_ADDR
// end ;
27375: GO 27292
27377: POP
27378: POP
// result := s_arr [ 1 ] ;
27379: LD_ADDR_VAR 0 4
27383: PUSH
27384: LD_VAR 0 7
27388: PUSH
27389: LD_INT 1
27391: ARRAY
27392: ST_TO_ADDR
// end ; end ;
27393: LD_VAR 0 4
27397: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27398: LD_INT 0
27400: PPUSH
27401: PPUSH
// if not list then
27402: LD_VAR 0 1
27406: NOT
27407: IFFALSE 27411
// exit ;
27409: GO 27502
// i := list [ pos1 ] ;
27411: LD_ADDR_VAR 0 5
27415: PUSH
27416: LD_VAR 0 1
27420: PUSH
27421: LD_VAR 0 2
27425: ARRAY
27426: ST_TO_ADDR
// if not i then
27427: LD_VAR 0 5
27431: NOT
27432: IFFALSE 27436
// exit ;
27434: GO 27502
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27436: LD_ADDR_VAR 0 1
27440: PUSH
27441: LD_VAR 0 1
27445: PPUSH
27446: LD_VAR 0 2
27450: PPUSH
27451: LD_VAR 0 1
27455: PUSH
27456: LD_VAR 0 3
27460: ARRAY
27461: PPUSH
27462: CALL_OW 1
27466: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27467: LD_ADDR_VAR 0 1
27471: PUSH
27472: LD_VAR 0 1
27476: PPUSH
27477: LD_VAR 0 3
27481: PPUSH
27482: LD_VAR 0 5
27486: PPUSH
27487: CALL_OW 1
27491: ST_TO_ADDR
// result := list ;
27492: LD_ADDR_VAR 0 4
27496: PUSH
27497: LD_VAR 0 1
27501: ST_TO_ADDR
// end ;
27502: LD_VAR 0 4
27506: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27507: LD_INT 0
27509: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27510: LD_ADDR_VAR 0 5
27514: PUSH
27515: LD_VAR 0 1
27519: PPUSH
27520: CALL_OW 250
27524: PPUSH
27525: LD_VAR 0 1
27529: PPUSH
27530: CALL_OW 251
27534: PPUSH
27535: LD_VAR 0 2
27539: PPUSH
27540: LD_VAR 0 3
27544: PPUSH
27545: LD_VAR 0 4
27549: PPUSH
27550: CALL 27983 0 5
27554: ST_TO_ADDR
// end ;
27555: LD_VAR 0 5
27559: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
27560: LD_INT 0
27562: PPUSH
27563: PPUSH
27564: PPUSH
27565: PPUSH
// if not list or not unit then
27566: LD_VAR 0 2
27570: NOT
27571: PUSH
27572: LD_VAR 0 1
27576: NOT
27577: OR
27578: IFFALSE 27582
// exit ;
27580: GO 27978
// result := [ ] ;
27582: LD_ADDR_VAR 0 5
27586: PUSH
27587: EMPTY
27588: ST_TO_ADDR
// for i in list do
27589: LD_ADDR_VAR 0 6
27593: PUSH
27594: LD_VAR 0 2
27598: PUSH
27599: FOR_IN
27600: IFFALSE 27810
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
27602: LD_ADDR_VAR 0 8
27606: PUSH
27607: LD_VAR 0 1
27611: PPUSH
27612: LD_VAR 0 6
27616: PUSH
27617: LD_INT 1
27619: ARRAY
27620: PPUSH
27621: LD_VAR 0 6
27625: PUSH
27626: LD_INT 2
27628: ARRAY
27629: PPUSH
27630: CALL_OW 297
27634: ST_TO_ADDR
// if not result then
27635: LD_VAR 0 5
27639: NOT
27640: IFFALSE 27666
// result := [ [ i , tmp ] ] else
27642: LD_ADDR_VAR 0 5
27646: PUSH
27647: LD_VAR 0 6
27651: PUSH
27652: LD_VAR 0 8
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: EMPTY
27662: LIST
27663: ST_TO_ADDR
27664: GO 27808
// begin if result [ result ] [ 2 ] < tmp then
27666: LD_VAR 0 5
27670: PUSH
27671: LD_VAR 0 5
27675: ARRAY
27676: PUSH
27677: LD_INT 2
27679: ARRAY
27680: PUSH
27681: LD_VAR 0 8
27685: LESS
27686: IFFALSE 27728
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27688: LD_ADDR_VAR 0 5
27692: PUSH
27693: LD_VAR 0 5
27697: PPUSH
27698: LD_VAR 0 5
27702: PUSH
27703: LD_INT 1
27705: PLUS
27706: PPUSH
27707: LD_VAR 0 6
27711: PUSH
27712: LD_VAR 0 8
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PPUSH
27721: CALL_OW 2
27725: ST_TO_ADDR
27726: GO 27808
// for j := 1 to result do
27728: LD_ADDR_VAR 0 7
27732: PUSH
27733: DOUBLE
27734: LD_INT 1
27736: DEC
27737: ST_TO_ADDR
27738: LD_VAR 0 5
27742: PUSH
27743: FOR_TO
27744: IFFALSE 27806
// begin if tmp < result [ j ] [ 2 ] then
27746: LD_VAR 0 8
27750: PUSH
27751: LD_VAR 0 5
27755: PUSH
27756: LD_VAR 0 7
27760: ARRAY
27761: PUSH
27762: LD_INT 2
27764: ARRAY
27765: LESS
27766: IFFALSE 27804
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27768: LD_ADDR_VAR 0 5
27772: PUSH
27773: LD_VAR 0 5
27777: PPUSH
27778: LD_VAR 0 7
27782: PPUSH
27783: LD_VAR 0 6
27787: PUSH
27788: LD_VAR 0 8
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PPUSH
27797: CALL_OW 2
27801: ST_TO_ADDR
// break ;
27802: GO 27806
// end ; end ;
27804: GO 27743
27806: POP
27807: POP
// end ; end ;
27808: GO 27599
27810: POP
27811: POP
// if result and not asc then
27812: LD_VAR 0 5
27816: PUSH
27817: LD_VAR 0 3
27821: NOT
27822: AND
27823: IFFALSE 27898
// begin tmp := result ;
27825: LD_ADDR_VAR 0 8
27829: PUSH
27830: LD_VAR 0 5
27834: ST_TO_ADDR
// for i = tmp downto 1 do
27835: LD_ADDR_VAR 0 6
27839: PUSH
27840: DOUBLE
27841: LD_VAR 0 8
27845: INC
27846: ST_TO_ADDR
27847: LD_INT 1
27849: PUSH
27850: FOR_DOWNTO
27851: IFFALSE 27896
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27853: LD_ADDR_VAR 0 5
27857: PUSH
27858: LD_VAR 0 5
27862: PPUSH
27863: LD_VAR 0 8
27867: PUSH
27868: LD_VAR 0 6
27872: MINUS
27873: PUSH
27874: LD_INT 1
27876: PLUS
27877: PPUSH
27878: LD_VAR 0 8
27882: PUSH
27883: LD_VAR 0 6
27887: ARRAY
27888: PPUSH
27889: CALL_OW 1
27893: ST_TO_ADDR
27894: GO 27850
27896: POP
27897: POP
// end ; tmp := [ ] ;
27898: LD_ADDR_VAR 0 8
27902: PUSH
27903: EMPTY
27904: ST_TO_ADDR
// if mode then
27905: LD_VAR 0 4
27909: IFFALSE 27978
// begin for i = 1 to result do
27911: LD_ADDR_VAR 0 6
27915: PUSH
27916: DOUBLE
27917: LD_INT 1
27919: DEC
27920: ST_TO_ADDR
27921: LD_VAR 0 5
27925: PUSH
27926: FOR_TO
27927: IFFALSE 27966
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27929: LD_ADDR_VAR 0 8
27933: PUSH
27934: LD_VAR 0 8
27938: PPUSH
27939: LD_VAR 0 6
27943: PPUSH
27944: LD_VAR 0 5
27948: PUSH
27949: LD_VAR 0 6
27953: ARRAY
27954: PUSH
27955: LD_INT 1
27957: ARRAY
27958: PPUSH
27959: CALL_OW 1
27963: ST_TO_ADDR
27964: GO 27926
27966: POP
27967: POP
// result := tmp ;
27968: LD_ADDR_VAR 0 5
27972: PUSH
27973: LD_VAR 0 8
27977: ST_TO_ADDR
// end ; end ;
27978: LD_VAR 0 5
27982: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27983: LD_INT 0
27985: PPUSH
27986: PPUSH
27987: PPUSH
27988: PPUSH
// if not list then
27989: LD_VAR 0 3
27993: NOT
27994: IFFALSE 27998
// exit ;
27996: GO 28386
// result := [ ] ;
27998: LD_ADDR_VAR 0 6
28002: PUSH
28003: EMPTY
28004: ST_TO_ADDR
// for i in list do
28005: LD_ADDR_VAR 0 7
28009: PUSH
28010: LD_VAR 0 3
28014: PUSH
28015: FOR_IN
28016: IFFALSE 28218
// begin tmp := GetDistUnitXY ( i , x , y ) ;
28018: LD_ADDR_VAR 0 9
28022: PUSH
28023: LD_VAR 0 7
28027: PPUSH
28028: LD_VAR 0 1
28032: PPUSH
28033: LD_VAR 0 2
28037: PPUSH
28038: CALL_OW 297
28042: ST_TO_ADDR
// if not result then
28043: LD_VAR 0 6
28047: NOT
28048: IFFALSE 28074
// result := [ [ i , tmp ] ] else
28050: LD_ADDR_VAR 0 6
28054: PUSH
28055: LD_VAR 0 7
28059: PUSH
28060: LD_VAR 0 9
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: EMPTY
28070: LIST
28071: ST_TO_ADDR
28072: GO 28216
// begin if result [ result ] [ 2 ] < tmp then
28074: LD_VAR 0 6
28078: PUSH
28079: LD_VAR 0 6
28083: ARRAY
28084: PUSH
28085: LD_INT 2
28087: ARRAY
28088: PUSH
28089: LD_VAR 0 9
28093: LESS
28094: IFFALSE 28136
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28096: LD_ADDR_VAR 0 6
28100: PUSH
28101: LD_VAR 0 6
28105: PPUSH
28106: LD_VAR 0 6
28110: PUSH
28111: LD_INT 1
28113: PLUS
28114: PPUSH
28115: LD_VAR 0 7
28119: PUSH
28120: LD_VAR 0 9
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PPUSH
28129: CALL_OW 2
28133: ST_TO_ADDR
28134: GO 28216
// for j = 1 to result do
28136: LD_ADDR_VAR 0 8
28140: PUSH
28141: DOUBLE
28142: LD_INT 1
28144: DEC
28145: ST_TO_ADDR
28146: LD_VAR 0 6
28150: PUSH
28151: FOR_TO
28152: IFFALSE 28214
// begin if tmp < result [ j ] [ 2 ] then
28154: LD_VAR 0 9
28158: PUSH
28159: LD_VAR 0 6
28163: PUSH
28164: LD_VAR 0 8
28168: ARRAY
28169: PUSH
28170: LD_INT 2
28172: ARRAY
28173: LESS
28174: IFFALSE 28212
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28176: LD_ADDR_VAR 0 6
28180: PUSH
28181: LD_VAR 0 6
28185: PPUSH
28186: LD_VAR 0 8
28190: PPUSH
28191: LD_VAR 0 7
28195: PUSH
28196: LD_VAR 0 9
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PPUSH
28205: CALL_OW 2
28209: ST_TO_ADDR
// break ;
28210: GO 28214
// end ; end ;
28212: GO 28151
28214: POP
28215: POP
// end ; end ;
28216: GO 28015
28218: POP
28219: POP
// if result and not asc then
28220: LD_VAR 0 6
28224: PUSH
28225: LD_VAR 0 4
28229: NOT
28230: AND
28231: IFFALSE 28306
// begin tmp := result ;
28233: LD_ADDR_VAR 0 9
28237: PUSH
28238: LD_VAR 0 6
28242: ST_TO_ADDR
// for i = tmp downto 1 do
28243: LD_ADDR_VAR 0 7
28247: PUSH
28248: DOUBLE
28249: LD_VAR 0 9
28253: INC
28254: ST_TO_ADDR
28255: LD_INT 1
28257: PUSH
28258: FOR_DOWNTO
28259: IFFALSE 28304
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28261: LD_ADDR_VAR 0 6
28265: PUSH
28266: LD_VAR 0 6
28270: PPUSH
28271: LD_VAR 0 9
28275: PUSH
28276: LD_VAR 0 7
28280: MINUS
28281: PUSH
28282: LD_INT 1
28284: PLUS
28285: PPUSH
28286: LD_VAR 0 9
28290: PUSH
28291: LD_VAR 0 7
28295: ARRAY
28296: PPUSH
28297: CALL_OW 1
28301: ST_TO_ADDR
28302: GO 28258
28304: POP
28305: POP
// end ; tmp := [ ] ;
28306: LD_ADDR_VAR 0 9
28310: PUSH
28311: EMPTY
28312: ST_TO_ADDR
// if mode then
28313: LD_VAR 0 5
28317: IFFALSE 28386
// begin for i = 1 to result do
28319: LD_ADDR_VAR 0 7
28323: PUSH
28324: DOUBLE
28325: LD_INT 1
28327: DEC
28328: ST_TO_ADDR
28329: LD_VAR 0 6
28333: PUSH
28334: FOR_TO
28335: IFFALSE 28374
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28337: LD_ADDR_VAR 0 9
28341: PUSH
28342: LD_VAR 0 9
28346: PPUSH
28347: LD_VAR 0 7
28351: PPUSH
28352: LD_VAR 0 6
28356: PUSH
28357: LD_VAR 0 7
28361: ARRAY
28362: PUSH
28363: LD_INT 1
28365: ARRAY
28366: PPUSH
28367: CALL_OW 1
28371: ST_TO_ADDR
28372: GO 28334
28374: POP
28375: POP
// result := tmp ;
28376: LD_ADDR_VAR 0 6
28380: PUSH
28381: LD_VAR 0 9
28385: ST_TO_ADDR
// end ; end ;
28386: LD_VAR 0 6
28390: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28391: LD_INT 0
28393: PPUSH
28394: PPUSH
28395: PPUSH
28396: PPUSH
28397: PPUSH
28398: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28399: LD_ADDR_VAR 0 5
28403: PUSH
28404: LD_INT 0
28406: PUSH
28407: LD_INT 0
28409: PUSH
28410: LD_INT 0
28412: PUSH
28413: EMPTY
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: ST_TO_ADDR
// if not x or not y then
28421: LD_VAR 0 2
28425: NOT
28426: PUSH
28427: LD_VAR 0 3
28431: NOT
28432: OR
28433: IFFALSE 28437
// exit ;
28435: GO 30087
// if not range then
28437: LD_VAR 0 4
28441: NOT
28442: IFFALSE 28452
// range := 10 ;
28444: LD_ADDR_VAR 0 4
28448: PUSH
28449: LD_INT 10
28451: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28452: LD_ADDR_VAR 0 8
28456: PUSH
28457: LD_INT 81
28459: PUSH
28460: LD_VAR 0 1
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 92
28471: PUSH
28472: LD_VAR 0 2
28476: PUSH
28477: LD_VAR 0 3
28481: PUSH
28482: LD_VAR 0 4
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 3
28495: PUSH
28496: LD_INT 21
28498: PUSH
28499: LD_INT 3
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: LIST
28514: PPUSH
28515: CALL_OW 69
28519: ST_TO_ADDR
// if not tmp then
28520: LD_VAR 0 8
28524: NOT
28525: IFFALSE 28529
// exit ;
28527: GO 30087
// for i in tmp do
28529: LD_ADDR_VAR 0 6
28533: PUSH
28534: LD_VAR 0 8
28538: PUSH
28539: FOR_IN
28540: IFFALSE 30062
// begin points := [ 0 , 0 , 0 ] ;
28542: LD_ADDR_VAR 0 9
28546: PUSH
28547: LD_INT 0
28549: PUSH
28550: LD_INT 0
28552: PUSH
28553: LD_INT 0
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: LIST
28560: ST_TO_ADDR
// bpoints := 1 ;
28561: LD_ADDR_VAR 0 10
28565: PUSH
28566: LD_INT 1
28568: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28569: LD_VAR 0 6
28573: PPUSH
28574: CALL_OW 247
28578: PUSH
28579: LD_INT 1
28581: DOUBLE
28582: EQUAL
28583: IFTRUE 28587
28585: GO 29165
28587: POP
// begin if GetClass ( i ) = 1 then
28588: LD_VAR 0 6
28592: PPUSH
28593: CALL_OW 257
28597: PUSH
28598: LD_INT 1
28600: EQUAL
28601: IFFALSE 28622
// points := [ 10 , 5 , 3 ] ;
28603: LD_ADDR_VAR 0 9
28607: PUSH
28608: LD_INT 10
28610: PUSH
28611: LD_INT 5
28613: PUSH
28614: LD_INT 3
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: LIST
28621: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28622: LD_VAR 0 6
28626: PPUSH
28627: CALL_OW 257
28631: PUSH
28632: LD_INT 2
28634: PUSH
28635: LD_INT 3
28637: PUSH
28638: LD_INT 4
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: LIST
28645: IN
28646: IFFALSE 28667
// points := [ 3 , 2 , 1 ] ;
28648: LD_ADDR_VAR 0 9
28652: PUSH
28653: LD_INT 3
28655: PUSH
28656: LD_INT 2
28658: PUSH
28659: LD_INT 1
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: LIST
28666: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28667: LD_VAR 0 6
28671: PPUSH
28672: CALL_OW 257
28676: PUSH
28677: LD_INT 5
28679: EQUAL
28680: IFFALSE 28701
// points := [ 130 , 5 , 2 ] ;
28682: LD_ADDR_VAR 0 9
28686: PUSH
28687: LD_INT 130
28689: PUSH
28690: LD_INT 5
28692: PUSH
28693: LD_INT 2
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: LIST
28700: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28701: LD_VAR 0 6
28705: PPUSH
28706: CALL_OW 257
28710: PUSH
28711: LD_INT 8
28713: EQUAL
28714: IFFALSE 28735
// points := [ 35 , 35 , 30 ] ;
28716: LD_ADDR_VAR 0 9
28720: PUSH
28721: LD_INT 35
28723: PUSH
28724: LD_INT 35
28726: PUSH
28727: LD_INT 30
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: LIST
28734: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28735: LD_VAR 0 6
28739: PPUSH
28740: CALL_OW 257
28744: PUSH
28745: LD_INT 9
28747: EQUAL
28748: IFFALSE 28769
// points := [ 20 , 55 , 40 ] ;
28750: LD_ADDR_VAR 0 9
28754: PUSH
28755: LD_INT 20
28757: PUSH
28758: LD_INT 55
28760: PUSH
28761: LD_INT 40
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: LIST
28768: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28769: LD_VAR 0 6
28773: PPUSH
28774: CALL_OW 257
28778: PUSH
28779: LD_INT 12
28781: PUSH
28782: LD_INT 16
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: IN
28789: IFFALSE 28810
// points := [ 5 , 3 , 2 ] ;
28791: LD_ADDR_VAR 0 9
28795: PUSH
28796: LD_INT 5
28798: PUSH
28799: LD_INT 3
28801: PUSH
28802: LD_INT 2
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: LIST
28809: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28810: LD_VAR 0 6
28814: PPUSH
28815: CALL_OW 257
28819: PUSH
28820: LD_INT 17
28822: EQUAL
28823: IFFALSE 28844
// points := [ 100 , 50 , 75 ] ;
28825: LD_ADDR_VAR 0 9
28829: PUSH
28830: LD_INT 100
28832: PUSH
28833: LD_INT 50
28835: PUSH
28836: LD_INT 75
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: LIST
28843: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28844: LD_VAR 0 6
28848: PPUSH
28849: CALL_OW 257
28853: PUSH
28854: LD_INT 15
28856: EQUAL
28857: IFFALSE 28878
// points := [ 10 , 5 , 3 ] ;
28859: LD_ADDR_VAR 0 9
28863: PUSH
28864: LD_INT 10
28866: PUSH
28867: LD_INT 5
28869: PUSH
28870: LD_INT 3
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: LIST
28877: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28878: LD_VAR 0 6
28882: PPUSH
28883: CALL_OW 257
28887: PUSH
28888: LD_INT 14
28890: EQUAL
28891: IFFALSE 28912
// points := [ 10 , 0 , 0 ] ;
28893: LD_ADDR_VAR 0 9
28897: PUSH
28898: LD_INT 10
28900: PUSH
28901: LD_INT 0
28903: PUSH
28904: LD_INT 0
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: LIST
28911: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28912: LD_VAR 0 6
28916: PPUSH
28917: CALL_OW 257
28921: PUSH
28922: LD_INT 11
28924: EQUAL
28925: IFFALSE 28946
// points := [ 30 , 10 , 5 ] ;
28927: LD_ADDR_VAR 0 9
28931: PUSH
28932: LD_INT 30
28934: PUSH
28935: LD_INT 10
28937: PUSH
28938: LD_INT 5
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: LIST
28945: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28946: LD_VAR 0 1
28950: PPUSH
28951: LD_INT 5
28953: PPUSH
28954: CALL_OW 321
28958: PUSH
28959: LD_INT 2
28961: EQUAL
28962: IFFALSE 28979
// bpoints := bpoints * 1.8 ;
28964: LD_ADDR_VAR 0 10
28968: PUSH
28969: LD_VAR 0 10
28973: PUSH
28974: LD_REAL  1.80000000000000E+0000
28977: MUL
28978: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28979: LD_VAR 0 6
28983: PPUSH
28984: CALL_OW 257
28988: PUSH
28989: LD_INT 1
28991: PUSH
28992: LD_INT 2
28994: PUSH
28995: LD_INT 3
28997: PUSH
28998: LD_INT 4
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: IN
29007: PUSH
29008: LD_VAR 0 1
29012: PPUSH
29013: LD_INT 51
29015: PPUSH
29016: CALL_OW 321
29020: PUSH
29021: LD_INT 2
29023: EQUAL
29024: AND
29025: IFFALSE 29042
// bpoints := bpoints * 1.2 ;
29027: LD_ADDR_VAR 0 10
29031: PUSH
29032: LD_VAR 0 10
29036: PUSH
29037: LD_REAL  1.20000000000000E+0000
29040: MUL
29041: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
29042: LD_VAR 0 6
29046: PPUSH
29047: CALL_OW 257
29051: PUSH
29052: LD_INT 5
29054: PUSH
29055: LD_INT 7
29057: PUSH
29058: LD_INT 9
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: LIST
29065: IN
29066: PUSH
29067: LD_VAR 0 1
29071: PPUSH
29072: LD_INT 52
29074: PPUSH
29075: CALL_OW 321
29079: PUSH
29080: LD_INT 2
29082: EQUAL
29083: AND
29084: IFFALSE 29101
// bpoints := bpoints * 1.5 ;
29086: LD_ADDR_VAR 0 10
29090: PUSH
29091: LD_VAR 0 10
29095: PUSH
29096: LD_REAL  1.50000000000000E+0000
29099: MUL
29100: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29101: LD_VAR 0 1
29105: PPUSH
29106: LD_INT 66
29108: PPUSH
29109: CALL_OW 321
29113: PUSH
29114: LD_INT 2
29116: EQUAL
29117: IFFALSE 29134
// bpoints := bpoints * 1.1 ;
29119: LD_ADDR_VAR 0 10
29123: PUSH
29124: LD_VAR 0 10
29128: PUSH
29129: LD_REAL  1.10000000000000E+0000
29132: MUL
29133: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29134: LD_ADDR_VAR 0 10
29138: PUSH
29139: LD_VAR 0 10
29143: PUSH
29144: LD_VAR 0 6
29148: PPUSH
29149: LD_INT 1
29151: PPUSH
29152: CALL_OW 259
29156: PUSH
29157: LD_REAL  1.15000000000000E+0000
29160: MUL
29161: MUL
29162: ST_TO_ADDR
// end ; unit_vehicle :
29163: GO 29991
29165: LD_INT 2
29167: DOUBLE
29168: EQUAL
29169: IFTRUE 29173
29171: GO 29979
29173: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29174: LD_VAR 0 6
29178: PPUSH
29179: CALL_OW 264
29183: PUSH
29184: LD_INT 2
29186: PUSH
29187: LD_INT 42
29189: PUSH
29190: LD_INT 24
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: LIST
29197: IN
29198: IFFALSE 29219
// points := [ 25 , 5 , 3 ] ;
29200: LD_ADDR_VAR 0 9
29204: PUSH
29205: LD_INT 25
29207: PUSH
29208: LD_INT 5
29210: PUSH
29211: LD_INT 3
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: LIST
29218: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29219: LD_VAR 0 6
29223: PPUSH
29224: CALL_OW 264
29228: PUSH
29229: LD_INT 4
29231: PUSH
29232: LD_INT 43
29234: PUSH
29235: LD_INT 25
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: LIST
29242: IN
29243: IFFALSE 29264
// points := [ 40 , 15 , 5 ] ;
29245: LD_ADDR_VAR 0 9
29249: PUSH
29250: LD_INT 40
29252: PUSH
29253: LD_INT 15
29255: PUSH
29256: LD_INT 5
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: LIST
29263: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29264: LD_VAR 0 6
29268: PPUSH
29269: CALL_OW 264
29273: PUSH
29274: LD_INT 3
29276: PUSH
29277: LD_INT 23
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: IN
29284: IFFALSE 29305
// points := [ 7 , 25 , 8 ] ;
29286: LD_ADDR_VAR 0 9
29290: PUSH
29291: LD_INT 7
29293: PUSH
29294: LD_INT 25
29296: PUSH
29297: LD_INT 8
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: LIST
29304: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29305: LD_VAR 0 6
29309: PPUSH
29310: CALL_OW 264
29314: PUSH
29315: LD_INT 5
29317: PUSH
29318: LD_INT 27
29320: PUSH
29321: LD_INT 44
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: LIST
29328: IN
29329: IFFALSE 29350
// points := [ 14 , 50 , 16 ] ;
29331: LD_ADDR_VAR 0 9
29335: PUSH
29336: LD_INT 14
29338: PUSH
29339: LD_INT 50
29341: PUSH
29342: LD_INT 16
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: LIST
29349: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29350: LD_VAR 0 6
29354: PPUSH
29355: CALL_OW 264
29359: PUSH
29360: LD_INT 6
29362: PUSH
29363: LD_INT 46
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: IN
29370: IFFALSE 29391
// points := [ 32 , 120 , 70 ] ;
29372: LD_ADDR_VAR 0 9
29376: PUSH
29377: LD_INT 32
29379: PUSH
29380: LD_INT 120
29382: PUSH
29383: LD_INT 70
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: LIST
29390: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
29391: LD_VAR 0 6
29395: PPUSH
29396: CALL_OW 264
29400: PUSH
29401: LD_INT 7
29403: PUSH
29404: LD_INT 28
29406: PUSH
29407: LD_INT 45
29409: PUSH
29410: LD_INT 92
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: IN
29419: IFFALSE 29440
// points := [ 35 , 20 , 45 ] ;
29421: LD_ADDR_VAR 0 9
29425: PUSH
29426: LD_INT 35
29428: PUSH
29429: LD_INT 20
29431: PUSH
29432: LD_INT 45
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: LIST
29439: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29440: LD_VAR 0 6
29444: PPUSH
29445: CALL_OW 264
29449: PUSH
29450: LD_INT 47
29452: PUSH
29453: EMPTY
29454: LIST
29455: IN
29456: IFFALSE 29477
// points := [ 67 , 45 , 75 ] ;
29458: LD_ADDR_VAR 0 9
29462: PUSH
29463: LD_INT 67
29465: PUSH
29466: LD_INT 45
29468: PUSH
29469: LD_INT 75
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: LIST
29476: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29477: LD_VAR 0 6
29481: PPUSH
29482: CALL_OW 264
29486: PUSH
29487: LD_INT 26
29489: PUSH
29490: EMPTY
29491: LIST
29492: IN
29493: IFFALSE 29514
// points := [ 120 , 30 , 80 ] ;
29495: LD_ADDR_VAR 0 9
29499: PUSH
29500: LD_INT 120
29502: PUSH
29503: LD_INT 30
29505: PUSH
29506: LD_INT 80
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: LIST
29513: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29514: LD_VAR 0 6
29518: PPUSH
29519: CALL_OW 264
29523: PUSH
29524: LD_INT 22
29526: PUSH
29527: EMPTY
29528: LIST
29529: IN
29530: IFFALSE 29551
// points := [ 40 , 1 , 1 ] ;
29532: LD_ADDR_VAR 0 9
29536: PUSH
29537: LD_INT 40
29539: PUSH
29540: LD_INT 1
29542: PUSH
29543: LD_INT 1
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: LIST
29550: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29551: LD_VAR 0 6
29555: PPUSH
29556: CALL_OW 264
29560: PUSH
29561: LD_INT 29
29563: PUSH
29564: EMPTY
29565: LIST
29566: IN
29567: IFFALSE 29588
// points := [ 70 , 200 , 400 ] ;
29569: LD_ADDR_VAR 0 9
29573: PUSH
29574: LD_INT 70
29576: PUSH
29577: LD_INT 200
29579: PUSH
29580: LD_INT 400
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: LIST
29587: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29588: LD_VAR 0 6
29592: PPUSH
29593: CALL_OW 264
29597: PUSH
29598: LD_INT 14
29600: PUSH
29601: LD_INT 53
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: IN
29608: IFFALSE 29629
// points := [ 40 , 10 , 20 ] ;
29610: LD_ADDR_VAR 0 9
29614: PUSH
29615: LD_INT 40
29617: PUSH
29618: LD_INT 10
29620: PUSH
29621: LD_INT 20
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: LIST
29628: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29629: LD_VAR 0 6
29633: PPUSH
29634: CALL_OW 264
29638: PUSH
29639: LD_INT 9
29641: PUSH
29642: EMPTY
29643: LIST
29644: IN
29645: IFFALSE 29666
// points := [ 5 , 70 , 20 ] ;
29647: LD_ADDR_VAR 0 9
29651: PUSH
29652: LD_INT 5
29654: PUSH
29655: LD_INT 70
29657: PUSH
29658: LD_INT 20
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: LIST
29665: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29666: LD_VAR 0 6
29670: PPUSH
29671: CALL_OW 264
29675: PUSH
29676: LD_INT 10
29678: PUSH
29679: EMPTY
29680: LIST
29681: IN
29682: IFFALSE 29703
// points := [ 35 , 110 , 70 ] ;
29684: LD_ADDR_VAR 0 9
29688: PUSH
29689: LD_INT 35
29691: PUSH
29692: LD_INT 110
29694: PUSH
29695: LD_INT 70
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: LIST
29702: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29703: LD_VAR 0 6
29707: PPUSH
29708: CALL_OW 265
29712: PUSH
29713: LD_INT 25
29715: EQUAL
29716: IFFALSE 29737
// points := [ 80 , 65 , 100 ] ;
29718: LD_ADDR_VAR 0 9
29722: PUSH
29723: LD_INT 80
29725: PUSH
29726: LD_INT 65
29728: PUSH
29729: LD_INT 100
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: LIST
29736: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29737: LD_VAR 0 6
29741: PPUSH
29742: CALL_OW 263
29746: PUSH
29747: LD_INT 1
29749: EQUAL
29750: IFFALSE 29785
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29752: LD_ADDR_VAR 0 10
29756: PUSH
29757: LD_VAR 0 10
29761: PUSH
29762: LD_VAR 0 6
29766: PPUSH
29767: CALL_OW 311
29771: PPUSH
29772: LD_INT 3
29774: PPUSH
29775: CALL_OW 259
29779: PUSH
29780: LD_INT 4
29782: MUL
29783: MUL
29784: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29785: LD_VAR 0 6
29789: PPUSH
29790: CALL_OW 263
29794: PUSH
29795: LD_INT 2
29797: EQUAL
29798: IFFALSE 29849
// begin j := IsControledBy ( i ) ;
29800: LD_ADDR_VAR 0 7
29804: PUSH
29805: LD_VAR 0 6
29809: PPUSH
29810: CALL_OW 312
29814: ST_TO_ADDR
// if j then
29815: LD_VAR 0 7
29819: IFFALSE 29849
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29821: LD_ADDR_VAR 0 10
29825: PUSH
29826: LD_VAR 0 10
29830: PUSH
29831: LD_VAR 0 7
29835: PPUSH
29836: LD_INT 3
29838: PPUSH
29839: CALL_OW 259
29843: PUSH
29844: LD_INT 3
29846: MUL
29847: MUL
29848: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29849: LD_VAR 0 6
29853: PPUSH
29854: CALL_OW 264
29858: PUSH
29859: LD_INT 5
29861: PUSH
29862: LD_INT 6
29864: PUSH
29865: LD_INT 46
29867: PUSH
29868: LD_INT 44
29870: PUSH
29871: LD_INT 47
29873: PUSH
29874: LD_INT 45
29876: PUSH
29877: LD_INT 28
29879: PUSH
29880: LD_INT 7
29882: PUSH
29883: LD_INT 27
29885: PUSH
29886: LD_INT 29
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: IN
29901: PUSH
29902: LD_VAR 0 1
29906: PPUSH
29907: LD_INT 52
29909: PPUSH
29910: CALL_OW 321
29914: PUSH
29915: LD_INT 2
29917: EQUAL
29918: AND
29919: IFFALSE 29936
// bpoints := bpoints * 1.2 ;
29921: LD_ADDR_VAR 0 10
29925: PUSH
29926: LD_VAR 0 10
29930: PUSH
29931: LD_REAL  1.20000000000000E+0000
29934: MUL
29935: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29936: LD_VAR 0 6
29940: PPUSH
29941: CALL_OW 264
29945: PUSH
29946: LD_INT 6
29948: PUSH
29949: LD_INT 46
29951: PUSH
29952: LD_INT 47
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: LIST
29959: IN
29960: IFFALSE 29977
// bpoints := bpoints * 1.2 ;
29962: LD_ADDR_VAR 0 10
29966: PUSH
29967: LD_VAR 0 10
29971: PUSH
29972: LD_REAL  1.20000000000000E+0000
29975: MUL
29976: ST_TO_ADDR
// end ; unit_building :
29977: GO 29991
29979: LD_INT 3
29981: DOUBLE
29982: EQUAL
29983: IFTRUE 29987
29985: GO 29990
29987: POP
// ; end ;
29988: GO 29991
29990: POP
// for j = 1 to 3 do
29991: LD_ADDR_VAR 0 7
29995: PUSH
29996: DOUBLE
29997: LD_INT 1
29999: DEC
30000: ST_TO_ADDR
30001: LD_INT 3
30003: PUSH
30004: FOR_TO
30005: IFFALSE 30058
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
30007: LD_ADDR_VAR 0 5
30011: PUSH
30012: LD_VAR 0 5
30016: PPUSH
30017: LD_VAR 0 7
30021: PPUSH
30022: LD_VAR 0 5
30026: PUSH
30027: LD_VAR 0 7
30031: ARRAY
30032: PUSH
30033: LD_VAR 0 9
30037: PUSH
30038: LD_VAR 0 7
30042: ARRAY
30043: PUSH
30044: LD_VAR 0 10
30048: MUL
30049: PLUS
30050: PPUSH
30051: CALL_OW 1
30055: ST_TO_ADDR
30056: GO 30004
30058: POP
30059: POP
// end ;
30060: GO 28539
30062: POP
30063: POP
// result := Replace ( result , 4 , tmp ) ;
30064: LD_ADDR_VAR 0 5
30068: PUSH
30069: LD_VAR 0 5
30073: PPUSH
30074: LD_INT 4
30076: PPUSH
30077: LD_VAR 0 8
30081: PPUSH
30082: CALL_OW 1
30086: ST_TO_ADDR
// end ;
30087: LD_VAR 0 5
30091: RET
// export function DangerAtRange ( unit , range ) ; begin
30092: LD_INT 0
30094: PPUSH
// if not unit then
30095: LD_VAR 0 1
30099: NOT
30100: IFFALSE 30104
// exit ;
30102: GO 30149
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30104: LD_ADDR_VAR 0 3
30108: PUSH
30109: LD_VAR 0 1
30113: PPUSH
30114: CALL_OW 255
30118: PPUSH
30119: LD_VAR 0 1
30123: PPUSH
30124: CALL_OW 250
30128: PPUSH
30129: LD_VAR 0 1
30133: PPUSH
30134: CALL_OW 251
30138: PPUSH
30139: LD_VAR 0 2
30143: PPUSH
30144: CALL 28391 0 4
30148: ST_TO_ADDR
// end ;
30149: LD_VAR 0 3
30153: RET
// export function DangerInArea ( side , area ) ; begin
30154: LD_INT 0
30156: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30157: LD_ADDR_VAR 0 3
30161: PUSH
30162: LD_VAR 0 2
30166: PPUSH
30167: LD_INT 81
30169: PUSH
30170: LD_VAR 0 1
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PPUSH
30179: CALL_OW 70
30183: ST_TO_ADDR
// end ;
30184: LD_VAR 0 3
30188: RET
// export function IsExtension ( b ) ; begin
30189: LD_INT 0
30191: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30192: LD_ADDR_VAR 0 2
30196: PUSH
30197: LD_VAR 0 1
30201: PUSH
30202: LD_INT 23
30204: PUSH
30205: LD_INT 20
30207: PUSH
30208: LD_INT 22
30210: PUSH
30211: LD_INT 17
30213: PUSH
30214: LD_INT 24
30216: PUSH
30217: LD_INT 21
30219: PUSH
30220: LD_INT 19
30222: PUSH
30223: LD_INT 16
30225: PUSH
30226: LD_INT 25
30228: PUSH
30229: LD_INT 18
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: IN
30244: ST_TO_ADDR
// end ;
30245: LD_VAR 0 2
30249: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
30250: LD_INT 0
30252: PPUSH
30253: PPUSH
30254: PPUSH
// result := [ ] ;
30255: LD_ADDR_VAR 0 4
30259: PUSH
30260: EMPTY
30261: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30262: LD_ADDR_VAR 0 5
30266: PUSH
30267: LD_VAR 0 2
30271: PPUSH
30272: LD_INT 21
30274: PUSH
30275: LD_INT 3
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PPUSH
30282: CALL_OW 70
30286: ST_TO_ADDR
// if not tmp then
30287: LD_VAR 0 5
30291: NOT
30292: IFFALSE 30296
// exit ;
30294: GO 30360
// if checkLink then
30296: LD_VAR 0 3
30300: IFFALSE 30350
// begin for i in tmp do
30302: LD_ADDR_VAR 0 6
30306: PUSH
30307: LD_VAR 0 5
30311: PUSH
30312: FOR_IN
30313: IFFALSE 30348
// if GetBase ( i ) <> base then
30315: LD_VAR 0 6
30319: PPUSH
30320: CALL_OW 274
30324: PUSH
30325: LD_VAR 0 1
30329: NONEQUAL
30330: IFFALSE 30346
// ComLinkToBase ( base , i ) ;
30332: LD_VAR 0 1
30336: PPUSH
30337: LD_VAR 0 6
30341: PPUSH
30342: CALL_OW 169
30346: GO 30312
30348: POP
30349: POP
// end ; result := tmp ;
30350: LD_ADDR_VAR 0 4
30354: PUSH
30355: LD_VAR 0 5
30359: ST_TO_ADDR
// end ;
30360: LD_VAR 0 4
30364: RET
// export function ComComplete ( units , b ) ; var i ; begin
30365: LD_INT 0
30367: PPUSH
30368: PPUSH
// if not units then
30369: LD_VAR 0 1
30373: NOT
30374: IFFALSE 30378
// exit ;
30376: GO 30468
// for i in units do
30378: LD_ADDR_VAR 0 4
30382: PUSH
30383: LD_VAR 0 1
30387: PUSH
30388: FOR_IN
30389: IFFALSE 30466
// if BuildingStatus ( b ) = bs_build then
30391: LD_VAR 0 2
30395: PPUSH
30396: CALL_OW 461
30400: PUSH
30401: LD_INT 1
30403: EQUAL
30404: IFFALSE 30464
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30406: LD_VAR 0 4
30410: PPUSH
30411: LD_STRING h
30413: PUSH
30414: LD_VAR 0 2
30418: PPUSH
30419: CALL_OW 250
30423: PUSH
30424: LD_VAR 0 2
30428: PPUSH
30429: CALL_OW 251
30433: PUSH
30434: LD_VAR 0 2
30438: PUSH
30439: LD_INT 0
30441: PUSH
30442: LD_INT 0
30444: PUSH
30445: LD_INT 0
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: PUSH
30457: EMPTY
30458: LIST
30459: PPUSH
30460: CALL_OW 446
30464: GO 30388
30466: POP
30467: POP
// end ;
30468: LD_VAR 0 3
30472: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30473: LD_INT 0
30475: PPUSH
30476: PPUSH
30477: PPUSH
30478: PPUSH
30479: PPUSH
30480: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
30481: LD_VAR 0 1
30485: NOT
30486: PUSH
30487: LD_VAR 0 1
30491: PPUSH
30492: CALL_OW 263
30496: PUSH
30497: LD_INT 2
30499: NONEQUAL
30500: OR
30501: IFFALSE 30505
// exit ;
30503: GO 30821
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30505: LD_ADDR_VAR 0 6
30509: PUSH
30510: LD_INT 22
30512: PUSH
30513: LD_VAR 0 1
30517: PPUSH
30518: CALL_OW 255
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 2
30529: PUSH
30530: LD_INT 30
30532: PUSH
30533: LD_INT 36
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 34
30542: PUSH
30543: LD_INT 31
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: LIST
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PPUSH
30559: CALL_OW 69
30563: ST_TO_ADDR
// if not tmp then
30564: LD_VAR 0 6
30568: NOT
30569: IFFALSE 30573
// exit ;
30571: GO 30821
// result := [ ] ;
30573: LD_ADDR_VAR 0 2
30577: PUSH
30578: EMPTY
30579: ST_TO_ADDR
// for i in tmp do
30580: LD_ADDR_VAR 0 3
30584: PUSH
30585: LD_VAR 0 6
30589: PUSH
30590: FOR_IN
30591: IFFALSE 30662
// begin t := UnitsInside ( i ) ;
30593: LD_ADDR_VAR 0 4
30597: PUSH
30598: LD_VAR 0 3
30602: PPUSH
30603: CALL_OW 313
30607: ST_TO_ADDR
// if t then
30608: LD_VAR 0 4
30612: IFFALSE 30660
// for j in t do
30614: LD_ADDR_VAR 0 7
30618: PUSH
30619: LD_VAR 0 4
30623: PUSH
30624: FOR_IN
30625: IFFALSE 30658
// result := Replace ( result , result + 1 , j ) ;
30627: LD_ADDR_VAR 0 2
30631: PUSH
30632: LD_VAR 0 2
30636: PPUSH
30637: LD_VAR 0 2
30641: PUSH
30642: LD_INT 1
30644: PLUS
30645: PPUSH
30646: LD_VAR 0 7
30650: PPUSH
30651: CALL_OW 1
30655: ST_TO_ADDR
30656: GO 30624
30658: POP
30659: POP
// end ;
30660: GO 30590
30662: POP
30663: POP
// if not result then
30664: LD_VAR 0 2
30668: NOT
30669: IFFALSE 30673
// exit ;
30671: GO 30821
// mech := result [ 1 ] ;
30673: LD_ADDR_VAR 0 5
30677: PUSH
30678: LD_VAR 0 2
30682: PUSH
30683: LD_INT 1
30685: ARRAY
30686: ST_TO_ADDR
// if result > 1 then
30687: LD_VAR 0 2
30691: PUSH
30692: LD_INT 1
30694: GREATER
30695: IFFALSE 30807
// begin for i = 2 to result do
30697: LD_ADDR_VAR 0 3
30701: PUSH
30702: DOUBLE
30703: LD_INT 2
30705: DEC
30706: ST_TO_ADDR
30707: LD_VAR 0 2
30711: PUSH
30712: FOR_TO
30713: IFFALSE 30805
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30715: LD_ADDR_VAR 0 4
30719: PUSH
30720: LD_VAR 0 2
30724: PUSH
30725: LD_VAR 0 3
30729: ARRAY
30730: PPUSH
30731: LD_INT 3
30733: PPUSH
30734: CALL_OW 259
30738: PUSH
30739: LD_VAR 0 2
30743: PUSH
30744: LD_VAR 0 3
30748: ARRAY
30749: PPUSH
30750: CALL_OW 432
30754: MINUS
30755: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30756: LD_VAR 0 4
30760: PUSH
30761: LD_VAR 0 5
30765: PPUSH
30766: LD_INT 3
30768: PPUSH
30769: CALL_OW 259
30773: PUSH
30774: LD_VAR 0 5
30778: PPUSH
30779: CALL_OW 432
30783: MINUS
30784: GREATEREQUAL
30785: IFFALSE 30803
// mech := result [ i ] ;
30787: LD_ADDR_VAR 0 5
30791: PUSH
30792: LD_VAR 0 2
30796: PUSH
30797: LD_VAR 0 3
30801: ARRAY
30802: ST_TO_ADDR
// end ;
30803: GO 30712
30805: POP
30806: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30807: LD_VAR 0 1
30811: PPUSH
30812: LD_VAR 0 5
30816: PPUSH
30817: CALL_OW 135
// end ;
30821: LD_VAR 0 2
30825: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30826: LD_INT 0
30828: PPUSH
30829: PPUSH
30830: PPUSH
30831: PPUSH
30832: PPUSH
30833: PPUSH
30834: PPUSH
30835: PPUSH
30836: PPUSH
30837: PPUSH
30838: PPUSH
30839: PPUSH
30840: PPUSH
// result := [ ] ;
30841: LD_ADDR_VAR 0 7
30845: PUSH
30846: EMPTY
30847: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30848: LD_VAR 0 1
30852: PPUSH
30853: CALL_OW 266
30857: PUSH
30858: LD_INT 0
30860: PUSH
30861: LD_INT 1
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: IN
30868: NOT
30869: IFFALSE 30873
// exit ;
30871: GO 32507
// if name then
30873: LD_VAR 0 3
30877: IFFALSE 30893
// SetBName ( base_dep , name ) ;
30879: LD_VAR 0 1
30883: PPUSH
30884: LD_VAR 0 3
30888: PPUSH
30889: CALL_OW 500
// base := GetBase ( base_dep ) ;
30893: LD_ADDR_VAR 0 15
30897: PUSH
30898: LD_VAR 0 1
30902: PPUSH
30903: CALL_OW 274
30907: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30908: LD_ADDR_VAR 0 16
30912: PUSH
30913: LD_VAR 0 1
30917: PPUSH
30918: CALL_OW 255
30922: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30923: LD_ADDR_VAR 0 17
30927: PUSH
30928: LD_VAR 0 1
30932: PPUSH
30933: CALL_OW 248
30937: ST_TO_ADDR
// if sources then
30938: LD_VAR 0 5
30942: IFFALSE 30989
// for i = 1 to 3 do
30944: LD_ADDR_VAR 0 8
30948: PUSH
30949: DOUBLE
30950: LD_INT 1
30952: DEC
30953: ST_TO_ADDR
30954: LD_INT 3
30956: PUSH
30957: FOR_TO
30958: IFFALSE 30987
// AddResourceType ( base , i , sources [ i ] ) ;
30960: LD_VAR 0 15
30964: PPUSH
30965: LD_VAR 0 8
30969: PPUSH
30970: LD_VAR 0 5
30974: PUSH
30975: LD_VAR 0 8
30979: ARRAY
30980: PPUSH
30981: CALL_OW 276
30985: GO 30957
30987: POP
30988: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30989: LD_ADDR_VAR 0 18
30993: PUSH
30994: LD_VAR 0 15
30998: PPUSH
30999: LD_VAR 0 2
31003: PPUSH
31004: LD_INT 1
31006: PPUSH
31007: CALL 30250 0 3
31011: ST_TO_ADDR
// InitHc ;
31012: CALL_OW 19
// InitUc ;
31016: CALL_OW 18
// uc_side := side ;
31020: LD_ADDR_OWVAR 20
31024: PUSH
31025: LD_VAR 0 16
31029: ST_TO_ADDR
// uc_nation := nation ;
31030: LD_ADDR_OWVAR 21
31034: PUSH
31035: LD_VAR 0 17
31039: ST_TO_ADDR
// if buildings then
31040: LD_VAR 0 18
31044: IFFALSE 32366
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31046: LD_ADDR_VAR 0 19
31050: PUSH
31051: LD_VAR 0 18
31055: PPUSH
31056: LD_INT 2
31058: PUSH
31059: LD_INT 30
31061: PUSH
31062: LD_INT 29
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 30
31071: PUSH
31072: LD_INT 30
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: LIST
31083: PPUSH
31084: CALL_OW 72
31088: ST_TO_ADDR
// if tmp then
31089: LD_VAR 0 19
31093: IFFALSE 31141
// for i in tmp do
31095: LD_ADDR_VAR 0 8
31099: PUSH
31100: LD_VAR 0 19
31104: PUSH
31105: FOR_IN
31106: IFFALSE 31139
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31108: LD_VAR 0 8
31112: PPUSH
31113: CALL_OW 250
31117: PPUSH
31118: LD_VAR 0 8
31122: PPUSH
31123: CALL_OW 251
31127: PPUSH
31128: LD_VAR 0 16
31132: PPUSH
31133: CALL_OW 441
31137: GO 31105
31139: POP
31140: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31141: LD_VAR 0 18
31145: PPUSH
31146: LD_INT 2
31148: PUSH
31149: LD_INT 30
31151: PUSH
31152: LD_INT 32
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 30
31161: PUSH
31162: LD_INT 33
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: LIST
31173: PPUSH
31174: CALL_OW 72
31178: IFFALSE 31266
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31180: LD_ADDR_VAR 0 8
31184: PUSH
31185: LD_VAR 0 18
31189: PPUSH
31190: LD_INT 2
31192: PUSH
31193: LD_INT 30
31195: PUSH
31196: LD_INT 32
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 30
31205: PUSH
31206: LD_INT 33
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: LIST
31217: PPUSH
31218: CALL_OW 72
31222: PUSH
31223: FOR_IN
31224: IFFALSE 31264
// begin if not GetBWeapon ( i ) then
31226: LD_VAR 0 8
31230: PPUSH
31231: CALL_OW 269
31235: NOT
31236: IFFALSE 31262
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31238: LD_VAR 0 8
31242: PPUSH
31243: LD_VAR 0 8
31247: PPUSH
31248: LD_VAR 0 2
31252: PPUSH
31253: CALL 32512 0 2
31257: PPUSH
31258: CALL_OW 431
// end ;
31262: GO 31223
31264: POP
31265: POP
// end ; for i = 1 to personel do
31266: LD_ADDR_VAR 0 8
31270: PUSH
31271: DOUBLE
31272: LD_INT 1
31274: DEC
31275: ST_TO_ADDR
31276: LD_VAR 0 6
31280: PUSH
31281: FOR_TO
31282: IFFALSE 32346
// begin if i > 4 then
31284: LD_VAR 0 8
31288: PUSH
31289: LD_INT 4
31291: GREATER
31292: IFFALSE 31296
// break ;
31294: GO 32346
// case i of 1 :
31296: LD_VAR 0 8
31300: PUSH
31301: LD_INT 1
31303: DOUBLE
31304: EQUAL
31305: IFTRUE 31309
31307: GO 31389
31309: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31310: LD_ADDR_VAR 0 12
31314: PUSH
31315: LD_VAR 0 18
31319: PPUSH
31320: LD_INT 22
31322: PUSH
31323: LD_VAR 0 16
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 58
31334: PUSH
31335: EMPTY
31336: LIST
31337: PUSH
31338: LD_INT 2
31340: PUSH
31341: LD_INT 30
31343: PUSH
31344: LD_INT 32
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 30
31353: PUSH
31354: LD_INT 4
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 30
31363: PUSH
31364: LD_INT 5
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: LIST
31381: PPUSH
31382: CALL_OW 72
31386: ST_TO_ADDR
31387: GO 31611
31389: LD_INT 2
31391: DOUBLE
31392: EQUAL
31393: IFTRUE 31397
31395: GO 31459
31397: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31398: LD_ADDR_VAR 0 12
31402: PUSH
31403: LD_VAR 0 18
31407: PPUSH
31408: LD_INT 22
31410: PUSH
31411: LD_VAR 0 16
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 2
31422: PUSH
31423: LD_INT 30
31425: PUSH
31426: LD_INT 0
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: LD_INT 30
31435: PUSH
31436: LD_INT 1
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: LIST
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PPUSH
31452: CALL_OW 72
31456: ST_TO_ADDR
31457: GO 31611
31459: LD_INT 3
31461: DOUBLE
31462: EQUAL
31463: IFTRUE 31467
31465: GO 31529
31467: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31468: LD_ADDR_VAR 0 12
31472: PUSH
31473: LD_VAR 0 18
31477: PPUSH
31478: LD_INT 22
31480: PUSH
31481: LD_VAR 0 16
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 2
31492: PUSH
31493: LD_INT 30
31495: PUSH
31496: LD_INT 2
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 30
31505: PUSH
31506: LD_INT 3
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: LIST
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PPUSH
31522: CALL_OW 72
31526: ST_TO_ADDR
31527: GO 31611
31529: LD_INT 4
31531: DOUBLE
31532: EQUAL
31533: IFTRUE 31537
31535: GO 31610
31537: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31538: LD_ADDR_VAR 0 12
31542: PUSH
31543: LD_VAR 0 18
31547: PPUSH
31548: LD_INT 22
31550: PUSH
31551: LD_VAR 0 16
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 2
31562: PUSH
31563: LD_INT 30
31565: PUSH
31566: LD_INT 6
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 30
31575: PUSH
31576: LD_INT 7
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 30
31585: PUSH
31586: LD_INT 8
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PPUSH
31603: CALL_OW 72
31607: ST_TO_ADDR
31608: GO 31611
31610: POP
// if i = 1 then
31611: LD_VAR 0 8
31615: PUSH
31616: LD_INT 1
31618: EQUAL
31619: IFFALSE 31730
// begin tmp := [ ] ;
31621: LD_ADDR_VAR 0 19
31625: PUSH
31626: EMPTY
31627: ST_TO_ADDR
// for j in f do
31628: LD_ADDR_VAR 0 9
31632: PUSH
31633: LD_VAR 0 12
31637: PUSH
31638: FOR_IN
31639: IFFALSE 31712
// if GetBType ( j ) = b_bunker then
31641: LD_VAR 0 9
31645: PPUSH
31646: CALL_OW 266
31650: PUSH
31651: LD_INT 32
31653: EQUAL
31654: IFFALSE 31681
// tmp := Insert ( tmp , 1 , j ) else
31656: LD_ADDR_VAR 0 19
31660: PUSH
31661: LD_VAR 0 19
31665: PPUSH
31666: LD_INT 1
31668: PPUSH
31669: LD_VAR 0 9
31673: PPUSH
31674: CALL_OW 2
31678: ST_TO_ADDR
31679: GO 31710
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31681: LD_ADDR_VAR 0 19
31685: PUSH
31686: LD_VAR 0 19
31690: PPUSH
31691: LD_VAR 0 19
31695: PUSH
31696: LD_INT 1
31698: PLUS
31699: PPUSH
31700: LD_VAR 0 9
31704: PPUSH
31705: CALL_OW 2
31709: ST_TO_ADDR
31710: GO 31638
31712: POP
31713: POP
// if tmp then
31714: LD_VAR 0 19
31718: IFFALSE 31730
// f := tmp ;
31720: LD_ADDR_VAR 0 12
31724: PUSH
31725: LD_VAR 0 19
31729: ST_TO_ADDR
// end ; x := personel [ i ] ;
31730: LD_ADDR_VAR 0 13
31734: PUSH
31735: LD_VAR 0 6
31739: PUSH
31740: LD_VAR 0 8
31744: ARRAY
31745: ST_TO_ADDR
// if x = - 1 then
31746: LD_VAR 0 13
31750: PUSH
31751: LD_INT 1
31753: NEG
31754: EQUAL
31755: IFFALSE 31964
// begin for j in f do
31757: LD_ADDR_VAR 0 9
31761: PUSH
31762: LD_VAR 0 12
31766: PUSH
31767: FOR_IN
31768: IFFALSE 31960
// repeat InitHc ;
31770: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31774: LD_VAR 0 9
31778: PPUSH
31779: CALL_OW 266
31783: PUSH
31784: LD_INT 5
31786: EQUAL
31787: IFFALSE 31857
// begin if UnitsInside ( j ) < 3 then
31789: LD_VAR 0 9
31793: PPUSH
31794: CALL_OW 313
31798: PUSH
31799: LD_INT 3
31801: LESS
31802: IFFALSE 31838
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31804: LD_INT 0
31806: PPUSH
31807: LD_INT 5
31809: PUSH
31810: LD_INT 8
31812: PUSH
31813: LD_INT 9
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: LIST
31820: PUSH
31821: LD_VAR 0 17
31825: ARRAY
31826: PPUSH
31827: LD_VAR 0 4
31831: PPUSH
31832: CALL_OW 380
31836: GO 31855
// PrepareHuman ( false , i , skill ) ;
31838: LD_INT 0
31840: PPUSH
31841: LD_VAR 0 8
31845: PPUSH
31846: LD_VAR 0 4
31850: PPUSH
31851: CALL_OW 380
// end else
31855: GO 31874
// PrepareHuman ( false , i , skill ) ;
31857: LD_INT 0
31859: PPUSH
31860: LD_VAR 0 8
31864: PPUSH
31865: LD_VAR 0 4
31869: PPUSH
31870: CALL_OW 380
// un := CreateHuman ;
31874: LD_ADDR_VAR 0 14
31878: PUSH
31879: CALL_OW 44
31883: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31884: LD_ADDR_VAR 0 7
31888: PUSH
31889: LD_VAR 0 7
31893: PPUSH
31894: LD_INT 1
31896: PPUSH
31897: LD_VAR 0 14
31901: PPUSH
31902: CALL_OW 2
31906: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31907: LD_VAR 0 14
31911: PPUSH
31912: LD_VAR 0 9
31916: PPUSH
31917: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31921: LD_VAR 0 9
31925: PPUSH
31926: CALL_OW 313
31930: PUSH
31931: LD_INT 6
31933: EQUAL
31934: PUSH
31935: LD_VAR 0 9
31939: PPUSH
31940: CALL_OW 266
31944: PUSH
31945: LD_INT 32
31947: PUSH
31948: LD_INT 31
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: IN
31955: OR
31956: IFFALSE 31770
31958: GO 31767
31960: POP
31961: POP
// end else
31962: GO 32344
// for j = 1 to x do
31964: LD_ADDR_VAR 0 9
31968: PUSH
31969: DOUBLE
31970: LD_INT 1
31972: DEC
31973: ST_TO_ADDR
31974: LD_VAR 0 13
31978: PUSH
31979: FOR_TO
31980: IFFALSE 32342
// begin InitHc ;
31982: CALL_OW 19
// if not f then
31986: LD_VAR 0 12
31990: NOT
31991: IFFALSE 32080
// begin PrepareHuman ( false , i , skill ) ;
31993: LD_INT 0
31995: PPUSH
31996: LD_VAR 0 8
32000: PPUSH
32001: LD_VAR 0 4
32005: PPUSH
32006: CALL_OW 380
// un := CreateHuman ;
32010: LD_ADDR_VAR 0 14
32014: PUSH
32015: CALL_OW 44
32019: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32020: LD_ADDR_VAR 0 7
32024: PUSH
32025: LD_VAR 0 7
32029: PPUSH
32030: LD_INT 1
32032: PPUSH
32033: LD_VAR 0 14
32037: PPUSH
32038: CALL_OW 2
32042: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32043: LD_VAR 0 14
32047: PPUSH
32048: LD_VAR 0 1
32052: PPUSH
32053: CALL_OW 250
32057: PPUSH
32058: LD_VAR 0 1
32062: PPUSH
32063: CALL_OW 251
32067: PPUSH
32068: LD_INT 10
32070: PPUSH
32071: LD_INT 0
32073: PPUSH
32074: CALL_OW 50
// continue ;
32078: GO 31979
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
32080: LD_VAR 0 12
32084: PUSH
32085: LD_INT 1
32087: ARRAY
32088: PPUSH
32089: CALL_OW 313
32093: PUSH
32094: LD_VAR 0 12
32098: PUSH
32099: LD_INT 1
32101: ARRAY
32102: PPUSH
32103: CALL_OW 266
32107: PUSH
32108: LD_INT 32
32110: PUSH
32111: LD_INT 31
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: IN
32118: AND
32119: PUSH
32120: LD_VAR 0 12
32124: PUSH
32125: LD_INT 1
32127: ARRAY
32128: PPUSH
32129: CALL_OW 313
32133: PUSH
32134: LD_INT 6
32136: EQUAL
32137: OR
32138: IFFALSE 32158
// f := Delete ( f , 1 ) ;
32140: LD_ADDR_VAR 0 12
32144: PUSH
32145: LD_VAR 0 12
32149: PPUSH
32150: LD_INT 1
32152: PPUSH
32153: CALL_OW 3
32157: ST_TO_ADDR
// if not f then
32158: LD_VAR 0 12
32162: NOT
32163: IFFALSE 32181
// begin x := x + 2 ;
32165: LD_ADDR_VAR 0 13
32169: PUSH
32170: LD_VAR 0 13
32174: PUSH
32175: LD_INT 2
32177: PLUS
32178: ST_TO_ADDR
// continue ;
32179: GO 31979
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32181: LD_VAR 0 12
32185: PUSH
32186: LD_INT 1
32188: ARRAY
32189: PPUSH
32190: CALL_OW 266
32194: PUSH
32195: LD_INT 5
32197: EQUAL
32198: IFFALSE 32272
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32200: LD_VAR 0 12
32204: PUSH
32205: LD_INT 1
32207: ARRAY
32208: PPUSH
32209: CALL_OW 313
32213: PUSH
32214: LD_INT 3
32216: LESS
32217: IFFALSE 32253
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32219: LD_INT 0
32221: PPUSH
32222: LD_INT 5
32224: PUSH
32225: LD_INT 8
32227: PUSH
32228: LD_INT 9
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: LIST
32235: PUSH
32236: LD_VAR 0 17
32240: ARRAY
32241: PPUSH
32242: LD_VAR 0 4
32246: PPUSH
32247: CALL_OW 380
32251: GO 32270
// PrepareHuman ( false , i , skill ) ;
32253: LD_INT 0
32255: PPUSH
32256: LD_VAR 0 8
32260: PPUSH
32261: LD_VAR 0 4
32265: PPUSH
32266: CALL_OW 380
// end else
32270: GO 32289
// PrepareHuman ( false , i , skill ) ;
32272: LD_INT 0
32274: PPUSH
32275: LD_VAR 0 8
32279: PPUSH
32280: LD_VAR 0 4
32284: PPUSH
32285: CALL_OW 380
// un := CreateHuman ;
32289: LD_ADDR_VAR 0 14
32293: PUSH
32294: CALL_OW 44
32298: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32299: LD_ADDR_VAR 0 7
32303: PUSH
32304: LD_VAR 0 7
32308: PPUSH
32309: LD_INT 1
32311: PPUSH
32312: LD_VAR 0 14
32316: PPUSH
32317: CALL_OW 2
32321: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32322: LD_VAR 0 14
32326: PPUSH
32327: LD_VAR 0 12
32331: PUSH
32332: LD_INT 1
32334: ARRAY
32335: PPUSH
32336: CALL_OW 52
// end ;
32340: GO 31979
32342: POP
32343: POP
// end ;
32344: GO 31281
32346: POP
32347: POP
// result := result ^ buildings ;
32348: LD_ADDR_VAR 0 7
32352: PUSH
32353: LD_VAR 0 7
32357: PUSH
32358: LD_VAR 0 18
32362: ADD
32363: ST_TO_ADDR
// end else
32364: GO 32507
// begin for i = 1 to personel do
32366: LD_ADDR_VAR 0 8
32370: PUSH
32371: DOUBLE
32372: LD_INT 1
32374: DEC
32375: ST_TO_ADDR
32376: LD_VAR 0 6
32380: PUSH
32381: FOR_TO
32382: IFFALSE 32505
// begin if i > 4 then
32384: LD_VAR 0 8
32388: PUSH
32389: LD_INT 4
32391: GREATER
32392: IFFALSE 32396
// break ;
32394: GO 32505
// x := personel [ i ] ;
32396: LD_ADDR_VAR 0 13
32400: PUSH
32401: LD_VAR 0 6
32405: PUSH
32406: LD_VAR 0 8
32410: ARRAY
32411: ST_TO_ADDR
// if x = - 1 then
32412: LD_VAR 0 13
32416: PUSH
32417: LD_INT 1
32419: NEG
32420: EQUAL
32421: IFFALSE 32425
// continue ;
32423: GO 32381
// PrepareHuman ( false , i , skill ) ;
32425: LD_INT 0
32427: PPUSH
32428: LD_VAR 0 8
32432: PPUSH
32433: LD_VAR 0 4
32437: PPUSH
32438: CALL_OW 380
// un := CreateHuman ;
32442: LD_ADDR_VAR 0 14
32446: PUSH
32447: CALL_OW 44
32451: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32452: LD_VAR 0 14
32456: PPUSH
32457: LD_VAR 0 1
32461: PPUSH
32462: CALL_OW 250
32466: PPUSH
32467: LD_VAR 0 1
32471: PPUSH
32472: CALL_OW 251
32476: PPUSH
32477: LD_INT 10
32479: PPUSH
32480: LD_INT 0
32482: PPUSH
32483: CALL_OW 50
// result := result ^ un ;
32487: LD_ADDR_VAR 0 7
32491: PUSH
32492: LD_VAR 0 7
32496: PUSH
32497: LD_VAR 0 14
32501: ADD
32502: ST_TO_ADDR
// end ;
32503: GO 32381
32505: POP
32506: POP
// end ; end ;
32507: LD_VAR 0 7
32511: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32512: LD_INT 0
32514: PPUSH
32515: PPUSH
32516: PPUSH
32517: PPUSH
32518: PPUSH
32519: PPUSH
32520: PPUSH
32521: PPUSH
32522: PPUSH
32523: PPUSH
32524: PPUSH
32525: PPUSH
32526: PPUSH
32527: PPUSH
32528: PPUSH
32529: PPUSH
// result := false ;
32530: LD_ADDR_VAR 0 3
32534: PUSH
32535: LD_INT 0
32537: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32538: LD_VAR 0 1
32542: NOT
32543: PUSH
32544: LD_VAR 0 1
32548: PPUSH
32549: CALL_OW 266
32553: PUSH
32554: LD_INT 32
32556: PUSH
32557: LD_INT 33
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: IN
32564: NOT
32565: OR
32566: IFFALSE 32570
// exit ;
32568: GO 33679
// nat := GetNation ( tower ) ;
32570: LD_ADDR_VAR 0 12
32574: PUSH
32575: LD_VAR 0 1
32579: PPUSH
32580: CALL_OW 248
32584: ST_TO_ADDR
// side := GetSide ( tower ) ;
32585: LD_ADDR_VAR 0 16
32589: PUSH
32590: LD_VAR 0 1
32594: PPUSH
32595: CALL_OW 255
32599: ST_TO_ADDR
// x := GetX ( tower ) ;
32600: LD_ADDR_VAR 0 10
32604: PUSH
32605: LD_VAR 0 1
32609: PPUSH
32610: CALL_OW 250
32614: ST_TO_ADDR
// y := GetY ( tower ) ;
32615: LD_ADDR_VAR 0 11
32619: PUSH
32620: LD_VAR 0 1
32624: PPUSH
32625: CALL_OW 251
32629: ST_TO_ADDR
// if not x or not y then
32630: LD_VAR 0 10
32634: NOT
32635: PUSH
32636: LD_VAR 0 11
32640: NOT
32641: OR
32642: IFFALSE 32646
// exit ;
32644: GO 33679
// weapon := 0 ;
32646: LD_ADDR_VAR 0 18
32650: PUSH
32651: LD_INT 0
32653: ST_TO_ADDR
// fac_list := [ ] ;
32654: LD_ADDR_VAR 0 17
32658: PUSH
32659: EMPTY
32660: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32661: LD_ADDR_VAR 0 6
32665: PUSH
32666: LD_VAR 0 1
32670: PPUSH
32671: CALL_OW 274
32675: PPUSH
32676: LD_VAR 0 2
32680: PPUSH
32681: LD_INT 0
32683: PPUSH
32684: CALL 30250 0 3
32688: PPUSH
32689: LD_INT 30
32691: PUSH
32692: LD_INT 3
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PPUSH
32699: CALL_OW 72
32703: ST_TO_ADDR
// if not factories then
32704: LD_VAR 0 6
32708: NOT
32709: IFFALSE 32713
// exit ;
32711: GO 33679
// for i in factories do
32713: LD_ADDR_VAR 0 8
32717: PUSH
32718: LD_VAR 0 6
32722: PUSH
32723: FOR_IN
32724: IFFALSE 32749
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32726: LD_ADDR_VAR 0 17
32730: PUSH
32731: LD_VAR 0 17
32735: PUSH
32736: LD_VAR 0 8
32740: PPUSH
32741: CALL_OW 478
32745: UNION
32746: ST_TO_ADDR
32747: GO 32723
32749: POP
32750: POP
// if not fac_list then
32751: LD_VAR 0 17
32755: NOT
32756: IFFALSE 32760
// exit ;
32758: GO 33679
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32760: LD_ADDR_VAR 0 5
32764: PUSH
32765: LD_INT 4
32767: PUSH
32768: LD_INT 5
32770: PUSH
32771: LD_INT 9
32773: PUSH
32774: LD_INT 10
32776: PUSH
32777: LD_INT 6
32779: PUSH
32780: LD_INT 7
32782: PUSH
32783: LD_INT 11
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 27
32797: PUSH
32798: LD_INT 28
32800: PUSH
32801: LD_INT 26
32803: PUSH
32804: LD_INT 30
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 43
32815: PUSH
32816: LD_INT 44
32818: PUSH
32819: LD_INT 46
32821: PUSH
32822: LD_INT 45
32824: PUSH
32825: LD_INT 47
32827: PUSH
32828: LD_INT 49
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: LIST
32843: PUSH
32844: LD_VAR 0 12
32848: ARRAY
32849: ST_TO_ADDR
// list := list isect fac_list ;
32850: LD_ADDR_VAR 0 5
32854: PUSH
32855: LD_VAR 0 5
32859: PUSH
32860: LD_VAR 0 17
32864: ISECT
32865: ST_TO_ADDR
// if not list then
32866: LD_VAR 0 5
32870: NOT
32871: IFFALSE 32875
// exit ;
32873: GO 33679
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32875: LD_VAR 0 12
32879: PUSH
32880: LD_INT 3
32882: EQUAL
32883: PUSH
32884: LD_INT 49
32886: PUSH
32887: LD_VAR 0 5
32891: IN
32892: AND
32893: PUSH
32894: LD_INT 31
32896: PPUSH
32897: LD_VAR 0 16
32901: PPUSH
32902: CALL_OW 321
32906: PUSH
32907: LD_INT 2
32909: EQUAL
32910: AND
32911: IFFALSE 32971
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32913: LD_INT 22
32915: PUSH
32916: LD_VAR 0 16
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 35
32927: PUSH
32928: LD_INT 49
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 91
32937: PUSH
32938: LD_VAR 0 1
32942: PUSH
32943: LD_INT 10
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: LIST
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: LIST
32955: PPUSH
32956: CALL_OW 69
32960: NOT
32961: IFFALSE 32971
// weapon := ru_time_lapser ;
32963: LD_ADDR_VAR 0 18
32967: PUSH
32968: LD_INT 49
32970: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32971: LD_VAR 0 12
32975: PUSH
32976: LD_INT 1
32978: PUSH
32979: LD_INT 2
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: IN
32986: PUSH
32987: LD_INT 11
32989: PUSH
32990: LD_VAR 0 5
32994: IN
32995: PUSH
32996: LD_INT 30
32998: PUSH
32999: LD_VAR 0 5
33003: IN
33004: OR
33005: AND
33006: PUSH
33007: LD_INT 6
33009: PPUSH
33010: LD_VAR 0 16
33014: PPUSH
33015: CALL_OW 321
33019: PUSH
33020: LD_INT 2
33022: EQUAL
33023: AND
33024: IFFALSE 33189
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
33026: LD_INT 22
33028: PUSH
33029: LD_VAR 0 16
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 2
33040: PUSH
33041: LD_INT 35
33043: PUSH
33044: LD_INT 11
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 35
33053: PUSH
33054: LD_INT 30
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 91
33068: PUSH
33069: LD_VAR 0 1
33073: PUSH
33074: LD_INT 18
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: LIST
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: LIST
33086: PPUSH
33087: CALL_OW 69
33091: NOT
33092: PUSH
33093: LD_INT 22
33095: PUSH
33096: LD_VAR 0 16
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 2
33107: PUSH
33108: LD_INT 30
33110: PUSH
33111: LD_INT 32
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 30
33120: PUSH
33121: LD_INT 33
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 91
33135: PUSH
33136: LD_VAR 0 1
33140: PUSH
33141: LD_INT 12
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: LIST
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: LIST
33153: PUSH
33154: EMPTY
33155: LIST
33156: PPUSH
33157: CALL_OW 69
33161: PUSH
33162: LD_INT 2
33164: GREATER
33165: AND
33166: IFFALSE 33189
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33168: LD_ADDR_VAR 0 18
33172: PUSH
33173: LD_INT 11
33175: PUSH
33176: LD_INT 30
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_VAR 0 12
33187: ARRAY
33188: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33189: LD_VAR 0 18
33193: NOT
33194: PUSH
33195: LD_INT 40
33197: PPUSH
33198: LD_VAR 0 16
33202: PPUSH
33203: CALL_OW 321
33207: PUSH
33208: LD_INT 2
33210: EQUAL
33211: AND
33212: PUSH
33213: LD_INT 7
33215: PUSH
33216: LD_VAR 0 5
33220: IN
33221: PUSH
33222: LD_INT 28
33224: PUSH
33225: LD_VAR 0 5
33229: IN
33230: OR
33231: PUSH
33232: LD_INT 45
33234: PUSH
33235: LD_VAR 0 5
33239: IN
33240: OR
33241: AND
33242: IFFALSE 33496
// begin hex := GetHexInfo ( x , y ) ;
33244: LD_ADDR_VAR 0 4
33248: PUSH
33249: LD_VAR 0 10
33253: PPUSH
33254: LD_VAR 0 11
33258: PPUSH
33259: CALL_OW 546
33263: ST_TO_ADDR
// if hex [ 1 ] then
33264: LD_VAR 0 4
33268: PUSH
33269: LD_INT 1
33271: ARRAY
33272: IFFALSE 33276
// exit ;
33274: GO 33679
// height := hex [ 2 ] ;
33276: LD_ADDR_VAR 0 15
33280: PUSH
33281: LD_VAR 0 4
33285: PUSH
33286: LD_INT 2
33288: ARRAY
33289: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33290: LD_ADDR_VAR 0 14
33294: PUSH
33295: LD_INT 0
33297: PUSH
33298: LD_INT 2
33300: PUSH
33301: LD_INT 3
33303: PUSH
33304: LD_INT 5
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: ST_TO_ADDR
// for i in tmp do
33313: LD_ADDR_VAR 0 8
33317: PUSH
33318: LD_VAR 0 14
33322: PUSH
33323: FOR_IN
33324: IFFALSE 33494
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33326: LD_ADDR_VAR 0 9
33330: PUSH
33331: LD_VAR 0 10
33335: PPUSH
33336: LD_VAR 0 8
33340: PPUSH
33341: LD_INT 5
33343: PPUSH
33344: CALL_OW 272
33348: PUSH
33349: LD_VAR 0 11
33353: PPUSH
33354: LD_VAR 0 8
33358: PPUSH
33359: LD_INT 5
33361: PPUSH
33362: CALL_OW 273
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33371: LD_VAR 0 9
33375: PUSH
33376: LD_INT 1
33378: ARRAY
33379: PPUSH
33380: LD_VAR 0 9
33384: PUSH
33385: LD_INT 2
33387: ARRAY
33388: PPUSH
33389: CALL_OW 488
33393: IFFALSE 33492
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33395: LD_ADDR_VAR 0 4
33399: PUSH
33400: LD_VAR 0 9
33404: PUSH
33405: LD_INT 1
33407: ARRAY
33408: PPUSH
33409: LD_VAR 0 9
33413: PUSH
33414: LD_INT 2
33416: ARRAY
33417: PPUSH
33418: CALL_OW 546
33422: ST_TO_ADDR
// if hex [ 1 ] then
33423: LD_VAR 0 4
33427: PUSH
33428: LD_INT 1
33430: ARRAY
33431: IFFALSE 33435
// continue ;
33433: GO 33323
// h := hex [ 2 ] ;
33435: LD_ADDR_VAR 0 13
33439: PUSH
33440: LD_VAR 0 4
33444: PUSH
33445: LD_INT 2
33447: ARRAY
33448: ST_TO_ADDR
// if h + 7 < height then
33449: LD_VAR 0 13
33453: PUSH
33454: LD_INT 7
33456: PLUS
33457: PUSH
33458: LD_VAR 0 15
33462: LESS
33463: IFFALSE 33492
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33465: LD_ADDR_VAR 0 18
33469: PUSH
33470: LD_INT 7
33472: PUSH
33473: LD_INT 28
33475: PUSH
33476: LD_INT 45
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: LIST
33483: PUSH
33484: LD_VAR 0 12
33488: ARRAY
33489: ST_TO_ADDR
// break ;
33490: GO 33494
// end ; end ; end ;
33492: GO 33323
33494: POP
33495: POP
// end ; if not weapon then
33496: LD_VAR 0 18
33500: NOT
33501: IFFALSE 33561
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33503: LD_ADDR_VAR 0 5
33507: PUSH
33508: LD_VAR 0 5
33512: PUSH
33513: LD_INT 11
33515: PUSH
33516: LD_INT 30
33518: PUSH
33519: LD_INT 49
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: LIST
33526: DIFF
33527: ST_TO_ADDR
// if not list then
33528: LD_VAR 0 5
33532: NOT
33533: IFFALSE 33537
// exit ;
33535: GO 33679
// weapon := list [ rand ( 1 , list ) ] ;
33537: LD_ADDR_VAR 0 18
33541: PUSH
33542: LD_VAR 0 5
33546: PUSH
33547: LD_INT 1
33549: PPUSH
33550: LD_VAR 0 5
33554: PPUSH
33555: CALL_OW 12
33559: ARRAY
33560: ST_TO_ADDR
// end ; if weapon then
33561: LD_VAR 0 18
33565: IFFALSE 33679
// begin tmp := CostOfWeapon ( weapon ) ;
33567: LD_ADDR_VAR 0 14
33571: PUSH
33572: LD_VAR 0 18
33576: PPUSH
33577: CALL_OW 451
33581: ST_TO_ADDR
// j := GetBase ( tower ) ;
33582: LD_ADDR_VAR 0 9
33586: PUSH
33587: LD_VAR 0 1
33591: PPUSH
33592: CALL_OW 274
33596: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33597: LD_VAR 0 9
33601: PPUSH
33602: LD_INT 1
33604: PPUSH
33605: CALL_OW 275
33609: PUSH
33610: LD_VAR 0 14
33614: PUSH
33615: LD_INT 1
33617: ARRAY
33618: GREATEREQUAL
33619: PUSH
33620: LD_VAR 0 9
33624: PPUSH
33625: LD_INT 2
33627: PPUSH
33628: CALL_OW 275
33632: PUSH
33633: LD_VAR 0 14
33637: PUSH
33638: LD_INT 2
33640: ARRAY
33641: GREATEREQUAL
33642: AND
33643: PUSH
33644: LD_VAR 0 9
33648: PPUSH
33649: LD_INT 3
33651: PPUSH
33652: CALL_OW 275
33656: PUSH
33657: LD_VAR 0 14
33661: PUSH
33662: LD_INT 3
33664: ARRAY
33665: GREATEREQUAL
33666: AND
33667: IFFALSE 33679
// result := weapon ;
33669: LD_ADDR_VAR 0 3
33673: PUSH
33674: LD_VAR 0 18
33678: ST_TO_ADDR
// end ; end ;
33679: LD_VAR 0 3
33683: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33684: LD_INT 0
33686: PPUSH
33687: PPUSH
// result := true ;
33688: LD_ADDR_VAR 0 3
33692: PUSH
33693: LD_INT 1
33695: ST_TO_ADDR
// if array1 = array2 then
33696: LD_VAR 0 1
33700: PUSH
33701: LD_VAR 0 2
33705: EQUAL
33706: IFFALSE 33766
// begin for i = 1 to array1 do
33708: LD_ADDR_VAR 0 4
33712: PUSH
33713: DOUBLE
33714: LD_INT 1
33716: DEC
33717: ST_TO_ADDR
33718: LD_VAR 0 1
33722: PUSH
33723: FOR_TO
33724: IFFALSE 33762
// if array1 [ i ] <> array2 [ i ] then
33726: LD_VAR 0 1
33730: PUSH
33731: LD_VAR 0 4
33735: ARRAY
33736: PUSH
33737: LD_VAR 0 2
33741: PUSH
33742: LD_VAR 0 4
33746: ARRAY
33747: NONEQUAL
33748: IFFALSE 33760
// begin result := false ;
33750: LD_ADDR_VAR 0 3
33754: PUSH
33755: LD_INT 0
33757: ST_TO_ADDR
// break ;
33758: GO 33762
// end ;
33760: GO 33723
33762: POP
33763: POP
// end else
33764: GO 33774
// result := false ;
33766: LD_ADDR_VAR 0 3
33770: PUSH
33771: LD_INT 0
33773: ST_TO_ADDR
// end ;
33774: LD_VAR 0 3
33778: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33779: LD_INT 0
33781: PPUSH
33782: PPUSH
// if not array1 or not array2 then
33783: LD_VAR 0 1
33787: NOT
33788: PUSH
33789: LD_VAR 0 2
33793: NOT
33794: OR
33795: IFFALSE 33799
// exit ;
33797: GO 33863
// result := true ;
33799: LD_ADDR_VAR 0 3
33803: PUSH
33804: LD_INT 1
33806: ST_TO_ADDR
// for i = 1 to array1 do
33807: LD_ADDR_VAR 0 4
33811: PUSH
33812: DOUBLE
33813: LD_INT 1
33815: DEC
33816: ST_TO_ADDR
33817: LD_VAR 0 1
33821: PUSH
33822: FOR_TO
33823: IFFALSE 33861
// if array1 [ i ] <> array2 [ i ] then
33825: LD_VAR 0 1
33829: PUSH
33830: LD_VAR 0 4
33834: ARRAY
33835: PUSH
33836: LD_VAR 0 2
33840: PUSH
33841: LD_VAR 0 4
33845: ARRAY
33846: NONEQUAL
33847: IFFALSE 33859
// begin result := false ;
33849: LD_ADDR_VAR 0 3
33853: PUSH
33854: LD_INT 0
33856: ST_TO_ADDR
// break ;
33857: GO 33861
// end ;
33859: GO 33822
33861: POP
33862: POP
// end ;
33863: LD_VAR 0 3
33867: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33868: LD_INT 0
33870: PPUSH
33871: PPUSH
33872: PPUSH
// pom := GetBase ( fac ) ;
33873: LD_ADDR_VAR 0 5
33877: PUSH
33878: LD_VAR 0 1
33882: PPUSH
33883: CALL_OW 274
33887: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33888: LD_ADDR_VAR 0 4
33892: PUSH
33893: LD_VAR 0 2
33897: PUSH
33898: LD_INT 1
33900: ARRAY
33901: PPUSH
33902: LD_VAR 0 2
33906: PUSH
33907: LD_INT 2
33909: ARRAY
33910: PPUSH
33911: LD_VAR 0 2
33915: PUSH
33916: LD_INT 3
33918: ARRAY
33919: PPUSH
33920: LD_VAR 0 2
33924: PUSH
33925: LD_INT 4
33927: ARRAY
33928: PPUSH
33929: CALL_OW 449
33933: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33934: LD_ADDR_VAR 0 3
33938: PUSH
33939: LD_VAR 0 5
33943: PPUSH
33944: LD_INT 1
33946: PPUSH
33947: CALL_OW 275
33951: PUSH
33952: LD_VAR 0 4
33956: PUSH
33957: LD_INT 1
33959: ARRAY
33960: GREATEREQUAL
33961: PUSH
33962: LD_VAR 0 5
33966: PPUSH
33967: LD_INT 2
33969: PPUSH
33970: CALL_OW 275
33974: PUSH
33975: LD_VAR 0 4
33979: PUSH
33980: LD_INT 2
33982: ARRAY
33983: GREATEREQUAL
33984: AND
33985: PUSH
33986: LD_VAR 0 5
33990: PPUSH
33991: LD_INT 3
33993: PPUSH
33994: CALL_OW 275
33998: PUSH
33999: LD_VAR 0 4
34003: PUSH
34004: LD_INT 3
34006: ARRAY
34007: GREATEREQUAL
34008: AND
34009: ST_TO_ADDR
// end ;
34010: LD_VAR 0 3
34014: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
34015: LD_INT 0
34017: PPUSH
34018: PPUSH
34019: PPUSH
34020: PPUSH
// pom := GetBase ( building ) ;
34021: LD_ADDR_VAR 0 3
34025: PUSH
34026: LD_VAR 0 1
34030: PPUSH
34031: CALL_OW 274
34035: ST_TO_ADDR
// if not pom then
34036: LD_VAR 0 3
34040: NOT
34041: IFFALSE 34045
// exit ;
34043: GO 34215
// btype := GetBType ( building ) ;
34045: LD_ADDR_VAR 0 5
34049: PUSH
34050: LD_VAR 0 1
34054: PPUSH
34055: CALL_OW 266
34059: ST_TO_ADDR
// if btype = b_armoury then
34060: LD_VAR 0 5
34064: PUSH
34065: LD_INT 4
34067: EQUAL
34068: IFFALSE 34078
// btype := b_barracks ;
34070: LD_ADDR_VAR 0 5
34074: PUSH
34075: LD_INT 5
34077: ST_TO_ADDR
// if btype = b_depot then
34078: LD_VAR 0 5
34082: PUSH
34083: LD_INT 0
34085: EQUAL
34086: IFFALSE 34096
// btype := b_warehouse ;
34088: LD_ADDR_VAR 0 5
34092: PUSH
34093: LD_INT 1
34095: ST_TO_ADDR
// if btype = b_workshop then
34096: LD_VAR 0 5
34100: PUSH
34101: LD_INT 2
34103: EQUAL
34104: IFFALSE 34114
// btype := b_factory ;
34106: LD_ADDR_VAR 0 5
34110: PUSH
34111: LD_INT 3
34113: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34114: LD_ADDR_VAR 0 4
34118: PUSH
34119: LD_VAR 0 5
34123: PPUSH
34124: LD_VAR 0 1
34128: PPUSH
34129: CALL_OW 248
34133: PPUSH
34134: CALL_OW 450
34138: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34139: LD_ADDR_VAR 0 2
34143: PUSH
34144: LD_VAR 0 3
34148: PPUSH
34149: LD_INT 1
34151: PPUSH
34152: CALL_OW 275
34156: PUSH
34157: LD_VAR 0 4
34161: PUSH
34162: LD_INT 1
34164: ARRAY
34165: GREATEREQUAL
34166: PUSH
34167: LD_VAR 0 3
34171: PPUSH
34172: LD_INT 2
34174: PPUSH
34175: CALL_OW 275
34179: PUSH
34180: LD_VAR 0 4
34184: PUSH
34185: LD_INT 2
34187: ARRAY
34188: GREATEREQUAL
34189: AND
34190: PUSH
34191: LD_VAR 0 3
34195: PPUSH
34196: LD_INT 3
34198: PPUSH
34199: CALL_OW 275
34203: PUSH
34204: LD_VAR 0 4
34208: PUSH
34209: LD_INT 3
34211: ARRAY
34212: GREATEREQUAL
34213: AND
34214: ST_TO_ADDR
// end ;
34215: LD_VAR 0 2
34219: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34220: LD_INT 0
34222: PPUSH
34223: PPUSH
34224: PPUSH
// pom := GetBase ( building ) ;
34225: LD_ADDR_VAR 0 4
34229: PUSH
34230: LD_VAR 0 1
34234: PPUSH
34235: CALL_OW 274
34239: ST_TO_ADDR
// if not pom then
34240: LD_VAR 0 4
34244: NOT
34245: IFFALSE 34249
// exit ;
34247: GO 34350
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34249: LD_ADDR_VAR 0 5
34253: PUSH
34254: LD_VAR 0 2
34258: PPUSH
34259: LD_VAR 0 1
34263: PPUSH
34264: CALL_OW 248
34268: PPUSH
34269: CALL_OW 450
34273: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34274: LD_ADDR_VAR 0 3
34278: PUSH
34279: LD_VAR 0 4
34283: PPUSH
34284: LD_INT 1
34286: PPUSH
34287: CALL_OW 275
34291: PUSH
34292: LD_VAR 0 5
34296: PUSH
34297: LD_INT 1
34299: ARRAY
34300: GREATEREQUAL
34301: PUSH
34302: LD_VAR 0 4
34306: PPUSH
34307: LD_INT 2
34309: PPUSH
34310: CALL_OW 275
34314: PUSH
34315: LD_VAR 0 5
34319: PUSH
34320: LD_INT 2
34322: ARRAY
34323: GREATEREQUAL
34324: AND
34325: PUSH
34326: LD_VAR 0 4
34330: PPUSH
34331: LD_INT 3
34333: PPUSH
34334: CALL_OW 275
34338: PUSH
34339: LD_VAR 0 5
34343: PUSH
34344: LD_INT 3
34346: ARRAY
34347: GREATEREQUAL
34348: AND
34349: ST_TO_ADDR
// end ;
34350: LD_VAR 0 3
34354: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
34355: LD_INT 0
34357: PPUSH
34358: PPUSH
34359: PPUSH
34360: PPUSH
34361: PPUSH
34362: PPUSH
34363: PPUSH
34364: PPUSH
34365: PPUSH
34366: PPUSH
34367: PPUSH
// result := false ;
34368: LD_ADDR_VAR 0 8
34372: PUSH
34373: LD_INT 0
34375: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
34376: LD_VAR 0 5
34380: NOT
34381: PUSH
34382: LD_VAR 0 1
34386: NOT
34387: OR
34388: PUSH
34389: LD_VAR 0 2
34393: NOT
34394: OR
34395: PUSH
34396: LD_VAR 0 3
34400: NOT
34401: OR
34402: IFFALSE 34406
// exit ;
34404: GO 35220
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
34406: LD_ADDR_VAR 0 14
34410: PUSH
34411: LD_VAR 0 1
34415: PPUSH
34416: LD_VAR 0 2
34420: PPUSH
34421: LD_VAR 0 3
34425: PPUSH
34426: LD_VAR 0 4
34430: PPUSH
34431: LD_VAR 0 5
34435: PUSH
34436: LD_INT 1
34438: ARRAY
34439: PPUSH
34440: CALL_OW 248
34444: PPUSH
34445: LD_INT 0
34447: PPUSH
34448: CALL 36473 0 6
34452: ST_TO_ADDR
// if not hexes then
34453: LD_VAR 0 14
34457: NOT
34458: IFFALSE 34462
// exit ;
34460: GO 35220
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34462: LD_ADDR_VAR 0 17
34466: PUSH
34467: LD_VAR 0 5
34471: PPUSH
34472: LD_INT 22
34474: PUSH
34475: LD_VAR 0 13
34479: PPUSH
34480: CALL_OW 255
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 2
34491: PUSH
34492: LD_INT 30
34494: PUSH
34495: LD_INT 0
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 30
34504: PUSH
34505: LD_INT 1
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: LIST
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PPUSH
34521: CALL_OW 72
34525: ST_TO_ADDR
// for i = 1 to hexes do
34526: LD_ADDR_VAR 0 9
34530: PUSH
34531: DOUBLE
34532: LD_INT 1
34534: DEC
34535: ST_TO_ADDR
34536: LD_VAR 0 14
34540: PUSH
34541: FOR_TO
34542: IFFALSE 35218
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34544: LD_ADDR_VAR 0 13
34548: PUSH
34549: LD_VAR 0 14
34553: PUSH
34554: LD_VAR 0 9
34558: ARRAY
34559: PUSH
34560: LD_INT 1
34562: ARRAY
34563: PPUSH
34564: LD_VAR 0 14
34568: PUSH
34569: LD_VAR 0 9
34573: ARRAY
34574: PUSH
34575: LD_INT 2
34577: ARRAY
34578: PPUSH
34579: CALL_OW 428
34583: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34584: LD_VAR 0 14
34588: PUSH
34589: LD_VAR 0 9
34593: ARRAY
34594: PUSH
34595: LD_INT 1
34597: ARRAY
34598: PPUSH
34599: LD_VAR 0 14
34603: PUSH
34604: LD_VAR 0 9
34608: ARRAY
34609: PUSH
34610: LD_INT 2
34612: ARRAY
34613: PPUSH
34614: CALL_OW 351
34618: PUSH
34619: LD_VAR 0 14
34623: PUSH
34624: LD_VAR 0 9
34628: ARRAY
34629: PUSH
34630: LD_INT 1
34632: ARRAY
34633: PPUSH
34634: LD_VAR 0 14
34638: PUSH
34639: LD_VAR 0 9
34643: ARRAY
34644: PUSH
34645: LD_INT 2
34647: ARRAY
34648: PPUSH
34649: CALL_OW 488
34653: NOT
34654: OR
34655: PUSH
34656: LD_VAR 0 13
34660: PPUSH
34661: CALL_OW 247
34665: PUSH
34666: LD_INT 3
34668: EQUAL
34669: OR
34670: IFFALSE 34676
// exit ;
34672: POP
34673: POP
34674: GO 35220
// if not tmp then
34676: LD_VAR 0 13
34680: NOT
34681: IFFALSE 34685
// continue ;
34683: GO 34541
// result := true ;
34685: LD_ADDR_VAR 0 8
34689: PUSH
34690: LD_INT 1
34692: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34693: LD_VAR 0 6
34697: PUSH
34698: LD_VAR 0 13
34702: PPUSH
34703: CALL_OW 247
34707: PUSH
34708: LD_INT 2
34710: EQUAL
34711: AND
34712: PUSH
34713: LD_VAR 0 13
34717: PPUSH
34718: CALL_OW 263
34722: PUSH
34723: LD_INT 1
34725: EQUAL
34726: AND
34727: IFFALSE 34891
// begin if IsDrivenBy ( tmp ) then
34729: LD_VAR 0 13
34733: PPUSH
34734: CALL_OW 311
34738: IFFALSE 34742
// continue ;
34740: GO 34541
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34742: LD_VAR 0 6
34746: PPUSH
34747: LD_INT 3
34749: PUSH
34750: LD_INT 60
34752: PUSH
34753: EMPTY
34754: LIST
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 3
34762: PUSH
34763: LD_INT 55
34765: PUSH
34766: EMPTY
34767: LIST
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PPUSH
34777: CALL_OW 72
34781: IFFALSE 34889
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34783: LD_ADDR_VAR 0 18
34787: PUSH
34788: LD_VAR 0 6
34792: PPUSH
34793: LD_INT 3
34795: PUSH
34796: LD_INT 60
34798: PUSH
34799: EMPTY
34800: LIST
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 3
34808: PUSH
34809: LD_INT 55
34811: PUSH
34812: EMPTY
34813: LIST
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PPUSH
34823: CALL_OW 72
34827: PUSH
34828: LD_INT 1
34830: ARRAY
34831: ST_TO_ADDR
// if IsInUnit ( driver ) then
34832: LD_VAR 0 18
34836: PPUSH
34837: CALL_OW 310
34841: IFFALSE 34852
// ComExit ( driver ) ;
34843: LD_VAR 0 18
34847: PPUSH
34848: CALL 60252 0 1
// AddComEnterUnit ( driver , tmp ) ;
34852: LD_VAR 0 18
34856: PPUSH
34857: LD_VAR 0 13
34861: PPUSH
34862: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34866: LD_VAR 0 18
34870: PPUSH
34871: LD_VAR 0 7
34875: PPUSH
34876: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34880: LD_VAR 0 18
34884: PPUSH
34885: CALL_OW 181
// end ; continue ;
34889: GO 34541
// end ; if not cleaners or not tmp in cleaners then
34891: LD_VAR 0 6
34895: NOT
34896: PUSH
34897: LD_VAR 0 13
34901: PUSH
34902: LD_VAR 0 6
34906: IN
34907: NOT
34908: OR
34909: IFFALSE 35216
// begin if dep then
34911: LD_VAR 0 17
34915: IFFALSE 35051
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34917: LD_ADDR_VAR 0 16
34921: PUSH
34922: LD_VAR 0 17
34926: PUSH
34927: LD_INT 1
34929: ARRAY
34930: PPUSH
34931: CALL_OW 250
34935: PPUSH
34936: LD_VAR 0 17
34940: PUSH
34941: LD_INT 1
34943: ARRAY
34944: PPUSH
34945: CALL_OW 254
34949: PPUSH
34950: LD_INT 5
34952: PPUSH
34953: CALL_OW 272
34957: PUSH
34958: LD_VAR 0 17
34962: PUSH
34963: LD_INT 1
34965: ARRAY
34966: PPUSH
34967: CALL_OW 251
34971: PPUSH
34972: LD_VAR 0 17
34976: PUSH
34977: LD_INT 1
34979: ARRAY
34980: PPUSH
34981: CALL_OW 254
34985: PPUSH
34986: LD_INT 5
34988: PPUSH
34989: CALL_OW 273
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34998: LD_VAR 0 16
35002: PUSH
35003: LD_INT 1
35005: ARRAY
35006: PPUSH
35007: LD_VAR 0 16
35011: PUSH
35012: LD_INT 2
35014: ARRAY
35015: PPUSH
35016: CALL_OW 488
35020: IFFALSE 35051
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
35022: LD_VAR 0 13
35026: PPUSH
35027: LD_VAR 0 16
35031: PUSH
35032: LD_INT 1
35034: ARRAY
35035: PPUSH
35036: LD_VAR 0 16
35040: PUSH
35041: LD_INT 2
35043: ARRAY
35044: PPUSH
35045: CALL_OW 111
// continue ;
35049: GO 34541
// end ; end ; r := GetDir ( tmp ) ;
35051: LD_ADDR_VAR 0 15
35055: PUSH
35056: LD_VAR 0 13
35060: PPUSH
35061: CALL_OW 254
35065: ST_TO_ADDR
// if r = 5 then
35066: LD_VAR 0 15
35070: PUSH
35071: LD_INT 5
35073: EQUAL
35074: IFFALSE 35084
// r := 0 ;
35076: LD_ADDR_VAR 0 15
35080: PUSH
35081: LD_INT 0
35083: ST_TO_ADDR
// for j = r to 5 do
35084: LD_ADDR_VAR 0 10
35088: PUSH
35089: DOUBLE
35090: LD_VAR 0 15
35094: DEC
35095: ST_TO_ADDR
35096: LD_INT 5
35098: PUSH
35099: FOR_TO
35100: IFFALSE 35214
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35102: LD_ADDR_VAR 0 11
35106: PUSH
35107: LD_VAR 0 13
35111: PPUSH
35112: CALL_OW 250
35116: PPUSH
35117: LD_VAR 0 10
35121: PPUSH
35122: LD_INT 2
35124: PPUSH
35125: CALL_OW 272
35129: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35130: LD_ADDR_VAR 0 12
35134: PUSH
35135: LD_VAR 0 13
35139: PPUSH
35140: CALL_OW 251
35144: PPUSH
35145: LD_VAR 0 10
35149: PPUSH
35150: LD_INT 2
35152: PPUSH
35153: CALL_OW 273
35157: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35158: LD_VAR 0 11
35162: PPUSH
35163: LD_VAR 0 12
35167: PPUSH
35168: CALL_OW 488
35172: PUSH
35173: LD_VAR 0 11
35177: PPUSH
35178: LD_VAR 0 12
35182: PPUSH
35183: CALL_OW 428
35187: NOT
35188: AND
35189: IFFALSE 35212
// begin ComMoveXY ( tmp , _x , _y ) ;
35191: LD_VAR 0 13
35195: PPUSH
35196: LD_VAR 0 11
35200: PPUSH
35201: LD_VAR 0 12
35205: PPUSH
35206: CALL_OW 111
// break ;
35210: GO 35214
// end ; end ;
35212: GO 35099
35214: POP
35215: POP
// end ; end ;
35216: GO 34541
35218: POP
35219: POP
// end ;
35220: LD_VAR 0 8
35224: RET
// export function BuildingTechInvented ( side , btype ) ; begin
35225: LD_INT 0
35227: PPUSH
// result := true ;
35228: LD_ADDR_VAR 0 3
35232: PUSH
35233: LD_INT 1
35235: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
35236: LD_VAR 0 2
35240: PUSH
35241: LD_INT 24
35243: DOUBLE
35244: EQUAL
35245: IFTRUE 35255
35247: LD_INT 33
35249: DOUBLE
35250: EQUAL
35251: IFTRUE 35255
35253: GO 35280
35255: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
35256: LD_ADDR_VAR 0 3
35260: PUSH
35261: LD_INT 32
35263: PPUSH
35264: LD_VAR 0 1
35268: PPUSH
35269: CALL_OW 321
35273: PUSH
35274: LD_INT 2
35276: EQUAL
35277: ST_TO_ADDR
35278: GO 35596
35280: LD_INT 20
35282: DOUBLE
35283: EQUAL
35284: IFTRUE 35288
35286: GO 35313
35288: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
35289: LD_ADDR_VAR 0 3
35293: PUSH
35294: LD_INT 6
35296: PPUSH
35297: LD_VAR 0 1
35301: PPUSH
35302: CALL_OW 321
35306: PUSH
35307: LD_INT 2
35309: EQUAL
35310: ST_TO_ADDR
35311: GO 35596
35313: LD_INT 22
35315: DOUBLE
35316: EQUAL
35317: IFTRUE 35327
35319: LD_INT 36
35321: DOUBLE
35322: EQUAL
35323: IFTRUE 35327
35325: GO 35352
35327: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
35328: LD_ADDR_VAR 0 3
35332: PUSH
35333: LD_INT 15
35335: PPUSH
35336: LD_VAR 0 1
35340: PPUSH
35341: CALL_OW 321
35345: PUSH
35346: LD_INT 2
35348: EQUAL
35349: ST_TO_ADDR
35350: GO 35596
35352: LD_INT 30
35354: DOUBLE
35355: EQUAL
35356: IFTRUE 35360
35358: GO 35385
35360: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
35361: LD_ADDR_VAR 0 3
35365: PUSH
35366: LD_INT 20
35368: PPUSH
35369: LD_VAR 0 1
35373: PPUSH
35374: CALL_OW 321
35378: PUSH
35379: LD_INT 2
35381: EQUAL
35382: ST_TO_ADDR
35383: GO 35596
35385: LD_INT 28
35387: DOUBLE
35388: EQUAL
35389: IFTRUE 35399
35391: LD_INT 21
35393: DOUBLE
35394: EQUAL
35395: IFTRUE 35399
35397: GO 35424
35399: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
35400: LD_ADDR_VAR 0 3
35404: PUSH
35405: LD_INT 21
35407: PPUSH
35408: LD_VAR 0 1
35412: PPUSH
35413: CALL_OW 321
35417: PUSH
35418: LD_INT 2
35420: EQUAL
35421: ST_TO_ADDR
35422: GO 35596
35424: LD_INT 16
35426: DOUBLE
35427: EQUAL
35428: IFTRUE 35432
35430: GO 35457
35432: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
35433: LD_ADDR_VAR 0 3
35437: PUSH
35438: LD_INT 84
35440: PPUSH
35441: LD_VAR 0 1
35445: PPUSH
35446: CALL_OW 321
35450: PUSH
35451: LD_INT 2
35453: EQUAL
35454: ST_TO_ADDR
35455: GO 35596
35457: LD_INT 19
35459: DOUBLE
35460: EQUAL
35461: IFTRUE 35471
35463: LD_INT 23
35465: DOUBLE
35466: EQUAL
35467: IFTRUE 35471
35469: GO 35496
35471: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
35472: LD_ADDR_VAR 0 3
35476: PUSH
35477: LD_INT 83
35479: PPUSH
35480: LD_VAR 0 1
35484: PPUSH
35485: CALL_OW 321
35489: PUSH
35490: LD_INT 2
35492: EQUAL
35493: ST_TO_ADDR
35494: GO 35596
35496: LD_INT 17
35498: DOUBLE
35499: EQUAL
35500: IFTRUE 35504
35502: GO 35529
35504: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
35505: LD_ADDR_VAR 0 3
35509: PUSH
35510: LD_INT 39
35512: PPUSH
35513: LD_VAR 0 1
35517: PPUSH
35518: CALL_OW 321
35522: PUSH
35523: LD_INT 2
35525: EQUAL
35526: ST_TO_ADDR
35527: GO 35596
35529: LD_INT 18
35531: DOUBLE
35532: EQUAL
35533: IFTRUE 35537
35535: GO 35562
35537: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
35538: LD_ADDR_VAR 0 3
35542: PUSH
35543: LD_INT 40
35545: PPUSH
35546: LD_VAR 0 1
35550: PPUSH
35551: CALL_OW 321
35555: PUSH
35556: LD_INT 2
35558: EQUAL
35559: ST_TO_ADDR
35560: GO 35596
35562: LD_INT 27
35564: DOUBLE
35565: EQUAL
35566: IFTRUE 35570
35568: GO 35595
35570: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
35571: LD_ADDR_VAR 0 3
35575: PUSH
35576: LD_INT 35
35578: PPUSH
35579: LD_VAR 0 1
35583: PPUSH
35584: CALL_OW 321
35588: PUSH
35589: LD_INT 2
35591: EQUAL
35592: ST_TO_ADDR
35593: GO 35596
35595: POP
// end ;
35596: LD_VAR 0 3
35600: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
35601: LD_INT 0
35603: PPUSH
35604: PPUSH
35605: PPUSH
35606: PPUSH
35607: PPUSH
35608: PPUSH
35609: PPUSH
35610: PPUSH
35611: PPUSH
35612: PPUSH
35613: PPUSH
// result := false ;
35614: LD_ADDR_VAR 0 6
35618: PUSH
35619: LD_INT 0
35621: ST_TO_ADDR
// if btype = b_depot then
35622: LD_VAR 0 2
35626: PUSH
35627: LD_INT 0
35629: EQUAL
35630: IFFALSE 35642
// begin result := true ;
35632: LD_ADDR_VAR 0 6
35636: PUSH
35637: LD_INT 1
35639: ST_TO_ADDR
// exit ;
35640: GO 36468
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35642: LD_VAR 0 1
35646: NOT
35647: PUSH
35648: LD_VAR 0 1
35652: PPUSH
35653: CALL_OW 266
35657: PUSH
35658: LD_INT 0
35660: PUSH
35661: LD_INT 1
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: IN
35668: NOT
35669: OR
35670: PUSH
35671: LD_VAR 0 2
35675: NOT
35676: OR
35677: PUSH
35678: LD_VAR 0 5
35682: PUSH
35683: LD_INT 0
35685: PUSH
35686: LD_INT 1
35688: PUSH
35689: LD_INT 2
35691: PUSH
35692: LD_INT 3
35694: PUSH
35695: LD_INT 4
35697: PUSH
35698: LD_INT 5
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: IN
35709: NOT
35710: OR
35711: PUSH
35712: LD_VAR 0 3
35716: PPUSH
35717: LD_VAR 0 4
35721: PPUSH
35722: CALL_OW 488
35726: NOT
35727: OR
35728: IFFALSE 35732
// exit ;
35730: GO 36468
// side := GetSide ( depot ) ;
35732: LD_ADDR_VAR 0 9
35736: PUSH
35737: LD_VAR 0 1
35741: PPUSH
35742: CALL_OW 255
35746: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35747: LD_VAR 0 9
35751: PPUSH
35752: LD_VAR 0 2
35756: PPUSH
35757: CALL 35225 0 2
35761: NOT
35762: IFFALSE 35766
// exit ;
35764: GO 36468
// pom := GetBase ( depot ) ;
35766: LD_ADDR_VAR 0 10
35770: PUSH
35771: LD_VAR 0 1
35775: PPUSH
35776: CALL_OW 274
35780: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35781: LD_ADDR_VAR 0 11
35785: PUSH
35786: LD_VAR 0 2
35790: PPUSH
35791: LD_VAR 0 1
35795: PPUSH
35796: CALL_OW 248
35800: PPUSH
35801: CALL_OW 450
35805: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35806: LD_VAR 0 10
35810: PPUSH
35811: LD_INT 1
35813: PPUSH
35814: CALL_OW 275
35818: PUSH
35819: LD_VAR 0 11
35823: PUSH
35824: LD_INT 1
35826: ARRAY
35827: GREATEREQUAL
35828: PUSH
35829: LD_VAR 0 10
35833: PPUSH
35834: LD_INT 2
35836: PPUSH
35837: CALL_OW 275
35841: PUSH
35842: LD_VAR 0 11
35846: PUSH
35847: LD_INT 2
35849: ARRAY
35850: GREATEREQUAL
35851: AND
35852: PUSH
35853: LD_VAR 0 10
35857: PPUSH
35858: LD_INT 3
35860: PPUSH
35861: CALL_OW 275
35865: PUSH
35866: LD_VAR 0 11
35870: PUSH
35871: LD_INT 3
35873: ARRAY
35874: GREATEREQUAL
35875: AND
35876: NOT
35877: IFFALSE 35881
// exit ;
35879: GO 36468
// if GetBType ( depot ) = b_depot then
35881: LD_VAR 0 1
35885: PPUSH
35886: CALL_OW 266
35890: PUSH
35891: LD_INT 0
35893: EQUAL
35894: IFFALSE 35906
// dist := 28 else
35896: LD_ADDR_VAR 0 14
35900: PUSH
35901: LD_INT 28
35903: ST_TO_ADDR
35904: GO 35914
// dist := 36 ;
35906: LD_ADDR_VAR 0 14
35910: PUSH
35911: LD_INT 36
35913: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35914: LD_VAR 0 1
35918: PPUSH
35919: LD_VAR 0 3
35923: PPUSH
35924: LD_VAR 0 4
35928: PPUSH
35929: CALL_OW 297
35933: PUSH
35934: LD_VAR 0 14
35938: GREATER
35939: IFFALSE 35943
// exit ;
35941: GO 36468
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35943: LD_ADDR_VAR 0 12
35947: PUSH
35948: LD_VAR 0 2
35952: PPUSH
35953: LD_VAR 0 3
35957: PPUSH
35958: LD_VAR 0 4
35962: PPUSH
35963: LD_VAR 0 5
35967: PPUSH
35968: LD_VAR 0 1
35972: PPUSH
35973: CALL_OW 248
35977: PPUSH
35978: LD_INT 0
35980: PPUSH
35981: CALL 36473 0 6
35985: ST_TO_ADDR
// if not hexes then
35986: LD_VAR 0 12
35990: NOT
35991: IFFALSE 35995
// exit ;
35993: GO 36468
// hex := GetHexInfo ( x , y ) ;
35995: LD_ADDR_VAR 0 15
35999: PUSH
36000: LD_VAR 0 3
36004: PPUSH
36005: LD_VAR 0 4
36009: PPUSH
36010: CALL_OW 546
36014: ST_TO_ADDR
// if hex [ 1 ] then
36015: LD_VAR 0 15
36019: PUSH
36020: LD_INT 1
36022: ARRAY
36023: IFFALSE 36027
// exit ;
36025: GO 36468
// height := hex [ 2 ] ;
36027: LD_ADDR_VAR 0 13
36031: PUSH
36032: LD_VAR 0 15
36036: PUSH
36037: LD_INT 2
36039: ARRAY
36040: ST_TO_ADDR
// for i = 1 to hexes do
36041: LD_ADDR_VAR 0 7
36045: PUSH
36046: DOUBLE
36047: LD_INT 1
36049: DEC
36050: ST_TO_ADDR
36051: LD_VAR 0 12
36055: PUSH
36056: FOR_TO
36057: IFFALSE 36387
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36059: LD_VAR 0 12
36063: PUSH
36064: LD_VAR 0 7
36068: ARRAY
36069: PUSH
36070: LD_INT 1
36072: ARRAY
36073: PPUSH
36074: LD_VAR 0 12
36078: PUSH
36079: LD_VAR 0 7
36083: ARRAY
36084: PUSH
36085: LD_INT 2
36087: ARRAY
36088: PPUSH
36089: CALL_OW 488
36093: NOT
36094: PUSH
36095: LD_VAR 0 12
36099: PUSH
36100: LD_VAR 0 7
36104: ARRAY
36105: PUSH
36106: LD_INT 1
36108: ARRAY
36109: PPUSH
36110: LD_VAR 0 12
36114: PUSH
36115: LD_VAR 0 7
36119: ARRAY
36120: PUSH
36121: LD_INT 2
36123: ARRAY
36124: PPUSH
36125: CALL_OW 428
36129: PUSH
36130: LD_INT 0
36132: GREATER
36133: OR
36134: PUSH
36135: LD_VAR 0 12
36139: PUSH
36140: LD_VAR 0 7
36144: ARRAY
36145: PUSH
36146: LD_INT 1
36148: ARRAY
36149: PPUSH
36150: LD_VAR 0 12
36154: PUSH
36155: LD_VAR 0 7
36159: ARRAY
36160: PUSH
36161: LD_INT 2
36163: ARRAY
36164: PPUSH
36165: CALL_OW 351
36169: OR
36170: IFFALSE 36176
// exit ;
36172: POP
36173: POP
36174: GO 36468
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36176: LD_ADDR_VAR 0 8
36180: PUSH
36181: LD_VAR 0 12
36185: PUSH
36186: LD_VAR 0 7
36190: ARRAY
36191: PUSH
36192: LD_INT 1
36194: ARRAY
36195: PPUSH
36196: LD_VAR 0 12
36200: PUSH
36201: LD_VAR 0 7
36205: ARRAY
36206: PUSH
36207: LD_INT 2
36209: ARRAY
36210: PPUSH
36211: CALL_OW 546
36215: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36216: LD_VAR 0 8
36220: PUSH
36221: LD_INT 1
36223: ARRAY
36224: PUSH
36225: LD_VAR 0 8
36229: PUSH
36230: LD_INT 2
36232: ARRAY
36233: PUSH
36234: LD_VAR 0 13
36238: PUSH
36239: LD_INT 2
36241: PLUS
36242: GREATER
36243: OR
36244: PUSH
36245: LD_VAR 0 8
36249: PUSH
36250: LD_INT 2
36252: ARRAY
36253: PUSH
36254: LD_VAR 0 13
36258: PUSH
36259: LD_INT 2
36261: MINUS
36262: LESS
36263: OR
36264: PUSH
36265: LD_VAR 0 8
36269: PUSH
36270: LD_INT 3
36272: ARRAY
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: LD_INT 8
36279: PUSH
36280: LD_INT 9
36282: PUSH
36283: LD_INT 10
36285: PUSH
36286: LD_INT 11
36288: PUSH
36289: LD_INT 12
36291: PUSH
36292: LD_INT 13
36294: PUSH
36295: LD_INT 16
36297: PUSH
36298: LD_INT 17
36300: PUSH
36301: LD_INT 18
36303: PUSH
36304: LD_INT 19
36306: PUSH
36307: LD_INT 20
36309: PUSH
36310: LD_INT 21
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: IN
36328: NOT
36329: OR
36330: PUSH
36331: LD_VAR 0 8
36335: PUSH
36336: LD_INT 5
36338: ARRAY
36339: NOT
36340: OR
36341: PUSH
36342: LD_VAR 0 8
36346: PUSH
36347: LD_INT 6
36349: ARRAY
36350: PUSH
36351: LD_INT 1
36353: PUSH
36354: LD_INT 2
36356: PUSH
36357: LD_INT 7
36359: PUSH
36360: LD_INT 9
36362: PUSH
36363: LD_INT 10
36365: PUSH
36366: LD_INT 11
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: IN
36377: NOT
36378: OR
36379: IFFALSE 36385
// exit ;
36381: POP
36382: POP
36383: GO 36468
// end ;
36385: GO 36056
36387: POP
36388: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36389: LD_VAR 0 9
36393: PPUSH
36394: LD_VAR 0 3
36398: PPUSH
36399: LD_VAR 0 4
36403: PPUSH
36404: LD_INT 20
36406: PPUSH
36407: CALL 28391 0 4
36411: PUSH
36412: LD_INT 4
36414: ARRAY
36415: IFFALSE 36419
// exit ;
36417: GO 36468
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36419: LD_VAR 0 2
36423: PUSH
36424: LD_INT 29
36426: PUSH
36427: LD_INT 30
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: IN
36434: PUSH
36435: LD_VAR 0 3
36439: PPUSH
36440: LD_VAR 0 4
36444: PPUSH
36445: LD_VAR 0 9
36449: PPUSH
36450: CALL_OW 440
36454: NOT
36455: AND
36456: IFFALSE 36460
// exit ;
36458: GO 36468
// result := true ;
36460: LD_ADDR_VAR 0 6
36464: PUSH
36465: LD_INT 1
36467: ST_TO_ADDR
// end ;
36468: LD_VAR 0 6
36472: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36473: LD_INT 0
36475: PPUSH
36476: PPUSH
36477: PPUSH
36478: PPUSH
36479: PPUSH
36480: PPUSH
36481: PPUSH
36482: PPUSH
36483: PPUSH
36484: PPUSH
36485: PPUSH
36486: PPUSH
36487: PPUSH
36488: PPUSH
36489: PPUSH
36490: PPUSH
36491: PPUSH
36492: PPUSH
36493: PPUSH
36494: PPUSH
36495: PPUSH
36496: PPUSH
36497: PPUSH
36498: PPUSH
36499: PPUSH
36500: PPUSH
36501: PPUSH
36502: PPUSH
36503: PPUSH
36504: PPUSH
36505: PPUSH
36506: PPUSH
36507: PPUSH
36508: PPUSH
36509: PPUSH
36510: PPUSH
36511: PPUSH
36512: PPUSH
36513: PPUSH
36514: PPUSH
36515: PPUSH
36516: PPUSH
36517: PPUSH
36518: PPUSH
36519: PPUSH
36520: PPUSH
36521: PPUSH
36522: PPUSH
36523: PPUSH
36524: PPUSH
36525: PPUSH
36526: PPUSH
36527: PPUSH
36528: PPUSH
36529: PPUSH
36530: PPUSH
36531: PPUSH
36532: PPUSH
// result = [ ] ;
36533: LD_ADDR_VAR 0 7
36537: PUSH
36538: EMPTY
36539: ST_TO_ADDR
// temp_list = [ ] ;
36540: LD_ADDR_VAR 0 9
36544: PUSH
36545: EMPTY
36546: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36547: LD_VAR 0 4
36551: PUSH
36552: LD_INT 0
36554: PUSH
36555: LD_INT 1
36557: PUSH
36558: LD_INT 2
36560: PUSH
36561: LD_INT 3
36563: PUSH
36564: LD_INT 4
36566: PUSH
36567: LD_INT 5
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: IN
36578: NOT
36579: PUSH
36580: LD_VAR 0 1
36584: PUSH
36585: LD_INT 0
36587: PUSH
36588: LD_INT 1
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: IN
36595: PUSH
36596: LD_VAR 0 5
36600: PUSH
36601: LD_INT 1
36603: PUSH
36604: LD_INT 2
36606: PUSH
36607: LD_INT 3
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: LIST
36614: IN
36615: NOT
36616: AND
36617: OR
36618: IFFALSE 36622
// exit ;
36620: GO 55013
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36622: LD_VAR 0 1
36626: PUSH
36627: LD_INT 6
36629: PUSH
36630: LD_INT 7
36632: PUSH
36633: LD_INT 8
36635: PUSH
36636: LD_INT 13
36638: PUSH
36639: LD_INT 12
36641: PUSH
36642: LD_INT 15
36644: PUSH
36645: LD_INT 11
36647: PUSH
36648: LD_INT 14
36650: PUSH
36651: LD_INT 10
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: IN
36665: IFFALSE 36675
// btype = b_lab ;
36667: LD_ADDR_VAR 0 1
36671: PUSH
36672: LD_INT 6
36674: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36675: LD_VAR 0 6
36679: PUSH
36680: LD_INT 0
36682: PUSH
36683: LD_INT 1
36685: PUSH
36686: LD_INT 2
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: LIST
36693: IN
36694: NOT
36695: PUSH
36696: LD_VAR 0 1
36700: PUSH
36701: LD_INT 0
36703: PUSH
36704: LD_INT 1
36706: PUSH
36707: LD_INT 2
36709: PUSH
36710: LD_INT 3
36712: PUSH
36713: LD_INT 6
36715: PUSH
36716: LD_INT 36
36718: PUSH
36719: LD_INT 4
36721: PUSH
36722: LD_INT 5
36724: PUSH
36725: LD_INT 31
36727: PUSH
36728: LD_INT 32
36730: PUSH
36731: LD_INT 33
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: IN
36747: NOT
36748: PUSH
36749: LD_VAR 0 6
36753: PUSH
36754: LD_INT 1
36756: EQUAL
36757: AND
36758: OR
36759: PUSH
36760: LD_VAR 0 1
36764: PUSH
36765: LD_INT 2
36767: PUSH
36768: LD_INT 3
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: IN
36775: NOT
36776: PUSH
36777: LD_VAR 0 6
36781: PUSH
36782: LD_INT 2
36784: EQUAL
36785: AND
36786: OR
36787: IFFALSE 36797
// mode = 0 ;
36789: LD_ADDR_VAR 0 6
36793: PUSH
36794: LD_INT 0
36796: ST_TO_ADDR
// case mode of 0 :
36797: LD_VAR 0 6
36801: PUSH
36802: LD_INT 0
36804: DOUBLE
36805: EQUAL
36806: IFTRUE 36810
36808: GO 48263
36810: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36811: LD_ADDR_VAR 0 11
36815: PUSH
36816: LD_INT 0
36818: PUSH
36819: LD_INT 0
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 0
36828: PUSH
36829: LD_INT 1
36831: NEG
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 1
36839: PUSH
36840: LD_INT 0
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 1
36849: PUSH
36850: LD_INT 1
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 0
36859: PUSH
36860: LD_INT 1
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: LD_INT 1
36869: NEG
36870: PUSH
36871: LD_INT 0
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 1
36880: NEG
36881: PUSH
36882: LD_INT 1
36884: NEG
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 1
36892: NEG
36893: PUSH
36894: LD_INT 2
36896: NEG
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 0
36904: PUSH
36905: LD_INT 2
36907: NEG
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 1
36915: PUSH
36916: LD_INT 1
36918: NEG
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 1
36926: PUSH
36927: LD_INT 2
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 0
36936: PUSH
36937: LD_INT 2
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 1
36946: NEG
36947: PUSH
36948: LD_INT 1
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 1
36957: PUSH
36958: LD_INT 3
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 0
36967: PUSH
36968: LD_INT 3
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 1
36977: NEG
36978: PUSH
36979: LD_INT 2
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37004: LD_ADDR_VAR 0 12
37008: PUSH
37009: LD_INT 0
37011: PUSH
37012: LD_INT 0
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 0
37021: PUSH
37022: LD_INT 1
37024: NEG
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 1
37032: PUSH
37033: LD_INT 0
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 1
37042: PUSH
37043: LD_INT 1
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 0
37052: PUSH
37053: LD_INT 1
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 1
37062: NEG
37063: PUSH
37064: LD_INT 0
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 1
37073: NEG
37074: PUSH
37075: LD_INT 1
37077: NEG
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 1
37085: PUSH
37086: LD_INT 1
37088: NEG
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 2
37096: PUSH
37097: LD_INT 0
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 2
37106: PUSH
37107: LD_INT 1
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 1
37116: NEG
37117: PUSH
37118: LD_INT 1
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 2
37127: NEG
37128: PUSH
37129: LD_INT 0
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 2
37138: NEG
37139: PUSH
37140: LD_INT 1
37142: NEG
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 2
37150: NEG
37151: PUSH
37152: LD_INT 1
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 3
37161: NEG
37162: PUSH
37163: LD_INT 0
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 3
37172: NEG
37173: PUSH
37174: LD_INT 1
37176: NEG
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37200: LD_ADDR_VAR 0 13
37204: PUSH
37205: LD_INT 0
37207: PUSH
37208: LD_INT 0
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 0
37217: PUSH
37218: LD_INT 1
37220: NEG
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 1
37228: PUSH
37229: LD_INT 0
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 1
37238: PUSH
37239: LD_INT 1
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 0
37248: PUSH
37249: LD_INT 1
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 1
37258: NEG
37259: PUSH
37260: LD_INT 0
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 1
37269: NEG
37270: PUSH
37271: LD_INT 1
37273: NEG
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 1
37281: NEG
37282: PUSH
37283: LD_INT 2
37285: NEG
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 2
37293: PUSH
37294: LD_INT 1
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 2
37303: PUSH
37304: LD_INT 2
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 1
37313: PUSH
37314: LD_INT 2
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 2
37323: NEG
37324: PUSH
37325: LD_INT 1
37327: NEG
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 2
37335: NEG
37336: PUSH
37337: LD_INT 2
37339: NEG
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 2
37347: NEG
37348: PUSH
37349: LD_INT 3
37351: NEG
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 3
37359: NEG
37360: PUSH
37361: LD_INT 2
37363: NEG
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 3
37371: NEG
37372: PUSH
37373: LD_INT 3
37375: NEG
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37399: LD_ADDR_VAR 0 14
37403: PUSH
37404: LD_INT 0
37406: PUSH
37407: LD_INT 0
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 0
37416: PUSH
37417: LD_INT 1
37419: NEG
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 1
37427: PUSH
37428: LD_INT 0
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 1
37437: PUSH
37438: LD_INT 1
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 0
37447: PUSH
37448: LD_INT 1
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 1
37457: NEG
37458: PUSH
37459: LD_INT 0
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 1
37468: NEG
37469: PUSH
37470: LD_INT 1
37472: NEG
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 1
37480: NEG
37481: PUSH
37482: LD_INT 2
37484: NEG
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 0
37492: PUSH
37493: LD_INT 2
37495: NEG
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 1
37503: PUSH
37504: LD_INT 1
37506: NEG
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 1
37514: PUSH
37515: LD_INT 2
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 0
37524: PUSH
37525: LD_INT 2
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 1
37534: NEG
37535: PUSH
37536: LD_INT 1
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 1
37545: NEG
37546: PUSH
37547: LD_INT 3
37549: NEG
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 0
37557: PUSH
37558: LD_INT 3
37560: NEG
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 1
37568: PUSH
37569: LD_INT 2
37571: NEG
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37595: LD_ADDR_VAR 0 15
37599: PUSH
37600: LD_INT 0
37602: PUSH
37603: LD_INT 0
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 0
37612: PUSH
37613: LD_INT 1
37615: NEG
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 1
37623: PUSH
37624: LD_INT 0
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 1
37633: PUSH
37634: LD_INT 1
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 0
37643: PUSH
37644: LD_INT 1
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 1
37653: NEG
37654: PUSH
37655: LD_INT 0
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 1
37664: NEG
37665: PUSH
37666: LD_INT 1
37668: NEG
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 1
37676: PUSH
37677: LD_INT 1
37679: NEG
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 2
37687: PUSH
37688: LD_INT 0
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 2
37697: PUSH
37698: LD_INT 1
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 1
37707: NEG
37708: PUSH
37709: LD_INT 1
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 2
37718: NEG
37719: PUSH
37720: LD_INT 0
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 2
37729: NEG
37730: PUSH
37731: LD_INT 1
37733: NEG
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 2
37741: PUSH
37742: LD_INT 1
37744: NEG
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 3
37752: PUSH
37753: LD_INT 0
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 3
37762: PUSH
37763: LD_INT 1
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: LIST
37787: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37788: LD_ADDR_VAR 0 16
37792: PUSH
37793: LD_INT 0
37795: PUSH
37796: LD_INT 0
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 0
37805: PUSH
37806: LD_INT 1
37808: NEG
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 1
37816: PUSH
37817: LD_INT 0
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 1
37826: PUSH
37827: LD_INT 1
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 0
37836: PUSH
37837: LD_INT 1
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 1
37846: NEG
37847: PUSH
37848: LD_INT 0
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 1
37857: NEG
37858: PUSH
37859: LD_INT 1
37861: NEG
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 1
37869: NEG
37870: PUSH
37871: LD_INT 2
37873: NEG
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 2
37881: PUSH
37882: LD_INT 1
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 2
37891: PUSH
37892: LD_INT 2
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 1
37901: PUSH
37902: LD_INT 2
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 2
37911: NEG
37912: PUSH
37913: LD_INT 1
37915: NEG
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 2
37923: NEG
37924: PUSH
37925: LD_INT 2
37927: NEG
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 3
37935: PUSH
37936: LD_INT 2
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 3
37945: PUSH
37946: LD_INT 3
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 2
37955: PUSH
37956: LD_INT 3
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37981: LD_ADDR_VAR 0 17
37985: PUSH
37986: LD_INT 0
37988: PUSH
37989: LD_INT 0
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 0
37998: PUSH
37999: LD_INT 1
38001: NEG
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 1
38009: PUSH
38010: LD_INT 0
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 1
38019: PUSH
38020: LD_INT 1
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 0
38029: PUSH
38030: LD_INT 1
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 1
38039: NEG
38040: PUSH
38041: LD_INT 0
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 1
38050: NEG
38051: PUSH
38052: LD_INT 1
38054: NEG
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 1
38062: NEG
38063: PUSH
38064: LD_INT 2
38066: NEG
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 0
38074: PUSH
38075: LD_INT 2
38077: NEG
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 1
38085: PUSH
38086: LD_INT 1
38088: NEG
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 2
38096: PUSH
38097: LD_INT 0
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 2
38106: PUSH
38107: LD_INT 1
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 2
38116: PUSH
38117: LD_INT 2
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 1
38126: PUSH
38127: LD_INT 2
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 0
38136: PUSH
38137: LD_INT 2
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 1
38146: NEG
38147: PUSH
38148: LD_INT 1
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 2
38157: NEG
38158: PUSH
38159: LD_INT 0
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 2
38168: NEG
38169: PUSH
38170: LD_INT 1
38172: NEG
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 2
38180: NEG
38181: PUSH
38182: LD_INT 2
38184: NEG
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38211: LD_ADDR_VAR 0 18
38215: PUSH
38216: LD_INT 0
38218: PUSH
38219: LD_INT 0
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 0
38228: PUSH
38229: LD_INT 1
38231: NEG
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 1
38239: PUSH
38240: LD_INT 0
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 1
38249: PUSH
38250: LD_INT 1
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 0
38259: PUSH
38260: LD_INT 1
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 1
38269: NEG
38270: PUSH
38271: LD_INT 0
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 1
38280: NEG
38281: PUSH
38282: LD_INT 1
38284: NEG
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 1
38292: NEG
38293: PUSH
38294: LD_INT 2
38296: NEG
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 0
38304: PUSH
38305: LD_INT 2
38307: NEG
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 1
38315: PUSH
38316: LD_INT 1
38318: NEG
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 2
38326: PUSH
38327: LD_INT 0
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 2
38336: PUSH
38337: LD_INT 1
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 2
38346: PUSH
38347: LD_INT 2
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 1
38356: PUSH
38357: LD_INT 2
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 0
38366: PUSH
38367: LD_INT 2
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 1
38376: NEG
38377: PUSH
38378: LD_INT 1
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 2
38387: NEG
38388: PUSH
38389: LD_INT 0
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 2
38398: NEG
38399: PUSH
38400: LD_INT 1
38402: NEG
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 2
38410: NEG
38411: PUSH
38412: LD_INT 2
38414: NEG
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38441: LD_ADDR_VAR 0 19
38445: PUSH
38446: LD_INT 0
38448: PUSH
38449: LD_INT 0
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 0
38458: PUSH
38459: LD_INT 1
38461: NEG
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 1
38469: PUSH
38470: LD_INT 0
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 1
38479: PUSH
38480: LD_INT 1
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 0
38489: PUSH
38490: LD_INT 1
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 1
38499: NEG
38500: PUSH
38501: LD_INT 0
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 1
38510: NEG
38511: PUSH
38512: LD_INT 1
38514: NEG
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 1
38522: NEG
38523: PUSH
38524: LD_INT 2
38526: NEG
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 0
38534: PUSH
38535: LD_INT 2
38537: NEG
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 1
38545: PUSH
38546: LD_INT 1
38548: NEG
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 2
38556: PUSH
38557: LD_INT 0
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 2
38566: PUSH
38567: LD_INT 1
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 2
38576: PUSH
38577: LD_INT 2
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 1
38586: PUSH
38587: LD_INT 2
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 0
38596: PUSH
38597: LD_INT 2
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 1
38606: NEG
38607: PUSH
38608: LD_INT 1
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 2
38617: NEG
38618: PUSH
38619: LD_INT 0
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 2
38628: NEG
38629: PUSH
38630: LD_INT 1
38632: NEG
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 2
38640: NEG
38641: PUSH
38642: LD_INT 2
38644: NEG
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38671: LD_ADDR_VAR 0 20
38675: PUSH
38676: LD_INT 0
38678: PUSH
38679: LD_INT 0
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 0
38688: PUSH
38689: LD_INT 1
38691: NEG
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 1
38699: PUSH
38700: LD_INT 0
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 1
38709: PUSH
38710: LD_INT 1
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 0
38719: PUSH
38720: LD_INT 1
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 1
38729: NEG
38730: PUSH
38731: LD_INT 0
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 1
38740: NEG
38741: PUSH
38742: LD_INT 1
38744: NEG
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 1
38752: NEG
38753: PUSH
38754: LD_INT 2
38756: NEG
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 0
38764: PUSH
38765: LD_INT 2
38767: NEG
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 1
38775: PUSH
38776: LD_INT 1
38778: NEG
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 2
38786: PUSH
38787: LD_INT 0
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 2
38796: PUSH
38797: LD_INT 1
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 2
38806: PUSH
38807: LD_INT 2
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 1
38816: PUSH
38817: LD_INT 2
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 0
38826: PUSH
38827: LD_INT 2
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 1
38836: NEG
38837: PUSH
38838: LD_INT 1
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 2
38847: NEG
38848: PUSH
38849: LD_INT 0
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 2
38858: NEG
38859: PUSH
38860: LD_INT 1
38862: NEG
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 2
38870: NEG
38871: PUSH
38872: LD_INT 2
38874: NEG
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38901: LD_ADDR_VAR 0 21
38905: PUSH
38906: LD_INT 0
38908: PUSH
38909: LD_INT 0
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 0
38918: PUSH
38919: LD_INT 1
38921: NEG
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 1
38929: PUSH
38930: LD_INT 0
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 1
38939: PUSH
38940: LD_INT 1
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 0
38949: PUSH
38950: LD_INT 1
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 1
38959: NEG
38960: PUSH
38961: LD_INT 0
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 1
38970: NEG
38971: PUSH
38972: LD_INT 1
38974: NEG
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 1
38982: NEG
38983: PUSH
38984: LD_INT 2
38986: NEG
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 0
38994: PUSH
38995: LD_INT 2
38997: NEG
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 1
39005: PUSH
39006: LD_INT 1
39008: NEG
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 2
39016: PUSH
39017: LD_INT 0
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 2
39026: PUSH
39027: LD_INT 1
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 2
39036: PUSH
39037: LD_INT 2
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 1
39046: PUSH
39047: LD_INT 2
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 0
39056: PUSH
39057: LD_INT 2
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 1
39066: NEG
39067: PUSH
39068: LD_INT 1
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 2
39077: NEG
39078: PUSH
39079: LD_INT 0
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 2
39088: NEG
39089: PUSH
39090: LD_INT 1
39092: NEG
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 2
39100: NEG
39101: PUSH
39102: LD_INT 2
39104: NEG
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39131: LD_ADDR_VAR 0 22
39135: PUSH
39136: LD_INT 0
39138: PUSH
39139: LD_INT 0
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 0
39148: PUSH
39149: LD_INT 1
39151: NEG
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 1
39159: PUSH
39160: LD_INT 0
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 1
39169: PUSH
39170: LD_INT 1
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 0
39179: PUSH
39180: LD_INT 1
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 1
39189: NEG
39190: PUSH
39191: LD_INT 0
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 1
39200: NEG
39201: PUSH
39202: LD_INT 1
39204: NEG
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 1
39212: NEG
39213: PUSH
39214: LD_INT 2
39216: NEG
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: LD_INT 2
39227: NEG
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 1
39235: PUSH
39236: LD_INT 1
39238: NEG
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 2
39246: PUSH
39247: LD_INT 0
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 2
39256: PUSH
39257: LD_INT 1
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 2
39266: PUSH
39267: LD_INT 2
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 1
39276: PUSH
39277: LD_INT 2
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 0
39286: PUSH
39287: LD_INT 2
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 1
39296: NEG
39297: PUSH
39298: LD_INT 1
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 2
39307: NEG
39308: PUSH
39309: LD_INT 0
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 2
39318: NEG
39319: PUSH
39320: LD_INT 1
39322: NEG
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 2
39330: NEG
39331: PUSH
39332: LD_INT 2
39334: NEG
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39361: LD_ADDR_VAR 0 23
39365: PUSH
39366: LD_INT 0
39368: PUSH
39369: LD_INT 0
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 0
39378: PUSH
39379: LD_INT 1
39381: NEG
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 1
39389: PUSH
39390: LD_INT 0
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 1
39399: PUSH
39400: LD_INT 1
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 0
39409: PUSH
39410: LD_INT 1
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 1
39419: NEG
39420: PUSH
39421: LD_INT 0
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 1
39430: NEG
39431: PUSH
39432: LD_INT 1
39434: NEG
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 1
39442: NEG
39443: PUSH
39444: LD_INT 2
39446: NEG
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 0
39454: PUSH
39455: LD_INT 2
39457: NEG
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 1
39465: PUSH
39466: LD_INT 1
39468: NEG
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 2
39476: PUSH
39477: LD_INT 0
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 2
39486: PUSH
39487: LD_INT 1
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 2
39496: PUSH
39497: LD_INT 2
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 1
39506: PUSH
39507: LD_INT 2
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 0
39516: PUSH
39517: LD_INT 2
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 1
39526: NEG
39527: PUSH
39528: LD_INT 1
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 2
39537: NEG
39538: PUSH
39539: LD_INT 0
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 2
39548: NEG
39549: PUSH
39550: LD_INT 1
39552: NEG
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 2
39560: NEG
39561: PUSH
39562: LD_INT 2
39564: NEG
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 2
39572: NEG
39573: PUSH
39574: LD_INT 3
39576: NEG
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 1
39584: NEG
39585: PUSH
39586: LD_INT 3
39588: NEG
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 1
39596: PUSH
39597: LD_INT 2
39599: NEG
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 2
39607: PUSH
39608: LD_INT 1
39610: NEG
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39641: LD_ADDR_VAR 0 24
39645: PUSH
39646: LD_INT 0
39648: PUSH
39649: LD_INT 0
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 0
39658: PUSH
39659: LD_INT 1
39661: NEG
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 1
39669: PUSH
39670: LD_INT 0
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 1
39679: PUSH
39680: LD_INT 1
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 0
39689: PUSH
39690: LD_INT 1
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 1
39699: NEG
39700: PUSH
39701: LD_INT 0
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 1
39710: NEG
39711: PUSH
39712: LD_INT 1
39714: NEG
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 1
39722: NEG
39723: PUSH
39724: LD_INT 2
39726: NEG
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 0
39734: PUSH
39735: LD_INT 2
39737: NEG
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 1
39745: PUSH
39746: LD_INT 1
39748: NEG
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 2
39756: PUSH
39757: LD_INT 0
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 2
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 2
39776: PUSH
39777: LD_INT 2
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 1
39786: PUSH
39787: LD_INT 2
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 0
39796: PUSH
39797: LD_INT 2
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 1
39806: NEG
39807: PUSH
39808: LD_INT 1
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 2
39817: NEG
39818: PUSH
39819: LD_INT 0
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 2
39828: NEG
39829: PUSH
39830: LD_INT 1
39832: NEG
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 2
39840: NEG
39841: PUSH
39842: LD_INT 2
39844: NEG
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 1
39852: PUSH
39853: LD_INT 2
39855: NEG
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 2
39863: PUSH
39864: LD_INT 1
39866: NEG
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 3
39874: PUSH
39875: LD_INT 1
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 3
39884: PUSH
39885: LD_INT 2
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: LIST
39913: LIST
39914: LIST
39915: LIST
39916: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39917: LD_ADDR_VAR 0 25
39921: PUSH
39922: LD_INT 0
39924: PUSH
39925: LD_INT 0
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 0
39934: PUSH
39935: LD_INT 1
39937: NEG
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 1
39945: PUSH
39946: LD_INT 0
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 1
39955: PUSH
39956: LD_INT 1
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 0
39965: PUSH
39966: LD_INT 1
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 1
39975: NEG
39976: PUSH
39977: LD_INT 0
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 1
39986: NEG
39987: PUSH
39988: LD_INT 1
39990: NEG
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 1
39998: NEG
39999: PUSH
40000: LD_INT 2
40002: NEG
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 0
40010: PUSH
40011: LD_INT 2
40013: NEG
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 1
40021: PUSH
40022: LD_INT 1
40024: NEG
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 2
40032: PUSH
40033: LD_INT 0
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 2
40042: PUSH
40043: LD_INT 1
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 2
40052: PUSH
40053: LD_INT 2
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 1
40062: PUSH
40063: LD_INT 2
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 0
40072: PUSH
40073: LD_INT 2
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 1
40082: NEG
40083: PUSH
40084: LD_INT 1
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 2
40093: NEG
40094: PUSH
40095: LD_INT 0
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 2
40104: NEG
40105: PUSH
40106: LD_INT 1
40108: NEG
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 2
40116: NEG
40117: PUSH
40118: LD_INT 2
40120: NEG
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 3
40128: PUSH
40129: LD_INT 1
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 3
40138: PUSH
40139: LD_INT 2
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 2
40148: PUSH
40149: LD_INT 3
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 1
40158: PUSH
40159: LD_INT 3
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40191: LD_ADDR_VAR 0 26
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: LD_INT 0
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 0
40208: PUSH
40209: LD_INT 1
40211: NEG
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 1
40219: PUSH
40220: LD_INT 0
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 1
40229: PUSH
40230: LD_INT 1
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 0
40239: PUSH
40240: LD_INT 1
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 1
40249: NEG
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 1
40260: NEG
40261: PUSH
40262: LD_INT 1
40264: NEG
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 1
40272: NEG
40273: PUSH
40274: LD_INT 2
40276: NEG
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 0
40284: PUSH
40285: LD_INT 2
40287: NEG
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 1
40295: PUSH
40296: LD_INT 1
40298: NEG
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 2
40306: PUSH
40307: LD_INT 0
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 2
40316: PUSH
40317: LD_INT 1
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 2
40326: PUSH
40327: LD_INT 2
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 1
40336: PUSH
40337: LD_INT 2
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 0
40346: PUSH
40347: LD_INT 2
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 1
40356: NEG
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 2
40367: NEG
40368: PUSH
40369: LD_INT 0
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 2
40378: NEG
40379: PUSH
40380: LD_INT 1
40382: NEG
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 2
40390: NEG
40391: PUSH
40392: LD_INT 2
40394: NEG
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 2
40402: PUSH
40403: LD_INT 3
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 1
40412: PUSH
40413: LD_INT 3
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 1
40422: NEG
40423: PUSH
40424: LD_INT 2
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 2
40433: NEG
40434: PUSH
40435: LD_INT 1
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40467: LD_ADDR_VAR 0 27
40471: PUSH
40472: LD_INT 0
40474: PUSH
40475: LD_INT 0
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 0
40484: PUSH
40485: LD_INT 1
40487: NEG
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 1
40495: PUSH
40496: LD_INT 0
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 1
40505: PUSH
40506: LD_INT 1
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 0
40515: PUSH
40516: LD_INT 1
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 1
40525: NEG
40526: PUSH
40527: LD_INT 0
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 1
40536: NEG
40537: PUSH
40538: LD_INT 1
40540: NEG
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 1
40548: NEG
40549: PUSH
40550: LD_INT 2
40552: NEG
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 0
40560: PUSH
40561: LD_INT 2
40563: NEG
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 1
40571: PUSH
40572: LD_INT 1
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 2
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 2
40592: PUSH
40593: LD_INT 1
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 2
40602: PUSH
40603: LD_INT 2
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 1
40612: PUSH
40613: LD_INT 2
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: LD_INT 2
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 1
40632: NEG
40633: PUSH
40634: LD_INT 1
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 2
40643: NEG
40644: PUSH
40645: LD_INT 0
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 2
40654: NEG
40655: PUSH
40656: LD_INT 1
40658: NEG
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 2
40666: NEG
40667: PUSH
40668: LD_INT 2
40670: NEG
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 1
40678: NEG
40679: PUSH
40680: LD_INT 2
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 2
40689: NEG
40690: PUSH
40691: LD_INT 1
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 3
40700: NEG
40701: PUSH
40702: LD_INT 1
40704: NEG
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 3
40712: NEG
40713: PUSH
40714: LD_INT 2
40716: NEG
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40747: LD_ADDR_VAR 0 28
40751: PUSH
40752: LD_INT 0
40754: PUSH
40755: LD_INT 0
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 0
40764: PUSH
40765: LD_INT 1
40767: NEG
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 1
40775: PUSH
40776: LD_INT 0
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 1
40785: PUSH
40786: LD_INT 1
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 0
40795: PUSH
40796: LD_INT 1
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 1
40805: NEG
40806: PUSH
40807: LD_INT 0
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 1
40816: NEG
40817: PUSH
40818: LD_INT 1
40820: NEG
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 1
40828: NEG
40829: PUSH
40830: LD_INT 2
40832: NEG
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 0
40840: PUSH
40841: LD_INT 2
40843: NEG
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 1
40851: PUSH
40852: LD_INT 1
40854: NEG
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 2
40862: PUSH
40863: LD_INT 0
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 2
40872: PUSH
40873: LD_INT 1
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 2
40882: PUSH
40883: LD_INT 2
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 1
40892: PUSH
40893: LD_INT 2
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 0
40902: PUSH
40903: LD_INT 2
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 1
40912: NEG
40913: PUSH
40914: LD_INT 1
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 2
40923: NEG
40924: PUSH
40925: LD_INT 0
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 2
40934: NEG
40935: PUSH
40936: LD_INT 1
40938: NEG
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 2
40946: NEG
40947: PUSH
40948: LD_INT 2
40950: NEG
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 2
40958: NEG
40959: PUSH
40960: LD_INT 3
40962: NEG
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 1
40970: NEG
40971: PUSH
40972: LD_INT 3
40974: NEG
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 3
40982: NEG
40983: PUSH
40984: LD_INT 1
40986: NEG
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 3
40994: NEG
40995: PUSH
40996: LD_INT 2
40998: NEG
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41029: LD_ADDR_VAR 0 29
41033: PUSH
41034: LD_INT 0
41036: PUSH
41037: LD_INT 0
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 0
41046: PUSH
41047: LD_INT 1
41049: NEG
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 1
41057: PUSH
41058: LD_INT 0
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 1
41067: PUSH
41068: LD_INT 1
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 0
41077: PUSH
41078: LD_INT 1
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 1
41087: NEG
41088: PUSH
41089: LD_INT 0
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 1
41098: NEG
41099: PUSH
41100: LD_INT 1
41102: NEG
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 1
41110: NEG
41111: PUSH
41112: LD_INT 2
41114: NEG
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: LD_INT 2
41125: NEG
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 1
41133: PUSH
41134: LD_INT 1
41136: NEG
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 2
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 2
41154: PUSH
41155: LD_INT 1
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 1
41164: PUSH
41165: LD_INT 2
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 0
41174: PUSH
41175: LD_INT 2
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 1
41184: NEG
41185: PUSH
41186: LD_INT 1
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 2
41195: NEG
41196: PUSH
41197: LD_INT 1
41199: NEG
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 2
41207: NEG
41208: PUSH
41209: LD_INT 2
41211: NEG
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 2
41219: NEG
41220: PUSH
41221: LD_INT 3
41223: NEG
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 2
41231: PUSH
41232: LD_INT 1
41234: NEG
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 3
41242: PUSH
41243: LD_INT 1
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 1
41252: PUSH
41253: LD_INT 3
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 1
41262: NEG
41263: PUSH
41264: LD_INT 2
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 3
41273: NEG
41274: PUSH
41275: LD_INT 2
41277: NEG
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41308: LD_ADDR_VAR 0 30
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: LD_INT 0
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: LD_INT 1
41328: NEG
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 1
41336: PUSH
41337: LD_INT 0
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: LD_INT 1
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 0
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 1
41366: NEG
41367: PUSH
41368: LD_INT 0
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 1
41377: NEG
41378: PUSH
41379: LD_INT 1
41381: NEG
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: NEG
41390: PUSH
41391: LD_INT 2
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 0
41401: PUSH
41402: LD_INT 2
41404: NEG
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 1
41412: PUSH
41413: LD_INT 1
41415: NEG
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 2
41423: PUSH
41424: LD_INT 0
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 2
41433: PUSH
41434: LD_INT 1
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 2
41443: PUSH
41444: LD_INT 2
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 1
41453: PUSH
41454: LD_INT 2
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 1
41463: NEG
41464: PUSH
41465: LD_INT 1
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 2
41474: NEG
41475: PUSH
41476: LD_INT 0
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 2
41485: NEG
41486: PUSH
41487: LD_INT 1
41489: NEG
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 1
41497: NEG
41498: PUSH
41499: LD_INT 3
41501: NEG
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 1
41509: PUSH
41510: LD_INT 2
41512: NEG
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 3
41520: PUSH
41521: LD_INT 2
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 2
41530: PUSH
41531: LD_INT 3
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 2
41540: NEG
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 3
41551: NEG
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41586: LD_ADDR_VAR 0 31
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: LD_INT 0
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: LD_INT 1
41606: NEG
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 1
41614: PUSH
41615: LD_INT 0
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 1
41624: PUSH
41625: LD_INT 1
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 0
41634: PUSH
41635: LD_INT 1
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 1
41644: NEG
41645: PUSH
41646: LD_INT 0
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 1
41655: NEG
41656: PUSH
41657: LD_INT 1
41659: NEG
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 1
41667: NEG
41668: PUSH
41669: LD_INT 2
41671: NEG
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 1
41679: PUSH
41680: LD_INT 1
41682: NEG
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 2
41690: PUSH
41691: LD_INT 0
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 2
41700: PUSH
41701: LD_INT 1
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 2
41710: PUSH
41711: LD_INT 2
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 1
41720: PUSH
41721: LD_INT 2
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 0
41730: PUSH
41731: LD_INT 2
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 1
41740: NEG
41741: PUSH
41742: LD_INT 1
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 2
41751: NEG
41752: PUSH
41753: LD_INT 1
41755: NEG
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 2
41763: NEG
41764: PUSH
41765: LD_INT 2
41767: NEG
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 2
41775: NEG
41776: PUSH
41777: LD_INT 3
41779: NEG
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 2
41787: PUSH
41788: LD_INT 1
41790: NEG
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 3
41798: PUSH
41799: LD_INT 1
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 1
41808: PUSH
41809: LD_INT 3
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 1
41818: NEG
41819: PUSH
41820: LD_INT 2
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 3
41829: NEG
41830: PUSH
41831: LD_INT 2
41833: NEG
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41864: LD_ADDR_VAR 0 32
41868: PUSH
41869: LD_INT 0
41871: PUSH
41872: LD_INT 0
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 0
41881: PUSH
41882: LD_INT 1
41884: NEG
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 1
41892: PUSH
41893: LD_INT 0
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 1
41902: PUSH
41903: LD_INT 1
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 0
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 1
41922: NEG
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 1
41933: NEG
41934: PUSH
41935: LD_INT 1
41937: NEG
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 1
41945: NEG
41946: PUSH
41947: LD_INT 2
41949: NEG
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 0
41957: PUSH
41958: LD_INT 2
41960: NEG
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 1
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 2
41979: PUSH
41980: LD_INT 1
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 2
41989: PUSH
41990: LD_INT 2
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 1
41999: PUSH
42000: LD_INT 2
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: LD_INT 2
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 1
42019: NEG
42020: PUSH
42021: LD_INT 1
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 2
42030: NEG
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 2
42041: NEG
42042: PUSH
42043: LD_INT 1
42045: NEG
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 1
42053: NEG
42054: PUSH
42055: LD_INT 3
42057: NEG
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 1
42065: PUSH
42066: LD_INT 2
42068: NEG
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 3
42076: PUSH
42077: LD_INT 2
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 2
42086: PUSH
42087: LD_INT 3
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 2
42096: NEG
42097: PUSH
42098: LD_INT 1
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 3
42107: NEG
42108: PUSH
42109: LD_INT 1
42111: NEG
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42142: LD_ADDR_VAR 0 33
42146: PUSH
42147: LD_INT 0
42149: PUSH
42150: LD_INT 0
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: LD_INT 1
42162: NEG
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 1
42170: PUSH
42171: LD_INT 0
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 1
42180: PUSH
42181: LD_INT 1
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 0
42190: PUSH
42191: LD_INT 1
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 1
42200: NEG
42201: PUSH
42202: LD_INT 0
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 1
42211: NEG
42212: PUSH
42213: LD_INT 1
42215: NEG
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 1
42223: NEG
42224: PUSH
42225: LD_INT 2
42227: NEG
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 1
42235: PUSH
42236: LD_INT 1
42238: NEG
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 2
42246: PUSH
42247: LD_INT 0
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 2
42256: PUSH
42257: LD_INT 1
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 1
42266: PUSH
42267: LD_INT 2
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 0
42276: PUSH
42277: LD_INT 2
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 1
42286: NEG
42287: PUSH
42288: LD_INT 1
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 2
42297: NEG
42298: PUSH
42299: LD_INT 0
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 2
42308: NEG
42309: PUSH
42310: LD_INT 1
42312: NEG
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 2
42320: NEG
42321: PUSH
42322: LD_INT 2
42324: NEG
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 2
42332: NEG
42333: PUSH
42334: LD_INT 3
42336: NEG
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 2
42344: PUSH
42345: LD_INT 1
42347: NEG
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 3
42355: PUSH
42356: LD_INT 1
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: LD_INT 3
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 1
42375: NEG
42376: PUSH
42377: LD_INT 2
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 3
42386: NEG
42387: PUSH
42388: LD_INT 2
42390: NEG
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42421: LD_ADDR_VAR 0 34
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: LD_INT 0
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: PUSH
42460: LD_INT 1
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: LD_INT 1
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 1
42490: NEG
42491: PUSH
42492: LD_INT 1
42494: NEG
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: NEG
42503: PUSH
42504: LD_INT 2
42506: NEG
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: LD_INT 2
42517: NEG
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 1
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 2
42536: PUSH
42537: LD_INT 1
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 2
42546: PUSH
42547: LD_INT 2
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 1
42556: PUSH
42557: LD_INT 2
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 1
42566: NEG
42567: PUSH
42568: LD_INT 1
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 2
42577: NEG
42578: PUSH
42579: LD_INT 0
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 2
42588: NEG
42589: PUSH
42590: LD_INT 1
42592: NEG
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 2
42600: NEG
42601: PUSH
42602: LD_INT 2
42604: NEG
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: LD_INT 3
42616: NEG
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 1
42624: PUSH
42625: LD_INT 2
42627: NEG
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 3
42635: PUSH
42636: LD_INT 2
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 2
42645: PUSH
42646: LD_INT 3
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 2
42655: NEG
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 3
42666: NEG
42667: PUSH
42668: LD_INT 1
42670: NEG
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42701: LD_ADDR_VAR 0 35
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: LD_INT 0
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 0
42718: PUSH
42719: LD_INT 1
42721: NEG
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 1
42729: PUSH
42730: LD_INT 0
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 1
42739: PUSH
42740: LD_INT 1
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 0
42749: PUSH
42750: LD_INT 1
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 1
42759: NEG
42760: PUSH
42761: LD_INT 0
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 1
42770: NEG
42771: PUSH
42772: LD_INT 1
42774: NEG
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 2
42782: PUSH
42783: LD_INT 1
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 2
42792: NEG
42793: PUSH
42794: LD_INT 1
42796: NEG
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42813: LD_ADDR_VAR 0 36
42817: PUSH
42818: LD_INT 0
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 0
42830: PUSH
42831: LD_INT 1
42833: NEG
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 1
42841: PUSH
42842: LD_INT 0
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 1
42851: PUSH
42852: LD_INT 1
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 0
42861: PUSH
42862: LD_INT 1
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 1
42871: NEG
42872: PUSH
42873: LD_INT 0
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 1
42882: NEG
42883: PUSH
42884: LD_INT 1
42886: NEG
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 1
42894: NEG
42895: PUSH
42896: LD_INT 2
42898: NEG
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 1
42906: PUSH
42907: LD_INT 2
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42925: LD_ADDR_VAR 0 37
42929: PUSH
42930: LD_INT 0
42932: PUSH
42933: LD_INT 0
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 0
42942: PUSH
42943: LD_INT 1
42945: NEG
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 1
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 1
42963: PUSH
42964: LD_INT 1
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: LD_INT 1
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 1
42983: NEG
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 1
42994: NEG
42995: PUSH
42996: LD_INT 1
42998: NEG
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 1
43006: PUSH
43007: LD_INT 1
43009: NEG
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 1
43017: NEG
43018: PUSH
43019: LD_INT 1
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43037: LD_ADDR_VAR 0 38
43041: PUSH
43042: LD_INT 0
43044: PUSH
43045: LD_INT 0
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 0
43054: PUSH
43055: LD_INT 1
43057: NEG
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 1
43065: PUSH
43066: LD_INT 0
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: PUSH
43076: LD_INT 1
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: LD_INT 1
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 1
43095: NEG
43096: PUSH
43097: LD_INT 0
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 1
43106: NEG
43107: PUSH
43108: LD_INT 1
43110: NEG
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 2
43118: PUSH
43119: LD_INT 1
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 2
43128: NEG
43129: PUSH
43130: LD_INT 1
43132: NEG
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43149: LD_ADDR_VAR 0 39
43153: PUSH
43154: LD_INT 0
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: LD_INT 1
43169: NEG
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 1
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: PUSH
43188: LD_INT 1
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: LD_INT 1
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 1
43207: NEG
43208: PUSH
43209: LD_INT 0
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 1
43218: NEG
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 1
43230: NEG
43231: PUSH
43232: LD_INT 2
43234: NEG
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 1
43242: PUSH
43243: LD_INT 2
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43261: LD_ADDR_VAR 0 40
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: LD_INT 0
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 0
43278: PUSH
43279: LD_INT 1
43281: NEG
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 1
43289: PUSH
43290: LD_INT 0
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 1
43299: PUSH
43300: LD_INT 1
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 0
43309: PUSH
43310: LD_INT 1
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 1
43319: NEG
43320: PUSH
43321: LD_INT 0
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 1
43330: NEG
43331: PUSH
43332: LD_INT 1
43334: NEG
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 1
43342: PUSH
43343: LD_INT 1
43345: NEG
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 1
43353: NEG
43354: PUSH
43355: LD_INT 1
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43373: LD_ADDR_VAR 0 41
43377: PUSH
43378: LD_INT 0
43380: PUSH
43381: LD_INT 0
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 0
43390: PUSH
43391: LD_INT 1
43393: NEG
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 1
43401: PUSH
43402: LD_INT 0
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 1
43411: PUSH
43412: LD_INT 1
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 0
43421: PUSH
43422: LD_INT 1
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 1
43431: NEG
43432: PUSH
43433: LD_INT 0
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 1
43442: NEG
43443: PUSH
43444: LD_INT 1
43446: NEG
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 1
43454: NEG
43455: PUSH
43456: LD_INT 2
43458: NEG
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 1
43466: PUSH
43467: LD_INT 1
43469: NEG
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 2
43477: PUSH
43478: LD_INT 0
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 2
43487: PUSH
43488: LD_INT 1
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 2
43497: PUSH
43498: LD_INT 2
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 1
43507: PUSH
43508: LD_INT 2
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 1
43517: NEG
43518: PUSH
43519: LD_INT 1
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 2
43528: NEG
43529: PUSH
43530: LD_INT 0
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 2
43539: NEG
43540: PUSH
43541: LD_INT 1
43543: NEG
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 2
43551: NEG
43552: PUSH
43553: LD_INT 2
43555: NEG
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 2
43563: NEG
43564: PUSH
43565: LD_INT 3
43567: NEG
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 2
43575: PUSH
43576: LD_INT 1
43578: NEG
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 3
43586: PUSH
43587: LD_INT 0
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 3
43596: PUSH
43597: LD_INT 1
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 3
43606: PUSH
43607: LD_INT 2
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 3
43616: PUSH
43617: LD_INT 3
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 2
43626: PUSH
43627: LD_INT 3
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 2
43636: NEG
43637: PUSH
43638: LD_INT 1
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 3
43647: NEG
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 3
43658: NEG
43659: PUSH
43660: LD_INT 1
43662: NEG
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 3
43670: NEG
43671: PUSH
43672: LD_INT 2
43674: NEG
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 3
43682: NEG
43683: PUSH
43684: LD_INT 3
43686: NEG
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43723: LD_ADDR_VAR 0 42
43727: PUSH
43728: LD_INT 0
43730: PUSH
43731: LD_INT 0
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 0
43740: PUSH
43741: LD_INT 1
43743: NEG
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 1
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 1
43761: PUSH
43762: LD_INT 1
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 0
43771: PUSH
43772: LD_INT 1
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 1
43781: NEG
43782: PUSH
43783: LD_INT 0
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 1
43792: NEG
43793: PUSH
43794: LD_INT 1
43796: NEG
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 1
43804: NEG
43805: PUSH
43806: LD_INT 2
43808: NEG
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 0
43816: PUSH
43817: LD_INT 2
43819: NEG
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 1
43827: PUSH
43828: LD_INT 1
43830: NEG
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 2
43838: PUSH
43839: LD_INT 1
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 2
43848: PUSH
43849: LD_INT 2
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 1
43858: PUSH
43859: LD_INT 2
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: LD_INT 2
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 1
43878: NEG
43879: PUSH
43880: LD_INT 1
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 2
43889: NEG
43890: PUSH
43891: LD_INT 1
43893: NEG
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 2
43901: NEG
43902: PUSH
43903: LD_INT 2
43905: NEG
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 2
43913: NEG
43914: PUSH
43915: LD_INT 3
43917: NEG
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: NEG
43926: PUSH
43927: LD_INT 3
43929: NEG
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 0
43937: PUSH
43938: LD_INT 3
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: LD_INT 2
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 3
43959: PUSH
43960: LD_INT 2
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 3
43969: PUSH
43970: LD_INT 3
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 2
43979: PUSH
43980: LD_INT 3
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: LD_INT 3
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: LD_INT 3
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: LD_INT 2
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 3
44020: NEG
44021: PUSH
44022: LD_INT 2
44024: NEG
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 3
44032: NEG
44033: PUSH
44034: LD_INT 3
44036: NEG
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44073: LD_ADDR_VAR 0 43
44077: PUSH
44078: LD_INT 0
44080: PUSH
44081: LD_INT 0
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 0
44090: PUSH
44091: LD_INT 1
44093: NEG
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 1
44101: PUSH
44102: LD_INT 0
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 1
44111: PUSH
44112: LD_INT 1
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 0
44121: PUSH
44122: LD_INT 1
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: NEG
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 1
44142: NEG
44143: PUSH
44144: LD_INT 1
44146: NEG
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 1
44154: NEG
44155: PUSH
44156: LD_INT 2
44158: NEG
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: LD_INT 2
44169: NEG
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 1
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 2
44188: PUSH
44189: LD_INT 0
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 2
44198: PUSH
44199: LD_INT 1
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 1
44208: PUSH
44209: LD_INT 2
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 0
44218: PUSH
44219: LD_INT 2
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 1
44228: NEG
44229: PUSH
44230: LD_INT 1
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 2
44239: NEG
44240: PUSH
44241: LD_INT 0
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 2
44250: NEG
44251: PUSH
44252: LD_INT 1
44254: NEG
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 1
44262: NEG
44263: PUSH
44264: LD_INT 3
44266: NEG
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 0
44274: PUSH
44275: LD_INT 3
44277: NEG
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: LD_INT 2
44288: NEG
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 2
44296: PUSH
44297: LD_INT 1
44299: NEG
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 3
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 3
44317: PUSH
44318: LD_INT 1
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 1
44327: PUSH
44328: LD_INT 3
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: LD_INT 3
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 1
44347: NEG
44348: PUSH
44349: LD_INT 2
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 2
44358: NEG
44359: PUSH
44360: LD_INT 1
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 3
44369: NEG
44370: PUSH
44371: LD_INT 0
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 3
44380: NEG
44381: PUSH
44382: LD_INT 1
44384: NEG
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44421: LD_ADDR_VAR 0 44
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 0
44438: PUSH
44439: LD_INT 1
44441: NEG
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: LD_INT 0
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 0
44469: PUSH
44470: LD_INT 1
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 1
44479: NEG
44480: PUSH
44481: LD_INT 0
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 1
44490: NEG
44491: PUSH
44492: LD_INT 1
44494: NEG
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: NEG
44503: PUSH
44504: LD_INT 2
44506: NEG
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 1
44514: PUSH
44515: LD_INT 1
44517: NEG
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 2
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 2
44535: PUSH
44536: LD_INT 1
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 2
44545: PUSH
44546: LD_INT 2
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: LD_INT 2
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 1
44565: NEG
44566: PUSH
44567: LD_INT 1
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 2
44576: NEG
44577: PUSH
44578: LD_INT 0
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 2
44587: NEG
44588: PUSH
44589: LD_INT 1
44591: NEG
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 2
44599: NEG
44600: PUSH
44601: LD_INT 2
44603: NEG
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 2
44611: NEG
44612: PUSH
44613: LD_INT 3
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 2
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 3
44634: PUSH
44635: LD_INT 0
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 3
44644: PUSH
44645: LD_INT 1
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 3
44654: PUSH
44655: LD_INT 2
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 3
44664: PUSH
44665: LD_INT 3
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 2
44674: PUSH
44675: LD_INT 3
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 2
44684: NEG
44685: PUSH
44686: LD_INT 1
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 3
44695: NEG
44696: PUSH
44697: LD_INT 0
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 3
44706: NEG
44707: PUSH
44708: LD_INT 1
44710: NEG
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 3
44718: NEG
44719: PUSH
44720: LD_INT 2
44722: NEG
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 3
44730: NEG
44731: PUSH
44732: LD_INT 3
44734: NEG
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44771: LD_ADDR_VAR 0 45
44775: PUSH
44776: LD_INT 0
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 0
44788: PUSH
44789: LD_INT 1
44791: NEG
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 1
44799: PUSH
44800: LD_INT 0
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 1
44809: PUSH
44810: LD_INT 1
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 0
44819: PUSH
44820: LD_INT 1
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 1
44829: NEG
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 1
44840: NEG
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 1
44852: NEG
44853: PUSH
44854: LD_INT 2
44856: NEG
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 0
44864: PUSH
44865: LD_INT 2
44867: NEG
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: LD_INT 1
44878: NEG
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 2
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 2
44896: PUSH
44897: LD_INT 2
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 1
44906: PUSH
44907: LD_INT 2
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: LD_INT 2
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: NEG
44927: PUSH
44928: LD_INT 1
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 2
44937: NEG
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 2
44949: NEG
44950: PUSH
44951: LD_INT 2
44953: NEG
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 2
44961: NEG
44962: PUSH
44963: LD_INT 3
44965: NEG
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 1
44973: NEG
44974: PUSH
44975: LD_INT 3
44977: NEG
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 0
44985: PUSH
44986: LD_INT 3
44988: NEG
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 1
44996: PUSH
44997: LD_INT 2
44999: NEG
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 3
45007: PUSH
45008: LD_INT 2
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 3
45017: PUSH
45018: LD_INT 3
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 2
45027: PUSH
45028: LD_INT 3
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 1
45037: PUSH
45038: LD_INT 3
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 0
45047: PUSH
45048: LD_INT 3
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 1
45057: NEG
45058: PUSH
45059: LD_INT 2
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 3
45068: NEG
45069: PUSH
45070: LD_INT 2
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 3
45080: NEG
45081: PUSH
45082: LD_INT 3
45084: NEG
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45121: LD_ADDR_VAR 0 46
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 0
45138: PUSH
45139: LD_INT 1
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: PUSH
45150: LD_INT 0
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 1
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 0
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 1
45179: NEG
45180: PUSH
45181: LD_INT 0
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 1
45190: NEG
45191: PUSH
45192: LD_INT 1
45194: NEG
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 1
45202: NEG
45203: PUSH
45204: LD_INT 2
45206: NEG
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 0
45214: PUSH
45215: LD_INT 2
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 1
45225: PUSH
45226: LD_INT 1
45228: NEG
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 2
45236: PUSH
45237: LD_INT 0
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 2
45246: PUSH
45247: LD_INT 1
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: LD_INT 2
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: LD_INT 2
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: LD_INT 1
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 2
45287: NEG
45288: PUSH
45289: LD_INT 0
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 2
45298: NEG
45299: PUSH
45300: LD_INT 1
45302: NEG
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 1
45310: NEG
45311: PUSH
45312: LD_INT 3
45314: NEG
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 0
45322: PUSH
45323: LD_INT 3
45325: NEG
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 1
45333: PUSH
45334: LD_INT 2
45336: NEG
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 2
45344: PUSH
45345: LD_INT 1
45347: NEG
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 3
45355: PUSH
45356: LD_INT 0
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 3
45365: PUSH
45366: LD_INT 1
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: LD_INT 3
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 0
45385: PUSH
45386: LD_INT 3
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 1
45395: NEG
45396: PUSH
45397: LD_INT 2
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 2
45406: NEG
45407: PUSH
45408: LD_INT 1
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 3
45417: NEG
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 3
45428: NEG
45429: PUSH
45430: LD_INT 1
45432: NEG
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45469: LD_ADDR_VAR 0 47
45473: PUSH
45474: LD_INT 0
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 0
45486: PUSH
45487: LD_INT 1
45489: NEG
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 1
45507: PUSH
45508: LD_INT 1
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: LD_INT 1
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: NEG
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: NEG
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: LD_INT 2
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: LD_INT 2
45565: NEG
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 1
45573: PUSH
45574: LD_INT 1
45576: NEG
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 2
45584: NEG
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 2
45596: NEG
45597: PUSH
45598: LD_INT 2
45600: NEG
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45620: LD_ADDR_VAR 0 48
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: LD_INT 0
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: LD_INT 1
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 1
45648: PUSH
45649: LD_INT 0
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: LD_INT 1
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 1
45678: NEG
45679: PUSH
45680: LD_INT 0
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 1
45689: NEG
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: LD_INT 2
45705: NEG
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: LD_INT 2
45716: NEG
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 1
45724: PUSH
45725: LD_INT 1
45727: NEG
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 2
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 2
45745: PUSH
45746: LD_INT 1
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45767: LD_ADDR_VAR 0 49
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: LD_INT 0
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 0
45784: PUSH
45785: LD_INT 1
45787: NEG
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: PUSH
45796: LD_INT 0
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: LD_INT 1
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 0
45815: PUSH
45816: LD_INT 1
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 1
45825: NEG
45826: PUSH
45827: LD_INT 0
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 1
45836: NEG
45837: PUSH
45838: LD_INT 1
45840: NEG
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: LD_INT 1
45851: NEG
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 2
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 2
45869: PUSH
45870: LD_INT 1
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 2
45879: PUSH
45880: LD_INT 2
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 1
45889: PUSH
45890: LD_INT 2
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45911: LD_ADDR_VAR 0 50
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 0
45928: PUSH
45929: LD_INT 1
45931: NEG
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: LD_INT 0
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 0
45959: PUSH
45960: LD_INT 1
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 1
45969: NEG
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 1
45980: NEG
45981: PUSH
45982: LD_INT 1
45984: NEG
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 2
45992: PUSH
45993: LD_INT 1
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 2
46002: PUSH
46003: LD_INT 2
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 1
46012: PUSH
46013: LD_INT 2
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 0
46022: PUSH
46023: LD_INT 2
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 1
46032: NEG
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46055: LD_ADDR_VAR 0 51
46059: PUSH
46060: LD_INT 0
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: LD_INT 1
46075: NEG
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: LD_INT 1
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 0
46103: PUSH
46104: LD_INT 1
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 1
46113: NEG
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 1
46124: NEG
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 1
46136: PUSH
46137: LD_INT 2
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 0
46146: PUSH
46147: LD_INT 2
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 1
46156: NEG
46157: PUSH
46158: LD_INT 1
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 2
46167: NEG
46168: PUSH
46169: LD_INT 0
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 2
46178: NEG
46179: PUSH
46180: LD_INT 1
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46202: LD_ADDR_VAR 0 52
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: LD_INT 1
46222: NEG
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: LD_INT 0
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 1
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 0
46250: PUSH
46251: LD_INT 1
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 1
46260: NEG
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 1
46271: NEG
46272: PUSH
46273: LD_INT 1
46275: NEG
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 1
46283: NEG
46284: PUSH
46285: LD_INT 2
46287: NEG
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 1
46295: NEG
46296: PUSH
46297: LD_INT 1
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 2
46306: NEG
46307: PUSH
46308: LD_INT 0
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 2
46317: NEG
46318: PUSH
46319: LD_INT 1
46321: NEG
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 2
46329: NEG
46330: PUSH
46331: LD_INT 2
46333: NEG
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46353: LD_ADDR_VAR 0 53
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: LD_INT 1
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 1
46381: PUSH
46382: LD_INT 0
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 1
46391: PUSH
46392: LD_INT 1
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: LD_INT 1
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: LD_INT 0
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 1
46434: NEG
46435: PUSH
46436: LD_INT 2
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 0
46446: PUSH
46447: LD_INT 2
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 1
46457: PUSH
46458: LD_INT 1
46460: NEG
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 2
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 2
46478: PUSH
46479: LD_INT 1
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 2
46488: PUSH
46489: LD_INT 2
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 1
46498: PUSH
46499: LD_INT 2
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 0
46508: PUSH
46509: LD_INT 2
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 1
46518: NEG
46519: PUSH
46520: LD_INT 1
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 2
46529: NEG
46530: PUSH
46531: LD_INT 0
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 2
46540: NEG
46541: PUSH
46542: LD_INT 1
46544: NEG
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 2
46552: NEG
46553: PUSH
46554: LD_INT 2
46556: NEG
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46583: LD_ADDR_VAR 0 54
46587: PUSH
46588: LD_INT 0
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: LD_INT 0
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 1
46621: PUSH
46622: LD_INT 1
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: LD_INT 1
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 1
46641: NEG
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 1
46652: NEG
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: LD_INT 2
46668: NEG
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: LD_INT 2
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 2
46698: PUSH
46699: LD_INT 0
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 2
46708: PUSH
46709: LD_INT 1
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 2
46718: PUSH
46719: LD_INT 2
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: PUSH
46729: LD_INT 2
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: LD_INT 2
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: LD_INT 1
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 2
46759: NEG
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 2
46770: NEG
46771: PUSH
46772: LD_INT 1
46774: NEG
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 2
46782: NEG
46783: PUSH
46784: LD_INT 2
46786: NEG
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46813: LD_ADDR_VAR 0 55
46817: PUSH
46818: LD_INT 0
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: LD_INT 1
46833: NEG
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 1
46841: PUSH
46842: LD_INT 0
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 1
46851: PUSH
46852: LD_INT 1
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: NEG
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 1
46882: NEG
46883: PUSH
46884: LD_INT 1
46886: NEG
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: LD_INT 2
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: LD_INT 2
46909: NEG
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 1
46917: PUSH
46918: LD_INT 1
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 2
46928: PUSH
46929: LD_INT 0
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 2
46938: PUSH
46939: LD_INT 1
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 2
46948: PUSH
46949: LD_INT 2
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: LD_INT 2
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: LD_INT 2
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 1
46978: NEG
46979: PUSH
46980: LD_INT 1
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 2
46989: NEG
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 2
47000: NEG
47001: PUSH
47002: LD_INT 1
47004: NEG
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 2
47012: NEG
47013: PUSH
47014: LD_INT 2
47016: NEG
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47043: LD_ADDR_VAR 0 56
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: LD_INT 1
47063: NEG
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: PUSH
47082: LD_INT 1
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: LD_INT 1
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 1
47112: NEG
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: LD_INT 2
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: LD_INT 2
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: LD_INT 1
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 2
47168: PUSH
47169: LD_INT 1
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 2
47178: PUSH
47179: LD_INT 2
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: PUSH
47189: LD_INT 2
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 0
47198: PUSH
47199: LD_INT 2
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: LD_INT 1
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 2
47219: NEG
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 2
47230: NEG
47231: PUSH
47232: LD_INT 1
47234: NEG
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 2
47242: NEG
47243: PUSH
47244: LD_INT 2
47246: NEG
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47273: LD_ADDR_VAR 0 57
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: LD_INT 0
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: LD_INT 1
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 1
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: LD_INT 1
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 1
47331: NEG
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 1
47342: NEG
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: LD_INT 2
47358: NEG
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: LD_INT 2
47369: NEG
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 1
47377: PUSH
47378: LD_INT 1
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 2
47388: PUSH
47389: LD_INT 0
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 2
47398: PUSH
47399: LD_INT 1
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 2
47408: PUSH
47409: LD_INT 2
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 1
47418: PUSH
47419: LD_INT 2
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: LD_INT 2
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 2
47449: NEG
47450: PUSH
47451: LD_INT 0
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 2
47460: NEG
47461: PUSH
47462: LD_INT 1
47464: NEG
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 2
47472: NEG
47473: PUSH
47474: LD_INT 2
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47503: LD_ADDR_VAR 0 58
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: LD_INT 0
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: LD_INT 1
47523: NEG
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: LD_INT 1
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 0
47551: PUSH
47552: LD_INT 1
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 1
47561: NEG
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 1
47572: NEG
47573: PUSH
47574: LD_INT 1
47576: NEG
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 1
47584: NEG
47585: PUSH
47586: LD_INT 2
47588: NEG
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 0
47596: PUSH
47597: LD_INT 2
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: LD_INT 1
47610: NEG
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 2
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 2
47628: PUSH
47629: LD_INT 1
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 2
47638: PUSH
47639: LD_INT 2
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 1
47648: PUSH
47649: LD_INT 2
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 0
47658: PUSH
47659: LD_INT 2
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: NEG
47669: PUSH
47670: LD_INT 1
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 2
47679: NEG
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 2
47690: NEG
47691: PUSH
47692: LD_INT 1
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 2
47702: NEG
47703: PUSH
47704: LD_INT 2
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47733: LD_ADDR_VAR 0 59
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: LD_INT 0
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: LD_INT 1
47753: NEG
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 1
47771: PUSH
47772: LD_INT 1
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 0
47781: PUSH
47782: LD_INT 1
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 1
47791: NEG
47792: PUSH
47793: LD_INT 0
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 1
47802: NEG
47803: PUSH
47804: LD_INT 1
47806: NEG
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47821: LD_ADDR_VAR 0 60
47825: PUSH
47826: LD_INT 0
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: LD_INT 1
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 1
47849: PUSH
47850: LD_INT 0
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 1
47859: PUSH
47860: LD_INT 1
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: LD_INT 1
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 1
47879: NEG
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 1
47890: NEG
47891: PUSH
47892: LD_INT 1
47894: NEG
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47909: LD_ADDR_VAR 0 61
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: LD_INT 0
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 0
47926: PUSH
47927: LD_INT 1
47929: NEG
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: LD_INT 1
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: LD_INT 1
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 1
47967: NEG
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 1
47978: NEG
47979: PUSH
47980: LD_INT 1
47982: NEG
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47997: LD_ADDR_VAR 0 62
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: LD_INT 1
48017: NEG
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 1
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: LD_INT 1
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: LD_INT 0
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: LD_INT 1
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48085: LD_ADDR_VAR 0 63
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: LD_INT 0
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: LD_INT 1
48105: NEG
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: PUSH
48114: LD_INT 0
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: LD_INT 1
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 0
48133: PUSH
48134: LD_INT 1
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 1
48143: NEG
48144: PUSH
48145: LD_INT 0
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 1
48154: NEG
48155: PUSH
48156: LD_INT 1
48158: NEG
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48173: LD_ADDR_VAR 0 64
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 0
48190: PUSH
48191: LD_INT 1
48193: NEG
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: LD_INT 1
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 0
48221: PUSH
48222: LD_INT 1
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 1
48231: NEG
48232: PUSH
48233: LD_INT 0
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 1
48242: NEG
48243: PUSH
48244: LD_INT 1
48246: NEG
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: ST_TO_ADDR
// end ; 1 :
48261: GO 54158
48263: LD_INT 1
48265: DOUBLE
48266: EQUAL
48267: IFTRUE 48271
48269: GO 50894
48271: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48272: LD_ADDR_VAR 0 11
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: LD_INT 3
48283: NEG
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 0
48291: PUSH
48292: LD_INT 3
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: PUSH
48303: LD_INT 2
48305: NEG
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: LIST
48315: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48316: LD_ADDR_VAR 0 12
48320: PUSH
48321: LD_INT 2
48323: PUSH
48324: LD_INT 1
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 3
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 3
48344: PUSH
48345: LD_INT 1
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: LIST
48356: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48357: LD_ADDR_VAR 0 13
48361: PUSH
48362: LD_INT 3
48364: PUSH
48365: LD_INT 2
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 3
48374: PUSH
48375: LD_INT 3
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 2
48384: PUSH
48385: LD_INT 3
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: LIST
48396: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48397: LD_ADDR_VAR 0 14
48401: PUSH
48402: LD_INT 1
48404: PUSH
48405: LD_INT 3
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 0
48414: PUSH
48415: LD_INT 3
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 1
48424: NEG
48425: PUSH
48426: LD_INT 2
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: LIST
48437: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48438: LD_ADDR_VAR 0 15
48442: PUSH
48443: LD_INT 2
48445: NEG
48446: PUSH
48447: LD_INT 1
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 3
48456: NEG
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 3
48467: NEG
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: LIST
48481: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48482: LD_ADDR_VAR 0 16
48486: PUSH
48487: LD_INT 2
48489: NEG
48490: PUSH
48491: LD_INT 3
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 3
48501: NEG
48502: PUSH
48503: LD_INT 2
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 3
48513: NEG
48514: PUSH
48515: LD_INT 3
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: LIST
48527: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48528: LD_ADDR_VAR 0 17
48532: PUSH
48533: LD_INT 1
48535: NEG
48536: PUSH
48537: LD_INT 3
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: LD_INT 3
48550: NEG
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 1
48558: PUSH
48559: LD_INT 2
48561: NEG
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: LIST
48571: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48572: LD_ADDR_VAR 0 18
48576: PUSH
48577: LD_INT 2
48579: PUSH
48580: LD_INT 1
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 3
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 3
48600: PUSH
48601: LD_INT 1
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: LIST
48612: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48613: LD_ADDR_VAR 0 19
48617: PUSH
48618: LD_INT 3
48620: PUSH
48621: LD_INT 2
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 3
48630: PUSH
48631: LD_INT 3
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 2
48640: PUSH
48641: LD_INT 3
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: LIST
48652: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48653: LD_ADDR_VAR 0 20
48657: PUSH
48658: LD_INT 1
48660: PUSH
48661: LD_INT 3
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 0
48670: PUSH
48671: LD_INT 3
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 1
48680: NEG
48681: PUSH
48682: LD_INT 2
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: LIST
48693: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48694: LD_ADDR_VAR 0 21
48698: PUSH
48699: LD_INT 2
48701: NEG
48702: PUSH
48703: LD_INT 1
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 3
48712: NEG
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 3
48723: NEG
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: LIST
48737: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48738: LD_ADDR_VAR 0 22
48742: PUSH
48743: LD_INT 2
48745: NEG
48746: PUSH
48747: LD_INT 3
48749: NEG
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 3
48757: NEG
48758: PUSH
48759: LD_INT 2
48761: NEG
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 3
48769: NEG
48770: PUSH
48771: LD_INT 3
48773: NEG
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: LIST
48783: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48784: LD_ADDR_VAR 0 23
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: LD_INT 3
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: LD_INT 4
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: LD_INT 3
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: LIST
48827: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48828: LD_ADDR_VAR 0 24
48832: PUSH
48833: LD_INT 3
48835: PUSH
48836: LD_INT 0
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 3
48845: PUSH
48846: LD_INT 1
48848: NEG
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 4
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: LIST
48868: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48869: LD_ADDR_VAR 0 25
48873: PUSH
48874: LD_INT 3
48876: PUSH
48877: LD_INT 3
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 4
48886: PUSH
48887: LD_INT 3
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 3
48896: PUSH
48897: LD_INT 4
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: LIST
48908: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48909: LD_ADDR_VAR 0 26
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: LD_INT 3
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: LD_INT 4
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: LD_INT 3
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: LIST
48949: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48950: LD_ADDR_VAR 0 27
48954: PUSH
48955: LD_INT 3
48957: NEG
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 3
48968: NEG
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 4
48979: NEG
48980: PUSH
48981: LD_INT 1
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: LIST
48993: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48994: LD_ADDR_VAR 0 28
48998: PUSH
48999: LD_INT 3
49001: NEG
49002: PUSH
49003: LD_INT 3
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 3
49013: NEG
49014: PUSH
49015: LD_INT 4
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 4
49025: NEG
49026: PUSH
49027: LD_INT 3
49029: NEG
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: LIST
49039: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49040: LD_ADDR_VAR 0 29
49044: PUSH
49045: LD_INT 1
49047: NEG
49048: PUSH
49049: LD_INT 3
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: LD_INT 3
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: PUSH
49071: LD_INT 2
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: LD_INT 4
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 0
49093: PUSH
49094: LD_INT 4
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: LD_INT 3
49107: NEG
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: NEG
49116: PUSH
49117: LD_INT 5
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: LD_INT 5
49130: NEG
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: LD_INT 4
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 1
49149: NEG
49150: PUSH
49151: LD_INT 6
49153: NEG
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 0
49161: PUSH
49162: LD_INT 6
49164: NEG
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 1
49172: PUSH
49173: LD_INT 5
49175: NEG
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49195: LD_ADDR_VAR 0 30
49199: PUSH
49200: LD_INT 2
49202: PUSH
49203: LD_INT 1
49205: NEG
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 3
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 3
49223: PUSH
49224: LD_INT 1
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 3
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 4
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 4
49254: PUSH
49255: LD_INT 1
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 4
49264: PUSH
49265: LD_INT 1
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 5
49275: PUSH
49276: LD_INT 0
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 5
49285: PUSH
49286: LD_INT 1
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 5
49295: PUSH
49296: LD_INT 1
49298: NEG
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 6
49306: PUSH
49307: LD_INT 0
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 6
49316: PUSH
49317: LD_INT 1
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49338: LD_ADDR_VAR 0 31
49342: PUSH
49343: LD_INT 3
49345: PUSH
49346: LD_INT 2
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 3
49355: PUSH
49356: LD_INT 3
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 2
49365: PUSH
49366: LD_INT 3
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 4
49375: PUSH
49376: LD_INT 3
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 4
49385: PUSH
49386: LD_INT 4
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 3
49395: PUSH
49396: LD_INT 4
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 5
49405: PUSH
49406: LD_INT 4
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 5
49415: PUSH
49416: LD_INT 5
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 4
49425: PUSH
49426: LD_INT 5
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 6
49435: PUSH
49436: LD_INT 5
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 6
49445: PUSH
49446: LD_INT 6
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 5
49455: PUSH
49456: LD_INT 6
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49477: LD_ADDR_VAR 0 32
49481: PUSH
49482: LD_INT 1
49484: PUSH
49485: LD_INT 3
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: LD_INT 3
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: NEG
49505: PUSH
49506: LD_INT 2
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 1
49515: PUSH
49516: LD_INT 4
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: LD_INT 4
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: NEG
49536: PUSH
49537: LD_INT 3
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: LD_INT 5
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: LD_INT 5
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: LD_INT 4
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 1
49577: PUSH
49578: LD_INT 6
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: LD_INT 6
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: LD_INT 5
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49620: LD_ADDR_VAR 0 33
49624: PUSH
49625: LD_INT 2
49627: NEG
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 3
49638: NEG
49639: PUSH
49640: LD_INT 0
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 3
49649: NEG
49650: PUSH
49651: LD_INT 1
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 3
49661: NEG
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 4
49672: NEG
49673: PUSH
49674: LD_INT 0
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 4
49683: NEG
49684: PUSH
49685: LD_INT 1
49687: NEG
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 4
49695: NEG
49696: PUSH
49697: LD_INT 1
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 5
49706: NEG
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 5
49717: NEG
49718: PUSH
49719: LD_INT 1
49721: NEG
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 5
49729: NEG
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 6
49740: NEG
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 6
49751: NEG
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49775: LD_ADDR_VAR 0 34
49779: PUSH
49780: LD_INT 2
49782: NEG
49783: PUSH
49784: LD_INT 3
49786: NEG
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 3
49794: NEG
49795: PUSH
49796: LD_INT 2
49798: NEG
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 3
49806: NEG
49807: PUSH
49808: LD_INT 3
49810: NEG
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 3
49818: NEG
49819: PUSH
49820: LD_INT 4
49822: NEG
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 4
49830: NEG
49831: PUSH
49832: LD_INT 3
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 4
49842: NEG
49843: PUSH
49844: LD_INT 4
49846: NEG
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 4
49854: NEG
49855: PUSH
49856: LD_INT 5
49858: NEG
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 5
49866: NEG
49867: PUSH
49868: LD_INT 4
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 5
49878: NEG
49879: PUSH
49880: LD_INT 5
49882: NEG
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 5
49890: NEG
49891: PUSH
49892: LD_INT 6
49894: NEG
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 6
49902: NEG
49903: PUSH
49904: LD_INT 5
49906: NEG
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 6
49914: NEG
49915: PUSH
49916: LD_INT 6
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49938: LD_ADDR_VAR 0 41
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: LD_INT 2
49948: NEG
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 1
49956: NEG
49957: PUSH
49958: LD_INT 3
49960: NEG
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 1
49968: PUSH
49969: LD_INT 2
49971: NEG
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: LIST
49981: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49982: LD_ADDR_VAR 0 42
49986: PUSH
49987: LD_INT 2
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 2
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 3
50010: PUSH
50011: LD_INT 1
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: LIST
50022: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50023: LD_ADDR_VAR 0 43
50027: PUSH
50028: LD_INT 2
50030: PUSH
50031: LD_INT 2
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 3
50040: PUSH
50041: LD_INT 2
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 2
50050: PUSH
50051: LD_INT 3
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: LIST
50062: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50063: LD_ADDR_VAR 0 44
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: LD_INT 2
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: PUSH
50081: LD_INT 3
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 1
50090: NEG
50091: PUSH
50092: LD_INT 2
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: LIST
50103: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50104: LD_ADDR_VAR 0 45
50108: PUSH
50109: LD_INT 2
50111: NEG
50112: PUSH
50113: LD_INT 0
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 2
50122: NEG
50123: PUSH
50124: LD_INT 1
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 3
50133: NEG
50134: PUSH
50135: LD_INT 1
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: LIST
50147: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50148: LD_ADDR_VAR 0 46
50152: PUSH
50153: LD_INT 2
50155: NEG
50156: PUSH
50157: LD_INT 2
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 2
50167: NEG
50168: PUSH
50169: LD_INT 3
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 3
50179: NEG
50180: PUSH
50181: LD_INT 2
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: LIST
50193: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50194: LD_ADDR_VAR 0 47
50198: PUSH
50199: LD_INT 2
50201: NEG
50202: PUSH
50203: LD_INT 3
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: LD_INT 3
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50227: LD_ADDR_VAR 0 48
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: LD_INT 2
50237: NEG
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 2
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50258: LD_ADDR_VAR 0 49
50262: PUSH
50263: LD_INT 3
50265: PUSH
50266: LD_INT 1
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 3
50275: PUSH
50276: LD_INT 2
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50287: LD_ADDR_VAR 0 50
50291: PUSH
50292: LD_INT 2
50294: PUSH
50295: LD_INT 3
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: PUSH
50305: LD_INT 3
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50316: LD_ADDR_VAR 0 51
50320: PUSH
50321: LD_INT 1
50323: NEG
50324: PUSH
50325: LD_INT 2
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 2
50334: NEG
50335: PUSH
50336: LD_INT 1
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50347: LD_ADDR_VAR 0 52
50351: PUSH
50352: LD_INT 3
50354: NEG
50355: PUSH
50356: LD_INT 1
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 3
50366: NEG
50367: PUSH
50368: LD_INT 2
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50380: LD_ADDR_VAR 0 53
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: LD_INT 3
50391: NEG
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: LD_INT 3
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 1
50410: PUSH
50411: LD_INT 2
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: LIST
50423: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50424: LD_ADDR_VAR 0 54
50428: PUSH
50429: LD_INT 2
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 3
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 3
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: LIST
50464: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50465: LD_ADDR_VAR 0 55
50469: PUSH
50470: LD_INT 3
50472: PUSH
50473: LD_INT 2
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 3
50482: PUSH
50483: LD_INT 3
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 2
50492: PUSH
50493: LD_INT 3
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: LIST
50504: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50505: LD_ADDR_VAR 0 56
50509: PUSH
50510: LD_INT 1
50512: PUSH
50513: LD_INT 3
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 0
50522: PUSH
50523: LD_INT 3
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 1
50532: NEG
50533: PUSH
50534: LD_INT 2
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: LIST
50545: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50546: LD_ADDR_VAR 0 57
50550: PUSH
50551: LD_INT 2
50553: NEG
50554: PUSH
50555: LD_INT 1
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 3
50564: NEG
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 3
50575: NEG
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: LIST
50589: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50590: LD_ADDR_VAR 0 58
50594: PUSH
50595: LD_INT 2
50597: NEG
50598: PUSH
50599: LD_INT 3
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 3
50609: NEG
50610: PUSH
50611: LD_INT 2
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 3
50621: NEG
50622: PUSH
50623: LD_INT 3
50625: NEG
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: LIST
50635: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50636: LD_ADDR_VAR 0 59
50640: PUSH
50641: LD_INT 1
50643: NEG
50644: PUSH
50645: LD_INT 2
50647: NEG
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: LD_INT 2
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 1
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: LIST
50679: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50680: LD_ADDR_VAR 0 60
50684: PUSH
50685: LD_INT 1
50687: PUSH
50688: LD_INT 1
50690: NEG
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 2
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 2
50708: PUSH
50709: LD_INT 1
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: LIST
50720: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50721: LD_ADDR_VAR 0 61
50725: PUSH
50726: LD_INT 2
50728: PUSH
50729: LD_INT 1
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 2
50738: PUSH
50739: LD_INT 2
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: PUSH
50749: LD_INT 2
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: LIST
50760: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50761: LD_ADDR_VAR 0 62
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: LD_INT 2
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 0
50778: PUSH
50779: LD_INT 2
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 1
50788: NEG
50789: PUSH
50790: LD_INT 1
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: LIST
50801: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50802: LD_ADDR_VAR 0 63
50806: PUSH
50807: LD_INT 1
50809: NEG
50810: PUSH
50811: LD_INT 1
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 2
50820: NEG
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 2
50831: NEG
50832: PUSH
50833: LD_INT 1
50835: NEG
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: LIST
50845: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50846: LD_ADDR_VAR 0 64
50850: PUSH
50851: LD_INT 1
50853: NEG
50854: PUSH
50855: LD_INT 2
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 2
50865: NEG
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 2
50877: NEG
50878: PUSH
50879: LD_INT 2
50881: NEG
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: LIST
50891: ST_TO_ADDR
// end ; 2 :
50892: GO 54158
50894: LD_INT 2
50896: DOUBLE
50897: EQUAL
50898: IFTRUE 50902
50900: GO 54157
50902: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50903: LD_ADDR_VAR 0 29
50907: PUSH
50908: LD_INT 4
50910: PUSH
50911: LD_INT 0
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 4
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 5
50931: PUSH
50932: LD_INT 0
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 5
50941: PUSH
50942: LD_INT 1
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 4
50951: PUSH
50952: LD_INT 1
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 3
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 3
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 3
50982: PUSH
50983: LD_INT 2
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 5
50993: PUSH
50994: LD_INT 2
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 3
51003: PUSH
51004: LD_INT 3
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 3
51013: PUSH
51014: LD_INT 2
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 4
51023: PUSH
51024: LD_INT 3
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 4
51033: PUSH
51034: LD_INT 4
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 3
51043: PUSH
51044: LD_INT 4
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 2
51053: PUSH
51054: LD_INT 3
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 2
51063: PUSH
51064: LD_INT 2
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 4
51073: PUSH
51074: LD_INT 2
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 2
51083: PUSH
51084: LD_INT 4
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: LD_INT 4
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: LD_INT 3
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 1
51113: PUSH
51114: LD_INT 4
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 1
51123: PUSH
51124: LD_INT 5
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: LD_INT 5
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 1
51143: NEG
51144: PUSH
51145: LD_INT 4
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 1
51154: NEG
51155: PUSH
51156: LD_INT 3
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 2
51165: PUSH
51166: LD_INT 5
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 2
51175: NEG
51176: PUSH
51177: LD_INT 3
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 3
51186: NEG
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 3
51197: NEG
51198: PUSH
51199: LD_INT 1
51201: NEG
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 2
51209: NEG
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 2
51220: NEG
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 3
51231: NEG
51232: PUSH
51233: LD_INT 1
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 4
51242: NEG
51243: PUSH
51244: LD_INT 0
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 4
51253: NEG
51254: PUSH
51255: LD_INT 1
51257: NEG
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 4
51265: NEG
51266: PUSH
51267: LD_INT 2
51269: NEG
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 2
51277: NEG
51278: PUSH
51279: LD_INT 2
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 4
51288: NEG
51289: PUSH
51290: LD_INT 4
51292: NEG
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 4
51300: NEG
51301: PUSH
51302: LD_INT 5
51304: NEG
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 3
51312: NEG
51313: PUSH
51314: LD_INT 4
51316: NEG
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 3
51324: NEG
51325: PUSH
51326: LD_INT 3
51328: NEG
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 4
51336: NEG
51337: PUSH
51338: LD_INT 3
51340: NEG
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 5
51348: NEG
51349: PUSH
51350: LD_INT 4
51352: NEG
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 5
51360: NEG
51361: PUSH
51362: LD_INT 5
51364: NEG
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 3
51372: NEG
51373: PUSH
51374: LD_INT 5
51376: NEG
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 5
51384: NEG
51385: PUSH
51386: LD_INT 3
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51441: LD_ADDR_VAR 0 30
51445: PUSH
51446: LD_INT 4
51448: PUSH
51449: LD_INT 4
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 4
51458: PUSH
51459: LD_INT 3
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 5
51468: PUSH
51469: LD_INT 4
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 5
51478: PUSH
51479: LD_INT 5
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 4
51488: PUSH
51489: LD_INT 5
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 3
51498: PUSH
51499: LD_INT 4
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 3
51508: PUSH
51509: LD_INT 3
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 5
51518: PUSH
51519: LD_INT 3
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 3
51528: PUSH
51529: LD_INT 5
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: LD_INT 3
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: LD_INT 2
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 1
51558: PUSH
51559: LD_INT 3
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: LD_INT 4
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 0
51578: PUSH
51579: LD_INT 4
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 1
51588: NEG
51589: PUSH
51590: LD_INT 3
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 1
51599: NEG
51600: PUSH
51601: LD_INT 2
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 2
51610: PUSH
51611: LD_INT 4
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 2
51620: NEG
51621: PUSH
51622: LD_INT 2
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 4
51631: NEG
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 4
51642: NEG
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 3
51654: NEG
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 3
51665: NEG
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 4
51676: NEG
51677: PUSH
51678: LD_INT 1
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 5
51687: NEG
51688: PUSH
51689: LD_INT 0
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 5
51698: NEG
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 5
51710: NEG
51711: PUSH
51712: LD_INT 2
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 3
51722: NEG
51723: PUSH
51724: LD_INT 2
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 3
51733: NEG
51734: PUSH
51735: LD_INT 3
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 3
51745: NEG
51746: PUSH
51747: LD_INT 4
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 2
51757: NEG
51758: PUSH
51759: LD_INT 3
51761: NEG
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 2
51769: NEG
51770: PUSH
51771: LD_INT 2
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 3
51781: NEG
51782: PUSH
51783: LD_INT 2
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 4
51793: NEG
51794: PUSH
51795: LD_INT 3
51797: NEG
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 4
51805: NEG
51806: PUSH
51807: LD_INT 4
51809: NEG
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 2
51817: NEG
51818: PUSH
51819: LD_INT 4
51821: NEG
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 4
51829: NEG
51830: PUSH
51831: LD_INT 2
51833: NEG
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: LD_INT 4
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 0
51852: PUSH
51853: LD_INT 5
51855: NEG
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 1
51863: PUSH
51864: LD_INT 4
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: LD_INT 3
51877: NEG
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 0
51885: PUSH
51886: LD_INT 3
51888: NEG
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 1
51896: NEG
51897: PUSH
51898: LD_INT 4
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: LD_INT 5
51912: NEG
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 2
51920: PUSH
51921: LD_INT 3
51923: NEG
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 2
51931: NEG
51932: PUSH
51933: LD_INT 5
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51988: LD_ADDR_VAR 0 31
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: LD_INT 4
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 0
52005: PUSH
52006: LD_INT 3
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 1
52015: PUSH
52016: LD_INT 4
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: LD_INT 5
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: LD_INT 5
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 1
52045: NEG
52046: PUSH
52047: LD_INT 4
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 1
52056: NEG
52057: PUSH
52058: LD_INT 3
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 2
52067: PUSH
52068: LD_INT 5
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 2
52077: NEG
52078: PUSH
52079: LD_INT 3
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 3
52088: NEG
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 3
52099: NEG
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 2
52111: NEG
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 2
52122: NEG
52123: PUSH
52124: LD_INT 1
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 3
52133: NEG
52134: PUSH
52135: LD_INT 1
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 4
52144: NEG
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 4
52155: NEG
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 4
52167: NEG
52168: PUSH
52169: LD_INT 2
52171: NEG
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 2
52179: NEG
52180: PUSH
52181: LD_INT 2
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 4
52190: NEG
52191: PUSH
52192: LD_INT 4
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 4
52202: NEG
52203: PUSH
52204: LD_INT 5
52206: NEG
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 3
52214: NEG
52215: PUSH
52216: LD_INT 4
52218: NEG
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 3
52226: NEG
52227: PUSH
52228: LD_INT 3
52230: NEG
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 4
52238: NEG
52239: PUSH
52240: LD_INT 3
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 5
52250: NEG
52251: PUSH
52252: LD_INT 4
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 5
52262: NEG
52263: PUSH
52264: LD_INT 5
52266: NEG
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 3
52274: NEG
52275: PUSH
52276: LD_INT 5
52278: NEG
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 5
52286: NEG
52287: PUSH
52288: LD_INT 3
52290: NEG
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 0
52298: PUSH
52299: LD_INT 3
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: LD_INT 4
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 1
52320: PUSH
52321: LD_INT 3
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: LD_INT 2
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: LD_INT 2
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 1
52353: NEG
52354: PUSH
52355: LD_INT 3
52357: NEG
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 1
52365: NEG
52366: PUSH
52367: LD_INT 4
52369: NEG
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 2
52377: PUSH
52378: LD_INT 2
52380: NEG
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 2
52388: NEG
52389: PUSH
52390: LD_INT 4
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 4
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 4
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 5
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 5
52431: PUSH
52432: LD_INT 1
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 4
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 3
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 3
52461: PUSH
52462: LD_INT 1
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 3
52472: PUSH
52473: LD_INT 2
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 5
52483: PUSH
52484: LD_INT 2
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52538: LD_ADDR_VAR 0 32
52542: PUSH
52543: LD_INT 4
52545: NEG
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 4
52556: NEG
52557: PUSH
52558: LD_INT 1
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 3
52568: NEG
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 3
52579: NEG
52580: PUSH
52581: LD_INT 1
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 4
52590: NEG
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 5
52601: NEG
52602: PUSH
52603: LD_INT 0
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 5
52612: NEG
52613: PUSH
52614: LD_INT 1
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 5
52624: NEG
52625: PUSH
52626: LD_INT 2
52628: NEG
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 3
52636: NEG
52637: PUSH
52638: LD_INT 2
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 3
52647: NEG
52648: PUSH
52649: LD_INT 3
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 3
52659: NEG
52660: PUSH
52661: LD_INT 4
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 2
52671: NEG
52672: PUSH
52673: LD_INT 3
52675: NEG
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 2
52683: NEG
52684: PUSH
52685: LD_INT 2
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 3
52695: NEG
52696: PUSH
52697: LD_INT 2
52699: NEG
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 4
52707: NEG
52708: PUSH
52709: LD_INT 3
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 4
52719: NEG
52720: PUSH
52721: LD_INT 4
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 2
52731: NEG
52732: PUSH
52733: LD_INT 4
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 4
52743: NEG
52744: PUSH
52745: LD_INT 2
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: LD_INT 4
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: LD_INT 5
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 1
52777: PUSH
52778: LD_INT 4
52780: NEG
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: LD_INT 3
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: LD_INT 3
52802: NEG
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: LD_INT 4
52814: NEG
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: LD_INT 5
52826: NEG
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 2
52834: PUSH
52835: LD_INT 3
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 2
52845: NEG
52846: PUSH
52847: LD_INT 5
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 3
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 3
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 4
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 4
52888: PUSH
52889: LD_INT 1
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 3
52898: PUSH
52899: LD_INT 1
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 2
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 2
52918: PUSH
52919: LD_INT 1
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 2
52929: PUSH
52930: LD_INT 2
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 4
52940: PUSH
52941: LD_INT 2
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 4
52950: PUSH
52951: LD_INT 4
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 4
52960: PUSH
52961: LD_INT 3
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 5
52970: PUSH
52971: LD_INT 4
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 5
52980: PUSH
52981: LD_INT 5
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 4
52990: PUSH
52991: LD_INT 5
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 3
53000: PUSH
53001: LD_INT 4
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 3
53010: PUSH
53011: LD_INT 3
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 5
53020: PUSH
53021: LD_INT 3
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 3
53030: PUSH
53031: LD_INT 5
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53085: LD_ADDR_VAR 0 33
53089: PUSH
53090: LD_INT 4
53092: NEG
53093: PUSH
53094: LD_INT 4
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 4
53104: NEG
53105: PUSH
53106: LD_INT 5
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 3
53116: NEG
53117: PUSH
53118: LD_INT 4
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 3
53128: NEG
53129: PUSH
53130: LD_INT 3
53132: NEG
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 4
53140: NEG
53141: PUSH
53142: LD_INT 3
53144: NEG
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 5
53152: NEG
53153: PUSH
53154: LD_INT 4
53156: NEG
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 5
53164: NEG
53165: PUSH
53166: LD_INT 5
53168: NEG
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 3
53176: NEG
53177: PUSH
53178: LD_INT 5
53180: NEG
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 5
53188: NEG
53189: PUSH
53190: LD_INT 3
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: LD_INT 3
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 0
53211: PUSH
53212: LD_INT 4
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 1
53222: PUSH
53223: LD_INT 3
53225: NEG
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 1
53233: PUSH
53234: LD_INT 2
53236: NEG
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: LD_INT 2
53247: NEG
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: NEG
53256: PUSH
53257: LD_INT 3
53259: NEG
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 1
53267: NEG
53268: PUSH
53269: LD_INT 4
53271: NEG
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 2
53279: PUSH
53280: LD_INT 2
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 2
53290: NEG
53291: PUSH
53292: LD_INT 4
53294: NEG
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 4
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 4
53312: PUSH
53313: LD_INT 1
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 5
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 5
53333: PUSH
53334: LD_INT 1
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 4
53343: PUSH
53344: LD_INT 1
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 3
53353: PUSH
53354: LD_INT 0
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 3
53363: PUSH
53364: LD_INT 1
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 3
53374: PUSH
53375: LD_INT 2
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 5
53385: PUSH
53386: LD_INT 2
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 3
53395: PUSH
53396: LD_INT 3
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 3
53405: PUSH
53406: LD_INT 2
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 4
53415: PUSH
53416: LD_INT 3
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 4
53425: PUSH
53426: LD_INT 4
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 3
53435: PUSH
53436: LD_INT 4
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 2
53445: PUSH
53446: LD_INT 3
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 2
53455: PUSH
53456: LD_INT 2
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 4
53465: PUSH
53466: LD_INT 2
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 2
53475: PUSH
53476: LD_INT 4
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 0
53485: PUSH
53486: LD_INT 4
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: LD_INT 3
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 1
53505: PUSH
53506: LD_INT 4
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: LD_INT 5
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 0
53525: PUSH
53526: LD_INT 5
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 1
53535: NEG
53536: PUSH
53537: LD_INT 4
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: LD_INT 3
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 2
53557: PUSH
53558: LD_INT 5
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 2
53567: NEG
53568: PUSH
53569: LD_INT 3
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53623: LD_ADDR_VAR 0 34
53627: PUSH
53628: LD_INT 0
53630: PUSH
53631: LD_INT 4
53633: NEG
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: LD_INT 5
53644: NEG
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 1
53652: PUSH
53653: LD_INT 4
53655: NEG
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 1
53663: PUSH
53664: LD_INT 3
53666: NEG
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: LD_INT 3
53677: NEG
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 1
53685: NEG
53686: PUSH
53687: LD_INT 4
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 1
53697: NEG
53698: PUSH
53699: LD_INT 5
53701: NEG
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 2
53709: PUSH
53710: LD_INT 3
53712: NEG
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 2
53720: NEG
53721: PUSH
53722: LD_INT 5
53724: NEG
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 3
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 3
53742: PUSH
53743: LD_INT 1
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 4
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 4
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 3
53773: PUSH
53774: LD_INT 1
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 2
53783: PUSH
53784: LD_INT 0
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 2
53793: PUSH
53794: LD_INT 1
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 2
53804: PUSH
53805: LD_INT 2
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 4
53815: PUSH
53816: LD_INT 2
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 4
53825: PUSH
53826: LD_INT 4
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 4
53835: PUSH
53836: LD_INT 3
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 5
53845: PUSH
53846: LD_INT 4
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 5
53855: PUSH
53856: LD_INT 5
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 4
53865: PUSH
53866: LD_INT 5
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 3
53875: PUSH
53876: LD_INT 4
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 3
53885: PUSH
53886: LD_INT 3
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 5
53895: PUSH
53896: LD_INT 3
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 3
53905: PUSH
53906: LD_INT 5
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 0
53915: PUSH
53916: LD_INT 3
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 0
53925: PUSH
53926: LD_INT 2
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: LD_INT 3
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: PUSH
53946: LD_INT 4
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 0
53955: PUSH
53956: LD_INT 4
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 1
53965: NEG
53966: PUSH
53967: LD_INT 3
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: LD_INT 2
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 2
53987: PUSH
53988: LD_INT 4
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 2
53997: NEG
53998: PUSH
53999: LD_INT 2
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 4
54008: NEG
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 4
54019: NEG
54020: PUSH
54021: LD_INT 1
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 3
54031: NEG
54032: PUSH
54033: LD_INT 0
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 3
54042: NEG
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 4
54053: NEG
54054: PUSH
54055: LD_INT 1
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 5
54064: NEG
54065: PUSH
54066: LD_INT 0
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 5
54075: NEG
54076: PUSH
54077: LD_INT 1
54079: NEG
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 5
54087: NEG
54088: PUSH
54089: LD_INT 2
54091: NEG
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 3
54099: NEG
54100: PUSH
54101: LD_INT 2
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: ST_TO_ADDR
// end ; end ;
54155: GO 54158
54157: POP
// case btype of b_depot , b_warehouse :
54158: LD_VAR 0 1
54162: PUSH
54163: LD_INT 0
54165: DOUBLE
54166: EQUAL
54167: IFTRUE 54177
54169: LD_INT 1
54171: DOUBLE
54172: EQUAL
54173: IFTRUE 54177
54175: GO 54378
54177: POP
// case nation of nation_american :
54178: LD_VAR 0 5
54182: PUSH
54183: LD_INT 1
54185: DOUBLE
54186: EQUAL
54187: IFTRUE 54191
54189: GO 54247
54191: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
54192: LD_ADDR_VAR 0 9
54196: PUSH
54197: LD_VAR 0 11
54201: PUSH
54202: LD_VAR 0 12
54206: PUSH
54207: LD_VAR 0 13
54211: PUSH
54212: LD_VAR 0 14
54216: PUSH
54217: LD_VAR 0 15
54221: PUSH
54222: LD_VAR 0 16
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: PUSH
54235: LD_VAR 0 4
54239: PUSH
54240: LD_INT 1
54242: PLUS
54243: ARRAY
54244: ST_TO_ADDR
54245: GO 54376
54247: LD_INT 2
54249: DOUBLE
54250: EQUAL
54251: IFTRUE 54255
54253: GO 54311
54255: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54256: LD_ADDR_VAR 0 9
54260: PUSH
54261: LD_VAR 0 17
54265: PUSH
54266: LD_VAR 0 18
54270: PUSH
54271: LD_VAR 0 19
54275: PUSH
54276: LD_VAR 0 20
54280: PUSH
54281: LD_VAR 0 21
54285: PUSH
54286: LD_VAR 0 22
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: PUSH
54299: LD_VAR 0 4
54303: PUSH
54304: LD_INT 1
54306: PLUS
54307: ARRAY
54308: ST_TO_ADDR
54309: GO 54376
54311: LD_INT 3
54313: DOUBLE
54314: EQUAL
54315: IFTRUE 54319
54317: GO 54375
54319: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54320: LD_ADDR_VAR 0 9
54324: PUSH
54325: LD_VAR 0 23
54329: PUSH
54330: LD_VAR 0 24
54334: PUSH
54335: LD_VAR 0 25
54339: PUSH
54340: LD_VAR 0 26
54344: PUSH
54345: LD_VAR 0 27
54349: PUSH
54350: LD_VAR 0 28
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: PUSH
54363: LD_VAR 0 4
54367: PUSH
54368: LD_INT 1
54370: PLUS
54371: ARRAY
54372: ST_TO_ADDR
54373: GO 54376
54375: POP
54376: GO 54931
54378: LD_INT 2
54380: DOUBLE
54381: EQUAL
54382: IFTRUE 54392
54384: LD_INT 3
54386: DOUBLE
54387: EQUAL
54388: IFTRUE 54392
54390: GO 54448
54392: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54393: LD_ADDR_VAR 0 9
54397: PUSH
54398: LD_VAR 0 29
54402: PUSH
54403: LD_VAR 0 30
54407: PUSH
54408: LD_VAR 0 31
54412: PUSH
54413: LD_VAR 0 32
54417: PUSH
54418: LD_VAR 0 33
54422: PUSH
54423: LD_VAR 0 34
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: PUSH
54436: LD_VAR 0 4
54440: PUSH
54441: LD_INT 1
54443: PLUS
54444: ARRAY
54445: ST_TO_ADDR
54446: GO 54931
54448: LD_INT 16
54450: DOUBLE
54451: EQUAL
54452: IFTRUE 54510
54454: LD_INT 17
54456: DOUBLE
54457: EQUAL
54458: IFTRUE 54510
54460: LD_INT 18
54462: DOUBLE
54463: EQUAL
54464: IFTRUE 54510
54466: LD_INT 19
54468: DOUBLE
54469: EQUAL
54470: IFTRUE 54510
54472: LD_INT 22
54474: DOUBLE
54475: EQUAL
54476: IFTRUE 54510
54478: LD_INT 20
54480: DOUBLE
54481: EQUAL
54482: IFTRUE 54510
54484: LD_INT 21
54486: DOUBLE
54487: EQUAL
54488: IFTRUE 54510
54490: LD_INT 23
54492: DOUBLE
54493: EQUAL
54494: IFTRUE 54510
54496: LD_INT 24
54498: DOUBLE
54499: EQUAL
54500: IFTRUE 54510
54502: LD_INT 25
54504: DOUBLE
54505: EQUAL
54506: IFTRUE 54510
54508: GO 54566
54510: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54511: LD_ADDR_VAR 0 9
54515: PUSH
54516: LD_VAR 0 35
54520: PUSH
54521: LD_VAR 0 36
54525: PUSH
54526: LD_VAR 0 37
54530: PUSH
54531: LD_VAR 0 38
54535: PUSH
54536: LD_VAR 0 39
54540: PUSH
54541: LD_VAR 0 40
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: PUSH
54554: LD_VAR 0 4
54558: PUSH
54559: LD_INT 1
54561: PLUS
54562: ARRAY
54563: ST_TO_ADDR
54564: GO 54931
54566: LD_INT 6
54568: DOUBLE
54569: EQUAL
54570: IFTRUE 54622
54572: LD_INT 7
54574: DOUBLE
54575: EQUAL
54576: IFTRUE 54622
54578: LD_INT 8
54580: DOUBLE
54581: EQUAL
54582: IFTRUE 54622
54584: LD_INT 13
54586: DOUBLE
54587: EQUAL
54588: IFTRUE 54622
54590: LD_INT 12
54592: DOUBLE
54593: EQUAL
54594: IFTRUE 54622
54596: LD_INT 15
54598: DOUBLE
54599: EQUAL
54600: IFTRUE 54622
54602: LD_INT 11
54604: DOUBLE
54605: EQUAL
54606: IFTRUE 54622
54608: LD_INT 14
54610: DOUBLE
54611: EQUAL
54612: IFTRUE 54622
54614: LD_INT 10
54616: DOUBLE
54617: EQUAL
54618: IFTRUE 54622
54620: GO 54678
54622: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54623: LD_ADDR_VAR 0 9
54627: PUSH
54628: LD_VAR 0 41
54632: PUSH
54633: LD_VAR 0 42
54637: PUSH
54638: LD_VAR 0 43
54642: PUSH
54643: LD_VAR 0 44
54647: PUSH
54648: LD_VAR 0 45
54652: PUSH
54653: LD_VAR 0 46
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: PUSH
54666: LD_VAR 0 4
54670: PUSH
54671: LD_INT 1
54673: PLUS
54674: ARRAY
54675: ST_TO_ADDR
54676: GO 54931
54678: LD_INT 36
54680: DOUBLE
54681: EQUAL
54682: IFTRUE 54686
54684: GO 54742
54686: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54687: LD_ADDR_VAR 0 9
54691: PUSH
54692: LD_VAR 0 47
54696: PUSH
54697: LD_VAR 0 48
54701: PUSH
54702: LD_VAR 0 49
54706: PUSH
54707: LD_VAR 0 50
54711: PUSH
54712: LD_VAR 0 51
54716: PUSH
54717: LD_VAR 0 52
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: PUSH
54730: LD_VAR 0 4
54734: PUSH
54735: LD_INT 1
54737: PLUS
54738: ARRAY
54739: ST_TO_ADDR
54740: GO 54931
54742: LD_INT 4
54744: DOUBLE
54745: EQUAL
54746: IFTRUE 54768
54748: LD_INT 5
54750: DOUBLE
54751: EQUAL
54752: IFTRUE 54768
54754: LD_INT 34
54756: DOUBLE
54757: EQUAL
54758: IFTRUE 54768
54760: LD_INT 37
54762: DOUBLE
54763: EQUAL
54764: IFTRUE 54768
54766: GO 54824
54768: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54769: LD_ADDR_VAR 0 9
54773: PUSH
54774: LD_VAR 0 53
54778: PUSH
54779: LD_VAR 0 54
54783: PUSH
54784: LD_VAR 0 55
54788: PUSH
54789: LD_VAR 0 56
54793: PUSH
54794: LD_VAR 0 57
54798: PUSH
54799: LD_VAR 0 58
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: PUSH
54812: LD_VAR 0 4
54816: PUSH
54817: LD_INT 1
54819: PLUS
54820: ARRAY
54821: ST_TO_ADDR
54822: GO 54931
54824: LD_INT 31
54826: DOUBLE
54827: EQUAL
54828: IFTRUE 54874
54830: LD_INT 32
54832: DOUBLE
54833: EQUAL
54834: IFTRUE 54874
54836: LD_INT 33
54838: DOUBLE
54839: EQUAL
54840: IFTRUE 54874
54842: LD_INT 27
54844: DOUBLE
54845: EQUAL
54846: IFTRUE 54874
54848: LD_INT 26
54850: DOUBLE
54851: EQUAL
54852: IFTRUE 54874
54854: LD_INT 28
54856: DOUBLE
54857: EQUAL
54858: IFTRUE 54874
54860: LD_INT 29
54862: DOUBLE
54863: EQUAL
54864: IFTRUE 54874
54866: LD_INT 30
54868: DOUBLE
54869: EQUAL
54870: IFTRUE 54874
54872: GO 54930
54874: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54875: LD_ADDR_VAR 0 9
54879: PUSH
54880: LD_VAR 0 59
54884: PUSH
54885: LD_VAR 0 60
54889: PUSH
54890: LD_VAR 0 61
54894: PUSH
54895: LD_VAR 0 62
54899: PUSH
54900: LD_VAR 0 63
54904: PUSH
54905: LD_VAR 0 64
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: PUSH
54918: LD_VAR 0 4
54922: PUSH
54923: LD_INT 1
54925: PLUS
54926: ARRAY
54927: ST_TO_ADDR
54928: GO 54931
54930: POP
// temp_list2 = [ ] ;
54931: LD_ADDR_VAR 0 10
54935: PUSH
54936: EMPTY
54937: ST_TO_ADDR
// for i in temp_list do
54938: LD_ADDR_VAR 0 8
54942: PUSH
54943: LD_VAR 0 9
54947: PUSH
54948: FOR_IN
54949: IFFALSE 55001
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54951: LD_ADDR_VAR 0 10
54955: PUSH
54956: LD_VAR 0 10
54960: PUSH
54961: LD_VAR 0 8
54965: PUSH
54966: LD_INT 1
54968: ARRAY
54969: PUSH
54970: LD_VAR 0 2
54974: PLUS
54975: PUSH
54976: LD_VAR 0 8
54980: PUSH
54981: LD_INT 2
54983: ARRAY
54984: PUSH
54985: LD_VAR 0 3
54989: PLUS
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: EMPTY
54996: LIST
54997: ADD
54998: ST_TO_ADDR
54999: GO 54948
55001: POP
55002: POP
// result = temp_list2 ;
55003: LD_ADDR_VAR 0 7
55007: PUSH
55008: LD_VAR 0 10
55012: ST_TO_ADDR
// end ;
55013: LD_VAR 0 7
55017: RET
// export function EnemyInRange ( unit , dist ) ; begin
55018: LD_INT 0
55020: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55021: LD_ADDR_VAR 0 3
55025: PUSH
55026: LD_VAR 0 1
55030: PPUSH
55031: CALL_OW 255
55035: PPUSH
55036: LD_VAR 0 1
55040: PPUSH
55041: CALL_OW 250
55045: PPUSH
55046: LD_VAR 0 1
55050: PPUSH
55051: CALL_OW 251
55055: PPUSH
55056: LD_VAR 0 2
55060: PPUSH
55061: CALL 28391 0 4
55065: PUSH
55066: LD_INT 4
55068: ARRAY
55069: ST_TO_ADDR
// end ;
55070: LD_VAR 0 3
55074: RET
// export function PlayerSeeMe ( unit ) ; begin
55075: LD_INT 0
55077: PPUSH
// result := See ( your_side , unit ) ;
55078: LD_ADDR_VAR 0 2
55082: PUSH
55083: LD_OWVAR 2
55087: PPUSH
55088: LD_VAR 0 1
55092: PPUSH
55093: CALL_OW 292
55097: ST_TO_ADDR
// end ;
55098: LD_VAR 0 2
55102: RET
// export function ReverseDir ( unit ) ; begin
55103: LD_INT 0
55105: PPUSH
// if not unit then
55106: LD_VAR 0 1
55110: NOT
55111: IFFALSE 55115
// exit ;
55113: GO 55138
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55115: LD_ADDR_VAR 0 2
55119: PUSH
55120: LD_VAR 0 1
55124: PPUSH
55125: CALL_OW 254
55129: PUSH
55130: LD_INT 3
55132: PLUS
55133: PUSH
55134: LD_INT 6
55136: MOD
55137: ST_TO_ADDR
// end ;
55138: LD_VAR 0 2
55142: RET
// export function ReverseArray ( array ) ; var i ; begin
55143: LD_INT 0
55145: PPUSH
55146: PPUSH
// if not array then
55147: LD_VAR 0 1
55151: NOT
55152: IFFALSE 55156
// exit ;
55154: GO 55211
// result := [ ] ;
55156: LD_ADDR_VAR 0 2
55160: PUSH
55161: EMPTY
55162: ST_TO_ADDR
// for i := array downto 1 do
55163: LD_ADDR_VAR 0 3
55167: PUSH
55168: DOUBLE
55169: LD_VAR 0 1
55173: INC
55174: ST_TO_ADDR
55175: LD_INT 1
55177: PUSH
55178: FOR_DOWNTO
55179: IFFALSE 55209
// result := Join ( result , array [ i ] ) ;
55181: LD_ADDR_VAR 0 2
55185: PUSH
55186: LD_VAR 0 2
55190: PPUSH
55191: LD_VAR 0 1
55195: PUSH
55196: LD_VAR 0 3
55200: ARRAY
55201: PPUSH
55202: CALL 59854 0 2
55206: ST_TO_ADDR
55207: GO 55178
55209: POP
55210: POP
// end ;
55211: LD_VAR 0 2
55215: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
55216: LD_INT 0
55218: PPUSH
55219: PPUSH
55220: PPUSH
55221: PPUSH
55222: PPUSH
55223: PPUSH
// if not unit or not hexes then
55224: LD_VAR 0 1
55228: NOT
55229: PUSH
55230: LD_VAR 0 2
55234: NOT
55235: OR
55236: IFFALSE 55240
// exit ;
55238: GO 55363
// dist := 9999 ;
55240: LD_ADDR_VAR 0 5
55244: PUSH
55245: LD_INT 9999
55247: ST_TO_ADDR
// for i = 1 to hexes do
55248: LD_ADDR_VAR 0 4
55252: PUSH
55253: DOUBLE
55254: LD_INT 1
55256: DEC
55257: ST_TO_ADDR
55258: LD_VAR 0 2
55262: PUSH
55263: FOR_TO
55264: IFFALSE 55351
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55266: LD_ADDR_VAR 0 6
55270: PUSH
55271: LD_VAR 0 1
55275: PPUSH
55276: LD_VAR 0 2
55280: PUSH
55281: LD_VAR 0 4
55285: ARRAY
55286: PUSH
55287: LD_INT 1
55289: ARRAY
55290: PPUSH
55291: LD_VAR 0 2
55295: PUSH
55296: LD_VAR 0 4
55300: ARRAY
55301: PUSH
55302: LD_INT 2
55304: ARRAY
55305: PPUSH
55306: CALL_OW 297
55310: ST_TO_ADDR
// if tdist < dist then
55311: LD_VAR 0 6
55315: PUSH
55316: LD_VAR 0 5
55320: LESS
55321: IFFALSE 55349
// begin hex := hexes [ i ] ;
55323: LD_ADDR_VAR 0 8
55327: PUSH
55328: LD_VAR 0 2
55332: PUSH
55333: LD_VAR 0 4
55337: ARRAY
55338: ST_TO_ADDR
// dist := tdist ;
55339: LD_ADDR_VAR 0 5
55343: PUSH
55344: LD_VAR 0 6
55348: ST_TO_ADDR
// end ; end ;
55349: GO 55263
55351: POP
55352: POP
// result := hex ;
55353: LD_ADDR_VAR 0 3
55357: PUSH
55358: LD_VAR 0 8
55362: ST_TO_ADDR
// end ;
55363: LD_VAR 0 3
55367: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55368: LD_INT 0
55370: PPUSH
55371: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55372: LD_VAR 0 1
55376: NOT
55377: PUSH
55378: LD_VAR 0 1
55382: PUSH
55383: LD_INT 21
55385: PUSH
55386: LD_INT 2
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 23
55395: PUSH
55396: LD_INT 2
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PPUSH
55407: CALL_OW 69
55411: IN
55412: NOT
55413: OR
55414: IFFALSE 55418
// exit ;
55416: GO 55465
// for i = 1 to 3 do
55418: LD_ADDR_VAR 0 3
55422: PUSH
55423: DOUBLE
55424: LD_INT 1
55426: DEC
55427: ST_TO_ADDR
55428: LD_INT 3
55430: PUSH
55431: FOR_TO
55432: IFFALSE 55463
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55434: LD_VAR 0 1
55438: PPUSH
55439: CALL_OW 250
55443: PPUSH
55444: LD_VAR 0 1
55448: PPUSH
55449: CALL_OW 251
55453: PPUSH
55454: LD_INT 1
55456: PPUSH
55457: CALL_OW 453
55461: GO 55431
55463: POP
55464: POP
// end ;
55465: LD_VAR 0 2
55469: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55470: LD_INT 0
55472: PPUSH
55473: PPUSH
55474: PPUSH
55475: PPUSH
55476: PPUSH
55477: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
55478: LD_VAR 0 1
55482: NOT
55483: PUSH
55484: LD_VAR 0 2
55488: NOT
55489: OR
55490: PUSH
55491: LD_VAR 0 1
55495: PPUSH
55496: CALL_OW 314
55500: OR
55501: IFFALSE 55505
// exit ;
55503: GO 55972
// if GetLives ( i ) < 250 then
55505: LD_VAR 0 4
55509: PPUSH
55510: CALL_OW 256
55514: PUSH
55515: LD_INT 250
55517: LESS
55518: IFFALSE 55531
// begin ComAutodestruct ( i ) ;
55520: LD_VAR 0 4
55524: PPUSH
55525: CALL 55368 0 1
// exit ;
55529: GO 55972
// end ; x := GetX ( enemy_unit ) ;
55531: LD_ADDR_VAR 0 7
55535: PUSH
55536: LD_VAR 0 2
55540: PPUSH
55541: CALL_OW 250
55545: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55546: LD_ADDR_VAR 0 8
55550: PUSH
55551: LD_VAR 0 2
55555: PPUSH
55556: CALL_OW 251
55560: ST_TO_ADDR
// if not x or not y then
55561: LD_VAR 0 7
55565: NOT
55566: PUSH
55567: LD_VAR 0 8
55571: NOT
55572: OR
55573: IFFALSE 55577
// exit ;
55575: GO 55972
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55577: LD_ADDR_VAR 0 6
55581: PUSH
55582: LD_VAR 0 7
55586: PPUSH
55587: LD_INT 0
55589: PPUSH
55590: LD_INT 4
55592: PPUSH
55593: CALL_OW 272
55597: PUSH
55598: LD_VAR 0 8
55602: PPUSH
55603: LD_INT 0
55605: PPUSH
55606: LD_INT 4
55608: PPUSH
55609: CALL_OW 273
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_VAR 0 7
55622: PPUSH
55623: LD_INT 1
55625: PPUSH
55626: LD_INT 4
55628: PPUSH
55629: CALL_OW 272
55633: PUSH
55634: LD_VAR 0 8
55638: PPUSH
55639: LD_INT 1
55641: PPUSH
55642: LD_INT 4
55644: PPUSH
55645: CALL_OW 273
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_VAR 0 7
55658: PPUSH
55659: LD_INT 2
55661: PPUSH
55662: LD_INT 4
55664: PPUSH
55665: CALL_OW 272
55669: PUSH
55670: LD_VAR 0 8
55674: PPUSH
55675: LD_INT 2
55677: PPUSH
55678: LD_INT 4
55680: PPUSH
55681: CALL_OW 273
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_VAR 0 7
55694: PPUSH
55695: LD_INT 3
55697: PPUSH
55698: LD_INT 4
55700: PPUSH
55701: CALL_OW 272
55705: PUSH
55706: LD_VAR 0 8
55710: PPUSH
55711: LD_INT 3
55713: PPUSH
55714: LD_INT 4
55716: PPUSH
55717: CALL_OW 273
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_VAR 0 7
55730: PPUSH
55731: LD_INT 4
55733: PPUSH
55734: LD_INT 4
55736: PPUSH
55737: CALL_OW 272
55741: PUSH
55742: LD_VAR 0 8
55746: PPUSH
55747: LD_INT 4
55749: PPUSH
55750: LD_INT 4
55752: PPUSH
55753: CALL_OW 273
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_VAR 0 7
55766: PPUSH
55767: LD_INT 5
55769: PPUSH
55770: LD_INT 4
55772: PPUSH
55773: CALL_OW 272
55777: PUSH
55778: LD_VAR 0 8
55782: PPUSH
55783: LD_INT 5
55785: PPUSH
55786: LD_INT 4
55788: PPUSH
55789: CALL_OW 273
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: ST_TO_ADDR
// for i = tmp downto 1 do
55806: LD_ADDR_VAR 0 4
55810: PUSH
55811: DOUBLE
55812: LD_VAR 0 6
55816: INC
55817: ST_TO_ADDR
55818: LD_INT 1
55820: PUSH
55821: FOR_DOWNTO
55822: IFFALSE 55923
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55824: LD_VAR 0 6
55828: PUSH
55829: LD_VAR 0 4
55833: ARRAY
55834: PUSH
55835: LD_INT 1
55837: ARRAY
55838: PPUSH
55839: LD_VAR 0 6
55843: PUSH
55844: LD_VAR 0 4
55848: ARRAY
55849: PUSH
55850: LD_INT 2
55852: ARRAY
55853: PPUSH
55854: CALL_OW 488
55858: NOT
55859: PUSH
55860: LD_VAR 0 6
55864: PUSH
55865: LD_VAR 0 4
55869: ARRAY
55870: PUSH
55871: LD_INT 1
55873: ARRAY
55874: PPUSH
55875: LD_VAR 0 6
55879: PUSH
55880: LD_VAR 0 4
55884: ARRAY
55885: PUSH
55886: LD_INT 2
55888: ARRAY
55889: PPUSH
55890: CALL_OW 428
55894: PUSH
55895: LD_INT 0
55897: NONEQUAL
55898: OR
55899: IFFALSE 55921
// tmp := Delete ( tmp , i ) ;
55901: LD_ADDR_VAR 0 6
55905: PUSH
55906: LD_VAR 0 6
55910: PPUSH
55911: LD_VAR 0 4
55915: PPUSH
55916: CALL_OW 3
55920: ST_TO_ADDR
55921: GO 55821
55923: POP
55924: POP
// j := GetClosestHex ( unit , tmp ) ;
55925: LD_ADDR_VAR 0 5
55929: PUSH
55930: LD_VAR 0 1
55934: PPUSH
55935: LD_VAR 0 6
55939: PPUSH
55940: CALL 55216 0 2
55944: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55945: LD_VAR 0 1
55949: PPUSH
55950: LD_VAR 0 5
55954: PUSH
55955: LD_INT 1
55957: ARRAY
55958: PPUSH
55959: LD_VAR 0 5
55963: PUSH
55964: LD_INT 2
55966: ARRAY
55967: PPUSH
55968: CALL_OW 111
// end ;
55972: LD_VAR 0 3
55976: RET
// export function PrepareApemanSoldier ( ) ; begin
55977: LD_INT 0
55979: PPUSH
// uc_nation := 0 ;
55980: LD_ADDR_OWVAR 21
55984: PUSH
55985: LD_INT 0
55987: ST_TO_ADDR
// hc_sex := sex_male ;
55988: LD_ADDR_OWVAR 27
55992: PUSH
55993: LD_INT 1
55995: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
55996: LD_ADDR_OWVAR 28
56000: PUSH
56001: LD_INT 15
56003: ST_TO_ADDR
// hc_gallery :=  ;
56004: LD_ADDR_OWVAR 33
56008: PUSH
56009: LD_STRING 
56011: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56012: LD_ADDR_OWVAR 31
56016: PUSH
56017: LD_INT 0
56019: PPUSH
56020: LD_INT 3
56022: PPUSH
56023: CALL_OW 12
56027: PUSH
56028: LD_INT 0
56030: PPUSH
56031: LD_INT 3
56033: PPUSH
56034: CALL_OW 12
56038: PUSH
56039: LD_INT 0
56041: PUSH
56042: LD_INT 0
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: ST_TO_ADDR
// end ;
56051: LD_VAR 0 1
56055: RET
// export function PrepareApemanEngineer ( ) ; begin
56056: LD_INT 0
56058: PPUSH
// uc_nation := 0 ;
56059: LD_ADDR_OWVAR 21
56063: PUSH
56064: LD_INT 0
56066: ST_TO_ADDR
// hc_sex := sex_male ;
56067: LD_ADDR_OWVAR 27
56071: PUSH
56072: LD_INT 1
56074: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
56075: LD_ADDR_OWVAR 28
56079: PUSH
56080: LD_INT 16
56082: ST_TO_ADDR
// hc_gallery :=  ;
56083: LD_ADDR_OWVAR 33
56087: PUSH
56088: LD_STRING 
56090: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56091: LD_ADDR_OWVAR 31
56095: PUSH
56096: LD_INT 0
56098: PPUSH
56099: LD_INT 3
56101: PPUSH
56102: CALL_OW 12
56106: PUSH
56107: LD_INT 0
56109: PPUSH
56110: LD_INT 3
56112: PPUSH
56113: CALL_OW 12
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: ST_TO_ADDR
// end ;
56130: LD_VAR 0 1
56134: RET
// export function PrepareApeman ( agressivity ) ; begin
56135: LD_INT 0
56137: PPUSH
// uc_side := 0 ;
56138: LD_ADDR_OWVAR 20
56142: PUSH
56143: LD_INT 0
56145: ST_TO_ADDR
// uc_nation := 0 ;
56146: LD_ADDR_OWVAR 21
56150: PUSH
56151: LD_INT 0
56153: ST_TO_ADDR
// hc_sex := sex_male ;
56154: LD_ADDR_OWVAR 27
56158: PUSH
56159: LD_INT 1
56161: ST_TO_ADDR
// hc_class := class_apeman ;
56162: LD_ADDR_OWVAR 28
56166: PUSH
56167: LD_INT 12
56169: ST_TO_ADDR
// hc_gallery :=  ;
56170: LD_ADDR_OWVAR 33
56174: PUSH
56175: LD_STRING 
56177: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
56178: LD_ADDR_OWVAR 35
56182: PUSH
56183: LD_VAR 0 1
56187: NEG
56188: PPUSH
56189: LD_VAR 0 1
56193: PPUSH
56194: CALL_OW 12
56198: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56199: LD_ADDR_OWVAR 31
56203: PUSH
56204: LD_INT 0
56206: PPUSH
56207: LD_INT 3
56209: PPUSH
56210: CALL_OW 12
56214: PUSH
56215: LD_INT 0
56217: PPUSH
56218: LD_INT 3
56220: PPUSH
56221: CALL_OW 12
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: LD_INT 0
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: ST_TO_ADDR
// end ;
56238: LD_VAR 0 2
56242: RET
// export function PrepareTiger ( agressivity ) ; begin
56243: LD_INT 0
56245: PPUSH
// uc_side := 0 ;
56246: LD_ADDR_OWVAR 20
56250: PUSH
56251: LD_INT 0
56253: ST_TO_ADDR
// uc_nation := 0 ;
56254: LD_ADDR_OWVAR 21
56258: PUSH
56259: LD_INT 0
56261: ST_TO_ADDR
// hc_class := class_tiger ;
56262: LD_ADDR_OWVAR 28
56266: PUSH
56267: LD_INT 14
56269: ST_TO_ADDR
// hc_gallery :=  ;
56270: LD_ADDR_OWVAR 33
56274: PUSH
56275: LD_STRING 
56277: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
56278: LD_ADDR_OWVAR 35
56282: PUSH
56283: LD_VAR 0 1
56287: NEG
56288: PPUSH
56289: LD_VAR 0 1
56293: PPUSH
56294: CALL_OW 12
56298: ST_TO_ADDR
// end ;
56299: LD_VAR 0 2
56303: RET
// export function PrepareEnchidna ( ) ; begin
56304: LD_INT 0
56306: PPUSH
// uc_side := 0 ;
56307: LD_ADDR_OWVAR 20
56311: PUSH
56312: LD_INT 0
56314: ST_TO_ADDR
// uc_nation := 0 ;
56315: LD_ADDR_OWVAR 21
56319: PUSH
56320: LD_INT 0
56322: ST_TO_ADDR
// hc_class := class_baggie ;
56323: LD_ADDR_OWVAR 28
56327: PUSH
56328: LD_INT 13
56330: ST_TO_ADDR
// hc_gallery :=  ;
56331: LD_ADDR_OWVAR 33
56335: PUSH
56336: LD_STRING 
56338: ST_TO_ADDR
// end ;
56339: LD_VAR 0 1
56343: RET
// export function PrepareFrog ( ) ; begin
56344: LD_INT 0
56346: PPUSH
// uc_side := 0 ;
56347: LD_ADDR_OWVAR 20
56351: PUSH
56352: LD_INT 0
56354: ST_TO_ADDR
// uc_nation := 0 ;
56355: LD_ADDR_OWVAR 21
56359: PUSH
56360: LD_INT 0
56362: ST_TO_ADDR
// hc_class := class_frog ;
56363: LD_ADDR_OWVAR 28
56367: PUSH
56368: LD_INT 19
56370: ST_TO_ADDR
// hc_gallery :=  ;
56371: LD_ADDR_OWVAR 33
56375: PUSH
56376: LD_STRING 
56378: ST_TO_ADDR
// end ;
56379: LD_VAR 0 1
56383: RET
// export function PrepareFish ( ) ; begin
56384: LD_INT 0
56386: PPUSH
// uc_side := 0 ;
56387: LD_ADDR_OWVAR 20
56391: PUSH
56392: LD_INT 0
56394: ST_TO_ADDR
// uc_nation := 0 ;
56395: LD_ADDR_OWVAR 21
56399: PUSH
56400: LD_INT 0
56402: ST_TO_ADDR
// hc_class := class_fish ;
56403: LD_ADDR_OWVAR 28
56407: PUSH
56408: LD_INT 20
56410: ST_TO_ADDR
// hc_gallery :=  ;
56411: LD_ADDR_OWVAR 33
56415: PUSH
56416: LD_STRING 
56418: ST_TO_ADDR
// end ;
56419: LD_VAR 0 1
56423: RET
// export function PrepareBird ( ) ; begin
56424: LD_INT 0
56426: PPUSH
// uc_side := 0 ;
56427: LD_ADDR_OWVAR 20
56431: PUSH
56432: LD_INT 0
56434: ST_TO_ADDR
// uc_nation := 0 ;
56435: LD_ADDR_OWVAR 21
56439: PUSH
56440: LD_INT 0
56442: ST_TO_ADDR
// hc_class := class_phororhacos ;
56443: LD_ADDR_OWVAR 28
56447: PUSH
56448: LD_INT 18
56450: ST_TO_ADDR
// hc_gallery :=  ;
56451: LD_ADDR_OWVAR 33
56455: PUSH
56456: LD_STRING 
56458: ST_TO_ADDR
// end ;
56459: LD_VAR 0 1
56463: RET
// export function PrepareHorse ( ) ; begin
56464: LD_INT 0
56466: PPUSH
// uc_side := 0 ;
56467: LD_ADDR_OWVAR 20
56471: PUSH
56472: LD_INT 0
56474: ST_TO_ADDR
// uc_nation := 0 ;
56475: LD_ADDR_OWVAR 21
56479: PUSH
56480: LD_INT 0
56482: ST_TO_ADDR
// hc_class := class_horse ;
56483: LD_ADDR_OWVAR 28
56487: PUSH
56488: LD_INT 21
56490: ST_TO_ADDR
// hc_gallery :=  ;
56491: LD_ADDR_OWVAR 33
56495: PUSH
56496: LD_STRING 
56498: ST_TO_ADDR
// end ;
56499: LD_VAR 0 1
56503: RET
// export function PrepareMastodont ( ) ; begin
56504: LD_INT 0
56506: PPUSH
// uc_side := 0 ;
56507: LD_ADDR_OWVAR 20
56511: PUSH
56512: LD_INT 0
56514: ST_TO_ADDR
// uc_nation := 0 ;
56515: LD_ADDR_OWVAR 21
56519: PUSH
56520: LD_INT 0
56522: ST_TO_ADDR
// vc_chassis := class_mastodont ;
56523: LD_ADDR_OWVAR 37
56527: PUSH
56528: LD_INT 31
56530: ST_TO_ADDR
// vc_control := control_rider ;
56531: LD_ADDR_OWVAR 38
56535: PUSH
56536: LD_INT 4
56538: ST_TO_ADDR
// end ;
56539: LD_VAR 0 1
56543: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56544: LD_INT 0
56546: PPUSH
56547: PPUSH
56548: PPUSH
// uc_side = 0 ;
56549: LD_ADDR_OWVAR 20
56553: PUSH
56554: LD_INT 0
56556: ST_TO_ADDR
// uc_nation = 0 ;
56557: LD_ADDR_OWVAR 21
56561: PUSH
56562: LD_INT 0
56564: ST_TO_ADDR
// InitHc_All ( ) ;
56565: CALL_OW 584
// InitVc ;
56569: CALL_OW 20
// if mastodonts then
56573: LD_VAR 0 6
56577: IFFALSE 56644
// for i = 1 to mastodonts do
56579: LD_ADDR_VAR 0 11
56583: PUSH
56584: DOUBLE
56585: LD_INT 1
56587: DEC
56588: ST_TO_ADDR
56589: LD_VAR 0 6
56593: PUSH
56594: FOR_TO
56595: IFFALSE 56642
// begin vc_chassis := 31 ;
56597: LD_ADDR_OWVAR 37
56601: PUSH
56602: LD_INT 31
56604: ST_TO_ADDR
// vc_control := control_rider ;
56605: LD_ADDR_OWVAR 38
56609: PUSH
56610: LD_INT 4
56612: ST_TO_ADDR
// animal := CreateVehicle ;
56613: LD_ADDR_VAR 0 12
56617: PUSH
56618: CALL_OW 45
56622: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56623: LD_VAR 0 12
56627: PPUSH
56628: LD_VAR 0 8
56632: PPUSH
56633: LD_INT 0
56635: PPUSH
56636: CALL 58772 0 3
// end ;
56640: GO 56594
56642: POP
56643: POP
// if horses then
56644: LD_VAR 0 5
56648: IFFALSE 56715
// for i = 1 to horses do
56650: LD_ADDR_VAR 0 11
56654: PUSH
56655: DOUBLE
56656: LD_INT 1
56658: DEC
56659: ST_TO_ADDR
56660: LD_VAR 0 5
56664: PUSH
56665: FOR_TO
56666: IFFALSE 56713
// begin hc_class := 21 ;
56668: LD_ADDR_OWVAR 28
56672: PUSH
56673: LD_INT 21
56675: ST_TO_ADDR
// hc_gallery :=  ;
56676: LD_ADDR_OWVAR 33
56680: PUSH
56681: LD_STRING 
56683: ST_TO_ADDR
// animal := CreateHuman ;
56684: LD_ADDR_VAR 0 12
56688: PUSH
56689: CALL_OW 44
56693: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56694: LD_VAR 0 12
56698: PPUSH
56699: LD_VAR 0 8
56703: PPUSH
56704: LD_INT 0
56706: PPUSH
56707: CALL 58772 0 3
// end ;
56711: GO 56665
56713: POP
56714: POP
// if birds then
56715: LD_VAR 0 1
56719: IFFALSE 56786
// for i = 1 to birds do
56721: LD_ADDR_VAR 0 11
56725: PUSH
56726: DOUBLE
56727: LD_INT 1
56729: DEC
56730: ST_TO_ADDR
56731: LD_VAR 0 1
56735: PUSH
56736: FOR_TO
56737: IFFALSE 56784
// begin hc_class := 18 ;
56739: LD_ADDR_OWVAR 28
56743: PUSH
56744: LD_INT 18
56746: ST_TO_ADDR
// hc_gallery =  ;
56747: LD_ADDR_OWVAR 33
56751: PUSH
56752: LD_STRING 
56754: ST_TO_ADDR
// animal := CreateHuman ;
56755: LD_ADDR_VAR 0 12
56759: PUSH
56760: CALL_OW 44
56764: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56765: LD_VAR 0 12
56769: PPUSH
56770: LD_VAR 0 8
56774: PPUSH
56775: LD_INT 0
56777: PPUSH
56778: CALL 58772 0 3
// end ;
56782: GO 56736
56784: POP
56785: POP
// if tigers then
56786: LD_VAR 0 2
56790: IFFALSE 56874
// for i = 1 to tigers do
56792: LD_ADDR_VAR 0 11
56796: PUSH
56797: DOUBLE
56798: LD_INT 1
56800: DEC
56801: ST_TO_ADDR
56802: LD_VAR 0 2
56806: PUSH
56807: FOR_TO
56808: IFFALSE 56872
// begin hc_class = class_tiger ;
56810: LD_ADDR_OWVAR 28
56814: PUSH
56815: LD_INT 14
56817: ST_TO_ADDR
// hc_gallery =  ;
56818: LD_ADDR_OWVAR 33
56822: PUSH
56823: LD_STRING 
56825: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56826: LD_ADDR_OWVAR 35
56830: PUSH
56831: LD_INT 7
56833: NEG
56834: PPUSH
56835: LD_INT 7
56837: PPUSH
56838: CALL_OW 12
56842: ST_TO_ADDR
// animal := CreateHuman ;
56843: LD_ADDR_VAR 0 12
56847: PUSH
56848: CALL_OW 44
56852: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56853: LD_VAR 0 12
56857: PPUSH
56858: LD_VAR 0 8
56862: PPUSH
56863: LD_INT 0
56865: PPUSH
56866: CALL 58772 0 3
// end ;
56870: GO 56807
56872: POP
56873: POP
// if apemans then
56874: LD_VAR 0 3
56878: IFFALSE 57001
// for i = 1 to apemans do
56880: LD_ADDR_VAR 0 11
56884: PUSH
56885: DOUBLE
56886: LD_INT 1
56888: DEC
56889: ST_TO_ADDR
56890: LD_VAR 0 3
56894: PUSH
56895: FOR_TO
56896: IFFALSE 56999
// begin hc_class = class_apeman ;
56898: LD_ADDR_OWVAR 28
56902: PUSH
56903: LD_INT 12
56905: ST_TO_ADDR
// hc_gallery =  ;
56906: LD_ADDR_OWVAR 33
56910: PUSH
56911: LD_STRING 
56913: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56914: LD_ADDR_OWVAR 35
56918: PUSH
56919: LD_INT 2
56921: NEG
56922: PPUSH
56923: LD_INT 2
56925: PPUSH
56926: CALL_OW 12
56930: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56931: LD_ADDR_OWVAR 31
56935: PUSH
56936: LD_INT 1
56938: PPUSH
56939: LD_INT 3
56941: PPUSH
56942: CALL_OW 12
56946: PUSH
56947: LD_INT 1
56949: PPUSH
56950: LD_INT 3
56952: PPUSH
56953: CALL_OW 12
56957: PUSH
56958: LD_INT 0
56960: PUSH
56961: LD_INT 0
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: ST_TO_ADDR
// animal := CreateHuman ;
56970: LD_ADDR_VAR 0 12
56974: PUSH
56975: CALL_OW 44
56979: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56980: LD_VAR 0 12
56984: PPUSH
56985: LD_VAR 0 8
56989: PPUSH
56990: LD_INT 0
56992: PPUSH
56993: CALL 58772 0 3
// end ;
56997: GO 56895
56999: POP
57000: POP
// if enchidnas then
57001: LD_VAR 0 4
57005: IFFALSE 57072
// for i = 1 to enchidnas do
57007: LD_ADDR_VAR 0 11
57011: PUSH
57012: DOUBLE
57013: LD_INT 1
57015: DEC
57016: ST_TO_ADDR
57017: LD_VAR 0 4
57021: PUSH
57022: FOR_TO
57023: IFFALSE 57070
// begin hc_class = 13 ;
57025: LD_ADDR_OWVAR 28
57029: PUSH
57030: LD_INT 13
57032: ST_TO_ADDR
// hc_gallery =  ;
57033: LD_ADDR_OWVAR 33
57037: PUSH
57038: LD_STRING 
57040: ST_TO_ADDR
// animal := CreateHuman ;
57041: LD_ADDR_VAR 0 12
57045: PUSH
57046: CALL_OW 44
57050: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57051: LD_VAR 0 12
57055: PPUSH
57056: LD_VAR 0 8
57060: PPUSH
57061: LD_INT 0
57063: PPUSH
57064: CALL 58772 0 3
// end ;
57068: GO 57022
57070: POP
57071: POP
// if fishes then
57072: LD_VAR 0 7
57076: IFFALSE 57143
// for i = 1 to fishes do
57078: LD_ADDR_VAR 0 11
57082: PUSH
57083: DOUBLE
57084: LD_INT 1
57086: DEC
57087: ST_TO_ADDR
57088: LD_VAR 0 7
57092: PUSH
57093: FOR_TO
57094: IFFALSE 57141
// begin hc_class = 20 ;
57096: LD_ADDR_OWVAR 28
57100: PUSH
57101: LD_INT 20
57103: ST_TO_ADDR
// hc_gallery =  ;
57104: LD_ADDR_OWVAR 33
57108: PUSH
57109: LD_STRING 
57111: ST_TO_ADDR
// animal := CreateHuman ;
57112: LD_ADDR_VAR 0 12
57116: PUSH
57117: CALL_OW 44
57121: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57122: LD_VAR 0 12
57126: PPUSH
57127: LD_VAR 0 9
57131: PPUSH
57132: LD_INT 0
57134: PPUSH
57135: CALL 58772 0 3
// end ;
57139: GO 57093
57141: POP
57142: POP
// end ;
57143: LD_VAR 0 10
57147: RET
// export function WantHeal ( sci , unit ) ; begin
57148: LD_INT 0
57150: PPUSH
// if GetTaskList ( sci ) > 0 then
57151: LD_VAR 0 1
57155: PPUSH
57156: CALL_OW 437
57160: PUSH
57161: LD_INT 0
57163: GREATER
57164: IFFALSE 57234
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57166: LD_VAR 0 1
57170: PPUSH
57171: CALL_OW 437
57175: PUSH
57176: LD_INT 1
57178: ARRAY
57179: PUSH
57180: LD_INT 1
57182: ARRAY
57183: PUSH
57184: LD_STRING l
57186: EQUAL
57187: PUSH
57188: LD_VAR 0 1
57192: PPUSH
57193: CALL_OW 437
57197: PUSH
57198: LD_INT 1
57200: ARRAY
57201: PUSH
57202: LD_INT 4
57204: ARRAY
57205: PUSH
57206: LD_VAR 0 2
57210: EQUAL
57211: AND
57212: IFFALSE 57224
// result := true else
57214: LD_ADDR_VAR 0 3
57218: PUSH
57219: LD_INT 1
57221: ST_TO_ADDR
57222: GO 57232
// result := false ;
57224: LD_ADDR_VAR 0 3
57228: PUSH
57229: LD_INT 0
57231: ST_TO_ADDR
// end else
57232: GO 57242
// result := false ;
57234: LD_ADDR_VAR 0 3
57238: PUSH
57239: LD_INT 0
57241: ST_TO_ADDR
// end ;
57242: LD_VAR 0 3
57246: RET
// export function HealTarget ( sci ) ; begin
57247: LD_INT 0
57249: PPUSH
// if not sci then
57250: LD_VAR 0 1
57254: NOT
57255: IFFALSE 57259
// exit ;
57257: GO 57324
// result := 0 ;
57259: LD_ADDR_VAR 0 2
57263: PUSH
57264: LD_INT 0
57266: ST_TO_ADDR
// if GetTaskList ( sci ) then
57267: LD_VAR 0 1
57271: PPUSH
57272: CALL_OW 437
57276: IFFALSE 57324
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57278: LD_VAR 0 1
57282: PPUSH
57283: CALL_OW 437
57287: PUSH
57288: LD_INT 1
57290: ARRAY
57291: PUSH
57292: LD_INT 1
57294: ARRAY
57295: PUSH
57296: LD_STRING l
57298: EQUAL
57299: IFFALSE 57324
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57301: LD_ADDR_VAR 0 2
57305: PUSH
57306: LD_VAR 0 1
57310: PPUSH
57311: CALL_OW 437
57315: PUSH
57316: LD_INT 1
57318: ARRAY
57319: PUSH
57320: LD_INT 4
57322: ARRAY
57323: ST_TO_ADDR
// end ;
57324: LD_VAR 0 2
57328: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57329: LD_INT 0
57331: PPUSH
57332: PPUSH
57333: PPUSH
57334: PPUSH
// if not base_units then
57335: LD_VAR 0 1
57339: NOT
57340: IFFALSE 57344
// exit ;
57342: GO 57431
// result := false ;
57344: LD_ADDR_VAR 0 2
57348: PUSH
57349: LD_INT 0
57351: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57352: LD_ADDR_VAR 0 5
57356: PUSH
57357: LD_VAR 0 1
57361: PPUSH
57362: LD_INT 21
57364: PUSH
57365: LD_INT 3
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PPUSH
57372: CALL_OW 72
57376: ST_TO_ADDR
// if not tmp then
57377: LD_VAR 0 5
57381: NOT
57382: IFFALSE 57386
// exit ;
57384: GO 57431
// for i in tmp do
57386: LD_ADDR_VAR 0 3
57390: PUSH
57391: LD_VAR 0 5
57395: PUSH
57396: FOR_IN
57397: IFFALSE 57429
// begin result := EnemyInRange ( i , 22 ) ;
57399: LD_ADDR_VAR 0 2
57403: PUSH
57404: LD_VAR 0 3
57408: PPUSH
57409: LD_INT 22
57411: PPUSH
57412: CALL 55018 0 2
57416: ST_TO_ADDR
// if result then
57417: LD_VAR 0 2
57421: IFFALSE 57427
// exit ;
57423: POP
57424: POP
57425: GO 57431
// end ;
57427: GO 57396
57429: POP
57430: POP
// end ;
57431: LD_VAR 0 2
57435: RET
// export function FilterByTag ( units , tag ) ; begin
57436: LD_INT 0
57438: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
57439: LD_ADDR_VAR 0 3
57443: PUSH
57444: LD_VAR 0 1
57448: PPUSH
57449: LD_INT 120
57451: PUSH
57452: LD_VAR 0 2
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PPUSH
57461: CALL_OW 72
57465: ST_TO_ADDR
// end ;
57466: LD_VAR 0 3
57470: RET
// export function IsDriver ( un ) ; begin
57471: LD_INT 0
57473: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57474: LD_ADDR_VAR 0 2
57478: PUSH
57479: LD_VAR 0 1
57483: PUSH
57484: LD_INT 55
57486: PUSH
57487: EMPTY
57488: LIST
57489: PPUSH
57490: CALL_OW 69
57494: IN
57495: ST_TO_ADDR
// end ;
57496: LD_VAR 0 2
57500: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57501: LD_INT 0
57503: PPUSH
57504: PPUSH
// list := [ ] ;
57505: LD_ADDR_VAR 0 5
57509: PUSH
57510: EMPTY
57511: ST_TO_ADDR
// case d of 0 :
57512: LD_VAR 0 3
57516: PUSH
57517: LD_INT 0
57519: DOUBLE
57520: EQUAL
57521: IFTRUE 57525
57523: GO 57658
57525: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57526: LD_ADDR_VAR 0 5
57530: PUSH
57531: LD_VAR 0 1
57535: PUSH
57536: LD_INT 4
57538: MINUS
57539: PUSH
57540: LD_VAR 0 2
57544: PUSH
57545: LD_INT 4
57547: MINUS
57548: PUSH
57549: LD_INT 2
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: LIST
57556: PUSH
57557: LD_VAR 0 1
57561: PUSH
57562: LD_INT 3
57564: MINUS
57565: PUSH
57566: LD_VAR 0 2
57570: PUSH
57571: LD_INT 1
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: LIST
57578: PUSH
57579: LD_VAR 0 1
57583: PUSH
57584: LD_INT 4
57586: PLUS
57587: PUSH
57588: LD_VAR 0 2
57592: PUSH
57593: LD_INT 4
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: LIST
57600: PUSH
57601: LD_VAR 0 1
57605: PUSH
57606: LD_INT 3
57608: PLUS
57609: PUSH
57610: LD_VAR 0 2
57614: PUSH
57615: LD_INT 3
57617: PLUS
57618: PUSH
57619: LD_INT 5
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: LIST
57626: PUSH
57627: LD_VAR 0 1
57631: PUSH
57632: LD_VAR 0 2
57636: PUSH
57637: LD_INT 4
57639: PLUS
57640: PUSH
57641: LD_INT 0
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: LIST
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: ST_TO_ADDR
// end ; 1 :
57656: GO 58356
57658: LD_INT 1
57660: DOUBLE
57661: EQUAL
57662: IFTRUE 57666
57664: GO 57799
57666: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57667: LD_ADDR_VAR 0 5
57671: PUSH
57672: LD_VAR 0 1
57676: PUSH
57677: LD_VAR 0 2
57681: PUSH
57682: LD_INT 4
57684: MINUS
57685: PUSH
57686: LD_INT 3
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: LIST
57693: PUSH
57694: LD_VAR 0 1
57698: PUSH
57699: LD_INT 3
57701: MINUS
57702: PUSH
57703: LD_VAR 0 2
57707: PUSH
57708: LD_INT 3
57710: MINUS
57711: PUSH
57712: LD_INT 2
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: LIST
57719: PUSH
57720: LD_VAR 0 1
57724: PUSH
57725: LD_INT 4
57727: MINUS
57728: PUSH
57729: LD_VAR 0 2
57733: PUSH
57734: LD_INT 1
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: LIST
57741: PUSH
57742: LD_VAR 0 1
57746: PUSH
57747: LD_VAR 0 2
57751: PUSH
57752: LD_INT 3
57754: PLUS
57755: PUSH
57756: LD_INT 0
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: LIST
57763: PUSH
57764: LD_VAR 0 1
57768: PUSH
57769: LD_INT 4
57771: PLUS
57772: PUSH
57773: LD_VAR 0 2
57777: PUSH
57778: LD_INT 4
57780: PLUS
57781: PUSH
57782: LD_INT 5
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: LIST
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: ST_TO_ADDR
// end ; 2 :
57797: GO 58356
57799: LD_INT 2
57801: DOUBLE
57802: EQUAL
57803: IFTRUE 57807
57805: GO 57936
57807: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57808: LD_ADDR_VAR 0 5
57812: PUSH
57813: LD_VAR 0 1
57817: PUSH
57818: LD_VAR 0 2
57822: PUSH
57823: LD_INT 3
57825: MINUS
57826: PUSH
57827: LD_INT 3
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: LIST
57834: PUSH
57835: LD_VAR 0 1
57839: PUSH
57840: LD_INT 4
57842: PLUS
57843: PUSH
57844: LD_VAR 0 2
57848: PUSH
57849: LD_INT 4
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: LIST
57856: PUSH
57857: LD_VAR 0 1
57861: PUSH
57862: LD_VAR 0 2
57866: PUSH
57867: LD_INT 4
57869: PLUS
57870: PUSH
57871: LD_INT 0
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: LIST
57878: PUSH
57879: LD_VAR 0 1
57883: PUSH
57884: LD_INT 3
57886: MINUS
57887: PUSH
57888: LD_VAR 0 2
57892: PUSH
57893: LD_INT 1
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: LIST
57900: PUSH
57901: LD_VAR 0 1
57905: PUSH
57906: LD_INT 4
57908: MINUS
57909: PUSH
57910: LD_VAR 0 2
57914: PUSH
57915: LD_INT 4
57917: MINUS
57918: PUSH
57919: LD_INT 2
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: LIST
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: ST_TO_ADDR
// end ; 3 :
57934: GO 58356
57936: LD_INT 3
57938: DOUBLE
57939: EQUAL
57940: IFTRUE 57944
57942: GO 58077
57944: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57945: LD_ADDR_VAR 0 5
57949: PUSH
57950: LD_VAR 0 1
57954: PUSH
57955: LD_INT 3
57957: PLUS
57958: PUSH
57959: LD_VAR 0 2
57963: PUSH
57964: LD_INT 4
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: LIST
57971: PUSH
57972: LD_VAR 0 1
57976: PUSH
57977: LD_INT 4
57979: PLUS
57980: PUSH
57981: LD_VAR 0 2
57985: PUSH
57986: LD_INT 4
57988: PLUS
57989: PUSH
57990: LD_INT 5
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: LIST
57997: PUSH
57998: LD_VAR 0 1
58002: PUSH
58003: LD_INT 4
58005: MINUS
58006: PUSH
58007: LD_VAR 0 2
58011: PUSH
58012: LD_INT 1
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: LIST
58019: PUSH
58020: LD_VAR 0 1
58024: PUSH
58025: LD_VAR 0 2
58029: PUSH
58030: LD_INT 4
58032: MINUS
58033: PUSH
58034: LD_INT 3
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: LIST
58041: PUSH
58042: LD_VAR 0 1
58046: PUSH
58047: LD_INT 3
58049: MINUS
58050: PUSH
58051: LD_VAR 0 2
58055: PUSH
58056: LD_INT 3
58058: MINUS
58059: PUSH
58060: LD_INT 2
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: LIST
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: ST_TO_ADDR
// end ; 4 :
58075: GO 58356
58077: LD_INT 4
58079: DOUBLE
58080: EQUAL
58081: IFTRUE 58085
58083: GO 58218
58085: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58086: LD_ADDR_VAR 0 5
58090: PUSH
58091: LD_VAR 0 1
58095: PUSH
58096: LD_VAR 0 2
58100: PUSH
58101: LD_INT 4
58103: PLUS
58104: PUSH
58105: LD_INT 0
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: LIST
58112: PUSH
58113: LD_VAR 0 1
58117: PUSH
58118: LD_INT 3
58120: PLUS
58121: PUSH
58122: LD_VAR 0 2
58126: PUSH
58127: LD_INT 3
58129: PLUS
58130: PUSH
58131: LD_INT 5
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: LIST
58138: PUSH
58139: LD_VAR 0 1
58143: PUSH
58144: LD_INT 4
58146: PLUS
58147: PUSH
58148: LD_VAR 0 2
58152: PUSH
58153: LD_INT 4
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: LIST
58160: PUSH
58161: LD_VAR 0 1
58165: PUSH
58166: LD_VAR 0 2
58170: PUSH
58171: LD_INT 3
58173: MINUS
58174: PUSH
58175: LD_INT 3
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: LIST
58182: PUSH
58183: LD_VAR 0 1
58187: PUSH
58188: LD_INT 4
58190: MINUS
58191: PUSH
58192: LD_VAR 0 2
58196: PUSH
58197: LD_INT 4
58199: MINUS
58200: PUSH
58201: LD_INT 2
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: LIST
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: ST_TO_ADDR
// end ; 5 :
58216: GO 58356
58218: LD_INT 5
58220: DOUBLE
58221: EQUAL
58222: IFTRUE 58226
58224: GO 58355
58226: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58227: LD_ADDR_VAR 0 5
58231: PUSH
58232: LD_VAR 0 1
58236: PUSH
58237: LD_INT 4
58239: MINUS
58240: PUSH
58241: LD_VAR 0 2
58245: PUSH
58246: LD_INT 1
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: LIST
58253: PUSH
58254: LD_VAR 0 1
58258: PUSH
58259: LD_VAR 0 2
58263: PUSH
58264: LD_INT 4
58266: MINUS
58267: PUSH
58268: LD_INT 3
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: LIST
58275: PUSH
58276: LD_VAR 0 1
58280: PUSH
58281: LD_INT 4
58283: PLUS
58284: PUSH
58285: LD_VAR 0 2
58289: PUSH
58290: LD_INT 4
58292: PLUS
58293: PUSH
58294: LD_INT 5
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: LIST
58301: PUSH
58302: LD_VAR 0 1
58306: PUSH
58307: LD_INT 3
58309: PLUS
58310: PUSH
58311: LD_VAR 0 2
58315: PUSH
58316: LD_INT 4
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: LIST
58323: PUSH
58324: LD_VAR 0 1
58328: PUSH
58329: LD_VAR 0 2
58333: PUSH
58334: LD_INT 3
58336: PLUS
58337: PUSH
58338: LD_INT 0
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: LIST
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: ST_TO_ADDR
// end ; end ;
58353: GO 58356
58355: POP
// result := list ;
58356: LD_ADDR_VAR 0 4
58360: PUSH
58361: LD_VAR 0 5
58365: ST_TO_ADDR
// end ;
58366: LD_VAR 0 4
58370: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58371: LD_INT 0
58373: PPUSH
58374: PPUSH
58375: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58376: LD_VAR 0 1
58380: NOT
58381: PUSH
58382: LD_VAR 0 2
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: LD_INT 2
58392: PUSH
58393: LD_INT 3
58395: PUSH
58396: LD_INT 4
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: IN
58405: NOT
58406: OR
58407: IFFALSE 58411
// exit ;
58409: GO 58494
// tmp := [ ] ;
58411: LD_ADDR_VAR 0 5
58415: PUSH
58416: EMPTY
58417: ST_TO_ADDR
// for i in units do
58418: LD_ADDR_VAR 0 4
58422: PUSH
58423: LD_VAR 0 1
58427: PUSH
58428: FOR_IN
58429: IFFALSE 58463
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
58431: LD_ADDR_VAR 0 5
58435: PUSH
58436: LD_VAR 0 5
58440: PPUSH
58441: LD_VAR 0 4
58445: PPUSH
58446: LD_VAR 0 2
58450: PPUSH
58451: CALL_OW 259
58455: PPUSH
58456: CALL 59854 0 2
58460: ST_TO_ADDR
58461: GO 58428
58463: POP
58464: POP
// if not tmp then
58465: LD_VAR 0 5
58469: NOT
58470: IFFALSE 58474
// exit ;
58472: GO 58494
// result := SortListByListDesc ( units , tmp ) ;
58474: LD_ADDR_VAR 0 3
58478: PUSH
58479: LD_VAR 0 1
58483: PPUSH
58484: LD_VAR 0 5
58488: PPUSH
58489: CALL_OW 77
58493: ST_TO_ADDR
// end ;
58494: LD_VAR 0 3
58498: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58499: LD_INT 0
58501: PPUSH
58502: PPUSH
58503: PPUSH
// result := false ;
58504: LD_ADDR_VAR 0 3
58508: PUSH
58509: LD_INT 0
58511: ST_TO_ADDR
// if not building then
58512: LD_VAR 0 2
58516: NOT
58517: IFFALSE 58521
// exit ;
58519: GO 58659
// x := GetX ( building ) ;
58521: LD_ADDR_VAR 0 4
58525: PUSH
58526: LD_VAR 0 2
58530: PPUSH
58531: CALL_OW 250
58535: ST_TO_ADDR
// y := GetY ( building ) ;
58536: LD_ADDR_VAR 0 5
58540: PUSH
58541: LD_VAR 0 2
58545: PPUSH
58546: CALL_OW 251
58550: ST_TO_ADDR
// if not x or not y then
58551: LD_VAR 0 4
58555: NOT
58556: PUSH
58557: LD_VAR 0 5
58561: NOT
58562: OR
58563: IFFALSE 58567
// exit ;
58565: GO 58659
// if GetTaskList ( unit ) then
58567: LD_VAR 0 1
58571: PPUSH
58572: CALL_OW 437
58576: IFFALSE 58659
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58578: LD_STRING e
58580: PUSH
58581: LD_VAR 0 1
58585: PPUSH
58586: CALL_OW 437
58590: PUSH
58591: LD_INT 1
58593: ARRAY
58594: PUSH
58595: LD_INT 1
58597: ARRAY
58598: EQUAL
58599: PUSH
58600: LD_VAR 0 4
58604: PUSH
58605: LD_VAR 0 1
58609: PPUSH
58610: CALL_OW 437
58614: PUSH
58615: LD_INT 1
58617: ARRAY
58618: PUSH
58619: LD_INT 2
58621: ARRAY
58622: EQUAL
58623: AND
58624: PUSH
58625: LD_VAR 0 5
58629: PUSH
58630: LD_VAR 0 1
58634: PPUSH
58635: CALL_OW 437
58639: PUSH
58640: LD_INT 1
58642: ARRAY
58643: PUSH
58644: LD_INT 3
58646: ARRAY
58647: EQUAL
58648: AND
58649: IFFALSE 58659
// result := true end ;
58651: LD_ADDR_VAR 0 3
58655: PUSH
58656: LD_INT 1
58658: ST_TO_ADDR
// end ;
58659: LD_VAR 0 3
58663: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58664: LD_INT 0
58666: PPUSH
// result := false ;
58667: LD_ADDR_VAR 0 4
58671: PUSH
58672: LD_INT 0
58674: ST_TO_ADDR
// if GetTaskList ( unit ) then
58675: LD_VAR 0 1
58679: PPUSH
58680: CALL_OW 437
58684: IFFALSE 58767
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58686: LD_STRING M
58688: PUSH
58689: LD_VAR 0 1
58693: PPUSH
58694: CALL_OW 437
58698: PUSH
58699: LD_INT 1
58701: ARRAY
58702: PUSH
58703: LD_INT 1
58705: ARRAY
58706: EQUAL
58707: PUSH
58708: LD_VAR 0 2
58712: PUSH
58713: LD_VAR 0 1
58717: PPUSH
58718: CALL_OW 437
58722: PUSH
58723: LD_INT 1
58725: ARRAY
58726: PUSH
58727: LD_INT 2
58729: ARRAY
58730: EQUAL
58731: AND
58732: PUSH
58733: LD_VAR 0 3
58737: PUSH
58738: LD_VAR 0 1
58742: PPUSH
58743: CALL_OW 437
58747: PUSH
58748: LD_INT 1
58750: ARRAY
58751: PUSH
58752: LD_INT 3
58754: ARRAY
58755: EQUAL
58756: AND
58757: IFFALSE 58767
// result := true ;
58759: LD_ADDR_VAR 0 4
58763: PUSH
58764: LD_INT 1
58766: ST_TO_ADDR
// end ; end ;
58767: LD_VAR 0 4
58771: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58772: LD_INT 0
58774: PPUSH
58775: PPUSH
58776: PPUSH
58777: PPUSH
// if not unit or not area then
58778: LD_VAR 0 1
58782: NOT
58783: PUSH
58784: LD_VAR 0 2
58788: NOT
58789: OR
58790: IFFALSE 58794
// exit ;
58792: GO 58957
// tmp := AreaToList ( area , i ) ;
58794: LD_ADDR_VAR 0 6
58798: PUSH
58799: LD_VAR 0 2
58803: PPUSH
58804: LD_VAR 0 5
58808: PPUSH
58809: CALL_OW 517
58813: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58814: LD_ADDR_VAR 0 5
58818: PUSH
58819: DOUBLE
58820: LD_INT 1
58822: DEC
58823: ST_TO_ADDR
58824: LD_VAR 0 6
58828: PUSH
58829: LD_INT 1
58831: ARRAY
58832: PUSH
58833: FOR_TO
58834: IFFALSE 58955
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58836: LD_ADDR_VAR 0 7
58840: PUSH
58841: LD_VAR 0 6
58845: PUSH
58846: LD_INT 1
58848: ARRAY
58849: PUSH
58850: LD_VAR 0 5
58854: ARRAY
58855: PUSH
58856: LD_VAR 0 6
58860: PUSH
58861: LD_INT 2
58863: ARRAY
58864: PUSH
58865: LD_VAR 0 5
58869: ARRAY
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
58875: LD_INT 92
58877: PUSH
58878: LD_VAR 0 7
58882: PUSH
58883: LD_INT 1
58885: ARRAY
58886: PUSH
58887: LD_VAR 0 7
58891: PUSH
58892: LD_INT 2
58894: ARRAY
58895: PUSH
58896: LD_INT 3
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: PPUSH
58905: CALL_OW 69
58909: PUSH
58910: LD_INT 0
58912: EQUAL
58913: IFFALSE 58953
// begin PlaceUnitArea ( unit , area , mode ) ;
58915: LD_VAR 0 1
58919: PPUSH
58920: LD_VAR 0 2
58924: PPUSH
58925: LD_VAR 0 3
58929: PPUSH
58930: CALL_OW 49
// result := IsPlaced ( unit ) ;
58934: LD_ADDR_VAR 0 4
58938: PUSH
58939: LD_VAR 0 1
58943: PPUSH
58944: CALL_OW 305
58948: ST_TO_ADDR
// exit ;
58949: POP
58950: POP
58951: GO 58957
// end ; end ;
58953: GO 58833
58955: POP
58956: POP
// end ;
58957: LD_VAR 0 4
58961: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58962: LD_INT 0
58964: PPUSH
58965: PPUSH
58966: PPUSH
// if not side or side > 8 then
58967: LD_VAR 0 1
58971: NOT
58972: PUSH
58973: LD_VAR 0 1
58977: PUSH
58978: LD_INT 8
58980: GREATER
58981: OR
58982: IFFALSE 58986
// exit ;
58984: GO 59173
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58986: LD_ADDR_VAR 0 4
58990: PUSH
58991: LD_INT 22
58993: PUSH
58994: LD_VAR 0 1
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 21
59005: PUSH
59006: LD_INT 3
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PPUSH
59017: CALL_OW 69
59021: ST_TO_ADDR
// if not tmp then
59022: LD_VAR 0 4
59026: NOT
59027: IFFALSE 59031
// exit ;
59029: GO 59173
// enable_addtolog := true ;
59031: LD_ADDR_OWVAR 81
59035: PUSH
59036: LD_INT 1
59038: ST_TO_ADDR
// AddToLog ( [ ) ;
59039: LD_STRING [
59041: PPUSH
59042: CALL_OW 561
// for i in tmp do
59046: LD_ADDR_VAR 0 3
59050: PUSH
59051: LD_VAR 0 4
59055: PUSH
59056: FOR_IN
59057: IFFALSE 59164
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59059: LD_STRING [
59061: PUSH
59062: LD_VAR 0 3
59066: PPUSH
59067: CALL_OW 266
59071: STR
59072: PUSH
59073: LD_STRING , 
59075: STR
59076: PUSH
59077: LD_VAR 0 3
59081: PPUSH
59082: CALL_OW 250
59086: STR
59087: PUSH
59088: LD_STRING , 
59090: STR
59091: PUSH
59092: LD_VAR 0 3
59096: PPUSH
59097: CALL_OW 251
59101: STR
59102: PUSH
59103: LD_STRING , 
59105: STR
59106: PUSH
59107: LD_VAR 0 3
59111: PPUSH
59112: CALL_OW 254
59116: STR
59117: PUSH
59118: LD_STRING , 
59120: STR
59121: PUSH
59122: LD_VAR 0 3
59126: PPUSH
59127: LD_INT 1
59129: PPUSH
59130: CALL_OW 268
59134: STR
59135: PUSH
59136: LD_STRING , 
59138: STR
59139: PUSH
59140: LD_VAR 0 3
59144: PPUSH
59145: LD_INT 2
59147: PPUSH
59148: CALL_OW 268
59152: STR
59153: PUSH
59154: LD_STRING ],
59156: STR
59157: PPUSH
59158: CALL_OW 561
// end ;
59162: GO 59056
59164: POP
59165: POP
// AddToLog ( ]; ) ;
59166: LD_STRING ];
59168: PPUSH
59169: CALL_OW 561
// end ;
59173: LD_VAR 0 2
59177: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59178: LD_INT 0
59180: PPUSH
59181: PPUSH
59182: PPUSH
59183: PPUSH
59184: PPUSH
// if not area or not rate or not max then
59185: LD_VAR 0 1
59189: NOT
59190: PUSH
59191: LD_VAR 0 2
59195: NOT
59196: OR
59197: PUSH
59198: LD_VAR 0 4
59202: NOT
59203: OR
59204: IFFALSE 59208
// exit ;
59206: GO 59397
// while 1 do
59208: LD_INT 1
59210: IFFALSE 59397
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59212: LD_ADDR_VAR 0 9
59216: PUSH
59217: LD_VAR 0 1
59221: PPUSH
59222: LD_INT 1
59224: PPUSH
59225: CALL_OW 287
59229: PUSH
59230: LD_INT 10
59232: MUL
59233: ST_TO_ADDR
// r := rate / 10 ;
59234: LD_ADDR_VAR 0 7
59238: PUSH
59239: LD_VAR 0 2
59243: PUSH
59244: LD_INT 10
59246: DIVREAL
59247: ST_TO_ADDR
// time := 1 1$00 ;
59248: LD_ADDR_VAR 0 8
59252: PUSH
59253: LD_INT 2100
59255: ST_TO_ADDR
// if amount < min then
59256: LD_VAR 0 9
59260: PUSH
59261: LD_VAR 0 3
59265: LESS
59266: IFFALSE 59284
// r := r * 2 else
59268: LD_ADDR_VAR 0 7
59272: PUSH
59273: LD_VAR 0 7
59277: PUSH
59278: LD_INT 2
59280: MUL
59281: ST_TO_ADDR
59282: GO 59310
// if amount > max then
59284: LD_VAR 0 9
59288: PUSH
59289: LD_VAR 0 4
59293: GREATER
59294: IFFALSE 59310
// r := r / 2 ;
59296: LD_ADDR_VAR 0 7
59300: PUSH
59301: LD_VAR 0 7
59305: PUSH
59306: LD_INT 2
59308: DIVREAL
59309: ST_TO_ADDR
// time := time / r ;
59310: LD_ADDR_VAR 0 8
59314: PUSH
59315: LD_VAR 0 8
59319: PUSH
59320: LD_VAR 0 7
59324: DIVREAL
59325: ST_TO_ADDR
// if time < 0 then
59326: LD_VAR 0 8
59330: PUSH
59331: LD_INT 0
59333: LESS
59334: IFFALSE 59351
// time := time * - 1 ;
59336: LD_ADDR_VAR 0 8
59340: PUSH
59341: LD_VAR 0 8
59345: PUSH
59346: LD_INT 1
59348: NEG
59349: MUL
59350: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
59351: LD_VAR 0 8
59355: PUSH
59356: LD_INT 35
59358: PPUSH
59359: LD_INT 875
59361: PPUSH
59362: CALL_OW 12
59366: PLUS
59367: PPUSH
59368: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59372: LD_INT 1
59374: PPUSH
59375: LD_INT 5
59377: PPUSH
59378: CALL_OW 12
59382: PPUSH
59383: LD_VAR 0 1
59387: PPUSH
59388: LD_INT 1
59390: PPUSH
59391: CALL_OW 55
// end ;
59395: GO 59208
// end ;
59397: LD_VAR 0 5
59401: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59402: LD_INT 0
59404: PPUSH
59405: PPUSH
59406: PPUSH
59407: PPUSH
59408: PPUSH
59409: PPUSH
59410: PPUSH
59411: PPUSH
// if not turrets or not factories then
59412: LD_VAR 0 1
59416: NOT
59417: PUSH
59418: LD_VAR 0 2
59422: NOT
59423: OR
59424: IFFALSE 59428
// exit ;
59426: GO 59735
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59428: LD_ADDR_VAR 0 10
59432: PUSH
59433: LD_INT 5
59435: PUSH
59436: LD_INT 6
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 2
59445: PUSH
59446: LD_INT 4
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 3
59455: PUSH
59456: LD_INT 5
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 24
59470: PUSH
59471: LD_INT 25
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 23
59480: PUSH
59481: LD_INT 27
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 42
59494: PUSH
59495: LD_INT 43
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 44
59504: PUSH
59505: LD_INT 46
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 45
59514: PUSH
59515: LD_INT 47
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: LIST
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: LIST
59531: ST_TO_ADDR
// result := [ ] ;
59532: LD_ADDR_VAR 0 3
59536: PUSH
59537: EMPTY
59538: ST_TO_ADDR
// for i in turrets do
59539: LD_ADDR_VAR 0 4
59543: PUSH
59544: LD_VAR 0 1
59548: PUSH
59549: FOR_IN
59550: IFFALSE 59733
// begin nat := GetNation ( i ) ;
59552: LD_ADDR_VAR 0 7
59556: PUSH
59557: LD_VAR 0 4
59561: PPUSH
59562: CALL_OW 248
59566: ST_TO_ADDR
// weapon := 0 ;
59567: LD_ADDR_VAR 0 8
59571: PUSH
59572: LD_INT 0
59574: ST_TO_ADDR
// if not nat then
59575: LD_VAR 0 7
59579: NOT
59580: IFFALSE 59584
// continue ;
59582: GO 59549
// for j in list [ nat ] do
59584: LD_ADDR_VAR 0 5
59588: PUSH
59589: LD_VAR 0 10
59593: PUSH
59594: LD_VAR 0 7
59598: ARRAY
59599: PUSH
59600: FOR_IN
59601: IFFALSE 59642
// if GetBWeapon ( i ) = j [ 1 ] then
59603: LD_VAR 0 4
59607: PPUSH
59608: CALL_OW 269
59612: PUSH
59613: LD_VAR 0 5
59617: PUSH
59618: LD_INT 1
59620: ARRAY
59621: EQUAL
59622: IFFALSE 59640
// begin weapon := j [ 2 ] ;
59624: LD_ADDR_VAR 0 8
59628: PUSH
59629: LD_VAR 0 5
59633: PUSH
59634: LD_INT 2
59636: ARRAY
59637: ST_TO_ADDR
// break ;
59638: GO 59642
// end ;
59640: GO 59600
59642: POP
59643: POP
// if not weapon then
59644: LD_VAR 0 8
59648: NOT
59649: IFFALSE 59653
// continue ;
59651: GO 59549
// for k in factories do
59653: LD_ADDR_VAR 0 6
59657: PUSH
59658: LD_VAR 0 2
59662: PUSH
59663: FOR_IN
59664: IFFALSE 59729
// begin weapons := AvailableWeaponList ( k ) ;
59666: LD_ADDR_VAR 0 9
59670: PUSH
59671: LD_VAR 0 6
59675: PPUSH
59676: CALL_OW 478
59680: ST_TO_ADDR
// if not weapons then
59681: LD_VAR 0 9
59685: NOT
59686: IFFALSE 59690
// continue ;
59688: GO 59663
// if weapon in weapons then
59690: LD_VAR 0 8
59694: PUSH
59695: LD_VAR 0 9
59699: IN
59700: IFFALSE 59727
// begin result := [ i , weapon ] ;
59702: LD_ADDR_VAR 0 3
59706: PUSH
59707: LD_VAR 0 4
59711: PUSH
59712: LD_VAR 0 8
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: ST_TO_ADDR
// exit ;
59721: POP
59722: POP
59723: POP
59724: POP
59725: GO 59735
// end ; end ;
59727: GO 59663
59729: POP
59730: POP
// end ;
59731: GO 59549
59733: POP
59734: POP
// end ;
59735: LD_VAR 0 3
59739: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59740: LD_INT 0
59742: PPUSH
// if not side or side > 8 then
59743: LD_VAR 0 3
59747: NOT
59748: PUSH
59749: LD_VAR 0 3
59753: PUSH
59754: LD_INT 8
59756: GREATER
59757: OR
59758: IFFALSE 59762
// exit ;
59760: GO 59821
// if not range then
59762: LD_VAR 0 4
59766: NOT
59767: IFFALSE 59778
// range := - 12 ;
59769: LD_ADDR_VAR 0 4
59773: PUSH
59774: LD_INT 12
59776: NEG
59777: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59778: LD_VAR 0 1
59782: PPUSH
59783: LD_VAR 0 2
59787: PPUSH
59788: LD_VAR 0 3
59792: PPUSH
59793: LD_VAR 0 4
59797: PPUSH
59798: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59802: LD_VAR 0 1
59806: PPUSH
59807: LD_VAR 0 2
59811: PPUSH
59812: LD_VAR 0 3
59816: PPUSH
59817: CALL_OW 331
// end ;
59821: LD_VAR 0 5
59825: RET
// export function Video ( mode ) ; begin
59826: LD_INT 0
59828: PPUSH
// ingame_video = mode ;
59829: LD_ADDR_OWVAR 52
59833: PUSH
59834: LD_VAR 0 1
59838: ST_TO_ADDR
// interface_hidden = mode ;
59839: LD_ADDR_OWVAR 54
59843: PUSH
59844: LD_VAR 0 1
59848: ST_TO_ADDR
// end ;
59849: LD_VAR 0 2
59853: RET
// export function Join ( array , element ) ; begin
59854: LD_INT 0
59856: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59857: LD_ADDR_VAR 0 3
59861: PUSH
59862: LD_VAR 0 1
59866: PPUSH
59867: LD_VAR 0 1
59871: PUSH
59872: LD_INT 1
59874: PLUS
59875: PPUSH
59876: LD_VAR 0 2
59880: PPUSH
59881: CALL_OW 1
59885: ST_TO_ADDR
// end ;
59886: LD_VAR 0 3
59890: RET
// export function JoinUnion ( array , element ) ; begin
59891: LD_INT 0
59893: PPUSH
// result := array union element ;
59894: LD_ADDR_VAR 0 3
59898: PUSH
59899: LD_VAR 0 1
59903: PUSH
59904: LD_VAR 0 2
59908: UNION
59909: ST_TO_ADDR
// end ;
59910: LD_VAR 0 3
59914: RET
// export function GetBehemoths ( side ) ; begin
59915: LD_INT 0
59917: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
59918: LD_ADDR_VAR 0 2
59922: PUSH
59923: LD_INT 22
59925: PUSH
59926: LD_VAR 0 1
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 31
59937: PUSH
59938: LD_INT 25
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PPUSH
59949: CALL_OW 69
59953: ST_TO_ADDR
// end ;
59954: LD_VAR 0 2
59958: RET
// export function Shuffle ( array ) ; var i , index ; begin
59959: LD_INT 0
59961: PPUSH
59962: PPUSH
59963: PPUSH
// result := [ ] ;
59964: LD_ADDR_VAR 0 2
59968: PUSH
59969: EMPTY
59970: ST_TO_ADDR
// if not array then
59971: LD_VAR 0 1
59975: NOT
59976: IFFALSE 59980
// exit ;
59978: GO 60079
// Randomize ;
59980: CALL_OW 10
// for i = array downto 1 do
59984: LD_ADDR_VAR 0 3
59988: PUSH
59989: DOUBLE
59990: LD_VAR 0 1
59994: INC
59995: ST_TO_ADDR
59996: LD_INT 1
59998: PUSH
59999: FOR_DOWNTO
60000: IFFALSE 60077
// begin index := rand ( 1 , array ) ;
60002: LD_ADDR_VAR 0 4
60006: PUSH
60007: LD_INT 1
60009: PPUSH
60010: LD_VAR 0 1
60014: PPUSH
60015: CALL_OW 12
60019: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60020: LD_ADDR_VAR 0 2
60024: PUSH
60025: LD_VAR 0 2
60029: PPUSH
60030: LD_VAR 0 2
60034: PUSH
60035: LD_INT 1
60037: PLUS
60038: PPUSH
60039: LD_VAR 0 1
60043: PUSH
60044: LD_VAR 0 4
60048: ARRAY
60049: PPUSH
60050: CALL_OW 2
60054: ST_TO_ADDR
// array := Delete ( array , index ) ;
60055: LD_ADDR_VAR 0 1
60059: PUSH
60060: LD_VAR 0 1
60064: PPUSH
60065: LD_VAR 0 4
60069: PPUSH
60070: CALL_OW 3
60074: ST_TO_ADDR
// end ;
60075: GO 59999
60077: POP
60078: POP
// end ;
60079: LD_VAR 0 2
60083: RET
// export function GetBaseMaterials ( base ) ; begin
60084: LD_INT 0
60086: PPUSH
// result := [ 0 , 0 , 0 ] ;
60087: LD_ADDR_VAR 0 2
60091: PUSH
60092: LD_INT 0
60094: PUSH
60095: LD_INT 0
60097: PUSH
60098: LD_INT 0
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: LIST
60105: ST_TO_ADDR
// if not base then
60106: LD_VAR 0 1
60110: NOT
60111: IFFALSE 60115
// exit ;
60113: GO 60164
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60115: LD_ADDR_VAR 0 2
60119: PUSH
60120: LD_VAR 0 1
60124: PPUSH
60125: LD_INT 1
60127: PPUSH
60128: CALL_OW 275
60132: PUSH
60133: LD_VAR 0 1
60137: PPUSH
60138: LD_INT 2
60140: PPUSH
60141: CALL_OW 275
60145: PUSH
60146: LD_VAR 0 1
60150: PPUSH
60151: LD_INT 3
60153: PPUSH
60154: CALL_OW 275
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: LIST
60163: ST_TO_ADDR
// end ;
60164: LD_VAR 0 2
60168: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60169: LD_INT 0
60171: PPUSH
60172: PPUSH
// result := array ;
60173: LD_ADDR_VAR 0 3
60177: PUSH
60178: LD_VAR 0 1
60182: ST_TO_ADDR
// if size >= result then
60183: LD_VAR 0 2
60187: PUSH
60188: LD_VAR 0 3
60192: GREATEREQUAL
60193: IFFALSE 60197
// exit ;
60195: GO 60247
// if size then
60197: LD_VAR 0 2
60201: IFFALSE 60247
// for i := array downto size do
60203: LD_ADDR_VAR 0 4
60207: PUSH
60208: DOUBLE
60209: LD_VAR 0 1
60213: INC
60214: ST_TO_ADDR
60215: LD_VAR 0 2
60219: PUSH
60220: FOR_DOWNTO
60221: IFFALSE 60245
// result := Delete ( result , result ) ;
60223: LD_ADDR_VAR 0 3
60227: PUSH
60228: LD_VAR 0 3
60232: PPUSH
60233: LD_VAR 0 3
60237: PPUSH
60238: CALL_OW 3
60242: ST_TO_ADDR
60243: GO 60220
60245: POP
60246: POP
// end ;
60247: LD_VAR 0 3
60251: RET
// export function ComExit ( unit ) ; var tmp ; begin
60252: LD_INT 0
60254: PPUSH
60255: PPUSH
// if not IsInUnit ( unit ) then
60256: LD_VAR 0 1
60260: PPUSH
60261: CALL_OW 310
60265: NOT
60266: IFFALSE 60270
// exit ;
60268: GO 60330
// tmp := IsInUnit ( unit ) ;
60270: LD_ADDR_VAR 0 3
60274: PUSH
60275: LD_VAR 0 1
60279: PPUSH
60280: CALL_OW 310
60284: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60285: LD_VAR 0 3
60289: PPUSH
60290: CALL_OW 247
60294: PUSH
60295: LD_INT 2
60297: EQUAL
60298: IFFALSE 60311
// ComExitVehicle ( unit ) else
60300: LD_VAR 0 1
60304: PPUSH
60305: CALL_OW 121
60309: GO 60320
// ComExitBuilding ( unit ) ;
60311: LD_VAR 0 1
60315: PPUSH
60316: CALL_OW 122
// result := tmp ;
60320: LD_ADDR_VAR 0 2
60324: PUSH
60325: LD_VAR 0 3
60329: ST_TO_ADDR
// end ;
60330: LD_VAR 0 2
60334: RET
// export function ComExitAll ( units ) ; var i ; begin
60335: LD_INT 0
60337: PPUSH
60338: PPUSH
// if not units then
60339: LD_VAR 0 1
60343: NOT
60344: IFFALSE 60348
// exit ;
60346: GO 60374
// for i in units do
60348: LD_ADDR_VAR 0 3
60352: PUSH
60353: LD_VAR 0 1
60357: PUSH
60358: FOR_IN
60359: IFFALSE 60372
// ComExit ( i ) ;
60361: LD_VAR 0 3
60365: PPUSH
60366: CALL 60252 0 1
60370: GO 60358
60372: POP
60373: POP
// end ;
60374: LD_VAR 0 2
60378: RET
// export function ResetHc ; begin
60379: LD_INT 0
60381: PPUSH
// InitHc ;
60382: CALL_OW 19
// hc_importance := 0 ;
60386: LD_ADDR_OWVAR 32
60390: PUSH
60391: LD_INT 0
60393: ST_TO_ADDR
// end ;
60394: LD_VAR 0 1
60398: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60399: LD_INT 0
60401: PPUSH
60402: PPUSH
60403: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60404: LD_ADDR_VAR 0 6
60408: PUSH
60409: LD_VAR 0 1
60413: PUSH
60414: LD_VAR 0 3
60418: PLUS
60419: PUSH
60420: LD_INT 2
60422: DIV
60423: ST_TO_ADDR
// if _x < 0 then
60424: LD_VAR 0 6
60428: PUSH
60429: LD_INT 0
60431: LESS
60432: IFFALSE 60449
// _x := _x * - 1 ;
60434: LD_ADDR_VAR 0 6
60438: PUSH
60439: LD_VAR 0 6
60443: PUSH
60444: LD_INT 1
60446: NEG
60447: MUL
60448: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60449: LD_ADDR_VAR 0 7
60453: PUSH
60454: LD_VAR 0 2
60458: PUSH
60459: LD_VAR 0 4
60463: PLUS
60464: PUSH
60465: LD_INT 2
60467: DIV
60468: ST_TO_ADDR
// if _y < 0 then
60469: LD_VAR 0 7
60473: PUSH
60474: LD_INT 0
60476: LESS
60477: IFFALSE 60494
// _y := _y * - 1 ;
60479: LD_ADDR_VAR 0 7
60483: PUSH
60484: LD_VAR 0 7
60488: PUSH
60489: LD_INT 1
60491: NEG
60492: MUL
60493: ST_TO_ADDR
// result := [ _x , _y ] ;
60494: LD_ADDR_VAR 0 5
60498: PUSH
60499: LD_VAR 0 6
60503: PUSH
60504: LD_VAR 0 7
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: ST_TO_ADDR
// end ;
60513: LD_VAR 0 5
60517: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60518: LD_INT 0
60520: PPUSH
60521: PPUSH
60522: PPUSH
60523: PPUSH
// task := GetTaskList ( unit ) ;
60524: LD_ADDR_VAR 0 7
60528: PUSH
60529: LD_VAR 0 1
60533: PPUSH
60534: CALL_OW 437
60538: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
60539: LD_VAR 0 7
60543: NOT
60544: PUSH
60545: LD_VAR 0 1
60549: PPUSH
60550: LD_VAR 0 2
60554: PPUSH
60555: CALL_OW 308
60559: NOT
60560: AND
60561: IFFALSE 60565
// exit ;
60563: GO 60683
// if IsInArea ( unit , area ) then
60565: LD_VAR 0 1
60569: PPUSH
60570: LD_VAR 0 2
60574: PPUSH
60575: CALL_OW 308
60579: IFFALSE 60597
// begin ComMoveToArea ( unit , goAway ) ;
60581: LD_VAR 0 1
60585: PPUSH
60586: LD_VAR 0 3
60590: PPUSH
60591: CALL_OW 113
// exit ;
60595: GO 60683
// end ; if task [ 1 ] [ 1 ] <> M then
60597: LD_VAR 0 7
60601: PUSH
60602: LD_INT 1
60604: ARRAY
60605: PUSH
60606: LD_INT 1
60608: ARRAY
60609: PUSH
60610: LD_STRING M
60612: NONEQUAL
60613: IFFALSE 60617
// exit ;
60615: GO 60683
// x := task [ 1 ] [ 2 ] ;
60617: LD_ADDR_VAR 0 5
60621: PUSH
60622: LD_VAR 0 7
60626: PUSH
60627: LD_INT 1
60629: ARRAY
60630: PUSH
60631: LD_INT 2
60633: ARRAY
60634: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60635: LD_ADDR_VAR 0 6
60639: PUSH
60640: LD_VAR 0 7
60644: PUSH
60645: LD_INT 1
60647: ARRAY
60648: PUSH
60649: LD_INT 3
60651: ARRAY
60652: ST_TO_ADDR
// if InArea ( x , y , area ) then
60653: LD_VAR 0 5
60657: PPUSH
60658: LD_VAR 0 6
60662: PPUSH
60663: LD_VAR 0 2
60667: PPUSH
60668: CALL_OW 309
60672: IFFALSE 60683
// ComStop ( unit ) ;
60674: LD_VAR 0 1
60678: PPUSH
60679: CALL_OW 141
// end ;
60683: LD_VAR 0 4
60687: RET
// export function Abs ( value ) ; begin
60688: LD_INT 0
60690: PPUSH
// result := value ;
60691: LD_ADDR_VAR 0 2
60695: PUSH
60696: LD_VAR 0 1
60700: ST_TO_ADDR
// if value < 0 then
60701: LD_VAR 0 1
60705: PUSH
60706: LD_INT 0
60708: LESS
60709: IFFALSE 60726
// result := value * - 1 ;
60711: LD_ADDR_VAR 0 2
60715: PUSH
60716: LD_VAR 0 1
60720: PUSH
60721: LD_INT 1
60723: NEG
60724: MUL
60725: ST_TO_ADDR
// end ;
60726: LD_VAR 0 2
60730: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60731: LD_INT 0
60733: PPUSH
60734: PPUSH
60735: PPUSH
60736: PPUSH
60737: PPUSH
60738: PPUSH
60739: PPUSH
60740: PPUSH
// if not unit or not building then
60741: LD_VAR 0 1
60745: NOT
60746: PUSH
60747: LD_VAR 0 2
60751: NOT
60752: OR
60753: IFFALSE 60757
// exit ;
60755: GO 60983
// x := GetX ( building ) ;
60757: LD_ADDR_VAR 0 4
60761: PUSH
60762: LD_VAR 0 2
60766: PPUSH
60767: CALL_OW 250
60771: ST_TO_ADDR
// y := GetY ( building ) ;
60772: LD_ADDR_VAR 0 6
60776: PUSH
60777: LD_VAR 0 2
60781: PPUSH
60782: CALL_OW 251
60786: ST_TO_ADDR
// d := GetDir ( building ) ;
60787: LD_ADDR_VAR 0 8
60791: PUSH
60792: LD_VAR 0 2
60796: PPUSH
60797: CALL_OW 254
60801: ST_TO_ADDR
// r := 4 ;
60802: LD_ADDR_VAR 0 9
60806: PUSH
60807: LD_INT 4
60809: ST_TO_ADDR
// for i := 1 to 5 do
60810: LD_ADDR_VAR 0 10
60814: PUSH
60815: DOUBLE
60816: LD_INT 1
60818: DEC
60819: ST_TO_ADDR
60820: LD_INT 5
60822: PUSH
60823: FOR_TO
60824: IFFALSE 60981
// begin _x := ShiftX ( x , d , r + i ) ;
60826: LD_ADDR_VAR 0 5
60830: PUSH
60831: LD_VAR 0 4
60835: PPUSH
60836: LD_VAR 0 8
60840: PPUSH
60841: LD_VAR 0 9
60845: PUSH
60846: LD_VAR 0 10
60850: PLUS
60851: PPUSH
60852: CALL_OW 272
60856: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60857: LD_ADDR_VAR 0 7
60861: PUSH
60862: LD_VAR 0 6
60866: PPUSH
60867: LD_VAR 0 8
60871: PPUSH
60872: LD_VAR 0 9
60876: PUSH
60877: LD_VAR 0 10
60881: PLUS
60882: PPUSH
60883: CALL_OW 273
60887: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60888: LD_VAR 0 5
60892: PPUSH
60893: LD_VAR 0 7
60897: PPUSH
60898: CALL_OW 488
60902: PUSH
60903: LD_VAR 0 5
60907: PPUSH
60908: LD_VAR 0 7
60912: PPUSH
60913: CALL_OW 428
60917: PPUSH
60918: CALL_OW 247
60922: PUSH
60923: LD_INT 3
60925: PUSH
60926: LD_INT 2
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: IN
60933: NOT
60934: AND
60935: IFFALSE 60979
// begin ComMoveXY ( unit , _x , _y ) ;
60937: LD_VAR 0 1
60941: PPUSH
60942: LD_VAR 0 5
60946: PPUSH
60947: LD_VAR 0 7
60951: PPUSH
60952: CALL_OW 111
// result := [ _x , _y ] ;
60956: LD_ADDR_VAR 0 3
60960: PUSH
60961: LD_VAR 0 5
60965: PUSH
60966: LD_VAR 0 7
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: ST_TO_ADDR
// exit ;
60975: POP
60976: POP
60977: GO 60983
// end ; end ;
60979: GO 60823
60981: POP
60982: POP
// end ;
60983: LD_VAR 0 3
60987: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60988: LD_INT 0
60990: PPUSH
60991: PPUSH
60992: PPUSH
// result := 0 ;
60993: LD_ADDR_VAR 0 3
60997: PUSH
60998: LD_INT 0
61000: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61001: LD_VAR 0 1
61005: PUSH
61006: LD_INT 0
61008: LESS
61009: PUSH
61010: LD_VAR 0 1
61014: PUSH
61015: LD_INT 8
61017: GREATER
61018: OR
61019: PUSH
61020: LD_VAR 0 2
61024: PUSH
61025: LD_INT 0
61027: LESS
61028: OR
61029: PUSH
61030: LD_VAR 0 2
61034: PUSH
61035: LD_INT 8
61037: GREATER
61038: OR
61039: IFFALSE 61043
// exit ;
61041: GO 61118
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61043: LD_ADDR_VAR 0 4
61047: PUSH
61048: LD_INT 22
61050: PUSH
61051: LD_VAR 0 2
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PPUSH
61060: CALL_OW 69
61064: PUSH
61065: FOR_IN
61066: IFFALSE 61116
// begin un := UnitShoot ( i ) ;
61068: LD_ADDR_VAR 0 5
61072: PUSH
61073: LD_VAR 0 4
61077: PPUSH
61078: CALL_OW 504
61082: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61083: LD_VAR 0 5
61087: PPUSH
61088: CALL_OW 255
61092: PUSH
61093: LD_VAR 0 1
61097: EQUAL
61098: IFFALSE 61114
// begin result := un ;
61100: LD_ADDR_VAR 0 3
61104: PUSH
61105: LD_VAR 0 5
61109: ST_TO_ADDR
// exit ;
61110: POP
61111: POP
61112: GO 61118
// end ; end ;
61114: GO 61065
61116: POP
61117: POP
// end ;
61118: LD_VAR 0 3
61122: RET
// export function GetCargoBay ( units ) ; begin
61123: LD_INT 0
61125: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
61126: LD_ADDR_VAR 0 2
61130: PUSH
61131: LD_VAR 0 1
61135: PPUSH
61136: LD_INT 2
61138: PUSH
61139: LD_INT 34
61141: PUSH
61142: LD_INT 12
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 34
61151: PUSH
61152: LD_INT 51
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 34
61161: PUSH
61162: LD_INT 32
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 34
61171: PUSH
61172: LD_INT 89
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: PPUSH
61186: CALL_OW 72
61190: ST_TO_ADDR
// end ;
61191: LD_VAR 0 2
61195: RET
// export function Negate ( value ) ; begin
61196: LD_INT 0
61198: PPUSH
// result := not value ;
61199: LD_ADDR_VAR 0 2
61203: PUSH
61204: LD_VAR 0 1
61208: NOT
61209: ST_TO_ADDR
// end ;
61210: LD_VAR 0 2
61214: RET
// export function Inc ( value ) ; begin
61215: LD_INT 0
61217: PPUSH
// result := value + 1 ;
61218: LD_ADDR_VAR 0 2
61222: PUSH
61223: LD_VAR 0 1
61227: PUSH
61228: LD_INT 1
61230: PLUS
61231: ST_TO_ADDR
// end ;
61232: LD_VAR 0 2
61236: RET
// export function Dec ( value ) ; begin
61237: LD_INT 0
61239: PPUSH
// result := value - 1 ;
61240: LD_ADDR_VAR 0 2
61244: PUSH
61245: LD_VAR 0 1
61249: PUSH
61250: LD_INT 1
61252: MINUS
61253: ST_TO_ADDR
// end ;
61254: LD_VAR 0 2
61258: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
61259: LD_INT 0
61261: PPUSH
61262: PPUSH
61263: PPUSH
61264: PPUSH
61265: PPUSH
61266: PPUSH
61267: PPUSH
61268: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
61269: LD_VAR 0 1
61273: PPUSH
61274: LD_VAR 0 2
61278: PPUSH
61279: CALL_OW 488
61283: NOT
61284: PUSH
61285: LD_VAR 0 3
61289: PPUSH
61290: LD_VAR 0 4
61294: PPUSH
61295: CALL_OW 488
61299: NOT
61300: OR
61301: IFFALSE 61314
// begin result := - 1 ;
61303: LD_ADDR_VAR 0 5
61307: PUSH
61308: LD_INT 1
61310: NEG
61311: ST_TO_ADDR
// exit ;
61312: GO 61549
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
61314: LD_ADDR_VAR 0 12
61318: PUSH
61319: LD_VAR 0 1
61323: PPUSH
61324: LD_VAR 0 2
61328: PPUSH
61329: LD_VAR 0 3
61333: PPUSH
61334: LD_VAR 0 4
61338: PPUSH
61339: CALL 60399 0 4
61343: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
61344: LD_ADDR_VAR 0 11
61348: PUSH
61349: LD_VAR 0 1
61353: PPUSH
61354: LD_VAR 0 2
61358: PPUSH
61359: LD_VAR 0 12
61363: PUSH
61364: LD_INT 1
61366: ARRAY
61367: PPUSH
61368: LD_VAR 0 12
61372: PUSH
61373: LD_INT 2
61375: ARRAY
61376: PPUSH
61377: CALL_OW 298
61381: ST_TO_ADDR
// distance := 9999 ;
61382: LD_ADDR_VAR 0 10
61386: PUSH
61387: LD_INT 9999
61389: ST_TO_ADDR
// for i := 0 to 5 do
61390: LD_ADDR_VAR 0 6
61394: PUSH
61395: DOUBLE
61396: LD_INT 0
61398: DEC
61399: ST_TO_ADDR
61400: LD_INT 5
61402: PUSH
61403: FOR_TO
61404: IFFALSE 61547
// begin _x := ShiftX ( x1 , i , centerDist ) ;
61406: LD_ADDR_VAR 0 7
61410: PUSH
61411: LD_VAR 0 1
61415: PPUSH
61416: LD_VAR 0 6
61420: PPUSH
61421: LD_VAR 0 11
61425: PPUSH
61426: CALL_OW 272
61430: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
61431: LD_ADDR_VAR 0 8
61435: PUSH
61436: LD_VAR 0 2
61440: PPUSH
61441: LD_VAR 0 6
61445: PPUSH
61446: LD_VAR 0 11
61450: PPUSH
61451: CALL_OW 273
61455: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61456: LD_VAR 0 7
61460: PPUSH
61461: LD_VAR 0 8
61465: PPUSH
61466: CALL_OW 488
61470: NOT
61471: IFFALSE 61475
// continue ;
61473: GO 61403
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
61475: LD_ADDR_VAR 0 9
61479: PUSH
61480: LD_VAR 0 12
61484: PUSH
61485: LD_INT 1
61487: ARRAY
61488: PPUSH
61489: LD_VAR 0 12
61493: PUSH
61494: LD_INT 2
61496: ARRAY
61497: PPUSH
61498: LD_VAR 0 7
61502: PPUSH
61503: LD_VAR 0 8
61507: PPUSH
61508: CALL_OW 298
61512: ST_TO_ADDR
// if tmp < distance then
61513: LD_VAR 0 9
61517: PUSH
61518: LD_VAR 0 10
61522: LESS
61523: IFFALSE 61545
// begin result := i ;
61525: LD_ADDR_VAR 0 5
61529: PUSH
61530: LD_VAR 0 6
61534: ST_TO_ADDR
// distance := tmp ;
61535: LD_ADDR_VAR 0 10
61539: PUSH
61540: LD_VAR 0 9
61544: ST_TO_ADDR
// end ; end ;
61545: GO 61403
61547: POP
61548: POP
// end ;
61549: LD_VAR 0 5
61553: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61554: LD_INT 0
61556: PPUSH
61557: PPUSH
// if not driver or not IsInUnit ( driver ) then
61558: LD_VAR 0 1
61562: NOT
61563: PUSH
61564: LD_VAR 0 1
61568: PPUSH
61569: CALL_OW 310
61573: NOT
61574: OR
61575: IFFALSE 61579
// exit ;
61577: GO 61669
// vehicle := IsInUnit ( driver ) ;
61579: LD_ADDR_VAR 0 3
61583: PUSH
61584: LD_VAR 0 1
61588: PPUSH
61589: CALL_OW 310
61593: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61594: LD_VAR 0 1
61598: PPUSH
61599: LD_STRING \
61601: PUSH
61602: LD_INT 0
61604: PUSH
61605: LD_INT 0
61607: PUSH
61608: LD_INT 0
61610: PUSH
61611: LD_INT 0
61613: PUSH
61614: LD_INT 0
61616: PUSH
61617: LD_INT 0
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: PUSH
61629: LD_STRING E
61631: PUSH
61632: LD_INT 0
61634: PUSH
61635: LD_INT 0
61637: PUSH
61638: LD_VAR 0 3
61642: PUSH
61643: LD_INT 0
61645: PUSH
61646: LD_INT 0
61648: PUSH
61649: LD_INT 0
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PPUSH
61665: CALL_OW 446
// end ;
61669: LD_VAR 0 2
61673: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61674: LD_INT 0
61676: PPUSH
61677: PPUSH
// if not driver or not IsInUnit ( driver ) then
61678: LD_VAR 0 1
61682: NOT
61683: PUSH
61684: LD_VAR 0 1
61688: PPUSH
61689: CALL_OW 310
61693: NOT
61694: OR
61695: IFFALSE 61699
// exit ;
61697: GO 61789
// vehicle := IsInUnit ( driver ) ;
61699: LD_ADDR_VAR 0 3
61703: PUSH
61704: LD_VAR 0 1
61708: PPUSH
61709: CALL_OW 310
61713: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61714: LD_VAR 0 1
61718: PPUSH
61719: LD_STRING \
61721: PUSH
61722: LD_INT 0
61724: PUSH
61725: LD_INT 0
61727: PUSH
61728: LD_INT 0
61730: PUSH
61731: LD_INT 0
61733: PUSH
61734: LD_INT 0
61736: PUSH
61737: LD_INT 0
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: PUSH
61749: LD_STRING E
61751: PUSH
61752: LD_INT 0
61754: PUSH
61755: LD_INT 0
61757: PUSH
61758: LD_VAR 0 3
61762: PUSH
61763: LD_INT 0
61765: PUSH
61766: LD_INT 0
61768: PUSH
61769: LD_INT 0
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PPUSH
61785: CALL_OW 447
// end ;
61789: LD_VAR 0 2
61793: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61794: LD_INT 0
61796: PPUSH
61797: PPUSH
61798: PPUSH
// tmp := [ ] ;
61799: LD_ADDR_VAR 0 5
61803: PUSH
61804: EMPTY
61805: ST_TO_ADDR
// for i in units do
61806: LD_ADDR_VAR 0 4
61810: PUSH
61811: LD_VAR 0 1
61815: PUSH
61816: FOR_IN
61817: IFFALSE 61855
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61819: LD_ADDR_VAR 0 5
61823: PUSH
61824: LD_VAR 0 5
61828: PPUSH
61829: LD_VAR 0 5
61833: PUSH
61834: LD_INT 1
61836: PLUS
61837: PPUSH
61838: LD_VAR 0 4
61842: PPUSH
61843: CALL_OW 256
61847: PPUSH
61848: CALL_OW 2
61852: ST_TO_ADDR
61853: GO 61816
61855: POP
61856: POP
// if not tmp then
61857: LD_VAR 0 5
61861: NOT
61862: IFFALSE 61866
// exit ;
61864: GO 61914
// if asc then
61866: LD_VAR 0 2
61870: IFFALSE 61894
// result := SortListByListAsc ( units , tmp ) else
61872: LD_ADDR_VAR 0 3
61876: PUSH
61877: LD_VAR 0 1
61881: PPUSH
61882: LD_VAR 0 5
61886: PPUSH
61887: CALL_OW 76
61891: ST_TO_ADDR
61892: GO 61914
// result := SortListByListDesc ( units , tmp ) ;
61894: LD_ADDR_VAR 0 3
61898: PUSH
61899: LD_VAR 0 1
61903: PPUSH
61904: LD_VAR 0 5
61908: PPUSH
61909: CALL_OW 77
61913: ST_TO_ADDR
// end ;
61914: LD_VAR 0 3
61918: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61919: LD_INT 0
61921: PPUSH
61922: PPUSH
// task := GetTaskList ( mech ) ;
61923: LD_ADDR_VAR 0 4
61927: PUSH
61928: LD_VAR 0 1
61932: PPUSH
61933: CALL_OW 437
61937: ST_TO_ADDR
// if not task then
61938: LD_VAR 0 4
61942: NOT
61943: IFFALSE 61947
// exit ;
61945: GO 61989
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61947: LD_ADDR_VAR 0 3
61951: PUSH
61952: LD_VAR 0 4
61956: PUSH
61957: LD_INT 1
61959: ARRAY
61960: PUSH
61961: LD_INT 1
61963: ARRAY
61964: PUSH
61965: LD_STRING r
61967: EQUAL
61968: PUSH
61969: LD_VAR 0 4
61973: PUSH
61974: LD_INT 1
61976: ARRAY
61977: PUSH
61978: LD_INT 4
61980: ARRAY
61981: PUSH
61982: LD_VAR 0 2
61986: EQUAL
61987: AND
61988: ST_TO_ADDR
// end ;
61989: LD_VAR 0 3
61993: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61994: LD_INT 0
61996: PPUSH
// SetDir ( unit , d ) ;
61997: LD_VAR 0 1
62001: PPUSH
62002: LD_VAR 0 4
62006: PPUSH
62007: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
62011: LD_VAR 0 1
62015: PPUSH
62016: LD_VAR 0 2
62020: PPUSH
62021: LD_VAR 0 3
62025: PPUSH
62026: LD_VAR 0 5
62030: PPUSH
62031: CALL_OW 48
// end ;
62035: LD_VAR 0 6
62039: RET
// export function ToNaturalNumber ( number ) ; begin
62040: LD_INT 0
62042: PPUSH
// result := number div 1 ;
62043: LD_ADDR_VAR 0 2
62047: PUSH
62048: LD_VAR 0 1
62052: PUSH
62053: LD_INT 1
62055: DIV
62056: ST_TO_ADDR
// if number < 0 then
62057: LD_VAR 0 1
62061: PUSH
62062: LD_INT 0
62064: LESS
62065: IFFALSE 62075
// result := 0 ;
62067: LD_ADDR_VAR 0 2
62071: PUSH
62072: LD_INT 0
62074: ST_TO_ADDR
// end ;
62075: LD_VAR 0 2
62079: RET
// export function SortByClass ( units , class ) ; var un ; begin
62080: LD_INT 0
62082: PPUSH
62083: PPUSH
// if not units or not class then
62084: LD_VAR 0 1
62088: NOT
62089: PUSH
62090: LD_VAR 0 2
62094: NOT
62095: OR
62096: IFFALSE 62100
// exit ;
62098: GO 62195
// result := [ ] ;
62100: LD_ADDR_VAR 0 3
62104: PUSH
62105: EMPTY
62106: ST_TO_ADDR
// for un in units do
62107: LD_ADDR_VAR 0 4
62111: PUSH
62112: LD_VAR 0 1
62116: PUSH
62117: FOR_IN
62118: IFFALSE 62193
// if GetClass ( un ) = class then
62120: LD_VAR 0 4
62124: PPUSH
62125: CALL_OW 257
62129: PUSH
62130: LD_VAR 0 2
62134: EQUAL
62135: IFFALSE 62162
// result := Insert ( result , 1 , un ) else
62137: LD_ADDR_VAR 0 3
62141: PUSH
62142: LD_VAR 0 3
62146: PPUSH
62147: LD_INT 1
62149: PPUSH
62150: LD_VAR 0 4
62154: PPUSH
62155: CALL_OW 2
62159: ST_TO_ADDR
62160: GO 62191
// result := Replace ( result , result + 1 , un ) ;
62162: LD_ADDR_VAR 0 3
62166: PUSH
62167: LD_VAR 0 3
62171: PPUSH
62172: LD_VAR 0 3
62176: PUSH
62177: LD_INT 1
62179: PLUS
62180: PPUSH
62181: LD_VAR 0 4
62185: PPUSH
62186: CALL_OW 1
62190: ST_TO_ADDR
62191: GO 62117
62193: POP
62194: POP
// end ;
62195: LD_VAR 0 3
62199: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
62200: LD_INT 0
62202: PPUSH
62203: PPUSH
62204: PPUSH
62205: PPUSH
62206: PPUSH
62207: PPUSH
62208: PPUSH
// result := [ ] ;
62209: LD_ADDR_VAR 0 4
62213: PUSH
62214: EMPTY
62215: ST_TO_ADDR
// if x - r < 0 then
62216: LD_VAR 0 1
62220: PUSH
62221: LD_VAR 0 3
62225: MINUS
62226: PUSH
62227: LD_INT 0
62229: LESS
62230: IFFALSE 62242
// min_x := 0 else
62232: LD_ADDR_VAR 0 8
62236: PUSH
62237: LD_INT 0
62239: ST_TO_ADDR
62240: GO 62258
// min_x := x - r ;
62242: LD_ADDR_VAR 0 8
62246: PUSH
62247: LD_VAR 0 1
62251: PUSH
62252: LD_VAR 0 3
62256: MINUS
62257: ST_TO_ADDR
// if y - r < 0 then
62258: LD_VAR 0 2
62262: PUSH
62263: LD_VAR 0 3
62267: MINUS
62268: PUSH
62269: LD_INT 0
62271: LESS
62272: IFFALSE 62284
// min_y := 0 else
62274: LD_ADDR_VAR 0 7
62278: PUSH
62279: LD_INT 0
62281: ST_TO_ADDR
62282: GO 62300
// min_y := y - r ;
62284: LD_ADDR_VAR 0 7
62288: PUSH
62289: LD_VAR 0 2
62293: PUSH
62294: LD_VAR 0 3
62298: MINUS
62299: ST_TO_ADDR
// max_x := x + r ;
62300: LD_ADDR_VAR 0 9
62304: PUSH
62305: LD_VAR 0 1
62309: PUSH
62310: LD_VAR 0 3
62314: PLUS
62315: ST_TO_ADDR
// max_y := y + r ;
62316: LD_ADDR_VAR 0 10
62320: PUSH
62321: LD_VAR 0 2
62325: PUSH
62326: LD_VAR 0 3
62330: PLUS
62331: ST_TO_ADDR
// for _x = min_x to max_x do
62332: LD_ADDR_VAR 0 5
62336: PUSH
62337: DOUBLE
62338: LD_VAR 0 8
62342: DEC
62343: ST_TO_ADDR
62344: LD_VAR 0 9
62348: PUSH
62349: FOR_TO
62350: IFFALSE 62451
// for _y = min_y to max_y do
62352: LD_ADDR_VAR 0 6
62356: PUSH
62357: DOUBLE
62358: LD_VAR 0 7
62362: DEC
62363: ST_TO_ADDR
62364: LD_VAR 0 10
62368: PUSH
62369: FOR_TO
62370: IFFALSE 62447
// begin if not ValidHex ( _x , _y ) then
62372: LD_VAR 0 5
62376: PPUSH
62377: LD_VAR 0 6
62381: PPUSH
62382: CALL_OW 488
62386: NOT
62387: IFFALSE 62391
// continue ;
62389: GO 62369
// if GetResourceTypeXY ( _x , _y ) then
62391: LD_VAR 0 5
62395: PPUSH
62396: LD_VAR 0 6
62400: PPUSH
62401: CALL_OW 283
62405: IFFALSE 62445
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
62407: LD_ADDR_VAR 0 4
62411: PUSH
62412: LD_VAR 0 4
62416: PPUSH
62417: LD_VAR 0 4
62421: PUSH
62422: LD_INT 1
62424: PLUS
62425: PPUSH
62426: LD_VAR 0 5
62430: PUSH
62431: LD_VAR 0 6
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PPUSH
62440: CALL_OW 1
62444: ST_TO_ADDR
// end ;
62445: GO 62369
62447: POP
62448: POP
62449: GO 62349
62451: POP
62452: POP
// end ;
62453: LD_VAR 0 4
62457: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
62458: LD_INT 0
62460: PPUSH
62461: PPUSH
62462: PPUSH
62463: PPUSH
62464: PPUSH
62465: PPUSH
62466: PPUSH
62467: PPUSH
// if not units then
62468: LD_VAR 0 1
62472: NOT
62473: IFFALSE 62477
// exit ;
62475: GO 63001
// result := UnitFilter ( units , [ f_ok ] ) ;
62477: LD_ADDR_VAR 0 3
62481: PUSH
62482: LD_VAR 0 1
62486: PPUSH
62487: LD_INT 50
62489: PUSH
62490: EMPTY
62491: LIST
62492: PPUSH
62493: CALL_OW 72
62497: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
62498: LD_ADDR_VAR 0 8
62502: PUSH
62503: LD_VAR 0 1
62507: PUSH
62508: LD_INT 1
62510: ARRAY
62511: PPUSH
62512: CALL_OW 255
62516: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
62517: LD_ADDR_VAR 0 10
62521: PUSH
62522: LD_INT 29
62524: PUSH
62525: LD_INT 91
62527: PUSH
62528: LD_INT 49
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: LIST
62535: ST_TO_ADDR
// if not result then
62536: LD_VAR 0 3
62540: NOT
62541: IFFALSE 62545
// exit ;
62543: GO 63001
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
62545: LD_ADDR_VAR 0 5
62549: PUSH
62550: LD_INT 81
62552: PUSH
62553: LD_VAR 0 8
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PPUSH
62562: CALL_OW 69
62566: ST_TO_ADDR
// for i in result do
62567: LD_ADDR_VAR 0 4
62571: PUSH
62572: LD_VAR 0 3
62576: PUSH
62577: FOR_IN
62578: IFFALSE 62999
// begin tag := GetTag ( i ) + 1 ;
62580: LD_ADDR_VAR 0 9
62584: PUSH
62585: LD_VAR 0 4
62589: PPUSH
62590: CALL_OW 110
62594: PUSH
62595: LD_INT 1
62597: PLUS
62598: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
62599: LD_ADDR_VAR 0 7
62603: PUSH
62604: LD_VAR 0 4
62608: PPUSH
62609: CALL_OW 250
62613: PPUSH
62614: LD_VAR 0 4
62618: PPUSH
62619: CALL_OW 251
62623: PPUSH
62624: LD_INT 6
62626: PPUSH
62627: CALL 62200 0 3
62631: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
62632: LD_VAR 0 4
62636: PPUSH
62637: CALL_OW 247
62641: PUSH
62642: LD_INT 2
62644: EQUAL
62645: PUSH
62646: LD_VAR 0 7
62650: AND
62651: PUSH
62652: LD_VAR 0 4
62656: PPUSH
62657: CALL_OW 264
62661: PUSH
62662: LD_VAR 0 10
62666: IN
62667: NOT
62668: AND
62669: IFFALSE 62708
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
62671: LD_VAR 0 4
62675: PPUSH
62676: LD_VAR 0 7
62680: PUSH
62681: LD_INT 1
62683: ARRAY
62684: PUSH
62685: LD_INT 1
62687: ARRAY
62688: PPUSH
62689: LD_VAR 0 7
62693: PUSH
62694: LD_INT 1
62696: ARRAY
62697: PUSH
62698: LD_INT 2
62700: ARRAY
62701: PPUSH
62702: CALL_OW 116
62706: GO 62997
// if path > tag then
62708: LD_VAR 0 2
62712: PUSH
62713: LD_VAR 0 9
62717: GREATER
62718: IFFALSE 62926
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
62720: LD_ADDR_VAR 0 6
62724: PUSH
62725: LD_VAR 0 5
62729: PPUSH
62730: LD_INT 91
62732: PUSH
62733: LD_VAR 0 4
62737: PUSH
62738: LD_INT 8
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: LIST
62745: PPUSH
62746: CALL_OW 72
62750: ST_TO_ADDR
// if nearEnemy then
62751: LD_VAR 0 6
62755: IFFALSE 62824
// begin if GetWeapon ( i ) = ru_time_lapser then
62757: LD_VAR 0 4
62761: PPUSH
62762: CALL_OW 264
62766: PUSH
62767: LD_INT 49
62769: EQUAL
62770: IFFALSE 62798
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
62772: LD_VAR 0 4
62776: PPUSH
62777: LD_VAR 0 6
62781: PPUSH
62782: LD_VAR 0 4
62786: PPUSH
62787: CALL_OW 74
62791: PPUSH
62792: CALL_OW 112
62796: GO 62822
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
62798: LD_VAR 0 4
62802: PPUSH
62803: LD_VAR 0 6
62807: PPUSH
62808: LD_VAR 0 4
62812: PPUSH
62813: CALL_OW 74
62817: PPUSH
62818: CALL 63926 0 2
// end else
62822: GO 62924
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
62824: LD_VAR 0 4
62828: PPUSH
62829: LD_VAR 0 2
62833: PUSH
62834: LD_VAR 0 9
62838: ARRAY
62839: PUSH
62840: LD_INT 1
62842: ARRAY
62843: PPUSH
62844: LD_VAR 0 2
62848: PUSH
62849: LD_VAR 0 9
62853: ARRAY
62854: PUSH
62855: LD_INT 2
62857: ARRAY
62858: PPUSH
62859: CALL_OW 297
62863: PUSH
62864: LD_INT 6
62866: GREATER
62867: IFFALSE 62910
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62869: LD_VAR 0 4
62873: PPUSH
62874: LD_VAR 0 2
62878: PUSH
62879: LD_VAR 0 9
62883: ARRAY
62884: PUSH
62885: LD_INT 1
62887: ARRAY
62888: PPUSH
62889: LD_VAR 0 2
62893: PUSH
62894: LD_VAR 0 9
62898: ARRAY
62899: PUSH
62900: LD_INT 2
62902: ARRAY
62903: PPUSH
62904: CALL_OW 114
62908: GO 62924
// SetTag ( i , tag ) ;
62910: LD_VAR 0 4
62914: PPUSH
62915: LD_VAR 0 9
62919: PPUSH
62920: CALL_OW 109
// end else
62924: GO 62997
// if enemy then
62926: LD_VAR 0 5
62930: IFFALSE 62997
// begin if GetWeapon ( i ) = ru_time_lapser then
62932: LD_VAR 0 4
62936: PPUSH
62937: CALL_OW 264
62941: PUSH
62942: LD_INT 49
62944: EQUAL
62945: IFFALSE 62973
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
62947: LD_VAR 0 4
62951: PPUSH
62952: LD_VAR 0 5
62956: PPUSH
62957: LD_VAR 0 4
62961: PPUSH
62962: CALL_OW 74
62966: PPUSH
62967: CALL_OW 112
62971: GO 62997
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62973: LD_VAR 0 4
62977: PPUSH
62978: LD_VAR 0 5
62982: PPUSH
62983: LD_VAR 0 4
62987: PPUSH
62988: CALL_OW 74
62992: PPUSH
62993: CALL 63926 0 2
// end ; end ;
62997: GO 62577
62999: POP
63000: POP
// end ;
63001: LD_VAR 0 3
63005: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
63006: LD_INT 0
63008: PPUSH
63009: PPUSH
63010: PPUSH
// if not unit or IsInUnit ( unit ) then
63011: LD_VAR 0 1
63015: NOT
63016: PUSH
63017: LD_VAR 0 1
63021: PPUSH
63022: CALL_OW 310
63026: OR
63027: IFFALSE 63031
// exit ;
63029: GO 63122
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
63031: LD_ADDR_VAR 0 4
63035: PUSH
63036: LD_VAR 0 1
63040: PPUSH
63041: CALL_OW 250
63045: PPUSH
63046: LD_VAR 0 2
63050: PPUSH
63051: LD_INT 1
63053: PPUSH
63054: CALL_OW 272
63058: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
63059: LD_ADDR_VAR 0 5
63063: PUSH
63064: LD_VAR 0 1
63068: PPUSH
63069: CALL_OW 251
63073: PPUSH
63074: LD_VAR 0 2
63078: PPUSH
63079: LD_INT 1
63081: PPUSH
63082: CALL_OW 273
63086: ST_TO_ADDR
// if ValidHex ( x , y ) then
63087: LD_VAR 0 4
63091: PPUSH
63092: LD_VAR 0 5
63096: PPUSH
63097: CALL_OW 488
63101: IFFALSE 63122
// ComTurnXY ( unit , x , y ) ;
63103: LD_VAR 0 1
63107: PPUSH
63108: LD_VAR 0 4
63112: PPUSH
63113: LD_VAR 0 5
63117: PPUSH
63118: CALL_OW 118
// end ;
63122: LD_VAR 0 3
63126: RET
// export function SeeUnits ( side , units ) ; var i ; begin
63127: LD_INT 0
63129: PPUSH
63130: PPUSH
// result := false ;
63131: LD_ADDR_VAR 0 3
63135: PUSH
63136: LD_INT 0
63138: ST_TO_ADDR
// if not units then
63139: LD_VAR 0 2
63143: NOT
63144: IFFALSE 63148
// exit ;
63146: GO 63193
// for i in units do
63148: LD_ADDR_VAR 0 4
63152: PUSH
63153: LD_VAR 0 2
63157: PUSH
63158: FOR_IN
63159: IFFALSE 63191
// if See ( side , i ) then
63161: LD_VAR 0 1
63165: PPUSH
63166: LD_VAR 0 4
63170: PPUSH
63171: CALL_OW 292
63175: IFFALSE 63189
// begin result := true ;
63177: LD_ADDR_VAR 0 3
63181: PUSH
63182: LD_INT 1
63184: ST_TO_ADDR
// exit ;
63185: POP
63186: POP
63187: GO 63193
// end ;
63189: GO 63158
63191: POP
63192: POP
// end ;
63193: LD_VAR 0 3
63197: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
63198: LD_INT 0
63200: PPUSH
63201: PPUSH
63202: PPUSH
63203: PPUSH
// if not unit or not points then
63204: LD_VAR 0 1
63208: NOT
63209: PUSH
63210: LD_VAR 0 2
63214: NOT
63215: OR
63216: IFFALSE 63220
// exit ;
63218: GO 63310
// dist := 99999 ;
63220: LD_ADDR_VAR 0 5
63224: PUSH
63225: LD_INT 99999
63227: ST_TO_ADDR
// for i in points do
63228: LD_ADDR_VAR 0 4
63232: PUSH
63233: LD_VAR 0 2
63237: PUSH
63238: FOR_IN
63239: IFFALSE 63308
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
63241: LD_ADDR_VAR 0 6
63245: PUSH
63246: LD_VAR 0 1
63250: PPUSH
63251: LD_VAR 0 4
63255: PUSH
63256: LD_INT 1
63258: ARRAY
63259: PPUSH
63260: LD_VAR 0 4
63264: PUSH
63265: LD_INT 2
63267: ARRAY
63268: PPUSH
63269: CALL_OW 297
63273: ST_TO_ADDR
// if tmpDist < dist then
63274: LD_VAR 0 6
63278: PUSH
63279: LD_VAR 0 5
63283: LESS
63284: IFFALSE 63306
// begin result := i ;
63286: LD_ADDR_VAR 0 3
63290: PUSH
63291: LD_VAR 0 4
63295: ST_TO_ADDR
// dist := tmpDist ;
63296: LD_ADDR_VAR 0 5
63300: PUSH
63301: LD_VAR 0 6
63305: ST_TO_ADDR
// end ; end ;
63306: GO 63238
63308: POP
63309: POP
// end ;
63310: LD_VAR 0 3
63314: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
63315: LD_INT 0
63317: PPUSH
// uc_side := side ;
63318: LD_ADDR_OWVAR 20
63322: PUSH
63323: LD_VAR 0 1
63327: ST_TO_ADDR
// uc_nation := 3 ;
63328: LD_ADDR_OWVAR 21
63332: PUSH
63333: LD_INT 3
63335: ST_TO_ADDR
// vc_chassis := 25 ;
63336: LD_ADDR_OWVAR 37
63340: PUSH
63341: LD_INT 25
63343: ST_TO_ADDR
// vc_engine := engine_siberite ;
63344: LD_ADDR_OWVAR 39
63348: PUSH
63349: LD_INT 3
63351: ST_TO_ADDR
// vc_control := control_computer ;
63352: LD_ADDR_OWVAR 38
63356: PUSH
63357: LD_INT 3
63359: ST_TO_ADDR
// vc_weapon := 59 ;
63360: LD_ADDR_OWVAR 40
63364: PUSH
63365: LD_INT 59
63367: ST_TO_ADDR
// result := CreateVehicle ;
63368: LD_ADDR_VAR 0 5
63372: PUSH
63373: CALL_OW 45
63377: ST_TO_ADDR
// SetDir ( result , d ) ;
63378: LD_VAR 0 5
63382: PPUSH
63383: LD_VAR 0 4
63387: PPUSH
63388: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
63392: LD_VAR 0 5
63396: PPUSH
63397: LD_VAR 0 2
63401: PPUSH
63402: LD_VAR 0 3
63406: PPUSH
63407: LD_INT 0
63409: PPUSH
63410: CALL_OW 48
// end ;
63414: LD_VAR 0 5
63418: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
63419: LD_INT 0
63421: PPUSH
63422: PPUSH
63423: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
63424: LD_ADDR_VAR 0 2
63428: PUSH
63429: LD_INT 0
63431: PUSH
63432: LD_INT 0
63434: PUSH
63435: LD_INT 0
63437: PUSH
63438: LD_INT 0
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
63447: LD_VAR 0 1
63451: NOT
63452: PUSH
63453: LD_VAR 0 1
63457: PPUSH
63458: CALL_OW 264
63462: PUSH
63463: LD_INT 12
63465: PUSH
63466: LD_INT 51
63468: PUSH
63469: LD_INT 32
63471: PUSH
63472: LD_INT 89
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: IN
63481: NOT
63482: OR
63483: IFFALSE 63487
// exit ;
63485: GO 63585
// for i := 1 to 3 do
63487: LD_ADDR_VAR 0 3
63491: PUSH
63492: DOUBLE
63493: LD_INT 1
63495: DEC
63496: ST_TO_ADDR
63497: LD_INT 3
63499: PUSH
63500: FOR_TO
63501: IFFALSE 63583
// begin tmp := GetCargo ( cargo , i ) ;
63503: LD_ADDR_VAR 0 4
63507: PUSH
63508: LD_VAR 0 1
63512: PPUSH
63513: LD_VAR 0 3
63517: PPUSH
63518: CALL_OW 289
63522: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
63523: LD_ADDR_VAR 0 2
63527: PUSH
63528: LD_VAR 0 2
63532: PPUSH
63533: LD_VAR 0 3
63537: PPUSH
63538: LD_VAR 0 4
63542: PPUSH
63543: CALL_OW 1
63547: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
63548: LD_ADDR_VAR 0 2
63552: PUSH
63553: LD_VAR 0 2
63557: PPUSH
63558: LD_INT 4
63560: PPUSH
63561: LD_VAR 0 2
63565: PUSH
63566: LD_INT 4
63568: ARRAY
63569: PUSH
63570: LD_VAR 0 4
63574: PLUS
63575: PPUSH
63576: CALL_OW 1
63580: ST_TO_ADDR
// end ;
63581: GO 63500
63583: POP
63584: POP
// end ;
63585: LD_VAR 0 2
63589: RET
// export function Length ( array ) ; begin
63590: LD_INT 0
63592: PPUSH
// result := array + 0 ;
63593: LD_ADDR_VAR 0 2
63597: PUSH
63598: LD_VAR 0 1
63602: PUSH
63603: LD_INT 0
63605: PLUS
63606: ST_TO_ADDR
// end ;
63607: LD_VAR 0 2
63611: RET
// export function PrepareArray ( array ) ; begin
63612: LD_INT 0
63614: PPUSH
// result := array diff 0 ;
63615: LD_ADDR_VAR 0 2
63619: PUSH
63620: LD_VAR 0 1
63624: PUSH
63625: LD_INT 0
63627: DIFF
63628: ST_TO_ADDR
// if not result [ 1 ] then
63629: LD_VAR 0 2
63633: PUSH
63634: LD_INT 1
63636: ARRAY
63637: NOT
63638: IFFALSE 63658
// result := Delete ( result , 1 ) ;
63640: LD_ADDR_VAR 0 2
63644: PUSH
63645: LD_VAR 0 2
63649: PPUSH
63650: LD_INT 1
63652: PPUSH
63653: CALL_OW 3
63657: ST_TO_ADDR
// end ;
63658: LD_VAR 0 2
63662: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
63663: LD_INT 0
63665: PPUSH
63666: PPUSH
63667: PPUSH
63668: PPUSH
// sibRocketRange := 25 ;
63669: LD_ADDR_VAR 0 6
63673: PUSH
63674: LD_INT 25
63676: ST_TO_ADDR
// result := false ;
63677: LD_ADDR_VAR 0 4
63681: PUSH
63682: LD_INT 0
63684: ST_TO_ADDR
// for i := 0 to 5 do
63685: LD_ADDR_VAR 0 5
63689: PUSH
63690: DOUBLE
63691: LD_INT 0
63693: DEC
63694: ST_TO_ADDR
63695: LD_INT 5
63697: PUSH
63698: FOR_TO
63699: IFFALSE 63766
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
63701: LD_VAR 0 1
63705: PPUSH
63706: LD_VAR 0 5
63710: PPUSH
63711: LD_VAR 0 6
63715: PPUSH
63716: CALL_OW 272
63720: PPUSH
63721: LD_VAR 0 2
63725: PPUSH
63726: LD_VAR 0 5
63730: PPUSH
63731: LD_VAR 0 6
63735: PPUSH
63736: CALL_OW 273
63740: PPUSH
63741: LD_VAR 0 3
63745: PPUSH
63746: CALL_OW 309
63750: IFFALSE 63764
// begin result := true ;
63752: LD_ADDR_VAR 0 4
63756: PUSH
63757: LD_INT 1
63759: ST_TO_ADDR
// exit ;
63760: POP
63761: POP
63762: GO 63768
// end ;
63764: GO 63698
63766: POP
63767: POP
// end ;
63768: LD_VAR 0 4
63772: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
63773: LD_INT 0
63775: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
63776: LD_VAR 0 1
63780: PPUSH
63781: LD_VAR 0 2
63785: PPUSH
63786: LD_INT 0
63788: PPUSH
63789: LD_INT 0
63791: PPUSH
63792: LD_INT 1
63794: PPUSH
63795: LD_INT 0
63797: PPUSH
63798: CALL_OW 587
// end ;
63802: LD_VAR 0 3
63806: RET
// export function CenterOnNow ( unit ) ; begin
63807: LD_INT 0
63809: PPUSH
// result := IsInUnit ( unit ) ;
63810: LD_ADDR_VAR 0 2
63814: PUSH
63815: LD_VAR 0 1
63819: PPUSH
63820: CALL_OW 310
63824: ST_TO_ADDR
// if not result then
63825: LD_VAR 0 2
63829: NOT
63830: IFFALSE 63842
// result := unit ;
63832: LD_ADDR_VAR 0 2
63836: PUSH
63837: LD_VAR 0 1
63841: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
63842: LD_VAR 0 1
63846: PPUSH
63847: CALL_OW 87
// end ;
63851: LD_VAR 0 2
63855: RET
// export function ComMoveHex ( unit , hex ) ; begin
63856: LD_INT 0
63858: PPUSH
// if not hex then
63859: LD_VAR 0 2
63863: NOT
63864: IFFALSE 63868
// exit ;
63866: GO 63921
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
63868: LD_VAR 0 2
63872: PUSH
63873: LD_INT 1
63875: ARRAY
63876: PPUSH
63877: LD_VAR 0 2
63881: PUSH
63882: LD_INT 2
63884: ARRAY
63885: PPUSH
63886: CALL_OW 428
63890: IFFALSE 63894
// exit ;
63892: GO 63921
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
63894: LD_VAR 0 1
63898: PPUSH
63899: LD_VAR 0 2
63903: PUSH
63904: LD_INT 1
63906: ARRAY
63907: PPUSH
63908: LD_VAR 0 2
63912: PUSH
63913: LD_INT 2
63915: ARRAY
63916: PPUSH
63917: CALL_OW 111
// end ;
63921: LD_VAR 0 3
63925: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
63926: LD_INT 0
63928: PPUSH
63929: PPUSH
63930: PPUSH
// if not unit or not enemy then
63931: LD_VAR 0 1
63935: NOT
63936: PUSH
63937: LD_VAR 0 2
63941: NOT
63942: OR
63943: IFFALSE 63947
// exit ;
63945: GO 64071
// x := GetX ( enemy ) ;
63947: LD_ADDR_VAR 0 4
63951: PUSH
63952: LD_VAR 0 2
63956: PPUSH
63957: CALL_OW 250
63961: ST_TO_ADDR
// y := GetY ( enemy ) ;
63962: LD_ADDR_VAR 0 5
63966: PUSH
63967: LD_VAR 0 2
63971: PPUSH
63972: CALL_OW 251
63976: ST_TO_ADDR
// if ValidHex ( x , y ) then
63977: LD_VAR 0 4
63981: PPUSH
63982: LD_VAR 0 5
63986: PPUSH
63987: CALL_OW 488
63991: IFFALSE 64071
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
63993: LD_VAR 0 2
63997: PPUSH
63998: CALL_OW 247
64002: PUSH
64003: LD_INT 3
64005: PUSH
64006: LD_INT 2
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: IN
64013: PUSH
64014: LD_VAR 0 1
64018: PPUSH
64019: CALL_OW 255
64023: PPUSH
64024: LD_VAR 0 2
64028: PPUSH
64029: CALL_OW 292
64033: AND
64034: IFFALSE 64052
// ComAttackUnit ( unit , enemy ) else
64036: LD_VAR 0 1
64040: PPUSH
64041: LD_VAR 0 2
64045: PPUSH
64046: CALL_OW 115
64050: GO 64071
// ComAgressiveMove ( unit , x , y ) ;
64052: LD_VAR 0 1
64056: PPUSH
64057: LD_VAR 0 4
64061: PPUSH
64062: LD_VAR 0 5
64066: PPUSH
64067: CALL_OW 114
// end ;
64071: LD_VAR 0 3
64075: RET
