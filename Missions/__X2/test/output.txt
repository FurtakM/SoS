// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
   0: LD_VAR 0 1
   4: PPUSH
   5: LD_VAR 0 2
   9: PPUSH
  10: CALL 14473 0 2
// end ; end_of_file
  14: PPOPN 2
  16: END
// every 0 0$1 do
  17: GO 19
  19: DISABLE
// begin enable ;
  20: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
  21: LD_STRING updateTimer(
  23: PUSH
  24: LD_OWVAR 1
  28: STR
  29: PUSH
  30: LD_STRING );
  32: STR
  33: PPUSH
  34: CALL_OW 559
// end ;
  38: END
// export function SOS_MapStart ( ) ; begin
  39: LD_INT 0
  41: PPUSH
// if streamModeActive then
  42: LD_EXP 1
  46: IFFALSE 55
// DefineStreamItems ( true ) ;
  48: LD_INT 1
  50: PPUSH
  51: CALL 1705 0 1
// UpdateFactoryWaypoints ( ) ;
  55: CALL 15289 0 0
// end ;
  59: LD_VAR 0 1
  63: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
  64: LD_INT 0
  66: PPUSH
// if p2 = 100 then
  67: LD_VAR 0 2
  71: PUSH
  72: LD_INT 100
  74: EQUAL
  75: IFFALSE 1078
// begin if not StreamModeActive then
  77: LD_EXP 1
  81: NOT
  82: IFFALSE 92
// StreamModeActive := true ;
  84: LD_ADDR_EXP 1
  88: PUSH
  89: LD_INT 1
  91: ST_TO_ADDR
// if p3 = 0 then
  92: LD_VAR 0 3
  96: PUSH
  97: LD_INT 0
  99: EQUAL
 100: IFFALSE 106
// InitStreamMode ;
 102: CALL 1241 0 0
// if p3 = 1 then
 106: LD_VAR 0 3
 110: PUSH
 111: LD_INT 1
 113: EQUAL
 114: IFFALSE 124
// sRocket := true ;
 116: LD_ADDR_EXP 6
 120: PUSH
 121: LD_INT 1
 123: ST_TO_ADDR
// if p3 = 2 then
 124: LD_VAR 0 3
 128: PUSH
 129: LD_INT 2
 131: EQUAL
 132: IFFALSE 142
// sSpeed := true ;
 134: LD_ADDR_EXP 5
 138: PUSH
 139: LD_INT 1
 141: ST_TO_ADDR
// if p3 = 3 then
 142: LD_VAR 0 3
 146: PUSH
 147: LD_INT 3
 149: EQUAL
 150: IFFALSE 160
// sEngine := true ;
 152: LD_ADDR_EXP 7
 156: PUSH
 157: LD_INT 1
 159: ST_TO_ADDR
// if p3 = 4 then
 160: LD_VAR 0 3
 164: PUSH
 165: LD_INT 4
 167: EQUAL
 168: IFFALSE 178
// sSpec := true ;
 170: LD_ADDR_EXP 4
 174: PUSH
 175: LD_INT 1
 177: ST_TO_ADDR
// if p3 = 5 then
 178: LD_VAR 0 3
 182: PUSH
 183: LD_INT 5
 185: EQUAL
 186: IFFALSE 196
// sLevel := true ;
 188: LD_ADDR_EXP 8
 192: PUSH
 193: LD_INT 1
 195: ST_TO_ADDR
// if p3 = 6 then
 196: LD_VAR 0 3
 200: PUSH
 201: LD_INT 6
 203: EQUAL
 204: IFFALSE 214
// sArmoury := true ;
 206: LD_ADDR_EXP 9
 210: PUSH
 211: LD_INT 1
 213: ST_TO_ADDR
// if p3 = 7 then
 214: LD_VAR 0 3
 218: PUSH
 219: LD_INT 7
 221: EQUAL
 222: IFFALSE 232
// sRadar := true ;
 224: LD_ADDR_EXP 10
 228: PUSH
 229: LD_INT 1
 231: ST_TO_ADDR
// if p3 = 8 then
 232: LD_VAR 0 3
 236: PUSH
 237: LD_INT 8
 239: EQUAL
 240: IFFALSE 250
// sBunker := true ;
 242: LD_ADDR_EXP 11
 246: PUSH
 247: LD_INT 1
 249: ST_TO_ADDR
// if p3 = 9 then
 250: LD_VAR 0 3
 254: PUSH
 255: LD_INT 9
 257: EQUAL
 258: IFFALSE 268
// sHack := true ;
 260: LD_ADDR_EXP 12
 264: PUSH
 265: LD_INT 1
 267: ST_TO_ADDR
// if p3 = 10 then
 268: LD_VAR 0 3
 272: PUSH
 273: LD_INT 10
 275: EQUAL
 276: IFFALSE 286
// sFire := true ;
 278: LD_ADDR_EXP 13
 282: PUSH
 283: LD_INT 1
 285: ST_TO_ADDR
// if p3 = 11 then
 286: LD_VAR 0 3
 290: PUSH
 291: LD_INT 11
 293: EQUAL
 294: IFFALSE 304
// sRefresh := true ;
 296: LD_ADDR_EXP 14
 300: PUSH
 301: LD_INT 1
 303: ST_TO_ADDR
// if p3 = 12 then
 304: LD_VAR 0 3
 308: PUSH
 309: LD_INT 12
 311: EQUAL
 312: IFFALSE 322
// sExp := true ;
 314: LD_ADDR_EXP 15
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// if p3 = 13 then
 322: LD_VAR 0 3
 326: PUSH
 327: LD_INT 13
 329: EQUAL
 330: IFFALSE 340
// sDepot := true ;
 332: LD_ADDR_EXP 16
 336: PUSH
 337: LD_INT 1
 339: ST_TO_ADDR
// if p3 = 14 then
 340: LD_VAR 0 3
 344: PUSH
 345: LD_INT 14
 347: EQUAL
 348: IFFALSE 358
// sFlag := true ;
 350: LD_ADDR_EXP 17
 354: PUSH
 355: LD_INT 1
 357: ST_TO_ADDR
// if p3 = 15 then
 358: LD_VAR 0 3
 362: PUSH
 363: LD_INT 15
 365: EQUAL
 366: IFFALSE 376
// sKamikadze := true ;
 368: LD_ADDR_EXP 25
 372: PUSH
 373: LD_INT 1
 375: ST_TO_ADDR
// if p3 = 16 then
 376: LD_VAR 0 3
 380: PUSH
 381: LD_INT 16
 383: EQUAL
 384: IFFALSE 394
// sTroll := true ;
 386: LD_ADDR_EXP 26
 390: PUSH
 391: LD_INT 1
 393: ST_TO_ADDR
// if p3 = 17 then
 394: LD_VAR 0 3
 398: PUSH
 399: LD_INT 17
 401: EQUAL
 402: IFFALSE 412
// sSlow := true ;
 404: LD_ADDR_EXP 27
 408: PUSH
 409: LD_INT 1
 411: ST_TO_ADDR
// if p3 = 18 then
 412: LD_VAR 0 3
 416: PUSH
 417: LD_INT 18
 419: EQUAL
 420: IFFALSE 430
// sLack := true ;
 422: LD_ADDR_EXP 28
 426: PUSH
 427: LD_INT 1
 429: ST_TO_ADDR
// if p3 = 19 then
 430: LD_VAR 0 3
 434: PUSH
 435: LD_INT 19
 437: EQUAL
 438: IFFALSE 448
// sTank := true ;
 440: LD_ADDR_EXP 30
 444: PUSH
 445: LD_INT 1
 447: ST_TO_ADDR
// if p3 = 20 then
 448: LD_VAR 0 3
 452: PUSH
 453: LD_INT 20
 455: EQUAL
 456: IFFALSE 466
// sRemote := true ;
 458: LD_ADDR_EXP 31
 462: PUSH
 463: LD_INT 1
 465: ST_TO_ADDR
// if p3 = 21 then
 466: LD_VAR 0 3
 470: PUSH
 471: LD_INT 21
 473: EQUAL
 474: IFFALSE 484
// sPowell := true ;
 476: LD_ADDR_EXP 32
 480: PUSH
 481: LD_INT 1
 483: ST_TO_ADDR
// if p3 = 22 then
 484: LD_VAR 0 3
 488: PUSH
 489: LD_INT 22
 491: EQUAL
 492: IFFALSE 502
// sTeleport := true ;
 494: LD_ADDR_EXP 35
 498: PUSH
 499: LD_INT 1
 501: ST_TO_ADDR
// if p3 = 23 then
 502: LD_VAR 0 3
 506: PUSH
 507: LD_INT 23
 509: EQUAL
 510: IFFALSE 520
// sOilTower := true ;
 512: LD_ADDR_EXP 37
 516: PUSH
 517: LD_INT 1
 519: ST_TO_ADDR
// if p3 = 24 then
 520: LD_VAR 0 3
 524: PUSH
 525: LD_INT 24
 527: EQUAL
 528: IFFALSE 538
// sShovel := true ;
 530: LD_ADDR_EXP 38
 534: PUSH
 535: LD_INT 1
 537: ST_TO_ADDR
// if p3 = 25 then
 538: LD_VAR 0 3
 542: PUSH
 543: LD_INT 25
 545: EQUAL
 546: IFFALSE 556
// sSheik := true ;
 548: LD_ADDR_EXP 39
 552: PUSH
 553: LD_INT 1
 555: ST_TO_ADDR
// if p3 = 26 then
 556: LD_VAR 0 3
 560: PUSH
 561: LD_INT 26
 563: EQUAL
 564: IFFALSE 574
// sEarthquake := true ;
 566: LD_ADDR_EXP 41
 570: PUSH
 571: LD_INT 1
 573: ST_TO_ADDR
// if p3 = 27 then
 574: LD_VAR 0 3
 578: PUSH
 579: LD_INT 27
 581: EQUAL
 582: IFFALSE 592
// sAI := true ;
 584: LD_ADDR_EXP 42
 588: PUSH
 589: LD_INT 1
 591: ST_TO_ADDR
// if p3 = 28 then
 592: LD_VAR 0 3
 596: PUSH
 597: LD_INT 28
 599: EQUAL
 600: IFFALSE 610
// sCargo := true ;
 602: LD_ADDR_EXP 45
 606: PUSH
 607: LD_INT 1
 609: ST_TO_ADDR
// if p3 = 29 then
 610: LD_VAR 0 3
 614: PUSH
 615: LD_INT 29
 617: EQUAL
 618: IFFALSE 628
// sDLaser := true ;
 620: LD_ADDR_EXP 46
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// if p3 = 30 then
 628: LD_VAR 0 3
 632: PUSH
 633: LD_INT 30
 635: EQUAL
 636: IFFALSE 646
// sExchange := true ;
 638: LD_ADDR_EXP 47
 642: PUSH
 643: LD_INT 1
 645: ST_TO_ADDR
// if p3 = 31 then
 646: LD_VAR 0 3
 650: PUSH
 651: LD_INT 31
 653: EQUAL
 654: IFFALSE 664
// sFac := true ;
 656: LD_ADDR_EXP 48
 660: PUSH
 661: LD_INT 1
 663: ST_TO_ADDR
// if p3 = 32 then
 664: LD_VAR 0 3
 668: PUSH
 669: LD_INT 32
 671: EQUAL
 672: IFFALSE 682
// sPower := true ;
 674: LD_ADDR_EXP 49
 678: PUSH
 679: LD_INT 1
 681: ST_TO_ADDR
// if p3 = 33 then
 682: LD_VAR 0 3
 686: PUSH
 687: LD_INT 33
 689: EQUAL
 690: IFFALSE 700
// sRandom := true ;
 692: LD_ADDR_EXP 50
 696: PUSH
 697: LD_INT 1
 699: ST_TO_ADDR
// if p3 = 34 then
 700: LD_VAR 0 3
 704: PUSH
 705: LD_INT 34
 707: EQUAL
 708: IFFALSE 718
// sShield := true ;
 710: LD_ADDR_EXP 51
 714: PUSH
 715: LD_INT 1
 717: ST_TO_ADDR
// if p3 = 35 then
 718: LD_VAR 0 3
 722: PUSH
 723: LD_INT 35
 725: EQUAL
 726: IFFALSE 736
// sTime := true ;
 728: LD_ADDR_EXP 52
 732: PUSH
 733: LD_INT 1
 735: ST_TO_ADDR
// if p3 = 36 then
 736: LD_VAR 0 3
 740: PUSH
 741: LD_INT 36
 743: EQUAL
 744: IFFALSE 754
// sTools := true ;
 746: LD_ADDR_EXP 53
 750: PUSH
 751: LD_INT 1
 753: ST_TO_ADDR
// if p3 = 101 then
 754: LD_VAR 0 3
 758: PUSH
 759: LD_INT 101
 761: EQUAL
 762: IFFALSE 772
// sSold := true ;
 764: LD_ADDR_EXP 18
 768: PUSH
 769: LD_INT 1
 771: ST_TO_ADDR
// if p3 = 102 then
 772: LD_VAR 0 3
 776: PUSH
 777: LD_INT 102
 779: EQUAL
 780: IFFALSE 790
// sDiff := true ;
 782: LD_ADDR_EXP 19
 786: PUSH
 787: LD_INT 1
 789: ST_TO_ADDR
// if p3 = 103 then
 790: LD_VAR 0 3
 794: PUSH
 795: LD_INT 103
 797: EQUAL
 798: IFFALSE 808
// sFog := true ;
 800: LD_ADDR_EXP 22
 804: PUSH
 805: LD_INT 1
 807: ST_TO_ADDR
// if p3 = 104 then
 808: LD_VAR 0 3
 812: PUSH
 813: LD_INT 104
 815: EQUAL
 816: IFFALSE 826
// sReset := true ;
 818: LD_ADDR_EXP 23
 822: PUSH
 823: LD_INT 1
 825: ST_TO_ADDR
// if p3 = 105 then
 826: LD_VAR 0 3
 830: PUSH
 831: LD_INT 105
 833: EQUAL
 834: IFFALSE 844
// sSun := true ;
 836: LD_ADDR_EXP 24
 840: PUSH
 841: LD_INT 1
 843: ST_TO_ADDR
// if p3 = 106 then
 844: LD_VAR 0 3
 848: PUSH
 849: LD_INT 106
 851: EQUAL
 852: IFFALSE 862
// sTiger := true ;
 854: LD_ADDR_EXP 20
 858: PUSH
 859: LD_INT 1
 861: ST_TO_ADDR
// if p3 = 107 then
 862: LD_VAR 0 3
 866: PUSH
 867: LD_INT 107
 869: EQUAL
 870: IFFALSE 880
// sBomb := true ;
 872: LD_ADDR_EXP 21
 876: PUSH
 877: LD_INT 1
 879: ST_TO_ADDR
// if p3 = 108 then
 880: LD_VAR 0 3
 884: PUSH
 885: LD_INT 108
 887: EQUAL
 888: IFFALSE 898
// sWound := true ;
 890: LD_ADDR_EXP 29
 894: PUSH
 895: LD_INT 1
 897: ST_TO_ADDR
// if p3 = 109 then
 898: LD_VAR 0 3
 902: PUSH
 903: LD_INT 109
 905: EQUAL
 906: IFFALSE 916
// sBetray := true ;
 908: LD_ADDR_EXP 33
 912: PUSH
 913: LD_INT 1
 915: ST_TO_ADDR
// if p3 = 110 then
 916: LD_VAR 0 3
 920: PUSH
 921: LD_INT 110
 923: EQUAL
 924: IFFALSE 934
// sContamin := true ;
 926: LD_ADDR_EXP 34
 930: PUSH
 931: LD_INT 1
 933: ST_TO_ADDR
// if p3 = 111 then
 934: LD_VAR 0 3
 938: PUSH
 939: LD_INT 111
 941: EQUAL
 942: IFFALSE 952
// sOil := true ;
 944: LD_ADDR_EXP 36
 948: PUSH
 949: LD_INT 1
 951: ST_TO_ADDR
// if p3 = 112 then
 952: LD_VAR 0 3
 956: PUSH
 957: LD_INT 112
 959: EQUAL
 960: IFFALSE 970
// sStu := true ;
 962: LD_ADDR_EXP 40
 966: PUSH
 967: LD_INT 1
 969: ST_TO_ADDR
// if p3 = 113 then
 970: LD_VAR 0 3
 974: PUSH
 975: LD_INT 113
 977: EQUAL
 978: IFFALSE 988
// sBazooka := true ;
 980: LD_ADDR_EXP 43
 984: PUSH
 985: LD_INT 1
 987: ST_TO_ADDR
// if p3 = 114 then
 988: LD_VAR 0 3
 992: PUSH
 993: LD_INT 114
 995: EQUAL
 996: IFFALSE 1006
// sMortar := true ;
 998: LD_ADDR_EXP 44
1002: PUSH
1003: LD_INT 1
1005: ST_TO_ADDR
// if p3 = 115 then
1006: LD_VAR 0 3
1010: PUSH
1011: LD_INT 115
1013: EQUAL
1014: IFFALSE 1024
// sRanger := true ;
1016: LD_ADDR_EXP 54
1020: PUSH
1021: LD_INT 1
1023: ST_TO_ADDR
// if p3 = 116 then
1024: LD_VAR 0 3
1028: PUSH
1029: LD_INT 116
1031: EQUAL
1032: IFFALSE 1042
// sComputer := true ;
1034: LD_ADDR_EXP 55
1038: PUSH
1039: LD_INT 1
1041: ST_TO_ADDR
// if p3 = 117 then
1042: LD_VAR 0 3
1046: PUSH
1047: LD_INT 117
1049: EQUAL
1050: IFFALSE 1060
// s30 := true ;
1052: LD_ADDR_EXP 56
1056: PUSH
1057: LD_INT 1
1059: ST_TO_ADDR
// if p3 = 118 then
1060: LD_VAR 0 3
1064: PUSH
1065: LD_INT 118
1067: EQUAL
1068: IFFALSE 1078
// s60 := true ;
1070: LD_ADDR_EXP 57
1074: PUSH
1075: LD_INT 1
1077: ST_TO_ADDR
// end ; if p2 = 101 then
1078: LD_VAR 0 2
1082: PUSH
1083: LD_INT 101
1085: EQUAL
1086: IFFALSE 1214
// begin case p3 of 1 :
1088: LD_VAR 0 3
1092: PUSH
1093: LD_INT 1
1095: DOUBLE
1096: EQUAL
1097: IFTRUE 1101
1099: GO 1108
1101: POP
// hHackUnlimitedResources ; 2 :
1102: CALL 13312 0 0
1106: GO 1214
1108: LD_INT 2
1110: DOUBLE
1111: EQUAL
1112: IFTRUE 1116
1114: GO 1123
1116: POP
// hHackSetLevel10 ; 3 :
1117: CALL 13445 0 0
1121: GO 1214
1123: LD_INT 3
1125: DOUBLE
1126: EQUAL
1127: IFTRUE 1131
1129: GO 1138
1131: POP
// hHackSetLevel10YourUnits ; 4 :
1132: CALL 13530 0 0
1136: GO 1214
1138: LD_INT 4
1140: DOUBLE
1141: EQUAL
1142: IFTRUE 1146
1144: GO 1153
1146: POP
// hHackInvincible ; 5 :
1147: CALL 13978 0 0
1151: GO 1214
1153: LD_INT 5
1155: DOUBLE
1156: EQUAL
1157: IFTRUE 1161
1159: GO 1168
1161: POP
// hHackInvisible ; 6 :
1162: CALL 14089 0 0
1166: GO 1214
1168: LD_INT 6
1170: DOUBLE
1171: EQUAL
1172: IFTRUE 1176
1174: GO 1183
1176: POP
// hHackChangeYourSide ; 7 :
1177: CALL 14146 0 0
1181: GO 1214
1183: LD_INT 7
1185: DOUBLE
1186: EQUAL
1187: IFTRUE 1191
1189: GO 1198
1191: POP
// hHackChangeUnitSide ; 8 :
1192: CALL 14188 0 0
1196: GO 1214
1198: LD_INT 8
1200: DOUBLE
1201: EQUAL
1202: IFTRUE 1206
1204: GO 1213
1206: POP
// hHackFog ; end ;
1207: CALL 14289 0 0
1211: GO 1214
1213: POP
// end ; end ;
1214: LD_VAR 0 7
1218: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
1219: GO 1221
1221: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
1222: LD_STRING initStreamRollete();
1224: PPUSH
1225: CALL_OW 559
// InitStreamMode ;
1229: CALL 1241 0 0
// DefineStreamItems ( false ) ;
1233: LD_INT 0
1235: PPUSH
1236: CALL 1705 0 1
// end ;
1240: END
// function InitStreamMode ; begin
1241: LD_INT 0
1243: PPUSH
// streamModeActive := false ;
1244: LD_ADDR_EXP 1
1248: PUSH
1249: LD_INT 0
1251: ST_TO_ADDR
// normalCounter := 36 ;
1252: LD_ADDR_EXP 2
1256: PUSH
1257: LD_INT 36
1259: ST_TO_ADDR
// hardcoreCounter := 18 ;
1260: LD_ADDR_EXP 3
1264: PUSH
1265: LD_INT 18
1267: ST_TO_ADDR
// sRocket := false ;
1268: LD_ADDR_EXP 6
1272: PUSH
1273: LD_INT 0
1275: ST_TO_ADDR
// sSpeed := false ;
1276: LD_ADDR_EXP 5
1280: PUSH
1281: LD_INT 0
1283: ST_TO_ADDR
// sEngine := false ;
1284: LD_ADDR_EXP 7
1288: PUSH
1289: LD_INT 0
1291: ST_TO_ADDR
// sSpec := false ;
1292: LD_ADDR_EXP 4
1296: PUSH
1297: LD_INT 0
1299: ST_TO_ADDR
// sLevel := false ;
1300: LD_ADDR_EXP 8
1304: PUSH
1305: LD_INT 0
1307: ST_TO_ADDR
// sArmoury := false ;
1308: LD_ADDR_EXP 9
1312: PUSH
1313: LD_INT 0
1315: ST_TO_ADDR
// sRadar := false ;
1316: LD_ADDR_EXP 10
1320: PUSH
1321: LD_INT 0
1323: ST_TO_ADDR
// sBunker := false ;
1324: LD_ADDR_EXP 11
1328: PUSH
1329: LD_INT 0
1331: ST_TO_ADDR
// sHack := false ;
1332: LD_ADDR_EXP 12
1336: PUSH
1337: LD_INT 0
1339: ST_TO_ADDR
// sFire := false ;
1340: LD_ADDR_EXP 13
1344: PUSH
1345: LD_INT 0
1347: ST_TO_ADDR
// sRefresh := false ;
1348: LD_ADDR_EXP 14
1352: PUSH
1353: LD_INT 0
1355: ST_TO_ADDR
// sExp := false ;
1356: LD_ADDR_EXP 15
1360: PUSH
1361: LD_INT 0
1363: ST_TO_ADDR
// sDepot := false ;
1364: LD_ADDR_EXP 16
1368: PUSH
1369: LD_INT 0
1371: ST_TO_ADDR
// sFlag := false ;
1372: LD_ADDR_EXP 17
1376: PUSH
1377: LD_INT 0
1379: ST_TO_ADDR
// sKamikadze := false ;
1380: LD_ADDR_EXP 25
1384: PUSH
1385: LD_INT 0
1387: ST_TO_ADDR
// sTroll := false ;
1388: LD_ADDR_EXP 26
1392: PUSH
1393: LD_INT 0
1395: ST_TO_ADDR
// sSlow := false ;
1396: LD_ADDR_EXP 27
1400: PUSH
1401: LD_INT 0
1403: ST_TO_ADDR
// sLack := false ;
1404: LD_ADDR_EXP 28
1408: PUSH
1409: LD_INT 0
1411: ST_TO_ADDR
// sTank := false ;
1412: LD_ADDR_EXP 30
1416: PUSH
1417: LD_INT 0
1419: ST_TO_ADDR
// sRemote := false ;
1420: LD_ADDR_EXP 31
1424: PUSH
1425: LD_INT 0
1427: ST_TO_ADDR
// sPowell := false ;
1428: LD_ADDR_EXP 32
1432: PUSH
1433: LD_INT 0
1435: ST_TO_ADDR
// sTeleport := false ;
1436: LD_ADDR_EXP 35
1440: PUSH
1441: LD_INT 0
1443: ST_TO_ADDR
// sOilTower := false ;
1444: LD_ADDR_EXP 37
1448: PUSH
1449: LD_INT 0
1451: ST_TO_ADDR
// sShovel := false ;
1452: LD_ADDR_EXP 38
1456: PUSH
1457: LD_INT 0
1459: ST_TO_ADDR
// sSheik := false ;
1460: LD_ADDR_EXP 39
1464: PUSH
1465: LD_INT 0
1467: ST_TO_ADDR
// sEarthquake := false ;
1468: LD_ADDR_EXP 41
1472: PUSH
1473: LD_INT 0
1475: ST_TO_ADDR
// sAI := false ;
1476: LD_ADDR_EXP 42
1480: PUSH
1481: LD_INT 0
1483: ST_TO_ADDR
// sCargo := false ;
1484: LD_ADDR_EXP 45
1488: PUSH
1489: LD_INT 0
1491: ST_TO_ADDR
// sDLaser := false ;
1492: LD_ADDR_EXP 46
1496: PUSH
1497: LD_INT 0
1499: ST_TO_ADDR
// sExchange := false ;
1500: LD_ADDR_EXP 47
1504: PUSH
1505: LD_INT 0
1507: ST_TO_ADDR
// sFac := false ;
1508: LD_ADDR_EXP 48
1512: PUSH
1513: LD_INT 0
1515: ST_TO_ADDR
// sPower := false ;
1516: LD_ADDR_EXP 49
1520: PUSH
1521: LD_INT 0
1523: ST_TO_ADDR
// sRandom := false ;
1524: LD_ADDR_EXP 50
1528: PUSH
1529: LD_INT 0
1531: ST_TO_ADDR
// sShield := false ;
1532: LD_ADDR_EXP 51
1536: PUSH
1537: LD_INT 0
1539: ST_TO_ADDR
// sTime := false ;
1540: LD_ADDR_EXP 52
1544: PUSH
1545: LD_INT 0
1547: ST_TO_ADDR
// sTools := false ;
1548: LD_ADDR_EXP 53
1552: PUSH
1553: LD_INT 0
1555: ST_TO_ADDR
// sSold := false ;
1556: LD_ADDR_EXP 18
1560: PUSH
1561: LD_INT 0
1563: ST_TO_ADDR
// sDiff := false ;
1564: LD_ADDR_EXP 19
1568: PUSH
1569: LD_INT 0
1571: ST_TO_ADDR
// sFog := false ;
1572: LD_ADDR_EXP 22
1576: PUSH
1577: LD_INT 0
1579: ST_TO_ADDR
// sReset := false ;
1580: LD_ADDR_EXP 23
1584: PUSH
1585: LD_INT 0
1587: ST_TO_ADDR
// sSun := false ;
1588: LD_ADDR_EXP 24
1592: PUSH
1593: LD_INT 0
1595: ST_TO_ADDR
// sTiger := false ;
1596: LD_ADDR_EXP 20
1600: PUSH
1601: LD_INT 0
1603: ST_TO_ADDR
// sBomb := false ;
1604: LD_ADDR_EXP 21
1608: PUSH
1609: LD_INT 0
1611: ST_TO_ADDR
// sWound := false ;
1612: LD_ADDR_EXP 29
1616: PUSH
1617: LD_INT 0
1619: ST_TO_ADDR
// sBetray := false ;
1620: LD_ADDR_EXP 33
1624: PUSH
1625: LD_INT 0
1627: ST_TO_ADDR
// sContamin := false ;
1628: LD_ADDR_EXP 34
1632: PUSH
1633: LD_INT 0
1635: ST_TO_ADDR
// sOil := false ;
1636: LD_ADDR_EXP 36
1640: PUSH
1641: LD_INT 0
1643: ST_TO_ADDR
// sStu := false ;
1644: LD_ADDR_EXP 40
1648: PUSH
1649: LD_INT 0
1651: ST_TO_ADDR
// sBazooka := false ;
1652: LD_ADDR_EXP 43
1656: PUSH
1657: LD_INT 0
1659: ST_TO_ADDR
// sMortar := false ;
1660: LD_ADDR_EXP 44
1664: PUSH
1665: LD_INT 0
1667: ST_TO_ADDR
// sRanger := false ;
1668: LD_ADDR_EXP 54
1672: PUSH
1673: LD_INT 0
1675: ST_TO_ADDR
// sComputer := false ;
1676: LD_ADDR_EXP 55
1680: PUSH
1681: LD_INT 0
1683: ST_TO_ADDR
// s30 := false ;
1684: LD_ADDR_EXP 56
1688: PUSH
1689: LD_INT 0
1691: ST_TO_ADDR
// s60 := false ;
1692: LD_ADDR_EXP 57
1696: PUSH
1697: LD_INT 0
1699: ST_TO_ADDR
// end ;
1700: LD_VAR 0 1
1704: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
1705: LD_INT 0
1707: PPUSH
1708: PPUSH
1709: PPUSH
1710: PPUSH
1711: PPUSH
1712: PPUSH
1713: PPUSH
// result := [ ] ;
1714: LD_ADDR_VAR 0 2
1718: PUSH
1719: EMPTY
1720: ST_TO_ADDR
// if campaign_id = 1 then
1721: LD_OWVAR 69
1725: PUSH
1726: LD_INT 1
1728: EQUAL
1729: IFFALSE 4895
// begin case mission_number of 1 :
1731: LD_OWVAR 70
1735: PUSH
1736: LD_INT 1
1738: DOUBLE
1739: EQUAL
1740: IFTRUE 1744
1742: GO 1820
1744: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
1745: LD_ADDR_VAR 0 2
1749: PUSH
1750: LD_INT 2
1752: PUSH
1753: LD_INT 4
1755: PUSH
1756: LD_INT 11
1758: PUSH
1759: LD_INT 12
1761: PUSH
1762: LD_INT 15
1764: PUSH
1765: LD_INT 16
1767: PUSH
1768: LD_INT 22
1770: PUSH
1771: LD_INT 23
1773: PUSH
1774: LD_INT 26
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: PUSH
1788: LD_INT 101
1790: PUSH
1791: LD_INT 102
1793: PUSH
1794: LD_INT 106
1796: PUSH
1797: LD_INT 116
1799: PUSH
1800: LD_INT 117
1802: PUSH
1803: LD_INT 118
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: ST_TO_ADDR
1818: GO 4893
1820: LD_INT 2
1822: DOUBLE
1823: EQUAL
1824: IFTRUE 1828
1826: GO 1912
1828: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
1829: LD_ADDR_VAR 0 2
1833: PUSH
1834: LD_INT 2
1836: PUSH
1837: LD_INT 4
1839: PUSH
1840: LD_INT 11
1842: PUSH
1843: LD_INT 12
1845: PUSH
1846: LD_INT 15
1848: PUSH
1849: LD_INT 16
1851: PUSH
1852: LD_INT 22
1854: PUSH
1855: LD_INT 23
1857: PUSH
1858: LD_INT 26
1860: PUSH
1861: EMPTY
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: PUSH
1872: LD_INT 101
1874: PUSH
1875: LD_INT 102
1877: PUSH
1878: LD_INT 105
1880: PUSH
1881: LD_INT 106
1883: PUSH
1884: LD_INT 108
1886: PUSH
1887: LD_INT 116
1889: PUSH
1890: LD_INT 117
1892: PUSH
1893: LD_INT 118
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: PUSH
1906: EMPTY
1907: LIST
1908: LIST
1909: ST_TO_ADDR
1910: GO 4893
1912: LD_INT 3
1914: DOUBLE
1915: EQUAL
1916: IFTRUE 1920
1918: GO 2008
1920: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
1921: LD_ADDR_VAR 0 2
1925: PUSH
1926: LD_INT 2
1928: PUSH
1929: LD_INT 4
1931: PUSH
1932: LD_INT 5
1934: PUSH
1935: LD_INT 11
1937: PUSH
1938: LD_INT 12
1940: PUSH
1941: LD_INT 15
1943: PUSH
1944: LD_INT 16
1946: PUSH
1947: LD_INT 22
1949: PUSH
1950: LD_INT 26
1952: PUSH
1953: LD_INT 36
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: PUSH
1968: LD_INT 101
1970: PUSH
1971: LD_INT 102
1973: PUSH
1974: LD_INT 105
1976: PUSH
1977: LD_INT 106
1979: PUSH
1980: LD_INT 108
1982: PUSH
1983: LD_INT 116
1985: PUSH
1986: LD_INT 117
1988: PUSH
1989: LD_INT 118
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: ST_TO_ADDR
2006: GO 4893
2008: LD_INT 4
2010: DOUBLE
2011: EQUAL
2012: IFTRUE 2016
2014: GO 2112
2016: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
2017: LD_ADDR_VAR 0 2
2021: PUSH
2022: LD_INT 2
2024: PUSH
2025: LD_INT 4
2027: PUSH
2028: LD_INT 5
2030: PUSH
2031: LD_INT 8
2033: PUSH
2034: LD_INT 11
2036: PUSH
2037: LD_INT 12
2039: PUSH
2040: LD_INT 15
2042: PUSH
2043: LD_INT 16
2045: PUSH
2046: LD_INT 22
2048: PUSH
2049: LD_INT 23
2051: PUSH
2052: LD_INT 26
2054: PUSH
2055: LD_INT 36
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: PUSH
2072: LD_INT 101
2074: PUSH
2075: LD_INT 102
2077: PUSH
2078: LD_INT 105
2080: PUSH
2081: LD_INT 106
2083: PUSH
2084: LD_INT 108
2086: PUSH
2087: LD_INT 116
2089: PUSH
2090: LD_INT 117
2092: PUSH
2093: LD_INT 118
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: ST_TO_ADDR
2110: GO 4893
2112: LD_INT 5
2114: DOUBLE
2115: EQUAL
2116: IFTRUE 2120
2118: GO 2232
2120: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
2121: LD_ADDR_VAR 0 2
2125: PUSH
2126: LD_INT 2
2128: PUSH
2129: LD_INT 4
2131: PUSH
2132: LD_INT 5
2134: PUSH
2135: LD_INT 6
2137: PUSH
2138: LD_INT 8
2140: PUSH
2141: LD_INT 11
2143: PUSH
2144: LD_INT 12
2146: PUSH
2147: LD_INT 15
2149: PUSH
2150: LD_INT 16
2152: PUSH
2153: LD_INT 22
2155: PUSH
2156: LD_INT 23
2158: PUSH
2159: LD_INT 25
2161: PUSH
2162: LD_INT 26
2164: PUSH
2165: LD_INT 36
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: PUSH
2184: LD_INT 101
2186: PUSH
2187: LD_INT 102
2189: PUSH
2190: LD_INT 105
2192: PUSH
2193: LD_INT 106
2195: PUSH
2196: LD_INT 108
2198: PUSH
2199: LD_INT 109
2201: PUSH
2202: LD_INT 112
2204: PUSH
2205: LD_INT 116
2207: PUSH
2208: LD_INT 117
2210: PUSH
2211: LD_INT 118
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: LIST
2218: LIST
2219: LIST
2220: LIST
2221: LIST
2222: LIST
2223: LIST
2224: LIST
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: ST_TO_ADDR
2230: GO 4893
2232: LD_INT 6
2234: DOUBLE
2235: EQUAL
2236: IFTRUE 2240
2238: GO 2372
2240: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
2241: LD_ADDR_VAR 0 2
2245: PUSH
2246: LD_INT 2
2248: PUSH
2249: LD_INT 4
2251: PUSH
2252: LD_INT 5
2254: PUSH
2255: LD_INT 6
2257: PUSH
2258: LD_INT 8
2260: PUSH
2261: LD_INT 11
2263: PUSH
2264: LD_INT 12
2266: PUSH
2267: LD_INT 15
2269: PUSH
2270: LD_INT 16
2272: PUSH
2273: LD_INT 20
2275: PUSH
2276: LD_INT 21
2278: PUSH
2279: LD_INT 22
2281: PUSH
2282: LD_INT 23
2284: PUSH
2285: LD_INT 25
2287: PUSH
2288: LD_INT 26
2290: PUSH
2291: LD_INT 30
2293: PUSH
2294: LD_INT 31
2296: PUSH
2297: LD_INT 32
2299: PUSH
2300: LD_INT 36
2302: PUSH
2303: EMPTY
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: PUSH
2324: LD_INT 101
2326: PUSH
2327: LD_INT 102
2329: PUSH
2330: LD_INT 105
2332: PUSH
2333: LD_INT 106
2335: PUSH
2336: LD_INT 108
2338: PUSH
2339: LD_INT 109
2341: PUSH
2342: LD_INT 112
2344: PUSH
2345: LD_INT 116
2347: PUSH
2348: LD_INT 117
2350: PUSH
2351: LD_INT 118
2353: PUSH
2354: EMPTY
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: LIST
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: ST_TO_ADDR
2370: GO 4893
2372: LD_INT 7
2374: DOUBLE
2375: EQUAL
2376: IFTRUE 2380
2378: GO 2492
2380: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
2381: LD_ADDR_VAR 0 2
2385: PUSH
2386: LD_INT 2
2388: PUSH
2389: LD_INT 4
2391: PUSH
2392: LD_INT 5
2394: PUSH
2395: LD_INT 7
2397: PUSH
2398: LD_INT 11
2400: PUSH
2401: LD_INT 12
2403: PUSH
2404: LD_INT 15
2406: PUSH
2407: LD_INT 16
2409: PUSH
2410: LD_INT 20
2412: PUSH
2413: LD_INT 21
2415: PUSH
2416: LD_INT 22
2418: PUSH
2419: LD_INT 23
2421: PUSH
2422: LD_INT 25
2424: PUSH
2425: LD_INT 26
2427: PUSH
2428: EMPTY
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: LIST
2439: LIST
2440: LIST
2441: LIST
2442: LIST
2443: PUSH
2444: LD_INT 101
2446: PUSH
2447: LD_INT 102
2449: PUSH
2450: LD_INT 103
2452: PUSH
2453: LD_INT 105
2455: PUSH
2456: LD_INT 106
2458: PUSH
2459: LD_INT 108
2461: PUSH
2462: LD_INT 112
2464: PUSH
2465: LD_INT 116
2467: PUSH
2468: LD_INT 117
2470: PUSH
2471: LD_INT 118
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: LIST
2478: LIST
2479: LIST
2480: LIST
2481: LIST
2482: LIST
2483: LIST
2484: LIST
2485: PUSH
2486: EMPTY
2487: LIST
2488: LIST
2489: ST_TO_ADDR
2490: GO 4893
2492: LD_INT 8
2494: DOUBLE
2495: EQUAL
2496: IFTRUE 2500
2498: GO 2640
2500: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
2501: LD_ADDR_VAR 0 2
2505: PUSH
2506: LD_INT 2
2508: PUSH
2509: LD_INT 4
2511: PUSH
2512: LD_INT 5
2514: PUSH
2515: LD_INT 6
2517: PUSH
2518: LD_INT 7
2520: PUSH
2521: LD_INT 8
2523: PUSH
2524: LD_INT 11
2526: PUSH
2527: LD_INT 12
2529: PUSH
2530: LD_INT 15
2532: PUSH
2533: LD_INT 16
2535: PUSH
2536: LD_INT 20
2538: PUSH
2539: LD_INT 21
2541: PUSH
2542: LD_INT 22
2544: PUSH
2545: LD_INT 23
2547: PUSH
2548: LD_INT 25
2550: PUSH
2551: LD_INT 26
2553: PUSH
2554: LD_INT 30
2556: PUSH
2557: LD_INT 31
2559: PUSH
2560: LD_INT 32
2562: PUSH
2563: LD_INT 36
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: LIST
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: LIST
2585: LIST
2586: LIST
2587: PUSH
2588: LD_INT 101
2590: PUSH
2591: LD_INT 102
2593: PUSH
2594: LD_INT 103
2596: PUSH
2597: LD_INT 105
2599: PUSH
2600: LD_INT 106
2602: PUSH
2603: LD_INT 108
2605: PUSH
2606: LD_INT 109
2608: PUSH
2609: LD_INT 112
2611: PUSH
2612: LD_INT 116
2614: PUSH
2615: LD_INT 117
2617: PUSH
2618: LD_INT 118
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: LIST
2632: LIST
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: ST_TO_ADDR
2638: GO 4893
2640: LD_INT 9
2642: DOUBLE
2643: EQUAL
2644: IFTRUE 2648
2646: GO 2796
2648: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
2649: LD_ADDR_VAR 0 2
2653: PUSH
2654: LD_INT 2
2656: PUSH
2657: LD_INT 4
2659: PUSH
2660: LD_INT 5
2662: PUSH
2663: LD_INT 6
2665: PUSH
2666: LD_INT 7
2668: PUSH
2669: LD_INT 8
2671: PUSH
2672: LD_INT 11
2674: PUSH
2675: LD_INT 12
2677: PUSH
2678: LD_INT 15
2680: PUSH
2681: LD_INT 16
2683: PUSH
2684: LD_INT 20
2686: PUSH
2687: LD_INT 21
2689: PUSH
2690: LD_INT 22
2692: PUSH
2693: LD_INT 23
2695: PUSH
2696: LD_INT 25
2698: PUSH
2699: LD_INT 26
2701: PUSH
2702: LD_INT 28
2704: PUSH
2705: LD_INT 30
2707: PUSH
2708: LD_INT 31
2710: PUSH
2711: LD_INT 32
2713: PUSH
2714: LD_INT 36
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: LIST
2721: LIST
2722: LIST
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: LIST
2729: LIST
2730: LIST
2731: LIST
2732: LIST
2733: LIST
2734: LIST
2735: LIST
2736: LIST
2737: LIST
2738: LIST
2739: PUSH
2740: LD_INT 101
2742: PUSH
2743: LD_INT 102
2745: PUSH
2746: LD_INT 103
2748: PUSH
2749: LD_INT 105
2751: PUSH
2752: LD_INT 106
2754: PUSH
2755: LD_INT 108
2757: PUSH
2758: LD_INT 109
2760: PUSH
2761: LD_INT 112
2763: PUSH
2764: LD_INT 114
2766: PUSH
2767: LD_INT 116
2769: PUSH
2770: LD_INT 117
2772: PUSH
2773: LD_INT 118
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: LIST
2780: LIST
2781: LIST
2782: LIST
2783: LIST
2784: LIST
2785: LIST
2786: LIST
2787: LIST
2788: LIST
2789: PUSH
2790: EMPTY
2791: LIST
2792: LIST
2793: ST_TO_ADDR
2794: GO 4893
2796: LD_INT 10
2798: DOUBLE
2799: EQUAL
2800: IFTRUE 2804
2802: GO 3000
2804: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
2805: LD_ADDR_VAR 0 2
2809: PUSH
2810: LD_INT 2
2812: PUSH
2813: LD_INT 4
2815: PUSH
2816: LD_INT 5
2818: PUSH
2819: LD_INT 6
2821: PUSH
2822: LD_INT 7
2824: PUSH
2825: LD_INT 8
2827: PUSH
2828: LD_INT 9
2830: PUSH
2831: LD_INT 10
2833: PUSH
2834: LD_INT 11
2836: PUSH
2837: LD_INT 12
2839: PUSH
2840: LD_INT 13
2842: PUSH
2843: LD_INT 14
2845: PUSH
2846: LD_INT 15
2848: PUSH
2849: LD_INT 16
2851: PUSH
2852: LD_INT 17
2854: PUSH
2855: LD_INT 18
2857: PUSH
2858: LD_INT 19
2860: PUSH
2861: LD_INT 20
2863: PUSH
2864: LD_INT 21
2866: PUSH
2867: LD_INT 22
2869: PUSH
2870: LD_INT 23
2872: PUSH
2873: LD_INT 24
2875: PUSH
2876: LD_INT 25
2878: PUSH
2879: LD_INT 26
2881: PUSH
2882: LD_INT 28
2884: PUSH
2885: LD_INT 30
2887: PUSH
2888: LD_INT 31
2890: PUSH
2891: LD_INT 32
2893: PUSH
2894: LD_INT 36
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: LIST
2901: LIST
2902: LIST
2903: LIST
2904: LIST
2905: LIST
2906: LIST
2907: LIST
2908: LIST
2909: LIST
2910: LIST
2911: LIST
2912: LIST
2913: LIST
2914: LIST
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: LIST
2920: LIST
2921: LIST
2922: LIST
2923: LIST
2924: LIST
2925: LIST
2926: LIST
2927: PUSH
2928: LD_INT 101
2930: PUSH
2931: LD_INT 102
2933: PUSH
2934: LD_INT 103
2936: PUSH
2937: LD_INT 104
2939: PUSH
2940: LD_INT 105
2942: PUSH
2943: LD_INT 106
2945: PUSH
2946: LD_INT 107
2948: PUSH
2949: LD_INT 108
2951: PUSH
2952: LD_INT 109
2954: PUSH
2955: LD_INT 110
2957: PUSH
2958: LD_INT 111
2960: PUSH
2961: LD_INT 112
2963: PUSH
2964: LD_INT 114
2966: PUSH
2967: LD_INT 116
2969: PUSH
2970: LD_INT 117
2972: PUSH
2973: LD_INT 118
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: LIST
2982: LIST
2983: LIST
2984: LIST
2985: LIST
2986: LIST
2987: LIST
2988: LIST
2989: LIST
2990: LIST
2991: LIST
2992: LIST
2993: PUSH
2994: EMPTY
2995: LIST
2996: LIST
2997: ST_TO_ADDR
2998: GO 4893
3000: LD_INT 11
3002: DOUBLE
3003: EQUAL
3004: IFTRUE 3008
3006: GO 3212
3008: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
3009: LD_ADDR_VAR 0 2
3013: PUSH
3014: LD_INT 2
3016: PUSH
3017: LD_INT 3
3019: PUSH
3020: LD_INT 4
3022: PUSH
3023: LD_INT 5
3025: PUSH
3026: LD_INT 6
3028: PUSH
3029: LD_INT 7
3031: PUSH
3032: LD_INT 8
3034: PUSH
3035: LD_INT 9
3037: PUSH
3038: LD_INT 10
3040: PUSH
3041: LD_INT 11
3043: PUSH
3044: LD_INT 12
3046: PUSH
3047: LD_INT 13
3049: PUSH
3050: LD_INT 14
3052: PUSH
3053: LD_INT 15
3055: PUSH
3056: LD_INT 16
3058: PUSH
3059: LD_INT 17
3061: PUSH
3062: LD_INT 18
3064: PUSH
3065: LD_INT 19
3067: PUSH
3068: LD_INT 20
3070: PUSH
3071: LD_INT 21
3073: PUSH
3074: LD_INT 22
3076: PUSH
3077: LD_INT 23
3079: PUSH
3080: LD_INT 24
3082: PUSH
3083: LD_INT 25
3085: PUSH
3086: LD_INT 26
3088: PUSH
3089: LD_INT 28
3091: PUSH
3092: LD_INT 30
3094: PUSH
3095: LD_INT 31
3097: PUSH
3098: LD_INT 32
3100: PUSH
3101: LD_INT 34
3103: PUSH
3104: LD_INT 36
3106: PUSH
3107: EMPTY
3108: LIST
3109: LIST
3110: LIST
3111: LIST
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: LIST
3117: LIST
3118: LIST
3119: LIST
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: LIST
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: PUSH
3140: LD_INT 101
3142: PUSH
3143: LD_INT 102
3145: PUSH
3146: LD_INT 103
3148: PUSH
3149: LD_INT 104
3151: PUSH
3152: LD_INT 105
3154: PUSH
3155: LD_INT 106
3157: PUSH
3158: LD_INT 107
3160: PUSH
3161: LD_INT 108
3163: PUSH
3164: LD_INT 109
3166: PUSH
3167: LD_INT 110
3169: PUSH
3170: LD_INT 111
3172: PUSH
3173: LD_INT 112
3175: PUSH
3176: LD_INT 114
3178: PUSH
3179: LD_INT 116
3181: PUSH
3182: LD_INT 117
3184: PUSH
3185: LD_INT 118
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: ST_TO_ADDR
3210: GO 4893
3212: LD_INT 12
3214: DOUBLE
3215: EQUAL
3216: IFTRUE 3220
3218: GO 3440
3220: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
3221: LD_ADDR_VAR 0 2
3225: PUSH
3226: LD_INT 1
3228: PUSH
3229: LD_INT 2
3231: PUSH
3232: LD_INT 3
3234: PUSH
3235: LD_INT 4
3237: PUSH
3238: LD_INT 5
3240: PUSH
3241: LD_INT 6
3243: PUSH
3244: LD_INT 7
3246: PUSH
3247: LD_INT 8
3249: PUSH
3250: LD_INT 9
3252: PUSH
3253: LD_INT 10
3255: PUSH
3256: LD_INT 11
3258: PUSH
3259: LD_INT 12
3261: PUSH
3262: LD_INT 13
3264: PUSH
3265: LD_INT 14
3267: PUSH
3268: LD_INT 15
3270: PUSH
3271: LD_INT 16
3273: PUSH
3274: LD_INT 17
3276: PUSH
3277: LD_INT 18
3279: PUSH
3280: LD_INT 19
3282: PUSH
3283: LD_INT 20
3285: PUSH
3286: LD_INT 21
3288: PUSH
3289: LD_INT 22
3291: PUSH
3292: LD_INT 23
3294: PUSH
3295: LD_INT 24
3297: PUSH
3298: LD_INT 25
3300: PUSH
3301: LD_INT 26
3303: PUSH
3304: LD_INT 27
3306: PUSH
3307: LD_INT 28
3309: PUSH
3310: LD_INT 30
3312: PUSH
3313: LD_INT 31
3315: PUSH
3316: LD_INT 32
3318: PUSH
3319: LD_INT 33
3321: PUSH
3322: LD_INT 34
3324: PUSH
3325: LD_INT 36
3327: PUSH
3328: EMPTY
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: LIST
3335: LIST
3336: LIST
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: LIST
3343: LIST
3344: LIST
3345: LIST
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: PUSH
3364: LD_INT 101
3366: PUSH
3367: LD_INT 102
3369: PUSH
3370: LD_INT 103
3372: PUSH
3373: LD_INT 104
3375: PUSH
3376: LD_INT 105
3378: PUSH
3379: LD_INT 106
3381: PUSH
3382: LD_INT 107
3384: PUSH
3385: LD_INT 108
3387: PUSH
3388: LD_INT 109
3390: PUSH
3391: LD_INT 110
3393: PUSH
3394: LD_INT 111
3396: PUSH
3397: LD_INT 112
3399: PUSH
3400: LD_INT 113
3402: PUSH
3403: LD_INT 114
3405: PUSH
3406: LD_INT 116
3408: PUSH
3409: LD_INT 117
3411: PUSH
3412: LD_INT 118
3414: PUSH
3415: EMPTY
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: PUSH
3434: EMPTY
3435: LIST
3436: LIST
3437: ST_TO_ADDR
3438: GO 4893
3440: LD_INT 13
3442: DOUBLE
3443: EQUAL
3444: IFTRUE 3448
3446: GO 3656
3448: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
3449: LD_ADDR_VAR 0 2
3453: PUSH
3454: LD_INT 1
3456: PUSH
3457: LD_INT 2
3459: PUSH
3460: LD_INT 3
3462: PUSH
3463: LD_INT 4
3465: PUSH
3466: LD_INT 5
3468: PUSH
3469: LD_INT 8
3471: PUSH
3472: LD_INT 9
3474: PUSH
3475: LD_INT 10
3477: PUSH
3478: LD_INT 11
3480: PUSH
3481: LD_INT 12
3483: PUSH
3484: LD_INT 14
3486: PUSH
3487: LD_INT 15
3489: PUSH
3490: LD_INT 16
3492: PUSH
3493: LD_INT 17
3495: PUSH
3496: LD_INT 18
3498: PUSH
3499: LD_INT 19
3501: PUSH
3502: LD_INT 20
3504: PUSH
3505: LD_INT 21
3507: PUSH
3508: LD_INT 22
3510: PUSH
3511: LD_INT 23
3513: PUSH
3514: LD_INT 24
3516: PUSH
3517: LD_INT 25
3519: PUSH
3520: LD_INT 26
3522: PUSH
3523: LD_INT 27
3525: PUSH
3526: LD_INT 28
3528: PUSH
3529: LD_INT 30
3531: PUSH
3532: LD_INT 31
3534: PUSH
3535: LD_INT 32
3537: PUSH
3538: LD_INT 33
3540: PUSH
3541: LD_INT 34
3543: PUSH
3544: LD_INT 36
3546: PUSH
3547: EMPTY
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: PUSH
3580: LD_INT 101
3582: PUSH
3583: LD_INT 102
3585: PUSH
3586: LD_INT 103
3588: PUSH
3589: LD_INT 104
3591: PUSH
3592: LD_INT 105
3594: PUSH
3595: LD_INT 106
3597: PUSH
3598: LD_INT 107
3600: PUSH
3601: LD_INT 108
3603: PUSH
3604: LD_INT 109
3606: PUSH
3607: LD_INT 110
3609: PUSH
3610: LD_INT 111
3612: PUSH
3613: LD_INT 112
3615: PUSH
3616: LD_INT 113
3618: PUSH
3619: LD_INT 114
3621: PUSH
3622: LD_INT 116
3624: PUSH
3625: LD_INT 117
3627: PUSH
3628: LD_INT 118
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: ST_TO_ADDR
3654: GO 4893
3656: LD_INT 14
3658: DOUBLE
3659: EQUAL
3660: IFTRUE 3664
3662: GO 3888
3664: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
3665: LD_ADDR_VAR 0 2
3669: PUSH
3670: LD_INT 1
3672: PUSH
3673: LD_INT 2
3675: PUSH
3676: LD_INT 3
3678: PUSH
3679: LD_INT 4
3681: PUSH
3682: LD_INT 5
3684: PUSH
3685: LD_INT 6
3687: PUSH
3688: LD_INT 7
3690: PUSH
3691: LD_INT 8
3693: PUSH
3694: LD_INT 9
3696: PUSH
3697: LD_INT 10
3699: PUSH
3700: LD_INT 11
3702: PUSH
3703: LD_INT 12
3705: PUSH
3706: LD_INT 13
3708: PUSH
3709: LD_INT 14
3711: PUSH
3712: LD_INT 15
3714: PUSH
3715: LD_INT 16
3717: PUSH
3718: LD_INT 17
3720: PUSH
3721: LD_INT 18
3723: PUSH
3724: LD_INT 19
3726: PUSH
3727: LD_INT 20
3729: PUSH
3730: LD_INT 21
3732: PUSH
3733: LD_INT 22
3735: PUSH
3736: LD_INT 23
3738: PUSH
3739: LD_INT 24
3741: PUSH
3742: LD_INT 25
3744: PUSH
3745: LD_INT 26
3747: PUSH
3748: LD_INT 27
3750: PUSH
3751: LD_INT 28
3753: PUSH
3754: LD_INT 29
3756: PUSH
3757: LD_INT 30
3759: PUSH
3760: LD_INT 31
3762: PUSH
3763: LD_INT 32
3765: PUSH
3766: LD_INT 33
3768: PUSH
3769: LD_INT 34
3771: PUSH
3772: LD_INT 36
3774: PUSH
3775: EMPTY
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: PUSH
3812: LD_INT 101
3814: PUSH
3815: LD_INT 102
3817: PUSH
3818: LD_INT 103
3820: PUSH
3821: LD_INT 104
3823: PUSH
3824: LD_INT 105
3826: PUSH
3827: LD_INT 106
3829: PUSH
3830: LD_INT 107
3832: PUSH
3833: LD_INT 108
3835: PUSH
3836: LD_INT 109
3838: PUSH
3839: LD_INT 110
3841: PUSH
3842: LD_INT 111
3844: PUSH
3845: LD_INT 112
3847: PUSH
3848: LD_INT 113
3850: PUSH
3851: LD_INT 114
3853: PUSH
3854: LD_INT 116
3856: PUSH
3857: LD_INT 117
3859: PUSH
3860: LD_INT 118
3862: PUSH
3863: EMPTY
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: ST_TO_ADDR
3886: GO 4893
3888: LD_INT 15
3890: DOUBLE
3891: EQUAL
3892: IFTRUE 3896
3894: GO 4120
3896: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
3897: LD_ADDR_VAR 0 2
3901: PUSH
3902: LD_INT 1
3904: PUSH
3905: LD_INT 2
3907: PUSH
3908: LD_INT 3
3910: PUSH
3911: LD_INT 4
3913: PUSH
3914: LD_INT 5
3916: PUSH
3917: LD_INT 6
3919: PUSH
3920: LD_INT 7
3922: PUSH
3923: LD_INT 8
3925: PUSH
3926: LD_INT 9
3928: PUSH
3929: LD_INT 10
3931: PUSH
3932: LD_INT 11
3934: PUSH
3935: LD_INT 12
3937: PUSH
3938: LD_INT 13
3940: PUSH
3941: LD_INT 14
3943: PUSH
3944: LD_INT 15
3946: PUSH
3947: LD_INT 16
3949: PUSH
3950: LD_INT 17
3952: PUSH
3953: LD_INT 18
3955: PUSH
3956: LD_INT 19
3958: PUSH
3959: LD_INT 20
3961: PUSH
3962: LD_INT 21
3964: PUSH
3965: LD_INT 22
3967: PUSH
3968: LD_INT 23
3970: PUSH
3971: LD_INT 24
3973: PUSH
3974: LD_INT 25
3976: PUSH
3977: LD_INT 26
3979: PUSH
3980: LD_INT 27
3982: PUSH
3983: LD_INT 28
3985: PUSH
3986: LD_INT 29
3988: PUSH
3989: LD_INT 30
3991: PUSH
3992: LD_INT 31
3994: PUSH
3995: LD_INT 32
3997: PUSH
3998: LD_INT 33
4000: PUSH
4001: LD_INT 34
4003: PUSH
4004: LD_INT 36
4006: PUSH
4007: EMPTY
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: LIST
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: LIST
4038: LIST
4039: LIST
4040: LIST
4041: LIST
4042: LIST
4043: PUSH
4044: LD_INT 101
4046: PUSH
4047: LD_INT 102
4049: PUSH
4050: LD_INT 103
4052: PUSH
4053: LD_INT 104
4055: PUSH
4056: LD_INT 105
4058: PUSH
4059: LD_INT 106
4061: PUSH
4062: LD_INT 107
4064: PUSH
4065: LD_INT 108
4067: PUSH
4068: LD_INT 109
4070: PUSH
4071: LD_INT 110
4073: PUSH
4074: LD_INT 111
4076: PUSH
4077: LD_INT 112
4079: PUSH
4080: LD_INT 113
4082: PUSH
4083: LD_INT 114
4085: PUSH
4086: LD_INT 116
4088: PUSH
4089: LD_INT 117
4091: PUSH
4092: LD_INT 118
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: ST_TO_ADDR
4118: GO 4893
4120: LD_INT 16
4122: DOUBLE
4123: EQUAL
4124: IFTRUE 4128
4126: GO 4264
4128: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
4129: LD_ADDR_VAR 0 2
4133: PUSH
4134: LD_INT 2
4136: PUSH
4137: LD_INT 4
4139: PUSH
4140: LD_INT 5
4142: PUSH
4143: LD_INT 7
4145: PUSH
4146: LD_INT 11
4148: PUSH
4149: LD_INT 12
4151: PUSH
4152: LD_INT 15
4154: PUSH
4155: LD_INT 16
4157: PUSH
4158: LD_INT 20
4160: PUSH
4161: LD_INT 21
4163: PUSH
4164: LD_INT 22
4166: PUSH
4167: LD_INT 23
4169: PUSH
4170: LD_INT 25
4172: PUSH
4173: LD_INT 26
4175: PUSH
4176: LD_INT 30
4178: PUSH
4179: LD_INT 31
4181: PUSH
4182: LD_INT 32
4184: PUSH
4185: LD_INT 33
4187: PUSH
4188: LD_INT 34
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: PUSH
4212: LD_INT 101
4214: PUSH
4215: LD_INT 102
4217: PUSH
4218: LD_INT 103
4220: PUSH
4221: LD_INT 106
4223: PUSH
4224: LD_INT 108
4226: PUSH
4227: LD_INT 112
4229: PUSH
4230: LD_INT 113
4232: PUSH
4233: LD_INT 114
4235: PUSH
4236: LD_INT 116
4238: PUSH
4239: LD_INT 117
4241: PUSH
4242: LD_INT 118
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: PUSH
4258: EMPTY
4259: LIST
4260: LIST
4261: ST_TO_ADDR
4262: GO 4893
4264: LD_INT 17
4266: DOUBLE
4267: EQUAL
4268: IFTRUE 4272
4270: GO 4496
4272: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
4273: LD_ADDR_VAR 0 2
4277: PUSH
4278: LD_INT 1
4280: PUSH
4281: LD_INT 2
4283: PUSH
4284: LD_INT 3
4286: PUSH
4287: LD_INT 4
4289: PUSH
4290: LD_INT 5
4292: PUSH
4293: LD_INT 6
4295: PUSH
4296: LD_INT 7
4298: PUSH
4299: LD_INT 8
4301: PUSH
4302: LD_INT 9
4304: PUSH
4305: LD_INT 10
4307: PUSH
4308: LD_INT 11
4310: PUSH
4311: LD_INT 12
4313: PUSH
4314: LD_INT 13
4316: PUSH
4317: LD_INT 14
4319: PUSH
4320: LD_INT 15
4322: PUSH
4323: LD_INT 16
4325: PUSH
4326: LD_INT 17
4328: PUSH
4329: LD_INT 18
4331: PUSH
4332: LD_INT 19
4334: PUSH
4335: LD_INT 20
4337: PUSH
4338: LD_INT 21
4340: PUSH
4341: LD_INT 22
4343: PUSH
4344: LD_INT 23
4346: PUSH
4347: LD_INT 24
4349: PUSH
4350: LD_INT 25
4352: PUSH
4353: LD_INT 26
4355: PUSH
4356: LD_INT 27
4358: PUSH
4359: LD_INT 28
4361: PUSH
4362: LD_INT 29
4364: PUSH
4365: LD_INT 30
4367: PUSH
4368: LD_INT 31
4370: PUSH
4371: LD_INT 32
4373: PUSH
4374: LD_INT 33
4376: PUSH
4377: LD_INT 34
4379: PUSH
4380: LD_INT 36
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: PUSH
4420: LD_INT 101
4422: PUSH
4423: LD_INT 102
4425: PUSH
4426: LD_INT 103
4428: PUSH
4429: LD_INT 104
4431: PUSH
4432: LD_INT 105
4434: PUSH
4435: LD_INT 106
4437: PUSH
4438: LD_INT 107
4440: PUSH
4441: LD_INT 108
4443: PUSH
4444: LD_INT 109
4446: PUSH
4447: LD_INT 110
4449: PUSH
4450: LD_INT 111
4452: PUSH
4453: LD_INT 112
4455: PUSH
4456: LD_INT 113
4458: PUSH
4459: LD_INT 114
4461: PUSH
4462: LD_INT 116
4464: PUSH
4465: LD_INT 117
4467: PUSH
4468: LD_INT 118
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: ST_TO_ADDR
4494: GO 4893
4496: LD_INT 18
4498: DOUBLE
4499: EQUAL
4500: IFTRUE 4504
4502: GO 4652
4504: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
4505: LD_ADDR_VAR 0 2
4509: PUSH
4510: LD_INT 2
4512: PUSH
4513: LD_INT 4
4515: PUSH
4516: LD_INT 5
4518: PUSH
4519: LD_INT 7
4521: PUSH
4522: LD_INT 11
4524: PUSH
4525: LD_INT 12
4527: PUSH
4528: LD_INT 15
4530: PUSH
4531: LD_INT 16
4533: PUSH
4534: LD_INT 20
4536: PUSH
4537: LD_INT 21
4539: PUSH
4540: LD_INT 22
4542: PUSH
4543: LD_INT 23
4545: PUSH
4546: LD_INT 25
4548: PUSH
4549: LD_INT 26
4551: PUSH
4552: LD_INT 30
4554: PUSH
4555: LD_INT 31
4557: PUSH
4558: LD_INT 32
4560: PUSH
4561: LD_INT 33
4563: PUSH
4564: LD_INT 34
4566: PUSH
4567: LD_INT 35
4569: PUSH
4570: LD_INT 36
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: PUSH
4596: LD_INT 101
4598: PUSH
4599: LD_INT 102
4601: PUSH
4602: LD_INT 103
4604: PUSH
4605: LD_INT 106
4607: PUSH
4608: LD_INT 108
4610: PUSH
4611: LD_INT 112
4613: PUSH
4614: LD_INT 113
4616: PUSH
4617: LD_INT 114
4619: PUSH
4620: LD_INT 115
4622: PUSH
4623: LD_INT 116
4625: PUSH
4626: LD_INT 117
4628: PUSH
4629: LD_INT 118
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: ST_TO_ADDR
4650: GO 4893
4652: LD_INT 19
4654: DOUBLE
4655: EQUAL
4656: IFTRUE 4660
4658: GO 4892
4660: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
4661: LD_ADDR_VAR 0 2
4665: PUSH
4666: LD_INT 1
4668: PUSH
4669: LD_INT 2
4671: PUSH
4672: LD_INT 3
4674: PUSH
4675: LD_INT 4
4677: PUSH
4678: LD_INT 5
4680: PUSH
4681: LD_INT 6
4683: PUSH
4684: LD_INT 7
4686: PUSH
4687: LD_INT 8
4689: PUSH
4690: LD_INT 9
4692: PUSH
4693: LD_INT 10
4695: PUSH
4696: LD_INT 11
4698: PUSH
4699: LD_INT 12
4701: PUSH
4702: LD_INT 13
4704: PUSH
4705: LD_INT 14
4707: PUSH
4708: LD_INT 15
4710: PUSH
4711: LD_INT 16
4713: PUSH
4714: LD_INT 17
4716: PUSH
4717: LD_INT 18
4719: PUSH
4720: LD_INT 19
4722: PUSH
4723: LD_INT 20
4725: PUSH
4726: LD_INT 21
4728: PUSH
4729: LD_INT 22
4731: PUSH
4732: LD_INT 23
4734: PUSH
4735: LD_INT 24
4737: PUSH
4738: LD_INT 25
4740: PUSH
4741: LD_INT 26
4743: PUSH
4744: LD_INT 27
4746: PUSH
4747: LD_INT 28
4749: PUSH
4750: LD_INT 29
4752: PUSH
4753: LD_INT 30
4755: PUSH
4756: LD_INT 31
4758: PUSH
4759: LD_INT 32
4761: PUSH
4762: LD_INT 33
4764: PUSH
4765: LD_INT 34
4767: PUSH
4768: LD_INT 35
4770: PUSH
4771: LD_INT 36
4773: PUSH
4774: EMPTY
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: PUSH
4812: LD_INT 101
4814: PUSH
4815: LD_INT 102
4817: PUSH
4818: LD_INT 103
4820: PUSH
4821: LD_INT 104
4823: PUSH
4824: LD_INT 105
4826: PUSH
4827: LD_INT 106
4829: PUSH
4830: LD_INT 107
4832: PUSH
4833: LD_INT 108
4835: PUSH
4836: LD_INT 109
4838: PUSH
4839: LD_INT 110
4841: PUSH
4842: LD_INT 111
4844: PUSH
4845: LD_INT 112
4847: PUSH
4848: LD_INT 113
4850: PUSH
4851: LD_INT 114
4853: PUSH
4854: LD_INT 115
4856: PUSH
4857: LD_INT 116
4859: PUSH
4860: LD_INT 117
4862: PUSH
4863: LD_INT 118
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: ST_TO_ADDR
4890: GO 4893
4892: POP
// end else
4893: GO 5124
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
4895: LD_ADDR_VAR 0 2
4899: PUSH
4900: LD_INT 1
4902: PUSH
4903: LD_INT 2
4905: PUSH
4906: LD_INT 3
4908: PUSH
4909: LD_INT 4
4911: PUSH
4912: LD_INT 5
4914: PUSH
4915: LD_INT 6
4917: PUSH
4918: LD_INT 7
4920: PUSH
4921: LD_INT 8
4923: PUSH
4924: LD_INT 9
4926: PUSH
4927: LD_INT 10
4929: PUSH
4930: LD_INT 11
4932: PUSH
4933: LD_INT 12
4935: PUSH
4936: LD_INT 13
4938: PUSH
4939: LD_INT 14
4941: PUSH
4942: LD_INT 15
4944: PUSH
4945: LD_INT 16
4947: PUSH
4948: LD_INT 17
4950: PUSH
4951: LD_INT 18
4953: PUSH
4954: LD_INT 19
4956: PUSH
4957: LD_INT 20
4959: PUSH
4960: LD_INT 21
4962: PUSH
4963: LD_INT 22
4965: PUSH
4966: LD_INT 23
4968: PUSH
4969: LD_INT 24
4971: PUSH
4972: LD_INT 25
4974: PUSH
4975: LD_INT 26
4977: PUSH
4978: LD_INT 27
4980: PUSH
4981: LD_INT 28
4983: PUSH
4984: LD_INT 29
4986: PUSH
4987: LD_INT 30
4989: PUSH
4990: LD_INT 31
4992: PUSH
4993: LD_INT 32
4995: PUSH
4996: LD_INT 33
4998: PUSH
4999: LD_INT 34
5001: PUSH
5002: LD_INT 35
5004: PUSH
5005: LD_INT 36
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: PUSH
5046: LD_INT 101
5048: PUSH
5049: LD_INT 102
5051: PUSH
5052: LD_INT 103
5054: PUSH
5055: LD_INT 104
5057: PUSH
5058: LD_INT 105
5060: PUSH
5061: LD_INT 106
5063: PUSH
5064: LD_INT 107
5066: PUSH
5067: LD_INT 108
5069: PUSH
5070: LD_INT 109
5072: PUSH
5073: LD_INT 110
5075: PUSH
5076: LD_INT 111
5078: PUSH
5079: LD_INT 112
5081: PUSH
5082: LD_INT 113
5084: PUSH
5085: LD_INT 114
5087: PUSH
5088: LD_INT 115
5090: PUSH
5091: LD_INT 116
5093: PUSH
5094: LD_INT 117
5096: PUSH
5097: LD_INT 118
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: LIST
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: ST_TO_ADDR
// if result then
5124: LD_VAR 0 2
5128: IFFALSE 5914
// begin normal :=  ;
5130: LD_ADDR_VAR 0 5
5134: PUSH
5135: LD_STRING 
5137: ST_TO_ADDR
// hardcore :=  ;
5138: LD_ADDR_VAR 0 6
5142: PUSH
5143: LD_STRING 
5145: ST_TO_ADDR
// active :=  ;
5146: LD_ADDR_VAR 0 7
5150: PUSH
5151: LD_STRING 
5153: ST_TO_ADDR
// for i = 1 to normalCounter do
5154: LD_ADDR_VAR 0 8
5158: PUSH
5159: DOUBLE
5160: LD_INT 1
5162: DEC
5163: ST_TO_ADDR
5164: LD_EXP 2
5168: PUSH
5169: FOR_TO
5170: IFFALSE 5271
// begin tmp := 0 ;
5172: LD_ADDR_VAR 0 3
5176: PUSH
5177: LD_STRING 0
5179: ST_TO_ADDR
// if result [ 1 ] then
5180: LD_VAR 0 2
5184: PUSH
5185: LD_INT 1
5187: ARRAY
5188: IFFALSE 5253
// if result [ 1 ] [ 1 ] = i then
5190: LD_VAR 0 2
5194: PUSH
5195: LD_INT 1
5197: ARRAY
5198: PUSH
5199: LD_INT 1
5201: ARRAY
5202: PUSH
5203: LD_VAR 0 8
5207: EQUAL
5208: IFFALSE 5253
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
5210: LD_ADDR_VAR 0 2
5214: PUSH
5215: LD_VAR 0 2
5219: PPUSH
5220: LD_INT 1
5222: PPUSH
5223: LD_VAR 0 2
5227: PUSH
5228: LD_INT 1
5230: ARRAY
5231: PPUSH
5232: LD_INT 1
5234: PPUSH
5235: CALL_OW 3
5239: PPUSH
5240: CALL_OW 1
5244: ST_TO_ADDR
// tmp := 1 ;
5245: LD_ADDR_VAR 0 3
5249: PUSH
5250: LD_STRING 1
5252: ST_TO_ADDR
// end ; normal := normal & tmp ;
5253: LD_ADDR_VAR 0 5
5257: PUSH
5258: LD_VAR 0 5
5262: PUSH
5263: LD_VAR 0 3
5267: STR
5268: ST_TO_ADDR
// end ;
5269: GO 5169
5271: POP
5272: POP
// for i = 1 to hardcoreCounter do
5273: LD_ADDR_VAR 0 8
5277: PUSH
5278: DOUBLE
5279: LD_INT 1
5281: DEC
5282: ST_TO_ADDR
5283: LD_EXP 3
5287: PUSH
5288: FOR_TO
5289: IFFALSE 5394
// begin tmp := 0 ;
5291: LD_ADDR_VAR 0 3
5295: PUSH
5296: LD_STRING 0
5298: ST_TO_ADDR
// if result [ 2 ] then
5299: LD_VAR 0 2
5303: PUSH
5304: LD_INT 2
5306: ARRAY
5307: IFFALSE 5376
// if result [ 2 ] [ 1 ] = 100 + i then
5309: LD_VAR 0 2
5313: PUSH
5314: LD_INT 2
5316: ARRAY
5317: PUSH
5318: LD_INT 1
5320: ARRAY
5321: PUSH
5322: LD_INT 100
5324: PUSH
5325: LD_VAR 0 8
5329: PLUS
5330: EQUAL
5331: IFFALSE 5376
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
5333: LD_ADDR_VAR 0 2
5337: PUSH
5338: LD_VAR 0 2
5342: PPUSH
5343: LD_INT 2
5345: PPUSH
5346: LD_VAR 0 2
5350: PUSH
5351: LD_INT 2
5353: ARRAY
5354: PPUSH
5355: LD_INT 1
5357: PPUSH
5358: CALL_OW 3
5362: PPUSH
5363: CALL_OW 1
5367: ST_TO_ADDR
// tmp := 1 ;
5368: LD_ADDR_VAR 0 3
5372: PUSH
5373: LD_STRING 1
5375: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
5376: LD_ADDR_VAR 0 6
5380: PUSH
5381: LD_VAR 0 6
5385: PUSH
5386: LD_VAR 0 3
5390: STR
5391: ST_TO_ADDR
// end ;
5392: GO 5288
5394: POP
5395: POP
// if isGameLoad then
5396: LD_VAR 0 1
5400: IFFALSE 5875
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
5402: LD_ADDR_VAR 0 4
5406: PUSH
5407: LD_EXP 6
5411: PUSH
5412: LD_EXP 5
5416: PUSH
5417: LD_EXP 7
5421: PUSH
5422: LD_EXP 4
5426: PUSH
5427: LD_EXP 8
5431: PUSH
5432: LD_EXP 9
5436: PUSH
5437: LD_EXP 10
5441: PUSH
5442: LD_EXP 11
5446: PUSH
5447: LD_EXP 12
5451: PUSH
5452: LD_EXP 13
5456: PUSH
5457: LD_EXP 14
5461: PUSH
5462: LD_EXP 15
5466: PUSH
5467: LD_EXP 16
5471: PUSH
5472: LD_EXP 17
5476: PUSH
5477: LD_EXP 25
5481: PUSH
5482: LD_EXP 26
5486: PUSH
5487: LD_EXP 27
5491: PUSH
5492: LD_EXP 28
5496: PUSH
5497: LD_EXP 30
5501: PUSH
5502: LD_EXP 31
5506: PUSH
5507: LD_EXP 32
5511: PUSH
5512: LD_EXP 35
5516: PUSH
5517: LD_EXP 37
5521: PUSH
5522: LD_EXP 38
5526: PUSH
5527: LD_EXP 39
5531: PUSH
5532: LD_EXP 41
5536: PUSH
5537: LD_EXP 42
5541: PUSH
5542: LD_EXP 45
5546: PUSH
5547: LD_EXP 46
5551: PUSH
5552: LD_EXP 47
5556: PUSH
5557: LD_EXP 48
5561: PUSH
5562: LD_EXP 49
5566: PUSH
5567: LD_EXP 50
5571: PUSH
5572: LD_EXP 51
5576: PUSH
5577: LD_EXP 52
5581: PUSH
5582: LD_EXP 53
5586: PUSH
5587: LD_EXP 18
5591: PUSH
5592: LD_EXP 19
5596: PUSH
5597: LD_EXP 22
5601: PUSH
5602: LD_EXP 23
5606: PUSH
5607: LD_EXP 24
5611: PUSH
5612: LD_EXP 20
5616: PUSH
5617: LD_EXP 21
5621: PUSH
5622: LD_EXP 29
5626: PUSH
5627: LD_EXP 33
5631: PUSH
5632: LD_EXP 34
5636: PUSH
5637: LD_EXP 36
5641: PUSH
5642: LD_EXP 40
5646: PUSH
5647: LD_EXP 43
5651: PUSH
5652: LD_EXP 44
5656: PUSH
5657: LD_EXP 54
5661: PUSH
5662: LD_EXP 55
5666: PUSH
5667: LD_EXP 56
5671: PUSH
5672: LD_EXP 57
5676: PUSH
5677: EMPTY
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: LIST
5683: LIST
5684: LIST
5685: LIST
5686: LIST
5687: LIST
5688: LIST
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: ST_TO_ADDR
// tmp :=  ;
5733: LD_ADDR_VAR 0 3
5737: PUSH
5738: LD_STRING 
5740: ST_TO_ADDR
// for i = 1 to normalCounter do
5741: LD_ADDR_VAR 0 8
5745: PUSH
5746: DOUBLE
5747: LD_INT 1
5749: DEC
5750: ST_TO_ADDR
5751: LD_EXP 2
5755: PUSH
5756: FOR_TO
5757: IFFALSE 5793
// begin if flags [ i ] then
5759: LD_VAR 0 4
5763: PUSH
5764: LD_VAR 0 8
5768: ARRAY
5769: IFFALSE 5791
// tmp := tmp & i & ; ;
5771: LD_ADDR_VAR 0 3
5775: PUSH
5776: LD_VAR 0 3
5780: PUSH
5781: LD_VAR 0 8
5785: STR
5786: PUSH
5787: LD_STRING ;
5789: STR
5790: ST_TO_ADDR
// end ;
5791: GO 5756
5793: POP
5794: POP
// for i = 1 to hardcoreCounter do
5795: LD_ADDR_VAR 0 8
5799: PUSH
5800: DOUBLE
5801: LD_INT 1
5803: DEC
5804: ST_TO_ADDR
5805: LD_EXP 3
5809: PUSH
5810: FOR_TO
5811: IFFALSE 5857
// begin if flags [ normalCounter + i ] then
5813: LD_VAR 0 4
5817: PUSH
5818: LD_EXP 2
5822: PUSH
5823: LD_VAR 0 8
5827: PLUS
5828: ARRAY
5829: IFFALSE 5855
// tmp := tmp & ( 100 + i ) & ; ;
5831: LD_ADDR_VAR 0 3
5835: PUSH
5836: LD_VAR 0 3
5840: PUSH
5841: LD_INT 100
5843: PUSH
5844: LD_VAR 0 8
5848: PLUS
5849: STR
5850: PUSH
5851: LD_STRING ;
5853: STR
5854: ST_TO_ADDR
// end ;
5855: GO 5810
5857: POP
5858: POP
// if tmp then
5859: LD_VAR 0 3
5863: IFFALSE 5875
// active := tmp ;
5865: LD_ADDR_VAR 0 7
5869: PUSH
5870: LD_VAR 0 3
5874: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
5875: LD_STRING getStreamItemsFromMission("
5877: PUSH
5878: LD_VAR 0 5
5882: STR
5883: PUSH
5884: LD_STRING ","
5886: STR
5887: PUSH
5888: LD_VAR 0 6
5892: STR
5893: PUSH
5894: LD_STRING ","
5896: STR
5897: PUSH
5898: LD_VAR 0 7
5902: STR
5903: PUSH
5904: LD_STRING ")
5906: STR
5907: PPUSH
5908: CALL_OW 559
// end else
5912: GO 5921
// ToLua ( getStreamItemsFromMission("","","") ) ;
5914: LD_STRING getStreamItemsFromMission("","","")
5916: PPUSH
5917: CALL_OW 559
// end ;
5921: LD_VAR 0 2
5925: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
5926: LD_EXP 1
5930: PUSH
5931: LD_EXP 6
5935: AND
5936: IFFALSE 6060
5938: GO 5940
5940: DISABLE
5941: LD_INT 0
5943: PPUSH
5944: PPUSH
// begin enable ;
5945: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
5946: LD_ADDR_VAR 0 2
5950: PUSH
5951: LD_INT 22
5953: PUSH
5954: LD_OWVAR 2
5958: PUSH
5959: EMPTY
5960: LIST
5961: LIST
5962: PUSH
5963: LD_INT 2
5965: PUSH
5966: LD_INT 34
5968: PUSH
5969: LD_INT 7
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: PUSH
5976: LD_INT 34
5978: PUSH
5979: LD_INT 45
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: PUSH
5986: LD_INT 34
5988: PUSH
5989: LD_INT 28
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: PUSH
5996: LD_INT 34
5998: PUSH
5999: LD_INT 47
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: PUSH
6006: EMPTY
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: PPUSH
6017: CALL_OW 69
6021: ST_TO_ADDR
// if not tmp then
6022: LD_VAR 0 2
6026: NOT
6027: IFFALSE 6031
// exit ;
6029: GO 6060
// for i in tmp do
6031: LD_ADDR_VAR 0 1
6035: PUSH
6036: LD_VAR 0 2
6040: PUSH
6041: FOR_IN
6042: IFFALSE 6058
// begin SetLives ( i , 0 ) ;
6044: LD_VAR 0 1
6048: PPUSH
6049: LD_INT 0
6051: PPUSH
6052: CALL_OW 234
// end ;
6056: GO 6041
6058: POP
6059: POP
// end ;
6060: PPOPN 2
6062: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
6063: LD_EXP 1
6067: PUSH
6068: LD_EXP 7
6072: AND
6073: IFFALSE 6157
6075: GO 6077
6077: DISABLE
6078: LD_INT 0
6080: PPUSH
6081: PPUSH
// begin enable ;
6082: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
6083: LD_ADDR_VAR 0 2
6087: PUSH
6088: LD_INT 22
6090: PUSH
6091: LD_OWVAR 2
6095: PUSH
6096: EMPTY
6097: LIST
6098: LIST
6099: PUSH
6100: LD_INT 32
6102: PUSH
6103: LD_INT 3
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: PPUSH
6114: CALL_OW 69
6118: ST_TO_ADDR
// if not tmp then
6119: LD_VAR 0 2
6123: NOT
6124: IFFALSE 6128
// exit ;
6126: GO 6157
// for i in tmp do
6128: LD_ADDR_VAR 0 1
6132: PUSH
6133: LD_VAR 0 2
6137: PUSH
6138: FOR_IN
6139: IFFALSE 6155
// begin SetLives ( i , 0 ) ;
6141: LD_VAR 0 1
6145: PPUSH
6146: LD_INT 0
6148: PPUSH
6149: CALL_OW 234
// end ;
6153: GO 6138
6155: POP
6156: POP
// end ;
6157: PPOPN 2
6159: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
6160: LD_EXP 1
6164: PUSH
6165: LD_EXP 4
6169: AND
6170: IFFALSE 6263
6172: GO 6174
6174: DISABLE
6175: LD_INT 0
6177: PPUSH
// begin enable ;
6178: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
6179: LD_ADDR_VAR 0 1
6183: PUSH
6184: LD_INT 22
6186: PUSH
6187: LD_OWVAR 2
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: LD_INT 2
6198: PUSH
6199: LD_INT 25
6201: PUSH
6202: LD_INT 5
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: LD_INT 25
6211: PUSH
6212: LD_INT 9
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: PUSH
6219: LD_INT 25
6221: PUSH
6222: LD_INT 8
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PPUSH
6239: CALL_OW 69
6243: PUSH
6244: FOR_IN
6245: IFFALSE 6261
// begin SetClass ( i , 1 ) ;
6247: LD_VAR 0 1
6251: PPUSH
6252: LD_INT 1
6254: PPUSH
6255: CALL_OW 336
// end ;
6259: GO 6244
6261: POP
6262: POP
// end ;
6263: PPOPN 1
6265: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
6266: LD_EXP 1
6270: PUSH
6271: LD_EXP 5
6275: AND
6276: PUSH
6277: LD_OWVAR 65
6281: PUSH
6282: LD_INT 7
6284: LESS
6285: AND
6286: IFFALSE 6300
6288: GO 6290
6290: DISABLE
// begin enable ;
6291: ENABLE
// game_speed := 7 ;
6292: LD_ADDR_OWVAR 65
6296: PUSH
6297: LD_INT 7
6299: ST_TO_ADDR
// end ;
6300: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
6301: LD_EXP 1
6305: PUSH
6306: LD_EXP 8
6310: AND
6311: IFFALSE 6513
6313: GO 6315
6315: DISABLE
6316: LD_INT 0
6318: PPUSH
6319: PPUSH
6320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
6321: LD_ADDR_VAR 0 3
6325: PUSH
6326: LD_INT 81
6328: PUSH
6329: LD_OWVAR 2
6333: PUSH
6334: EMPTY
6335: LIST
6336: LIST
6337: PUSH
6338: LD_INT 21
6340: PUSH
6341: LD_INT 1
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PPUSH
6352: CALL_OW 69
6356: ST_TO_ADDR
// if not tmp then
6357: LD_VAR 0 3
6361: NOT
6362: IFFALSE 6366
// exit ;
6364: GO 6513
// if tmp > 5 then
6366: LD_VAR 0 3
6370: PUSH
6371: LD_INT 5
6373: GREATER
6374: IFFALSE 6386
// k := 5 else
6376: LD_ADDR_VAR 0 2
6380: PUSH
6381: LD_INT 5
6383: ST_TO_ADDR
6384: GO 6396
// k := tmp ;
6386: LD_ADDR_VAR 0 2
6390: PUSH
6391: LD_VAR 0 3
6395: ST_TO_ADDR
// for i := 1 to k do
6396: LD_ADDR_VAR 0 1
6400: PUSH
6401: DOUBLE
6402: LD_INT 1
6404: DEC
6405: ST_TO_ADDR
6406: LD_VAR 0 2
6410: PUSH
6411: FOR_TO
6412: IFFALSE 6511
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
6414: LD_VAR 0 3
6418: PUSH
6419: LD_VAR 0 1
6423: ARRAY
6424: PPUSH
6425: LD_VAR 0 1
6429: PUSH
6430: LD_INT 4
6432: MOD
6433: PUSH
6434: LD_INT 1
6436: PLUS
6437: PPUSH
6438: CALL_OW 259
6442: PUSH
6443: LD_INT 10
6445: LESS
6446: IFFALSE 6509
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
6448: LD_VAR 0 3
6452: PUSH
6453: LD_VAR 0 1
6457: ARRAY
6458: PPUSH
6459: LD_VAR 0 1
6463: PUSH
6464: LD_INT 4
6466: MOD
6467: PUSH
6468: LD_INT 1
6470: PLUS
6471: PPUSH
6472: LD_VAR 0 3
6476: PUSH
6477: LD_VAR 0 1
6481: ARRAY
6482: PPUSH
6483: LD_VAR 0 1
6487: PUSH
6488: LD_INT 4
6490: MOD
6491: PUSH
6492: LD_INT 1
6494: PLUS
6495: PPUSH
6496: CALL_OW 259
6500: PUSH
6501: LD_INT 1
6503: PLUS
6504: PPUSH
6505: CALL_OW 237
6509: GO 6411
6511: POP
6512: POP
// end ;
6513: PPOPN 3
6515: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
6516: LD_EXP 1
6520: PUSH
6521: LD_EXP 9
6525: AND
6526: IFFALSE 6546
6528: GO 6530
6530: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
6531: LD_INT 4
6533: PPUSH
6534: LD_OWVAR 2
6538: PPUSH
6539: LD_INT 0
6541: PPUSH
6542: CALL_OW 324
6546: END
// every 0 0$1 trigger StreamModeActive and sShovel do
6547: LD_EXP 1
6551: PUSH
6552: LD_EXP 38
6556: AND
6557: IFFALSE 6577
6559: GO 6561
6561: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
6562: LD_INT 19
6564: PPUSH
6565: LD_OWVAR 2
6569: PPUSH
6570: LD_INT 0
6572: PPUSH
6573: CALL_OW 324
6577: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
6578: LD_EXP 1
6582: PUSH
6583: LD_EXP 10
6587: AND
6588: IFFALSE 6690
6590: GO 6592
6592: DISABLE
6593: LD_INT 0
6595: PPUSH
6596: PPUSH
// begin enable ;
6597: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
6598: LD_ADDR_VAR 0 2
6602: PUSH
6603: LD_INT 22
6605: PUSH
6606: LD_OWVAR 2
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: PUSH
6615: LD_INT 2
6617: PUSH
6618: LD_INT 34
6620: PUSH
6621: LD_INT 11
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: PUSH
6628: LD_INT 34
6630: PUSH
6631: LD_INT 30
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: LIST
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PPUSH
6647: CALL_OW 69
6651: ST_TO_ADDR
// if not tmp then
6652: LD_VAR 0 2
6656: NOT
6657: IFFALSE 6661
// exit ;
6659: GO 6690
// for i in tmp do
6661: LD_ADDR_VAR 0 1
6665: PUSH
6666: LD_VAR 0 2
6670: PUSH
6671: FOR_IN
6672: IFFALSE 6688
// begin SetLives ( i , 0 ) ;
6674: LD_VAR 0 1
6678: PPUSH
6679: LD_INT 0
6681: PPUSH
6682: CALL_OW 234
// end ;
6686: GO 6671
6688: POP
6689: POP
// end ;
6690: PPOPN 2
6692: END
// every 0 0$1 trigger StreamModeActive and sBunker do
6693: LD_EXP 1
6697: PUSH
6698: LD_EXP 11
6702: AND
6703: IFFALSE 6723
6705: GO 6707
6707: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
6708: LD_INT 32
6710: PPUSH
6711: LD_OWVAR 2
6715: PPUSH
6716: LD_INT 0
6718: PPUSH
6719: CALL_OW 324
6723: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
6724: LD_EXP 1
6728: PUSH
6729: LD_EXP 12
6733: AND
6734: IFFALSE 6915
6736: GO 6738
6738: DISABLE
6739: LD_INT 0
6741: PPUSH
6742: PPUSH
6743: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
6744: LD_ADDR_VAR 0 2
6748: PUSH
6749: LD_INT 22
6751: PUSH
6752: LD_OWVAR 2
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 33
6763: PUSH
6764: LD_INT 3
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PUSH
6771: EMPTY
6772: LIST
6773: LIST
6774: PPUSH
6775: CALL_OW 69
6779: ST_TO_ADDR
// if not tmp then
6780: LD_VAR 0 2
6784: NOT
6785: IFFALSE 6789
// exit ;
6787: GO 6915
// side := 0 ;
6789: LD_ADDR_VAR 0 3
6793: PUSH
6794: LD_INT 0
6796: ST_TO_ADDR
// for i := 1 to 8 do
6797: LD_ADDR_VAR 0 1
6801: PUSH
6802: DOUBLE
6803: LD_INT 1
6805: DEC
6806: ST_TO_ADDR
6807: LD_INT 8
6809: PUSH
6810: FOR_TO
6811: IFFALSE 6859
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
6813: LD_OWVAR 2
6817: PUSH
6818: LD_VAR 0 1
6822: NONEQUAL
6823: PUSH
6824: LD_OWVAR 2
6828: PPUSH
6829: LD_VAR 0 1
6833: PPUSH
6834: CALL_OW 81
6838: PUSH
6839: LD_INT 2
6841: EQUAL
6842: AND
6843: IFFALSE 6857
// begin side := i ;
6845: LD_ADDR_VAR 0 3
6849: PUSH
6850: LD_VAR 0 1
6854: ST_TO_ADDR
// break ;
6855: GO 6859
// end ;
6857: GO 6810
6859: POP
6860: POP
// if not side then
6861: LD_VAR 0 3
6865: NOT
6866: IFFALSE 6870
// exit ;
6868: GO 6915
// for i := 1 to tmp do
6870: LD_ADDR_VAR 0 1
6874: PUSH
6875: DOUBLE
6876: LD_INT 1
6878: DEC
6879: ST_TO_ADDR
6880: LD_VAR 0 2
6884: PUSH
6885: FOR_TO
6886: IFFALSE 6913
// if Prob ( 60 ) then
6888: LD_INT 60
6890: PPUSH
6891: CALL_OW 13
6895: IFFALSE 6911
// SetSide ( i , side ) ;
6897: LD_VAR 0 1
6901: PPUSH
6902: LD_VAR 0 3
6906: PPUSH
6907: CALL_OW 235
6911: GO 6885
6913: POP
6914: POP
// end ;
6915: PPOPN 3
6917: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
6918: LD_EXP 1
6922: PUSH
6923: LD_EXP 14
6927: AND
6928: IFFALSE 7047
6930: GO 6932
6932: DISABLE
6933: LD_INT 0
6935: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
6936: LD_ADDR_VAR 0 1
6940: PUSH
6941: LD_INT 22
6943: PUSH
6944: LD_OWVAR 2
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PUSH
6953: LD_INT 21
6955: PUSH
6956: LD_INT 1
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PUSH
6963: LD_INT 3
6965: PUSH
6966: LD_INT 23
6968: PUSH
6969: LD_INT 0
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: LIST
6984: PPUSH
6985: CALL_OW 69
6989: PUSH
6990: FOR_IN
6991: IFFALSE 7045
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
6993: LD_VAR 0 1
6997: PPUSH
6998: CALL_OW 257
7002: PUSH
7003: LD_INT 1
7005: PUSH
7006: LD_INT 2
7008: PUSH
7009: LD_INT 3
7011: PUSH
7012: LD_INT 4
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: IN
7021: IFFALSE 7043
// SetClass ( un , rand ( 1 , 4 ) ) ;
7023: LD_VAR 0 1
7027: PPUSH
7028: LD_INT 1
7030: PPUSH
7031: LD_INT 4
7033: PPUSH
7034: CALL_OW 12
7038: PPUSH
7039: CALL_OW 336
7043: GO 6990
7045: POP
7046: POP
// end ;
7047: PPOPN 1
7049: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
7050: LD_EXP 1
7054: PUSH
7055: LD_EXP 13
7059: AND
7060: IFFALSE 7139
7062: GO 7064
7064: DISABLE
7065: LD_INT 0
7067: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7068: LD_ADDR_VAR 0 1
7072: PUSH
7073: LD_INT 22
7075: PUSH
7076: LD_OWVAR 2
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PUSH
7085: LD_INT 21
7087: PUSH
7088: LD_INT 3
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: PPUSH
7099: CALL_OW 69
7103: ST_TO_ADDR
// if not tmp then
7104: LD_VAR 0 1
7108: NOT
7109: IFFALSE 7113
// exit ;
7111: GO 7139
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
7113: LD_VAR 0 1
7117: PUSH
7118: LD_INT 1
7120: PPUSH
7121: LD_VAR 0 1
7125: PPUSH
7126: CALL_OW 12
7130: ARRAY
7131: PPUSH
7132: LD_INT 100
7134: PPUSH
7135: CALL_OW 234
// end ;
7139: PPOPN 1
7141: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
7142: LD_EXP 1
7146: PUSH
7147: LD_EXP 15
7151: AND
7152: IFFALSE 7250
7154: GO 7156
7156: DISABLE
7157: LD_INT 0
7159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
7160: LD_ADDR_VAR 0 1
7164: PUSH
7165: LD_INT 22
7167: PUSH
7168: LD_OWVAR 2
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 21
7179: PUSH
7180: LD_INT 1
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: PPUSH
7191: CALL_OW 69
7195: ST_TO_ADDR
// if not tmp then
7196: LD_VAR 0 1
7200: NOT
7201: IFFALSE 7205
// exit ;
7203: GO 7250
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
7205: LD_VAR 0 1
7209: PUSH
7210: LD_INT 1
7212: PPUSH
7213: LD_VAR 0 1
7217: PPUSH
7218: CALL_OW 12
7222: ARRAY
7223: PPUSH
7224: LD_INT 1
7226: PPUSH
7227: LD_INT 4
7229: PPUSH
7230: CALL_OW 12
7234: PPUSH
7235: LD_INT 3000
7237: PPUSH
7238: LD_INT 9000
7240: PPUSH
7241: CALL_OW 12
7245: PPUSH
7246: CALL_OW 492
// end ;
7250: PPOPN 1
7252: END
// every 0 0$1 trigger StreamModeActive and sDepot do
7253: LD_EXP 1
7257: PUSH
7258: LD_EXP 16
7262: AND
7263: IFFALSE 7283
7265: GO 7267
7267: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
7268: LD_INT 1
7270: PPUSH
7271: LD_OWVAR 2
7275: PPUSH
7276: LD_INT 0
7278: PPUSH
7279: CALL_OW 324
7283: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
7284: LD_EXP 1
7288: PUSH
7289: LD_EXP 17
7293: AND
7294: IFFALSE 7377
7296: GO 7298
7298: DISABLE
7299: LD_INT 0
7301: PPUSH
7302: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7303: LD_ADDR_VAR 0 2
7307: PUSH
7308: LD_INT 22
7310: PUSH
7311: LD_OWVAR 2
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: PUSH
7320: LD_INT 21
7322: PUSH
7323: LD_INT 3
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: PPUSH
7334: CALL_OW 69
7338: ST_TO_ADDR
// if not tmp then
7339: LD_VAR 0 2
7343: NOT
7344: IFFALSE 7348
// exit ;
7346: GO 7377
// for i in tmp do
7348: LD_ADDR_VAR 0 1
7352: PUSH
7353: LD_VAR 0 2
7357: PUSH
7358: FOR_IN
7359: IFFALSE 7375
// SetBLevel ( i , 10 ) ;
7361: LD_VAR 0 1
7365: PPUSH
7366: LD_INT 10
7368: PPUSH
7369: CALL_OW 241
7373: GO 7358
7375: POP
7376: POP
// end ;
7377: PPOPN 2
7379: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
7380: LD_EXP 1
7384: PUSH
7385: LD_EXP 18
7389: AND
7390: IFFALSE 7501
7392: GO 7394
7394: DISABLE
7395: LD_INT 0
7397: PPUSH
7398: PPUSH
7399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
7400: LD_ADDR_VAR 0 3
7404: PUSH
7405: LD_INT 22
7407: PUSH
7408: LD_OWVAR 2
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: PUSH
7417: LD_INT 25
7419: PUSH
7420: LD_INT 1
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: PPUSH
7431: CALL_OW 69
7435: ST_TO_ADDR
// if not tmp then
7436: LD_VAR 0 3
7440: NOT
7441: IFFALSE 7445
// exit ;
7443: GO 7501
// un := tmp [ rand ( 1 , tmp ) ] ;
7445: LD_ADDR_VAR 0 2
7449: PUSH
7450: LD_VAR 0 3
7454: PUSH
7455: LD_INT 1
7457: PPUSH
7458: LD_VAR 0 3
7462: PPUSH
7463: CALL_OW 12
7467: ARRAY
7468: ST_TO_ADDR
// if Crawls ( un ) then
7469: LD_VAR 0 2
7473: PPUSH
7474: CALL_OW 318
7478: IFFALSE 7489
// ComWalk ( un ) ;
7480: LD_VAR 0 2
7484: PPUSH
7485: CALL_OW 138
// SetClass ( un , class_sniper ) ;
7489: LD_VAR 0 2
7493: PPUSH
7494: LD_INT 5
7496: PPUSH
7497: CALL_OW 336
// end ;
7501: PPOPN 3
7503: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
7504: LD_EXP 1
7508: PUSH
7509: LD_EXP 19
7513: AND
7514: PUSH
7515: LD_OWVAR 67
7519: PUSH
7520: LD_INT 4
7522: LESS
7523: AND
7524: IFFALSE 7543
7526: GO 7528
7528: DISABLE
// begin Difficulty := Difficulty + 1 ;
7529: LD_ADDR_OWVAR 67
7533: PUSH
7534: LD_OWVAR 67
7538: PUSH
7539: LD_INT 1
7541: PLUS
7542: ST_TO_ADDR
// end ;
7543: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
7544: LD_EXP 1
7548: PUSH
7549: LD_EXP 20
7553: AND
7554: IFFALSE 7657
7556: GO 7558
7558: DISABLE
7559: LD_INT 0
7561: PPUSH
// begin for i := 1 to 5 do
7562: LD_ADDR_VAR 0 1
7566: PUSH
7567: DOUBLE
7568: LD_INT 1
7570: DEC
7571: ST_TO_ADDR
7572: LD_INT 5
7574: PUSH
7575: FOR_TO
7576: IFFALSE 7655
// begin uc_nation := nation_nature ;
7578: LD_ADDR_OWVAR 21
7582: PUSH
7583: LD_INT 0
7585: ST_TO_ADDR
// uc_side := 0 ;
7586: LD_ADDR_OWVAR 20
7590: PUSH
7591: LD_INT 0
7593: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
7594: LD_ADDR_OWVAR 29
7598: PUSH
7599: LD_INT 12
7601: PUSH
7602: LD_INT 12
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: ST_TO_ADDR
// hc_agressivity := 20 ;
7609: LD_ADDR_OWVAR 35
7613: PUSH
7614: LD_INT 20
7616: ST_TO_ADDR
// hc_class := class_tiger ;
7617: LD_ADDR_OWVAR 28
7621: PUSH
7622: LD_INT 14
7624: ST_TO_ADDR
// hc_gallery :=  ;
7625: LD_ADDR_OWVAR 33
7629: PUSH
7630: LD_STRING 
7632: ST_TO_ADDR
// hc_name :=  ;
7633: LD_ADDR_OWVAR 26
7637: PUSH
7638: LD_STRING 
7640: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
7641: CALL_OW 44
7645: PPUSH
7646: LD_INT 0
7648: PPUSH
7649: CALL_OW 51
// end ;
7653: GO 7575
7655: POP
7656: POP
// end ;
7657: PPOPN 1
7659: END
// every 0 0$1 trigger StreamModeActive and sBomb do
7660: LD_EXP 1
7664: PUSH
7665: LD_EXP 21
7669: AND
7670: IFFALSE 7679
7672: GO 7674
7674: DISABLE
// StreamSibBomb ;
7675: CALL 7680 0 0
7679: END
// export function StreamSibBomb ; var i , x , y ; begin
7680: LD_INT 0
7682: PPUSH
7683: PPUSH
7684: PPUSH
7685: PPUSH
// result := false ;
7686: LD_ADDR_VAR 0 1
7690: PUSH
7691: LD_INT 0
7693: ST_TO_ADDR
// for i := 1 to 16 do
7694: LD_ADDR_VAR 0 2
7698: PUSH
7699: DOUBLE
7700: LD_INT 1
7702: DEC
7703: ST_TO_ADDR
7704: LD_INT 16
7706: PUSH
7707: FOR_TO
7708: IFFALSE 7907
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
7710: LD_ADDR_VAR 0 3
7714: PUSH
7715: LD_INT 10
7717: PUSH
7718: LD_INT 20
7720: PUSH
7721: LD_INT 30
7723: PUSH
7724: LD_INT 40
7726: PUSH
7727: LD_INT 50
7729: PUSH
7730: LD_INT 60
7732: PUSH
7733: LD_INT 70
7735: PUSH
7736: LD_INT 80
7738: PUSH
7739: LD_INT 90
7741: PUSH
7742: LD_INT 100
7744: PUSH
7745: LD_INT 110
7747: PUSH
7748: LD_INT 120
7750: PUSH
7751: LD_INT 130
7753: PUSH
7754: LD_INT 140
7756: PUSH
7757: LD_INT 150
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: PUSH
7777: LD_INT 1
7779: PPUSH
7780: LD_INT 15
7782: PPUSH
7783: CALL_OW 12
7787: ARRAY
7788: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
7789: LD_ADDR_VAR 0 4
7793: PUSH
7794: LD_INT 10
7796: PUSH
7797: LD_INT 20
7799: PUSH
7800: LD_INT 30
7802: PUSH
7803: LD_INT 40
7805: PUSH
7806: LD_INT 50
7808: PUSH
7809: LD_INT 60
7811: PUSH
7812: LD_INT 70
7814: PUSH
7815: LD_INT 80
7817: PUSH
7818: LD_INT 90
7820: PUSH
7821: LD_INT 100
7823: PUSH
7824: LD_INT 110
7826: PUSH
7827: LD_INT 120
7829: PUSH
7830: LD_INT 130
7832: PUSH
7833: LD_INT 140
7835: PUSH
7836: LD_INT 150
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: PUSH
7856: LD_INT 1
7858: PPUSH
7859: LD_INT 15
7861: PPUSH
7862: CALL_OW 12
7866: ARRAY
7867: ST_TO_ADDR
// if ValidHex ( x , y ) then
7868: LD_VAR 0 3
7872: PPUSH
7873: LD_VAR 0 4
7877: PPUSH
7878: CALL_OW 488
7882: IFFALSE 7905
// begin result := [ x , y ] ;
7884: LD_ADDR_VAR 0 1
7888: PUSH
7889: LD_VAR 0 3
7893: PUSH
7894: LD_VAR 0 4
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: ST_TO_ADDR
// break ;
7903: GO 7907
// end ; end ;
7905: GO 7707
7907: POP
7908: POP
// if result then
7909: LD_VAR 0 1
7913: IFFALSE 7973
// begin ToLua ( playSibBomb() ) ;
7915: LD_STRING playSibBomb()
7917: PPUSH
7918: CALL_OW 559
// wait ( 0 0$14 ) ;
7922: LD_INT 490
7924: PPUSH
7925: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
7929: LD_VAR 0 1
7933: PUSH
7934: LD_INT 1
7936: ARRAY
7937: PPUSH
7938: LD_VAR 0 1
7942: PUSH
7943: LD_INT 2
7945: ARRAY
7946: PPUSH
7947: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
7951: LD_VAR 0 1
7955: PUSH
7956: LD_INT 1
7958: ARRAY
7959: PPUSH
7960: LD_VAR 0 1
7964: PUSH
7965: LD_INT 2
7967: ARRAY
7968: PPUSH
7969: CALL_OW 429
// end ; end ;
7973: LD_VAR 0 1
7977: RET
// every 0 0$1 trigger StreamModeActive and sReset do
7978: LD_EXP 1
7982: PUSH
7983: LD_EXP 23
7987: AND
7988: IFFALSE 8000
7990: GO 7992
7992: DISABLE
// YouLost (  ) ;
7993: LD_STRING 
7995: PPUSH
7996: CALL_OW 104
8000: END
// every 0 0$1 trigger StreamModeActive and sFog do
8001: LD_EXP 1
8005: PUSH
8006: LD_EXP 22
8010: AND
8011: IFFALSE 8025
8013: GO 8015
8015: DISABLE
// FogOff ( your_side ) ;
8016: LD_OWVAR 2
8020: PPUSH
8021: CALL_OW 344
8025: END
// every 0 0$1 trigger StreamModeActive and sSun do
8026: LD_EXP 1
8030: PUSH
8031: LD_EXP 24
8035: AND
8036: IFFALSE 8064
8038: GO 8040
8040: DISABLE
// begin solar_recharge_percent := 0 ;
8041: LD_ADDR_OWVAR 79
8045: PUSH
8046: LD_INT 0
8048: ST_TO_ADDR
// wait ( 5 5$00 ) ;
8049: LD_INT 10500
8051: PPUSH
8052: CALL_OW 67
// solar_recharge_percent := 100 ;
8056: LD_ADDR_OWVAR 79
8060: PUSH
8061: LD_INT 100
8063: ST_TO_ADDR
// end ;
8064: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
8065: LD_EXP 1
8069: PUSH
8070: LD_EXP 25
8074: AND
8075: IFFALSE 8314
8077: GO 8079
8079: DISABLE
8080: LD_INT 0
8082: PPUSH
8083: PPUSH
8084: PPUSH
// begin tmp := [ ] ;
8085: LD_ADDR_VAR 0 3
8089: PUSH
8090: EMPTY
8091: ST_TO_ADDR
// for i := 1 to 6 do
8092: LD_ADDR_VAR 0 1
8096: PUSH
8097: DOUBLE
8098: LD_INT 1
8100: DEC
8101: ST_TO_ADDR
8102: LD_INT 6
8104: PUSH
8105: FOR_TO
8106: IFFALSE 8211
// begin uc_nation := nation_nature ;
8108: LD_ADDR_OWVAR 21
8112: PUSH
8113: LD_INT 0
8115: ST_TO_ADDR
// uc_side := 0 ;
8116: LD_ADDR_OWVAR 20
8120: PUSH
8121: LD_INT 0
8123: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8124: LD_ADDR_OWVAR 29
8128: PUSH
8129: LD_INT 12
8131: PUSH
8132: LD_INT 12
8134: PUSH
8135: EMPTY
8136: LIST
8137: LIST
8138: ST_TO_ADDR
// hc_agressivity := 20 ;
8139: LD_ADDR_OWVAR 35
8143: PUSH
8144: LD_INT 20
8146: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
8147: LD_ADDR_OWVAR 28
8151: PUSH
8152: LD_INT 17
8154: ST_TO_ADDR
// hc_gallery :=  ;
8155: LD_ADDR_OWVAR 33
8159: PUSH
8160: LD_STRING 
8162: ST_TO_ADDR
// hc_name :=  ;
8163: LD_ADDR_OWVAR 26
8167: PUSH
8168: LD_STRING 
8170: ST_TO_ADDR
// un := CreateHuman ;
8171: LD_ADDR_VAR 0 2
8175: PUSH
8176: CALL_OW 44
8180: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
8181: LD_VAR 0 2
8185: PPUSH
8186: LD_INT 1
8188: PPUSH
8189: CALL_OW 51
// tmp := tmp ^ un ;
8193: LD_ADDR_VAR 0 3
8197: PUSH
8198: LD_VAR 0 3
8202: PUSH
8203: LD_VAR 0 2
8207: ADD
8208: ST_TO_ADDR
// end ;
8209: GO 8105
8211: POP
8212: POP
// repeat wait ( 0 0$1 ) ;
8213: LD_INT 35
8215: PPUSH
8216: CALL_OW 67
// for un in tmp do
8220: LD_ADDR_VAR 0 2
8224: PUSH
8225: LD_VAR 0 3
8229: PUSH
8230: FOR_IN
8231: IFFALSE 8305
// begin if IsDead ( un ) then
8233: LD_VAR 0 2
8237: PPUSH
8238: CALL_OW 301
8242: IFFALSE 8262
// begin tmp := tmp diff un ;
8244: LD_ADDR_VAR 0 3
8248: PUSH
8249: LD_VAR 0 3
8253: PUSH
8254: LD_VAR 0 2
8258: DIFF
8259: ST_TO_ADDR
// continue ;
8260: GO 8230
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
8262: LD_VAR 0 2
8266: PPUSH
8267: LD_INT 3
8269: PUSH
8270: LD_INT 22
8272: PUSH
8273: LD_INT 0
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: PUSH
8280: EMPTY
8281: LIST
8282: LIST
8283: PPUSH
8284: CALL_OW 69
8288: PPUSH
8289: LD_VAR 0 2
8293: PPUSH
8294: CALL_OW 74
8298: PPUSH
8299: CALL_OW 115
// end ;
8303: GO 8230
8305: POP
8306: POP
// until not tmp ;
8307: LD_VAR 0 3
8311: NOT
8312: IFFALSE 8213
// end ;
8314: PPOPN 3
8316: END
// every 0 0$1 trigger StreamModeActive and sTroll do
8317: LD_EXP 1
8321: PUSH
8322: LD_EXP 26
8326: AND
8327: IFFALSE 8381
8329: GO 8331
8331: DISABLE
// begin ToLua ( displayTroll(); ) ;
8332: LD_STRING displayTroll();
8334: PPUSH
8335: CALL_OW 559
// wait ( 3 3$00 ) ;
8339: LD_INT 6300
8341: PPUSH
8342: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8346: LD_STRING hideTroll();
8348: PPUSH
8349: CALL_OW 559
// wait ( 1 1$00 ) ;
8353: LD_INT 2100
8355: PPUSH
8356: CALL_OW 67
// ToLua ( displayTroll(); ) ;
8360: LD_STRING displayTroll();
8362: PPUSH
8363: CALL_OW 559
// wait ( 1 1$00 ) ;
8367: LD_INT 2100
8369: PPUSH
8370: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8374: LD_STRING hideTroll();
8376: PPUSH
8377: CALL_OW 559
// end ;
8381: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
8382: LD_EXP 1
8386: PUSH
8387: LD_EXP 27
8391: AND
8392: IFFALSE 8455
8394: GO 8396
8396: DISABLE
8397: LD_INT 0
8399: PPUSH
// begin p := 0 ;
8400: LD_ADDR_VAR 0 1
8404: PUSH
8405: LD_INT 0
8407: ST_TO_ADDR
// repeat game_speed := 1 ;
8408: LD_ADDR_OWVAR 65
8412: PUSH
8413: LD_INT 1
8415: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8416: LD_INT 35
8418: PPUSH
8419: CALL_OW 67
// p := p + 1 ;
8423: LD_ADDR_VAR 0 1
8427: PUSH
8428: LD_VAR 0 1
8432: PUSH
8433: LD_INT 1
8435: PLUS
8436: ST_TO_ADDR
// until p >= 60 ;
8437: LD_VAR 0 1
8441: PUSH
8442: LD_INT 60
8444: GREATEREQUAL
8445: IFFALSE 8408
// game_speed := 4 ;
8447: LD_ADDR_OWVAR 65
8451: PUSH
8452: LD_INT 4
8454: ST_TO_ADDR
// end ;
8455: PPOPN 1
8457: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
8458: LD_EXP 1
8462: PUSH
8463: LD_EXP 28
8467: AND
8468: IFFALSE 8614
8470: GO 8472
8472: DISABLE
8473: LD_INT 0
8475: PPUSH
8476: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8477: LD_ADDR_VAR 0 1
8481: PUSH
8482: LD_INT 22
8484: PUSH
8485: LD_OWVAR 2
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: PUSH
8494: LD_INT 2
8496: PUSH
8497: LD_INT 30
8499: PUSH
8500: LD_INT 0
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PUSH
8507: LD_INT 30
8509: PUSH
8510: LD_INT 1
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: LIST
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: PPUSH
8526: CALL_OW 69
8530: ST_TO_ADDR
// if not depot then
8531: LD_VAR 0 1
8535: NOT
8536: IFFALSE 8540
// exit ;
8538: GO 8614
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
8540: LD_ADDR_VAR 0 2
8544: PUSH
8545: LD_VAR 0 1
8549: PUSH
8550: LD_INT 1
8552: PPUSH
8553: LD_VAR 0 1
8557: PPUSH
8558: CALL_OW 12
8562: ARRAY
8563: PPUSH
8564: CALL_OW 274
8568: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
8569: LD_VAR 0 2
8573: PPUSH
8574: LD_INT 1
8576: PPUSH
8577: LD_INT 0
8579: PPUSH
8580: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
8584: LD_VAR 0 2
8588: PPUSH
8589: LD_INT 2
8591: PPUSH
8592: LD_INT 0
8594: PPUSH
8595: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
8599: LD_VAR 0 2
8603: PPUSH
8604: LD_INT 3
8606: PPUSH
8607: LD_INT 0
8609: PPUSH
8610: CALL_OW 277
// end ;
8614: PPOPN 2
8616: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
8617: LD_EXP 1
8621: PUSH
8622: LD_EXP 29
8626: AND
8627: IFFALSE 8724
8629: GO 8631
8631: DISABLE
8632: LD_INT 0
8634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
8635: LD_ADDR_VAR 0 1
8639: PUSH
8640: LD_INT 22
8642: PUSH
8643: LD_OWVAR 2
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: PUSH
8652: LD_INT 21
8654: PUSH
8655: LD_INT 1
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PUSH
8662: LD_INT 3
8664: PUSH
8665: LD_INT 23
8667: PUSH
8668: LD_INT 0
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: PUSH
8675: EMPTY
8676: LIST
8677: LIST
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: LIST
8683: PPUSH
8684: CALL_OW 69
8688: ST_TO_ADDR
// if not tmp then
8689: LD_VAR 0 1
8693: NOT
8694: IFFALSE 8698
// exit ;
8696: GO 8724
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
8698: LD_VAR 0 1
8702: PUSH
8703: LD_INT 1
8705: PPUSH
8706: LD_VAR 0 1
8710: PPUSH
8711: CALL_OW 12
8715: ARRAY
8716: PPUSH
8717: LD_INT 200
8719: PPUSH
8720: CALL_OW 234
// end ;
8724: PPOPN 1
8726: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
8727: LD_EXP 1
8731: PUSH
8732: LD_EXP 30
8736: AND
8737: IFFALSE 8816
8739: GO 8741
8741: DISABLE
8742: LD_INT 0
8744: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
8745: LD_ADDR_VAR 0 1
8749: PUSH
8750: LD_INT 22
8752: PUSH
8753: LD_OWVAR 2
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PUSH
8762: LD_INT 21
8764: PUSH
8765: LD_INT 2
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: PPUSH
8776: CALL_OW 69
8780: ST_TO_ADDR
// if not tmp then
8781: LD_VAR 0 1
8785: NOT
8786: IFFALSE 8790
// exit ;
8788: GO 8816
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
8790: LD_VAR 0 1
8794: PUSH
8795: LD_INT 1
8797: PPUSH
8798: LD_VAR 0 1
8802: PPUSH
8803: CALL_OW 12
8807: ARRAY
8808: PPUSH
8809: LD_INT 60
8811: PPUSH
8812: CALL_OW 234
// end ;
8816: PPOPN 1
8818: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
8819: LD_EXP 1
8823: PUSH
8824: LD_EXP 31
8828: AND
8829: IFFALSE 8928
8831: GO 8833
8833: DISABLE
8834: LD_INT 0
8836: PPUSH
8837: PPUSH
// begin enable ;
8838: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
8839: LD_ADDR_VAR 0 1
8843: PUSH
8844: LD_INT 22
8846: PUSH
8847: LD_OWVAR 2
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PUSH
8856: LD_INT 61
8858: PUSH
8859: EMPTY
8860: LIST
8861: PUSH
8862: LD_INT 33
8864: PUSH
8865: LD_INT 2
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: LIST
8876: PPUSH
8877: CALL_OW 69
8881: ST_TO_ADDR
// if not tmp then
8882: LD_VAR 0 1
8886: NOT
8887: IFFALSE 8891
// exit ;
8889: GO 8928
// for i in tmp do
8891: LD_ADDR_VAR 0 2
8895: PUSH
8896: LD_VAR 0 1
8900: PUSH
8901: FOR_IN
8902: IFFALSE 8926
// if IsControledBy ( i ) then
8904: LD_VAR 0 2
8908: PPUSH
8909: CALL_OW 312
8913: IFFALSE 8924
// ComUnlink ( i ) ;
8915: LD_VAR 0 2
8919: PPUSH
8920: CALL_OW 136
8924: GO 8901
8926: POP
8927: POP
// end ;
8928: PPOPN 2
8930: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
8931: LD_EXP 1
8935: PUSH
8936: LD_EXP 32
8940: AND
8941: IFFALSE 9081
8943: GO 8945
8945: DISABLE
8946: LD_INT 0
8948: PPUSH
8949: PPUSH
// begin ToLua ( displayPowell(); ) ;
8950: LD_STRING displayPowell();
8952: PPUSH
8953: CALL_OW 559
// uc_side := 0 ;
8957: LD_ADDR_OWVAR 20
8961: PUSH
8962: LD_INT 0
8964: ST_TO_ADDR
// uc_nation := 2 ;
8965: LD_ADDR_OWVAR 21
8969: PUSH
8970: LD_INT 2
8972: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
8973: LD_ADDR_OWVAR 37
8977: PUSH
8978: LD_INT 14
8980: ST_TO_ADDR
// vc_engine := engine_siberite ;
8981: LD_ADDR_OWVAR 39
8985: PUSH
8986: LD_INT 3
8988: ST_TO_ADDR
// vc_control := control_apeman ;
8989: LD_ADDR_OWVAR 38
8993: PUSH
8994: LD_INT 5
8996: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
8997: LD_ADDR_OWVAR 40
9001: PUSH
9002: LD_INT 29
9004: ST_TO_ADDR
// un := CreateVehicle ;
9005: LD_ADDR_VAR 0 2
9009: PUSH
9010: CALL_OW 45
9014: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
9015: LD_VAR 0 2
9019: PPUSH
9020: LD_INT 1
9022: PPUSH
9023: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
9027: LD_INT 35
9029: PPUSH
9030: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
9034: LD_VAR 0 2
9038: PPUSH
9039: LD_INT 22
9041: PUSH
9042: LD_OWVAR 2
9046: PUSH
9047: EMPTY
9048: LIST
9049: LIST
9050: PPUSH
9051: CALL_OW 69
9055: PPUSH
9056: LD_VAR 0 2
9060: PPUSH
9061: CALL_OW 74
9065: PPUSH
9066: CALL_OW 115
// until IsDead ( un ) ;
9070: LD_VAR 0 2
9074: PPUSH
9075: CALL_OW 301
9079: IFFALSE 9027
// end ;
9081: PPOPN 2
9083: END
// every 0 0$1 trigger StreamModeActive and sStu do
9084: LD_EXP 1
9088: PUSH
9089: LD_EXP 40
9093: AND
9094: IFFALSE 9110
9096: GO 9098
9098: DISABLE
// begin ToLua ( displayStucuk(); ) ;
9099: LD_STRING displayStucuk();
9101: PPUSH
9102: CALL_OW 559
// ResetFog ;
9106: CALL_OW 335
// end ;
9110: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
9111: LD_EXP 1
9115: PUSH
9116: LD_EXP 33
9120: AND
9121: IFFALSE 9262
9123: GO 9125
9125: DISABLE
9126: LD_INT 0
9128: PPUSH
9129: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9130: LD_ADDR_VAR 0 2
9134: PUSH
9135: LD_INT 22
9137: PUSH
9138: LD_OWVAR 2
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: PUSH
9147: LD_INT 21
9149: PUSH
9150: LD_INT 1
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: PUSH
9157: EMPTY
9158: LIST
9159: LIST
9160: PPUSH
9161: CALL_OW 69
9165: ST_TO_ADDR
// if not tmp then
9166: LD_VAR 0 2
9170: NOT
9171: IFFALSE 9175
// exit ;
9173: GO 9262
// un := tmp [ rand ( 1 , tmp ) ] ;
9175: LD_ADDR_VAR 0 1
9179: PUSH
9180: LD_VAR 0 2
9184: PUSH
9185: LD_INT 1
9187: PPUSH
9188: LD_VAR 0 2
9192: PPUSH
9193: CALL_OW 12
9197: ARRAY
9198: ST_TO_ADDR
// SetSide ( un , 0 ) ;
9199: LD_VAR 0 1
9203: PPUSH
9204: LD_INT 0
9206: PPUSH
9207: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
9211: LD_VAR 0 1
9215: PPUSH
9216: LD_OWVAR 3
9220: PUSH
9221: LD_VAR 0 1
9225: DIFF
9226: PPUSH
9227: LD_VAR 0 1
9231: PPUSH
9232: CALL_OW 74
9236: PPUSH
9237: CALL_OW 115
// wait ( 0 0$20 ) ;
9241: LD_INT 700
9243: PPUSH
9244: CALL_OW 67
// SetSide ( un , your_side ) ;
9248: LD_VAR 0 1
9252: PPUSH
9253: LD_OWVAR 2
9257: PPUSH
9258: CALL_OW 235
// end ;
9262: PPOPN 2
9264: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
9265: LD_EXP 1
9269: PUSH
9270: LD_EXP 34
9274: AND
9275: IFFALSE 9381
9277: GO 9279
9279: DISABLE
9280: LD_INT 0
9282: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9283: LD_ADDR_VAR 0 1
9287: PUSH
9288: LD_INT 22
9290: PUSH
9291: LD_OWVAR 2
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: PUSH
9300: LD_INT 2
9302: PUSH
9303: LD_INT 30
9305: PUSH
9306: LD_INT 0
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: PUSH
9313: LD_INT 30
9315: PUSH
9316: LD_INT 1
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: LIST
9327: PUSH
9328: EMPTY
9329: LIST
9330: LIST
9331: PPUSH
9332: CALL_OW 69
9336: ST_TO_ADDR
// if not depot then
9337: LD_VAR 0 1
9341: NOT
9342: IFFALSE 9346
// exit ;
9344: GO 9381
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
9346: LD_VAR 0 1
9350: PUSH
9351: LD_INT 1
9353: ARRAY
9354: PPUSH
9355: CALL_OW 250
9359: PPUSH
9360: LD_VAR 0 1
9364: PUSH
9365: LD_INT 1
9367: ARRAY
9368: PPUSH
9369: CALL_OW 251
9373: PPUSH
9374: LD_INT 70
9376: PPUSH
9377: CALL_OW 495
// end ;
9381: PPOPN 1
9383: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
9384: LD_EXP 1
9388: PUSH
9389: LD_EXP 35
9393: AND
9394: IFFALSE 9605
9396: GO 9398
9398: DISABLE
9399: LD_INT 0
9401: PPUSH
9402: PPUSH
9403: PPUSH
9404: PPUSH
9405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9406: LD_ADDR_VAR 0 5
9410: PUSH
9411: LD_INT 22
9413: PUSH
9414: LD_OWVAR 2
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: PUSH
9423: LD_INT 21
9425: PUSH
9426: LD_INT 1
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: PPUSH
9437: CALL_OW 69
9441: ST_TO_ADDR
// if not tmp then
9442: LD_VAR 0 5
9446: NOT
9447: IFFALSE 9451
// exit ;
9449: GO 9605
// for i in tmp do
9451: LD_ADDR_VAR 0 1
9455: PUSH
9456: LD_VAR 0 5
9460: PUSH
9461: FOR_IN
9462: IFFALSE 9603
// begin d := rand ( 0 , 5 ) ;
9464: LD_ADDR_VAR 0 4
9468: PUSH
9469: LD_INT 0
9471: PPUSH
9472: LD_INT 5
9474: PPUSH
9475: CALL_OW 12
9479: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
9480: LD_ADDR_VAR 0 2
9484: PUSH
9485: LD_VAR 0 1
9489: PPUSH
9490: CALL_OW 250
9494: PPUSH
9495: LD_VAR 0 4
9499: PPUSH
9500: LD_INT 3
9502: PPUSH
9503: LD_INT 12
9505: PPUSH
9506: CALL_OW 12
9510: PPUSH
9511: CALL_OW 272
9515: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
9516: LD_ADDR_VAR 0 3
9520: PUSH
9521: LD_VAR 0 1
9525: PPUSH
9526: CALL_OW 251
9530: PPUSH
9531: LD_VAR 0 4
9535: PPUSH
9536: LD_INT 3
9538: PPUSH
9539: LD_INT 12
9541: PPUSH
9542: CALL_OW 12
9546: PPUSH
9547: CALL_OW 273
9551: ST_TO_ADDR
// if ValidHex ( x , y ) then
9552: LD_VAR 0 2
9556: PPUSH
9557: LD_VAR 0 3
9561: PPUSH
9562: CALL_OW 488
9566: IFFALSE 9601
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
9568: LD_VAR 0 1
9572: PPUSH
9573: LD_VAR 0 2
9577: PPUSH
9578: LD_VAR 0 3
9582: PPUSH
9583: LD_INT 3
9585: PPUSH
9586: LD_INT 6
9588: PPUSH
9589: CALL_OW 12
9593: PPUSH
9594: LD_INT 1
9596: PPUSH
9597: CALL_OW 483
// end ;
9601: GO 9461
9603: POP
9604: POP
// end ;
9605: PPOPN 5
9607: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
9608: LD_EXP 1
9612: PUSH
9613: LD_EXP 36
9617: AND
9618: IFFALSE 9712
9620: GO 9622
9622: DISABLE
9623: LD_INT 0
9625: PPUSH
9626: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
9627: LD_ADDR_VAR 0 2
9631: PUSH
9632: LD_INT 22
9634: PUSH
9635: LD_OWVAR 2
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: LD_INT 32
9646: PUSH
9647: LD_INT 1
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: PUSH
9654: LD_INT 21
9656: PUSH
9657: LD_INT 2
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: LIST
9668: PPUSH
9669: CALL_OW 69
9673: ST_TO_ADDR
// if not tmp then
9674: LD_VAR 0 2
9678: NOT
9679: IFFALSE 9683
// exit ;
9681: GO 9712
// for i in tmp do
9683: LD_ADDR_VAR 0 1
9687: PUSH
9688: LD_VAR 0 2
9692: PUSH
9693: FOR_IN
9694: IFFALSE 9710
// SetFuel ( i , 0 ) ;
9696: LD_VAR 0 1
9700: PPUSH
9701: LD_INT 0
9703: PPUSH
9704: CALL_OW 240
9708: GO 9693
9710: POP
9711: POP
// end ;
9712: PPOPN 2
9714: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
9715: LD_EXP 1
9719: PUSH
9720: LD_EXP 37
9724: AND
9725: IFFALSE 9791
9727: GO 9729
9729: DISABLE
9730: LD_INT 0
9732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
9733: LD_ADDR_VAR 0 1
9737: PUSH
9738: LD_INT 22
9740: PUSH
9741: LD_OWVAR 2
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: PUSH
9750: LD_INT 30
9752: PUSH
9753: LD_INT 29
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: PPUSH
9764: CALL_OW 69
9768: ST_TO_ADDR
// if not tmp then
9769: LD_VAR 0 1
9773: NOT
9774: IFFALSE 9778
// exit ;
9776: GO 9791
// DestroyUnit ( tmp [ 1 ] ) ;
9778: LD_VAR 0 1
9782: PUSH
9783: LD_INT 1
9785: ARRAY
9786: PPUSH
9787: CALL_OW 65
// end ;
9791: PPOPN 1
9793: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
9794: LD_EXP 1
9798: PUSH
9799: LD_EXP 39
9803: AND
9804: IFFALSE 9933
9806: GO 9808
9808: DISABLE
9809: LD_INT 0
9811: PPUSH
// begin uc_side := 0 ;
9812: LD_ADDR_OWVAR 20
9816: PUSH
9817: LD_INT 0
9819: ST_TO_ADDR
// uc_nation := nation_arabian ;
9820: LD_ADDR_OWVAR 21
9824: PUSH
9825: LD_INT 2
9827: ST_TO_ADDR
// hc_gallery :=  ;
9828: LD_ADDR_OWVAR 33
9832: PUSH
9833: LD_STRING 
9835: ST_TO_ADDR
// hc_name :=  ;
9836: LD_ADDR_OWVAR 26
9840: PUSH
9841: LD_STRING 
9843: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
9844: LD_INT 1
9846: PPUSH
9847: LD_INT 11
9849: PPUSH
9850: LD_INT 10
9852: PPUSH
9853: CALL_OW 380
// un := CreateHuman ;
9857: LD_ADDR_VAR 0 1
9861: PUSH
9862: CALL_OW 44
9866: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
9867: LD_VAR 0 1
9871: PPUSH
9872: LD_INT 1
9874: PPUSH
9875: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
9879: LD_INT 35
9881: PPUSH
9882: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
9886: LD_VAR 0 1
9890: PPUSH
9891: LD_INT 22
9893: PUSH
9894: LD_OWVAR 2
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PPUSH
9903: CALL_OW 69
9907: PPUSH
9908: LD_VAR 0 1
9912: PPUSH
9913: CALL_OW 74
9917: PPUSH
9918: CALL_OW 115
// until IsDead ( un ) ;
9922: LD_VAR 0 1
9926: PPUSH
9927: CALL_OW 301
9931: IFFALSE 9879
// end ;
9933: PPOPN 1
9935: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
9936: LD_EXP 1
9940: PUSH
9941: LD_EXP 41
9945: AND
9946: IFFALSE 9958
9948: GO 9950
9950: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
9951: LD_STRING earthquake(getX(game), 0, 32)
9953: PPUSH
9954: CALL_OW 559
9958: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
9959: LD_EXP 1
9963: PUSH
9964: LD_EXP 42
9968: AND
9969: IFFALSE 10060
9971: GO 9973
9973: DISABLE
9974: LD_INT 0
9976: PPUSH
// begin enable ;
9977: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
9978: LD_ADDR_VAR 0 1
9982: PUSH
9983: LD_INT 22
9985: PUSH
9986: LD_OWVAR 2
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PUSH
9995: LD_INT 21
9997: PUSH
9998: LD_INT 2
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: PUSH
10005: LD_INT 33
10007: PUSH
10008: LD_INT 3
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: LIST
10019: PPUSH
10020: CALL_OW 69
10024: ST_TO_ADDR
// if not tmp then
10025: LD_VAR 0 1
10029: NOT
10030: IFFALSE 10034
// exit ;
10032: GO 10060
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
10034: LD_VAR 0 1
10038: PUSH
10039: LD_INT 1
10041: PPUSH
10042: LD_VAR 0 1
10046: PPUSH
10047: CALL_OW 12
10051: ARRAY
10052: PPUSH
10053: LD_INT 1
10055: PPUSH
10056: CALL_OW 234
// end ;
10060: PPOPN 1
10062: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
10063: LD_EXP 1
10067: PUSH
10068: LD_EXP 43
10072: AND
10073: IFFALSE 10214
10075: GO 10077
10077: DISABLE
10078: LD_INT 0
10080: PPUSH
10081: PPUSH
10082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10083: LD_ADDR_VAR 0 3
10087: PUSH
10088: LD_INT 22
10090: PUSH
10091: LD_OWVAR 2
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PUSH
10100: LD_INT 25
10102: PUSH
10103: LD_INT 1
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: PPUSH
10114: CALL_OW 69
10118: ST_TO_ADDR
// if not tmp then
10119: LD_VAR 0 3
10123: NOT
10124: IFFALSE 10128
// exit ;
10126: GO 10214
// un := tmp [ rand ( 1 , tmp ) ] ;
10128: LD_ADDR_VAR 0 2
10132: PUSH
10133: LD_VAR 0 3
10137: PUSH
10138: LD_INT 1
10140: PPUSH
10141: LD_VAR 0 3
10145: PPUSH
10146: CALL_OW 12
10150: ARRAY
10151: ST_TO_ADDR
// if Crawls ( un ) then
10152: LD_VAR 0 2
10156: PPUSH
10157: CALL_OW 318
10161: IFFALSE 10172
// ComWalk ( un ) ;
10163: LD_VAR 0 2
10167: PPUSH
10168: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
10172: LD_VAR 0 2
10176: PPUSH
10177: LD_INT 9
10179: PPUSH
10180: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
10184: LD_INT 28
10186: PPUSH
10187: LD_OWVAR 2
10191: PPUSH
10192: LD_INT 2
10194: PPUSH
10195: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
10199: LD_INT 29
10201: PPUSH
10202: LD_OWVAR 2
10206: PPUSH
10207: LD_INT 2
10209: PPUSH
10210: CALL_OW 322
// end ;
10214: PPOPN 3
10216: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
10217: LD_EXP 1
10221: PUSH
10222: LD_EXP 44
10226: AND
10227: IFFALSE 10338
10229: GO 10231
10231: DISABLE
10232: LD_INT 0
10234: PPUSH
10235: PPUSH
10236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10237: LD_ADDR_VAR 0 3
10241: PUSH
10242: LD_INT 22
10244: PUSH
10245: LD_OWVAR 2
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: LD_INT 25
10256: PUSH
10257: LD_INT 1
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: PPUSH
10268: CALL_OW 69
10272: ST_TO_ADDR
// if not tmp then
10273: LD_VAR 0 3
10277: NOT
10278: IFFALSE 10282
// exit ;
10280: GO 10338
// un := tmp [ rand ( 1 , tmp ) ] ;
10282: LD_ADDR_VAR 0 2
10286: PUSH
10287: LD_VAR 0 3
10291: PUSH
10292: LD_INT 1
10294: PPUSH
10295: LD_VAR 0 3
10299: PPUSH
10300: CALL_OW 12
10304: ARRAY
10305: ST_TO_ADDR
// if Crawls ( un ) then
10306: LD_VAR 0 2
10310: PPUSH
10311: CALL_OW 318
10315: IFFALSE 10326
// ComWalk ( un ) ;
10317: LD_VAR 0 2
10321: PPUSH
10322: CALL_OW 138
// SetClass ( un , class_mortar ) ;
10326: LD_VAR 0 2
10330: PPUSH
10331: LD_INT 8
10333: PPUSH
10334: CALL_OW 336
// end ;
10338: PPOPN 3
10340: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
10341: LD_EXP 1
10345: PUSH
10346: LD_EXP 45
10350: AND
10351: IFFALSE 10495
10353: GO 10355
10355: DISABLE
10356: LD_INT 0
10358: PPUSH
10359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
10360: LD_ADDR_VAR 0 2
10364: PUSH
10365: LD_INT 22
10367: PUSH
10368: LD_OWVAR 2
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: LD_INT 21
10379: PUSH
10380: LD_INT 2
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: LD_INT 2
10389: PUSH
10390: LD_INT 34
10392: PUSH
10393: LD_INT 12
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: LD_INT 34
10402: PUSH
10403: LD_INT 51
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: PUSH
10410: LD_INT 34
10412: PUSH
10413: LD_INT 32
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: LIST
10430: PPUSH
10431: CALL_OW 69
10435: ST_TO_ADDR
// if not tmp then
10436: LD_VAR 0 2
10440: NOT
10441: IFFALSE 10445
// exit ;
10443: GO 10495
// for i in tmp do
10445: LD_ADDR_VAR 0 1
10449: PUSH
10450: LD_VAR 0 2
10454: PUSH
10455: FOR_IN
10456: IFFALSE 10493
// if GetCargo ( i , mat_artifact ) = 0 then
10458: LD_VAR 0 1
10462: PPUSH
10463: LD_INT 4
10465: PPUSH
10466: CALL_OW 289
10470: PUSH
10471: LD_INT 0
10473: EQUAL
10474: IFFALSE 10491
// SetCargo ( i , mat_siberit , 100 ) ;
10476: LD_VAR 0 1
10480: PPUSH
10481: LD_INT 3
10483: PPUSH
10484: LD_INT 100
10486: PPUSH
10487: CALL_OW 290
10491: GO 10455
10493: POP
10494: POP
// end ;
10495: PPOPN 2
10497: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
10498: LD_EXP 1
10502: PUSH
10503: LD_EXP 46
10507: AND
10508: IFFALSE 10691
10510: GO 10512
10512: DISABLE
10513: LD_INT 0
10515: PPUSH
10516: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
10517: LD_ADDR_VAR 0 2
10521: PUSH
10522: LD_INT 22
10524: PUSH
10525: LD_OWVAR 2
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: PPUSH
10534: CALL_OW 69
10538: ST_TO_ADDR
// if not tmp then
10539: LD_VAR 0 2
10543: NOT
10544: IFFALSE 10548
// exit ;
10546: GO 10691
// for i := 1 to 2 do
10548: LD_ADDR_VAR 0 1
10552: PUSH
10553: DOUBLE
10554: LD_INT 1
10556: DEC
10557: ST_TO_ADDR
10558: LD_INT 2
10560: PUSH
10561: FOR_TO
10562: IFFALSE 10689
// begin uc_side := your_side ;
10564: LD_ADDR_OWVAR 20
10568: PUSH
10569: LD_OWVAR 2
10573: ST_TO_ADDR
// uc_nation := nation_american ;
10574: LD_ADDR_OWVAR 21
10578: PUSH
10579: LD_INT 1
10581: ST_TO_ADDR
// vc_chassis := us_morphling ;
10582: LD_ADDR_OWVAR 37
10586: PUSH
10587: LD_INT 5
10589: ST_TO_ADDR
// vc_engine := engine_siberite ;
10590: LD_ADDR_OWVAR 39
10594: PUSH
10595: LD_INT 3
10597: ST_TO_ADDR
// vc_control := control_computer ;
10598: LD_ADDR_OWVAR 38
10602: PUSH
10603: LD_INT 3
10605: ST_TO_ADDR
// vc_weapon := us_double_laser ;
10606: LD_ADDR_OWVAR 40
10610: PUSH
10611: LD_INT 10
10613: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
10614: LD_VAR 0 2
10618: PUSH
10619: LD_INT 1
10621: ARRAY
10622: PPUSH
10623: CALL_OW 310
10627: NOT
10628: IFFALSE 10675
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
10630: CALL_OW 45
10634: PPUSH
10635: LD_VAR 0 2
10639: PUSH
10640: LD_INT 1
10642: ARRAY
10643: PPUSH
10644: CALL_OW 250
10648: PPUSH
10649: LD_VAR 0 2
10653: PUSH
10654: LD_INT 1
10656: ARRAY
10657: PPUSH
10658: CALL_OW 251
10662: PPUSH
10663: LD_INT 12
10665: PPUSH
10666: LD_INT 1
10668: PPUSH
10669: CALL_OW 50
10673: GO 10687
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
10675: CALL_OW 45
10679: PPUSH
10680: LD_INT 1
10682: PPUSH
10683: CALL_OW 51
// end ;
10687: GO 10561
10689: POP
10690: POP
// end ;
10691: PPOPN 2
10693: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
10694: LD_EXP 1
10698: PUSH
10699: LD_EXP 47
10703: AND
10704: IFFALSE 10926
10706: GO 10708
10708: DISABLE
10709: LD_INT 0
10711: PPUSH
10712: PPUSH
10713: PPUSH
10714: PPUSH
10715: PPUSH
10716: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10717: LD_ADDR_VAR 0 6
10721: PUSH
10722: LD_INT 22
10724: PUSH
10725: LD_OWVAR 2
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: PUSH
10734: LD_INT 21
10736: PUSH
10737: LD_INT 1
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: PUSH
10744: LD_INT 3
10746: PUSH
10747: LD_INT 23
10749: PUSH
10750: LD_INT 0
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PUSH
10761: EMPTY
10762: LIST
10763: LIST
10764: LIST
10765: PPUSH
10766: CALL_OW 69
10770: ST_TO_ADDR
// if not tmp then
10771: LD_VAR 0 6
10775: NOT
10776: IFFALSE 10780
// exit ;
10778: GO 10926
// s1 := rand ( 1 , 4 ) ;
10780: LD_ADDR_VAR 0 2
10784: PUSH
10785: LD_INT 1
10787: PPUSH
10788: LD_INT 4
10790: PPUSH
10791: CALL_OW 12
10795: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
10796: LD_ADDR_VAR 0 4
10800: PUSH
10801: LD_VAR 0 6
10805: PUSH
10806: LD_INT 1
10808: ARRAY
10809: PPUSH
10810: LD_VAR 0 2
10814: PPUSH
10815: CALL_OW 259
10819: ST_TO_ADDR
// if s1 = 1 then
10820: LD_VAR 0 2
10824: PUSH
10825: LD_INT 1
10827: EQUAL
10828: IFFALSE 10848
// s2 := rand ( 2 , 4 ) else
10830: LD_ADDR_VAR 0 3
10834: PUSH
10835: LD_INT 2
10837: PPUSH
10838: LD_INT 4
10840: PPUSH
10841: CALL_OW 12
10845: ST_TO_ADDR
10846: GO 10856
// s2 := 1 ;
10848: LD_ADDR_VAR 0 3
10852: PUSH
10853: LD_INT 1
10855: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
10856: LD_ADDR_VAR 0 5
10860: PUSH
10861: LD_VAR 0 6
10865: PUSH
10866: LD_INT 1
10868: ARRAY
10869: PPUSH
10870: LD_VAR 0 3
10874: PPUSH
10875: CALL_OW 259
10879: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
10880: LD_VAR 0 6
10884: PUSH
10885: LD_INT 1
10887: ARRAY
10888: PPUSH
10889: LD_VAR 0 2
10893: PPUSH
10894: LD_VAR 0 5
10898: PPUSH
10899: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
10903: LD_VAR 0 6
10907: PUSH
10908: LD_INT 1
10910: ARRAY
10911: PPUSH
10912: LD_VAR 0 3
10916: PPUSH
10917: LD_VAR 0 4
10921: PPUSH
10922: CALL_OW 237
// end ;
10926: PPOPN 6
10928: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
10929: LD_EXP 1
10933: PUSH
10934: LD_EXP 48
10938: AND
10939: IFFALSE 11018
10941: GO 10943
10943: DISABLE
10944: LD_INT 0
10946: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
10947: LD_ADDR_VAR 0 1
10951: PUSH
10952: LD_INT 22
10954: PUSH
10955: LD_OWVAR 2
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PUSH
10964: LD_INT 30
10966: PUSH
10967: LD_INT 3
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: PPUSH
10978: CALL_OW 69
10982: ST_TO_ADDR
// if not tmp then
10983: LD_VAR 0 1
10987: NOT
10988: IFFALSE 10992
// exit ;
10990: GO 11018
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
10992: LD_VAR 0 1
10996: PUSH
10997: LD_INT 1
10999: PPUSH
11000: LD_VAR 0 1
11004: PPUSH
11005: CALL_OW 12
11009: ARRAY
11010: PPUSH
11011: LD_INT 1
11013: PPUSH
11014: CALL_OW 234
// end ;
11018: PPOPN 1
11020: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
11021: LD_EXP 1
11025: PUSH
11026: LD_EXP 49
11030: AND
11031: IFFALSE 11143
11033: GO 11035
11035: DISABLE
11036: LD_INT 0
11038: PPUSH
11039: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
11040: LD_ADDR_VAR 0 2
11044: PUSH
11045: LD_INT 22
11047: PUSH
11048: LD_OWVAR 2
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: PUSH
11057: LD_INT 2
11059: PUSH
11060: LD_INT 30
11062: PUSH
11063: LD_INT 27
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PUSH
11070: LD_INT 30
11072: PUSH
11073: LD_INT 26
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PUSH
11080: LD_INT 30
11082: PUSH
11083: LD_INT 28
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: PPUSH
11100: CALL_OW 69
11104: ST_TO_ADDR
// if not tmp then
11105: LD_VAR 0 2
11109: NOT
11110: IFFALSE 11114
// exit ;
11112: GO 11143
// for i in tmp do
11114: LD_ADDR_VAR 0 1
11118: PUSH
11119: LD_VAR 0 2
11123: PUSH
11124: FOR_IN
11125: IFFALSE 11141
// SetLives ( i , 1 ) ;
11127: LD_VAR 0 1
11131: PPUSH
11132: LD_INT 1
11134: PPUSH
11135: CALL_OW 234
11139: GO 11124
11141: POP
11142: POP
// end ;
11143: PPOPN 2
11145: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
11146: LD_EXP 1
11150: PUSH
11151: LD_EXP 50
11155: AND
11156: IFFALSE 11443
11158: GO 11160
11160: DISABLE
11161: LD_INT 0
11163: PPUSH
11164: PPUSH
11165: PPUSH
// begin i := rand ( 1 , 7 ) ;
11166: LD_ADDR_VAR 0 1
11170: PUSH
11171: LD_INT 1
11173: PPUSH
11174: LD_INT 7
11176: PPUSH
11177: CALL_OW 12
11181: ST_TO_ADDR
// case i of 1 :
11182: LD_VAR 0 1
11186: PUSH
11187: LD_INT 1
11189: DOUBLE
11190: EQUAL
11191: IFTRUE 11195
11193: GO 11205
11195: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
11196: LD_STRING earthquake(getX(game), 0, 32)
11198: PPUSH
11199: CALL_OW 559
11203: GO 11443
11205: LD_INT 2
11207: DOUBLE
11208: EQUAL
11209: IFTRUE 11213
11211: GO 11227
11213: POP
// begin ToLua ( displayStucuk(); ) ;
11214: LD_STRING displayStucuk();
11216: PPUSH
11217: CALL_OW 559
// ResetFog ;
11221: CALL_OW 335
// end ; 3 :
11225: GO 11443
11227: LD_INT 3
11229: DOUBLE
11230: EQUAL
11231: IFTRUE 11235
11233: GO 11339
11235: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11236: LD_ADDR_VAR 0 2
11240: PUSH
11241: LD_INT 22
11243: PUSH
11244: LD_OWVAR 2
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: PUSH
11253: LD_INT 25
11255: PUSH
11256: LD_INT 1
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PPUSH
11267: CALL_OW 69
11271: ST_TO_ADDR
// if not tmp then
11272: LD_VAR 0 2
11276: NOT
11277: IFFALSE 11281
// exit ;
11279: GO 11443
// un := tmp [ rand ( 1 , tmp ) ] ;
11281: LD_ADDR_VAR 0 3
11285: PUSH
11286: LD_VAR 0 2
11290: PUSH
11291: LD_INT 1
11293: PPUSH
11294: LD_VAR 0 2
11298: PPUSH
11299: CALL_OW 12
11303: ARRAY
11304: ST_TO_ADDR
// if Crawls ( un ) then
11305: LD_VAR 0 3
11309: PPUSH
11310: CALL_OW 318
11314: IFFALSE 11325
// ComWalk ( un ) ;
11316: LD_VAR 0 3
11320: PPUSH
11321: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11325: LD_VAR 0 3
11329: PPUSH
11330: LD_INT 8
11332: PPUSH
11333: CALL_OW 336
// end ; 4 :
11337: GO 11443
11339: LD_INT 4
11341: DOUBLE
11342: EQUAL
11343: IFTRUE 11347
11345: GO 11421
11347: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11348: LD_ADDR_VAR 0 2
11352: PUSH
11353: LD_INT 22
11355: PUSH
11356: LD_OWVAR 2
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: LD_INT 30
11367: PUSH
11368: LD_INT 29
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PPUSH
11379: CALL_OW 69
11383: ST_TO_ADDR
// if not tmp then
11384: LD_VAR 0 2
11388: NOT
11389: IFFALSE 11393
// exit ;
11391: GO 11443
// CenterNowOnUnits ( tmp [ 1 ] ) ;
11393: LD_VAR 0 2
11397: PUSH
11398: LD_INT 1
11400: ARRAY
11401: PPUSH
11402: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
11406: LD_VAR 0 2
11410: PUSH
11411: LD_INT 1
11413: ARRAY
11414: PPUSH
11415: CALL_OW 65
// end ; 5 .. 7 :
11419: GO 11443
11421: LD_INT 5
11423: DOUBLE
11424: GREATEREQUAL
11425: IFFALSE 11433
11427: LD_INT 7
11429: DOUBLE
11430: LESSEQUAL
11431: IFTRUE 11435
11433: GO 11442
11435: POP
// StreamSibBomb ; end ;
11436: CALL 7680 0 0
11440: GO 11443
11442: POP
// end ;
11443: PPOPN 3
11445: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
11446: LD_EXP 1
11450: PUSH
11451: LD_EXP 51
11455: AND
11456: IFFALSE 11612
11458: GO 11460
11460: DISABLE
11461: LD_INT 0
11463: PPUSH
11464: PPUSH
11465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
11466: LD_ADDR_VAR 0 2
11470: PUSH
11471: LD_INT 81
11473: PUSH
11474: LD_OWVAR 2
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PUSH
11483: LD_INT 2
11485: PUSH
11486: LD_INT 21
11488: PUSH
11489: LD_INT 1
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PUSH
11496: LD_INT 21
11498: PUSH
11499: LD_INT 2
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: LIST
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PPUSH
11515: CALL_OW 69
11519: ST_TO_ADDR
// if not tmp then
11520: LD_VAR 0 2
11524: NOT
11525: IFFALSE 11529
// exit ;
11527: GO 11612
// p := 0 ;
11529: LD_ADDR_VAR 0 3
11533: PUSH
11534: LD_INT 0
11536: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11537: LD_INT 35
11539: PPUSH
11540: CALL_OW 67
// p := p + 1 ;
11544: LD_ADDR_VAR 0 3
11548: PUSH
11549: LD_VAR 0 3
11553: PUSH
11554: LD_INT 1
11556: PLUS
11557: ST_TO_ADDR
// for i in tmp do
11558: LD_ADDR_VAR 0 1
11562: PUSH
11563: LD_VAR 0 2
11567: PUSH
11568: FOR_IN
11569: IFFALSE 11600
// if GetLives ( i ) < 1000 then
11571: LD_VAR 0 1
11575: PPUSH
11576: CALL_OW 256
11580: PUSH
11581: LD_INT 1000
11583: LESS
11584: IFFALSE 11598
// SetLives ( i , 1000 ) ;
11586: LD_VAR 0 1
11590: PPUSH
11591: LD_INT 1000
11593: PPUSH
11594: CALL_OW 234
11598: GO 11568
11600: POP
11601: POP
// until p > 20 ;
11602: LD_VAR 0 3
11606: PUSH
11607: LD_INT 20
11609: GREATER
11610: IFFALSE 11537
// end ;
11612: PPOPN 3
11614: END
// every 0 0$1 trigger StreamModeActive and sTime do
11615: LD_EXP 1
11619: PUSH
11620: LD_EXP 52
11624: AND
11625: IFFALSE 11660
11627: GO 11629
11629: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
11630: LD_INT 28
11632: PPUSH
11633: LD_OWVAR 2
11637: PPUSH
11638: LD_INT 2
11640: PPUSH
11641: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
11645: LD_INT 30
11647: PPUSH
11648: LD_OWVAR 2
11652: PPUSH
11653: LD_INT 2
11655: PPUSH
11656: CALL_OW 322
// end ;
11660: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
11661: LD_EXP 1
11665: PUSH
11666: LD_EXP 53
11670: AND
11671: IFFALSE 11792
11673: GO 11675
11675: DISABLE
11676: LD_INT 0
11678: PPUSH
11679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11680: LD_ADDR_VAR 0 2
11684: PUSH
11685: LD_INT 22
11687: PUSH
11688: LD_OWVAR 2
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: LD_INT 21
11699: PUSH
11700: LD_INT 1
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: LD_INT 3
11709: PUSH
11710: LD_INT 23
11712: PUSH
11713: LD_INT 0
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: LIST
11728: PPUSH
11729: CALL_OW 69
11733: ST_TO_ADDR
// if not tmp then
11734: LD_VAR 0 2
11738: NOT
11739: IFFALSE 11743
// exit ;
11741: GO 11792
// for i in tmp do
11743: LD_ADDR_VAR 0 1
11747: PUSH
11748: LD_VAR 0 2
11752: PUSH
11753: FOR_IN
11754: IFFALSE 11790
// begin if Crawls ( i ) then
11756: LD_VAR 0 1
11760: PPUSH
11761: CALL_OW 318
11765: IFFALSE 11776
// ComWalk ( i ) ;
11767: LD_VAR 0 1
11771: PPUSH
11772: CALL_OW 138
// SetClass ( i , 2 ) ;
11776: LD_VAR 0 1
11780: PPUSH
11781: LD_INT 2
11783: PPUSH
11784: CALL_OW 336
// end ;
11788: GO 11753
11790: POP
11791: POP
// end ;
11792: PPOPN 2
11794: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
11795: LD_EXP 1
11799: PUSH
11800: LD_EXP 54
11804: AND
11805: IFFALSE 12093
11807: GO 11809
11809: DISABLE
11810: LD_INT 0
11812: PPUSH
11813: PPUSH
11814: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
11815: LD_OWVAR 2
11819: PPUSH
11820: LD_INT 9
11822: PPUSH
11823: LD_INT 1
11825: PPUSH
11826: LD_INT 1
11828: PPUSH
11829: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
11833: LD_INT 9
11835: PPUSH
11836: LD_OWVAR 2
11840: PPUSH
11841: CALL_OW 343
// uc_side := 9 ;
11845: LD_ADDR_OWVAR 20
11849: PUSH
11850: LD_INT 9
11852: ST_TO_ADDR
// uc_nation := 2 ;
11853: LD_ADDR_OWVAR 21
11857: PUSH
11858: LD_INT 2
11860: ST_TO_ADDR
// hc_name := Dark Warrior ;
11861: LD_ADDR_OWVAR 26
11865: PUSH
11866: LD_STRING Dark Warrior
11868: ST_TO_ADDR
// hc_gallery :=  ;
11869: LD_ADDR_OWVAR 33
11873: PUSH
11874: LD_STRING 
11876: ST_TO_ADDR
// hc_noskilllimit := true ;
11877: LD_ADDR_OWVAR 76
11881: PUSH
11882: LD_INT 1
11884: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
11885: LD_ADDR_OWVAR 31
11889: PUSH
11890: LD_INT 30
11892: PUSH
11893: LD_INT 30
11895: PUSH
11896: LD_INT 30
11898: PUSH
11899: LD_INT 30
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: ST_TO_ADDR
// un := CreateHuman ;
11908: LD_ADDR_VAR 0 3
11912: PUSH
11913: CALL_OW 44
11917: ST_TO_ADDR
// hc_noskilllimit := false ;
11918: LD_ADDR_OWVAR 76
11922: PUSH
11923: LD_INT 0
11925: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11926: LD_VAR 0 3
11930: PPUSH
11931: LD_INT 1
11933: PPUSH
11934: CALL_OW 51
// ToLua ( playRanger() ) ;
11938: LD_STRING playRanger()
11940: PPUSH
11941: CALL_OW 559
// p := 0 ;
11945: LD_ADDR_VAR 0 2
11949: PUSH
11950: LD_INT 0
11952: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11953: LD_INT 35
11955: PPUSH
11956: CALL_OW 67
// p := p + 1 ;
11960: LD_ADDR_VAR 0 2
11964: PUSH
11965: LD_VAR 0 2
11969: PUSH
11970: LD_INT 1
11972: PLUS
11973: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
11974: LD_VAR 0 3
11978: PPUSH
11979: CALL_OW 256
11983: PUSH
11984: LD_INT 1000
11986: LESS
11987: IFFALSE 12001
// SetLives ( un , 1000 ) ;
11989: LD_VAR 0 3
11993: PPUSH
11994: LD_INT 1000
11996: PPUSH
11997: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
12001: LD_VAR 0 3
12005: PPUSH
12006: LD_INT 81
12008: PUSH
12009: LD_OWVAR 2
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PUSH
12018: LD_INT 91
12020: PUSH
12021: LD_VAR 0 3
12025: PUSH
12026: LD_INT 30
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: LIST
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PPUSH
12038: CALL_OW 69
12042: PPUSH
12043: LD_VAR 0 3
12047: PPUSH
12048: CALL_OW 74
12052: PPUSH
12053: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
12057: LD_VAR 0 2
12061: PUSH
12062: LD_INT 80
12064: GREATER
12065: PUSH
12066: LD_VAR 0 3
12070: PPUSH
12071: CALL_OW 301
12075: OR
12076: IFFALSE 11953
// if un then
12078: LD_VAR 0 3
12082: IFFALSE 12093
// RemoveUnit ( un ) ;
12084: LD_VAR 0 3
12088: PPUSH
12089: CALL_OW 64
// end ;
12093: PPOPN 3
12095: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
12096: LD_EXP 55
12100: IFFALSE 12216
12102: GO 12104
12104: DISABLE
12105: LD_INT 0
12107: PPUSH
12108: PPUSH
12109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12110: LD_ADDR_VAR 0 2
12114: PUSH
12115: LD_INT 81
12117: PUSH
12118: LD_OWVAR 2
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 21
12129: PUSH
12130: LD_INT 1
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PPUSH
12141: CALL_OW 69
12145: ST_TO_ADDR
// ToLua ( playComputer() ) ;
12146: LD_STRING playComputer()
12148: PPUSH
12149: CALL_OW 559
// if not tmp then
12153: LD_VAR 0 2
12157: NOT
12158: IFFALSE 12162
// exit ;
12160: GO 12216
// for i in tmp do
12162: LD_ADDR_VAR 0 1
12166: PUSH
12167: LD_VAR 0 2
12171: PUSH
12172: FOR_IN
12173: IFFALSE 12214
// for j := 1 to 4 do
12175: LD_ADDR_VAR 0 3
12179: PUSH
12180: DOUBLE
12181: LD_INT 1
12183: DEC
12184: ST_TO_ADDR
12185: LD_INT 4
12187: PUSH
12188: FOR_TO
12189: IFFALSE 12210
// SetSkill ( i , j , 10 ) ;
12191: LD_VAR 0 1
12195: PPUSH
12196: LD_VAR 0 3
12200: PPUSH
12201: LD_INT 10
12203: PPUSH
12204: CALL_OW 237
12208: GO 12188
12210: POP
12211: POP
12212: GO 12172
12214: POP
12215: POP
// end ;
12216: PPOPN 3
12218: END
// every 0 0$1 trigger s30 do var i , tmp ;
12219: LD_EXP 56
12223: IFFALSE 12292
12225: GO 12227
12227: DISABLE
12228: LD_INT 0
12230: PPUSH
12231: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12232: LD_ADDR_VAR 0 2
12236: PUSH
12237: LD_INT 22
12239: PUSH
12240: LD_OWVAR 2
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PPUSH
12249: CALL_OW 69
12253: ST_TO_ADDR
// if not tmp then
12254: LD_VAR 0 2
12258: NOT
12259: IFFALSE 12263
// exit ;
12261: GO 12292
// for i in tmp do
12263: LD_ADDR_VAR 0 1
12267: PUSH
12268: LD_VAR 0 2
12272: PUSH
12273: FOR_IN
12274: IFFALSE 12290
// SetLives ( i , 300 ) ;
12276: LD_VAR 0 1
12280: PPUSH
12281: LD_INT 300
12283: PPUSH
12284: CALL_OW 234
12288: GO 12273
12290: POP
12291: POP
// end ;
12292: PPOPN 2
12294: END
// every 0 0$1 trigger s60 do var i , tmp ;
12295: LD_EXP 57
12299: IFFALSE 12368
12301: GO 12303
12303: DISABLE
12304: LD_INT 0
12306: PPUSH
12307: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12308: LD_ADDR_VAR 0 2
12312: PUSH
12313: LD_INT 22
12315: PUSH
12316: LD_OWVAR 2
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: PPUSH
12325: CALL_OW 69
12329: ST_TO_ADDR
// if not tmp then
12330: LD_VAR 0 2
12334: NOT
12335: IFFALSE 12339
// exit ;
12337: GO 12368
// for i in tmp do
12339: LD_ADDR_VAR 0 1
12343: PUSH
12344: LD_VAR 0 2
12348: PUSH
12349: FOR_IN
12350: IFFALSE 12366
// SetLives ( i , 600 ) ;
12352: LD_VAR 0 1
12356: PPUSH
12357: LD_INT 600
12359: PPUSH
12360: CALL_OW 234
12364: GO 12349
12366: POP
12367: POP
// end ;
12368: PPOPN 2
12370: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12371: LD_INT 0
12373: PPUSH
// case cmd of 301 :
12374: LD_VAR 0 1
12378: PUSH
12379: LD_INT 301
12381: DOUBLE
12382: EQUAL
12383: IFTRUE 12387
12385: GO 12419
12387: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
12388: LD_VAR 0 6
12392: PPUSH
12393: LD_VAR 0 7
12397: PPUSH
12398: LD_VAR 0 8
12402: PPUSH
12403: LD_VAR 0 4
12407: PPUSH
12408: LD_VAR 0 5
12412: PPUSH
12413: CALL 13620 0 5
12417: GO 12540
12419: LD_INT 302
12421: DOUBLE
12422: EQUAL
12423: IFTRUE 12427
12425: GO 12464
12427: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
12428: LD_VAR 0 6
12432: PPUSH
12433: LD_VAR 0 7
12437: PPUSH
12438: LD_VAR 0 8
12442: PPUSH
12443: LD_VAR 0 9
12447: PPUSH
12448: LD_VAR 0 4
12452: PPUSH
12453: LD_VAR 0 5
12457: PPUSH
12458: CALL 13711 0 6
12462: GO 12540
12464: LD_INT 303
12466: DOUBLE
12467: EQUAL
12468: IFTRUE 12472
12470: GO 12509
12472: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
12473: LD_VAR 0 6
12477: PPUSH
12478: LD_VAR 0 7
12482: PPUSH
12483: LD_VAR 0 8
12487: PPUSH
12488: LD_VAR 0 9
12492: PPUSH
12493: LD_VAR 0 4
12497: PPUSH
12498: LD_VAR 0 5
12502: PPUSH
12503: CALL 12545 0 6
12507: GO 12540
12509: LD_INT 304
12511: DOUBLE
12512: EQUAL
12513: IFTRUE 12517
12515: GO 12539
12517: POP
// hHackTeleport ( unit , x , y ) ; end ;
12518: LD_VAR 0 2
12522: PPUSH
12523: LD_VAR 0 4
12527: PPUSH
12528: LD_VAR 0 5
12532: PPUSH
12533: CALL 14304 0 3
12537: GO 12540
12539: POP
// end ;
12540: LD_VAR 0 12
12544: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
12545: LD_INT 0
12547: PPUSH
12548: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
12549: LD_VAR 0 1
12553: PUSH
12554: LD_INT 1
12556: LESS
12557: PUSH
12558: LD_VAR 0 1
12562: PUSH
12563: LD_INT 3
12565: GREATER
12566: OR
12567: PUSH
12568: LD_VAR 0 5
12572: PPUSH
12573: LD_VAR 0 6
12577: PPUSH
12578: CALL_OW 428
12582: OR
12583: IFFALSE 12587
// exit ;
12585: GO 13307
// uc_side := your_side ;
12587: LD_ADDR_OWVAR 20
12591: PUSH
12592: LD_OWVAR 2
12596: ST_TO_ADDR
// uc_nation := nation ;
12597: LD_ADDR_OWVAR 21
12601: PUSH
12602: LD_VAR 0 1
12606: ST_TO_ADDR
// bc_level = 1 ;
12607: LD_ADDR_OWVAR 43
12611: PUSH
12612: LD_INT 1
12614: ST_TO_ADDR
// case btype of 1 :
12615: LD_VAR 0 2
12619: PUSH
12620: LD_INT 1
12622: DOUBLE
12623: EQUAL
12624: IFTRUE 12628
12626: GO 12639
12628: POP
// bc_type := b_depot ; 2 :
12629: LD_ADDR_OWVAR 42
12633: PUSH
12634: LD_INT 0
12636: ST_TO_ADDR
12637: GO 13251
12639: LD_INT 2
12641: DOUBLE
12642: EQUAL
12643: IFTRUE 12647
12645: GO 12658
12647: POP
// bc_type := b_warehouse ; 3 :
12648: LD_ADDR_OWVAR 42
12652: PUSH
12653: LD_INT 1
12655: ST_TO_ADDR
12656: GO 13251
12658: LD_INT 3
12660: DOUBLE
12661: EQUAL
12662: IFTRUE 12666
12664: GO 12677
12666: POP
// bc_type := b_lab ; 4 .. 9 :
12667: LD_ADDR_OWVAR 42
12671: PUSH
12672: LD_INT 6
12674: ST_TO_ADDR
12675: GO 13251
12677: LD_INT 4
12679: DOUBLE
12680: GREATEREQUAL
12681: IFFALSE 12689
12683: LD_INT 9
12685: DOUBLE
12686: LESSEQUAL
12687: IFTRUE 12691
12689: GO 12743
12691: POP
// begin bc_type := b_lab_half ;
12692: LD_ADDR_OWVAR 42
12696: PUSH
12697: LD_INT 7
12699: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
12700: LD_ADDR_OWVAR 44
12704: PUSH
12705: LD_INT 10
12707: PUSH
12708: LD_INT 11
12710: PUSH
12711: LD_INT 12
12713: PUSH
12714: LD_INT 15
12716: PUSH
12717: LD_INT 14
12719: PUSH
12720: LD_INT 13
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: PUSH
12731: LD_VAR 0 2
12735: PUSH
12736: LD_INT 3
12738: MINUS
12739: ARRAY
12740: ST_TO_ADDR
// end ; 10 .. 13 :
12741: GO 13251
12743: LD_INT 10
12745: DOUBLE
12746: GREATEREQUAL
12747: IFFALSE 12755
12749: LD_INT 13
12751: DOUBLE
12752: LESSEQUAL
12753: IFTRUE 12757
12755: GO 12834
12757: POP
// begin bc_type := b_lab_full ;
12758: LD_ADDR_OWVAR 42
12762: PUSH
12763: LD_INT 8
12765: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
12766: LD_ADDR_OWVAR 44
12770: PUSH
12771: LD_INT 10
12773: PUSH
12774: LD_INT 12
12776: PUSH
12777: LD_INT 14
12779: PUSH
12780: LD_INT 13
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: PUSH
12789: LD_VAR 0 2
12793: PUSH
12794: LD_INT 9
12796: MINUS
12797: ARRAY
12798: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
12799: LD_ADDR_OWVAR 45
12803: PUSH
12804: LD_INT 11
12806: PUSH
12807: LD_INT 15
12809: PUSH
12810: LD_INT 12
12812: PUSH
12813: LD_INT 15
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: PUSH
12822: LD_VAR 0 2
12826: PUSH
12827: LD_INT 9
12829: MINUS
12830: ARRAY
12831: ST_TO_ADDR
// end ; 14 :
12832: GO 13251
12834: LD_INT 14
12836: DOUBLE
12837: EQUAL
12838: IFTRUE 12842
12840: GO 12853
12842: POP
// bc_type := b_workshop ; 15 :
12843: LD_ADDR_OWVAR 42
12847: PUSH
12848: LD_INT 2
12850: ST_TO_ADDR
12851: GO 13251
12853: LD_INT 15
12855: DOUBLE
12856: EQUAL
12857: IFTRUE 12861
12859: GO 12872
12861: POP
// bc_type := b_factory ; 16 :
12862: LD_ADDR_OWVAR 42
12866: PUSH
12867: LD_INT 3
12869: ST_TO_ADDR
12870: GO 13251
12872: LD_INT 16
12874: DOUBLE
12875: EQUAL
12876: IFTRUE 12880
12878: GO 12891
12880: POP
// bc_type := b_ext_gun ; 17 :
12881: LD_ADDR_OWVAR 42
12885: PUSH
12886: LD_INT 17
12888: ST_TO_ADDR
12889: GO 13251
12891: LD_INT 17
12893: DOUBLE
12894: EQUAL
12895: IFTRUE 12899
12897: GO 12927
12899: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
12900: LD_ADDR_OWVAR 42
12904: PUSH
12905: LD_INT 19
12907: PUSH
12908: LD_INT 23
12910: PUSH
12911: LD_INT 19
12913: PUSH
12914: EMPTY
12915: LIST
12916: LIST
12917: LIST
12918: PUSH
12919: LD_VAR 0 1
12923: ARRAY
12924: ST_TO_ADDR
12925: GO 13251
12927: LD_INT 18
12929: DOUBLE
12930: EQUAL
12931: IFTRUE 12935
12933: GO 12946
12935: POP
// bc_type := b_ext_radar ; 19 :
12936: LD_ADDR_OWVAR 42
12940: PUSH
12941: LD_INT 20
12943: ST_TO_ADDR
12944: GO 13251
12946: LD_INT 19
12948: DOUBLE
12949: EQUAL
12950: IFTRUE 12954
12952: GO 12965
12954: POP
// bc_type := b_ext_radio ; 20 :
12955: LD_ADDR_OWVAR 42
12959: PUSH
12960: LD_INT 22
12962: ST_TO_ADDR
12963: GO 13251
12965: LD_INT 20
12967: DOUBLE
12968: EQUAL
12969: IFTRUE 12973
12971: GO 12984
12973: POP
// bc_type := b_ext_siberium ; 21 :
12974: LD_ADDR_OWVAR 42
12978: PUSH
12979: LD_INT 21
12981: ST_TO_ADDR
12982: GO 13251
12984: LD_INT 21
12986: DOUBLE
12987: EQUAL
12988: IFTRUE 12992
12990: GO 13003
12992: POP
// bc_type := b_ext_computer ; 22 :
12993: LD_ADDR_OWVAR 42
12997: PUSH
12998: LD_INT 24
13000: ST_TO_ADDR
13001: GO 13251
13003: LD_INT 22
13005: DOUBLE
13006: EQUAL
13007: IFTRUE 13011
13009: GO 13022
13011: POP
// bc_type := b_ext_track ; 23 :
13012: LD_ADDR_OWVAR 42
13016: PUSH
13017: LD_INT 16
13019: ST_TO_ADDR
13020: GO 13251
13022: LD_INT 23
13024: DOUBLE
13025: EQUAL
13026: IFTRUE 13030
13028: GO 13041
13030: POP
// bc_type := b_ext_laser ; 24 :
13031: LD_ADDR_OWVAR 42
13035: PUSH
13036: LD_INT 25
13038: ST_TO_ADDR
13039: GO 13251
13041: LD_INT 24
13043: DOUBLE
13044: EQUAL
13045: IFTRUE 13049
13047: GO 13060
13049: POP
// bc_type := b_control_tower ; 25 :
13050: LD_ADDR_OWVAR 42
13054: PUSH
13055: LD_INT 36
13057: ST_TO_ADDR
13058: GO 13251
13060: LD_INT 25
13062: DOUBLE
13063: EQUAL
13064: IFTRUE 13068
13066: GO 13079
13068: POP
// bc_type := b_breastwork ; 26 :
13069: LD_ADDR_OWVAR 42
13073: PUSH
13074: LD_INT 31
13076: ST_TO_ADDR
13077: GO 13251
13079: LD_INT 26
13081: DOUBLE
13082: EQUAL
13083: IFTRUE 13087
13085: GO 13098
13087: POP
// bc_type := b_bunker ; 27 :
13088: LD_ADDR_OWVAR 42
13092: PUSH
13093: LD_INT 32
13095: ST_TO_ADDR
13096: GO 13251
13098: LD_INT 27
13100: DOUBLE
13101: EQUAL
13102: IFTRUE 13106
13104: GO 13117
13106: POP
// bc_type := b_turret ; 28 :
13107: LD_ADDR_OWVAR 42
13111: PUSH
13112: LD_INT 33
13114: ST_TO_ADDR
13115: GO 13251
13117: LD_INT 28
13119: DOUBLE
13120: EQUAL
13121: IFTRUE 13125
13123: GO 13136
13125: POP
// bc_type := b_armoury ; 29 :
13126: LD_ADDR_OWVAR 42
13130: PUSH
13131: LD_INT 4
13133: ST_TO_ADDR
13134: GO 13251
13136: LD_INT 29
13138: DOUBLE
13139: EQUAL
13140: IFTRUE 13144
13142: GO 13155
13144: POP
// bc_type := b_barracks ; 30 :
13145: LD_ADDR_OWVAR 42
13149: PUSH
13150: LD_INT 5
13152: ST_TO_ADDR
13153: GO 13251
13155: LD_INT 30
13157: DOUBLE
13158: EQUAL
13159: IFTRUE 13163
13161: GO 13174
13163: POP
// bc_type := b_solar_power ; 31 :
13164: LD_ADDR_OWVAR 42
13168: PUSH
13169: LD_INT 27
13171: ST_TO_ADDR
13172: GO 13251
13174: LD_INT 31
13176: DOUBLE
13177: EQUAL
13178: IFTRUE 13182
13180: GO 13193
13182: POP
// bc_type := b_oil_power ; 32 :
13183: LD_ADDR_OWVAR 42
13187: PUSH
13188: LD_INT 26
13190: ST_TO_ADDR
13191: GO 13251
13193: LD_INT 32
13195: DOUBLE
13196: EQUAL
13197: IFTRUE 13201
13199: GO 13212
13201: POP
// bc_type := b_siberite_power ; 33 :
13202: LD_ADDR_OWVAR 42
13206: PUSH
13207: LD_INT 28
13209: ST_TO_ADDR
13210: GO 13251
13212: LD_INT 33
13214: DOUBLE
13215: EQUAL
13216: IFTRUE 13220
13218: GO 13231
13220: POP
// bc_type := b_oil_mine ; 34 :
13221: LD_ADDR_OWVAR 42
13225: PUSH
13226: LD_INT 29
13228: ST_TO_ADDR
13229: GO 13251
13231: LD_INT 34
13233: DOUBLE
13234: EQUAL
13235: IFTRUE 13239
13237: GO 13250
13239: POP
// bc_type := b_siberite_mine ; end ;
13240: LD_ADDR_OWVAR 42
13244: PUSH
13245: LD_INT 30
13247: ST_TO_ADDR
13248: GO 13251
13250: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
13251: LD_ADDR_VAR 0 8
13255: PUSH
13256: LD_VAR 0 5
13260: PPUSH
13261: LD_VAR 0 6
13265: PPUSH
13266: LD_VAR 0 3
13270: PPUSH
13271: CALL_OW 47
13275: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
13276: LD_OWVAR 42
13280: PUSH
13281: LD_INT 32
13283: PUSH
13284: LD_INT 33
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: IN
13291: IFFALSE 13307
// PlaceWeaponTurret ( b , weapon ) ;
13293: LD_VAR 0 8
13297: PPUSH
13298: LD_VAR 0 4
13302: PPUSH
13303: CALL_OW 431
// end ;
13307: LD_VAR 0 7
13311: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
13312: LD_INT 0
13314: PPUSH
13315: PPUSH
13316: PPUSH
13317: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13318: LD_ADDR_VAR 0 4
13322: PUSH
13323: LD_INT 22
13325: PUSH
13326: LD_OWVAR 2
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: PUSH
13335: LD_INT 2
13337: PUSH
13338: LD_INT 30
13340: PUSH
13341: LD_INT 0
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: PUSH
13348: LD_INT 30
13350: PUSH
13351: LD_INT 1
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: LIST
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PPUSH
13367: CALL_OW 69
13371: ST_TO_ADDR
// if not tmp then
13372: LD_VAR 0 4
13376: NOT
13377: IFFALSE 13381
// exit ;
13379: GO 13440
// for i in tmp do
13381: LD_ADDR_VAR 0 2
13385: PUSH
13386: LD_VAR 0 4
13390: PUSH
13391: FOR_IN
13392: IFFALSE 13438
// for j = 1 to 3 do
13394: LD_ADDR_VAR 0 3
13398: PUSH
13399: DOUBLE
13400: LD_INT 1
13402: DEC
13403: ST_TO_ADDR
13404: LD_INT 3
13406: PUSH
13407: FOR_TO
13408: IFFALSE 13434
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
13410: LD_VAR 0 2
13414: PPUSH
13415: CALL_OW 274
13419: PPUSH
13420: LD_VAR 0 3
13424: PPUSH
13425: LD_INT 99999
13427: PPUSH
13428: CALL_OW 277
13432: GO 13407
13434: POP
13435: POP
13436: GO 13391
13438: POP
13439: POP
// end ;
13440: LD_VAR 0 1
13444: RET
// export function hHackSetLevel10 ; var i , j ; begin
13445: LD_INT 0
13447: PPUSH
13448: PPUSH
13449: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
13450: LD_ADDR_VAR 0 2
13454: PUSH
13455: LD_INT 21
13457: PUSH
13458: LD_INT 1
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: PPUSH
13465: CALL_OW 69
13469: PUSH
13470: FOR_IN
13471: IFFALSE 13523
// if IsSelected ( i ) then
13473: LD_VAR 0 2
13477: PPUSH
13478: CALL_OW 306
13482: IFFALSE 13521
// begin for j := 1 to 4 do
13484: LD_ADDR_VAR 0 3
13488: PUSH
13489: DOUBLE
13490: LD_INT 1
13492: DEC
13493: ST_TO_ADDR
13494: LD_INT 4
13496: PUSH
13497: FOR_TO
13498: IFFALSE 13519
// SetSkill ( i , j , 10 ) ;
13500: LD_VAR 0 2
13504: PPUSH
13505: LD_VAR 0 3
13509: PPUSH
13510: LD_INT 10
13512: PPUSH
13513: CALL_OW 237
13517: GO 13497
13519: POP
13520: POP
// end ;
13521: GO 13470
13523: POP
13524: POP
// end ;
13525: LD_VAR 0 1
13529: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
13530: LD_INT 0
13532: PPUSH
13533: PPUSH
13534: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
13535: LD_ADDR_VAR 0 2
13539: PUSH
13540: LD_INT 22
13542: PUSH
13543: LD_OWVAR 2
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: PUSH
13552: LD_INT 21
13554: PUSH
13555: LD_INT 1
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: PPUSH
13566: CALL_OW 69
13570: PUSH
13571: FOR_IN
13572: IFFALSE 13613
// begin for j := 1 to 4 do
13574: LD_ADDR_VAR 0 3
13578: PUSH
13579: DOUBLE
13580: LD_INT 1
13582: DEC
13583: ST_TO_ADDR
13584: LD_INT 4
13586: PUSH
13587: FOR_TO
13588: IFFALSE 13609
// SetSkill ( i , j , 10 ) ;
13590: LD_VAR 0 2
13594: PPUSH
13595: LD_VAR 0 3
13599: PPUSH
13600: LD_INT 10
13602: PPUSH
13603: CALL_OW 237
13607: GO 13587
13609: POP
13610: POP
// end ;
13611: GO 13571
13613: POP
13614: POP
// end ;
13615: LD_VAR 0 1
13619: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
13620: LD_INT 0
13622: PPUSH
// uc_side := your_side ;
13623: LD_ADDR_OWVAR 20
13627: PUSH
13628: LD_OWVAR 2
13632: ST_TO_ADDR
// uc_nation := nation ;
13633: LD_ADDR_OWVAR 21
13637: PUSH
13638: LD_VAR 0 1
13642: ST_TO_ADDR
// InitHc ;
13643: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
13647: LD_INT 0
13649: PPUSH
13650: LD_VAR 0 2
13654: PPUSH
13655: LD_VAR 0 3
13659: PPUSH
13660: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
13664: LD_VAR 0 4
13668: PPUSH
13669: LD_VAR 0 5
13673: PPUSH
13674: CALL_OW 428
13678: PUSH
13679: LD_INT 0
13681: EQUAL
13682: IFFALSE 13706
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
13684: CALL_OW 44
13688: PPUSH
13689: LD_VAR 0 4
13693: PPUSH
13694: LD_VAR 0 5
13698: PPUSH
13699: LD_INT 1
13701: PPUSH
13702: CALL_OW 48
// end ;
13706: LD_VAR 0 6
13710: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
13711: LD_INT 0
13713: PPUSH
13714: PPUSH
// uc_side := your_side ;
13715: LD_ADDR_OWVAR 20
13719: PUSH
13720: LD_OWVAR 2
13724: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
13725: LD_VAR 0 1
13729: PUSH
13730: LD_INT 1
13732: PUSH
13733: LD_INT 2
13735: PUSH
13736: LD_INT 3
13738: PUSH
13739: LD_INT 4
13741: PUSH
13742: LD_INT 5
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: IN
13752: IFFALSE 13764
// uc_nation := nation_american else
13754: LD_ADDR_OWVAR 21
13758: PUSH
13759: LD_INT 1
13761: ST_TO_ADDR
13762: GO 13807
// if chassis in [ 11 , 12 , 13 , 14 ] then
13764: LD_VAR 0 1
13768: PUSH
13769: LD_INT 11
13771: PUSH
13772: LD_INT 12
13774: PUSH
13775: LD_INT 13
13777: PUSH
13778: LD_INT 14
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: IN
13787: IFFALSE 13799
// uc_nation := nation_arabian else
13789: LD_ADDR_OWVAR 21
13793: PUSH
13794: LD_INT 2
13796: ST_TO_ADDR
13797: GO 13807
// uc_nation := nation_russian ;
13799: LD_ADDR_OWVAR 21
13803: PUSH
13804: LD_INT 3
13806: ST_TO_ADDR
// vc_chassis := chassis ;
13807: LD_ADDR_OWVAR 37
13811: PUSH
13812: LD_VAR 0 1
13816: ST_TO_ADDR
// vc_engine := engine ;
13817: LD_ADDR_OWVAR 39
13821: PUSH
13822: LD_VAR 0 2
13826: ST_TO_ADDR
// vc_control := control ;
13827: LD_ADDR_OWVAR 38
13831: PUSH
13832: LD_VAR 0 3
13836: ST_TO_ADDR
// vc_weapon := weapon ;
13837: LD_ADDR_OWVAR 40
13841: PUSH
13842: LD_VAR 0 4
13846: ST_TO_ADDR
// un := CreateVehicle ;
13847: LD_ADDR_VAR 0 8
13851: PUSH
13852: CALL_OW 45
13856: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
13857: LD_VAR 0 8
13861: PPUSH
13862: LD_INT 0
13864: PPUSH
13865: LD_INT 5
13867: PPUSH
13868: CALL_OW 12
13872: PPUSH
13873: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
13877: LD_VAR 0 8
13881: PPUSH
13882: LD_VAR 0 5
13886: PPUSH
13887: LD_VAR 0 6
13891: PPUSH
13892: LD_INT 1
13894: PPUSH
13895: CALL_OW 48
// end ;
13899: LD_VAR 0 7
13903: RET
// export hInvincible ; every 1 do
13904: GO 13906
13906: DISABLE
// hInvincible := [ ] ;
13907: LD_ADDR_EXP 58
13911: PUSH
13912: EMPTY
13913: ST_TO_ADDR
13914: END
// every 10 do var i ;
13915: GO 13917
13917: DISABLE
13918: LD_INT 0
13920: PPUSH
// begin enable ;
13921: ENABLE
// if not hInvincible then
13922: LD_EXP 58
13926: NOT
13927: IFFALSE 13931
// exit ;
13929: GO 13975
// for i in hInvincible do
13931: LD_ADDR_VAR 0 1
13935: PUSH
13936: LD_EXP 58
13940: PUSH
13941: FOR_IN
13942: IFFALSE 13973
// if GetLives ( i ) < 1000 then
13944: LD_VAR 0 1
13948: PPUSH
13949: CALL_OW 256
13953: PUSH
13954: LD_INT 1000
13956: LESS
13957: IFFALSE 13971
// SetLives ( i , 1000 ) ;
13959: LD_VAR 0 1
13963: PPUSH
13964: LD_INT 1000
13966: PPUSH
13967: CALL_OW 234
13971: GO 13941
13973: POP
13974: POP
// end ;
13975: PPOPN 1
13977: END
// export function hHackInvincible ; var i ; begin
13978: LD_INT 0
13980: PPUSH
13981: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
13982: LD_ADDR_VAR 0 2
13986: PUSH
13987: LD_INT 2
13989: PUSH
13990: LD_INT 21
13992: PUSH
13993: LD_INT 1
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: PUSH
14000: LD_INT 21
14002: PUSH
14003: LD_INT 2
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: LIST
14014: PPUSH
14015: CALL_OW 69
14019: PUSH
14020: FOR_IN
14021: IFFALSE 14082
// if IsSelected ( i ) then
14023: LD_VAR 0 2
14027: PPUSH
14028: CALL_OW 306
14032: IFFALSE 14080
// begin if i in hInvincible then
14034: LD_VAR 0 2
14038: PUSH
14039: LD_EXP 58
14043: IN
14044: IFFALSE 14064
// hInvincible := hInvincible diff i else
14046: LD_ADDR_EXP 58
14050: PUSH
14051: LD_EXP 58
14055: PUSH
14056: LD_VAR 0 2
14060: DIFF
14061: ST_TO_ADDR
14062: GO 14080
// hInvincible := hInvincible union i ;
14064: LD_ADDR_EXP 58
14068: PUSH
14069: LD_EXP 58
14073: PUSH
14074: LD_VAR 0 2
14078: UNION
14079: ST_TO_ADDR
// end ;
14080: GO 14020
14082: POP
14083: POP
// end ;
14084: LD_VAR 0 1
14088: RET
// export function hHackInvisible ; var i , j ; begin
14089: LD_INT 0
14091: PPUSH
14092: PPUSH
14093: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14094: LD_ADDR_VAR 0 2
14098: PUSH
14099: LD_INT 21
14101: PUSH
14102: LD_INT 1
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: PPUSH
14109: CALL_OW 69
14113: PUSH
14114: FOR_IN
14115: IFFALSE 14139
// if IsSelected ( i ) then
14117: LD_VAR 0 2
14121: PPUSH
14122: CALL_OW 306
14126: IFFALSE 14137
// ComForceInvisible ( i ) ;
14128: LD_VAR 0 2
14132: PPUSH
14133: CALL_OW 496
14137: GO 14114
14139: POP
14140: POP
// end ;
14141: LD_VAR 0 1
14145: RET
// export function hHackChangeYourSide ; begin
14146: LD_INT 0
14148: PPUSH
// if your_side = 8 then
14149: LD_OWVAR 2
14153: PUSH
14154: LD_INT 8
14156: EQUAL
14157: IFFALSE 14169
// your_side := 0 else
14159: LD_ADDR_OWVAR 2
14163: PUSH
14164: LD_INT 0
14166: ST_TO_ADDR
14167: GO 14183
// your_side := your_side + 1 ;
14169: LD_ADDR_OWVAR 2
14173: PUSH
14174: LD_OWVAR 2
14178: PUSH
14179: LD_INT 1
14181: PLUS
14182: ST_TO_ADDR
// end ;
14183: LD_VAR 0 1
14187: RET
// export function hHackChangeUnitSide ; var i , j ; begin
14188: LD_INT 0
14190: PPUSH
14191: PPUSH
14192: PPUSH
// for i in all_units do
14193: LD_ADDR_VAR 0 2
14197: PUSH
14198: LD_OWVAR 3
14202: PUSH
14203: FOR_IN
14204: IFFALSE 14282
// if IsSelected ( i ) then
14206: LD_VAR 0 2
14210: PPUSH
14211: CALL_OW 306
14215: IFFALSE 14280
// begin j := GetSide ( i ) ;
14217: LD_ADDR_VAR 0 3
14221: PUSH
14222: LD_VAR 0 2
14226: PPUSH
14227: CALL_OW 255
14231: ST_TO_ADDR
// if j = 8 then
14232: LD_VAR 0 3
14236: PUSH
14237: LD_INT 8
14239: EQUAL
14240: IFFALSE 14252
// j := 0 else
14242: LD_ADDR_VAR 0 3
14246: PUSH
14247: LD_INT 0
14249: ST_TO_ADDR
14250: GO 14266
// j := j + 1 ;
14252: LD_ADDR_VAR 0 3
14256: PUSH
14257: LD_VAR 0 3
14261: PUSH
14262: LD_INT 1
14264: PLUS
14265: ST_TO_ADDR
// SetSide ( i , j ) ;
14266: LD_VAR 0 2
14270: PPUSH
14271: LD_VAR 0 3
14275: PPUSH
14276: CALL_OW 235
// end ;
14280: GO 14203
14282: POP
14283: POP
// end ;
14284: LD_VAR 0 1
14288: RET
// export function hHackFog ; begin
14289: LD_INT 0
14291: PPUSH
// FogOff ( true ) ;
14292: LD_INT 1
14294: PPUSH
14295: CALL_OW 344
// end ;
14299: LD_VAR 0 1
14303: RET
// export function hHackTeleport ( unit , x , y ) ; begin
14304: LD_INT 0
14306: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
14307: LD_VAR 0 1
14311: PPUSH
14312: LD_VAR 0 2
14316: PPUSH
14317: LD_VAR 0 3
14321: PPUSH
14322: LD_INT 1
14324: PPUSH
14325: LD_INT 1
14327: PPUSH
14328: CALL_OW 483
// CenterOnXY ( x , y ) ;
14332: LD_VAR 0 2
14336: PPUSH
14337: LD_VAR 0 3
14341: PPUSH
14342: CALL_OW 84
// end ; end_of_file
14346: LD_VAR 0 4
14350: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
14351: LD_INT 0
14353: PPUSH
14354: PPUSH
14355: PPUSH
14356: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
14357: LD_VAR 0 1
14361: PPUSH
14362: CALL_OW 264
14366: PUSH
14367: LD_EXP 74
14371: EQUAL
14372: IFFALSE 14444
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
14374: LD_INT 68
14376: PPUSH
14377: LD_VAR 0 1
14381: PPUSH
14382: CALL_OW 255
14386: PPUSH
14387: CALL_OW 321
14391: PUSH
14392: LD_INT 2
14394: EQUAL
14395: IFFALSE 14407
// eff := 70 else
14397: LD_ADDR_VAR 0 4
14401: PUSH
14402: LD_INT 70
14404: ST_TO_ADDR
14405: GO 14415
// eff := 30 ;
14407: LD_ADDR_VAR 0 4
14411: PUSH
14412: LD_INT 30
14414: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
14415: LD_VAR 0 1
14419: PPUSH
14420: CALL_OW 250
14424: PPUSH
14425: LD_VAR 0 1
14429: PPUSH
14430: CALL_OW 251
14434: PPUSH
14435: LD_VAR 0 4
14439: PPUSH
14440: CALL_OW 495
// end ; end ;
14444: LD_VAR 0 2
14448: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
14449: LD_INT 0
14451: PPUSH
// end ;
14452: LD_VAR 0 4
14456: RET
// export function SOS_Command ( cmd ) ; begin
14457: LD_INT 0
14459: PPUSH
// end ;
14460: LD_VAR 0 2
14464: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
14465: LD_INT 0
14467: PPUSH
// end ;
14468: LD_VAR 0 6
14472: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
14473: LD_INT 0
14475: PPUSH
14476: PPUSH
// if not vehicle or not factory then
14477: LD_VAR 0 1
14481: NOT
14482: PUSH
14483: LD_VAR 0 2
14487: NOT
14488: OR
14489: IFFALSE 14493
// exit ;
14491: GO 14724
// if factoryWaypoints >= factory then
14493: LD_EXP 59
14497: PUSH
14498: LD_VAR 0 2
14502: GREATEREQUAL
14503: IFFALSE 14724
// if factoryWaypoints [ factory ] then
14505: LD_EXP 59
14509: PUSH
14510: LD_VAR 0 2
14514: ARRAY
14515: IFFALSE 14724
// begin if GetControl ( vehicle ) = control_manual then
14517: LD_VAR 0 1
14521: PPUSH
14522: CALL_OW 263
14526: PUSH
14527: LD_INT 1
14529: EQUAL
14530: IFFALSE 14611
// begin driver := IsDrivenBy ( vehicle ) ;
14532: LD_ADDR_VAR 0 4
14536: PUSH
14537: LD_VAR 0 1
14541: PPUSH
14542: CALL_OW 311
14546: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14547: LD_VAR 0 4
14551: PPUSH
14552: LD_EXP 59
14556: PUSH
14557: LD_VAR 0 2
14561: ARRAY
14562: PUSH
14563: LD_INT 3
14565: ARRAY
14566: PPUSH
14567: LD_EXP 59
14571: PUSH
14572: LD_VAR 0 2
14576: ARRAY
14577: PUSH
14578: LD_INT 4
14580: ARRAY
14581: PPUSH
14582: CALL_OW 171
// AddComExitVehicle ( driver ) ;
14586: LD_VAR 0 4
14590: PPUSH
14591: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
14595: LD_VAR 0 4
14599: PPUSH
14600: LD_VAR 0 2
14604: PPUSH
14605: CALL_OW 180
// end else
14609: GO 14724
// if GetControl ( vehicle ) = control_remote then
14611: LD_VAR 0 1
14615: PPUSH
14616: CALL_OW 263
14620: PUSH
14621: LD_INT 2
14623: EQUAL
14624: IFFALSE 14685
// begin wait ( 0 0$2 ) ;
14626: LD_INT 70
14628: PPUSH
14629: CALL_OW 67
// if Connect ( vehicle ) then
14633: LD_VAR 0 1
14637: PPUSH
14638: CALL 27331 0 1
14642: IFFALSE 14683
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14644: LD_VAR 0 1
14648: PPUSH
14649: LD_EXP 59
14653: PUSH
14654: LD_VAR 0 2
14658: ARRAY
14659: PUSH
14660: LD_INT 3
14662: ARRAY
14663: PPUSH
14664: LD_EXP 59
14668: PUSH
14669: LD_VAR 0 2
14673: ARRAY
14674: PUSH
14675: LD_INT 4
14677: ARRAY
14678: PPUSH
14679: CALL_OW 171
// end else
14683: GO 14724
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
14685: LD_VAR 0 1
14689: PPUSH
14690: LD_EXP 59
14694: PUSH
14695: LD_VAR 0 2
14699: ARRAY
14700: PUSH
14701: LD_INT 3
14703: ARRAY
14704: PPUSH
14705: LD_EXP 59
14709: PUSH
14710: LD_VAR 0 2
14714: ARRAY
14715: PUSH
14716: LD_INT 4
14718: ARRAY
14719: PPUSH
14720: CALL_OW 171
// end ; end ;
14724: LD_VAR 0 3
14728: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
14729: LD_INT 0
14731: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
14732: LD_VAR 0 1
14736: PUSH
14737: LD_INT 250
14739: EQUAL
14740: PUSH
14741: LD_VAR 0 2
14745: PPUSH
14746: CALL_OW 264
14750: PUSH
14751: LD_EXP 77
14755: EQUAL
14756: AND
14757: IFFALSE 14778
// MinerPlaceMine ( unit , x , y ) ;
14759: LD_VAR 0 2
14763: PPUSH
14764: LD_VAR 0 4
14768: PPUSH
14769: LD_VAR 0 5
14773: PPUSH
14774: CALL 17506 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
14778: LD_VAR 0 1
14782: PUSH
14783: LD_INT 251
14785: EQUAL
14786: PUSH
14787: LD_VAR 0 2
14791: PPUSH
14792: CALL_OW 264
14796: PUSH
14797: LD_EXP 77
14801: EQUAL
14802: AND
14803: IFFALSE 14824
// MinerDetonateMine ( unit , x , y ) ;
14805: LD_VAR 0 2
14809: PPUSH
14810: LD_VAR 0 4
14814: PPUSH
14815: LD_VAR 0 5
14819: PPUSH
14820: CALL 17783 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
14824: LD_VAR 0 1
14828: PUSH
14829: LD_INT 252
14831: EQUAL
14832: PUSH
14833: LD_VAR 0 2
14837: PPUSH
14838: CALL_OW 264
14842: PUSH
14843: LD_EXP 77
14847: EQUAL
14848: AND
14849: IFFALSE 14870
// MinerCreateMinefield ( unit , x , y ) ;
14851: LD_VAR 0 2
14855: PPUSH
14856: LD_VAR 0 4
14860: PPUSH
14861: LD_VAR 0 5
14865: PPUSH
14866: CALL 18200 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
14870: LD_VAR 0 1
14874: PUSH
14875: LD_INT 253
14877: EQUAL
14878: PUSH
14879: LD_VAR 0 2
14883: PPUSH
14884: CALL_OW 257
14888: PUSH
14889: LD_INT 5
14891: EQUAL
14892: AND
14893: IFFALSE 14914
// ComBinocular ( unit , x , y ) ;
14895: LD_VAR 0 2
14899: PPUSH
14900: LD_VAR 0 4
14904: PPUSH
14905: LD_VAR 0 5
14909: PPUSH
14910: CALL 18571 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
14914: LD_VAR 0 1
14918: PUSH
14919: LD_INT 254
14921: EQUAL
14922: PUSH
14923: LD_VAR 0 2
14927: PPUSH
14928: CALL_OW 264
14932: PUSH
14933: LD_EXP 72
14937: EQUAL
14938: AND
14939: PUSH
14940: LD_VAR 0 3
14944: PPUSH
14945: CALL_OW 263
14949: PUSH
14950: LD_INT 3
14952: EQUAL
14953: AND
14954: IFFALSE 14970
// HackDestroyVehicle ( unit , selectedUnit ) ;
14956: LD_VAR 0 2
14960: PPUSH
14961: LD_VAR 0 3
14965: PPUSH
14966: CALL 16866 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
14970: LD_VAR 0 1
14974: PUSH
14975: LD_INT 255
14977: EQUAL
14978: PUSH
14979: LD_VAR 0 2
14983: PPUSH
14984: CALL_OW 264
14988: PUSH
14989: LD_INT 14
14991: PUSH
14992: LD_INT 53
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: IN
14999: AND
15000: PUSH
15001: LD_VAR 0 4
15005: PPUSH
15006: LD_VAR 0 5
15010: PPUSH
15011: CALL_OW 488
15015: AND
15016: IFFALSE 15040
// CutTreeXYR ( unit , x , y , 12 ) ;
15018: LD_VAR 0 2
15022: PPUSH
15023: LD_VAR 0 4
15027: PPUSH
15028: LD_VAR 0 5
15032: PPUSH
15033: LD_INT 12
15035: PPUSH
15036: CALL 15432 0 4
// if cmd = 256 then
15040: LD_VAR 0 1
15044: PUSH
15045: LD_INT 256
15047: EQUAL
15048: IFFALSE 15069
// SetFactoryWaypoint ( unit , x , y ) ;
15050: LD_VAR 0 2
15054: PPUSH
15055: LD_VAR 0 4
15059: PPUSH
15060: LD_VAR 0 5
15064: PPUSH
15065: CALL 15074 0 3
// end ;
15069: LD_VAR 0 6
15073: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
15074: LD_INT 0
15076: PPUSH
15077: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
15078: LD_VAR 0 1
15082: NOT
15083: PUSH
15084: LD_VAR 0 2
15088: PPUSH
15089: LD_VAR 0 3
15093: PPUSH
15094: CALL_OW 488
15098: NOT
15099: OR
15100: PUSH
15101: LD_VAR 0 1
15105: PPUSH
15106: CALL_OW 266
15110: PUSH
15111: LD_INT 3
15113: NONEQUAL
15114: PUSH
15115: LD_VAR 0 1
15119: PPUSH
15120: CALL_OW 247
15124: PUSH
15125: LD_INT 1
15127: EQUAL
15128: NOT
15129: AND
15130: OR
15131: IFFALSE 15135
// exit ;
15133: GO 15284
// if GetType ( factory ) = unit_human then
15135: LD_VAR 0 1
15139: PPUSH
15140: CALL_OW 247
15144: PUSH
15145: LD_INT 1
15147: EQUAL
15148: IFFALSE 15165
// factory := IsInUnit ( factory ) ;
15150: LD_ADDR_VAR 0 1
15154: PUSH
15155: LD_VAR 0 1
15159: PPUSH
15160: CALL_OW 310
15164: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
15165: LD_VAR 0 1
15169: PPUSH
15170: CALL_OW 266
15174: PUSH
15175: LD_INT 3
15177: NONEQUAL
15178: IFFALSE 15182
// exit ;
15180: GO 15284
// if HexInfo ( x , y ) = factory then
15182: LD_VAR 0 2
15186: PPUSH
15187: LD_VAR 0 3
15191: PPUSH
15192: CALL_OW 428
15196: PUSH
15197: LD_VAR 0 1
15201: EQUAL
15202: IFFALSE 15229
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
15204: LD_ADDR_EXP 59
15208: PUSH
15209: LD_EXP 59
15213: PPUSH
15214: LD_VAR 0 1
15218: PPUSH
15219: LD_INT 0
15221: PPUSH
15222: CALL_OW 1
15226: ST_TO_ADDR
15227: GO 15280
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
15229: LD_ADDR_EXP 59
15233: PUSH
15234: LD_EXP 59
15238: PPUSH
15239: LD_VAR 0 1
15243: PPUSH
15244: LD_VAR 0 1
15248: PPUSH
15249: CALL_OW 255
15253: PUSH
15254: LD_VAR 0 1
15258: PUSH
15259: LD_VAR 0 2
15263: PUSH
15264: LD_VAR 0 3
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: PPUSH
15275: CALL_OW 1
15279: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15280: CALL 15289 0 0
// end ;
15284: LD_VAR 0 4
15288: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
15289: LD_INT 0
15291: PPUSH
15292: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
15293: LD_STRING resetFactoryWaypoint();
15295: PPUSH
15296: CALL_OW 559
// if factoryWaypoints then
15300: LD_EXP 59
15304: IFFALSE 15427
// begin for i := 1 to factoryWaypoints do
15306: LD_ADDR_VAR 0 2
15310: PUSH
15311: DOUBLE
15312: LD_INT 1
15314: DEC
15315: ST_TO_ADDR
15316: LD_EXP 59
15320: PUSH
15321: FOR_TO
15322: IFFALSE 15425
// if factoryWaypoints [ i ] then
15324: LD_EXP 59
15328: PUSH
15329: LD_VAR 0 2
15333: ARRAY
15334: IFFALSE 15423
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
15336: LD_STRING setFactoryWaypointXY(
15338: PUSH
15339: LD_EXP 59
15343: PUSH
15344: LD_VAR 0 2
15348: ARRAY
15349: PUSH
15350: LD_INT 1
15352: ARRAY
15353: STR
15354: PUSH
15355: LD_STRING ,
15357: STR
15358: PUSH
15359: LD_EXP 59
15363: PUSH
15364: LD_VAR 0 2
15368: ARRAY
15369: PUSH
15370: LD_INT 2
15372: ARRAY
15373: STR
15374: PUSH
15375: LD_STRING ,
15377: STR
15378: PUSH
15379: LD_EXP 59
15383: PUSH
15384: LD_VAR 0 2
15388: ARRAY
15389: PUSH
15390: LD_INT 3
15392: ARRAY
15393: STR
15394: PUSH
15395: LD_STRING ,
15397: STR
15398: PUSH
15399: LD_EXP 59
15403: PUSH
15404: LD_VAR 0 2
15408: ARRAY
15409: PUSH
15410: LD_INT 4
15412: ARRAY
15413: STR
15414: PUSH
15415: LD_STRING )
15417: STR
15418: PPUSH
15419: CALL_OW 559
15423: GO 15321
15425: POP
15426: POP
// end ; end ;
15427: LD_VAR 0 1
15431: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
15432: LD_INT 0
15434: PPUSH
15435: PPUSH
15436: PPUSH
15437: PPUSH
15438: PPUSH
15439: PPUSH
15440: PPUSH
15441: PPUSH
15442: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
15443: LD_VAR 0 1
15447: NOT
15448: PUSH
15449: LD_VAR 0 2
15453: PPUSH
15454: LD_VAR 0 3
15458: PPUSH
15459: CALL_OW 488
15463: NOT
15464: OR
15465: PUSH
15466: LD_VAR 0 4
15470: NOT
15471: OR
15472: IFFALSE 15476
// exit ;
15474: GO 15816
// list := [ ] ;
15476: LD_ADDR_VAR 0 13
15480: PUSH
15481: EMPTY
15482: ST_TO_ADDR
// if x - r < 0 then
15483: LD_VAR 0 2
15487: PUSH
15488: LD_VAR 0 4
15492: MINUS
15493: PUSH
15494: LD_INT 0
15496: LESS
15497: IFFALSE 15509
// min_x := 0 else
15499: LD_ADDR_VAR 0 7
15503: PUSH
15504: LD_INT 0
15506: ST_TO_ADDR
15507: GO 15525
// min_x := x - r ;
15509: LD_ADDR_VAR 0 7
15513: PUSH
15514: LD_VAR 0 2
15518: PUSH
15519: LD_VAR 0 4
15523: MINUS
15524: ST_TO_ADDR
// if y - r < 0 then
15525: LD_VAR 0 3
15529: PUSH
15530: LD_VAR 0 4
15534: MINUS
15535: PUSH
15536: LD_INT 0
15538: LESS
15539: IFFALSE 15551
// min_y := 0 else
15541: LD_ADDR_VAR 0 8
15545: PUSH
15546: LD_INT 0
15548: ST_TO_ADDR
15549: GO 15567
// min_y := y - r ;
15551: LD_ADDR_VAR 0 8
15555: PUSH
15556: LD_VAR 0 3
15560: PUSH
15561: LD_VAR 0 4
15565: MINUS
15566: ST_TO_ADDR
// max_x := x + r ;
15567: LD_ADDR_VAR 0 9
15571: PUSH
15572: LD_VAR 0 2
15576: PUSH
15577: LD_VAR 0 4
15581: PLUS
15582: ST_TO_ADDR
// max_y := y + r ;
15583: LD_ADDR_VAR 0 10
15587: PUSH
15588: LD_VAR 0 3
15592: PUSH
15593: LD_VAR 0 4
15597: PLUS
15598: ST_TO_ADDR
// for _x = min_x to max_x do
15599: LD_ADDR_VAR 0 11
15603: PUSH
15604: DOUBLE
15605: LD_VAR 0 7
15609: DEC
15610: ST_TO_ADDR
15611: LD_VAR 0 9
15615: PUSH
15616: FOR_TO
15617: IFFALSE 15734
// for _y = min_y to max_y do
15619: LD_ADDR_VAR 0 12
15623: PUSH
15624: DOUBLE
15625: LD_VAR 0 8
15629: DEC
15630: ST_TO_ADDR
15631: LD_VAR 0 10
15635: PUSH
15636: FOR_TO
15637: IFFALSE 15730
// begin if not ValidHex ( _x , _y ) then
15639: LD_VAR 0 11
15643: PPUSH
15644: LD_VAR 0 12
15648: PPUSH
15649: CALL_OW 488
15653: NOT
15654: IFFALSE 15658
// continue ;
15656: GO 15636
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15658: LD_VAR 0 11
15662: PPUSH
15663: LD_VAR 0 12
15667: PPUSH
15668: CALL_OW 351
15672: PUSH
15673: LD_VAR 0 11
15677: PPUSH
15678: LD_VAR 0 12
15682: PPUSH
15683: CALL_OW 554
15687: AND
15688: IFFALSE 15728
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15690: LD_ADDR_VAR 0 13
15694: PUSH
15695: LD_VAR 0 13
15699: PPUSH
15700: LD_VAR 0 13
15704: PUSH
15705: LD_INT 1
15707: PLUS
15708: PPUSH
15709: LD_VAR 0 11
15713: PUSH
15714: LD_VAR 0 12
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: PPUSH
15723: CALL_OW 2
15727: ST_TO_ADDR
// end ;
15728: GO 15636
15730: POP
15731: POP
15732: GO 15616
15734: POP
15735: POP
// if not list then
15736: LD_VAR 0 13
15740: NOT
15741: IFFALSE 15745
// exit ;
15743: GO 15816
// for i in list do
15745: LD_ADDR_VAR 0 6
15749: PUSH
15750: LD_VAR 0 13
15754: PUSH
15755: FOR_IN
15756: IFFALSE 15814
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
15758: LD_VAR 0 1
15762: PPUSH
15763: LD_STRING M
15765: PUSH
15766: LD_VAR 0 6
15770: PUSH
15771: LD_INT 1
15773: ARRAY
15774: PUSH
15775: LD_VAR 0 6
15779: PUSH
15780: LD_INT 2
15782: ARRAY
15783: PUSH
15784: LD_INT 0
15786: PUSH
15787: LD_INT 0
15789: PUSH
15790: LD_INT 0
15792: PUSH
15793: LD_INT 0
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: PUSH
15805: EMPTY
15806: LIST
15807: PPUSH
15808: CALL_OW 447
15812: GO 15755
15814: POP
15815: POP
// end ;
15816: LD_VAR 0 5
15820: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
15821: LD_EXP 60
15825: NOT
15826: IFFALSE 15876
15828: GO 15830
15830: DISABLE
// begin initHack := true ;
15831: LD_ADDR_EXP 60
15835: PUSH
15836: LD_INT 1
15838: ST_TO_ADDR
// hackTanks := [ ] ;
15839: LD_ADDR_EXP 61
15843: PUSH
15844: EMPTY
15845: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
15846: LD_ADDR_EXP 62
15850: PUSH
15851: EMPTY
15852: ST_TO_ADDR
// hackLimit := 3 ;
15853: LD_ADDR_EXP 63
15857: PUSH
15858: LD_INT 3
15860: ST_TO_ADDR
// hackDist := 12 ;
15861: LD_ADDR_EXP 64
15865: PUSH
15866: LD_INT 12
15868: ST_TO_ADDR
// hackCounter := [ ] ;
15869: LD_ADDR_EXP 65
15873: PUSH
15874: EMPTY
15875: ST_TO_ADDR
// end ;
15876: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
15877: LD_EXP 60
15881: PUSH
15882: LD_INT 34
15884: PUSH
15885: LD_EXP 72
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PPUSH
15894: CALL_OW 69
15898: AND
15899: IFFALSE 16154
15901: GO 15903
15903: DISABLE
15904: LD_INT 0
15906: PPUSH
15907: PPUSH
// begin enable ;
15908: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
15909: LD_ADDR_VAR 0 1
15913: PUSH
15914: LD_INT 34
15916: PUSH
15917: LD_EXP 72
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: PPUSH
15926: CALL_OW 69
15930: PUSH
15931: FOR_IN
15932: IFFALSE 16152
// begin if not i in hackTanks then
15934: LD_VAR 0 1
15938: PUSH
15939: LD_EXP 61
15943: IN
15944: NOT
15945: IFFALSE 16028
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
15947: LD_ADDR_EXP 61
15951: PUSH
15952: LD_EXP 61
15956: PPUSH
15957: LD_EXP 61
15961: PUSH
15962: LD_INT 1
15964: PLUS
15965: PPUSH
15966: LD_VAR 0 1
15970: PPUSH
15971: CALL_OW 1
15975: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
15976: LD_ADDR_EXP 62
15980: PUSH
15981: LD_EXP 62
15985: PPUSH
15986: LD_EXP 62
15990: PUSH
15991: LD_INT 1
15993: PLUS
15994: PPUSH
15995: EMPTY
15996: PPUSH
15997: CALL_OW 1
16001: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
16002: LD_ADDR_EXP 65
16006: PUSH
16007: LD_EXP 65
16011: PPUSH
16012: LD_EXP 65
16016: PUSH
16017: LD_INT 1
16019: PLUS
16020: PPUSH
16021: EMPTY
16022: PPUSH
16023: CALL_OW 1
16027: ST_TO_ADDR
// end ; if not IsOk ( i ) then
16028: LD_VAR 0 1
16032: PPUSH
16033: CALL_OW 302
16037: NOT
16038: IFFALSE 16051
// begin HackUnlinkAll ( i ) ;
16040: LD_VAR 0 1
16044: PPUSH
16045: CALL 16157 0 1
// continue ;
16049: GO 15931
// end ; HackCheckCapturedStatus ( i ) ;
16051: LD_VAR 0 1
16055: PPUSH
16056: CALL 16600 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
16060: LD_ADDR_VAR 0 2
16064: PUSH
16065: LD_INT 81
16067: PUSH
16068: LD_VAR 0 1
16072: PPUSH
16073: CALL_OW 255
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: PUSH
16082: LD_INT 33
16084: PUSH
16085: LD_INT 3
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PUSH
16092: LD_INT 91
16094: PUSH
16095: LD_VAR 0 1
16099: PUSH
16100: LD_EXP 64
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: LIST
16109: PUSH
16110: LD_INT 50
16112: PUSH
16113: EMPTY
16114: LIST
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: PPUSH
16122: CALL_OW 69
16126: ST_TO_ADDR
// if not tmp then
16127: LD_VAR 0 2
16131: NOT
16132: IFFALSE 16136
// continue ;
16134: GO 15931
// HackLink ( i , tmp ) ;
16136: LD_VAR 0 1
16140: PPUSH
16141: LD_VAR 0 2
16145: PPUSH
16146: CALL 16293 0 2
// end ;
16150: GO 15931
16152: POP
16153: POP
// end ;
16154: PPOPN 2
16156: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
16157: LD_INT 0
16159: PPUSH
16160: PPUSH
16161: PPUSH
// if not hack in hackTanks then
16162: LD_VAR 0 1
16166: PUSH
16167: LD_EXP 61
16171: IN
16172: NOT
16173: IFFALSE 16177
// exit ;
16175: GO 16288
// index := GetElementIndex ( hackTanks , hack ) ;
16177: LD_ADDR_VAR 0 4
16181: PUSH
16182: LD_EXP 61
16186: PPUSH
16187: LD_VAR 0 1
16191: PPUSH
16192: CALL 24145 0 2
16196: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
16197: LD_EXP 62
16201: PUSH
16202: LD_VAR 0 4
16206: ARRAY
16207: IFFALSE 16288
// begin for i in hackTanksCaptured [ index ] do
16209: LD_ADDR_VAR 0 3
16213: PUSH
16214: LD_EXP 62
16218: PUSH
16219: LD_VAR 0 4
16223: ARRAY
16224: PUSH
16225: FOR_IN
16226: IFFALSE 16252
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
16228: LD_VAR 0 3
16232: PUSH
16233: LD_INT 1
16235: ARRAY
16236: PPUSH
16237: LD_VAR 0 3
16241: PUSH
16242: LD_INT 2
16244: ARRAY
16245: PPUSH
16246: CALL_OW 235
16250: GO 16225
16252: POP
16253: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
16254: LD_ADDR_EXP 62
16258: PUSH
16259: LD_EXP 62
16263: PPUSH
16264: LD_VAR 0 4
16268: PPUSH
16269: EMPTY
16270: PPUSH
16271: CALL_OW 1
16275: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
16276: LD_VAR 0 1
16280: PPUSH
16281: LD_INT 0
16283: PPUSH
16284: CALL_OW 505
// end ; end ;
16288: LD_VAR 0 2
16292: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
16293: LD_INT 0
16295: PPUSH
16296: PPUSH
16297: PPUSH
// if not hack in hackTanks or not vehicles then
16298: LD_VAR 0 1
16302: PUSH
16303: LD_EXP 61
16307: IN
16308: NOT
16309: PUSH
16310: LD_VAR 0 2
16314: NOT
16315: OR
16316: IFFALSE 16320
// exit ;
16318: GO 16595
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
16320: LD_ADDR_VAR 0 2
16324: PUSH
16325: LD_VAR 0 1
16329: PPUSH
16330: LD_VAR 0 2
16334: PPUSH
16335: LD_INT 1
16337: PPUSH
16338: LD_INT 1
16340: PPUSH
16341: CALL 24795 0 4
16345: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
16346: LD_ADDR_VAR 0 5
16350: PUSH
16351: LD_EXP 61
16355: PPUSH
16356: LD_VAR 0 1
16360: PPUSH
16361: CALL 24145 0 2
16365: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
16366: LD_EXP 62
16370: PUSH
16371: LD_VAR 0 5
16375: ARRAY
16376: PUSH
16377: LD_EXP 63
16381: LESS
16382: IFFALSE 16571
// begin for i := 1 to vehicles do
16384: LD_ADDR_VAR 0 4
16388: PUSH
16389: DOUBLE
16390: LD_INT 1
16392: DEC
16393: ST_TO_ADDR
16394: LD_VAR 0 2
16398: PUSH
16399: FOR_TO
16400: IFFALSE 16569
// begin if hackTanksCaptured [ index ] = hackLimit then
16402: LD_EXP 62
16406: PUSH
16407: LD_VAR 0 5
16411: ARRAY
16412: PUSH
16413: LD_EXP 63
16417: EQUAL
16418: IFFALSE 16422
// break ;
16420: GO 16569
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
16422: LD_ADDR_EXP 65
16426: PUSH
16427: LD_EXP 65
16431: PPUSH
16432: LD_VAR 0 5
16436: PPUSH
16437: LD_EXP 65
16441: PUSH
16442: LD_VAR 0 5
16446: ARRAY
16447: PUSH
16448: LD_INT 1
16450: PLUS
16451: PPUSH
16452: CALL_OW 1
16456: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
16457: LD_ADDR_EXP 62
16461: PUSH
16462: LD_EXP 62
16466: PPUSH
16467: LD_VAR 0 5
16471: PUSH
16472: LD_EXP 62
16476: PUSH
16477: LD_VAR 0 5
16481: ARRAY
16482: PUSH
16483: LD_INT 1
16485: PLUS
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PPUSH
16491: LD_VAR 0 2
16495: PUSH
16496: LD_VAR 0 4
16500: ARRAY
16501: PUSH
16502: LD_VAR 0 2
16506: PUSH
16507: LD_VAR 0 4
16511: ARRAY
16512: PPUSH
16513: CALL_OW 255
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PPUSH
16522: CALL 24360 0 3
16526: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
16527: LD_VAR 0 2
16531: PUSH
16532: LD_VAR 0 4
16536: ARRAY
16537: PPUSH
16538: LD_VAR 0 1
16542: PPUSH
16543: CALL_OW 255
16547: PPUSH
16548: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
16552: LD_VAR 0 2
16556: PUSH
16557: LD_VAR 0 4
16561: ARRAY
16562: PPUSH
16563: CALL_OW 141
// end ;
16567: GO 16399
16569: POP
16570: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16571: LD_VAR 0 1
16575: PPUSH
16576: LD_EXP 62
16580: PUSH
16581: LD_VAR 0 5
16585: ARRAY
16586: PUSH
16587: LD_INT 0
16589: PLUS
16590: PPUSH
16591: CALL_OW 505
// end ;
16595: LD_VAR 0 3
16599: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
16600: LD_INT 0
16602: PPUSH
16603: PPUSH
16604: PPUSH
16605: PPUSH
// if not hack in hackTanks then
16606: LD_VAR 0 1
16610: PUSH
16611: LD_EXP 61
16615: IN
16616: NOT
16617: IFFALSE 16621
// exit ;
16619: GO 16861
// index := GetElementIndex ( hackTanks , hack ) ;
16621: LD_ADDR_VAR 0 4
16625: PUSH
16626: LD_EXP 61
16630: PPUSH
16631: LD_VAR 0 1
16635: PPUSH
16636: CALL 24145 0 2
16640: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
16641: LD_ADDR_VAR 0 3
16645: PUSH
16646: DOUBLE
16647: LD_EXP 62
16651: PUSH
16652: LD_VAR 0 4
16656: ARRAY
16657: INC
16658: ST_TO_ADDR
16659: LD_INT 1
16661: PUSH
16662: FOR_DOWNTO
16663: IFFALSE 16835
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
16665: LD_ADDR_VAR 0 5
16669: PUSH
16670: LD_EXP 62
16674: PUSH
16675: LD_VAR 0 4
16679: ARRAY
16680: PUSH
16681: LD_VAR 0 3
16685: ARRAY
16686: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
16687: LD_VAR 0 5
16691: PUSH
16692: LD_INT 1
16694: ARRAY
16695: PPUSH
16696: CALL_OW 302
16700: NOT
16701: PUSH
16702: LD_VAR 0 5
16706: PUSH
16707: LD_INT 1
16709: ARRAY
16710: PPUSH
16711: CALL_OW 255
16715: PUSH
16716: LD_VAR 0 1
16720: PPUSH
16721: CALL_OW 255
16725: NONEQUAL
16726: OR
16727: IFFALSE 16833
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
16729: LD_VAR 0 5
16733: PUSH
16734: LD_INT 1
16736: ARRAY
16737: PPUSH
16738: CALL_OW 305
16742: PUSH
16743: LD_VAR 0 5
16747: PUSH
16748: LD_INT 1
16750: ARRAY
16751: PPUSH
16752: CALL_OW 255
16756: PUSH
16757: LD_VAR 0 1
16761: PPUSH
16762: CALL_OW 255
16766: EQUAL
16767: AND
16768: IFFALSE 16792
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
16770: LD_VAR 0 5
16774: PUSH
16775: LD_INT 1
16777: ARRAY
16778: PPUSH
16779: LD_VAR 0 5
16783: PUSH
16784: LD_INT 2
16786: ARRAY
16787: PPUSH
16788: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
16792: LD_ADDR_EXP 62
16796: PUSH
16797: LD_EXP 62
16801: PPUSH
16802: LD_VAR 0 4
16806: PPUSH
16807: LD_EXP 62
16811: PUSH
16812: LD_VAR 0 4
16816: ARRAY
16817: PPUSH
16818: LD_VAR 0 3
16822: PPUSH
16823: CALL_OW 3
16827: PPUSH
16828: CALL_OW 1
16832: ST_TO_ADDR
// end ; end ;
16833: GO 16662
16835: POP
16836: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16837: LD_VAR 0 1
16841: PPUSH
16842: LD_EXP 62
16846: PUSH
16847: LD_VAR 0 4
16851: ARRAY
16852: PUSH
16853: LD_INT 0
16855: PLUS
16856: PPUSH
16857: CALL_OW 505
// end ;
16861: LD_VAR 0 2
16865: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
16866: LD_INT 0
16868: PPUSH
16869: PPUSH
16870: PPUSH
16871: PPUSH
// if not hack in hackTanks then
16872: LD_VAR 0 1
16876: PUSH
16877: LD_EXP 61
16881: IN
16882: NOT
16883: IFFALSE 16887
// exit ;
16885: GO 16972
// index := GetElementIndex ( hackTanks , hack ) ;
16887: LD_ADDR_VAR 0 5
16891: PUSH
16892: LD_EXP 61
16896: PPUSH
16897: LD_VAR 0 1
16901: PPUSH
16902: CALL 24145 0 2
16906: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
16907: LD_ADDR_VAR 0 4
16911: PUSH
16912: DOUBLE
16913: LD_INT 1
16915: DEC
16916: ST_TO_ADDR
16917: LD_EXP 62
16921: PUSH
16922: LD_VAR 0 5
16926: ARRAY
16927: PUSH
16928: FOR_TO
16929: IFFALSE 16970
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
16931: LD_EXP 62
16935: PUSH
16936: LD_VAR 0 5
16940: ARRAY
16941: PUSH
16942: LD_VAR 0 4
16946: ARRAY
16947: PUSH
16948: LD_INT 1
16950: ARRAY
16951: PUSH
16952: LD_VAR 0 2
16956: EQUAL
16957: IFFALSE 16968
// KillUnit ( vehicle ) ;
16959: LD_VAR 0 2
16963: PPUSH
16964: CALL_OW 66
16968: GO 16928
16970: POP
16971: POP
// end ;
16972: LD_VAR 0 3
16976: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
16977: LD_EXP 66
16981: NOT
16982: IFFALSE 17017
16984: GO 16986
16986: DISABLE
// begin initMiner := true ;
16987: LD_ADDR_EXP 66
16991: PUSH
16992: LD_INT 1
16994: ST_TO_ADDR
// minersList := [ ] ;
16995: LD_ADDR_EXP 67
16999: PUSH
17000: EMPTY
17001: ST_TO_ADDR
// minerMinesList := [ ] ;
17002: LD_ADDR_EXP 68
17006: PUSH
17007: EMPTY
17008: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
17009: LD_ADDR_EXP 69
17013: PUSH
17014: LD_INT 5
17016: ST_TO_ADDR
// end ;
17017: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
17018: LD_EXP 66
17022: PUSH
17023: LD_INT 34
17025: PUSH
17026: LD_EXP 77
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: PPUSH
17035: CALL_OW 69
17039: AND
17040: IFFALSE 17503
17042: GO 17044
17044: DISABLE
17045: LD_INT 0
17047: PPUSH
17048: PPUSH
17049: PPUSH
17050: PPUSH
// begin enable ;
17051: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
17052: LD_ADDR_VAR 0 1
17056: PUSH
17057: LD_INT 34
17059: PUSH
17060: LD_EXP 77
17064: PUSH
17065: EMPTY
17066: LIST
17067: LIST
17068: PPUSH
17069: CALL_OW 69
17073: PUSH
17074: FOR_IN
17075: IFFALSE 17147
// begin if not i in minersList then
17077: LD_VAR 0 1
17081: PUSH
17082: LD_EXP 67
17086: IN
17087: NOT
17088: IFFALSE 17145
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
17090: LD_ADDR_EXP 67
17094: PUSH
17095: LD_EXP 67
17099: PPUSH
17100: LD_EXP 67
17104: PUSH
17105: LD_INT 1
17107: PLUS
17108: PPUSH
17109: LD_VAR 0 1
17113: PPUSH
17114: CALL_OW 1
17118: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17119: LD_ADDR_EXP 68
17123: PUSH
17124: LD_EXP 68
17128: PPUSH
17129: LD_EXP 68
17133: PUSH
17134: LD_INT 1
17136: PLUS
17137: PPUSH
17138: EMPTY
17139: PPUSH
17140: CALL_OW 1
17144: ST_TO_ADDR
// end end ;
17145: GO 17074
17147: POP
17148: POP
// for i := minerMinesList downto 1 do
17149: LD_ADDR_VAR 0 1
17153: PUSH
17154: DOUBLE
17155: LD_EXP 68
17159: INC
17160: ST_TO_ADDR
17161: LD_INT 1
17163: PUSH
17164: FOR_DOWNTO
17165: IFFALSE 17501
// begin if IsLive ( minersList [ i ] ) then
17167: LD_EXP 67
17171: PUSH
17172: LD_VAR 0 1
17176: ARRAY
17177: PPUSH
17178: CALL_OW 300
17182: IFFALSE 17210
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
17184: LD_EXP 67
17188: PUSH
17189: LD_VAR 0 1
17193: ARRAY
17194: PPUSH
17195: LD_EXP 68
17199: PUSH
17200: LD_VAR 0 1
17204: ARRAY
17205: PPUSH
17206: CALL_OW 505
// if not minerMinesList [ i ] then
17210: LD_EXP 68
17214: PUSH
17215: LD_VAR 0 1
17219: ARRAY
17220: NOT
17221: IFFALSE 17225
// continue ;
17223: GO 17164
// for j := minerMinesList [ i ] downto 1 do
17225: LD_ADDR_VAR 0 2
17229: PUSH
17230: DOUBLE
17231: LD_EXP 68
17235: PUSH
17236: LD_VAR 0 1
17240: ARRAY
17241: INC
17242: ST_TO_ADDR
17243: LD_INT 1
17245: PUSH
17246: FOR_DOWNTO
17247: IFFALSE 17497
// begin side := GetSide ( minersList [ i ] ) ;
17249: LD_ADDR_VAR 0 3
17253: PUSH
17254: LD_EXP 67
17258: PUSH
17259: LD_VAR 0 1
17263: ARRAY
17264: PPUSH
17265: CALL_OW 255
17269: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
17270: LD_ADDR_VAR 0 4
17274: PUSH
17275: LD_EXP 68
17279: PUSH
17280: LD_VAR 0 1
17284: ARRAY
17285: PUSH
17286: LD_VAR 0 2
17290: ARRAY
17291: PUSH
17292: LD_INT 1
17294: ARRAY
17295: PPUSH
17296: LD_EXP 68
17300: PUSH
17301: LD_VAR 0 1
17305: ARRAY
17306: PUSH
17307: LD_VAR 0 2
17311: ARRAY
17312: PUSH
17313: LD_INT 2
17315: ARRAY
17316: PPUSH
17317: CALL_OW 428
17321: ST_TO_ADDR
// if not tmp then
17322: LD_VAR 0 4
17326: NOT
17327: IFFALSE 17331
// continue ;
17329: GO 17246
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
17331: LD_VAR 0 4
17335: PUSH
17336: LD_INT 81
17338: PUSH
17339: LD_VAR 0 3
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PPUSH
17348: CALL_OW 69
17352: IN
17353: PUSH
17354: LD_EXP 68
17358: PUSH
17359: LD_VAR 0 1
17363: ARRAY
17364: PUSH
17365: LD_VAR 0 2
17369: ARRAY
17370: PUSH
17371: LD_INT 1
17373: ARRAY
17374: PPUSH
17375: LD_EXP 68
17379: PUSH
17380: LD_VAR 0 1
17384: ARRAY
17385: PUSH
17386: LD_VAR 0 2
17390: ARRAY
17391: PUSH
17392: LD_INT 2
17394: ARRAY
17395: PPUSH
17396: CALL_OW 458
17400: AND
17401: IFFALSE 17495
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
17403: LD_EXP 68
17407: PUSH
17408: LD_VAR 0 1
17412: ARRAY
17413: PUSH
17414: LD_VAR 0 2
17418: ARRAY
17419: PUSH
17420: LD_INT 1
17422: ARRAY
17423: PPUSH
17424: LD_EXP 68
17428: PUSH
17429: LD_VAR 0 1
17433: ARRAY
17434: PUSH
17435: LD_VAR 0 2
17439: ARRAY
17440: PUSH
17441: LD_INT 2
17443: ARRAY
17444: PPUSH
17445: LD_VAR 0 3
17449: PPUSH
17450: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
17454: LD_ADDR_EXP 68
17458: PUSH
17459: LD_EXP 68
17463: PPUSH
17464: LD_VAR 0 1
17468: PPUSH
17469: LD_EXP 68
17473: PUSH
17474: LD_VAR 0 1
17478: ARRAY
17479: PPUSH
17480: LD_VAR 0 2
17484: PPUSH
17485: CALL_OW 3
17489: PPUSH
17490: CALL_OW 1
17494: ST_TO_ADDR
// end ; end ;
17495: GO 17246
17497: POP
17498: POP
// end ;
17499: GO 17164
17501: POP
17502: POP
// end ;
17503: PPOPN 4
17505: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
17506: LD_INT 0
17508: PPUSH
17509: PPUSH
// result := false ;
17510: LD_ADDR_VAR 0 4
17514: PUSH
17515: LD_INT 0
17517: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
17518: LD_VAR 0 1
17522: PPUSH
17523: CALL_OW 264
17527: PUSH
17528: LD_EXP 77
17532: EQUAL
17533: NOT
17534: IFFALSE 17538
// exit ;
17536: GO 17778
// index := GetElementIndex ( minersList , unit ) ;
17538: LD_ADDR_VAR 0 5
17542: PUSH
17543: LD_EXP 67
17547: PPUSH
17548: LD_VAR 0 1
17552: PPUSH
17553: CALL 24145 0 2
17557: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
17558: LD_EXP 68
17562: PUSH
17563: LD_VAR 0 5
17567: ARRAY
17568: PUSH
17569: LD_EXP 69
17573: GREATEREQUAL
17574: IFFALSE 17578
// exit ;
17576: GO 17778
// ComMoveXY ( unit , x , y ) ;
17578: LD_VAR 0 1
17582: PPUSH
17583: LD_VAR 0 2
17587: PPUSH
17588: LD_VAR 0 3
17592: PPUSH
17593: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17597: LD_INT 35
17599: PPUSH
17600: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
17604: LD_VAR 0 1
17608: PPUSH
17609: LD_VAR 0 2
17613: PPUSH
17614: LD_VAR 0 3
17618: PPUSH
17619: CALL 54864 0 3
17623: NOT
17624: PUSH
17625: LD_VAR 0 1
17629: PPUSH
17630: CALL_OW 314
17634: AND
17635: IFFALSE 17639
// exit ;
17637: GO 17778
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
17639: LD_VAR 0 2
17643: PPUSH
17644: LD_VAR 0 3
17648: PPUSH
17649: CALL_OW 428
17653: PUSH
17654: LD_VAR 0 1
17658: EQUAL
17659: PUSH
17660: LD_VAR 0 1
17664: PPUSH
17665: CALL_OW 314
17669: NOT
17670: AND
17671: IFFALSE 17597
// PlaySoundXY ( x , y , PlantMine ) ;
17673: LD_VAR 0 2
17677: PPUSH
17678: LD_VAR 0 3
17682: PPUSH
17683: LD_STRING PlantMine
17685: PPUSH
17686: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
17690: LD_VAR 0 2
17694: PPUSH
17695: LD_VAR 0 3
17699: PPUSH
17700: LD_VAR 0 1
17704: PPUSH
17705: CALL_OW 255
17709: PPUSH
17710: LD_INT 0
17712: PPUSH
17713: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17717: LD_ADDR_EXP 68
17721: PUSH
17722: LD_EXP 68
17726: PPUSH
17727: LD_VAR 0 5
17731: PUSH
17732: LD_EXP 68
17736: PUSH
17737: LD_VAR 0 5
17741: ARRAY
17742: PUSH
17743: LD_INT 1
17745: PLUS
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PPUSH
17751: LD_VAR 0 2
17755: PUSH
17756: LD_VAR 0 3
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: PPUSH
17765: CALL 24360 0 3
17769: ST_TO_ADDR
// result := true ;
17770: LD_ADDR_VAR 0 4
17774: PUSH
17775: LD_INT 1
17777: ST_TO_ADDR
// end ;
17778: LD_VAR 0 4
17782: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
17783: LD_INT 0
17785: PPUSH
17786: PPUSH
17787: PPUSH
// if not unit in minersList then
17788: LD_VAR 0 1
17792: PUSH
17793: LD_EXP 67
17797: IN
17798: NOT
17799: IFFALSE 17803
// exit ;
17801: GO 18195
// index := GetElementIndex ( minersList , unit ) ;
17803: LD_ADDR_VAR 0 6
17807: PUSH
17808: LD_EXP 67
17812: PPUSH
17813: LD_VAR 0 1
17817: PPUSH
17818: CALL 24145 0 2
17822: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
17823: LD_ADDR_VAR 0 5
17827: PUSH
17828: DOUBLE
17829: LD_EXP 68
17833: PUSH
17834: LD_VAR 0 6
17838: ARRAY
17839: INC
17840: ST_TO_ADDR
17841: LD_INT 1
17843: PUSH
17844: FOR_DOWNTO
17845: IFFALSE 18006
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
17847: LD_EXP 68
17851: PUSH
17852: LD_VAR 0 6
17856: ARRAY
17857: PUSH
17858: LD_VAR 0 5
17862: ARRAY
17863: PUSH
17864: LD_INT 1
17866: ARRAY
17867: PUSH
17868: LD_VAR 0 2
17872: EQUAL
17873: PUSH
17874: LD_EXP 68
17878: PUSH
17879: LD_VAR 0 6
17883: ARRAY
17884: PUSH
17885: LD_VAR 0 5
17889: ARRAY
17890: PUSH
17891: LD_INT 2
17893: ARRAY
17894: PUSH
17895: LD_VAR 0 3
17899: EQUAL
17900: AND
17901: IFFALSE 18004
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17903: LD_EXP 68
17907: PUSH
17908: LD_VAR 0 6
17912: ARRAY
17913: PUSH
17914: LD_VAR 0 5
17918: ARRAY
17919: PUSH
17920: LD_INT 1
17922: ARRAY
17923: PPUSH
17924: LD_EXP 68
17928: PUSH
17929: LD_VAR 0 6
17933: ARRAY
17934: PUSH
17935: LD_VAR 0 5
17939: ARRAY
17940: PUSH
17941: LD_INT 2
17943: ARRAY
17944: PPUSH
17945: LD_VAR 0 1
17949: PPUSH
17950: CALL_OW 255
17954: PPUSH
17955: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17959: LD_ADDR_EXP 68
17963: PUSH
17964: LD_EXP 68
17968: PPUSH
17969: LD_VAR 0 6
17973: PPUSH
17974: LD_EXP 68
17978: PUSH
17979: LD_VAR 0 6
17983: ARRAY
17984: PPUSH
17985: LD_VAR 0 5
17989: PPUSH
17990: CALL_OW 3
17994: PPUSH
17995: CALL_OW 1
17999: ST_TO_ADDR
// exit ;
18000: POP
18001: POP
18002: GO 18195
// end ; end ;
18004: GO 17844
18006: POP
18007: POP
// for i := minerMinesList [ index ] downto 1 do
18008: LD_ADDR_VAR 0 5
18012: PUSH
18013: DOUBLE
18014: LD_EXP 68
18018: PUSH
18019: LD_VAR 0 6
18023: ARRAY
18024: INC
18025: ST_TO_ADDR
18026: LD_INT 1
18028: PUSH
18029: FOR_DOWNTO
18030: IFFALSE 18193
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
18032: LD_EXP 68
18036: PUSH
18037: LD_VAR 0 6
18041: ARRAY
18042: PUSH
18043: LD_VAR 0 5
18047: ARRAY
18048: PUSH
18049: LD_INT 1
18051: ARRAY
18052: PPUSH
18053: LD_EXP 68
18057: PUSH
18058: LD_VAR 0 6
18062: ARRAY
18063: PUSH
18064: LD_VAR 0 5
18068: ARRAY
18069: PUSH
18070: LD_INT 2
18072: ARRAY
18073: PPUSH
18074: LD_VAR 0 2
18078: PPUSH
18079: LD_VAR 0 3
18083: PPUSH
18084: CALL_OW 298
18088: PUSH
18089: LD_INT 6
18091: LESS
18092: IFFALSE 18191
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18094: LD_EXP 68
18098: PUSH
18099: LD_VAR 0 6
18103: ARRAY
18104: PUSH
18105: LD_VAR 0 5
18109: ARRAY
18110: PUSH
18111: LD_INT 1
18113: ARRAY
18114: PPUSH
18115: LD_EXP 68
18119: PUSH
18120: LD_VAR 0 6
18124: ARRAY
18125: PUSH
18126: LD_VAR 0 5
18130: ARRAY
18131: PUSH
18132: LD_INT 2
18134: ARRAY
18135: PPUSH
18136: LD_VAR 0 1
18140: PPUSH
18141: CALL_OW 255
18145: PPUSH
18146: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18150: LD_ADDR_EXP 68
18154: PUSH
18155: LD_EXP 68
18159: PPUSH
18160: LD_VAR 0 6
18164: PPUSH
18165: LD_EXP 68
18169: PUSH
18170: LD_VAR 0 6
18174: ARRAY
18175: PPUSH
18176: LD_VAR 0 5
18180: PPUSH
18181: CALL_OW 3
18185: PPUSH
18186: CALL_OW 1
18190: ST_TO_ADDR
// end ; end ;
18191: GO 18029
18193: POP
18194: POP
// end ;
18195: LD_VAR 0 4
18199: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
18200: LD_INT 0
18202: PPUSH
18203: PPUSH
18204: PPUSH
18205: PPUSH
18206: PPUSH
18207: PPUSH
18208: PPUSH
18209: PPUSH
18210: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
18211: LD_VAR 0 1
18215: PPUSH
18216: CALL_OW 264
18220: PUSH
18221: LD_EXP 77
18225: EQUAL
18226: NOT
18227: PUSH
18228: LD_VAR 0 1
18232: PUSH
18233: LD_EXP 67
18237: IN
18238: NOT
18239: OR
18240: IFFALSE 18244
// exit ;
18242: GO 18566
// index := GetElementIndex ( minersList , unit ) ;
18244: LD_ADDR_VAR 0 6
18248: PUSH
18249: LD_EXP 67
18253: PPUSH
18254: LD_VAR 0 1
18258: PPUSH
18259: CALL 24145 0 2
18263: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
18264: LD_ADDR_VAR 0 8
18268: PUSH
18269: LD_EXP 69
18273: PUSH
18274: LD_EXP 68
18278: PUSH
18279: LD_VAR 0 6
18283: ARRAY
18284: MINUS
18285: ST_TO_ADDR
// if not minesFreeAmount then
18286: LD_VAR 0 8
18290: NOT
18291: IFFALSE 18295
// exit ;
18293: GO 18566
// tmp := [ ] ;
18295: LD_ADDR_VAR 0 7
18299: PUSH
18300: EMPTY
18301: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
18302: LD_ADDR_VAR 0 5
18306: PUSH
18307: DOUBLE
18308: LD_INT 1
18310: DEC
18311: ST_TO_ADDR
18312: LD_VAR 0 8
18316: PUSH
18317: FOR_TO
18318: IFFALSE 18513
// begin _d := rand ( 0 , 5 ) ;
18320: LD_ADDR_VAR 0 11
18324: PUSH
18325: LD_INT 0
18327: PPUSH
18328: LD_INT 5
18330: PPUSH
18331: CALL_OW 12
18335: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
18336: LD_ADDR_VAR 0 12
18340: PUSH
18341: LD_INT 2
18343: PPUSH
18344: LD_INT 6
18346: PPUSH
18347: CALL_OW 12
18351: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
18352: LD_ADDR_VAR 0 9
18356: PUSH
18357: LD_VAR 0 2
18361: PPUSH
18362: LD_VAR 0 11
18366: PPUSH
18367: LD_VAR 0 12
18371: PPUSH
18372: CALL_OW 272
18376: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
18377: LD_ADDR_VAR 0 10
18381: PUSH
18382: LD_VAR 0 3
18386: PPUSH
18387: LD_VAR 0 11
18391: PPUSH
18392: LD_VAR 0 12
18396: PPUSH
18397: CALL_OW 273
18401: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
18402: LD_VAR 0 9
18406: PPUSH
18407: LD_VAR 0 10
18411: PPUSH
18412: CALL_OW 488
18416: PUSH
18417: LD_VAR 0 9
18421: PUSH
18422: LD_VAR 0 10
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: LD_VAR 0 7
18435: IN
18436: NOT
18437: AND
18438: PUSH
18439: LD_VAR 0 9
18443: PPUSH
18444: LD_VAR 0 10
18448: PPUSH
18449: CALL_OW 458
18453: NOT
18454: AND
18455: IFFALSE 18497
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
18457: LD_ADDR_VAR 0 7
18461: PUSH
18462: LD_VAR 0 7
18466: PPUSH
18467: LD_VAR 0 7
18471: PUSH
18472: LD_INT 1
18474: PLUS
18475: PPUSH
18476: LD_VAR 0 9
18480: PUSH
18481: LD_VAR 0 10
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PPUSH
18490: CALL_OW 1
18494: ST_TO_ADDR
18495: GO 18511
// i := i - 1 ;
18497: LD_ADDR_VAR 0 5
18501: PUSH
18502: LD_VAR 0 5
18506: PUSH
18507: LD_INT 1
18509: MINUS
18510: ST_TO_ADDR
// end ;
18511: GO 18317
18513: POP
18514: POP
// for i in tmp do
18515: LD_ADDR_VAR 0 5
18519: PUSH
18520: LD_VAR 0 7
18524: PUSH
18525: FOR_IN
18526: IFFALSE 18564
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
18528: LD_VAR 0 1
18532: PPUSH
18533: LD_VAR 0 5
18537: PUSH
18538: LD_INT 1
18540: ARRAY
18541: PPUSH
18542: LD_VAR 0 5
18546: PUSH
18547: LD_INT 2
18549: ARRAY
18550: PPUSH
18551: CALL 17506 0 3
18555: NOT
18556: IFFALSE 18562
// exit ;
18558: POP
18559: POP
18560: GO 18566
18562: GO 18525
18564: POP
18565: POP
// end ;
18566: LD_VAR 0 4
18570: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
18571: LD_INT 0
18573: PPUSH
18574: PPUSH
18575: PPUSH
18576: PPUSH
18577: PPUSH
18578: PPUSH
18579: PPUSH
// if not GetClass ( unit ) = class_sniper then
18580: LD_VAR 0 1
18584: PPUSH
18585: CALL_OW 257
18589: PUSH
18590: LD_INT 5
18592: EQUAL
18593: NOT
18594: IFFALSE 18598
// exit ;
18596: GO 18986
// dist := 8 ;
18598: LD_ADDR_VAR 0 5
18602: PUSH
18603: LD_INT 8
18605: ST_TO_ADDR
// viewRange := 12 ;
18606: LD_ADDR_VAR 0 7
18610: PUSH
18611: LD_INT 12
18613: ST_TO_ADDR
// side := GetSide ( unit ) ;
18614: LD_ADDR_VAR 0 6
18618: PUSH
18619: LD_VAR 0 1
18623: PPUSH
18624: CALL_OW 255
18628: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
18629: LD_INT 61
18631: PPUSH
18632: LD_VAR 0 6
18636: PPUSH
18637: CALL_OW 321
18641: PUSH
18642: LD_INT 2
18644: EQUAL
18645: IFFALSE 18655
// viewRange := 16 ;
18647: LD_ADDR_VAR 0 7
18651: PUSH
18652: LD_INT 16
18654: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
18655: LD_VAR 0 1
18659: PPUSH
18660: LD_VAR 0 2
18664: PPUSH
18665: LD_VAR 0 3
18669: PPUSH
18670: CALL_OW 297
18674: PUSH
18675: LD_VAR 0 5
18679: GREATER
18680: IFFALSE 18759
// begin ComMoveXY ( unit , x , y ) ;
18682: LD_VAR 0 1
18686: PPUSH
18687: LD_VAR 0 2
18691: PPUSH
18692: LD_VAR 0 3
18696: PPUSH
18697: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18701: LD_INT 35
18703: PPUSH
18704: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
18708: LD_VAR 0 1
18712: PPUSH
18713: LD_VAR 0 2
18717: PPUSH
18718: LD_VAR 0 3
18722: PPUSH
18723: CALL 54864 0 3
18727: NOT
18728: IFFALSE 18732
// exit ;
18730: GO 18986
// until GetDistUnitXY ( unit , x , y ) < dist ;
18732: LD_VAR 0 1
18736: PPUSH
18737: LD_VAR 0 2
18741: PPUSH
18742: LD_VAR 0 3
18746: PPUSH
18747: CALL_OW 297
18751: PUSH
18752: LD_VAR 0 5
18756: LESS
18757: IFFALSE 18701
// end ; ComTurnXY ( unit , x , y ) ;
18759: LD_VAR 0 1
18763: PPUSH
18764: LD_VAR 0 2
18768: PPUSH
18769: LD_VAR 0 3
18773: PPUSH
18774: CALL_OW 118
// wait ( 5 ) ;
18778: LD_INT 5
18780: PPUSH
18781: CALL_OW 67
// _d := GetDir ( unit ) ;
18785: LD_ADDR_VAR 0 10
18789: PUSH
18790: LD_VAR 0 1
18794: PPUSH
18795: CALL_OW 254
18799: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
18800: LD_ADDR_VAR 0 8
18804: PUSH
18805: LD_VAR 0 1
18809: PPUSH
18810: CALL_OW 250
18814: PPUSH
18815: LD_VAR 0 10
18819: PPUSH
18820: LD_VAR 0 5
18824: PPUSH
18825: CALL_OW 272
18829: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
18830: LD_ADDR_VAR 0 9
18834: PUSH
18835: LD_VAR 0 1
18839: PPUSH
18840: CALL_OW 251
18844: PPUSH
18845: LD_VAR 0 10
18849: PPUSH
18850: LD_VAR 0 5
18854: PPUSH
18855: CALL_OW 273
18859: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18860: LD_VAR 0 8
18864: PPUSH
18865: LD_VAR 0 9
18869: PPUSH
18870: CALL_OW 488
18874: NOT
18875: IFFALSE 18879
// exit ;
18877: GO 18986
// ComAnimCustom ( unit , 1 ) ;
18879: LD_VAR 0 1
18883: PPUSH
18884: LD_INT 1
18886: PPUSH
18887: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
18891: LD_VAR 0 8
18895: PPUSH
18896: LD_VAR 0 9
18900: PPUSH
18901: LD_VAR 0 6
18905: PPUSH
18906: LD_VAR 0 7
18910: PPUSH
18911: CALL_OW 330
// repeat wait ( 1 ) ;
18915: LD_INT 1
18917: PPUSH
18918: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
18922: LD_VAR 0 1
18926: PPUSH
18927: CALL_OW 316
18931: PUSH
18932: LD_VAR 0 1
18936: PPUSH
18937: CALL_OW 314
18941: OR
18942: PUSH
18943: LD_VAR 0 1
18947: PPUSH
18948: CALL_OW 302
18952: NOT
18953: OR
18954: PUSH
18955: LD_VAR 0 1
18959: PPUSH
18960: CALL_OW 301
18964: OR
18965: IFFALSE 18915
// RemoveSeeing ( _x , _y , side ) ;
18967: LD_VAR 0 8
18971: PPUSH
18972: LD_VAR 0 9
18976: PPUSH
18977: LD_VAR 0 6
18981: PPUSH
18982: CALL_OW 331
// end ; end_of_file
18986: LD_VAR 0 4
18990: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
18991: LD_VAR 0 1
18995: PPUSH
18996: LD_VAR 0 2
19000: PPUSH
19001: LD_VAR 0 3
19005: PPUSH
19006: LD_VAR 0 4
19010: PPUSH
19011: LD_VAR 0 5
19015: PPUSH
19016: LD_VAR 0 6
19020: PPUSH
19021: CALL 64 0 6
// end ;
19025: PPOPN 6
19027: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
19028: CALL 39 0 0
// end ; end_of_file
19032: PPOPN 1
19034: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
19035: LD_VAR 0 1
19039: PUSH
19040: LD_INT 200
19042: DOUBLE
19043: GREATEREQUAL
19044: IFFALSE 19052
19046: LD_INT 299
19048: DOUBLE
19049: LESSEQUAL
19050: IFTRUE 19054
19052: GO 19086
19054: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
19055: LD_VAR 0 1
19059: PPUSH
19060: LD_VAR 0 2
19064: PPUSH
19065: LD_VAR 0 3
19069: PPUSH
19070: LD_VAR 0 4
19074: PPUSH
19075: LD_VAR 0 5
19079: PPUSH
19080: CALL 14729 0 5
19084: GO 19163
19086: LD_INT 300
19088: DOUBLE
19089: GREATEREQUAL
19090: IFFALSE 19098
19092: LD_INT 399
19094: DOUBLE
19095: LESSEQUAL
19096: IFTRUE 19100
19098: GO 19162
19100: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
19101: LD_VAR 0 1
19105: PPUSH
19106: LD_VAR 0 2
19110: PPUSH
19111: LD_VAR 0 3
19115: PPUSH
19116: LD_VAR 0 4
19120: PPUSH
19121: LD_VAR 0 5
19125: PPUSH
19126: LD_VAR 0 6
19130: PPUSH
19131: LD_VAR 0 7
19135: PPUSH
19136: LD_VAR 0 8
19140: PPUSH
19141: LD_VAR 0 9
19145: PPUSH
19146: LD_VAR 0 10
19150: PPUSH
19151: LD_VAR 0 11
19155: PPUSH
19156: CALL 12371 0 11
19160: GO 19163
19162: POP
// end ;
19163: PPOPN 11
19165: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
19166: LD_VAR 0 1
19170: PPUSH
19171: LD_VAR 0 2
19175: PPUSH
19176: LD_VAR 0 3
19180: PPUSH
19181: LD_VAR 0 4
19185: PPUSH
19186: LD_VAR 0 5
19190: PPUSH
19191: CALL 14465 0 5
// end ; end_of_file
19195: PPOPN 5
19197: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19198: LD_INT 0
19200: PPUSH
// ar_miner := 81 ;
19201: LD_ADDR_EXP 77
19205: PUSH
19206: LD_INT 81
19208: ST_TO_ADDR
// ar_crane := 88 ;
19209: LD_ADDR_EXP 76
19213: PUSH
19214: LD_INT 88
19216: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19217: LD_ADDR_EXP 71
19221: PUSH
19222: LD_INT 89
19224: ST_TO_ADDR
// us_hack := 99 ;
19225: LD_ADDR_EXP 72
19229: PUSH
19230: LD_INT 99
19232: ST_TO_ADDR
// us_artillery := 97 ;
19233: LD_ADDR_EXP 73
19237: PUSH
19238: LD_INT 97
19240: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19241: LD_ADDR_EXP 74
19245: PUSH
19246: LD_INT 91
19248: ST_TO_ADDR
// ar_mortar := 92 ;
19249: LD_ADDR_EXP 75
19253: PUSH
19254: LD_INT 92
19256: ST_TO_ADDR
// ru_flamethrower := 93 ;
19257: LD_ADDR_EXP 78
19261: PUSH
19262: LD_INT 93
19264: ST_TO_ADDR
// ru_radar := 98 ;
19265: LD_ADDR_EXP 70
19269: PUSH
19270: LD_INT 98
19272: ST_TO_ADDR
// tech_Artillery := 80 ;
19273: LD_ADDR_EXP 79
19277: PUSH
19278: LD_INT 80
19280: ST_TO_ADDR
// tech_RadMat := 81 ;
19281: LD_ADDR_EXP 80
19285: PUSH
19286: LD_INT 81
19288: ST_TO_ADDR
// tech_BasicTools := 82 ;
19289: LD_ADDR_EXP 81
19293: PUSH
19294: LD_INT 82
19296: ST_TO_ADDR
// tech_Cargo := 83 ;
19297: LD_ADDR_EXP 82
19301: PUSH
19302: LD_INT 83
19304: ST_TO_ADDR
// tech_Track := 84 ;
19305: LD_ADDR_EXP 83
19309: PUSH
19310: LD_INT 84
19312: ST_TO_ADDR
// tech_Crane := 85 ;
19313: LD_ADDR_EXP 84
19317: PUSH
19318: LD_INT 85
19320: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19321: LD_ADDR_EXP 85
19325: PUSH
19326: LD_INT 86
19328: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19329: LD_ADDR_EXP 86
19333: PUSH
19334: LD_INT 87
19336: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19337: LD_ADDR_EXP 87
19341: PUSH
19342: LD_INT 88
19344: ST_TO_ADDR
// class_mastodont := 31 ;
19345: LD_ADDR_EXP 88
19349: PUSH
19350: LD_INT 31
19352: ST_TO_ADDR
// class_horse := 21 ;
19353: LD_ADDR_EXP 89
19357: PUSH
19358: LD_INT 21
19360: ST_TO_ADDR
// end ;
19361: LD_VAR 0 1
19365: RET
// every 1 do
19366: GO 19368
19368: DISABLE
// InitGlobalVariables ; end_of_file
19369: CALL 19198 0 0
19373: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19374: LD_INT 0
19376: PPUSH
19377: PPUSH
// if exist_mode then
19378: LD_VAR 0 2
19382: IFFALSE 19407
// unit := CreateCharacter ( prefix & ident ) else
19384: LD_ADDR_VAR 0 5
19388: PUSH
19389: LD_VAR 0 3
19393: PUSH
19394: LD_VAR 0 1
19398: STR
19399: PPUSH
19400: CALL_OW 34
19404: ST_TO_ADDR
19405: GO 19422
// unit := NewCharacter ( ident ) ;
19407: LD_ADDR_VAR 0 5
19411: PUSH
19412: LD_VAR 0 1
19416: PPUSH
19417: CALL_OW 25
19421: ST_TO_ADDR
// result := unit ;
19422: LD_ADDR_VAR 0 4
19426: PUSH
19427: LD_VAR 0 5
19431: ST_TO_ADDR
// end ;
19432: LD_VAR 0 4
19436: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19437: LD_INT 0
19439: PPUSH
19440: PPUSH
// if not side or not nation then
19441: LD_VAR 0 1
19445: NOT
19446: PUSH
19447: LD_VAR 0 2
19451: NOT
19452: OR
19453: IFFALSE 19457
// exit ;
19455: GO 20225
// case nation of nation_american :
19457: LD_VAR 0 2
19461: PUSH
19462: LD_INT 1
19464: DOUBLE
19465: EQUAL
19466: IFTRUE 19470
19468: GO 19684
19470: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19471: LD_ADDR_VAR 0 4
19475: PUSH
19476: LD_INT 35
19478: PUSH
19479: LD_INT 45
19481: PUSH
19482: LD_INT 46
19484: PUSH
19485: LD_INT 47
19487: PUSH
19488: LD_INT 82
19490: PUSH
19491: LD_INT 83
19493: PUSH
19494: LD_INT 84
19496: PUSH
19497: LD_INT 85
19499: PUSH
19500: LD_INT 86
19502: PUSH
19503: LD_INT 1
19505: PUSH
19506: LD_INT 2
19508: PUSH
19509: LD_INT 6
19511: PUSH
19512: LD_INT 15
19514: PUSH
19515: LD_INT 16
19517: PUSH
19518: LD_INT 7
19520: PUSH
19521: LD_INT 12
19523: PUSH
19524: LD_INT 13
19526: PUSH
19527: LD_INT 10
19529: PUSH
19530: LD_INT 14
19532: PUSH
19533: LD_INT 20
19535: PUSH
19536: LD_INT 21
19538: PUSH
19539: LD_INT 22
19541: PUSH
19542: LD_INT 25
19544: PUSH
19545: LD_INT 32
19547: PUSH
19548: LD_INT 27
19550: PUSH
19551: LD_INT 36
19553: PUSH
19554: LD_INT 69
19556: PUSH
19557: LD_INT 39
19559: PUSH
19560: LD_INT 34
19562: PUSH
19563: LD_INT 40
19565: PUSH
19566: LD_INT 48
19568: PUSH
19569: LD_INT 49
19571: PUSH
19572: LD_INT 50
19574: PUSH
19575: LD_INT 51
19577: PUSH
19578: LD_INT 52
19580: PUSH
19581: LD_INT 53
19583: PUSH
19584: LD_INT 54
19586: PUSH
19587: LD_INT 55
19589: PUSH
19590: LD_INT 56
19592: PUSH
19593: LD_INT 57
19595: PUSH
19596: LD_INT 58
19598: PUSH
19599: LD_INT 59
19601: PUSH
19602: LD_INT 60
19604: PUSH
19605: LD_INT 61
19607: PUSH
19608: LD_INT 62
19610: PUSH
19611: LD_INT 80
19613: PUSH
19614: LD_INT 82
19616: PUSH
19617: LD_INT 83
19619: PUSH
19620: LD_INT 84
19622: PUSH
19623: LD_INT 85
19625: PUSH
19626: LD_INT 86
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: ST_TO_ADDR
19682: GO 20149
19684: LD_INT 2
19686: DOUBLE
19687: EQUAL
19688: IFTRUE 19692
19690: GO 19918
19692: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
19693: LD_ADDR_VAR 0 4
19697: PUSH
19698: LD_INT 35
19700: PUSH
19701: LD_INT 45
19703: PUSH
19704: LD_INT 46
19706: PUSH
19707: LD_INT 47
19709: PUSH
19710: LD_INT 82
19712: PUSH
19713: LD_INT 83
19715: PUSH
19716: LD_INT 84
19718: PUSH
19719: LD_INT 85
19721: PUSH
19722: LD_INT 87
19724: PUSH
19725: LD_INT 70
19727: PUSH
19728: LD_INT 1
19730: PUSH
19731: LD_INT 11
19733: PUSH
19734: LD_INT 3
19736: PUSH
19737: LD_INT 4
19739: PUSH
19740: LD_INT 5
19742: PUSH
19743: LD_INT 6
19745: PUSH
19746: LD_INT 15
19748: PUSH
19749: LD_INT 18
19751: PUSH
19752: LD_INT 7
19754: PUSH
19755: LD_INT 17
19757: PUSH
19758: LD_INT 8
19760: PUSH
19761: LD_INT 20
19763: PUSH
19764: LD_INT 21
19766: PUSH
19767: LD_INT 22
19769: PUSH
19770: LD_INT 72
19772: PUSH
19773: LD_INT 26
19775: PUSH
19776: LD_INT 69
19778: PUSH
19779: LD_INT 39
19781: PUSH
19782: LD_INT 40
19784: PUSH
19785: LD_INT 41
19787: PUSH
19788: LD_INT 42
19790: PUSH
19791: LD_INT 43
19793: PUSH
19794: LD_INT 48
19796: PUSH
19797: LD_INT 49
19799: PUSH
19800: LD_INT 50
19802: PUSH
19803: LD_INT 51
19805: PUSH
19806: LD_INT 52
19808: PUSH
19809: LD_INT 53
19811: PUSH
19812: LD_INT 54
19814: PUSH
19815: LD_INT 55
19817: PUSH
19818: LD_INT 56
19820: PUSH
19821: LD_INT 60
19823: PUSH
19824: LD_INT 61
19826: PUSH
19827: LD_INT 62
19829: PUSH
19830: LD_INT 66
19832: PUSH
19833: LD_INT 67
19835: PUSH
19836: LD_INT 68
19838: PUSH
19839: LD_INT 81
19841: PUSH
19842: LD_INT 82
19844: PUSH
19845: LD_INT 83
19847: PUSH
19848: LD_INT 84
19850: PUSH
19851: LD_INT 85
19853: PUSH
19854: LD_INT 87
19856: PUSH
19857: LD_INT 88
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: ST_TO_ADDR
19916: GO 20149
19918: LD_INT 3
19920: DOUBLE
19921: EQUAL
19922: IFTRUE 19926
19924: GO 20148
19926: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
19927: LD_ADDR_VAR 0 4
19931: PUSH
19932: LD_INT 46
19934: PUSH
19935: LD_INT 47
19937: PUSH
19938: LD_INT 1
19940: PUSH
19941: LD_INT 2
19943: PUSH
19944: LD_INT 82
19946: PUSH
19947: LD_INT 83
19949: PUSH
19950: LD_INT 84
19952: PUSH
19953: LD_INT 85
19955: PUSH
19956: LD_INT 86
19958: PUSH
19959: LD_INT 11
19961: PUSH
19962: LD_INT 9
19964: PUSH
19965: LD_INT 20
19967: PUSH
19968: LD_INT 19
19970: PUSH
19971: LD_INT 21
19973: PUSH
19974: LD_INT 24
19976: PUSH
19977: LD_INT 22
19979: PUSH
19980: LD_INT 25
19982: PUSH
19983: LD_INT 28
19985: PUSH
19986: LD_INT 29
19988: PUSH
19989: LD_INT 30
19991: PUSH
19992: LD_INT 31
19994: PUSH
19995: LD_INT 37
19997: PUSH
19998: LD_INT 38
20000: PUSH
20001: LD_INT 32
20003: PUSH
20004: LD_INT 27
20006: PUSH
20007: LD_INT 33
20009: PUSH
20010: LD_INT 69
20012: PUSH
20013: LD_INT 39
20015: PUSH
20016: LD_INT 34
20018: PUSH
20019: LD_INT 40
20021: PUSH
20022: LD_INT 71
20024: PUSH
20025: LD_INT 23
20027: PUSH
20028: LD_INT 44
20030: PUSH
20031: LD_INT 48
20033: PUSH
20034: LD_INT 49
20036: PUSH
20037: LD_INT 50
20039: PUSH
20040: LD_INT 51
20042: PUSH
20043: LD_INT 52
20045: PUSH
20046: LD_INT 53
20048: PUSH
20049: LD_INT 54
20051: PUSH
20052: LD_INT 55
20054: PUSH
20055: LD_INT 56
20057: PUSH
20058: LD_INT 57
20060: PUSH
20061: LD_INT 58
20063: PUSH
20064: LD_INT 59
20066: PUSH
20067: LD_INT 63
20069: PUSH
20070: LD_INT 64
20072: PUSH
20073: LD_INT 65
20075: PUSH
20076: LD_INT 82
20078: PUSH
20079: LD_INT 83
20081: PUSH
20082: LD_INT 84
20084: PUSH
20085: LD_INT 85
20087: PUSH
20088: LD_INT 86
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: ST_TO_ADDR
20146: GO 20149
20148: POP
// if state > - 1 and state < 3 then
20149: LD_VAR 0 3
20153: PUSH
20154: LD_INT 1
20156: NEG
20157: GREATER
20158: PUSH
20159: LD_VAR 0 3
20163: PUSH
20164: LD_INT 3
20166: LESS
20167: AND
20168: IFFALSE 20225
// for i in result do
20170: LD_ADDR_VAR 0 5
20174: PUSH
20175: LD_VAR 0 4
20179: PUSH
20180: FOR_IN
20181: IFFALSE 20223
// if GetTech ( i , side ) <> state then
20183: LD_VAR 0 5
20187: PPUSH
20188: LD_VAR 0 1
20192: PPUSH
20193: CALL_OW 321
20197: PUSH
20198: LD_VAR 0 3
20202: NONEQUAL
20203: IFFALSE 20221
// result := result diff i ;
20205: LD_ADDR_VAR 0 4
20209: PUSH
20210: LD_VAR 0 4
20214: PUSH
20215: LD_VAR 0 5
20219: DIFF
20220: ST_TO_ADDR
20221: GO 20180
20223: POP
20224: POP
// end ;
20225: LD_VAR 0 4
20229: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20230: LD_INT 0
20232: PPUSH
20233: PPUSH
20234: PPUSH
// result := true ;
20235: LD_ADDR_VAR 0 3
20239: PUSH
20240: LD_INT 1
20242: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20243: LD_ADDR_VAR 0 5
20247: PUSH
20248: LD_VAR 0 2
20252: PPUSH
20253: CALL_OW 480
20257: ST_TO_ADDR
// if not tmp then
20258: LD_VAR 0 5
20262: NOT
20263: IFFALSE 20267
// exit ;
20265: GO 20316
// for i in tmp do
20267: LD_ADDR_VAR 0 4
20271: PUSH
20272: LD_VAR 0 5
20276: PUSH
20277: FOR_IN
20278: IFFALSE 20314
// if GetTech ( i , side ) <> state_researched then
20280: LD_VAR 0 4
20284: PPUSH
20285: LD_VAR 0 1
20289: PPUSH
20290: CALL_OW 321
20294: PUSH
20295: LD_INT 2
20297: NONEQUAL
20298: IFFALSE 20312
// begin result := false ;
20300: LD_ADDR_VAR 0 3
20304: PUSH
20305: LD_INT 0
20307: ST_TO_ADDR
// exit ;
20308: POP
20309: POP
20310: GO 20316
// end ;
20312: GO 20277
20314: POP
20315: POP
// end ;
20316: LD_VAR 0 3
20320: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20321: LD_INT 0
20323: PPUSH
20324: PPUSH
20325: PPUSH
20326: PPUSH
20327: PPUSH
20328: PPUSH
20329: PPUSH
20330: PPUSH
20331: PPUSH
20332: PPUSH
20333: PPUSH
20334: PPUSH
20335: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20336: LD_VAR 0 1
20340: NOT
20341: PUSH
20342: LD_VAR 0 1
20346: PPUSH
20347: CALL_OW 257
20351: PUSH
20352: LD_INT 9
20354: NONEQUAL
20355: OR
20356: IFFALSE 20360
// exit ;
20358: GO 20933
// side := GetSide ( unit ) ;
20360: LD_ADDR_VAR 0 9
20364: PUSH
20365: LD_VAR 0 1
20369: PPUSH
20370: CALL_OW 255
20374: ST_TO_ADDR
// tech_space := tech_spacanom ;
20375: LD_ADDR_VAR 0 12
20379: PUSH
20380: LD_INT 29
20382: ST_TO_ADDR
// tech_time := tech_taurad ;
20383: LD_ADDR_VAR 0 13
20387: PUSH
20388: LD_INT 28
20390: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20391: LD_ADDR_VAR 0 11
20395: PUSH
20396: LD_VAR 0 1
20400: PPUSH
20401: CALL_OW 310
20405: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20406: LD_VAR 0 11
20410: PPUSH
20411: CALL_OW 247
20415: PUSH
20416: LD_INT 2
20418: EQUAL
20419: IFFALSE 20423
// exit ;
20421: GO 20933
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20423: LD_ADDR_VAR 0 8
20427: PUSH
20428: LD_INT 81
20430: PUSH
20431: LD_VAR 0 9
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 3
20442: PUSH
20443: LD_INT 21
20445: PUSH
20446: LD_INT 3
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PPUSH
20461: CALL_OW 69
20465: ST_TO_ADDR
// if not tmp then
20466: LD_VAR 0 8
20470: NOT
20471: IFFALSE 20475
// exit ;
20473: GO 20933
// if in_unit then
20475: LD_VAR 0 11
20479: IFFALSE 20503
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20481: LD_ADDR_VAR 0 10
20485: PUSH
20486: LD_VAR 0 8
20490: PPUSH
20491: LD_VAR 0 11
20495: PPUSH
20496: CALL_OW 74
20500: ST_TO_ADDR
20501: GO 20523
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20503: LD_ADDR_VAR 0 10
20507: PUSH
20508: LD_VAR 0 8
20512: PPUSH
20513: LD_VAR 0 1
20517: PPUSH
20518: CALL_OW 74
20522: ST_TO_ADDR
// if not enemy then
20523: LD_VAR 0 10
20527: NOT
20528: IFFALSE 20532
// exit ;
20530: GO 20933
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20532: LD_VAR 0 11
20536: PUSH
20537: LD_VAR 0 11
20541: PPUSH
20542: LD_VAR 0 10
20546: PPUSH
20547: CALL_OW 296
20551: PUSH
20552: LD_INT 13
20554: GREATER
20555: AND
20556: PUSH
20557: LD_VAR 0 1
20561: PPUSH
20562: LD_VAR 0 10
20566: PPUSH
20567: CALL_OW 296
20571: PUSH
20572: LD_INT 12
20574: GREATER
20575: OR
20576: IFFALSE 20580
// exit ;
20578: GO 20933
// missile := [ 1 ] ;
20580: LD_ADDR_VAR 0 14
20584: PUSH
20585: LD_INT 1
20587: PUSH
20588: EMPTY
20589: LIST
20590: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20591: LD_VAR 0 9
20595: PPUSH
20596: LD_VAR 0 12
20600: PPUSH
20601: CALL_OW 325
20605: IFFALSE 20634
// missile := Replace ( missile , missile + 1 , 2 ) ;
20607: LD_ADDR_VAR 0 14
20611: PUSH
20612: LD_VAR 0 14
20616: PPUSH
20617: LD_VAR 0 14
20621: PUSH
20622: LD_INT 1
20624: PLUS
20625: PPUSH
20626: LD_INT 2
20628: PPUSH
20629: CALL_OW 1
20633: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20634: LD_VAR 0 9
20638: PPUSH
20639: LD_VAR 0 13
20643: PPUSH
20644: CALL_OW 325
20648: PUSH
20649: LD_VAR 0 10
20653: PPUSH
20654: CALL_OW 255
20658: PPUSH
20659: LD_VAR 0 13
20663: PPUSH
20664: CALL_OW 325
20668: NOT
20669: AND
20670: IFFALSE 20699
// missile := Replace ( missile , missile + 1 , 3 ) ;
20672: LD_ADDR_VAR 0 14
20676: PUSH
20677: LD_VAR 0 14
20681: PPUSH
20682: LD_VAR 0 14
20686: PUSH
20687: LD_INT 1
20689: PLUS
20690: PPUSH
20691: LD_INT 3
20693: PPUSH
20694: CALL_OW 1
20698: ST_TO_ADDR
// if missile < 2 then
20699: LD_VAR 0 14
20703: PUSH
20704: LD_INT 2
20706: LESS
20707: IFFALSE 20711
// exit ;
20709: GO 20933
// x := GetX ( enemy ) ;
20711: LD_ADDR_VAR 0 4
20715: PUSH
20716: LD_VAR 0 10
20720: PPUSH
20721: CALL_OW 250
20725: ST_TO_ADDR
// y := GetY ( enemy ) ;
20726: LD_ADDR_VAR 0 5
20730: PUSH
20731: LD_VAR 0 10
20735: PPUSH
20736: CALL_OW 251
20740: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20741: LD_ADDR_VAR 0 6
20745: PUSH
20746: LD_VAR 0 4
20750: PUSH
20751: LD_INT 1
20753: NEG
20754: PPUSH
20755: LD_INT 1
20757: PPUSH
20758: CALL_OW 12
20762: PLUS
20763: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20764: LD_ADDR_VAR 0 7
20768: PUSH
20769: LD_VAR 0 5
20773: PUSH
20774: LD_INT 1
20776: NEG
20777: PPUSH
20778: LD_INT 1
20780: PPUSH
20781: CALL_OW 12
20785: PLUS
20786: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20787: LD_VAR 0 6
20791: PPUSH
20792: LD_VAR 0 7
20796: PPUSH
20797: CALL_OW 488
20801: NOT
20802: IFFALSE 20824
// begin _x := x ;
20804: LD_ADDR_VAR 0 6
20808: PUSH
20809: LD_VAR 0 4
20813: ST_TO_ADDR
// _y := y ;
20814: LD_ADDR_VAR 0 7
20818: PUSH
20819: LD_VAR 0 5
20823: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20824: LD_ADDR_VAR 0 3
20828: PUSH
20829: LD_INT 1
20831: PPUSH
20832: LD_VAR 0 14
20836: PPUSH
20837: CALL_OW 12
20841: ST_TO_ADDR
// case i of 1 :
20842: LD_VAR 0 3
20846: PUSH
20847: LD_INT 1
20849: DOUBLE
20850: EQUAL
20851: IFTRUE 20855
20853: GO 20872
20855: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20856: LD_VAR 0 1
20860: PPUSH
20861: LD_VAR 0 10
20865: PPUSH
20866: CALL_OW 115
20870: GO 20933
20872: LD_INT 2
20874: DOUBLE
20875: EQUAL
20876: IFTRUE 20880
20878: GO 20902
20880: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20881: LD_VAR 0 1
20885: PPUSH
20886: LD_VAR 0 6
20890: PPUSH
20891: LD_VAR 0 7
20895: PPUSH
20896: CALL_OW 153
20900: GO 20933
20902: LD_INT 3
20904: DOUBLE
20905: EQUAL
20906: IFTRUE 20910
20908: GO 20932
20910: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20911: LD_VAR 0 1
20915: PPUSH
20916: LD_VAR 0 6
20920: PPUSH
20921: LD_VAR 0 7
20925: PPUSH
20926: CALL_OW 154
20930: GO 20933
20932: POP
// end ;
20933: LD_VAR 0 2
20937: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20938: LD_INT 0
20940: PPUSH
20941: PPUSH
20942: PPUSH
20943: PPUSH
20944: PPUSH
20945: PPUSH
// if not unit or not building then
20946: LD_VAR 0 1
20950: NOT
20951: PUSH
20952: LD_VAR 0 2
20956: NOT
20957: OR
20958: IFFALSE 20962
// exit ;
20960: GO 21120
// x := GetX ( building ) ;
20962: LD_ADDR_VAR 0 5
20966: PUSH
20967: LD_VAR 0 2
20971: PPUSH
20972: CALL_OW 250
20976: ST_TO_ADDR
// y := GetY ( building ) ;
20977: LD_ADDR_VAR 0 6
20981: PUSH
20982: LD_VAR 0 2
20986: PPUSH
20987: CALL_OW 251
20991: ST_TO_ADDR
// for i = 0 to 5 do
20992: LD_ADDR_VAR 0 4
20996: PUSH
20997: DOUBLE
20998: LD_INT 0
21000: DEC
21001: ST_TO_ADDR
21002: LD_INT 5
21004: PUSH
21005: FOR_TO
21006: IFFALSE 21118
// begin _x := ShiftX ( x , i , 3 ) ;
21008: LD_ADDR_VAR 0 7
21012: PUSH
21013: LD_VAR 0 5
21017: PPUSH
21018: LD_VAR 0 4
21022: PPUSH
21023: LD_INT 3
21025: PPUSH
21026: CALL_OW 272
21030: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21031: LD_ADDR_VAR 0 8
21035: PUSH
21036: LD_VAR 0 6
21040: PPUSH
21041: LD_VAR 0 4
21045: PPUSH
21046: LD_INT 3
21048: PPUSH
21049: CALL_OW 273
21053: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21054: LD_VAR 0 7
21058: PPUSH
21059: LD_VAR 0 8
21063: PPUSH
21064: CALL_OW 488
21068: NOT
21069: IFFALSE 21073
// continue ;
21071: GO 21005
// if HexInfo ( _x , _y ) = 0 then
21073: LD_VAR 0 7
21077: PPUSH
21078: LD_VAR 0 8
21082: PPUSH
21083: CALL_OW 428
21087: PUSH
21088: LD_INT 0
21090: EQUAL
21091: IFFALSE 21116
// begin ComMoveXY ( unit , _x , _y ) ;
21093: LD_VAR 0 1
21097: PPUSH
21098: LD_VAR 0 7
21102: PPUSH
21103: LD_VAR 0 8
21107: PPUSH
21108: CALL_OW 111
// exit ;
21112: POP
21113: POP
21114: GO 21120
// end ; end ;
21116: GO 21005
21118: POP
21119: POP
// end ;
21120: LD_VAR 0 3
21124: RET
// export function ScanBase ( side , base_area ) ; begin
21125: LD_INT 0
21127: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21128: LD_ADDR_VAR 0 3
21132: PUSH
21133: LD_VAR 0 2
21137: PPUSH
21138: LD_INT 81
21140: PUSH
21141: LD_VAR 0 1
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PPUSH
21150: CALL_OW 70
21154: ST_TO_ADDR
// end ;
21155: LD_VAR 0 3
21159: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21160: LD_INT 0
21162: PPUSH
21163: PPUSH
21164: PPUSH
21165: PPUSH
// result := false ;
21166: LD_ADDR_VAR 0 2
21170: PUSH
21171: LD_INT 0
21173: ST_TO_ADDR
// side := GetSide ( unit ) ;
21174: LD_ADDR_VAR 0 3
21178: PUSH
21179: LD_VAR 0 1
21183: PPUSH
21184: CALL_OW 255
21188: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21189: LD_ADDR_VAR 0 4
21193: PUSH
21194: LD_VAR 0 1
21198: PPUSH
21199: CALL_OW 248
21203: ST_TO_ADDR
// case nat of 1 :
21204: LD_VAR 0 4
21208: PUSH
21209: LD_INT 1
21211: DOUBLE
21212: EQUAL
21213: IFTRUE 21217
21215: GO 21228
21217: POP
// tech := tech_lassight ; 2 :
21218: LD_ADDR_VAR 0 5
21222: PUSH
21223: LD_INT 12
21225: ST_TO_ADDR
21226: GO 21267
21228: LD_INT 2
21230: DOUBLE
21231: EQUAL
21232: IFTRUE 21236
21234: GO 21247
21236: POP
// tech := tech_mortar ; 3 :
21237: LD_ADDR_VAR 0 5
21241: PUSH
21242: LD_INT 41
21244: ST_TO_ADDR
21245: GO 21267
21247: LD_INT 3
21249: DOUBLE
21250: EQUAL
21251: IFTRUE 21255
21253: GO 21266
21255: POP
// tech := tech_bazooka ; end ;
21256: LD_ADDR_VAR 0 5
21260: PUSH
21261: LD_INT 44
21263: ST_TO_ADDR
21264: GO 21267
21266: POP
// if Researched ( side , tech ) then
21267: LD_VAR 0 3
21271: PPUSH
21272: LD_VAR 0 5
21276: PPUSH
21277: CALL_OW 325
21281: IFFALSE 21308
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21283: LD_ADDR_VAR 0 2
21287: PUSH
21288: LD_INT 5
21290: PUSH
21291: LD_INT 8
21293: PUSH
21294: LD_INT 9
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: LIST
21301: PUSH
21302: LD_VAR 0 4
21306: ARRAY
21307: ST_TO_ADDR
// end ;
21308: LD_VAR 0 2
21312: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21313: LD_INT 0
21315: PPUSH
21316: PPUSH
21317: PPUSH
// if not mines then
21318: LD_VAR 0 2
21322: NOT
21323: IFFALSE 21327
// exit ;
21325: GO 21471
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21327: LD_ADDR_VAR 0 5
21331: PUSH
21332: LD_INT 81
21334: PUSH
21335: LD_VAR 0 1
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 3
21346: PUSH
21347: LD_INT 21
21349: PUSH
21350: LD_INT 3
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PPUSH
21365: CALL_OW 69
21369: ST_TO_ADDR
// for i in mines do
21370: LD_ADDR_VAR 0 4
21374: PUSH
21375: LD_VAR 0 2
21379: PUSH
21380: FOR_IN
21381: IFFALSE 21469
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21383: LD_VAR 0 4
21387: PUSH
21388: LD_INT 1
21390: ARRAY
21391: PPUSH
21392: LD_VAR 0 4
21396: PUSH
21397: LD_INT 2
21399: ARRAY
21400: PPUSH
21401: CALL_OW 458
21405: NOT
21406: IFFALSE 21410
// continue ;
21408: GO 21380
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21410: LD_VAR 0 4
21414: PUSH
21415: LD_INT 1
21417: ARRAY
21418: PPUSH
21419: LD_VAR 0 4
21423: PUSH
21424: LD_INT 2
21426: ARRAY
21427: PPUSH
21428: CALL_OW 428
21432: PUSH
21433: LD_VAR 0 5
21437: IN
21438: IFFALSE 21467
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21440: LD_VAR 0 4
21444: PUSH
21445: LD_INT 1
21447: ARRAY
21448: PPUSH
21449: LD_VAR 0 4
21453: PUSH
21454: LD_INT 2
21456: ARRAY
21457: PPUSH
21458: LD_VAR 0 1
21462: PPUSH
21463: CALL_OW 456
// end ;
21467: GO 21380
21469: POP
21470: POP
// end ;
21471: LD_VAR 0 3
21475: RET
// export function Count ( array ) ; var i ; begin
21476: LD_INT 0
21478: PPUSH
21479: PPUSH
// result := 0 ;
21480: LD_ADDR_VAR 0 2
21484: PUSH
21485: LD_INT 0
21487: ST_TO_ADDR
// for i in array do
21488: LD_ADDR_VAR 0 3
21492: PUSH
21493: LD_VAR 0 1
21497: PUSH
21498: FOR_IN
21499: IFFALSE 21523
// if i then
21501: LD_VAR 0 3
21505: IFFALSE 21521
// result := result + 1 ;
21507: LD_ADDR_VAR 0 2
21511: PUSH
21512: LD_VAR 0 2
21516: PUSH
21517: LD_INT 1
21519: PLUS
21520: ST_TO_ADDR
21521: GO 21498
21523: POP
21524: POP
// end ;
21525: LD_VAR 0 2
21529: RET
// export function IsEmpty ( building ) ; begin
21530: LD_INT 0
21532: PPUSH
// if not building then
21533: LD_VAR 0 1
21537: NOT
21538: IFFALSE 21542
// exit ;
21540: GO 21585
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
21542: LD_ADDR_VAR 0 2
21546: PUSH
21547: LD_VAR 0 1
21551: PUSH
21552: LD_INT 22
21554: PUSH
21555: LD_VAR 0 1
21559: PPUSH
21560: CALL_OW 255
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: PUSH
21569: LD_INT 58
21571: PUSH
21572: EMPTY
21573: LIST
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PPUSH
21579: CALL_OW 69
21583: IN
21584: ST_TO_ADDR
// end ;
21585: LD_VAR 0 2
21589: RET
// export function IsNotFull ( building ) ; begin
21590: LD_INT 0
21592: PPUSH
// if not building then
21593: LD_VAR 0 1
21597: NOT
21598: IFFALSE 21602
// exit ;
21600: GO 21621
// result := UnitsInside ( building ) < 6 ;
21602: LD_ADDR_VAR 0 2
21606: PUSH
21607: LD_VAR 0 1
21611: PPUSH
21612: CALL_OW 313
21616: PUSH
21617: LD_INT 6
21619: LESS
21620: ST_TO_ADDR
// end ;
21621: LD_VAR 0 2
21625: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21626: LD_INT 0
21628: PPUSH
21629: PPUSH
21630: PPUSH
21631: PPUSH
// tmp := [ ] ;
21632: LD_ADDR_VAR 0 3
21636: PUSH
21637: EMPTY
21638: ST_TO_ADDR
// list := [ ] ;
21639: LD_ADDR_VAR 0 5
21643: PUSH
21644: EMPTY
21645: ST_TO_ADDR
// for i = 16 to 25 do
21646: LD_ADDR_VAR 0 4
21650: PUSH
21651: DOUBLE
21652: LD_INT 16
21654: DEC
21655: ST_TO_ADDR
21656: LD_INT 25
21658: PUSH
21659: FOR_TO
21660: IFFALSE 21733
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21662: LD_ADDR_VAR 0 3
21666: PUSH
21667: LD_VAR 0 3
21671: PUSH
21672: LD_INT 22
21674: PUSH
21675: LD_VAR 0 1
21679: PPUSH
21680: CALL_OW 255
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: LD_INT 91
21691: PUSH
21692: LD_VAR 0 1
21696: PUSH
21697: LD_INT 6
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 30
21707: PUSH
21708: LD_VAR 0 4
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: LIST
21721: PUSH
21722: EMPTY
21723: LIST
21724: PPUSH
21725: CALL_OW 69
21729: ADD
21730: ST_TO_ADDR
21731: GO 21659
21733: POP
21734: POP
// for i = 1 to tmp do
21735: LD_ADDR_VAR 0 4
21739: PUSH
21740: DOUBLE
21741: LD_INT 1
21743: DEC
21744: ST_TO_ADDR
21745: LD_VAR 0 3
21749: PUSH
21750: FOR_TO
21751: IFFALSE 21839
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
21753: LD_ADDR_VAR 0 5
21757: PUSH
21758: LD_VAR 0 5
21762: PUSH
21763: LD_VAR 0 3
21767: PUSH
21768: LD_VAR 0 4
21772: ARRAY
21773: PPUSH
21774: CALL_OW 266
21778: PUSH
21779: LD_VAR 0 3
21783: PUSH
21784: LD_VAR 0 4
21788: ARRAY
21789: PPUSH
21790: CALL_OW 250
21794: PUSH
21795: LD_VAR 0 3
21799: PUSH
21800: LD_VAR 0 4
21804: ARRAY
21805: PPUSH
21806: CALL_OW 251
21810: PUSH
21811: LD_VAR 0 3
21815: PUSH
21816: LD_VAR 0 4
21820: ARRAY
21821: PPUSH
21822: CALL_OW 254
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: PUSH
21833: EMPTY
21834: LIST
21835: ADD
21836: ST_TO_ADDR
21837: GO 21750
21839: POP
21840: POP
// result := list ;
21841: LD_ADDR_VAR 0 2
21845: PUSH
21846: LD_VAR 0 5
21850: ST_TO_ADDR
// end ;
21851: LD_VAR 0 2
21855: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
21856: LD_INT 0
21858: PPUSH
21859: PPUSH
21860: PPUSH
21861: PPUSH
21862: PPUSH
21863: PPUSH
21864: PPUSH
// if not factory then
21865: LD_VAR 0 1
21869: NOT
21870: IFFALSE 21874
// exit ;
21872: GO 22467
// if control = control_apeman then
21874: LD_VAR 0 4
21878: PUSH
21879: LD_INT 5
21881: EQUAL
21882: IFFALSE 21991
// begin tmp := UnitsInside ( factory ) ;
21884: LD_ADDR_VAR 0 8
21888: PUSH
21889: LD_VAR 0 1
21893: PPUSH
21894: CALL_OW 313
21898: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
21899: LD_VAR 0 8
21903: PPUSH
21904: LD_INT 25
21906: PUSH
21907: LD_INT 12
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PPUSH
21914: CALL_OW 72
21918: NOT
21919: IFFALSE 21929
// control := control_manual ;
21921: LD_ADDR_VAR 0 4
21925: PUSH
21926: LD_INT 1
21928: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
21929: LD_ADDR_VAR 0 8
21933: PUSH
21934: LD_VAR 0 1
21938: PPUSH
21939: CALL 21626 0 1
21943: ST_TO_ADDR
// if tmp then
21944: LD_VAR 0 8
21948: IFFALSE 21991
// begin for i in tmp do
21950: LD_ADDR_VAR 0 7
21954: PUSH
21955: LD_VAR 0 8
21959: PUSH
21960: FOR_IN
21961: IFFALSE 21989
// if i [ 1 ] = b_ext_radio then
21963: LD_VAR 0 7
21967: PUSH
21968: LD_INT 1
21970: ARRAY
21971: PUSH
21972: LD_INT 22
21974: EQUAL
21975: IFFALSE 21987
// begin control := control_remote ;
21977: LD_ADDR_VAR 0 4
21981: PUSH
21982: LD_INT 2
21984: ST_TO_ADDR
// break ;
21985: GO 21989
// end ;
21987: GO 21960
21989: POP
21990: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21991: LD_VAR 0 1
21995: PPUSH
21996: LD_VAR 0 2
22000: PPUSH
22001: LD_VAR 0 3
22005: PPUSH
22006: LD_VAR 0 4
22010: PPUSH
22011: LD_VAR 0 5
22015: PPUSH
22016: CALL_OW 448
22020: IFFALSE 22055
// begin result := [ chassis , engine , control , weapon ] ;
22022: LD_ADDR_VAR 0 6
22026: PUSH
22027: LD_VAR 0 2
22031: PUSH
22032: LD_VAR 0 3
22036: PUSH
22037: LD_VAR 0 4
22041: PUSH
22042: LD_VAR 0 5
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: ST_TO_ADDR
// exit ;
22053: GO 22467
// end ; _chassis := AvailableChassisList ( factory ) ;
22055: LD_ADDR_VAR 0 9
22059: PUSH
22060: LD_VAR 0 1
22064: PPUSH
22065: CALL_OW 475
22069: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22070: LD_ADDR_VAR 0 11
22074: PUSH
22075: LD_VAR 0 1
22079: PPUSH
22080: CALL_OW 476
22084: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22085: LD_ADDR_VAR 0 12
22089: PUSH
22090: LD_VAR 0 1
22094: PPUSH
22095: CALL_OW 477
22099: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22100: LD_ADDR_VAR 0 10
22104: PUSH
22105: LD_VAR 0 1
22109: PPUSH
22110: CALL_OW 478
22114: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22115: LD_VAR 0 9
22119: NOT
22120: PUSH
22121: LD_VAR 0 11
22125: NOT
22126: OR
22127: PUSH
22128: LD_VAR 0 12
22132: NOT
22133: OR
22134: PUSH
22135: LD_VAR 0 10
22139: NOT
22140: OR
22141: IFFALSE 22176
// begin result := [ chassis , engine , control , weapon ] ;
22143: LD_ADDR_VAR 0 6
22147: PUSH
22148: LD_VAR 0 2
22152: PUSH
22153: LD_VAR 0 3
22157: PUSH
22158: LD_VAR 0 4
22162: PUSH
22163: LD_VAR 0 5
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: ST_TO_ADDR
// exit ;
22174: GO 22467
// end ; if not chassis in _chassis then
22176: LD_VAR 0 2
22180: PUSH
22181: LD_VAR 0 9
22185: IN
22186: NOT
22187: IFFALSE 22213
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22189: LD_ADDR_VAR 0 2
22193: PUSH
22194: LD_VAR 0 9
22198: PUSH
22199: LD_INT 1
22201: PPUSH
22202: LD_VAR 0 9
22206: PPUSH
22207: CALL_OW 12
22211: ARRAY
22212: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22213: LD_VAR 0 2
22217: PPUSH
22218: LD_VAR 0 3
22222: PPUSH
22223: CALL 22472 0 2
22227: NOT
22228: IFFALSE 22287
// repeat engine := _engine [ 1 ] ;
22230: LD_ADDR_VAR 0 3
22234: PUSH
22235: LD_VAR 0 11
22239: PUSH
22240: LD_INT 1
22242: ARRAY
22243: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22244: LD_ADDR_VAR 0 11
22248: PUSH
22249: LD_VAR 0 11
22253: PPUSH
22254: LD_INT 1
22256: PPUSH
22257: CALL_OW 3
22261: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22262: LD_VAR 0 2
22266: PPUSH
22267: LD_VAR 0 3
22271: PPUSH
22272: CALL 22472 0 2
22276: PUSH
22277: LD_VAR 0 11
22281: PUSH
22282: EMPTY
22283: EQUAL
22284: OR
22285: IFFALSE 22230
// if not control in _control then
22287: LD_VAR 0 4
22291: PUSH
22292: LD_VAR 0 12
22296: IN
22297: NOT
22298: IFFALSE 22324
// control := _control [ rand ( 1 , _control ) ] ;
22300: LD_ADDR_VAR 0 4
22304: PUSH
22305: LD_VAR 0 12
22309: PUSH
22310: LD_INT 1
22312: PPUSH
22313: LD_VAR 0 12
22317: PPUSH
22318: CALL_OW 12
22322: ARRAY
22323: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22324: LD_VAR 0 2
22328: PPUSH
22329: LD_VAR 0 5
22333: PPUSH
22334: CALL 22692 0 2
22338: NOT
22339: IFFALSE 22398
// repeat weapon := _weapon [ 1 ] ;
22341: LD_ADDR_VAR 0 5
22345: PUSH
22346: LD_VAR 0 10
22350: PUSH
22351: LD_INT 1
22353: ARRAY
22354: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22355: LD_ADDR_VAR 0 10
22359: PUSH
22360: LD_VAR 0 10
22364: PPUSH
22365: LD_INT 1
22367: PPUSH
22368: CALL_OW 3
22372: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22373: LD_VAR 0 2
22377: PPUSH
22378: LD_VAR 0 5
22382: PPUSH
22383: CALL 22692 0 2
22387: PUSH
22388: LD_VAR 0 10
22392: PUSH
22393: EMPTY
22394: EQUAL
22395: OR
22396: IFFALSE 22341
// result := [ ] ;
22398: LD_ADDR_VAR 0 6
22402: PUSH
22403: EMPTY
22404: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22405: LD_VAR 0 1
22409: PPUSH
22410: LD_VAR 0 2
22414: PPUSH
22415: LD_VAR 0 3
22419: PPUSH
22420: LD_VAR 0 4
22424: PPUSH
22425: LD_VAR 0 5
22429: PPUSH
22430: CALL_OW 448
22434: IFFALSE 22467
// result := [ chassis , engine , control , weapon ] ;
22436: LD_ADDR_VAR 0 6
22440: PUSH
22441: LD_VAR 0 2
22445: PUSH
22446: LD_VAR 0 3
22450: PUSH
22451: LD_VAR 0 4
22455: PUSH
22456: LD_VAR 0 5
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: ST_TO_ADDR
// end ;
22467: LD_VAR 0 6
22471: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22472: LD_INT 0
22474: PPUSH
// if not chassis or not engine then
22475: LD_VAR 0 1
22479: NOT
22480: PUSH
22481: LD_VAR 0 2
22485: NOT
22486: OR
22487: IFFALSE 22491
// exit ;
22489: GO 22687
// case engine of engine_solar :
22491: LD_VAR 0 2
22495: PUSH
22496: LD_INT 2
22498: DOUBLE
22499: EQUAL
22500: IFTRUE 22504
22502: GO 22542
22504: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
22505: LD_ADDR_VAR 0 3
22509: PUSH
22510: LD_INT 11
22512: PUSH
22513: LD_INT 12
22515: PUSH
22516: LD_INT 13
22518: PUSH
22519: LD_INT 14
22521: PUSH
22522: LD_INT 1
22524: PUSH
22525: LD_INT 2
22527: PUSH
22528: LD_INT 3
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: ST_TO_ADDR
22540: GO 22671
22542: LD_INT 1
22544: DOUBLE
22545: EQUAL
22546: IFTRUE 22550
22548: GO 22612
22550: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
22551: LD_ADDR_VAR 0 3
22555: PUSH
22556: LD_INT 11
22558: PUSH
22559: LD_INT 12
22561: PUSH
22562: LD_INT 13
22564: PUSH
22565: LD_INT 14
22567: PUSH
22568: LD_INT 1
22570: PUSH
22571: LD_INT 2
22573: PUSH
22574: LD_INT 3
22576: PUSH
22577: LD_INT 4
22579: PUSH
22580: LD_INT 5
22582: PUSH
22583: LD_INT 21
22585: PUSH
22586: LD_INT 23
22588: PUSH
22589: LD_INT 22
22591: PUSH
22592: LD_INT 24
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: ST_TO_ADDR
22610: GO 22671
22612: LD_INT 3
22614: DOUBLE
22615: EQUAL
22616: IFTRUE 22620
22618: GO 22670
22620: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22621: LD_ADDR_VAR 0 3
22625: PUSH
22626: LD_INT 13
22628: PUSH
22629: LD_INT 14
22631: PUSH
22632: LD_INT 2
22634: PUSH
22635: LD_INT 3
22637: PUSH
22638: LD_INT 4
22640: PUSH
22641: LD_INT 5
22643: PUSH
22644: LD_INT 21
22646: PUSH
22647: LD_INT 22
22649: PUSH
22650: LD_INT 23
22652: PUSH
22653: LD_INT 24
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: ST_TO_ADDR
22668: GO 22671
22670: POP
// result := ( chassis in result ) ;
22671: LD_ADDR_VAR 0 3
22675: PUSH
22676: LD_VAR 0 1
22680: PUSH
22681: LD_VAR 0 3
22685: IN
22686: ST_TO_ADDR
// end ;
22687: LD_VAR 0 3
22691: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
22692: LD_INT 0
22694: PPUSH
// if not chassis or not weapon then
22695: LD_VAR 0 1
22699: NOT
22700: PUSH
22701: LD_VAR 0 2
22705: NOT
22706: OR
22707: IFFALSE 22711
// exit ;
22709: GO 23773
// case weapon of us_machine_gun :
22711: LD_VAR 0 2
22715: PUSH
22716: LD_INT 2
22718: DOUBLE
22719: EQUAL
22720: IFTRUE 22724
22722: GO 22754
22724: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
22725: LD_ADDR_VAR 0 3
22729: PUSH
22730: LD_INT 1
22732: PUSH
22733: LD_INT 2
22735: PUSH
22736: LD_INT 3
22738: PUSH
22739: LD_INT 4
22741: PUSH
22742: LD_INT 5
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: ST_TO_ADDR
22752: GO 23757
22754: LD_INT 3
22756: DOUBLE
22757: EQUAL
22758: IFTRUE 22762
22760: GO 22792
22762: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
22763: LD_ADDR_VAR 0 3
22767: PUSH
22768: LD_INT 1
22770: PUSH
22771: LD_INT 2
22773: PUSH
22774: LD_INT 3
22776: PUSH
22777: LD_INT 4
22779: PUSH
22780: LD_INT 5
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: ST_TO_ADDR
22790: GO 23757
22792: LD_INT 11
22794: DOUBLE
22795: EQUAL
22796: IFTRUE 22800
22798: GO 22830
22800: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
22801: LD_ADDR_VAR 0 3
22805: PUSH
22806: LD_INT 1
22808: PUSH
22809: LD_INT 2
22811: PUSH
22812: LD_INT 3
22814: PUSH
22815: LD_INT 4
22817: PUSH
22818: LD_INT 5
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: ST_TO_ADDR
22828: GO 23757
22830: LD_INT 4
22832: DOUBLE
22833: EQUAL
22834: IFTRUE 22838
22836: GO 22864
22838: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
22839: LD_ADDR_VAR 0 3
22843: PUSH
22844: LD_INT 2
22846: PUSH
22847: LD_INT 3
22849: PUSH
22850: LD_INT 4
22852: PUSH
22853: LD_INT 5
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: ST_TO_ADDR
22862: GO 23757
22864: LD_INT 5
22866: DOUBLE
22867: EQUAL
22868: IFTRUE 22872
22870: GO 22898
22872: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
22873: LD_ADDR_VAR 0 3
22877: PUSH
22878: LD_INT 2
22880: PUSH
22881: LD_INT 3
22883: PUSH
22884: LD_INT 4
22886: PUSH
22887: LD_INT 5
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: ST_TO_ADDR
22896: GO 23757
22898: LD_INT 9
22900: DOUBLE
22901: EQUAL
22902: IFTRUE 22906
22904: GO 22932
22906: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
22907: LD_ADDR_VAR 0 3
22911: PUSH
22912: LD_INT 2
22914: PUSH
22915: LD_INT 3
22917: PUSH
22918: LD_INT 4
22920: PUSH
22921: LD_INT 5
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: ST_TO_ADDR
22930: GO 23757
22932: LD_INT 7
22934: DOUBLE
22935: EQUAL
22936: IFTRUE 22940
22938: GO 22966
22940: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
22941: LD_ADDR_VAR 0 3
22945: PUSH
22946: LD_INT 2
22948: PUSH
22949: LD_INT 3
22951: PUSH
22952: LD_INT 4
22954: PUSH
22955: LD_INT 5
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: ST_TO_ADDR
22964: GO 23757
22966: LD_INT 12
22968: DOUBLE
22969: EQUAL
22970: IFTRUE 22974
22972: GO 23000
22974: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
22975: LD_ADDR_VAR 0 3
22979: PUSH
22980: LD_INT 2
22982: PUSH
22983: LD_INT 3
22985: PUSH
22986: LD_INT 4
22988: PUSH
22989: LD_INT 5
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: ST_TO_ADDR
22998: GO 23757
23000: LD_INT 13
23002: DOUBLE
23003: EQUAL
23004: IFTRUE 23008
23006: GO 23034
23008: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23009: LD_ADDR_VAR 0 3
23013: PUSH
23014: LD_INT 2
23016: PUSH
23017: LD_INT 3
23019: PUSH
23020: LD_INT 4
23022: PUSH
23023: LD_INT 5
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: ST_TO_ADDR
23032: GO 23757
23034: LD_INT 14
23036: DOUBLE
23037: EQUAL
23038: IFTRUE 23042
23040: GO 23060
23042: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23043: LD_ADDR_VAR 0 3
23047: PUSH
23048: LD_INT 4
23050: PUSH
23051: LD_INT 5
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: ST_TO_ADDR
23058: GO 23757
23060: LD_INT 6
23062: DOUBLE
23063: EQUAL
23064: IFTRUE 23068
23066: GO 23086
23068: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23069: LD_ADDR_VAR 0 3
23073: PUSH
23074: LD_INT 4
23076: PUSH
23077: LD_INT 5
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: ST_TO_ADDR
23084: GO 23757
23086: LD_INT 10
23088: DOUBLE
23089: EQUAL
23090: IFTRUE 23094
23092: GO 23112
23094: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23095: LD_ADDR_VAR 0 3
23099: PUSH
23100: LD_INT 4
23102: PUSH
23103: LD_INT 5
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: ST_TO_ADDR
23110: GO 23757
23112: LD_INT 22
23114: DOUBLE
23115: EQUAL
23116: IFTRUE 23120
23118: GO 23146
23120: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23121: LD_ADDR_VAR 0 3
23125: PUSH
23126: LD_INT 11
23128: PUSH
23129: LD_INT 12
23131: PUSH
23132: LD_INT 13
23134: PUSH
23135: LD_INT 14
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: ST_TO_ADDR
23144: GO 23757
23146: LD_INT 23
23148: DOUBLE
23149: EQUAL
23150: IFTRUE 23154
23152: GO 23180
23154: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23155: LD_ADDR_VAR 0 3
23159: PUSH
23160: LD_INT 11
23162: PUSH
23163: LD_INT 12
23165: PUSH
23166: LD_INT 13
23168: PUSH
23169: LD_INT 14
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: ST_TO_ADDR
23178: GO 23757
23180: LD_INT 24
23182: DOUBLE
23183: EQUAL
23184: IFTRUE 23188
23186: GO 23214
23188: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23189: LD_ADDR_VAR 0 3
23193: PUSH
23194: LD_INT 11
23196: PUSH
23197: LD_INT 12
23199: PUSH
23200: LD_INT 13
23202: PUSH
23203: LD_INT 14
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: ST_TO_ADDR
23212: GO 23757
23214: LD_INT 30
23216: DOUBLE
23217: EQUAL
23218: IFTRUE 23222
23220: GO 23248
23222: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23223: LD_ADDR_VAR 0 3
23227: PUSH
23228: LD_INT 11
23230: PUSH
23231: LD_INT 12
23233: PUSH
23234: LD_INT 13
23236: PUSH
23237: LD_INT 14
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: ST_TO_ADDR
23246: GO 23757
23248: LD_INT 25
23250: DOUBLE
23251: EQUAL
23252: IFTRUE 23256
23254: GO 23274
23256: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23257: LD_ADDR_VAR 0 3
23261: PUSH
23262: LD_INT 13
23264: PUSH
23265: LD_INT 14
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: ST_TO_ADDR
23272: GO 23757
23274: LD_INT 27
23276: DOUBLE
23277: EQUAL
23278: IFTRUE 23282
23280: GO 23300
23282: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
23283: LD_ADDR_VAR 0 3
23287: PUSH
23288: LD_INT 13
23290: PUSH
23291: LD_INT 14
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: ST_TO_ADDR
23298: GO 23757
23300: LD_EXP 75
23304: DOUBLE
23305: EQUAL
23306: IFTRUE 23310
23308: GO 23336
23310: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23311: LD_ADDR_VAR 0 3
23315: PUSH
23316: LD_INT 11
23318: PUSH
23319: LD_INT 12
23321: PUSH
23322: LD_INT 13
23324: PUSH
23325: LD_INT 14
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: ST_TO_ADDR
23334: GO 23757
23336: LD_INT 28
23338: DOUBLE
23339: EQUAL
23340: IFTRUE 23344
23342: GO 23362
23344: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23345: LD_ADDR_VAR 0 3
23349: PUSH
23350: LD_INT 13
23352: PUSH
23353: LD_INT 14
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: ST_TO_ADDR
23360: GO 23757
23362: LD_INT 29
23364: DOUBLE
23365: EQUAL
23366: IFTRUE 23370
23368: GO 23388
23370: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23371: LD_ADDR_VAR 0 3
23375: PUSH
23376: LD_INT 13
23378: PUSH
23379: LD_INT 14
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: ST_TO_ADDR
23386: GO 23757
23388: LD_INT 31
23390: DOUBLE
23391: EQUAL
23392: IFTRUE 23396
23394: GO 23414
23396: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23397: LD_ADDR_VAR 0 3
23401: PUSH
23402: LD_INT 13
23404: PUSH
23405: LD_INT 14
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: ST_TO_ADDR
23412: GO 23757
23414: LD_INT 26
23416: DOUBLE
23417: EQUAL
23418: IFTRUE 23422
23420: GO 23440
23422: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23423: LD_ADDR_VAR 0 3
23427: PUSH
23428: LD_INT 13
23430: PUSH
23431: LD_INT 14
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: ST_TO_ADDR
23438: GO 23757
23440: LD_INT 42
23442: DOUBLE
23443: EQUAL
23444: IFTRUE 23448
23446: GO 23474
23448: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23449: LD_ADDR_VAR 0 3
23453: PUSH
23454: LD_INT 21
23456: PUSH
23457: LD_INT 22
23459: PUSH
23460: LD_INT 23
23462: PUSH
23463: LD_INT 24
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: ST_TO_ADDR
23472: GO 23757
23474: LD_INT 43
23476: DOUBLE
23477: EQUAL
23478: IFTRUE 23482
23480: GO 23508
23482: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23483: LD_ADDR_VAR 0 3
23487: PUSH
23488: LD_INT 21
23490: PUSH
23491: LD_INT 22
23493: PUSH
23494: LD_INT 23
23496: PUSH
23497: LD_INT 24
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: ST_TO_ADDR
23506: GO 23757
23508: LD_INT 44
23510: DOUBLE
23511: EQUAL
23512: IFTRUE 23516
23514: GO 23542
23516: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
23517: LD_ADDR_VAR 0 3
23521: PUSH
23522: LD_INT 21
23524: PUSH
23525: LD_INT 22
23527: PUSH
23528: LD_INT 23
23530: PUSH
23531: LD_INT 24
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: ST_TO_ADDR
23540: GO 23757
23542: LD_INT 45
23544: DOUBLE
23545: EQUAL
23546: IFTRUE 23550
23548: GO 23576
23550: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
23551: LD_ADDR_VAR 0 3
23555: PUSH
23556: LD_INT 21
23558: PUSH
23559: LD_INT 22
23561: PUSH
23562: LD_INT 23
23564: PUSH
23565: LD_INT 24
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: ST_TO_ADDR
23574: GO 23757
23576: LD_INT 49
23578: DOUBLE
23579: EQUAL
23580: IFTRUE 23584
23582: GO 23610
23584: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
23585: LD_ADDR_VAR 0 3
23589: PUSH
23590: LD_INT 21
23592: PUSH
23593: LD_INT 22
23595: PUSH
23596: LD_INT 23
23598: PUSH
23599: LD_INT 24
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: ST_TO_ADDR
23608: GO 23757
23610: LD_INT 51
23612: DOUBLE
23613: EQUAL
23614: IFTRUE 23618
23616: GO 23644
23618: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
23619: LD_ADDR_VAR 0 3
23623: PUSH
23624: LD_INT 21
23626: PUSH
23627: LD_INT 22
23629: PUSH
23630: LD_INT 23
23632: PUSH
23633: LD_INT 24
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: ST_TO_ADDR
23642: GO 23757
23644: LD_INT 52
23646: DOUBLE
23647: EQUAL
23648: IFTRUE 23652
23650: GO 23678
23652: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23653: LD_ADDR_VAR 0 3
23657: PUSH
23658: LD_INT 21
23660: PUSH
23661: LD_INT 22
23663: PUSH
23664: LD_INT 23
23666: PUSH
23667: LD_INT 24
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: ST_TO_ADDR
23676: GO 23757
23678: LD_INT 53
23680: DOUBLE
23681: EQUAL
23682: IFTRUE 23686
23684: GO 23704
23686: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
23687: LD_ADDR_VAR 0 3
23691: PUSH
23692: LD_INT 23
23694: PUSH
23695: LD_INT 24
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: ST_TO_ADDR
23702: GO 23757
23704: LD_INT 46
23706: DOUBLE
23707: EQUAL
23708: IFTRUE 23712
23710: GO 23730
23712: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
23713: LD_ADDR_VAR 0 3
23717: PUSH
23718: LD_INT 23
23720: PUSH
23721: LD_INT 24
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: ST_TO_ADDR
23728: GO 23757
23730: LD_INT 47
23732: DOUBLE
23733: EQUAL
23734: IFTRUE 23738
23736: GO 23756
23738: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23739: LD_ADDR_VAR 0 3
23743: PUSH
23744: LD_INT 23
23746: PUSH
23747: LD_INT 24
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: ST_TO_ADDR
23754: GO 23757
23756: POP
// result := ( chassis in result ) ;
23757: LD_ADDR_VAR 0 3
23761: PUSH
23762: LD_VAR 0 1
23766: PUSH
23767: LD_VAR 0 3
23771: IN
23772: ST_TO_ADDR
// end ;
23773: LD_VAR 0 3
23777: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
23778: LD_INT 0
23780: PPUSH
23781: PPUSH
23782: PPUSH
23783: PPUSH
23784: PPUSH
23785: PPUSH
23786: PPUSH
// result := array ;
23787: LD_ADDR_VAR 0 5
23791: PUSH
23792: LD_VAR 0 1
23796: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
23797: LD_VAR 0 1
23801: NOT
23802: PUSH
23803: LD_VAR 0 2
23807: NOT
23808: OR
23809: PUSH
23810: LD_VAR 0 3
23814: NOT
23815: OR
23816: PUSH
23817: LD_VAR 0 2
23821: PUSH
23822: LD_VAR 0 1
23826: GREATER
23827: OR
23828: PUSH
23829: LD_VAR 0 3
23833: PUSH
23834: LD_VAR 0 1
23838: GREATER
23839: OR
23840: IFFALSE 23844
// exit ;
23842: GO 24140
// if direction then
23844: LD_VAR 0 4
23848: IFFALSE 23912
// begin d := 1 ;
23850: LD_ADDR_VAR 0 9
23854: PUSH
23855: LD_INT 1
23857: ST_TO_ADDR
// if i_from > i_to then
23858: LD_VAR 0 2
23862: PUSH
23863: LD_VAR 0 3
23867: GREATER
23868: IFFALSE 23894
// length := ( array - i_from ) + i_to else
23870: LD_ADDR_VAR 0 11
23874: PUSH
23875: LD_VAR 0 1
23879: PUSH
23880: LD_VAR 0 2
23884: MINUS
23885: PUSH
23886: LD_VAR 0 3
23890: PLUS
23891: ST_TO_ADDR
23892: GO 23910
// length := i_to - i_from ;
23894: LD_ADDR_VAR 0 11
23898: PUSH
23899: LD_VAR 0 3
23903: PUSH
23904: LD_VAR 0 2
23908: MINUS
23909: ST_TO_ADDR
// end else
23910: GO 23973
// begin d := - 1 ;
23912: LD_ADDR_VAR 0 9
23916: PUSH
23917: LD_INT 1
23919: NEG
23920: ST_TO_ADDR
// if i_from > i_to then
23921: LD_VAR 0 2
23925: PUSH
23926: LD_VAR 0 3
23930: GREATER
23931: IFFALSE 23951
// length := i_from - i_to else
23933: LD_ADDR_VAR 0 11
23937: PUSH
23938: LD_VAR 0 2
23942: PUSH
23943: LD_VAR 0 3
23947: MINUS
23948: ST_TO_ADDR
23949: GO 23973
// length := ( array - i_to ) + i_from ;
23951: LD_ADDR_VAR 0 11
23955: PUSH
23956: LD_VAR 0 1
23960: PUSH
23961: LD_VAR 0 3
23965: MINUS
23966: PUSH
23967: LD_VAR 0 2
23971: PLUS
23972: ST_TO_ADDR
// end ; if not length then
23973: LD_VAR 0 11
23977: NOT
23978: IFFALSE 23982
// exit ;
23980: GO 24140
// tmp := array ;
23982: LD_ADDR_VAR 0 10
23986: PUSH
23987: LD_VAR 0 1
23991: ST_TO_ADDR
// for i = 1 to length do
23992: LD_ADDR_VAR 0 6
23996: PUSH
23997: DOUBLE
23998: LD_INT 1
24000: DEC
24001: ST_TO_ADDR
24002: LD_VAR 0 11
24006: PUSH
24007: FOR_TO
24008: IFFALSE 24128
// begin for j = 1 to array do
24010: LD_ADDR_VAR 0 7
24014: PUSH
24015: DOUBLE
24016: LD_INT 1
24018: DEC
24019: ST_TO_ADDR
24020: LD_VAR 0 1
24024: PUSH
24025: FOR_TO
24026: IFFALSE 24114
// begin k := j + d ;
24028: LD_ADDR_VAR 0 8
24032: PUSH
24033: LD_VAR 0 7
24037: PUSH
24038: LD_VAR 0 9
24042: PLUS
24043: ST_TO_ADDR
// if k > array then
24044: LD_VAR 0 8
24048: PUSH
24049: LD_VAR 0 1
24053: GREATER
24054: IFFALSE 24064
// k := 1 ;
24056: LD_ADDR_VAR 0 8
24060: PUSH
24061: LD_INT 1
24063: ST_TO_ADDR
// if not k then
24064: LD_VAR 0 8
24068: NOT
24069: IFFALSE 24081
// k := array ;
24071: LD_ADDR_VAR 0 8
24075: PUSH
24076: LD_VAR 0 1
24080: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24081: LD_ADDR_VAR 0 10
24085: PUSH
24086: LD_VAR 0 10
24090: PPUSH
24091: LD_VAR 0 8
24095: PPUSH
24096: LD_VAR 0 1
24100: PUSH
24101: LD_VAR 0 7
24105: ARRAY
24106: PPUSH
24107: CALL_OW 1
24111: ST_TO_ADDR
// end ;
24112: GO 24025
24114: POP
24115: POP
// array := tmp ;
24116: LD_ADDR_VAR 0 1
24120: PUSH
24121: LD_VAR 0 10
24125: ST_TO_ADDR
// end ;
24126: GO 24007
24128: POP
24129: POP
// result := array ;
24130: LD_ADDR_VAR 0 5
24134: PUSH
24135: LD_VAR 0 1
24139: ST_TO_ADDR
// end ;
24140: LD_VAR 0 5
24144: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24145: LD_INT 0
24147: PPUSH
24148: PPUSH
// result := 0 ;
24149: LD_ADDR_VAR 0 3
24153: PUSH
24154: LD_INT 0
24156: ST_TO_ADDR
// if not array or not value in array then
24157: LD_VAR 0 1
24161: NOT
24162: PUSH
24163: LD_VAR 0 2
24167: PUSH
24168: LD_VAR 0 1
24172: IN
24173: NOT
24174: OR
24175: IFFALSE 24179
// exit ;
24177: GO 24233
// for i = 1 to array do
24179: LD_ADDR_VAR 0 4
24183: PUSH
24184: DOUBLE
24185: LD_INT 1
24187: DEC
24188: ST_TO_ADDR
24189: LD_VAR 0 1
24193: PUSH
24194: FOR_TO
24195: IFFALSE 24231
// if value = array [ i ] then
24197: LD_VAR 0 2
24201: PUSH
24202: LD_VAR 0 1
24206: PUSH
24207: LD_VAR 0 4
24211: ARRAY
24212: EQUAL
24213: IFFALSE 24229
// begin result := i ;
24215: LD_ADDR_VAR 0 3
24219: PUSH
24220: LD_VAR 0 4
24224: ST_TO_ADDR
// exit ;
24225: POP
24226: POP
24227: GO 24233
// end ;
24229: GO 24194
24231: POP
24232: POP
// end ;
24233: LD_VAR 0 3
24237: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24238: LD_INT 0
24240: PPUSH
// vc_chassis := chassis ;
24241: LD_ADDR_OWVAR 37
24245: PUSH
24246: LD_VAR 0 1
24250: ST_TO_ADDR
// vc_engine := engine ;
24251: LD_ADDR_OWVAR 39
24255: PUSH
24256: LD_VAR 0 2
24260: ST_TO_ADDR
// vc_control := control ;
24261: LD_ADDR_OWVAR 38
24265: PUSH
24266: LD_VAR 0 3
24270: ST_TO_ADDR
// vc_weapon := weapon ;
24271: LD_ADDR_OWVAR 40
24275: PUSH
24276: LD_VAR 0 4
24280: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24281: LD_ADDR_OWVAR 41
24285: PUSH
24286: LD_VAR 0 5
24290: ST_TO_ADDR
// end ;
24291: LD_VAR 0 6
24295: RET
// export function WantPlant ( unit ) ; var task ; begin
24296: LD_INT 0
24298: PPUSH
24299: PPUSH
// result := false ;
24300: LD_ADDR_VAR 0 2
24304: PUSH
24305: LD_INT 0
24307: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24308: LD_ADDR_VAR 0 3
24312: PUSH
24313: LD_VAR 0 1
24317: PPUSH
24318: CALL_OW 437
24322: ST_TO_ADDR
// if task then
24323: LD_VAR 0 3
24327: IFFALSE 24355
// if task [ 1 ] [ 1 ] = p then
24329: LD_VAR 0 3
24333: PUSH
24334: LD_INT 1
24336: ARRAY
24337: PUSH
24338: LD_INT 1
24340: ARRAY
24341: PUSH
24342: LD_STRING p
24344: EQUAL
24345: IFFALSE 24355
// result := true ;
24347: LD_ADDR_VAR 0 2
24351: PUSH
24352: LD_INT 1
24354: ST_TO_ADDR
// end ;
24355: LD_VAR 0 2
24359: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24360: LD_INT 0
24362: PPUSH
24363: PPUSH
24364: PPUSH
24365: PPUSH
// if pos < 1 then
24366: LD_VAR 0 2
24370: PUSH
24371: LD_INT 1
24373: LESS
24374: IFFALSE 24378
// exit ;
24376: GO 24681
// if pos = 1 then
24378: LD_VAR 0 2
24382: PUSH
24383: LD_INT 1
24385: EQUAL
24386: IFFALSE 24419
// result := Replace ( arr , pos [ 1 ] , value ) else
24388: LD_ADDR_VAR 0 4
24392: PUSH
24393: LD_VAR 0 1
24397: PPUSH
24398: LD_VAR 0 2
24402: PUSH
24403: LD_INT 1
24405: ARRAY
24406: PPUSH
24407: LD_VAR 0 3
24411: PPUSH
24412: CALL_OW 1
24416: ST_TO_ADDR
24417: GO 24681
// begin tmp := arr ;
24419: LD_ADDR_VAR 0 6
24423: PUSH
24424: LD_VAR 0 1
24428: ST_TO_ADDR
// s_arr := [ tmp ] ;
24429: LD_ADDR_VAR 0 7
24433: PUSH
24434: LD_VAR 0 6
24438: PUSH
24439: EMPTY
24440: LIST
24441: ST_TO_ADDR
// for i = 1 to pos - 1 do
24442: LD_ADDR_VAR 0 5
24446: PUSH
24447: DOUBLE
24448: LD_INT 1
24450: DEC
24451: ST_TO_ADDR
24452: LD_VAR 0 2
24456: PUSH
24457: LD_INT 1
24459: MINUS
24460: PUSH
24461: FOR_TO
24462: IFFALSE 24507
// begin tmp := tmp [ pos [ i ] ] ;
24464: LD_ADDR_VAR 0 6
24468: PUSH
24469: LD_VAR 0 6
24473: PUSH
24474: LD_VAR 0 2
24478: PUSH
24479: LD_VAR 0 5
24483: ARRAY
24484: ARRAY
24485: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24486: LD_ADDR_VAR 0 7
24490: PUSH
24491: LD_VAR 0 7
24495: PUSH
24496: LD_VAR 0 6
24500: PUSH
24501: EMPTY
24502: LIST
24503: ADD
24504: ST_TO_ADDR
// end ;
24505: GO 24461
24507: POP
24508: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
24509: LD_ADDR_VAR 0 6
24513: PUSH
24514: LD_VAR 0 6
24518: PPUSH
24519: LD_VAR 0 2
24523: PUSH
24524: LD_VAR 0 2
24528: ARRAY
24529: PPUSH
24530: LD_VAR 0 3
24534: PPUSH
24535: CALL_OW 1
24539: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
24540: LD_ADDR_VAR 0 7
24544: PUSH
24545: LD_VAR 0 7
24549: PPUSH
24550: LD_VAR 0 7
24554: PPUSH
24555: LD_VAR 0 6
24559: PPUSH
24560: CALL_OW 1
24564: ST_TO_ADDR
// for i = s_arr downto 2 do
24565: LD_ADDR_VAR 0 5
24569: PUSH
24570: DOUBLE
24571: LD_VAR 0 7
24575: INC
24576: ST_TO_ADDR
24577: LD_INT 2
24579: PUSH
24580: FOR_DOWNTO
24581: IFFALSE 24665
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
24583: LD_ADDR_VAR 0 6
24587: PUSH
24588: LD_VAR 0 7
24592: PUSH
24593: LD_VAR 0 5
24597: PUSH
24598: LD_INT 1
24600: MINUS
24601: ARRAY
24602: PPUSH
24603: LD_VAR 0 2
24607: PUSH
24608: LD_VAR 0 5
24612: PUSH
24613: LD_INT 1
24615: MINUS
24616: ARRAY
24617: PPUSH
24618: LD_VAR 0 7
24622: PUSH
24623: LD_VAR 0 5
24627: ARRAY
24628: PPUSH
24629: CALL_OW 1
24633: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
24634: LD_ADDR_VAR 0 7
24638: PUSH
24639: LD_VAR 0 7
24643: PPUSH
24644: LD_VAR 0 5
24648: PUSH
24649: LD_INT 1
24651: MINUS
24652: PPUSH
24653: LD_VAR 0 6
24657: PPUSH
24658: CALL_OW 1
24662: ST_TO_ADDR
// end ;
24663: GO 24580
24665: POP
24666: POP
// result := s_arr [ 1 ] ;
24667: LD_ADDR_VAR 0 4
24671: PUSH
24672: LD_VAR 0 7
24676: PUSH
24677: LD_INT 1
24679: ARRAY
24680: ST_TO_ADDR
// end ; end ;
24681: LD_VAR 0 4
24685: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
24686: LD_INT 0
24688: PPUSH
24689: PPUSH
// if not list then
24690: LD_VAR 0 1
24694: NOT
24695: IFFALSE 24699
// exit ;
24697: GO 24790
// i := list [ pos1 ] ;
24699: LD_ADDR_VAR 0 5
24703: PUSH
24704: LD_VAR 0 1
24708: PUSH
24709: LD_VAR 0 2
24713: ARRAY
24714: ST_TO_ADDR
// if not i then
24715: LD_VAR 0 5
24719: NOT
24720: IFFALSE 24724
// exit ;
24722: GO 24790
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
24724: LD_ADDR_VAR 0 1
24728: PUSH
24729: LD_VAR 0 1
24733: PPUSH
24734: LD_VAR 0 2
24738: PPUSH
24739: LD_VAR 0 1
24743: PUSH
24744: LD_VAR 0 3
24748: ARRAY
24749: PPUSH
24750: CALL_OW 1
24754: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
24755: LD_ADDR_VAR 0 1
24759: PUSH
24760: LD_VAR 0 1
24764: PPUSH
24765: LD_VAR 0 3
24769: PPUSH
24770: LD_VAR 0 5
24774: PPUSH
24775: CALL_OW 1
24779: ST_TO_ADDR
// result := list ;
24780: LD_ADDR_VAR 0 4
24784: PUSH
24785: LD_VAR 0 1
24789: ST_TO_ADDR
// end ;
24790: LD_VAR 0 4
24794: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
24795: LD_INT 0
24797: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
24798: LD_ADDR_VAR 0 5
24802: PUSH
24803: LD_VAR 0 1
24807: PPUSH
24808: CALL_OW 250
24812: PPUSH
24813: LD_VAR 0 1
24817: PPUSH
24818: CALL_OW 251
24822: PPUSH
24823: LD_VAR 0 2
24827: PPUSH
24828: LD_VAR 0 3
24832: PPUSH
24833: LD_VAR 0 4
24837: PPUSH
24838: CALL 24848 0 5
24842: ST_TO_ADDR
// end ;
24843: LD_VAR 0 5
24847: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
24848: LD_INT 0
24850: PPUSH
24851: PPUSH
24852: PPUSH
24853: PPUSH
// if not list then
24854: LD_VAR 0 3
24858: NOT
24859: IFFALSE 24863
// exit ;
24861: GO 25251
// result := [ ] ;
24863: LD_ADDR_VAR 0 6
24867: PUSH
24868: EMPTY
24869: ST_TO_ADDR
// for i in list do
24870: LD_ADDR_VAR 0 7
24874: PUSH
24875: LD_VAR 0 3
24879: PUSH
24880: FOR_IN
24881: IFFALSE 25083
// begin tmp := GetDistUnitXY ( i , x , y ) ;
24883: LD_ADDR_VAR 0 9
24887: PUSH
24888: LD_VAR 0 7
24892: PPUSH
24893: LD_VAR 0 1
24897: PPUSH
24898: LD_VAR 0 2
24902: PPUSH
24903: CALL_OW 297
24907: ST_TO_ADDR
// if not result then
24908: LD_VAR 0 6
24912: NOT
24913: IFFALSE 24939
// result := [ [ i , tmp ] ] else
24915: LD_ADDR_VAR 0 6
24919: PUSH
24920: LD_VAR 0 7
24924: PUSH
24925: LD_VAR 0 9
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: EMPTY
24935: LIST
24936: ST_TO_ADDR
24937: GO 25081
// begin if result [ result ] [ 2 ] < tmp then
24939: LD_VAR 0 6
24943: PUSH
24944: LD_VAR 0 6
24948: ARRAY
24949: PUSH
24950: LD_INT 2
24952: ARRAY
24953: PUSH
24954: LD_VAR 0 9
24958: LESS
24959: IFFALSE 25001
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
24961: LD_ADDR_VAR 0 6
24965: PUSH
24966: LD_VAR 0 6
24970: PPUSH
24971: LD_VAR 0 6
24975: PUSH
24976: LD_INT 1
24978: PLUS
24979: PPUSH
24980: LD_VAR 0 7
24984: PUSH
24985: LD_VAR 0 9
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PPUSH
24994: CALL_OW 2
24998: ST_TO_ADDR
24999: GO 25081
// for j = 1 to result do
25001: LD_ADDR_VAR 0 8
25005: PUSH
25006: DOUBLE
25007: LD_INT 1
25009: DEC
25010: ST_TO_ADDR
25011: LD_VAR 0 6
25015: PUSH
25016: FOR_TO
25017: IFFALSE 25079
// begin if tmp < result [ j ] [ 2 ] then
25019: LD_VAR 0 9
25023: PUSH
25024: LD_VAR 0 6
25028: PUSH
25029: LD_VAR 0 8
25033: ARRAY
25034: PUSH
25035: LD_INT 2
25037: ARRAY
25038: LESS
25039: IFFALSE 25077
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25041: LD_ADDR_VAR 0 6
25045: PUSH
25046: LD_VAR 0 6
25050: PPUSH
25051: LD_VAR 0 8
25055: PPUSH
25056: LD_VAR 0 7
25060: PUSH
25061: LD_VAR 0 9
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: PPUSH
25070: CALL_OW 2
25074: ST_TO_ADDR
// break ;
25075: GO 25079
// end ; end ;
25077: GO 25016
25079: POP
25080: POP
// end ; end ;
25081: GO 24880
25083: POP
25084: POP
// if result and not asc then
25085: LD_VAR 0 6
25089: PUSH
25090: LD_VAR 0 4
25094: NOT
25095: AND
25096: IFFALSE 25171
// begin tmp := result ;
25098: LD_ADDR_VAR 0 9
25102: PUSH
25103: LD_VAR 0 6
25107: ST_TO_ADDR
// for i = tmp downto 1 do
25108: LD_ADDR_VAR 0 7
25112: PUSH
25113: DOUBLE
25114: LD_VAR 0 9
25118: INC
25119: ST_TO_ADDR
25120: LD_INT 1
25122: PUSH
25123: FOR_DOWNTO
25124: IFFALSE 25169
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25126: LD_ADDR_VAR 0 6
25130: PUSH
25131: LD_VAR 0 6
25135: PPUSH
25136: LD_VAR 0 9
25140: PUSH
25141: LD_VAR 0 7
25145: MINUS
25146: PUSH
25147: LD_INT 1
25149: PLUS
25150: PPUSH
25151: LD_VAR 0 9
25155: PUSH
25156: LD_VAR 0 7
25160: ARRAY
25161: PPUSH
25162: CALL_OW 1
25166: ST_TO_ADDR
25167: GO 25123
25169: POP
25170: POP
// end ; tmp := [ ] ;
25171: LD_ADDR_VAR 0 9
25175: PUSH
25176: EMPTY
25177: ST_TO_ADDR
// if mode then
25178: LD_VAR 0 5
25182: IFFALSE 25251
// begin for i = 1 to result do
25184: LD_ADDR_VAR 0 7
25188: PUSH
25189: DOUBLE
25190: LD_INT 1
25192: DEC
25193: ST_TO_ADDR
25194: LD_VAR 0 6
25198: PUSH
25199: FOR_TO
25200: IFFALSE 25239
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25202: LD_ADDR_VAR 0 9
25206: PUSH
25207: LD_VAR 0 9
25211: PPUSH
25212: LD_VAR 0 7
25216: PPUSH
25217: LD_VAR 0 6
25221: PUSH
25222: LD_VAR 0 7
25226: ARRAY
25227: PUSH
25228: LD_INT 1
25230: ARRAY
25231: PPUSH
25232: CALL_OW 1
25236: ST_TO_ADDR
25237: GO 25199
25239: POP
25240: POP
// result := tmp ;
25241: LD_ADDR_VAR 0 6
25245: PUSH
25246: LD_VAR 0 9
25250: ST_TO_ADDR
// end ; end ;
25251: LD_VAR 0 6
25255: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25256: LD_INT 0
25258: PPUSH
25259: PPUSH
25260: PPUSH
25261: PPUSH
25262: PPUSH
25263: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25264: LD_ADDR_VAR 0 5
25268: PUSH
25269: LD_INT 0
25271: PUSH
25272: LD_INT 0
25274: PUSH
25275: LD_INT 0
25277: PUSH
25278: EMPTY
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: ST_TO_ADDR
// if not x or not y then
25286: LD_VAR 0 2
25290: NOT
25291: PUSH
25292: LD_VAR 0 3
25296: NOT
25297: OR
25298: IFFALSE 25302
// exit ;
25300: GO 26954
// if not range then
25302: LD_VAR 0 4
25306: NOT
25307: IFFALSE 25317
// range := 10 ;
25309: LD_ADDR_VAR 0 4
25313: PUSH
25314: LD_INT 10
25316: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25317: LD_ADDR_VAR 0 8
25321: PUSH
25322: LD_INT 81
25324: PUSH
25325: LD_VAR 0 1
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 92
25336: PUSH
25337: LD_VAR 0 2
25341: PUSH
25342: LD_VAR 0 3
25346: PUSH
25347: LD_VAR 0 4
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 3
25360: PUSH
25361: LD_INT 21
25363: PUSH
25364: LD_INT 3
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: LIST
25379: PPUSH
25380: CALL_OW 69
25384: ST_TO_ADDR
// if not tmp then
25385: LD_VAR 0 8
25389: NOT
25390: IFFALSE 25394
// exit ;
25392: GO 26954
// for i in tmp do
25394: LD_ADDR_VAR 0 6
25398: PUSH
25399: LD_VAR 0 8
25403: PUSH
25404: FOR_IN
25405: IFFALSE 26929
// begin points := [ 0 , 0 , 0 ] ;
25407: LD_ADDR_VAR 0 9
25411: PUSH
25412: LD_INT 0
25414: PUSH
25415: LD_INT 0
25417: PUSH
25418: LD_INT 0
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: LIST
25425: ST_TO_ADDR
// bpoints := 1 ;
25426: LD_ADDR_VAR 0 10
25430: PUSH
25431: LD_INT 1
25433: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25434: LD_VAR 0 6
25438: PPUSH
25439: CALL_OW 247
25443: PUSH
25444: LD_INT 1
25446: DOUBLE
25447: EQUAL
25448: IFTRUE 25452
25450: GO 26030
25452: POP
// begin if GetClass ( i ) = 1 then
25453: LD_VAR 0 6
25457: PPUSH
25458: CALL_OW 257
25462: PUSH
25463: LD_INT 1
25465: EQUAL
25466: IFFALSE 25487
// points := [ 10 , 5 , 3 ] ;
25468: LD_ADDR_VAR 0 9
25472: PUSH
25473: LD_INT 10
25475: PUSH
25476: LD_INT 5
25478: PUSH
25479: LD_INT 3
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: LIST
25486: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25487: LD_VAR 0 6
25491: PPUSH
25492: CALL_OW 257
25496: PUSH
25497: LD_INT 2
25499: PUSH
25500: LD_INT 3
25502: PUSH
25503: LD_INT 4
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: LIST
25510: IN
25511: IFFALSE 25532
// points := [ 3 , 2 , 1 ] ;
25513: LD_ADDR_VAR 0 9
25517: PUSH
25518: LD_INT 3
25520: PUSH
25521: LD_INT 2
25523: PUSH
25524: LD_INT 1
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: LIST
25531: ST_TO_ADDR
// if GetClass ( i ) = 5 then
25532: LD_VAR 0 6
25536: PPUSH
25537: CALL_OW 257
25541: PUSH
25542: LD_INT 5
25544: EQUAL
25545: IFFALSE 25566
// points := [ 130 , 5 , 2 ] ;
25547: LD_ADDR_VAR 0 9
25551: PUSH
25552: LD_INT 130
25554: PUSH
25555: LD_INT 5
25557: PUSH
25558: LD_INT 2
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: LIST
25565: ST_TO_ADDR
// if GetClass ( i ) = 8 then
25566: LD_VAR 0 6
25570: PPUSH
25571: CALL_OW 257
25575: PUSH
25576: LD_INT 8
25578: EQUAL
25579: IFFALSE 25600
// points := [ 35 , 35 , 30 ] ;
25581: LD_ADDR_VAR 0 9
25585: PUSH
25586: LD_INT 35
25588: PUSH
25589: LD_INT 35
25591: PUSH
25592: LD_INT 30
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: LIST
25599: ST_TO_ADDR
// if GetClass ( i ) = 9 then
25600: LD_VAR 0 6
25604: PPUSH
25605: CALL_OW 257
25609: PUSH
25610: LD_INT 9
25612: EQUAL
25613: IFFALSE 25634
// points := [ 20 , 55 , 40 ] ;
25615: LD_ADDR_VAR 0 9
25619: PUSH
25620: LD_INT 20
25622: PUSH
25623: LD_INT 55
25625: PUSH
25626: LD_INT 40
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: LIST
25633: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
25634: LD_VAR 0 6
25638: PPUSH
25639: CALL_OW 257
25643: PUSH
25644: LD_INT 12
25646: PUSH
25647: LD_INT 16
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: IN
25654: IFFALSE 25675
// points := [ 5 , 3 , 2 ] ;
25656: LD_ADDR_VAR 0 9
25660: PUSH
25661: LD_INT 5
25663: PUSH
25664: LD_INT 3
25666: PUSH
25667: LD_INT 2
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: LIST
25674: ST_TO_ADDR
// if GetClass ( i ) = 17 then
25675: LD_VAR 0 6
25679: PPUSH
25680: CALL_OW 257
25684: PUSH
25685: LD_INT 17
25687: EQUAL
25688: IFFALSE 25709
// points := [ 100 , 50 , 75 ] ;
25690: LD_ADDR_VAR 0 9
25694: PUSH
25695: LD_INT 100
25697: PUSH
25698: LD_INT 50
25700: PUSH
25701: LD_INT 75
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: LIST
25708: ST_TO_ADDR
// if GetClass ( i ) = 15 then
25709: LD_VAR 0 6
25713: PPUSH
25714: CALL_OW 257
25718: PUSH
25719: LD_INT 15
25721: EQUAL
25722: IFFALSE 25743
// points := [ 10 , 5 , 3 ] ;
25724: LD_ADDR_VAR 0 9
25728: PUSH
25729: LD_INT 10
25731: PUSH
25732: LD_INT 5
25734: PUSH
25735: LD_INT 3
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: LIST
25742: ST_TO_ADDR
// if GetClass ( i ) = 14 then
25743: LD_VAR 0 6
25747: PPUSH
25748: CALL_OW 257
25752: PUSH
25753: LD_INT 14
25755: EQUAL
25756: IFFALSE 25777
// points := [ 10 , 0 , 0 ] ;
25758: LD_ADDR_VAR 0 9
25762: PUSH
25763: LD_INT 10
25765: PUSH
25766: LD_INT 0
25768: PUSH
25769: LD_INT 0
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: LIST
25776: ST_TO_ADDR
// if GetClass ( i ) = 11 then
25777: LD_VAR 0 6
25781: PPUSH
25782: CALL_OW 257
25786: PUSH
25787: LD_INT 11
25789: EQUAL
25790: IFFALSE 25811
// points := [ 30 , 10 , 5 ] ;
25792: LD_ADDR_VAR 0 9
25796: PUSH
25797: LD_INT 30
25799: PUSH
25800: LD_INT 10
25802: PUSH
25803: LD_INT 5
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: LIST
25810: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
25811: LD_VAR 0 1
25815: PPUSH
25816: LD_INT 5
25818: PPUSH
25819: CALL_OW 321
25823: PUSH
25824: LD_INT 2
25826: EQUAL
25827: IFFALSE 25844
// bpoints := bpoints * 1.8 ;
25829: LD_ADDR_VAR 0 10
25833: PUSH
25834: LD_VAR 0 10
25838: PUSH
25839: LD_REAL  1.80000000000000E+0000
25842: MUL
25843: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
25844: LD_VAR 0 6
25848: PPUSH
25849: CALL_OW 257
25853: PUSH
25854: LD_INT 1
25856: PUSH
25857: LD_INT 2
25859: PUSH
25860: LD_INT 3
25862: PUSH
25863: LD_INT 4
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: IN
25872: PUSH
25873: LD_VAR 0 1
25877: PPUSH
25878: LD_INT 51
25880: PPUSH
25881: CALL_OW 321
25885: PUSH
25886: LD_INT 2
25888: EQUAL
25889: AND
25890: IFFALSE 25907
// bpoints := bpoints * 1.2 ;
25892: LD_ADDR_VAR 0 10
25896: PUSH
25897: LD_VAR 0 10
25901: PUSH
25902: LD_REAL  1.20000000000000E+0000
25905: MUL
25906: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
25907: LD_VAR 0 6
25911: PPUSH
25912: CALL_OW 257
25916: PUSH
25917: LD_INT 5
25919: PUSH
25920: LD_INT 7
25922: PUSH
25923: LD_INT 9
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: LIST
25930: IN
25931: PUSH
25932: LD_VAR 0 1
25936: PPUSH
25937: LD_INT 52
25939: PPUSH
25940: CALL_OW 321
25944: PUSH
25945: LD_INT 2
25947: EQUAL
25948: AND
25949: IFFALSE 25966
// bpoints := bpoints * 1.5 ;
25951: LD_ADDR_VAR 0 10
25955: PUSH
25956: LD_VAR 0 10
25960: PUSH
25961: LD_REAL  1.50000000000000E+0000
25964: MUL
25965: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
25966: LD_VAR 0 1
25970: PPUSH
25971: LD_INT 66
25973: PPUSH
25974: CALL_OW 321
25978: PUSH
25979: LD_INT 2
25981: EQUAL
25982: IFFALSE 25999
// bpoints := bpoints * 1.1 ;
25984: LD_ADDR_VAR 0 10
25988: PUSH
25989: LD_VAR 0 10
25993: PUSH
25994: LD_REAL  1.10000000000000E+0000
25997: MUL
25998: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
25999: LD_ADDR_VAR 0 10
26003: PUSH
26004: LD_VAR 0 10
26008: PUSH
26009: LD_VAR 0 6
26013: PPUSH
26014: LD_INT 1
26016: PPUSH
26017: CALL_OW 259
26021: PUSH
26022: LD_REAL  1.15000000000000E+0000
26025: MUL
26026: MUL
26027: ST_TO_ADDR
// end ; unit_vehicle :
26028: GO 26858
26030: LD_INT 2
26032: DOUBLE
26033: EQUAL
26034: IFTRUE 26038
26036: GO 26846
26038: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
26039: LD_VAR 0 6
26043: PPUSH
26044: CALL_OW 264
26048: PUSH
26049: LD_INT 2
26051: PUSH
26052: LD_INT 42
26054: PUSH
26055: LD_INT 24
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: LIST
26062: IN
26063: IFFALSE 26084
// points := [ 25 , 5 , 3 ] ;
26065: LD_ADDR_VAR 0 9
26069: PUSH
26070: LD_INT 25
26072: PUSH
26073: LD_INT 5
26075: PUSH
26076: LD_INT 3
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: LIST
26083: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26084: LD_VAR 0 6
26088: PPUSH
26089: CALL_OW 264
26093: PUSH
26094: LD_INT 4
26096: PUSH
26097: LD_INT 43
26099: PUSH
26100: LD_INT 25
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: LIST
26107: IN
26108: IFFALSE 26129
// points := [ 40 , 15 , 5 ] ;
26110: LD_ADDR_VAR 0 9
26114: PUSH
26115: LD_INT 40
26117: PUSH
26118: LD_INT 15
26120: PUSH
26121: LD_INT 5
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: LIST
26128: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26129: LD_VAR 0 6
26133: PPUSH
26134: CALL_OW 264
26138: PUSH
26139: LD_INT 3
26141: PUSH
26142: LD_INT 23
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: IN
26149: IFFALSE 26170
// points := [ 7 , 25 , 8 ] ;
26151: LD_ADDR_VAR 0 9
26155: PUSH
26156: LD_INT 7
26158: PUSH
26159: LD_INT 25
26161: PUSH
26162: LD_INT 8
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: LIST
26169: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26170: LD_VAR 0 6
26174: PPUSH
26175: CALL_OW 264
26179: PUSH
26180: LD_INT 5
26182: PUSH
26183: LD_INT 27
26185: PUSH
26186: LD_INT 44
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: LIST
26193: IN
26194: IFFALSE 26215
// points := [ 14 , 50 , 16 ] ;
26196: LD_ADDR_VAR 0 9
26200: PUSH
26201: LD_INT 14
26203: PUSH
26204: LD_INT 50
26206: PUSH
26207: LD_INT 16
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: LIST
26214: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26215: LD_VAR 0 6
26219: PPUSH
26220: CALL_OW 264
26224: PUSH
26225: LD_INT 6
26227: PUSH
26228: LD_INT 46
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: IN
26235: IFFALSE 26256
// points := [ 32 , 120 , 70 ] ;
26237: LD_ADDR_VAR 0 9
26241: PUSH
26242: LD_INT 32
26244: PUSH
26245: LD_INT 120
26247: PUSH
26248: LD_INT 70
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: LIST
26255: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
26256: LD_VAR 0 6
26260: PPUSH
26261: CALL_OW 264
26265: PUSH
26266: LD_INT 7
26268: PUSH
26269: LD_INT 28
26271: PUSH
26272: LD_INT 45
26274: PUSH
26275: LD_EXP 75
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: IN
26286: IFFALSE 26307
// points := [ 35 , 20 , 45 ] ;
26288: LD_ADDR_VAR 0 9
26292: PUSH
26293: LD_INT 35
26295: PUSH
26296: LD_INT 20
26298: PUSH
26299: LD_INT 45
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: LIST
26306: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26307: LD_VAR 0 6
26311: PPUSH
26312: CALL_OW 264
26316: PUSH
26317: LD_INT 47
26319: PUSH
26320: EMPTY
26321: LIST
26322: IN
26323: IFFALSE 26344
// points := [ 67 , 45 , 75 ] ;
26325: LD_ADDR_VAR 0 9
26329: PUSH
26330: LD_INT 67
26332: PUSH
26333: LD_INT 45
26335: PUSH
26336: LD_INT 75
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: LIST
26343: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26344: LD_VAR 0 6
26348: PPUSH
26349: CALL_OW 264
26353: PUSH
26354: LD_INT 26
26356: PUSH
26357: EMPTY
26358: LIST
26359: IN
26360: IFFALSE 26381
// points := [ 120 , 30 , 80 ] ;
26362: LD_ADDR_VAR 0 9
26366: PUSH
26367: LD_INT 120
26369: PUSH
26370: LD_INT 30
26372: PUSH
26373: LD_INT 80
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: LIST
26380: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26381: LD_VAR 0 6
26385: PPUSH
26386: CALL_OW 264
26390: PUSH
26391: LD_INT 22
26393: PUSH
26394: EMPTY
26395: LIST
26396: IN
26397: IFFALSE 26418
// points := [ 40 , 1 , 1 ] ;
26399: LD_ADDR_VAR 0 9
26403: PUSH
26404: LD_INT 40
26406: PUSH
26407: LD_INT 1
26409: PUSH
26410: LD_INT 1
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: LIST
26417: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26418: LD_VAR 0 6
26422: PPUSH
26423: CALL_OW 264
26427: PUSH
26428: LD_INT 29
26430: PUSH
26431: EMPTY
26432: LIST
26433: IN
26434: IFFALSE 26455
// points := [ 70 , 200 , 400 ] ;
26436: LD_ADDR_VAR 0 9
26440: PUSH
26441: LD_INT 70
26443: PUSH
26444: LD_INT 200
26446: PUSH
26447: LD_INT 400
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: LIST
26454: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26455: LD_VAR 0 6
26459: PPUSH
26460: CALL_OW 264
26464: PUSH
26465: LD_INT 14
26467: PUSH
26468: LD_INT 53
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: IN
26475: IFFALSE 26496
// points := [ 40 , 10 , 20 ] ;
26477: LD_ADDR_VAR 0 9
26481: PUSH
26482: LD_INT 40
26484: PUSH
26485: LD_INT 10
26487: PUSH
26488: LD_INT 20
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: LIST
26495: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26496: LD_VAR 0 6
26500: PPUSH
26501: CALL_OW 264
26505: PUSH
26506: LD_INT 9
26508: PUSH
26509: EMPTY
26510: LIST
26511: IN
26512: IFFALSE 26533
// points := [ 5 , 70 , 20 ] ;
26514: LD_ADDR_VAR 0 9
26518: PUSH
26519: LD_INT 5
26521: PUSH
26522: LD_INT 70
26524: PUSH
26525: LD_INT 20
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: LIST
26532: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
26533: LD_VAR 0 6
26537: PPUSH
26538: CALL_OW 264
26542: PUSH
26543: LD_INT 10
26545: PUSH
26546: EMPTY
26547: LIST
26548: IN
26549: IFFALSE 26570
// points := [ 35 , 110 , 70 ] ;
26551: LD_ADDR_VAR 0 9
26555: PUSH
26556: LD_INT 35
26558: PUSH
26559: LD_INT 110
26561: PUSH
26562: LD_INT 70
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: LIST
26569: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
26570: LD_VAR 0 6
26574: PPUSH
26575: CALL_OW 265
26579: PUSH
26580: LD_INT 25
26582: EQUAL
26583: IFFALSE 26604
// points := [ 80 , 65 , 100 ] ;
26585: LD_ADDR_VAR 0 9
26589: PUSH
26590: LD_INT 80
26592: PUSH
26593: LD_INT 65
26595: PUSH
26596: LD_INT 100
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: LIST
26603: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
26604: LD_VAR 0 6
26608: PPUSH
26609: CALL_OW 263
26613: PUSH
26614: LD_INT 1
26616: EQUAL
26617: IFFALSE 26652
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
26619: LD_ADDR_VAR 0 10
26623: PUSH
26624: LD_VAR 0 10
26628: PUSH
26629: LD_VAR 0 6
26633: PPUSH
26634: CALL_OW 311
26638: PPUSH
26639: LD_INT 3
26641: PPUSH
26642: CALL_OW 259
26646: PUSH
26647: LD_INT 4
26649: MUL
26650: MUL
26651: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
26652: LD_VAR 0 6
26656: PPUSH
26657: CALL_OW 263
26661: PUSH
26662: LD_INT 2
26664: EQUAL
26665: IFFALSE 26716
// begin j := IsControledBy ( i ) ;
26667: LD_ADDR_VAR 0 7
26671: PUSH
26672: LD_VAR 0 6
26676: PPUSH
26677: CALL_OW 312
26681: ST_TO_ADDR
// if j then
26682: LD_VAR 0 7
26686: IFFALSE 26716
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
26688: LD_ADDR_VAR 0 10
26692: PUSH
26693: LD_VAR 0 10
26697: PUSH
26698: LD_VAR 0 7
26702: PPUSH
26703: LD_INT 3
26705: PPUSH
26706: CALL_OW 259
26710: PUSH
26711: LD_INT 3
26713: MUL
26714: MUL
26715: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
26716: LD_VAR 0 6
26720: PPUSH
26721: CALL_OW 264
26725: PUSH
26726: LD_INT 5
26728: PUSH
26729: LD_INT 6
26731: PUSH
26732: LD_INT 46
26734: PUSH
26735: LD_INT 44
26737: PUSH
26738: LD_INT 47
26740: PUSH
26741: LD_INT 45
26743: PUSH
26744: LD_INT 28
26746: PUSH
26747: LD_INT 7
26749: PUSH
26750: LD_INT 27
26752: PUSH
26753: LD_INT 29
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: IN
26768: PUSH
26769: LD_VAR 0 1
26773: PPUSH
26774: LD_INT 52
26776: PPUSH
26777: CALL_OW 321
26781: PUSH
26782: LD_INT 2
26784: EQUAL
26785: AND
26786: IFFALSE 26803
// bpoints := bpoints * 1.2 ;
26788: LD_ADDR_VAR 0 10
26792: PUSH
26793: LD_VAR 0 10
26797: PUSH
26798: LD_REAL  1.20000000000000E+0000
26801: MUL
26802: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
26803: LD_VAR 0 6
26807: PPUSH
26808: CALL_OW 264
26812: PUSH
26813: LD_INT 6
26815: PUSH
26816: LD_INT 46
26818: PUSH
26819: LD_INT 47
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: LIST
26826: IN
26827: IFFALSE 26844
// bpoints := bpoints * 1.2 ;
26829: LD_ADDR_VAR 0 10
26833: PUSH
26834: LD_VAR 0 10
26838: PUSH
26839: LD_REAL  1.20000000000000E+0000
26842: MUL
26843: ST_TO_ADDR
// end ; unit_building :
26844: GO 26858
26846: LD_INT 3
26848: DOUBLE
26849: EQUAL
26850: IFTRUE 26854
26852: GO 26857
26854: POP
// ; end ;
26855: GO 26858
26857: POP
// for j = 1 to 3 do
26858: LD_ADDR_VAR 0 7
26862: PUSH
26863: DOUBLE
26864: LD_INT 1
26866: DEC
26867: ST_TO_ADDR
26868: LD_INT 3
26870: PUSH
26871: FOR_TO
26872: IFFALSE 26925
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
26874: LD_ADDR_VAR 0 5
26878: PUSH
26879: LD_VAR 0 5
26883: PPUSH
26884: LD_VAR 0 7
26888: PPUSH
26889: LD_VAR 0 5
26893: PUSH
26894: LD_VAR 0 7
26898: ARRAY
26899: PUSH
26900: LD_VAR 0 9
26904: PUSH
26905: LD_VAR 0 7
26909: ARRAY
26910: PUSH
26911: LD_VAR 0 10
26915: MUL
26916: PLUS
26917: PPUSH
26918: CALL_OW 1
26922: ST_TO_ADDR
26923: GO 26871
26925: POP
26926: POP
// end ;
26927: GO 25404
26929: POP
26930: POP
// result := Replace ( result , 4 , tmp ) ;
26931: LD_ADDR_VAR 0 5
26935: PUSH
26936: LD_VAR 0 5
26940: PPUSH
26941: LD_INT 4
26943: PPUSH
26944: LD_VAR 0 8
26948: PPUSH
26949: CALL_OW 1
26953: ST_TO_ADDR
// end ;
26954: LD_VAR 0 5
26958: RET
// export function DangerAtRange ( unit , range ) ; begin
26959: LD_INT 0
26961: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
26962: LD_ADDR_VAR 0 3
26966: PUSH
26967: LD_VAR 0 1
26971: PPUSH
26972: CALL_OW 255
26976: PPUSH
26977: LD_VAR 0 1
26981: PPUSH
26982: CALL_OW 250
26986: PPUSH
26987: LD_VAR 0 1
26991: PPUSH
26992: CALL_OW 251
26996: PPUSH
26997: LD_VAR 0 2
27001: PPUSH
27002: CALL 25256 0 4
27006: ST_TO_ADDR
// end ;
27007: LD_VAR 0 3
27011: RET
// export function DangerInArea ( side , area ) ; begin
27012: LD_INT 0
27014: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27015: LD_ADDR_VAR 0 3
27019: PUSH
27020: LD_VAR 0 2
27024: PPUSH
27025: LD_INT 81
27027: PUSH
27028: LD_VAR 0 1
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PPUSH
27037: CALL_OW 70
27041: ST_TO_ADDR
// end ;
27042: LD_VAR 0 3
27046: RET
// export function IsExtension ( b ) ; begin
27047: LD_INT 0
27049: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
27050: LD_ADDR_VAR 0 2
27054: PUSH
27055: LD_VAR 0 1
27059: PUSH
27060: LD_INT 23
27062: PUSH
27063: LD_INT 20
27065: PUSH
27066: LD_INT 22
27068: PUSH
27069: LD_INT 17
27071: PUSH
27072: LD_INT 24
27074: PUSH
27075: LD_INT 21
27077: PUSH
27078: LD_INT 19
27080: PUSH
27081: LD_INT 16
27083: PUSH
27084: LD_INT 25
27086: PUSH
27087: LD_INT 18
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: IN
27102: ST_TO_ADDR
// end ;
27103: LD_VAR 0 2
27107: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
27108: LD_INT 0
27110: PPUSH
27111: PPUSH
27112: PPUSH
// result := [ ] ;
27113: LD_ADDR_VAR 0 4
27117: PUSH
27118: EMPTY
27119: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27120: LD_ADDR_VAR 0 5
27124: PUSH
27125: LD_VAR 0 2
27129: PPUSH
27130: LD_INT 21
27132: PUSH
27133: LD_INT 3
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PPUSH
27140: CALL_OW 70
27144: ST_TO_ADDR
// if not tmp then
27145: LD_VAR 0 5
27149: NOT
27150: IFFALSE 27154
// exit ;
27152: GO 27218
// if checkLink then
27154: LD_VAR 0 3
27158: IFFALSE 27208
// begin for i in tmp do
27160: LD_ADDR_VAR 0 6
27164: PUSH
27165: LD_VAR 0 5
27169: PUSH
27170: FOR_IN
27171: IFFALSE 27206
// if GetBase ( i ) <> base then
27173: LD_VAR 0 6
27177: PPUSH
27178: CALL_OW 274
27182: PUSH
27183: LD_VAR 0 1
27187: NONEQUAL
27188: IFFALSE 27204
// ComLinkToBase ( base , i ) ;
27190: LD_VAR 0 1
27194: PPUSH
27195: LD_VAR 0 6
27199: PPUSH
27200: CALL_OW 169
27204: GO 27170
27206: POP
27207: POP
// end ; result := tmp ;
27208: LD_ADDR_VAR 0 4
27212: PUSH
27213: LD_VAR 0 5
27217: ST_TO_ADDR
// end ;
27218: LD_VAR 0 4
27222: RET
// export function ComComplete ( units , b ) ; var i ; begin
27223: LD_INT 0
27225: PPUSH
27226: PPUSH
// if not units then
27227: LD_VAR 0 1
27231: NOT
27232: IFFALSE 27236
// exit ;
27234: GO 27326
// for i in units do
27236: LD_ADDR_VAR 0 4
27240: PUSH
27241: LD_VAR 0 1
27245: PUSH
27246: FOR_IN
27247: IFFALSE 27324
// if BuildingStatus ( b ) = bs_build then
27249: LD_VAR 0 2
27253: PPUSH
27254: CALL_OW 461
27258: PUSH
27259: LD_INT 1
27261: EQUAL
27262: IFFALSE 27322
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27264: LD_VAR 0 4
27268: PPUSH
27269: LD_STRING h
27271: PUSH
27272: LD_VAR 0 2
27276: PPUSH
27277: CALL_OW 250
27281: PUSH
27282: LD_VAR 0 2
27286: PPUSH
27287: CALL_OW 251
27291: PUSH
27292: LD_VAR 0 2
27296: PUSH
27297: LD_INT 0
27299: PUSH
27300: LD_INT 0
27302: PUSH
27303: LD_INT 0
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: PUSH
27315: EMPTY
27316: LIST
27317: PPUSH
27318: CALL_OW 446
27322: GO 27246
27324: POP
27325: POP
// end ;
27326: LD_VAR 0 3
27330: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27331: LD_INT 0
27333: PPUSH
27334: PPUSH
27335: PPUSH
27336: PPUSH
27337: PPUSH
27338: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
27339: LD_VAR 0 1
27343: NOT
27344: PUSH
27345: LD_VAR 0 1
27349: PPUSH
27350: CALL_OW 263
27354: PUSH
27355: LD_INT 2
27357: NONEQUAL
27358: OR
27359: IFFALSE 27363
// exit ;
27361: GO 27679
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27363: LD_ADDR_VAR 0 6
27367: PUSH
27368: LD_INT 22
27370: PUSH
27371: LD_VAR 0 1
27375: PPUSH
27376: CALL_OW 255
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 2
27387: PUSH
27388: LD_INT 30
27390: PUSH
27391: LD_INT 36
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 34
27400: PUSH
27401: LD_INT 31
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: LIST
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PPUSH
27417: CALL_OW 69
27421: ST_TO_ADDR
// if not tmp then
27422: LD_VAR 0 6
27426: NOT
27427: IFFALSE 27431
// exit ;
27429: GO 27679
// result := [ ] ;
27431: LD_ADDR_VAR 0 2
27435: PUSH
27436: EMPTY
27437: ST_TO_ADDR
// for i in tmp do
27438: LD_ADDR_VAR 0 3
27442: PUSH
27443: LD_VAR 0 6
27447: PUSH
27448: FOR_IN
27449: IFFALSE 27520
// begin t := UnitsInside ( i ) ;
27451: LD_ADDR_VAR 0 4
27455: PUSH
27456: LD_VAR 0 3
27460: PPUSH
27461: CALL_OW 313
27465: ST_TO_ADDR
// if t then
27466: LD_VAR 0 4
27470: IFFALSE 27518
// for j in t do
27472: LD_ADDR_VAR 0 7
27476: PUSH
27477: LD_VAR 0 4
27481: PUSH
27482: FOR_IN
27483: IFFALSE 27516
// result := Replace ( result , result + 1 , j ) ;
27485: LD_ADDR_VAR 0 2
27489: PUSH
27490: LD_VAR 0 2
27494: PPUSH
27495: LD_VAR 0 2
27499: PUSH
27500: LD_INT 1
27502: PLUS
27503: PPUSH
27504: LD_VAR 0 7
27508: PPUSH
27509: CALL_OW 1
27513: ST_TO_ADDR
27514: GO 27482
27516: POP
27517: POP
// end ;
27518: GO 27448
27520: POP
27521: POP
// if not result then
27522: LD_VAR 0 2
27526: NOT
27527: IFFALSE 27531
// exit ;
27529: GO 27679
// mech := result [ 1 ] ;
27531: LD_ADDR_VAR 0 5
27535: PUSH
27536: LD_VAR 0 2
27540: PUSH
27541: LD_INT 1
27543: ARRAY
27544: ST_TO_ADDR
// if result > 1 then
27545: LD_VAR 0 2
27549: PUSH
27550: LD_INT 1
27552: GREATER
27553: IFFALSE 27665
// begin for i = 2 to result do
27555: LD_ADDR_VAR 0 3
27559: PUSH
27560: DOUBLE
27561: LD_INT 2
27563: DEC
27564: ST_TO_ADDR
27565: LD_VAR 0 2
27569: PUSH
27570: FOR_TO
27571: IFFALSE 27663
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
27573: LD_ADDR_VAR 0 4
27577: PUSH
27578: LD_VAR 0 2
27582: PUSH
27583: LD_VAR 0 3
27587: ARRAY
27588: PPUSH
27589: LD_INT 3
27591: PPUSH
27592: CALL_OW 259
27596: PUSH
27597: LD_VAR 0 2
27601: PUSH
27602: LD_VAR 0 3
27606: ARRAY
27607: PPUSH
27608: CALL_OW 432
27612: MINUS
27613: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
27614: LD_VAR 0 4
27618: PUSH
27619: LD_VAR 0 5
27623: PPUSH
27624: LD_INT 3
27626: PPUSH
27627: CALL_OW 259
27631: PUSH
27632: LD_VAR 0 5
27636: PPUSH
27637: CALL_OW 432
27641: MINUS
27642: GREATEREQUAL
27643: IFFALSE 27661
// mech := result [ i ] ;
27645: LD_ADDR_VAR 0 5
27649: PUSH
27650: LD_VAR 0 2
27654: PUSH
27655: LD_VAR 0 3
27659: ARRAY
27660: ST_TO_ADDR
// end ;
27661: GO 27570
27663: POP
27664: POP
// end ; ComLinkTo ( vehicle , mech ) ;
27665: LD_VAR 0 1
27669: PPUSH
27670: LD_VAR 0 5
27674: PPUSH
27675: CALL_OW 135
// end ;
27679: LD_VAR 0 2
27683: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
27684: LD_INT 0
27686: PPUSH
27687: PPUSH
27688: PPUSH
27689: PPUSH
27690: PPUSH
27691: PPUSH
27692: PPUSH
27693: PPUSH
27694: PPUSH
27695: PPUSH
27696: PPUSH
27697: PPUSH
27698: PPUSH
// result := [ ] ;
27699: LD_ADDR_VAR 0 7
27703: PUSH
27704: EMPTY
27705: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
27706: LD_VAR 0 1
27710: PPUSH
27711: CALL_OW 266
27715: PUSH
27716: LD_INT 0
27718: PUSH
27719: LD_INT 1
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: IN
27726: NOT
27727: IFFALSE 27731
// exit ;
27729: GO 29365
// if name then
27731: LD_VAR 0 3
27735: IFFALSE 27751
// SetBName ( base_dep , name ) ;
27737: LD_VAR 0 1
27741: PPUSH
27742: LD_VAR 0 3
27746: PPUSH
27747: CALL_OW 500
// base := GetBase ( base_dep ) ;
27751: LD_ADDR_VAR 0 15
27755: PUSH
27756: LD_VAR 0 1
27760: PPUSH
27761: CALL_OW 274
27765: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
27766: LD_ADDR_VAR 0 16
27770: PUSH
27771: LD_VAR 0 1
27775: PPUSH
27776: CALL_OW 255
27780: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
27781: LD_ADDR_VAR 0 17
27785: PUSH
27786: LD_VAR 0 1
27790: PPUSH
27791: CALL_OW 248
27795: ST_TO_ADDR
// if sources then
27796: LD_VAR 0 5
27800: IFFALSE 27847
// for i = 1 to 3 do
27802: LD_ADDR_VAR 0 8
27806: PUSH
27807: DOUBLE
27808: LD_INT 1
27810: DEC
27811: ST_TO_ADDR
27812: LD_INT 3
27814: PUSH
27815: FOR_TO
27816: IFFALSE 27845
// AddResourceType ( base , i , sources [ i ] ) ;
27818: LD_VAR 0 15
27822: PPUSH
27823: LD_VAR 0 8
27827: PPUSH
27828: LD_VAR 0 5
27832: PUSH
27833: LD_VAR 0 8
27837: ARRAY
27838: PPUSH
27839: CALL_OW 276
27843: GO 27815
27845: POP
27846: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
27847: LD_ADDR_VAR 0 18
27851: PUSH
27852: LD_VAR 0 15
27856: PPUSH
27857: LD_VAR 0 2
27861: PPUSH
27862: LD_INT 1
27864: PPUSH
27865: CALL 27108 0 3
27869: ST_TO_ADDR
// InitHc ;
27870: CALL_OW 19
// InitUc ;
27874: CALL_OW 18
// uc_side := side ;
27878: LD_ADDR_OWVAR 20
27882: PUSH
27883: LD_VAR 0 16
27887: ST_TO_ADDR
// uc_nation := nation ;
27888: LD_ADDR_OWVAR 21
27892: PUSH
27893: LD_VAR 0 17
27897: ST_TO_ADDR
// if buildings then
27898: LD_VAR 0 18
27902: IFFALSE 29224
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
27904: LD_ADDR_VAR 0 19
27908: PUSH
27909: LD_VAR 0 18
27913: PPUSH
27914: LD_INT 2
27916: PUSH
27917: LD_INT 30
27919: PUSH
27920: LD_INT 29
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 30
27929: PUSH
27930: LD_INT 30
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: LIST
27941: PPUSH
27942: CALL_OW 72
27946: ST_TO_ADDR
// if tmp then
27947: LD_VAR 0 19
27951: IFFALSE 27999
// for i in tmp do
27953: LD_ADDR_VAR 0 8
27957: PUSH
27958: LD_VAR 0 19
27962: PUSH
27963: FOR_IN
27964: IFFALSE 27997
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
27966: LD_VAR 0 8
27970: PPUSH
27971: CALL_OW 250
27975: PPUSH
27976: LD_VAR 0 8
27980: PPUSH
27981: CALL_OW 251
27985: PPUSH
27986: LD_VAR 0 16
27990: PPUSH
27991: CALL_OW 441
27995: GO 27963
27997: POP
27998: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
27999: LD_VAR 0 18
28003: PPUSH
28004: LD_INT 2
28006: PUSH
28007: LD_INT 30
28009: PUSH
28010: LD_INT 32
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_INT 30
28019: PUSH
28020: LD_INT 33
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: LIST
28031: PPUSH
28032: CALL_OW 72
28036: IFFALSE 28124
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28038: LD_ADDR_VAR 0 8
28042: PUSH
28043: LD_VAR 0 18
28047: PPUSH
28048: LD_INT 2
28050: PUSH
28051: LD_INT 30
28053: PUSH
28054: LD_INT 32
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 30
28063: PUSH
28064: LD_INT 33
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: LIST
28075: PPUSH
28076: CALL_OW 72
28080: PUSH
28081: FOR_IN
28082: IFFALSE 28122
// begin if not GetBWeapon ( i ) then
28084: LD_VAR 0 8
28088: PPUSH
28089: CALL_OW 269
28093: NOT
28094: IFFALSE 28120
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
28096: LD_VAR 0 8
28100: PPUSH
28101: LD_VAR 0 8
28105: PPUSH
28106: LD_VAR 0 2
28110: PPUSH
28111: CALL 29370 0 2
28115: PPUSH
28116: CALL_OW 431
// end ;
28120: GO 28081
28122: POP
28123: POP
// end ; for i = 1 to personel do
28124: LD_ADDR_VAR 0 8
28128: PUSH
28129: DOUBLE
28130: LD_INT 1
28132: DEC
28133: ST_TO_ADDR
28134: LD_VAR 0 6
28138: PUSH
28139: FOR_TO
28140: IFFALSE 29204
// begin if i > 4 then
28142: LD_VAR 0 8
28146: PUSH
28147: LD_INT 4
28149: GREATER
28150: IFFALSE 28154
// break ;
28152: GO 29204
// case i of 1 :
28154: LD_VAR 0 8
28158: PUSH
28159: LD_INT 1
28161: DOUBLE
28162: EQUAL
28163: IFTRUE 28167
28165: GO 28247
28167: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28168: LD_ADDR_VAR 0 12
28172: PUSH
28173: LD_VAR 0 18
28177: PPUSH
28178: LD_INT 22
28180: PUSH
28181: LD_VAR 0 16
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 58
28192: PUSH
28193: EMPTY
28194: LIST
28195: PUSH
28196: LD_INT 2
28198: PUSH
28199: LD_INT 30
28201: PUSH
28202: LD_INT 32
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 30
28211: PUSH
28212: LD_INT 4
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 30
28221: PUSH
28222: LD_INT 5
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: LIST
28239: PPUSH
28240: CALL_OW 72
28244: ST_TO_ADDR
28245: GO 28469
28247: LD_INT 2
28249: DOUBLE
28250: EQUAL
28251: IFTRUE 28255
28253: GO 28317
28255: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28256: LD_ADDR_VAR 0 12
28260: PUSH
28261: LD_VAR 0 18
28265: PPUSH
28266: LD_INT 22
28268: PUSH
28269: LD_VAR 0 16
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 2
28280: PUSH
28281: LD_INT 30
28283: PUSH
28284: LD_INT 0
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 30
28293: PUSH
28294: LD_INT 1
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: LIST
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PPUSH
28310: CALL_OW 72
28314: ST_TO_ADDR
28315: GO 28469
28317: LD_INT 3
28319: DOUBLE
28320: EQUAL
28321: IFTRUE 28325
28323: GO 28387
28325: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28326: LD_ADDR_VAR 0 12
28330: PUSH
28331: LD_VAR 0 18
28335: PPUSH
28336: LD_INT 22
28338: PUSH
28339: LD_VAR 0 16
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 2
28350: PUSH
28351: LD_INT 30
28353: PUSH
28354: LD_INT 2
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 30
28363: PUSH
28364: LD_INT 3
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: LIST
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PPUSH
28380: CALL_OW 72
28384: ST_TO_ADDR
28385: GO 28469
28387: LD_INT 4
28389: DOUBLE
28390: EQUAL
28391: IFTRUE 28395
28393: GO 28468
28395: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28396: LD_ADDR_VAR 0 12
28400: PUSH
28401: LD_VAR 0 18
28405: PPUSH
28406: LD_INT 22
28408: PUSH
28409: LD_VAR 0 16
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 2
28420: PUSH
28421: LD_INT 30
28423: PUSH
28424: LD_INT 6
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 30
28433: PUSH
28434: LD_INT 7
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 30
28443: PUSH
28444: LD_INT 8
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PPUSH
28461: CALL_OW 72
28465: ST_TO_ADDR
28466: GO 28469
28468: POP
// if i = 1 then
28469: LD_VAR 0 8
28473: PUSH
28474: LD_INT 1
28476: EQUAL
28477: IFFALSE 28588
// begin tmp := [ ] ;
28479: LD_ADDR_VAR 0 19
28483: PUSH
28484: EMPTY
28485: ST_TO_ADDR
// for j in f do
28486: LD_ADDR_VAR 0 9
28490: PUSH
28491: LD_VAR 0 12
28495: PUSH
28496: FOR_IN
28497: IFFALSE 28570
// if GetBType ( j ) = b_bunker then
28499: LD_VAR 0 9
28503: PPUSH
28504: CALL_OW 266
28508: PUSH
28509: LD_INT 32
28511: EQUAL
28512: IFFALSE 28539
// tmp := Insert ( tmp , 1 , j ) else
28514: LD_ADDR_VAR 0 19
28518: PUSH
28519: LD_VAR 0 19
28523: PPUSH
28524: LD_INT 1
28526: PPUSH
28527: LD_VAR 0 9
28531: PPUSH
28532: CALL_OW 2
28536: ST_TO_ADDR
28537: GO 28568
// tmp := Insert ( tmp , tmp + 1 , j ) ;
28539: LD_ADDR_VAR 0 19
28543: PUSH
28544: LD_VAR 0 19
28548: PPUSH
28549: LD_VAR 0 19
28553: PUSH
28554: LD_INT 1
28556: PLUS
28557: PPUSH
28558: LD_VAR 0 9
28562: PPUSH
28563: CALL_OW 2
28567: ST_TO_ADDR
28568: GO 28496
28570: POP
28571: POP
// if tmp then
28572: LD_VAR 0 19
28576: IFFALSE 28588
// f := tmp ;
28578: LD_ADDR_VAR 0 12
28582: PUSH
28583: LD_VAR 0 19
28587: ST_TO_ADDR
// end ; x := personel [ i ] ;
28588: LD_ADDR_VAR 0 13
28592: PUSH
28593: LD_VAR 0 6
28597: PUSH
28598: LD_VAR 0 8
28602: ARRAY
28603: ST_TO_ADDR
// if x = - 1 then
28604: LD_VAR 0 13
28608: PUSH
28609: LD_INT 1
28611: NEG
28612: EQUAL
28613: IFFALSE 28822
// begin for j in f do
28615: LD_ADDR_VAR 0 9
28619: PUSH
28620: LD_VAR 0 12
28624: PUSH
28625: FOR_IN
28626: IFFALSE 28818
// repeat InitHc ;
28628: CALL_OW 19
// if GetBType ( j ) = b_barracks then
28632: LD_VAR 0 9
28636: PPUSH
28637: CALL_OW 266
28641: PUSH
28642: LD_INT 5
28644: EQUAL
28645: IFFALSE 28715
// begin if UnitsInside ( j ) < 3 then
28647: LD_VAR 0 9
28651: PPUSH
28652: CALL_OW 313
28656: PUSH
28657: LD_INT 3
28659: LESS
28660: IFFALSE 28696
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28662: LD_INT 0
28664: PPUSH
28665: LD_INT 5
28667: PUSH
28668: LD_INT 8
28670: PUSH
28671: LD_INT 9
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: LIST
28678: PUSH
28679: LD_VAR 0 17
28683: ARRAY
28684: PPUSH
28685: LD_VAR 0 4
28689: PPUSH
28690: CALL_OW 380
28694: GO 28713
// PrepareHuman ( false , i , skill ) ;
28696: LD_INT 0
28698: PPUSH
28699: LD_VAR 0 8
28703: PPUSH
28704: LD_VAR 0 4
28708: PPUSH
28709: CALL_OW 380
// end else
28713: GO 28732
// PrepareHuman ( false , i , skill ) ;
28715: LD_INT 0
28717: PPUSH
28718: LD_VAR 0 8
28722: PPUSH
28723: LD_VAR 0 4
28727: PPUSH
28728: CALL_OW 380
// un := CreateHuman ;
28732: LD_ADDR_VAR 0 14
28736: PUSH
28737: CALL_OW 44
28741: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28742: LD_ADDR_VAR 0 7
28746: PUSH
28747: LD_VAR 0 7
28751: PPUSH
28752: LD_INT 1
28754: PPUSH
28755: LD_VAR 0 14
28759: PPUSH
28760: CALL_OW 2
28764: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
28765: LD_VAR 0 14
28769: PPUSH
28770: LD_VAR 0 9
28774: PPUSH
28775: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
28779: LD_VAR 0 9
28783: PPUSH
28784: CALL_OW 313
28788: PUSH
28789: LD_INT 6
28791: EQUAL
28792: PUSH
28793: LD_VAR 0 9
28797: PPUSH
28798: CALL_OW 266
28802: PUSH
28803: LD_INT 32
28805: PUSH
28806: LD_INT 31
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: IN
28813: OR
28814: IFFALSE 28628
28816: GO 28625
28818: POP
28819: POP
// end else
28820: GO 29202
// for j = 1 to x do
28822: LD_ADDR_VAR 0 9
28826: PUSH
28827: DOUBLE
28828: LD_INT 1
28830: DEC
28831: ST_TO_ADDR
28832: LD_VAR 0 13
28836: PUSH
28837: FOR_TO
28838: IFFALSE 29200
// begin InitHc ;
28840: CALL_OW 19
// if not f then
28844: LD_VAR 0 12
28848: NOT
28849: IFFALSE 28938
// begin PrepareHuman ( false , i , skill ) ;
28851: LD_INT 0
28853: PPUSH
28854: LD_VAR 0 8
28858: PPUSH
28859: LD_VAR 0 4
28863: PPUSH
28864: CALL_OW 380
// un := CreateHuman ;
28868: LD_ADDR_VAR 0 14
28872: PUSH
28873: CALL_OW 44
28877: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28878: LD_ADDR_VAR 0 7
28882: PUSH
28883: LD_VAR 0 7
28887: PPUSH
28888: LD_INT 1
28890: PPUSH
28891: LD_VAR 0 14
28895: PPUSH
28896: CALL_OW 2
28900: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
28901: LD_VAR 0 14
28905: PPUSH
28906: LD_VAR 0 1
28910: PPUSH
28911: CALL_OW 250
28915: PPUSH
28916: LD_VAR 0 1
28920: PPUSH
28921: CALL_OW 251
28925: PPUSH
28926: LD_INT 10
28928: PPUSH
28929: LD_INT 0
28931: PPUSH
28932: CALL_OW 50
// continue ;
28936: GO 28837
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
28938: LD_VAR 0 12
28942: PUSH
28943: LD_INT 1
28945: ARRAY
28946: PPUSH
28947: CALL_OW 313
28951: PUSH
28952: LD_VAR 0 12
28956: PUSH
28957: LD_INT 1
28959: ARRAY
28960: PPUSH
28961: CALL_OW 266
28965: PUSH
28966: LD_INT 32
28968: PUSH
28969: LD_INT 31
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: IN
28976: AND
28977: PUSH
28978: LD_VAR 0 12
28982: PUSH
28983: LD_INT 1
28985: ARRAY
28986: PPUSH
28987: CALL_OW 313
28991: PUSH
28992: LD_INT 6
28994: EQUAL
28995: OR
28996: IFFALSE 29016
// f := Delete ( f , 1 ) ;
28998: LD_ADDR_VAR 0 12
29002: PUSH
29003: LD_VAR 0 12
29007: PPUSH
29008: LD_INT 1
29010: PPUSH
29011: CALL_OW 3
29015: ST_TO_ADDR
// if not f then
29016: LD_VAR 0 12
29020: NOT
29021: IFFALSE 29039
// begin x := x + 2 ;
29023: LD_ADDR_VAR 0 13
29027: PUSH
29028: LD_VAR 0 13
29032: PUSH
29033: LD_INT 2
29035: PLUS
29036: ST_TO_ADDR
// continue ;
29037: GO 28837
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29039: LD_VAR 0 12
29043: PUSH
29044: LD_INT 1
29046: ARRAY
29047: PPUSH
29048: CALL_OW 266
29052: PUSH
29053: LD_INT 5
29055: EQUAL
29056: IFFALSE 29130
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29058: LD_VAR 0 12
29062: PUSH
29063: LD_INT 1
29065: ARRAY
29066: PPUSH
29067: CALL_OW 313
29071: PUSH
29072: LD_INT 3
29074: LESS
29075: IFFALSE 29111
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29077: LD_INT 0
29079: PPUSH
29080: LD_INT 5
29082: PUSH
29083: LD_INT 8
29085: PUSH
29086: LD_INT 9
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: LIST
29093: PUSH
29094: LD_VAR 0 17
29098: ARRAY
29099: PPUSH
29100: LD_VAR 0 4
29104: PPUSH
29105: CALL_OW 380
29109: GO 29128
// PrepareHuman ( false , i , skill ) ;
29111: LD_INT 0
29113: PPUSH
29114: LD_VAR 0 8
29118: PPUSH
29119: LD_VAR 0 4
29123: PPUSH
29124: CALL_OW 380
// end else
29128: GO 29147
// PrepareHuman ( false , i , skill ) ;
29130: LD_INT 0
29132: PPUSH
29133: LD_VAR 0 8
29137: PPUSH
29138: LD_VAR 0 4
29142: PPUSH
29143: CALL_OW 380
// un := CreateHuman ;
29147: LD_ADDR_VAR 0 14
29151: PUSH
29152: CALL_OW 44
29156: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29157: LD_ADDR_VAR 0 7
29161: PUSH
29162: LD_VAR 0 7
29166: PPUSH
29167: LD_INT 1
29169: PPUSH
29170: LD_VAR 0 14
29174: PPUSH
29175: CALL_OW 2
29179: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29180: LD_VAR 0 14
29184: PPUSH
29185: LD_VAR 0 12
29189: PUSH
29190: LD_INT 1
29192: ARRAY
29193: PPUSH
29194: CALL_OW 52
// end ;
29198: GO 28837
29200: POP
29201: POP
// end ;
29202: GO 28139
29204: POP
29205: POP
// result := result ^ buildings ;
29206: LD_ADDR_VAR 0 7
29210: PUSH
29211: LD_VAR 0 7
29215: PUSH
29216: LD_VAR 0 18
29220: ADD
29221: ST_TO_ADDR
// end else
29222: GO 29365
// begin for i = 1 to personel do
29224: LD_ADDR_VAR 0 8
29228: PUSH
29229: DOUBLE
29230: LD_INT 1
29232: DEC
29233: ST_TO_ADDR
29234: LD_VAR 0 6
29238: PUSH
29239: FOR_TO
29240: IFFALSE 29363
// begin if i > 4 then
29242: LD_VAR 0 8
29246: PUSH
29247: LD_INT 4
29249: GREATER
29250: IFFALSE 29254
// break ;
29252: GO 29363
// x := personel [ i ] ;
29254: LD_ADDR_VAR 0 13
29258: PUSH
29259: LD_VAR 0 6
29263: PUSH
29264: LD_VAR 0 8
29268: ARRAY
29269: ST_TO_ADDR
// if x = - 1 then
29270: LD_VAR 0 13
29274: PUSH
29275: LD_INT 1
29277: NEG
29278: EQUAL
29279: IFFALSE 29283
// continue ;
29281: GO 29239
// PrepareHuman ( false , i , skill ) ;
29283: LD_INT 0
29285: PPUSH
29286: LD_VAR 0 8
29290: PPUSH
29291: LD_VAR 0 4
29295: PPUSH
29296: CALL_OW 380
// un := CreateHuman ;
29300: LD_ADDR_VAR 0 14
29304: PUSH
29305: CALL_OW 44
29309: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29310: LD_VAR 0 14
29314: PPUSH
29315: LD_VAR 0 1
29319: PPUSH
29320: CALL_OW 250
29324: PPUSH
29325: LD_VAR 0 1
29329: PPUSH
29330: CALL_OW 251
29334: PPUSH
29335: LD_INT 10
29337: PPUSH
29338: LD_INT 0
29340: PPUSH
29341: CALL_OW 50
// result := result ^ un ;
29345: LD_ADDR_VAR 0 7
29349: PUSH
29350: LD_VAR 0 7
29354: PUSH
29355: LD_VAR 0 14
29359: ADD
29360: ST_TO_ADDR
// end ;
29361: GO 29239
29363: POP
29364: POP
// end ; end ;
29365: LD_VAR 0 7
29369: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29370: LD_INT 0
29372: PPUSH
29373: PPUSH
29374: PPUSH
29375: PPUSH
29376: PPUSH
29377: PPUSH
29378: PPUSH
29379: PPUSH
29380: PPUSH
29381: PPUSH
29382: PPUSH
29383: PPUSH
29384: PPUSH
29385: PPUSH
29386: PPUSH
29387: PPUSH
// result := false ;
29388: LD_ADDR_VAR 0 3
29392: PUSH
29393: LD_INT 0
29395: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29396: LD_VAR 0 1
29400: NOT
29401: PUSH
29402: LD_VAR 0 1
29406: PPUSH
29407: CALL_OW 266
29411: PUSH
29412: LD_INT 32
29414: PUSH
29415: LD_INT 33
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: IN
29422: NOT
29423: OR
29424: IFFALSE 29428
// exit ;
29426: GO 30537
// nat := GetNation ( tower ) ;
29428: LD_ADDR_VAR 0 12
29432: PUSH
29433: LD_VAR 0 1
29437: PPUSH
29438: CALL_OW 248
29442: ST_TO_ADDR
// side := GetSide ( tower ) ;
29443: LD_ADDR_VAR 0 16
29447: PUSH
29448: LD_VAR 0 1
29452: PPUSH
29453: CALL_OW 255
29457: ST_TO_ADDR
// x := GetX ( tower ) ;
29458: LD_ADDR_VAR 0 10
29462: PUSH
29463: LD_VAR 0 1
29467: PPUSH
29468: CALL_OW 250
29472: ST_TO_ADDR
// y := GetY ( tower ) ;
29473: LD_ADDR_VAR 0 11
29477: PUSH
29478: LD_VAR 0 1
29482: PPUSH
29483: CALL_OW 251
29487: ST_TO_ADDR
// if not x or not y then
29488: LD_VAR 0 10
29492: NOT
29493: PUSH
29494: LD_VAR 0 11
29498: NOT
29499: OR
29500: IFFALSE 29504
// exit ;
29502: GO 30537
// weapon := 0 ;
29504: LD_ADDR_VAR 0 18
29508: PUSH
29509: LD_INT 0
29511: ST_TO_ADDR
// fac_list := [ ] ;
29512: LD_ADDR_VAR 0 17
29516: PUSH
29517: EMPTY
29518: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
29519: LD_ADDR_VAR 0 6
29523: PUSH
29524: LD_VAR 0 1
29528: PPUSH
29529: CALL_OW 274
29533: PPUSH
29534: LD_VAR 0 2
29538: PPUSH
29539: LD_INT 0
29541: PPUSH
29542: CALL 27108 0 3
29546: PPUSH
29547: LD_INT 30
29549: PUSH
29550: LD_INT 3
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PPUSH
29557: CALL_OW 72
29561: ST_TO_ADDR
// if not factories then
29562: LD_VAR 0 6
29566: NOT
29567: IFFALSE 29571
// exit ;
29569: GO 30537
// for i in factories do
29571: LD_ADDR_VAR 0 8
29575: PUSH
29576: LD_VAR 0 6
29580: PUSH
29581: FOR_IN
29582: IFFALSE 29607
// fac_list := fac_list union AvailableWeaponList ( i ) ;
29584: LD_ADDR_VAR 0 17
29588: PUSH
29589: LD_VAR 0 17
29593: PUSH
29594: LD_VAR 0 8
29598: PPUSH
29599: CALL_OW 478
29603: UNION
29604: ST_TO_ADDR
29605: GO 29581
29607: POP
29608: POP
// if not fac_list then
29609: LD_VAR 0 17
29613: NOT
29614: IFFALSE 29618
// exit ;
29616: GO 30537
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
29618: LD_ADDR_VAR 0 5
29622: PUSH
29623: LD_INT 4
29625: PUSH
29626: LD_INT 5
29628: PUSH
29629: LD_INT 9
29631: PUSH
29632: LD_INT 10
29634: PUSH
29635: LD_INT 6
29637: PUSH
29638: LD_INT 7
29640: PUSH
29641: LD_INT 11
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 27
29655: PUSH
29656: LD_INT 28
29658: PUSH
29659: LD_INT 26
29661: PUSH
29662: LD_INT 30
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 43
29673: PUSH
29674: LD_INT 44
29676: PUSH
29677: LD_INT 46
29679: PUSH
29680: LD_INT 45
29682: PUSH
29683: LD_INT 47
29685: PUSH
29686: LD_INT 49
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: LIST
29701: PUSH
29702: LD_VAR 0 12
29706: ARRAY
29707: ST_TO_ADDR
// list := list isect fac_list ;
29708: LD_ADDR_VAR 0 5
29712: PUSH
29713: LD_VAR 0 5
29717: PUSH
29718: LD_VAR 0 17
29722: ISECT
29723: ST_TO_ADDR
// if not list then
29724: LD_VAR 0 5
29728: NOT
29729: IFFALSE 29733
// exit ;
29731: GO 30537
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
29733: LD_VAR 0 12
29737: PUSH
29738: LD_INT 3
29740: EQUAL
29741: PUSH
29742: LD_INT 49
29744: PUSH
29745: LD_VAR 0 5
29749: IN
29750: AND
29751: PUSH
29752: LD_INT 31
29754: PPUSH
29755: LD_VAR 0 16
29759: PPUSH
29760: CALL_OW 321
29764: PUSH
29765: LD_INT 2
29767: EQUAL
29768: AND
29769: IFFALSE 29829
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
29771: LD_INT 22
29773: PUSH
29774: LD_VAR 0 16
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 35
29785: PUSH
29786: LD_INT 49
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 91
29795: PUSH
29796: LD_VAR 0 1
29800: PUSH
29801: LD_INT 10
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: LIST
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: LIST
29813: PPUSH
29814: CALL_OW 69
29818: NOT
29819: IFFALSE 29829
// weapon := ru_time_lapser ;
29821: LD_ADDR_VAR 0 18
29825: PUSH
29826: LD_INT 49
29828: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
29829: LD_VAR 0 12
29833: PUSH
29834: LD_INT 1
29836: PUSH
29837: LD_INT 2
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: IN
29844: PUSH
29845: LD_INT 11
29847: PUSH
29848: LD_VAR 0 5
29852: IN
29853: PUSH
29854: LD_INT 30
29856: PUSH
29857: LD_VAR 0 5
29861: IN
29862: OR
29863: AND
29864: PUSH
29865: LD_INT 6
29867: PPUSH
29868: LD_VAR 0 16
29872: PPUSH
29873: CALL_OW 321
29877: PUSH
29878: LD_INT 2
29880: EQUAL
29881: AND
29882: IFFALSE 30047
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
29884: LD_INT 22
29886: PUSH
29887: LD_VAR 0 16
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 2
29898: PUSH
29899: LD_INT 35
29901: PUSH
29902: LD_INT 11
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 35
29911: PUSH
29912: LD_INT 30
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 91
29926: PUSH
29927: LD_VAR 0 1
29931: PUSH
29932: LD_INT 18
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: LIST
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: LIST
29944: PPUSH
29945: CALL_OW 69
29949: NOT
29950: PUSH
29951: LD_INT 22
29953: PUSH
29954: LD_VAR 0 16
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: LD_INT 2
29965: PUSH
29966: LD_INT 30
29968: PUSH
29969: LD_INT 32
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 30
29978: PUSH
29979: LD_INT 33
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 91
29993: PUSH
29994: LD_VAR 0 1
29998: PUSH
29999: LD_INT 12
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: LIST
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: LIST
30011: PUSH
30012: EMPTY
30013: LIST
30014: PPUSH
30015: CALL_OW 69
30019: PUSH
30020: LD_INT 2
30022: GREATER
30023: AND
30024: IFFALSE 30047
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30026: LD_ADDR_VAR 0 18
30030: PUSH
30031: LD_INT 11
30033: PUSH
30034: LD_INT 30
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_VAR 0 12
30045: ARRAY
30046: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30047: LD_VAR 0 18
30051: NOT
30052: PUSH
30053: LD_INT 40
30055: PPUSH
30056: LD_VAR 0 16
30060: PPUSH
30061: CALL_OW 321
30065: PUSH
30066: LD_INT 2
30068: EQUAL
30069: AND
30070: PUSH
30071: LD_INT 7
30073: PUSH
30074: LD_VAR 0 5
30078: IN
30079: PUSH
30080: LD_INT 28
30082: PUSH
30083: LD_VAR 0 5
30087: IN
30088: OR
30089: PUSH
30090: LD_INT 45
30092: PUSH
30093: LD_VAR 0 5
30097: IN
30098: OR
30099: AND
30100: IFFALSE 30354
// begin hex := GetHexInfo ( x , y ) ;
30102: LD_ADDR_VAR 0 4
30106: PUSH
30107: LD_VAR 0 10
30111: PPUSH
30112: LD_VAR 0 11
30116: PPUSH
30117: CALL_OW 546
30121: ST_TO_ADDR
// if hex [ 1 ] then
30122: LD_VAR 0 4
30126: PUSH
30127: LD_INT 1
30129: ARRAY
30130: IFFALSE 30134
// exit ;
30132: GO 30537
// height := hex [ 2 ] ;
30134: LD_ADDR_VAR 0 15
30138: PUSH
30139: LD_VAR 0 4
30143: PUSH
30144: LD_INT 2
30146: ARRAY
30147: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30148: LD_ADDR_VAR 0 14
30152: PUSH
30153: LD_INT 0
30155: PUSH
30156: LD_INT 2
30158: PUSH
30159: LD_INT 3
30161: PUSH
30162: LD_INT 5
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: ST_TO_ADDR
// for i in tmp do
30171: LD_ADDR_VAR 0 8
30175: PUSH
30176: LD_VAR 0 14
30180: PUSH
30181: FOR_IN
30182: IFFALSE 30352
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30184: LD_ADDR_VAR 0 9
30188: PUSH
30189: LD_VAR 0 10
30193: PPUSH
30194: LD_VAR 0 8
30198: PPUSH
30199: LD_INT 5
30201: PPUSH
30202: CALL_OW 272
30206: PUSH
30207: LD_VAR 0 11
30211: PPUSH
30212: LD_VAR 0 8
30216: PPUSH
30217: LD_INT 5
30219: PPUSH
30220: CALL_OW 273
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30229: LD_VAR 0 9
30233: PUSH
30234: LD_INT 1
30236: ARRAY
30237: PPUSH
30238: LD_VAR 0 9
30242: PUSH
30243: LD_INT 2
30245: ARRAY
30246: PPUSH
30247: CALL_OW 488
30251: IFFALSE 30350
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30253: LD_ADDR_VAR 0 4
30257: PUSH
30258: LD_VAR 0 9
30262: PUSH
30263: LD_INT 1
30265: ARRAY
30266: PPUSH
30267: LD_VAR 0 9
30271: PUSH
30272: LD_INT 2
30274: ARRAY
30275: PPUSH
30276: CALL_OW 546
30280: ST_TO_ADDR
// if hex [ 1 ] then
30281: LD_VAR 0 4
30285: PUSH
30286: LD_INT 1
30288: ARRAY
30289: IFFALSE 30293
// continue ;
30291: GO 30181
// h := hex [ 2 ] ;
30293: LD_ADDR_VAR 0 13
30297: PUSH
30298: LD_VAR 0 4
30302: PUSH
30303: LD_INT 2
30305: ARRAY
30306: ST_TO_ADDR
// if h + 7 < height then
30307: LD_VAR 0 13
30311: PUSH
30312: LD_INT 7
30314: PLUS
30315: PUSH
30316: LD_VAR 0 15
30320: LESS
30321: IFFALSE 30350
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30323: LD_ADDR_VAR 0 18
30327: PUSH
30328: LD_INT 7
30330: PUSH
30331: LD_INT 28
30333: PUSH
30334: LD_INT 45
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: LIST
30341: PUSH
30342: LD_VAR 0 12
30346: ARRAY
30347: ST_TO_ADDR
// break ;
30348: GO 30352
// end ; end ; end ;
30350: GO 30181
30352: POP
30353: POP
// end ; if not weapon then
30354: LD_VAR 0 18
30358: NOT
30359: IFFALSE 30419
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30361: LD_ADDR_VAR 0 5
30365: PUSH
30366: LD_VAR 0 5
30370: PUSH
30371: LD_INT 11
30373: PUSH
30374: LD_INT 30
30376: PUSH
30377: LD_INT 49
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: LIST
30384: DIFF
30385: ST_TO_ADDR
// if not list then
30386: LD_VAR 0 5
30390: NOT
30391: IFFALSE 30395
// exit ;
30393: GO 30537
// weapon := list [ rand ( 1 , list ) ] ;
30395: LD_ADDR_VAR 0 18
30399: PUSH
30400: LD_VAR 0 5
30404: PUSH
30405: LD_INT 1
30407: PPUSH
30408: LD_VAR 0 5
30412: PPUSH
30413: CALL_OW 12
30417: ARRAY
30418: ST_TO_ADDR
// end ; if weapon then
30419: LD_VAR 0 18
30423: IFFALSE 30537
// begin tmp := CostOfWeapon ( weapon ) ;
30425: LD_ADDR_VAR 0 14
30429: PUSH
30430: LD_VAR 0 18
30434: PPUSH
30435: CALL_OW 451
30439: ST_TO_ADDR
// j := GetBase ( tower ) ;
30440: LD_ADDR_VAR 0 9
30444: PUSH
30445: LD_VAR 0 1
30449: PPUSH
30450: CALL_OW 274
30454: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30455: LD_VAR 0 9
30459: PPUSH
30460: LD_INT 1
30462: PPUSH
30463: CALL_OW 275
30467: PUSH
30468: LD_VAR 0 14
30472: PUSH
30473: LD_INT 1
30475: ARRAY
30476: GREATEREQUAL
30477: PUSH
30478: LD_VAR 0 9
30482: PPUSH
30483: LD_INT 2
30485: PPUSH
30486: CALL_OW 275
30490: PUSH
30491: LD_VAR 0 14
30495: PUSH
30496: LD_INT 2
30498: ARRAY
30499: GREATEREQUAL
30500: AND
30501: PUSH
30502: LD_VAR 0 9
30506: PPUSH
30507: LD_INT 3
30509: PPUSH
30510: CALL_OW 275
30514: PUSH
30515: LD_VAR 0 14
30519: PUSH
30520: LD_INT 3
30522: ARRAY
30523: GREATEREQUAL
30524: AND
30525: IFFALSE 30537
// result := weapon ;
30527: LD_ADDR_VAR 0 3
30531: PUSH
30532: LD_VAR 0 18
30536: ST_TO_ADDR
// end ; end ;
30537: LD_VAR 0 3
30541: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
30542: LD_INT 0
30544: PPUSH
30545: PPUSH
// result := true ;
30546: LD_ADDR_VAR 0 3
30550: PUSH
30551: LD_INT 1
30553: ST_TO_ADDR
// if array1 = array2 then
30554: LD_VAR 0 1
30558: PUSH
30559: LD_VAR 0 2
30563: EQUAL
30564: IFFALSE 30624
// begin for i = 1 to array1 do
30566: LD_ADDR_VAR 0 4
30570: PUSH
30571: DOUBLE
30572: LD_INT 1
30574: DEC
30575: ST_TO_ADDR
30576: LD_VAR 0 1
30580: PUSH
30581: FOR_TO
30582: IFFALSE 30620
// if array1 [ i ] <> array2 [ i ] then
30584: LD_VAR 0 1
30588: PUSH
30589: LD_VAR 0 4
30593: ARRAY
30594: PUSH
30595: LD_VAR 0 2
30599: PUSH
30600: LD_VAR 0 4
30604: ARRAY
30605: NONEQUAL
30606: IFFALSE 30618
// begin result := false ;
30608: LD_ADDR_VAR 0 3
30612: PUSH
30613: LD_INT 0
30615: ST_TO_ADDR
// break ;
30616: GO 30620
// end ;
30618: GO 30581
30620: POP
30621: POP
// end else
30622: GO 30632
// result := false ;
30624: LD_ADDR_VAR 0 3
30628: PUSH
30629: LD_INT 0
30631: ST_TO_ADDR
// end ;
30632: LD_VAR 0 3
30636: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
30637: LD_INT 0
30639: PPUSH
30640: PPUSH
// if not array1 or not array2 then
30641: LD_VAR 0 1
30645: NOT
30646: PUSH
30647: LD_VAR 0 2
30651: NOT
30652: OR
30653: IFFALSE 30657
// exit ;
30655: GO 30721
// result := true ;
30657: LD_ADDR_VAR 0 3
30661: PUSH
30662: LD_INT 1
30664: ST_TO_ADDR
// for i = 1 to array1 do
30665: LD_ADDR_VAR 0 4
30669: PUSH
30670: DOUBLE
30671: LD_INT 1
30673: DEC
30674: ST_TO_ADDR
30675: LD_VAR 0 1
30679: PUSH
30680: FOR_TO
30681: IFFALSE 30719
// if array1 [ i ] <> array2 [ i ] then
30683: LD_VAR 0 1
30687: PUSH
30688: LD_VAR 0 4
30692: ARRAY
30693: PUSH
30694: LD_VAR 0 2
30698: PUSH
30699: LD_VAR 0 4
30703: ARRAY
30704: NONEQUAL
30705: IFFALSE 30717
// begin result := false ;
30707: LD_ADDR_VAR 0 3
30711: PUSH
30712: LD_INT 0
30714: ST_TO_ADDR
// break ;
30715: GO 30719
// end ;
30717: GO 30680
30719: POP
30720: POP
// end ;
30721: LD_VAR 0 3
30725: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
30726: LD_INT 0
30728: PPUSH
30729: PPUSH
30730: PPUSH
// pom := GetBase ( fac ) ;
30731: LD_ADDR_VAR 0 5
30735: PUSH
30736: LD_VAR 0 1
30740: PPUSH
30741: CALL_OW 274
30745: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
30746: LD_ADDR_VAR 0 4
30750: PUSH
30751: LD_VAR 0 2
30755: PUSH
30756: LD_INT 1
30758: ARRAY
30759: PPUSH
30760: LD_VAR 0 2
30764: PUSH
30765: LD_INT 2
30767: ARRAY
30768: PPUSH
30769: LD_VAR 0 2
30773: PUSH
30774: LD_INT 3
30776: ARRAY
30777: PPUSH
30778: LD_VAR 0 2
30782: PUSH
30783: LD_INT 4
30785: ARRAY
30786: PPUSH
30787: CALL_OW 449
30791: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30792: LD_ADDR_VAR 0 3
30796: PUSH
30797: LD_VAR 0 5
30801: PPUSH
30802: LD_INT 1
30804: PPUSH
30805: CALL_OW 275
30809: PUSH
30810: LD_VAR 0 4
30814: PUSH
30815: LD_INT 1
30817: ARRAY
30818: GREATEREQUAL
30819: PUSH
30820: LD_VAR 0 5
30824: PPUSH
30825: LD_INT 2
30827: PPUSH
30828: CALL_OW 275
30832: PUSH
30833: LD_VAR 0 4
30837: PUSH
30838: LD_INT 2
30840: ARRAY
30841: GREATEREQUAL
30842: AND
30843: PUSH
30844: LD_VAR 0 5
30848: PPUSH
30849: LD_INT 3
30851: PPUSH
30852: CALL_OW 275
30856: PUSH
30857: LD_VAR 0 4
30861: PUSH
30862: LD_INT 3
30864: ARRAY
30865: GREATEREQUAL
30866: AND
30867: ST_TO_ADDR
// end ;
30868: LD_VAR 0 3
30872: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
30873: LD_INT 0
30875: PPUSH
30876: PPUSH
30877: PPUSH
30878: PPUSH
// pom := GetBase ( building ) ;
30879: LD_ADDR_VAR 0 3
30883: PUSH
30884: LD_VAR 0 1
30888: PPUSH
30889: CALL_OW 274
30893: ST_TO_ADDR
// if not pom then
30894: LD_VAR 0 3
30898: NOT
30899: IFFALSE 30903
// exit ;
30901: GO 31073
// btype := GetBType ( building ) ;
30903: LD_ADDR_VAR 0 5
30907: PUSH
30908: LD_VAR 0 1
30912: PPUSH
30913: CALL_OW 266
30917: ST_TO_ADDR
// if btype = b_armoury then
30918: LD_VAR 0 5
30922: PUSH
30923: LD_INT 4
30925: EQUAL
30926: IFFALSE 30936
// btype := b_barracks ;
30928: LD_ADDR_VAR 0 5
30932: PUSH
30933: LD_INT 5
30935: ST_TO_ADDR
// if btype = b_depot then
30936: LD_VAR 0 5
30940: PUSH
30941: LD_INT 0
30943: EQUAL
30944: IFFALSE 30954
// btype := b_warehouse ;
30946: LD_ADDR_VAR 0 5
30950: PUSH
30951: LD_INT 1
30953: ST_TO_ADDR
// if btype = b_workshop then
30954: LD_VAR 0 5
30958: PUSH
30959: LD_INT 2
30961: EQUAL
30962: IFFALSE 30972
// btype := b_factory ;
30964: LD_ADDR_VAR 0 5
30968: PUSH
30969: LD_INT 3
30971: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30972: LD_ADDR_VAR 0 4
30976: PUSH
30977: LD_VAR 0 5
30981: PPUSH
30982: LD_VAR 0 1
30986: PPUSH
30987: CALL_OW 248
30991: PPUSH
30992: CALL_OW 450
30996: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30997: LD_ADDR_VAR 0 2
31001: PUSH
31002: LD_VAR 0 3
31006: PPUSH
31007: LD_INT 1
31009: PPUSH
31010: CALL_OW 275
31014: PUSH
31015: LD_VAR 0 4
31019: PUSH
31020: LD_INT 1
31022: ARRAY
31023: GREATEREQUAL
31024: PUSH
31025: LD_VAR 0 3
31029: PPUSH
31030: LD_INT 2
31032: PPUSH
31033: CALL_OW 275
31037: PUSH
31038: LD_VAR 0 4
31042: PUSH
31043: LD_INT 2
31045: ARRAY
31046: GREATEREQUAL
31047: AND
31048: PUSH
31049: LD_VAR 0 3
31053: PPUSH
31054: LD_INT 3
31056: PPUSH
31057: CALL_OW 275
31061: PUSH
31062: LD_VAR 0 4
31066: PUSH
31067: LD_INT 3
31069: ARRAY
31070: GREATEREQUAL
31071: AND
31072: ST_TO_ADDR
// end ;
31073: LD_VAR 0 2
31077: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31078: LD_INT 0
31080: PPUSH
31081: PPUSH
31082: PPUSH
// pom := GetBase ( building ) ;
31083: LD_ADDR_VAR 0 4
31087: PUSH
31088: LD_VAR 0 1
31092: PPUSH
31093: CALL_OW 274
31097: ST_TO_ADDR
// if not pom then
31098: LD_VAR 0 4
31102: NOT
31103: IFFALSE 31107
// exit ;
31105: GO 31208
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31107: LD_ADDR_VAR 0 5
31111: PUSH
31112: LD_VAR 0 2
31116: PPUSH
31117: LD_VAR 0 1
31121: PPUSH
31122: CALL_OW 248
31126: PPUSH
31127: CALL_OW 450
31131: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31132: LD_ADDR_VAR 0 3
31136: PUSH
31137: LD_VAR 0 4
31141: PPUSH
31142: LD_INT 1
31144: PPUSH
31145: CALL_OW 275
31149: PUSH
31150: LD_VAR 0 5
31154: PUSH
31155: LD_INT 1
31157: ARRAY
31158: GREATEREQUAL
31159: PUSH
31160: LD_VAR 0 4
31164: PPUSH
31165: LD_INT 2
31167: PPUSH
31168: CALL_OW 275
31172: PUSH
31173: LD_VAR 0 5
31177: PUSH
31178: LD_INT 2
31180: ARRAY
31181: GREATEREQUAL
31182: AND
31183: PUSH
31184: LD_VAR 0 4
31188: PPUSH
31189: LD_INT 3
31191: PPUSH
31192: CALL_OW 275
31196: PUSH
31197: LD_VAR 0 5
31201: PUSH
31202: LD_INT 3
31204: ARRAY
31205: GREATEREQUAL
31206: AND
31207: ST_TO_ADDR
// end ;
31208: LD_VAR 0 3
31212: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
31213: LD_INT 0
31215: PPUSH
31216: PPUSH
31217: PPUSH
31218: PPUSH
31219: PPUSH
31220: PPUSH
31221: PPUSH
31222: PPUSH
31223: PPUSH
31224: PPUSH
31225: PPUSH
// result := false ;
31226: LD_ADDR_VAR 0 8
31230: PUSH
31231: LD_INT 0
31233: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
31234: LD_VAR 0 5
31238: NOT
31239: PUSH
31240: LD_VAR 0 1
31244: NOT
31245: OR
31246: PUSH
31247: LD_VAR 0 2
31251: NOT
31252: OR
31253: PUSH
31254: LD_VAR 0 3
31258: NOT
31259: OR
31260: IFFALSE 31264
// exit ;
31262: GO 32078
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
31264: LD_ADDR_VAR 0 14
31268: PUSH
31269: LD_VAR 0 1
31273: PPUSH
31274: LD_VAR 0 2
31278: PPUSH
31279: LD_VAR 0 3
31283: PPUSH
31284: LD_VAR 0 4
31288: PPUSH
31289: LD_VAR 0 5
31293: PUSH
31294: LD_INT 1
31296: ARRAY
31297: PPUSH
31298: CALL_OW 248
31302: PPUSH
31303: LD_INT 0
31305: PPUSH
31306: CALL 33315 0 6
31310: ST_TO_ADDR
// if not hexes then
31311: LD_VAR 0 14
31315: NOT
31316: IFFALSE 31320
// exit ;
31318: GO 32078
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31320: LD_ADDR_VAR 0 17
31324: PUSH
31325: LD_VAR 0 5
31329: PPUSH
31330: LD_INT 22
31332: PUSH
31333: LD_VAR 0 13
31337: PPUSH
31338: CALL_OW 255
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 2
31349: PUSH
31350: LD_INT 30
31352: PUSH
31353: LD_INT 0
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 30
31362: PUSH
31363: LD_INT 1
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: LIST
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PPUSH
31379: CALL_OW 72
31383: ST_TO_ADDR
// for i = 1 to hexes do
31384: LD_ADDR_VAR 0 9
31388: PUSH
31389: DOUBLE
31390: LD_INT 1
31392: DEC
31393: ST_TO_ADDR
31394: LD_VAR 0 14
31398: PUSH
31399: FOR_TO
31400: IFFALSE 32076
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31402: LD_ADDR_VAR 0 13
31406: PUSH
31407: LD_VAR 0 14
31411: PUSH
31412: LD_VAR 0 9
31416: ARRAY
31417: PUSH
31418: LD_INT 1
31420: ARRAY
31421: PPUSH
31422: LD_VAR 0 14
31426: PUSH
31427: LD_VAR 0 9
31431: ARRAY
31432: PUSH
31433: LD_INT 2
31435: ARRAY
31436: PPUSH
31437: CALL_OW 428
31441: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31442: LD_VAR 0 14
31446: PUSH
31447: LD_VAR 0 9
31451: ARRAY
31452: PUSH
31453: LD_INT 1
31455: ARRAY
31456: PPUSH
31457: LD_VAR 0 14
31461: PUSH
31462: LD_VAR 0 9
31466: ARRAY
31467: PUSH
31468: LD_INT 2
31470: ARRAY
31471: PPUSH
31472: CALL_OW 351
31476: PUSH
31477: LD_VAR 0 14
31481: PUSH
31482: LD_VAR 0 9
31486: ARRAY
31487: PUSH
31488: LD_INT 1
31490: ARRAY
31491: PPUSH
31492: LD_VAR 0 14
31496: PUSH
31497: LD_VAR 0 9
31501: ARRAY
31502: PUSH
31503: LD_INT 2
31505: ARRAY
31506: PPUSH
31507: CALL_OW 488
31511: NOT
31512: OR
31513: PUSH
31514: LD_VAR 0 13
31518: PPUSH
31519: CALL_OW 247
31523: PUSH
31524: LD_INT 3
31526: EQUAL
31527: OR
31528: IFFALSE 31534
// exit ;
31530: POP
31531: POP
31532: GO 32078
// if not tmp then
31534: LD_VAR 0 13
31538: NOT
31539: IFFALSE 31543
// continue ;
31541: GO 31399
// result := true ;
31543: LD_ADDR_VAR 0 8
31547: PUSH
31548: LD_INT 1
31550: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
31551: LD_VAR 0 6
31555: PUSH
31556: LD_VAR 0 13
31560: PPUSH
31561: CALL_OW 247
31565: PUSH
31566: LD_INT 2
31568: EQUAL
31569: AND
31570: PUSH
31571: LD_VAR 0 13
31575: PPUSH
31576: CALL_OW 263
31580: PUSH
31581: LD_INT 1
31583: EQUAL
31584: AND
31585: IFFALSE 31749
// begin if IsDrivenBy ( tmp ) then
31587: LD_VAR 0 13
31591: PPUSH
31592: CALL_OW 311
31596: IFFALSE 31600
// continue ;
31598: GO 31399
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
31600: LD_VAR 0 6
31604: PPUSH
31605: LD_INT 3
31607: PUSH
31608: LD_INT 60
31610: PUSH
31611: EMPTY
31612: LIST
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 3
31620: PUSH
31621: LD_INT 55
31623: PUSH
31624: EMPTY
31625: LIST
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PPUSH
31635: CALL_OW 72
31639: IFFALSE 31747
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
31641: LD_ADDR_VAR 0 18
31645: PUSH
31646: LD_VAR 0 6
31650: PPUSH
31651: LD_INT 3
31653: PUSH
31654: LD_INT 60
31656: PUSH
31657: EMPTY
31658: LIST
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 3
31666: PUSH
31667: LD_INT 55
31669: PUSH
31670: EMPTY
31671: LIST
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PPUSH
31681: CALL_OW 72
31685: PUSH
31686: LD_INT 1
31688: ARRAY
31689: ST_TO_ADDR
// if IsInUnit ( driver ) then
31690: LD_VAR 0 18
31694: PPUSH
31695: CALL_OW 310
31699: IFFALSE 31710
// ComExit ( driver ) ;
31701: LD_VAR 0 18
31705: PPUSH
31706: CALL 56443 0 1
// AddComEnterUnit ( driver , tmp ) ;
31710: LD_VAR 0 18
31714: PPUSH
31715: LD_VAR 0 13
31719: PPUSH
31720: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
31724: LD_VAR 0 18
31728: PPUSH
31729: LD_VAR 0 7
31733: PPUSH
31734: CALL_OW 173
// AddComExitVehicle ( driver ) ;
31738: LD_VAR 0 18
31742: PPUSH
31743: CALL_OW 181
// end ; continue ;
31747: GO 31399
// end ; if not cleaners or not tmp in cleaners then
31749: LD_VAR 0 6
31753: NOT
31754: PUSH
31755: LD_VAR 0 13
31759: PUSH
31760: LD_VAR 0 6
31764: IN
31765: NOT
31766: OR
31767: IFFALSE 32074
// begin if dep then
31769: LD_VAR 0 17
31773: IFFALSE 31909
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
31775: LD_ADDR_VAR 0 16
31779: PUSH
31780: LD_VAR 0 17
31784: PUSH
31785: LD_INT 1
31787: ARRAY
31788: PPUSH
31789: CALL_OW 250
31793: PPUSH
31794: LD_VAR 0 17
31798: PUSH
31799: LD_INT 1
31801: ARRAY
31802: PPUSH
31803: CALL_OW 254
31807: PPUSH
31808: LD_INT 5
31810: PPUSH
31811: CALL_OW 272
31815: PUSH
31816: LD_VAR 0 17
31820: PUSH
31821: LD_INT 1
31823: ARRAY
31824: PPUSH
31825: CALL_OW 251
31829: PPUSH
31830: LD_VAR 0 17
31834: PUSH
31835: LD_INT 1
31837: ARRAY
31838: PPUSH
31839: CALL_OW 254
31843: PPUSH
31844: LD_INT 5
31846: PPUSH
31847: CALL_OW 273
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
31856: LD_VAR 0 16
31860: PUSH
31861: LD_INT 1
31863: ARRAY
31864: PPUSH
31865: LD_VAR 0 16
31869: PUSH
31870: LD_INT 2
31872: ARRAY
31873: PPUSH
31874: CALL_OW 488
31878: IFFALSE 31909
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
31880: LD_VAR 0 13
31884: PPUSH
31885: LD_VAR 0 16
31889: PUSH
31890: LD_INT 1
31892: ARRAY
31893: PPUSH
31894: LD_VAR 0 16
31898: PUSH
31899: LD_INT 2
31901: ARRAY
31902: PPUSH
31903: CALL_OW 111
// continue ;
31907: GO 31399
// end ; end ; r := GetDir ( tmp ) ;
31909: LD_ADDR_VAR 0 15
31913: PUSH
31914: LD_VAR 0 13
31918: PPUSH
31919: CALL_OW 254
31923: ST_TO_ADDR
// if r = 5 then
31924: LD_VAR 0 15
31928: PUSH
31929: LD_INT 5
31931: EQUAL
31932: IFFALSE 31942
// r := 0 ;
31934: LD_ADDR_VAR 0 15
31938: PUSH
31939: LD_INT 0
31941: ST_TO_ADDR
// for j = r to 5 do
31942: LD_ADDR_VAR 0 10
31946: PUSH
31947: DOUBLE
31948: LD_VAR 0 15
31952: DEC
31953: ST_TO_ADDR
31954: LD_INT 5
31956: PUSH
31957: FOR_TO
31958: IFFALSE 32072
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
31960: LD_ADDR_VAR 0 11
31964: PUSH
31965: LD_VAR 0 13
31969: PPUSH
31970: CALL_OW 250
31974: PPUSH
31975: LD_VAR 0 10
31979: PPUSH
31980: LD_INT 2
31982: PPUSH
31983: CALL_OW 272
31987: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
31988: LD_ADDR_VAR 0 12
31992: PUSH
31993: LD_VAR 0 13
31997: PPUSH
31998: CALL_OW 251
32002: PPUSH
32003: LD_VAR 0 10
32007: PPUSH
32008: LD_INT 2
32010: PPUSH
32011: CALL_OW 273
32015: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32016: LD_VAR 0 11
32020: PPUSH
32021: LD_VAR 0 12
32025: PPUSH
32026: CALL_OW 488
32030: PUSH
32031: LD_VAR 0 11
32035: PPUSH
32036: LD_VAR 0 12
32040: PPUSH
32041: CALL_OW 428
32045: NOT
32046: AND
32047: IFFALSE 32070
// begin ComMoveXY ( tmp , _x , _y ) ;
32049: LD_VAR 0 13
32053: PPUSH
32054: LD_VAR 0 11
32058: PPUSH
32059: LD_VAR 0 12
32063: PPUSH
32064: CALL_OW 111
// break ;
32068: GO 32072
// end ; end ;
32070: GO 31957
32072: POP
32073: POP
// end ; end ;
32074: GO 31399
32076: POP
32077: POP
// end ;
32078: LD_VAR 0 8
32082: RET
// export function BuildingTechInvented ( side , btype ) ; begin
32083: LD_INT 0
32085: PPUSH
// result := true ;
32086: LD_ADDR_VAR 0 3
32090: PUSH
32091: LD_INT 1
32093: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
32094: LD_VAR 0 2
32098: PUSH
32099: LD_INT 24
32101: DOUBLE
32102: EQUAL
32103: IFTRUE 32113
32105: LD_INT 33
32107: DOUBLE
32108: EQUAL
32109: IFTRUE 32113
32111: GO 32138
32113: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
32114: LD_ADDR_VAR 0 3
32118: PUSH
32119: LD_INT 32
32121: PPUSH
32122: LD_VAR 0 1
32126: PPUSH
32127: CALL_OW 321
32131: PUSH
32132: LD_INT 2
32134: EQUAL
32135: ST_TO_ADDR
32136: GO 32458
32138: LD_INT 20
32140: DOUBLE
32141: EQUAL
32142: IFTRUE 32146
32144: GO 32171
32146: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
32147: LD_ADDR_VAR 0 3
32151: PUSH
32152: LD_INT 6
32154: PPUSH
32155: LD_VAR 0 1
32159: PPUSH
32160: CALL_OW 321
32164: PUSH
32165: LD_INT 2
32167: EQUAL
32168: ST_TO_ADDR
32169: GO 32458
32171: LD_INT 22
32173: DOUBLE
32174: EQUAL
32175: IFTRUE 32185
32177: LD_INT 36
32179: DOUBLE
32180: EQUAL
32181: IFTRUE 32185
32183: GO 32210
32185: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
32186: LD_ADDR_VAR 0 3
32190: PUSH
32191: LD_INT 15
32193: PPUSH
32194: LD_VAR 0 1
32198: PPUSH
32199: CALL_OW 321
32203: PUSH
32204: LD_INT 2
32206: EQUAL
32207: ST_TO_ADDR
32208: GO 32458
32210: LD_INT 30
32212: DOUBLE
32213: EQUAL
32214: IFTRUE 32218
32216: GO 32243
32218: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
32219: LD_ADDR_VAR 0 3
32223: PUSH
32224: LD_INT 20
32226: PPUSH
32227: LD_VAR 0 1
32231: PPUSH
32232: CALL_OW 321
32236: PUSH
32237: LD_INT 2
32239: EQUAL
32240: ST_TO_ADDR
32241: GO 32458
32243: LD_INT 28
32245: DOUBLE
32246: EQUAL
32247: IFTRUE 32257
32249: LD_INT 21
32251: DOUBLE
32252: EQUAL
32253: IFTRUE 32257
32255: GO 32282
32257: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
32258: LD_ADDR_VAR 0 3
32262: PUSH
32263: LD_INT 21
32265: PPUSH
32266: LD_VAR 0 1
32270: PPUSH
32271: CALL_OW 321
32275: PUSH
32276: LD_INT 2
32278: EQUAL
32279: ST_TO_ADDR
32280: GO 32458
32282: LD_INT 16
32284: DOUBLE
32285: EQUAL
32286: IFTRUE 32290
32288: GO 32317
32290: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
32291: LD_ADDR_VAR 0 3
32295: PUSH
32296: LD_EXP 83
32300: PPUSH
32301: LD_VAR 0 1
32305: PPUSH
32306: CALL_OW 321
32310: PUSH
32311: LD_INT 2
32313: EQUAL
32314: ST_TO_ADDR
32315: GO 32458
32317: LD_INT 19
32319: DOUBLE
32320: EQUAL
32321: IFTRUE 32331
32323: LD_INT 23
32325: DOUBLE
32326: EQUAL
32327: IFTRUE 32331
32329: GO 32358
32331: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
32332: LD_ADDR_VAR 0 3
32336: PUSH
32337: LD_EXP 82
32341: PPUSH
32342: LD_VAR 0 1
32346: PPUSH
32347: CALL_OW 321
32351: PUSH
32352: LD_INT 2
32354: EQUAL
32355: ST_TO_ADDR
32356: GO 32458
32358: LD_INT 17
32360: DOUBLE
32361: EQUAL
32362: IFTRUE 32366
32364: GO 32391
32366: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
32367: LD_ADDR_VAR 0 3
32371: PUSH
32372: LD_INT 39
32374: PPUSH
32375: LD_VAR 0 1
32379: PPUSH
32380: CALL_OW 321
32384: PUSH
32385: LD_INT 2
32387: EQUAL
32388: ST_TO_ADDR
32389: GO 32458
32391: LD_INT 18
32393: DOUBLE
32394: EQUAL
32395: IFTRUE 32399
32397: GO 32424
32399: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
32400: LD_ADDR_VAR 0 3
32404: PUSH
32405: LD_INT 40
32407: PPUSH
32408: LD_VAR 0 1
32412: PPUSH
32413: CALL_OW 321
32417: PUSH
32418: LD_INT 2
32420: EQUAL
32421: ST_TO_ADDR
32422: GO 32458
32424: LD_INT 27
32426: DOUBLE
32427: EQUAL
32428: IFTRUE 32432
32430: GO 32457
32432: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
32433: LD_ADDR_VAR 0 3
32437: PUSH
32438: LD_INT 35
32440: PPUSH
32441: LD_VAR 0 1
32445: PPUSH
32446: CALL_OW 321
32450: PUSH
32451: LD_INT 2
32453: EQUAL
32454: ST_TO_ADDR
32455: GO 32458
32457: POP
// end ;
32458: LD_VAR 0 3
32462: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
32463: LD_INT 0
32465: PPUSH
32466: PPUSH
32467: PPUSH
32468: PPUSH
32469: PPUSH
32470: PPUSH
32471: PPUSH
32472: PPUSH
32473: PPUSH
32474: PPUSH
32475: PPUSH
// result := false ;
32476: LD_ADDR_VAR 0 6
32480: PUSH
32481: LD_INT 0
32483: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
32484: LD_VAR 0 1
32488: NOT
32489: PUSH
32490: LD_VAR 0 1
32494: PPUSH
32495: CALL_OW 266
32499: PUSH
32500: LD_INT 0
32502: PUSH
32503: LD_INT 1
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: IN
32510: NOT
32511: OR
32512: PUSH
32513: LD_VAR 0 2
32517: NOT
32518: OR
32519: PUSH
32520: LD_VAR 0 5
32524: PUSH
32525: LD_INT 0
32527: PUSH
32528: LD_INT 1
32530: PUSH
32531: LD_INT 2
32533: PUSH
32534: LD_INT 3
32536: PUSH
32537: LD_INT 4
32539: PUSH
32540: LD_INT 5
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: IN
32551: NOT
32552: OR
32553: PUSH
32554: LD_VAR 0 3
32558: PPUSH
32559: LD_VAR 0 4
32563: PPUSH
32564: CALL_OW 488
32568: NOT
32569: OR
32570: IFFALSE 32574
// exit ;
32572: GO 33310
// side := GetSide ( depot ) ;
32574: LD_ADDR_VAR 0 9
32578: PUSH
32579: LD_VAR 0 1
32583: PPUSH
32584: CALL_OW 255
32588: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
32589: LD_VAR 0 9
32593: PPUSH
32594: LD_VAR 0 2
32598: PPUSH
32599: CALL 32083 0 2
32603: NOT
32604: IFFALSE 32608
// exit ;
32606: GO 33310
// pom := GetBase ( depot ) ;
32608: LD_ADDR_VAR 0 10
32612: PUSH
32613: LD_VAR 0 1
32617: PPUSH
32618: CALL_OW 274
32622: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
32623: LD_ADDR_VAR 0 11
32627: PUSH
32628: LD_VAR 0 2
32632: PPUSH
32633: LD_VAR 0 1
32637: PPUSH
32638: CALL_OW 248
32642: PPUSH
32643: CALL_OW 450
32647: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
32648: LD_VAR 0 10
32652: PPUSH
32653: LD_INT 1
32655: PPUSH
32656: CALL_OW 275
32660: PUSH
32661: LD_VAR 0 11
32665: PUSH
32666: LD_INT 1
32668: ARRAY
32669: GREATEREQUAL
32670: PUSH
32671: LD_VAR 0 10
32675: PPUSH
32676: LD_INT 2
32678: PPUSH
32679: CALL_OW 275
32683: PUSH
32684: LD_VAR 0 11
32688: PUSH
32689: LD_INT 2
32691: ARRAY
32692: GREATEREQUAL
32693: AND
32694: PUSH
32695: LD_VAR 0 10
32699: PPUSH
32700: LD_INT 3
32702: PPUSH
32703: CALL_OW 275
32707: PUSH
32708: LD_VAR 0 11
32712: PUSH
32713: LD_INT 3
32715: ARRAY
32716: GREATEREQUAL
32717: AND
32718: NOT
32719: IFFALSE 32723
// exit ;
32721: GO 33310
// if GetBType ( depot ) = b_depot then
32723: LD_VAR 0 1
32727: PPUSH
32728: CALL_OW 266
32732: PUSH
32733: LD_INT 0
32735: EQUAL
32736: IFFALSE 32748
// dist := 28 else
32738: LD_ADDR_VAR 0 14
32742: PUSH
32743: LD_INT 28
32745: ST_TO_ADDR
32746: GO 32756
// dist := 36 ;
32748: LD_ADDR_VAR 0 14
32752: PUSH
32753: LD_INT 36
32755: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
32756: LD_VAR 0 1
32760: PPUSH
32761: LD_VAR 0 3
32765: PPUSH
32766: LD_VAR 0 4
32770: PPUSH
32771: CALL_OW 297
32775: PUSH
32776: LD_VAR 0 14
32780: GREATER
32781: IFFALSE 32785
// exit ;
32783: GO 33310
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
32785: LD_ADDR_VAR 0 12
32789: PUSH
32790: LD_VAR 0 2
32794: PPUSH
32795: LD_VAR 0 3
32799: PPUSH
32800: LD_VAR 0 4
32804: PPUSH
32805: LD_VAR 0 5
32809: PPUSH
32810: LD_VAR 0 1
32814: PPUSH
32815: CALL_OW 248
32819: PPUSH
32820: LD_INT 0
32822: PPUSH
32823: CALL 33315 0 6
32827: ST_TO_ADDR
// if not hexes then
32828: LD_VAR 0 12
32832: NOT
32833: IFFALSE 32837
// exit ;
32835: GO 33310
// hex := GetHexInfo ( x , y ) ;
32837: LD_ADDR_VAR 0 15
32841: PUSH
32842: LD_VAR 0 3
32846: PPUSH
32847: LD_VAR 0 4
32851: PPUSH
32852: CALL_OW 546
32856: ST_TO_ADDR
// if hex [ 1 ] then
32857: LD_VAR 0 15
32861: PUSH
32862: LD_INT 1
32864: ARRAY
32865: IFFALSE 32869
// exit ;
32867: GO 33310
// height := hex [ 2 ] ;
32869: LD_ADDR_VAR 0 13
32873: PUSH
32874: LD_VAR 0 15
32878: PUSH
32879: LD_INT 2
32881: ARRAY
32882: ST_TO_ADDR
// for i = 1 to hexes do
32883: LD_ADDR_VAR 0 7
32887: PUSH
32888: DOUBLE
32889: LD_INT 1
32891: DEC
32892: ST_TO_ADDR
32893: LD_VAR 0 12
32897: PUSH
32898: FOR_TO
32899: IFFALSE 33229
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
32901: LD_VAR 0 12
32905: PUSH
32906: LD_VAR 0 7
32910: ARRAY
32911: PUSH
32912: LD_INT 1
32914: ARRAY
32915: PPUSH
32916: LD_VAR 0 12
32920: PUSH
32921: LD_VAR 0 7
32925: ARRAY
32926: PUSH
32927: LD_INT 2
32929: ARRAY
32930: PPUSH
32931: CALL_OW 488
32935: NOT
32936: PUSH
32937: LD_VAR 0 12
32941: PUSH
32942: LD_VAR 0 7
32946: ARRAY
32947: PUSH
32948: LD_INT 1
32950: ARRAY
32951: PPUSH
32952: LD_VAR 0 12
32956: PUSH
32957: LD_VAR 0 7
32961: ARRAY
32962: PUSH
32963: LD_INT 2
32965: ARRAY
32966: PPUSH
32967: CALL_OW 428
32971: PUSH
32972: LD_INT 0
32974: GREATER
32975: OR
32976: PUSH
32977: LD_VAR 0 12
32981: PUSH
32982: LD_VAR 0 7
32986: ARRAY
32987: PUSH
32988: LD_INT 1
32990: ARRAY
32991: PPUSH
32992: LD_VAR 0 12
32996: PUSH
32997: LD_VAR 0 7
33001: ARRAY
33002: PUSH
33003: LD_INT 2
33005: ARRAY
33006: PPUSH
33007: CALL_OW 351
33011: OR
33012: IFFALSE 33018
// exit ;
33014: POP
33015: POP
33016: GO 33310
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33018: LD_ADDR_VAR 0 8
33022: PUSH
33023: LD_VAR 0 12
33027: PUSH
33028: LD_VAR 0 7
33032: ARRAY
33033: PUSH
33034: LD_INT 1
33036: ARRAY
33037: PPUSH
33038: LD_VAR 0 12
33042: PUSH
33043: LD_VAR 0 7
33047: ARRAY
33048: PUSH
33049: LD_INT 2
33051: ARRAY
33052: PPUSH
33053: CALL_OW 546
33057: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33058: LD_VAR 0 8
33062: PUSH
33063: LD_INT 1
33065: ARRAY
33066: PUSH
33067: LD_VAR 0 8
33071: PUSH
33072: LD_INT 2
33074: ARRAY
33075: PUSH
33076: LD_VAR 0 13
33080: PUSH
33081: LD_INT 2
33083: PLUS
33084: GREATER
33085: OR
33086: PUSH
33087: LD_VAR 0 8
33091: PUSH
33092: LD_INT 2
33094: ARRAY
33095: PUSH
33096: LD_VAR 0 13
33100: PUSH
33101: LD_INT 2
33103: MINUS
33104: LESS
33105: OR
33106: PUSH
33107: LD_VAR 0 8
33111: PUSH
33112: LD_INT 3
33114: ARRAY
33115: PUSH
33116: LD_INT 0
33118: PUSH
33119: LD_INT 8
33121: PUSH
33122: LD_INT 9
33124: PUSH
33125: LD_INT 10
33127: PUSH
33128: LD_INT 11
33130: PUSH
33131: LD_INT 12
33133: PUSH
33134: LD_INT 13
33136: PUSH
33137: LD_INT 16
33139: PUSH
33140: LD_INT 17
33142: PUSH
33143: LD_INT 18
33145: PUSH
33146: LD_INT 19
33148: PUSH
33149: LD_INT 20
33151: PUSH
33152: LD_INT 21
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: IN
33170: NOT
33171: OR
33172: PUSH
33173: LD_VAR 0 8
33177: PUSH
33178: LD_INT 5
33180: ARRAY
33181: NOT
33182: OR
33183: PUSH
33184: LD_VAR 0 8
33188: PUSH
33189: LD_INT 6
33191: ARRAY
33192: PUSH
33193: LD_INT 1
33195: PUSH
33196: LD_INT 2
33198: PUSH
33199: LD_INT 7
33201: PUSH
33202: LD_INT 9
33204: PUSH
33205: LD_INT 10
33207: PUSH
33208: LD_INT 11
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: IN
33219: NOT
33220: OR
33221: IFFALSE 33227
// exit ;
33223: POP
33224: POP
33225: GO 33310
// end ;
33227: GO 32898
33229: POP
33230: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33231: LD_VAR 0 9
33235: PPUSH
33236: LD_VAR 0 3
33240: PPUSH
33241: LD_VAR 0 4
33245: PPUSH
33246: LD_INT 20
33248: PPUSH
33249: CALL 25256 0 4
33253: PUSH
33254: LD_INT 4
33256: ARRAY
33257: IFFALSE 33261
// exit ;
33259: GO 33310
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33261: LD_VAR 0 2
33265: PUSH
33266: LD_INT 29
33268: PUSH
33269: LD_INT 30
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: IN
33276: PUSH
33277: LD_VAR 0 3
33281: PPUSH
33282: LD_VAR 0 4
33286: PPUSH
33287: LD_VAR 0 9
33291: PPUSH
33292: CALL_OW 440
33296: NOT
33297: AND
33298: IFFALSE 33302
// exit ;
33300: GO 33310
// result := true ;
33302: LD_ADDR_VAR 0 6
33306: PUSH
33307: LD_INT 1
33309: ST_TO_ADDR
// end ;
33310: LD_VAR 0 6
33314: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
33315: LD_INT 0
33317: PPUSH
33318: PPUSH
33319: PPUSH
33320: PPUSH
33321: PPUSH
33322: PPUSH
33323: PPUSH
33324: PPUSH
33325: PPUSH
33326: PPUSH
33327: PPUSH
33328: PPUSH
33329: PPUSH
33330: PPUSH
33331: PPUSH
33332: PPUSH
33333: PPUSH
33334: PPUSH
33335: PPUSH
33336: PPUSH
33337: PPUSH
33338: PPUSH
33339: PPUSH
33340: PPUSH
33341: PPUSH
33342: PPUSH
33343: PPUSH
33344: PPUSH
33345: PPUSH
33346: PPUSH
33347: PPUSH
33348: PPUSH
33349: PPUSH
33350: PPUSH
33351: PPUSH
33352: PPUSH
33353: PPUSH
33354: PPUSH
33355: PPUSH
33356: PPUSH
33357: PPUSH
33358: PPUSH
33359: PPUSH
33360: PPUSH
33361: PPUSH
33362: PPUSH
33363: PPUSH
33364: PPUSH
33365: PPUSH
33366: PPUSH
33367: PPUSH
33368: PPUSH
33369: PPUSH
33370: PPUSH
33371: PPUSH
33372: PPUSH
33373: PPUSH
33374: PPUSH
// result = [ ] ;
33375: LD_ADDR_VAR 0 7
33379: PUSH
33380: EMPTY
33381: ST_TO_ADDR
// temp_list = [ ] ;
33382: LD_ADDR_VAR 0 9
33386: PUSH
33387: EMPTY
33388: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
33389: LD_VAR 0 4
33393: PUSH
33394: LD_INT 0
33396: PUSH
33397: LD_INT 1
33399: PUSH
33400: LD_INT 2
33402: PUSH
33403: LD_INT 3
33405: PUSH
33406: LD_INT 4
33408: PUSH
33409: LD_INT 5
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: IN
33420: NOT
33421: PUSH
33422: LD_VAR 0 1
33426: PUSH
33427: LD_INT 0
33429: PUSH
33430: LD_INT 1
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: IN
33437: PUSH
33438: LD_VAR 0 5
33442: PUSH
33443: LD_INT 1
33445: PUSH
33446: LD_INT 2
33448: PUSH
33449: LD_INT 3
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: LIST
33456: IN
33457: NOT
33458: AND
33459: OR
33460: IFFALSE 33464
// exit ;
33462: GO 51855
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
33464: LD_VAR 0 1
33468: PUSH
33469: LD_INT 6
33471: PUSH
33472: LD_INT 7
33474: PUSH
33475: LD_INT 8
33477: PUSH
33478: LD_INT 13
33480: PUSH
33481: LD_INT 12
33483: PUSH
33484: LD_INT 15
33486: PUSH
33487: LD_INT 11
33489: PUSH
33490: LD_INT 14
33492: PUSH
33493: LD_INT 10
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: IN
33507: IFFALSE 33517
// btype = b_lab ;
33509: LD_ADDR_VAR 0 1
33513: PUSH
33514: LD_INT 6
33516: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
33517: LD_VAR 0 6
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: LD_INT 1
33527: PUSH
33528: LD_INT 2
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: LIST
33535: IN
33536: NOT
33537: PUSH
33538: LD_VAR 0 1
33542: PUSH
33543: LD_INT 0
33545: PUSH
33546: LD_INT 1
33548: PUSH
33549: LD_INT 2
33551: PUSH
33552: LD_INT 3
33554: PUSH
33555: LD_INT 6
33557: PUSH
33558: LD_INT 36
33560: PUSH
33561: LD_INT 4
33563: PUSH
33564: LD_INT 5
33566: PUSH
33567: LD_INT 31
33569: PUSH
33570: LD_INT 32
33572: PUSH
33573: LD_INT 33
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: IN
33589: NOT
33590: PUSH
33591: LD_VAR 0 6
33595: PUSH
33596: LD_INT 1
33598: EQUAL
33599: AND
33600: OR
33601: PUSH
33602: LD_VAR 0 1
33606: PUSH
33607: LD_INT 2
33609: PUSH
33610: LD_INT 3
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: IN
33617: NOT
33618: PUSH
33619: LD_VAR 0 6
33623: PUSH
33624: LD_INT 2
33626: EQUAL
33627: AND
33628: OR
33629: IFFALSE 33639
// mode = 0 ;
33631: LD_ADDR_VAR 0 6
33635: PUSH
33636: LD_INT 0
33638: ST_TO_ADDR
// case mode of 0 :
33639: LD_VAR 0 6
33643: PUSH
33644: LD_INT 0
33646: DOUBLE
33647: EQUAL
33648: IFTRUE 33652
33650: GO 45105
33652: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33653: LD_ADDR_VAR 0 11
33657: PUSH
33658: LD_INT 0
33660: PUSH
33661: LD_INT 0
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 0
33670: PUSH
33671: LD_INT 1
33673: NEG
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 1
33681: PUSH
33682: LD_INT 0
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 1
33691: PUSH
33692: LD_INT 1
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 0
33701: PUSH
33702: LD_INT 1
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 1
33711: NEG
33712: PUSH
33713: LD_INT 0
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 1
33722: NEG
33723: PUSH
33724: LD_INT 1
33726: NEG
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 1
33734: NEG
33735: PUSH
33736: LD_INT 2
33738: NEG
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: LD_INT 0
33746: PUSH
33747: LD_INT 2
33749: NEG
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 1
33757: PUSH
33758: LD_INT 1
33760: NEG
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 1
33768: PUSH
33769: LD_INT 2
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 0
33778: PUSH
33779: LD_INT 2
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 1
33788: NEG
33789: PUSH
33790: LD_INT 1
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 1
33799: PUSH
33800: LD_INT 3
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 0
33809: PUSH
33810: LD_INT 3
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 1
33819: NEG
33820: PUSH
33821: LD_INT 2
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33846: LD_ADDR_VAR 0 12
33850: PUSH
33851: LD_INT 0
33853: PUSH
33854: LD_INT 0
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 0
33863: PUSH
33864: LD_INT 1
33866: NEG
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 1
33874: PUSH
33875: LD_INT 0
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 1
33884: PUSH
33885: LD_INT 1
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 0
33894: PUSH
33895: LD_INT 1
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 1
33904: NEG
33905: PUSH
33906: LD_INT 0
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 1
33915: NEG
33916: PUSH
33917: LD_INT 1
33919: NEG
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 1
33927: PUSH
33928: LD_INT 1
33930: NEG
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 2
33938: PUSH
33939: LD_INT 0
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 2
33948: PUSH
33949: LD_INT 1
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 1
33958: NEG
33959: PUSH
33960: LD_INT 1
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 2
33969: NEG
33970: PUSH
33971: LD_INT 0
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 2
33980: NEG
33981: PUSH
33982: LD_INT 1
33984: NEG
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 2
33992: NEG
33993: PUSH
33994: LD_INT 1
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 3
34003: NEG
34004: PUSH
34005: LD_INT 0
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 3
34014: NEG
34015: PUSH
34016: LD_INT 1
34018: NEG
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34042: LD_ADDR_VAR 0 13
34046: PUSH
34047: LD_INT 0
34049: PUSH
34050: LD_INT 0
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: LD_INT 0
34059: PUSH
34060: LD_INT 1
34062: NEG
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 1
34070: PUSH
34071: LD_INT 0
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 1
34080: PUSH
34081: LD_INT 1
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 0
34090: PUSH
34091: LD_INT 1
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 1
34100: NEG
34101: PUSH
34102: LD_INT 0
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 1
34111: NEG
34112: PUSH
34113: LD_INT 1
34115: NEG
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 1
34123: NEG
34124: PUSH
34125: LD_INT 2
34127: NEG
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 2
34135: PUSH
34136: LD_INT 1
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 2
34145: PUSH
34146: LD_INT 2
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 1
34155: PUSH
34156: LD_INT 2
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 2
34165: NEG
34166: PUSH
34167: LD_INT 1
34169: NEG
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 2
34177: NEG
34178: PUSH
34179: LD_INT 2
34181: NEG
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 2
34189: NEG
34190: PUSH
34191: LD_INT 3
34193: NEG
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 3
34201: NEG
34202: PUSH
34203: LD_INT 2
34205: NEG
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 3
34213: NEG
34214: PUSH
34215: LD_INT 3
34217: NEG
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34241: LD_ADDR_VAR 0 14
34245: PUSH
34246: LD_INT 0
34248: PUSH
34249: LD_INT 0
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 0
34258: PUSH
34259: LD_INT 1
34261: NEG
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 1
34269: PUSH
34270: LD_INT 0
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 1
34279: PUSH
34280: LD_INT 1
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 0
34289: PUSH
34290: LD_INT 1
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PUSH
34297: LD_INT 1
34299: NEG
34300: PUSH
34301: LD_INT 0
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 1
34310: NEG
34311: PUSH
34312: LD_INT 1
34314: NEG
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 1
34322: NEG
34323: PUSH
34324: LD_INT 2
34326: NEG
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 0
34334: PUSH
34335: LD_INT 2
34337: NEG
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: LD_INT 1
34345: PUSH
34346: LD_INT 1
34348: NEG
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 1
34356: PUSH
34357: LD_INT 2
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 0
34366: PUSH
34367: LD_INT 2
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 1
34376: NEG
34377: PUSH
34378: LD_INT 1
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 1
34387: NEG
34388: PUSH
34389: LD_INT 3
34391: NEG
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 0
34399: PUSH
34400: LD_INT 3
34402: NEG
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 1
34410: PUSH
34411: LD_INT 2
34413: NEG
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34437: LD_ADDR_VAR 0 15
34441: PUSH
34442: LD_INT 0
34444: PUSH
34445: LD_INT 0
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 0
34454: PUSH
34455: LD_INT 1
34457: NEG
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 1
34465: PUSH
34466: LD_INT 0
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 1
34475: PUSH
34476: LD_INT 1
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 0
34485: PUSH
34486: LD_INT 1
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 1
34495: NEG
34496: PUSH
34497: LD_INT 0
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: LD_INT 1
34506: NEG
34507: PUSH
34508: LD_INT 1
34510: NEG
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 1
34518: PUSH
34519: LD_INT 1
34521: NEG
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 2
34529: PUSH
34530: LD_INT 0
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 2
34539: PUSH
34540: LD_INT 1
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 1
34549: NEG
34550: PUSH
34551: LD_INT 1
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 2
34560: NEG
34561: PUSH
34562: LD_INT 0
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 2
34571: NEG
34572: PUSH
34573: LD_INT 1
34575: NEG
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 2
34583: PUSH
34584: LD_INT 1
34586: NEG
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 3
34594: PUSH
34595: LD_INT 0
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 3
34604: PUSH
34605: LD_INT 1
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34630: LD_ADDR_VAR 0 16
34634: PUSH
34635: LD_INT 0
34637: PUSH
34638: LD_INT 0
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 0
34647: PUSH
34648: LD_INT 1
34650: NEG
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 1
34658: PUSH
34659: LD_INT 0
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 1
34668: PUSH
34669: LD_INT 1
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 0
34678: PUSH
34679: LD_INT 1
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 1
34688: NEG
34689: PUSH
34690: LD_INT 0
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 1
34699: NEG
34700: PUSH
34701: LD_INT 1
34703: NEG
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 1
34711: NEG
34712: PUSH
34713: LD_INT 2
34715: NEG
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 2
34723: PUSH
34724: LD_INT 1
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 2
34733: PUSH
34734: LD_INT 2
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 1
34743: PUSH
34744: LD_INT 2
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 2
34753: NEG
34754: PUSH
34755: LD_INT 1
34757: NEG
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 2
34765: NEG
34766: PUSH
34767: LD_INT 2
34769: NEG
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 3
34777: PUSH
34778: LD_INT 2
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 3
34787: PUSH
34788: LD_INT 3
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 2
34797: PUSH
34798: LD_INT 3
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34823: LD_ADDR_VAR 0 17
34827: PUSH
34828: LD_INT 0
34830: PUSH
34831: LD_INT 0
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: LD_INT 0
34840: PUSH
34841: LD_INT 1
34843: NEG
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 1
34851: PUSH
34852: LD_INT 0
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 1
34861: PUSH
34862: LD_INT 1
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 0
34871: PUSH
34872: LD_INT 1
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 1
34881: NEG
34882: PUSH
34883: LD_INT 0
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 1
34892: NEG
34893: PUSH
34894: LD_INT 1
34896: NEG
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 1
34904: NEG
34905: PUSH
34906: LD_INT 2
34908: NEG
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 0
34916: PUSH
34917: LD_INT 2
34919: NEG
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 1
34927: PUSH
34928: LD_INT 1
34930: NEG
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 2
34938: PUSH
34939: LD_INT 0
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 2
34948: PUSH
34949: LD_INT 1
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: LD_INT 2
34958: PUSH
34959: LD_INT 2
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 1
34968: PUSH
34969: LD_INT 2
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: LD_INT 0
34978: PUSH
34979: LD_INT 2
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 1
34988: NEG
34989: PUSH
34990: LD_INT 1
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 2
34999: NEG
35000: PUSH
35001: LD_INT 0
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 2
35010: NEG
35011: PUSH
35012: LD_INT 1
35014: NEG
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 2
35022: NEG
35023: PUSH
35024: LD_INT 2
35026: NEG
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35053: LD_ADDR_VAR 0 18
35057: PUSH
35058: LD_INT 0
35060: PUSH
35061: LD_INT 0
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 0
35070: PUSH
35071: LD_INT 1
35073: NEG
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 1
35081: PUSH
35082: LD_INT 0
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 1
35091: PUSH
35092: LD_INT 1
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 0
35101: PUSH
35102: LD_INT 1
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 1
35111: NEG
35112: PUSH
35113: LD_INT 0
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 1
35122: NEG
35123: PUSH
35124: LD_INT 1
35126: NEG
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 1
35134: NEG
35135: PUSH
35136: LD_INT 2
35138: NEG
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 0
35146: PUSH
35147: LD_INT 2
35149: NEG
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 1
35157: PUSH
35158: LD_INT 1
35160: NEG
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 2
35168: PUSH
35169: LD_INT 0
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 2
35178: PUSH
35179: LD_INT 1
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 2
35188: PUSH
35189: LD_INT 2
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 1
35198: PUSH
35199: LD_INT 2
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 0
35208: PUSH
35209: LD_INT 2
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 1
35218: NEG
35219: PUSH
35220: LD_INT 1
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 2
35229: NEG
35230: PUSH
35231: LD_INT 0
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 2
35240: NEG
35241: PUSH
35242: LD_INT 1
35244: NEG
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 2
35252: NEG
35253: PUSH
35254: LD_INT 2
35256: NEG
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35283: LD_ADDR_VAR 0 19
35287: PUSH
35288: LD_INT 0
35290: PUSH
35291: LD_INT 0
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 0
35300: PUSH
35301: LD_INT 1
35303: NEG
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 1
35311: PUSH
35312: LD_INT 0
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 1
35321: PUSH
35322: LD_INT 1
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 0
35331: PUSH
35332: LD_INT 1
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 1
35341: NEG
35342: PUSH
35343: LD_INT 0
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 1
35352: NEG
35353: PUSH
35354: LD_INT 1
35356: NEG
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 1
35364: NEG
35365: PUSH
35366: LD_INT 2
35368: NEG
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 0
35376: PUSH
35377: LD_INT 2
35379: NEG
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: LD_INT 1
35387: PUSH
35388: LD_INT 1
35390: NEG
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 2
35398: PUSH
35399: LD_INT 0
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: LD_INT 2
35408: PUSH
35409: LD_INT 1
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: LD_INT 2
35418: PUSH
35419: LD_INT 2
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 1
35428: PUSH
35429: LD_INT 2
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 0
35438: PUSH
35439: LD_INT 2
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 1
35448: NEG
35449: PUSH
35450: LD_INT 1
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 2
35459: NEG
35460: PUSH
35461: LD_INT 0
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 2
35470: NEG
35471: PUSH
35472: LD_INT 1
35474: NEG
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 2
35482: NEG
35483: PUSH
35484: LD_INT 2
35486: NEG
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35513: LD_ADDR_VAR 0 20
35517: PUSH
35518: LD_INT 0
35520: PUSH
35521: LD_INT 0
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 0
35530: PUSH
35531: LD_INT 1
35533: NEG
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 1
35541: PUSH
35542: LD_INT 0
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 1
35551: PUSH
35552: LD_INT 1
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 0
35561: PUSH
35562: LD_INT 1
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 1
35571: NEG
35572: PUSH
35573: LD_INT 0
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 1
35582: NEG
35583: PUSH
35584: LD_INT 1
35586: NEG
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 1
35594: NEG
35595: PUSH
35596: LD_INT 2
35598: NEG
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: LD_INT 0
35606: PUSH
35607: LD_INT 2
35609: NEG
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_INT 1
35617: PUSH
35618: LD_INT 1
35620: NEG
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 2
35628: PUSH
35629: LD_INT 0
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 2
35638: PUSH
35639: LD_INT 1
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 2
35648: PUSH
35649: LD_INT 2
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 1
35658: PUSH
35659: LD_INT 2
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 0
35668: PUSH
35669: LD_INT 2
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 1
35678: NEG
35679: PUSH
35680: LD_INT 1
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 2
35689: NEG
35690: PUSH
35691: LD_INT 0
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 2
35700: NEG
35701: PUSH
35702: LD_INT 1
35704: NEG
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 2
35712: NEG
35713: PUSH
35714: LD_INT 2
35716: NEG
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: LIST
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: LIST
35741: LIST
35742: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35743: LD_ADDR_VAR 0 21
35747: PUSH
35748: LD_INT 0
35750: PUSH
35751: LD_INT 0
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 0
35760: PUSH
35761: LD_INT 1
35763: NEG
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 1
35771: PUSH
35772: LD_INT 0
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 1
35781: PUSH
35782: LD_INT 1
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 0
35791: PUSH
35792: LD_INT 1
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 1
35801: NEG
35802: PUSH
35803: LD_INT 0
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 1
35812: NEG
35813: PUSH
35814: LD_INT 1
35816: NEG
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 1
35824: NEG
35825: PUSH
35826: LD_INT 2
35828: NEG
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 0
35836: PUSH
35837: LD_INT 2
35839: NEG
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 1
35847: PUSH
35848: LD_INT 1
35850: NEG
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 2
35858: PUSH
35859: LD_INT 0
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 2
35868: PUSH
35869: LD_INT 1
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 2
35878: PUSH
35879: LD_INT 2
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 1
35888: PUSH
35889: LD_INT 2
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 0
35898: PUSH
35899: LD_INT 2
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 1
35908: NEG
35909: PUSH
35910: LD_INT 1
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 2
35919: NEG
35920: PUSH
35921: LD_INT 0
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 2
35930: NEG
35931: PUSH
35932: LD_INT 1
35934: NEG
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 2
35942: NEG
35943: PUSH
35944: LD_INT 2
35946: NEG
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35973: LD_ADDR_VAR 0 22
35977: PUSH
35978: LD_INT 0
35980: PUSH
35981: LD_INT 0
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 0
35990: PUSH
35991: LD_INT 1
35993: NEG
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 1
36001: PUSH
36002: LD_INT 0
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 1
36011: PUSH
36012: LD_INT 1
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 0
36021: PUSH
36022: LD_INT 1
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: LD_INT 1
36031: NEG
36032: PUSH
36033: LD_INT 0
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: PUSH
36040: LD_INT 1
36042: NEG
36043: PUSH
36044: LD_INT 1
36046: NEG
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 1
36054: NEG
36055: PUSH
36056: LD_INT 2
36058: NEG
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 0
36066: PUSH
36067: LD_INT 2
36069: NEG
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 1
36077: PUSH
36078: LD_INT 1
36080: NEG
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 2
36088: PUSH
36089: LD_INT 0
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 2
36098: PUSH
36099: LD_INT 1
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 2
36108: PUSH
36109: LD_INT 2
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 1
36118: PUSH
36119: LD_INT 2
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 0
36128: PUSH
36129: LD_INT 2
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: LD_INT 1
36138: NEG
36139: PUSH
36140: LD_INT 1
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: LD_INT 2
36149: NEG
36150: PUSH
36151: LD_INT 0
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 2
36160: NEG
36161: PUSH
36162: LD_INT 1
36164: NEG
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 2
36172: NEG
36173: PUSH
36174: LD_INT 2
36176: NEG
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36203: LD_ADDR_VAR 0 23
36207: PUSH
36208: LD_INT 0
36210: PUSH
36211: LD_INT 0
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 0
36220: PUSH
36221: LD_INT 1
36223: NEG
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 1
36231: PUSH
36232: LD_INT 0
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: LD_INT 1
36241: PUSH
36242: LD_INT 1
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 0
36251: PUSH
36252: LD_INT 1
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: LD_INT 1
36261: NEG
36262: PUSH
36263: LD_INT 0
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 1
36272: NEG
36273: PUSH
36274: LD_INT 1
36276: NEG
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 1
36284: NEG
36285: PUSH
36286: LD_INT 2
36288: NEG
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 0
36296: PUSH
36297: LD_INT 2
36299: NEG
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 1
36307: PUSH
36308: LD_INT 1
36310: NEG
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 2
36318: PUSH
36319: LD_INT 0
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 2
36328: PUSH
36329: LD_INT 1
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 2
36338: PUSH
36339: LD_INT 2
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 1
36348: PUSH
36349: LD_INT 2
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 0
36358: PUSH
36359: LD_INT 2
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 1
36368: NEG
36369: PUSH
36370: LD_INT 1
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 2
36379: NEG
36380: PUSH
36381: LD_INT 0
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 2
36390: NEG
36391: PUSH
36392: LD_INT 1
36394: NEG
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 2
36402: NEG
36403: PUSH
36404: LD_INT 2
36406: NEG
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 2
36414: NEG
36415: PUSH
36416: LD_INT 3
36418: NEG
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 1
36426: NEG
36427: PUSH
36428: LD_INT 3
36430: NEG
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 1
36438: PUSH
36439: LD_INT 2
36441: NEG
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 2
36449: PUSH
36450: LD_INT 1
36452: NEG
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
36483: LD_ADDR_VAR 0 24
36487: PUSH
36488: LD_INT 0
36490: PUSH
36491: LD_INT 0
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PUSH
36498: LD_INT 0
36500: PUSH
36501: LD_INT 1
36503: NEG
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 1
36511: PUSH
36512: LD_INT 0
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 1
36521: PUSH
36522: LD_INT 1
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 0
36531: PUSH
36532: LD_INT 1
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 1
36541: NEG
36542: PUSH
36543: LD_INT 0
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 1
36552: NEG
36553: PUSH
36554: LD_INT 1
36556: NEG
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 1
36564: NEG
36565: PUSH
36566: LD_INT 2
36568: NEG
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 0
36576: PUSH
36577: LD_INT 2
36579: NEG
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 1
36587: PUSH
36588: LD_INT 1
36590: NEG
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 2
36598: PUSH
36599: LD_INT 0
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 2
36608: PUSH
36609: LD_INT 1
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 2
36618: PUSH
36619: LD_INT 2
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 1
36628: PUSH
36629: LD_INT 2
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 0
36638: PUSH
36639: LD_INT 2
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 1
36648: NEG
36649: PUSH
36650: LD_INT 1
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 2
36659: NEG
36660: PUSH
36661: LD_INT 0
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 2
36670: NEG
36671: PUSH
36672: LD_INT 1
36674: NEG
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 2
36682: NEG
36683: PUSH
36684: LD_INT 2
36686: NEG
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 1
36694: PUSH
36695: LD_INT 2
36697: NEG
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 2
36705: PUSH
36706: LD_INT 1
36708: NEG
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 3
36716: PUSH
36717: LD_INT 1
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 3
36726: PUSH
36727: LD_INT 2
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
36759: LD_ADDR_VAR 0 25
36763: PUSH
36764: LD_INT 0
36766: PUSH
36767: LD_INT 0
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: LD_INT 0
36776: PUSH
36777: LD_INT 1
36779: NEG
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 1
36787: PUSH
36788: LD_INT 0
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 1
36797: PUSH
36798: LD_INT 1
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 0
36807: PUSH
36808: LD_INT 1
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 1
36817: NEG
36818: PUSH
36819: LD_INT 0
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 1
36828: NEG
36829: PUSH
36830: LD_INT 1
36832: NEG
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 1
36840: NEG
36841: PUSH
36842: LD_INT 2
36844: NEG
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 0
36852: PUSH
36853: LD_INT 2
36855: NEG
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 1
36863: PUSH
36864: LD_INT 1
36866: NEG
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 2
36874: PUSH
36875: LD_INT 0
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 2
36884: PUSH
36885: LD_INT 1
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 2
36894: PUSH
36895: LD_INT 2
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 1
36904: PUSH
36905: LD_INT 2
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 0
36914: PUSH
36915: LD_INT 2
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 1
36924: NEG
36925: PUSH
36926: LD_INT 1
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 2
36935: NEG
36936: PUSH
36937: LD_INT 0
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 2
36946: NEG
36947: PUSH
36948: LD_INT 1
36950: NEG
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 2
36958: NEG
36959: PUSH
36960: LD_INT 2
36962: NEG
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 3
36970: PUSH
36971: LD_INT 1
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 3
36980: PUSH
36981: LD_INT 2
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 2
36990: PUSH
36991: LD_INT 3
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 1
37000: PUSH
37001: LD_INT 3
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37033: LD_ADDR_VAR 0 26
37037: PUSH
37038: LD_INT 0
37040: PUSH
37041: LD_INT 0
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 0
37050: PUSH
37051: LD_INT 1
37053: NEG
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: LD_INT 1
37061: PUSH
37062: LD_INT 0
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 1
37071: PUSH
37072: LD_INT 1
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 0
37081: PUSH
37082: LD_INT 1
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 1
37091: NEG
37092: PUSH
37093: LD_INT 0
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_INT 1
37102: NEG
37103: PUSH
37104: LD_INT 1
37106: NEG
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 1
37114: NEG
37115: PUSH
37116: LD_INT 2
37118: NEG
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 0
37126: PUSH
37127: LD_INT 2
37129: NEG
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PUSH
37135: LD_INT 1
37137: PUSH
37138: LD_INT 1
37140: NEG
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 2
37148: PUSH
37149: LD_INT 0
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 2
37158: PUSH
37159: LD_INT 1
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 2
37168: PUSH
37169: LD_INT 2
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 1
37178: PUSH
37179: LD_INT 2
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 0
37188: PUSH
37189: LD_INT 2
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 1
37198: NEG
37199: PUSH
37200: LD_INT 1
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 2
37209: NEG
37210: PUSH
37211: LD_INT 0
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 2
37220: NEG
37221: PUSH
37222: LD_INT 1
37224: NEG
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 2
37232: NEG
37233: PUSH
37234: LD_INT 2
37236: NEG
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 2
37244: PUSH
37245: LD_INT 3
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 1
37254: PUSH
37255: LD_INT 3
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 1
37264: NEG
37265: PUSH
37266: LD_INT 2
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 2
37275: NEG
37276: PUSH
37277: LD_INT 1
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37309: LD_ADDR_VAR 0 27
37313: PUSH
37314: LD_INT 0
37316: PUSH
37317: LD_INT 0
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 0
37326: PUSH
37327: LD_INT 1
37329: NEG
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 1
37337: PUSH
37338: LD_INT 0
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 1
37347: PUSH
37348: LD_INT 1
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 0
37357: PUSH
37358: LD_INT 1
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 1
37367: NEG
37368: PUSH
37369: LD_INT 0
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 1
37378: NEG
37379: PUSH
37380: LD_INT 1
37382: NEG
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_INT 1
37390: NEG
37391: PUSH
37392: LD_INT 2
37394: NEG
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 0
37402: PUSH
37403: LD_INT 2
37405: NEG
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 1
37413: PUSH
37414: LD_INT 1
37416: NEG
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 2
37424: PUSH
37425: LD_INT 0
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 2
37434: PUSH
37435: LD_INT 1
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 2
37444: PUSH
37445: LD_INT 2
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 1
37454: PUSH
37455: LD_INT 2
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 0
37464: PUSH
37465: LD_INT 2
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 1
37474: NEG
37475: PUSH
37476: LD_INT 1
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 2
37485: NEG
37486: PUSH
37487: LD_INT 0
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 2
37496: NEG
37497: PUSH
37498: LD_INT 1
37500: NEG
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 2
37508: NEG
37509: PUSH
37510: LD_INT 2
37512: NEG
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 1
37520: NEG
37521: PUSH
37522: LD_INT 2
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 2
37531: NEG
37532: PUSH
37533: LD_INT 1
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 3
37542: NEG
37543: PUSH
37544: LD_INT 1
37546: NEG
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 3
37554: NEG
37555: PUSH
37556: LD_INT 2
37558: NEG
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37589: LD_ADDR_VAR 0 28
37593: PUSH
37594: LD_INT 0
37596: PUSH
37597: LD_INT 0
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: LD_INT 1
37609: NEG
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 1
37617: PUSH
37618: LD_INT 0
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 1
37627: PUSH
37628: LD_INT 1
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 0
37637: PUSH
37638: LD_INT 1
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 1
37647: NEG
37648: PUSH
37649: LD_INT 0
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 1
37658: NEG
37659: PUSH
37660: LD_INT 1
37662: NEG
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 1
37670: NEG
37671: PUSH
37672: LD_INT 2
37674: NEG
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 0
37682: PUSH
37683: LD_INT 2
37685: NEG
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 1
37693: PUSH
37694: LD_INT 1
37696: NEG
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 2
37704: PUSH
37705: LD_INT 0
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 2
37714: PUSH
37715: LD_INT 1
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 2
37724: PUSH
37725: LD_INT 2
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 1
37734: PUSH
37735: LD_INT 2
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 0
37744: PUSH
37745: LD_INT 2
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 1
37754: NEG
37755: PUSH
37756: LD_INT 1
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 2
37765: NEG
37766: PUSH
37767: LD_INT 0
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 2
37776: NEG
37777: PUSH
37778: LD_INT 1
37780: NEG
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 2
37788: NEG
37789: PUSH
37790: LD_INT 2
37792: NEG
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 2
37800: NEG
37801: PUSH
37802: LD_INT 3
37804: NEG
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 1
37812: NEG
37813: PUSH
37814: LD_INT 3
37816: NEG
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 3
37824: NEG
37825: PUSH
37826: LD_INT 1
37828: NEG
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 3
37836: NEG
37837: PUSH
37838: LD_INT 2
37840: NEG
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37871: LD_ADDR_VAR 0 29
37875: PUSH
37876: LD_INT 0
37878: PUSH
37879: LD_INT 0
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 0
37888: PUSH
37889: LD_INT 1
37891: NEG
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 1
37899: PUSH
37900: LD_INT 0
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 1
37909: PUSH
37910: LD_INT 1
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 0
37919: PUSH
37920: LD_INT 1
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 1
37929: NEG
37930: PUSH
37931: LD_INT 0
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 1
37940: NEG
37941: PUSH
37942: LD_INT 1
37944: NEG
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 1
37952: NEG
37953: PUSH
37954: LD_INT 2
37956: NEG
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 0
37964: PUSH
37965: LD_INT 2
37967: NEG
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 1
37975: PUSH
37976: LD_INT 1
37978: NEG
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 2
37986: PUSH
37987: LD_INT 0
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 2
37996: PUSH
37997: LD_INT 1
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 1
38006: PUSH
38007: LD_INT 2
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 0
38016: PUSH
38017: LD_INT 2
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PUSH
38024: LD_INT 1
38026: NEG
38027: PUSH
38028: LD_INT 1
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 2
38037: NEG
38038: PUSH
38039: LD_INT 1
38041: NEG
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 2
38049: NEG
38050: PUSH
38051: LD_INT 2
38053: NEG
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 2
38061: NEG
38062: PUSH
38063: LD_INT 3
38065: NEG
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 2
38073: PUSH
38074: LD_INT 1
38076: NEG
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 3
38084: PUSH
38085: LD_INT 1
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 1
38094: PUSH
38095: LD_INT 3
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 1
38104: NEG
38105: PUSH
38106: LD_INT 2
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 3
38115: NEG
38116: PUSH
38117: LD_INT 2
38119: NEG
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38150: LD_ADDR_VAR 0 30
38154: PUSH
38155: LD_INT 0
38157: PUSH
38158: LD_INT 0
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 0
38167: PUSH
38168: LD_INT 1
38170: NEG
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 1
38178: PUSH
38179: LD_INT 0
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 1
38188: PUSH
38189: LD_INT 1
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 0
38198: PUSH
38199: LD_INT 1
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 1
38208: NEG
38209: PUSH
38210: LD_INT 0
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 1
38219: NEG
38220: PUSH
38221: LD_INT 1
38223: NEG
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 1
38231: NEG
38232: PUSH
38233: LD_INT 2
38235: NEG
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 0
38243: PUSH
38244: LD_INT 2
38246: NEG
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 1
38254: PUSH
38255: LD_INT 1
38257: NEG
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 2
38265: PUSH
38266: LD_INT 0
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 2
38275: PUSH
38276: LD_INT 1
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 2
38285: PUSH
38286: LD_INT 2
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 1
38295: PUSH
38296: LD_INT 2
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 1
38305: NEG
38306: PUSH
38307: LD_INT 1
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 2
38316: NEG
38317: PUSH
38318: LD_INT 0
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 2
38327: NEG
38328: PUSH
38329: LD_INT 1
38331: NEG
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 1
38339: NEG
38340: PUSH
38341: LD_INT 3
38343: NEG
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 1
38351: PUSH
38352: LD_INT 2
38354: NEG
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 3
38362: PUSH
38363: LD_INT 2
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 2
38372: PUSH
38373: LD_INT 3
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 2
38382: NEG
38383: PUSH
38384: LD_INT 1
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 3
38393: NEG
38394: PUSH
38395: LD_INT 1
38397: NEG
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38428: LD_ADDR_VAR 0 31
38432: PUSH
38433: LD_INT 0
38435: PUSH
38436: LD_INT 0
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 0
38445: PUSH
38446: LD_INT 1
38448: NEG
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 1
38456: PUSH
38457: LD_INT 0
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 1
38466: PUSH
38467: LD_INT 1
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 0
38476: PUSH
38477: LD_INT 1
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 1
38486: NEG
38487: PUSH
38488: LD_INT 0
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: LD_INT 1
38497: NEG
38498: PUSH
38499: LD_INT 1
38501: NEG
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 1
38509: NEG
38510: PUSH
38511: LD_INT 2
38513: NEG
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 1
38521: PUSH
38522: LD_INT 1
38524: NEG
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 2
38532: PUSH
38533: LD_INT 0
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: LD_INT 2
38542: PUSH
38543: LD_INT 1
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 2
38552: PUSH
38553: LD_INT 2
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 1
38562: PUSH
38563: LD_INT 2
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 0
38572: PUSH
38573: LD_INT 2
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 1
38582: NEG
38583: PUSH
38584: LD_INT 1
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 2
38593: NEG
38594: PUSH
38595: LD_INT 1
38597: NEG
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 2
38605: NEG
38606: PUSH
38607: LD_INT 2
38609: NEG
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 2
38617: NEG
38618: PUSH
38619: LD_INT 3
38621: NEG
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 2
38629: PUSH
38630: LD_INT 1
38632: NEG
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 3
38640: PUSH
38641: LD_INT 1
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 1
38650: PUSH
38651: LD_INT 3
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: LD_INT 1
38660: NEG
38661: PUSH
38662: LD_INT 2
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 3
38671: NEG
38672: PUSH
38673: LD_INT 2
38675: NEG
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38706: LD_ADDR_VAR 0 32
38710: PUSH
38711: LD_INT 0
38713: PUSH
38714: LD_INT 0
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 0
38723: PUSH
38724: LD_INT 1
38726: NEG
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 1
38734: PUSH
38735: LD_INT 0
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 1
38744: PUSH
38745: LD_INT 1
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 0
38754: PUSH
38755: LD_INT 1
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 1
38764: NEG
38765: PUSH
38766: LD_INT 0
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 1
38775: NEG
38776: PUSH
38777: LD_INT 1
38779: NEG
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 1
38787: NEG
38788: PUSH
38789: LD_INT 2
38791: NEG
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 0
38799: PUSH
38800: LD_INT 2
38802: NEG
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 1
38810: PUSH
38811: LD_INT 1
38813: NEG
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 2
38821: PUSH
38822: LD_INT 1
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 2
38831: PUSH
38832: LD_INT 2
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 1
38841: PUSH
38842: LD_INT 2
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 0
38851: PUSH
38852: LD_INT 2
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 1
38861: NEG
38862: PUSH
38863: LD_INT 1
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 2
38872: NEG
38873: PUSH
38874: LD_INT 0
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 2
38883: NEG
38884: PUSH
38885: LD_INT 1
38887: NEG
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 1
38895: NEG
38896: PUSH
38897: LD_INT 3
38899: NEG
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 1
38907: PUSH
38908: LD_INT 2
38910: NEG
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 3
38918: PUSH
38919: LD_INT 2
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 2
38928: PUSH
38929: LD_INT 3
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 2
38938: NEG
38939: PUSH
38940: LD_INT 1
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 3
38949: NEG
38950: PUSH
38951: LD_INT 1
38953: NEG
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38984: LD_ADDR_VAR 0 33
38988: PUSH
38989: LD_INT 0
38991: PUSH
38992: LD_INT 0
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 0
39001: PUSH
39002: LD_INT 1
39004: NEG
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 1
39012: PUSH
39013: LD_INT 0
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 1
39022: PUSH
39023: LD_INT 1
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 0
39032: PUSH
39033: LD_INT 1
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 1
39042: NEG
39043: PUSH
39044: LD_INT 0
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 1
39053: NEG
39054: PUSH
39055: LD_INT 1
39057: NEG
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 1
39065: NEG
39066: PUSH
39067: LD_INT 2
39069: NEG
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 1
39077: PUSH
39078: LD_INT 1
39080: NEG
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 2
39088: PUSH
39089: LD_INT 0
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 2
39098: PUSH
39099: LD_INT 1
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 1
39108: PUSH
39109: LD_INT 2
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 0
39118: PUSH
39119: LD_INT 2
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 1
39128: NEG
39129: PUSH
39130: LD_INT 1
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 2
39139: NEG
39140: PUSH
39141: LD_INT 0
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 2
39150: NEG
39151: PUSH
39152: LD_INT 1
39154: NEG
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 2
39162: NEG
39163: PUSH
39164: LD_INT 2
39166: NEG
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 2
39174: NEG
39175: PUSH
39176: LD_INT 3
39178: NEG
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 2
39186: PUSH
39187: LD_INT 1
39189: NEG
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 3
39197: PUSH
39198: LD_INT 1
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 1
39207: PUSH
39208: LD_INT 3
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 1
39217: NEG
39218: PUSH
39219: LD_INT 2
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 3
39228: NEG
39229: PUSH
39230: LD_INT 2
39232: NEG
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39263: LD_ADDR_VAR 0 34
39267: PUSH
39268: LD_INT 0
39270: PUSH
39271: LD_INT 0
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 0
39280: PUSH
39281: LD_INT 1
39283: NEG
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 1
39291: PUSH
39292: LD_INT 0
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 1
39301: PUSH
39302: LD_INT 1
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 0
39311: PUSH
39312: LD_INT 1
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 1
39321: NEG
39322: PUSH
39323: LD_INT 0
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 1
39332: NEG
39333: PUSH
39334: LD_INT 1
39336: NEG
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 1
39344: NEG
39345: PUSH
39346: LD_INT 2
39348: NEG
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 0
39356: PUSH
39357: LD_INT 2
39359: NEG
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 1
39367: PUSH
39368: LD_INT 1
39370: NEG
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 2
39378: PUSH
39379: LD_INT 1
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 2
39388: PUSH
39389: LD_INT 2
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 1
39398: PUSH
39399: LD_INT 2
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 1
39408: NEG
39409: PUSH
39410: LD_INT 1
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 2
39419: NEG
39420: PUSH
39421: LD_INT 0
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 2
39430: NEG
39431: PUSH
39432: LD_INT 1
39434: NEG
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 2
39442: NEG
39443: PUSH
39444: LD_INT 2
39446: NEG
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 1
39454: NEG
39455: PUSH
39456: LD_INT 3
39458: NEG
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 1
39466: PUSH
39467: LD_INT 2
39469: NEG
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 3
39477: PUSH
39478: LD_INT 2
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 2
39487: PUSH
39488: LD_INT 3
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 2
39497: NEG
39498: PUSH
39499: LD_INT 1
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 3
39508: NEG
39509: PUSH
39510: LD_INT 1
39512: NEG
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39543: LD_ADDR_VAR 0 35
39547: PUSH
39548: LD_INT 0
39550: PUSH
39551: LD_INT 0
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 0
39560: PUSH
39561: LD_INT 1
39563: NEG
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 1
39571: PUSH
39572: LD_INT 0
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 1
39581: PUSH
39582: LD_INT 1
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 0
39591: PUSH
39592: LD_INT 1
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 1
39601: NEG
39602: PUSH
39603: LD_INT 0
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 1
39612: NEG
39613: PUSH
39614: LD_INT 1
39616: NEG
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 2
39624: PUSH
39625: LD_INT 1
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 2
39634: NEG
39635: PUSH
39636: LD_INT 1
39638: NEG
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39655: LD_ADDR_VAR 0 36
39659: PUSH
39660: LD_INT 0
39662: PUSH
39663: LD_INT 0
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 0
39672: PUSH
39673: LD_INT 1
39675: NEG
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 1
39683: PUSH
39684: LD_INT 0
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 1
39693: PUSH
39694: LD_INT 1
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 0
39703: PUSH
39704: LD_INT 1
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 1
39713: NEG
39714: PUSH
39715: LD_INT 0
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 1
39724: NEG
39725: PUSH
39726: LD_INT 1
39728: NEG
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 1
39736: NEG
39737: PUSH
39738: LD_INT 2
39740: NEG
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: LD_INT 2
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39767: LD_ADDR_VAR 0 37
39771: PUSH
39772: LD_INT 0
39774: PUSH
39775: LD_INT 0
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 0
39784: PUSH
39785: LD_INT 1
39787: NEG
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 1
39795: PUSH
39796: LD_INT 0
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 1
39805: PUSH
39806: LD_INT 1
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 0
39815: PUSH
39816: LD_INT 1
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 1
39825: NEG
39826: PUSH
39827: LD_INT 0
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 1
39836: NEG
39837: PUSH
39838: LD_INT 1
39840: NEG
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 1
39848: PUSH
39849: LD_INT 1
39851: NEG
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 1
39859: NEG
39860: PUSH
39861: LD_INT 1
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39879: LD_ADDR_VAR 0 38
39883: PUSH
39884: LD_INT 0
39886: PUSH
39887: LD_INT 0
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 0
39896: PUSH
39897: LD_INT 1
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 1
39907: PUSH
39908: LD_INT 0
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 1
39917: PUSH
39918: LD_INT 1
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 0
39927: PUSH
39928: LD_INT 1
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 1
39937: NEG
39938: PUSH
39939: LD_INT 0
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 1
39948: NEG
39949: PUSH
39950: LD_INT 1
39952: NEG
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 2
39960: PUSH
39961: LD_INT 1
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 2
39970: NEG
39971: PUSH
39972: LD_INT 1
39974: NEG
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39991: LD_ADDR_VAR 0 39
39995: PUSH
39996: LD_INT 0
39998: PUSH
39999: LD_INT 0
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 0
40008: PUSH
40009: LD_INT 1
40011: NEG
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 1
40019: PUSH
40020: LD_INT 0
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 1
40029: PUSH
40030: LD_INT 1
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 0
40039: PUSH
40040: LD_INT 1
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 1
40049: NEG
40050: PUSH
40051: LD_INT 0
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 1
40060: NEG
40061: PUSH
40062: LD_INT 1
40064: NEG
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 1
40072: NEG
40073: PUSH
40074: LD_INT 2
40076: NEG
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 1
40084: PUSH
40085: LD_INT 2
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40103: LD_ADDR_VAR 0 40
40107: PUSH
40108: LD_INT 0
40110: PUSH
40111: LD_INT 0
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 0
40120: PUSH
40121: LD_INT 1
40123: NEG
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 1
40131: PUSH
40132: LD_INT 0
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 1
40141: PUSH
40142: LD_INT 1
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 0
40151: PUSH
40152: LD_INT 1
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 1
40161: NEG
40162: PUSH
40163: LD_INT 0
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 1
40172: NEG
40173: PUSH
40174: LD_INT 1
40176: NEG
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 1
40184: PUSH
40185: LD_INT 1
40187: NEG
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 1
40195: NEG
40196: PUSH
40197: LD_INT 1
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40215: LD_ADDR_VAR 0 41
40219: PUSH
40220: LD_INT 0
40222: PUSH
40223: LD_INT 0
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 0
40232: PUSH
40233: LD_INT 1
40235: NEG
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 1
40243: PUSH
40244: LD_INT 0
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 1
40253: PUSH
40254: LD_INT 1
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: LD_INT 1
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 1
40273: NEG
40274: PUSH
40275: LD_INT 0
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 1
40284: NEG
40285: PUSH
40286: LD_INT 1
40288: NEG
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 1
40296: NEG
40297: PUSH
40298: LD_INT 2
40300: NEG
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 1
40308: PUSH
40309: LD_INT 1
40311: NEG
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 2
40319: PUSH
40320: LD_INT 0
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 2
40329: PUSH
40330: LD_INT 1
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 2
40339: PUSH
40340: LD_INT 2
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 1
40349: PUSH
40350: LD_INT 2
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 1
40359: NEG
40360: PUSH
40361: LD_INT 1
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 2
40370: NEG
40371: PUSH
40372: LD_INT 0
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 2
40381: NEG
40382: PUSH
40383: LD_INT 1
40385: NEG
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 2
40393: NEG
40394: PUSH
40395: LD_INT 2
40397: NEG
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 2
40405: NEG
40406: PUSH
40407: LD_INT 3
40409: NEG
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 2
40417: PUSH
40418: LD_INT 1
40420: NEG
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 3
40428: PUSH
40429: LD_INT 0
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 3
40438: PUSH
40439: LD_INT 1
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 3
40448: PUSH
40449: LD_INT 2
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 3
40458: PUSH
40459: LD_INT 3
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 2
40468: PUSH
40469: LD_INT 3
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 2
40478: NEG
40479: PUSH
40480: LD_INT 1
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 3
40489: NEG
40490: PUSH
40491: LD_INT 0
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 3
40500: NEG
40501: PUSH
40502: LD_INT 1
40504: NEG
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 3
40512: NEG
40513: PUSH
40514: LD_INT 2
40516: NEG
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 3
40524: NEG
40525: PUSH
40526: LD_INT 3
40528: NEG
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40565: LD_ADDR_VAR 0 42
40569: PUSH
40570: LD_INT 0
40572: PUSH
40573: LD_INT 0
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 0
40582: PUSH
40583: LD_INT 1
40585: NEG
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 1
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 1
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 0
40613: PUSH
40614: LD_INT 1
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 1
40623: NEG
40624: PUSH
40625: LD_INT 0
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 1
40634: NEG
40635: PUSH
40636: LD_INT 1
40638: NEG
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 1
40646: NEG
40647: PUSH
40648: LD_INT 2
40650: NEG
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: LD_INT 2
40661: NEG
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 1
40669: PUSH
40670: LD_INT 1
40672: NEG
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 2
40680: PUSH
40681: LD_INT 1
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 2
40690: PUSH
40691: LD_INT 2
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 1
40700: PUSH
40701: LD_INT 2
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 0
40710: PUSH
40711: LD_INT 2
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 1
40720: NEG
40721: PUSH
40722: LD_INT 1
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 2
40731: NEG
40732: PUSH
40733: LD_INT 1
40735: NEG
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 2
40743: NEG
40744: PUSH
40745: LD_INT 2
40747: NEG
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 2
40755: NEG
40756: PUSH
40757: LD_INT 3
40759: NEG
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 1
40767: NEG
40768: PUSH
40769: LD_INT 3
40771: NEG
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 0
40779: PUSH
40780: LD_INT 3
40782: NEG
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 1
40790: PUSH
40791: LD_INT 2
40793: NEG
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 3
40801: PUSH
40802: LD_INT 2
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 3
40811: PUSH
40812: LD_INT 3
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 2
40821: PUSH
40822: LD_INT 3
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 1
40831: PUSH
40832: LD_INT 3
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: LD_INT 3
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 1
40851: NEG
40852: PUSH
40853: LD_INT 2
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 3
40862: NEG
40863: PUSH
40864: LD_INT 2
40866: NEG
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 3
40874: NEG
40875: PUSH
40876: LD_INT 3
40878: NEG
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40915: LD_ADDR_VAR 0 43
40919: PUSH
40920: LD_INT 0
40922: PUSH
40923: LD_INT 0
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: LD_INT 1
40935: NEG
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: LD_INT 0
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: LD_INT 1
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 0
40963: PUSH
40964: LD_INT 1
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 1
40973: NEG
40974: PUSH
40975: LD_INT 0
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 1
40984: NEG
40985: PUSH
40986: LD_INT 1
40988: NEG
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 1
40996: NEG
40997: PUSH
40998: LD_INT 2
41000: NEG
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 0
41008: PUSH
41009: LD_INT 2
41011: NEG
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 1
41019: PUSH
41020: LD_INT 1
41022: NEG
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 2
41030: PUSH
41031: LD_INT 0
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 2
41040: PUSH
41041: LD_INT 1
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 1
41050: PUSH
41051: LD_INT 2
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 0
41060: PUSH
41061: LD_INT 2
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 1
41070: NEG
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 2
41081: NEG
41082: PUSH
41083: LD_INT 0
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 2
41092: NEG
41093: PUSH
41094: LD_INT 1
41096: NEG
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 1
41104: NEG
41105: PUSH
41106: LD_INT 3
41108: NEG
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 0
41116: PUSH
41117: LD_INT 3
41119: NEG
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 1
41127: PUSH
41128: LD_INT 2
41130: NEG
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 2
41138: PUSH
41139: LD_INT 1
41141: NEG
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 3
41149: PUSH
41150: LD_INT 0
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 3
41159: PUSH
41160: LD_INT 1
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 1
41169: PUSH
41170: LD_INT 3
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 0
41179: PUSH
41180: LD_INT 3
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 1
41189: NEG
41190: PUSH
41191: LD_INT 2
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 2
41200: NEG
41201: PUSH
41202: LD_INT 1
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 3
41211: NEG
41212: PUSH
41213: LD_INT 0
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 3
41222: NEG
41223: PUSH
41224: LD_INT 1
41226: NEG
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41263: LD_ADDR_VAR 0 44
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: LD_INT 0
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: LD_INT 1
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 1
41291: PUSH
41292: LD_INT 0
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 1
41301: PUSH
41302: LD_INT 1
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 0
41311: PUSH
41312: LD_INT 1
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 1
41321: NEG
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: NEG
41333: PUSH
41334: LD_INT 1
41336: NEG
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: LD_INT 2
41348: NEG
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 1
41356: PUSH
41357: LD_INT 1
41359: NEG
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 2
41367: PUSH
41368: LD_INT 0
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 2
41377: PUSH
41378: LD_INT 1
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 2
41387: PUSH
41388: LD_INT 2
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 1
41397: PUSH
41398: LD_INT 2
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 1
41407: NEG
41408: PUSH
41409: LD_INT 1
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 2
41418: NEG
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 2
41429: NEG
41430: PUSH
41431: LD_INT 1
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 2
41441: NEG
41442: PUSH
41443: LD_INT 2
41445: NEG
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 2
41453: NEG
41454: PUSH
41455: LD_INT 3
41457: NEG
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 2
41465: PUSH
41466: LD_INT 1
41468: NEG
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 3
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 3
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 3
41496: PUSH
41497: LD_INT 2
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 3
41506: PUSH
41507: LD_INT 3
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 2
41516: PUSH
41517: LD_INT 3
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 2
41526: NEG
41527: PUSH
41528: LD_INT 1
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 3
41537: NEG
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 3
41548: NEG
41549: PUSH
41550: LD_INT 1
41552: NEG
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 3
41560: NEG
41561: PUSH
41562: LD_INT 2
41564: NEG
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 3
41572: NEG
41573: PUSH
41574: LD_INT 3
41576: NEG
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41613: LD_ADDR_VAR 0 45
41617: PUSH
41618: LD_INT 0
41620: PUSH
41621: LD_INT 0
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 0
41630: PUSH
41631: LD_INT 1
41633: NEG
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 1
41641: PUSH
41642: LD_INT 0
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 1
41651: PUSH
41652: LD_INT 1
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 0
41661: PUSH
41662: LD_INT 1
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 1
41671: NEG
41672: PUSH
41673: LD_INT 0
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 1
41682: NEG
41683: PUSH
41684: LD_INT 1
41686: NEG
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 1
41694: NEG
41695: PUSH
41696: LD_INT 2
41698: NEG
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 0
41706: PUSH
41707: LD_INT 2
41709: NEG
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 1
41717: PUSH
41718: LD_INT 1
41720: NEG
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 2
41728: PUSH
41729: LD_INT 1
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 2
41738: PUSH
41739: LD_INT 2
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 1
41748: PUSH
41749: LD_INT 2
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 0
41758: PUSH
41759: LD_INT 2
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 1
41768: NEG
41769: PUSH
41770: LD_INT 1
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 2
41779: NEG
41780: PUSH
41781: LD_INT 1
41783: NEG
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 2
41791: NEG
41792: PUSH
41793: LD_INT 2
41795: NEG
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 2
41803: NEG
41804: PUSH
41805: LD_INT 3
41807: NEG
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 1
41815: NEG
41816: PUSH
41817: LD_INT 3
41819: NEG
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 0
41827: PUSH
41828: LD_INT 3
41830: NEG
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 1
41838: PUSH
41839: LD_INT 2
41841: NEG
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 3
41849: PUSH
41850: LD_INT 2
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 3
41859: PUSH
41860: LD_INT 3
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 2
41869: PUSH
41870: LD_INT 3
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 1
41879: PUSH
41880: LD_INT 3
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: LD_INT 3
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 1
41899: NEG
41900: PUSH
41901: LD_INT 2
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 3
41910: NEG
41911: PUSH
41912: LD_INT 2
41914: NEG
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 3
41922: NEG
41923: PUSH
41924: LD_INT 3
41926: NEG
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41963: LD_ADDR_VAR 0 46
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: LD_INT 0
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 0
41980: PUSH
41981: LD_INT 1
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 1
41991: PUSH
41992: LD_INT 0
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 1
42001: PUSH
42002: LD_INT 1
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 0
42011: PUSH
42012: LD_INT 1
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 1
42021: NEG
42022: PUSH
42023: LD_INT 0
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 1
42032: NEG
42033: PUSH
42034: LD_INT 1
42036: NEG
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 1
42044: NEG
42045: PUSH
42046: LD_INT 2
42048: NEG
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 0
42056: PUSH
42057: LD_INT 2
42059: NEG
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 1
42067: PUSH
42068: LD_INT 1
42070: NEG
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 2
42078: PUSH
42079: LD_INT 0
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 2
42088: PUSH
42089: LD_INT 1
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 1
42098: PUSH
42099: LD_INT 2
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 0
42108: PUSH
42109: LD_INT 2
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 1
42118: NEG
42119: PUSH
42120: LD_INT 1
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 2
42129: NEG
42130: PUSH
42131: LD_INT 0
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 2
42140: NEG
42141: PUSH
42142: LD_INT 1
42144: NEG
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 1
42152: NEG
42153: PUSH
42154: LD_INT 3
42156: NEG
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 0
42164: PUSH
42165: LD_INT 3
42167: NEG
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 1
42175: PUSH
42176: LD_INT 2
42178: NEG
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 2
42186: PUSH
42187: LD_INT 1
42189: NEG
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 3
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 3
42207: PUSH
42208: LD_INT 1
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 1
42217: PUSH
42218: LD_INT 3
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 0
42227: PUSH
42228: LD_INT 3
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 1
42237: NEG
42238: PUSH
42239: LD_INT 2
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 2
42248: NEG
42249: PUSH
42250: LD_INT 1
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 3
42259: NEG
42260: PUSH
42261: LD_INT 0
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 3
42270: NEG
42271: PUSH
42272: LD_INT 1
42274: NEG
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42311: LD_ADDR_VAR 0 47
42315: PUSH
42316: LD_INT 0
42318: PUSH
42319: LD_INT 0
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 0
42328: PUSH
42329: LD_INT 1
42331: NEG
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 1
42339: PUSH
42340: LD_INT 0
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 1
42349: PUSH
42350: LD_INT 1
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 0
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 1
42369: NEG
42370: PUSH
42371: LD_INT 0
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 1
42380: NEG
42381: PUSH
42382: LD_INT 1
42384: NEG
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 1
42392: NEG
42393: PUSH
42394: LD_INT 2
42396: NEG
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 0
42404: PUSH
42405: LD_INT 2
42407: NEG
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 1
42415: PUSH
42416: LD_INT 1
42418: NEG
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 2
42426: NEG
42427: PUSH
42428: LD_INT 1
42430: NEG
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 2
42438: NEG
42439: PUSH
42440: LD_INT 2
42442: NEG
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42462: LD_ADDR_VAR 0 48
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: LD_INT 0
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 0
42479: PUSH
42480: LD_INT 1
42482: NEG
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 1
42490: PUSH
42491: LD_INT 0
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 1
42500: PUSH
42501: LD_INT 1
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 0
42510: PUSH
42511: LD_INT 1
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 1
42520: NEG
42521: PUSH
42522: LD_INT 0
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 1
42531: NEG
42532: PUSH
42533: LD_INT 1
42535: NEG
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 1
42543: NEG
42544: PUSH
42545: LD_INT 2
42547: NEG
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 0
42555: PUSH
42556: LD_INT 2
42558: NEG
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 1
42566: PUSH
42567: LD_INT 1
42569: NEG
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 2
42577: PUSH
42578: LD_INT 0
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 2
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42609: LD_ADDR_VAR 0 49
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: LD_INT 0
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 0
42626: PUSH
42627: LD_INT 1
42629: NEG
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 1
42637: PUSH
42638: LD_INT 0
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 1
42647: PUSH
42648: LD_INT 1
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 0
42657: PUSH
42658: LD_INT 1
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 1
42667: NEG
42668: PUSH
42669: LD_INT 0
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 1
42678: NEG
42679: PUSH
42680: LD_INT 1
42682: NEG
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 1
42690: PUSH
42691: LD_INT 1
42693: NEG
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 2
42701: PUSH
42702: LD_INT 0
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 2
42711: PUSH
42712: LD_INT 1
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 2
42721: PUSH
42722: LD_INT 2
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: LD_INT 2
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42753: LD_ADDR_VAR 0 50
42757: PUSH
42758: LD_INT 0
42760: PUSH
42761: LD_INT 0
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: LD_INT 1
42773: NEG
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 1
42781: PUSH
42782: LD_INT 0
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 1
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 0
42801: PUSH
42802: LD_INT 1
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 1
42811: NEG
42812: PUSH
42813: LD_INT 0
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 1
42822: NEG
42823: PUSH
42824: LD_INT 1
42826: NEG
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 2
42834: PUSH
42835: LD_INT 1
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 2
42844: PUSH
42845: LD_INT 2
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 1
42854: PUSH
42855: LD_INT 2
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 0
42864: PUSH
42865: LD_INT 2
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 1
42874: NEG
42875: PUSH
42876: LD_INT 1
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42897: LD_ADDR_VAR 0 51
42901: PUSH
42902: LD_INT 0
42904: PUSH
42905: LD_INT 0
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 0
42914: PUSH
42915: LD_INT 1
42917: NEG
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 1
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 1
42935: PUSH
42936: LD_INT 1
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 0
42945: PUSH
42946: LD_INT 1
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 1
42955: NEG
42956: PUSH
42957: LD_INT 0
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 1
42966: NEG
42967: PUSH
42968: LD_INT 1
42970: NEG
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 1
42978: PUSH
42979: LD_INT 2
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: LD_INT 2
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 1
42998: NEG
42999: PUSH
43000: LD_INT 1
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 2
43009: NEG
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 2
43020: NEG
43021: PUSH
43022: LD_INT 1
43024: NEG
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43044: LD_ADDR_VAR 0 52
43048: PUSH
43049: LD_INT 0
43051: PUSH
43052: LD_INT 0
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 0
43061: PUSH
43062: LD_INT 1
43064: NEG
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 1
43072: PUSH
43073: LD_INT 0
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 1
43082: PUSH
43083: LD_INT 1
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 0
43092: PUSH
43093: LD_INT 1
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 1
43102: NEG
43103: PUSH
43104: LD_INT 0
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 1
43113: NEG
43114: PUSH
43115: LD_INT 1
43117: NEG
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 1
43125: NEG
43126: PUSH
43127: LD_INT 2
43129: NEG
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 1
43137: NEG
43138: PUSH
43139: LD_INT 1
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 2
43148: NEG
43149: PUSH
43150: LD_INT 0
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 2
43159: NEG
43160: PUSH
43161: LD_INT 1
43163: NEG
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 2
43171: NEG
43172: PUSH
43173: LD_INT 2
43175: NEG
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43195: LD_ADDR_VAR 0 53
43199: PUSH
43200: LD_INT 0
43202: PUSH
43203: LD_INT 0
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: LD_INT 1
43215: NEG
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 1
43223: PUSH
43224: LD_INT 0
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 1
43233: PUSH
43234: LD_INT 1
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 0
43243: PUSH
43244: LD_INT 1
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 1
43253: NEG
43254: PUSH
43255: LD_INT 0
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 1
43264: NEG
43265: PUSH
43266: LD_INT 1
43268: NEG
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 1
43276: NEG
43277: PUSH
43278: LD_INT 2
43280: NEG
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 0
43288: PUSH
43289: LD_INT 2
43291: NEG
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 1
43299: PUSH
43300: LD_INT 1
43302: NEG
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 2
43310: PUSH
43311: LD_INT 0
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 2
43320: PUSH
43321: LD_INT 1
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 2
43330: PUSH
43331: LD_INT 2
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 1
43340: PUSH
43341: LD_INT 2
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 0
43350: PUSH
43351: LD_INT 2
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 1
43360: NEG
43361: PUSH
43362: LD_INT 1
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 2
43371: NEG
43372: PUSH
43373: LD_INT 0
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 2
43382: NEG
43383: PUSH
43384: LD_INT 1
43386: NEG
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 2
43394: NEG
43395: PUSH
43396: LD_INT 2
43398: NEG
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43425: LD_ADDR_VAR 0 54
43429: PUSH
43430: LD_INT 0
43432: PUSH
43433: LD_INT 0
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: LD_INT 1
43445: NEG
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 1
43453: PUSH
43454: LD_INT 0
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 1
43463: PUSH
43464: LD_INT 1
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 0
43473: PUSH
43474: LD_INT 1
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 1
43483: NEG
43484: PUSH
43485: LD_INT 0
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 1
43494: NEG
43495: PUSH
43496: LD_INT 1
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: LD_INT 2
43510: NEG
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 0
43518: PUSH
43519: LD_INT 2
43521: NEG
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: LD_INT 1
43532: NEG
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 2
43540: PUSH
43541: LD_INT 0
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 2
43550: PUSH
43551: LD_INT 1
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 2
43560: PUSH
43561: LD_INT 2
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 1
43570: PUSH
43571: LD_INT 2
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 0
43580: PUSH
43581: LD_INT 2
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 1
43590: NEG
43591: PUSH
43592: LD_INT 1
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 2
43601: NEG
43602: PUSH
43603: LD_INT 0
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 2
43612: NEG
43613: PUSH
43614: LD_INT 1
43616: NEG
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 2
43624: NEG
43625: PUSH
43626: LD_INT 2
43628: NEG
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43655: LD_ADDR_VAR 0 55
43659: PUSH
43660: LD_INT 0
43662: PUSH
43663: LD_INT 0
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 0
43672: PUSH
43673: LD_INT 1
43675: NEG
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 1
43683: PUSH
43684: LD_INT 0
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 1
43693: PUSH
43694: LD_INT 1
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 0
43703: PUSH
43704: LD_INT 1
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 1
43713: NEG
43714: PUSH
43715: LD_INT 0
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 1
43724: NEG
43725: PUSH
43726: LD_INT 1
43728: NEG
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 1
43736: NEG
43737: PUSH
43738: LD_INT 2
43740: NEG
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: LD_INT 2
43751: NEG
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 1
43759: PUSH
43760: LD_INT 1
43762: NEG
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 2
43770: PUSH
43771: LD_INT 0
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 2
43780: PUSH
43781: LD_INT 1
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 2
43790: PUSH
43791: LD_INT 2
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 1
43800: PUSH
43801: LD_INT 2
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 0
43810: PUSH
43811: LD_INT 2
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 1
43820: NEG
43821: PUSH
43822: LD_INT 1
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 2
43831: NEG
43832: PUSH
43833: LD_INT 0
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 2
43842: NEG
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 2
43854: NEG
43855: PUSH
43856: LD_INT 2
43858: NEG
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43885: LD_ADDR_VAR 0 56
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 0
43902: PUSH
43903: LD_INT 1
43905: NEG
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 1
43913: PUSH
43914: LD_INT 0
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 1
43923: PUSH
43924: LD_INT 1
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 0
43933: PUSH
43934: LD_INT 1
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 1
43943: NEG
43944: PUSH
43945: LD_INT 0
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 1
43954: NEG
43955: PUSH
43956: LD_INT 1
43958: NEG
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: LD_INT 2
43970: NEG
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: LD_INT 2
43981: NEG
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 2
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 2
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 2
44020: PUSH
44021: LD_INT 2
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 1
44030: PUSH
44031: LD_INT 2
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 0
44040: PUSH
44041: LD_INT 2
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 1
44050: NEG
44051: PUSH
44052: LD_INT 1
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 2
44061: NEG
44062: PUSH
44063: LD_INT 0
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 2
44072: NEG
44073: PUSH
44074: LD_INT 1
44076: NEG
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 2
44084: NEG
44085: PUSH
44086: LD_INT 2
44088: NEG
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44115: LD_ADDR_VAR 0 57
44119: PUSH
44120: LD_INT 0
44122: PUSH
44123: LD_INT 0
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 0
44132: PUSH
44133: LD_INT 1
44135: NEG
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 1
44143: PUSH
44144: LD_INT 0
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 1
44153: PUSH
44154: LD_INT 1
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 0
44163: PUSH
44164: LD_INT 1
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 1
44173: NEG
44174: PUSH
44175: LD_INT 0
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 1
44184: NEG
44185: PUSH
44186: LD_INT 1
44188: NEG
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 1
44196: NEG
44197: PUSH
44198: LD_INT 2
44200: NEG
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 0
44208: PUSH
44209: LD_INT 2
44211: NEG
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 1
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 2
44230: PUSH
44231: LD_INT 0
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 2
44240: PUSH
44241: LD_INT 1
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 2
44250: PUSH
44251: LD_INT 2
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 1
44260: PUSH
44261: LD_INT 2
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 0
44270: PUSH
44271: LD_INT 2
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 1
44280: NEG
44281: PUSH
44282: LD_INT 1
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 2
44291: NEG
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 2
44302: NEG
44303: PUSH
44304: LD_INT 1
44306: NEG
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 2
44314: NEG
44315: PUSH
44316: LD_INT 2
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44345: LD_ADDR_VAR 0 58
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: LD_INT 1
44365: NEG
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 1
44373: PUSH
44374: LD_INT 0
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 1
44383: PUSH
44384: LD_INT 1
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: LD_INT 1
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 1
44414: NEG
44415: PUSH
44416: LD_INT 1
44418: NEG
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 1
44426: NEG
44427: PUSH
44428: LD_INT 2
44430: NEG
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 0
44438: PUSH
44439: LD_INT 2
44441: NEG
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: LD_INT 1
44452: NEG
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 2
44460: PUSH
44461: LD_INT 0
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 2
44470: PUSH
44471: LD_INT 1
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 2
44480: PUSH
44481: LD_INT 2
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 1
44490: PUSH
44491: LD_INT 2
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 0
44500: PUSH
44501: LD_INT 2
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 1
44510: NEG
44511: PUSH
44512: LD_INT 1
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 2
44521: NEG
44522: PUSH
44523: LD_INT 0
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 2
44532: NEG
44533: PUSH
44534: LD_INT 1
44536: NEG
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 2
44544: NEG
44545: PUSH
44546: LD_INT 2
44548: NEG
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44575: LD_ADDR_VAR 0 59
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: LD_INT 0
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 0
44592: PUSH
44593: LD_INT 1
44595: NEG
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 1
44603: PUSH
44604: LD_INT 0
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 1
44613: PUSH
44614: LD_INT 1
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 1
44633: NEG
44634: PUSH
44635: LD_INT 0
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 1
44644: NEG
44645: PUSH
44646: LD_INT 1
44648: NEG
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44663: LD_ADDR_VAR 0 60
44667: PUSH
44668: LD_INT 0
44670: PUSH
44671: LD_INT 0
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: LD_INT 1
44683: NEG
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 1
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 1
44701: PUSH
44702: LD_INT 1
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: LD_INT 1
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 1
44721: NEG
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: NEG
44733: PUSH
44734: LD_INT 1
44736: NEG
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44751: LD_ADDR_VAR 0 61
44755: PUSH
44756: LD_INT 0
44758: PUSH
44759: LD_INT 0
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 0
44768: PUSH
44769: LD_INT 1
44771: NEG
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 1
44779: PUSH
44780: LD_INT 0
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 1
44789: PUSH
44790: LD_INT 1
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 0
44799: PUSH
44800: LD_INT 1
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 1
44809: NEG
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 1
44820: NEG
44821: PUSH
44822: LD_INT 1
44824: NEG
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44839: LD_ADDR_VAR 0 62
44843: PUSH
44844: LD_INT 0
44846: PUSH
44847: LD_INT 0
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 0
44856: PUSH
44857: LD_INT 1
44859: NEG
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: LD_INT 0
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 1
44877: PUSH
44878: LD_INT 1
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: LD_INT 1
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 1
44897: NEG
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 1
44908: NEG
44909: PUSH
44910: LD_INT 1
44912: NEG
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44927: LD_ADDR_VAR 0 63
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: LD_INT 0
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 0
44944: PUSH
44945: LD_INT 1
44947: NEG
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 1
44955: PUSH
44956: LD_INT 0
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 1
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 0
44975: PUSH
44976: LD_INT 1
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 1
44985: NEG
44986: PUSH
44987: LD_INT 0
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 1
44996: NEG
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45015: LD_ADDR_VAR 0 64
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: PUSH
45044: LD_INT 0
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 1
45053: PUSH
45054: LD_INT 1
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: LD_INT 1
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 1
45073: NEG
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: LD_INT 1
45088: NEG
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: ST_TO_ADDR
// end ; 1 :
45103: GO 51000
45105: LD_INT 1
45107: DOUBLE
45108: EQUAL
45109: IFTRUE 45113
45111: GO 47736
45113: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45114: LD_ADDR_VAR 0 11
45118: PUSH
45119: LD_INT 1
45121: NEG
45122: PUSH
45123: LD_INT 3
45125: NEG
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 0
45133: PUSH
45134: LD_INT 3
45136: NEG
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 1
45144: PUSH
45145: LD_INT 2
45147: NEG
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: LIST
45157: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45158: LD_ADDR_VAR 0 12
45162: PUSH
45163: LD_INT 2
45165: PUSH
45166: LD_INT 1
45168: NEG
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 3
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 3
45186: PUSH
45187: LD_INT 1
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: LIST
45198: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45199: LD_ADDR_VAR 0 13
45203: PUSH
45204: LD_INT 3
45206: PUSH
45207: LD_INT 2
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 3
45216: PUSH
45217: LD_INT 3
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 2
45226: PUSH
45227: LD_INT 3
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: LIST
45238: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45239: LD_ADDR_VAR 0 14
45243: PUSH
45244: LD_INT 1
45246: PUSH
45247: LD_INT 3
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: LD_INT 3
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 1
45266: NEG
45267: PUSH
45268: LD_INT 2
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: LIST
45279: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45280: LD_ADDR_VAR 0 15
45284: PUSH
45285: LD_INT 2
45287: NEG
45288: PUSH
45289: LD_INT 1
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 3
45298: NEG
45299: PUSH
45300: LD_INT 0
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 3
45309: NEG
45310: PUSH
45311: LD_INT 1
45313: NEG
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: LIST
45323: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45324: LD_ADDR_VAR 0 16
45328: PUSH
45329: LD_INT 2
45331: NEG
45332: PUSH
45333: LD_INT 3
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 3
45343: NEG
45344: PUSH
45345: LD_INT 2
45347: NEG
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 3
45355: NEG
45356: PUSH
45357: LD_INT 3
45359: NEG
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: LIST
45369: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45370: LD_ADDR_VAR 0 17
45374: PUSH
45375: LD_INT 1
45377: NEG
45378: PUSH
45379: LD_INT 3
45381: NEG
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 0
45389: PUSH
45390: LD_INT 3
45392: NEG
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 1
45400: PUSH
45401: LD_INT 2
45403: NEG
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: LIST
45413: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45414: LD_ADDR_VAR 0 18
45418: PUSH
45419: LD_INT 2
45421: PUSH
45422: LD_INT 1
45424: NEG
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 3
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 3
45442: PUSH
45443: LD_INT 1
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: LIST
45454: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45455: LD_ADDR_VAR 0 19
45459: PUSH
45460: LD_INT 3
45462: PUSH
45463: LD_INT 2
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 3
45472: PUSH
45473: LD_INT 3
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 2
45482: PUSH
45483: LD_INT 3
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: LIST
45494: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45495: LD_ADDR_VAR 0 20
45499: PUSH
45500: LD_INT 1
45502: PUSH
45503: LD_INT 3
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: LD_INT 3
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 1
45522: NEG
45523: PUSH
45524: LD_INT 2
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: LIST
45535: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45536: LD_ADDR_VAR 0 21
45540: PUSH
45541: LD_INT 2
45543: NEG
45544: PUSH
45545: LD_INT 1
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 3
45554: NEG
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 3
45565: NEG
45566: PUSH
45567: LD_INT 1
45569: NEG
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: LIST
45579: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45580: LD_ADDR_VAR 0 22
45584: PUSH
45585: LD_INT 2
45587: NEG
45588: PUSH
45589: LD_INT 3
45591: NEG
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 3
45599: NEG
45600: PUSH
45601: LD_INT 2
45603: NEG
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 3
45611: NEG
45612: PUSH
45613: LD_INT 3
45615: NEG
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: LIST
45625: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
45626: LD_ADDR_VAR 0 23
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: LD_INT 3
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: NEG
45645: PUSH
45646: LD_INT 4
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: LD_INT 3
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: LIST
45669: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
45670: LD_ADDR_VAR 0 24
45674: PUSH
45675: LD_INT 3
45677: PUSH
45678: LD_INT 0
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 3
45687: PUSH
45688: LD_INT 1
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 4
45698: PUSH
45699: LD_INT 1
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: LIST
45710: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
45711: LD_ADDR_VAR 0 25
45715: PUSH
45716: LD_INT 3
45718: PUSH
45719: LD_INT 3
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 4
45728: PUSH
45729: LD_INT 3
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 3
45738: PUSH
45739: LD_INT 4
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: LIST
45750: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
45751: LD_ADDR_VAR 0 26
45755: PUSH
45756: LD_INT 0
45758: PUSH
45759: LD_INT 3
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 1
45768: PUSH
45769: LD_INT 4
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 1
45778: NEG
45779: PUSH
45780: LD_INT 3
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: LIST
45791: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
45792: LD_ADDR_VAR 0 27
45796: PUSH
45797: LD_INT 3
45799: NEG
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 3
45810: NEG
45811: PUSH
45812: LD_INT 1
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 4
45821: NEG
45822: PUSH
45823: LD_INT 1
45825: NEG
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: LIST
45835: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
45836: LD_ADDR_VAR 0 28
45840: PUSH
45841: LD_INT 3
45843: NEG
45844: PUSH
45845: LD_INT 3
45847: NEG
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 3
45855: NEG
45856: PUSH
45857: LD_INT 4
45859: NEG
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 4
45867: NEG
45868: PUSH
45869: LD_INT 3
45871: NEG
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: LIST
45881: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
45882: LD_ADDR_VAR 0 29
45886: PUSH
45887: LD_INT 1
45889: NEG
45890: PUSH
45891: LD_INT 3
45893: NEG
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: LD_INT 3
45904: NEG
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: PUSH
45913: LD_INT 2
45915: NEG
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: LD_INT 4
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: LD_INT 4
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: LD_INT 3
45949: NEG
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 1
45957: NEG
45958: PUSH
45959: LD_INT 5
45961: NEG
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: LD_INT 5
45972: NEG
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 1
45980: PUSH
45981: LD_INT 4
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: NEG
45992: PUSH
45993: LD_INT 6
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: LD_INT 6
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: LD_INT 5
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46037: LD_ADDR_VAR 0 30
46041: PUSH
46042: LD_INT 2
46044: PUSH
46045: LD_INT 1
46047: NEG
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 3
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 3
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 3
46075: PUSH
46076: LD_INT 1
46078: NEG
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 4
46086: PUSH
46087: LD_INT 0
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 4
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 4
46106: PUSH
46107: LD_INT 1
46109: NEG
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 5
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 5
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 5
46137: PUSH
46138: LD_INT 1
46140: NEG
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 6
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 6
46158: PUSH
46159: LD_INT 1
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46180: LD_ADDR_VAR 0 31
46184: PUSH
46185: LD_INT 3
46187: PUSH
46188: LD_INT 2
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 3
46197: PUSH
46198: LD_INT 3
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 2
46207: PUSH
46208: LD_INT 3
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 4
46217: PUSH
46218: LD_INT 3
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 4
46227: PUSH
46228: LD_INT 4
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 3
46237: PUSH
46238: LD_INT 4
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 5
46247: PUSH
46248: LD_INT 4
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 5
46257: PUSH
46258: LD_INT 5
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 4
46267: PUSH
46268: LD_INT 5
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 6
46277: PUSH
46278: LD_INT 5
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 6
46287: PUSH
46288: LD_INT 6
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 5
46297: PUSH
46298: LD_INT 6
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46319: LD_ADDR_VAR 0 32
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: LD_INT 3
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: LD_INT 3
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: LD_INT 2
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 1
46357: PUSH
46358: LD_INT 4
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: LD_INT 4
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: LD_INT 3
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 1
46388: PUSH
46389: LD_INT 5
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: LD_INT 5
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 1
46408: NEG
46409: PUSH
46410: LD_INT 4
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: LD_INT 6
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 0
46429: PUSH
46430: LD_INT 6
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 1
46439: NEG
46440: PUSH
46441: LD_INT 5
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
46462: LD_ADDR_VAR 0 33
46466: PUSH
46467: LD_INT 2
46469: NEG
46470: PUSH
46471: LD_INT 1
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 3
46480: NEG
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 3
46491: NEG
46492: PUSH
46493: LD_INT 1
46495: NEG
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 3
46503: NEG
46504: PUSH
46505: LD_INT 1
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 4
46514: NEG
46515: PUSH
46516: LD_INT 0
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 4
46525: NEG
46526: PUSH
46527: LD_INT 1
46529: NEG
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 4
46537: NEG
46538: PUSH
46539: LD_INT 1
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 5
46548: NEG
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 5
46559: NEG
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 5
46571: NEG
46572: PUSH
46573: LD_INT 1
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 6
46582: NEG
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 6
46593: NEG
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
46617: LD_ADDR_VAR 0 34
46621: PUSH
46622: LD_INT 2
46624: NEG
46625: PUSH
46626: LD_INT 3
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 3
46636: NEG
46637: PUSH
46638: LD_INT 2
46640: NEG
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 3
46648: NEG
46649: PUSH
46650: LD_INT 3
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 3
46660: NEG
46661: PUSH
46662: LD_INT 4
46664: NEG
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 4
46672: NEG
46673: PUSH
46674: LD_INT 3
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 4
46684: NEG
46685: PUSH
46686: LD_INT 4
46688: NEG
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 4
46696: NEG
46697: PUSH
46698: LD_INT 5
46700: NEG
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 5
46708: NEG
46709: PUSH
46710: LD_INT 4
46712: NEG
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 5
46720: NEG
46721: PUSH
46722: LD_INT 5
46724: NEG
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 5
46732: NEG
46733: PUSH
46734: LD_INT 6
46736: NEG
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 6
46744: NEG
46745: PUSH
46746: LD_INT 5
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 6
46756: NEG
46757: PUSH
46758: LD_INT 6
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
46780: LD_ADDR_VAR 0 41
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: LD_INT 2
46790: NEG
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 1
46798: NEG
46799: PUSH
46800: LD_INT 3
46802: NEG
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 1
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: LIST
46823: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
46824: LD_ADDR_VAR 0 42
46828: PUSH
46829: LD_INT 2
46831: PUSH
46832: LD_INT 0
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 2
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 3
46852: PUSH
46853: LD_INT 1
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: LIST
46864: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
46865: LD_ADDR_VAR 0 43
46869: PUSH
46870: LD_INT 2
46872: PUSH
46873: LD_INT 2
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 3
46882: PUSH
46883: LD_INT 2
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 2
46892: PUSH
46893: LD_INT 3
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: LIST
46904: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
46905: LD_ADDR_VAR 0 44
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: LD_INT 2
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 1
46922: PUSH
46923: LD_INT 3
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 1
46932: NEG
46933: PUSH
46934: LD_INT 2
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: LIST
46945: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46946: LD_ADDR_VAR 0 45
46950: PUSH
46951: LD_INT 2
46953: NEG
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 2
46964: NEG
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 3
46975: NEG
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: LIST
46989: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
46990: LD_ADDR_VAR 0 46
46994: PUSH
46995: LD_INT 2
46997: NEG
46998: PUSH
46999: LD_INT 2
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 2
47009: NEG
47010: PUSH
47011: LD_INT 3
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 3
47021: NEG
47022: PUSH
47023: LD_INT 2
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: LIST
47035: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47036: LD_ADDR_VAR 0 47
47040: PUSH
47041: LD_INT 2
47043: NEG
47044: PUSH
47045: LD_INT 3
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: NEG
47056: PUSH
47057: LD_INT 3
47059: NEG
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47069: LD_ADDR_VAR 0 48
47073: PUSH
47074: LD_INT 1
47076: PUSH
47077: LD_INT 2
47079: NEG
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 2
47087: PUSH
47088: LD_INT 1
47090: NEG
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47100: LD_ADDR_VAR 0 49
47104: PUSH
47105: LD_INT 3
47107: PUSH
47108: LD_INT 1
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 3
47117: PUSH
47118: LD_INT 2
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47129: LD_ADDR_VAR 0 50
47133: PUSH
47134: LD_INT 2
47136: PUSH
47137: LD_INT 3
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: LD_INT 3
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47158: LD_ADDR_VAR 0 51
47162: PUSH
47163: LD_INT 1
47165: NEG
47166: PUSH
47167: LD_INT 2
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 2
47176: NEG
47177: PUSH
47178: LD_INT 1
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47189: LD_ADDR_VAR 0 52
47193: PUSH
47194: LD_INT 3
47196: NEG
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 3
47208: NEG
47209: PUSH
47210: LD_INT 2
47212: NEG
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47222: LD_ADDR_VAR 0 53
47226: PUSH
47227: LD_INT 1
47229: NEG
47230: PUSH
47231: LD_INT 3
47233: NEG
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: LD_INT 3
47244: NEG
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 1
47252: PUSH
47253: LD_INT 2
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: LIST
47265: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47266: LD_ADDR_VAR 0 54
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 3
47284: PUSH
47285: LD_INT 0
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 3
47294: PUSH
47295: LD_INT 1
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: LIST
47306: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47307: LD_ADDR_VAR 0 55
47311: PUSH
47312: LD_INT 3
47314: PUSH
47315: LD_INT 2
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 3
47324: PUSH
47325: LD_INT 3
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 2
47334: PUSH
47335: LD_INT 3
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: LIST
47346: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47347: LD_ADDR_VAR 0 56
47351: PUSH
47352: LD_INT 1
47354: PUSH
47355: LD_INT 3
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 0
47364: PUSH
47365: LD_INT 3
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 1
47374: NEG
47375: PUSH
47376: LD_INT 2
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: LIST
47387: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47388: LD_ADDR_VAR 0 57
47392: PUSH
47393: LD_INT 2
47395: NEG
47396: PUSH
47397: LD_INT 1
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 3
47406: NEG
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 3
47417: NEG
47418: PUSH
47419: LD_INT 1
47421: NEG
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: LIST
47431: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47432: LD_ADDR_VAR 0 58
47436: PUSH
47437: LD_INT 2
47439: NEG
47440: PUSH
47441: LD_INT 3
47443: NEG
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 3
47451: NEG
47452: PUSH
47453: LD_INT 2
47455: NEG
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 3
47463: NEG
47464: PUSH
47465: LD_INT 3
47467: NEG
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: LIST
47477: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
47478: LD_ADDR_VAR 0 59
47482: PUSH
47483: LD_INT 1
47485: NEG
47486: PUSH
47487: LD_INT 2
47489: NEG
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: LD_INT 2
47500: NEG
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: LD_INT 1
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: LIST
47521: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47522: LD_ADDR_VAR 0 60
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: LD_INT 1
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 2
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 2
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: LIST
47562: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47563: LD_ADDR_VAR 0 61
47567: PUSH
47568: LD_INT 2
47570: PUSH
47571: LD_INT 1
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 2
47580: PUSH
47581: LD_INT 2
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: LD_INT 2
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: LIST
47602: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47603: LD_ADDR_VAR 0 62
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: LD_INT 2
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 0
47620: PUSH
47621: LD_INT 2
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 1
47630: NEG
47631: PUSH
47632: LD_INT 1
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: LIST
47643: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47644: LD_ADDR_VAR 0 63
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PUSH
47653: LD_INT 1
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 2
47662: NEG
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 2
47673: NEG
47674: PUSH
47675: LD_INT 1
47677: NEG
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: LIST
47687: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47688: LD_ADDR_VAR 0 64
47692: PUSH
47693: LD_INT 1
47695: NEG
47696: PUSH
47697: LD_INT 2
47699: NEG
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 2
47707: NEG
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 2
47719: NEG
47720: PUSH
47721: LD_INT 2
47723: NEG
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: LIST
47733: ST_TO_ADDR
// end ; 2 :
47734: GO 51000
47736: LD_INT 2
47738: DOUBLE
47739: EQUAL
47740: IFTRUE 47744
47742: GO 50999
47744: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
47745: LD_ADDR_VAR 0 29
47749: PUSH
47750: LD_INT 4
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 4
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 5
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 5
47783: PUSH
47784: LD_INT 1
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 4
47793: PUSH
47794: LD_INT 1
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 3
47803: PUSH
47804: LD_INT 0
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 3
47813: PUSH
47814: LD_INT 1
47816: NEG
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 3
47824: PUSH
47825: LD_INT 2
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 5
47835: PUSH
47836: LD_INT 2
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 3
47845: PUSH
47846: LD_INT 3
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 3
47855: PUSH
47856: LD_INT 2
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 4
47865: PUSH
47866: LD_INT 3
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 4
47875: PUSH
47876: LD_INT 4
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 3
47885: PUSH
47886: LD_INT 4
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 2
47895: PUSH
47896: LD_INT 3
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 2
47905: PUSH
47906: LD_INT 2
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 4
47915: PUSH
47916: LD_INT 2
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 2
47925: PUSH
47926: LD_INT 4
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: LD_INT 4
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: LD_INT 3
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 1
47955: PUSH
47956: LD_INT 4
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: PUSH
47966: LD_INT 5
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 0
47975: PUSH
47976: LD_INT 5
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 1
47985: NEG
47986: PUSH
47987: LD_INT 4
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: NEG
47997: PUSH
47998: LD_INT 3
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 2
48007: PUSH
48008: LD_INT 5
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 2
48017: NEG
48018: PUSH
48019: LD_INT 3
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 3
48028: NEG
48029: PUSH
48030: LD_INT 0
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 3
48039: NEG
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 2
48051: NEG
48052: PUSH
48053: LD_INT 0
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 2
48062: NEG
48063: PUSH
48064: LD_INT 1
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 3
48073: NEG
48074: PUSH
48075: LD_INT 1
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 4
48084: NEG
48085: PUSH
48086: LD_INT 0
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 4
48095: NEG
48096: PUSH
48097: LD_INT 1
48099: NEG
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 4
48107: NEG
48108: PUSH
48109: LD_INT 2
48111: NEG
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 2
48119: NEG
48120: PUSH
48121: LD_INT 2
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 4
48130: NEG
48131: PUSH
48132: LD_INT 4
48134: NEG
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 4
48142: NEG
48143: PUSH
48144: LD_INT 5
48146: NEG
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 3
48154: NEG
48155: PUSH
48156: LD_INT 4
48158: NEG
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 3
48166: NEG
48167: PUSH
48168: LD_INT 3
48170: NEG
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 4
48178: NEG
48179: PUSH
48180: LD_INT 3
48182: NEG
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 5
48190: NEG
48191: PUSH
48192: LD_INT 4
48194: NEG
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 5
48202: NEG
48203: PUSH
48204: LD_INT 5
48206: NEG
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 3
48214: NEG
48215: PUSH
48216: LD_INT 5
48218: NEG
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 5
48226: NEG
48227: PUSH
48228: LD_INT 3
48230: NEG
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48283: LD_ADDR_VAR 0 30
48287: PUSH
48288: LD_INT 4
48290: PUSH
48291: LD_INT 4
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 4
48300: PUSH
48301: LD_INT 3
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 5
48310: PUSH
48311: LD_INT 4
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 5
48320: PUSH
48321: LD_INT 5
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 4
48330: PUSH
48331: LD_INT 5
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 3
48340: PUSH
48341: LD_INT 4
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 3
48350: PUSH
48351: LD_INT 3
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 5
48360: PUSH
48361: LD_INT 3
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 3
48370: PUSH
48371: LD_INT 5
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 0
48380: PUSH
48381: LD_INT 3
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: LD_INT 2
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 1
48400: PUSH
48401: LD_INT 3
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: LD_INT 4
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 0
48420: PUSH
48421: LD_INT 4
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: NEG
48431: PUSH
48432: LD_INT 3
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 1
48441: NEG
48442: PUSH
48443: LD_INT 2
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 2
48452: PUSH
48453: LD_INT 4
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 2
48462: NEG
48463: PUSH
48464: LD_INT 2
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 4
48473: NEG
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 4
48484: NEG
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 3
48496: NEG
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 3
48507: NEG
48508: PUSH
48509: LD_INT 1
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 4
48518: NEG
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 5
48529: NEG
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 5
48540: NEG
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 5
48552: NEG
48553: PUSH
48554: LD_INT 2
48556: NEG
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 3
48564: NEG
48565: PUSH
48566: LD_INT 2
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 3
48575: NEG
48576: PUSH
48577: LD_INT 3
48579: NEG
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 3
48587: NEG
48588: PUSH
48589: LD_INT 4
48591: NEG
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 2
48599: NEG
48600: PUSH
48601: LD_INT 3
48603: NEG
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 2
48611: NEG
48612: PUSH
48613: LD_INT 2
48615: NEG
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 3
48623: NEG
48624: PUSH
48625: LD_INT 2
48627: NEG
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 4
48635: NEG
48636: PUSH
48637: LD_INT 3
48639: NEG
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 4
48647: NEG
48648: PUSH
48649: LD_INT 4
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 2
48659: NEG
48660: PUSH
48661: LD_INT 4
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 4
48671: NEG
48672: PUSH
48673: LD_INT 2
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: LD_INT 4
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: LD_INT 5
48697: NEG
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 1
48705: PUSH
48706: LD_INT 4
48708: NEG
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: LD_INT 3
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: LD_INT 3
48730: NEG
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 1
48738: NEG
48739: PUSH
48740: LD_INT 4
48742: NEG
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: LD_INT 5
48754: NEG
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 2
48762: PUSH
48763: LD_INT 3
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 2
48773: NEG
48774: PUSH
48775: LD_INT 5
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
48830: LD_ADDR_VAR 0 31
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: LD_INT 4
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: LD_INT 3
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 1
48857: PUSH
48858: LD_INT 4
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: LD_INT 5
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: LD_INT 5
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: LD_INT 4
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: LD_INT 3
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 2
48909: PUSH
48910: LD_INT 5
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 2
48919: NEG
48920: PUSH
48921: LD_INT 3
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 3
48930: NEG
48931: PUSH
48932: LD_INT 0
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 3
48941: NEG
48942: PUSH
48943: LD_INT 1
48945: NEG
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 2
48953: NEG
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 2
48964: NEG
48965: PUSH
48966: LD_INT 1
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 3
48975: NEG
48976: PUSH
48977: LD_INT 1
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 4
48986: NEG
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 4
48997: NEG
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 4
49009: NEG
49010: PUSH
49011: LD_INT 2
49013: NEG
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 2
49021: NEG
49022: PUSH
49023: LD_INT 2
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 4
49032: NEG
49033: PUSH
49034: LD_INT 4
49036: NEG
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 4
49044: NEG
49045: PUSH
49046: LD_INT 5
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 3
49056: NEG
49057: PUSH
49058: LD_INT 4
49060: NEG
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 3
49068: NEG
49069: PUSH
49070: LD_INT 3
49072: NEG
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 4
49080: NEG
49081: PUSH
49082: LD_INT 3
49084: NEG
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 5
49092: NEG
49093: PUSH
49094: LD_INT 4
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 5
49104: NEG
49105: PUSH
49106: LD_INT 5
49108: NEG
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 3
49116: NEG
49117: PUSH
49118: LD_INT 5
49120: NEG
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 5
49128: NEG
49129: PUSH
49130: LD_INT 3
49132: NEG
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: LD_INT 3
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 0
49151: PUSH
49152: LD_INT 4
49154: NEG
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 1
49162: PUSH
49163: LD_INT 3
49165: NEG
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: LD_INT 2
49176: NEG
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: LD_INT 2
49187: NEG
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: LD_INT 3
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: NEG
49208: PUSH
49209: LD_INT 4
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 2
49219: PUSH
49220: LD_INT 2
49222: NEG
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 2
49230: NEG
49231: PUSH
49232: LD_INT 4
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 4
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 4
49252: PUSH
49253: LD_INT 1
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 5
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 5
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 4
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 3
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 3
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 3
49314: PUSH
49315: LD_INT 2
49317: NEG
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 5
49325: PUSH
49326: LD_INT 2
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49380: LD_ADDR_VAR 0 32
49384: PUSH
49385: LD_INT 4
49387: NEG
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 4
49398: NEG
49399: PUSH
49400: LD_INT 1
49402: NEG
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 3
49410: NEG
49411: PUSH
49412: LD_INT 0
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 3
49421: NEG
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 4
49432: NEG
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 5
49443: NEG
49444: PUSH
49445: LD_INT 0
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 5
49454: NEG
49455: PUSH
49456: LD_INT 1
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 5
49466: NEG
49467: PUSH
49468: LD_INT 2
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 3
49478: NEG
49479: PUSH
49480: LD_INT 2
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 3
49489: NEG
49490: PUSH
49491: LD_INT 3
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 3
49501: NEG
49502: PUSH
49503: LD_INT 4
49505: NEG
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 2
49513: NEG
49514: PUSH
49515: LD_INT 3
49517: NEG
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 2
49525: NEG
49526: PUSH
49527: LD_INT 2
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 3
49537: NEG
49538: PUSH
49539: LD_INT 2
49541: NEG
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 4
49549: NEG
49550: PUSH
49551: LD_INT 3
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 4
49561: NEG
49562: PUSH
49563: LD_INT 4
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 2
49573: NEG
49574: PUSH
49575: LD_INT 4
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 4
49585: NEG
49586: PUSH
49587: LD_INT 2
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 0
49597: PUSH
49598: LD_INT 4
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: LD_INT 5
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 1
49619: PUSH
49620: LD_INT 4
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: LD_INT 3
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 0
49641: PUSH
49642: LD_INT 3
49644: NEG
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 1
49652: NEG
49653: PUSH
49654: LD_INT 4
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: NEG
49665: PUSH
49666: LD_INT 5
49668: NEG
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 2
49676: PUSH
49677: LD_INT 3
49679: NEG
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 2
49687: NEG
49688: PUSH
49689: LD_INT 5
49691: NEG
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 3
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 3
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 4
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 4
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 3
49740: PUSH
49741: LD_INT 1
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 2
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 2
49760: PUSH
49761: LD_INT 1
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 2
49771: PUSH
49772: LD_INT 2
49774: NEG
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 4
49782: PUSH
49783: LD_INT 2
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 4
49792: PUSH
49793: LD_INT 4
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 4
49802: PUSH
49803: LD_INT 3
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 5
49812: PUSH
49813: LD_INT 4
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 5
49822: PUSH
49823: LD_INT 5
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 4
49832: PUSH
49833: LD_INT 5
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 3
49842: PUSH
49843: LD_INT 4
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 3
49852: PUSH
49853: LD_INT 3
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 5
49862: PUSH
49863: LD_INT 3
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 3
49872: PUSH
49873: LD_INT 5
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
49927: LD_ADDR_VAR 0 33
49931: PUSH
49932: LD_INT 4
49934: NEG
49935: PUSH
49936: LD_INT 4
49938: NEG
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 4
49946: NEG
49947: PUSH
49948: LD_INT 5
49950: NEG
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 3
49958: NEG
49959: PUSH
49960: LD_INT 4
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 3
49970: NEG
49971: PUSH
49972: LD_INT 3
49974: NEG
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 4
49982: NEG
49983: PUSH
49984: LD_INT 3
49986: NEG
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 5
49994: NEG
49995: PUSH
49996: LD_INT 4
49998: NEG
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 5
50006: NEG
50007: PUSH
50008: LD_INT 5
50010: NEG
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 3
50018: NEG
50019: PUSH
50020: LD_INT 5
50022: NEG
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 5
50030: NEG
50031: PUSH
50032: LD_INT 3
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 0
50042: PUSH
50043: LD_INT 3
50045: NEG
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: LD_INT 4
50056: NEG
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 1
50064: PUSH
50065: LD_INT 3
50067: NEG
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 1
50075: PUSH
50076: LD_INT 2
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: LD_INT 2
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: NEG
50098: PUSH
50099: LD_INT 3
50101: NEG
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: LD_INT 4
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 2
50121: PUSH
50122: LD_INT 2
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 2
50132: NEG
50133: PUSH
50134: LD_INT 4
50136: NEG
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 4
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 4
50154: PUSH
50155: LD_INT 1
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 5
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 5
50175: PUSH
50176: LD_INT 1
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 4
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 3
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 3
50205: PUSH
50206: LD_INT 1
50208: NEG
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 3
50216: PUSH
50217: LD_INT 2
50219: NEG
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 5
50227: PUSH
50228: LD_INT 2
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 3
50237: PUSH
50238: LD_INT 3
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 3
50247: PUSH
50248: LD_INT 2
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 4
50257: PUSH
50258: LD_INT 3
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 4
50267: PUSH
50268: LD_INT 4
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 3
50277: PUSH
50278: LD_INT 4
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 2
50287: PUSH
50288: LD_INT 3
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 2
50297: PUSH
50298: LD_INT 2
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 4
50307: PUSH
50308: LD_INT 2
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 2
50317: PUSH
50318: LD_INT 4
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: LD_INT 4
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: LD_INT 3
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 1
50347: PUSH
50348: LD_INT 4
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 1
50357: PUSH
50358: LD_INT 5
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: LD_INT 5
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 1
50377: NEG
50378: PUSH
50379: LD_INT 4
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: NEG
50389: PUSH
50390: LD_INT 3
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 2
50399: PUSH
50400: LD_INT 5
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 2
50409: NEG
50410: PUSH
50411: LD_INT 3
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
50465: LD_ADDR_VAR 0 34
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: LD_INT 4
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: LD_INT 5
50486: NEG
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 1
50494: PUSH
50495: LD_INT 4
50497: NEG
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: PUSH
50506: LD_INT 3
50508: NEG
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 0
50516: PUSH
50517: LD_INT 3
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: NEG
50528: PUSH
50529: LD_INT 4
50531: NEG
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 1
50539: NEG
50540: PUSH
50541: LD_INT 5
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 2
50551: PUSH
50552: LD_INT 3
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 2
50562: NEG
50563: PUSH
50564: LD_INT 5
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 3
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 3
50584: PUSH
50585: LD_INT 1
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 4
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 4
50605: PUSH
50606: LD_INT 1
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 3
50615: PUSH
50616: LD_INT 1
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 2
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 2
50635: PUSH
50636: LD_INT 1
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 2
50646: PUSH
50647: LD_INT 2
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 4
50657: PUSH
50658: LD_INT 2
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 4
50667: PUSH
50668: LD_INT 4
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 4
50677: PUSH
50678: LD_INT 3
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 5
50687: PUSH
50688: LD_INT 4
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 5
50697: PUSH
50698: LD_INT 5
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 4
50707: PUSH
50708: LD_INT 5
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 3
50717: PUSH
50718: LD_INT 4
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 3
50727: PUSH
50728: LD_INT 3
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 5
50737: PUSH
50738: LD_INT 3
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 3
50747: PUSH
50748: LD_INT 5
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: LD_INT 3
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: LD_INT 2
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 1
50777: PUSH
50778: LD_INT 3
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: PUSH
50788: LD_INT 4
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 0
50797: PUSH
50798: LD_INT 4
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 1
50807: NEG
50808: PUSH
50809: LD_INT 3
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 1
50818: NEG
50819: PUSH
50820: LD_INT 2
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 2
50829: PUSH
50830: LD_INT 4
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 2
50839: NEG
50840: PUSH
50841: LD_INT 2
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 4
50850: NEG
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 4
50861: NEG
50862: PUSH
50863: LD_INT 1
50865: NEG
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 3
50873: NEG
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 3
50884: NEG
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 4
50895: NEG
50896: PUSH
50897: LD_INT 1
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 5
50906: NEG
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 5
50917: NEG
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 5
50929: NEG
50930: PUSH
50931: LD_INT 2
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 3
50941: NEG
50942: PUSH
50943: LD_INT 2
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: ST_TO_ADDR
// end ; end ;
50997: GO 51000
50999: POP
// case btype of b_depot , b_warehouse :
51000: LD_VAR 0 1
51004: PUSH
51005: LD_INT 0
51007: DOUBLE
51008: EQUAL
51009: IFTRUE 51019
51011: LD_INT 1
51013: DOUBLE
51014: EQUAL
51015: IFTRUE 51019
51017: GO 51220
51019: POP
// case nation of nation_american :
51020: LD_VAR 0 5
51024: PUSH
51025: LD_INT 1
51027: DOUBLE
51028: EQUAL
51029: IFTRUE 51033
51031: GO 51089
51033: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
51034: LD_ADDR_VAR 0 9
51038: PUSH
51039: LD_VAR 0 11
51043: PUSH
51044: LD_VAR 0 12
51048: PUSH
51049: LD_VAR 0 13
51053: PUSH
51054: LD_VAR 0 14
51058: PUSH
51059: LD_VAR 0 15
51063: PUSH
51064: LD_VAR 0 16
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: PUSH
51077: LD_VAR 0 4
51081: PUSH
51082: LD_INT 1
51084: PLUS
51085: ARRAY
51086: ST_TO_ADDR
51087: GO 51218
51089: LD_INT 2
51091: DOUBLE
51092: EQUAL
51093: IFTRUE 51097
51095: GO 51153
51097: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
51098: LD_ADDR_VAR 0 9
51102: PUSH
51103: LD_VAR 0 17
51107: PUSH
51108: LD_VAR 0 18
51112: PUSH
51113: LD_VAR 0 19
51117: PUSH
51118: LD_VAR 0 20
51122: PUSH
51123: LD_VAR 0 21
51127: PUSH
51128: LD_VAR 0 22
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: PUSH
51141: LD_VAR 0 4
51145: PUSH
51146: LD_INT 1
51148: PLUS
51149: ARRAY
51150: ST_TO_ADDR
51151: GO 51218
51153: LD_INT 3
51155: DOUBLE
51156: EQUAL
51157: IFTRUE 51161
51159: GO 51217
51161: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51162: LD_ADDR_VAR 0 9
51166: PUSH
51167: LD_VAR 0 23
51171: PUSH
51172: LD_VAR 0 24
51176: PUSH
51177: LD_VAR 0 25
51181: PUSH
51182: LD_VAR 0 26
51186: PUSH
51187: LD_VAR 0 27
51191: PUSH
51192: LD_VAR 0 28
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: PUSH
51205: LD_VAR 0 4
51209: PUSH
51210: LD_INT 1
51212: PLUS
51213: ARRAY
51214: ST_TO_ADDR
51215: GO 51218
51217: POP
51218: GO 51773
51220: LD_INT 2
51222: DOUBLE
51223: EQUAL
51224: IFTRUE 51234
51226: LD_INT 3
51228: DOUBLE
51229: EQUAL
51230: IFTRUE 51234
51232: GO 51290
51234: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51235: LD_ADDR_VAR 0 9
51239: PUSH
51240: LD_VAR 0 29
51244: PUSH
51245: LD_VAR 0 30
51249: PUSH
51250: LD_VAR 0 31
51254: PUSH
51255: LD_VAR 0 32
51259: PUSH
51260: LD_VAR 0 33
51264: PUSH
51265: LD_VAR 0 34
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: PUSH
51278: LD_VAR 0 4
51282: PUSH
51283: LD_INT 1
51285: PLUS
51286: ARRAY
51287: ST_TO_ADDR
51288: GO 51773
51290: LD_INT 16
51292: DOUBLE
51293: EQUAL
51294: IFTRUE 51352
51296: LD_INT 17
51298: DOUBLE
51299: EQUAL
51300: IFTRUE 51352
51302: LD_INT 18
51304: DOUBLE
51305: EQUAL
51306: IFTRUE 51352
51308: LD_INT 19
51310: DOUBLE
51311: EQUAL
51312: IFTRUE 51352
51314: LD_INT 22
51316: DOUBLE
51317: EQUAL
51318: IFTRUE 51352
51320: LD_INT 20
51322: DOUBLE
51323: EQUAL
51324: IFTRUE 51352
51326: LD_INT 21
51328: DOUBLE
51329: EQUAL
51330: IFTRUE 51352
51332: LD_INT 23
51334: DOUBLE
51335: EQUAL
51336: IFTRUE 51352
51338: LD_INT 24
51340: DOUBLE
51341: EQUAL
51342: IFTRUE 51352
51344: LD_INT 25
51346: DOUBLE
51347: EQUAL
51348: IFTRUE 51352
51350: GO 51408
51352: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51353: LD_ADDR_VAR 0 9
51357: PUSH
51358: LD_VAR 0 35
51362: PUSH
51363: LD_VAR 0 36
51367: PUSH
51368: LD_VAR 0 37
51372: PUSH
51373: LD_VAR 0 38
51377: PUSH
51378: LD_VAR 0 39
51382: PUSH
51383: LD_VAR 0 40
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: PUSH
51396: LD_VAR 0 4
51400: PUSH
51401: LD_INT 1
51403: PLUS
51404: ARRAY
51405: ST_TO_ADDR
51406: GO 51773
51408: LD_INT 6
51410: DOUBLE
51411: EQUAL
51412: IFTRUE 51464
51414: LD_INT 7
51416: DOUBLE
51417: EQUAL
51418: IFTRUE 51464
51420: LD_INT 8
51422: DOUBLE
51423: EQUAL
51424: IFTRUE 51464
51426: LD_INT 13
51428: DOUBLE
51429: EQUAL
51430: IFTRUE 51464
51432: LD_INT 12
51434: DOUBLE
51435: EQUAL
51436: IFTRUE 51464
51438: LD_INT 15
51440: DOUBLE
51441: EQUAL
51442: IFTRUE 51464
51444: LD_INT 11
51446: DOUBLE
51447: EQUAL
51448: IFTRUE 51464
51450: LD_INT 14
51452: DOUBLE
51453: EQUAL
51454: IFTRUE 51464
51456: LD_INT 10
51458: DOUBLE
51459: EQUAL
51460: IFTRUE 51464
51462: GO 51520
51464: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
51465: LD_ADDR_VAR 0 9
51469: PUSH
51470: LD_VAR 0 41
51474: PUSH
51475: LD_VAR 0 42
51479: PUSH
51480: LD_VAR 0 43
51484: PUSH
51485: LD_VAR 0 44
51489: PUSH
51490: LD_VAR 0 45
51494: PUSH
51495: LD_VAR 0 46
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: PUSH
51508: LD_VAR 0 4
51512: PUSH
51513: LD_INT 1
51515: PLUS
51516: ARRAY
51517: ST_TO_ADDR
51518: GO 51773
51520: LD_INT 36
51522: DOUBLE
51523: EQUAL
51524: IFTRUE 51528
51526: GO 51584
51528: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
51529: LD_ADDR_VAR 0 9
51533: PUSH
51534: LD_VAR 0 47
51538: PUSH
51539: LD_VAR 0 48
51543: PUSH
51544: LD_VAR 0 49
51548: PUSH
51549: LD_VAR 0 50
51553: PUSH
51554: LD_VAR 0 51
51558: PUSH
51559: LD_VAR 0 52
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: PUSH
51572: LD_VAR 0 4
51576: PUSH
51577: LD_INT 1
51579: PLUS
51580: ARRAY
51581: ST_TO_ADDR
51582: GO 51773
51584: LD_INT 4
51586: DOUBLE
51587: EQUAL
51588: IFTRUE 51610
51590: LD_INT 5
51592: DOUBLE
51593: EQUAL
51594: IFTRUE 51610
51596: LD_INT 34
51598: DOUBLE
51599: EQUAL
51600: IFTRUE 51610
51602: LD_INT 37
51604: DOUBLE
51605: EQUAL
51606: IFTRUE 51610
51608: GO 51666
51610: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
51611: LD_ADDR_VAR 0 9
51615: PUSH
51616: LD_VAR 0 53
51620: PUSH
51621: LD_VAR 0 54
51625: PUSH
51626: LD_VAR 0 55
51630: PUSH
51631: LD_VAR 0 56
51635: PUSH
51636: LD_VAR 0 57
51640: PUSH
51641: LD_VAR 0 58
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: PUSH
51654: LD_VAR 0 4
51658: PUSH
51659: LD_INT 1
51661: PLUS
51662: ARRAY
51663: ST_TO_ADDR
51664: GO 51773
51666: LD_INT 31
51668: DOUBLE
51669: EQUAL
51670: IFTRUE 51716
51672: LD_INT 32
51674: DOUBLE
51675: EQUAL
51676: IFTRUE 51716
51678: LD_INT 33
51680: DOUBLE
51681: EQUAL
51682: IFTRUE 51716
51684: LD_INT 27
51686: DOUBLE
51687: EQUAL
51688: IFTRUE 51716
51690: LD_INT 26
51692: DOUBLE
51693: EQUAL
51694: IFTRUE 51716
51696: LD_INT 28
51698: DOUBLE
51699: EQUAL
51700: IFTRUE 51716
51702: LD_INT 29
51704: DOUBLE
51705: EQUAL
51706: IFTRUE 51716
51708: LD_INT 30
51710: DOUBLE
51711: EQUAL
51712: IFTRUE 51716
51714: GO 51772
51716: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
51717: LD_ADDR_VAR 0 9
51721: PUSH
51722: LD_VAR 0 59
51726: PUSH
51727: LD_VAR 0 60
51731: PUSH
51732: LD_VAR 0 61
51736: PUSH
51737: LD_VAR 0 62
51741: PUSH
51742: LD_VAR 0 63
51746: PUSH
51747: LD_VAR 0 64
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: PUSH
51760: LD_VAR 0 4
51764: PUSH
51765: LD_INT 1
51767: PLUS
51768: ARRAY
51769: ST_TO_ADDR
51770: GO 51773
51772: POP
// temp_list2 = [ ] ;
51773: LD_ADDR_VAR 0 10
51777: PUSH
51778: EMPTY
51779: ST_TO_ADDR
// for i in temp_list do
51780: LD_ADDR_VAR 0 8
51784: PUSH
51785: LD_VAR 0 9
51789: PUSH
51790: FOR_IN
51791: IFFALSE 51843
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
51793: LD_ADDR_VAR 0 10
51797: PUSH
51798: LD_VAR 0 10
51802: PUSH
51803: LD_VAR 0 8
51807: PUSH
51808: LD_INT 1
51810: ARRAY
51811: PUSH
51812: LD_VAR 0 2
51816: PLUS
51817: PUSH
51818: LD_VAR 0 8
51822: PUSH
51823: LD_INT 2
51825: ARRAY
51826: PUSH
51827: LD_VAR 0 3
51831: PLUS
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: EMPTY
51838: LIST
51839: ADD
51840: ST_TO_ADDR
51841: GO 51790
51843: POP
51844: POP
// result = temp_list2 ;
51845: LD_ADDR_VAR 0 7
51849: PUSH
51850: LD_VAR 0 10
51854: ST_TO_ADDR
// end ;
51855: LD_VAR 0 7
51859: RET
// export function EnemyInRange ( unit , dist ) ; begin
51860: LD_INT 0
51862: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
51863: LD_ADDR_VAR 0 3
51867: PUSH
51868: LD_VAR 0 1
51872: PPUSH
51873: CALL_OW 255
51877: PPUSH
51878: LD_VAR 0 1
51882: PPUSH
51883: CALL_OW 250
51887: PPUSH
51888: LD_VAR 0 1
51892: PPUSH
51893: CALL_OW 251
51897: PPUSH
51898: LD_VAR 0 2
51902: PPUSH
51903: CALL 25256 0 4
51907: PUSH
51908: LD_INT 4
51910: ARRAY
51911: ST_TO_ADDR
// end ;
51912: LD_VAR 0 3
51916: RET
// export function PlayerSeeMe ( unit ) ; begin
51917: LD_INT 0
51919: PPUSH
// result := See ( your_side , unit ) ;
51920: LD_ADDR_VAR 0 2
51924: PUSH
51925: LD_OWVAR 2
51929: PPUSH
51930: LD_VAR 0 1
51934: PPUSH
51935: CALL_OW 292
51939: ST_TO_ADDR
// end ;
51940: LD_VAR 0 2
51944: RET
// export function ReverseDir ( unit ) ; begin
51945: LD_INT 0
51947: PPUSH
// if not unit then
51948: LD_VAR 0 1
51952: NOT
51953: IFFALSE 51957
// exit ;
51955: GO 51980
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
51957: LD_ADDR_VAR 0 2
51961: PUSH
51962: LD_VAR 0 1
51966: PPUSH
51967: CALL_OW 254
51971: PUSH
51972: LD_INT 3
51974: PLUS
51975: PUSH
51976: LD_INT 6
51978: MOD
51979: ST_TO_ADDR
// end ;
51980: LD_VAR 0 2
51984: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
51985: LD_INT 0
51987: PPUSH
51988: PPUSH
51989: PPUSH
51990: PPUSH
51991: PPUSH
// if not hexes then
51992: LD_VAR 0 2
51996: NOT
51997: IFFALSE 52001
// exit ;
51999: GO 52149
// dist := 9999 ;
52001: LD_ADDR_VAR 0 5
52005: PUSH
52006: LD_INT 9999
52008: ST_TO_ADDR
// for i = 1 to hexes do
52009: LD_ADDR_VAR 0 4
52013: PUSH
52014: DOUBLE
52015: LD_INT 1
52017: DEC
52018: ST_TO_ADDR
52019: LD_VAR 0 2
52023: PUSH
52024: FOR_TO
52025: IFFALSE 52137
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52027: LD_VAR 0 1
52031: PPUSH
52032: LD_VAR 0 2
52036: PUSH
52037: LD_VAR 0 4
52041: ARRAY
52042: PUSH
52043: LD_INT 1
52045: ARRAY
52046: PPUSH
52047: LD_VAR 0 2
52051: PUSH
52052: LD_VAR 0 4
52056: ARRAY
52057: PUSH
52058: LD_INT 2
52060: ARRAY
52061: PPUSH
52062: CALL_OW 297
52066: PUSH
52067: LD_VAR 0 5
52071: LESS
52072: IFFALSE 52135
// begin hex := hexes [ i ] ;
52074: LD_ADDR_VAR 0 7
52078: PUSH
52079: LD_VAR 0 2
52083: PUSH
52084: LD_VAR 0 4
52088: ARRAY
52089: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52090: LD_ADDR_VAR 0 5
52094: PUSH
52095: LD_VAR 0 1
52099: PPUSH
52100: LD_VAR 0 2
52104: PUSH
52105: LD_VAR 0 4
52109: ARRAY
52110: PUSH
52111: LD_INT 1
52113: ARRAY
52114: PPUSH
52115: LD_VAR 0 2
52119: PUSH
52120: LD_VAR 0 4
52124: ARRAY
52125: PUSH
52126: LD_INT 2
52128: ARRAY
52129: PPUSH
52130: CALL_OW 297
52134: ST_TO_ADDR
// end ; end ;
52135: GO 52024
52137: POP
52138: POP
// result := hex ;
52139: LD_ADDR_VAR 0 3
52143: PUSH
52144: LD_VAR 0 7
52148: ST_TO_ADDR
// end ;
52149: LD_VAR 0 3
52153: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52154: LD_INT 0
52156: PPUSH
52157: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52158: LD_VAR 0 1
52162: NOT
52163: PUSH
52164: LD_VAR 0 1
52168: PUSH
52169: LD_INT 21
52171: PUSH
52172: LD_INT 2
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 23
52181: PUSH
52182: LD_INT 2
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PPUSH
52193: CALL_OW 69
52197: IN
52198: NOT
52199: OR
52200: IFFALSE 52204
// exit ;
52202: GO 52251
// for i = 1 to 3 do
52204: LD_ADDR_VAR 0 3
52208: PUSH
52209: DOUBLE
52210: LD_INT 1
52212: DEC
52213: ST_TO_ADDR
52214: LD_INT 3
52216: PUSH
52217: FOR_TO
52218: IFFALSE 52249
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52220: LD_VAR 0 1
52224: PPUSH
52225: CALL_OW 250
52229: PPUSH
52230: LD_VAR 0 1
52234: PPUSH
52235: CALL_OW 251
52239: PPUSH
52240: LD_INT 1
52242: PPUSH
52243: CALL_OW 453
52247: GO 52217
52249: POP
52250: POP
// end ;
52251: LD_VAR 0 2
52255: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52256: LD_INT 0
52258: PPUSH
52259: PPUSH
52260: PPUSH
52261: PPUSH
52262: PPUSH
52263: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52264: LD_VAR 0 1
52268: NOT
52269: PUSH
52270: LD_VAR 0 2
52274: NOT
52275: OR
52276: PUSH
52277: LD_VAR 0 1
52281: PPUSH
52282: CALL_OW 314
52286: OR
52287: IFFALSE 52291
// exit ;
52289: GO 52732
// x := GetX ( enemy_unit ) ;
52291: LD_ADDR_VAR 0 7
52295: PUSH
52296: LD_VAR 0 2
52300: PPUSH
52301: CALL_OW 250
52305: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52306: LD_ADDR_VAR 0 8
52310: PUSH
52311: LD_VAR 0 2
52315: PPUSH
52316: CALL_OW 251
52320: ST_TO_ADDR
// if not x or not y then
52321: LD_VAR 0 7
52325: NOT
52326: PUSH
52327: LD_VAR 0 8
52331: NOT
52332: OR
52333: IFFALSE 52337
// exit ;
52335: GO 52732
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52337: LD_ADDR_VAR 0 6
52341: PUSH
52342: LD_VAR 0 7
52346: PPUSH
52347: LD_INT 0
52349: PPUSH
52350: LD_INT 4
52352: PPUSH
52353: CALL_OW 272
52357: PUSH
52358: LD_VAR 0 8
52362: PPUSH
52363: LD_INT 0
52365: PPUSH
52366: LD_INT 4
52368: PPUSH
52369: CALL_OW 273
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_VAR 0 7
52382: PPUSH
52383: LD_INT 1
52385: PPUSH
52386: LD_INT 4
52388: PPUSH
52389: CALL_OW 272
52393: PUSH
52394: LD_VAR 0 8
52398: PPUSH
52399: LD_INT 1
52401: PPUSH
52402: LD_INT 4
52404: PPUSH
52405: CALL_OW 273
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_VAR 0 7
52418: PPUSH
52419: LD_INT 2
52421: PPUSH
52422: LD_INT 4
52424: PPUSH
52425: CALL_OW 272
52429: PUSH
52430: LD_VAR 0 8
52434: PPUSH
52435: LD_INT 2
52437: PPUSH
52438: LD_INT 4
52440: PPUSH
52441: CALL_OW 273
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_VAR 0 7
52454: PPUSH
52455: LD_INT 3
52457: PPUSH
52458: LD_INT 4
52460: PPUSH
52461: CALL_OW 272
52465: PUSH
52466: LD_VAR 0 8
52470: PPUSH
52471: LD_INT 3
52473: PPUSH
52474: LD_INT 4
52476: PPUSH
52477: CALL_OW 273
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_VAR 0 7
52490: PPUSH
52491: LD_INT 4
52493: PPUSH
52494: LD_INT 4
52496: PPUSH
52497: CALL_OW 272
52501: PUSH
52502: LD_VAR 0 8
52506: PPUSH
52507: LD_INT 4
52509: PPUSH
52510: LD_INT 4
52512: PPUSH
52513: CALL_OW 273
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_VAR 0 7
52526: PPUSH
52527: LD_INT 5
52529: PPUSH
52530: LD_INT 4
52532: PPUSH
52533: CALL_OW 272
52537: PUSH
52538: LD_VAR 0 8
52542: PPUSH
52543: LD_INT 5
52545: PPUSH
52546: LD_INT 4
52548: PPUSH
52549: CALL_OW 273
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: ST_TO_ADDR
// for i = tmp downto 1 do
52566: LD_ADDR_VAR 0 4
52570: PUSH
52571: DOUBLE
52572: LD_VAR 0 6
52576: INC
52577: ST_TO_ADDR
52578: LD_INT 1
52580: PUSH
52581: FOR_DOWNTO
52582: IFFALSE 52683
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
52584: LD_VAR 0 6
52588: PUSH
52589: LD_VAR 0 4
52593: ARRAY
52594: PUSH
52595: LD_INT 1
52597: ARRAY
52598: PPUSH
52599: LD_VAR 0 6
52603: PUSH
52604: LD_VAR 0 4
52608: ARRAY
52609: PUSH
52610: LD_INT 2
52612: ARRAY
52613: PPUSH
52614: CALL_OW 488
52618: NOT
52619: PUSH
52620: LD_VAR 0 6
52624: PUSH
52625: LD_VAR 0 4
52629: ARRAY
52630: PUSH
52631: LD_INT 1
52633: ARRAY
52634: PPUSH
52635: LD_VAR 0 6
52639: PUSH
52640: LD_VAR 0 4
52644: ARRAY
52645: PUSH
52646: LD_INT 2
52648: ARRAY
52649: PPUSH
52650: CALL_OW 428
52654: PUSH
52655: LD_INT 0
52657: NONEQUAL
52658: OR
52659: IFFALSE 52681
// tmp := Delete ( tmp , i ) ;
52661: LD_ADDR_VAR 0 6
52665: PUSH
52666: LD_VAR 0 6
52670: PPUSH
52671: LD_VAR 0 4
52675: PPUSH
52676: CALL_OW 3
52680: ST_TO_ADDR
52681: GO 52581
52683: POP
52684: POP
// j := GetClosestHex ( unit , tmp ) ;
52685: LD_ADDR_VAR 0 5
52689: PUSH
52690: LD_VAR 0 1
52694: PPUSH
52695: LD_VAR 0 6
52699: PPUSH
52700: CALL 51985 0 2
52704: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
52705: LD_VAR 0 1
52709: PPUSH
52710: LD_VAR 0 5
52714: PUSH
52715: LD_INT 1
52717: ARRAY
52718: PPUSH
52719: LD_VAR 0 5
52723: PUSH
52724: LD_INT 2
52726: ARRAY
52727: PPUSH
52728: CALL_OW 111
// end ;
52732: LD_VAR 0 3
52736: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
52737: LD_INT 0
52739: PPUSH
52740: PPUSH
52741: PPUSH
// uc_side = 0 ;
52742: LD_ADDR_OWVAR 20
52746: PUSH
52747: LD_INT 0
52749: ST_TO_ADDR
// uc_nation = 0 ;
52750: LD_ADDR_OWVAR 21
52754: PUSH
52755: LD_INT 0
52757: ST_TO_ADDR
// InitHc_All ( ) ;
52758: CALL_OW 584
// InitVc ;
52762: CALL_OW 20
// if mastodonts then
52766: LD_VAR 0 6
52770: IFFALSE 52837
// for i = 1 to mastodonts do
52772: LD_ADDR_VAR 0 11
52776: PUSH
52777: DOUBLE
52778: LD_INT 1
52780: DEC
52781: ST_TO_ADDR
52782: LD_VAR 0 6
52786: PUSH
52787: FOR_TO
52788: IFFALSE 52835
// begin vc_chassis := 31 ;
52790: LD_ADDR_OWVAR 37
52794: PUSH
52795: LD_INT 31
52797: ST_TO_ADDR
// vc_control := control_rider ;
52798: LD_ADDR_OWVAR 38
52802: PUSH
52803: LD_INT 4
52805: ST_TO_ADDR
// animal := CreateVehicle ;
52806: LD_ADDR_VAR 0 12
52810: PUSH
52811: CALL_OW 45
52815: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52816: LD_VAR 0 12
52820: PPUSH
52821: LD_VAR 0 8
52825: PPUSH
52826: LD_INT 0
52828: PPUSH
52829: CALL 54972 0 3
// end ;
52833: GO 52787
52835: POP
52836: POP
// if horses then
52837: LD_VAR 0 5
52841: IFFALSE 52908
// for i = 1 to horses do
52843: LD_ADDR_VAR 0 11
52847: PUSH
52848: DOUBLE
52849: LD_INT 1
52851: DEC
52852: ST_TO_ADDR
52853: LD_VAR 0 5
52857: PUSH
52858: FOR_TO
52859: IFFALSE 52906
// begin hc_class := 21 ;
52861: LD_ADDR_OWVAR 28
52865: PUSH
52866: LD_INT 21
52868: ST_TO_ADDR
// hc_gallery :=  ;
52869: LD_ADDR_OWVAR 33
52873: PUSH
52874: LD_STRING 
52876: ST_TO_ADDR
// animal := CreateHuman ;
52877: LD_ADDR_VAR 0 12
52881: PUSH
52882: CALL_OW 44
52886: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52887: LD_VAR 0 12
52891: PPUSH
52892: LD_VAR 0 8
52896: PPUSH
52897: LD_INT 0
52899: PPUSH
52900: CALL 54972 0 3
// end ;
52904: GO 52858
52906: POP
52907: POP
// if birds then
52908: LD_VAR 0 1
52912: IFFALSE 52979
// for i = 1 to birds do
52914: LD_ADDR_VAR 0 11
52918: PUSH
52919: DOUBLE
52920: LD_INT 1
52922: DEC
52923: ST_TO_ADDR
52924: LD_VAR 0 1
52928: PUSH
52929: FOR_TO
52930: IFFALSE 52977
// begin hc_class = 18 ;
52932: LD_ADDR_OWVAR 28
52936: PUSH
52937: LD_INT 18
52939: ST_TO_ADDR
// hc_gallery =  ;
52940: LD_ADDR_OWVAR 33
52944: PUSH
52945: LD_STRING 
52947: ST_TO_ADDR
// animal := CreateHuman ;
52948: LD_ADDR_VAR 0 12
52952: PUSH
52953: CALL_OW 44
52957: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52958: LD_VAR 0 12
52962: PPUSH
52963: LD_VAR 0 8
52967: PPUSH
52968: LD_INT 0
52970: PPUSH
52971: CALL 54972 0 3
// end ;
52975: GO 52929
52977: POP
52978: POP
// if tigers then
52979: LD_VAR 0 2
52983: IFFALSE 53067
// for i = 1 to tigers do
52985: LD_ADDR_VAR 0 11
52989: PUSH
52990: DOUBLE
52991: LD_INT 1
52993: DEC
52994: ST_TO_ADDR
52995: LD_VAR 0 2
52999: PUSH
53000: FOR_TO
53001: IFFALSE 53065
// begin hc_class = class_tiger ;
53003: LD_ADDR_OWVAR 28
53007: PUSH
53008: LD_INT 14
53010: ST_TO_ADDR
// hc_gallery =  ;
53011: LD_ADDR_OWVAR 33
53015: PUSH
53016: LD_STRING 
53018: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53019: LD_ADDR_OWVAR 35
53023: PUSH
53024: LD_INT 7
53026: NEG
53027: PPUSH
53028: LD_INT 7
53030: PPUSH
53031: CALL_OW 12
53035: ST_TO_ADDR
// animal := CreateHuman ;
53036: LD_ADDR_VAR 0 12
53040: PUSH
53041: CALL_OW 44
53045: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53046: LD_VAR 0 12
53050: PPUSH
53051: LD_VAR 0 8
53055: PPUSH
53056: LD_INT 0
53058: PPUSH
53059: CALL 54972 0 3
// end ;
53063: GO 53000
53065: POP
53066: POP
// if apemans then
53067: LD_VAR 0 3
53071: IFFALSE 53194
// for i = 1 to apemans do
53073: LD_ADDR_VAR 0 11
53077: PUSH
53078: DOUBLE
53079: LD_INT 1
53081: DEC
53082: ST_TO_ADDR
53083: LD_VAR 0 3
53087: PUSH
53088: FOR_TO
53089: IFFALSE 53192
// begin hc_class = class_apeman ;
53091: LD_ADDR_OWVAR 28
53095: PUSH
53096: LD_INT 12
53098: ST_TO_ADDR
// hc_gallery =  ;
53099: LD_ADDR_OWVAR 33
53103: PUSH
53104: LD_STRING 
53106: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
53107: LD_ADDR_OWVAR 35
53111: PUSH
53112: LD_INT 2
53114: NEG
53115: PPUSH
53116: LD_INT 2
53118: PPUSH
53119: CALL_OW 12
53123: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53124: LD_ADDR_OWVAR 31
53128: PUSH
53129: LD_INT 1
53131: PPUSH
53132: LD_INT 3
53134: PPUSH
53135: CALL_OW 12
53139: PUSH
53140: LD_INT 1
53142: PPUSH
53143: LD_INT 3
53145: PPUSH
53146: CALL_OW 12
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: ST_TO_ADDR
// animal := CreateHuman ;
53163: LD_ADDR_VAR 0 12
53167: PUSH
53168: CALL_OW 44
53172: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53173: LD_VAR 0 12
53177: PPUSH
53178: LD_VAR 0 8
53182: PPUSH
53183: LD_INT 0
53185: PPUSH
53186: CALL 54972 0 3
// end ;
53190: GO 53088
53192: POP
53193: POP
// if enchidnas then
53194: LD_VAR 0 4
53198: IFFALSE 53265
// for i = 1 to enchidnas do
53200: LD_ADDR_VAR 0 11
53204: PUSH
53205: DOUBLE
53206: LD_INT 1
53208: DEC
53209: ST_TO_ADDR
53210: LD_VAR 0 4
53214: PUSH
53215: FOR_TO
53216: IFFALSE 53263
// begin hc_class = 13 ;
53218: LD_ADDR_OWVAR 28
53222: PUSH
53223: LD_INT 13
53225: ST_TO_ADDR
// hc_gallery =  ;
53226: LD_ADDR_OWVAR 33
53230: PUSH
53231: LD_STRING 
53233: ST_TO_ADDR
// animal := CreateHuman ;
53234: LD_ADDR_VAR 0 12
53238: PUSH
53239: CALL_OW 44
53243: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53244: LD_VAR 0 12
53248: PPUSH
53249: LD_VAR 0 8
53253: PPUSH
53254: LD_INT 0
53256: PPUSH
53257: CALL 54972 0 3
// end ;
53261: GO 53215
53263: POP
53264: POP
// if fishes then
53265: LD_VAR 0 7
53269: IFFALSE 53336
// for i = 1 to fishes do
53271: LD_ADDR_VAR 0 11
53275: PUSH
53276: DOUBLE
53277: LD_INT 1
53279: DEC
53280: ST_TO_ADDR
53281: LD_VAR 0 7
53285: PUSH
53286: FOR_TO
53287: IFFALSE 53334
// begin hc_class = 20 ;
53289: LD_ADDR_OWVAR 28
53293: PUSH
53294: LD_INT 20
53296: ST_TO_ADDR
// hc_gallery =  ;
53297: LD_ADDR_OWVAR 33
53301: PUSH
53302: LD_STRING 
53304: ST_TO_ADDR
// animal := CreateHuman ;
53305: LD_ADDR_VAR 0 12
53309: PUSH
53310: CALL_OW 44
53314: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53315: LD_VAR 0 12
53319: PPUSH
53320: LD_VAR 0 9
53324: PPUSH
53325: LD_INT 0
53327: PPUSH
53328: CALL 54972 0 3
// end ;
53332: GO 53286
53334: POP
53335: POP
// end ;
53336: LD_VAR 0 10
53340: RET
// export function WantHeal ( sci , unit ) ; begin
53341: LD_INT 0
53343: PPUSH
// if GetTaskList ( sci ) > 0 then
53344: LD_VAR 0 1
53348: PPUSH
53349: CALL_OW 437
53353: PUSH
53354: LD_INT 0
53356: GREATER
53357: IFFALSE 53427
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53359: LD_VAR 0 1
53363: PPUSH
53364: CALL_OW 437
53368: PUSH
53369: LD_INT 1
53371: ARRAY
53372: PUSH
53373: LD_INT 1
53375: ARRAY
53376: PUSH
53377: LD_STRING l
53379: EQUAL
53380: PUSH
53381: LD_VAR 0 1
53385: PPUSH
53386: CALL_OW 437
53390: PUSH
53391: LD_INT 1
53393: ARRAY
53394: PUSH
53395: LD_INT 4
53397: ARRAY
53398: PUSH
53399: LD_VAR 0 2
53403: EQUAL
53404: AND
53405: IFFALSE 53417
// result := true else
53407: LD_ADDR_VAR 0 3
53411: PUSH
53412: LD_INT 1
53414: ST_TO_ADDR
53415: GO 53425
// result := false ;
53417: LD_ADDR_VAR 0 3
53421: PUSH
53422: LD_INT 0
53424: ST_TO_ADDR
// end else
53425: GO 53435
// result := false ;
53427: LD_ADDR_VAR 0 3
53431: PUSH
53432: LD_INT 0
53434: ST_TO_ADDR
// end ;
53435: LD_VAR 0 3
53439: RET
// export function HealTarget ( sci ) ; begin
53440: LD_INT 0
53442: PPUSH
// if not sci then
53443: LD_VAR 0 1
53447: NOT
53448: IFFALSE 53452
// exit ;
53450: GO 53517
// result := 0 ;
53452: LD_ADDR_VAR 0 2
53456: PUSH
53457: LD_INT 0
53459: ST_TO_ADDR
// if GetTaskList ( sci ) then
53460: LD_VAR 0 1
53464: PPUSH
53465: CALL_OW 437
53469: IFFALSE 53517
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
53471: LD_VAR 0 1
53475: PPUSH
53476: CALL_OW 437
53480: PUSH
53481: LD_INT 1
53483: ARRAY
53484: PUSH
53485: LD_INT 1
53487: ARRAY
53488: PUSH
53489: LD_STRING l
53491: EQUAL
53492: IFFALSE 53517
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
53494: LD_ADDR_VAR 0 2
53498: PUSH
53499: LD_VAR 0 1
53503: PPUSH
53504: CALL_OW 437
53508: PUSH
53509: LD_INT 1
53511: ARRAY
53512: PUSH
53513: LD_INT 4
53515: ARRAY
53516: ST_TO_ADDR
// end ;
53517: LD_VAR 0 2
53521: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
53522: LD_INT 0
53524: PPUSH
53525: PPUSH
53526: PPUSH
53527: PPUSH
// if not base_units then
53528: LD_VAR 0 1
53532: NOT
53533: IFFALSE 53537
// exit ;
53535: GO 53624
// result := false ;
53537: LD_ADDR_VAR 0 2
53541: PUSH
53542: LD_INT 0
53544: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
53545: LD_ADDR_VAR 0 5
53549: PUSH
53550: LD_VAR 0 1
53554: PPUSH
53555: LD_INT 21
53557: PUSH
53558: LD_INT 3
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PPUSH
53565: CALL_OW 72
53569: ST_TO_ADDR
// if not tmp then
53570: LD_VAR 0 5
53574: NOT
53575: IFFALSE 53579
// exit ;
53577: GO 53624
// for i in tmp do
53579: LD_ADDR_VAR 0 3
53583: PUSH
53584: LD_VAR 0 5
53588: PUSH
53589: FOR_IN
53590: IFFALSE 53622
// begin result := EnemyInRange ( i , 22 ) ;
53592: LD_ADDR_VAR 0 2
53596: PUSH
53597: LD_VAR 0 3
53601: PPUSH
53602: LD_INT 22
53604: PPUSH
53605: CALL 51860 0 2
53609: ST_TO_ADDR
// if result then
53610: LD_VAR 0 2
53614: IFFALSE 53620
// exit ;
53616: POP
53617: POP
53618: GO 53624
// end ;
53620: GO 53589
53622: POP
53623: POP
// end ;
53624: LD_VAR 0 2
53628: RET
// export function FilterByTag ( units , tag ) ; begin
53629: LD_INT 0
53631: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
53632: LD_ADDR_VAR 0 3
53636: PUSH
53637: LD_VAR 0 1
53641: PPUSH
53642: LD_INT 120
53644: PUSH
53645: LD_VAR 0 2
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PPUSH
53654: CALL_OW 72
53658: ST_TO_ADDR
// end ;
53659: LD_VAR 0 3
53663: RET
// export function IsDriver ( un ) ; begin
53664: LD_INT 0
53666: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
53667: LD_ADDR_VAR 0 2
53671: PUSH
53672: LD_VAR 0 1
53676: PUSH
53677: LD_INT 55
53679: PUSH
53680: EMPTY
53681: LIST
53682: PPUSH
53683: CALL_OW 69
53687: IN
53688: ST_TO_ADDR
// end ;
53689: LD_VAR 0 2
53693: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
53694: LD_INT 0
53696: PPUSH
53697: PPUSH
// list := [ ] ;
53698: LD_ADDR_VAR 0 5
53702: PUSH
53703: EMPTY
53704: ST_TO_ADDR
// case d of 0 :
53705: LD_VAR 0 3
53709: PUSH
53710: LD_INT 0
53712: DOUBLE
53713: EQUAL
53714: IFTRUE 53718
53716: GO 53851
53718: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
53719: LD_ADDR_VAR 0 5
53723: PUSH
53724: LD_VAR 0 1
53728: PUSH
53729: LD_INT 4
53731: MINUS
53732: PUSH
53733: LD_VAR 0 2
53737: PUSH
53738: LD_INT 4
53740: MINUS
53741: PUSH
53742: LD_INT 2
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: LIST
53749: PUSH
53750: LD_VAR 0 1
53754: PUSH
53755: LD_INT 3
53757: MINUS
53758: PUSH
53759: LD_VAR 0 2
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: LIST
53771: PUSH
53772: LD_VAR 0 1
53776: PUSH
53777: LD_INT 4
53779: PLUS
53780: PUSH
53781: LD_VAR 0 2
53785: PUSH
53786: LD_INT 4
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: LIST
53793: PUSH
53794: LD_VAR 0 1
53798: PUSH
53799: LD_INT 3
53801: PLUS
53802: PUSH
53803: LD_VAR 0 2
53807: PUSH
53808: LD_INT 3
53810: PLUS
53811: PUSH
53812: LD_INT 5
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: LIST
53819: PUSH
53820: LD_VAR 0 1
53824: PUSH
53825: LD_VAR 0 2
53829: PUSH
53830: LD_INT 4
53832: PLUS
53833: PUSH
53834: LD_INT 0
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: LIST
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: ST_TO_ADDR
// end ; 1 :
53849: GO 54549
53851: LD_INT 1
53853: DOUBLE
53854: EQUAL
53855: IFTRUE 53859
53857: GO 53992
53859: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53860: LD_ADDR_VAR 0 5
53864: PUSH
53865: LD_VAR 0 1
53869: PUSH
53870: LD_VAR 0 2
53874: PUSH
53875: LD_INT 4
53877: MINUS
53878: PUSH
53879: LD_INT 3
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: LIST
53886: PUSH
53887: LD_VAR 0 1
53891: PUSH
53892: LD_INT 3
53894: MINUS
53895: PUSH
53896: LD_VAR 0 2
53900: PUSH
53901: LD_INT 3
53903: MINUS
53904: PUSH
53905: LD_INT 2
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: LIST
53912: PUSH
53913: LD_VAR 0 1
53917: PUSH
53918: LD_INT 4
53920: MINUS
53921: PUSH
53922: LD_VAR 0 2
53926: PUSH
53927: LD_INT 1
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: LIST
53934: PUSH
53935: LD_VAR 0 1
53939: PUSH
53940: LD_VAR 0 2
53944: PUSH
53945: LD_INT 3
53947: PLUS
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: LIST
53956: PUSH
53957: LD_VAR 0 1
53961: PUSH
53962: LD_INT 4
53964: PLUS
53965: PUSH
53966: LD_VAR 0 2
53970: PUSH
53971: LD_INT 4
53973: PLUS
53974: PUSH
53975: LD_INT 5
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: LIST
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: ST_TO_ADDR
// end ; 2 :
53990: GO 54549
53992: LD_INT 2
53994: DOUBLE
53995: EQUAL
53996: IFTRUE 54000
53998: GO 54129
54000: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54001: LD_ADDR_VAR 0 5
54005: PUSH
54006: LD_VAR 0 1
54010: PUSH
54011: LD_VAR 0 2
54015: PUSH
54016: LD_INT 3
54018: MINUS
54019: PUSH
54020: LD_INT 3
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: LIST
54027: PUSH
54028: LD_VAR 0 1
54032: PUSH
54033: LD_INT 4
54035: PLUS
54036: PUSH
54037: LD_VAR 0 2
54041: PUSH
54042: LD_INT 4
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: LIST
54049: PUSH
54050: LD_VAR 0 1
54054: PUSH
54055: LD_VAR 0 2
54059: PUSH
54060: LD_INT 4
54062: PLUS
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: LIST
54071: PUSH
54072: LD_VAR 0 1
54076: PUSH
54077: LD_INT 3
54079: MINUS
54080: PUSH
54081: LD_VAR 0 2
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: LIST
54093: PUSH
54094: LD_VAR 0 1
54098: PUSH
54099: LD_INT 4
54101: MINUS
54102: PUSH
54103: LD_VAR 0 2
54107: PUSH
54108: LD_INT 4
54110: MINUS
54111: PUSH
54112: LD_INT 2
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: LIST
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: ST_TO_ADDR
// end ; 3 :
54127: GO 54549
54129: LD_INT 3
54131: DOUBLE
54132: EQUAL
54133: IFTRUE 54137
54135: GO 54270
54137: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
54138: LD_ADDR_VAR 0 5
54142: PUSH
54143: LD_VAR 0 1
54147: PUSH
54148: LD_INT 3
54150: PLUS
54151: PUSH
54152: LD_VAR 0 2
54156: PUSH
54157: LD_INT 4
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: LIST
54164: PUSH
54165: LD_VAR 0 1
54169: PUSH
54170: LD_INT 4
54172: PLUS
54173: PUSH
54174: LD_VAR 0 2
54178: PUSH
54179: LD_INT 4
54181: PLUS
54182: PUSH
54183: LD_INT 5
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: LIST
54190: PUSH
54191: LD_VAR 0 1
54195: PUSH
54196: LD_INT 4
54198: MINUS
54199: PUSH
54200: LD_VAR 0 2
54204: PUSH
54205: LD_INT 1
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: LIST
54212: PUSH
54213: LD_VAR 0 1
54217: PUSH
54218: LD_VAR 0 2
54222: PUSH
54223: LD_INT 4
54225: MINUS
54226: PUSH
54227: LD_INT 3
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: LIST
54234: PUSH
54235: LD_VAR 0 1
54239: PUSH
54240: LD_INT 3
54242: MINUS
54243: PUSH
54244: LD_VAR 0 2
54248: PUSH
54249: LD_INT 3
54251: MINUS
54252: PUSH
54253: LD_INT 2
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: LIST
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: ST_TO_ADDR
// end ; 4 :
54268: GO 54549
54270: LD_INT 4
54272: DOUBLE
54273: EQUAL
54274: IFTRUE 54278
54276: GO 54411
54278: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
54279: LD_ADDR_VAR 0 5
54283: PUSH
54284: LD_VAR 0 1
54288: PUSH
54289: LD_VAR 0 2
54293: PUSH
54294: LD_INT 4
54296: PLUS
54297: PUSH
54298: LD_INT 0
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: LIST
54305: PUSH
54306: LD_VAR 0 1
54310: PUSH
54311: LD_INT 3
54313: PLUS
54314: PUSH
54315: LD_VAR 0 2
54319: PUSH
54320: LD_INT 3
54322: PLUS
54323: PUSH
54324: LD_INT 5
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: LIST
54331: PUSH
54332: LD_VAR 0 1
54336: PUSH
54337: LD_INT 4
54339: PLUS
54340: PUSH
54341: LD_VAR 0 2
54345: PUSH
54346: LD_INT 4
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: LIST
54353: PUSH
54354: LD_VAR 0 1
54358: PUSH
54359: LD_VAR 0 2
54363: PUSH
54364: LD_INT 3
54366: MINUS
54367: PUSH
54368: LD_INT 3
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: LIST
54375: PUSH
54376: LD_VAR 0 1
54380: PUSH
54381: LD_INT 4
54383: MINUS
54384: PUSH
54385: LD_VAR 0 2
54389: PUSH
54390: LD_INT 4
54392: MINUS
54393: PUSH
54394: LD_INT 2
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: LIST
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: ST_TO_ADDR
// end ; 5 :
54409: GO 54549
54411: LD_INT 5
54413: DOUBLE
54414: EQUAL
54415: IFTRUE 54419
54417: GO 54548
54419: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
54420: LD_ADDR_VAR 0 5
54424: PUSH
54425: LD_VAR 0 1
54429: PUSH
54430: LD_INT 4
54432: MINUS
54433: PUSH
54434: LD_VAR 0 2
54438: PUSH
54439: LD_INT 1
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: LIST
54446: PUSH
54447: LD_VAR 0 1
54451: PUSH
54452: LD_VAR 0 2
54456: PUSH
54457: LD_INT 4
54459: MINUS
54460: PUSH
54461: LD_INT 3
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: LIST
54468: PUSH
54469: LD_VAR 0 1
54473: PUSH
54474: LD_INT 4
54476: PLUS
54477: PUSH
54478: LD_VAR 0 2
54482: PUSH
54483: LD_INT 4
54485: PLUS
54486: PUSH
54487: LD_INT 5
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: LIST
54494: PUSH
54495: LD_VAR 0 1
54499: PUSH
54500: LD_INT 3
54502: PLUS
54503: PUSH
54504: LD_VAR 0 2
54508: PUSH
54509: LD_INT 4
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: LIST
54516: PUSH
54517: LD_VAR 0 1
54521: PUSH
54522: LD_VAR 0 2
54526: PUSH
54527: LD_INT 3
54529: PLUS
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: LIST
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: ST_TO_ADDR
// end ; end ;
54546: GO 54549
54548: POP
// result := list ;
54549: LD_ADDR_VAR 0 4
54553: PUSH
54554: LD_VAR 0 5
54558: ST_TO_ADDR
// end ;
54559: LD_VAR 0 4
54563: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
54564: LD_INT 0
54566: PPUSH
54567: PPUSH
54568: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
54569: LD_VAR 0 1
54573: NOT
54574: PUSH
54575: LD_VAR 0 2
54579: PUSH
54580: LD_INT 1
54582: PUSH
54583: LD_INT 2
54585: PUSH
54586: LD_INT 3
54588: PUSH
54589: LD_INT 4
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: IN
54598: NOT
54599: OR
54600: IFFALSE 54604
// exit ;
54602: GO 54696
// tmp := [ ] ;
54604: LD_ADDR_VAR 0 5
54608: PUSH
54609: EMPTY
54610: ST_TO_ADDR
// for i in units do
54611: LD_ADDR_VAR 0 4
54615: PUSH
54616: LD_VAR 0 1
54620: PUSH
54621: FOR_IN
54622: IFFALSE 54665
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
54624: LD_ADDR_VAR 0 5
54628: PUSH
54629: LD_VAR 0 5
54633: PPUSH
54634: LD_VAR 0 5
54638: PUSH
54639: LD_INT 1
54641: PLUS
54642: PPUSH
54643: LD_VAR 0 4
54647: PPUSH
54648: LD_VAR 0 2
54652: PPUSH
54653: CALL_OW 259
54657: PPUSH
54658: CALL_OW 2
54662: ST_TO_ADDR
54663: GO 54621
54665: POP
54666: POP
// if not tmp then
54667: LD_VAR 0 5
54671: NOT
54672: IFFALSE 54676
// exit ;
54674: GO 54696
// result := SortListByListDesc ( units , tmp ) ;
54676: LD_ADDR_VAR 0 3
54680: PUSH
54681: LD_VAR 0 1
54685: PPUSH
54686: LD_VAR 0 5
54690: PPUSH
54691: CALL_OW 77
54695: ST_TO_ADDR
// end ;
54696: LD_VAR 0 3
54700: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
54701: LD_INT 0
54703: PPUSH
54704: PPUSH
54705: PPUSH
// result := false ;
54706: LD_ADDR_VAR 0 3
54710: PUSH
54711: LD_INT 0
54713: ST_TO_ADDR
// x := GetX ( building ) ;
54714: LD_ADDR_VAR 0 4
54718: PUSH
54719: LD_VAR 0 2
54723: PPUSH
54724: CALL_OW 250
54728: ST_TO_ADDR
// y := GetY ( building ) ;
54729: LD_ADDR_VAR 0 5
54733: PUSH
54734: LD_VAR 0 2
54738: PPUSH
54739: CALL_OW 251
54743: ST_TO_ADDR
// if not building or not x or not y then
54744: LD_VAR 0 2
54748: NOT
54749: PUSH
54750: LD_VAR 0 4
54754: NOT
54755: OR
54756: PUSH
54757: LD_VAR 0 5
54761: NOT
54762: OR
54763: IFFALSE 54767
// exit ;
54765: GO 54859
// if GetTaskList ( unit ) then
54767: LD_VAR 0 1
54771: PPUSH
54772: CALL_OW 437
54776: IFFALSE 54859
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54778: LD_STRING e
54780: PUSH
54781: LD_VAR 0 1
54785: PPUSH
54786: CALL_OW 437
54790: PUSH
54791: LD_INT 1
54793: ARRAY
54794: PUSH
54795: LD_INT 1
54797: ARRAY
54798: EQUAL
54799: PUSH
54800: LD_VAR 0 4
54804: PUSH
54805: LD_VAR 0 1
54809: PPUSH
54810: CALL_OW 437
54814: PUSH
54815: LD_INT 1
54817: ARRAY
54818: PUSH
54819: LD_INT 2
54821: ARRAY
54822: EQUAL
54823: AND
54824: PUSH
54825: LD_VAR 0 5
54829: PUSH
54830: LD_VAR 0 1
54834: PPUSH
54835: CALL_OW 437
54839: PUSH
54840: LD_INT 1
54842: ARRAY
54843: PUSH
54844: LD_INT 3
54846: ARRAY
54847: EQUAL
54848: AND
54849: IFFALSE 54859
// result := true end ;
54851: LD_ADDR_VAR 0 3
54855: PUSH
54856: LD_INT 1
54858: ST_TO_ADDR
// end ;
54859: LD_VAR 0 3
54863: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
54864: LD_INT 0
54866: PPUSH
// result := false ;
54867: LD_ADDR_VAR 0 4
54871: PUSH
54872: LD_INT 0
54874: ST_TO_ADDR
// if GetTaskList ( unit ) then
54875: LD_VAR 0 1
54879: PPUSH
54880: CALL_OW 437
54884: IFFALSE 54967
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54886: LD_STRING M
54888: PUSH
54889: LD_VAR 0 1
54893: PPUSH
54894: CALL_OW 437
54898: PUSH
54899: LD_INT 1
54901: ARRAY
54902: PUSH
54903: LD_INT 1
54905: ARRAY
54906: EQUAL
54907: PUSH
54908: LD_VAR 0 2
54912: PUSH
54913: LD_VAR 0 1
54917: PPUSH
54918: CALL_OW 437
54922: PUSH
54923: LD_INT 1
54925: ARRAY
54926: PUSH
54927: LD_INT 2
54929: ARRAY
54930: EQUAL
54931: AND
54932: PUSH
54933: LD_VAR 0 3
54937: PUSH
54938: LD_VAR 0 1
54942: PPUSH
54943: CALL_OW 437
54947: PUSH
54948: LD_INT 1
54950: ARRAY
54951: PUSH
54952: LD_INT 3
54954: ARRAY
54955: EQUAL
54956: AND
54957: IFFALSE 54967
// result := true ;
54959: LD_ADDR_VAR 0 4
54963: PUSH
54964: LD_INT 1
54966: ST_TO_ADDR
// end ; end ;
54967: LD_VAR 0 4
54971: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54972: LD_INT 0
54974: PPUSH
54975: PPUSH
54976: PPUSH
54977: PPUSH
// if not unit or not area then
54978: LD_VAR 0 1
54982: NOT
54983: PUSH
54984: LD_VAR 0 2
54988: NOT
54989: OR
54990: IFFALSE 54994
// exit ;
54992: GO 55158
// tmp := AreaToList ( area , i ) ;
54994: LD_ADDR_VAR 0 6
54998: PUSH
54999: LD_VAR 0 2
55003: PPUSH
55004: LD_VAR 0 5
55008: PPUSH
55009: CALL_OW 517
55013: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55014: LD_ADDR_VAR 0 5
55018: PUSH
55019: DOUBLE
55020: LD_INT 1
55022: DEC
55023: ST_TO_ADDR
55024: LD_VAR 0 6
55028: PUSH
55029: LD_INT 1
55031: ARRAY
55032: PUSH
55033: FOR_TO
55034: IFFALSE 55156
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
55036: LD_ADDR_VAR 0 7
55040: PUSH
55041: LD_VAR 0 6
55045: PUSH
55046: LD_INT 1
55048: ARRAY
55049: PUSH
55050: LD_VAR 0 5
55054: ARRAY
55055: PUSH
55056: LD_VAR 0 6
55060: PUSH
55061: LD_INT 2
55063: ARRAY
55064: PUSH
55065: LD_VAR 0 5
55069: ARRAY
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
55075: LD_VAR 0 7
55079: PUSH
55080: LD_INT 1
55082: ARRAY
55083: PPUSH
55084: LD_VAR 0 7
55088: PUSH
55089: LD_INT 2
55091: ARRAY
55092: PPUSH
55093: CALL_OW 428
55097: PUSH
55098: LD_INT 0
55100: EQUAL
55101: IFFALSE 55154
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
55103: LD_VAR 0 1
55107: PPUSH
55108: LD_VAR 0 7
55112: PUSH
55113: LD_INT 1
55115: ARRAY
55116: PPUSH
55117: LD_VAR 0 7
55121: PUSH
55122: LD_INT 2
55124: ARRAY
55125: PPUSH
55126: LD_VAR 0 3
55130: PPUSH
55131: CALL_OW 48
// result := IsPlaced ( unit ) ;
55135: LD_ADDR_VAR 0 4
55139: PUSH
55140: LD_VAR 0 1
55144: PPUSH
55145: CALL_OW 305
55149: ST_TO_ADDR
// exit ;
55150: POP
55151: POP
55152: GO 55158
// end ; end ;
55154: GO 55033
55156: POP
55157: POP
// end ;
55158: LD_VAR 0 4
55162: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
55163: LD_INT 0
55165: PPUSH
55166: PPUSH
55167: PPUSH
// if not side or side > 8 then
55168: LD_VAR 0 1
55172: NOT
55173: PUSH
55174: LD_VAR 0 1
55178: PUSH
55179: LD_INT 8
55181: GREATER
55182: OR
55183: IFFALSE 55187
// exit ;
55185: GO 55374
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
55187: LD_ADDR_VAR 0 4
55191: PUSH
55192: LD_INT 22
55194: PUSH
55195: LD_VAR 0 1
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 21
55206: PUSH
55207: LD_INT 3
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PPUSH
55218: CALL_OW 69
55222: ST_TO_ADDR
// if not tmp then
55223: LD_VAR 0 4
55227: NOT
55228: IFFALSE 55232
// exit ;
55230: GO 55374
// enable_addtolog := true ;
55232: LD_ADDR_OWVAR 81
55236: PUSH
55237: LD_INT 1
55239: ST_TO_ADDR
// AddToLog ( [ ) ;
55240: LD_STRING [
55242: PPUSH
55243: CALL_OW 561
// for i in tmp do
55247: LD_ADDR_VAR 0 3
55251: PUSH
55252: LD_VAR 0 4
55256: PUSH
55257: FOR_IN
55258: IFFALSE 55365
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
55260: LD_STRING [
55262: PUSH
55263: LD_VAR 0 3
55267: PPUSH
55268: CALL_OW 266
55272: STR
55273: PUSH
55274: LD_STRING , 
55276: STR
55277: PUSH
55278: LD_VAR 0 3
55282: PPUSH
55283: CALL_OW 250
55287: STR
55288: PUSH
55289: LD_STRING , 
55291: STR
55292: PUSH
55293: LD_VAR 0 3
55297: PPUSH
55298: CALL_OW 251
55302: STR
55303: PUSH
55304: LD_STRING , 
55306: STR
55307: PUSH
55308: LD_VAR 0 3
55312: PPUSH
55313: CALL_OW 254
55317: STR
55318: PUSH
55319: LD_STRING , 
55321: STR
55322: PUSH
55323: LD_VAR 0 3
55327: PPUSH
55328: LD_INT 1
55330: PPUSH
55331: CALL_OW 268
55335: STR
55336: PUSH
55337: LD_STRING , 
55339: STR
55340: PUSH
55341: LD_VAR 0 3
55345: PPUSH
55346: LD_INT 2
55348: PPUSH
55349: CALL_OW 268
55353: STR
55354: PUSH
55355: LD_STRING ],
55357: STR
55358: PPUSH
55359: CALL_OW 561
// end ;
55363: GO 55257
55365: POP
55366: POP
// AddToLog ( ]; ) ;
55367: LD_STRING ];
55369: PPUSH
55370: CALL_OW 561
// end ;
55374: LD_VAR 0 2
55378: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
55379: LD_INT 0
55381: PPUSH
55382: PPUSH
55383: PPUSH
55384: PPUSH
55385: PPUSH
// if not area or not rate or not max then
55386: LD_VAR 0 1
55390: NOT
55391: PUSH
55392: LD_VAR 0 2
55396: NOT
55397: OR
55398: PUSH
55399: LD_VAR 0 4
55403: NOT
55404: OR
55405: IFFALSE 55409
// exit ;
55407: GO 55598
// while 1 do
55409: LD_INT 1
55411: IFFALSE 55598
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
55413: LD_ADDR_VAR 0 9
55417: PUSH
55418: LD_VAR 0 1
55422: PPUSH
55423: LD_INT 1
55425: PPUSH
55426: CALL_OW 287
55430: PUSH
55431: LD_INT 10
55433: MUL
55434: ST_TO_ADDR
// r := rate / 10 ;
55435: LD_ADDR_VAR 0 7
55439: PUSH
55440: LD_VAR 0 2
55444: PUSH
55445: LD_INT 10
55447: DIVREAL
55448: ST_TO_ADDR
// time := 1 1$00 ;
55449: LD_ADDR_VAR 0 8
55453: PUSH
55454: LD_INT 2100
55456: ST_TO_ADDR
// if amount < min then
55457: LD_VAR 0 9
55461: PUSH
55462: LD_VAR 0 3
55466: LESS
55467: IFFALSE 55485
// r := r * 2 else
55469: LD_ADDR_VAR 0 7
55473: PUSH
55474: LD_VAR 0 7
55478: PUSH
55479: LD_INT 2
55481: MUL
55482: ST_TO_ADDR
55483: GO 55511
// if amount > max then
55485: LD_VAR 0 9
55489: PUSH
55490: LD_VAR 0 4
55494: GREATER
55495: IFFALSE 55511
// r := r / 2 ;
55497: LD_ADDR_VAR 0 7
55501: PUSH
55502: LD_VAR 0 7
55506: PUSH
55507: LD_INT 2
55509: DIVREAL
55510: ST_TO_ADDR
// time := time / r ;
55511: LD_ADDR_VAR 0 8
55515: PUSH
55516: LD_VAR 0 8
55520: PUSH
55521: LD_VAR 0 7
55525: DIVREAL
55526: ST_TO_ADDR
// if time < 0 then
55527: LD_VAR 0 8
55531: PUSH
55532: LD_INT 0
55534: LESS
55535: IFFALSE 55552
// time := time * - 1 ;
55537: LD_ADDR_VAR 0 8
55541: PUSH
55542: LD_VAR 0 8
55546: PUSH
55547: LD_INT 1
55549: NEG
55550: MUL
55551: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
55552: LD_VAR 0 8
55556: PUSH
55557: LD_INT 35
55559: PPUSH
55560: LD_INT 875
55562: PPUSH
55563: CALL_OW 12
55567: PLUS
55568: PPUSH
55569: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
55573: LD_INT 1
55575: PPUSH
55576: LD_INT 5
55578: PPUSH
55579: CALL_OW 12
55583: PPUSH
55584: LD_VAR 0 1
55588: PPUSH
55589: LD_INT 1
55591: PPUSH
55592: CALL_OW 55
// end ;
55596: GO 55409
// end ;
55598: LD_VAR 0 5
55602: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
55603: LD_INT 0
55605: PPUSH
55606: PPUSH
55607: PPUSH
55608: PPUSH
55609: PPUSH
55610: PPUSH
55611: PPUSH
55612: PPUSH
// if not turrets or not factories then
55613: LD_VAR 0 1
55617: NOT
55618: PUSH
55619: LD_VAR 0 2
55623: NOT
55624: OR
55625: IFFALSE 55629
// exit ;
55627: GO 55936
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
55629: LD_ADDR_VAR 0 10
55633: PUSH
55634: LD_INT 5
55636: PUSH
55637: LD_INT 6
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 2
55646: PUSH
55647: LD_INT 4
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 3
55656: PUSH
55657: LD_INT 5
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 24
55671: PUSH
55672: LD_INT 25
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 23
55681: PUSH
55682: LD_INT 27
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 42
55695: PUSH
55696: LD_INT 43
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 44
55705: PUSH
55706: LD_INT 46
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 45
55715: PUSH
55716: LD_INT 47
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: LIST
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: LIST
55732: ST_TO_ADDR
// result := [ ] ;
55733: LD_ADDR_VAR 0 3
55737: PUSH
55738: EMPTY
55739: ST_TO_ADDR
// for i in turrets do
55740: LD_ADDR_VAR 0 4
55744: PUSH
55745: LD_VAR 0 1
55749: PUSH
55750: FOR_IN
55751: IFFALSE 55934
// begin nat := GetNation ( i ) ;
55753: LD_ADDR_VAR 0 7
55757: PUSH
55758: LD_VAR 0 4
55762: PPUSH
55763: CALL_OW 248
55767: ST_TO_ADDR
// weapon := 0 ;
55768: LD_ADDR_VAR 0 8
55772: PUSH
55773: LD_INT 0
55775: ST_TO_ADDR
// if not nat then
55776: LD_VAR 0 7
55780: NOT
55781: IFFALSE 55785
// continue ;
55783: GO 55750
// for j in list [ nat ] do
55785: LD_ADDR_VAR 0 5
55789: PUSH
55790: LD_VAR 0 10
55794: PUSH
55795: LD_VAR 0 7
55799: ARRAY
55800: PUSH
55801: FOR_IN
55802: IFFALSE 55843
// if GetBWeapon ( i ) = j [ 1 ] then
55804: LD_VAR 0 4
55808: PPUSH
55809: CALL_OW 269
55813: PUSH
55814: LD_VAR 0 5
55818: PUSH
55819: LD_INT 1
55821: ARRAY
55822: EQUAL
55823: IFFALSE 55841
// begin weapon := j [ 2 ] ;
55825: LD_ADDR_VAR 0 8
55829: PUSH
55830: LD_VAR 0 5
55834: PUSH
55835: LD_INT 2
55837: ARRAY
55838: ST_TO_ADDR
// break ;
55839: GO 55843
// end ;
55841: GO 55801
55843: POP
55844: POP
// if not weapon then
55845: LD_VAR 0 8
55849: NOT
55850: IFFALSE 55854
// continue ;
55852: GO 55750
// for k in factories do
55854: LD_ADDR_VAR 0 6
55858: PUSH
55859: LD_VAR 0 2
55863: PUSH
55864: FOR_IN
55865: IFFALSE 55930
// begin weapons := AvailableWeaponList ( k ) ;
55867: LD_ADDR_VAR 0 9
55871: PUSH
55872: LD_VAR 0 6
55876: PPUSH
55877: CALL_OW 478
55881: ST_TO_ADDR
// if not weapons then
55882: LD_VAR 0 9
55886: NOT
55887: IFFALSE 55891
// continue ;
55889: GO 55864
// if weapon in weapons then
55891: LD_VAR 0 8
55895: PUSH
55896: LD_VAR 0 9
55900: IN
55901: IFFALSE 55928
// begin result := [ i , weapon ] ;
55903: LD_ADDR_VAR 0 3
55907: PUSH
55908: LD_VAR 0 4
55912: PUSH
55913: LD_VAR 0 8
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: ST_TO_ADDR
// exit ;
55922: POP
55923: POP
55924: POP
55925: POP
55926: GO 55936
// end ; end ;
55928: GO 55864
55930: POP
55931: POP
// end ;
55932: GO 55750
55934: POP
55935: POP
// end ;
55936: LD_VAR 0 3
55940: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55941: LD_INT 0
55943: PPUSH
// if not side or side > 8 then
55944: LD_VAR 0 3
55948: NOT
55949: PUSH
55950: LD_VAR 0 3
55954: PUSH
55955: LD_INT 8
55957: GREATER
55958: OR
55959: IFFALSE 55963
// exit ;
55961: GO 56022
// if not range then
55963: LD_VAR 0 4
55967: NOT
55968: IFFALSE 55979
// range := - 12 ;
55970: LD_ADDR_VAR 0 4
55974: PUSH
55975: LD_INT 12
55977: NEG
55978: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55979: LD_VAR 0 1
55983: PPUSH
55984: LD_VAR 0 2
55988: PPUSH
55989: LD_VAR 0 3
55993: PPUSH
55994: LD_VAR 0 4
55998: PPUSH
55999: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56003: LD_VAR 0 1
56007: PPUSH
56008: LD_VAR 0 2
56012: PPUSH
56013: LD_VAR 0 3
56017: PPUSH
56018: CALL_OW 331
// end ;
56022: LD_VAR 0 5
56026: RET
// export function Video ( mode ) ; begin
56027: LD_INT 0
56029: PPUSH
// ingame_video = mode ;
56030: LD_ADDR_OWVAR 52
56034: PUSH
56035: LD_VAR 0 1
56039: ST_TO_ADDR
// interface_hidden = mode ;
56040: LD_ADDR_OWVAR 54
56044: PUSH
56045: LD_VAR 0 1
56049: ST_TO_ADDR
// end ;
56050: LD_VAR 0 2
56054: RET
// export function Join ( array , element ) ; begin
56055: LD_INT 0
56057: PPUSH
// result := Replace ( array , array + 1 , element ) ;
56058: LD_ADDR_VAR 0 3
56062: PUSH
56063: LD_VAR 0 1
56067: PPUSH
56068: LD_VAR 0 1
56072: PUSH
56073: LD_INT 1
56075: PLUS
56076: PPUSH
56077: LD_VAR 0 2
56081: PPUSH
56082: CALL_OW 1
56086: ST_TO_ADDR
// end ;
56087: LD_VAR 0 3
56091: RET
// export function JoinUnion ( array , element ) ; begin
56092: LD_INT 0
56094: PPUSH
// result := array union element ;
56095: LD_ADDR_VAR 0 3
56099: PUSH
56100: LD_VAR 0 1
56104: PUSH
56105: LD_VAR 0 2
56109: UNION
56110: ST_TO_ADDR
// end ;
56111: LD_VAR 0 3
56115: RET
// export function GetBehemoths ( side ) ; begin
56116: LD_INT 0
56118: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
56119: LD_ADDR_VAR 0 2
56123: PUSH
56124: LD_INT 22
56126: PUSH
56127: LD_VAR 0 1
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 31
56138: PUSH
56139: LD_INT 25
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PPUSH
56150: CALL_OW 69
56154: ST_TO_ADDR
// end ;
56155: LD_VAR 0 2
56159: RET
// export function Shuffle ( array ) ; var i , index ; begin
56160: LD_INT 0
56162: PPUSH
56163: PPUSH
56164: PPUSH
// result := [ ] ;
56165: LD_ADDR_VAR 0 2
56169: PUSH
56170: EMPTY
56171: ST_TO_ADDR
// if not array then
56172: LD_VAR 0 1
56176: NOT
56177: IFFALSE 56181
// exit ;
56179: GO 56280
// Randomize ;
56181: CALL_OW 10
// for i = array downto 1 do
56185: LD_ADDR_VAR 0 3
56189: PUSH
56190: DOUBLE
56191: LD_VAR 0 1
56195: INC
56196: ST_TO_ADDR
56197: LD_INT 1
56199: PUSH
56200: FOR_DOWNTO
56201: IFFALSE 56278
// begin index := rand ( 1 , array ) ;
56203: LD_ADDR_VAR 0 4
56207: PUSH
56208: LD_INT 1
56210: PPUSH
56211: LD_VAR 0 1
56215: PPUSH
56216: CALL_OW 12
56220: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
56221: LD_ADDR_VAR 0 2
56225: PUSH
56226: LD_VAR 0 2
56230: PPUSH
56231: LD_VAR 0 2
56235: PUSH
56236: LD_INT 1
56238: PLUS
56239: PPUSH
56240: LD_VAR 0 1
56244: PUSH
56245: LD_VAR 0 4
56249: ARRAY
56250: PPUSH
56251: CALL_OW 2
56255: ST_TO_ADDR
// array := Delete ( array , index ) ;
56256: LD_ADDR_VAR 0 1
56260: PUSH
56261: LD_VAR 0 1
56265: PPUSH
56266: LD_VAR 0 4
56270: PPUSH
56271: CALL_OW 3
56275: ST_TO_ADDR
// end ;
56276: GO 56200
56278: POP
56279: POP
// end ;
56280: LD_VAR 0 2
56284: RET
// export function GetBaseMaterials ( base ) ; begin
56285: LD_INT 0
56287: PPUSH
// result := [ 0 , 0 , 0 ] ;
56288: LD_ADDR_VAR 0 2
56292: PUSH
56293: LD_INT 0
56295: PUSH
56296: LD_INT 0
56298: PUSH
56299: LD_INT 0
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: LIST
56306: ST_TO_ADDR
// if not base then
56307: LD_VAR 0 1
56311: NOT
56312: IFFALSE 56316
// exit ;
56314: GO 56365
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
56316: LD_ADDR_VAR 0 2
56320: PUSH
56321: LD_VAR 0 1
56325: PPUSH
56326: LD_INT 1
56328: PPUSH
56329: CALL_OW 275
56333: PUSH
56334: LD_VAR 0 1
56338: PPUSH
56339: LD_INT 2
56341: PPUSH
56342: CALL_OW 275
56346: PUSH
56347: LD_VAR 0 1
56351: PPUSH
56352: LD_INT 3
56354: PPUSH
56355: CALL_OW 275
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: LIST
56364: ST_TO_ADDR
// end ;
56365: LD_VAR 0 2
56369: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
56370: LD_INT 0
56372: PPUSH
56373: PPUSH
// result := array ;
56374: LD_ADDR_VAR 0 3
56378: PUSH
56379: LD_VAR 0 1
56383: ST_TO_ADDR
// if size > 0 then
56384: LD_VAR 0 2
56388: PUSH
56389: LD_INT 0
56391: GREATER
56392: IFFALSE 56438
// for i := array downto size do
56394: LD_ADDR_VAR 0 4
56398: PUSH
56399: DOUBLE
56400: LD_VAR 0 1
56404: INC
56405: ST_TO_ADDR
56406: LD_VAR 0 2
56410: PUSH
56411: FOR_DOWNTO
56412: IFFALSE 56436
// result := Delete ( result , result ) ;
56414: LD_ADDR_VAR 0 3
56418: PUSH
56419: LD_VAR 0 3
56423: PPUSH
56424: LD_VAR 0 3
56428: PPUSH
56429: CALL_OW 3
56433: ST_TO_ADDR
56434: GO 56411
56436: POP
56437: POP
// end ;
56438: LD_VAR 0 3
56442: RET
// export function ComExit ( unit ) ; var tmp ; begin
56443: LD_INT 0
56445: PPUSH
56446: PPUSH
// if not IsInUnit ( unit ) then
56447: LD_VAR 0 1
56451: PPUSH
56452: CALL_OW 310
56456: NOT
56457: IFFALSE 56461
// exit ;
56459: GO 56521
// tmp := IsInUnit ( unit ) ;
56461: LD_ADDR_VAR 0 3
56465: PUSH
56466: LD_VAR 0 1
56470: PPUSH
56471: CALL_OW 310
56475: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
56476: LD_VAR 0 3
56480: PPUSH
56481: CALL_OW 247
56485: PUSH
56486: LD_INT 2
56488: EQUAL
56489: IFFALSE 56502
// ComExitVehicle ( unit ) else
56491: LD_VAR 0 1
56495: PPUSH
56496: CALL_OW 121
56500: GO 56511
// ComExitBuilding ( unit ) ;
56502: LD_VAR 0 1
56506: PPUSH
56507: CALL_OW 122
// result := tmp ;
56511: LD_ADDR_VAR 0 2
56515: PUSH
56516: LD_VAR 0 3
56520: ST_TO_ADDR
// end ;
56521: LD_VAR 0 2
56525: RET
// export function ComExitAll ( units ) ; var i ; begin
56526: LD_INT 0
56528: PPUSH
56529: PPUSH
// if not units then
56530: LD_VAR 0 1
56534: NOT
56535: IFFALSE 56539
// exit ;
56537: GO 56565
// for i in units do
56539: LD_ADDR_VAR 0 3
56543: PUSH
56544: LD_VAR 0 1
56548: PUSH
56549: FOR_IN
56550: IFFALSE 56563
// ComExit ( i ) ;
56552: LD_VAR 0 3
56556: PPUSH
56557: CALL 56443 0 1
56561: GO 56549
56563: POP
56564: POP
// end ;
56565: LD_VAR 0 2
56569: RET
// export function ResetHc ; begin
56570: LD_INT 0
56572: PPUSH
// InitHc ;
56573: CALL_OW 19
// hc_importance := 0 ;
56577: LD_ADDR_OWVAR 32
56581: PUSH
56582: LD_INT 0
56584: ST_TO_ADDR
// end ;
56585: LD_VAR 0 1
56589: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
56590: LD_INT 0
56592: PPUSH
56593: PPUSH
56594: PPUSH
// _x := ( x1 + x2 ) div 2 ;
56595: LD_ADDR_VAR 0 6
56599: PUSH
56600: LD_VAR 0 1
56604: PUSH
56605: LD_VAR 0 3
56609: PLUS
56610: PUSH
56611: LD_INT 2
56613: DIV
56614: ST_TO_ADDR
// if _x < 0 then
56615: LD_VAR 0 6
56619: PUSH
56620: LD_INT 0
56622: LESS
56623: IFFALSE 56640
// _x := _x * - 1 ;
56625: LD_ADDR_VAR 0 6
56629: PUSH
56630: LD_VAR 0 6
56634: PUSH
56635: LD_INT 1
56637: NEG
56638: MUL
56639: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
56640: LD_ADDR_VAR 0 7
56644: PUSH
56645: LD_VAR 0 2
56649: PUSH
56650: LD_VAR 0 4
56654: PLUS
56655: PUSH
56656: LD_INT 2
56658: DIV
56659: ST_TO_ADDR
// if _y < 0 then
56660: LD_VAR 0 7
56664: PUSH
56665: LD_INT 0
56667: LESS
56668: IFFALSE 56685
// _y := _y * - 1 ;
56670: LD_ADDR_VAR 0 7
56674: PUSH
56675: LD_VAR 0 7
56679: PUSH
56680: LD_INT 1
56682: NEG
56683: MUL
56684: ST_TO_ADDR
// result := [ _x , _y ] ;
56685: LD_ADDR_VAR 0 5
56689: PUSH
56690: LD_VAR 0 6
56694: PUSH
56695: LD_VAR 0 7
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: ST_TO_ADDR
// end ;
56704: LD_VAR 0 5
56708: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
56709: LD_INT 0
56711: PPUSH
56712: PPUSH
56713: PPUSH
56714: PPUSH
// task := GetTaskList ( unit ) ;
56715: LD_ADDR_VAR 0 7
56719: PUSH
56720: LD_VAR 0 1
56724: PPUSH
56725: CALL_OW 437
56729: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
56730: LD_VAR 0 7
56734: NOT
56735: PUSH
56736: LD_VAR 0 1
56740: PPUSH
56741: LD_VAR 0 2
56745: PPUSH
56746: CALL_OW 308
56750: NOT
56751: AND
56752: IFFALSE 56756
// exit ;
56754: GO 56874
// if IsInArea ( unit , area ) then
56756: LD_VAR 0 1
56760: PPUSH
56761: LD_VAR 0 2
56765: PPUSH
56766: CALL_OW 308
56770: IFFALSE 56788
// begin ComMoveToArea ( unit , goAway ) ;
56772: LD_VAR 0 1
56776: PPUSH
56777: LD_VAR 0 3
56781: PPUSH
56782: CALL_OW 113
// exit ;
56786: GO 56874
// end ; if task [ 1 ] [ 1 ] <> M then
56788: LD_VAR 0 7
56792: PUSH
56793: LD_INT 1
56795: ARRAY
56796: PUSH
56797: LD_INT 1
56799: ARRAY
56800: PUSH
56801: LD_STRING M
56803: NONEQUAL
56804: IFFALSE 56808
// exit ;
56806: GO 56874
// x := task [ 1 ] [ 2 ] ;
56808: LD_ADDR_VAR 0 5
56812: PUSH
56813: LD_VAR 0 7
56817: PUSH
56818: LD_INT 1
56820: ARRAY
56821: PUSH
56822: LD_INT 2
56824: ARRAY
56825: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
56826: LD_ADDR_VAR 0 6
56830: PUSH
56831: LD_VAR 0 7
56835: PUSH
56836: LD_INT 1
56838: ARRAY
56839: PUSH
56840: LD_INT 3
56842: ARRAY
56843: ST_TO_ADDR
// if InArea ( x , y , area ) then
56844: LD_VAR 0 5
56848: PPUSH
56849: LD_VAR 0 6
56853: PPUSH
56854: LD_VAR 0 2
56858: PPUSH
56859: CALL_OW 309
56863: IFFALSE 56874
// ComStop ( unit ) ;
56865: LD_VAR 0 1
56869: PPUSH
56870: CALL_OW 141
// end ;
56874: LD_VAR 0 4
56878: RET
// export function Abs ( value ) ; begin
56879: LD_INT 0
56881: PPUSH
// result := value ;
56882: LD_ADDR_VAR 0 2
56886: PUSH
56887: LD_VAR 0 1
56891: ST_TO_ADDR
// if value < 0 then
56892: LD_VAR 0 1
56896: PUSH
56897: LD_INT 0
56899: LESS
56900: IFFALSE 56917
// result := value * - 1 ;
56902: LD_ADDR_VAR 0 2
56906: PUSH
56907: LD_VAR 0 1
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: MUL
56916: ST_TO_ADDR
// end ;
56917: LD_VAR 0 2
56921: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
56922: LD_INT 0
56924: PPUSH
56925: PPUSH
56926: PPUSH
56927: PPUSH
56928: PPUSH
56929: PPUSH
56930: PPUSH
56931: PPUSH
// if not unit or not building then
56932: LD_VAR 0 1
56936: NOT
56937: PUSH
56938: LD_VAR 0 2
56942: NOT
56943: OR
56944: IFFALSE 56948
// exit ;
56946: GO 57174
// x := GetX ( building ) ;
56948: LD_ADDR_VAR 0 4
56952: PUSH
56953: LD_VAR 0 2
56957: PPUSH
56958: CALL_OW 250
56962: ST_TO_ADDR
// y := GetY ( building ) ;
56963: LD_ADDR_VAR 0 6
56967: PUSH
56968: LD_VAR 0 2
56972: PPUSH
56973: CALL_OW 251
56977: ST_TO_ADDR
// d := GetDir ( building ) ;
56978: LD_ADDR_VAR 0 8
56982: PUSH
56983: LD_VAR 0 2
56987: PPUSH
56988: CALL_OW 254
56992: ST_TO_ADDR
// r := 4 ;
56993: LD_ADDR_VAR 0 9
56997: PUSH
56998: LD_INT 4
57000: ST_TO_ADDR
// for i := 1 to 5 do
57001: LD_ADDR_VAR 0 10
57005: PUSH
57006: DOUBLE
57007: LD_INT 1
57009: DEC
57010: ST_TO_ADDR
57011: LD_INT 5
57013: PUSH
57014: FOR_TO
57015: IFFALSE 57172
// begin _x := ShiftX ( x , d , r + i ) ;
57017: LD_ADDR_VAR 0 5
57021: PUSH
57022: LD_VAR 0 4
57026: PPUSH
57027: LD_VAR 0 8
57031: PPUSH
57032: LD_VAR 0 9
57036: PUSH
57037: LD_VAR 0 10
57041: PLUS
57042: PPUSH
57043: CALL_OW 272
57047: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
57048: LD_ADDR_VAR 0 7
57052: PUSH
57053: LD_VAR 0 6
57057: PPUSH
57058: LD_VAR 0 8
57062: PPUSH
57063: LD_VAR 0 9
57067: PUSH
57068: LD_VAR 0 10
57072: PLUS
57073: PPUSH
57074: CALL_OW 273
57078: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
57079: LD_VAR 0 5
57083: PPUSH
57084: LD_VAR 0 7
57088: PPUSH
57089: CALL_OW 488
57093: PUSH
57094: LD_VAR 0 5
57098: PPUSH
57099: LD_VAR 0 7
57103: PPUSH
57104: CALL_OW 428
57108: PPUSH
57109: CALL_OW 247
57113: PUSH
57114: LD_INT 3
57116: PUSH
57117: LD_INT 2
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: IN
57124: NOT
57125: AND
57126: IFFALSE 57170
// begin ComMoveXY ( unit , _x , _y ) ;
57128: LD_VAR 0 1
57132: PPUSH
57133: LD_VAR 0 5
57137: PPUSH
57138: LD_VAR 0 7
57142: PPUSH
57143: CALL_OW 111
// result := [ _x , _y ] ;
57147: LD_ADDR_VAR 0 3
57151: PUSH
57152: LD_VAR 0 5
57156: PUSH
57157: LD_VAR 0 7
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: ST_TO_ADDR
// exit ;
57166: POP
57167: POP
57168: GO 57174
// end ; end ;
57170: GO 57014
57172: POP
57173: POP
// end ;
57174: LD_VAR 0 3
57178: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
57179: LD_INT 0
57181: PPUSH
57182: PPUSH
57183: PPUSH
// result := 0 ;
57184: LD_ADDR_VAR 0 3
57188: PUSH
57189: LD_INT 0
57191: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
57192: LD_VAR 0 1
57196: PUSH
57197: LD_INT 0
57199: LESS
57200: PUSH
57201: LD_VAR 0 1
57205: PUSH
57206: LD_INT 8
57208: GREATER
57209: OR
57210: PUSH
57211: LD_VAR 0 2
57215: PUSH
57216: LD_INT 0
57218: LESS
57219: OR
57220: PUSH
57221: LD_VAR 0 2
57225: PUSH
57226: LD_INT 8
57228: GREATER
57229: OR
57230: IFFALSE 57234
// exit ;
57232: GO 57309
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
57234: LD_ADDR_VAR 0 4
57238: PUSH
57239: LD_INT 22
57241: PUSH
57242: LD_VAR 0 2
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PPUSH
57251: CALL_OW 69
57255: PUSH
57256: FOR_IN
57257: IFFALSE 57307
// begin un := UnitShoot ( i ) ;
57259: LD_ADDR_VAR 0 5
57263: PUSH
57264: LD_VAR 0 4
57268: PPUSH
57269: CALL_OW 504
57273: ST_TO_ADDR
// if GetSide ( un ) = side1 then
57274: LD_VAR 0 5
57278: PPUSH
57279: CALL_OW 255
57283: PUSH
57284: LD_VAR 0 1
57288: EQUAL
57289: IFFALSE 57305
// begin result := un ;
57291: LD_ADDR_VAR 0 3
57295: PUSH
57296: LD_VAR 0 5
57300: ST_TO_ADDR
// exit ;
57301: POP
57302: POP
57303: GO 57309
// end ; end ;
57305: GO 57256
57307: POP
57308: POP
// end ;
57309: LD_VAR 0 3
57313: RET
// export function GetCargoBay ( units ) ; begin
57314: LD_INT 0
57316: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
57317: LD_ADDR_VAR 0 2
57321: PUSH
57322: LD_VAR 0 1
57326: PPUSH
57327: LD_INT 2
57329: PUSH
57330: LD_INT 34
57332: PUSH
57333: LD_INT 12
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 34
57342: PUSH
57343: LD_INT 51
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 34
57352: PUSH
57353: LD_INT 32
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 34
57362: PUSH
57363: LD_EXP 71
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: PPUSH
57379: CALL_OW 72
57383: ST_TO_ADDR
// end ;
57384: LD_VAR 0 2
57388: RET
// export function Negate ( value ) ; begin
57389: LD_INT 0
57391: PPUSH
// result := not value ;
57392: LD_ADDR_VAR 0 2
57396: PUSH
57397: LD_VAR 0 1
57401: NOT
57402: ST_TO_ADDR
// end ;
57403: LD_VAR 0 2
57407: RET
// export function Inc ( value ) ; begin
57408: LD_INT 0
57410: PPUSH
// result := value + 1 ;
57411: LD_ADDR_VAR 0 2
57415: PUSH
57416: LD_VAR 0 1
57420: PUSH
57421: LD_INT 1
57423: PLUS
57424: ST_TO_ADDR
// end ;
57425: LD_VAR 0 2
57429: RET
// export function Dec ( value ) ; begin
57430: LD_INT 0
57432: PPUSH
// result := value - 1 ;
57433: LD_ADDR_VAR 0 2
57437: PUSH
57438: LD_VAR 0 1
57442: PUSH
57443: LD_INT 1
57445: MINUS
57446: ST_TO_ADDR
// end ;
57447: LD_VAR 0 2
57451: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
57452: LD_INT 0
57454: PPUSH
57455: PPUSH
57456: PPUSH
57457: PPUSH
57458: PPUSH
57459: PPUSH
57460: PPUSH
57461: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
57462: LD_VAR 0 1
57466: PPUSH
57467: LD_VAR 0 2
57471: PPUSH
57472: CALL_OW 488
57476: NOT
57477: PUSH
57478: LD_VAR 0 3
57482: PPUSH
57483: LD_VAR 0 4
57487: PPUSH
57488: CALL_OW 488
57492: NOT
57493: OR
57494: IFFALSE 57507
// begin result := - 1 ;
57496: LD_ADDR_VAR 0 5
57500: PUSH
57501: LD_INT 1
57503: NEG
57504: ST_TO_ADDR
// exit ;
57505: GO 57742
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
57507: LD_ADDR_VAR 0 12
57511: PUSH
57512: LD_VAR 0 1
57516: PPUSH
57517: LD_VAR 0 2
57521: PPUSH
57522: LD_VAR 0 3
57526: PPUSH
57527: LD_VAR 0 4
57531: PPUSH
57532: CALL 56590 0 4
57536: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
57537: LD_ADDR_VAR 0 11
57541: PUSH
57542: LD_VAR 0 1
57546: PPUSH
57547: LD_VAR 0 2
57551: PPUSH
57552: LD_VAR 0 12
57556: PUSH
57557: LD_INT 1
57559: ARRAY
57560: PPUSH
57561: LD_VAR 0 12
57565: PUSH
57566: LD_INT 2
57568: ARRAY
57569: PPUSH
57570: CALL_OW 298
57574: ST_TO_ADDR
// distance := 9999 ;
57575: LD_ADDR_VAR 0 10
57579: PUSH
57580: LD_INT 9999
57582: ST_TO_ADDR
// for i := 0 to 5 do
57583: LD_ADDR_VAR 0 6
57587: PUSH
57588: DOUBLE
57589: LD_INT 0
57591: DEC
57592: ST_TO_ADDR
57593: LD_INT 5
57595: PUSH
57596: FOR_TO
57597: IFFALSE 57740
// begin _x := ShiftX ( x1 , i , centerDist ) ;
57599: LD_ADDR_VAR 0 7
57603: PUSH
57604: LD_VAR 0 1
57608: PPUSH
57609: LD_VAR 0 6
57613: PPUSH
57614: LD_VAR 0 11
57618: PPUSH
57619: CALL_OW 272
57623: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
57624: LD_ADDR_VAR 0 8
57628: PUSH
57629: LD_VAR 0 2
57633: PPUSH
57634: LD_VAR 0 6
57638: PPUSH
57639: LD_VAR 0 11
57643: PPUSH
57644: CALL_OW 273
57648: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57649: LD_VAR 0 7
57653: PPUSH
57654: LD_VAR 0 8
57658: PPUSH
57659: CALL_OW 488
57663: NOT
57664: IFFALSE 57668
// continue ;
57666: GO 57596
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
57668: LD_ADDR_VAR 0 9
57672: PUSH
57673: LD_VAR 0 12
57677: PUSH
57678: LD_INT 1
57680: ARRAY
57681: PPUSH
57682: LD_VAR 0 12
57686: PUSH
57687: LD_INT 2
57689: ARRAY
57690: PPUSH
57691: LD_VAR 0 7
57695: PPUSH
57696: LD_VAR 0 8
57700: PPUSH
57701: CALL_OW 298
57705: ST_TO_ADDR
// if tmp < distance then
57706: LD_VAR 0 9
57710: PUSH
57711: LD_VAR 0 10
57715: LESS
57716: IFFALSE 57738
// begin result := i ;
57718: LD_ADDR_VAR 0 5
57722: PUSH
57723: LD_VAR 0 6
57727: ST_TO_ADDR
// distance := tmp ;
57728: LD_ADDR_VAR 0 10
57732: PUSH
57733: LD_VAR 0 9
57737: ST_TO_ADDR
// end ; end ;
57738: GO 57596
57740: POP
57741: POP
// end ;
57742: LD_VAR 0 5
57746: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57747: LD_INT 0
57749: PPUSH
57750: PPUSH
// if not driver or not IsInUnit ( driver ) then
57751: LD_VAR 0 1
57755: NOT
57756: PUSH
57757: LD_VAR 0 1
57761: PPUSH
57762: CALL_OW 310
57766: NOT
57767: OR
57768: IFFALSE 57772
// exit ;
57770: GO 57862
// vehicle := IsInUnit ( driver ) ;
57772: LD_ADDR_VAR 0 3
57776: PUSH
57777: LD_VAR 0 1
57781: PPUSH
57782: CALL_OW 310
57786: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57787: LD_VAR 0 1
57791: PPUSH
57792: LD_STRING \
57794: PUSH
57795: LD_INT 0
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: LD_INT 0
57806: PUSH
57807: LD_INT 0
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: PUSH
57822: LD_STRING E
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: LD_INT 0
57830: PUSH
57831: LD_VAR 0 3
57835: PUSH
57836: LD_INT 0
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PPUSH
57858: CALL_OW 446
// end ;
57862: LD_VAR 0 2
57866: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57867: LD_INT 0
57869: PPUSH
57870: PPUSH
// if not driver or not IsInUnit ( driver ) then
57871: LD_VAR 0 1
57875: NOT
57876: PUSH
57877: LD_VAR 0 1
57881: PPUSH
57882: CALL_OW 310
57886: NOT
57887: OR
57888: IFFALSE 57892
// exit ;
57890: GO 57982
// vehicle := IsInUnit ( driver ) ;
57892: LD_ADDR_VAR 0 3
57896: PUSH
57897: LD_VAR 0 1
57901: PPUSH
57902: CALL_OW 310
57906: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57907: LD_VAR 0 1
57911: PPUSH
57912: LD_STRING \
57914: PUSH
57915: LD_INT 0
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: LD_INT 0
57923: PUSH
57924: LD_INT 0
57926: PUSH
57927: LD_INT 0
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: PUSH
57942: LD_STRING E
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: LD_INT 0
57950: PUSH
57951: LD_VAR 0 3
57955: PUSH
57956: LD_INT 0
57958: PUSH
57959: LD_INT 0
57961: PUSH
57962: LD_INT 0
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PPUSH
57978: CALL_OW 447
// end ;
57982: LD_VAR 0 2
57986: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
57987: LD_INT 0
57989: PPUSH
57990: PPUSH
57991: PPUSH
// tmp := [ ] ;
57992: LD_ADDR_VAR 0 5
57996: PUSH
57997: EMPTY
57998: ST_TO_ADDR
// for i in units do
57999: LD_ADDR_VAR 0 4
58003: PUSH
58004: LD_VAR 0 1
58008: PUSH
58009: FOR_IN
58010: IFFALSE 58048
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
58012: LD_ADDR_VAR 0 5
58016: PUSH
58017: LD_VAR 0 5
58021: PPUSH
58022: LD_VAR 0 5
58026: PUSH
58027: LD_INT 1
58029: PLUS
58030: PPUSH
58031: LD_VAR 0 4
58035: PPUSH
58036: CALL_OW 256
58040: PPUSH
58041: CALL_OW 2
58045: ST_TO_ADDR
58046: GO 58009
58048: POP
58049: POP
// if not tmp then
58050: LD_VAR 0 5
58054: NOT
58055: IFFALSE 58059
// exit ;
58057: GO 58107
// if asc then
58059: LD_VAR 0 2
58063: IFFALSE 58087
// result := SortListByListAsc ( units , tmp ) else
58065: LD_ADDR_VAR 0 3
58069: PUSH
58070: LD_VAR 0 1
58074: PPUSH
58075: LD_VAR 0 5
58079: PPUSH
58080: CALL_OW 76
58084: ST_TO_ADDR
58085: GO 58107
// result := SortListByListDesc ( units , tmp ) ;
58087: LD_ADDR_VAR 0 3
58091: PUSH
58092: LD_VAR 0 1
58096: PPUSH
58097: LD_VAR 0 5
58101: PPUSH
58102: CALL_OW 77
58106: ST_TO_ADDR
// end ;
58107: LD_VAR 0 3
58111: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
58112: LD_INT 0
58114: PPUSH
58115: PPUSH
// task := GetTaskList ( mech ) ;
58116: LD_ADDR_VAR 0 4
58120: PUSH
58121: LD_VAR 0 1
58125: PPUSH
58126: CALL_OW 437
58130: ST_TO_ADDR
// if not task then
58131: LD_VAR 0 4
58135: NOT
58136: IFFALSE 58140
// exit ;
58138: GO 58182
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
58140: LD_ADDR_VAR 0 3
58144: PUSH
58145: LD_VAR 0 4
58149: PUSH
58150: LD_INT 1
58152: ARRAY
58153: PUSH
58154: LD_INT 1
58156: ARRAY
58157: PUSH
58158: LD_STRING r
58160: EQUAL
58161: PUSH
58162: LD_VAR 0 4
58166: PUSH
58167: LD_INT 1
58169: ARRAY
58170: PUSH
58171: LD_INT 4
58173: ARRAY
58174: PUSH
58175: LD_VAR 0 2
58179: EQUAL
58180: AND
58181: ST_TO_ADDR
// end ;
58182: LD_VAR 0 3
58186: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
58187: LD_INT 0
58189: PPUSH
// SetDir ( unit , d ) ;
58190: LD_VAR 0 1
58194: PPUSH
58195: LD_VAR 0 4
58199: PPUSH
58200: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
58204: LD_VAR 0 1
58208: PPUSH
58209: LD_VAR 0 2
58213: PPUSH
58214: LD_VAR 0 3
58218: PPUSH
58219: LD_VAR 0 5
58223: PPUSH
58224: CALL_OW 48
// end ;
58228: LD_VAR 0 6
58232: RET
// export function ToNaturalNumber ( number ) ; begin
58233: LD_INT 0
58235: PPUSH
// result := number div 1 ;
58236: LD_ADDR_VAR 0 2
58240: PUSH
58241: LD_VAR 0 1
58245: PUSH
58246: LD_INT 1
58248: DIV
58249: ST_TO_ADDR
// if number < 0 then
58250: LD_VAR 0 1
58254: PUSH
58255: LD_INT 0
58257: LESS
58258: IFFALSE 58268
// result := 0 ;
58260: LD_ADDR_VAR 0 2
58264: PUSH
58265: LD_INT 0
58267: ST_TO_ADDR
// end ;
58268: LD_VAR 0 2
58272: RET
// export function SortByClass ( units , class ) ; var un ; begin
58273: LD_INT 0
58275: PPUSH
58276: PPUSH
// if not units or not class then
58277: LD_VAR 0 1
58281: NOT
58282: PUSH
58283: LD_VAR 0 2
58287: NOT
58288: OR
58289: IFFALSE 58293
// exit ;
58291: GO 58388
// result := [ ] ;
58293: LD_ADDR_VAR 0 3
58297: PUSH
58298: EMPTY
58299: ST_TO_ADDR
// for un in units do
58300: LD_ADDR_VAR 0 4
58304: PUSH
58305: LD_VAR 0 1
58309: PUSH
58310: FOR_IN
58311: IFFALSE 58386
// if GetClass ( un ) = class then
58313: LD_VAR 0 4
58317: PPUSH
58318: CALL_OW 257
58322: PUSH
58323: LD_VAR 0 2
58327: EQUAL
58328: IFFALSE 58355
// result := Insert ( result , 1 , un ) else
58330: LD_ADDR_VAR 0 3
58334: PUSH
58335: LD_VAR 0 3
58339: PPUSH
58340: LD_INT 1
58342: PPUSH
58343: LD_VAR 0 4
58347: PPUSH
58348: CALL_OW 2
58352: ST_TO_ADDR
58353: GO 58384
// result := Replace ( result , result + 1 , un ) ;
58355: LD_ADDR_VAR 0 3
58359: PUSH
58360: LD_VAR 0 3
58364: PPUSH
58365: LD_VAR 0 3
58369: PUSH
58370: LD_INT 1
58372: PLUS
58373: PPUSH
58374: LD_VAR 0 4
58378: PPUSH
58379: CALL_OW 1
58383: ST_TO_ADDR
58384: GO 58310
58386: POP
58387: POP
// end ;
58388: LD_VAR 0 3
58392: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
58393: LD_INT 0
58395: PPUSH
58396: PPUSH
58397: PPUSH
58398: PPUSH
58399: PPUSH
58400: PPUSH
58401: PPUSH
// result := [ ] ;
58402: LD_ADDR_VAR 0 4
58406: PUSH
58407: EMPTY
58408: ST_TO_ADDR
// if x - r < 0 then
58409: LD_VAR 0 1
58413: PUSH
58414: LD_VAR 0 3
58418: MINUS
58419: PUSH
58420: LD_INT 0
58422: LESS
58423: IFFALSE 58435
// min_x := 0 else
58425: LD_ADDR_VAR 0 8
58429: PUSH
58430: LD_INT 0
58432: ST_TO_ADDR
58433: GO 58451
// min_x := x - r ;
58435: LD_ADDR_VAR 0 8
58439: PUSH
58440: LD_VAR 0 1
58444: PUSH
58445: LD_VAR 0 3
58449: MINUS
58450: ST_TO_ADDR
// if y - r < 0 then
58451: LD_VAR 0 2
58455: PUSH
58456: LD_VAR 0 3
58460: MINUS
58461: PUSH
58462: LD_INT 0
58464: LESS
58465: IFFALSE 58477
// min_y := 0 else
58467: LD_ADDR_VAR 0 7
58471: PUSH
58472: LD_INT 0
58474: ST_TO_ADDR
58475: GO 58493
// min_y := y - r ;
58477: LD_ADDR_VAR 0 7
58481: PUSH
58482: LD_VAR 0 2
58486: PUSH
58487: LD_VAR 0 3
58491: MINUS
58492: ST_TO_ADDR
// max_x := x + r ;
58493: LD_ADDR_VAR 0 9
58497: PUSH
58498: LD_VAR 0 1
58502: PUSH
58503: LD_VAR 0 3
58507: PLUS
58508: ST_TO_ADDR
// max_y := y + r ;
58509: LD_ADDR_VAR 0 10
58513: PUSH
58514: LD_VAR 0 2
58518: PUSH
58519: LD_VAR 0 3
58523: PLUS
58524: ST_TO_ADDR
// for _x = min_x to max_x do
58525: LD_ADDR_VAR 0 5
58529: PUSH
58530: DOUBLE
58531: LD_VAR 0 8
58535: DEC
58536: ST_TO_ADDR
58537: LD_VAR 0 9
58541: PUSH
58542: FOR_TO
58543: IFFALSE 58644
// for _y = min_y to max_y do
58545: LD_ADDR_VAR 0 6
58549: PUSH
58550: DOUBLE
58551: LD_VAR 0 7
58555: DEC
58556: ST_TO_ADDR
58557: LD_VAR 0 10
58561: PUSH
58562: FOR_TO
58563: IFFALSE 58640
// begin if not ValidHex ( _x , _y ) then
58565: LD_VAR 0 5
58569: PPUSH
58570: LD_VAR 0 6
58574: PPUSH
58575: CALL_OW 488
58579: NOT
58580: IFFALSE 58584
// continue ;
58582: GO 58562
// if GetResourceTypeXY ( _x , _y ) then
58584: LD_VAR 0 5
58588: PPUSH
58589: LD_VAR 0 6
58593: PPUSH
58594: CALL_OW 283
58598: IFFALSE 58638
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
58600: LD_ADDR_VAR 0 4
58604: PUSH
58605: LD_VAR 0 4
58609: PPUSH
58610: LD_VAR 0 4
58614: PUSH
58615: LD_INT 1
58617: PLUS
58618: PPUSH
58619: LD_VAR 0 5
58623: PUSH
58624: LD_VAR 0 6
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PPUSH
58633: CALL_OW 1
58637: ST_TO_ADDR
// end ;
58638: GO 58562
58640: POP
58641: POP
58642: GO 58542
58644: POP
58645: POP
// end ;
58646: LD_VAR 0 4
58650: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
58651: LD_INT 0
58653: PPUSH
58654: PPUSH
58655: PPUSH
58656: PPUSH
58657: PPUSH
58658: PPUSH
58659: PPUSH
58660: PPUSH
// if not units then
58661: LD_VAR 0 1
58665: NOT
58666: IFFALSE 58670
// exit ;
58668: GO 59181
// result := UnitFilter ( units , [ f_ok ] ) ;
58670: LD_ADDR_VAR 0 3
58674: PUSH
58675: LD_VAR 0 1
58679: PPUSH
58680: LD_INT 50
58682: PUSH
58683: EMPTY
58684: LIST
58685: PPUSH
58686: CALL_OW 72
58690: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
58691: LD_ADDR_VAR 0 8
58695: PUSH
58696: LD_VAR 0 1
58700: PUSH
58701: LD_INT 1
58703: ARRAY
58704: PPUSH
58705: CALL_OW 255
58709: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
58710: LD_ADDR_VAR 0 10
58714: PUSH
58715: LD_INT 29
58717: PUSH
58718: LD_EXP 74
58722: PUSH
58723: LD_INT 49
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: LIST
58730: ST_TO_ADDR
// if not result then
58731: LD_VAR 0 3
58735: NOT
58736: IFFALSE 58740
// exit ;
58738: GO 59181
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
58740: LD_ADDR_VAR 0 5
58744: PUSH
58745: LD_INT 81
58747: PUSH
58748: LD_VAR 0 8
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PPUSH
58757: CALL_OW 69
58761: ST_TO_ADDR
// for i in result do
58762: LD_ADDR_VAR 0 4
58766: PUSH
58767: LD_VAR 0 3
58771: PUSH
58772: FOR_IN
58773: IFFALSE 59179
// begin tag := GetTag ( i ) + 1 ;
58775: LD_ADDR_VAR 0 9
58779: PUSH
58780: LD_VAR 0 4
58784: PPUSH
58785: CALL_OW 110
58789: PUSH
58790: LD_INT 1
58792: PLUS
58793: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
58794: LD_ADDR_VAR 0 7
58798: PUSH
58799: LD_VAR 0 4
58803: PPUSH
58804: CALL_OW 250
58808: PPUSH
58809: LD_VAR 0 4
58813: PPUSH
58814: CALL_OW 251
58818: PPUSH
58819: LD_INT 6
58821: PPUSH
58822: CALL 58393 0 3
58826: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
58827: LD_VAR 0 7
58831: PUSH
58832: LD_VAR 0 4
58836: PPUSH
58837: CALL_OW 264
58841: PUSH
58842: LD_VAR 0 10
58846: IN
58847: NOT
58848: AND
58849: IFFALSE 58888
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
58851: LD_VAR 0 4
58855: PPUSH
58856: LD_VAR 0 7
58860: PUSH
58861: LD_INT 1
58863: ARRAY
58864: PUSH
58865: LD_INT 1
58867: ARRAY
58868: PPUSH
58869: LD_VAR 0 7
58873: PUSH
58874: LD_INT 1
58876: ARRAY
58877: PUSH
58878: LD_INT 2
58880: ARRAY
58881: PPUSH
58882: CALL_OW 116
58886: GO 59177
// if path > tag then
58888: LD_VAR 0 2
58892: PUSH
58893: LD_VAR 0 9
58897: GREATER
58898: IFFALSE 59106
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
58900: LD_ADDR_VAR 0 6
58904: PUSH
58905: LD_VAR 0 5
58909: PPUSH
58910: LD_INT 91
58912: PUSH
58913: LD_VAR 0 4
58917: PUSH
58918: LD_INT 12
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: LIST
58925: PPUSH
58926: CALL_OW 72
58930: ST_TO_ADDR
// if nearEnemy then
58931: LD_VAR 0 6
58935: IFFALSE 59004
// begin if GetWeapon ( i ) = ru_time_lapser then
58937: LD_VAR 0 4
58941: PPUSH
58942: CALL_OW 264
58946: PUSH
58947: LD_INT 49
58949: EQUAL
58950: IFFALSE 58978
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
58952: LD_VAR 0 4
58956: PPUSH
58957: LD_VAR 0 6
58961: PPUSH
58962: LD_VAR 0 4
58966: PPUSH
58967: CALL_OW 74
58971: PPUSH
58972: CALL_OW 112
58976: GO 59002
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
58978: LD_VAR 0 4
58982: PPUSH
58983: LD_VAR 0 6
58987: PPUSH
58988: LD_VAR 0 4
58992: PPUSH
58993: CALL_OW 74
58997: PPUSH
58998: CALL_OW 115
// end else
59002: GO 59104
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
59004: LD_VAR 0 4
59008: PPUSH
59009: LD_VAR 0 2
59013: PUSH
59014: LD_VAR 0 9
59018: ARRAY
59019: PUSH
59020: LD_INT 1
59022: ARRAY
59023: PPUSH
59024: LD_VAR 0 2
59028: PUSH
59029: LD_VAR 0 9
59033: ARRAY
59034: PUSH
59035: LD_INT 2
59037: ARRAY
59038: PPUSH
59039: CALL_OW 297
59043: PUSH
59044: LD_INT 6
59046: GREATER
59047: IFFALSE 59090
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
59049: LD_VAR 0 4
59053: PPUSH
59054: LD_VAR 0 2
59058: PUSH
59059: LD_VAR 0 9
59063: ARRAY
59064: PUSH
59065: LD_INT 1
59067: ARRAY
59068: PPUSH
59069: LD_VAR 0 2
59073: PUSH
59074: LD_VAR 0 9
59078: ARRAY
59079: PUSH
59080: LD_INT 2
59082: ARRAY
59083: PPUSH
59084: CALL_OW 114
59088: GO 59104
// SetTag ( i , tag ) ;
59090: LD_VAR 0 4
59094: PPUSH
59095: LD_VAR 0 9
59099: PPUSH
59100: CALL_OW 109
// end else
59104: GO 59177
// if enemy then
59106: LD_VAR 0 5
59110: IFFALSE 59177
// begin if GetWeapon ( i ) = ru_time_lapser then
59112: LD_VAR 0 4
59116: PPUSH
59117: CALL_OW 264
59121: PUSH
59122: LD_INT 49
59124: EQUAL
59125: IFFALSE 59153
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
59127: LD_VAR 0 4
59131: PPUSH
59132: LD_VAR 0 5
59136: PPUSH
59137: LD_VAR 0 4
59141: PPUSH
59142: CALL_OW 74
59146: PPUSH
59147: CALL_OW 112
59151: GO 59177
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
59153: LD_VAR 0 4
59157: PPUSH
59158: LD_VAR 0 5
59162: PPUSH
59163: LD_VAR 0 4
59167: PPUSH
59168: CALL_OW 74
59172: PPUSH
59173: CALL_OW 115
// end ; end ;
59177: GO 58772
59179: POP
59180: POP
// end ;
59181: LD_VAR 0 3
59185: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
59186: LD_INT 0
59188: PPUSH
59189: PPUSH
59190: PPUSH
// if not unit or IsInUnit ( unit ) then
59191: LD_VAR 0 1
59195: NOT
59196: PUSH
59197: LD_VAR 0 1
59201: PPUSH
59202: CALL_OW 310
59206: OR
59207: IFFALSE 59211
// exit ;
59209: GO 59302
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
59211: LD_ADDR_VAR 0 4
59215: PUSH
59216: LD_VAR 0 1
59220: PPUSH
59221: CALL_OW 250
59225: PPUSH
59226: LD_VAR 0 2
59230: PPUSH
59231: LD_INT 1
59233: PPUSH
59234: CALL_OW 272
59238: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
59239: LD_ADDR_VAR 0 5
59243: PUSH
59244: LD_VAR 0 1
59248: PPUSH
59249: CALL_OW 251
59253: PPUSH
59254: LD_VAR 0 2
59258: PPUSH
59259: LD_INT 1
59261: PPUSH
59262: CALL_OW 273
59266: ST_TO_ADDR
// if ValidHex ( x , y ) then
59267: LD_VAR 0 4
59271: PPUSH
59272: LD_VAR 0 5
59276: PPUSH
59277: CALL_OW 488
59281: IFFALSE 59302
// ComTurnXY ( unit , x , y ) ;
59283: LD_VAR 0 1
59287: PPUSH
59288: LD_VAR 0 4
59292: PPUSH
59293: LD_VAR 0 5
59297: PPUSH
59298: CALL_OW 118
// end ;
59302: LD_VAR 0 3
59306: RET
// export function SeeUnits ( side , units ) ; var i ; begin
59307: LD_INT 0
59309: PPUSH
59310: PPUSH
// result := false ;
59311: LD_ADDR_VAR 0 3
59315: PUSH
59316: LD_INT 0
59318: ST_TO_ADDR
// if not units then
59319: LD_VAR 0 2
59323: NOT
59324: IFFALSE 59328
// exit ;
59326: GO 59373
// for i in units do
59328: LD_ADDR_VAR 0 4
59332: PUSH
59333: LD_VAR 0 2
59337: PUSH
59338: FOR_IN
59339: IFFALSE 59371
// if See ( side , i ) then
59341: LD_VAR 0 1
59345: PPUSH
59346: LD_VAR 0 4
59350: PPUSH
59351: CALL_OW 292
59355: IFFALSE 59369
// begin result := true ;
59357: LD_ADDR_VAR 0 3
59361: PUSH
59362: LD_INT 1
59364: ST_TO_ADDR
// exit ;
59365: POP
59366: POP
59367: GO 59373
// end ;
59369: GO 59338
59371: POP
59372: POP
// end ;
59373: LD_VAR 0 3
59377: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
59378: LD_INT 0
59380: PPUSH
59381: PPUSH
59382: PPUSH
59383: PPUSH
// if not unit or not points then
59384: LD_VAR 0 1
59388: NOT
59389: PUSH
59390: LD_VAR 0 2
59394: NOT
59395: OR
59396: IFFALSE 59400
// exit ;
59398: GO 59490
// dist := 99999 ;
59400: LD_ADDR_VAR 0 5
59404: PUSH
59405: LD_INT 99999
59407: ST_TO_ADDR
// for i in points do
59408: LD_ADDR_VAR 0 4
59412: PUSH
59413: LD_VAR 0 2
59417: PUSH
59418: FOR_IN
59419: IFFALSE 59488
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
59421: LD_ADDR_VAR 0 6
59425: PUSH
59426: LD_VAR 0 1
59430: PPUSH
59431: LD_VAR 0 4
59435: PUSH
59436: LD_INT 1
59438: ARRAY
59439: PPUSH
59440: LD_VAR 0 4
59444: PUSH
59445: LD_INT 2
59447: ARRAY
59448: PPUSH
59449: CALL_OW 297
59453: ST_TO_ADDR
// if tmpDist < dist then
59454: LD_VAR 0 6
59458: PUSH
59459: LD_VAR 0 5
59463: LESS
59464: IFFALSE 59486
// begin result := i ;
59466: LD_ADDR_VAR 0 3
59470: PUSH
59471: LD_VAR 0 4
59475: ST_TO_ADDR
// dist := tmpDist ;
59476: LD_ADDR_VAR 0 5
59480: PUSH
59481: LD_VAR 0 6
59485: ST_TO_ADDR
// end ; end ;
59486: GO 59418
59488: POP
59489: POP
// end ;
59490: LD_VAR 0 3
59494: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
59495: LD_INT 0
59497: PPUSH
// uc_side := side ;
59498: LD_ADDR_OWVAR 20
59502: PUSH
59503: LD_VAR 0 1
59507: ST_TO_ADDR
// uc_nation := 3 ;
59508: LD_ADDR_OWVAR 21
59512: PUSH
59513: LD_INT 3
59515: ST_TO_ADDR
// vc_chassis := 25 ;
59516: LD_ADDR_OWVAR 37
59520: PUSH
59521: LD_INT 25
59523: ST_TO_ADDR
// vc_engine := engine_siberite ;
59524: LD_ADDR_OWVAR 39
59528: PUSH
59529: LD_INT 3
59531: ST_TO_ADDR
// vc_control := control_computer ;
59532: LD_ADDR_OWVAR 38
59536: PUSH
59537: LD_INT 3
59539: ST_TO_ADDR
// vc_weapon := 59 ;
59540: LD_ADDR_OWVAR 40
59544: PUSH
59545: LD_INT 59
59547: ST_TO_ADDR
// result := CreateVehicle ;
59548: LD_ADDR_VAR 0 5
59552: PUSH
59553: CALL_OW 45
59557: ST_TO_ADDR
// SetDir ( result , d ) ;
59558: LD_VAR 0 5
59562: PPUSH
59563: LD_VAR 0 4
59567: PPUSH
59568: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
59572: LD_VAR 0 5
59576: PPUSH
59577: LD_VAR 0 2
59581: PPUSH
59582: LD_VAR 0 3
59586: PPUSH
59587: LD_INT 0
59589: PPUSH
59590: CALL_OW 48
// end ;
59594: LD_VAR 0 5
59598: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
59599: LD_INT 0
59601: PPUSH
59602: PPUSH
59603: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
59604: LD_ADDR_VAR 0 2
59608: PUSH
59609: LD_INT 0
59611: PUSH
59612: LD_INT 0
59614: PUSH
59615: LD_INT 0
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
59627: LD_VAR 0 1
59631: NOT
59632: PUSH
59633: LD_VAR 0 1
59637: PPUSH
59638: CALL_OW 264
59642: PUSH
59643: LD_INT 12
59645: PUSH
59646: LD_INT 51
59648: PUSH
59649: LD_INT 32
59651: PUSH
59652: LD_EXP 71
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: IN
59663: NOT
59664: OR
59665: IFFALSE 59669
// exit ;
59667: GO 59767
// for i := 1 to 3 do
59669: LD_ADDR_VAR 0 3
59673: PUSH
59674: DOUBLE
59675: LD_INT 1
59677: DEC
59678: ST_TO_ADDR
59679: LD_INT 3
59681: PUSH
59682: FOR_TO
59683: IFFALSE 59765
// begin tmp := GetCargo ( cargo , i ) ;
59685: LD_ADDR_VAR 0 4
59689: PUSH
59690: LD_VAR 0 1
59694: PPUSH
59695: LD_VAR 0 3
59699: PPUSH
59700: CALL_OW 289
59704: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
59705: LD_ADDR_VAR 0 2
59709: PUSH
59710: LD_VAR 0 2
59714: PPUSH
59715: LD_VAR 0 3
59719: PPUSH
59720: LD_VAR 0 4
59724: PPUSH
59725: CALL_OW 1
59729: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
59730: LD_ADDR_VAR 0 2
59734: PUSH
59735: LD_VAR 0 2
59739: PPUSH
59740: LD_INT 4
59742: PPUSH
59743: LD_VAR 0 2
59747: PUSH
59748: LD_INT 4
59750: ARRAY
59751: PUSH
59752: LD_VAR 0 4
59756: PLUS
59757: PPUSH
59758: CALL_OW 1
59762: ST_TO_ADDR
// end ;
59763: GO 59682
59765: POP
59766: POP
// end ;
59767: LD_VAR 0 2
59771: RET
