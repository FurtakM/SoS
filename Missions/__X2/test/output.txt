// every 0 0$1 do var amConvoyGroups ;
   0: GO 2
   2: DISABLE
   3: LD_INT 0
   5: PPUSH
// begin amConvoyGroups := [ [ [ 1 , 2 , 3 , 5 ] [ Difficulty ] , [ 0 , 0 , 1 , 1 ] [ Difficulty ] , [ 1 , 1 , 2 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 0 , 1 , 1 , 2 ] [ Difficulty ] ] , [ [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 0 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] ] , [ [ 1 , 2 , 3 , 4 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] ] , [ [ 3 , 4 , 6 , 7 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 1 , 3 ] [ Difficulty ] ] ] ;
   6: LD_ADDR_VAR 0 1
  10: PUSH
  11: LD_INT 1
  13: PUSH
  14: LD_INT 2
  16: PUSH
  17: LD_INT 3
  19: PUSH
  20: LD_INT 5
  22: PUSH
  23: EMPTY
  24: LIST
  25: LIST
  26: LIST
  27: LIST
  28: PUSH
  29: LD_OWVAR 67
  33: ARRAY
  34: PUSH
  35: LD_INT 0
  37: PUSH
  38: LD_INT 0
  40: PUSH
  41: LD_INT 1
  43: PUSH
  44: LD_INT 1
  46: PUSH
  47: EMPTY
  48: LIST
  49: LIST
  50: LIST
  51: LIST
  52: PUSH
  53: LD_OWVAR 67
  57: ARRAY
  58: PUSH
  59: LD_INT 1
  61: PUSH
  62: LD_INT 1
  64: PUSH
  65: LD_INT 2
  67: PUSH
  68: LD_INT 2
  70: PUSH
  71: EMPTY
  72: LIST
  73: LIST
  74: LIST
  75: LIST
  76: PUSH
  77: LD_OWVAR 67
  81: ARRAY
  82: PUSH
  83: LD_INT 1
  85: PUSH
  86: LD_INT 1
  88: PUSH
  89: LD_INT 1
  91: PUSH
  92: LD_INT 2
  94: PUSH
  95: EMPTY
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: PUSH
 107: LD_INT 0
 109: PUSH
 110: LD_INT 1
 112: PUSH
 113: LD_INT 1
 115: PUSH
 116: LD_INT 2
 118: PUSH
 119: EMPTY
 120: LIST
 121: LIST
 122: LIST
 123: LIST
 124: PUSH
 125: LD_OWVAR 67
 129: ARRAY
 130: PUSH
 131: EMPTY
 132: LIST
 133: LIST
 134: LIST
 135: LIST
 136: LIST
 137: PUSH
 138: LD_INT 3
 140: PUSH
 141: LD_INT 4
 143: PUSH
 144: LD_INT 5
 146: PUSH
 147: LD_INT 6
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: LD_OWVAR 67
 160: ARRAY
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 1
 167: PUSH
 168: LD_INT 1
 170: PUSH
 171: LD_INT 2
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_OWVAR 67
 184: ARRAY
 185: PUSH
 186: LD_INT 1
 188: PUSH
 189: LD_INT 1
 191: PUSH
 192: LD_INT 2
 194: PUSH
 195: LD_INT 3
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: PUSH
 210: LD_INT 1
 212: PUSH
 213: LD_INT 1
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: LD_INT 3
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_OWVAR 67
 232: ARRAY
 233: PUSH
 234: LD_INT 1
 236: PUSH
 237: LD_INT 1
 239: PUSH
 240: LD_INT 2
 242: PUSH
 243: LD_INT 3
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: PUSH
 252: LD_OWVAR 67
 256: ARRAY
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: LIST
 264: PUSH
 265: LD_INT 1
 267: PUSH
 268: LD_INT 2
 270: PUSH
 271: LD_INT 3
 273: PUSH
 274: LD_INT 4
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: PUSH
 283: LD_OWVAR 67
 287: ARRAY
 288: PUSH
 289: LD_INT 1
 291: PUSH
 292: LD_INT 1
 294: PUSH
 295: LD_INT 1
 297: PUSH
 298: LD_INT 2
 300: PUSH
 301: EMPTY
 302: LIST
 303: LIST
 304: LIST
 305: LIST
 306: PUSH
 307: LD_OWVAR 67
 311: ARRAY
 312: PUSH
 313: LD_INT 1
 315: PUSH
 316: LD_INT 1
 318: PUSH
 319: LD_INT 2
 321: PUSH
 322: LD_INT 2
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: PUSH
 331: LD_OWVAR 67
 335: ARRAY
 336: PUSH
 337: LD_INT 1
 339: PUSH
 340: LD_INT 1
 342: PUSH
 343: LD_INT 1
 345: PUSH
 346: LD_INT 2
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: LIST
 353: LIST
 354: PUSH
 355: LD_OWVAR 67
 359: ARRAY
 360: PUSH
 361: LD_INT 1
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: LD_INT 2
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: LIST
 377: LIST
 378: PUSH
 379: LD_OWVAR 67
 383: ARRAY
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: LIST
 389: LIST
 390: LIST
 391: PUSH
 392: LD_INT 3
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: LD_INT 7
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: PUSH
 410: LD_OWVAR 67
 414: ARRAY
 415: PUSH
 416: LD_INT 1
 418: PUSH
 419: LD_INT 1
 421: PUSH
 422: LD_INT 1
 424: PUSH
 425: LD_INT 2
 427: PUSH
 428: EMPTY
 429: LIST
 430: LIST
 431: LIST
 432: LIST
 433: PUSH
 434: LD_OWVAR 67
 438: ARRAY
 439: PUSH
 440: LD_INT 1
 442: PUSH
 443: LD_INT 1
 445: PUSH
 446: LD_INT 2
 448: PUSH
 449: LD_INT 3
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: LIST
 456: LIST
 457: PUSH
 458: LD_OWVAR 67
 462: ARRAY
 463: PUSH
 464: LD_INT 1
 466: PUSH
 467: LD_INT 1
 469: PUSH
 470: LD_INT 2
 472: PUSH
 473: LD_INT 3
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: LD_OWVAR 67
 486: ARRAY
 487: PUSH
 488: LD_INT 1
 490: PUSH
 491: LD_INT 1
 493: PUSH
 494: LD_INT 1
 496: PUSH
 497: LD_INT 3
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: PUSH
 506: LD_OWVAR 67
 510: ARRAY
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: ST_TO_ADDR
// display_strings := amConvoyGroups [ 1 ] ;
 525: LD_ADDR_OWVAR 47
 529: PUSH
 530: LD_VAR 0 1
 534: PUSH
 535: LD_INT 1
 537: ARRAY
 538: ST_TO_ADDR
// PrepareAmericanConvoy ( amConvoyGroups [ 1 ] [ 1 ] , amConvoyGroups [ 1 ] [ 2 ] , amConvoyGroups [ 1 ] [ 3 ] , amConvoyGroups [ 1 ] [ 4 ] , amConvoyGroups [ 1 ] [ 5 ] , area11 ) ;
 539: LD_VAR 0 1
 543: PUSH
 544: LD_INT 1
 546: ARRAY
 547: PUSH
 548: LD_INT 1
 550: ARRAY
 551: PPUSH
 552: LD_VAR 0 1
 556: PUSH
 557: LD_INT 1
 559: ARRAY
 560: PUSH
 561: LD_INT 2
 563: ARRAY
 564: PPUSH
 565: LD_VAR 0 1
 569: PUSH
 570: LD_INT 1
 572: ARRAY
 573: PUSH
 574: LD_INT 3
 576: ARRAY
 577: PPUSH
 578: LD_VAR 0 1
 582: PUSH
 583: LD_INT 1
 585: ARRAY
 586: PUSH
 587: LD_INT 4
 589: ARRAY
 590: PPUSH
 591: LD_VAR 0 1
 595: PUSH
 596: LD_INT 1
 598: ARRAY
 599: PUSH
 600: LD_INT 5
 602: ARRAY
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL 614 0 6
// end ;
 611: PPOPN 1
 613: END
// export function PrepareAmericanConvoy ( soldiersAmount , engsAmount , mechsAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road , sols , engs , mechs , scis , enemySkillLevel , amConvoyTroops ; begin
 614: LD_INT 0
 616: PPUSH
 617: PPUSH
 618: PPUSH
 619: PPUSH
 620: PPUSH
 621: PPUSH
 622: PPUSH
 623: PPUSH
 624: PPUSH
 625: PPUSH
 626: PPUSH
// enemySkilllevel := 2 ;
 627: LD_ADDR_VAR 0 16
 631: PUSH
 632: LD_INT 2
 634: ST_TO_ADDR
// uc_side := 1 ;
 635: LD_ADDR_OWVAR 20
 639: PUSH
 640: LD_INT 1
 642: ST_TO_ADDR
// uc_nation := 1 ;
 643: LD_ADDR_OWVAR 21
 647: PUSH
 648: LD_INT 1
 650: ST_TO_ADDR
// hc_name :=  ;
 651: LD_ADDR_OWVAR 26
 655: PUSH
 656: LD_STRING 
 658: ST_TO_ADDR
// hc_gallery :=  ;
 659: LD_ADDR_OWVAR 33
 663: PUSH
 664: LD_STRING 
 666: ST_TO_ADDR
// for i := 1 to soldiersAmount do
 667: LD_ADDR_VAR 0 8
 671: PUSH
 672: DOUBLE
 673: LD_INT 1
 675: DEC
 676: ST_TO_ADDR
 677: LD_VAR 0 1
 681: PUSH
 682: FOR_TO
 683: IFFALSE 758
// begin PrepareSoldier ( false , enemySkillLevel ) ;
 685: LD_INT 0
 687: PPUSH
 688: LD_VAR 0 16
 692: PPUSH
 693: CALL_OW 381
// un = CreateHuman ;
 697: LD_ADDR_VAR 0 9
 701: PUSH
 702: CALL_OW 44
 706: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 707: LD_ADDR_VAR 0 17
 711: PUSH
 712: LD_VAR 0 17
 716: PUSH
 717: LD_VAR 0 9
 721: ADD
 722: ST_TO_ADDR
// sols := sols ^ un ;
 723: LD_ADDR_VAR 0 12
 727: PUSH
 728: LD_VAR 0 12
 732: PUSH
 733: LD_VAR 0 9
 737: ADD
 738: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 739: LD_VAR 0 9
 743: PPUSH
 744: LD_VAR 0 6
 748: PPUSH
 749: LD_INT 0
 751: PPUSH
 752: CALL_OW 49
// end ;
 756: GO 682
 758: POP
 759: POP
// for i := 1 to engsAmount do
 760: LD_ADDR_VAR 0 8
 764: PUSH
 765: DOUBLE
 766: LD_INT 1
 768: DEC
 769: ST_TO_ADDR
 770: LD_VAR 0 2
 774: PUSH
 775: FOR_TO
 776: IFFALSE 851
// begin PrepareEngineer ( false , enemySkillLevel ) ;
 778: LD_INT 0
 780: PPUSH
 781: LD_VAR 0 16
 785: PPUSH
 786: CALL_OW 382
// un = CreateHuman ;
 790: LD_ADDR_VAR 0 9
 794: PUSH
 795: CALL_OW 44
 799: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 800: LD_ADDR_VAR 0 17
 804: PUSH
 805: LD_VAR 0 17
 809: PUSH
 810: LD_VAR 0 9
 814: ADD
 815: ST_TO_ADDR
// engs := engs ^ un ;
 816: LD_ADDR_VAR 0 13
 820: PUSH
 821: LD_VAR 0 13
 825: PUSH
 826: LD_VAR 0 9
 830: ADD
 831: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 832: LD_VAR 0 9
 836: PPUSH
 837: LD_VAR 0 6
 841: PPUSH
 842: LD_INT 0
 844: PPUSH
 845: CALL_OW 49
// end ;
 849: GO 775
 851: POP
 852: POP
// for i := 1 to mechsAmount do
 853: LD_ADDR_VAR 0 8
 857: PUSH
 858: DOUBLE
 859: LD_INT 1
 861: DEC
 862: ST_TO_ADDR
 863: LD_VAR 0 3
 867: PUSH
 868: FOR_TO
 869: IFFALSE 944
// begin PrepareEngineer ( false , enemySkillLevel ) ;
 871: LD_INT 0
 873: PPUSH
 874: LD_VAR 0 16
 878: PPUSH
 879: CALL_OW 382
// un = CreateHuman ;
 883: LD_ADDR_VAR 0 9
 887: PUSH
 888: CALL_OW 44
 892: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 893: LD_ADDR_VAR 0 17
 897: PUSH
 898: LD_VAR 0 17
 902: PUSH
 903: LD_VAR 0 9
 907: ADD
 908: ST_TO_ADDR
// engs := engs ^ un ;
 909: LD_ADDR_VAR 0 13
 913: PUSH
 914: LD_VAR 0 13
 918: PUSH
 919: LD_VAR 0 9
 923: ADD
 924: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 925: LD_VAR 0 9
 929: PPUSH
 930: LD_VAR 0 6
 934: PPUSH
 935: LD_INT 0
 937: PPUSH
 938: CALL_OW 49
// end ;
 942: GO 868
 944: POP
 945: POP
// for i := 1 to scientistsAmount do
 946: LD_ADDR_VAR 0 8
 950: PUSH
 951: DOUBLE
 952: LD_INT 1
 954: DEC
 955: ST_TO_ADDR
 956: LD_VAR 0 4
 960: PUSH
 961: FOR_TO
 962: IFFALSE 1037
// begin PrepareMechanic ( false , enemySkillLevel ) ;
 964: LD_INT 0
 966: PPUSH
 967: LD_VAR 0 16
 971: PPUSH
 972: CALL_OW 383
// un = CreateHuman ;
 976: LD_ADDR_VAR 0 9
 980: PUSH
 981: CALL_OW 44
 985: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 986: LD_ADDR_VAR 0 17
 990: PUSH
 991: LD_VAR 0 17
 995: PUSH
 996: LD_VAR 0 9
1000: ADD
1001: ST_TO_ADDR
// mechs := mechs ^ un ;
1002: LD_ADDR_VAR 0 14
1006: PUSH
1007: LD_VAR 0 14
1011: PUSH
1012: LD_VAR 0 9
1016: ADD
1017: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1018: LD_VAR 0 9
1022: PPUSH
1023: LD_VAR 0 6
1027: PPUSH
1028: LD_INT 0
1030: PPUSH
1031: CALL_OW 49
// end ;
1035: GO 961
1037: POP
1038: POP
// for i := 1 to vehiclesAmount do
1039: LD_ADDR_VAR 0 8
1043: PUSH
1044: DOUBLE
1045: LD_INT 1
1047: DEC
1048: ST_TO_ADDR
1049: LD_VAR 0 5
1053: PUSH
1054: FOR_TO
1055: IFFALSE 1221
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
1057: LD_ADDR_OWVAR 40
1061: PUSH
1062: LD_INT 2
1064: PUSH
1065: LD_INT 4
1067: PUSH
1068: LD_INT 3
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_INT 1
1078: PPUSH
1079: LD_INT 3
1081: PPUSH
1082: CALL_OW 12
1086: ARRAY
1087: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1088: LD_ADDR_OWVAR 37
1092: PUSH
1093: LD_INT 3
1095: ST_TO_ADDR
// vc_control = control_manual ;
1096: LD_ADDR_OWVAR 38
1100: PUSH
1101: LD_INT 1
1103: ST_TO_ADDR
// vc_engine = engine_combustion ;
1104: LD_ADDR_OWVAR 39
1108: PUSH
1109: LD_INT 1
1111: ST_TO_ADDR
// veh = CreateVehicle ;
1112: LD_ADDR_VAR 0 10
1116: PUSH
1117: CALL_OW 45
1121: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ veh ;
1122: LD_ADDR_VAR 0 17
1126: PUSH
1127: LD_VAR 0 17
1131: PUSH
1132: LD_VAR 0 10
1136: ADD
1137: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
1138: LD_VAR 0 10
1142: PPUSH
1143: LD_VAR 0 6
1147: PPUSH
1148: LD_INT 0
1150: PPUSH
1151: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
1155: LD_INT 0
1157: PPUSH
1158: LD_VAR 0 16
1162: PPUSH
1163: CALL_OW 383
// un = CreateHuman ;
1167: LD_ADDR_VAR 0 9
1171: PUSH
1172: CALL_OW 44
1176: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ un ;
1177: LD_ADDR_VAR 0 17
1181: PUSH
1182: LD_VAR 0 17
1186: PUSH
1187: LD_VAR 0 9
1191: ADD
1192: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1193: LD_VAR 0 9
1197: PPUSH
1198: LD_VAR 0 10
1202: PPUSH
1203: CALL_OW 52
// SetFuel ( veh , 100 ) ;
1207: LD_VAR 0 10
1211: PPUSH
1212: LD_INT 100
1214: PPUSH
1215: CALL_OW 240
// end ;
1219: GO 1054
1221: POP
1222: POP
// end ; end_of_file
1223: LD_VAR 0 7
1227: RET
// every 0 0$1 do
1228: GO 1230
1230: DISABLE
// begin enable ;
1231: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1232: LD_STRING updateTimer(
1234: PUSH
1235: LD_OWVAR 1
1239: STR
1240: PUSH
1241: LD_STRING );
1243: STR
1244: PPUSH
1245: CALL_OW 559
// end ;
1249: END
// export function SOS_MapStart ( ) ; begin
1250: LD_INT 0
1252: PPUSH
// if streamModeActive then
1253: LD_EXP 1
1257: IFFALSE 1266
// DefineStreamItems ( true ) ;
1259: LD_INT 1
1261: PPUSH
1262: CALL 2916 0 1
// UpdateFactoryWaypoints ( ) ;
1266: CALL 16500 0 0
// end ;
1270: LD_VAR 0 1
1274: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
1275: LD_INT 0
1277: PPUSH
// if p2 = 100 then
1278: LD_VAR 0 2
1282: PUSH
1283: LD_INT 100
1285: EQUAL
1286: IFFALSE 2289
// begin if not StreamModeActive then
1288: LD_EXP 1
1292: NOT
1293: IFFALSE 1303
// StreamModeActive := true ;
1295: LD_ADDR_EXP 1
1299: PUSH
1300: LD_INT 1
1302: ST_TO_ADDR
// if p3 = 0 then
1303: LD_VAR 0 3
1307: PUSH
1308: LD_INT 0
1310: EQUAL
1311: IFFALSE 1317
// InitStreamMode ;
1313: CALL 2452 0 0
// if p3 = 1 then
1317: LD_VAR 0 3
1321: PUSH
1322: LD_INT 1
1324: EQUAL
1325: IFFALSE 1335
// sRocket := true ;
1327: LD_ADDR_EXP 6
1331: PUSH
1332: LD_INT 1
1334: ST_TO_ADDR
// if p3 = 2 then
1335: LD_VAR 0 3
1339: PUSH
1340: LD_INT 2
1342: EQUAL
1343: IFFALSE 1353
// sSpeed := true ;
1345: LD_ADDR_EXP 5
1349: PUSH
1350: LD_INT 1
1352: ST_TO_ADDR
// if p3 = 3 then
1353: LD_VAR 0 3
1357: PUSH
1358: LD_INT 3
1360: EQUAL
1361: IFFALSE 1371
// sEngine := true ;
1363: LD_ADDR_EXP 7
1367: PUSH
1368: LD_INT 1
1370: ST_TO_ADDR
// if p3 = 4 then
1371: LD_VAR 0 3
1375: PUSH
1376: LD_INT 4
1378: EQUAL
1379: IFFALSE 1389
// sSpec := true ;
1381: LD_ADDR_EXP 4
1385: PUSH
1386: LD_INT 1
1388: ST_TO_ADDR
// if p3 = 5 then
1389: LD_VAR 0 3
1393: PUSH
1394: LD_INT 5
1396: EQUAL
1397: IFFALSE 1407
// sLevel := true ;
1399: LD_ADDR_EXP 8
1403: PUSH
1404: LD_INT 1
1406: ST_TO_ADDR
// if p3 = 6 then
1407: LD_VAR 0 3
1411: PUSH
1412: LD_INT 6
1414: EQUAL
1415: IFFALSE 1425
// sArmoury := true ;
1417: LD_ADDR_EXP 9
1421: PUSH
1422: LD_INT 1
1424: ST_TO_ADDR
// if p3 = 7 then
1425: LD_VAR 0 3
1429: PUSH
1430: LD_INT 7
1432: EQUAL
1433: IFFALSE 1443
// sRadar := true ;
1435: LD_ADDR_EXP 10
1439: PUSH
1440: LD_INT 1
1442: ST_TO_ADDR
// if p3 = 8 then
1443: LD_VAR 0 3
1447: PUSH
1448: LD_INT 8
1450: EQUAL
1451: IFFALSE 1461
// sBunker := true ;
1453: LD_ADDR_EXP 11
1457: PUSH
1458: LD_INT 1
1460: ST_TO_ADDR
// if p3 = 9 then
1461: LD_VAR 0 3
1465: PUSH
1466: LD_INT 9
1468: EQUAL
1469: IFFALSE 1479
// sHack := true ;
1471: LD_ADDR_EXP 12
1475: PUSH
1476: LD_INT 1
1478: ST_TO_ADDR
// if p3 = 10 then
1479: LD_VAR 0 3
1483: PUSH
1484: LD_INT 10
1486: EQUAL
1487: IFFALSE 1497
// sFire := true ;
1489: LD_ADDR_EXP 13
1493: PUSH
1494: LD_INT 1
1496: ST_TO_ADDR
// if p3 = 11 then
1497: LD_VAR 0 3
1501: PUSH
1502: LD_INT 11
1504: EQUAL
1505: IFFALSE 1515
// sRefresh := true ;
1507: LD_ADDR_EXP 14
1511: PUSH
1512: LD_INT 1
1514: ST_TO_ADDR
// if p3 = 12 then
1515: LD_VAR 0 3
1519: PUSH
1520: LD_INT 12
1522: EQUAL
1523: IFFALSE 1533
// sExp := true ;
1525: LD_ADDR_EXP 15
1529: PUSH
1530: LD_INT 1
1532: ST_TO_ADDR
// if p3 = 13 then
1533: LD_VAR 0 3
1537: PUSH
1538: LD_INT 13
1540: EQUAL
1541: IFFALSE 1551
// sDepot := true ;
1543: LD_ADDR_EXP 16
1547: PUSH
1548: LD_INT 1
1550: ST_TO_ADDR
// if p3 = 14 then
1551: LD_VAR 0 3
1555: PUSH
1556: LD_INT 14
1558: EQUAL
1559: IFFALSE 1569
// sFlag := true ;
1561: LD_ADDR_EXP 17
1565: PUSH
1566: LD_INT 1
1568: ST_TO_ADDR
// if p3 = 15 then
1569: LD_VAR 0 3
1573: PUSH
1574: LD_INT 15
1576: EQUAL
1577: IFFALSE 1587
// sKamikadze := true ;
1579: LD_ADDR_EXP 25
1583: PUSH
1584: LD_INT 1
1586: ST_TO_ADDR
// if p3 = 16 then
1587: LD_VAR 0 3
1591: PUSH
1592: LD_INT 16
1594: EQUAL
1595: IFFALSE 1605
// sTroll := true ;
1597: LD_ADDR_EXP 26
1601: PUSH
1602: LD_INT 1
1604: ST_TO_ADDR
// if p3 = 17 then
1605: LD_VAR 0 3
1609: PUSH
1610: LD_INT 17
1612: EQUAL
1613: IFFALSE 1623
// sSlow := true ;
1615: LD_ADDR_EXP 27
1619: PUSH
1620: LD_INT 1
1622: ST_TO_ADDR
// if p3 = 18 then
1623: LD_VAR 0 3
1627: PUSH
1628: LD_INT 18
1630: EQUAL
1631: IFFALSE 1641
// sLack := true ;
1633: LD_ADDR_EXP 28
1637: PUSH
1638: LD_INT 1
1640: ST_TO_ADDR
// if p3 = 19 then
1641: LD_VAR 0 3
1645: PUSH
1646: LD_INT 19
1648: EQUAL
1649: IFFALSE 1659
// sTank := true ;
1651: LD_ADDR_EXP 30
1655: PUSH
1656: LD_INT 1
1658: ST_TO_ADDR
// if p3 = 20 then
1659: LD_VAR 0 3
1663: PUSH
1664: LD_INT 20
1666: EQUAL
1667: IFFALSE 1677
// sRemote := true ;
1669: LD_ADDR_EXP 31
1673: PUSH
1674: LD_INT 1
1676: ST_TO_ADDR
// if p3 = 21 then
1677: LD_VAR 0 3
1681: PUSH
1682: LD_INT 21
1684: EQUAL
1685: IFFALSE 1695
// sPowell := true ;
1687: LD_ADDR_EXP 32
1691: PUSH
1692: LD_INT 1
1694: ST_TO_ADDR
// if p3 = 22 then
1695: LD_VAR 0 3
1699: PUSH
1700: LD_INT 22
1702: EQUAL
1703: IFFALSE 1713
// sTeleport := true ;
1705: LD_ADDR_EXP 35
1709: PUSH
1710: LD_INT 1
1712: ST_TO_ADDR
// if p3 = 23 then
1713: LD_VAR 0 3
1717: PUSH
1718: LD_INT 23
1720: EQUAL
1721: IFFALSE 1731
// sOilTower := true ;
1723: LD_ADDR_EXP 37
1727: PUSH
1728: LD_INT 1
1730: ST_TO_ADDR
// if p3 = 24 then
1731: LD_VAR 0 3
1735: PUSH
1736: LD_INT 24
1738: EQUAL
1739: IFFALSE 1749
// sShovel := true ;
1741: LD_ADDR_EXP 38
1745: PUSH
1746: LD_INT 1
1748: ST_TO_ADDR
// if p3 = 25 then
1749: LD_VAR 0 3
1753: PUSH
1754: LD_INT 25
1756: EQUAL
1757: IFFALSE 1767
// sSheik := true ;
1759: LD_ADDR_EXP 39
1763: PUSH
1764: LD_INT 1
1766: ST_TO_ADDR
// if p3 = 26 then
1767: LD_VAR 0 3
1771: PUSH
1772: LD_INT 26
1774: EQUAL
1775: IFFALSE 1785
// sEarthquake := true ;
1777: LD_ADDR_EXP 41
1781: PUSH
1782: LD_INT 1
1784: ST_TO_ADDR
// if p3 = 27 then
1785: LD_VAR 0 3
1789: PUSH
1790: LD_INT 27
1792: EQUAL
1793: IFFALSE 1803
// sAI := true ;
1795: LD_ADDR_EXP 42
1799: PUSH
1800: LD_INT 1
1802: ST_TO_ADDR
// if p3 = 28 then
1803: LD_VAR 0 3
1807: PUSH
1808: LD_INT 28
1810: EQUAL
1811: IFFALSE 1821
// sCargo := true ;
1813: LD_ADDR_EXP 45
1817: PUSH
1818: LD_INT 1
1820: ST_TO_ADDR
// if p3 = 29 then
1821: LD_VAR 0 3
1825: PUSH
1826: LD_INT 29
1828: EQUAL
1829: IFFALSE 1839
// sDLaser := true ;
1831: LD_ADDR_EXP 46
1835: PUSH
1836: LD_INT 1
1838: ST_TO_ADDR
// if p3 = 30 then
1839: LD_VAR 0 3
1843: PUSH
1844: LD_INT 30
1846: EQUAL
1847: IFFALSE 1857
// sExchange := true ;
1849: LD_ADDR_EXP 47
1853: PUSH
1854: LD_INT 1
1856: ST_TO_ADDR
// if p3 = 31 then
1857: LD_VAR 0 3
1861: PUSH
1862: LD_INT 31
1864: EQUAL
1865: IFFALSE 1875
// sFac := true ;
1867: LD_ADDR_EXP 48
1871: PUSH
1872: LD_INT 1
1874: ST_TO_ADDR
// if p3 = 32 then
1875: LD_VAR 0 3
1879: PUSH
1880: LD_INT 32
1882: EQUAL
1883: IFFALSE 1893
// sPower := true ;
1885: LD_ADDR_EXP 49
1889: PUSH
1890: LD_INT 1
1892: ST_TO_ADDR
// if p3 = 33 then
1893: LD_VAR 0 3
1897: PUSH
1898: LD_INT 33
1900: EQUAL
1901: IFFALSE 1911
// sRandom := true ;
1903: LD_ADDR_EXP 50
1907: PUSH
1908: LD_INT 1
1910: ST_TO_ADDR
// if p3 = 34 then
1911: LD_VAR 0 3
1915: PUSH
1916: LD_INT 34
1918: EQUAL
1919: IFFALSE 1929
// sShield := true ;
1921: LD_ADDR_EXP 51
1925: PUSH
1926: LD_INT 1
1928: ST_TO_ADDR
// if p3 = 35 then
1929: LD_VAR 0 3
1933: PUSH
1934: LD_INT 35
1936: EQUAL
1937: IFFALSE 1947
// sTime := true ;
1939: LD_ADDR_EXP 52
1943: PUSH
1944: LD_INT 1
1946: ST_TO_ADDR
// if p3 = 36 then
1947: LD_VAR 0 3
1951: PUSH
1952: LD_INT 36
1954: EQUAL
1955: IFFALSE 1965
// sTools := true ;
1957: LD_ADDR_EXP 53
1961: PUSH
1962: LD_INT 1
1964: ST_TO_ADDR
// if p3 = 101 then
1965: LD_VAR 0 3
1969: PUSH
1970: LD_INT 101
1972: EQUAL
1973: IFFALSE 1983
// sSold := true ;
1975: LD_ADDR_EXP 18
1979: PUSH
1980: LD_INT 1
1982: ST_TO_ADDR
// if p3 = 102 then
1983: LD_VAR 0 3
1987: PUSH
1988: LD_INT 102
1990: EQUAL
1991: IFFALSE 2001
// sDiff := true ;
1993: LD_ADDR_EXP 19
1997: PUSH
1998: LD_INT 1
2000: ST_TO_ADDR
// if p3 = 103 then
2001: LD_VAR 0 3
2005: PUSH
2006: LD_INT 103
2008: EQUAL
2009: IFFALSE 2019
// sFog := true ;
2011: LD_ADDR_EXP 22
2015: PUSH
2016: LD_INT 1
2018: ST_TO_ADDR
// if p3 = 104 then
2019: LD_VAR 0 3
2023: PUSH
2024: LD_INT 104
2026: EQUAL
2027: IFFALSE 2037
// sReset := true ;
2029: LD_ADDR_EXP 23
2033: PUSH
2034: LD_INT 1
2036: ST_TO_ADDR
// if p3 = 105 then
2037: LD_VAR 0 3
2041: PUSH
2042: LD_INT 105
2044: EQUAL
2045: IFFALSE 2055
// sSun := true ;
2047: LD_ADDR_EXP 24
2051: PUSH
2052: LD_INT 1
2054: ST_TO_ADDR
// if p3 = 106 then
2055: LD_VAR 0 3
2059: PUSH
2060: LD_INT 106
2062: EQUAL
2063: IFFALSE 2073
// sTiger := true ;
2065: LD_ADDR_EXP 20
2069: PUSH
2070: LD_INT 1
2072: ST_TO_ADDR
// if p3 = 107 then
2073: LD_VAR 0 3
2077: PUSH
2078: LD_INT 107
2080: EQUAL
2081: IFFALSE 2091
// sBomb := true ;
2083: LD_ADDR_EXP 21
2087: PUSH
2088: LD_INT 1
2090: ST_TO_ADDR
// if p3 = 108 then
2091: LD_VAR 0 3
2095: PUSH
2096: LD_INT 108
2098: EQUAL
2099: IFFALSE 2109
// sWound := true ;
2101: LD_ADDR_EXP 29
2105: PUSH
2106: LD_INT 1
2108: ST_TO_ADDR
// if p3 = 109 then
2109: LD_VAR 0 3
2113: PUSH
2114: LD_INT 109
2116: EQUAL
2117: IFFALSE 2127
// sBetray := true ;
2119: LD_ADDR_EXP 33
2123: PUSH
2124: LD_INT 1
2126: ST_TO_ADDR
// if p3 = 110 then
2127: LD_VAR 0 3
2131: PUSH
2132: LD_INT 110
2134: EQUAL
2135: IFFALSE 2145
// sContamin := true ;
2137: LD_ADDR_EXP 34
2141: PUSH
2142: LD_INT 1
2144: ST_TO_ADDR
// if p3 = 111 then
2145: LD_VAR 0 3
2149: PUSH
2150: LD_INT 111
2152: EQUAL
2153: IFFALSE 2163
// sOil := true ;
2155: LD_ADDR_EXP 36
2159: PUSH
2160: LD_INT 1
2162: ST_TO_ADDR
// if p3 = 112 then
2163: LD_VAR 0 3
2167: PUSH
2168: LD_INT 112
2170: EQUAL
2171: IFFALSE 2181
// sStu := true ;
2173: LD_ADDR_EXP 40
2177: PUSH
2178: LD_INT 1
2180: ST_TO_ADDR
// if p3 = 113 then
2181: LD_VAR 0 3
2185: PUSH
2186: LD_INT 113
2188: EQUAL
2189: IFFALSE 2199
// sBazooka := true ;
2191: LD_ADDR_EXP 43
2195: PUSH
2196: LD_INT 1
2198: ST_TO_ADDR
// if p3 = 114 then
2199: LD_VAR 0 3
2203: PUSH
2204: LD_INT 114
2206: EQUAL
2207: IFFALSE 2217
// sMortar := true ;
2209: LD_ADDR_EXP 44
2213: PUSH
2214: LD_INT 1
2216: ST_TO_ADDR
// if p3 = 115 then
2217: LD_VAR 0 3
2221: PUSH
2222: LD_INT 115
2224: EQUAL
2225: IFFALSE 2235
// sRanger := true ;
2227: LD_ADDR_EXP 54
2231: PUSH
2232: LD_INT 1
2234: ST_TO_ADDR
// if p3 = 116 then
2235: LD_VAR 0 3
2239: PUSH
2240: LD_INT 116
2242: EQUAL
2243: IFFALSE 2253
// sComputer := true ;
2245: LD_ADDR_EXP 55
2249: PUSH
2250: LD_INT 1
2252: ST_TO_ADDR
// if p3 = 117 then
2253: LD_VAR 0 3
2257: PUSH
2258: LD_INT 117
2260: EQUAL
2261: IFFALSE 2271
// s30 := true ;
2263: LD_ADDR_EXP 56
2267: PUSH
2268: LD_INT 1
2270: ST_TO_ADDR
// if p3 = 118 then
2271: LD_VAR 0 3
2275: PUSH
2276: LD_INT 118
2278: EQUAL
2279: IFFALSE 2289
// s60 := true ;
2281: LD_ADDR_EXP 57
2285: PUSH
2286: LD_INT 1
2288: ST_TO_ADDR
// end ; if p2 = 101 then
2289: LD_VAR 0 2
2293: PUSH
2294: LD_INT 101
2296: EQUAL
2297: IFFALSE 2425
// begin case p3 of 1 :
2299: LD_VAR 0 3
2303: PUSH
2304: LD_INT 1
2306: DOUBLE
2307: EQUAL
2308: IFTRUE 2312
2310: GO 2319
2312: POP
// hHackUnlimitedResources ; 2 :
2313: CALL 14523 0 0
2317: GO 2425
2319: LD_INT 2
2321: DOUBLE
2322: EQUAL
2323: IFTRUE 2327
2325: GO 2334
2327: POP
// hHackSetLevel10 ; 3 :
2328: CALL 14656 0 0
2332: GO 2425
2334: LD_INT 3
2336: DOUBLE
2337: EQUAL
2338: IFTRUE 2342
2340: GO 2349
2342: POP
// hHackSetLevel10YourUnits ; 4 :
2343: CALL 14741 0 0
2347: GO 2425
2349: LD_INT 4
2351: DOUBLE
2352: EQUAL
2353: IFTRUE 2357
2355: GO 2364
2357: POP
// hHackInvincible ; 5 :
2358: CALL 15189 0 0
2362: GO 2425
2364: LD_INT 5
2366: DOUBLE
2367: EQUAL
2368: IFTRUE 2372
2370: GO 2379
2372: POP
// hHackInvisible ; 6 :
2373: CALL 15300 0 0
2377: GO 2425
2379: LD_INT 6
2381: DOUBLE
2382: EQUAL
2383: IFTRUE 2387
2385: GO 2394
2387: POP
// hHackChangeYourSide ; 7 :
2388: CALL 15357 0 0
2392: GO 2425
2394: LD_INT 7
2396: DOUBLE
2397: EQUAL
2398: IFTRUE 2402
2400: GO 2409
2402: POP
// hHackChangeUnitSide ; 8 :
2403: CALL 15399 0 0
2407: GO 2425
2409: LD_INT 8
2411: DOUBLE
2412: EQUAL
2413: IFTRUE 2417
2415: GO 2424
2417: POP
// hHackFog ; end ;
2418: CALL 15500 0 0
2422: GO 2425
2424: POP
// end ; end ;
2425: LD_VAR 0 7
2429: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
2430: GO 2432
2432: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
2433: LD_STRING initStreamRollete();
2435: PPUSH
2436: CALL_OW 559
// InitStreamMode ;
2440: CALL 2452 0 0
// DefineStreamItems ( false ) ;
2444: LD_INT 0
2446: PPUSH
2447: CALL 2916 0 1
// end ;
2451: END
// function InitStreamMode ; begin
2452: LD_INT 0
2454: PPUSH
// streamModeActive := false ;
2455: LD_ADDR_EXP 1
2459: PUSH
2460: LD_INT 0
2462: ST_TO_ADDR
// normalCounter := 36 ;
2463: LD_ADDR_EXP 2
2467: PUSH
2468: LD_INT 36
2470: ST_TO_ADDR
// hardcoreCounter := 18 ;
2471: LD_ADDR_EXP 3
2475: PUSH
2476: LD_INT 18
2478: ST_TO_ADDR
// sRocket := false ;
2479: LD_ADDR_EXP 6
2483: PUSH
2484: LD_INT 0
2486: ST_TO_ADDR
// sSpeed := false ;
2487: LD_ADDR_EXP 5
2491: PUSH
2492: LD_INT 0
2494: ST_TO_ADDR
// sEngine := false ;
2495: LD_ADDR_EXP 7
2499: PUSH
2500: LD_INT 0
2502: ST_TO_ADDR
// sSpec := false ;
2503: LD_ADDR_EXP 4
2507: PUSH
2508: LD_INT 0
2510: ST_TO_ADDR
// sLevel := false ;
2511: LD_ADDR_EXP 8
2515: PUSH
2516: LD_INT 0
2518: ST_TO_ADDR
// sArmoury := false ;
2519: LD_ADDR_EXP 9
2523: PUSH
2524: LD_INT 0
2526: ST_TO_ADDR
// sRadar := false ;
2527: LD_ADDR_EXP 10
2531: PUSH
2532: LD_INT 0
2534: ST_TO_ADDR
// sBunker := false ;
2535: LD_ADDR_EXP 11
2539: PUSH
2540: LD_INT 0
2542: ST_TO_ADDR
// sHack := false ;
2543: LD_ADDR_EXP 12
2547: PUSH
2548: LD_INT 0
2550: ST_TO_ADDR
// sFire := false ;
2551: LD_ADDR_EXP 13
2555: PUSH
2556: LD_INT 0
2558: ST_TO_ADDR
// sRefresh := false ;
2559: LD_ADDR_EXP 14
2563: PUSH
2564: LD_INT 0
2566: ST_TO_ADDR
// sExp := false ;
2567: LD_ADDR_EXP 15
2571: PUSH
2572: LD_INT 0
2574: ST_TO_ADDR
// sDepot := false ;
2575: LD_ADDR_EXP 16
2579: PUSH
2580: LD_INT 0
2582: ST_TO_ADDR
// sFlag := false ;
2583: LD_ADDR_EXP 17
2587: PUSH
2588: LD_INT 0
2590: ST_TO_ADDR
// sKamikadze := false ;
2591: LD_ADDR_EXP 25
2595: PUSH
2596: LD_INT 0
2598: ST_TO_ADDR
// sTroll := false ;
2599: LD_ADDR_EXP 26
2603: PUSH
2604: LD_INT 0
2606: ST_TO_ADDR
// sSlow := false ;
2607: LD_ADDR_EXP 27
2611: PUSH
2612: LD_INT 0
2614: ST_TO_ADDR
// sLack := false ;
2615: LD_ADDR_EXP 28
2619: PUSH
2620: LD_INT 0
2622: ST_TO_ADDR
// sTank := false ;
2623: LD_ADDR_EXP 30
2627: PUSH
2628: LD_INT 0
2630: ST_TO_ADDR
// sRemote := false ;
2631: LD_ADDR_EXP 31
2635: PUSH
2636: LD_INT 0
2638: ST_TO_ADDR
// sPowell := false ;
2639: LD_ADDR_EXP 32
2643: PUSH
2644: LD_INT 0
2646: ST_TO_ADDR
// sTeleport := false ;
2647: LD_ADDR_EXP 35
2651: PUSH
2652: LD_INT 0
2654: ST_TO_ADDR
// sOilTower := false ;
2655: LD_ADDR_EXP 37
2659: PUSH
2660: LD_INT 0
2662: ST_TO_ADDR
// sShovel := false ;
2663: LD_ADDR_EXP 38
2667: PUSH
2668: LD_INT 0
2670: ST_TO_ADDR
// sSheik := false ;
2671: LD_ADDR_EXP 39
2675: PUSH
2676: LD_INT 0
2678: ST_TO_ADDR
// sEarthquake := false ;
2679: LD_ADDR_EXP 41
2683: PUSH
2684: LD_INT 0
2686: ST_TO_ADDR
// sAI := false ;
2687: LD_ADDR_EXP 42
2691: PUSH
2692: LD_INT 0
2694: ST_TO_ADDR
// sCargo := false ;
2695: LD_ADDR_EXP 45
2699: PUSH
2700: LD_INT 0
2702: ST_TO_ADDR
// sDLaser := false ;
2703: LD_ADDR_EXP 46
2707: PUSH
2708: LD_INT 0
2710: ST_TO_ADDR
// sExchange := false ;
2711: LD_ADDR_EXP 47
2715: PUSH
2716: LD_INT 0
2718: ST_TO_ADDR
// sFac := false ;
2719: LD_ADDR_EXP 48
2723: PUSH
2724: LD_INT 0
2726: ST_TO_ADDR
// sPower := false ;
2727: LD_ADDR_EXP 49
2731: PUSH
2732: LD_INT 0
2734: ST_TO_ADDR
// sRandom := false ;
2735: LD_ADDR_EXP 50
2739: PUSH
2740: LD_INT 0
2742: ST_TO_ADDR
// sShield := false ;
2743: LD_ADDR_EXP 51
2747: PUSH
2748: LD_INT 0
2750: ST_TO_ADDR
// sTime := false ;
2751: LD_ADDR_EXP 52
2755: PUSH
2756: LD_INT 0
2758: ST_TO_ADDR
// sTools := false ;
2759: LD_ADDR_EXP 53
2763: PUSH
2764: LD_INT 0
2766: ST_TO_ADDR
// sSold := false ;
2767: LD_ADDR_EXP 18
2771: PUSH
2772: LD_INT 0
2774: ST_TO_ADDR
// sDiff := false ;
2775: LD_ADDR_EXP 19
2779: PUSH
2780: LD_INT 0
2782: ST_TO_ADDR
// sFog := false ;
2783: LD_ADDR_EXP 22
2787: PUSH
2788: LD_INT 0
2790: ST_TO_ADDR
// sReset := false ;
2791: LD_ADDR_EXP 23
2795: PUSH
2796: LD_INT 0
2798: ST_TO_ADDR
// sSun := false ;
2799: LD_ADDR_EXP 24
2803: PUSH
2804: LD_INT 0
2806: ST_TO_ADDR
// sTiger := false ;
2807: LD_ADDR_EXP 20
2811: PUSH
2812: LD_INT 0
2814: ST_TO_ADDR
// sBomb := false ;
2815: LD_ADDR_EXP 21
2819: PUSH
2820: LD_INT 0
2822: ST_TO_ADDR
// sWound := false ;
2823: LD_ADDR_EXP 29
2827: PUSH
2828: LD_INT 0
2830: ST_TO_ADDR
// sBetray := false ;
2831: LD_ADDR_EXP 33
2835: PUSH
2836: LD_INT 0
2838: ST_TO_ADDR
// sContamin := false ;
2839: LD_ADDR_EXP 34
2843: PUSH
2844: LD_INT 0
2846: ST_TO_ADDR
// sOil := false ;
2847: LD_ADDR_EXP 36
2851: PUSH
2852: LD_INT 0
2854: ST_TO_ADDR
// sStu := false ;
2855: LD_ADDR_EXP 40
2859: PUSH
2860: LD_INT 0
2862: ST_TO_ADDR
// sBazooka := false ;
2863: LD_ADDR_EXP 43
2867: PUSH
2868: LD_INT 0
2870: ST_TO_ADDR
// sMortar := false ;
2871: LD_ADDR_EXP 44
2875: PUSH
2876: LD_INT 0
2878: ST_TO_ADDR
// sRanger := false ;
2879: LD_ADDR_EXP 54
2883: PUSH
2884: LD_INT 0
2886: ST_TO_ADDR
// sComputer := false ;
2887: LD_ADDR_EXP 55
2891: PUSH
2892: LD_INT 0
2894: ST_TO_ADDR
// s30 := false ;
2895: LD_ADDR_EXP 56
2899: PUSH
2900: LD_INT 0
2902: ST_TO_ADDR
// s60 := false ;
2903: LD_ADDR_EXP 57
2907: PUSH
2908: LD_INT 0
2910: ST_TO_ADDR
// end ;
2911: LD_VAR 0 1
2915: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
2916: LD_INT 0
2918: PPUSH
2919: PPUSH
2920: PPUSH
2921: PPUSH
2922: PPUSH
2923: PPUSH
2924: PPUSH
// result := [ ] ;
2925: LD_ADDR_VAR 0 2
2929: PUSH
2930: EMPTY
2931: ST_TO_ADDR
// if campaign_id = 1 then
2932: LD_OWVAR 69
2936: PUSH
2937: LD_INT 1
2939: EQUAL
2940: IFFALSE 6106
// begin case mission_number of 1 :
2942: LD_OWVAR 70
2946: PUSH
2947: LD_INT 1
2949: DOUBLE
2950: EQUAL
2951: IFTRUE 2955
2953: GO 3031
2955: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
2956: LD_ADDR_VAR 0 2
2960: PUSH
2961: LD_INT 2
2963: PUSH
2964: LD_INT 4
2966: PUSH
2967: LD_INT 11
2969: PUSH
2970: LD_INT 12
2972: PUSH
2973: LD_INT 15
2975: PUSH
2976: LD_INT 16
2978: PUSH
2979: LD_INT 22
2981: PUSH
2982: LD_INT 23
2984: PUSH
2985: LD_INT 26
2987: PUSH
2988: EMPTY
2989: LIST
2990: LIST
2991: LIST
2992: LIST
2993: LIST
2994: LIST
2995: LIST
2996: LIST
2997: LIST
2998: PUSH
2999: LD_INT 101
3001: PUSH
3002: LD_INT 102
3004: PUSH
3005: LD_INT 106
3007: PUSH
3008: LD_INT 116
3010: PUSH
3011: LD_INT 117
3013: PUSH
3014: LD_INT 118
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: LIST
3021: LIST
3022: LIST
3023: LIST
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: ST_TO_ADDR
3029: GO 6104
3031: LD_INT 2
3033: DOUBLE
3034: EQUAL
3035: IFTRUE 3039
3037: GO 3123
3039: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3040: LD_ADDR_VAR 0 2
3044: PUSH
3045: LD_INT 2
3047: PUSH
3048: LD_INT 4
3050: PUSH
3051: LD_INT 11
3053: PUSH
3054: LD_INT 12
3056: PUSH
3057: LD_INT 15
3059: PUSH
3060: LD_INT 16
3062: PUSH
3063: LD_INT 22
3065: PUSH
3066: LD_INT 23
3068: PUSH
3069: LD_INT 26
3071: PUSH
3072: EMPTY
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: LIST
3082: PUSH
3083: LD_INT 101
3085: PUSH
3086: LD_INT 102
3088: PUSH
3089: LD_INT 105
3091: PUSH
3092: LD_INT 106
3094: PUSH
3095: LD_INT 108
3097: PUSH
3098: LD_INT 116
3100: PUSH
3101: LD_INT 117
3103: PUSH
3104: LD_INT 118
3106: PUSH
3107: EMPTY
3108: LIST
3109: LIST
3110: LIST
3111: LIST
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: ST_TO_ADDR
3121: GO 6104
3123: LD_INT 3
3125: DOUBLE
3126: EQUAL
3127: IFTRUE 3131
3129: GO 3219
3131: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3132: LD_ADDR_VAR 0 2
3136: PUSH
3137: LD_INT 2
3139: PUSH
3140: LD_INT 4
3142: PUSH
3143: LD_INT 5
3145: PUSH
3146: LD_INT 11
3148: PUSH
3149: LD_INT 12
3151: PUSH
3152: LD_INT 15
3154: PUSH
3155: LD_INT 16
3157: PUSH
3158: LD_INT 22
3160: PUSH
3161: LD_INT 26
3163: PUSH
3164: LD_INT 36
3166: PUSH
3167: EMPTY
3168: LIST
3169: LIST
3170: LIST
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: PUSH
3179: LD_INT 101
3181: PUSH
3182: LD_INT 102
3184: PUSH
3185: LD_INT 105
3187: PUSH
3188: LD_INT 106
3190: PUSH
3191: LD_INT 108
3193: PUSH
3194: LD_INT 116
3196: PUSH
3197: LD_INT 117
3199: PUSH
3200: LD_INT 118
3202: PUSH
3203: EMPTY
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: ST_TO_ADDR
3217: GO 6104
3219: LD_INT 4
3221: DOUBLE
3222: EQUAL
3223: IFTRUE 3227
3225: GO 3323
3227: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
3228: LD_ADDR_VAR 0 2
3232: PUSH
3233: LD_INT 2
3235: PUSH
3236: LD_INT 4
3238: PUSH
3239: LD_INT 5
3241: PUSH
3242: LD_INT 8
3244: PUSH
3245: LD_INT 11
3247: PUSH
3248: LD_INT 12
3250: PUSH
3251: LD_INT 15
3253: PUSH
3254: LD_INT 16
3256: PUSH
3257: LD_INT 22
3259: PUSH
3260: LD_INT 23
3262: PUSH
3263: LD_INT 26
3265: PUSH
3266: LD_INT 36
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: PUSH
3283: LD_INT 101
3285: PUSH
3286: LD_INT 102
3288: PUSH
3289: LD_INT 105
3291: PUSH
3292: LD_INT 106
3294: PUSH
3295: LD_INT 108
3297: PUSH
3298: LD_INT 116
3300: PUSH
3301: LD_INT 117
3303: PUSH
3304: LD_INT 118
3306: PUSH
3307: EMPTY
3308: LIST
3309: LIST
3310: LIST
3311: LIST
3312: LIST
3313: LIST
3314: LIST
3315: LIST
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: ST_TO_ADDR
3321: GO 6104
3323: LD_INT 5
3325: DOUBLE
3326: EQUAL
3327: IFTRUE 3331
3329: GO 3443
3331: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
3332: LD_ADDR_VAR 0 2
3336: PUSH
3337: LD_INT 2
3339: PUSH
3340: LD_INT 4
3342: PUSH
3343: LD_INT 5
3345: PUSH
3346: LD_INT 6
3348: PUSH
3349: LD_INT 8
3351: PUSH
3352: LD_INT 11
3354: PUSH
3355: LD_INT 12
3357: PUSH
3358: LD_INT 15
3360: PUSH
3361: LD_INT 16
3363: PUSH
3364: LD_INT 22
3366: PUSH
3367: LD_INT 23
3369: PUSH
3370: LD_INT 25
3372: PUSH
3373: LD_INT 26
3375: PUSH
3376: LD_INT 36
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: PUSH
3395: LD_INT 101
3397: PUSH
3398: LD_INT 102
3400: PUSH
3401: LD_INT 105
3403: PUSH
3404: LD_INT 106
3406: PUSH
3407: LD_INT 108
3409: PUSH
3410: LD_INT 109
3412: PUSH
3413: LD_INT 112
3415: PUSH
3416: LD_INT 116
3418: PUSH
3419: LD_INT 117
3421: PUSH
3422: LD_INT 118
3424: PUSH
3425: EMPTY
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: ST_TO_ADDR
3441: GO 6104
3443: LD_INT 6
3445: DOUBLE
3446: EQUAL
3447: IFTRUE 3451
3449: GO 3583
3451: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
3452: LD_ADDR_VAR 0 2
3456: PUSH
3457: LD_INT 2
3459: PUSH
3460: LD_INT 4
3462: PUSH
3463: LD_INT 5
3465: PUSH
3466: LD_INT 6
3468: PUSH
3469: LD_INT 8
3471: PUSH
3472: LD_INT 11
3474: PUSH
3475: LD_INT 12
3477: PUSH
3478: LD_INT 15
3480: PUSH
3481: LD_INT 16
3483: PUSH
3484: LD_INT 20
3486: PUSH
3487: LD_INT 21
3489: PUSH
3490: LD_INT 22
3492: PUSH
3493: LD_INT 23
3495: PUSH
3496: LD_INT 25
3498: PUSH
3499: LD_INT 26
3501: PUSH
3502: LD_INT 30
3504: PUSH
3505: LD_INT 31
3507: PUSH
3508: LD_INT 32
3510: PUSH
3511: LD_INT 36
3513: PUSH
3514: EMPTY
3515: LIST
3516: LIST
3517: LIST
3518: LIST
3519: LIST
3520: LIST
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: PUSH
3535: LD_INT 101
3537: PUSH
3538: LD_INT 102
3540: PUSH
3541: LD_INT 105
3543: PUSH
3544: LD_INT 106
3546: PUSH
3547: LD_INT 108
3549: PUSH
3550: LD_INT 109
3552: PUSH
3553: LD_INT 112
3555: PUSH
3556: LD_INT 116
3558: PUSH
3559: LD_INT 117
3561: PUSH
3562: LD_INT 118
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: PUSH
3577: EMPTY
3578: LIST
3579: LIST
3580: ST_TO_ADDR
3581: GO 6104
3583: LD_INT 7
3585: DOUBLE
3586: EQUAL
3587: IFTRUE 3591
3589: GO 3703
3591: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
3592: LD_ADDR_VAR 0 2
3596: PUSH
3597: LD_INT 2
3599: PUSH
3600: LD_INT 4
3602: PUSH
3603: LD_INT 5
3605: PUSH
3606: LD_INT 7
3608: PUSH
3609: LD_INT 11
3611: PUSH
3612: LD_INT 12
3614: PUSH
3615: LD_INT 15
3617: PUSH
3618: LD_INT 16
3620: PUSH
3621: LD_INT 20
3623: PUSH
3624: LD_INT 21
3626: PUSH
3627: LD_INT 22
3629: PUSH
3630: LD_INT 23
3632: PUSH
3633: LD_INT 25
3635: PUSH
3636: LD_INT 26
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: PUSH
3655: LD_INT 101
3657: PUSH
3658: LD_INT 102
3660: PUSH
3661: LD_INT 103
3663: PUSH
3664: LD_INT 105
3666: PUSH
3667: LD_INT 106
3669: PUSH
3670: LD_INT 108
3672: PUSH
3673: LD_INT 112
3675: PUSH
3676: LD_INT 116
3678: PUSH
3679: LD_INT 117
3681: PUSH
3682: LD_INT 118
3684: PUSH
3685: EMPTY
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: ST_TO_ADDR
3701: GO 6104
3703: LD_INT 8
3705: DOUBLE
3706: EQUAL
3707: IFTRUE 3711
3709: GO 3851
3711: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
3712: LD_ADDR_VAR 0 2
3716: PUSH
3717: LD_INT 2
3719: PUSH
3720: LD_INT 4
3722: PUSH
3723: LD_INT 5
3725: PUSH
3726: LD_INT 6
3728: PUSH
3729: LD_INT 7
3731: PUSH
3732: LD_INT 8
3734: PUSH
3735: LD_INT 11
3737: PUSH
3738: LD_INT 12
3740: PUSH
3741: LD_INT 15
3743: PUSH
3744: LD_INT 16
3746: PUSH
3747: LD_INT 20
3749: PUSH
3750: LD_INT 21
3752: PUSH
3753: LD_INT 22
3755: PUSH
3756: LD_INT 23
3758: PUSH
3759: LD_INT 25
3761: PUSH
3762: LD_INT 26
3764: PUSH
3765: LD_INT 30
3767: PUSH
3768: LD_INT 31
3770: PUSH
3771: LD_INT 32
3773: PUSH
3774: LD_INT 36
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: PUSH
3799: LD_INT 101
3801: PUSH
3802: LD_INT 102
3804: PUSH
3805: LD_INT 103
3807: PUSH
3808: LD_INT 105
3810: PUSH
3811: LD_INT 106
3813: PUSH
3814: LD_INT 108
3816: PUSH
3817: LD_INT 109
3819: PUSH
3820: LD_INT 112
3822: PUSH
3823: LD_INT 116
3825: PUSH
3826: LD_INT 117
3828: PUSH
3829: LD_INT 118
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: ST_TO_ADDR
3849: GO 6104
3851: LD_INT 9
3853: DOUBLE
3854: EQUAL
3855: IFTRUE 3859
3857: GO 4007
3859: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
3860: LD_ADDR_VAR 0 2
3864: PUSH
3865: LD_INT 2
3867: PUSH
3868: LD_INT 4
3870: PUSH
3871: LD_INT 5
3873: PUSH
3874: LD_INT 6
3876: PUSH
3877: LD_INT 7
3879: PUSH
3880: LD_INT 8
3882: PUSH
3883: LD_INT 11
3885: PUSH
3886: LD_INT 12
3888: PUSH
3889: LD_INT 15
3891: PUSH
3892: LD_INT 16
3894: PUSH
3895: LD_INT 20
3897: PUSH
3898: LD_INT 21
3900: PUSH
3901: LD_INT 22
3903: PUSH
3904: LD_INT 23
3906: PUSH
3907: LD_INT 25
3909: PUSH
3910: LD_INT 26
3912: PUSH
3913: LD_INT 28
3915: PUSH
3916: LD_INT 30
3918: PUSH
3919: LD_INT 31
3921: PUSH
3922: LD_INT 32
3924: PUSH
3925: LD_INT 36
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: PUSH
3951: LD_INT 101
3953: PUSH
3954: LD_INT 102
3956: PUSH
3957: LD_INT 103
3959: PUSH
3960: LD_INT 105
3962: PUSH
3963: LD_INT 106
3965: PUSH
3966: LD_INT 108
3968: PUSH
3969: LD_INT 109
3971: PUSH
3972: LD_INT 112
3974: PUSH
3975: LD_INT 114
3977: PUSH
3978: LD_INT 116
3980: PUSH
3981: LD_INT 117
3983: PUSH
3984: LD_INT 118
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: LIST
3991: LIST
3992: LIST
3993: LIST
3994: LIST
3995: LIST
3996: LIST
3997: LIST
3998: LIST
3999: LIST
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: ST_TO_ADDR
4005: GO 6104
4007: LD_INT 10
4009: DOUBLE
4010: EQUAL
4011: IFTRUE 4015
4013: GO 4211
4015: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4016: LD_ADDR_VAR 0 2
4020: PUSH
4021: LD_INT 2
4023: PUSH
4024: LD_INT 4
4026: PUSH
4027: LD_INT 5
4029: PUSH
4030: LD_INT 6
4032: PUSH
4033: LD_INT 7
4035: PUSH
4036: LD_INT 8
4038: PUSH
4039: LD_INT 9
4041: PUSH
4042: LD_INT 10
4044: PUSH
4045: LD_INT 11
4047: PUSH
4048: LD_INT 12
4050: PUSH
4051: LD_INT 13
4053: PUSH
4054: LD_INT 14
4056: PUSH
4057: LD_INT 15
4059: PUSH
4060: LD_INT 16
4062: PUSH
4063: LD_INT 17
4065: PUSH
4066: LD_INT 18
4068: PUSH
4069: LD_INT 19
4071: PUSH
4072: LD_INT 20
4074: PUSH
4075: LD_INT 21
4077: PUSH
4078: LD_INT 22
4080: PUSH
4081: LD_INT 23
4083: PUSH
4084: LD_INT 24
4086: PUSH
4087: LD_INT 25
4089: PUSH
4090: LD_INT 26
4092: PUSH
4093: LD_INT 28
4095: PUSH
4096: LD_INT 30
4098: PUSH
4099: LD_INT 31
4101: PUSH
4102: LD_INT 32
4104: PUSH
4105: LD_INT 36
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: PUSH
4139: LD_INT 101
4141: PUSH
4142: LD_INT 102
4144: PUSH
4145: LD_INT 103
4147: PUSH
4148: LD_INT 104
4150: PUSH
4151: LD_INT 105
4153: PUSH
4154: LD_INT 106
4156: PUSH
4157: LD_INT 107
4159: PUSH
4160: LD_INT 108
4162: PUSH
4163: LD_INT 109
4165: PUSH
4166: LD_INT 110
4168: PUSH
4169: LD_INT 111
4171: PUSH
4172: LD_INT 112
4174: PUSH
4175: LD_INT 114
4177: PUSH
4178: LD_INT 116
4180: PUSH
4181: LD_INT 117
4183: PUSH
4184: LD_INT 118
4186: PUSH
4187: EMPTY
4188: LIST
4189: LIST
4190: LIST
4191: LIST
4192: LIST
4193: LIST
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: ST_TO_ADDR
4209: GO 6104
4211: LD_INT 11
4213: DOUBLE
4214: EQUAL
4215: IFTRUE 4219
4217: GO 4423
4219: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4220: LD_ADDR_VAR 0 2
4224: PUSH
4225: LD_INT 2
4227: PUSH
4228: LD_INT 3
4230: PUSH
4231: LD_INT 4
4233: PUSH
4234: LD_INT 5
4236: PUSH
4237: LD_INT 6
4239: PUSH
4240: LD_INT 7
4242: PUSH
4243: LD_INT 8
4245: PUSH
4246: LD_INT 9
4248: PUSH
4249: LD_INT 10
4251: PUSH
4252: LD_INT 11
4254: PUSH
4255: LD_INT 12
4257: PUSH
4258: LD_INT 13
4260: PUSH
4261: LD_INT 14
4263: PUSH
4264: LD_INT 15
4266: PUSH
4267: LD_INT 16
4269: PUSH
4270: LD_INT 17
4272: PUSH
4273: LD_INT 18
4275: PUSH
4276: LD_INT 19
4278: PUSH
4279: LD_INT 20
4281: PUSH
4282: LD_INT 21
4284: PUSH
4285: LD_INT 22
4287: PUSH
4288: LD_INT 23
4290: PUSH
4291: LD_INT 24
4293: PUSH
4294: LD_INT 25
4296: PUSH
4297: LD_INT 26
4299: PUSH
4300: LD_INT 28
4302: PUSH
4303: LD_INT 30
4305: PUSH
4306: LD_INT 31
4308: PUSH
4309: LD_INT 32
4311: PUSH
4312: LD_INT 34
4314: PUSH
4315: LD_INT 36
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: PUSH
4351: LD_INT 101
4353: PUSH
4354: LD_INT 102
4356: PUSH
4357: LD_INT 103
4359: PUSH
4360: LD_INT 104
4362: PUSH
4363: LD_INT 105
4365: PUSH
4366: LD_INT 106
4368: PUSH
4369: LD_INT 107
4371: PUSH
4372: LD_INT 108
4374: PUSH
4375: LD_INT 109
4377: PUSH
4378: LD_INT 110
4380: PUSH
4381: LD_INT 111
4383: PUSH
4384: LD_INT 112
4386: PUSH
4387: LD_INT 114
4389: PUSH
4390: LD_INT 116
4392: PUSH
4393: LD_INT 117
4395: PUSH
4396: LD_INT 118
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: ST_TO_ADDR
4421: GO 6104
4423: LD_INT 12
4425: DOUBLE
4426: EQUAL
4427: IFTRUE 4431
4429: GO 4651
4431: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
4432: LD_ADDR_VAR 0 2
4436: PUSH
4437: LD_INT 1
4439: PUSH
4440: LD_INT 2
4442: PUSH
4443: LD_INT 3
4445: PUSH
4446: LD_INT 4
4448: PUSH
4449: LD_INT 5
4451: PUSH
4452: LD_INT 6
4454: PUSH
4455: LD_INT 7
4457: PUSH
4458: LD_INT 8
4460: PUSH
4461: LD_INT 9
4463: PUSH
4464: LD_INT 10
4466: PUSH
4467: LD_INT 11
4469: PUSH
4470: LD_INT 12
4472: PUSH
4473: LD_INT 13
4475: PUSH
4476: LD_INT 14
4478: PUSH
4479: LD_INT 15
4481: PUSH
4482: LD_INT 16
4484: PUSH
4485: LD_INT 17
4487: PUSH
4488: LD_INT 18
4490: PUSH
4491: LD_INT 19
4493: PUSH
4494: LD_INT 20
4496: PUSH
4497: LD_INT 21
4499: PUSH
4500: LD_INT 22
4502: PUSH
4503: LD_INT 23
4505: PUSH
4506: LD_INT 24
4508: PUSH
4509: LD_INT 25
4511: PUSH
4512: LD_INT 26
4514: PUSH
4515: LD_INT 27
4517: PUSH
4518: LD_INT 28
4520: PUSH
4521: LD_INT 30
4523: PUSH
4524: LD_INT 31
4526: PUSH
4527: LD_INT 32
4529: PUSH
4530: LD_INT 33
4532: PUSH
4533: LD_INT 34
4535: PUSH
4536: LD_INT 36
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: LIST
4557: LIST
4558: LIST
4559: LIST
4560: LIST
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: PUSH
4575: LD_INT 101
4577: PUSH
4578: LD_INT 102
4580: PUSH
4581: LD_INT 103
4583: PUSH
4584: LD_INT 104
4586: PUSH
4587: LD_INT 105
4589: PUSH
4590: LD_INT 106
4592: PUSH
4593: LD_INT 107
4595: PUSH
4596: LD_INT 108
4598: PUSH
4599: LD_INT 109
4601: PUSH
4602: LD_INT 110
4604: PUSH
4605: LD_INT 111
4607: PUSH
4608: LD_INT 112
4610: PUSH
4611: LD_INT 113
4613: PUSH
4614: LD_INT 114
4616: PUSH
4617: LD_INT 116
4619: PUSH
4620: LD_INT 117
4622: PUSH
4623: LD_INT 118
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: ST_TO_ADDR
4649: GO 6104
4651: LD_INT 13
4653: DOUBLE
4654: EQUAL
4655: IFTRUE 4659
4657: GO 4867
4659: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
4660: LD_ADDR_VAR 0 2
4664: PUSH
4665: LD_INT 1
4667: PUSH
4668: LD_INT 2
4670: PUSH
4671: LD_INT 3
4673: PUSH
4674: LD_INT 4
4676: PUSH
4677: LD_INT 5
4679: PUSH
4680: LD_INT 8
4682: PUSH
4683: LD_INT 9
4685: PUSH
4686: LD_INT 10
4688: PUSH
4689: LD_INT 11
4691: PUSH
4692: LD_INT 12
4694: PUSH
4695: LD_INT 14
4697: PUSH
4698: LD_INT 15
4700: PUSH
4701: LD_INT 16
4703: PUSH
4704: LD_INT 17
4706: PUSH
4707: LD_INT 18
4709: PUSH
4710: LD_INT 19
4712: PUSH
4713: LD_INT 20
4715: PUSH
4716: LD_INT 21
4718: PUSH
4719: LD_INT 22
4721: PUSH
4722: LD_INT 23
4724: PUSH
4725: LD_INT 24
4727: PUSH
4728: LD_INT 25
4730: PUSH
4731: LD_INT 26
4733: PUSH
4734: LD_INT 27
4736: PUSH
4737: LD_INT 28
4739: PUSH
4740: LD_INT 30
4742: PUSH
4743: LD_INT 31
4745: PUSH
4746: LD_INT 32
4748: PUSH
4749: LD_INT 33
4751: PUSH
4752: LD_INT 34
4754: PUSH
4755: LD_INT 36
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: PUSH
4791: LD_INT 101
4793: PUSH
4794: LD_INT 102
4796: PUSH
4797: LD_INT 103
4799: PUSH
4800: LD_INT 104
4802: PUSH
4803: LD_INT 105
4805: PUSH
4806: LD_INT 106
4808: PUSH
4809: LD_INT 107
4811: PUSH
4812: LD_INT 108
4814: PUSH
4815: LD_INT 109
4817: PUSH
4818: LD_INT 110
4820: PUSH
4821: LD_INT 111
4823: PUSH
4824: LD_INT 112
4826: PUSH
4827: LD_INT 113
4829: PUSH
4830: LD_INT 114
4832: PUSH
4833: LD_INT 116
4835: PUSH
4836: LD_INT 117
4838: PUSH
4839: LD_INT 118
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: ST_TO_ADDR
4865: GO 6104
4867: LD_INT 14
4869: DOUBLE
4870: EQUAL
4871: IFTRUE 4875
4873: GO 5099
4875: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
4876: LD_ADDR_VAR 0 2
4880: PUSH
4881: LD_INT 1
4883: PUSH
4884: LD_INT 2
4886: PUSH
4887: LD_INT 3
4889: PUSH
4890: LD_INT 4
4892: PUSH
4893: LD_INT 5
4895: PUSH
4896: LD_INT 6
4898: PUSH
4899: LD_INT 7
4901: PUSH
4902: LD_INT 8
4904: PUSH
4905: LD_INT 9
4907: PUSH
4908: LD_INT 10
4910: PUSH
4911: LD_INT 11
4913: PUSH
4914: LD_INT 12
4916: PUSH
4917: LD_INT 13
4919: PUSH
4920: LD_INT 14
4922: PUSH
4923: LD_INT 15
4925: PUSH
4926: LD_INT 16
4928: PUSH
4929: LD_INT 17
4931: PUSH
4932: LD_INT 18
4934: PUSH
4935: LD_INT 19
4937: PUSH
4938: LD_INT 20
4940: PUSH
4941: LD_INT 21
4943: PUSH
4944: LD_INT 22
4946: PUSH
4947: LD_INT 23
4949: PUSH
4950: LD_INT 24
4952: PUSH
4953: LD_INT 25
4955: PUSH
4956: LD_INT 26
4958: PUSH
4959: LD_INT 27
4961: PUSH
4962: LD_INT 28
4964: PUSH
4965: LD_INT 29
4967: PUSH
4968: LD_INT 30
4970: PUSH
4971: LD_INT 31
4973: PUSH
4974: LD_INT 32
4976: PUSH
4977: LD_INT 33
4979: PUSH
4980: LD_INT 34
4982: PUSH
4983: LD_INT 36
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: PUSH
5023: LD_INT 101
5025: PUSH
5026: LD_INT 102
5028: PUSH
5029: LD_INT 103
5031: PUSH
5032: LD_INT 104
5034: PUSH
5035: LD_INT 105
5037: PUSH
5038: LD_INT 106
5040: PUSH
5041: LD_INT 107
5043: PUSH
5044: LD_INT 108
5046: PUSH
5047: LD_INT 109
5049: PUSH
5050: LD_INT 110
5052: PUSH
5053: LD_INT 111
5055: PUSH
5056: LD_INT 112
5058: PUSH
5059: LD_INT 113
5061: PUSH
5062: LD_INT 114
5064: PUSH
5065: LD_INT 116
5067: PUSH
5068: LD_INT 117
5070: PUSH
5071: LD_INT 118
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: LIST
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: ST_TO_ADDR
5097: GO 6104
5099: LD_INT 15
5101: DOUBLE
5102: EQUAL
5103: IFTRUE 5107
5105: GO 5331
5107: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5108: LD_ADDR_VAR 0 2
5112: PUSH
5113: LD_INT 1
5115: PUSH
5116: LD_INT 2
5118: PUSH
5119: LD_INT 3
5121: PUSH
5122: LD_INT 4
5124: PUSH
5125: LD_INT 5
5127: PUSH
5128: LD_INT 6
5130: PUSH
5131: LD_INT 7
5133: PUSH
5134: LD_INT 8
5136: PUSH
5137: LD_INT 9
5139: PUSH
5140: LD_INT 10
5142: PUSH
5143: LD_INT 11
5145: PUSH
5146: LD_INT 12
5148: PUSH
5149: LD_INT 13
5151: PUSH
5152: LD_INT 14
5154: PUSH
5155: LD_INT 15
5157: PUSH
5158: LD_INT 16
5160: PUSH
5161: LD_INT 17
5163: PUSH
5164: LD_INT 18
5166: PUSH
5167: LD_INT 19
5169: PUSH
5170: LD_INT 20
5172: PUSH
5173: LD_INT 21
5175: PUSH
5176: LD_INT 22
5178: PUSH
5179: LD_INT 23
5181: PUSH
5182: LD_INT 24
5184: PUSH
5185: LD_INT 25
5187: PUSH
5188: LD_INT 26
5190: PUSH
5191: LD_INT 27
5193: PUSH
5194: LD_INT 28
5196: PUSH
5197: LD_INT 29
5199: PUSH
5200: LD_INT 30
5202: PUSH
5203: LD_INT 31
5205: PUSH
5206: LD_INT 32
5208: PUSH
5209: LD_INT 33
5211: PUSH
5212: LD_INT 34
5214: PUSH
5215: LD_INT 36
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: PUSH
5255: LD_INT 101
5257: PUSH
5258: LD_INT 102
5260: PUSH
5261: LD_INT 103
5263: PUSH
5264: LD_INT 104
5266: PUSH
5267: LD_INT 105
5269: PUSH
5270: LD_INT 106
5272: PUSH
5273: LD_INT 107
5275: PUSH
5276: LD_INT 108
5278: PUSH
5279: LD_INT 109
5281: PUSH
5282: LD_INT 110
5284: PUSH
5285: LD_INT 111
5287: PUSH
5288: LD_INT 112
5290: PUSH
5291: LD_INT 113
5293: PUSH
5294: LD_INT 114
5296: PUSH
5297: LD_INT 116
5299: PUSH
5300: LD_INT 117
5302: PUSH
5303: LD_INT 118
5305: PUSH
5306: EMPTY
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: PUSH
5325: EMPTY
5326: LIST
5327: LIST
5328: ST_TO_ADDR
5329: GO 6104
5331: LD_INT 16
5333: DOUBLE
5334: EQUAL
5335: IFTRUE 5339
5337: GO 5475
5339: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
5340: LD_ADDR_VAR 0 2
5344: PUSH
5345: LD_INT 2
5347: PUSH
5348: LD_INT 4
5350: PUSH
5351: LD_INT 5
5353: PUSH
5354: LD_INT 7
5356: PUSH
5357: LD_INT 11
5359: PUSH
5360: LD_INT 12
5362: PUSH
5363: LD_INT 15
5365: PUSH
5366: LD_INT 16
5368: PUSH
5369: LD_INT 20
5371: PUSH
5372: LD_INT 21
5374: PUSH
5375: LD_INT 22
5377: PUSH
5378: LD_INT 23
5380: PUSH
5381: LD_INT 25
5383: PUSH
5384: LD_INT 26
5386: PUSH
5387: LD_INT 30
5389: PUSH
5390: LD_INT 31
5392: PUSH
5393: LD_INT 32
5395: PUSH
5396: LD_INT 33
5398: PUSH
5399: LD_INT 34
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: LIST
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: LIST
5411: LIST
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: LIST
5422: PUSH
5423: LD_INT 101
5425: PUSH
5426: LD_INT 102
5428: PUSH
5429: LD_INT 103
5431: PUSH
5432: LD_INT 106
5434: PUSH
5435: LD_INT 108
5437: PUSH
5438: LD_INT 112
5440: PUSH
5441: LD_INT 113
5443: PUSH
5444: LD_INT 114
5446: PUSH
5447: LD_INT 116
5449: PUSH
5450: LD_INT 117
5452: PUSH
5453: LD_INT 118
5455: PUSH
5456: EMPTY
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: LIST
5467: LIST
5468: PUSH
5469: EMPTY
5470: LIST
5471: LIST
5472: ST_TO_ADDR
5473: GO 6104
5475: LD_INT 17
5477: DOUBLE
5478: EQUAL
5479: IFTRUE 5483
5481: GO 5707
5483: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
5484: LD_ADDR_VAR 0 2
5488: PUSH
5489: LD_INT 1
5491: PUSH
5492: LD_INT 2
5494: PUSH
5495: LD_INT 3
5497: PUSH
5498: LD_INT 4
5500: PUSH
5501: LD_INT 5
5503: PUSH
5504: LD_INT 6
5506: PUSH
5507: LD_INT 7
5509: PUSH
5510: LD_INT 8
5512: PUSH
5513: LD_INT 9
5515: PUSH
5516: LD_INT 10
5518: PUSH
5519: LD_INT 11
5521: PUSH
5522: LD_INT 12
5524: PUSH
5525: LD_INT 13
5527: PUSH
5528: LD_INT 14
5530: PUSH
5531: LD_INT 15
5533: PUSH
5534: LD_INT 16
5536: PUSH
5537: LD_INT 17
5539: PUSH
5540: LD_INT 18
5542: PUSH
5543: LD_INT 19
5545: PUSH
5546: LD_INT 20
5548: PUSH
5549: LD_INT 21
5551: PUSH
5552: LD_INT 22
5554: PUSH
5555: LD_INT 23
5557: PUSH
5558: LD_INT 24
5560: PUSH
5561: LD_INT 25
5563: PUSH
5564: LD_INT 26
5566: PUSH
5567: LD_INT 27
5569: PUSH
5570: LD_INT 28
5572: PUSH
5573: LD_INT 29
5575: PUSH
5576: LD_INT 30
5578: PUSH
5579: LD_INT 31
5581: PUSH
5582: LD_INT 32
5584: PUSH
5585: LD_INT 33
5587: PUSH
5588: LD_INT 34
5590: PUSH
5591: LD_INT 36
5593: PUSH
5594: EMPTY
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: PUSH
5631: LD_INT 101
5633: PUSH
5634: LD_INT 102
5636: PUSH
5637: LD_INT 103
5639: PUSH
5640: LD_INT 104
5642: PUSH
5643: LD_INT 105
5645: PUSH
5646: LD_INT 106
5648: PUSH
5649: LD_INT 107
5651: PUSH
5652: LD_INT 108
5654: PUSH
5655: LD_INT 109
5657: PUSH
5658: LD_INT 110
5660: PUSH
5661: LD_INT 111
5663: PUSH
5664: LD_INT 112
5666: PUSH
5667: LD_INT 113
5669: PUSH
5670: LD_INT 114
5672: PUSH
5673: LD_INT 116
5675: PUSH
5676: LD_INT 117
5678: PUSH
5679: LD_INT 118
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: LIST
5686: LIST
5687: LIST
5688: LIST
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: ST_TO_ADDR
5705: GO 6104
5707: LD_INT 18
5709: DOUBLE
5710: EQUAL
5711: IFTRUE 5715
5713: GO 5863
5715: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
5716: LD_ADDR_VAR 0 2
5720: PUSH
5721: LD_INT 2
5723: PUSH
5724: LD_INT 4
5726: PUSH
5727: LD_INT 5
5729: PUSH
5730: LD_INT 7
5732: PUSH
5733: LD_INT 11
5735: PUSH
5736: LD_INT 12
5738: PUSH
5739: LD_INT 15
5741: PUSH
5742: LD_INT 16
5744: PUSH
5745: LD_INT 20
5747: PUSH
5748: LD_INT 21
5750: PUSH
5751: LD_INT 22
5753: PUSH
5754: LD_INT 23
5756: PUSH
5757: LD_INT 25
5759: PUSH
5760: LD_INT 26
5762: PUSH
5763: LD_INT 30
5765: PUSH
5766: LD_INT 31
5768: PUSH
5769: LD_INT 32
5771: PUSH
5772: LD_INT 33
5774: PUSH
5775: LD_INT 34
5777: PUSH
5778: LD_INT 35
5780: PUSH
5781: LD_INT 36
5783: PUSH
5784: EMPTY
5785: LIST
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: LIST
5799: LIST
5800: LIST
5801: LIST
5802: LIST
5803: LIST
5804: LIST
5805: LIST
5806: PUSH
5807: LD_INT 101
5809: PUSH
5810: LD_INT 102
5812: PUSH
5813: LD_INT 103
5815: PUSH
5816: LD_INT 106
5818: PUSH
5819: LD_INT 108
5821: PUSH
5822: LD_INT 112
5824: PUSH
5825: LD_INT 113
5827: PUSH
5828: LD_INT 114
5830: PUSH
5831: LD_INT 115
5833: PUSH
5834: LD_INT 116
5836: PUSH
5837: LD_INT 117
5839: PUSH
5840: LD_INT 118
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: LIST
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: PUSH
5857: EMPTY
5858: LIST
5859: LIST
5860: ST_TO_ADDR
5861: GO 6104
5863: LD_INT 19
5865: DOUBLE
5866: EQUAL
5867: IFTRUE 5871
5869: GO 6103
5871: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
5872: LD_ADDR_VAR 0 2
5876: PUSH
5877: LD_INT 1
5879: PUSH
5880: LD_INT 2
5882: PUSH
5883: LD_INT 3
5885: PUSH
5886: LD_INT 4
5888: PUSH
5889: LD_INT 5
5891: PUSH
5892: LD_INT 6
5894: PUSH
5895: LD_INT 7
5897: PUSH
5898: LD_INT 8
5900: PUSH
5901: LD_INT 9
5903: PUSH
5904: LD_INT 10
5906: PUSH
5907: LD_INT 11
5909: PUSH
5910: LD_INT 12
5912: PUSH
5913: LD_INT 13
5915: PUSH
5916: LD_INT 14
5918: PUSH
5919: LD_INT 15
5921: PUSH
5922: LD_INT 16
5924: PUSH
5925: LD_INT 17
5927: PUSH
5928: LD_INT 18
5930: PUSH
5931: LD_INT 19
5933: PUSH
5934: LD_INT 20
5936: PUSH
5937: LD_INT 21
5939: PUSH
5940: LD_INT 22
5942: PUSH
5943: LD_INT 23
5945: PUSH
5946: LD_INT 24
5948: PUSH
5949: LD_INT 25
5951: PUSH
5952: LD_INT 26
5954: PUSH
5955: LD_INT 27
5957: PUSH
5958: LD_INT 28
5960: PUSH
5961: LD_INT 29
5963: PUSH
5964: LD_INT 30
5966: PUSH
5967: LD_INT 31
5969: PUSH
5970: LD_INT 32
5972: PUSH
5973: LD_INT 33
5975: PUSH
5976: LD_INT 34
5978: PUSH
5979: LD_INT 35
5981: PUSH
5982: LD_INT 36
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: PUSH
6023: LD_INT 101
6025: PUSH
6026: LD_INT 102
6028: PUSH
6029: LD_INT 103
6031: PUSH
6032: LD_INT 104
6034: PUSH
6035: LD_INT 105
6037: PUSH
6038: LD_INT 106
6040: PUSH
6041: LD_INT 107
6043: PUSH
6044: LD_INT 108
6046: PUSH
6047: LD_INT 109
6049: PUSH
6050: LD_INT 110
6052: PUSH
6053: LD_INT 111
6055: PUSH
6056: LD_INT 112
6058: PUSH
6059: LD_INT 113
6061: PUSH
6062: LD_INT 114
6064: PUSH
6065: LD_INT 115
6067: PUSH
6068: LD_INT 116
6070: PUSH
6071: LD_INT 117
6073: PUSH
6074: LD_INT 118
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: PUSH
6097: EMPTY
6098: LIST
6099: LIST
6100: ST_TO_ADDR
6101: GO 6104
6103: POP
// end else
6104: GO 6335
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6106: LD_ADDR_VAR 0 2
6110: PUSH
6111: LD_INT 1
6113: PUSH
6114: LD_INT 2
6116: PUSH
6117: LD_INT 3
6119: PUSH
6120: LD_INT 4
6122: PUSH
6123: LD_INT 5
6125: PUSH
6126: LD_INT 6
6128: PUSH
6129: LD_INT 7
6131: PUSH
6132: LD_INT 8
6134: PUSH
6135: LD_INT 9
6137: PUSH
6138: LD_INT 10
6140: PUSH
6141: LD_INT 11
6143: PUSH
6144: LD_INT 12
6146: PUSH
6147: LD_INT 13
6149: PUSH
6150: LD_INT 14
6152: PUSH
6153: LD_INT 15
6155: PUSH
6156: LD_INT 16
6158: PUSH
6159: LD_INT 17
6161: PUSH
6162: LD_INT 18
6164: PUSH
6165: LD_INT 19
6167: PUSH
6168: LD_INT 20
6170: PUSH
6171: LD_INT 21
6173: PUSH
6174: LD_INT 22
6176: PUSH
6177: LD_INT 23
6179: PUSH
6180: LD_INT 24
6182: PUSH
6183: LD_INT 25
6185: PUSH
6186: LD_INT 26
6188: PUSH
6189: LD_INT 27
6191: PUSH
6192: LD_INT 28
6194: PUSH
6195: LD_INT 29
6197: PUSH
6198: LD_INT 30
6200: PUSH
6201: LD_INT 31
6203: PUSH
6204: LD_INT 32
6206: PUSH
6207: LD_INT 33
6209: PUSH
6210: LD_INT 34
6212: PUSH
6213: LD_INT 35
6215: PUSH
6216: LD_INT 36
6218: PUSH
6219: EMPTY
6220: LIST
6221: LIST
6222: LIST
6223: LIST
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: PUSH
6257: LD_INT 101
6259: PUSH
6260: LD_INT 102
6262: PUSH
6263: LD_INT 103
6265: PUSH
6266: LD_INT 104
6268: PUSH
6269: LD_INT 105
6271: PUSH
6272: LD_INT 106
6274: PUSH
6275: LD_INT 107
6277: PUSH
6278: LD_INT 108
6280: PUSH
6281: LD_INT 109
6283: PUSH
6284: LD_INT 110
6286: PUSH
6287: LD_INT 111
6289: PUSH
6290: LD_INT 112
6292: PUSH
6293: LD_INT 113
6295: PUSH
6296: LD_INT 114
6298: PUSH
6299: LD_INT 115
6301: PUSH
6302: LD_INT 116
6304: PUSH
6305: LD_INT 117
6307: PUSH
6308: LD_INT 118
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: ST_TO_ADDR
// if result then
6335: LD_VAR 0 2
6339: IFFALSE 7125
// begin normal :=  ;
6341: LD_ADDR_VAR 0 5
6345: PUSH
6346: LD_STRING 
6348: ST_TO_ADDR
// hardcore :=  ;
6349: LD_ADDR_VAR 0 6
6353: PUSH
6354: LD_STRING 
6356: ST_TO_ADDR
// active :=  ;
6357: LD_ADDR_VAR 0 7
6361: PUSH
6362: LD_STRING 
6364: ST_TO_ADDR
// for i = 1 to normalCounter do
6365: LD_ADDR_VAR 0 8
6369: PUSH
6370: DOUBLE
6371: LD_INT 1
6373: DEC
6374: ST_TO_ADDR
6375: LD_EXP 2
6379: PUSH
6380: FOR_TO
6381: IFFALSE 6482
// begin tmp := 0 ;
6383: LD_ADDR_VAR 0 3
6387: PUSH
6388: LD_STRING 0
6390: ST_TO_ADDR
// if result [ 1 ] then
6391: LD_VAR 0 2
6395: PUSH
6396: LD_INT 1
6398: ARRAY
6399: IFFALSE 6464
// if result [ 1 ] [ 1 ] = i then
6401: LD_VAR 0 2
6405: PUSH
6406: LD_INT 1
6408: ARRAY
6409: PUSH
6410: LD_INT 1
6412: ARRAY
6413: PUSH
6414: LD_VAR 0 8
6418: EQUAL
6419: IFFALSE 6464
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6421: LD_ADDR_VAR 0 2
6425: PUSH
6426: LD_VAR 0 2
6430: PPUSH
6431: LD_INT 1
6433: PPUSH
6434: LD_VAR 0 2
6438: PUSH
6439: LD_INT 1
6441: ARRAY
6442: PPUSH
6443: LD_INT 1
6445: PPUSH
6446: CALL_OW 3
6450: PPUSH
6451: CALL_OW 1
6455: ST_TO_ADDR
// tmp := 1 ;
6456: LD_ADDR_VAR 0 3
6460: PUSH
6461: LD_STRING 1
6463: ST_TO_ADDR
// end ; normal := normal & tmp ;
6464: LD_ADDR_VAR 0 5
6468: PUSH
6469: LD_VAR 0 5
6473: PUSH
6474: LD_VAR 0 3
6478: STR
6479: ST_TO_ADDR
// end ;
6480: GO 6380
6482: POP
6483: POP
// for i = 1 to hardcoreCounter do
6484: LD_ADDR_VAR 0 8
6488: PUSH
6489: DOUBLE
6490: LD_INT 1
6492: DEC
6493: ST_TO_ADDR
6494: LD_EXP 3
6498: PUSH
6499: FOR_TO
6500: IFFALSE 6605
// begin tmp := 0 ;
6502: LD_ADDR_VAR 0 3
6506: PUSH
6507: LD_STRING 0
6509: ST_TO_ADDR
// if result [ 2 ] then
6510: LD_VAR 0 2
6514: PUSH
6515: LD_INT 2
6517: ARRAY
6518: IFFALSE 6587
// if result [ 2 ] [ 1 ] = 100 + i then
6520: LD_VAR 0 2
6524: PUSH
6525: LD_INT 2
6527: ARRAY
6528: PUSH
6529: LD_INT 1
6531: ARRAY
6532: PUSH
6533: LD_INT 100
6535: PUSH
6536: LD_VAR 0 8
6540: PLUS
6541: EQUAL
6542: IFFALSE 6587
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6544: LD_ADDR_VAR 0 2
6548: PUSH
6549: LD_VAR 0 2
6553: PPUSH
6554: LD_INT 2
6556: PPUSH
6557: LD_VAR 0 2
6561: PUSH
6562: LD_INT 2
6564: ARRAY
6565: PPUSH
6566: LD_INT 1
6568: PPUSH
6569: CALL_OW 3
6573: PPUSH
6574: CALL_OW 1
6578: ST_TO_ADDR
// tmp := 1 ;
6579: LD_ADDR_VAR 0 3
6583: PUSH
6584: LD_STRING 1
6586: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6587: LD_ADDR_VAR 0 6
6591: PUSH
6592: LD_VAR 0 6
6596: PUSH
6597: LD_VAR 0 3
6601: STR
6602: ST_TO_ADDR
// end ;
6603: GO 6499
6605: POP
6606: POP
// if isGameLoad then
6607: LD_VAR 0 1
6611: IFFALSE 7086
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
6613: LD_ADDR_VAR 0 4
6617: PUSH
6618: LD_EXP 6
6622: PUSH
6623: LD_EXP 5
6627: PUSH
6628: LD_EXP 7
6632: PUSH
6633: LD_EXP 4
6637: PUSH
6638: LD_EXP 8
6642: PUSH
6643: LD_EXP 9
6647: PUSH
6648: LD_EXP 10
6652: PUSH
6653: LD_EXP 11
6657: PUSH
6658: LD_EXP 12
6662: PUSH
6663: LD_EXP 13
6667: PUSH
6668: LD_EXP 14
6672: PUSH
6673: LD_EXP 15
6677: PUSH
6678: LD_EXP 16
6682: PUSH
6683: LD_EXP 17
6687: PUSH
6688: LD_EXP 25
6692: PUSH
6693: LD_EXP 26
6697: PUSH
6698: LD_EXP 27
6702: PUSH
6703: LD_EXP 28
6707: PUSH
6708: LD_EXP 30
6712: PUSH
6713: LD_EXP 31
6717: PUSH
6718: LD_EXP 32
6722: PUSH
6723: LD_EXP 35
6727: PUSH
6728: LD_EXP 37
6732: PUSH
6733: LD_EXP 38
6737: PUSH
6738: LD_EXP 39
6742: PUSH
6743: LD_EXP 41
6747: PUSH
6748: LD_EXP 42
6752: PUSH
6753: LD_EXP 45
6757: PUSH
6758: LD_EXP 46
6762: PUSH
6763: LD_EXP 47
6767: PUSH
6768: LD_EXP 48
6772: PUSH
6773: LD_EXP 49
6777: PUSH
6778: LD_EXP 50
6782: PUSH
6783: LD_EXP 51
6787: PUSH
6788: LD_EXP 52
6792: PUSH
6793: LD_EXP 53
6797: PUSH
6798: LD_EXP 18
6802: PUSH
6803: LD_EXP 19
6807: PUSH
6808: LD_EXP 22
6812: PUSH
6813: LD_EXP 23
6817: PUSH
6818: LD_EXP 24
6822: PUSH
6823: LD_EXP 20
6827: PUSH
6828: LD_EXP 21
6832: PUSH
6833: LD_EXP 29
6837: PUSH
6838: LD_EXP 33
6842: PUSH
6843: LD_EXP 34
6847: PUSH
6848: LD_EXP 36
6852: PUSH
6853: LD_EXP 40
6857: PUSH
6858: LD_EXP 43
6862: PUSH
6863: LD_EXP 44
6867: PUSH
6868: LD_EXP 54
6872: PUSH
6873: LD_EXP 55
6877: PUSH
6878: LD_EXP 56
6882: PUSH
6883: LD_EXP 57
6887: PUSH
6888: EMPTY
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: LIST
6899: LIST
6900: LIST
6901: LIST
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: ST_TO_ADDR
// tmp :=  ;
6944: LD_ADDR_VAR 0 3
6948: PUSH
6949: LD_STRING 
6951: ST_TO_ADDR
// for i = 1 to normalCounter do
6952: LD_ADDR_VAR 0 8
6956: PUSH
6957: DOUBLE
6958: LD_INT 1
6960: DEC
6961: ST_TO_ADDR
6962: LD_EXP 2
6966: PUSH
6967: FOR_TO
6968: IFFALSE 7004
// begin if flags [ i ] then
6970: LD_VAR 0 4
6974: PUSH
6975: LD_VAR 0 8
6979: ARRAY
6980: IFFALSE 7002
// tmp := tmp & i & ; ;
6982: LD_ADDR_VAR 0 3
6986: PUSH
6987: LD_VAR 0 3
6991: PUSH
6992: LD_VAR 0 8
6996: STR
6997: PUSH
6998: LD_STRING ;
7000: STR
7001: ST_TO_ADDR
// end ;
7002: GO 6967
7004: POP
7005: POP
// for i = 1 to hardcoreCounter do
7006: LD_ADDR_VAR 0 8
7010: PUSH
7011: DOUBLE
7012: LD_INT 1
7014: DEC
7015: ST_TO_ADDR
7016: LD_EXP 3
7020: PUSH
7021: FOR_TO
7022: IFFALSE 7068
// begin if flags [ normalCounter + i ] then
7024: LD_VAR 0 4
7028: PUSH
7029: LD_EXP 2
7033: PUSH
7034: LD_VAR 0 8
7038: PLUS
7039: ARRAY
7040: IFFALSE 7066
// tmp := tmp & ( 100 + i ) & ; ;
7042: LD_ADDR_VAR 0 3
7046: PUSH
7047: LD_VAR 0 3
7051: PUSH
7052: LD_INT 100
7054: PUSH
7055: LD_VAR 0 8
7059: PLUS
7060: STR
7061: PUSH
7062: LD_STRING ;
7064: STR
7065: ST_TO_ADDR
// end ;
7066: GO 7021
7068: POP
7069: POP
// if tmp then
7070: LD_VAR 0 3
7074: IFFALSE 7086
// active := tmp ;
7076: LD_ADDR_VAR 0 7
7080: PUSH
7081: LD_VAR 0 3
7085: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7086: LD_STRING getStreamItemsFromMission("
7088: PUSH
7089: LD_VAR 0 5
7093: STR
7094: PUSH
7095: LD_STRING ","
7097: STR
7098: PUSH
7099: LD_VAR 0 6
7103: STR
7104: PUSH
7105: LD_STRING ","
7107: STR
7108: PUSH
7109: LD_VAR 0 7
7113: STR
7114: PUSH
7115: LD_STRING ")
7117: STR
7118: PPUSH
7119: CALL_OW 559
// end else
7123: GO 7132
// ToLua ( getStreamItemsFromMission("","","") ) ;
7125: LD_STRING getStreamItemsFromMission("","","")
7127: PPUSH
7128: CALL_OW 559
// end ;
7132: LD_VAR 0 2
7136: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7137: LD_EXP 1
7141: PUSH
7142: LD_EXP 6
7146: AND
7147: IFFALSE 7271
7149: GO 7151
7151: DISABLE
7152: LD_INT 0
7154: PPUSH
7155: PPUSH
// begin enable ;
7156: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7157: LD_ADDR_VAR 0 2
7161: PUSH
7162: LD_INT 22
7164: PUSH
7165: LD_OWVAR 2
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: PUSH
7174: LD_INT 2
7176: PUSH
7177: LD_INT 34
7179: PUSH
7180: LD_INT 7
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PUSH
7187: LD_INT 34
7189: PUSH
7190: LD_INT 45
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: LD_INT 34
7199: PUSH
7200: LD_INT 28
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: LD_INT 34
7209: PUSH
7210: LD_INT 47
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: PPUSH
7228: CALL_OW 69
7232: ST_TO_ADDR
// if not tmp then
7233: LD_VAR 0 2
7237: NOT
7238: IFFALSE 7242
// exit ;
7240: GO 7271
// for i in tmp do
7242: LD_ADDR_VAR 0 1
7246: PUSH
7247: LD_VAR 0 2
7251: PUSH
7252: FOR_IN
7253: IFFALSE 7269
// begin SetLives ( i , 0 ) ;
7255: LD_VAR 0 1
7259: PPUSH
7260: LD_INT 0
7262: PPUSH
7263: CALL_OW 234
// end ;
7267: GO 7252
7269: POP
7270: POP
// end ;
7271: PPOPN 2
7273: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7274: LD_EXP 1
7278: PUSH
7279: LD_EXP 7
7283: AND
7284: IFFALSE 7368
7286: GO 7288
7288: DISABLE
7289: LD_INT 0
7291: PPUSH
7292: PPUSH
// begin enable ;
7293: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7294: LD_ADDR_VAR 0 2
7298: PUSH
7299: LD_INT 22
7301: PUSH
7302: LD_OWVAR 2
7306: PUSH
7307: EMPTY
7308: LIST
7309: LIST
7310: PUSH
7311: LD_INT 32
7313: PUSH
7314: LD_INT 3
7316: PUSH
7317: EMPTY
7318: LIST
7319: LIST
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: PPUSH
7325: CALL_OW 69
7329: ST_TO_ADDR
// if not tmp then
7330: LD_VAR 0 2
7334: NOT
7335: IFFALSE 7339
// exit ;
7337: GO 7368
// for i in tmp do
7339: LD_ADDR_VAR 0 1
7343: PUSH
7344: LD_VAR 0 2
7348: PUSH
7349: FOR_IN
7350: IFFALSE 7366
// begin SetLives ( i , 0 ) ;
7352: LD_VAR 0 1
7356: PPUSH
7357: LD_INT 0
7359: PPUSH
7360: CALL_OW 234
// end ;
7364: GO 7349
7366: POP
7367: POP
// end ;
7368: PPOPN 2
7370: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7371: LD_EXP 1
7375: PUSH
7376: LD_EXP 4
7380: AND
7381: IFFALSE 7474
7383: GO 7385
7385: DISABLE
7386: LD_INT 0
7388: PPUSH
// begin enable ;
7389: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7390: LD_ADDR_VAR 0 1
7394: PUSH
7395: LD_INT 22
7397: PUSH
7398: LD_OWVAR 2
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: PUSH
7407: LD_INT 2
7409: PUSH
7410: LD_INT 25
7412: PUSH
7413: LD_INT 5
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: PUSH
7420: LD_INT 25
7422: PUSH
7423: LD_INT 9
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: PUSH
7430: LD_INT 25
7432: PUSH
7433: LD_INT 8
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PPUSH
7450: CALL_OW 69
7454: PUSH
7455: FOR_IN
7456: IFFALSE 7472
// begin SetClass ( i , 1 ) ;
7458: LD_VAR 0 1
7462: PPUSH
7463: LD_INT 1
7465: PPUSH
7466: CALL_OW 336
// end ;
7470: GO 7455
7472: POP
7473: POP
// end ;
7474: PPOPN 1
7476: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7477: LD_EXP 1
7481: PUSH
7482: LD_EXP 5
7486: AND
7487: PUSH
7488: LD_OWVAR 65
7492: PUSH
7493: LD_INT 7
7495: LESS
7496: AND
7497: IFFALSE 7511
7499: GO 7501
7501: DISABLE
// begin enable ;
7502: ENABLE
// game_speed := 7 ;
7503: LD_ADDR_OWVAR 65
7507: PUSH
7508: LD_INT 7
7510: ST_TO_ADDR
// end ;
7511: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7512: LD_EXP 1
7516: PUSH
7517: LD_EXP 8
7521: AND
7522: IFFALSE 7724
7524: GO 7526
7526: DISABLE
7527: LD_INT 0
7529: PPUSH
7530: PPUSH
7531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7532: LD_ADDR_VAR 0 3
7536: PUSH
7537: LD_INT 81
7539: PUSH
7540: LD_OWVAR 2
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: PUSH
7549: LD_INT 21
7551: PUSH
7552: LD_INT 1
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: PPUSH
7563: CALL_OW 69
7567: ST_TO_ADDR
// if not tmp then
7568: LD_VAR 0 3
7572: NOT
7573: IFFALSE 7577
// exit ;
7575: GO 7724
// if tmp > 5 then
7577: LD_VAR 0 3
7581: PUSH
7582: LD_INT 5
7584: GREATER
7585: IFFALSE 7597
// k := 5 else
7587: LD_ADDR_VAR 0 2
7591: PUSH
7592: LD_INT 5
7594: ST_TO_ADDR
7595: GO 7607
// k := tmp ;
7597: LD_ADDR_VAR 0 2
7601: PUSH
7602: LD_VAR 0 3
7606: ST_TO_ADDR
// for i := 1 to k do
7607: LD_ADDR_VAR 0 1
7611: PUSH
7612: DOUBLE
7613: LD_INT 1
7615: DEC
7616: ST_TO_ADDR
7617: LD_VAR 0 2
7621: PUSH
7622: FOR_TO
7623: IFFALSE 7722
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7625: LD_VAR 0 3
7629: PUSH
7630: LD_VAR 0 1
7634: ARRAY
7635: PPUSH
7636: LD_VAR 0 1
7640: PUSH
7641: LD_INT 4
7643: MOD
7644: PUSH
7645: LD_INT 1
7647: PLUS
7648: PPUSH
7649: CALL_OW 259
7653: PUSH
7654: LD_INT 10
7656: LESS
7657: IFFALSE 7720
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7659: LD_VAR 0 3
7663: PUSH
7664: LD_VAR 0 1
7668: ARRAY
7669: PPUSH
7670: LD_VAR 0 1
7674: PUSH
7675: LD_INT 4
7677: MOD
7678: PUSH
7679: LD_INT 1
7681: PLUS
7682: PPUSH
7683: LD_VAR 0 3
7687: PUSH
7688: LD_VAR 0 1
7692: ARRAY
7693: PPUSH
7694: LD_VAR 0 1
7698: PUSH
7699: LD_INT 4
7701: MOD
7702: PUSH
7703: LD_INT 1
7705: PLUS
7706: PPUSH
7707: CALL_OW 259
7711: PUSH
7712: LD_INT 1
7714: PLUS
7715: PPUSH
7716: CALL_OW 237
7720: GO 7622
7722: POP
7723: POP
// end ;
7724: PPOPN 3
7726: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
7727: LD_EXP 1
7731: PUSH
7732: LD_EXP 9
7736: AND
7737: IFFALSE 7757
7739: GO 7741
7741: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
7742: LD_INT 4
7744: PPUSH
7745: LD_OWVAR 2
7749: PPUSH
7750: LD_INT 0
7752: PPUSH
7753: CALL_OW 324
7757: END
// every 0 0$1 trigger StreamModeActive and sShovel do
7758: LD_EXP 1
7762: PUSH
7763: LD_EXP 38
7767: AND
7768: IFFALSE 7788
7770: GO 7772
7772: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
7773: LD_INT 19
7775: PPUSH
7776: LD_OWVAR 2
7780: PPUSH
7781: LD_INT 0
7783: PPUSH
7784: CALL_OW 324
7788: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
7789: LD_EXP 1
7793: PUSH
7794: LD_EXP 10
7798: AND
7799: IFFALSE 7901
7801: GO 7803
7803: DISABLE
7804: LD_INT 0
7806: PPUSH
7807: PPUSH
// begin enable ;
7808: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
7809: LD_ADDR_VAR 0 2
7813: PUSH
7814: LD_INT 22
7816: PUSH
7817: LD_OWVAR 2
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: PUSH
7826: LD_INT 2
7828: PUSH
7829: LD_INT 34
7831: PUSH
7832: LD_INT 11
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: PUSH
7839: LD_INT 34
7841: PUSH
7842: LD_INT 30
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: LIST
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PPUSH
7858: CALL_OW 69
7862: ST_TO_ADDR
// if not tmp then
7863: LD_VAR 0 2
7867: NOT
7868: IFFALSE 7872
// exit ;
7870: GO 7901
// for i in tmp do
7872: LD_ADDR_VAR 0 1
7876: PUSH
7877: LD_VAR 0 2
7881: PUSH
7882: FOR_IN
7883: IFFALSE 7899
// begin SetLives ( i , 0 ) ;
7885: LD_VAR 0 1
7889: PPUSH
7890: LD_INT 0
7892: PPUSH
7893: CALL_OW 234
// end ;
7897: GO 7882
7899: POP
7900: POP
// end ;
7901: PPOPN 2
7903: END
// every 0 0$1 trigger StreamModeActive and sBunker do
7904: LD_EXP 1
7908: PUSH
7909: LD_EXP 11
7913: AND
7914: IFFALSE 7934
7916: GO 7918
7918: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
7919: LD_INT 32
7921: PPUSH
7922: LD_OWVAR 2
7926: PPUSH
7927: LD_INT 0
7929: PPUSH
7930: CALL_OW 324
7934: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
7935: LD_EXP 1
7939: PUSH
7940: LD_EXP 12
7944: AND
7945: IFFALSE 8126
7947: GO 7949
7949: DISABLE
7950: LD_INT 0
7952: PPUSH
7953: PPUSH
7954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
7955: LD_ADDR_VAR 0 2
7959: PUSH
7960: LD_INT 22
7962: PUSH
7963: LD_OWVAR 2
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: PUSH
7972: LD_INT 33
7974: PUSH
7975: LD_INT 3
7977: PUSH
7978: EMPTY
7979: LIST
7980: LIST
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: PPUSH
7986: CALL_OW 69
7990: ST_TO_ADDR
// if not tmp then
7991: LD_VAR 0 2
7995: NOT
7996: IFFALSE 8000
// exit ;
7998: GO 8126
// side := 0 ;
8000: LD_ADDR_VAR 0 3
8004: PUSH
8005: LD_INT 0
8007: ST_TO_ADDR
// for i := 1 to 8 do
8008: LD_ADDR_VAR 0 1
8012: PUSH
8013: DOUBLE
8014: LD_INT 1
8016: DEC
8017: ST_TO_ADDR
8018: LD_INT 8
8020: PUSH
8021: FOR_TO
8022: IFFALSE 8070
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8024: LD_OWVAR 2
8028: PUSH
8029: LD_VAR 0 1
8033: NONEQUAL
8034: PUSH
8035: LD_OWVAR 2
8039: PPUSH
8040: LD_VAR 0 1
8044: PPUSH
8045: CALL_OW 81
8049: PUSH
8050: LD_INT 2
8052: EQUAL
8053: AND
8054: IFFALSE 8068
// begin side := i ;
8056: LD_ADDR_VAR 0 3
8060: PUSH
8061: LD_VAR 0 1
8065: ST_TO_ADDR
// break ;
8066: GO 8070
// end ;
8068: GO 8021
8070: POP
8071: POP
// if not side then
8072: LD_VAR 0 3
8076: NOT
8077: IFFALSE 8081
// exit ;
8079: GO 8126
// for i := 1 to tmp do
8081: LD_ADDR_VAR 0 1
8085: PUSH
8086: DOUBLE
8087: LD_INT 1
8089: DEC
8090: ST_TO_ADDR
8091: LD_VAR 0 2
8095: PUSH
8096: FOR_TO
8097: IFFALSE 8124
// if Prob ( 60 ) then
8099: LD_INT 60
8101: PPUSH
8102: CALL_OW 13
8106: IFFALSE 8122
// SetSide ( i , side ) ;
8108: LD_VAR 0 1
8112: PPUSH
8113: LD_VAR 0 3
8117: PPUSH
8118: CALL_OW 235
8122: GO 8096
8124: POP
8125: POP
// end ;
8126: PPOPN 3
8128: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8129: LD_EXP 1
8133: PUSH
8134: LD_EXP 14
8138: AND
8139: IFFALSE 8258
8141: GO 8143
8143: DISABLE
8144: LD_INT 0
8146: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8147: LD_ADDR_VAR 0 1
8151: PUSH
8152: LD_INT 22
8154: PUSH
8155: LD_OWVAR 2
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PUSH
8164: LD_INT 21
8166: PUSH
8167: LD_INT 1
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: PUSH
8174: LD_INT 3
8176: PUSH
8177: LD_INT 23
8179: PUSH
8180: LD_INT 0
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: LIST
8195: PPUSH
8196: CALL_OW 69
8200: PUSH
8201: FOR_IN
8202: IFFALSE 8256
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8204: LD_VAR 0 1
8208: PPUSH
8209: CALL_OW 257
8213: PUSH
8214: LD_INT 1
8216: PUSH
8217: LD_INT 2
8219: PUSH
8220: LD_INT 3
8222: PUSH
8223: LD_INT 4
8225: PUSH
8226: EMPTY
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: IN
8232: IFFALSE 8254
// SetClass ( un , rand ( 1 , 4 ) ) ;
8234: LD_VAR 0 1
8238: PPUSH
8239: LD_INT 1
8241: PPUSH
8242: LD_INT 4
8244: PPUSH
8245: CALL_OW 12
8249: PPUSH
8250: CALL_OW 336
8254: GO 8201
8256: POP
8257: POP
// end ;
8258: PPOPN 1
8260: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8261: LD_EXP 1
8265: PUSH
8266: LD_EXP 13
8270: AND
8271: IFFALSE 8350
8273: GO 8275
8275: DISABLE
8276: LD_INT 0
8278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8279: LD_ADDR_VAR 0 1
8283: PUSH
8284: LD_INT 22
8286: PUSH
8287: LD_OWVAR 2
8291: PUSH
8292: EMPTY
8293: LIST
8294: LIST
8295: PUSH
8296: LD_INT 21
8298: PUSH
8299: LD_INT 3
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: PPUSH
8310: CALL_OW 69
8314: ST_TO_ADDR
// if not tmp then
8315: LD_VAR 0 1
8319: NOT
8320: IFFALSE 8324
// exit ;
8322: GO 8350
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8324: LD_VAR 0 1
8328: PUSH
8329: LD_INT 1
8331: PPUSH
8332: LD_VAR 0 1
8336: PPUSH
8337: CALL_OW 12
8341: ARRAY
8342: PPUSH
8343: LD_INT 100
8345: PPUSH
8346: CALL_OW 234
// end ;
8350: PPOPN 1
8352: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8353: LD_EXP 1
8357: PUSH
8358: LD_EXP 15
8362: AND
8363: IFFALSE 8461
8365: GO 8367
8367: DISABLE
8368: LD_INT 0
8370: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8371: LD_ADDR_VAR 0 1
8375: PUSH
8376: LD_INT 22
8378: PUSH
8379: LD_OWVAR 2
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: PUSH
8388: LD_INT 21
8390: PUSH
8391: LD_INT 1
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: PPUSH
8402: CALL_OW 69
8406: ST_TO_ADDR
// if not tmp then
8407: LD_VAR 0 1
8411: NOT
8412: IFFALSE 8416
// exit ;
8414: GO 8461
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8416: LD_VAR 0 1
8420: PUSH
8421: LD_INT 1
8423: PPUSH
8424: LD_VAR 0 1
8428: PPUSH
8429: CALL_OW 12
8433: ARRAY
8434: PPUSH
8435: LD_INT 1
8437: PPUSH
8438: LD_INT 4
8440: PPUSH
8441: CALL_OW 12
8445: PPUSH
8446: LD_INT 3000
8448: PPUSH
8449: LD_INT 9000
8451: PPUSH
8452: CALL_OW 12
8456: PPUSH
8457: CALL_OW 492
// end ;
8461: PPOPN 1
8463: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8464: LD_EXP 1
8468: PUSH
8469: LD_EXP 16
8473: AND
8474: IFFALSE 8494
8476: GO 8478
8478: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8479: LD_INT 1
8481: PPUSH
8482: LD_OWVAR 2
8486: PPUSH
8487: LD_INT 0
8489: PPUSH
8490: CALL_OW 324
8494: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8495: LD_EXP 1
8499: PUSH
8500: LD_EXP 17
8504: AND
8505: IFFALSE 8588
8507: GO 8509
8509: DISABLE
8510: LD_INT 0
8512: PPUSH
8513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8514: LD_ADDR_VAR 0 2
8518: PUSH
8519: LD_INT 22
8521: PUSH
8522: LD_OWVAR 2
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: PUSH
8531: LD_INT 21
8533: PUSH
8534: LD_INT 3
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: PPUSH
8545: CALL_OW 69
8549: ST_TO_ADDR
// if not tmp then
8550: LD_VAR 0 2
8554: NOT
8555: IFFALSE 8559
// exit ;
8557: GO 8588
// for i in tmp do
8559: LD_ADDR_VAR 0 1
8563: PUSH
8564: LD_VAR 0 2
8568: PUSH
8569: FOR_IN
8570: IFFALSE 8586
// SetBLevel ( i , 10 ) ;
8572: LD_VAR 0 1
8576: PPUSH
8577: LD_INT 10
8579: PPUSH
8580: CALL_OW 241
8584: GO 8569
8586: POP
8587: POP
// end ;
8588: PPOPN 2
8590: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8591: LD_EXP 1
8595: PUSH
8596: LD_EXP 18
8600: AND
8601: IFFALSE 8712
8603: GO 8605
8605: DISABLE
8606: LD_INT 0
8608: PPUSH
8609: PPUSH
8610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8611: LD_ADDR_VAR 0 3
8615: PUSH
8616: LD_INT 22
8618: PUSH
8619: LD_OWVAR 2
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: PUSH
8628: LD_INT 25
8630: PUSH
8631: LD_INT 1
8633: PUSH
8634: EMPTY
8635: LIST
8636: LIST
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: PPUSH
8642: CALL_OW 69
8646: ST_TO_ADDR
// if not tmp then
8647: LD_VAR 0 3
8651: NOT
8652: IFFALSE 8656
// exit ;
8654: GO 8712
// un := tmp [ rand ( 1 , tmp ) ] ;
8656: LD_ADDR_VAR 0 2
8660: PUSH
8661: LD_VAR 0 3
8665: PUSH
8666: LD_INT 1
8668: PPUSH
8669: LD_VAR 0 3
8673: PPUSH
8674: CALL_OW 12
8678: ARRAY
8679: ST_TO_ADDR
// if Crawls ( un ) then
8680: LD_VAR 0 2
8684: PPUSH
8685: CALL_OW 318
8689: IFFALSE 8700
// ComWalk ( un ) ;
8691: LD_VAR 0 2
8695: PPUSH
8696: CALL_OW 138
// SetClass ( un , class_sniper ) ;
8700: LD_VAR 0 2
8704: PPUSH
8705: LD_INT 5
8707: PPUSH
8708: CALL_OW 336
// end ;
8712: PPOPN 3
8714: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
8715: LD_EXP 1
8719: PUSH
8720: LD_EXP 19
8724: AND
8725: PUSH
8726: LD_OWVAR 67
8730: PUSH
8731: LD_INT 4
8733: LESS
8734: AND
8735: IFFALSE 8754
8737: GO 8739
8739: DISABLE
// begin Difficulty := Difficulty + 1 ;
8740: LD_ADDR_OWVAR 67
8744: PUSH
8745: LD_OWVAR 67
8749: PUSH
8750: LD_INT 1
8752: PLUS
8753: ST_TO_ADDR
// end ;
8754: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
8755: LD_EXP 1
8759: PUSH
8760: LD_EXP 20
8764: AND
8765: IFFALSE 8868
8767: GO 8769
8769: DISABLE
8770: LD_INT 0
8772: PPUSH
// begin for i := 1 to 5 do
8773: LD_ADDR_VAR 0 1
8777: PUSH
8778: DOUBLE
8779: LD_INT 1
8781: DEC
8782: ST_TO_ADDR
8783: LD_INT 5
8785: PUSH
8786: FOR_TO
8787: IFFALSE 8866
// begin uc_nation := nation_nature ;
8789: LD_ADDR_OWVAR 21
8793: PUSH
8794: LD_INT 0
8796: ST_TO_ADDR
// uc_side := 0 ;
8797: LD_ADDR_OWVAR 20
8801: PUSH
8802: LD_INT 0
8804: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8805: LD_ADDR_OWVAR 29
8809: PUSH
8810: LD_INT 12
8812: PUSH
8813: LD_INT 12
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: ST_TO_ADDR
// hc_agressivity := 20 ;
8820: LD_ADDR_OWVAR 35
8824: PUSH
8825: LD_INT 20
8827: ST_TO_ADDR
// hc_class := class_tiger ;
8828: LD_ADDR_OWVAR 28
8832: PUSH
8833: LD_INT 14
8835: ST_TO_ADDR
// hc_gallery :=  ;
8836: LD_ADDR_OWVAR 33
8840: PUSH
8841: LD_STRING 
8843: ST_TO_ADDR
// hc_name :=  ;
8844: LD_ADDR_OWVAR 26
8848: PUSH
8849: LD_STRING 
8851: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
8852: CALL_OW 44
8856: PPUSH
8857: LD_INT 0
8859: PPUSH
8860: CALL_OW 51
// end ;
8864: GO 8786
8866: POP
8867: POP
// end ;
8868: PPOPN 1
8870: END
// every 0 0$1 trigger StreamModeActive and sBomb do
8871: LD_EXP 1
8875: PUSH
8876: LD_EXP 21
8880: AND
8881: IFFALSE 8890
8883: GO 8885
8885: DISABLE
// StreamSibBomb ;
8886: CALL 8891 0 0
8890: END
// export function StreamSibBomb ; var i , x , y ; begin
8891: LD_INT 0
8893: PPUSH
8894: PPUSH
8895: PPUSH
8896: PPUSH
// result := false ;
8897: LD_ADDR_VAR 0 1
8901: PUSH
8902: LD_INT 0
8904: ST_TO_ADDR
// for i := 1 to 16 do
8905: LD_ADDR_VAR 0 2
8909: PUSH
8910: DOUBLE
8911: LD_INT 1
8913: DEC
8914: ST_TO_ADDR
8915: LD_INT 16
8917: PUSH
8918: FOR_TO
8919: IFFALSE 9118
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8921: LD_ADDR_VAR 0 3
8925: PUSH
8926: LD_INT 10
8928: PUSH
8929: LD_INT 20
8931: PUSH
8932: LD_INT 30
8934: PUSH
8935: LD_INT 40
8937: PUSH
8938: LD_INT 50
8940: PUSH
8941: LD_INT 60
8943: PUSH
8944: LD_INT 70
8946: PUSH
8947: LD_INT 80
8949: PUSH
8950: LD_INT 90
8952: PUSH
8953: LD_INT 100
8955: PUSH
8956: LD_INT 110
8958: PUSH
8959: LD_INT 120
8961: PUSH
8962: LD_INT 130
8964: PUSH
8965: LD_INT 140
8967: PUSH
8968: LD_INT 150
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: PUSH
8988: LD_INT 1
8990: PPUSH
8991: LD_INT 15
8993: PPUSH
8994: CALL_OW 12
8998: ARRAY
8999: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9000: LD_ADDR_VAR 0 4
9004: PUSH
9005: LD_INT 10
9007: PUSH
9008: LD_INT 20
9010: PUSH
9011: LD_INT 30
9013: PUSH
9014: LD_INT 40
9016: PUSH
9017: LD_INT 50
9019: PUSH
9020: LD_INT 60
9022: PUSH
9023: LD_INT 70
9025: PUSH
9026: LD_INT 80
9028: PUSH
9029: LD_INT 90
9031: PUSH
9032: LD_INT 100
9034: PUSH
9035: LD_INT 110
9037: PUSH
9038: LD_INT 120
9040: PUSH
9041: LD_INT 130
9043: PUSH
9044: LD_INT 140
9046: PUSH
9047: LD_INT 150
9049: PUSH
9050: EMPTY
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: PUSH
9067: LD_INT 1
9069: PPUSH
9070: LD_INT 15
9072: PPUSH
9073: CALL_OW 12
9077: ARRAY
9078: ST_TO_ADDR
// if ValidHex ( x , y ) then
9079: LD_VAR 0 3
9083: PPUSH
9084: LD_VAR 0 4
9088: PPUSH
9089: CALL_OW 488
9093: IFFALSE 9116
// begin result := [ x , y ] ;
9095: LD_ADDR_VAR 0 1
9099: PUSH
9100: LD_VAR 0 3
9104: PUSH
9105: LD_VAR 0 4
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: ST_TO_ADDR
// break ;
9114: GO 9118
// end ; end ;
9116: GO 8918
9118: POP
9119: POP
// if result then
9120: LD_VAR 0 1
9124: IFFALSE 9184
// begin ToLua ( playSibBomb() ) ;
9126: LD_STRING playSibBomb()
9128: PPUSH
9129: CALL_OW 559
// wait ( 0 0$14 ) ;
9133: LD_INT 490
9135: PPUSH
9136: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9140: LD_VAR 0 1
9144: PUSH
9145: LD_INT 1
9147: ARRAY
9148: PPUSH
9149: LD_VAR 0 1
9153: PUSH
9154: LD_INT 2
9156: ARRAY
9157: PPUSH
9158: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9162: LD_VAR 0 1
9166: PUSH
9167: LD_INT 1
9169: ARRAY
9170: PPUSH
9171: LD_VAR 0 1
9175: PUSH
9176: LD_INT 2
9178: ARRAY
9179: PPUSH
9180: CALL_OW 429
// end ; end ;
9184: LD_VAR 0 1
9188: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9189: LD_EXP 1
9193: PUSH
9194: LD_EXP 23
9198: AND
9199: IFFALSE 9211
9201: GO 9203
9203: DISABLE
// YouLost (  ) ;
9204: LD_STRING 
9206: PPUSH
9207: CALL_OW 104
9211: END
// every 0 0$1 trigger StreamModeActive and sFog do
9212: LD_EXP 1
9216: PUSH
9217: LD_EXP 22
9221: AND
9222: IFFALSE 9236
9224: GO 9226
9226: DISABLE
// FogOff ( your_side ) ;
9227: LD_OWVAR 2
9231: PPUSH
9232: CALL_OW 344
9236: END
// every 0 0$1 trigger StreamModeActive and sSun do
9237: LD_EXP 1
9241: PUSH
9242: LD_EXP 24
9246: AND
9247: IFFALSE 9275
9249: GO 9251
9251: DISABLE
// begin solar_recharge_percent := 0 ;
9252: LD_ADDR_OWVAR 79
9256: PUSH
9257: LD_INT 0
9259: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9260: LD_INT 10500
9262: PPUSH
9263: CALL_OW 67
// solar_recharge_percent := 100 ;
9267: LD_ADDR_OWVAR 79
9271: PUSH
9272: LD_INT 100
9274: ST_TO_ADDR
// end ;
9275: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9276: LD_EXP 1
9280: PUSH
9281: LD_EXP 25
9285: AND
9286: IFFALSE 9525
9288: GO 9290
9290: DISABLE
9291: LD_INT 0
9293: PPUSH
9294: PPUSH
9295: PPUSH
// begin tmp := [ ] ;
9296: LD_ADDR_VAR 0 3
9300: PUSH
9301: EMPTY
9302: ST_TO_ADDR
// for i := 1 to 6 do
9303: LD_ADDR_VAR 0 1
9307: PUSH
9308: DOUBLE
9309: LD_INT 1
9311: DEC
9312: ST_TO_ADDR
9313: LD_INT 6
9315: PUSH
9316: FOR_TO
9317: IFFALSE 9422
// begin uc_nation := nation_nature ;
9319: LD_ADDR_OWVAR 21
9323: PUSH
9324: LD_INT 0
9326: ST_TO_ADDR
// uc_side := 0 ;
9327: LD_ADDR_OWVAR 20
9331: PUSH
9332: LD_INT 0
9334: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9335: LD_ADDR_OWVAR 29
9339: PUSH
9340: LD_INT 12
9342: PUSH
9343: LD_INT 12
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: ST_TO_ADDR
// hc_agressivity := 20 ;
9350: LD_ADDR_OWVAR 35
9354: PUSH
9355: LD_INT 20
9357: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9358: LD_ADDR_OWVAR 28
9362: PUSH
9363: LD_INT 17
9365: ST_TO_ADDR
// hc_gallery :=  ;
9366: LD_ADDR_OWVAR 33
9370: PUSH
9371: LD_STRING 
9373: ST_TO_ADDR
// hc_name :=  ;
9374: LD_ADDR_OWVAR 26
9378: PUSH
9379: LD_STRING 
9381: ST_TO_ADDR
// un := CreateHuman ;
9382: LD_ADDR_VAR 0 2
9386: PUSH
9387: CALL_OW 44
9391: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9392: LD_VAR 0 2
9396: PPUSH
9397: LD_INT 1
9399: PPUSH
9400: CALL_OW 51
// tmp := tmp ^ un ;
9404: LD_ADDR_VAR 0 3
9408: PUSH
9409: LD_VAR 0 3
9413: PUSH
9414: LD_VAR 0 2
9418: ADD
9419: ST_TO_ADDR
// end ;
9420: GO 9316
9422: POP
9423: POP
// repeat wait ( 0 0$1 ) ;
9424: LD_INT 35
9426: PPUSH
9427: CALL_OW 67
// for un in tmp do
9431: LD_ADDR_VAR 0 2
9435: PUSH
9436: LD_VAR 0 3
9440: PUSH
9441: FOR_IN
9442: IFFALSE 9516
// begin if IsDead ( un ) then
9444: LD_VAR 0 2
9448: PPUSH
9449: CALL_OW 301
9453: IFFALSE 9473
// begin tmp := tmp diff un ;
9455: LD_ADDR_VAR 0 3
9459: PUSH
9460: LD_VAR 0 3
9464: PUSH
9465: LD_VAR 0 2
9469: DIFF
9470: ST_TO_ADDR
// continue ;
9471: GO 9441
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9473: LD_VAR 0 2
9477: PPUSH
9478: LD_INT 3
9480: PUSH
9481: LD_INT 22
9483: PUSH
9484: LD_INT 0
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: PPUSH
9495: CALL_OW 69
9499: PPUSH
9500: LD_VAR 0 2
9504: PPUSH
9505: CALL_OW 74
9509: PPUSH
9510: CALL_OW 115
// end ;
9514: GO 9441
9516: POP
9517: POP
// until not tmp ;
9518: LD_VAR 0 3
9522: NOT
9523: IFFALSE 9424
// end ;
9525: PPOPN 3
9527: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9528: LD_EXP 1
9532: PUSH
9533: LD_EXP 26
9537: AND
9538: IFFALSE 9592
9540: GO 9542
9542: DISABLE
// begin ToLua ( displayTroll(); ) ;
9543: LD_STRING displayTroll();
9545: PPUSH
9546: CALL_OW 559
// wait ( 3 3$00 ) ;
9550: LD_INT 6300
9552: PPUSH
9553: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9557: LD_STRING hideTroll();
9559: PPUSH
9560: CALL_OW 559
// wait ( 1 1$00 ) ;
9564: LD_INT 2100
9566: PPUSH
9567: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9571: LD_STRING displayTroll();
9573: PPUSH
9574: CALL_OW 559
// wait ( 1 1$00 ) ;
9578: LD_INT 2100
9580: PPUSH
9581: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9585: LD_STRING hideTroll();
9587: PPUSH
9588: CALL_OW 559
// end ;
9592: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9593: LD_EXP 1
9597: PUSH
9598: LD_EXP 27
9602: AND
9603: IFFALSE 9666
9605: GO 9607
9607: DISABLE
9608: LD_INT 0
9610: PPUSH
// begin p := 0 ;
9611: LD_ADDR_VAR 0 1
9615: PUSH
9616: LD_INT 0
9618: ST_TO_ADDR
// repeat game_speed := 1 ;
9619: LD_ADDR_OWVAR 65
9623: PUSH
9624: LD_INT 1
9626: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9627: LD_INT 35
9629: PPUSH
9630: CALL_OW 67
// p := p + 1 ;
9634: LD_ADDR_VAR 0 1
9638: PUSH
9639: LD_VAR 0 1
9643: PUSH
9644: LD_INT 1
9646: PLUS
9647: ST_TO_ADDR
// until p >= 60 ;
9648: LD_VAR 0 1
9652: PUSH
9653: LD_INT 60
9655: GREATEREQUAL
9656: IFFALSE 9619
// game_speed := 4 ;
9658: LD_ADDR_OWVAR 65
9662: PUSH
9663: LD_INT 4
9665: ST_TO_ADDR
// end ;
9666: PPOPN 1
9668: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9669: LD_EXP 1
9673: PUSH
9674: LD_EXP 28
9678: AND
9679: IFFALSE 9825
9681: GO 9683
9683: DISABLE
9684: LD_INT 0
9686: PPUSH
9687: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9688: LD_ADDR_VAR 0 1
9692: PUSH
9693: LD_INT 22
9695: PUSH
9696: LD_OWVAR 2
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: PUSH
9705: LD_INT 2
9707: PUSH
9708: LD_INT 30
9710: PUSH
9711: LD_INT 0
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: PUSH
9718: LD_INT 30
9720: PUSH
9721: LD_INT 1
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: LIST
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: PPUSH
9737: CALL_OW 69
9741: ST_TO_ADDR
// if not depot then
9742: LD_VAR 0 1
9746: NOT
9747: IFFALSE 9751
// exit ;
9749: GO 9825
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
9751: LD_ADDR_VAR 0 2
9755: PUSH
9756: LD_VAR 0 1
9760: PUSH
9761: LD_INT 1
9763: PPUSH
9764: LD_VAR 0 1
9768: PPUSH
9769: CALL_OW 12
9773: ARRAY
9774: PPUSH
9775: CALL_OW 274
9779: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
9780: LD_VAR 0 2
9784: PPUSH
9785: LD_INT 1
9787: PPUSH
9788: LD_INT 0
9790: PPUSH
9791: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
9795: LD_VAR 0 2
9799: PPUSH
9800: LD_INT 2
9802: PPUSH
9803: LD_INT 0
9805: PPUSH
9806: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
9810: LD_VAR 0 2
9814: PPUSH
9815: LD_INT 3
9817: PPUSH
9818: LD_INT 0
9820: PPUSH
9821: CALL_OW 277
// end ;
9825: PPOPN 2
9827: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
9828: LD_EXP 1
9832: PUSH
9833: LD_EXP 29
9837: AND
9838: IFFALSE 9935
9840: GO 9842
9842: DISABLE
9843: LD_INT 0
9845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
9846: LD_ADDR_VAR 0 1
9850: PUSH
9851: LD_INT 22
9853: PUSH
9854: LD_OWVAR 2
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PUSH
9863: LD_INT 21
9865: PUSH
9866: LD_INT 1
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: LD_INT 3
9875: PUSH
9876: LD_INT 23
9878: PUSH
9879: LD_INT 0
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: LIST
9894: PPUSH
9895: CALL_OW 69
9899: ST_TO_ADDR
// if not tmp then
9900: LD_VAR 0 1
9904: NOT
9905: IFFALSE 9909
// exit ;
9907: GO 9935
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
9909: LD_VAR 0 1
9913: PUSH
9914: LD_INT 1
9916: PPUSH
9917: LD_VAR 0 1
9921: PPUSH
9922: CALL_OW 12
9926: ARRAY
9927: PPUSH
9928: LD_INT 200
9930: PPUSH
9931: CALL_OW 234
// end ;
9935: PPOPN 1
9937: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
9938: LD_EXP 1
9942: PUSH
9943: LD_EXP 30
9947: AND
9948: IFFALSE 10027
9950: GO 9952
9952: DISABLE
9953: LD_INT 0
9955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
9956: LD_ADDR_VAR 0 1
9960: PUSH
9961: LD_INT 22
9963: PUSH
9964: LD_OWVAR 2
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: PUSH
9973: LD_INT 21
9975: PUSH
9976: LD_INT 2
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PUSH
9983: EMPTY
9984: LIST
9985: LIST
9986: PPUSH
9987: CALL_OW 69
9991: ST_TO_ADDR
// if not tmp then
9992: LD_VAR 0 1
9996: NOT
9997: IFFALSE 10001
// exit ;
9999: GO 10027
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10001: LD_VAR 0 1
10005: PUSH
10006: LD_INT 1
10008: PPUSH
10009: LD_VAR 0 1
10013: PPUSH
10014: CALL_OW 12
10018: ARRAY
10019: PPUSH
10020: LD_INT 60
10022: PPUSH
10023: CALL_OW 234
// end ;
10027: PPOPN 1
10029: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10030: LD_EXP 1
10034: PUSH
10035: LD_EXP 31
10039: AND
10040: IFFALSE 10139
10042: GO 10044
10044: DISABLE
10045: LD_INT 0
10047: PPUSH
10048: PPUSH
// begin enable ;
10049: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10050: LD_ADDR_VAR 0 1
10054: PUSH
10055: LD_INT 22
10057: PUSH
10058: LD_OWVAR 2
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: PUSH
10067: LD_INT 61
10069: PUSH
10070: EMPTY
10071: LIST
10072: PUSH
10073: LD_INT 33
10075: PUSH
10076: LD_INT 2
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: LIST
10087: PPUSH
10088: CALL_OW 69
10092: ST_TO_ADDR
// if not tmp then
10093: LD_VAR 0 1
10097: NOT
10098: IFFALSE 10102
// exit ;
10100: GO 10139
// for i in tmp do
10102: LD_ADDR_VAR 0 2
10106: PUSH
10107: LD_VAR 0 1
10111: PUSH
10112: FOR_IN
10113: IFFALSE 10137
// if IsControledBy ( i ) then
10115: LD_VAR 0 2
10119: PPUSH
10120: CALL_OW 312
10124: IFFALSE 10135
// ComUnlink ( i ) ;
10126: LD_VAR 0 2
10130: PPUSH
10131: CALL_OW 136
10135: GO 10112
10137: POP
10138: POP
// end ;
10139: PPOPN 2
10141: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10142: LD_EXP 1
10146: PUSH
10147: LD_EXP 32
10151: AND
10152: IFFALSE 10292
10154: GO 10156
10156: DISABLE
10157: LD_INT 0
10159: PPUSH
10160: PPUSH
// begin ToLua ( displayPowell(); ) ;
10161: LD_STRING displayPowell();
10163: PPUSH
10164: CALL_OW 559
// uc_side := 0 ;
10168: LD_ADDR_OWVAR 20
10172: PUSH
10173: LD_INT 0
10175: ST_TO_ADDR
// uc_nation := 2 ;
10176: LD_ADDR_OWVAR 21
10180: PUSH
10181: LD_INT 2
10183: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10184: LD_ADDR_OWVAR 37
10188: PUSH
10189: LD_INT 14
10191: ST_TO_ADDR
// vc_engine := engine_siberite ;
10192: LD_ADDR_OWVAR 39
10196: PUSH
10197: LD_INT 3
10199: ST_TO_ADDR
// vc_control := control_apeman ;
10200: LD_ADDR_OWVAR 38
10204: PUSH
10205: LD_INT 5
10207: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10208: LD_ADDR_OWVAR 40
10212: PUSH
10213: LD_INT 29
10215: ST_TO_ADDR
// un := CreateVehicle ;
10216: LD_ADDR_VAR 0 2
10220: PUSH
10221: CALL_OW 45
10225: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10226: LD_VAR 0 2
10230: PPUSH
10231: LD_INT 1
10233: PPUSH
10234: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10238: LD_INT 35
10240: PPUSH
10241: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10245: LD_VAR 0 2
10249: PPUSH
10250: LD_INT 22
10252: PUSH
10253: LD_OWVAR 2
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: PPUSH
10262: CALL_OW 69
10266: PPUSH
10267: LD_VAR 0 2
10271: PPUSH
10272: CALL_OW 74
10276: PPUSH
10277: CALL_OW 115
// until IsDead ( un ) ;
10281: LD_VAR 0 2
10285: PPUSH
10286: CALL_OW 301
10290: IFFALSE 10238
// end ;
10292: PPOPN 2
10294: END
// every 0 0$1 trigger StreamModeActive and sStu do
10295: LD_EXP 1
10299: PUSH
10300: LD_EXP 40
10304: AND
10305: IFFALSE 10321
10307: GO 10309
10309: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10310: LD_STRING displayStucuk();
10312: PPUSH
10313: CALL_OW 559
// ResetFog ;
10317: CALL_OW 335
// end ;
10321: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10322: LD_EXP 1
10326: PUSH
10327: LD_EXP 33
10331: AND
10332: IFFALSE 10473
10334: GO 10336
10336: DISABLE
10337: LD_INT 0
10339: PPUSH
10340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10341: LD_ADDR_VAR 0 2
10345: PUSH
10346: LD_INT 22
10348: PUSH
10349: LD_OWVAR 2
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PUSH
10358: LD_INT 21
10360: PUSH
10361: LD_INT 1
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: PPUSH
10372: CALL_OW 69
10376: ST_TO_ADDR
// if not tmp then
10377: LD_VAR 0 2
10381: NOT
10382: IFFALSE 10386
// exit ;
10384: GO 10473
// un := tmp [ rand ( 1 , tmp ) ] ;
10386: LD_ADDR_VAR 0 1
10390: PUSH
10391: LD_VAR 0 2
10395: PUSH
10396: LD_INT 1
10398: PPUSH
10399: LD_VAR 0 2
10403: PPUSH
10404: CALL_OW 12
10408: ARRAY
10409: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10410: LD_VAR 0 1
10414: PPUSH
10415: LD_INT 0
10417: PPUSH
10418: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10422: LD_VAR 0 1
10426: PPUSH
10427: LD_OWVAR 3
10431: PUSH
10432: LD_VAR 0 1
10436: DIFF
10437: PPUSH
10438: LD_VAR 0 1
10442: PPUSH
10443: CALL_OW 74
10447: PPUSH
10448: CALL_OW 115
// wait ( 0 0$20 ) ;
10452: LD_INT 700
10454: PPUSH
10455: CALL_OW 67
// SetSide ( un , your_side ) ;
10459: LD_VAR 0 1
10463: PPUSH
10464: LD_OWVAR 2
10468: PPUSH
10469: CALL_OW 235
// end ;
10473: PPOPN 2
10475: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10476: LD_EXP 1
10480: PUSH
10481: LD_EXP 34
10485: AND
10486: IFFALSE 10592
10488: GO 10490
10490: DISABLE
10491: LD_INT 0
10493: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10494: LD_ADDR_VAR 0 1
10498: PUSH
10499: LD_INT 22
10501: PUSH
10502: LD_OWVAR 2
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: PUSH
10511: LD_INT 2
10513: PUSH
10514: LD_INT 30
10516: PUSH
10517: LD_INT 0
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: PUSH
10524: LD_INT 30
10526: PUSH
10527: LD_INT 1
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: PUSH
10534: EMPTY
10535: LIST
10536: LIST
10537: LIST
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: PPUSH
10543: CALL_OW 69
10547: ST_TO_ADDR
// if not depot then
10548: LD_VAR 0 1
10552: NOT
10553: IFFALSE 10557
// exit ;
10555: GO 10592
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10557: LD_VAR 0 1
10561: PUSH
10562: LD_INT 1
10564: ARRAY
10565: PPUSH
10566: CALL_OW 250
10570: PPUSH
10571: LD_VAR 0 1
10575: PUSH
10576: LD_INT 1
10578: ARRAY
10579: PPUSH
10580: CALL_OW 251
10584: PPUSH
10585: LD_INT 70
10587: PPUSH
10588: CALL_OW 495
// end ;
10592: PPOPN 1
10594: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10595: LD_EXP 1
10599: PUSH
10600: LD_EXP 35
10604: AND
10605: IFFALSE 10816
10607: GO 10609
10609: DISABLE
10610: LD_INT 0
10612: PPUSH
10613: PPUSH
10614: PPUSH
10615: PPUSH
10616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10617: LD_ADDR_VAR 0 5
10621: PUSH
10622: LD_INT 22
10624: PUSH
10625: LD_OWVAR 2
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PUSH
10634: LD_INT 21
10636: PUSH
10637: LD_INT 1
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: PPUSH
10648: CALL_OW 69
10652: ST_TO_ADDR
// if not tmp then
10653: LD_VAR 0 5
10657: NOT
10658: IFFALSE 10662
// exit ;
10660: GO 10816
// for i in tmp do
10662: LD_ADDR_VAR 0 1
10666: PUSH
10667: LD_VAR 0 5
10671: PUSH
10672: FOR_IN
10673: IFFALSE 10814
// begin d := rand ( 0 , 5 ) ;
10675: LD_ADDR_VAR 0 4
10679: PUSH
10680: LD_INT 0
10682: PPUSH
10683: LD_INT 5
10685: PPUSH
10686: CALL_OW 12
10690: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10691: LD_ADDR_VAR 0 2
10695: PUSH
10696: LD_VAR 0 1
10700: PPUSH
10701: CALL_OW 250
10705: PPUSH
10706: LD_VAR 0 4
10710: PPUSH
10711: LD_INT 3
10713: PPUSH
10714: LD_INT 12
10716: PPUSH
10717: CALL_OW 12
10721: PPUSH
10722: CALL_OW 272
10726: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
10727: LD_ADDR_VAR 0 3
10731: PUSH
10732: LD_VAR 0 1
10736: PPUSH
10737: CALL_OW 251
10741: PPUSH
10742: LD_VAR 0 4
10746: PPUSH
10747: LD_INT 3
10749: PPUSH
10750: LD_INT 12
10752: PPUSH
10753: CALL_OW 12
10757: PPUSH
10758: CALL_OW 273
10762: ST_TO_ADDR
// if ValidHex ( x , y ) then
10763: LD_VAR 0 2
10767: PPUSH
10768: LD_VAR 0 3
10772: PPUSH
10773: CALL_OW 488
10777: IFFALSE 10812
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
10779: LD_VAR 0 1
10783: PPUSH
10784: LD_VAR 0 2
10788: PPUSH
10789: LD_VAR 0 3
10793: PPUSH
10794: LD_INT 3
10796: PPUSH
10797: LD_INT 6
10799: PPUSH
10800: CALL_OW 12
10804: PPUSH
10805: LD_INT 1
10807: PPUSH
10808: CALL_OW 483
// end ;
10812: GO 10672
10814: POP
10815: POP
// end ;
10816: PPOPN 5
10818: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
10819: LD_EXP 1
10823: PUSH
10824: LD_EXP 36
10828: AND
10829: IFFALSE 10923
10831: GO 10833
10833: DISABLE
10834: LD_INT 0
10836: PPUSH
10837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
10838: LD_ADDR_VAR 0 2
10842: PUSH
10843: LD_INT 22
10845: PUSH
10846: LD_OWVAR 2
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PUSH
10855: LD_INT 32
10857: PUSH
10858: LD_INT 1
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: PUSH
10865: LD_INT 21
10867: PUSH
10868: LD_INT 2
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: LIST
10879: PPUSH
10880: CALL_OW 69
10884: ST_TO_ADDR
// if not tmp then
10885: LD_VAR 0 2
10889: NOT
10890: IFFALSE 10894
// exit ;
10892: GO 10923
// for i in tmp do
10894: LD_ADDR_VAR 0 1
10898: PUSH
10899: LD_VAR 0 2
10903: PUSH
10904: FOR_IN
10905: IFFALSE 10921
// SetFuel ( i , 0 ) ;
10907: LD_VAR 0 1
10911: PPUSH
10912: LD_INT 0
10914: PPUSH
10915: CALL_OW 240
10919: GO 10904
10921: POP
10922: POP
// end ;
10923: PPOPN 2
10925: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
10926: LD_EXP 1
10930: PUSH
10931: LD_EXP 37
10935: AND
10936: IFFALSE 11002
10938: GO 10940
10940: DISABLE
10941: LD_INT 0
10943: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
10944: LD_ADDR_VAR 0 1
10948: PUSH
10949: LD_INT 22
10951: PUSH
10952: LD_OWVAR 2
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: PUSH
10961: LD_INT 30
10963: PUSH
10964: LD_INT 29
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: PPUSH
10975: CALL_OW 69
10979: ST_TO_ADDR
// if not tmp then
10980: LD_VAR 0 1
10984: NOT
10985: IFFALSE 10989
// exit ;
10987: GO 11002
// DestroyUnit ( tmp [ 1 ] ) ;
10989: LD_VAR 0 1
10993: PUSH
10994: LD_INT 1
10996: ARRAY
10997: PPUSH
10998: CALL_OW 65
// end ;
11002: PPOPN 1
11004: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11005: LD_EXP 1
11009: PUSH
11010: LD_EXP 39
11014: AND
11015: IFFALSE 11144
11017: GO 11019
11019: DISABLE
11020: LD_INT 0
11022: PPUSH
// begin uc_side := 0 ;
11023: LD_ADDR_OWVAR 20
11027: PUSH
11028: LD_INT 0
11030: ST_TO_ADDR
// uc_nation := nation_arabian ;
11031: LD_ADDR_OWVAR 21
11035: PUSH
11036: LD_INT 2
11038: ST_TO_ADDR
// hc_gallery :=  ;
11039: LD_ADDR_OWVAR 33
11043: PUSH
11044: LD_STRING 
11046: ST_TO_ADDR
// hc_name :=  ;
11047: LD_ADDR_OWVAR 26
11051: PUSH
11052: LD_STRING 
11054: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11055: LD_INT 1
11057: PPUSH
11058: LD_INT 11
11060: PPUSH
11061: LD_INT 10
11063: PPUSH
11064: CALL_OW 380
// un := CreateHuman ;
11068: LD_ADDR_VAR 0 1
11072: PUSH
11073: CALL_OW 44
11077: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11078: LD_VAR 0 1
11082: PPUSH
11083: LD_INT 1
11085: PPUSH
11086: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11090: LD_INT 35
11092: PPUSH
11093: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11097: LD_VAR 0 1
11101: PPUSH
11102: LD_INT 22
11104: PUSH
11105: LD_OWVAR 2
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: PPUSH
11114: CALL_OW 69
11118: PPUSH
11119: LD_VAR 0 1
11123: PPUSH
11124: CALL_OW 74
11128: PPUSH
11129: CALL_OW 115
// until IsDead ( un ) ;
11133: LD_VAR 0 1
11137: PPUSH
11138: CALL_OW 301
11142: IFFALSE 11090
// end ;
11144: PPOPN 1
11146: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11147: LD_EXP 1
11151: PUSH
11152: LD_EXP 41
11156: AND
11157: IFFALSE 11169
11159: GO 11161
11161: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11162: LD_STRING earthquake(getX(game), 0, 32)
11164: PPUSH
11165: CALL_OW 559
11169: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11170: LD_EXP 1
11174: PUSH
11175: LD_EXP 42
11179: AND
11180: IFFALSE 11271
11182: GO 11184
11184: DISABLE
11185: LD_INT 0
11187: PPUSH
// begin enable ;
11188: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11189: LD_ADDR_VAR 0 1
11193: PUSH
11194: LD_INT 22
11196: PUSH
11197: LD_OWVAR 2
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: LD_INT 21
11208: PUSH
11209: LD_INT 2
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: PUSH
11216: LD_INT 33
11218: PUSH
11219: LD_INT 3
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: LIST
11230: PPUSH
11231: CALL_OW 69
11235: ST_TO_ADDR
// if not tmp then
11236: LD_VAR 0 1
11240: NOT
11241: IFFALSE 11245
// exit ;
11243: GO 11271
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11245: LD_VAR 0 1
11249: PUSH
11250: LD_INT 1
11252: PPUSH
11253: LD_VAR 0 1
11257: PPUSH
11258: CALL_OW 12
11262: ARRAY
11263: PPUSH
11264: LD_INT 1
11266: PPUSH
11267: CALL_OW 234
// end ;
11271: PPOPN 1
11273: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11274: LD_EXP 1
11278: PUSH
11279: LD_EXP 43
11283: AND
11284: IFFALSE 11425
11286: GO 11288
11288: DISABLE
11289: LD_INT 0
11291: PPUSH
11292: PPUSH
11293: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11294: LD_ADDR_VAR 0 3
11298: PUSH
11299: LD_INT 22
11301: PUSH
11302: LD_OWVAR 2
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: PUSH
11311: LD_INT 25
11313: PUSH
11314: LD_INT 1
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PPUSH
11325: CALL_OW 69
11329: ST_TO_ADDR
// if not tmp then
11330: LD_VAR 0 3
11334: NOT
11335: IFFALSE 11339
// exit ;
11337: GO 11425
// un := tmp [ rand ( 1 , tmp ) ] ;
11339: LD_ADDR_VAR 0 2
11343: PUSH
11344: LD_VAR 0 3
11348: PUSH
11349: LD_INT 1
11351: PPUSH
11352: LD_VAR 0 3
11356: PPUSH
11357: CALL_OW 12
11361: ARRAY
11362: ST_TO_ADDR
// if Crawls ( un ) then
11363: LD_VAR 0 2
11367: PPUSH
11368: CALL_OW 318
11372: IFFALSE 11383
// ComWalk ( un ) ;
11374: LD_VAR 0 2
11378: PPUSH
11379: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11383: LD_VAR 0 2
11387: PPUSH
11388: LD_INT 9
11390: PPUSH
11391: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11395: LD_INT 28
11397: PPUSH
11398: LD_OWVAR 2
11402: PPUSH
11403: LD_INT 2
11405: PPUSH
11406: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11410: LD_INT 29
11412: PPUSH
11413: LD_OWVAR 2
11417: PPUSH
11418: LD_INT 2
11420: PPUSH
11421: CALL_OW 322
// end ;
11425: PPOPN 3
11427: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11428: LD_EXP 1
11432: PUSH
11433: LD_EXP 44
11437: AND
11438: IFFALSE 11549
11440: GO 11442
11442: DISABLE
11443: LD_INT 0
11445: PPUSH
11446: PPUSH
11447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11448: LD_ADDR_VAR 0 3
11452: PUSH
11453: LD_INT 22
11455: PUSH
11456: LD_OWVAR 2
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PUSH
11465: LD_INT 25
11467: PUSH
11468: LD_INT 1
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: PPUSH
11479: CALL_OW 69
11483: ST_TO_ADDR
// if not tmp then
11484: LD_VAR 0 3
11488: NOT
11489: IFFALSE 11493
// exit ;
11491: GO 11549
// un := tmp [ rand ( 1 , tmp ) ] ;
11493: LD_ADDR_VAR 0 2
11497: PUSH
11498: LD_VAR 0 3
11502: PUSH
11503: LD_INT 1
11505: PPUSH
11506: LD_VAR 0 3
11510: PPUSH
11511: CALL_OW 12
11515: ARRAY
11516: ST_TO_ADDR
// if Crawls ( un ) then
11517: LD_VAR 0 2
11521: PPUSH
11522: CALL_OW 318
11526: IFFALSE 11537
// ComWalk ( un ) ;
11528: LD_VAR 0 2
11532: PPUSH
11533: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11537: LD_VAR 0 2
11541: PPUSH
11542: LD_INT 8
11544: PPUSH
11545: CALL_OW 336
// end ;
11549: PPOPN 3
11551: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11552: LD_EXP 1
11556: PUSH
11557: LD_EXP 45
11561: AND
11562: IFFALSE 11706
11564: GO 11566
11566: DISABLE
11567: LD_INT 0
11569: PPUSH
11570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11571: LD_ADDR_VAR 0 2
11575: PUSH
11576: LD_INT 22
11578: PUSH
11579: LD_OWVAR 2
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PUSH
11588: LD_INT 21
11590: PUSH
11591: LD_INT 2
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PUSH
11598: LD_INT 2
11600: PUSH
11601: LD_INT 34
11603: PUSH
11604: LD_INT 12
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PUSH
11611: LD_INT 34
11613: PUSH
11614: LD_INT 51
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: PUSH
11621: LD_INT 34
11623: PUSH
11624: LD_INT 32
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: LIST
11641: PPUSH
11642: CALL_OW 69
11646: ST_TO_ADDR
// if not tmp then
11647: LD_VAR 0 2
11651: NOT
11652: IFFALSE 11656
// exit ;
11654: GO 11706
// for i in tmp do
11656: LD_ADDR_VAR 0 1
11660: PUSH
11661: LD_VAR 0 2
11665: PUSH
11666: FOR_IN
11667: IFFALSE 11704
// if GetCargo ( i , mat_artifact ) = 0 then
11669: LD_VAR 0 1
11673: PPUSH
11674: LD_INT 4
11676: PPUSH
11677: CALL_OW 289
11681: PUSH
11682: LD_INT 0
11684: EQUAL
11685: IFFALSE 11702
// SetCargo ( i , mat_siberit , 100 ) ;
11687: LD_VAR 0 1
11691: PPUSH
11692: LD_INT 3
11694: PPUSH
11695: LD_INT 100
11697: PPUSH
11698: CALL_OW 290
11702: GO 11666
11704: POP
11705: POP
// end ;
11706: PPOPN 2
11708: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
11709: LD_EXP 1
11713: PUSH
11714: LD_EXP 46
11718: AND
11719: IFFALSE 11902
11721: GO 11723
11723: DISABLE
11724: LD_INT 0
11726: PPUSH
11727: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
11728: LD_ADDR_VAR 0 2
11732: PUSH
11733: LD_INT 22
11735: PUSH
11736: LD_OWVAR 2
11740: PUSH
11741: EMPTY
11742: LIST
11743: LIST
11744: PPUSH
11745: CALL_OW 69
11749: ST_TO_ADDR
// if not tmp then
11750: LD_VAR 0 2
11754: NOT
11755: IFFALSE 11759
// exit ;
11757: GO 11902
// for i := 1 to 2 do
11759: LD_ADDR_VAR 0 1
11763: PUSH
11764: DOUBLE
11765: LD_INT 1
11767: DEC
11768: ST_TO_ADDR
11769: LD_INT 2
11771: PUSH
11772: FOR_TO
11773: IFFALSE 11900
// begin uc_side := your_side ;
11775: LD_ADDR_OWVAR 20
11779: PUSH
11780: LD_OWVAR 2
11784: ST_TO_ADDR
// uc_nation := nation_american ;
11785: LD_ADDR_OWVAR 21
11789: PUSH
11790: LD_INT 1
11792: ST_TO_ADDR
// vc_chassis := us_morphling ;
11793: LD_ADDR_OWVAR 37
11797: PUSH
11798: LD_INT 5
11800: ST_TO_ADDR
// vc_engine := engine_siberite ;
11801: LD_ADDR_OWVAR 39
11805: PUSH
11806: LD_INT 3
11808: ST_TO_ADDR
// vc_control := control_computer ;
11809: LD_ADDR_OWVAR 38
11813: PUSH
11814: LD_INT 3
11816: ST_TO_ADDR
// vc_weapon := us_double_laser ;
11817: LD_ADDR_OWVAR 40
11821: PUSH
11822: LD_INT 10
11824: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
11825: LD_VAR 0 2
11829: PUSH
11830: LD_INT 1
11832: ARRAY
11833: PPUSH
11834: CALL_OW 310
11838: NOT
11839: IFFALSE 11886
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
11841: CALL_OW 45
11845: PPUSH
11846: LD_VAR 0 2
11850: PUSH
11851: LD_INT 1
11853: ARRAY
11854: PPUSH
11855: CALL_OW 250
11859: PPUSH
11860: LD_VAR 0 2
11864: PUSH
11865: LD_INT 1
11867: ARRAY
11868: PPUSH
11869: CALL_OW 251
11873: PPUSH
11874: LD_INT 12
11876: PPUSH
11877: LD_INT 1
11879: PPUSH
11880: CALL_OW 50
11884: GO 11898
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
11886: CALL_OW 45
11890: PPUSH
11891: LD_INT 1
11893: PPUSH
11894: CALL_OW 51
// end ;
11898: GO 11772
11900: POP
11901: POP
// end ;
11902: PPOPN 2
11904: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
11905: LD_EXP 1
11909: PUSH
11910: LD_EXP 47
11914: AND
11915: IFFALSE 12137
11917: GO 11919
11919: DISABLE
11920: LD_INT 0
11922: PPUSH
11923: PPUSH
11924: PPUSH
11925: PPUSH
11926: PPUSH
11927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11928: LD_ADDR_VAR 0 6
11932: PUSH
11933: LD_INT 22
11935: PUSH
11936: LD_OWVAR 2
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PUSH
11945: LD_INT 21
11947: PUSH
11948: LD_INT 1
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PUSH
11955: LD_INT 3
11957: PUSH
11958: LD_INT 23
11960: PUSH
11961: LD_INT 0
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: LIST
11976: PPUSH
11977: CALL_OW 69
11981: ST_TO_ADDR
// if not tmp then
11982: LD_VAR 0 6
11986: NOT
11987: IFFALSE 11991
// exit ;
11989: GO 12137
// s1 := rand ( 1 , 4 ) ;
11991: LD_ADDR_VAR 0 2
11995: PUSH
11996: LD_INT 1
11998: PPUSH
11999: LD_INT 4
12001: PPUSH
12002: CALL_OW 12
12006: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12007: LD_ADDR_VAR 0 4
12011: PUSH
12012: LD_VAR 0 6
12016: PUSH
12017: LD_INT 1
12019: ARRAY
12020: PPUSH
12021: LD_VAR 0 2
12025: PPUSH
12026: CALL_OW 259
12030: ST_TO_ADDR
// if s1 = 1 then
12031: LD_VAR 0 2
12035: PUSH
12036: LD_INT 1
12038: EQUAL
12039: IFFALSE 12059
// s2 := rand ( 2 , 4 ) else
12041: LD_ADDR_VAR 0 3
12045: PUSH
12046: LD_INT 2
12048: PPUSH
12049: LD_INT 4
12051: PPUSH
12052: CALL_OW 12
12056: ST_TO_ADDR
12057: GO 12067
// s2 := 1 ;
12059: LD_ADDR_VAR 0 3
12063: PUSH
12064: LD_INT 1
12066: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12067: LD_ADDR_VAR 0 5
12071: PUSH
12072: LD_VAR 0 6
12076: PUSH
12077: LD_INT 1
12079: ARRAY
12080: PPUSH
12081: LD_VAR 0 3
12085: PPUSH
12086: CALL_OW 259
12090: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12091: LD_VAR 0 6
12095: PUSH
12096: LD_INT 1
12098: ARRAY
12099: PPUSH
12100: LD_VAR 0 2
12104: PPUSH
12105: LD_VAR 0 5
12109: PPUSH
12110: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12114: LD_VAR 0 6
12118: PUSH
12119: LD_INT 1
12121: ARRAY
12122: PPUSH
12123: LD_VAR 0 3
12127: PPUSH
12128: LD_VAR 0 4
12132: PPUSH
12133: CALL_OW 237
// end ;
12137: PPOPN 6
12139: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12140: LD_EXP 1
12144: PUSH
12145: LD_EXP 48
12149: AND
12150: IFFALSE 12229
12152: GO 12154
12154: DISABLE
12155: LD_INT 0
12157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12158: LD_ADDR_VAR 0 1
12162: PUSH
12163: LD_INT 22
12165: PUSH
12166: LD_OWVAR 2
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: PUSH
12175: LD_INT 30
12177: PUSH
12178: LD_INT 3
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: PPUSH
12189: CALL_OW 69
12193: ST_TO_ADDR
// if not tmp then
12194: LD_VAR 0 1
12198: NOT
12199: IFFALSE 12203
// exit ;
12201: GO 12229
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12203: LD_VAR 0 1
12207: PUSH
12208: LD_INT 1
12210: PPUSH
12211: LD_VAR 0 1
12215: PPUSH
12216: CALL_OW 12
12220: ARRAY
12221: PPUSH
12222: LD_INT 1
12224: PPUSH
12225: CALL_OW 234
// end ;
12229: PPOPN 1
12231: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12232: LD_EXP 1
12236: PUSH
12237: LD_EXP 49
12241: AND
12242: IFFALSE 12354
12244: GO 12246
12246: DISABLE
12247: LD_INT 0
12249: PPUSH
12250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12251: LD_ADDR_VAR 0 2
12255: PUSH
12256: LD_INT 22
12258: PUSH
12259: LD_OWVAR 2
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: LD_INT 2
12270: PUSH
12271: LD_INT 30
12273: PUSH
12274: LD_INT 27
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: PUSH
12281: LD_INT 30
12283: PUSH
12284: LD_INT 26
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: LD_INT 30
12293: PUSH
12294: LD_INT 28
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PPUSH
12311: CALL_OW 69
12315: ST_TO_ADDR
// if not tmp then
12316: LD_VAR 0 2
12320: NOT
12321: IFFALSE 12325
// exit ;
12323: GO 12354
// for i in tmp do
12325: LD_ADDR_VAR 0 1
12329: PUSH
12330: LD_VAR 0 2
12334: PUSH
12335: FOR_IN
12336: IFFALSE 12352
// SetLives ( i , 1 ) ;
12338: LD_VAR 0 1
12342: PPUSH
12343: LD_INT 1
12345: PPUSH
12346: CALL_OW 234
12350: GO 12335
12352: POP
12353: POP
// end ;
12354: PPOPN 2
12356: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12357: LD_EXP 1
12361: PUSH
12362: LD_EXP 50
12366: AND
12367: IFFALSE 12654
12369: GO 12371
12371: DISABLE
12372: LD_INT 0
12374: PPUSH
12375: PPUSH
12376: PPUSH
// begin i := rand ( 1 , 7 ) ;
12377: LD_ADDR_VAR 0 1
12381: PUSH
12382: LD_INT 1
12384: PPUSH
12385: LD_INT 7
12387: PPUSH
12388: CALL_OW 12
12392: ST_TO_ADDR
// case i of 1 :
12393: LD_VAR 0 1
12397: PUSH
12398: LD_INT 1
12400: DOUBLE
12401: EQUAL
12402: IFTRUE 12406
12404: GO 12416
12406: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12407: LD_STRING earthquake(getX(game), 0, 32)
12409: PPUSH
12410: CALL_OW 559
12414: GO 12654
12416: LD_INT 2
12418: DOUBLE
12419: EQUAL
12420: IFTRUE 12424
12422: GO 12438
12424: POP
// begin ToLua ( displayStucuk(); ) ;
12425: LD_STRING displayStucuk();
12427: PPUSH
12428: CALL_OW 559
// ResetFog ;
12432: CALL_OW 335
// end ; 3 :
12436: GO 12654
12438: LD_INT 3
12440: DOUBLE
12441: EQUAL
12442: IFTRUE 12446
12444: GO 12550
12446: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12447: LD_ADDR_VAR 0 2
12451: PUSH
12452: LD_INT 22
12454: PUSH
12455: LD_OWVAR 2
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: PUSH
12464: LD_INT 25
12466: PUSH
12467: LD_INT 1
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: PPUSH
12478: CALL_OW 69
12482: ST_TO_ADDR
// if not tmp then
12483: LD_VAR 0 2
12487: NOT
12488: IFFALSE 12492
// exit ;
12490: GO 12654
// un := tmp [ rand ( 1 , tmp ) ] ;
12492: LD_ADDR_VAR 0 3
12496: PUSH
12497: LD_VAR 0 2
12501: PUSH
12502: LD_INT 1
12504: PPUSH
12505: LD_VAR 0 2
12509: PPUSH
12510: CALL_OW 12
12514: ARRAY
12515: ST_TO_ADDR
// if Crawls ( un ) then
12516: LD_VAR 0 3
12520: PPUSH
12521: CALL_OW 318
12525: IFFALSE 12536
// ComWalk ( un ) ;
12527: LD_VAR 0 3
12531: PPUSH
12532: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12536: LD_VAR 0 3
12540: PPUSH
12541: LD_INT 8
12543: PPUSH
12544: CALL_OW 336
// end ; 4 :
12548: GO 12654
12550: LD_INT 4
12552: DOUBLE
12553: EQUAL
12554: IFTRUE 12558
12556: GO 12632
12558: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12559: LD_ADDR_VAR 0 2
12563: PUSH
12564: LD_INT 22
12566: PUSH
12567: LD_OWVAR 2
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: PUSH
12576: LD_INT 30
12578: PUSH
12579: LD_INT 29
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PPUSH
12590: CALL_OW 69
12594: ST_TO_ADDR
// if not tmp then
12595: LD_VAR 0 2
12599: NOT
12600: IFFALSE 12604
// exit ;
12602: GO 12654
// CenterNowOnUnits ( tmp [ 1 ] ) ;
12604: LD_VAR 0 2
12608: PUSH
12609: LD_INT 1
12611: ARRAY
12612: PPUSH
12613: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
12617: LD_VAR 0 2
12621: PUSH
12622: LD_INT 1
12624: ARRAY
12625: PPUSH
12626: CALL_OW 65
// end ; 5 .. 7 :
12630: GO 12654
12632: LD_INT 5
12634: DOUBLE
12635: GREATEREQUAL
12636: IFFALSE 12644
12638: LD_INT 7
12640: DOUBLE
12641: LESSEQUAL
12642: IFTRUE 12646
12644: GO 12653
12646: POP
// StreamSibBomb ; end ;
12647: CALL 8891 0 0
12651: GO 12654
12653: POP
// end ;
12654: PPOPN 3
12656: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12657: LD_EXP 1
12661: PUSH
12662: LD_EXP 51
12666: AND
12667: IFFALSE 12823
12669: GO 12671
12671: DISABLE
12672: LD_INT 0
12674: PPUSH
12675: PPUSH
12676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12677: LD_ADDR_VAR 0 2
12681: PUSH
12682: LD_INT 81
12684: PUSH
12685: LD_OWVAR 2
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: PUSH
12694: LD_INT 2
12696: PUSH
12697: LD_INT 21
12699: PUSH
12700: LD_INT 1
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: PUSH
12707: LD_INT 21
12709: PUSH
12710: LD_INT 2
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: LIST
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: PPUSH
12726: CALL_OW 69
12730: ST_TO_ADDR
// if not tmp then
12731: LD_VAR 0 2
12735: NOT
12736: IFFALSE 12740
// exit ;
12738: GO 12823
// p := 0 ;
12740: LD_ADDR_VAR 0 3
12744: PUSH
12745: LD_INT 0
12747: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12748: LD_INT 35
12750: PPUSH
12751: CALL_OW 67
// p := p + 1 ;
12755: LD_ADDR_VAR 0 3
12759: PUSH
12760: LD_VAR 0 3
12764: PUSH
12765: LD_INT 1
12767: PLUS
12768: ST_TO_ADDR
// for i in tmp do
12769: LD_ADDR_VAR 0 1
12773: PUSH
12774: LD_VAR 0 2
12778: PUSH
12779: FOR_IN
12780: IFFALSE 12811
// if GetLives ( i ) < 1000 then
12782: LD_VAR 0 1
12786: PPUSH
12787: CALL_OW 256
12791: PUSH
12792: LD_INT 1000
12794: LESS
12795: IFFALSE 12809
// SetLives ( i , 1000 ) ;
12797: LD_VAR 0 1
12801: PPUSH
12802: LD_INT 1000
12804: PPUSH
12805: CALL_OW 234
12809: GO 12779
12811: POP
12812: POP
// until p > 20 ;
12813: LD_VAR 0 3
12817: PUSH
12818: LD_INT 20
12820: GREATER
12821: IFFALSE 12748
// end ;
12823: PPOPN 3
12825: END
// every 0 0$1 trigger StreamModeActive and sTime do
12826: LD_EXP 1
12830: PUSH
12831: LD_EXP 52
12835: AND
12836: IFFALSE 12871
12838: GO 12840
12840: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
12841: LD_INT 28
12843: PPUSH
12844: LD_OWVAR 2
12848: PPUSH
12849: LD_INT 2
12851: PPUSH
12852: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
12856: LD_INT 30
12858: PPUSH
12859: LD_OWVAR 2
12863: PPUSH
12864: LD_INT 2
12866: PPUSH
12867: CALL_OW 322
// end ;
12871: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
12872: LD_EXP 1
12876: PUSH
12877: LD_EXP 53
12881: AND
12882: IFFALSE 13003
12884: GO 12886
12886: DISABLE
12887: LD_INT 0
12889: PPUSH
12890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12891: LD_ADDR_VAR 0 2
12895: PUSH
12896: LD_INT 22
12898: PUSH
12899: LD_OWVAR 2
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: PUSH
12908: LD_INT 21
12910: PUSH
12911: LD_INT 1
12913: PUSH
12914: EMPTY
12915: LIST
12916: LIST
12917: PUSH
12918: LD_INT 3
12920: PUSH
12921: LD_INT 23
12923: PUSH
12924: LD_INT 0
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: LIST
12939: PPUSH
12940: CALL_OW 69
12944: ST_TO_ADDR
// if not tmp then
12945: LD_VAR 0 2
12949: NOT
12950: IFFALSE 12954
// exit ;
12952: GO 13003
// for i in tmp do
12954: LD_ADDR_VAR 0 1
12958: PUSH
12959: LD_VAR 0 2
12963: PUSH
12964: FOR_IN
12965: IFFALSE 13001
// begin if Crawls ( i ) then
12967: LD_VAR 0 1
12971: PPUSH
12972: CALL_OW 318
12976: IFFALSE 12987
// ComWalk ( i ) ;
12978: LD_VAR 0 1
12982: PPUSH
12983: CALL_OW 138
// SetClass ( i , 2 ) ;
12987: LD_VAR 0 1
12991: PPUSH
12992: LD_INT 2
12994: PPUSH
12995: CALL_OW 336
// end ;
12999: GO 12964
13001: POP
13002: POP
// end ;
13003: PPOPN 2
13005: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13006: LD_EXP 1
13010: PUSH
13011: LD_EXP 54
13015: AND
13016: IFFALSE 13304
13018: GO 13020
13020: DISABLE
13021: LD_INT 0
13023: PPUSH
13024: PPUSH
13025: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13026: LD_OWVAR 2
13030: PPUSH
13031: LD_INT 9
13033: PPUSH
13034: LD_INT 1
13036: PPUSH
13037: LD_INT 1
13039: PPUSH
13040: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13044: LD_INT 9
13046: PPUSH
13047: LD_OWVAR 2
13051: PPUSH
13052: CALL_OW 343
// uc_side := 9 ;
13056: LD_ADDR_OWVAR 20
13060: PUSH
13061: LD_INT 9
13063: ST_TO_ADDR
// uc_nation := 2 ;
13064: LD_ADDR_OWVAR 21
13068: PUSH
13069: LD_INT 2
13071: ST_TO_ADDR
// hc_name := Dark Warrior ;
13072: LD_ADDR_OWVAR 26
13076: PUSH
13077: LD_STRING Dark Warrior
13079: ST_TO_ADDR
// hc_gallery :=  ;
13080: LD_ADDR_OWVAR 33
13084: PUSH
13085: LD_STRING 
13087: ST_TO_ADDR
// hc_noskilllimit := true ;
13088: LD_ADDR_OWVAR 76
13092: PUSH
13093: LD_INT 1
13095: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13096: LD_ADDR_OWVAR 31
13100: PUSH
13101: LD_INT 30
13103: PUSH
13104: LD_INT 30
13106: PUSH
13107: LD_INT 30
13109: PUSH
13110: LD_INT 30
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: ST_TO_ADDR
// un := CreateHuman ;
13119: LD_ADDR_VAR 0 3
13123: PUSH
13124: CALL_OW 44
13128: ST_TO_ADDR
// hc_noskilllimit := false ;
13129: LD_ADDR_OWVAR 76
13133: PUSH
13134: LD_INT 0
13136: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13137: LD_VAR 0 3
13141: PPUSH
13142: LD_INT 1
13144: PPUSH
13145: CALL_OW 51
// ToLua ( playRanger() ) ;
13149: LD_STRING playRanger()
13151: PPUSH
13152: CALL_OW 559
// p := 0 ;
13156: LD_ADDR_VAR 0 2
13160: PUSH
13161: LD_INT 0
13163: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13164: LD_INT 35
13166: PPUSH
13167: CALL_OW 67
// p := p + 1 ;
13171: LD_ADDR_VAR 0 2
13175: PUSH
13176: LD_VAR 0 2
13180: PUSH
13181: LD_INT 1
13183: PLUS
13184: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13185: LD_VAR 0 3
13189: PPUSH
13190: CALL_OW 256
13194: PUSH
13195: LD_INT 1000
13197: LESS
13198: IFFALSE 13212
// SetLives ( un , 1000 ) ;
13200: LD_VAR 0 3
13204: PPUSH
13205: LD_INT 1000
13207: PPUSH
13208: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13212: LD_VAR 0 3
13216: PPUSH
13217: LD_INT 81
13219: PUSH
13220: LD_OWVAR 2
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: PUSH
13229: LD_INT 91
13231: PUSH
13232: LD_VAR 0 3
13236: PUSH
13237: LD_INT 30
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: LIST
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: PPUSH
13249: CALL_OW 69
13253: PPUSH
13254: LD_VAR 0 3
13258: PPUSH
13259: CALL_OW 74
13263: PPUSH
13264: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
13268: LD_VAR 0 2
13272: PUSH
13273: LD_INT 80
13275: GREATER
13276: PUSH
13277: LD_VAR 0 3
13281: PPUSH
13282: CALL_OW 301
13286: OR
13287: IFFALSE 13164
// if un then
13289: LD_VAR 0 3
13293: IFFALSE 13304
// RemoveUnit ( un ) ;
13295: LD_VAR 0 3
13299: PPUSH
13300: CALL_OW 64
// end ;
13304: PPOPN 3
13306: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
13307: LD_EXP 55
13311: IFFALSE 13427
13313: GO 13315
13315: DISABLE
13316: LD_INT 0
13318: PPUSH
13319: PPUSH
13320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13321: LD_ADDR_VAR 0 2
13325: PUSH
13326: LD_INT 81
13328: PUSH
13329: LD_OWVAR 2
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PUSH
13338: LD_INT 21
13340: PUSH
13341: LD_INT 1
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: PPUSH
13352: CALL_OW 69
13356: ST_TO_ADDR
// ToLua ( playComputer() ) ;
13357: LD_STRING playComputer()
13359: PPUSH
13360: CALL_OW 559
// if not tmp then
13364: LD_VAR 0 2
13368: NOT
13369: IFFALSE 13373
// exit ;
13371: GO 13427
// for i in tmp do
13373: LD_ADDR_VAR 0 1
13377: PUSH
13378: LD_VAR 0 2
13382: PUSH
13383: FOR_IN
13384: IFFALSE 13425
// for j := 1 to 4 do
13386: LD_ADDR_VAR 0 3
13390: PUSH
13391: DOUBLE
13392: LD_INT 1
13394: DEC
13395: ST_TO_ADDR
13396: LD_INT 4
13398: PUSH
13399: FOR_TO
13400: IFFALSE 13421
// SetSkill ( i , j , 10 ) ;
13402: LD_VAR 0 1
13406: PPUSH
13407: LD_VAR 0 3
13411: PPUSH
13412: LD_INT 10
13414: PPUSH
13415: CALL_OW 237
13419: GO 13399
13421: POP
13422: POP
13423: GO 13383
13425: POP
13426: POP
// end ;
13427: PPOPN 3
13429: END
// every 0 0$1 trigger s30 do var i , tmp ;
13430: LD_EXP 56
13434: IFFALSE 13503
13436: GO 13438
13438: DISABLE
13439: LD_INT 0
13441: PPUSH
13442: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13443: LD_ADDR_VAR 0 2
13447: PUSH
13448: LD_INT 22
13450: PUSH
13451: LD_OWVAR 2
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PPUSH
13460: CALL_OW 69
13464: ST_TO_ADDR
// if not tmp then
13465: LD_VAR 0 2
13469: NOT
13470: IFFALSE 13474
// exit ;
13472: GO 13503
// for i in tmp do
13474: LD_ADDR_VAR 0 1
13478: PUSH
13479: LD_VAR 0 2
13483: PUSH
13484: FOR_IN
13485: IFFALSE 13501
// SetLives ( i , 300 ) ;
13487: LD_VAR 0 1
13491: PPUSH
13492: LD_INT 300
13494: PPUSH
13495: CALL_OW 234
13499: GO 13484
13501: POP
13502: POP
// end ;
13503: PPOPN 2
13505: END
// every 0 0$1 trigger s60 do var i , tmp ;
13506: LD_EXP 57
13510: IFFALSE 13579
13512: GO 13514
13514: DISABLE
13515: LD_INT 0
13517: PPUSH
13518: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13519: LD_ADDR_VAR 0 2
13523: PUSH
13524: LD_INT 22
13526: PUSH
13527: LD_OWVAR 2
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: PPUSH
13536: CALL_OW 69
13540: ST_TO_ADDR
// if not tmp then
13541: LD_VAR 0 2
13545: NOT
13546: IFFALSE 13550
// exit ;
13548: GO 13579
// for i in tmp do
13550: LD_ADDR_VAR 0 1
13554: PUSH
13555: LD_VAR 0 2
13559: PUSH
13560: FOR_IN
13561: IFFALSE 13577
// SetLives ( i , 600 ) ;
13563: LD_VAR 0 1
13567: PPUSH
13568: LD_INT 600
13570: PPUSH
13571: CALL_OW 234
13575: GO 13560
13577: POP
13578: POP
// end ;
13579: PPOPN 2
13581: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13582: LD_INT 0
13584: PPUSH
// case cmd of 301 :
13585: LD_VAR 0 1
13589: PUSH
13590: LD_INT 301
13592: DOUBLE
13593: EQUAL
13594: IFTRUE 13598
13596: GO 13630
13598: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
13599: LD_VAR 0 6
13603: PPUSH
13604: LD_VAR 0 7
13608: PPUSH
13609: LD_VAR 0 8
13613: PPUSH
13614: LD_VAR 0 4
13618: PPUSH
13619: LD_VAR 0 5
13623: PPUSH
13624: CALL 14831 0 5
13628: GO 13751
13630: LD_INT 302
13632: DOUBLE
13633: EQUAL
13634: IFTRUE 13638
13636: GO 13675
13638: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
13639: LD_VAR 0 6
13643: PPUSH
13644: LD_VAR 0 7
13648: PPUSH
13649: LD_VAR 0 8
13653: PPUSH
13654: LD_VAR 0 9
13658: PPUSH
13659: LD_VAR 0 4
13663: PPUSH
13664: LD_VAR 0 5
13668: PPUSH
13669: CALL 14922 0 6
13673: GO 13751
13675: LD_INT 303
13677: DOUBLE
13678: EQUAL
13679: IFTRUE 13683
13681: GO 13720
13683: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
13684: LD_VAR 0 6
13688: PPUSH
13689: LD_VAR 0 7
13693: PPUSH
13694: LD_VAR 0 8
13698: PPUSH
13699: LD_VAR 0 9
13703: PPUSH
13704: LD_VAR 0 4
13708: PPUSH
13709: LD_VAR 0 5
13713: PPUSH
13714: CALL 13756 0 6
13718: GO 13751
13720: LD_INT 304
13722: DOUBLE
13723: EQUAL
13724: IFTRUE 13728
13726: GO 13750
13728: POP
// hHackTeleport ( unit , x , y ) ; end ;
13729: LD_VAR 0 2
13733: PPUSH
13734: LD_VAR 0 4
13738: PPUSH
13739: LD_VAR 0 5
13743: PPUSH
13744: CALL 15515 0 3
13748: GO 13751
13750: POP
// end ;
13751: LD_VAR 0 12
13755: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
13756: LD_INT 0
13758: PPUSH
13759: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
13760: LD_VAR 0 1
13764: PUSH
13765: LD_INT 1
13767: LESS
13768: PUSH
13769: LD_VAR 0 1
13773: PUSH
13774: LD_INT 3
13776: GREATER
13777: OR
13778: PUSH
13779: LD_VAR 0 5
13783: PPUSH
13784: LD_VAR 0 6
13788: PPUSH
13789: CALL_OW 428
13793: OR
13794: IFFALSE 13798
// exit ;
13796: GO 14518
// uc_side := your_side ;
13798: LD_ADDR_OWVAR 20
13802: PUSH
13803: LD_OWVAR 2
13807: ST_TO_ADDR
// uc_nation := nation ;
13808: LD_ADDR_OWVAR 21
13812: PUSH
13813: LD_VAR 0 1
13817: ST_TO_ADDR
// bc_level = 1 ;
13818: LD_ADDR_OWVAR 43
13822: PUSH
13823: LD_INT 1
13825: ST_TO_ADDR
// case btype of 1 :
13826: LD_VAR 0 2
13830: PUSH
13831: LD_INT 1
13833: DOUBLE
13834: EQUAL
13835: IFTRUE 13839
13837: GO 13850
13839: POP
// bc_type := b_depot ; 2 :
13840: LD_ADDR_OWVAR 42
13844: PUSH
13845: LD_INT 0
13847: ST_TO_ADDR
13848: GO 14462
13850: LD_INT 2
13852: DOUBLE
13853: EQUAL
13854: IFTRUE 13858
13856: GO 13869
13858: POP
// bc_type := b_warehouse ; 3 :
13859: LD_ADDR_OWVAR 42
13863: PUSH
13864: LD_INT 1
13866: ST_TO_ADDR
13867: GO 14462
13869: LD_INT 3
13871: DOUBLE
13872: EQUAL
13873: IFTRUE 13877
13875: GO 13888
13877: POP
// bc_type := b_lab ; 4 .. 9 :
13878: LD_ADDR_OWVAR 42
13882: PUSH
13883: LD_INT 6
13885: ST_TO_ADDR
13886: GO 14462
13888: LD_INT 4
13890: DOUBLE
13891: GREATEREQUAL
13892: IFFALSE 13900
13894: LD_INT 9
13896: DOUBLE
13897: LESSEQUAL
13898: IFTRUE 13902
13900: GO 13954
13902: POP
// begin bc_type := b_lab_half ;
13903: LD_ADDR_OWVAR 42
13907: PUSH
13908: LD_INT 7
13910: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
13911: LD_ADDR_OWVAR 44
13915: PUSH
13916: LD_INT 10
13918: PUSH
13919: LD_INT 11
13921: PUSH
13922: LD_INT 12
13924: PUSH
13925: LD_INT 15
13927: PUSH
13928: LD_INT 14
13930: PUSH
13931: LD_INT 13
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: PUSH
13942: LD_VAR 0 2
13946: PUSH
13947: LD_INT 3
13949: MINUS
13950: ARRAY
13951: ST_TO_ADDR
// end ; 10 .. 13 :
13952: GO 14462
13954: LD_INT 10
13956: DOUBLE
13957: GREATEREQUAL
13958: IFFALSE 13966
13960: LD_INT 13
13962: DOUBLE
13963: LESSEQUAL
13964: IFTRUE 13968
13966: GO 14045
13968: POP
// begin bc_type := b_lab_full ;
13969: LD_ADDR_OWVAR 42
13973: PUSH
13974: LD_INT 8
13976: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
13977: LD_ADDR_OWVAR 44
13981: PUSH
13982: LD_INT 10
13984: PUSH
13985: LD_INT 12
13987: PUSH
13988: LD_INT 14
13990: PUSH
13991: LD_INT 13
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: PUSH
14000: LD_VAR 0 2
14004: PUSH
14005: LD_INT 9
14007: MINUS
14008: ARRAY
14009: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14010: LD_ADDR_OWVAR 45
14014: PUSH
14015: LD_INT 11
14017: PUSH
14018: LD_INT 15
14020: PUSH
14021: LD_INT 12
14023: PUSH
14024: LD_INT 15
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: PUSH
14033: LD_VAR 0 2
14037: PUSH
14038: LD_INT 9
14040: MINUS
14041: ARRAY
14042: ST_TO_ADDR
// end ; 14 :
14043: GO 14462
14045: LD_INT 14
14047: DOUBLE
14048: EQUAL
14049: IFTRUE 14053
14051: GO 14064
14053: POP
// bc_type := b_workshop ; 15 :
14054: LD_ADDR_OWVAR 42
14058: PUSH
14059: LD_INT 2
14061: ST_TO_ADDR
14062: GO 14462
14064: LD_INT 15
14066: DOUBLE
14067: EQUAL
14068: IFTRUE 14072
14070: GO 14083
14072: POP
// bc_type := b_factory ; 16 :
14073: LD_ADDR_OWVAR 42
14077: PUSH
14078: LD_INT 3
14080: ST_TO_ADDR
14081: GO 14462
14083: LD_INT 16
14085: DOUBLE
14086: EQUAL
14087: IFTRUE 14091
14089: GO 14102
14091: POP
// bc_type := b_ext_gun ; 17 :
14092: LD_ADDR_OWVAR 42
14096: PUSH
14097: LD_INT 17
14099: ST_TO_ADDR
14100: GO 14462
14102: LD_INT 17
14104: DOUBLE
14105: EQUAL
14106: IFTRUE 14110
14108: GO 14138
14110: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14111: LD_ADDR_OWVAR 42
14115: PUSH
14116: LD_INT 19
14118: PUSH
14119: LD_INT 23
14121: PUSH
14122: LD_INT 19
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: LIST
14129: PUSH
14130: LD_VAR 0 1
14134: ARRAY
14135: ST_TO_ADDR
14136: GO 14462
14138: LD_INT 18
14140: DOUBLE
14141: EQUAL
14142: IFTRUE 14146
14144: GO 14157
14146: POP
// bc_type := b_ext_radar ; 19 :
14147: LD_ADDR_OWVAR 42
14151: PUSH
14152: LD_INT 20
14154: ST_TO_ADDR
14155: GO 14462
14157: LD_INT 19
14159: DOUBLE
14160: EQUAL
14161: IFTRUE 14165
14163: GO 14176
14165: POP
// bc_type := b_ext_radio ; 20 :
14166: LD_ADDR_OWVAR 42
14170: PUSH
14171: LD_INT 22
14173: ST_TO_ADDR
14174: GO 14462
14176: LD_INT 20
14178: DOUBLE
14179: EQUAL
14180: IFTRUE 14184
14182: GO 14195
14184: POP
// bc_type := b_ext_siberium ; 21 :
14185: LD_ADDR_OWVAR 42
14189: PUSH
14190: LD_INT 21
14192: ST_TO_ADDR
14193: GO 14462
14195: LD_INT 21
14197: DOUBLE
14198: EQUAL
14199: IFTRUE 14203
14201: GO 14214
14203: POP
// bc_type := b_ext_computer ; 22 :
14204: LD_ADDR_OWVAR 42
14208: PUSH
14209: LD_INT 24
14211: ST_TO_ADDR
14212: GO 14462
14214: LD_INT 22
14216: DOUBLE
14217: EQUAL
14218: IFTRUE 14222
14220: GO 14233
14222: POP
// bc_type := b_ext_track ; 23 :
14223: LD_ADDR_OWVAR 42
14227: PUSH
14228: LD_INT 16
14230: ST_TO_ADDR
14231: GO 14462
14233: LD_INT 23
14235: DOUBLE
14236: EQUAL
14237: IFTRUE 14241
14239: GO 14252
14241: POP
// bc_type := b_ext_laser ; 24 :
14242: LD_ADDR_OWVAR 42
14246: PUSH
14247: LD_INT 25
14249: ST_TO_ADDR
14250: GO 14462
14252: LD_INT 24
14254: DOUBLE
14255: EQUAL
14256: IFTRUE 14260
14258: GO 14271
14260: POP
// bc_type := b_control_tower ; 25 :
14261: LD_ADDR_OWVAR 42
14265: PUSH
14266: LD_INT 36
14268: ST_TO_ADDR
14269: GO 14462
14271: LD_INT 25
14273: DOUBLE
14274: EQUAL
14275: IFTRUE 14279
14277: GO 14290
14279: POP
// bc_type := b_breastwork ; 26 :
14280: LD_ADDR_OWVAR 42
14284: PUSH
14285: LD_INT 31
14287: ST_TO_ADDR
14288: GO 14462
14290: LD_INT 26
14292: DOUBLE
14293: EQUAL
14294: IFTRUE 14298
14296: GO 14309
14298: POP
// bc_type := b_bunker ; 27 :
14299: LD_ADDR_OWVAR 42
14303: PUSH
14304: LD_INT 32
14306: ST_TO_ADDR
14307: GO 14462
14309: LD_INT 27
14311: DOUBLE
14312: EQUAL
14313: IFTRUE 14317
14315: GO 14328
14317: POP
// bc_type := b_turret ; 28 :
14318: LD_ADDR_OWVAR 42
14322: PUSH
14323: LD_INT 33
14325: ST_TO_ADDR
14326: GO 14462
14328: LD_INT 28
14330: DOUBLE
14331: EQUAL
14332: IFTRUE 14336
14334: GO 14347
14336: POP
// bc_type := b_armoury ; 29 :
14337: LD_ADDR_OWVAR 42
14341: PUSH
14342: LD_INT 4
14344: ST_TO_ADDR
14345: GO 14462
14347: LD_INT 29
14349: DOUBLE
14350: EQUAL
14351: IFTRUE 14355
14353: GO 14366
14355: POP
// bc_type := b_barracks ; 30 :
14356: LD_ADDR_OWVAR 42
14360: PUSH
14361: LD_INT 5
14363: ST_TO_ADDR
14364: GO 14462
14366: LD_INT 30
14368: DOUBLE
14369: EQUAL
14370: IFTRUE 14374
14372: GO 14385
14374: POP
// bc_type := b_solar_power ; 31 :
14375: LD_ADDR_OWVAR 42
14379: PUSH
14380: LD_INT 27
14382: ST_TO_ADDR
14383: GO 14462
14385: LD_INT 31
14387: DOUBLE
14388: EQUAL
14389: IFTRUE 14393
14391: GO 14404
14393: POP
// bc_type := b_oil_power ; 32 :
14394: LD_ADDR_OWVAR 42
14398: PUSH
14399: LD_INT 26
14401: ST_TO_ADDR
14402: GO 14462
14404: LD_INT 32
14406: DOUBLE
14407: EQUAL
14408: IFTRUE 14412
14410: GO 14423
14412: POP
// bc_type := b_siberite_power ; 33 :
14413: LD_ADDR_OWVAR 42
14417: PUSH
14418: LD_INT 28
14420: ST_TO_ADDR
14421: GO 14462
14423: LD_INT 33
14425: DOUBLE
14426: EQUAL
14427: IFTRUE 14431
14429: GO 14442
14431: POP
// bc_type := b_oil_mine ; 34 :
14432: LD_ADDR_OWVAR 42
14436: PUSH
14437: LD_INT 29
14439: ST_TO_ADDR
14440: GO 14462
14442: LD_INT 34
14444: DOUBLE
14445: EQUAL
14446: IFTRUE 14450
14448: GO 14461
14450: POP
// bc_type := b_siberite_mine ; end ;
14451: LD_ADDR_OWVAR 42
14455: PUSH
14456: LD_INT 30
14458: ST_TO_ADDR
14459: GO 14462
14461: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
14462: LD_ADDR_VAR 0 8
14466: PUSH
14467: LD_VAR 0 5
14471: PPUSH
14472: LD_VAR 0 6
14476: PPUSH
14477: LD_VAR 0 3
14481: PPUSH
14482: CALL_OW 47
14486: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
14487: LD_OWVAR 42
14491: PUSH
14492: LD_INT 32
14494: PUSH
14495: LD_INT 33
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: IN
14502: IFFALSE 14518
// PlaceWeaponTurret ( b , weapon ) ;
14504: LD_VAR 0 8
14508: PPUSH
14509: LD_VAR 0 4
14513: PPUSH
14514: CALL_OW 431
// end ;
14518: LD_VAR 0 7
14522: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
14523: LD_INT 0
14525: PPUSH
14526: PPUSH
14527: PPUSH
14528: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14529: LD_ADDR_VAR 0 4
14533: PUSH
14534: LD_INT 22
14536: PUSH
14537: LD_OWVAR 2
14541: PUSH
14542: EMPTY
14543: LIST
14544: LIST
14545: PUSH
14546: LD_INT 2
14548: PUSH
14549: LD_INT 30
14551: PUSH
14552: LD_INT 0
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: PUSH
14559: LD_INT 30
14561: PUSH
14562: LD_INT 1
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: LIST
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: PPUSH
14578: CALL_OW 69
14582: ST_TO_ADDR
// if not tmp then
14583: LD_VAR 0 4
14587: NOT
14588: IFFALSE 14592
// exit ;
14590: GO 14651
// for i in tmp do
14592: LD_ADDR_VAR 0 2
14596: PUSH
14597: LD_VAR 0 4
14601: PUSH
14602: FOR_IN
14603: IFFALSE 14649
// for j = 1 to 3 do
14605: LD_ADDR_VAR 0 3
14609: PUSH
14610: DOUBLE
14611: LD_INT 1
14613: DEC
14614: ST_TO_ADDR
14615: LD_INT 3
14617: PUSH
14618: FOR_TO
14619: IFFALSE 14645
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14621: LD_VAR 0 2
14625: PPUSH
14626: CALL_OW 274
14630: PPUSH
14631: LD_VAR 0 3
14635: PPUSH
14636: LD_INT 99999
14638: PPUSH
14639: CALL_OW 277
14643: GO 14618
14645: POP
14646: POP
14647: GO 14602
14649: POP
14650: POP
// end ;
14651: LD_VAR 0 1
14655: RET
// export function hHackSetLevel10 ; var i , j ; begin
14656: LD_INT 0
14658: PPUSH
14659: PPUSH
14660: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14661: LD_ADDR_VAR 0 2
14665: PUSH
14666: LD_INT 21
14668: PUSH
14669: LD_INT 1
14671: PUSH
14672: EMPTY
14673: LIST
14674: LIST
14675: PPUSH
14676: CALL_OW 69
14680: PUSH
14681: FOR_IN
14682: IFFALSE 14734
// if IsSelected ( i ) then
14684: LD_VAR 0 2
14688: PPUSH
14689: CALL_OW 306
14693: IFFALSE 14732
// begin for j := 1 to 4 do
14695: LD_ADDR_VAR 0 3
14699: PUSH
14700: DOUBLE
14701: LD_INT 1
14703: DEC
14704: ST_TO_ADDR
14705: LD_INT 4
14707: PUSH
14708: FOR_TO
14709: IFFALSE 14730
// SetSkill ( i , j , 10 ) ;
14711: LD_VAR 0 2
14715: PPUSH
14716: LD_VAR 0 3
14720: PPUSH
14721: LD_INT 10
14723: PPUSH
14724: CALL_OW 237
14728: GO 14708
14730: POP
14731: POP
// end ;
14732: GO 14681
14734: POP
14735: POP
// end ;
14736: LD_VAR 0 1
14740: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
14741: LD_INT 0
14743: PPUSH
14744: PPUSH
14745: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
14746: LD_ADDR_VAR 0 2
14750: PUSH
14751: LD_INT 22
14753: PUSH
14754: LD_OWVAR 2
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PUSH
14763: LD_INT 21
14765: PUSH
14766: LD_INT 1
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: PPUSH
14777: CALL_OW 69
14781: PUSH
14782: FOR_IN
14783: IFFALSE 14824
// begin for j := 1 to 4 do
14785: LD_ADDR_VAR 0 3
14789: PUSH
14790: DOUBLE
14791: LD_INT 1
14793: DEC
14794: ST_TO_ADDR
14795: LD_INT 4
14797: PUSH
14798: FOR_TO
14799: IFFALSE 14820
// SetSkill ( i , j , 10 ) ;
14801: LD_VAR 0 2
14805: PPUSH
14806: LD_VAR 0 3
14810: PPUSH
14811: LD_INT 10
14813: PPUSH
14814: CALL_OW 237
14818: GO 14798
14820: POP
14821: POP
// end ;
14822: GO 14782
14824: POP
14825: POP
// end ;
14826: LD_VAR 0 1
14830: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
14831: LD_INT 0
14833: PPUSH
// uc_side := your_side ;
14834: LD_ADDR_OWVAR 20
14838: PUSH
14839: LD_OWVAR 2
14843: ST_TO_ADDR
// uc_nation := nation ;
14844: LD_ADDR_OWVAR 21
14848: PUSH
14849: LD_VAR 0 1
14853: ST_TO_ADDR
// InitHc ;
14854: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
14858: LD_INT 0
14860: PPUSH
14861: LD_VAR 0 2
14865: PPUSH
14866: LD_VAR 0 3
14870: PPUSH
14871: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
14875: LD_VAR 0 4
14879: PPUSH
14880: LD_VAR 0 5
14884: PPUSH
14885: CALL_OW 428
14889: PUSH
14890: LD_INT 0
14892: EQUAL
14893: IFFALSE 14917
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
14895: CALL_OW 44
14899: PPUSH
14900: LD_VAR 0 4
14904: PPUSH
14905: LD_VAR 0 5
14909: PPUSH
14910: LD_INT 1
14912: PPUSH
14913: CALL_OW 48
// end ;
14917: LD_VAR 0 6
14921: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
14922: LD_INT 0
14924: PPUSH
14925: PPUSH
// uc_side := your_side ;
14926: LD_ADDR_OWVAR 20
14930: PUSH
14931: LD_OWVAR 2
14935: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
14936: LD_VAR 0 1
14940: PUSH
14941: LD_INT 1
14943: PUSH
14944: LD_INT 2
14946: PUSH
14947: LD_INT 3
14949: PUSH
14950: LD_INT 4
14952: PUSH
14953: LD_INT 5
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: IN
14963: IFFALSE 14975
// uc_nation := nation_american else
14965: LD_ADDR_OWVAR 21
14969: PUSH
14970: LD_INT 1
14972: ST_TO_ADDR
14973: GO 15018
// if chassis in [ 11 , 12 , 13 , 14 ] then
14975: LD_VAR 0 1
14979: PUSH
14980: LD_INT 11
14982: PUSH
14983: LD_INT 12
14985: PUSH
14986: LD_INT 13
14988: PUSH
14989: LD_INT 14
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: IN
14998: IFFALSE 15010
// uc_nation := nation_arabian else
15000: LD_ADDR_OWVAR 21
15004: PUSH
15005: LD_INT 2
15007: ST_TO_ADDR
15008: GO 15018
// uc_nation := nation_russian ;
15010: LD_ADDR_OWVAR 21
15014: PUSH
15015: LD_INT 3
15017: ST_TO_ADDR
// vc_chassis := chassis ;
15018: LD_ADDR_OWVAR 37
15022: PUSH
15023: LD_VAR 0 1
15027: ST_TO_ADDR
// vc_engine := engine ;
15028: LD_ADDR_OWVAR 39
15032: PUSH
15033: LD_VAR 0 2
15037: ST_TO_ADDR
// vc_control := control ;
15038: LD_ADDR_OWVAR 38
15042: PUSH
15043: LD_VAR 0 3
15047: ST_TO_ADDR
// vc_weapon := weapon ;
15048: LD_ADDR_OWVAR 40
15052: PUSH
15053: LD_VAR 0 4
15057: ST_TO_ADDR
// un := CreateVehicle ;
15058: LD_ADDR_VAR 0 8
15062: PUSH
15063: CALL_OW 45
15067: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15068: LD_VAR 0 8
15072: PPUSH
15073: LD_INT 0
15075: PPUSH
15076: LD_INT 5
15078: PPUSH
15079: CALL_OW 12
15083: PPUSH
15084: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15088: LD_VAR 0 8
15092: PPUSH
15093: LD_VAR 0 5
15097: PPUSH
15098: LD_VAR 0 6
15102: PPUSH
15103: LD_INT 1
15105: PPUSH
15106: CALL_OW 48
// end ;
15110: LD_VAR 0 7
15114: RET
// export hInvincible ; every 1 do
15115: GO 15117
15117: DISABLE
// hInvincible := [ ] ;
15118: LD_ADDR_EXP 58
15122: PUSH
15123: EMPTY
15124: ST_TO_ADDR
15125: END
// every 10 do var i ;
15126: GO 15128
15128: DISABLE
15129: LD_INT 0
15131: PPUSH
// begin enable ;
15132: ENABLE
// if not hInvincible then
15133: LD_EXP 58
15137: NOT
15138: IFFALSE 15142
// exit ;
15140: GO 15186
// for i in hInvincible do
15142: LD_ADDR_VAR 0 1
15146: PUSH
15147: LD_EXP 58
15151: PUSH
15152: FOR_IN
15153: IFFALSE 15184
// if GetLives ( i ) < 1000 then
15155: LD_VAR 0 1
15159: PPUSH
15160: CALL_OW 256
15164: PUSH
15165: LD_INT 1000
15167: LESS
15168: IFFALSE 15182
// SetLives ( i , 1000 ) ;
15170: LD_VAR 0 1
15174: PPUSH
15175: LD_INT 1000
15177: PPUSH
15178: CALL_OW 234
15182: GO 15152
15184: POP
15185: POP
// end ;
15186: PPOPN 1
15188: END
// export function hHackInvincible ; var i ; begin
15189: LD_INT 0
15191: PPUSH
15192: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15193: LD_ADDR_VAR 0 2
15197: PUSH
15198: LD_INT 2
15200: PUSH
15201: LD_INT 21
15203: PUSH
15204: LD_INT 1
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PUSH
15211: LD_INT 21
15213: PUSH
15214: LD_INT 2
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: LIST
15225: PPUSH
15226: CALL_OW 69
15230: PUSH
15231: FOR_IN
15232: IFFALSE 15293
// if IsSelected ( i ) then
15234: LD_VAR 0 2
15238: PPUSH
15239: CALL_OW 306
15243: IFFALSE 15291
// begin if i in hInvincible then
15245: LD_VAR 0 2
15249: PUSH
15250: LD_EXP 58
15254: IN
15255: IFFALSE 15275
// hInvincible := hInvincible diff i else
15257: LD_ADDR_EXP 58
15261: PUSH
15262: LD_EXP 58
15266: PUSH
15267: LD_VAR 0 2
15271: DIFF
15272: ST_TO_ADDR
15273: GO 15291
// hInvincible := hInvincible union i ;
15275: LD_ADDR_EXP 58
15279: PUSH
15280: LD_EXP 58
15284: PUSH
15285: LD_VAR 0 2
15289: UNION
15290: ST_TO_ADDR
// end ;
15291: GO 15231
15293: POP
15294: POP
// end ;
15295: LD_VAR 0 1
15299: RET
// export function hHackInvisible ; var i , j ; begin
15300: LD_INT 0
15302: PPUSH
15303: PPUSH
15304: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15305: LD_ADDR_VAR 0 2
15309: PUSH
15310: LD_INT 21
15312: PUSH
15313: LD_INT 1
15315: PUSH
15316: EMPTY
15317: LIST
15318: LIST
15319: PPUSH
15320: CALL_OW 69
15324: PUSH
15325: FOR_IN
15326: IFFALSE 15350
// if IsSelected ( i ) then
15328: LD_VAR 0 2
15332: PPUSH
15333: CALL_OW 306
15337: IFFALSE 15348
// ComForceInvisible ( i ) ;
15339: LD_VAR 0 2
15343: PPUSH
15344: CALL_OW 496
15348: GO 15325
15350: POP
15351: POP
// end ;
15352: LD_VAR 0 1
15356: RET
// export function hHackChangeYourSide ; begin
15357: LD_INT 0
15359: PPUSH
// if your_side = 8 then
15360: LD_OWVAR 2
15364: PUSH
15365: LD_INT 8
15367: EQUAL
15368: IFFALSE 15380
// your_side := 0 else
15370: LD_ADDR_OWVAR 2
15374: PUSH
15375: LD_INT 0
15377: ST_TO_ADDR
15378: GO 15394
// your_side := your_side + 1 ;
15380: LD_ADDR_OWVAR 2
15384: PUSH
15385: LD_OWVAR 2
15389: PUSH
15390: LD_INT 1
15392: PLUS
15393: ST_TO_ADDR
// end ;
15394: LD_VAR 0 1
15398: RET
// export function hHackChangeUnitSide ; var i , j ; begin
15399: LD_INT 0
15401: PPUSH
15402: PPUSH
15403: PPUSH
// for i in all_units do
15404: LD_ADDR_VAR 0 2
15408: PUSH
15409: LD_OWVAR 3
15413: PUSH
15414: FOR_IN
15415: IFFALSE 15493
// if IsSelected ( i ) then
15417: LD_VAR 0 2
15421: PPUSH
15422: CALL_OW 306
15426: IFFALSE 15491
// begin j := GetSide ( i ) ;
15428: LD_ADDR_VAR 0 3
15432: PUSH
15433: LD_VAR 0 2
15437: PPUSH
15438: CALL_OW 255
15442: ST_TO_ADDR
// if j = 8 then
15443: LD_VAR 0 3
15447: PUSH
15448: LD_INT 8
15450: EQUAL
15451: IFFALSE 15463
// j := 0 else
15453: LD_ADDR_VAR 0 3
15457: PUSH
15458: LD_INT 0
15460: ST_TO_ADDR
15461: GO 15477
// j := j + 1 ;
15463: LD_ADDR_VAR 0 3
15467: PUSH
15468: LD_VAR 0 3
15472: PUSH
15473: LD_INT 1
15475: PLUS
15476: ST_TO_ADDR
// SetSide ( i , j ) ;
15477: LD_VAR 0 2
15481: PPUSH
15482: LD_VAR 0 3
15486: PPUSH
15487: CALL_OW 235
// end ;
15491: GO 15414
15493: POP
15494: POP
// end ;
15495: LD_VAR 0 1
15499: RET
// export function hHackFog ; begin
15500: LD_INT 0
15502: PPUSH
// FogOff ( true ) ;
15503: LD_INT 1
15505: PPUSH
15506: CALL_OW 344
// end ;
15510: LD_VAR 0 1
15514: RET
// export function hHackTeleport ( unit , x , y ) ; begin
15515: LD_INT 0
15517: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
15518: LD_VAR 0 1
15522: PPUSH
15523: LD_VAR 0 2
15527: PPUSH
15528: LD_VAR 0 3
15532: PPUSH
15533: LD_INT 1
15535: PPUSH
15536: LD_INT 1
15538: PPUSH
15539: CALL_OW 483
// CenterOnXY ( x , y ) ;
15543: LD_VAR 0 2
15547: PPUSH
15548: LD_VAR 0 3
15552: PPUSH
15553: CALL_OW 84
// end ; end_of_file
15557: LD_VAR 0 4
15561: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
15562: LD_INT 0
15564: PPUSH
15565: PPUSH
15566: PPUSH
15567: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
15568: LD_VAR 0 1
15572: PPUSH
15573: CALL_OW 264
15577: PUSH
15578: LD_EXP 74
15582: EQUAL
15583: IFFALSE 15655
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
15585: LD_INT 68
15587: PPUSH
15588: LD_VAR 0 1
15592: PPUSH
15593: CALL_OW 255
15597: PPUSH
15598: CALL_OW 321
15602: PUSH
15603: LD_INT 2
15605: EQUAL
15606: IFFALSE 15618
// eff := 70 else
15608: LD_ADDR_VAR 0 4
15612: PUSH
15613: LD_INT 70
15615: ST_TO_ADDR
15616: GO 15626
// eff := 30 ;
15618: LD_ADDR_VAR 0 4
15622: PUSH
15623: LD_INT 30
15625: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
15626: LD_VAR 0 1
15630: PPUSH
15631: CALL_OW 250
15635: PPUSH
15636: LD_VAR 0 1
15640: PPUSH
15641: CALL_OW 251
15645: PPUSH
15646: LD_VAR 0 4
15650: PPUSH
15651: CALL_OW 495
// end ; end ;
15655: LD_VAR 0 2
15659: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
15660: LD_INT 0
15662: PPUSH
// end ;
15663: LD_VAR 0 4
15667: RET
// export function SOS_Command ( cmd ) ; begin
15668: LD_INT 0
15670: PPUSH
// end ;
15671: LD_VAR 0 2
15675: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
15676: LD_INT 0
15678: PPUSH
// end ;
15679: LD_VAR 0 6
15683: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
15684: LD_INT 0
15686: PPUSH
15687: PPUSH
// if not vehicle or not factory then
15688: LD_VAR 0 1
15692: NOT
15693: PUSH
15694: LD_VAR 0 2
15698: NOT
15699: OR
15700: IFFALSE 15704
// exit ;
15702: GO 15935
// if factoryWaypoints >= factory then
15704: LD_EXP 59
15708: PUSH
15709: LD_VAR 0 2
15713: GREATEREQUAL
15714: IFFALSE 15935
// if factoryWaypoints [ factory ] then
15716: LD_EXP 59
15720: PUSH
15721: LD_VAR 0 2
15725: ARRAY
15726: IFFALSE 15935
// begin if GetControl ( vehicle ) = control_manual then
15728: LD_VAR 0 1
15732: PPUSH
15733: CALL_OW 263
15737: PUSH
15738: LD_INT 1
15740: EQUAL
15741: IFFALSE 15822
// begin driver := IsDrivenBy ( vehicle ) ;
15743: LD_ADDR_VAR 0 4
15747: PUSH
15748: LD_VAR 0 1
15752: PPUSH
15753: CALL_OW 311
15757: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
15758: LD_VAR 0 4
15762: PPUSH
15763: LD_EXP 59
15767: PUSH
15768: LD_VAR 0 2
15772: ARRAY
15773: PUSH
15774: LD_INT 3
15776: ARRAY
15777: PPUSH
15778: LD_EXP 59
15782: PUSH
15783: LD_VAR 0 2
15787: ARRAY
15788: PUSH
15789: LD_INT 4
15791: ARRAY
15792: PPUSH
15793: CALL_OW 171
// AddComExitVehicle ( driver ) ;
15797: LD_VAR 0 4
15801: PPUSH
15802: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
15806: LD_VAR 0 4
15810: PPUSH
15811: LD_VAR 0 2
15815: PPUSH
15816: CALL_OW 180
// end else
15820: GO 15935
// if GetControl ( vehicle ) = control_remote then
15822: LD_VAR 0 1
15826: PPUSH
15827: CALL_OW 263
15831: PUSH
15832: LD_INT 2
15834: EQUAL
15835: IFFALSE 15896
// begin wait ( 0 0$2 ) ;
15837: LD_INT 70
15839: PPUSH
15840: CALL_OW 67
// if Connect ( vehicle ) then
15844: LD_VAR 0 1
15848: PPUSH
15849: CALL 28645 0 1
15853: IFFALSE 15894
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
15855: LD_VAR 0 1
15859: PPUSH
15860: LD_EXP 59
15864: PUSH
15865: LD_VAR 0 2
15869: ARRAY
15870: PUSH
15871: LD_INT 3
15873: ARRAY
15874: PPUSH
15875: LD_EXP 59
15879: PUSH
15880: LD_VAR 0 2
15884: ARRAY
15885: PUSH
15886: LD_INT 4
15888: ARRAY
15889: PPUSH
15890: CALL_OW 171
// end else
15894: GO 15935
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
15896: LD_VAR 0 1
15900: PPUSH
15901: LD_EXP 59
15905: PUSH
15906: LD_VAR 0 2
15910: ARRAY
15911: PUSH
15912: LD_INT 3
15914: ARRAY
15915: PPUSH
15916: LD_EXP 59
15920: PUSH
15921: LD_VAR 0 2
15925: ARRAY
15926: PUSH
15927: LD_INT 4
15929: ARRAY
15930: PPUSH
15931: CALL_OW 171
// end ; end ;
15935: LD_VAR 0 3
15939: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
15940: LD_INT 0
15942: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
15943: LD_VAR 0 1
15947: PUSH
15948: LD_INT 250
15950: EQUAL
15951: PUSH
15952: LD_VAR 0 2
15956: PPUSH
15957: CALL_OW 264
15961: PUSH
15962: LD_EXP 77
15966: EQUAL
15967: AND
15968: IFFALSE 15989
// MinerPlaceMine ( unit , x , y ) ;
15970: LD_VAR 0 2
15974: PPUSH
15975: LD_VAR 0 4
15979: PPUSH
15980: LD_VAR 0 5
15984: PPUSH
15985: CALL 18717 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
15989: LD_VAR 0 1
15993: PUSH
15994: LD_INT 251
15996: EQUAL
15997: PUSH
15998: LD_VAR 0 2
16002: PPUSH
16003: CALL_OW 264
16007: PUSH
16008: LD_EXP 77
16012: EQUAL
16013: AND
16014: IFFALSE 16035
// MinerDetonateMine ( unit , x , y ) ;
16016: LD_VAR 0 2
16020: PPUSH
16021: LD_VAR 0 4
16025: PPUSH
16026: LD_VAR 0 5
16030: PPUSH
16031: CALL 18994 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
16035: LD_VAR 0 1
16039: PUSH
16040: LD_INT 252
16042: EQUAL
16043: PUSH
16044: LD_VAR 0 2
16048: PPUSH
16049: CALL_OW 264
16053: PUSH
16054: LD_EXP 77
16058: EQUAL
16059: AND
16060: IFFALSE 16081
// MinerCreateMinefield ( unit , x , y ) ;
16062: LD_VAR 0 2
16066: PPUSH
16067: LD_VAR 0 4
16071: PPUSH
16072: LD_VAR 0 5
16076: PPUSH
16077: CALL 19411 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
16081: LD_VAR 0 1
16085: PUSH
16086: LD_INT 253
16088: EQUAL
16089: PUSH
16090: LD_VAR 0 2
16094: PPUSH
16095: CALL_OW 257
16099: PUSH
16100: LD_INT 5
16102: EQUAL
16103: AND
16104: IFFALSE 16125
// ComBinocular ( unit , x , y ) ;
16106: LD_VAR 0 2
16110: PPUSH
16111: LD_VAR 0 4
16115: PPUSH
16116: LD_VAR 0 5
16120: PPUSH
16121: CALL 19782 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
16125: LD_VAR 0 1
16129: PUSH
16130: LD_INT 254
16132: EQUAL
16133: PUSH
16134: LD_VAR 0 2
16138: PPUSH
16139: CALL_OW 264
16143: PUSH
16144: LD_EXP 72
16148: EQUAL
16149: AND
16150: PUSH
16151: LD_VAR 0 3
16155: PPUSH
16156: CALL_OW 263
16160: PUSH
16161: LD_INT 3
16163: EQUAL
16164: AND
16165: IFFALSE 16181
// HackDestroyVehicle ( unit , selectedUnit ) ;
16167: LD_VAR 0 2
16171: PPUSH
16172: LD_VAR 0 3
16176: PPUSH
16177: CALL 18077 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
16181: LD_VAR 0 1
16185: PUSH
16186: LD_INT 255
16188: EQUAL
16189: PUSH
16190: LD_VAR 0 2
16194: PPUSH
16195: CALL_OW 264
16199: PUSH
16200: LD_INT 14
16202: PUSH
16203: LD_INT 53
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: IN
16210: AND
16211: PUSH
16212: LD_VAR 0 4
16216: PPUSH
16217: LD_VAR 0 5
16221: PPUSH
16222: CALL_OW 488
16226: AND
16227: IFFALSE 16251
// CutTreeXYR ( unit , x , y , 12 ) ;
16229: LD_VAR 0 2
16233: PPUSH
16234: LD_VAR 0 4
16238: PPUSH
16239: LD_VAR 0 5
16243: PPUSH
16244: LD_INT 12
16246: PPUSH
16247: CALL 16643 0 4
// if cmd = 256 then
16251: LD_VAR 0 1
16255: PUSH
16256: LD_INT 256
16258: EQUAL
16259: IFFALSE 16280
// SetFactoryWaypoint ( unit , x , y ) ;
16261: LD_VAR 0 2
16265: PPUSH
16266: LD_VAR 0 4
16270: PPUSH
16271: LD_VAR 0 5
16275: PPUSH
16276: CALL 16285 0 3
// end ;
16280: LD_VAR 0 6
16284: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
16285: LD_INT 0
16287: PPUSH
16288: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
16289: LD_VAR 0 1
16293: NOT
16294: PUSH
16295: LD_VAR 0 2
16299: PPUSH
16300: LD_VAR 0 3
16304: PPUSH
16305: CALL_OW 488
16309: NOT
16310: OR
16311: PUSH
16312: LD_VAR 0 1
16316: PPUSH
16317: CALL_OW 266
16321: PUSH
16322: LD_INT 3
16324: NONEQUAL
16325: PUSH
16326: LD_VAR 0 1
16330: PPUSH
16331: CALL_OW 247
16335: PUSH
16336: LD_INT 1
16338: EQUAL
16339: NOT
16340: AND
16341: OR
16342: IFFALSE 16346
// exit ;
16344: GO 16495
// if GetType ( factory ) = unit_human then
16346: LD_VAR 0 1
16350: PPUSH
16351: CALL_OW 247
16355: PUSH
16356: LD_INT 1
16358: EQUAL
16359: IFFALSE 16376
// factory := IsInUnit ( factory ) ;
16361: LD_ADDR_VAR 0 1
16365: PUSH
16366: LD_VAR 0 1
16370: PPUSH
16371: CALL_OW 310
16375: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
16376: LD_VAR 0 1
16380: PPUSH
16381: CALL_OW 266
16385: PUSH
16386: LD_INT 3
16388: NONEQUAL
16389: IFFALSE 16393
// exit ;
16391: GO 16495
// if HexInfo ( x , y ) = factory then
16393: LD_VAR 0 2
16397: PPUSH
16398: LD_VAR 0 3
16402: PPUSH
16403: CALL_OW 428
16407: PUSH
16408: LD_VAR 0 1
16412: EQUAL
16413: IFFALSE 16440
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
16415: LD_ADDR_EXP 59
16419: PUSH
16420: LD_EXP 59
16424: PPUSH
16425: LD_VAR 0 1
16429: PPUSH
16430: LD_INT 0
16432: PPUSH
16433: CALL_OW 1
16437: ST_TO_ADDR
16438: GO 16491
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
16440: LD_ADDR_EXP 59
16444: PUSH
16445: LD_EXP 59
16449: PPUSH
16450: LD_VAR 0 1
16454: PPUSH
16455: LD_VAR 0 1
16459: PPUSH
16460: CALL_OW 255
16464: PUSH
16465: LD_VAR 0 1
16469: PUSH
16470: LD_VAR 0 2
16474: PUSH
16475: LD_VAR 0 3
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: PPUSH
16486: CALL_OW 1
16490: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16491: CALL 16500 0 0
// end ;
16495: LD_VAR 0 4
16499: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
16500: LD_INT 0
16502: PPUSH
16503: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16504: LD_STRING resetFactoryWaypoint();
16506: PPUSH
16507: CALL_OW 559
// if factoryWaypoints then
16511: LD_EXP 59
16515: IFFALSE 16638
// begin for i := 1 to factoryWaypoints do
16517: LD_ADDR_VAR 0 2
16521: PUSH
16522: DOUBLE
16523: LD_INT 1
16525: DEC
16526: ST_TO_ADDR
16527: LD_EXP 59
16531: PUSH
16532: FOR_TO
16533: IFFALSE 16636
// if factoryWaypoints [ i ] then
16535: LD_EXP 59
16539: PUSH
16540: LD_VAR 0 2
16544: ARRAY
16545: IFFALSE 16634
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
16547: LD_STRING setFactoryWaypointXY(
16549: PUSH
16550: LD_EXP 59
16554: PUSH
16555: LD_VAR 0 2
16559: ARRAY
16560: PUSH
16561: LD_INT 1
16563: ARRAY
16564: STR
16565: PUSH
16566: LD_STRING ,
16568: STR
16569: PUSH
16570: LD_EXP 59
16574: PUSH
16575: LD_VAR 0 2
16579: ARRAY
16580: PUSH
16581: LD_INT 2
16583: ARRAY
16584: STR
16585: PUSH
16586: LD_STRING ,
16588: STR
16589: PUSH
16590: LD_EXP 59
16594: PUSH
16595: LD_VAR 0 2
16599: ARRAY
16600: PUSH
16601: LD_INT 3
16603: ARRAY
16604: STR
16605: PUSH
16606: LD_STRING ,
16608: STR
16609: PUSH
16610: LD_EXP 59
16614: PUSH
16615: LD_VAR 0 2
16619: ARRAY
16620: PUSH
16621: LD_INT 4
16623: ARRAY
16624: STR
16625: PUSH
16626: LD_STRING )
16628: STR
16629: PPUSH
16630: CALL_OW 559
16634: GO 16532
16636: POP
16637: POP
// end ; end ;
16638: LD_VAR 0 1
16642: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
16643: LD_INT 0
16645: PPUSH
16646: PPUSH
16647: PPUSH
16648: PPUSH
16649: PPUSH
16650: PPUSH
16651: PPUSH
16652: PPUSH
16653: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
16654: LD_VAR 0 1
16658: NOT
16659: PUSH
16660: LD_VAR 0 2
16664: PPUSH
16665: LD_VAR 0 3
16669: PPUSH
16670: CALL_OW 488
16674: NOT
16675: OR
16676: PUSH
16677: LD_VAR 0 4
16681: NOT
16682: OR
16683: IFFALSE 16687
// exit ;
16685: GO 17027
// list := [ ] ;
16687: LD_ADDR_VAR 0 13
16691: PUSH
16692: EMPTY
16693: ST_TO_ADDR
// if x - r < 0 then
16694: LD_VAR 0 2
16698: PUSH
16699: LD_VAR 0 4
16703: MINUS
16704: PUSH
16705: LD_INT 0
16707: LESS
16708: IFFALSE 16720
// min_x := 0 else
16710: LD_ADDR_VAR 0 7
16714: PUSH
16715: LD_INT 0
16717: ST_TO_ADDR
16718: GO 16736
// min_x := x - r ;
16720: LD_ADDR_VAR 0 7
16724: PUSH
16725: LD_VAR 0 2
16729: PUSH
16730: LD_VAR 0 4
16734: MINUS
16735: ST_TO_ADDR
// if y - r < 0 then
16736: LD_VAR 0 3
16740: PUSH
16741: LD_VAR 0 4
16745: MINUS
16746: PUSH
16747: LD_INT 0
16749: LESS
16750: IFFALSE 16762
// min_y := 0 else
16752: LD_ADDR_VAR 0 8
16756: PUSH
16757: LD_INT 0
16759: ST_TO_ADDR
16760: GO 16778
// min_y := y - r ;
16762: LD_ADDR_VAR 0 8
16766: PUSH
16767: LD_VAR 0 3
16771: PUSH
16772: LD_VAR 0 4
16776: MINUS
16777: ST_TO_ADDR
// max_x := x + r ;
16778: LD_ADDR_VAR 0 9
16782: PUSH
16783: LD_VAR 0 2
16787: PUSH
16788: LD_VAR 0 4
16792: PLUS
16793: ST_TO_ADDR
// max_y := y + r ;
16794: LD_ADDR_VAR 0 10
16798: PUSH
16799: LD_VAR 0 3
16803: PUSH
16804: LD_VAR 0 4
16808: PLUS
16809: ST_TO_ADDR
// for _x = min_x to max_x do
16810: LD_ADDR_VAR 0 11
16814: PUSH
16815: DOUBLE
16816: LD_VAR 0 7
16820: DEC
16821: ST_TO_ADDR
16822: LD_VAR 0 9
16826: PUSH
16827: FOR_TO
16828: IFFALSE 16945
// for _y = min_y to max_y do
16830: LD_ADDR_VAR 0 12
16834: PUSH
16835: DOUBLE
16836: LD_VAR 0 8
16840: DEC
16841: ST_TO_ADDR
16842: LD_VAR 0 10
16846: PUSH
16847: FOR_TO
16848: IFFALSE 16941
// begin if not ValidHex ( _x , _y ) then
16850: LD_VAR 0 11
16854: PPUSH
16855: LD_VAR 0 12
16859: PPUSH
16860: CALL_OW 488
16864: NOT
16865: IFFALSE 16869
// continue ;
16867: GO 16847
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
16869: LD_VAR 0 11
16873: PPUSH
16874: LD_VAR 0 12
16878: PPUSH
16879: CALL_OW 351
16883: PUSH
16884: LD_VAR 0 11
16888: PPUSH
16889: LD_VAR 0 12
16893: PPUSH
16894: CALL_OW 554
16898: AND
16899: IFFALSE 16939
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
16901: LD_ADDR_VAR 0 13
16905: PUSH
16906: LD_VAR 0 13
16910: PPUSH
16911: LD_VAR 0 13
16915: PUSH
16916: LD_INT 1
16918: PLUS
16919: PPUSH
16920: LD_VAR 0 11
16924: PUSH
16925: LD_VAR 0 12
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: PPUSH
16934: CALL_OW 2
16938: ST_TO_ADDR
// end ;
16939: GO 16847
16941: POP
16942: POP
16943: GO 16827
16945: POP
16946: POP
// if not list then
16947: LD_VAR 0 13
16951: NOT
16952: IFFALSE 16956
// exit ;
16954: GO 17027
// for i in list do
16956: LD_ADDR_VAR 0 6
16960: PUSH
16961: LD_VAR 0 13
16965: PUSH
16966: FOR_IN
16967: IFFALSE 17025
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
16969: LD_VAR 0 1
16973: PPUSH
16974: LD_STRING M
16976: PUSH
16977: LD_VAR 0 6
16981: PUSH
16982: LD_INT 1
16984: ARRAY
16985: PUSH
16986: LD_VAR 0 6
16990: PUSH
16991: LD_INT 2
16993: ARRAY
16994: PUSH
16995: LD_INT 0
16997: PUSH
16998: LD_INT 0
17000: PUSH
17001: LD_INT 0
17003: PUSH
17004: LD_INT 0
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: PUSH
17016: EMPTY
17017: LIST
17018: PPUSH
17019: CALL_OW 447
17023: GO 16966
17025: POP
17026: POP
// end ;
17027: LD_VAR 0 5
17031: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
17032: LD_EXP 60
17036: NOT
17037: IFFALSE 17087
17039: GO 17041
17041: DISABLE
// begin initHack := true ;
17042: LD_ADDR_EXP 60
17046: PUSH
17047: LD_INT 1
17049: ST_TO_ADDR
// hackTanks := [ ] ;
17050: LD_ADDR_EXP 61
17054: PUSH
17055: EMPTY
17056: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
17057: LD_ADDR_EXP 62
17061: PUSH
17062: EMPTY
17063: ST_TO_ADDR
// hackLimit := 3 ;
17064: LD_ADDR_EXP 63
17068: PUSH
17069: LD_INT 3
17071: ST_TO_ADDR
// hackDist := 12 ;
17072: LD_ADDR_EXP 64
17076: PUSH
17077: LD_INT 12
17079: ST_TO_ADDR
// hackCounter := [ ] ;
17080: LD_ADDR_EXP 65
17084: PUSH
17085: EMPTY
17086: ST_TO_ADDR
// end ;
17087: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
17088: LD_EXP 60
17092: PUSH
17093: LD_INT 34
17095: PUSH
17096: LD_EXP 72
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: PPUSH
17105: CALL_OW 69
17109: AND
17110: IFFALSE 17365
17112: GO 17114
17114: DISABLE
17115: LD_INT 0
17117: PPUSH
17118: PPUSH
// begin enable ;
17119: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
17120: LD_ADDR_VAR 0 1
17124: PUSH
17125: LD_INT 34
17127: PUSH
17128: LD_EXP 72
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PPUSH
17137: CALL_OW 69
17141: PUSH
17142: FOR_IN
17143: IFFALSE 17363
// begin if not i in hackTanks then
17145: LD_VAR 0 1
17149: PUSH
17150: LD_EXP 61
17154: IN
17155: NOT
17156: IFFALSE 17239
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
17158: LD_ADDR_EXP 61
17162: PUSH
17163: LD_EXP 61
17167: PPUSH
17168: LD_EXP 61
17172: PUSH
17173: LD_INT 1
17175: PLUS
17176: PPUSH
17177: LD_VAR 0 1
17181: PPUSH
17182: CALL_OW 1
17186: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
17187: LD_ADDR_EXP 62
17191: PUSH
17192: LD_EXP 62
17196: PPUSH
17197: LD_EXP 62
17201: PUSH
17202: LD_INT 1
17204: PLUS
17205: PPUSH
17206: EMPTY
17207: PPUSH
17208: CALL_OW 1
17212: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
17213: LD_ADDR_EXP 65
17217: PUSH
17218: LD_EXP 65
17222: PPUSH
17223: LD_EXP 65
17227: PUSH
17228: LD_INT 1
17230: PLUS
17231: PPUSH
17232: EMPTY
17233: PPUSH
17234: CALL_OW 1
17238: ST_TO_ADDR
// end ; if not IsOk ( i ) then
17239: LD_VAR 0 1
17243: PPUSH
17244: CALL_OW 302
17248: NOT
17249: IFFALSE 17262
// begin HackUnlinkAll ( i ) ;
17251: LD_VAR 0 1
17255: PPUSH
17256: CALL 17368 0 1
// continue ;
17260: GO 17142
// end ; HackCheckCapturedStatus ( i ) ;
17262: LD_VAR 0 1
17266: PPUSH
17267: CALL 17811 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
17271: LD_ADDR_VAR 0 2
17275: PUSH
17276: LD_INT 81
17278: PUSH
17279: LD_VAR 0 1
17283: PPUSH
17284: CALL_OW 255
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: LD_INT 33
17295: PUSH
17296: LD_INT 3
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PUSH
17303: LD_INT 91
17305: PUSH
17306: LD_VAR 0 1
17310: PUSH
17311: LD_EXP 64
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: LIST
17320: PUSH
17321: LD_INT 50
17323: PUSH
17324: EMPTY
17325: LIST
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: PPUSH
17333: CALL_OW 69
17337: ST_TO_ADDR
// if not tmp then
17338: LD_VAR 0 2
17342: NOT
17343: IFFALSE 17347
// continue ;
17345: GO 17142
// HackLink ( i , tmp ) ;
17347: LD_VAR 0 1
17351: PPUSH
17352: LD_VAR 0 2
17356: PPUSH
17357: CALL 17504 0 2
// end ;
17361: GO 17142
17363: POP
17364: POP
// end ;
17365: PPOPN 2
17367: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
17368: LD_INT 0
17370: PPUSH
17371: PPUSH
17372: PPUSH
// if not hack in hackTanks then
17373: LD_VAR 0 1
17377: PUSH
17378: LD_EXP 61
17382: IN
17383: NOT
17384: IFFALSE 17388
// exit ;
17386: GO 17499
// index := GetElementIndex ( hackTanks , hack ) ;
17388: LD_ADDR_VAR 0 4
17392: PUSH
17393: LD_EXP 61
17397: PPUSH
17398: LD_VAR 0 1
17402: PPUSH
17403: CALL 25459 0 2
17407: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
17408: LD_EXP 62
17412: PUSH
17413: LD_VAR 0 4
17417: ARRAY
17418: IFFALSE 17499
// begin for i in hackTanksCaptured [ index ] do
17420: LD_ADDR_VAR 0 3
17424: PUSH
17425: LD_EXP 62
17429: PUSH
17430: LD_VAR 0 4
17434: ARRAY
17435: PUSH
17436: FOR_IN
17437: IFFALSE 17463
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
17439: LD_VAR 0 3
17443: PUSH
17444: LD_INT 1
17446: ARRAY
17447: PPUSH
17448: LD_VAR 0 3
17452: PUSH
17453: LD_INT 2
17455: ARRAY
17456: PPUSH
17457: CALL_OW 235
17461: GO 17436
17463: POP
17464: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
17465: LD_ADDR_EXP 62
17469: PUSH
17470: LD_EXP 62
17474: PPUSH
17475: LD_VAR 0 4
17479: PPUSH
17480: EMPTY
17481: PPUSH
17482: CALL_OW 1
17486: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
17487: LD_VAR 0 1
17491: PPUSH
17492: LD_INT 0
17494: PPUSH
17495: CALL_OW 505
// end ; end ;
17499: LD_VAR 0 2
17503: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
17504: LD_INT 0
17506: PPUSH
17507: PPUSH
17508: PPUSH
// if not hack in hackTanks or not vehicles then
17509: LD_VAR 0 1
17513: PUSH
17514: LD_EXP 61
17518: IN
17519: NOT
17520: PUSH
17521: LD_VAR 0 2
17525: NOT
17526: OR
17527: IFFALSE 17531
// exit ;
17529: GO 17806
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
17531: LD_ADDR_VAR 0 2
17535: PUSH
17536: LD_VAR 0 1
17540: PPUSH
17541: LD_VAR 0 2
17545: PPUSH
17546: LD_INT 1
17548: PPUSH
17549: LD_INT 1
17551: PPUSH
17552: CALL 26109 0 4
17556: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
17557: LD_ADDR_VAR 0 5
17561: PUSH
17562: LD_EXP 61
17566: PPUSH
17567: LD_VAR 0 1
17571: PPUSH
17572: CALL 25459 0 2
17576: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
17577: LD_EXP 62
17581: PUSH
17582: LD_VAR 0 5
17586: ARRAY
17587: PUSH
17588: LD_EXP 63
17592: LESS
17593: IFFALSE 17782
// begin for i := 1 to vehicles do
17595: LD_ADDR_VAR 0 4
17599: PUSH
17600: DOUBLE
17601: LD_INT 1
17603: DEC
17604: ST_TO_ADDR
17605: LD_VAR 0 2
17609: PUSH
17610: FOR_TO
17611: IFFALSE 17780
// begin if hackTanksCaptured [ index ] = hackLimit then
17613: LD_EXP 62
17617: PUSH
17618: LD_VAR 0 5
17622: ARRAY
17623: PUSH
17624: LD_EXP 63
17628: EQUAL
17629: IFFALSE 17633
// break ;
17631: GO 17780
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
17633: LD_ADDR_EXP 65
17637: PUSH
17638: LD_EXP 65
17642: PPUSH
17643: LD_VAR 0 5
17647: PPUSH
17648: LD_EXP 65
17652: PUSH
17653: LD_VAR 0 5
17657: ARRAY
17658: PUSH
17659: LD_INT 1
17661: PLUS
17662: PPUSH
17663: CALL_OW 1
17667: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
17668: LD_ADDR_EXP 62
17672: PUSH
17673: LD_EXP 62
17677: PPUSH
17678: LD_VAR 0 5
17682: PUSH
17683: LD_EXP 62
17687: PUSH
17688: LD_VAR 0 5
17692: ARRAY
17693: PUSH
17694: LD_INT 1
17696: PLUS
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PPUSH
17702: LD_VAR 0 2
17706: PUSH
17707: LD_VAR 0 4
17711: ARRAY
17712: PUSH
17713: LD_VAR 0 2
17717: PUSH
17718: LD_VAR 0 4
17722: ARRAY
17723: PPUSH
17724: CALL_OW 255
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PPUSH
17733: CALL 25674 0 3
17737: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
17738: LD_VAR 0 2
17742: PUSH
17743: LD_VAR 0 4
17747: ARRAY
17748: PPUSH
17749: LD_VAR 0 1
17753: PPUSH
17754: CALL_OW 255
17758: PPUSH
17759: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
17763: LD_VAR 0 2
17767: PUSH
17768: LD_VAR 0 4
17772: ARRAY
17773: PPUSH
17774: CALL_OW 141
// end ;
17778: GO 17610
17780: POP
17781: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
17782: LD_VAR 0 1
17786: PPUSH
17787: LD_EXP 62
17791: PUSH
17792: LD_VAR 0 5
17796: ARRAY
17797: PUSH
17798: LD_INT 0
17800: PLUS
17801: PPUSH
17802: CALL_OW 505
// end ;
17806: LD_VAR 0 3
17810: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
17811: LD_INT 0
17813: PPUSH
17814: PPUSH
17815: PPUSH
17816: PPUSH
// if not hack in hackTanks then
17817: LD_VAR 0 1
17821: PUSH
17822: LD_EXP 61
17826: IN
17827: NOT
17828: IFFALSE 17832
// exit ;
17830: GO 18072
// index := GetElementIndex ( hackTanks , hack ) ;
17832: LD_ADDR_VAR 0 4
17836: PUSH
17837: LD_EXP 61
17841: PPUSH
17842: LD_VAR 0 1
17846: PPUSH
17847: CALL 25459 0 2
17851: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
17852: LD_ADDR_VAR 0 3
17856: PUSH
17857: DOUBLE
17858: LD_EXP 62
17862: PUSH
17863: LD_VAR 0 4
17867: ARRAY
17868: INC
17869: ST_TO_ADDR
17870: LD_INT 1
17872: PUSH
17873: FOR_DOWNTO
17874: IFFALSE 18046
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
17876: LD_ADDR_VAR 0 5
17880: PUSH
17881: LD_EXP 62
17885: PUSH
17886: LD_VAR 0 4
17890: ARRAY
17891: PUSH
17892: LD_VAR 0 3
17896: ARRAY
17897: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
17898: LD_VAR 0 5
17902: PUSH
17903: LD_INT 1
17905: ARRAY
17906: PPUSH
17907: CALL_OW 302
17911: NOT
17912: PUSH
17913: LD_VAR 0 5
17917: PUSH
17918: LD_INT 1
17920: ARRAY
17921: PPUSH
17922: CALL_OW 255
17926: PUSH
17927: LD_VAR 0 1
17931: PPUSH
17932: CALL_OW 255
17936: NONEQUAL
17937: OR
17938: IFFALSE 18044
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
17940: LD_VAR 0 5
17944: PUSH
17945: LD_INT 1
17947: ARRAY
17948: PPUSH
17949: CALL_OW 305
17953: PUSH
17954: LD_VAR 0 5
17958: PUSH
17959: LD_INT 1
17961: ARRAY
17962: PPUSH
17963: CALL_OW 255
17967: PUSH
17968: LD_VAR 0 1
17972: PPUSH
17973: CALL_OW 255
17977: EQUAL
17978: AND
17979: IFFALSE 18003
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
17981: LD_VAR 0 5
17985: PUSH
17986: LD_INT 1
17988: ARRAY
17989: PPUSH
17990: LD_VAR 0 5
17994: PUSH
17995: LD_INT 2
17997: ARRAY
17998: PPUSH
17999: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
18003: LD_ADDR_EXP 62
18007: PUSH
18008: LD_EXP 62
18012: PPUSH
18013: LD_VAR 0 4
18017: PPUSH
18018: LD_EXP 62
18022: PUSH
18023: LD_VAR 0 4
18027: ARRAY
18028: PPUSH
18029: LD_VAR 0 3
18033: PPUSH
18034: CALL_OW 3
18038: PPUSH
18039: CALL_OW 1
18043: ST_TO_ADDR
// end ; end ;
18044: GO 17873
18046: POP
18047: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18048: LD_VAR 0 1
18052: PPUSH
18053: LD_EXP 62
18057: PUSH
18058: LD_VAR 0 4
18062: ARRAY
18063: PUSH
18064: LD_INT 0
18066: PLUS
18067: PPUSH
18068: CALL_OW 505
// end ;
18072: LD_VAR 0 2
18076: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
18077: LD_INT 0
18079: PPUSH
18080: PPUSH
18081: PPUSH
18082: PPUSH
// if not hack in hackTanks then
18083: LD_VAR 0 1
18087: PUSH
18088: LD_EXP 61
18092: IN
18093: NOT
18094: IFFALSE 18098
// exit ;
18096: GO 18183
// index := GetElementIndex ( hackTanks , hack ) ;
18098: LD_ADDR_VAR 0 5
18102: PUSH
18103: LD_EXP 61
18107: PPUSH
18108: LD_VAR 0 1
18112: PPUSH
18113: CALL 25459 0 2
18117: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
18118: LD_ADDR_VAR 0 4
18122: PUSH
18123: DOUBLE
18124: LD_INT 1
18126: DEC
18127: ST_TO_ADDR
18128: LD_EXP 62
18132: PUSH
18133: LD_VAR 0 5
18137: ARRAY
18138: PUSH
18139: FOR_TO
18140: IFFALSE 18181
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
18142: LD_EXP 62
18146: PUSH
18147: LD_VAR 0 5
18151: ARRAY
18152: PUSH
18153: LD_VAR 0 4
18157: ARRAY
18158: PUSH
18159: LD_INT 1
18161: ARRAY
18162: PUSH
18163: LD_VAR 0 2
18167: EQUAL
18168: IFFALSE 18179
// KillUnit ( vehicle ) ;
18170: LD_VAR 0 2
18174: PPUSH
18175: CALL_OW 66
18179: GO 18139
18181: POP
18182: POP
// end ;
18183: LD_VAR 0 3
18187: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
18188: LD_EXP 66
18192: NOT
18193: IFFALSE 18228
18195: GO 18197
18197: DISABLE
// begin initMiner := true ;
18198: LD_ADDR_EXP 66
18202: PUSH
18203: LD_INT 1
18205: ST_TO_ADDR
// minersList := [ ] ;
18206: LD_ADDR_EXP 67
18210: PUSH
18211: EMPTY
18212: ST_TO_ADDR
// minerMinesList := [ ] ;
18213: LD_ADDR_EXP 68
18217: PUSH
18218: EMPTY
18219: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
18220: LD_ADDR_EXP 69
18224: PUSH
18225: LD_INT 5
18227: ST_TO_ADDR
// end ;
18228: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
18229: LD_EXP 66
18233: PUSH
18234: LD_INT 34
18236: PUSH
18237: LD_EXP 77
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PPUSH
18246: CALL_OW 69
18250: AND
18251: IFFALSE 18714
18253: GO 18255
18255: DISABLE
18256: LD_INT 0
18258: PPUSH
18259: PPUSH
18260: PPUSH
18261: PPUSH
// begin enable ;
18262: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
18263: LD_ADDR_VAR 0 1
18267: PUSH
18268: LD_INT 34
18270: PUSH
18271: LD_EXP 77
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PPUSH
18280: CALL_OW 69
18284: PUSH
18285: FOR_IN
18286: IFFALSE 18358
// begin if not i in minersList then
18288: LD_VAR 0 1
18292: PUSH
18293: LD_EXP 67
18297: IN
18298: NOT
18299: IFFALSE 18356
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
18301: LD_ADDR_EXP 67
18305: PUSH
18306: LD_EXP 67
18310: PPUSH
18311: LD_EXP 67
18315: PUSH
18316: LD_INT 1
18318: PLUS
18319: PPUSH
18320: LD_VAR 0 1
18324: PPUSH
18325: CALL_OW 1
18329: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
18330: LD_ADDR_EXP 68
18334: PUSH
18335: LD_EXP 68
18339: PPUSH
18340: LD_EXP 68
18344: PUSH
18345: LD_INT 1
18347: PLUS
18348: PPUSH
18349: EMPTY
18350: PPUSH
18351: CALL_OW 1
18355: ST_TO_ADDR
// end end ;
18356: GO 18285
18358: POP
18359: POP
// for i := minerMinesList downto 1 do
18360: LD_ADDR_VAR 0 1
18364: PUSH
18365: DOUBLE
18366: LD_EXP 68
18370: INC
18371: ST_TO_ADDR
18372: LD_INT 1
18374: PUSH
18375: FOR_DOWNTO
18376: IFFALSE 18712
// begin if IsLive ( minersList [ i ] ) then
18378: LD_EXP 67
18382: PUSH
18383: LD_VAR 0 1
18387: ARRAY
18388: PPUSH
18389: CALL_OW 300
18393: IFFALSE 18421
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
18395: LD_EXP 67
18399: PUSH
18400: LD_VAR 0 1
18404: ARRAY
18405: PPUSH
18406: LD_EXP 68
18410: PUSH
18411: LD_VAR 0 1
18415: ARRAY
18416: PPUSH
18417: CALL_OW 505
// if not minerMinesList [ i ] then
18421: LD_EXP 68
18425: PUSH
18426: LD_VAR 0 1
18430: ARRAY
18431: NOT
18432: IFFALSE 18436
// continue ;
18434: GO 18375
// for j := minerMinesList [ i ] downto 1 do
18436: LD_ADDR_VAR 0 2
18440: PUSH
18441: DOUBLE
18442: LD_EXP 68
18446: PUSH
18447: LD_VAR 0 1
18451: ARRAY
18452: INC
18453: ST_TO_ADDR
18454: LD_INT 1
18456: PUSH
18457: FOR_DOWNTO
18458: IFFALSE 18708
// begin side := GetSide ( minersList [ i ] ) ;
18460: LD_ADDR_VAR 0 3
18464: PUSH
18465: LD_EXP 67
18469: PUSH
18470: LD_VAR 0 1
18474: ARRAY
18475: PPUSH
18476: CALL_OW 255
18480: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
18481: LD_ADDR_VAR 0 4
18485: PUSH
18486: LD_EXP 68
18490: PUSH
18491: LD_VAR 0 1
18495: ARRAY
18496: PUSH
18497: LD_VAR 0 2
18501: ARRAY
18502: PUSH
18503: LD_INT 1
18505: ARRAY
18506: PPUSH
18507: LD_EXP 68
18511: PUSH
18512: LD_VAR 0 1
18516: ARRAY
18517: PUSH
18518: LD_VAR 0 2
18522: ARRAY
18523: PUSH
18524: LD_INT 2
18526: ARRAY
18527: PPUSH
18528: CALL_OW 428
18532: ST_TO_ADDR
// if not tmp then
18533: LD_VAR 0 4
18537: NOT
18538: IFFALSE 18542
// continue ;
18540: GO 18457
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
18542: LD_VAR 0 4
18546: PUSH
18547: LD_INT 81
18549: PUSH
18550: LD_VAR 0 3
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PPUSH
18559: CALL_OW 69
18563: IN
18564: PUSH
18565: LD_EXP 68
18569: PUSH
18570: LD_VAR 0 1
18574: ARRAY
18575: PUSH
18576: LD_VAR 0 2
18580: ARRAY
18581: PUSH
18582: LD_INT 1
18584: ARRAY
18585: PPUSH
18586: LD_EXP 68
18590: PUSH
18591: LD_VAR 0 1
18595: ARRAY
18596: PUSH
18597: LD_VAR 0 2
18601: ARRAY
18602: PUSH
18603: LD_INT 2
18605: ARRAY
18606: PPUSH
18607: CALL_OW 458
18611: AND
18612: IFFALSE 18706
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
18614: LD_EXP 68
18618: PUSH
18619: LD_VAR 0 1
18623: ARRAY
18624: PUSH
18625: LD_VAR 0 2
18629: ARRAY
18630: PUSH
18631: LD_INT 1
18633: ARRAY
18634: PPUSH
18635: LD_EXP 68
18639: PUSH
18640: LD_VAR 0 1
18644: ARRAY
18645: PUSH
18646: LD_VAR 0 2
18650: ARRAY
18651: PUSH
18652: LD_INT 2
18654: ARRAY
18655: PPUSH
18656: LD_VAR 0 3
18660: PPUSH
18661: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
18665: LD_ADDR_EXP 68
18669: PUSH
18670: LD_EXP 68
18674: PPUSH
18675: LD_VAR 0 1
18679: PPUSH
18680: LD_EXP 68
18684: PUSH
18685: LD_VAR 0 1
18689: ARRAY
18690: PPUSH
18691: LD_VAR 0 2
18695: PPUSH
18696: CALL_OW 3
18700: PPUSH
18701: CALL_OW 1
18705: ST_TO_ADDR
// end ; end ;
18706: GO 18457
18708: POP
18709: POP
// end ;
18710: GO 18375
18712: POP
18713: POP
// end ;
18714: PPOPN 4
18716: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
18717: LD_INT 0
18719: PPUSH
18720: PPUSH
// result := false ;
18721: LD_ADDR_VAR 0 4
18725: PUSH
18726: LD_INT 0
18728: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
18729: LD_VAR 0 1
18733: PPUSH
18734: CALL_OW 264
18738: PUSH
18739: LD_EXP 77
18743: EQUAL
18744: NOT
18745: IFFALSE 18749
// exit ;
18747: GO 18989
// index := GetElementIndex ( minersList , unit ) ;
18749: LD_ADDR_VAR 0 5
18753: PUSH
18754: LD_EXP 67
18758: PPUSH
18759: LD_VAR 0 1
18763: PPUSH
18764: CALL 25459 0 2
18768: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
18769: LD_EXP 68
18773: PUSH
18774: LD_VAR 0 5
18778: ARRAY
18779: PUSH
18780: LD_EXP 69
18784: GREATEREQUAL
18785: IFFALSE 18789
// exit ;
18787: GO 18989
// ComMoveXY ( unit , x , y ) ;
18789: LD_VAR 0 1
18793: PPUSH
18794: LD_VAR 0 2
18798: PPUSH
18799: LD_VAR 0 3
18803: PPUSH
18804: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18808: LD_INT 35
18810: PPUSH
18811: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
18815: LD_VAR 0 1
18819: PPUSH
18820: LD_VAR 0 2
18824: PPUSH
18825: LD_VAR 0 3
18829: PPUSH
18830: CALL 56178 0 3
18834: NOT
18835: PUSH
18836: LD_VAR 0 1
18840: PPUSH
18841: CALL_OW 314
18845: AND
18846: IFFALSE 18850
// exit ;
18848: GO 18989
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
18850: LD_VAR 0 2
18854: PPUSH
18855: LD_VAR 0 3
18859: PPUSH
18860: CALL_OW 428
18864: PUSH
18865: LD_VAR 0 1
18869: EQUAL
18870: PUSH
18871: LD_VAR 0 1
18875: PPUSH
18876: CALL_OW 314
18880: NOT
18881: AND
18882: IFFALSE 18808
// PlaySoundXY ( x , y , PlantMine ) ;
18884: LD_VAR 0 2
18888: PPUSH
18889: LD_VAR 0 3
18893: PPUSH
18894: LD_STRING PlantMine
18896: PPUSH
18897: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
18901: LD_VAR 0 2
18905: PPUSH
18906: LD_VAR 0 3
18910: PPUSH
18911: LD_VAR 0 1
18915: PPUSH
18916: CALL_OW 255
18920: PPUSH
18921: LD_INT 0
18923: PPUSH
18924: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
18928: LD_ADDR_EXP 68
18932: PUSH
18933: LD_EXP 68
18937: PPUSH
18938: LD_VAR 0 5
18942: PUSH
18943: LD_EXP 68
18947: PUSH
18948: LD_VAR 0 5
18952: ARRAY
18953: PUSH
18954: LD_INT 1
18956: PLUS
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PPUSH
18962: LD_VAR 0 2
18966: PUSH
18967: LD_VAR 0 3
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: PPUSH
18976: CALL 25674 0 3
18980: ST_TO_ADDR
// result := true ;
18981: LD_ADDR_VAR 0 4
18985: PUSH
18986: LD_INT 1
18988: ST_TO_ADDR
// end ;
18989: LD_VAR 0 4
18993: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
18994: LD_INT 0
18996: PPUSH
18997: PPUSH
18998: PPUSH
// if not unit in minersList then
18999: LD_VAR 0 1
19003: PUSH
19004: LD_EXP 67
19008: IN
19009: NOT
19010: IFFALSE 19014
// exit ;
19012: GO 19406
// index := GetElementIndex ( minersList , unit ) ;
19014: LD_ADDR_VAR 0 6
19018: PUSH
19019: LD_EXP 67
19023: PPUSH
19024: LD_VAR 0 1
19028: PPUSH
19029: CALL 25459 0 2
19033: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
19034: LD_ADDR_VAR 0 5
19038: PUSH
19039: DOUBLE
19040: LD_EXP 68
19044: PUSH
19045: LD_VAR 0 6
19049: ARRAY
19050: INC
19051: ST_TO_ADDR
19052: LD_INT 1
19054: PUSH
19055: FOR_DOWNTO
19056: IFFALSE 19217
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
19058: LD_EXP 68
19062: PUSH
19063: LD_VAR 0 6
19067: ARRAY
19068: PUSH
19069: LD_VAR 0 5
19073: ARRAY
19074: PUSH
19075: LD_INT 1
19077: ARRAY
19078: PUSH
19079: LD_VAR 0 2
19083: EQUAL
19084: PUSH
19085: LD_EXP 68
19089: PUSH
19090: LD_VAR 0 6
19094: ARRAY
19095: PUSH
19096: LD_VAR 0 5
19100: ARRAY
19101: PUSH
19102: LD_INT 2
19104: ARRAY
19105: PUSH
19106: LD_VAR 0 3
19110: EQUAL
19111: AND
19112: IFFALSE 19215
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
19114: LD_EXP 68
19118: PUSH
19119: LD_VAR 0 6
19123: ARRAY
19124: PUSH
19125: LD_VAR 0 5
19129: ARRAY
19130: PUSH
19131: LD_INT 1
19133: ARRAY
19134: PPUSH
19135: LD_EXP 68
19139: PUSH
19140: LD_VAR 0 6
19144: ARRAY
19145: PUSH
19146: LD_VAR 0 5
19150: ARRAY
19151: PUSH
19152: LD_INT 2
19154: ARRAY
19155: PPUSH
19156: LD_VAR 0 1
19160: PPUSH
19161: CALL_OW 255
19165: PPUSH
19166: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
19170: LD_ADDR_EXP 68
19174: PUSH
19175: LD_EXP 68
19179: PPUSH
19180: LD_VAR 0 6
19184: PPUSH
19185: LD_EXP 68
19189: PUSH
19190: LD_VAR 0 6
19194: ARRAY
19195: PPUSH
19196: LD_VAR 0 5
19200: PPUSH
19201: CALL_OW 3
19205: PPUSH
19206: CALL_OW 1
19210: ST_TO_ADDR
// exit ;
19211: POP
19212: POP
19213: GO 19406
// end ; end ;
19215: GO 19055
19217: POP
19218: POP
// for i := minerMinesList [ index ] downto 1 do
19219: LD_ADDR_VAR 0 5
19223: PUSH
19224: DOUBLE
19225: LD_EXP 68
19229: PUSH
19230: LD_VAR 0 6
19234: ARRAY
19235: INC
19236: ST_TO_ADDR
19237: LD_INT 1
19239: PUSH
19240: FOR_DOWNTO
19241: IFFALSE 19404
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
19243: LD_EXP 68
19247: PUSH
19248: LD_VAR 0 6
19252: ARRAY
19253: PUSH
19254: LD_VAR 0 5
19258: ARRAY
19259: PUSH
19260: LD_INT 1
19262: ARRAY
19263: PPUSH
19264: LD_EXP 68
19268: PUSH
19269: LD_VAR 0 6
19273: ARRAY
19274: PUSH
19275: LD_VAR 0 5
19279: ARRAY
19280: PUSH
19281: LD_INT 2
19283: ARRAY
19284: PPUSH
19285: LD_VAR 0 2
19289: PPUSH
19290: LD_VAR 0 3
19294: PPUSH
19295: CALL_OW 298
19299: PUSH
19300: LD_INT 6
19302: LESS
19303: IFFALSE 19402
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
19305: LD_EXP 68
19309: PUSH
19310: LD_VAR 0 6
19314: ARRAY
19315: PUSH
19316: LD_VAR 0 5
19320: ARRAY
19321: PUSH
19322: LD_INT 1
19324: ARRAY
19325: PPUSH
19326: LD_EXP 68
19330: PUSH
19331: LD_VAR 0 6
19335: ARRAY
19336: PUSH
19337: LD_VAR 0 5
19341: ARRAY
19342: PUSH
19343: LD_INT 2
19345: ARRAY
19346: PPUSH
19347: LD_VAR 0 1
19351: PPUSH
19352: CALL_OW 255
19356: PPUSH
19357: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
19361: LD_ADDR_EXP 68
19365: PUSH
19366: LD_EXP 68
19370: PPUSH
19371: LD_VAR 0 6
19375: PPUSH
19376: LD_EXP 68
19380: PUSH
19381: LD_VAR 0 6
19385: ARRAY
19386: PPUSH
19387: LD_VAR 0 5
19391: PPUSH
19392: CALL_OW 3
19396: PPUSH
19397: CALL_OW 1
19401: ST_TO_ADDR
// end ; end ;
19402: GO 19240
19404: POP
19405: POP
// end ;
19406: LD_VAR 0 4
19410: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
19411: LD_INT 0
19413: PPUSH
19414: PPUSH
19415: PPUSH
19416: PPUSH
19417: PPUSH
19418: PPUSH
19419: PPUSH
19420: PPUSH
19421: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
19422: LD_VAR 0 1
19426: PPUSH
19427: CALL_OW 264
19431: PUSH
19432: LD_EXP 77
19436: EQUAL
19437: NOT
19438: PUSH
19439: LD_VAR 0 1
19443: PUSH
19444: LD_EXP 67
19448: IN
19449: NOT
19450: OR
19451: IFFALSE 19455
// exit ;
19453: GO 19777
// index := GetElementIndex ( minersList , unit ) ;
19455: LD_ADDR_VAR 0 6
19459: PUSH
19460: LD_EXP 67
19464: PPUSH
19465: LD_VAR 0 1
19469: PPUSH
19470: CALL 25459 0 2
19474: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
19475: LD_ADDR_VAR 0 8
19479: PUSH
19480: LD_EXP 69
19484: PUSH
19485: LD_EXP 68
19489: PUSH
19490: LD_VAR 0 6
19494: ARRAY
19495: MINUS
19496: ST_TO_ADDR
// if not minesFreeAmount then
19497: LD_VAR 0 8
19501: NOT
19502: IFFALSE 19506
// exit ;
19504: GO 19777
// tmp := [ ] ;
19506: LD_ADDR_VAR 0 7
19510: PUSH
19511: EMPTY
19512: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
19513: LD_ADDR_VAR 0 5
19517: PUSH
19518: DOUBLE
19519: LD_INT 1
19521: DEC
19522: ST_TO_ADDR
19523: LD_VAR 0 8
19527: PUSH
19528: FOR_TO
19529: IFFALSE 19724
// begin _d := rand ( 0 , 5 ) ;
19531: LD_ADDR_VAR 0 11
19535: PUSH
19536: LD_INT 0
19538: PPUSH
19539: LD_INT 5
19541: PPUSH
19542: CALL_OW 12
19546: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
19547: LD_ADDR_VAR 0 12
19551: PUSH
19552: LD_INT 2
19554: PPUSH
19555: LD_INT 6
19557: PPUSH
19558: CALL_OW 12
19562: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
19563: LD_ADDR_VAR 0 9
19567: PUSH
19568: LD_VAR 0 2
19572: PPUSH
19573: LD_VAR 0 11
19577: PPUSH
19578: LD_VAR 0 12
19582: PPUSH
19583: CALL_OW 272
19587: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
19588: LD_ADDR_VAR 0 10
19592: PUSH
19593: LD_VAR 0 3
19597: PPUSH
19598: LD_VAR 0 11
19602: PPUSH
19603: LD_VAR 0 12
19607: PPUSH
19608: CALL_OW 273
19612: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
19613: LD_VAR 0 9
19617: PPUSH
19618: LD_VAR 0 10
19622: PPUSH
19623: CALL_OW 488
19627: PUSH
19628: LD_VAR 0 9
19632: PUSH
19633: LD_VAR 0 10
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: LD_VAR 0 7
19646: IN
19647: NOT
19648: AND
19649: PUSH
19650: LD_VAR 0 9
19654: PPUSH
19655: LD_VAR 0 10
19659: PPUSH
19660: CALL_OW 458
19664: NOT
19665: AND
19666: IFFALSE 19708
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
19668: LD_ADDR_VAR 0 7
19672: PUSH
19673: LD_VAR 0 7
19677: PPUSH
19678: LD_VAR 0 7
19682: PUSH
19683: LD_INT 1
19685: PLUS
19686: PPUSH
19687: LD_VAR 0 9
19691: PUSH
19692: LD_VAR 0 10
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PPUSH
19701: CALL_OW 1
19705: ST_TO_ADDR
19706: GO 19722
// i := i - 1 ;
19708: LD_ADDR_VAR 0 5
19712: PUSH
19713: LD_VAR 0 5
19717: PUSH
19718: LD_INT 1
19720: MINUS
19721: ST_TO_ADDR
// end ;
19722: GO 19528
19724: POP
19725: POP
// for i in tmp do
19726: LD_ADDR_VAR 0 5
19730: PUSH
19731: LD_VAR 0 7
19735: PUSH
19736: FOR_IN
19737: IFFALSE 19775
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
19739: LD_VAR 0 1
19743: PPUSH
19744: LD_VAR 0 5
19748: PUSH
19749: LD_INT 1
19751: ARRAY
19752: PPUSH
19753: LD_VAR 0 5
19757: PUSH
19758: LD_INT 2
19760: ARRAY
19761: PPUSH
19762: CALL 18717 0 3
19766: NOT
19767: IFFALSE 19773
// exit ;
19769: POP
19770: POP
19771: GO 19777
19773: GO 19736
19775: POP
19776: POP
// end ;
19777: LD_VAR 0 4
19781: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
19782: LD_INT 0
19784: PPUSH
19785: PPUSH
19786: PPUSH
19787: PPUSH
19788: PPUSH
19789: PPUSH
19790: PPUSH
// if not GetClass ( unit ) = class_sniper then
19791: LD_VAR 0 1
19795: PPUSH
19796: CALL_OW 257
19800: PUSH
19801: LD_INT 5
19803: EQUAL
19804: NOT
19805: IFFALSE 19809
// exit ;
19807: GO 20197
// dist := 8 ;
19809: LD_ADDR_VAR 0 5
19813: PUSH
19814: LD_INT 8
19816: ST_TO_ADDR
// viewRange := 12 ;
19817: LD_ADDR_VAR 0 7
19821: PUSH
19822: LD_INT 12
19824: ST_TO_ADDR
// side := GetSide ( unit ) ;
19825: LD_ADDR_VAR 0 6
19829: PUSH
19830: LD_VAR 0 1
19834: PPUSH
19835: CALL_OW 255
19839: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
19840: LD_INT 61
19842: PPUSH
19843: LD_VAR 0 6
19847: PPUSH
19848: CALL_OW 321
19852: PUSH
19853: LD_INT 2
19855: EQUAL
19856: IFFALSE 19866
// viewRange := 16 ;
19858: LD_ADDR_VAR 0 7
19862: PUSH
19863: LD_INT 16
19865: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
19866: LD_VAR 0 1
19870: PPUSH
19871: LD_VAR 0 2
19875: PPUSH
19876: LD_VAR 0 3
19880: PPUSH
19881: CALL_OW 297
19885: PUSH
19886: LD_VAR 0 5
19890: GREATER
19891: IFFALSE 19970
// begin ComMoveXY ( unit , x , y ) ;
19893: LD_VAR 0 1
19897: PPUSH
19898: LD_VAR 0 2
19902: PPUSH
19903: LD_VAR 0 3
19907: PPUSH
19908: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19912: LD_INT 35
19914: PPUSH
19915: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
19919: LD_VAR 0 1
19923: PPUSH
19924: LD_VAR 0 2
19928: PPUSH
19929: LD_VAR 0 3
19933: PPUSH
19934: CALL 56178 0 3
19938: NOT
19939: IFFALSE 19943
// exit ;
19941: GO 20197
// until GetDistUnitXY ( unit , x , y ) < dist ;
19943: LD_VAR 0 1
19947: PPUSH
19948: LD_VAR 0 2
19952: PPUSH
19953: LD_VAR 0 3
19957: PPUSH
19958: CALL_OW 297
19962: PUSH
19963: LD_VAR 0 5
19967: LESS
19968: IFFALSE 19912
// end ; ComTurnXY ( unit , x , y ) ;
19970: LD_VAR 0 1
19974: PPUSH
19975: LD_VAR 0 2
19979: PPUSH
19980: LD_VAR 0 3
19984: PPUSH
19985: CALL_OW 118
// wait ( 5 ) ;
19989: LD_INT 5
19991: PPUSH
19992: CALL_OW 67
// _d := GetDir ( unit ) ;
19996: LD_ADDR_VAR 0 10
20000: PUSH
20001: LD_VAR 0 1
20005: PPUSH
20006: CALL_OW 254
20010: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
20011: LD_ADDR_VAR 0 8
20015: PUSH
20016: LD_VAR 0 1
20020: PPUSH
20021: CALL_OW 250
20025: PPUSH
20026: LD_VAR 0 10
20030: PPUSH
20031: LD_VAR 0 5
20035: PPUSH
20036: CALL_OW 272
20040: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
20041: LD_ADDR_VAR 0 9
20045: PUSH
20046: LD_VAR 0 1
20050: PPUSH
20051: CALL_OW 251
20055: PPUSH
20056: LD_VAR 0 10
20060: PPUSH
20061: LD_VAR 0 5
20065: PPUSH
20066: CALL_OW 273
20070: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20071: LD_VAR 0 8
20075: PPUSH
20076: LD_VAR 0 9
20080: PPUSH
20081: CALL_OW 488
20085: NOT
20086: IFFALSE 20090
// exit ;
20088: GO 20197
// ComAnimCustom ( unit , 1 ) ;
20090: LD_VAR 0 1
20094: PPUSH
20095: LD_INT 1
20097: PPUSH
20098: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
20102: LD_VAR 0 8
20106: PPUSH
20107: LD_VAR 0 9
20111: PPUSH
20112: LD_VAR 0 6
20116: PPUSH
20117: LD_VAR 0 7
20121: PPUSH
20122: CALL_OW 330
// repeat wait ( 1 ) ;
20126: LD_INT 1
20128: PPUSH
20129: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
20133: LD_VAR 0 1
20137: PPUSH
20138: CALL_OW 316
20142: PUSH
20143: LD_VAR 0 1
20147: PPUSH
20148: CALL_OW 314
20152: OR
20153: PUSH
20154: LD_VAR 0 1
20158: PPUSH
20159: CALL_OW 302
20163: NOT
20164: OR
20165: PUSH
20166: LD_VAR 0 1
20170: PPUSH
20171: CALL_OW 301
20175: OR
20176: IFFALSE 20126
// RemoveSeeing ( _x , _y , side ) ;
20178: LD_VAR 0 8
20182: PPUSH
20183: LD_VAR 0 9
20187: PPUSH
20188: LD_VAR 0 6
20192: PPUSH
20193: CALL_OW 331
// end ; end_of_file
20197: LD_VAR 0 4
20201: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
20202: LD_VAR 0 1
20206: PPUSH
20207: LD_VAR 0 2
20211: PPUSH
20212: LD_VAR 0 3
20216: PPUSH
20217: LD_VAR 0 4
20221: PPUSH
20222: LD_VAR 0 5
20226: PPUSH
20227: LD_VAR 0 6
20231: PPUSH
20232: CALL 1275 0 6
// end ;
20236: PPOPN 6
20238: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
20239: LD_INT 0
20241: PPUSH
// begin if not units then
20242: LD_VAR 0 1
20246: NOT
20247: IFFALSE 20251
// exit ;
20249: GO 20339
// if p1 = 1 then
20251: LD_VAR 0 2
20255: PUSH
20256: LD_INT 1
20258: EQUAL
20259: IFFALSE 20339
// begin if p2 = 1 then
20261: LD_VAR 0 3
20265: PUSH
20266: LD_INT 1
20268: EQUAL
20269: IFFALSE 20300
// begin for i in units do
20271: LD_ADDR_VAR 0 7
20275: PUSH
20276: LD_VAR 0 1
20280: PUSH
20281: FOR_IN
20282: IFFALSE 20298
// begin SetUnitAttackType ( i , 3 ) ;
20284: LD_VAR 0 7
20288: PPUSH
20289: LD_INT 3
20291: PPUSH
20292: CALL_OW 603
// end ;
20296: GO 20281
20298: POP
20299: POP
// end ; if p2 = 2 then
20300: LD_VAR 0 3
20304: PUSH
20305: LD_INT 2
20307: EQUAL
20308: IFFALSE 20339
// begin for i in units do
20310: LD_ADDR_VAR 0 7
20314: PUSH
20315: LD_VAR 0 1
20319: PUSH
20320: FOR_IN
20321: IFFALSE 20337
// begin SetUnitAttackType ( i , 1 ) ;
20323: LD_VAR 0 7
20327: PPUSH
20328: LD_INT 1
20330: PPUSH
20331: CALL_OW 603
// end ;
20335: GO 20320
20337: POP
20338: POP
// end ; end ; end ;
20339: PPOPN 7
20341: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
20342: CALL 1250 0 0
// end ; end_of_file
20346: PPOPN 1
20348: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
20349: LD_VAR 0 1
20353: PUSH
20354: LD_INT 200
20356: DOUBLE
20357: GREATEREQUAL
20358: IFFALSE 20366
20360: LD_INT 299
20362: DOUBLE
20363: LESSEQUAL
20364: IFTRUE 20368
20366: GO 20400
20368: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
20369: LD_VAR 0 1
20373: PPUSH
20374: LD_VAR 0 2
20378: PPUSH
20379: LD_VAR 0 3
20383: PPUSH
20384: LD_VAR 0 4
20388: PPUSH
20389: LD_VAR 0 5
20393: PPUSH
20394: CALL 15940 0 5
20398: GO 20477
20400: LD_INT 300
20402: DOUBLE
20403: GREATEREQUAL
20404: IFFALSE 20412
20406: LD_INT 399
20408: DOUBLE
20409: LESSEQUAL
20410: IFTRUE 20414
20412: GO 20476
20414: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
20415: LD_VAR 0 1
20419: PPUSH
20420: LD_VAR 0 2
20424: PPUSH
20425: LD_VAR 0 3
20429: PPUSH
20430: LD_VAR 0 4
20434: PPUSH
20435: LD_VAR 0 5
20439: PPUSH
20440: LD_VAR 0 6
20444: PPUSH
20445: LD_VAR 0 7
20449: PPUSH
20450: LD_VAR 0 8
20454: PPUSH
20455: LD_VAR 0 9
20459: PPUSH
20460: LD_VAR 0 10
20464: PPUSH
20465: LD_VAR 0 11
20469: PPUSH
20470: CALL 13582 0 11
20474: GO 20477
20476: POP
// end ;
20477: PPOPN 11
20479: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
20480: LD_VAR 0 1
20484: PPUSH
20485: LD_VAR 0 2
20489: PPUSH
20490: LD_VAR 0 3
20494: PPUSH
20495: LD_VAR 0 4
20499: PPUSH
20500: LD_VAR 0 5
20504: PPUSH
20505: CALL 15676 0 5
// end ; end_of_file
20509: PPOPN 5
20511: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
20512: LD_INT 0
20514: PPUSH
// ar_miner := 81 ;
20515: LD_ADDR_EXP 77
20519: PUSH
20520: LD_INT 81
20522: ST_TO_ADDR
// ar_crane := 88 ;
20523: LD_ADDR_EXP 76
20527: PUSH
20528: LD_INT 88
20530: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
20531: LD_ADDR_EXP 71
20535: PUSH
20536: LD_INT 89
20538: ST_TO_ADDR
// us_hack := 99 ;
20539: LD_ADDR_EXP 72
20543: PUSH
20544: LD_INT 99
20546: ST_TO_ADDR
// us_artillery := 97 ;
20547: LD_ADDR_EXP 73
20551: PUSH
20552: LD_INT 97
20554: ST_TO_ADDR
// ar_bio_bomb := 91 ;
20555: LD_ADDR_EXP 74
20559: PUSH
20560: LD_INT 91
20562: ST_TO_ADDR
// ar_mortar := 92 ;
20563: LD_ADDR_EXP 75
20567: PUSH
20568: LD_INT 92
20570: ST_TO_ADDR
// ru_flamethrower := 93 ;
20571: LD_ADDR_EXP 78
20575: PUSH
20576: LD_INT 93
20578: ST_TO_ADDR
// ru_radar := 98 ;
20579: LD_ADDR_EXP 70
20583: PUSH
20584: LD_INT 98
20586: ST_TO_ADDR
// tech_Artillery := 80 ;
20587: LD_ADDR_EXP 79
20591: PUSH
20592: LD_INT 80
20594: ST_TO_ADDR
// tech_RadMat := 81 ;
20595: LD_ADDR_EXP 80
20599: PUSH
20600: LD_INT 81
20602: ST_TO_ADDR
// tech_BasicTools := 82 ;
20603: LD_ADDR_EXP 81
20607: PUSH
20608: LD_INT 82
20610: ST_TO_ADDR
// tech_Cargo := 83 ;
20611: LD_ADDR_EXP 82
20615: PUSH
20616: LD_INT 83
20618: ST_TO_ADDR
// tech_Track := 84 ;
20619: LD_ADDR_EXP 83
20623: PUSH
20624: LD_INT 84
20626: ST_TO_ADDR
// tech_Crane := 85 ;
20627: LD_ADDR_EXP 84
20631: PUSH
20632: LD_INT 85
20634: ST_TO_ADDR
// tech_Bulldozer := 86 ;
20635: LD_ADDR_EXP 85
20639: PUSH
20640: LD_INT 86
20642: ST_TO_ADDR
// tech_Hovercraft := 87 ;
20643: LD_ADDR_EXP 86
20647: PUSH
20648: LD_INT 87
20650: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
20651: LD_ADDR_EXP 87
20655: PUSH
20656: LD_INT 88
20658: ST_TO_ADDR
// class_mastodont := 31 ;
20659: LD_ADDR_EXP 88
20663: PUSH
20664: LD_INT 31
20666: ST_TO_ADDR
// class_horse := 21 ;
20667: LD_ADDR_EXP 89
20671: PUSH
20672: LD_INT 21
20674: ST_TO_ADDR
// end ;
20675: LD_VAR 0 1
20679: RET
// every 1 do
20680: GO 20682
20682: DISABLE
// InitGlobalVariables ; end_of_file
20683: CALL 20512 0 0
20687: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20688: LD_INT 0
20690: PPUSH
20691: PPUSH
// if exist_mode then
20692: LD_VAR 0 2
20696: IFFALSE 20721
// unit := CreateCharacter ( prefix & ident ) else
20698: LD_ADDR_VAR 0 5
20702: PUSH
20703: LD_VAR 0 3
20707: PUSH
20708: LD_VAR 0 1
20712: STR
20713: PPUSH
20714: CALL_OW 34
20718: ST_TO_ADDR
20719: GO 20736
// unit := NewCharacter ( ident ) ;
20721: LD_ADDR_VAR 0 5
20725: PUSH
20726: LD_VAR 0 1
20730: PPUSH
20731: CALL_OW 25
20735: ST_TO_ADDR
// result := unit ;
20736: LD_ADDR_VAR 0 4
20740: PUSH
20741: LD_VAR 0 5
20745: ST_TO_ADDR
// end ;
20746: LD_VAR 0 4
20750: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20751: LD_INT 0
20753: PPUSH
20754: PPUSH
// if not side or not nation then
20755: LD_VAR 0 1
20759: NOT
20760: PUSH
20761: LD_VAR 0 2
20765: NOT
20766: OR
20767: IFFALSE 20771
// exit ;
20769: GO 21539
// case nation of nation_american :
20771: LD_VAR 0 2
20775: PUSH
20776: LD_INT 1
20778: DOUBLE
20779: EQUAL
20780: IFTRUE 20784
20782: GO 20998
20784: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20785: LD_ADDR_VAR 0 4
20789: PUSH
20790: LD_INT 35
20792: PUSH
20793: LD_INT 45
20795: PUSH
20796: LD_INT 46
20798: PUSH
20799: LD_INT 47
20801: PUSH
20802: LD_INT 82
20804: PUSH
20805: LD_INT 83
20807: PUSH
20808: LD_INT 84
20810: PUSH
20811: LD_INT 85
20813: PUSH
20814: LD_INT 86
20816: PUSH
20817: LD_INT 1
20819: PUSH
20820: LD_INT 2
20822: PUSH
20823: LD_INT 6
20825: PUSH
20826: LD_INT 15
20828: PUSH
20829: LD_INT 16
20831: PUSH
20832: LD_INT 7
20834: PUSH
20835: LD_INT 12
20837: PUSH
20838: LD_INT 13
20840: PUSH
20841: LD_INT 10
20843: PUSH
20844: LD_INT 14
20846: PUSH
20847: LD_INT 20
20849: PUSH
20850: LD_INT 21
20852: PUSH
20853: LD_INT 22
20855: PUSH
20856: LD_INT 25
20858: PUSH
20859: LD_INT 32
20861: PUSH
20862: LD_INT 27
20864: PUSH
20865: LD_INT 36
20867: PUSH
20868: LD_INT 69
20870: PUSH
20871: LD_INT 39
20873: PUSH
20874: LD_INT 34
20876: PUSH
20877: LD_INT 40
20879: PUSH
20880: LD_INT 48
20882: PUSH
20883: LD_INT 49
20885: PUSH
20886: LD_INT 50
20888: PUSH
20889: LD_INT 51
20891: PUSH
20892: LD_INT 52
20894: PUSH
20895: LD_INT 53
20897: PUSH
20898: LD_INT 54
20900: PUSH
20901: LD_INT 55
20903: PUSH
20904: LD_INT 56
20906: PUSH
20907: LD_INT 57
20909: PUSH
20910: LD_INT 58
20912: PUSH
20913: LD_INT 59
20915: PUSH
20916: LD_INT 60
20918: PUSH
20919: LD_INT 61
20921: PUSH
20922: LD_INT 62
20924: PUSH
20925: LD_INT 80
20927: PUSH
20928: LD_INT 82
20930: PUSH
20931: LD_INT 83
20933: PUSH
20934: LD_INT 84
20936: PUSH
20937: LD_INT 85
20939: PUSH
20940: LD_INT 86
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: ST_TO_ADDR
20996: GO 21463
20998: LD_INT 2
21000: DOUBLE
21001: EQUAL
21002: IFTRUE 21006
21004: GO 21232
21006: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21007: LD_ADDR_VAR 0 4
21011: PUSH
21012: LD_INT 35
21014: PUSH
21015: LD_INT 45
21017: PUSH
21018: LD_INT 46
21020: PUSH
21021: LD_INT 47
21023: PUSH
21024: LD_INT 82
21026: PUSH
21027: LD_INT 83
21029: PUSH
21030: LD_INT 84
21032: PUSH
21033: LD_INT 85
21035: PUSH
21036: LD_INT 87
21038: PUSH
21039: LD_INT 70
21041: PUSH
21042: LD_INT 1
21044: PUSH
21045: LD_INT 11
21047: PUSH
21048: LD_INT 3
21050: PUSH
21051: LD_INT 4
21053: PUSH
21054: LD_INT 5
21056: PUSH
21057: LD_INT 6
21059: PUSH
21060: LD_INT 15
21062: PUSH
21063: LD_INT 18
21065: PUSH
21066: LD_INT 7
21068: PUSH
21069: LD_INT 17
21071: PUSH
21072: LD_INT 8
21074: PUSH
21075: LD_INT 20
21077: PUSH
21078: LD_INT 21
21080: PUSH
21081: LD_INT 22
21083: PUSH
21084: LD_INT 72
21086: PUSH
21087: LD_INT 26
21089: PUSH
21090: LD_INT 69
21092: PUSH
21093: LD_INT 39
21095: PUSH
21096: LD_INT 40
21098: PUSH
21099: LD_INT 41
21101: PUSH
21102: LD_INT 42
21104: PUSH
21105: LD_INT 43
21107: PUSH
21108: LD_INT 48
21110: PUSH
21111: LD_INT 49
21113: PUSH
21114: LD_INT 50
21116: PUSH
21117: LD_INT 51
21119: PUSH
21120: LD_INT 52
21122: PUSH
21123: LD_INT 53
21125: PUSH
21126: LD_INT 54
21128: PUSH
21129: LD_INT 55
21131: PUSH
21132: LD_INT 56
21134: PUSH
21135: LD_INT 60
21137: PUSH
21138: LD_INT 61
21140: PUSH
21141: LD_INT 62
21143: PUSH
21144: LD_INT 66
21146: PUSH
21147: LD_INT 67
21149: PUSH
21150: LD_INT 68
21152: PUSH
21153: LD_INT 81
21155: PUSH
21156: LD_INT 82
21158: PUSH
21159: LD_INT 83
21161: PUSH
21162: LD_INT 84
21164: PUSH
21165: LD_INT 85
21167: PUSH
21168: LD_INT 87
21170: PUSH
21171: LD_INT 88
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: ST_TO_ADDR
21230: GO 21463
21232: LD_INT 3
21234: DOUBLE
21235: EQUAL
21236: IFTRUE 21240
21238: GO 21462
21240: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21241: LD_ADDR_VAR 0 4
21245: PUSH
21246: LD_INT 46
21248: PUSH
21249: LD_INT 47
21251: PUSH
21252: LD_INT 1
21254: PUSH
21255: LD_INT 2
21257: PUSH
21258: LD_INT 82
21260: PUSH
21261: LD_INT 83
21263: PUSH
21264: LD_INT 84
21266: PUSH
21267: LD_INT 85
21269: PUSH
21270: LD_INT 86
21272: PUSH
21273: LD_INT 11
21275: PUSH
21276: LD_INT 9
21278: PUSH
21279: LD_INT 20
21281: PUSH
21282: LD_INT 19
21284: PUSH
21285: LD_INT 21
21287: PUSH
21288: LD_INT 24
21290: PUSH
21291: LD_INT 22
21293: PUSH
21294: LD_INT 25
21296: PUSH
21297: LD_INT 28
21299: PUSH
21300: LD_INT 29
21302: PUSH
21303: LD_INT 30
21305: PUSH
21306: LD_INT 31
21308: PUSH
21309: LD_INT 37
21311: PUSH
21312: LD_INT 38
21314: PUSH
21315: LD_INT 32
21317: PUSH
21318: LD_INT 27
21320: PUSH
21321: LD_INT 33
21323: PUSH
21324: LD_INT 69
21326: PUSH
21327: LD_INT 39
21329: PUSH
21330: LD_INT 34
21332: PUSH
21333: LD_INT 40
21335: PUSH
21336: LD_INT 71
21338: PUSH
21339: LD_INT 23
21341: PUSH
21342: LD_INT 44
21344: PUSH
21345: LD_INT 48
21347: PUSH
21348: LD_INT 49
21350: PUSH
21351: LD_INT 50
21353: PUSH
21354: LD_INT 51
21356: PUSH
21357: LD_INT 52
21359: PUSH
21360: LD_INT 53
21362: PUSH
21363: LD_INT 54
21365: PUSH
21366: LD_INT 55
21368: PUSH
21369: LD_INT 56
21371: PUSH
21372: LD_INT 57
21374: PUSH
21375: LD_INT 58
21377: PUSH
21378: LD_INT 59
21380: PUSH
21381: LD_INT 63
21383: PUSH
21384: LD_INT 64
21386: PUSH
21387: LD_INT 65
21389: PUSH
21390: LD_INT 82
21392: PUSH
21393: LD_INT 83
21395: PUSH
21396: LD_INT 84
21398: PUSH
21399: LD_INT 85
21401: PUSH
21402: LD_INT 86
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: ST_TO_ADDR
21460: GO 21463
21462: POP
// if state > - 1 and state < 3 then
21463: LD_VAR 0 3
21467: PUSH
21468: LD_INT 1
21470: NEG
21471: GREATER
21472: PUSH
21473: LD_VAR 0 3
21477: PUSH
21478: LD_INT 3
21480: LESS
21481: AND
21482: IFFALSE 21539
// for i in result do
21484: LD_ADDR_VAR 0 5
21488: PUSH
21489: LD_VAR 0 4
21493: PUSH
21494: FOR_IN
21495: IFFALSE 21537
// if GetTech ( i , side ) <> state then
21497: LD_VAR 0 5
21501: PPUSH
21502: LD_VAR 0 1
21506: PPUSH
21507: CALL_OW 321
21511: PUSH
21512: LD_VAR 0 3
21516: NONEQUAL
21517: IFFALSE 21535
// result := result diff i ;
21519: LD_ADDR_VAR 0 4
21523: PUSH
21524: LD_VAR 0 4
21528: PUSH
21529: LD_VAR 0 5
21533: DIFF
21534: ST_TO_ADDR
21535: GO 21494
21537: POP
21538: POP
// end ;
21539: LD_VAR 0 4
21543: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21544: LD_INT 0
21546: PPUSH
21547: PPUSH
21548: PPUSH
// result := true ;
21549: LD_ADDR_VAR 0 3
21553: PUSH
21554: LD_INT 1
21556: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21557: LD_ADDR_VAR 0 5
21561: PUSH
21562: LD_VAR 0 2
21566: PPUSH
21567: CALL_OW 480
21571: ST_TO_ADDR
// if not tmp then
21572: LD_VAR 0 5
21576: NOT
21577: IFFALSE 21581
// exit ;
21579: GO 21630
// for i in tmp do
21581: LD_ADDR_VAR 0 4
21585: PUSH
21586: LD_VAR 0 5
21590: PUSH
21591: FOR_IN
21592: IFFALSE 21628
// if GetTech ( i , side ) <> state_researched then
21594: LD_VAR 0 4
21598: PPUSH
21599: LD_VAR 0 1
21603: PPUSH
21604: CALL_OW 321
21608: PUSH
21609: LD_INT 2
21611: NONEQUAL
21612: IFFALSE 21626
// begin result := false ;
21614: LD_ADDR_VAR 0 3
21618: PUSH
21619: LD_INT 0
21621: ST_TO_ADDR
// exit ;
21622: POP
21623: POP
21624: GO 21630
// end ;
21626: GO 21591
21628: POP
21629: POP
// end ;
21630: LD_VAR 0 3
21634: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21635: LD_INT 0
21637: PPUSH
21638: PPUSH
21639: PPUSH
21640: PPUSH
21641: PPUSH
21642: PPUSH
21643: PPUSH
21644: PPUSH
21645: PPUSH
21646: PPUSH
21647: PPUSH
21648: PPUSH
21649: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21650: LD_VAR 0 1
21654: NOT
21655: PUSH
21656: LD_VAR 0 1
21660: PPUSH
21661: CALL_OW 257
21665: PUSH
21666: LD_INT 9
21668: NONEQUAL
21669: OR
21670: IFFALSE 21674
// exit ;
21672: GO 22247
// side := GetSide ( unit ) ;
21674: LD_ADDR_VAR 0 9
21678: PUSH
21679: LD_VAR 0 1
21683: PPUSH
21684: CALL_OW 255
21688: ST_TO_ADDR
// tech_space := tech_spacanom ;
21689: LD_ADDR_VAR 0 12
21693: PUSH
21694: LD_INT 29
21696: ST_TO_ADDR
// tech_time := tech_taurad ;
21697: LD_ADDR_VAR 0 13
21701: PUSH
21702: LD_INT 28
21704: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21705: LD_ADDR_VAR 0 11
21709: PUSH
21710: LD_VAR 0 1
21714: PPUSH
21715: CALL_OW 310
21719: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21720: LD_VAR 0 11
21724: PPUSH
21725: CALL_OW 247
21729: PUSH
21730: LD_INT 2
21732: EQUAL
21733: IFFALSE 21737
// exit ;
21735: GO 22247
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21737: LD_ADDR_VAR 0 8
21741: PUSH
21742: LD_INT 81
21744: PUSH
21745: LD_VAR 0 9
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: LD_INT 3
21756: PUSH
21757: LD_INT 21
21759: PUSH
21760: LD_INT 3
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PPUSH
21775: CALL_OW 69
21779: ST_TO_ADDR
// if not tmp then
21780: LD_VAR 0 8
21784: NOT
21785: IFFALSE 21789
// exit ;
21787: GO 22247
// if in_unit then
21789: LD_VAR 0 11
21793: IFFALSE 21817
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21795: LD_ADDR_VAR 0 10
21799: PUSH
21800: LD_VAR 0 8
21804: PPUSH
21805: LD_VAR 0 11
21809: PPUSH
21810: CALL_OW 74
21814: ST_TO_ADDR
21815: GO 21837
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21817: LD_ADDR_VAR 0 10
21821: PUSH
21822: LD_VAR 0 8
21826: PPUSH
21827: LD_VAR 0 1
21831: PPUSH
21832: CALL_OW 74
21836: ST_TO_ADDR
// if not enemy then
21837: LD_VAR 0 10
21841: NOT
21842: IFFALSE 21846
// exit ;
21844: GO 22247
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21846: LD_VAR 0 11
21850: PUSH
21851: LD_VAR 0 11
21855: PPUSH
21856: LD_VAR 0 10
21860: PPUSH
21861: CALL_OW 296
21865: PUSH
21866: LD_INT 13
21868: GREATER
21869: AND
21870: PUSH
21871: LD_VAR 0 1
21875: PPUSH
21876: LD_VAR 0 10
21880: PPUSH
21881: CALL_OW 296
21885: PUSH
21886: LD_INT 12
21888: GREATER
21889: OR
21890: IFFALSE 21894
// exit ;
21892: GO 22247
// missile := [ 1 ] ;
21894: LD_ADDR_VAR 0 14
21898: PUSH
21899: LD_INT 1
21901: PUSH
21902: EMPTY
21903: LIST
21904: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21905: LD_VAR 0 9
21909: PPUSH
21910: LD_VAR 0 12
21914: PPUSH
21915: CALL_OW 325
21919: IFFALSE 21948
// missile := Replace ( missile , missile + 1 , 2 ) ;
21921: LD_ADDR_VAR 0 14
21925: PUSH
21926: LD_VAR 0 14
21930: PPUSH
21931: LD_VAR 0 14
21935: PUSH
21936: LD_INT 1
21938: PLUS
21939: PPUSH
21940: LD_INT 2
21942: PPUSH
21943: CALL_OW 1
21947: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21948: LD_VAR 0 9
21952: PPUSH
21953: LD_VAR 0 13
21957: PPUSH
21958: CALL_OW 325
21962: PUSH
21963: LD_VAR 0 10
21967: PPUSH
21968: CALL_OW 255
21972: PPUSH
21973: LD_VAR 0 13
21977: PPUSH
21978: CALL_OW 325
21982: NOT
21983: AND
21984: IFFALSE 22013
// missile := Replace ( missile , missile + 1 , 3 ) ;
21986: LD_ADDR_VAR 0 14
21990: PUSH
21991: LD_VAR 0 14
21995: PPUSH
21996: LD_VAR 0 14
22000: PUSH
22001: LD_INT 1
22003: PLUS
22004: PPUSH
22005: LD_INT 3
22007: PPUSH
22008: CALL_OW 1
22012: ST_TO_ADDR
// if missile < 2 then
22013: LD_VAR 0 14
22017: PUSH
22018: LD_INT 2
22020: LESS
22021: IFFALSE 22025
// exit ;
22023: GO 22247
// x := GetX ( enemy ) ;
22025: LD_ADDR_VAR 0 4
22029: PUSH
22030: LD_VAR 0 10
22034: PPUSH
22035: CALL_OW 250
22039: ST_TO_ADDR
// y := GetY ( enemy ) ;
22040: LD_ADDR_VAR 0 5
22044: PUSH
22045: LD_VAR 0 10
22049: PPUSH
22050: CALL_OW 251
22054: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22055: LD_ADDR_VAR 0 6
22059: PUSH
22060: LD_VAR 0 4
22064: PUSH
22065: LD_INT 1
22067: NEG
22068: PPUSH
22069: LD_INT 1
22071: PPUSH
22072: CALL_OW 12
22076: PLUS
22077: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22078: LD_ADDR_VAR 0 7
22082: PUSH
22083: LD_VAR 0 5
22087: PUSH
22088: LD_INT 1
22090: NEG
22091: PPUSH
22092: LD_INT 1
22094: PPUSH
22095: CALL_OW 12
22099: PLUS
22100: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22101: LD_VAR 0 6
22105: PPUSH
22106: LD_VAR 0 7
22110: PPUSH
22111: CALL_OW 488
22115: NOT
22116: IFFALSE 22138
// begin _x := x ;
22118: LD_ADDR_VAR 0 6
22122: PUSH
22123: LD_VAR 0 4
22127: ST_TO_ADDR
// _y := y ;
22128: LD_ADDR_VAR 0 7
22132: PUSH
22133: LD_VAR 0 5
22137: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22138: LD_ADDR_VAR 0 3
22142: PUSH
22143: LD_INT 1
22145: PPUSH
22146: LD_VAR 0 14
22150: PPUSH
22151: CALL_OW 12
22155: ST_TO_ADDR
// case i of 1 :
22156: LD_VAR 0 3
22160: PUSH
22161: LD_INT 1
22163: DOUBLE
22164: EQUAL
22165: IFTRUE 22169
22167: GO 22186
22169: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22170: LD_VAR 0 1
22174: PPUSH
22175: LD_VAR 0 10
22179: PPUSH
22180: CALL_OW 115
22184: GO 22247
22186: LD_INT 2
22188: DOUBLE
22189: EQUAL
22190: IFTRUE 22194
22192: GO 22216
22194: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22195: LD_VAR 0 1
22199: PPUSH
22200: LD_VAR 0 6
22204: PPUSH
22205: LD_VAR 0 7
22209: PPUSH
22210: CALL_OW 153
22214: GO 22247
22216: LD_INT 3
22218: DOUBLE
22219: EQUAL
22220: IFTRUE 22224
22222: GO 22246
22224: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22225: LD_VAR 0 1
22229: PPUSH
22230: LD_VAR 0 6
22234: PPUSH
22235: LD_VAR 0 7
22239: PPUSH
22240: CALL_OW 154
22244: GO 22247
22246: POP
// end ;
22247: LD_VAR 0 2
22251: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22252: LD_INT 0
22254: PPUSH
22255: PPUSH
22256: PPUSH
22257: PPUSH
22258: PPUSH
22259: PPUSH
// if not unit or not building then
22260: LD_VAR 0 1
22264: NOT
22265: PUSH
22266: LD_VAR 0 2
22270: NOT
22271: OR
22272: IFFALSE 22276
// exit ;
22274: GO 22434
// x := GetX ( building ) ;
22276: LD_ADDR_VAR 0 5
22280: PUSH
22281: LD_VAR 0 2
22285: PPUSH
22286: CALL_OW 250
22290: ST_TO_ADDR
// y := GetY ( building ) ;
22291: LD_ADDR_VAR 0 6
22295: PUSH
22296: LD_VAR 0 2
22300: PPUSH
22301: CALL_OW 251
22305: ST_TO_ADDR
// for i = 0 to 5 do
22306: LD_ADDR_VAR 0 4
22310: PUSH
22311: DOUBLE
22312: LD_INT 0
22314: DEC
22315: ST_TO_ADDR
22316: LD_INT 5
22318: PUSH
22319: FOR_TO
22320: IFFALSE 22432
// begin _x := ShiftX ( x , i , 3 ) ;
22322: LD_ADDR_VAR 0 7
22326: PUSH
22327: LD_VAR 0 5
22331: PPUSH
22332: LD_VAR 0 4
22336: PPUSH
22337: LD_INT 3
22339: PPUSH
22340: CALL_OW 272
22344: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22345: LD_ADDR_VAR 0 8
22349: PUSH
22350: LD_VAR 0 6
22354: PPUSH
22355: LD_VAR 0 4
22359: PPUSH
22360: LD_INT 3
22362: PPUSH
22363: CALL_OW 273
22367: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22368: LD_VAR 0 7
22372: PPUSH
22373: LD_VAR 0 8
22377: PPUSH
22378: CALL_OW 488
22382: NOT
22383: IFFALSE 22387
// continue ;
22385: GO 22319
// if HexInfo ( _x , _y ) = 0 then
22387: LD_VAR 0 7
22391: PPUSH
22392: LD_VAR 0 8
22396: PPUSH
22397: CALL_OW 428
22401: PUSH
22402: LD_INT 0
22404: EQUAL
22405: IFFALSE 22430
// begin ComMoveXY ( unit , _x , _y ) ;
22407: LD_VAR 0 1
22411: PPUSH
22412: LD_VAR 0 7
22416: PPUSH
22417: LD_VAR 0 8
22421: PPUSH
22422: CALL_OW 111
// exit ;
22426: POP
22427: POP
22428: GO 22434
// end ; end ;
22430: GO 22319
22432: POP
22433: POP
// end ;
22434: LD_VAR 0 3
22438: RET
// export function ScanBase ( side , base_area ) ; begin
22439: LD_INT 0
22441: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22442: LD_ADDR_VAR 0 3
22446: PUSH
22447: LD_VAR 0 2
22451: PPUSH
22452: LD_INT 81
22454: PUSH
22455: LD_VAR 0 1
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: PPUSH
22464: CALL_OW 70
22468: ST_TO_ADDR
// end ;
22469: LD_VAR 0 3
22473: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22474: LD_INT 0
22476: PPUSH
22477: PPUSH
22478: PPUSH
22479: PPUSH
// result := false ;
22480: LD_ADDR_VAR 0 2
22484: PUSH
22485: LD_INT 0
22487: ST_TO_ADDR
// side := GetSide ( unit ) ;
22488: LD_ADDR_VAR 0 3
22492: PUSH
22493: LD_VAR 0 1
22497: PPUSH
22498: CALL_OW 255
22502: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22503: LD_ADDR_VAR 0 4
22507: PUSH
22508: LD_VAR 0 1
22512: PPUSH
22513: CALL_OW 248
22517: ST_TO_ADDR
// case nat of 1 :
22518: LD_VAR 0 4
22522: PUSH
22523: LD_INT 1
22525: DOUBLE
22526: EQUAL
22527: IFTRUE 22531
22529: GO 22542
22531: POP
// tech := tech_lassight ; 2 :
22532: LD_ADDR_VAR 0 5
22536: PUSH
22537: LD_INT 12
22539: ST_TO_ADDR
22540: GO 22581
22542: LD_INT 2
22544: DOUBLE
22545: EQUAL
22546: IFTRUE 22550
22548: GO 22561
22550: POP
// tech := tech_mortar ; 3 :
22551: LD_ADDR_VAR 0 5
22555: PUSH
22556: LD_INT 41
22558: ST_TO_ADDR
22559: GO 22581
22561: LD_INT 3
22563: DOUBLE
22564: EQUAL
22565: IFTRUE 22569
22567: GO 22580
22569: POP
// tech := tech_bazooka ; end ;
22570: LD_ADDR_VAR 0 5
22574: PUSH
22575: LD_INT 44
22577: ST_TO_ADDR
22578: GO 22581
22580: POP
// if Researched ( side , tech ) then
22581: LD_VAR 0 3
22585: PPUSH
22586: LD_VAR 0 5
22590: PPUSH
22591: CALL_OW 325
22595: IFFALSE 22622
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22597: LD_ADDR_VAR 0 2
22601: PUSH
22602: LD_INT 5
22604: PUSH
22605: LD_INT 8
22607: PUSH
22608: LD_INT 9
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: LIST
22615: PUSH
22616: LD_VAR 0 4
22620: ARRAY
22621: ST_TO_ADDR
// end ;
22622: LD_VAR 0 2
22626: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22627: LD_INT 0
22629: PPUSH
22630: PPUSH
22631: PPUSH
// if not mines then
22632: LD_VAR 0 2
22636: NOT
22637: IFFALSE 22641
// exit ;
22639: GO 22785
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22641: LD_ADDR_VAR 0 5
22645: PUSH
22646: LD_INT 81
22648: PUSH
22649: LD_VAR 0 1
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 3
22660: PUSH
22661: LD_INT 21
22663: PUSH
22664: LD_INT 3
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PPUSH
22679: CALL_OW 69
22683: ST_TO_ADDR
// for i in mines do
22684: LD_ADDR_VAR 0 4
22688: PUSH
22689: LD_VAR 0 2
22693: PUSH
22694: FOR_IN
22695: IFFALSE 22783
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22697: LD_VAR 0 4
22701: PUSH
22702: LD_INT 1
22704: ARRAY
22705: PPUSH
22706: LD_VAR 0 4
22710: PUSH
22711: LD_INT 2
22713: ARRAY
22714: PPUSH
22715: CALL_OW 458
22719: NOT
22720: IFFALSE 22724
// continue ;
22722: GO 22694
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22724: LD_VAR 0 4
22728: PUSH
22729: LD_INT 1
22731: ARRAY
22732: PPUSH
22733: LD_VAR 0 4
22737: PUSH
22738: LD_INT 2
22740: ARRAY
22741: PPUSH
22742: CALL_OW 428
22746: PUSH
22747: LD_VAR 0 5
22751: IN
22752: IFFALSE 22781
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22754: LD_VAR 0 4
22758: PUSH
22759: LD_INT 1
22761: ARRAY
22762: PPUSH
22763: LD_VAR 0 4
22767: PUSH
22768: LD_INT 2
22770: ARRAY
22771: PPUSH
22772: LD_VAR 0 1
22776: PPUSH
22777: CALL_OW 456
// end ;
22781: GO 22694
22783: POP
22784: POP
// end ;
22785: LD_VAR 0 3
22789: RET
// export function Count ( array ) ; var i ; begin
22790: LD_INT 0
22792: PPUSH
22793: PPUSH
// result := 0 ;
22794: LD_ADDR_VAR 0 2
22798: PUSH
22799: LD_INT 0
22801: ST_TO_ADDR
// for i in array do
22802: LD_ADDR_VAR 0 3
22806: PUSH
22807: LD_VAR 0 1
22811: PUSH
22812: FOR_IN
22813: IFFALSE 22837
// if i then
22815: LD_VAR 0 3
22819: IFFALSE 22835
// result := result + 1 ;
22821: LD_ADDR_VAR 0 2
22825: PUSH
22826: LD_VAR 0 2
22830: PUSH
22831: LD_INT 1
22833: PLUS
22834: ST_TO_ADDR
22835: GO 22812
22837: POP
22838: POP
// end ;
22839: LD_VAR 0 2
22843: RET
// export function IsEmpty ( building ) ; begin
22844: LD_INT 0
22846: PPUSH
// if not building then
22847: LD_VAR 0 1
22851: NOT
22852: IFFALSE 22856
// exit ;
22854: GO 22899
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22856: LD_ADDR_VAR 0 2
22860: PUSH
22861: LD_VAR 0 1
22865: PUSH
22866: LD_INT 22
22868: PUSH
22869: LD_VAR 0 1
22873: PPUSH
22874: CALL_OW 255
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: LD_INT 58
22885: PUSH
22886: EMPTY
22887: LIST
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PPUSH
22893: CALL_OW 69
22897: IN
22898: ST_TO_ADDR
// end ;
22899: LD_VAR 0 2
22903: RET
// export function IsNotFull ( building ) ; begin
22904: LD_INT 0
22906: PPUSH
// if not building then
22907: LD_VAR 0 1
22911: NOT
22912: IFFALSE 22916
// exit ;
22914: GO 22935
// result := UnitsInside ( building ) < 6 ;
22916: LD_ADDR_VAR 0 2
22920: PUSH
22921: LD_VAR 0 1
22925: PPUSH
22926: CALL_OW 313
22930: PUSH
22931: LD_INT 6
22933: LESS
22934: ST_TO_ADDR
// end ;
22935: LD_VAR 0 2
22939: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22940: LD_INT 0
22942: PPUSH
22943: PPUSH
22944: PPUSH
22945: PPUSH
// tmp := [ ] ;
22946: LD_ADDR_VAR 0 3
22950: PUSH
22951: EMPTY
22952: ST_TO_ADDR
// list := [ ] ;
22953: LD_ADDR_VAR 0 5
22957: PUSH
22958: EMPTY
22959: ST_TO_ADDR
// for i = 16 to 25 do
22960: LD_ADDR_VAR 0 4
22964: PUSH
22965: DOUBLE
22966: LD_INT 16
22968: DEC
22969: ST_TO_ADDR
22970: LD_INT 25
22972: PUSH
22973: FOR_TO
22974: IFFALSE 23047
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22976: LD_ADDR_VAR 0 3
22980: PUSH
22981: LD_VAR 0 3
22985: PUSH
22986: LD_INT 22
22988: PUSH
22989: LD_VAR 0 1
22993: PPUSH
22994: CALL_OW 255
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: PUSH
23003: LD_INT 91
23005: PUSH
23006: LD_VAR 0 1
23010: PUSH
23011: LD_INT 6
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 30
23021: PUSH
23022: LD_VAR 0 4
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: LIST
23035: PUSH
23036: EMPTY
23037: LIST
23038: PPUSH
23039: CALL_OW 69
23043: ADD
23044: ST_TO_ADDR
23045: GO 22973
23047: POP
23048: POP
// for i = 1 to tmp do
23049: LD_ADDR_VAR 0 4
23053: PUSH
23054: DOUBLE
23055: LD_INT 1
23057: DEC
23058: ST_TO_ADDR
23059: LD_VAR 0 3
23063: PUSH
23064: FOR_TO
23065: IFFALSE 23153
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23067: LD_ADDR_VAR 0 5
23071: PUSH
23072: LD_VAR 0 5
23076: PUSH
23077: LD_VAR 0 3
23081: PUSH
23082: LD_VAR 0 4
23086: ARRAY
23087: PPUSH
23088: CALL_OW 266
23092: PUSH
23093: LD_VAR 0 3
23097: PUSH
23098: LD_VAR 0 4
23102: ARRAY
23103: PPUSH
23104: CALL_OW 250
23108: PUSH
23109: LD_VAR 0 3
23113: PUSH
23114: LD_VAR 0 4
23118: ARRAY
23119: PPUSH
23120: CALL_OW 251
23124: PUSH
23125: LD_VAR 0 3
23129: PUSH
23130: LD_VAR 0 4
23134: ARRAY
23135: PPUSH
23136: CALL_OW 254
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: PUSH
23147: EMPTY
23148: LIST
23149: ADD
23150: ST_TO_ADDR
23151: GO 23064
23153: POP
23154: POP
// result := list ;
23155: LD_ADDR_VAR 0 2
23159: PUSH
23160: LD_VAR 0 5
23164: ST_TO_ADDR
// end ;
23165: LD_VAR 0 2
23169: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23170: LD_INT 0
23172: PPUSH
23173: PPUSH
23174: PPUSH
23175: PPUSH
23176: PPUSH
23177: PPUSH
23178: PPUSH
// if not factory then
23179: LD_VAR 0 1
23183: NOT
23184: IFFALSE 23188
// exit ;
23186: GO 23781
// if control = control_apeman then
23188: LD_VAR 0 4
23192: PUSH
23193: LD_INT 5
23195: EQUAL
23196: IFFALSE 23305
// begin tmp := UnitsInside ( factory ) ;
23198: LD_ADDR_VAR 0 8
23202: PUSH
23203: LD_VAR 0 1
23207: PPUSH
23208: CALL_OW 313
23212: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23213: LD_VAR 0 8
23217: PPUSH
23218: LD_INT 25
23220: PUSH
23221: LD_INT 12
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PPUSH
23228: CALL_OW 72
23232: NOT
23233: IFFALSE 23243
// control := control_manual ;
23235: LD_ADDR_VAR 0 4
23239: PUSH
23240: LD_INT 1
23242: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23243: LD_ADDR_VAR 0 8
23247: PUSH
23248: LD_VAR 0 1
23252: PPUSH
23253: CALL 22940 0 1
23257: ST_TO_ADDR
// if tmp then
23258: LD_VAR 0 8
23262: IFFALSE 23305
// begin for i in tmp do
23264: LD_ADDR_VAR 0 7
23268: PUSH
23269: LD_VAR 0 8
23273: PUSH
23274: FOR_IN
23275: IFFALSE 23303
// if i [ 1 ] = b_ext_radio then
23277: LD_VAR 0 7
23281: PUSH
23282: LD_INT 1
23284: ARRAY
23285: PUSH
23286: LD_INT 22
23288: EQUAL
23289: IFFALSE 23301
// begin control := control_remote ;
23291: LD_ADDR_VAR 0 4
23295: PUSH
23296: LD_INT 2
23298: ST_TO_ADDR
// break ;
23299: GO 23303
// end ;
23301: GO 23274
23303: POP
23304: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23305: LD_VAR 0 1
23309: PPUSH
23310: LD_VAR 0 2
23314: PPUSH
23315: LD_VAR 0 3
23319: PPUSH
23320: LD_VAR 0 4
23324: PPUSH
23325: LD_VAR 0 5
23329: PPUSH
23330: CALL_OW 448
23334: IFFALSE 23369
// begin result := [ chassis , engine , control , weapon ] ;
23336: LD_ADDR_VAR 0 6
23340: PUSH
23341: LD_VAR 0 2
23345: PUSH
23346: LD_VAR 0 3
23350: PUSH
23351: LD_VAR 0 4
23355: PUSH
23356: LD_VAR 0 5
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: ST_TO_ADDR
// exit ;
23367: GO 23781
// end ; _chassis := AvailableChassisList ( factory ) ;
23369: LD_ADDR_VAR 0 9
23373: PUSH
23374: LD_VAR 0 1
23378: PPUSH
23379: CALL_OW 475
23383: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23384: LD_ADDR_VAR 0 11
23388: PUSH
23389: LD_VAR 0 1
23393: PPUSH
23394: CALL_OW 476
23398: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23399: LD_ADDR_VAR 0 12
23403: PUSH
23404: LD_VAR 0 1
23408: PPUSH
23409: CALL_OW 477
23413: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23414: LD_ADDR_VAR 0 10
23418: PUSH
23419: LD_VAR 0 1
23423: PPUSH
23424: CALL_OW 478
23428: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23429: LD_VAR 0 9
23433: NOT
23434: PUSH
23435: LD_VAR 0 11
23439: NOT
23440: OR
23441: PUSH
23442: LD_VAR 0 12
23446: NOT
23447: OR
23448: PUSH
23449: LD_VAR 0 10
23453: NOT
23454: OR
23455: IFFALSE 23490
// begin result := [ chassis , engine , control , weapon ] ;
23457: LD_ADDR_VAR 0 6
23461: PUSH
23462: LD_VAR 0 2
23466: PUSH
23467: LD_VAR 0 3
23471: PUSH
23472: LD_VAR 0 4
23476: PUSH
23477: LD_VAR 0 5
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: ST_TO_ADDR
// exit ;
23488: GO 23781
// end ; if not chassis in _chassis then
23490: LD_VAR 0 2
23494: PUSH
23495: LD_VAR 0 9
23499: IN
23500: NOT
23501: IFFALSE 23527
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23503: LD_ADDR_VAR 0 2
23507: PUSH
23508: LD_VAR 0 9
23512: PUSH
23513: LD_INT 1
23515: PPUSH
23516: LD_VAR 0 9
23520: PPUSH
23521: CALL_OW 12
23525: ARRAY
23526: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23527: LD_VAR 0 2
23531: PPUSH
23532: LD_VAR 0 3
23536: PPUSH
23537: CALL 23786 0 2
23541: NOT
23542: IFFALSE 23601
// repeat engine := _engine [ 1 ] ;
23544: LD_ADDR_VAR 0 3
23548: PUSH
23549: LD_VAR 0 11
23553: PUSH
23554: LD_INT 1
23556: ARRAY
23557: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23558: LD_ADDR_VAR 0 11
23562: PUSH
23563: LD_VAR 0 11
23567: PPUSH
23568: LD_INT 1
23570: PPUSH
23571: CALL_OW 3
23575: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23576: LD_VAR 0 2
23580: PPUSH
23581: LD_VAR 0 3
23585: PPUSH
23586: CALL 23786 0 2
23590: PUSH
23591: LD_VAR 0 11
23595: PUSH
23596: EMPTY
23597: EQUAL
23598: OR
23599: IFFALSE 23544
// if not control in _control then
23601: LD_VAR 0 4
23605: PUSH
23606: LD_VAR 0 12
23610: IN
23611: NOT
23612: IFFALSE 23638
// control := _control [ rand ( 1 , _control ) ] ;
23614: LD_ADDR_VAR 0 4
23618: PUSH
23619: LD_VAR 0 12
23623: PUSH
23624: LD_INT 1
23626: PPUSH
23627: LD_VAR 0 12
23631: PPUSH
23632: CALL_OW 12
23636: ARRAY
23637: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23638: LD_VAR 0 2
23642: PPUSH
23643: LD_VAR 0 5
23647: PPUSH
23648: CALL 24006 0 2
23652: NOT
23653: IFFALSE 23712
// repeat weapon := _weapon [ 1 ] ;
23655: LD_ADDR_VAR 0 5
23659: PUSH
23660: LD_VAR 0 10
23664: PUSH
23665: LD_INT 1
23667: ARRAY
23668: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23669: LD_ADDR_VAR 0 10
23673: PUSH
23674: LD_VAR 0 10
23678: PPUSH
23679: LD_INT 1
23681: PPUSH
23682: CALL_OW 3
23686: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23687: LD_VAR 0 2
23691: PPUSH
23692: LD_VAR 0 5
23696: PPUSH
23697: CALL 24006 0 2
23701: PUSH
23702: LD_VAR 0 10
23706: PUSH
23707: EMPTY
23708: EQUAL
23709: OR
23710: IFFALSE 23655
// result := [ ] ;
23712: LD_ADDR_VAR 0 6
23716: PUSH
23717: EMPTY
23718: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23719: LD_VAR 0 1
23723: PPUSH
23724: LD_VAR 0 2
23728: PPUSH
23729: LD_VAR 0 3
23733: PPUSH
23734: LD_VAR 0 4
23738: PPUSH
23739: LD_VAR 0 5
23743: PPUSH
23744: CALL_OW 448
23748: IFFALSE 23781
// result := [ chassis , engine , control , weapon ] ;
23750: LD_ADDR_VAR 0 6
23754: PUSH
23755: LD_VAR 0 2
23759: PUSH
23760: LD_VAR 0 3
23764: PUSH
23765: LD_VAR 0 4
23769: PUSH
23770: LD_VAR 0 5
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: ST_TO_ADDR
// end ;
23781: LD_VAR 0 6
23785: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23786: LD_INT 0
23788: PPUSH
// if not chassis or not engine then
23789: LD_VAR 0 1
23793: NOT
23794: PUSH
23795: LD_VAR 0 2
23799: NOT
23800: OR
23801: IFFALSE 23805
// exit ;
23803: GO 24001
// case engine of engine_solar :
23805: LD_VAR 0 2
23809: PUSH
23810: LD_INT 2
23812: DOUBLE
23813: EQUAL
23814: IFTRUE 23818
23816: GO 23856
23818: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23819: LD_ADDR_VAR 0 3
23823: PUSH
23824: LD_INT 11
23826: PUSH
23827: LD_INT 12
23829: PUSH
23830: LD_INT 13
23832: PUSH
23833: LD_INT 14
23835: PUSH
23836: LD_INT 1
23838: PUSH
23839: LD_INT 2
23841: PUSH
23842: LD_INT 3
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: ST_TO_ADDR
23854: GO 23985
23856: LD_INT 1
23858: DOUBLE
23859: EQUAL
23860: IFTRUE 23864
23862: GO 23926
23864: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23865: LD_ADDR_VAR 0 3
23869: PUSH
23870: LD_INT 11
23872: PUSH
23873: LD_INT 12
23875: PUSH
23876: LD_INT 13
23878: PUSH
23879: LD_INT 14
23881: PUSH
23882: LD_INT 1
23884: PUSH
23885: LD_INT 2
23887: PUSH
23888: LD_INT 3
23890: PUSH
23891: LD_INT 4
23893: PUSH
23894: LD_INT 5
23896: PUSH
23897: LD_INT 21
23899: PUSH
23900: LD_INT 23
23902: PUSH
23903: LD_INT 22
23905: PUSH
23906: LD_INT 24
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: ST_TO_ADDR
23924: GO 23985
23926: LD_INT 3
23928: DOUBLE
23929: EQUAL
23930: IFTRUE 23934
23932: GO 23984
23934: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23935: LD_ADDR_VAR 0 3
23939: PUSH
23940: LD_INT 13
23942: PUSH
23943: LD_INT 14
23945: PUSH
23946: LD_INT 2
23948: PUSH
23949: LD_INT 3
23951: PUSH
23952: LD_INT 4
23954: PUSH
23955: LD_INT 5
23957: PUSH
23958: LD_INT 21
23960: PUSH
23961: LD_INT 22
23963: PUSH
23964: LD_INT 23
23966: PUSH
23967: LD_INT 24
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: ST_TO_ADDR
23982: GO 23985
23984: POP
// result := ( chassis in result ) ;
23985: LD_ADDR_VAR 0 3
23989: PUSH
23990: LD_VAR 0 1
23994: PUSH
23995: LD_VAR 0 3
23999: IN
24000: ST_TO_ADDR
// end ;
24001: LD_VAR 0 3
24005: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24006: LD_INT 0
24008: PPUSH
// if not chassis or not weapon then
24009: LD_VAR 0 1
24013: NOT
24014: PUSH
24015: LD_VAR 0 2
24019: NOT
24020: OR
24021: IFFALSE 24025
// exit ;
24023: GO 25087
// case weapon of us_machine_gun :
24025: LD_VAR 0 2
24029: PUSH
24030: LD_INT 2
24032: DOUBLE
24033: EQUAL
24034: IFTRUE 24038
24036: GO 24068
24038: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24039: LD_ADDR_VAR 0 3
24043: PUSH
24044: LD_INT 1
24046: PUSH
24047: LD_INT 2
24049: PUSH
24050: LD_INT 3
24052: PUSH
24053: LD_INT 4
24055: PUSH
24056: LD_INT 5
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: ST_TO_ADDR
24066: GO 25071
24068: LD_INT 3
24070: DOUBLE
24071: EQUAL
24072: IFTRUE 24076
24074: GO 24106
24076: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24077: LD_ADDR_VAR 0 3
24081: PUSH
24082: LD_INT 1
24084: PUSH
24085: LD_INT 2
24087: PUSH
24088: LD_INT 3
24090: PUSH
24091: LD_INT 4
24093: PUSH
24094: LD_INT 5
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: ST_TO_ADDR
24104: GO 25071
24106: LD_INT 11
24108: DOUBLE
24109: EQUAL
24110: IFTRUE 24114
24112: GO 24144
24114: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24115: LD_ADDR_VAR 0 3
24119: PUSH
24120: LD_INT 1
24122: PUSH
24123: LD_INT 2
24125: PUSH
24126: LD_INT 3
24128: PUSH
24129: LD_INT 4
24131: PUSH
24132: LD_INT 5
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: ST_TO_ADDR
24142: GO 25071
24144: LD_INT 4
24146: DOUBLE
24147: EQUAL
24148: IFTRUE 24152
24150: GO 24178
24152: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24153: LD_ADDR_VAR 0 3
24157: PUSH
24158: LD_INT 2
24160: PUSH
24161: LD_INT 3
24163: PUSH
24164: LD_INT 4
24166: PUSH
24167: LD_INT 5
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: ST_TO_ADDR
24176: GO 25071
24178: LD_INT 5
24180: DOUBLE
24181: EQUAL
24182: IFTRUE 24186
24184: GO 24212
24186: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24187: LD_ADDR_VAR 0 3
24191: PUSH
24192: LD_INT 2
24194: PUSH
24195: LD_INT 3
24197: PUSH
24198: LD_INT 4
24200: PUSH
24201: LD_INT 5
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: ST_TO_ADDR
24210: GO 25071
24212: LD_INT 9
24214: DOUBLE
24215: EQUAL
24216: IFTRUE 24220
24218: GO 24246
24220: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24221: LD_ADDR_VAR 0 3
24225: PUSH
24226: LD_INT 2
24228: PUSH
24229: LD_INT 3
24231: PUSH
24232: LD_INT 4
24234: PUSH
24235: LD_INT 5
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: ST_TO_ADDR
24244: GO 25071
24246: LD_INT 7
24248: DOUBLE
24249: EQUAL
24250: IFTRUE 24254
24252: GO 24280
24254: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24255: LD_ADDR_VAR 0 3
24259: PUSH
24260: LD_INT 2
24262: PUSH
24263: LD_INT 3
24265: PUSH
24266: LD_INT 4
24268: PUSH
24269: LD_INT 5
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: ST_TO_ADDR
24278: GO 25071
24280: LD_INT 12
24282: DOUBLE
24283: EQUAL
24284: IFTRUE 24288
24286: GO 24314
24288: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24289: LD_ADDR_VAR 0 3
24293: PUSH
24294: LD_INT 2
24296: PUSH
24297: LD_INT 3
24299: PUSH
24300: LD_INT 4
24302: PUSH
24303: LD_INT 5
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: ST_TO_ADDR
24312: GO 25071
24314: LD_INT 13
24316: DOUBLE
24317: EQUAL
24318: IFTRUE 24322
24320: GO 24348
24322: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24323: LD_ADDR_VAR 0 3
24327: PUSH
24328: LD_INT 2
24330: PUSH
24331: LD_INT 3
24333: PUSH
24334: LD_INT 4
24336: PUSH
24337: LD_INT 5
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: ST_TO_ADDR
24346: GO 25071
24348: LD_INT 14
24350: DOUBLE
24351: EQUAL
24352: IFTRUE 24356
24354: GO 24374
24356: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24357: LD_ADDR_VAR 0 3
24361: PUSH
24362: LD_INT 4
24364: PUSH
24365: LD_INT 5
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: ST_TO_ADDR
24372: GO 25071
24374: LD_INT 6
24376: DOUBLE
24377: EQUAL
24378: IFTRUE 24382
24380: GO 24400
24382: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24383: LD_ADDR_VAR 0 3
24387: PUSH
24388: LD_INT 4
24390: PUSH
24391: LD_INT 5
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: ST_TO_ADDR
24398: GO 25071
24400: LD_INT 10
24402: DOUBLE
24403: EQUAL
24404: IFTRUE 24408
24406: GO 24426
24408: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24409: LD_ADDR_VAR 0 3
24413: PUSH
24414: LD_INT 4
24416: PUSH
24417: LD_INT 5
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: ST_TO_ADDR
24424: GO 25071
24426: LD_INT 22
24428: DOUBLE
24429: EQUAL
24430: IFTRUE 24434
24432: GO 24460
24434: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24435: LD_ADDR_VAR 0 3
24439: PUSH
24440: LD_INT 11
24442: PUSH
24443: LD_INT 12
24445: PUSH
24446: LD_INT 13
24448: PUSH
24449: LD_INT 14
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: ST_TO_ADDR
24458: GO 25071
24460: LD_INT 23
24462: DOUBLE
24463: EQUAL
24464: IFTRUE 24468
24466: GO 24494
24468: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24469: LD_ADDR_VAR 0 3
24473: PUSH
24474: LD_INT 11
24476: PUSH
24477: LD_INT 12
24479: PUSH
24480: LD_INT 13
24482: PUSH
24483: LD_INT 14
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: ST_TO_ADDR
24492: GO 25071
24494: LD_INT 24
24496: DOUBLE
24497: EQUAL
24498: IFTRUE 24502
24500: GO 24528
24502: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24503: LD_ADDR_VAR 0 3
24507: PUSH
24508: LD_INT 11
24510: PUSH
24511: LD_INT 12
24513: PUSH
24514: LD_INT 13
24516: PUSH
24517: LD_INT 14
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: ST_TO_ADDR
24526: GO 25071
24528: LD_INT 30
24530: DOUBLE
24531: EQUAL
24532: IFTRUE 24536
24534: GO 24562
24536: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24537: LD_ADDR_VAR 0 3
24541: PUSH
24542: LD_INT 11
24544: PUSH
24545: LD_INT 12
24547: PUSH
24548: LD_INT 13
24550: PUSH
24551: LD_INT 14
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: ST_TO_ADDR
24560: GO 25071
24562: LD_INT 25
24564: DOUBLE
24565: EQUAL
24566: IFTRUE 24570
24568: GO 24588
24570: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24571: LD_ADDR_VAR 0 3
24575: PUSH
24576: LD_INT 13
24578: PUSH
24579: LD_INT 14
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: ST_TO_ADDR
24586: GO 25071
24588: LD_INT 27
24590: DOUBLE
24591: EQUAL
24592: IFTRUE 24596
24594: GO 24614
24596: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
24597: LD_ADDR_VAR 0 3
24601: PUSH
24602: LD_INT 13
24604: PUSH
24605: LD_INT 14
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: ST_TO_ADDR
24612: GO 25071
24614: LD_EXP 75
24618: DOUBLE
24619: EQUAL
24620: IFTRUE 24624
24622: GO 24650
24624: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24625: LD_ADDR_VAR 0 3
24629: PUSH
24630: LD_INT 11
24632: PUSH
24633: LD_INT 12
24635: PUSH
24636: LD_INT 13
24638: PUSH
24639: LD_INT 14
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: ST_TO_ADDR
24648: GO 25071
24650: LD_INT 28
24652: DOUBLE
24653: EQUAL
24654: IFTRUE 24658
24656: GO 24676
24658: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24659: LD_ADDR_VAR 0 3
24663: PUSH
24664: LD_INT 13
24666: PUSH
24667: LD_INT 14
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: ST_TO_ADDR
24674: GO 25071
24676: LD_INT 29
24678: DOUBLE
24679: EQUAL
24680: IFTRUE 24684
24682: GO 24702
24684: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24685: LD_ADDR_VAR 0 3
24689: PUSH
24690: LD_INT 13
24692: PUSH
24693: LD_INT 14
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: ST_TO_ADDR
24700: GO 25071
24702: LD_INT 31
24704: DOUBLE
24705: EQUAL
24706: IFTRUE 24710
24708: GO 24728
24710: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24711: LD_ADDR_VAR 0 3
24715: PUSH
24716: LD_INT 13
24718: PUSH
24719: LD_INT 14
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: ST_TO_ADDR
24726: GO 25071
24728: LD_INT 26
24730: DOUBLE
24731: EQUAL
24732: IFTRUE 24736
24734: GO 24754
24736: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24737: LD_ADDR_VAR 0 3
24741: PUSH
24742: LD_INT 13
24744: PUSH
24745: LD_INT 14
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: ST_TO_ADDR
24752: GO 25071
24754: LD_INT 42
24756: DOUBLE
24757: EQUAL
24758: IFTRUE 24762
24760: GO 24788
24762: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24763: LD_ADDR_VAR 0 3
24767: PUSH
24768: LD_INT 21
24770: PUSH
24771: LD_INT 22
24773: PUSH
24774: LD_INT 23
24776: PUSH
24777: LD_INT 24
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: ST_TO_ADDR
24786: GO 25071
24788: LD_INT 43
24790: DOUBLE
24791: EQUAL
24792: IFTRUE 24796
24794: GO 24822
24796: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24797: LD_ADDR_VAR 0 3
24801: PUSH
24802: LD_INT 21
24804: PUSH
24805: LD_INT 22
24807: PUSH
24808: LD_INT 23
24810: PUSH
24811: LD_INT 24
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: ST_TO_ADDR
24820: GO 25071
24822: LD_INT 44
24824: DOUBLE
24825: EQUAL
24826: IFTRUE 24830
24828: GO 24856
24830: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24831: LD_ADDR_VAR 0 3
24835: PUSH
24836: LD_INT 21
24838: PUSH
24839: LD_INT 22
24841: PUSH
24842: LD_INT 23
24844: PUSH
24845: LD_INT 24
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: ST_TO_ADDR
24854: GO 25071
24856: LD_INT 45
24858: DOUBLE
24859: EQUAL
24860: IFTRUE 24864
24862: GO 24890
24864: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24865: LD_ADDR_VAR 0 3
24869: PUSH
24870: LD_INT 21
24872: PUSH
24873: LD_INT 22
24875: PUSH
24876: LD_INT 23
24878: PUSH
24879: LD_INT 24
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: ST_TO_ADDR
24888: GO 25071
24890: LD_INT 49
24892: DOUBLE
24893: EQUAL
24894: IFTRUE 24898
24896: GO 24924
24898: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24899: LD_ADDR_VAR 0 3
24903: PUSH
24904: LD_INT 21
24906: PUSH
24907: LD_INT 22
24909: PUSH
24910: LD_INT 23
24912: PUSH
24913: LD_INT 24
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: ST_TO_ADDR
24922: GO 25071
24924: LD_INT 51
24926: DOUBLE
24927: EQUAL
24928: IFTRUE 24932
24930: GO 24958
24932: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24933: LD_ADDR_VAR 0 3
24937: PUSH
24938: LD_INT 21
24940: PUSH
24941: LD_INT 22
24943: PUSH
24944: LD_INT 23
24946: PUSH
24947: LD_INT 24
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: ST_TO_ADDR
24956: GO 25071
24958: LD_INT 52
24960: DOUBLE
24961: EQUAL
24962: IFTRUE 24966
24964: GO 24992
24966: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24967: LD_ADDR_VAR 0 3
24971: PUSH
24972: LD_INT 21
24974: PUSH
24975: LD_INT 22
24977: PUSH
24978: LD_INT 23
24980: PUSH
24981: LD_INT 24
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: ST_TO_ADDR
24990: GO 25071
24992: LD_INT 53
24994: DOUBLE
24995: EQUAL
24996: IFTRUE 25000
24998: GO 25018
25000: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25001: LD_ADDR_VAR 0 3
25005: PUSH
25006: LD_INT 23
25008: PUSH
25009: LD_INT 24
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: ST_TO_ADDR
25016: GO 25071
25018: LD_INT 46
25020: DOUBLE
25021: EQUAL
25022: IFTRUE 25026
25024: GO 25044
25026: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25027: LD_ADDR_VAR 0 3
25031: PUSH
25032: LD_INT 23
25034: PUSH
25035: LD_INT 24
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: ST_TO_ADDR
25042: GO 25071
25044: LD_INT 47
25046: DOUBLE
25047: EQUAL
25048: IFTRUE 25052
25050: GO 25070
25052: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25053: LD_ADDR_VAR 0 3
25057: PUSH
25058: LD_INT 23
25060: PUSH
25061: LD_INT 24
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: ST_TO_ADDR
25068: GO 25071
25070: POP
// result := ( chassis in result ) ;
25071: LD_ADDR_VAR 0 3
25075: PUSH
25076: LD_VAR 0 1
25080: PUSH
25081: LD_VAR 0 3
25085: IN
25086: ST_TO_ADDR
// end ;
25087: LD_VAR 0 3
25091: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25092: LD_INT 0
25094: PPUSH
25095: PPUSH
25096: PPUSH
25097: PPUSH
25098: PPUSH
25099: PPUSH
25100: PPUSH
// result := array ;
25101: LD_ADDR_VAR 0 5
25105: PUSH
25106: LD_VAR 0 1
25110: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25111: LD_VAR 0 1
25115: NOT
25116: PUSH
25117: LD_VAR 0 2
25121: NOT
25122: OR
25123: PUSH
25124: LD_VAR 0 3
25128: NOT
25129: OR
25130: PUSH
25131: LD_VAR 0 2
25135: PUSH
25136: LD_VAR 0 1
25140: GREATER
25141: OR
25142: PUSH
25143: LD_VAR 0 3
25147: PUSH
25148: LD_VAR 0 1
25152: GREATER
25153: OR
25154: IFFALSE 25158
// exit ;
25156: GO 25454
// if direction then
25158: LD_VAR 0 4
25162: IFFALSE 25226
// begin d := 1 ;
25164: LD_ADDR_VAR 0 9
25168: PUSH
25169: LD_INT 1
25171: ST_TO_ADDR
// if i_from > i_to then
25172: LD_VAR 0 2
25176: PUSH
25177: LD_VAR 0 3
25181: GREATER
25182: IFFALSE 25208
// length := ( array - i_from ) + i_to else
25184: LD_ADDR_VAR 0 11
25188: PUSH
25189: LD_VAR 0 1
25193: PUSH
25194: LD_VAR 0 2
25198: MINUS
25199: PUSH
25200: LD_VAR 0 3
25204: PLUS
25205: ST_TO_ADDR
25206: GO 25224
// length := i_to - i_from ;
25208: LD_ADDR_VAR 0 11
25212: PUSH
25213: LD_VAR 0 3
25217: PUSH
25218: LD_VAR 0 2
25222: MINUS
25223: ST_TO_ADDR
// end else
25224: GO 25287
// begin d := - 1 ;
25226: LD_ADDR_VAR 0 9
25230: PUSH
25231: LD_INT 1
25233: NEG
25234: ST_TO_ADDR
// if i_from > i_to then
25235: LD_VAR 0 2
25239: PUSH
25240: LD_VAR 0 3
25244: GREATER
25245: IFFALSE 25265
// length := i_from - i_to else
25247: LD_ADDR_VAR 0 11
25251: PUSH
25252: LD_VAR 0 2
25256: PUSH
25257: LD_VAR 0 3
25261: MINUS
25262: ST_TO_ADDR
25263: GO 25287
// length := ( array - i_to ) + i_from ;
25265: LD_ADDR_VAR 0 11
25269: PUSH
25270: LD_VAR 0 1
25274: PUSH
25275: LD_VAR 0 3
25279: MINUS
25280: PUSH
25281: LD_VAR 0 2
25285: PLUS
25286: ST_TO_ADDR
// end ; if not length then
25287: LD_VAR 0 11
25291: NOT
25292: IFFALSE 25296
// exit ;
25294: GO 25454
// tmp := array ;
25296: LD_ADDR_VAR 0 10
25300: PUSH
25301: LD_VAR 0 1
25305: ST_TO_ADDR
// for i = 1 to length do
25306: LD_ADDR_VAR 0 6
25310: PUSH
25311: DOUBLE
25312: LD_INT 1
25314: DEC
25315: ST_TO_ADDR
25316: LD_VAR 0 11
25320: PUSH
25321: FOR_TO
25322: IFFALSE 25442
// begin for j = 1 to array do
25324: LD_ADDR_VAR 0 7
25328: PUSH
25329: DOUBLE
25330: LD_INT 1
25332: DEC
25333: ST_TO_ADDR
25334: LD_VAR 0 1
25338: PUSH
25339: FOR_TO
25340: IFFALSE 25428
// begin k := j + d ;
25342: LD_ADDR_VAR 0 8
25346: PUSH
25347: LD_VAR 0 7
25351: PUSH
25352: LD_VAR 0 9
25356: PLUS
25357: ST_TO_ADDR
// if k > array then
25358: LD_VAR 0 8
25362: PUSH
25363: LD_VAR 0 1
25367: GREATER
25368: IFFALSE 25378
// k := 1 ;
25370: LD_ADDR_VAR 0 8
25374: PUSH
25375: LD_INT 1
25377: ST_TO_ADDR
// if not k then
25378: LD_VAR 0 8
25382: NOT
25383: IFFALSE 25395
// k := array ;
25385: LD_ADDR_VAR 0 8
25389: PUSH
25390: LD_VAR 0 1
25394: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25395: LD_ADDR_VAR 0 10
25399: PUSH
25400: LD_VAR 0 10
25404: PPUSH
25405: LD_VAR 0 8
25409: PPUSH
25410: LD_VAR 0 1
25414: PUSH
25415: LD_VAR 0 7
25419: ARRAY
25420: PPUSH
25421: CALL_OW 1
25425: ST_TO_ADDR
// end ;
25426: GO 25339
25428: POP
25429: POP
// array := tmp ;
25430: LD_ADDR_VAR 0 1
25434: PUSH
25435: LD_VAR 0 10
25439: ST_TO_ADDR
// end ;
25440: GO 25321
25442: POP
25443: POP
// result := array ;
25444: LD_ADDR_VAR 0 5
25448: PUSH
25449: LD_VAR 0 1
25453: ST_TO_ADDR
// end ;
25454: LD_VAR 0 5
25458: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25459: LD_INT 0
25461: PPUSH
25462: PPUSH
// result := 0 ;
25463: LD_ADDR_VAR 0 3
25467: PUSH
25468: LD_INT 0
25470: ST_TO_ADDR
// if not array or not value in array then
25471: LD_VAR 0 1
25475: NOT
25476: PUSH
25477: LD_VAR 0 2
25481: PUSH
25482: LD_VAR 0 1
25486: IN
25487: NOT
25488: OR
25489: IFFALSE 25493
// exit ;
25491: GO 25547
// for i = 1 to array do
25493: LD_ADDR_VAR 0 4
25497: PUSH
25498: DOUBLE
25499: LD_INT 1
25501: DEC
25502: ST_TO_ADDR
25503: LD_VAR 0 1
25507: PUSH
25508: FOR_TO
25509: IFFALSE 25545
// if value = array [ i ] then
25511: LD_VAR 0 2
25515: PUSH
25516: LD_VAR 0 1
25520: PUSH
25521: LD_VAR 0 4
25525: ARRAY
25526: EQUAL
25527: IFFALSE 25543
// begin result := i ;
25529: LD_ADDR_VAR 0 3
25533: PUSH
25534: LD_VAR 0 4
25538: ST_TO_ADDR
// exit ;
25539: POP
25540: POP
25541: GO 25547
// end ;
25543: GO 25508
25545: POP
25546: POP
// end ;
25547: LD_VAR 0 3
25551: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25552: LD_INT 0
25554: PPUSH
// vc_chassis := chassis ;
25555: LD_ADDR_OWVAR 37
25559: PUSH
25560: LD_VAR 0 1
25564: ST_TO_ADDR
// vc_engine := engine ;
25565: LD_ADDR_OWVAR 39
25569: PUSH
25570: LD_VAR 0 2
25574: ST_TO_ADDR
// vc_control := control ;
25575: LD_ADDR_OWVAR 38
25579: PUSH
25580: LD_VAR 0 3
25584: ST_TO_ADDR
// vc_weapon := weapon ;
25585: LD_ADDR_OWVAR 40
25589: PUSH
25590: LD_VAR 0 4
25594: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25595: LD_ADDR_OWVAR 41
25599: PUSH
25600: LD_VAR 0 5
25604: ST_TO_ADDR
// end ;
25605: LD_VAR 0 6
25609: RET
// export function WantPlant ( unit ) ; var task ; begin
25610: LD_INT 0
25612: PPUSH
25613: PPUSH
// result := false ;
25614: LD_ADDR_VAR 0 2
25618: PUSH
25619: LD_INT 0
25621: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25622: LD_ADDR_VAR 0 3
25626: PUSH
25627: LD_VAR 0 1
25631: PPUSH
25632: CALL_OW 437
25636: ST_TO_ADDR
// if task then
25637: LD_VAR 0 3
25641: IFFALSE 25669
// if task [ 1 ] [ 1 ] = p then
25643: LD_VAR 0 3
25647: PUSH
25648: LD_INT 1
25650: ARRAY
25651: PUSH
25652: LD_INT 1
25654: ARRAY
25655: PUSH
25656: LD_STRING p
25658: EQUAL
25659: IFFALSE 25669
// result := true ;
25661: LD_ADDR_VAR 0 2
25665: PUSH
25666: LD_INT 1
25668: ST_TO_ADDR
// end ;
25669: LD_VAR 0 2
25673: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25674: LD_INT 0
25676: PPUSH
25677: PPUSH
25678: PPUSH
25679: PPUSH
// if pos < 1 then
25680: LD_VAR 0 2
25684: PUSH
25685: LD_INT 1
25687: LESS
25688: IFFALSE 25692
// exit ;
25690: GO 25995
// if pos = 1 then
25692: LD_VAR 0 2
25696: PUSH
25697: LD_INT 1
25699: EQUAL
25700: IFFALSE 25733
// result := Replace ( arr , pos [ 1 ] , value ) else
25702: LD_ADDR_VAR 0 4
25706: PUSH
25707: LD_VAR 0 1
25711: PPUSH
25712: LD_VAR 0 2
25716: PUSH
25717: LD_INT 1
25719: ARRAY
25720: PPUSH
25721: LD_VAR 0 3
25725: PPUSH
25726: CALL_OW 1
25730: ST_TO_ADDR
25731: GO 25995
// begin tmp := arr ;
25733: LD_ADDR_VAR 0 6
25737: PUSH
25738: LD_VAR 0 1
25742: ST_TO_ADDR
// s_arr := [ tmp ] ;
25743: LD_ADDR_VAR 0 7
25747: PUSH
25748: LD_VAR 0 6
25752: PUSH
25753: EMPTY
25754: LIST
25755: ST_TO_ADDR
// for i = 1 to pos - 1 do
25756: LD_ADDR_VAR 0 5
25760: PUSH
25761: DOUBLE
25762: LD_INT 1
25764: DEC
25765: ST_TO_ADDR
25766: LD_VAR 0 2
25770: PUSH
25771: LD_INT 1
25773: MINUS
25774: PUSH
25775: FOR_TO
25776: IFFALSE 25821
// begin tmp := tmp [ pos [ i ] ] ;
25778: LD_ADDR_VAR 0 6
25782: PUSH
25783: LD_VAR 0 6
25787: PUSH
25788: LD_VAR 0 2
25792: PUSH
25793: LD_VAR 0 5
25797: ARRAY
25798: ARRAY
25799: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25800: LD_ADDR_VAR 0 7
25804: PUSH
25805: LD_VAR 0 7
25809: PUSH
25810: LD_VAR 0 6
25814: PUSH
25815: EMPTY
25816: LIST
25817: ADD
25818: ST_TO_ADDR
// end ;
25819: GO 25775
25821: POP
25822: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25823: LD_ADDR_VAR 0 6
25827: PUSH
25828: LD_VAR 0 6
25832: PPUSH
25833: LD_VAR 0 2
25837: PUSH
25838: LD_VAR 0 2
25842: ARRAY
25843: PPUSH
25844: LD_VAR 0 3
25848: PPUSH
25849: CALL_OW 1
25853: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25854: LD_ADDR_VAR 0 7
25858: PUSH
25859: LD_VAR 0 7
25863: PPUSH
25864: LD_VAR 0 7
25868: PPUSH
25869: LD_VAR 0 6
25873: PPUSH
25874: CALL_OW 1
25878: ST_TO_ADDR
// for i = s_arr downto 2 do
25879: LD_ADDR_VAR 0 5
25883: PUSH
25884: DOUBLE
25885: LD_VAR 0 7
25889: INC
25890: ST_TO_ADDR
25891: LD_INT 2
25893: PUSH
25894: FOR_DOWNTO
25895: IFFALSE 25979
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25897: LD_ADDR_VAR 0 6
25901: PUSH
25902: LD_VAR 0 7
25906: PUSH
25907: LD_VAR 0 5
25911: PUSH
25912: LD_INT 1
25914: MINUS
25915: ARRAY
25916: PPUSH
25917: LD_VAR 0 2
25921: PUSH
25922: LD_VAR 0 5
25926: PUSH
25927: LD_INT 1
25929: MINUS
25930: ARRAY
25931: PPUSH
25932: LD_VAR 0 7
25936: PUSH
25937: LD_VAR 0 5
25941: ARRAY
25942: PPUSH
25943: CALL_OW 1
25947: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25948: LD_ADDR_VAR 0 7
25952: PUSH
25953: LD_VAR 0 7
25957: PPUSH
25958: LD_VAR 0 5
25962: PUSH
25963: LD_INT 1
25965: MINUS
25966: PPUSH
25967: LD_VAR 0 6
25971: PPUSH
25972: CALL_OW 1
25976: ST_TO_ADDR
// end ;
25977: GO 25894
25979: POP
25980: POP
// result := s_arr [ 1 ] ;
25981: LD_ADDR_VAR 0 4
25985: PUSH
25986: LD_VAR 0 7
25990: PUSH
25991: LD_INT 1
25993: ARRAY
25994: ST_TO_ADDR
// end ; end ;
25995: LD_VAR 0 4
25999: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26000: LD_INT 0
26002: PPUSH
26003: PPUSH
// if not list then
26004: LD_VAR 0 1
26008: NOT
26009: IFFALSE 26013
// exit ;
26011: GO 26104
// i := list [ pos1 ] ;
26013: LD_ADDR_VAR 0 5
26017: PUSH
26018: LD_VAR 0 1
26022: PUSH
26023: LD_VAR 0 2
26027: ARRAY
26028: ST_TO_ADDR
// if not i then
26029: LD_VAR 0 5
26033: NOT
26034: IFFALSE 26038
// exit ;
26036: GO 26104
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26038: LD_ADDR_VAR 0 1
26042: PUSH
26043: LD_VAR 0 1
26047: PPUSH
26048: LD_VAR 0 2
26052: PPUSH
26053: LD_VAR 0 1
26057: PUSH
26058: LD_VAR 0 3
26062: ARRAY
26063: PPUSH
26064: CALL_OW 1
26068: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26069: LD_ADDR_VAR 0 1
26073: PUSH
26074: LD_VAR 0 1
26078: PPUSH
26079: LD_VAR 0 3
26083: PPUSH
26084: LD_VAR 0 5
26088: PPUSH
26089: CALL_OW 1
26093: ST_TO_ADDR
// result := list ;
26094: LD_ADDR_VAR 0 4
26098: PUSH
26099: LD_VAR 0 1
26103: ST_TO_ADDR
// end ;
26104: LD_VAR 0 4
26108: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26109: LD_INT 0
26111: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26112: LD_ADDR_VAR 0 5
26116: PUSH
26117: LD_VAR 0 1
26121: PPUSH
26122: CALL_OW 250
26126: PPUSH
26127: LD_VAR 0 1
26131: PPUSH
26132: CALL_OW 251
26136: PPUSH
26137: LD_VAR 0 2
26141: PPUSH
26142: LD_VAR 0 3
26146: PPUSH
26147: LD_VAR 0 4
26151: PPUSH
26152: CALL 26162 0 5
26156: ST_TO_ADDR
// end ;
26157: LD_VAR 0 5
26161: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26162: LD_INT 0
26164: PPUSH
26165: PPUSH
26166: PPUSH
26167: PPUSH
// if not list then
26168: LD_VAR 0 3
26172: NOT
26173: IFFALSE 26177
// exit ;
26175: GO 26565
// result := [ ] ;
26177: LD_ADDR_VAR 0 6
26181: PUSH
26182: EMPTY
26183: ST_TO_ADDR
// for i in list do
26184: LD_ADDR_VAR 0 7
26188: PUSH
26189: LD_VAR 0 3
26193: PUSH
26194: FOR_IN
26195: IFFALSE 26397
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26197: LD_ADDR_VAR 0 9
26201: PUSH
26202: LD_VAR 0 7
26206: PPUSH
26207: LD_VAR 0 1
26211: PPUSH
26212: LD_VAR 0 2
26216: PPUSH
26217: CALL_OW 297
26221: ST_TO_ADDR
// if not result then
26222: LD_VAR 0 6
26226: NOT
26227: IFFALSE 26253
// result := [ [ i , tmp ] ] else
26229: LD_ADDR_VAR 0 6
26233: PUSH
26234: LD_VAR 0 7
26238: PUSH
26239: LD_VAR 0 9
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PUSH
26248: EMPTY
26249: LIST
26250: ST_TO_ADDR
26251: GO 26395
// begin if result [ result ] [ 2 ] < tmp then
26253: LD_VAR 0 6
26257: PUSH
26258: LD_VAR 0 6
26262: ARRAY
26263: PUSH
26264: LD_INT 2
26266: ARRAY
26267: PUSH
26268: LD_VAR 0 9
26272: LESS
26273: IFFALSE 26315
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26275: LD_ADDR_VAR 0 6
26279: PUSH
26280: LD_VAR 0 6
26284: PPUSH
26285: LD_VAR 0 6
26289: PUSH
26290: LD_INT 1
26292: PLUS
26293: PPUSH
26294: LD_VAR 0 7
26298: PUSH
26299: LD_VAR 0 9
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PPUSH
26308: CALL_OW 2
26312: ST_TO_ADDR
26313: GO 26395
// for j = 1 to result do
26315: LD_ADDR_VAR 0 8
26319: PUSH
26320: DOUBLE
26321: LD_INT 1
26323: DEC
26324: ST_TO_ADDR
26325: LD_VAR 0 6
26329: PUSH
26330: FOR_TO
26331: IFFALSE 26393
// begin if tmp < result [ j ] [ 2 ] then
26333: LD_VAR 0 9
26337: PUSH
26338: LD_VAR 0 6
26342: PUSH
26343: LD_VAR 0 8
26347: ARRAY
26348: PUSH
26349: LD_INT 2
26351: ARRAY
26352: LESS
26353: IFFALSE 26391
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26355: LD_ADDR_VAR 0 6
26359: PUSH
26360: LD_VAR 0 6
26364: PPUSH
26365: LD_VAR 0 8
26369: PPUSH
26370: LD_VAR 0 7
26374: PUSH
26375: LD_VAR 0 9
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PPUSH
26384: CALL_OW 2
26388: ST_TO_ADDR
// break ;
26389: GO 26393
// end ; end ;
26391: GO 26330
26393: POP
26394: POP
// end ; end ;
26395: GO 26194
26397: POP
26398: POP
// if result and not asc then
26399: LD_VAR 0 6
26403: PUSH
26404: LD_VAR 0 4
26408: NOT
26409: AND
26410: IFFALSE 26485
// begin tmp := result ;
26412: LD_ADDR_VAR 0 9
26416: PUSH
26417: LD_VAR 0 6
26421: ST_TO_ADDR
// for i = tmp downto 1 do
26422: LD_ADDR_VAR 0 7
26426: PUSH
26427: DOUBLE
26428: LD_VAR 0 9
26432: INC
26433: ST_TO_ADDR
26434: LD_INT 1
26436: PUSH
26437: FOR_DOWNTO
26438: IFFALSE 26483
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26440: LD_ADDR_VAR 0 6
26444: PUSH
26445: LD_VAR 0 6
26449: PPUSH
26450: LD_VAR 0 9
26454: PUSH
26455: LD_VAR 0 7
26459: MINUS
26460: PUSH
26461: LD_INT 1
26463: PLUS
26464: PPUSH
26465: LD_VAR 0 9
26469: PUSH
26470: LD_VAR 0 7
26474: ARRAY
26475: PPUSH
26476: CALL_OW 1
26480: ST_TO_ADDR
26481: GO 26437
26483: POP
26484: POP
// end ; tmp := [ ] ;
26485: LD_ADDR_VAR 0 9
26489: PUSH
26490: EMPTY
26491: ST_TO_ADDR
// if mode then
26492: LD_VAR 0 5
26496: IFFALSE 26565
// begin for i = 1 to result do
26498: LD_ADDR_VAR 0 7
26502: PUSH
26503: DOUBLE
26504: LD_INT 1
26506: DEC
26507: ST_TO_ADDR
26508: LD_VAR 0 6
26512: PUSH
26513: FOR_TO
26514: IFFALSE 26553
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26516: LD_ADDR_VAR 0 9
26520: PUSH
26521: LD_VAR 0 9
26525: PPUSH
26526: LD_VAR 0 7
26530: PPUSH
26531: LD_VAR 0 6
26535: PUSH
26536: LD_VAR 0 7
26540: ARRAY
26541: PUSH
26542: LD_INT 1
26544: ARRAY
26545: PPUSH
26546: CALL_OW 1
26550: ST_TO_ADDR
26551: GO 26513
26553: POP
26554: POP
// result := tmp ;
26555: LD_ADDR_VAR 0 6
26559: PUSH
26560: LD_VAR 0 9
26564: ST_TO_ADDR
// end ; end ;
26565: LD_VAR 0 6
26569: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26570: LD_INT 0
26572: PPUSH
26573: PPUSH
26574: PPUSH
26575: PPUSH
26576: PPUSH
26577: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26578: LD_ADDR_VAR 0 5
26582: PUSH
26583: LD_INT 0
26585: PUSH
26586: LD_INT 0
26588: PUSH
26589: LD_INT 0
26591: PUSH
26592: EMPTY
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: ST_TO_ADDR
// if not x or not y then
26600: LD_VAR 0 2
26604: NOT
26605: PUSH
26606: LD_VAR 0 3
26610: NOT
26611: OR
26612: IFFALSE 26616
// exit ;
26614: GO 28268
// if not range then
26616: LD_VAR 0 4
26620: NOT
26621: IFFALSE 26631
// range := 10 ;
26623: LD_ADDR_VAR 0 4
26627: PUSH
26628: LD_INT 10
26630: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26631: LD_ADDR_VAR 0 8
26635: PUSH
26636: LD_INT 81
26638: PUSH
26639: LD_VAR 0 1
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 92
26650: PUSH
26651: LD_VAR 0 2
26655: PUSH
26656: LD_VAR 0 3
26660: PUSH
26661: LD_VAR 0 4
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 3
26674: PUSH
26675: LD_INT 21
26677: PUSH
26678: LD_INT 3
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: LIST
26693: PPUSH
26694: CALL_OW 69
26698: ST_TO_ADDR
// if not tmp then
26699: LD_VAR 0 8
26703: NOT
26704: IFFALSE 26708
// exit ;
26706: GO 28268
// for i in tmp do
26708: LD_ADDR_VAR 0 6
26712: PUSH
26713: LD_VAR 0 8
26717: PUSH
26718: FOR_IN
26719: IFFALSE 28243
// begin points := [ 0 , 0 , 0 ] ;
26721: LD_ADDR_VAR 0 9
26725: PUSH
26726: LD_INT 0
26728: PUSH
26729: LD_INT 0
26731: PUSH
26732: LD_INT 0
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: LIST
26739: ST_TO_ADDR
// bpoints := 1 ;
26740: LD_ADDR_VAR 0 10
26744: PUSH
26745: LD_INT 1
26747: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26748: LD_VAR 0 6
26752: PPUSH
26753: CALL_OW 247
26757: PUSH
26758: LD_INT 1
26760: DOUBLE
26761: EQUAL
26762: IFTRUE 26766
26764: GO 27344
26766: POP
// begin if GetClass ( i ) = 1 then
26767: LD_VAR 0 6
26771: PPUSH
26772: CALL_OW 257
26776: PUSH
26777: LD_INT 1
26779: EQUAL
26780: IFFALSE 26801
// points := [ 10 , 5 , 3 ] ;
26782: LD_ADDR_VAR 0 9
26786: PUSH
26787: LD_INT 10
26789: PUSH
26790: LD_INT 5
26792: PUSH
26793: LD_INT 3
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: LIST
26800: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26801: LD_VAR 0 6
26805: PPUSH
26806: CALL_OW 257
26810: PUSH
26811: LD_INT 2
26813: PUSH
26814: LD_INT 3
26816: PUSH
26817: LD_INT 4
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: LIST
26824: IN
26825: IFFALSE 26846
// points := [ 3 , 2 , 1 ] ;
26827: LD_ADDR_VAR 0 9
26831: PUSH
26832: LD_INT 3
26834: PUSH
26835: LD_INT 2
26837: PUSH
26838: LD_INT 1
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: LIST
26845: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26846: LD_VAR 0 6
26850: PPUSH
26851: CALL_OW 257
26855: PUSH
26856: LD_INT 5
26858: EQUAL
26859: IFFALSE 26880
// points := [ 130 , 5 , 2 ] ;
26861: LD_ADDR_VAR 0 9
26865: PUSH
26866: LD_INT 130
26868: PUSH
26869: LD_INT 5
26871: PUSH
26872: LD_INT 2
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: LIST
26879: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26880: LD_VAR 0 6
26884: PPUSH
26885: CALL_OW 257
26889: PUSH
26890: LD_INT 8
26892: EQUAL
26893: IFFALSE 26914
// points := [ 35 , 35 , 30 ] ;
26895: LD_ADDR_VAR 0 9
26899: PUSH
26900: LD_INT 35
26902: PUSH
26903: LD_INT 35
26905: PUSH
26906: LD_INT 30
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: LIST
26913: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26914: LD_VAR 0 6
26918: PPUSH
26919: CALL_OW 257
26923: PUSH
26924: LD_INT 9
26926: EQUAL
26927: IFFALSE 26948
// points := [ 20 , 55 , 40 ] ;
26929: LD_ADDR_VAR 0 9
26933: PUSH
26934: LD_INT 20
26936: PUSH
26937: LD_INT 55
26939: PUSH
26940: LD_INT 40
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: LIST
26947: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26948: LD_VAR 0 6
26952: PPUSH
26953: CALL_OW 257
26957: PUSH
26958: LD_INT 12
26960: PUSH
26961: LD_INT 16
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: IN
26968: IFFALSE 26989
// points := [ 5 , 3 , 2 ] ;
26970: LD_ADDR_VAR 0 9
26974: PUSH
26975: LD_INT 5
26977: PUSH
26978: LD_INT 3
26980: PUSH
26981: LD_INT 2
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: LIST
26988: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26989: LD_VAR 0 6
26993: PPUSH
26994: CALL_OW 257
26998: PUSH
26999: LD_INT 17
27001: EQUAL
27002: IFFALSE 27023
// points := [ 100 , 50 , 75 ] ;
27004: LD_ADDR_VAR 0 9
27008: PUSH
27009: LD_INT 100
27011: PUSH
27012: LD_INT 50
27014: PUSH
27015: LD_INT 75
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: LIST
27022: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27023: LD_VAR 0 6
27027: PPUSH
27028: CALL_OW 257
27032: PUSH
27033: LD_INT 15
27035: EQUAL
27036: IFFALSE 27057
// points := [ 10 , 5 , 3 ] ;
27038: LD_ADDR_VAR 0 9
27042: PUSH
27043: LD_INT 10
27045: PUSH
27046: LD_INT 5
27048: PUSH
27049: LD_INT 3
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: LIST
27056: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27057: LD_VAR 0 6
27061: PPUSH
27062: CALL_OW 257
27066: PUSH
27067: LD_INT 14
27069: EQUAL
27070: IFFALSE 27091
// points := [ 10 , 0 , 0 ] ;
27072: LD_ADDR_VAR 0 9
27076: PUSH
27077: LD_INT 10
27079: PUSH
27080: LD_INT 0
27082: PUSH
27083: LD_INT 0
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: LIST
27090: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27091: LD_VAR 0 6
27095: PPUSH
27096: CALL_OW 257
27100: PUSH
27101: LD_INT 11
27103: EQUAL
27104: IFFALSE 27125
// points := [ 30 , 10 , 5 ] ;
27106: LD_ADDR_VAR 0 9
27110: PUSH
27111: LD_INT 30
27113: PUSH
27114: LD_INT 10
27116: PUSH
27117: LD_INT 5
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: LIST
27124: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27125: LD_VAR 0 1
27129: PPUSH
27130: LD_INT 5
27132: PPUSH
27133: CALL_OW 321
27137: PUSH
27138: LD_INT 2
27140: EQUAL
27141: IFFALSE 27158
// bpoints := bpoints * 1.8 ;
27143: LD_ADDR_VAR 0 10
27147: PUSH
27148: LD_VAR 0 10
27152: PUSH
27153: LD_REAL  1.80000000000000E+0000
27156: MUL
27157: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27158: LD_VAR 0 6
27162: PPUSH
27163: CALL_OW 257
27167: PUSH
27168: LD_INT 1
27170: PUSH
27171: LD_INT 2
27173: PUSH
27174: LD_INT 3
27176: PUSH
27177: LD_INT 4
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: IN
27186: PUSH
27187: LD_VAR 0 1
27191: PPUSH
27192: LD_INT 51
27194: PPUSH
27195: CALL_OW 321
27199: PUSH
27200: LD_INT 2
27202: EQUAL
27203: AND
27204: IFFALSE 27221
// bpoints := bpoints * 1.2 ;
27206: LD_ADDR_VAR 0 10
27210: PUSH
27211: LD_VAR 0 10
27215: PUSH
27216: LD_REAL  1.20000000000000E+0000
27219: MUL
27220: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27221: LD_VAR 0 6
27225: PPUSH
27226: CALL_OW 257
27230: PUSH
27231: LD_INT 5
27233: PUSH
27234: LD_INT 7
27236: PUSH
27237: LD_INT 9
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: LIST
27244: IN
27245: PUSH
27246: LD_VAR 0 1
27250: PPUSH
27251: LD_INT 52
27253: PPUSH
27254: CALL_OW 321
27258: PUSH
27259: LD_INT 2
27261: EQUAL
27262: AND
27263: IFFALSE 27280
// bpoints := bpoints * 1.5 ;
27265: LD_ADDR_VAR 0 10
27269: PUSH
27270: LD_VAR 0 10
27274: PUSH
27275: LD_REAL  1.50000000000000E+0000
27278: MUL
27279: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27280: LD_VAR 0 1
27284: PPUSH
27285: LD_INT 66
27287: PPUSH
27288: CALL_OW 321
27292: PUSH
27293: LD_INT 2
27295: EQUAL
27296: IFFALSE 27313
// bpoints := bpoints * 1.1 ;
27298: LD_ADDR_VAR 0 10
27302: PUSH
27303: LD_VAR 0 10
27307: PUSH
27308: LD_REAL  1.10000000000000E+0000
27311: MUL
27312: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27313: LD_ADDR_VAR 0 10
27317: PUSH
27318: LD_VAR 0 10
27322: PUSH
27323: LD_VAR 0 6
27327: PPUSH
27328: LD_INT 1
27330: PPUSH
27331: CALL_OW 259
27335: PUSH
27336: LD_REAL  1.15000000000000E+0000
27339: MUL
27340: MUL
27341: ST_TO_ADDR
// end ; unit_vehicle :
27342: GO 28172
27344: LD_INT 2
27346: DOUBLE
27347: EQUAL
27348: IFTRUE 27352
27350: GO 28160
27352: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27353: LD_VAR 0 6
27357: PPUSH
27358: CALL_OW 264
27362: PUSH
27363: LD_INT 2
27365: PUSH
27366: LD_INT 42
27368: PUSH
27369: LD_INT 24
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: LIST
27376: IN
27377: IFFALSE 27398
// points := [ 25 , 5 , 3 ] ;
27379: LD_ADDR_VAR 0 9
27383: PUSH
27384: LD_INT 25
27386: PUSH
27387: LD_INT 5
27389: PUSH
27390: LD_INT 3
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: LIST
27397: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27398: LD_VAR 0 6
27402: PPUSH
27403: CALL_OW 264
27407: PUSH
27408: LD_INT 4
27410: PUSH
27411: LD_INT 43
27413: PUSH
27414: LD_INT 25
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: LIST
27421: IN
27422: IFFALSE 27443
// points := [ 40 , 15 , 5 ] ;
27424: LD_ADDR_VAR 0 9
27428: PUSH
27429: LD_INT 40
27431: PUSH
27432: LD_INT 15
27434: PUSH
27435: LD_INT 5
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: LIST
27442: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27443: LD_VAR 0 6
27447: PPUSH
27448: CALL_OW 264
27452: PUSH
27453: LD_INT 3
27455: PUSH
27456: LD_INT 23
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: IN
27463: IFFALSE 27484
// points := [ 7 , 25 , 8 ] ;
27465: LD_ADDR_VAR 0 9
27469: PUSH
27470: LD_INT 7
27472: PUSH
27473: LD_INT 25
27475: PUSH
27476: LD_INT 8
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: LIST
27483: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27484: LD_VAR 0 6
27488: PPUSH
27489: CALL_OW 264
27493: PUSH
27494: LD_INT 5
27496: PUSH
27497: LD_INT 27
27499: PUSH
27500: LD_INT 44
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: LIST
27507: IN
27508: IFFALSE 27529
// points := [ 14 , 50 , 16 ] ;
27510: LD_ADDR_VAR 0 9
27514: PUSH
27515: LD_INT 14
27517: PUSH
27518: LD_INT 50
27520: PUSH
27521: LD_INT 16
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: LIST
27528: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27529: LD_VAR 0 6
27533: PPUSH
27534: CALL_OW 264
27538: PUSH
27539: LD_INT 6
27541: PUSH
27542: LD_INT 46
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: IN
27549: IFFALSE 27570
// points := [ 32 , 120 , 70 ] ;
27551: LD_ADDR_VAR 0 9
27555: PUSH
27556: LD_INT 32
27558: PUSH
27559: LD_INT 120
27561: PUSH
27562: LD_INT 70
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: LIST
27569: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
27570: LD_VAR 0 6
27574: PPUSH
27575: CALL_OW 264
27579: PUSH
27580: LD_INT 7
27582: PUSH
27583: LD_INT 28
27585: PUSH
27586: LD_INT 45
27588: PUSH
27589: LD_EXP 75
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: IN
27600: IFFALSE 27621
// points := [ 35 , 20 , 45 ] ;
27602: LD_ADDR_VAR 0 9
27606: PUSH
27607: LD_INT 35
27609: PUSH
27610: LD_INT 20
27612: PUSH
27613: LD_INT 45
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: LIST
27620: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27621: LD_VAR 0 6
27625: PPUSH
27626: CALL_OW 264
27630: PUSH
27631: LD_INT 47
27633: PUSH
27634: EMPTY
27635: LIST
27636: IN
27637: IFFALSE 27658
// points := [ 67 , 45 , 75 ] ;
27639: LD_ADDR_VAR 0 9
27643: PUSH
27644: LD_INT 67
27646: PUSH
27647: LD_INT 45
27649: PUSH
27650: LD_INT 75
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: LIST
27657: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27658: LD_VAR 0 6
27662: PPUSH
27663: CALL_OW 264
27667: PUSH
27668: LD_INT 26
27670: PUSH
27671: EMPTY
27672: LIST
27673: IN
27674: IFFALSE 27695
// points := [ 120 , 30 , 80 ] ;
27676: LD_ADDR_VAR 0 9
27680: PUSH
27681: LD_INT 120
27683: PUSH
27684: LD_INT 30
27686: PUSH
27687: LD_INT 80
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: LIST
27694: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27695: LD_VAR 0 6
27699: PPUSH
27700: CALL_OW 264
27704: PUSH
27705: LD_INT 22
27707: PUSH
27708: EMPTY
27709: LIST
27710: IN
27711: IFFALSE 27732
// points := [ 40 , 1 , 1 ] ;
27713: LD_ADDR_VAR 0 9
27717: PUSH
27718: LD_INT 40
27720: PUSH
27721: LD_INT 1
27723: PUSH
27724: LD_INT 1
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: LIST
27731: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27732: LD_VAR 0 6
27736: PPUSH
27737: CALL_OW 264
27741: PUSH
27742: LD_INT 29
27744: PUSH
27745: EMPTY
27746: LIST
27747: IN
27748: IFFALSE 27769
// points := [ 70 , 200 , 400 ] ;
27750: LD_ADDR_VAR 0 9
27754: PUSH
27755: LD_INT 70
27757: PUSH
27758: LD_INT 200
27760: PUSH
27761: LD_INT 400
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: LIST
27768: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27769: LD_VAR 0 6
27773: PPUSH
27774: CALL_OW 264
27778: PUSH
27779: LD_INT 14
27781: PUSH
27782: LD_INT 53
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: IN
27789: IFFALSE 27810
// points := [ 40 , 10 , 20 ] ;
27791: LD_ADDR_VAR 0 9
27795: PUSH
27796: LD_INT 40
27798: PUSH
27799: LD_INT 10
27801: PUSH
27802: LD_INT 20
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: LIST
27809: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27810: LD_VAR 0 6
27814: PPUSH
27815: CALL_OW 264
27819: PUSH
27820: LD_INT 9
27822: PUSH
27823: EMPTY
27824: LIST
27825: IN
27826: IFFALSE 27847
// points := [ 5 , 70 , 20 ] ;
27828: LD_ADDR_VAR 0 9
27832: PUSH
27833: LD_INT 5
27835: PUSH
27836: LD_INT 70
27838: PUSH
27839: LD_INT 20
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: LIST
27846: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27847: LD_VAR 0 6
27851: PPUSH
27852: CALL_OW 264
27856: PUSH
27857: LD_INT 10
27859: PUSH
27860: EMPTY
27861: LIST
27862: IN
27863: IFFALSE 27884
// points := [ 35 , 110 , 70 ] ;
27865: LD_ADDR_VAR 0 9
27869: PUSH
27870: LD_INT 35
27872: PUSH
27873: LD_INT 110
27875: PUSH
27876: LD_INT 70
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: LIST
27883: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27884: LD_VAR 0 6
27888: PPUSH
27889: CALL_OW 265
27893: PUSH
27894: LD_INT 25
27896: EQUAL
27897: IFFALSE 27918
// points := [ 80 , 65 , 100 ] ;
27899: LD_ADDR_VAR 0 9
27903: PUSH
27904: LD_INT 80
27906: PUSH
27907: LD_INT 65
27909: PUSH
27910: LD_INT 100
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: LIST
27917: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27918: LD_VAR 0 6
27922: PPUSH
27923: CALL_OW 263
27927: PUSH
27928: LD_INT 1
27930: EQUAL
27931: IFFALSE 27966
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27933: LD_ADDR_VAR 0 10
27937: PUSH
27938: LD_VAR 0 10
27942: PUSH
27943: LD_VAR 0 6
27947: PPUSH
27948: CALL_OW 311
27952: PPUSH
27953: LD_INT 3
27955: PPUSH
27956: CALL_OW 259
27960: PUSH
27961: LD_INT 4
27963: MUL
27964: MUL
27965: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27966: LD_VAR 0 6
27970: PPUSH
27971: CALL_OW 263
27975: PUSH
27976: LD_INT 2
27978: EQUAL
27979: IFFALSE 28030
// begin j := IsControledBy ( i ) ;
27981: LD_ADDR_VAR 0 7
27985: PUSH
27986: LD_VAR 0 6
27990: PPUSH
27991: CALL_OW 312
27995: ST_TO_ADDR
// if j then
27996: LD_VAR 0 7
28000: IFFALSE 28030
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28002: LD_ADDR_VAR 0 10
28006: PUSH
28007: LD_VAR 0 10
28011: PUSH
28012: LD_VAR 0 7
28016: PPUSH
28017: LD_INT 3
28019: PPUSH
28020: CALL_OW 259
28024: PUSH
28025: LD_INT 3
28027: MUL
28028: MUL
28029: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28030: LD_VAR 0 6
28034: PPUSH
28035: CALL_OW 264
28039: PUSH
28040: LD_INT 5
28042: PUSH
28043: LD_INT 6
28045: PUSH
28046: LD_INT 46
28048: PUSH
28049: LD_INT 44
28051: PUSH
28052: LD_INT 47
28054: PUSH
28055: LD_INT 45
28057: PUSH
28058: LD_INT 28
28060: PUSH
28061: LD_INT 7
28063: PUSH
28064: LD_INT 27
28066: PUSH
28067: LD_INT 29
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: IN
28082: PUSH
28083: LD_VAR 0 1
28087: PPUSH
28088: LD_INT 52
28090: PPUSH
28091: CALL_OW 321
28095: PUSH
28096: LD_INT 2
28098: EQUAL
28099: AND
28100: IFFALSE 28117
// bpoints := bpoints * 1.2 ;
28102: LD_ADDR_VAR 0 10
28106: PUSH
28107: LD_VAR 0 10
28111: PUSH
28112: LD_REAL  1.20000000000000E+0000
28115: MUL
28116: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28117: LD_VAR 0 6
28121: PPUSH
28122: CALL_OW 264
28126: PUSH
28127: LD_INT 6
28129: PUSH
28130: LD_INT 46
28132: PUSH
28133: LD_INT 47
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: LIST
28140: IN
28141: IFFALSE 28158
// bpoints := bpoints * 1.2 ;
28143: LD_ADDR_VAR 0 10
28147: PUSH
28148: LD_VAR 0 10
28152: PUSH
28153: LD_REAL  1.20000000000000E+0000
28156: MUL
28157: ST_TO_ADDR
// end ; unit_building :
28158: GO 28172
28160: LD_INT 3
28162: DOUBLE
28163: EQUAL
28164: IFTRUE 28168
28166: GO 28171
28168: POP
// ; end ;
28169: GO 28172
28171: POP
// for j = 1 to 3 do
28172: LD_ADDR_VAR 0 7
28176: PUSH
28177: DOUBLE
28178: LD_INT 1
28180: DEC
28181: ST_TO_ADDR
28182: LD_INT 3
28184: PUSH
28185: FOR_TO
28186: IFFALSE 28239
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28188: LD_ADDR_VAR 0 5
28192: PUSH
28193: LD_VAR 0 5
28197: PPUSH
28198: LD_VAR 0 7
28202: PPUSH
28203: LD_VAR 0 5
28207: PUSH
28208: LD_VAR 0 7
28212: ARRAY
28213: PUSH
28214: LD_VAR 0 9
28218: PUSH
28219: LD_VAR 0 7
28223: ARRAY
28224: PUSH
28225: LD_VAR 0 10
28229: MUL
28230: PLUS
28231: PPUSH
28232: CALL_OW 1
28236: ST_TO_ADDR
28237: GO 28185
28239: POP
28240: POP
// end ;
28241: GO 26718
28243: POP
28244: POP
// result := Replace ( result , 4 , tmp ) ;
28245: LD_ADDR_VAR 0 5
28249: PUSH
28250: LD_VAR 0 5
28254: PPUSH
28255: LD_INT 4
28257: PPUSH
28258: LD_VAR 0 8
28262: PPUSH
28263: CALL_OW 1
28267: ST_TO_ADDR
// end ;
28268: LD_VAR 0 5
28272: RET
// export function DangerAtRange ( unit , range ) ; begin
28273: LD_INT 0
28275: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28276: LD_ADDR_VAR 0 3
28280: PUSH
28281: LD_VAR 0 1
28285: PPUSH
28286: CALL_OW 255
28290: PPUSH
28291: LD_VAR 0 1
28295: PPUSH
28296: CALL_OW 250
28300: PPUSH
28301: LD_VAR 0 1
28305: PPUSH
28306: CALL_OW 251
28310: PPUSH
28311: LD_VAR 0 2
28315: PPUSH
28316: CALL 26570 0 4
28320: ST_TO_ADDR
// end ;
28321: LD_VAR 0 3
28325: RET
// export function DangerInArea ( side , area ) ; begin
28326: LD_INT 0
28328: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28329: LD_ADDR_VAR 0 3
28333: PUSH
28334: LD_VAR 0 2
28338: PPUSH
28339: LD_INT 81
28341: PUSH
28342: LD_VAR 0 1
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PPUSH
28351: CALL_OW 70
28355: ST_TO_ADDR
// end ;
28356: LD_VAR 0 3
28360: RET
// export function IsExtension ( b ) ; begin
28361: LD_INT 0
28363: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28364: LD_ADDR_VAR 0 2
28368: PUSH
28369: LD_VAR 0 1
28373: PUSH
28374: LD_INT 23
28376: PUSH
28377: LD_INT 20
28379: PUSH
28380: LD_INT 22
28382: PUSH
28383: LD_INT 17
28385: PUSH
28386: LD_INT 24
28388: PUSH
28389: LD_INT 21
28391: PUSH
28392: LD_INT 19
28394: PUSH
28395: LD_INT 16
28397: PUSH
28398: LD_INT 25
28400: PUSH
28401: LD_INT 18
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: IN
28416: ST_TO_ADDR
// end ;
28417: LD_VAR 0 2
28421: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
28422: LD_INT 0
28424: PPUSH
28425: PPUSH
28426: PPUSH
// result := [ ] ;
28427: LD_ADDR_VAR 0 4
28431: PUSH
28432: EMPTY
28433: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28434: LD_ADDR_VAR 0 5
28438: PUSH
28439: LD_VAR 0 2
28443: PPUSH
28444: LD_INT 21
28446: PUSH
28447: LD_INT 3
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PPUSH
28454: CALL_OW 70
28458: ST_TO_ADDR
// if not tmp then
28459: LD_VAR 0 5
28463: NOT
28464: IFFALSE 28468
// exit ;
28466: GO 28532
// if checkLink then
28468: LD_VAR 0 3
28472: IFFALSE 28522
// begin for i in tmp do
28474: LD_ADDR_VAR 0 6
28478: PUSH
28479: LD_VAR 0 5
28483: PUSH
28484: FOR_IN
28485: IFFALSE 28520
// if GetBase ( i ) <> base then
28487: LD_VAR 0 6
28491: PPUSH
28492: CALL_OW 274
28496: PUSH
28497: LD_VAR 0 1
28501: NONEQUAL
28502: IFFALSE 28518
// ComLinkToBase ( base , i ) ;
28504: LD_VAR 0 1
28508: PPUSH
28509: LD_VAR 0 6
28513: PPUSH
28514: CALL_OW 169
28518: GO 28484
28520: POP
28521: POP
// end ; result := tmp ;
28522: LD_ADDR_VAR 0 4
28526: PUSH
28527: LD_VAR 0 5
28531: ST_TO_ADDR
// end ;
28532: LD_VAR 0 4
28536: RET
// export function ComComplete ( units , b ) ; var i ; begin
28537: LD_INT 0
28539: PPUSH
28540: PPUSH
// if not units then
28541: LD_VAR 0 1
28545: NOT
28546: IFFALSE 28550
// exit ;
28548: GO 28640
// for i in units do
28550: LD_ADDR_VAR 0 4
28554: PUSH
28555: LD_VAR 0 1
28559: PUSH
28560: FOR_IN
28561: IFFALSE 28638
// if BuildingStatus ( b ) = bs_build then
28563: LD_VAR 0 2
28567: PPUSH
28568: CALL_OW 461
28572: PUSH
28573: LD_INT 1
28575: EQUAL
28576: IFFALSE 28636
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28578: LD_VAR 0 4
28582: PPUSH
28583: LD_STRING h
28585: PUSH
28586: LD_VAR 0 2
28590: PPUSH
28591: CALL_OW 250
28595: PUSH
28596: LD_VAR 0 2
28600: PPUSH
28601: CALL_OW 251
28605: PUSH
28606: LD_VAR 0 2
28610: PUSH
28611: LD_INT 0
28613: PUSH
28614: LD_INT 0
28616: PUSH
28617: LD_INT 0
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: PUSH
28629: EMPTY
28630: LIST
28631: PPUSH
28632: CALL_OW 446
28636: GO 28560
28638: POP
28639: POP
// end ;
28640: LD_VAR 0 3
28644: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28645: LD_INT 0
28647: PPUSH
28648: PPUSH
28649: PPUSH
28650: PPUSH
28651: PPUSH
28652: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
28653: LD_VAR 0 1
28657: NOT
28658: PUSH
28659: LD_VAR 0 1
28663: PPUSH
28664: CALL_OW 263
28668: PUSH
28669: LD_INT 2
28671: NONEQUAL
28672: OR
28673: IFFALSE 28677
// exit ;
28675: GO 28993
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28677: LD_ADDR_VAR 0 6
28681: PUSH
28682: LD_INT 22
28684: PUSH
28685: LD_VAR 0 1
28689: PPUSH
28690: CALL_OW 255
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 2
28701: PUSH
28702: LD_INT 30
28704: PUSH
28705: LD_INT 36
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 34
28714: PUSH
28715: LD_INT 31
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: LIST
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PPUSH
28731: CALL_OW 69
28735: ST_TO_ADDR
// if not tmp then
28736: LD_VAR 0 6
28740: NOT
28741: IFFALSE 28745
// exit ;
28743: GO 28993
// result := [ ] ;
28745: LD_ADDR_VAR 0 2
28749: PUSH
28750: EMPTY
28751: ST_TO_ADDR
// for i in tmp do
28752: LD_ADDR_VAR 0 3
28756: PUSH
28757: LD_VAR 0 6
28761: PUSH
28762: FOR_IN
28763: IFFALSE 28834
// begin t := UnitsInside ( i ) ;
28765: LD_ADDR_VAR 0 4
28769: PUSH
28770: LD_VAR 0 3
28774: PPUSH
28775: CALL_OW 313
28779: ST_TO_ADDR
// if t then
28780: LD_VAR 0 4
28784: IFFALSE 28832
// for j in t do
28786: LD_ADDR_VAR 0 7
28790: PUSH
28791: LD_VAR 0 4
28795: PUSH
28796: FOR_IN
28797: IFFALSE 28830
// result := Replace ( result , result + 1 , j ) ;
28799: LD_ADDR_VAR 0 2
28803: PUSH
28804: LD_VAR 0 2
28808: PPUSH
28809: LD_VAR 0 2
28813: PUSH
28814: LD_INT 1
28816: PLUS
28817: PPUSH
28818: LD_VAR 0 7
28822: PPUSH
28823: CALL_OW 1
28827: ST_TO_ADDR
28828: GO 28796
28830: POP
28831: POP
// end ;
28832: GO 28762
28834: POP
28835: POP
// if not result then
28836: LD_VAR 0 2
28840: NOT
28841: IFFALSE 28845
// exit ;
28843: GO 28993
// mech := result [ 1 ] ;
28845: LD_ADDR_VAR 0 5
28849: PUSH
28850: LD_VAR 0 2
28854: PUSH
28855: LD_INT 1
28857: ARRAY
28858: ST_TO_ADDR
// if result > 1 then
28859: LD_VAR 0 2
28863: PUSH
28864: LD_INT 1
28866: GREATER
28867: IFFALSE 28979
// begin for i = 2 to result do
28869: LD_ADDR_VAR 0 3
28873: PUSH
28874: DOUBLE
28875: LD_INT 2
28877: DEC
28878: ST_TO_ADDR
28879: LD_VAR 0 2
28883: PUSH
28884: FOR_TO
28885: IFFALSE 28977
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28887: LD_ADDR_VAR 0 4
28891: PUSH
28892: LD_VAR 0 2
28896: PUSH
28897: LD_VAR 0 3
28901: ARRAY
28902: PPUSH
28903: LD_INT 3
28905: PPUSH
28906: CALL_OW 259
28910: PUSH
28911: LD_VAR 0 2
28915: PUSH
28916: LD_VAR 0 3
28920: ARRAY
28921: PPUSH
28922: CALL_OW 432
28926: MINUS
28927: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28928: LD_VAR 0 4
28932: PUSH
28933: LD_VAR 0 5
28937: PPUSH
28938: LD_INT 3
28940: PPUSH
28941: CALL_OW 259
28945: PUSH
28946: LD_VAR 0 5
28950: PPUSH
28951: CALL_OW 432
28955: MINUS
28956: GREATEREQUAL
28957: IFFALSE 28975
// mech := result [ i ] ;
28959: LD_ADDR_VAR 0 5
28963: PUSH
28964: LD_VAR 0 2
28968: PUSH
28969: LD_VAR 0 3
28973: ARRAY
28974: ST_TO_ADDR
// end ;
28975: GO 28884
28977: POP
28978: POP
// end ; ComLinkTo ( vehicle , mech ) ;
28979: LD_VAR 0 1
28983: PPUSH
28984: LD_VAR 0 5
28988: PPUSH
28989: CALL_OW 135
// end ;
28993: LD_VAR 0 2
28997: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28998: LD_INT 0
29000: PPUSH
29001: PPUSH
29002: PPUSH
29003: PPUSH
29004: PPUSH
29005: PPUSH
29006: PPUSH
29007: PPUSH
29008: PPUSH
29009: PPUSH
29010: PPUSH
29011: PPUSH
29012: PPUSH
// result := [ ] ;
29013: LD_ADDR_VAR 0 7
29017: PUSH
29018: EMPTY
29019: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29020: LD_VAR 0 1
29024: PPUSH
29025: CALL_OW 266
29029: PUSH
29030: LD_INT 0
29032: PUSH
29033: LD_INT 1
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: IN
29040: NOT
29041: IFFALSE 29045
// exit ;
29043: GO 30679
// if name then
29045: LD_VAR 0 3
29049: IFFALSE 29065
// SetBName ( base_dep , name ) ;
29051: LD_VAR 0 1
29055: PPUSH
29056: LD_VAR 0 3
29060: PPUSH
29061: CALL_OW 500
// base := GetBase ( base_dep ) ;
29065: LD_ADDR_VAR 0 15
29069: PUSH
29070: LD_VAR 0 1
29074: PPUSH
29075: CALL_OW 274
29079: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29080: LD_ADDR_VAR 0 16
29084: PUSH
29085: LD_VAR 0 1
29089: PPUSH
29090: CALL_OW 255
29094: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29095: LD_ADDR_VAR 0 17
29099: PUSH
29100: LD_VAR 0 1
29104: PPUSH
29105: CALL_OW 248
29109: ST_TO_ADDR
// if sources then
29110: LD_VAR 0 5
29114: IFFALSE 29161
// for i = 1 to 3 do
29116: LD_ADDR_VAR 0 8
29120: PUSH
29121: DOUBLE
29122: LD_INT 1
29124: DEC
29125: ST_TO_ADDR
29126: LD_INT 3
29128: PUSH
29129: FOR_TO
29130: IFFALSE 29159
// AddResourceType ( base , i , sources [ i ] ) ;
29132: LD_VAR 0 15
29136: PPUSH
29137: LD_VAR 0 8
29141: PPUSH
29142: LD_VAR 0 5
29146: PUSH
29147: LD_VAR 0 8
29151: ARRAY
29152: PPUSH
29153: CALL_OW 276
29157: GO 29129
29159: POP
29160: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29161: LD_ADDR_VAR 0 18
29165: PUSH
29166: LD_VAR 0 15
29170: PPUSH
29171: LD_VAR 0 2
29175: PPUSH
29176: LD_INT 1
29178: PPUSH
29179: CALL 28422 0 3
29183: ST_TO_ADDR
// InitHc ;
29184: CALL_OW 19
// InitUc ;
29188: CALL_OW 18
// uc_side := side ;
29192: LD_ADDR_OWVAR 20
29196: PUSH
29197: LD_VAR 0 16
29201: ST_TO_ADDR
// uc_nation := nation ;
29202: LD_ADDR_OWVAR 21
29206: PUSH
29207: LD_VAR 0 17
29211: ST_TO_ADDR
// if buildings then
29212: LD_VAR 0 18
29216: IFFALSE 30538
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29218: LD_ADDR_VAR 0 19
29222: PUSH
29223: LD_VAR 0 18
29227: PPUSH
29228: LD_INT 2
29230: PUSH
29231: LD_INT 30
29233: PUSH
29234: LD_INT 29
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PUSH
29241: LD_INT 30
29243: PUSH
29244: LD_INT 30
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: LIST
29255: PPUSH
29256: CALL_OW 72
29260: ST_TO_ADDR
// if tmp then
29261: LD_VAR 0 19
29265: IFFALSE 29313
// for i in tmp do
29267: LD_ADDR_VAR 0 8
29271: PUSH
29272: LD_VAR 0 19
29276: PUSH
29277: FOR_IN
29278: IFFALSE 29311
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29280: LD_VAR 0 8
29284: PPUSH
29285: CALL_OW 250
29289: PPUSH
29290: LD_VAR 0 8
29294: PPUSH
29295: CALL_OW 251
29299: PPUSH
29300: LD_VAR 0 16
29304: PPUSH
29305: CALL_OW 441
29309: GO 29277
29311: POP
29312: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29313: LD_VAR 0 18
29317: PPUSH
29318: LD_INT 2
29320: PUSH
29321: LD_INT 30
29323: PUSH
29324: LD_INT 32
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 30
29333: PUSH
29334: LD_INT 33
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: LIST
29345: PPUSH
29346: CALL_OW 72
29350: IFFALSE 29438
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29352: LD_ADDR_VAR 0 8
29356: PUSH
29357: LD_VAR 0 18
29361: PPUSH
29362: LD_INT 2
29364: PUSH
29365: LD_INT 30
29367: PUSH
29368: LD_INT 32
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 30
29377: PUSH
29378: LD_INT 33
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: LIST
29389: PPUSH
29390: CALL_OW 72
29394: PUSH
29395: FOR_IN
29396: IFFALSE 29436
// begin if not GetBWeapon ( i ) then
29398: LD_VAR 0 8
29402: PPUSH
29403: CALL_OW 269
29407: NOT
29408: IFFALSE 29434
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29410: LD_VAR 0 8
29414: PPUSH
29415: LD_VAR 0 8
29419: PPUSH
29420: LD_VAR 0 2
29424: PPUSH
29425: CALL 30684 0 2
29429: PPUSH
29430: CALL_OW 431
// end ;
29434: GO 29395
29436: POP
29437: POP
// end ; for i = 1 to personel do
29438: LD_ADDR_VAR 0 8
29442: PUSH
29443: DOUBLE
29444: LD_INT 1
29446: DEC
29447: ST_TO_ADDR
29448: LD_VAR 0 6
29452: PUSH
29453: FOR_TO
29454: IFFALSE 30518
// begin if i > 4 then
29456: LD_VAR 0 8
29460: PUSH
29461: LD_INT 4
29463: GREATER
29464: IFFALSE 29468
// break ;
29466: GO 30518
// case i of 1 :
29468: LD_VAR 0 8
29472: PUSH
29473: LD_INT 1
29475: DOUBLE
29476: EQUAL
29477: IFTRUE 29481
29479: GO 29561
29481: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29482: LD_ADDR_VAR 0 12
29486: PUSH
29487: LD_VAR 0 18
29491: PPUSH
29492: LD_INT 22
29494: PUSH
29495: LD_VAR 0 16
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 58
29506: PUSH
29507: EMPTY
29508: LIST
29509: PUSH
29510: LD_INT 2
29512: PUSH
29513: LD_INT 30
29515: PUSH
29516: LD_INT 32
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: PUSH
29523: LD_INT 30
29525: PUSH
29526: LD_INT 4
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: LD_INT 30
29535: PUSH
29536: LD_INT 5
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: LIST
29553: PPUSH
29554: CALL_OW 72
29558: ST_TO_ADDR
29559: GO 29783
29561: LD_INT 2
29563: DOUBLE
29564: EQUAL
29565: IFTRUE 29569
29567: GO 29631
29569: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29570: LD_ADDR_VAR 0 12
29574: PUSH
29575: LD_VAR 0 18
29579: PPUSH
29580: LD_INT 22
29582: PUSH
29583: LD_VAR 0 16
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 2
29594: PUSH
29595: LD_INT 30
29597: PUSH
29598: LD_INT 0
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: LD_INT 30
29607: PUSH
29608: LD_INT 1
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: LIST
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PPUSH
29624: CALL_OW 72
29628: ST_TO_ADDR
29629: GO 29783
29631: LD_INT 3
29633: DOUBLE
29634: EQUAL
29635: IFTRUE 29639
29637: GO 29701
29639: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29640: LD_ADDR_VAR 0 12
29644: PUSH
29645: LD_VAR 0 18
29649: PPUSH
29650: LD_INT 22
29652: PUSH
29653: LD_VAR 0 16
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 2
29664: PUSH
29665: LD_INT 30
29667: PUSH
29668: LD_INT 2
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 30
29677: PUSH
29678: LD_INT 3
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: LIST
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PPUSH
29694: CALL_OW 72
29698: ST_TO_ADDR
29699: GO 29783
29701: LD_INT 4
29703: DOUBLE
29704: EQUAL
29705: IFTRUE 29709
29707: GO 29782
29709: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29710: LD_ADDR_VAR 0 12
29714: PUSH
29715: LD_VAR 0 18
29719: PPUSH
29720: LD_INT 22
29722: PUSH
29723: LD_VAR 0 16
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: LD_INT 2
29734: PUSH
29735: LD_INT 30
29737: PUSH
29738: LD_INT 6
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 30
29747: PUSH
29748: LD_INT 7
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: LD_INT 30
29757: PUSH
29758: LD_INT 8
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PPUSH
29775: CALL_OW 72
29779: ST_TO_ADDR
29780: GO 29783
29782: POP
// if i = 1 then
29783: LD_VAR 0 8
29787: PUSH
29788: LD_INT 1
29790: EQUAL
29791: IFFALSE 29902
// begin tmp := [ ] ;
29793: LD_ADDR_VAR 0 19
29797: PUSH
29798: EMPTY
29799: ST_TO_ADDR
// for j in f do
29800: LD_ADDR_VAR 0 9
29804: PUSH
29805: LD_VAR 0 12
29809: PUSH
29810: FOR_IN
29811: IFFALSE 29884
// if GetBType ( j ) = b_bunker then
29813: LD_VAR 0 9
29817: PPUSH
29818: CALL_OW 266
29822: PUSH
29823: LD_INT 32
29825: EQUAL
29826: IFFALSE 29853
// tmp := Insert ( tmp , 1 , j ) else
29828: LD_ADDR_VAR 0 19
29832: PUSH
29833: LD_VAR 0 19
29837: PPUSH
29838: LD_INT 1
29840: PPUSH
29841: LD_VAR 0 9
29845: PPUSH
29846: CALL_OW 2
29850: ST_TO_ADDR
29851: GO 29882
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29853: LD_ADDR_VAR 0 19
29857: PUSH
29858: LD_VAR 0 19
29862: PPUSH
29863: LD_VAR 0 19
29867: PUSH
29868: LD_INT 1
29870: PLUS
29871: PPUSH
29872: LD_VAR 0 9
29876: PPUSH
29877: CALL_OW 2
29881: ST_TO_ADDR
29882: GO 29810
29884: POP
29885: POP
// if tmp then
29886: LD_VAR 0 19
29890: IFFALSE 29902
// f := tmp ;
29892: LD_ADDR_VAR 0 12
29896: PUSH
29897: LD_VAR 0 19
29901: ST_TO_ADDR
// end ; x := personel [ i ] ;
29902: LD_ADDR_VAR 0 13
29906: PUSH
29907: LD_VAR 0 6
29911: PUSH
29912: LD_VAR 0 8
29916: ARRAY
29917: ST_TO_ADDR
// if x = - 1 then
29918: LD_VAR 0 13
29922: PUSH
29923: LD_INT 1
29925: NEG
29926: EQUAL
29927: IFFALSE 30136
// begin for j in f do
29929: LD_ADDR_VAR 0 9
29933: PUSH
29934: LD_VAR 0 12
29938: PUSH
29939: FOR_IN
29940: IFFALSE 30132
// repeat InitHc ;
29942: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29946: LD_VAR 0 9
29950: PPUSH
29951: CALL_OW 266
29955: PUSH
29956: LD_INT 5
29958: EQUAL
29959: IFFALSE 30029
// begin if UnitsInside ( j ) < 3 then
29961: LD_VAR 0 9
29965: PPUSH
29966: CALL_OW 313
29970: PUSH
29971: LD_INT 3
29973: LESS
29974: IFFALSE 30010
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29976: LD_INT 0
29978: PPUSH
29979: LD_INT 5
29981: PUSH
29982: LD_INT 8
29984: PUSH
29985: LD_INT 9
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: LIST
29992: PUSH
29993: LD_VAR 0 17
29997: ARRAY
29998: PPUSH
29999: LD_VAR 0 4
30003: PPUSH
30004: CALL_OW 380
30008: GO 30027
// PrepareHuman ( false , i , skill ) ;
30010: LD_INT 0
30012: PPUSH
30013: LD_VAR 0 8
30017: PPUSH
30018: LD_VAR 0 4
30022: PPUSH
30023: CALL_OW 380
// end else
30027: GO 30046
// PrepareHuman ( false , i , skill ) ;
30029: LD_INT 0
30031: PPUSH
30032: LD_VAR 0 8
30036: PPUSH
30037: LD_VAR 0 4
30041: PPUSH
30042: CALL_OW 380
// un := CreateHuman ;
30046: LD_ADDR_VAR 0 14
30050: PUSH
30051: CALL_OW 44
30055: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30056: LD_ADDR_VAR 0 7
30060: PUSH
30061: LD_VAR 0 7
30065: PPUSH
30066: LD_INT 1
30068: PPUSH
30069: LD_VAR 0 14
30073: PPUSH
30074: CALL_OW 2
30078: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30079: LD_VAR 0 14
30083: PPUSH
30084: LD_VAR 0 9
30088: PPUSH
30089: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30093: LD_VAR 0 9
30097: PPUSH
30098: CALL_OW 313
30102: PUSH
30103: LD_INT 6
30105: EQUAL
30106: PUSH
30107: LD_VAR 0 9
30111: PPUSH
30112: CALL_OW 266
30116: PUSH
30117: LD_INT 32
30119: PUSH
30120: LD_INT 31
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: IN
30127: OR
30128: IFFALSE 29942
30130: GO 29939
30132: POP
30133: POP
// end else
30134: GO 30516
// for j = 1 to x do
30136: LD_ADDR_VAR 0 9
30140: PUSH
30141: DOUBLE
30142: LD_INT 1
30144: DEC
30145: ST_TO_ADDR
30146: LD_VAR 0 13
30150: PUSH
30151: FOR_TO
30152: IFFALSE 30514
// begin InitHc ;
30154: CALL_OW 19
// if not f then
30158: LD_VAR 0 12
30162: NOT
30163: IFFALSE 30252
// begin PrepareHuman ( false , i , skill ) ;
30165: LD_INT 0
30167: PPUSH
30168: LD_VAR 0 8
30172: PPUSH
30173: LD_VAR 0 4
30177: PPUSH
30178: CALL_OW 380
// un := CreateHuman ;
30182: LD_ADDR_VAR 0 14
30186: PUSH
30187: CALL_OW 44
30191: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30192: LD_ADDR_VAR 0 7
30196: PUSH
30197: LD_VAR 0 7
30201: PPUSH
30202: LD_INT 1
30204: PPUSH
30205: LD_VAR 0 14
30209: PPUSH
30210: CALL_OW 2
30214: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30215: LD_VAR 0 14
30219: PPUSH
30220: LD_VAR 0 1
30224: PPUSH
30225: CALL_OW 250
30229: PPUSH
30230: LD_VAR 0 1
30234: PPUSH
30235: CALL_OW 251
30239: PPUSH
30240: LD_INT 10
30242: PPUSH
30243: LD_INT 0
30245: PPUSH
30246: CALL_OW 50
// continue ;
30250: GO 30151
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30252: LD_VAR 0 12
30256: PUSH
30257: LD_INT 1
30259: ARRAY
30260: PPUSH
30261: CALL_OW 313
30265: PUSH
30266: LD_VAR 0 12
30270: PUSH
30271: LD_INT 1
30273: ARRAY
30274: PPUSH
30275: CALL_OW 266
30279: PUSH
30280: LD_INT 32
30282: PUSH
30283: LD_INT 31
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: IN
30290: AND
30291: PUSH
30292: LD_VAR 0 12
30296: PUSH
30297: LD_INT 1
30299: ARRAY
30300: PPUSH
30301: CALL_OW 313
30305: PUSH
30306: LD_INT 6
30308: EQUAL
30309: OR
30310: IFFALSE 30330
// f := Delete ( f , 1 ) ;
30312: LD_ADDR_VAR 0 12
30316: PUSH
30317: LD_VAR 0 12
30321: PPUSH
30322: LD_INT 1
30324: PPUSH
30325: CALL_OW 3
30329: ST_TO_ADDR
// if not f then
30330: LD_VAR 0 12
30334: NOT
30335: IFFALSE 30353
// begin x := x + 2 ;
30337: LD_ADDR_VAR 0 13
30341: PUSH
30342: LD_VAR 0 13
30346: PUSH
30347: LD_INT 2
30349: PLUS
30350: ST_TO_ADDR
// continue ;
30351: GO 30151
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30353: LD_VAR 0 12
30357: PUSH
30358: LD_INT 1
30360: ARRAY
30361: PPUSH
30362: CALL_OW 266
30366: PUSH
30367: LD_INT 5
30369: EQUAL
30370: IFFALSE 30444
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30372: LD_VAR 0 12
30376: PUSH
30377: LD_INT 1
30379: ARRAY
30380: PPUSH
30381: CALL_OW 313
30385: PUSH
30386: LD_INT 3
30388: LESS
30389: IFFALSE 30425
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30391: LD_INT 0
30393: PPUSH
30394: LD_INT 5
30396: PUSH
30397: LD_INT 8
30399: PUSH
30400: LD_INT 9
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: LIST
30407: PUSH
30408: LD_VAR 0 17
30412: ARRAY
30413: PPUSH
30414: LD_VAR 0 4
30418: PPUSH
30419: CALL_OW 380
30423: GO 30442
// PrepareHuman ( false , i , skill ) ;
30425: LD_INT 0
30427: PPUSH
30428: LD_VAR 0 8
30432: PPUSH
30433: LD_VAR 0 4
30437: PPUSH
30438: CALL_OW 380
// end else
30442: GO 30461
// PrepareHuman ( false , i , skill ) ;
30444: LD_INT 0
30446: PPUSH
30447: LD_VAR 0 8
30451: PPUSH
30452: LD_VAR 0 4
30456: PPUSH
30457: CALL_OW 380
// un := CreateHuman ;
30461: LD_ADDR_VAR 0 14
30465: PUSH
30466: CALL_OW 44
30470: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30471: LD_ADDR_VAR 0 7
30475: PUSH
30476: LD_VAR 0 7
30480: PPUSH
30481: LD_INT 1
30483: PPUSH
30484: LD_VAR 0 14
30488: PPUSH
30489: CALL_OW 2
30493: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30494: LD_VAR 0 14
30498: PPUSH
30499: LD_VAR 0 12
30503: PUSH
30504: LD_INT 1
30506: ARRAY
30507: PPUSH
30508: CALL_OW 52
// end ;
30512: GO 30151
30514: POP
30515: POP
// end ;
30516: GO 29453
30518: POP
30519: POP
// result := result ^ buildings ;
30520: LD_ADDR_VAR 0 7
30524: PUSH
30525: LD_VAR 0 7
30529: PUSH
30530: LD_VAR 0 18
30534: ADD
30535: ST_TO_ADDR
// end else
30536: GO 30679
// begin for i = 1 to personel do
30538: LD_ADDR_VAR 0 8
30542: PUSH
30543: DOUBLE
30544: LD_INT 1
30546: DEC
30547: ST_TO_ADDR
30548: LD_VAR 0 6
30552: PUSH
30553: FOR_TO
30554: IFFALSE 30677
// begin if i > 4 then
30556: LD_VAR 0 8
30560: PUSH
30561: LD_INT 4
30563: GREATER
30564: IFFALSE 30568
// break ;
30566: GO 30677
// x := personel [ i ] ;
30568: LD_ADDR_VAR 0 13
30572: PUSH
30573: LD_VAR 0 6
30577: PUSH
30578: LD_VAR 0 8
30582: ARRAY
30583: ST_TO_ADDR
// if x = - 1 then
30584: LD_VAR 0 13
30588: PUSH
30589: LD_INT 1
30591: NEG
30592: EQUAL
30593: IFFALSE 30597
// continue ;
30595: GO 30553
// PrepareHuman ( false , i , skill ) ;
30597: LD_INT 0
30599: PPUSH
30600: LD_VAR 0 8
30604: PPUSH
30605: LD_VAR 0 4
30609: PPUSH
30610: CALL_OW 380
// un := CreateHuman ;
30614: LD_ADDR_VAR 0 14
30618: PUSH
30619: CALL_OW 44
30623: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30624: LD_VAR 0 14
30628: PPUSH
30629: LD_VAR 0 1
30633: PPUSH
30634: CALL_OW 250
30638: PPUSH
30639: LD_VAR 0 1
30643: PPUSH
30644: CALL_OW 251
30648: PPUSH
30649: LD_INT 10
30651: PPUSH
30652: LD_INT 0
30654: PPUSH
30655: CALL_OW 50
// result := result ^ un ;
30659: LD_ADDR_VAR 0 7
30663: PUSH
30664: LD_VAR 0 7
30668: PUSH
30669: LD_VAR 0 14
30673: ADD
30674: ST_TO_ADDR
// end ;
30675: GO 30553
30677: POP
30678: POP
// end ; end ;
30679: LD_VAR 0 7
30683: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30684: LD_INT 0
30686: PPUSH
30687: PPUSH
30688: PPUSH
30689: PPUSH
30690: PPUSH
30691: PPUSH
30692: PPUSH
30693: PPUSH
30694: PPUSH
30695: PPUSH
30696: PPUSH
30697: PPUSH
30698: PPUSH
30699: PPUSH
30700: PPUSH
30701: PPUSH
// result := false ;
30702: LD_ADDR_VAR 0 3
30706: PUSH
30707: LD_INT 0
30709: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30710: LD_VAR 0 1
30714: NOT
30715: PUSH
30716: LD_VAR 0 1
30720: PPUSH
30721: CALL_OW 266
30725: PUSH
30726: LD_INT 32
30728: PUSH
30729: LD_INT 33
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: IN
30736: NOT
30737: OR
30738: IFFALSE 30742
// exit ;
30740: GO 31851
// nat := GetNation ( tower ) ;
30742: LD_ADDR_VAR 0 12
30746: PUSH
30747: LD_VAR 0 1
30751: PPUSH
30752: CALL_OW 248
30756: ST_TO_ADDR
// side := GetSide ( tower ) ;
30757: LD_ADDR_VAR 0 16
30761: PUSH
30762: LD_VAR 0 1
30766: PPUSH
30767: CALL_OW 255
30771: ST_TO_ADDR
// x := GetX ( tower ) ;
30772: LD_ADDR_VAR 0 10
30776: PUSH
30777: LD_VAR 0 1
30781: PPUSH
30782: CALL_OW 250
30786: ST_TO_ADDR
// y := GetY ( tower ) ;
30787: LD_ADDR_VAR 0 11
30791: PUSH
30792: LD_VAR 0 1
30796: PPUSH
30797: CALL_OW 251
30801: ST_TO_ADDR
// if not x or not y then
30802: LD_VAR 0 10
30806: NOT
30807: PUSH
30808: LD_VAR 0 11
30812: NOT
30813: OR
30814: IFFALSE 30818
// exit ;
30816: GO 31851
// weapon := 0 ;
30818: LD_ADDR_VAR 0 18
30822: PUSH
30823: LD_INT 0
30825: ST_TO_ADDR
// fac_list := [ ] ;
30826: LD_ADDR_VAR 0 17
30830: PUSH
30831: EMPTY
30832: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
30833: LD_ADDR_VAR 0 6
30837: PUSH
30838: LD_VAR 0 1
30842: PPUSH
30843: CALL_OW 274
30847: PPUSH
30848: LD_VAR 0 2
30852: PPUSH
30853: LD_INT 0
30855: PPUSH
30856: CALL 28422 0 3
30860: PPUSH
30861: LD_INT 30
30863: PUSH
30864: LD_INT 3
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PPUSH
30871: CALL_OW 72
30875: ST_TO_ADDR
// if not factories then
30876: LD_VAR 0 6
30880: NOT
30881: IFFALSE 30885
// exit ;
30883: GO 31851
// for i in factories do
30885: LD_ADDR_VAR 0 8
30889: PUSH
30890: LD_VAR 0 6
30894: PUSH
30895: FOR_IN
30896: IFFALSE 30921
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30898: LD_ADDR_VAR 0 17
30902: PUSH
30903: LD_VAR 0 17
30907: PUSH
30908: LD_VAR 0 8
30912: PPUSH
30913: CALL_OW 478
30917: UNION
30918: ST_TO_ADDR
30919: GO 30895
30921: POP
30922: POP
// if not fac_list then
30923: LD_VAR 0 17
30927: NOT
30928: IFFALSE 30932
// exit ;
30930: GO 31851
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30932: LD_ADDR_VAR 0 5
30936: PUSH
30937: LD_INT 4
30939: PUSH
30940: LD_INT 5
30942: PUSH
30943: LD_INT 9
30945: PUSH
30946: LD_INT 10
30948: PUSH
30949: LD_INT 6
30951: PUSH
30952: LD_INT 7
30954: PUSH
30955: LD_INT 11
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 27
30969: PUSH
30970: LD_INT 28
30972: PUSH
30973: LD_INT 26
30975: PUSH
30976: LD_INT 30
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 43
30987: PUSH
30988: LD_INT 44
30990: PUSH
30991: LD_INT 46
30993: PUSH
30994: LD_INT 45
30996: PUSH
30997: LD_INT 47
30999: PUSH
31000: LD_INT 49
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: LIST
31015: PUSH
31016: LD_VAR 0 12
31020: ARRAY
31021: ST_TO_ADDR
// list := list isect fac_list ;
31022: LD_ADDR_VAR 0 5
31026: PUSH
31027: LD_VAR 0 5
31031: PUSH
31032: LD_VAR 0 17
31036: ISECT
31037: ST_TO_ADDR
// if not list then
31038: LD_VAR 0 5
31042: NOT
31043: IFFALSE 31047
// exit ;
31045: GO 31851
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31047: LD_VAR 0 12
31051: PUSH
31052: LD_INT 3
31054: EQUAL
31055: PUSH
31056: LD_INT 49
31058: PUSH
31059: LD_VAR 0 5
31063: IN
31064: AND
31065: PUSH
31066: LD_INT 31
31068: PPUSH
31069: LD_VAR 0 16
31073: PPUSH
31074: CALL_OW 321
31078: PUSH
31079: LD_INT 2
31081: EQUAL
31082: AND
31083: IFFALSE 31143
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31085: LD_INT 22
31087: PUSH
31088: LD_VAR 0 16
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 35
31099: PUSH
31100: LD_INT 49
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 91
31109: PUSH
31110: LD_VAR 0 1
31114: PUSH
31115: LD_INT 10
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: LIST
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: LIST
31127: PPUSH
31128: CALL_OW 69
31132: NOT
31133: IFFALSE 31143
// weapon := ru_time_lapser ;
31135: LD_ADDR_VAR 0 18
31139: PUSH
31140: LD_INT 49
31142: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31143: LD_VAR 0 12
31147: PUSH
31148: LD_INT 1
31150: PUSH
31151: LD_INT 2
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: IN
31158: PUSH
31159: LD_INT 11
31161: PUSH
31162: LD_VAR 0 5
31166: IN
31167: PUSH
31168: LD_INT 30
31170: PUSH
31171: LD_VAR 0 5
31175: IN
31176: OR
31177: AND
31178: PUSH
31179: LD_INT 6
31181: PPUSH
31182: LD_VAR 0 16
31186: PPUSH
31187: CALL_OW 321
31191: PUSH
31192: LD_INT 2
31194: EQUAL
31195: AND
31196: IFFALSE 31361
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31198: LD_INT 22
31200: PUSH
31201: LD_VAR 0 16
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 2
31212: PUSH
31213: LD_INT 35
31215: PUSH
31216: LD_INT 11
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 35
31225: PUSH
31226: LD_INT 30
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 91
31240: PUSH
31241: LD_VAR 0 1
31245: PUSH
31246: LD_INT 18
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: LIST
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: LIST
31258: PPUSH
31259: CALL_OW 69
31263: NOT
31264: PUSH
31265: LD_INT 22
31267: PUSH
31268: LD_VAR 0 16
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 2
31279: PUSH
31280: LD_INT 30
31282: PUSH
31283: LD_INT 32
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 30
31292: PUSH
31293: LD_INT 33
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 91
31307: PUSH
31308: LD_VAR 0 1
31312: PUSH
31313: LD_INT 12
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: LIST
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: LIST
31325: PUSH
31326: EMPTY
31327: LIST
31328: PPUSH
31329: CALL_OW 69
31333: PUSH
31334: LD_INT 2
31336: GREATER
31337: AND
31338: IFFALSE 31361
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31340: LD_ADDR_VAR 0 18
31344: PUSH
31345: LD_INT 11
31347: PUSH
31348: LD_INT 30
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_VAR 0 12
31359: ARRAY
31360: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31361: LD_VAR 0 18
31365: NOT
31366: PUSH
31367: LD_INT 40
31369: PPUSH
31370: LD_VAR 0 16
31374: PPUSH
31375: CALL_OW 321
31379: PUSH
31380: LD_INT 2
31382: EQUAL
31383: AND
31384: PUSH
31385: LD_INT 7
31387: PUSH
31388: LD_VAR 0 5
31392: IN
31393: PUSH
31394: LD_INT 28
31396: PUSH
31397: LD_VAR 0 5
31401: IN
31402: OR
31403: PUSH
31404: LD_INT 45
31406: PUSH
31407: LD_VAR 0 5
31411: IN
31412: OR
31413: AND
31414: IFFALSE 31668
// begin hex := GetHexInfo ( x , y ) ;
31416: LD_ADDR_VAR 0 4
31420: PUSH
31421: LD_VAR 0 10
31425: PPUSH
31426: LD_VAR 0 11
31430: PPUSH
31431: CALL_OW 546
31435: ST_TO_ADDR
// if hex [ 1 ] then
31436: LD_VAR 0 4
31440: PUSH
31441: LD_INT 1
31443: ARRAY
31444: IFFALSE 31448
// exit ;
31446: GO 31851
// height := hex [ 2 ] ;
31448: LD_ADDR_VAR 0 15
31452: PUSH
31453: LD_VAR 0 4
31457: PUSH
31458: LD_INT 2
31460: ARRAY
31461: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31462: LD_ADDR_VAR 0 14
31466: PUSH
31467: LD_INT 0
31469: PUSH
31470: LD_INT 2
31472: PUSH
31473: LD_INT 3
31475: PUSH
31476: LD_INT 5
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: ST_TO_ADDR
// for i in tmp do
31485: LD_ADDR_VAR 0 8
31489: PUSH
31490: LD_VAR 0 14
31494: PUSH
31495: FOR_IN
31496: IFFALSE 31666
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31498: LD_ADDR_VAR 0 9
31502: PUSH
31503: LD_VAR 0 10
31507: PPUSH
31508: LD_VAR 0 8
31512: PPUSH
31513: LD_INT 5
31515: PPUSH
31516: CALL_OW 272
31520: PUSH
31521: LD_VAR 0 11
31525: PPUSH
31526: LD_VAR 0 8
31530: PPUSH
31531: LD_INT 5
31533: PPUSH
31534: CALL_OW 273
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31543: LD_VAR 0 9
31547: PUSH
31548: LD_INT 1
31550: ARRAY
31551: PPUSH
31552: LD_VAR 0 9
31556: PUSH
31557: LD_INT 2
31559: ARRAY
31560: PPUSH
31561: CALL_OW 488
31565: IFFALSE 31664
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31567: LD_ADDR_VAR 0 4
31571: PUSH
31572: LD_VAR 0 9
31576: PUSH
31577: LD_INT 1
31579: ARRAY
31580: PPUSH
31581: LD_VAR 0 9
31585: PUSH
31586: LD_INT 2
31588: ARRAY
31589: PPUSH
31590: CALL_OW 546
31594: ST_TO_ADDR
// if hex [ 1 ] then
31595: LD_VAR 0 4
31599: PUSH
31600: LD_INT 1
31602: ARRAY
31603: IFFALSE 31607
// continue ;
31605: GO 31495
// h := hex [ 2 ] ;
31607: LD_ADDR_VAR 0 13
31611: PUSH
31612: LD_VAR 0 4
31616: PUSH
31617: LD_INT 2
31619: ARRAY
31620: ST_TO_ADDR
// if h + 7 < height then
31621: LD_VAR 0 13
31625: PUSH
31626: LD_INT 7
31628: PLUS
31629: PUSH
31630: LD_VAR 0 15
31634: LESS
31635: IFFALSE 31664
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31637: LD_ADDR_VAR 0 18
31641: PUSH
31642: LD_INT 7
31644: PUSH
31645: LD_INT 28
31647: PUSH
31648: LD_INT 45
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: LIST
31655: PUSH
31656: LD_VAR 0 12
31660: ARRAY
31661: ST_TO_ADDR
// break ;
31662: GO 31666
// end ; end ; end ;
31664: GO 31495
31666: POP
31667: POP
// end ; if not weapon then
31668: LD_VAR 0 18
31672: NOT
31673: IFFALSE 31733
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31675: LD_ADDR_VAR 0 5
31679: PUSH
31680: LD_VAR 0 5
31684: PUSH
31685: LD_INT 11
31687: PUSH
31688: LD_INT 30
31690: PUSH
31691: LD_INT 49
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: LIST
31698: DIFF
31699: ST_TO_ADDR
// if not list then
31700: LD_VAR 0 5
31704: NOT
31705: IFFALSE 31709
// exit ;
31707: GO 31851
// weapon := list [ rand ( 1 , list ) ] ;
31709: LD_ADDR_VAR 0 18
31713: PUSH
31714: LD_VAR 0 5
31718: PUSH
31719: LD_INT 1
31721: PPUSH
31722: LD_VAR 0 5
31726: PPUSH
31727: CALL_OW 12
31731: ARRAY
31732: ST_TO_ADDR
// end ; if weapon then
31733: LD_VAR 0 18
31737: IFFALSE 31851
// begin tmp := CostOfWeapon ( weapon ) ;
31739: LD_ADDR_VAR 0 14
31743: PUSH
31744: LD_VAR 0 18
31748: PPUSH
31749: CALL_OW 451
31753: ST_TO_ADDR
// j := GetBase ( tower ) ;
31754: LD_ADDR_VAR 0 9
31758: PUSH
31759: LD_VAR 0 1
31763: PPUSH
31764: CALL_OW 274
31768: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31769: LD_VAR 0 9
31773: PPUSH
31774: LD_INT 1
31776: PPUSH
31777: CALL_OW 275
31781: PUSH
31782: LD_VAR 0 14
31786: PUSH
31787: LD_INT 1
31789: ARRAY
31790: GREATEREQUAL
31791: PUSH
31792: LD_VAR 0 9
31796: PPUSH
31797: LD_INT 2
31799: PPUSH
31800: CALL_OW 275
31804: PUSH
31805: LD_VAR 0 14
31809: PUSH
31810: LD_INT 2
31812: ARRAY
31813: GREATEREQUAL
31814: AND
31815: PUSH
31816: LD_VAR 0 9
31820: PPUSH
31821: LD_INT 3
31823: PPUSH
31824: CALL_OW 275
31828: PUSH
31829: LD_VAR 0 14
31833: PUSH
31834: LD_INT 3
31836: ARRAY
31837: GREATEREQUAL
31838: AND
31839: IFFALSE 31851
// result := weapon ;
31841: LD_ADDR_VAR 0 3
31845: PUSH
31846: LD_VAR 0 18
31850: ST_TO_ADDR
// end ; end ;
31851: LD_VAR 0 3
31855: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31856: LD_INT 0
31858: PPUSH
31859: PPUSH
// result := true ;
31860: LD_ADDR_VAR 0 3
31864: PUSH
31865: LD_INT 1
31867: ST_TO_ADDR
// if array1 = array2 then
31868: LD_VAR 0 1
31872: PUSH
31873: LD_VAR 0 2
31877: EQUAL
31878: IFFALSE 31938
// begin for i = 1 to array1 do
31880: LD_ADDR_VAR 0 4
31884: PUSH
31885: DOUBLE
31886: LD_INT 1
31888: DEC
31889: ST_TO_ADDR
31890: LD_VAR 0 1
31894: PUSH
31895: FOR_TO
31896: IFFALSE 31934
// if array1 [ i ] <> array2 [ i ] then
31898: LD_VAR 0 1
31902: PUSH
31903: LD_VAR 0 4
31907: ARRAY
31908: PUSH
31909: LD_VAR 0 2
31913: PUSH
31914: LD_VAR 0 4
31918: ARRAY
31919: NONEQUAL
31920: IFFALSE 31932
// begin result := false ;
31922: LD_ADDR_VAR 0 3
31926: PUSH
31927: LD_INT 0
31929: ST_TO_ADDR
// break ;
31930: GO 31934
// end ;
31932: GO 31895
31934: POP
31935: POP
// end else
31936: GO 31946
// result := false ;
31938: LD_ADDR_VAR 0 3
31942: PUSH
31943: LD_INT 0
31945: ST_TO_ADDR
// end ;
31946: LD_VAR 0 3
31950: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
31951: LD_INT 0
31953: PPUSH
31954: PPUSH
// if not array1 or not array2 then
31955: LD_VAR 0 1
31959: NOT
31960: PUSH
31961: LD_VAR 0 2
31965: NOT
31966: OR
31967: IFFALSE 31971
// exit ;
31969: GO 32035
// result := true ;
31971: LD_ADDR_VAR 0 3
31975: PUSH
31976: LD_INT 1
31978: ST_TO_ADDR
// for i = 1 to array1 do
31979: LD_ADDR_VAR 0 4
31983: PUSH
31984: DOUBLE
31985: LD_INT 1
31987: DEC
31988: ST_TO_ADDR
31989: LD_VAR 0 1
31993: PUSH
31994: FOR_TO
31995: IFFALSE 32033
// if array1 [ i ] <> array2 [ i ] then
31997: LD_VAR 0 1
32001: PUSH
32002: LD_VAR 0 4
32006: ARRAY
32007: PUSH
32008: LD_VAR 0 2
32012: PUSH
32013: LD_VAR 0 4
32017: ARRAY
32018: NONEQUAL
32019: IFFALSE 32031
// begin result := false ;
32021: LD_ADDR_VAR 0 3
32025: PUSH
32026: LD_INT 0
32028: ST_TO_ADDR
// break ;
32029: GO 32033
// end ;
32031: GO 31994
32033: POP
32034: POP
// end ;
32035: LD_VAR 0 3
32039: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32040: LD_INT 0
32042: PPUSH
32043: PPUSH
32044: PPUSH
// pom := GetBase ( fac ) ;
32045: LD_ADDR_VAR 0 5
32049: PUSH
32050: LD_VAR 0 1
32054: PPUSH
32055: CALL_OW 274
32059: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32060: LD_ADDR_VAR 0 4
32064: PUSH
32065: LD_VAR 0 2
32069: PUSH
32070: LD_INT 1
32072: ARRAY
32073: PPUSH
32074: LD_VAR 0 2
32078: PUSH
32079: LD_INT 2
32081: ARRAY
32082: PPUSH
32083: LD_VAR 0 2
32087: PUSH
32088: LD_INT 3
32090: ARRAY
32091: PPUSH
32092: LD_VAR 0 2
32096: PUSH
32097: LD_INT 4
32099: ARRAY
32100: PPUSH
32101: CALL_OW 449
32105: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32106: LD_ADDR_VAR 0 3
32110: PUSH
32111: LD_VAR 0 5
32115: PPUSH
32116: LD_INT 1
32118: PPUSH
32119: CALL_OW 275
32123: PUSH
32124: LD_VAR 0 4
32128: PUSH
32129: LD_INT 1
32131: ARRAY
32132: GREATEREQUAL
32133: PUSH
32134: LD_VAR 0 5
32138: PPUSH
32139: LD_INT 2
32141: PPUSH
32142: CALL_OW 275
32146: PUSH
32147: LD_VAR 0 4
32151: PUSH
32152: LD_INT 2
32154: ARRAY
32155: GREATEREQUAL
32156: AND
32157: PUSH
32158: LD_VAR 0 5
32162: PPUSH
32163: LD_INT 3
32165: PPUSH
32166: CALL_OW 275
32170: PUSH
32171: LD_VAR 0 4
32175: PUSH
32176: LD_INT 3
32178: ARRAY
32179: GREATEREQUAL
32180: AND
32181: ST_TO_ADDR
// end ;
32182: LD_VAR 0 3
32186: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32187: LD_INT 0
32189: PPUSH
32190: PPUSH
32191: PPUSH
32192: PPUSH
// pom := GetBase ( building ) ;
32193: LD_ADDR_VAR 0 3
32197: PUSH
32198: LD_VAR 0 1
32202: PPUSH
32203: CALL_OW 274
32207: ST_TO_ADDR
// if not pom then
32208: LD_VAR 0 3
32212: NOT
32213: IFFALSE 32217
// exit ;
32215: GO 32387
// btype := GetBType ( building ) ;
32217: LD_ADDR_VAR 0 5
32221: PUSH
32222: LD_VAR 0 1
32226: PPUSH
32227: CALL_OW 266
32231: ST_TO_ADDR
// if btype = b_armoury then
32232: LD_VAR 0 5
32236: PUSH
32237: LD_INT 4
32239: EQUAL
32240: IFFALSE 32250
// btype := b_barracks ;
32242: LD_ADDR_VAR 0 5
32246: PUSH
32247: LD_INT 5
32249: ST_TO_ADDR
// if btype = b_depot then
32250: LD_VAR 0 5
32254: PUSH
32255: LD_INT 0
32257: EQUAL
32258: IFFALSE 32268
// btype := b_warehouse ;
32260: LD_ADDR_VAR 0 5
32264: PUSH
32265: LD_INT 1
32267: ST_TO_ADDR
// if btype = b_workshop then
32268: LD_VAR 0 5
32272: PUSH
32273: LD_INT 2
32275: EQUAL
32276: IFFALSE 32286
// btype := b_factory ;
32278: LD_ADDR_VAR 0 5
32282: PUSH
32283: LD_INT 3
32285: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32286: LD_ADDR_VAR 0 4
32290: PUSH
32291: LD_VAR 0 5
32295: PPUSH
32296: LD_VAR 0 1
32300: PPUSH
32301: CALL_OW 248
32305: PPUSH
32306: CALL_OW 450
32310: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32311: LD_ADDR_VAR 0 2
32315: PUSH
32316: LD_VAR 0 3
32320: PPUSH
32321: LD_INT 1
32323: PPUSH
32324: CALL_OW 275
32328: PUSH
32329: LD_VAR 0 4
32333: PUSH
32334: LD_INT 1
32336: ARRAY
32337: GREATEREQUAL
32338: PUSH
32339: LD_VAR 0 3
32343: PPUSH
32344: LD_INT 2
32346: PPUSH
32347: CALL_OW 275
32351: PUSH
32352: LD_VAR 0 4
32356: PUSH
32357: LD_INT 2
32359: ARRAY
32360: GREATEREQUAL
32361: AND
32362: PUSH
32363: LD_VAR 0 3
32367: PPUSH
32368: LD_INT 3
32370: PPUSH
32371: CALL_OW 275
32375: PUSH
32376: LD_VAR 0 4
32380: PUSH
32381: LD_INT 3
32383: ARRAY
32384: GREATEREQUAL
32385: AND
32386: ST_TO_ADDR
// end ;
32387: LD_VAR 0 2
32391: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32392: LD_INT 0
32394: PPUSH
32395: PPUSH
32396: PPUSH
// pom := GetBase ( building ) ;
32397: LD_ADDR_VAR 0 4
32401: PUSH
32402: LD_VAR 0 1
32406: PPUSH
32407: CALL_OW 274
32411: ST_TO_ADDR
// if not pom then
32412: LD_VAR 0 4
32416: NOT
32417: IFFALSE 32421
// exit ;
32419: GO 32522
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32421: LD_ADDR_VAR 0 5
32425: PUSH
32426: LD_VAR 0 2
32430: PPUSH
32431: LD_VAR 0 1
32435: PPUSH
32436: CALL_OW 248
32440: PPUSH
32441: CALL_OW 450
32445: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32446: LD_ADDR_VAR 0 3
32450: PUSH
32451: LD_VAR 0 4
32455: PPUSH
32456: LD_INT 1
32458: PPUSH
32459: CALL_OW 275
32463: PUSH
32464: LD_VAR 0 5
32468: PUSH
32469: LD_INT 1
32471: ARRAY
32472: GREATEREQUAL
32473: PUSH
32474: LD_VAR 0 4
32478: PPUSH
32479: LD_INT 2
32481: PPUSH
32482: CALL_OW 275
32486: PUSH
32487: LD_VAR 0 5
32491: PUSH
32492: LD_INT 2
32494: ARRAY
32495: GREATEREQUAL
32496: AND
32497: PUSH
32498: LD_VAR 0 4
32502: PPUSH
32503: LD_INT 3
32505: PPUSH
32506: CALL_OW 275
32510: PUSH
32511: LD_VAR 0 5
32515: PUSH
32516: LD_INT 3
32518: ARRAY
32519: GREATEREQUAL
32520: AND
32521: ST_TO_ADDR
// end ;
32522: LD_VAR 0 3
32526: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
32527: LD_INT 0
32529: PPUSH
32530: PPUSH
32531: PPUSH
32532: PPUSH
32533: PPUSH
32534: PPUSH
32535: PPUSH
32536: PPUSH
32537: PPUSH
32538: PPUSH
32539: PPUSH
// result := false ;
32540: LD_ADDR_VAR 0 8
32544: PUSH
32545: LD_INT 0
32547: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
32548: LD_VAR 0 5
32552: NOT
32553: PUSH
32554: LD_VAR 0 1
32558: NOT
32559: OR
32560: PUSH
32561: LD_VAR 0 2
32565: NOT
32566: OR
32567: PUSH
32568: LD_VAR 0 3
32572: NOT
32573: OR
32574: IFFALSE 32578
// exit ;
32576: GO 33392
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
32578: LD_ADDR_VAR 0 14
32582: PUSH
32583: LD_VAR 0 1
32587: PPUSH
32588: LD_VAR 0 2
32592: PPUSH
32593: LD_VAR 0 3
32597: PPUSH
32598: LD_VAR 0 4
32602: PPUSH
32603: LD_VAR 0 5
32607: PUSH
32608: LD_INT 1
32610: ARRAY
32611: PPUSH
32612: CALL_OW 248
32616: PPUSH
32617: LD_INT 0
32619: PPUSH
32620: CALL 34629 0 6
32624: ST_TO_ADDR
// if not hexes then
32625: LD_VAR 0 14
32629: NOT
32630: IFFALSE 32634
// exit ;
32632: GO 33392
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32634: LD_ADDR_VAR 0 17
32638: PUSH
32639: LD_VAR 0 5
32643: PPUSH
32644: LD_INT 22
32646: PUSH
32647: LD_VAR 0 13
32651: PPUSH
32652: CALL_OW 255
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 2
32663: PUSH
32664: LD_INT 30
32666: PUSH
32667: LD_INT 0
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 30
32676: PUSH
32677: LD_INT 1
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: LIST
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PPUSH
32693: CALL_OW 72
32697: ST_TO_ADDR
// for i = 1 to hexes do
32698: LD_ADDR_VAR 0 9
32702: PUSH
32703: DOUBLE
32704: LD_INT 1
32706: DEC
32707: ST_TO_ADDR
32708: LD_VAR 0 14
32712: PUSH
32713: FOR_TO
32714: IFFALSE 33390
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32716: LD_ADDR_VAR 0 13
32720: PUSH
32721: LD_VAR 0 14
32725: PUSH
32726: LD_VAR 0 9
32730: ARRAY
32731: PUSH
32732: LD_INT 1
32734: ARRAY
32735: PPUSH
32736: LD_VAR 0 14
32740: PUSH
32741: LD_VAR 0 9
32745: ARRAY
32746: PUSH
32747: LD_INT 2
32749: ARRAY
32750: PPUSH
32751: CALL_OW 428
32755: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32756: LD_VAR 0 14
32760: PUSH
32761: LD_VAR 0 9
32765: ARRAY
32766: PUSH
32767: LD_INT 1
32769: ARRAY
32770: PPUSH
32771: LD_VAR 0 14
32775: PUSH
32776: LD_VAR 0 9
32780: ARRAY
32781: PUSH
32782: LD_INT 2
32784: ARRAY
32785: PPUSH
32786: CALL_OW 351
32790: PUSH
32791: LD_VAR 0 14
32795: PUSH
32796: LD_VAR 0 9
32800: ARRAY
32801: PUSH
32802: LD_INT 1
32804: ARRAY
32805: PPUSH
32806: LD_VAR 0 14
32810: PUSH
32811: LD_VAR 0 9
32815: ARRAY
32816: PUSH
32817: LD_INT 2
32819: ARRAY
32820: PPUSH
32821: CALL_OW 488
32825: NOT
32826: OR
32827: PUSH
32828: LD_VAR 0 13
32832: PPUSH
32833: CALL_OW 247
32837: PUSH
32838: LD_INT 3
32840: EQUAL
32841: OR
32842: IFFALSE 32848
// exit ;
32844: POP
32845: POP
32846: GO 33392
// if not tmp then
32848: LD_VAR 0 13
32852: NOT
32853: IFFALSE 32857
// continue ;
32855: GO 32713
// result := true ;
32857: LD_ADDR_VAR 0 8
32861: PUSH
32862: LD_INT 1
32864: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
32865: LD_VAR 0 6
32869: PUSH
32870: LD_VAR 0 13
32874: PPUSH
32875: CALL_OW 247
32879: PUSH
32880: LD_INT 2
32882: EQUAL
32883: AND
32884: PUSH
32885: LD_VAR 0 13
32889: PPUSH
32890: CALL_OW 263
32894: PUSH
32895: LD_INT 1
32897: EQUAL
32898: AND
32899: IFFALSE 33063
// begin if IsDrivenBy ( tmp ) then
32901: LD_VAR 0 13
32905: PPUSH
32906: CALL_OW 311
32910: IFFALSE 32914
// continue ;
32912: GO 32713
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
32914: LD_VAR 0 6
32918: PPUSH
32919: LD_INT 3
32921: PUSH
32922: LD_INT 60
32924: PUSH
32925: EMPTY
32926: LIST
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 3
32934: PUSH
32935: LD_INT 55
32937: PUSH
32938: EMPTY
32939: LIST
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PPUSH
32949: CALL_OW 72
32953: IFFALSE 33061
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
32955: LD_ADDR_VAR 0 18
32959: PUSH
32960: LD_VAR 0 6
32964: PPUSH
32965: LD_INT 3
32967: PUSH
32968: LD_INT 60
32970: PUSH
32971: EMPTY
32972: LIST
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 3
32980: PUSH
32981: LD_INT 55
32983: PUSH
32984: EMPTY
32985: LIST
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PPUSH
32995: CALL_OW 72
32999: PUSH
33000: LD_INT 1
33002: ARRAY
33003: ST_TO_ADDR
// if IsInUnit ( driver ) then
33004: LD_VAR 0 18
33008: PPUSH
33009: CALL_OW 310
33013: IFFALSE 33024
// ComExit ( driver ) ;
33015: LD_VAR 0 18
33019: PPUSH
33020: CALL 57757 0 1
// AddComEnterUnit ( driver , tmp ) ;
33024: LD_VAR 0 18
33028: PPUSH
33029: LD_VAR 0 13
33033: PPUSH
33034: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33038: LD_VAR 0 18
33042: PPUSH
33043: LD_VAR 0 7
33047: PPUSH
33048: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33052: LD_VAR 0 18
33056: PPUSH
33057: CALL_OW 181
// end ; continue ;
33061: GO 32713
// end ; if not cleaners or not tmp in cleaners then
33063: LD_VAR 0 6
33067: NOT
33068: PUSH
33069: LD_VAR 0 13
33073: PUSH
33074: LD_VAR 0 6
33078: IN
33079: NOT
33080: OR
33081: IFFALSE 33388
// begin if dep then
33083: LD_VAR 0 17
33087: IFFALSE 33223
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33089: LD_ADDR_VAR 0 16
33093: PUSH
33094: LD_VAR 0 17
33098: PUSH
33099: LD_INT 1
33101: ARRAY
33102: PPUSH
33103: CALL_OW 250
33107: PPUSH
33108: LD_VAR 0 17
33112: PUSH
33113: LD_INT 1
33115: ARRAY
33116: PPUSH
33117: CALL_OW 254
33121: PPUSH
33122: LD_INT 5
33124: PPUSH
33125: CALL_OW 272
33129: PUSH
33130: LD_VAR 0 17
33134: PUSH
33135: LD_INT 1
33137: ARRAY
33138: PPUSH
33139: CALL_OW 251
33143: PPUSH
33144: LD_VAR 0 17
33148: PUSH
33149: LD_INT 1
33151: ARRAY
33152: PPUSH
33153: CALL_OW 254
33157: PPUSH
33158: LD_INT 5
33160: PPUSH
33161: CALL_OW 273
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33170: LD_VAR 0 16
33174: PUSH
33175: LD_INT 1
33177: ARRAY
33178: PPUSH
33179: LD_VAR 0 16
33183: PUSH
33184: LD_INT 2
33186: ARRAY
33187: PPUSH
33188: CALL_OW 488
33192: IFFALSE 33223
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33194: LD_VAR 0 13
33198: PPUSH
33199: LD_VAR 0 16
33203: PUSH
33204: LD_INT 1
33206: ARRAY
33207: PPUSH
33208: LD_VAR 0 16
33212: PUSH
33213: LD_INT 2
33215: ARRAY
33216: PPUSH
33217: CALL_OW 111
// continue ;
33221: GO 32713
// end ; end ; r := GetDir ( tmp ) ;
33223: LD_ADDR_VAR 0 15
33227: PUSH
33228: LD_VAR 0 13
33232: PPUSH
33233: CALL_OW 254
33237: ST_TO_ADDR
// if r = 5 then
33238: LD_VAR 0 15
33242: PUSH
33243: LD_INT 5
33245: EQUAL
33246: IFFALSE 33256
// r := 0 ;
33248: LD_ADDR_VAR 0 15
33252: PUSH
33253: LD_INT 0
33255: ST_TO_ADDR
// for j = r to 5 do
33256: LD_ADDR_VAR 0 10
33260: PUSH
33261: DOUBLE
33262: LD_VAR 0 15
33266: DEC
33267: ST_TO_ADDR
33268: LD_INT 5
33270: PUSH
33271: FOR_TO
33272: IFFALSE 33386
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33274: LD_ADDR_VAR 0 11
33278: PUSH
33279: LD_VAR 0 13
33283: PPUSH
33284: CALL_OW 250
33288: PPUSH
33289: LD_VAR 0 10
33293: PPUSH
33294: LD_INT 2
33296: PPUSH
33297: CALL_OW 272
33301: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33302: LD_ADDR_VAR 0 12
33306: PUSH
33307: LD_VAR 0 13
33311: PPUSH
33312: CALL_OW 251
33316: PPUSH
33317: LD_VAR 0 10
33321: PPUSH
33322: LD_INT 2
33324: PPUSH
33325: CALL_OW 273
33329: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33330: LD_VAR 0 11
33334: PPUSH
33335: LD_VAR 0 12
33339: PPUSH
33340: CALL_OW 488
33344: PUSH
33345: LD_VAR 0 11
33349: PPUSH
33350: LD_VAR 0 12
33354: PPUSH
33355: CALL_OW 428
33359: NOT
33360: AND
33361: IFFALSE 33384
// begin ComMoveXY ( tmp , _x , _y ) ;
33363: LD_VAR 0 13
33367: PPUSH
33368: LD_VAR 0 11
33372: PPUSH
33373: LD_VAR 0 12
33377: PPUSH
33378: CALL_OW 111
// break ;
33382: GO 33386
// end ; end ;
33384: GO 33271
33386: POP
33387: POP
// end ; end ;
33388: GO 32713
33390: POP
33391: POP
// end ;
33392: LD_VAR 0 8
33396: RET
// export function BuildingTechInvented ( side , btype ) ; begin
33397: LD_INT 0
33399: PPUSH
// result := true ;
33400: LD_ADDR_VAR 0 3
33404: PUSH
33405: LD_INT 1
33407: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
33408: LD_VAR 0 2
33412: PUSH
33413: LD_INT 24
33415: DOUBLE
33416: EQUAL
33417: IFTRUE 33427
33419: LD_INT 33
33421: DOUBLE
33422: EQUAL
33423: IFTRUE 33427
33425: GO 33452
33427: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
33428: LD_ADDR_VAR 0 3
33432: PUSH
33433: LD_INT 32
33435: PPUSH
33436: LD_VAR 0 1
33440: PPUSH
33441: CALL_OW 321
33445: PUSH
33446: LD_INT 2
33448: EQUAL
33449: ST_TO_ADDR
33450: GO 33772
33452: LD_INT 20
33454: DOUBLE
33455: EQUAL
33456: IFTRUE 33460
33458: GO 33485
33460: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
33461: LD_ADDR_VAR 0 3
33465: PUSH
33466: LD_INT 6
33468: PPUSH
33469: LD_VAR 0 1
33473: PPUSH
33474: CALL_OW 321
33478: PUSH
33479: LD_INT 2
33481: EQUAL
33482: ST_TO_ADDR
33483: GO 33772
33485: LD_INT 22
33487: DOUBLE
33488: EQUAL
33489: IFTRUE 33499
33491: LD_INT 36
33493: DOUBLE
33494: EQUAL
33495: IFTRUE 33499
33497: GO 33524
33499: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
33500: LD_ADDR_VAR 0 3
33504: PUSH
33505: LD_INT 15
33507: PPUSH
33508: LD_VAR 0 1
33512: PPUSH
33513: CALL_OW 321
33517: PUSH
33518: LD_INT 2
33520: EQUAL
33521: ST_TO_ADDR
33522: GO 33772
33524: LD_INT 30
33526: DOUBLE
33527: EQUAL
33528: IFTRUE 33532
33530: GO 33557
33532: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
33533: LD_ADDR_VAR 0 3
33537: PUSH
33538: LD_INT 20
33540: PPUSH
33541: LD_VAR 0 1
33545: PPUSH
33546: CALL_OW 321
33550: PUSH
33551: LD_INT 2
33553: EQUAL
33554: ST_TO_ADDR
33555: GO 33772
33557: LD_INT 28
33559: DOUBLE
33560: EQUAL
33561: IFTRUE 33571
33563: LD_INT 21
33565: DOUBLE
33566: EQUAL
33567: IFTRUE 33571
33569: GO 33596
33571: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
33572: LD_ADDR_VAR 0 3
33576: PUSH
33577: LD_INT 21
33579: PPUSH
33580: LD_VAR 0 1
33584: PPUSH
33585: CALL_OW 321
33589: PUSH
33590: LD_INT 2
33592: EQUAL
33593: ST_TO_ADDR
33594: GO 33772
33596: LD_INT 16
33598: DOUBLE
33599: EQUAL
33600: IFTRUE 33604
33602: GO 33631
33604: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
33605: LD_ADDR_VAR 0 3
33609: PUSH
33610: LD_EXP 83
33614: PPUSH
33615: LD_VAR 0 1
33619: PPUSH
33620: CALL_OW 321
33624: PUSH
33625: LD_INT 2
33627: EQUAL
33628: ST_TO_ADDR
33629: GO 33772
33631: LD_INT 19
33633: DOUBLE
33634: EQUAL
33635: IFTRUE 33645
33637: LD_INT 23
33639: DOUBLE
33640: EQUAL
33641: IFTRUE 33645
33643: GO 33672
33645: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
33646: LD_ADDR_VAR 0 3
33650: PUSH
33651: LD_EXP 82
33655: PPUSH
33656: LD_VAR 0 1
33660: PPUSH
33661: CALL_OW 321
33665: PUSH
33666: LD_INT 2
33668: EQUAL
33669: ST_TO_ADDR
33670: GO 33772
33672: LD_INT 17
33674: DOUBLE
33675: EQUAL
33676: IFTRUE 33680
33678: GO 33705
33680: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
33681: LD_ADDR_VAR 0 3
33685: PUSH
33686: LD_INT 39
33688: PPUSH
33689: LD_VAR 0 1
33693: PPUSH
33694: CALL_OW 321
33698: PUSH
33699: LD_INT 2
33701: EQUAL
33702: ST_TO_ADDR
33703: GO 33772
33705: LD_INT 18
33707: DOUBLE
33708: EQUAL
33709: IFTRUE 33713
33711: GO 33738
33713: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
33714: LD_ADDR_VAR 0 3
33718: PUSH
33719: LD_INT 40
33721: PPUSH
33722: LD_VAR 0 1
33726: PPUSH
33727: CALL_OW 321
33731: PUSH
33732: LD_INT 2
33734: EQUAL
33735: ST_TO_ADDR
33736: GO 33772
33738: LD_INT 27
33740: DOUBLE
33741: EQUAL
33742: IFTRUE 33746
33744: GO 33771
33746: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
33747: LD_ADDR_VAR 0 3
33751: PUSH
33752: LD_INT 35
33754: PPUSH
33755: LD_VAR 0 1
33759: PPUSH
33760: CALL_OW 321
33764: PUSH
33765: LD_INT 2
33767: EQUAL
33768: ST_TO_ADDR
33769: GO 33772
33771: POP
// end ;
33772: LD_VAR 0 3
33776: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
33777: LD_INT 0
33779: PPUSH
33780: PPUSH
33781: PPUSH
33782: PPUSH
33783: PPUSH
33784: PPUSH
33785: PPUSH
33786: PPUSH
33787: PPUSH
33788: PPUSH
33789: PPUSH
// result := false ;
33790: LD_ADDR_VAR 0 6
33794: PUSH
33795: LD_INT 0
33797: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33798: LD_VAR 0 1
33802: NOT
33803: PUSH
33804: LD_VAR 0 1
33808: PPUSH
33809: CALL_OW 266
33813: PUSH
33814: LD_INT 0
33816: PUSH
33817: LD_INT 1
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: IN
33824: NOT
33825: OR
33826: PUSH
33827: LD_VAR 0 2
33831: NOT
33832: OR
33833: PUSH
33834: LD_VAR 0 5
33838: PUSH
33839: LD_INT 0
33841: PUSH
33842: LD_INT 1
33844: PUSH
33845: LD_INT 2
33847: PUSH
33848: LD_INT 3
33850: PUSH
33851: LD_INT 4
33853: PUSH
33854: LD_INT 5
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: IN
33865: NOT
33866: OR
33867: PUSH
33868: LD_VAR 0 3
33872: PPUSH
33873: LD_VAR 0 4
33877: PPUSH
33878: CALL_OW 488
33882: NOT
33883: OR
33884: IFFALSE 33888
// exit ;
33886: GO 34624
// side := GetSide ( depot ) ;
33888: LD_ADDR_VAR 0 9
33892: PUSH
33893: LD_VAR 0 1
33897: PPUSH
33898: CALL_OW 255
33902: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
33903: LD_VAR 0 9
33907: PPUSH
33908: LD_VAR 0 2
33912: PPUSH
33913: CALL 33397 0 2
33917: NOT
33918: IFFALSE 33922
// exit ;
33920: GO 34624
// pom := GetBase ( depot ) ;
33922: LD_ADDR_VAR 0 10
33926: PUSH
33927: LD_VAR 0 1
33931: PPUSH
33932: CALL_OW 274
33936: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33937: LD_ADDR_VAR 0 11
33941: PUSH
33942: LD_VAR 0 2
33946: PPUSH
33947: LD_VAR 0 1
33951: PPUSH
33952: CALL_OW 248
33956: PPUSH
33957: CALL_OW 450
33961: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33962: LD_VAR 0 10
33966: PPUSH
33967: LD_INT 1
33969: PPUSH
33970: CALL_OW 275
33974: PUSH
33975: LD_VAR 0 11
33979: PUSH
33980: LD_INT 1
33982: ARRAY
33983: GREATEREQUAL
33984: PUSH
33985: LD_VAR 0 10
33989: PPUSH
33990: LD_INT 2
33992: PPUSH
33993: CALL_OW 275
33997: PUSH
33998: LD_VAR 0 11
34002: PUSH
34003: LD_INT 2
34005: ARRAY
34006: GREATEREQUAL
34007: AND
34008: PUSH
34009: LD_VAR 0 10
34013: PPUSH
34014: LD_INT 3
34016: PPUSH
34017: CALL_OW 275
34021: PUSH
34022: LD_VAR 0 11
34026: PUSH
34027: LD_INT 3
34029: ARRAY
34030: GREATEREQUAL
34031: AND
34032: NOT
34033: IFFALSE 34037
// exit ;
34035: GO 34624
// if GetBType ( depot ) = b_depot then
34037: LD_VAR 0 1
34041: PPUSH
34042: CALL_OW 266
34046: PUSH
34047: LD_INT 0
34049: EQUAL
34050: IFFALSE 34062
// dist := 28 else
34052: LD_ADDR_VAR 0 14
34056: PUSH
34057: LD_INT 28
34059: ST_TO_ADDR
34060: GO 34070
// dist := 36 ;
34062: LD_ADDR_VAR 0 14
34066: PUSH
34067: LD_INT 36
34069: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34070: LD_VAR 0 1
34074: PPUSH
34075: LD_VAR 0 3
34079: PPUSH
34080: LD_VAR 0 4
34084: PPUSH
34085: CALL_OW 297
34089: PUSH
34090: LD_VAR 0 14
34094: GREATER
34095: IFFALSE 34099
// exit ;
34097: GO 34624
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34099: LD_ADDR_VAR 0 12
34103: PUSH
34104: LD_VAR 0 2
34108: PPUSH
34109: LD_VAR 0 3
34113: PPUSH
34114: LD_VAR 0 4
34118: PPUSH
34119: LD_VAR 0 5
34123: PPUSH
34124: LD_VAR 0 1
34128: PPUSH
34129: CALL_OW 248
34133: PPUSH
34134: LD_INT 0
34136: PPUSH
34137: CALL 34629 0 6
34141: ST_TO_ADDR
// if not hexes then
34142: LD_VAR 0 12
34146: NOT
34147: IFFALSE 34151
// exit ;
34149: GO 34624
// hex := GetHexInfo ( x , y ) ;
34151: LD_ADDR_VAR 0 15
34155: PUSH
34156: LD_VAR 0 3
34160: PPUSH
34161: LD_VAR 0 4
34165: PPUSH
34166: CALL_OW 546
34170: ST_TO_ADDR
// if hex [ 1 ] then
34171: LD_VAR 0 15
34175: PUSH
34176: LD_INT 1
34178: ARRAY
34179: IFFALSE 34183
// exit ;
34181: GO 34624
// height := hex [ 2 ] ;
34183: LD_ADDR_VAR 0 13
34187: PUSH
34188: LD_VAR 0 15
34192: PUSH
34193: LD_INT 2
34195: ARRAY
34196: ST_TO_ADDR
// for i = 1 to hexes do
34197: LD_ADDR_VAR 0 7
34201: PUSH
34202: DOUBLE
34203: LD_INT 1
34205: DEC
34206: ST_TO_ADDR
34207: LD_VAR 0 12
34211: PUSH
34212: FOR_TO
34213: IFFALSE 34543
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34215: LD_VAR 0 12
34219: PUSH
34220: LD_VAR 0 7
34224: ARRAY
34225: PUSH
34226: LD_INT 1
34228: ARRAY
34229: PPUSH
34230: LD_VAR 0 12
34234: PUSH
34235: LD_VAR 0 7
34239: ARRAY
34240: PUSH
34241: LD_INT 2
34243: ARRAY
34244: PPUSH
34245: CALL_OW 488
34249: NOT
34250: PUSH
34251: LD_VAR 0 12
34255: PUSH
34256: LD_VAR 0 7
34260: ARRAY
34261: PUSH
34262: LD_INT 1
34264: ARRAY
34265: PPUSH
34266: LD_VAR 0 12
34270: PUSH
34271: LD_VAR 0 7
34275: ARRAY
34276: PUSH
34277: LD_INT 2
34279: ARRAY
34280: PPUSH
34281: CALL_OW 428
34285: PUSH
34286: LD_INT 0
34288: GREATER
34289: OR
34290: PUSH
34291: LD_VAR 0 12
34295: PUSH
34296: LD_VAR 0 7
34300: ARRAY
34301: PUSH
34302: LD_INT 1
34304: ARRAY
34305: PPUSH
34306: LD_VAR 0 12
34310: PUSH
34311: LD_VAR 0 7
34315: ARRAY
34316: PUSH
34317: LD_INT 2
34319: ARRAY
34320: PPUSH
34321: CALL_OW 351
34325: OR
34326: IFFALSE 34332
// exit ;
34328: POP
34329: POP
34330: GO 34624
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34332: LD_ADDR_VAR 0 8
34336: PUSH
34337: LD_VAR 0 12
34341: PUSH
34342: LD_VAR 0 7
34346: ARRAY
34347: PUSH
34348: LD_INT 1
34350: ARRAY
34351: PPUSH
34352: LD_VAR 0 12
34356: PUSH
34357: LD_VAR 0 7
34361: ARRAY
34362: PUSH
34363: LD_INT 2
34365: ARRAY
34366: PPUSH
34367: CALL_OW 546
34371: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34372: LD_VAR 0 8
34376: PUSH
34377: LD_INT 1
34379: ARRAY
34380: PUSH
34381: LD_VAR 0 8
34385: PUSH
34386: LD_INT 2
34388: ARRAY
34389: PUSH
34390: LD_VAR 0 13
34394: PUSH
34395: LD_INT 2
34397: PLUS
34398: GREATER
34399: OR
34400: PUSH
34401: LD_VAR 0 8
34405: PUSH
34406: LD_INT 2
34408: ARRAY
34409: PUSH
34410: LD_VAR 0 13
34414: PUSH
34415: LD_INT 2
34417: MINUS
34418: LESS
34419: OR
34420: PUSH
34421: LD_VAR 0 8
34425: PUSH
34426: LD_INT 3
34428: ARRAY
34429: PUSH
34430: LD_INT 0
34432: PUSH
34433: LD_INT 8
34435: PUSH
34436: LD_INT 9
34438: PUSH
34439: LD_INT 10
34441: PUSH
34442: LD_INT 11
34444: PUSH
34445: LD_INT 12
34447: PUSH
34448: LD_INT 13
34450: PUSH
34451: LD_INT 16
34453: PUSH
34454: LD_INT 17
34456: PUSH
34457: LD_INT 18
34459: PUSH
34460: LD_INT 19
34462: PUSH
34463: LD_INT 20
34465: PUSH
34466: LD_INT 21
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: IN
34484: NOT
34485: OR
34486: PUSH
34487: LD_VAR 0 8
34491: PUSH
34492: LD_INT 5
34494: ARRAY
34495: NOT
34496: OR
34497: PUSH
34498: LD_VAR 0 8
34502: PUSH
34503: LD_INT 6
34505: ARRAY
34506: PUSH
34507: LD_INT 1
34509: PUSH
34510: LD_INT 2
34512: PUSH
34513: LD_INT 7
34515: PUSH
34516: LD_INT 9
34518: PUSH
34519: LD_INT 10
34521: PUSH
34522: LD_INT 11
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: IN
34533: NOT
34534: OR
34535: IFFALSE 34541
// exit ;
34537: POP
34538: POP
34539: GO 34624
// end ;
34541: GO 34212
34543: POP
34544: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34545: LD_VAR 0 9
34549: PPUSH
34550: LD_VAR 0 3
34554: PPUSH
34555: LD_VAR 0 4
34559: PPUSH
34560: LD_INT 20
34562: PPUSH
34563: CALL 26570 0 4
34567: PUSH
34568: LD_INT 4
34570: ARRAY
34571: IFFALSE 34575
// exit ;
34573: GO 34624
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34575: LD_VAR 0 2
34579: PUSH
34580: LD_INT 29
34582: PUSH
34583: LD_INT 30
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: IN
34590: PUSH
34591: LD_VAR 0 3
34595: PPUSH
34596: LD_VAR 0 4
34600: PPUSH
34601: LD_VAR 0 9
34605: PPUSH
34606: CALL_OW 440
34610: NOT
34611: AND
34612: IFFALSE 34616
// exit ;
34614: GO 34624
// result := true ;
34616: LD_ADDR_VAR 0 6
34620: PUSH
34621: LD_INT 1
34623: ST_TO_ADDR
// end ;
34624: LD_VAR 0 6
34628: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34629: LD_INT 0
34631: PPUSH
34632: PPUSH
34633: PPUSH
34634: PPUSH
34635: PPUSH
34636: PPUSH
34637: PPUSH
34638: PPUSH
34639: PPUSH
34640: PPUSH
34641: PPUSH
34642: PPUSH
34643: PPUSH
34644: PPUSH
34645: PPUSH
34646: PPUSH
34647: PPUSH
34648: PPUSH
34649: PPUSH
34650: PPUSH
34651: PPUSH
34652: PPUSH
34653: PPUSH
34654: PPUSH
34655: PPUSH
34656: PPUSH
34657: PPUSH
34658: PPUSH
34659: PPUSH
34660: PPUSH
34661: PPUSH
34662: PPUSH
34663: PPUSH
34664: PPUSH
34665: PPUSH
34666: PPUSH
34667: PPUSH
34668: PPUSH
34669: PPUSH
34670: PPUSH
34671: PPUSH
34672: PPUSH
34673: PPUSH
34674: PPUSH
34675: PPUSH
34676: PPUSH
34677: PPUSH
34678: PPUSH
34679: PPUSH
34680: PPUSH
34681: PPUSH
34682: PPUSH
34683: PPUSH
34684: PPUSH
34685: PPUSH
34686: PPUSH
34687: PPUSH
34688: PPUSH
// result = [ ] ;
34689: LD_ADDR_VAR 0 7
34693: PUSH
34694: EMPTY
34695: ST_TO_ADDR
// temp_list = [ ] ;
34696: LD_ADDR_VAR 0 9
34700: PUSH
34701: EMPTY
34702: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34703: LD_VAR 0 4
34707: PUSH
34708: LD_INT 0
34710: PUSH
34711: LD_INT 1
34713: PUSH
34714: LD_INT 2
34716: PUSH
34717: LD_INT 3
34719: PUSH
34720: LD_INT 4
34722: PUSH
34723: LD_INT 5
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: IN
34734: NOT
34735: PUSH
34736: LD_VAR 0 1
34740: PUSH
34741: LD_INT 0
34743: PUSH
34744: LD_INT 1
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: IN
34751: PUSH
34752: LD_VAR 0 5
34756: PUSH
34757: LD_INT 1
34759: PUSH
34760: LD_INT 2
34762: PUSH
34763: LD_INT 3
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: LIST
34770: IN
34771: NOT
34772: AND
34773: OR
34774: IFFALSE 34778
// exit ;
34776: GO 53169
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34778: LD_VAR 0 1
34782: PUSH
34783: LD_INT 6
34785: PUSH
34786: LD_INT 7
34788: PUSH
34789: LD_INT 8
34791: PUSH
34792: LD_INT 13
34794: PUSH
34795: LD_INT 12
34797: PUSH
34798: LD_INT 15
34800: PUSH
34801: LD_INT 11
34803: PUSH
34804: LD_INT 14
34806: PUSH
34807: LD_INT 10
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: IN
34821: IFFALSE 34831
// btype = b_lab ;
34823: LD_ADDR_VAR 0 1
34827: PUSH
34828: LD_INT 6
34830: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34831: LD_VAR 0 6
34835: PUSH
34836: LD_INT 0
34838: PUSH
34839: LD_INT 1
34841: PUSH
34842: LD_INT 2
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: LIST
34849: IN
34850: NOT
34851: PUSH
34852: LD_VAR 0 1
34856: PUSH
34857: LD_INT 0
34859: PUSH
34860: LD_INT 1
34862: PUSH
34863: LD_INT 2
34865: PUSH
34866: LD_INT 3
34868: PUSH
34869: LD_INT 6
34871: PUSH
34872: LD_INT 36
34874: PUSH
34875: LD_INT 4
34877: PUSH
34878: LD_INT 5
34880: PUSH
34881: LD_INT 31
34883: PUSH
34884: LD_INT 32
34886: PUSH
34887: LD_INT 33
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: IN
34903: NOT
34904: PUSH
34905: LD_VAR 0 6
34909: PUSH
34910: LD_INT 1
34912: EQUAL
34913: AND
34914: OR
34915: PUSH
34916: LD_VAR 0 1
34920: PUSH
34921: LD_INT 2
34923: PUSH
34924: LD_INT 3
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: IN
34931: NOT
34932: PUSH
34933: LD_VAR 0 6
34937: PUSH
34938: LD_INT 2
34940: EQUAL
34941: AND
34942: OR
34943: IFFALSE 34953
// mode = 0 ;
34945: LD_ADDR_VAR 0 6
34949: PUSH
34950: LD_INT 0
34952: ST_TO_ADDR
// case mode of 0 :
34953: LD_VAR 0 6
34957: PUSH
34958: LD_INT 0
34960: DOUBLE
34961: EQUAL
34962: IFTRUE 34966
34964: GO 46419
34966: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34967: LD_ADDR_VAR 0 11
34971: PUSH
34972: LD_INT 0
34974: PUSH
34975: LD_INT 0
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 0
34984: PUSH
34985: LD_INT 1
34987: NEG
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 1
34995: PUSH
34996: LD_INT 0
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 1
35005: PUSH
35006: LD_INT 1
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 0
35015: PUSH
35016: LD_INT 1
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 1
35025: NEG
35026: PUSH
35027: LD_INT 0
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 1
35036: NEG
35037: PUSH
35038: LD_INT 1
35040: NEG
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 1
35048: NEG
35049: PUSH
35050: LD_INT 2
35052: NEG
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 0
35060: PUSH
35061: LD_INT 2
35063: NEG
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 1
35071: PUSH
35072: LD_INT 1
35074: NEG
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 1
35082: PUSH
35083: LD_INT 2
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 0
35092: PUSH
35093: LD_INT 2
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 1
35102: NEG
35103: PUSH
35104: LD_INT 1
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 1
35113: PUSH
35114: LD_INT 3
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 0
35123: PUSH
35124: LD_INT 3
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 1
35133: NEG
35134: PUSH
35135: LD_INT 2
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35160: LD_ADDR_VAR 0 12
35164: PUSH
35165: LD_INT 0
35167: PUSH
35168: LD_INT 0
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 0
35177: PUSH
35178: LD_INT 1
35180: NEG
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 1
35188: PUSH
35189: LD_INT 0
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 1
35198: PUSH
35199: LD_INT 1
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 0
35208: PUSH
35209: LD_INT 1
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 1
35218: NEG
35219: PUSH
35220: LD_INT 0
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 1
35229: NEG
35230: PUSH
35231: LD_INT 1
35233: NEG
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 1
35241: PUSH
35242: LD_INT 1
35244: NEG
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 2
35252: PUSH
35253: LD_INT 0
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 2
35262: PUSH
35263: LD_INT 1
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 1
35272: NEG
35273: PUSH
35274: LD_INT 1
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 2
35283: NEG
35284: PUSH
35285: LD_INT 0
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 2
35294: NEG
35295: PUSH
35296: LD_INT 1
35298: NEG
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 2
35306: NEG
35307: PUSH
35308: LD_INT 1
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 3
35317: NEG
35318: PUSH
35319: LD_INT 0
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 3
35328: NEG
35329: PUSH
35330: LD_INT 1
35332: NEG
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35356: LD_ADDR_VAR 0 13
35360: PUSH
35361: LD_INT 0
35363: PUSH
35364: LD_INT 0
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 0
35373: PUSH
35374: LD_INT 1
35376: NEG
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 1
35384: PUSH
35385: LD_INT 0
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 1
35394: PUSH
35395: LD_INT 1
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 0
35404: PUSH
35405: LD_INT 1
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 1
35414: NEG
35415: PUSH
35416: LD_INT 0
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 1
35425: NEG
35426: PUSH
35427: LD_INT 1
35429: NEG
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 1
35437: NEG
35438: PUSH
35439: LD_INT 2
35441: NEG
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 2
35449: PUSH
35450: LD_INT 1
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 2
35459: PUSH
35460: LD_INT 2
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 1
35469: PUSH
35470: LD_INT 2
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 2
35479: NEG
35480: PUSH
35481: LD_INT 1
35483: NEG
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 2
35491: NEG
35492: PUSH
35493: LD_INT 2
35495: NEG
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 2
35503: NEG
35504: PUSH
35505: LD_INT 3
35507: NEG
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 3
35515: NEG
35516: PUSH
35517: LD_INT 2
35519: NEG
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 3
35527: NEG
35528: PUSH
35529: LD_INT 3
35531: NEG
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35555: LD_ADDR_VAR 0 14
35559: PUSH
35560: LD_INT 0
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 0
35572: PUSH
35573: LD_INT 1
35575: NEG
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 1
35583: PUSH
35584: LD_INT 0
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 1
35593: PUSH
35594: LD_INT 1
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 0
35603: PUSH
35604: LD_INT 1
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 1
35613: NEG
35614: PUSH
35615: LD_INT 0
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 1
35624: NEG
35625: PUSH
35626: LD_INT 1
35628: NEG
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 1
35636: NEG
35637: PUSH
35638: LD_INT 2
35640: NEG
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 0
35648: PUSH
35649: LD_INT 2
35651: NEG
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 1
35659: PUSH
35660: LD_INT 1
35662: NEG
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 1
35670: PUSH
35671: LD_INT 2
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 0
35680: PUSH
35681: LD_INT 2
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 1
35690: NEG
35691: PUSH
35692: LD_INT 1
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 1
35701: NEG
35702: PUSH
35703: LD_INT 3
35705: NEG
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 0
35713: PUSH
35714: LD_INT 3
35716: NEG
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 1
35724: PUSH
35725: LD_INT 2
35727: NEG
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: LIST
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35751: LD_ADDR_VAR 0 15
35755: PUSH
35756: LD_INT 0
35758: PUSH
35759: LD_INT 0
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 0
35768: PUSH
35769: LD_INT 1
35771: NEG
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 1
35779: PUSH
35780: LD_INT 0
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 1
35789: PUSH
35790: LD_INT 1
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 0
35799: PUSH
35800: LD_INT 1
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 1
35809: NEG
35810: PUSH
35811: LD_INT 0
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 1
35820: NEG
35821: PUSH
35822: LD_INT 1
35824: NEG
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 1
35832: PUSH
35833: LD_INT 1
35835: NEG
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 2
35843: PUSH
35844: LD_INT 0
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 2
35853: PUSH
35854: LD_INT 1
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 1
35863: NEG
35864: PUSH
35865: LD_INT 1
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 2
35874: NEG
35875: PUSH
35876: LD_INT 0
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 2
35885: NEG
35886: PUSH
35887: LD_INT 1
35889: NEG
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 2
35897: PUSH
35898: LD_INT 1
35900: NEG
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 3
35908: PUSH
35909: LD_INT 0
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 3
35918: PUSH
35919: LD_INT 1
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35944: LD_ADDR_VAR 0 16
35948: PUSH
35949: LD_INT 0
35951: PUSH
35952: LD_INT 0
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 0
35961: PUSH
35962: LD_INT 1
35964: NEG
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 1
35972: PUSH
35973: LD_INT 0
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 1
35982: PUSH
35983: LD_INT 1
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 0
35992: PUSH
35993: LD_INT 1
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 1
36002: NEG
36003: PUSH
36004: LD_INT 0
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 1
36013: NEG
36014: PUSH
36015: LD_INT 1
36017: NEG
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 1
36025: NEG
36026: PUSH
36027: LD_INT 2
36029: NEG
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 2
36037: PUSH
36038: LD_INT 1
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 2
36047: PUSH
36048: LD_INT 2
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 1
36057: PUSH
36058: LD_INT 2
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 2
36067: NEG
36068: PUSH
36069: LD_INT 1
36071: NEG
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: PUSH
36077: LD_INT 2
36079: NEG
36080: PUSH
36081: LD_INT 2
36083: NEG
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 3
36091: PUSH
36092: LD_INT 2
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 3
36101: PUSH
36102: LD_INT 3
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 2
36111: PUSH
36112: LD_INT 3
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36137: LD_ADDR_VAR 0 17
36141: PUSH
36142: LD_INT 0
36144: PUSH
36145: LD_INT 0
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: LD_INT 1
36157: NEG
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 1
36165: PUSH
36166: LD_INT 0
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 1
36175: PUSH
36176: LD_INT 1
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 0
36185: PUSH
36186: LD_INT 1
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 1
36195: NEG
36196: PUSH
36197: LD_INT 0
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 1
36206: NEG
36207: PUSH
36208: LD_INT 1
36210: NEG
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 1
36218: NEG
36219: PUSH
36220: LD_INT 2
36222: NEG
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 0
36230: PUSH
36231: LD_INT 2
36233: NEG
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: LD_INT 1
36241: PUSH
36242: LD_INT 1
36244: NEG
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 2
36252: PUSH
36253: LD_INT 0
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 2
36262: PUSH
36263: LD_INT 1
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 2
36272: PUSH
36273: LD_INT 2
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 1
36282: PUSH
36283: LD_INT 2
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 0
36292: PUSH
36293: LD_INT 2
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 1
36302: NEG
36303: PUSH
36304: LD_INT 1
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 2
36313: NEG
36314: PUSH
36315: LD_INT 0
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 2
36324: NEG
36325: PUSH
36326: LD_INT 1
36328: NEG
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 2
36336: NEG
36337: PUSH
36338: LD_INT 2
36340: NEG
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36367: LD_ADDR_VAR 0 18
36371: PUSH
36372: LD_INT 0
36374: PUSH
36375: LD_INT 0
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: LD_INT 0
36384: PUSH
36385: LD_INT 1
36387: NEG
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 1
36395: PUSH
36396: LD_INT 0
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 1
36405: PUSH
36406: LD_INT 1
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 0
36415: PUSH
36416: LD_INT 1
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 1
36425: NEG
36426: PUSH
36427: LD_INT 0
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 1
36436: NEG
36437: PUSH
36438: LD_INT 1
36440: NEG
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 1
36448: NEG
36449: PUSH
36450: LD_INT 2
36452: NEG
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 0
36460: PUSH
36461: LD_INT 2
36463: NEG
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 1
36471: PUSH
36472: LD_INT 1
36474: NEG
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 2
36482: PUSH
36483: LD_INT 0
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 2
36492: PUSH
36493: LD_INT 1
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 2
36502: PUSH
36503: LD_INT 2
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 1
36512: PUSH
36513: LD_INT 2
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 0
36522: PUSH
36523: LD_INT 2
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 1
36532: NEG
36533: PUSH
36534: LD_INT 1
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 2
36543: NEG
36544: PUSH
36545: LD_INT 0
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 2
36554: NEG
36555: PUSH
36556: LD_INT 1
36558: NEG
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_INT 2
36566: NEG
36567: PUSH
36568: LD_INT 2
36570: NEG
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36597: LD_ADDR_VAR 0 19
36601: PUSH
36602: LD_INT 0
36604: PUSH
36605: LD_INT 0
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 0
36614: PUSH
36615: LD_INT 1
36617: NEG
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 1
36625: PUSH
36626: LD_INT 0
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: LD_INT 1
36635: PUSH
36636: LD_INT 1
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 0
36645: PUSH
36646: LD_INT 1
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 1
36655: NEG
36656: PUSH
36657: LD_INT 0
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 1
36666: NEG
36667: PUSH
36668: LD_INT 1
36670: NEG
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 1
36678: NEG
36679: PUSH
36680: LD_INT 2
36682: NEG
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 0
36690: PUSH
36691: LD_INT 2
36693: NEG
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 1
36701: PUSH
36702: LD_INT 1
36704: NEG
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 2
36712: PUSH
36713: LD_INT 0
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 2
36722: PUSH
36723: LD_INT 1
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 2
36732: PUSH
36733: LD_INT 2
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 1
36742: PUSH
36743: LD_INT 2
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 0
36752: PUSH
36753: LD_INT 2
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 1
36762: NEG
36763: PUSH
36764: LD_INT 1
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 2
36773: NEG
36774: PUSH
36775: LD_INT 0
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 2
36784: NEG
36785: PUSH
36786: LD_INT 1
36788: NEG
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 2
36796: NEG
36797: PUSH
36798: LD_INT 2
36800: NEG
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36827: LD_ADDR_VAR 0 20
36831: PUSH
36832: LD_INT 0
36834: PUSH
36835: LD_INT 0
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 0
36844: PUSH
36845: LD_INT 1
36847: NEG
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 1
36855: PUSH
36856: LD_INT 0
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PUSH
36863: LD_INT 1
36865: PUSH
36866: LD_INT 1
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 0
36875: PUSH
36876: LD_INT 1
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 1
36885: NEG
36886: PUSH
36887: LD_INT 0
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 1
36896: NEG
36897: PUSH
36898: LD_INT 1
36900: NEG
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 1
36908: NEG
36909: PUSH
36910: LD_INT 2
36912: NEG
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 0
36920: PUSH
36921: LD_INT 2
36923: NEG
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 1
36931: PUSH
36932: LD_INT 1
36934: NEG
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 2
36942: PUSH
36943: LD_INT 0
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 2
36952: PUSH
36953: LD_INT 1
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 2
36962: PUSH
36963: LD_INT 2
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 1
36972: PUSH
36973: LD_INT 2
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 0
36982: PUSH
36983: LD_INT 2
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 1
36992: NEG
36993: PUSH
36994: LD_INT 1
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 2
37003: NEG
37004: PUSH
37005: LD_INT 0
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 2
37014: NEG
37015: PUSH
37016: LD_INT 1
37018: NEG
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 2
37026: NEG
37027: PUSH
37028: LD_INT 2
37030: NEG
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37057: LD_ADDR_VAR 0 21
37061: PUSH
37062: LD_INT 0
37064: PUSH
37065: LD_INT 0
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 0
37074: PUSH
37075: LD_INT 1
37077: NEG
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 1
37085: PUSH
37086: LD_INT 0
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 1
37095: PUSH
37096: LD_INT 1
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 0
37105: PUSH
37106: LD_INT 1
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 1
37115: NEG
37116: PUSH
37117: LD_INT 0
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 1
37126: NEG
37127: PUSH
37128: LD_INT 1
37130: NEG
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 1
37138: NEG
37139: PUSH
37140: LD_INT 2
37142: NEG
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 0
37150: PUSH
37151: LD_INT 2
37153: NEG
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 1
37161: PUSH
37162: LD_INT 1
37164: NEG
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 2
37172: PUSH
37173: LD_INT 0
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 2
37182: PUSH
37183: LD_INT 1
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 2
37192: PUSH
37193: LD_INT 2
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 1
37202: PUSH
37203: LD_INT 2
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 0
37212: PUSH
37213: LD_INT 2
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 1
37222: NEG
37223: PUSH
37224: LD_INT 1
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 2
37233: NEG
37234: PUSH
37235: LD_INT 0
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 2
37244: NEG
37245: PUSH
37246: LD_INT 1
37248: NEG
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 2
37256: NEG
37257: PUSH
37258: LD_INT 2
37260: NEG
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37287: LD_ADDR_VAR 0 22
37291: PUSH
37292: LD_INT 0
37294: PUSH
37295: LD_INT 0
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 0
37304: PUSH
37305: LD_INT 1
37307: NEG
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 1
37315: PUSH
37316: LD_INT 0
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 1
37325: PUSH
37326: LD_INT 1
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 0
37335: PUSH
37336: LD_INT 1
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 1
37345: NEG
37346: PUSH
37347: LD_INT 0
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 1
37356: NEG
37357: PUSH
37358: LD_INT 1
37360: NEG
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 1
37368: NEG
37369: PUSH
37370: LD_INT 2
37372: NEG
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 0
37380: PUSH
37381: LD_INT 2
37383: NEG
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 1
37391: PUSH
37392: LD_INT 1
37394: NEG
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 2
37402: PUSH
37403: LD_INT 0
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 2
37412: PUSH
37413: LD_INT 1
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 2
37422: PUSH
37423: LD_INT 2
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 1
37432: PUSH
37433: LD_INT 2
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 0
37442: PUSH
37443: LD_INT 2
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 1
37452: NEG
37453: PUSH
37454: LD_INT 1
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 2
37463: NEG
37464: PUSH
37465: LD_INT 0
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 2
37474: NEG
37475: PUSH
37476: LD_INT 1
37478: NEG
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 2
37486: NEG
37487: PUSH
37488: LD_INT 2
37490: NEG
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37517: LD_ADDR_VAR 0 23
37521: PUSH
37522: LD_INT 0
37524: PUSH
37525: LD_INT 0
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 0
37534: PUSH
37535: LD_INT 1
37537: NEG
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 1
37545: PUSH
37546: LD_INT 0
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 1
37555: PUSH
37556: LD_INT 1
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 0
37565: PUSH
37566: LD_INT 1
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: LD_INT 1
37575: NEG
37576: PUSH
37577: LD_INT 0
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 1
37586: NEG
37587: PUSH
37588: LD_INT 1
37590: NEG
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 1
37598: NEG
37599: PUSH
37600: LD_INT 2
37602: NEG
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 0
37610: PUSH
37611: LD_INT 2
37613: NEG
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 1
37621: PUSH
37622: LD_INT 1
37624: NEG
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 2
37632: PUSH
37633: LD_INT 0
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 2
37642: PUSH
37643: LD_INT 1
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 2
37652: PUSH
37653: LD_INT 2
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 1
37662: PUSH
37663: LD_INT 2
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 0
37672: PUSH
37673: LD_INT 2
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 1
37682: NEG
37683: PUSH
37684: LD_INT 1
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 2
37693: NEG
37694: PUSH
37695: LD_INT 0
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 2
37704: NEG
37705: PUSH
37706: LD_INT 1
37708: NEG
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 2
37716: NEG
37717: PUSH
37718: LD_INT 2
37720: NEG
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 2
37728: NEG
37729: PUSH
37730: LD_INT 3
37732: NEG
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 1
37740: NEG
37741: PUSH
37742: LD_INT 3
37744: NEG
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 1
37752: PUSH
37753: LD_INT 2
37755: NEG
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 2
37763: PUSH
37764: LD_INT 1
37766: NEG
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37797: LD_ADDR_VAR 0 24
37801: PUSH
37802: LD_INT 0
37804: PUSH
37805: LD_INT 0
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 0
37814: PUSH
37815: LD_INT 1
37817: NEG
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 1
37825: PUSH
37826: LD_INT 0
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 1
37835: PUSH
37836: LD_INT 1
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 0
37845: PUSH
37846: LD_INT 1
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 1
37855: NEG
37856: PUSH
37857: LD_INT 0
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 1
37866: NEG
37867: PUSH
37868: LD_INT 1
37870: NEG
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 1
37878: NEG
37879: PUSH
37880: LD_INT 2
37882: NEG
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 0
37890: PUSH
37891: LD_INT 2
37893: NEG
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 1
37901: PUSH
37902: LD_INT 1
37904: NEG
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 2
37912: PUSH
37913: LD_INT 0
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 2
37922: PUSH
37923: LD_INT 1
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 2
37932: PUSH
37933: LD_INT 2
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 1
37942: PUSH
37943: LD_INT 2
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 0
37952: PUSH
37953: LD_INT 2
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 1
37962: NEG
37963: PUSH
37964: LD_INT 1
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 2
37973: NEG
37974: PUSH
37975: LD_INT 0
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 2
37984: NEG
37985: PUSH
37986: LD_INT 1
37988: NEG
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 2
37996: NEG
37997: PUSH
37998: LD_INT 2
38000: NEG
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 1
38008: PUSH
38009: LD_INT 2
38011: NEG
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 2
38019: PUSH
38020: LD_INT 1
38022: NEG
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 3
38030: PUSH
38031: LD_INT 1
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 3
38040: PUSH
38041: LD_INT 2
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38073: LD_ADDR_VAR 0 25
38077: PUSH
38078: LD_INT 0
38080: PUSH
38081: LD_INT 0
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 0
38090: PUSH
38091: LD_INT 1
38093: NEG
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 1
38101: PUSH
38102: LD_INT 0
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 1
38111: PUSH
38112: LD_INT 1
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 0
38121: PUSH
38122: LD_INT 1
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 1
38131: NEG
38132: PUSH
38133: LD_INT 0
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 1
38142: NEG
38143: PUSH
38144: LD_INT 1
38146: NEG
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: LD_INT 1
38154: NEG
38155: PUSH
38156: LD_INT 2
38158: NEG
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 0
38166: PUSH
38167: LD_INT 2
38169: NEG
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 1
38177: PUSH
38178: LD_INT 1
38180: NEG
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 2
38188: PUSH
38189: LD_INT 0
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 2
38198: PUSH
38199: LD_INT 1
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 2
38208: PUSH
38209: LD_INT 2
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 1
38218: PUSH
38219: LD_INT 2
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 0
38228: PUSH
38229: LD_INT 2
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 1
38238: NEG
38239: PUSH
38240: LD_INT 1
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 2
38249: NEG
38250: PUSH
38251: LD_INT 0
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 2
38260: NEG
38261: PUSH
38262: LD_INT 1
38264: NEG
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 2
38272: NEG
38273: PUSH
38274: LD_INT 2
38276: NEG
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 3
38284: PUSH
38285: LD_INT 1
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 3
38294: PUSH
38295: LD_INT 2
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 2
38304: PUSH
38305: LD_INT 3
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 1
38314: PUSH
38315: LD_INT 3
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38347: LD_ADDR_VAR 0 26
38351: PUSH
38352: LD_INT 0
38354: PUSH
38355: LD_INT 0
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 0
38364: PUSH
38365: LD_INT 1
38367: NEG
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 1
38375: PUSH
38376: LD_INT 0
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 1
38385: PUSH
38386: LD_INT 1
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 0
38395: PUSH
38396: LD_INT 1
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 1
38405: NEG
38406: PUSH
38407: LD_INT 0
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 1
38416: NEG
38417: PUSH
38418: LD_INT 1
38420: NEG
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 1
38428: NEG
38429: PUSH
38430: LD_INT 2
38432: NEG
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 0
38440: PUSH
38441: LD_INT 2
38443: NEG
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 1
38451: PUSH
38452: LD_INT 1
38454: NEG
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 2
38462: PUSH
38463: LD_INT 0
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 2
38472: PUSH
38473: LD_INT 1
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 2
38482: PUSH
38483: LD_INT 2
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 1
38492: PUSH
38493: LD_INT 2
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 0
38502: PUSH
38503: LD_INT 2
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 1
38512: NEG
38513: PUSH
38514: LD_INT 1
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 2
38523: NEG
38524: PUSH
38525: LD_INT 0
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 2
38534: NEG
38535: PUSH
38536: LD_INT 1
38538: NEG
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 2
38546: NEG
38547: PUSH
38548: LD_INT 2
38550: NEG
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 2
38558: PUSH
38559: LD_INT 3
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 1
38568: PUSH
38569: LD_INT 3
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 1
38578: NEG
38579: PUSH
38580: LD_INT 2
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 2
38589: NEG
38590: PUSH
38591: LD_INT 1
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38623: LD_ADDR_VAR 0 27
38627: PUSH
38628: LD_INT 0
38630: PUSH
38631: LD_INT 0
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 0
38640: PUSH
38641: LD_INT 1
38643: NEG
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 1
38651: PUSH
38652: LD_INT 0
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 1
38661: PUSH
38662: LD_INT 1
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 0
38671: PUSH
38672: LD_INT 1
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 1
38681: NEG
38682: PUSH
38683: LD_INT 0
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 1
38692: NEG
38693: PUSH
38694: LD_INT 1
38696: NEG
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 1
38704: NEG
38705: PUSH
38706: LD_INT 2
38708: NEG
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 0
38716: PUSH
38717: LD_INT 2
38719: NEG
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 1
38727: PUSH
38728: LD_INT 1
38730: NEG
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 2
38738: PUSH
38739: LD_INT 0
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 2
38748: PUSH
38749: LD_INT 1
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 2
38758: PUSH
38759: LD_INT 2
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 1
38768: PUSH
38769: LD_INT 2
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 0
38778: PUSH
38779: LD_INT 2
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 1
38788: NEG
38789: PUSH
38790: LD_INT 1
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 2
38799: NEG
38800: PUSH
38801: LD_INT 0
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 2
38810: NEG
38811: PUSH
38812: LD_INT 1
38814: NEG
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 2
38822: NEG
38823: PUSH
38824: LD_INT 2
38826: NEG
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 1
38834: NEG
38835: PUSH
38836: LD_INT 2
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 2
38845: NEG
38846: PUSH
38847: LD_INT 1
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 3
38856: NEG
38857: PUSH
38858: LD_INT 1
38860: NEG
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 3
38868: NEG
38869: PUSH
38870: LD_INT 2
38872: NEG
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38903: LD_ADDR_VAR 0 28
38907: PUSH
38908: LD_INT 0
38910: PUSH
38911: LD_INT 0
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 0
38920: PUSH
38921: LD_INT 1
38923: NEG
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 1
38931: PUSH
38932: LD_INT 0
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 1
38941: PUSH
38942: LD_INT 1
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 0
38951: PUSH
38952: LD_INT 1
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 1
38961: NEG
38962: PUSH
38963: LD_INT 0
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 1
38972: NEG
38973: PUSH
38974: LD_INT 1
38976: NEG
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 1
38984: NEG
38985: PUSH
38986: LD_INT 2
38988: NEG
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 0
38996: PUSH
38997: LD_INT 2
38999: NEG
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 1
39007: PUSH
39008: LD_INT 1
39010: NEG
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 2
39018: PUSH
39019: LD_INT 0
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 2
39028: PUSH
39029: LD_INT 1
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 2
39038: PUSH
39039: LD_INT 2
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 1
39048: PUSH
39049: LD_INT 2
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 0
39058: PUSH
39059: LD_INT 2
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 1
39068: NEG
39069: PUSH
39070: LD_INT 1
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 2
39079: NEG
39080: PUSH
39081: LD_INT 0
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 2
39090: NEG
39091: PUSH
39092: LD_INT 1
39094: NEG
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 2
39102: NEG
39103: PUSH
39104: LD_INT 2
39106: NEG
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 2
39114: NEG
39115: PUSH
39116: LD_INT 3
39118: NEG
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 1
39126: NEG
39127: PUSH
39128: LD_INT 3
39130: NEG
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 3
39138: NEG
39139: PUSH
39140: LD_INT 1
39142: NEG
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 3
39150: NEG
39151: PUSH
39152: LD_INT 2
39154: NEG
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39185: LD_ADDR_VAR 0 29
39189: PUSH
39190: LD_INT 0
39192: PUSH
39193: LD_INT 0
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 0
39202: PUSH
39203: LD_INT 1
39205: NEG
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 1
39213: PUSH
39214: LD_INT 0
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 1
39223: PUSH
39224: LD_INT 1
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 0
39233: PUSH
39234: LD_INT 1
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 1
39243: NEG
39244: PUSH
39245: LD_INT 0
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 1
39254: NEG
39255: PUSH
39256: LD_INT 1
39258: NEG
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 1
39266: NEG
39267: PUSH
39268: LD_INT 2
39270: NEG
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 0
39278: PUSH
39279: LD_INT 2
39281: NEG
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 1
39289: PUSH
39290: LD_INT 1
39292: NEG
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 2
39300: PUSH
39301: LD_INT 0
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 2
39310: PUSH
39311: LD_INT 1
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 1
39320: PUSH
39321: LD_INT 2
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 0
39330: PUSH
39331: LD_INT 2
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 1
39340: NEG
39341: PUSH
39342: LD_INT 1
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 2
39351: NEG
39352: PUSH
39353: LD_INT 1
39355: NEG
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 2
39363: NEG
39364: PUSH
39365: LD_INT 2
39367: NEG
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 2
39375: NEG
39376: PUSH
39377: LD_INT 3
39379: NEG
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 2
39387: PUSH
39388: LD_INT 1
39390: NEG
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 3
39398: PUSH
39399: LD_INT 1
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 1
39408: PUSH
39409: LD_INT 3
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 1
39418: NEG
39419: PUSH
39420: LD_INT 2
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 3
39429: NEG
39430: PUSH
39431: LD_INT 2
39433: NEG
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39464: LD_ADDR_VAR 0 30
39468: PUSH
39469: LD_INT 0
39471: PUSH
39472: LD_INT 0
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 0
39481: PUSH
39482: LD_INT 1
39484: NEG
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 1
39492: PUSH
39493: LD_INT 0
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 1
39502: PUSH
39503: LD_INT 1
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 0
39512: PUSH
39513: LD_INT 1
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 1
39522: NEG
39523: PUSH
39524: LD_INT 0
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 1
39533: NEG
39534: PUSH
39535: LD_INT 1
39537: NEG
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 1
39545: NEG
39546: PUSH
39547: LD_INT 2
39549: NEG
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 0
39557: PUSH
39558: LD_INT 2
39560: NEG
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 1
39568: PUSH
39569: LD_INT 1
39571: NEG
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 2
39579: PUSH
39580: LD_INT 0
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 2
39589: PUSH
39590: LD_INT 1
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 2
39599: PUSH
39600: LD_INT 2
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 1
39609: PUSH
39610: LD_INT 2
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 1
39619: NEG
39620: PUSH
39621: LD_INT 1
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 2
39630: NEG
39631: PUSH
39632: LD_INT 0
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 2
39641: NEG
39642: PUSH
39643: LD_INT 1
39645: NEG
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 1
39653: NEG
39654: PUSH
39655: LD_INT 3
39657: NEG
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 1
39665: PUSH
39666: LD_INT 2
39668: NEG
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 3
39676: PUSH
39677: LD_INT 2
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 2
39686: PUSH
39687: LD_INT 3
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 2
39696: NEG
39697: PUSH
39698: LD_INT 1
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 3
39707: NEG
39708: PUSH
39709: LD_INT 1
39711: NEG
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39742: LD_ADDR_VAR 0 31
39746: PUSH
39747: LD_INT 0
39749: PUSH
39750: LD_INT 0
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 0
39759: PUSH
39760: LD_INT 1
39762: NEG
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 1
39770: PUSH
39771: LD_INT 0
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 1
39780: PUSH
39781: LD_INT 1
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 0
39790: PUSH
39791: LD_INT 1
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 1
39800: NEG
39801: PUSH
39802: LD_INT 0
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 1
39811: NEG
39812: PUSH
39813: LD_INT 1
39815: NEG
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 1
39823: NEG
39824: PUSH
39825: LD_INT 2
39827: NEG
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 1
39835: PUSH
39836: LD_INT 1
39838: NEG
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 2
39846: PUSH
39847: LD_INT 0
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 2
39856: PUSH
39857: LD_INT 1
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 2
39866: PUSH
39867: LD_INT 2
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 1
39876: PUSH
39877: LD_INT 2
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 0
39886: PUSH
39887: LD_INT 2
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 1
39896: NEG
39897: PUSH
39898: LD_INT 1
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 2
39907: NEG
39908: PUSH
39909: LD_INT 1
39911: NEG
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 2
39919: NEG
39920: PUSH
39921: LD_INT 2
39923: NEG
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 2
39931: NEG
39932: PUSH
39933: LD_INT 3
39935: NEG
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 2
39943: PUSH
39944: LD_INT 1
39946: NEG
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 3
39954: PUSH
39955: LD_INT 1
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 1
39964: PUSH
39965: LD_INT 3
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 1
39974: NEG
39975: PUSH
39976: LD_INT 2
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 3
39985: NEG
39986: PUSH
39987: LD_INT 2
39989: NEG
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40020: LD_ADDR_VAR 0 32
40024: PUSH
40025: LD_INT 0
40027: PUSH
40028: LD_INT 0
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 0
40037: PUSH
40038: LD_INT 1
40040: NEG
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 1
40048: PUSH
40049: LD_INT 0
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 1
40058: PUSH
40059: LD_INT 1
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 0
40068: PUSH
40069: LD_INT 1
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 1
40078: NEG
40079: PUSH
40080: LD_INT 0
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 1
40089: NEG
40090: PUSH
40091: LD_INT 1
40093: NEG
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 1
40101: NEG
40102: PUSH
40103: LD_INT 2
40105: NEG
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 0
40113: PUSH
40114: LD_INT 2
40116: NEG
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 1
40124: PUSH
40125: LD_INT 1
40127: NEG
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 2
40135: PUSH
40136: LD_INT 1
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 2
40145: PUSH
40146: LD_INT 2
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 1
40155: PUSH
40156: LD_INT 2
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 0
40165: PUSH
40166: LD_INT 2
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 1
40175: NEG
40176: PUSH
40177: LD_INT 1
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 2
40186: NEG
40187: PUSH
40188: LD_INT 0
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 2
40197: NEG
40198: PUSH
40199: LD_INT 1
40201: NEG
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 1
40209: NEG
40210: PUSH
40211: LD_INT 3
40213: NEG
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 1
40221: PUSH
40222: LD_INT 2
40224: NEG
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 3
40232: PUSH
40233: LD_INT 2
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 2
40242: PUSH
40243: LD_INT 3
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 2
40252: NEG
40253: PUSH
40254: LD_INT 1
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 3
40263: NEG
40264: PUSH
40265: LD_INT 1
40267: NEG
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40298: LD_ADDR_VAR 0 33
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: LD_INT 0
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 0
40315: PUSH
40316: LD_INT 1
40318: NEG
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 1
40326: PUSH
40327: LD_INT 0
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 1
40336: PUSH
40337: LD_INT 1
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 0
40346: PUSH
40347: LD_INT 1
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 1
40356: NEG
40357: PUSH
40358: LD_INT 0
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 1
40367: NEG
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 1
40379: NEG
40380: PUSH
40381: LD_INT 2
40383: NEG
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 1
40391: PUSH
40392: LD_INT 1
40394: NEG
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 2
40402: PUSH
40403: LD_INT 0
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 2
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 1
40422: PUSH
40423: LD_INT 2
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 0
40432: PUSH
40433: LD_INT 2
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 1
40442: NEG
40443: PUSH
40444: LD_INT 1
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 2
40453: NEG
40454: PUSH
40455: LD_INT 0
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 2
40464: NEG
40465: PUSH
40466: LD_INT 1
40468: NEG
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 2
40476: NEG
40477: PUSH
40478: LD_INT 2
40480: NEG
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 2
40488: NEG
40489: PUSH
40490: LD_INT 3
40492: NEG
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 2
40500: PUSH
40501: LD_INT 1
40503: NEG
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 3
40511: PUSH
40512: LD_INT 1
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 1
40521: PUSH
40522: LD_INT 3
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 1
40531: NEG
40532: PUSH
40533: LD_INT 2
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 3
40542: NEG
40543: PUSH
40544: LD_INT 2
40546: NEG
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40577: LD_ADDR_VAR 0 34
40581: PUSH
40582: LD_INT 0
40584: PUSH
40585: LD_INT 0
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 0
40594: PUSH
40595: LD_INT 1
40597: NEG
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 1
40605: PUSH
40606: LD_INT 0
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 1
40615: PUSH
40616: LD_INT 1
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: LD_INT 1
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 1
40635: NEG
40636: PUSH
40637: LD_INT 0
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 1
40646: NEG
40647: PUSH
40648: LD_INT 1
40650: NEG
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 1
40658: NEG
40659: PUSH
40660: LD_INT 2
40662: NEG
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 0
40670: PUSH
40671: LD_INT 2
40673: NEG
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 1
40681: PUSH
40682: LD_INT 1
40684: NEG
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 2
40692: PUSH
40693: LD_INT 1
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 2
40702: PUSH
40703: LD_INT 2
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 1
40712: PUSH
40713: LD_INT 2
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 1
40722: NEG
40723: PUSH
40724: LD_INT 1
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 2
40733: NEG
40734: PUSH
40735: LD_INT 0
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 2
40744: NEG
40745: PUSH
40746: LD_INT 1
40748: NEG
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 2
40756: NEG
40757: PUSH
40758: LD_INT 2
40760: NEG
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 1
40768: NEG
40769: PUSH
40770: LD_INT 3
40772: NEG
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 1
40780: PUSH
40781: LD_INT 2
40783: NEG
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 3
40791: PUSH
40792: LD_INT 2
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 2
40801: PUSH
40802: LD_INT 3
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 2
40811: NEG
40812: PUSH
40813: LD_INT 1
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 3
40822: NEG
40823: PUSH
40824: LD_INT 1
40826: NEG
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40857: LD_ADDR_VAR 0 35
40861: PUSH
40862: LD_INT 0
40864: PUSH
40865: LD_INT 0
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 0
40874: PUSH
40875: LD_INT 1
40877: NEG
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 1
40885: PUSH
40886: LD_INT 0
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 1
40895: PUSH
40896: LD_INT 1
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: LD_INT 1
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 1
40915: NEG
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 1
40926: NEG
40927: PUSH
40928: LD_INT 1
40930: NEG
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 2
40938: PUSH
40939: LD_INT 1
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 2
40948: NEG
40949: PUSH
40950: LD_INT 1
40952: NEG
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40969: LD_ADDR_VAR 0 36
40973: PUSH
40974: LD_INT 0
40976: PUSH
40977: LD_INT 0
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 0
40986: PUSH
40987: LD_INT 1
40989: NEG
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 1
40997: PUSH
40998: LD_INT 0
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 1
41007: PUSH
41008: LD_INT 1
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 0
41017: PUSH
41018: LD_INT 1
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 1
41027: NEG
41028: PUSH
41029: LD_INT 0
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 1
41038: NEG
41039: PUSH
41040: LD_INT 1
41042: NEG
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 1
41050: NEG
41051: PUSH
41052: LD_INT 2
41054: NEG
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 1
41062: PUSH
41063: LD_INT 2
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41081: LD_ADDR_VAR 0 37
41085: PUSH
41086: LD_INT 0
41088: PUSH
41089: LD_INT 0
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 0
41098: PUSH
41099: LD_INT 1
41101: NEG
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 1
41109: PUSH
41110: LD_INT 0
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 1
41119: PUSH
41120: LD_INT 1
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 0
41129: PUSH
41130: LD_INT 1
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 1
41139: NEG
41140: PUSH
41141: LD_INT 0
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 1
41150: NEG
41151: PUSH
41152: LD_INT 1
41154: NEG
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 1
41162: PUSH
41163: LD_INT 1
41165: NEG
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 1
41173: NEG
41174: PUSH
41175: LD_INT 1
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41193: LD_ADDR_VAR 0 38
41197: PUSH
41198: LD_INT 0
41200: PUSH
41201: LD_INT 0
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 0
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 1
41221: PUSH
41222: LD_INT 0
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 1
41231: PUSH
41232: LD_INT 1
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: LD_INT 1
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 1
41251: NEG
41252: PUSH
41253: LD_INT 0
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 1
41262: NEG
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 2
41274: PUSH
41275: LD_INT 1
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 2
41284: NEG
41285: PUSH
41286: LD_INT 1
41288: NEG
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41305: LD_ADDR_VAR 0 39
41309: PUSH
41310: LD_INT 0
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: LD_INT 1
41325: NEG
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 1
41333: PUSH
41334: LD_INT 0
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 1
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 0
41353: PUSH
41354: LD_INT 1
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: NEG
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 1
41374: NEG
41375: PUSH
41376: LD_INT 1
41378: NEG
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 1
41386: NEG
41387: PUSH
41388: LD_INT 2
41390: NEG
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 1
41398: PUSH
41399: LD_INT 2
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41417: LD_ADDR_VAR 0 40
41421: PUSH
41422: LD_INT 0
41424: PUSH
41425: LD_INT 0
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: LD_INT 1
41437: NEG
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 1
41445: PUSH
41446: LD_INT 0
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 1
41455: PUSH
41456: LD_INT 1
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 0
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 1
41475: NEG
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: LD_INT 1
41490: NEG
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 1
41498: PUSH
41499: LD_INT 1
41501: NEG
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 1
41509: NEG
41510: PUSH
41511: LD_INT 1
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41529: LD_ADDR_VAR 0 41
41533: PUSH
41534: LD_INT 0
41536: PUSH
41537: LD_INT 0
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 0
41546: PUSH
41547: LD_INT 1
41549: NEG
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 1
41557: PUSH
41558: LD_INT 0
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 1
41567: PUSH
41568: LD_INT 1
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 0
41577: PUSH
41578: LD_INT 1
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 1
41587: NEG
41588: PUSH
41589: LD_INT 0
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 1
41598: NEG
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 1
41610: NEG
41611: PUSH
41612: LD_INT 2
41614: NEG
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 1
41622: PUSH
41623: LD_INT 1
41625: NEG
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 2
41633: PUSH
41634: LD_INT 0
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 2
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 2
41653: PUSH
41654: LD_INT 2
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 1
41663: PUSH
41664: LD_INT 2
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 1
41673: NEG
41674: PUSH
41675: LD_INT 1
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 2
41684: NEG
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 2
41695: NEG
41696: PUSH
41697: LD_INT 1
41699: NEG
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 2
41707: NEG
41708: PUSH
41709: LD_INT 2
41711: NEG
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 2
41719: NEG
41720: PUSH
41721: LD_INT 3
41723: NEG
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 2
41731: PUSH
41732: LD_INT 1
41734: NEG
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 3
41742: PUSH
41743: LD_INT 0
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 3
41752: PUSH
41753: LD_INT 1
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 3
41762: PUSH
41763: LD_INT 2
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 3
41772: PUSH
41773: LD_INT 3
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 2
41782: PUSH
41783: LD_INT 3
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 2
41792: NEG
41793: PUSH
41794: LD_INT 1
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 3
41803: NEG
41804: PUSH
41805: LD_INT 0
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 3
41814: NEG
41815: PUSH
41816: LD_INT 1
41818: NEG
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 3
41826: NEG
41827: PUSH
41828: LD_INT 2
41830: NEG
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 3
41838: NEG
41839: PUSH
41840: LD_INT 3
41842: NEG
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41879: LD_ADDR_VAR 0 42
41883: PUSH
41884: LD_INT 0
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 0
41896: PUSH
41897: LD_INT 1
41899: NEG
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 1
41907: PUSH
41908: LD_INT 0
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 1
41917: PUSH
41918: LD_INT 1
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 0
41927: PUSH
41928: LD_INT 1
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 1
41937: NEG
41938: PUSH
41939: LD_INT 0
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 1
41948: NEG
41949: PUSH
41950: LD_INT 1
41952: NEG
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 1
41960: NEG
41961: PUSH
41962: LD_INT 2
41964: NEG
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 0
41972: PUSH
41973: LD_INT 2
41975: NEG
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 1
41983: PUSH
41984: LD_INT 1
41986: NEG
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 2
41994: PUSH
41995: LD_INT 1
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 2
42004: PUSH
42005: LD_INT 2
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 1
42014: PUSH
42015: LD_INT 2
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 0
42024: PUSH
42025: LD_INT 2
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 1
42034: NEG
42035: PUSH
42036: LD_INT 1
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 2
42045: NEG
42046: PUSH
42047: LD_INT 1
42049: NEG
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 2
42057: NEG
42058: PUSH
42059: LD_INT 2
42061: NEG
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 2
42069: NEG
42070: PUSH
42071: LD_INT 3
42073: NEG
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 1
42081: NEG
42082: PUSH
42083: LD_INT 3
42085: NEG
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 0
42093: PUSH
42094: LD_INT 3
42096: NEG
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 1
42104: PUSH
42105: LD_INT 2
42107: NEG
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 3
42115: PUSH
42116: LD_INT 2
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 3
42125: PUSH
42126: LD_INT 3
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 2
42135: PUSH
42136: LD_INT 3
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 1
42145: PUSH
42146: LD_INT 3
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 0
42155: PUSH
42156: LD_INT 3
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 1
42165: NEG
42166: PUSH
42167: LD_INT 2
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 3
42176: NEG
42177: PUSH
42178: LD_INT 2
42180: NEG
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 3
42188: NEG
42189: PUSH
42190: LD_INT 3
42192: NEG
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42229: LD_ADDR_VAR 0 43
42233: PUSH
42234: LD_INT 0
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 0
42246: PUSH
42247: LD_INT 1
42249: NEG
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 1
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 1
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: LD_INT 1
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 1
42287: NEG
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: LD_INT 1
42302: NEG
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 1
42310: NEG
42311: PUSH
42312: LD_INT 2
42314: NEG
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 0
42322: PUSH
42323: LD_INT 2
42325: NEG
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 1
42333: PUSH
42334: LD_INT 1
42336: NEG
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 2
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 2
42354: PUSH
42355: LD_INT 1
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 1
42364: PUSH
42365: LD_INT 2
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 0
42374: PUSH
42375: LD_INT 2
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 1
42384: NEG
42385: PUSH
42386: LD_INT 1
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 2
42395: NEG
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 2
42406: NEG
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 1
42418: NEG
42419: PUSH
42420: LD_INT 3
42422: NEG
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 0
42430: PUSH
42431: LD_INT 3
42433: NEG
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 1
42441: PUSH
42442: LD_INT 2
42444: NEG
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 2
42452: PUSH
42453: LD_INT 1
42455: NEG
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 3
42463: PUSH
42464: LD_INT 0
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 3
42473: PUSH
42474: LD_INT 1
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 1
42483: PUSH
42484: LD_INT 3
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 0
42493: PUSH
42494: LD_INT 3
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 1
42503: NEG
42504: PUSH
42505: LD_INT 2
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 2
42514: NEG
42515: PUSH
42516: LD_INT 1
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 3
42525: NEG
42526: PUSH
42527: LD_INT 0
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 3
42536: NEG
42537: PUSH
42538: LD_INT 1
42540: NEG
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42577: LD_ADDR_VAR 0 44
42581: PUSH
42582: LD_INT 0
42584: PUSH
42585: LD_INT 0
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 0
42594: PUSH
42595: LD_INT 1
42597: NEG
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 1
42605: PUSH
42606: LD_INT 0
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 1
42615: PUSH
42616: LD_INT 1
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: LD_INT 1
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 1
42635: NEG
42636: PUSH
42637: LD_INT 0
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 1
42646: NEG
42647: PUSH
42648: LD_INT 1
42650: NEG
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 1
42658: NEG
42659: PUSH
42660: LD_INT 2
42662: NEG
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 1
42670: PUSH
42671: LD_INT 1
42673: NEG
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 2
42681: PUSH
42682: LD_INT 0
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 2
42691: PUSH
42692: LD_INT 1
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 2
42701: PUSH
42702: LD_INT 2
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 1
42711: PUSH
42712: LD_INT 2
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 1
42721: NEG
42722: PUSH
42723: LD_INT 1
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 2
42732: NEG
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 2
42743: NEG
42744: PUSH
42745: LD_INT 1
42747: NEG
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 2
42755: NEG
42756: PUSH
42757: LD_INT 2
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 2
42767: NEG
42768: PUSH
42769: LD_INT 3
42771: NEG
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 2
42779: PUSH
42780: LD_INT 1
42782: NEG
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 3
42790: PUSH
42791: LD_INT 0
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 3
42800: PUSH
42801: LD_INT 1
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 3
42810: PUSH
42811: LD_INT 2
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 3
42820: PUSH
42821: LD_INT 3
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 2
42830: PUSH
42831: LD_INT 3
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 2
42840: NEG
42841: PUSH
42842: LD_INT 1
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 3
42851: NEG
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 3
42862: NEG
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 3
42874: NEG
42875: PUSH
42876: LD_INT 2
42878: NEG
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 3
42886: NEG
42887: PUSH
42888: LD_INT 3
42890: NEG
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42927: LD_ADDR_VAR 0 45
42931: PUSH
42932: LD_INT 0
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 0
42944: PUSH
42945: LD_INT 1
42947: NEG
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 1
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 1
42965: PUSH
42966: LD_INT 1
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: LD_INT 1
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 1
42985: NEG
42986: PUSH
42987: LD_INT 0
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 1
42996: NEG
42997: PUSH
42998: LD_INT 1
43000: NEG
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: LD_INT 2
43012: NEG
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 0
43020: PUSH
43021: LD_INT 2
43023: NEG
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 1
43031: PUSH
43032: LD_INT 1
43034: NEG
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 2
43042: PUSH
43043: LD_INT 1
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 2
43052: PUSH
43053: LD_INT 2
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 1
43062: PUSH
43063: LD_INT 2
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 0
43072: PUSH
43073: LD_INT 2
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 1
43082: NEG
43083: PUSH
43084: LD_INT 1
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 2
43093: NEG
43094: PUSH
43095: LD_INT 1
43097: NEG
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 2
43105: NEG
43106: PUSH
43107: LD_INT 2
43109: NEG
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 2
43117: NEG
43118: PUSH
43119: LD_INT 3
43121: NEG
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 1
43129: NEG
43130: PUSH
43131: LD_INT 3
43133: NEG
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 0
43141: PUSH
43142: LD_INT 3
43144: NEG
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 1
43152: PUSH
43153: LD_INT 2
43155: NEG
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 3
43163: PUSH
43164: LD_INT 2
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 3
43173: PUSH
43174: LD_INT 3
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 2
43183: PUSH
43184: LD_INT 3
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 1
43193: PUSH
43194: LD_INT 3
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 0
43203: PUSH
43204: LD_INT 3
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 1
43213: NEG
43214: PUSH
43215: LD_INT 2
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 3
43224: NEG
43225: PUSH
43226: LD_INT 2
43228: NEG
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 3
43236: NEG
43237: PUSH
43238: LD_INT 3
43240: NEG
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43277: LD_ADDR_VAR 0 46
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: LD_INT 0
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 1
43305: PUSH
43306: LD_INT 0
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 1
43315: PUSH
43316: LD_INT 1
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: LD_INT 1
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 1
43335: NEG
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 1
43346: NEG
43347: PUSH
43348: LD_INT 1
43350: NEG
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 1
43358: NEG
43359: PUSH
43360: LD_INT 2
43362: NEG
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 0
43370: PUSH
43371: LD_INT 2
43373: NEG
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 1
43381: PUSH
43382: LD_INT 1
43384: NEG
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 2
43392: PUSH
43393: LD_INT 0
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 2
43402: PUSH
43403: LD_INT 1
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 1
43412: PUSH
43413: LD_INT 2
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 0
43422: PUSH
43423: LD_INT 2
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 1
43432: NEG
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 2
43443: NEG
43444: PUSH
43445: LD_INT 0
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 2
43454: NEG
43455: PUSH
43456: LD_INT 1
43458: NEG
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 1
43466: NEG
43467: PUSH
43468: LD_INT 3
43470: NEG
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 0
43478: PUSH
43479: LD_INT 3
43481: NEG
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 1
43489: PUSH
43490: LD_INT 2
43492: NEG
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 2
43500: PUSH
43501: LD_INT 1
43503: NEG
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 3
43511: PUSH
43512: LD_INT 0
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 3
43521: PUSH
43522: LD_INT 1
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 1
43531: PUSH
43532: LD_INT 3
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 0
43541: PUSH
43542: LD_INT 3
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 1
43551: NEG
43552: PUSH
43553: LD_INT 2
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 2
43562: NEG
43563: PUSH
43564: LD_INT 1
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 3
43573: NEG
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 3
43584: NEG
43585: PUSH
43586: LD_INT 1
43588: NEG
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43625: LD_ADDR_VAR 0 47
43629: PUSH
43630: LD_INT 0
43632: PUSH
43633: LD_INT 0
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: LD_INT 1
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 1
43653: PUSH
43654: LD_INT 0
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 1
43663: PUSH
43664: LD_INT 1
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: LD_INT 1
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 1
43683: NEG
43684: PUSH
43685: LD_INT 0
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 1
43694: NEG
43695: PUSH
43696: LD_INT 1
43698: NEG
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 1
43706: NEG
43707: PUSH
43708: LD_INT 2
43710: NEG
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 0
43718: PUSH
43719: LD_INT 2
43721: NEG
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 1
43729: PUSH
43730: LD_INT 1
43732: NEG
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 2
43740: NEG
43741: PUSH
43742: LD_INT 1
43744: NEG
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 2
43752: NEG
43753: PUSH
43754: LD_INT 2
43756: NEG
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43776: LD_ADDR_VAR 0 48
43780: PUSH
43781: LD_INT 0
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 0
43793: PUSH
43794: LD_INT 1
43796: NEG
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 1
43804: PUSH
43805: LD_INT 0
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 1
43814: PUSH
43815: LD_INT 1
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 0
43824: PUSH
43825: LD_INT 1
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 1
43834: NEG
43835: PUSH
43836: LD_INT 0
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 1
43845: NEG
43846: PUSH
43847: LD_INT 1
43849: NEG
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 1
43857: NEG
43858: PUSH
43859: LD_INT 2
43861: NEG
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: LD_INT 2
43872: NEG
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 1
43880: PUSH
43881: LD_INT 1
43883: NEG
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 2
43891: PUSH
43892: LD_INT 0
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 2
43901: PUSH
43902: LD_INT 1
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43923: LD_ADDR_VAR 0 49
43927: PUSH
43928: LD_INT 0
43930: PUSH
43931: LD_INT 0
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 0
43940: PUSH
43941: LD_INT 1
43943: NEG
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: LD_INT 0
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: LD_INT 1
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: LD_INT 1
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 1
44004: PUSH
44005: LD_INT 1
44007: NEG
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 2
44015: PUSH
44016: LD_INT 0
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 2
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 2
44035: PUSH
44036: LD_INT 2
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 1
44045: PUSH
44046: LD_INT 2
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44067: LD_ADDR_VAR 0 50
44071: PUSH
44072: LD_INT 0
44074: PUSH
44075: LD_INT 0
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 0
44084: PUSH
44085: LD_INT 1
44087: NEG
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 1
44095: PUSH
44096: LD_INT 0
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 1
44105: PUSH
44106: LD_INT 1
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 0
44115: PUSH
44116: LD_INT 1
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 1
44125: NEG
44126: PUSH
44127: LD_INT 0
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 1
44136: NEG
44137: PUSH
44138: LD_INT 1
44140: NEG
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 2
44148: PUSH
44149: LD_INT 1
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 2
44158: PUSH
44159: LD_INT 2
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 1
44168: PUSH
44169: LD_INT 2
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 0
44178: PUSH
44179: LD_INT 2
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 1
44188: NEG
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44211: LD_ADDR_VAR 0 51
44215: PUSH
44216: LD_INT 0
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: LD_INT 1
44231: NEG
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 1
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 1
44249: PUSH
44250: LD_INT 1
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 0
44259: PUSH
44260: LD_INT 1
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 1
44269: NEG
44270: PUSH
44271: LD_INT 0
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 1
44280: NEG
44281: PUSH
44282: LD_INT 1
44284: NEG
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 1
44292: PUSH
44293: LD_INT 2
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: LD_INT 2
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 1
44312: NEG
44313: PUSH
44314: LD_INT 1
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 2
44323: NEG
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 2
44334: NEG
44335: PUSH
44336: LD_INT 1
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44358: LD_ADDR_VAR 0 52
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 0
44375: PUSH
44376: LD_INT 1
44378: NEG
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 1
44386: PUSH
44387: LD_INT 0
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 1
44396: PUSH
44397: LD_INT 1
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 0
44406: PUSH
44407: LD_INT 1
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: LD_INT 0
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 1
44427: NEG
44428: PUSH
44429: LD_INT 1
44431: NEG
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: LD_INT 2
44443: NEG
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 1
44451: NEG
44452: PUSH
44453: LD_INT 1
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 2
44462: NEG
44463: PUSH
44464: LD_INT 0
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 2
44473: NEG
44474: PUSH
44475: LD_INT 1
44477: NEG
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 2
44485: NEG
44486: PUSH
44487: LD_INT 2
44489: NEG
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44509: LD_ADDR_VAR 0 53
44513: PUSH
44514: LD_INT 0
44516: PUSH
44517: LD_INT 0
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: LD_INT 1
44529: NEG
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 1
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 1
44547: PUSH
44548: LD_INT 1
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: LD_INT 1
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 1
44567: NEG
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 1
44578: NEG
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 1
44590: NEG
44591: PUSH
44592: LD_INT 2
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 0
44602: PUSH
44603: LD_INT 2
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 1
44613: PUSH
44614: LD_INT 1
44616: NEG
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 2
44624: PUSH
44625: LD_INT 0
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 2
44634: PUSH
44635: LD_INT 1
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 2
44644: PUSH
44645: LD_INT 2
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: LD_INT 2
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 0
44664: PUSH
44665: LD_INT 2
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 1
44674: NEG
44675: PUSH
44676: LD_INT 1
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 2
44685: NEG
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 2
44696: NEG
44697: PUSH
44698: LD_INT 1
44700: NEG
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 2
44708: NEG
44709: PUSH
44710: LD_INT 2
44712: NEG
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44739: LD_ADDR_VAR 0 54
44743: PUSH
44744: LD_INT 0
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 1
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 1
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 0
44787: PUSH
44788: LD_INT 1
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 1
44797: NEG
44798: PUSH
44799: LD_INT 0
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 1
44808: NEG
44809: PUSH
44810: LD_INT 1
44812: NEG
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 1
44820: NEG
44821: PUSH
44822: LD_INT 2
44824: NEG
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 0
44832: PUSH
44833: LD_INT 2
44835: NEG
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 1
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 2
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 2
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 2
44874: PUSH
44875: LD_INT 2
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 1
44884: PUSH
44885: LD_INT 2
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: LD_INT 2
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 1
44904: NEG
44905: PUSH
44906: LD_INT 1
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 2
44915: NEG
44916: PUSH
44917: LD_INT 0
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 2
44926: NEG
44927: PUSH
44928: LD_INT 1
44930: NEG
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 2
44938: NEG
44939: PUSH
44940: LD_INT 2
44942: NEG
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44969: LD_ADDR_VAR 0 55
44973: PUSH
44974: LD_INT 0
44976: PUSH
44977: LD_INT 0
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: LD_INT 1
44989: NEG
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 1
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: LD_INT 1
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 0
45017: PUSH
45018: LD_INT 1
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 1
45027: NEG
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 1
45050: NEG
45051: PUSH
45052: LD_INT 2
45054: NEG
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 0
45062: PUSH
45063: LD_INT 2
45065: NEG
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 1
45073: PUSH
45074: LD_INT 1
45076: NEG
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 2
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 2
45094: PUSH
45095: LD_INT 1
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 2
45104: PUSH
45105: LD_INT 2
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: LD_INT 2
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 0
45124: PUSH
45125: LD_INT 2
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 1
45134: NEG
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 2
45145: NEG
45146: PUSH
45147: LD_INT 0
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 2
45156: NEG
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 2
45168: NEG
45169: PUSH
45170: LD_INT 2
45172: NEG
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45199: LD_ADDR_VAR 0 56
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: LD_INT 0
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 1
45227: PUSH
45228: LD_INT 0
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: PUSH
45238: LD_INT 1
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 0
45247: PUSH
45248: LD_INT 1
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 1
45257: NEG
45258: PUSH
45259: LD_INT 0
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 1
45268: NEG
45269: PUSH
45270: LD_INT 1
45272: NEG
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 1
45280: NEG
45281: PUSH
45282: LD_INT 2
45284: NEG
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 0
45292: PUSH
45293: LD_INT 2
45295: NEG
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 1
45303: PUSH
45304: LD_INT 1
45306: NEG
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 2
45314: PUSH
45315: LD_INT 0
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 2
45324: PUSH
45325: LD_INT 1
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 2
45334: PUSH
45335: LD_INT 2
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 1
45344: PUSH
45345: LD_INT 2
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 0
45354: PUSH
45355: LD_INT 2
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 1
45364: NEG
45365: PUSH
45366: LD_INT 1
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 2
45375: NEG
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 2
45386: NEG
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 2
45398: NEG
45399: PUSH
45400: LD_INT 2
45402: NEG
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45429: LD_ADDR_VAR 0 57
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: LD_INT 1
45449: NEG
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: LD_INT 1
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 1
45487: NEG
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 1
45498: NEG
45499: PUSH
45500: LD_INT 1
45502: NEG
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 1
45510: NEG
45511: PUSH
45512: LD_INT 2
45514: NEG
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 0
45522: PUSH
45523: LD_INT 2
45525: NEG
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 1
45533: PUSH
45534: LD_INT 1
45536: NEG
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 2
45544: PUSH
45545: LD_INT 0
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 2
45554: PUSH
45555: LD_INT 1
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 2
45564: PUSH
45565: LD_INT 2
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 1
45574: PUSH
45575: LD_INT 2
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 0
45584: PUSH
45585: LD_INT 2
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: NEG
45595: PUSH
45596: LD_INT 1
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 2
45605: NEG
45606: PUSH
45607: LD_INT 0
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 2
45616: NEG
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 2
45628: NEG
45629: PUSH
45630: LD_INT 2
45632: NEG
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45659: LD_ADDR_VAR 0 58
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: LD_INT 0
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: LD_INT 1
45679: NEG
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: LD_INT 0
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 1
45697: PUSH
45698: LD_INT 1
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 0
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 1
45717: NEG
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 1
45728: NEG
45729: PUSH
45730: LD_INT 1
45732: NEG
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 1
45740: NEG
45741: PUSH
45742: LD_INT 2
45744: NEG
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 0
45752: PUSH
45753: LD_INT 2
45755: NEG
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 1
45763: PUSH
45764: LD_INT 1
45766: NEG
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 2
45774: PUSH
45775: LD_INT 0
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 2
45784: PUSH
45785: LD_INT 1
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 2
45794: PUSH
45795: LD_INT 2
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 1
45804: PUSH
45805: LD_INT 2
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 0
45814: PUSH
45815: LD_INT 2
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 1
45824: NEG
45825: PUSH
45826: LD_INT 1
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 2
45835: NEG
45836: PUSH
45837: LD_INT 0
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 2
45846: NEG
45847: PUSH
45848: LD_INT 1
45850: NEG
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 2
45858: NEG
45859: PUSH
45860: LD_INT 2
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45889: LD_ADDR_VAR 0 59
45893: PUSH
45894: LD_INT 0
45896: PUSH
45897: LD_INT 0
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 0
45906: PUSH
45907: LD_INT 1
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 1
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 1
45927: PUSH
45928: LD_INT 1
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: LD_INT 1
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: LD_INT 0
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 1
45958: NEG
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45977: LD_ADDR_VAR 0 60
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: LD_INT 1
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46065: LD_ADDR_VAR 0 61
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: LD_INT 0
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: LD_INT 1
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: NEG
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46153: LD_ADDR_VAR 0 62
46157: PUSH
46158: LD_INT 0
46160: PUSH
46161: LD_INT 0
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 0
46170: PUSH
46171: LD_INT 1
46173: NEG
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 1
46181: PUSH
46182: LD_INT 0
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 1
46191: PUSH
46192: LD_INT 1
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 0
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 1
46211: NEG
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 1
46222: NEG
46223: PUSH
46224: LD_INT 1
46226: NEG
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46241: LD_ADDR_VAR 0 63
46245: PUSH
46246: LD_INT 0
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 0
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: LD_INT 0
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 1
46279: PUSH
46280: LD_INT 1
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 0
46289: PUSH
46290: LD_INT 1
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: NEG
46300: PUSH
46301: LD_INT 0
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 1
46310: NEG
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46329: LD_ADDR_VAR 0 64
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 1
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 0
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 1
46387: NEG
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: LD_INT 1
46402: NEG
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: ST_TO_ADDR
// end ; 1 :
46417: GO 52314
46419: LD_INT 1
46421: DOUBLE
46422: EQUAL
46423: IFTRUE 46427
46425: GO 49050
46427: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46428: LD_ADDR_VAR 0 11
46432: PUSH
46433: LD_INT 1
46435: NEG
46436: PUSH
46437: LD_INT 3
46439: NEG
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 0
46447: PUSH
46448: LD_INT 3
46450: NEG
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: LD_INT 2
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: LIST
46471: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46472: LD_ADDR_VAR 0 12
46476: PUSH
46477: LD_INT 2
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 3
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 3
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: LIST
46512: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46513: LD_ADDR_VAR 0 13
46517: PUSH
46518: LD_INT 3
46520: PUSH
46521: LD_INT 2
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 3
46530: PUSH
46531: LD_INT 3
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 2
46540: PUSH
46541: LD_INT 3
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: LIST
46552: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46553: LD_ADDR_VAR 0 14
46557: PUSH
46558: LD_INT 1
46560: PUSH
46561: LD_INT 3
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: LD_INT 3
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: LD_INT 2
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: LIST
46593: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46594: LD_ADDR_VAR 0 15
46598: PUSH
46599: LD_INT 2
46601: NEG
46602: PUSH
46603: LD_INT 1
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 3
46612: NEG
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 3
46623: NEG
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: LIST
46637: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46638: LD_ADDR_VAR 0 16
46642: PUSH
46643: LD_INT 2
46645: NEG
46646: PUSH
46647: LD_INT 3
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 3
46657: NEG
46658: PUSH
46659: LD_INT 2
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 3
46669: NEG
46670: PUSH
46671: LD_INT 3
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: LIST
46683: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46684: LD_ADDR_VAR 0 17
46688: PUSH
46689: LD_INT 1
46691: NEG
46692: PUSH
46693: LD_INT 3
46695: NEG
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 0
46703: PUSH
46704: LD_INT 3
46706: NEG
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 1
46714: PUSH
46715: LD_INT 2
46717: NEG
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: LIST
46727: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46728: LD_ADDR_VAR 0 18
46732: PUSH
46733: LD_INT 2
46735: PUSH
46736: LD_INT 1
46738: NEG
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 3
46746: PUSH
46747: LD_INT 0
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 3
46756: PUSH
46757: LD_INT 1
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: LIST
46768: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46769: LD_ADDR_VAR 0 19
46773: PUSH
46774: LD_INT 3
46776: PUSH
46777: LD_INT 2
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 3
46786: PUSH
46787: LD_INT 3
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 2
46796: PUSH
46797: LD_INT 3
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: LIST
46808: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46809: LD_ADDR_VAR 0 20
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: LD_INT 3
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: LD_INT 3
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: LD_INT 2
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: LIST
46849: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46850: LD_ADDR_VAR 0 21
46854: PUSH
46855: LD_INT 2
46857: NEG
46858: PUSH
46859: LD_INT 1
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 3
46868: NEG
46869: PUSH
46870: LD_INT 0
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 3
46879: NEG
46880: PUSH
46881: LD_INT 1
46883: NEG
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: LIST
46893: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46894: LD_ADDR_VAR 0 22
46898: PUSH
46899: LD_INT 2
46901: NEG
46902: PUSH
46903: LD_INT 3
46905: NEG
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 3
46913: NEG
46914: PUSH
46915: LD_INT 2
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 3
46925: NEG
46926: PUSH
46927: LD_INT 3
46929: NEG
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: LIST
46939: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46940: LD_ADDR_VAR 0 23
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: LD_INT 3
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 1
46958: NEG
46959: PUSH
46960: LD_INT 4
46962: NEG
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 1
46970: PUSH
46971: LD_INT 3
46973: NEG
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: LIST
46983: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46984: LD_ADDR_VAR 0 24
46988: PUSH
46989: LD_INT 3
46991: PUSH
46992: LD_INT 0
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 3
47001: PUSH
47002: LD_INT 1
47004: NEG
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 4
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: LIST
47024: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47025: LD_ADDR_VAR 0 25
47029: PUSH
47030: LD_INT 3
47032: PUSH
47033: LD_INT 3
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 4
47042: PUSH
47043: LD_INT 3
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 3
47052: PUSH
47053: LD_INT 4
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: LIST
47064: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47065: LD_ADDR_VAR 0 26
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: LD_INT 3
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 1
47082: PUSH
47083: LD_INT 4
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: LD_INT 3
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: LIST
47105: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47106: LD_ADDR_VAR 0 27
47110: PUSH
47111: LD_INT 3
47113: NEG
47114: PUSH
47115: LD_INT 0
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 3
47124: NEG
47125: PUSH
47126: LD_INT 1
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 4
47135: NEG
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: LIST
47149: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47150: LD_ADDR_VAR 0 28
47154: PUSH
47155: LD_INT 3
47157: NEG
47158: PUSH
47159: LD_INT 3
47161: NEG
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 3
47169: NEG
47170: PUSH
47171: LD_INT 4
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 4
47181: NEG
47182: PUSH
47183: LD_INT 3
47185: NEG
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: LIST
47195: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47196: LD_ADDR_VAR 0 29
47200: PUSH
47201: LD_INT 1
47203: NEG
47204: PUSH
47205: LD_INT 3
47207: NEG
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 0
47215: PUSH
47216: LD_INT 3
47218: NEG
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: LD_INT 2
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 1
47237: NEG
47238: PUSH
47239: LD_INT 4
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 0
47249: PUSH
47250: LD_INT 4
47252: NEG
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 1
47260: PUSH
47261: LD_INT 3
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 1
47271: NEG
47272: PUSH
47273: LD_INT 5
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 0
47283: PUSH
47284: LD_INT 5
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: LD_INT 4
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 1
47305: NEG
47306: PUSH
47307: LD_INT 6
47309: NEG
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: LD_INT 6
47320: NEG
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: LD_INT 5
47331: NEG
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47351: LD_ADDR_VAR 0 30
47355: PUSH
47356: LD_INT 2
47358: PUSH
47359: LD_INT 1
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 3
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 3
47379: PUSH
47380: LD_INT 1
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 3
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 4
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 4
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 4
47420: PUSH
47421: LD_INT 1
47423: NEG
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 5
47431: PUSH
47432: LD_INT 0
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 5
47441: PUSH
47442: LD_INT 1
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 5
47451: PUSH
47452: LD_INT 1
47454: NEG
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 6
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 6
47472: PUSH
47473: LD_INT 1
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47494: LD_ADDR_VAR 0 31
47498: PUSH
47499: LD_INT 3
47501: PUSH
47502: LD_INT 2
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 3
47511: PUSH
47512: LD_INT 3
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 2
47521: PUSH
47522: LD_INT 3
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 4
47531: PUSH
47532: LD_INT 3
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 4
47541: PUSH
47542: LD_INT 4
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 3
47551: PUSH
47552: LD_INT 4
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 5
47561: PUSH
47562: LD_INT 4
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 5
47571: PUSH
47572: LD_INT 5
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 4
47581: PUSH
47582: LD_INT 5
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 6
47591: PUSH
47592: LD_INT 5
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 6
47601: PUSH
47602: LD_INT 6
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 5
47611: PUSH
47612: LD_INT 6
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47633: LD_ADDR_VAR 0 32
47637: PUSH
47638: LD_INT 1
47640: PUSH
47641: LD_INT 3
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: LD_INT 3
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: LD_INT 2
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: LD_INT 4
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: LD_INT 4
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: LD_INT 3
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 1
47702: PUSH
47703: LD_INT 5
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 0
47712: PUSH
47713: LD_INT 5
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: LD_INT 4
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 1
47733: PUSH
47734: LD_INT 6
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 0
47743: PUSH
47744: LD_INT 6
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 1
47753: NEG
47754: PUSH
47755: LD_INT 5
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47776: LD_ADDR_VAR 0 33
47780: PUSH
47781: LD_INT 2
47783: NEG
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 3
47794: NEG
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 3
47805: NEG
47806: PUSH
47807: LD_INT 1
47809: NEG
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 3
47817: NEG
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 4
47828: NEG
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 4
47839: NEG
47840: PUSH
47841: LD_INT 1
47843: NEG
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 4
47851: NEG
47852: PUSH
47853: LD_INT 1
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 5
47862: NEG
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 5
47873: NEG
47874: PUSH
47875: LD_INT 1
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 5
47885: NEG
47886: PUSH
47887: LD_INT 1
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 6
47896: NEG
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 6
47907: NEG
47908: PUSH
47909: LD_INT 1
47911: NEG
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47931: LD_ADDR_VAR 0 34
47935: PUSH
47936: LD_INT 2
47938: NEG
47939: PUSH
47940: LD_INT 3
47942: NEG
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 3
47950: NEG
47951: PUSH
47952: LD_INT 2
47954: NEG
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 3
47962: NEG
47963: PUSH
47964: LD_INT 3
47966: NEG
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 3
47974: NEG
47975: PUSH
47976: LD_INT 4
47978: NEG
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 4
47986: NEG
47987: PUSH
47988: LD_INT 3
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 4
47998: NEG
47999: PUSH
48000: LD_INT 4
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 4
48010: NEG
48011: PUSH
48012: LD_INT 5
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 5
48022: NEG
48023: PUSH
48024: LD_INT 4
48026: NEG
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 5
48034: NEG
48035: PUSH
48036: LD_INT 5
48038: NEG
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 5
48046: NEG
48047: PUSH
48048: LD_INT 6
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 6
48058: NEG
48059: PUSH
48060: LD_INT 5
48062: NEG
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 6
48070: NEG
48071: PUSH
48072: LD_INT 6
48074: NEG
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48094: LD_ADDR_VAR 0 41
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: LD_INT 2
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: LD_INT 3
48116: NEG
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: PUSH
48125: LD_INT 2
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: LIST
48137: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48138: LD_ADDR_VAR 0 42
48142: PUSH
48143: LD_INT 2
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 2
48155: PUSH
48156: LD_INT 1
48158: NEG
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 3
48166: PUSH
48167: LD_INT 1
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: LIST
48178: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48179: LD_ADDR_VAR 0 43
48183: PUSH
48184: LD_INT 2
48186: PUSH
48187: LD_INT 2
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 3
48196: PUSH
48197: LD_INT 2
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 2
48206: PUSH
48207: LD_INT 3
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: LIST
48218: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48219: LD_ADDR_VAR 0 44
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: LD_INT 2
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 1
48236: PUSH
48237: LD_INT 3
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 1
48246: NEG
48247: PUSH
48248: LD_INT 2
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: LIST
48259: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48260: LD_ADDR_VAR 0 45
48264: PUSH
48265: LD_INT 2
48267: NEG
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 2
48278: NEG
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 3
48289: NEG
48290: PUSH
48291: LD_INT 1
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: LIST
48303: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48304: LD_ADDR_VAR 0 46
48308: PUSH
48309: LD_INT 2
48311: NEG
48312: PUSH
48313: LD_INT 2
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 2
48323: NEG
48324: PUSH
48325: LD_INT 3
48327: NEG
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 3
48335: NEG
48336: PUSH
48337: LD_INT 2
48339: NEG
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: LIST
48349: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48350: LD_ADDR_VAR 0 47
48354: PUSH
48355: LD_INT 2
48357: NEG
48358: PUSH
48359: LD_INT 3
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: NEG
48370: PUSH
48371: LD_INT 3
48373: NEG
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48383: LD_ADDR_VAR 0 48
48387: PUSH
48388: LD_INT 1
48390: PUSH
48391: LD_INT 2
48393: NEG
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 2
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48414: LD_ADDR_VAR 0 49
48418: PUSH
48419: LD_INT 3
48421: PUSH
48422: LD_INT 1
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 3
48431: PUSH
48432: LD_INT 2
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48443: LD_ADDR_VAR 0 50
48447: PUSH
48448: LD_INT 2
48450: PUSH
48451: LD_INT 3
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 1
48460: PUSH
48461: LD_INT 3
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48472: LD_ADDR_VAR 0 51
48476: PUSH
48477: LD_INT 1
48479: NEG
48480: PUSH
48481: LD_INT 2
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 2
48490: NEG
48491: PUSH
48492: LD_INT 1
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48503: LD_ADDR_VAR 0 52
48507: PUSH
48508: LD_INT 3
48510: NEG
48511: PUSH
48512: LD_INT 1
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 3
48522: NEG
48523: PUSH
48524: LD_INT 2
48526: NEG
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48536: LD_ADDR_VAR 0 53
48540: PUSH
48541: LD_INT 1
48543: NEG
48544: PUSH
48545: LD_INT 3
48547: NEG
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 0
48555: PUSH
48556: LD_INT 3
48558: NEG
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: PUSH
48567: LD_INT 2
48569: NEG
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: LIST
48579: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48580: LD_ADDR_VAR 0 54
48584: PUSH
48585: LD_INT 2
48587: PUSH
48588: LD_INT 1
48590: NEG
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 3
48598: PUSH
48599: LD_INT 0
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 3
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: LIST
48620: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48621: LD_ADDR_VAR 0 55
48625: PUSH
48626: LD_INT 3
48628: PUSH
48629: LD_INT 2
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 3
48638: PUSH
48639: LD_INT 3
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 2
48648: PUSH
48649: LD_INT 3
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: LIST
48660: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48661: LD_ADDR_VAR 0 56
48665: PUSH
48666: LD_INT 1
48668: PUSH
48669: LD_INT 3
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: LD_INT 3
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: LD_INT 2
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: LIST
48701: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48702: LD_ADDR_VAR 0 57
48706: PUSH
48707: LD_INT 2
48709: NEG
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 3
48720: NEG
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 3
48731: NEG
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: LIST
48745: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48746: LD_ADDR_VAR 0 58
48750: PUSH
48751: LD_INT 2
48753: NEG
48754: PUSH
48755: LD_INT 3
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 3
48765: NEG
48766: PUSH
48767: LD_INT 2
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 3
48777: NEG
48778: PUSH
48779: LD_INT 3
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: LIST
48791: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48792: LD_ADDR_VAR 0 59
48796: PUSH
48797: LD_INT 1
48799: NEG
48800: PUSH
48801: LD_INT 2
48803: NEG
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 0
48811: PUSH
48812: LD_INT 2
48814: NEG
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 1
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: LIST
48835: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48836: LD_ADDR_VAR 0 60
48840: PUSH
48841: LD_INT 1
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 2
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 2
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: LIST
48876: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48877: LD_ADDR_VAR 0 61
48881: PUSH
48882: LD_INT 2
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 2
48894: PUSH
48895: LD_INT 2
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 1
48904: PUSH
48905: LD_INT 2
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: LIST
48916: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48917: LD_ADDR_VAR 0 62
48921: PUSH
48922: LD_INT 1
48924: PUSH
48925: LD_INT 2
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 0
48934: PUSH
48935: LD_INT 2
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: NEG
48945: PUSH
48946: LD_INT 1
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: LIST
48957: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48958: LD_ADDR_VAR 0 63
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: LD_INT 1
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 2
48976: NEG
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 2
48987: NEG
48988: PUSH
48989: LD_INT 1
48991: NEG
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: LIST
49001: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49002: LD_ADDR_VAR 0 64
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: LD_INT 2
49013: NEG
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 2
49021: NEG
49022: PUSH
49023: LD_INT 1
49025: NEG
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 2
49033: NEG
49034: PUSH
49035: LD_INT 2
49037: NEG
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: LIST
49047: ST_TO_ADDR
// end ; 2 :
49048: GO 52314
49050: LD_INT 2
49052: DOUBLE
49053: EQUAL
49054: IFTRUE 49058
49056: GO 52313
49058: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49059: LD_ADDR_VAR 0 29
49063: PUSH
49064: LD_INT 4
49066: PUSH
49067: LD_INT 0
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 4
49076: PUSH
49077: LD_INT 1
49079: NEG
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 5
49087: PUSH
49088: LD_INT 0
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 5
49097: PUSH
49098: LD_INT 1
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 4
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 3
49117: PUSH
49118: LD_INT 0
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 3
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 3
49138: PUSH
49139: LD_INT 2
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 5
49149: PUSH
49150: LD_INT 2
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 3
49159: PUSH
49160: LD_INT 3
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 3
49169: PUSH
49170: LD_INT 2
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 4
49179: PUSH
49180: LD_INT 3
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 4
49189: PUSH
49190: LD_INT 4
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 3
49199: PUSH
49200: LD_INT 4
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 2
49209: PUSH
49210: LD_INT 3
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 2
49219: PUSH
49220: LD_INT 2
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 4
49229: PUSH
49230: LD_INT 2
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 2
49239: PUSH
49240: LD_INT 4
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 0
49249: PUSH
49250: LD_INT 4
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 0
49259: PUSH
49260: LD_INT 3
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: LD_INT 4
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 1
49279: PUSH
49280: LD_INT 5
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: LD_INT 5
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: LD_INT 4
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 1
49310: NEG
49311: PUSH
49312: LD_INT 3
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 2
49321: PUSH
49322: LD_INT 5
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 2
49331: NEG
49332: PUSH
49333: LD_INT 3
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 3
49342: NEG
49343: PUSH
49344: LD_INT 0
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 3
49353: NEG
49354: PUSH
49355: LD_INT 1
49357: NEG
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 2
49365: NEG
49366: PUSH
49367: LD_INT 0
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 2
49376: NEG
49377: PUSH
49378: LD_INT 1
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 3
49387: NEG
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 4
49398: NEG
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 4
49409: NEG
49410: PUSH
49411: LD_INT 1
49413: NEG
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 4
49421: NEG
49422: PUSH
49423: LD_INT 2
49425: NEG
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 2
49433: NEG
49434: PUSH
49435: LD_INT 2
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 4
49444: NEG
49445: PUSH
49446: LD_INT 4
49448: NEG
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 4
49456: NEG
49457: PUSH
49458: LD_INT 5
49460: NEG
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 3
49468: NEG
49469: PUSH
49470: LD_INT 4
49472: NEG
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 3
49480: NEG
49481: PUSH
49482: LD_INT 3
49484: NEG
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 4
49492: NEG
49493: PUSH
49494: LD_INT 3
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 5
49504: NEG
49505: PUSH
49506: LD_INT 4
49508: NEG
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 5
49516: NEG
49517: PUSH
49518: LD_INT 5
49520: NEG
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 3
49528: NEG
49529: PUSH
49530: LD_INT 5
49532: NEG
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 5
49540: NEG
49541: PUSH
49542: LD_INT 3
49544: NEG
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49597: LD_ADDR_VAR 0 30
49601: PUSH
49602: LD_INT 4
49604: PUSH
49605: LD_INT 4
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 4
49614: PUSH
49615: LD_INT 3
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 5
49624: PUSH
49625: LD_INT 4
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 5
49634: PUSH
49635: LD_INT 5
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 4
49644: PUSH
49645: LD_INT 5
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 3
49654: PUSH
49655: LD_INT 4
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 3
49664: PUSH
49665: LD_INT 3
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 5
49674: PUSH
49675: LD_INT 3
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 3
49684: PUSH
49685: LD_INT 5
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: LD_INT 3
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: LD_INT 2
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 1
49714: PUSH
49715: LD_INT 3
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: LD_INT 4
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: LD_INT 4
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 1
49744: NEG
49745: PUSH
49746: LD_INT 3
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: LD_INT 2
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 2
49766: PUSH
49767: LD_INT 4
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 2
49776: NEG
49777: PUSH
49778: LD_INT 2
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 4
49787: NEG
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 4
49798: NEG
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 3
49810: NEG
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 3
49821: NEG
49822: PUSH
49823: LD_INT 1
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 4
49832: NEG
49833: PUSH
49834: LD_INT 1
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 5
49843: NEG
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 5
49854: NEG
49855: PUSH
49856: LD_INT 1
49858: NEG
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 5
49866: NEG
49867: PUSH
49868: LD_INT 2
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 3
49878: NEG
49879: PUSH
49880: LD_INT 2
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 3
49889: NEG
49890: PUSH
49891: LD_INT 3
49893: NEG
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 3
49901: NEG
49902: PUSH
49903: LD_INT 4
49905: NEG
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 2
49913: NEG
49914: PUSH
49915: LD_INT 3
49917: NEG
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 2
49925: NEG
49926: PUSH
49927: LD_INT 2
49929: NEG
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 3
49937: NEG
49938: PUSH
49939: LD_INT 2
49941: NEG
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 4
49949: NEG
49950: PUSH
49951: LD_INT 3
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 4
49961: NEG
49962: PUSH
49963: LD_INT 4
49965: NEG
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 2
49973: NEG
49974: PUSH
49975: LD_INT 4
49977: NEG
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 4
49985: NEG
49986: PUSH
49987: LD_INT 2
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 0
49997: PUSH
49998: LD_INT 4
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 0
50008: PUSH
50009: LD_INT 5
50011: NEG
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 1
50019: PUSH
50020: LD_INT 4
50022: NEG
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 1
50030: PUSH
50031: LD_INT 3
50033: NEG
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: LD_INT 3
50044: NEG
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 1
50052: NEG
50053: PUSH
50054: LD_INT 4
50056: NEG
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 1
50064: NEG
50065: PUSH
50066: LD_INT 5
50068: NEG
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 2
50076: PUSH
50077: LD_INT 3
50079: NEG
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 2
50087: NEG
50088: PUSH
50089: LD_INT 5
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50144: LD_ADDR_VAR 0 31
50148: PUSH
50149: LD_INT 0
50151: PUSH
50152: LD_INT 4
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: LD_INT 3
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: LD_INT 4
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: LD_INT 5
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 0
50191: PUSH
50192: LD_INT 5
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: LD_INT 4
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: LD_INT 3
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 2
50223: PUSH
50224: LD_INT 5
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 2
50233: NEG
50234: PUSH
50235: LD_INT 3
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 3
50244: NEG
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 3
50255: NEG
50256: PUSH
50257: LD_INT 1
50259: NEG
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 2
50267: NEG
50268: PUSH
50269: LD_INT 0
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 2
50278: NEG
50279: PUSH
50280: LD_INT 1
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 3
50289: NEG
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 4
50300: NEG
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 4
50311: NEG
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 4
50323: NEG
50324: PUSH
50325: LD_INT 2
50327: NEG
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 2
50335: NEG
50336: PUSH
50337: LD_INT 2
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 4
50346: NEG
50347: PUSH
50348: LD_INT 4
50350: NEG
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 4
50358: NEG
50359: PUSH
50360: LD_INT 5
50362: NEG
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 3
50370: NEG
50371: PUSH
50372: LD_INT 4
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 3
50382: NEG
50383: PUSH
50384: LD_INT 3
50386: NEG
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 4
50394: NEG
50395: PUSH
50396: LD_INT 3
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 5
50406: NEG
50407: PUSH
50408: LD_INT 4
50410: NEG
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 5
50418: NEG
50419: PUSH
50420: LD_INT 5
50422: NEG
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 3
50430: NEG
50431: PUSH
50432: LD_INT 5
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 5
50442: NEG
50443: PUSH
50444: LD_INT 3
50446: NEG
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 0
50454: PUSH
50455: LD_INT 3
50457: NEG
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: LD_INT 4
50468: NEG
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: LD_INT 3
50479: NEG
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: LD_INT 2
50490: NEG
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: LD_INT 2
50501: NEG
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: LD_INT 3
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 1
50521: NEG
50522: PUSH
50523: LD_INT 4
50525: NEG
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 2
50533: PUSH
50534: LD_INT 2
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 2
50544: NEG
50545: PUSH
50546: LD_INT 4
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 4
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 4
50566: PUSH
50567: LD_INT 1
50569: NEG
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 5
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 5
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 4
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 3
50607: PUSH
50608: LD_INT 0
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 3
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 3
50628: PUSH
50629: LD_INT 2
50631: NEG
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 5
50639: PUSH
50640: LD_INT 2
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50694: LD_ADDR_VAR 0 32
50698: PUSH
50699: LD_INT 4
50701: NEG
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 4
50712: NEG
50713: PUSH
50714: LD_INT 1
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 3
50724: NEG
50725: PUSH
50726: LD_INT 0
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 3
50735: NEG
50736: PUSH
50737: LD_INT 1
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 4
50746: NEG
50747: PUSH
50748: LD_INT 1
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 5
50757: NEG
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 5
50768: NEG
50769: PUSH
50770: LD_INT 1
50772: NEG
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 5
50780: NEG
50781: PUSH
50782: LD_INT 2
50784: NEG
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 3
50792: NEG
50793: PUSH
50794: LD_INT 2
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 3
50803: NEG
50804: PUSH
50805: LD_INT 3
50807: NEG
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 3
50815: NEG
50816: PUSH
50817: LD_INT 4
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 2
50827: NEG
50828: PUSH
50829: LD_INT 3
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 2
50839: NEG
50840: PUSH
50841: LD_INT 2
50843: NEG
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 3
50851: NEG
50852: PUSH
50853: LD_INT 2
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 4
50863: NEG
50864: PUSH
50865: LD_INT 3
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 4
50875: NEG
50876: PUSH
50877: LD_INT 4
50879: NEG
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 2
50887: NEG
50888: PUSH
50889: LD_INT 4
50891: NEG
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 4
50899: NEG
50900: PUSH
50901: LD_INT 2
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: LD_INT 4
50914: NEG
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: LD_INT 5
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: LD_INT 4
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 1
50944: PUSH
50945: LD_INT 3
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: LD_INT 3
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: LD_INT 4
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 1
50978: NEG
50979: PUSH
50980: LD_INT 5
50982: NEG
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 2
50990: PUSH
50991: LD_INT 3
50993: NEG
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 2
51001: NEG
51002: PUSH
51003: LD_INT 5
51005: NEG
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 3
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 3
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 4
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 4
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 3
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 2
51064: PUSH
51065: LD_INT 0
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 2
51074: PUSH
51075: LD_INT 1
51077: NEG
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 2
51085: PUSH
51086: LD_INT 2
51088: NEG
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 4
51096: PUSH
51097: LD_INT 2
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 4
51106: PUSH
51107: LD_INT 4
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 4
51116: PUSH
51117: LD_INT 3
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 5
51126: PUSH
51127: LD_INT 4
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 5
51136: PUSH
51137: LD_INT 5
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 4
51146: PUSH
51147: LD_INT 5
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 3
51156: PUSH
51157: LD_INT 4
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 3
51166: PUSH
51167: LD_INT 3
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 5
51176: PUSH
51177: LD_INT 3
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 3
51186: PUSH
51187: LD_INT 5
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51241: LD_ADDR_VAR 0 33
51245: PUSH
51246: LD_INT 4
51248: NEG
51249: PUSH
51250: LD_INT 4
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 4
51260: NEG
51261: PUSH
51262: LD_INT 5
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 3
51272: NEG
51273: PUSH
51274: LD_INT 4
51276: NEG
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 3
51284: NEG
51285: PUSH
51286: LD_INT 3
51288: NEG
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 4
51296: NEG
51297: PUSH
51298: LD_INT 3
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 5
51308: NEG
51309: PUSH
51310: LD_INT 4
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 5
51320: NEG
51321: PUSH
51322: LD_INT 5
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 3
51332: NEG
51333: PUSH
51334: LD_INT 5
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 5
51344: NEG
51345: PUSH
51346: LD_INT 3
51348: NEG
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 0
51356: PUSH
51357: LD_INT 3
51359: NEG
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: LD_INT 4
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: LD_INT 3
51381: NEG
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: LD_INT 2
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: LD_INT 2
51403: NEG
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: LD_INT 3
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 1
51423: NEG
51424: PUSH
51425: LD_INT 4
51427: NEG
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 2
51435: PUSH
51436: LD_INT 2
51438: NEG
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 2
51446: NEG
51447: PUSH
51448: LD_INT 4
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 4
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 4
51468: PUSH
51469: LD_INT 1
51471: NEG
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 5
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 5
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 4
51499: PUSH
51500: LD_INT 1
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 3
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 3
51519: PUSH
51520: LD_INT 1
51522: NEG
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 3
51530: PUSH
51531: LD_INT 2
51533: NEG
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 5
51541: PUSH
51542: LD_INT 2
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 3
51551: PUSH
51552: LD_INT 3
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 3
51561: PUSH
51562: LD_INT 2
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 4
51571: PUSH
51572: LD_INT 3
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 4
51581: PUSH
51582: LD_INT 4
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 3
51591: PUSH
51592: LD_INT 4
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 2
51601: PUSH
51602: LD_INT 3
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 2
51611: PUSH
51612: LD_INT 2
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 4
51621: PUSH
51622: LD_INT 2
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 2
51631: PUSH
51632: LD_INT 4
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 0
51641: PUSH
51642: LD_INT 4
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 0
51651: PUSH
51652: LD_INT 3
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 1
51661: PUSH
51662: LD_INT 4
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: PUSH
51672: LD_INT 5
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: LD_INT 5
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: LD_INT 4
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: LD_INT 3
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 2
51713: PUSH
51714: LD_INT 5
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 2
51723: NEG
51724: PUSH
51725: LD_INT 3
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51779: LD_ADDR_VAR 0 34
51783: PUSH
51784: LD_INT 0
51786: PUSH
51787: LD_INT 4
51789: NEG
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: LD_INT 5
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: LD_INT 4
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: PUSH
51820: LD_INT 3
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 0
51830: PUSH
51831: LD_INT 3
51833: NEG
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: LD_INT 4
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 1
51853: NEG
51854: PUSH
51855: LD_INT 5
51857: NEG
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 2
51865: PUSH
51866: LD_INT 3
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 2
51876: NEG
51877: PUSH
51878: LD_INT 5
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 3
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 3
51898: PUSH
51899: LD_INT 1
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 4
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 4
51919: PUSH
51920: LD_INT 1
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 3
51929: PUSH
51930: LD_INT 1
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 2
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 2
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 2
51960: PUSH
51961: LD_INT 2
51963: NEG
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 4
51971: PUSH
51972: LD_INT 2
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 4
51981: PUSH
51982: LD_INT 4
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 4
51991: PUSH
51992: LD_INT 3
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 5
52001: PUSH
52002: LD_INT 4
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 5
52011: PUSH
52012: LD_INT 5
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 4
52021: PUSH
52022: LD_INT 5
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 3
52031: PUSH
52032: LD_INT 4
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 3
52041: PUSH
52042: LD_INT 3
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 5
52051: PUSH
52052: LD_INT 3
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 3
52061: PUSH
52062: LD_INT 5
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: LD_INT 3
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: LD_INT 2
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: LD_INT 3
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: LD_INT 4
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: LD_INT 4
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 1
52121: NEG
52122: PUSH
52123: LD_INT 3
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: NEG
52133: PUSH
52134: LD_INT 2
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 2
52143: PUSH
52144: LD_INT 4
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 2
52153: NEG
52154: PUSH
52155: LD_INT 2
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 4
52164: NEG
52165: PUSH
52166: LD_INT 0
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 4
52175: NEG
52176: PUSH
52177: LD_INT 1
52179: NEG
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 3
52187: NEG
52188: PUSH
52189: LD_INT 0
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 3
52198: NEG
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 4
52209: NEG
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 5
52220: NEG
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 5
52231: NEG
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 5
52243: NEG
52244: PUSH
52245: LD_INT 2
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 3
52255: NEG
52256: PUSH
52257: LD_INT 2
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: ST_TO_ADDR
// end ; end ;
52311: GO 52314
52313: POP
// case btype of b_depot , b_warehouse :
52314: LD_VAR 0 1
52318: PUSH
52319: LD_INT 0
52321: DOUBLE
52322: EQUAL
52323: IFTRUE 52333
52325: LD_INT 1
52327: DOUBLE
52328: EQUAL
52329: IFTRUE 52333
52331: GO 52534
52333: POP
// case nation of nation_american :
52334: LD_VAR 0 5
52338: PUSH
52339: LD_INT 1
52341: DOUBLE
52342: EQUAL
52343: IFTRUE 52347
52345: GO 52403
52347: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52348: LD_ADDR_VAR 0 9
52352: PUSH
52353: LD_VAR 0 11
52357: PUSH
52358: LD_VAR 0 12
52362: PUSH
52363: LD_VAR 0 13
52367: PUSH
52368: LD_VAR 0 14
52372: PUSH
52373: LD_VAR 0 15
52377: PUSH
52378: LD_VAR 0 16
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: PUSH
52391: LD_VAR 0 4
52395: PUSH
52396: LD_INT 1
52398: PLUS
52399: ARRAY
52400: ST_TO_ADDR
52401: GO 52532
52403: LD_INT 2
52405: DOUBLE
52406: EQUAL
52407: IFTRUE 52411
52409: GO 52467
52411: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52412: LD_ADDR_VAR 0 9
52416: PUSH
52417: LD_VAR 0 17
52421: PUSH
52422: LD_VAR 0 18
52426: PUSH
52427: LD_VAR 0 19
52431: PUSH
52432: LD_VAR 0 20
52436: PUSH
52437: LD_VAR 0 21
52441: PUSH
52442: LD_VAR 0 22
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: PUSH
52455: LD_VAR 0 4
52459: PUSH
52460: LD_INT 1
52462: PLUS
52463: ARRAY
52464: ST_TO_ADDR
52465: GO 52532
52467: LD_INT 3
52469: DOUBLE
52470: EQUAL
52471: IFTRUE 52475
52473: GO 52531
52475: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52476: LD_ADDR_VAR 0 9
52480: PUSH
52481: LD_VAR 0 23
52485: PUSH
52486: LD_VAR 0 24
52490: PUSH
52491: LD_VAR 0 25
52495: PUSH
52496: LD_VAR 0 26
52500: PUSH
52501: LD_VAR 0 27
52505: PUSH
52506: LD_VAR 0 28
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: PUSH
52519: LD_VAR 0 4
52523: PUSH
52524: LD_INT 1
52526: PLUS
52527: ARRAY
52528: ST_TO_ADDR
52529: GO 52532
52531: POP
52532: GO 53087
52534: LD_INT 2
52536: DOUBLE
52537: EQUAL
52538: IFTRUE 52548
52540: LD_INT 3
52542: DOUBLE
52543: EQUAL
52544: IFTRUE 52548
52546: GO 52604
52548: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52549: LD_ADDR_VAR 0 9
52553: PUSH
52554: LD_VAR 0 29
52558: PUSH
52559: LD_VAR 0 30
52563: PUSH
52564: LD_VAR 0 31
52568: PUSH
52569: LD_VAR 0 32
52573: PUSH
52574: LD_VAR 0 33
52578: PUSH
52579: LD_VAR 0 34
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: PUSH
52592: LD_VAR 0 4
52596: PUSH
52597: LD_INT 1
52599: PLUS
52600: ARRAY
52601: ST_TO_ADDR
52602: GO 53087
52604: LD_INT 16
52606: DOUBLE
52607: EQUAL
52608: IFTRUE 52666
52610: LD_INT 17
52612: DOUBLE
52613: EQUAL
52614: IFTRUE 52666
52616: LD_INT 18
52618: DOUBLE
52619: EQUAL
52620: IFTRUE 52666
52622: LD_INT 19
52624: DOUBLE
52625: EQUAL
52626: IFTRUE 52666
52628: LD_INT 22
52630: DOUBLE
52631: EQUAL
52632: IFTRUE 52666
52634: LD_INT 20
52636: DOUBLE
52637: EQUAL
52638: IFTRUE 52666
52640: LD_INT 21
52642: DOUBLE
52643: EQUAL
52644: IFTRUE 52666
52646: LD_INT 23
52648: DOUBLE
52649: EQUAL
52650: IFTRUE 52666
52652: LD_INT 24
52654: DOUBLE
52655: EQUAL
52656: IFTRUE 52666
52658: LD_INT 25
52660: DOUBLE
52661: EQUAL
52662: IFTRUE 52666
52664: GO 52722
52666: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52667: LD_ADDR_VAR 0 9
52671: PUSH
52672: LD_VAR 0 35
52676: PUSH
52677: LD_VAR 0 36
52681: PUSH
52682: LD_VAR 0 37
52686: PUSH
52687: LD_VAR 0 38
52691: PUSH
52692: LD_VAR 0 39
52696: PUSH
52697: LD_VAR 0 40
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: PUSH
52710: LD_VAR 0 4
52714: PUSH
52715: LD_INT 1
52717: PLUS
52718: ARRAY
52719: ST_TO_ADDR
52720: GO 53087
52722: LD_INT 6
52724: DOUBLE
52725: EQUAL
52726: IFTRUE 52778
52728: LD_INT 7
52730: DOUBLE
52731: EQUAL
52732: IFTRUE 52778
52734: LD_INT 8
52736: DOUBLE
52737: EQUAL
52738: IFTRUE 52778
52740: LD_INT 13
52742: DOUBLE
52743: EQUAL
52744: IFTRUE 52778
52746: LD_INT 12
52748: DOUBLE
52749: EQUAL
52750: IFTRUE 52778
52752: LD_INT 15
52754: DOUBLE
52755: EQUAL
52756: IFTRUE 52778
52758: LD_INT 11
52760: DOUBLE
52761: EQUAL
52762: IFTRUE 52778
52764: LD_INT 14
52766: DOUBLE
52767: EQUAL
52768: IFTRUE 52778
52770: LD_INT 10
52772: DOUBLE
52773: EQUAL
52774: IFTRUE 52778
52776: GO 52834
52778: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52779: LD_ADDR_VAR 0 9
52783: PUSH
52784: LD_VAR 0 41
52788: PUSH
52789: LD_VAR 0 42
52793: PUSH
52794: LD_VAR 0 43
52798: PUSH
52799: LD_VAR 0 44
52803: PUSH
52804: LD_VAR 0 45
52808: PUSH
52809: LD_VAR 0 46
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: PUSH
52822: LD_VAR 0 4
52826: PUSH
52827: LD_INT 1
52829: PLUS
52830: ARRAY
52831: ST_TO_ADDR
52832: GO 53087
52834: LD_INT 36
52836: DOUBLE
52837: EQUAL
52838: IFTRUE 52842
52840: GO 52898
52842: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52843: LD_ADDR_VAR 0 9
52847: PUSH
52848: LD_VAR 0 47
52852: PUSH
52853: LD_VAR 0 48
52857: PUSH
52858: LD_VAR 0 49
52862: PUSH
52863: LD_VAR 0 50
52867: PUSH
52868: LD_VAR 0 51
52872: PUSH
52873: LD_VAR 0 52
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: PUSH
52886: LD_VAR 0 4
52890: PUSH
52891: LD_INT 1
52893: PLUS
52894: ARRAY
52895: ST_TO_ADDR
52896: GO 53087
52898: LD_INT 4
52900: DOUBLE
52901: EQUAL
52902: IFTRUE 52924
52904: LD_INT 5
52906: DOUBLE
52907: EQUAL
52908: IFTRUE 52924
52910: LD_INT 34
52912: DOUBLE
52913: EQUAL
52914: IFTRUE 52924
52916: LD_INT 37
52918: DOUBLE
52919: EQUAL
52920: IFTRUE 52924
52922: GO 52980
52924: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52925: LD_ADDR_VAR 0 9
52929: PUSH
52930: LD_VAR 0 53
52934: PUSH
52935: LD_VAR 0 54
52939: PUSH
52940: LD_VAR 0 55
52944: PUSH
52945: LD_VAR 0 56
52949: PUSH
52950: LD_VAR 0 57
52954: PUSH
52955: LD_VAR 0 58
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: PUSH
52968: LD_VAR 0 4
52972: PUSH
52973: LD_INT 1
52975: PLUS
52976: ARRAY
52977: ST_TO_ADDR
52978: GO 53087
52980: LD_INT 31
52982: DOUBLE
52983: EQUAL
52984: IFTRUE 53030
52986: LD_INT 32
52988: DOUBLE
52989: EQUAL
52990: IFTRUE 53030
52992: LD_INT 33
52994: DOUBLE
52995: EQUAL
52996: IFTRUE 53030
52998: LD_INT 27
53000: DOUBLE
53001: EQUAL
53002: IFTRUE 53030
53004: LD_INT 26
53006: DOUBLE
53007: EQUAL
53008: IFTRUE 53030
53010: LD_INT 28
53012: DOUBLE
53013: EQUAL
53014: IFTRUE 53030
53016: LD_INT 29
53018: DOUBLE
53019: EQUAL
53020: IFTRUE 53030
53022: LD_INT 30
53024: DOUBLE
53025: EQUAL
53026: IFTRUE 53030
53028: GO 53086
53030: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53031: LD_ADDR_VAR 0 9
53035: PUSH
53036: LD_VAR 0 59
53040: PUSH
53041: LD_VAR 0 60
53045: PUSH
53046: LD_VAR 0 61
53050: PUSH
53051: LD_VAR 0 62
53055: PUSH
53056: LD_VAR 0 63
53060: PUSH
53061: LD_VAR 0 64
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: PUSH
53074: LD_VAR 0 4
53078: PUSH
53079: LD_INT 1
53081: PLUS
53082: ARRAY
53083: ST_TO_ADDR
53084: GO 53087
53086: POP
// temp_list2 = [ ] ;
53087: LD_ADDR_VAR 0 10
53091: PUSH
53092: EMPTY
53093: ST_TO_ADDR
// for i in temp_list do
53094: LD_ADDR_VAR 0 8
53098: PUSH
53099: LD_VAR 0 9
53103: PUSH
53104: FOR_IN
53105: IFFALSE 53157
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53107: LD_ADDR_VAR 0 10
53111: PUSH
53112: LD_VAR 0 10
53116: PUSH
53117: LD_VAR 0 8
53121: PUSH
53122: LD_INT 1
53124: ARRAY
53125: PUSH
53126: LD_VAR 0 2
53130: PLUS
53131: PUSH
53132: LD_VAR 0 8
53136: PUSH
53137: LD_INT 2
53139: ARRAY
53140: PUSH
53141: LD_VAR 0 3
53145: PLUS
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: EMPTY
53152: LIST
53153: ADD
53154: ST_TO_ADDR
53155: GO 53104
53157: POP
53158: POP
// result = temp_list2 ;
53159: LD_ADDR_VAR 0 7
53163: PUSH
53164: LD_VAR 0 10
53168: ST_TO_ADDR
// end ;
53169: LD_VAR 0 7
53173: RET
// export function EnemyInRange ( unit , dist ) ; begin
53174: LD_INT 0
53176: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53177: LD_ADDR_VAR 0 3
53181: PUSH
53182: LD_VAR 0 1
53186: PPUSH
53187: CALL_OW 255
53191: PPUSH
53192: LD_VAR 0 1
53196: PPUSH
53197: CALL_OW 250
53201: PPUSH
53202: LD_VAR 0 1
53206: PPUSH
53207: CALL_OW 251
53211: PPUSH
53212: LD_VAR 0 2
53216: PPUSH
53217: CALL 26570 0 4
53221: PUSH
53222: LD_INT 4
53224: ARRAY
53225: ST_TO_ADDR
// end ;
53226: LD_VAR 0 3
53230: RET
// export function PlayerSeeMe ( unit ) ; begin
53231: LD_INT 0
53233: PPUSH
// result := See ( your_side , unit ) ;
53234: LD_ADDR_VAR 0 2
53238: PUSH
53239: LD_OWVAR 2
53243: PPUSH
53244: LD_VAR 0 1
53248: PPUSH
53249: CALL_OW 292
53253: ST_TO_ADDR
// end ;
53254: LD_VAR 0 2
53258: RET
// export function ReverseDir ( unit ) ; begin
53259: LD_INT 0
53261: PPUSH
// if not unit then
53262: LD_VAR 0 1
53266: NOT
53267: IFFALSE 53271
// exit ;
53269: GO 53294
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53271: LD_ADDR_VAR 0 2
53275: PUSH
53276: LD_VAR 0 1
53280: PPUSH
53281: CALL_OW 254
53285: PUSH
53286: LD_INT 3
53288: PLUS
53289: PUSH
53290: LD_INT 6
53292: MOD
53293: ST_TO_ADDR
// end ;
53294: LD_VAR 0 2
53298: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53299: LD_INT 0
53301: PPUSH
53302: PPUSH
53303: PPUSH
53304: PPUSH
53305: PPUSH
// if not hexes then
53306: LD_VAR 0 2
53310: NOT
53311: IFFALSE 53315
// exit ;
53313: GO 53463
// dist := 9999 ;
53315: LD_ADDR_VAR 0 5
53319: PUSH
53320: LD_INT 9999
53322: ST_TO_ADDR
// for i = 1 to hexes do
53323: LD_ADDR_VAR 0 4
53327: PUSH
53328: DOUBLE
53329: LD_INT 1
53331: DEC
53332: ST_TO_ADDR
53333: LD_VAR 0 2
53337: PUSH
53338: FOR_TO
53339: IFFALSE 53451
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53341: LD_VAR 0 1
53345: PPUSH
53346: LD_VAR 0 2
53350: PUSH
53351: LD_VAR 0 4
53355: ARRAY
53356: PUSH
53357: LD_INT 1
53359: ARRAY
53360: PPUSH
53361: LD_VAR 0 2
53365: PUSH
53366: LD_VAR 0 4
53370: ARRAY
53371: PUSH
53372: LD_INT 2
53374: ARRAY
53375: PPUSH
53376: CALL_OW 297
53380: PUSH
53381: LD_VAR 0 5
53385: LESS
53386: IFFALSE 53449
// begin hex := hexes [ i ] ;
53388: LD_ADDR_VAR 0 7
53392: PUSH
53393: LD_VAR 0 2
53397: PUSH
53398: LD_VAR 0 4
53402: ARRAY
53403: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53404: LD_ADDR_VAR 0 5
53408: PUSH
53409: LD_VAR 0 1
53413: PPUSH
53414: LD_VAR 0 2
53418: PUSH
53419: LD_VAR 0 4
53423: ARRAY
53424: PUSH
53425: LD_INT 1
53427: ARRAY
53428: PPUSH
53429: LD_VAR 0 2
53433: PUSH
53434: LD_VAR 0 4
53438: ARRAY
53439: PUSH
53440: LD_INT 2
53442: ARRAY
53443: PPUSH
53444: CALL_OW 297
53448: ST_TO_ADDR
// end ; end ;
53449: GO 53338
53451: POP
53452: POP
// result := hex ;
53453: LD_ADDR_VAR 0 3
53457: PUSH
53458: LD_VAR 0 7
53462: ST_TO_ADDR
// end ;
53463: LD_VAR 0 3
53467: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53468: LD_INT 0
53470: PPUSH
53471: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53472: LD_VAR 0 1
53476: NOT
53477: PUSH
53478: LD_VAR 0 1
53482: PUSH
53483: LD_INT 21
53485: PUSH
53486: LD_INT 2
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 23
53495: PUSH
53496: LD_INT 2
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PPUSH
53507: CALL_OW 69
53511: IN
53512: NOT
53513: OR
53514: IFFALSE 53518
// exit ;
53516: GO 53565
// for i = 1 to 3 do
53518: LD_ADDR_VAR 0 3
53522: PUSH
53523: DOUBLE
53524: LD_INT 1
53526: DEC
53527: ST_TO_ADDR
53528: LD_INT 3
53530: PUSH
53531: FOR_TO
53532: IFFALSE 53563
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53534: LD_VAR 0 1
53538: PPUSH
53539: CALL_OW 250
53543: PPUSH
53544: LD_VAR 0 1
53548: PPUSH
53549: CALL_OW 251
53553: PPUSH
53554: LD_INT 1
53556: PPUSH
53557: CALL_OW 453
53561: GO 53531
53563: POP
53564: POP
// end ;
53565: LD_VAR 0 2
53569: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53570: LD_INT 0
53572: PPUSH
53573: PPUSH
53574: PPUSH
53575: PPUSH
53576: PPUSH
53577: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53578: LD_VAR 0 1
53582: NOT
53583: PUSH
53584: LD_VAR 0 2
53588: NOT
53589: OR
53590: PUSH
53591: LD_VAR 0 1
53595: PPUSH
53596: CALL_OW 314
53600: OR
53601: IFFALSE 53605
// exit ;
53603: GO 54046
// x := GetX ( enemy_unit ) ;
53605: LD_ADDR_VAR 0 7
53609: PUSH
53610: LD_VAR 0 2
53614: PPUSH
53615: CALL_OW 250
53619: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53620: LD_ADDR_VAR 0 8
53624: PUSH
53625: LD_VAR 0 2
53629: PPUSH
53630: CALL_OW 251
53634: ST_TO_ADDR
// if not x or not y then
53635: LD_VAR 0 7
53639: NOT
53640: PUSH
53641: LD_VAR 0 8
53645: NOT
53646: OR
53647: IFFALSE 53651
// exit ;
53649: GO 54046
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53651: LD_ADDR_VAR 0 6
53655: PUSH
53656: LD_VAR 0 7
53660: PPUSH
53661: LD_INT 0
53663: PPUSH
53664: LD_INT 4
53666: PPUSH
53667: CALL_OW 272
53671: PUSH
53672: LD_VAR 0 8
53676: PPUSH
53677: LD_INT 0
53679: PPUSH
53680: LD_INT 4
53682: PPUSH
53683: CALL_OW 273
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_VAR 0 7
53696: PPUSH
53697: LD_INT 1
53699: PPUSH
53700: LD_INT 4
53702: PPUSH
53703: CALL_OW 272
53707: PUSH
53708: LD_VAR 0 8
53712: PPUSH
53713: LD_INT 1
53715: PPUSH
53716: LD_INT 4
53718: PPUSH
53719: CALL_OW 273
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_VAR 0 7
53732: PPUSH
53733: LD_INT 2
53735: PPUSH
53736: LD_INT 4
53738: PPUSH
53739: CALL_OW 272
53743: PUSH
53744: LD_VAR 0 8
53748: PPUSH
53749: LD_INT 2
53751: PPUSH
53752: LD_INT 4
53754: PPUSH
53755: CALL_OW 273
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_VAR 0 7
53768: PPUSH
53769: LD_INT 3
53771: PPUSH
53772: LD_INT 4
53774: PPUSH
53775: CALL_OW 272
53779: PUSH
53780: LD_VAR 0 8
53784: PPUSH
53785: LD_INT 3
53787: PPUSH
53788: LD_INT 4
53790: PPUSH
53791: CALL_OW 273
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_VAR 0 7
53804: PPUSH
53805: LD_INT 4
53807: PPUSH
53808: LD_INT 4
53810: PPUSH
53811: CALL_OW 272
53815: PUSH
53816: LD_VAR 0 8
53820: PPUSH
53821: LD_INT 4
53823: PPUSH
53824: LD_INT 4
53826: PPUSH
53827: CALL_OW 273
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_VAR 0 7
53840: PPUSH
53841: LD_INT 5
53843: PPUSH
53844: LD_INT 4
53846: PPUSH
53847: CALL_OW 272
53851: PUSH
53852: LD_VAR 0 8
53856: PPUSH
53857: LD_INT 5
53859: PPUSH
53860: LD_INT 4
53862: PPUSH
53863: CALL_OW 273
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: ST_TO_ADDR
// for i = tmp downto 1 do
53880: LD_ADDR_VAR 0 4
53884: PUSH
53885: DOUBLE
53886: LD_VAR 0 6
53890: INC
53891: ST_TO_ADDR
53892: LD_INT 1
53894: PUSH
53895: FOR_DOWNTO
53896: IFFALSE 53997
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53898: LD_VAR 0 6
53902: PUSH
53903: LD_VAR 0 4
53907: ARRAY
53908: PUSH
53909: LD_INT 1
53911: ARRAY
53912: PPUSH
53913: LD_VAR 0 6
53917: PUSH
53918: LD_VAR 0 4
53922: ARRAY
53923: PUSH
53924: LD_INT 2
53926: ARRAY
53927: PPUSH
53928: CALL_OW 488
53932: NOT
53933: PUSH
53934: LD_VAR 0 6
53938: PUSH
53939: LD_VAR 0 4
53943: ARRAY
53944: PUSH
53945: LD_INT 1
53947: ARRAY
53948: PPUSH
53949: LD_VAR 0 6
53953: PUSH
53954: LD_VAR 0 4
53958: ARRAY
53959: PUSH
53960: LD_INT 2
53962: ARRAY
53963: PPUSH
53964: CALL_OW 428
53968: PUSH
53969: LD_INT 0
53971: NONEQUAL
53972: OR
53973: IFFALSE 53995
// tmp := Delete ( tmp , i ) ;
53975: LD_ADDR_VAR 0 6
53979: PUSH
53980: LD_VAR 0 6
53984: PPUSH
53985: LD_VAR 0 4
53989: PPUSH
53990: CALL_OW 3
53994: ST_TO_ADDR
53995: GO 53895
53997: POP
53998: POP
// j := GetClosestHex ( unit , tmp ) ;
53999: LD_ADDR_VAR 0 5
54003: PUSH
54004: LD_VAR 0 1
54008: PPUSH
54009: LD_VAR 0 6
54013: PPUSH
54014: CALL 53299 0 2
54018: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54019: LD_VAR 0 1
54023: PPUSH
54024: LD_VAR 0 5
54028: PUSH
54029: LD_INT 1
54031: ARRAY
54032: PPUSH
54033: LD_VAR 0 5
54037: PUSH
54038: LD_INT 2
54040: ARRAY
54041: PPUSH
54042: CALL_OW 111
// end ;
54046: LD_VAR 0 3
54050: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54051: LD_INT 0
54053: PPUSH
54054: PPUSH
54055: PPUSH
// uc_side = 0 ;
54056: LD_ADDR_OWVAR 20
54060: PUSH
54061: LD_INT 0
54063: ST_TO_ADDR
// uc_nation = 0 ;
54064: LD_ADDR_OWVAR 21
54068: PUSH
54069: LD_INT 0
54071: ST_TO_ADDR
// InitHc_All ( ) ;
54072: CALL_OW 584
// InitVc ;
54076: CALL_OW 20
// if mastodonts then
54080: LD_VAR 0 6
54084: IFFALSE 54151
// for i = 1 to mastodonts do
54086: LD_ADDR_VAR 0 11
54090: PUSH
54091: DOUBLE
54092: LD_INT 1
54094: DEC
54095: ST_TO_ADDR
54096: LD_VAR 0 6
54100: PUSH
54101: FOR_TO
54102: IFFALSE 54149
// begin vc_chassis := 31 ;
54104: LD_ADDR_OWVAR 37
54108: PUSH
54109: LD_INT 31
54111: ST_TO_ADDR
// vc_control := control_rider ;
54112: LD_ADDR_OWVAR 38
54116: PUSH
54117: LD_INT 4
54119: ST_TO_ADDR
// animal := CreateVehicle ;
54120: LD_ADDR_VAR 0 12
54124: PUSH
54125: CALL_OW 45
54129: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54130: LD_VAR 0 12
54134: PPUSH
54135: LD_VAR 0 8
54139: PPUSH
54140: LD_INT 0
54142: PPUSH
54143: CALL 56286 0 3
// end ;
54147: GO 54101
54149: POP
54150: POP
// if horses then
54151: LD_VAR 0 5
54155: IFFALSE 54222
// for i = 1 to horses do
54157: LD_ADDR_VAR 0 11
54161: PUSH
54162: DOUBLE
54163: LD_INT 1
54165: DEC
54166: ST_TO_ADDR
54167: LD_VAR 0 5
54171: PUSH
54172: FOR_TO
54173: IFFALSE 54220
// begin hc_class := 21 ;
54175: LD_ADDR_OWVAR 28
54179: PUSH
54180: LD_INT 21
54182: ST_TO_ADDR
// hc_gallery :=  ;
54183: LD_ADDR_OWVAR 33
54187: PUSH
54188: LD_STRING 
54190: ST_TO_ADDR
// animal := CreateHuman ;
54191: LD_ADDR_VAR 0 12
54195: PUSH
54196: CALL_OW 44
54200: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54201: LD_VAR 0 12
54205: PPUSH
54206: LD_VAR 0 8
54210: PPUSH
54211: LD_INT 0
54213: PPUSH
54214: CALL 56286 0 3
// end ;
54218: GO 54172
54220: POP
54221: POP
// if birds then
54222: LD_VAR 0 1
54226: IFFALSE 54293
// for i = 1 to birds do
54228: LD_ADDR_VAR 0 11
54232: PUSH
54233: DOUBLE
54234: LD_INT 1
54236: DEC
54237: ST_TO_ADDR
54238: LD_VAR 0 1
54242: PUSH
54243: FOR_TO
54244: IFFALSE 54291
// begin hc_class = 18 ;
54246: LD_ADDR_OWVAR 28
54250: PUSH
54251: LD_INT 18
54253: ST_TO_ADDR
// hc_gallery =  ;
54254: LD_ADDR_OWVAR 33
54258: PUSH
54259: LD_STRING 
54261: ST_TO_ADDR
// animal := CreateHuman ;
54262: LD_ADDR_VAR 0 12
54266: PUSH
54267: CALL_OW 44
54271: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54272: LD_VAR 0 12
54276: PPUSH
54277: LD_VAR 0 8
54281: PPUSH
54282: LD_INT 0
54284: PPUSH
54285: CALL 56286 0 3
// end ;
54289: GO 54243
54291: POP
54292: POP
// if tigers then
54293: LD_VAR 0 2
54297: IFFALSE 54381
// for i = 1 to tigers do
54299: LD_ADDR_VAR 0 11
54303: PUSH
54304: DOUBLE
54305: LD_INT 1
54307: DEC
54308: ST_TO_ADDR
54309: LD_VAR 0 2
54313: PUSH
54314: FOR_TO
54315: IFFALSE 54379
// begin hc_class = class_tiger ;
54317: LD_ADDR_OWVAR 28
54321: PUSH
54322: LD_INT 14
54324: ST_TO_ADDR
// hc_gallery =  ;
54325: LD_ADDR_OWVAR 33
54329: PUSH
54330: LD_STRING 
54332: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54333: LD_ADDR_OWVAR 35
54337: PUSH
54338: LD_INT 7
54340: NEG
54341: PPUSH
54342: LD_INT 7
54344: PPUSH
54345: CALL_OW 12
54349: ST_TO_ADDR
// animal := CreateHuman ;
54350: LD_ADDR_VAR 0 12
54354: PUSH
54355: CALL_OW 44
54359: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54360: LD_VAR 0 12
54364: PPUSH
54365: LD_VAR 0 8
54369: PPUSH
54370: LD_INT 0
54372: PPUSH
54373: CALL 56286 0 3
// end ;
54377: GO 54314
54379: POP
54380: POP
// if apemans then
54381: LD_VAR 0 3
54385: IFFALSE 54508
// for i = 1 to apemans do
54387: LD_ADDR_VAR 0 11
54391: PUSH
54392: DOUBLE
54393: LD_INT 1
54395: DEC
54396: ST_TO_ADDR
54397: LD_VAR 0 3
54401: PUSH
54402: FOR_TO
54403: IFFALSE 54506
// begin hc_class = class_apeman ;
54405: LD_ADDR_OWVAR 28
54409: PUSH
54410: LD_INT 12
54412: ST_TO_ADDR
// hc_gallery =  ;
54413: LD_ADDR_OWVAR 33
54417: PUSH
54418: LD_STRING 
54420: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
54421: LD_ADDR_OWVAR 35
54425: PUSH
54426: LD_INT 2
54428: NEG
54429: PPUSH
54430: LD_INT 2
54432: PPUSH
54433: CALL_OW 12
54437: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54438: LD_ADDR_OWVAR 31
54442: PUSH
54443: LD_INT 1
54445: PPUSH
54446: LD_INT 3
54448: PPUSH
54449: CALL_OW 12
54453: PUSH
54454: LD_INT 1
54456: PPUSH
54457: LD_INT 3
54459: PPUSH
54460: CALL_OW 12
54464: PUSH
54465: LD_INT 0
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: ST_TO_ADDR
// animal := CreateHuman ;
54477: LD_ADDR_VAR 0 12
54481: PUSH
54482: CALL_OW 44
54486: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54487: LD_VAR 0 12
54491: PPUSH
54492: LD_VAR 0 8
54496: PPUSH
54497: LD_INT 0
54499: PPUSH
54500: CALL 56286 0 3
// end ;
54504: GO 54402
54506: POP
54507: POP
// if enchidnas then
54508: LD_VAR 0 4
54512: IFFALSE 54579
// for i = 1 to enchidnas do
54514: LD_ADDR_VAR 0 11
54518: PUSH
54519: DOUBLE
54520: LD_INT 1
54522: DEC
54523: ST_TO_ADDR
54524: LD_VAR 0 4
54528: PUSH
54529: FOR_TO
54530: IFFALSE 54577
// begin hc_class = 13 ;
54532: LD_ADDR_OWVAR 28
54536: PUSH
54537: LD_INT 13
54539: ST_TO_ADDR
// hc_gallery =  ;
54540: LD_ADDR_OWVAR 33
54544: PUSH
54545: LD_STRING 
54547: ST_TO_ADDR
// animal := CreateHuman ;
54548: LD_ADDR_VAR 0 12
54552: PUSH
54553: CALL_OW 44
54557: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54558: LD_VAR 0 12
54562: PPUSH
54563: LD_VAR 0 8
54567: PPUSH
54568: LD_INT 0
54570: PPUSH
54571: CALL 56286 0 3
// end ;
54575: GO 54529
54577: POP
54578: POP
// if fishes then
54579: LD_VAR 0 7
54583: IFFALSE 54650
// for i = 1 to fishes do
54585: LD_ADDR_VAR 0 11
54589: PUSH
54590: DOUBLE
54591: LD_INT 1
54593: DEC
54594: ST_TO_ADDR
54595: LD_VAR 0 7
54599: PUSH
54600: FOR_TO
54601: IFFALSE 54648
// begin hc_class = 20 ;
54603: LD_ADDR_OWVAR 28
54607: PUSH
54608: LD_INT 20
54610: ST_TO_ADDR
// hc_gallery =  ;
54611: LD_ADDR_OWVAR 33
54615: PUSH
54616: LD_STRING 
54618: ST_TO_ADDR
// animal := CreateHuman ;
54619: LD_ADDR_VAR 0 12
54623: PUSH
54624: CALL_OW 44
54628: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54629: LD_VAR 0 12
54633: PPUSH
54634: LD_VAR 0 9
54638: PPUSH
54639: LD_INT 0
54641: PPUSH
54642: CALL 56286 0 3
// end ;
54646: GO 54600
54648: POP
54649: POP
// end ;
54650: LD_VAR 0 10
54654: RET
// export function WantHeal ( sci , unit ) ; begin
54655: LD_INT 0
54657: PPUSH
// if GetTaskList ( sci ) > 0 then
54658: LD_VAR 0 1
54662: PPUSH
54663: CALL_OW 437
54667: PUSH
54668: LD_INT 0
54670: GREATER
54671: IFFALSE 54741
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54673: LD_VAR 0 1
54677: PPUSH
54678: CALL_OW 437
54682: PUSH
54683: LD_INT 1
54685: ARRAY
54686: PUSH
54687: LD_INT 1
54689: ARRAY
54690: PUSH
54691: LD_STRING l
54693: EQUAL
54694: PUSH
54695: LD_VAR 0 1
54699: PPUSH
54700: CALL_OW 437
54704: PUSH
54705: LD_INT 1
54707: ARRAY
54708: PUSH
54709: LD_INT 4
54711: ARRAY
54712: PUSH
54713: LD_VAR 0 2
54717: EQUAL
54718: AND
54719: IFFALSE 54731
// result := true else
54721: LD_ADDR_VAR 0 3
54725: PUSH
54726: LD_INT 1
54728: ST_TO_ADDR
54729: GO 54739
// result := false ;
54731: LD_ADDR_VAR 0 3
54735: PUSH
54736: LD_INT 0
54738: ST_TO_ADDR
// end else
54739: GO 54749
// result := false ;
54741: LD_ADDR_VAR 0 3
54745: PUSH
54746: LD_INT 0
54748: ST_TO_ADDR
// end ;
54749: LD_VAR 0 3
54753: RET
// export function HealTarget ( sci ) ; begin
54754: LD_INT 0
54756: PPUSH
// if not sci then
54757: LD_VAR 0 1
54761: NOT
54762: IFFALSE 54766
// exit ;
54764: GO 54831
// result := 0 ;
54766: LD_ADDR_VAR 0 2
54770: PUSH
54771: LD_INT 0
54773: ST_TO_ADDR
// if GetTaskList ( sci ) then
54774: LD_VAR 0 1
54778: PPUSH
54779: CALL_OW 437
54783: IFFALSE 54831
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54785: LD_VAR 0 1
54789: PPUSH
54790: CALL_OW 437
54794: PUSH
54795: LD_INT 1
54797: ARRAY
54798: PUSH
54799: LD_INT 1
54801: ARRAY
54802: PUSH
54803: LD_STRING l
54805: EQUAL
54806: IFFALSE 54831
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54808: LD_ADDR_VAR 0 2
54812: PUSH
54813: LD_VAR 0 1
54817: PPUSH
54818: CALL_OW 437
54822: PUSH
54823: LD_INT 1
54825: ARRAY
54826: PUSH
54827: LD_INT 4
54829: ARRAY
54830: ST_TO_ADDR
// end ;
54831: LD_VAR 0 2
54835: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54836: LD_INT 0
54838: PPUSH
54839: PPUSH
54840: PPUSH
54841: PPUSH
// if not base_units then
54842: LD_VAR 0 1
54846: NOT
54847: IFFALSE 54851
// exit ;
54849: GO 54938
// result := false ;
54851: LD_ADDR_VAR 0 2
54855: PUSH
54856: LD_INT 0
54858: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54859: LD_ADDR_VAR 0 5
54863: PUSH
54864: LD_VAR 0 1
54868: PPUSH
54869: LD_INT 21
54871: PUSH
54872: LD_INT 3
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PPUSH
54879: CALL_OW 72
54883: ST_TO_ADDR
// if not tmp then
54884: LD_VAR 0 5
54888: NOT
54889: IFFALSE 54893
// exit ;
54891: GO 54938
// for i in tmp do
54893: LD_ADDR_VAR 0 3
54897: PUSH
54898: LD_VAR 0 5
54902: PUSH
54903: FOR_IN
54904: IFFALSE 54936
// begin result := EnemyInRange ( i , 22 ) ;
54906: LD_ADDR_VAR 0 2
54910: PUSH
54911: LD_VAR 0 3
54915: PPUSH
54916: LD_INT 22
54918: PPUSH
54919: CALL 53174 0 2
54923: ST_TO_ADDR
// if result then
54924: LD_VAR 0 2
54928: IFFALSE 54934
// exit ;
54930: POP
54931: POP
54932: GO 54938
// end ;
54934: GO 54903
54936: POP
54937: POP
// end ;
54938: LD_VAR 0 2
54942: RET
// export function FilterByTag ( units , tag ) ; begin
54943: LD_INT 0
54945: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
54946: LD_ADDR_VAR 0 3
54950: PUSH
54951: LD_VAR 0 1
54955: PPUSH
54956: LD_INT 120
54958: PUSH
54959: LD_VAR 0 2
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PPUSH
54968: CALL_OW 72
54972: ST_TO_ADDR
// end ;
54973: LD_VAR 0 3
54977: RET
// export function IsDriver ( un ) ; begin
54978: LD_INT 0
54980: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54981: LD_ADDR_VAR 0 2
54985: PUSH
54986: LD_VAR 0 1
54990: PUSH
54991: LD_INT 55
54993: PUSH
54994: EMPTY
54995: LIST
54996: PPUSH
54997: CALL_OW 69
55001: IN
55002: ST_TO_ADDR
// end ;
55003: LD_VAR 0 2
55007: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55008: LD_INT 0
55010: PPUSH
55011: PPUSH
// list := [ ] ;
55012: LD_ADDR_VAR 0 5
55016: PUSH
55017: EMPTY
55018: ST_TO_ADDR
// case d of 0 :
55019: LD_VAR 0 3
55023: PUSH
55024: LD_INT 0
55026: DOUBLE
55027: EQUAL
55028: IFTRUE 55032
55030: GO 55165
55032: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55033: LD_ADDR_VAR 0 5
55037: PUSH
55038: LD_VAR 0 1
55042: PUSH
55043: LD_INT 4
55045: MINUS
55046: PUSH
55047: LD_VAR 0 2
55051: PUSH
55052: LD_INT 4
55054: MINUS
55055: PUSH
55056: LD_INT 2
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: LIST
55063: PUSH
55064: LD_VAR 0 1
55068: PUSH
55069: LD_INT 3
55071: MINUS
55072: PUSH
55073: LD_VAR 0 2
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: LIST
55085: PUSH
55086: LD_VAR 0 1
55090: PUSH
55091: LD_INT 4
55093: PLUS
55094: PUSH
55095: LD_VAR 0 2
55099: PUSH
55100: LD_INT 4
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: LIST
55107: PUSH
55108: LD_VAR 0 1
55112: PUSH
55113: LD_INT 3
55115: PLUS
55116: PUSH
55117: LD_VAR 0 2
55121: PUSH
55122: LD_INT 3
55124: PLUS
55125: PUSH
55126: LD_INT 5
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: LIST
55133: PUSH
55134: LD_VAR 0 1
55138: PUSH
55139: LD_VAR 0 2
55143: PUSH
55144: LD_INT 4
55146: PLUS
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: LIST
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: ST_TO_ADDR
// end ; 1 :
55163: GO 55863
55165: LD_INT 1
55167: DOUBLE
55168: EQUAL
55169: IFTRUE 55173
55171: GO 55306
55173: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55174: LD_ADDR_VAR 0 5
55178: PUSH
55179: LD_VAR 0 1
55183: PUSH
55184: LD_VAR 0 2
55188: PUSH
55189: LD_INT 4
55191: MINUS
55192: PUSH
55193: LD_INT 3
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: LIST
55200: PUSH
55201: LD_VAR 0 1
55205: PUSH
55206: LD_INT 3
55208: MINUS
55209: PUSH
55210: LD_VAR 0 2
55214: PUSH
55215: LD_INT 3
55217: MINUS
55218: PUSH
55219: LD_INT 2
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: LIST
55226: PUSH
55227: LD_VAR 0 1
55231: PUSH
55232: LD_INT 4
55234: MINUS
55235: PUSH
55236: LD_VAR 0 2
55240: PUSH
55241: LD_INT 1
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: LIST
55248: PUSH
55249: LD_VAR 0 1
55253: PUSH
55254: LD_VAR 0 2
55258: PUSH
55259: LD_INT 3
55261: PLUS
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: LIST
55270: PUSH
55271: LD_VAR 0 1
55275: PUSH
55276: LD_INT 4
55278: PLUS
55279: PUSH
55280: LD_VAR 0 2
55284: PUSH
55285: LD_INT 4
55287: PLUS
55288: PUSH
55289: LD_INT 5
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: LIST
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: ST_TO_ADDR
// end ; 2 :
55304: GO 55863
55306: LD_INT 2
55308: DOUBLE
55309: EQUAL
55310: IFTRUE 55314
55312: GO 55443
55314: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55315: LD_ADDR_VAR 0 5
55319: PUSH
55320: LD_VAR 0 1
55324: PUSH
55325: LD_VAR 0 2
55329: PUSH
55330: LD_INT 3
55332: MINUS
55333: PUSH
55334: LD_INT 3
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: LIST
55341: PUSH
55342: LD_VAR 0 1
55346: PUSH
55347: LD_INT 4
55349: PLUS
55350: PUSH
55351: LD_VAR 0 2
55355: PUSH
55356: LD_INT 4
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: LIST
55363: PUSH
55364: LD_VAR 0 1
55368: PUSH
55369: LD_VAR 0 2
55373: PUSH
55374: LD_INT 4
55376: PLUS
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: LIST
55385: PUSH
55386: LD_VAR 0 1
55390: PUSH
55391: LD_INT 3
55393: MINUS
55394: PUSH
55395: LD_VAR 0 2
55399: PUSH
55400: LD_INT 1
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: LIST
55407: PUSH
55408: LD_VAR 0 1
55412: PUSH
55413: LD_INT 4
55415: MINUS
55416: PUSH
55417: LD_VAR 0 2
55421: PUSH
55422: LD_INT 4
55424: MINUS
55425: PUSH
55426: LD_INT 2
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: LIST
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: ST_TO_ADDR
// end ; 3 :
55441: GO 55863
55443: LD_INT 3
55445: DOUBLE
55446: EQUAL
55447: IFTRUE 55451
55449: GO 55584
55451: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55452: LD_ADDR_VAR 0 5
55456: PUSH
55457: LD_VAR 0 1
55461: PUSH
55462: LD_INT 3
55464: PLUS
55465: PUSH
55466: LD_VAR 0 2
55470: PUSH
55471: LD_INT 4
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: LIST
55478: PUSH
55479: LD_VAR 0 1
55483: PUSH
55484: LD_INT 4
55486: PLUS
55487: PUSH
55488: LD_VAR 0 2
55492: PUSH
55493: LD_INT 4
55495: PLUS
55496: PUSH
55497: LD_INT 5
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: LIST
55504: PUSH
55505: LD_VAR 0 1
55509: PUSH
55510: LD_INT 4
55512: MINUS
55513: PUSH
55514: LD_VAR 0 2
55518: PUSH
55519: LD_INT 1
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: LIST
55526: PUSH
55527: LD_VAR 0 1
55531: PUSH
55532: LD_VAR 0 2
55536: PUSH
55537: LD_INT 4
55539: MINUS
55540: PUSH
55541: LD_INT 3
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: LIST
55548: PUSH
55549: LD_VAR 0 1
55553: PUSH
55554: LD_INT 3
55556: MINUS
55557: PUSH
55558: LD_VAR 0 2
55562: PUSH
55563: LD_INT 3
55565: MINUS
55566: PUSH
55567: LD_INT 2
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: LIST
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: ST_TO_ADDR
// end ; 4 :
55582: GO 55863
55584: LD_INT 4
55586: DOUBLE
55587: EQUAL
55588: IFTRUE 55592
55590: GO 55725
55592: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55593: LD_ADDR_VAR 0 5
55597: PUSH
55598: LD_VAR 0 1
55602: PUSH
55603: LD_VAR 0 2
55607: PUSH
55608: LD_INT 4
55610: PLUS
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: LIST
55619: PUSH
55620: LD_VAR 0 1
55624: PUSH
55625: LD_INT 3
55627: PLUS
55628: PUSH
55629: LD_VAR 0 2
55633: PUSH
55634: LD_INT 3
55636: PLUS
55637: PUSH
55638: LD_INT 5
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: LIST
55645: PUSH
55646: LD_VAR 0 1
55650: PUSH
55651: LD_INT 4
55653: PLUS
55654: PUSH
55655: LD_VAR 0 2
55659: PUSH
55660: LD_INT 4
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: LIST
55667: PUSH
55668: LD_VAR 0 1
55672: PUSH
55673: LD_VAR 0 2
55677: PUSH
55678: LD_INT 3
55680: MINUS
55681: PUSH
55682: LD_INT 3
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: LIST
55689: PUSH
55690: LD_VAR 0 1
55694: PUSH
55695: LD_INT 4
55697: MINUS
55698: PUSH
55699: LD_VAR 0 2
55703: PUSH
55704: LD_INT 4
55706: MINUS
55707: PUSH
55708: LD_INT 2
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: LIST
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: ST_TO_ADDR
// end ; 5 :
55723: GO 55863
55725: LD_INT 5
55727: DOUBLE
55728: EQUAL
55729: IFTRUE 55733
55731: GO 55862
55733: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55734: LD_ADDR_VAR 0 5
55738: PUSH
55739: LD_VAR 0 1
55743: PUSH
55744: LD_INT 4
55746: MINUS
55747: PUSH
55748: LD_VAR 0 2
55752: PUSH
55753: LD_INT 1
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: LIST
55760: PUSH
55761: LD_VAR 0 1
55765: PUSH
55766: LD_VAR 0 2
55770: PUSH
55771: LD_INT 4
55773: MINUS
55774: PUSH
55775: LD_INT 3
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: LIST
55782: PUSH
55783: LD_VAR 0 1
55787: PUSH
55788: LD_INT 4
55790: PLUS
55791: PUSH
55792: LD_VAR 0 2
55796: PUSH
55797: LD_INT 4
55799: PLUS
55800: PUSH
55801: LD_INT 5
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: LIST
55808: PUSH
55809: LD_VAR 0 1
55813: PUSH
55814: LD_INT 3
55816: PLUS
55817: PUSH
55818: LD_VAR 0 2
55822: PUSH
55823: LD_INT 4
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: LIST
55830: PUSH
55831: LD_VAR 0 1
55835: PUSH
55836: LD_VAR 0 2
55840: PUSH
55841: LD_INT 3
55843: PLUS
55844: PUSH
55845: LD_INT 0
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: LIST
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: ST_TO_ADDR
// end ; end ;
55860: GO 55863
55862: POP
// result := list ;
55863: LD_ADDR_VAR 0 4
55867: PUSH
55868: LD_VAR 0 5
55872: ST_TO_ADDR
// end ;
55873: LD_VAR 0 4
55877: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55878: LD_INT 0
55880: PPUSH
55881: PPUSH
55882: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55883: LD_VAR 0 1
55887: NOT
55888: PUSH
55889: LD_VAR 0 2
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: LD_INT 2
55899: PUSH
55900: LD_INT 3
55902: PUSH
55903: LD_INT 4
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: IN
55912: NOT
55913: OR
55914: IFFALSE 55918
// exit ;
55916: GO 56010
// tmp := [ ] ;
55918: LD_ADDR_VAR 0 5
55922: PUSH
55923: EMPTY
55924: ST_TO_ADDR
// for i in units do
55925: LD_ADDR_VAR 0 4
55929: PUSH
55930: LD_VAR 0 1
55934: PUSH
55935: FOR_IN
55936: IFFALSE 55979
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
55938: LD_ADDR_VAR 0 5
55942: PUSH
55943: LD_VAR 0 5
55947: PPUSH
55948: LD_VAR 0 5
55952: PUSH
55953: LD_INT 1
55955: PLUS
55956: PPUSH
55957: LD_VAR 0 4
55961: PPUSH
55962: LD_VAR 0 2
55966: PPUSH
55967: CALL_OW 259
55971: PPUSH
55972: CALL_OW 2
55976: ST_TO_ADDR
55977: GO 55935
55979: POP
55980: POP
// if not tmp then
55981: LD_VAR 0 5
55985: NOT
55986: IFFALSE 55990
// exit ;
55988: GO 56010
// result := SortListByListDesc ( units , tmp ) ;
55990: LD_ADDR_VAR 0 3
55994: PUSH
55995: LD_VAR 0 1
55999: PPUSH
56000: LD_VAR 0 5
56004: PPUSH
56005: CALL_OW 77
56009: ST_TO_ADDR
// end ;
56010: LD_VAR 0 3
56014: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56015: LD_INT 0
56017: PPUSH
56018: PPUSH
56019: PPUSH
// result := false ;
56020: LD_ADDR_VAR 0 3
56024: PUSH
56025: LD_INT 0
56027: ST_TO_ADDR
// x := GetX ( building ) ;
56028: LD_ADDR_VAR 0 4
56032: PUSH
56033: LD_VAR 0 2
56037: PPUSH
56038: CALL_OW 250
56042: ST_TO_ADDR
// y := GetY ( building ) ;
56043: LD_ADDR_VAR 0 5
56047: PUSH
56048: LD_VAR 0 2
56052: PPUSH
56053: CALL_OW 251
56057: ST_TO_ADDR
// if not building or not x or not y then
56058: LD_VAR 0 2
56062: NOT
56063: PUSH
56064: LD_VAR 0 4
56068: NOT
56069: OR
56070: PUSH
56071: LD_VAR 0 5
56075: NOT
56076: OR
56077: IFFALSE 56081
// exit ;
56079: GO 56173
// if GetTaskList ( unit ) then
56081: LD_VAR 0 1
56085: PPUSH
56086: CALL_OW 437
56090: IFFALSE 56173
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56092: LD_STRING e
56094: PUSH
56095: LD_VAR 0 1
56099: PPUSH
56100: CALL_OW 437
56104: PUSH
56105: LD_INT 1
56107: ARRAY
56108: PUSH
56109: LD_INT 1
56111: ARRAY
56112: EQUAL
56113: PUSH
56114: LD_VAR 0 4
56118: PUSH
56119: LD_VAR 0 1
56123: PPUSH
56124: CALL_OW 437
56128: PUSH
56129: LD_INT 1
56131: ARRAY
56132: PUSH
56133: LD_INT 2
56135: ARRAY
56136: EQUAL
56137: AND
56138: PUSH
56139: LD_VAR 0 5
56143: PUSH
56144: LD_VAR 0 1
56148: PPUSH
56149: CALL_OW 437
56153: PUSH
56154: LD_INT 1
56156: ARRAY
56157: PUSH
56158: LD_INT 3
56160: ARRAY
56161: EQUAL
56162: AND
56163: IFFALSE 56173
// result := true end ;
56165: LD_ADDR_VAR 0 3
56169: PUSH
56170: LD_INT 1
56172: ST_TO_ADDR
// end ;
56173: LD_VAR 0 3
56177: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56178: LD_INT 0
56180: PPUSH
// result := false ;
56181: LD_ADDR_VAR 0 4
56185: PUSH
56186: LD_INT 0
56188: ST_TO_ADDR
// if GetTaskList ( unit ) then
56189: LD_VAR 0 1
56193: PPUSH
56194: CALL_OW 437
56198: IFFALSE 56281
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56200: LD_STRING M
56202: PUSH
56203: LD_VAR 0 1
56207: PPUSH
56208: CALL_OW 437
56212: PUSH
56213: LD_INT 1
56215: ARRAY
56216: PUSH
56217: LD_INT 1
56219: ARRAY
56220: EQUAL
56221: PUSH
56222: LD_VAR 0 2
56226: PUSH
56227: LD_VAR 0 1
56231: PPUSH
56232: CALL_OW 437
56236: PUSH
56237: LD_INT 1
56239: ARRAY
56240: PUSH
56241: LD_INT 2
56243: ARRAY
56244: EQUAL
56245: AND
56246: PUSH
56247: LD_VAR 0 3
56251: PUSH
56252: LD_VAR 0 1
56256: PPUSH
56257: CALL_OW 437
56261: PUSH
56262: LD_INT 1
56264: ARRAY
56265: PUSH
56266: LD_INT 3
56268: ARRAY
56269: EQUAL
56270: AND
56271: IFFALSE 56281
// result := true ;
56273: LD_ADDR_VAR 0 4
56277: PUSH
56278: LD_INT 1
56280: ST_TO_ADDR
// end ; end ;
56281: LD_VAR 0 4
56285: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56286: LD_INT 0
56288: PPUSH
56289: PPUSH
56290: PPUSH
56291: PPUSH
// if not unit or not area then
56292: LD_VAR 0 1
56296: NOT
56297: PUSH
56298: LD_VAR 0 2
56302: NOT
56303: OR
56304: IFFALSE 56308
// exit ;
56306: GO 56472
// tmp := AreaToList ( area , i ) ;
56308: LD_ADDR_VAR 0 6
56312: PUSH
56313: LD_VAR 0 2
56317: PPUSH
56318: LD_VAR 0 5
56322: PPUSH
56323: CALL_OW 517
56327: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56328: LD_ADDR_VAR 0 5
56332: PUSH
56333: DOUBLE
56334: LD_INT 1
56336: DEC
56337: ST_TO_ADDR
56338: LD_VAR 0 6
56342: PUSH
56343: LD_INT 1
56345: ARRAY
56346: PUSH
56347: FOR_TO
56348: IFFALSE 56470
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56350: LD_ADDR_VAR 0 7
56354: PUSH
56355: LD_VAR 0 6
56359: PUSH
56360: LD_INT 1
56362: ARRAY
56363: PUSH
56364: LD_VAR 0 5
56368: ARRAY
56369: PUSH
56370: LD_VAR 0 6
56374: PUSH
56375: LD_INT 2
56377: ARRAY
56378: PUSH
56379: LD_VAR 0 5
56383: ARRAY
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
56389: LD_VAR 0 7
56393: PUSH
56394: LD_INT 1
56396: ARRAY
56397: PPUSH
56398: LD_VAR 0 7
56402: PUSH
56403: LD_INT 2
56405: ARRAY
56406: PPUSH
56407: CALL_OW 428
56411: PUSH
56412: LD_INT 0
56414: EQUAL
56415: IFFALSE 56468
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
56417: LD_VAR 0 1
56421: PPUSH
56422: LD_VAR 0 7
56426: PUSH
56427: LD_INT 1
56429: ARRAY
56430: PPUSH
56431: LD_VAR 0 7
56435: PUSH
56436: LD_INT 2
56438: ARRAY
56439: PPUSH
56440: LD_VAR 0 3
56444: PPUSH
56445: CALL_OW 48
// result := IsPlaced ( unit ) ;
56449: LD_ADDR_VAR 0 4
56453: PUSH
56454: LD_VAR 0 1
56458: PPUSH
56459: CALL_OW 305
56463: ST_TO_ADDR
// exit ;
56464: POP
56465: POP
56466: GO 56472
// end ; end ;
56468: GO 56347
56470: POP
56471: POP
// end ;
56472: LD_VAR 0 4
56476: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56477: LD_INT 0
56479: PPUSH
56480: PPUSH
56481: PPUSH
// if not side or side > 8 then
56482: LD_VAR 0 1
56486: NOT
56487: PUSH
56488: LD_VAR 0 1
56492: PUSH
56493: LD_INT 8
56495: GREATER
56496: OR
56497: IFFALSE 56501
// exit ;
56499: GO 56688
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56501: LD_ADDR_VAR 0 4
56505: PUSH
56506: LD_INT 22
56508: PUSH
56509: LD_VAR 0 1
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 21
56520: PUSH
56521: LD_INT 3
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PPUSH
56532: CALL_OW 69
56536: ST_TO_ADDR
// if not tmp then
56537: LD_VAR 0 4
56541: NOT
56542: IFFALSE 56546
// exit ;
56544: GO 56688
// enable_addtolog := true ;
56546: LD_ADDR_OWVAR 81
56550: PUSH
56551: LD_INT 1
56553: ST_TO_ADDR
// AddToLog ( [ ) ;
56554: LD_STRING [
56556: PPUSH
56557: CALL_OW 561
// for i in tmp do
56561: LD_ADDR_VAR 0 3
56565: PUSH
56566: LD_VAR 0 4
56570: PUSH
56571: FOR_IN
56572: IFFALSE 56679
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56574: LD_STRING [
56576: PUSH
56577: LD_VAR 0 3
56581: PPUSH
56582: CALL_OW 266
56586: STR
56587: PUSH
56588: LD_STRING , 
56590: STR
56591: PUSH
56592: LD_VAR 0 3
56596: PPUSH
56597: CALL_OW 250
56601: STR
56602: PUSH
56603: LD_STRING , 
56605: STR
56606: PUSH
56607: LD_VAR 0 3
56611: PPUSH
56612: CALL_OW 251
56616: STR
56617: PUSH
56618: LD_STRING , 
56620: STR
56621: PUSH
56622: LD_VAR 0 3
56626: PPUSH
56627: CALL_OW 254
56631: STR
56632: PUSH
56633: LD_STRING , 
56635: STR
56636: PUSH
56637: LD_VAR 0 3
56641: PPUSH
56642: LD_INT 1
56644: PPUSH
56645: CALL_OW 268
56649: STR
56650: PUSH
56651: LD_STRING , 
56653: STR
56654: PUSH
56655: LD_VAR 0 3
56659: PPUSH
56660: LD_INT 2
56662: PPUSH
56663: CALL_OW 268
56667: STR
56668: PUSH
56669: LD_STRING ],
56671: STR
56672: PPUSH
56673: CALL_OW 561
// end ;
56677: GO 56571
56679: POP
56680: POP
// AddToLog ( ]; ) ;
56681: LD_STRING ];
56683: PPUSH
56684: CALL_OW 561
// end ;
56688: LD_VAR 0 2
56692: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56693: LD_INT 0
56695: PPUSH
56696: PPUSH
56697: PPUSH
56698: PPUSH
56699: PPUSH
// if not area or not rate or not max then
56700: LD_VAR 0 1
56704: NOT
56705: PUSH
56706: LD_VAR 0 2
56710: NOT
56711: OR
56712: PUSH
56713: LD_VAR 0 4
56717: NOT
56718: OR
56719: IFFALSE 56723
// exit ;
56721: GO 56912
// while 1 do
56723: LD_INT 1
56725: IFFALSE 56912
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56727: LD_ADDR_VAR 0 9
56731: PUSH
56732: LD_VAR 0 1
56736: PPUSH
56737: LD_INT 1
56739: PPUSH
56740: CALL_OW 287
56744: PUSH
56745: LD_INT 10
56747: MUL
56748: ST_TO_ADDR
// r := rate / 10 ;
56749: LD_ADDR_VAR 0 7
56753: PUSH
56754: LD_VAR 0 2
56758: PUSH
56759: LD_INT 10
56761: DIVREAL
56762: ST_TO_ADDR
// time := 1 1$00 ;
56763: LD_ADDR_VAR 0 8
56767: PUSH
56768: LD_INT 2100
56770: ST_TO_ADDR
// if amount < min then
56771: LD_VAR 0 9
56775: PUSH
56776: LD_VAR 0 3
56780: LESS
56781: IFFALSE 56799
// r := r * 2 else
56783: LD_ADDR_VAR 0 7
56787: PUSH
56788: LD_VAR 0 7
56792: PUSH
56793: LD_INT 2
56795: MUL
56796: ST_TO_ADDR
56797: GO 56825
// if amount > max then
56799: LD_VAR 0 9
56803: PUSH
56804: LD_VAR 0 4
56808: GREATER
56809: IFFALSE 56825
// r := r / 2 ;
56811: LD_ADDR_VAR 0 7
56815: PUSH
56816: LD_VAR 0 7
56820: PUSH
56821: LD_INT 2
56823: DIVREAL
56824: ST_TO_ADDR
// time := time / r ;
56825: LD_ADDR_VAR 0 8
56829: PUSH
56830: LD_VAR 0 8
56834: PUSH
56835: LD_VAR 0 7
56839: DIVREAL
56840: ST_TO_ADDR
// if time < 0 then
56841: LD_VAR 0 8
56845: PUSH
56846: LD_INT 0
56848: LESS
56849: IFFALSE 56866
// time := time * - 1 ;
56851: LD_ADDR_VAR 0 8
56855: PUSH
56856: LD_VAR 0 8
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: MUL
56865: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
56866: LD_VAR 0 8
56870: PUSH
56871: LD_INT 35
56873: PPUSH
56874: LD_INT 875
56876: PPUSH
56877: CALL_OW 12
56881: PLUS
56882: PPUSH
56883: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56887: LD_INT 1
56889: PPUSH
56890: LD_INT 5
56892: PPUSH
56893: CALL_OW 12
56897: PPUSH
56898: LD_VAR 0 1
56902: PPUSH
56903: LD_INT 1
56905: PPUSH
56906: CALL_OW 55
// end ;
56910: GO 56723
// end ;
56912: LD_VAR 0 5
56916: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56917: LD_INT 0
56919: PPUSH
56920: PPUSH
56921: PPUSH
56922: PPUSH
56923: PPUSH
56924: PPUSH
56925: PPUSH
56926: PPUSH
// if not turrets or not factories then
56927: LD_VAR 0 1
56931: NOT
56932: PUSH
56933: LD_VAR 0 2
56937: NOT
56938: OR
56939: IFFALSE 56943
// exit ;
56941: GO 57250
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56943: LD_ADDR_VAR 0 10
56947: PUSH
56948: LD_INT 5
56950: PUSH
56951: LD_INT 6
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 2
56960: PUSH
56961: LD_INT 4
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 3
56970: PUSH
56971: LD_INT 5
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 24
56985: PUSH
56986: LD_INT 25
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 23
56995: PUSH
56996: LD_INT 27
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 42
57009: PUSH
57010: LD_INT 43
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 44
57019: PUSH
57020: LD_INT 46
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 45
57029: PUSH
57030: LD_INT 47
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: LIST
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: LIST
57046: ST_TO_ADDR
// result := [ ] ;
57047: LD_ADDR_VAR 0 3
57051: PUSH
57052: EMPTY
57053: ST_TO_ADDR
// for i in turrets do
57054: LD_ADDR_VAR 0 4
57058: PUSH
57059: LD_VAR 0 1
57063: PUSH
57064: FOR_IN
57065: IFFALSE 57248
// begin nat := GetNation ( i ) ;
57067: LD_ADDR_VAR 0 7
57071: PUSH
57072: LD_VAR 0 4
57076: PPUSH
57077: CALL_OW 248
57081: ST_TO_ADDR
// weapon := 0 ;
57082: LD_ADDR_VAR 0 8
57086: PUSH
57087: LD_INT 0
57089: ST_TO_ADDR
// if not nat then
57090: LD_VAR 0 7
57094: NOT
57095: IFFALSE 57099
// continue ;
57097: GO 57064
// for j in list [ nat ] do
57099: LD_ADDR_VAR 0 5
57103: PUSH
57104: LD_VAR 0 10
57108: PUSH
57109: LD_VAR 0 7
57113: ARRAY
57114: PUSH
57115: FOR_IN
57116: IFFALSE 57157
// if GetBWeapon ( i ) = j [ 1 ] then
57118: LD_VAR 0 4
57122: PPUSH
57123: CALL_OW 269
57127: PUSH
57128: LD_VAR 0 5
57132: PUSH
57133: LD_INT 1
57135: ARRAY
57136: EQUAL
57137: IFFALSE 57155
// begin weapon := j [ 2 ] ;
57139: LD_ADDR_VAR 0 8
57143: PUSH
57144: LD_VAR 0 5
57148: PUSH
57149: LD_INT 2
57151: ARRAY
57152: ST_TO_ADDR
// break ;
57153: GO 57157
// end ;
57155: GO 57115
57157: POP
57158: POP
// if not weapon then
57159: LD_VAR 0 8
57163: NOT
57164: IFFALSE 57168
// continue ;
57166: GO 57064
// for k in factories do
57168: LD_ADDR_VAR 0 6
57172: PUSH
57173: LD_VAR 0 2
57177: PUSH
57178: FOR_IN
57179: IFFALSE 57244
// begin weapons := AvailableWeaponList ( k ) ;
57181: LD_ADDR_VAR 0 9
57185: PUSH
57186: LD_VAR 0 6
57190: PPUSH
57191: CALL_OW 478
57195: ST_TO_ADDR
// if not weapons then
57196: LD_VAR 0 9
57200: NOT
57201: IFFALSE 57205
// continue ;
57203: GO 57178
// if weapon in weapons then
57205: LD_VAR 0 8
57209: PUSH
57210: LD_VAR 0 9
57214: IN
57215: IFFALSE 57242
// begin result := [ i , weapon ] ;
57217: LD_ADDR_VAR 0 3
57221: PUSH
57222: LD_VAR 0 4
57226: PUSH
57227: LD_VAR 0 8
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: ST_TO_ADDR
// exit ;
57236: POP
57237: POP
57238: POP
57239: POP
57240: GO 57250
// end ; end ;
57242: GO 57178
57244: POP
57245: POP
// end ;
57246: GO 57064
57248: POP
57249: POP
// end ;
57250: LD_VAR 0 3
57254: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57255: LD_INT 0
57257: PPUSH
// if not side or side > 8 then
57258: LD_VAR 0 3
57262: NOT
57263: PUSH
57264: LD_VAR 0 3
57268: PUSH
57269: LD_INT 8
57271: GREATER
57272: OR
57273: IFFALSE 57277
// exit ;
57275: GO 57336
// if not range then
57277: LD_VAR 0 4
57281: NOT
57282: IFFALSE 57293
// range := - 12 ;
57284: LD_ADDR_VAR 0 4
57288: PUSH
57289: LD_INT 12
57291: NEG
57292: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57293: LD_VAR 0 1
57297: PPUSH
57298: LD_VAR 0 2
57302: PPUSH
57303: LD_VAR 0 3
57307: PPUSH
57308: LD_VAR 0 4
57312: PPUSH
57313: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57317: LD_VAR 0 1
57321: PPUSH
57322: LD_VAR 0 2
57326: PPUSH
57327: LD_VAR 0 3
57331: PPUSH
57332: CALL_OW 331
// end ;
57336: LD_VAR 0 5
57340: RET
// export function Video ( mode ) ; begin
57341: LD_INT 0
57343: PPUSH
// ingame_video = mode ;
57344: LD_ADDR_OWVAR 52
57348: PUSH
57349: LD_VAR 0 1
57353: ST_TO_ADDR
// interface_hidden = mode ;
57354: LD_ADDR_OWVAR 54
57358: PUSH
57359: LD_VAR 0 1
57363: ST_TO_ADDR
// end ;
57364: LD_VAR 0 2
57368: RET
// export function Join ( array , element ) ; begin
57369: LD_INT 0
57371: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57372: LD_ADDR_VAR 0 3
57376: PUSH
57377: LD_VAR 0 1
57381: PPUSH
57382: LD_VAR 0 1
57386: PUSH
57387: LD_INT 1
57389: PLUS
57390: PPUSH
57391: LD_VAR 0 2
57395: PPUSH
57396: CALL_OW 1
57400: ST_TO_ADDR
// end ;
57401: LD_VAR 0 3
57405: RET
// export function JoinUnion ( array , element ) ; begin
57406: LD_INT 0
57408: PPUSH
// result := array union element ;
57409: LD_ADDR_VAR 0 3
57413: PUSH
57414: LD_VAR 0 1
57418: PUSH
57419: LD_VAR 0 2
57423: UNION
57424: ST_TO_ADDR
// end ;
57425: LD_VAR 0 3
57429: RET
// export function GetBehemoths ( side ) ; begin
57430: LD_INT 0
57432: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
57433: LD_ADDR_VAR 0 2
57437: PUSH
57438: LD_INT 22
57440: PUSH
57441: LD_VAR 0 1
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 31
57452: PUSH
57453: LD_INT 25
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PPUSH
57464: CALL_OW 69
57468: ST_TO_ADDR
// end ;
57469: LD_VAR 0 2
57473: RET
// export function Shuffle ( array ) ; var i , index ; begin
57474: LD_INT 0
57476: PPUSH
57477: PPUSH
57478: PPUSH
// result := [ ] ;
57479: LD_ADDR_VAR 0 2
57483: PUSH
57484: EMPTY
57485: ST_TO_ADDR
// if not array then
57486: LD_VAR 0 1
57490: NOT
57491: IFFALSE 57495
// exit ;
57493: GO 57594
// Randomize ;
57495: CALL_OW 10
// for i = array downto 1 do
57499: LD_ADDR_VAR 0 3
57503: PUSH
57504: DOUBLE
57505: LD_VAR 0 1
57509: INC
57510: ST_TO_ADDR
57511: LD_INT 1
57513: PUSH
57514: FOR_DOWNTO
57515: IFFALSE 57592
// begin index := rand ( 1 , array ) ;
57517: LD_ADDR_VAR 0 4
57521: PUSH
57522: LD_INT 1
57524: PPUSH
57525: LD_VAR 0 1
57529: PPUSH
57530: CALL_OW 12
57534: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57535: LD_ADDR_VAR 0 2
57539: PUSH
57540: LD_VAR 0 2
57544: PPUSH
57545: LD_VAR 0 2
57549: PUSH
57550: LD_INT 1
57552: PLUS
57553: PPUSH
57554: LD_VAR 0 1
57558: PUSH
57559: LD_VAR 0 4
57563: ARRAY
57564: PPUSH
57565: CALL_OW 2
57569: ST_TO_ADDR
// array := Delete ( array , index ) ;
57570: LD_ADDR_VAR 0 1
57574: PUSH
57575: LD_VAR 0 1
57579: PPUSH
57580: LD_VAR 0 4
57584: PPUSH
57585: CALL_OW 3
57589: ST_TO_ADDR
// end ;
57590: GO 57514
57592: POP
57593: POP
// end ;
57594: LD_VAR 0 2
57598: RET
// export function GetBaseMaterials ( base ) ; begin
57599: LD_INT 0
57601: PPUSH
// result := [ 0 , 0 , 0 ] ;
57602: LD_ADDR_VAR 0 2
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: LD_INT 0
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: LIST
57620: ST_TO_ADDR
// if not base then
57621: LD_VAR 0 1
57625: NOT
57626: IFFALSE 57630
// exit ;
57628: GO 57679
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57630: LD_ADDR_VAR 0 2
57634: PUSH
57635: LD_VAR 0 1
57639: PPUSH
57640: LD_INT 1
57642: PPUSH
57643: CALL_OW 275
57647: PUSH
57648: LD_VAR 0 1
57652: PPUSH
57653: LD_INT 2
57655: PPUSH
57656: CALL_OW 275
57660: PUSH
57661: LD_VAR 0 1
57665: PPUSH
57666: LD_INT 3
57668: PPUSH
57669: CALL_OW 275
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: LIST
57678: ST_TO_ADDR
// end ;
57679: LD_VAR 0 2
57683: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57684: LD_INT 0
57686: PPUSH
57687: PPUSH
// result := array ;
57688: LD_ADDR_VAR 0 3
57692: PUSH
57693: LD_VAR 0 1
57697: ST_TO_ADDR
// if size > 0 then
57698: LD_VAR 0 2
57702: PUSH
57703: LD_INT 0
57705: GREATER
57706: IFFALSE 57752
// for i := array downto size do
57708: LD_ADDR_VAR 0 4
57712: PUSH
57713: DOUBLE
57714: LD_VAR 0 1
57718: INC
57719: ST_TO_ADDR
57720: LD_VAR 0 2
57724: PUSH
57725: FOR_DOWNTO
57726: IFFALSE 57750
// result := Delete ( result , result ) ;
57728: LD_ADDR_VAR 0 3
57732: PUSH
57733: LD_VAR 0 3
57737: PPUSH
57738: LD_VAR 0 3
57742: PPUSH
57743: CALL_OW 3
57747: ST_TO_ADDR
57748: GO 57725
57750: POP
57751: POP
// end ;
57752: LD_VAR 0 3
57756: RET
// export function ComExit ( unit ) ; var tmp ; begin
57757: LD_INT 0
57759: PPUSH
57760: PPUSH
// if not IsInUnit ( unit ) then
57761: LD_VAR 0 1
57765: PPUSH
57766: CALL_OW 310
57770: NOT
57771: IFFALSE 57775
// exit ;
57773: GO 57835
// tmp := IsInUnit ( unit ) ;
57775: LD_ADDR_VAR 0 3
57779: PUSH
57780: LD_VAR 0 1
57784: PPUSH
57785: CALL_OW 310
57789: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57790: LD_VAR 0 3
57794: PPUSH
57795: CALL_OW 247
57799: PUSH
57800: LD_INT 2
57802: EQUAL
57803: IFFALSE 57816
// ComExitVehicle ( unit ) else
57805: LD_VAR 0 1
57809: PPUSH
57810: CALL_OW 121
57814: GO 57825
// ComExitBuilding ( unit ) ;
57816: LD_VAR 0 1
57820: PPUSH
57821: CALL_OW 122
// result := tmp ;
57825: LD_ADDR_VAR 0 2
57829: PUSH
57830: LD_VAR 0 3
57834: ST_TO_ADDR
// end ;
57835: LD_VAR 0 2
57839: RET
// export function ComExitAll ( units ) ; var i ; begin
57840: LD_INT 0
57842: PPUSH
57843: PPUSH
// if not units then
57844: LD_VAR 0 1
57848: NOT
57849: IFFALSE 57853
// exit ;
57851: GO 57879
// for i in units do
57853: LD_ADDR_VAR 0 3
57857: PUSH
57858: LD_VAR 0 1
57862: PUSH
57863: FOR_IN
57864: IFFALSE 57877
// ComExit ( i ) ;
57866: LD_VAR 0 3
57870: PPUSH
57871: CALL 57757 0 1
57875: GO 57863
57877: POP
57878: POP
// end ;
57879: LD_VAR 0 2
57883: RET
// export function ResetHc ; begin
57884: LD_INT 0
57886: PPUSH
// InitHc ;
57887: CALL_OW 19
// hc_importance := 0 ;
57891: LD_ADDR_OWVAR 32
57895: PUSH
57896: LD_INT 0
57898: ST_TO_ADDR
// end ;
57899: LD_VAR 0 1
57903: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
57904: LD_INT 0
57906: PPUSH
57907: PPUSH
57908: PPUSH
// _x := ( x1 + x2 ) div 2 ;
57909: LD_ADDR_VAR 0 6
57913: PUSH
57914: LD_VAR 0 1
57918: PUSH
57919: LD_VAR 0 3
57923: PLUS
57924: PUSH
57925: LD_INT 2
57927: DIV
57928: ST_TO_ADDR
// if _x < 0 then
57929: LD_VAR 0 6
57933: PUSH
57934: LD_INT 0
57936: LESS
57937: IFFALSE 57954
// _x := _x * - 1 ;
57939: LD_ADDR_VAR 0 6
57943: PUSH
57944: LD_VAR 0 6
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: MUL
57953: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
57954: LD_ADDR_VAR 0 7
57958: PUSH
57959: LD_VAR 0 2
57963: PUSH
57964: LD_VAR 0 4
57968: PLUS
57969: PUSH
57970: LD_INT 2
57972: DIV
57973: ST_TO_ADDR
// if _y < 0 then
57974: LD_VAR 0 7
57978: PUSH
57979: LD_INT 0
57981: LESS
57982: IFFALSE 57999
// _y := _y * - 1 ;
57984: LD_ADDR_VAR 0 7
57988: PUSH
57989: LD_VAR 0 7
57993: PUSH
57994: LD_INT 1
57996: NEG
57997: MUL
57998: ST_TO_ADDR
// result := [ _x , _y ] ;
57999: LD_ADDR_VAR 0 5
58003: PUSH
58004: LD_VAR 0 6
58008: PUSH
58009: LD_VAR 0 7
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: ST_TO_ADDR
// end ;
58018: LD_VAR 0 5
58022: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58023: LD_INT 0
58025: PPUSH
58026: PPUSH
58027: PPUSH
58028: PPUSH
// task := GetTaskList ( unit ) ;
58029: LD_ADDR_VAR 0 7
58033: PUSH
58034: LD_VAR 0 1
58038: PPUSH
58039: CALL_OW 437
58043: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58044: LD_VAR 0 7
58048: NOT
58049: PUSH
58050: LD_VAR 0 1
58054: PPUSH
58055: LD_VAR 0 2
58059: PPUSH
58060: CALL_OW 308
58064: NOT
58065: AND
58066: IFFALSE 58070
// exit ;
58068: GO 58188
// if IsInArea ( unit , area ) then
58070: LD_VAR 0 1
58074: PPUSH
58075: LD_VAR 0 2
58079: PPUSH
58080: CALL_OW 308
58084: IFFALSE 58102
// begin ComMoveToArea ( unit , goAway ) ;
58086: LD_VAR 0 1
58090: PPUSH
58091: LD_VAR 0 3
58095: PPUSH
58096: CALL_OW 113
// exit ;
58100: GO 58188
// end ; if task [ 1 ] [ 1 ] <> M then
58102: LD_VAR 0 7
58106: PUSH
58107: LD_INT 1
58109: ARRAY
58110: PUSH
58111: LD_INT 1
58113: ARRAY
58114: PUSH
58115: LD_STRING M
58117: NONEQUAL
58118: IFFALSE 58122
// exit ;
58120: GO 58188
// x := task [ 1 ] [ 2 ] ;
58122: LD_ADDR_VAR 0 5
58126: PUSH
58127: LD_VAR 0 7
58131: PUSH
58132: LD_INT 1
58134: ARRAY
58135: PUSH
58136: LD_INT 2
58138: ARRAY
58139: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
58140: LD_ADDR_VAR 0 6
58144: PUSH
58145: LD_VAR 0 7
58149: PUSH
58150: LD_INT 1
58152: ARRAY
58153: PUSH
58154: LD_INT 3
58156: ARRAY
58157: ST_TO_ADDR
// if InArea ( x , y , area ) then
58158: LD_VAR 0 5
58162: PPUSH
58163: LD_VAR 0 6
58167: PPUSH
58168: LD_VAR 0 2
58172: PPUSH
58173: CALL_OW 309
58177: IFFALSE 58188
// ComStop ( unit ) ;
58179: LD_VAR 0 1
58183: PPUSH
58184: CALL_OW 141
// end ;
58188: LD_VAR 0 4
58192: RET
// export function Abs ( value ) ; begin
58193: LD_INT 0
58195: PPUSH
// result := value ;
58196: LD_ADDR_VAR 0 2
58200: PUSH
58201: LD_VAR 0 1
58205: ST_TO_ADDR
// if value < 0 then
58206: LD_VAR 0 1
58210: PUSH
58211: LD_INT 0
58213: LESS
58214: IFFALSE 58231
// result := value * - 1 ;
58216: LD_ADDR_VAR 0 2
58220: PUSH
58221: LD_VAR 0 1
58225: PUSH
58226: LD_INT 1
58228: NEG
58229: MUL
58230: ST_TO_ADDR
// end ;
58231: LD_VAR 0 2
58235: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
58236: LD_INT 0
58238: PPUSH
58239: PPUSH
58240: PPUSH
58241: PPUSH
58242: PPUSH
58243: PPUSH
58244: PPUSH
58245: PPUSH
// if not unit or not building then
58246: LD_VAR 0 1
58250: NOT
58251: PUSH
58252: LD_VAR 0 2
58256: NOT
58257: OR
58258: IFFALSE 58262
// exit ;
58260: GO 58488
// x := GetX ( building ) ;
58262: LD_ADDR_VAR 0 4
58266: PUSH
58267: LD_VAR 0 2
58271: PPUSH
58272: CALL_OW 250
58276: ST_TO_ADDR
// y := GetY ( building ) ;
58277: LD_ADDR_VAR 0 6
58281: PUSH
58282: LD_VAR 0 2
58286: PPUSH
58287: CALL_OW 251
58291: ST_TO_ADDR
// d := GetDir ( building ) ;
58292: LD_ADDR_VAR 0 8
58296: PUSH
58297: LD_VAR 0 2
58301: PPUSH
58302: CALL_OW 254
58306: ST_TO_ADDR
// r := 4 ;
58307: LD_ADDR_VAR 0 9
58311: PUSH
58312: LD_INT 4
58314: ST_TO_ADDR
// for i := 1 to 5 do
58315: LD_ADDR_VAR 0 10
58319: PUSH
58320: DOUBLE
58321: LD_INT 1
58323: DEC
58324: ST_TO_ADDR
58325: LD_INT 5
58327: PUSH
58328: FOR_TO
58329: IFFALSE 58486
// begin _x := ShiftX ( x , d , r + i ) ;
58331: LD_ADDR_VAR 0 5
58335: PUSH
58336: LD_VAR 0 4
58340: PPUSH
58341: LD_VAR 0 8
58345: PPUSH
58346: LD_VAR 0 9
58350: PUSH
58351: LD_VAR 0 10
58355: PLUS
58356: PPUSH
58357: CALL_OW 272
58361: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
58362: LD_ADDR_VAR 0 7
58366: PUSH
58367: LD_VAR 0 6
58371: PPUSH
58372: LD_VAR 0 8
58376: PPUSH
58377: LD_VAR 0 9
58381: PUSH
58382: LD_VAR 0 10
58386: PLUS
58387: PPUSH
58388: CALL_OW 273
58392: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
58393: LD_VAR 0 5
58397: PPUSH
58398: LD_VAR 0 7
58402: PPUSH
58403: CALL_OW 488
58407: PUSH
58408: LD_VAR 0 5
58412: PPUSH
58413: LD_VAR 0 7
58417: PPUSH
58418: CALL_OW 428
58422: PPUSH
58423: CALL_OW 247
58427: PUSH
58428: LD_INT 3
58430: PUSH
58431: LD_INT 2
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: IN
58438: NOT
58439: AND
58440: IFFALSE 58484
// begin ComMoveXY ( unit , _x , _y ) ;
58442: LD_VAR 0 1
58446: PPUSH
58447: LD_VAR 0 5
58451: PPUSH
58452: LD_VAR 0 7
58456: PPUSH
58457: CALL_OW 111
// result := [ _x , _y ] ;
58461: LD_ADDR_VAR 0 3
58465: PUSH
58466: LD_VAR 0 5
58470: PUSH
58471: LD_VAR 0 7
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: ST_TO_ADDR
// exit ;
58480: POP
58481: POP
58482: GO 58488
// end ; end ;
58484: GO 58328
58486: POP
58487: POP
// end ;
58488: LD_VAR 0 3
58492: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
58493: LD_INT 0
58495: PPUSH
58496: PPUSH
58497: PPUSH
// result := 0 ;
58498: LD_ADDR_VAR 0 3
58502: PUSH
58503: LD_INT 0
58505: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
58506: LD_VAR 0 1
58510: PUSH
58511: LD_INT 0
58513: LESS
58514: PUSH
58515: LD_VAR 0 1
58519: PUSH
58520: LD_INT 8
58522: GREATER
58523: OR
58524: PUSH
58525: LD_VAR 0 2
58529: PUSH
58530: LD_INT 0
58532: LESS
58533: OR
58534: PUSH
58535: LD_VAR 0 2
58539: PUSH
58540: LD_INT 8
58542: GREATER
58543: OR
58544: IFFALSE 58548
// exit ;
58546: GO 58623
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
58548: LD_ADDR_VAR 0 4
58552: PUSH
58553: LD_INT 22
58555: PUSH
58556: LD_VAR 0 2
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PPUSH
58565: CALL_OW 69
58569: PUSH
58570: FOR_IN
58571: IFFALSE 58621
// begin un := UnitShoot ( i ) ;
58573: LD_ADDR_VAR 0 5
58577: PUSH
58578: LD_VAR 0 4
58582: PPUSH
58583: CALL_OW 504
58587: ST_TO_ADDR
// if GetSide ( un ) = side1 then
58588: LD_VAR 0 5
58592: PPUSH
58593: CALL_OW 255
58597: PUSH
58598: LD_VAR 0 1
58602: EQUAL
58603: IFFALSE 58619
// begin result := un ;
58605: LD_ADDR_VAR 0 3
58609: PUSH
58610: LD_VAR 0 5
58614: ST_TO_ADDR
// exit ;
58615: POP
58616: POP
58617: GO 58623
// end ; end ;
58619: GO 58570
58621: POP
58622: POP
// end ;
58623: LD_VAR 0 3
58627: RET
// export function GetCargoBay ( units ) ; begin
58628: LD_INT 0
58630: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
58631: LD_ADDR_VAR 0 2
58635: PUSH
58636: LD_VAR 0 1
58640: PPUSH
58641: LD_INT 2
58643: PUSH
58644: LD_INT 34
58646: PUSH
58647: LD_INT 12
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 34
58656: PUSH
58657: LD_INT 51
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 34
58666: PUSH
58667: LD_INT 32
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 34
58676: PUSH
58677: LD_EXP 71
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: PPUSH
58693: CALL_OW 72
58697: ST_TO_ADDR
// end ;
58698: LD_VAR 0 2
58702: RET
// export function Negate ( value ) ; begin
58703: LD_INT 0
58705: PPUSH
// result := not value ;
58706: LD_ADDR_VAR 0 2
58710: PUSH
58711: LD_VAR 0 1
58715: NOT
58716: ST_TO_ADDR
// end ;
58717: LD_VAR 0 2
58721: RET
// export function Inc ( value ) ; begin
58722: LD_INT 0
58724: PPUSH
// result := value + 1 ;
58725: LD_ADDR_VAR 0 2
58729: PUSH
58730: LD_VAR 0 1
58734: PUSH
58735: LD_INT 1
58737: PLUS
58738: ST_TO_ADDR
// end ;
58739: LD_VAR 0 2
58743: RET
// export function Dec ( value ) ; begin
58744: LD_INT 0
58746: PPUSH
// result := value - 1 ;
58747: LD_ADDR_VAR 0 2
58751: PUSH
58752: LD_VAR 0 1
58756: PUSH
58757: LD_INT 1
58759: MINUS
58760: ST_TO_ADDR
// end ;
58761: LD_VAR 0 2
58765: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
58766: LD_INT 0
58768: PPUSH
58769: PPUSH
58770: PPUSH
58771: PPUSH
58772: PPUSH
58773: PPUSH
58774: PPUSH
58775: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
58776: LD_VAR 0 1
58780: PPUSH
58781: LD_VAR 0 2
58785: PPUSH
58786: CALL_OW 488
58790: NOT
58791: PUSH
58792: LD_VAR 0 3
58796: PPUSH
58797: LD_VAR 0 4
58801: PPUSH
58802: CALL_OW 488
58806: NOT
58807: OR
58808: IFFALSE 58821
// begin result := - 1 ;
58810: LD_ADDR_VAR 0 5
58814: PUSH
58815: LD_INT 1
58817: NEG
58818: ST_TO_ADDR
// exit ;
58819: GO 59056
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
58821: LD_ADDR_VAR 0 12
58825: PUSH
58826: LD_VAR 0 1
58830: PPUSH
58831: LD_VAR 0 2
58835: PPUSH
58836: LD_VAR 0 3
58840: PPUSH
58841: LD_VAR 0 4
58845: PPUSH
58846: CALL 57904 0 4
58850: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
58851: LD_ADDR_VAR 0 11
58855: PUSH
58856: LD_VAR 0 1
58860: PPUSH
58861: LD_VAR 0 2
58865: PPUSH
58866: LD_VAR 0 12
58870: PUSH
58871: LD_INT 1
58873: ARRAY
58874: PPUSH
58875: LD_VAR 0 12
58879: PUSH
58880: LD_INT 2
58882: ARRAY
58883: PPUSH
58884: CALL_OW 298
58888: ST_TO_ADDR
// distance := 9999 ;
58889: LD_ADDR_VAR 0 10
58893: PUSH
58894: LD_INT 9999
58896: ST_TO_ADDR
// for i := 0 to 5 do
58897: LD_ADDR_VAR 0 6
58901: PUSH
58902: DOUBLE
58903: LD_INT 0
58905: DEC
58906: ST_TO_ADDR
58907: LD_INT 5
58909: PUSH
58910: FOR_TO
58911: IFFALSE 59054
// begin _x := ShiftX ( x1 , i , centerDist ) ;
58913: LD_ADDR_VAR 0 7
58917: PUSH
58918: LD_VAR 0 1
58922: PPUSH
58923: LD_VAR 0 6
58927: PPUSH
58928: LD_VAR 0 11
58932: PPUSH
58933: CALL_OW 272
58937: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
58938: LD_ADDR_VAR 0 8
58942: PUSH
58943: LD_VAR 0 2
58947: PPUSH
58948: LD_VAR 0 6
58952: PPUSH
58953: LD_VAR 0 11
58957: PPUSH
58958: CALL_OW 273
58962: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58963: LD_VAR 0 7
58967: PPUSH
58968: LD_VAR 0 8
58972: PPUSH
58973: CALL_OW 488
58977: NOT
58978: IFFALSE 58982
// continue ;
58980: GO 58910
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
58982: LD_ADDR_VAR 0 9
58986: PUSH
58987: LD_VAR 0 12
58991: PUSH
58992: LD_INT 1
58994: ARRAY
58995: PPUSH
58996: LD_VAR 0 12
59000: PUSH
59001: LD_INT 2
59003: ARRAY
59004: PPUSH
59005: LD_VAR 0 7
59009: PPUSH
59010: LD_VAR 0 8
59014: PPUSH
59015: CALL_OW 298
59019: ST_TO_ADDR
// if tmp < distance then
59020: LD_VAR 0 9
59024: PUSH
59025: LD_VAR 0 10
59029: LESS
59030: IFFALSE 59052
// begin result := i ;
59032: LD_ADDR_VAR 0 5
59036: PUSH
59037: LD_VAR 0 6
59041: ST_TO_ADDR
// distance := tmp ;
59042: LD_ADDR_VAR 0 10
59046: PUSH
59047: LD_VAR 0 9
59051: ST_TO_ADDR
// end ; end ;
59052: GO 58910
59054: POP
59055: POP
// end ;
59056: LD_VAR 0 5
59060: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59061: LD_INT 0
59063: PPUSH
59064: PPUSH
// if not driver or not IsInUnit ( driver ) then
59065: LD_VAR 0 1
59069: NOT
59070: PUSH
59071: LD_VAR 0 1
59075: PPUSH
59076: CALL_OW 310
59080: NOT
59081: OR
59082: IFFALSE 59086
// exit ;
59084: GO 59176
// vehicle := IsInUnit ( driver ) ;
59086: LD_ADDR_VAR 0 3
59090: PUSH
59091: LD_VAR 0 1
59095: PPUSH
59096: CALL_OW 310
59100: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59101: LD_VAR 0 1
59105: PPUSH
59106: LD_STRING \
59108: PUSH
59109: LD_INT 0
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: LD_INT 0
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: LD_INT 0
59123: PUSH
59124: LD_INT 0
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: PUSH
59136: LD_STRING E
59138: PUSH
59139: LD_INT 0
59141: PUSH
59142: LD_INT 0
59144: PUSH
59145: LD_VAR 0 3
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: LD_INT 0
59155: PUSH
59156: LD_INT 0
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PPUSH
59172: CALL_OW 446
// end ;
59176: LD_VAR 0 2
59180: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59181: LD_INT 0
59183: PPUSH
59184: PPUSH
// if not driver or not IsInUnit ( driver ) then
59185: LD_VAR 0 1
59189: NOT
59190: PUSH
59191: LD_VAR 0 1
59195: PPUSH
59196: CALL_OW 310
59200: NOT
59201: OR
59202: IFFALSE 59206
// exit ;
59204: GO 59296
// vehicle := IsInUnit ( driver ) ;
59206: LD_ADDR_VAR 0 3
59210: PUSH
59211: LD_VAR 0 1
59215: PPUSH
59216: CALL_OW 310
59220: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59221: LD_VAR 0 1
59225: PPUSH
59226: LD_STRING \
59228: PUSH
59229: LD_INT 0
59231: PUSH
59232: LD_INT 0
59234: PUSH
59235: LD_INT 0
59237: PUSH
59238: LD_INT 0
59240: PUSH
59241: LD_INT 0
59243: PUSH
59244: LD_INT 0
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: PUSH
59256: LD_STRING E
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: LD_INT 0
59264: PUSH
59265: LD_VAR 0 3
59269: PUSH
59270: LD_INT 0
59272: PUSH
59273: LD_INT 0
59275: PUSH
59276: LD_INT 0
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PPUSH
59292: CALL_OW 447
// end ;
59296: LD_VAR 0 2
59300: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
59301: LD_INT 0
59303: PPUSH
59304: PPUSH
59305: PPUSH
// tmp := [ ] ;
59306: LD_ADDR_VAR 0 5
59310: PUSH
59311: EMPTY
59312: ST_TO_ADDR
// for i in units do
59313: LD_ADDR_VAR 0 4
59317: PUSH
59318: LD_VAR 0 1
59322: PUSH
59323: FOR_IN
59324: IFFALSE 59362
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
59326: LD_ADDR_VAR 0 5
59330: PUSH
59331: LD_VAR 0 5
59335: PPUSH
59336: LD_VAR 0 5
59340: PUSH
59341: LD_INT 1
59343: PLUS
59344: PPUSH
59345: LD_VAR 0 4
59349: PPUSH
59350: CALL_OW 256
59354: PPUSH
59355: CALL_OW 2
59359: ST_TO_ADDR
59360: GO 59323
59362: POP
59363: POP
// if not tmp then
59364: LD_VAR 0 5
59368: NOT
59369: IFFALSE 59373
// exit ;
59371: GO 59421
// if asc then
59373: LD_VAR 0 2
59377: IFFALSE 59401
// result := SortListByListAsc ( units , tmp ) else
59379: LD_ADDR_VAR 0 3
59383: PUSH
59384: LD_VAR 0 1
59388: PPUSH
59389: LD_VAR 0 5
59393: PPUSH
59394: CALL_OW 76
59398: ST_TO_ADDR
59399: GO 59421
// result := SortListByListDesc ( units , tmp ) ;
59401: LD_ADDR_VAR 0 3
59405: PUSH
59406: LD_VAR 0 1
59410: PPUSH
59411: LD_VAR 0 5
59415: PPUSH
59416: CALL_OW 77
59420: ST_TO_ADDR
// end ;
59421: LD_VAR 0 3
59425: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
59426: LD_INT 0
59428: PPUSH
59429: PPUSH
// task := GetTaskList ( mech ) ;
59430: LD_ADDR_VAR 0 4
59434: PUSH
59435: LD_VAR 0 1
59439: PPUSH
59440: CALL_OW 437
59444: ST_TO_ADDR
// if not task then
59445: LD_VAR 0 4
59449: NOT
59450: IFFALSE 59454
// exit ;
59452: GO 59496
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
59454: LD_ADDR_VAR 0 3
59458: PUSH
59459: LD_VAR 0 4
59463: PUSH
59464: LD_INT 1
59466: ARRAY
59467: PUSH
59468: LD_INT 1
59470: ARRAY
59471: PUSH
59472: LD_STRING r
59474: EQUAL
59475: PUSH
59476: LD_VAR 0 4
59480: PUSH
59481: LD_INT 1
59483: ARRAY
59484: PUSH
59485: LD_INT 4
59487: ARRAY
59488: PUSH
59489: LD_VAR 0 2
59493: EQUAL
59494: AND
59495: ST_TO_ADDR
// end ;
59496: LD_VAR 0 3
59500: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
59501: LD_INT 0
59503: PPUSH
// SetDir ( unit , d ) ;
59504: LD_VAR 0 1
59508: PPUSH
59509: LD_VAR 0 4
59513: PPUSH
59514: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
59518: LD_VAR 0 1
59522: PPUSH
59523: LD_VAR 0 2
59527: PPUSH
59528: LD_VAR 0 3
59532: PPUSH
59533: LD_VAR 0 5
59537: PPUSH
59538: CALL_OW 48
// end ;
59542: LD_VAR 0 6
59546: RET
// export function ToNaturalNumber ( number ) ; begin
59547: LD_INT 0
59549: PPUSH
// result := number div 1 ;
59550: LD_ADDR_VAR 0 2
59554: PUSH
59555: LD_VAR 0 1
59559: PUSH
59560: LD_INT 1
59562: DIV
59563: ST_TO_ADDR
// if number < 0 then
59564: LD_VAR 0 1
59568: PUSH
59569: LD_INT 0
59571: LESS
59572: IFFALSE 59582
// result := 0 ;
59574: LD_ADDR_VAR 0 2
59578: PUSH
59579: LD_INT 0
59581: ST_TO_ADDR
// end ;
59582: LD_VAR 0 2
59586: RET
// export function SortByClass ( units , class ) ; var un ; begin
59587: LD_INT 0
59589: PPUSH
59590: PPUSH
// if not units or not class then
59591: LD_VAR 0 1
59595: NOT
59596: PUSH
59597: LD_VAR 0 2
59601: NOT
59602: OR
59603: IFFALSE 59607
// exit ;
59605: GO 59702
// result := [ ] ;
59607: LD_ADDR_VAR 0 3
59611: PUSH
59612: EMPTY
59613: ST_TO_ADDR
// for un in units do
59614: LD_ADDR_VAR 0 4
59618: PUSH
59619: LD_VAR 0 1
59623: PUSH
59624: FOR_IN
59625: IFFALSE 59700
// if GetClass ( un ) = class then
59627: LD_VAR 0 4
59631: PPUSH
59632: CALL_OW 257
59636: PUSH
59637: LD_VAR 0 2
59641: EQUAL
59642: IFFALSE 59669
// result := Insert ( result , 1 , un ) else
59644: LD_ADDR_VAR 0 3
59648: PUSH
59649: LD_VAR 0 3
59653: PPUSH
59654: LD_INT 1
59656: PPUSH
59657: LD_VAR 0 4
59661: PPUSH
59662: CALL_OW 2
59666: ST_TO_ADDR
59667: GO 59698
// result := Replace ( result , result + 1 , un ) ;
59669: LD_ADDR_VAR 0 3
59673: PUSH
59674: LD_VAR 0 3
59678: PPUSH
59679: LD_VAR 0 3
59683: PUSH
59684: LD_INT 1
59686: PLUS
59687: PPUSH
59688: LD_VAR 0 4
59692: PPUSH
59693: CALL_OW 1
59697: ST_TO_ADDR
59698: GO 59624
59700: POP
59701: POP
// end ;
59702: LD_VAR 0 3
59706: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
59707: LD_INT 0
59709: PPUSH
59710: PPUSH
59711: PPUSH
59712: PPUSH
59713: PPUSH
59714: PPUSH
59715: PPUSH
// result := [ ] ;
59716: LD_ADDR_VAR 0 4
59720: PUSH
59721: EMPTY
59722: ST_TO_ADDR
// if x - r < 0 then
59723: LD_VAR 0 1
59727: PUSH
59728: LD_VAR 0 3
59732: MINUS
59733: PUSH
59734: LD_INT 0
59736: LESS
59737: IFFALSE 59749
// min_x := 0 else
59739: LD_ADDR_VAR 0 8
59743: PUSH
59744: LD_INT 0
59746: ST_TO_ADDR
59747: GO 59765
// min_x := x - r ;
59749: LD_ADDR_VAR 0 8
59753: PUSH
59754: LD_VAR 0 1
59758: PUSH
59759: LD_VAR 0 3
59763: MINUS
59764: ST_TO_ADDR
// if y - r < 0 then
59765: LD_VAR 0 2
59769: PUSH
59770: LD_VAR 0 3
59774: MINUS
59775: PUSH
59776: LD_INT 0
59778: LESS
59779: IFFALSE 59791
// min_y := 0 else
59781: LD_ADDR_VAR 0 7
59785: PUSH
59786: LD_INT 0
59788: ST_TO_ADDR
59789: GO 59807
// min_y := y - r ;
59791: LD_ADDR_VAR 0 7
59795: PUSH
59796: LD_VAR 0 2
59800: PUSH
59801: LD_VAR 0 3
59805: MINUS
59806: ST_TO_ADDR
// max_x := x + r ;
59807: LD_ADDR_VAR 0 9
59811: PUSH
59812: LD_VAR 0 1
59816: PUSH
59817: LD_VAR 0 3
59821: PLUS
59822: ST_TO_ADDR
// max_y := y + r ;
59823: LD_ADDR_VAR 0 10
59827: PUSH
59828: LD_VAR 0 2
59832: PUSH
59833: LD_VAR 0 3
59837: PLUS
59838: ST_TO_ADDR
// for _x = min_x to max_x do
59839: LD_ADDR_VAR 0 5
59843: PUSH
59844: DOUBLE
59845: LD_VAR 0 8
59849: DEC
59850: ST_TO_ADDR
59851: LD_VAR 0 9
59855: PUSH
59856: FOR_TO
59857: IFFALSE 59958
// for _y = min_y to max_y do
59859: LD_ADDR_VAR 0 6
59863: PUSH
59864: DOUBLE
59865: LD_VAR 0 7
59869: DEC
59870: ST_TO_ADDR
59871: LD_VAR 0 10
59875: PUSH
59876: FOR_TO
59877: IFFALSE 59954
// begin if not ValidHex ( _x , _y ) then
59879: LD_VAR 0 5
59883: PPUSH
59884: LD_VAR 0 6
59888: PPUSH
59889: CALL_OW 488
59893: NOT
59894: IFFALSE 59898
// continue ;
59896: GO 59876
// if GetResourceTypeXY ( _x , _y ) then
59898: LD_VAR 0 5
59902: PPUSH
59903: LD_VAR 0 6
59907: PPUSH
59908: CALL_OW 283
59912: IFFALSE 59952
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
59914: LD_ADDR_VAR 0 4
59918: PUSH
59919: LD_VAR 0 4
59923: PPUSH
59924: LD_VAR 0 4
59928: PUSH
59929: LD_INT 1
59931: PLUS
59932: PPUSH
59933: LD_VAR 0 5
59937: PUSH
59938: LD_VAR 0 6
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PPUSH
59947: CALL_OW 1
59951: ST_TO_ADDR
// end ;
59952: GO 59876
59954: POP
59955: POP
59956: GO 59856
59958: POP
59959: POP
// end ;
59960: LD_VAR 0 4
59964: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
59965: LD_INT 0
59967: PPUSH
59968: PPUSH
59969: PPUSH
59970: PPUSH
59971: PPUSH
59972: PPUSH
59973: PPUSH
59974: PPUSH
// if not units then
59975: LD_VAR 0 1
59979: NOT
59980: IFFALSE 59984
// exit ;
59982: GO 60495
// result := UnitFilter ( units , [ f_ok ] ) ;
59984: LD_ADDR_VAR 0 3
59988: PUSH
59989: LD_VAR 0 1
59993: PPUSH
59994: LD_INT 50
59996: PUSH
59997: EMPTY
59998: LIST
59999: PPUSH
60000: CALL_OW 72
60004: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
60005: LD_ADDR_VAR 0 8
60009: PUSH
60010: LD_VAR 0 1
60014: PUSH
60015: LD_INT 1
60017: ARRAY
60018: PPUSH
60019: CALL_OW 255
60023: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
60024: LD_ADDR_VAR 0 10
60028: PUSH
60029: LD_INT 29
60031: PUSH
60032: LD_EXP 74
60036: PUSH
60037: LD_INT 49
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: LIST
60044: ST_TO_ADDR
// if not result then
60045: LD_VAR 0 3
60049: NOT
60050: IFFALSE 60054
// exit ;
60052: GO 60495
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
60054: LD_ADDR_VAR 0 5
60058: PUSH
60059: LD_INT 81
60061: PUSH
60062: LD_VAR 0 8
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PPUSH
60071: CALL_OW 69
60075: ST_TO_ADDR
// for i in result do
60076: LD_ADDR_VAR 0 4
60080: PUSH
60081: LD_VAR 0 3
60085: PUSH
60086: FOR_IN
60087: IFFALSE 60493
// begin tag := GetTag ( i ) + 1 ;
60089: LD_ADDR_VAR 0 9
60093: PUSH
60094: LD_VAR 0 4
60098: PPUSH
60099: CALL_OW 110
60103: PUSH
60104: LD_INT 1
60106: PLUS
60107: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
60108: LD_ADDR_VAR 0 7
60112: PUSH
60113: LD_VAR 0 4
60117: PPUSH
60118: CALL_OW 250
60122: PPUSH
60123: LD_VAR 0 4
60127: PPUSH
60128: CALL_OW 251
60132: PPUSH
60133: LD_INT 6
60135: PPUSH
60136: CALL 59707 0 3
60140: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
60141: LD_VAR 0 7
60145: PUSH
60146: LD_VAR 0 4
60150: PPUSH
60151: CALL_OW 264
60155: PUSH
60156: LD_VAR 0 10
60160: IN
60161: NOT
60162: AND
60163: IFFALSE 60202
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
60165: LD_VAR 0 4
60169: PPUSH
60170: LD_VAR 0 7
60174: PUSH
60175: LD_INT 1
60177: ARRAY
60178: PUSH
60179: LD_INT 1
60181: ARRAY
60182: PPUSH
60183: LD_VAR 0 7
60187: PUSH
60188: LD_INT 1
60190: ARRAY
60191: PUSH
60192: LD_INT 2
60194: ARRAY
60195: PPUSH
60196: CALL_OW 116
60200: GO 60491
// if path > tag then
60202: LD_VAR 0 2
60206: PUSH
60207: LD_VAR 0 9
60211: GREATER
60212: IFFALSE 60420
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
60214: LD_ADDR_VAR 0 6
60218: PUSH
60219: LD_VAR 0 5
60223: PPUSH
60224: LD_INT 91
60226: PUSH
60227: LD_VAR 0 4
60231: PUSH
60232: LD_INT 12
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: LIST
60239: PPUSH
60240: CALL_OW 72
60244: ST_TO_ADDR
// if nearEnemy then
60245: LD_VAR 0 6
60249: IFFALSE 60318
// begin if GetWeapon ( i ) = ru_time_lapser then
60251: LD_VAR 0 4
60255: PPUSH
60256: CALL_OW 264
60260: PUSH
60261: LD_INT 49
60263: EQUAL
60264: IFFALSE 60292
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
60266: LD_VAR 0 4
60270: PPUSH
60271: LD_VAR 0 6
60275: PPUSH
60276: LD_VAR 0 4
60280: PPUSH
60281: CALL_OW 74
60285: PPUSH
60286: CALL_OW 112
60290: GO 60316
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
60292: LD_VAR 0 4
60296: PPUSH
60297: LD_VAR 0 6
60301: PPUSH
60302: LD_VAR 0 4
60306: PPUSH
60307: CALL_OW 74
60311: PPUSH
60312: CALL_OW 115
// end else
60316: GO 60418
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
60318: LD_VAR 0 4
60322: PPUSH
60323: LD_VAR 0 2
60327: PUSH
60328: LD_VAR 0 9
60332: ARRAY
60333: PUSH
60334: LD_INT 1
60336: ARRAY
60337: PPUSH
60338: LD_VAR 0 2
60342: PUSH
60343: LD_VAR 0 9
60347: ARRAY
60348: PUSH
60349: LD_INT 2
60351: ARRAY
60352: PPUSH
60353: CALL_OW 297
60357: PUSH
60358: LD_INT 6
60360: GREATER
60361: IFFALSE 60404
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
60363: LD_VAR 0 4
60367: PPUSH
60368: LD_VAR 0 2
60372: PUSH
60373: LD_VAR 0 9
60377: ARRAY
60378: PUSH
60379: LD_INT 1
60381: ARRAY
60382: PPUSH
60383: LD_VAR 0 2
60387: PUSH
60388: LD_VAR 0 9
60392: ARRAY
60393: PUSH
60394: LD_INT 2
60396: ARRAY
60397: PPUSH
60398: CALL_OW 114
60402: GO 60418
// SetTag ( i , tag ) ;
60404: LD_VAR 0 4
60408: PPUSH
60409: LD_VAR 0 9
60413: PPUSH
60414: CALL_OW 109
// end else
60418: GO 60491
// if enemy then
60420: LD_VAR 0 5
60424: IFFALSE 60491
// begin if GetWeapon ( i ) = ru_time_lapser then
60426: LD_VAR 0 4
60430: PPUSH
60431: CALL_OW 264
60435: PUSH
60436: LD_INT 49
60438: EQUAL
60439: IFFALSE 60467
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
60441: LD_VAR 0 4
60445: PPUSH
60446: LD_VAR 0 5
60450: PPUSH
60451: LD_VAR 0 4
60455: PPUSH
60456: CALL_OW 74
60460: PPUSH
60461: CALL_OW 112
60465: GO 60491
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
60467: LD_VAR 0 4
60471: PPUSH
60472: LD_VAR 0 5
60476: PPUSH
60477: LD_VAR 0 4
60481: PPUSH
60482: CALL_OW 74
60486: PPUSH
60487: CALL_OW 115
// end ; end ;
60491: GO 60086
60493: POP
60494: POP
// end ;
60495: LD_VAR 0 3
60499: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
60500: LD_INT 0
60502: PPUSH
60503: PPUSH
60504: PPUSH
// if not unit or IsInUnit ( unit ) then
60505: LD_VAR 0 1
60509: NOT
60510: PUSH
60511: LD_VAR 0 1
60515: PPUSH
60516: CALL_OW 310
60520: OR
60521: IFFALSE 60525
// exit ;
60523: GO 60616
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
60525: LD_ADDR_VAR 0 4
60529: PUSH
60530: LD_VAR 0 1
60534: PPUSH
60535: CALL_OW 250
60539: PPUSH
60540: LD_VAR 0 2
60544: PPUSH
60545: LD_INT 1
60547: PPUSH
60548: CALL_OW 272
60552: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
60553: LD_ADDR_VAR 0 5
60557: PUSH
60558: LD_VAR 0 1
60562: PPUSH
60563: CALL_OW 251
60567: PPUSH
60568: LD_VAR 0 2
60572: PPUSH
60573: LD_INT 1
60575: PPUSH
60576: CALL_OW 273
60580: ST_TO_ADDR
// if ValidHex ( x , y ) then
60581: LD_VAR 0 4
60585: PPUSH
60586: LD_VAR 0 5
60590: PPUSH
60591: CALL_OW 488
60595: IFFALSE 60616
// ComTurnXY ( unit , x , y ) ;
60597: LD_VAR 0 1
60601: PPUSH
60602: LD_VAR 0 4
60606: PPUSH
60607: LD_VAR 0 5
60611: PPUSH
60612: CALL_OW 118
// end ;
60616: LD_VAR 0 3
60620: RET
// export function SeeUnits ( side , units ) ; var i ; begin
60621: LD_INT 0
60623: PPUSH
60624: PPUSH
// result := false ;
60625: LD_ADDR_VAR 0 3
60629: PUSH
60630: LD_INT 0
60632: ST_TO_ADDR
// if not units then
60633: LD_VAR 0 2
60637: NOT
60638: IFFALSE 60642
// exit ;
60640: GO 60687
// for i in units do
60642: LD_ADDR_VAR 0 4
60646: PUSH
60647: LD_VAR 0 2
60651: PUSH
60652: FOR_IN
60653: IFFALSE 60685
// if See ( side , i ) then
60655: LD_VAR 0 1
60659: PPUSH
60660: LD_VAR 0 4
60664: PPUSH
60665: CALL_OW 292
60669: IFFALSE 60683
// begin result := true ;
60671: LD_ADDR_VAR 0 3
60675: PUSH
60676: LD_INT 1
60678: ST_TO_ADDR
// exit ;
60679: POP
60680: POP
60681: GO 60687
// end ;
60683: GO 60652
60685: POP
60686: POP
// end ;
60687: LD_VAR 0 3
60691: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
60692: LD_INT 0
60694: PPUSH
60695: PPUSH
60696: PPUSH
60697: PPUSH
// if not unit or not points then
60698: LD_VAR 0 1
60702: NOT
60703: PUSH
60704: LD_VAR 0 2
60708: NOT
60709: OR
60710: IFFALSE 60714
// exit ;
60712: GO 60804
// dist := 99999 ;
60714: LD_ADDR_VAR 0 5
60718: PUSH
60719: LD_INT 99999
60721: ST_TO_ADDR
// for i in points do
60722: LD_ADDR_VAR 0 4
60726: PUSH
60727: LD_VAR 0 2
60731: PUSH
60732: FOR_IN
60733: IFFALSE 60802
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
60735: LD_ADDR_VAR 0 6
60739: PUSH
60740: LD_VAR 0 1
60744: PPUSH
60745: LD_VAR 0 4
60749: PUSH
60750: LD_INT 1
60752: ARRAY
60753: PPUSH
60754: LD_VAR 0 4
60758: PUSH
60759: LD_INT 2
60761: ARRAY
60762: PPUSH
60763: CALL_OW 297
60767: ST_TO_ADDR
// if tmpDist < dist then
60768: LD_VAR 0 6
60772: PUSH
60773: LD_VAR 0 5
60777: LESS
60778: IFFALSE 60800
// begin result := i ;
60780: LD_ADDR_VAR 0 3
60784: PUSH
60785: LD_VAR 0 4
60789: ST_TO_ADDR
// dist := tmpDist ;
60790: LD_ADDR_VAR 0 5
60794: PUSH
60795: LD_VAR 0 6
60799: ST_TO_ADDR
// end ; end ;
60800: GO 60732
60802: POP
60803: POP
// end ;
60804: LD_VAR 0 3
60808: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
60809: LD_INT 0
60811: PPUSH
// uc_side := side ;
60812: LD_ADDR_OWVAR 20
60816: PUSH
60817: LD_VAR 0 1
60821: ST_TO_ADDR
// uc_nation := 3 ;
60822: LD_ADDR_OWVAR 21
60826: PUSH
60827: LD_INT 3
60829: ST_TO_ADDR
// vc_chassis := 25 ;
60830: LD_ADDR_OWVAR 37
60834: PUSH
60835: LD_INT 25
60837: ST_TO_ADDR
// vc_engine := engine_siberite ;
60838: LD_ADDR_OWVAR 39
60842: PUSH
60843: LD_INT 3
60845: ST_TO_ADDR
// vc_control := control_computer ;
60846: LD_ADDR_OWVAR 38
60850: PUSH
60851: LD_INT 3
60853: ST_TO_ADDR
// vc_weapon := 59 ;
60854: LD_ADDR_OWVAR 40
60858: PUSH
60859: LD_INT 59
60861: ST_TO_ADDR
// result := CreateVehicle ;
60862: LD_ADDR_VAR 0 5
60866: PUSH
60867: CALL_OW 45
60871: ST_TO_ADDR
// SetDir ( result , d ) ;
60872: LD_VAR 0 5
60876: PPUSH
60877: LD_VAR 0 4
60881: PPUSH
60882: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
60886: LD_VAR 0 5
60890: PPUSH
60891: LD_VAR 0 2
60895: PPUSH
60896: LD_VAR 0 3
60900: PPUSH
60901: LD_INT 0
60903: PPUSH
60904: CALL_OW 48
// end ;
60908: LD_VAR 0 5
60912: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
60913: LD_INT 0
60915: PPUSH
60916: PPUSH
60917: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
60918: LD_ADDR_VAR 0 2
60922: PUSH
60923: LD_INT 0
60925: PUSH
60926: LD_INT 0
60928: PUSH
60929: LD_INT 0
60931: PUSH
60932: LD_INT 0
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
60941: LD_VAR 0 1
60945: NOT
60946: PUSH
60947: LD_VAR 0 1
60951: PPUSH
60952: CALL_OW 264
60956: PUSH
60957: LD_INT 12
60959: PUSH
60960: LD_INT 51
60962: PUSH
60963: LD_INT 32
60965: PUSH
60966: LD_EXP 71
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: IN
60977: NOT
60978: OR
60979: IFFALSE 60983
// exit ;
60981: GO 61081
// for i := 1 to 3 do
60983: LD_ADDR_VAR 0 3
60987: PUSH
60988: DOUBLE
60989: LD_INT 1
60991: DEC
60992: ST_TO_ADDR
60993: LD_INT 3
60995: PUSH
60996: FOR_TO
60997: IFFALSE 61079
// begin tmp := GetCargo ( cargo , i ) ;
60999: LD_ADDR_VAR 0 4
61003: PUSH
61004: LD_VAR 0 1
61008: PPUSH
61009: LD_VAR 0 3
61013: PPUSH
61014: CALL_OW 289
61018: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
61019: LD_ADDR_VAR 0 2
61023: PUSH
61024: LD_VAR 0 2
61028: PPUSH
61029: LD_VAR 0 3
61033: PPUSH
61034: LD_VAR 0 4
61038: PPUSH
61039: CALL_OW 1
61043: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
61044: LD_ADDR_VAR 0 2
61048: PUSH
61049: LD_VAR 0 2
61053: PPUSH
61054: LD_INT 4
61056: PPUSH
61057: LD_VAR 0 2
61061: PUSH
61062: LD_INT 4
61064: ARRAY
61065: PUSH
61066: LD_VAR 0 4
61070: PLUS
61071: PPUSH
61072: CALL_OW 1
61076: ST_TO_ADDR
// end ;
61077: GO 60996
61079: POP
61080: POP
// end ;
61081: LD_VAR 0 2
61085: RET
// export function Length ( array ) ; begin
61086: LD_INT 0
61088: PPUSH
// result := array + 0 ;
61089: LD_ADDR_VAR 0 2
61093: PUSH
61094: LD_VAR 0 1
61098: PUSH
61099: LD_INT 0
61101: PLUS
61102: ST_TO_ADDR
// end ;
61103: LD_VAR 0 2
61107: RET
