// every 0 0$1 do var x , amConvoyGroups ;
   0: GO 2
   2: DISABLE
   3: LD_INT 0
   5: PPUSH
   6: PPUSH
// begin amConvoyGroups := [ [ [ 1 , 2 , 3 , 5 ] [ Difficulty ] , [ 0 , 0 , 1 , 1 ] [ Difficulty ] , [ 1 , 1 , 2 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 0 , 1 , 1 , 2 ] [ Difficulty ] ] , [ [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 0 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] ] , [ [ 1 , 2 , 3 , 4 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] ] , [ [ 3 , 4 , 6 , 7 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 1 , 3 ] [ Difficulty ] ] ] ;
   7: LD_ADDR_VAR 0 2
  11: PUSH
  12: LD_INT 1
  14: PUSH
  15: LD_INT 2
  17: PUSH
  18: LD_INT 3
  20: PUSH
  21: LD_INT 5
  23: PUSH
  24: EMPTY
  25: LIST
  26: LIST
  27: LIST
  28: LIST
  29: PUSH
  30: LD_OWVAR 67
  34: ARRAY
  35: PUSH
  36: LD_INT 0
  38: PUSH
  39: LD_INT 0
  41: PUSH
  42: LD_INT 1
  44: PUSH
  45: LD_INT 1
  47: PUSH
  48: EMPTY
  49: LIST
  50: LIST
  51: LIST
  52: LIST
  53: PUSH
  54: LD_OWVAR 67
  58: ARRAY
  59: PUSH
  60: LD_INT 1
  62: PUSH
  63: LD_INT 1
  65: PUSH
  66: LD_INT 2
  68: PUSH
  69: LD_INT 2
  71: PUSH
  72: EMPTY
  73: LIST
  74: LIST
  75: LIST
  76: LIST
  77: PUSH
  78: LD_OWVAR 67
  82: ARRAY
  83: PUSH
  84: LD_INT 1
  86: PUSH
  87: LD_INT 1
  89: PUSH
  90: LD_INT 1
  92: PUSH
  93: LD_INT 2
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: PUSH
 108: LD_INT 0
 110: PUSH
 111: LD_INT 1
 113: PUSH
 114: LD_INT 1
 116: PUSH
 117: LD_INT 2
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: PUSH
 126: LD_OWVAR 67
 130: ARRAY
 131: PUSH
 132: EMPTY
 133: LIST
 134: LIST
 135: LIST
 136: LIST
 137: LIST
 138: PUSH
 139: LD_INT 3
 141: PUSH
 142: LD_INT 4
 144: PUSH
 145: LD_INT 5
 147: PUSH
 148: LD_INT 6
 150: PUSH
 151: EMPTY
 152: LIST
 153: LIST
 154: LIST
 155: LIST
 156: PUSH
 157: LD_OWVAR 67
 161: ARRAY
 162: PUSH
 163: LD_INT 0
 165: PUSH
 166: LD_INT 1
 168: PUSH
 169: LD_INT 1
 171: PUSH
 172: LD_INT 2
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: PUSH
 181: LD_OWVAR 67
 185: ARRAY
 186: PUSH
 187: LD_INT 1
 189: PUSH
 190: LD_INT 1
 192: PUSH
 193: LD_INT 2
 195: PUSH
 196: LD_INT 3
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: PUSH
 205: LD_OWVAR 67
 209: ARRAY
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 2
 219: PUSH
 220: LD_INT 3
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: PUSH
 229: LD_OWVAR 67
 233: ARRAY
 234: PUSH
 235: LD_INT 1
 237: PUSH
 238: LD_INT 1
 240: PUSH
 241: LD_INT 2
 243: PUSH
 244: LD_INT 3
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: LIST
 251: LIST
 252: PUSH
 253: LD_OWVAR 67
 257: ARRAY
 258: PUSH
 259: EMPTY
 260: LIST
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: PUSH
 266: LD_INT 1
 268: PUSH
 269: LD_INT 2
 271: PUSH
 272: LD_INT 3
 274: PUSH
 275: LD_INT 4
 277: PUSH
 278: EMPTY
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: PUSH
 284: LD_OWVAR 67
 288: ARRAY
 289: PUSH
 290: LD_INT 1
 292: PUSH
 293: LD_INT 1
 295: PUSH
 296: LD_INT 1
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: LIST
 306: LIST
 307: PUSH
 308: LD_OWVAR 67
 312: ARRAY
 313: PUSH
 314: LD_INT 1
 316: PUSH
 317: LD_INT 1
 319: PUSH
 320: LD_INT 2
 322: PUSH
 323: LD_INT 2
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_OWVAR 67
 336: ARRAY
 337: PUSH
 338: LD_INT 1
 340: PUSH
 341: LD_INT 1
 343: PUSH
 344: LD_INT 1
 346: PUSH
 347: LD_INT 2
 349: PUSH
 350: EMPTY
 351: LIST
 352: LIST
 353: LIST
 354: LIST
 355: PUSH
 356: LD_OWVAR 67
 360: ARRAY
 361: PUSH
 362: LD_INT 1
 364: PUSH
 365: LD_INT 1
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: LD_INT 2
 373: PUSH
 374: EMPTY
 375: LIST
 376: LIST
 377: LIST
 378: LIST
 379: PUSH
 380: LD_OWVAR 67
 384: ARRAY
 385: PUSH
 386: EMPTY
 387: LIST
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: PUSH
 393: LD_INT 3
 395: PUSH
 396: LD_INT 4
 398: PUSH
 399: LD_INT 6
 401: PUSH
 402: LD_INT 7
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: LD_OWVAR 67
 415: ARRAY
 416: PUSH
 417: LD_INT 1
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: LD_INT 1
 425: PUSH
 426: LD_INT 2
 428: PUSH
 429: EMPTY
 430: LIST
 431: LIST
 432: LIST
 433: LIST
 434: PUSH
 435: LD_OWVAR 67
 439: ARRAY
 440: PUSH
 441: LD_INT 1
 443: PUSH
 444: LD_INT 1
 446: PUSH
 447: LD_INT 2
 449: PUSH
 450: LD_INT 3
 452: PUSH
 453: EMPTY
 454: LIST
 455: LIST
 456: LIST
 457: LIST
 458: PUSH
 459: LD_OWVAR 67
 463: ARRAY
 464: PUSH
 465: LD_INT 1
 467: PUSH
 468: LD_INT 1
 470: PUSH
 471: LD_INT 2
 473: PUSH
 474: LD_INT 3
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: LIST
 482: PUSH
 483: LD_OWVAR 67
 487: ARRAY
 488: PUSH
 489: LD_INT 1
 491: PUSH
 492: LD_INT 1
 494: PUSH
 495: LD_INT 1
 497: PUSH
 498: LD_INT 3
 500: PUSH
 501: EMPTY
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: PUSH
 507: LD_OWVAR 67
 511: ARRAY
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: ST_TO_ADDR
// case x of 0 .. 300 :
 526: LD_VAR 0 1
 530: PUSH
 531: LD_INT 0
 533: DOUBLE
 534: GREATEREQUAL
 535: IFFALSE 543
 537: LD_INT 300
 539: DOUBLE
 540: LESSEQUAL
 541: IFTRUE 545
 543: GO 548
 545: POP
// ; 301 .. 700 :
 546: GO 566
 548: LD_INT 301
 550: DOUBLE
 551: GREATEREQUAL
 552: IFFALSE 560
 554: LD_INT 700
 556: DOUBLE
 557: LESSEQUAL
 558: IFTRUE 562
 560: GO 565
 562: POP
// ; end ;
 563: GO 566
 565: POP
// display_strings := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 566: LD_ADDR_OWVAR 47
 570: PUSH
 571: LD_INT 21
 573: PUSH
 574: LD_INT 2
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: PUSH
 581: LD_INT 58
 583: PUSH
 584: EMPTY
 585: LIST
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: PPUSH
 591: CALL_OW 69
 595: ST_TO_ADDR
// PrepareAmericanConvoy ( amConvoyGroups [ 1 ] [ 1 ] , amConvoyGroups [ 1 ] [ 2 ] , amConvoyGroups [ 1 ] [ 3 ] , amConvoyGroups [ 1 ] [ 4 ] , amConvoyGroups [ 1 ] [ 5 ] , area11 ) ;
 596: LD_VAR 0 2
 600: PUSH
 601: LD_INT 1
 603: ARRAY
 604: PUSH
 605: LD_INT 1
 607: ARRAY
 608: PPUSH
 609: LD_VAR 0 2
 613: PUSH
 614: LD_INT 1
 616: ARRAY
 617: PUSH
 618: LD_INT 2
 620: ARRAY
 621: PPUSH
 622: LD_VAR 0 2
 626: PUSH
 627: LD_INT 1
 629: ARRAY
 630: PUSH
 631: LD_INT 3
 633: ARRAY
 634: PPUSH
 635: LD_VAR 0 2
 639: PUSH
 640: LD_INT 1
 642: ARRAY
 643: PUSH
 644: LD_INT 4
 646: ARRAY
 647: PPUSH
 648: LD_VAR 0 2
 652: PUSH
 653: LD_INT 1
 655: ARRAY
 656: PUSH
 657: LD_INT 5
 659: ARRAY
 660: PPUSH
 661: LD_INT 1
 663: PPUSH
 664: CALL 671 0 6
// end ;
 668: PPOPN 2
 670: END
// export function PrepareAmericanConvoy ( soldiersAmount , engsAmount , mechsAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road , sols , engs , mechs , scis , enemySkillLevel , amConvoyTroops ; begin
 671: LD_INT 0
 673: PPUSH
 674: PPUSH
 675: PPUSH
 676: PPUSH
 677: PPUSH
 678: PPUSH
 679: PPUSH
 680: PPUSH
 681: PPUSH
 682: PPUSH
 683: PPUSH
// enemySkilllevel := 2 ;
 684: LD_ADDR_VAR 0 16
 688: PUSH
 689: LD_INT 2
 691: ST_TO_ADDR
// uc_side := 1 ;
 692: LD_ADDR_OWVAR 20
 696: PUSH
 697: LD_INT 1
 699: ST_TO_ADDR
// uc_nation := 1 ;
 700: LD_ADDR_OWVAR 21
 704: PUSH
 705: LD_INT 1
 707: ST_TO_ADDR
// hc_name :=  ;
 708: LD_ADDR_OWVAR 26
 712: PUSH
 713: LD_STRING 
 715: ST_TO_ADDR
// hc_gallery :=  ;
 716: LD_ADDR_OWVAR 33
 720: PUSH
 721: LD_STRING 
 723: ST_TO_ADDR
// for i := 1 to soldiersAmount do
 724: LD_ADDR_VAR 0 8
 728: PUSH
 729: DOUBLE
 730: LD_INT 1
 732: DEC
 733: ST_TO_ADDR
 734: LD_VAR 0 1
 738: PUSH
 739: FOR_TO
 740: IFFALSE 815
// begin PrepareSoldier ( false , enemySkillLevel ) ;
 742: LD_INT 0
 744: PPUSH
 745: LD_VAR 0 16
 749: PPUSH
 750: CALL_OW 381
// un = CreateHuman ;
 754: LD_ADDR_VAR 0 9
 758: PUSH
 759: CALL_OW 44
 763: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 764: LD_ADDR_VAR 0 17
 768: PUSH
 769: LD_VAR 0 17
 773: PUSH
 774: LD_VAR 0 9
 778: ADD
 779: ST_TO_ADDR
// sols := sols ^ un ;
 780: LD_ADDR_VAR 0 12
 784: PUSH
 785: LD_VAR 0 12
 789: PUSH
 790: LD_VAR 0 9
 794: ADD
 795: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 796: LD_VAR 0 9
 800: PPUSH
 801: LD_VAR 0 6
 805: PPUSH
 806: LD_INT 0
 808: PPUSH
 809: CALL_OW 49
// end ;
 813: GO 739
 815: POP
 816: POP
// for i := 1 to engsAmount do
 817: LD_ADDR_VAR 0 8
 821: PUSH
 822: DOUBLE
 823: LD_INT 1
 825: DEC
 826: ST_TO_ADDR
 827: LD_VAR 0 2
 831: PUSH
 832: FOR_TO
 833: IFFALSE 908
// begin PrepareEngineer ( false , enemySkillLevel ) ;
 835: LD_INT 0
 837: PPUSH
 838: LD_VAR 0 16
 842: PPUSH
 843: CALL_OW 382
// un = CreateHuman ;
 847: LD_ADDR_VAR 0 9
 851: PUSH
 852: CALL_OW 44
 856: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 857: LD_ADDR_VAR 0 17
 861: PUSH
 862: LD_VAR 0 17
 866: PUSH
 867: LD_VAR 0 9
 871: ADD
 872: ST_TO_ADDR
// engs := engs ^ un ;
 873: LD_ADDR_VAR 0 13
 877: PUSH
 878: LD_VAR 0 13
 882: PUSH
 883: LD_VAR 0 9
 887: ADD
 888: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 889: LD_VAR 0 9
 893: PPUSH
 894: LD_VAR 0 6
 898: PPUSH
 899: LD_INT 0
 901: PPUSH
 902: CALL_OW 49
// end ;
 906: GO 832
 908: POP
 909: POP
// for i := 1 to mechsAmount do
 910: LD_ADDR_VAR 0 8
 914: PUSH
 915: DOUBLE
 916: LD_INT 1
 918: DEC
 919: ST_TO_ADDR
 920: LD_VAR 0 3
 924: PUSH
 925: FOR_TO
 926: IFFALSE 1001
// begin PrepareEngineer ( false , enemySkillLevel ) ;
 928: LD_INT 0
 930: PPUSH
 931: LD_VAR 0 16
 935: PPUSH
 936: CALL_OW 382
// un = CreateHuman ;
 940: LD_ADDR_VAR 0 9
 944: PUSH
 945: CALL_OW 44
 949: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 950: LD_ADDR_VAR 0 17
 954: PUSH
 955: LD_VAR 0 17
 959: PUSH
 960: LD_VAR 0 9
 964: ADD
 965: ST_TO_ADDR
// engs := engs ^ un ;
 966: LD_ADDR_VAR 0 13
 970: PUSH
 971: LD_VAR 0 13
 975: PUSH
 976: LD_VAR 0 9
 980: ADD
 981: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 982: LD_VAR 0 9
 986: PPUSH
 987: LD_VAR 0 6
 991: PPUSH
 992: LD_INT 0
 994: PPUSH
 995: CALL_OW 49
// end ;
 999: GO 925
1001: POP
1002: POP
// for i := 1 to scientistsAmount do
1003: LD_ADDR_VAR 0 8
1007: PUSH
1008: DOUBLE
1009: LD_INT 1
1011: DEC
1012: ST_TO_ADDR
1013: LD_VAR 0 4
1017: PUSH
1018: FOR_TO
1019: IFFALSE 1094
// begin PrepareMechanic ( false , enemySkillLevel ) ;
1021: LD_INT 0
1023: PPUSH
1024: LD_VAR 0 16
1028: PPUSH
1029: CALL_OW 383
// un = CreateHuman ;
1033: LD_ADDR_VAR 0 9
1037: PUSH
1038: CALL_OW 44
1042: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
1043: LD_ADDR_VAR 0 17
1047: PUSH
1048: LD_VAR 0 17
1052: PUSH
1053: LD_VAR 0 9
1057: ADD
1058: ST_TO_ADDR
// mechs := mechs ^ un ;
1059: LD_ADDR_VAR 0 14
1063: PUSH
1064: LD_VAR 0 14
1068: PUSH
1069: LD_VAR 0 9
1073: ADD
1074: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1075: LD_VAR 0 9
1079: PPUSH
1080: LD_VAR 0 6
1084: PPUSH
1085: LD_INT 0
1087: PPUSH
1088: CALL_OW 49
// end ;
1092: GO 1018
1094: POP
1095: POP
// for i := 1 to vehiclesAmount do
1096: LD_ADDR_VAR 0 8
1100: PUSH
1101: DOUBLE
1102: LD_INT 1
1104: DEC
1105: ST_TO_ADDR
1106: LD_VAR 0 5
1110: PUSH
1111: FOR_TO
1112: IFFALSE 1278
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
1114: LD_ADDR_OWVAR 40
1118: PUSH
1119: LD_INT 2
1121: PUSH
1122: LD_INT 4
1124: PUSH
1125: LD_INT 3
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: LIST
1132: PUSH
1133: LD_INT 1
1135: PPUSH
1136: LD_INT 3
1138: PPUSH
1139: CALL_OW 12
1143: ARRAY
1144: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1145: LD_ADDR_OWVAR 37
1149: PUSH
1150: LD_INT 3
1152: ST_TO_ADDR
// vc_control = control_manual ;
1153: LD_ADDR_OWVAR 38
1157: PUSH
1158: LD_INT 1
1160: ST_TO_ADDR
// vc_engine = engine_combustion ;
1161: LD_ADDR_OWVAR 39
1165: PUSH
1166: LD_INT 1
1168: ST_TO_ADDR
// veh = CreateVehicle ;
1169: LD_ADDR_VAR 0 10
1173: PUSH
1174: CALL_OW 45
1178: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ veh ;
1179: LD_ADDR_VAR 0 17
1183: PUSH
1184: LD_VAR 0 17
1188: PUSH
1189: LD_VAR 0 10
1193: ADD
1194: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
1195: LD_VAR 0 10
1199: PPUSH
1200: LD_VAR 0 6
1204: PPUSH
1205: LD_INT 0
1207: PPUSH
1208: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
1212: LD_INT 0
1214: PPUSH
1215: LD_VAR 0 16
1219: PPUSH
1220: CALL_OW 383
// un = CreateHuman ;
1224: LD_ADDR_VAR 0 9
1228: PUSH
1229: CALL_OW 44
1233: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ un ;
1234: LD_ADDR_VAR 0 17
1238: PUSH
1239: LD_VAR 0 17
1243: PUSH
1244: LD_VAR 0 9
1248: ADD
1249: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1250: LD_VAR 0 9
1254: PPUSH
1255: LD_VAR 0 10
1259: PPUSH
1260: CALL_OW 52
// SetFuel ( veh , 100 ) ;
1264: LD_VAR 0 10
1268: PPUSH
1269: LD_INT 100
1271: PPUSH
1272: CALL_OW 240
// end ;
1276: GO 1111
1278: POP
1279: POP
// end ; end_of_file
1280: LD_VAR 0 7
1284: RET
// every 0 0$1 do
1285: GO 1287
1287: DISABLE
// begin enable ;
1288: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1289: LD_STRING updateTimer(
1291: PUSH
1292: LD_OWVAR 1
1296: STR
1297: PUSH
1298: LD_STRING );
1300: STR
1301: PPUSH
1302: CALL_OW 559
// end ;
1306: END
// export function SOS_MapStart ( ) ; begin
1307: LD_INT 0
1309: PPUSH
// if streamModeActive then
1310: LD_EXP 1
1314: IFFALSE 1323
// DefineStreamItems ( true ) ;
1316: LD_INT 1
1318: PPUSH
1319: CALL 2977 0 1
// UpdateFactoryWaypoints ( ) ;
1323: CALL 15838 0 0
// UpdateWarehouseGatheringPoints ( ) ;
1327: CALL 16095 0 0
// end ;
1331: LD_VAR 0 1
1335: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
1336: LD_INT 0
1338: PPUSH
// if p2 = 100 then
1339: LD_VAR 0 2
1343: PUSH
1344: LD_INT 100
1346: EQUAL
1347: IFFALSE 2350
// begin if not StreamModeActive then
1349: LD_EXP 1
1353: NOT
1354: IFFALSE 1364
// StreamModeActive := true ;
1356: LD_ADDR_EXP 1
1360: PUSH
1361: LD_INT 1
1363: ST_TO_ADDR
// if p3 = 0 then
1364: LD_VAR 0 3
1368: PUSH
1369: LD_INT 0
1371: EQUAL
1372: IFFALSE 1378
// InitStreamMode ;
1374: CALL 2513 0 0
// if p3 = 1 then
1378: LD_VAR 0 3
1382: PUSH
1383: LD_INT 1
1385: EQUAL
1386: IFFALSE 1396
// sRocket := true ;
1388: LD_ADDR_EXP 6
1392: PUSH
1393: LD_INT 1
1395: ST_TO_ADDR
// if p3 = 2 then
1396: LD_VAR 0 3
1400: PUSH
1401: LD_INT 2
1403: EQUAL
1404: IFFALSE 1414
// sSpeed := true ;
1406: LD_ADDR_EXP 5
1410: PUSH
1411: LD_INT 1
1413: ST_TO_ADDR
// if p3 = 3 then
1414: LD_VAR 0 3
1418: PUSH
1419: LD_INT 3
1421: EQUAL
1422: IFFALSE 1432
// sEngine := true ;
1424: LD_ADDR_EXP 7
1428: PUSH
1429: LD_INT 1
1431: ST_TO_ADDR
// if p3 = 4 then
1432: LD_VAR 0 3
1436: PUSH
1437: LD_INT 4
1439: EQUAL
1440: IFFALSE 1450
// sSpec := true ;
1442: LD_ADDR_EXP 4
1446: PUSH
1447: LD_INT 1
1449: ST_TO_ADDR
// if p3 = 5 then
1450: LD_VAR 0 3
1454: PUSH
1455: LD_INT 5
1457: EQUAL
1458: IFFALSE 1468
// sLevel := true ;
1460: LD_ADDR_EXP 8
1464: PUSH
1465: LD_INT 1
1467: ST_TO_ADDR
// if p3 = 6 then
1468: LD_VAR 0 3
1472: PUSH
1473: LD_INT 6
1475: EQUAL
1476: IFFALSE 1486
// sArmoury := true ;
1478: LD_ADDR_EXP 9
1482: PUSH
1483: LD_INT 1
1485: ST_TO_ADDR
// if p3 = 7 then
1486: LD_VAR 0 3
1490: PUSH
1491: LD_INT 7
1493: EQUAL
1494: IFFALSE 1504
// sRadar := true ;
1496: LD_ADDR_EXP 10
1500: PUSH
1501: LD_INT 1
1503: ST_TO_ADDR
// if p3 = 8 then
1504: LD_VAR 0 3
1508: PUSH
1509: LD_INT 8
1511: EQUAL
1512: IFFALSE 1522
// sBunker := true ;
1514: LD_ADDR_EXP 11
1518: PUSH
1519: LD_INT 1
1521: ST_TO_ADDR
// if p3 = 9 then
1522: LD_VAR 0 3
1526: PUSH
1527: LD_INT 9
1529: EQUAL
1530: IFFALSE 1540
// sHack := true ;
1532: LD_ADDR_EXP 12
1536: PUSH
1537: LD_INT 1
1539: ST_TO_ADDR
// if p3 = 10 then
1540: LD_VAR 0 3
1544: PUSH
1545: LD_INT 10
1547: EQUAL
1548: IFFALSE 1558
// sFire := true ;
1550: LD_ADDR_EXP 13
1554: PUSH
1555: LD_INT 1
1557: ST_TO_ADDR
// if p3 = 11 then
1558: LD_VAR 0 3
1562: PUSH
1563: LD_INT 11
1565: EQUAL
1566: IFFALSE 1576
// sRefresh := true ;
1568: LD_ADDR_EXP 14
1572: PUSH
1573: LD_INT 1
1575: ST_TO_ADDR
// if p3 = 12 then
1576: LD_VAR 0 3
1580: PUSH
1581: LD_INT 12
1583: EQUAL
1584: IFFALSE 1594
// sExp := true ;
1586: LD_ADDR_EXP 15
1590: PUSH
1591: LD_INT 1
1593: ST_TO_ADDR
// if p3 = 13 then
1594: LD_VAR 0 3
1598: PUSH
1599: LD_INT 13
1601: EQUAL
1602: IFFALSE 1612
// sDepot := true ;
1604: LD_ADDR_EXP 16
1608: PUSH
1609: LD_INT 1
1611: ST_TO_ADDR
// if p3 = 14 then
1612: LD_VAR 0 3
1616: PUSH
1617: LD_INT 14
1619: EQUAL
1620: IFFALSE 1630
// sFlag := true ;
1622: LD_ADDR_EXP 17
1626: PUSH
1627: LD_INT 1
1629: ST_TO_ADDR
// if p3 = 15 then
1630: LD_VAR 0 3
1634: PUSH
1635: LD_INT 15
1637: EQUAL
1638: IFFALSE 1648
// sKamikadze := true ;
1640: LD_ADDR_EXP 25
1644: PUSH
1645: LD_INT 1
1647: ST_TO_ADDR
// if p3 = 16 then
1648: LD_VAR 0 3
1652: PUSH
1653: LD_INT 16
1655: EQUAL
1656: IFFALSE 1666
// sTroll := true ;
1658: LD_ADDR_EXP 26
1662: PUSH
1663: LD_INT 1
1665: ST_TO_ADDR
// if p3 = 17 then
1666: LD_VAR 0 3
1670: PUSH
1671: LD_INT 17
1673: EQUAL
1674: IFFALSE 1684
// sSlow := true ;
1676: LD_ADDR_EXP 27
1680: PUSH
1681: LD_INT 1
1683: ST_TO_ADDR
// if p3 = 18 then
1684: LD_VAR 0 3
1688: PUSH
1689: LD_INT 18
1691: EQUAL
1692: IFFALSE 1702
// sLack := true ;
1694: LD_ADDR_EXP 28
1698: PUSH
1699: LD_INT 1
1701: ST_TO_ADDR
// if p3 = 19 then
1702: LD_VAR 0 3
1706: PUSH
1707: LD_INT 19
1709: EQUAL
1710: IFFALSE 1720
// sTank := true ;
1712: LD_ADDR_EXP 30
1716: PUSH
1717: LD_INT 1
1719: ST_TO_ADDR
// if p3 = 20 then
1720: LD_VAR 0 3
1724: PUSH
1725: LD_INT 20
1727: EQUAL
1728: IFFALSE 1738
// sRemote := true ;
1730: LD_ADDR_EXP 31
1734: PUSH
1735: LD_INT 1
1737: ST_TO_ADDR
// if p3 = 21 then
1738: LD_VAR 0 3
1742: PUSH
1743: LD_INT 21
1745: EQUAL
1746: IFFALSE 1756
// sPowell := true ;
1748: LD_ADDR_EXP 32
1752: PUSH
1753: LD_INT 1
1755: ST_TO_ADDR
// if p3 = 22 then
1756: LD_VAR 0 3
1760: PUSH
1761: LD_INT 22
1763: EQUAL
1764: IFFALSE 1774
// sTeleport := true ;
1766: LD_ADDR_EXP 35
1770: PUSH
1771: LD_INT 1
1773: ST_TO_ADDR
// if p3 = 23 then
1774: LD_VAR 0 3
1778: PUSH
1779: LD_INT 23
1781: EQUAL
1782: IFFALSE 1792
// sOilTower := true ;
1784: LD_ADDR_EXP 37
1788: PUSH
1789: LD_INT 1
1791: ST_TO_ADDR
// if p3 = 24 then
1792: LD_VAR 0 3
1796: PUSH
1797: LD_INT 24
1799: EQUAL
1800: IFFALSE 1810
// sShovel := true ;
1802: LD_ADDR_EXP 38
1806: PUSH
1807: LD_INT 1
1809: ST_TO_ADDR
// if p3 = 25 then
1810: LD_VAR 0 3
1814: PUSH
1815: LD_INT 25
1817: EQUAL
1818: IFFALSE 1828
// sSheik := true ;
1820: LD_ADDR_EXP 39
1824: PUSH
1825: LD_INT 1
1827: ST_TO_ADDR
// if p3 = 26 then
1828: LD_VAR 0 3
1832: PUSH
1833: LD_INT 26
1835: EQUAL
1836: IFFALSE 1846
// sEarthquake := true ;
1838: LD_ADDR_EXP 41
1842: PUSH
1843: LD_INT 1
1845: ST_TO_ADDR
// if p3 = 27 then
1846: LD_VAR 0 3
1850: PUSH
1851: LD_INT 27
1853: EQUAL
1854: IFFALSE 1864
// sAI := true ;
1856: LD_ADDR_EXP 42
1860: PUSH
1861: LD_INT 1
1863: ST_TO_ADDR
// if p3 = 28 then
1864: LD_VAR 0 3
1868: PUSH
1869: LD_INT 28
1871: EQUAL
1872: IFFALSE 1882
// sCargo := true ;
1874: LD_ADDR_EXP 45
1878: PUSH
1879: LD_INT 1
1881: ST_TO_ADDR
// if p3 = 29 then
1882: LD_VAR 0 3
1886: PUSH
1887: LD_INT 29
1889: EQUAL
1890: IFFALSE 1900
// sDLaser := true ;
1892: LD_ADDR_EXP 46
1896: PUSH
1897: LD_INT 1
1899: ST_TO_ADDR
// if p3 = 30 then
1900: LD_VAR 0 3
1904: PUSH
1905: LD_INT 30
1907: EQUAL
1908: IFFALSE 1918
// sExchange := true ;
1910: LD_ADDR_EXP 47
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// if p3 = 31 then
1918: LD_VAR 0 3
1922: PUSH
1923: LD_INT 31
1925: EQUAL
1926: IFFALSE 1936
// sFac := true ;
1928: LD_ADDR_EXP 48
1932: PUSH
1933: LD_INT 1
1935: ST_TO_ADDR
// if p3 = 32 then
1936: LD_VAR 0 3
1940: PUSH
1941: LD_INT 32
1943: EQUAL
1944: IFFALSE 1954
// sPower := true ;
1946: LD_ADDR_EXP 49
1950: PUSH
1951: LD_INT 1
1953: ST_TO_ADDR
// if p3 = 33 then
1954: LD_VAR 0 3
1958: PUSH
1959: LD_INT 33
1961: EQUAL
1962: IFFALSE 1972
// sRandom := true ;
1964: LD_ADDR_EXP 50
1968: PUSH
1969: LD_INT 1
1971: ST_TO_ADDR
// if p3 = 34 then
1972: LD_VAR 0 3
1976: PUSH
1977: LD_INT 34
1979: EQUAL
1980: IFFALSE 1990
// sShield := true ;
1982: LD_ADDR_EXP 51
1986: PUSH
1987: LD_INT 1
1989: ST_TO_ADDR
// if p3 = 35 then
1990: LD_VAR 0 3
1994: PUSH
1995: LD_INT 35
1997: EQUAL
1998: IFFALSE 2008
// sTime := true ;
2000: LD_ADDR_EXP 52
2004: PUSH
2005: LD_INT 1
2007: ST_TO_ADDR
// if p3 = 36 then
2008: LD_VAR 0 3
2012: PUSH
2013: LD_INT 36
2015: EQUAL
2016: IFFALSE 2026
// sTools := true ;
2018: LD_ADDR_EXP 53
2022: PUSH
2023: LD_INT 1
2025: ST_TO_ADDR
// if p3 = 101 then
2026: LD_VAR 0 3
2030: PUSH
2031: LD_INT 101
2033: EQUAL
2034: IFFALSE 2044
// sSold := true ;
2036: LD_ADDR_EXP 18
2040: PUSH
2041: LD_INT 1
2043: ST_TO_ADDR
// if p3 = 102 then
2044: LD_VAR 0 3
2048: PUSH
2049: LD_INT 102
2051: EQUAL
2052: IFFALSE 2062
// sDiff := true ;
2054: LD_ADDR_EXP 19
2058: PUSH
2059: LD_INT 1
2061: ST_TO_ADDR
// if p3 = 103 then
2062: LD_VAR 0 3
2066: PUSH
2067: LD_INT 103
2069: EQUAL
2070: IFFALSE 2080
// sFog := true ;
2072: LD_ADDR_EXP 22
2076: PUSH
2077: LD_INT 1
2079: ST_TO_ADDR
// if p3 = 104 then
2080: LD_VAR 0 3
2084: PUSH
2085: LD_INT 104
2087: EQUAL
2088: IFFALSE 2098
// sReset := true ;
2090: LD_ADDR_EXP 23
2094: PUSH
2095: LD_INT 1
2097: ST_TO_ADDR
// if p3 = 105 then
2098: LD_VAR 0 3
2102: PUSH
2103: LD_INT 105
2105: EQUAL
2106: IFFALSE 2116
// sSun := true ;
2108: LD_ADDR_EXP 24
2112: PUSH
2113: LD_INT 1
2115: ST_TO_ADDR
// if p3 = 106 then
2116: LD_VAR 0 3
2120: PUSH
2121: LD_INT 106
2123: EQUAL
2124: IFFALSE 2134
// sTiger := true ;
2126: LD_ADDR_EXP 20
2130: PUSH
2131: LD_INT 1
2133: ST_TO_ADDR
// if p3 = 107 then
2134: LD_VAR 0 3
2138: PUSH
2139: LD_INT 107
2141: EQUAL
2142: IFFALSE 2152
// sBomb := true ;
2144: LD_ADDR_EXP 21
2148: PUSH
2149: LD_INT 1
2151: ST_TO_ADDR
// if p3 = 108 then
2152: LD_VAR 0 3
2156: PUSH
2157: LD_INT 108
2159: EQUAL
2160: IFFALSE 2170
// sWound := true ;
2162: LD_ADDR_EXP 29
2166: PUSH
2167: LD_INT 1
2169: ST_TO_ADDR
// if p3 = 109 then
2170: LD_VAR 0 3
2174: PUSH
2175: LD_INT 109
2177: EQUAL
2178: IFFALSE 2188
// sBetray := true ;
2180: LD_ADDR_EXP 33
2184: PUSH
2185: LD_INT 1
2187: ST_TO_ADDR
// if p3 = 110 then
2188: LD_VAR 0 3
2192: PUSH
2193: LD_INT 110
2195: EQUAL
2196: IFFALSE 2206
// sContamin := true ;
2198: LD_ADDR_EXP 34
2202: PUSH
2203: LD_INT 1
2205: ST_TO_ADDR
// if p3 = 111 then
2206: LD_VAR 0 3
2210: PUSH
2211: LD_INT 111
2213: EQUAL
2214: IFFALSE 2224
// sOil := true ;
2216: LD_ADDR_EXP 36
2220: PUSH
2221: LD_INT 1
2223: ST_TO_ADDR
// if p3 = 112 then
2224: LD_VAR 0 3
2228: PUSH
2229: LD_INT 112
2231: EQUAL
2232: IFFALSE 2242
// sStu := true ;
2234: LD_ADDR_EXP 40
2238: PUSH
2239: LD_INT 1
2241: ST_TO_ADDR
// if p3 = 113 then
2242: LD_VAR 0 3
2246: PUSH
2247: LD_INT 113
2249: EQUAL
2250: IFFALSE 2260
// sBazooka := true ;
2252: LD_ADDR_EXP 43
2256: PUSH
2257: LD_INT 1
2259: ST_TO_ADDR
// if p3 = 114 then
2260: LD_VAR 0 3
2264: PUSH
2265: LD_INT 114
2267: EQUAL
2268: IFFALSE 2278
// sMortar := true ;
2270: LD_ADDR_EXP 44
2274: PUSH
2275: LD_INT 1
2277: ST_TO_ADDR
// if p3 = 115 then
2278: LD_VAR 0 3
2282: PUSH
2283: LD_INT 115
2285: EQUAL
2286: IFFALSE 2296
// sRanger := true ;
2288: LD_ADDR_EXP 54
2292: PUSH
2293: LD_INT 1
2295: ST_TO_ADDR
// if p3 = 116 then
2296: LD_VAR 0 3
2300: PUSH
2301: LD_INT 116
2303: EQUAL
2304: IFFALSE 2314
// sComputer := true ;
2306: LD_ADDR_EXP 55
2310: PUSH
2311: LD_INT 1
2313: ST_TO_ADDR
// if p3 = 117 then
2314: LD_VAR 0 3
2318: PUSH
2319: LD_INT 117
2321: EQUAL
2322: IFFALSE 2332
// s30 := true ;
2324: LD_ADDR_EXP 56
2328: PUSH
2329: LD_INT 1
2331: ST_TO_ADDR
// if p3 = 118 then
2332: LD_VAR 0 3
2336: PUSH
2337: LD_INT 118
2339: EQUAL
2340: IFFALSE 2350
// s60 := true ;
2342: LD_ADDR_EXP 57
2346: PUSH
2347: LD_INT 1
2349: ST_TO_ADDR
// end ; if p2 = 101 then
2350: LD_VAR 0 2
2354: PUSH
2355: LD_INT 101
2357: EQUAL
2358: IFFALSE 2486
// begin case p3 of 1 :
2360: LD_VAR 0 3
2364: PUSH
2365: LD_INT 1
2367: DOUBLE
2368: EQUAL
2369: IFTRUE 2373
2371: GO 2380
2373: POP
// hHackUnlimitedResources ; 2 :
2374: CALL 14584 0 0
2378: GO 2486
2380: LD_INT 2
2382: DOUBLE
2383: EQUAL
2384: IFTRUE 2388
2386: GO 2395
2388: POP
// hHackSetLevel10 ; 3 :
2389: CALL 14717 0 0
2393: GO 2486
2395: LD_INT 3
2397: DOUBLE
2398: EQUAL
2399: IFTRUE 2403
2401: GO 2410
2403: POP
// hHackSetLevel10YourUnits ; 4 :
2404: CALL 14802 0 0
2408: GO 2486
2410: LD_INT 4
2412: DOUBLE
2413: EQUAL
2414: IFTRUE 2418
2416: GO 2425
2418: POP
// hHackInvincible ; 5 :
2419: CALL 15250 0 0
2423: GO 2486
2425: LD_INT 5
2427: DOUBLE
2428: EQUAL
2429: IFTRUE 2433
2431: GO 2440
2433: POP
// hHackInvisible ; 6 :
2434: CALL 15361 0 0
2438: GO 2486
2440: LD_INT 6
2442: DOUBLE
2443: EQUAL
2444: IFTRUE 2448
2446: GO 2455
2448: POP
// hHackChangeYourSide ; 7 :
2449: CALL 15418 0 0
2453: GO 2486
2455: LD_INT 7
2457: DOUBLE
2458: EQUAL
2459: IFTRUE 2463
2461: GO 2470
2463: POP
// hHackChangeUnitSide ; 8 :
2464: CALL 15460 0 0
2468: GO 2486
2470: LD_INT 8
2472: DOUBLE
2473: EQUAL
2474: IFTRUE 2478
2476: GO 2485
2478: POP
// hHackFog ; end ;
2479: CALL 15561 0 0
2483: GO 2486
2485: POP
// end ; end ;
2486: LD_VAR 0 7
2490: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
2491: GO 2493
2493: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
2494: LD_STRING initStreamRollete();
2496: PPUSH
2497: CALL_OW 559
// InitStreamMode ;
2501: CALL 2513 0 0
// DefineStreamItems ( false ) ;
2505: LD_INT 0
2507: PPUSH
2508: CALL 2977 0 1
// end ;
2512: END
// function InitStreamMode ; begin
2513: LD_INT 0
2515: PPUSH
// streamModeActive := false ;
2516: LD_ADDR_EXP 1
2520: PUSH
2521: LD_INT 0
2523: ST_TO_ADDR
// normalCounter := 36 ;
2524: LD_ADDR_EXP 2
2528: PUSH
2529: LD_INT 36
2531: ST_TO_ADDR
// hardcoreCounter := 18 ;
2532: LD_ADDR_EXP 3
2536: PUSH
2537: LD_INT 18
2539: ST_TO_ADDR
// sRocket := false ;
2540: LD_ADDR_EXP 6
2544: PUSH
2545: LD_INT 0
2547: ST_TO_ADDR
// sSpeed := false ;
2548: LD_ADDR_EXP 5
2552: PUSH
2553: LD_INT 0
2555: ST_TO_ADDR
// sEngine := false ;
2556: LD_ADDR_EXP 7
2560: PUSH
2561: LD_INT 0
2563: ST_TO_ADDR
// sSpec := false ;
2564: LD_ADDR_EXP 4
2568: PUSH
2569: LD_INT 0
2571: ST_TO_ADDR
// sLevel := false ;
2572: LD_ADDR_EXP 8
2576: PUSH
2577: LD_INT 0
2579: ST_TO_ADDR
// sArmoury := false ;
2580: LD_ADDR_EXP 9
2584: PUSH
2585: LD_INT 0
2587: ST_TO_ADDR
// sRadar := false ;
2588: LD_ADDR_EXP 10
2592: PUSH
2593: LD_INT 0
2595: ST_TO_ADDR
// sBunker := false ;
2596: LD_ADDR_EXP 11
2600: PUSH
2601: LD_INT 0
2603: ST_TO_ADDR
// sHack := false ;
2604: LD_ADDR_EXP 12
2608: PUSH
2609: LD_INT 0
2611: ST_TO_ADDR
// sFire := false ;
2612: LD_ADDR_EXP 13
2616: PUSH
2617: LD_INT 0
2619: ST_TO_ADDR
// sRefresh := false ;
2620: LD_ADDR_EXP 14
2624: PUSH
2625: LD_INT 0
2627: ST_TO_ADDR
// sExp := false ;
2628: LD_ADDR_EXP 15
2632: PUSH
2633: LD_INT 0
2635: ST_TO_ADDR
// sDepot := false ;
2636: LD_ADDR_EXP 16
2640: PUSH
2641: LD_INT 0
2643: ST_TO_ADDR
// sFlag := false ;
2644: LD_ADDR_EXP 17
2648: PUSH
2649: LD_INT 0
2651: ST_TO_ADDR
// sKamikadze := false ;
2652: LD_ADDR_EXP 25
2656: PUSH
2657: LD_INT 0
2659: ST_TO_ADDR
// sTroll := false ;
2660: LD_ADDR_EXP 26
2664: PUSH
2665: LD_INT 0
2667: ST_TO_ADDR
// sSlow := false ;
2668: LD_ADDR_EXP 27
2672: PUSH
2673: LD_INT 0
2675: ST_TO_ADDR
// sLack := false ;
2676: LD_ADDR_EXP 28
2680: PUSH
2681: LD_INT 0
2683: ST_TO_ADDR
// sTank := false ;
2684: LD_ADDR_EXP 30
2688: PUSH
2689: LD_INT 0
2691: ST_TO_ADDR
// sRemote := false ;
2692: LD_ADDR_EXP 31
2696: PUSH
2697: LD_INT 0
2699: ST_TO_ADDR
// sPowell := false ;
2700: LD_ADDR_EXP 32
2704: PUSH
2705: LD_INT 0
2707: ST_TO_ADDR
// sTeleport := false ;
2708: LD_ADDR_EXP 35
2712: PUSH
2713: LD_INT 0
2715: ST_TO_ADDR
// sOilTower := false ;
2716: LD_ADDR_EXP 37
2720: PUSH
2721: LD_INT 0
2723: ST_TO_ADDR
// sShovel := false ;
2724: LD_ADDR_EXP 38
2728: PUSH
2729: LD_INT 0
2731: ST_TO_ADDR
// sSheik := false ;
2732: LD_ADDR_EXP 39
2736: PUSH
2737: LD_INT 0
2739: ST_TO_ADDR
// sEarthquake := false ;
2740: LD_ADDR_EXP 41
2744: PUSH
2745: LD_INT 0
2747: ST_TO_ADDR
// sAI := false ;
2748: LD_ADDR_EXP 42
2752: PUSH
2753: LD_INT 0
2755: ST_TO_ADDR
// sCargo := false ;
2756: LD_ADDR_EXP 45
2760: PUSH
2761: LD_INT 0
2763: ST_TO_ADDR
// sDLaser := false ;
2764: LD_ADDR_EXP 46
2768: PUSH
2769: LD_INT 0
2771: ST_TO_ADDR
// sExchange := false ;
2772: LD_ADDR_EXP 47
2776: PUSH
2777: LD_INT 0
2779: ST_TO_ADDR
// sFac := false ;
2780: LD_ADDR_EXP 48
2784: PUSH
2785: LD_INT 0
2787: ST_TO_ADDR
// sPower := false ;
2788: LD_ADDR_EXP 49
2792: PUSH
2793: LD_INT 0
2795: ST_TO_ADDR
// sRandom := false ;
2796: LD_ADDR_EXP 50
2800: PUSH
2801: LD_INT 0
2803: ST_TO_ADDR
// sShield := false ;
2804: LD_ADDR_EXP 51
2808: PUSH
2809: LD_INT 0
2811: ST_TO_ADDR
// sTime := false ;
2812: LD_ADDR_EXP 52
2816: PUSH
2817: LD_INT 0
2819: ST_TO_ADDR
// sTools := false ;
2820: LD_ADDR_EXP 53
2824: PUSH
2825: LD_INT 0
2827: ST_TO_ADDR
// sSold := false ;
2828: LD_ADDR_EXP 18
2832: PUSH
2833: LD_INT 0
2835: ST_TO_ADDR
// sDiff := false ;
2836: LD_ADDR_EXP 19
2840: PUSH
2841: LD_INT 0
2843: ST_TO_ADDR
// sFog := false ;
2844: LD_ADDR_EXP 22
2848: PUSH
2849: LD_INT 0
2851: ST_TO_ADDR
// sReset := false ;
2852: LD_ADDR_EXP 23
2856: PUSH
2857: LD_INT 0
2859: ST_TO_ADDR
// sSun := false ;
2860: LD_ADDR_EXP 24
2864: PUSH
2865: LD_INT 0
2867: ST_TO_ADDR
// sTiger := false ;
2868: LD_ADDR_EXP 20
2872: PUSH
2873: LD_INT 0
2875: ST_TO_ADDR
// sBomb := false ;
2876: LD_ADDR_EXP 21
2880: PUSH
2881: LD_INT 0
2883: ST_TO_ADDR
// sWound := false ;
2884: LD_ADDR_EXP 29
2888: PUSH
2889: LD_INT 0
2891: ST_TO_ADDR
// sBetray := false ;
2892: LD_ADDR_EXP 33
2896: PUSH
2897: LD_INT 0
2899: ST_TO_ADDR
// sContamin := false ;
2900: LD_ADDR_EXP 34
2904: PUSH
2905: LD_INT 0
2907: ST_TO_ADDR
// sOil := false ;
2908: LD_ADDR_EXP 36
2912: PUSH
2913: LD_INT 0
2915: ST_TO_ADDR
// sStu := false ;
2916: LD_ADDR_EXP 40
2920: PUSH
2921: LD_INT 0
2923: ST_TO_ADDR
// sBazooka := false ;
2924: LD_ADDR_EXP 43
2928: PUSH
2929: LD_INT 0
2931: ST_TO_ADDR
// sMortar := false ;
2932: LD_ADDR_EXP 44
2936: PUSH
2937: LD_INT 0
2939: ST_TO_ADDR
// sRanger := false ;
2940: LD_ADDR_EXP 54
2944: PUSH
2945: LD_INT 0
2947: ST_TO_ADDR
// sComputer := false ;
2948: LD_ADDR_EXP 55
2952: PUSH
2953: LD_INT 0
2955: ST_TO_ADDR
// s30 := false ;
2956: LD_ADDR_EXP 56
2960: PUSH
2961: LD_INT 0
2963: ST_TO_ADDR
// s60 := false ;
2964: LD_ADDR_EXP 57
2968: PUSH
2969: LD_INT 0
2971: ST_TO_ADDR
// end ;
2972: LD_VAR 0 1
2976: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
2977: LD_INT 0
2979: PPUSH
2980: PPUSH
2981: PPUSH
2982: PPUSH
2983: PPUSH
2984: PPUSH
2985: PPUSH
// result := [ ] ;
2986: LD_ADDR_VAR 0 2
2990: PUSH
2991: EMPTY
2992: ST_TO_ADDR
// if campaign_id = 1 then
2993: LD_OWVAR 69
2997: PUSH
2998: LD_INT 1
3000: EQUAL
3001: IFFALSE 6167
// begin case mission_number of 1 :
3003: LD_OWVAR 70
3007: PUSH
3008: LD_INT 1
3010: DOUBLE
3011: EQUAL
3012: IFTRUE 3016
3014: GO 3092
3016: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3017: LD_ADDR_VAR 0 2
3021: PUSH
3022: LD_INT 2
3024: PUSH
3025: LD_INT 4
3027: PUSH
3028: LD_INT 11
3030: PUSH
3031: LD_INT 12
3033: PUSH
3034: LD_INT 15
3036: PUSH
3037: LD_INT 16
3039: PUSH
3040: LD_INT 22
3042: PUSH
3043: LD_INT 23
3045: PUSH
3046: LD_INT 26
3048: PUSH
3049: EMPTY
3050: LIST
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: LIST
3056: LIST
3057: LIST
3058: LIST
3059: PUSH
3060: LD_INT 101
3062: PUSH
3063: LD_INT 102
3065: PUSH
3066: LD_INT 106
3068: PUSH
3069: LD_INT 116
3071: PUSH
3072: LD_INT 117
3074: PUSH
3075: LD_INT 118
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: LIST
3082: LIST
3083: LIST
3084: LIST
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: ST_TO_ADDR
3090: GO 6165
3092: LD_INT 2
3094: DOUBLE
3095: EQUAL
3096: IFTRUE 3100
3098: GO 3184
3100: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3101: LD_ADDR_VAR 0 2
3105: PUSH
3106: LD_INT 2
3108: PUSH
3109: LD_INT 4
3111: PUSH
3112: LD_INT 11
3114: PUSH
3115: LD_INT 12
3117: PUSH
3118: LD_INT 15
3120: PUSH
3121: LD_INT 16
3123: PUSH
3124: LD_INT 22
3126: PUSH
3127: LD_INT 23
3129: PUSH
3130: LD_INT 26
3132: PUSH
3133: EMPTY
3134: LIST
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: PUSH
3144: LD_INT 101
3146: PUSH
3147: LD_INT 102
3149: PUSH
3150: LD_INT 105
3152: PUSH
3153: LD_INT 106
3155: PUSH
3156: LD_INT 108
3158: PUSH
3159: LD_INT 116
3161: PUSH
3162: LD_INT 117
3164: PUSH
3165: LD_INT 118
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: ST_TO_ADDR
3182: GO 6165
3184: LD_INT 3
3186: DOUBLE
3187: EQUAL
3188: IFTRUE 3192
3190: GO 3280
3192: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3193: LD_ADDR_VAR 0 2
3197: PUSH
3198: LD_INT 2
3200: PUSH
3201: LD_INT 4
3203: PUSH
3204: LD_INT 5
3206: PUSH
3207: LD_INT 11
3209: PUSH
3210: LD_INT 12
3212: PUSH
3213: LD_INT 15
3215: PUSH
3216: LD_INT 16
3218: PUSH
3219: LD_INT 22
3221: PUSH
3222: LD_INT 26
3224: PUSH
3225: LD_INT 36
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: LIST
3232: LIST
3233: LIST
3234: LIST
3235: LIST
3236: LIST
3237: LIST
3238: LIST
3239: PUSH
3240: LD_INT 101
3242: PUSH
3243: LD_INT 102
3245: PUSH
3246: LD_INT 105
3248: PUSH
3249: LD_INT 106
3251: PUSH
3252: LD_INT 108
3254: PUSH
3255: LD_INT 116
3257: PUSH
3258: LD_INT 117
3260: PUSH
3261: LD_INT 118
3263: PUSH
3264: EMPTY
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: ST_TO_ADDR
3278: GO 6165
3280: LD_INT 4
3282: DOUBLE
3283: EQUAL
3284: IFTRUE 3288
3286: GO 3384
3288: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
3289: LD_ADDR_VAR 0 2
3293: PUSH
3294: LD_INT 2
3296: PUSH
3297: LD_INT 4
3299: PUSH
3300: LD_INT 5
3302: PUSH
3303: LD_INT 8
3305: PUSH
3306: LD_INT 11
3308: PUSH
3309: LD_INT 12
3311: PUSH
3312: LD_INT 15
3314: PUSH
3315: LD_INT 16
3317: PUSH
3318: LD_INT 22
3320: PUSH
3321: LD_INT 23
3323: PUSH
3324: LD_INT 26
3326: PUSH
3327: LD_INT 36
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: LIST
3334: LIST
3335: LIST
3336: LIST
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: LIST
3343: PUSH
3344: LD_INT 101
3346: PUSH
3347: LD_INT 102
3349: PUSH
3350: LD_INT 105
3352: PUSH
3353: LD_INT 106
3355: PUSH
3356: LD_INT 108
3358: PUSH
3359: LD_INT 116
3361: PUSH
3362: LD_INT 117
3364: PUSH
3365: LD_INT 118
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: LIST
3372: LIST
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: ST_TO_ADDR
3382: GO 6165
3384: LD_INT 5
3386: DOUBLE
3387: EQUAL
3388: IFTRUE 3392
3390: GO 3504
3392: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
3393: LD_ADDR_VAR 0 2
3397: PUSH
3398: LD_INT 2
3400: PUSH
3401: LD_INT 4
3403: PUSH
3404: LD_INT 5
3406: PUSH
3407: LD_INT 6
3409: PUSH
3410: LD_INT 8
3412: PUSH
3413: LD_INT 11
3415: PUSH
3416: LD_INT 12
3418: PUSH
3419: LD_INT 15
3421: PUSH
3422: LD_INT 16
3424: PUSH
3425: LD_INT 22
3427: PUSH
3428: LD_INT 23
3430: PUSH
3431: LD_INT 25
3433: PUSH
3434: LD_INT 26
3436: PUSH
3437: LD_INT 36
3439: PUSH
3440: EMPTY
3441: LIST
3442: LIST
3443: LIST
3444: LIST
3445: LIST
3446: LIST
3447: LIST
3448: LIST
3449: LIST
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: PUSH
3456: LD_INT 101
3458: PUSH
3459: LD_INT 102
3461: PUSH
3462: LD_INT 105
3464: PUSH
3465: LD_INT 106
3467: PUSH
3468: LD_INT 108
3470: PUSH
3471: LD_INT 109
3473: PUSH
3474: LD_INT 112
3476: PUSH
3477: LD_INT 116
3479: PUSH
3480: LD_INT 117
3482: PUSH
3483: LD_INT 118
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: LIST
3490: LIST
3491: LIST
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: ST_TO_ADDR
3502: GO 6165
3504: LD_INT 6
3506: DOUBLE
3507: EQUAL
3508: IFTRUE 3512
3510: GO 3644
3512: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
3513: LD_ADDR_VAR 0 2
3517: PUSH
3518: LD_INT 2
3520: PUSH
3521: LD_INT 4
3523: PUSH
3524: LD_INT 5
3526: PUSH
3527: LD_INT 6
3529: PUSH
3530: LD_INT 8
3532: PUSH
3533: LD_INT 11
3535: PUSH
3536: LD_INT 12
3538: PUSH
3539: LD_INT 15
3541: PUSH
3542: LD_INT 16
3544: PUSH
3545: LD_INT 20
3547: PUSH
3548: LD_INT 21
3550: PUSH
3551: LD_INT 22
3553: PUSH
3554: LD_INT 23
3556: PUSH
3557: LD_INT 25
3559: PUSH
3560: LD_INT 26
3562: PUSH
3563: LD_INT 30
3565: PUSH
3566: LD_INT 31
3568: PUSH
3569: LD_INT 32
3571: PUSH
3572: LD_INT 36
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: PUSH
3596: LD_INT 101
3598: PUSH
3599: LD_INT 102
3601: PUSH
3602: LD_INT 105
3604: PUSH
3605: LD_INT 106
3607: PUSH
3608: LD_INT 108
3610: PUSH
3611: LD_INT 109
3613: PUSH
3614: LD_INT 112
3616: PUSH
3617: LD_INT 116
3619: PUSH
3620: LD_INT 117
3622: PUSH
3623: LD_INT 118
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: PUSH
3638: EMPTY
3639: LIST
3640: LIST
3641: ST_TO_ADDR
3642: GO 6165
3644: LD_INT 7
3646: DOUBLE
3647: EQUAL
3648: IFTRUE 3652
3650: GO 3764
3652: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
3653: LD_ADDR_VAR 0 2
3657: PUSH
3658: LD_INT 2
3660: PUSH
3661: LD_INT 4
3663: PUSH
3664: LD_INT 5
3666: PUSH
3667: LD_INT 7
3669: PUSH
3670: LD_INT 11
3672: PUSH
3673: LD_INT 12
3675: PUSH
3676: LD_INT 15
3678: PUSH
3679: LD_INT 16
3681: PUSH
3682: LD_INT 20
3684: PUSH
3685: LD_INT 21
3687: PUSH
3688: LD_INT 22
3690: PUSH
3691: LD_INT 23
3693: PUSH
3694: LD_INT 25
3696: PUSH
3697: LD_INT 26
3699: PUSH
3700: EMPTY
3701: LIST
3702: LIST
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: PUSH
3716: LD_INT 101
3718: PUSH
3719: LD_INT 102
3721: PUSH
3722: LD_INT 103
3724: PUSH
3725: LD_INT 105
3727: PUSH
3728: LD_INT 106
3730: PUSH
3731: LD_INT 108
3733: PUSH
3734: LD_INT 112
3736: PUSH
3737: LD_INT 116
3739: PUSH
3740: LD_INT 117
3742: PUSH
3743: LD_INT 118
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: LIST
3750: LIST
3751: LIST
3752: LIST
3753: LIST
3754: LIST
3755: LIST
3756: LIST
3757: PUSH
3758: EMPTY
3759: LIST
3760: LIST
3761: ST_TO_ADDR
3762: GO 6165
3764: LD_INT 8
3766: DOUBLE
3767: EQUAL
3768: IFTRUE 3772
3770: GO 3912
3772: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
3773: LD_ADDR_VAR 0 2
3777: PUSH
3778: LD_INT 2
3780: PUSH
3781: LD_INT 4
3783: PUSH
3784: LD_INT 5
3786: PUSH
3787: LD_INT 6
3789: PUSH
3790: LD_INT 7
3792: PUSH
3793: LD_INT 8
3795: PUSH
3796: LD_INT 11
3798: PUSH
3799: LD_INT 12
3801: PUSH
3802: LD_INT 15
3804: PUSH
3805: LD_INT 16
3807: PUSH
3808: LD_INT 20
3810: PUSH
3811: LD_INT 21
3813: PUSH
3814: LD_INT 22
3816: PUSH
3817: LD_INT 23
3819: PUSH
3820: LD_INT 25
3822: PUSH
3823: LD_INT 26
3825: PUSH
3826: LD_INT 30
3828: PUSH
3829: LD_INT 31
3831: PUSH
3832: LD_INT 32
3834: PUSH
3835: LD_INT 36
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: PUSH
3860: LD_INT 101
3862: PUSH
3863: LD_INT 102
3865: PUSH
3866: LD_INT 103
3868: PUSH
3869: LD_INT 105
3871: PUSH
3872: LD_INT 106
3874: PUSH
3875: LD_INT 108
3877: PUSH
3878: LD_INT 109
3880: PUSH
3881: LD_INT 112
3883: PUSH
3884: LD_INT 116
3886: PUSH
3887: LD_INT 117
3889: PUSH
3890: LD_INT 118
3892: PUSH
3893: EMPTY
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: ST_TO_ADDR
3910: GO 6165
3912: LD_INT 9
3914: DOUBLE
3915: EQUAL
3916: IFTRUE 3920
3918: GO 4068
3920: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
3921: LD_ADDR_VAR 0 2
3925: PUSH
3926: LD_INT 2
3928: PUSH
3929: LD_INT 4
3931: PUSH
3932: LD_INT 5
3934: PUSH
3935: LD_INT 6
3937: PUSH
3938: LD_INT 7
3940: PUSH
3941: LD_INT 8
3943: PUSH
3944: LD_INT 11
3946: PUSH
3947: LD_INT 12
3949: PUSH
3950: LD_INT 15
3952: PUSH
3953: LD_INT 16
3955: PUSH
3956: LD_INT 20
3958: PUSH
3959: LD_INT 21
3961: PUSH
3962: LD_INT 22
3964: PUSH
3965: LD_INT 23
3967: PUSH
3968: LD_INT 25
3970: PUSH
3971: LD_INT 26
3973: PUSH
3974: LD_INT 28
3976: PUSH
3977: LD_INT 30
3979: PUSH
3980: LD_INT 31
3982: PUSH
3983: LD_INT 32
3985: PUSH
3986: LD_INT 36
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: LIST
3993: LIST
3994: LIST
3995: LIST
3996: LIST
3997: LIST
3998: LIST
3999: LIST
4000: LIST
4001: LIST
4002: LIST
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: PUSH
4012: LD_INT 101
4014: PUSH
4015: LD_INT 102
4017: PUSH
4018: LD_INT 103
4020: PUSH
4021: LD_INT 105
4023: PUSH
4024: LD_INT 106
4026: PUSH
4027: LD_INT 108
4029: PUSH
4030: LD_INT 109
4032: PUSH
4033: LD_INT 112
4035: PUSH
4036: LD_INT 114
4038: PUSH
4039: LD_INT 116
4041: PUSH
4042: LD_INT 117
4044: PUSH
4045: LD_INT 118
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: ST_TO_ADDR
4066: GO 6165
4068: LD_INT 10
4070: DOUBLE
4071: EQUAL
4072: IFTRUE 4076
4074: GO 4272
4076: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4077: LD_ADDR_VAR 0 2
4081: PUSH
4082: LD_INT 2
4084: PUSH
4085: LD_INT 4
4087: PUSH
4088: LD_INT 5
4090: PUSH
4091: LD_INT 6
4093: PUSH
4094: LD_INT 7
4096: PUSH
4097: LD_INT 8
4099: PUSH
4100: LD_INT 9
4102: PUSH
4103: LD_INT 10
4105: PUSH
4106: LD_INT 11
4108: PUSH
4109: LD_INT 12
4111: PUSH
4112: LD_INT 13
4114: PUSH
4115: LD_INT 14
4117: PUSH
4118: LD_INT 15
4120: PUSH
4121: LD_INT 16
4123: PUSH
4124: LD_INT 17
4126: PUSH
4127: LD_INT 18
4129: PUSH
4130: LD_INT 19
4132: PUSH
4133: LD_INT 20
4135: PUSH
4136: LD_INT 21
4138: PUSH
4139: LD_INT 22
4141: PUSH
4142: LD_INT 23
4144: PUSH
4145: LD_INT 24
4147: PUSH
4148: LD_INT 25
4150: PUSH
4151: LD_INT 26
4153: PUSH
4154: LD_INT 28
4156: PUSH
4157: LD_INT 30
4159: PUSH
4160: LD_INT 31
4162: PUSH
4163: LD_INT 32
4165: PUSH
4166: LD_INT 36
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: LIST
4192: LIST
4193: LIST
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: PUSH
4200: LD_INT 101
4202: PUSH
4203: LD_INT 102
4205: PUSH
4206: LD_INT 103
4208: PUSH
4209: LD_INT 104
4211: PUSH
4212: LD_INT 105
4214: PUSH
4215: LD_INT 106
4217: PUSH
4218: LD_INT 107
4220: PUSH
4221: LD_INT 108
4223: PUSH
4224: LD_INT 109
4226: PUSH
4227: LD_INT 110
4229: PUSH
4230: LD_INT 111
4232: PUSH
4233: LD_INT 112
4235: PUSH
4236: LD_INT 114
4238: PUSH
4239: LD_INT 116
4241: PUSH
4242: LD_INT 117
4244: PUSH
4245: LD_INT 118
4247: PUSH
4248: EMPTY
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: LIST
4263: LIST
4264: LIST
4265: PUSH
4266: EMPTY
4267: LIST
4268: LIST
4269: ST_TO_ADDR
4270: GO 6165
4272: LD_INT 11
4274: DOUBLE
4275: EQUAL
4276: IFTRUE 4280
4278: GO 4484
4280: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4281: LD_ADDR_VAR 0 2
4285: PUSH
4286: LD_INT 2
4288: PUSH
4289: LD_INT 3
4291: PUSH
4292: LD_INT 4
4294: PUSH
4295: LD_INT 5
4297: PUSH
4298: LD_INT 6
4300: PUSH
4301: LD_INT 7
4303: PUSH
4304: LD_INT 8
4306: PUSH
4307: LD_INT 9
4309: PUSH
4310: LD_INT 10
4312: PUSH
4313: LD_INT 11
4315: PUSH
4316: LD_INT 12
4318: PUSH
4319: LD_INT 13
4321: PUSH
4322: LD_INT 14
4324: PUSH
4325: LD_INT 15
4327: PUSH
4328: LD_INT 16
4330: PUSH
4331: LD_INT 17
4333: PUSH
4334: LD_INT 18
4336: PUSH
4337: LD_INT 19
4339: PUSH
4340: LD_INT 20
4342: PUSH
4343: LD_INT 21
4345: PUSH
4346: LD_INT 22
4348: PUSH
4349: LD_INT 23
4351: PUSH
4352: LD_INT 24
4354: PUSH
4355: LD_INT 25
4357: PUSH
4358: LD_INT 26
4360: PUSH
4361: LD_INT 28
4363: PUSH
4364: LD_INT 30
4366: PUSH
4367: LD_INT 31
4369: PUSH
4370: LD_INT 32
4372: PUSH
4373: LD_INT 34
4375: PUSH
4376: LD_INT 36
4378: PUSH
4379: EMPTY
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: PUSH
4412: LD_INT 101
4414: PUSH
4415: LD_INT 102
4417: PUSH
4418: LD_INT 103
4420: PUSH
4421: LD_INT 104
4423: PUSH
4424: LD_INT 105
4426: PUSH
4427: LD_INT 106
4429: PUSH
4430: LD_INT 107
4432: PUSH
4433: LD_INT 108
4435: PUSH
4436: LD_INT 109
4438: PUSH
4439: LD_INT 110
4441: PUSH
4442: LD_INT 111
4444: PUSH
4445: LD_INT 112
4447: PUSH
4448: LD_INT 114
4450: PUSH
4451: LD_INT 116
4453: PUSH
4454: LD_INT 117
4456: PUSH
4457: LD_INT 118
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: ST_TO_ADDR
4482: GO 6165
4484: LD_INT 12
4486: DOUBLE
4487: EQUAL
4488: IFTRUE 4492
4490: GO 4712
4492: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
4493: LD_ADDR_VAR 0 2
4497: PUSH
4498: LD_INT 1
4500: PUSH
4501: LD_INT 2
4503: PUSH
4504: LD_INT 3
4506: PUSH
4507: LD_INT 4
4509: PUSH
4510: LD_INT 5
4512: PUSH
4513: LD_INT 6
4515: PUSH
4516: LD_INT 7
4518: PUSH
4519: LD_INT 8
4521: PUSH
4522: LD_INT 9
4524: PUSH
4525: LD_INT 10
4527: PUSH
4528: LD_INT 11
4530: PUSH
4531: LD_INT 12
4533: PUSH
4534: LD_INT 13
4536: PUSH
4537: LD_INT 14
4539: PUSH
4540: LD_INT 15
4542: PUSH
4543: LD_INT 16
4545: PUSH
4546: LD_INT 17
4548: PUSH
4549: LD_INT 18
4551: PUSH
4552: LD_INT 19
4554: PUSH
4555: LD_INT 20
4557: PUSH
4558: LD_INT 21
4560: PUSH
4561: LD_INT 22
4563: PUSH
4564: LD_INT 23
4566: PUSH
4567: LD_INT 24
4569: PUSH
4570: LD_INT 25
4572: PUSH
4573: LD_INT 26
4575: PUSH
4576: LD_INT 27
4578: PUSH
4579: LD_INT 28
4581: PUSH
4582: LD_INT 30
4584: PUSH
4585: LD_INT 31
4587: PUSH
4588: LD_INT 32
4590: PUSH
4591: LD_INT 33
4593: PUSH
4594: LD_INT 34
4596: PUSH
4597: LD_INT 36
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: PUSH
4636: LD_INT 101
4638: PUSH
4639: LD_INT 102
4641: PUSH
4642: LD_INT 103
4644: PUSH
4645: LD_INT 104
4647: PUSH
4648: LD_INT 105
4650: PUSH
4651: LD_INT 106
4653: PUSH
4654: LD_INT 107
4656: PUSH
4657: LD_INT 108
4659: PUSH
4660: LD_INT 109
4662: PUSH
4663: LD_INT 110
4665: PUSH
4666: LD_INT 111
4668: PUSH
4669: LD_INT 112
4671: PUSH
4672: LD_INT 113
4674: PUSH
4675: LD_INT 114
4677: PUSH
4678: LD_INT 116
4680: PUSH
4681: LD_INT 117
4683: PUSH
4684: LD_INT 118
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: ST_TO_ADDR
4710: GO 6165
4712: LD_INT 13
4714: DOUBLE
4715: EQUAL
4716: IFTRUE 4720
4718: GO 4928
4720: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
4721: LD_ADDR_VAR 0 2
4725: PUSH
4726: LD_INT 1
4728: PUSH
4729: LD_INT 2
4731: PUSH
4732: LD_INT 3
4734: PUSH
4735: LD_INT 4
4737: PUSH
4738: LD_INT 5
4740: PUSH
4741: LD_INT 8
4743: PUSH
4744: LD_INT 9
4746: PUSH
4747: LD_INT 10
4749: PUSH
4750: LD_INT 11
4752: PUSH
4753: LD_INT 12
4755: PUSH
4756: LD_INT 14
4758: PUSH
4759: LD_INT 15
4761: PUSH
4762: LD_INT 16
4764: PUSH
4765: LD_INT 17
4767: PUSH
4768: LD_INT 18
4770: PUSH
4771: LD_INT 19
4773: PUSH
4774: LD_INT 20
4776: PUSH
4777: LD_INT 21
4779: PUSH
4780: LD_INT 22
4782: PUSH
4783: LD_INT 23
4785: PUSH
4786: LD_INT 24
4788: PUSH
4789: LD_INT 25
4791: PUSH
4792: LD_INT 26
4794: PUSH
4795: LD_INT 27
4797: PUSH
4798: LD_INT 28
4800: PUSH
4801: LD_INT 30
4803: PUSH
4804: LD_INT 31
4806: PUSH
4807: LD_INT 32
4809: PUSH
4810: LD_INT 33
4812: PUSH
4813: LD_INT 34
4815: PUSH
4816: LD_INT 36
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: PUSH
4852: LD_INT 101
4854: PUSH
4855: LD_INT 102
4857: PUSH
4858: LD_INT 103
4860: PUSH
4861: LD_INT 104
4863: PUSH
4864: LD_INT 105
4866: PUSH
4867: LD_INT 106
4869: PUSH
4870: LD_INT 107
4872: PUSH
4873: LD_INT 108
4875: PUSH
4876: LD_INT 109
4878: PUSH
4879: LD_INT 110
4881: PUSH
4882: LD_INT 111
4884: PUSH
4885: LD_INT 112
4887: PUSH
4888: LD_INT 113
4890: PUSH
4891: LD_INT 114
4893: PUSH
4894: LD_INT 116
4896: PUSH
4897: LD_INT 117
4899: PUSH
4900: LD_INT 118
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: ST_TO_ADDR
4926: GO 6165
4928: LD_INT 14
4930: DOUBLE
4931: EQUAL
4932: IFTRUE 4936
4934: GO 5160
4936: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
4937: LD_ADDR_VAR 0 2
4941: PUSH
4942: LD_INT 1
4944: PUSH
4945: LD_INT 2
4947: PUSH
4948: LD_INT 3
4950: PUSH
4951: LD_INT 4
4953: PUSH
4954: LD_INT 5
4956: PUSH
4957: LD_INT 6
4959: PUSH
4960: LD_INT 7
4962: PUSH
4963: LD_INT 8
4965: PUSH
4966: LD_INT 9
4968: PUSH
4969: LD_INT 10
4971: PUSH
4972: LD_INT 11
4974: PUSH
4975: LD_INT 12
4977: PUSH
4978: LD_INT 13
4980: PUSH
4981: LD_INT 14
4983: PUSH
4984: LD_INT 15
4986: PUSH
4987: LD_INT 16
4989: PUSH
4990: LD_INT 17
4992: PUSH
4993: LD_INT 18
4995: PUSH
4996: LD_INT 19
4998: PUSH
4999: LD_INT 20
5001: PUSH
5002: LD_INT 21
5004: PUSH
5005: LD_INT 22
5007: PUSH
5008: LD_INT 23
5010: PUSH
5011: LD_INT 24
5013: PUSH
5014: LD_INT 25
5016: PUSH
5017: LD_INT 26
5019: PUSH
5020: LD_INT 27
5022: PUSH
5023: LD_INT 28
5025: PUSH
5026: LD_INT 29
5028: PUSH
5029: LD_INT 30
5031: PUSH
5032: LD_INT 31
5034: PUSH
5035: LD_INT 32
5037: PUSH
5038: LD_INT 33
5040: PUSH
5041: LD_INT 34
5043: PUSH
5044: LD_INT 36
5046: PUSH
5047: EMPTY
5048: LIST
5049: LIST
5050: LIST
5051: LIST
5052: LIST
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: LIST
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: LIST
5081: LIST
5082: LIST
5083: PUSH
5084: LD_INT 101
5086: PUSH
5087: LD_INT 102
5089: PUSH
5090: LD_INT 103
5092: PUSH
5093: LD_INT 104
5095: PUSH
5096: LD_INT 105
5098: PUSH
5099: LD_INT 106
5101: PUSH
5102: LD_INT 107
5104: PUSH
5105: LD_INT 108
5107: PUSH
5108: LD_INT 109
5110: PUSH
5111: LD_INT 110
5113: PUSH
5114: LD_INT 111
5116: PUSH
5117: LD_INT 112
5119: PUSH
5120: LD_INT 113
5122: PUSH
5123: LD_INT 114
5125: PUSH
5126: LD_INT 116
5128: PUSH
5129: LD_INT 117
5131: PUSH
5132: LD_INT 118
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: LIST
5148: LIST
5149: LIST
5150: LIST
5151: LIST
5152: LIST
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: ST_TO_ADDR
5158: GO 6165
5160: LD_INT 15
5162: DOUBLE
5163: EQUAL
5164: IFTRUE 5168
5166: GO 5392
5168: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5169: LD_ADDR_VAR 0 2
5173: PUSH
5174: LD_INT 1
5176: PUSH
5177: LD_INT 2
5179: PUSH
5180: LD_INT 3
5182: PUSH
5183: LD_INT 4
5185: PUSH
5186: LD_INT 5
5188: PUSH
5189: LD_INT 6
5191: PUSH
5192: LD_INT 7
5194: PUSH
5195: LD_INT 8
5197: PUSH
5198: LD_INT 9
5200: PUSH
5201: LD_INT 10
5203: PUSH
5204: LD_INT 11
5206: PUSH
5207: LD_INT 12
5209: PUSH
5210: LD_INT 13
5212: PUSH
5213: LD_INT 14
5215: PUSH
5216: LD_INT 15
5218: PUSH
5219: LD_INT 16
5221: PUSH
5222: LD_INT 17
5224: PUSH
5225: LD_INT 18
5227: PUSH
5228: LD_INT 19
5230: PUSH
5231: LD_INT 20
5233: PUSH
5234: LD_INT 21
5236: PUSH
5237: LD_INT 22
5239: PUSH
5240: LD_INT 23
5242: PUSH
5243: LD_INT 24
5245: PUSH
5246: LD_INT 25
5248: PUSH
5249: LD_INT 26
5251: PUSH
5252: LD_INT 27
5254: PUSH
5255: LD_INT 28
5257: PUSH
5258: LD_INT 29
5260: PUSH
5261: LD_INT 30
5263: PUSH
5264: LD_INT 31
5266: PUSH
5267: LD_INT 32
5269: PUSH
5270: LD_INT 33
5272: PUSH
5273: LD_INT 34
5275: PUSH
5276: LD_INT 36
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: LIST
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: PUSH
5316: LD_INT 101
5318: PUSH
5319: LD_INT 102
5321: PUSH
5322: LD_INT 103
5324: PUSH
5325: LD_INT 104
5327: PUSH
5328: LD_INT 105
5330: PUSH
5331: LD_INT 106
5333: PUSH
5334: LD_INT 107
5336: PUSH
5337: LD_INT 108
5339: PUSH
5340: LD_INT 109
5342: PUSH
5343: LD_INT 110
5345: PUSH
5346: LD_INT 111
5348: PUSH
5349: LD_INT 112
5351: PUSH
5352: LD_INT 113
5354: PUSH
5355: LD_INT 114
5357: PUSH
5358: LD_INT 116
5360: PUSH
5361: LD_INT 117
5363: PUSH
5364: LD_INT 118
5366: PUSH
5367: EMPTY
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: LIST
5379: LIST
5380: LIST
5381: LIST
5382: LIST
5383: LIST
5384: LIST
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: ST_TO_ADDR
5390: GO 6165
5392: LD_INT 16
5394: DOUBLE
5395: EQUAL
5396: IFTRUE 5400
5398: GO 5536
5400: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
5401: LD_ADDR_VAR 0 2
5405: PUSH
5406: LD_INT 2
5408: PUSH
5409: LD_INT 4
5411: PUSH
5412: LD_INT 5
5414: PUSH
5415: LD_INT 7
5417: PUSH
5418: LD_INT 11
5420: PUSH
5421: LD_INT 12
5423: PUSH
5424: LD_INT 15
5426: PUSH
5427: LD_INT 16
5429: PUSH
5430: LD_INT 20
5432: PUSH
5433: LD_INT 21
5435: PUSH
5436: LD_INT 22
5438: PUSH
5439: LD_INT 23
5441: PUSH
5442: LD_INT 25
5444: PUSH
5445: LD_INT 26
5447: PUSH
5448: LD_INT 30
5450: PUSH
5451: LD_INT 31
5453: PUSH
5454: LD_INT 32
5456: PUSH
5457: LD_INT 33
5459: PUSH
5460: LD_INT 34
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: LIST
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: LIST
5473: LIST
5474: LIST
5475: LIST
5476: LIST
5477: LIST
5478: LIST
5479: LIST
5480: LIST
5481: LIST
5482: LIST
5483: PUSH
5484: LD_INT 101
5486: PUSH
5487: LD_INT 102
5489: PUSH
5490: LD_INT 103
5492: PUSH
5493: LD_INT 106
5495: PUSH
5496: LD_INT 108
5498: PUSH
5499: LD_INT 112
5501: PUSH
5502: LD_INT 113
5504: PUSH
5505: LD_INT 114
5507: PUSH
5508: LD_INT 116
5510: PUSH
5511: LD_INT 117
5513: PUSH
5514: LD_INT 118
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: ST_TO_ADDR
5534: GO 6165
5536: LD_INT 17
5538: DOUBLE
5539: EQUAL
5540: IFTRUE 5544
5542: GO 5768
5544: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
5545: LD_ADDR_VAR 0 2
5549: PUSH
5550: LD_INT 1
5552: PUSH
5553: LD_INT 2
5555: PUSH
5556: LD_INT 3
5558: PUSH
5559: LD_INT 4
5561: PUSH
5562: LD_INT 5
5564: PUSH
5565: LD_INT 6
5567: PUSH
5568: LD_INT 7
5570: PUSH
5571: LD_INT 8
5573: PUSH
5574: LD_INT 9
5576: PUSH
5577: LD_INT 10
5579: PUSH
5580: LD_INT 11
5582: PUSH
5583: LD_INT 12
5585: PUSH
5586: LD_INT 13
5588: PUSH
5589: LD_INT 14
5591: PUSH
5592: LD_INT 15
5594: PUSH
5595: LD_INT 16
5597: PUSH
5598: LD_INT 17
5600: PUSH
5601: LD_INT 18
5603: PUSH
5604: LD_INT 19
5606: PUSH
5607: LD_INT 20
5609: PUSH
5610: LD_INT 21
5612: PUSH
5613: LD_INT 22
5615: PUSH
5616: LD_INT 23
5618: PUSH
5619: LD_INT 24
5621: PUSH
5622: LD_INT 25
5624: PUSH
5625: LD_INT 26
5627: PUSH
5628: LD_INT 27
5630: PUSH
5631: LD_INT 28
5633: PUSH
5634: LD_INT 29
5636: PUSH
5637: LD_INT 30
5639: PUSH
5640: LD_INT 31
5642: PUSH
5643: LD_INT 32
5645: PUSH
5646: LD_INT 33
5648: PUSH
5649: LD_INT 34
5651: PUSH
5652: LD_INT 36
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: LIST
5661: LIST
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: LIST
5667: LIST
5668: LIST
5669: LIST
5670: LIST
5671: LIST
5672: LIST
5673: LIST
5674: LIST
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: LIST
5683: LIST
5684: LIST
5685: LIST
5686: LIST
5687: LIST
5688: LIST
5689: LIST
5690: LIST
5691: PUSH
5692: LD_INT 101
5694: PUSH
5695: LD_INT 102
5697: PUSH
5698: LD_INT 103
5700: PUSH
5701: LD_INT 104
5703: PUSH
5704: LD_INT 105
5706: PUSH
5707: LD_INT 106
5709: PUSH
5710: LD_INT 107
5712: PUSH
5713: LD_INT 108
5715: PUSH
5716: LD_INT 109
5718: PUSH
5719: LD_INT 110
5721: PUSH
5722: LD_INT 111
5724: PUSH
5725: LD_INT 112
5727: PUSH
5728: LD_INT 113
5730: PUSH
5731: LD_INT 114
5733: PUSH
5734: LD_INT 116
5736: PUSH
5737: LD_INT 117
5739: PUSH
5740: LD_INT 118
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: LIST
5755: LIST
5756: LIST
5757: LIST
5758: LIST
5759: LIST
5760: LIST
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: ST_TO_ADDR
5766: GO 6165
5768: LD_INT 18
5770: DOUBLE
5771: EQUAL
5772: IFTRUE 5776
5774: GO 5924
5776: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
5777: LD_ADDR_VAR 0 2
5781: PUSH
5782: LD_INT 2
5784: PUSH
5785: LD_INT 4
5787: PUSH
5788: LD_INT 5
5790: PUSH
5791: LD_INT 7
5793: PUSH
5794: LD_INT 11
5796: PUSH
5797: LD_INT 12
5799: PUSH
5800: LD_INT 15
5802: PUSH
5803: LD_INT 16
5805: PUSH
5806: LD_INT 20
5808: PUSH
5809: LD_INT 21
5811: PUSH
5812: LD_INT 22
5814: PUSH
5815: LD_INT 23
5817: PUSH
5818: LD_INT 25
5820: PUSH
5821: LD_INT 26
5823: PUSH
5824: LD_INT 30
5826: PUSH
5827: LD_INT 31
5829: PUSH
5830: LD_INT 32
5832: PUSH
5833: LD_INT 33
5835: PUSH
5836: LD_INT 34
5838: PUSH
5839: LD_INT 35
5841: PUSH
5842: LD_INT 36
5844: PUSH
5845: EMPTY
5846: LIST
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: PUSH
5868: LD_INT 101
5870: PUSH
5871: LD_INT 102
5873: PUSH
5874: LD_INT 103
5876: PUSH
5877: LD_INT 106
5879: PUSH
5880: LD_INT 108
5882: PUSH
5883: LD_INT 112
5885: PUSH
5886: LD_INT 113
5888: PUSH
5889: LD_INT 114
5891: PUSH
5892: LD_INT 115
5894: PUSH
5895: LD_INT 116
5897: PUSH
5898: LD_INT 117
5900: PUSH
5901: LD_INT 118
5903: PUSH
5904: EMPTY
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: ST_TO_ADDR
5922: GO 6165
5924: LD_INT 19
5926: DOUBLE
5927: EQUAL
5928: IFTRUE 5932
5930: GO 6164
5932: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
5933: LD_ADDR_VAR 0 2
5937: PUSH
5938: LD_INT 1
5940: PUSH
5941: LD_INT 2
5943: PUSH
5944: LD_INT 3
5946: PUSH
5947: LD_INT 4
5949: PUSH
5950: LD_INT 5
5952: PUSH
5953: LD_INT 6
5955: PUSH
5956: LD_INT 7
5958: PUSH
5959: LD_INT 8
5961: PUSH
5962: LD_INT 9
5964: PUSH
5965: LD_INT 10
5967: PUSH
5968: LD_INT 11
5970: PUSH
5971: LD_INT 12
5973: PUSH
5974: LD_INT 13
5976: PUSH
5977: LD_INT 14
5979: PUSH
5980: LD_INT 15
5982: PUSH
5983: LD_INT 16
5985: PUSH
5986: LD_INT 17
5988: PUSH
5989: LD_INT 18
5991: PUSH
5992: LD_INT 19
5994: PUSH
5995: LD_INT 20
5997: PUSH
5998: LD_INT 21
6000: PUSH
6001: LD_INT 22
6003: PUSH
6004: LD_INT 23
6006: PUSH
6007: LD_INT 24
6009: PUSH
6010: LD_INT 25
6012: PUSH
6013: LD_INT 26
6015: PUSH
6016: LD_INT 27
6018: PUSH
6019: LD_INT 28
6021: PUSH
6022: LD_INT 29
6024: PUSH
6025: LD_INT 30
6027: PUSH
6028: LD_INT 31
6030: PUSH
6031: LD_INT 32
6033: PUSH
6034: LD_INT 33
6036: PUSH
6037: LD_INT 34
6039: PUSH
6040: LD_INT 35
6042: PUSH
6043: LD_INT 36
6045: PUSH
6046: EMPTY
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: LIST
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: PUSH
6084: LD_INT 101
6086: PUSH
6087: LD_INT 102
6089: PUSH
6090: LD_INT 103
6092: PUSH
6093: LD_INT 104
6095: PUSH
6096: LD_INT 105
6098: PUSH
6099: LD_INT 106
6101: PUSH
6102: LD_INT 107
6104: PUSH
6105: LD_INT 108
6107: PUSH
6108: LD_INT 109
6110: PUSH
6111: LD_INT 110
6113: PUSH
6114: LD_INT 111
6116: PUSH
6117: LD_INT 112
6119: PUSH
6120: LD_INT 113
6122: PUSH
6123: LD_INT 114
6125: PUSH
6126: LD_INT 115
6128: PUSH
6129: LD_INT 116
6131: PUSH
6132: LD_INT 117
6134: PUSH
6135: LD_INT 118
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: ST_TO_ADDR
6162: GO 6165
6164: POP
// end else
6165: GO 6396
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6167: LD_ADDR_VAR 0 2
6171: PUSH
6172: LD_INT 1
6174: PUSH
6175: LD_INT 2
6177: PUSH
6178: LD_INT 3
6180: PUSH
6181: LD_INT 4
6183: PUSH
6184: LD_INT 5
6186: PUSH
6187: LD_INT 6
6189: PUSH
6190: LD_INT 7
6192: PUSH
6193: LD_INT 8
6195: PUSH
6196: LD_INT 9
6198: PUSH
6199: LD_INT 10
6201: PUSH
6202: LD_INT 11
6204: PUSH
6205: LD_INT 12
6207: PUSH
6208: LD_INT 13
6210: PUSH
6211: LD_INT 14
6213: PUSH
6214: LD_INT 15
6216: PUSH
6217: LD_INT 16
6219: PUSH
6220: LD_INT 17
6222: PUSH
6223: LD_INT 18
6225: PUSH
6226: LD_INT 19
6228: PUSH
6229: LD_INT 20
6231: PUSH
6232: LD_INT 21
6234: PUSH
6235: LD_INT 22
6237: PUSH
6238: LD_INT 23
6240: PUSH
6241: LD_INT 24
6243: PUSH
6244: LD_INT 25
6246: PUSH
6247: LD_INT 26
6249: PUSH
6250: LD_INT 27
6252: PUSH
6253: LD_INT 28
6255: PUSH
6256: LD_INT 29
6258: PUSH
6259: LD_INT 30
6261: PUSH
6262: LD_INT 31
6264: PUSH
6265: LD_INT 32
6267: PUSH
6268: LD_INT 33
6270: PUSH
6271: LD_INT 34
6273: PUSH
6274: LD_INT 35
6276: PUSH
6277: LD_INT 36
6279: PUSH
6280: EMPTY
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: PUSH
6318: LD_INT 101
6320: PUSH
6321: LD_INT 102
6323: PUSH
6324: LD_INT 103
6326: PUSH
6327: LD_INT 104
6329: PUSH
6330: LD_INT 105
6332: PUSH
6333: LD_INT 106
6335: PUSH
6336: LD_INT 107
6338: PUSH
6339: LD_INT 108
6341: PUSH
6342: LD_INT 109
6344: PUSH
6345: LD_INT 110
6347: PUSH
6348: LD_INT 111
6350: PUSH
6351: LD_INT 112
6353: PUSH
6354: LD_INT 113
6356: PUSH
6357: LD_INT 114
6359: PUSH
6360: LD_INT 115
6362: PUSH
6363: LD_INT 116
6365: PUSH
6366: LD_INT 117
6368: PUSH
6369: LD_INT 118
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: ST_TO_ADDR
// if result then
6396: LD_VAR 0 2
6400: IFFALSE 7186
// begin normal :=  ;
6402: LD_ADDR_VAR 0 5
6406: PUSH
6407: LD_STRING 
6409: ST_TO_ADDR
// hardcore :=  ;
6410: LD_ADDR_VAR 0 6
6414: PUSH
6415: LD_STRING 
6417: ST_TO_ADDR
// active :=  ;
6418: LD_ADDR_VAR 0 7
6422: PUSH
6423: LD_STRING 
6425: ST_TO_ADDR
// for i = 1 to normalCounter do
6426: LD_ADDR_VAR 0 8
6430: PUSH
6431: DOUBLE
6432: LD_INT 1
6434: DEC
6435: ST_TO_ADDR
6436: LD_EXP 2
6440: PUSH
6441: FOR_TO
6442: IFFALSE 6543
// begin tmp := 0 ;
6444: LD_ADDR_VAR 0 3
6448: PUSH
6449: LD_STRING 0
6451: ST_TO_ADDR
// if result [ 1 ] then
6452: LD_VAR 0 2
6456: PUSH
6457: LD_INT 1
6459: ARRAY
6460: IFFALSE 6525
// if result [ 1 ] [ 1 ] = i then
6462: LD_VAR 0 2
6466: PUSH
6467: LD_INT 1
6469: ARRAY
6470: PUSH
6471: LD_INT 1
6473: ARRAY
6474: PUSH
6475: LD_VAR 0 8
6479: EQUAL
6480: IFFALSE 6525
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6482: LD_ADDR_VAR 0 2
6486: PUSH
6487: LD_VAR 0 2
6491: PPUSH
6492: LD_INT 1
6494: PPUSH
6495: LD_VAR 0 2
6499: PUSH
6500: LD_INT 1
6502: ARRAY
6503: PPUSH
6504: LD_INT 1
6506: PPUSH
6507: CALL_OW 3
6511: PPUSH
6512: CALL_OW 1
6516: ST_TO_ADDR
// tmp := 1 ;
6517: LD_ADDR_VAR 0 3
6521: PUSH
6522: LD_STRING 1
6524: ST_TO_ADDR
// end ; normal := normal & tmp ;
6525: LD_ADDR_VAR 0 5
6529: PUSH
6530: LD_VAR 0 5
6534: PUSH
6535: LD_VAR 0 3
6539: STR
6540: ST_TO_ADDR
// end ;
6541: GO 6441
6543: POP
6544: POP
// for i = 1 to hardcoreCounter do
6545: LD_ADDR_VAR 0 8
6549: PUSH
6550: DOUBLE
6551: LD_INT 1
6553: DEC
6554: ST_TO_ADDR
6555: LD_EXP 3
6559: PUSH
6560: FOR_TO
6561: IFFALSE 6666
// begin tmp := 0 ;
6563: LD_ADDR_VAR 0 3
6567: PUSH
6568: LD_STRING 0
6570: ST_TO_ADDR
// if result [ 2 ] then
6571: LD_VAR 0 2
6575: PUSH
6576: LD_INT 2
6578: ARRAY
6579: IFFALSE 6648
// if result [ 2 ] [ 1 ] = 100 + i then
6581: LD_VAR 0 2
6585: PUSH
6586: LD_INT 2
6588: ARRAY
6589: PUSH
6590: LD_INT 1
6592: ARRAY
6593: PUSH
6594: LD_INT 100
6596: PUSH
6597: LD_VAR 0 8
6601: PLUS
6602: EQUAL
6603: IFFALSE 6648
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6605: LD_ADDR_VAR 0 2
6609: PUSH
6610: LD_VAR 0 2
6614: PPUSH
6615: LD_INT 2
6617: PPUSH
6618: LD_VAR 0 2
6622: PUSH
6623: LD_INT 2
6625: ARRAY
6626: PPUSH
6627: LD_INT 1
6629: PPUSH
6630: CALL_OW 3
6634: PPUSH
6635: CALL_OW 1
6639: ST_TO_ADDR
// tmp := 1 ;
6640: LD_ADDR_VAR 0 3
6644: PUSH
6645: LD_STRING 1
6647: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6648: LD_ADDR_VAR 0 6
6652: PUSH
6653: LD_VAR 0 6
6657: PUSH
6658: LD_VAR 0 3
6662: STR
6663: ST_TO_ADDR
// end ;
6664: GO 6560
6666: POP
6667: POP
// if isGameLoad then
6668: LD_VAR 0 1
6672: IFFALSE 7147
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
6674: LD_ADDR_VAR 0 4
6678: PUSH
6679: LD_EXP 6
6683: PUSH
6684: LD_EXP 5
6688: PUSH
6689: LD_EXP 7
6693: PUSH
6694: LD_EXP 4
6698: PUSH
6699: LD_EXP 8
6703: PUSH
6704: LD_EXP 9
6708: PUSH
6709: LD_EXP 10
6713: PUSH
6714: LD_EXP 11
6718: PUSH
6719: LD_EXP 12
6723: PUSH
6724: LD_EXP 13
6728: PUSH
6729: LD_EXP 14
6733: PUSH
6734: LD_EXP 15
6738: PUSH
6739: LD_EXP 16
6743: PUSH
6744: LD_EXP 17
6748: PUSH
6749: LD_EXP 25
6753: PUSH
6754: LD_EXP 26
6758: PUSH
6759: LD_EXP 27
6763: PUSH
6764: LD_EXP 28
6768: PUSH
6769: LD_EXP 30
6773: PUSH
6774: LD_EXP 31
6778: PUSH
6779: LD_EXP 32
6783: PUSH
6784: LD_EXP 35
6788: PUSH
6789: LD_EXP 37
6793: PUSH
6794: LD_EXP 38
6798: PUSH
6799: LD_EXP 39
6803: PUSH
6804: LD_EXP 41
6808: PUSH
6809: LD_EXP 42
6813: PUSH
6814: LD_EXP 45
6818: PUSH
6819: LD_EXP 46
6823: PUSH
6824: LD_EXP 47
6828: PUSH
6829: LD_EXP 48
6833: PUSH
6834: LD_EXP 49
6838: PUSH
6839: LD_EXP 50
6843: PUSH
6844: LD_EXP 51
6848: PUSH
6849: LD_EXP 52
6853: PUSH
6854: LD_EXP 53
6858: PUSH
6859: LD_EXP 18
6863: PUSH
6864: LD_EXP 19
6868: PUSH
6869: LD_EXP 22
6873: PUSH
6874: LD_EXP 23
6878: PUSH
6879: LD_EXP 24
6883: PUSH
6884: LD_EXP 20
6888: PUSH
6889: LD_EXP 21
6893: PUSH
6894: LD_EXP 29
6898: PUSH
6899: LD_EXP 33
6903: PUSH
6904: LD_EXP 34
6908: PUSH
6909: LD_EXP 36
6913: PUSH
6914: LD_EXP 40
6918: PUSH
6919: LD_EXP 43
6923: PUSH
6924: LD_EXP 44
6928: PUSH
6929: LD_EXP 54
6933: PUSH
6934: LD_EXP 55
6938: PUSH
6939: LD_EXP 56
6943: PUSH
6944: LD_EXP 57
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: LIST
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: ST_TO_ADDR
// tmp :=  ;
7005: LD_ADDR_VAR 0 3
7009: PUSH
7010: LD_STRING 
7012: ST_TO_ADDR
// for i = 1 to normalCounter do
7013: LD_ADDR_VAR 0 8
7017: PUSH
7018: DOUBLE
7019: LD_INT 1
7021: DEC
7022: ST_TO_ADDR
7023: LD_EXP 2
7027: PUSH
7028: FOR_TO
7029: IFFALSE 7065
// begin if flags [ i ] then
7031: LD_VAR 0 4
7035: PUSH
7036: LD_VAR 0 8
7040: ARRAY
7041: IFFALSE 7063
// tmp := tmp & i & ; ;
7043: LD_ADDR_VAR 0 3
7047: PUSH
7048: LD_VAR 0 3
7052: PUSH
7053: LD_VAR 0 8
7057: STR
7058: PUSH
7059: LD_STRING ;
7061: STR
7062: ST_TO_ADDR
// end ;
7063: GO 7028
7065: POP
7066: POP
// for i = 1 to hardcoreCounter do
7067: LD_ADDR_VAR 0 8
7071: PUSH
7072: DOUBLE
7073: LD_INT 1
7075: DEC
7076: ST_TO_ADDR
7077: LD_EXP 3
7081: PUSH
7082: FOR_TO
7083: IFFALSE 7129
// begin if flags [ normalCounter + i ] then
7085: LD_VAR 0 4
7089: PUSH
7090: LD_EXP 2
7094: PUSH
7095: LD_VAR 0 8
7099: PLUS
7100: ARRAY
7101: IFFALSE 7127
// tmp := tmp & ( 100 + i ) & ; ;
7103: LD_ADDR_VAR 0 3
7107: PUSH
7108: LD_VAR 0 3
7112: PUSH
7113: LD_INT 100
7115: PUSH
7116: LD_VAR 0 8
7120: PLUS
7121: STR
7122: PUSH
7123: LD_STRING ;
7125: STR
7126: ST_TO_ADDR
// end ;
7127: GO 7082
7129: POP
7130: POP
// if tmp then
7131: LD_VAR 0 3
7135: IFFALSE 7147
// active := tmp ;
7137: LD_ADDR_VAR 0 7
7141: PUSH
7142: LD_VAR 0 3
7146: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7147: LD_STRING getStreamItemsFromMission("
7149: PUSH
7150: LD_VAR 0 5
7154: STR
7155: PUSH
7156: LD_STRING ","
7158: STR
7159: PUSH
7160: LD_VAR 0 6
7164: STR
7165: PUSH
7166: LD_STRING ","
7168: STR
7169: PUSH
7170: LD_VAR 0 7
7174: STR
7175: PUSH
7176: LD_STRING ")
7178: STR
7179: PPUSH
7180: CALL_OW 559
// end else
7184: GO 7193
// ToLua ( getStreamItemsFromMission("","","") ) ;
7186: LD_STRING getStreamItemsFromMission("","","")
7188: PPUSH
7189: CALL_OW 559
// end ;
7193: LD_VAR 0 2
7197: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7198: LD_EXP 1
7202: PUSH
7203: LD_EXP 6
7207: AND
7208: IFFALSE 7332
7210: GO 7212
7212: DISABLE
7213: LD_INT 0
7215: PPUSH
7216: PPUSH
// begin enable ;
7217: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7218: LD_ADDR_VAR 0 2
7222: PUSH
7223: LD_INT 22
7225: PUSH
7226: LD_OWVAR 2
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: LD_INT 2
7237: PUSH
7238: LD_INT 34
7240: PUSH
7241: LD_INT 7
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: PUSH
7248: LD_INT 34
7250: PUSH
7251: LD_INT 45
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PUSH
7258: LD_INT 34
7260: PUSH
7261: LD_INT 28
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: LD_INT 34
7270: PUSH
7271: LD_INT 47
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: PPUSH
7289: CALL_OW 69
7293: ST_TO_ADDR
// if not tmp then
7294: LD_VAR 0 2
7298: NOT
7299: IFFALSE 7303
// exit ;
7301: GO 7332
// for i in tmp do
7303: LD_ADDR_VAR 0 1
7307: PUSH
7308: LD_VAR 0 2
7312: PUSH
7313: FOR_IN
7314: IFFALSE 7330
// begin SetLives ( i , 0 ) ;
7316: LD_VAR 0 1
7320: PPUSH
7321: LD_INT 0
7323: PPUSH
7324: CALL_OW 234
// end ;
7328: GO 7313
7330: POP
7331: POP
// end ;
7332: PPOPN 2
7334: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7335: LD_EXP 1
7339: PUSH
7340: LD_EXP 7
7344: AND
7345: IFFALSE 7429
7347: GO 7349
7349: DISABLE
7350: LD_INT 0
7352: PPUSH
7353: PPUSH
// begin enable ;
7354: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7355: LD_ADDR_VAR 0 2
7359: PUSH
7360: LD_INT 22
7362: PUSH
7363: LD_OWVAR 2
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: PUSH
7372: LD_INT 32
7374: PUSH
7375: LD_INT 3
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: PPUSH
7386: CALL_OW 69
7390: ST_TO_ADDR
// if not tmp then
7391: LD_VAR 0 2
7395: NOT
7396: IFFALSE 7400
// exit ;
7398: GO 7429
// for i in tmp do
7400: LD_ADDR_VAR 0 1
7404: PUSH
7405: LD_VAR 0 2
7409: PUSH
7410: FOR_IN
7411: IFFALSE 7427
// begin SetLives ( i , 0 ) ;
7413: LD_VAR 0 1
7417: PPUSH
7418: LD_INT 0
7420: PPUSH
7421: CALL_OW 234
// end ;
7425: GO 7410
7427: POP
7428: POP
// end ;
7429: PPOPN 2
7431: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7432: LD_EXP 1
7436: PUSH
7437: LD_EXP 4
7441: AND
7442: IFFALSE 7535
7444: GO 7446
7446: DISABLE
7447: LD_INT 0
7449: PPUSH
// begin enable ;
7450: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7451: LD_ADDR_VAR 0 1
7455: PUSH
7456: LD_INT 22
7458: PUSH
7459: LD_OWVAR 2
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: PUSH
7468: LD_INT 2
7470: PUSH
7471: LD_INT 25
7473: PUSH
7474: LD_INT 5
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 25
7483: PUSH
7484: LD_INT 9
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: LD_INT 25
7493: PUSH
7494: LD_INT 8
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: PPUSH
7511: CALL_OW 69
7515: PUSH
7516: FOR_IN
7517: IFFALSE 7533
// begin SetClass ( i , 1 ) ;
7519: LD_VAR 0 1
7523: PPUSH
7524: LD_INT 1
7526: PPUSH
7527: CALL_OW 336
// end ;
7531: GO 7516
7533: POP
7534: POP
// end ;
7535: PPOPN 1
7537: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7538: LD_EXP 1
7542: PUSH
7543: LD_EXP 5
7547: AND
7548: PUSH
7549: LD_OWVAR 65
7553: PUSH
7554: LD_INT 7
7556: LESS
7557: AND
7558: IFFALSE 7572
7560: GO 7562
7562: DISABLE
// begin enable ;
7563: ENABLE
// game_speed := 7 ;
7564: LD_ADDR_OWVAR 65
7568: PUSH
7569: LD_INT 7
7571: ST_TO_ADDR
// end ;
7572: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7573: LD_EXP 1
7577: PUSH
7578: LD_EXP 8
7582: AND
7583: IFFALSE 7785
7585: GO 7587
7587: DISABLE
7588: LD_INT 0
7590: PPUSH
7591: PPUSH
7592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7593: LD_ADDR_VAR 0 3
7597: PUSH
7598: LD_INT 81
7600: PUSH
7601: LD_OWVAR 2
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PUSH
7610: LD_INT 21
7612: PUSH
7613: LD_INT 1
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: PUSH
7620: EMPTY
7621: LIST
7622: LIST
7623: PPUSH
7624: CALL_OW 69
7628: ST_TO_ADDR
// if not tmp then
7629: LD_VAR 0 3
7633: NOT
7634: IFFALSE 7638
// exit ;
7636: GO 7785
// if tmp > 5 then
7638: LD_VAR 0 3
7642: PUSH
7643: LD_INT 5
7645: GREATER
7646: IFFALSE 7658
// k := 5 else
7648: LD_ADDR_VAR 0 2
7652: PUSH
7653: LD_INT 5
7655: ST_TO_ADDR
7656: GO 7668
// k := tmp ;
7658: LD_ADDR_VAR 0 2
7662: PUSH
7663: LD_VAR 0 3
7667: ST_TO_ADDR
// for i := 1 to k do
7668: LD_ADDR_VAR 0 1
7672: PUSH
7673: DOUBLE
7674: LD_INT 1
7676: DEC
7677: ST_TO_ADDR
7678: LD_VAR 0 2
7682: PUSH
7683: FOR_TO
7684: IFFALSE 7783
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7686: LD_VAR 0 3
7690: PUSH
7691: LD_VAR 0 1
7695: ARRAY
7696: PPUSH
7697: LD_VAR 0 1
7701: PUSH
7702: LD_INT 4
7704: MOD
7705: PUSH
7706: LD_INT 1
7708: PLUS
7709: PPUSH
7710: CALL_OW 259
7714: PUSH
7715: LD_INT 10
7717: LESS
7718: IFFALSE 7781
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7720: LD_VAR 0 3
7724: PUSH
7725: LD_VAR 0 1
7729: ARRAY
7730: PPUSH
7731: LD_VAR 0 1
7735: PUSH
7736: LD_INT 4
7738: MOD
7739: PUSH
7740: LD_INT 1
7742: PLUS
7743: PPUSH
7744: LD_VAR 0 3
7748: PUSH
7749: LD_VAR 0 1
7753: ARRAY
7754: PPUSH
7755: LD_VAR 0 1
7759: PUSH
7760: LD_INT 4
7762: MOD
7763: PUSH
7764: LD_INT 1
7766: PLUS
7767: PPUSH
7768: CALL_OW 259
7772: PUSH
7773: LD_INT 1
7775: PLUS
7776: PPUSH
7777: CALL_OW 237
7781: GO 7683
7783: POP
7784: POP
// end ;
7785: PPOPN 3
7787: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
7788: LD_EXP 1
7792: PUSH
7793: LD_EXP 9
7797: AND
7798: IFFALSE 7818
7800: GO 7802
7802: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
7803: LD_INT 4
7805: PPUSH
7806: LD_OWVAR 2
7810: PPUSH
7811: LD_INT 0
7813: PPUSH
7814: CALL_OW 324
7818: END
// every 0 0$1 trigger StreamModeActive and sShovel do
7819: LD_EXP 1
7823: PUSH
7824: LD_EXP 38
7828: AND
7829: IFFALSE 7849
7831: GO 7833
7833: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
7834: LD_INT 19
7836: PPUSH
7837: LD_OWVAR 2
7841: PPUSH
7842: LD_INT 0
7844: PPUSH
7845: CALL_OW 324
7849: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
7850: LD_EXP 1
7854: PUSH
7855: LD_EXP 10
7859: AND
7860: IFFALSE 7962
7862: GO 7864
7864: DISABLE
7865: LD_INT 0
7867: PPUSH
7868: PPUSH
// begin enable ;
7869: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
7870: LD_ADDR_VAR 0 2
7874: PUSH
7875: LD_INT 22
7877: PUSH
7878: LD_OWVAR 2
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: PUSH
7887: LD_INT 2
7889: PUSH
7890: LD_INT 34
7892: PUSH
7893: LD_INT 11
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: LD_INT 34
7902: PUSH
7903: LD_INT 30
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: LIST
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PPUSH
7919: CALL_OW 69
7923: ST_TO_ADDR
// if not tmp then
7924: LD_VAR 0 2
7928: NOT
7929: IFFALSE 7933
// exit ;
7931: GO 7962
// for i in tmp do
7933: LD_ADDR_VAR 0 1
7937: PUSH
7938: LD_VAR 0 2
7942: PUSH
7943: FOR_IN
7944: IFFALSE 7960
// begin SetLives ( i , 0 ) ;
7946: LD_VAR 0 1
7950: PPUSH
7951: LD_INT 0
7953: PPUSH
7954: CALL_OW 234
// end ;
7958: GO 7943
7960: POP
7961: POP
// end ;
7962: PPOPN 2
7964: END
// every 0 0$1 trigger StreamModeActive and sBunker do
7965: LD_EXP 1
7969: PUSH
7970: LD_EXP 11
7974: AND
7975: IFFALSE 7995
7977: GO 7979
7979: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
7980: LD_INT 32
7982: PPUSH
7983: LD_OWVAR 2
7987: PPUSH
7988: LD_INT 0
7990: PPUSH
7991: CALL_OW 324
7995: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
7996: LD_EXP 1
8000: PUSH
8001: LD_EXP 12
8005: AND
8006: IFFALSE 8187
8008: GO 8010
8010: DISABLE
8011: LD_INT 0
8013: PPUSH
8014: PPUSH
8015: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8016: LD_ADDR_VAR 0 2
8020: PUSH
8021: LD_INT 22
8023: PUSH
8024: LD_OWVAR 2
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: PUSH
8033: LD_INT 33
8035: PUSH
8036: LD_INT 3
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: PPUSH
8047: CALL_OW 69
8051: ST_TO_ADDR
// if not tmp then
8052: LD_VAR 0 2
8056: NOT
8057: IFFALSE 8061
// exit ;
8059: GO 8187
// side := 0 ;
8061: LD_ADDR_VAR 0 3
8065: PUSH
8066: LD_INT 0
8068: ST_TO_ADDR
// for i := 1 to 8 do
8069: LD_ADDR_VAR 0 1
8073: PUSH
8074: DOUBLE
8075: LD_INT 1
8077: DEC
8078: ST_TO_ADDR
8079: LD_INT 8
8081: PUSH
8082: FOR_TO
8083: IFFALSE 8131
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8085: LD_OWVAR 2
8089: PUSH
8090: LD_VAR 0 1
8094: NONEQUAL
8095: PUSH
8096: LD_OWVAR 2
8100: PPUSH
8101: LD_VAR 0 1
8105: PPUSH
8106: CALL_OW 81
8110: PUSH
8111: LD_INT 2
8113: EQUAL
8114: AND
8115: IFFALSE 8129
// begin side := i ;
8117: LD_ADDR_VAR 0 3
8121: PUSH
8122: LD_VAR 0 1
8126: ST_TO_ADDR
// break ;
8127: GO 8131
// end ;
8129: GO 8082
8131: POP
8132: POP
// if not side then
8133: LD_VAR 0 3
8137: NOT
8138: IFFALSE 8142
// exit ;
8140: GO 8187
// for i := 1 to tmp do
8142: LD_ADDR_VAR 0 1
8146: PUSH
8147: DOUBLE
8148: LD_INT 1
8150: DEC
8151: ST_TO_ADDR
8152: LD_VAR 0 2
8156: PUSH
8157: FOR_TO
8158: IFFALSE 8185
// if Prob ( 60 ) then
8160: LD_INT 60
8162: PPUSH
8163: CALL_OW 13
8167: IFFALSE 8183
// SetSide ( i , side ) ;
8169: LD_VAR 0 1
8173: PPUSH
8174: LD_VAR 0 3
8178: PPUSH
8179: CALL_OW 235
8183: GO 8157
8185: POP
8186: POP
// end ;
8187: PPOPN 3
8189: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8190: LD_EXP 1
8194: PUSH
8195: LD_EXP 14
8199: AND
8200: IFFALSE 8319
8202: GO 8204
8204: DISABLE
8205: LD_INT 0
8207: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8208: LD_ADDR_VAR 0 1
8212: PUSH
8213: LD_INT 22
8215: PUSH
8216: LD_OWVAR 2
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: PUSH
8225: LD_INT 21
8227: PUSH
8228: LD_INT 1
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: PUSH
8235: LD_INT 3
8237: PUSH
8238: LD_INT 23
8240: PUSH
8241: LD_INT 0
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: LIST
8256: PPUSH
8257: CALL_OW 69
8261: PUSH
8262: FOR_IN
8263: IFFALSE 8317
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8265: LD_VAR 0 1
8269: PPUSH
8270: CALL_OW 257
8274: PUSH
8275: LD_INT 1
8277: PUSH
8278: LD_INT 2
8280: PUSH
8281: LD_INT 3
8283: PUSH
8284: LD_INT 4
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: IN
8293: IFFALSE 8315
// SetClass ( un , rand ( 1 , 4 ) ) ;
8295: LD_VAR 0 1
8299: PPUSH
8300: LD_INT 1
8302: PPUSH
8303: LD_INT 4
8305: PPUSH
8306: CALL_OW 12
8310: PPUSH
8311: CALL_OW 336
8315: GO 8262
8317: POP
8318: POP
// end ;
8319: PPOPN 1
8321: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8322: LD_EXP 1
8326: PUSH
8327: LD_EXP 13
8331: AND
8332: IFFALSE 8411
8334: GO 8336
8336: DISABLE
8337: LD_INT 0
8339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8340: LD_ADDR_VAR 0 1
8344: PUSH
8345: LD_INT 22
8347: PUSH
8348: LD_OWVAR 2
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: PUSH
8357: LD_INT 21
8359: PUSH
8360: LD_INT 3
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: PUSH
8367: EMPTY
8368: LIST
8369: LIST
8370: PPUSH
8371: CALL_OW 69
8375: ST_TO_ADDR
// if not tmp then
8376: LD_VAR 0 1
8380: NOT
8381: IFFALSE 8385
// exit ;
8383: GO 8411
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8385: LD_VAR 0 1
8389: PUSH
8390: LD_INT 1
8392: PPUSH
8393: LD_VAR 0 1
8397: PPUSH
8398: CALL_OW 12
8402: ARRAY
8403: PPUSH
8404: LD_INT 100
8406: PPUSH
8407: CALL_OW 234
// end ;
8411: PPOPN 1
8413: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8414: LD_EXP 1
8418: PUSH
8419: LD_EXP 15
8423: AND
8424: IFFALSE 8522
8426: GO 8428
8428: DISABLE
8429: LD_INT 0
8431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8432: LD_ADDR_VAR 0 1
8436: PUSH
8437: LD_INT 22
8439: PUSH
8440: LD_OWVAR 2
8444: PUSH
8445: EMPTY
8446: LIST
8447: LIST
8448: PUSH
8449: LD_INT 21
8451: PUSH
8452: LD_INT 1
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: PUSH
8459: EMPTY
8460: LIST
8461: LIST
8462: PPUSH
8463: CALL_OW 69
8467: ST_TO_ADDR
// if not tmp then
8468: LD_VAR 0 1
8472: NOT
8473: IFFALSE 8477
// exit ;
8475: GO 8522
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8477: LD_VAR 0 1
8481: PUSH
8482: LD_INT 1
8484: PPUSH
8485: LD_VAR 0 1
8489: PPUSH
8490: CALL_OW 12
8494: ARRAY
8495: PPUSH
8496: LD_INT 1
8498: PPUSH
8499: LD_INT 4
8501: PPUSH
8502: CALL_OW 12
8506: PPUSH
8507: LD_INT 3000
8509: PPUSH
8510: LD_INT 9000
8512: PPUSH
8513: CALL_OW 12
8517: PPUSH
8518: CALL_OW 492
// end ;
8522: PPOPN 1
8524: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8525: LD_EXP 1
8529: PUSH
8530: LD_EXP 16
8534: AND
8535: IFFALSE 8555
8537: GO 8539
8539: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8540: LD_INT 1
8542: PPUSH
8543: LD_OWVAR 2
8547: PPUSH
8548: LD_INT 0
8550: PPUSH
8551: CALL_OW 324
8555: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8556: LD_EXP 1
8560: PUSH
8561: LD_EXP 17
8565: AND
8566: IFFALSE 8649
8568: GO 8570
8570: DISABLE
8571: LD_INT 0
8573: PPUSH
8574: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8575: LD_ADDR_VAR 0 2
8579: PUSH
8580: LD_INT 22
8582: PUSH
8583: LD_OWVAR 2
8587: PUSH
8588: EMPTY
8589: LIST
8590: LIST
8591: PUSH
8592: LD_INT 21
8594: PUSH
8595: LD_INT 3
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: PPUSH
8606: CALL_OW 69
8610: ST_TO_ADDR
// if not tmp then
8611: LD_VAR 0 2
8615: NOT
8616: IFFALSE 8620
// exit ;
8618: GO 8649
// for i in tmp do
8620: LD_ADDR_VAR 0 1
8624: PUSH
8625: LD_VAR 0 2
8629: PUSH
8630: FOR_IN
8631: IFFALSE 8647
// SetBLevel ( i , 10 ) ;
8633: LD_VAR 0 1
8637: PPUSH
8638: LD_INT 10
8640: PPUSH
8641: CALL_OW 241
8645: GO 8630
8647: POP
8648: POP
// end ;
8649: PPOPN 2
8651: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8652: LD_EXP 1
8656: PUSH
8657: LD_EXP 18
8661: AND
8662: IFFALSE 8773
8664: GO 8666
8666: DISABLE
8667: LD_INT 0
8669: PPUSH
8670: PPUSH
8671: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8672: LD_ADDR_VAR 0 3
8676: PUSH
8677: LD_INT 22
8679: PUSH
8680: LD_OWVAR 2
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: PUSH
8689: LD_INT 25
8691: PUSH
8692: LD_INT 1
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: PUSH
8699: EMPTY
8700: LIST
8701: LIST
8702: PPUSH
8703: CALL_OW 69
8707: ST_TO_ADDR
// if not tmp then
8708: LD_VAR 0 3
8712: NOT
8713: IFFALSE 8717
// exit ;
8715: GO 8773
// un := tmp [ rand ( 1 , tmp ) ] ;
8717: LD_ADDR_VAR 0 2
8721: PUSH
8722: LD_VAR 0 3
8726: PUSH
8727: LD_INT 1
8729: PPUSH
8730: LD_VAR 0 3
8734: PPUSH
8735: CALL_OW 12
8739: ARRAY
8740: ST_TO_ADDR
// if Crawls ( un ) then
8741: LD_VAR 0 2
8745: PPUSH
8746: CALL_OW 318
8750: IFFALSE 8761
// ComWalk ( un ) ;
8752: LD_VAR 0 2
8756: PPUSH
8757: CALL_OW 138
// SetClass ( un , class_sniper ) ;
8761: LD_VAR 0 2
8765: PPUSH
8766: LD_INT 5
8768: PPUSH
8769: CALL_OW 336
// end ;
8773: PPOPN 3
8775: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
8776: LD_EXP 1
8780: PUSH
8781: LD_EXP 19
8785: AND
8786: PUSH
8787: LD_OWVAR 67
8791: PUSH
8792: LD_INT 4
8794: LESS
8795: AND
8796: IFFALSE 8815
8798: GO 8800
8800: DISABLE
// begin Difficulty := Difficulty + 1 ;
8801: LD_ADDR_OWVAR 67
8805: PUSH
8806: LD_OWVAR 67
8810: PUSH
8811: LD_INT 1
8813: PLUS
8814: ST_TO_ADDR
// end ;
8815: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
8816: LD_EXP 1
8820: PUSH
8821: LD_EXP 20
8825: AND
8826: IFFALSE 8929
8828: GO 8830
8830: DISABLE
8831: LD_INT 0
8833: PPUSH
// begin for i := 1 to 5 do
8834: LD_ADDR_VAR 0 1
8838: PUSH
8839: DOUBLE
8840: LD_INT 1
8842: DEC
8843: ST_TO_ADDR
8844: LD_INT 5
8846: PUSH
8847: FOR_TO
8848: IFFALSE 8927
// begin uc_nation := nation_nature ;
8850: LD_ADDR_OWVAR 21
8854: PUSH
8855: LD_INT 0
8857: ST_TO_ADDR
// uc_side := 0 ;
8858: LD_ADDR_OWVAR 20
8862: PUSH
8863: LD_INT 0
8865: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8866: LD_ADDR_OWVAR 29
8870: PUSH
8871: LD_INT 12
8873: PUSH
8874: LD_INT 12
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: ST_TO_ADDR
// hc_agressivity := 20 ;
8881: LD_ADDR_OWVAR 35
8885: PUSH
8886: LD_INT 20
8888: ST_TO_ADDR
// hc_class := class_tiger ;
8889: LD_ADDR_OWVAR 28
8893: PUSH
8894: LD_INT 14
8896: ST_TO_ADDR
// hc_gallery :=  ;
8897: LD_ADDR_OWVAR 33
8901: PUSH
8902: LD_STRING 
8904: ST_TO_ADDR
// hc_name :=  ;
8905: LD_ADDR_OWVAR 26
8909: PUSH
8910: LD_STRING 
8912: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
8913: CALL_OW 44
8917: PPUSH
8918: LD_INT 0
8920: PPUSH
8921: CALL_OW 51
// end ;
8925: GO 8847
8927: POP
8928: POP
// end ;
8929: PPOPN 1
8931: END
// every 0 0$1 trigger StreamModeActive and sBomb do
8932: LD_EXP 1
8936: PUSH
8937: LD_EXP 21
8941: AND
8942: IFFALSE 8951
8944: GO 8946
8946: DISABLE
// StreamSibBomb ;
8947: CALL 8952 0 0
8951: END
// export function StreamSibBomb ; var i , x , y ; begin
8952: LD_INT 0
8954: PPUSH
8955: PPUSH
8956: PPUSH
8957: PPUSH
// result := false ;
8958: LD_ADDR_VAR 0 1
8962: PUSH
8963: LD_INT 0
8965: ST_TO_ADDR
// for i := 1 to 16 do
8966: LD_ADDR_VAR 0 2
8970: PUSH
8971: DOUBLE
8972: LD_INT 1
8974: DEC
8975: ST_TO_ADDR
8976: LD_INT 16
8978: PUSH
8979: FOR_TO
8980: IFFALSE 9179
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8982: LD_ADDR_VAR 0 3
8986: PUSH
8987: LD_INT 10
8989: PUSH
8990: LD_INT 20
8992: PUSH
8993: LD_INT 30
8995: PUSH
8996: LD_INT 40
8998: PUSH
8999: LD_INT 50
9001: PUSH
9002: LD_INT 60
9004: PUSH
9005: LD_INT 70
9007: PUSH
9008: LD_INT 80
9010: PUSH
9011: LD_INT 90
9013: PUSH
9014: LD_INT 100
9016: PUSH
9017: LD_INT 110
9019: PUSH
9020: LD_INT 120
9022: PUSH
9023: LD_INT 130
9025: PUSH
9026: LD_INT 140
9028: PUSH
9029: LD_INT 150
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 1
9051: PPUSH
9052: LD_INT 15
9054: PPUSH
9055: CALL_OW 12
9059: ARRAY
9060: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9061: LD_ADDR_VAR 0 4
9065: PUSH
9066: LD_INT 10
9068: PUSH
9069: LD_INT 20
9071: PUSH
9072: LD_INT 30
9074: PUSH
9075: LD_INT 40
9077: PUSH
9078: LD_INT 50
9080: PUSH
9081: LD_INT 60
9083: PUSH
9084: LD_INT 70
9086: PUSH
9087: LD_INT 80
9089: PUSH
9090: LD_INT 90
9092: PUSH
9093: LD_INT 100
9095: PUSH
9096: LD_INT 110
9098: PUSH
9099: LD_INT 120
9101: PUSH
9102: LD_INT 130
9104: PUSH
9105: LD_INT 140
9107: PUSH
9108: LD_INT 150
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: PUSH
9128: LD_INT 1
9130: PPUSH
9131: LD_INT 15
9133: PPUSH
9134: CALL_OW 12
9138: ARRAY
9139: ST_TO_ADDR
// if ValidHex ( x , y ) then
9140: LD_VAR 0 3
9144: PPUSH
9145: LD_VAR 0 4
9149: PPUSH
9150: CALL_OW 488
9154: IFFALSE 9177
// begin result := [ x , y ] ;
9156: LD_ADDR_VAR 0 1
9160: PUSH
9161: LD_VAR 0 3
9165: PUSH
9166: LD_VAR 0 4
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: ST_TO_ADDR
// break ;
9175: GO 9179
// end ; end ;
9177: GO 8979
9179: POP
9180: POP
// if result then
9181: LD_VAR 0 1
9185: IFFALSE 9245
// begin ToLua ( playSibBomb() ) ;
9187: LD_STRING playSibBomb()
9189: PPUSH
9190: CALL_OW 559
// wait ( 0 0$14 ) ;
9194: LD_INT 490
9196: PPUSH
9197: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9201: LD_VAR 0 1
9205: PUSH
9206: LD_INT 1
9208: ARRAY
9209: PPUSH
9210: LD_VAR 0 1
9214: PUSH
9215: LD_INT 2
9217: ARRAY
9218: PPUSH
9219: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9223: LD_VAR 0 1
9227: PUSH
9228: LD_INT 1
9230: ARRAY
9231: PPUSH
9232: LD_VAR 0 1
9236: PUSH
9237: LD_INT 2
9239: ARRAY
9240: PPUSH
9241: CALL_OW 429
// end ; end ;
9245: LD_VAR 0 1
9249: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9250: LD_EXP 1
9254: PUSH
9255: LD_EXP 23
9259: AND
9260: IFFALSE 9272
9262: GO 9264
9264: DISABLE
// YouLost (  ) ;
9265: LD_STRING 
9267: PPUSH
9268: CALL_OW 104
9272: END
// every 0 0$1 trigger StreamModeActive and sFog do
9273: LD_EXP 1
9277: PUSH
9278: LD_EXP 22
9282: AND
9283: IFFALSE 9297
9285: GO 9287
9287: DISABLE
// FogOff ( your_side ) ;
9288: LD_OWVAR 2
9292: PPUSH
9293: CALL_OW 344
9297: END
// every 0 0$1 trigger StreamModeActive and sSun do
9298: LD_EXP 1
9302: PUSH
9303: LD_EXP 24
9307: AND
9308: IFFALSE 9336
9310: GO 9312
9312: DISABLE
// begin solar_recharge_percent := 0 ;
9313: LD_ADDR_OWVAR 79
9317: PUSH
9318: LD_INT 0
9320: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9321: LD_INT 10500
9323: PPUSH
9324: CALL_OW 67
// solar_recharge_percent := 100 ;
9328: LD_ADDR_OWVAR 79
9332: PUSH
9333: LD_INT 100
9335: ST_TO_ADDR
// end ;
9336: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9337: LD_EXP 1
9341: PUSH
9342: LD_EXP 25
9346: AND
9347: IFFALSE 9586
9349: GO 9351
9351: DISABLE
9352: LD_INT 0
9354: PPUSH
9355: PPUSH
9356: PPUSH
// begin tmp := [ ] ;
9357: LD_ADDR_VAR 0 3
9361: PUSH
9362: EMPTY
9363: ST_TO_ADDR
// for i := 1 to 6 do
9364: LD_ADDR_VAR 0 1
9368: PUSH
9369: DOUBLE
9370: LD_INT 1
9372: DEC
9373: ST_TO_ADDR
9374: LD_INT 6
9376: PUSH
9377: FOR_TO
9378: IFFALSE 9483
// begin uc_nation := nation_nature ;
9380: LD_ADDR_OWVAR 21
9384: PUSH
9385: LD_INT 0
9387: ST_TO_ADDR
// uc_side := 0 ;
9388: LD_ADDR_OWVAR 20
9392: PUSH
9393: LD_INT 0
9395: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9396: LD_ADDR_OWVAR 29
9400: PUSH
9401: LD_INT 12
9403: PUSH
9404: LD_INT 12
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: ST_TO_ADDR
// hc_agressivity := 20 ;
9411: LD_ADDR_OWVAR 35
9415: PUSH
9416: LD_INT 20
9418: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9419: LD_ADDR_OWVAR 28
9423: PUSH
9424: LD_INT 17
9426: ST_TO_ADDR
// hc_gallery :=  ;
9427: LD_ADDR_OWVAR 33
9431: PUSH
9432: LD_STRING 
9434: ST_TO_ADDR
// hc_name :=  ;
9435: LD_ADDR_OWVAR 26
9439: PUSH
9440: LD_STRING 
9442: ST_TO_ADDR
// un := CreateHuman ;
9443: LD_ADDR_VAR 0 2
9447: PUSH
9448: CALL_OW 44
9452: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9453: LD_VAR 0 2
9457: PPUSH
9458: LD_INT 1
9460: PPUSH
9461: CALL_OW 51
// tmp := tmp ^ un ;
9465: LD_ADDR_VAR 0 3
9469: PUSH
9470: LD_VAR 0 3
9474: PUSH
9475: LD_VAR 0 2
9479: ADD
9480: ST_TO_ADDR
// end ;
9481: GO 9377
9483: POP
9484: POP
// repeat wait ( 0 0$1 ) ;
9485: LD_INT 35
9487: PPUSH
9488: CALL_OW 67
// for un in tmp do
9492: LD_ADDR_VAR 0 2
9496: PUSH
9497: LD_VAR 0 3
9501: PUSH
9502: FOR_IN
9503: IFFALSE 9577
// begin if IsDead ( un ) then
9505: LD_VAR 0 2
9509: PPUSH
9510: CALL_OW 301
9514: IFFALSE 9534
// begin tmp := tmp diff un ;
9516: LD_ADDR_VAR 0 3
9520: PUSH
9521: LD_VAR 0 3
9525: PUSH
9526: LD_VAR 0 2
9530: DIFF
9531: ST_TO_ADDR
// continue ;
9532: GO 9502
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9534: LD_VAR 0 2
9538: PPUSH
9539: LD_INT 3
9541: PUSH
9542: LD_INT 22
9544: PUSH
9545: LD_INT 0
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: PPUSH
9556: CALL_OW 69
9560: PPUSH
9561: LD_VAR 0 2
9565: PPUSH
9566: CALL_OW 74
9570: PPUSH
9571: CALL_OW 115
// end ;
9575: GO 9502
9577: POP
9578: POP
// until not tmp ;
9579: LD_VAR 0 3
9583: NOT
9584: IFFALSE 9485
// end ;
9586: PPOPN 3
9588: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9589: LD_EXP 1
9593: PUSH
9594: LD_EXP 26
9598: AND
9599: IFFALSE 9653
9601: GO 9603
9603: DISABLE
// begin ToLua ( displayTroll(); ) ;
9604: LD_STRING displayTroll();
9606: PPUSH
9607: CALL_OW 559
// wait ( 3 3$00 ) ;
9611: LD_INT 6300
9613: PPUSH
9614: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9618: LD_STRING hideTroll();
9620: PPUSH
9621: CALL_OW 559
// wait ( 1 1$00 ) ;
9625: LD_INT 2100
9627: PPUSH
9628: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9632: LD_STRING displayTroll();
9634: PPUSH
9635: CALL_OW 559
// wait ( 1 1$00 ) ;
9639: LD_INT 2100
9641: PPUSH
9642: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9646: LD_STRING hideTroll();
9648: PPUSH
9649: CALL_OW 559
// end ;
9653: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9654: LD_EXP 1
9658: PUSH
9659: LD_EXP 27
9663: AND
9664: IFFALSE 9727
9666: GO 9668
9668: DISABLE
9669: LD_INT 0
9671: PPUSH
// begin p := 0 ;
9672: LD_ADDR_VAR 0 1
9676: PUSH
9677: LD_INT 0
9679: ST_TO_ADDR
// repeat game_speed := 1 ;
9680: LD_ADDR_OWVAR 65
9684: PUSH
9685: LD_INT 1
9687: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9688: LD_INT 35
9690: PPUSH
9691: CALL_OW 67
// p := p + 1 ;
9695: LD_ADDR_VAR 0 1
9699: PUSH
9700: LD_VAR 0 1
9704: PUSH
9705: LD_INT 1
9707: PLUS
9708: ST_TO_ADDR
// until p >= 60 ;
9709: LD_VAR 0 1
9713: PUSH
9714: LD_INT 60
9716: GREATEREQUAL
9717: IFFALSE 9680
// game_speed := 4 ;
9719: LD_ADDR_OWVAR 65
9723: PUSH
9724: LD_INT 4
9726: ST_TO_ADDR
// end ;
9727: PPOPN 1
9729: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9730: LD_EXP 1
9734: PUSH
9735: LD_EXP 28
9739: AND
9740: IFFALSE 9886
9742: GO 9744
9744: DISABLE
9745: LD_INT 0
9747: PPUSH
9748: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9749: LD_ADDR_VAR 0 1
9753: PUSH
9754: LD_INT 22
9756: PUSH
9757: LD_OWVAR 2
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 2
9768: PUSH
9769: LD_INT 30
9771: PUSH
9772: LD_INT 0
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: PUSH
9779: LD_INT 30
9781: PUSH
9782: LD_INT 1
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: LIST
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: PPUSH
9798: CALL_OW 69
9802: ST_TO_ADDR
// if not depot then
9803: LD_VAR 0 1
9807: NOT
9808: IFFALSE 9812
// exit ;
9810: GO 9886
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
9812: LD_ADDR_VAR 0 2
9816: PUSH
9817: LD_VAR 0 1
9821: PUSH
9822: LD_INT 1
9824: PPUSH
9825: LD_VAR 0 1
9829: PPUSH
9830: CALL_OW 12
9834: ARRAY
9835: PPUSH
9836: CALL_OW 274
9840: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
9841: LD_VAR 0 2
9845: PPUSH
9846: LD_INT 1
9848: PPUSH
9849: LD_INT 0
9851: PPUSH
9852: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
9856: LD_VAR 0 2
9860: PPUSH
9861: LD_INT 2
9863: PPUSH
9864: LD_INT 0
9866: PPUSH
9867: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
9871: LD_VAR 0 2
9875: PPUSH
9876: LD_INT 3
9878: PPUSH
9879: LD_INT 0
9881: PPUSH
9882: CALL_OW 277
// end ;
9886: PPOPN 2
9888: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
9889: LD_EXP 1
9893: PUSH
9894: LD_EXP 29
9898: AND
9899: IFFALSE 9996
9901: GO 9903
9903: DISABLE
9904: LD_INT 0
9906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
9907: LD_ADDR_VAR 0 1
9911: PUSH
9912: LD_INT 22
9914: PUSH
9915: LD_OWVAR 2
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PUSH
9924: LD_INT 21
9926: PUSH
9927: LD_INT 1
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PUSH
9934: LD_INT 3
9936: PUSH
9937: LD_INT 23
9939: PUSH
9940: LD_INT 0
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: LIST
9955: PPUSH
9956: CALL_OW 69
9960: ST_TO_ADDR
// if not tmp then
9961: LD_VAR 0 1
9965: NOT
9966: IFFALSE 9970
// exit ;
9968: GO 9996
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
9970: LD_VAR 0 1
9974: PUSH
9975: LD_INT 1
9977: PPUSH
9978: LD_VAR 0 1
9982: PPUSH
9983: CALL_OW 12
9987: ARRAY
9988: PPUSH
9989: LD_INT 200
9991: PPUSH
9992: CALL_OW 234
// end ;
9996: PPOPN 1
9998: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
9999: LD_EXP 1
10003: PUSH
10004: LD_EXP 30
10008: AND
10009: IFFALSE 10088
10011: GO 10013
10013: DISABLE
10014: LD_INT 0
10016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10017: LD_ADDR_VAR 0 1
10021: PUSH
10022: LD_INT 22
10024: PUSH
10025: LD_OWVAR 2
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: PUSH
10034: LD_INT 21
10036: PUSH
10037: LD_INT 2
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PPUSH
10048: CALL_OW 69
10052: ST_TO_ADDR
// if not tmp then
10053: LD_VAR 0 1
10057: NOT
10058: IFFALSE 10062
// exit ;
10060: GO 10088
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10062: LD_VAR 0 1
10066: PUSH
10067: LD_INT 1
10069: PPUSH
10070: LD_VAR 0 1
10074: PPUSH
10075: CALL_OW 12
10079: ARRAY
10080: PPUSH
10081: LD_INT 60
10083: PPUSH
10084: CALL_OW 234
// end ;
10088: PPOPN 1
10090: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10091: LD_EXP 1
10095: PUSH
10096: LD_EXP 31
10100: AND
10101: IFFALSE 10200
10103: GO 10105
10105: DISABLE
10106: LD_INT 0
10108: PPUSH
10109: PPUSH
// begin enable ;
10110: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10111: LD_ADDR_VAR 0 1
10115: PUSH
10116: LD_INT 22
10118: PUSH
10119: LD_OWVAR 2
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: PUSH
10128: LD_INT 61
10130: PUSH
10131: EMPTY
10132: LIST
10133: PUSH
10134: LD_INT 33
10136: PUSH
10137: LD_INT 2
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: LIST
10148: PPUSH
10149: CALL_OW 69
10153: ST_TO_ADDR
// if not tmp then
10154: LD_VAR 0 1
10158: NOT
10159: IFFALSE 10163
// exit ;
10161: GO 10200
// for i in tmp do
10163: LD_ADDR_VAR 0 2
10167: PUSH
10168: LD_VAR 0 1
10172: PUSH
10173: FOR_IN
10174: IFFALSE 10198
// if IsControledBy ( i ) then
10176: LD_VAR 0 2
10180: PPUSH
10181: CALL_OW 312
10185: IFFALSE 10196
// ComUnlink ( i ) ;
10187: LD_VAR 0 2
10191: PPUSH
10192: CALL_OW 136
10196: GO 10173
10198: POP
10199: POP
// end ;
10200: PPOPN 2
10202: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10203: LD_EXP 1
10207: PUSH
10208: LD_EXP 32
10212: AND
10213: IFFALSE 10353
10215: GO 10217
10217: DISABLE
10218: LD_INT 0
10220: PPUSH
10221: PPUSH
// begin ToLua ( displayPowell(); ) ;
10222: LD_STRING displayPowell();
10224: PPUSH
10225: CALL_OW 559
// uc_side := 0 ;
10229: LD_ADDR_OWVAR 20
10233: PUSH
10234: LD_INT 0
10236: ST_TO_ADDR
// uc_nation := 2 ;
10237: LD_ADDR_OWVAR 21
10241: PUSH
10242: LD_INT 2
10244: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10245: LD_ADDR_OWVAR 37
10249: PUSH
10250: LD_INT 14
10252: ST_TO_ADDR
// vc_engine := engine_siberite ;
10253: LD_ADDR_OWVAR 39
10257: PUSH
10258: LD_INT 3
10260: ST_TO_ADDR
// vc_control := control_apeman ;
10261: LD_ADDR_OWVAR 38
10265: PUSH
10266: LD_INT 5
10268: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10269: LD_ADDR_OWVAR 40
10273: PUSH
10274: LD_INT 29
10276: ST_TO_ADDR
// un := CreateVehicle ;
10277: LD_ADDR_VAR 0 2
10281: PUSH
10282: CALL_OW 45
10286: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10287: LD_VAR 0 2
10291: PPUSH
10292: LD_INT 1
10294: PPUSH
10295: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10299: LD_INT 35
10301: PPUSH
10302: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10306: LD_VAR 0 2
10310: PPUSH
10311: LD_INT 22
10313: PUSH
10314: LD_OWVAR 2
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: PPUSH
10323: CALL_OW 69
10327: PPUSH
10328: LD_VAR 0 2
10332: PPUSH
10333: CALL_OW 74
10337: PPUSH
10338: CALL_OW 115
// until IsDead ( un ) ;
10342: LD_VAR 0 2
10346: PPUSH
10347: CALL_OW 301
10351: IFFALSE 10299
// end ;
10353: PPOPN 2
10355: END
// every 0 0$1 trigger StreamModeActive and sStu do
10356: LD_EXP 1
10360: PUSH
10361: LD_EXP 40
10365: AND
10366: IFFALSE 10382
10368: GO 10370
10370: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10371: LD_STRING displayStucuk();
10373: PPUSH
10374: CALL_OW 559
// ResetFog ;
10378: CALL_OW 335
// end ;
10382: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10383: LD_EXP 1
10387: PUSH
10388: LD_EXP 33
10392: AND
10393: IFFALSE 10534
10395: GO 10397
10397: DISABLE
10398: LD_INT 0
10400: PPUSH
10401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10402: LD_ADDR_VAR 0 2
10406: PUSH
10407: LD_INT 22
10409: PUSH
10410: LD_OWVAR 2
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: PUSH
10419: LD_INT 21
10421: PUSH
10422: LD_INT 1
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PUSH
10429: EMPTY
10430: LIST
10431: LIST
10432: PPUSH
10433: CALL_OW 69
10437: ST_TO_ADDR
// if not tmp then
10438: LD_VAR 0 2
10442: NOT
10443: IFFALSE 10447
// exit ;
10445: GO 10534
// un := tmp [ rand ( 1 , tmp ) ] ;
10447: LD_ADDR_VAR 0 1
10451: PUSH
10452: LD_VAR 0 2
10456: PUSH
10457: LD_INT 1
10459: PPUSH
10460: LD_VAR 0 2
10464: PPUSH
10465: CALL_OW 12
10469: ARRAY
10470: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10471: LD_VAR 0 1
10475: PPUSH
10476: LD_INT 0
10478: PPUSH
10479: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10483: LD_VAR 0 1
10487: PPUSH
10488: LD_OWVAR 3
10492: PUSH
10493: LD_VAR 0 1
10497: DIFF
10498: PPUSH
10499: LD_VAR 0 1
10503: PPUSH
10504: CALL_OW 74
10508: PPUSH
10509: CALL_OW 115
// wait ( 0 0$20 ) ;
10513: LD_INT 700
10515: PPUSH
10516: CALL_OW 67
// SetSide ( un , your_side ) ;
10520: LD_VAR 0 1
10524: PPUSH
10525: LD_OWVAR 2
10529: PPUSH
10530: CALL_OW 235
// end ;
10534: PPOPN 2
10536: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10537: LD_EXP 1
10541: PUSH
10542: LD_EXP 34
10546: AND
10547: IFFALSE 10653
10549: GO 10551
10551: DISABLE
10552: LD_INT 0
10554: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10555: LD_ADDR_VAR 0 1
10559: PUSH
10560: LD_INT 22
10562: PUSH
10563: LD_OWVAR 2
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PUSH
10572: LD_INT 2
10574: PUSH
10575: LD_INT 30
10577: PUSH
10578: LD_INT 0
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: PUSH
10585: LD_INT 30
10587: PUSH
10588: LD_INT 1
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: LIST
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PPUSH
10604: CALL_OW 69
10608: ST_TO_ADDR
// if not depot then
10609: LD_VAR 0 1
10613: NOT
10614: IFFALSE 10618
// exit ;
10616: GO 10653
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10618: LD_VAR 0 1
10622: PUSH
10623: LD_INT 1
10625: ARRAY
10626: PPUSH
10627: CALL_OW 250
10631: PPUSH
10632: LD_VAR 0 1
10636: PUSH
10637: LD_INT 1
10639: ARRAY
10640: PPUSH
10641: CALL_OW 251
10645: PPUSH
10646: LD_INT 70
10648: PPUSH
10649: CALL_OW 495
// end ;
10653: PPOPN 1
10655: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10656: LD_EXP 1
10660: PUSH
10661: LD_EXP 35
10665: AND
10666: IFFALSE 10877
10668: GO 10670
10670: DISABLE
10671: LD_INT 0
10673: PPUSH
10674: PPUSH
10675: PPUSH
10676: PPUSH
10677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10678: LD_ADDR_VAR 0 5
10682: PUSH
10683: LD_INT 22
10685: PUSH
10686: LD_OWVAR 2
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: PUSH
10695: LD_INT 21
10697: PUSH
10698: LD_INT 1
10700: PUSH
10701: EMPTY
10702: LIST
10703: LIST
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PPUSH
10709: CALL_OW 69
10713: ST_TO_ADDR
// if not tmp then
10714: LD_VAR 0 5
10718: NOT
10719: IFFALSE 10723
// exit ;
10721: GO 10877
// for i in tmp do
10723: LD_ADDR_VAR 0 1
10727: PUSH
10728: LD_VAR 0 5
10732: PUSH
10733: FOR_IN
10734: IFFALSE 10875
// begin d := rand ( 0 , 5 ) ;
10736: LD_ADDR_VAR 0 4
10740: PUSH
10741: LD_INT 0
10743: PPUSH
10744: LD_INT 5
10746: PPUSH
10747: CALL_OW 12
10751: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10752: LD_ADDR_VAR 0 2
10756: PUSH
10757: LD_VAR 0 1
10761: PPUSH
10762: CALL_OW 250
10766: PPUSH
10767: LD_VAR 0 4
10771: PPUSH
10772: LD_INT 3
10774: PPUSH
10775: LD_INT 12
10777: PPUSH
10778: CALL_OW 12
10782: PPUSH
10783: CALL_OW 272
10787: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
10788: LD_ADDR_VAR 0 3
10792: PUSH
10793: LD_VAR 0 1
10797: PPUSH
10798: CALL_OW 251
10802: PPUSH
10803: LD_VAR 0 4
10807: PPUSH
10808: LD_INT 3
10810: PPUSH
10811: LD_INT 12
10813: PPUSH
10814: CALL_OW 12
10818: PPUSH
10819: CALL_OW 273
10823: ST_TO_ADDR
// if ValidHex ( x , y ) then
10824: LD_VAR 0 2
10828: PPUSH
10829: LD_VAR 0 3
10833: PPUSH
10834: CALL_OW 488
10838: IFFALSE 10873
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
10840: LD_VAR 0 1
10844: PPUSH
10845: LD_VAR 0 2
10849: PPUSH
10850: LD_VAR 0 3
10854: PPUSH
10855: LD_INT 3
10857: PPUSH
10858: LD_INT 6
10860: PPUSH
10861: CALL_OW 12
10865: PPUSH
10866: LD_INT 1
10868: PPUSH
10869: CALL_OW 483
// end ;
10873: GO 10733
10875: POP
10876: POP
// end ;
10877: PPOPN 5
10879: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
10880: LD_EXP 1
10884: PUSH
10885: LD_EXP 36
10889: AND
10890: IFFALSE 10984
10892: GO 10894
10894: DISABLE
10895: LD_INT 0
10897: PPUSH
10898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
10899: LD_ADDR_VAR 0 2
10903: PUSH
10904: LD_INT 22
10906: PUSH
10907: LD_OWVAR 2
10911: PUSH
10912: EMPTY
10913: LIST
10914: LIST
10915: PUSH
10916: LD_INT 32
10918: PUSH
10919: LD_INT 1
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: PUSH
10926: LD_INT 21
10928: PUSH
10929: LD_INT 2
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: LIST
10940: PPUSH
10941: CALL_OW 69
10945: ST_TO_ADDR
// if not tmp then
10946: LD_VAR 0 2
10950: NOT
10951: IFFALSE 10955
// exit ;
10953: GO 10984
// for i in tmp do
10955: LD_ADDR_VAR 0 1
10959: PUSH
10960: LD_VAR 0 2
10964: PUSH
10965: FOR_IN
10966: IFFALSE 10982
// SetFuel ( i , 0 ) ;
10968: LD_VAR 0 1
10972: PPUSH
10973: LD_INT 0
10975: PPUSH
10976: CALL_OW 240
10980: GO 10965
10982: POP
10983: POP
// end ;
10984: PPOPN 2
10986: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
10987: LD_EXP 1
10991: PUSH
10992: LD_EXP 37
10996: AND
10997: IFFALSE 11063
10999: GO 11001
11001: DISABLE
11002: LD_INT 0
11004: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11005: LD_ADDR_VAR 0 1
11009: PUSH
11010: LD_INT 22
11012: PUSH
11013: LD_OWVAR 2
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: PUSH
11022: LD_INT 30
11024: PUSH
11025: LD_INT 29
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: PPUSH
11036: CALL_OW 69
11040: ST_TO_ADDR
// if not tmp then
11041: LD_VAR 0 1
11045: NOT
11046: IFFALSE 11050
// exit ;
11048: GO 11063
// DestroyUnit ( tmp [ 1 ] ) ;
11050: LD_VAR 0 1
11054: PUSH
11055: LD_INT 1
11057: ARRAY
11058: PPUSH
11059: CALL_OW 65
// end ;
11063: PPOPN 1
11065: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11066: LD_EXP 1
11070: PUSH
11071: LD_EXP 39
11075: AND
11076: IFFALSE 11205
11078: GO 11080
11080: DISABLE
11081: LD_INT 0
11083: PPUSH
// begin uc_side := 0 ;
11084: LD_ADDR_OWVAR 20
11088: PUSH
11089: LD_INT 0
11091: ST_TO_ADDR
// uc_nation := nation_arabian ;
11092: LD_ADDR_OWVAR 21
11096: PUSH
11097: LD_INT 2
11099: ST_TO_ADDR
// hc_gallery :=  ;
11100: LD_ADDR_OWVAR 33
11104: PUSH
11105: LD_STRING 
11107: ST_TO_ADDR
// hc_name :=  ;
11108: LD_ADDR_OWVAR 26
11112: PUSH
11113: LD_STRING 
11115: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11116: LD_INT 1
11118: PPUSH
11119: LD_INT 11
11121: PPUSH
11122: LD_INT 10
11124: PPUSH
11125: CALL_OW 380
// un := CreateHuman ;
11129: LD_ADDR_VAR 0 1
11133: PUSH
11134: CALL_OW 44
11138: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11139: LD_VAR 0 1
11143: PPUSH
11144: LD_INT 1
11146: PPUSH
11147: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11151: LD_INT 35
11153: PPUSH
11154: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11158: LD_VAR 0 1
11162: PPUSH
11163: LD_INT 22
11165: PUSH
11166: LD_OWVAR 2
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: PPUSH
11175: CALL_OW 69
11179: PPUSH
11180: LD_VAR 0 1
11184: PPUSH
11185: CALL_OW 74
11189: PPUSH
11190: CALL_OW 115
// until IsDead ( un ) ;
11194: LD_VAR 0 1
11198: PPUSH
11199: CALL_OW 301
11203: IFFALSE 11151
// end ;
11205: PPOPN 1
11207: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11208: LD_EXP 1
11212: PUSH
11213: LD_EXP 41
11217: AND
11218: IFFALSE 11230
11220: GO 11222
11222: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11223: LD_STRING earthquake(getX(game), 0, 32)
11225: PPUSH
11226: CALL_OW 559
11230: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11231: LD_EXP 1
11235: PUSH
11236: LD_EXP 42
11240: AND
11241: IFFALSE 11332
11243: GO 11245
11245: DISABLE
11246: LD_INT 0
11248: PPUSH
// begin enable ;
11249: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11250: LD_ADDR_VAR 0 1
11254: PUSH
11255: LD_INT 22
11257: PUSH
11258: LD_OWVAR 2
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: LD_INT 21
11269: PUSH
11270: LD_INT 2
11272: PUSH
11273: EMPTY
11274: LIST
11275: LIST
11276: PUSH
11277: LD_INT 33
11279: PUSH
11280: LD_INT 3
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: LIST
11291: PPUSH
11292: CALL_OW 69
11296: ST_TO_ADDR
// if not tmp then
11297: LD_VAR 0 1
11301: NOT
11302: IFFALSE 11306
// exit ;
11304: GO 11332
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11306: LD_VAR 0 1
11310: PUSH
11311: LD_INT 1
11313: PPUSH
11314: LD_VAR 0 1
11318: PPUSH
11319: CALL_OW 12
11323: ARRAY
11324: PPUSH
11325: LD_INT 1
11327: PPUSH
11328: CALL_OW 234
// end ;
11332: PPOPN 1
11334: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11335: LD_EXP 1
11339: PUSH
11340: LD_EXP 43
11344: AND
11345: IFFALSE 11486
11347: GO 11349
11349: DISABLE
11350: LD_INT 0
11352: PPUSH
11353: PPUSH
11354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11355: LD_ADDR_VAR 0 3
11359: PUSH
11360: LD_INT 22
11362: PUSH
11363: LD_OWVAR 2
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: PUSH
11372: LD_INT 25
11374: PUSH
11375: LD_INT 1
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: PPUSH
11386: CALL_OW 69
11390: ST_TO_ADDR
// if not tmp then
11391: LD_VAR 0 3
11395: NOT
11396: IFFALSE 11400
// exit ;
11398: GO 11486
// un := tmp [ rand ( 1 , tmp ) ] ;
11400: LD_ADDR_VAR 0 2
11404: PUSH
11405: LD_VAR 0 3
11409: PUSH
11410: LD_INT 1
11412: PPUSH
11413: LD_VAR 0 3
11417: PPUSH
11418: CALL_OW 12
11422: ARRAY
11423: ST_TO_ADDR
// if Crawls ( un ) then
11424: LD_VAR 0 2
11428: PPUSH
11429: CALL_OW 318
11433: IFFALSE 11444
// ComWalk ( un ) ;
11435: LD_VAR 0 2
11439: PPUSH
11440: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11444: LD_VAR 0 2
11448: PPUSH
11449: LD_INT 9
11451: PPUSH
11452: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11456: LD_INT 28
11458: PPUSH
11459: LD_OWVAR 2
11463: PPUSH
11464: LD_INT 2
11466: PPUSH
11467: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11471: LD_INT 29
11473: PPUSH
11474: LD_OWVAR 2
11478: PPUSH
11479: LD_INT 2
11481: PPUSH
11482: CALL_OW 322
// end ;
11486: PPOPN 3
11488: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11489: LD_EXP 1
11493: PUSH
11494: LD_EXP 44
11498: AND
11499: IFFALSE 11610
11501: GO 11503
11503: DISABLE
11504: LD_INT 0
11506: PPUSH
11507: PPUSH
11508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11509: LD_ADDR_VAR 0 3
11513: PUSH
11514: LD_INT 22
11516: PUSH
11517: LD_OWVAR 2
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: PUSH
11526: LD_INT 25
11528: PUSH
11529: LD_INT 1
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: PPUSH
11540: CALL_OW 69
11544: ST_TO_ADDR
// if not tmp then
11545: LD_VAR 0 3
11549: NOT
11550: IFFALSE 11554
// exit ;
11552: GO 11610
// un := tmp [ rand ( 1 , tmp ) ] ;
11554: LD_ADDR_VAR 0 2
11558: PUSH
11559: LD_VAR 0 3
11563: PUSH
11564: LD_INT 1
11566: PPUSH
11567: LD_VAR 0 3
11571: PPUSH
11572: CALL_OW 12
11576: ARRAY
11577: ST_TO_ADDR
// if Crawls ( un ) then
11578: LD_VAR 0 2
11582: PPUSH
11583: CALL_OW 318
11587: IFFALSE 11598
// ComWalk ( un ) ;
11589: LD_VAR 0 2
11593: PPUSH
11594: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11598: LD_VAR 0 2
11602: PPUSH
11603: LD_INT 8
11605: PPUSH
11606: CALL_OW 336
// end ;
11610: PPOPN 3
11612: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11613: LD_EXP 1
11617: PUSH
11618: LD_EXP 45
11622: AND
11623: IFFALSE 11767
11625: GO 11627
11627: DISABLE
11628: LD_INT 0
11630: PPUSH
11631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11632: LD_ADDR_VAR 0 2
11636: PUSH
11637: LD_INT 22
11639: PUSH
11640: LD_OWVAR 2
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: PUSH
11649: LD_INT 21
11651: PUSH
11652: LD_INT 2
11654: PUSH
11655: EMPTY
11656: LIST
11657: LIST
11658: PUSH
11659: LD_INT 2
11661: PUSH
11662: LD_INT 34
11664: PUSH
11665: LD_INT 12
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: PUSH
11672: LD_INT 34
11674: PUSH
11675: LD_INT 51
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: PUSH
11682: LD_INT 34
11684: PUSH
11685: LD_INT 32
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: PUSH
11698: EMPTY
11699: LIST
11700: LIST
11701: LIST
11702: PPUSH
11703: CALL_OW 69
11707: ST_TO_ADDR
// if not tmp then
11708: LD_VAR 0 2
11712: NOT
11713: IFFALSE 11717
// exit ;
11715: GO 11767
// for i in tmp do
11717: LD_ADDR_VAR 0 1
11721: PUSH
11722: LD_VAR 0 2
11726: PUSH
11727: FOR_IN
11728: IFFALSE 11765
// if GetCargo ( i , mat_artifact ) = 0 then
11730: LD_VAR 0 1
11734: PPUSH
11735: LD_INT 4
11737: PPUSH
11738: CALL_OW 289
11742: PUSH
11743: LD_INT 0
11745: EQUAL
11746: IFFALSE 11763
// SetCargo ( i , mat_siberit , 100 ) ;
11748: LD_VAR 0 1
11752: PPUSH
11753: LD_INT 3
11755: PPUSH
11756: LD_INT 100
11758: PPUSH
11759: CALL_OW 290
11763: GO 11727
11765: POP
11766: POP
// end ;
11767: PPOPN 2
11769: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
11770: LD_EXP 1
11774: PUSH
11775: LD_EXP 46
11779: AND
11780: IFFALSE 11963
11782: GO 11784
11784: DISABLE
11785: LD_INT 0
11787: PPUSH
11788: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
11789: LD_ADDR_VAR 0 2
11793: PUSH
11794: LD_INT 22
11796: PUSH
11797: LD_OWVAR 2
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: PPUSH
11806: CALL_OW 69
11810: ST_TO_ADDR
// if not tmp then
11811: LD_VAR 0 2
11815: NOT
11816: IFFALSE 11820
// exit ;
11818: GO 11963
// for i := 1 to 2 do
11820: LD_ADDR_VAR 0 1
11824: PUSH
11825: DOUBLE
11826: LD_INT 1
11828: DEC
11829: ST_TO_ADDR
11830: LD_INT 2
11832: PUSH
11833: FOR_TO
11834: IFFALSE 11961
// begin uc_side := your_side ;
11836: LD_ADDR_OWVAR 20
11840: PUSH
11841: LD_OWVAR 2
11845: ST_TO_ADDR
// uc_nation := nation_american ;
11846: LD_ADDR_OWVAR 21
11850: PUSH
11851: LD_INT 1
11853: ST_TO_ADDR
// vc_chassis := us_morphling ;
11854: LD_ADDR_OWVAR 37
11858: PUSH
11859: LD_INT 5
11861: ST_TO_ADDR
// vc_engine := engine_siberite ;
11862: LD_ADDR_OWVAR 39
11866: PUSH
11867: LD_INT 3
11869: ST_TO_ADDR
// vc_control := control_computer ;
11870: LD_ADDR_OWVAR 38
11874: PUSH
11875: LD_INT 3
11877: ST_TO_ADDR
// vc_weapon := us_double_laser ;
11878: LD_ADDR_OWVAR 40
11882: PUSH
11883: LD_INT 10
11885: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
11886: LD_VAR 0 2
11890: PUSH
11891: LD_INT 1
11893: ARRAY
11894: PPUSH
11895: CALL_OW 310
11899: NOT
11900: IFFALSE 11947
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
11902: CALL_OW 45
11906: PPUSH
11907: LD_VAR 0 2
11911: PUSH
11912: LD_INT 1
11914: ARRAY
11915: PPUSH
11916: CALL_OW 250
11920: PPUSH
11921: LD_VAR 0 2
11925: PUSH
11926: LD_INT 1
11928: ARRAY
11929: PPUSH
11930: CALL_OW 251
11934: PPUSH
11935: LD_INT 12
11937: PPUSH
11938: LD_INT 1
11940: PPUSH
11941: CALL_OW 50
11945: GO 11959
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
11947: CALL_OW 45
11951: PPUSH
11952: LD_INT 1
11954: PPUSH
11955: CALL_OW 51
// end ;
11959: GO 11833
11961: POP
11962: POP
// end ;
11963: PPOPN 2
11965: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
11966: LD_EXP 1
11970: PUSH
11971: LD_EXP 47
11975: AND
11976: IFFALSE 12198
11978: GO 11980
11980: DISABLE
11981: LD_INT 0
11983: PPUSH
11984: PPUSH
11985: PPUSH
11986: PPUSH
11987: PPUSH
11988: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11989: LD_ADDR_VAR 0 6
11993: PUSH
11994: LD_INT 22
11996: PUSH
11997: LD_OWVAR 2
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: PUSH
12006: LD_INT 21
12008: PUSH
12009: LD_INT 1
12011: PUSH
12012: EMPTY
12013: LIST
12014: LIST
12015: PUSH
12016: LD_INT 3
12018: PUSH
12019: LD_INT 23
12021: PUSH
12022: LD_INT 0
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: LIST
12037: PPUSH
12038: CALL_OW 69
12042: ST_TO_ADDR
// if not tmp then
12043: LD_VAR 0 6
12047: NOT
12048: IFFALSE 12052
// exit ;
12050: GO 12198
// s1 := rand ( 1 , 4 ) ;
12052: LD_ADDR_VAR 0 2
12056: PUSH
12057: LD_INT 1
12059: PPUSH
12060: LD_INT 4
12062: PPUSH
12063: CALL_OW 12
12067: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12068: LD_ADDR_VAR 0 4
12072: PUSH
12073: LD_VAR 0 6
12077: PUSH
12078: LD_INT 1
12080: ARRAY
12081: PPUSH
12082: LD_VAR 0 2
12086: PPUSH
12087: CALL_OW 259
12091: ST_TO_ADDR
// if s1 = 1 then
12092: LD_VAR 0 2
12096: PUSH
12097: LD_INT 1
12099: EQUAL
12100: IFFALSE 12120
// s2 := rand ( 2 , 4 ) else
12102: LD_ADDR_VAR 0 3
12106: PUSH
12107: LD_INT 2
12109: PPUSH
12110: LD_INT 4
12112: PPUSH
12113: CALL_OW 12
12117: ST_TO_ADDR
12118: GO 12128
// s2 := 1 ;
12120: LD_ADDR_VAR 0 3
12124: PUSH
12125: LD_INT 1
12127: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12128: LD_ADDR_VAR 0 5
12132: PUSH
12133: LD_VAR 0 6
12137: PUSH
12138: LD_INT 1
12140: ARRAY
12141: PPUSH
12142: LD_VAR 0 3
12146: PPUSH
12147: CALL_OW 259
12151: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12152: LD_VAR 0 6
12156: PUSH
12157: LD_INT 1
12159: ARRAY
12160: PPUSH
12161: LD_VAR 0 2
12165: PPUSH
12166: LD_VAR 0 5
12170: PPUSH
12171: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12175: LD_VAR 0 6
12179: PUSH
12180: LD_INT 1
12182: ARRAY
12183: PPUSH
12184: LD_VAR 0 3
12188: PPUSH
12189: LD_VAR 0 4
12193: PPUSH
12194: CALL_OW 237
// end ;
12198: PPOPN 6
12200: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12201: LD_EXP 1
12205: PUSH
12206: LD_EXP 48
12210: AND
12211: IFFALSE 12290
12213: GO 12215
12215: DISABLE
12216: LD_INT 0
12218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12219: LD_ADDR_VAR 0 1
12223: PUSH
12224: LD_INT 22
12226: PUSH
12227: LD_OWVAR 2
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: PUSH
12236: LD_INT 30
12238: PUSH
12239: LD_INT 3
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: PPUSH
12250: CALL_OW 69
12254: ST_TO_ADDR
// if not tmp then
12255: LD_VAR 0 1
12259: NOT
12260: IFFALSE 12264
// exit ;
12262: GO 12290
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12264: LD_VAR 0 1
12268: PUSH
12269: LD_INT 1
12271: PPUSH
12272: LD_VAR 0 1
12276: PPUSH
12277: CALL_OW 12
12281: ARRAY
12282: PPUSH
12283: LD_INT 1
12285: PPUSH
12286: CALL_OW 234
// end ;
12290: PPOPN 1
12292: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12293: LD_EXP 1
12297: PUSH
12298: LD_EXP 49
12302: AND
12303: IFFALSE 12415
12305: GO 12307
12307: DISABLE
12308: LD_INT 0
12310: PPUSH
12311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12312: LD_ADDR_VAR 0 2
12316: PUSH
12317: LD_INT 22
12319: PUSH
12320: LD_OWVAR 2
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PUSH
12329: LD_INT 2
12331: PUSH
12332: LD_INT 30
12334: PUSH
12335: LD_INT 27
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PUSH
12342: LD_INT 30
12344: PUSH
12345: LD_INT 26
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PUSH
12352: LD_INT 30
12354: PUSH
12355: LD_INT 28
12357: PUSH
12358: EMPTY
12359: LIST
12360: LIST
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PPUSH
12372: CALL_OW 69
12376: ST_TO_ADDR
// if not tmp then
12377: LD_VAR 0 2
12381: NOT
12382: IFFALSE 12386
// exit ;
12384: GO 12415
// for i in tmp do
12386: LD_ADDR_VAR 0 1
12390: PUSH
12391: LD_VAR 0 2
12395: PUSH
12396: FOR_IN
12397: IFFALSE 12413
// SetLives ( i , 1 ) ;
12399: LD_VAR 0 1
12403: PPUSH
12404: LD_INT 1
12406: PPUSH
12407: CALL_OW 234
12411: GO 12396
12413: POP
12414: POP
// end ;
12415: PPOPN 2
12417: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12418: LD_EXP 1
12422: PUSH
12423: LD_EXP 50
12427: AND
12428: IFFALSE 12715
12430: GO 12432
12432: DISABLE
12433: LD_INT 0
12435: PPUSH
12436: PPUSH
12437: PPUSH
// begin i := rand ( 1 , 7 ) ;
12438: LD_ADDR_VAR 0 1
12442: PUSH
12443: LD_INT 1
12445: PPUSH
12446: LD_INT 7
12448: PPUSH
12449: CALL_OW 12
12453: ST_TO_ADDR
// case i of 1 :
12454: LD_VAR 0 1
12458: PUSH
12459: LD_INT 1
12461: DOUBLE
12462: EQUAL
12463: IFTRUE 12467
12465: GO 12477
12467: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12468: LD_STRING earthquake(getX(game), 0, 32)
12470: PPUSH
12471: CALL_OW 559
12475: GO 12715
12477: LD_INT 2
12479: DOUBLE
12480: EQUAL
12481: IFTRUE 12485
12483: GO 12499
12485: POP
// begin ToLua ( displayStucuk(); ) ;
12486: LD_STRING displayStucuk();
12488: PPUSH
12489: CALL_OW 559
// ResetFog ;
12493: CALL_OW 335
// end ; 3 :
12497: GO 12715
12499: LD_INT 3
12501: DOUBLE
12502: EQUAL
12503: IFTRUE 12507
12505: GO 12611
12507: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12508: LD_ADDR_VAR 0 2
12512: PUSH
12513: LD_INT 22
12515: PUSH
12516: LD_OWVAR 2
12520: PUSH
12521: EMPTY
12522: LIST
12523: LIST
12524: PUSH
12525: LD_INT 25
12527: PUSH
12528: LD_INT 1
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PPUSH
12539: CALL_OW 69
12543: ST_TO_ADDR
// if not tmp then
12544: LD_VAR 0 2
12548: NOT
12549: IFFALSE 12553
// exit ;
12551: GO 12715
// un := tmp [ rand ( 1 , tmp ) ] ;
12553: LD_ADDR_VAR 0 3
12557: PUSH
12558: LD_VAR 0 2
12562: PUSH
12563: LD_INT 1
12565: PPUSH
12566: LD_VAR 0 2
12570: PPUSH
12571: CALL_OW 12
12575: ARRAY
12576: ST_TO_ADDR
// if Crawls ( un ) then
12577: LD_VAR 0 3
12581: PPUSH
12582: CALL_OW 318
12586: IFFALSE 12597
// ComWalk ( un ) ;
12588: LD_VAR 0 3
12592: PPUSH
12593: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12597: LD_VAR 0 3
12601: PPUSH
12602: LD_INT 8
12604: PPUSH
12605: CALL_OW 336
// end ; 4 :
12609: GO 12715
12611: LD_INT 4
12613: DOUBLE
12614: EQUAL
12615: IFTRUE 12619
12617: GO 12693
12619: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12620: LD_ADDR_VAR 0 2
12624: PUSH
12625: LD_INT 22
12627: PUSH
12628: LD_OWVAR 2
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: PUSH
12637: LD_INT 30
12639: PUSH
12640: LD_INT 29
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: PPUSH
12651: CALL_OW 69
12655: ST_TO_ADDR
// if not tmp then
12656: LD_VAR 0 2
12660: NOT
12661: IFFALSE 12665
// exit ;
12663: GO 12715
// CenterNowOnUnits ( tmp [ 1 ] ) ;
12665: LD_VAR 0 2
12669: PUSH
12670: LD_INT 1
12672: ARRAY
12673: PPUSH
12674: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
12678: LD_VAR 0 2
12682: PUSH
12683: LD_INT 1
12685: ARRAY
12686: PPUSH
12687: CALL_OW 65
// end ; 5 .. 7 :
12691: GO 12715
12693: LD_INT 5
12695: DOUBLE
12696: GREATEREQUAL
12697: IFFALSE 12705
12699: LD_INT 7
12701: DOUBLE
12702: LESSEQUAL
12703: IFTRUE 12707
12705: GO 12714
12707: POP
// StreamSibBomb ; end ;
12708: CALL 8952 0 0
12712: GO 12715
12714: POP
// end ;
12715: PPOPN 3
12717: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12718: LD_EXP 1
12722: PUSH
12723: LD_EXP 51
12727: AND
12728: IFFALSE 12884
12730: GO 12732
12732: DISABLE
12733: LD_INT 0
12735: PPUSH
12736: PPUSH
12737: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12738: LD_ADDR_VAR 0 2
12742: PUSH
12743: LD_INT 81
12745: PUSH
12746: LD_OWVAR 2
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: PUSH
12755: LD_INT 2
12757: PUSH
12758: LD_INT 21
12760: PUSH
12761: LD_INT 1
12763: PUSH
12764: EMPTY
12765: LIST
12766: LIST
12767: PUSH
12768: LD_INT 21
12770: PUSH
12771: LD_INT 2
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: LIST
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PPUSH
12787: CALL_OW 69
12791: ST_TO_ADDR
// if not tmp then
12792: LD_VAR 0 2
12796: NOT
12797: IFFALSE 12801
// exit ;
12799: GO 12884
// p := 0 ;
12801: LD_ADDR_VAR 0 3
12805: PUSH
12806: LD_INT 0
12808: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12809: LD_INT 35
12811: PPUSH
12812: CALL_OW 67
// p := p + 1 ;
12816: LD_ADDR_VAR 0 3
12820: PUSH
12821: LD_VAR 0 3
12825: PUSH
12826: LD_INT 1
12828: PLUS
12829: ST_TO_ADDR
// for i in tmp do
12830: LD_ADDR_VAR 0 1
12834: PUSH
12835: LD_VAR 0 2
12839: PUSH
12840: FOR_IN
12841: IFFALSE 12872
// if GetLives ( i ) < 1000 then
12843: LD_VAR 0 1
12847: PPUSH
12848: CALL_OW 256
12852: PUSH
12853: LD_INT 1000
12855: LESS
12856: IFFALSE 12870
// SetLives ( i , 1000 ) ;
12858: LD_VAR 0 1
12862: PPUSH
12863: LD_INT 1000
12865: PPUSH
12866: CALL_OW 234
12870: GO 12840
12872: POP
12873: POP
// until p > 20 ;
12874: LD_VAR 0 3
12878: PUSH
12879: LD_INT 20
12881: GREATER
12882: IFFALSE 12809
// end ;
12884: PPOPN 3
12886: END
// every 0 0$1 trigger StreamModeActive and sTime do
12887: LD_EXP 1
12891: PUSH
12892: LD_EXP 52
12896: AND
12897: IFFALSE 12932
12899: GO 12901
12901: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
12902: LD_INT 28
12904: PPUSH
12905: LD_OWVAR 2
12909: PPUSH
12910: LD_INT 2
12912: PPUSH
12913: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
12917: LD_INT 30
12919: PPUSH
12920: LD_OWVAR 2
12924: PPUSH
12925: LD_INT 2
12927: PPUSH
12928: CALL_OW 322
// end ;
12932: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
12933: LD_EXP 1
12937: PUSH
12938: LD_EXP 53
12942: AND
12943: IFFALSE 13064
12945: GO 12947
12947: DISABLE
12948: LD_INT 0
12950: PPUSH
12951: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12952: LD_ADDR_VAR 0 2
12956: PUSH
12957: LD_INT 22
12959: PUSH
12960: LD_OWVAR 2
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: PUSH
12969: LD_INT 21
12971: PUSH
12972: LD_INT 1
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: PUSH
12979: LD_INT 3
12981: PUSH
12982: LD_INT 23
12984: PUSH
12985: LD_INT 0
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: LIST
13000: PPUSH
13001: CALL_OW 69
13005: ST_TO_ADDR
// if not tmp then
13006: LD_VAR 0 2
13010: NOT
13011: IFFALSE 13015
// exit ;
13013: GO 13064
// for i in tmp do
13015: LD_ADDR_VAR 0 1
13019: PUSH
13020: LD_VAR 0 2
13024: PUSH
13025: FOR_IN
13026: IFFALSE 13062
// begin if Crawls ( i ) then
13028: LD_VAR 0 1
13032: PPUSH
13033: CALL_OW 318
13037: IFFALSE 13048
// ComWalk ( i ) ;
13039: LD_VAR 0 1
13043: PPUSH
13044: CALL_OW 138
// SetClass ( i , 2 ) ;
13048: LD_VAR 0 1
13052: PPUSH
13053: LD_INT 2
13055: PPUSH
13056: CALL_OW 336
// end ;
13060: GO 13025
13062: POP
13063: POP
// end ;
13064: PPOPN 2
13066: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13067: LD_EXP 1
13071: PUSH
13072: LD_EXP 54
13076: AND
13077: IFFALSE 13365
13079: GO 13081
13081: DISABLE
13082: LD_INT 0
13084: PPUSH
13085: PPUSH
13086: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13087: LD_OWVAR 2
13091: PPUSH
13092: LD_INT 9
13094: PPUSH
13095: LD_INT 1
13097: PPUSH
13098: LD_INT 1
13100: PPUSH
13101: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13105: LD_INT 9
13107: PPUSH
13108: LD_OWVAR 2
13112: PPUSH
13113: CALL_OW 343
// uc_side := 9 ;
13117: LD_ADDR_OWVAR 20
13121: PUSH
13122: LD_INT 9
13124: ST_TO_ADDR
// uc_nation := 2 ;
13125: LD_ADDR_OWVAR 21
13129: PUSH
13130: LD_INT 2
13132: ST_TO_ADDR
// hc_name := Dark Warrior ;
13133: LD_ADDR_OWVAR 26
13137: PUSH
13138: LD_STRING Dark Warrior
13140: ST_TO_ADDR
// hc_gallery :=  ;
13141: LD_ADDR_OWVAR 33
13145: PUSH
13146: LD_STRING 
13148: ST_TO_ADDR
// hc_noskilllimit := true ;
13149: LD_ADDR_OWVAR 76
13153: PUSH
13154: LD_INT 1
13156: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13157: LD_ADDR_OWVAR 31
13161: PUSH
13162: LD_INT 30
13164: PUSH
13165: LD_INT 30
13167: PUSH
13168: LD_INT 30
13170: PUSH
13171: LD_INT 30
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: ST_TO_ADDR
// un := CreateHuman ;
13180: LD_ADDR_VAR 0 3
13184: PUSH
13185: CALL_OW 44
13189: ST_TO_ADDR
// hc_noskilllimit := false ;
13190: LD_ADDR_OWVAR 76
13194: PUSH
13195: LD_INT 0
13197: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13198: LD_VAR 0 3
13202: PPUSH
13203: LD_INT 1
13205: PPUSH
13206: CALL_OW 51
// ToLua ( playRanger() ) ;
13210: LD_STRING playRanger()
13212: PPUSH
13213: CALL_OW 559
// p := 0 ;
13217: LD_ADDR_VAR 0 2
13221: PUSH
13222: LD_INT 0
13224: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13225: LD_INT 35
13227: PPUSH
13228: CALL_OW 67
// p := p + 1 ;
13232: LD_ADDR_VAR 0 2
13236: PUSH
13237: LD_VAR 0 2
13241: PUSH
13242: LD_INT 1
13244: PLUS
13245: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13246: LD_VAR 0 3
13250: PPUSH
13251: CALL_OW 256
13255: PUSH
13256: LD_INT 1000
13258: LESS
13259: IFFALSE 13273
// SetLives ( un , 1000 ) ;
13261: LD_VAR 0 3
13265: PPUSH
13266: LD_INT 1000
13268: PPUSH
13269: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13273: LD_VAR 0 3
13277: PPUSH
13278: LD_INT 81
13280: PUSH
13281: LD_OWVAR 2
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: PUSH
13290: LD_INT 91
13292: PUSH
13293: LD_VAR 0 3
13297: PUSH
13298: LD_INT 30
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: LIST
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PPUSH
13310: CALL_OW 69
13314: PPUSH
13315: LD_VAR 0 3
13319: PPUSH
13320: CALL_OW 74
13324: PPUSH
13325: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
13329: LD_VAR 0 2
13333: PUSH
13334: LD_INT 80
13336: GREATER
13337: PUSH
13338: LD_VAR 0 3
13342: PPUSH
13343: CALL_OW 301
13347: OR
13348: IFFALSE 13225
// if un then
13350: LD_VAR 0 3
13354: IFFALSE 13365
// RemoveUnit ( un ) ;
13356: LD_VAR 0 3
13360: PPUSH
13361: CALL_OW 64
// end ;
13365: PPOPN 3
13367: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
13368: LD_EXP 55
13372: IFFALSE 13488
13374: GO 13376
13376: DISABLE
13377: LD_INT 0
13379: PPUSH
13380: PPUSH
13381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13382: LD_ADDR_VAR 0 2
13386: PUSH
13387: LD_INT 81
13389: PUSH
13390: LD_OWVAR 2
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: PUSH
13399: LD_INT 21
13401: PUSH
13402: LD_INT 1
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: PPUSH
13413: CALL_OW 69
13417: ST_TO_ADDR
// ToLua ( playComputer() ) ;
13418: LD_STRING playComputer()
13420: PPUSH
13421: CALL_OW 559
// if not tmp then
13425: LD_VAR 0 2
13429: NOT
13430: IFFALSE 13434
// exit ;
13432: GO 13488
// for i in tmp do
13434: LD_ADDR_VAR 0 1
13438: PUSH
13439: LD_VAR 0 2
13443: PUSH
13444: FOR_IN
13445: IFFALSE 13486
// for j := 1 to 4 do
13447: LD_ADDR_VAR 0 3
13451: PUSH
13452: DOUBLE
13453: LD_INT 1
13455: DEC
13456: ST_TO_ADDR
13457: LD_INT 4
13459: PUSH
13460: FOR_TO
13461: IFFALSE 13482
// SetSkill ( i , j , 10 ) ;
13463: LD_VAR 0 1
13467: PPUSH
13468: LD_VAR 0 3
13472: PPUSH
13473: LD_INT 10
13475: PPUSH
13476: CALL_OW 237
13480: GO 13460
13482: POP
13483: POP
13484: GO 13444
13486: POP
13487: POP
// end ;
13488: PPOPN 3
13490: END
// every 0 0$1 trigger s30 do var i , tmp ;
13491: LD_EXP 56
13495: IFFALSE 13564
13497: GO 13499
13499: DISABLE
13500: LD_INT 0
13502: PPUSH
13503: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13504: LD_ADDR_VAR 0 2
13508: PUSH
13509: LD_INT 22
13511: PUSH
13512: LD_OWVAR 2
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PPUSH
13521: CALL_OW 69
13525: ST_TO_ADDR
// if not tmp then
13526: LD_VAR 0 2
13530: NOT
13531: IFFALSE 13535
// exit ;
13533: GO 13564
// for i in tmp do
13535: LD_ADDR_VAR 0 1
13539: PUSH
13540: LD_VAR 0 2
13544: PUSH
13545: FOR_IN
13546: IFFALSE 13562
// SetLives ( i , 300 ) ;
13548: LD_VAR 0 1
13552: PPUSH
13553: LD_INT 300
13555: PPUSH
13556: CALL_OW 234
13560: GO 13545
13562: POP
13563: POP
// end ;
13564: PPOPN 2
13566: END
// every 0 0$1 trigger s60 do var i , tmp ;
13567: LD_EXP 57
13571: IFFALSE 13640
13573: GO 13575
13575: DISABLE
13576: LD_INT 0
13578: PPUSH
13579: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13580: LD_ADDR_VAR 0 2
13584: PUSH
13585: LD_INT 22
13587: PUSH
13588: LD_OWVAR 2
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: PPUSH
13597: CALL_OW 69
13601: ST_TO_ADDR
// if not tmp then
13602: LD_VAR 0 2
13606: NOT
13607: IFFALSE 13611
// exit ;
13609: GO 13640
// for i in tmp do
13611: LD_ADDR_VAR 0 1
13615: PUSH
13616: LD_VAR 0 2
13620: PUSH
13621: FOR_IN
13622: IFFALSE 13638
// SetLives ( i , 600 ) ;
13624: LD_VAR 0 1
13628: PPUSH
13629: LD_INT 600
13631: PPUSH
13632: CALL_OW 234
13636: GO 13621
13638: POP
13639: POP
// end ;
13640: PPOPN 2
13642: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13643: LD_INT 0
13645: PPUSH
// case cmd of 301 :
13646: LD_VAR 0 1
13650: PUSH
13651: LD_INT 301
13653: DOUBLE
13654: EQUAL
13655: IFTRUE 13659
13657: GO 13691
13659: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
13660: LD_VAR 0 6
13664: PPUSH
13665: LD_VAR 0 7
13669: PPUSH
13670: LD_VAR 0 8
13674: PPUSH
13675: LD_VAR 0 4
13679: PPUSH
13680: LD_VAR 0 5
13684: PPUSH
13685: CALL 14892 0 5
13689: GO 13812
13691: LD_INT 302
13693: DOUBLE
13694: EQUAL
13695: IFTRUE 13699
13697: GO 13736
13699: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
13700: LD_VAR 0 6
13704: PPUSH
13705: LD_VAR 0 7
13709: PPUSH
13710: LD_VAR 0 8
13714: PPUSH
13715: LD_VAR 0 9
13719: PPUSH
13720: LD_VAR 0 4
13724: PPUSH
13725: LD_VAR 0 5
13729: PPUSH
13730: CALL 14983 0 6
13734: GO 13812
13736: LD_INT 303
13738: DOUBLE
13739: EQUAL
13740: IFTRUE 13744
13742: GO 13781
13744: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
13745: LD_VAR 0 6
13749: PPUSH
13750: LD_VAR 0 7
13754: PPUSH
13755: LD_VAR 0 8
13759: PPUSH
13760: LD_VAR 0 9
13764: PPUSH
13765: LD_VAR 0 4
13769: PPUSH
13770: LD_VAR 0 5
13774: PPUSH
13775: CALL 13817 0 6
13779: GO 13812
13781: LD_INT 304
13783: DOUBLE
13784: EQUAL
13785: IFTRUE 13789
13787: GO 13811
13789: POP
// hHackTeleport ( unit , x , y ) ; end ;
13790: LD_VAR 0 2
13794: PPUSH
13795: LD_VAR 0 4
13799: PPUSH
13800: LD_VAR 0 5
13804: PPUSH
13805: CALL 15576 0 3
13809: GO 13812
13811: POP
// end ;
13812: LD_VAR 0 12
13816: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
13817: LD_INT 0
13819: PPUSH
13820: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
13821: LD_VAR 0 1
13825: PUSH
13826: LD_INT 1
13828: LESS
13829: PUSH
13830: LD_VAR 0 1
13834: PUSH
13835: LD_INT 3
13837: GREATER
13838: OR
13839: PUSH
13840: LD_VAR 0 5
13844: PPUSH
13845: LD_VAR 0 6
13849: PPUSH
13850: CALL_OW 428
13854: OR
13855: IFFALSE 13859
// exit ;
13857: GO 14579
// uc_side := your_side ;
13859: LD_ADDR_OWVAR 20
13863: PUSH
13864: LD_OWVAR 2
13868: ST_TO_ADDR
// uc_nation := nation ;
13869: LD_ADDR_OWVAR 21
13873: PUSH
13874: LD_VAR 0 1
13878: ST_TO_ADDR
// bc_level = 1 ;
13879: LD_ADDR_OWVAR 43
13883: PUSH
13884: LD_INT 1
13886: ST_TO_ADDR
// case btype of 1 :
13887: LD_VAR 0 2
13891: PUSH
13892: LD_INT 1
13894: DOUBLE
13895: EQUAL
13896: IFTRUE 13900
13898: GO 13911
13900: POP
// bc_type := b_depot ; 2 :
13901: LD_ADDR_OWVAR 42
13905: PUSH
13906: LD_INT 0
13908: ST_TO_ADDR
13909: GO 14523
13911: LD_INT 2
13913: DOUBLE
13914: EQUAL
13915: IFTRUE 13919
13917: GO 13930
13919: POP
// bc_type := b_warehouse ; 3 :
13920: LD_ADDR_OWVAR 42
13924: PUSH
13925: LD_INT 1
13927: ST_TO_ADDR
13928: GO 14523
13930: LD_INT 3
13932: DOUBLE
13933: EQUAL
13934: IFTRUE 13938
13936: GO 13949
13938: POP
// bc_type := b_lab ; 4 .. 9 :
13939: LD_ADDR_OWVAR 42
13943: PUSH
13944: LD_INT 6
13946: ST_TO_ADDR
13947: GO 14523
13949: LD_INT 4
13951: DOUBLE
13952: GREATEREQUAL
13953: IFFALSE 13961
13955: LD_INT 9
13957: DOUBLE
13958: LESSEQUAL
13959: IFTRUE 13963
13961: GO 14015
13963: POP
// begin bc_type := b_lab_half ;
13964: LD_ADDR_OWVAR 42
13968: PUSH
13969: LD_INT 7
13971: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
13972: LD_ADDR_OWVAR 44
13976: PUSH
13977: LD_INT 10
13979: PUSH
13980: LD_INT 11
13982: PUSH
13983: LD_INT 12
13985: PUSH
13986: LD_INT 15
13988: PUSH
13989: LD_INT 14
13991: PUSH
13992: LD_INT 13
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: PUSH
14003: LD_VAR 0 2
14007: PUSH
14008: LD_INT 3
14010: MINUS
14011: ARRAY
14012: ST_TO_ADDR
// end ; 10 .. 13 :
14013: GO 14523
14015: LD_INT 10
14017: DOUBLE
14018: GREATEREQUAL
14019: IFFALSE 14027
14021: LD_INT 13
14023: DOUBLE
14024: LESSEQUAL
14025: IFTRUE 14029
14027: GO 14106
14029: POP
// begin bc_type := b_lab_full ;
14030: LD_ADDR_OWVAR 42
14034: PUSH
14035: LD_INT 8
14037: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14038: LD_ADDR_OWVAR 44
14042: PUSH
14043: LD_INT 10
14045: PUSH
14046: LD_INT 12
14048: PUSH
14049: LD_INT 14
14051: PUSH
14052: LD_INT 13
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: PUSH
14061: LD_VAR 0 2
14065: PUSH
14066: LD_INT 9
14068: MINUS
14069: ARRAY
14070: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14071: LD_ADDR_OWVAR 45
14075: PUSH
14076: LD_INT 11
14078: PUSH
14079: LD_INT 15
14081: PUSH
14082: LD_INT 12
14084: PUSH
14085: LD_INT 15
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: PUSH
14094: LD_VAR 0 2
14098: PUSH
14099: LD_INT 9
14101: MINUS
14102: ARRAY
14103: ST_TO_ADDR
// end ; 14 :
14104: GO 14523
14106: LD_INT 14
14108: DOUBLE
14109: EQUAL
14110: IFTRUE 14114
14112: GO 14125
14114: POP
// bc_type := b_workshop ; 15 :
14115: LD_ADDR_OWVAR 42
14119: PUSH
14120: LD_INT 2
14122: ST_TO_ADDR
14123: GO 14523
14125: LD_INT 15
14127: DOUBLE
14128: EQUAL
14129: IFTRUE 14133
14131: GO 14144
14133: POP
// bc_type := b_factory ; 16 :
14134: LD_ADDR_OWVAR 42
14138: PUSH
14139: LD_INT 3
14141: ST_TO_ADDR
14142: GO 14523
14144: LD_INT 16
14146: DOUBLE
14147: EQUAL
14148: IFTRUE 14152
14150: GO 14163
14152: POP
// bc_type := b_ext_gun ; 17 :
14153: LD_ADDR_OWVAR 42
14157: PUSH
14158: LD_INT 17
14160: ST_TO_ADDR
14161: GO 14523
14163: LD_INT 17
14165: DOUBLE
14166: EQUAL
14167: IFTRUE 14171
14169: GO 14199
14171: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14172: LD_ADDR_OWVAR 42
14176: PUSH
14177: LD_INT 19
14179: PUSH
14180: LD_INT 23
14182: PUSH
14183: LD_INT 19
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: LIST
14190: PUSH
14191: LD_VAR 0 1
14195: ARRAY
14196: ST_TO_ADDR
14197: GO 14523
14199: LD_INT 18
14201: DOUBLE
14202: EQUAL
14203: IFTRUE 14207
14205: GO 14218
14207: POP
// bc_type := b_ext_radar ; 19 :
14208: LD_ADDR_OWVAR 42
14212: PUSH
14213: LD_INT 20
14215: ST_TO_ADDR
14216: GO 14523
14218: LD_INT 19
14220: DOUBLE
14221: EQUAL
14222: IFTRUE 14226
14224: GO 14237
14226: POP
// bc_type := b_ext_radio ; 20 :
14227: LD_ADDR_OWVAR 42
14231: PUSH
14232: LD_INT 22
14234: ST_TO_ADDR
14235: GO 14523
14237: LD_INT 20
14239: DOUBLE
14240: EQUAL
14241: IFTRUE 14245
14243: GO 14256
14245: POP
// bc_type := b_ext_siberium ; 21 :
14246: LD_ADDR_OWVAR 42
14250: PUSH
14251: LD_INT 21
14253: ST_TO_ADDR
14254: GO 14523
14256: LD_INT 21
14258: DOUBLE
14259: EQUAL
14260: IFTRUE 14264
14262: GO 14275
14264: POP
// bc_type := b_ext_computer ; 22 :
14265: LD_ADDR_OWVAR 42
14269: PUSH
14270: LD_INT 24
14272: ST_TO_ADDR
14273: GO 14523
14275: LD_INT 22
14277: DOUBLE
14278: EQUAL
14279: IFTRUE 14283
14281: GO 14294
14283: POP
// bc_type := b_ext_track ; 23 :
14284: LD_ADDR_OWVAR 42
14288: PUSH
14289: LD_INT 16
14291: ST_TO_ADDR
14292: GO 14523
14294: LD_INT 23
14296: DOUBLE
14297: EQUAL
14298: IFTRUE 14302
14300: GO 14313
14302: POP
// bc_type := b_ext_laser ; 24 :
14303: LD_ADDR_OWVAR 42
14307: PUSH
14308: LD_INT 25
14310: ST_TO_ADDR
14311: GO 14523
14313: LD_INT 24
14315: DOUBLE
14316: EQUAL
14317: IFTRUE 14321
14319: GO 14332
14321: POP
// bc_type := b_control_tower ; 25 :
14322: LD_ADDR_OWVAR 42
14326: PUSH
14327: LD_INT 36
14329: ST_TO_ADDR
14330: GO 14523
14332: LD_INT 25
14334: DOUBLE
14335: EQUAL
14336: IFTRUE 14340
14338: GO 14351
14340: POP
// bc_type := b_breastwork ; 26 :
14341: LD_ADDR_OWVAR 42
14345: PUSH
14346: LD_INT 31
14348: ST_TO_ADDR
14349: GO 14523
14351: LD_INT 26
14353: DOUBLE
14354: EQUAL
14355: IFTRUE 14359
14357: GO 14370
14359: POP
// bc_type := b_bunker ; 27 :
14360: LD_ADDR_OWVAR 42
14364: PUSH
14365: LD_INT 32
14367: ST_TO_ADDR
14368: GO 14523
14370: LD_INT 27
14372: DOUBLE
14373: EQUAL
14374: IFTRUE 14378
14376: GO 14389
14378: POP
// bc_type := b_turret ; 28 :
14379: LD_ADDR_OWVAR 42
14383: PUSH
14384: LD_INT 33
14386: ST_TO_ADDR
14387: GO 14523
14389: LD_INT 28
14391: DOUBLE
14392: EQUAL
14393: IFTRUE 14397
14395: GO 14408
14397: POP
// bc_type := b_armoury ; 29 :
14398: LD_ADDR_OWVAR 42
14402: PUSH
14403: LD_INT 4
14405: ST_TO_ADDR
14406: GO 14523
14408: LD_INT 29
14410: DOUBLE
14411: EQUAL
14412: IFTRUE 14416
14414: GO 14427
14416: POP
// bc_type := b_barracks ; 30 :
14417: LD_ADDR_OWVAR 42
14421: PUSH
14422: LD_INT 5
14424: ST_TO_ADDR
14425: GO 14523
14427: LD_INT 30
14429: DOUBLE
14430: EQUAL
14431: IFTRUE 14435
14433: GO 14446
14435: POP
// bc_type := b_solar_power ; 31 :
14436: LD_ADDR_OWVAR 42
14440: PUSH
14441: LD_INT 27
14443: ST_TO_ADDR
14444: GO 14523
14446: LD_INT 31
14448: DOUBLE
14449: EQUAL
14450: IFTRUE 14454
14452: GO 14465
14454: POP
// bc_type := b_oil_power ; 32 :
14455: LD_ADDR_OWVAR 42
14459: PUSH
14460: LD_INT 26
14462: ST_TO_ADDR
14463: GO 14523
14465: LD_INT 32
14467: DOUBLE
14468: EQUAL
14469: IFTRUE 14473
14471: GO 14484
14473: POP
// bc_type := b_siberite_power ; 33 :
14474: LD_ADDR_OWVAR 42
14478: PUSH
14479: LD_INT 28
14481: ST_TO_ADDR
14482: GO 14523
14484: LD_INT 33
14486: DOUBLE
14487: EQUAL
14488: IFTRUE 14492
14490: GO 14503
14492: POP
// bc_type := b_oil_mine ; 34 :
14493: LD_ADDR_OWVAR 42
14497: PUSH
14498: LD_INT 29
14500: ST_TO_ADDR
14501: GO 14523
14503: LD_INT 34
14505: DOUBLE
14506: EQUAL
14507: IFTRUE 14511
14509: GO 14522
14511: POP
// bc_type := b_siberite_mine ; end ;
14512: LD_ADDR_OWVAR 42
14516: PUSH
14517: LD_INT 30
14519: ST_TO_ADDR
14520: GO 14523
14522: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
14523: LD_ADDR_VAR 0 8
14527: PUSH
14528: LD_VAR 0 5
14532: PPUSH
14533: LD_VAR 0 6
14537: PPUSH
14538: LD_VAR 0 3
14542: PPUSH
14543: CALL_OW 47
14547: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
14548: LD_OWVAR 42
14552: PUSH
14553: LD_INT 32
14555: PUSH
14556: LD_INT 33
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: IN
14563: IFFALSE 14579
// PlaceWeaponTurret ( b , weapon ) ;
14565: LD_VAR 0 8
14569: PPUSH
14570: LD_VAR 0 4
14574: PPUSH
14575: CALL_OW 431
// end ;
14579: LD_VAR 0 7
14583: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
14584: LD_INT 0
14586: PPUSH
14587: PPUSH
14588: PPUSH
14589: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14590: LD_ADDR_VAR 0 4
14594: PUSH
14595: LD_INT 22
14597: PUSH
14598: LD_OWVAR 2
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: PUSH
14607: LD_INT 2
14609: PUSH
14610: LD_INT 30
14612: PUSH
14613: LD_INT 0
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: PUSH
14620: LD_INT 30
14622: PUSH
14623: LD_INT 1
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: LIST
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: PPUSH
14639: CALL_OW 69
14643: ST_TO_ADDR
// if not tmp then
14644: LD_VAR 0 4
14648: NOT
14649: IFFALSE 14653
// exit ;
14651: GO 14712
// for i in tmp do
14653: LD_ADDR_VAR 0 2
14657: PUSH
14658: LD_VAR 0 4
14662: PUSH
14663: FOR_IN
14664: IFFALSE 14710
// for j = 1 to 3 do
14666: LD_ADDR_VAR 0 3
14670: PUSH
14671: DOUBLE
14672: LD_INT 1
14674: DEC
14675: ST_TO_ADDR
14676: LD_INT 3
14678: PUSH
14679: FOR_TO
14680: IFFALSE 14706
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14682: LD_VAR 0 2
14686: PPUSH
14687: CALL_OW 274
14691: PPUSH
14692: LD_VAR 0 3
14696: PPUSH
14697: LD_INT 99999
14699: PPUSH
14700: CALL_OW 277
14704: GO 14679
14706: POP
14707: POP
14708: GO 14663
14710: POP
14711: POP
// end ;
14712: LD_VAR 0 1
14716: RET
// export function hHackSetLevel10 ; var i , j ; begin
14717: LD_INT 0
14719: PPUSH
14720: PPUSH
14721: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14722: LD_ADDR_VAR 0 2
14726: PUSH
14727: LD_INT 21
14729: PUSH
14730: LD_INT 1
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: PPUSH
14737: CALL_OW 69
14741: PUSH
14742: FOR_IN
14743: IFFALSE 14795
// if IsSelected ( i ) then
14745: LD_VAR 0 2
14749: PPUSH
14750: CALL_OW 306
14754: IFFALSE 14793
// begin for j := 1 to 4 do
14756: LD_ADDR_VAR 0 3
14760: PUSH
14761: DOUBLE
14762: LD_INT 1
14764: DEC
14765: ST_TO_ADDR
14766: LD_INT 4
14768: PUSH
14769: FOR_TO
14770: IFFALSE 14791
// SetSkill ( i , j , 10 ) ;
14772: LD_VAR 0 2
14776: PPUSH
14777: LD_VAR 0 3
14781: PPUSH
14782: LD_INT 10
14784: PPUSH
14785: CALL_OW 237
14789: GO 14769
14791: POP
14792: POP
// end ;
14793: GO 14742
14795: POP
14796: POP
// end ;
14797: LD_VAR 0 1
14801: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
14802: LD_INT 0
14804: PPUSH
14805: PPUSH
14806: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
14807: LD_ADDR_VAR 0 2
14811: PUSH
14812: LD_INT 22
14814: PUSH
14815: LD_OWVAR 2
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PUSH
14824: LD_INT 21
14826: PUSH
14827: LD_INT 1
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: PPUSH
14838: CALL_OW 69
14842: PUSH
14843: FOR_IN
14844: IFFALSE 14885
// begin for j := 1 to 4 do
14846: LD_ADDR_VAR 0 3
14850: PUSH
14851: DOUBLE
14852: LD_INT 1
14854: DEC
14855: ST_TO_ADDR
14856: LD_INT 4
14858: PUSH
14859: FOR_TO
14860: IFFALSE 14881
// SetSkill ( i , j , 10 ) ;
14862: LD_VAR 0 2
14866: PPUSH
14867: LD_VAR 0 3
14871: PPUSH
14872: LD_INT 10
14874: PPUSH
14875: CALL_OW 237
14879: GO 14859
14881: POP
14882: POP
// end ;
14883: GO 14843
14885: POP
14886: POP
// end ;
14887: LD_VAR 0 1
14891: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
14892: LD_INT 0
14894: PPUSH
// uc_side := your_side ;
14895: LD_ADDR_OWVAR 20
14899: PUSH
14900: LD_OWVAR 2
14904: ST_TO_ADDR
// uc_nation := nation ;
14905: LD_ADDR_OWVAR 21
14909: PUSH
14910: LD_VAR 0 1
14914: ST_TO_ADDR
// InitHc ;
14915: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
14919: LD_INT 0
14921: PPUSH
14922: LD_VAR 0 2
14926: PPUSH
14927: LD_VAR 0 3
14931: PPUSH
14932: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
14936: LD_VAR 0 4
14940: PPUSH
14941: LD_VAR 0 5
14945: PPUSH
14946: CALL_OW 428
14950: PUSH
14951: LD_INT 0
14953: EQUAL
14954: IFFALSE 14978
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
14956: CALL_OW 44
14960: PPUSH
14961: LD_VAR 0 4
14965: PPUSH
14966: LD_VAR 0 5
14970: PPUSH
14971: LD_INT 1
14973: PPUSH
14974: CALL_OW 48
// end ;
14978: LD_VAR 0 6
14982: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
14983: LD_INT 0
14985: PPUSH
14986: PPUSH
// uc_side := your_side ;
14987: LD_ADDR_OWVAR 20
14991: PUSH
14992: LD_OWVAR 2
14996: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
14997: LD_VAR 0 1
15001: PUSH
15002: LD_INT 1
15004: PUSH
15005: LD_INT 2
15007: PUSH
15008: LD_INT 3
15010: PUSH
15011: LD_INT 4
15013: PUSH
15014: LD_INT 5
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: IN
15024: IFFALSE 15036
// uc_nation := nation_american else
15026: LD_ADDR_OWVAR 21
15030: PUSH
15031: LD_INT 1
15033: ST_TO_ADDR
15034: GO 15079
// if chassis in [ 11 , 12 , 13 , 14 ] then
15036: LD_VAR 0 1
15040: PUSH
15041: LD_INT 11
15043: PUSH
15044: LD_INT 12
15046: PUSH
15047: LD_INT 13
15049: PUSH
15050: LD_INT 14
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: IN
15059: IFFALSE 15071
// uc_nation := nation_arabian else
15061: LD_ADDR_OWVAR 21
15065: PUSH
15066: LD_INT 2
15068: ST_TO_ADDR
15069: GO 15079
// uc_nation := nation_russian ;
15071: LD_ADDR_OWVAR 21
15075: PUSH
15076: LD_INT 3
15078: ST_TO_ADDR
// vc_chassis := chassis ;
15079: LD_ADDR_OWVAR 37
15083: PUSH
15084: LD_VAR 0 1
15088: ST_TO_ADDR
// vc_engine := engine ;
15089: LD_ADDR_OWVAR 39
15093: PUSH
15094: LD_VAR 0 2
15098: ST_TO_ADDR
// vc_control := control ;
15099: LD_ADDR_OWVAR 38
15103: PUSH
15104: LD_VAR 0 3
15108: ST_TO_ADDR
// vc_weapon := weapon ;
15109: LD_ADDR_OWVAR 40
15113: PUSH
15114: LD_VAR 0 4
15118: ST_TO_ADDR
// un := CreateVehicle ;
15119: LD_ADDR_VAR 0 8
15123: PUSH
15124: CALL_OW 45
15128: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15129: LD_VAR 0 8
15133: PPUSH
15134: LD_INT 0
15136: PPUSH
15137: LD_INT 5
15139: PPUSH
15140: CALL_OW 12
15144: PPUSH
15145: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15149: LD_VAR 0 8
15153: PPUSH
15154: LD_VAR 0 5
15158: PPUSH
15159: LD_VAR 0 6
15163: PPUSH
15164: LD_INT 1
15166: PPUSH
15167: CALL_OW 48
// end ;
15171: LD_VAR 0 7
15175: RET
// export hInvincible ; every 1 do
15176: GO 15178
15178: DISABLE
// hInvincible := [ ] ;
15179: LD_ADDR_EXP 58
15183: PUSH
15184: EMPTY
15185: ST_TO_ADDR
15186: END
// every 10 do var i ;
15187: GO 15189
15189: DISABLE
15190: LD_INT 0
15192: PPUSH
// begin enable ;
15193: ENABLE
// if not hInvincible then
15194: LD_EXP 58
15198: NOT
15199: IFFALSE 15203
// exit ;
15201: GO 15247
// for i in hInvincible do
15203: LD_ADDR_VAR 0 1
15207: PUSH
15208: LD_EXP 58
15212: PUSH
15213: FOR_IN
15214: IFFALSE 15245
// if GetLives ( i ) < 1000 then
15216: LD_VAR 0 1
15220: PPUSH
15221: CALL_OW 256
15225: PUSH
15226: LD_INT 1000
15228: LESS
15229: IFFALSE 15243
// SetLives ( i , 1000 ) ;
15231: LD_VAR 0 1
15235: PPUSH
15236: LD_INT 1000
15238: PPUSH
15239: CALL_OW 234
15243: GO 15213
15245: POP
15246: POP
// end ;
15247: PPOPN 1
15249: END
// export function hHackInvincible ; var i ; begin
15250: LD_INT 0
15252: PPUSH
15253: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15254: LD_ADDR_VAR 0 2
15258: PUSH
15259: LD_INT 2
15261: PUSH
15262: LD_INT 21
15264: PUSH
15265: LD_INT 1
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: LD_INT 21
15274: PUSH
15275: LD_INT 2
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: LIST
15286: PPUSH
15287: CALL_OW 69
15291: PUSH
15292: FOR_IN
15293: IFFALSE 15354
// if IsSelected ( i ) then
15295: LD_VAR 0 2
15299: PPUSH
15300: CALL_OW 306
15304: IFFALSE 15352
// begin if i in hInvincible then
15306: LD_VAR 0 2
15310: PUSH
15311: LD_EXP 58
15315: IN
15316: IFFALSE 15336
// hInvincible := hInvincible diff i else
15318: LD_ADDR_EXP 58
15322: PUSH
15323: LD_EXP 58
15327: PUSH
15328: LD_VAR 0 2
15332: DIFF
15333: ST_TO_ADDR
15334: GO 15352
// hInvincible := hInvincible union i ;
15336: LD_ADDR_EXP 58
15340: PUSH
15341: LD_EXP 58
15345: PUSH
15346: LD_VAR 0 2
15350: UNION
15351: ST_TO_ADDR
// end ;
15352: GO 15292
15354: POP
15355: POP
// end ;
15356: LD_VAR 0 1
15360: RET
// export function hHackInvisible ; var i , j ; begin
15361: LD_INT 0
15363: PPUSH
15364: PPUSH
15365: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15366: LD_ADDR_VAR 0 2
15370: PUSH
15371: LD_INT 21
15373: PUSH
15374: LD_INT 1
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: PPUSH
15381: CALL_OW 69
15385: PUSH
15386: FOR_IN
15387: IFFALSE 15411
// if IsSelected ( i ) then
15389: LD_VAR 0 2
15393: PPUSH
15394: CALL_OW 306
15398: IFFALSE 15409
// ComForceInvisible ( i ) ;
15400: LD_VAR 0 2
15404: PPUSH
15405: CALL_OW 496
15409: GO 15386
15411: POP
15412: POP
// end ;
15413: LD_VAR 0 1
15417: RET
// export function hHackChangeYourSide ; begin
15418: LD_INT 0
15420: PPUSH
// if your_side = 8 then
15421: LD_OWVAR 2
15425: PUSH
15426: LD_INT 8
15428: EQUAL
15429: IFFALSE 15441
// your_side := 0 else
15431: LD_ADDR_OWVAR 2
15435: PUSH
15436: LD_INT 0
15438: ST_TO_ADDR
15439: GO 15455
// your_side := your_side + 1 ;
15441: LD_ADDR_OWVAR 2
15445: PUSH
15446: LD_OWVAR 2
15450: PUSH
15451: LD_INT 1
15453: PLUS
15454: ST_TO_ADDR
// end ;
15455: LD_VAR 0 1
15459: RET
// export function hHackChangeUnitSide ; var i , j ; begin
15460: LD_INT 0
15462: PPUSH
15463: PPUSH
15464: PPUSH
// for i in all_units do
15465: LD_ADDR_VAR 0 2
15469: PUSH
15470: LD_OWVAR 3
15474: PUSH
15475: FOR_IN
15476: IFFALSE 15554
// if IsSelected ( i ) then
15478: LD_VAR 0 2
15482: PPUSH
15483: CALL_OW 306
15487: IFFALSE 15552
// begin j := GetSide ( i ) ;
15489: LD_ADDR_VAR 0 3
15493: PUSH
15494: LD_VAR 0 2
15498: PPUSH
15499: CALL_OW 255
15503: ST_TO_ADDR
// if j = 8 then
15504: LD_VAR 0 3
15508: PUSH
15509: LD_INT 8
15511: EQUAL
15512: IFFALSE 15524
// j := 0 else
15514: LD_ADDR_VAR 0 3
15518: PUSH
15519: LD_INT 0
15521: ST_TO_ADDR
15522: GO 15538
// j := j + 1 ;
15524: LD_ADDR_VAR 0 3
15528: PUSH
15529: LD_VAR 0 3
15533: PUSH
15534: LD_INT 1
15536: PLUS
15537: ST_TO_ADDR
// SetSide ( i , j ) ;
15538: LD_VAR 0 2
15542: PPUSH
15543: LD_VAR 0 3
15547: PPUSH
15548: CALL_OW 235
// end ;
15552: GO 15475
15554: POP
15555: POP
// end ;
15556: LD_VAR 0 1
15560: RET
// export function hHackFog ; begin
15561: LD_INT 0
15563: PPUSH
// FogOff ( true ) ;
15564: LD_INT 1
15566: PPUSH
15567: CALL_OW 344
// end ;
15571: LD_VAR 0 1
15575: RET
// export function hHackTeleport ( unit , x , y ) ; begin
15576: LD_INT 0
15578: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
15579: LD_VAR 0 1
15583: PPUSH
15584: LD_VAR 0 2
15588: PPUSH
15589: LD_VAR 0 3
15593: PPUSH
15594: LD_INT 1
15596: PPUSH
15597: LD_INT 1
15599: PPUSH
15600: CALL_OW 483
// CenterOnXY ( x , y ) ;
15604: LD_VAR 0 2
15608: PPUSH
15609: LD_VAR 0 3
15613: PPUSH
15614: CALL_OW 84
// end ;
15618: LD_VAR 0 4
15622: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
15623: LD_INT 0
15625: PPUSH
15626: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
15627: LD_VAR 0 1
15631: NOT
15632: PUSH
15633: LD_VAR 0 2
15637: PPUSH
15638: LD_VAR 0 3
15642: PPUSH
15643: CALL_OW 488
15647: NOT
15648: OR
15649: PUSH
15650: LD_VAR 0 1
15654: PPUSH
15655: CALL_OW 266
15659: PUSH
15660: LD_INT 3
15662: NONEQUAL
15663: PUSH
15664: LD_VAR 0 1
15668: PPUSH
15669: CALL_OW 247
15673: PUSH
15674: LD_INT 1
15676: EQUAL
15677: NOT
15678: AND
15679: OR
15680: IFFALSE 15684
// exit ;
15682: GO 15833
// if GetType ( factory ) = unit_human then
15684: LD_VAR 0 1
15688: PPUSH
15689: CALL_OW 247
15693: PUSH
15694: LD_INT 1
15696: EQUAL
15697: IFFALSE 15714
// factory := IsInUnit ( factory ) ;
15699: LD_ADDR_VAR 0 1
15703: PUSH
15704: LD_VAR 0 1
15708: PPUSH
15709: CALL_OW 310
15713: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
15714: LD_VAR 0 1
15718: PPUSH
15719: CALL_OW 266
15723: PUSH
15724: LD_INT 3
15726: NONEQUAL
15727: IFFALSE 15731
// exit ;
15729: GO 15833
// if HexInfo ( x , y ) = factory then
15731: LD_VAR 0 2
15735: PPUSH
15736: LD_VAR 0 3
15740: PPUSH
15741: CALL_OW 428
15745: PUSH
15746: LD_VAR 0 1
15750: EQUAL
15751: IFFALSE 15778
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
15753: LD_ADDR_EXP 59
15757: PUSH
15758: LD_EXP 59
15762: PPUSH
15763: LD_VAR 0 1
15767: PPUSH
15768: LD_INT 0
15770: PPUSH
15771: CALL_OW 1
15775: ST_TO_ADDR
15776: GO 15829
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
15778: LD_ADDR_EXP 59
15782: PUSH
15783: LD_EXP 59
15787: PPUSH
15788: LD_VAR 0 1
15792: PPUSH
15793: LD_VAR 0 1
15797: PPUSH
15798: CALL_OW 255
15802: PUSH
15803: LD_VAR 0 1
15807: PUSH
15808: LD_VAR 0 2
15812: PUSH
15813: LD_VAR 0 3
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: PPUSH
15824: CALL_OW 1
15828: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15829: CALL 15838 0 0
// end ;
15833: LD_VAR 0 4
15837: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
15838: LD_INT 0
15840: PPUSH
15841: PPUSH
15842: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
15843: LD_STRING resetFactoryWaypoint();
15845: PPUSH
15846: CALL_OW 559
// if factoryWaypoints then
15850: LD_EXP 59
15854: IFFALSE 15980
// begin list := PrepareArray ( factoryWaypoints ) ;
15856: LD_ADDR_VAR 0 3
15860: PUSH
15861: LD_EXP 59
15865: PPUSH
15866: CALL 62777 0 1
15870: ST_TO_ADDR
// for i := 1 to list do
15871: LD_ADDR_VAR 0 2
15875: PUSH
15876: DOUBLE
15877: LD_INT 1
15879: DEC
15880: ST_TO_ADDR
15881: LD_VAR 0 3
15885: PUSH
15886: FOR_TO
15887: IFFALSE 15978
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15889: LD_STRING setFactoryWaypointXY(
15891: PUSH
15892: LD_VAR 0 3
15896: PUSH
15897: LD_VAR 0 2
15901: ARRAY
15902: PUSH
15903: LD_INT 1
15905: ARRAY
15906: STR
15907: PUSH
15908: LD_STRING ,
15910: STR
15911: PUSH
15912: LD_VAR 0 3
15916: PUSH
15917: LD_VAR 0 2
15921: ARRAY
15922: PUSH
15923: LD_INT 2
15925: ARRAY
15926: STR
15927: PUSH
15928: LD_STRING ,
15930: STR
15931: PUSH
15932: LD_VAR 0 3
15936: PUSH
15937: LD_VAR 0 2
15941: ARRAY
15942: PUSH
15943: LD_INT 3
15945: ARRAY
15946: STR
15947: PUSH
15948: LD_STRING ,
15950: STR
15951: PUSH
15952: LD_VAR 0 3
15956: PUSH
15957: LD_VAR 0 2
15961: ARRAY
15962: PUSH
15963: LD_INT 4
15965: ARRAY
15966: STR
15967: PUSH
15968: LD_STRING )
15970: STR
15971: PPUSH
15972: CALL_OW 559
15976: GO 15886
15978: POP
15979: POP
// end ; end ;
15980: LD_VAR 0 1
15984: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
15985: LD_INT 0
15987: PPUSH
// if HexInfo ( x , y ) = warehouse then
15988: LD_VAR 0 2
15992: PPUSH
15993: LD_VAR 0 3
15997: PPUSH
15998: CALL_OW 428
16002: PUSH
16003: LD_VAR 0 1
16007: EQUAL
16008: IFFALSE 16035
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16010: LD_ADDR_EXP 60
16014: PUSH
16015: LD_EXP 60
16019: PPUSH
16020: LD_VAR 0 1
16024: PPUSH
16025: LD_INT 0
16027: PPUSH
16028: CALL_OW 1
16032: ST_TO_ADDR
16033: GO 16086
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16035: LD_ADDR_EXP 60
16039: PUSH
16040: LD_EXP 60
16044: PPUSH
16045: LD_VAR 0 1
16049: PPUSH
16050: LD_VAR 0 1
16054: PPUSH
16055: CALL_OW 255
16059: PUSH
16060: LD_VAR 0 1
16064: PUSH
16065: LD_VAR 0 2
16069: PUSH
16070: LD_VAR 0 3
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: PPUSH
16081: CALL_OW 1
16085: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16086: CALL 16095 0 0
// end ;
16090: LD_VAR 0 4
16094: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16095: LD_INT 0
16097: PPUSH
16098: PPUSH
16099: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16100: LD_STRING resetWarehouseGatheringPoints();
16102: PPUSH
16103: CALL_OW 559
// if warehouseGatheringPoints then
16107: LD_EXP 60
16111: IFFALSE 16237
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16113: LD_ADDR_VAR 0 3
16117: PUSH
16118: LD_EXP 60
16122: PPUSH
16123: CALL 62777 0 1
16127: ST_TO_ADDR
// for i := 1 to list do
16128: LD_ADDR_VAR 0 2
16132: PUSH
16133: DOUBLE
16134: LD_INT 1
16136: DEC
16137: ST_TO_ADDR
16138: LD_VAR 0 3
16142: PUSH
16143: FOR_TO
16144: IFFALSE 16235
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16146: LD_STRING setWarehouseGatheringPointXY(
16148: PUSH
16149: LD_VAR 0 3
16153: PUSH
16154: LD_VAR 0 2
16158: ARRAY
16159: PUSH
16160: LD_INT 1
16162: ARRAY
16163: STR
16164: PUSH
16165: LD_STRING ,
16167: STR
16168: PUSH
16169: LD_VAR 0 3
16173: PUSH
16174: LD_VAR 0 2
16178: ARRAY
16179: PUSH
16180: LD_INT 2
16182: ARRAY
16183: STR
16184: PUSH
16185: LD_STRING ,
16187: STR
16188: PUSH
16189: LD_VAR 0 3
16193: PUSH
16194: LD_VAR 0 2
16198: ARRAY
16199: PUSH
16200: LD_INT 3
16202: ARRAY
16203: STR
16204: PUSH
16205: LD_STRING ,
16207: STR
16208: PUSH
16209: LD_VAR 0 3
16213: PUSH
16214: LD_VAR 0 2
16218: ARRAY
16219: PUSH
16220: LD_INT 4
16222: ARRAY
16223: STR
16224: PUSH
16225: LD_STRING )
16227: STR
16228: PPUSH
16229: CALL_OW 559
16233: GO 16143
16235: POP
16236: POP
// end ; end ;
16237: LD_VAR 0 1
16241: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
16242: LD_EXP 60
16246: IFFALSE 16933
16248: GO 16250
16250: DISABLE
16251: LD_INT 0
16253: PPUSH
16254: PPUSH
16255: PPUSH
16256: PPUSH
16257: PPUSH
16258: PPUSH
16259: PPUSH
16260: PPUSH
16261: PPUSH
// begin enable ;
16262: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
16263: LD_ADDR_VAR 0 3
16267: PUSH
16268: LD_EXP 60
16272: PPUSH
16273: CALL 62777 0 1
16277: ST_TO_ADDR
// if not list then
16278: LD_VAR 0 3
16282: NOT
16283: IFFALSE 16287
// exit ;
16285: GO 16933
// for i := 1 to list do
16287: LD_ADDR_VAR 0 1
16291: PUSH
16292: DOUBLE
16293: LD_INT 1
16295: DEC
16296: ST_TO_ADDR
16297: LD_VAR 0 3
16301: PUSH
16302: FOR_TO
16303: IFFALSE 16931
// begin depot := list [ i ] [ 2 ] ;
16305: LD_ADDR_VAR 0 8
16309: PUSH
16310: LD_VAR 0 3
16314: PUSH
16315: LD_VAR 0 1
16319: ARRAY
16320: PUSH
16321: LD_INT 2
16323: ARRAY
16324: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
16325: LD_ADDR_VAR 0 5
16329: PUSH
16330: LD_VAR 0 3
16334: PUSH
16335: LD_VAR 0 1
16339: ARRAY
16340: PUSH
16341: LD_INT 1
16343: ARRAY
16344: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
16345: LD_VAR 0 8
16349: PPUSH
16350: CALL_OW 301
16354: PUSH
16355: LD_VAR 0 5
16359: PUSH
16360: LD_VAR 0 8
16364: PPUSH
16365: CALL_OW 255
16369: NONEQUAL
16370: OR
16371: IFFALSE 16400
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
16373: LD_ADDR_EXP 60
16377: PUSH
16378: LD_EXP 60
16382: PPUSH
16383: LD_VAR 0 8
16387: PPUSH
16388: LD_INT 0
16390: PPUSH
16391: CALL_OW 1
16395: ST_TO_ADDR
// exit ;
16396: POP
16397: POP
16398: GO 16933
// end ; x := list [ i ] [ 3 ] ;
16400: LD_ADDR_VAR 0 6
16404: PUSH
16405: LD_VAR 0 3
16409: PUSH
16410: LD_VAR 0 1
16414: ARRAY
16415: PUSH
16416: LD_INT 3
16418: ARRAY
16419: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
16420: LD_ADDR_VAR 0 7
16424: PUSH
16425: LD_VAR 0 3
16429: PUSH
16430: LD_VAR 0 1
16434: ARRAY
16435: PUSH
16436: LD_INT 4
16438: ARRAY
16439: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
16440: LD_ADDR_VAR 0 9
16444: PUSH
16445: LD_VAR 0 6
16449: PPUSH
16450: LD_VAR 0 7
16454: PPUSH
16455: LD_INT 16
16457: PPUSH
16458: CALL 61361 0 3
16462: ST_TO_ADDR
// if not cratesNearbyPoint then
16463: LD_VAR 0 9
16467: NOT
16468: IFFALSE 16474
// exit ;
16470: POP
16471: POP
16472: GO 16933
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
16474: LD_ADDR_VAR 0 4
16478: PUSH
16479: LD_INT 22
16481: PUSH
16482: LD_VAR 0 5
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PUSH
16491: LD_INT 3
16493: PUSH
16494: LD_INT 60
16496: PUSH
16497: EMPTY
16498: LIST
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: PUSH
16504: LD_INT 91
16506: PUSH
16507: LD_VAR 0 8
16511: PUSH
16512: LD_INT 6
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 2
16522: PUSH
16523: LD_INT 25
16525: PUSH
16526: LD_INT 2
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: LD_INT 25
16535: PUSH
16536: LD_INT 16
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: LIST
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: PPUSH
16554: CALL_OW 69
16558: PUSH
16559: LD_VAR 0 8
16563: PPUSH
16564: CALL_OW 313
16568: PPUSH
16569: LD_INT 3
16571: PUSH
16572: LD_INT 60
16574: PUSH
16575: EMPTY
16576: LIST
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: PUSH
16582: LD_INT 2
16584: PUSH
16585: LD_INT 25
16587: PUSH
16588: LD_INT 2
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PUSH
16595: LD_INT 25
16597: PUSH
16598: LD_INT 16
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: LIST
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PPUSH
16614: CALL_OW 72
16618: UNION
16619: ST_TO_ADDR
// if tmp then
16620: LD_VAR 0 4
16624: IFFALSE 16704
// begin tmp := ShrinkArray ( tmp , 3 ) ;
16626: LD_ADDR_VAR 0 4
16630: PUSH
16631: LD_VAR 0 4
16635: PPUSH
16636: LD_INT 3
16638: PPUSH
16639: CALL 59328 0 2
16643: ST_TO_ADDR
// for j in tmp do
16644: LD_ADDR_VAR 0 2
16648: PUSH
16649: LD_VAR 0 4
16653: PUSH
16654: FOR_IN
16655: IFFALSE 16698
// begin if IsInUnit ( j ) then
16657: LD_VAR 0 2
16661: PPUSH
16662: CALL_OW 310
16666: IFFALSE 16677
// ComExit ( j ) ;
16668: LD_VAR 0 2
16672: PPUSH
16673: CALL 59411 0 1
// AddComCollect ( j , x , y ) ;
16677: LD_VAR 0 2
16681: PPUSH
16682: LD_VAR 0 6
16686: PPUSH
16687: LD_VAR 0 7
16691: PPUSH
16692: CALL_OW 177
// end ;
16696: GO 16654
16698: POP
16699: POP
// exit ;
16700: POP
16701: POP
16702: GO 16933
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
16704: LD_ADDR_VAR 0 4
16708: PUSH
16709: LD_INT 22
16711: PUSH
16712: LD_VAR 0 5
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: PUSH
16721: LD_INT 91
16723: PUSH
16724: LD_VAR 0 8
16728: PUSH
16729: LD_INT 8
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 2
16739: PUSH
16740: LD_INT 34
16742: PUSH
16743: LD_INT 12
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: PUSH
16750: LD_INT 34
16752: PUSH
16753: LD_INT 51
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: LD_INT 34
16762: PUSH
16763: LD_INT 32
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: PUSH
16770: LD_INT 34
16772: PUSH
16773: LD_EXP 73
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: LIST
16793: PPUSH
16794: CALL_OW 69
16798: ST_TO_ADDR
// if tmp then
16799: LD_VAR 0 4
16803: IFFALSE 16929
// begin for j in tmp do
16805: LD_ADDR_VAR 0 2
16809: PUSH
16810: LD_VAR 0 4
16814: PUSH
16815: FOR_IN
16816: IFFALSE 16927
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
16818: LD_VAR 0 2
16822: PPUSH
16823: CALL_OW 262
16827: PUSH
16828: LD_INT 3
16830: EQUAL
16831: PUSH
16832: LD_VAR 0 2
16836: PPUSH
16837: CALL_OW 261
16841: PUSH
16842: LD_INT 20
16844: GREATER
16845: OR
16846: PUSH
16847: LD_VAR 0 2
16851: PPUSH
16852: CALL_OW 314
16856: NOT
16857: AND
16858: PUSH
16859: LD_VAR 0 2
16863: PPUSH
16864: CALL_OW 263
16868: PUSH
16869: LD_INT 1
16871: NONEQUAL
16872: PUSH
16873: LD_VAR 0 2
16877: PPUSH
16878: CALL_OW 311
16882: OR
16883: AND
16884: IFFALSE 16925
// begin ComCollect ( j , x , y ) ;
16886: LD_VAR 0 2
16890: PPUSH
16891: LD_VAR 0 6
16895: PPUSH
16896: LD_VAR 0 7
16900: PPUSH
16901: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
16905: LD_VAR 0 2
16909: PPUSH
16910: LD_VAR 0 8
16914: PPUSH
16915: CALL_OW 172
// exit ;
16919: POP
16920: POP
16921: POP
16922: POP
16923: GO 16933
// end ;
16925: GO 16815
16927: POP
16928: POP
// end ; end ;
16929: GO 16302
16931: POP
16932: POP
// end ; end_of_file
16933: PPOPN 9
16935: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
16936: LD_INT 0
16938: PPUSH
16939: PPUSH
16940: PPUSH
16941: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
16942: LD_VAR 0 1
16946: PPUSH
16947: CALL_OW 264
16951: PUSH
16952: LD_EXP 76
16956: EQUAL
16957: IFFALSE 17029
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
16959: LD_INT 68
16961: PPUSH
16962: LD_VAR 0 1
16966: PPUSH
16967: CALL_OW 255
16971: PPUSH
16972: CALL_OW 321
16976: PUSH
16977: LD_INT 2
16979: EQUAL
16980: IFFALSE 16992
// eff := 70 else
16982: LD_ADDR_VAR 0 4
16986: PUSH
16987: LD_INT 70
16989: ST_TO_ADDR
16990: GO 17000
// eff := 30 ;
16992: LD_ADDR_VAR 0 4
16996: PUSH
16997: LD_INT 30
16999: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17000: LD_VAR 0 1
17004: PPUSH
17005: CALL_OW 250
17009: PPUSH
17010: LD_VAR 0 1
17014: PPUSH
17015: CALL_OW 251
17019: PPUSH
17020: LD_VAR 0 4
17024: PPUSH
17025: CALL_OW 495
// end ; end ;
17029: LD_VAR 0 2
17033: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17034: LD_INT 0
17036: PPUSH
// end ;
17037: LD_VAR 0 4
17041: RET
// export function SOS_Command ( cmd ) ; begin
17042: LD_INT 0
17044: PPUSH
// end ;
17045: LD_VAR 0 2
17049: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17050: LD_INT 0
17052: PPUSH
// end ;
17053: LD_VAR 0 6
17057: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
17058: LD_INT 0
17060: PPUSH
17061: PPUSH
// if not vehicle or not factory then
17062: LD_VAR 0 1
17066: NOT
17067: PUSH
17068: LD_VAR 0 2
17072: NOT
17073: OR
17074: IFFALSE 17078
// exit ;
17076: GO 17309
// if factoryWaypoints >= factory then
17078: LD_EXP 59
17082: PUSH
17083: LD_VAR 0 2
17087: GREATEREQUAL
17088: IFFALSE 17309
// if factoryWaypoints [ factory ] then
17090: LD_EXP 59
17094: PUSH
17095: LD_VAR 0 2
17099: ARRAY
17100: IFFALSE 17309
// begin if GetControl ( vehicle ) = control_manual then
17102: LD_VAR 0 1
17106: PPUSH
17107: CALL_OW 263
17111: PUSH
17112: LD_INT 1
17114: EQUAL
17115: IFFALSE 17196
// begin driver := IsDrivenBy ( vehicle ) ;
17117: LD_ADDR_VAR 0 4
17121: PUSH
17122: LD_VAR 0 1
17126: PPUSH
17127: CALL_OW 311
17131: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17132: LD_VAR 0 4
17136: PPUSH
17137: LD_EXP 59
17141: PUSH
17142: LD_VAR 0 2
17146: ARRAY
17147: PUSH
17148: LD_INT 3
17150: ARRAY
17151: PPUSH
17152: LD_EXP 59
17156: PUSH
17157: LD_VAR 0 2
17161: ARRAY
17162: PUSH
17163: LD_INT 4
17165: ARRAY
17166: PPUSH
17167: CALL_OW 171
// AddComExitVehicle ( driver ) ;
17171: LD_VAR 0 4
17175: PPUSH
17176: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
17180: LD_VAR 0 4
17184: PPUSH
17185: LD_VAR 0 2
17189: PPUSH
17190: CALL_OW 180
// end else
17194: GO 17309
// if GetControl ( vehicle ) = control_remote then
17196: LD_VAR 0 1
17200: PPUSH
17201: CALL_OW 263
17205: PUSH
17206: LD_INT 2
17208: EQUAL
17209: IFFALSE 17270
// begin wait ( 0 0$2 ) ;
17211: LD_INT 70
17213: PPUSH
17214: CALL_OW 67
// if Connect ( vehicle ) then
17218: LD_VAR 0 1
17222: PPUSH
17223: CALL 29739 0 1
17227: IFFALSE 17268
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17229: LD_VAR 0 1
17233: PPUSH
17234: LD_EXP 59
17238: PUSH
17239: LD_VAR 0 2
17243: ARRAY
17244: PUSH
17245: LD_INT 3
17247: ARRAY
17248: PPUSH
17249: LD_EXP 59
17253: PUSH
17254: LD_VAR 0 2
17258: ARRAY
17259: PUSH
17260: LD_INT 4
17262: ARRAY
17263: PPUSH
17264: CALL_OW 171
// end else
17268: GO 17309
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17270: LD_VAR 0 1
17274: PPUSH
17275: LD_EXP 59
17279: PUSH
17280: LD_VAR 0 2
17284: ARRAY
17285: PUSH
17286: LD_INT 3
17288: ARRAY
17289: PPUSH
17290: LD_EXP 59
17294: PUSH
17295: LD_VAR 0 2
17299: ARRAY
17300: PUSH
17301: LD_INT 4
17303: ARRAY
17304: PPUSH
17305: CALL_OW 171
// end ; end ;
17309: LD_VAR 0 3
17313: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
17314: LD_INT 0
17316: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
17317: LD_VAR 0 1
17321: PUSH
17322: LD_INT 250
17324: EQUAL
17325: PUSH
17326: LD_VAR 0 2
17330: PPUSH
17331: CALL_OW 264
17335: PUSH
17336: LD_EXP 79
17340: EQUAL
17341: AND
17342: IFFALSE 17363
// MinerPlaceMine ( unit , x , y ) ;
17344: LD_VAR 0 2
17348: PPUSH
17349: LD_VAR 0 4
17353: PPUSH
17354: LD_VAR 0 5
17358: PPUSH
17359: CALL 19762 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
17363: LD_VAR 0 1
17367: PUSH
17368: LD_INT 251
17370: EQUAL
17371: PUSH
17372: LD_VAR 0 2
17376: PPUSH
17377: CALL_OW 264
17381: PUSH
17382: LD_EXP 79
17386: EQUAL
17387: AND
17388: IFFALSE 17409
// MinerDetonateMine ( unit , x , y ) ;
17390: LD_VAR 0 2
17394: PPUSH
17395: LD_VAR 0 4
17399: PPUSH
17400: LD_VAR 0 5
17404: PPUSH
17405: CALL 20039 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
17409: LD_VAR 0 1
17413: PUSH
17414: LD_INT 252
17416: EQUAL
17417: PUSH
17418: LD_VAR 0 2
17422: PPUSH
17423: CALL_OW 264
17427: PUSH
17428: LD_EXP 79
17432: EQUAL
17433: AND
17434: IFFALSE 17455
// MinerCreateMinefield ( unit , x , y ) ;
17436: LD_VAR 0 2
17440: PPUSH
17441: LD_VAR 0 4
17445: PPUSH
17446: LD_VAR 0 5
17450: PPUSH
17451: CALL 20456 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
17455: LD_VAR 0 1
17459: PUSH
17460: LD_INT 253
17462: EQUAL
17463: PUSH
17464: LD_VAR 0 2
17468: PPUSH
17469: CALL_OW 257
17473: PUSH
17474: LD_INT 5
17476: EQUAL
17477: AND
17478: IFFALSE 17499
// ComBinocular ( unit , x , y ) ;
17480: LD_VAR 0 2
17484: PPUSH
17485: LD_VAR 0 4
17489: PPUSH
17490: LD_VAR 0 5
17494: PPUSH
17495: CALL 20827 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
17499: LD_VAR 0 1
17503: PUSH
17504: LD_INT 254
17506: EQUAL
17507: PUSH
17508: LD_VAR 0 2
17512: PPUSH
17513: CALL_OW 264
17517: PUSH
17518: LD_EXP 74
17522: EQUAL
17523: AND
17524: PUSH
17525: LD_VAR 0 3
17529: PPUSH
17530: CALL_OW 263
17534: PUSH
17535: LD_INT 3
17537: EQUAL
17538: AND
17539: IFFALSE 17555
// HackDestroyVehicle ( unit , selectedUnit ) ;
17541: LD_VAR 0 2
17545: PPUSH
17546: LD_VAR 0 3
17550: PPUSH
17551: CALL 19122 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
17555: LD_VAR 0 1
17559: PUSH
17560: LD_INT 255
17562: EQUAL
17563: PUSH
17564: LD_VAR 0 2
17568: PPUSH
17569: CALL_OW 264
17573: PUSH
17574: LD_INT 14
17576: PUSH
17577: LD_INT 53
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: IN
17584: AND
17585: PUSH
17586: LD_VAR 0 4
17590: PPUSH
17591: LD_VAR 0 5
17595: PPUSH
17596: CALL_OW 488
17600: AND
17601: IFFALSE 17625
// CutTreeXYR ( unit , x , y , 12 ) ;
17603: LD_VAR 0 2
17607: PPUSH
17608: LD_VAR 0 4
17612: PPUSH
17613: LD_VAR 0 5
17617: PPUSH
17618: LD_INT 12
17620: PPUSH
17621: CALL 17688 0 4
// if cmd = 256 then
17625: LD_VAR 0 1
17629: PUSH
17630: LD_INT 256
17632: EQUAL
17633: IFFALSE 17654
// SetFactoryWaypoint ( unit , x , y ) ;
17635: LD_VAR 0 2
17639: PPUSH
17640: LD_VAR 0 4
17644: PPUSH
17645: LD_VAR 0 5
17649: PPUSH
17650: CALL 15623 0 3
// if cmd = 257 then
17654: LD_VAR 0 1
17658: PUSH
17659: LD_INT 257
17661: EQUAL
17662: IFFALSE 17683
// SetWarehouseGatheringPoint ( unit , x , y ) ;
17664: LD_VAR 0 2
17668: PPUSH
17669: LD_VAR 0 4
17673: PPUSH
17674: LD_VAR 0 5
17678: PPUSH
17679: CALL 15985 0 3
// end ;
17683: LD_VAR 0 6
17687: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17688: LD_INT 0
17690: PPUSH
17691: PPUSH
17692: PPUSH
17693: PPUSH
17694: PPUSH
17695: PPUSH
17696: PPUSH
17697: PPUSH
17698: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
17699: LD_VAR 0 1
17703: NOT
17704: PUSH
17705: LD_VAR 0 2
17709: PPUSH
17710: LD_VAR 0 3
17714: PPUSH
17715: CALL_OW 488
17719: NOT
17720: OR
17721: PUSH
17722: LD_VAR 0 4
17726: NOT
17727: OR
17728: IFFALSE 17732
// exit ;
17730: GO 18072
// list := [ ] ;
17732: LD_ADDR_VAR 0 13
17736: PUSH
17737: EMPTY
17738: ST_TO_ADDR
// if x - r < 0 then
17739: LD_VAR 0 2
17743: PUSH
17744: LD_VAR 0 4
17748: MINUS
17749: PUSH
17750: LD_INT 0
17752: LESS
17753: IFFALSE 17765
// min_x := 0 else
17755: LD_ADDR_VAR 0 7
17759: PUSH
17760: LD_INT 0
17762: ST_TO_ADDR
17763: GO 17781
// min_x := x - r ;
17765: LD_ADDR_VAR 0 7
17769: PUSH
17770: LD_VAR 0 2
17774: PUSH
17775: LD_VAR 0 4
17779: MINUS
17780: ST_TO_ADDR
// if y - r < 0 then
17781: LD_VAR 0 3
17785: PUSH
17786: LD_VAR 0 4
17790: MINUS
17791: PUSH
17792: LD_INT 0
17794: LESS
17795: IFFALSE 17807
// min_y := 0 else
17797: LD_ADDR_VAR 0 8
17801: PUSH
17802: LD_INT 0
17804: ST_TO_ADDR
17805: GO 17823
// min_y := y - r ;
17807: LD_ADDR_VAR 0 8
17811: PUSH
17812: LD_VAR 0 3
17816: PUSH
17817: LD_VAR 0 4
17821: MINUS
17822: ST_TO_ADDR
// max_x := x + r ;
17823: LD_ADDR_VAR 0 9
17827: PUSH
17828: LD_VAR 0 2
17832: PUSH
17833: LD_VAR 0 4
17837: PLUS
17838: ST_TO_ADDR
// max_y := y + r ;
17839: LD_ADDR_VAR 0 10
17843: PUSH
17844: LD_VAR 0 3
17848: PUSH
17849: LD_VAR 0 4
17853: PLUS
17854: ST_TO_ADDR
// for _x = min_x to max_x do
17855: LD_ADDR_VAR 0 11
17859: PUSH
17860: DOUBLE
17861: LD_VAR 0 7
17865: DEC
17866: ST_TO_ADDR
17867: LD_VAR 0 9
17871: PUSH
17872: FOR_TO
17873: IFFALSE 17990
// for _y = min_y to max_y do
17875: LD_ADDR_VAR 0 12
17879: PUSH
17880: DOUBLE
17881: LD_VAR 0 8
17885: DEC
17886: ST_TO_ADDR
17887: LD_VAR 0 10
17891: PUSH
17892: FOR_TO
17893: IFFALSE 17986
// begin if not ValidHex ( _x , _y ) then
17895: LD_VAR 0 11
17899: PPUSH
17900: LD_VAR 0 12
17904: PPUSH
17905: CALL_OW 488
17909: NOT
17910: IFFALSE 17914
// continue ;
17912: GO 17892
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17914: LD_VAR 0 11
17918: PPUSH
17919: LD_VAR 0 12
17923: PPUSH
17924: CALL_OW 351
17928: PUSH
17929: LD_VAR 0 11
17933: PPUSH
17934: LD_VAR 0 12
17938: PPUSH
17939: CALL_OW 554
17943: AND
17944: IFFALSE 17984
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17946: LD_ADDR_VAR 0 13
17950: PUSH
17951: LD_VAR 0 13
17955: PPUSH
17956: LD_VAR 0 13
17960: PUSH
17961: LD_INT 1
17963: PLUS
17964: PPUSH
17965: LD_VAR 0 11
17969: PUSH
17970: LD_VAR 0 12
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PPUSH
17979: CALL_OW 2
17983: ST_TO_ADDR
// end ;
17984: GO 17892
17986: POP
17987: POP
17988: GO 17872
17990: POP
17991: POP
// if not list then
17992: LD_VAR 0 13
17996: NOT
17997: IFFALSE 18001
// exit ;
17999: GO 18072
// for i in list do
18001: LD_ADDR_VAR 0 6
18005: PUSH
18006: LD_VAR 0 13
18010: PUSH
18011: FOR_IN
18012: IFFALSE 18070
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18014: LD_VAR 0 1
18018: PPUSH
18019: LD_STRING M
18021: PUSH
18022: LD_VAR 0 6
18026: PUSH
18027: LD_INT 1
18029: ARRAY
18030: PUSH
18031: LD_VAR 0 6
18035: PUSH
18036: LD_INT 2
18038: ARRAY
18039: PUSH
18040: LD_INT 0
18042: PUSH
18043: LD_INT 0
18045: PUSH
18046: LD_INT 0
18048: PUSH
18049: LD_INT 0
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: PUSH
18061: EMPTY
18062: LIST
18063: PPUSH
18064: CALL_OW 447
18068: GO 18011
18070: POP
18071: POP
// end ;
18072: LD_VAR 0 5
18076: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18077: LD_EXP 62
18081: NOT
18082: IFFALSE 18132
18084: GO 18086
18086: DISABLE
// begin initHack := true ;
18087: LD_ADDR_EXP 62
18091: PUSH
18092: LD_INT 1
18094: ST_TO_ADDR
// hackTanks := [ ] ;
18095: LD_ADDR_EXP 63
18099: PUSH
18100: EMPTY
18101: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18102: LD_ADDR_EXP 64
18106: PUSH
18107: EMPTY
18108: ST_TO_ADDR
// hackLimit := 3 ;
18109: LD_ADDR_EXP 65
18113: PUSH
18114: LD_INT 3
18116: ST_TO_ADDR
// hackDist := 12 ;
18117: LD_ADDR_EXP 66
18121: PUSH
18122: LD_INT 12
18124: ST_TO_ADDR
// hackCounter := [ ] ;
18125: LD_ADDR_EXP 67
18129: PUSH
18130: EMPTY
18131: ST_TO_ADDR
// end ;
18132: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18133: LD_EXP 62
18137: PUSH
18138: LD_INT 34
18140: PUSH
18141: LD_EXP 74
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PPUSH
18150: CALL_OW 69
18154: AND
18155: IFFALSE 18410
18157: GO 18159
18159: DISABLE
18160: LD_INT 0
18162: PPUSH
18163: PPUSH
// begin enable ;
18164: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18165: LD_ADDR_VAR 0 1
18169: PUSH
18170: LD_INT 34
18172: PUSH
18173: LD_EXP 74
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PPUSH
18182: CALL_OW 69
18186: PUSH
18187: FOR_IN
18188: IFFALSE 18408
// begin if not i in hackTanks then
18190: LD_VAR 0 1
18194: PUSH
18195: LD_EXP 63
18199: IN
18200: NOT
18201: IFFALSE 18284
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18203: LD_ADDR_EXP 63
18207: PUSH
18208: LD_EXP 63
18212: PPUSH
18213: LD_EXP 63
18217: PUSH
18218: LD_INT 1
18220: PLUS
18221: PPUSH
18222: LD_VAR 0 1
18226: PPUSH
18227: CALL_OW 1
18231: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18232: LD_ADDR_EXP 64
18236: PUSH
18237: LD_EXP 64
18241: PPUSH
18242: LD_EXP 64
18246: PUSH
18247: LD_INT 1
18249: PLUS
18250: PPUSH
18251: EMPTY
18252: PPUSH
18253: CALL_OW 1
18257: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18258: LD_ADDR_EXP 67
18262: PUSH
18263: LD_EXP 67
18267: PPUSH
18268: LD_EXP 67
18272: PUSH
18273: LD_INT 1
18275: PLUS
18276: PPUSH
18277: EMPTY
18278: PPUSH
18279: CALL_OW 1
18283: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18284: LD_VAR 0 1
18288: PPUSH
18289: CALL_OW 302
18293: NOT
18294: IFFALSE 18307
// begin HackUnlinkAll ( i ) ;
18296: LD_VAR 0 1
18300: PPUSH
18301: CALL 18413 0 1
// continue ;
18305: GO 18187
// end ; HackCheckCapturedStatus ( i ) ;
18307: LD_VAR 0 1
18311: PPUSH
18312: CALL 18856 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18316: LD_ADDR_VAR 0 2
18320: PUSH
18321: LD_INT 81
18323: PUSH
18324: LD_VAR 0 1
18328: PPUSH
18329: CALL_OW 255
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 33
18340: PUSH
18341: LD_INT 3
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 91
18350: PUSH
18351: LD_VAR 0 1
18355: PUSH
18356: LD_EXP 66
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 50
18368: PUSH
18369: EMPTY
18370: LIST
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: PPUSH
18378: CALL_OW 69
18382: ST_TO_ADDR
// if not tmp then
18383: LD_VAR 0 2
18387: NOT
18388: IFFALSE 18392
// continue ;
18390: GO 18187
// HackLink ( i , tmp ) ;
18392: LD_VAR 0 1
18396: PPUSH
18397: LD_VAR 0 2
18401: PPUSH
18402: CALL 18549 0 2
// end ;
18406: GO 18187
18408: POP
18409: POP
// end ;
18410: PPOPN 2
18412: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18413: LD_INT 0
18415: PPUSH
18416: PPUSH
18417: PPUSH
// if not hack in hackTanks then
18418: LD_VAR 0 1
18422: PUSH
18423: LD_EXP 63
18427: IN
18428: NOT
18429: IFFALSE 18433
// exit ;
18431: GO 18544
// index := GetElementIndex ( hackTanks , hack ) ;
18433: LD_ADDR_VAR 0 4
18437: PUSH
18438: LD_EXP 63
18442: PPUSH
18443: LD_VAR 0 1
18447: PPUSH
18448: CALL 26553 0 2
18452: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18453: LD_EXP 64
18457: PUSH
18458: LD_VAR 0 4
18462: ARRAY
18463: IFFALSE 18544
// begin for i in hackTanksCaptured [ index ] do
18465: LD_ADDR_VAR 0 3
18469: PUSH
18470: LD_EXP 64
18474: PUSH
18475: LD_VAR 0 4
18479: ARRAY
18480: PUSH
18481: FOR_IN
18482: IFFALSE 18508
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18484: LD_VAR 0 3
18488: PUSH
18489: LD_INT 1
18491: ARRAY
18492: PPUSH
18493: LD_VAR 0 3
18497: PUSH
18498: LD_INT 2
18500: ARRAY
18501: PPUSH
18502: CALL_OW 235
18506: GO 18481
18508: POP
18509: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18510: LD_ADDR_EXP 64
18514: PUSH
18515: LD_EXP 64
18519: PPUSH
18520: LD_VAR 0 4
18524: PPUSH
18525: EMPTY
18526: PPUSH
18527: CALL_OW 1
18531: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18532: LD_VAR 0 1
18536: PPUSH
18537: LD_INT 0
18539: PPUSH
18540: CALL_OW 505
// end ; end ;
18544: LD_VAR 0 2
18548: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18549: LD_INT 0
18551: PPUSH
18552: PPUSH
18553: PPUSH
// if not hack in hackTanks or not vehicles then
18554: LD_VAR 0 1
18558: PUSH
18559: LD_EXP 63
18563: IN
18564: NOT
18565: PUSH
18566: LD_VAR 0 2
18570: NOT
18571: OR
18572: IFFALSE 18576
// exit ;
18574: GO 18851
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18576: LD_ADDR_VAR 0 2
18580: PUSH
18581: LD_VAR 0 1
18585: PPUSH
18586: LD_VAR 0 2
18590: PPUSH
18591: LD_INT 1
18593: PPUSH
18594: LD_INT 1
18596: PPUSH
18597: CALL 27203 0 4
18601: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18602: LD_ADDR_VAR 0 5
18606: PUSH
18607: LD_EXP 63
18611: PPUSH
18612: LD_VAR 0 1
18616: PPUSH
18617: CALL 26553 0 2
18621: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18622: LD_EXP 64
18626: PUSH
18627: LD_VAR 0 5
18631: ARRAY
18632: PUSH
18633: LD_EXP 65
18637: LESS
18638: IFFALSE 18827
// begin for i := 1 to vehicles do
18640: LD_ADDR_VAR 0 4
18644: PUSH
18645: DOUBLE
18646: LD_INT 1
18648: DEC
18649: ST_TO_ADDR
18650: LD_VAR 0 2
18654: PUSH
18655: FOR_TO
18656: IFFALSE 18825
// begin if hackTanksCaptured [ index ] = hackLimit then
18658: LD_EXP 64
18662: PUSH
18663: LD_VAR 0 5
18667: ARRAY
18668: PUSH
18669: LD_EXP 65
18673: EQUAL
18674: IFFALSE 18678
// break ;
18676: GO 18825
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18678: LD_ADDR_EXP 67
18682: PUSH
18683: LD_EXP 67
18687: PPUSH
18688: LD_VAR 0 5
18692: PPUSH
18693: LD_EXP 67
18697: PUSH
18698: LD_VAR 0 5
18702: ARRAY
18703: PUSH
18704: LD_INT 1
18706: PLUS
18707: PPUSH
18708: CALL_OW 1
18712: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18713: LD_ADDR_EXP 64
18717: PUSH
18718: LD_EXP 64
18722: PPUSH
18723: LD_VAR 0 5
18727: PUSH
18728: LD_EXP 64
18732: PUSH
18733: LD_VAR 0 5
18737: ARRAY
18738: PUSH
18739: LD_INT 1
18741: PLUS
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PPUSH
18747: LD_VAR 0 2
18751: PUSH
18752: LD_VAR 0 4
18756: ARRAY
18757: PUSH
18758: LD_VAR 0 2
18762: PUSH
18763: LD_VAR 0 4
18767: ARRAY
18768: PPUSH
18769: CALL_OW 255
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PPUSH
18778: CALL 26768 0 3
18782: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
18783: LD_VAR 0 2
18787: PUSH
18788: LD_VAR 0 4
18792: ARRAY
18793: PPUSH
18794: LD_VAR 0 1
18798: PPUSH
18799: CALL_OW 255
18803: PPUSH
18804: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
18808: LD_VAR 0 2
18812: PUSH
18813: LD_VAR 0 4
18817: ARRAY
18818: PPUSH
18819: CALL_OW 141
// end ;
18823: GO 18655
18825: POP
18826: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18827: LD_VAR 0 1
18831: PPUSH
18832: LD_EXP 64
18836: PUSH
18837: LD_VAR 0 5
18841: ARRAY
18842: PUSH
18843: LD_INT 0
18845: PLUS
18846: PPUSH
18847: CALL_OW 505
// end ;
18851: LD_VAR 0 3
18855: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
18856: LD_INT 0
18858: PPUSH
18859: PPUSH
18860: PPUSH
18861: PPUSH
// if not hack in hackTanks then
18862: LD_VAR 0 1
18866: PUSH
18867: LD_EXP 63
18871: IN
18872: NOT
18873: IFFALSE 18877
// exit ;
18875: GO 19117
// index := GetElementIndex ( hackTanks , hack ) ;
18877: LD_ADDR_VAR 0 4
18881: PUSH
18882: LD_EXP 63
18886: PPUSH
18887: LD_VAR 0 1
18891: PPUSH
18892: CALL 26553 0 2
18896: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
18897: LD_ADDR_VAR 0 3
18901: PUSH
18902: DOUBLE
18903: LD_EXP 64
18907: PUSH
18908: LD_VAR 0 4
18912: ARRAY
18913: INC
18914: ST_TO_ADDR
18915: LD_INT 1
18917: PUSH
18918: FOR_DOWNTO
18919: IFFALSE 19091
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
18921: LD_ADDR_VAR 0 5
18925: PUSH
18926: LD_EXP 64
18930: PUSH
18931: LD_VAR 0 4
18935: ARRAY
18936: PUSH
18937: LD_VAR 0 3
18941: ARRAY
18942: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
18943: LD_VAR 0 5
18947: PUSH
18948: LD_INT 1
18950: ARRAY
18951: PPUSH
18952: CALL_OW 302
18956: NOT
18957: PUSH
18958: LD_VAR 0 5
18962: PUSH
18963: LD_INT 1
18965: ARRAY
18966: PPUSH
18967: CALL_OW 255
18971: PUSH
18972: LD_VAR 0 1
18976: PPUSH
18977: CALL_OW 255
18981: NONEQUAL
18982: OR
18983: IFFALSE 19089
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
18985: LD_VAR 0 5
18989: PUSH
18990: LD_INT 1
18992: ARRAY
18993: PPUSH
18994: CALL_OW 305
18998: PUSH
18999: LD_VAR 0 5
19003: PUSH
19004: LD_INT 1
19006: ARRAY
19007: PPUSH
19008: CALL_OW 255
19012: PUSH
19013: LD_VAR 0 1
19017: PPUSH
19018: CALL_OW 255
19022: EQUAL
19023: AND
19024: IFFALSE 19048
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19026: LD_VAR 0 5
19030: PUSH
19031: LD_INT 1
19033: ARRAY
19034: PPUSH
19035: LD_VAR 0 5
19039: PUSH
19040: LD_INT 2
19042: ARRAY
19043: PPUSH
19044: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19048: LD_ADDR_EXP 64
19052: PUSH
19053: LD_EXP 64
19057: PPUSH
19058: LD_VAR 0 4
19062: PPUSH
19063: LD_EXP 64
19067: PUSH
19068: LD_VAR 0 4
19072: ARRAY
19073: PPUSH
19074: LD_VAR 0 3
19078: PPUSH
19079: CALL_OW 3
19083: PPUSH
19084: CALL_OW 1
19088: ST_TO_ADDR
// end ; end ;
19089: GO 18918
19091: POP
19092: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19093: LD_VAR 0 1
19097: PPUSH
19098: LD_EXP 64
19102: PUSH
19103: LD_VAR 0 4
19107: ARRAY
19108: PUSH
19109: LD_INT 0
19111: PLUS
19112: PPUSH
19113: CALL_OW 505
// end ;
19117: LD_VAR 0 2
19121: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19122: LD_INT 0
19124: PPUSH
19125: PPUSH
19126: PPUSH
19127: PPUSH
// if not hack in hackTanks then
19128: LD_VAR 0 1
19132: PUSH
19133: LD_EXP 63
19137: IN
19138: NOT
19139: IFFALSE 19143
// exit ;
19141: GO 19228
// index := GetElementIndex ( hackTanks , hack ) ;
19143: LD_ADDR_VAR 0 5
19147: PUSH
19148: LD_EXP 63
19152: PPUSH
19153: LD_VAR 0 1
19157: PPUSH
19158: CALL 26553 0 2
19162: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19163: LD_ADDR_VAR 0 4
19167: PUSH
19168: DOUBLE
19169: LD_INT 1
19171: DEC
19172: ST_TO_ADDR
19173: LD_EXP 64
19177: PUSH
19178: LD_VAR 0 5
19182: ARRAY
19183: PUSH
19184: FOR_TO
19185: IFFALSE 19226
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19187: LD_EXP 64
19191: PUSH
19192: LD_VAR 0 5
19196: ARRAY
19197: PUSH
19198: LD_VAR 0 4
19202: ARRAY
19203: PUSH
19204: LD_INT 1
19206: ARRAY
19207: PUSH
19208: LD_VAR 0 2
19212: EQUAL
19213: IFFALSE 19224
// KillUnit ( vehicle ) ;
19215: LD_VAR 0 2
19219: PPUSH
19220: CALL_OW 66
19224: GO 19184
19226: POP
19227: POP
// end ;
19228: LD_VAR 0 3
19232: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19233: LD_EXP 68
19237: NOT
19238: IFFALSE 19273
19240: GO 19242
19242: DISABLE
// begin initMiner := true ;
19243: LD_ADDR_EXP 68
19247: PUSH
19248: LD_INT 1
19250: ST_TO_ADDR
// minersList := [ ] ;
19251: LD_ADDR_EXP 69
19255: PUSH
19256: EMPTY
19257: ST_TO_ADDR
// minerMinesList := [ ] ;
19258: LD_ADDR_EXP 70
19262: PUSH
19263: EMPTY
19264: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
19265: LD_ADDR_EXP 71
19269: PUSH
19270: LD_INT 5
19272: ST_TO_ADDR
// end ;
19273: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
19274: LD_EXP 68
19278: PUSH
19279: LD_INT 34
19281: PUSH
19282: LD_EXP 79
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PPUSH
19291: CALL_OW 69
19295: AND
19296: IFFALSE 19759
19298: GO 19300
19300: DISABLE
19301: LD_INT 0
19303: PPUSH
19304: PPUSH
19305: PPUSH
19306: PPUSH
// begin enable ;
19307: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
19308: LD_ADDR_VAR 0 1
19312: PUSH
19313: LD_INT 34
19315: PUSH
19316: LD_EXP 79
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PPUSH
19325: CALL_OW 69
19329: PUSH
19330: FOR_IN
19331: IFFALSE 19403
// begin if not i in minersList then
19333: LD_VAR 0 1
19337: PUSH
19338: LD_EXP 69
19342: IN
19343: NOT
19344: IFFALSE 19401
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
19346: LD_ADDR_EXP 69
19350: PUSH
19351: LD_EXP 69
19355: PPUSH
19356: LD_EXP 69
19360: PUSH
19361: LD_INT 1
19363: PLUS
19364: PPUSH
19365: LD_VAR 0 1
19369: PPUSH
19370: CALL_OW 1
19374: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
19375: LD_ADDR_EXP 70
19379: PUSH
19380: LD_EXP 70
19384: PPUSH
19385: LD_EXP 70
19389: PUSH
19390: LD_INT 1
19392: PLUS
19393: PPUSH
19394: EMPTY
19395: PPUSH
19396: CALL_OW 1
19400: ST_TO_ADDR
// end end ;
19401: GO 19330
19403: POP
19404: POP
// for i := minerMinesList downto 1 do
19405: LD_ADDR_VAR 0 1
19409: PUSH
19410: DOUBLE
19411: LD_EXP 70
19415: INC
19416: ST_TO_ADDR
19417: LD_INT 1
19419: PUSH
19420: FOR_DOWNTO
19421: IFFALSE 19757
// begin if IsLive ( minersList [ i ] ) then
19423: LD_EXP 69
19427: PUSH
19428: LD_VAR 0 1
19432: ARRAY
19433: PPUSH
19434: CALL_OW 300
19438: IFFALSE 19466
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
19440: LD_EXP 69
19444: PUSH
19445: LD_VAR 0 1
19449: ARRAY
19450: PPUSH
19451: LD_EXP 70
19455: PUSH
19456: LD_VAR 0 1
19460: ARRAY
19461: PPUSH
19462: CALL_OW 505
// if not minerMinesList [ i ] then
19466: LD_EXP 70
19470: PUSH
19471: LD_VAR 0 1
19475: ARRAY
19476: NOT
19477: IFFALSE 19481
// continue ;
19479: GO 19420
// for j := minerMinesList [ i ] downto 1 do
19481: LD_ADDR_VAR 0 2
19485: PUSH
19486: DOUBLE
19487: LD_EXP 70
19491: PUSH
19492: LD_VAR 0 1
19496: ARRAY
19497: INC
19498: ST_TO_ADDR
19499: LD_INT 1
19501: PUSH
19502: FOR_DOWNTO
19503: IFFALSE 19753
// begin side := GetSide ( minersList [ i ] ) ;
19505: LD_ADDR_VAR 0 3
19509: PUSH
19510: LD_EXP 69
19514: PUSH
19515: LD_VAR 0 1
19519: ARRAY
19520: PPUSH
19521: CALL_OW 255
19525: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19526: LD_ADDR_VAR 0 4
19530: PUSH
19531: LD_EXP 70
19535: PUSH
19536: LD_VAR 0 1
19540: ARRAY
19541: PUSH
19542: LD_VAR 0 2
19546: ARRAY
19547: PUSH
19548: LD_INT 1
19550: ARRAY
19551: PPUSH
19552: LD_EXP 70
19556: PUSH
19557: LD_VAR 0 1
19561: ARRAY
19562: PUSH
19563: LD_VAR 0 2
19567: ARRAY
19568: PUSH
19569: LD_INT 2
19571: ARRAY
19572: PPUSH
19573: CALL_OW 428
19577: ST_TO_ADDR
// if not tmp then
19578: LD_VAR 0 4
19582: NOT
19583: IFFALSE 19587
// continue ;
19585: GO 19502
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19587: LD_VAR 0 4
19591: PUSH
19592: LD_INT 81
19594: PUSH
19595: LD_VAR 0 3
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PPUSH
19604: CALL_OW 69
19608: IN
19609: PUSH
19610: LD_EXP 70
19614: PUSH
19615: LD_VAR 0 1
19619: ARRAY
19620: PUSH
19621: LD_VAR 0 2
19625: ARRAY
19626: PUSH
19627: LD_INT 1
19629: ARRAY
19630: PPUSH
19631: LD_EXP 70
19635: PUSH
19636: LD_VAR 0 1
19640: ARRAY
19641: PUSH
19642: LD_VAR 0 2
19646: ARRAY
19647: PUSH
19648: LD_INT 2
19650: ARRAY
19651: PPUSH
19652: CALL_OW 458
19656: AND
19657: IFFALSE 19751
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
19659: LD_EXP 70
19663: PUSH
19664: LD_VAR 0 1
19668: ARRAY
19669: PUSH
19670: LD_VAR 0 2
19674: ARRAY
19675: PUSH
19676: LD_INT 1
19678: ARRAY
19679: PPUSH
19680: LD_EXP 70
19684: PUSH
19685: LD_VAR 0 1
19689: ARRAY
19690: PUSH
19691: LD_VAR 0 2
19695: ARRAY
19696: PUSH
19697: LD_INT 2
19699: ARRAY
19700: PPUSH
19701: LD_VAR 0 3
19705: PPUSH
19706: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
19710: LD_ADDR_EXP 70
19714: PUSH
19715: LD_EXP 70
19719: PPUSH
19720: LD_VAR 0 1
19724: PPUSH
19725: LD_EXP 70
19729: PUSH
19730: LD_VAR 0 1
19734: ARRAY
19735: PPUSH
19736: LD_VAR 0 2
19740: PPUSH
19741: CALL_OW 3
19745: PPUSH
19746: CALL_OW 1
19750: ST_TO_ADDR
// end ; end ;
19751: GO 19502
19753: POP
19754: POP
// end ;
19755: GO 19420
19757: POP
19758: POP
// end ;
19759: PPOPN 4
19761: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
19762: LD_INT 0
19764: PPUSH
19765: PPUSH
// result := false ;
19766: LD_ADDR_VAR 0 4
19770: PUSH
19771: LD_INT 0
19773: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
19774: LD_VAR 0 1
19778: PPUSH
19779: CALL_OW 264
19783: PUSH
19784: LD_EXP 79
19788: EQUAL
19789: NOT
19790: IFFALSE 19794
// exit ;
19792: GO 20034
// index := GetElementIndex ( minersList , unit ) ;
19794: LD_ADDR_VAR 0 5
19798: PUSH
19799: LD_EXP 69
19803: PPUSH
19804: LD_VAR 0 1
19808: PPUSH
19809: CALL 26553 0 2
19813: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
19814: LD_EXP 70
19818: PUSH
19819: LD_VAR 0 5
19823: ARRAY
19824: PUSH
19825: LD_EXP 71
19829: GREATEREQUAL
19830: IFFALSE 19834
// exit ;
19832: GO 20034
// ComMoveXY ( unit , x , y ) ;
19834: LD_VAR 0 1
19838: PPUSH
19839: LD_VAR 0 2
19843: PPUSH
19844: LD_VAR 0 3
19848: PPUSH
19849: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19853: LD_INT 35
19855: PPUSH
19856: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
19860: LD_VAR 0 1
19864: PPUSH
19865: LD_VAR 0 2
19869: PPUSH
19870: LD_VAR 0 3
19874: PPUSH
19875: CALL 57822 0 3
19879: NOT
19880: PUSH
19881: LD_VAR 0 1
19885: PPUSH
19886: CALL_OW 314
19890: AND
19891: IFFALSE 19895
// exit ;
19893: GO 20034
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
19895: LD_VAR 0 2
19899: PPUSH
19900: LD_VAR 0 3
19904: PPUSH
19905: CALL_OW 428
19909: PUSH
19910: LD_VAR 0 1
19914: EQUAL
19915: PUSH
19916: LD_VAR 0 1
19920: PPUSH
19921: CALL_OW 314
19925: NOT
19926: AND
19927: IFFALSE 19853
// PlaySoundXY ( x , y , PlantMine ) ;
19929: LD_VAR 0 2
19933: PPUSH
19934: LD_VAR 0 3
19938: PPUSH
19939: LD_STRING PlantMine
19941: PPUSH
19942: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
19946: LD_VAR 0 2
19950: PPUSH
19951: LD_VAR 0 3
19955: PPUSH
19956: LD_VAR 0 1
19960: PPUSH
19961: CALL_OW 255
19965: PPUSH
19966: LD_INT 0
19968: PPUSH
19969: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
19973: LD_ADDR_EXP 70
19977: PUSH
19978: LD_EXP 70
19982: PPUSH
19983: LD_VAR 0 5
19987: PUSH
19988: LD_EXP 70
19992: PUSH
19993: LD_VAR 0 5
19997: ARRAY
19998: PUSH
19999: LD_INT 1
20001: PLUS
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PPUSH
20007: LD_VAR 0 2
20011: PUSH
20012: LD_VAR 0 3
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PPUSH
20021: CALL 26768 0 3
20025: ST_TO_ADDR
// result := true ;
20026: LD_ADDR_VAR 0 4
20030: PUSH
20031: LD_INT 1
20033: ST_TO_ADDR
// end ;
20034: LD_VAR 0 4
20038: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20039: LD_INT 0
20041: PPUSH
20042: PPUSH
20043: PPUSH
// if not unit in minersList then
20044: LD_VAR 0 1
20048: PUSH
20049: LD_EXP 69
20053: IN
20054: NOT
20055: IFFALSE 20059
// exit ;
20057: GO 20451
// index := GetElementIndex ( minersList , unit ) ;
20059: LD_ADDR_VAR 0 6
20063: PUSH
20064: LD_EXP 69
20068: PPUSH
20069: LD_VAR 0 1
20073: PPUSH
20074: CALL 26553 0 2
20078: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20079: LD_ADDR_VAR 0 5
20083: PUSH
20084: DOUBLE
20085: LD_EXP 70
20089: PUSH
20090: LD_VAR 0 6
20094: ARRAY
20095: INC
20096: ST_TO_ADDR
20097: LD_INT 1
20099: PUSH
20100: FOR_DOWNTO
20101: IFFALSE 20262
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20103: LD_EXP 70
20107: PUSH
20108: LD_VAR 0 6
20112: ARRAY
20113: PUSH
20114: LD_VAR 0 5
20118: ARRAY
20119: PUSH
20120: LD_INT 1
20122: ARRAY
20123: PUSH
20124: LD_VAR 0 2
20128: EQUAL
20129: PUSH
20130: LD_EXP 70
20134: PUSH
20135: LD_VAR 0 6
20139: ARRAY
20140: PUSH
20141: LD_VAR 0 5
20145: ARRAY
20146: PUSH
20147: LD_INT 2
20149: ARRAY
20150: PUSH
20151: LD_VAR 0 3
20155: EQUAL
20156: AND
20157: IFFALSE 20260
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20159: LD_EXP 70
20163: PUSH
20164: LD_VAR 0 6
20168: ARRAY
20169: PUSH
20170: LD_VAR 0 5
20174: ARRAY
20175: PUSH
20176: LD_INT 1
20178: ARRAY
20179: PPUSH
20180: LD_EXP 70
20184: PUSH
20185: LD_VAR 0 6
20189: ARRAY
20190: PUSH
20191: LD_VAR 0 5
20195: ARRAY
20196: PUSH
20197: LD_INT 2
20199: ARRAY
20200: PPUSH
20201: LD_VAR 0 1
20205: PPUSH
20206: CALL_OW 255
20210: PPUSH
20211: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20215: LD_ADDR_EXP 70
20219: PUSH
20220: LD_EXP 70
20224: PPUSH
20225: LD_VAR 0 6
20229: PPUSH
20230: LD_EXP 70
20234: PUSH
20235: LD_VAR 0 6
20239: ARRAY
20240: PPUSH
20241: LD_VAR 0 5
20245: PPUSH
20246: CALL_OW 3
20250: PPUSH
20251: CALL_OW 1
20255: ST_TO_ADDR
// exit ;
20256: POP
20257: POP
20258: GO 20451
// end ; end ;
20260: GO 20100
20262: POP
20263: POP
// for i := minerMinesList [ index ] downto 1 do
20264: LD_ADDR_VAR 0 5
20268: PUSH
20269: DOUBLE
20270: LD_EXP 70
20274: PUSH
20275: LD_VAR 0 6
20279: ARRAY
20280: INC
20281: ST_TO_ADDR
20282: LD_INT 1
20284: PUSH
20285: FOR_DOWNTO
20286: IFFALSE 20449
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
20288: LD_EXP 70
20292: PUSH
20293: LD_VAR 0 6
20297: ARRAY
20298: PUSH
20299: LD_VAR 0 5
20303: ARRAY
20304: PUSH
20305: LD_INT 1
20307: ARRAY
20308: PPUSH
20309: LD_EXP 70
20313: PUSH
20314: LD_VAR 0 6
20318: ARRAY
20319: PUSH
20320: LD_VAR 0 5
20324: ARRAY
20325: PUSH
20326: LD_INT 2
20328: ARRAY
20329: PPUSH
20330: LD_VAR 0 2
20334: PPUSH
20335: LD_VAR 0 3
20339: PPUSH
20340: CALL_OW 298
20344: PUSH
20345: LD_INT 6
20347: LESS
20348: IFFALSE 20447
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20350: LD_EXP 70
20354: PUSH
20355: LD_VAR 0 6
20359: ARRAY
20360: PUSH
20361: LD_VAR 0 5
20365: ARRAY
20366: PUSH
20367: LD_INT 1
20369: ARRAY
20370: PPUSH
20371: LD_EXP 70
20375: PUSH
20376: LD_VAR 0 6
20380: ARRAY
20381: PUSH
20382: LD_VAR 0 5
20386: ARRAY
20387: PUSH
20388: LD_INT 2
20390: ARRAY
20391: PPUSH
20392: LD_VAR 0 1
20396: PPUSH
20397: CALL_OW 255
20401: PPUSH
20402: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20406: LD_ADDR_EXP 70
20410: PUSH
20411: LD_EXP 70
20415: PPUSH
20416: LD_VAR 0 6
20420: PPUSH
20421: LD_EXP 70
20425: PUSH
20426: LD_VAR 0 6
20430: ARRAY
20431: PPUSH
20432: LD_VAR 0 5
20436: PPUSH
20437: CALL_OW 3
20441: PPUSH
20442: CALL_OW 1
20446: ST_TO_ADDR
// end ; end ;
20447: GO 20285
20449: POP
20450: POP
// end ;
20451: LD_VAR 0 4
20455: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20456: LD_INT 0
20458: PPUSH
20459: PPUSH
20460: PPUSH
20461: PPUSH
20462: PPUSH
20463: PPUSH
20464: PPUSH
20465: PPUSH
20466: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20467: LD_VAR 0 1
20471: PPUSH
20472: CALL_OW 264
20476: PUSH
20477: LD_EXP 79
20481: EQUAL
20482: NOT
20483: PUSH
20484: LD_VAR 0 1
20488: PUSH
20489: LD_EXP 69
20493: IN
20494: NOT
20495: OR
20496: IFFALSE 20500
// exit ;
20498: GO 20822
// index := GetElementIndex ( minersList , unit ) ;
20500: LD_ADDR_VAR 0 6
20504: PUSH
20505: LD_EXP 69
20509: PPUSH
20510: LD_VAR 0 1
20514: PPUSH
20515: CALL 26553 0 2
20519: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
20520: LD_ADDR_VAR 0 8
20524: PUSH
20525: LD_EXP 71
20529: PUSH
20530: LD_EXP 70
20534: PUSH
20535: LD_VAR 0 6
20539: ARRAY
20540: MINUS
20541: ST_TO_ADDR
// if not minesFreeAmount then
20542: LD_VAR 0 8
20546: NOT
20547: IFFALSE 20551
// exit ;
20549: GO 20822
// tmp := [ ] ;
20551: LD_ADDR_VAR 0 7
20555: PUSH
20556: EMPTY
20557: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20558: LD_ADDR_VAR 0 5
20562: PUSH
20563: DOUBLE
20564: LD_INT 1
20566: DEC
20567: ST_TO_ADDR
20568: LD_VAR 0 8
20572: PUSH
20573: FOR_TO
20574: IFFALSE 20769
// begin _d := rand ( 0 , 5 ) ;
20576: LD_ADDR_VAR 0 11
20580: PUSH
20581: LD_INT 0
20583: PPUSH
20584: LD_INT 5
20586: PPUSH
20587: CALL_OW 12
20591: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20592: LD_ADDR_VAR 0 12
20596: PUSH
20597: LD_INT 2
20599: PPUSH
20600: LD_INT 6
20602: PPUSH
20603: CALL_OW 12
20607: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
20608: LD_ADDR_VAR 0 9
20612: PUSH
20613: LD_VAR 0 2
20617: PPUSH
20618: LD_VAR 0 11
20622: PPUSH
20623: LD_VAR 0 12
20627: PPUSH
20628: CALL_OW 272
20632: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
20633: LD_ADDR_VAR 0 10
20637: PUSH
20638: LD_VAR 0 3
20642: PPUSH
20643: LD_VAR 0 11
20647: PPUSH
20648: LD_VAR 0 12
20652: PPUSH
20653: CALL_OW 273
20657: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
20658: LD_VAR 0 9
20662: PPUSH
20663: LD_VAR 0 10
20667: PPUSH
20668: CALL_OW 488
20672: PUSH
20673: LD_VAR 0 9
20677: PUSH
20678: LD_VAR 0 10
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: LD_VAR 0 7
20691: IN
20692: NOT
20693: AND
20694: PUSH
20695: LD_VAR 0 9
20699: PPUSH
20700: LD_VAR 0 10
20704: PPUSH
20705: CALL_OW 458
20709: NOT
20710: AND
20711: IFFALSE 20753
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
20713: LD_ADDR_VAR 0 7
20717: PUSH
20718: LD_VAR 0 7
20722: PPUSH
20723: LD_VAR 0 7
20727: PUSH
20728: LD_INT 1
20730: PLUS
20731: PPUSH
20732: LD_VAR 0 9
20736: PUSH
20737: LD_VAR 0 10
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: PPUSH
20746: CALL_OW 1
20750: ST_TO_ADDR
20751: GO 20767
// i := i - 1 ;
20753: LD_ADDR_VAR 0 5
20757: PUSH
20758: LD_VAR 0 5
20762: PUSH
20763: LD_INT 1
20765: MINUS
20766: ST_TO_ADDR
// end ;
20767: GO 20573
20769: POP
20770: POP
// for i in tmp do
20771: LD_ADDR_VAR 0 5
20775: PUSH
20776: LD_VAR 0 7
20780: PUSH
20781: FOR_IN
20782: IFFALSE 20820
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
20784: LD_VAR 0 1
20788: PPUSH
20789: LD_VAR 0 5
20793: PUSH
20794: LD_INT 1
20796: ARRAY
20797: PPUSH
20798: LD_VAR 0 5
20802: PUSH
20803: LD_INT 2
20805: ARRAY
20806: PPUSH
20807: CALL 19762 0 3
20811: NOT
20812: IFFALSE 20818
// exit ;
20814: POP
20815: POP
20816: GO 20822
20818: GO 20781
20820: POP
20821: POP
// end ;
20822: LD_VAR 0 4
20826: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
20827: LD_INT 0
20829: PPUSH
20830: PPUSH
20831: PPUSH
20832: PPUSH
20833: PPUSH
20834: PPUSH
20835: PPUSH
// if not GetClass ( unit ) = class_sniper then
20836: LD_VAR 0 1
20840: PPUSH
20841: CALL_OW 257
20845: PUSH
20846: LD_INT 5
20848: EQUAL
20849: NOT
20850: IFFALSE 20854
// exit ;
20852: GO 21242
// dist := 8 ;
20854: LD_ADDR_VAR 0 5
20858: PUSH
20859: LD_INT 8
20861: ST_TO_ADDR
// viewRange := 12 ;
20862: LD_ADDR_VAR 0 7
20866: PUSH
20867: LD_INT 12
20869: ST_TO_ADDR
// side := GetSide ( unit ) ;
20870: LD_ADDR_VAR 0 6
20874: PUSH
20875: LD_VAR 0 1
20879: PPUSH
20880: CALL_OW 255
20884: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
20885: LD_INT 61
20887: PPUSH
20888: LD_VAR 0 6
20892: PPUSH
20893: CALL_OW 321
20897: PUSH
20898: LD_INT 2
20900: EQUAL
20901: IFFALSE 20911
// viewRange := 16 ;
20903: LD_ADDR_VAR 0 7
20907: PUSH
20908: LD_INT 16
20910: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
20911: LD_VAR 0 1
20915: PPUSH
20916: LD_VAR 0 2
20920: PPUSH
20921: LD_VAR 0 3
20925: PPUSH
20926: CALL_OW 297
20930: PUSH
20931: LD_VAR 0 5
20935: GREATER
20936: IFFALSE 21015
// begin ComMoveXY ( unit , x , y ) ;
20938: LD_VAR 0 1
20942: PPUSH
20943: LD_VAR 0 2
20947: PPUSH
20948: LD_VAR 0 3
20952: PPUSH
20953: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20957: LD_INT 35
20959: PPUSH
20960: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
20964: LD_VAR 0 1
20968: PPUSH
20969: LD_VAR 0 2
20973: PPUSH
20974: LD_VAR 0 3
20978: PPUSH
20979: CALL 57822 0 3
20983: NOT
20984: IFFALSE 20988
// exit ;
20986: GO 21242
// until GetDistUnitXY ( unit , x , y ) < dist ;
20988: LD_VAR 0 1
20992: PPUSH
20993: LD_VAR 0 2
20997: PPUSH
20998: LD_VAR 0 3
21002: PPUSH
21003: CALL_OW 297
21007: PUSH
21008: LD_VAR 0 5
21012: LESS
21013: IFFALSE 20957
// end ; ComTurnXY ( unit , x , y ) ;
21015: LD_VAR 0 1
21019: PPUSH
21020: LD_VAR 0 2
21024: PPUSH
21025: LD_VAR 0 3
21029: PPUSH
21030: CALL_OW 118
// wait ( 5 ) ;
21034: LD_INT 5
21036: PPUSH
21037: CALL_OW 67
// _d := GetDir ( unit ) ;
21041: LD_ADDR_VAR 0 10
21045: PUSH
21046: LD_VAR 0 1
21050: PPUSH
21051: CALL_OW 254
21055: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21056: LD_ADDR_VAR 0 8
21060: PUSH
21061: LD_VAR 0 1
21065: PPUSH
21066: CALL_OW 250
21070: PPUSH
21071: LD_VAR 0 10
21075: PPUSH
21076: LD_VAR 0 5
21080: PPUSH
21081: CALL_OW 272
21085: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21086: LD_ADDR_VAR 0 9
21090: PUSH
21091: LD_VAR 0 1
21095: PPUSH
21096: CALL_OW 251
21100: PPUSH
21101: LD_VAR 0 10
21105: PPUSH
21106: LD_VAR 0 5
21110: PPUSH
21111: CALL_OW 273
21115: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21116: LD_VAR 0 8
21120: PPUSH
21121: LD_VAR 0 9
21125: PPUSH
21126: CALL_OW 488
21130: NOT
21131: IFFALSE 21135
// exit ;
21133: GO 21242
// ComAnimCustom ( unit , 1 ) ;
21135: LD_VAR 0 1
21139: PPUSH
21140: LD_INT 1
21142: PPUSH
21143: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21147: LD_VAR 0 8
21151: PPUSH
21152: LD_VAR 0 9
21156: PPUSH
21157: LD_VAR 0 6
21161: PPUSH
21162: LD_VAR 0 7
21166: PPUSH
21167: CALL_OW 330
// repeat wait ( 1 ) ;
21171: LD_INT 1
21173: PPUSH
21174: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
21178: LD_VAR 0 1
21182: PPUSH
21183: CALL_OW 316
21187: PUSH
21188: LD_VAR 0 1
21192: PPUSH
21193: CALL_OW 314
21197: OR
21198: PUSH
21199: LD_VAR 0 1
21203: PPUSH
21204: CALL_OW 302
21208: NOT
21209: OR
21210: PUSH
21211: LD_VAR 0 1
21215: PPUSH
21216: CALL_OW 301
21220: OR
21221: IFFALSE 21171
// RemoveSeeing ( _x , _y , side ) ;
21223: LD_VAR 0 8
21227: PPUSH
21228: LD_VAR 0 9
21232: PPUSH
21233: LD_VAR 0 6
21237: PPUSH
21238: CALL_OW 331
// end ; end_of_file
21242: LD_VAR 0 4
21246: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
21247: LD_VAR 0 1
21251: PPUSH
21252: LD_VAR 0 2
21256: PPUSH
21257: LD_VAR 0 3
21261: PPUSH
21262: LD_VAR 0 4
21266: PPUSH
21267: LD_VAR 0 5
21271: PPUSH
21272: LD_VAR 0 6
21276: PPUSH
21277: CALL 1336 0 6
// end ;
21281: PPOPN 6
21283: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
21284: LD_INT 0
21286: PPUSH
// begin if not units then
21287: LD_VAR 0 1
21291: NOT
21292: IFFALSE 21296
// exit ;
21294: GO 21296
// end ;
21296: PPOPN 7
21298: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
21299: CALL 1307 0 0
// end ; end_of_file
21303: PPOPN 1
21305: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
21306: LD_VAR 0 1
21310: PUSH
21311: LD_INT 200
21313: DOUBLE
21314: GREATEREQUAL
21315: IFFALSE 21323
21317: LD_INT 299
21319: DOUBLE
21320: LESSEQUAL
21321: IFTRUE 21325
21323: GO 21357
21325: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
21326: LD_VAR 0 1
21330: PPUSH
21331: LD_VAR 0 2
21335: PPUSH
21336: LD_VAR 0 3
21340: PPUSH
21341: LD_VAR 0 4
21345: PPUSH
21346: LD_VAR 0 5
21350: PPUSH
21351: CALL 17314 0 5
21355: GO 21434
21357: LD_INT 300
21359: DOUBLE
21360: GREATEREQUAL
21361: IFFALSE 21369
21363: LD_INT 399
21365: DOUBLE
21366: LESSEQUAL
21367: IFTRUE 21371
21369: GO 21433
21371: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
21372: LD_VAR 0 1
21376: PPUSH
21377: LD_VAR 0 2
21381: PPUSH
21382: LD_VAR 0 3
21386: PPUSH
21387: LD_VAR 0 4
21391: PPUSH
21392: LD_VAR 0 5
21396: PPUSH
21397: LD_VAR 0 6
21401: PPUSH
21402: LD_VAR 0 7
21406: PPUSH
21407: LD_VAR 0 8
21411: PPUSH
21412: LD_VAR 0 9
21416: PPUSH
21417: LD_VAR 0 10
21421: PPUSH
21422: LD_VAR 0 11
21426: PPUSH
21427: CALL 13643 0 11
21431: GO 21434
21433: POP
// end ;
21434: PPOPN 11
21436: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
21437: LD_VAR 0 1
21441: PPUSH
21442: LD_VAR 0 2
21446: PPUSH
21447: LD_VAR 0 3
21451: PPUSH
21452: LD_VAR 0 4
21456: PPUSH
21457: LD_VAR 0 5
21461: PPUSH
21462: CALL 17050 0 5
// end ; end_of_file
21466: PPOPN 5
21468: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
21469: LD_INT 0
21471: PPUSH
// ar_miner := 81 ;
21472: LD_ADDR_EXP 79
21476: PUSH
21477: LD_INT 81
21479: ST_TO_ADDR
// ar_crane := 88 ;
21480: LD_ADDR_EXP 78
21484: PUSH
21485: LD_INT 88
21487: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
21488: LD_ADDR_EXP 73
21492: PUSH
21493: LD_INT 89
21495: ST_TO_ADDR
// us_hack := 99 ;
21496: LD_ADDR_EXP 74
21500: PUSH
21501: LD_INT 99
21503: ST_TO_ADDR
// us_artillery := 97 ;
21504: LD_ADDR_EXP 75
21508: PUSH
21509: LD_INT 97
21511: ST_TO_ADDR
// ar_bio_bomb := 91 ;
21512: LD_ADDR_EXP 76
21516: PUSH
21517: LD_INT 91
21519: ST_TO_ADDR
// ar_mortar := 92 ;
21520: LD_ADDR_EXP 77
21524: PUSH
21525: LD_INT 92
21527: ST_TO_ADDR
// ru_flamethrower := 93 ;
21528: LD_ADDR_EXP 80
21532: PUSH
21533: LD_INT 93
21535: ST_TO_ADDR
// ru_radar := 98 ;
21536: LD_ADDR_EXP 72
21540: PUSH
21541: LD_INT 98
21543: ST_TO_ADDR
// tech_Artillery := 80 ;
21544: LD_ADDR_EXP 81
21548: PUSH
21549: LD_INT 80
21551: ST_TO_ADDR
// tech_RadMat := 81 ;
21552: LD_ADDR_EXP 82
21556: PUSH
21557: LD_INT 81
21559: ST_TO_ADDR
// tech_BasicTools := 82 ;
21560: LD_ADDR_EXP 83
21564: PUSH
21565: LD_INT 82
21567: ST_TO_ADDR
// tech_Cargo := 83 ;
21568: LD_ADDR_EXP 84
21572: PUSH
21573: LD_INT 83
21575: ST_TO_ADDR
// tech_Track := 84 ;
21576: LD_ADDR_EXP 85
21580: PUSH
21581: LD_INT 84
21583: ST_TO_ADDR
// tech_Crane := 85 ;
21584: LD_ADDR_EXP 86
21588: PUSH
21589: LD_INT 85
21591: ST_TO_ADDR
// tech_Bulldozer := 86 ;
21592: LD_ADDR_EXP 87
21596: PUSH
21597: LD_INT 86
21599: ST_TO_ADDR
// tech_Hovercraft := 87 ;
21600: LD_ADDR_EXP 88
21604: PUSH
21605: LD_INT 87
21607: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
21608: LD_ADDR_EXP 89
21612: PUSH
21613: LD_INT 88
21615: ST_TO_ADDR
// end ;
21616: LD_VAR 0 1
21620: RET
// every 1 do
21621: GO 21623
21623: DISABLE
// InitGlobalVariables ; end_of_file
21624: CALL 21469 0 0
21628: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21629: LD_INT 0
21631: PPUSH
21632: PPUSH
// if exist_mode then
21633: LD_VAR 0 2
21637: IFFALSE 21662
// unit := CreateCharacter ( prefix & ident ) else
21639: LD_ADDR_VAR 0 5
21643: PUSH
21644: LD_VAR 0 3
21648: PUSH
21649: LD_VAR 0 1
21653: STR
21654: PPUSH
21655: CALL_OW 34
21659: ST_TO_ADDR
21660: GO 21677
// unit := NewCharacter ( ident ) ;
21662: LD_ADDR_VAR 0 5
21666: PUSH
21667: LD_VAR 0 1
21671: PPUSH
21672: CALL_OW 25
21676: ST_TO_ADDR
// result := unit ;
21677: LD_ADDR_VAR 0 4
21681: PUSH
21682: LD_VAR 0 5
21686: ST_TO_ADDR
// end ;
21687: LD_VAR 0 4
21691: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21692: LD_INT 0
21694: PPUSH
21695: PPUSH
// if not side or not nation then
21696: LD_VAR 0 1
21700: NOT
21701: PUSH
21702: LD_VAR 0 2
21706: NOT
21707: OR
21708: IFFALSE 21712
// exit ;
21710: GO 22480
// case nation of nation_american :
21712: LD_VAR 0 2
21716: PUSH
21717: LD_INT 1
21719: DOUBLE
21720: EQUAL
21721: IFTRUE 21725
21723: GO 21939
21725: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21726: LD_ADDR_VAR 0 4
21730: PUSH
21731: LD_INT 35
21733: PUSH
21734: LD_INT 45
21736: PUSH
21737: LD_INT 46
21739: PUSH
21740: LD_INT 47
21742: PUSH
21743: LD_INT 82
21745: PUSH
21746: LD_INT 83
21748: PUSH
21749: LD_INT 84
21751: PUSH
21752: LD_INT 85
21754: PUSH
21755: LD_INT 86
21757: PUSH
21758: LD_INT 1
21760: PUSH
21761: LD_INT 2
21763: PUSH
21764: LD_INT 6
21766: PUSH
21767: LD_INT 15
21769: PUSH
21770: LD_INT 16
21772: PUSH
21773: LD_INT 7
21775: PUSH
21776: LD_INT 12
21778: PUSH
21779: LD_INT 13
21781: PUSH
21782: LD_INT 10
21784: PUSH
21785: LD_INT 14
21787: PUSH
21788: LD_INT 20
21790: PUSH
21791: LD_INT 21
21793: PUSH
21794: LD_INT 22
21796: PUSH
21797: LD_INT 25
21799: PUSH
21800: LD_INT 32
21802: PUSH
21803: LD_INT 27
21805: PUSH
21806: LD_INT 36
21808: PUSH
21809: LD_INT 69
21811: PUSH
21812: LD_INT 39
21814: PUSH
21815: LD_INT 34
21817: PUSH
21818: LD_INT 40
21820: PUSH
21821: LD_INT 48
21823: PUSH
21824: LD_INT 49
21826: PUSH
21827: LD_INT 50
21829: PUSH
21830: LD_INT 51
21832: PUSH
21833: LD_INT 52
21835: PUSH
21836: LD_INT 53
21838: PUSH
21839: LD_INT 54
21841: PUSH
21842: LD_INT 55
21844: PUSH
21845: LD_INT 56
21847: PUSH
21848: LD_INT 57
21850: PUSH
21851: LD_INT 58
21853: PUSH
21854: LD_INT 59
21856: PUSH
21857: LD_INT 60
21859: PUSH
21860: LD_INT 61
21862: PUSH
21863: LD_INT 62
21865: PUSH
21866: LD_INT 80
21868: PUSH
21869: LD_INT 82
21871: PUSH
21872: LD_INT 83
21874: PUSH
21875: LD_INT 84
21877: PUSH
21878: LD_INT 85
21880: PUSH
21881: LD_INT 86
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: ST_TO_ADDR
21937: GO 22404
21939: LD_INT 2
21941: DOUBLE
21942: EQUAL
21943: IFTRUE 21947
21945: GO 22173
21947: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21948: LD_ADDR_VAR 0 4
21952: PUSH
21953: LD_INT 35
21955: PUSH
21956: LD_INT 45
21958: PUSH
21959: LD_INT 46
21961: PUSH
21962: LD_INT 47
21964: PUSH
21965: LD_INT 82
21967: PUSH
21968: LD_INT 83
21970: PUSH
21971: LD_INT 84
21973: PUSH
21974: LD_INT 85
21976: PUSH
21977: LD_INT 87
21979: PUSH
21980: LD_INT 70
21982: PUSH
21983: LD_INT 1
21985: PUSH
21986: LD_INT 11
21988: PUSH
21989: LD_INT 3
21991: PUSH
21992: LD_INT 4
21994: PUSH
21995: LD_INT 5
21997: PUSH
21998: LD_INT 6
22000: PUSH
22001: LD_INT 15
22003: PUSH
22004: LD_INT 18
22006: PUSH
22007: LD_INT 7
22009: PUSH
22010: LD_INT 17
22012: PUSH
22013: LD_INT 8
22015: PUSH
22016: LD_INT 20
22018: PUSH
22019: LD_INT 21
22021: PUSH
22022: LD_INT 22
22024: PUSH
22025: LD_INT 72
22027: PUSH
22028: LD_INT 26
22030: PUSH
22031: LD_INT 69
22033: PUSH
22034: LD_INT 39
22036: PUSH
22037: LD_INT 40
22039: PUSH
22040: LD_INT 41
22042: PUSH
22043: LD_INT 42
22045: PUSH
22046: LD_INT 43
22048: PUSH
22049: LD_INT 48
22051: PUSH
22052: LD_INT 49
22054: PUSH
22055: LD_INT 50
22057: PUSH
22058: LD_INT 51
22060: PUSH
22061: LD_INT 52
22063: PUSH
22064: LD_INT 53
22066: PUSH
22067: LD_INT 54
22069: PUSH
22070: LD_INT 55
22072: PUSH
22073: LD_INT 56
22075: PUSH
22076: LD_INT 60
22078: PUSH
22079: LD_INT 61
22081: PUSH
22082: LD_INT 62
22084: PUSH
22085: LD_INT 66
22087: PUSH
22088: LD_INT 67
22090: PUSH
22091: LD_INT 68
22093: PUSH
22094: LD_INT 81
22096: PUSH
22097: LD_INT 82
22099: PUSH
22100: LD_INT 83
22102: PUSH
22103: LD_INT 84
22105: PUSH
22106: LD_INT 85
22108: PUSH
22109: LD_INT 87
22111: PUSH
22112: LD_INT 88
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: ST_TO_ADDR
22171: GO 22404
22173: LD_INT 3
22175: DOUBLE
22176: EQUAL
22177: IFTRUE 22181
22179: GO 22403
22181: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22182: LD_ADDR_VAR 0 4
22186: PUSH
22187: LD_INT 46
22189: PUSH
22190: LD_INT 47
22192: PUSH
22193: LD_INT 1
22195: PUSH
22196: LD_INT 2
22198: PUSH
22199: LD_INT 82
22201: PUSH
22202: LD_INT 83
22204: PUSH
22205: LD_INT 84
22207: PUSH
22208: LD_INT 85
22210: PUSH
22211: LD_INT 86
22213: PUSH
22214: LD_INT 11
22216: PUSH
22217: LD_INT 9
22219: PUSH
22220: LD_INT 20
22222: PUSH
22223: LD_INT 19
22225: PUSH
22226: LD_INT 21
22228: PUSH
22229: LD_INT 24
22231: PUSH
22232: LD_INT 22
22234: PUSH
22235: LD_INT 25
22237: PUSH
22238: LD_INT 28
22240: PUSH
22241: LD_INT 29
22243: PUSH
22244: LD_INT 30
22246: PUSH
22247: LD_INT 31
22249: PUSH
22250: LD_INT 37
22252: PUSH
22253: LD_INT 38
22255: PUSH
22256: LD_INT 32
22258: PUSH
22259: LD_INT 27
22261: PUSH
22262: LD_INT 33
22264: PUSH
22265: LD_INT 69
22267: PUSH
22268: LD_INT 39
22270: PUSH
22271: LD_INT 34
22273: PUSH
22274: LD_INT 40
22276: PUSH
22277: LD_INT 71
22279: PUSH
22280: LD_INT 23
22282: PUSH
22283: LD_INT 44
22285: PUSH
22286: LD_INT 48
22288: PUSH
22289: LD_INT 49
22291: PUSH
22292: LD_INT 50
22294: PUSH
22295: LD_INT 51
22297: PUSH
22298: LD_INT 52
22300: PUSH
22301: LD_INT 53
22303: PUSH
22304: LD_INT 54
22306: PUSH
22307: LD_INT 55
22309: PUSH
22310: LD_INT 56
22312: PUSH
22313: LD_INT 57
22315: PUSH
22316: LD_INT 58
22318: PUSH
22319: LD_INT 59
22321: PUSH
22322: LD_INT 63
22324: PUSH
22325: LD_INT 64
22327: PUSH
22328: LD_INT 65
22330: PUSH
22331: LD_INT 82
22333: PUSH
22334: LD_INT 83
22336: PUSH
22337: LD_INT 84
22339: PUSH
22340: LD_INT 85
22342: PUSH
22343: LD_INT 86
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: ST_TO_ADDR
22401: GO 22404
22403: POP
// if state > - 1 and state < 3 then
22404: LD_VAR 0 3
22408: PUSH
22409: LD_INT 1
22411: NEG
22412: GREATER
22413: PUSH
22414: LD_VAR 0 3
22418: PUSH
22419: LD_INT 3
22421: LESS
22422: AND
22423: IFFALSE 22480
// for i in result do
22425: LD_ADDR_VAR 0 5
22429: PUSH
22430: LD_VAR 0 4
22434: PUSH
22435: FOR_IN
22436: IFFALSE 22478
// if GetTech ( i , side ) <> state then
22438: LD_VAR 0 5
22442: PPUSH
22443: LD_VAR 0 1
22447: PPUSH
22448: CALL_OW 321
22452: PUSH
22453: LD_VAR 0 3
22457: NONEQUAL
22458: IFFALSE 22476
// result := result diff i ;
22460: LD_ADDR_VAR 0 4
22464: PUSH
22465: LD_VAR 0 4
22469: PUSH
22470: LD_VAR 0 5
22474: DIFF
22475: ST_TO_ADDR
22476: GO 22435
22478: POP
22479: POP
// end ;
22480: LD_VAR 0 4
22484: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22485: LD_INT 0
22487: PPUSH
22488: PPUSH
22489: PPUSH
// result := true ;
22490: LD_ADDR_VAR 0 3
22494: PUSH
22495: LD_INT 1
22497: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22498: LD_ADDR_VAR 0 5
22502: PUSH
22503: LD_VAR 0 2
22507: PPUSH
22508: CALL_OW 480
22512: ST_TO_ADDR
// if not tmp then
22513: LD_VAR 0 5
22517: NOT
22518: IFFALSE 22522
// exit ;
22520: GO 22571
// for i in tmp do
22522: LD_ADDR_VAR 0 4
22526: PUSH
22527: LD_VAR 0 5
22531: PUSH
22532: FOR_IN
22533: IFFALSE 22569
// if GetTech ( i , side ) <> state_researched then
22535: LD_VAR 0 4
22539: PPUSH
22540: LD_VAR 0 1
22544: PPUSH
22545: CALL_OW 321
22549: PUSH
22550: LD_INT 2
22552: NONEQUAL
22553: IFFALSE 22567
// begin result := false ;
22555: LD_ADDR_VAR 0 3
22559: PUSH
22560: LD_INT 0
22562: ST_TO_ADDR
// exit ;
22563: POP
22564: POP
22565: GO 22571
// end ;
22567: GO 22532
22569: POP
22570: POP
// end ;
22571: LD_VAR 0 3
22575: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22576: LD_INT 0
22578: PPUSH
22579: PPUSH
22580: PPUSH
22581: PPUSH
22582: PPUSH
22583: PPUSH
22584: PPUSH
22585: PPUSH
22586: PPUSH
22587: PPUSH
22588: PPUSH
22589: PPUSH
22590: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22591: LD_VAR 0 1
22595: NOT
22596: PUSH
22597: LD_VAR 0 1
22601: PPUSH
22602: CALL_OW 257
22606: PUSH
22607: LD_INT 9
22609: NONEQUAL
22610: OR
22611: IFFALSE 22615
// exit ;
22613: GO 23188
// side := GetSide ( unit ) ;
22615: LD_ADDR_VAR 0 9
22619: PUSH
22620: LD_VAR 0 1
22624: PPUSH
22625: CALL_OW 255
22629: ST_TO_ADDR
// tech_space := tech_spacanom ;
22630: LD_ADDR_VAR 0 12
22634: PUSH
22635: LD_INT 29
22637: ST_TO_ADDR
// tech_time := tech_taurad ;
22638: LD_ADDR_VAR 0 13
22642: PUSH
22643: LD_INT 28
22645: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22646: LD_ADDR_VAR 0 11
22650: PUSH
22651: LD_VAR 0 1
22655: PPUSH
22656: CALL_OW 310
22660: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22661: LD_VAR 0 11
22665: PPUSH
22666: CALL_OW 247
22670: PUSH
22671: LD_INT 2
22673: EQUAL
22674: IFFALSE 22678
// exit ;
22676: GO 23188
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22678: LD_ADDR_VAR 0 8
22682: PUSH
22683: LD_INT 81
22685: PUSH
22686: LD_VAR 0 9
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 3
22697: PUSH
22698: LD_INT 21
22700: PUSH
22701: LD_INT 3
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PPUSH
22716: CALL_OW 69
22720: ST_TO_ADDR
// if not tmp then
22721: LD_VAR 0 8
22725: NOT
22726: IFFALSE 22730
// exit ;
22728: GO 23188
// if in_unit then
22730: LD_VAR 0 11
22734: IFFALSE 22758
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22736: LD_ADDR_VAR 0 10
22740: PUSH
22741: LD_VAR 0 8
22745: PPUSH
22746: LD_VAR 0 11
22750: PPUSH
22751: CALL_OW 74
22755: ST_TO_ADDR
22756: GO 22778
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22758: LD_ADDR_VAR 0 10
22762: PUSH
22763: LD_VAR 0 8
22767: PPUSH
22768: LD_VAR 0 1
22772: PPUSH
22773: CALL_OW 74
22777: ST_TO_ADDR
// if not enemy then
22778: LD_VAR 0 10
22782: NOT
22783: IFFALSE 22787
// exit ;
22785: GO 23188
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22787: LD_VAR 0 11
22791: PUSH
22792: LD_VAR 0 11
22796: PPUSH
22797: LD_VAR 0 10
22801: PPUSH
22802: CALL_OW 296
22806: PUSH
22807: LD_INT 13
22809: GREATER
22810: AND
22811: PUSH
22812: LD_VAR 0 1
22816: PPUSH
22817: LD_VAR 0 10
22821: PPUSH
22822: CALL_OW 296
22826: PUSH
22827: LD_INT 12
22829: GREATER
22830: OR
22831: IFFALSE 22835
// exit ;
22833: GO 23188
// missile := [ 1 ] ;
22835: LD_ADDR_VAR 0 14
22839: PUSH
22840: LD_INT 1
22842: PUSH
22843: EMPTY
22844: LIST
22845: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22846: LD_VAR 0 9
22850: PPUSH
22851: LD_VAR 0 12
22855: PPUSH
22856: CALL_OW 325
22860: IFFALSE 22889
// missile := Replace ( missile , missile + 1 , 2 ) ;
22862: LD_ADDR_VAR 0 14
22866: PUSH
22867: LD_VAR 0 14
22871: PPUSH
22872: LD_VAR 0 14
22876: PUSH
22877: LD_INT 1
22879: PLUS
22880: PPUSH
22881: LD_INT 2
22883: PPUSH
22884: CALL_OW 1
22888: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22889: LD_VAR 0 9
22893: PPUSH
22894: LD_VAR 0 13
22898: PPUSH
22899: CALL_OW 325
22903: PUSH
22904: LD_VAR 0 10
22908: PPUSH
22909: CALL_OW 255
22913: PPUSH
22914: LD_VAR 0 13
22918: PPUSH
22919: CALL_OW 325
22923: NOT
22924: AND
22925: IFFALSE 22954
// missile := Replace ( missile , missile + 1 , 3 ) ;
22927: LD_ADDR_VAR 0 14
22931: PUSH
22932: LD_VAR 0 14
22936: PPUSH
22937: LD_VAR 0 14
22941: PUSH
22942: LD_INT 1
22944: PLUS
22945: PPUSH
22946: LD_INT 3
22948: PPUSH
22949: CALL_OW 1
22953: ST_TO_ADDR
// if missile < 2 then
22954: LD_VAR 0 14
22958: PUSH
22959: LD_INT 2
22961: LESS
22962: IFFALSE 22966
// exit ;
22964: GO 23188
// x := GetX ( enemy ) ;
22966: LD_ADDR_VAR 0 4
22970: PUSH
22971: LD_VAR 0 10
22975: PPUSH
22976: CALL_OW 250
22980: ST_TO_ADDR
// y := GetY ( enemy ) ;
22981: LD_ADDR_VAR 0 5
22985: PUSH
22986: LD_VAR 0 10
22990: PPUSH
22991: CALL_OW 251
22995: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22996: LD_ADDR_VAR 0 6
23000: PUSH
23001: LD_VAR 0 4
23005: PUSH
23006: LD_INT 1
23008: NEG
23009: PPUSH
23010: LD_INT 1
23012: PPUSH
23013: CALL_OW 12
23017: PLUS
23018: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23019: LD_ADDR_VAR 0 7
23023: PUSH
23024: LD_VAR 0 5
23028: PUSH
23029: LD_INT 1
23031: NEG
23032: PPUSH
23033: LD_INT 1
23035: PPUSH
23036: CALL_OW 12
23040: PLUS
23041: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23042: LD_VAR 0 6
23046: PPUSH
23047: LD_VAR 0 7
23051: PPUSH
23052: CALL_OW 488
23056: NOT
23057: IFFALSE 23079
// begin _x := x ;
23059: LD_ADDR_VAR 0 6
23063: PUSH
23064: LD_VAR 0 4
23068: ST_TO_ADDR
// _y := y ;
23069: LD_ADDR_VAR 0 7
23073: PUSH
23074: LD_VAR 0 5
23078: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23079: LD_ADDR_VAR 0 3
23083: PUSH
23084: LD_INT 1
23086: PPUSH
23087: LD_VAR 0 14
23091: PPUSH
23092: CALL_OW 12
23096: ST_TO_ADDR
// case i of 1 :
23097: LD_VAR 0 3
23101: PUSH
23102: LD_INT 1
23104: DOUBLE
23105: EQUAL
23106: IFTRUE 23110
23108: GO 23127
23110: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23111: LD_VAR 0 1
23115: PPUSH
23116: LD_VAR 0 10
23120: PPUSH
23121: CALL_OW 115
23125: GO 23188
23127: LD_INT 2
23129: DOUBLE
23130: EQUAL
23131: IFTRUE 23135
23133: GO 23157
23135: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23136: LD_VAR 0 1
23140: PPUSH
23141: LD_VAR 0 6
23145: PPUSH
23146: LD_VAR 0 7
23150: PPUSH
23151: CALL_OW 153
23155: GO 23188
23157: LD_INT 3
23159: DOUBLE
23160: EQUAL
23161: IFTRUE 23165
23163: GO 23187
23165: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23166: LD_VAR 0 1
23170: PPUSH
23171: LD_VAR 0 6
23175: PPUSH
23176: LD_VAR 0 7
23180: PPUSH
23181: CALL_OW 154
23185: GO 23188
23187: POP
// end ;
23188: LD_VAR 0 2
23192: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23193: LD_INT 0
23195: PPUSH
23196: PPUSH
23197: PPUSH
23198: PPUSH
23199: PPUSH
23200: PPUSH
// if not unit or not building then
23201: LD_VAR 0 1
23205: NOT
23206: PUSH
23207: LD_VAR 0 2
23211: NOT
23212: OR
23213: IFFALSE 23217
// exit ;
23215: GO 23375
// x := GetX ( building ) ;
23217: LD_ADDR_VAR 0 5
23221: PUSH
23222: LD_VAR 0 2
23226: PPUSH
23227: CALL_OW 250
23231: ST_TO_ADDR
// y := GetY ( building ) ;
23232: LD_ADDR_VAR 0 6
23236: PUSH
23237: LD_VAR 0 2
23241: PPUSH
23242: CALL_OW 251
23246: ST_TO_ADDR
// for i = 0 to 5 do
23247: LD_ADDR_VAR 0 4
23251: PUSH
23252: DOUBLE
23253: LD_INT 0
23255: DEC
23256: ST_TO_ADDR
23257: LD_INT 5
23259: PUSH
23260: FOR_TO
23261: IFFALSE 23373
// begin _x := ShiftX ( x , i , 3 ) ;
23263: LD_ADDR_VAR 0 7
23267: PUSH
23268: LD_VAR 0 5
23272: PPUSH
23273: LD_VAR 0 4
23277: PPUSH
23278: LD_INT 3
23280: PPUSH
23281: CALL_OW 272
23285: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23286: LD_ADDR_VAR 0 8
23290: PUSH
23291: LD_VAR 0 6
23295: PPUSH
23296: LD_VAR 0 4
23300: PPUSH
23301: LD_INT 3
23303: PPUSH
23304: CALL_OW 273
23308: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23309: LD_VAR 0 7
23313: PPUSH
23314: LD_VAR 0 8
23318: PPUSH
23319: CALL_OW 488
23323: NOT
23324: IFFALSE 23328
// continue ;
23326: GO 23260
// if HexInfo ( _x , _y ) = 0 then
23328: LD_VAR 0 7
23332: PPUSH
23333: LD_VAR 0 8
23337: PPUSH
23338: CALL_OW 428
23342: PUSH
23343: LD_INT 0
23345: EQUAL
23346: IFFALSE 23371
// begin ComMoveXY ( unit , _x , _y ) ;
23348: LD_VAR 0 1
23352: PPUSH
23353: LD_VAR 0 7
23357: PPUSH
23358: LD_VAR 0 8
23362: PPUSH
23363: CALL_OW 111
// exit ;
23367: POP
23368: POP
23369: GO 23375
// end ; end ;
23371: GO 23260
23373: POP
23374: POP
// end ;
23375: LD_VAR 0 3
23379: RET
// export function ScanBase ( side , base_area ) ; begin
23380: LD_INT 0
23382: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23383: LD_ADDR_VAR 0 3
23387: PUSH
23388: LD_VAR 0 2
23392: PPUSH
23393: LD_INT 81
23395: PUSH
23396: LD_VAR 0 1
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PPUSH
23405: CALL_OW 70
23409: ST_TO_ADDR
// end ;
23410: LD_VAR 0 3
23414: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23415: LD_INT 0
23417: PPUSH
23418: PPUSH
23419: PPUSH
23420: PPUSH
// result := false ;
23421: LD_ADDR_VAR 0 2
23425: PUSH
23426: LD_INT 0
23428: ST_TO_ADDR
// side := GetSide ( unit ) ;
23429: LD_ADDR_VAR 0 3
23433: PUSH
23434: LD_VAR 0 1
23438: PPUSH
23439: CALL_OW 255
23443: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23444: LD_ADDR_VAR 0 4
23448: PUSH
23449: LD_VAR 0 1
23453: PPUSH
23454: CALL_OW 248
23458: ST_TO_ADDR
// case nat of 1 :
23459: LD_VAR 0 4
23463: PUSH
23464: LD_INT 1
23466: DOUBLE
23467: EQUAL
23468: IFTRUE 23472
23470: GO 23483
23472: POP
// tech := tech_lassight ; 2 :
23473: LD_ADDR_VAR 0 5
23477: PUSH
23478: LD_INT 12
23480: ST_TO_ADDR
23481: GO 23522
23483: LD_INT 2
23485: DOUBLE
23486: EQUAL
23487: IFTRUE 23491
23489: GO 23502
23491: POP
// tech := tech_mortar ; 3 :
23492: LD_ADDR_VAR 0 5
23496: PUSH
23497: LD_INT 41
23499: ST_TO_ADDR
23500: GO 23522
23502: LD_INT 3
23504: DOUBLE
23505: EQUAL
23506: IFTRUE 23510
23508: GO 23521
23510: POP
// tech := tech_bazooka ; end ;
23511: LD_ADDR_VAR 0 5
23515: PUSH
23516: LD_INT 44
23518: ST_TO_ADDR
23519: GO 23522
23521: POP
// if Researched ( side , tech ) then
23522: LD_VAR 0 3
23526: PPUSH
23527: LD_VAR 0 5
23531: PPUSH
23532: CALL_OW 325
23536: IFFALSE 23563
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23538: LD_ADDR_VAR 0 2
23542: PUSH
23543: LD_INT 5
23545: PUSH
23546: LD_INT 8
23548: PUSH
23549: LD_INT 9
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: LIST
23556: PUSH
23557: LD_VAR 0 4
23561: ARRAY
23562: ST_TO_ADDR
// end ;
23563: LD_VAR 0 2
23567: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23568: LD_INT 0
23570: PPUSH
23571: PPUSH
23572: PPUSH
// if not mines then
23573: LD_VAR 0 2
23577: NOT
23578: IFFALSE 23582
// exit ;
23580: GO 23726
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23582: LD_ADDR_VAR 0 5
23586: PUSH
23587: LD_INT 81
23589: PUSH
23590: LD_VAR 0 1
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 3
23601: PUSH
23602: LD_INT 21
23604: PUSH
23605: LD_INT 3
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PPUSH
23620: CALL_OW 69
23624: ST_TO_ADDR
// for i in mines do
23625: LD_ADDR_VAR 0 4
23629: PUSH
23630: LD_VAR 0 2
23634: PUSH
23635: FOR_IN
23636: IFFALSE 23724
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23638: LD_VAR 0 4
23642: PUSH
23643: LD_INT 1
23645: ARRAY
23646: PPUSH
23647: LD_VAR 0 4
23651: PUSH
23652: LD_INT 2
23654: ARRAY
23655: PPUSH
23656: CALL_OW 458
23660: NOT
23661: IFFALSE 23665
// continue ;
23663: GO 23635
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23665: LD_VAR 0 4
23669: PUSH
23670: LD_INT 1
23672: ARRAY
23673: PPUSH
23674: LD_VAR 0 4
23678: PUSH
23679: LD_INT 2
23681: ARRAY
23682: PPUSH
23683: CALL_OW 428
23687: PUSH
23688: LD_VAR 0 5
23692: IN
23693: IFFALSE 23722
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23695: LD_VAR 0 4
23699: PUSH
23700: LD_INT 1
23702: ARRAY
23703: PPUSH
23704: LD_VAR 0 4
23708: PUSH
23709: LD_INT 2
23711: ARRAY
23712: PPUSH
23713: LD_VAR 0 1
23717: PPUSH
23718: CALL_OW 456
// end ;
23722: GO 23635
23724: POP
23725: POP
// end ;
23726: LD_VAR 0 3
23730: RET
// export function Count ( array ) ; var i ; begin
23731: LD_INT 0
23733: PPUSH
23734: PPUSH
// result := 0 ;
23735: LD_ADDR_VAR 0 2
23739: PUSH
23740: LD_INT 0
23742: ST_TO_ADDR
// for i in array do
23743: LD_ADDR_VAR 0 3
23747: PUSH
23748: LD_VAR 0 1
23752: PUSH
23753: FOR_IN
23754: IFFALSE 23778
// if i then
23756: LD_VAR 0 3
23760: IFFALSE 23776
// result := result + 1 ;
23762: LD_ADDR_VAR 0 2
23766: PUSH
23767: LD_VAR 0 2
23771: PUSH
23772: LD_INT 1
23774: PLUS
23775: ST_TO_ADDR
23776: GO 23753
23778: POP
23779: POP
// end ;
23780: LD_VAR 0 2
23784: RET
// export function IsEmpty ( building ) ; begin
23785: LD_INT 0
23787: PPUSH
// if not building then
23788: LD_VAR 0 1
23792: NOT
23793: IFFALSE 23797
// exit ;
23795: GO 23840
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23797: LD_ADDR_VAR 0 2
23801: PUSH
23802: LD_VAR 0 1
23806: PUSH
23807: LD_INT 22
23809: PUSH
23810: LD_VAR 0 1
23814: PPUSH
23815: CALL_OW 255
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 58
23826: PUSH
23827: EMPTY
23828: LIST
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PPUSH
23834: CALL_OW 69
23838: IN
23839: ST_TO_ADDR
// end ;
23840: LD_VAR 0 2
23844: RET
// export function IsNotFull ( building ) ; var places ; begin
23845: LD_INT 0
23847: PPUSH
23848: PPUSH
// if not building then
23849: LD_VAR 0 1
23853: NOT
23854: IFFALSE 23858
// exit ;
23856: GO 24029
// result := false ;
23858: LD_ADDR_VAR 0 2
23862: PUSH
23863: LD_INT 0
23865: ST_TO_ADDR
// places := 0 ;
23866: LD_ADDR_VAR 0 3
23870: PUSH
23871: LD_INT 0
23873: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
23874: LD_VAR 0 1
23878: PPUSH
23879: CALL_OW 266
23883: PUSH
23884: LD_INT 0
23886: DOUBLE
23887: EQUAL
23888: IFTRUE 23946
23890: LD_INT 1
23892: DOUBLE
23893: EQUAL
23894: IFTRUE 23946
23896: LD_INT 6
23898: DOUBLE
23899: EQUAL
23900: IFTRUE 23946
23902: LD_INT 7
23904: DOUBLE
23905: EQUAL
23906: IFTRUE 23946
23908: LD_INT 8
23910: DOUBLE
23911: EQUAL
23912: IFTRUE 23946
23914: LD_INT 4
23916: DOUBLE
23917: EQUAL
23918: IFTRUE 23946
23920: LD_INT 5
23922: DOUBLE
23923: EQUAL
23924: IFTRUE 23946
23926: LD_INT 2
23928: DOUBLE
23929: EQUAL
23930: IFTRUE 23946
23932: LD_INT 3
23934: DOUBLE
23935: EQUAL
23936: IFTRUE 23946
23938: LD_INT 35
23940: DOUBLE
23941: EQUAL
23942: IFTRUE 23946
23944: GO 23957
23946: POP
// places := 6 ; b_bunker , b_breastwork :
23947: LD_ADDR_VAR 0 3
23951: PUSH
23952: LD_INT 6
23954: ST_TO_ADDR
23955: GO 24002
23957: LD_INT 32
23959: DOUBLE
23960: EQUAL
23961: IFTRUE 23971
23963: LD_INT 31
23965: DOUBLE
23966: EQUAL
23967: IFTRUE 23971
23969: GO 23982
23971: POP
// places := 1 ; b_control_tower :
23972: LD_ADDR_VAR 0 3
23976: PUSH
23977: LD_INT 1
23979: ST_TO_ADDR
23980: GO 24002
23982: LD_INT 36
23984: DOUBLE
23985: EQUAL
23986: IFTRUE 23990
23988: GO 24001
23990: POP
// places := 3 ; end ;
23991: LD_ADDR_VAR 0 3
23995: PUSH
23996: LD_INT 3
23998: ST_TO_ADDR
23999: GO 24002
24001: POP
// if places then
24002: LD_VAR 0 3
24006: IFFALSE 24029
// result := UnitsInside ( building ) < places ;
24008: LD_ADDR_VAR 0 2
24012: PUSH
24013: LD_VAR 0 1
24017: PPUSH
24018: CALL_OW 313
24022: PUSH
24023: LD_VAR 0 3
24027: LESS
24028: ST_TO_ADDR
// end ;
24029: LD_VAR 0 2
24033: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24034: LD_INT 0
24036: PPUSH
24037: PPUSH
24038: PPUSH
24039: PPUSH
// tmp := [ ] ;
24040: LD_ADDR_VAR 0 3
24044: PUSH
24045: EMPTY
24046: ST_TO_ADDR
// list := [ ] ;
24047: LD_ADDR_VAR 0 5
24051: PUSH
24052: EMPTY
24053: ST_TO_ADDR
// for i = 16 to 25 do
24054: LD_ADDR_VAR 0 4
24058: PUSH
24059: DOUBLE
24060: LD_INT 16
24062: DEC
24063: ST_TO_ADDR
24064: LD_INT 25
24066: PUSH
24067: FOR_TO
24068: IFFALSE 24141
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24070: LD_ADDR_VAR 0 3
24074: PUSH
24075: LD_VAR 0 3
24079: PUSH
24080: LD_INT 22
24082: PUSH
24083: LD_VAR 0 1
24087: PPUSH
24088: CALL_OW 255
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PUSH
24097: LD_INT 91
24099: PUSH
24100: LD_VAR 0 1
24104: PUSH
24105: LD_INT 6
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 30
24115: PUSH
24116: LD_VAR 0 4
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: LIST
24129: PUSH
24130: EMPTY
24131: LIST
24132: PPUSH
24133: CALL_OW 69
24137: ADD
24138: ST_TO_ADDR
24139: GO 24067
24141: POP
24142: POP
// for i = 1 to tmp do
24143: LD_ADDR_VAR 0 4
24147: PUSH
24148: DOUBLE
24149: LD_INT 1
24151: DEC
24152: ST_TO_ADDR
24153: LD_VAR 0 3
24157: PUSH
24158: FOR_TO
24159: IFFALSE 24247
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24161: LD_ADDR_VAR 0 5
24165: PUSH
24166: LD_VAR 0 5
24170: PUSH
24171: LD_VAR 0 3
24175: PUSH
24176: LD_VAR 0 4
24180: ARRAY
24181: PPUSH
24182: CALL_OW 266
24186: PUSH
24187: LD_VAR 0 3
24191: PUSH
24192: LD_VAR 0 4
24196: ARRAY
24197: PPUSH
24198: CALL_OW 250
24202: PUSH
24203: LD_VAR 0 3
24207: PUSH
24208: LD_VAR 0 4
24212: ARRAY
24213: PPUSH
24214: CALL_OW 251
24218: PUSH
24219: LD_VAR 0 3
24223: PUSH
24224: LD_VAR 0 4
24228: ARRAY
24229: PPUSH
24230: CALL_OW 254
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: PUSH
24241: EMPTY
24242: LIST
24243: ADD
24244: ST_TO_ADDR
24245: GO 24158
24247: POP
24248: POP
// result := list ;
24249: LD_ADDR_VAR 0 2
24253: PUSH
24254: LD_VAR 0 5
24258: ST_TO_ADDR
// end ;
24259: LD_VAR 0 2
24263: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24264: LD_INT 0
24266: PPUSH
24267: PPUSH
24268: PPUSH
24269: PPUSH
24270: PPUSH
24271: PPUSH
24272: PPUSH
// if not factory then
24273: LD_VAR 0 1
24277: NOT
24278: IFFALSE 24282
// exit ;
24280: GO 24875
// if control = control_apeman then
24282: LD_VAR 0 4
24286: PUSH
24287: LD_INT 5
24289: EQUAL
24290: IFFALSE 24399
// begin tmp := UnitsInside ( factory ) ;
24292: LD_ADDR_VAR 0 8
24296: PUSH
24297: LD_VAR 0 1
24301: PPUSH
24302: CALL_OW 313
24306: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24307: LD_VAR 0 8
24311: PPUSH
24312: LD_INT 25
24314: PUSH
24315: LD_INT 12
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PPUSH
24322: CALL_OW 72
24326: NOT
24327: IFFALSE 24337
// control := control_manual ;
24329: LD_ADDR_VAR 0 4
24333: PUSH
24334: LD_INT 1
24336: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24337: LD_ADDR_VAR 0 8
24341: PUSH
24342: LD_VAR 0 1
24346: PPUSH
24347: CALL 24034 0 1
24351: ST_TO_ADDR
// if tmp then
24352: LD_VAR 0 8
24356: IFFALSE 24399
// begin for i in tmp do
24358: LD_ADDR_VAR 0 7
24362: PUSH
24363: LD_VAR 0 8
24367: PUSH
24368: FOR_IN
24369: IFFALSE 24397
// if i [ 1 ] = b_ext_radio then
24371: LD_VAR 0 7
24375: PUSH
24376: LD_INT 1
24378: ARRAY
24379: PUSH
24380: LD_INT 22
24382: EQUAL
24383: IFFALSE 24395
// begin control := control_remote ;
24385: LD_ADDR_VAR 0 4
24389: PUSH
24390: LD_INT 2
24392: ST_TO_ADDR
// break ;
24393: GO 24397
// end ;
24395: GO 24368
24397: POP
24398: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24399: LD_VAR 0 1
24403: PPUSH
24404: LD_VAR 0 2
24408: PPUSH
24409: LD_VAR 0 3
24413: PPUSH
24414: LD_VAR 0 4
24418: PPUSH
24419: LD_VAR 0 5
24423: PPUSH
24424: CALL_OW 448
24428: IFFALSE 24463
// begin result := [ chassis , engine , control , weapon ] ;
24430: LD_ADDR_VAR 0 6
24434: PUSH
24435: LD_VAR 0 2
24439: PUSH
24440: LD_VAR 0 3
24444: PUSH
24445: LD_VAR 0 4
24449: PUSH
24450: LD_VAR 0 5
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: ST_TO_ADDR
// exit ;
24461: GO 24875
// end ; _chassis := AvailableChassisList ( factory ) ;
24463: LD_ADDR_VAR 0 9
24467: PUSH
24468: LD_VAR 0 1
24472: PPUSH
24473: CALL_OW 475
24477: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24478: LD_ADDR_VAR 0 11
24482: PUSH
24483: LD_VAR 0 1
24487: PPUSH
24488: CALL_OW 476
24492: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24493: LD_ADDR_VAR 0 12
24497: PUSH
24498: LD_VAR 0 1
24502: PPUSH
24503: CALL_OW 477
24507: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24508: LD_ADDR_VAR 0 10
24512: PUSH
24513: LD_VAR 0 1
24517: PPUSH
24518: CALL_OW 478
24522: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24523: LD_VAR 0 9
24527: NOT
24528: PUSH
24529: LD_VAR 0 11
24533: NOT
24534: OR
24535: PUSH
24536: LD_VAR 0 12
24540: NOT
24541: OR
24542: PUSH
24543: LD_VAR 0 10
24547: NOT
24548: OR
24549: IFFALSE 24584
// begin result := [ chassis , engine , control , weapon ] ;
24551: LD_ADDR_VAR 0 6
24555: PUSH
24556: LD_VAR 0 2
24560: PUSH
24561: LD_VAR 0 3
24565: PUSH
24566: LD_VAR 0 4
24570: PUSH
24571: LD_VAR 0 5
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: ST_TO_ADDR
// exit ;
24582: GO 24875
// end ; if not chassis in _chassis then
24584: LD_VAR 0 2
24588: PUSH
24589: LD_VAR 0 9
24593: IN
24594: NOT
24595: IFFALSE 24621
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24597: LD_ADDR_VAR 0 2
24601: PUSH
24602: LD_VAR 0 9
24606: PUSH
24607: LD_INT 1
24609: PPUSH
24610: LD_VAR 0 9
24614: PPUSH
24615: CALL_OW 12
24619: ARRAY
24620: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24621: LD_VAR 0 2
24625: PPUSH
24626: LD_VAR 0 3
24630: PPUSH
24631: CALL 24880 0 2
24635: NOT
24636: IFFALSE 24695
// repeat engine := _engine [ 1 ] ;
24638: LD_ADDR_VAR 0 3
24642: PUSH
24643: LD_VAR 0 11
24647: PUSH
24648: LD_INT 1
24650: ARRAY
24651: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24652: LD_ADDR_VAR 0 11
24656: PUSH
24657: LD_VAR 0 11
24661: PPUSH
24662: LD_INT 1
24664: PPUSH
24665: CALL_OW 3
24669: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24670: LD_VAR 0 2
24674: PPUSH
24675: LD_VAR 0 3
24679: PPUSH
24680: CALL 24880 0 2
24684: PUSH
24685: LD_VAR 0 11
24689: PUSH
24690: EMPTY
24691: EQUAL
24692: OR
24693: IFFALSE 24638
// if not control in _control then
24695: LD_VAR 0 4
24699: PUSH
24700: LD_VAR 0 12
24704: IN
24705: NOT
24706: IFFALSE 24732
// control := _control [ rand ( 1 , _control ) ] ;
24708: LD_ADDR_VAR 0 4
24712: PUSH
24713: LD_VAR 0 12
24717: PUSH
24718: LD_INT 1
24720: PPUSH
24721: LD_VAR 0 12
24725: PPUSH
24726: CALL_OW 12
24730: ARRAY
24731: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24732: LD_VAR 0 2
24736: PPUSH
24737: LD_VAR 0 5
24741: PPUSH
24742: CALL 25100 0 2
24746: NOT
24747: IFFALSE 24806
// repeat weapon := _weapon [ 1 ] ;
24749: LD_ADDR_VAR 0 5
24753: PUSH
24754: LD_VAR 0 10
24758: PUSH
24759: LD_INT 1
24761: ARRAY
24762: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24763: LD_ADDR_VAR 0 10
24767: PUSH
24768: LD_VAR 0 10
24772: PPUSH
24773: LD_INT 1
24775: PPUSH
24776: CALL_OW 3
24780: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24781: LD_VAR 0 2
24785: PPUSH
24786: LD_VAR 0 5
24790: PPUSH
24791: CALL 25100 0 2
24795: PUSH
24796: LD_VAR 0 10
24800: PUSH
24801: EMPTY
24802: EQUAL
24803: OR
24804: IFFALSE 24749
// result := [ ] ;
24806: LD_ADDR_VAR 0 6
24810: PUSH
24811: EMPTY
24812: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24813: LD_VAR 0 1
24817: PPUSH
24818: LD_VAR 0 2
24822: PPUSH
24823: LD_VAR 0 3
24827: PPUSH
24828: LD_VAR 0 4
24832: PPUSH
24833: LD_VAR 0 5
24837: PPUSH
24838: CALL_OW 448
24842: IFFALSE 24875
// result := [ chassis , engine , control , weapon ] ;
24844: LD_ADDR_VAR 0 6
24848: PUSH
24849: LD_VAR 0 2
24853: PUSH
24854: LD_VAR 0 3
24858: PUSH
24859: LD_VAR 0 4
24863: PUSH
24864: LD_VAR 0 5
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: ST_TO_ADDR
// end ;
24875: LD_VAR 0 6
24879: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24880: LD_INT 0
24882: PPUSH
// if not chassis or not engine then
24883: LD_VAR 0 1
24887: NOT
24888: PUSH
24889: LD_VAR 0 2
24893: NOT
24894: OR
24895: IFFALSE 24899
// exit ;
24897: GO 25095
// case engine of engine_solar :
24899: LD_VAR 0 2
24903: PUSH
24904: LD_INT 2
24906: DOUBLE
24907: EQUAL
24908: IFTRUE 24912
24910: GO 24950
24912: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24913: LD_ADDR_VAR 0 3
24917: PUSH
24918: LD_INT 11
24920: PUSH
24921: LD_INT 12
24923: PUSH
24924: LD_INT 13
24926: PUSH
24927: LD_INT 14
24929: PUSH
24930: LD_INT 1
24932: PUSH
24933: LD_INT 2
24935: PUSH
24936: LD_INT 3
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: ST_TO_ADDR
24948: GO 25079
24950: LD_INT 1
24952: DOUBLE
24953: EQUAL
24954: IFTRUE 24958
24956: GO 25020
24958: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24959: LD_ADDR_VAR 0 3
24963: PUSH
24964: LD_INT 11
24966: PUSH
24967: LD_INT 12
24969: PUSH
24970: LD_INT 13
24972: PUSH
24973: LD_INT 14
24975: PUSH
24976: LD_INT 1
24978: PUSH
24979: LD_INT 2
24981: PUSH
24982: LD_INT 3
24984: PUSH
24985: LD_INT 4
24987: PUSH
24988: LD_INT 5
24990: PUSH
24991: LD_INT 21
24993: PUSH
24994: LD_INT 23
24996: PUSH
24997: LD_INT 22
24999: PUSH
25000: LD_INT 24
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: ST_TO_ADDR
25018: GO 25079
25020: LD_INT 3
25022: DOUBLE
25023: EQUAL
25024: IFTRUE 25028
25026: GO 25078
25028: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25029: LD_ADDR_VAR 0 3
25033: PUSH
25034: LD_INT 13
25036: PUSH
25037: LD_INT 14
25039: PUSH
25040: LD_INT 2
25042: PUSH
25043: LD_INT 3
25045: PUSH
25046: LD_INT 4
25048: PUSH
25049: LD_INT 5
25051: PUSH
25052: LD_INT 21
25054: PUSH
25055: LD_INT 22
25057: PUSH
25058: LD_INT 23
25060: PUSH
25061: LD_INT 24
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: ST_TO_ADDR
25076: GO 25079
25078: POP
// result := ( chassis in result ) ;
25079: LD_ADDR_VAR 0 3
25083: PUSH
25084: LD_VAR 0 1
25088: PUSH
25089: LD_VAR 0 3
25093: IN
25094: ST_TO_ADDR
// end ;
25095: LD_VAR 0 3
25099: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25100: LD_INT 0
25102: PPUSH
// if not chassis or not weapon then
25103: LD_VAR 0 1
25107: NOT
25108: PUSH
25109: LD_VAR 0 2
25113: NOT
25114: OR
25115: IFFALSE 25119
// exit ;
25117: GO 26181
// case weapon of us_machine_gun :
25119: LD_VAR 0 2
25123: PUSH
25124: LD_INT 2
25126: DOUBLE
25127: EQUAL
25128: IFTRUE 25132
25130: GO 25162
25132: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25133: LD_ADDR_VAR 0 3
25137: PUSH
25138: LD_INT 1
25140: PUSH
25141: LD_INT 2
25143: PUSH
25144: LD_INT 3
25146: PUSH
25147: LD_INT 4
25149: PUSH
25150: LD_INT 5
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: ST_TO_ADDR
25160: GO 26165
25162: LD_INT 3
25164: DOUBLE
25165: EQUAL
25166: IFTRUE 25170
25168: GO 25200
25170: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25171: LD_ADDR_VAR 0 3
25175: PUSH
25176: LD_INT 1
25178: PUSH
25179: LD_INT 2
25181: PUSH
25182: LD_INT 3
25184: PUSH
25185: LD_INT 4
25187: PUSH
25188: LD_INT 5
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: ST_TO_ADDR
25198: GO 26165
25200: LD_INT 11
25202: DOUBLE
25203: EQUAL
25204: IFTRUE 25208
25206: GO 25238
25208: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25209: LD_ADDR_VAR 0 3
25213: PUSH
25214: LD_INT 1
25216: PUSH
25217: LD_INT 2
25219: PUSH
25220: LD_INT 3
25222: PUSH
25223: LD_INT 4
25225: PUSH
25226: LD_INT 5
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: ST_TO_ADDR
25236: GO 26165
25238: LD_INT 4
25240: DOUBLE
25241: EQUAL
25242: IFTRUE 25246
25244: GO 25272
25246: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25247: LD_ADDR_VAR 0 3
25251: PUSH
25252: LD_INT 2
25254: PUSH
25255: LD_INT 3
25257: PUSH
25258: LD_INT 4
25260: PUSH
25261: LD_INT 5
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: ST_TO_ADDR
25270: GO 26165
25272: LD_INT 5
25274: DOUBLE
25275: EQUAL
25276: IFTRUE 25280
25278: GO 25306
25280: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25281: LD_ADDR_VAR 0 3
25285: PUSH
25286: LD_INT 2
25288: PUSH
25289: LD_INT 3
25291: PUSH
25292: LD_INT 4
25294: PUSH
25295: LD_INT 5
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: ST_TO_ADDR
25304: GO 26165
25306: LD_INT 9
25308: DOUBLE
25309: EQUAL
25310: IFTRUE 25314
25312: GO 25340
25314: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25315: LD_ADDR_VAR 0 3
25319: PUSH
25320: LD_INT 2
25322: PUSH
25323: LD_INT 3
25325: PUSH
25326: LD_INT 4
25328: PUSH
25329: LD_INT 5
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: ST_TO_ADDR
25338: GO 26165
25340: LD_INT 7
25342: DOUBLE
25343: EQUAL
25344: IFTRUE 25348
25346: GO 25374
25348: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25349: LD_ADDR_VAR 0 3
25353: PUSH
25354: LD_INT 2
25356: PUSH
25357: LD_INT 3
25359: PUSH
25360: LD_INT 4
25362: PUSH
25363: LD_INT 5
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: ST_TO_ADDR
25372: GO 26165
25374: LD_INT 12
25376: DOUBLE
25377: EQUAL
25378: IFTRUE 25382
25380: GO 25408
25382: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25383: LD_ADDR_VAR 0 3
25387: PUSH
25388: LD_INT 2
25390: PUSH
25391: LD_INT 3
25393: PUSH
25394: LD_INT 4
25396: PUSH
25397: LD_INT 5
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: ST_TO_ADDR
25406: GO 26165
25408: LD_INT 13
25410: DOUBLE
25411: EQUAL
25412: IFTRUE 25416
25414: GO 25442
25416: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25417: LD_ADDR_VAR 0 3
25421: PUSH
25422: LD_INT 2
25424: PUSH
25425: LD_INT 3
25427: PUSH
25428: LD_INT 4
25430: PUSH
25431: LD_INT 5
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: ST_TO_ADDR
25440: GO 26165
25442: LD_INT 14
25444: DOUBLE
25445: EQUAL
25446: IFTRUE 25450
25448: GO 25468
25450: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25451: LD_ADDR_VAR 0 3
25455: PUSH
25456: LD_INT 4
25458: PUSH
25459: LD_INT 5
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: ST_TO_ADDR
25466: GO 26165
25468: LD_INT 6
25470: DOUBLE
25471: EQUAL
25472: IFTRUE 25476
25474: GO 25494
25476: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25477: LD_ADDR_VAR 0 3
25481: PUSH
25482: LD_INT 4
25484: PUSH
25485: LD_INT 5
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: ST_TO_ADDR
25492: GO 26165
25494: LD_INT 10
25496: DOUBLE
25497: EQUAL
25498: IFTRUE 25502
25500: GO 25520
25502: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25503: LD_ADDR_VAR 0 3
25507: PUSH
25508: LD_INT 4
25510: PUSH
25511: LD_INT 5
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: ST_TO_ADDR
25518: GO 26165
25520: LD_INT 22
25522: DOUBLE
25523: EQUAL
25524: IFTRUE 25528
25526: GO 25554
25528: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25529: LD_ADDR_VAR 0 3
25533: PUSH
25534: LD_INT 11
25536: PUSH
25537: LD_INT 12
25539: PUSH
25540: LD_INT 13
25542: PUSH
25543: LD_INT 14
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: ST_TO_ADDR
25552: GO 26165
25554: LD_INT 23
25556: DOUBLE
25557: EQUAL
25558: IFTRUE 25562
25560: GO 25588
25562: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25563: LD_ADDR_VAR 0 3
25567: PUSH
25568: LD_INT 11
25570: PUSH
25571: LD_INT 12
25573: PUSH
25574: LD_INT 13
25576: PUSH
25577: LD_INT 14
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: ST_TO_ADDR
25586: GO 26165
25588: LD_INT 24
25590: DOUBLE
25591: EQUAL
25592: IFTRUE 25596
25594: GO 25622
25596: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25597: LD_ADDR_VAR 0 3
25601: PUSH
25602: LD_INT 11
25604: PUSH
25605: LD_INT 12
25607: PUSH
25608: LD_INT 13
25610: PUSH
25611: LD_INT 14
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: ST_TO_ADDR
25620: GO 26165
25622: LD_INT 30
25624: DOUBLE
25625: EQUAL
25626: IFTRUE 25630
25628: GO 25656
25630: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25631: LD_ADDR_VAR 0 3
25635: PUSH
25636: LD_INT 11
25638: PUSH
25639: LD_INT 12
25641: PUSH
25642: LD_INT 13
25644: PUSH
25645: LD_INT 14
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: ST_TO_ADDR
25654: GO 26165
25656: LD_INT 25
25658: DOUBLE
25659: EQUAL
25660: IFTRUE 25664
25662: GO 25682
25664: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25665: LD_ADDR_VAR 0 3
25669: PUSH
25670: LD_INT 13
25672: PUSH
25673: LD_INT 14
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: ST_TO_ADDR
25680: GO 26165
25682: LD_INT 27
25684: DOUBLE
25685: EQUAL
25686: IFTRUE 25690
25688: GO 25708
25690: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25691: LD_ADDR_VAR 0 3
25695: PUSH
25696: LD_INT 13
25698: PUSH
25699: LD_INT 14
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: ST_TO_ADDR
25706: GO 26165
25708: LD_EXP 77
25712: DOUBLE
25713: EQUAL
25714: IFTRUE 25718
25716: GO 25744
25718: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25719: LD_ADDR_VAR 0 3
25723: PUSH
25724: LD_INT 11
25726: PUSH
25727: LD_INT 12
25729: PUSH
25730: LD_INT 13
25732: PUSH
25733: LD_INT 14
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: ST_TO_ADDR
25742: GO 26165
25744: LD_INT 28
25746: DOUBLE
25747: EQUAL
25748: IFTRUE 25752
25750: GO 25770
25752: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25753: LD_ADDR_VAR 0 3
25757: PUSH
25758: LD_INT 13
25760: PUSH
25761: LD_INT 14
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: ST_TO_ADDR
25768: GO 26165
25770: LD_INT 29
25772: DOUBLE
25773: EQUAL
25774: IFTRUE 25778
25776: GO 25796
25778: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25779: LD_ADDR_VAR 0 3
25783: PUSH
25784: LD_INT 13
25786: PUSH
25787: LD_INT 14
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: ST_TO_ADDR
25794: GO 26165
25796: LD_INT 31
25798: DOUBLE
25799: EQUAL
25800: IFTRUE 25804
25802: GO 25822
25804: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25805: LD_ADDR_VAR 0 3
25809: PUSH
25810: LD_INT 13
25812: PUSH
25813: LD_INT 14
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: ST_TO_ADDR
25820: GO 26165
25822: LD_INT 26
25824: DOUBLE
25825: EQUAL
25826: IFTRUE 25830
25828: GO 25848
25830: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25831: LD_ADDR_VAR 0 3
25835: PUSH
25836: LD_INT 13
25838: PUSH
25839: LD_INT 14
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: ST_TO_ADDR
25846: GO 26165
25848: LD_INT 42
25850: DOUBLE
25851: EQUAL
25852: IFTRUE 25856
25854: GO 25882
25856: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25857: LD_ADDR_VAR 0 3
25861: PUSH
25862: LD_INT 21
25864: PUSH
25865: LD_INT 22
25867: PUSH
25868: LD_INT 23
25870: PUSH
25871: LD_INT 24
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: ST_TO_ADDR
25880: GO 26165
25882: LD_INT 43
25884: DOUBLE
25885: EQUAL
25886: IFTRUE 25890
25888: GO 25916
25890: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25891: LD_ADDR_VAR 0 3
25895: PUSH
25896: LD_INT 21
25898: PUSH
25899: LD_INT 22
25901: PUSH
25902: LD_INT 23
25904: PUSH
25905: LD_INT 24
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: ST_TO_ADDR
25914: GO 26165
25916: LD_INT 44
25918: DOUBLE
25919: EQUAL
25920: IFTRUE 25924
25922: GO 25950
25924: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25925: LD_ADDR_VAR 0 3
25929: PUSH
25930: LD_INT 21
25932: PUSH
25933: LD_INT 22
25935: PUSH
25936: LD_INT 23
25938: PUSH
25939: LD_INT 24
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: ST_TO_ADDR
25948: GO 26165
25950: LD_INT 45
25952: DOUBLE
25953: EQUAL
25954: IFTRUE 25958
25956: GO 25984
25958: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25959: LD_ADDR_VAR 0 3
25963: PUSH
25964: LD_INT 21
25966: PUSH
25967: LD_INT 22
25969: PUSH
25970: LD_INT 23
25972: PUSH
25973: LD_INT 24
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: ST_TO_ADDR
25982: GO 26165
25984: LD_INT 49
25986: DOUBLE
25987: EQUAL
25988: IFTRUE 25992
25990: GO 26018
25992: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25993: LD_ADDR_VAR 0 3
25997: PUSH
25998: LD_INT 21
26000: PUSH
26001: LD_INT 22
26003: PUSH
26004: LD_INT 23
26006: PUSH
26007: LD_INT 24
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: ST_TO_ADDR
26016: GO 26165
26018: LD_INT 51
26020: DOUBLE
26021: EQUAL
26022: IFTRUE 26026
26024: GO 26052
26026: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26027: LD_ADDR_VAR 0 3
26031: PUSH
26032: LD_INT 21
26034: PUSH
26035: LD_INT 22
26037: PUSH
26038: LD_INT 23
26040: PUSH
26041: LD_INT 24
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: ST_TO_ADDR
26050: GO 26165
26052: LD_INT 52
26054: DOUBLE
26055: EQUAL
26056: IFTRUE 26060
26058: GO 26086
26060: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26061: LD_ADDR_VAR 0 3
26065: PUSH
26066: LD_INT 21
26068: PUSH
26069: LD_INT 22
26071: PUSH
26072: LD_INT 23
26074: PUSH
26075: LD_INT 24
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: ST_TO_ADDR
26084: GO 26165
26086: LD_INT 53
26088: DOUBLE
26089: EQUAL
26090: IFTRUE 26094
26092: GO 26112
26094: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26095: LD_ADDR_VAR 0 3
26099: PUSH
26100: LD_INT 23
26102: PUSH
26103: LD_INT 24
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: ST_TO_ADDR
26110: GO 26165
26112: LD_INT 46
26114: DOUBLE
26115: EQUAL
26116: IFTRUE 26120
26118: GO 26138
26120: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26121: LD_ADDR_VAR 0 3
26125: PUSH
26126: LD_INT 23
26128: PUSH
26129: LD_INT 24
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: ST_TO_ADDR
26136: GO 26165
26138: LD_INT 47
26140: DOUBLE
26141: EQUAL
26142: IFTRUE 26146
26144: GO 26164
26146: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26147: LD_ADDR_VAR 0 3
26151: PUSH
26152: LD_INT 23
26154: PUSH
26155: LD_INT 24
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: ST_TO_ADDR
26162: GO 26165
26164: POP
// result := ( chassis in result ) ;
26165: LD_ADDR_VAR 0 3
26169: PUSH
26170: LD_VAR 0 1
26174: PUSH
26175: LD_VAR 0 3
26179: IN
26180: ST_TO_ADDR
// end ;
26181: LD_VAR 0 3
26185: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26186: LD_INT 0
26188: PPUSH
26189: PPUSH
26190: PPUSH
26191: PPUSH
26192: PPUSH
26193: PPUSH
26194: PPUSH
// result := array ;
26195: LD_ADDR_VAR 0 5
26199: PUSH
26200: LD_VAR 0 1
26204: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26205: LD_VAR 0 1
26209: NOT
26210: PUSH
26211: LD_VAR 0 2
26215: NOT
26216: OR
26217: PUSH
26218: LD_VAR 0 3
26222: NOT
26223: OR
26224: PUSH
26225: LD_VAR 0 2
26229: PUSH
26230: LD_VAR 0 1
26234: GREATER
26235: OR
26236: PUSH
26237: LD_VAR 0 3
26241: PUSH
26242: LD_VAR 0 1
26246: GREATER
26247: OR
26248: IFFALSE 26252
// exit ;
26250: GO 26548
// if direction then
26252: LD_VAR 0 4
26256: IFFALSE 26320
// begin d := 1 ;
26258: LD_ADDR_VAR 0 9
26262: PUSH
26263: LD_INT 1
26265: ST_TO_ADDR
// if i_from > i_to then
26266: LD_VAR 0 2
26270: PUSH
26271: LD_VAR 0 3
26275: GREATER
26276: IFFALSE 26302
// length := ( array - i_from ) + i_to else
26278: LD_ADDR_VAR 0 11
26282: PUSH
26283: LD_VAR 0 1
26287: PUSH
26288: LD_VAR 0 2
26292: MINUS
26293: PUSH
26294: LD_VAR 0 3
26298: PLUS
26299: ST_TO_ADDR
26300: GO 26318
// length := i_to - i_from ;
26302: LD_ADDR_VAR 0 11
26306: PUSH
26307: LD_VAR 0 3
26311: PUSH
26312: LD_VAR 0 2
26316: MINUS
26317: ST_TO_ADDR
// end else
26318: GO 26381
// begin d := - 1 ;
26320: LD_ADDR_VAR 0 9
26324: PUSH
26325: LD_INT 1
26327: NEG
26328: ST_TO_ADDR
// if i_from > i_to then
26329: LD_VAR 0 2
26333: PUSH
26334: LD_VAR 0 3
26338: GREATER
26339: IFFALSE 26359
// length := i_from - i_to else
26341: LD_ADDR_VAR 0 11
26345: PUSH
26346: LD_VAR 0 2
26350: PUSH
26351: LD_VAR 0 3
26355: MINUS
26356: ST_TO_ADDR
26357: GO 26381
// length := ( array - i_to ) + i_from ;
26359: LD_ADDR_VAR 0 11
26363: PUSH
26364: LD_VAR 0 1
26368: PUSH
26369: LD_VAR 0 3
26373: MINUS
26374: PUSH
26375: LD_VAR 0 2
26379: PLUS
26380: ST_TO_ADDR
// end ; if not length then
26381: LD_VAR 0 11
26385: NOT
26386: IFFALSE 26390
// exit ;
26388: GO 26548
// tmp := array ;
26390: LD_ADDR_VAR 0 10
26394: PUSH
26395: LD_VAR 0 1
26399: ST_TO_ADDR
// for i = 1 to length do
26400: LD_ADDR_VAR 0 6
26404: PUSH
26405: DOUBLE
26406: LD_INT 1
26408: DEC
26409: ST_TO_ADDR
26410: LD_VAR 0 11
26414: PUSH
26415: FOR_TO
26416: IFFALSE 26536
// begin for j = 1 to array do
26418: LD_ADDR_VAR 0 7
26422: PUSH
26423: DOUBLE
26424: LD_INT 1
26426: DEC
26427: ST_TO_ADDR
26428: LD_VAR 0 1
26432: PUSH
26433: FOR_TO
26434: IFFALSE 26522
// begin k := j + d ;
26436: LD_ADDR_VAR 0 8
26440: PUSH
26441: LD_VAR 0 7
26445: PUSH
26446: LD_VAR 0 9
26450: PLUS
26451: ST_TO_ADDR
// if k > array then
26452: LD_VAR 0 8
26456: PUSH
26457: LD_VAR 0 1
26461: GREATER
26462: IFFALSE 26472
// k := 1 ;
26464: LD_ADDR_VAR 0 8
26468: PUSH
26469: LD_INT 1
26471: ST_TO_ADDR
// if not k then
26472: LD_VAR 0 8
26476: NOT
26477: IFFALSE 26489
// k := array ;
26479: LD_ADDR_VAR 0 8
26483: PUSH
26484: LD_VAR 0 1
26488: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26489: LD_ADDR_VAR 0 10
26493: PUSH
26494: LD_VAR 0 10
26498: PPUSH
26499: LD_VAR 0 8
26503: PPUSH
26504: LD_VAR 0 1
26508: PUSH
26509: LD_VAR 0 7
26513: ARRAY
26514: PPUSH
26515: CALL_OW 1
26519: ST_TO_ADDR
// end ;
26520: GO 26433
26522: POP
26523: POP
// array := tmp ;
26524: LD_ADDR_VAR 0 1
26528: PUSH
26529: LD_VAR 0 10
26533: ST_TO_ADDR
// end ;
26534: GO 26415
26536: POP
26537: POP
// result := array ;
26538: LD_ADDR_VAR 0 5
26542: PUSH
26543: LD_VAR 0 1
26547: ST_TO_ADDR
// end ;
26548: LD_VAR 0 5
26552: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26553: LD_INT 0
26555: PPUSH
26556: PPUSH
// result := 0 ;
26557: LD_ADDR_VAR 0 3
26561: PUSH
26562: LD_INT 0
26564: ST_TO_ADDR
// if not array or not value in array then
26565: LD_VAR 0 1
26569: NOT
26570: PUSH
26571: LD_VAR 0 2
26575: PUSH
26576: LD_VAR 0 1
26580: IN
26581: NOT
26582: OR
26583: IFFALSE 26587
// exit ;
26585: GO 26641
// for i = 1 to array do
26587: LD_ADDR_VAR 0 4
26591: PUSH
26592: DOUBLE
26593: LD_INT 1
26595: DEC
26596: ST_TO_ADDR
26597: LD_VAR 0 1
26601: PUSH
26602: FOR_TO
26603: IFFALSE 26639
// if value = array [ i ] then
26605: LD_VAR 0 2
26609: PUSH
26610: LD_VAR 0 1
26614: PUSH
26615: LD_VAR 0 4
26619: ARRAY
26620: EQUAL
26621: IFFALSE 26637
// begin result := i ;
26623: LD_ADDR_VAR 0 3
26627: PUSH
26628: LD_VAR 0 4
26632: ST_TO_ADDR
// exit ;
26633: POP
26634: POP
26635: GO 26641
// end ;
26637: GO 26602
26639: POP
26640: POP
// end ;
26641: LD_VAR 0 3
26645: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26646: LD_INT 0
26648: PPUSH
// vc_chassis := chassis ;
26649: LD_ADDR_OWVAR 37
26653: PUSH
26654: LD_VAR 0 1
26658: ST_TO_ADDR
// vc_engine := engine ;
26659: LD_ADDR_OWVAR 39
26663: PUSH
26664: LD_VAR 0 2
26668: ST_TO_ADDR
// vc_control := control ;
26669: LD_ADDR_OWVAR 38
26673: PUSH
26674: LD_VAR 0 3
26678: ST_TO_ADDR
// vc_weapon := weapon ;
26679: LD_ADDR_OWVAR 40
26683: PUSH
26684: LD_VAR 0 4
26688: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26689: LD_ADDR_OWVAR 41
26693: PUSH
26694: LD_VAR 0 5
26698: ST_TO_ADDR
// end ;
26699: LD_VAR 0 6
26703: RET
// export function WantPlant ( unit ) ; var task ; begin
26704: LD_INT 0
26706: PPUSH
26707: PPUSH
// result := false ;
26708: LD_ADDR_VAR 0 2
26712: PUSH
26713: LD_INT 0
26715: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26716: LD_ADDR_VAR 0 3
26720: PUSH
26721: LD_VAR 0 1
26725: PPUSH
26726: CALL_OW 437
26730: ST_TO_ADDR
// if task then
26731: LD_VAR 0 3
26735: IFFALSE 26763
// if task [ 1 ] [ 1 ] = p then
26737: LD_VAR 0 3
26741: PUSH
26742: LD_INT 1
26744: ARRAY
26745: PUSH
26746: LD_INT 1
26748: ARRAY
26749: PUSH
26750: LD_STRING p
26752: EQUAL
26753: IFFALSE 26763
// result := true ;
26755: LD_ADDR_VAR 0 2
26759: PUSH
26760: LD_INT 1
26762: ST_TO_ADDR
// end ;
26763: LD_VAR 0 2
26767: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26768: LD_INT 0
26770: PPUSH
26771: PPUSH
26772: PPUSH
26773: PPUSH
// if pos < 1 then
26774: LD_VAR 0 2
26778: PUSH
26779: LD_INT 1
26781: LESS
26782: IFFALSE 26786
// exit ;
26784: GO 27089
// if pos = 1 then
26786: LD_VAR 0 2
26790: PUSH
26791: LD_INT 1
26793: EQUAL
26794: IFFALSE 26827
// result := Replace ( arr , pos [ 1 ] , value ) else
26796: LD_ADDR_VAR 0 4
26800: PUSH
26801: LD_VAR 0 1
26805: PPUSH
26806: LD_VAR 0 2
26810: PUSH
26811: LD_INT 1
26813: ARRAY
26814: PPUSH
26815: LD_VAR 0 3
26819: PPUSH
26820: CALL_OW 1
26824: ST_TO_ADDR
26825: GO 27089
// begin tmp := arr ;
26827: LD_ADDR_VAR 0 6
26831: PUSH
26832: LD_VAR 0 1
26836: ST_TO_ADDR
// s_arr := [ tmp ] ;
26837: LD_ADDR_VAR 0 7
26841: PUSH
26842: LD_VAR 0 6
26846: PUSH
26847: EMPTY
26848: LIST
26849: ST_TO_ADDR
// for i = 1 to pos - 1 do
26850: LD_ADDR_VAR 0 5
26854: PUSH
26855: DOUBLE
26856: LD_INT 1
26858: DEC
26859: ST_TO_ADDR
26860: LD_VAR 0 2
26864: PUSH
26865: LD_INT 1
26867: MINUS
26868: PUSH
26869: FOR_TO
26870: IFFALSE 26915
// begin tmp := tmp [ pos [ i ] ] ;
26872: LD_ADDR_VAR 0 6
26876: PUSH
26877: LD_VAR 0 6
26881: PUSH
26882: LD_VAR 0 2
26886: PUSH
26887: LD_VAR 0 5
26891: ARRAY
26892: ARRAY
26893: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26894: LD_ADDR_VAR 0 7
26898: PUSH
26899: LD_VAR 0 7
26903: PUSH
26904: LD_VAR 0 6
26908: PUSH
26909: EMPTY
26910: LIST
26911: ADD
26912: ST_TO_ADDR
// end ;
26913: GO 26869
26915: POP
26916: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26917: LD_ADDR_VAR 0 6
26921: PUSH
26922: LD_VAR 0 6
26926: PPUSH
26927: LD_VAR 0 2
26931: PUSH
26932: LD_VAR 0 2
26936: ARRAY
26937: PPUSH
26938: LD_VAR 0 3
26942: PPUSH
26943: CALL_OW 1
26947: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26948: LD_ADDR_VAR 0 7
26952: PUSH
26953: LD_VAR 0 7
26957: PPUSH
26958: LD_VAR 0 7
26962: PPUSH
26963: LD_VAR 0 6
26967: PPUSH
26968: CALL_OW 1
26972: ST_TO_ADDR
// for i = s_arr downto 2 do
26973: LD_ADDR_VAR 0 5
26977: PUSH
26978: DOUBLE
26979: LD_VAR 0 7
26983: INC
26984: ST_TO_ADDR
26985: LD_INT 2
26987: PUSH
26988: FOR_DOWNTO
26989: IFFALSE 27073
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26991: LD_ADDR_VAR 0 6
26995: PUSH
26996: LD_VAR 0 7
27000: PUSH
27001: LD_VAR 0 5
27005: PUSH
27006: LD_INT 1
27008: MINUS
27009: ARRAY
27010: PPUSH
27011: LD_VAR 0 2
27015: PUSH
27016: LD_VAR 0 5
27020: PUSH
27021: LD_INT 1
27023: MINUS
27024: ARRAY
27025: PPUSH
27026: LD_VAR 0 7
27030: PUSH
27031: LD_VAR 0 5
27035: ARRAY
27036: PPUSH
27037: CALL_OW 1
27041: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27042: LD_ADDR_VAR 0 7
27046: PUSH
27047: LD_VAR 0 7
27051: PPUSH
27052: LD_VAR 0 5
27056: PUSH
27057: LD_INT 1
27059: MINUS
27060: PPUSH
27061: LD_VAR 0 6
27065: PPUSH
27066: CALL_OW 1
27070: ST_TO_ADDR
// end ;
27071: GO 26988
27073: POP
27074: POP
// result := s_arr [ 1 ] ;
27075: LD_ADDR_VAR 0 4
27079: PUSH
27080: LD_VAR 0 7
27084: PUSH
27085: LD_INT 1
27087: ARRAY
27088: ST_TO_ADDR
// end ; end ;
27089: LD_VAR 0 4
27093: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27094: LD_INT 0
27096: PPUSH
27097: PPUSH
// if not list then
27098: LD_VAR 0 1
27102: NOT
27103: IFFALSE 27107
// exit ;
27105: GO 27198
// i := list [ pos1 ] ;
27107: LD_ADDR_VAR 0 5
27111: PUSH
27112: LD_VAR 0 1
27116: PUSH
27117: LD_VAR 0 2
27121: ARRAY
27122: ST_TO_ADDR
// if not i then
27123: LD_VAR 0 5
27127: NOT
27128: IFFALSE 27132
// exit ;
27130: GO 27198
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27132: LD_ADDR_VAR 0 1
27136: PUSH
27137: LD_VAR 0 1
27141: PPUSH
27142: LD_VAR 0 2
27146: PPUSH
27147: LD_VAR 0 1
27151: PUSH
27152: LD_VAR 0 3
27156: ARRAY
27157: PPUSH
27158: CALL_OW 1
27162: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27163: LD_ADDR_VAR 0 1
27167: PUSH
27168: LD_VAR 0 1
27172: PPUSH
27173: LD_VAR 0 3
27177: PPUSH
27178: LD_VAR 0 5
27182: PPUSH
27183: CALL_OW 1
27187: ST_TO_ADDR
// result := list ;
27188: LD_ADDR_VAR 0 4
27192: PUSH
27193: LD_VAR 0 1
27197: ST_TO_ADDR
// end ;
27198: LD_VAR 0 4
27202: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27203: LD_INT 0
27205: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27206: LD_ADDR_VAR 0 5
27210: PUSH
27211: LD_VAR 0 1
27215: PPUSH
27216: CALL_OW 250
27220: PPUSH
27221: LD_VAR 0 1
27225: PPUSH
27226: CALL_OW 251
27230: PPUSH
27231: LD_VAR 0 2
27235: PPUSH
27236: LD_VAR 0 3
27240: PPUSH
27241: LD_VAR 0 4
27245: PPUSH
27246: CALL 27256 0 5
27250: ST_TO_ADDR
// end ;
27251: LD_VAR 0 5
27255: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27256: LD_INT 0
27258: PPUSH
27259: PPUSH
27260: PPUSH
27261: PPUSH
// if not list then
27262: LD_VAR 0 3
27266: NOT
27267: IFFALSE 27271
// exit ;
27269: GO 27659
// result := [ ] ;
27271: LD_ADDR_VAR 0 6
27275: PUSH
27276: EMPTY
27277: ST_TO_ADDR
// for i in list do
27278: LD_ADDR_VAR 0 7
27282: PUSH
27283: LD_VAR 0 3
27287: PUSH
27288: FOR_IN
27289: IFFALSE 27491
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27291: LD_ADDR_VAR 0 9
27295: PUSH
27296: LD_VAR 0 7
27300: PPUSH
27301: LD_VAR 0 1
27305: PPUSH
27306: LD_VAR 0 2
27310: PPUSH
27311: CALL_OW 297
27315: ST_TO_ADDR
// if not result then
27316: LD_VAR 0 6
27320: NOT
27321: IFFALSE 27347
// result := [ [ i , tmp ] ] else
27323: LD_ADDR_VAR 0 6
27327: PUSH
27328: LD_VAR 0 7
27332: PUSH
27333: LD_VAR 0 9
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: EMPTY
27343: LIST
27344: ST_TO_ADDR
27345: GO 27489
// begin if result [ result ] [ 2 ] < tmp then
27347: LD_VAR 0 6
27351: PUSH
27352: LD_VAR 0 6
27356: ARRAY
27357: PUSH
27358: LD_INT 2
27360: ARRAY
27361: PUSH
27362: LD_VAR 0 9
27366: LESS
27367: IFFALSE 27409
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27369: LD_ADDR_VAR 0 6
27373: PUSH
27374: LD_VAR 0 6
27378: PPUSH
27379: LD_VAR 0 6
27383: PUSH
27384: LD_INT 1
27386: PLUS
27387: PPUSH
27388: LD_VAR 0 7
27392: PUSH
27393: LD_VAR 0 9
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PPUSH
27402: CALL_OW 2
27406: ST_TO_ADDR
27407: GO 27489
// for j = 1 to result do
27409: LD_ADDR_VAR 0 8
27413: PUSH
27414: DOUBLE
27415: LD_INT 1
27417: DEC
27418: ST_TO_ADDR
27419: LD_VAR 0 6
27423: PUSH
27424: FOR_TO
27425: IFFALSE 27487
// begin if tmp < result [ j ] [ 2 ] then
27427: LD_VAR 0 9
27431: PUSH
27432: LD_VAR 0 6
27436: PUSH
27437: LD_VAR 0 8
27441: ARRAY
27442: PUSH
27443: LD_INT 2
27445: ARRAY
27446: LESS
27447: IFFALSE 27485
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27449: LD_ADDR_VAR 0 6
27453: PUSH
27454: LD_VAR 0 6
27458: PPUSH
27459: LD_VAR 0 8
27463: PPUSH
27464: LD_VAR 0 7
27468: PUSH
27469: LD_VAR 0 9
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PPUSH
27478: CALL_OW 2
27482: ST_TO_ADDR
// break ;
27483: GO 27487
// end ; end ;
27485: GO 27424
27487: POP
27488: POP
// end ; end ;
27489: GO 27288
27491: POP
27492: POP
// if result and not asc then
27493: LD_VAR 0 6
27497: PUSH
27498: LD_VAR 0 4
27502: NOT
27503: AND
27504: IFFALSE 27579
// begin tmp := result ;
27506: LD_ADDR_VAR 0 9
27510: PUSH
27511: LD_VAR 0 6
27515: ST_TO_ADDR
// for i = tmp downto 1 do
27516: LD_ADDR_VAR 0 7
27520: PUSH
27521: DOUBLE
27522: LD_VAR 0 9
27526: INC
27527: ST_TO_ADDR
27528: LD_INT 1
27530: PUSH
27531: FOR_DOWNTO
27532: IFFALSE 27577
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27534: LD_ADDR_VAR 0 6
27538: PUSH
27539: LD_VAR 0 6
27543: PPUSH
27544: LD_VAR 0 9
27548: PUSH
27549: LD_VAR 0 7
27553: MINUS
27554: PUSH
27555: LD_INT 1
27557: PLUS
27558: PPUSH
27559: LD_VAR 0 9
27563: PUSH
27564: LD_VAR 0 7
27568: ARRAY
27569: PPUSH
27570: CALL_OW 1
27574: ST_TO_ADDR
27575: GO 27531
27577: POP
27578: POP
// end ; tmp := [ ] ;
27579: LD_ADDR_VAR 0 9
27583: PUSH
27584: EMPTY
27585: ST_TO_ADDR
// if mode then
27586: LD_VAR 0 5
27590: IFFALSE 27659
// begin for i = 1 to result do
27592: LD_ADDR_VAR 0 7
27596: PUSH
27597: DOUBLE
27598: LD_INT 1
27600: DEC
27601: ST_TO_ADDR
27602: LD_VAR 0 6
27606: PUSH
27607: FOR_TO
27608: IFFALSE 27647
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27610: LD_ADDR_VAR 0 9
27614: PUSH
27615: LD_VAR 0 9
27619: PPUSH
27620: LD_VAR 0 7
27624: PPUSH
27625: LD_VAR 0 6
27629: PUSH
27630: LD_VAR 0 7
27634: ARRAY
27635: PUSH
27636: LD_INT 1
27638: ARRAY
27639: PPUSH
27640: CALL_OW 1
27644: ST_TO_ADDR
27645: GO 27607
27647: POP
27648: POP
// result := tmp ;
27649: LD_ADDR_VAR 0 6
27653: PUSH
27654: LD_VAR 0 9
27658: ST_TO_ADDR
// end ; end ;
27659: LD_VAR 0 6
27663: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27664: LD_INT 0
27666: PPUSH
27667: PPUSH
27668: PPUSH
27669: PPUSH
27670: PPUSH
27671: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27672: LD_ADDR_VAR 0 5
27676: PUSH
27677: LD_INT 0
27679: PUSH
27680: LD_INT 0
27682: PUSH
27683: LD_INT 0
27685: PUSH
27686: EMPTY
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: ST_TO_ADDR
// if not x or not y then
27694: LD_VAR 0 2
27698: NOT
27699: PUSH
27700: LD_VAR 0 3
27704: NOT
27705: OR
27706: IFFALSE 27710
// exit ;
27708: GO 29362
// if not range then
27710: LD_VAR 0 4
27714: NOT
27715: IFFALSE 27725
// range := 10 ;
27717: LD_ADDR_VAR 0 4
27721: PUSH
27722: LD_INT 10
27724: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27725: LD_ADDR_VAR 0 8
27729: PUSH
27730: LD_INT 81
27732: PUSH
27733: LD_VAR 0 1
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 92
27744: PUSH
27745: LD_VAR 0 2
27749: PUSH
27750: LD_VAR 0 3
27754: PUSH
27755: LD_VAR 0 4
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 3
27768: PUSH
27769: LD_INT 21
27771: PUSH
27772: LD_INT 3
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: LIST
27787: PPUSH
27788: CALL_OW 69
27792: ST_TO_ADDR
// if not tmp then
27793: LD_VAR 0 8
27797: NOT
27798: IFFALSE 27802
// exit ;
27800: GO 29362
// for i in tmp do
27802: LD_ADDR_VAR 0 6
27806: PUSH
27807: LD_VAR 0 8
27811: PUSH
27812: FOR_IN
27813: IFFALSE 29337
// begin points := [ 0 , 0 , 0 ] ;
27815: LD_ADDR_VAR 0 9
27819: PUSH
27820: LD_INT 0
27822: PUSH
27823: LD_INT 0
27825: PUSH
27826: LD_INT 0
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: LIST
27833: ST_TO_ADDR
// bpoints := 1 ;
27834: LD_ADDR_VAR 0 10
27838: PUSH
27839: LD_INT 1
27841: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27842: LD_VAR 0 6
27846: PPUSH
27847: CALL_OW 247
27851: PUSH
27852: LD_INT 1
27854: DOUBLE
27855: EQUAL
27856: IFTRUE 27860
27858: GO 28438
27860: POP
// begin if GetClass ( i ) = 1 then
27861: LD_VAR 0 6
27865: PPUSH
27866: CALL_OW 257
27870: PUSH
27871: LD_INT 1
27873: EQUAL
27874: IFFALSE 27895
// points := [ 10 , 5 , 3 ] ;
27876: LD_ADDR_VAR 0 9
27880: PUSH
27881: LD_INT 10
27883: PUSH
27884: LD_INT 5
27886: PUSH
27887: LD_INT 3
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: LIST
27894: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27895: LD_VAR 0 6
27899: PPUSH
27900: CALL_OW 257
27904: PUSH
27905: LD_INT 2
27907: PUSH
27908: LD_INT 3
27910: PUSH
27911: LD_INT 4
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: LIST
27918: IN
27919: IFFALSE 27940
// points := [ 3 , 2 , 1 ] ;
27921: LD_ADDR_VAR 0 9
27925: PUSH
27926: LD_INT 3
27928: PUSH
27929: LD_INT 2
27931: PUSH
27932: LD_INT 1
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: LIST
27939: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27940: LD_VAR 0 6
27944: PPUSH
27945: CALL_OW 257
27949: PUSH
27950: LD_INT 5
27952: EQUAL
27953: IFFALSE 27974
// points := [ 130 , 5 , 2 ] ;
27955: LD_ADDR_VAR 0 9
27959: PUSH
27960: LD_INT 130
27962: PUSH
27963: LD_INT 5
27965: PUSH
27966: LD_INT 2
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: LIST
27973: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27974: LD_VAR 0 6
27978: PPUSH
27979: CALL_OW 257
27983: PUSH
27984: LD_INT 8
27986: EQUAL
27987: IFFALSE 28008
// points := [ 35 , 35 , 30 ] ;
27989: LD_ADDR_VAR 0 9
27993: PUSH
27994: LD_INT 35
27996: PUSH
27997: LD_INT 35
27999: PUSH
28000: LD_INT 30
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: LIST
28007: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28008: LD_VAR 0 6
28012: PPUSH
28013: CALL_OW 257
28017: PUSH
28018: LD_INT 9
28020: EQUAL
28021: IFFALSE 28042
// points := [ 20 , 55 , 40 ] ;
28023: LD_ADDR_VAR 0 9
28027: PUSH
28028: LD_INT 20
28030: PUSH
28031: LD_INT 55
28033: PUSH
28034: LD_INT 40
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: LIST
28041: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28042: LD_VAR 0 6
28046: PPUSH
28047: CALL_OW 257
28051: PUSH
28052: LD_INT 12
28054: PUSH
28055: LD_INT 16
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: IN
28062: IFFALSE 28083
// points := [ 5 , 3 , 2 ] ;
28064: LD_ADDR_VAR 0 9
28068: PUSH
28069: LD_INT 5
28071: PUSH
28072: LD_INT 3
28074: PUSH
28075: LD_INT 2
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: LIST
28082: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28083: LD_VAR 0 6
28087: PPUSH
28088: CALL_OW 257
28092: PUSH
28093: LD_INT 17
28095: EQUAL
28096: IFFALSE 28117
// points := [ 100 , 50 , 75 ] ;
28098: LD_ADDR_VAR 0 9
28102: PUSH
28103: LD_INT 100
28105: PUSH
28106: LD_INT 50
28108: PUSH
28109: LD_INT 75
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: LIST
28116: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28117: LD_VAR 0 6
28121: PPUSH
28122: CALL_OW 257
28126: PUSH
28127: LD_INT 15
28129: EQUAL
28130: IFFALSE 28151
// points := [ 10 , 5 , 3 ] ;
28132: LD_ADDR_VAR 0 9
28136: PUSH
28137: LD_INT 10
28139: PUSH
28140: LD_INT 5
28142: PUSH
28143: LD_INT 3
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: LIST
28150: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28151: LD_VAR 0 6
28155: PPUSH
28156: CALL_OW 257
28160: PUSH
28161: LD_INT 14
28163: EQUAL
28164: IFFALSE 28185
// points := [ 10 , 0 , 0 ] ;
28166: LD_ADDR_VAR 0 9
28170: PUSH
28171: LD_INT 10
28173: PUSH
28174: LD_INT 0
28176: PUSH
28177: LD_INT 0
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: LIST
28184: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28185: LD_VAR 0 6
28189: PPUSH
28190: CALL_OW 257
28194: PUSH
28195: LD_INT 11
28197: EQUAL
28198: IFFALSE 28219
// points := [ 30 , 10 , 5 ] ;
28200: LD_ADDR_VAR 0 9
28204: PUSH
28205: LD_INT 30
28207: PUSH
28208: LD_INT 10
28210: PUSH
28211: LD_INT 5
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: LIST
28218: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28219: LD_VAR 0 1
28223: PPUSH
28224: LD_INT 5
28226: PPUSH
28227: CALL_OW 321
28231: PUSH
28232: LD_INT 2
28234: EQUAL
28235: IFFALSE 28252
// bpoints := bpoints * 1.8 ;
28237: LD_ADDR_VAR 0 10
28241: PUSH
28242: LD_VAR 0 10
28246: PUSH
28247: LD_REAL  1.80000000000000E+0000
28250: MUL
28251: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28252: LD_VAR 0 6
28256: PPUSH
28257: CALL_OW 257
28261: PUSH
28262: LD_INT 1
28264: PUSH
28265: LD_INT 2
28267: PUSH
28268: LD_INT 3
28270: PUSH
28271: LD_INT 4
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: IN
28280: PUSH
28281: LD_VAR 0 1
28285: PPUSH
28286: LD_INT 51
28288: PPUSH
28289: CALL_OW 321
28293: PUSH
28294: LD_INT 2
28296: EQUAL
28297: AND
28298: IFFALSE 28315
// bpoints := bpoints * 1.2 ;
28300: LD_ADDR_VAR 0 10
28304: PUSH
28305: LD_VAR 0 10
28309: PUSH
28310: LD_REAL  1.20000000000000E+0000
28313: MUL
28314: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28315: LD_VAR 0 6
28319: PPUSH
28320: CALL_OW 257
28324: PUSH
28325: LD_INT 5
28327: PUSH
28328: LD_INT 7
28330: PUSH
28331: LD_INT 9
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: LIST
28338: IN
28339: PUSH
28340: LD_VAR 0 1
28344: PPUSH
28345: LD_INT 52
28347: PPUSH
28348: CALL_OW 321
28352: PUSH
28353: LD_INT 2
28355: EQUAL
28356: AND
28357: IFFALSE 28374
// bpoints := bpoints * 1.5 ;
28359: LD_ADDR_VAR 0 10
28363: PUSH
28364: LD_VAR 0 10
28368: PUSH
28369: LD_REAL  1.50000000000000E+0000
28372: MUL
28373: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28374: LD_VAR 0 1
28378: PPUSH
28379: LD_INT 66
28381: PPUSH
28382: CALL_OW 321
28386: PUSH
28387: LD_INT 2
28389: EQUAL
28390: IFFALSE 28407
// bpoints := bpoints * 1.1 ;
28392: LD_ADDR_VAR 0 10
28396: PUSH
28397: LD_VAR 0 10
28401: PUSH
28402: LD_REAL  1.10000000000000E+0000
28405: MUL
28406: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28407: LD_ADDR_VAR 0 10
28411: PUSH
28412: LD_VAR 0 10
28416: PUSH
28417: LD_VAR 0 6
28421: PPUSH
28422: LD_INT 1
28424: PPUSH
28425: CALL_OW 259
28429: PUSH
28430: LD_REAL  1.15000000000000E+0000
28433: MUL
28434: MUL
28435: ST_TO_ADDR
// end ; unit_vehicle :
28436: GO 29266
28438: LD_INT 2
28440: DOUBLE
28441: EQUAL
28442: IFTRUE 28446
28444: GO 29254
28446: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28447: LD_VAR 0 6
28451: PPUSH
28452: CALL_OW 264
28456: PUSH
28457: LD_INT 2
28459: PUSH
28460: LD_INT 42
28462: PUSH
28463: LD_INT 24
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: LIST
28470: IN
28471: IFFALSE 28492
// points := [ 25 , 5 , 3 ] ;
28473: LD_ADDR_VAR 0 9
28477: PUSH
28478: LD_INT 25
28480: PUSH
28481: LD_INT 5
28483: PUSH
28484: LD_INT 3
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: LIST
28491: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28492: LD_VAR 0 6
28496: PPUSH
28497: CALL_OW 264
28501: PUSH
28502: LD_INT 4
28504: PUSH
28505: LD_INT 43
28507: PUSH
28508: LD_INT 25
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: LIST
28515: IN
28516: IFFALSE 28537
// points := [ 40 , 15 , 5 ] ;
28518: LD_ADDR_VAR 0 9
28522: PUSH
28523: LD_INT 40
28525: PUSH
28526: LD_INT 15
28528: PUSH
28529: LD_INT 5
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: LIST
28536: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28537: LD_VAR 0 6
28541: PPUSH
28542: CALL_OW 264
28546: PUSH
28547: LD_INT 3
28549: PUSH
28550: LD_INT 23
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: IN
28557: IFFALSE 28578
// points := [ 7 , 25 , 8 ] ;
28559: LD_ADDR_VAR 0 9
28563: PUSH
28564: LD_INT 7
28566: PUSH
28567: LD_INT 25
28569: PUSH
28570: LD_INT 8
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: LIST
28577: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28578: LD_VAR 0 6
28582: PPUSH
28583: CALL_OW 264
28587: PUSH
28588: LD_INT 5
28590: PUSH
28591: LD_INT 27
28593: PUSH
28594: LD_INT 44
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: LIST
28601: IN
28602: IFFALSE 28623
// points := [ 14 , 50 , 16 ] ;
28604: LD_ADDR_VAR 0 9
28608: PUSH
28609: LD_INT 14
28611: PUSH
28612: LD_INT 50
28614: PUSH
28615: LD_INT 16
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: LIST
28622: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28623: LD_VAR 0 6
28627: PPUSH
28628: CALL_OW 264
28632: PUSH
28633: LD_INT 6
28635: PUSH
28636: LD_INT 46
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: IN
28643: IFFALSE 28664
// points := [ 32 , 120 , 70 ] ;
28645: LD_ADDR_VAR 0 9
28649: PUSH
28650: LD_INT 32
28652: PUSH
28653: LD_INT 120
28655: PUSH
28656: LD_INT 70
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: LIST
28663: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28664: LD_VAR 0 6
28668: PPUSH
28669: CALL_OW 264
28673: PUSH
28674: LD_INT 7
28676: PUSH
28677: LD_INT 28
28679: PUSH
28680: LD_INT 45
28682: PUSH
28683: LD_EXP 77
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: IN
28694: IFFALSE 28715
// points := [ 35 , 20 , 45 ] ;
28696: LD_ADDR_VAR 0 9
28700: PUSH
28701: LD_INT 35
28703: PUSH
28704: LD_INT 20
28706: PUSH
28707: LD_INT 45
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: LIST
28714: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28715: LD_VAR 0 6
28719: PPUSH
28720: CALL_OW 264
28724: PUSH
28725: LD_INT 47
28727: PUSH
28728: EMPTY
28729: LIST
28730: IN
28731: IFFALSE 28752
// points := [ 67 , 45 , 75 ] ;
28733: LD_ADDR_VAR 0 9
28737: PUSH
28738: LD_INT 67
28740: PUSH
28741: LD_INT 45
28743: PUSH
28744: LD_INT 75
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: LIST
28751: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28752: LD_VAR 0 6
28756: PPUSH
28757: CALL_OW 264
28761: PUSH
28762: LD_INT 26
28764: PUSH
28765: EMPTY
28766: LIST
28767: IN
28768: IFFALSE 28789
// points := [ 120 , 30 , 80 ] ;
28770: LD_ADDR_VAR 0 9
28774: PUSH
28775: LD_INT 120
28777: PUSH
28778: LD_INT 30
28780: PUSH
28781: LD_INT 80
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: LIST
28788: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28789: LD_VAR 0 6
28793: PPUSH
28794: CALL_OW 264
28798: PUSH
28799: LD_INT 22
28801: PUSH
28802: EMPTY
28803: LIST
28804: IN
28805: IFFALSE 28826
// points := [ 40 , 1 , 1 ] ;
28807: LD_ADDR_VAR 0 9
28811: PUSH
28812: LD_INT 40
28814: PUSH
28815: LD_INT 1
28817: PUSH
28818: LD_INT 1
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: LIST
28825: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28826: LD_VAR 0 6
28830: PPUSH
28831: CALL_OW 264
28835: PUSH
28836: LD_INT 29
28838: PUSH
28839: EMPTY
28840: LIST
28841: IN
28842: IFFALSE 28863
// points := [ 70 , 200 , 400 ] ;
28844: LD_ADDR_VAR 0 9
28848: PUSH
28849: LD_INT 70
28851: PUSH
28852: LD_INT 200
28854: PUSH
28855: LD_INT 400
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: LIST
28862: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28863: LD_VAR 0 6
28867: PPUSH
28868: CALL_OW 264
28872: PUSH
28873: LD_INT 14
28875: PUSH
28876: LD_INT 53
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: IN
28883: IFFALSE 28904
// points := [ 40 , 10 , 20 ] ;
28885: LD_ADDR_VAR 0 9
28889: PUSH
28890: LD_INT 40
28892: PUSH
28893: LD_INT 10
28895: PUSH
28896: LD_INT 20
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: LIST
28903: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28904: LD_VAR 0 6
28908: PPUSH
28909: CALL_OW 264
28913: PUSH
28914: LD_INT 9
28916: PUSH
28917: EMPTY
28918: LIST
28919: IN
28920: IFFALSE 28941
// points := [ 5 , 70 , 20 ] ;
28922: LD_ADDR_VAR 0 9
28926: PUSH
28927: LD_INT 5
28929: PUSH
28930: LD_INT 70
28932: PUSH
28933: LD_INT 20
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: LIST
28940: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28941: LD_VAR 0 6
28945: PPUSH
28946: CALL_OW 264
28950: PUSH
28951: LD_INT 10
28953: PUSH
28954: EMPTY
28955: LIST
28956: IN
28957: IFFALSE 28978
// points := [ 35 , 110 , 70 ] ;
28959: LD_ADDR_VAR 0 9
28963: PUSH
28964: LD_INT 35
28966: PUSH
28967: LD_INT 110
28969: PUSH
28970: LD_INT 70
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: LIST
28977: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28978: LD_VAR 0 6
28982: PPUSH
28983: CALL_OW 265
28987: PUSH
28988: LD_INT 25
28990: EQUAL
28991: IFFALSE 29012
// points := [ 80 , 65 , 100 ] ;
28993: LD_ADDR_VAR 0 9
28997: PUSH
28998: LD_INT 80
29000: PUSH
29001: LD_INT 65
29003: PUSH
29004: LD_INT 100
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: LIST
29011: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29012: LD_VAR 0 6
29016: PPUSH
29017: CALL_OW 263
29021: PUSH
29022: LD_INT 1
29024: EQUAL
29025: IFFALSE 29060
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29027: LD_ADDR_VAR 0 10
29031: PUSH
29032: LD_VAR 0 10
29036: PUSH
29037: LD_VAR 0 6
29041: PPUSH
29042: CALL_OW 311
29046: PPUSH
29047: LD_INT 3
29049: PPUSH
29050: CALL_OW 259
29054: PUSH
29055: LD_INT 4
29057: MUL
29058: MUL
29059: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29060: LD_VAR 0 6
29064: PPUSH
29065: CALL_OW 263
29069: PUSH
29070: LD_INT 2
29072: EQUAL
29073: IFFALSE 29124
// begin j := IsControledBy ( i ) ;
29075: LD_ADDR_VAR 0 7
29079: PUSH
29080: LD_VAR 0 6
29084: PPUSH
29085: CALL_OW 312
29089: ST_TO_ADDR
// if j then
29090: LD_VAR 0 7
29094: IFFALSE 29124
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29096: LD_ADDR_VAR 0 10
29100: PUSH
29101: LD_VAR 0 10
29105: PUSH
29106: LD_VAR 0 7
29110: PPUSH
29111: LD_INT 3
29113: PPUSH
29114: CALL_OW 259
29118: PUSH
29119: LD_INT 3
29121: MUL
29122: MUL
29123: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29124: LD_VAR 0 6
29128: PPUSH
29129: CALL_OW 264
29133: PUSH
29134: LD_INT 5
29136: PUSH
29137: LD_INT 6
29139: PUSH
29140: LD_INT 46
29142: PUSH
29143: LD_INT 44
29145: PUSH
29146: LD_INT 47
29148: PUSH
29149: LD_INT 45
29151: PUSH
29152: LD_INT 28
29154: PUSH
29155: LD_INT 7
29157: PUSH
29158: LD_INT 27
29160: PUSH
29161: LD_INT 29
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: IN
29176: PUSH
29177: LD_VAR 0 1
29181: PPUSH
29182: LD_INT 52
29184: PPUSH
29185: CALL_OW 321
29189: PUSH
29190: LD_INT 2
29192: EQUAL
29193: AND
29194: IFFALSE 29211
// bpoints := bpoints * 1.2 ;
29196: LD_ADDR_VAR 0 10
29200: PUSH
29201: LD_VAR 0 10
29205: PUSH
29206: LD_REAL  1.20000000000000E+0000
29209: MUL
29210: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29211: LD_VAR 0 6
29215: PPUSH
29216: CALL_OW 264
29220: PUSH
29221: LD_INT 6
29223: PUSH
29224: LD_INT 46
29226: PUSH
29227: LD_INT 47
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: LIST
29234: IN
29235: IFFALSE 29252
// bpoints := bpoints * 1.2 ;
29237: LD_ADDR_VAR 0 10
29241: PUSH
29242: LD_VAR 0 10
29246: PUSH
29247: LD_REAL  1.20000000000000E+0000
29250: MUL
29251: ST_TO_ADDR
// end ; unit_building :
29252: GO 29266
29254: LD_INT 3
29256: DOUBLE
29257: EQUAL
29258: IFTRUE 29262
29260: GO 29265
29262: POP
// ; end ;
29263: GO 29266
29265: POP
// for j = 1 to 3 do
29266: LD_ADDR_VAR 0 7
29270: PUSH
29271: DOUBLE
29272: LD_INT 1
29274: DEC
29275: ST_TO_ADDR
29276: LD_INT 3
29278: PUSH
29279: FOR_TO
29280: IFFALSE 29333
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29282: LD_ADDR_VAR 0 5
29286: PUSH
29287: LD_VAR 0 5
29291: PPUSH
29292: LD_VAR 0 7
29296: PPUSH
29297: LD_VAR 0 5
29301: PUSH
29302: LD_VAR 0 7
29306: ARRAY
29307: PUSH
29308: LD_VAR 0 9
29312: PUSH
29313: LD_VAR 0 7
29317: ARRAY
29318: PUSH
29319: LD_VAR 0 10
29323: MUL
29324: PLUS
29325: PPUSH
29326: CALL_OW 1
29330: ST_TO_ADDR
29331: GO 29279
29333: POP
29334: POP
// end ;
29335: GO 27812
29337: POP
29338: POP
// result := Replace ( result , 4 , tmp ) ;
29339: LD_ADDR_VAR 0 5
29343: PUSH
29344: LD_VAR 0 5
29348: PPUSH
29349: LD_INT 4
29351: PPUSH
29352: LD_VAR 0 8
29356: PPUSH
29357: CALL_OW 1
29361: ST_TO_ADDR
// end ;
29362: LD_VAR 0 5
29366: RET
// export function DangerAtRange ( unit , range ) ; begin
29367: LD_INT 0
29369: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29370: LD_ADDR_VAR 0 3
29374: PUSH
29375: LD_VAR 0 1
29379: PPUSH
29380: CALL_OW 255
29384: PPUSH
29385: LD_VAR 0 1
29389: PPUSH
29390: CALL_OW 250
29394: PPUSH
29395: LD_VAR 0 1
29399: PPUSH
29400: CALL_OW 251
29404: PPUSH
29405: LD_VAR 0 2
29409: PPUSH
29410: CALL 27664 0 4
29414: ST_TO_ADDR
// end ;
29415: LD_VAR 0 3
29419: RET
// export function DangerInArea ( side , area ) ; begin
29420: LD_INT 0
29422: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29423: LD_ADDR_VAR 0 3
29427: PUSH
29428: LD_VAR 0 2
29432: PPUSH
29433: LD_INT 81
29435: PUSH
29436: LD_VAR 0 1
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PPUSH
29445: CALL_OW 70
29449: ST_TO_ADDR
// end ;
29450: LD_VAR 0 3
29454: RET
// export function IsExtension ( b ) ; begin
29455: LD_INT 0
29457: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29458: LD_ADDR_VAR 0 2
29462: PUSH
29463: LD_VAR 0 1
29467: PUSH
29468: LD_INT 23
29470: PUSH
29471: LD_INT 20
29473: PUSH
29474: LD_INT 22
29476: PUSH
29477: LD_INT 17
29479: PUSH
29480: LD_INT 24
29482: PUSH
29483: LD_INT 21
29485: PUSH
29486: LD_INT 19
29488: PUSH
29489: LD_INT 16
29491: PUSH
29492: LD_INT 25
29494: PUSH
29495: LD_INT 18
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: IN
29510: ST_TO_ADDR
// end ;
29511: LD_VAR 0 2
29515: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29516: LD_INT 0
29518: PPUSH
29519: PPUSH
29520: PPUSH
// result := [ ] ;
29521: LD_ADDR_VAR 0 4
29525: PUSH
29526: EMPTY
29527: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29528: LD_ADDR_VAR 0 5
29532: PUSH
29533: LD_VAR 0 2
29537: PPUSH
29538: LD_INT 21
29540: PUSH
29541: LD_INT 3
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PPUSH
29548: CALL_OW 70
29552: ST_TO_ADDR
// if not tmp then
29553: LD_VAR 0 5
29557: NOT
29558: IFFALSE 29562
// exit ;
29560: GO 29626
// if checkLink then
29562: LD_VAR 0 3
29566: IFFALSE 29616
// begin for i in tmp do
29568: LD_ADDR_VAR 0 6
29572: PUSH
29573: LD_VAR 0 5
29577: PUSH
29578: FOR_IN
29579: IFFALSE 29614
// if GetBase ( i ) <> base then
29581: LD_VAR 0 6
29585: PPUSH
29586: CALL_OW 274
29590: PUSH
29591: LD_VAR 0 1
29595: NONEQUAL
29596: IFFALSE 29612
// ComLinkToBase ( base , i ) ;
29598: LD_VAR 0 1
29602: PPUSH
29603: LD_VAR 0 6
29607: PPUSH
29608: CALL_OW 169
29612: GO 29578
29614: POP
29615: POP
// end ; result := tmp ;
29616: LD_ADDR_VAR 0 4
29620: PUSH
29621: LD_VAR 0 5
29625: ST_TO_ADDR
// end ;
29626: LD_VAR 0 4
29630: RET
// export function ComComplete ( units , b ) ; var i ; begin
29631: LD_INT 0
29633: PPUSH
29634: PPUSH
// if not units then
29635: LD_VAR 0 1
29639: NOT
29640: IFFALSE 29644
// exit ;
29642: GO 29734
// for i in units do
29644: LD_ADDR_VAR 0 4
29648: PUSH
29649: LD_VAR 0 1
29653: PUSH
29654: FOR_IN
29655: IFFALSE 29732
// if BuildingStatus ( b ) = bs_build then
29657: LD_VAR 0 2
29661: PPUSH
29662: CALL_OW 461
29666: PUSH
29667: LD_INT 1
29669: EQUAL
29670: IFFALSE 29730
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29672: LD_VAR 0 4
29676: PPUSH
29677: LD_STRING h
29679: PUSH
29680: LD_VAR 0 2
29684: PPUSH
29685: CALL_OW 250
29689: PUSH
29690: LD_VAR 0 2
29694: PPUSH
29695: CALL_OW 251
29699: PUSH
29700: LD_VAR 0 2
29704: PUSH
29705: LD_INT 0
29707: PUSH
29708: LD_INT 0
29710: PUSH
29711: LD_INT 0
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: PUSH
29723: EMPTY
29724: LIST
29725: PPUSH
29726: CALL_OW 446
29730: GO 29654
29732: POP
29733: POP
// end ;
29734: LD_VAR 0 3
29738: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29739: LD_INT 0
29741: PPUSH
29742: PPUSH
29743: PPUSH
29744: PPUSH
29745: PPUSH
29746: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29747: LD_VAR 0 1
29751: NOT
29752: PUSH
29753: LD_VAR 0 1
29757: PPUSH
29758: CALL_OW 263
29762: PUSH
29763: LD_INT 2
29765: NONEQUAL
29766: OR
29767: IFFALSE 29771
// exit ;
29769: GO 30087
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29771: LD_ADDR_VAR 0 6
29775: PUSH
29776: LD_INT 22
29778: PUSH
29779: LD_VAR 0 1
29783: PPUSH
29784: CALL_OW 255
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 2
29795: PUSH
29796: LD_INT 30
29798: PUSH
29799: LD_INT 36
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 34
29808: PUSH
29809: LD_INT 31
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: LIST
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PPUSH
29825: CALL_OW 69
29829: ST_TO_ADDR
// if not tmp then
29830: LD_VAR 0 6
29834: NOT
29835: IFFALSE 29839
// exit ;
29837: GO 30087
// result := [ ] ;
29839: LD_ADDR_VAR 0 2
29843: PUSH
29844: EMPTY
29845: ST_TO_ADDR
// for i in tmp do
29846: LD_ADDR_VAR 0 3
29850: PUSH
29851: LD_VAR 0 6
29855: PUSH
29856: FOR_IN
29857: IFFALSE 29928
// begin t := UnitsInside ( i ) ;
29859: LD_ADDR_VAR 0 4
29863: PUSH
29864: LD_VAR 0 3
29868: PPUSH
29869: CALL_OW 313
29873: ST_TO_ADDR
// if t then
29874: LD_VAR 0 4
29878: IFFALSE 29926
// for j in t do
29880: LD_ADDR_VAR 0 7
29884: PUSH
29885: LD_VAR 0 4
29889: PUSH
29890: FOR_IN
29891: IFFALSE 29924
// result := Replace ( result , result + 1 , j ) ;
29893: LD_ADDR_VAR 0 2
29897: PUSH
29898: LD_VAR 0 2
29902: PPUSH
29903: LD_VAR 0 2
29907: PUSH
29908: LD_INT 1
29910: PLUS
29911: PPUSH
29912: LD_VAR 0 7
29916: PPUSH
29917: CALL_OW 1
29921: ST_TO_ADDR
29922: GO 29890
29924: POP
29925: POP
// end ;
29926: GO 29856
29928: POP
29929: POP
// if not result then
29930: LD_VAR 0 2
29934: NOT
29935: IFFALSE 29939
// exit ;
29937: GO 30087
// mech := result [ 1 ] ;
29939: LD_ADDR_VAR 0 5
29943: PUSH
29944: LD_VAR 0 2
29948: PUSH
29949: LD_INT 1
29951: ARRAY
29952: ST_TO_ADDR
// if result > 1 then
29953: LD_VAR 0 2
29957: PUSH
29958: LD_INT 1
29960: GREATER
29961: IFFALSE 30073
// begin for i = 2 to result do
29963: LD_ADDR_VAR 0 3
29967: PUSH
29968: DOUBLE
29969: LD_INT 2
29971: DEC
29972: ST_TO_ADDR
29973: LD_VAR 0 2
29977: PUSH
29978: FOR_TO
29979: IFFALSE 30071
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29981: LD_ADDR_VAR 0 4
29985: PUSH
29986: LD_VAR 0 2
29990: PUSH
29991: LD_VAR 0 3
29995: ARRAY
29996: PPUSH
29997: LD_INT 3
29999: PPUSH
30000: CALL_OW 259
30004: PUSH
30005: LD_VAR 0 2
30009: PUSH
30010: LD_VAR 0 3
30014: ARRAY
30015: PPUSH
30016: CALL_OW 432
30020: MINUS
30021: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30022: LD_VAR 0 4
30026: PUSH
30027: LD_VAR 0 5
30031: PPUSH
30032: LD_INT 3
30034: PPUSH
30035: CALL_OW 259
30039: PUSH
30040: LD_VAR 0 5
30044: PPUSH
30045: CALL_OW 432
30049: MINUS
30050: GREATEREQUAL
30051: IFFALSE 30069
// mech := result [ i ] ;
30053: LD_ADDR_VAR 0 5
30057: PUSH
30058: LD_VAR 0 2
30062: PUSH
30063: LD_VAR 0 3
30067: ARRAY
30068: ST_TO_ADDR
// end ;
30069: GO 29978
30071: POP
30072: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30073: LD_VAR 0 1
30077: PPUSH
30078: LD_VAR 0 5
30082: PPUSH
30083: CALL_OW 135
// end ;
30087: LD_VAR 0 2
30091: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30092: LD_INT 0
30094: PPUSH
30095: PPUSH
30096: PPUSH
30097: PPUSH
30098: PPUSH
30099: PPUSH
30100: PPUSH
30101: PPUSH
30102: PPUSH
30103: PPUSH
30104: PPUSH
30105: PPUSH
30106: PPUSH
// result := [ ] ;
30107: LD_ADDR_VAR 0 7
30111: PUSH
30112: EMPTY
30113: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30114: LD_VAR 0 1
30118: PPUSH
30119: CALL_OW 266
30123: PUSH
30124: LD_INT 0
30126: PUSH
30127: LD_INT 1
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: IN
30134: NOT
30135: IFFALSE 30139
// exit ;
30137: GO 31773
// if name then
30139: LD_VAR 0 3
30143: IFFALSE 30159
// SetBName ( base_dep , name ) ;
30145: LD_VAR 0 1
30149: PPUSH
30150: LD_VAR 0 3
30154: PPUSH
30155: CALL_OW 500
// base := GetBase ( base_dep ) ;
30159: LD_ADDR_VAR 0 15
30163: PUSH
30164: LD_VAR 0 1
30168: PPUSH
30169: CALL_OW 274
30173: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30174: LD_ADDR_VAR 0 16
30178: PUSH
30179: LD_VAR 0 1
30183: PPUSH
30184: CALL_OW 255
30188: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30189: LD_ADDR_VAR 0 17
30193: PUSH
30194: LD_VAR 0 1
30198: PPUSH
30199: CALL_OW 248
30203: ST_TO_ADDR
// if sources then
30204: LD_VAR 0 5
30208: IFFALSE 30255
// for i = 1 to 3 do
30210: LD_ADDR_VAR 0 8
30214: PUSH
30215: DOUBLE
30216: LD_INT 1
30218: DEC
30219: ST_TO_ADDR
30220: LD_INT 3
30222: PUSH
30223: FOR_TO
30224: IFFALSE 30253
// AddResourceType ( base , i , sources [ i ] ) ;
30226: LD_VAR 0 15
30230: PPUSH
30231: LD_VAR 0 8
30235: PPUSH
30236: LD_VAR 0 5
30240: PUSH
30241: LD_VAR 0 8
30245: ARRAY
30246: PPUSH
30247: CALL_OW 276
30251: GO 30223
30253: POP
30254: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30255: LD_ADDR_VAR 0 18
30259: PUSH
30260: LD_VAR 0 15
30264: PPUSH
30265: LD_VAR 0 2
30269: PPUSH
30270: LD_INT 1
30272: PPUSH
30273: CALL 29516 0 3
30277: ST_TO_ADDR
// InitHc ;
30278: CALL_OW 19
// InitUc ;
30282: CALL_OW 18
// uc_side := side ;
30286: LD_ADDR_OWVAR 20
30290: PUSH
30291: LD_VAR 0 16
30295: ST_TO_ADDR
// uc_nation := nation ;
30296: LD_ADDR_OWVAR 21
30300: PUSH
30301: LD_VAR 0 17
30305: ST_TO_ADDR
// if buildings then
30306: LD_VAR 0 18
30310: IFFALSE 31632
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30312: LD_ADDR_VAR 0 19
30316: PUSH
30317: LD_VAR 0 18
30321: PPUSH
30322: LD_INT 2
30324: PUSH
30325: LD_INT 30
30327: PUSH
30328: LD_INT 29
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 30
30337: PUSH
30338: LD_INT 30
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: LIST
30349: PPUSH
30350: CALL_OW 72
30354: ST_TO_ADDR
// if tmp then
30355: LD_VAR 0 19
30359: IFFALSE 30407
// for i in tmp do
30361: LD_ADDR_VAR 0 8
30365: PUSH
30366: LD_VAR 0 19
30370: PUSH
30371: FOR_IN
30372: IFFALSE 30405
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30374: LD_VAR 0 8
30378: PPUSH
30379: CALL_OW 250
30383: PPUSH
30384: LD_VAR 0 8
30388: PPUSH
30389: CALL_OW 251
30393: PPUSH
30394: LD_VAR 0 16
30398: PPUSH
30399: CALL_OW 441
30403: GO 30371
30405: POP
30406: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30407: LD_VAR 0 18
30411: PPUSH
30412: LD_INT 2
30414: PUSH
30415: LD_INT 30
30417: PUSH
30418: LD_INT 32
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 30
30427: PUSH
30428: LD_INT 33
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: LIST
30439: PPUSH
30440: CALL_OW 72
30444: IFFALSE 30532
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30446: LD_ADDR_VAR 0 8
30450: PUSH
30451: LD_VAR 0 18
30455: PPUSH
30456: LD_INT 2
30458: PUSH
30459: LD_INT 30
30461: PUSH
30462: LD_INT 32
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 30
30471: PUSH
30472: LD_INT 33
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: LIST
30483: PPUSH
30484: CALL_OW 72
30488: PUSH
30489: FOR_IN
30490: IFFALSE 30530
// begin if not GetBWeapon ( i ) then
30492: LD_VAR 0 8
30496: PPUSH
30497: CALL_OW 269
30501: NOT
30502: IFFALSE 30528
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30504: LD_VAR 0 8
30508: PPUSH
30509: LD_VAR 0 8
30513: PPUSH
30514: LD_VAR 0 2
30518: PPUSH
30519: CALL 31778 0 2
30523: PPUSH
30524: CALL_OW 431
// end ;
30528: GO 30489
30530: POP
30531: POP
// end ; for i = 1 to personel do
30532: LD_ADDR_VAR 0 8
30536: PUSH
30537: DOUBLE
30538: LD_INT 1
30540: DEC
30541: ST_TO_ADDR
30542: LD_VAR 0 6
30546: PUSH
30547: FOR_TO
30548: IFFALSE 31612
// begin if i > 4 then
30550: LD_VAR 0 8
30554: PUSH
30555: LD_INT 4
30557: GREATER
30558: IFFALSE 30562
// break ;
30560: GO 31612
// case i of 1 :
30562: LD_VAR 0 8
30566: PUSH
30567: LD_INT 1
30569: DOUBLE
30570: EQUAL
30571: IFTRUE 30575
30573: GO 30655
30575: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30576: LD_ADDR_VAR 0 12
30580: PUSH
30581: LD_VAR 0 18
30585: PPUSH
30586: LD_INT 22
30588: PUSH
30589: LD_VAR 0 16
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: LD_INT 58
30600: PUSH
30601: EMPTY
30602: LIST
30603: PUSH
30604: LD_INT 2
30606: PUSH
30607: LD_INT 30
30609: PUSH
30610: LD_INT 32
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 30
30619: PUSH
30620: LD_INT 4
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 30
30629: PUSH
30630: LD_INT 5
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: LIST
30647: PPUSH
30648: CALL_OW 72
30652: ST_TO_ADDR
30653: GO 30877
30655: LD_INT 2
30657: DOUBLE
30658: EQUAL
30659: IFTRUE 30663
30661: GO 30725
30663: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30664: LD_ADDR_VAR 0 12
30668: PUSH
30669: LD_VAR 0 18
30673: PPUSH
30674: LD_INT 22
30676: PUSH
30677: LD_VAR 0 16
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 2
30688: PUSH
30689: LD_INT 30
30691: PUSH
30692: LD_INT 0
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 30
30701: PUSH
30702: LD_INT 1
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: LIST
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PPUSH
30718: CALL_OW 72
30722: ST_TO_ADDR
30723: GO 30877
30725: LD_INT 3
30727: DOUBLE
30728: EQUAL
30729: IFTRUE 30733
30731: GO 30795
30733: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30734: LD_ADDR_VAR 0 12
30738: PUSH
30739: LD_VAR 0 18
30743: PPUSH
30744: LD_INT 22
30746: PUSH
30747: LD_VAR 0 16
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 2
30758: PUSH
30759: LD_INT 30
30761: PUSH
30762: LD_INT 2
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 30
30771: PUSH
30772: LD_INT 3
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: LIST
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PPUSH
30788: CALL_OW 72
30792: ST_TO_ADDR
30793: GO 30877
30795: LD_INT 4
30797: DOUBLE
30798: EQUAL
30799: IFTRUE 30803
30801: GO 30876
30803: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30804: LD_ADDR_VAR 0 12
30808: PUSH
30809: LD_VAR 0 18
30813: PPUSH
30814: LD_INT 22
30816: PUSH
30817: LD_VAR 0 16
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 2
30828: PUSH
30829: LD_INT 30
30831: PUSH
30832: LD_INT 6
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 30
30841: PUSH
30842: LD_INT 7
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: LD_INT 30
30851: PUSH
30852: LD_INT 8
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PPUSH
30869: CALL_OW 72
30873: ST_TO_ADDR
30874: GO 30877
30876: POP
// if i = 1 then
30877: LD_VAR 0 8
30881: PUSH
30882: LD_INT 1
30884: EQUAL
30885: IFFALSE 30996
// begin tmp := [ ] ;
30887: LD_ADDR_VAR 0 19
30891: PUSH
30892: EMPTY
30893: ST_TO_ADDR
// for j in f do
30894: LD_ADDR_VAR 0 9
30898: PUSH
30899: LD_VAR 0 12
30903: PUSH
30904: FOR_IN
30905: IFFALSE 30978
// if GetBType ( j ) = b_bunker then
30907: LD_VAR 0 9
30911: PPUSH
30912: CALL_OW 266
30916: PUSH
30917: LD_INT 32
30919: EQUAL
30920: IFFALSE 30947
// tmp := Insert ( tmp , 1 , j ) else
30922: LD_ADDR_VAR 0 19
30926: PUSH
30927: LD_VAR 0 19
30931: PPUSH
30932: LD_INT 1
30934: PPUSH
30935: LD_VAR 0 9
30939: PPUSH
30940: CALL_OW 2
30944: ST_TO_ADDR
30945: GO 30976
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30947: LD_ADDR_VAR 0 19
30951: PUSH
30952: LD_VAR 0 19
30956: PPUSH
30957: LD_VAR 0 19
30961: PUSH
30962: LD_INT 1
30964: PLUS
30965: PPUSH
30966: LD_VAR 0 9
30970: PPUSH
30971: CALL_OW 2
30975: ST_TO_ADDR
30976: GO 30904
30978: POP
30979: POP
// if tmp then
30980: LD_VAR 0 19
30984: IFFALSE 30996
// f := tmp ;
30986: LD_ADDR_VAR 0 12
30990: PUSH
30991: LD_VAR 0 19
30995: ST_TO_ADDR
// end ; x := personel [ i ] ;
30996: LD_ADDR_VAR 0 13
31000: PUSH
31001: LD_VAR 0 6
31005: PUSH
31006: LD_VAR 0 8
31010: ARRAY
31011: ST_TO_ADDR
// if x = - 1 then
31012: LD_VAR 0 13
31016: PUSH
31017: LD_INT 1
31019: NEG
31020: EQUAL
31021: IFFALSE 31230
// begin for j in f do
31023: LD_ADDR_VAR 0 9
31027: PUSH
31028: LD_VAR 0 12
31032: PUSH
31033: FOR_IN
31034: IFFALSE 31226
// repeat InitHc ;
31036: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31040: LD_VAR 0 9
31044: PPUSH
31045: CALL_OW 266
31049: PUSH
31050: LD_INT 5
31052: EQUAL
31053: IFFALSE 31123
// begin if UnitsInside ( j ) < 3 then
31055: LD_VAR 0 9
31059: PPUSH
31060: CALL_OW 313
31064: PUSH
31065: LD_INT 3
31067: LESS
31068: IFFALSE 31104
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31070: LD_INT 0
31072: PPUSH
31073: LD_INT 5
31075: PUSH
31076: LD_INT 8
31078: PUSH
31079: LD_INT 9
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: LIST
31086: PUSH
31087: LD_VAR 0 17
31091: ARRAY
31092: PPUSH
31093: LD_VAR 0 4
31097: PPUSH
31098: CALL_OW 380
31102: GO 31121
// PrepareHuman ( false , i , skill ) ;
31104: LD_INT 0
31106: PPUSH
31107: LD_VAR 0 8
31111: PPUSH
31112: LD_VAR 0 4
31116: PPUSH
31117: CALL_OW 380
// end else
31121: GO 31140
// PrepareHuman ( false , i , skill ) ;
31123: LD_INT 0
31125: PPUSH
31126: LD_VAR 0 8
31130: PPUSH
31131: LD_VAR 0 4
31135: PPUSH
31136: CALL_OW 380
// un := CreateHuman ;
31140: LD_ADDR_VAR 0 14
31144: PUSH
31145: CALL_OW 44
31149: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31150: LD_ADDR_VAR 0 7
31154: PUSH
31155: LD_VAR 0 7
31159: PPUSH
31160: LD_INT 1
31162: PPUSH
31163: LD_VAR 0 14
31167: PPUSH
31168: CALL_OW 2
31172: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31173: LD_VAR 0 14
31177: PPUSH
31178: LD_VAR 0 9
31182: PPUSH
31183: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31187: LD_VAR 0 9
31191: PPUSH
31192: CALL_OW 313
31196: PUSH
31197: LD_INT 6
31199: EQUAL
31200: PUSH
31201: LD_VAR 0 9
31205: PPUSH
31206: CALL_OW 266
31210: PUSH
31211: LD_INT 32
31213: PUSH
31214: LD_INT 31
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: IN
31221: OR
31222: IFFALSE 31036
31224: GO 31033
31226: POP
31227: POP
// end else
31228: GO 31610
// for j = 1 to x do
31230: LD_ADDR_VAR 0 9
31234: PUSH
31235: DOUBLE
31236: LD_INT 1
31238: DEC
31239: ST_TO_ADDR
31240: LD_VAR 0 13
31244: PUSH
31245: FOR_TO
31246: IFFALSE 31608
// begin InitHc ;
31248: CALL_OW 19
// if not f then
31252: LD_VAR 0 12
31256: NOT
31257: IFFALSE 31346
// begin PrepareHuman ( false , i , skill ) ;
31259: LD_INT 0
31261: PPUSH
31262: LD_VAR 0 8
31266: PPUSH
31267: LD_VAR 0 4
31271: PPUSH
31272: CALL_OW 380
// un := CreateHuman ;
31276: LD_ADDR_VAR 0 14
31280: PUSH
31281: CALL_OW 44
31285: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31286: LD_ADDR_VAR 0 7
31290: PUSH
31291: LD_VAR 0 7
31295: PPUSH
31296: LD_INT 1
31298: PPUSH
31299: LD_VAR 0 14
31303: PPUSH
31304: CALL_OW 2
31308: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31309: LD_VAR 0 14
31313: PPUSH
31314: LD_VAR 0 1
31318: PPUSH
31319: CALL_OW 250
31323: PPUSH
31324: LD_VAR 0 1
31328: PPUSH
31329: CALL_OW 251
31333: PPUSH
31334: LD_INT 10
31336: PPUSH
31337: LD_INT 0
31339: PPUSH
31340: CALL_OW 50
// continue ;
31344: GO 31245
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31346: LD_VAR 0 12
31350: PUSH
31351: LD_INT 1
31353: ARRAY
31354: PPUSH
31355: CALL_OW 313
31359: PUSH
31360: LD_VAR 0 12
31364: PUSH
31365: LD_INT 1
31367: ARRAY
31368: PPUSH
31369: CALL_OW 266
31373: PUSH
31374: LD_INT 32
31376: PUSH
31377: LD_INT 31
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: IN
31384: AND
31385: PUSH
31386: LD_VAR 0 12
31390: PUSH
31391: LD_INT 1
31393: ARRAY
31394: PPUSH
31395: CALL_OW 313
31399: PUSH
31400: LD_INT 6
31402: EQUAL
31403: OR
31404: IFFALSE 31424
// f := Delete ( f , 1 ) ;
31406: LD_ADDR_VAR 0 12
31410: PUSH
31411: LD_VAR 0 12
31415: PPUSH
31416: LD_INT 1
31418: PPUSH
31419: CALL_OW 3
31423: ST_TO_ADDR
// if not f then
31424: LD_VAR 0 12
31428: NOT
31429: IFFALSE 31447
// begin x := x + 2 ;
31431: LD_ADDR_VAR 0 13
31435: PUSH
31436: LD_VAR 0 13
31440: PUSH
31441: LD_INT 2
31443: PLUS
31444: ST_TO_ADDR
// continue ;
31445: GO 31245
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31447: LD_VAR 0 12
31451: PUSH
31452: LD_INT 1
31454: ARRAY
31455: PPUSH
31456: CALL_OW 266
31460: PUSH
31461: LD_INT 5
31463: EQUAL
31464: IFFALSE 31538
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31466: LD_VAR 0 12
31470: PUSH
31471: LD_INT 1
31473: ARRAY
31474: PPUSH
31475: CALL_OW 313
31479: PUSH
31480: LD_INT 3
31482: LESS
31483: IFFALSE 31519
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31485: LD_INT 0
31487: PPUSH
31488: LD_INT 5
31490: PUSH
31491: LD_INT 8
31493: PUSH
31494: LD_INT 9
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: LIST
31501: PUSH
31502: LD_VAR 0 17
31506: ARRAY
31507: PPUSH
31508: LD_VAR 0 4
31512: PPUSH
31513: CALL_OW 380
31517: GO 31536
// PrepareHuman ( false , i , skill ) ;
31519: LD_INT 0
31521: PPUSH
31522: LD_VAR 0 8
31526: PPUSH
31527: LD_VAR 0 4
31531: PPUSH
31532: CALL_OW 380
// end else
31536: GO 31555
// PrepareHuman ( false , i , skill ) ;
31538: LD_INT 0
31540: PPUSH
31541: LD_VAR 0 8
31545: PPUSH
31546: LD_VAR 0 4
31550: PPUSH
31551: CALL_OW 380
// un := CreateHuman ;
31555: LD_ADDR_VAR 0 14
31559: PUSH
31560: CALL_OW 44
31564: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31565: LD_ADDR_VAR 0 7
31569: PUSH
31570: LD_VAR 0 7
31574: PPUSH
31575: LD_INT 1
31577: PPUSH
31578: LD_VAR 0 14
31582: PPUSH
31583: CALL_OW 2
31587: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31588: LD_VAR 0 14
31592: PPUSH
31593: LD_VAR 0 12
31597: PUSH
31598: LD_INT 1
31600: ARRAY
31601: PPUSH
31602: CALL_OW 52
// end ;
31606: GO 31245
31608: POP
31609: POP
// end ;
31610: GO 30547
31612: POP
31613: POP
// result := result ^ buildings ;
31614: LD_ADDR_VAR 0 7
31618: PUSH
31619: LD_VAR 0 7
31623: PUSH
31624: LD_VAR 0 18
31628: ADD
31629: ST_TO_ADDR
// end else
31630: GO 31773
// begin for i = 1 to personel do
31632: LD_ADDR_VAR 0 8
31636: PUSH
31637: DOUBLE
31638: LD_INT 1
31640: DEC
31641: ST_TO_ADDR
31642: LD_VAR 0 6
31646: PUSH
31647: FOR_TO
31648: IFFALSE 31771
// begin if i > 4 then
31650: LD_VAR 0 8
31654: PUSH
31655: LD_INT 4
31657: GREATER
31658: IFFALSE 31662
// break ;
31660: GO 31771
// x := personel [ i ] ;
31662: LD_ADDR_VAR 0 13
31666: PUSH
31667: LD_VAR 0 6
31671: PUSH
31672: LD_VAR 0 8
31676: ARRAY
31677: ST_TO_ADDR
// if x = - 1 then
31678: LD_VAR 0 13
31682: PUSH
31683: LD_INT 1
31685: NEG
31686: EQUAL
31687: IFFALSE 31691
// continue ;
31689: GO 31647
// PrepareHuman ( false , i , skill ) ;
31691: LD_INT 0
31693: PPUSH
31694: LD_VAR 0 8
31698: PPUSH
31699: LD_VAR 0 4
31703: PPUSH
31704: CALL_OW 380
// un := CreateHuman ;
31708: LD_ADDR_VAR 0 14
31712: PUSH
31713: CALL_OW 44
31717: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31718: LD_VAR 0 14
31722: PPUSH
31723: LD_VAR 0 1
31727: PPUSH
31728: CALL_OW 250
31732: PPUSH
31733: LD_VAR 0 1
31737: PPUSH
31738: CALL_OW 251
31742: PPUSH
31743: LD_INT 10
31745: PPUSH
31746: LD_INT 0
31748: PPUSH
31749: CALL_OW 50
// result := result ^ un ;
31753: LD_ADDR_VAR 0 7
31757: PUSH
31758: LD_VAR 0 7
31762: PUSH
31763: LD_VAR 0 14
31767: ADD
31768: ST_TO_ADDR
// end ;
31769: GO 31647
31771: POP
31772: POP
// end ; end ;
31773: LD_VAR 0 7
31777: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31778: LD_INT 0
31780: PPUSH
31781: PPUSH
31782: PPUSH
31783: PPUSH
31784: PPUSH
31785: PPUSH
31786: PPUSH
31787: PPUSH
31788: PPUSH
31789: PPUSH
31790: PPUSH
31791: PPUSH
31792: PPUSH
31793: PPUSH
31794: PPUSH
31795: PPUSH
// result := false ;
31796: LD_ADDR_VAR 0 3
31800: PUSH
31801: LD_INT 0
31803: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31804: LD_VAR 0 1
31808: NOT
31809: PUSH
31810: LD_VAR 0 1
31814: PPUSH
31815: CALL_OW 266
31819: PUSH
31820: LD_INT 32
31822: PUSH
31823: LD_INT 33
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: IN
31830: NOT
31831: OR
31832: IFFALSE 31836
// exit ;
31834: GO 32945
// nat := GetNation ( tower ) ;
31836: LD_ADDR_VAR 0 12
31840: PUSH
31841: LD_VAR 0 1
31845: PPUSH
31846: CALL_OW 248
31850: ST_TO_ADDR
// side := GetSide ( tower ) ;
31851: LD_ADDR_VAR 0 16
31855: PUSH
31856: LD_VAR 0 1
31860: PPUSH
31861: CALL_OW 255
31865: ST_TO_ADDR
// x := GetX ( tower ) ;
31866: LD_ADDR_VAR 0 10
31870: PUSH
31871: LD_VAR 0 1
31875: PPUSH
31876: CALL_OW 250
31880: ST_TO_ADDR
// y := GetY ( tower ) ;
31881: LD_ADDR_VAR 0 11
31885: PUSH
31886: LD_VAR 0 1
31890: PPUSH
31891: CALL_OW 251
31895: ST_TO_ADDR
// if not x or not y then
31896: LD_VAR 0 10
31900: NOT
31901: PUSH
31902: LD_VAR 0 11
31906: NOT
31907: OR
31908: IFFALSE 31912
// exit ;
31910: GO 32945
// weapon := 0 ;
31912: LD_ADDR_VAR 0 18
31916: PUSH
31917: LD_INT 0
31919: ST_TO_ADDR
// fac_list := [ ] ;
31920: LD_ADDR_VAR 0 17
31924: PUSH
31925: EMPTY
31926: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31927: LD_ADDR_VAR 0 6
31931: PUSH
31932: LD_VAR 0 1
31936: PPUSH
31937: CALL_OW 274
31941: PPUSH
31942: LD_VAR 0 2
31946: PPUSH
31947: LD_INT 0
31949: PPUSH
31950: CALL 29516 0 3
31954: PPUSH
31955: LD_INT 30
31957: PUSH
31958: LD_INT 3
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PPUSH
31965: CALL_OW 72
31969: ST_TO_ADDR
// if not factories then
31970: LD_VAR 0 6
31974: NOT
31975: IFFALSE 31979
// exit ;
31977: GO 32945
// for i in factories do
31979: LD_ADDR_VAR 0 8
31983: PUSH
31984: LD_VAR 0 6
31988: PUSH
31989: FOR_IN
31990: IFFALSE 32015
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31992: LD_ADDR_VAR 0 17
31996: PUSH
31997: LD_VAR 0 17
32001: PUSH
32002: LD_VAR 0 8
32006: PPUSH
32007: CALL_OW 478
32011: UNION
32012: ST_TO_ADDR
32013: GO 31989
32015: POP
32016: POP
// if not fac_list then
32017: LD_VAR 0 17
32021: NOT
32022: IFFALSE 32026
// exit ;
32024: GO 32945
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32026: LD_ADDR_VAR 0 5
32030: PUSH
32031: LD_INT 4
32033: PUSH
32034: LD_INT 5
32036: PUSH
32037: LD_INT 9
32039: PUSH
32040: LD_INT 10
32042: PUSH
32043: LD_INT 6
32045: PUSH
32046: LD_INT 7
32048: PUSH
32049: LD_INT 11
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 27
32063: PUSH
32064: LD_INT 28
32066: PUSH
32067: LD_INT 26
32069: PUSH
32070: LD_INT 30
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 43
32081: PUSH
32082: LD_INT 44
32084: PUSH
32085: LD_INT 46
32087: PUSH
32088: LD_INT 45
32090: PUSH
32091: LD_INT 47
32093: PUSH
32094: LD_INT 49
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: LIST
32109: PUSH
32110: LD_VAR 0 12
32114: ARRAY
32115: ST_TO_ADDR
// list := list isect fac_list ;
32116: LD_ADDR_VAR 0 5
32120: PUSH
32121: LD_VAR 0 5
32125: PUSH
32126: LD_VAR 0 17
32130: ISECT
32131: ST_TO_ADDR
// if not list then
32132: LD_VAR 0 5
32136: NOT
32137: IFFALSE 32141
// exit ;
32139: GO 32945
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32141: LD_VAR 0 12
32145: PUSH
32146: LD_INT 3
32148: EQUAL
32149: PUSH
32150: LD_INT 49
32152: PUSH
32153: LD_VAR 0 5
32157: IN
32158: AND
32159: PUSH
32160: LD_INT 31
32162: PPUSH
32163: LD_VAR 0 16
32167: PPUSH
32168: CALL_OW 321
32172: PUSH
32173: LD_INT 2
32175: EQUAL
32176: AND
32177: IFFALSE 32237
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32179: LD_INT 22
32181: PUSH
32182: LD_VAR 0 16
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 35
32193: PUSH
32194: LD_INT 49
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 91
32203: PUSH
32204: LD_VAR 0 1
32208: PUSH
32209: LD_INT 10
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: LIST
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: LIST
32221: PPUSH
32222: CALL_OW 69
32226: NOT
32227: IFFALSE 32237
// weapon := ru_time_lapser ;
32229: LD_ADDR_VAR 0 18
32233: PUSH
32234: LD_INT 49
32236: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32237: LD_VAR 0 12
32241: PUSH
32242: LD_INT 1
32244: PUSH
32245: LD_INT 2
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: IN
32252: PUSH
32253: LD_INT 11
32255: PUSH
32256: LD_VAR 0 5
32260: IN
32261: PUSH
32262: LD_INT 30
32264: PUSH
32265: LD_VAR 0 5
32269: IN
32270: OR
32271: AND
32272: PUSH
32273: LD_INT 6
32275: PPUSH
32276: LD_VAR 0 16
32280: PPUSH
32281: CALL_OW 321
32285: PUSH
32286: LD_INT 2
32288: EQUAL
32289: AND
32290: IFFALSE 32455
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32292: LD_INT 22
32294: PUSH
32295: LD_VAR 0 16
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 2
32306: PUSH
32307: LD_INT 35
32309: PUSH
32310: LD_INT 11
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 35
32319: PUSH
32320: LD_INT 30
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 91
32334: PUSH
32335: LD_VAR 0 1
32339: PUSH
32340: LD_INT 18
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: LIST
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: LIST
32352: PPUSH
32353: CALL_OW 69
32357: NOT
32358: PUSH
32359: LD_INT 22
32361: PUSH
32362: LD_VAR 0 16
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 2
32373: PUSH
32374: LD_INT 30
32376: PUSH
32377: LD_INT 32
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 30
32386: PUSH
32387: LD_INT 33
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 91
32401: PUSH
32402: LD_VAR 0 1
32406: PUSH
32407: LD_INT 12
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: LIST
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: LIST
32419: PUSH
32420: EMPTY
32421: LIST
32422: PPUSH
32423: CALL_OW 69
32427: PUSH
32428: LD_INT 2
32430: GREATER
32431: AND
32432: IFFALSE 32455
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32434: LD_ADDR_VAR 0 18
32438: PUSH
32439: LD_INT 11
32441: PUSH
32442: LD_INT 30
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_VAR 0 12
32453: ARRAY
32454: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32455: LD_VAR 0 18
32459: NOT
32460: PUSH
32461: LD_INT 40
32463: PPUSH
32464: LD_VAR 0 16
32468: PPUSH
32469: CALL_OW 321
32473: PUSH
32474: LD_INT 2
32476: EQUAL
32477: AND
32478: PUSH
32479: LD_INT 7
32481: PUSH
32482: LD_VAR 0 5
32486: IN
32487: PUSH
32488: LD_INT 28
32490: PUSH
32491: LD_VAR 0 5
32495: IN
32496: OR
32497: PUSH
32498: LD_INT 45
32500: PUSH
32501: LD_VAR 0 5
32505: IN
32506: OR
32507: AND
32508: IFFALSE 32762
// begin hex := GetHexInfo ( x , y ) ;
32510: LD_ADDR_VAR 0 4
32514: PUSH
32515: LD_VAR 0 10
32519: PPUSH
32520: LD_VAR 0 11
32524: PPUSH
32525: CALL_OW 546
32529: ST_TO_ADDR
// if hex [ 1 ] then
32530: LD_VAR 0 4
32534: PUSH
32535: LD_INT 1
32537: ARRAY
32538: IFFALSE 32542
// exit ;
32540: GO 32945
// height := hex [ 2 ] ;
32542: LD_ADDR_VAR 0 15
32546: PUSH
32547: LD_VAR 0 4
32551: PUSH
32552: LD_INT 2
32554: ARRAY
32555: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32556: LD_ADDR_VAR 0 14
32560: PUSH
32561: LD_INT 0
32563: PUSH
32564: LD_INT 2
32566: PUSH
32567: LD_INT 3
32569: PUSH
32570: LD_INT 5
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: ST_TO_ADDR
// for i in tmp do
32579: LD_ADDR_VAR 0 8
32583: PUSH
32584: LD_VAR 0 14
32588: PUSH
32589: FOR_IN
32590: IFFALSE 32760
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32592: LD_ADDR_VAR 0 9
32596: PUSH
32597: LD_VAR 0 10
32601: PPUSH
32602: LD_VAR 0 8
32606: PPUSH
32607: LD_INT 5
32609: PPUSH
32610: CALL_OW 272
32614: PUSH
32615: LD_VAR 0 11
32619: PPUSH
32620: LD_VAR 0 8
32624: PPUSH
32625: LD_INT 5
32627: PPUSH
32628: CALL_OW 273
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32637: LD_VAR 0 9
32641: PUSH
32642: LD_INT 1
32644: ARRAY
32645: PPUSH
32646: LD_VAR 0 9
32650: PUSH
32651: LD_INT 2
32653: ARRAY
32654: PPUSH
32655: CALL_OW 488
32659: IFFALSE 32758
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32661: LD_ADDR_VAR 0 4
32665: PUSH
32666: LD_VAR 0 9
32670: PUSH
32671: LD_INT 1
32673: ARRAY
32674: PPUSH
32675: LD_VAR 0 9
32679: PUSH
32680: LD_INT 2
32682: ARRAY
32683: PPUSH
32684: CALL_OW 546
32688: ST_TO_ADDR
// if hex [ 1 ] then
32689: LD_VAR 0 4
32693: PUSH
32694: LD_INT 1
32696: ARRAY
32697: IFFALSE 32701
// continue ;
32699: GO 32589
// h := hex [ 2 ] ;
32701: LD_ADDR_VAR 0 13
32705: PUSH
32706: LD_VAR 0 4
32710: PUSH
32711: LD_INT 2
32713: ARRAY
32714: ST_TO_ADDR
// if h + 7 < height then
32715: LD_VAR 0 13
32719: PUSH
32720: LD_INT 7
32722: PLUS
32723: PUSH
32724: LD_VAR 0 15
32728: LESS
32729: IFFALSE 32758
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32731: LD_ADDR_VAR 0 18
32735: PUSH
32736: LD_INT 7
32738: PUSH
32739: LD_INT 28
32741: PUSH
32742: LD_INT 45
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: LIST
32749: PUSH
32750: LD_VAR 0 12
32754: ARRAY
32755: ST_TO_ADDR
// break ;
32756: GO 32760
// end ; end ; end ;
32758: GO 32589
32760: POP
32761: POP
// end ; if not weapon then
32762: LD_VAR 0 18
32766: NOT
32767: IFFALSE 32827
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32769: LD_ADDR_VAR 0 5
32773: PUSH
32774: LD_VAR 0 5
32778: PUSH
32779: LD_INT 11
32781: PUSH
32782: LD_INT 30
32784: PUSH
32785: LD_INT 49
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: LIST
32792: DIFF
32793: ST_TO_ADDR
// if not list then
32794: LD_VAR 0 5
32798: NOT
32799: IFFALSE 32803
// exit ;
32801: GO 32945
// weapon := list [ rand ( 1 , list ) ] ;
32803: LD_ADDR_VAR 0 18
32807: PUSH
32808: LD_VAR 0 5
32812: PUSH
32813: LD_INT 1
32815: PPUSH
32816: LD_VAR 0 5
32820: PPUSH
32821: CALL_OW 12
32825: ARRAY
32826: ST_TO_ADDR
// end ; if weapon then
32827: LD_VAR 0 18
32831: IFFALSE 32945
// begin tmp := CostOfWeapon ( weapon ) ;
32833: LD_ADDR_VAR 0 14
32837: PUSH
32838: LD_VAR 0 18
32842: PPUSH
32843: CALL_OW 451
32847: ST_TO_ADDR
// j := GetBase ( tower ) ;
32848: LD_ADDR_VAR 0 9
32852: PUSH
32853: LD_VAR 0 1
32857: PPUSH
32858: CALL_OW 274
32862: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32863: LD_VAR 0 9
32867: PPUSH
32868: LD_INT 1
32870: PPUSH
32871: CALL_OW 275
32875: PUSH
32876: LD_VAR 0 14
32880: PUSH
32881: LD_INT 1
32883: ARRAY
32884: GREATEREQUAL
32885: PUSH
32886: LD_VAR 0 9
32890: PPUSH
32891: LD_INT 2
32893: PPUSH
32894: CALL_OW 275
32898: PUSH
32899: LD_VAR 0 14
32903: PUSH
32904: LD_INT 2
32906: ARRAY
32907: GREATEREQUAL
32908: AND
32909: PUSH
32910: LD_VAR 0 9
32914: PPUSH
32915: LD_INT 3
32917: PPUSH
32918: CALL_OW 275
32922: PUSH
32923: LD_VAR 0 14
32927: PUSH
32928: LD_INT 3
32930: ARRAY
32931: GREATEREQUAL
32932: AND
32933: IFFALSE 32945
// result := weapon ;
32935: LD_ADDR_VAR 0 3
32939: PUSH
32940: LD_VAR 0 18
32944: ST_TO_ADDR
// end ; end ;
32945: LD_VAR 0 3
32949: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32950: LD_INT 0
32952: PPUSH
32953: PPUSH
// result := true ;
32954: LD_ADDR_VAR 0 3
32958: PUSH
32959: LD_INT 1
32961: ST_TO_ADDR
// if array1 = array2 then
32962: LD_VAR 0 1
32966: PUSH
32967: LD_VAR 0 2
32971: EQUAL
32972: IFFALSE 33032
// begin for i = 1 to array1 do
32974: LD_ADDR_VAR 0 4
32978: PUSH
32979: DOUBLE
32980: LD_INT 1
32982: DEC
32983: ST_TO_ADDR
32984: LD_VAR 0 1
32988: PUSH
32989: FOR_TO
32990: IFFALSE 33028
// if array1 [ i ] <> array2 [ i ] then
32992: LD_VAR 0 1
32996: PUSH
32997: LD_VAR 0 4
33001: ARRAY
33002: PUSH
33003: LD_VAR 0 2
33007: PUSH
33008: LD_VAR 0 4
33012: ARRAY
33013: NONEQUAL
33014: IFFALSE 33026
// begin result := false ;
33016: LD_ADDR_VAR 0 3
33020: PUSH
33021: LD_INT 0
33023: ST_TO_ADDR
// break ;
33024: GO 33028
// end ;
33026: GO 32989
33028: POP
33029: POP
// end else
33030: GO 33040
// result := false ;
33032: LD_ADDR_VAR 0 3
33036: PUSH
33037: LD_INT 0
33039: ST_TO_ADDR
// end ;
33040: LD_VAR 0 3
33044: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33045: LD_INT 0
33047: PPUSH
33048: PPUSH
// if not array1 or not array2 then
33049: LD_VAR 0 1
33053: NOT
33054: PUSH
33055: LD_VAR 0 2
33059: NOT
33060: OR
33061: IFFALSE 33065
// exit ;
33063: GO 33129
// result := true ;
33065: LD_ADDR_VAR 0 3
33069: PUSH
33070: LD_INT 1
33072: ST_TO_ADDR
// for i = 1 to array1 do
33073: LD_ADDR_VAR 0 4
33077: PUSH
33078: DOUBLE
33079: LD_INT 1
33081: DEC
33082: ST_TO_ADDR
33083: LD_VAR 0 1
33087: PUSH
33088: FOR_TO
33089: IFFALSE 33127
// if array1 [ i ] <> array2 [ i ] then
33091: LD_VAR 0 1
33095: PUSH
33096: LD_VAR 0 4
33100: ARRAY
33101: PUSH
33102: LD_VAR 0 2
33106: PUSH
33107: LD_VAR 0 4
33111: ARRAY
33112: NONEQUAL
33113: IFFALSE 33125
// begin result := false ;
33115: LD_ADDR_VAR 0 3
33119: PUSH
33120: LD_INT 0
33122: ST_TO_ADDR
// break ;
33123: GO 33127
// end ;
33125: GO 33088
33127: POP
33128: POP
// end ;
33129: LD_VAR 0 3
33133: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33134: LD_INT 0
33136: PPUSH
33137: PPUSH
33138: PPUSH
// pom := GetBase ( fac ) ;
33139: LD_ADDR_VAR 0 5
33143: PUSH
33144: LD_VAR 0 1
33148: PPUSH
33149: CALL_OW 274
33153: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33154: LD_ADDR_VAR 0 4
33158: PUSH
33159: LD_VAR 0 2
33163: PUSH
33164: LD_INT 1
33166: ARRAY
33167: PPUSH
33168: LD_VAR 0 2
33172: PUSH
33173: LD_INT 2
33175: ARRAY
33176: PPUSH
33177: LD_VAR 0 2
33181: PUSH
33182: LD_INT 3
33184: ARRAY
33185: PPUSH
33186: LD_VAR 0 2
33190: PUSH
33191: LD_INT 4
33193: ARRAY
33194: PPUSH
33195: CALL_OW 449
33199: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33200: LD_ADDR_VAR 0 3
33204: PUSH
33205: LD_VAR 0 5
33209: PPUSH
33210: LD_INT 1
33212: PPUSH
33213: CALL_OW 275
33217: PUSH
33218: LD_VAR 0 4
33222: PUSH
33223: LD_INT 1
33225: ARRAY
33226: GREATEREQUAL
33227: PUSH
33228: LD_VAR 0 5
33232: PPUSH
33233: LD_INT 2
33235: PPUSH
33236: CALL_OW 275
33240: PUSH
33241: LD_VAR 0 4
33245: PUSH
33246: LD_INT 2
33248: ARRAY
33249: GREATEREQUAL
33250: AND
33251: PUSH
33252: LD_VAR 0 5
33256: PPUSH
33257: LD_INT 3
33259: PPUSH
33260: CALL_OW 275
33264: PUSH
33265: LD_VAR 0 4
33269: PUSH
33270: LD_INT 3
33272: ARRAY
33273: GREATEREQUAL
33274: AND
33275: ST_TO_ADDR
// end ;
33276: LD_VAR 0 3
33280: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33281: LD_INT 0
33283: PPUSH
33284: PPUSH
33285: PPUSH
33286: PPUSH
// pom := GetBase ( building ) ;
33287: LD_ADDR_VAR 0 3
33291: PUSH
33292: LD_VAR 0 1
33296: PPUSH
33297: CALL_OW 274
33301: ST_TO_ADDR
// if not pom then
33302: LD_VAR 0 3
33306: NOT
33307: IFFALSE 33311
// exit ;
33309: GO 33481
// btype := GetBType ( building ) ;
33311: LD_ADDR_VAR 0 5
33315: PUSH
33316: LD_VAR 0 1
33320: PPUSH
33321: CALL_OW 266
33325: ST_TO_ADDR
// if btype = b_armoury then
33326: LD_VAR 0 5
33330: PUSH
33331: LD_INT 4
33333: EQUAL
33334: IFFALSE 33344
// btype := b_barracks ;
33336: LD_ADDR_VAR 0 5
33340: PUSH
33341: LD_INT 5
33343: ST_TO_ADDR
// if btype = b_depot then
33344: LD_VAR 0 5
33348: PUSH
33349: LD_INT 0
33351: EQUAL
33352: IFFALSE 33362
// btype := b_warehouse ;
33354: LD_ADDR_VAR 0 5
33358: PUSH
33359: LD_INT 1
33361: ST_TO_ADDR
// if btype = b_workshop then
33362: LD_VAR 0 5
33366: PUSH
33367: LD_INT 2
33369: EQUAL
33370: IFFALSE 33380
// btype := b_factory ;
33372: LD_ADDR_VAR 0 5
33376: PUSH
33377: LD_INT 3
33379: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33380: LD_ADDR_VAR 0 4
33384: PUSH
33385: LD_VAR 0 5
33389: PPUSH
33390: LD_VAR 0 1
33394: PPUSH
33395: CALL_OW 248
33399: PPUSH
33400: CALL_OW 450
33404: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33405: LD_ADDR_VAR 0 2
33409: PUSH
33410: LD_VAR 0 3
33414: PPUSH
33415: LD_INT 1
33417: PPUSH
33418: CALL_OW 275
33422: PUSH
33423: LD_VAR 0 4
33427: PUSH
33428: LD_INT 1
33430: ARRAY
33431: GREATEREQUAL
33432: PUSH
33433: LD_VAR 0 3
33437: PPUSH
33438: LD_INT 2
33440: PPUSH
33441: CALL_OW 275
33445: PUSH
33446: LD_VAR 0 4
33450: PUSH
33451: LD_INT 2
33453: ARRAY
33454: GREATEREQUAL
33455: AND
33456: PUSH
33457: LD_VAR 0 3
33461: PPUSH
33462: LD_INT 3
33464: PPUSH
33465: CALL_OW 275
33469: PUSH
33470: LD_VAR 0 4
33474: PUSH
33475: LD_INT 3
33477: ARRAY
33478: GREATEREQUAL
33479: AND
33480: ST_TO_ADDR
// end ;
33481: LD_VAR 0 2
33485: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33486: LD_INT 0
33488: PPUSH
33489: PPUSH
33490: PPUSH
// pom := GetBase ( building ) ;
33491: LD_ADDR_VAR 0 4
33495: PUSH
33496: LD_VAR 0 1
33500: PPUSH
33501: CALL_OW 274
33505: ST_TO_ADDR
// if not pom then
33506: LD_VAR 0 4
33510: NOT
33511: IFFALSE 33515
// exit ;
33513: GO 33616
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33515: LD_ADDR_VAR 0 5
33519: PUSH
33520: LD_VAR 0 2
33524: PPUSH
33525: LD_VAR 0 1
33529: PPUSH
33530: CALL_OW 248
33534: PPUSH
33535: CALL_OW 450
33539: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33540: LD_ADDR_VAR 0 3
33544: PUSH
33545: LD_VAR 0 4
33549: PPUSH
33550: LD_INT 1
33552: PPUSH
33553: CALL_OW 275
33557: PUSH
33558: LD_VAR 0 5
33562: PUSH
33563: LD_INT 1
33565: ARRAY
33566: GREATEREQUAL
33567: PUSH
33568: LD_VAR 0 4
33572: PPUSH
33573: LD_INT 2
33575: PPUSH
33576: CALL_OW 275
33580: PUSH
33581: LD_VAR 0 5
33585: PUSH
33586: LD_INT 2
33588: ARRAY
33589: GREATEREQUAL
33590: AND
33591: PUSH
33592: LD_VAR 0 4
33596: PPUSH
33597: LD_INT 3
33599: PPUSH
33600: CALL_OW 275
33604: PUSH
33605: LD_VAR 0 5
33609: PUSH
33610: LD_INT 3
33612: ARRAY
33613: GREATEREQUAL
33614: AND
33615: ST_TO_ADDR
// end ;
33616: LD_VAR 0 3
33620: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33621: LD_INT 0
33623: PPUSH
33624: PPUSH
33625: PPUSH
33626: PPUSH
33627: PPUSH
33628: PPUSH
33629: PPUSH
33630: PPUSH
33631: PPUSH
33632: PPUSH
33633: PPUSH
// result := false ;
33634: LD_ADDR_VAR 0 8
33638: PUSH
33639: LD_INT 0
33641: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33642: LD_VAR 0 5
33646: NOT
33647: PUSH
33648: LD_VAR 0 1
33652: NOT
33653: OR
33654: PUSH
33655: LD_VAR 0 2
33659: NOT
33660: OR
33661: PUSH
33662: LD_VAR 0 3
33666: NOT
33667: OR
33668: IFFALSE 33672
// exit ;
33670: GO 34486
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33672: LD_ADDR_VAR 0 14
33676: PUSH
33677: LD_VAR 0 1
33681: PPUSH
33682: LD_VAR 0 2
33686: PPUSH
33687: LD_VAR 0 3
33691: PPUSH
33692: LD_VAR 0 4
33696: PPUSH
33697: LD_VAR 0 5
33701: PUSH
33702: LD_INT 1
33704: ARRAY
33705: PPUSH
33706: CALL_OW 248
33710: PPUSH
33711: LD_INT 0
33713: PPUSH
33714: CALL 35723 0 6
33718: ST_TO_ADDR
// if not hexes then
33719: LD_VAR 0 14
33723: NOT
33724: IFFALSE 33728
// exit ;
33726: GO 34486
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33728: LD_ADDR_VAR 0 17
33732: PUSH
33733: LD_VAR 0 5
33737: PPUSH
33738: LD_INT 22
33740: PUSH
33741: LD_VAR 0 13
33745: PPUSH
33746: CALL_OW 255
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 2
33757: PUSH
33758: LD_INT 30
33760: PUSH
33761: LD_INT 0
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 30
33770: PUSH
33771: LD_INT 1
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: LIST
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PPUSH
33787: CALL_OW 72
33791: ST_TO_ADDR
// for i = 1 to hexes do
33792: LD_ADDR_VAR 0 9
33796: PUSH
33797: DOUBLE
33798: LD_INT 1
33800: DEC
33801: ST_TO_ADDR
33802: LD_VAR 0 14
33806: PUSH
33807: FOR_TO
33808: IFFALSE 34484
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33810: LD_ADDR_VAR 0 13
33814: PUSH
33815: LD_VAR 0 14
33819: PUSH
33820: LD_VAR 0 9
33824: ARRAY
33825: PUSH
33826: LD_INT 1
33828: ARRAY
33829: PPUSH
33830: LD_VAR 0 14
33834: PUSH
33835: LD_VAR 0 9
33839: ARRAY
33840: PUSH
33841: LD_INT 2
33843: ARRAY
33844: PPUSH
33845: CALL_OW 428
33849: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33850: LD_VAR 0 14
33854: PUSH
33855: LD_VAR 0 9
33859: ARRAY
33860: PUSH
33861: LD_INT 1
33863: ARRAY
33864: PPUSH
33865: LD_VAR 0 14
33869: PUSH
33870: LD_VAR 0 9
33874: ARRAY
33875: PUSH
33876: LD_INT 2
33878: ARRAY
33879: PPUSH
33880: CALL_OW 351
33884: PUSH
33885: LD_VAR 0 14
33889: PUSH
33890: LD_VAR 0 9
33894: ARRAY
33895: PUSH
33896: LD_INT 1
33898: ARRAY
33899: PPUSH
33900: LD_VAR 0 14
33904: PUSH
33905: LD_VAR 0 9
33909: ARRAY
33910: PUSH
33911: LD_INT 2
33913: ARRAY
33914: PPUSH
33915: CALL_OW 488
33919: NOT
33920: OR
33921: PUSH
33922: LD_VAR 0 13
33926: PPUSH
33927: CALL_OW 247
33931: PUSH
33932: LD_INT 3
33934: EQUAL
33935: OR
33936: IFFALSE 33942
// exit ;
33938: POP
33939: POP
33940: GO 34486
// if not tmp then
33942: LD_VAR 0 13
33946: NOT
33947: IFFALSE 33951
// continue ;
33949: GO 33807
// result := true ;
33951: LD_ADDR_VAR 0 8
33955: PUSH
33956: LD_INT 1
33958: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33959: LD_VAR 0 6
33963: PUSH
33964: LD_VAR 0 13
33968: PPUSH
33969: CALL_OW 247
33973: PUSH
33974: LD_INT 2
33976: EQUAL
33977: AND
33978: PUSH
33979: LD_VAR 0 13
33983: PPUSH
33984: CALL_OW 263
33988: PUSH
33989: LD_INT 1
33991: EQUAL
33992: AND
33993: IFFALSE 34157
// begin if IsDrivenBy ( tmp ) then
33995: LD_VAR 0 13
33999: PPUSH
34000: CALL_OW 311
34004: IFFALSE 34008
// continue ;
34006: GO 33807
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34008: LD_VAR 0 6
34012: PPUSH
34013: LD_INT 3
34015: PUSH
34016: LD_INT 60
34018: PUSH
34019: EMPTY
34020: LIST
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 3
34028: PUSH
34029: LD_INT 55
34031: PUSH
34032: EMPTY
34033: LIST
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PPUSH
34043: CALL_OW 72
34047: IFFALSE 34155
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34049: LD_ADDR_VAR 0 18
34053: PUSH
34054: LD_VAR 0 6
34058: PPUSH
34059: LD_INT 3
34061: PUSH
34062: LD_INT 60
34064: PUSH
34065: EMPTY
34066: LIST
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 3
34074: PUSH
34075: LD_INT 55
34077: PUSH
34078: EMPTY
34079: LIST
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PPUSH
34089: CALL_OW 72
34093: PUSH
34094: LD_INT 1
34096: ARRAY
34097: ST_TO_ADDR
// if IsInUnit ( driver ) then
34098: LD_VAR 0 18
34102: PPUSH
34103: CALL_OW 310
34107: IFFALSE 34118
// ComExit ( driver ) ;
34109: LD_VAR 0 18
34113: PPUSH
34114: CALL 59411 0 1
// AddComEnterUnit ( driver , tmp ) ;
34118: LD_VAR 0 18
34122: PPUSH
34123: LD_VAR 0 13
34127: PPUSH
34128: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34132: LD_VAR 0 18
34136: PPUSH
34137: LD_VAR 0 7
34141: PPUSH
34142: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34146: LD_VAR 0 18
34150: PPUSH
34151: CALL_OW 181
// end ; continue ;
34155: GO 33807
// end ; if not cleaners or not tmp in cleaners then
34157: LD_VAR 0 6
34161: NOT
34162: PUSH
34163: LD_VAR 0 13
34167: PUSH
34168: LD_VAR 0 6
34172: IN
34173: NOT
34174: OR
34175: IFFALSE 34482
// begin if dep then
34177: LD_VAR 0 17
34181: IFFALSE 34317
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34183: LD_ADDR_VAR 0 16
34187: PUSH
34188: LD_VAR 0 17
34192: PUSH
34193: LD_INT 1
34195: ARRAY
34196: PPUSH
34197: CALL_OW 250
34201: PPUSH
34202: LD_VAR 0 17
34206: PUSH
34207: LD_INT 1
34209: ARRAY
34210: PPUSH
34211: CALL_OW 254
34215: PPUSH
34216: LD_INT 5
34218: PPUSH
34219: CALL_OW 272
34223: PUSH
34224: LD_VAR 0 17
34228: PUSH
34229: LD_INT 1
34231: ARRAY
34232: PPUSH
34233: CALL_OW 251
34237: PPUSH
34238: LD_VAR 0 17
34242: PUSH
34243: LD_INT 1
34245: ARRAY
34246: PPUSH
34247: CALL_OW 254
34251: PPUSH
34252: LD_INT 5
34254: PPUSH
34255: CALL_OW 273
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34264: LD_VAR 0 16
34268: PUSH
34269: LD_INT 1
34271: ARRAY
34272: PPUSH
34273: LD_VAR 0 16
34277: PUSH
34278: LD_INT 2
34280: ARRAY
34281: PPUSH
34282: CALL_OW 488
34286: IFFALSE 34317
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34288: LD_VAR 0 13
34292: PPUSH
34293: LD_VAR 0 16
34297: PUSH
34298: LD_INT 1
34300: ARRAY
34301: PPUSH
34302: LD_VAR 0 16
34306: PUSH
34307: LD_INT 2
34309: ARRAY
34310: PPUSH
34311: CALL_OW 111
// continue ;
34315: GO 33807
// end ; end ; r := GetDir ( tmp ) ;
34317: LD_ADDR_VAR 0 15
34321: PUSH
34322: LD_VAR 0 13
34326: PPUSH
34327: CALL_OW 254
34331: ST_TO_ADDR
// if r = 5 then
34332: LD_VAR 0 15
34336: PUSH
34337: LD_INT 5
34339: EQUAL
34340: IFFALSE 34350
// r := 0 ;
34342: LD_ADDR_VAR 0 15
34346: PUSH
34347: LD_INT 0
34349: ST_TO_ADDR
// for j = r to 5 do
34350: LD_ADDR_VAR 0 10
34354: PUSH
34355: DOUBLE
34356: LD_VAR 0 15
34360: DEC
34361: ST_TO_ADDR
34362: LD_INT 5
34364: PUSH
34365: FOR_TO
34366: IFFALSE 34480
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34368: LD_ADDR_VAR 0 11
34372: PUSH
34373: LD_VAR 0 13
34377: PPUSH
34378: CALL_OW 250
34382: PPUSH
34383: LD_VAR 0 10
34387: PPUSH
34388: LD_INT 2
34390: PPUSH
34391: CALL_OW 272
34395: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34396: LD_ADDR_VAR 0 12
34400: PUSH
34401: LD_VAR 0 13
34405: PPUSH
34406: CALL_OW 251
34410: PPUSH
34411: LD_VAR 0 10
34415: PPUSH
34416: LD_INT 2
34418: PPUSH
34419: CALL_OW 273
34423: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34424: LD_VAR 0 11
34428: PPUSH
34429: LD_VAR 0 12
34433: PPUSH
34434: CALL_OW 488
34438: PUSH
34439: LD_VAR 0 11
34443: PPUSH
34444: LD_VAR 0 12
34448: PPUSH
34449: CALL_OW 428
34453: NOT
34454: AND
34455: IFFALSE 34478
// begin ComMoveXY ( tmp , _x , _y ) ;
34457: LD_VAR 0 13
34461: PPUSH
34462: LD_VAR 0 11
34466: PPUSH
34467: LD_VAR 0 12
34471: PPUSH
34472: CALL_OW 111
// break ;
34476: GO 34480
// end ; end ;
34478: GO 34365
34480: POP
34481: POP
// end ; end ;
34482: GO 33807
34484: POP
34485: POP
// end ;
34486: LD_VAR 0 8
34490: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34491: LD_INT 0
34493: PPUSH
// result := true ;
34494: LD_ADDR_VAR 0 3
34498: PUSH
34499: LD_INT 1
34501: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34502: LD_VAR 0 2
34506: PUSH
34507: LD_INT 24
34509: DOUBLE
34510: EQUAL
34511: IFTRUE 34521
34513: LD_INT 33
34515: DOUBLE
34516: EQUAL
34517: IFTRUE 34521
34519: GO 34546
34521: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34522: LD_ADDR_VAR 0 3
34526: PUSH
34527: LD_INT 32
34529: PPUSH
34530: LD_VAR 0 1
34534: PPUSH
34535: CALL_OW 321
34539: PUSH
34540: LD_INT 2
34542: EQUAL
34543: ST_TO_ADDR
34544: GO 34866
34546: LD_INT 20
34548: DOUBLE
34549: EQUAL
34550: IFTRUE 34554
34552: GO 34579
34554: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34555: LD_ADDR_VAR 0 3
34559: PUSH
34560: LD_INT 6
34562: PPUSH
34563: LD_VAR 0 1
34567: PPUSH
34568: CALL_OW 321
34572: PUSH
34573: LD_INT 2
34575: EQUAL
34576: ST_TO_ADDR
34577: GO 34866
34579: LD_INT 22
34581: DOUBLE
34582: EQUAL
34583: IFTRUE 34593
34585: LD_INT 36
34587: DOUBLE
34588: EQUAL
34589: IFTRUE 34593
34591: GO 34618
34593: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34594: LD_ADDR_VAR 0 3
34598: PUSH
34599: LD_INT 15
34601: PPUSH
34602: LD_VAR 0 1
34606: PPUSH
34607: CALL_OW 321
34611: PUSH
34612: LD_INT 2
34614: EQUAL
34615: ST_TO_ADDR
34616: GO 34866
34618: LD_INT 30
34620: DOUBLE
34621: EQUAL
34622: IFTRUE 34626
34624: GO 34651
34626: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34627: LD_ADDR_VAR 0 3
34631: PUSH
34632: LD_INT 20
34634: PPUSH
34635: LD_VAR 0 1
34639: PPUSH
34640: CALL_OW 321
34644: PUSH
34645: LD_INT 2
34647: EQUAL
34648: ST_TO_ADDR
34649: GO 34866
34651: LD_INT 28
34653: DOUBLE
34654: EQUAL
34655: IFTRUE 34665
34657: LD_INT 21
34659: DOUBLE
34660: EQUAL
34661: IFTRUE 34665
34663: GO 34690
34665: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34666: LD_ADDR_VAR 0 3
34670: PUSH
34671: LD_INT 21
34673: PPUSH
34674: LD_VAR 0 1
34678: PPUSH
34679: CALL_OW 321
34683: PUSH
34684: LD_INT 2
34686: EQUAL
34687: ST_TO_ADDR
34688: GO 34866
34690: LD_INT 16
34692: DOUBLE
34693: EQUAL
34694: IFTRUE 34698
34696: GO 34725
34698: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34699: LD_ADDR_VAR 0 3
34703: PUSH
34704: LD_EXP 85
34708: PPUSH
34709: LD_VAR 0 1
34713: PPUSH
34714: CALL_OW 321
34718: PUSH
34719: LD_INT 2
34721: EQUAL
34722: ST_TO_ADDR
34723: GO 34866
34725: LD_INT 19
34727: DOUBLE
34728: EQUAL
34729: IFTRUE 34739
34731: LD_INT 23
34733: DOUBLE
34734: EQUAL
34735: IFTRUE 34739
34737: GO 34766
34739: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34740: LD_ADDR_VAR 0 3
34744: PUSH
34745: LD_EXP 84
34749: PPUSH
34750: LD_VAR 0 1
34754: PPUSH
34755: CALL_OW 321
34759: PUSH
34760: LD_INT 2
34762: EQUAL
34763: ST_TO_ADDR
34764: GO 34866
34766: LD_INT 17
34768: DOUBLE
34769: EQUAL
34770: IFTRUE 34774
34772: GO 34799
34774: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34775: LD_ADDR_VAR 0 3
34779: PUSH
34780: LD_INT 39
34782: PPUSH
34783: LD_VAR 0 1
34787: PPUSH
34788: CALL_OW 321
34792: PUSH
34793: LD_INT 2
34795: EQUAL
34796: ST_TO_ADDR
34797: GO 34866
34799: LD_INT 18
34801: DOUBLE
34802: EQUAL
34803: IFTRUE 34807
34805: GO 34832
34807: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34808: LD_ADDR_VAR 0 3
34812: PUSH
34813: LD_INT 40
34815: PPUSH
34816: LD_VAR 0 1
34820: PPUSH
34821: CALL_OW 321
34825: PUSH
34826: LD_INT 2
34828: EQUAL
34829: ST_TO_ADDR
34830: GO 34866
34832: LD_INT 27
34834: DOUBLE
34835: EQUAL
34836: IFTRUE 34840
34838: GO 34865
34840: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34841: LD_ADDR_VAR 0 3
34845: PUSH
34846: LD_INT 35
34848: PPUSH
34849: LD_VAR 0 1
34853: PPUSH
34854: CALL_OW 321
34858: PUSH
34859: LD_INT 2
34861: EQUAL
34862: ST_TO_ADDR
34863: GO 34866
34865: POP
// end ;
34866: LD_VAR 0 3
34870: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34871: LD_INT 0
34873: PPUSH
34874: PPUSH
34875: PPUSH
34876: PPUSH
34877: PPUSH
34878: PPUSH
34879: PPUSH
34880: PPUSH
34881: PPUSH
34882: PPUSH
34883: PPUSH
// result := false ;
34884: LD_ADDR_VAR 0 6
34888: PUSH
34889: LD_INT 0
34891: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34892: LD_VAR 0 1
34896: NOT
34897: PUSH
34898: LD_VAR 0 1
34902: PPUSH
34903: CALL_OW 266
34907: PUSH
34908: LD_INT 0
34910: PUSH
34911: LD_INT 1
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: IN
34918: NOT
34919: OR
34920: PUSH
34921: LD_VAR 0 2
34925: NOT
34926: OR
34927: PUSH
34928: LD_VAR 0 5
34932: PUSH
34933: LD_INT 0
34935: PUSH
34936: LD_INT 1
34938: PUSH
34939: LD_INT 2
34941: PUSH
34942: LD_INT 3
34944: PUSH
34945: LD_INT 4
34947: PUSH
34948: LD_INT 5
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: IN
34959: NOT
34960: OR
34961: PUSH
34962: LD_VAR 0 3
34966: PPUSH
34967: LD_VAR 0 4
34971: PPUSH
34972: CALL_OW 488
34976: NOT
34977: OR
34978: IFFALSE 34982
// exit ;
34980: GO 35718
// side := GetSide ( depot ) ;
34982: LD_ADDR_VAR 0 9
34986: PUSH
34987: LD_VAR 0 1
34991: PPUSH
34992: CALL_OW 255
34996: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
34997: LD_VAR 0 9
35001: PPUSH
35002: LD_VAR 0 2
35006: PPUSH
35007: CALL 34491 0 2
35011: NOT
35012: IFFALSE 35016
// exit ;
35014: GO 35718
// pom := GetBase ( depot ) ;
35016: LD_ADDR_VAR 0 10
35020: PUSH
35021: LD_VAR 0 1
35025: PPUSH
35026: CALL_OW 274
35030: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35031: LD_ADDR_VAR 0 11
35035: PUSH
35036: LD_VAR 0 2
35040: PPUSH
35041: LD_VAR 0 1
35045: PPUSH
35046: CALL_OW 248
35050: PPUSH
35051: CALL_OW 450
35055: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35056: LD_VAR 0 10
35060: PPUSH
35061: LD_INT 1
35063: PPUSH
35064: CALL_OW 275
35068: PUSH
35069: LD_VAR 0 11
35073: PUSH
35074: LD_INT 1
35076: ARRAY
35077: GREATEREQUAL
35078: PUSH
35079: LD_VAR 0 10
35083: PPUSH
35084: LD_INT 2
35086: PPUSH
35087: CALL_OW 275
35091: PUSH
35092: LD_VAR 0 11
35096: PUSH
35097: LD_INT 2
35099: ARRAY
35100: GREATEREQUAL
35101: AND
35102: PUSH
35103: LD_VAR 0 10
35107: PPUSH
35108: LD_INT 3
35110: PPUSH
35111: CALL_OW 275
35115: PUSH
35116: LD_VAR 0 11
35120: PUSH
35121: LD_INT 3
35123: ARRAY
35124: GREATEREQUAL
35125: AND
35126: NOT
35127: IFFALSE 35131
// exit ;
35129: GO 35718
// if GetBType ( depot ) = b_depot then
35131: LD_VAR 0 1
35135: PPUSH
35136: CALL_OW 266
35140: PUSH
35141: LD_INT 0
35143: EQUAL
35144: IFFALSE 35156
// dist := 28 else
35146: LD_ADDR_VAR 0 14
35150: PUSH
35151: LD_INT 28
35153: ST_TO_ADDR
35154: GO 35164
// dist := 36 ;
35156: LD_ADDR_VAR 0 14
35160: PUSH
35161: LD_INT 36
35163: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35164: LD_VAR 0 1
35168: PPUSH
35169: LD_VAR 0 3
35173: PPUSH
35174: LD_VAR 0 4
35178: PPUSH
35179: CALL_OW 297
35183: PUSH
35184: LD_VAR 0 14
35188: GREATER
35189: IFFALSE 35193
// exit ;
35191: GO 35718
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35193: LD_ADDR_VAR 0 12
35197: PUSH
35198: LD_VAR 0 2
35202: PPUSH
35203: LD_VAR 0 3
35207: PPUSH
35208: LD_VAR 0 4
35212: PPUSH
35213: LD_VAR 0 5
35217: PPUSH
35218: LD_VAR 0 1
35222: PPUSH
35223: CALL_OW 248
35227: PPUSH
35228: LD_INT 0
35230: PPUSH
35231: CALL 35723 0 6
35235: ST_TO_ADDR
// if not hexes then
35236: LD_VAR 0 12
35240: NOT
35241: IFFALSE 35245
// exit ;
35243: GO 35718
// hex := GetHexInfo ( x , y ) ;
35245: LD_ADDR_VAR 0 15
35249: PUSH
35250: LD_VAR 0 3
35254: PPUSH
35255: LD_VAR 0 4
35259: PPUSH
35260: CALL_OW 546
35264: ST_TO_ADDR
// if hex [ 1 ] then
35265: LD_VAR 0 15
35269: PUSH
35270: LD_INT 1
35272: ARRAY
35273: IFFALSE 35277
// exit ;
35275: GO 35718
// height := hex [ 2 ] ;
35277: LD_ADDR_VAR 0 13
35281: PUSH
35282: LD_VAR 0 15
35286: PUSH
35287: LD_INT 2
35289: ARRAY
35290: ST_TO_ADDR
// for i = 1 to hexes do
35291: LD_ADDR_VAR 0 7
35295: PUSH
35296: DOUBLE
35297: LD_INT 1
35299: DEC
35300: ST_TO_ADDR
35301: LD_VAR 0 12
35305: PUSH
35306: FOR_TO
35307: IFFALSE 35637
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35309: LD_VAR 0 12
35313: PUSH
35314: LD_VAR 0 7
35318: ARRAY
35319: PUSH
35320: LD_INT 1
35322: ARRAY
35323: PPUSH
35324: LD_VAR 0 12
35328: PUSH
35329: LD_VAR 0 7
35333: ARRAY
35334: PUSH
35335: LD_INT 2
35337: ARRAY
35338: PPUSH
35339: CALL_OW 488
35343: NOT
35344: PUSH
35345: LD_VAR 0 12
35349: PUSH
35350: LD_VAR 0 7
35354: ARRAY
35355: PUSH
35356: LD_INT 1
35358: ARRAY
35359: PPUSH
35360: LD_VAR 0 12
35364: PUSH
35365: LD_VAR 0 7
35369: ARRAY
35370: PUSH
35371: LD_INT 2
35373: ARRAY
35374: PPUSH
35375: CALL_OW 428
35379: PUSH
35380: LD_INT 0
35382: GREATER
35383: OR
35384: PUSH
35385: LD_VAR 0 12
35389: PUSH
35390: LD_VAR 0 7
35394: ARRAY
35395: PUSH
35396: LD_INT 1
35398: ARRAY
35399: PPUSH
35400: LD_VAR 0 12
35404: PUSH
35405: LD_VAR 0 7
35409: ARRAY
35410: PUSH
35411: LD_INT 2
35413: ARRAY
35414: PPUSH
35415: CALL_OW 351
35419: OR
35420: IFFALSE 35426
// exit ;
35422: POP
35423: POP
35424: GO 35718
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35426: LD_ADDR_VAR 0 8
35430: PUSH
35431: LD_VAR 0 12
35435: PUSH
35436: LD_VAR 0 7
35440: ARRAY
35441: PUSH
35442: LD_INT 1
35444: ARRAY
35445: PPUSH
35446: LD_VAR 0 12
35450: PUSH
35451: LD_VAR 0 7
35455: ARRAY
35456: PUSH
35457: LD_INT 2
35459: ARRAY
35460: PPUSH
35461: CALL_OW 546
35465: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35466: LD_VAR 0 8
35470: PUSH
35471: LD_INT 1
35473: ARRAY
35474: PUSH
35475: LD_VAR 0 8
35479: PUSH
35480: LD_INT 2
35482: ARRAY
35483: PUSH
35484: LD_VAR 0 13
35488: PUSH
35489: LD_INT 2
35491: PLUS
35492: GREATER
35493: OR
35494: PUSH
35495: LD_VAR 0 8
35499: PUSH
35500: LD_INT 2
35502: ARRAY
35503: PUSH
35504: LD_VAR 0 13
35508: PUSH
35509: LD_INT 2
35511: MINUS
35512: LESS
35513: OR
35514: PUSH
35515: LD_VAR 0 8
35519: PUSH
35520: LD_INT 3
35522: ARRAY
35523: PUSH
35524: LD_INT 0
35526: PUSH
35527: LD_INT 8
35529: PUSH
35530: LD_INT 9
35532: PUSH
35533: LD_INT 10
35535: PUSH
35536: LD_INT 11
35538: PUSH
35539: LD_INT 12
35541: PUSH
35542: LD_INT 13
35544: PUSH
35545: LD_INT 16
35547: PUSH
35548: LD_INT 17
35550: PUSH
35551: LD_INT 18
35553: PUSH
35554: LD_INT 19
35556: PUSH
35557: LD_INT 20
35559: PUSH
35560: LD_INT 21
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: IN
35578: NOT
35579: OR
35580: PUSH
35581: LD_VAR 0 8
35585: PUSH
35586: LD_INT 5
35588: ARRAY
35589: NOT
35590: OR
35591: PUSH
35592: LD_VAR 0 8
35596: PUSH
35597: LD_INT 6
35599: ARRAY
35600: PUSH
35601: LD_INT 1
35603: PUSH
35604: LD_INT 2
35606: PUSH
35607: LD_INT 7
35609: PUSH
35610: LD_INT 9
35612: PUSH
35613: LD_INT 10
35615: PUSH
35616: LD_INT 11
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: IN
35627: NOT
35628: OR
35629: IFFALSE 35635
// exit ;
35631: POP
35632: POP
35633: GO 35718
// end ;
35635: GO 35306
35637: POP
35638: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35639: LD_VAR 0 9
35643: PPUSH
35644: LD_VAR 0 3
35648: PPUSH
35649: LD_VAR 0 4
35653: PPUSH
35654: LD_INT 20
35656: PPUSH
35657: CALL 27664 0 4
35661: PUSH
35662: LD_INT 4
35664: ARRAY
35665: IFFALSE 35669
// exit ;
35667: GO 35718
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35669: LD_VAR 0 2
35673: PUSH
35674: LD_INT 29
35676: PUSH
35677: LD_INT 30
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: IN
35684: PUSH
35685: LD_VAR 0 3
35689: PPUSH
35690: LD_VAR 0 4
35694: PPUSH
35695: LD_VAR 0 9
35699: PPUSH
35700: CALL_OW 440
35704: NOT
35705: AND
35706: IFFALSE 35710
// exit ;
35708: GO 35718
// result := true ;
35710: LD_ADDR_VAR 0 6
35714: PUSH
35715: LD_INT 1
35717: ST_TO_ADDR
// end ;
35718: LD_VAR 0 6
35722: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35723: LD_INT 0
35725: PPUSH
35726: PPUSH
35727: PPUSH
35728: PPUSH
35729: PPUSH
35730: PPUSH
35731: PPUSH
35732: PPUSH
35733: PPUSH
35734: PPUSH
35735: PPUSH
35736: PPUSH
35737: PPUSH
35738: PPUSH
35739: PPUSH
35740: PPUSH
35741: PPUSH
35742: PPUSH
35743: PPUSH
35744: PPUSH
35745: PPUSH
35746: PPUSH
35747: PPUSH
35748: PPUSH
35749: PPUSH
35750: PPUSH
35751: PPUSH
35752: PPUSH
35753: PPUSH
35754: PPUSH
35755: PPUSH
35756: PPUSH
35757: PPUSH
35758: PPUSH
35759: PPUSH
35760: PPUSH
35761: PPUSH
35762: PPUSH
35763: PPUSH
35764: PPUSH
35765: PPUSH
35766: PPUSH
35767: PPUSH
35768: PPUSH
35769: PPUSH
35770: PPUSH
35771: PPUSH
35772: PPUSH
35773: PPUSH
35774: PPUSH
35775: PPUSH
35776: PPUSH
35777: PPUSH
35778: PPUSH
35779: PPUSH
35780: PPUSH
35781: PPUSH
35782: PPUSH
// result = [ ] ;
35783: LD_ADDR_VAR 0 7
35787: PUSH
35788: EMPTY
35789: ST_TO_ADDR
// temp_list = [ ] ;
35790: LD_ADDR_VAR 0 9
35794: PUSH
35795: EMPTY
35796: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35797: LD_VAR 0 4
35801: PUSH
35802: LD_INT 0
35804: PUSH
35805: LD_INT 1
35807: PUSH
35808: LD_INT 2
35810: PUSH
35811: LD_INT 3
35813: PUSH
35814: LD_INT 4
35816: PUSH
35817: LD_INT 5
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: IN
35828: NOT
35829: PUSH
35830: LD_VAR 0 1
35834: PUSH
35835: LD_INT 0
35837: PUSH
35838: LD_INT 1
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: IN
35845: PUSH
35846: LD_VAR 0 5
35850: PUSH
35851: LD_INT 1
35853: PUSH
35854: LD_INT 2
35856: PUSH
35857: LD_INT 3
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: LIST
35864: IN
35865: NOT
35866: AND
35867: OR
35868: IFFALSE 35872
// exit ;
35870: GO 54263
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35872: LD_VAR 0 1
35876: PUSH
35877: LD_INT 6
35879: PUSH
35880: LD_INT 7
35882: PUSH
35883: LD_INT 8
35885: PUSH
35886: LD_INT 13
35888: PUSH
35889: LD_INT 12
35891: PUSH
35892: LD_INT 15
35894: PUSH
35895: LD_INT 11
35897: PUSH
35898: LD_INT 14
35900: PUSH
35901: LD_INT 10
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: IN
35915: IFFALSE 35925
// btype = b_lab ;
35917: LD_ADDR_VAR 0 1
35921: PUSH
35922: LD_INT 6
35924: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35925: LD_VAR 0 6
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: LD_INT 1
35935: PUSH
35936: LD_INT 2
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: LIST
35943: IN
35944: NOT
35945: PUSH
35946: LD_VAR 0 1
35950: PUSH
35951: LD_INT 0
35953: PUSH
35954: LD_INT 1
35956: PUSH
35957: LD_INT 2
35959: PUSH
35960: LD_INT 3
35962: PUSH
35963: LD_INT 6
35965: PUSH
35966: LD_INT 36
35968: PUSH
35969: LD_INT 4
35971: PUSH
35972: LD_INT 5
35974: PUSH
35975: LD_INT 31
35977: PUSH
35978: LD_INT 32
35980: PUSH
35981: LD_INT 33
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: IN
35997: NOT
35998: PUSH
35999: LD_VAR 0 6
36003: PUSH
36004: LD_INT 1
36006: EQUAL
36007: AND
36008: OR
36009: PUSH
36010: LD_VAR 0 1
36014: PUSH
36015: LD_INT 2
36017: PUSH
36018: LD_INT 3
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: IN
36025: NOT
36026: PUSH
36027: LD_VAR 0 6
36031: PUSH
36032: LD_INT 2
36034: EQUAL
36035: AND
36036: OR
36037: IFFALSE 36047
// mode = 0 ;
36039: LD_ADDR_VAR 0 6
36043: PUSH
36044: LD_INT 0
36046: ST_TO_ADDR
// case mode of 0 :
36047: LD_VAR 0 6
36051: PUSH
36052: LD_INT 0
36054: DOUBLE
36055: EQUAL
36056: IFTRUE 36060
36058: GO 47513
36060: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36061: LD_ADDR_VAR 0 11
36065: PUSH
36066: LD_INT 0
36068: PUSH
36069: LD_INT 0
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 0
36078: PUSH
36079: LD_INT 1
36081: NEG
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 1
36089: PUSH
36090: LD_INT 0
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 1
36099: PUSH
36100: LD_INT 1
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 0
36109: PUSH
36110: LD_INT 1
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 1
36119: NEG
36120: PUSH
36121: LD_INT 0
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 1
36130: NEG
36131: PUSH
36132: LD_INT 1
36134: NEG
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 1
36142: NEG
36143: PUSH
36144: LD_INT 2
36146: NEG
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: LD_INT 2
36157: NEG
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 1
36165: PUSH
36166: LD_INT 1
36168: NEG
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 1
36176: PUSH
36177: LD_INT 2
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 0
36186: PUSH
36187: LD_INT 2
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 1
36196: NEG
36197: PUSH
36198: LD_INT 1
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 1
36207: PUSH
36208: LD_INT 3
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 0
36217: PUSH
36218: LD_INT 3
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 1
36227: NEG
36228: PUSH
36229: LD_INT 2
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36254: LD_ADDR_VAR 0 12
36258: PUSH
36259: LD_INT 0
36261: PUSH
36262: LD_INT 0
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 0
36271: PUSH
36272: LD_INT 1
36274: NEG
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 1
36282: PUSH
36283: LD_INT 0
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 1
36292: PUSH
36293: LD_INT 1
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 0
36302: PUSH
36303: LD_INT 1
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 1
36312: NEG
36313: PUSH
36314: LD_INT 0
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 1
36323: NEG
36324: PUSH
36325: LD_INT 1
36327: NEG
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 1
36335: PUSH
36336: LD_INT 1
36338: NEG
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 2
36346: PUSH
36347: LD_INT 0
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 2
36356: PUSH
36357: LD_INT 1
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 1
36366: NEG
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 2
36377: NEG
36378: PUSH
36379: LD_INT 0
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 2
36388: NEG
36389: PUSH
36390: LD_INT 1
36392: NEG
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 2
36400: NEG
36401: PUSH
36402: LD_INT 1
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 3
36411: NEG
36412: PUSH
36413: LD_INT 0
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PUSH
36420: LD_INT 3
36422: NEG
36423: PUSH
36424: LD_INT 1
36426: NEG
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36450: LD_ADDR_VAR 0 13
36454: PUSH
36455: LD_INT 0
36457: PUSH
36458: LD_INT 0
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 0
36467: PUSH
36468: LD_INT 1
36470: NEG
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 1
36478: PUSH
36479: LD_INT 0
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 1
36488: PUSH
36489: LD_INT 1
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 0
36498: PUSH
36499: LD_INT 1
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 1
36508: NEG
36509: PUSH
36510: LD_INT 0
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 1
36519: NEG
36520: PUSH
36521: LD_INT 1
36523: NEG
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 1
36531: NEG
36532: PUSH
36533: LD_INT 2
36535: NEG
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 2
36543: PUSH
36544: LD_INT 1
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 2
36553: PUSH
36554: LD_INT 2
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 1
36563: PUSH
36564: LD_INT 2
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 2
36573: NEG
36574: PUSH
36575: LD_INT 1
36577: NEG
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 2
36585: NEG
36586: PUSH
36587: LD_INT 2
36589: NEG
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 2
36597: NEG
36598: PUSH
36599: LD_INT 3
36601: NEG
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 3
36609: NEG
36610: PUSH
36611: LD_INT 2
36613: NEG
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 3
36621: NEG
36622: PUSH
36623: LD_INT 3
36625: NEG
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36649: LD_ADDR_VAR 0 14
36653: PUSH
36654: LD_INT 0
36656: PUSH
36657: LD_INT 0
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 0
36666: PUSH
36667: LD_INT 1
36669: NEG
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 1
36677: PUSH
36678: LD_INT 0
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 1
36687: PUSH
36688: LD_INT 1
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 0
36697: PUSH
36698: LD_INT 1
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 1
36707: NEG
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 1
36718: NEG
36719: PUSH
36720: LD_INT 1
36722: NEG
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 1
36730: NEG
36731: PUSH
36732: LD_INT 2
36734: NEG
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: LD_INT 2
36745: NEG
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 1
36753: PUSH
36754: LD_INT 1
36756: NEG
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 1
36764: PUSH
36765: LD_INT 2
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 0
36774: PUSH
36775: LD_INT 2
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 1
36784: NEG
36785: PUSH
36786: LD_INT 1
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 1
36795: NEG
36796: PUSH
36797: LD_INT 3
36799: NEG
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 0
36807: PUSH
36808: LD_INT 3
36810: NEG
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 1
36818: PUSH
36819: LD_INT 2
36821: NEG
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36845: LD_ADDR_VAR 0 15
36849: PUSH
36850: LD_INT 0
36852: PUSH
36853: LD_INT 0
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 0
36862: PUSH
36863: LD_INT 1
36865: NEG
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 1
36873: PUSH
36874: LD_INT 0
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 1
36883: PUSH
36884: LD_INT 1
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 0
36893: PUSH
36894: LD_INT 1
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 1
36903: NEG
36904: PUSH
36905: LD_INT 0
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 1
36914: NEG
36915: PUSH
36916: LD_INT 1
36918: NEG
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 1
36926: PUSH
36927: LD_INT 1
36929: NEG
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 2
36937: PUSH
36938: LD_INT 0
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 2
36947: PUSH
36948: LD_INT 1
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 1
36957: NEG
36958: PUSH
36959: LD_INT 1
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 2
36968: NEG
36969: PUSH
36970: LD_INT 0
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 2
36979: NEG
36980: PUSH
36981: LD_INT 1
36983: NEG
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 2
36991: PUSH
36992: LD_INT 1
36994: NEG
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 3
37002: PUSH
37003: LD_INT 0
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 3
37012: PUSH
37013: LD_INT 1
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37038: LD_ADDR_VAR 0 16
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: LD_INT 0
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 0
37055: PUSH
37056: LD_INT 1
37058: NEG
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 1
37066: PUSH
37067: LD_INT 0
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 1
37076: PUSH
37077: LD_INT 1
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 0
37086: PUSH
37087: LD_INT 1
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 1
37096: NEG
37097: PUSH
37098: LD_INT 0
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 1
37107: NEG
37108: PUSH
37109: LD_INT 1
37111: NEG
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 1
37119: NEG
37120: PUSH
37121: LD_INT 2
37123: NEG
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 2
37131: PUSH
37132: LD_INT 1
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 2
37141: PUSH
37142: LD_INT 2
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 1
37151: PUSH
37152: LD_INT 2
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 2
37161: NEG
37162: PUSH
37163: LD_INT 1
37165: NEG
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 2
37173: NEG
37174: PUSH
37175: LD_INT 2
37177: NEG
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 3
37185: PUSH
37186: LD_INT 2
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 3
37195: PUSH
37196: LD_INT 3
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 2
37205: PUSH
37206: LD_INT 3
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37231: LD_ADDR_VAR 0 17
37235: PUSH
37236: LD_INT 0
37238: PUSH
37239: LD_INT 0
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 0
37248: PUSH
37249: LD_INT 1
37251: NEG
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 1
37259: PUSH
37260: LD_INT 0
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 1
37269: PUSH
37270: LD_INT 1
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 0
37279: PUSH
37280: LD_INT 1
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 1
37289: NEG
37290: PUSH
37291: LD_INT 0
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 1
37300: NEG
37301: PUSH
37302: LD_INT 1
37304: NEG
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 1
37312: NEG
37313: PUSH
37314: LD_INT 2
37316: NEG
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 0
37324: PUSH
37325: LD_INT 2
37327: NEG
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 1
37335: PUSH
37336: LD_INT 1
37338: NEG
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 2
37346: PUSH
37347: LD_INT 0
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 2
37356: PUSH
37357: LD_INT 1
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 2
37366: PUSH
37367: LD_INT 2
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 1
37376: PUSH
37377: LD_INT 2
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 0
37386: PUSH
37387: LD_INT 2
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 1
37396: NEG
37397: PUSH
37398: LD_INT 1
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 2
37407: NEG
37408: PUSH
37409: LD_INT 0
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 2
37418: NEG
37419: PUSH
37420: LD_INT 1
37422: NEG
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 2
37430: NEG
37431: PUSH
37432: LD_INT 2
37434: NEG
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37461: LD_ADDR_VAR 0 18
37465: PUSH
37466: LD_INT 0
37468: PUSH
37469: LD_INT 0
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 0
37478: PUSH
37479: LD_INT 1
37481: NEG
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 1
37489: PUSH
37490: LD_INT 0
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 1
37499: PUSH
37500: LD_INT 1
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 0
37509: PUSH
37510: LD_INT 1
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 1
37519: NEG
37520: PUSH
37521: LD_INT 0
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 1
37530: NEG
37531: PUSH
37532: LD_INT 1
37534: NEG
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 1
37542: NEG
37543: PUSH
37544: LD_INT 2
37546: NEG
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 0
37554: PUSH
37555: LD_INT 2
37557: NEG
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 1
37565: PUSH
37566: LD_INT 1
37568: NEG
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 2
37576: PUSH
37577: LD_INT 0
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 2
37586: PUSH
37587: LD_INT 1
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 2
37596: PUSH
37597: LD_INT 2
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 1
37606: PUSH
37607: LD_INT 2
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 0
37616: PUSH
37617: LD_INT 2
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 1
37626: NEG
37627: PUSH
37628: LD_INT 1
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 2
37637: NEG
37638: PUSH
37639: LD_INT 0
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 2
37648: NEG
37649: PUSH
37650: LD_INT 1
37652: NEG
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 2
37660: NEG
37661: PUSH
37662: LD_INT 2
37664: NEG
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37691: LD_ADDR_VAR 0 19
37695: PUSH
37696: LD_INT 0
37698: PUSH
37699: LD_INT 0
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 0
37708: PUSH
37709: LD_INT 1
37711: NEG
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 1
37719: PUSH
37720: LD_INT 0
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 1
37729: PUSH
37730: LD_INT 1
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 0
37739: PUSH
37740: LD_INT 1
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 1
37749: NEG
37750: PUSH
37751: LD_INT 0
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 1
37760: NEG
37761: PUSH
37762: LD_INT 1
37764: NEG
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 1
37772: NEG
37773: PUSH
37774: LD_INT 2
37776: NEG
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 0
37784: PUSH
37785: LD_INT 2
37787: NEG
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 1
37795: PUSH
37796: LD_INT 1
37798: NEG
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 2
37806: PUSH
37807: LD_INT 0
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 2
37816: PUSH
37817: LD_INT 1
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 2
37826: PUSH
37827: LD_INT 2
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 1
37836: PUSH
37837: LD_INT 2
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 0
37846: PUSH
37847: LD_INT 2
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 1
37856: NEG
37857: PUSH
37858: LD_INT 1
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 2
37867: NEG
37868: PUSH
37869: LD_INT 0
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 2
37878: NEG
37879: PUSH
37880: LD_INT 1
37882: NEG
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 2
37890: NEG
37891: PUSH
37892: LD_INT 2
37894: NEG
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37921: LD_ADDR_VAR 0 20
37925: PUSH
37926: LD_INT 0
37928: PUSH
37929: LD_INT 0
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 0
37938: PUSH
37939: LD_INT 1
37941: NEG
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 1
37949: PUSH
37950: LD_INT 0
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 1
37959: PUSH
37960: LD_INT 1
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 0
37969: PUSH
37970: LD_INT 1
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 1
37979: NEG
37980: PUSH
37981: LD_INT 0
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 1
37990: NEG
37991: PUSH
37992: LD_INT 1
37994: NEG
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 1
38002: NEG
38003: PUSH
38004: LD_INT 2
38006: NEG
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 0
38014: PUSH
38015: LD_INT 2
38017: NEG
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 1
38025: PUSH
38026: LD_INT 1
38028: NEG
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PUSH
38034: LD_INT 2
38036: PUSH
38037: LD_INT 0
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 2
38046: PUSH
38047: LD_INT 1
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 2
38056: PUSH
38057: LD_INT 2
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 1
38066: PUSH
38067: LD_INT 2
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 0
38076: PUSH
38077: LD_INT 2
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 1
38086: NEG
38087: PUSH
38088: LD_INT 1
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 2
38097: NEG
38098: PUSH
38099: LD_INT 0
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 2
38108: NEG
38109: PUSH
38110: LD_INT 1
38112: NEG
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 2
38120: NEG
38121: PUSH
38122: LD_INT 2
38124: NEG
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38151: LD_ADDR_VAR 0 21
38155: PUSH
38156: LD_INT 0
38158: PUSH
38159: LD_INT 0
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 0
38168: PUSH
38169: LD_INT 1
38171: NEG
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 1
38179: PUSH
38180: LD_INT 0
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 1
38189: PUSH
38190: LD_INT 1
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 0
38199: PUSH
38200: LD_INT 1
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 1
38209: NEG
38210: PUSH
38211: LD_INT 0
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 1
38220: NEG
38221: PUSH
38222: LD_INT 1
38224: NEG
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 1
38232: NEG
38233: PUSH
38234: LD_INT 2
38236: NEG
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 0
38244: PUSH
38245: LD_INT 2
38247: NEG
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 1
38255: PUSH
38256: LD_INT 1
38258: NEG
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 2
38266: PUSH
38267: LD_INT 0
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 2
38276: PUSH
38277: LD_INT 1
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 2
38286: PUSH
38287: LD_INT 2
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 1
38296: PUSH
38297: LD_INT 2
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 0
38306: PUSH
38307: LD_INT 2
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 1
38316: NEG
38317: PUSH
38318: LD_INT 1
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 2
38327: NEG
38328: PUSH
38329: LD_INT 0
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 2
38338: NEG
38339: PUSH
38340: LD_INT 1
38342: NEG
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 2
38350: NEG
38351: PUSH
38352: LD_INT 2
38354: NEG
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38381: LD_ADDR_VAR 0 22
38385: PUSH
38386: LD_INT 0
38388: PUSH
38389: LD_INT 0
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 0
38398: PUSH
38399: LD_INT 1
38401: NEG
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 1
38409: PUSH
38410: LD_INT 0
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 1
38419: PUSH
38420: LD_INT 1
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 0
38429: PUSH
38430: LD_INT 1
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 1
38439: NEG
38440: PUSH
38441: LD_INT 0
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 1
38450: NEG
38451: PUSH
38452: LD_INT 1
38454: NEG
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 1
38462: NEG
38463: PUSH
38464: LD_INT 2
38466: NEG
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 0
38474: PUSH
38475: LD_INT 2
38477: NEG
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 1
38485: PUSH
38486: LD_INT 1
38488: NEG
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 2
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 2
38506: PUSH
38507: LD_INT 1
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 2
38516: PUSH
38517: LD_INT 2
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 1
38526: PUSH
38527: LD_INT 2
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 0
38536: PUSH
38537: LD_INT 2
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 1
38546: NEG
38547: PUSH
38548: LD_INT 1
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 2
38557: NEG
38558: PUSH
38559: LD_INT 0
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 2
38568: NEG
38569: PUSH
38570: LD_INT 1
38572: NEG
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 2
38580: NEG
38581: PUSH
38582: LD_INT 2
38584: NEG
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38611: LD_ADDR_VAR 0 23
38615: PUSH
38616: LD_INT 0
38618: PUSH
38619: LD_INT 0
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 0
38628: PUSH
38629: LD_INT 1
38631: NEG
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 1
38639: PUSH
38640: LD_INT 0
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 1
38649: PUSH
38650: LD_INT 1
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 0
38659: PUSH
38660: LD_INT 1
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 1
38669: NEG
38670: PUSH
38671: LD_INT 0
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 1
38680: NEG
38681: PUSH
38682: LD_INT 1
38684: NEG
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 1
38692: NEG
38693: PUSH
38694: LD_INT 2
38696: NEG
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 0
38704: PUSH
38705: LD_INT 2
38707: NEG
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 1
38715: PUSH
38716: LD_INT 1
38718: NEG
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 2
38726: PUSH
38727: LD_INT 0
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 2
38736: PUSH
38737: LD_INT 1
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 2
38746: PUSH
38747: LD_INT 2
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 1
38756: PUSH
38757: LD_INT 2
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 0
38766: PUSH
38767: LD_INT 2
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 1
38776: NEG
38777: PUSH
38778: LD_INT 1
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 2
38787: NEG
38788: PUSH
38789: LD_INT 0
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 2
38798: NEG
38799: PUSH
38800: LD_INT 1
38802: NEG
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 2
38810: NEG
38811: PUSH
38812: LD_INT 2
38814: NEG
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 2
38822: NEG
38823: PUSH
38824: LD_INT 3
38826: NEG
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 1
38834: NEG
38835: PUSH
38836: LD_INT 3
38838: NEG
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: LD_INT 2
38849: NEG
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 2
38857: PUSH
38858: LD_INT 1
38860: NEG
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38891: LD_ADDR_VAR 0 24
38895: PUSH
38896: LD_INT 0
38898: PUSH
38899: LD_INT 0
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 0
38908: PUSH
38909: LD_INT 1
38911: NEG
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 1
38919: PUSH
38920: LD_INT 0
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 1
38929: PUSH
38930: LD_INT 1
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 0
38939: PUSH
38940: LD_INT 1
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 1
38949: NEG
38950: PUSH
38951: LD_INT 0
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 1
38960: NEG
38961: PUSH
38962: LD_INT 1
38964: NEG
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 1
38972: NEG
38973: PUSH
38974: LD_INT 2
38976: NEG
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 0
38984: PUSH
38985: LD_INT 2
38987: NEG
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 1
38995: PUSH
38996: LD_INT 1
38998: NEG
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 2
39006: PUSH
39007: LD_INT 0
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 2
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 2
39026: PUSH
39027: LD_INT 2
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 1
39036: PUSH
39037: LD_INT 2
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 0
39046: PUSH
39047: LD_INT 2
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 1
39056: NEG
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 2
39067: NEG
39068: PUSH
39069: LD_INT 0
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 2
39078: NEG
39079: PUSH
39080: LD_INT 1
39082: NEG
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 2
39090: NEG
39091: PUSH
39092: LD_INT 2
39094: NEG
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 1
39102: PUSH
39103: LD_INT 2
39105: NEG
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 2
39113: PUSH
39114: LD_INT 1
39116: NEG
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 3
39124: PUSH
39125: LD_INT 1
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 3
39134: PUSH
39135: LD_INT 2
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39167: LD_ADDR_VAR 0 25
39171: PUSH
39172: LD_INT 0
39174: PUSH
39175: LD_INT 0
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 0
39184: PUSH
39185: LD_INT 1
39187: NEG
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 1
39195: PUSH
39196: LD_INT 0
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 1
39205: PUSH
39206: LD_INT 1
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 0
39215: PUSH
39216: LD_INT 1
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 1
39225: NEG
39226: PUSH
39227: LD_INT 0
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 1
39236: NEG
39237: PUSH
39238: LD_INT 1
39240: NEG
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 1
39248: NEG
39249: PUSH
39250: LD_INT 2
39252: NEG
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 0
39260: PUSH
39261: LD_INT 2
39263: NEG
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 1
39271: PUSH
39272: LD_INT 1
39274: NEG
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 2
39282: PUSH
39283: LD_INT 0
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 2
39292: PUSH
39293: LD_INT 1
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 2
39302: PUSH
39303: LD_INT 2
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 1
39312: PUSH
39313: LD_INT 2
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 0
39322: PUSH
39323: LD_INT 2
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 1
39332: NEG
39333: PUSH
39334: LD_INT 1
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 2
39343: NEG
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 2
39354: NEG
39355: PUSH
39356: LD_INT 1
39358: NEG
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 2
39366: NEG
39367: PUSH
39368: LD_INT 2
39370: NEG
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 3
39378: PUSH
39379: LD_INT 1
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 3
39388: PUSH
39389: LD_INT 2
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 2
39398: PUSH
39399: LD_INT 3
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 1
39408: PUSH
39409: LD_INT 3
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39441: LD_ADDR_VAR 0 26
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: LD_INT 0
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 0
39458: PUSH
39459: LD_INT 1
39461: NEG
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 1
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 1
39479: PUSH
39480: LD_INT 1
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 0
39489: PUSH
39490: LD_INT 1
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 1
39499: NEG
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 1
39510: NEG
39511: PUSH
39512: LD_INT 1
39514: NEG
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 1
39522: NEG
39523: PUSH
39524: LD_INT 2
39526: NEG
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 0
39534: PUSH
39535: LD_INT 2
39537: NEG
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 1
39545: PUSH
39546: LD_INT 1
39548: NEG
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 2
39556: PUSH
39557: LD_INT 0
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 2
39566: PUSH
39567: LD_INT 1
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 2
39576: PUSH
39577: LD_INT 2
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 1
39586: PUSH
39587: LD_INT 2
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 0
39596: PUSH
39597: LD_INT 2
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 1
39606: NEG
39607: PUSH
39608: LD_INT 1
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 2
39617: NEG
39618: PUSH
39619: LD_INT 0
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 2
39628: NEG
39629: PUSH
39630: LD_INT 1
39632: NEG
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 2
39640: NEG
39641: PUSH
39642: LD_INT 2
39644: NEG
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 2
39652: PUSH
39653: LD_INT 3
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: LD_INT 3
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 1
39672: NEG
39673: PUSH
39674: LD_INT 2
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 2
39683: NEG
39684: PUSH
39685: LD_INT 1
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39717: LD_ADDR_VAR 0 27
39721: PUSH
39722: LD_INT 0
39724: PUSH
39725: LD_INT 0
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 0
39734: PUSH
39735: LD_INT 1
39737: NEG
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 1
39745: PUSH
39746: LD_INT 0
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 1
39755: PUSH
39756: LD_INT 1
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 0
39765: PUSH
39766: LD_INT 1
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 1
39775: NEG
39776: PUSH
39777: LD_INT 0
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 1
39786: NEG
39787: PUSH
39788: LD_INT 1
39790: NEG
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 1
39798: NEG
39799: PUSH
39800: LD_INT 2
39802: NEG
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 0
39810: PUSH
39811: LD_INT 2
39813: NEG
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 1
39821: PUSH
39822: LD_INT 1
39824: NEG
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 2
39832: PUSH
39833: LD_INT 0
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 2
39842: PUSH
39843: LD_INT 1
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 2
39852: PUSH
39853: LD_INT 2
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 1
39862: PUSH
39863: LD_INT 2
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 0
39872: PUSH
39873: LD_INT 2
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 1
39882: NEG
39883: PUSH
39884: LD_INT 1
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 2
39893: NEG
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 2
39904: NEG
39905: PUSH
39906: LD_INT 1
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 2
39916: NEG
39917: PUSH
39918: LD_INT 2
39920: NEG
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 1
39928: NEG
39929: PUSH
39930: LD_INT 2
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 2
39939: NEG
39940: PUSH
39941: LD_INT 1
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 3
39950: NEG
39951: PUSH
39952: LD_INT 1
39954: NEG
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 3
39962: NEG
39963: PUSH
39964: LD_INT 2
39966: NEG
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39997: LD_ADDR_VAR 0 28
40001: PUSH
40002: LD_INT 0
40004: PUSH
40005: LD_INT 0
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 0
40014: PUSH
40015: LD_INT 1
40017: NEG
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 1
40025: PUSH
40026: LD_INT 0
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 1
40035: PUSH
40036: LD_INT 1
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 0
40045: PUSH
40046: LD_INT 1
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 1
40055: NEG
40056: PUSH
40057: LD_INT 0
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 1
40066: NEG
40067: PUSH
40068: LD_INT 1
40070: NEG
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 1
40078: NEG
40079: PUSH
40080: LD_INT 2
40082: NEG
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 0
40090: PUSH
40091: LD_INT 2
40093: NEG
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 1
40101: PUSH
40102: LD_INT 1
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 2
40112: PUSH
40113: LD_INT 0
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 2
40122: PUSH
40123: LD_INT 1
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 2
40132: PUSH
40133: LD_INT 2
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 1
40142: PUSH
40143: LD_INT 2
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 0
40152: PUSH
40153: LD_INT 2
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 1
40162: NEG
40163: PUSH
40164: LD_INT 1
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 2
40173: NEG
40174: PUSH
40175: LD_INT 0
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 2
40184: NEG
40185: PUSH
40186: LD_INT 1
40188: NEG
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 2
40196: NEG
40197: PUSH
40198: LD_INT 2
40200: NEG
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 2
40208: NEG
40209: PUSH
40210: LD_INT 3
40212: NEG
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 1
40220: NEG
40221: PUSH
40222: LD_INT 3
40224: NEG
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 3
40232: NEG
40233: PUSH
40234: LD_INT 1
40236: NEG
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 3
40244: NEG
40245: PUSH
40246: LD_INT 2
40248: NEG
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40279: LD_ADDR_VAR 0 29
40283: PUSH
40284: LD_INT 0
40286: PUSH
40287: LD_INT 0
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 0
40296: PUSH
40297: LD_INT 1
40299: NEG
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 1
40307: PUSH
40308: LD_INT 0
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 1
40317: PUSH
40318: LD_INT 1
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 0
40327: PUSH
40328: LD_INT 1
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: LD_INT 0
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 1
40348: NEG
40349: PUSH
40350: LD_INT 1
40352: NEG
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 1
40360: NEG
40361: PUSH
40362: LD_INT 2
40364: NEG
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 0
40372: PUSH
40373: LD_INT 2
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 1
40383: PUSH
40384: LD_INT 1
40386: NEG
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 2
40394: PUSH
40395: LD_INT 0
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 2
40404: PUSH
40405: LD_INT 1
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 1
40414: PUSH
40415: LD_INT 2
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 0
40424: PUSH
40425: LD_INT 2
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 1
40434: NEG
40435: PUSH
40436: LD_INT 1
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 2
40445: NEG
40446: PUSH
40447: LD_INT 1
40449: NEG
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 2
40457: NEG
40458: PUSH
40459: LD_INT 2
40461: NEG
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 2
40469: NEG
40470: PUSH
40471: LD_INT 3
40473: NEG
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 2
40481: PUSH
40482: LD_INT 1
40484: NEG
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 3
40492: PUSH
40493: LD_INT 1
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 1
40502: PUSH
40503: LD_INT 3
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: LD_INT 2
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 3
40523: NEG
40524: PUSH
40525: LD_INT 2
40527: NEG
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40558: LD_ADDR_VAR 0 30
40562: PUSH
40563: LD_INT 0
40565: PUSH
40566: LD_INT 0
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 0
40575: PUSH
40576: LD_INT 1
40578: NEG
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 1
40586: PUSH
40587: LD_INT 0
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 1
40596: PUSH
40597: LD_INT 1
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 0
40606: PUSH
40607: LD_INT 1
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 1
40616: NEG
40617: PUSH
40618: LD_INT 0
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 1
40627: NEG
40628: PUSH
40629: LD_INT 1
40631: NEG
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 1
40639: NEG
40640: PUSH
40641: LD_INT 2
40643: NEG
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 0
40651: PUSH
40652: LD_INT 2
40654: NEG
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 1
40662: PUSH
40663: LD_INT 1
40665: NEG
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 2
40673: PUSH
40674: LD_INT 0
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 2
40683: PUSH
40684: LD_INT 1
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 2
40693: PUSH
40694: LD_INT 2
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 1
40703: PUSH
40704: LD_INT 2
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 1
40713: NEG
40714: PUSH
40715: LD_INT 1
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 2
40724: NEG
40725: PUSH
40726: LD_INT 0
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 2
40735: NEG
40736: PUSH
40737: LD_INT 1
40739: NEG
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 1
40747: NEG
40748: PUSH
40749: LD_INT 3
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 1
40759: PUSH
40760: LD_INT 2
40762: NEG
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 3
40770: PUSH
40771: LD_INT 2
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 2
40780: PUSH
40781: LD_INT 3
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 2
40790: NEG
40791: PUSH
40792: LD_INT 1
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 3
40801: NEG
40802: PUSH
40803: LD_INT 1
40805: NEG
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40836: LD_ADDR_VAR 0 31
40840: PUSH
40841: LD_INT 0
40843: PUSH
40844: LD_INT 0
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 0
40853: PUSH
40854: LD_INT 1
40856: NEG
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 1
40864: PUSH
40865: LD_INT 0
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 1
40874: PUSH
40875: LD_INT 1
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 0
40884: PUSH
40885: LD_INT 1
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 1
40894: NEG
40895: PUSH
40896: LD_INT 0
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 1
40905: NEG
40906: PUSH
40907: LD_INT 1
40909: NEG
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 1
40917: NEG
40918: PUSH
40919: LD_INT 2
40921: NEG
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 1
40929: PUSH
40930: LD_INT 1
40932: NEG
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 2
40940: PUSH
40941: LD_INT 0
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 2
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 2
40960: PUSH
40961: LD_INT 2
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 1
40970: PUSH
40971: LD_INT 2
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 0
40980: PUSH
40981: LD_INT 2
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 1
40990: NEG
40991: PUSH
40992: LD_INT 1
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 2
41001: NEG
41002: PUSH
41003: LD_INT 1
41005: NEG
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 2
41013: NEG
41014: PUSH
41015: LD_INT 2
41017: NEG
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 2
41025: NEG
41026: PUSH
41027: LD_INT 3
41029: NEG
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 2
41037: PUSH
41038: LD_INT 1
41040: NEG
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 3
41048: PUSH
41049: LD_INT 1
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 1
41058: PUSH
41059: LD_INT 3
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 1
41068: NEG
41069: PUSH
41070: LD_INT 2
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 3
41079: NEG
41080: PUSH
41081: LD_INT 2
41083: NEG
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41114: LD_ADDR_VAR 0 32
41118: PUSH
41119: LD_INT 0
41121: PUSH
41122: LD_INT 0
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 0
41131: PUSH
41132: LD_INT 1
41134: NEG
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 1
41142: PUSH
41143: LD_INT 0
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 1
41152: PUSH
41153: LD_INT 1
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: LD_INT 1
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 1
41172: NEG
41173: PUSH
41174: LD_INT 0
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 1
41183: NEG
41184: PUSH
41185: LD_INT 1
41187: NEG
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 1
41195: NEG
41196: PUSH
41197: LD_INT 2
41199: NEG
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: LD_INT 2
41210: NEG
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 1
41218: PUSH
41219: LD_INT 1
41221: NEG
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 2
41229: PUSH
41230: LD_INT 1
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 2
41239: PUSH
41240: LD_INT 2
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 1
41249: PUSH
41250: LD_INT 2
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 0
41259: PUSH
41260: LD_INT 2
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 1
41269: NEG
41270: PUSH
41271: LD_INT 1
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 2
41280: NEG
41281: PUSH
41282: LD_INT 0
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 2
41291: NEG
41292: PUSH
41293: LD_INT 1
41295: NEG
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 1
41303: NEG
41304: PUSH
41305: LD_INT 3
41307: NEG
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 1
41315: PUSH
41316: LD_INT 2
41318: NEG
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 3
41326: PUSH
41327: LD_INT 2
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 2
41336: PUSH
41337: LD_INT 3
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 2
41346: NEG
41347: PUSH
41348: LD_INT 1
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 3
41357: NEG
41358: PUSH
41359: LD_INT 1
41361: NEG
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41392: LD_ADDR_VAR 0 33
41396: PUSH
41397: LD_INT 0
41399: PUSH
41400: LD_INT 0
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 0
41409: PUSH
41410: LD_INT 1
41412: NEG
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 1
41420: PUSH
41421: LD_INT 0
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 1
41430: PUSH
41431: LD_INT 1
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 0
41440: PUSH
41441: LD_INT 1
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 1
41450: NEG
41451: PUSH
41452: LD_INT 0
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 1
41461: NEG
41462: PUSH
41463: LD_INT 1
41465: NEG
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 1
41473: NEG
41474: PUSH
41475: LD_INT 2
41477: NEG
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 1
41485: PUSH
41486: LD_INT 1
41488: NEG
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 2
41496: PUSH
41497: LD_INT 0
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 2
41506: PUSH
41507: LD_INT 1
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 1
41516: PUSH
41517: LD_INT 2
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 0
41526: PUSH
41527: LD_INT 2
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 1
41536: NEG
41537: PUSH
41538: LD_INT 1
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 2
41547: NEG
41548: PUSH
41549: LD_INT 0
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 2
41558: NEG
41559: PUSH
41560: LD_INT 1
41562: NEG
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 2
41570: NEG
41571: PUSH
41572: LD_INT 2
41574: NEG
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 2
41582: NEG
41583: PUSH
41584: LD_INT 3
41586: NEG
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 2
41594: PUSH
41595: LD_INT 1
41597: NEG
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 3
41605: PUSH
41606: LD_INT 1
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 1
41615: PUSH
41616: LD_INT 3
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 1
41625: NEG
41626: PUSH
41627: LD_INT 2
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 3
41636: NEG
41637: PUSH
41638: LD_INT 2
41640: NEG
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41671: LD_ADDR_VAR 0 34
41675: PUSH
41676: LD_INT 0
41678: PUSH
41679: LD_INT 0
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: LD_INT 1
41691: NEG
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 1
41699: PUSH
41700: LD_INT 0
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: LD_INT 1
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 0
41719: PUSH
41720: LD_INT 1
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 1
41729: NEG
41730: PUSH
41731: LD_INT 0
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 1
41740: NEG
41741: PUSH
41742: LD_INT 1
41744: NEG
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 1
41752: NEG
41753: PUSH
41754: LD_INT 2
41756: NEG
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: LD_INT 2
41767: NEG
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 1
41775: PUSH
41776: LD_INT 1
41778: NEG
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 2
41786: PUSH
41787: LD_INT 1
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 2
41796: PUSH
41797: LD_INT 2
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 1
41806: PUSH
41807: LD_INT 2
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 1
41816: NEG
41817: PUSH
41818: LD_INT 1
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 2
41827: NEG
41828: PUSH
41829: LD_INT 0
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 2
41838: NEG
41839: PUSH
41840: LD_INT 1
41842: NEG
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 2
41850: NEG
41851: PUSH
41852: LD_INT 2
41854: NEG
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 1
41862: NEG
41863: PUSH
41864: LD_INT 3
41866: NEG
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 1
41874: PUSH
41875: LD_INT 2
41877: NEG
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 3
41885: PUSH
41886: LD_INT 2
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 2
41895: PUSH
41896: LD_INT 3
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 2
41905: NEG
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 3
41916: NEG
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41951: LD_ADDR_VAR 0 35
41955: PUSH
41956: LD_INT 0
41958: PUSH
41959: LD_INT 0
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 1
41979: PUSH
41980: LD_INT 0
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 1
41989: PUSH
41990: LD_INT 1
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 0
41999: PUSH
42000: LD_INT 1
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 1
42009: NEG
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 1
42020: NEG
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 2
42032: PUSH
42033: LD_INT 1
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 2
42042: NEG
42043: PUSH
42044: LD_INT 1
42046: NEG
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42063: LD_ADDR_VAR 0 36
42067: PUSH
42068: LD_INT 0
42070: PUSH
42071: LD_INT 0
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 0
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 1
42091: PUSH
42092: LD_INT 0
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 1
42101: PUSH
42102: LD_INT 1
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: LD_INT 1
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 1
42121: NEG
42122: PUSH
42123: LD_INT 0
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 1
42132: NEG
42133: PUSH
42134: LD_INT 1
42136: NEG
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 1
42144: NEG
42145: PUSH
42146: LD_INT 2
42148: NEG
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: LD_INT 2
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42175: LD_ADDR_VAR 0 37
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: LD_INT 0
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 0
42192: PUSH
42193: LD_INT 1
42195: NEG
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 1
42203: PUSH
42204: LD_INT 0
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 1
42213: PUSH
42214: LD_INT 1
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 0
42223: PUSH
42224: LD_INT 1
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 1
42233: NEG
42234: PUSH
42235: LD_INT 0
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 1
42244: NEG
42245: PUSH
42246: LD_INT 1
42248: NEG
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 1
42256: PUSH
42257: LD_INT 1
42259: NEG
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 1
42267: NEG
42268: PUSH
42269: LD_INT 1
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42287: LD_ADDR_VAR 0 38
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: LD_INT 0
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 0
42304: PUSH
42305: LD_INT 1
42307: NEG
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: LD_INT 0
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 1
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: LD_INT 1
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 1
42345: NEG
42346: PUSH
42347: LD_INT 0
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 1
42356: NEG
42357: PUSH
42358: LD_INT 1
42360: NEG
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 2
42368: PUSH
42369: LD_INT 1
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 2
42378: NEG
42379: PUSH
42380: LD_INT 1
42382: NEG
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42399: LD_ADDR_VAR 0 39
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: LD_INT 0
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 0
42416: PUSH
42417: LD_INT 1
42419: NEG
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 1
42427: PUSH
42428: LD_INT 0
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 1
42437: PUSH
42438: LD_INT 1
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 0
42447: PUSH
42448: LD_INT 1
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 1
42457: NEG
42458: PUSH
42459: LD_INT 0
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 1
42468: NEG
42469: PUSH
42470: LD_INT 1
42472: NEG
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 1
42480: NEG
42481: PUSH
42482: LD_INT 2
42484: NEG
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 1
42492: PUSH
42493: LD_INT 2
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42511: LD_ADDR_VAR 0 40
42515: PUSH
42516: LD_INT 0
42518: PUSH
42519: LD_INT 0
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: LD_INT 1
42531: NEG
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 1
42539: PUSH
42540: LD_INT 0
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 1
42549: PUSH
42550: LD_INT 1
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 0
42559: PUSH
42560: LD_INT 1
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 1
42569: NEG
42570: PUSH
42571: LD_INT 0
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 1
42580: NEG
42581: PUSH
42582: LD_INT 1
42584: NEG
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 1
42592: PUSH
42593: LD_INT 1
42595: NEG
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 1
42603: NEG
42604: PUSH
42605: LD_INT 1
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42623: LD_ADDR_VAR 0 41
42627: PUSH
42628: LD_INT 0
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 0
42640: PUSH
42641: LD_INT 1
42643: NEG
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 1
42651: PUSH
42652: LD_INT 0
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 1
42661: PUSH
42662: LD_INT 1
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 0
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 1
42681: NEG
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 1
42692: NEG
42693: PUSH
42694: LD_INT 1
42696: NEG
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 1
42704: NEG
42705: PUSH
42706: LD_INT 2
42708: NEG
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 1
42716: PUSH
42717: LD_INT 1
42719: NEG
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 2
42727: PUSH
42728: LD_INT 0
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 2
42737: PUSH
42738: LD_INT 1
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 2
42747: PUSH
42748: LD_INT 2
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 1
42757: PUSH
42758: LD_INT 2
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 1
42767: NEG
42768: PUSH
42769: LD_INT 1
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 2
42778: NEG
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 2
42789: NEG
42790: PUSH
42791: LD_INT 1
42793: NEG
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 2
42801: NEG
42802: PUSH
42803: LD_INT 2
42805: NEG
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 2
42813: NEG
42814: PUSH
42815: LD_INT 3
42817: NEG
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 2
42825: PUSH
42826: LD_INT 1
42828: NEG
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 3
42836: PUSH
42837: LD_INT 0
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 3
42846: PUSH
42847: LD_INT 1
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 3
42856: PUSH
42857: LD_INT 2
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 3
42866: PUSH
42867: LD_INT 3
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 2
42876: PUSH
42877: LD_INT 3
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 2
42886: NEG
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 3
42897: NEG
42898: PUSH
42899: LD_INT 0
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 3
42908: NEG
42909: PUSH
42910: LD_INT 1
42912: NEG
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 3
42920: NEG
42921: PUSH
42922: LD_INT 2
42924: NEG
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 3
42932: NEG
42933: PUSH
42934: LD_INT 3
42936: NEG
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42973: LD_ADDR_VAR 0 42
42977: PUSH
42978: LD_INT 0
42980: PUSH
42981: LD_INT 0
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 0
42990: PUSH
42991: LD_INT 1
42993: NEG
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 1
43001: PUSH
43002: LD_INT 0
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 1
43011: PUSH
43012: LD_INT 1
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 0
43021: PUSH
43022: LD_INT 1
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 1
43031: NEG
43032: PUSH
43033: LD_INT 0
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 1
43042: NEG
43043: PUSH
43044: LD_INT 1
43046: NEG
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 1
43054: NEG
43055: PUSH
43056: LD_INT 2
43058: NEG
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 0
43066: PUSH
43067: LD_INT 2
43069: NEG
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 1
43077: PUSH
43078: LD_INT 1
43080: NEG
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 2
43088: PUSH
43089: LD_INT 1
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 2
43098: PUSH
43099: LD_INT 2
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 1
43108: PUSH
43109: LD_INT 2
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: LD_INT 2
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 1
43128: NEG
43129: PUSH
43130: LD_INT 1
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 2
43139: NEG
43140: PUSH
43141: LD_INT 1
43143: NEG
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 2
43151: NEG
43152: PUSH
43153: LD_INT 2
43155: NEG
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 2
43163: NEG
43164: PUSH
43165: LD_INT 3
43167: NEG
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 1
43175: NEG
43176: PUSH
43177: LD_INT 3
43179: NEG
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 0
43187: PUSH
43188: LD_INT 3
43190: NEG
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 1
43198: PUSH
43199: LD_INT 2
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 3
43209: PUSH
43210: LD_INT 2
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 3
43219: PUSH
43220: LD_INT 3
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 2
43229: PUSH
43230: LD_INT 3
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 1
43239: PUSH
43240: LD_INT 3
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: LD_INT 3
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: PUSH
43261: LD_INT 2
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 3
43270: NEG
43271: PUSH
43272: LD_INT 2
43274: NEG
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 3
43282: NEG
43283: PUSH
43284: LD_INT 3
43286: NEG
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43323: LD_ADDR_VAR 0 43
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: LD_INT 0
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 0
43340: PUSH
43341: LD_INT 1
43343: NEG
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 1
43351: PUSH
43352: LD_INT 0
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 1
43361: PUSH
43362: LD_INT 1
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 0
43371: PUSH
43372: LD_INT 1
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 1
43381: NEG
43382: PUSH
43383: LD_INT 0
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 1
43392: NEG
43393: PUSH
43394: LD_INT 1
43396: NEG
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 1
43404: NEG
43405: PUSH
43406: LD_INT 2
43408: NEG
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 0
43416: PUSH
43417: LD_INT 2
43419: NEG
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 1
43427: PUSH
43428: LD_INT 1
43430: NEG
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 2
43438: PUSH
43439: LD_INT 0
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 2
43448: PUSH
43449: LD_INT 1
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 1
43458: PUSH
43459: LD_INT 2
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 0
43468: PUSH
43469: LD_INT 2
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 1
43478: NEG
43479: PUSH
43480: LD_INT 1
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 2
43489: NEG
43490: PUSH
43491: LD_INT 0
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 2
43500: NEG
43501: PUSH
43502: LD_INT 1
43504: NEG
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 1
43512: NEG
43513: PUSH
43514: LD_INT 3
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: LD_INT 3
43527: NEG
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 1
43535: PUSH
43536: LD_INT 2
43538: NEG
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 2
43546: PUSH
43547: LD_INT 1
43549: NEG
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 3
43557: PUSH
43558: LD_INT 0
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 3
43567: PUSH
43568: LD_INT 1
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 1
43577: PUSH
43578: LD_INT 3
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 0
43587: PUSH
43588: LD_INT 3
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 1
43597: NEG
43598: PUSH
43599: LD_INT 2
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 2
43608: NEG
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 3
43619: NEG
43620: PUSH
43621: LD_INT 0
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 3
43630: NEG
43631: PUSH
43632: LD_INT 1
43634: NEG
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43671: LD_ADDR_VAR 0 44
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: LD_INT 0
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 0
43688: PUSH
43689: LD_INT 1
43691: NEG
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 1
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 1
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: LD_INT 1
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 1
43729: NEG
43730: PUSH
43731: LD_INT 0
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 1
43740: NEG
43741: PUSH
43742: LD_INT 1
43744: NEG
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 1
43752: NEG
43753: PUSH
43754: LD_INT 2
43756: NEG
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 1
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 2
43775: PUSH
43776: LD_INT 0
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 2
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 2
43795: PUSH
43796: LD_INT 2
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 1
43805: PUSH
43806: LD_INT 2
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 1
43815: NEG
43816: PUSH
43817: LD_INT 1
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 2
43826: NEG
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 2
43837: NEG
43838: PUSH
43839: LD_INT 1
43841: NEG
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 2
43849: NEG
43850: PUSH
43851: LD_INT 2
43853: NEG
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 2
43861: NEG
43862: PUSH
43863: LD_INT 3
43865: NEG
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 2
43873: PUSH
43874: LD_INT 1
43876: NEG
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 3
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 3
43894: PUSH
43895: LD_INT 1
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 3
43904: PUSH
43905: LD_INT 2
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 3
43914: PUSH
43915: LD_INT 3
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 2
43924: PUSH
43925: LD_INT 3
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 2
43934: NEG
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 3
43945: NEG
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 3
43956: NEG
43957: PUSH
43958: LD_INT 1
43960: NEG
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 3
43968: NEG
43969: PUSH
43970: LD_INT 2
43972: NEG
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 3
43980: NEG
43981: PUSH
43982: LD_INT 3
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44021: LD_ADDR_VAR 0 45
44025: PUSH
44026: LD_INT 0
44028: PUSH
44029: LD_INT 0
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 0
44038: PUSH
44039: LD_INT 1
44041: NEG
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 1
44049: PUSH
44050: LD_INT 0
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 1
44059: PUSH
44060: LD_INT 1
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 0
44069: PUSH
44070: LD_INT 1
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: NEG
44080: PUSH
44081: LD_INT 0
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 1
44090: NEG
44091: PUSH
44092: LD_INT 1
44094: NEG
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 1
44102: NEG
44103: PUSH
44104: LD_INT 2
44106: NEG
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 0
44114: PUSH
44115: LD_INT 2
44117: NEG
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 1
44125: PUSH
44126: LD_INT 1
44128: NEG
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 2
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 2
44146: PUSH
44147: LD_INT 2
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 1
44156: PUSH
44157: LD_INT 2
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: LD_INT 2
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 1
44176: NEG
44177: PUSH
44178: LD_INT 1
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 2
44187: NEG
44188: PUSH
44189: LD_INT 1
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 2
44199: NEG
44200: PUSH
44201: LD_INT 2
44203: NEG
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 2
44211: NEG
44212: PUSH
44213: LD_INT 3
44215: NEG
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 1
44223: NEG
44224: PUSH
44225: LD_INT 3
44227: NEG
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 0
44235: PUSH
44236: LD_INT 3
44238: NEG
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 1
44246: PUSH
44247: LD_INT 2
44249: NEG
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 3
44257: PUSH
44258: LD_INT 2
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 3
44267: PUSH
44268: LD_INT 3
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 2
44277: PUSH
44278: LD_INT 3
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 1
44287: PUSH
44288: LD_INT 3
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: LD_INT 3
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: LD_INT 2
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 3
44318: NEG
44319: PUSH
44320: LD_INT 2
44322: NEG
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 3
44330: NEG
44331: PUSH
44332: LD_INT 3
44334: NEG
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44371: LD_ADDR_VAR 0 46
44375: PUSH
44376: LD_INT 0
44378: PUSH
44379: LD_INT 0
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: LD_INT 1
44391: NEG
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 1
44399: PUSH
44400: LD_INT 0
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 1
44409: PUSH
44410: LD_INT 1
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: LD_INT 1
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 1
44429: NEG
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 1
44440: NEG
44441: PUSH
44442: LD_INT 1
44444: NEG
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: NEG
44453: PUSH
44454: LD_INT 2
44456: NEG
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: LD_INT 2
44467: NEG
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 2
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 2
44496: PUSH
44497: LD_INT 1
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 1
44506: PUSH
44507: LD_INT 2
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 0
44516: PUSH
44517: LD_INT 2
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 1
44526: NEG
44527: PUSH
44528: LD_INT 1
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 2
44537: NEG
44538: PUSH
44539: LD_INT 0
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 2
44548: NEG
44549: PUSH
44550: LD_INT 1
44552: NEG
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 1
44560: NEG
44561: PUSH
44562: LD_INT 3
44564: NEG
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 0
44572: PUSH
44573: LD_INT 3
44575: NEG
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 1
44583: PUSH
44584: LD_INT 2
44586: NEG
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 2
44594: PUSH
44595: LD_INT 1
44597: NEG
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 3
44605: PUSH
44606: LD_INT 0
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 3
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: LD_INT 3
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: LD_INT 3
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: LD_INT 2
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 2
44656: NEG
44657: PUSH
44658: LD_INT 1
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 3
44667: NEG
44668: PUSH
44669: LD_INT 0
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 3
44678: NEG
44679: PUSH
44680: LD_INT 1
44682: NEG
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44719: LD_ADDR_VAR 0 47
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: LD_INT 0
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 0
44736: PUSH
44737: LD_INT 1
44739: NEG
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 1
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 1
44757: PUSH
44758: LD_INT 1
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: LD_INT 1
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 1
44777: NEG
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 1
44788: NEG
44789: PUSH
44790: LD_INT 1
44792: NEG
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 1
44800: NEG
44801: PUSH
44802: LD_INT 2
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: LD_INT 2
44815: NEG
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 1
44823: PUSH
44824: LD_INT 1
44826: NEG
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 2
44834: NEG
44835: PUSH
44836: LD_INT 1
44838: NEG
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 2
44846: NEG
44847: PUSH
44848: LD_INT 2
44850: NEG
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44870: LD_ADDR_VAR 0 48
44874: PUSH
44875: LD_INT 0
44877: PUSH
44878: LD_INT 0
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: LD_INT 1
44890: NEG
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 1
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 1
44908: PUSH
44909: LD_INT 1
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 0
44918: PUSH
44919: LD_INT 1
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 1
44928: NEG
44929: PUSH
44930: LD_INT 0
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 1
44939: NEG
44940: PUSH
44941: LD_INT 1
44943: NEG
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 1
44951: NEG
44952: PUSH
44953: LD_INT 2
44955: NEG
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 0
44963: PUSH
44964: LD_INT 2
44966: NEG
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 1
44974: PUSH
44975: LD_INT 1
44977: NEG
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 2
44985: PUSH
44986: LD_INT 0
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 2
44995: PUSH
44996: LD_INT 1
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45017: LD_ADDR_VAR 0 49
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 0
45034: PUSH
45035: LD_INT 1
45037: NEG
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 1
45045: PUSH
45046: LD_INT 0
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: PUSH
45056: LD_INT 1
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: LD_INT 1
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 1
45075: NEG
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 1
45086: NEG
45087: PUSH
45088: LD_INT 1
45090: NEG
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: LD_INT 1
45101: NEG
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 2
45109: PUSH
45110: LD_INT 0
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 2
45119: PUSH
45120: LD_INT 1
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 2
45129: PUSH
45130: LD_INT 2
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: LD_INT 2
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45161: LD_ADDR_VAR 0 50
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 0
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 1
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 1
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 0
45209: PUSH
45210: LD_INT 1
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 2
45242: PUSH
45243: LD_INT 1
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 2
45252: PUSH
45253: LD_INT 2
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 1
45262: PUSH
45263: LD_INT 2
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: LD_INT 2
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 1
45282: NEG
45283: PUSH
45284: LD_INT 1
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45305: LD_ADDR_VAR 0 51
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: LD_INT 0
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 0
45322: PUSH
45323: LD_INT 1
45325: NEG
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 1
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 1
45343: PUSH
45344: LD_INT 1
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: LD_INT 1
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 1
45363: NEG
45364: PUSH
45365: LD_INT 0
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: NEG
45375: PUSH
45376: LD_INT 1
45378: NEG
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: LD_INT 2
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 0
45396: PUSH
45397: LD_INT 2
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: LD_INT 1
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 2
45417: NEG
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 2
45428: NEG
45429: PUSH
45430: LD_INT 1
45432: NEG
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45452: LD_ADDR_VAR 0 52
45456: PUSH
45457: LD_INT 0
45459: PUSH
45460: LD_INT 0
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 0
45469: PUSH
45470: LD_INT 1
45472: NEG
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 1
45480: PUSH
45481: LD_INT 0
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: PUSH
45491: LD_INT 1
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: LD_INT 1
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 1
45510: NEG
45511: PUSH
45512: LD_INT 0
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 1
45521: NEG
45522: PUSH
45523: LD_INT 1
45525: NEG
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: LD_INT 2
45537: NEG
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: LD_INT 1
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 2
45556: NEG
45557: PUSH
45558: LD_INT 0
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 2
45567: NEG
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 2
45579: NEG
45580: PUSH
45581: LD_INT 2
45583: NEG
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45603: LD_ADDR_VAR 0 53
45607: PUSH
45608: LD_INT 0
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: LD_INT 1
45623: NEG
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: LD_INT 0
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 1
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 0
45651: PUSH
45652: LD_INT 1
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 1
45661: NEG
45662: PUSH
45663: LD_INT 0
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 1
45672: NEG
45673: PUSH
45674: LD_INT 1
45676: NEG
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 1
45684: NEG
45685: PUSH
45686: LD_INT 2
45688: NEG
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 0
45696: PUSH
45697: LD_INT 2
45699: NEG
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: LD_INT 1
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 2
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 2
45728: PUSH
45729: LD_INT 1
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 2
45738: PUSH
45739: LD_INT 2
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 1
45748: PUSH
45749: LD_INT 2
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 0
45758: PUSH
45759: LD_INT 2
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 1
45768: NEG
45769: PUSH
45770: LD_INT 1
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 2
45779: NEG
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 2
45790: NEG
45791: PUSH
45792: LD_INT 1
45794: NEG
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 2
45802: NEG
45803: PUSH
45804: LD_INT 2
45806: NEG
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45833: LD_ADDR_VAR 0 54
45837: PUSH
45838: LD_INT 0
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: LD_INT 1
45853: NEG
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: PUSH
45862: LD_INT 0
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: LD_INT 1
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 0
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 1
45891: NEG
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 1
45902: NEG
45903: PUSH
45904: LD_INT 1
45906: NEG
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: LD_INT 2
45918: NEG
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: LD_INT 2
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: LD_INT 1
45940: NEG
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 2
45948: PUSH
45949: LD_INT 0
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 2
45958: PUSH
45959: LD_INT 1
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 2
45968: PUSH
45969: LD_INT 2
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 1
45978: PUSH
45979: LD_INT 2
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: LD_INT 2
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 1
45998: NEG
45999: PUSH
46000: LD_INT 1
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 2
46009: NEG
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 2
46020: NEG
46021: PUSH
46022: LD_INT 1
46024: NEG
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 2
46032: NEG
46033: PUSH
46034: LD_INT 2
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46063: LD_ADDR_VAR 0 55
46067: PUSH
46068: LD_INT 0
46070: PUSH
46071: LD_INT 0
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: LD_INT 1
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: LD_INT 0
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: LD_INT 1
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: LD_INT 1
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 1
46121: NEG
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: LD_INT 1
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 1
46144: NEG
46145: PUSH
46146: LD_INT 2
46148: NEG
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 0
46156: PUSH
46157: LD_INT 2
46159: NEG
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 1
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 2
46178: PUSH
46179: LD_INT 0
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 2
46188: PUSH
46189: LD_INT 1
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 2
46198: PUSH
46199: LD_INT 2
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: LD_INT 2
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 0
46218: PUSH
46219: LD_INT 2
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 1
46228: NEG
46229: PUSH
46230: LD_INT 1
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 2
46239: NEG
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 2
46250: NEG
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 2
46262: NEG
46263: PUSH
46264: LD_INT 2
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46293: LD_ADDR_VAR 0 56
46297: PUSH
46298: LD_INT 0
46300: PUSH
46301: LD_INT 0
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 0
46310: PUSH
46311: LD_INT 1
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: LD_INT 0
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 0
46341: PUSH
46342: LD_INT 1
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: NEG
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: LD_INT 1
46366: NEG
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: LD_INT 2
46378: NEG
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: LD_INT 2
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 2
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 2
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 2
46428: PUSH
46429: LD_INT 2
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 1
46438: PUSH
46439: LD_INT 2
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: LD_INT 2
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: NEG
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 2
46469: NEG
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 2
46480: NEG
46481: PUSH
46482: LD_INT 1
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 2
46492: NEG
46493: PUSH
46494: LD_INT 2
46496: NEG
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46523: LD_ADDR_VAR 0 57
46527: PUSH
46528: LD_INT 0
46530: PUSH
46531: LD_INT 0
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 0
46540: PUSH
46541: LD_INT 1
46543: NEG
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 1
46551: PUSH
46552: LD_INT 0
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 1
46561: PUSH
46562: LD_INT 1
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 0
46571: PUSH
46572: LD_INT 1
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 1
46581: NEG
46582: PUSH
46583: LD_INT 0
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 1
46592: NEG
46593: PUSH
46594: LD_INT 1
46596: NEG
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: LD_INT 2
46608: NEG
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: LD_INT 2
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: LD_INT 1
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 2
46638: PUSH
46639: LD_INT 0
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 2
46648: PUSH
46649: LD_INT 1
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 2
46658: PUSH
46659: LD_INT 2
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 1
46668: PUSH
46669: LD_INT 2
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: LD_INT 2
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 1
46688: NEG
46689: PUSH
46690: LD_INT 1
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 2
46699: NEG
46700: PUSH
46701: LD_INT 0
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 2
46710: NEG
46711: PUSH
46712: LD_INT 1
46714: NEG
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 2
46722: NEG
46723: PUSH
46724: LD_INT 2
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46753: LD_ADDR_VAR 0 58
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 0
46770: PUSH
46771: LD_INT 1
46773: NEG
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 1
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 1
46791: PUSH
46792: LD_INT 1
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: LD_INT 1
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 1
46811: NEG
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: NEG
46823: PUSH
46824: LD_INT 1
46826: NEG
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: LD_INT 2
46838: NEG
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: LD_INT 2
46849: NEG
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: LD_INT 1
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 2
46868: PUSH
46869: LD_INT 0
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 2
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 2
46888: PUSH
46889: LD_INT 2
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: LD_INT 2
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: LD_INT 2
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 1
46918: NEG
46919: PUSH
46920: LD_INT 1
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 2
46929: NEG
46930: PUSH
46931: LD_INT 0
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 2
46940: NEG
46941: PUSH
46942: LD_INT 1
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 2
46952: NEG
46953: PUSH
46954: LD_INT 2
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46983: LD_ADDR_VAR 0 59
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: LD_INT 1
47003: NEG
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 1
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: LD_INT 1
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: LD_INT 1
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47071: LD_ADDR_VAR 0 60
47075: PUSH
47076: LD_INT 0
47078: PUSH
47079: LD_INT 0
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: LD_INT 1
47091: NEG
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 1
47099: PUSH
47100: LD_INT 0
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 1
47109: PUSH
47110: LD_INT 1
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: LD_INT 1
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 1
47129: NEG
47130: PUSH
47131: LD_INT 0
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 1
47140: NEG
47141: PUSH
47142: LD_INT 1
47144: NEG
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47159: LD_ADDR_VAR 0 61
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: LD_INT 1
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 1
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 0
47207: PUSH
47208: LD_INT 1
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 1
47217: NEG
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: NEG
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47247: LD_ADDR_VAR 0 62
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 0
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 1
47275: PUSH
47276: LD_INT 0
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 1
47285: PUSH
47286: LD_INT 1
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: LD_INT 1
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 1
47305: NEG
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: NEG
47317: PUSH
47318: LD_INT 1
47320: NEG
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47335: LD_ADDR_VAR 0 63
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 1
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: LD_INT 1
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 1
47393: NEG
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47423: LD_ADDR_VAR 0 64
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 1
47451: PUSH
47452: LD_INT 0
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 1
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: LD_INT 1
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: LD_INT 0
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 1
47492: NEG
47493: PUSH
47494: LD_INT 1
47496: NEG
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: ST_TO_ADDR
// end ; 1 :
47511: GO 53408
47513: LD_INT 1
47515: DOUBLE
47516: EQUAL
47517: IFTRUE 47521
47519: GO 50144
47521: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47522: LD_ADDR_VAR 0 11
47526: PUSH
47527: LD_INT 1
47529: NEG
47530: PUSH
47531: LD_INT 3
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: LD_INT 3
47544: NEG
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 1
47552: PUSH
47553: LD_INT 2
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: LIST
47565: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47566: LD_ADDR_VAR 0 12
47570: PUSH
47571: LD_INT 2
47573: PUSH
47574: LD_INT 1
47576: NEG
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 3
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 3
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: LIST
47606: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47607: LD_ADDR_VAR 0 13
47611: PUSH
47612: LD_INT 3
47614: PUSH
47615: LD_INT 2
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 3
47624: PUSH
47625: LD_INT 3
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 2
47634: PUSH
47635: LD_INT 3
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: LIST
47646: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47647: LD_ADDR_VAR 0 14
47651: PUSH
47652: LD_INT 1
47654: PUSH
47655: LD_INT 3
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: LD_INT 3
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: LD_INT 2
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: LIST
47687: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47688: LD_ADDR_VAR 0 15
47692: PUSH
47693: LD_INT 2
47695: NEG
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 3
47706: NEG
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 3
47717: NEG
47718: PUSH
47719: LD_INT 1
47721: NEG
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: LIST
47731: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47732: LD_ADDR_VAR 0 16
47736: PUSH
47737: LD_INT 2
47739: NEG
47740: PUSH
47741: LD_INT 3
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 3
47751: NEG
47752: PUSH
47753: LD_INT 2
47755: NEG
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 3
47763: NEG
47764: PUSH
47765: LD_INT 3
47767: NEG
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: LIST
47777: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47778: LD_ADDR_VAR 0 17
47782: PUSH
47783: LD_INT 1
47785: NEG
47786: PUSH
47787: LD_INT 3
47789: NEG
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 0
47797: PUSH
47798: LD_INT 3
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 1
47808: PUSH
47809: LD_INT 2
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: LIST
47821: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47822: LD_ADDR_VAR 0 18
47826: PUSH
47827: LD_INT 2
47829: PUSH
47830: LD_INT 1
47832: NEG
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 3
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 3
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: LIST
47862: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47863: LD_ADDR_VAR 0 19
47867: PUSH
47868: LD_INT 3
47870: PUSH
47871: LD_INT 2
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 3
47880: PUSH
47881: LD_INT 3
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 2
47890: PUSH
47891: LD_INT 3
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: LIST
47902: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47903: LD_ADDR_VAR 0 20
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: LD_INT 3
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: LD_INT 3
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: LD_INT 2
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: LIST
47943: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47944: LD_ADDR_VAR 0 21
47948: PUSH
47949: LD_INT 2
47951: NEG
47952: PUSH
47953: LD_INT 1
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 3
47962: NEG
47963: PUSH
47964: LD_INT 0
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 3
47973: NEG
47974: PUSH
47975: LD_INT 1
47977: NEG
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: LIST
47987: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47988: LD_ADDR_VAR 0 22
47992: PUSH
47993: LD_INT 2
47995: NEG
47996: PUSH
47997: LD_INT 3
47999: NEG
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 3
48007: NEG
48008: PUSH
48009: LD_INT 2
48011: NEG
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 3
48019: NEG
48020: PUSH
48021: LD_INT 3
48023: NEG
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: LIST
48033: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48034: LD_ADDR_VAR 0 23
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: LD_INT 3
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: LD_INT 4
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 1
48064: PUSH
48065: LD_INT 3
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: LIST
48077: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48078: LD_ADDR_VAR 0 24
48082: PUSH
48083: LD_INT 3
48085: PUSH
48086: LD_INT 0
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 3
48095: PUSH
48096: LD_INT 1
48098: NEG
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 4
48106: PUSH
48107: LD_INT 1
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: LIST
48118: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48119: LD_ADDR_VAR 0 25
48123: PUSH
48124: LD_INT 3
48126: PUSH
48127: LD_INT 3
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 4
48136: PUSH
48137: LD_INT 3
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 3
48146: PUSH
48147: LD_INT 4
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: LIST
48158: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48159: LD_ADDR_VAR 0 26
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: LD_INT 3
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 1
48176: PUSH
48177: LD_INT 4
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 1
48186: NEG
48187: PUSH
48188: LD_INT 3
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: LIST
48199: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48200: LD_ADDR_VAR 0 27
48204: PUSH
48205: LD_INT 3
48207: NEG
48208: PUSH
48209: LD_INT 0
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 3
48218: NEG
48219: PUSH
48220: LD_INT 1
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 4
48229: NEG
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: LIST
48243: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48244: LD_ADDR_VAR 0 28
48248: PUSH
48249: LD_INT 3
48251: NEG
48252: PUSH
48253: LD_INT 3
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 3
48263: NEG
48264: PUSH
48265: LD_INT 4
48267: NEG
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 4
48275: NEG
48276: PUSH
48277: LD_INT 3
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: LIST
48289: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48290: LD_ADDR_VAR 0 29
48294: PUSH
48295: LD_INT 1
48297: NEG
48298: PUSH
48299: LD_INT 3
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: LD_INT 3
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 1
48320: PUSH
48321: LD_INT 2
48323: NEG
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 1
48331: NEG
48332: PUSH
48333: LD_INT 4
48335: NEG
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: LD_INT 4
48346: NEG
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 1
48354: PUSH
48355: LD_INT 3
48357: NEG
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: LD_INT 5
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: LD_INT 5
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: LD_INT 4
48391: NEG
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 1
48399: NEG
48400: PUSH
48401: LD_INT 6
48403: NEG
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 0
48411: PUSH
48412: LD_INT 6
48414: NEG
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: LD_INT 5
48425: NEG
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48445: LD_ADDR_VAR 0 30
48449: PUSH
48450: LD_INT 2
48452: PUSH
48453: LD_INT 1
48455: NEG
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 3
48463: PUSH
48464: LD_INT 0
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 3
48473: PUSH
48474: LD_INT 1
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 3
48483: PUSH
48484: LD_INT 1
48486: NEG
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 4
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 4
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 4
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 5
48525: PUSH
48526: LD_INT 0
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 5
48535: PUSH
48536: LD_INT 1
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 5
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 6
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 6
48566: PUSH
48567: LD_INT 1
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48588: LD_ADDR_VAR 0 31
48592: PUSH
48593: LD_INT 3
48595: PUSH
48596: LD_INT 2
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 3
48605: PUSH
48606: LD_INT 3
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 2
48615: PUSH
48616: LD_INT 3
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 4
48625: PUSH
48626: LD_INT 3
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 4
48635: PUSH
48636: LD_INT 4
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 3
48645: PUSH
48646: LD_INT 4
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 5
48655: PUSH
48656: LD_INT 4
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 5
48665: PUSH
48666: LD_INT 5
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 4
48675: PUSH
48676: LD_INT 5
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 6
48685: PUSH
48686: LD_INT 5
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 6
48695: PUSH
48696: LD_INT 6
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 5
48705: PUSH
48706: LD_INT 6
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48727: LD_ADDR_VAR 0 32
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: LD_INT 3
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: LD_INT 3
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: NEG
48755: PUSH
48756: LD_INT 2
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: PUSH
48766: LD_INT 4
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: LD_INT 4
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: NEG
48786: PUSH
48787: LD_INT 3
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 1
48796: PUSH
48797: LD_INT 5
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: LD_INT 5
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 1
48816: NEG
48817: PUSH
48818: LD_INT 4
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: LD_INT 6
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: LD_INT 6
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: LD_INT 5
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48870: LD_ADDR_VAR 0 33
48874: PUSH
48875: LD_INT 2
48877: NEG
48878: PUSH
48879: LD_INT 1
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 3
48888: NEG
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 3
48899: NEG
48900: PUSH
48901: LD_INT 1
48903: NEG
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 3
48911: NEG
48912: PUSH
48913: LD_INT 1
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 4
48922: NEG
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 4
48933: NEG
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 4
48945: NEG
48946: PUSH
48947: LD_INT 1
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 5
48956: NEG
48957: PUSH
48958: LD_INT 0
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 5
48967: NEG
48968: PUSH
48969: LD_INT 1
48971: NEG
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 5
48979: NEG
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 6
48990: NEG
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 6
49001: NEG
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49025: LD_ADDR_VAR 0 34
49029: PUSH
49030: LD_INT 2
49032: NEG
49033: PUSH
49034: LD_INT 3
49036: NEG
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 3
49044: NEG
49045: PUSH
49046: LD_INT 2
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 3
49056: NEG
49057: PUSH
49058: LD_INT 3
49060: NEG
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 3
49068: NEG
49069: PUSH
49070: LD_INT 4
49072: NEG
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 4
49080: NEG
49081: PUSH
49082: LD_INT 3
49084: NEG
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 4
49092: NEG
49093: PUSH
49094: LD_INT 4
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 4
49104: NEG
49105: PUSH
49106: LD_INT 5
49108: NEG
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 5
49116: NEG
49117: PUSH
49118: LD_INT 4
49120: NEG
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 5
49128: NEG
49129: PUSH
49130: LD_INT 5
49132: NEG
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 5
49140: NEG
49141: PUSH
49142: LD_INT 6
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 6
49152: NEG
49153: PUSH
49154: LD_INT 5
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 6
49164: NEG
49165: PUSH
49166: LD_INT 6
49168: NEG
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49188: LD_ADDR_VAR 0 41
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: LD_INT 2
49198: NEG
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 1
49206: NEG
49207: PUSH
49208: LD_INT 3
49210: NEG
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: LD_INT 2
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: LIST
49231: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49232: LD_ADDR_VAR 0 42
49236: PUSH
49237: LD_INT 2
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 2
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 3
49260: PUSH
49261: LD_INT 1
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: LIST
49272: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49273: LD_ADDR_VAR 0 43
49277: PUSH
49278: LD_INT 2
49280: PUSH
49281: LD_INT 2
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 3
49290: PUSH
49291: LD_INT 2
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 2
49300: PUSH
49301: LD_INT 3
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: LIST
49312: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49313: LD_ADDR_VAR 0 44
49317: PUSH
49318: LD_INT 0
49320: PUSH
49321: LD_INT 2
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: LD_INT 3
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 1
49340: NEG
49341: PUSH
49342: LD_INT 2
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: LIST
49353: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49354: LD_ADDR_VAR 0 45
49358: PUSH
49359: LD_INT 2
49361: NEG
49362: PUSH
49363: LD_INT 0
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 2
49372: NEG
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 3
49383: NEG
49384: PUSH
49385: LD_INT 1
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: LIST
49397: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49398: LD_ADDR_VAR 0 46
49402: PUSH
49403: LD_INT 2
49405: NEG
49406: PUSH
49407: LD_INT 2
49409: NEG
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 2
49417: NEG
49418: PUSH
49419: LD_INT 3
49421: NEG
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 3
49429: NEG
49430: PUSH
49431: LD_INT 2
49433: NEG
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: LIST
49443: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49444: LD_ADDR_VAR 0 47
49448: PUSH
49449: LD_INT 2
49451: NEG
49452: PUSH
49453: LD_INT 3
49455: NEG
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 1
49463: NEG
49464: PUSH
49465: LD_INT 3
49467: NEG
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49477: LD_ADDR_VAR 0 48
49481: PUSH
49482: LD_INT 1
49484: PUSH
49485: LD_INT 2
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 2
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49508: LD_ADDR_VAR 0 49
49512: PUSH
49513: LD_INT 3
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 3
49525: PUSH
49526: LD_INT 2
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49537: LD_ADDR_VAR 0 50
49541: PUSH
49542: LD_INT 2
49544: PUSH
49545: LD_INT 3
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: LD_INT 3
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49566: LD_ADDR_VAR 0 51
49570: PUSH
49571: LD_INT 1
49573: NEG
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 2
49584: NEG
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49597: LD_ADDR_VAR 0 52
49601: PUSH
49602: LD_INT 3
49604: NEG
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 3
49616: NEG
49617: PUSH
49618: LD_INT 2
49620: NEG
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49630: LD_ADDR_VAR 0 53
49634: PUSH
49635: LD_INT 1
49637: NEG
49638: PUSH
49639: LD_INT 3
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 0
49649: PUSH
49650: LD_INT 3
49652: NEG
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: LD_INT 2
49663: NEG
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: LIST
49673: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49674: LD_ADDR_VAR 0 54
49678: PUSH
49679: LD_INT 2
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 3
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 3
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: LIST
49714: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49715: LD_ADDR_VAR 0 55
49719: PUSH
49720: LD_INT 3
49722: PUSH
49723: LD_INT 2
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 3
49732: PUSH
49733: LD_INT 3
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 2
49742: PUSH
49743: LD_INT 3
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: LIST
49754: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49755: LD_ADDR_VAR 0 56
49759: PUSH
49760: LD_INT 1
49762: PUSH
49763: LD_INT 3
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 0
49772: PUSH
49773: LD_INT 3
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 1
49782: NEG
49783: PUSH
49784: LD_INT 2
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: LIST
49795: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49796: LD_ADDR_VAR 0 57
49800: PUSH
49801: LD_INT 2
49803: NEG
49804: PUSH
49805: LD_INT 1
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 3
49814: NEG
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 3
49825: NEG
49826: PUSH
49827: LD_INT 1
49829: NEG
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: LIST
49839: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49840: LD_ADDR_VAR 0 58
49844: PUSH
49845: LD_INT 2
49847: NEG
49848: PUSH
49849: LD_INT 3
49851: NEG
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 3
49859: NEG
49860: PUSH
49861: LD_INT 2
49863: NEG
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 3
49871: NEG
49872: PUSH
49873: LD_INT 3
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: LIST
49885: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49886: LD_ADDR_VAR 0 59
49890: PUSH
49891: LD_INT 1
49893: NEG
49894: PUSH
49895: LD_INT 2
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: LD_INT 2
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 1
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: LIST
49929: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49930: LD_ADDR_VAR 0 60
49934: PUSH
49935: LD_INT 1
49937: PUSH
49938: LD_INT 1
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 2
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 2
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: LIST
49970: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49971: LD_ADDR_VAR 0 61
49975: PUSH
49976: LD_INT 2
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 2
49988: PUSH
49989: LD_INT 2
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 1
49998: PUSH
49999: LD_INT 2
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: LIST
50010: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50011: LD_ADDR_VAR 0 62
50015: PUSH
50016: LD_INT 1
50018: PUSH
50019: LD_INT 2
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: LD_INT 2
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: LIST
50051: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50052: LD_ADDR_VAR 0 63
50056: PUSH
50057: LD_INT 1
50059: NEG
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 2
50070: NEG
50071: PUSH
50072: LD_INT 0
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 2
50081: NEG
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: LIST
50095: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50096: LD_ADDR_VAR 0 64
50100: PUSH
50101: LD_INT 1
50103: NEG
50104: PUSH
50105: LD_INT 2
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 2
50115: NEG
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 2
50127: NEG
50128: PUSH
50129: LD_INT 2
50131: NEG
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: LIST
50141: ST_TO_ADDR
// end ; 2 :
50142: GO 53408
50144: LD_INT 2
50146: DOUBLE
50147: EQUAL
50148: IFTRUE 50152
50150: GO 53407
50152: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50153: LD_ADDR_VAR 0 29
50157: PUSH
50158: LD_INT 4
50160: PUSH
50161: LD_INT 0
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 4
50170: PUSH
50171: LD_INT 1
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 5
50181: PUSH
50182: LD_INT 0
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 5
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 4
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 3
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 3
50221: PUSH
50222: LD_INT 1
50224: NEG
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 3
50232: PUSH
50233: LD_INT 2
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 5
50243: PUSH
50244: LD_INT 2
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 3
50253: PUSH
50254: LD_INT 3
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 3
50263: PUSH
50264: LD_INT 2
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 4
50273: PUSH
50274: LD_INT 3
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 4
50283: PUSH
50284: LD_INT 4
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 3
50293: PUSH
50294: LD_INT 4
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 2
50303: PUSH
50304: LD_INT 3
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 2
50313: PUSH
50314: LD_INT 2
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 4
50323: PUSH
50324: LD_INT 2
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 2
50333: PUSH
50334: LD_INT 4
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: LD_INT 4
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: LD_INT 3
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: LD_INT 4
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: LD_INT 5
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: LD_INT 5
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: LD_INT 4
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: LD_INT 3
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 2
50415: PUSH
50416: LD_INT 5
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 2
50425: NEG
50426: PUSH
50427: LD_INT 3
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 3
50436: NEG
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 3
50447: NEG
50448: PUSH
50449: LD_INT 1
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 2
50459: NEG
50460: PUSH
50461: LD_INT 0
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 2
50470: NEG
50471: PUSH
50472: LD_INT 1
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 3
50481: NEG
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 4
50492: NEG
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 4
50503: NEG
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 4
50515: NEG
50516: PUSH
50517: LD_INT 2
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 2
50527: NEG
50528: PUSH
50529: LD_INT 2
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 4
50538: NEG
50539: PUSH
50540: LD_INT 4
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 4
50550: NEG
50551: PUSH
50552: LD_INT 5
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 3
50562: NEG
50563: PUSH
50564: LD_INT 4
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 3
50574: NEG
50575: PUSH
50576: LD_INT 3
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 4
50586: NEG
50587: PUSH
50588: LD_INT 3
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 5
50598: NEG
50599: PUSH
50600: LD_INT 4
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 5
50610: NEG
50611: PUSH
50612: LD_INT 5
50614: NEG
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 3
50622: NEG
50623: PUSH
50624: LD_INT 5
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 5
50634: NEG
50635: PUSH
50636: LD_INT 3
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50691: LD_ADDR_VAR 0 30
50695: PUSH
50696: LD_INT 4
50698: PUSH
50699: LD_INT 4
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 4
50708: PUSH
50709: LD_INT 3
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 5
50718: PUSH
50719: LD_INT 4
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 5
50728: PUSH
50729: LD_INT 5
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 4
50738: PUSH
50739: LD_INT 5
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 3
50748: PUSH
50749: LD_INT 4
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 3
50758: PUSH
50759: LD_INT 3
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 5
50768: PUSH
50769: LD_INT 3
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 3
50778: PUSH
50779: LD_INT 5
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 0
50788: PUSH
50789: LD_INT 3
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: LD_INT 2
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: LD_INT 3
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 1
50818: PUSH
50819: LD_INT 4
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: LD_INT 4
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 1
50838: NEG
50839: PUSH
50840: LD_INT 3
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 1
50849: NEG
50850: PUSH
50851: LD_INT 2
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 2
50860: PUSH
50861: LD_INT 4
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 2
50870: NEG
50871: PUSH
50872: LD_INT 2
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 4
50881: NEG
50882: PUSH
50883: LD_INT 0
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 4
50892: NEG
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 3
50904: NEG
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 3
50915: NEG
50916: PUSH
50917: LD_INT 1
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 4
50926: NEG
50927: PUSH
50928: LD_INT 1
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 5
50937: NEG
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 5
50948: NEG
50949: PUSH
50950: LD_INT 1
50952: NEG
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 5
50960: NEG
50961: PUSH
50962: LD_INT 2
50964: NEG
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 3
50972: NEG
50973: PUSH
50974: LD_INT 2
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 3
50983: NEG
50984: PUSH
50985: LD_INT 3
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 3
50995: NEG
50996: PUSH
50997: LD_INT 4
50999: NEG
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 2
51007: NEG
51008: PUSH
51009: LD_INT 3
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 2
51019: NEG
51020: PUSH
51021: LD_INT 2
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 3
51031: NEG
51032: PUSH
51033: LD_INT 2
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 4
51043: NEG
51044: PUSH
51045: LD_INT 3
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 4
51055: NEG
51056: PUSH
51057: LD_INT 4
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 2
51067: NEG
51068: PUSH
51069: LD_INT 4
51071: NEG
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 4
51079: NEG
51080: PUSH
51081: LD_INT 2
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: LD_INT 4
51094: NEG
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: LD_INT 5
51105: NEG
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 1
51113: PUSH
51114: LD_INT 4
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: LD_INT 3
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: LD_INT 3
51138: NEG
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: LD_INT 4
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 1
51158: NEG
51159: PUSH
51160: LD_INT 5
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 2
51170: PUSH
51171: LD_INT 3
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 2
51181: NEG
51182: PUSH
51183: LD_INT 5
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51238: LD_ADDR_VAR 0 31
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: LD_INT 4
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: LD_INT 3
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: LD_INT 4
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: LD_INT 5
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: LD_INT 5
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 1
51295: NEG
51296: PUSH
51297: LD_INT 4
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 1
51306: NEG
51307: PUSH
51308: LD_INT 3
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 2
51317: PUSH
51318: LD_INT 5
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 2
51327: NEG
51328: PUSH
51329: LD_INT 3
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 3
51338: NEG
51339: PUSH
51340: LD_INT 0
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 3
51349: NEG
51350: PUSH
51351: LD_INT 1
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 2
51361: NEG
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 2
51372: NEG
51373: PUSH
51374: LD_INT 1
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 3
51383: NEG
51384: PUSH
51385: LD_INT 1
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 4
51394: NEG
51395: PUSH
51396: LD_INT 0
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 4
51405: NEG
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 4
51417: NEG
51418: PUSH
51419: LD_INT 2
51421: NEG
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 2
51429: NEG
51430: PUSH
51431: LD_INT 2
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 4
51440: NEG
51441: PUSH
51442: LD_INT 4
51444: NEG
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 4
51452: NEG
51453: PUSH
51454: LD_INT 5
51456: NEG
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 3
51464: NEG
51465: PUSH
51466: LD_INT 4
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 3
51476: NEG
51477: PUSH
51478: LD_INT 3
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 4
51488: NEG
51489: PUSH
51490: LD_INT 3
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 5
51500: NEG
51501: PUSH
51502: LD_INT 4
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 5
51512: NEG
51513: PUSH
51514: LD_INT 5
51516: NEG
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 3
51524: NEG
51525: PUSH
51526: LD_INT 5
51528: NEG
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 5
51536: NEG
51537: PUSH
51538: LD_INT 3
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: LD_INT 3
51551: NEG
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 0
51559: PUSH
51560: LD_INT 4
51562: NEG
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 1
51570: PUSH
51571: LD_INT 3
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 1
51581: PUSH
51582: LD_INT 2
51584: NEG
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 0
51592: PUSH
51593: LD_INT 2
51595: NEG
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 1
51603: NEG
51604: PUSH
51605: LD_INT 3
51607: NEG
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 1
51615: NEG
51616: PUSH
51617: LD_INT 4
51619: NEG
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 2
51627: PUSH
51628: LD_INT 2
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 2
51638: NEG
51639: PUSH
51640: LD_INT 4
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 4
51650: PUSH
51651: LD_INT 0
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 4
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 5
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 5
51681: PUSH
51682: LD_INT 1
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 4
51691: PUSH
51692: LD_INT 1
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 3
51701: PUSH
51702: LD_INT 0
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 3
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 3
51722: PUSH
51723: LD_INT 2
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 5
51733: PUSH
51734: LD_INT 2
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51788: LD_ADDR_VAR 0 32
51792: PUSH
51793: LD_INT 4
51795: NEG
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 4
51806: NEG
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 3
51818: NEG
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 3
51829: NEG
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 4
51840: NEG
51841: PUSH
51842: LD_INT 1
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 5
51851: NEG
51852: PUSH
51853: LD_INT 0
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 5
51862: NEG
51863: PUSH
51864: LD_INT 1
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 5
51874: NEG
51875: PUSH
51876: LD_INT 2
51878: NEG
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 3
51886: NEG
51887: PUSH
51888: LD_INT 2
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 3
51897: NEG
51898: PUSH
51899: LD_INT 3
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 3
51909: NEG
51910: PUSH
51911: LD_INT 4
51913: NEG
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 2
51921: NEG
51922: PUSH
51923: LD_INT 3
51925: NEG
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 2
51933: NEG
51934: PUSH
51935: LD_INT 2
51937: NEG
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 3
51945: NEG
51946: PUSH
51947: LD_INT 2
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 4
51957: NEG
51958: PUSH
51959: LD_INT 3
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 4
51969: NEG
51970: PUSH
51971: LD_INT 4
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 2
51981: NEG
51982: PUSH
51983: LD_INT 4
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 4
51993: NEG
51994: PUSH
51995: LD_INT 2
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 0
52005: PUSH
52006: LD_INT 4
52008: NEG
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: LD_INT 5
52019: NEG
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: PUSH
52028: LD_INT 4
52030: NEG
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: LD_INT 3
52041: NEG
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 0
52049: PUSH
52050: LD_INT 3
52052: NEG
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: LD_INT 4
52064: NEG
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: NEG
52073: PUSH
52074: LD_INT 5
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 2
52084: PUSH
52085: LD_INT 3
52087: NEG
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 2
52095: NEG
52096: PUSH
52097: LD_INT 5
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 3
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 3
52117: PUSH
52118: LD_INT 1
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 4
52128: PUSH
52129: LD_INT 0
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 4
52138: PUSH
52139: LD_INT 1
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 3
52148: PUSH
52149: LD_INT 1
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 2
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 2
52168: PUSH
52169: LD_INT 1
52171: NEG
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 2
52179: PUSH
52180: LD_INT 2
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 4
52190: PUSH
52191: LD_INT 2
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 4
52200: PUSH
52201: LD_INT 4
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 4
52210: PUSH
52211: LD_INT 3
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 5
52220: PUSH
52221: LD_INT 4
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 5
52230: PUSH
52231: LD_INT 5
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 4
52240: PUSH
52241: LD_INT 5
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 3
52250: PUSH
52251: LD_INT 4
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 3
52260: PUSH
52261: LD_INT 3
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 5
52270: PUSH
52271: LD_INT 3
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 3
52280: PUSH
52281: LD_INT 5
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52335: LD_ADDR_VAR 0 33
52339: PUSH
52340: LD_INT 4
52342: NEG
52343: PUSH
52344: LD_INT 4
52346: NEG
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 4
52354: NEG
52355: PUSH
52356: LD_INT 5
52358: NEG
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 3
52366: NEG
52367: PUSH
52368: LD_INT 4
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 3
52378: NEG
52379: PUSH
52380: LD_INT 3
52382: NEG
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 4
52390: NEG
52391: PUSH
52392: LD_INT 3
52394: NEG
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 5
52402: NEG
52403: PUSH
52404: LD_INT 4
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 5
52414: NEG
52415: PUSH
52416: LD_INT 5
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 3
52426: NEG
52427: PUSH
52428: LD_INT 5
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 5
52438: NEG
52439: PUSH
52440: LD_INT 3
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: LD_INT 3
52453: NEG
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: LD_INT 4
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 1
52472: PUSH
52473: LD_INT 3
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: LD_INT 2
52486: NEG
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: LD_INT 2
52497: NEG
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: LD_INT 3
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 1
52517: NEG
52518: PUSH
52519: LD_INT 4
52521: NEG
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 2
52529: PUSH
52530: LD_INT 2
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 2
52540: NEG
52541: PUSH
52542: LD_INT 4
52544: NEG
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 4
52552: PUSH
52553: LD_INT 0
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 4
52562: PUSH
52563: LD_INT 1
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 5
52573: PUSH
52574: LD_INT 0
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 5
52583: PUSH
52584: LD_INT 1
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 4
52593: PUSH
52594: LD_INT 1
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 3
52603: PUSH
52604: LD_INT 0
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 3
52613: PUSH
52614: LD_INT 1
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 3
52624: PUSH
52625: LD_INT 2
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 5
52635: PUSH
52636: LD_INT 2
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 3
52645: PUSH
52646: LD_INT 3
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 3
52655: PUSH
52656: LD_INT 2
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 4
52665: PUSH
52666: LD_INT 3
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 4
52675: PUSH
52676: LD_INT 4
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 3
52685: PUSH
52686: LD_INT 4
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 2
52695: PUSH
52696: LD_INT 3
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 2
52705: PUSH
52706: LD_INT 2
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 4
52715: PUSH
52716: LD_INT 2
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 2
52725: PUSH
52726: LD_INT 4
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 0
52735: PUSH
52736: LD_INT 4
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: LD_INT 3
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: LD_INT 4
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: LD_INT 5
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: LD_INT 5
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 1
52785: NEG
52786: PUSH
52787: LD_INT 4
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: LD_INT 3
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 2
52807: PUSH
52808: LD_INT 5
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 2
52817: NEG
52818: PUSH
52819: LD_INT 3
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52873: LD_ADDR_VAR 0 34
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: LD_INT 4
52883: NEG
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: LD_INT 5
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: LD_INT 4
52905: NEG
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 1
52913: PUSH
52914: LD_INT 3
52916: NEG
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: LD_INT 3
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 1
52935: NEG
52936: PUSH
52937: LD_INT 4
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: LD_INT 5
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 2
52959: PUSH
52960: LD_INT 3
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 2
52970: NEG
52971: PUSH
52972: LD_INT 5
52974: NEG
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 3
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 3
52992: PUSH
52993: LD_INT 1
52995: NEG
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 4
53003: PUSH
53004: LD_INT 0
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 4
53013: PUSH
53014: LD_INT 1
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 3
53023: PUSH
53024: LD_INT 1
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 2
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 2
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 2
53054: PUSH
53055: LD_INT 2
53057: NEG
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 4
53065: PUSH
53066: LD_INT 2
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 4
53075: PUSH
53076: LD_INT 4
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 4
53085: PUSH
53086: LD_INT 3
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 5
53095: PUSH
53096: LD_INT 4
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 5
53105: PUSH
53106: LD_INT 5
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 4
53115: PUSH
53116: LD_INT 5
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 3
53125: PUSH
53126: LD_INT 4
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 3
53135: PUSH
53136: LD_INT 3
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 5
53145: PUSH
53146: LD_INT 3
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 3
53155: PUSH
53156: LD_INT 5
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: LD_INT 3
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: LD_INT 2
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 1
53185: PUSH
53186: LD_INT 3
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 1
53195: PUSH
53196: LD_INT 4
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: LD_INT 4
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 1
53215: NEG
53216: PUSH
53217: LD_INT 3
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: NEG
53227: PUSH
53228: LD_INT 2
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 2
53237: PUSH
53238: LD_INT 4
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 2
53247: NEG
53248: PUSH
53249: LD_INT 2
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 4
53258: NEG
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 4
53269: NEG
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 3
53281: NEG
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 3
53292: NEG
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 4
53303: NEG
53304: PUSH
53305: LD_INT 1
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 5
53314: NEG
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 5
53325: NEG
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 5
53337: NEG
53338: PUSH
53339: LD_INT 2
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 3
53349: NEG
53350: PUSH
53351: LD_INT 2
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: ST_TO_ADDR
// end ; end ;
53405: GO 53408
53407: POP
// case btype of b_depot , b_warehouse :
53408: LD_VAR 0 1
53412: PUSH
53413: LD_INT 0
53415: DOUBLE
53416: EQUAL
53417: IFTRUE 53427
53419: LD_INT 1
53421: DOUBLE
53422: EQUAL
53423: IFTRUE 53427
53425: GO 53628
53427: POP
// case nation of nation_american :
53428: LD_VAR 0 5
53432: PUSH
53433: LD_INT 1
53435: DOUBLE
53436: EQUAL
53437: IFTRUE 53441
53439: GO 53497
53441: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53442: LD_ADDR_VAR 0 9
53446: PUSH
53447: LD_VAR 0 11
53451: PUSH
53452: LD_VAR 0 12
53456: PUSH
53457: LD_VAR 0 13
53461: PUSH
53462: LD_VAR 0 14
53466: PUSH
53467: LD_VAR 0 15
53471: PUSH
53472: LD_VAR 0 16
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: PUSH
53485: LD_VAR 0 4
53489: PUSH
53490: LD_INT 1
53492: PLUS
53493: ARRAY
53494: ST_TO_ADDR
53495: GO 53626
53497: LD_INT 2
53499: DOUBLE
53500: EQUAL
53501: IFTRUE 53505
53503: GO 53561
53505: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53506: LD_ADDR_VAR 0 9
53510: PUSH
53511: LD_VAR 0 17
53515: PUSH
53516: LD_VAR 0 18
53520: PUSH
53521: LD_VAR 0 19
53525: PUSH
53526: LD_VAR 0 20
53530: PUSH
53531: LD_VAR 0 21
53535: PUSH
53536: LD_VAR 0 22
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: PUSH
53549: LD_VAR 0 4
53553: PUSH
53554: LD_INT 1
53556: PLUS
53557: ARRAY
53558: ST_TO_ADDR
53559: GO 53626
53561: LD_INT 3
53563: DOUBLE
53564: EQUAL
53565: IFTRUE 53569
53567: GO 53625
53569: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53570: LD_ADDR_VAR 0 9
53574: PUSH
53575: LD_VAR 0 23
53579: PUSH
53580: LD_VAR 0 24
53584: PUSH
53585: LD_VAR 0 25
53589: PUSH
53590: LD_VAR 0 26
53594: PUSH
53595: LD_VAR 0 27
53599: PUSH
53600: LD_VAR 0 28
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: PUSH
53613: LD_VAR 0 4
53617: PUSH
53618: LD_INT 1
53620: PLUS
53621: ARRAY
53622: ST_TO_ADDR
53623: GO 53626
53625: POP
53626: GO 54181
53628: LD_INT 2
53630: DOUBLE
53631: EQUAL
53632: IFTRUE 53642
53634: LD_INT 3
53636: DOUBLE
53637: EQUAL
53638: IFTRUE 53642
53640: GO 53698
53642: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53643: LD_ADDR_VAR 0 9
53647: PUSH
53648: LD_VAR 0 29
53652: PUSH
53653: LD_VAR 0 30
53657: PUSH
53658: LD_VAR 0 31
53662: PUSH
53663: LD_VAR 0 32
53667: PUSH
53668: LD_VAR 0 33
53672: PUSH
53673: LD_VAR 0 34
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: PUSH
53686: LD_VAR 0 4
53690: PUSH
53691: LD_INT 1
53693: PLUS
53694: ARRAY
53695: ST_TO_ADDR
53696: GO 54181
53698: LD_INT 16
53700: DOUBLE
53701: EQUAL
53702: IFTRUE 53760
53704: LD_INT 17
53706: DOUBLE
53707: EQUAL
53708: IFTRUE 53760
53710: LD_INT 18
53712: DOUBLE
53713: EQUAL
53714: IFTRUE 53760
53716: LD_INT 19
53718: DOUBLE
53719: EQUAL
53720: IFTRUE 53760
53722: LD_INT 22
53724: DOUBLE
53725: EQUAL
53726: IFTRUE 53760
53728: LD_INT 20
53730: DOUBLE
53731: EQUAL
53732: IFTRUE 53760
53734: LD_INT 21
53736: DOUBLE
53737: EQUAL
53738: IFTRUE 53760
53740: LD_INT 23
53742: DOUBLE
53743: EQUAL
53744: IFTRUE 53760
53746: LD_INT 24
53748: DOUBLE
53749: EQUAL
53750: IFTRUE 53760
53752: LD_INT 25
53754: DOUBLE
53755: EQUAL
53756: IFTRUE 53760
53758: GO 53816
53760: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53761: LD_ADDR_VAR 0 9
53765: PUSH
53766: LD_VAR 0 35
53770: PUSH
53771: LD_VAR 0 36
53775: PUSH
53776: LD_VAR 0 37
53780: PUSH
53781: LD_VAR 0 38
53785: PUSH
53786: LD_VAR 0 39
53790: PUSH
53791: LD_VAR 0 40
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: PUSH
53804: LD_VAR 0 4
53808: PUSH
53809: LD_INT 1
53811: PLUS
53812: ARRAY
53813: ST_TO_ADDR
53814: GO 54181
53816: LD_INT 6
53818: DOUBLE
53819: EQUAL
53820: IFTRUE 53872
53822: LD_INT 7
53824: DOUBLE
53825: EQUAL
53826: IFTRUE 53872
53828: LD_INT 8
53830: DOUBLE
53831: EQUAL
53832: IFTRUE 53872
53834: LD_INT 13
53836: DOUBLE
53837: EQUAL
53838: IFTRUE 53872
53840: LD_INT 12
53842: DOUBLE
53843: EQUAL
53844: IFTRUE 53872
53846: LD_INT 15
53848: DOUBLE
53849: EQUAL
53850: IFTRUE 53872
53852: LD_INT 11
53854: DOUBLE
53855: EQUAL
53856: IFTRUE 53872
53858: LD_INT 14
53860: DOUBLE
53861: EQUAL
53862: IFTRUE 53872
53864: LD_INT 10
53866: DOUBLE
53867: EQUAL
53868: IFTRUE 53872
53870: GO 53928
53872: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53873: LD_ADDR_VAR 0 9
53877: PUSH
53878: LD_VAR 0 41
53882: PUSH
53883: LD_VAR 0 42
53887: PUSH
53888: LD_VAR 0 43
53892: PUSH
53893: LD_VAR 0 44
53897: PUSH
53898: LD_VAR 0 45
53902: PUSH
53903: LD_VAR 0 46
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: PUSH
53916: LD_VAR 0 4
53920: PUSH
53921: LD_INT 1
53923: PLUS
53924: ARRAY
53925: ST_TO_ADDR
53926: GO 54181
53928: LD_INT 36
53930: DOUBLE
53931: EQUAL
53932: IFTRUE 53936
53934: GO 53992
53936: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53937: LD_ADDR_VAR 0 9
53941: PUSH
53942: LD_VAR 0 47
53946: PUSH
53947: LD_VAR 0 48
53951: PUSH
53952: LD_VAR 0 49
53956: PUSH
53957: LD_VAR 0 50
53961: PUSH
53962: LD_VAR 0 51
53966: PUSH
53967: LD_VAR 0 52
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: PUSH
53980: LD_VAR 0 4
53984: PUSH
53985: LD_INT 1
53987: PLUS
53988: ARRAY
53989: ST_TO_ADDR
53990: GO 54181
53992: LD_INT 4
53994: DOUBLE
53995: EQUAL
53996: IFTRUE 54018
53998: LD_INT 5
54000: DOUBLE
54001: EQUAL
54002: IFTRUE 54018
54004: LD_INT 34
54006: DOUBLE
54007: EQUAL
54008: IFTRUE 54018
54010: LD_INT 37
54012: DOUBLE
54013: EQUAL
54014: IFTRUE 54018
54016: GO 54074
54018: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54019: LD_ADDR_VAR 0 9
54023: PUSH
54024: LD_VAR 0 53
54028: PUSH
54029: LD_VAR 0 54
54033: PUSH
54034: LD_VAR 0 55
54038: PUSH
54039: LD_VAR 0 56
54043: PUSH
54044: LD_VAR 0 57
54048: PUSH
54049: LD_VAR 0 58
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: PUSH
54062: LD_VAR 0 4
54066: PUSH
54067: LD_INT 1
54069: PLUS
54070: ARRAY
54071: ST_TO_ADDR
54072: GO 54181
54074: LD_INT 31
54076: DOUBLE
54077: EQUAL
54078: IFTRUE 54124
54080: LD_INT 32
54082: DOUBLE
54083: EQUAL
54084: IFTRUE 54124
54086: LD_INT 33
54088: DOUBLE
54089: EQUAL
54090: IFTRUE 54124
54092: LD_INT 27
54094: DOUBLE
54095: EQUAL
54096: IFTRUE 54124
54098: LD_INT 26
54100: DOUBLE
54101: EQUAL
54102: IFTRUE 54124
54104: LD_INT 28
54106: DOUBLE
54107: EQUAL
54108: IFTRUE 54124
54110: LD_INT 29
54112: DOUBLE
54113: EQUAL
54114: IFTRUE 54124
54116: LD_INT 30
54118: DOUBLE
54119: EQUAL
54120: IFTRUE 54124
54122: GO 54180
54124: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54125: LD_ADDR_VAR 0 9
54129: PUSH
54130: LD_VAR 0 59
54134: PUSH
54135: LD_VAR 0 60
54139: PUSH
54140: LD_VAR 0 61
54144: PUSH
54145: LD_VAR 0 62
54149: PUSH
54150: LD_VAR 0 63
54154: PUSH
54155: LD_VAR 0 64
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: PUSH
54168: LD_VAR 0 4
54172: PUSH
54173: LD_INT 1
54175: PLUS
54176: ARRAY
54177: ST_TO_ADDR
54178: GO 54181
54180: POP
// temp_list2 = [ ] ;
54181: LD_ADDR_VAR 0 10
54185: PUSH
54186: EMPTY
54187: ST_TO_ADDR
// for i in temp_list do
54188: LD_ADDR_VAR 0 8
54192: PUSH
54193: LD_VAR 0 9
54197: PUSH
54198: FOR_IN
54199: IFFALSE 54251
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54201: LD_ADDR_VAR 0 10
54205: PUSH
54206: LD_VAR 0 10
54210: PUSH
54211: LD_VAR 0 8
54215: PUSH
54216: LD_INT 1
54218: ARRAY
54219: PUSH
54220: LD_VAR 0 2
54224: PLUS
54225: PUSH
54226: LD_VAR 0 8
54230: PUSH
54231: LD_INT 2
54233: ARRAY
54234: PUSH
54235: LD_VAR 0 3
54239: PLUS
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: EMPTY
54246: LIST
54247: ADD
54248: ST_TO_ADDR
54249: GO 54198
54251: POP
54252: POP
// result = temp_list2 ;
54253: LD_ADDR_VAR 0 7
54257: PUSH
54258: LD_VAR 0 10
54262: ST_TO_ADDR
// end ;
54263: LD_VAR 0 7
54267: RET
// export function EnemyInRange ( unit , dist ) ; begin
54268: LD_INT 0
54270: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54271: LD_ADDR_VAR 0 3
54275: PUSH
54276: LD_VAR 0 1
54280: PPUSH
54281: CALL_OW 255
54285: PPUSH
54286: LD_VAR 0 1
54290: PPUSH
54291: CALL_OW 250
54295: PPUSH
54296: LD_VAR 0 1
54300: PPUSH
54301: CALL_OW 251
54305: PPUSH
54306: LD_VAR 0 2
54310: PPUSH
54311: CALL 27664 0 4
54315: PUSH
54316: LD_INT 4
54318: ARRAY
54319: ST_TO_ADDR
// end ;
54320: LD_VAR 0 3
54324: RET
// export function PlayerSeeMe ( unit ) ; begin
54325: LD_INT 0
54327: PPUSH
// result := See ( your_side , unit ) ;
54328: LD_ADDR_VAR 0 2
54332: PUSH
54333: LD_OWVAR 2
54337: PPUSH
54338: LD_VAR 0 1
54342: PPUSH
54343: CALL_OW 292
54347: ST_TO_ADDR
// end ;
54348: LD_VAR 0 2
54352: RET
// export function ReverseDir ( unit ) ; begin
54353: LD_INT 0
54355: PPUSH
// if not unit then
54356: LD_VAR 0 1
54360: NOT
54361: IFFALSE 54365
// exit ;
54363: GO 54388
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54365: LD_ADDR_VAR 0 2
54369: PUSH
54370: LD_VAR 0 1
54374: PPUSH
54375: CALL_OW 254
54379: PUSH
54380: LD_INT 3
54382: PLUS
54383: PUSH
54384: LD_INT 6
54386: MOD
54387: ST_TO_ADDR
// end ;
54388: LD_VAR 0 2
54392: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
54393: LD_INT 0
54395: PPUSH
54396: PPUSH
54397: PPUSH
54398: PPUSH
54399: PPUSH
54400: PPUSH
// if not unit or not hexes then
54401: LD_VAR 0 1
54405: NOT
54406: PUSH
54407: LD_VAR 0 2
54411: NOT
54412: OR
54413: IFFALSE 54417
// exit ;
54415: GO 54540
// dist := 9999 ;
54417: LD_ADDR_VAR 0 5
54421: PUSH
54422: LD_INT 9999
54424: ST_TO_ADDR
// for i = 1 to hexes do
54425: LD_ADDR_VAR 0 4
54429: PUSH
54430: DOUBLE
54431: LD_INT 1
54433: DEC
54434: ST_TO_ADDR
54435: LD_VAR 0 2
54439: PUSH
54440: FOR_TO
54441: IFFALSE 54528
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54443: LD_ADDR_VAR 0 6
54447: PUSH
54448: LD_VAR 0 1
54452: PPUSH
54453: LD_VAR 0 2
54457: PUSH
54458: LD_VAR 0 4
54462: ARRAY
54463: PUSH
54464: LD_INT 1
54466: ARRAY
54467: PPUSH
54468: LD_VAR 0 2
54472: PUSH
54473: LD_VAR 0 4
54477: ARRAY
54478: PUSH
54479: LD_INT 2
54481: ARRAY
54482: PPUSH
54483: CALL_OW 297
54487: ST_TO_ADDR
// if tdist < dist then
54488: LD_VAR 0 6
54492: PUSH
54493: LD_VAR 0 5
54497: LESS
54498: IFFALSE 54526
// begin hex := hexes [ i ] ;
54500: LD_ADDR_VAR 0 8
54504: PUSH
54505: LD_VAR 0 2
54509: PUSH
54510: LD_VAR 0 4
54514: ARRAY
54515: ST_TO_ADDR
// dist := tdist ;
54516: LD_ADDR_VAR 0 5
54520: PUSH
54521: LD_VAR 0 6
54525: ST_TO_ADDR
// end ; end ;
54526: GO 54440
54528: POP
54529: POP
// result := hex ;
54530: LD_ADDR_VAR 0 3
54534: PUSH
54535: LD_VAR 0 8
54539: ST_TO_ADDR
// end ;
54540: LD_VAR 0 3
54544: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54545: LD_INT 0
54547: PPUSH
54548: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54549: LD_VAR 0 1
54553: NOT
54554: PUSH
54555: LD_VAR 0 1
54559: PUSH
54560: LD_INT 21
54562: PUSH
54563: LD_INT 2
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 23
54572: PUSH
54573: LD_INT 2
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PPUSH
54584: CALL_OW 69
54588: IN
54589: NOT
54590: OR
54591: IFFALSE 54595
// exit ;
54593: GO 54642
// for i = 1 to 3 do
54595: LD_ADDR_VAR 0 3
54599: PUSH
54600: DOUBLE
54601: LD_INT 1
54603: DEC
54604: ST_TO_ADDR
54605: LD_INT 3
54607: PUSH
54608: FOR_TO
54609: IFFALSE 54640
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54611: LD_VAR 0 1
54615: PPUSH
54616: CALL_OW 250
54620: PPUSH
54621: LD_VAR 0 1
54625: PPUSH
54626: CALL_OW 251
54630: PPUSH
54631: LD_INT 1
54633: PPUSH
54634: CALL_OW 453
54638: GO 54608
54640: POP
54641: POP
// end ;
54642: LD_VAR 0 2
54646: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54647: LD_INT 0
54649: PPUSH
54650: PPUSH
54651: PPUSH
54652: PPUSH
54653: PPUSH
54654: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54655: LD_VAR 0 1
54659: NOT
54660: PUSH
54661: LD_VAR 0 2
54665: NOT
54666: OR
54667: PUSH
54668: LD_VAR 0 1
54672: PPUSH
54673: CALL_OW 314
54677: OR
54678: IFFALSE 54682
// exit ;
54680: GO 55123
// x := GetX ( enemy_unit ) ;
54682: LD_ADDR_VAR 0 7
54686: PUSH
54687: LD_VAR 0 2
54691: PPUSH
54692: CALL_OW 250
54696: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54697: LD_ADDR_VAR 0 8
54701: PUSH
54702: LD_VAR 0 2
54706: PPUSH
54707: CALL_OW 251
54711: ST_TO_ADDR
// if not x or not y then
54712: LD_VAR 0 7
54716: NOT
54717: PUSH
54718: LD_VAR 0 8
54722: NOT
54723: OR
54724: IFFALSE 54728
// exit ;
54726: GO 55123
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54728: LD_ADDR_VAR 0 6
54732: PUSH
54733: LD_VAR 0 7
54737: PPUSH
54738: LD_INT 0
54740: PPUSH
54741: LD_INT 4
54743: PPUSH
54744: CALL_OW 272
54748: PUSH
54749: LD_VAR 0 8
54753: PPUSH
54754: LD_INT 0
54756: PPUSH
54757: LD_INT 4
54759: PPUSH
54760: CALL_OW 273
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_VAR 0 7
54773: PPUSH
54774: LD_INT 1
54776: PPUSH
54777: LD_INT 4
54779: PPUSH
54780: CALL_OW 272
54784: PUSH
54785: LD_VAR 0 8
54789: PPUSH
54790: LD_INT 1
54792: PPUSH
54793: LD_INT 4
54795: PPUSH
54796: CALL_OW 273
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_VAR 0 7
54809: PPUSH
54810: LD_INT 2
54812: PPUSH
54813: LD_INT 4
54815: PPUSH
54816: CALL_OW 272
54820: PUSH
54821: LD_VAR 0 8
54825: PPUSH
54826: LD_INT 2
54828: PPUSH
54829: LD_INT 4
54831: PPUSH
54832: CALL_OW 273
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_VAR 0 7
54845: PPUSH
54846: LD_INT 3
54848: PPUSH
54849: LD_INT 4
54851: PPUSH
54852: CALL_OW 272
54856: PUSH
54857: LD_VAR 0 8
54861: PPUSH
54862: LD_INT 3
54864: PPUSH
54865: LD_INT 4
54867: PPUSH
54868: CALL_OW 273
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_VAR 0 7
54881: PPUSH
54882: LD_INT 4
54884: PPUSH
54885: LD_INT 4
54887: PPUSH
54888: CALL_OW 272
54892: PUSH
54893: LD_VAR 0 8
54897: PPUSH
54898: LD_INT 4
54900: PPUSH
54901: LD_INT 4
54903: PPUSH
54904: CALL_OW 273
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_VAR 0 7
54917: PPUSH
54918: LD_INT 5
54920: PPUSH
54921: LD_INT 4
54923: PPUSH
54924: CALL_OW 272
54928: PUSH
54929: LD_VAR 0 8
54933: PPUSH
54934: LD_INT 5
54936: PPUSH
54937: LD_INT 4
54939: PPUSH
54940: CALL_OW 273
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: ST_TO_ADDR
// for i = tmp downto 1 do
54957: LD_ADDR_VAR 0 4
54961: PUSH
54962: DOUBLE
54963: LD_VAR 0 6
54967: INC
54968: ST_TO_ADDR
54969: LD_INT 1
54971: PUSH
54972: FOR_DOWNTO
54973: IFFALSE 55074
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54975: LD_VAR 0 6
54979: PUSH
54980: LD_VAR 0 4
54984: ARRAY
54985: PUSH
54986: LD_INT 1
54988: ARRAY
54989: PPUSH
54990: LD_VAR 0 6
54994: PUSH
54995: LD_VAR 0 4
54999: ARRAY
55000: PUSH
55001: LD_INT 2
55003: ARRAY
55004: PPUSH
55005: CALL_OW 488
55009: NOT
55010: PUSH
55011: LD_VAR 0 6
55015: PUSH
55016: LD_VAR 0 4
55020: ARRAY
55021: PUSH
55022: LD_INT 1
55024: ARRAY
55025: PPUSH
55026: LD_VAR 0 6
55030: PUSH
55031: LD_VAR 0 4
55035: ARRAY
55036: PUSH
55037: LD_INT 2
55039: ARRAY
55040: PPUSH
55041: CALL_OW 428
55045: PUSH
55046: LD_INT 0
55048: NONEQUAL
55049: OR
55050: IFFALSE 55072
// tmp := Delete ( tmp , i ) ;
55052: LD_ADDR_VAR 0 6
55056: PUSH
55057: LD_VAR 0 6
55061: PPUSH
55062: LD_VAR 0 4
55066: PPUSH
55067: CALL_OW 3
55071: ST_TO_ADDR
55072: GO 54972
55074: POP
55075: POP
// j := GetClosestHex ( unit , tmp ) ;
55076: LD_ADDR_VAR 0 5
55080: PUSH
55081: LD_VAR 0 1
55085: PPUSH
55086: LD_VAR 0 6
55090: PPUSH
55091: CALL 54393 0 2
55095: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55096: LD_VAR 0 1
55100: PPUSH
55101: LD_VAR 0 5
55105: PUSH
55106: LD_INT 1
55108: ARRAY
55109: PPUSH
55110: LD_VAR 0 5
55114: PUSH
55115: LD_INT 2
55117: ARRAY
55118: PPUSH
55119: CALL_OW 111
// end ;
55123: LD_VAR 0 3
55127: RET
// export function PrepareApemanSoldier ( ) ; begin
55128: LD_INT 0
55130: PPUSH
// uc_nation := 0 ;
55131: LD_ADDR_OWVAR 21
55135: PUSH
55136: LD_INT 0
55138: ST_TO_ADDR
// hc_sex := sex_male ;
55139: LD_ADDR_OWVAR 27
55143: PUSH
55144: LD_INT 1
55146: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
55147: LD_ADDR_OWVAR 28
55151: PUSH
55152: LD_INT 15
55154: ST_TO_ADDR
// hc_gallery :=  ;
55155: LD_ADDR_OWVAR 33
55159: PUSH
55160: LD_STRING 
55162: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55163: LD_ADDR_OWVAR 31
55167: PUSH
55168: LD_INT 0
55170: PPUSH
55171: LD_INT 3
55173: PPUSH
55174: CALL_OW 12
55178: PUSH
55179: LD_INT 0
55181: PPUSH
55182: LD_INT 3
55184: PPUSH
55185: CALL_OW 12
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: ST_TO_ADDR
// end ;
55202: LD_VAR 0 1
55206: RET
// export function PrepareApemanEngineer ( ) ; begin
55207: LD_INT 0
55209: PPUSH
// uc_nation := 0 ;
55210: LD_ADDR_OWVAR 21
55214: PUSH
55215: LD_INT 0
55217: ST_TO_ADDR
// hc_sex := sex_male ;
55218: LD_ADDR_OWVAR 27
55222: PUSH
55223: LD_INT 1
55225: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
55226: LD_ADDR_OWVAR 28
55230: PUSH
55231: LD_INT 16
55233: ST_TO_ADDR
// hc_gallery :=  ;
55234: LD_ADDR_OWVAR 33
55238: PUSH
55239: LD_STRING 
55241: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55242: LD_ADDR_OWVAR 31
55246: PUSH
55247: LD_INT 0
55249: PPUSH
55250: LD_INT 3
55252: PPUSH
55253: CALL_OW 12
55257: PUSH
55258: LD_INT 0
55260: PPUSH
55261: LD_INT 3
55263: PPUSH
55264: CALL_OW 12
55268: PUSH
55269: LD_INT 0
55271: PUSH
55272: LD_INT 0
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: ST_TO_ADDR
// end ;
55281: LD_VAR 0 1
55285: RET
// export function PrepareApeman ( agressivity ) ; begin
55286: LD_INT 0
55288: PPUSH
// uc_side := 0 ;
55289: LD_ADDR_OWVAR 20
55293: PUSH
55294: LD_INT 0
55296: ST_TO_ADDR
// uc_nation := 0 ;
55297: LD_ADDR_OWVAR 21
55301: PUSH
55302: LD_INT 0
55304: ST_TO_ADDR
// hc_sex := sex_male ;
55305: LD_ADDR_OWVAR 27
55309: PUSH
55310: LD_INT 1
55312: ST_TO_ADDR
// hc_class := class_apeman ;
55313: LD_ADDR_OWVAR 28
55317: PUSH
55318: LD_INT 12
55320: ST_TO_ADDR
// hc_gallery :=  ;
55321: LD_ADDR_OWVAR 33
55325: PUSH
55326: LD_STRING 
55328: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55329: LD_ADDR_OWVAR 35
55333: PUSH
55334: LD_VAR 0 1
55338: NEG
55339: PPUSH
55340: LD_VAR 0 1
55344: PPUSH
55345: CALL_OW 12
55349: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55350: LD_ADDR_OWVAR 31
55354: PUSH
55355: LD_INT 0
55357: PPUSH
55358: LD_INT 3
55360: PPUSH
55361: CALL_OW 12
55365: PUSH
55366: LD_INT 0
55368: PPUSH
55369: LD_INT 3
55371: PPUSH
55372: CALL_OW 12
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: LD_INT 0
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: ST_TO_ADDR
// end ;
55389: LD_VAR 0 2
55393: RET
// export function PrepareTiger ( agressivity ) ; begin
55394: LD_INT 0
55396: PPUSH
// uc_side := 0 ;
55397: LD_ADDR_OWVAR 20
55401: PUSH
55402: LD_INT 0
55404: ST_TO_ADDR
// uc_nation := 0 ;
55405: LD_ADDR_OWVAR 21
55409: PUSH
55410: LD_INT 0
55412: ST_TO_ADDR
// hc_class := class_tiger ;
55413: LD_ADDR_OWVAR 28
55417: PUSH
55418: LD_INT 14
55420: ST_TO_ADDR
// hc_gallery :=  ;
55421: LD_ADDR_OWVAR 33
55425: PUSH
55426: LD_STRING 
55428: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55429: LD_ADDR_OWVAR 35
55433: PUSH
55434: LD_VAR 0 1
55438: NEG
55439: PPUSH
55440: LD_VAR 0 1
55444: PPUSH
55445: CALL_OW 12
55449: ST_TO_ADDR
// end ;
55450: LD_VAR 0 2
55454: RET
// export function PrepareEnchidna ( ) ; begin
55455: LD_INT 0
55457: PPUSH
// uc_side := 0 ;
55458: LD_ADDR_OWVAR 20
55462: PUSH
55463: LD_INT 0
55465: ST_TO_ADDR
// uc_nation := 0 ;
55466: LD_ADDR_OWVAR 21
55470: PUSH
55471: LD_INT 0
55473: ST_TO_ADDR
// hc_class := class_baggie ;
55474: LD_ADDR_OWVAR 28
55478: PUSH
55479: LD_INT 13
55481: ST_TO_ADDR
// hc_gallery :=  ;
55482: LD_ADDR_OWVAR 33
55486: PUSH
55487: LD_STRING 
55489: ST_TO_ADDR
// end ;
55490: LD_VAR 0 1
55494: RET
// export function PrepareFrog ( ) ; begin
55495: LD_INT 0
55497: PPUSH
// uc_side := 0 ;
55498: LD_ADDR_OWVAR 20
55502: PUSH
55503: LD_INT 0
55505: ST_TO_ADDR
// uc_nation := 0 ;
55506: LD_ADDR_OWVAR 21
55510: PUSH
55511: LD_INT 0
55513: ST_TO_ADDR
// hc_class := class_frog ;
55514: LD_ADDR_OWVAR 28
55518: PUSH
55519: LD_INT 19
55521: ST_TO_ADDR
// hc_gallery :=  ;
55522: LD_ADDR_OWVAR 33
55526: PUSH
55527: LD_STRING 
55529: ST_TO_ADDR
// end ;
55530: LD_VAR 0 1
55534: RET
// export function PrepareFish ( ) ; begin
55535: LD_INT 0
55537: PPUSH
// uc_side := 0 ;
55538: LD_ADDR_OWVAR 20
55542: PUSH
55543: LD_INT 0
55545: ST_TO_ADDR
// uc_nation := 0 ;
55546: LD_ADDR_OWVAR 21
55550: PUSH
55551: LD_INT 0
55553: ST_TO_ADDR
// hc_class := class_fish ;
55554: LD_ADDR_OWVAR 28
55558: PUSH
55559: LD_INT 20
55561: ST_TO_ADDR
// hc_gallery :=  ;
55562: LD_ADDR_OWVAR 33
55566: PUSH
55567: LD_STRING 
55569: ST_TO_ADDR
// end ;
55570: LD_VAR 0 1
55574: RET
// export function PrepareBird ( ) ; begin
55575: LD_INT 0
55577: PPUSH
// uc_side := 0 ;
55578: LD_ADDR_OWVAR 20
55582: PUSH
55583: LD_INT 0
55585: ST_TO_ADDR
// uc_nation := 0 ;
55586: LD_ADDR_OWVAR 21
55590: PUSH
55591: LD_INT 0
55593: ST_TO_ADDR
// hc_class := class_phororhacos ;
55594: LD_ADDR_OWVAR 28
55598: PUSH
55599: LD_INT 18
55601: ST_TO_ADDR
// hc_gallery :=  ;
55602: LD_ADDR_OWVAR 33
55606: PUSH
55607: LD_STRING 
55609: ST_TO_ADDR
// end ;
55610: LD_VAR 0 1
55614: RET
// export function PrepareHorse ( ) ; begin
55615: LD_INT 0
55617: PPUSH
// uc_side := 0 ;
55618: LD_ADDR_OWVAR 20
55622: PUSH
55623: LD_INT 0
55625: ST_TO_ADDR
// uc_nation := 0 ;
55626: LD_ADDR_OWVAR 21
55630: PUSH
55631: LD_INT 0
55633: ST_TO_ADDR
// hc_class := class_horse ;
55634: LD_ADDR_OWVAR 28
55638: PUSH
55639: LD_INT 21
55641: ST_TO_ADDR
// hc_gallery :=  ;
55642: LD_ADDR_OWVAR 33
55646: PUSH
55647: LD_STRING 
55649: ST_TO_ADDR
// end ;
55650: LD_VAR 0 1
55654: RET
// export function PrepareMastodont ( ) ; begin
55655: LD_INT 0
55657: PPUSH
// uc_side := 0 ;
55658: LD_ADDR_OWVAR 20
55662: PUSH
55663: LD_INT 0
55665: ST_TO_ADDR
// uc_nation := 0 ;
55666: LD_ADDR_OWVAR 21
55670: PUSH
55671: LD_INT 0
55673: ST_TO_ADDR
// vc_chassis := class_mastodont ;
55674: LD_ADDR_OWVAR 37
55678: PUSH
55679: LD_INT 31
55681: ST_TO_ADDR
// vc_control := control_rider ;
55682: LD_ADDR_OWVAR 38
55686: PUSH
55687: LD_INT 4
55689: ST_TO_ADDR
// end ;
55690: LD_VAR 0 1
55694: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55695: LD_INT 0
55697: PPUSH
55698: PPUSH
55699: PPUSH
// uc_side = 0 ;
55700: LD_ADDR_OWVAR 20
55704: PUSH
55705: LD_INT 0
55707: ST_TO_ADDR
// uc_nation = 0 ;
55708: LD_ADDR_OWVAR 21
55712: PUSH
55713: LD_INT 0
55715: ST_TO_ADDR
// InitHc_All ( ) ;
55716: CALL_OW 584
// InitVc ;
55720: CALL_OW 20
// if mastodonts then
55724: LD_VAR 0 6
55728: IFFALSE 55795
// for i = 1 to mastodonts do
55730: LD_ADDR_VAR 0 11
55734: PUSH
55735: DOUBLE
55736: LD_INT 1
55738: DEC
55739: ST_TO_ADDR
55740: LD_VAR 0 6
55744: PUSH
55745: FOR_TO
55746: IFFALSE 55793
// begin vc_chassis := 31 ;
55748: LD_ADDR_OWVAR 37
55752: PUSH
55753: LD_INT 31
55755: ST_TO_ADDR
// vc_control := control_rider ;
55756: LD_ADDR_OWVAR 38
55760: PUSH
55761: LD_INT 4
55763: ST_TO_ADDR
// animal := CreateVehicle ;
55764: LD_ADDR_VAR 0 12
55768: PUSH
55769: CALL_OW 45
55773: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55774: LD_VAR 0 12
55778: PPUSH
55779: LD_VAR 0 8
55783: PPUSH
55784: LD_INT 0
55786: PPUSH
55787: CALL 57930 0 3
// end ;
55791: GO 55745
55793: POP
55794: POP
// if horses then
55795: LD_VAR 0 5
55799: IFFALSE 55866
// for i = 1 to horses do
55801: LD_ADDR_VAR 0 11
55805: PUSH
55806: DOUBLE
55807: LD_INT 1
55809: DEC
55810: ST_TO_ADDR
55811: LD_VAR 0 5
55815: PUSH
55816: FOR_TO
55817: IFFALSE 55864
// begin hc_class := 21 ;
55819: LD_ADDR_OWVAR 28
55823: PUSH
55824: LD_INT 21
55826: ST_TO_ADDR
// hc_gallery :=  ;
55827: LD_ADDR_OWVAR 33
55831: PUSH
55832: LD_STRING 
55834: ST_TO_ADDR
// animal := CreateHuman ;
55835: LD_ADDR_VAR 0 12
55839: PUSH
55840: CALL_OW 44
55844: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55845: LD_VAR 0 12
55849: PPUSH
55850: LD_VAR 0 8
55854: PPUSH
55855: LD_INT 0
55857: PPUSH
55858: CALL 57930 0 3
// end ;
55862: GO 55816
55864: POP
55865: POP
// if birds then
55866: LD_VAR 0 1
55870: IFFALSE 55937
// for i = 1 to birds do
55872: LD_ADDR_VAR 0 11
55876: PUSH
55877: DOUBLE
55878: LD_INT 1
55880: DEC
55881: ST_TO_ADDR
55882: LD_VAR 0 1
55886: PUSH
55887: FOR_TO
55888: IFFALSE 55935
// begin hc_class = 18 ;
55890: LD_ADDR_OWVAR 28
55894: PUSH
55895: LD_INT 18
55897: ST_TO_ADDR
// hc_gallery =  ;
55898: LD_ADDR_OWVAR 33
55902: PUSH
55903: LD_STRING 
55905: ST_TO_ADDR
// animal := CreateHuman ;
55906: LD_ADDR_VAR 0 12
55910: PUSH
55911: CALL_OW 44
55915: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55916: LD_VAR 0 12
55920: PPUSH
55921: LD_VAR 0 8
55925: PPUSH
55926: LD_INT 0
55928: PPUSH
55929: CALL 57930 0 3
// end ;
55933: GO 55887
55935: POP
55936: POP
// if tigers then
55937: LD_VAR 0 2
55941: IFFALSE 56025
// for i = 1 to tigers do
55943: LD_ADDR_VAR 0 11
55947: PUSH
55948: DOUBLE
55949: LD_INT 1
55951: DEC
55952: ST_TO_ADDR
55953: LD_VAR 0 2
55957: PUSH
55958: FOR_TO
55959: IFFALSE 56023
// begin hc_class = class_tiger ;
55961: LD_ADDR_OWVAR 28
55965: PUSH
55966: LD_INT 14
55968: ST_TO_ADDR
// hc_gallery =  ;
55969: LD_ADDR_OWVAR 33
55973: PUSH
55974: LD_STRING 
55976: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55977: LD_ADDR_OWVAR 35
55981: PUSH
55982: LD_INT 7
55984: NEG
55985: PPUSH
55986: LD_INT 7
55988: PPUSH
55989: CALL_OW 12
55993: ST_TO_ADDR
// animal := CreateHuman ;
55994: LD_ADDR_VAR 0 12
55998: PUSH
55999: CALL_OW 44
56003: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56004: LD_VAR 0 12
56008: PPUSH
56009: LD_VAR 0 8
56013: PPUSH
56014: LD_INT 0
56016: PPUSH
56017: CALL 57930 0 3
// end ;
56021: GO 55958
56023: POP
56024: POP
// if apemans then
56025: LD_VAR 0 3
56029: IFFALSE 56152
// for i = 1 to apemans do
56031: LD_ADDR_VAR 0 11
56035: PUSH
56036: DOUBLE
56037: LD_INT 1
56039: DEC
56040: ST_TO_ADDR
56041: LD_VAR 0 3
56045: PUSH
56046: FOR_TO
56047: IFFALSE 56150
// begin hc_class = class_apeman ;
56049: LD_ADDR_OWVAR 28
56053: PUSH
56054: LD_INT 12
56056: ST_TO_ADDR
// hc_gallery =  ;
56057: LD_ADDR_OWVAR 33
56061: PUSH
56062: LD_STRING 
56064: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56065: LD_ADDR_OWVAR 35
56069: PUSH
56070: LD_INT 2
56072: NEG
56073: PPUSH
56074: LD_INT 2
56076: PPUSH
56077: CALL_OW 12
56081: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56082: LD_ADDR_OWVAR 31
56086: PUSH
56087: LD_INT 1
56089: PPUSH
56090: LD_INT 3
56092: PPUSH
56093: CALL_OW 12
56097: PUSH
56098: LD_INT 1
56100: PPUSH
56101: LD_INT 3
56103: PPUSH
56104: CALL_OW 12
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: ST_TO_ADDR
// animal := CreateHuman ;
56121: LD_ADDR_VAR 0 12
56125: PUSH
56126: CALL_OW 44
56130: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56131: LD_VAR 0 12
56135: PPUSH
56136: LD_VAR 0 8
56140: PPUSH
56141: LD_INT 0
56143: PPUSH
56144: CALL 57930 0 3
// end ;
56148: GO 56046
56150: POP
56151: POP
// if enchidnas then
56152: LD_VAR 0 4
56156: IFFALSE 56223
// for i = 1 to enchidnas do
56158: LD_ADDR_VAR 0 11
56162: PUSH
56163: DOUBLE
56164: LD_INT 1
56166: DEC
56167: ST_TO_ADDR
56168: LD_VAR 0 4
56172: PUSH
56173: FOR_TO
56174: IFFALSE 56221
// begin hc_class = 13 ;
56176: LD_ADDR_OWVAR 28
56180: PUSH
56181: LD_INT 13
56183: ST_TO_ADDR
// hc_gallery =  ;
56184: LD_ADDR_OWVAR 33
56188: PUSH
56189: LD_STRING 
56191: ST_TO_ADDR
// animal := CreateHuman ;
56192: LD_ADDR_VAR 0 12
56196: PUSH
56197: CALL_OW 44
56201: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56202: LD_VAR 0 12
56206: PPUSH
56207: LD_VAR 0 8
56211: PPUSH
56212: LD_INT 0
56214: PPUSH
56215: CALL 57930 0 3
// end ;
56219: GO 56173
56221: POP
56222: POP
// if fishes then
56223: LD_VAR 0 7
56227: IFFALSE 56294
// for i = 1 to fishes do
56229: LD_ADDR_VAR 0 11
56233: PUSH
56234: DOUBLE
56235: LD_INT 1
56237: DEC
56238: ST_TO_ADDR
56239: LD_VAR 0 7
56243: PUSH
56244: FOR_TO
56245: IFFALSE 56292
// begin hc_class = 20 ;
56247: LD_ADDR_OWVAR 28
56251: PUSH
56252: LD_INT 20
56254: ST_TO_ADDR
// hc_gallery =  ;
56255: LD_ADDR_OWVAR 33
56259: PUSH
56260: LD_STRING 
56262: ST_TO_ADDR
// animal := CreateHuman ;
56263: LD_ADDR_VAR 0 12
56267: PUSH
56268: CALL_OW 44
56272: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56273: LD_VAR 0 12
56277: PPUSH
56278: LD_VAR 0 9
56282: PPUSH
56283: LD_INT 0
56285: PPUSH
56286: CALL 57930 0 3
// end ;
56290: GO 56244
56292: POP
56293: POP
// end ;
56294: LD_VAR 0 10
56298: RET
// export function WantHeal ( sci , unit ) ; begin
56299: LD_INT 0
56301: PPUSH
// if GetTaskList ( sci ) > 0 then
56302: LD_VAR 0 1
56306: PPUSH
56307: CALL_OW 437
56311: PUSH
56312: LD_INT 0
56314: GREATER
56315: IFFALSE 56385
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56317: LD_VAR 0 1
56321: PPUSH
56322: CALL_OW 437
56326: PUSH
56327: LD_INT 1
56329: ARRAY
56330: PUSH
56331: LD_INT 1
56333: ARRAY
56334: PUSH
56335: LD_STRING l
56337: EQUAL
56338: PUSH
56339: LD_VAR 0 1
56343: PPUSH
56344: CALL_OW 437
56348: PUSH
56349: LD_INT 1
56351: ARRAY
56352: PUSH
56353: LD_INT 4
56355: ARRAY
56356: PUSH
56357: LD_VAR 0 2
56361: EQUAL
56362: AND
56363: IFFALSE 56375
// result := true else
56365: LD_ADDR_VAR 0 3
56369: PUSH
56370: LD_INT 1
56372: ST_TO_ADDR
56373: GO 56383
// result := false ;
56375: LD_ADDR_VAR 0 3
56379: PUSH
56380: LD_INT 0
56382: ST_TO_ADDR
// end else
56383: GO 56393
// result := false ;
56385: LD_ADDR_VAR 0 3
56389: PUSH
56390: LD_INT 0
56392: ST_TO_ADDR
// end ;
56393: LD_VAR 0 3
56397: RET
// export function HealTarget ( sci ) ; begin
56398: LD_INT 0
56400: PPUSH
// if not sci then
56401: LD_VAR 0 1
56405: NOT
56406: IFFALSE 56410
// exit ;
56408: GO 56475
// result := 0 ;
56410: LD_ADDR_VAR 0 2
56414: PUSH
56415: LD_INT 0
56417: ST_TO_ADDR
// if GetTaskList ( sci ) then
56418: LD_VAR 0 1
56422: PPUSH
56423: CALL_OW 437
56427: IFFALSE 56475
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56429: LD_VAR 0 1
56433: PPUSH
56434: CALL_OW 437
56438: PUSH
56439: LD_INT 1
56441: ARRAY
56442: PUSH
56443: LD_INT 1
56445: ARRAY
56446: PUSH
56447: LD_STRING l
56449: EQUAL
56450: IFFALSE 56475
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56452: LD_ADDR_VAR 0 2
56456: PUSH
56457: LD_VAR 0 1
56461: PPUSH
56462: CALL_OW 437
56466: PUSH
56467: LD_INT 1
56469: ARRAY
56470: PUSH
56471: LD_INT 4
56473: ARRAY
56474: ST_TO_ADDR
// end ;
56475: LD_VAR 0 2
56479: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56480: LD_INT 0
56482: PPUSH
56483: PPUSH
56484: PPUSH
56485: PPUSH
// if not base_units then
56486: LD_VAR 0 1
56490: NOT
56491: IFFALSE 56495
// exit ;
56493: GO 56582
// result := false ;
56495: LD_ADDR_VAR 0 2
56499: PUSH
56500: LD_INT 0
56502: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56503: LD_ADDR_VAR 0 5
56507: PUSH
56508: LD_VAR 0 1
56512: PPUSH
56513: LD_INT 21
56515: PUSH
56516: LD_INT 3
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PPUSH
56523: CALL_OW 72
56527: ST_TO_ADDR
// if not tmp then
56528: LD_VAR 0 5
56532: NOT
56533: IFFALSE 56537
// exit ;
56535: GO 56582
// for i in tmp do
56537: LD_ADDR_VAR 0 3
56541: PUSH
56542: LD_VAR 0 5
56546: PUSH
56547: FOR_IN
56548: IFFALSE 56580
// begin result := EnemyInRange ( i , 22 ) ;
56550: LD_ADDR_VAR 0 2
56554: PUSH
56555: LD_VAR 0 3
56559: PPUSH
56560: LD_INT 22
56562: PPUSH
56563: CALL 54268 0 2
56567: ST_TO_ADDR
// if result then
56568: LD_VAR 0 2
56572: IFFALSE 56578
// exit ;
56574: POP
56575: POP
56576: GO 56582
// end ;
56578: GO 56547
56580: POP
56581: POP
// end ;
56582: LD_VAR 0 2
56586: RET
// export function FilterByTag ( units , tag ) ; begin
56587: LD_INT 0
56589: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
56590: LD_ADDR_VAR 0 3
56594: PUSH
56595: LD_VAR 0 1
56599: PPUSH
56600: LD_INT 120
56602: PUSH
56603: LD_VAR 0 2
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PPUSH
56612: CALL_OW 72
56616: ST_TO_ADDR
// end ;
56617: LD_VAR 0 3
56621: RET
// export function IsDriver ( un ) ; begin
56622: LD_INT 0
56624: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56625: LD_ADDR_VAR 0 2
56629: PUSH
56630: LD_VAR 0 1
56634: PUSH
56635: LD_INT 55
56637: PUSH
56638: EMPTY
56639: LIST
56640: PPUSH
56641: CALL_OW 69
56645: IN
56646: ST_TO_ADDR
// end ;
56647: LD_VAR 0 2
56651: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56652: LD_INT 0
56654: PPUSH
56655: PPUSH
// list := [ ] ;
56656: LD_ADDR_VAR 0 5
56660: PUSH
56661: EMPTY
56662: ST_TO_ADDR
// case d of 0 :
56663: LD_VAR 0 3
56667: PUSH
56668: LD_INT 0
56670: DOUBLE
56671: EQUAL
56672: IFTRUE 56676
56674: GO 56809
56676: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56677: LD_ADDR_VAR 0 5
56681: PUSH
56682: LD_VAR 0 1
56686: PUSH
56687: LD_INT 4
56689: MINUS
56690: PUSH
56691: LD_VAR 0 2
56695: PUSH
56696: LD_INT 4
56698: MINUS
56699: PUSH
56700: LD_INT 2
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: LIST
56707: PUSH
56708: LD_VAR 0 1
56712: PUSH
56713: LD_INT 3
56715: MINUS
56716: PUSH
56717: LD_VAR 0 2
56721: PUSH
56722: LD_INT 1
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: LIST
56729: PUSH
56730: LD_VAR 0 1
56734: PUSH
56735: LD_INT 4
56737: PLUS
56738: PUSH
56739: LD_VAR 0 2
56743: PUSH
56744: LD_INT 4
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: LIST
56751: PUSH
56752: LD_VAR 0 1
56756: PUSH
56757: LD_INT 3
56759: PLUS
56760: PUSH
56761: LD_VAR 0 2
56765: PUSH
56766: LD_INT 3
56768: PLUS
56769: PUSH
56770: LD_INT 5
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: LIST
56777: PUSH
56778: LD_VAR 0 1
56782: PUSH
56783: LD_VAR 0 2
56787: PUSH
56788: LD_INT 4
56790: PLUS
56791: PUSH
56792: LD_INT 0
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: LIST
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: ST_TO_ADDR
// end ; 1 :
56807: GO 57507
56809: LD_INT 1
56811: DOUBLE
56812: EQUAL
56813: IFTRUE 56817
56815: GO 56950
56817: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56818: LD_ADDR_VAR 0 5
56822: PUSH
56823: LD_VAR 0 1
56827: PUSH
56828: LD_VAR 0 2
56832: PUSH
56833: LD_INT 4
56835: MINUS
56836: PUSH
56837: LD_INT 3
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: LIST
56844: PUSH
56845: LD_VAR 0 1
56849: PUSH
56850: LD_INT 3
56852: MINUS
56853: PUSH
56854: LD_VAR 0 2
56858: PUSH
56859: LD_INT 3
56861: MINUS
56862: PUSH
56863: LD_INT 2
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: LIST
56870: PUSH
56871: LD_VAR 0 1
56875: PUSH
56876: LD_INT 4
56878: MINUS
56879: PUSH
56880: LD_VAR 0 2
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: LIST
56892: PUSH
56893: LD_VAR 0 1
56897: PUSH
56898: LD_VAR 0 2
56902: PUSH
56903: LD_INT 3
56905: PLUS
56906: PUSH
56907: LD_INT 0
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: LIST
56914: PUSH
56915: LD_VAR 0 1
56919: PUSH
56920: LD_INT 4
56922: PLUS
56923: PUSH
56924: LD_VAR 0 2
56928: PUSH
56929: LD_INT 4
56931: PLUS
56932: PUSH
56933: LD_INT 5
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: LIST
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: ST_TO_ADDR
// end ; 2 :
56948: GO 57507
56950: LD_INT 2
56952: DOUBLE
56953: EQUAL
56954: IFTRUE 56958
56956: GO 57087
56958: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56959: LD_ADDR_VAR 0 5
56963: PUSH
56964: LD_VAR 0 1
56968: PUSH
56969: LD_VAR 0 2
56973: PUSH
56974: LD_INT 3
56976: MINUS
56977: PUSH
56978: LD_INT 3
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: LIST
56985: PUSH
56986: LD_VAR 0 1
56990: PUSH
56991: LD_INT 4
56993: PLUS
56994: PUSH
56995: LD_VAR 0 2
56999: PUSH
57000: LD_INT 4
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: LIST
57007: PUSH
57008: LD_VAR 0 1
57012: PUSH
57013: LD_VAR 0 2
57017: PUSH
57018: LD_INT 4
57020: PLUS
57021: PUSH
57022: LD_INT 0
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: LIST
57029: PUSH
57030: LD_VAR 0 1
57034: PUSH
57035: LD_INT 3
57037: MINUS
57038: PUSH
57039: LD_VAR 0 2
57043: PUSH
57044: LD_INT 1
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: LIST
57051: PUSH
57052: LD_VAR 0 1
57056: PUSH
57057: LD_INT 4
57059: MINUS
57060: PUSH
57061: LD_VAR 0 2
57065: PUSH
57066: LD_INT 4
57068: MINUS
57069: PUSH
57070: LD_INT 2
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: LIST
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: ST_TO_ADDR
// end ; 3 :
57085: GO 57507
57087: LD_INT 3
57089: DOUBLE
57090: EQUAL
57091: IFTRUE 57095
57093: GO 57228
57095: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57096: LD_ADDR_VAR 0 5
57100: PUSH
57101: LD_VAR 0 1
57105: PUSH
57106: LD_INT 3
57108: PLUS
57109: PUSH
57110: LD_VAR 0 2
57114: PUSH
57115: LD_INT 4
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: LIST
57122: PUSH
57123: LD_VAR 0 1
57127: PUSH
57128: LD_INT 4
57130: PLUS
57131: PUSH
57132: LD_VAR 0 2
57136: PUSH
57137: LD_INT 4
57139: PLUS
57140: PUSH
57141: LD_INT 5
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: LIST
57148: PUSH
57149: LD_VAR 0 1
57153: PUSH
57154: LD_INT 4
57156: MINUS
57157: PUSH
57158: LD_VAR 0 2
57162: PUSH
57163: LD_INT 1
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: LIST
57170: PUSH
57171: LD_VAR 0 1
57175: PUSH
57176: LD_VAR 0 2
57180: PUSH
57181: LD_INT 4
57183: MINUS
57184: PUSH
57185: LD_INT 3
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: LIST
57192: PUSH
57193: LD_VAR 0 1
57197: PUSH
57198: LD_INT 3
57200: MINUS
57201: PUSH
57202: LD_VAR 0 2
57206: PUSH
57207: LD_INT 3
57209: MINUS
57210: PUSH
57211: LD_INT 2
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: LIST
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: ST_TO_ADDR
// end ; 4 :
57226: GO 57507
57228: LD_INT 4
57230: DOUBLE
57231: EQUAL
57232: IFTRUE 57236
57234: GO 57369
57236: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57237: LD_ADDR_VAR 0 5
57241: PUSH
57242: LD_VAR 0 1
57246: PUSH
57247: LD_VAR 0 2
57251: PUSH
57252: LD_INT 4
57254: PLUS
57255: PUSH
57256: LD_INT 0
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: LIST
57263: PUSH
57264: LD_VAR 0 1
57268: PUSH
57269: LD_INT 3
57271: PLUS
57272: PUSH
57273: LD_VAR 0 2
57277: PUSH
57278: LD_INT 3
57280: PLUS
57281: PUSH
57282: LD_INT 5
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: LIST
57289: PUSH
57290: LD_VAR 0 1
57294: PUSH
57295: LD_INT 4
57297: PLUS
57298: PUSH
57299: LD_VAR 0 2
57303: PUSH
57304: LD_INT 4
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: LIST
57311: PUSH
57312: LD_VAR 0 1
57316: PUSH
57317: LD_VAR 0 2
57321: PUSH
57322: LD_INT 3
57324: MINUS
57325: PUSH
57326: LD_INT 3
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: LIST
57333: PUSH
57334: LD_VAR 0 1
57338: PUSH
57339: LD_INT 4
57341: MINUS
57342: PUSH
57343: LD_VAR 0 2
57347: PUSH
57348: LD_INT 4
57350: MINUS
57351: PUSH
57352: LD_INT 2
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: LIST
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: ST_TO_ADDR
// end ; 5 :
57367: GO 57507
57369: LD_INT 5
57371: DOUBLE
57372: EQUAL
57373: IFTRUE 57377
57375: GO 57506
57377: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57378: LD_ADDR_VAR 0 5
57382: PUSH
57383: LD_VAR 0 1
57387: PUSH
57388: LD_INT 4
57390: MINUS
57391: PUSH
57392: LD_VAR 0 2
57396: PUSH
57397: LD_INT 1
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: LIST
57404: PUSH
57405: LD_VAR 0 1
57409: PUSH
57410: LD_VAR 0 2
57414: PUSH
57415: LD_INT 4
57417: MINUS
57418: PUSH
57419: LD_INT 3
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: LIST
57426: PUSH
57427: LD_VAR 0 1
57431: PUSH
57432: LD_INT 4
57434: PLUS
57435: PUSH
57436: LD_VAR 0 2
57440: PUSH
57441: LD_INT 4
57443: PLUS
57444: PUSH
57445: LD_INT 5
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: LIST
57452: PUSH
57453: LD_VAR 0 1
57457: PUSH
57458: LD_INT 3
57460: PLUS
57461: PUSH
57462: LD_VAR 0 2
57466: PUSH
57467: LD_INT 4
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: LIST
57474: PUSH
57475: LD_VAR 0 1
57479: PUSH
57480: LD_VAR 0 2
57484: PUSH
57485: LD_INT 3
57487: PLUS
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: LIST
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: ST_TO_ADDR
// end ; end ;
57504: GO 57507
57506: POP
// result := list ;
57507: LD_ADDR_VAR 0 4
57511: PUSH
57512: LD_VAR 0 5
57516: ST_TO_ADDR
// end ;
57517: LD_VAR 0 4
57521: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57522: LD_INT 0
57524: PPUSH
57525: PPUSH
57526: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57527: LD_VAR 0 1
57531: NOT
57532: PUSH
57533: LD_VAR 0 2
57537: PUSH
57538: LD_INT 1
57540: PUSH
57541: LD_INT 2
57543: PUSH
57544: LD_INT 3
57546: PUSH
57547: LD_INT 4
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: IN
57556: NOT
57557: OR
57558: IFFALSE 57562
// exit ;
57560: GO 57654
// tmp := [ ] ;
57562: LD_ADDR_VAR 0 5
57566: PUSH
57567: EMPTY
57568: ST_TO_ADDR
// for i in units do
57569: LD_ADDR_VAR 0 4
57573: PUSH
57574: LD_VAR 0 1
57578: PUSH
57579: FOR_IN
57580: IFFALSE 57623
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
57582: LD_ADDR_VAR 0 5
57586: PUSH
57587: LD_VAR 0 5
57591: PPUSH
57592: LD_VAR 0 5
57596: PUSH
57597: LD_INT 1
57599: PLUS
57600: PPUSH
57601: LD_VAR 0 4
57605: PPUSH
57606: LD_VAR 0 2
57610: PPUSH
57611: CALL_OW 259
57615: PPUSH
57616: CALL_OW 2
57620: ST_TO_ADDR
57621: GO 57579
57623: POP
57624: POP
// if not tmp then
57625: LD_VAR 0 5
57629: NOT
57630: IFFALSE 57634
// exit ;
57632: GO 57654
// result := SortListByListDesc ( units , tmp ) ;
57634: LD_ADDR_VAR 0 3
57638: PUSH
57639: LD_VAR 0 1
57643: PPUSH
57644: LD_VAR 0 5
57648: PPUSH
57649: CALL_OW 77
57653: ST_TO_ADDR
// end ;
57654: LD_VAR 0 3
57658: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57659: LD_INT 0
57661: PPUSH
57662: PPUSH
57663: PPUSH
// result := false ;
57664: LD_ADDR_VAR 0 3
57668: PUSH
57669: LD_INT 0
57671: ST_TO_ADDR
// x := GetX ( building ) ;
57672: LD_ADDR_VAR 0 4
57676: PUSH
57677: LD_VAR 0 2
57681: PPUSH
57682: CALL_OW 250
57686: ST_TO_ADDR
// y := GetY ( building ) ;
57687: LD_ADDR_VAR 0 5
57691: PUSH
57692: LD_VAR 0 2
57696: PPUSH
57697: CALL_OW 251
57701: ST_TO_ADDR
// if not building or not x or not y then
57702: LD_VAR 0 2
57706: NOT
57707: PUSH
57708: LD_VAR 0 4
57712: NOT
57713: OR
57714: PUSH
57715: LD_VAR 0 5
57719: NOT
57720: OR
57721: IFFALSE 57725
// exit ;
57723: GO 57817
// if GetTaskList ( unit ) then
57725: LD_VAR 0 1
57729: PPUSH
57730: CALL_OW 437
57734: IFFALSE 57817
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57736: LD_STRING e
57738: PUSH
57739: LD_VAR 0 1
57743: PPUSH
57744: CALL_OW 437
57748: PUSH
57749: LD_INT 1
57751: ARRAY
57752: PUSH
57753: LD_INT 1
57755: ARRAY
57756: EQUAL
57757: PUSH
57758: LD_VAR 0 4
57762: PUSH
57763: LD_VAR 0 1
57767: PPUSH
57768: CALL_OW 437
57772: PUSH
57773: LD_INT 1
57775: ARRAY
57776: PUSH
57777: LD_INT 2
57779: ARRAY
57780: EQUAL
57781: AND
57782: PUSH
57783: LD_VAR 0 5
57787: PUSH
57788: LD_VAR 0 1
57792: PPUSH
57793: CALL_OW 437
57797: PUSH
57798: LD_INT 1
57800: ARRAY
57801: PUSH
57802: LD_INT 3
57804: ARRAY
57805: EQUAL
57806: AND
57807: IFFALSE 57817
// result := true end ;
57809: LD_ADDR_VAR 0 3
57813: PUSH
57814: LD_INT 1
57816: ST_TO_ADDR
// end ;
57817: LD_VAR 0 3
57821: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57822: LD_INT 0
57824: PPUSH
// result := false ;
57825: LD_ADDR_VAR 0 4
57829: PUSH
57830: LD_INT 0
57832: ST_TO_ADDR
// if GetTaskList ( unit ) then
57833: LD_VAR 0 1
57837: PPUSH
57838: CALL_OW 437
57842: IFFALSE 57925
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57844: LD_STRING M
57846: PUSH
57847: LD_VAR 0 1
57851: PPUSH
57852: CALL_OW 437
57856: PUSH
57857: LD_INT 1
57859: ARRAY
57860: PUSH
57861: LD_INT 1
57863: ARRAY
57864: EQUAL
57865: PUSH
57866: LD_VAR 0 2
57870: PUSH
57871: LD_VAR 0 1
57875: PPUSH
57876: CALL_OW 437
57880: PUSH
57881: LD_INT 1
57883: ARRAY
57884: PUSH
57885: LD_INT 2
57887: ARRAY
57888: EQUAL
57889: AND
57890: PUSH
57891: LD_VAR 0 3
57895: PUSH
57896: LD_VAR 0 1
57900: PPUSH
57901: CALL_OW 437
57905: PUSH
57906: LD_INT 1
57908: ARRAY
57909: PUSH
57910: LD_INT 3
57912: ARRAY
57913: EQUAL
57914: AND
57915: IFFALSE 57925
// result := true ;
57917: LD_ADDR_VAR 0 4
57921: PUSH
57922: LD_INT 1
57924: ST_TO_ADDR
// end ; end ;
57925: LD_VAR 0 4
57929: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57930: LD_INT 0
57932: PPUSH
57933: PPUSH
57934: PPUSH
57935: PPUSH
// if not unit or not area then
57936: LD_VAR 0 1
57940: NOT
57941: PUSH
57942: LD_VAR 0 2
57946: NOT
57947: OR
57948: IFFALSE 57952
// exit ;
57950: GO 58116
// tmp := AreaToList ( area , i ) ;
57952: LD_ADDR_VAR 0 6
57956: PUSH
57957: LD_VAR 0 2
57961: PPUSH
57962: LD_VAR 0 5
57966: PPUSH
57967: CALL_OW 517
57971: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57972: LD_ADDR_VAR 0 5
57976: PUSH
57977: DOUBLE
57978: LD_INT 1
57980: DEC
57981: ST_TO_ADDR
57982: LD_VAR 0 6
57986: PUSH
57987: LD_INT 1
57989: ARRAY
57990: PUSH
57991: FOR_TO
57992: IFFALSE 58114
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57994: LD_ADDR_VAR 0 7
57998: PUSH
57999: LD_VAR 0 6
58003: PUSH
58004: LD_INT 1
58006: ARRAY
58007: PUSH
58008: LD_VAR 0 5
58012: ARRAY
58013: PUSH
58014: LD_VAR 0 6
58018: PUSH
58019: LD_INT 2
58021: ARRAY
58022: PUSH
58023: LD_VAR 0 5
58027: ARRAY
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58033: LD_VAR 0 7
58037: PUSH
58038: LD_INT 1
58040: ARRAY
58041: PPUSH
58042: LD_VAR 0 7
58046: PUSH
58047: LD_INT 2
58049: ARRAY
58050: PPUSH
58051: CALL_OW 428
58055: PUSH
58056: LD_INT 0
58058: EQUAL
58059: IFFALSE 58112
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58061: LD_VAR 0 1
58065: PPUSH
58066: LD_VAR 0 7
58070: PUSH
58071: LD_INT 1
58073: ARRAY
58074: PPUSH
58075: LD_VAR 0 7
58079: PUSH
58080: LD_INT 2
58082: ARRAY
58083: PPUSH
58084: LD_VAR 0 3
58088: PPUSH
58089: CALL_OW 48
// result := IsPlaced ( unit ) ;
58093: LD_ADDR_VAR 0 4
58097: PUSH
58098: LD_VAR 0 1
58102: PPUSH
58103: CALL_OW 305
58107: ST_TO_ADDR
// exit ;
58108: POP
58109: POP
58110: GO 58116
// end ; end ;
58112: GO 57991
58114: POP
58115: POP
// end ;
58116: LD_VAR 0 4
58120: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58121: LD_INT 0
58123: PPUSH
58124: PPUSH
58125: PPUSH
// if not side or side > 8 then
58126: LD_VAR 0 1
58130: NOT
58131: PUSH
58132: LD_VAR 0 1
58136: PUSH
58137: LD_INT 8
58139: GREATER
58140: OR
58141: IFFALSE 58145
// exit ;
58143: GO 58332
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58145: LD_ADDR_VAR 0 4
58149: PUSH
58150: LD_INT 22
58152: PUSH
58153: LD_VAR 0 1
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 21
58164: PUSH
58165: LD_INT 3
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PPUSH
58176: CALL_OW 69
58180: ST_TO_ADDR
// if not tmp then
58181: LD_VAR 0 4
58185: NOT
58186: IFFALSE 58190
// exit ;
58188: GO 58332
// enable_addtolog := true ;
58190: LD_ADDR_OWVAR 81
58194: PUSH
58195: LD_INT 1
58197: ST_TO_ADDR
// AddToLog ( [ ) ;
58198: LD_STRING [
58200: PPUSH
58201: CALL_OW 561
// for i in tmp do
58205: LD_ADDR_VAR 0 3
58209: PUSH
58210: LD_VAR 0 4
58214: PUSH
58215: FOR_IN
58216: IFFALSE 58323
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58218: LD_STRING [
58220: PUSH
58221: LD_VAR 0 3
58225: PPUSH
58226: CALL_OW 266
58230: STR
58231: PUSH
58232: LD_STRING , 
58234: STR
58235: PUSH
58236: LD_VAR 0 3
58240: PPUSH
58241: CALL_OW 250
58245: STR
58246: PUSH
58247: LD_STRING , 
58249: STR
58250: PUSH
58251: LD_VAR 0 3
58255: PPUSH
58256: CALL_OW 251
58260: STR
58261: PUSH
58262: LD_STRING , 
58264: STR
58265: PUSH
58266: LD_VAR 0 3
58270: PPUSH
58271: CALL_OW 254
58275: STR
58276: PUSH
58277: LD_STRING , 
58279: STR
58280: PUSH
58281: LD_VAR 0 3
58285: PPUSH
58286: LD_INT 1
58288: PPUSH
58289: CALL_OW 268
58293: STR
58294: PUSH
58295: LD_STRING , 
58297: STR
58298: PUSH
58299: LD_VAR 0 3
58303: PPUSH
58304: LD_INT 2
58306: PPUSH
58307: CALL_OW 268
58311: STR
58312: PUSH
58313: LD_STRING ],
58315: STR
58316: PPUSH
58317: CALL_OW 561
// end ;
58321: GO 58215
58323: POP
58324: POP
// AddToLog ( ]; ) ;
58325: LD_STRING ];
58327: PPUSH
58328: CALL_OW 561
// end ;
58332: LD_VAR 0 2
58336: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58337: LD_INT 0
58339: PPUSH
58340: PPUSH
58341: PPUSH
58342: PPUSH
58343: PPUSH
// if not area or not rate or not max then
58344: LD_VAR 0 1
58348: NOT
58349: PUSH
58350: LD_VAR 0 2
58354: NOT
58355: OR
58356: PUSH
58357: LD_VAR 0 4
58361: NOT
58362: OR
58363: IFFALSE 58367
// exit ;
58365: GO 58556
// while 1 do
58367: LD_INT 1
58369: IFFALSE 58556
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58371: LD_ADDR_VAR 0 9
58375: PUSH
58376: LD_VAR 0 1
58380: PPUSH
58381: LD_INT 1
58383: PPUSH
58384: CALL_OW 287
58388: PUSH
58389: LD_INT 10
58391: MUL
58392: ST_TO_ADDR
// r := rate / 10 ;
58393: LD_ADDR_VAR 0 7
58397: PUSH
58398: LD_VAR 0 2
58402: PUSH
58403: LD_INT 10
58405: DIVREAL
58406: ST_TO_ADDR
// time := 1 1$00 ;
58407: LD_ADDR_VAR 0 8
58411: PUSH
58412: LD_INT 2100
58414: ST_TO_ADDR
// if amount < min then
58415: LD_VAR 0 9
58419: PUSH
58420: LD_VAR 0 3
58424: LESS
58425: IFFALSE 58443
// r := r * 2 else
58427: LD_ADDR_VAR 0 7
58431: PUSH
58432: LD_VAR 0 7
58436: PUSH
58437: LD_INT 2
58439: MUL
58440: ST_TO_ADDR
58441: GO 58469
// if amount > max then
58443: LD_VAR 0 9
58447: PUSH
58448: LD_VAR 0 4
58452: GREATER
58453: IFFALSE 58469
// r := r / 2 ;
58455: LD_ADDR_VAR 0 7
58459: PUSH
58460: LD_VAR 0 7
58464: PUSH
58465: LD_INT 2
58467: DIVREAL
58468: ST_TO_ADDR
// time := time / r ;
58469: LD_ADDR_VAR 0 8
58473: PUSH
58474: LD_VAR 0 8
58478: PUSH
58479: LD_VAR 0 7
58483: DIVREAL
58484: ST_TO_ADDR
// if time < 0 then
58485: LD_VAR 0 8
58489: PUSH
58490: LD_INT 0
58492: LESS
58493: IFFALSE 58510
// time := time * - 1 ;
58495: LD_ADDR_VAR 0 8
58499: PUSH
58500: LD_VAR 0 8
58504: PUSH
58505: LD_INT 1
58507: NEG
58508: MUL
58509: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
58510: LD_VAR 0 8
58514: PUSH
58515: LD_INT 35
58517: PPUSH
58518: LD_INT 875
58520: PPUSH
58521: CALL_OW 12
58525: PLUS
58526: PPUSH
58527: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58531: LD_INT 1
58533: PPUSH
58534: LD_INT 5
58536: PPUSH
58537: CALL_OW 12
58541: PPUSH
58542: LD_VAR 0 1
58546: PPUSH
58547: LD_INT 1
58549: PPUSH
58550: CALL_OW 55
// end ;
58554: GO 58367
// end ;
58556: LD_VAR 0 5
58560: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58561: LD_INT 0
58563: PPUSH
58564: PPUSH
58565: PPUSH
58566: PPUSH
58567: PPUSH
58568: PPUSH
58569: PPUSH
58570: PPUSH
// if not turrets or not factories then
58571: LD_VAR 0 1
58575: NOT
58576: PUSH
58577: LD_VAR 0 2
58581: NOT
58582: OR
58583: IFFALSE 58587
// exit ;
58585: GO 58894
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58587: LD_ADDR_VAR 0 10
58591: PUSH
58592: LD_INT 5
58594: PUSH
58595: LD_INT 6
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 2
58604: PUSH
58605: LD_INT 4
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 3
58614: PUSH
58615: LD_INT 5
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 24
58629: PUSH
58630: LD_INT 25
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 23
58639: PUSH
58640: LD_INT 27
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 42
58653: PUSH
58654: LD_INT 43
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 44
58663: PUSH
58664: LD_INT 46
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 45
58673: PUSH
58674: LD_INT 47
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: LIST
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: LIST
58690: ST_TO_ADDR
// result := [ ] ;
58691: LD_ADDR_VAR 0 3
58695: PUSH
58696: EMPTY
58697: ST_TO_ADDR
// for i in turrets do
58698: LD_ADDR_VAR 0 4
58702: PUSH
58703: LD_VAR 0 1
58707: PUSH
58708: FOR_IN
58709: IFFALSE 58892
// begin nat := GetNation ( i ) ;
58711: LD_ADDR_VAR 0 7
58715: PUSH
58716: LD_VAR 0 4
58720: PPUSH
58721: CALL_OW 248
58725: ST_TO_ADDR
// weapon := 0 ;
58726: LD_ADDR_VAR 0 8
58730: PUSH
58731: LD_INT 0
58733: ST_TO_ADDR
// if not nat then
58734: LD_VAR 0 7
58738: NOT
58739: IFFALSE 58743
// continue ;
58741: GO 58708
// for j in list [ nat ] do
58743: LD_ADDR_VAR 0 5
58747: PUSH
58748: LD_VAR 0 10
58752: PUSH
58753: LD_VAR 0 7
58757: ARRAY
58758: PUSH
58759: FOR_IN
58760: IFFALSE 58801
// if GetBWeapon ( i ) = j [ 1 ] then
58762: LD_VAR 0 4
58766: PPUSH
58767: CALL_OW 269
58771: PUSH
58772: LD_VAR 0 5
58776: PUSH
58777: LD_INT 1
58779: ARRAY
58780: EQUAL
58781: IFFALSE 58799
// begin weapon := j [ 2 ] ;
58783: LD_ADDR_VAR 0 8
58787: PUSH
58788: LD_VAR 0 5
58792: PUSH
58793: LD_INT 2
58795: ARRAY
58796: ST_TO_ADDR
// break ;
58797: GO 58801
// end ;
58799: GO 58759
58801: POP
58802: POP
// if not weapon then
58803: LD_VAR 0 8
58807: NOT
58808: IFFALSE 58812
// continue ;
58810: GO 58708
// for k in factories do
58812: LD_ADDR_VAR 0 6
58816: PUSH
58817: LD_VAR 0 2
58821: PUSH
58822: FOR_IN
58823: IFFALSE 58888
// begin weapons := AvailableWeaponList ( k ) ;
58825: LD_ADDR_VAR 0 9
58829: PUSH
58830: LD_VAR 0 6
58834: PPUSH
58835: CALL_OW 478
58839: ST_TO_ADDR
// if not weapons then
58840: LD_VAR 0 9
58844: NOT
58845: IFFALSE 58849
// continue ;
58847: GO 58822
// if weapon in weapons then
58849: LD_VAR 0 8
58853: PUSH
58854: LD_VAR 0 9
58858: IN
58859: IFFALSE 58886
// begin result := [ i , weapon ] ;
58861: LD_ADDR_VAR 0 3
58865: PUSH
58866: LD_VAR 0 4
58870: PUSH
58871: LD_VAR 0 8
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: ST_TO_ADDR
// exit ;
58880: POP
58881: POP
58882: POP
58883: POP
58884: GO 58894
// end ; end ;
58886: GO 58822
58888: POP
58889: POP
// end ;
58890: GO 58708
58892: POP
58893: POP
// end ;
58894: LD_VAR 0 3
58898: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58899: LD_INT 0
58901: PPUSH
// if not side or side > 8 then
58902: LD_VAR 0 3
58906: NOT
58907: PUSH
58908: LD_VAR 0 3
58912: PUSH
58913: LD_INT 8
58915: GREATER
58916: OR
58917: IFFALSE 58921
// exit ;
58919: GO 58980
// if not range then
58921: LD_VAR 0 4
58925: NOT
58926: IFFALSE 58937
// range := - 12 ;
58928: LD_ADDR_VAR 0 4
58932: PUSH
58933: LD_INT 12
58935: NEG
58936: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58937: LD_VAR 0 1
58941: PPUSH
58942: LD_VAR 0 2
58946: PPUSH
58947: LD_VAR 0 3
58951: PPUSH
58952: LD_VAR 0 4
58956: PPUSH
58957: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58961: LD_VAR 0 1
58965: PPUSH
58966: LD_VAR 0 2
58970: PPUSH
58971: LD_VAR 0 3
58975: PPUSH
58976: CALL_OW 331
// end ;
58980: LD_VAR 0 5
58984: RET
// export function Video ( mode ) ; begin
58985: LD_INT 0
58987: PPUSH
// ingame_video = mode ;
58988: LD_ADDR_OWVAR 52
58992: PUSH
58993: LD_VAR 0 1
58997: ST_TO_ADDR
// interface_hidden = mode ;
58998: LD_ADDR_OWVAR 54
59002: PUSH
59003: LD_VAR 0 1
59007: ST_TO_ADDR
// end ;
59008: LD_VAR 0 2
59012: RET
// export function Join ( array , element ) ; begin
59013: LD_INT 0
59015: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59016: LD_ADDR_VAR 0 3
59020: PUSH
59021: LD_VAR 0 1
59025: PPUSH
59026: LD_VAR 0 1
59030: PUSH
59031: LD_INT 1
59033: PLUS
59034: PPUSH
59035: LD_VAR 0 2
59039: PPUSH
59040: CALL_OW 1
59044: ST_TO_ADDR
// end ;
59045: LD_VAR 0 3
59049: RET
// export function JoinUnion ( array , element ) ; begin
59050: LD_INT 0
59052: PPUSH
// result := array union element ;
59053: LD_ADDR_VAR 0 3
59057: PUSH
59058: LD_VAR 0 1
59062: PUSH
59063: LD_VAR 0 2
59067: UNION
59068: ST_TO_ADDR
// end ;
59069: LD_VAR 0 3
59073: RET
// export function GetBehemoths ( side ) ; begin
59074: LD_INT 0
59076: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
59077: LD_ADDR_VAR 0 2
59081: PUSH
59082: LD_INT 22
59084: PUSH
59085: LD_VAR 0 1
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 31
59096: PUSH
59097: LD_INT 25
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PPUSH
59108: CALL_OW 69
59112: ST_TO_ADDR
// end ;
59113: LD_VAR 0 2
59117: RET
// export function Shuffle ( array ) ; var i , index ; begin
59118: LD_INT 0
59120: PPUSH
59121: PPUSH
59122: PPUSH
// result := [ ] ;
59123: LD_ADDR_VAR 0 2
59127: PUSH
59128: EMPTY
59129: ST_TO_ADDR
// if not array then
59130: LD_VAR 0 1
59134: NOT
59135: IFFALSE 59139
// exit ;
59137: GO 59238
// Randomize ;
59139: CALL_OW 10
// for i = array downto 1 do
59143: LD_ADDR_VAR 0 3
59147: PUSH
59148: DOUBLE
59149: LD_VAR 0 1
59153: INC
59154: ST_TO_ADDR
59155: LD_INT 1
59157: PUSH
59158: FOR_DOWNTO
59159: IFFALSE 59236
// begin index := rand ( 1 , array ) ;
59161: LD_ADDR_VAR 0 4
59165: PUSH
59166: LD_INT 1
59168: PPUSH
59169: LD_VAR 0 1
59173: PPUSH
59174: CALL_OW 12
59178: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59179: LD_ADDR_VAR 0 2
59183: PUSH
59184: LD_VAR 0 2
59188: PPUSH
59189: LD_VAR 0 2
59193: PUSH
59194: LD_INT 1
59196: PLUS
59197: PPUSH
59198: LD_VAR 0 1
59202: PUSH
59203: LD_VAR 0 4
59207: ARRAY
59208: PPUSH
59209: CALL_OW 2
59213: ST_TO_ADDR
// array := Delete ( array , index ) ;
59214: LD_ADDR_VAR 0 1
59218: PUSH
59219: LD_VAR 0 1
59223: PPUSH
59224: LD_VAR 0 4
59228: PPUSH
59229: CALL_OW 3
59233: ST_TO_ADDR
// end ;
59234: GO 59158
59236: POP
59237: POP
// end ;
59238: LD_VAR 0 2
59242: RET
// export function GetBaseMaterials ( base ) ; begin
59243: LD_INT 0
59245: PPUSH
// result := [ 0 , 0 , 0 ] ;
59246: LD_ADDR_VAR 0 2
59250: PUSH
59251: LD_INT 0
59253: PUSH
59254: LD_INT 0
59256: PUSH
59257: LD_INT 0
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: LIST
59264: ST_TO_ADDR
// if not base then
59265: LD_VAR 0 1
59269: NOT
59270: IFFALSE 59274
// exit ;
59272: GO 59323
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59274: LD_ADDR_VAR 0 2
59278: PUSH
59279: LD_VAR 0 1
59283: PPUSH
59284: LD_INT 1
59286: PPUSH
59287: CALL_OW 275
59291: PUSH
59292: LD_VAR 0 1
59296: PPUSH
59297: LD_INT 2
59299: PPUSH
59300: CALL_OW 275
59304: PUSH
59305: LD_VAR 0 1
59309: PPUSH
59310: LD_INT 3
59312: PPUSH
59313: CALL_OW 275
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: LIST
59322: ST_TO_ADDR
// end ;
59323: LD_VAR 0 2
59327: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59328: LD_INT 0
59330: PPUSH
59331: PPUSH
// result := array ;
59332: LD_ADDR_VAR 0 3
59336: PUSH
59337: LD_VAR 0 1
59341: ST_TO_ADDR
// if size >= result then
59342: LD_VAR 0 2
59346: PUSH
59347: LD_VAR 0 3
59351: GREATEREQUAL
59352: IFFALSE 59356
// exit ;
59354: GO 59406
// if size then
59356: LD_VAR 0 2
59360: IFFALSE 59406
// for i := array downto size do
59362: LD_ADDR_VAR 0 4
59366: PUSH
59367: DOUBLE
59368: LD_VAR 0 1
59372: INC
59373: ST_TO_ADDR
59374: LD_VAR 0 2
59378: PUSH
59379: FOR_DOWNTO
59380: IFFALSE 59404
// result := Delete ( result , result ) ;
59382: LD_ADDR_VAR 0 3
59386: PUSH
59387: LD_VAR 0 3
59391: PPUSH
59392: LD_VAR 0 3
59396: PPUSH
59397: CALL_OW 3
59401: ST_TO_ADDR
59402: GO 59379
59404: POP
59405: POP
// end ;
59406: LD_VAR 0 3
59410: RET
// export function ComExit ( unit ) ; var tmp ; begin
59411: LD_INT 0
59413: PPUSH
59414: PPUSH
// if not IsInUnit ( unit ) then
59415: LD_VAR 0 1
59419: PPUSH
59420: CALL_OW 310
59424: NOT
59425: IFFALSE 59429
// exit ;
59427: GO 59489
// tmp := IsInUnit ( unit ) ;
59429: LD_ADDR_VAR 0 3
59433: PUSH
59434: LD_VAR 0 1
59438: PPUSH
59439: CALL_OW 310
59443: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59444: LD_VAR 0 3
59448: PPUSH
59449: CALL_OW 247
59453: PUSH
59454: LD_INT 2
59456: EQUAL
59457: IFFALSE 59470
// ComExitVehicle ( unit ) else
59459: LD_VAR 0 1
59463: PPUSH
59464: CALL_OW 121
59468: GO 59479
// ComExitBuilding ( unit ) ;
59470: LD_VAR 0 1
59474: PPUSH
59475: CALL_OW 122
// result := tmp ;
59479: LD_ADDR_VAR 0 2
59483: PUSH
59484: LD_VAR 0 3
59488: ST_TO_ADDR
// end ;
59489: LD_VAR 0 2
59493: RET
// export function ComExitAll ( units ) ; var i ; begin
59494: LD_INT 0
59496: PPUSH
59497: PPUSH
// if not units then
59498: LD_VAR 0 1
59502: NOT
59503: IFFALSE 59507
// exit ;
59505: GO 59533
// for i in units do
59507: LD_ADDR_VAR 0 3
59511: PUSH
59512: LD_VAR 0 1
59516: PUSH
59517: FOR_IN
59518: IFFALSE 59531
// ComExit ( i ) ;
59520: LD_VAR 0 3
59524: PPUSH
59525: CALL 59411 0 1
59529: GO 59517
59531: POP
59532: POP
// end ;
59533: LD_VAR 0 2
59537: RET
// export function ResetHc ; begin
59538: LD_INT 0
59540: PPUSH
// InitHc ;
59541: CALL_OW 19
// hc_importance := 0 ;
59545: LD_ADDR_OWVAR 32
59549: PUSH
59550: LD_INT 0
59552: ST_TO_ADDR
// end ;
59553: LD_VAR 0 1
59557: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59558: LD_INT 0
59560: PPUSH
59561: PPUSH
59562: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59563: LD_ADDR_VAR 0 6
59567: PUSH
59568: LD_VAR 0 1
59572: PUSH
59573: LD_VAR 0 3
59577: PLUS
59578: PUSH
59579: LD_INT 2
59581: DIV
59582: ST_TO_ADDR
// if _x < 0 then
59583: LD_VAR 0 6
59587: PUSH
59588: LD_INT 0
59590: LESS
59591: IFFALSE 59608
// _x := _x * - 1 ;
59593: LD_ADDR_VAR 0 6
59597: PUSH
59598: LD_VAR 0 6
59602: PUSH
59603: LD_INT 1
59605: NEG
59606: MUL
59607: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59608: LD_ADDR_VAR 0 7
59612: PUSH
59613: LD_VAR 0 2
59617: PUSH
59618: LD_VAR 0 4
59622: PLUS
59623: PUSH
59624: LD_INT 2
59626: DIV
59627: ST_TO_ADDR
// if _y < 0 then
59628: LD_VAR 0 7
59632: PUSH
59633: LD_INT 0
59635: LESS
59636: IFFALSE 59653
// _y := _y * - 1 ;
59638: LD_ADDR_VAR 0 7
59642: PUSH
59643: LD_VAR 0 7
59647: PUSH
59648: LD_INT 1
59650: NEG
59651: MUL
59652: ST_TO_ADDR
// result := [ _x , _y ] ;
59653: LD_ADDR_VAR 0 5
59657: PUSH
59658: LD_VAR 0 6
59662: PUSH
59663: LD_VAR 0 7
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: ST_TO_ADDR
// end ;
59672: LD_VAR 0 5
59676: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59677: LD_INT 0
59679: PPUSH
59680: PPUSH
59681: PPUSH
59682: PPUSH
// task := GetTaskList ( unit ) ;
59683: LD_ADDR_VAR 0 7
59687: PUSH
59688: LD_VAR 0 1
59692: PPUSH
59693: CALL_OW 437
59697: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59698: LD_VAR 0 7
59702: NOT
59703: PUSH
59704: LD_VAR 0 1
59708: PPUSH
59709: LD_VAR 0 2
59713: PPUSH
59714: CALL_OW 308
59718: NOT
59719: AND
59720: IFFALSE 59724
// exit ;
59722: GO 59842
// if IsInArea ( unit , area ) then
59724: LD_VAR 0 1
59728: PPUSH
59729: LD_VAR 0 2
59733: PPUSH
59734: CALL_OW 308
59738: IFFALSE 59756
// begin ComMoveToArea ( unit , goAway ) ;
59740: LD_VAR 0 1
59744: PPUSH
59745: LD_VAR 0 3
59749: PPUSH
59750: CALL_OW 113
// exit ;
59754: GO 59842
// end ; if task [ 1 ] [ 1 ] <> M then
59756: LD_VAR 0 7
59760: PUSH
59761: LD_INT 1
59763: ARRAY
59764: PUSH
59765: LD_INT 1
59767: ARRAY
59768: PUSH
59769: LD_STRING M
59771: NONEQUAL
59772: IFFALSE 59776
// exit ;
59774: GO 59842
// x := task [ 1 ] [ 2 ] ;
59776: LD_ADDR_VAR 0 5
59780: PUSH
59781: LD_VAR 0 7
59785: PUSH
59786: LD_INT 1
59788: ARRAY
59789: PUSH
59790: LD_INT 2
59792: ARRAY
59793: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59794: LD_ADDR_VAR 0 6
59798: PUSH
59799: LD_VAR 0 7
59803: PUSH
59804: LD_INT 1
59806: ARRAY
59807: PUSH
59808: LD_INT 3
59810: ARRAY
59811: ST_TO_ADDR
// if InArea ( x , y , area ) then
59812: LD_VAR 0 5
59816: PPUSH
59817: LD_VAR 0 6
59821: PPUSH
59822: LD_VAR 0 2
59826: PPUSH
59827: CALL_OW 309
59831: IFFALSE 59842
// ComStop ( unit ) ;
59833: LD_VAR 0 1
59837: PPUSH
59838: CALL_OW 141
// end ;
59842: LD_VAR 0 4
59846: RET
// export function Abs ( value ) ; begin
59847: LD_INT 0
59849: PPUSH
// result := value ;
59850: LD_ADDR_VAR 0 2
59854: PUSH
59855: LD_VAR 0 1
59859: ST_TO_ADDR
// if value < 0 then
59860: LD_VAR 0 1
59864: PUSH
59865: LD_INT 0
59867: LESS
59868: IFFALSE 59885
// result := value * - 1 ;
59870: LD_ADDR_VAR 0 2
59874: PUSH
59875: LD_VAR 0 1
59879: PUSH
59880: LD_INT 1
59882: NEG
59883: MUL
59884: ST_TO_ADDR
// end ;
59885: LD_VAR 0 2
59889: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59890: LD_INT 0
59892: PPUSH
59893: PPUSH
59894: PPUSH
59895: PPUSH
59896: PPUSH
59897: PPUSH
59898: PPUSH
59899: PPUSH
// if not unit or not building then
59900: LD_VAR 0 1
59904: NOT
59905: PUSH
59906: LD_VAR 0 2
59910: NOT
59911: OR
59912: IFFALSE 59916
// exit ;
59914: GO 60142
// x := GetX ( building ) ;
59916: LD_ADDR_VAR 0 4
59920: PUSH
59921: LD_VAR 0 2
59925: PPUSH
59926: CALL_OW 250
59930: ST_TO_ADDR
// y := GetY ( building ) ;
59931: LD_ADDR_VAR 0 6
59935: PUSH
59936: LD_VAR 0 2
59940: PPUSH
59941: CALL_OW 251
59945: ST_TO_ADDR
// d := GetDir ( building ) ;
59946: LD_ADDR_VAR 0 8
59950: PUSH
59951: LD_VAR 0 2
59955: PPUSH
59956: CALL_OW 254
59960: ST_TO_ADDR
// r := 4 ;
59961: LD_ADDR_VAR 0 9
59965: PUSH
59966: LD_INT 4
59968: ST_TO_ADDR
// for i := 1 to 5 do
59969: LD_ADDR_VAR 0 10
59973: PUSH
59974: DOUBLE
59975: LD_INT 1
59977: DEC
59978: ST_TO_ADDR
59979: LD_INT 5
59981: PUSH
59982: FOR_TO
59983: IFFALSE 60140
// begin _x := ShiftX ( x , d , r + i ) ;
59985: LD_ADDR_VAR 0 5
59989: PUSH
59990: LD_VAR 0 4
59994: PPUSH
59995: LD_VAR 0 8
59999: PPUSH
60000: LD_VAR 0 9
60004: PUSH
60005: LD_VAR 0 10
60009: PLUS
60010: PPUSH
60011: CALL_OW 272
60015: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60016: LD_ADDR_VAR 0 7
60020: PUSH
60021: LD_VAR 0 6
60025: PPUSH
60026: LD_VAR 0 8
60030: PPUSH
60031: LD_VAR 0 9
60035: PUSH
60036: LD_VAR 0 10
60040: PLUS
60041: PPUSH
60042: CALL_OW 273
60046: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60047: LD_VAR 0 5
60051: PPUSH
60052: LD_VAR 0 7
60056: PPUSH
60057: CALL_OW 488
60061: PUSH
60062: LD_VAR 0 5
60066: PPUSH
60067: LD_VAR 0 7
60071: PPUSH
60072: CALL_OW 428
60076: PPUSH
60077: CALL_OW 247
60081: PUSH
60082: LD_INT 3
60084: PUSH
60085: LD_INT 2
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: IN
60092: NOT
60093: AND
60094: IFFALSE 60138
// begin ComMoveXY ( unit , _x , _y ) ;
60096: LD_VAR 0 1
60100: PPUSH
60101: LD_VAR 0 5
60105: PPUSH
60106: LD_VAR 0 7
60110: PPUSH
60111: CALL_OW 111
// result := [ _x , _y ] ;
60115: LD_ADDR_VAR 0 3
60119: PUSH
60120: LD_VAR 0 5
60124: PUSH
60125: LD_VAR 0 7
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: ST_TO_ADDR
// exit ;
60134: POP
60135: POP
60136: GO 60142
// end ; end ;
60138: GO 59982
60140: POP
60141: POP
// end ;
60142: LD_VAR 0 3
60146: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60147: LD_INT 0
60149: PPUSH
60150: PPUSH
60151: PPUSH
// result := 0 ;
60152: LD_ADDR_VAR 0 3
60156: PUSH
60157: LD_INT 0
60159: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60160: LD_VAR 0 1
60164: PUSH
60165: LD_INT 0
60167: LESS
60168: PUSH
60169: LD_VAR 0 1
60173: PUSH
60174: LD_INT 8
60176: GREATER
60177: OR
60178: PUSH
60179: LD_VAR 0 2
60183: PUSH
60184: LD_INT 0
60186: LESS
60187: OR
60188: PUSH
60189: LD_VAR 0 2
60193: PUSH
60194: LD_INT 8
60196: GREATER
60197: OR
60198: IFFALSE 60202
// exit ;
60200: GO 60277
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60202: LD_ADDR_VAR 0 4
60206: PUSH
60207: LD_INT 22
60209: PUSH
60210: LD_VAR 0 2
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PPUSH
60219: CALL_OW 69
60223: PUSH
60224: FOR_IN
60225: IFFALSE 60275
// begin un := UnitShoot ( i ) ;
60227: LD_ADDR_VAR 0 5
60231: PUSH
60232: LD_VAR 0 4
60236: PPUSH
60237: CALL_OW 504
60241: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60242: LD_VAR 0 5
60246: PPUSH
60247: CALL_OW 255
60251: PUSH
60252: LD_VAR 0 1
60256: EQUAL
60257: IFFALSE 60273
// begin result := un ;
60259: LD_ADDR_VAR 0 3
60263: PUSH
60264: LD_VAR 0 5
60268: ST_TO_ADDR
// exit ;
60269: POP
60270: POP
60271: GO 60277
// end ; end ;
60273: GO 60224
60275: POP
60276: POP
// end ;
60277: LD_VAR 0 3
60281: RET
// export function GetCargoBay ( units ) ; begin
60282: LD_INT 0
60284: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60285: LD_ADDR_VAR 0 2
60289: PUSH
60290: LD_VAR 0 1
60294: PPUSH
60295: LD_INT 2
60297: PUSH
60298: LD_INT 34
60300: PUSH
60301: LD_INT 12
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 34
60310: PUSH
60311: LD_INT 51
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 34
60320: PUSH
60321: LD_INT 32
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 34
60330: PUSH
60331: LD_EXP 73
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: PPUSH
60347: CALL_OW 72
60351: ST_TO_ADDR
// end ;
60352: LD_VAR 0 2
60356: RET
// export function Negate ( value ) ; begin
60357: LD_INT 0
60359: PPUSH
// result := not value ;
60360: LD_ADDR_VAR 0 2
60364: PUSH
60365: LD_VAR 0 1
60369: NOT
60370: ST_TO_ADDR
// end ;
60371: LD_VAR 0 2
60375: RET
// export function Inc ( value ) ; begin
60376: LD_INT 0
60378: PPUSH
// result := value + 1 ;
60379: LD_ADDR_VAR 0 2
60383: PUSH
60384: LD_VAR 0 1
60388: PUSH
60389: LD_INT 1
60391: PLUS
60392: ST_TO_ADDR
// end ;
60393: LD_VAR 0 2
60397: RET
// export function Dec ( value ) ; begin
60398: LD_INT 0
60400: PPUSH
// result := value - 1 ;
60401: LD_ADDR_VAR 0 2
60405: PUSH
60406: LD_VAR 0 1
60410: PUSH
60411: LD_INT 1
60413: MINUS
60414: ST_TO_ADDR
// end ;
60415: LD_VAR 0 2
60419: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60420: LD_INT 0
60422: PPUSH
60423: PPUSH
60424: PPUSH
60425: PPUSH
60426: PPUSH
60427: PPUSH
60428: PPUSH
60429: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60430: LD_VAR 0 1
60434: PPUSH
60435: LD_VAR 0 2
60439: PPUSH
60440: CALL_OW 488
60444: NOT
60445: PUSH
60446: LD_VAR 0 3
60450: PPUSH
60451: LD_VAR 0 4
60455: PPUSH
60456: CALL_OW 488
60460: NOT
60461: OR
60462: IFFALSE 60475
// begin result := - 1 ;
60464: LD_ADDR_VAR 0 5
60468: PUSH
60469: LD_INT 1
60471: NEG
60472: ST_TO_ADDR
// exit ;
60473: GO 60710
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60475: LD_ADDR_VAR 0 12
60479: PUSH
60480: LD_VAR 0 1
60484: PPUSH
60485: LD_VAR 0 2
60489: PPUSH
60490: LD_VAR 0 3
60494: PPUSH
60495: LD_VAR 0 4
60499: PPUSH
60500: CALL 59558 0 4
60504: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60505: LD_ADDR_VAR 0 11
60509: PUSH
60510: LD_VAR 0 1
60514: PPUSH
60515: LD_VAR 0 2
60519: PPUSH
60520: LD_VAR 0 12
60524: PUSH
60525: LD_INT 1
60527: ARRAY
60528: PPUSH
60529: LD_VAR 0 12
60533: PUSH
60534: LD_INT 2
60536: ARRAY
60537: PPUSH
60538: CALL_OW 298
60542: ST_TO_ADDR
// distance := 9999 ;
60543: LD_ADDR_VAR 0 10
60547: PUSH
60548: LD_INT 9999
60550: ST_TO_ADDR
// for i := 0 to 5 do
60551: LD_ADDR_VAR 0 6
60555: PUSH
60556: DOUBLE
60557: LD_INT 0
60559: DEC
60560: ST_TO_ADDR
60561: LD_INT 5
60563: PUSH
60564: FOR_TO
60565: IFFALSE 60708
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60567: LD_ADDR_VAR 0 7
60571: PUSH
60572: LD_VAR 0 1
60576: PPUSH
60577: LD_VAR 0 6
60581: PPUSH
60582: LD_VAR 0 11
60586: PPUSH
60587: CALL_OW 272
60591: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60592: LD_ADDR_VAR 0 8
60596: PUSH
60597: LD_VAR 0 2
60601: PPUSH
60602: LD_VAR 0 6
60606: PPUSH
60607: LD_VAR 0 11
60611: PPUSH
60612: CALL_OW 273
60616: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60617: LD_VAR 0 7
60621: PPUSH
60622: LD_VAR 0 8
60626: PPUSH
60627: CALL_OW 488
60631: NOT
60632: IFFALSE 60636
// continue ;
60634: GO 60564
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60636: LD_ADDR_VAR 0 9
60640: PUSH
60641: LD_VAR 0 12
60645: PUSH
60646: LD_INT 1
60648: ARRAY
60649: PPUSH
60650: LD_VAR 0 12
60654: PUSH
60655: LD_INT 2
60657: ARRAY
60658: PPUSH
60659: LD_VAR 0 7
60663: PPUSH
60664: LD_VAR 0 8
60668: PPUSH
60669: CALL_OW 298
60673: ST_TO_ADDR
// if tmp < distance then
60674: LD_VAR 0 9
60678: PUSH
60679: LD_VAR 0 10
60683: LESS
60684: IFFALSE 60706
// begin result := i ;
60686: LD_ADDR_VAR 0 5
60690: PUSH
60691: LD_VAR 0 6
60695: ST_TO_ADDR
// distance := tmp ;
60696: LD_ADDR_VAR 0 10
60700: PUSH
60701: LD_VAR 0 9
60705: ST_TO_ADDR
// end ; end ;
60706: GO 60564
60708: POP
60709: POP
// end ;
60710: LD_VAR 0 5
60714: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60715: LD_INT 0
60717: PPUSH
60718: PPUSH
// if not driver or not IsInUnit ( driver ) then
60719: LD_VAR 0 1
60723: NOT
60724: PUSH
60725: LD_VAR 0 1
60729: PPUSH
60730: CALL_OW 310
60734: NOT
60735: OR
60736: IFFALSE 60740
// exit ;
60738: GO 60830
// vehicle := IsInUnit ( driver ) ;
60740: LD_ADDR_VAR 0 3
60744: PUSH
60745: LD_VAR 0 1
60749: PPUSH
60750: CALL_OW 310
60754: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60755: LD_VAR 0 1
60759: PPUSH
60760: LD_STRING \
60762: PUSH
60763: LD_INT 0
60765: PUSH
60766: LD_INT 0
60768: PUSH
60769: LD_INT 0
60771: PUSH
60772: LD_INT 0
60774: PUSH
60775: LD_INT 0
60777: PUSH
60778: LD_INT 0
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: PUSH
60790: LD_STRING E
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: LD_INT 0
60798: PUSH
60799: LD_VAR 0 3
60803: PUSH
60804: LD_INT 0
60806: PUSH
60807: LD_INT 0
60809: PUSH
60810: LD_INT 0
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PPUSH
60826: CALL_OW 446
// end ;
60830: LD_VAR 0 2
60834: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60835: LD_INT 0
60837: PPUSH
60838: PPUSH
// if not driver or not IsInUnit ( driver ) then
60839: LD_VAR 0 1
60843: NOT
60844: PUSH
60845: LD_VAR 0 1
60849: PPUSH
60850: CALL_OW 310
60854: NOT
60855: OR
60856: IFFALSE 60860
// exit ;
60858: GO 60950
// vehicle := IsInUnit ( driver ) ;
60860: LD_ADDR_VAR 0 3
60864: PUSH
60865: LD_VAR 0 1
60869: PPUSH
60870: CALL_OW 310
60874: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60875: LD_VAR 0 1
60879: PPUSH
60880: LD_STRING \
60882: PUSH
60883: LD_INT 0
60885: PUSH
60886: LD_INT 0
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: LD_INT 0
60894: PUSH
60895: LD_INT 0
60897: PUSH
60898: LD_INT 0
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: PUSH
60910: LD_STRING E
60912: PUSH
60913: LD_INT 0
60915: PUSH
60916: LD_INT 0
60918: PUSH
60919: LD_VAR 0 3
60923: PUSH
60924: LD_INT 0
60926: PUSH
60927: LD_INT 0
60929: PUSH
60930: LD_INT 0
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PPUSH
60946: CALL_OW 447
// end ;
60950: LD_VAR 0 2
60954: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60955: LD_INT 0
60957: PPUSH
60958: PPUSH
60959: PPUSH
// tmp := [ ] ;
60960: LD_ADDR_VAR 0 5
60964: PUSH
60965: EMPTY
60966: ST_TO_ADDR
// for i in units do
60967: LD_ADDR_VAR 0 4
60971: PUSH
60972: LD_VAR 0 1
60976: PUSH
60977: FOR_IN
60978: IFFALSE 61016
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60980: LD_ADDR_VAR 0 5
60984: PUSH
60985: LD_VAR 0 5
60989: PPUSH
60990: LD_VAR 0 5
60994: PUSH
60995: LD_INT 1
60997: PLUS
60998: PPUSH
60999: LD_VAR 0 4
61003: PPUSH
61004: CALL_OW 256
61008: PPUSH
61009: CALL_OW 2
61013: ST_TO_ADDR
61014: GO 60977
61016: POP
61017: POP
// if not tmp then
61018: LD_VAR 0 5
61022: NOT
61023: IFFALSE 61027
// exit ;
61025: GO 61075
// if asc then
61027: LD_VAR 0 2
61031: IFFALSE 61055
// result := SortListByListAsc ( units , tmp ) else
61033: LD_ADDR_VAR 0 3
61037: PUSH
61038: LD_VAR 0 1
61042: PPUSH
61043: LD_VAR 0 5
61047: PPUSH
61048: CALL_OW 76
61052: ST_TO_ADDR
61053: GO 61075
// result := SortListByListDesc ( units , tmp ) ;
61055: LD_ADDR_VAR 0 3
61059: PUSH
61060: LD_VAR 0 1
61064: PPUSH
61065: LD_VAR 0 5
61069: PPUSH
61070: CALL_OW 77
61074: ST_TO_ADDR
// end ;
61075: LD_VAR 0 3
61079: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61080: LD_INT 0
61082: PPUSH
61083: PPUSH
// task := GetTaskList ( mech ) ;
61084: LD_ADDR_VAR 0 4
61088: PUSH
61089: LD_VAR 0 1
61093: PPUSH
61094: CALL_OW 437
61098: ST_TO_ADDR
// if not task then
61099: LD_VAR 0 4
61103: NOT
61104: IFFALSE 61108
// exit ;
61106: GO 61150
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61108: LD_ADDR_VAR 0 3
61112: PUSH
61113: LD_VAR 0 4
61117: PUSH
61118: LD_INT 1
61120: ARRAY
61121: PUSH
61122: LD_INT 1
61124: ARRAY
61125: PUSH
61126: LD_STRING r
61128: EQUAL
61129: PUSH
61130: LD_VAR 0 4
61134: PUSH
61135: LD_INT 1
61137: ARRAY
61138: PUSH
61139: LD_INT 4
61141: ARRAY
61142: PUSH
61143: LD_VAR 0 2
61147: EQUAL
61148: AND
61149: ST_TO_ADDR
// end ;
61150: LD_VAR 0 3
61154: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61155: LD_INT 0
61157: PPUSH
// SetDir ( unit , d ) ;
61158: LD_VAR 0 1
61162: PPUSH
61163: LD_VAR 0 4
61167: PPUSH
61168: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
61172: LD_VAR 0 1
61176: PPUSH
61177: LD_VAR 0 2
61181: PPUSH
61182: LD_VAR 0 3
61186: PPUSH
61187: LD_VAR 0 5
61191: PPUSH
61192: CALL_OW 48
// end ;
61196: LD_VAR 0 6
61200: RET
// export function ToNaturalNumber ( number ) ; begin
61201: LD_INT 0
61203: PPUSH
// result := number div 1 ;
61204: LD_ADDR_VAR 0 2
61208: PUSH
61209: LD_VAR 0 1
61213: PUSH
61214: LD_INT 1
61216: DIV
61217: ST_TO_ADDR
// if number < 0 then
61218: LD_VAR 0 1
61222: PUSH
61223: LD_INT 0
61225: LESS
61226: IFFALSE 61236
// result := 0 ;
61228: LD_ADDR_VAR 0 2
61232: PUSH
61233: LD_INT 0
61235: ST_TO_ADDR
// end ;
61236: LD_VAR 0 2
61240: RET
// export function SortByClass ( units , class ) ; var un ; begin
61241: LD_INT 0
61243: PPUSH
61244: PPUSH
// if not units or not class then
61245: LD_VAR 0 1
61249: NOT
61250: PUSH
61251: LD_VAR 0 2
61255: NOT
61256: OR
61257: IFFALSE 61261
// exit ;
61259: GO 61356
// result := [ ] ;
61261: LD_ADDR_VAR 0 3
61265: PUSH
61266: EMPTY
61267: ST_TO_ADDR
// for un in units do
61268: LD_ADDR_VAR 0 4
61272: PUSH
61273: LD_VAR 0 1
61277: PUSH
61278: FOR_IN
61279: IFFALSE 61354
// if GetClass ( un ) = class then
61281: LD_VAR 0 4
61285: PPUSH
61286: CALL_OW 257
61290: PUSH
61291: LD_VAR 0 2
61295: EQUAL
61296: IFFALSE 61323
// result := Insert ( result , 1 , un ) else
61298: LD_ADDR_VAR 0 3
61302: PUSH
61303: LD_VAR 0 3
61307: PPUSH
61308: LD_INT 1
61310: PPUSH
61311: LD_VAR 0 4
61315: PPUSH
61316: CALL_OW 2
61320: ST_TO_ADDR
61321: GO 61352
// result := Replace ( result , result + 1 , un ) ;
61323: LD_ADDR_VAR 0 3
61327: PUSH
61328: LD_VAR 0 3
61332: PPUSH
61333: LD_VAR 0 3
61337: PUSH
61338: LD_INT 1
61340: PLUS
61341: PPUSH
61342: LD_VAR 0 4
61346: PPUSH
61347: CALL_OW 1
61351: ST_TO_ADDR
61352: GO 61278
61354: POP
61355: POP
// end ;
61356: LD_VAR 0 3
61360: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61361: LD_INT 0
61363: PPUSH
61364: PPUSH
61365: PPUSH
61366: PPUSH
61367: PPUSH
61368: PPUSH
61369: PPUSH
// result := [ ] ;
61370: LD_ADDR_VAR 0 4
61374: PUSH
61375: EMPTY
61376: ST_TO_ADDR
// if x - r < 0 then
61377: LD_VAR 0 1
61381: PUSH
61382: LD_VAR 0 3
61386: MINUS
61387: PUSH
61388: LD_INT 0
61390: LESS
61391: IFFALSE 61403
// min_x := 0 else
61393: LD_ADDR_VAR 0 8
61397: PUSH
61398: LD_INT 0
61400: ST_TO_ADDR
61401: GO 61419
// min_x := x - r ;
61403: LD_ADDR_VAR 0 8
61407: PUSH
61408: LD_VAR 0 1
61412: PUSH
61413: LD_VAR 0 3
61417: MINUS
61418: ST_TO_ADDR
// if y - r < 0 then
61419: LD_VAR 0 2
61423: PUSH
61424: LD_VAR 0 3
61428: MINUS
61429: PUSH
61430: LD_INT 0
61432: LESS
61433: IFFALSE 61445
// min_y := 0 else
61435: LD_ADDR_VAR 0 7
61439: PUSH
61440: LD_INT 0
61442: ST_TO_ADDR
61443: GO 61461
// min_y := y - r ;
61445: LD_ADDR_VAR 0 7
61449: PUSH
61450: LD_VAR 0 2
61454: PUSH
61455: LD_VAR 0 3
61459: MINUS
61460: ST_TO_ADDR
// max_x := x + r ;
61461: LD_ADDR_VAR 0 9
61465: PUSH
61466: LD_VAR 0 1
61470: PUSH
61471: LD_VAR 0 3
61475: PLUS
61476: ST_TO_ADDR
// max_y := y + r ;
61477: LD_ADDR_VAR 0 10
61481: PUSH
61482: LD_VAR 0 2
61486: PUSH
61487: LD_VAR 0 3
61491: PLUS
61492: ST_TO_ADDR
// for _x = min_x to max_x do
61493: LD_ADDR_VAR 0 5
61497: PUSH
61498: DOUBLE
61499: LD_VAR 0 8
61503: DEC
61504: ST_TO_ADDR
61505: LD_VAR 0 9
61509: PUSH
61510: FOR_TO
61511: IFFALSE 61612
// for _y = min_y to max_y do
61513: LD_ADDR_VAR 0 6
61517: PUSH
61518: DOUBLE
61519: LD_VAR 0 7
61523: DEC
61524: ST_TO_ADDR
61525: LD_VAR 0 10
61529: PUSH
61530: FOR_TO
61531: IFFALSE 61608
// begin if not ValidHex ( _x , _y ) then
61533: LD_VAR 0 5
61537: PPUSH
61538: LD_VAR 0 6
61542: PPUSH
61543: CALL_OW 488
61547: NOT
61548: IFFALSE 61552
// continue ;
61550: GO 61530
// if GetResourceTypeXY ( _x , _y ) then
61552: LD_VAR 0 5
61556: PPUSH
61557: LD_VAR 0 6
61561: PPUSH
61562: CALL_OW 283
61566: IFFALSE 61606
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61568: LD_ADDR_VAR 0 4
61572: PUSH
61573: LD_VAR 0 4
61577: PPUSH
61578: LD_VAR 0 4
61582: PUSH
61583: LD_INT 1
61585: PLUS
61586: PPUSH
61587: LD_VAR 0 5
61591: PUSH
61592: LD_VAR 0 6
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PPUSH
61601: CALL_OW 1
61605: ST_TO_ADDR
// end ;
61606: GO 61530
61608: POP
61609: POP
61610: GO 61510
61612: POP
61613: POP
// end ;
61614: LD_VAR 0 4
61618: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61619: LD_INT 0
61621: PPUSH
61622: PPUSH
61623: PPUSH
61624: PPUSH
61625: PPUSH
61626: PPUSH
61627: PPUSH
61628: PPUSH
// if not units then
61629: LD_VAR 0 1
61633: NOT
61634: IFFALSE 61638
// exit ;
61636: GO 62164
// result := UnitFilter ( units , [ f_ok ] ) ;
61638: LD_ADDR_VAR 0 3
61642: PUSH
61643: LD_VAR 0 1
61647: PPUSH
61648: LD_INT 50
61650: PUSH
61651: EMPTY
61652: LIST
61653: PPUSH
61654: CALL_OW 72
61658: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61659: LD_ADDR_VAR 0 8
61663: PUSH
61664: LD_VAR 0 1
61668: PUSH
61669: LD_INT 1
61671: ARRAY
61672: PPUSH
61673: CALL_OW 255
61677: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
61678: LD_ADDR_VAR 0 10
61682: PUSH
61683: LD_INT 29
61685: PUSH
61686: LD_EXP 76
61690: PUSH
61691: LD_INT 49
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: LIST
61698: ST_TO_ADDR
// if not result then
61699: LD_VAR 0 3
61703: NOT
61704: IFFALSE 61708
// exit ;
61706: GO 62164
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61708: LD_ADDR_VAR 0 5
61712: PUSH
61713: LD_INT 81
61715: PUSH
61716: LD_VAR 0 8
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PPUSH
61725: CALL_OW 69
61729: ST_TO_ADDR
// for i in result do
61730: LD_ADDR_VAR 0 4
61734: PUSH
61735: LD_VAR 0 3
61739: PUSH
61740: FOR_IN
61741: IFFALSE 62162
// begin tag := GetTag ( i ) + 1 ;
61743: LD_ADDR_VAR 0 9
61747: PUSH
61748: LD_VAR 0 4
61752: PPUSH
61753: CALL_OW 110
61757: PUSH
61758: LD_INT 1
61760: PLUS
61761: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
61762: LD_ADDR_VAR 0 7
61766: PUSH
61767: LD_VAR 0 4
61771: PPUSH
61772: CALL_OW 250
61776: PPUSH
61777: LD_VAR 0 4
61781: PPUSH
61782: CALL_OW 251
61786: PPUSH
61787: LD_INT 6
61789: PPUSH
61790: CALL 61361 0 3
61794: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
61795: LD_VAR 0 4
61799: PPUSH
61800: CALL_OW 247
61804: PUSH
61805: LD_INT 2
61807: EQUAL
61808: PUSH
61809: LD_VAR 0 7
61813: AND
61814: PUSH
61815: LD_VAR 0 4
61819: PPUSH
61820: CALL_OW 264
61824: PUSH
61825: LD_VAR 0 10
61829: IN
61830: NOT
61831: AND
61832: IFFALSE 61871
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61834: LD_VAR 0 4
61838: PPUSH
61839: LD_VAR 0 7
61843: PUSH
61844: LD_INT 1
61846: ARRAY
61847: PUSH
61848: LD_INT 1
61850: ARRAY
61851: PPUSH
61852: LD_VAR 0 7
61856: PUSH
61857: LD_INT 1
61859: ARRAY
61860: PUSH
61861: LD_INT 2
61863: ARRAY
61864: PPUSH
61865: CALL_OW 116
61869: GO 62160
// if path > tag then
61871: LD_VAR 0 2
61875: PUSH
61876: LD_VAR 0 9
61880: GREATER
61881: IFFALSE 62089
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
61883: LD_ADDR_VAR 0 6
61887: PUSH
61888: LD_VAR 0 5
61892: PPUSH
61893: LD_INT 91
61895: PUSH
61896: LD_VAR 0 4
61900: PUSH
61901: LD_INT 8
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: LIST
61908: PPUSH
61909: CALL_OW 72
61913: ST_TO_ADDR
// if nearEnemy then
61914: LD_VAR 0 6
61918: IFFALSE 61987
// begin if GetWeapon ( i ) = ru_time_lapser then
61920: LD_VAR 0 4
61924: PPUSH
61925: CALL_OW 264
61929: PUSH
61930: LD_INT 49
61932: EQUAL
61933: IFFALSE 61961
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
61935: LD_VAR 0 4
61939: PPUSH
61940: LD_VAR 0 6
61944: PPUSH
61945: LD_VAR 0 4
61949: PPUSH
61950: CALL_OW 74
61954: PPUSH
61955: CALL_OW 112
61959: GO 61985
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
61961: LD_VAR 0 4
61965: PPUSH
61966: LD_VAR 0 6
61970: PPUSH
61971: LD_VAR 0 4
61975: PPUSH
61976: CALL_OW 74
61980: PPUSH
61981: CALL_OW 115
// end else
61985: GO 62087
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
61987: LD_VAR 0 4
61991: PPUSH
61992: LD_VAR 0 2
61996: PUSH
61997: LD_VAR 0 9
62001: ARRAY
62002: PUSH
62003: LD_INT 1
62005: ARRAY
62006: PPUSH
62007: LD_VAR 0 2
62011: PUSH
62012: LD_VAR 0 9
62016: ARRAY
62017: PUSH
62018: LD_INT 2
62020: ARRAY
62021: PPUSH
62022: CALL_OW 297
62026: PUSH
62027: LD_INT 6
62029: GREATER
62030: IFFALSE 62073
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62032: LD_VAR 0 4
62036: PPUSH
62037: LD_VAR 0 2
62041: PUSH
62042: LD_VAR 0 9
62046: ARRAY
62047: PUSH
62048: LD_INT 1
62050: ARRAY
62051: PPUSH
62052: LD_VAR 0 2
62056: PUSH
62057: LD_VAR 0 9
62061: ARRAY
62062: PUSH
62063: LD_INT 2
62065: ARRAY
62066: PPUSH
62067: CALL_OW 114
62071: GO 62087
// SetTag ( i , tag ) ;
62073: LD_VAR 0 4
62077: PPUSH
62078: LD_VAR 0 9
62082: PPUSH
62083: CALL_OW 109
// end else
62087: GO 62160
// if enemy then
62089: LD_VAR 0 5
62093: IFFALSE 62160
// begin if GetWeapon ( i ) = ru_time_lapser then
62095: LD_VAR 0 4
62099: PPUSH
62100: CALL_OW 264
62104: PUSH
62105: LD_INT 49
62107: EQUAL
62108: IFFALSE 62136
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
62110: LD_VAR 0 4
62114: PPUSH
62115: LD_VAR 0 5
62119: PPUSH
62120: LD_VAR 0 4
62124: PPUSH
62125: CALL_OW 74
62129: PPUSH
62130: CALL_OW 112
62134: GO 62160
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62136: LD_VAR 0 4
62140: PPUSH
62141: LD_VAR 0 5
62145: PPUSH
62146: LD_VAR 0 4
62150: PPUSH
62151: CALL_OW 74
62155: PPUSH
62156: CALL_OW 115
// end ; end ;
62160: GO 61740
62162: POP
62163: POP
// end ;
62164: LD_VAR 0 3
62168: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62169: LD_INT 0
62171: PPUSH
62172: PPUSH
62173: PPUSH
// if not unit or IsInUnit ( unit ) then
62174: LD_VAR 0 1
62178: NOT
62179: PUSH
62180: LD_VAR 0 1
62184: PPUSH
62185: CALL_OW 310
62189: OR
62190: IFFALSE 62194
// exit ;
62192: GO 62285
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
62194: LD_ADDR_VAR 0 4
62198: PUSH
62199: LD_VAR 0 1
62203: PPUSH
62204: CALL_OW 250
62208: PPUSH
62209: LD_VAR 0 2
62213: PPUSH
62214: LD_INT 1
62216: PPUSH
62217: CALL_OW 272
62221: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
62222: LD_ADDR_VAR 0 5
62226: PUSH
62227: LD_VAR 0 1
62231: PPUSH
62232: CALL_OW 251
62236: PPUSH
62237: LD_VAR 0 2
62241: PPUSH
62242: LD_INT 1
62244: PPUSH
62245: CALL_OW 273
62249: ST_TO_ADDR
// if ValidHex ( x , y ) then
62250: LD_VAR 0 4
62254: PPUSH
62255: LD_VAR 0 5
62259: PPUSH
62260: CALL_OW 488
62264: IFFALSE 62285
// ComTurnXY ( unit , x , y ) ;
62266: LD_VAR 0 1
62270: PPUSH
62271: LD_VAR 0 4
62275: PPUSH
62276: LD_VAR 0 5
62280: PPUSH
62281: CALL_OW 118
// end ;
62285: LD_VAR 0 3
62289: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62290: LD_INT 0
62292: PPUSH
62293: PPUSH
// result := false ;
62294: LD_ADDR_VAR 0 3
62298: PUSH
62299: LD_INT 0
62301: ST_TO_ADDR
// if not units then
62302: LD_VAR 0 2
62306: NOT
62307: IFFALSE 62311
// exit ;
62309: GO 62356
// for i in units do
62311: LD_ADDR_VAR 0 4
62315: PUSH
62316: LD_VAR 0 2
62320: PUSH
62321: FOR_IN
62322: IFFALSE 62354
// if See ( side , i ) then
62324: LD_VAR 0 1
62328: PPUSH
62329: LD_VAR 0 4
62333: PPUSH
62334: CALL_OW 292
62338: IFFALSE 62352
// begin result := true ;
62340: LD_ADDR_VAR 0 3
62344: PUSH
62345: LD_INT 1
62347: ST_TO_ADDR
// exit ;
62348: POP
62349: POP
62350: GO 62356
// end ;
62352: GO 62321
62354: POP
62355: POP
// end ;
62356: LD_VAR 0 3
62360: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62361: LD_INT 0
62363: PPUSH
62364: PPUSH
62365: PPUSH
62366: PPUSH
// if not unit or not points then
62367: LD_VAR 0 1
62371: NOT
62372: PUSH
62373: LD_VAR 0 2
62377: NOT
62378: OR
62379: IFFALSE 62383
// exit ;
62381: GO 62473
// dist := 99999 ;
62383: LD_ADDR_VAR 0 5
62387: PUSH
62388: LD_INT 99999
62390: ST_TO_ADDR
// for i in points do
62391: LD_ADDR_VAR 0 4
62395: PUSH
62396: LD_VAR 0 2
62400: PUSH
62401: FOR_IN
62402: IFFALSE 62471
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62404: LD_ADDR_VAR 0 6
62408: PUSH
62409: LD_VAR 0 1
62413: PPUSH
62414: LD_VAR 0 4
62418: PUSH
62419: LD_INT 1
62421: ARRAY
62422: PPUSH
62423: LD_VAR 0 4
62427: PUSH
62428: LD_INT 2
62430: ARRAY
62431: PPUSH
62432: CALL_OW 297
62436: ST_TO_ADDR
// if tmpDist < dist then
62437: LD_VAR 0 6
62441: PUSH
62442: LD_VAR 0 5
62446: LESS
62447: IFFALSE 62469
// begin result := i ;
62449: LD_ADDR_VAR 0 3
62453: PUSH
62454: LD_VAR 0 4
62458: ST_TO_ADDR
// dist := tmpDist ;
62459: LD_ADDR_VAR 0 5
62463: PUSH
62464: LD_VAR 0 6
62468: ST_TO_ADDR
// end ; end ;
62469: GO 62401
62471: POP
62472: POP
// end ;
62473: LD_VAR 0 3
62477: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
62478: LD_INT 0
62480: PPUSH
// uc_side := side ;
62481: LD_ADDR_OWVAR 20
62485: PUSH
62486: LD_VAR 0 1
62490: ST_TO_ADDR
// uc_nation := 3 ;
62491: LD_ADDR_OWVAR 21
62495: PUSH
62496: LD_INT 3
62498: ST_TO_ADDR
// vc_chassis := 25 ;
62499: LD_ADDR_OWVAR 37
62503: PUSH
62504: LD_INT 25
62506: ST_TO_ADDR
// vc_engine := engine_siberite ;
62507: LD_ADDR_OWVAR 39
62511: PUSH
62512: LD_INT 3
62514: ST_TO_ADDR
// vc_control := control_computer ;
62515: LD_ADDR_OWVAR 38
62519: PUSH
62520: LD_INT 3
62522: ST_TO_ADDR
// vc_weapon := 59 ;
62523: LD_ADDR_OWVAR 40
62527: PUSH
62528: LD_INT 59
62530: ST_TO_ADDR
// result := CreateVehicle ;
62531: LD_ADDR_VAR 0 5
62535: PUSH
62536: CALL_OW 45
62540: ST_TO_ADDR
// SetDir ( result , d ) ;
62541: LD_VAR 0 5
62545: PPUSH
62546: LD_VAR 0 4
62550: PPUSH
62551: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
62555: LD_VAR 0 5
62559: PPUSH
62560: LD_VAR 0 2
62564: PPUSH
62565: LD_VAR 0 3
62569: PPUSH
62570: LD_INT 0
62572: PPUSH
62573: CALL_OW 48
// end ;
62577: LD_VAR 0 5
62581: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
62582: LD_INT 0
62584: PPUSH
62585: PPUSH
62586: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
62587: LD_ADDR_VAR 0 2
62591: PUSH
62592: LD_INT 0
62594: PUSH
62595: LD_INT 0
62597: PUSH
62598: LD_INT 0
62600: PUSH
62601: LD_INT 0
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
62610: LD_VAR 0 1
62614: NOT
62615: PUSH
62616: LD_VAR 0 1
62620: PPUSH
62621: CALL_OW 264
62625: PUSH
62626: LD_INT 12
62628: PUSH
62629: LD_INT 51
62631: PUSH
62632: LD_INT 32
62634: PUSH
62635: LD_EXP 73
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: IN
62646: NOT
62647: OR
62648: IFFALSE 62652
// exit ;
62650: GO 62750
// for i := 1 to 3 do
62652: LD_ADDR_VAR 0 3
62656: PUSH
62657: DOUBLE
62658: LD_INT 1
62660: DEC
62661: ST_TO_ADDR
62662: LD_INT 3
62664: PUSH
62665: FOR_TO
62666: IFFALSE 62748
// begin tmp := GetCargo ( cargo , i ) ;
62668: LD_ADDR_VAR 0 4
62672: PUSH
62673: LD_VAR 0 1
62677: PPUSH
62678: LD_VAR 0 3
62682: PPUSH
62683: CALL_OW 289
62687: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
62688: LD_ADDR_VAR 0 2
62692: PUSH
62693: LD_VAR 0 2
62697: PPUSH
62698: LD_VAR 0 3
62702: PPUSH
62703: LD_VAR 0 4
62707: PPUSH
62708: CALL_OW 1
62712: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
62713: LD_ADDR_VAR 0 2
62717: PUSH
62718: LD_VAR 0 2
62722: PPUSH
62723: LD_INT 4
62725: PPUSH
62726: LD_VAR 0 2
62730: PUSH
62731: LD_INT 4
62733: ARRAY
62734: PUSH
62735: LD_VAR 0 4
62739: PLUS
62740: PPUSH
62741: CALL_OW 1
62745: ST_TO_ADDR
// end ;
62746: GO 62665
62748: POP
62749: POP
// end ;
62750: LD_VAR 0 2
62754: RET
// export function Length ( array ) ; begin
62755: LD_INT 0
62757: PPUSH
// result := array + 0 ;
62758: LD_ADDR_VAR 0 2
62762: PUSH
62763: LD_VAR 0 1
62767: PUSH
62768: LD_INT 0
62770: PLUS
62771: ST_TO_ADDR
// end ;
62772: LD_VAR 0 2
62776: RET
// export function PrepareArray ( array ) ; begin
62777: LD_INT 0
62779: PPUSH
// result := array diff 0 ;
62780: LD_ADDR_VAR 0 2
62784: PUSH
62785: LD_VAR 0 1
62789: PUSH
62790: LD_INT 0
62792: DIFF
62793: ST_TO_ADDR
// if not result [ 1 ] then
62794: LD_VAR 0 2
62798: PUSH
62799: LD_INT 1
62801: ARRAY
62802: NOT
62803: IFFALSE 62823
// result := Delete ( result , 1 ) ;
62805: LD_ADDR_VAR 0 2
62809: PUSH
62810: LD_VAR 0 2
62814: PPUSH
62815: LD_INT 1
62817: PPUSH
62818: CALL_OW 3
62822: ST_TO_ADDR
// end ;
62823: LD_VAR 0 2
62827: RET
