// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 59 0 0
// TestFactory ;
   8: CALL 75 0 0
// end ;
  12: END
// every 0 0$1 do
  13: GO 15
  15: DISABLE
// begin enable ;
  16: ENABLE
// display_strings := [ Veh counter:  & ( FilterAllUnits ( [ f_type , unit_vehicle ] ) + 0 ) , Produce counter:  & produceCounter ] ;
  17: LD_ADDR_OWVAR 47
  21: PUSH
  22: LD_STRING Veh counter: 
  24: PUSH
  25: LD_INT 21
  27: PUSH
  28: LD_INT 2
  30: PUSH
  31: EMPTY
  32: LIST
  33: LIST
  34: PPUSH
  35: CALL_OW 69
  39: PUSH
  40: LD_INT 0
  42: PLUS
  43: STR
  44: PUSH
  45: LD_STRING Produce counter: 
  47: PUSH
  48: LD_EXP 1
  52: STR
  53: PUSH
  54: EMPTY
  55: LIST
  56: LIST
  57: ST_TO_ADDR
// end ;
  58: END
// export produceCounter ; function Init ; begin
  59: LD_INT 0
  61: PPUSH
// produceCounter := 0 ;
  62: LD_ADDR_EXP 1
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// end ;
  70: LD_VAR 0 1
  74: RET
// function TestFactory ; var i , chassis , weapon ; begin
  75: LD_INT 0
  77: PPUSH
  78: PPUSH
  79: PPUSH
  80: PPUSH
// uc_side := 1 ;
  81: LD_ADDR_OWVAR 20
  85: PUSH
  86: LD_INT 1
  88: ST_TO_ADDR
// uc_nation := 1 ;
  89: LD_ADDR_OWVAR 21
  93: PUSH
  94: LD_INT 1
  96: ST_TO_ADDR
// for i := 1 to 6 do
  97: LD_ADDR_VAR 0 2
 101: PUSH
 102: DOUBLE
 103: LD_INT 1
 105: DEC
 106: ST_TO_ADDR
 107: LD_INT 6
 109: PUSH
 110: FOR_TO
 111: IFFALSE 137
// begin PrepareMechanic ( false , 10 ) ;
 113: LD_INT 0
 115: PPUSH
 116: LD_INT 10
 118: PPUSH
 119: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , amFac ) ;
 123: CALL_OW 44
 127: PPUSH
 128: LD_INT 2
 130: PPUSH
 131: CALL_OW 52
// end ;
 135: GO 110
 137: POP
 138: POP
// for i := 1 to 3 do
 139: LD_ADDR_VAR 0 2
 143: PUSH
 144: DOUBLE
 145: LD_INT 1
 147: DEC
 148: ST_TO_ADDR
 149: LD_INT 3
 151: PUSH
 152: FOR_TO
 153: IFFALSE 179
// begin PrepareMechanic ( false , 10 ) ;
 155: LD_INT 0
 157: PPUSH
 158: LD_INT 10
 160: PPUSH
 161: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , amCT ) ;
 165: CALL_OW 44
 169: PPUSH
 170: LD_INT 10
 172: PPUSH
 173: CALL_OW 52
// end ;
 177: GO 152
 179: POP
 180: POP
// for i := 1 to 30 do
 181: LD_ADDR_VAR 0 2
 185: PUSH
 186: DOUBLE
 187: LD_INT 1
 189: DEC
 190: ST_TO_ADDR
 191: LD_INT 30
 193: PUSH
 194: FOR_TO
 195: IFFALSE 304
// begin chassis := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] [ rand ( 1 , 3 ) ] ;
 197: LD_ADDR_VAR 0 3
 201: PUSH
 202: LD_INT 2
 204: PUSH
 205: LD_INT 3
 207: PUSH
 208: LD_INT 4
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_INT 1
 218: PPUSH
 219: LD_INT 3
 221: PPUSH
 222: CALL_OW 12
 226: ARRAY
 227: ST_TO_ADDR
// if chassis = us_heavy_tracked then
 228: LD_VAR 0 3
 232: PUSH
 233: LD_INT 4
 235: EQUAL
 236: IFFALSE 248
// weapon := us_heavy_gun else
 238: LD_ADDR_VAR 0 4
 242: PUSH
 243: LD_INT 6
 245: ST_TO_ADDR
 246: GO 279
// weapon := [ us_double_gun , us_rocket_launcher , us_gatling_gun ] [ rand ( 1 , 3 ) ] ;
 248: LD_ADDR_VAR 0 4
 252: PUSH
 253: LD_INT 5
 255: PUSH
 256: LD_INT 7
 258: PUSH
 259: LD_INT 4
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: PUSH
 267: LD_INT 1
 269: PPUSH
 270: LD_INT 3
 272: PPUSH
 273: CALL_OW 12
 277: ARRAY
 278: ST_TO_ADDR
// AddComConstruct ( amFac , chassis , engine_combustion , control_remote , weapon ) ;
 279: LD_INT 2
 281: PPUSH
 282: LD_VAR 0 3
 286: PPUSH
 287: LD_INT 1
 289: PPUSH
 290: LD_INT 2
 292: PPUSH
 293: LD_VAR 0 4
 297: PPUSH
 298: CALL_OW 185
// end ;
 302: GO 194
 304: POP
 305: POP
// end ;
 306: LD_VAR 0 1
 310: RET
// on VehicleConstructed ( vehicle , factory ) do begin produceCounter := produceCounter + 1 ;
 311: LD_ADDR_EXP 1
 315: PUSH
 316: LD_EXP 1
 320: PUSH
 321: LD_INT 1
 323: PLUS
 324: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
 325: LD_VAR 0 1
 329: PPUSH
 330: CALL_OW 263
 334: PUSH
 335: LD_INT 2
 337: EQUAL
 338: IFFALSE 349
// Connect ( vehicle ) ;
 340: LD_VAR 0 1
 344: PPUSH
 345: CALL 8324 0 1
// AddComMoveXY ( vehicle , 94 , 77 ) ;
 349: LD_VAR 0 1
 353: PPUSH
 354: LD_INT 94
 356: PPUSH
 357: LD_INT 77
 359: PPUSH
 360: CALL_OW 171
// end ; end_of_file
 364: PPOPN 2
 366: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 367: LD_INT 0
 369: PPUSH
 370: PPUSH
// if exist_mode then
 371: LD_VAR 0 2
 375: IFFALSE 400
// unit := CreateCharacter ( prefix & ident ) else
 377: LD_ADDR_VAR 0 5
 381: PUSH
 382: LD_VAR 0 3
 386: PUSH
 387: LD_VAR 0 1
 391: STR
 392: PPUSH
 393: CALL_OW 34
 397: ST_TO_ADDR
 398: GO 415
// unit := NewCharacter ( ident ) ;
 400: LD_ADDR_VAR 0 5
 404: PUSH
 405: LD_VAR 0 1
 409: PPUSH
 410: CALL_OW 25
 414: ST_TO_ADDR
// result := unit ;
 415: LD_ADDR_VAR 0 4
 419: PUSH
 420: LD_VAR 0 5
 424: ST_TO_ADDR
// end ;
 425: LD_VAR 0 4
 429: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 430: LD_INT 0
 432: PPUSH
 433: PPUSH
// if not side or not nation then
 434: LD_VAR 0 1
 438: NOT
 439: PUSH
 440: LD_VAR 0 2
 444: NOT
 445: OR
 446: IFFALSE 450
// exit ;
 448: GO 1218
// case nation of nation_american :
 450: LD_VAR 0 2
 454: PUSH
 455: LD_INT 1
 457: DOUBLE
 458: EQUAL
 459: IFTRUE 463
 461: GO 677
 463: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 464: LD_ADDR_VAR 0 4
 468: PUSH
 469: LD_INT 35
 471: PUSH
 472: LD_INT 45
 474: PUSH
 475: LD_INT 46
 477: PUSH
 478: LD_INT 47
 480: PUSH
 481: LD_INT 82
 483: PUSH
 484: LD_INT 83
 486: PUSH
 487: LD_INT 84
 489: PUSH
 490: LD_INT 85
 492: PUSH
 493: LD_INT 86
 495: PUSH
 496: LD_INT 1
 498: PUSH
 499: LD_INT 2
 501: PUSH
 502: LD_INT 6
 504: PUSH
 505: LD_INT 15
 507: PUSH
 508: LD_INT 16
 510: PUSH
 511: LD_INT 7
 513: PUSH
 514: LD_INT 12
 516: PUSH
 517: LD_INT 13
 519: PUSH
 520: LD_INT 10
 522: PUSH
 523: LD_INT 14
 525: PUSH
 526: LD_INT 20
 528: PUSH
 529: LD_INT 21
 531: PUSH
 532: LD_INT 22
 534: PUSH
 535: LD_INT 25
 537: PUSH
 538: LD_INT 32
 540: PUSH
 541: LD_INT 27
 543: PUSH
 544: LD_INT 36
 546: PUSH
 547: LD_INT 69
 549: PUSH
 550: LD_INT 39
 552: PUSH
 553: LD_INT 34
 555: PUSH
 556: LD_INT 40
 558: PUSH
 559: LD_INT 48
 561: PUSH
 562: LD_INT 49
 564: PUSH
 565: LD_INT 50
 567: PUSH
 568: LD_INT 51
 570: PUSH
 571: LD_INT 52
 573: PUSH
 574: LD_INT 53
 576: PUSH
 577: LD_INT 54
 579: PUSH
 580: LD_INT 55
 582: PUSH
 583: LD_INT 56
 585: PUSH
 586: LD_INT 57
 588: PUSH
 589: LD_INT 58
 591: PUSH
 592: LD_INT 59
 594: PUSH
 595: LD_INT 60
 597: PUSH
 598: LD_INT 61
 600: PUSH
 601: LD_INT 62
 603: PUSH
 604: LD_INT 80
 606: PUSH
 607: LD_INT 82
 609: PUSH
 610: LD_INT 83
 612: PUSH
 613: LD_INT 84
 615: PUSH
 616: LD_INT 85
 618: PUSH
 619: LD_INT 86
 621: PUSH
 622: EMPTY
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: LIST
 639: LIST
 640: LIST
 641: LIST
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: LIST
 654: LIST
 655: LIST
 656: LIST
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: LIST
 662: LIST
 663: LIST
 664: LIST
 665: LIST
 666: LIST
 667: LIST
 668: LIST
 669: LIST
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: ST_TO_ADDR
 675: GO 1142
 677: LD_INT 2
 679: DOUBLE
 680: EQUAL
 681: IFTRUE 685
 683: GO 911
 685: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
 686: LD_ADDR_VAR 0 4
 690: PUSH
 691: LD_INT 35
 693: PUSH
 694: LD_INT 45
 696: PUSH
 697: LD_INT 46
 699: PUSH
 700: LD_INT 47
 702: PUSH
 703: LD_INT 82
 705: PUSH
 706: LD_INT 83
 708: PUSH
 709: LD_INT 84
 711: PUSH
 712: LD_INT 85
 714: PUSH
 715: LD_INT 87
 717: PUSH
 718: LD_INT 70
 720: PUSH
 721: LD_INT 1
 723: PUSH
 724: LD_INT 11
 726: PUSH
 727: LD_INT 3
 729: PUSH
 730: LD_INT 4
 732: PUSH
 733: LD_INT 5
 735: PUSH
 736: LD_INT 6
 738: PUSH
 739: LD_INT 15
 741: PUSH
 742: LD_INT 18
 744: PUSH
 745: LD_INT 7
 747: PUSH
 748: LD_INT 17
 750: PUSH
 751: LD_INT 8
 753: PUSH
 754: LD_INT 20
 756: PUSH
 757: LD_INT 21
 759: PUSH
 760: LD_INT 22
 762: PUSH
 763: LD_INT 72
 765: PUSH
 766: LD_INT 26
 768: PUSH
 769: LD_INT 69
 771: PUSH
 772: LD_INT 39
 774: PUSH
 775: LD_INT 40
 777: PUSH
 778: LD_INT 41
 780: PUSH
 781: LD_INT 42
 783: PUSH
 784: LD_INT 43
 786: PUSH
 787: LD_INT 48
 789: PUSH
 790: LD_INT 49
 792: PUSH
 793: LD_INT 50
 795: PUSH
 796: LD_INT 51
 798: PUSH
 799: LD_INT 52
 801: PUSH
 802: LD_INT 53
 804: PUSH
 805: LD_INT 54
 807: PUSH
 808: LD_INT 55
 810: PUSH
 811: LD_INT 56
 813: PUSH
 814: LD_INT 60
 816: PUSH
 817: LD_INT 61
 819: PUSH
 820: LD_INT 62
 822: PUSH
 823: LD_INT 66
 825: PUSH
 826: LD_INT 67
 828: PUSH
 829: LD_INT 68
 831: PUSH
 832: LD_INT 81
 834: PUSH
 835: LD_INT 82
 837: PUSH
 838: LD_INT 83
 840: PUSH
 841: LD_INT 84
 843: PUSH
 844: LD_INT 85
 846: PUSH
 847: LD_INT 87
 849: PUSH
 850: LD_INT 88
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: LIST
 871: LIST
 872: LIST
 873: LIST
 874: LIST
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: LIST
 898: LIST
 899: LIST
 900: LIST
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: ST_TO_ADDR
 909: GO 1142
 911: LD_INT 3
 913: DOUBLE
 914: EQUAL
 915: IFTRUE 919
 917: GO 1141
 919: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
 920: LD_ADDR_VAR 0 4
 924: PUSH
 925: LD_INT 46
 927: PUSH
 928: LD_INT 47
 930: PUSH
 931: LD_INT 1
 933: PUSH
 934: LD_INT 2
 936: PUSH
 937: LD_INT 82
 939: PUSH
 940: LD_INT 83
 942: PUSH
 943: LD_INT 84
 945: PUSH
 946: LD_INT 85
 948: PUSH
 949: LD_INT 86
 951: PUSH
 952: LD_INT 11
 954: PUSH
 955: LD_INT 9
 957: PUSH
 958: LD_INT 20
 960: PUSH
 961: LD_INT 19
 963: PUSH
 964: LD_INT 21
 966: PUSH
 967: LD_INT 24
 969: PUSH
 970: LD_INT 22
 972: PUSH
 973: LD_INT 25
 975: PUSH
 976: LD_INT 28
 978: PUSH
 979: LD_INT 29
 981: PUSH
 982: LD_INT 30
 984: PUSH
 985: LD_INT 31
 987: PUSH
 988: LD_INT 37
 990: PUSH
 991: LD_INT 38
 993: PUSH
 994: LD_INT 32
 996: PUSH
 997: LD_INT 27
 999: PUSH
1000: LD_INT 33
1002: PUSH
1003: LD_INT 69
1005: PUSH
1006: LD_INT 39
1008: PUSH
1009: LD_INT 34
1011: PUSH
1012: LD_INT 40
1014: PUSH
1015: LD_INT 71
1017: PUSH
1018: LD_INT 23
1020: PUSH
1021: LD_INT 44
1023: PUSH
1024: LD_INT 48
1026: PUSH
1027: LD_INT 49
1029: PUSH
1030: LD_INT 50
1032: PUSH
1033: LD_INT 51
1035: PUSH
1036: LD_INT 52
1038: PUSH
1039: LD_INT 53
1041: PUSH
1042: LD_INT 54
1044: PUSH
1045: LD_INT 55
1047: PUSH
1048: LD_INT 56
1050: PUSH
1051: LD_INT 57
1053: PUSH
1054: LD_INT 58
1056: PUSH
1057: LD_INT 59
1059: PUSH
1060: LD_INT 63
1062: PUSH
1063: LD_INT 64
1065: PUSH
1066: LD_INT 65
1068: PUSH
1069: LD_INT 82
1071: PUSH
1072: LD_INT 83
1074: PUSH
1075: LD_INT 84
1077: PUSH
1078: LD_INT 85
1080: PUSH
1081: LD_INT 86
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: LIST
1112: LIST
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: LIST
1118: LIST
1119: LIST
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: LIST
1125: LIST
1126: LIST
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: LIST
1136: LIST
1137: LIST
1138: ST_TO_ADDR
1139: GO 1142
1141: POP
// if state > - 1 and state < 3 then
1142: LD_VAR 0 3
1146: PUSH
1147: LD_INT 1
1149: NEG
1150: GREATER
1151: PUSH
1152: LD_VAR 0 3
1156: PUSH
1157: LD_INT 3
1159: LESS
1160: AND
1161: IFFALSE 1218
// for i in result do
1163: LD_ADDR_VAR 0 5
1167: PUSH
1168: LD_VAR 0 4
1172: PUSH
1173: FOR_IN
1174: IFFALSE 1216
// if GetTech ( i , side ) <> state then
1176: LD_VAR 0 5
1180: PPUSH
1181: LD_VAR 0 1
1185: PPUSH
1186: CALL_OW 321
1190: PUSH
1191: LD_VAR 0 3
1195: NONEQUAL
1196: IFFALSE 1214
// result := result diff i ;
1198: LD_ADDR_VAR 0 4
1202: PUSH
1203: LD_VAR 0 4
1207: PUSH
1208: LD_VAR 0 5
1212: DIFF
1213: ST_TO_ADDR
1214: GO 1173
1216: POP
1217: POP
// end ;
1218: LD_VAR 0 4
1222: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1223: LD_INT 0
1225: PPUSH
1226: PPUSH
1227: PPUSH
// result := true ;
1228: LD_ADDR_VAR 0 3
1232: PUSH
1233: LD_INT 1
1235: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1236: LD_ADDR_VAR 0 5
1240: PUSH
1241: LD_VAR 0 2
1245: PPUSH
1246: CALL_OW 480
1250: ST_TO_ADDR
// if not tmp then
1251: LD_VAR 0 5
1255: NOT
1256: IFFALSE 1260
// exit ;
1258: GO 1309
// for i in tmp do
1260: LD_ADDR_VAR 0 4
1264: PUSH
1265: LD_VAR 0 5
1269: PUSH
1270: FOR_IN
1271: IFFALSE 1307
// if GetTech ( i , side ) <> state_researched then
1273: LD_VAR 0 4
1277: PPUSH
1278: LD_VAR 0 1
1282: PPUSH
1283: CALL_OW 321
1287: PUSH
1288: LD_INT 2
1290: NONEQUAL
1291: IFFALSE 1305
// begin result := false ;
1293: LD_ADDR_VAR 0 3
1297: PUSH
1298: LD_INT 0
1300: ST_TO_ADDR
// exit ;
1301: POP
1302: POP
1303: GO 1309
// end ;
1305: GO 1270
1307: POP
1308: POP
// end ;
1309: LD_VAR 0 3
1313: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1314: LD_INT 0
1316: PPUSH
1317: PPUSH
1318: PPUSH
1319: PPUSH
1320: PPUSH
1321: PPUSH
1322: PPUSH
1323: PPUSH
1324: PPUSH
1325: PPUSH
1326: PPUSH
1327: PPUSH
1328: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1329: LD_VAR 0 1
1333: NOT
1334: PUSH
1335: LD_VAR 0 1
1339: PPUSH
1340: CALL_OW 257
1344: PUSH
1345: LD_INT 9
1347: NONEQUAL
1348: OR
1349: IFFALSE 1353
// exit ;
1351: GO 1926
// side := GetSide ( unit ) ;
1353: LD_ADDR_VAR 0 9
1357: PUSH
1358: LD_VAR 0 1
1362: PPUSH
1363: CALL_OW 255
1367: ST_TO_ADDR
// tech_space := tech_spacanom ;
1368: LD_ADDR_VAR 0 12
1372: PUSH
1373: LD_INT 29
1375: ST_TO_ADDR
// tech_time := tech_taurad ;
1376: LD_ADDR_VAR 0 13
1380: PUSH
1381: LD_INT 28
1383: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1384: LD_ADDR_VAR 0 11
1388: PUSH
1389: LD_VAR 0 1
1393: PPUSH
1394: CALL_OW 310
1398: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1399: LD_VAR 0 11
1403: PPUSH
1404: CALL_OW 247
1408: PUSH
1409: LD_INT 2
1411: EQUAL
1412: IFFALSE 1416
// exit ;
1414: GO 1926
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1416: LD_ADDR_VAR 0 8
1420: PUSH
1421: LD_INT 81
1423: PUSH
1424: LD_VAR 0 9
1428: PUSH
1429: EMPTY
1430: LIST
1431: LIST
1432: PUSH
1433: LD_INT 3
1435: PUSH
1436: LD_INT 21
1438: PUSH
1439: LD_INT 3
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: PUSH
1450: EMPTY
1451: LIST
1452: LIST
1453: PPUSH
1454: CALL_OW 69
1458: ST_TO_ADDR
// if not tmp then
1459: LD_VAR 0 8
1463: NOT
1464: IFFALSE 1468
// exit ;
1466: GO 1926
// if in_unit then
1468: LD_VAR 0 11
1472: IFFALSE 1496
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1474: LD_ADDR_VAR 0 10
1478: PUSH
1479: LD_VAR 0 8
1483: PPUSH
1484: LD_VAR 0 11
1488: PPUSH
1489: CALL_OW 74
1493: ST_TO_ADDR
1494: GO 1516
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1496: LD_ADDR_VAR 0 10
1500: PUSH
1501: LD_VAR 0 8
1505: PPUSH
1506: LD_VAR 0 1
1510: PPUSH
1511: CALL_OW 74
1515: ST_TO_ADDR
// if not enemy then
1516: LD_VAR 0 10
1520: NOT
1521: IFFALSE 1525
// exit ;
1523: GO 1926
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1525: LD_VAR 0 11
1529: PUSH
1530: LD_VAR 0 11
1534: PPUSH
1535: LD_VAR 0 10
1539: PPUSH
1540: CALL_OW 296
1544: PUSH
1545: LD_INT 13
1547: GREATER
1548: AND
1549: PUSH
1550: LD_VAR 0 1
1554: PPUSH
1555: LD_VAR 0 10
1559: PPUSH
1560: CALL_OW 296
1564: PUSH
1565: LD_INT 12
1567: GREATER
1568: OR
1569: IFFALSE 1573
// exit ;
1571: GO 1926
// missile := [ 1 ] ;
1573: LD_ADDR_VAR 0 14
1577: PUSH
1578: LD_INT 1
1580: PUSH
1581: EMPTY
1582: LIST
1583: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1584: LD_VAR 0 9
1588: PPUSH
1589: LD_VAR 0 12
1593: PPUSH
1594: CALL_OW 325
1598: IFFALSE 1627
// missile := Insert ( missile , missile + 1 , 2 ) ;
1600: LD_ADDR_VAR 0 14
1604: PUSH
1605: LD_VAR 0 14
1609: PPUSH
1610: LD_VAR 0 14
1614: PUSH
1615: LD_INT 1
1617: PLUS
1618: PPUSH
1619: LD_INT 2
1621: PPUSH
1622: CALL_OW 2
1626: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1627: LD_VAR 0 9
1631: PPUSH
1632: LD_VAR 0 13
1636: PPUSH
1637: CALL_OW 325
1641: PUSH
1642: LD_VAR 0 10
1646: PPUSH
1647: CALL_OW 255
1651: PPUSH
1652: LD_VAR 0 13
1656: PPUSH
1657: CALL_OW 325
1661: NOT
1662: AND
1663: IFFALSE 1692
// missile := Insert ( missile , missile + 1 , 3 ) ;
1665: LD_ADDR_VAR 0 14
1669: PUSH
1670: LD_VAR 0 14
1674: PPUSH
1675: LD_VAR 0 14
1679: PUSH
1680: LD_INT 1
1682: PLUS
1683: PPUSH
1684: LD_INT 3
1686: PPUSH
1687: CALL_OW 2
1691: ST_TO_ADDR
// if missile < 2 then
1692: LD_VAR 0 14
1696: PUSH
1697: LD_INT 2
1699: LESS
1700: IFFALSE 1704
// exit ;
1702: GO 1926
// x := GetX ( enemy ) ;
1704: LD_ADDR_VAR 0 4
1708: PUSH
1709: LD_VAR 0 10
1713: PPUSH
1714: CALL_OW 250
1718: ST_TO_ADDR
// y := GetY ( enemy ) ;
1719: LD_ADDR_VAR 0 5
1723: PUSH
1724: LD_VAR 0 10
1728: PPUSH
1729: CALL_OW 251
1733: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
1734: LD_ADDR_VAR 0 6
1738: PUSH
1739: LD_VAR 0 4
1743: PUSH
1744: LD_INT 1
1746: NEG
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL_OW 12
1755: PLUS
1756: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
1757: LD_ADDR_VAR 0 7
1761: PUSH
1762: LD_VAR 0 5
1766: PUSH
1767: LD_INT 1
1769: NEG
1770: PPUSH
1771: LD_INT 1
1773: PPUSH
1774: CALL_OW 12
1778: PLUS
1779: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1780: LD_VAR 0 6
1784: PPUSH
1785: LD_VAR 0 7
1789: PPUSH
1790: CALL_OW 488
1794: NOT
1795: IFFALSE 1817
// begin _x := x ;
1797: LD_ADDR_VAR 0 6
1801: PUSH
1802: LD_VAR 0 4
1806: ST_TO_ADDR
// _y := y ;
1807: LD_ADDR_VAR 0 7
1811: PUSH
1812: LD_VAR 0 5
1816: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
1817: LD_ADDR_VAR 0 3
1821: PUSH
1822: LD_INT 1
1824: PPUSH
1825: LD_VAR 0 14
1829: PPUSH
1830: CALL_OW 12
1834: ST_TO_ADDR
// case i of 1 :
1835: LD_VAR 0 3
1839: PUSH
1840: LD_INT 1
1842: DOUBLE
1843: EQUAL
1844: IFTRUE 1848
1846: GO 1865
1848: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
1849: LD_VAR 0 1
1853: PPUSH
1854: LD_VAR 0 10
1858: PPUSH
1859: CALL_OW 115
1863: GO 1926
1865: LD_INT 2
1867: DOUBLE
1868: EQUAL
1869: IFTRUE 1873
1871: GO 1895
1873: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
1874: LD_VAR 0 1
1878: PPUSH
1879: LD_VAR 0 6
1883: PPUSH
1884: LD_VAR 0 7
1888: PPUSH
1889: CALL_OW 153
1893: GO 1926
1895: LD_INT 3
1897: DOUBLE
1898: EQUAL
1899: IFTRUE 1903
1901: GO 1925
1903: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
1904: LD_VAR 0 1
1908: PPUSH
1909: LD_VAR 0 6
1913: PPUSH
1914: LD_VAR 0 7
1918: PPUSH
1919: CALL_OW 154
1923: GO 1926
1925: POP
// end ;
1926: LD_VAR 0 2
1930: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
1931: LD_INT 0
1933: PPUSH
1934: PPUSH
1935: PPUSH
1936: PPUSH
1937: PPUSH
1938: PPUSH
// if not unit or not building then
1939: LD_VAR 0 1
1943: NOT
1944: PUSH
1945: LD_VAR 0 2
1949: NOT
1950: OR
1951: IFFALSE 1955
// exit ;
1953: GO 2113
// x := GetX ( building ) ;
1955: LD_ADDR_VAR 0 5
1959: PUSH
1960: LD_VAR 0 2
1964: PPUSH
1965: CALL_OW 250
1969: ST_TO_ADDR
// y := GetY ( building ) ;
1970: LD_ADDR_VAR 0 6
1974: PUSH
1975: LD_VAR 0 2
1979: PPUSH
1980: CALL_OW 251
1984: ST_TO_ADDR
// for i = 0 to 5 do
1985: LD_ADDR_VAR 0 4
1989: PUSH
1990: DOUBLE
1991: LD_INT 0
1993: DEC
1994: ST_TO_ADDR
1995: LD_INT 5
1997: PUSH
1998: FOR_TO
1999: IFFALSE 2111
// begin _x := ShiftX ( x , i , 3 ) ;
2001: LD_ADDR_VAR 0 7
2005: PUSH
2006: LD_VAR 0 5
2010: PPUSH
2011: LD_VAR 0 4
2015: PPUSH
2016: LD_INT 3
2018: PPUSH
2019: CALL_OW 272
2023: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2024: LD_ADDR_VAR 0 8
2028: PUSH
2029: LD_VAR 0 6
2033: PPUSH
2034: LD_VAR 0 4
2038: PPUSH
2039: LD_INT 3
2041: PPUSH
2042: CALL_OW 273
2046: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2047: LD_VAR 0 7
2051: PPUSH
2052: LD_VAR 0 8
2056: PPUSH
2057: CALL_OW 488
2061: NOT
2062: IFFALSE 2066
// continue ;
2064: GO 1998
// if HexInfo ( _x , _y ) = 0 then
2066: LD_VAR 0 7
2070: PPUSH
2071: LD_VAR 0 8
2075: PPUSH
2076: CALL_OW 428
2080: PUSH
2081: LD_INT 0
2083: EQUAL
2084: IFFALSE 2109
// begin ComMoveXY ( unit , _x , _y ) ;
2086: LD_VAR 0 1
2090: PPUSH
2091: LD_VAR 0 7
2095: PPUSH
2096: LD_VAR 0 8
2100: PPUSH
2101: CALL_OW 111
// exit ;
2105: POP
2106: POP
2107: GO 2113
// end ; end ;
2109: GO 1998
2111: POP
2112: POP
// end ;
2113: LD_VAR 0 3
2117: RET
// export function ScanBase ( side , base_area ) ; begin
2118: LD_INT 0
2120: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2121: LD_ADDR_VAR 0 3
2125: PUSH
2126: LD_VAR 0 2
2130: PPUSH
2131: LD_INT 81
2133: PUSH
2134: LD_VAR 0 1
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: PPUSH
2143: CALL_OW 70
2147: ST_TO_ADDR
// end ;
2148: LD_VAR 0 3
2152: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2153: LD_INT 0
2155: PPUSH
2156: PPUSH
2157: PPUSH
2158: PPUSH
// result := false ;
2159: LD_ADDR_VAR 0 2
2163: PUSH
2164: LD_INT 0
2166: ST_TO_ADDR
// side := GetSide ( unit ) ;
2167: LD_ADDR_VAR 0 3
2171: PUSH
2172: LD_VAR 0 1
2176: PPUSH
2177: CALL_OW 255
2181: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2182: LD_ADDR_VAR 0 4
2186: PUSH
2187: LD_VAR 0 1
2191: PPUSH
2192: CALL_OW 248
2196: ST_TO_ADDR
// case nat of 1 :
2197: LD_VAR 0 4
2201: PUSH
2202: LD_INT 1
2204: DOUBLE
2205: EQUAL
2206: IFTRUE 2210
2208: GO 2221
2210: POP
// tech := tech_lassight ; 2 :
2211: LD_ADDR_VAR 0 5
2215: PUSH
2216: LD_INT 12
2218: ST_TO_ADDR
2219: GO 2260
2221: LD_INT 2
2223: DOUBLE
2224: EQUAL
2225: IFTRUE 2229
2227: GO 2240
2229: POP
// tech := tech_mortar ; 3 :
2230: LD_ADDR_VAR 0 5
2234: PUSH
2235: LD_INT 41
2237: ST_TO_ADDR
2238: GO 2260
2240: LD_INT 3
2242: DOUBLE
2243: EQUAL
2244: IFTRUE 2248
2246: GO 2259
2248: POP
// tech := tech_bazooka ; end ;
2249: LD_ADDR_VAR 0 5
2253: PUSH
2254: LD_INT 44
2256: ST_TO_ADDR
2257: GO 2260
2259: POP
// if Researched ( side , tech ) then
2260: LD_VAR 0 3
2264: PPUSH
2265: LD_VAR 0 5
2269: PPUSH
2270: CALL_OW 325
2274: IFFALSE 2301
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2276: LD_ADDR_VAR 0 2
2280: PUSH
2281: LD_INT 5
2283: PUSH
2284: LD_INT 8
2286: PUSH
2287: LD_INT 9
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: LIST
2294: PUSH
2295: LD_VAR 0 4
2299: ARRAY
2300: ST_TO_ADDR
// end ;
2301: LD_VAR 0 2
2305: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2306: LD_INT 0
2308: PPUSH
2309: PPUSH
2310: PPUSH
// if not mines then
2311: LD_VAR 0 2
2315: NOT
2316: IFFALSE 2320
// exit ;
2318: GO 2464
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2320: LD_ADDR_VAR 0 5
2324: PUSH
2325: LD_INT 81
2327: PUSH
2328: LD_VAR 0 1
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: PUSH
2337: LD_INT 3
2339: PUSH
2340: LD_INT 21
2342: PUSH
2343: LD_INT 3
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: PUSH
2354: EMPTY
2355: LIST
2356: LIST
2357: PPUSH
2358: CALL_OW 69
2362: ST_TO_ADDR
// for i in mines do
2363: LD_ADDR_VAR 0 4
2367: PUSH
2368: LD_VAR 0 2
2372: PUSH
2373: FOR_IN
2374: IFFALSE 2462
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2376: LD_VAR 0 4
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PPUSH
2385: LD_VAR 0 4
2389: PUSH
2390: LD_INT 2
2392: ARRAY
2393: PPUSH
2394: CALL_OW 458
2398: NOT
2399: IFFALSE 2403
// continue ;
2401: GO 2373
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2403: LD_VAR 0 4
2407: PUSH
2408: LD_INT 1
2410: ARRAY
2411: PPUSH
2412: LD_VAR 0 4
2416: PUSH
2417: LD_INT 2
2419: ARRAY
2420: PPUSH
2421: CALL_OW 428
2425: PUSH
2426: LD_VAR 0 5
2430: IN
2431: IFFALSE 2460
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2433: LD_VAR 0 4
2437: PUSH
2438: LD_INT 1
2440: ARRAY
2441: PPUSH
2442: LD_VAR 0 4
2446: PUSH
2447: LD_INT 2
2449: ARRAY
2450: PPUSH
2451: LD_VAR 0 1
2455: PPUSH
2456: CALL_OW 456
// end ;
2460: GO 2373
2462: POP
2463: POP
// end ;
2464: LD_VAR 0 3
2468: RET
// export function Count ( array ) ; var i ; begin
2469: LD_INT 0
2471: PPUSH
2472: PPUSH
// result := 0 ;
2473: LD_ADDR_VAR 0 2
2477: PUSH
2478: LD_INT 0
2480: ST_TO_ADDR
// for i in array do
2481: LD_ADDR_VAR 0 3
2485: PUSH
2486: LD_VAR 0 1
2490: PUSH
2491: FOR_IN
2492: IFFALSE 2516
// if i then
2494: LD_VAR 0 3
2498: IFFALSE 2514
// result := result + 1 ;
2500: LD_ADDR_VAR 0 2
2504: PUSH
2505: LD_VAR 0 2
2509: PUSH
2510: LD_INT 1
2512: PLUS
2513: ST_TO_ADDR
2514: GO 2491
2516: POP
2517: POP
// end ;
2518: LD_VAR 0 2
2522: RET
// export function IsEmpty ( building ) ; begin
2523: LD_INT 0
2525: PPUSH
// if not building then
2526: LD_VAR 0 1
2530: NOT
2531: IFFALSE 2535
// exit ;
2533: GO 2578
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2535: LD_ADDR_VAR 0 2
2539: PUSH
2540: LD_VAR 0 1
2544: PUSH
2545: LD_INT 22
2547: PUSH
2548: LD_VAR 0 1
2552: PPUSH
2553: CALL_OW 255
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 58
2564: PUSH
2565: EMPTY
2566: LIST
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PPUSH
2572: CALL_OW 69
2576: IN
2577: ST_TO_ADDR
// end ;
2578: LD_VAR 0 2
2582: RET
// export function IsNotFull ( building ) ; begin
2583: LD_INT 0
2585: PPUSH
// if not building then
2586: LD_VAR 0 1
2590: NOT
2591: IFFALSE 2595
// exit ;
2593: GO 2614
// result := UnitsInside ( building ) < 6 ;
2595: LD_ADDR_VAR 0 2
2599: PUSH
2600: LD_VAR 0 1
2604: PPUSH
2605: CALL_OW 313
2609: PUSH
2610: LD_INT 6
2612: LESS
2613: ST_TO_ADDR
// end ;
2614: LD_VAR 0 2
2618: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2619: LD_INT 0
2621: PPUSH
2622: PPUSH
2623: PPUSH
2624: PPUSH
// tmp := [ ] ;
2625: LD_ADDR_VAR 0 3
2629: PUSH
2630: EMPTY
2631: ST_TO_ADDR
// list := [ ] ;
2632: LD_ADDR_VAR 0 5
2636: PUSH
2637: EMPTY
2638: ST_TO_ADDR
// for i = 16 to 25 do
2639: LD_ADDR_VAR 0 4
2643: PUSH
2644: DOUBLE
2645: LD_INT 16
2647: DEC
2648: ST_TO_ADDR
2649: LD_INT 25
2651: PUSH
2652: FOR_TO
2653: IFFALSE 2726
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2655: LD_ADDR_VAR 0 3
2659: PUSH
2660: LD_VAR 0 3
2664: PUSH
2665: LD_INT 22
2667: PUSH
2668: LD_VAR 0 1
2672: PPUSH
2673: CALL_OW 255
2677: PUSH
2678: EMPTY
2679: LIST
2680: LIST
2681: PUSH
2682: LD_INT 91
2684: PUSH
2685: LD_VAR 0 1
2689: PUSH
2690: LD_INT 6
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: LIST
2697: PUSH
2698: LD_INT 30
2700: PUSH
2701: LD_VAR 0 4
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: PUSH
2710: EMPTY
2711: LIST
2712: LIST
2713: LIST
2714: PUSH
2715: EMPTY
2716: LIST
2717: PPUSH
2718: CALL_OW 69
2722: ADD
2723: ST_TO_ADDR
2724: GO 2652
2726: POP
2727: POP
// for i = 1 to tmp do
2728: LD_ADDR_VAR 0 4
2732: PUSH
2733: DOUBLE
2734: LD_INT 1
2736: DEC
2737: ST_TO_ADDR
2738: LD_VAR 0 3
2742: PUSH
2743: FOR_TO
2744: IFFALSE 2832
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
2746: LD_ADDR_VAR 0 5
2750: PUSH
2751: LD_VAR 0 5
2755: PUSH
2756: LD_VAR 0 3
2760: PUSH
2761: LD_VAR 0 4
2765: ARRAY
2766: PPUSH
2767: CALL_OW 266
2771: PUSH
2772: LD_VAR 0 3
2776: PUSH
2777: LD_VAR 0 4
2781: ARRAY
2782: PPUSH
2783: CALL_OW 250
2787: PUSH
2788: LD_VAR 0 3
2792: PUSH
2793: LD_VAR 0 4
2797: ARRAY
2798: PPUSH
2799: CALL_OW 251
2803: PUSH
2804: LD_VAR 0 3
2808: PUSH
2809: LD_VAR 0 4
2813: ARRAY
2814: PPUSH
2815: CALL_OW 254
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: LIST
2824: LIST
2825: PUSH
2826: EMPTY
2827: LIST
2828: ADD
2829: ST_TO_ADDR
2830: GO 2743
2832: POP
2833: POP
// result := list ;
2834: LD_ADDR_VAR 0 2
2838: PUSH
2839: LD_VAR 0 5
2843: ST_TO_ADDR
// end ;
2844: LD_VAR 0 2
2848: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
2849: LD_INT 0
2851: PPUSH
2852: PPUSH
2853: PPUSH
2854: PPUSH
2855: PPUSH
2856: PPUSH
2857: PPUSH
// if not factory then
2858: LD_VAR 0 1
2862: NOT
2863: IFFALSE 2867
// exit ;
2865: GO 3460
// if control = control_apeman then
2867: LD_VAR 0 4
2871: PUSH
2872: LD_INT 5
2874: EQUAL
2875: IFFALSE 2984
// begin tmp := UnitsInside ( factory ) ;
2877: LD_ADDR_VAR 0 8
2881: PUSH
2882: LD_VAR 0 1
2886: PPUSH
2887: CALL_OW 313
2891: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
2892: LD_VAR 0 8
2896: PPUSH
2897: LD_INT 25
2899: PUSH
2900: LD_INT 12
2902: PUSH
2903: EMPTY
2904: LIST
2905: LIST
2906: PPUSH
2907: CALL_OW 72
2911: NOT
2912: IFFALSE 2922
// control := control_manual ;
2914: LD_ADDR_VAR 0 4
2918: PUSH
2919: LD_INT 1
2921: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
2922: LD_ADDR_VAR 0 8
2926: PUSH
2927: LD_VAR 0 1
2931: PPUSH
2932: CALL 2619 0 1
2936: ST_TO_ADDR
// if tmp then
2937: LD_VAR 0 8
2941: IFFALSE 2984
// begin for i in tmp do
2943: LD_ADDR_VAR 0 7
2947: PUSH
2948: LD_VAR 0 8
2952: PUSH
2953: FOR_IN
2954: IFFALSE 2982
// if i [ 1 ] = b_ext_radio then
2956: LD_VAR 0 7
2960: PUSH
2961: LD_INT 1
2963: ARRAY
2964: PUSH
2965: LD_INT 22
2967: EQUAL
2968: IFFALSE 2980
// begin control := control_remote ;
2970: LD_ADDR_VAR 0 4
2974: PUSH
2975: LD_INT 2
2977: ST_TO_ADDR
// break ;
2978: GO 2982
// end ;
2980: GO 2953
2982: POP
2983: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
2984: LD_VAR 0 1
2988: PPUSH
2989: LD_VAR 0 2
2993: PPUSH
2994: LD_VAR 0 3
2998: PPUSH
2999: LD_VAR 0 4
3003: PPUSH
3004: LD_VAR 0 5
3008: PPUSH
3009: CALL_OW 448
3013: IFFALSE 3048
// begin result := [ chassis , engine , control , weapon ] ;
3015: LD_ADDR_VAR 0 6
3019: PUSH
3020: LD_VAR 0 2
3024: PUSH
3025: LD_VAR 0 3
3029: PUSH
3030: LD_VAR 0 4
3034: PUSH
3035: LD_VAR 0 5
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: LIST
3044: LIST
3045: ST_TO_ADDR
// exit ;
3046: GO 3460
// end ; _chassis := AvailableChassisList ( factory ) ;
3048: LD_ADDR_VAR 0 9
3052: PUSH
3053: LD_VAR 0 1
3057: PPUSH
3058: CALL_OW 475
3062: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3063: LD_ADDR_VAR 0 11
3067: PUSH
3068: LD_VAR 0 1
3072: PPUSH
3073: CALL_OW 476
3077: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3078: LD_ADDR_VAR 0 12
3082: PUSH
3083: LD_VAR 0 1
3087: PPUSH
3088: CALL_OW 477
3092: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3093: LD_ADDR_VAR 0 10
3097: PUSH
3098: LD_VAR 0 1
3102: PPUSH
3103: CALL_OW 478
3107: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3108: LD_VAR 0 9
3112: NOT
3113: PUSH
3114: LD_VAR 0 11
3118: NOT
3119: OR
3120: PUSH
3121: LD_VAR 0 12
3125: NOT
3126: OR
3127: PUSH
3128: LD_VAR 0 10
3132: NOT
3133: OR
3134: IFFALSE 3169
// begin result := [ chassis , engine , control , weapon ] ;
3136: LD_ADDR_VAR 0 6
3140: PUSH
3141: LD_VAR 0 2
3145: PUSH
3146: LD_VAR 0 3
3150: PUSH
3151: LD_VAR 0 4
3155: PUSH
3156: LD_VAR 0 5
3160: PUSH
3161: EMPTY
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: ST_TO_ADDR
// exit ;
3167: GO 3460
// end ; if not chassis in _chassis then
3169: LD_VAR 0 2
3173: PUSH
3174: LD_VAR 0 9
3178: IN
3179: NOT
3180: IFFALSE 3206
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3182: LD_ADDR_VAR 0 2
3186: PUSH
3187: LD_VAR 0 9
3191: PUSH
3192: LD_INT 1
3194: PPUSH
3195: LD_VAR 0 9
3199: PPUSH
3200: CALL_OW 12
3204: ARRAY
3205: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3206: LD_VAR 0 2
3210: PPUSH
3211: LD_VAR 0 3
3215: PPUSH
3216: CALL 3465 0 2
3220: NOT
3221: IFFALSE 3280
// repeat engine := _engine [ 1 ] ;
3223: LD_ADDR_VAR 0 3
3227: PUSH
3228: LD_VAR 0 11
3232: PUSH
3233: LD_INT 1
3235: ARRAY
3236: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3237: LD_ADDR_VAR 0 11
3241: PUSH
3242: LD_VAR 0 11
3246: PPUSH
3247: LD_INT 1
3249: PPUSH
3250: CALL_OW 3
3254: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3255: LD_VAR 0 2
3259: PPUSH
3260: LD_VAR 0 3
3264: PPUSH
3265: CALL 3465 0 2
3269: PUSH
3270: LD_VAR 0 11
3274: PUSH
3275: EMPTY
3276: EQUAL
3277: OR
3278: IFFALSE 3223
// if not control in _control then
3280: LD_VAR 0 4
3284: PUSH
3285: LD_VAR 0 12
3289: IN
3290: NOT
3291: IFFALSE 3317
// control := _control [ rand ( 1 , _control ) ] ;
3293: LD_ADDR_VAR 0 4
3297: PUSH
3298: LD_VAR 0 12
3302: PUSH
3303: LD_INT 1
3305: PPUSH
3306: LD_VAR 0 12
3310: PPUSH
3311: CALL_OW 12
3315: ARRAY
3316: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3317: LD_VAR 0 2
3321: PPUSH
3322: LD_VAR 0 5
3326: PPUSH
3327: CALL 3685 0 2
3331: NOT
3332: IFFALSE 3391
// repeat weapon := _weapon [ 1 ] ;
3334: LD_ADDR_VAR 0 5
3338: PUSH
3339: LD_VAR 0 10
3343: PUSH
3344: LD_INT 1
3346: ARRAY
3347: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3348: LD_ADDR_VAR 0 10
3352: PUSH
3353: LD_VAR 0 10
3357: PPUSH
3358: LD_INT 1
3360: PPUSH
3361: CALL_OW 3
3365: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3366: LD_VAR 0 2
3370: PPUSH
3371: LD_VAR 0 5
3375: PPUSH
3376: CALL 3685 0 2
3380: PUSH
3381: LD_VAR 0 10
3385: PUSH
3386: EMPTY
3387: EQUAL
3388: OR
3389: IFFALSE 3334
// result := [ ] ;
3391: LD_ADDR_VAR 0 6
3395: PUSH
3396: EMPTY
3397: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3398: LD_VAR 0 1
3402: PPUSH
3403: LD_VAR 0 2
3407: PPUSH
3408: LD_VAR 0 3
3412: PPUSH
3413: LD_VAR 0 4
3417: PPUSH
3418: LD_VAR 0 5
3422: PPUSH
3423: CALL_OW 448
3427: IFFALSE 3460
// result := [ chassis , engine , control , weapon ] ;
3429: LD_ADDR_VAR 0 6
3433: PUSH
3434: LD_VAR 0 2
3438: PUSH
3439: LD_VAR 0 3
3443: PUSH
3444: LD_VAR 0 4
3448: PUSH
3449: LD_VAR 0 5
3453: PUSH
3454: EMPTY
3455: LIST
3456: LIST
3457: LIST
3458: LIST
3459: ST_TO_ADDR
// end ;
3460: LD_VAR 0 6
3464: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3465: LD_INT 0
3467: PPUSH
// if not chassis or not engine then
3468: LD_VAR 0 1
3472: NOT
3473: PUSH
3474: LD_VAR 0 2
3478: NOT
3479: OR
3480: IFFALSE 3484
// exit ;
3482: GO 3680
// case engine of engine_solar :
3484: LD_VAR 0 2
3488: PUSH
3489: LD_INT 2
3491: DOUBLE
3492: EQUAL
3493: IFTRUE 3497
3495: GO 3535
3497: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3498: LD_ADDR_VAR 0 3
3502: PUSH
3503: LD_INT 11
3505: PUSH
3506: LD_INT 12
3508: PUSH
3509: LD_INT 13
3511: PUSH
3512: LD_INT 14
3514: PUSH
3515: LD_INT 1
3517: PUSH
3518: LD_INT 2
3520: PUSH
3521: LD_INT 3
3523: PUSH
3524: EMPTY
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: ST_TO_ADDR
3533: GO 3664
3535: LD_INT 1
3537: DOUBLE
3538: EQUAL
3539: IFTRUE 3543
3541: GO 3605
3543: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3544: LD_ADDR_VAR 0 3
3548: PUSH
3549: LD_INT 11
3551: PUSH
3552: LD_INT 12
3554: PUSH
3555: LD_INT 13
3557: PUSH
3558: LD_INT 14
3560: PUSH
3561: LD_INT 1
3563: PUSH
3564: LD_INT 2
3566: PUSH
3567: LD_INT 3
3569: PUSH
3570: LD_INT 4
3572: PUSH
3573: LD_INT 5
3575: PUSH
3576: LD_INT 21
3578: PUSH
3579: LD_INT 23
3581: PUSH
3582: LD_INT 22
3584: PUSH
3585: LD_INT 24
3587: PUSH
3588: EMPTY
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: ST_TO_ADDR
3603: GO 3664
3605: LD_INT 3
3607: DOUBLE
3608: EQUAL
3609: IFTRUE 3613
3611: GO 3663
3613: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3614: LD_ADDR_VAR 0 3
3618: PUSH
3619: LD_INT 13
3621: PUSH
3622: LD_INT 14
3624: PUSH
3625: LD_INT 2
3627: PUSH
3628: LD_INT 3
3630: PUSH
3631: LD_INT 4
3633: PUSH
3634: LD_INT 5
3636: PUSH
3637: LD_INT 21
3639: PUSH
3640: LD_INT 22
3642: PUSH
3643: LD_INT 23
3645: PUSH
3646: LD_INT 24
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: ST_TO_ADDR
3661: GO 3664
3663: POP
// result := ( chassis in result ) ;
3664: LD_ADDR_VAR 0 3
3668: PUSH
3669: LD_VAR 0 1
3673: PUSH
3674: LD_VAR 0 3
3678: IN
3679: ST_TO_ADDR
// end ;
3680: LD_VAR 0 3
3684: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3685: LD_INT 0
3687: PPUSH
// if not chassis or not weapon then
3688: LD_VAR 0 1
3692: NOT
3693: PUSH
3694: LD_VAR 0 2
3698: NOT
3699: OR
3700: IFFALSE 3704
// exit ;
3702: GO 4766
// case weapon of us_machine_gun :
3704: LD_VAR 0 2
3708: PUSH
3709: LD_INT 2
3711: DOUBLE
3712: EQUAL
3713: IFTRUE 3717
3715: GO 3747
3717: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
3718: LD_ADDR_VAR 0 3
3722: PUSH
3723: LD_INT 1
3725: PUSH
3726: LD_INT 2
3728: PUSH
3729: LD_INT 3
3731: PUSH
3732: LD_INT 4
3734: PUSH
3735: LD_INT 5
3737: PUSH
3738: EMPTY
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: LIST
3744: ST_TO_ADDR
3745: GO 4750
3747: LD_INT 3
3749: DOUBLE
3750: EQUAL
3751: IFTRUE 3755
3753: GO 3785
3755: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
3756: LD_ADDR_VAR 0 3
3760: PUSH
3761: LD_INT 1
3763: PUSH
3764: LD_INT 2
3766: PUSH
3767: LD_INT 3
3769: PUSH
3770: LD_INT 4
3772: PUSH
3773: LD_INT 5
3775: PUSH
3776: EMPTY
3777: LIST
3778: LIST
3779: LIST
3780: LIST
3781: LIST
3782: ST_TO_ADDR
3783: GO 4750
3785: LD_INT 11
3787: DOUBLE
3788: EQUAL
3789: IFTRUE 3793
3791: GO 3823
3793: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
3794: LD_ADDR_VAR 0 3
3798: PUSH
3799: LD_INT 1
3801: PUSH
3802: LD_INT 2
3804: PUSH
3805: LD_INT 3
3807: PUSH
3808: LD_INT 4
3810: PUSH
3811: LD_INT 5
3813: PUSH
3814: EMPTY
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: ST_TO_ADDR
3821: GO 4750
3823: LD_INT 4
3825: DOUBLE
3826: EQUAL
3827: IFTRUE 3831
3829: GO 3857
3831: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
3832: LD_ADDR_VAR 0 3
3836: PUSH
3837: LD_INT 2
3839: PUSH
3840: LD_INT 3
3842: PUSH
3843: LD_INT 4
3845: PUSH
3846: LD_INT 5
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: ST_TO_ADDR
3855: GO 4750
3857: LD_INT 5
3859: DOUBLE
3860: EQUAL
3861: IFTRUE 3865
3863: GO 3891
3865: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
3866: LD_ADDR_VAR 0 3
3870: PUSH
3871: LD_INT 2
3873: PUSH
3874: LD_INT 3
3876: PUSH
3877: LD_INT 4
3879: PUSH
3880: LD_INT 5
3882: PUSH
3883: EMPTY
3884: LIST
3885: LIST
3886: LIST
3887: LIST
3888: ST_TO_ADDR
3889: GO 4750
3891: LD_INT 9
3893: DOUBLE
3894: EQUAL
3895: IFTRUE 3899
3897: GO 3925
3899: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
3900: LD_ADDR_VAR 0 3
3904: PUSH
3905: LD_INT 2
3907: PUSH
3908: LD_INT 3
3910: PUSH
3911: LD_INT 4
3913: PUSH
3914: LD_INT 5
3916: PUSH
3917: EMPTY
3918: LIST
3919: LIST
3920: LIST
3921: LIST
3922: ST_TO_ADDR
3923: GO 4750
3925: LD_INT 7
3927: DOUBLE
3928: EQUAL
3929: IFTRUE 3933
3931: GO 3959
3933: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
3934: LD_ADDR_VAR 0 3
3938: PUSH
3939: LD_INT 2
3941: PUSH
3942: LD_INT 3
3944: PUSH
3945: LD_INT 4
3947: PUSH
3948: LD_INT 5
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: ST_TO_ADDR
3957: GO 4750
3959: LD_INT 12
3961: DOUBLE
3962: EQUAL
3963: IFTRUE 3967
3965: GO 3993
3967: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
3968: LD_ADDR_VAR 0 3
3972: PUSH
3973: LD_INT 2
3975: PUSH
3976: LD_INT 3
3978: PUSH
3979: LD_INT 4
3981: PUSH
3982: LD_INT 5
3984: PUSH
3985: EMPTY
3986: LIST
3987: LIST
3988: LIST
3989: LIST
3990: ST_TO_ADDR
3991: GO 4750
3993: LD_INT 13
3995: DOUBLE
3996: EQUAL
3997: IFTRUE 4001
3999: GO 4027
4001: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4002: LD_ADDR_VAR 0 3
4006: PUSH
4007: LD_INT 2
4009: PUSH
4010: LD_INT 3
4012: PUSH
4013: LD_INT 4
4015: PUSH
4016: LD_INT 5
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: ST_TO_ADDR
4025: GO 4750
4027: LD_INT 14
4029: DOUBLE
4030: EQUAL
4031: IFTRUE 4035
4033: GO 4053
4035: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4036: LD_ADDR_VAR 0 3
4040: PUSH
4041: LD_INT 4
4043: PUSH
4044: LD_INT 5
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: ST_TO_ADDR
4051: GO 4750
4053: LD_INT 6
4055: DOUBLE
4056: EQUAL
4057: IFTRUE 4061
4059: GO 4079
4061: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4062: LD_ADDR_VAR 0 3
4066: PUSH
4067: LD_INT 4
4069: PUSH
4070: LD_INT 5
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: ST_TO_ADDR
4077: GO 4750
4079: LD_INT 10
4081: DOUBLE
4082: EQUAL
4083: IFTRUE 4087
4085: GO 4105
4087: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4088: LD_ADDR_VAR 0 3
4092: PUSH
4093: LD_INT 4
4095: PUSH
4096: LD_INT 5
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: ST_TO_ADDR
4103: GO 4750
4105: LD_INT 22
4107: DOUBLE
4108: EQUAL
4109: IFTRUE 4113
4111: GO 4139
4113: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4114: LD_ADDR_VAR 0 3
4118: PUSH
4119: LD_INT 11
4121: PUSH
4122: LD_INT 12
4124: PUSH
4125: LD_INT 13
4127: PUSH
4128: LD_INT 14
4130: PUSH
4131: EMPTY
4132: LIST
4133: LIST
4134: LIST
4135: LIST
4136: ST_TO_ADDR
4137: GO 4750
4139: LD_INT 23
4141: DOUBLE
4142: EQUAL
4143: IFTRUE 4147
4145: GO 4173
4147: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4148: LD_ADDR_VAR 0 3
4152: PUSH
4153: LD_INT 11
4155: PUSH
4156: LD_INT 12
4158: PUSH
4159: LD_INT 13
4161: PUSH
4162: LD_INT 14
4164: PUSH
4165: EMPTY
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: ST_TO_ADDR
4171: GO 4750
4173: LD_INT 24
4175: DOUBLE
4176: EQUAL
4177: IFTRUE 4181
4179: GO 4207
4181: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4182: LD_ADDR_VAR 0 3
4186: PUSH
4187: LD_INT 11
4189: PUSH
4190: LD_INT 12
4192: PUSH
4193: LD_INT 13
4195: PUSH
4196: LD_INT 14
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: ST_TO_ADDR
4205: GO 4750
4207: LD_INT 30
4209: DOUBLE
4210: EQUAL
4211: IFTRUE 4215
4213: GO 4241
4215: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4216: LD_ADDR_VAR 0 3
4220: PUSH
4221: LD_INT 11
4223: PUSH
4224: LD_INT 12
4226: PUSH
4227: LD_INT 13
4229: PUSH
4230: LD_INT 14
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: LIST
4237: LIST
4238: ST_TO_ADDR
4239: GO 4750
4241: LD_INT 25
4243: DOUBLE
4244: EQUAL
4245: IFTRUE 4249
4247: GO 4267
4249: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4250: LD_ADDR_VAR 0 3
4254: PUSH
4255: LD_INT 13
4257: PUSH
4258: LD_INT 14
4260: PUSH
4261: EMPTY
4262: LIST
4263: LIST
4264: ST_TO_ADDR
4265: GO 4750
4267: LD_INT 27
4269: DOUBLE
4270: EQUAL
4271: IFTRUE 4275
4273: GO 4293
4275: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4276: LD_ADDR_VAR 0 3
4280: PUSH
4281: LD_INT 13
4283: PUSH
4284: LD_INT 14
4286: PUSH
4287: EMPTY
4288: LIST
4289: LIST
4290: ST_TO_ADDR
4291: GO 4750
4293: LD_EXP 7
4297: DOUBLE
4298: EQUAL
4299: IFTRUE 4303
4301: GO 4329
4303: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4304: LD_ADDR_VAR 0 3
4308: PUSH
4309: LD_INT 11
4311: PUSH
4312: LD_INT 12
4314: PUSH
4315: LD_INT 13
4317: PUSH
4318: LD_INT 14
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: ST_TO_ADDR
4327: GO 4750
4329: LD_INT 28
4331: DOUBLE
4332: EQUAL
4333: IFTRUE 4337
4335: GO 4355
4337: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4338: LD_ADDR_VAR 0 3
4342: PUSH
4343: LD_INT 13
4345: PUSH
4346: LD_INT 14
4348: PUSH
4349: EMPTY
4350: LIST
4351: LIST
4352: ST_TO_ADDR
4353: GO 4750
4355: LD_INT 29
4357: DOUBLE
4358: EQUAL
4359: IFTRUE 4363
4361: GO 4381
4363: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4364: LD_ADDR_VAR 0 3
4368: PUSH
4369: LD_INT 13
4371: PUSH
4372: LD_INT 14
4374: PUSH
4375: EMPTY
4376: LIST
4377: LIST
4378: ST_TO_ADDR
4379: GO 4750
4381: LD_INT 31
4383: DOUBLE
4384: EQUAL
4385: IFTRUE 4389
4387: GO 4407
4389: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4390: LD_ADDR_VAR 0 3
4394: PUSH
4395: LD_INT 13
4397: PUSH
4398: LD_INT 14
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: ST_TO_ADDR
4405: GO 4750
4407: LD_INT 26
4409: DOUBLE
4410: EQUAL
4411: IFTRUE 4415
4413: GO 4433
4415: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4416: LD_ADDR_VAR 0 3
4420: PUSH
4421: LD_INT 13
4423: PUSH
4424: LD_INT 14
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: ST_TO_ADDR
4431: GO 4750
4433: LD_INT 42
4435: DOUBLE
4436: EQUAL
4437: IFTRUE 4441
4439: GO 4467
4441: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4442: LD_ADDR_VAR 0 3
4446: PUSH
4447: LD_INT 21
4449: PUSH
4450: LD_INT 22
4452: PUSH
4453: LD_INT 23
4455: PUSH
4456: LD_INT 24
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: LIST
4463: LIST
4464: ST_TO_ADDR
4465: GO 4750
4467: LD_INT 43
4469: DOUBLE
4470: EQUAL
4471: IFTRUE 4475
4473: GO 4501
4475: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4476: LD_ADDR_VAR 0 3
4480: PUSH
4481: LD_INT 21
4483: PUSH
4484: LD_INT 22
4486: PUSH
4487: LD_INT 23
4489: PUSH
4490: LD_INT 24
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: ST_TO_ADDR
4499: GO 4750
4501: LD_INT 44
4503: DOUBLE
4504: EQUAL
4505: IFTRUE 4509
4507: GO 4535
4509: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4510: LD_ADDR_VAR 0 3
4514: PUSH
4515: LD_INT 21
4517: PUSH
4518: LD_INT 22
4520: PUSH
4521: LD_INT 23
4523: PUSH
4524: LD_INT 24
4526: PUSH
4527: EMPTY
4528: LIST
4529: LIST
4530: LIST
4531: LIST
4532: ST_TO_ADDR
4533: GO 4750
4535: LD_INT 45
4537: DOUBLE
4538: EQUAL
4539: IFTRUE 4543
4541: GO 4569
4543: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4544: LD_ADDR_VAR 0 3
4548: PUSH
4549: LD_INT 21
4551: PUSH
4552: LD_INT 22
4554: PUSH
4555: LD_INT 23
4557: PUSH
4558: LD_INT 24
4560: PUSH
4561: EMPTY
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: ST_TO_ADDR
4567: GO 4750
4569: LD_INT 49
4571: DOUBLE
4572: EQUAL
4573: IFTRUE 4577
4575: GO 4603
4577: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4578: LD_ADDR_VAR 0 3
4582: PUSH
4583: LD_INT 21
4585: PUSH
4586: LD_INT 22
4588: PUSH
4589: LD_INT 23
4591: PUSH
4592: LD_INT 24
4594: PUSH
4595: EMPTY
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: ST_TO_ADDR
4601: GO 4750
4603: LD_INT 51
4605: DOUBLE
4606: EQUAL
4607: IFTRUE 4611
4609: GO 4637
4611: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4612: LD_ADDR_VAR 0 3
4616: PUSH
4617: LD_INT 21
4619: PUSH
4620: LD_INT 22
4622: PUSH
4623: LD_INT 23
4625: PUSH
4626: LD_INT 24
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: ST_TO_ADDR
4635: GO 4750
4637: LD_INT 52
4639: DOUBLE
4640: EQUAL
4641: IFTRUE 4645
4643: GO 4671
4645: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4646: LD_ADDR_VAR 0 3
4650: PUSH
4651: LD_INT 21
4653: PUSH
4654: LD_INT 22
4656: PUSH
4657: LD_INT 23
4659: PUSH
4660: LD_INT 24
4662: PUSH
4663: EMPTY
4664: LIST
4665: LIST
4666: LIST
4667: LIST
4668: ST_TO_ADDR
4669: GO 4750
4671: LD_INT 53
4673: DOUBLE
4674: EQUAL
4675: IFTRUE 4679
4677: GO 4697
4679: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4680: LD_ADDR_VAR 0 3
4684: PUSH
4685: LD_INT 23
4687: PUSH
4688: LD_INT 24
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: ST_TO_ADDR
4695: GO 4750
4697: LD_INT 46
4699: DOUBLE
4700: EQUAL
4701: IFTRUE 4705
4703: GO 4723
4705: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4706: LD_ADDR_VAR 0 3
4710: PUSH
4711: LD_INT 23
4713: PUSH
4714: LD_INT 24
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: ST_TO_ADDR
4721: GO 4750
4723: LD_INT 47
4725: DOUBLE
4726: EQUAL
4727: IFTRUE 4731
4729: GO 4749
4731: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4732: LD_ADDR_VAR 0 3
4736: PUSH
4737: LD_INT 23
4739: PUSH
4740: LD_INT 24
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: ST_TO_ADDR
4747: GO 4750
4749: POP
// result := ( chassis in result ) ;
4750: LD_ADDR_VAR 0 3
4754: PUSH
4755: LD_VAR 0 1
4759: PUSH
4760: LD_VAR 0 3
4764: IN
4765: ST_TO_ADDR
// end ;
4766: LD_VAR 0 3
4770: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
4771: LD_INT 0
4773: PPUSH
4774: PPUSH
4775: PPUSH
4776: PPUSH
4777: PPUSH
4778: PPUSH
4779: PPUSH
// result := array ;
4780: LD_ADDR_VAR 0 5
4784: PUSH
4785: LD_VAR 0 1
4789: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
4790: LD_VAR 0 1
4794: NOT
4795: PUSH
4796: LD_VAR 0 2
4800: NOT
4801: OR
4802: PUSH
4803: LD_VAR 0 3
4807: NOT
4808: OR
4809: PUSH
4810: LD_VAR 0 2
4814: PUSH
4815: LD_VAR 0 1
4819: GREATER
4820: OR
4821: PUSH
4822: LD_VAR 0 3
4826: PUSH
4827: LD_VAR 0 1
4831: GREATER
4832: OR
4833: IFFALSE 4837
// exit ;
4835: GO 5133
// if direction then
4837: LD_VAR 0 4
4841: IFFALSE 4905
// begin d := 1 ;
4843: LD_ADDR_VAR 0 9
4847: PUSH
4848: LD_INT 1
4850: ST_TO_ADDR
// if i_from > i_to then
4851: LD_VAR 0 2
4855: PUSH
4856: LD_VAR 0 3
4860: GREATER
4861: IFFALSE 4887
// length := ( array - i_from ) + i_to else
4863: LD_ADDR_VAR 0 11
4867: PUSH
4868: LD_VAR 0 1
4872: PUSH
4873: LD_VAR 0 2
4877: MINUS
4878: PUSH
4879: LD_VAR 0 3
4883: PLUS
4884: ST_TO_ADDR
4885: GO 4903
// length := i_to - i_from ;
4887: LD_ADDR_VAR 0 11
4891: PUSH
4892: LD_VAR 0 3
4896: PUSH
4897: LD_VAR 0 2
4901: MINUS
4902: ST_TO_ADDR
// end else
4903: GO 4966
// begin d := - 1 ;
4905: LD_ADDR_VAR 0 9
4909: PUSH
4910: LD_INT 1
4912: NEG
4913: ST_TO_ADDR
// if i_from > i_to then
4914: LD_VAR 0 2
4918: PUSH
4919: LD_VAR 0 3
4923: GREATER
4924: IFFALSE 4944
// length := i_from - i_to else
4926: LD_ADDR_VAR 0 11
4930: PUSH
4931: LD_VAR 0 2
4935: PUSH
4936: LD_VAR 0 3
4940: MINUS
4941: ST_TO_ADDR
4942: GO 4966
// length := ( array - i_to ) + i_from ;
4944: LD_ADDR_VAR 0 11
4948: PUSH
4949: LD_VAR 0 1
4953: PUSH
4954: LD_VAR 0 3
4958: MINUS
4959: PUSH
4960: LD_VAR 0 2
4964: PLUS
4965: ST_TO_ADDR
// end ; if not length then
4966: LD_VAR 0 11
4970: NOT
4971: IFFALSE 4975
// exit ;
4973: GO 5133
// tmp := array ;
4975: LD_ADDR_VAR 0 10
4979: PUSH
4980: LD_VAR 0 1
4984: ST_TO_ADDR
// for i = 1 to length do
4985: LD_ADDR_VAR 0 6
4989: PUSH
4990: DOUBLE
4991: LD_INT 1
4993: DEC
4994: ST_TO_ADDR
4995: LD_VAR 0 11
4999: PUSH
5000: FOR_TO
5001: IFFALSE 5121
// begin for j = 1 to array do
5003: LD_ADDR_VAR 0 7
5007: PUSH
5008: DOUBLE
5009: LD_INT 1
5011: DEC
5012: ST_TO_ADDR
5013: LD_VAR 0 1
5017: PUSH
5018: FOR_TO
5019: IFFALSE 5107
// begin k := j + d ;
5021: LD_ADDR_VAR 0 8
5025: PUSH
5026: LD_VAR 0 7
5030: PUSH
5031: LD_VAR 0 9
5035: PLUS
5036: ST_TO_ADDR
// if k > array then
5037: LD_VAR 0 8
5041: PUSH
5042: LD_VAR 0 1
5046: GREATER
5047: IFFALSE 5057
// k := 1 ;
5049: LD_ADDR_VAR 0 8
5053: PUSH
5054: LD_INT 1
5056: ST_TO_ADDR
// if not k then
5057: LD_VAR 0 8
5061: NOT
5062: IFFALSE 5074
// k := array ;
5064: LD_ADDR_VAR 0 8
5068: PUSH
5069: LD_VAR 0 1
5073: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5074: LD_ADDR_VAR 0 10
5078: PUSH
5079: LD_VAR 0 10
5083: PPUSH
5084: LD_VAR 0 8
5088: PPUSH
5089: LD_VAR 0 1
5093: PUSH
5094: LD_VAR 0 7
5098: ARRAY
5099: PPUSH
5100: CALL_OW 1
5104: ST_TO_ADDR
// end ;
5105: GO 5018
5107: POP
5108: POP
// array := tmp ;
5109: LD_ADDR_VAR 0 1
5113: PUSH
5114: LD_VAR 0 10
5118: ST_TO_ADDR
// end ;
5119: GO 5000
5121: POP
5122: POP
// result := array ;
5123: LD_ADDR_VAR 0 5
5127: PUSH
5128: LD_VAR 0 1
5132: ST_TO_ADDR
// end ;
5133: LD_VAR 0 5
5137: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5138: LD_INT 0
5140: PPUSH
5141: PPUSH
// result := 0 ;
5142: LD_ADDR_VAR 0 3
5146: PUSH
5147: LD_INT 0
5149: ST_TO_ADDR
// if not array or not value in array then
5150: LD_VAR 0 1
5154: NOT
5155: PUSH
5156: LD_VAR 0 2
5160: PUSH
5161: LD_VAR 0 1
5165: IN
5166: NOT
5167: OR
5168: IFFALSE 5172
// exit ;
5170: GO 5226
// for i = 1 to array do
5172: LD_ADDR_VAR 0 4
5176: PUSH
5177: DOUBLE
5178: LD_INT 1
5180: DEC
5181: ST_TO_ADDR
5182: LD_VAR 0 1
5186: PUSH
5187: FOR_TO
5188: IFFALSE 5224
// if value = array [ i ] then
5190: LD_VAR 0 2
5194: PUSH
5195: LD_VAR 0 1
5199: PUSH
5200: LD_VAR 0 4
5204: ARRAY
5205: EQUAL
5206: IFFALSE 5222
// begin result := i ;
5208: LD_ADDR_VAR 0 3
5212: PUSH
5213: LD_VAR 0 4
5217: ST_TO_ADDR
// exit ;
5218: POP
5219: POP
5220: GO 5226
// end ;
5222: GO 5187
5224: POP
5225: POP
// end ;
5226: LD_VAR 0 3
5230: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5231: LD_INT 0
5233: PPUSH
// vc_chassis := chassis ;
5234: LD_ADDR_OWVAR 37
5238: PUSH
5239: LD_VAR 0 1
5243: ST_TO_ADDR
// vc_engine := engine ;
5244: LD_ADDR_OWVAR 39
5248: PUSH
5249: LD_VAR 0 2
5253: ST_TO_ADDR
// vc_control := control ;
5254: LD_ADDR_OWVAR 38
5258: PUSH
5259: LD_VAR 0 3
5263: ST_TO_ADDR
// vc_weapon := weapon ;
5264: LD_ADDR_OWVAR 40
5268: PUSH
5269: LD_VAR 0 4
5273: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5274: LD_ADDR_OWVAR 41
5278: PUSH
5279: LD_VAR 0 5
5283: ST_TO_ADDR
// end ;
5284: LD_VAR 0 6
5288: RET
// export function WantPlant ( unit ) ; var task ; begin
5289: LD_INT 0
5291: PPUSH
5292: PPUSH
// result := false ;
5293: LD_ADDR_VAR 0 2
5297: PUSH
5298: LD_INT 0
5300: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5301: LD_ADDR_VAR 0 3
5305: PUSH
5306: LD_VAR 0 1
5310: PPUSH
5311: CALL_OW 437
5315: ST_TO_ADDR
// if task then
5316: LD_VAR 0 3
5320: IFFALSE 5348
// if task [ 1 ] [ 1 ] = p then
5322: LD_VAR 0 3
5326: PUSH
5327: LD_INT 1
5329: ARRAY
5330: PUSH
5331: LD_INT 1
5333: ARRAY
5334: PUSH
5335: LD_STRING p
5337: EQUAL
5338: IFFALSE 5348
// result := true ;
5340: LD_ADDR_VAR 0 2
5344: PUSH
5345: LD_INT 1
5347: ST_TO_ADDR
// end ;
5348: LD_VAR 0 2
5352: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5353: LD_INT 0
5355: PPUSH
5356: PPUSH
5357: PPUSH
5358: PPUSH
// if pos < 1 then
5359: LD_VAR 0 2
5363: PUSH
5364: LD_INT 1
5366: LESS
5367: IFFALSE 5371
// exit ;
5369: GO 5674
// if pos = 1 then
5371: LD_VAR 0 2
5375: PUSH
5376: LD_INT 1
5378: EQUAL
5379: IFFALSE 5412
// result := Replace ( arr , pos [ 1 ] , value ) else
5381: LD_ADDR_VAR 0 4
5385: PUSH
5386: LD_VAR 0 1
5390: PPUSH
5391: LD_VAR 0 2
5395: PUSH
5396: LD_INT 1
5398: ARRAY
5399: PPUSH
5400: LD_VAR 0 3
5404: PPUSH
5405: CALL_OW 1
5409: ST_TO_ADDR
5410: GO 5674
// begin tmp := arr ;
5412: LD_ADDR_VAR 0 6
5416: PUSH
5417: LD_VAR 0 1
5421: ST_TO_ADDR
// s_arr := [ tmp ] ;
5422: LD_ADDR_VAR 0 7
5426: PUSH
5427: LD_VAR 0 6
5431: PUSH
5432: EMPTY
5433: LIST
5434: ST_TO_ADDR
// for i = 1 to pos - 1 do
5435: LD_ADDR_VAR 0 5
5439: PUSH
5440: DOUBLE
5441: LD_INT 1
5443: DEC
5444: ST_TO_ADDR
5445: LD_VAR 0 2
5449: PUSH
5450: LD_INT 1
5452: MINUS
5453: PUSH
5454: FOR_TO
5455: IFFALSE 5500
// begin tmp := tmp [ pos [ i ] ] ;
5457: LD_ADDR_VAR 0 6
5461: PUSH
5462: LD_VAR 0 6
5466: PUSH
5467: LD_VAR 0 2
5471: PUSH
5472: LD_VAR 0 5
5476: ARRAY
5477: ARRAY
5478: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5479: LD_ADDR_VAR 0 7
5483: PUSH
5484: LD_VAR 0 7
5488: PUSH
5489: LD_VAR 0 6
5493: PUSH
5494: EMPTY
5495: LIST
5496: ADD
5497: ST_TO_ADDR
// end ;
5498: GO 5454
5500: POP
5501: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5502: LD_ADDR_VAR 0 6
5506: PUSH
5507: LD_VAR 0 6
5511: PPUSH
5512: LD_VAR 0 2
5516: PUSH
5517: LD_VAR 0 2
5521: ARRAY
5522: PPUSH
5523: LD_VAR 0 3
5527: PPUSH
5528: CALL_OW 1
5532: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5533: LD_ADDR_VAR 0 7
5537: PUSH
5538: LD_VAR 0 7
5542: PPUSH
5543: LD_VAR 0 7
5547: PPUSH
5548: LD_VAR 0 6
5552: PPUSH
5553: CALL_OW 1
5557: ST_TO_ADDR
// for i = s_arr downto 2 do
5558: LD_ADDR_VAR 0 5
5562: PUSH
5563: DOUBLE
5564: LD_VAR 0 7
5568: INC
5569: ST_TO_ADDR
5570: LD_INT 2
5572: PUSH
5573: FOR_DOWNTO
5574: IFFALSE 5658
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5576: LD_ADDR_VAR 0 6
5580: PUSH
5581: LD_VAR 0 7
5585: PUSH
5586: LD_VAR 0 5
5590: PUSH
5591: LD_INT 1
5593: MINUS
5594: ARRAY
5595: PPUSH
5596: LD_VAR 0 2
5600: PUSH
5601: LD_VAR 0 5
5605: PUSH
5606: LD_INT 1
5608: MINUS
5609: ARRAY
5610: PPUSH
5611: LD_VAR 0 7
5615: PUSH
5616: LD_VAR 0 5
5620: ARRAY
5621: PPUSH
5622: CALL_OW 1
5626: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5627: LD_ADDR_VAR 0 7
5631: PUSH
5632: LD_VAR 0 7
5636: PPUSH
5637: LD_VAR 0 5
5641: PUSH
5642: LD_INT 1
5644: MINUS
5645: PPUSH
5646: LD_VAR 0 6
5650: PPUSH
5651: CALL_OW 1
5655: ST_TO_ADDR
// end ;
5656: GO 5573
5658: POP
5659: POP
// result := s_arr [ 1 ] ;
5660: LD_ADDR_VAR 0 4
5664: PUSH
5665: LD_VAR 0 7
5669: PUSH
5670: LD_INT 1
5672: ARRAY
5673: ST_TO_ADDR
// end ; end ;
5674: LD_VAR 0 4
5678: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5679: LD_INT 0
5681: PPUSH
5682: PPUSH
// if not list then
5683: LD_VAR 0 1
5687: NOT
5688: IFFALSE 5692
// exit ;
5690: GO 5783
// i := list [ pos1 ] ;
5692: LD_ADDR_VAR 0 5
5696: PUSH
5697: LD_VAR 0 1
5701: PUSH
5702: LD_VAR 0 2
5706: ARRAY
5707: ST_TO_ADDR
// if not i then
5708: LD_VAR 0 5
5712: NOT
5713: IFFALSE 5717
// exit ;
5715: GO 5783
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
5717: LD_ADDR_VAR 0 1
5721: PUSH
5722: LD_VAR 0 1
5726: PPUSH
5727: LD_VAR 0 2
5731: PPUSH
5732: LD_VAR 0 1
5736: PUSH
5737: LD_VAR 0 3
5741: ARRAY
5742: PPUSH
5743: CALL_OW 1
5747: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
5748: LD_ADDR_VAR 0 1
5752: PUSH
5753: LD_VAR 0 1
5757: PPUSH
5758: LD_VAR 0 3
5762: PPUSH
5763: LD_VAR 0 5
5767: PPUSH
5768: CALL_OW 1
5772: ST_TO_ADDR
// result := list ;
5773: LD_ADDR_VAR 0 4
5777: PUSH
5778: LD_VAR 0 1
5782: ST_TO_ADDR
// end ;
5783: LD_VAR 0 4
5787: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
5788: LD_INT 0
5790: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
5791: LD_ADDR_VAR 0 5
5795: PUSH
5796: LD_VAR 0 1
5800: PPUSH
5801: CALL_OW 250
5805: PPUSH
5806: LD_VAR 0 1
5810: PPUSH
5811: CALL_OW 251
5815: PPUSH
5816: LD_VAR 0 2
5820: PPUSH
5821: LD_VAR 0 3
5825: PPUSH
5826: LD_VAR 0 4
5830: PPUSH
5831: CALL 5841 0 5
5835: ST_TO_ADDR
// end ;
5836: LD_VAR 0 5
5840: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
5841: LD_INT 0
5843: PPUSH
5844: PPUSH
5845: PPUSH
5846: PPUSH
// if not list then
5847: LD_VAR 0 3
5851: NOT
5852: IFFALSE 5856
// exit ;
5854: GO 6244
// result := [ ] ;
5856: LD_ADDR_VAR 0 6
5860: PUSH
5861: EMPTY
5862: ST_TO_ADDR
// for i in list do
5863: LD_ADDR_VAR 0 7
5867: PUSH
5868: LD_VAR 0 3
5872: PUSH
5873: FOR_IN
5874: IFFALSE 6076
// begin tmp := GetDistUnitXY ( i , x , y ) ;
5876: LD_ADDR_VAR 0 9
5880: PUSH
5881: LD_VAR 0 7
5885: PPUSH
5886: LD_VAR 0 1
5890: PPUSH
5891: LD_VAR 0 2
5895: PPUSH
5896: CALL_OW 297
5900: ST_TO_ADDR
// if not result then
5901: LD_VAR 0 6
5905: NOT
5906: IFFALSE 5932
// result := [ [ i , tmp ] ] else
5908: LD_ADDR_VAR 0 6
5912: PUSH
5913: LD_VAR 0 7
5917: PUSH
5918: LD_VAR 0 9
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: PUSH
5927: EMPTY
5928: LIST
5929: ST_TO_ADDR
5930: GO 6074
// begin if result [ result ] [ 2 ] < tmp then
5932: LD_VAR 0 6
5936: PUSH
5937: LD_VAR 0 6
5941: ARRAY
5942: PUSH
5943: LD_INT 2
5945: ARRAY
5946: PUSH
5947: LD_VAR 0 9
5951: LESS
5952: IFFALSE 5994
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
5954: LD_ADDR_VAR 0 6
5958: PUSH
5959: LD_VAR 0 6
5963: PPUSH
5964: LD_VAR 0 6
5968: PUSH
5969: LD_INT 1
5971: PLUS
5972: PPUSH
5973: LD_VAR 0 7
5977: PUSH
5978: LD_VAR 0 9
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: PPUSH
5987: CALL_OW 2
5991: ST_TO_ADDR
5992: GO 6074
// for j = 1 to result do
5994: LD_ADDR_VAR 0 8
5998: PUSH
5999: DOUBLE
6000: LD_INT 1
6002: DEC
6003: ST_TO_ADDR
6004: LD_VAR 0 6
6008: PUSH
6009: FOR_TO
6010: IFFALSE 6072
// begin if tmp < result [ j ] [ 2 ] then
6012: LD_VAR 0 9
6016: PUSH
6017: LD_VAR 0 6
6021: PUSH
6022: LD_VAR 0 8
6026: ARRAY
6027: PUSH
6028: LD_INT 2
6030: ARRAY
6031: LESS
6032: IFFALSE 6070
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6034: LD_ADDR_VAR 0 6
6038: PUSH
6039: LD_VAR 0 6
6043: PPUSH
6044: LD_VAR 0 8
6048: PPUSH
6049: LD_VAR 0 7
6053: PUSH
6054: LD_VAR 0 9
6058: PUSH
6059: EMPTY
6060: LIST
6061: LIST
6062: PPUSH
6063: CALL_OW 2
6067: ST_TO_ADDR
// break ;
6068: GO 6072
// end ; end ;
6070: GO 6009
6072: POP
6073: POP
// end ; end ;
6074: GO 5873
6076: POP
6077: POP
// if result and not asc then
6078: LD_VAR 0 6
6082: PUSH
6083: LD_VAR 0 4
6087: NOT
6088: AND
6089: IFFALSE 6164
// begin tmp := result ;
6091: LD_ADDR_VAR 0 9
6095: PUSH
6096: LD_VAR 0 6
6100: ST_TO_ADDR
// for i = tmp downto 1 do
6101: LD_ADDR_VAR 0 7
6105: PUSH
6106: DOUBLE
6107: LD_VAR 0 9
6111: INC
6112: ST_TO_ADDR
6113: LD_INT 1
6115: PUSH
6116: FOR_DOWNTO
6117: IFFALSE 6162
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6119: LD_ADDR_VAR 0 6
6123: PUSH
6124: LD_VAR 0 6
6128: PPUSH
6129: LD_VAR 0 9
6133: PUSH
6134: LD_VAR 0 7
6138: MINUS
6139: PUSH
6140: LD_INT 1
6142: PLUS
6143: PPUSH
6144: LD_VAR 0 9
6148: PUSH
6149: LD_VAR 0 7
6153: ARRAY
6154: PPUSH
6155: CALL_OW 1
6159: ST_TO_ADDR
6160: GO 6116
6162: POP
6163: POP
// end ; tmp := [ ] ;
6164: LD_ADDR_VAR 0 9
6168: PUSH
6169: EMPTY
6170: ST_TO_ADDR
// if mode then
6171: LD_VAR 0 5
6175: IFFALSE 6244
// begin for i = 1 to result do
6177: LD_ADDR_VAR 0 7
6181: PUSH
6182: DOUBLE
6183: LD_INT 1
6185: DEC
6186: ST_TO_ADDR
6187: LD_VAR 0 6
6191: PUSH
6192: FOR_TO
6193: IFFALSE 6232
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6195: LD_ADDR_VAR 0 9
6199: PUSH
6200: LD_VAR 0 9
6204: PPUSH
6205: LD_VAR 0 7
6209: PPUSH
6210: LD_VAR 0 6
6214: PUSH
6215: LD_VAR 0 7
6219: ARRAY
6220: PUSH
6221: LD_INT 1
6223: ARRAY
6224: PPUSH
6225: CALL_OW 1
6229: ST_TO_ADDR
6230: GO 6192
6232: POP
6233: POP
// result := tmp ;
6234: LD_ADDR_VAR 0 6
6238: PUSH
6239: LD_VAR 0 9
6243: ST_TO_ADDR
// end ; end ;
6244: LD_VAR 0 6
6248: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6249: LD_INT 0
6251: PPUSH
6252: PPUSH
6253: PPUSH
6254: PPUSH
6255: PPUSH
6256: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6257: LD_ADDR_VAR 0 5
6261: PUSH
6262: LD_INT 0
6264: PUSH
6265: LD_INT 0
6267: PUSH
6268: LD_INT 0
6270: PUSH
6271: EMPTY
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: ST_TO_ADDR
// if not x or not y then
6279: LD_VAR 0 2
6283: NOT
6284: PUSH
6285: LD_VAR 0 3
6289: NOT
6290: OR
6291: IFFALSE 6295
// exit ;
6293: GO 7947
// if not range then
6295: LD_VAR 0 4
6299: NOT
6300: IFFALSE 6310
// range := 10 ;
6302: LD_ADDR_VAR 0 4
6306: PUSH
6307: LD_INT 10
6309: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6310: LD_ADDR_VAR 0 8
6314: PUSH
6315: LD_INT 81
6317: PUSH
6318: LD_VAR 0 1
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: PUSH
6327: LD_INT 92
6329: PUSH
6330: LD_VAR 0 2
6334: PUSH
6335: LD_VAR 0 3
6339: PUSH
6340: LD_VAR 0 4
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: PUSH
6351: LD_INT 3
6353: PUSH
6354: LD_INT 21
6356: PUSH
6357: LD_INT 3
6359: PUSH
6360: EMPTY
6361: LIST
6362: LIST
6363: PUSH
6364: EMPTY
6365: LIST
6366: LIST
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: LIST
6372: PPUSH
6373: CALL_OW 69
6377: ST_TO_ADDR
// if not tmp then
6378: LD_VAR 0 8
6382: NOT
6383: IFFALSE 6387
// exit ;
6385: GO 7947
// for i in tmp do
6387: LD_ADDR_VAR 0 6
6391: PUSH
6392: LD_VAR 0 8
6396: PUSH
6397: FOR_IN
6398: IFFALSE 7922
// begin points := [ 0 , 0 , 0 ] ;
6400: LD_ADDR_VAR 0 9
6404: PUSH
6405: LD_INT 0
6407: PUSH
6408: LD_INT 0
6410: PUSH
6411: LD_INT 0
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: LIST
6418: ST_TO_ADDR
// bpoints := 1 ;
6419: LD_ADDR_VAR 0 10
6423: PUSH
6424: LD_INT 1
6426: ST_TO_ADDR
// case GetType ( i ) of unit_human :
6427: LD_VAR 0 6
6431: PPUSH
6432: CALL_OW 247
6436: PUSH
6437: LD_INT 1
6439: DOUBLE
6440: EQUAL
6441: IFTRUE 6445
6443: GO 7023
6445: POP
// begin if GetClass ( i ) = 1 then
6446: LD_VAR 0 6
6450: PPUSH
6451: CALL_OW 257
6455: PUSH
6456: LD_INT 1
6458: EQUAL
6459: IFFALSE 6480
// points := [ 10 , 5 , 3 ] ;
6461: LD_ADDR_VAR 0 9
6465: PUSH
6466: LD_INT 10
6468: PUSH
6469: LD_INT 5
6471: PUSH
6472: LD_INT 3
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: LIST
6479: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
6480: LD_VAR 0 6
6484: PPUSH
6485: CALL_OW 257
6489: PUSH
6490: LD_INT 2
6492: PUSH
6493: LD_INT 3
6495: PUSH
6496: LD_INT 4
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: LIST
6503: IN
6504: IFFALSE 6525
// points := [ 3 , 2 , 1 ] ;
6506: LD_ADDR_VAR 0 9
6510: PUSH
6511: LD_INT 3
6513: PUSH
6514: LD_INT 2
6516: PUSH
6517: LD_INT 1
6519: PUSH
6520: EMPTY
6521: LIST
6522: LIST
6523: LIST
6524: ST_TO_ADDR
// if GetClass ( i ) = 5 then
6525: LD_VAR 0 6
6529: PPUSH
6530: CALL_OW 257
6534: PUSH
6535: LD_INT 5
6537: EQUAL
6538: IFFALSE 6559
// points := [ 130 , 5 , 2 ] ;
6540: LD_ADDR_VAR 0 9
6544: PUSH
6545: LD_INT 130
6547: PUSH
6548: LD_INT 5
6550: PUSH
6551: LD_INT 2
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: LIST
6558: ST_TO_ADDR
// if GetClass ( i ) = 8 then
6559: LD_VAR 0 6
6563: PPUSH
6564: CALL_OW 257
6568: PUSH
6569: LD_INT 8
6571: EQUAL
6572: IFFALSE 6593
// points := [ 35 , 35 , 30 ] ;
6574: LD_ADDR_VAR 0 9
6578: PUSH
6579: LD_INT 35
6581: PUSH
6582: LD_INT 35
6584: PUSH
6585: LD_INT 30
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: ST_TO_ADDR
// if GetClass ( i ) = 9 then
6593: LD_VAR 0 6
6597: PPUSH
6598: CALL_OW 257
6602: PUSH
6603: LD_INT 9
6605: EQUAL
6606: IFFALSE 6627
// points := [ 20 , 55 , 40 ] ;
6608: LD_ADDR_VAR 0 9
6612: PUSH
6613: LD_INT 20
6615: PUSH
6616: LD_INT 55
6618: PUSH
6619: LD_INT 40
6621: PUSH
6622: EMPTY
6623: LIST
6624: LIST
6625: LIST
6626: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
6627: LD_VAR 0 6
6631: PPUSH
6632: CALL_OW 257
6636: PUSH
6637: LD_INT 12
6639: PUSH
6640: LD_INT 16
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: IN
6647: IFFALSE 6668
// points := [ 5 , 3 , 2 ] ;
6649: LD_ADDR_VAR 0 9
6653: PUSH
6654: LD_INT 5
6656: PUSH
6657: LD_INT 3
6659: PUSH
6660: LD_INT 2
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: LIST
6667: ST_TO_ADDR
// if GetClass ( i ) = 17 then
6668: LD_VAR 0 6
6672: PPUSH
6673: CALL_OW 257
6677: PUSH
6678: LD_INT 17
6680: EQUAL
6681: IFFALSE 6702
// points := [ 100 , 50 , 75 ] ;
6683: LD_ADDR_VAR 0 9
6687: PUSH
6688: LD_INT 100
6690: PUSH
6691: LD_INT 50
6693: PUSH
6694: LD_INT 75
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: LIST
6701: ST_TO_ADDR
// if GetClass ( i ) = 15 then
6702: LD_VAR 0 6
6706: PPUSH
6707: CALL_OW 257
6711: PUSH
6712: LD_INT 15
6714: EQUAL
6715: IFFALSE 6736
// points := [ 10 , 5 , 3 ] ;
6717: LD_ADDR_VAR 0 9
6721: PUSH
6722: LD_INT 10
6724: PUSH
6725: LD_INT 5
6727: PUSH
6728: LD_INT 3
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: LIST
6735: ST_TO_ADDR
// if GetClass ( i ) = 14 then
6736: LD_VAR 0 6
6740: PPUSH
6741: CALL_OW 257
6745: PUSH
6746: LD_INT 14
6748: EQUAL
6749: IFFALSE 6770
// points := [ 10 , 0 , 0 ] ;
6751: LD_ADDR_VAR 0 9
6755: PUSH
6756: LD_INT 10
6758: PUSH
6759: LD_INT 0
6761: PUSH
6762: LD_INT 0
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: LIST
6769: ST_TO_ADDR
// if GetClass ( i ) = 11 then
6770: LD_VAR 0 6
6774: PPUSH
6775: CALL_OW 257
6779: PUSH
6780: LD_INT 11
6782: EQUAL
6783: IFFALSE 6804
// points := [ 30 , 10 , 5 ] ;
6785: LD_ADDR_VAR 0 9
6789: PUSH
6790: LD_INT 30
6792: PUSH
6793: LD_INT 10
6795: PUSH
6796: LD_INT 5
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: LIST
6803: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
6804: LD_VAR 0 1
6808: PPUSH
6809: LD_INT 5
6811: PPUSH
6812: CALL_OW 321
6816: PUSH
6817: LD_INT 2
6819: EQUAL
6820: IFFALSE 6837
// bpoints := bpoints * 1.8 ;
6822: LD_ADDR_VAR 0 10
6826: PUSH
6827: LD_VAR 0 10
6831: PUSH
6832: LD_REAL  1.80000000000000E+0000
6835: MUL
6836: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
6837: LD_VAR 0 6
6841: PPUSH
6842: CALL_OW 257
6846: PUSH
6847: LD_INT 1
6849: PUSH
6850: LD_INT 2
6852: PUSH
6853: LD_INT 3
6855: PUSH
6856: LD_INT 4
6858: PUSH
6859: EMPTY
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: IN
6865: PUSH
6866: LD_VAR 0 1
6870: PPUSH
6871: LD_INT 51
6873: PPUSH
6874: CALL_OW 321
6878: PUSH
6879: LD_INT 2
6881: EQUAL
6882: AND
6883: IFFALSE 6900
// bpoints := bpoints * 1.2 ;
6885: LD_ADDR_VAR 0 10
6889: PUSH
6890: LD_VAR 0 10
6894: PUSH
6895: LD_REAL  1.20000000000000E+0000
6898: MUL
6899: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
6900: LD_VAR 0 6
6904: PPUSH
6905: CALL_OW 257
6909: PUSH
6910: LD_INT 5
6912: PUSH
6913: LD_INT 7
6915: PUSH
6916: LD_INT 9
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: LIST
6923: IN
6924: PUSH
6925: LD_VAR 0 1
6929: PPUSH
6930: LD_INT 52
6932: PPUSH
6933: CALL_OW 321
6937: PUSH
6938: LD_INT 2
6940: EQUAL
6941: AND
6942: IFFALSE 6959
// bpoints := bpoints * 1.5 ;
6944: LD_ADDR_VAR 0 10
6948: PUSH
6949: LD_VAR 0 10
6953: PUSH
6954: LD_REAL  1.50000000000000E+0000
6957: MUL
6958: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
6959: LD_VAR 0 1
6963: PPUSH
6964: LD_INT 66
6966: PPUSH
6967: CALL_OW 321
6971: PUSH
6972: LD_INT 2
6974: EQUAL
6975: IFFALSE 6992
// bpoints := bpoints * 1.1 ;
6977: LD_ADDR_VAR 0 10
6981: PUSH
6982: LD_VAR 0 10
6986: PUSH
6987: LD_REAL  1.10000000000000E+0000
6990: MUL
6991: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
6992: LD_ADDR_VAR 0 10
6996: PUSH
6997: LD_VAR 0 10
7001: PUSH
7002: LD_VAR 0 6
7006: PPUSH
7007: LD_INT 1
7009: PPUSH
7010: CALL_OW 259
7014: PUSH
7015: LD_REAL  1.15000000000000E+0000
7018: MUL
7019: MUL
7020: ST_TO_ADDR
// end ; unit_vehicle :
7021: GO 7851
7023: LD_INT 2
7025: DOUBLE
7026: EQUAL
7027: IFTRUE 7031
7029: GO 7839
7031: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7032: LD_VAR 0 6
7036: PPUSH
7037: CALL_OW 264
7041: PUSH
7042: LD_INT 2
7044: PUSH
7045: LD_INT 42
7047: PUSH
7048: LD_INT 24
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: LIST
7055: IN
7056: IFFALSE 7077
// points := [ 25 , 5 , 3 ] ;
7058: LD_ADDR_VAR 0 9
7062: PUSH
7063: LD_INT 25
7065: PUSH
7066: LD_INT 5
7068: PUSH
7069: LD_INT 3
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: LIST
7076: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7077: LD_VAR 0 6
7081: PPUSH
7082: CALL_OW 264
7086: PUSH
7087: LD_INT 4
7089: PUSH
7090: LD_INT 43
7092: PUSH
7093: LD_INT 25
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: LIST
7100: IN
7101: IFFALSE 7122
// points := [ 40 , 15 , 5 ] ;
7103: LD_ADDR_VAR 0 9
7107: PUSH
7108: LD_INT 40
7110: PUSH
7111: LD_INT 15
7113: PUSH
7114: LD_INT 5
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: LIST
7121: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7122: LD_VAR 0 6
7126: PPUSH
7127: CALL_OW 264
7131: PUSH
7132: LD_INT 3
7134: PUSH
7135: LD_INT 23
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: IN
7142: IFFALSE 7163
// points := [ 7 , 25 , 8 ] ;
7144: LD_ADDR_VAR 0 9
7148: PUSH
7149: LD_INT 7
7151: PUSH
7152: LD_INT 25
7154: PUSH
7155: LD_INT 8
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: LIST
7162: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7163: LD_VAR 0 6
7167: PPUSH
7168: CALL_OW 264
7172: PUSH
7173: LD_INT 5
7175: PUSH
7176: LD_INT 27
7178: PUSH
7179: LD_INT 44
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: LIST
7186: IN
7187: IFFALSE 7208
// points := [ 14 , 50 , 16 ] ;
7189: LD_ADDR_VAR 0 9
7193: PUSH
7194: LD_INT 14
7196: PUSH
7197: LD_INT 50
7199: PUSH
7200: LD_INT 16
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: LIST
7207: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7208: LD_VAR 0 6
7212: PPUSH
7213: CALL_OW 264
7217: PUSH
7218: LD_INT 6
7220: PUSH
7221: LD_INT 46
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: IN
7228: IFFALSE 7249
// points := [ 32 , 120 , 70 ] ;
7230: LD_ADDR_VAR 0 9
7234: PUSH
7235: LD_INT 32
7237: PUSH
7238: LD_INT 120
7240: PUSH
7241: LD_INT 70
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: LIST
7248: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
7249: LD_VAR 0 6
7253: PPUSH
7254: CALL_OW 264
7258: PUSH
7259: LD_INT 7
7261: PUSH
7262: LD_INT 28
7264: PUSH
7265: LD_INT 45
7267: PUSH
7268: LD_EXP 7
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: LIST
7277: LIST
7278: IN
7279: IFFALSE 7300
// points := [ 35 , 20 , 45 ] ;
7281: LD_ADDR_VAR 0 9
7285: PUSH
7286: LD_INT 35
7288: PUSH
7289: LD_INT 20
7291: PUSH
7292: LD_INT 45
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7300: LD_VAR 0 6
7304: PPUSH
7305: CALL_OW 264
7309: PUSH
7310: LD_INT 47
7312: PUSH
7313: EMPTY
7314: LIST
7315: IN
7316: IFFALSE 7337
// points := [ 67 , 45 , 75 ] ;
7318: LD_ADDR_VAR 0 9
7322: PUSH
7323: LD_INT 67
7325: PUSH
7326: LD_INT 45
7328: PUSH
7329: LD_INT 75
7331: PUSH
7332: EMPTY
7333: LIST
7334: LIST
7335: LIST
7336: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7337: LD_VAR 0 6
7341: PPUSH
7342: CALL_OW 264
7346: PUSH
7347: LD_INT 26
7349: PUSH
7350: EMPTY
7351: LIST
7352: IN
7353: IFFALSE 7374
// points := [ 120 , 30 , 80 ] ;
7355: LD_ADDR_VAR 0 9
7359: PUSH
7360: LD_INT 120
7362: PUSH
7363: LD_INT 30
7365: PUSH
7366: LD_INT 80
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: LIST
7373: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7374: LD_VAR 0 6
7378: PPUSH
7379: CALL_OW 264
7383: PUSH
7384: LD_INT 22
7386: PUSH
7387: EMPTY
7388: LIST
7389: IN
7390: IFFALSE 7411
// points := [ 40 , 1 , 1 ] ;
7392: LD_ADDR_VAR 0 9
7396: PUSH
7397: LD_INT 40
7399: PUSH
7400: LD_INT 1
7402: PUSH
7403: LD_INT 1
7405: PUSH
7406: EMPTY
7407: LIST
7408: LIST
7409: LIST
7410: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7411: LD_VAR 0 6
7415: PPUSH
7416: CALL_OW 264
7420: PUSH
7421: LD_INT 29
7423: PUSH
7424: EMPTY
7425: LIST
7426: IN
7427: IFFALSE 7448
// points := [ 70 , 200 , 400 ] ;
7429: LD_ADDR_VAR 0 9
7433: PUSH
7434: LD_INT 70
7436: PUSH
7437: LD_INT 200
7439: PUSH
7440: LD_INT 400
7442: PUSH
7443: EMPTY
7444: LIST
7445: LIST
7446: LIST
7447: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
7448: LD_VAR 0 6
7452: PPUSH
7453: CALL_OW 264
7457: PUSH
7458: LD_INT 14
7460: PUSH
7461: LD_INT 53
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: IN
7468: IFFALSE 7489
// points := [ 40 , 10 , 20 ] ;
7470: LD_ADDR_VAR 0 9
7474: PUSH
7475: LD_INT 40
7477: PUSH
7478: LD_INT 10
7480: PUSH
7481: LD_INT 20
7483: PUSH
7484: EMPTY
7485: LIST
7486: LIST
7487: LIST
7488: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
7489: LD_VAR 0 6
7493: PPUSH
7494: CALL_OW 264
7498: PUSH
7499: LD_INT 9
7501: PUSH
7502: EMPTY
7503: LIST
7504: IN
7505: IFFALSE 7526
// points := [ 5 , 70 , 20 ] ;
7507: LD_ADDR_VAR 0 9
7511: PUSH
7512: LD_INT 5
7514: PUSH
7515: LD_INT 70
7517: PUSH
7518: LD_INT 20
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: LIST
7525: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
7526: LD_VAR 0 6
7530: PPUSH
7531: CALL_OW 264
7535: PUSH
7536: LD_INT 10
7538: PUSH
7539: EMPTY
7540: LIST
7541: IN
7542: IFFALSE 7563
// points := [ 35 , 110 , 70 ] ;
7544: LD_ADDR_VAR 0 9
7548: PUSH
7549: LD_INT 35
7551: PUSH
7552: LD_INT 110
7554: PUSH
7555: LD_INT 70
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: LIST
7562: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
7563: LD_VAR 0 6
7567: PPUSH
7568: CALL_OW 265
7572: PUSH
7573: LD_INT 25
7575: EQUAL
7576: IFFALSE 7597
// points := [ 80 , 65 , 100 ] ;
7578: LD_ADDR_VAR 0 9
7582: PUSH
7583: LD_INT 80
7585: PUSH
7586: LD_INT 65
7588: PUSH
7589: LD_INT 100
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: LIST
7596: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
7597: LD_VAR 0 6
7601: PPUSH
7602: CALL_OW 263
7606: PUSH
7607: LD_INT 1
7609: EQUAL
7610: IFFALSE 7645
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
7612: LD_ADDR_VAR 0 10
7616: PUSH
7617: LD_VAR 0 10
7621: PUSH
7622: LD_VAR 0 6
7626: PPUSH
7627: CALL_OW 311
7631: PPUSH
7632: LD_INT 3
7634: PPUSH
7635: CALL_OW 259
7639: PUSH
7640: LD_INT 4
7642: MUL
7643: MUL
7644: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
7645: LD_VAR 0 6
7649: PPUSH
7650: CALL_OW 263
7654: PUSH
7655: LD_INT 2
7657: EQUAL
7658: IFFALSE 7709
// begin j := IsControledBy ( i ) ;
7660: LD_ADDR_VAR 0 7
7664: PUSH
7665: LD_VAR 0 6
7669: PPUSH
7670: CALL_OW 312
7674: ST_TO_ADDR
// if j then
7675: LD_VAR 0 7
7679: IFFALSE 7709
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
7681: LD_ADDR_VAR 0 10
7685: PUSH
7686: LD_VAR 0 10
7690: PUSH
7691: LD_VAR 0 7
7695: PPUSH
7696: LD_INT 3
7698: PPUSH
7699: CALL_OW 259
7703: PUSH
7704: LD_INT 3
7706: MUL
7707: MUL
7708: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
7709: LD_VAR 0 6
7713: PPUSH
7714: CALL_OW 264
7718: PUSH
7719: LD_INT 5
7721: PUSH
7722: LD_INT 6
7724: PUSH
7725: LD_INT 46
7727: PUSH
7728: LD_INT 44
7730: PUSH
7731: LD_INT 47
7733: PUSH
7734: LD_INT 45
7736: PUSH
7737: LD_INT 28
7739: PUSH
7740: LD_INT 7
7742: PUSH
7743: LD_INT 27
7745: PUSH
7746: LD_INT 29
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: IN
7761: PUSH
7762: LD_VAR 0 1
7766: PPUSH
7767: LD_INT 52
7769: PPUSH
7770: CALL_OW 321
7774: PUSH
7775: LD_INT 2
7777: EQUAL
7778: AND
7779: IFFALSE 7796
// bpoints := bpoints * 1.2 ;
7781: LD_ADDR_VAR 0 10
7785: PUSH
7786: LD_VAR 0 10
7790: PUSH
7791: LD_REAL  1.20000000000000E+0000
7794: MUL
7795: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
7796: LD_VAR 0 6
7800: PPUSH
7801: CALL_OW 264
7805: PUSH
7806: LD_INT 6
7808: PUSH
7809: LD_INT 46
7811: PUSH
7812: LD_INT 47
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: LIST
7819: IN
7820: IFFALSE 7837
// bpoints := bpoints * 1.2 ;
7822: LD_ADDR_VAR 0 10
7826: PUSH
7827: LD_VAR 0 10
7831: PUSH
7832: LD_REAL  1.20000000000000E+0000
7835: MUL
7836: ST_TO_ADDR
// end ; unit_building :
7837: GO 7851
7839: LD_INT 3
7841: DOUBLE
7842: EQUAL
7843: IFTRUE 7847
7845: GO 7850
7847: POP
// ; end ;
7848: GO 7851
7850: POP
// for j = 1 to 3 do
7851: LD_ADDR_VAR 0 7
7855: PUSH
7856: DOUBLE
7857: LD_INT 1
7859: DEC
7860: ST_TO_ADDR
7861: LD_INT 3
7863: PUSH
7864: FOR_TO
7865: IFFALSE 7918
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
7867: LD_ADDR_VAR 0 5
7871: PUSH
7872: LD_VAR 0 5
7876: PPUSH
7877: LD_VAR 0 7
7881: PPUSH
7882: LD_VAR 0 5
7886: PUSH
7887: LD_VAR 0 7
7891: ARRAY
7892: PUSH
7893: LD_VAR 0 9
7897: PUSH
7898: LD_VAR 0 7
7902: ARRAY
7903: PUSH
7904: LD_VAR 0 10
7908: MUL
7909: PLUS
7910: PPUSH
7911: CALL_OW 1
7915: ST_TO_ADDR
7916: GO 7864
7918: POP
7919: POP
// end ;
7920: GO 6397
7922: POP
7923: POP
// result := Replace ( result , 4 , tmp ) ;
7924: LD_ADDR_VAR 0 5
7928: PUSH
7929: LD_VAR 0 5
7933: PPUSH
7934: LD_INT 4
7936: PPUSH
7937: LD_VAR 0 8
7941: PPUSH
7942: CALL_OW 1
7946: ST_TO_ADDR
// end ;
7947: LD_VAR 0 5
7951: RET
// export function DangerAtRange ( unit , range ) ; begin
7952: LD_INT 0
7954: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
7955: LD_ADDR_VAR 0 3
7959: PUSH
7960: LD_VAR 0 1
7964: PPUSH
7965: CALL_OW 255
7969: PPUSH
7970: LD_VAR 0 1
7974: PPUSH
7975: CALL_OW 250
7979: PPUSH
7980: LD_VAR 0 1
7984: PPUSH
7985: CALL_OW 251
7989: PPUSH
7990: LD_VAR 0 2
7994: PPUSH
7995: CALL 6249 0 4
7999: ST_TO_ADDR
// end ;
8000: LD_VAR 0 3
8004: RET
// export function DangerInArea ( side , area ) ; begin
8005: LD_INT 0
8007: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8008: LD_ADDR_VAR 0 3
8012: PUSH
8013: LD_VAR 0 2
8017: PPUSH
8018: LD_INT 81
8020: PUSH
8021: LD_VAR 0 1
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: PPUSH
8030: CALL_OW 70
8034: ST_TO_ADDR
// end ;
8035: LD_VAR 0 3
8039: RET
// export function IsExtension ( b ) ; begin
8040: LD_INT 0
8042: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8043: LD_ADDR_VAR 0 2
8047: PUSH
8048: LD_VAR 0 1
8052: PUSH
8053: LD_INT 23
8055: PUSH
8056: LD_INT 20
8058: PUSH
8059: LD_INT 22
8061: PUSH
8062: LD_INT 17
8064: PUSH
8065: LD_INT 24
8067: PUSH
8068: LD_INT 21
8070: PUSH
8071: LD_INT 19
8073: PUSH
8074: LD_INT 16
8076: PUSH
8077: LD_INT 25
8079: PUSH
8080: LD_INT 18
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: IN
8095: ST_TO_ADDR
// end ;
8096: LD_VAR 0 2
8100: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
8101: LD_INT 0
8103: PPUSH
8104: PPUSH
8105: PPUSH
// result := [ ] ;
8106: LD_ADDR_VAR 0 4
8110: PUSH
8111: EMPTY
8112: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
8113: LD_ADDR_VAR 0 5
8117: PUSH
8118: LD_VAR 0 2
8122: PPUSH
8123: LD_INT 21
8125: PUSH
8126: LD_INT 3
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: PPUSH
8133: CALL_OW 70
8137: ST_TO_ADDR
// if not tmp then
8138: LD_VAR 0 5
8142: NOT
8143: IFFALSE 8147
// exit ;
8145: GO 8211
// if checkLink then
8147: LD_VAR 0 3
8151: IFFALSE 8201
// begin for i in tmp do
8153: LD_ADDR_VAR 0 6
8157: PUSH
8158: LD_VAR 0 5
8162: PUSH
8163: FOR_IN
8164: IFFALSE 8199
// if GetBase ( i ) <> base then
8166: LD_VAR 0 6
8170: PPUSH
8171: CALL_OW 274
8175: PUSH
8176: LD_VAR 0 1
8180: NONEQUAL
8181: IFFALSE 8197
// ComLinkToBase ( base , i ) ;
8183: LD_VAR 0 1
8187: PPUSH
8188: LD_VAR 0 6
8192: PPUSH
8193: CALL_OW 169
8197: GO 8163
8199: POP
8200: POP
// end ; result := tmp ;
8201: LD_ADDR_VAR 0 4
8205: PUSH
8206: LD_VAR 0 5
8210: ST_TO_ADDR
// end ;
8211: LD_VAR 0 4
8215: RET
// export function ComComplete ( units , b ) ; var i ; begin
8216: LD_INT 0
8218: PPUSH
8219: PPUSH
// if not units then
8220: LD_VAR 0 1
8224: NOT
8225: IFFALSE 8229
// exit ;
8227: GO 8319
// for i in units do
8229: LD_ADDR_VAR 0 4
8233: PUSH
8234: LD_VAR 0 1
8238: PUSH
8239: FOR_IN
8240: IFFALSE 8317
// if BuildingStatus ( b ) = bs_build then
8242: LD_VAR 0 2
8246: PPUSH
8247: CALL_OW 461
8251: PUSH
8252: LD_INT 1
8254: EQUAL
8255: IFFALSE 8315
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8257: LD_VAR 0 4
8261: PPUSH
8262: LD_STRING h
8264: PUSH
8265: LD_VAR 0 2
8269: PPUSH
8270: CALL_OW 250
8274: PUSH
8275: LD_VAR 0 2
8279: PPUSH
8280: CALL_OW 251
8284: PUSH
8285: LD_VAR 0 2
8289: PUSH
8290: LD_INT 0
8292: PUSH
8293: LD_INT 0
8295: PUSH
8296: LD_INT 0
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: PUSH
8308: EMPTY
8309: LIST
8310: PPUSH
8311: CALL_OW 446
8315: GO 8239
8317: POP
8318: POP
// end ;
8319: LD_VAR 0 3
8323: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8324: LD_INT 0
8326: PPUSH
8327: PPUSH
8328: PPUSH
8329: PPUSH
8330: PPUSH
8331: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
8332: LD_VAR 0 1
8336: NOT
8337: PUSH
8338: LD_VAR 0 1
8342: PPUSH
8343: CALL_OW 263
8347: PUSH
8348: LD_INT 2
8350: NONEQUAL
8351: OR
8352: IFFALSE 8356
// exit ;
8354: GO 8672
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8356: LD_ADDR_VAR 0 6
8360: PUSH
8361: LD_INT 22
8363: PUSH
8364: LD_VAR 0 1
8368: PPUSH
8369: CALL_OW 255
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: PUSH
8378: LD_INT 2
8380: PUSH
8381: LD_INT 30
8383: PUSH
8384: LD_INT 36
8386: PUSH
8387: EMPTY
8388: LIST
8389: LIST
8390: PUSH
8391: LD_INT 34
8393: PUSH
8394: LD_INT 31
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: LIST
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: PPUSH
8410: CALL_OW 69
8414: ST_TO_ADDR
// if not tmp then
8415: LD_VAR 0 6
8419: NOT
8420: IFFALSE 8424
// exit ;
8422: GO 8672
// result := [ ] ;
8424: LD_ADDR_VAR 0 2
8428: PUSH
8429: EMPTY
8430: ST_TO_ADDR
// for i in tmp do
8431: LD_ADDR_VAR 0 3
8435: PUSH
8436: LD_VAR 0 6
8440: PUSH
8441: FOR_IN
8442: IFFALSE 8513
// begin t := UnitsInside ( i ) ;
8444: LD_ADDR_VAR 0 4
8448: PUSH
8449: LD_VAR 0 3
8453: PPUSH
8454: CALL_OW 313
8458: ST_TO_ADDR
// if t then
8459: LD_VAR 0 4
8463: IFFALSE 8511
// for j in t do
8465: LD_ADDR_VAR 0 7
8469: PUSH
8470: LD_VAR 0 4
8474: PUSH
8475: FOR_IN
8476: IFFALSE 8509
// result := Replace ( result , result + 1 , j ) ;
8478: LD_ADDR_VAR 0 2
8482: PUSH
8483: LD_VAR 0 2
8487: PPUSH
8488: LD_VAR 0 2
8492: PUSH
8493: LD_INT 1
8495: PLUS
8496: PPUSH
8497: LD_VAR 0 7
8501: PPUSH
8502: CALL_OW 1
8506: ST_TO_ADDR
8507: GO 8475
8509: POP
8510: POP
// end ;
8511: GO 8441
8513: POP
8514: POP
// if not result then
8515: LD_VAR 0 2
8519: NOT
8520: IFFALSE 8524
// exit ;
8522: GO 8672
// mech := result [ 1 ] ;
8524: LD_ADDR_VAR 0 5
8528: PUSH
8529: LD_VAR 0 2
8533: PUSH
8534: LD_INT 1
8536: ARRAY
8537: ST_TO_ADDR
// if result > 1 then
8538: LD_VAR 0 2
8542: PUSH
8543: LD_INT 1
8545: GREATER
8546: IFFALSE 8658
// begin for i = 2 to result do
8548: LD_ADDR_VAR 0 3
8552: PUSH
8553: DOUBLE
8554: LD_INT 2
8556: DEC
8557: ST_TO_ADDR
8558: LD_VAR 0 2
8562: PUSH
8563: FOR_TO
8564: IFFALSE 8656
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
8566: LD_ADDR_VAR 0 4
8570: PUSH
8571: LD_VAR 0 2
8575: PUSH
8576: LD_VAR 0 3
8580: ARRAY
8581: PPUSH
8582: LD_INT 3
8584: PPUSH
8585: CALL_OW 259
8589: PUSH
8590: LD_VAR 0 2
8594: PUSH
8595: LD_VAR 0 3
8599: ARRAY
8600: PPUSH
8601: CALL_OW 432
8605: MINUS
8606: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
8607: LD_VAR 0 4
8611: PUSH
8612: LD_VAR 0 5
8616: PPUSH
8617: LD_INT 3
8619: PPUSH
8620: CALL_OW 259
8624: PUSH
8625: LD_VAR 0 5
8629: PPUSH
8630: CALL_OW 432
8634: MINUS
8635: GREATEREQUAL
8636: IFFALSE 8654
// mech := result [ i ] ;
8638: LD_ADDR_VAR 0 5
8642: PUSH
8643: LD_VAR 0 2
8647: PUSH
8648: LD_VAR 0 3
8652: ARRAY
8653: ST_TO_ADDR
// end ;
8654: GO 8563
8656: POP
8657: POP
// end ; ComLinkTo ( vehicle , mech ) ;
8658: LD_VAR 0 1
8662: PPUSH
8663: LD_VAR 0 5
8667: PPUSH
8668: CALL_OW 135
// end ;
8672: LD_VAR 0 2
8676: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
8677: LD_INT 0
8679: PPUSH
8680: PPUSH
8681: PPUSH
8682: PPUSH
8683: PPUSH
8684: PPUSH
8685: PPUSH
8686: PPUSH
8687: PPUSH
8688: PPUSH
8689: PPUSH
8690: PPUSH
8691: PPUSH
// result := [ ] ;
8692: LD_ADDR_VAR 0 7
8696: PUSH
8697: EMPTY
8698: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
8699: LD_VAR 0 1
8703: PPUSH
8704: CALL_OW 266
8708: PUSH
8709: LD_INT 0
8711: PUSH
8712: LD_INT 1
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: IN
8719: NOT
8720: IFFALSE 8724
// exit ;
8722: GO 10358
// if name then
8724: LD_VAR 0 3
8728: IFFALSE 8744
// SetBName ( base_dep , name ) ;
8730: LD_VAR 0 1
8734: PPUSH
8735: LD_VAR 0 3
8739: PPUSH
8740: CALL_OW 500
// base := GetBase ( base_dep ) ;
8744: LD_ADDR_VAR 0 15
8748: PUSH
8749: LD_VAR 0 1
8753: PPUSH
8754: CALL_OW 274
8758: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
8759: LD_ADDR_VAR 0 16
8763: PUSH
8764: LD_VAR 0 1
8768: PPUSH
8769: CALL_OW 255
8773: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
8774: LD_ADDR_VAR 0 17
8778: PUSH
8779: LD_VAR 0 1
8783: PPUSH
8784: CALL_OW 248
8788: ST_TO_ADDR
// if sources then
8789: LD_VAR 0 5
8793: IFFALSE 8840
// for i = 1 to 3 do
8795: LD_ADDR_VAR 0 8
8799: PUSH
8800: DOUBLE
8801: LD_INT 1
8803: DEC
8804: ST_TO_ADDR
8805: LD_INT 3
8807: PUSH
8808: FOR_TO
8809: IFFALSE 8838
// AddResourceType ( base , i , sources [ i ] ) ;
8811: LD_VAR 0 15
8815: PPUSH
8816: LD_VAR 0 8
8820: PPUSH
8821: LD_VAR 0 5
8825: PUSH
8826: LD_VAR 0 8
8830: ARRAY
8831: PPUSH
8832: CALL_OW 276
8836: GO 8808
8838: POP
8839: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
8840: LD_ADDR_VAR 0 18
8844: PUSH
8845: LD_VAR 0 15
8849: PPUSH
8850: LD_VAR 0 2
8854: PPUSH
8855: LD_INT 1
8857: PPUSH
8858: CALL 8101 0 3
8862: ST_TO_ADDR
// InitHc ;
8863: CALL_OW 19
// InitUc ;
8867: CALL_OW 18
// uc_side := side ;
8871: LD_ADDR_OWVAR 20
8875: PUSH
8876: LD_VAR 0 16
8880: ST_TO_ADDR
// uc_nation := nation ;
8881: LD_ADDR_OWVAR 21
8885: PUSH
8886: LD_VAR 0 17
8890: ST_TO_ADDR
// if buildings then
8891: LD_VAR 0 18
8895: IFFALSE 10217
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
8897: LD_ADDR_VAR 0 19
8901: PUSH
8902: LD_VAR 0 18
8906: PPUSH
8907: LD_INT 2
8909: PUSH
8910: LD_INT 30
8912: PUSH
8913: LD_INT 29
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: LD_INT 30
8922: PUSH
8923: LD_INT 30
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PUSH
8930: EMPTY
8931: LIST
8932: LIST
8933: LIST
8934: PPUSH
8935: CALL_OW 72
8939: ST_TO_ADDR
// if tmp then
8940: LD_VAR 0 19
8944: IFFALSE 8992
// for i in tmp do
8946: LD_ADDR_VAR 0 8
8950: PUSH
8951: LD_VAR 0 19
8955: PUSH
8956: FOR_IN
8957: IFFALSE 8990
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
8959: LD_VAR 0 8
8963: PPUSH
8964: CALL_OW 250
8968: PPUSH
8969: LD_VAR 0 8
8973: PPUSH
8974: CALL_OW 251
8978: PPUSH
8979: LD_VAR 0 16
8983: PPUSH
8984: CALL_OW 441
8988: GO 8956
8990: POP
8991: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
8992: LD_VAR 0 18
8996: PPUSH
8997: LD_INT 2
8999: PUSH
9000: LD_INT 30
9002: PUSH
9003: LD_INT 32
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: PUSH
9010: LD_INT 30
9012: PUSH
9013: LD_INT 33
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: PUSH
9020: EMPTY
9021: LIST
9022: LIST
9023: LIST
9024: PPUSH
9025: CALL_OW 72
9029: IFFALSE 9117
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9031: LD_ADDR_VAR 0 8
9035: PUSH
9036: LD_VAR 0 18
9040: PPUSH
9041: LD_INT 2
9043: PUSH
9044: LD_INT 30
9046: PUSH
9047: LD_INT 32
9049: PUSH
9050: EMPTY
9051: LIST
9052: LIST
9053: PUSH
9054: LD_INT 30
9056: PUSH
9057: LD_INT 33
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: LIST
9068: PPUSH
9069: CALL_OW 72
9073: PUSH
9074: FOR_IN
9075: IFFALSE 9115
// begin if not GetBWeapon ( i ) then
9077: LD_VAR 0 8
9081: PPUSH
9082: CALL_OW 269
9086: NOT
9087: IFFALSE 9113
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
9089: LD_VAR 0 8
9093: PPUSH
9094: LD_VAR 0 8
9098: PPUSH
9099: LD_VAR 0 2
9103: PPUSH
9104: CALL 10363 0 2
9108: PPUSH
9109: CALL_OW 431
// end ;
9113: GO 9074
9115: POP
9116: POP
// end ; for i = 1 to personel do
9117: LD_ADDR_VAR 0 8
9121: PUSH
9122: DOUBLE
9123: LD_INT 1
9125: DEC
9126: ST_TO_ADDR
9127: LD_VAR 0 6
9131: PUSH
9132: FOR_TO
9133: IFFALSE 10197
// begin if i > 4 then
9135: LD_VAR 0 8
9139: PUSH
9140: LD_INT 4
9142: GREATER
9143: IFFALSE 9147
// break ;
9145: GO 10197
// case i of 1 :
9147: LD_VAR 0 8
9151: PUSH
9152: LD_INT 1
9154: DOUBLE
9155: EQUAL
9156: IFTRUE 9160
9158: GO 9240
9160: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9161: LD_ADDR_VAR 0 12
9165: PUSH
9166: LD_VAR 0 18
9170: PPUSH
9171: LD_INT 22
9173: PUSH
9174: LD_VAR 0 16
9178: PUSH
9179: EMPTY
9180: LIST
9181: LIST
9182: PUSH
9183: LD_INT 58
9185: PUSH
9186: EMPTY
9187: LIST
9188: PUSH
9189: LD_INT 2
9191: PUSH
9192: LD_INT 30
9194: PUSH
9195: LD_INT 32
9197: PUSH
9198: EMPTY
9199: LIST
9200: LIST
9201: PUSH
9202: LD_INT 30
9204: PUSH
9205: LD_INT 4
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: PUSH
9212: LD_INT 30
9214: PUSH
9215: LD_INT 5
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: LIST
9232: PPUSH
9233: CALL_OW 72
9237: ST_TO_ADDR
9238: GO 9462
9240: LD_INT 2
9242: DOUBLE
9243: EQUAL
9244: IFTRUE 9248
9246: GO 9310
9248: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9249: LD_ADDR_VAR 0 12
9253: PUSH
9254: LD_VAR 0 18
9258: PPUSH
9259: LD_INT 22
9261: PUSH
9262: LD_VAR 0 16
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: PUSH
9271: LD_INT 2
9273: PUSH
9274: LD_INT 30
9276: PUSH
9277: LD_INT 0
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 30
9286: PUSH
9287: LD_INT 1
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: LIST
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PPUSH
9303: CALL_OW 72
9307: ST_TO_ADDR
9308: GO 9462
9310: LD_INT 3
9312: DOUBLE
9313: EQUAL
9314: IFTRUE 9318
9316: GO 9380
9318: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9319: LD_ADDR_VAR 0 12
9323: PUSH
9324: LD_VAR 0 18
9328: PPUSH
9329: LD_INT 22
9331: PUSH
9332: LD_VAR 0 16
9336: PUSH
9337: EMPTY
9338: LIST
9339: LIST
9340: PUSH
9341: LD_INT 2
9343: PUSH
9344: LD_INT 30
9346: PUSH
9347: LD_INT 2
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: PUSH
9354: LD_INT 30
9356: PUSH
9357: LD_INT 3
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PUSH
9364: EMPTY
9365: LIST
9366: LIST
9367: LIST
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: PPUSH
9373: CALL_OW 72
9377: ST_TO_ADDR
9378: GO 9462
9380: LD_INT 4
9382: DOUBLE
9383: EQUAL
9384: IFTRUE 9388
9386: GO 9461
9388: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9389: LD_ADDR_VAR 0 12
9393: PUSH
9394: LD_VAR 0 18
9398: PPUSH
9399: LD_INT 22
9401: PUSH
9402: LD_VAR 0 16
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: PUSH
9411: LD_INT 2
9413: PUSH
9414: LD_INT 30
9416: PUSH
9417: LD_INT 6
9419: PUSH
9420: EMPTY
9421: LIST
9422: LIST
9423: PUSH
9424: LD_INT 30
9426: PUSH
9427: LD_INT 7
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PUSH
9434: LD_INT 30
9436: PUSH
9437: LD_INT 8
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: PPUSH
9454: CALL_OW 72
9458: ST_TO_ADDR
9459: GO 9462
9461: POP
// if i = 1 then
9462: LD_VAR 0 8
9466: PUSH
9467: LD_INT 1
9469: EQUAL
9470: IFFALSE 9581
// begin tmp := [ ] ;
9472: LD_ADDR_VAR 0 19
9476: PUSH
9477: EMPTY
9478: ST_TO_ADDR
// for j in f do
9479: LD_ADDR_VAR 0 9
9483: PUSH
9484: LD_VAR 0 12
9488: PUSH
9489: FOR_IN
9490: IFFALSE 9563
// if GetBType ( j ) = b_bunker then
9492: LD_VAR 0 9
9496: PPUSH
9497: CALL_OW 266
9501: PUSH
9502: LD_INT 32
9504: EQUAL
9505: IFFALSE 9532
// tmp := Insert ( tmp , 1 , j ) else
9507: LD_ADDR_VAR 0 19
9511: PUSH
9512: LD_VAR 0 19
9516: PPUSH
9517: LD_INT 1
9519: PPUSH
9520: LD_VAR 0 9
9524: PPUSH
9525: CALL_OW 2
9529: ST_TO_ADDR
9530: GO 9561
// tmp := Insert ( tmp , tmp + 1 , j ) ;
9532: LD_ADDR_VAR 0 19
9536: PUSH
9537: LD_VAR 0 19
9541: PPUSH
9542: LD_VAR 0 19
9546: PUSH
9547: LD_INT 1
9549: PLUS
9550: PPUSH
9551: LD_VAR 0 9
9555: PPUSH
9556: CALL_OW 2
9560: ST_TO_ADDR
9561: GO 9489
9563: POP
9564: POP
// if tmp then
9565: LD_VAR 0 19
9569: IFFALSE 9581
// f := tmp ;
9571: LD_ADDR_VAR 0 12
9575: PUSH
9576: LD_VAR 0 19
9580: ST_TO_ADDR
// end ; x := personel [ i ] ;
9581: LD_ADDR_VAR 0 13
9585: PUSH
9586: LD_VAR 0 6
9590: PUSH
9591: LD_VAR 0 8
9595: ARRAY
9596: ST_TO_ADDR
// if x = - 1 then
9597: LD_VAR 0 13
9601: PUSH
9602: LD_INT 1
9604: NEG
9605: EQUAL
9606: IFFALSE 9815
// begin for j in f do
9608: LD_ADDR_VAR 0 9
9612: PUSH
9613: LD_VAR 0 12
9617: PUSH
9618: FOR_IN
9619: IFFALSE 9811
// repeat InitHc ;
9621: CALL_OW 19
// if GetBType ( j ) = b_barracks then
9625: LD_VAR 0 9
9629: PPUSH
9630: CALL_OW 266
9634: PUSH
9635: LD_INT 5
9637: EQUAL
9638: IFFALSE 9708
// begin if UnitsInside ( j ) < 3 then
9640: LD_VAR 0 9
9644: PPUSH
9645: CALL_OW 313
9649: PUSH
9650: LD_INT 3
9652: LESS
9653: IFFALSE 9689
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9655: LD_INT 0
9657: PPUSH
9658: LD_INT 5
9660: PUSH
9661: LD_INT 8
9663: PUSH
9664: LD_INT 9
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: LIST
9671: PUSH
9672: LD_VAR 0 17
9676: ARRAY
9677: PPUSH
9678: LD_VAR 0 4
9682: PPUSH
9683: CALL_OW 380
9687: GO 9706
// PrepareHuman ( false , i , skill ) ;
9689: LD_INT 0
9691: PPUSH
9692: LD_VAR 0 8
9696: PPUSH
9697: LD_VAR 0 4
9701: PPUSH
9702: CALL_OW 380
// end else
9706: GO 9725
// PrepareHuman ( false , i , skill ) ;
9708: LD_INT 0
9710: PPUSH
9711: LD_VAR 0 8
9715: PPUSH
9716: LD_VAR 0 4
9720: PPUSH
9721: CALL_OW 380
// un := CreateHuman ;
9725: LD_ADDR_VAR 0 14
9729: PUSH
9730: CALL_OW 44
9734: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9735: LD_ADDR_VAR 0 7
9739: PUSH
9740: LD_VAR 0 7
9744: PPUSH
9745: LD_INT 1
9747: PPUSH
9748: LD_VAR 0 14
9752: PPUSH
9753: CALL_OW 2
9757: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
9758: LD_VAR 0 14
9762: PPUSH
9763: LD_VAR 0 9
9767: PPUSH
9768: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
9772: LD_VAR 0 9
9776: PPUSH
9777: CALL_OW 313
9781: PUSH
9782: LD_INT 6
9784: EQUAL
9785: PUSH
9786: LD_VAR 0 9
9790: PPUSH
9791: CALL_OW 266
9795: PUSH
9796: LD_INT 32
9798: PUSH
9799: LD_INT 31
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: IN
9806: OR
9807: IFFALSE 9621
9809: GO 9618
9811: POP
9812: POP
// end else
9813: GO 10195
// for j = 1 to x do
9815: LD_ADDR_VAR 0 9
9819: PUSH
9820: DOUBLE
9821: LD_INT 1
9823: DEC
9824: ST_TO_ADDR
9825: LD_VAR 0 13
9829: PUSH
9830: FOR_TO
9831: IFFALSE 10193
// begin InitHc ;
9833: CALL_OW 19
// if not f then
9837: LD_VAR 0 12
9841: NOT
9842: IFFALSE 9931
// begin PrepareHuman ( false , i , skill ) ;
9844: LD_INT 0
9846: PPUSH
9847: LD_VAR 0 8
9851: PPUSH
9852: LD_VAR 0 4
9856: PPUSH
9857: CALL_OW 380
// un := CreateHuman ;
9861: LD_ADDR_VAR 0 14
9865: PUSH
9866: CALL_OW 44
9870: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9871: LD_ADDR_VAR 0 7
9875: PUSH
9876: LD_VAR 0 7
9880: PPUSH
9881: LD_INT 1
9883: PPUSH
9884: LD_VAR 0 14
9888: PPUSH
9889: CALL_OW 2
9893: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
9894: LD_VAR 0 14
9898: PPUSH
9899: LD_VAR 0 1
9903: PPUSH
9904: CALL_OW 250
9908: PPUSH
9909: LD_VAR 0 1
9913: PPUSH
9914: CALL_OW 251
9918: PPUSH
9919: LD_INT 10
9921: PPUSH
9922: LD_INT 0
9924: PPUSH
9925: CALL_OW 50
// continue ;
9929: GO 9830
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
9931: LD_VAR 0 12
9935: PUSH
9936: LD_INT 1
9938: ARRAY
9939: PPUSH
9940: CALL_OW 313
9944: PUSH
9945: LD_VAR 0 12
9949: PUSH
9950: LD_INT 1
9952: ARRAY
9953: PPUSH
9954: CALL_OW 266
9958: PUSH
9959: LD_INT 32
9961: PUSH
9962: LD_INT 31
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: IN
9969: AND
9970: PUSH
9971: LD_VAR 0 12
9975: PUSH
9976: LD_INT 1
9978: ARRAY
9979: PPUSH
9980: CALL_OW 313
9984: PUSH
9985: LD_INT 6
9987: EQUAL
9988: OR
9989: IFFALSE 10009
// f := Delete ( f , 1 ) ;
9991: LD_ADDR_VAR 0 12
9995: PUSH
9996: LD_VAR 0 12
10000: PPUSH
10001: LD_INT 1
10003: PPUSH
10004: CALL_OW 3
10008: ST_TO_ADDR
// if not f then
10009: LD_VAR 0 12
10013: NOT
10014: IFFALSE 10032
// begin x := x + 2 ;
10016: LD_ADDR_VAR 0 13
10020: PUSH
10021: LD_VAR 0 13
10025: PUSH
10026: LD_INT 2
10028: PLUS
10029: ST_TO_ADDR
// continue ;
10030: GO 9830
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10032: LD_VAR 0 12
10036: PUSH
10037: LD_INT 1
10039: ARRAY
10040: PPUSH
10041: CALL_OW 266
10045: PUSH
10046: LD_INT 5
10048: EQUAL
10049: IFFALSE 10123
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10051: LD_VAR 0 12
10055: PUSH
10056: LD_INT 1
10058: ARRAY
10059: PPUSH
10060: CALL_OW 313
10064: PUSH
10065: LD_INT 3
10067: LESS
10068: IFFALSE 10104
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10070: LD_INT 0
10072: PPUSH
10073: LD_INT 5
10075: PUSH
10076: LD_INT 8
10078: PUSH
10079: LD_INT 9
10081: PUSH
10082: EMPTY
10083: LIST
10084: LIST
10085: LIST
10086: PUSH
10087: LD_VAR 0 17
10091: ARRAY
10092: PPUSH
10093: LD_VAR 0 4
10097: PPUSH
10098: CALL_OW 380
10102: GO 10121
// PrepareHuman ( false , i , skill ) ;
10104: LD_INT 0
10106: PPUSH
10107: LD_VAR 0 8
10111: PPUSH
10112: LD_VAR 0 4
10116: PPUSH
10117: CALL_OW 380
// end else
10121: GO 10140
// PrepareHuman ( false , i , skill ) ;
10123: LD_INT 0
10125: PPUSH
10126: LD_VAR 0 8
10130: PPUSH
10131: LD_VAR 0 4
10135: PPUSH
10136: CALL_OW 380
// un := CreateHuman ;
10140: LD_ADDR_VAR 0 14
10144: PUSH
10145: CALL_OW 44
10149: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10150: LD_ADDR_VAR 0 7
10154: PUSH
10155: LD_VAR 0 7
10159: PPUSH
10160: LD_INT 1
10162: PPUSH
10163: LD_VAR 0 14
10167: PPUSH
10168: CALL_OW 2
10172: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10173: LD_VAR 0 14
10177: PPUSH
10178: LD_VAR 0 12
10182: PUSH
10183: LD_INT 1
10185: ARRAY
10186: PPUSH
10187: CALL_OW 52
// end ;
10191: GO 9830
10193: POP
10194: POP
// end ;
10195: GO 9132
10197: POP
10198: POP
// result := result ^ buildings ;
10199: LD_ADDR_VAR 0 7
10203: PUSH
10204: LD_VAR 0 7
10208: PUSH
10209: LD_VAR 0 18
10213: ADD
10214: ST_TO_ADDR
// end else
10215: GO 10358
// begin for i = 1 to personel do
10217: LD_ADDR_VAR 0 8
10221: PUSH
10222: DOUBLE
10223: LD_INT 1
10225: DEC
10226: ST_TO_ADDR
10227: LD_VAR 0 6
10231: PUSH
10232: FOR_TO
10233: IFFALSE 10356
// begin if i > 4 then
10235: LD_VAR 0 8
10239: PUSH
10240: LD_INT 4
10242: GREATER
10243: IFFALSE 10247
// break ;
10245: GO 10356
// x := personel [ i ] ;
10247: LD_ADDR_VAR 0 13
10251: PUSH
10252: LD_VAR 0 6
10256: PUSH
10257: LD_VAR 0 8
10261: ARRAY
10262: ST_TO_ADDR
// if x = - 1 then
10263: LD_VAR 0 13
10267: PUSH
10268: LD_INT 1
10270: NEG
10271: EQUAL
10272: IFFALSE 10276
// continue ;
10274: GO 10232
// PrepareHuman ( false , i , skill ) ;
10276: LD_INT 0
10278: PPUSH
10279: LD_VAR 0 8
10283: PPUSH
10284: LD_VAR 0 4
10288: PPUSH
10289: CALL_OW 380
// un := CreateHuman ;
10293: LD_ADDR_VAR 0 14
10297: PUSH
10298: CALL_OW 44
10302: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10303: LD_VAR 0 14
10307: PPUSH
10308: LD_VAR 0 1
10312: PPUSH
10313: CALL_OW 250
10317: PPUSH
10318: LD_VAR 0 1
10322: PPUSH
10323: CALL_OW 251
10327: PPUSH
10328: LD_INT 10
10330: PPUSH
10331: LD_INT 0
10333: PPUSH
10334: CALL_OW 50
// result := result ^ un ;
10338: LD_ADDR_VAR 0 7
10342: PUSH
10343: LD_VAR 0 7
10347: PUSH
10348: LD_VAR 0 14
10352: ADD
10353: ST_TO_ADDR
// end ;
10354: GO 10232
10356: POP
10357: POP
// end ; end ;
10358: LD_VAR 0 7
10362: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10363: LD_INT 0
10365: PPUSH
10366: PPUSH
10367: PPUSH
10368: PPUSH
10369: PPUSH
10370: PPUSH
10371: PPUSH
10372: PPUSH
10373: PPUSH
10374: PPUSH
10375: PPUSH
10376: PPUSH
10377: PPUSH
10378: PPUSH
10379: PPUSH
10380: PPUSH
// result := false ;
10381: LD_ADDR_VAR 0 3
10385: PUSH
10386: LD_INT 0
10388: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10389: LD_VAR 0 1
10393: NOT
10394: PUSH
10395: LD_VAR 0 1
10399: PPUSH
10400: CALL_OW 266
10404: PUSH
10405: LD_INT 32
10407: PUSH
10408: LD_INT 33
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: IN
10415: NOT
10416: OR
10417: IFFALSE 10421
// exit ;
10419: GO 11530
// nat := GetNation ( tower ) ;
10421: LD_ADDR_VAR 0 12
10425: PUSH
10426: LD_VAR 0 1
10430: PPUSH
10431: CALL_OW 248
10435: ST_TO_ADDR
// side := GetSide ( tower ) ;
10436: LD_ADDR_VAR 0 16
10440: PUSH
10441: LD_VAR 0 1
10445: PPUSH
10446: CALL_OW 255
10450: ST_TO_ADDR
// x := GetX ( tower ) ;
10451: LD_ADDR_VAR 0 10
10455: PUSH
10456: LD_VAR 0 1
10460: PPUSH
10461: CALL_OW 250
10465: ST_TO_ADDR
// y := GetY ( tower ) ;
10466: LD_ADDR_VAR 0 11
10470: PUSH
10471: LD_VAR 0 1
10475: PPUSH
10476: CALL_OW 251
10480: ST_TO_ADDR
// if not x or not y then
10481: LD_VAR 0 10
10485: NOT
10486: PUSH
10487: LD_VAR 0 11
10491: NOT
10492: OR
10493: IFFALSE 10497
// exit ;
10495: GO 11530
// weapon := 0 ;
10497: LD_ADDR_VAR 0 18
10501: PUSH
10502: LD_INT 0
10504: ST_TO_ADDR
// fac_list := [ ] ;
10505: LD_ADDR_VAR 0 17
10509: PUSH
10510: EMPTY
10511: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
10512: LD_ADDR_VAR 0 6
10516: PUSH
10517: LD_VAR 0 1
10521: PPUSH
10522: CALL_OW 274
10526: PPUSH
10527: LD_VAR 0 2
10531: PPUSH
10532: LD_INT 0
10534: PPUSH
10535: CALL 8101 0 3
10539: PPUSH
10540: LD_INT 30
10542: PUSH
10543: LD_INT 3
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: PPUSH
10550: CALL_OW 72
10554: ST_TO_ADDR
// if not factories then
10555: LD_VAR 0 6
10559: NOT
10560: IFFALSE 10564
// exit ;
10562: GO 11530
// for i in factories do
10564: LD_ADDR_VAR 0 8
10568: PUSH
10569: LD_VAR 0 6
10573: PUSH
10574: FOR_IN
10575: IFFALSE 10600
// fac_list := fac_list union AvailableWeaponList ( i ) ;
10577: LD_ADDR_VAR 0 17
10581: PUSH
10582: LD_VAR 0 17
10586: PUSH
10587: LD_VAR 0 8
10591: PPUSH
10592: CALL_OW 478
10596: UNION
10597: ST_TO_ADDR
10598: GO 10574
10600: POP
10601: POP
// if not fac_list then
10602: LD_VAR 0 17
10606: NOT
10607: IFFALSE 10611
// exit ;
10609: GO 11530
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
10611: LD_ADDR_VAR 0 5
10615: PUSH
10616: LD_INT 4
10618: PUSH
10619: LD_INT 5
10621: PUSH
10622: LD_INT 9
10624: PUSH
10625: LD_INT 10
10627: PUSH
10628: LD_INT 6
10630: PUSH
10631: LD_INT 7
10633: PUSH
10634: LD_INT 11
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: PUSH
10646: LD_INT 27
10648: PUSH
10649: LD_INT 28
10651: PUSH
10652: LD_INT 26
10654: PUSH
10655: LD_INT 30
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: PUSH
10664: LD_INT 43
10666: PUSH
10667: LD_INT 44
10669: PUSH
10670: LD_INT 46
10672: PUSH
10673: LD_INT 45
10675: PUSH
10676: LD_INT 47
10678: PUSH
10679: LD_INT 49
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: LIST
10694: PUSH
10695: LD_VAR 0 12
10699: ARRAY
10700: ST_TO_ADDR
// list := list isect fac_list ;
10701: LD_ADDR_VAR 0 5
10705: PUSH
10706: LD_VAR 0 5
10710: PUSH
10711: LD_VAR 0 17
10715: ISECT
10716: ST_TO_ADDR
// if not list then
10717: LD_VAR 0 5
10721: NOT
10722: IFFALSE 10726
// exit ;
10724: GO 11530
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
10726: LD_VAR 0 12
10730: PUSH
10731: LD_INT 3
10733: EQUAL
10734: PUSH
10735: LD_INT 49
10737: PUSH
10738: LD_VAR 0 5
10742: IN
10743: AND
10744: PUSH
10745: LD_INT 31
10747: PPUSH
10748: LD_VAR 0 16
10752: PPUSH
10753: CALL_OW 321
10757: PUSH
10758: LD_INT 2
10760: EQUAL
10761: AND
10762: IFFALSE 10822
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
10764: LD_INT 22
10766: PUSH
10767: LD_VAR 0 16
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: PUSH
10776: LD_INT 35
10778: PUSH
10779: LD_INT 49
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: PUSH
10786: LD_INT 91
10788: PUSH
10789: LD_VAR 0 1
10793: PUSH
10794: LD_INT 10
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: LIST
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: LIST
10806: PPUSH
10807: CALL_OW 69
10811: NOT
10812: IFFALSE 10822
// weapon := ru_time_lapser ;
10814: LD_ADDR_VAR 0 18
10818: PUSH
10819: LD_INT 49
10821: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
10822: LD_VAR 0 12
10826: PUSH
10827: LD_INT 1
10829: PUSH
10830: LD_INT 2
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: IN
10837: PUSH
10838: LD_INT 11
10840: PUSH
10841: LD_VAR 0 5
10845: IN
10846: PUSH
10847: LD_INT 30
10849: PUSH
10850: LD_VAR 0 5
10854: IN
10855: OR
10856: AND
10857: PUSH
10858: LD_INT 6
10860: PPUSH
10861: LD_VAR 0 16
10865: PPUSH
10866: CALL_OW 321
10870: PUSH
10871: LD_INT 2
10873: EQUAL
10874: AND
10875: IFFALSE 11040
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
10877: LD_INT 22
10879: PUSH
10880: LD_VAR 0 16
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PUSH
10889: LD_INT 2
10891: PUSH
10892: LD_INT 35
10894: PUSH
10895: LD_INT 11
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PUSH
10902: LD_INT 35
10904: PUSH
10905: LD_INT 30
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: PUSH
10912: EMPTY
10913: LIST
10914: LIST
10915: LIST
10916: PUSH
10917: LD_INT 91
10919: PUSH
10920: LD_VAR 0 1
10924: PUSH
10925: LD_INT 18
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: LIST
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: LIST
10937: PPUSH
10938: CALL_OW 69
10942: NOT
10943: PUSH
10944: LD_INT 22
10946: PUSH
10947: LD_VAR 0 16
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: PUSH
10956: LD_INT 2
10958: PUSH
10959: LD_INT 30
10961: PUSH
10962: LD_INT 32
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: PUSH
10969: LD_INT 30
10971: PUSH
10972: LD_INT 33
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: LIST
10983: PUSH
10984: LD_INT 91
10986: PUSH
10987: LD_VAR 0 1
10991: PUSH
10992: LD_INT 12
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: LIST
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: LIST
11004: PUSH
11005: EMPTY
11006: LIST
11007: PPUSH
11008: CALL_OW 69
11012: PUSH
11013: LD_INT 2
11015: GREATER
11016: AND
11017: IFFALSE 11040
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11019: LD_ADDR_VAR 0 18
11023: PUSH
11024: LD_INT 11
11026: PUSH
11027: LD_INT 30
11029: PUSH
11030: EMPTY
11031: LIST
11032: LIST
11033: PUSH
11034: LD_VAR 0 12
11038: ARRAY
11039: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11040: LD_VAR 0 18
11044: NOT
11045: PUSH
11046: LD_INT 40
11048: PPUSH
11049: LD_VAR 0 16
11053: PPUSH
11054: CALL_OW 321
11058: PUSH
11059: LD_INT 2
11061: EQUAL
11062: AND
11063: PUSH
11064: LD_INT 7
11066: PUSH
11067: LD_VAR 0 5
11071: IN
11072: PUSH
11073: LD_INT 28
11075: PUSH
11076: LD_VAR 0 5
11080: IN
11081: OR
11082: PUSH
11083: LD_INT 45
11085: PUSH
11086: LD_VAR 0 5
11090: IN
11091: OR
11092: AND
11093: IFFALSE 11347
// begin hex := GetHexInfo ( x , y ) ;
11095: LD_ADDR_VAR 0 4
11099: PUSH
11100: LD_VAR 0 10
11104: PPUSH
11105: LD_VAR 0 11
11109: PPUSH
11110: CALL_OW 546
11114: ST_TO_ADDR
// if hex [ 1 ] then
11115: LD_VAR 0 4
11119: PUSH
11120: LD_INT 1
11122: ARRAY
11123: IFFALSE 11127
// exit ;
11125: GO 11530
// height := hex [ 2 ] ;
11127: LD_ADDR_VAR 0 15
11131: PUSH
11132: LD_VAR 0 4
11136: PUSH
11137: LD_INT 2
11139: ARRAY
11140: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11141: LD_ADDR_VAR 0 14
11145: PUSH
11146: LD_INT 0
11148: PUSH
11149: LD_INT 2
11151: PUSH
11152: LD_INT 3
11154: PUSH
11155: LD_INT 5
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: ST_TO_ADDR
// for i in tmp do
11164: LD_ADDR_VAR 0 8
11168: PUSH
11169: LD_VAR 0 14
11173: PUSH
11174: FOR_IN
11175: IFFALSE 11345
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11177: LD_ADDR_VAR 0 9
11181: PUSH
11182: LD_VAR 0 10
11186: PPUSH
11187: LD_VAR 0 8
11191: PPUSH
11192: LD_INT 5
11194: PPUSH
11195: CALL_OW 272
11199: PUSH
11200: LD_VAR 0 11
11204: PPUSH
11205: LD_VAR 0 8
11209: PPUSH
11210: LD_INT 5
11212: PPUSH
11213: CALL_OW 273
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11222: LD_VAR 0 9
11226: PUSH
11227: LD_INT 1
11229: ARRAY
11230: PPUSH
11231: LD_VAR 0 9
11235: PUSH
11236: LD_INT 2
11238: ARRAY
11239: PPUSH
11240: CALL_OW 488
11244: IFFALSE 11343
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11246: LD_ADDR_VAR 0 4
11250: PUSH
11251: LD_VAR 0 9
11255: PUSH
11256: LD_INT 1
11258: ARRAY
11259: PPUSH
11260: LD_VAR 0 9
11264: PUSH
11265: LD_INT 2
11267: ARRAY
11268: PPUSH
11269: CALL_OW 546
11273: ST_TO_ADDR
// if hex [ 1 ] then
11274: LD_VAR 0 4
11278: PUSH
11279: LD_INT 1
11281: ARRAY
11282: IFFALSE 11286
// continue ;
11284: GO 11174
// h := hex [ 2 ] ;
11286: LD_ADDR_VAR 0 13
11290: PUSH
11291: LD_VAR 0 4
11295: PUSH
11296: LD_INT 2
11298: ARRAY
11299: ST_TO_ADDR
// if h + 7 < height then
11300: LD_VAR 0 13
11304: PUSH
11305: LD_INT 7
11307: PLUS
11308: PUSH
11309: LD_VAR 0 15
11313: LESS
11314: IFFALSE 11343
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11316: LD_ADDR_VAR 0 18
11320: PUSH
11321: LD_INT 7
11323: PUSH
11324: LD_INT 28
11326: PUSH
11327: LD_INT 45
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: LIST
11334: PUSH
11335: LD_VAR 0 12
11339: ARRAY
11340: ST_TO_ADDR
// break ;
11341: GO 11345
// end ; end ; end ;
11343: GO 11174
11345: POP
11346: POP
// end ; if not weapon then
11347: LD_VAR 0 18
11351: NOT
11352: IFFALSE 11412
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11354: LD_ADDR_VAR 0 5
11358: PUSH
11359: LD_VAR 0 5
11363: PUSH
11364: LD_INT 11
11366: PUSH
11367: LD_INT 30
11369: PUSH
11370: LD_INT 49
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: LIST
11377: DIFF
11378: ST_TO_ADDR
// if not list then
11379: LD_VAR 0 5
11383: NOT
11384: IFFALSE 11388
// exit ;
11386: GO 11530
// weapon := list [ rand ( 1 , list ) ] ;
11388: LD_ADDR_VAR 0 18
11392: PUSH
11393: LD_VAR 0 5
11397: PUSH
11398: LD_INT 1
11400: PPUSH
11401: LD_VAR 0 5
11405: PPUSH
11406: CALL_OW 12
11410: ARRAY
11411: ST_TO_ADDR
// end ; if weapon then
11412: LD_VAR 0 18
11416: IFFALSE 11530
// begin tmp := CostOfWeapon ( weapon ) ;
11418: LD_ADDR_VAR 0 14
11422: PUSH
11423: LD_VAR 0 18
11427: PPUSH
11428: CALL_OW 451
11432: ST_TO_ADDR
// j := GetBase ( tower ) ;
11433: LD_ADDR_VAR 0 9
11437: PUSH
11438: LD_VAR 0 1
11442: PPUSH
11443: CALL_OW 274
11447: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11448: LD_VAR 0 9
11452: PPUSH
11453: LD_INT 1
11455: PPUSH
11456: CALL_OW 275
11460: PUSH
11461: LD_VAR 0 14
11465: PUSH
11466: LD_INT 1
11468: ARRAY
11469: GREATEREQUAL
11470: PUSH
11471: LD_VAR 0 9
11475: PPUSH
11476: LD_INT 2
11478: PPUSH
11479: CALL_OW 275
11483: PUSH
11484: LD_VAR 0 14
11488: PUSH
11489: LD_INT 2
11491: ARRAY
11492: GREATEREQUAL
11493: AND
11494: PUSH
11495: LD_VAR 0 9
11499: PPUSH
11500: LD_INT 3
11502: PPUSH
11503: CALL_OW 275
11507: PUSH
11508: LD_VAR 0 14
11512: PUSH
11513: LD_INT 3
11515: ARRAY
11516: GREATEREQUAL
11517: AND
11518: IFFALSE 11530
// result := weapon ;
11520: LD_ADDR_VAR 0 3
11524: PUSH
11525: LD_VAR 0 18
11529: ST_TO_ADDR
// end ; end ;
11530: LD_VAR 0 3
11534: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
11535: LD_INT 0
11537: PPUSH
11538: PPUSH
// result := true ;
11539: LD_ADDR_VAR 0 3
11543: PUSH
11544: LD_INT 1
11546: ST_TO_ADDR
// if array1 = array2 then
11547: LD_VAR 0 1
11551: PUSH
11552: LD_VAR 0 2
11556: EQUAL
11557: IFFALSE 11617
// begin for i = 1 to array1 do
11559: LD_ADDR_VAR 0 4
11563: PUSH
11564: DOUBLE
11565: LD_INT 1
11567: DEC
11568: ST_TO_ADDR
11569: LD_VAR 0 1
11573: PUSH
11574: FOR_TO
11575: IFFALSE 11613
// if array1 [ i ] <> array2 [ i ] then
11577: LD_VAR 0 1
11581: PUSH
11582: LD_VAR 0 4
11586: ARRAY
11587: PUSH
11588: LD_VAR 0 2
11592: PUSH
11593: LD_VAR 0 4
11597: ARRAY
11598: NONEQUAL
11599: IFFALSE 11611
// begin result := false ;
11601: LD_ADDR_VAR 0 3
11605: PUSH
11606: LD_INT 0
11608: ST_TO_ADDR
// break ;
11609: GO 11613
// end ;
11611: GO 11574
11613: POP
11614: POP
// end else
11615: GO 11625
// result := false ;
11617: LD_ADDR_VAR 0 3
11621: PUSH
11622: LD_INT 0
11624: ST_TO_ADDR
// end ;
11625: LD_VAR 0 3
11629: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
11630: LD_INT 0
11632: PPUSH
11633: PPUSH
// if not array1 or not array2 then
11634: LD_VAR 0 1
11638: NOT
11639: PUSH
11640: LD_VAR 0 2
11644: NOT
11645: OR
11646: IFFALSE 11650
// exit ;
11648: GO 11714
// result := true ;
11650: LD_ADDR_VAR 0 3
11654: PUSH
11655: LD_INT 1
11657: ST_TO_ADDR
// for i = 1 to array1 do
11658: LD_ADDR_VAR 0 4
11662: PUSH
11663: DOUBLE
11664: LD_INT 1
11666: DEC
11667: ST_TO_ADDR
11668: LD_VAR 0 1
11672: PUSH
11673: FOR_TO
11674: IFFALSE 11712
// if array1 [ i ] <> array2 [ i ] then
11676: LD_VAR 0 1
11680: PUSH
11681: LD_VAR 0 4
11685: ARRAY
11686: PUSH
11687: LD_VAR 0 2
11691: PUSH
11692: LD_VAR 0 4
11696: ARRAY
11697: NONEQUAL
11698: IFFALSE 11710
// begin result := false ;
11700: LD_ADDR_VAR 0 3
11704: PUSH
11705: LD_INT 0
11707: ST_TO_ADDR
// break ;
11708: GO 11712
// end ;
11710: GO 11673
11712: POP
11713: POP
// end ;
11714: LD_VAR 0 3
11718: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
11719: LD_INT 0
11721: PPUSH
11722: PPUSH
11723: PPUSH
// pom := GetBase ( fac ) ;
11724: LD_ADDR_VAR 0 5
11728: PUSH
11729: LD_VAR 0 1
11733: PPUSH
11734: CALL_OW 274
11738: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
11739: LD_ADDR_VAR 0 4
11743: PUSH
11744: LD_VAR 0 2
11748: PUSH
11749: LD_INT 1
11751: ARRAY
11752: PPUSH
11753: LD_VAR 0 2
11757: PUSH
11758: LD_INT 2
11760: ARRAY
11761: PPUSH
11762: LD_VAR 0 2
11766: PUSH
11767: LD_INT 3
11769: ARRAY
11770: PPUSH
11771: LD_VAR 0 2
11775: PUSH
11776: LD_INT 4
11778: ARRAY
11779: PPUSH
11780: CALL_OW 449
11784: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11785: LD_ADDR_VAR 0 3
11789: PUSH
11790: LD_VAR 0 5
11794: PPUSH
11795: LD_INT 1
11797: PPUSH
11798: CALL_OW 275
11802: PUSH
11803: LD_VAR 0 4
11807: PUSH
11808: LD_INT 1
11810: ARRAY
11811: GREATEREQUAL
11812: PUSH
11813: LD_VAR 0 5
11817: PPUSH
11818: LD_INT 2
11820: PPUSH
11821: CALL_OW 275
11825: PUSH
11826: LD_VAR 0 4
11830: PUSH
11831: LD_INT 2
11833: ARRAY
11834: GREATEREQUAL
11835: AND
11836: PUSH
11837: LD_VAR 0 5
11841: PPUSH
11842: LD_INT 3
11844: PPUSH
11845: CALL_OW 275
11849: PUSH
11850: LD_VAR 0 4
11854: PUSH
11855: LD_INT 3
11857: ARRAY
11858: GREATEREQUAL
11859: AND
11860: ST_TO_ADDR
// end ;
11861: LD_VAR 0 3
11865: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
11866: LD_INT 0
11868: PPUSH
11869: PPUSH
11870: PPUSH
11871: PPUSH
// pom := GetBase ( building ) ;
11872: LD_ADDR_VAR 0 3
11876: PUSH
11877: LD_VAR 0 1
11881: PPUSH
11882: CALL_OW 274
11886: ST_TO_ADDR
// if not pom then
11887: LD_VAR 0 3
11891: NOT
11892: IFFALSE 11896
// exit ;
11894: GO 12066
// btype := GetBType ( building ) ;
11896: LD_ADDR_VAR 0 5
11900: PUSH
11901: LD_VAR 0 1
11905: PPUSH
11906: CALL_OW 266
11910: ST_TO_ADDR
// if btype = b_armoury then
11911: LD_VAR 0 5
11915: PUSH
11916: LD_INT 4
11918: EQUAL
11919: IFFALSE 11929
// btype := b_barracks ;
11921: LD_ADDR_VAR 0 5
11925: PUSH
11926: LD_INT 5
11928: ST_TO_ADDR
// if btype = b_depot then
11929: LD_VAR 0 5
11933: PUSH
11934: LD_INT 0
11936: EQUAL
11937: IFFALSE 11947
// btype := b_warehouse ;
11939: LD_ADDR_VAR 0 5
11943: PUSH
11944: LD_INT 1
11946: ST_TO_ADDR
// if btype = b_workshop then
11947: LD_VAR 0 5
11951: PUSH
11952: LD_INT 2
11954: EQUAL
11955: IFFALSE 11965
// btype := b_factory ;
11957: LD_ADDR_VAR 0 5
11961: PUSH
11962: LD_INT 3
11964: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
11965: LD_ADDR_VAR 0 4
11969: PUSH
11970: LD_VAR 0 5
11974: PPUSH
11975: LD_VAR 0 1
11979: PPUSH
11980: CALL_OW 248
11984: PPUSH
11985: CALL_OW 450
11989: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
11990: LD_ADDR_VAR 0 2
11994: PUSH
11995: LD_VAR 0 3
11999: PPUSH
12000: LD_INT 1
12002: PPUSH
12003: CALL_OW 275
12007: PUSH
12008: LD_VAR 0 4
12012: PUSH
12013: LD_INT 1
12015: ARRAY
12016: GREATEREQUAL
12017: PUSH
12018: LD_VAR 0 3
12022: PPUSH
12023: LD_INT 2
12025: PPUSH
12026: CALL_OW 275
12030: PUSH
12031: LD_VAR 0 4
12035: PUSH
12036: LD_INT 2
12038: ARRAY
12039: GREATEREQUAL
12040: AND
12041: PUSH
12042: LD_VAR 0 3
12046: PPUSH
12047: LD_INT 3
12049: PPUSH
12050: CALL_OW 275
12054: PUSH
12055: LD_VAR 0 4
12059: PUSH
12060: LD_INT 3
12062: ARRAY
12063: GREATEREQUAL
12064: AND
12065: ST_TO_ADDR
// end ;
12066: LD_VAR 0 2
12070: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12071: LD_INT 0
12073: PPUSH
12074: PPUSH
12075: PPUSH
// pom := GetBase ( building ) ;
12076: LD_ADDR_VAR 0 4
12080: PUSH
12081: LD_VAR 0 1
12085: PPUSH
12086: CALL_OW 274
12090: ST_TO_ADDR
// if not pom then
12091: LD_VAR 0 4
12095: NOT
12096: IFFALSE 12100
// exit ;
12098: GO 12201
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12100: LD_ADDR_VAR 0 5
12104: PUSH
12105: LD_VAR 0 2
12109: PPUSH
12110: LD_VAR 0 1
12114: PPUSH
12115: CALL_OW 248
12119: PPUSH
12120: CALL_OW 450
12124: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12125: LD_ADDR_VAR 0 3
12129: PUSH
12130: LD_VAR 0 4
12134: PPUSH
12135: LD_INT 1
12137: PPUSH
12138: CALL_OW 275
12142: PUSH
12143: LD_VAR 0 5
12147: PUSH
12148: LD_INT 1
12150: ARRAY
12151: GREATEREQUAL
12152: PUSH
12153: LD_VAR 0 4
12157: PPUSH
12158: LD_INT 2
12160: PPUSH
12161: CALL_OW 275
12165: PUSH
12166: LD_VAR 0 5
12170: PUSH
12171: LD_INT 2
12173: ARRAY
12174: GREATEREQUAL
12175: AND
12176: PUSH
12177: LD_VAR 0 4
12181: PPUSH
12182: LD_INT 3
12184: PPUSH
12185: CALL_OW 275
12189: PUSH
12190: LD_VAR 0 5
12194: PUSH
12195: LD_INT 3
12197: ARRAY
12198: GREATEREQUAL
12199: AND
12200: ST_TO_ADDR
// end ;
12201: LD_VAR 0 3
12205: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12206: LD_INT 0
12208: PPUSH
12209: PPUSH
12210: PPUSH
12211: PPUSH
12212: PPUSH
12213: PPUSH
12214: PPUSH
12215: PPUSH
12216: PPUSH
12217: PPUSH
12218: PPUSH
// result := false ;
12219: LD_ADDR_VAR 0 8
12223: PUSH
12224: LD_INT 0
12226: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12227: LD_VAR 0 5
12231: NOT
12232: PUSH
12233: LD_VAR 0 1
12237: NOT
12238: OR
12239: PUSH
12240: LD_VAR 0 2
12244: NOT
12245: OR
12246: PUSH
12247: LD_VAR 0 3
12251: NOT
12252: OR
12253: IFFALSE 12257
// exit ;
12255: GO 13071
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
12257: LD_ADDR_VAR 0 14
12261: PUSH
12262: LD_VAR 0 1
12266: PPUSH
12267: LD_VAR 0 2
12271: PPUSH
12272: LD_VAR 0 3
12276: PPUSH
12277: LD_VAR 0 4
12281: PPUSH
12282: LD_VAR 0 5
12286: PUSH
12287: LD_INT 1
12289: ARRAY
12290: PPUSH
12291: CALL_OW 248
12295: PPUSH
12296: LD_INT 0
12298: PPUSH
12299: CALL 14308 0 6
12303: ST_TO_ADDR
// if not hexes then
12304: LD_VAR 0 14
12308: NOT
12309: IFFALSE 12313
// exit ;
12311: GO 13071
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12313: LD_ADDR_VAR 0 17
12317: PUSH
12318: LD_VAR 0 5
12322: PPUSH
12323: LD_INT 22
12325: PUSH
12326: LD_VAR 0 13
12330: PPUSH
12331: CALL_OW 255
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: PUSH
12340: LD_INT 2
12342: PUSH
12343: LD_INT 30
12345: PUSH
12346: LD_INT 0
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PUSH
12353: LD_INT 30
12355: PUSH
12356: LD_INT 1
12358: PUSH
12359: EMPTY
12360: LIST
12361: LIST
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: LIST
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PPUSH
12372: CALL_OW 72
12376: ST_TO_ADDR
// for i = 1 to hexes do
12377: LD_ADDR_VAR 0 9
12381: PUSH
12382: DOUBLE
12383: LD_INT 1
12385: DEC
12386: ST_TO_ADDR
12387: LD_VAR 0 14
12391: PUSH
12392: FOR_TO
12393: IFFALSE 13069
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12395: LD_ADDR_VAR 0 13
12399: PUSH
12400: LD_VAR 0 14
12404: PUSH
12405: LD_VAR 0 9
12409: ARRAY
12410: PUSH
12411: LD_INT 1
12413: ARRAY
12414: PPUSH
12415: LD_VAR 0 14
12419: PUSH
12420: LD_VAR 0 9
12424: ARRAY
12425: PUSH
12426: LD_INT 2
12428: ARRAY
12429: PPUSH
12430: CALL_OW 428
12434: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
12435: LD_VAR 0 14
12439: PUSH
12440: LD_VAR 0 9
12444: ARRAY
12445: PUSH
12446: LD_INT 1
12448: ARRAY
12449: PPUSH
12450: LD_VAR 0 14
12454: PUSH
12455: LD_VAR 0 9
12459: ARRAY
12460: PUSH
12461: LD_INT 2
12463: ARRAY
12464: PPUSH
12465: CALL_OW 351
12469: PUSH
12470: LD_VAR 0 14
12474: PUSH
12475: LD_VAR 0 9
12479: ARRAY
12480: PUSH
12481: LD_INT 1
12483: ARRAY
12484: PPUSH
12485: LD_VAR 0 14
12489: PUSH
12490: LD_VAR 0 9
12494: ARRAY
12495: PUSH
12496: LD_INT 2
12498: ARRAY
12499: PPUSH
12500: CALL_OW 488
12504: NOT
12505: OR
12506: PUSH
12507: LD_VAR 0 13
12511: PPUSH
12512: CALL_OW 247
12516: PUSH
12517: LD_INT 3
12519: EQUAL
12520: OR
12521: IFFALSE 12527
// exit ;
12523: POP
12524: POP
12525: GO 13071
// if not tmp then
12527: LD_VAR 0 13
12531: NOT
12532: IFFALSE 12536
// continue ;
12534: GO 12392
// result := true ;
12536: LD_ADDR_VAR 0 8
12540: PUSH
12541: LD_INT 1
12543: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
12544: LD_VAR 0 6
12548: PUSH
12549: LD_VAR 0 13
12553: PPUSH
12554: CALL_OW 247
12558: PUSH
12559: LD_INT 2
12561: EQUAL
12562: AND
12563: PUSH
12564: LD_VAR 0 13
12568: PPUSH
12569: CALL_OW 263
12573: PUSH
12574: LD_INT 1
12576: EQUAL
12577: AND
12578: IFFALSE 12742
// begin if IsDrivenBy ( tmp ) then
12580: LD_VAR 0 13
12584: PPUSH
12585: CALL_OW 311
12589: IFFALSE 12593
// continue ;
12591: GO 12392
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
12593: LD_VAR 0 6
12597: PPUSH
12598: LD_INT 3
12600: PUSH
12601: LD_INT 60
12603: PUSH
12604: EMPTY
12605: LIST
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: PUSH
12611: LD_INT 3
12613: PUSH
12614: LD_INT 55
12616: PUSH
12617: EMPTY
12618: LIST
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: PPUSH
12628: CALL_OW 72
12632: IFFALSE 12740
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
12634: LD_ADDR_VAR 0 18
12638: PUSH
12639: LD_VAR 0 6
12643: PPUSH
12644: LD_INT 3
12646: PUSH
12647: LD_INT 60
12649: PUSH
12650: EMPTY
12651: LIST
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: LD_INT 3
12659: PUSH
12660: LD_INT 55
12662: PUSH
12663: EMPTY
12664: LIST
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: PUSH
12670: EMPTY
12671: LIST
12672: LIST
12673: PPUSH
12674: CALL_OW 72
12678: PUSH
12679: LD_INT 1
12681: ARRAY
12682: ST_TO_ADDR
// if IsInUnit ( driver ) then
12683: LD_VAR 0 18
12687: PPUSH
12688: CALL_OW 310
12692: IFFALSE 12703
// ComExit ( driver ) ;
12694: LD_VAR 0 18
12698: PPUSH
12699: CALL 37492 0 1
// AddComEnterUnit ( driver , tmp ) ;
12703: LD_VAR 0 18
12707: PPUSH
12708: LD_VAR 0 13
12712: PPUSH
12713: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
12717: LD_VAR 0 18
12721: PPUSH
12722: LD_VAR 0 7
12726: PPUSH
12727: CALL_OW 173
// AddComExitVehicle ( driver ) ;
12731: LD_VAR 0 18
12735: PPUSH
12736: CALL_OW 181
// end ; continue ;
12740: GO 12392
// end ; if not cleaners or not tmp in cleaners then
12742: LD_VAR 0 6
12746: NOT
12747: PUSH
12748: LD_VAR 0 13
12752: PUSH
12753: LD_VAR 0 6
12757: IN
12758: NOT
12759: OR
12760: IFFALSE 13067
// begin if dep then
12762: LD_VAR 0 17
12766: IFFALSE 12902
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
12768: LD_ADDR_VAR 0 16
12772: PUSH
12773: LD_VAR 0 17
12777: PUSH
12778: LD_INT 1
12780: ARRAY
12781: PPUSH
12782: CALL_OW 250
12786: PPUSH
12787: LD_VAR 0 17
12791: PUSH
12792: LD_INT 1
12794: ARRAY
12795: PPUSH
12796: CALL_OW 254
12800: PPUSH
12801: LD_INT 5
12803: PPUSH
12804: CALL_OW 272
12808: PUSH
12809: LD_VAR 0 17
12813: PUSH
12814: LD_INT 1
12816: ARRAY
12817: PPUSH
12818: CALL_OW 251
12822: PPUSH
12823: LD_VAR 0 17
12827: PUSH
12828: LD_INT 1
12830: ARRAY
12831: PPUSH
12832: CALL_OW 254
12836: PPUSH
12837: LD_INT 5
12839: PPUSH
12840: CALL_OW 273
12844: PUSH
12845: EMPTY
12846: LIST
12847: LIST
12848: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
12849: LD_VAR 0 16
12853: PUSH
12854: LD_INT 1
12856: ARRAY
12857: PPUSH
12858: LD_VAR 0 16
12862: PUSH
12863: LD_INT 2
12865: ARRAY
12866: PPUSH
12867: CALL_OW 488
12871: IFFALSE 12902
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
12873: LD_VAR 0 13
12877: PPUSH
12878: LD_VAR 0 16
12882: PUSH
12883: LD_INT 1
12885: ARRAY
12886: PPUSH
12887: LD_VAR 0 16
12891: PUSH
12892: LD_INT 2
12894: ARRAY
12895: PPUSH
12896: CALL_OW 111
// continue ;
12900: GO 12392
// end ; end ; r := GetDir ( tmp ) ;
12902: LD_ADDR_VAR 0 15
12906: PUSH
12907: LD_VAR 0 13
12911: PPUSH
12912: CALL_OW 254
12916: ST_TO_ADDR
// if r = 5 then
12917: LD_VAR 0 15
12921: PUSH
12922: LD_INT 5
12924: EQUAL
12925: IFFALSE 12935
// r := 0 ;
12927: LD_ADDR_VAR 0 15
12931: PUSH
12932: LD_INT 0
12934: ST_TO_ADDR
// for j = r to 5 do
12935: LD_ADDR_VAR 0 10
12939: PUSH
12940: DOUBLE
12941: LD_VAR 0 15
12945: DEC
12946: ST_TO_ADDR
12947: LD_INT 5
12949: PUSH
12950: FOR_TO
12951: IFFALSE 13065
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
12953: LD_ADDR_VAR 0 11
12957: PUSH
12958: LD_VAR 0 13
12962: PPUSH
12963: CALL_OW 250
12967: PPUSH
12968: LD_VAR 0 10
12972: PPUSH
12973: LD_INT 2
12975: PPUSH
12976: CALL_OW 272
12980: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
12981: LD_ADDR_VAR 0 12
12985: PUSH
12986: LD_VAR 0 13
12990: PPUSH
12991: CALL_OW 251
12995: PPUSH
12996: LD_VAR 0 10
13000: PPUSH
13001: LD_INT 2
13003: PPUSH
13004: CALL_OW 273
13008: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13009: LD_VAR 0 11
13013: PPUSH
13014: LD_VAR 0 12
13018: PPUSH
13019: CALL_OW 488
13023: PUSH
13024: LD_VAR 0 11
13028: PPUSH
13029: LD_VAR 0 12
13033: PPUSH
13034: CALL_OW 428
13038: NOT
13039: AND
13040: IFFALSE 13063
// begin ComMoveXY ( tmp , _x , _y ) ;
13042: LD_VAR 0 13
13046: PPUSH
13047: LD_VAR 0 11
13051: PPUSH
13052: LD_VAR 0 12
13056: PPUSH
13057: CALL_OW 111
// break ;
13061: GO 13065
// end ; end ;
13063: GO 12950
13065: POP
13066: POP
// end ; end ;
13067: GO 12392
13069: POP
13070: POP
// end ;
13071: LD_VAR 0 8
13075: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13076: LD_INT 0
13078: PPUSH
// result := true ;
13079: LD_ADDR_VAR 0 3
13083: PUSH
13084: LD_INT 1
13086: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
13087: LD_VAR 0 2
13091: PUSH
13092: LD_INT 24
13094: DOUBLE
13095: EQUAL
13096: IFTRUE 13106
13098: LD_INT 33
13100: DOUBLE
13101: EQUAL
13102: IFTRUE 13106
13104: GO 13131
13106: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
13107: LD_ADDR_VAR 0 3
13111: PUSH
13112: LD_INT 32
13114: PPUSH
13115: LD_VAR 0 1
13119: PPUSH
13120: CALL_OW 321
13124: PUSH
13125: LD_INT 2
13127: EQUAL
13128: ST_TO_ADDR
13129: GO 13451
13131: LD_INT 20
13133: DOUBLE
13134: EQUAL
13135: IFTRUE 13139
13137: GO 13164
13139: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13140: LD_ADDR_VAR 0 3
13144: PUSH
13145: LD_INT 6
13147: PPUSH
13148: LD_VAR 0 1
13152: PPUSH
13153: CALL_OW 321
13157: PUSH
13158: LD_INT 2
13160: EQUAL
13161: ST_TO_ADDR
13162: GO 13451
13164: LD_INT 22
13166: DOUBLE
13167: EQUAL
13168: IFTRUE 13178
13170: LD_INT 36
13172: DOUBLE
13173: EQUAL
13174: IFTRUE 13178
13176: GO 13203
13178: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
13179: LD_ADDR_VAR 0 3
13183: PUSH
13184: LD_INT 15
13186: PPUSH
13187: LD_VAR 0 1
13191: PPUSH
13192: CALL_OW 321
13196: PUSH
13197: LD_INT 2
13199: EQUAL
13200: ST_TO_ADDR
13201: GO 13451
13203: LD_INT 30
13205: DOUBLE
13206: EQUAL
13207: IFTRUE 13211
13209: GO 13236
13211: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
13212: LD_ADDR_VAR 0 3
13216: PUSH
13217: LD_INT 20
13219: PPUSH
13220: LD_VAR 0 1
13224: PPUSH
13225: CALL_OW 321
13229: PUSH
13230: LD_INT 2
13232: EQUAL
13233: ST_TO_ADDR
13234: GO 13451
13236: LD_INT 28
13238: DOUBLE
13239: EQUAL
13240: IFTRUE 13250
13242: LD_INT 21
13244: DOUBLE
13245: EQUAL
13246: IFTRUE 13250
13248: GO 13275
13250: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
13251: LD_ADDR_VAR 0 3
13255: PUSH
13256: LD_INT 21
13258: PPUSH
13259: LD_VAR 0 1
13263: PPUSH
13264: CALL_OW 321
13268: PUSH
13269: LD_INT 2
13271: EQUAL
13272: ST_TO_ADDR
13273: GO 13451
13275: LD_INT 16
13277: DOUBLE
13278: EQUAL
13279: IFTRUE 13283
13281: GO 13310
13283: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
13284: LD_ADDR_VAR 0 3
13288: PUSH
13289: LD_EXP 14
13293: PPUSH
13294: LD_VAR 0 1
13298: PPUSH
13299: CALL_OW 321
13303: PUSH
13304: LD_INT 2
13306: EQUAL
13307: ST_TO_ADDR
13308: GO 13451
13310: LD_INT 19
13312: DOUBLE
13313: EQUAL
13314: IFTRUE 13324
13316: LD_INT 23
13318: DOUBLE
13319: EQUAL
13320: IFTRUE 13324
13322: GO 13351
13324: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
13325: LD_ADDR_VAR 0 3
13329: PUSH
13330: LD_EXP 13
13334: PPUSH
13335: LD_VAR 0 1
13339: PPUSH
13340: CALL_OW 321
13344: PUSH
13345: LD_INT 2
13347: EQUAL
13348: ST_TO_ADDR
13349: GO 13451
13351: LD_INT 17
13353: DOUBLE
13354: EQUAL
13355: IFTRUE 13359
13357: GO 13384
13359: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
13360: LD_ADDR_VAR 0 3
13364: PUSH
13365: LD_INT 39
13367: PPUSH
13368: LD_VAR 0 1
13372: PPUSH
13373: CALL_OW 321
13377: PUSH
13378: LD_INT 2
13380: EQUAL
13381: ST_TO_ADDR
13382: GO 13451
13384: LD_INT 18
13386: DOUBLE
13387: EQUAL
13388: IFTRUE 13392
13390: GO 13417
13392: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
13393: LD_ADDR_VAR 0 3
13397: PUSH
13398: LD_INT 40
13400: PPUSH
13401: LD_VAR 0 1
13405: PPUSH
13406: CALL_OW 321
13410: PUSH
13411: LD_INT 2
13413: EQUAL
13414: ST_TO_ADDR
13415: GO 13451
13417: LD_INT 27
13419: DOUBLE
13420: EQUAL
13421: IFTRUE 13425
13423: GO 13450
13425: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
13426: LD_ADDR_VAR 0 3
13430: PUSH
13431: LD_INT 35
13433: PPUSH
13434: LD_VAR 0 1
13438: PPUSH
13439: CALL_OW 321
13443: PUSH
13444: LD_INT 2
13446: EQUAL
13447: ST_TO_ADDR
13448: GO 13451
13450: POP
// end ;
13451: LD_VAR 0 3
13455: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
13456: LD_INT 0
13458: PPUSH
13459: PPUSH
13460: PPUSH
13461: PPUSH
13462: PPUSH
13463: PPUSH
13464: PPUSH
13465: PPUSH
13466: PPUSH
13467: PPUSH
13468: PPUSH
// result := false ;
13469: LD_ADDR_VAR 0 6
13473: PUSH
13474: LD_INT 0
13476: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
13477: LD_VAR 0 1
13481: NOT
13482: PUSH
13483: LD_VAR 0 1
13487: PPUSH
13488: CALL_OW 266
13492: PUSH
13493: LD_INT 0
13495: PUSH
13496: LD_INT 1
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: IN
13503: NOT
13504: OR
13505: PUSH
13506: LD_VAR 0 2
13510: NOT
13511: OR
13512: PUSH
13513: LD_VAR 0 5
13517: PUSH
13518: LD_INT 0
13520: PUSH
13521: LD_INT 1
13523: PUSH
13524: LD_INT 2
13526: PUSH
13527: LD_INT 3
13529: PUSH
13530: LD_INT 4
13532: PUSH
13533: LD_INT 5
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: IN
13544: NOT
13545: OR
13546: PUSH
13547: LD_VAR 0 3
13551: PPUSH
13552: LD_VAR 0 4
13556: PPUSH
13557: CALL_OW 488
13561: NOT
13562: OR
13563: IFFALSE 13567
// exit ;
13565: GO 14303
// side := GetSide ( depot ) ;
13567: LD_ADDR_VAR 0 9
13571: PUSH
13572: LD_VAR 0 1
13576: PPUSH
13577: CALL_OW 255
13581: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
13582: LD_VAR 0 9
13586: PPUSH
13587: LD_VAR 0 2
13591: PPUSH
13592: CALL 13076 0 2
13596: NOT
13597: IFFALSE 13601
// exit ;
13599: GO 14303
// pom := GetBase ( depot ) ;
13601: LD_ADDR_VAR 0 10
13605: PUSH
13606: LD_VAR 0 1
13610: PPUSH
13611: CALL_OW 274
13615: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
13616: LD_ADDR_VAR 0 11
13620: PUSH
13621: LD_VAR 0 2
13625: PPUSH
13626: LD_VAR 0 1
13630: PPUSH
13631: CALL_OW 248
13635: PPUSH
13636: CALL_OW 450
13640: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
13641: LD_VAR 0 10
13645: PPUSH
13646: LD_INT 1
13648: PPUSH
13649: CALL_OW 275
13653: PUSH
13654: LD_VAR 0 11
13658: PUSH
13659: LD_INT 1
13661: ARRAY
13662: GREATEREQUAL
13663: PUSH
13664: LD_VAR 0 10
13668: PPUSH
13669: LD_INT 2
13671: PPUSH
13672: CALL_OW 275
13676: PUSH
13677: LD_VAR 0 11
13681: PUSH
13682: LD_INT 2
13684: ARRAY
13685: GREATEREQUAL
13686: AND
13687: PUSH
13688: LD_VAR 0 10
13692: PPUSH
13693: LD_INT 3
13695: PPUSH
13696: CALL_OW 275
13700: PUSH
13701: LD_VAR 0 11
13705: PUSH
13706: LD_INT 3
13708: ARRAY
13709: GREATEREQUAL
13710: AND
13711: NOT
13712: IFFALSE 13716
// exit ;
13714: GO 14303
// if GetBType ( depot ) = b_depot then
13716: LD_VAR 0 1
13720: PPUSH
13721: CALL_OW 266
13725: PUSH
13726: LD_INT 0
13728: EQUAL
13729: IFFALSE 13741
// dist := 28 else
13731: LD_ADDR_VAR 0 14
13735: PUSH
13736: LD_INT 28
13738: ST_TO_ADDR
13739: GO 13749
// dist := 36 ;
13741: LD_ADDR_VAR 0 14
13745: PUSH
13746: LD_INT 36
13748: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
13749: LD_VAR 0 1
13753: PPUSH
13754: LD_VAR 0 3
13758: PPUSH
13759: LD_VAR 0 4
13763: PPUSH
13764: CALL_OW 297
13768: PUSH
13769: LD_VAR 0 14
13773: GREATER
13774: IFFALSE 13778
// exit ;
13776: GO 14303
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
13778: LD_ADDR_VAR 0 12
13782: PUSH
13783: LD_VAR 0 2
13787: PPUSH
13788: LD_VAR 0 3
13792: PPUSH
13793: LD_VAR 0 4
13797: PPUSH
13798: LD_VAR 0 5
13802: PPUSH
13803: LD_VAR 0 1
13807: PPUSH
13808: CALL_OW 248
13812: PPUSH
13813: LD_INT 0
13815: PPUSH
13816: CALL 14308 0 6
13820: ST_TO_ADDR
// if not hexes then
13821: LD_VAR 0 12
13825: NOT
13826: IFFALSE 13830
// exit ;
13828: GO 14303
// hex := GetHexInfo ( x , y ) ;
13830: LD_ADDR_VAR 0 15
13834: PUSH
13835: LD_VAR 0 3
13839: PPUSH
13840: LD_VAR 0 4
13844: PPUSH
13845: CALL_OW 546
13849: ST_TO_ADDR
// if hex [ 1 ] then
13850: LD_VAR 0 15
13854: PUSH
13855: LD_INT 1
13857: ARRAY
13858: IFFALSE 13862
// exit ;
13860: GO 14303
// height := hex [ 2 ] ;
13862: LD_ADDR_VAR 0 13
13866: PUSH
13867: LD_VAR 0 15
13871: PUSH
13872: LD_INT 2
13874: ARRAY
13875: ST_TO_ADDR
// for i = 1 to hexes do
13876: LD_ADDR_VAR 0 7
13880: PUSH
13881: DOUBLE
13882: LD_INT 1
13884: DEC
13885: ST_TO_ADDR
13886: LD_VAR 0 12
13890: PUSH
13891: FOR_TO
13892: IFFALSE 14222
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
13894: LD_VAR 0 12
13898: PUSH
13899: LD_VAR 0 7
13903: ARRAY
13904: PUSH
13905: LD_INT 1
13907: ARRAY
13908: PPUSH
13909: LD_VAR 0 12
13913: PUSH
13914: LD_VAR 0 7
13918: ARRAY
13919: PUSH
13920: LD_INT 2
13922: ARRAY
13923: PPUSH
13924: CALL_OW 488
13928: NOT
13929: PUSH
13930: LD_VAR 0 12
13934: PUSH
13935: LD_VAR 0 7
13939: ARRAY
13940: PUSH
13941: LD_INT 1
13943: ARRAY
13944: PPUSH
13945: LD_VAR 0 12
13949: PUSH
13950: LD_VAR 0 7
13954: ARRAY
13955: PUSH
13956: LD_INT 2
13958: ARRAY
13959: PPUSH
13960: CALL_OW 428
13964: PUSH
13965: LD_INT 0
13967: GREATER
13968: OR
13969: PUSH
13970: LD_VAR 0 12
13974: PUSH
13975: LD_VAR 0 7
13979: ARRAY
13980: PUSH
13981: LD_INT 1
13983: ARRAY
13984: PPUSH
13985: LD_VAR 0 12
13989: PUSH
13990: LD_VAR 0 7
13994: ARRAY
13995: PUSH
13996: LD_INT 2
13998: ARRAY
13999: PPUSH
14000: CALL_OW 351
14004: OR
14005: IFFALSE 14011
// exit ;
14007: POP
14008: POP
14009: GO 14303
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14011: LD_ADDR_VAR 0 8
14015: PUSH
14016: LD_VAR 0 12
14020: PUSH
14021: LD_VAR 0 7
14025: ARRAY
14026: PUSH
14027: LD_INT 1
14029: ARRAY
14030: PPUSH
14031: LD_VAR 0 12
14035: PUSH
14036: LD_VAR 0 7
14040: ARRAY
14041: PUSH
14042: LD_INT 2
14044: ARRAY
14045: PPUSH
14046: CALL_OW 546
14050: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14051: LD_VAR 0 8
14055: PUSH
14056: LD_INT 1
14058: ARRAY
14059: PUSH
14060: LD_VAR 0 8
14064: PUSH
14065: LD_INT 2
14067: ARRAY
14068: PUSH
14069: LD_VAR 0 13
14073: PUSH
14074: LD_INT 2
14076: PLUS
14077: GREATER
14078: OR
14079: PUSH
14080: LD_VAR 0 8
14084: PUSH
14085: LD_INT 2
14087: ARRAY
14088: PUSH
14089: LD_VAR 0 13
14093: PUSH
14094: LD_INT 2
14096: MINUS
14097: LESS
14098: OR
14099: PUSH
14100: LD_VAR 0 8
14104: PUSH
14105: LD_INT 3
14107: ARRAY
14108: PUSH
14109: LD_INT 0
14111: PUSH
14112: LD_INT 8
14114: PUSH
14115: LD_INT 9
14117: PUSH
14118: LD_INT 10
14120: PUSH
14121: LD_INT 11
14123: PUSH
14124: LD_INT 12
14126: PUSH
14127: LD_INT 13
14129: PUSH
14130: LD_INT 16
14132: PUSH
14133: LD_INT 17
14135: PUSH
14136: LD_INT 18
14138: PUSH
14139: LD_INT 19
14141: PUSH
14142: LD_INT 20
14144: PUSH
14145: LD_INT 21
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: IN
14163: NOT
14164: OR
14165: PUSH
14166: LD_VAR 0 8
14170: PUSH
14171: LD_INT 5
14173: ARRAY
14174: NOT
14175: OR
14176: PUSH
14177: LD_VAR 0 8
14181: PUSH
14182: LD_INT 6
14184: ARRAY
14185: PUSH
14186: LD_INT 1
14188: PUSH
14189: LD_INT 2
14191: PUSH
14192: LD_INT 7
14194: PUSH
14195: LD_INT 9
14197: PUSH
14198: LD_INT 10
14200: PUSH
14201: LD_INT 11
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: IN
14212: NOT
14213: OR
14214: IFFALSE 14220
// exit ;
14216: POP
14217: POP
14218: GO 14303
// end ;
14220: GO 13891
14222: POP
14223: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
14224: LD_VAR 0 9
14228: PPUSH
14229: LD_VAR 0 3
14233: PPUSH
14234: LD_VAR 0 4
14238: PPUSH
14239: LD_INT 20
14241: PPUSH
14242: CALL 6249 0 4
14246: PUSH
14247: LD_INT 4
14249: ARRAY
14250: IFFALSE 14254
// exit ;
14252: GO 14303
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
14254: LD_VAR 0 2
14258: PUSH
14259: LD_INT 29
14261: PUSH
14262: LD_INT 30
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: IN
14269: PUSH
14270: LD_VAR 0 3
14274: PPUSH
14275: LD_VAR 0 4
14279: PPUSH
14280: LD_VAR 0 9
14284: PPUSH
14285: CALL_OW 440
14289: NOT
14290: AND
14291: IFFALSE 14295
// exit ;
14293: GO 14303
// result := true ;
14295: LD_ADDR_VAR 0 6
14299: PUSH
14300: LD_INT 1
14302: ST_TO_ADDR
// end ;
14303: LD_VAR 0 6
14307: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
14308: LD_INT 0
14310: PPUSH
14311: PPUSH
14312: PPUSH
14313: PPUSH
14314: PPUSH
14315: PPUSH
14316: PPUSH
14317: PPUSH
14318: PPUSH
14319: PPUSH
14320: PPUSH
14321: PPUSH
14322: PPUSH
14323: PPUSH
14324: PPUSH
14325: PPUSH
14326: PPUSH
14327: PPUSH
14328: PPUSH
14329: PPUSH
14330: PPUSH
14331: PPUSH
14332: PPUSH
14333: PPUSH
14334: PPUSH
14335: PPUSH
14336: PPUSH
14337: PPUSH
14338: PPUSH
14339: PPUSH
14340: PPUSH
14341: PPUSH
14342: PPUSH
14343: PPUSH
14344: PPUSH
14345: PPUSH
14346: PPUSH
14347: PPUSH
14348: PPUSH
14349: PPUSH
14350: PPUSH
14351: PPUSH
14352: PPUSH
14353: PPUSH
14354: PPUSH
14355: PPUSH
14356: PPUSH
14357: PPUSH
14358: PPUSH
14359: PPUSH
14360: PPUSH
14361: PPUSH
14362: PPUSH
14363: PPUSH
14364: PPUSH
14365: PPUSH
14366: PPUSH
14367: PPUSH
// result = [ ] ;
14368: LD_ADDR_VAR 0 7
14372: PUSH
14373: EMPTY
14374: ST_TO_ADDR
// temp_list = [ ] ;
14375: LD_ADDR_VAR 0 9
14379: PUSH
14380: EMPTY
14381: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
14382: LD_VAR 0 4
14386: PUSH
14387: LD_INT 0
14389: PUSH
14390: LD_INT 1
14392: PUSH
14393: LD_INT 2
14395: PUSH
14396: LD_INT 3
14398: PUSH
14399: LD_INT 4
14401: PUSH
14402: LD_INT 5
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: IN
14413: NOT
14414: PUSH
14415: LD_VAR 0 1
14419: PUSH
14420: LD_INT 0
14422: PUSH
14423: LD_INT 1
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: IN
14430: PUSH
14431: LD_VAR 0 5
14435: PUSH
14436: LD_INT 1
14438: PUSH
14439: LD_INT 2
14441: PUSH
14442: LD_INT 3
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: LIST
14449: IN
14450: NOT
14451: AND
14452: OR
14453: IFFALSE 14457
// exit ;
14455: GO 32848
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
14457: LD_VAR 0 1
14461: PUSH
14462: LD_INT 6
14464: PUSH
14465: LD_INT 7
14467: PUSH
14468: LD_INT 8
14470: PUSH
14471: LD_INT 13
14473: PUSH
14474: LD_INT 12
14476: PUSH
14477: LD_INT 15
14479: PUSH
14480: LD_INT 11
14482: PUSH
14483: LD_INT 14
14485: PUSH
14486: LD_INT 10
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: IN
14500: IFFALSE 14510
// btype = b_lab ;
14502: LD_ADDR_VAR 0 1
14506: PUSH
14507: LD_INT 6
14509: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
14510: LD_VAR 0 6
14514: PUSH
14515: LD_INT 0
14517: PUSH
14518: LD_INT 1
14520: PUSH
14521: LD_INT 2
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: LIST
14528: IN
14529: NOT
14530: PUSH
14531: LD_VAR 0 1
14535: PUSH
14536: LD_INT 0
14538: PUSH
14539: LD_INT 1
14541: PUSH
14542: LD_INT 2
14544: PUSH
14545: LD_INT 3
14547: PUSH
14548: LD_INT 6
14550: PUSH
14551: LD_INT 36
14553: PUSH
14554: LD_INT 4
14556: PUSH
14557: LD_INT 5
14559: PUSH
14560: LD_INT 31
14562: PUSH
14563: LD_INT 32
14565: PUSH
14566: LD_INT 33
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: IN
14582: NOT
14583: PUSH
14584: LD_VAR 0 6
14588: PUSH
14589: LD_INT 1
14591: EQUAL
14592: AND
14593: OR
14594: PUSH
14595: LD_VAR 0 1
14599: PUSH
14600: LD_INT 2
14602: PUSH
14603: LD_INT 3
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: IN
14610: NOT
14611: PUSH
14612: LD_VAR 0 6
14616: PUSH
14617: LD_INT 2
14619: EQUAL
14620: AND
14621: OR
14622: IFFALSE 14632
// mode = 0 ;
14624: LD_ADDR_VAR 0 6
14628: PUSH
14629: LD_INT 0
14631: ST_TO_ADDR
// case mode of 0 :
14632: LD_VAR 0 6
14636: PUSH
14637: LD_INT 0
14639: DOUBLE
14640: EQUAL
14641: IFTRUE 14645
14643: GO 26098
14645: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
14646: LD_ADDR_VAR 0 11
14650: PUSH
14651: LD_INT 0
14653: PUSH
14654: LD_INT 0
14656: PUSH
14657: EMPTY
14658: LIST
14659: LIST
14660: PUSH
14661: LD_INT 0
14663: PUSH
14664: LD_INT 1
14666: NEG
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: PUSH
14672: LD_INT 1
14674: PUSH
14675: LD_INT 0
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: PUSH
14682: LD_INT 1
14684: PUSH
14685: LD_INT 1
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: PUSH
14692: LD_INT 0
14694: PUSH
14695: LD_INT 1
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PUSH
14702: LD_INT 1
14704: NEG
14705: PUSH
14706: LD_INT 0
14708: PUSH
14709: EMPTY
14710: LIST
14711: LIST
14712: PUSH
14713: LD_INT 1
14715: NEG
14716: PUSH
14717: LD_INT 1
14719: NEG
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 1
14727: NEG
14728: PUSH
14729: LD_INT 2
14731: NEG
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: PUSH
14737: LD_INT 0
14739: PUSH
14740: LD_INT 2
14742: NEG
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PUSH
14748: LD_INT 1
14750: PUSH
14751: LD_INT 1
14753: NEG
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 1
14761: PUSH
14762: LD_INT 2
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: LD_INT 0
14771: PUSH
14772: LD_INT 2
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: PUSH
14779: LD_INT 1
14781: NEG
14782: PUSH
14783: LD_INT 1
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: PUSH
14790: LD_INT 1
14792: PUSH
14793: LD_INT 3
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: LD_INT 0
14802: PUSH
14803: LD_INT 3
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: LD_INT 1
14812: NEG
14813: PUSH
14814: LD_INT 2
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
14839: LD_ADDR_VAR 0 12
14843: PUSH
14844: LD_INT 0
14846: PUSH
14847: LD_INT 0
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: PUSH
14854: LD_INT 0
14856: PUSH
14857: LD_INT 1
14859: NEG
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PUSH
14865: LD_INT 1
14867: PUSH
14868: LD_INT 0
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: LD_INT 1
14877: PUSH
14878: LD_INT 1
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PUSH
14885: LD_INT 0
14887: PUSH
14888: LD_INT 1
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: PUSH
14895: LD_INT 1
14897: NEG
14898: PUSH
14899: LD_INT 0
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: PUSH
14906: LD_INT 1
14908: NEG
14909: PUSH
14910: LD_INT 1
14912: NEG
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: PUSH
14918: LD_INT 1
14920: PUSH
14921: LD_INT 1
14923: NEG
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: PUSH
14929: LD_INT 2
14931: PUSH
14932: LD_INT 0
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: PUSH
14939: LD_INT 2
14941: PUSH
14942: LD_INT 1
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: PUSH
14949: LD_INT 1
14951: NEG
14952: PUSH
14953: LD_INT 1
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: PUSH
14960: LD_INT 2
14962: NEG
14963: PUSH
14964: LD_INT 0
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: PUSH
14971: LD_INT 2
14973: NEG
14974: PUSH
14975: LD_INT 1
14977: NEG
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: PUSH
14983: LD_INT 2
14985: NEG
14986: PUSH
14987: LD_INT 1
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PUSH
14994: LD_INT 3
14996: NEG
14997: PUSH
14998: LD_INT 0
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: LD_INT 3
15007: NEG
15008: PUSH
15009: LD_INT 1
15011: NEG
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15035: LD_ADDR_VAR 0 13
15039: PUSH
15040: LD_INT 0
15042: PUSH
15043: LD_INT 0
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: PUSH
15050: LD_INT 0
15052: PUSH
15053: LD_INT 1
15055: NEG
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: PUSH
15061: LD_INT 1
15063: PUSH
15064: LD_INT 0
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: PUSH
15071: LD_INT 1
15073: PUSH
15074: LD_INT 1
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: LD_INT 0
15083: PUSH
15084: LD_INT 1
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: LD_INT 1
15093: NEG
15094: PUSH
15095: LD_INT 0
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: PUSH
15102: LD_INT 1
15104: NEG
15105: PUSH
15106: LD_INT 1
15108: NEG
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: LD_INT 1
15116: NEG
15117: PUSH
15118: LD_INT 2
15120: NEG
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: PUSH
15126: LD_INT 2
15128: PUSH
15129: LD_INT 1
15131: PUSH
15132: EMPTY
15133: LIST
15134: LIST
15135: PUSH
15136: LD_INT 2
15138: PUSH
15139: LD_INT 2
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: PUSH
15146: LD_INT 1
15148: PUSH
15149: LD_INT 2
15151: PUSH
15152: EMPTY
15153: LIST
15154: LIST
15155: PUSH
15156: LD_INT 2
15158: NEG
15159: PUSH
15160: LD_INT 1
15162: NEG
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: PUSH
15168: LD_INT 2
15170: NEG
15171: PUSH
15172: LD_INT 2
15174: NEG
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: PUSH
15180: LD_INT 2
15182: NEG
15183: PUSH
15184: LD_INT 3
15186: NEG
15187: PUSH
15188: EMPTY
15189: LIST
15190: LIST
15191: PUSH
15192: LD_INT 3
15194: NEG
15195: PUSH
15196: LD_INT 2
15198: NEG
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PUSH
15204: LD_INT 3
15206: NEG
15207: PUSH
15208: LD_INT 3
15210: NEG
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
15234: LD_ADDR_VAR 0 14
15238: PUSH
15239: LD_INT 0
15241: PUSH
15242: LD_INT 0
15244: PUSH
15245: EMPTY
15246: LIST
15247: LIST
15248: PUSH
15249: LD_INT 0
15251: PUSH
15252: LD_INT 1
15254: NEG
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: PUSH
15260: LD_INT 1
15262: PUSH
15263: LD_INT 0
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: PUSH
15270: LD_INT 1
15272: PUSH
15273: LD_INT 1
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PUSH
15280: LD_INT 0
15282: PUSH
15283: LD_INT 1
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: PUSH
15290: LD_INT 1
15292: NEG
15293: PUSH
15294: LD_INT 0
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: PUSH
15301: LD_INT 1
15303: NEG
15304: PUSH
15305: LD_INT 1
15307: NEG
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: PUSH
15313: LD_INT 1
15315: NEG
15316: PUSH
15317: LD_INT 2
15319: NEG
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: LD_INT 0
15327: PUSH
15328: LD_INT 2
15330: NEG
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: PUSH
15336: LD_INT 1
15338: PUSH
15339: LD_INT 1
15341: NEG
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: LD_INT 1
15349: PUSH
15350: LD_INT 2
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: LD_INT 0
15359: PUSH
15360: LD_INT 2
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: LD_INT 1
15369: NEG
15370: PUSH
15371: LD_INT 1
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: LD_INT 1
15380: NEG
15381: PUSH
15382: LD_INT 3
15384: NEG
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: PUSH
15390: LD_INT 0
15392: PUSH
15393: LD_INT 3
15395: NEG
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: LD_INT 1
15403: PUSH
15404: LD_INT 2
15406: NEG
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
15430: LD_ADDR_VAR 0 15
15434: PUSH
15435: LD_INT 0
15437: PUSH
15438: LD_INT 0
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: PUSH
15445: LD_INT 0
15447: PUSH
15448: LD_INT 1
15450: NEG
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PUSH
15456: LD_INT 1
15458: PUSH
15459: LD_INT 0
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: LD_INT 1
15468: PUSH
15469: LD_INT 1
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: PUSH
15476: LD_INT 0
15478: PUSH
15479: LD_INT 1
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: PUSH
15486: LD_INT 1
15488: NEG
15489: PUSH
15490: LD_INT 0
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: LD_INT 1
15499: NEG
15500: PUSH
15501: LD_INT 1
15503: NEG
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: PUSH
15509: LD_INT 1
15511: PUSH
15512: LD_INT 1
15514: NEG
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PUSH
15520: LD_INT 2
15522: PUSH
15523: LD_INT 0
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: PUSH
15530: LD_INT 2
15532: PUSH
15533: LD_INT 1
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: PUSH
15540: LD_INT 1
15542: NEG
15543: PUSH
15544: LD_INT 1
15546: PUSH
15547: EMPTY
15548: LIST
15549: LIST
15550: PUSH
15551: LD_INT 2
15553: NEG
15554: PUSH
15555: LD_INT 0
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PUSH
15562: LD_INT 2
15564: NEG
15565: PUSH
15566: LD_INT 1
15568: NEG
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: PUSH
15574: LD_INT 2
15576: PUSH
15577: LD_INT 1
15579: NEG
15580: PUSH
15581: EMPTY
15582: LIST
15583: LIST
15584: PUSH
15585: LD_INT 3
15587: PUSH
15588: LD_INT 0
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: PUSH
15595: LD_INT 3
15597: PUSH
15598: LD_INT 1
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
15623: LD_ADDR_VAR 0 16
15627: PUSH
15628: LD_INT 0
15630: PUSH
15631: LD_INT 0
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: PUSH
15638: LD_INT 0
15640: PUSH
15641: LD_INT 1
15643: NEG
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: LD_INT 1
15651: PUSH
15652: LD_INT 0
15654: PUSH
15655: EMPTY
15656: LIST
15657: LIST
15658: PUSH
15659: LD_INT 1
15661: PUSH
15662: LD_INT 1
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: PUSH
15669: LD_INT 0
15671: PUSH
15672: LD_INT 1
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PUSH
15679: LD_INT 1
15681: NEG
15682: PUSH
15683: LD_INT 0
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PUSH
15690: LD_INT 1
15692: NEG
15693: PUSH
15694: LD_INT 1
15696: NEG
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: LD_INT 1
15704: NEG
15705: PUSH
15706: LD_INT 2
15708: NEG
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: LD_INT 2
15716: PUSH
15717: LD_INT 1
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: LD_INT 2
15726: PUSH
15727: LD_INT 2
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 1
15736: PUSH
15737: LD_INT 2
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: LD_INT 2
15746: NEG
15747: PUSH
15748: LD_INT 1
15750: NEG
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: PUSH
15756: LD_INT 2
15758: NEG
15759: PUSH
15760: LD_INT 2
15762: NEG
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PUSH
15768: LD_INT 3
15770: PUSH
15771: LD_INT 2
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: PUSH
15778: LD_INT 3
15780: PUSH
15781: LD_INT 3
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PUSH
15788: LD_INT 2
15790: PUSH
15791: LD_INT 3
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
15816: LD_ADDR_VAR 0 17
15820: PUSH
15821: LD_INT 0
15823: PUSH
15824: LD_INT 0
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: PUSH
15831: LD_INT 0
15833: PUSH
15834: LD_INT 1
15836: NEG
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PUSH
15842: LD_INT 1
15844: PUSH
15845: LD_INT 0
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PUSH
15852: LD_INT 1
15854: PUSH
15855: LD_INT 1
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: PUSH
15862: LD_INT 0
15864: PUSH
15865: LD_INT 1
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PUSH
15872: LD_INT 1
15874: NEG
15875: PUSH
15876: LD_INT 0
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PUSH
15883: LD_INT 1
15885: NEG
15886: PUSH
15887: LD_INT 1
15889: NEG
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: PUSH
15895: LD_INT 1
15897: NEG
15898: PUSH
15899: LD_INT 2
15901: NEG
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: PUSH
15907: LD_INT 0
15909: PUSH
15910: LD_INT 2
15912: NEG
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: LD_INT 1
15920: PUSH
15921: LD_INT 1
15923: NEG
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: PUSH
15929: LD_INT 2
15931: PUSH
15932: LD_INT 0
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: PUSH
15939: LD_INT 2
15941: PUSH
15942: LD_INT 1
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: PUSH
15949: LD_INT 2
15951: PUSH
15952: LD_INT 2
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 1
15961: PUSH
15962: LD_INT 2
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: LD_INT 0
15971: PUSH
15972: LD_INT 2
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PUSH
15979: LD_INT 1
15981: NEG
15982: PUSH
15983: LD_INT 1
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: PUSH
15990: LD_INT 2
15992: NEG
15993: PUSH
15994: LD_INT 0
15996: PUSH
15997: EMPTY
15998: LIST
15999: LIST
16000: PUSH
16001: LD_INT 2
16003: NEG
16004: PUSH
16005: LD_INT 1
16007: NEG
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: LD_INT 2
16015: NEG
16016: PUSH
16017: LD_INT 2
16019: NEG
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16046: LD_ADDR_VAR 0 18
16050: PUSH
16051: LD_INT 0
16053: PUSH
16054: LD_INT 0
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: PUSH
16061: LD_INT 0
16063: PUSH
16064: LD_INT 1
16066: NEG
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: PUSH
16072: LD_INT 1
16074: PUSH
16075: LD_INT 0
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: PUSH
16082: LD_INT 1
16084: PUSH
16085: LD_INT 1
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PUSH
16092: LD_INT 0
16094: PUSH
16095: LD_INT 1
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PUSH
16102: LD_INT 1
16104: NEG
16105: PUSH
16106: LD_INT 0
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: PUSH
16113: LD_INT 1
16115: NEG
16116: PUSH
16117: LD_INT 1
16119: NEG
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PUSH
16125: LD_INT 1
16127: NEG
16128: PUSH
16129: LD_INT 2
16131: NEG
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: PUSH
16137: LD_INT 0
16139: PUSH
16140: LD_INT 2
16142: NEG
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 1
16150: PUSH
16151: LD_INT 1
16153: NEG
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PUSH
16159: LD_INT 2
16161: PUSH
16162: LD_INT 0
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: LD_INT 2
16171: PUSH
16172: LD_INT 1
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: PUSH
16179: LD_INT 2
16181: PUSH
16182: LD_INT 2
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: PUSH
16189: LD_INT 1
16191: PUSH
16192: LD_INT 2
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: PUSH
16199: LD_INT 0
16201: PUSH
16202: LD_INT 2
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PUSH
16209: LD_INT 1
16211: NEG
16212: PUSH
16213: LD_INT 1
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: LD_INT 2
16222: NEG
16223: PUSH
16224: LD_INT 0
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PUSH
16231: LD_INT 2
16233: NEG
16234: PUSH
16235: LD_INT 1
16237: NEG
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PUSH
16243: LD_INT 2
16245: NEG
16246: PUSH
16247: LD_INT 2
16249: NEG
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16276: LD_ADDR_VAR 0 19
16280: PUSH
16281: LD_INT 0
16283: PUSH
16284: LD_INT 0
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PUSH
16291: LD_INT 0
16293: PUSH
16294: LD_INT 1
16296: NEG
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 1
16304: PUSH
16305: LD_INT 0
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PUSH
16312: LD_INT 1
16314: PUSH
16315: LD_INT 1
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: PUSH
16322: LD_INT 0
16324: PUSH
16325: LD_INT 1
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: PUSH
16332: LD_INT 1
16334: NEG
16335: PUSH
16336: LD_INT 0
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: PUSH
16343: LD_INT 1
16345: NEG
16346: PUSH
16347: LD_INT 1
16349: NEG
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PUSH
16355: LD_INT 1
16357: NEG
16358: PUSH
16359: LD_INT 2
16361: NEG
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PUSH
16367: LD_INT 0
16369: PUSH
16370: LD_INT 2
16372: NEG
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: PUSH
16378: LD_INT 1
16380: PUSH
16381: LD_INT 1
16383: NEG
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PUSH
16389: LD_INT 2
16391: PUSH
16392: LD_INT 0
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: LD_INT 2
16401: PUSH
16402: LD_INT 1
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: LD_INT 2
16411: PUSH
16412: LD_INT 2
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PUSH
16419: LD_INT 1
16421: PUSH
16422: LD_INT 2
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: PUSH
16429: LD_INT 0
16431: PUSH
16432: LD_INT 2
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: PUSH
16439: LD_INT 1
16441: NEG
16442: PUSH
16443: LD_INT 1
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: PUSH
16450: LD_INT 2
16452: NEG
16453: PUSH
16454: LD_INT 0
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: PUSH
16461: LD_INT 2
16463: NEG
16464: PUSH
16465: LD_INT 1
16467: NEG
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: PUSH
16473: LD_INT 2
16475: NEG
16476: PUSH
16477: LD_INT 2
16479: NEG
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16506: LD_ADDR_VAR 0 20
16510: PUSH
16511: LD_INT 0
16513: PUSH
16514: LD_INT 0
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: LD_INT 0
16523: PUSH
16524: LD_INT 1
16526: NEG
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 1
16534: PUSH
16535: LD_INT 0
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: LD_INT 1
16544: PUSH
16545: LD_INT 1
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: PUSH
16552: LD_INT 0
16554: PUSH
16555: LD_INT 1
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: PUSH
16562: LD_INT 1
16564: NEG
16565: PUSH
16566: LD_INT 0
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: LD_INT 1
16575: NEG
16576: PUSH
16577: LD_INT 1
16579: NEG
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: PUSH
16585: LD_INT 1
16587: NEG
16588: PUSH
16589: LD_INT 2
16591: NEG
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PUSH
16597: LD_INT 0
16599: PUSH
16600: LD_INT 2
16602: NEG
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 1
16610: PUSH
16611: LD_INT 1
16613: NEG
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PUSH
16619: LD_INT 2
16621: PUSH
16622: LD_INT 0
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: PUSH
16629: LD_INT 2
16631: PUSH
16632: LD_INT 1
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: LD_INT 2
16641: PUSH
16642: LD_INT 2
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: LD_INT 1
16651: PUSH
16652: LD_INT 2
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: PUSH
16659: LD_INT 0
16661: PUSH
16662: LD_INT 2
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: PUSH
16669: LD_INT 1
16671: NEG
16672: PUSH
16673: LD_INT 1
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: LD_INT 2
16682: NEG
16683: PUSH
16684: LD_INT 0
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PUSH
16691: LD_INT 2
16693: NEG
16694: PUSH
16695: LD_INT 1
16697: NEG
16698: PUSH
16699: EMPTY
16700: LIST
16701: LIST
16702: PUSH
16703: LD_INT 2
16705: NEG
16706: PUSH
16707: LD_INT 2
16709: NEG
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16736: LD_ADDR_VAR 0 21
16740: PUSH
16741: LD_INT 0
16743: PUSH
16744: LD_INT 0
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: PUSH
16751: LD_INT 0
16753: PUSH
16754: LD_INT 1
16756: NEG
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: PUSH
16762: LD_INT 1
16764: PUSH
16765: LD_INT 0
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: PUSH
16772: LD_INT 1
16774: PUSH
16775: LD_INT 1
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PUSH
16782: LD_INT 0
16784: PUSH
16785: LD_INT 1
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: LD_INT 1
16794: NEG
16795: PUSH
16796: LD_INT 0
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PUSH
16803: LD_INT 1
16805: NEG
16806: PUSH
16807: LD_INT 1
16809: NEG
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: PUSH
16815: LD_INT 1
16817: NEG
16818: PUSH
16819: LD_INT 2
16821: NEG
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: PUSH
16827: LD_INT 0
16829: PUSH
16830: LD_INT 2
16832: NEG
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: PUSH
16838: LD_INT 1
16840: PUSH
16841: LD_INT 1
16843: NEG
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: PUSH
16849: LD_INT 2
16851: PUSH
16852: LD_INT 0
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: PUSH
16859: LD_INT 2
16861: PUSH
16862: LD_INT 1
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: PUSH
16869: LD_INT 2
16871: PUSH
16872: LD_INT 2
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PUSH
16879: LD_INT 1
16881: PUSH
16882: LD_INT 2
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: PUSH
16889: LD_INT 0
16891: PUSH
16892: LD_INT 2
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PUSH
16899: LD_INT 1
16901: NEG
16902: PUSH
16903: LD_INT 1
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: PUSH
16910: LD_INT 2
16912: NEG
16913: PUSH
16914: LD_INT 0
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: LD_INT 2
16923: NEG
16924: PUSH
16925: LD_INT 1
16927: NEG
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: PUSH
16933: LD_INT 2
16935: NEG
16936: PUSH
16937: LD_INT 2
16939: NEG
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16966: LD_ADDR_VAR 0 22
16970: PUSH
16971: LD_INT 0
16973: PUSH
16974: LD_INT 0
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: PUSH
16981: LD_INT 0
16983: PUSH
16984: LD_INT 1
16986: NEG
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: PUSH
16992: LD_INT 1
16994: PUSH
16995: LD_INT 0
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PUSH
17002: LD_INT 1
17004: PUSH
17005: LD_INT 1
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: PUSH
17012: LD_INT 0
17014: PUSH
17015: LD_INT 1
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: PUSH
17022: LD_INT 1
17024: NEG
17025: PUSH
17026: LD_INT 0
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: LD_INT 1
17035: NEG
17036: PUSH
17037: LD_INT 1
17039: NEG
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: PUSH
17045: LD_INT 1
17047: NEG
17048: PUSH
17049: LD_INT 2
17051: NEG
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PUSH
17057: LD_INT 0
17059: PUSH
17060: LD_INT 2
17062: NEG
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PUSH
17068: LD_INT 1
17070: PUSH
17071: LD_INT 1
17073: NEG
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: PUSH
17079: LD_INT 2
17081: PUSH
17082: LD_INT 0
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: LD_INT 2
17091: PUSH
17092: LD_INT 1
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: LD_INT 2
17101: PUSH
17102: LD_INT 2
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: LD_INT 1
17111: PUSH
17112: LD_INT 2
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: PUSH
17119: LD_INT 0
17121: PUSH
17122: LD_INT 2
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: PUSH
17129: LD_INT 1
17131: NEG
17132: PUSH
17133: LD_INT 1
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: PUSH
17140: LD_INT 2
17142: NEG
17143: PUSH
17144: LD_INT 0
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: LD_INT 2
17153: NEG
17154: PUSH
17155: LD_INT 1
17157: NEG
17158: PUSH
17159: EMPTY
17160: LIST
17161: LIST
17162: PUSH
17163: LD_INT 2
17165: NEG
17166: PUSH
17167: LD_INT 2
17169: NEG
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
17196: LD_ADDR_VAR 0 23
17200: PUSH
17201: LD_INT 0
17203: PUSH
17204: LD_INT 0
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: LD_INT 0
17213: PUSH
17214: LD_INT 1
17216: NEG
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: LD_INT 1
17224: PUSH
17225: LD_INT 0
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PUSH
17232: LD_INT 1
17234: PUSH
17235: LD_INT 1
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: PUSH
17242: LD_INT 0
17244: PUSH
17245: LD_INT 1
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: LD_INT 1
17254: NEG
17255: PUSH
17256: LD_INT 0
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: PUSH
17263: LD_INT 1
17265: NEG
17266: PUSH
17267: LD_INT 1
17269: NEG
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PUSH
17275: LD_INT 1
17277: NEG
17278: PUSH
17279: LD_INT 2
17281: NEG
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 0
17289: PUSH
17290: LD_INT 2
17292: NEG
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 1
17300: PUSH
17301: LD_INT 1
17303: NEG
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PUSH
17309: LD_INT 2
17311: PUSH
17312: LD_INT 0
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: LD_INT 2
17321: PUSH
17322: LD_INT 1
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PUSH
17329: LD_INT 2
17331: PUSH
17332: LD_INT 2
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: PUSH
17339: LD_INT 1
17341: PUSH
17342: LD_INT 2
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PUSH
17349: LD_INT 0
17351: PUSH
17352: LD_INT 2
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PUSH
17359: LD_INT 1
17361: NEG
17362: PUSH
17363: LD_INT 1
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: LD_INT 2
17372: NEG
17373: PUSH
17374: LD_INT 0
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: PUSH
17381: LD_INT 2
17383: NEG
17384: PUSH
17385: LD_INT 1
17387: NEG
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: PUSH
17393: LD_INT 2
17395: NEG
17396: PUSH
17397: LD_INT 2
17399: NEG
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 2
17407: NEG
17408: PUSH
17409: LD_INT 3
17411: NEG
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: LD_INT 1
17419: NEG
17420: PUSH
17421: LD_INT 3
17423: NEG
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: LD_INT 1
17431: PUSH
17432: LD_INT 2
17434: NEG
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: LD_INT 2
17442: PUSH
17443: LD_INT 1
17445: NEG
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
17476: LD_ADDR_VAR 0 24
17480: PUSH
17481: LD_INT 0
17483: PUSH
17484: LD_INT 0
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: PUSH
17491: LD_INT 0
17493: PUSH
17494: LD_INT 1
17496: NEG
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: PUSH
17502: LD_INT 1
17504: PUSH
17505: LD_INT 0
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 1
17514: PUSH
17515: LD_INT 1
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: PUSH
17522: LD_INT 0
17524: PUSH
17525: LD_INT 1
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 1
17534: NEG
17535: PUSH
17536: LD_INT 0
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: PUSH
17543: LD_INT 1
17545: NEG
17546: PUSH
17547: LD_INT 1
17549: NEG
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PUSH
17555: LD_INT 1
17557: NEG
17558: PUSH
17559: LD_INT 2
17561: NEG
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: PUSH
17567: LD_INT 0
17569: PUSH
17570: LD_INT 2
17572: NEG
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: LD_INT 1
17580: PUSH
17581: LD_INT 1
17583: NEG
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: PUSH
17589: LD_INT 2
17591: PUSH
17592: LD_INT 0
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: PUSH
17599: LD_INT 2
17601: PUSH
17602: LD_INT 1
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 2
17611: PUSH
17612: LD_INT 2
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: LD_INT 1
17621: PUSH
17622: LD_INT 2
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: LD_INT 0
17631: PUSH
17632: LD_INT 2
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 1
17641: NEG
17642: PUSH
17643: LD_INT 1
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: PUSH
17650: LD_INT 2
17652: NEG
17653: PUSH
17654: LD_INT 0
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: LD_INT 2
17663: NEG
17664: PUSH
17665: LD_INT 1
17667: NEG
17668: PUSH
17669: EMPTY
17670: LIST
17671: LIST
17672: PUSH
17673: LD_INT 2
17675: NEG
17676: PUSH
17677: LD_INT 2
17679: NEG
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: PUSH
17685: LD_INT 1
17687: PUSH
17688: LD_INT 2
17690: NEG
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PUSH
17696: LD_INT 2
17698: PUSH
17699: LD_INT 1
17701: NEG
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PUSH
17707: LD_INT 3
17709: PUSH
17710: LD_INT 1
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: LD_INT 3
17719: PUSH
17720: LD_INT 2
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
17752: LD_ADDR_VAR 0 25
17756: PUSH
17757: LD_INT 0
17759: PUSH
17760: LD_INT 0
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: LD_INT 0
17769: PUSH
17770: LD_INT 1
17772: NEG
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PUSH
17778: LD_INT 1
17780: PUSH
17781: LD_INT 0
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 1
17790: PUSH
17791: LD_INT 1
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: LD_INT 0
17800: PUSH
17801: LD_INT 1
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: LD_INT 1
17810: NEG
17811: PUSH
17812: LD_INT 0
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PUSH
17819: LD_INT 1
17821: NEG
17822: PUSH
17823: LD_INT 1
17825: NEG
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 1
17833: NEG
17834: PUSH
17835: LD_INT 2
17837: NEG
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: LD_INT 0
17845: PUSH
17846: LD_INT 2
17848: NEG
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: LD_INT 1
17859: NEG
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 2
17867: PUSH
17868: LD_INT 0
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 2
17877: PUSH
17878: LD_INT 1
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PUSH
17885: LD_INT 2
17887: PUSH
17888: LD_INT 2
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 1
17897: PUSH
17898: LD_INT 2
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: LD_INT 0
17907: PUSH
17908: LD_INT 2
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PUSH
17915: LD_INT 1
17917: NEG
17918: PUSH
17919: LD_INT 1
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PUSH
17926: LD_INT 2
17928: NEG
17929: PUSH
17930: LD_INT 0
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 2
17939: NEG
17940: PUSH
17941: LD_INT 1
17943: NEG
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: LD_INT 2
17951: NEG
17952: PUSH
17953: LD_INT 2
17955: NEG
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PUSH
17961: LD_INT 3
17963: PUSH
17964: LD_INT 1
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PUSH
17971: LD_INT 3
17973: PUSH
17974: LD_INT 2
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 2
17983: PUSH
17984: LD_INT 3
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: LD_INT 1
17993: PUSH
17994: LD_INT 3
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18026: LD_ADDR_VAR 0 26
18030: PUSH
18031: LD_INT 0
18033: PUSH
18034: LD_INT 0
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 0
18043: PUSH
18044: LD_INT 1
18046: NEG
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 1
18054: PUSH
18055: LD_INT 0
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PUSH
18062: LD_INT 1
18064: PUSH
18065: LD_INT 1
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: LD_INT 0
18074: PUSH
18075: LD_INT 1
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: LD_INT 1
18084: NEG
18085: PUSH
18086: LD_INT 0
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 1
18095: NEG
18096: PUSH
18097: LD_INT 1
18099: NEG
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: LD_INT 1
18107: NEG
18108: PUSH
18109: LD_INT 2
18111: NEG
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 0
18119: PUSH
18120: LD_INT 2
18122: NEG
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 1
18130: PUSH
18131: LD_INT 1
18133: NEG
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 2
18141: PUSH
18142: LD_INT 0
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 2
18151: PUSH
18152: LD_INT 1
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 2
18161: PUSH
18162: LD_INT 2
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PUSH
18169: LD_INT 1
18171: PUSH
18172: LD_INT 2
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PUSH
18179: LD_INT 0
18181: PUSH
18182: LD_INT 2
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: LD_INT 1
18191: NEG
18192: PUSH
18193: LD_INT 1
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: LD_INT 2
18202: NEG
18203: PUSH
18204: LD_INT 0
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 2
18213: NEG
18214: PUSH
18215: LD_INT 1
18217: NEG
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 2
18225: NEG
18226: PUSH
18227: LD_INT 2
18229: NEG
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PUSH
18235: LD_INT 2
18237: PUSH
18238: LD_INT 3
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PUSH
18245: LD_INT 1
18247: PUSH
18248: LD_INT 3
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: LD_INT 1
18257: NEG
18258: PUSH
18259: LD_INT 2
18261: PUSH
18262: EMPTY
18263: LIST
18264: LIST
18265: PUSH
18266: LD_INT 2
18268: NEG
18269: PUSH
18270: LD_INT 1
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18302: LD_ADDR_VAR 0 27
18306: PUSH
18307: LD_INT 0
18309: PUSH
18310: LD_INT 0
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: PUSH
18317: LD_INT 0
18319: PUSH
18320: LD_INT 1
18322: NEG
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 1
18330: PUSH
18331: LD_INT 0
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 1
18340: PUSH
18341: LD_INT 1
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 0
18350: PUSH
18351: LD_INT 1
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 1
18360: NEG
18361: PUSH
18362: LD_INT 0
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: LD_INT 1
18371: NEG
18372: PUSH
18373: LD_INT 1
18375: NEG
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: PUSH
18381: LD_INT 1
18383: NEG
18384: PUSH
18385: LD_INT 2
18387: NEG
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PUSH
18393: LD_INT 0
18395: PUSH
18396: LD_INT 2
18398: NEG
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 1
18406: PUSH
18407: LD_INT 1
18409: NEG
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PUSH
18415: LD_INT 2
18417: PUSH
18418: LD_INT 0
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: LD_INT 2
18427: PUSH
18428: LD_INT 1
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 2
18437: PUSH
18438: LD_INT 2
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 1
18447: PUSH
18448: LD_INT 2
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PUSH
18455: LD_INT 0
18457: PUSH
18458: LD_INT 2
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: LD_INT 1
18467: NEG
18468: PUSH
18469: LD_INT 1
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: LD_INT 2
18478: NEG
18479: PUSH
18480: LD_INT 0
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 2
18489: NEG
18490: PUSH
18491: LD_INT 1
18493: NEG
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: PUSH
18499: LD_INT 2
18501: NEG
18502: PUSH
18503: LD_INT 2
18505: NEG
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: PUSH
18511: LD_INT 1
18513: NEG
18514: PUSH
18515: LD_INT 2
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PUSH
18522: LD_INT 2
18524: NEG
18525: PUSH
18526: LD_INT 1
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: LD_INT 3
18535: NEG
18536: PUSH
18537: LD_INT 1
18539: NEG
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: LD_INT 3
18547: NEG
18548: PUSH
18549: LD_INT 2
18551: NEG
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18582: LD_ADDR_VAR 0 28
18586: PUSH
18587: LD_INT 0
18589: PUSH
18590: LD_INT 0
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: LD_INT 0
18599: PUSH
18600: LD_INT 1
18602: NEG
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PUSH
18608: LD_INT 1
18610: PUSH
18611: LD_INT 0
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PUSH
18618: LD_INT 1
18620: PUSH
18621: LD_INT 1
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 0
18630: PUSH
18631: LD_INT 1
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: LD_INT 1
18640: NEG
18641: PUSH
18642: LD_INT 0
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PUSH
18649: LD_INT 1
18651: NEG
18652: PUSH
18653: LD_INT 1
18655: NEG
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 1
18663: NEG
18664: PUSH
18665: LD_INT 2
18667: NEG
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 0
18675: PUSH
18676: LD_INT 2
18678: NEG
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: LD_INT 1
18686: PUSH
18687: LD_INT 1
18689: NEG
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PUSH
18695: LD_INT 2
18697: PUSH
18698: LD_INT 0
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: LD_INT 2
18707: PUSH
18708: LD_INT 1
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: LD_INT 2
18717: PUSH
18718: LD_INT 2
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PUSH
18725: LD_INT 1
18727: PUSH
18728: LD_INT 2
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: PUSH
18735: LD_INT 0
18737: PUSH
18738: LD_INT 2
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: LD_INT 1
18747: NEG
18748: PUSH
18749: LD_INT 1
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PUSH
18756: LD_INT 2
18758: NEG
18759: PUSH
18760: LD_INT 0
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PUSH
18767: LD_INT 2
18769: NEG
18770: PUSH
18771: LD_INT 1
18773: NEG
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: PUSH
18779: LD_INT 2
18781: NEG
18782: PUSH
18783: LD_INT 2
18785: NEG
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: LD_INT 2
18793: NEG
18794: PUSH
18795: LD_INT 3
18797: NEG
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 1
18805: NEG
18806: PUSH
18807: LD_INT 3
18809: NEG
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: LD_INT 3
18817: NEG
18818: PUSH
18819: LD_INT 1
18821: NEG
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 3
18829: NEG
18830: PUSH
18831: LD_INT 2
18833: NEG
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
18864: LD_ADDR_VAR 0 29
18868: PUSH
18869: LD_INT 0
18871: PUSH
18872: LD_INT 0
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: LD_INT 0
18881: PUSH
18882: LD_INT 1
18884: NEG
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PUSH
18890: LD_INT 1
18892: PUSH
18893: LD_INT 0
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PUSH
18900: LD_INT 1
18902: PUSH
18903: LD_INT 1
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 0
18912: PUSH
18913: LD_INT 1
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: LD_INT 1
18922: NEG
18923: PUSH
18924: LD_INT 0
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 1
18933: NEG
18934: PUSH
18935: LD_INT 1
18937: NEG
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 1
18945: NEG
18946: PUSH
18947: LD_INT 2
18949: NEG
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 0
18957: PUSH
18958: LD_INT 2
18960: NEG
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PUSH
18966: LD_INT 1
18968: PUSH
18969: LD_INT 1
18971: NEG
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 2
18979: PUSH
18980: LD_INT 0
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: LD_INT 2
18989: PUSH
18990: LD_INT 1
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 1
18999: PUSH
19000: LD_INT 2
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 0
19009: PUSH
19010: LD_INT 2
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 1
19019: NEG
19020: PUSH
19021: LD_INT 1
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 2
19030: NEG
19031: PUSH
19032: LD_INT 1
19034: NEG
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: PUSH
19040: LD_INT 2
19042: NEG
19043: PUSH
19044: LD_INT 2
19046: NEG
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 2
19054: NEG
19055: PUSH
19056: LD_INT 3
19058: NEG
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: PUSH
19064: LD_INT 2
19066: PUSH
19067: LD_INT 1
19069: NEG
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 3
19077: PUSH
19078: LD_INT 1
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 1
19087: PUSH
19088: LD_INT 3
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: LD_INT 1
19097: NEG
19098: PUSH
19099: LD_INT 2
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PUSH
19106: LD_INT 3
19108: NEG
19109: PUSH
19110: LD_INT 2
19112: NEG
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19143: LD_ADDR_VAR 0 30
19147: PUSH
19148: LD_INT 0
19150: PUSH
19151: LD_INT 0
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: LD_INT 0
19160: PUSH
19161: LD_INT 1
19163: NEG
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 1
19171: PUSH
19172: LD_INT 0
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 1
19181: PUSH
19182: LD_INT 1
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 0
19191: PUSH
19192: LD_INT 1
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 1
19201: NEG
19202: PUSH
19203: LD_INT 0
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 1
19212: NEG
19213: PUSH
19214: LD_INT 1
19216: NEG
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PUSH
19222: LD_INT 1
19224: NEG
19225: PUSH
19226: LD_INT 2
19228: NEG
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: PUSH
19234: LD_INT 0
19236: PUSH
19237: LD_INT 2
19239: NEG
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 1
19247: PUSH
19248: LD_INT 1
19250: NEG
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: LD_INT 2
19258: PUSH
19259: LD_INT 0
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 2
19268: PUSH
19269: LD_INT 1
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 2
19278: PUSH
19279: LD_INT 2
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PUSH
19286: LD_INT 1
19288: PUSH
19289: LD_INT 2
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 1
19298: NEG
19299: PUSH
19300: LD_INT 1
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 2
19309: NEG
19310: PUSH
19311: LD_INT 0
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 2
19320: NEG
19321: PUSH
19322: LD_INT 1
19324: NEG
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 1
19332: NEG
19333: PUSH
19334: LD_INT 3
19336: NEG
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: LD_INT 1
19344: PUSH
19345: LD_INT 2
19347: NEG
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 3
19355: PUSH
19356: LD_INT 2
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 2
19365: PUSH
19366: LD_INT 3
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 2
19375: NEG
19376: PUSH
19377: LD_INT 1
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 3
19386: NEG
19387: PUSH
19388: LD_INT 1
19390: NEG
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19421: LD_ADDR_VAR 0 31
19425: PUSH
19426: LD_INT 0
19428: PUSH
19429: LD_INT 0
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 0
19438: PUSH
19439: LD_INT 1
19441: NEG
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 1
19449: PUSH
19450: LD_INT 0
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: LD_INT 1
19459: PUSH
19460: LD_INT 1
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 0
19469: PUSH
19470: LD_INT 1
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 1
19479: NEG
19480: PUSH
19481: LD_INT 0
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 1
19490: NEG
19491: PUSH
19492: LD_INT 1
19494: NEG
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 1
19502: NEG
19503: PUSH
19504: LD_INT 2
19506: NEG
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 1
19514: PUSH
19515: LD_INT 1
19517: NEG
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 2
19525: PUSH
19526: LD_INT 0
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PUSH
19533: LD_INT 2
19535: PUSH
19536: LD_INT 1
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: LD_INT 2
19545: PUSH
19546: LD_INT 2
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 1
19555: PUSH
19556: LD_INT 2
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: LD_INT 0
19565: PUSH
19566: LD_INT 2
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 1
19575: NEG
19576: PUSH
19577: LD_INT 1
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 2
19586: NEG
19587: PUSH
19588: LD_INT 1
19590: NEG
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 2
19598: NEG
19599: PUSH
19600: LD_INT 2
19602: NEG
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 2
19610: NEG
19611: PUSH
19612: LD_INT 3
19614: NEG
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: LD_INT 2
19622: PUSH
19623: LD_INT 1
19625: NEG
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: PUSH
19631: LD_INT 3
19633: PUSH
19634: LD_INT 1
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: LD_INT 1
19643: PUSH
19644: LD_INT 3
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PUSH
19651: LD_INT 1
19653: NEG
19654: PUSH
19655: LD_INT 2
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PUSH
19662: LD_INT 3
19664: NEG
19665: PUSH
19666: LD_INT 2
19668: NEG
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19699: LD_ADDR_VAR 0 32
19703: PUSH
19704: LD_INT 0
19706: PUSH
19707: LD_INT 0
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 0
19716: PUSH
19717: LD_INT 1
19719: NEG
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: LD_INT 1
19727: PUSH
19728: LD_INT 0
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 1
19737: PUSH
19738: LD_INT 1
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: LD_INT 0
19747: PUSH
19748: LD_INT 1
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 1
19757: NEG
19758: PUSH
19759: LD_INT 0
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PUSH
19766: LD_INT 1
19768: NEG
19769: PUSH
19770: LD_INT 1
19772: NEG
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PUSH
19778: LD_INT 1
19780: NEG
19781: PUSH
19782: LD_INT 2
19784: NEG
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 0
19792: PUSH
19793: LD_INT 2
19795: NEG
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: PUSH
19801: LD_INT 1
19803: PUSH
19804: LD_INT 1
19806: NEG
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: LD_INT 2
19814: PUSH
19815: LD_INT 1
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: LD_INT 2
19824: PUSH
19825: LD_INT 2
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: PUSH
19832: LD_INT 1
19834: PUSH
19835: LD_INT 2
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: LD_INT 0
19844: PUSH
19845: LD_INT 2
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PUSH
19852: LD_INT 1
19854: NEG
19855: PUSH
19856: LD_INT 1
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 2
19865: NEG
19866: PUSH
19867: LD_INT 0
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: LD_INT 2
19876: NEG
19877: PUSH
19878: LD_INT 1
19880: NEG
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PUSH
19886: LD_INT 1
19888: NEG
19889: PUSH
19890: LD_INT 3
19892: NEG
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: LD_INT 1
19900: PUSH
19901: LD_INT 2
19903: NEG
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: LD_INT 3
19911: PUSH
19912: LD_INT 2
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 2
19921: PUSH
19922: LD_INT 3
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: PUSH
19929: LD_INT 2
19931: NEG
19932: PUSH
19933: LD_INT 1
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PUSH
19940: LD_INT 3
19942: NEG
19943: PUSH
19944: LD_INT 1
19946: NEG
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19977: LD_ADDR_VAR 0 33
19981: PUSH
19982: LD_INT 0
19984: PUSH
19985: LD_INT 0
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: LD_INT 0
19994: PUSH
19995: LD_INT 1
19997: NEG
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 1
20005: PUSH
20006: LD_INT 0
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: LD_INT 1
20015: PUSH
20016: LD_INT 1
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 0
20025: PUSH
20026: LD_INT 1
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 1
20035: NEG
20036: PUSH
20037: LD_INT 0
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PUSH
20044: LD_INT 1
20046: NEG
20047: PUSH
20048: LD_INT 1
20050: NEG
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PUSH
20056: LD_INT 1
20058: NEG
20059: PUSH
20060: LD_INT 2
20062: NEG
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 1
20070: PUSH
20071: LD_INT 1
20073: NEG
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 2
20081: PUSH
20082: LD_INT 0
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 2
20091: PUSH
20092: LD_INT 1
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: LD_INT 1
20101: PUSH
20102: LD_INT 2
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 0
20111: PUSH
20112: LD_INT 2
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 1
20121: NEG
20122: PUSH
20123: LD_INT 1
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 2
20132: NEG
20133: PUSH
20134: LD_INT 0
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 2
20143: NEG
20144: PUSH
20145: LD_INT 1
20147: NEG
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 2
20155: NEG
20156: PUSH
20157: LD_INT 2
20159: NEG
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PUSH
20165: LD_INT 2
20167: NEG
20168: PUSH
20169: LD_INT 3
20171: NEG
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: PUSH
20177: LD_INT 2
20179: PUSH
20180: LD_INT 1
20182: NEG
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: LD_INT 3
20190: PUSH
20191: LD_INT 1
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 1
20200: PUSH
20201: LD_INT 3
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: LD_INT 1
20210: NEG
20211: PUSH
20212: LD_INT 2
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 3
20221: NEG
20222: PUSH
20223: LD_INT 2
20225: NEG
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20256: LD_ADDR_VAR 0 34
20260: PUSH
20261: LD_INT 0
20263: PUSH
20264: LD_INT 0
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 0
20273: PUSH
20274: LD_INT 1
20276: NEG
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: LD_INT 1
20284: PUSH
20285: LD_INT 0
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 1
20294: PUSH
20295: LD_INT 1
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: LD_INT 0
20304: PUSH
20305: LD_INT 1
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PUSH
20312: LD_INT 1
20314: NEG
20315: PUSH
20316: LD_INT 0
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: LD_INT 1
20325: NEG
20326: PUSH
20327: LD_INT 1
20329: NEG
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 1
20337: NEG
20338: PUSH
20339: LD_INT 2
20341: NEG
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 0
20349: PUSH
20350: LD_INT 2
20352: NEG
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: LD_INT 1
20360: PUSH
20361: LD_INT 1
20363: NEG
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PUSH
20369: LD_INT 2
20371: PUSH
20372: LD_INT 1
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 2
20381: PUSH
20382: LD_INT 2
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PUSH
20389: LD_INT 1
20391: PUSH
20392: LD_INT 2
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 1
20401: NEG
20402: PUSH
20403: LD_INT 1
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: LD_INT 2
20412: NEG
20413: PUSH
20414: LD_INT 0
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 2
20423: NEG
20424: PUSH
20425: LD_INT 1
20427: NEG
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 2
20435: NEG
20436: PUSH
20437: LD_INT 2
20439: NEG
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: LD_INT 1
20447: NEG
20448: PUSH
20449: LD_INT 3
20451: NEG
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: LD_INT 1
20459: PUSH
20460: LD_INT 2
20462: NEG
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: PUSH
20468: LD_INT 3
20470: PUSH
20471: LD_INT 2
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: PUSH
20478: LD_INT 2
20480: PUSH
20481: LD_INT 3
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 2
20490: NEG
20491: PUSH
20492: LD_INT 1
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: PUSH
20499: LD_INT 3
20501: NEG
20502: PUSH
20503: LD_INT 1
20505: NEG
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20536: LD_ADDR_VAR 0 35
20540: PUSH
20541: LD_INT 0
20543: PUSH
20544: LD_INT 0
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: PUSH
20551: LD_INT 0
20553: PUSH
20554: LD_INT 1
20556: NEG
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: PUSH
20562: LD_INT 1
20564: PUSH
20565: LD_INT 0
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PUSH
20572: LD_INT 1
20574: PUSH
20575: LD_INT 1
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: PUSH
20582: LD_INT 0
20584: PUSH
20585: LD_INT 1
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PUSH
20592: LD_INT 1
20594: NEG
20595: PUSH
20596: LD_INT 0
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: LD_INT 1
20605: NEG
20606: PUSH
20607: LD_INT 1
20609: NEG
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 2
20617: PUSH
20618: LD_INT 1
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 2
20627: NEG
20628: PUSH
20629: LD_INT 1
20631: NEG
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20648: LD_ADDR_VAR 0 36
20652: PUSH
20653: LD_INT 0
20655: PUSH
20656: LD_INT 0
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PUSH
20663: LD_INT 0
20665: PUSH
20666: LD_INT 1
20668: NEG
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: PUSH
20674: LD_INT 1
20676: PUSH
20677: LD_INT 0
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: PUSH
20684: LD_INT 1
20686: PUSH
20687: LD_INT 1
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: PUSH
20694: LD_INT 0
20696: PUSH
20697: LD_INT 1
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: LD_INT 1
20706: NEG
20707: PUSH
20708: LD_INT 0
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: LD_INT 1
20717: NEG
20718: PUSH
20719: LD_INT 1
20721: NEG
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PUSH
20727: LD_INT 1
20729: NEG
20730: PUSH
20731: LD_INT 2
20733: NEG
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: LD_INT 1
20741: PUSH
20742: LD_INT 2
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
20760: LD_ADDR_VAR 0 37
20764: PUSH
20765: LD_INT 0
20767: PUSH
20768: LD_INT 0
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 0
20777: PUSH
20778: LD_INT 1
20780: NEG
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: LD_INT 1
20788: PUSH
20789: LD_INT 0
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PUSH
20796: LD_INT 1
20798: PUSH
20799: LD_INT 1
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PUSH
20806: LD_INT 0
20808: PUSH
20809: LD_INT 1
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 1
20818: NEG
20819: PUSH
20820: LD_INT 0
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 1
20829: NEG
20830: PUSH
20831: LD_INT 1
20833: NEG
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 1
20841: PUSH
20842: LD_INT 1
20844: NEG
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 1
20852: NEG
20853: PUSH
20854: LD_INT 1
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20872: LD_ADDR_VAR 0 38
20876: PUSH
20877: LD_INT 0
20879: PUSH
20880: LD_INT 0
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 0
20889: PUSH
20890: LD_INT 1
20892: NEG
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 1
20900: PUSH
20901: LD_INT 0
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 1
20910: PUSH
20911: LD_INT 1
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 0
20920: PUSH
20921: LD_INT 1
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: LD_INT 1
20930: NEG
20931: PUSH
20932: LD_INT 0
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: LD_INT 1
20941: NEG
20942: PUSH
20943: LD_INT 1
20945: NEG
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 2
20953: PUSH
20954: LD_INT 1
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 2
20963: NEG
20964: PUSH
20965: LD_INT 1
20967: NEG
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20984: LD_ADDR_VAR 0 39
20988: PUSH
20989: LD_INT 0
20991: PUSH
20992: LD_INT 0
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: LD_INT 0
21001: PUSH
21002: LD_INT 1
21004: NEG
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 1
21012: PUSH
21013: LD_INT 0
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 1
21022: PUSH
21023: LD_INT 1
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 0
21032: PUSH
21033: LD_INT 1
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 1
21042: NEG
21043: PUSH
21044: LD_INT 0
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 1
21053: NEG
21054: PUSH
21055: LD_INT 1
21057: NEG
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 1
21065: NEG
21066: PUSH
21067: LD_INT 2
21069: NEG
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: LD_INT 1
21077: PUSH
21078: LD_INT 2
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21096: LD_ADDR_VAR 0 40
21100: PUSH
21101: LD_INT 0
21103: PUSH
21104: LD_INT 0
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: LD_INT 0
21113: PUSH
21114: LD_INT 1
21116: NEG
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: LD_INT 1
21124: PUSH
21125: LD_INT 0
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 1
21134: PUSH
21135: LD_INT 1
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: LD_INT 0
21144: PUSH
21145: LD_INT 1
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 1
21154: NEG
21155: PUSH
21156: LD_INT 0
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 1
21165: NEG
21166: PUSH
21167: LD_INT 1
21169: NEG
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: LD_INT 1
21177: PUSH
21178: LD_INT 1
21180: NEG
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 1
21188: NEG
21189: PUSH
21190: LD_INT 1
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21208: LD_ADDR_VAR 0 41
21212: PUSH
21213: LD_INT 0
21215: PUSH
21216: LD_INT 0
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 0
21225: PUSH
21226: LD_INT 1
21228: NEG
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 1
21236: PUSH
21237: LD_INT 0
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: LD_INT 1
21246: PUSH
21247: LD_INT 1
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: LD_INT 0
21256: PUSH
21257: LD_INT 1
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: LD_INT 1
21266: NEG
21267: PUSH
21268: LD_INT 0
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: LD_INT 1
21277: NEG
21278: PUSH
21279: LD_INT 1
21281: NEG
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: LD_INT 1
21289: NEG
21290: PUSH
21291: LD_INT 2
21293: NEG
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 1
21301: PUSH
21302: LD_INT 1
21304: NEG
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 2
21312: PUSH
21313: LD_INT 0
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 2
21322: PUSH
21323: LD_INT 1
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 2
21332: PUSH
21333: LD_INT 2
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: LD_INT 1
21342: PUSH
21343: LD_INT 2
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: PUSH
21350: LD_INT 1
21352: NEG
21353: PUSH
21354: LD_INT 1
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: LD_INT 2
21363: NEG
21364: PUSH
21365: LD_INT 0
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 2
21374: NEG
21375: PUSH
21376: LD_INT 1
21378: NEG
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PUSH
21384: LD_INT 2
21386: NEG
21387: PUSH
21388: LD_INT 2
21390: NEG
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: PUSH
21396: LD_INT 2
21398: NEG
21399: PUSH
21400: LD_INT 3
21402: NEG
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 2
21410: PUSH
21411: LD_INT 1
21413: NEG
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 3
21421: PUSH
21422: LD_INT 0
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 3
21431: PUSH
21432: LD_INT 1
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 3
21441: PUSH
21442: LD_INT 2
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 3
21451: PUSH
21452: LD_INT 3
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: LD_INT 2
21461: PUSH
21462: LD_INT 3
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 2
21471: NEG
21472: PUSH
21473: LD_INT 1
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 3
21482: NEG
21483: PUSH
21484: LD_INT 0
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: LD_INT 3
21493: NEG
21494: PUSH
21495: LD_INT 1
21497: NEG
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: LD_INT 3
21505: NEG
21506: PUSH
21507: LD_INT 2
21509: NEG
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 3
21517: NEG
21518: PUSH
21519: LD_INT 3
21521: NEG
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21558: LD_ADDR_VAR 0 42
21562: PUSH
21563: LD_INT 0
21565: PUSH
21566: LD_INT 0
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 0
21575: PUSH
21576: LD_INT 1
21578: NEG
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: LD_INT 1
21586: PUSH
21587: LD_INT 0
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: LD_INT 1
21596: PUSH
21597: LD_INT 1
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: LD_INT 0
21606: PUSH
21607: LD_INT 1
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 1
21616: NEG
21617: PUSH
21618: LD_INT 0
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 1
21627: NEG
21628: PUSH
21629: LD_INT 1
21631: NEG
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: LD_INT 1
21639: NEG
21640: PUSH
21641: LD_INT 2
21643: NEG
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 0
21651: PUSH
21652: LD_INT 2
21654: NEG
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 1
21662: PUSH
21663: LD_INT 1
21665: NEG
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: LD_INT 2
21673: PUSH
21674: LD_INT 1
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PUSH
21681: LD_INT 2
21683: PUSH
21684: LD_INT 2
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 1
21693: PUSH
21694: LD_INT 2
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 0
21703: PUSH
21704: LD_INT 2
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PUSH
21711: LD_INT 1
21713: NEG
21714: PUSH
21715: LD_INT 1
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 2
21724: NEG
21725: PUSH
21726: LD_INT 1
21728: NEG
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PUSH
21734: LD_INT 2
21736: NEG
21737: PUSH
21738: LD_INT 2
21740: NEG
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: PUSH
21746: LD_INT 2
21748: NEG
21749: PUSH
21750: LD_INT 3
21752: NEG
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 1
21760: NEG
21761: PUSH
21762: LD_INT 3
21764: NEG
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 0
21772: PUSH
21773: LD_INT 3
21775: NEG
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: PUSH
21781: LD_INT 1
21783: PUSH
21784: LD_INT 2
21786: NEG
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: LD_INT 3
21794: PUSH
21795: LD_INT 2
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 3
21804: PUSH
21805: LD_INT 3
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: LD_INT 2
21814: PUSH
21815: LD_INT 3
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 1
21824: PUSH
21825: LD_INT 3
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: LD_INT 0
21834: PUSH
21835: LD_INT 3
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: LD_INT 1
21844: NEG
21845: PUSH
21846: LD_INT 2
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PUSH
21853: LD_INT 3
21855: NEG
21856: PUSH
21857: LD_INT 2
21859: NEG
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 3
21867: NEG
21868: PUSH
21869: LD_INT 3
21871: NEG
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21908: LD_ADDR_VAR 0 43
21912: PUSH
21913: LD_INT 0
21915: PUSH
21916: LD_INT 0
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 0
21925: PUSH
21926: LD_INT 1
21928: NEG
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PUSH
21934: LD_INT 1
21936: PUSH
21937: LD_INT 0
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 1
21946: PUSH
21947: LD_INT 1
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PUSH
21954: LD_INT 0
21956: PUSH
21957: LD_INT 1
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PUSH
21964: LD_INT 1
21966: NEG
21967: PUSH
21968: LD_INT 0
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PUSH
21975: LD_INT 1
21977: NEG
21978: PUSH
21979: LD_INT 1
21981: NEG
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 1
21989: NEG
21990: PUSH
21991: LD_INT 2
21993: NEG
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 0
22001: PUSH
22002: LD_INT 2
22004: NEG
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: LD_INT 1
22012: PUSH
22013: LD_INT 1
22015: NEG
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: PUSH
22021: LD_INT 2
22023: PUSH
22024: LD_INT 0
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: LD_INT 2
22033: PUSH
22034: LD_INT 1
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PUSH
22041: LD_INT 1
22043: PUSH
22044: LD_INT 2
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: LD_INT 0
22053: PUSH
22054: LD_INT 2
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 1
22063: NEG
22064: PUSH
22065: LD_INT 1
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: PUSH
22072: LD_INT 2
22074: NEG
22075: PUSH
22076: LD_INT 0
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: LD_INT 2
22085: NEG
22086: PUSH
22087: LD_INT 1
22089: NEG
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 1
22097: NEG
22098: PUSH
22099: LD_INT 3
22101: NEG
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: LD_INT 0
22109: PUSH
22110: LD_INT 3
22112: NEG
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 1
22120: PUSH
22121: LD_INT 2
22123: NEG
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 2
22131: PUSH
22132: LD_INT 1
22134: NEG
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: PUSH
22140: LD_INT 3
22142: PUSH
22143: LD_INT 0
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: LD_INT 3
22152: PUSH
22153: LD_INT 1
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 1
22162: PUSH
22163: LD_INT 3
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: LD_INT 0
22172: PUSH
22173: LD_INT 3
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: LD_INT 1
22182: NEG
22183: PUSH
22184: LD_INT 2
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: LD_INT 2
22193: NEG
22194: PUSH
22195: LD_INT 1
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 3
22204: NEG
22205: PUSH
22206: LD_INT 0
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 3
22215: NEG
22216: PUSH
22217: LD_INT 1
22219: NEG
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22256: LD_ADDR_VAR 0 44
22260: PUSH
22261: LD_INT 0
22263: PUSH
22264: LD_INT 0
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 0
22273: PUSH
22274: LD_INT 1
22276: NEG
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: PUSH
22282: LD_INT 1
22284: PUSH
22285: LD_INT 0
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PUSH
22292: LD_INT 1
22294: PUSH
22295: LD_INT 1
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 0
22304: PUSH
22305: LD_INT 1
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 1
22314: NEG
22315: PUSH
22316: LD_INT 0
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PUSH
22323: LD_INT 1
22325: NEG
22326: PUSH
22327: LD_INT 1
22329: NEG
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PUSH
22335: LD_INT 1
22337: NEG
22338: PUSH
22339: LD_INT 2
22341: NEG
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: LD_INT 1
22349: PUSH
22350: LD_INT 1
22352: NEG
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PUSH
22358: LD_INT 2
22360: PUSH
22361: LD_INT 0
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PUSH
22368: LD_INT 2
22370: PUSH
22371: LD_INT 1
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: PUSH
22378: LD_INT 2
22380: PUSH
22381: LD_INT 2
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: PUSH
22388: LD_INT 1
22390: PUSH
22391: LD_INT 2
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: PUSH
22398: LD_INT 1
22400: NEG
22401: PUSH
22402: LD_INT 1
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: LD_INT 2
22411: NEG
22412: PUSH
22413: LD_INT 0
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PUSH
22420: LD_INT 2
22422: NEG
22423: PUSH
22424: LD_INT 1
22426: NEG
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PUSH
22432: LD_INT 2
22434: NEG
22435: PUSH
22436: LD_INT 2
22438: NEG
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: LD_INT 2
22446: NEG
22447: PUSH
22448: LD_INT 3
22450: NEG
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 2
22458: PUSH
22459: LD_INT 1
22461: NEG
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: LD_INT 3
22469: PUSH
22470: LD_INT 0
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: LD_INT 3
22479: PUSH
22480: LD_INT 1
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 3
22489: PUSH
22490: LD_INT 2
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 3
22499: PUSH
22500: LD_INT 3
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: LD_INT 2
22509: PUSH
22510: LD_INT 3
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 2
22519: NEG
22520: PUSH
22521: LD_INT 1
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: LD_INT 3
22530: NEG
22531: PUSH
22532: LD_INT 0
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 3
22541: NEG
22542: PUSH
22543: LD_INT 1
22545: NEG
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 3
22553: NEG
22554: PUSH
22555: LD_INT 2
22557: NEG
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: LD_INT 3
22565: NEG
22566: PUSH
22567: LD_INT 3
22569: NEG
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22606: LD_ADDR_VAR 0 45
22610: PUSH
22611: LD_INT 0
22613: PUSH
22614: LD_INT 0
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 0
22623: PUSH
22624: LD_INT 1
22626: NEG
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: PUSH
22632: LD_INT 1
22634: PUSH
22635: LD_INT 0
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 1
22644: PUSH
22645: LD_INT 1
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 0
22654: PUSH
22655: LD_INT 1
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 1
22664: NEG
22665: PUSH
22666: LD_INT 0
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PUSH
22673: LD_INT 1
22675: NEG
22676: PUSH
22677: LD_INT 1
22679: NEG
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PUSH
22685: LD_INT 1
22687: NEG
22688: PUSH
22689: LD_INT 2
22691: NEG
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 0
22699: PUSH
22700: LD_INT 2
22702: NEG
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 1
22710: PUSH
22711: LD_INT 1
22713: NEG
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PUSH
22719: LD_INT 2
22721: PUSH
22722: LD_INT 1
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 2
22731: PUSH
22732: LD_INT 2
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 1
22741: PUSH
22742: LD_INT 2
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 0
22751: PUSH
22752: LD_INT 2
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 1
22761: NEG
22762: PUSH
22763: LD_INT 1
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 2
22772: NEG
22773: PUSH
22774: LD_INT 1
22776: NEG
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 2
22784: NEG
22785: PUSH
22786: LD_INT 2
22788: NEG
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 2
22796: NEG
22797: PUSH
22798: LD_INT 3
22800: NEG
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 1
22808: NEG
22809: PUSH
22810: LD_INT 3
22812: NEG
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 0
22820: PUSH
22821: LD_INT 3
22823: NEG
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PUSH
22829: LD_INT 1
22831: PUSH
22832: LD_INT 2
22834: NEG
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 3
22842: PUSH
22843: LD_INT 2
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 3
22852: PUSH
22853: LD_INT 3
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 2
22862: PUSH
22863: LD_INT 3
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 1
22872: PUSH
22873: LD_INT 3
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 0
22882: PUSH
22883: LD_INT 3
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 1
22892: NEG
22893: PUSH
22894: LD_INT 2
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: LD_INT 3
22903: NEG
22904: PUSH
22905: LD_INT 2
22907: NEG
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: PUSH
22913: LD_INT 3
22915: NEG
22916: PUSH
22917: LD_INT 3
22919: NEG
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22956: LD_ADDR_VAR 0 46
22960: PUSH
22961: LD_INT 0
22963: PUSH
22964: LD_INT 0
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 0
22973: PUSH
22974: LD_INT 1
22976: NEG
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 1
22984: PUSH
22985: LD_INT 0
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 1
22994: PUSH
22995: LD_INT 1
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 0
23004: PUSH
23005: LD_INT 1
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 1
23014: NEG
23015: PUSH
23016: LD_INT 0
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: PUSH
23023: LD_INT 1
23025: NEG
23026: PUSH
23027: LD_INT 1
23029: NEG
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 1
23037: NEG
23038: PUSH
23039: LD_INT 2
23041: NEG
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: LD_INT 0
23049: PUSH
23050: LD_INT 2
23052: NEG
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PUSH
23058: LD_INT 1
23060: PUSH
23061: LD_INT 1
23063: NEG
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PUSH
23069: LD_INT 2
23071: PUSH
23072: LD_INT 0
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: LD_INT 2
23081: PUSH
23082: LD_INT 1
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 1
23091: PUSH
23092: LD_INT 2
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 0
23101: PUSH
23102: LD_INT 2
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PUSH
23109: LD_INT 1
23111: NEG
23112: PUSH
23113: LD_INT 1
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 2
23122: NEG
23123: PUSH
23124: LD_INT 0
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 2
23133: NEG
23134: PUSH
23135: LD_INT 1
23137: NEG
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: LD_INT 1
23145: NEG
23146: PUSH
23147: LD_INT 3
23149: NEG
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PUSH
23155: LD_INT 0
23157: PUSH
23158: LD_INT 3
23160: NEG
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PUSH
23166: LD_INT 1
23168: PUSH
23169: LD_INT 2
23171: NEG
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 2
23179: PUSH
23180: LD_INT 1
23182: NEG
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PUSH
23188: LD_INT 3
23190: PUSH
23191: LD_INT 0
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 3
23200: PUSH
23201: LD_INT 1
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 1
23210: PUSH
23211: LD_INT 3
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 0
23220: PUSH
23221: LD_INT 3
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 1
23230: NEG
23231: PUSH
23232: LD_INT 2
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 2
23241: NEG
23242: PUSH
23243: LD_INT 1
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 3
23252: NEG
23253: PUSH
23254: LD_INT 0
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 3
23263: NEG
23264: PUSH
23265: LD_INT 1
23267: NEG
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23304: LD_ADDR_VAR 0 47
23308: PUSH
23309: LD_INT 0
23311: PUSH
23312: LD_INT 0
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PUSH
23319: LD_INT 0
23321: PUSH
23322: LD_INT 1
23324: NEG
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: PUSH
23330: LD_INT 1
23332: PUSH
23333: LD_INT 0
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: PUSH
23340: LD_INT 1
23342: PUSH
23343: LD_INT 1
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 0
23352: PUSH
23353: LD_INT 1
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 1
23362: NEG
23363: PUSH
23364: LD_INT 0
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PUSH
23371: LD_INT 1
23373: NEG
23374: PUSH
23375: LD_INT 1
23377: NEG
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: PUSH
23383: LD_INT 1
23385: NEG
23386: PUSH
23387: LD_INT 2
23389: NEG
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PUSH
23395: LD_INT 0
23397: PUSH
23398: LD_INT 2
23400: NEG
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 1
23408: PUSH
23409: LD_INT 1
23411: NEG
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PUSH
23417: LD_INT 2
23419: NEG
23420: PUSH
23421: LD_INT 1
23423: NEG
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: LD_INT 2
23431: NEG
23432: PUSH
23433: LD_INT 2
23435: NEG
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23455: LD_ADDR_VAR 0 48
23459: PUSH
23460: LD_INT 0
23462: PUSH
23463: LD_INT 0
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PUSH
23470: LD_INT 0
23472: PUSH
23473: LD_INT 1
23475: NEG
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 1
23483: PUSH
23484: LD_INT 0
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 1
23493: PUSH
23494: LD_INT 1
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 0
23503: PUSH
23504: LD_INT 1
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: LD_INT 1
23513: NEG
23514: PUSH
23515: LD_INT 0
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PUSH
23522: LD_INT 1
23524: NEG
23525: PUSH
23526: LD_INT 1
23528: NEG
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PUSH
23534: LD_INT 1
23536: NEG
23537: PUSH
23538: LD_INT 2
23540: NEG
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: PUSH
23546: LD_INT 0
23548: PUSH
23549: LD_INT 2
23551: NEG
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PUSH
23557: LD_INT 1
23559: PUSH
23560: LD_INT 1
23562: NEG
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 2
23570: PUSH
23571: LD_INT 0
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 2
23580: PUSH
23581: LD_INT 1
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23602: LD_ADDR_VAR 0 49
23606: PUSH
23607: LD_INT 0
23609: PUSH
23610: LD_INT 0
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: PUSH
23617: LD_INT 0
23619: PUSH
23620: LD_INT 1
23622: NEG
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 1
23630: PUSH
23631: LD_INT 0
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 1
23640: PUSH
23641: LD_INT 1
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PUSH
23648: LD_INT 0
23650: PUSH
23651: LD_INT 1
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 1
23660: NEG
23661: PUSH
23662: LD_INT 0
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 1
23671: NEG
23672: PUSH
23673: LD_INT 1
23675: NEG
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: LD_INT 1
23683: PUSH
23684: LD_INT 1
23686: NEG
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PUSH
23692: LD_INT 2
23694: PUSH
23695: LD_INT 0
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PUSH
23702: LD_INT 2
23704: PUSH
23705: LD_INT 1
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 2
23714: PUSH
23715: LD_INT 2
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: LD_INT 1
23724: PUSH
23725: LD_INT 2
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
23746: LD_ADDR_VAR 0 50
23750: PUSH
23751: LD_INT 0
23753: PUSH
23754: LD_INT 0
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: LD_INT 0
23763: PUSH
23764: LD_INT 1
23766: NEG
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 1
23774: PUSH
23775: LD_INT 0
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 1
23784: PUSH
23785: LD_INT 1
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 0
23794: PUSH
23795: LD_INT 1
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 1
23804: NEG
23805: PUSH
23806: LD_INT 0
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 1
23815: NEG
23816: PUSH
23817: LD_INT 1
23819: NEG
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: LD_INT 2
23827: PUSH
23828: LD_INT 1
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 2
23837: PUSH
23838: LD_INT 2
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 1
23847: PUSH
23848: LD_INT 2
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: LD_INT 0
23857: PUSH
23858: LD_INT 2
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 1
23867: NEG
23868: PUSH
23869: LD_INT 1
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
23890: LD_ADDR_VAR 0 51
23894: PUSH
23895: LD_INT 0
23897: PUSH
23898: LD_INT 0
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: LD_INT 0
23907: PUSH
23908: LD_INT 1
23910: NEG
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: LD_INT 1
23918: PUSH
23919: LD_INT 0
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PUSH
23926: LD_INT 1
23928: PUSH
23929: LD_INT 1
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 0
23938: PUSH
23939: LD_INT 1
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 1
23948: NEG
23949: PUSH
23950: LD_INT 0
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 1
23959: NEG
23960: PUSH
23961: LD_INT 1
23963: NEG
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: PUSH
23969: LD_INT 1
23971: PUSH
23972: LD_INT 2
23974: PUSH
23975: EMPTY
23976: LIST
23977: LIST
23978: PUSH
23979: LD_INT 0
23981: PUSH
23982: LD_INT 2
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: PUSH
23989: LD_INT 1
23991: NEG
23992: PUSH
23993: LD_INT 1
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: PUSH
24000: LD_INT 2
24002: NEG
24003: PUSH
24004: LD_INT 0
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PUSH
24011: LD_INT 2
24013: NEG
24014: PUSH
24015: LD_INT 1
24017: NEG
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24037: LD_ADDR_VAR 0 52
24041: PUSH
24042: LD_INT 0
24044: PUSH
24045: LD_INT 0
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 0
24054: PUSH
24055: LD_INT 1
24057: NEG
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PUSH
24063: LD_INT 1
24065: PUSH
24066: LD_INT 0
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: PUSH
24073: LD_INT 1
24075: PUSH
24076: LD_INT 1
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 0
24085: PUSH
24086: LD_INT 1
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 1
24095: NEG
24096: PUSH
24097: LD_INT 0
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: LD_INT 1
24106: NEG
24107: PUSH
24108: LD_INT 1
24110: NEG
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: LD_INT 1
24118: NEG
24119: PUSH
24120: LD_INT 2
24122: NEG
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: LD_INT 1
24130: NEG
24131: PUSH
24132: LD_INT 1
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: LD_INT 2
24141: NEG
24142: PUSH
24143: LD_INT 0
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: LD_INT 2
24152: NEG
24153: PUSH
24154: LD_INT 1
24156: NEG
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: LD_INT 2
24164: NEG
24165: PUSH
24166: LD_INT 2
24168: NEG
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24188: LD_ADDR_VAR 0 53
24192: PUSH
24193: LD_INT 0
24195: PUSH
24196: LD_INT 0
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: LD_INT 0
24205: PUSH
24206: LD_INT 1
24208: NEG
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 1
24216: PUSH
24217: LD_INT 0
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: PUSH
24224: LD_INT 1
24226: PUSH
24227: LD_INT 1
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 0
24236: PUSH
24237: LD_INT 1
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 1
24246: NEG
24247: PUSH
24248: LD_INT 0
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 1
24257: NEG
24258: PUSH
24259: LD_INT 1
24261: NEG
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 1
24269: NEG
24270: PUSH
24271: LD_INT 2
24273: NEG
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 0
24281: PUSH
24282: LD_INT 2
24284: NEG
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 1
24292: PUSH
24293: LD_INT 1
24295: NEG
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 2
24303: PUSH
24304: LD_INT 0
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 2
24313: PUSH
24314: LD_INT 1
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 2
24323: PUSH
24324: LD_INT 2
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 1
24333: PUSH
24334: LD_INT 2
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 0
24343: PUSH
24344: LD_INT 2
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 1
24353: NEG
24354: PUSH
24355: LD_INT 1
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 2
24364: NEG
24365: PUSH
24366: LD_INT 0
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 2
24375: NEG
24376: PUSH
24377: LD_INT 1
24379: NEG
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 2
24387: NEG
24388: PUSH
24389: LD_INT 2
24391: NEG
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24418: LD_ADDR_VAR 0 54
24422: PUSH
24423: LD_INT 0
24425: PUSH
24426: LD_INT 0
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 0
24435: PUSH
24436: LD_INT 1
24438: NEG
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: LD_INT 1
24446: PUSH
24447: LD_INT 0
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 1
24456: PUSH
24457: LD_INT 1
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 0
24466: PUSH
24467: LD_INT 1
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 1
24476: NEG
24477: PUSH
24478: LD_INT 0
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PUSH
24485: LD_INT 1
24487: NEG
24488: PUSH
24489: LD_INT 1
24491: NEG
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 1
24499: NEG
24500: PUSH
24501: LD_INT 2
24503: NEG
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 0
24511: PUSH
24512: LD_INT 2
24514: NEG
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 1
24522: PUSH
24523: LD_INT 1
24525: NEG
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 2
24533: PUSH
24534: LD_INT 0
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 2
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 2
24553: PUSH
24554: LD_INT 2
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 1
24563: PUSH
24564: LD_INT 2
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 0
24573: PUSH
24574: LD_INT 2
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 1
24583: NEG
24584: PUSH
24585: LD_INT 1
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 2
24594: NEG
24595: PUSH
24596: LD_INT 0
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 2
24605: NEG
24606: PUSH
24607: LD_INT 1
24609: NEG
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 2
24617: NEG
24618: PUSH
24619: LD_INT 2
24621: NEG
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24648: LD_ADDR_VAR 0 55
24652: PUSH
24653: LD_INT 0
24655: PUSH
24656: LD_INT 0
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: LD_INT 0
24665: PUSH
24666: LD_INT 1
24668: NEG
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 1
24676: PUSH
24677: LD_INT 0
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 1
24686: PUSH
24687: LD_INT 1
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 0
24696: PUSH
24697: LD_INT 1
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 1
24706: NEG
24707: PUSH
24708: LD_INT 0
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 1
24717: NEG
24718: PUSH
24719: LD_INT 1
24721: NEG
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PUSH
24727: LD_INT 1
24729: NEG
24730: PUSH
24731: LD_INT 2
24733: NEG
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 0
24741: PUSH
24742: LD_INT 2
24744: NEG
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: PUSH
24750: LD_INT 1
24752: PUSH
24753: LD_INT 1
24755: NEG
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: LD_INT 2
24763: PUSH
24764: LD_INT 0
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: LD_INT 2
24773: PUSH
24774: LD_INT 1
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: LD_INT 2
24783: PUSH
24784: LD_INT 2
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 1
24793: PUSH
24794: LD_INT 2
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 0
24803: PUSH
24804: LD_INT 2
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 1
24813: NEG
24814: PUSH
24815: LD_INT 1
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: LD_INT 2
24824: NEG
24825: PUSH
24826: LD_INT 0
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PUSH
24833: LD_INT 2
24835: NEG
24836: PUSH
24837: LD_INT 1
24839: NEG
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 2
24847: NEG
24848: PUSH
24849: LD_INT 2
24851: NEG
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24878: LD_ADDR_VAR 0 56
24882: PUSH
24883: LD_INT 0
24885: PUSH
24886: LD_INT 0
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PUSH
24893: LD_INT 0
24895: PUSH
24896: LD_INT 1
24898: NEG
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PUSH
24904: LD_INT 1
24906: PUSH
24907: LD_INT 0
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: LD_INT 1
24916: PUSH
24917: LD_INT 1
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 0
24926: PUSH
24927: LD_INT 1
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: LD_INT 1
24936: NEG
24937: PUSH
24938: LD_INT 0
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PUSH
24945: LD_INT 1
24947: NEG
24948: PUSH
24949: LD_INT 1
24951: NEG
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 1
24959: NEG
24960: PUSH
24961: LD_INT 2
24963: NEG
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 0
24971: PUSH
24972: LD_INT 2
24974: NEG
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 1
24982: PUSH
24983: LD_INT 1
24985: NEG
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 2
24993: PUSH
24994: LD_INT 0
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 2
25003: PUSH
25004: LD_INT 1
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 2
25013: PUSH
25014: LD_INT 2
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 1
25023: PUSH
25024: LD_INT 2
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 0
25033: PUSH
25034: LD_INT 2
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 1
25043: NEG
25044: PUSH
25045: LD_INT 1
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 2
25054: NEG
25055: PUSH
25056: LD_INT 0
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 2
25065: NEG
25066: PUSH
25067: LD_INT 1
25069: NEG
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 2
25077: NEG
25078: PUSH
25079: LD_INT 2
25081: NEG
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25108: LD_ADDR_VAR 0 57
25112: PUSH
25113: LD_INT 0
25115: PUSH
25116: LD_INT 0
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: LD_INT 0
25125: PUSH
25126: LD_INT 1
25128: NEG
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: LD_INT 1
25136: PUSH
25137: LD_INT 0
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 1
25146: PUSH
25147: LD_INT 1
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: PUSH
25154: LD_INT 0
25156: PUSH
25157: LD_INT 1
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: PUSH
25164: LD_INT 1
25166: NEG
25167: PUSH
25168: LD_INT 0
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: LD_INT 1
25177: NEG
25178: PUSH
25179: LD_INT 1
25181: NEG
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 1
25189: NEG
25190: PUSH
25191: LD_INT 2
25193: NEG
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: LD_INT 0
25201: PUSH
25202: LD_INT 2
25204: NEG
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 1
25212: PUSH
25213: LD_INT 1
25215: NEG
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 2
25223: PUSH
25224: LD_INT 0
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: LD_INT 2
25233: PUSH
25234: LD_INT 1
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PUSH
25241: LD_INT 2
25243: PUSH
25244: LD_INT 2
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 1
25253: PUSH
25254: LD_INT 2
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: LD_INT 0
25263: PUSH
25264: LD_INT 2
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 1
25273: NEG
25274: PUSH
25275: LD_INT 1
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: LD_INT 2
25284: NEG
25285: PUSH
25286: LD_INT 0
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 2
25295: NEG
25296: PUSH
25297: LD_INT 1
25299: NEG
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 2
25307: NEG
25308: PUSH
25309: LD_INT 2
25311: NEG
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25338: LD_ADDR_VAR 0 58
25342: PUSH
25343: LD_INT 0
25345: PUSH
25346: LD_INT 0
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 0
25355: PUSH
25356: LD_INT 1
25358: NEG
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 1
25366: PUSH
25367: LD_INT 0
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 1
25376: PUSH
25377: LD_INT 1
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 0
25386: PUSH
25387: LD_INT 1
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: LD_INT 1
25396: NEG
25397: PUSH
25398: LD_INT 0
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 1
25407: NEG
25408: PUSH
25409: LD_INT 1
25411: NEG
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: LD_INT 1
25419: NEG
25420: PUSH
25421: LD_INT 2
25423: NEG
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 0
25431: PUSH
25432: LD_INT 2
25434: NEG
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 1
25442: PUSH
25443: LD_INT 1
25445: NEG
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 2
25453: PUSH
25454: LD_INT 0
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 2
25463: PUSH
25464: LD_INT 1
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PUSH
25471: LD_INT 2
25473: PUSH
25474: LD_INT 2
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 1
25483: PUSH
25484: LD_INT 2
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 0
25493: PUSH
25494: LD_INT 2
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 1
25503: NEG
25504: PUSH
25505: LD_INT 1
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 2
25514: NEG
25515: PUSH
25516: LD_INT 0
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 2
25525: NEG
25526: PUSH
25527: LD_INT 1
25529: NEG
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 2
25537: NEG
25538: PUSH
25539: LD_INT 2
25541: NEG
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25568: LD_ADDR_VAR 0 59
25572: PUSH
25573: LD_INT 0
25575: PUSH
25576: LD_INT 0
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 0
25585: PUSH
25586: LD_INT 1
25588: NEG
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 1
25596: PUSH
25597: LD_INT 0
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 1
25606: PUSH
25607: LD_INT 1
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 0
25616: PUSH
25617: LD_INT 1
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PUSH
25624: LD_INT 1
25626: NEG
25627: PUSH
25628: LD_INT 0
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 1
25637: NEG
25638: PUSH
25639: LD_INT 1
25641: NEG
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25656: LD_ADDR_VAR 0 60
25660: PUSH
25661: LD_INT 0
25663: PUSH
25664: LD_INT 0
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 0
25673: PUSH
25674: LD_INT 1
25676: NEG
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 1
25684: PUSH
25685: LD_INT 0
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: LD_INT 1
25694: PUSH
25695: LD_INT 1
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 0
25704: PUSH
25705: LD_INT 1
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 1
25714: NEG
25715: PUSH
25716: LD_INT 0
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 1
25725: NEG
25726: PUSH
25727: LD_INT 1
25729: NEG
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25744: LD_ADDR_VAR 0 61
25748: PUSH
25749: LD_INT 0
25751: PUSH
25752: LD_INT 0
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 0
25761: PUSH
25762: LD_INT 1
25764: NEG
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 1
25772: PUSH
25773: LD_INT 0
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 1
25782: PUSH
25783: LD_INT 1
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 0
25792: PUSH
25793: LD_INT 1
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: LD_INT 1
25802: NEG
25803: PUSH
25804: LD_INT 0
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 1
25813: NEG
25814: PUSH
25815: LD_INT 1
25817: NEG
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25832: LD_ADDR_VAR 0 62
25836: PUSH
25837: LD_INT 0
25839: PUSH
25840: LD_INT 0
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 0
25849: PUSH
25850: LD_INT 1
25852: NEG
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: LD_INT 1
25860: PUSH
25861: LD_INT 0
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PUSH
25868: LD_INT 1
25870: PUSH
25871: LD_INT 1
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: PUSH
25878: LD_INT 0
25880: PUSH
25881: LD_INT 1
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: LD_INT 1
25890: NEG
25891: PUSH
25892: LD_INT 0
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 1
25901: NEG
25902: PUSH
25903: LD_INT 1
25905: NEG
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25920: LD_ADDR_VAR 0 63
25924: PUSH
25925: LD_INT 0
25927: PUSH
25928: LD_INT 0
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 0
25937: PUSH
25938: LD_INT 1
25940: NEG
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 1
25948: PUSH
25949: LD_INT 0
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 1
25958: PUSH
25959: LD_INT 1
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 0
25968: PUSH
25969: LD_INT 1
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: LD_INT 1
25978: NEG
25979: PUSH
25980: LD_INT 0
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: LD_INT 1
25989: NEG
25990: PUSH
25991: LD_INT 1
25993: NEG
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26008: LD_ADDR_VAR 0 64
26012: PUSH
26013: LD_INT 0
26015: PUSH
26016: LD_INT 0
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 0
26025: PUSH
26026: LD_INT 1
26028: NEG
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 1
26036: PUSH
26037: LD_INT 0
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 1
26046: PUSH
26047: LD_INT 1
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 0
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 1
26066: NEG
26067: PUSH
26068: LD_INT 0
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: LD_INT 1
26077: NEG
26078: PUSH
26079: LD_INT 1
26081: NEG
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: ST_TO_ADDR
// end ; 1 :
26096: GO 31993
26098: LD_INT 1
26100: DOUBLE
26101: EQUAL
26102: IFTRUE 26106
26104: GO 28729
26106: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26107: LD_ADDR_VAR 0 11
26111: PUSH
26112: LD_INT 1
26114: NEG
26115: PUSH
26116: LD_INT 3
26118: NEG
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: LD_INT 0
26126: PUSH
26127: LD_INT 3
26129: NEG
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 1
26137: PUSH
26138: LD_INT 2
26140: NEG
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: LIST
26150: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26151: LD_ADDR_VAR 0 12
26155: PUSH
26156: LD_INT 2
26158: PUSH
26159: LD_INT 1
26161: NEG
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 3
26169: PUSH
26170: LD_INT 0
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 3
26179: PUSH
26180: LD_INT 1
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: LIST
26191: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26192: LD_ADDR_VAR 0 13
26196: PUSH
26197: LD_INT 3
26199: PUSH
26200: LD_INT 2
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 3
26209: PUSH
26210: LD_INT 3
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 2
26219: PUSH
26220: LD_INT 3
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: LIST
26231: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26232: LD_ADDR_VAR 0 14
26236: PUSH
26237: LD_INT 1
26239: PUSH
26240: LD_INT 3
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 0
26249: PUSH
26250: LD_INT 3
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 1
26259: NEG
26260: PUSH
26261: LD_INT 2
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: LIST
26272: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26273: LD_ADDR_VAR 0 15
26277: PUSH
26278: LD_INT 2
26280: NEG
26281: PUSH
26282: LD_INT 1
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: LD_INT 3
26291: NEG
26292: PUSH
26293: LD_INT 0
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 3
26302: NEG
26303: PUSH
26304: LD_INT 1
26306: NEG
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: LIST
26316: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26317: LD_ADDR_VAR 0 16
26321: PUSH
26322: LD_INT 2
26324: NEG
26325: PUSH
26326: LD_INT 3
26328: NEG
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 3
26336: NEG
26337: PUSH
26338: LD_INT 2
26340: NEG
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 3
26348: NEG
26349: PUSH
26350: LD_INT 3
26352: NEG
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: LIST
26362: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26363: LD_ADDR_VAR 0 17
26367: PUSH
26368: LD_INT 1
26370: NEG
26371: PUSH
26372: LD_INT 3
26374: NEG
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 0
26382: PUSH
26383: LD_INT 3
26385: NEG
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: LD_INT 1
26393: PUSH
26394: LD_INT 2
26396: NEG
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: LIST
26406: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26407: LD_ADDR_VAR 0 18
26411: PUSH
26412: LD_INT 2
26414: PUSH
26415: LD_INT 1
26417: NEG
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 3
26425: PUSH
26426: LD_INT 0
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 3
26435: PUSH
26436: LD_INT 1
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: LIST
26447: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26448: LD_ADDR_VAR 0 19
26452: PUSH
26453: LD_INT 3
26455: PUSH
26456: LD_INT 2
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 3
26465: PUSH
26466: LD_INT 3
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 2
26475: PUSH
26476: LD_INT 3
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: LIST
26487: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26488: LD_ADDR_VAR 0 20
26492: PUSH
26493: LD_INT 1
26495: PUSH
26496: LD_INT 3
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 0
26505: PUSH
26506: LD_INT 3
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 1
26515: NEG
26516: PUSH
26517: LD_INT 2
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: LIST
26528: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26529: LD_ADDR_VAR 0 21
26533: PUSH
26534: LD_INT 2
26536: NEG
26537: PUSH
26538: LD_INT 1
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 3
26547: NEG
26548: PUSH
26549: LD_INT 0
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 3
26558: NEG
26559: PUSH
26560: LD_INT 1
26562: NEG
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: LIST
26572: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26573: LD_ADDR_VAR 0 22
26577: PUSH
26578: LD_INT 2
26580: NEG
26581: PUSH
26582: LD_INT 3
26584: NEG
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 3
26592: NEG
26593: PUSH
26594: LD_INT 2
26596: NEG
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 3
26604: NEG
26605: PUSH
26606: LD_INT 3
26608: NEG
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: LIST
26618: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
26619: LD_ADDR_VAR 0 23
26623: PUSH
26624: LD_INT 0
26626: PUSH
26627: LD_INT 3
26629: NEG
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 1
26637: NEG
26638: PUSH
26639: LD_INT 4
26641: NEG
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 1
26649: PUSH
26650: LD_INT 3
26652: NEG
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: LIST
26662: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
26663: LD_ADDR_VAR 0 24
26667: PUSH
26668: LD_INT 3
26670: PUSH
26671: LD_INT 0
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 3
26680: PUSH
26681: LD_INT 1
26683: NEG
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 4
26691: PUSH
26692: LD_INT 1
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: LIST
26703: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
26704: LD_ADDR_VAR 0 25
26708: PUSH
26709: LD_INT 3
26711: PUSH
26712: LD_INT 3
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 4
26721: PUSH
26722: LD_INT 3
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 3
26731: PUSH
26732: LD_INT 4
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: LIST
26743: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
26744: LD_ADDR_VAR 0 26
26748: PUSH
26749: LD_INT 0
26751: PUSH
26752: LD_INT 3
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 1
26761: PUSH
26762: LD_INT 4
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: LD_INT 1
26771: NEG
26772: PUSH
26773: LD_INT 3
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: LIST
26784: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
26785: LD_ADDR_VAR 0 27
26789: PUSH
26790: LD_INT 3
26792: NEG
26793: PUSH
26794: LD_INT 0
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 3
26803: NEG
26804: PUSH
26805: LD_INT 1
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 4
26814: NEG
26815: PUSH
26816: LD_INT 1
26818: NEG
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: LIST
26828: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
26829: LD_ADDR_VAR 0 28
26833: PUSH
26834: LD_INT 3
26836: NEG
26837: PUSH
26838: LD_INT 3
26840: NEG
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 3
26848: NEG
26849: PUSH
26850: LD_INT 4
26852: NEG
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 4
26860: NEG
26861: PUSH
26862: LD_INT 3
26864: NEG
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: LIST
26874: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
26875: LD_ADDR_VAR 0 29
26879: PUSH
26880: LD_INT 1
26882: NEG
26883: PUSH
26884: LD_INT 3
26886: NEG
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 0
26894: PUSH
26895: LD_INT 3
26897: NEG
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 1
26905: PUSH
26906: LD_INT 2
26908: NEG
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 1
26916: NEG
26917: PUSH
26918: LD_INT 4
26920: NEG
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 0
26928: PUSH
26929: LD_INT 4
26931: NEG
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 1
26939: PUSH
26940: LD_INT 3
26942: NEG
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: PUSH
26948: LD_INT 1
26950: NEG
26951: PUSH
26952: LD_INT 5
26954: NEG
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 0
26962: PUSH
26963: LD_INT 5
26965: NEG
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 1
26973: PUSH
26974: LD_INT 4
26976: NEG
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: LD_INT 1
26984: NEG
26985: PUSH
26986: LD_INT 6
26988: NEG
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 0
26996: PUSH
26997: LD_INT 6
26999: NEG
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 1
27007: PUSH
27008: LD_INT 5
27010: NEG
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27030: LD_ADDR_VAR 0 30
27034: PUSH
27035: LD_INT 2
27037: PUSH
27038: LD_INT 1
27040: NEG
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 3
27048: PUSH
27049: LD_INT 0
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 3
27058: PUSH
27059: LD_INT 1
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 3
27068: PUSH
27069: LD_INT 1
27071: NEG
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 4
27079: PUSH
27080: LD_INT 0
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: LD_INT 4
27089: PUSH
27090: LD_INT 1
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 4
27099: PUSH
27100: LD_INT 1
27102: NEG
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 5
27110: PUSH
27111: LD_INT 0
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 5
27120: PUSH
27121: LD_INT 1
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 5
27130: PUSH
27131: LD_INT 1
27133: NEG
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 6
27141: PUSH
27142: LD_INT 0
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 6
27151: PUSH
27152: LD_INT 1
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
27173: LD_ADDR_VAR 0 31
27177: PUSH
27178: LD_INT 3
27180: PUSH
27181: LD_INT 2
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 3
27190: PUSH
27191: LD_INT 3
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 2
27200: PUSH
27201: LD_INT 3
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 4
27210: PUSH
27211: LD_INT 3
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 4
27220: PUSH
27221: LD_INT 4
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 3
27230: PUSH
27231: LD_INT 4
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 5
27240: PUSH
27241: LD_INT 4
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: LD_INT 5
27250: PUSH
27251: LD_INT 5
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: LD_INT 4
27260: PUSH
27261: LD_INT 5
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 6
27270: PUSH
27271: LD_INT 5
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 6
27280: PUSH
27281: LD_INT 6
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 5
27290: PUSH
27291: LD_INT 6
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
27312: LD_ADDR_VAR 0 32
27316: PUSH
27317: LD_INT 1
27319: PUSH
27320: LD_INT 3
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: LD_INT 0
27329: PUSH
27330: LD_INT 3
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 1
27339: NEG
27340: PUSH
27341: LD_INT 2
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: LD_INT 1
27350: PUSH
27351: LD_INT 4
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: LD_INT 0
27360: PUSH
27361: LD_INT 4
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: LD_INT 1
27370: NEG
27371: PUSH
27372: LD_INT 3
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: LD_INT 1
27381: PUSH
27382: LD_INT 5
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: LD_INT 0
27391: PUSH
27392: LD_INT 5
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: LD_INT 1
27401: NEG
27402: PUSH
27403: LD_INT 4
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: LD_INT 1
27412: PUSH
27413: LD_INT 6
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 0
27422: PUSH
27423: LD_INT 6
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 1
27432: NEG
27433: PUSH
27434: LD_INT 5
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
27455: LD_ADDR_VAR 0 33
27459: PUSH
27460: LD_INT 2
27462: NEG
27463: PUSH
27464: LD_INT 1
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 3
27473: NEG
27474: PUSH
27475: LD_INT 0
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: LD_INT 3
27484: NEG
27485: PUSH
27486: LD_INT 1
27488: NEG
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 3
27496: NEG
27497: PUSH
27498: LD_INT 1
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 4
27507: NEG
27508: PUSH
27509: LD_INT 0
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 4
27518: NEG
27519: PUSH
27520: LD_INT 1
27522: NEG
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: LD_INT 4
27530: NEG
27531: PUSH
27532: LD_INT 1
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 5
27541: NEG
27542: PUSH
27543: LD_INT 0
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 5
27552: NEG
27553: PUSH
27554: LD_INT 1
27556: NEG
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 5
27564: NEG
27565: PUSH
27566: LD_INT 1
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: LD_INT 6
27575: NEG
27576: PUSH
27577: LD_INT 0
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 6
27586: NEG
27587: PUSH
27588: LD_INT 1
27590: NEG
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
27610: LD_ADDR_VAR 0 34
27614: PUSH
27615: LD_INT 2
27617: NEG
27618: PUSH
27619: LD_INT 3
27621: NEG
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: LD_INT 3
27629: NEG
27630: PUSH
27631: LD_INT 2
27633: NEG
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 3
27641: NEG
27642: PUSH
27643: LD_INT 3
27645: NEG
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 3
27653: NEG
27654: PUSH
27655: LD_INT 4
27657: NEG
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 4
27665: NEG
27666: PUSH
27667: LD_INT 3
27669: NEG
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 4
27677: NEG
27678: PUSH
27679: LD_INT 4
27681: NEG
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 4
27689: NEG
27690: PUSH
27691: LD_INT 5
27693: NEG
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 5
27701: NEG
27702: PUSH
27703: LD_INT 4
27705: NEG
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 5
27713: NEG
27714: PUSH
27715: LD_INT 5
27717: NEG
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 5
27725: NEG
27726: PUSH
27727: LD_INT 6
27729: NEG
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_INT 6
27737: NEG
27738: PUSH
27739: LD_INT 5
27741: NEG
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 6
27749: NEG
27750: PUSH
27751: LD_INT 6
27753: NEG
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
27773: LD_ADDR_VAR 0 41
27777: PUSH
27778: LD_INT 0
27780: PUSH
27781: LD_INT 2
27783: NEG
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 1
27791: NEG
27792: PUSH
27793: LD_INT 3
27795: NEG
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 1
27803: PUSH
27804: LD_INT 2
27806: NEG
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: LIST
27816: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
27817: LD_ADDR_VAR 0 42
27821: PUSH
27822: LD_INT 2
27824: PUSH
27825: LD_INT 0
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 2
27834: PUSH
27835: LD_INT 1
27837: NEG
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 3
27845: PUSH
27846: LD_INT 1
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: LIST
27857: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
27858: LD_ADDR_VAR 0 43
27862: PUSH
27863: LD_INT 2
27865: PUSH
27866: LD_INT 2
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 3
27875: PUSH
27876: LD_INT 2
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 2
27885: PUSH
27886: LD_INT 3
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: LIST
27897: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
27898: LD_ADDR_VAR 0 44
27902: PUSH
27903: LD_INT 0
27905: PUSH
27906: LD_INT 2
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 1
27915: PUSH
27916: LD_INT 3
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 1
27925: NEG
27926: PUSH
27927: LD_INT 2
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: LIST
27938: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27939: LD_ADDR_VAR 0 45
27943: PUSH
27944: LD_INT 2
27946: NEG
27947: PUSH
27948: LD_INT 0
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 2
27957: NEG
27958: PUSH
27959: LD_INT 1
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 3
27968: NEG
27969: PUSH
27970: LD_INT 1
27972: NEG
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: LIST
27982: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
27983: LD_ADDR_VAR 0 46
27987: PUSH
27988: LD_INT 2
27990: NEG
27991: PUSH
27992: LD_INT 2
27994: NEG
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 2
28002: NEG
28003: PUSH
28004: LD_INT 3
28006: NEG
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 3
28014: NEG
28015: PUSH
28016: LD_INT 2
28018: NEG
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: LIST
28028: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28029: LD_ADDR_VAR 0 47
28033: PUSH
28034: LD_INT 2
28036: NEG
28037: PUSH
28038: LD_INT 3
28040: NEG
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 1
28048: NEG
28049: PUSH
28050: LD_INT 3
28052: NEG
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28062: LD_ADDR_VAR 0 48
28066: PUSH
28067: LD_INT 1
28069: PUSH
28070: LD_INT 2
28072: NEG
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 2
28080: PUSH
28081: LD_INT 1
28083: NEG
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
28093: LD_ADDR_VAR 0 49
28097: PUSH
28098: LD_INT 3
28100: PUSH
28101: LD_INT 1
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 3
28110: PUSH
28111: LD_INT 2
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
28122: LD_ADDR_VAR 0 50
28126: PUSH
28127: LD_INT 2
28129: PUSH
28130: LD_INT 3
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 1
28139: PUSH
28140: LD_INT 3
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28151: LD_ADDR_VAR 0 51
28155: PUSH
28156: LD_INT 1
28158: NEG
28159: PUSH
28160: LD_INT 2
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 2
28169: NEG
28170: PUSH
28171: LD_INT 1
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28182: LD_ADDR_VAR 0 52
28186: PUSH
28187: LD_INT 3
28189: NEG
28190: PUSH
28191: LD_INT 1
28193: NEG
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 3
28201: NEG
28202: PUSH
28203: LD_INT 2
28205: NEG
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28215: LD_ADDR_VAR 0 53
28219: PUSH
28220: LD_INT 1
28222: NEG
28223: PUSH
28224: LD_INT 3
28226: NEG
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 0
28234: PUSH
28235: LD_INT 3
28237: NEG
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 1
28245: PUSH
28246: LD_INT 2
28248: NEG
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: LIST
28258: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28259: LD_ADDR_VAR 0 54
28263: PUSH
28264: LD_INT 2
28266: PUSH
28267: LD_INT 1
28269: NEG
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: LD_INT 3
28277: PUSH
28278: LD_INT 0
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: LD_INT 3
28287: PUSH
28288: LD_INT 1
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: LIST
28299: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28300: LD_ADDR_VAR 0 55
28304: PUSH
28305: LD_INT 3
28307: PUSH
28308: LD_INT 2
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 3
28317: PUSH
28318: LD_INT 3
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 2
28327: PUSH
28328: LD_INT 3
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: LIST
28339: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28340: LD_ADDR_VAR 0 56
28344: PUSH
28345: LD_INT 1
28347: PUSH
28348: LD_INT 3
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 0
28357: PUSH
28358: LD_INT 3
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 1
28367: NEG
28368: PUSH
28369: LD_INT 2
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: LIST
28380: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28381: LD_ADDR_VAR 0 57
28385: PUSH
28386: LD_INT 2
28388: NEG
28389: PUSH
28390: LD_INT 1
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 3
28399: NEG
28400: PUSH
28401: LD_INT 0
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 3
28410: NEG
28411: PUSH
28412: LD_INT 1
28414: NEG
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: LIST
28424: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28425: LD_ADDR_VAR 0 58
28429: PUSH
28430: LD_INT 2
28432: NEG
28433: PUSH
28434: LD_INT 3
28436: NEG
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 3
28444: NEG
28445: PUSH
28446: LD_INT 2
28448: NEG
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: LD_INT 3
28456: NEG
28457: PUSH
28458: LD_INT 3
28460: NEG
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: LIST
28470: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
28471: LD_ADDR_VAR 0 59
28475: PUSH
28476: LD_INT 1
28478: NEG
28479: PUSH
28480: LD_INT 2
28482: NEG
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 0
28490: PUSH
28491: LD_INT 2
28493: NEG
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 1
28501: PUSH
28502: LD_INT 1
28504: NEG
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: LIST
28514: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28515: LD_ADDR_VAR 0 60
28519: PUSH
28520: LD_INT 1
28522: PUSH
28523: LD_INT 1
28525: NEG
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 2
28533: PUSH
28534: LD_INT 0
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 2
28543: PUSH
28544: LD_INT 1
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: LIST
28555: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28556: LD_ADDR_VAR 0 61
28560: PUSH
28561: LD_INT 2
28563: PUSH
28564: LD_INT 1
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 2
28573: PUSH
28574: LD_INT 2
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 1
28583: PUSH
28584: LD_INT 2
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: LIST
28595: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28596: LD_ADDR_VAR 0 62
28600: PUSH
28601: LD_INT 1
28603: PUSH
28604: LD_INT 2
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 0
28613: PUSH
28614: LD_INT 2
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 1
28623: NEG
28624: PUSH
28625: LD_INT 1
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: LIST
28636: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28637: LD_ADDR_VAR 0 63
28641: PUSH
28642: LD_INT 1
28644: NEG
28645: PUSH
28646: LD_INT 1
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 2
28655: NEG
28656: PUSH
28657: LD_INT 0
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 2
28666: NEG
28667: PUSH
28668: LD_INT 1
28670: NEG
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: LIST
28680: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28681: LD_ADDR_VAR 0 64
28685: PUSH
28686: LD_INT 1
28688: NEG
28689: PUSH
28690: LD_INT 2
28692: NEG
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 2
28700: NEG
28701: PUSH
28702: LD_INT 1
28704: NEG
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 2
28712: NEG
28713: PUSH
28714: LD_INT 2
28716: NEG
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: LIST
28726: ST_TO_ADDR
// end ; 2 :
28727: GO 31993
28729: LD_INT 2
28731: DOUBLE
28732: EQUAL
28733: IFTRUE 28737
28735: GO 31992
28737: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
28738: LD_ADDR_VAR 0 29
28742: PUSH
28743: LD_INT 4
28745: PUSH
28746: LD_INT 0
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 4
28755: PUSH
28756: LD_INT 1
28758: NEG
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 5
28766: PUSH
28767: LD_INT 0
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 5
28776: PUSH
28777: LD_INT 1
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 4
28786: PUSH
28787: LD_INT 1
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 3
28796: PUSH
28797: LD_INT 0
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 3
28806: PUSH
28807: LD_INT 1
28809: NEG
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 3
28817: PUSH
28818: LD_INT 2
28820: NEG
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PUSH
28826: LD_INT 5
28828: PUSH
28829: LD_INT 2
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 3
28838: PUSH
28839: LD_INT 3
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 3
28848: PUSH
28849: LD_INT 2
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 4
28858: PUSH
28859: LD_INT 3
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: LD_INT 4
28868: PUSH
28869: LD_INT 4
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: LD_INT 3
28878: PUSH
28879: LD_INT 4
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 2
28888: PUSH
28889: LD_INT 3
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: LD_INT 2
28898: PUSH
28899: LD_INT 2
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 4
28908: PUSH
28909: LD_INT 2
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 2
28918: PUSH
28919: LD_INT 4
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: LD_INT 0
28928: PUSH
28929: LD_INT 4
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 0
28938: PUSH
28939: LD_INT 3
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 1
28948: PUSH
28949: LD_INT 4
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: LD_INT 1
28958: PUSH
28959: LD_INT 5
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: LD_INT 0
28968: PUSH
28969: LD_INT 5
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 1
28978: NEG
28979: PUSH
28980: LD_INT 4
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 1
28989: NEG
28990: PUSH
28991: LD_INT 3
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 2
29000: PUSH
29001: LD_INT 5
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 2
29010: NEG
29011: PUSH
29012: LD_INT 3
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 3
29021: NEG
29022: PUSH
29023: LD_INT 0
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: LD_INT 3
29032: NEG
29033: PUSH
29034: LD_INT 1
29036: NEG
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: LD_INT 2
29044: NEG
29045: PUSH
29046: LD_INT 0
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 2
29055: NEG
29056: PUSH
29057: LD_INT 1
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 3
29066: NEG
29067: PUSH
29068: LD_INT 1
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 4
29077: NEG
29078: PUSH
29079: LD_INT 0
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 4
29088: NEG
29089: PUSH
29090: LD_INT 1
29092: NEG
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 4
29100: NEG
29101: PUSH
29102: LD_INT 2
29104: NEG
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 2
29112: NEG
29113: PUSH
29114: LD_INT 2
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 4
29123: NEG
29124: PUSH
29125: LD_INT 4
29127: NEG
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 4
29135: NEG
29136: PUSH
29137: LD_INT 5
29139: NEG
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 3
29147: NEG
29148: PUSH
29149: LD_INT 4
29151: NEG
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PUSH
29157: LD_INT 3
29159: NEG
29160: PUSH
29161: LD_INT 3
29163: NEG
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 4
29171: NEG
29172: PUSH
29173: LD_INT 3
29175: NEG
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 5
29183: NEG
29184: PUSH
29185: LD_INT 4
29187: NEG
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 5
29195: NEG
29196: PUSH
29197: LD_INT 5
29199: NEG
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: LD_INT 3
29207: NEG
29208: PUSH
29209: LD_INT 5
29211: NEG
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 5
29219: NEG
29220: PUSH
29221: LD_INT 3
29223: NEG
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
29276: LD_ADDR_VAR 0 30
29280: PUSH
29281: LD_INT 4
29283: PUSH
29284: LD_INT 4
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 4
29293: PUSH
29294: LD_INT 3
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 5
29303: PUSH
29304: LD_INT 4
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 5
29313: PUSH
29314: LD_INT 5
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 4
29323: PUSH
29324: LD_INT 5
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 3
29333: PUSH
29334: LD_INT 4
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 3
29343: PUSH
29344: LD_INT 3
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 5
29353: PUSH
29354: LD_INT 3
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 3
29363: PUSH
29364: LD_INT 5
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 0
29373: PUSH
29374: LD_INT 3
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: LD_INT 0
29383: PUSH
29384: LD_INT 2
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: LD_INT 1
29393: PUSH
29394: LD_INT 3
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 1
29403: PUSH
29404: LD_INT 4
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 0
29413: PUSH
29414: LD_INT 4
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 1
29423: NEG
29424: PUSH
29425: LD_INT 3
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: PUSH
29432: LD_INT 1
29434: NEG
29435: PUSH
29436: LD_INT 2
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 2
29445: PUSH
29446: LD_INT 4
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 2
29455: NEG
29456: PUSH
29457: LD_INT 2
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PUSH
29464: LD_INT 4
29466: NEG
29467: PUSH
29468: LD_INT 0
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 4
29477: NEG
29478: PUSH
29479: LD_INT 1
29481: NEG
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 3
29489: NEG
29490: PUSH
29491: LD_INT 0
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 3
29500: NEG
29501: PUSH
29502: LD_INT 1
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: LD_INT 4
29511: NEG
29512: PUSH
29513: LD_INT 1
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 5
29522: NEG
29523: PUSH
29524: LD_INT 0
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: LD_INT 5
29533: NEG
29534: PUSH
29535: LD_INT 1
29537: NEG
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: PUSH
29543: LD_INT 5
29545: NEG
29546: PUSH
29547: LD_INT 2
29549: NEG
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 3
29557: NEG
29558: PUSH
29559: LD_INT 2
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: LD_INT 3
29568: NEG
29569: PUSH
29570: LD_INT 3
29572: NEG
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 3
29580: NEG
29581: PUSH
29582: LD_INT 4
29584: NEG
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 2
29592: NEG
29593: PUSH
29594: LD_INT 3
29596: NEG
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 2
29604: NEG
29605: PUSH
29606: LD_INT 2
29608: NEG
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 3
29616: NEG
29617: PUSH
29618: LD_INT 2
29620: NEG
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 4
29628: NEG
29629: PUSH
29630: LD_INT 3
29632: NEG
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 4
29640: NEG
29641: PUSH
29642: LD_INT 4
29644: NEG
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: LD_INT 2
29652: NEG
29653: PUSH
29654: LD_INT 4
29656: NEG
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 4
29664: NEG
29665: PUSH
29666: LD_INT 2
29668: NEG
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 0
29676: PUSH
29677: LD_INT 4
29679: NEG
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 0
29687: PUSH
29688: LD_INT 5
29690: NEG
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: LD_INT 1
29698: PUSH
29699: LD_INT 4
29701: NEG
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 1
29709: PUSH
29710: LD_INT 3
29712: NEG
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 0
29720: PUSH
29721: LD_INT 3
29723: NEG
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 1
29731: NEG
29732: PUSH
29733: LD_INT 4
29735: NEG
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 1
29743: NEG
29744: PUSH
29745: LD_INT 5
29747: NEG
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 2
29755: PUSH
29756: LD_INT 3
29758: NEG
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 2
29766: NEG
29767: PUSH
29768: LD_INT 5
29770: NEG
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
29823: LD_ADDR_VAR 0 31
29827: PUSH
29828: LD_INT 0
29830: PUSH
29831: LD_INT 4
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 0
29840: PUSH
29841: LD_INT 3
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 1
29850: PUSH
29851: LD_INT 4
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 1
29860: PUSH
29861: LD_INT 5
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 0
29870: PUSH
29871: LD_INT 5
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 1
29880: NEG
29881: PUSH
29882: LD_INT 4
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 1
29891: NEG
29892: PUSH
29893: LD_INT 3
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 2
29902: PUSH
29903: LD_INT 5
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 2
29912: NEG
29913: PUSH
29914: LD_INT 3
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: LD_INT 3
29923: NEG
29924: PUSH
29925: LD_INT 0
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 3
29934: NEG
29935: PUSH
29936: LD_INT 1
29938: NEG
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 2
29946: NEG
29947: PUSH
29948: LD_INT 0
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 2
29957: NEG
29958: PUSH
29959: LD_INT 1
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 3
29968: NEG
29969: PUSH
29970: LD_INT 1
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: LD_INT 4
29979: NEG
29980: PUSH
29981: LD_INT 0
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: LD_INT 4
29990: NEG
29991: PUSH
29992: LD_INT 1
29994: NEG
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 4
30002: NEG
30003: PUSH
30004: LD_INT 2
30006: NEG
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 2
30014: NEG
30015: PUSH
30016: LD_INT 2
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 4
30025: NEG
30026: PUSH
30027: LD_INT 4
30029: NEG
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 4
30037: NEG
30038: PUSH
30039: LD_INT 5
30041: NEG
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 3
30049: NEG
30050: PUSH
30051: LD_INT 4
30053: NEG
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 3
30061: NEG
30062: PUSH
30063: LD_INT 3
30065: NEG
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 4
30073: NEG
30074: PUSH
30075: LD_INT 3
30077: NEG
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 5
30085: NEG
30086: PUSH
30087: LD_INT 4
30089: NEG
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 5
30097: NEG
30098: PUSH
30099: LD_INT 5
30101: NEG
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 3
30109: NEG
30110: PUSH
30111: LD_INT 5
30113: NEG
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PUSH
30119: LD_INT 5
30121: NEG
30122: PUSH
30123: LD_INT 3
30125: NEG
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PUSH
30131: LD_INT 0
30133: PUSH
30134: LD_INT 3
30136: NEG
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 0
30144: PUSH
30145: LD_INT 4
30147: NEG
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: LD_INT 1
30155: PUSH
30156: LD_INT 3
30158: NEG
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 1
30166: PUSH
30167: LD_INT 2
30169: NEG
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 0
30177: PUSH
30178: LD_INT 2
30180: NEG
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 1
30188: NEG
30189: PUSH
30190: LD_INT 3
30192: NEG
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 1
30200: NEG
30201: PUSH
30202: LD_INT 4
30204: NEG
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 2
30212: PUSH
30213: LD_INT 2
30215: NEG
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 2
30223: NEG
30224: PUSH
30225: LD_INT 4
30227: NEG
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 4
30235: PUSH
30236: LD_INT 0
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: LD_INT 4
30245: PUSH
30246: LD_INT 1
30248: NEG
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 5
30256: PUSH
30257: LD_INT 0
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 5
30266: PUSH
30267: LD_INT 1
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 4
30276: PUSH
30277: LD_INT 1
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 3
30286: PUSH
30287: LD_INT 0
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 3
30296: PUSH
30297: LD_INT 1
30299: NEG
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 3
30307: PUSH
30308: LD_INT 2
30310: NEG
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: LD_INT 5
30318: PUSH
30319: LD_INT 2
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
30373: LD_ADDR_VAR 0 32
30377: PUSH
30378: LD_INT 4
30380: NEG
30381: PUSH
30382: LD_INT 0
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 4
30391: NEG
30392: PUSH
30393: LD_INT 1
30395: NEG
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 3
30403: NEG
30404: PUSH
30405: LD_INT 0
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 3
30414: NEG
30415: PUSH
30416: LD_INT 1
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 4
30425: NEG
30426: PUSH
30427: LD_INT 1
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: LD_INT 5
30436: NEG
30437: PUSH
30438: LD_INT 0
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 5
30447: NEG
30448: PUSH
30449: LD_INT 1
30451: NEG
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 5
30459: NEG
30460: PUSH
30461: LD_INT 2
30463: NEG
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 3
30471: NEG
30472: PUSH
30473: LD_INT 2
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 3
30482: NEG
30483: PUSH
30484: LD_INT 3
30486: NEG
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 3
30494: NEG
30495: PUSH
30496: LD_INT 4
30498: NEG
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 2
30506: NEG
30507: PUSH
30508: LD_INT 3
30510: NEG
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 2
30518: NEG
30519: PUSH
30520: LD_INT 2
30522: NEG
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 3
30530: NEG
30531: PUSH
30532: LD_INT 2
30534: NEG
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 4
30542: NEG
30543: PUSH
30544: LD_INT 3
30546: NEG
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 4
30554: NEG
30555: PUSH
30556: LD_INT 4
30558: NEG
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PUSH
30564: LD_INT 2
30566: NEG
30567: PUSH
30568: LD_INT 4
30570: NEG
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 4
30578: NEG
30579: PUSH
30580: LD_INT 2
30582: NEG
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 0
30590: PUSH
30591: LD_INT 4
30593: NEG
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 0
30601: PUSH
30602: LD_INT 5
30604: NEG
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 1
30612: PUSH
30613: LD_INT 4
30615: NEG
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 1
30623: PUSH
30624: LD_INT 3
30626: NEG
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 0
30634: PUSH
30635: LD_INT 3
30637: NEG
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 1
30645: NEG
30646: PUSH
30647: LD_INT 4
30649: NEG
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 1
30657: NEG
30658: PUSH
30659: LD_INT 5
30661: NEG
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: LD_INT 2
30669: PUSH
30670: LD_INT 3
30672: NEG
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 2
30680: NEG
30681: PUSH
30682: LD_INT 5
30684: NEG
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 3
30692: PUSH
30693: LD_INT 0
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 3
30702: PUSH
30703: LD_INT 1
30705: NEG
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 4
30713: PUSH
30714: LD_INT 0
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 4
30723: PUSH
30724: LD_INT 1
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 3
30733: PUSH
30734: LD_INT 1
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: PUSH
30741: LD_INT 2
30743: PUSH
30744: LD_INT 0
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 2
30753: PUSH
30754: LD_INT 1
30756: NEG
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PUSH
30762: LD_INT 2
30764: PUSH
30765: LD_INT 2
30767: NEG
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: LD_INT 4
30775: PUSH
30776: LD_INT 2
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 4
30785: PUSH
30786: LD_INT 4
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 4
30795: PUSH
30796: LD_INT 3
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 5
30805: PUSH
30806: LD_INT 4
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 5
30815: PUSH
30816: LD_INT 5
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: LD_INT 4
30825: PUSH
30826: LD_INT 5
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 3
30835: PUSH
30836: LD_INT 4
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 3
30845: PUSH
30846: LD_INT 3
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 5
30855: PUSH
30856: LD_INT 3
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 3
30865: PUSH
30866: LD_INT 5
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
30920: LD_ADDR_VAR 0 33
30924: PUSH
30925: LD_INT 4
30927: NEG
30928: PUSH
30929: LD_INT 4
30931: NEG
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 4
30939: NEG
30940: PUSH
30941: LD_INT 5
30943: NEG
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 3
30951: NEG
30952: PUSH
30953: LD_INT 4
30955: NEG
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 3
30963: NEG
30964: PUSH
30965: LD_INT 3
30967: NEG
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 4
30975: NEG
30976: PUSH
30977: LD_INT 3
30979: NEG
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 5
30987: NEG
30988: PUSH
30989: LD_INT 4
30991: NEG
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 5
30999: NEG
31000: PUSH
31001: LD_INT 5
31003: NEG
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 3
31011: NEG
31012: PUSH
31013: LD_INT 5
31015: NEG
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 5
31023: NEG
31024: PUSH
31025: LD_INT 3
31027: NEG
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 0
31035: PUSH
31036: LD_INT 3
31038: NEG
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 0
31046: PUSH
31047: LD_INT 4
31049: NEG
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 1
31057: PUSH
31058: LD_INT 3
31060: NEG
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 1
31068: PUSH
31069: LD_INT 2
31071: NEG
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 0
31079: PUSH
31080: LD_INT 2
31082: NEG
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 1
31090: NEG
31091: PUSH
31092: LD_INT 3
31094: NEG
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 1
31102: NEG
31103: PUSH
31104: LD_INT 4
31106: NEG
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 2
31114: PUSH
31115: LD_INT 2
31117: NEG
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 2
31125: NEG
31126: PUSH
31127: LD_INT 4
31129: NEG
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 4
31137: PUSH
31138: LD_INT 0
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 4
31147: PUSH
31148: LD_INT 1
31150: NEG
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 5
31158: PUSH
31159: LD_INT 0
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 5
31168: PUSH
31169: LD_INT 1
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 4
31178: PUSH
31179: LD_INT 1
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 3
31188: PUSH
31189: LD_INT 0
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 3
31198: PUSH
31199: LD_INT 1
31201: NEG
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 3
31209: PUSH
31210: LD_INT 2
31212: NEG
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 5
31220: PUSH
31221: LD_INT 2
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 3
31230: PUSH
31231: LD_INT 3
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 3
31240: PUSH
31241: LD_INT 2
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 4
31250: PUSH
31251: LD_INT 3
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 4
31260: PUSH
31261: LD_INT 4
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 3
31270: PUSH
31271: LD_INT 4
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 2
31280: PUSH
31281: LD_INT 3
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 2
31290: PUSH
31291: LD_INT 2
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 4
31300: PUSH
31301: LD_INT 2
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 2
31310: PUSH
31311: LD_INT 4
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 0
31320: PUSH
31321: LD_INT 4
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 0
31330: PUSH
31331: LD_INT 3
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 1
31340: PUSH
31341: LD_INT 4
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 1
31350: PUSH
31351: LD_INT 5
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 0
31360: PUSH
31361: LD_INT 5
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 1
31370: NEG
31371: PUSH
31372: LD_INT 4
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 1
31381: NEG
31382: PUSH
31383: LD_INT 3
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 2
31392: PUSH
31393: LD_INT 5
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 2
31402: NEG
31403: PUSH
31404: LD_INT 3
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
31458: LD_ADDR_VAR 0 34
31462: PUSH
31463: LD_INT 0
31465: PUSH
31466: LD_INT 4
31468: NEG
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 0
31476: PUSH
31477: LD_INT 5
31479: NEG
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 1
31487: PUSH
31488: LD_INT 4
31490: NEG
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 1
31498: PUSH
31499: LD_INT 3
31501: NEG
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 0
31509: PUSH
31510: LD_INT 3
31512: NEG
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 1
31520: NEG
31521: PUSH
31522: LD_INT 4
31524: NEG
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 1
31532: NEG
31533: PUSH
31534: LD_INT 5
31536: NEG
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 2
31544: PUSH
31545: LD_INT 3
31547: NEG
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 2
31555: NEG
31556: PUSH
31557: LD_INT 5
31559: NEG
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 3
31567: PUSH
31568: LD_INT 0
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 3
31577: PUSH
31578: LD_INT 1
31580: NEG
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 4
31588: PUSH
31589: LD_INT 0
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 4
31598: PUSH
31599: LD_INT 1
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 3
31608: PUSH
31609: LD_INT 1
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 2
31618: PUSH
31619: LD_INT 0
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 2
31628: PUSH
31629: LD_INT 1
31631: NEG
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 2
31639: PUSH
31640: LD_INT 2
31642: NEG
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 4
31650: PUSH
31651: LD_INT 2
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 4
31660: PUSH
31661: LD_INT 4
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 4
31670: PUSH
31671: LD_INT 3
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 5
31680: PUSH
31681: LD_INT 4
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 5
31690: PUSH
31691: LD_INT 5
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 4
31700: PUSH
31701: LD_INT 5
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 3
31710: PUSH
31711: LD_INT 4
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 3
31720: PUSH
31721: LD_INT 3
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 5
31730: PUSH
31731: LD_INT 3
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_INT 3
31740: PUSH
31741: LD_INT 5
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 0
31750: PUSH
31751: LD_INT 3
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 0
31760: PUSH
31761: LD_INT 2
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 1
31770: PUSH
31771: LD_INT 3
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 1
31780: PUSH
31781: LD_INT 4
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 0
31790: PUSH
31791: LD_INT 4
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 1
31800: NEG
31801: PUSH
31802: LD_INT 3
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 1
31811: NEG
31812: PUSH
31813: LD_INT 2
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 2
31822: PUSH
31823: LD_INT 4
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 2
31832: NEG
31833: PUSH
31834: LD_INT 2
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 4
31843: NEG
31844: PUSH
31845: LD_INT 0
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 4
31854: NEG
31855: PUSH
31856: LD_INT 1
31858: NEG
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 3
31866: NEG
31867: PUSH
31868: LD_INT 0
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 3
31877: NEG
31878: PUSH
31879: LD_INT 1
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 4
31888: NEG
31889: PUSH
31890: LD_INT 1
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 5
31899: NEG
31900: PUSH
31901: LD_INT 0
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 5
31910: NEG
31911: PUSH
31912: LD_INT 1
31914: NEG
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: PUSH
31920: LD_INT 5
31922: NEG
31923: PUSH
31924: LD_INT 2
31926: NEG
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 3
31934: NEG
31935: PUSH
31936: LD_INT 2
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: ST_TO_ADDR
// end ; end ;
31990: GO 31993
31992: POP
// case btype of b_depot , b_warehouse :
31993: LD_VAR 0 1
31997: PUSH
31998: LD_INT 0
32000: DOUBLE
32001: EQUAL
32002: IFTRUE 32012
32004: LD_INT 1
32006: DOUBLE
32007: EQUAL
32008: IFTRUE 32012
32010: GO 32213
32012: POP
// case nation of nation_american :
32013: LD_VAR 0 5
32017: PUSH
32018: LD_INT 1
32020: DOUBLE
32021: EQUAL
32022: IFTRUE 32026
32024: GO 32082
32026: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32027: LD_ADDR_VAR 0 9
32031: PUSH
32032: LD_VAR 0 11
32036: PUSH
32037: LD_VAR 0 12
32041: PUSH
32042: LD_VAR 0 13
32046: PUSH
32047: LD_VAR 0 14
32051: PUSH
32052: LD_VAR 0 15
32056: PUSH
32057: LD_VAR 0 16
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: PUSH
32070: LD_VAR 0 4
32074: PUSH
32075: LD_INT 1
32077: PLUS
32078: ARRAY
32079: ST_TO_ADDR
32080: GO 32211
32082: LD_INT 2
32084: DOUBLE
32085: EQUAL
32086: IFTRUE 32090
32088: GO 32146
32090: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
32091: LD_ADDR_VAR 0 9
32095: PUSH
32096: LD_VAR 0 17
32100: PUSH
32101: LD_VAR 0 18
32105: PUSH
32106: LD_VAR 0 19
32110: PUSH
32111: LD_VAR 0 20
32115: PUSH
32116: LD_VAR 0 21
32120: PUSH
32121: LD_VAR 0 22
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: PUSH
32134: LD_VAR 0 4
32138: PUSH
32139: LD_INT 1
32141: PLUS
32142: ARRAY
32143: ST_TO_ADDR
32144: GO 32211
32146: LD_INT 3
32148: DOUBLE
32149: EQUAL
32150: IFTRUE 32154
32152: GO 32210
32154: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32155: LD_ADDR_VAR 0 9
32159: PUSH
32160: LD_VAR 0 23
32164: PUSH
32165: LD_VAR 0 24
32169: PUSH
32170: LD_VAR 0 25
32174: PUSH
32175: LD_VAR 0 26
32179: PUSH
32180: LD_VAR 0 27
32184: PUSH
32185: LD_VAR 0 28
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: PUSH
32198: LD_VAR 0 4
32202: PUSH
32203: LD_INT 1
32205: PLUS
32206: ARRAY
32207: ST_TO_ADDR
32208: GO 32211
32210: POP
32211: GO 32766
32213: LD_INT 2
32215: DOUBLE
32216: EQUAL
32217: IFTRUE 32227
32219: LD_INT 3
32221: DOUBLE
32222: EQUAL
32223: IFTRUE 32227
32225: GO 32283
32227: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
32228: LD_ADDR_VAR 0 9
32232: PUSH
32233: LD_VAR 0 29
32237: PUSH
32238: LD_VAR 0 30
32242: PUSH
32243: LD_VAR 0 31
32247: PUSH
32248: LD_VAR 0 32
32252: PUSH
32253: LD_VAR 0 33
32257: PUSH
32258: LD_VAR 0 34
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: PUSH
32271: LD_VAR 0 4
32275: PUSH
32276: LD_INT 1
32278: PLUS
32279: ARRAY
32280: ST_TO_ADDR
32281: GO 32766
32283: LD_INT 16
32285: DOUBLE
32286: EQUAL
32287: IFTRUE 32345
32289: LD_INT 17
32291: DOUBLE
32292: EQUAL
32293: IFTRUE 32345
32295: LD_INT 18
32297: DOUBLE
32298: EQUAL
32299: IFTRUE 32345
32301: LD_INT 19
32303: DOUBLE
32304: EQUAL
32305: IFTRUE 32345
32307: LD_INT 22
32309: DOUBLE
32310: EQUAL
32311: IFTRUE 32345
32313: LD_INT 20
32315: DOUBLE
32316: EQUAL
32317: IFTRUE 32345
32319: LD_INT 21
32321: DOUBLE
32322: EQUAL
32323: IFTRUE 32345
32325: LD_INT 23
32327: DOUBLE
32328: EQUAL
32329: IFTRUE 32345
32331: LD_INT 24
32333: DOUBLE
32334: EQUAL
32335: IFTRUE 32345
32337: LD_INT 25
32339: DOUBLE
32340: EQUAL
32341: IFTRUE 32345
32343: GO 32401
32345: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
32346: LD_ADDR_VAR 0 9
32350: PUSH
32351: LD_VAR 0 35
32355: PUSH
32356: LD_VAR 0 36
32360: PUSH
32361: LD_VAR 0 37
32365: PUSH
32366: LD_VAR 0 38
32370: PUSH
32371: LD_VAR 0 39
32375: PUSH
32376: LD_VAR 0 40
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: PUSH
32389: LD_VAR 0 4
32393: PUSH
32394: LD_INT 1
32396: PLUS
32397: ARRAY
32398: ST_TO_ADDR
32399: GO 32766
32401: LD_INT 6
32403: DOUBLE
32404: EQUAL
32405: IFTRUE 32457
32407: LD_INT 7
32409: DOUBLE
32410: EQUAL
32411: IFTRUE 32457
32413: LD_INT 8
32415: DOUBLE
32416: EQUAL
32417: IFTRUE 32457
32419: LD_INT 13
32421: DOUBLE
32422: EQUAL
32423: IFTRUE 32457
32425: LD_INT 12
32427: DOUBLE
32428: EQUAL
32429: IFTRUE 32457
32431: LD_INT 15
32433: DOUBLE
32434: EQUAL
32435: IFTRUE 32457
32437: LD_INT 11
32439: DOUBLE
32440: EQUAL
32441: IFTRUE 32457
32443: LD_INT 14
32445: DOUBLE
32446: EQUAL
32447: IFTRUE 32457
32449: LD_INT 10
32451: DOUBLE
32452: EQUAL
32453: IFTRUE 32457
32455: GO 32513
32457: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
32458: LD_ADDR_VAR 0 9
32462: PUSH
32463: LD_VAR 0 41
32467: PUSH
32468: LD_VAR 0 42
32472: PUSH
32473: LD_VAR 0 43
32477: PUSH
32478: LD_VAR 0 44
32482: PUSH
32483: LD_VAR 0 45
32487: PUSH
32488: LD_VAR 0 46
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: PUSH
32501: LD_VAR 0 4
32505: PUSH
32506: LD_INT 1
32508: PLUS
32509: ARRAY
32510: ST_TO_ADDR
32511: GO 32766
32513: LD_INT 36
32515: DOUBLE
32516: EQUAL
32517: IFTRUE 32521
32519: GO 32577
32521: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
32522: LD_ADDR_VAR 0 9
32526: PUSH
32527: LD_VAR 0 47
32531: PUSH
32532: LD_VAR 0 48
32536: PUSH
32537: LD_VAR 0 49
32541: PUSH
32542: LD_VAR 0 50
32546: PUSH
32547: LD_VAR 0 51
32551: PUSH
32552: LD_VAR 0 52
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: PUSH
32565: LD_VAR 0 4
32569: PUSH
32570: LD_INT 1
32572: PLUS
32573: ARRAY
32574: ST_TO_ADDR
32575: GO 32766
32577: LD_INT 4
32579: DOUBLE
32580: EQUAL
32581: IFTRUE 32603
32583: LD_INT 5
32585: DOUBLE
32586: EQUAL
32587: IFTRUE 32603
32589: LD_INT 34
32591: DOUBLE
32592: EQUAL
32593: IFTRUE 32603
32595: LD_INT 37
32597: DOUBLE
32598: EQUAL
32599: IFTRUE 32603
32601: GO 32659
32603: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
32604: LD_ADDR_VAR 0 9
32608: PUSH
32609: LD_VAR 0 53
32613: PUSH
32614: LD_VAR 0 54
32618: PUSH
32619: LD_VAR 0 55
32623: PUSH
32624: LD_VAR 0 56
32628: PUSH
32629: LD_VAR 0 57
32633: PUSH
32634: LD_VAR 0 58
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: PUSH
32647: LD_VAR 0 4
32651: PUSH
32652: LD_INT 1
32654: PLUS
32655: ARRAY
32656: ST_TO_ADDR
32657: GO 32766
32659: LD_INT 31
32661: DOUBLE
32662: EQUAL
32663: IFTRUE 32709
32665: LD_INT 32
32667: DOUBLE
32668: EQUAL
32669: IFTRUE 32709
32671: LD_INT 33
32673: DOUBLE
32674: EQUAL
32675: IFTRUE 32709
32677: LD_INT 27
32679: DOUBLE
32680: EQUAL
32681: IFTRUE 32709
32683: LD_INT 26
32685: DOUBLE
32686: EQUAL
32687: IFTRUE 32709
32689: LD_INT 28
32691: DOUBLE
32692: EQUAL
32693: IFTRUE 32709
32695: LD_INT 29
32697: DOUBLE
32698: EQUAL
32699: IFTRUE 32709
32701: LD_INT 30
32703: DOUBLE
32704: EQUAL
32705: IFTRUE 32709
32707: GO 32765
32709: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
32710: LD_ADDR_VAR 0 9
32714: PUSH
32715: LD_VAR 0 59
32719: PUSH
32720: LD_VAR 0 60
32724: PUSH
32725: LD_VAR 0 61
32729: PUSH
32730: LD_VAR 0 62
32734: PUSH
32735: LD_VAR 0 63
32739: PUSH
32740: LD_VAR 0 64
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: PUSH
32753: LD_VAR 0 4
32757: PUSH
32758: LD_INT 1
32760: PLUS
32761: ARRAY
32762: ST_TO_ADDR
32763: GO 32766
32765: POP
// temp_list2 = [ ] ;
32766: LD_ADDR_VAR 0 10
32770: PUSH
32771: EMPTY
32772: ST_TO_ADDR
// for i in temp_list do
32773: LD_ADDR_VAR 0 8
32777: PUSH
32778: LD_VAR 0 9
32782: PUSH
32783: FOR_IN
32784: IFFALSE 32836
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
32786: LD_ADDR_VAR 0 10
32790: PUSH
32791: LD_VAR 0 10
32795: PUSH
32796: LD_VAR 0 8
32800: PUSH
32801: LD_INT 1
32803: ARRAY
32804: PUSH
32805: LD_VAR 0 2
32809: PLUS
32810: PUSH
32811: LD_VAR 0 8
32815: PUSH
32816: LD_INT 2
32818: ARRAY
32819: PUSH
32820: LD_VAR 0 3
32824: PLUS
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: EMPTY
32831: LIST
32832: ADD
32833: ST_TO_ADDR
32834: GO 32783
32836: POP
32837: POP
// result = temp_list2 ;
32838: LD_ADDR_VAR 0 7
32842: PUSH
32843: LD_VAR 0 10
32847: ST_TO_ADDR
// end ;
32848: LD_VAR 0 7
32852: RET
// export function EnemyInRange ( unit , dist ) ; begin
32853: LD_INT 0
32855: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
32856: LD_ADDR_VAR 0 3
32860: PUSH
32861: LD_VAR 0 1
32865: PPUSH
32866: CALL_OW 255
32870: PPUSH
32871: LD_VAR 0 1
32875: PPUSH
32876: CALL_OW 250
32880: PPUSH
32881: LD_VAR 0 1
32885: PPUSH
32886: CALL_OW 251
32890: PPUSH
32891: LD_VAR 0 2
32895: PPUSH
32896: CALL 6249 0 4
32900: PUSH
32901: LD_INT 4
32903: ARRAY
32904: ST_TO_ADDR
// end ;
32905: LD_VAR 0 3
32909: RET
// export function PlayerSeeMe ( unit ) ; begin
32910: LD_INT 0
32912: PPUSH
// result := See ( your_side , unit ) ;
32913: LD_ADDR_VAR 0 2
32917: PUSH
32918: LD_OWVAR 2
32922: PPUSH
32923: LD_VAR 0 1
32927: PPUSH
32928: CALL_OW 292
32932: ST_TO_ADDR
// end ;
32933: LD_VAR 0 2
32937: RET
// export function ReverseDir ( unit ) ; begin
32938: LD_INT 0
32940: PPUSH
// if not unit then
32941: LD_VAR 0 1
32945: NOT
32946: IFFALSE 32950
// exit ;
32948: GO 32973
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
32950: LD_ADDR_VAR 0 2
32954: PUSH
32955: LD_VAR 0 1
32959: PPUSH
32960: CALL_OW 254
32964: PUSH
32965: LD_INT 3
32967: PLUS
32968: PUSH
32969: LD_INT 6
32971: MOD
32972: ST_TO_ADDR
// end ;
32973: LD_VAR 0 2
32977: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
32978: LD_INT 0
32980: PPUSH
32981: PPUSH
32982: PPUSH
32983: PPUSH
32984: PPUSH
// if not hexes then
32985: LD_VAR 0 2
32989: NOT
32990: IFFALSE 32994
// exit ;
32992: GO 33142
// dist := 9999 ;
32994: LD_ADDR_VAR 0 5
32998: PUSH
32999: LD_INT 9999
33001: ST_TO_ADDR
// for i = 1 to hexes do
33002: LD_ADDR_VAR 0 4
33006: PUSH
33007: DOUBLE
33008: LD_INT 1
33010: DEC
33011: ST_TO_ADDR
33012: LD_VAR 0 2
33016: PUSH
33017: FOR_TO
33018: IFFALSE 33130
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
33020: LD_VAR 0 1
33024: PPUSH
33025: LD_VAR 0 2
33029: PUSH
33030: LD_VAR 0 4
33034: ARRAY
33035: PUSH
33036: LD_INT 1
33038: ARRAY
33039: PPUSH
33040: LD_VAR 0 2
33044: PUSH
33045: LD_VAR 0 4
33049: ARRAY
33050: PUSH
33051: LD_INT 2
33053: ARRAY
33054: PPUSH
33055: CALL_OW 297
33059: PUSH
33060: LD_VAR 0 5
33064: LESS
33065: IFFALSE 33128
// begin hex := hexes [ i ] ;
33067: LD_ADDR_VAR 0 7
33071: PUSH
33072: LD_VAR 0 2
33076: PUSH
33077: LD_VAR 0 4
33081: ARRAY
33082: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33083: LD_ADDR_VAR 0 5
33087: PUSH
33088: LD_VAR 0 1
33092: PPUSH
33093: LD_VAR 0 2
33097: PUSH
33098: LD_VAR 0 4
33102: ARRAY
33103: PUSH
33104: LD_INT 1
33106: ARRAY
33107: PPUSH
33108: LD_VAR 0 2
33112: PUSH
33113: LD_VAR 0 4
33117: ARRAY
33118: PUSH
33119: LD_INT 2
33121: ARRAY
33122: PPUSH
33123: CALL_OW 297
33127: ST_TO_ADDR
// end ; end ;
33128: GO 33017
33130: POP
33131: POP
// result := hex ;
33132: LD_ADDR_VAR 0 3
33136: PUSH
33137: LD_VAR 0 7
33141: ST_TO_ADDR
// end ;
33142: LD_VAR 0 3
33146: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
33147: LD_INT 0
33149: PPUSH
33150: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
33151: LD_VAR 0 1
33155: NOT
33156: PUSH
33157: LD_VAR 0 1
33161: PUSH
33162: LD_INT 21
33164: PUSH
33165: LD_INT 2
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 23
33174: PUSH
33175: LD_INT 2
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PPUSH
33186: CALL_OW 69
33190: IN
33191: NOT
33192: OR
33193: IFFALSE 33197
// exit ;
33195: GO 33244
// for i = 1 to 3 do
33197: LD_ADDR_VAR 0 3
33201: PUSH
33202: DOUBLE
33203: LD_INT 1
33205: DEC
33206: ST_TO_ADDR
33207: LD_INT 3
33209: PUSH
33210: FOR_TO
33211: IFFALSE 33242
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
33213: LD_VAR 0 1
33217: PPUSH
33218: CALL_OW 250
33222: PPUSH
33223: LD_VAR 0 1
33227: PPUSH
33228: CALL_OW 251
33232: PPUSH
33233: LD_INT 1
33235: PPUSH
33236: CALL_OW 453
33240: GO 33210
33242: POP
33243: POP
// end ;
33244: LD_VAR 0 2
33248: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
33249: LD_INT 0
33251: PPUSH
33252: PPUSH
33253: PPUSH
33254: PPUSH
33255: PPUSH
33256: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
33257: LD_VAR 0 1
33261: NOT
33262: PUSH
33263: LD_VAR 0 2
33267: NOT
33268: OR
33269: PUSH
33270: LD_VAR 0 1
33274: PPUSH
33275: CALL_OW 314
33279: OR
33280: IFFALSE 33284
// exit ;
33282: GO 33725
// x := GetX ( enemy_unit ) ;
33284: LD_ADDR_VAR 0 7
33288: PUSH
33289: LD_VAR 0 2
33293: PPUSH
33294: CALL_OW 250
33298: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
33299: LD_ADDR_VAR 0 8
33303: PUSH
33304: LD_VAR 0 2
33308: PPUSH
33309: CALL_OW 251
33313: ST_TO_ADDR
// if not x or not y then
33314: LD_VAR 0 7
33318: NOT
33319: PUSH
33320: LD_VAR 0 8
33324: NOT
33325: OR
33326: IFFALSE 33330
// exit ;
33328: GO 33725
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
33330: LD_ADDR_VAR 0 6
33334: PUSH
33335: LD_VAR 0 7
33339: PPUSH
33340: LD_INT 0
33342: PPUSH
33343: LD_INT 4
33345: PPUSH
33346: CALL_OW 272
33350: PUSH
33351: LD_VAR 0 8
33355: PPUSH
33356: LD_INT 0
33358: PPUSH
33359: LD_INT 4
33361: PPUSH
33362: CALL_OW 273
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_VAR 0 7
33375: PPUSH
33376: LD_INT 1
33378: PPUSH
33379: LD_INT 4
33381: PPUSH
33382: CALL_OW 272
33386: PUSH
33387: LD_VAR 0 8
33391: PPUSH
33392: LD_INT 1
33394: PPUSH
33395: LD_INT 4
33397: PPUSH
33398: CALL_OW 273
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_VAR 0 7
33411: PPUSH
33412: LD_INT 2
33414: PPUSH
33415: LD_INT 4
33417: PPUSH
33418: CALL_OW 272
33422: PUSH
33423: LD_VAR 0 8
33427: PPUSH
33428: LD_INT 2
33430: PPUSH
33431: LD_INT 4
33433: PPUSH
33434: CALL_OW 273
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_VAR 0 7
33447: PPUSH
33448: LD_INT 3
33450: PPUSH
33451: LD_INT 4
33453: PPUSH
33454: CALL_OW 272
33458: PUSH
33459: LD_VAR 0 8
33463: PPUSH
33464: LD_INT 3
33466: PPUSH
33467: LD_INT 4
33469: PPUSH
33470: CALL_OW 273
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_VAR 0 7
33483: PPUSH
33484: LD_INT 4
33486: PPUSH
33487: LD_INT 4
33489: PPUSH
33490: CALL_OW 272
33494: PUSH
33495: LD_VAR 0 8
33499: PPUSH
33500: LD_INT 4
33502: PPUSH
33503: LD_INT 4
33505: PPUSH
33506: CALL_OW 273
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_VAR 0 7
33519: PPUSH
33520: LD_INT 5
33522: PPUSH
33523: LD_INT 4
33525: PPUSH
33526: CALL_OW 272
33530: PUSH
33531: LD_VAR 0 8
33535: PPUSH
33536: LD_INT 5
33538: PPUSH
33539: LD_INT 4
33541: PPUSH
33542: CALL_OW 273
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: ST_TO_ADDR
// for i = tmp downto 1 do
33559: LD_ADDR_VAR 0 4
33563: PUSH
33564: DOUBLE
33565: LD_VAR 0 6
33569: INC
33570: ST_TO_ADDR
33571: LD_INT 1
33573: PUSH
33574: FOR_DOWNTO
33575: IFFALSE 33676
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
33577: LD_VAR 0 6
33581: PUSH
33582: LD_VAR 0 4
33586: ARRAY
33587: PUSH
33588: LD_INT 1
33590: ARRAY
33591: PPUSH
33592: LD_VAR 0 6
33596: PUSH
33597: LD_VAR 0 4
33601: ARRAY
33602: PUSH
33603: LD_INT 2
33605: ARRAY
33606: PPUSH
33607: CALL_OW 488
33611: NOT
33612: PUSH
33613: LD_VAR 0 6
33617: PUSH
33618: LD_VAR 0 4
33622: ARRAY
33623: PUSH
33624: LD_INT 1
33626: ARRAY
33627: PPUSH
33628: LD_VAR 0 6
33632: PUSH
33633: LD_VAR 0 4
33637: ARRAY
33638: PUSH
33639: LD_INT 2
33641: ARRAY
33642: PPUSH
33643: CALL_OW 428
33647: PUSH
33648: LD_INT 0
33650: NONEQUAL
33651: OR
33652: IFFALSE 33674
// tmp := Delete ( tmp , i ) ;
33654: LD_ADDR_VAR 0 6
33658: PUSH
33659: LD_VAR 0 6
33663: PPUSH
33664: LD_VAR 0 4
33668: PPUSH
33669: CALL_OW 3
33673: ST_TO_ADDR
33674: GO 33574
33676: POP
33677: POP
// j := GetClosestHex ( unit , tmp ) ;
33678: LD_ADDR_VAR 0 5
33682: PUSH
33683: LD_VAR 0 1
33687: PPUSH
33688: LD_VAR 0 6
33692: PPUSH
33693: CALL 32978 0 2
33697: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
33698: LD_VAR 0 1
33702: PPUSH
33703: LD_VAR 0 5
33707: PUSH
33708: LD_INT 1
33710: ARRAY
33711: PPUSH
33712: LD_VAR 0 5
33716: PUSH
33717: LD_INT 2
33719: ARRAY
33720: PPUSH
33721: CALL_OW 111
// end ;
33725: LD_VAR 0 3
33729: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
33730: LD_INT 0
33732: PPUSH
33733: PPUSH
33734: PPUSH
// uc_side = 0 ;
33735: LD_ADDR_OWVAR 20
33739: PUSH
33740: LD_INT 0
33742: ST_TO_ADDR
// uc_nation = 0 ;
33743: LD_ADDR_OWVAR 21
33747: PUSH
33748: LD_INT 0
33750: ST_TO_ADDR
// InitHc_All ( ) ;
33751: CALL_OW 584
// InitVc ;
33755: CALL_OW 20
// if mastodonts then
33759: LD_VAR 0 6
33763: IFFALSE 33830
// for i = 1 to mastodonts do
33765: LD_ADDR_VAR 0 11
33769: PUSH
33770: DOUBLE
33771: LD_INT 1
33773: DEC
33774: ST_TO_ADDR
33775: LD_VAR 0 6
33779: PUSH
33780: FOR_TO
33781: IFFALSE 33828
// begin vc_chassis := 31 ;
33783: LD_ADDR_OWVAR 37
33787: PUSH
33788: LD_INT 31
33790: ST_TO_ADDR
// vc_control := control_rider ;
33791: LD_ADDR_OWVAR 38
33795: PUSH
33796: LD_INT 4
33798: ST_TO_ADDR
// animal := CreateVehicle ;
33799: LD_ADDR_VAR 0 12
33803: PUSH
33804: CALL_OW 45
33808: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33809: LD_VAR 0 12
33813: PPUSH
33814: LD_VAR 0 8
33818: PPUSH
33819: LD_INT 0
33821: PPUSH
33822: CALL 36018 0 3
// end ;
33826: GO 33780
33828: POP
33829: POP
// if horses then
33830: LD_VAR 0 5
33834: IFFALSE 33901
// for i = 1 to horses do
33836: LD_ADDR_VAR 0 11
33840: PUSH
33841: DOUBLE
33842: LD_INT 1
33844: DEC
33845: ST_TO_ADDR
33846: LD_VAR 0 5
33850: PUSH
33851: FOR_TO
33852: IFFALSE 33899
// begin hc_class := 21 ;
33854: LD_ADDR_OWVAR 28
33858: PUSH
33859: LD_INT 21
33861: ST_TO_ADDR
// hc_gallery :=  ;
33862: LD_ADDR_OWVAR 33
33866: PUSH
33867: LD_STRING 
33869: ST_TO_ADDR
// animal := CreateHuman ;
33870: LD_ADDR_VAR 0 12
33874: PUSH
33875: CALL_OW 44
33879: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33880: LD_VAR 0 12
33884: PPUSH
33885: LD_VAR 0 8
33889: PPUSH
33890: LD_INT 0
33892: PPUSH
33893: CALL 36018 0 3
// end ;
33897: GO 33851
33899: POP
33900: POP
// if birds then
33901: LD_VAR 0 1
33905: IFFALSE 33972
// for i = 1 to birds do
33907: LD_ADDR_VAR 0 11
33911: PUSH
33912: DOUBLE
33913: LD_INT 1
33915: DEC
33916: ST_TO_ADDR
33917: LD_VAR 0 1
33921: PUSH
33922: FOR_TO
33923: IFFALSE 33970
// begin hc_class = 18 ;
33925: LD_ADDR_OWVAR 28
33929: PUSH
33930: LD_INT 18
33932: ST_TO_ADDR
// hc_gallery =  ;
33933: LD_ADDR_OWVAR 33
33937: PUSH
33938: LD_STRING 
33940: ST_TO_ADDR
// animal := CreateHuman ;
33941: LD_ADDR_VAR 0 12
33945: PUSH
33946: CALL_OW 44
33950: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
33951: LD_VAR 0 12
33955: PPUSH
33956: LD_VAR 0 8
33960: PPUSH
33961: LD_INT 0
33963: PPUSH
33964: CALL 36018 0 3
// end ;
33968: GO 33922
33970: POP
33971: POP
// if tigers then
33972: LD_VAR 0 2
33976: IFFALSE 34060
// for i = 1 to tigers do
33978: LD_ADDR_VAR 0 11
33982: PUSH
33983: DOUBLE
33984: LD_INT 1
33986: DEC
33987: ST_TO_ADDR
33988: LD_VAR 0 2
33992: PUSH
33993: FOR_TO
33994: IFFALSE 34058
// begin hc_class = class_tiger ;
33996: LD_ADDR_OWVAR 28
34000: PUSH
34001: LD_INT 14
34003: ST_TO_ADDR
// hc_gallery =  ;
34004: LD_ADDR_OWVAR 33
34008: PUSH
34009: LD_STRING 
34011: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
34012: LD_ADDR_OWVAR 35
34016: PUSH
34017: LD_INT 7
34019: NEG
34020: PPUSH
34021: LD_INT 7
34023: PPUSH
34024: CALL_OW 12
34028: ST_TO_ADDR
// animal := CreateHuman ;
34029: LD_ADDR_VAR 0 12
34033: PUSH
34034: CALL_OW 44
34038: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34039: LD_VAR 0 12
34043: PPUSH
34044: LD_VAR 0 8
34048: PPUSH
34049: LD_INT 0
34051: PPUSH
34052: CALL 36018 0 3
// end ;
34056: GO 33993
34058: POP
34059: POP
// if apemans then
34060: LD_VAR 0 3
34064: IFFALSE 34187
// for i = 1 to apemans do
34066: LD_ADDR_VAR 0 11
34070: PUSH
34071: DOUBLE
34072: LD_INT 1
34074: DEC
34075: ST_TO_ADDR
34076: LD_VAR 0 3
34080: PUSH
34081: FOR_TO
34082: IFFALSE 34185
// begin hc_class = class_apeman ;
34084: LD_ADDR_OWVAR 28
34088: PUSH
34089: LD_INT 12
34091: ST_TO_ADDR
// hc_gallery =  ;
34092: LD_ADDR_OWVAR 33
34096: PUSH
34097: LD_STRING 
34099: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
34100: LD_ADDR_OWVAR 35
34104: PUSH
34105: LD_INT 2
34107: NEG
34108: PPUSH
34109: LD_INT 2
34111: PPUSH
34112: CALL_OW 12
34116: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
34117: LD_ADDR_OWVAR 31
34121: PUSH
34122: LD_INT 1
34124: PPUSH
34125: LD_INT 3
34127: PPUSH
34128: CALL_OW 12
34132: PUSH
34133: LD_INT 1
34135: PPUSH
34136: LD_INT 3
34138: PPUSH
34139: CALL_OW 12
34143: PUSH
34144: LD_INT 0
34146: PUSH
34147: LD_INT 0
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: ST_TO_ADDR
// animal := CreateHuman ;
34156: LD_ADDR_VAR 0 12
34160: PUSH
34161: CALL_OW 44
34165: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34166: LD_VAR 0 12
34170: PPUSH
34171: LD_VAR 0 8
34175: PPUSH
34176: LD_INT 0
34178: PPUSH
34179: CALL 36018 0 3
// end ;
34183: GO 34081
34185: POP
34186: POP
// if enchidnas then
34187: LD_VAR 0 4
34191: IFFALSE 34258
// for i = 1 to enchidnas do
34193: LD_ADDR_VAR 0 11
34197: PUSH
34198: DOUBLE
34199: LD_INT 1
34201: DEC
34202: ST_TO_ADDR
34203: LD_VAR 0 4
34207: PUSH
34208: FOR_TO
34209: IFFALSE 34256
// begin hc_class = 13 ;
34211: LD_ADDR_OWVAR 28
34215: PUSH
34216: LD_INT 13
34218: ST_TO_ADDR
// hc_gallery =  ;
34219: LD_ADDR_OWVAR 33
34223: PUSH
34224: LD_STRING 
34226: ST_TO_ADDR
// animal := CreateHuman ;
34227: LD_ADDR_VAR 0 12
34231: PUSH
34232: CALL_OW 44
34236: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34237: LD_VAR 0 12
34241: PPUSH
34242: LD_VAR 0 8
34246: PPUSH
34247: LD_INT 0
34249: PPUSH
34250: CALL 36018 0 3
// end ;
34254: GO 34208
34256: POP
34257: POP
// if fishes then
34258: LD_VAR 0 7
34262: IFFALSE 34329
// for i = 1 to fishes do
34264: LD_ADDR_VAR 0 11
34268: PUSH
34269: DOUBLE
34270: LD_INT 1
34272: DEC
34273: ST_TO_ADDR
34274: LD_VAR 0 7
34278: PUSH
34279: FOR_TO
34280: IFFALSE 34327
// begin hc_class = 20 ;
34282: LD_ADDR_OWVAR 28
34286: PUSH
34287: LD_INT 20
34289: ST_TO_ADDR
// hc_gallery =  ;
34290: LD_ADDR_OWVAR 33
34294: PUSH
34295: LD_STRING 
34297: ST_TO_ADDR
// animal := CreateHuman ;
34298: LD_ADDR_VAR 0 12
34302: PUSH
34303: CALL_OW 44
34307: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
34308: LD_VAR 0 12
34312: PPUSH
34313: LD_VAR 0 9
34317: PPUSH
34318: LD_INT 0
34320: PPUSH
34321: CALL 36018 0 3
// end ;
34325: GO 34279
34327: POP
34328: POP
// end ;
34329: LD_VAR 0 10
34333: RET
// export function WantHeal ( sci , unit ) ; begin
34334: LD_INT 0
34336: PPUSH
// if GetTaskList ( sci ) > 0 then
34337: LD_VAR 0 1
34341: PPUSH
34342: CALL_OW 437
34346: PUSH
34347: LD_INT 0
34349: GREATER
34350: IFFALSE 34420
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
34352: LD_VAR 0 1
34356: PPUSH
34357: CALL_OW 437
34361: PUSH
34362: LD_INT 1
34364: ARRAY
34365: PUSH
34366: LD_INT 1
34368: ARRAY
34369: PUSH
34370: LD_STRING l
34372: EQUAL
34373: PUSH
34374: LD_VAR 0 1
34378: PPUSH
34379: CALL_OW 437
34383: PUSH
34384: LD_INT 1
34386: ARRAY
34387: PUSH
34388: LD_INT 4
34390: ARRAY
34391: PUSH
34392: LD_VAR 0 2
34396: EQUAL
34397: AND
34398: IFFALSE 34410
// result := true else
34400: LD_ADDR_VAR 0 3
34404: PUSH
34405: LD_INT 1
34407: ST_TO_ADDR
34408: GO 34418
// result := false ;
34410: LD_ADDR_VAR 0 3
34414: PUSH
34415: LD_INT 0
34417: ST_TO_ADDR
// end else
34418: GO 34428
// result := false ;
34420: LD_ADDR_VAR 0 3
34424: PUSH
34425: LD_INT 0
34427: ST_TO_ADDR
// end ;
34428: LD_VAR 0 3
34432: RET
// export function HealTarget ( sci ) ; begin
34433: LD_INT 0
34435: PPUSH
// if not sci then
34436: LD_VAR 0 1
34440: NOT
34441: IFFALSE 34445
// exit ;
34443: GO 34510
// result := 0 ;
34445: LD_ADDR_VAR 0 2
34449: PUSH
34450: LD_INT 0
34452: ST_TO_ADDR
// if GetTaskList ( sci ) then
34453: LD_VAR 0 1
34457: PPUSH
34458: CALL_OW 437
34462: IFFALSE 34510
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
34464: LD_VAR 0 1
34468: PPUSH
34469: CALL_OW 437
34473: PUSH
34474: LD_INT 1
34476: ARRAY
34477: PUSH
34478: LD_INT 1
34480: ARRAY
34481: PUSH
34482: LD_STRING l
34484: EQUAL
34485: IFFALSE 34510
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
34487: LD_ADDR_VAR 0 2
34491: PUSH
34492: LD_VAR 0 1
34496: PPUSH
34497: CALL_OW 437
34501: PUSH
34502: LD_INT 1
34504: ARRAY
34505: PUSH
34506: LD_INT 4
34508: ARRAY
34509: ST_TO_ADDR
// end ;
34510: LD_VAR 0 2
34514: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
34515: LD_INT 0
34517: PPUSH
34518: PPUSH
34519: PPUSH
34520: PPUSH
// if not base_units then
34521: LD_VAR 0 1
34525: NOT
34526: IFFALSE 34530
// exit ;
34528: GO 34617
// result := false ;
34530: LD_ADDR_VAR 0 2
34534: PUSH
34535: LD_INT 0
34537: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
34538: LD_ADDR_VAR 0 5
34542: PUSH
34543: LD_VAR 0 1
34547: PPUSH
34548: LD_INT 21
34550: PUSH
34551: LD_INT 3
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PPUSH
34558: CALL_OW 72
34562: ST_TO_ADDR
// if not tmp then
34563: LD_VAR 0 5
34567: NOT
34568: IFFALSE 34572
// exit ;
34570: GO 34617
// for i in tmp do
34572: LD_ADDR_VAR 0 3
34576: PUSH
34577: LD_VAR 0 5
34581: PUSH
34582: FOR_IN
34583: IFFALSE 34615
// begin result := EnemyInRange ( i , 22 ) ;
34585: LD_ADDR_VAR 0 2
34589: PUSH
34590: LD_VAR 0 3
34594: PPUSH
34595: LD_INT 22
34597: PPUSH
34598: CALL 32853 0 2
34602: ST_TO_ADDR
// if result then
34603: LD_VAR 0 2
34607: IFFALSE 34613
// exit ;
34609: POP
34610: POP
34611: GO 34617
// end ;
34613: GO 34582
34615: POP
34616: POP
// end ;
34617: LD_VAR 0 2
34621: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
34622: LD_INT 0
34624: PPUSH
34625: PPUSH
// if not units then
34626: LD_VAR 0 1
34630: NOT
34631: IFFALSE 34635
// exit ;
34633: GO 34705
// result := [ ] ;
34635: LD_ADDR_VAR 0 3
34639: PUSH
34640: EMPTY
34641: ST_TO_ADDR
// for i in units do
34642: LD_ADDR_VAR 0 4
34646: PUSH
34647: LD_VAR 0 1
34651: PUSH
34652: FOR_IN
34653: IFFALSE 34703
// if GetTag ( i ) = tag then
34655: LD_VAR 0 4
34659: PPUSH
34660: CALL_OW 110
34664: PUSH
34665: LD_VAR 0 2
34669: EQUAL
34670: IFFALSE 34701
// result := Replace ( result , result + 1 , i ) ;
34672: LD_ADDR_VAR 0 3
34676: PUSH
34677: LD_VAR 0 3
34681: PPUSH
34682: LD_VAR 0 3
34686: PUSH
34687: LD_INT 1
34689: PLUS
34690: PPUSH
34691: LD_VAR 0 4
34695: PPUSH
34696: CALL_OW 1
34700: ST_TO_ADDR
34701: GO 34652
34703: POP
34704: POP
// end ;
34705: LD_VAR 0 3
34709: RET
// export function IsDriver ( un ) ; begin
34710: LD_INT 0
34712: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
34713: LD_ADDR_VAR 0 2
34717: PUSH
34718: LD_VAR 0 1
34722: PUSH
34723: LD_INT 55
34725: PUSH
34726: EMPTY
34727: LIST
34728: PPUSH
34729: CALL_OW 69
34733: IN
34734: ST_TO_ADDR
// end ;
34735: LD_VAR 0 2
34739: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
34740: LD_INT 0
34742: PPUSH
34743: PPUSH
// list := [ ] ;
34744: LD_ADDR_VAR 0 5
34748: PUSH
34749: EMPTY
34750: ST_TO_ADDR
// case d of 0 :
34751: LD_VAR 0 3
34755: PUSH
34756: LD_INT 0
34758: DOUBLE
34759: EQUAL
34760: IFTRUE 34764
34762: GO 34897
34764: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
34765: LD_ADDR_VAR 0 5
34769: PUSH
34770: LD_VAR 0 1
34774: PUSH
34775: LD_INT 4
34777: MINUS
34778: PUSH
34779: LD_VAR 0 2
34783: PUSH
34784: LD_INT 4
34786: MINUS
34787: PUSH
34788: LD_INT 2
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: LIST
34795: PUSH
34796: LD_VAR 0 1
34800: PUSH
34801: LD_INT 3
34803: MINUS
34804: PUSH
34805: LD_VAR 0 2
34809: PUSH
34810: LD_INT 1
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: LIST
34817: PUSH
34818: LD_VAR 0 1
34822: PUSH
34823: LD_INT 4
34825: PLUS
34826: PUSH
34827: LD_VAR 0 2
34831: PUSH
34832: LD_INT 4
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: LIST
34839: PUSH
34840: LD_VAR 0 1
34844: PUSH
34845: LD_INT 3
34847: PLUS
34848: PUSH
34849: LD_VAR 0 2
34853: PUSH
34854: LD_INT 3
34856: PLUS
34857: PUSH
34858: LD_INT 5
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: LIST
34865: PUSH
34866: LD_VAR 0 1
34870: PUSH
34871: LD_VAR 0 2
34875: PUSH
34876: LD_INT 4
34878: PLUS
34879: PUSH
34880: LD_INT 0
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: LIST
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: ST_TO_ADDR
// end ; 1 :
34895: GO 35595
34897: LD_INT 1
34899: DOUBLE
34900: EQUAL
34901: IFTRUE 34905
34903: GO 35038
34905: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
34906: LD_ADDR_VAR 0 5
34910: PUSH
34911: LD_VAR 0 1
34915: PUSH
34916: LD_VAR 0 2
34920: PUSH
34921: LD_INT 4
34923: MINUS
34924: PUSH
34925: LD_INT 3
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: LIST
34932: PUSH
34933: LD_VAR 0 1
34937: PUSH
34938: LD_INT 3
34940: MINUS
34941: PUSH
34942: LD_VAR 0 2
34946: PUSH
34947: LD_INT 3
34949: MINUS
34950: PUSH
34951: LD_INT 2
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: LIST
34958: PUSH
34959: LD_VAR 0 1
34963: PUSH
34964: LD_INT 4
34966: MINUS
34967: PUSH
34968: LD_VAR 0 2
34972: PUSH
34973: LD_INT 1
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: LIST
34980: PUSH
34981: LD_VAR 0 1
34985: PUSH
34986: LD_VAR 0 2
34990: PUSH
34991: LD_INT 3
34993: PLUS
34994: PUSH
34995: LD_INT 0
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: LIST
35002: PUSH
35003: LD_VAR 0 1
35007: PUSH
35008: LD_INT 4
35010: PLUS
35011: PUSH
35012: LD_VAR 0 2
35016: PUSH
35017: LD_INT 4
35019: PLUS
35020: PUSH
35021: LD_INT 5
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: LIST
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: ST_TO_ADDR
// end ; 2 :
35036: GO 35595
35038: LD_INT 2
35040: DOUBLE
35041: EQUAL
35042: IFTRUE 35046
35044: GO 35175
35046: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
35047: LD_ADDR_VAR 0 5
35051: PUSH
35052: LD_VAR 0 1
35056: PUSH
35057: LD_VAR 0 2
35061: PUSH
35062: LD_INT 3
35064: MINUS
35065: PUSH
35066: LD_INT 3
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: LIST
35073: PUSH
35074: LD_VAR 0 1
35078: PUSH
35079: LD_INT 4
35081: PLUS
35082: PUSH
35083: LD_VAR 0 2
35087: PUSH
35088: LD_INT 4
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: LIST
35095: PUSH
35096: LD_VAR 0 1
35100: PUSH
35101: LD_VAR 0 2
35105: PUSH
35106: LD_INT 4
35108: PLUS
35109: PUSH
35110: LD_INT 0
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: LIST
35117: PUSH
35118: LD_VAR 0 1
35122: PUSH
35123: LD_INT 3
35125: MINUS
35126: PUSH
35127: LD_VAR 0 2
35131: PUSH
35132: LD_INT 1
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: LIST
35139: PUSH
35140: LD_VAR 0 1
35144: PUSH
35145: LD_INT 4
35147: MINUS
35148: PUSH
35149: LD_VAR 0 2
35153: PUSH
35154: LD_INT 4
35156: MINUS
35157: PUSH
35158: LD_INT 2
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: LIST
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: ST_TO_ADDR
// end ; 3 :
35173: GO 35595
35175: LD_INT 3
35177: DOUBLE
35178: EQUAL
35179: IFTRUE 35183
35181: GO 35316
35183: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
35184: LD_ADDR_VAR 0 5
35188: PUSH
35189: LD_VAR 0 1
35193: PUSH
35194: LD_INT 3
35196: PLUS
35197: PUSH
35198: LD_VAR 0 2
35202: PUSH
35203: LD_INT 4
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: LIST
35210: PUSH
35211: LD_VAR 0 1
35215: PUSH
35216: LD_INT 4
35218: PLUS
35219: PUSH
35220: LD_VAR 0 2
35224: PUSH
35225: LD_INT 4
35227: PLUS
35228: PUSH
35229: LD_INT 5
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: LIST
35236: PUSH
35237: LD_VAR 0 1
35241: PUSH
35242: LD_INT 4
35244: MINUS
35245: PUSH
35246: LD_VAR 0 2
35250: PUSH
35251: LD_INT 1
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: LIST
35258: PUSH
35259: LD_VAR 0 1
35263: PUSH
35264: LD_VAR 0 2
35268: PUSH
35269: LD_INT 4
35271: MINUS
35272: PUSH
35273: LD_INT 3
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: LIST
35280: PUSH
35281: LD_VAR 0 1
35285: PUSH
35286: LD_INT 3
35288: MINUS
35289: PUSH
35290: LD_VAR 0 2
35294: PUSH
35295: LD_INT 3
35297: MINUS
35298: PUSH
35299: LD_INT 2
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: LIST
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: ST_TO_ADDR
// end ; 4 :
35314: GO 35595
35316: LD_INT 4
35318: DOUBLE
35319: EQUAL
35320: IFTRUE 35324
35322: GO 35457
35324: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
35325: LD_ADDR_VAR 0 5
35329: PUSH
35330: LD_VAR 0 1
35334: PUSH
35335: LD_VAR 0 2
35339: PUSH
35340: LD_INT 4
35342: PLUS
35343: PUSH
35344: LD_INT 0
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: LIST
35351: PUSH
35352: LD_VAR 0 1
35356: PUSH
35357: LD_INT 3
35359: PLUS
35360: PUSH
35361: LD_VAR 0 2
35365: PUSH
35366: LD_INT 3
35368: PLUS
35369: PUSH
35370: LD_INT 5
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: LIST
35377: PUSH
35378: LD_VAR 0 1
35382: PUSH
35383: LD_INT 4
35385: PLUS
35386: PUSH
35387: LD_VAR 0 2
35391: PUSH
35392: LD_INT 4
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: LIST
35399: PUSH
35400: LD_VAR 0 1
35404: PUSH
35405: LD_VAR 0 2
35409: PUSH
35410: LD_INT 3
35412: MINUS
35413: PUSH
35414: LD_INT 3
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: LIST
35421: PUSH
35422: LD_VAR 0 1
35426: PUSH
35427: LD_INT 4
35429: MINUS
35430: PUSH
35431: LD_VAR 0 2
35435: PUSH
35436: LD_INT 4
35438: MINUS
35439: PUSH
35440: LD_INT 2
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: LIST
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: ST_TO_ADDR
// end ; 5 :
35455: GO 35595
35457: LD_INT 5
35459: DOUBLE
35460: EQUAL
35461: IFTRUE 35465
35463: GO 35594
35465: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
35466: LD_ADDR_VAR 0 5
35470: PUSH
35471: LD_VAR 0 1
35475: PUSH
35476: LD_INT 4
35478: MINUS
35479: PUSH
35480: LD_VAR 0 2
35484: PUSH
35485: LD_INT 1
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: LIST
35492: PUSH
35493: LD_VAR 0 1
35497: PUSH
35498: LD_VAR 0 2
35502: PUSH
35503: LD_INT 4
35505: MINUS
35506: PUSH
35507: LD_INT 3
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: LIST
35514: PUSH
35515: LD_VAR 0 1
35519: PUSH
35520: LD_INT 4
35522: PLUS
35523: PUSH
35524: LD_VAR 0 2
35528: PUSH
35529: LD_INT 4
35531: PLUS
35532: PUSH
35533: LD_INT 5
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: LIST
35540: PUSH
35541: LD_VAR 0 1
35545: PUSH
35546: LD_INT 3
35548: PLUS
35549: PUSH
35550: LD_VAR 0 2
35554: PUSH
35555: LD_INT 4
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: LIST
35562: PUSH
35563: LD_VAR 0 1
35567: PUSH
35568: LD_VAR 0 2
35572: PUSH
35573: LD_INT 3
35575: PLUS
35576: PUSH
35577: LD_INT 0
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: LIST
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: ST_TO_ADDR
// end ; end ;
35592: GO 35595
35594: POP
// result := list ;
35595: LD_ADDR_VAR 0 4
35599: PUSH
35600: LD_VAR 0 5
35604: ST_TO_ADDR
// end ;
35605: LD_VAR 0 4
35609: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
35610: LD_INT 0
35612: PPUSH
35613: PPUSH
35614: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
35615: LD_VAR 0 1
35619: NOT
35620: PUSH
35621: LD_VAR 0 2
35625: PUSH
35626: LD_INT 1
35628: PUSH
35629: LD_INT 2
35631: PUSH
35632: LD_INT 3
35634: PUSH
35635: LD_INT 4
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: IN
35644: NOT
35645: OR
35646: IFFALSE 35650
// exit ;
35648: GO 35742
// tmp := [ ] ;
35650: LD_ADDR_VAR 0 5
35654: PUSH
35655: EMPTY
35656: ST_TO_ADDR
// for i in units do
35657: LD_ADDR_VAR 0 4
35661: PUSH
35662: LD_VAR 0 1
35666: PUSH
35667: FOR_IN
35668: IFFALSE 35711
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
35670: LD_ADDR_VAR 0 5
35674: PUSH
35675: LD_VAR 0 5
35679: PPUSH
35680: LD_VAR 0 5
35684: PUSH
35685: LD_INT 1
35687: PLUS
35688: PPUSH
35689: LD_VAR 0 4
35693: PPUSH
35694: LD_VAR 0 2
35698: PPUSH
35699: CALL_OW 259
35703: PPUSH
35704: CALL_OW 2
35708: ST_TO_ADDR
35709: GO 35667
35711: POP
35712: POP
// if not tmp then
35713: LD_VAR 0 5
35717: NOT
35718: IFFALSE 35722
// exit ;
35720: GO 35742
// result := SortListByListDesc ( units , tmp ) ;
35722: LD_ADDR_VAR 0 3
35726: PUSH
35727: LD_VAR 0 1
35731: PPUSH
35732: LD_VAR 0 5
35736: PPUSH
35737: CALL_OW 77
35741: ST_TO_ADDR
// end ;
35742: LD_VAR 0 3
35746: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
35747: LD_INT 0
35749: PPUSH
35750: PPUSH
35751: PPUSH
// result := false ;
35752: LD_ADDR_VAR 0 3
35756: PUSH
35757: LD_INT 0
35759: ST_TO_ADDR
// x := GetX ( building ) ;
35760: LD_ADDR_VAR 0 4
35764: PUSH
35765: LD_VAR 0 2
35769: PPUSH
35770: CALL_OW 250
35774: ST_TO_ADDR
// y := GetY ( building ) ;
35775: LD_ADDR_VAR 0 5
35779: PUSH
35780: LD_VAR 0 2
35784: PPUSH
35785: CALL_OW 251
35789: ST_TO_ADDR
// if not building or not x or not y then
35790: LD_VAR 0 2
35794: NOT
35795: PUSH
35796: LD_VAR 0 4
35800: NOT
35801: OR
35802: PUSH
35803: LD_VAR 0 5
35807: NOT
35808: OR
35809: IFFALSE 35813
// exit ;
35811: GO 35905
// if GetTaskList ( unit ) then
35813: LD_VAR 0 1
35817: PPUSH
35818: CALL_OW 437
35822: IFFALSE 35905
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
35824: LD_STRING e
35826: PUSH
35827: LD_VAR 0 1
35831: PPUSH
35832: CALL_OW 437
35836: PUSH
35837: LD_INT 1
35839: ARRAY
35840: PUSH
35841: LD_INT 1
35843: ARRAY
35844: EQUAL
35845: PUSH
35846: LD_VAR 0 4
35850: PUSH
35851: LD_VAR 0 1
35855: PPUSH
35856: CALL_OW 437
35860: PUSH
35861: LD_INT 1
35863: ARRAY
35864: PUSH
35865: LD_INT 2
35867: ARRAY
35868: EQUAL
35869: AND
35870: PUSH
35871: LD_VAR 0 5
35875: PUSH
35876: LD_VAR 0 1
35880: PPUSH
35881: CALL_OW 437
35885: PUSH
35886: LD_INT 1
35888: ARRAY
35889: PUSH
35890: LD_INT 3
35892: ARRAY
35893: EQUAL
35894: AND
35895: IFFALSE 35905
// result := true end ;
35897: LD_ADDR_VAR 0 3
35901: PUSH
35902: LD_INT 1
35904: ST_TO_ADDR
// end ;
35905: LD_VAR 0 3
35909: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
35910: LD_INT 0
35912: PPUSH
// result := false ;
35913: LD_ADDR_VAR 0 4
35917: PUSH
35918: LD_INT 0
35920: ST_TO_ADDR
// if GetTaskList ( unit ) then
35921: LD_VAR 0 1
35925: PPUSH
35926: CALL_OW 437
35930: IFFALSE 36013
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
35932: LD_STRING M
35934: PUSH
35935: LD_VAR 0 1
35939: PPUSH
35940: CALL_OW 437
35944: PUSH
35945: LD_INT 1
35947: ARRAY
35948: PUSH
35949: LD_INT 1
35951: ARRAY
35952: EQUAL
35953: PUSH
35954: LD_VAR 0 2
35958: PUSH
35959: LD_VAR 0 1
35963: PPUSH
35964: CALL_OW 437
35968: PUSH
35969: LD_INT 1
35971: ARRAY
35972: PUSH
35973: LD_INT 2
35975: ARRAY
35976: EQUAL
35977: AND
35978: PUSH
35979: LD_VAR 0 3
35983: PUSH
35984: LD_VAR 0 1
35988: PPUSH
35989: CALL_OW 437
35993: PUSH
35994: LD_INT 1
35996: ARRAY
35997: PUSH
35998: LD_INT 3
36000: ARRAY
36001: EQUAL
36002: AND
36003: IFFALSE 36013
// result := true ;
36005: LD_ADDR_VAR 0 4
36009: PUSH
36010: LD_INT 1
36012: ST_TO_ADDR
// end ; end ;
36013: LD_VAR 0 4
36017: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
36018: LD_INT 0
36020: PPUSH
36021: PPUSH
36022: PPUSH
36023: PPUSH
// if not unit or not area then
36024: LD_VAR 0 1
36028: NOT
36029: PUSH
36030: LD_VAR 0 2
36034: NOT
36035: OR
36036: IFFALSE 36040
// exit ;
36038: GO 36204
// tmp := AreaToList ( area , i ) ;
36040: LD_ADDR_VAR 0 6
36044: PUSH
36045: LD_VAR 0 2
36049: PPUSH
36050: LD_VAR 0 5
36054: PPUSH
36055: CALL_OW 517
36059: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
36060: LD_ADDR_VAR 0 5
36064: PUSH
36065: DOUBLE
36066: LD_INT 1
36068: DEC
36069: ST_TO_ADDR
36070: LD_VAR 0 6
36074: PUSH
36075: LD_INT 1
36077: ARRAY
36078: PUSH
36079: FOR_TO
36080: IFFALSE 36202
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
36082: LD_ADDR_VAR 0 7
36086: PUSH
36087: LD_VAR 0 6
36091: PUSH
36092: LD_INT 1
36094: ARRAY
36095: PUSH
36096: LD_VAR 0 5
36100: ARRAY
36101: PUSH
36102: LD_VAR 0 6
36106: PUSH
36107: LD_INT 2
36109: ARRAY
36110: PUSH
36111: LD_VAR 0 5
36115: ARRAY
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
36121: LD_VAR 0 7
36125: PUSH
36126: LD_INT 1
36128: ARRAY
36129: PPUSH
36130: LD_VAR 0 7
36134: PUSH
36135: LD_INT 2
36137: ARRAY
36138: PPUSH
36139: CALL_OW 428
36143: PUSH
36144: LD_INT 0
36146: EQUAL
36147: IFFALSE 36200
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
36149: LD_VAR 0 1
36153: PPUSH
36154: LD_VAR 0 7
36158: PUSH
36159: LD_INT 1
36161: ARRAY
36162: PPUSH
36163: LD_VAR 0 7
36167: PUSH
36168: LD_INT 2
36170: ARRAY
36171: PPUSH
36172: LD_VAR 0 3
36176: PPUSH
36177: CALL_OW 48
// result := IsPlaced ( unit ) ;
36181: LD_ADDR_VAR 0 4
36185: PUSH
36186: LD_VAR 0 1
36190: PPUSH
36191: CALL_OW 305
36195: ST_TO_ADDR
// exit ;
36196: POP
36197: POP
36198: GO 36204
// end ; end ;
36200: GO 36079
36202: POP
36203: POP
// end ;
36204: LD_VAR 0 4
36208: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
36209: LD_INT 0
36211: PPUSH
36212: PPUSH
36213: PPUSH
// if not side or side > 8 then
36214: LD_VAR 0 1
36218: NOT
36219: PUSH
36220: LD_VAR 0 1
36224: PUSH
36225: LD_INT 8
36227: GREATER
36228: OR
36229: IFFALSE 36233
// exit ;
36231: GO 36420
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
36233: LD_ADDR_VAR 0 4
36237: PUSH
36238: LD_INT 22
36240: PUSH
36241: LD_VAR 0 1
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 21
36252: PUSH
36253: LD_INT 3
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PPUSH
36264: CALL_OW 69
36268: ST_TO_ADDR
// if not tmp then
36269: LD_VAR 0 4
36273: NOT
36274: IFFALSE 36278
// exit ;
36276: GO 36420
// enable_addtolog := true ;
36278: LD_ADDR_OWVAR 81
36282: PUSH
36283: LD_INT 1
36285: ST_TO_ADDR
// AddToLog ( [ ) ;
36286: LD_STRING [
36288: PPUSH
36289: CALL_OW 561
// for i in tmp do
36293: LD_ADDR_VAR 0 3
36297: PUSH
36298: LD_VAR 0 4
36302: PUSH
36303: FOR_IN
36304: IFFALSE 36411
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
36306: LD_STRING [
36308: PUSH
36309: LD_VAR 0 3
36313: PPUSH
36314: CALL_OW 266
36318: STR
36319: PUSH
36320: LD_STRING , 
36322: STR
36323: PUSH
36324: LD_VAR 0 3
36328: PPUSH
36329: CALL_OW 250
36333: STR
36334: PUSH
36335: LD_STRING , 
36337: STR
36338: PUSH
36339: LD_VAR 0 3
36343: PPUSH
36344: CALL_OW 251
36348: STR
36349: PUSH
36350: LD_STRING , 
36352: STR
36353: PUSH
36354: LD_VAR 0 3
36358: PPUSH
36359: CALL_OW 254
36363: STR
36364: PUSH
36365: LD_STRING , 
36367: STR
36368: PUSH
36369: LD_VAR 0 3
36373: PPUSH
36374: LD_INT 1
36376: PPUSH
36377: CALL_OW 268
36381: STR
36382: PUSH
36383: LD_STRING , 
36385: STR
36386: PUSH
36387: LD_VAR 0 3
36391: PPUSH
36392: LD_INT 2
36394: PPUSH
36395: CALL_OW 268
36399: STR
36400: PUSH
36401: LD_STRING ],
36403: STR
36404: PPUSH
36405: CALL_OW 561
// end ;
36409: GO 36303
36411: POP
36412: POP
// AddToLog ( ]; ) ;
36413: LD_STRING ];
36415: PPUSH
36416: CALL_OW 561
// end ;
36420: LD_VAR 0 2
36424: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
36425: LD_INT 0
36427: PPUSH
36428: PPUSH
36429: PPUSH
36430: PPUSH
36431: PPUSH
// if not area or not rate or not max then
36432: LD_VAR 0 1
36436: NOT
36437: PUSH
36438: LD_VAR 0 2
36442: NOT
36443: OR
36444: PUSH
36445: LD_VAR 0 4
36449: NOT
36450: OR
36451: IFFALSE 36455
// exit ;
36453: GO 36647
// while 1 do
36455: LD_INT 1
36457: IFFALSE 36647
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
36459: LD_ADDR_VAR 0 9
36463: PUSH
36464: LD_VAR 0 1
36468: PPUSH
36469: LD_INT 1
36471: PPUSH
36472: CALL_OW 287
36476: PUSH
36477: LD_INT 10
36479: MUL
36480: ST_TO_ADDR
// r := rate / 10 ;
36481: LD_ADDR_VAR 0 7
36485: PUSH
36486: LD_VAR 0 2
36490: PUSH
36491: LD_INT 10
36493: DIVREAL
36494: ST_TO_ADDR
// time := 1 1$00 ;
36495: LD_ADDR_VAR 0 8
36499: PUSH
36500: LD_INT 2100
36502: ST_TO_ADDR
// if amount < min then
36503: LD_VAR 0 9
36507: PUSH
36508: LD_VAR 0 3
36512: LESS
36513: IFFALSE 36531
// r := r * 2 else
36515: LD_ADDR_VAR 0 7
36519: PUSH
36520: LD_VAR 0 7
36524: PUSH
36525: LD_INT 2
36527: MUL
36528: ST_TO_ADDR
36529: GO 36557
// if amount > max then
36531: LD_VAR 0 9
36535: PUSH
36536: LD_VAR 0 4
36540: GREATER
36541: IFFALSE 36557
// r := r / 2 ;
36543: LD_ADDR_VAR 0 7
36547: PUSH
36548: LD_VAR 0 7
36552: PUSH
36553: LD_INT 2
36555: DIVREAL
36556: ST_TO_ADDR
// time := time / r ;
36557: LD_ADDR_VAR 0 8
36561: PUSH
36562: LD_VAR 0 8
36566: PUSH
36567: LD_VAR 0 7
36571: DIVREAL
36572: ST_TO_ADDR
// if time < 0 then
36573: LD_VAR 0 8
36577: PUSH
36578: LD_INT 0
36580: LESS
36581: IFFALSE 36598
// time := time * - 1 ;
36583: LD_ADDR_VAR 0 8
36587: PUSH
36588: LD_VAR 0 8
36592: PUSH
36593: LD_INT 1
36595: NEG
36596: MUL
36597: ST_TO_ADDR
// wait ( time ) ;
36598: LD_VAR 0 8
36602: PPUSH
36603: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
36607: LD_INT 35
36609: PPUSH
36610: LD_INT 875
36612: PPUSH
36613: CALL_OW 12
36617: PPUSH
36618: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
36622: LD_INT 1
36624: PPUSH
36625: LD_INT 5
36627: PPUSH
36628: CALL_OW 12
36632: PPUSH
36633: LD_VAR 0 1
36637: PPUSH
36638: LD_INT 1
36640: PPUSH
36641: CALL_OW 55
// end ;
36645: GO 36455
// end ;
36647: LD_VAR 0 5
36651: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
36652: LD_INT 0
36654: PPUSH
36655: PPUSH
36656: PPUSH
36657: PPUSH
36658: PPUSH
36659: PPUSH
36660: PPUSH
36661: PPUSH
// if not turrets or not factories then
36662: LD_VAR 0 1
36666: NOT
36667: PUSH
36668: LD_VAR 0 2
36672: NOT
36673: OR
36674: IFFALSE 36678
// exit ;
36676: GO 36985
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
36678: LD_ADDR_VAR 0 10
36682: PUSH
36683: LD_INT 5
36685: PUSH
36686: LD_INT 6
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 2
36695: PUSH
36696: LD_INT 4
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 3
36705: PUSH
36706: LD_INT 5
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 24
36720: PUSH
36721: LD_INT 25
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 23
36730: PUSH
36731: LD_INT 27
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 42
36744: PUSH
36745: LD_INT 43
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 44
36754: PUSH
36755: LD_INT 46
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 45
36764: PUSH
36765: LD_INT 47
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: LIST
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: LIST
36781: ST_TO_ADDR
// result := [ ] ;
36782: LD_ADDR_VAR 0 3
36786: PUSH
36787: EMPTY
36788: ST_TO_ADDR
// for i in turrets do
36789: LD_ADDR_VAR 0 4
36793: PUSH
36794: LD_VAR 0 1
36798: PUSH
36799: FOR_IN
36800: IFFALSE 36983
// begin nat := GetNation ( i ) ;
36802: LD_ADDR_VAR 0 7
36806: PUSH
36807: LD_VAR 0 4
36811: PPUSH
36812: CALL_OW 248
36816: ST_TO_ADDR
// weapon := 0 ;
36817: LD_ADDR_VAR 0 8
36821: PUSH
36822: LD_INT 0
36824: ST_TO_ADDR
// if not nat then
36825: LD_VAR 0 7
36829: NOT
36830: IFFALSE 36834
// continue ;
36832: GO 36799
// for j in list [ nat ] do
36834: LD_ADDR_VAR 0 5
36838: PUSH
36839: LD_VAR 0 10
36843: PUSH
36844: LD_VAR 0 7
36848: ARRAY
36849: PUSH
36850: FOR_IN
36851: IFFALSE 36892
// if GetBWeapon ( i ) = j [ 1 ] then
36853: LD_VAR 0 4
36857: PPUSH
36858: CALL_OW 269
36862: PUSH
36863: LD_VAR 0 5
36867: PUSH
36868: LD_INT 1
36870: ARRAY
36871: EQUAL
36872: IFFALSE 36890
// begin weapon := j [ 2 ] ;
36874: LD_ADDR_VAR 0 8
36878: PUSH
36879: LD_VAR 0 5
36883: PUSH
36884: LD_INT 2
36886: ARRAY
36887: ST_TO_ADDR
// break ;
36888: GO 36892
// end ;
36890: GO 36850
36892: POP
36893: POP
// if not weapon then
36894: LD_VAR 0 8
36898: NOT
36899: IFFALSE 36903
// continue ;
36901: GO 36799
// for k in factories do
36903: LD_ADDR_VAR 0 6
36907: PUSH
36908: LD_VAR 0 2
36912: PUSH
36913: FOR_IN
36914: IFFALSE 36979
// begin weapons := AvailableWeaponList ( k ) ;
36916: LD_ADDR_VAR 0 9
36920: PUSH
36921: LD_VAR 0 6
36925: PPUSH
36926: CALL_OW 478
36930: ST_TO_ADDR
// if not weapons then
36931: LD_VAR 0 9
36935: NOT
36936: IFFALSE 36940
// continue ;
36938: GO 36913
// if weapon in weapons then
36940: LD_VAR 0 8
36944: PUSH
36945: LD_VAR 0 9
36949: IN
36950: IFFALSE 36977
// begin result := [ i , weapon ] ;
36952: LD_ADDR_VAR 0 3
36956: PUSH
36957: LD_VAR 0 4
36961: PUSH
36962: LD_VAR 0 8
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: ST_TO_ADDR
// exit ;
36971: POP
36972: POP
36973: POP
36974: POP
36975: GO 36985
// end ; end ;
36977: GO 36913
36979: POP
36980: POP
// end ;
36981: GO 36799
36983: POP
36984: POP
// end ;
36985: LD_VAR 0 3
36989: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
36990: LD_INT 0
36992: PPUSH
// if not side or side > 8 then
36993: LD_VAR 0 3
36997: NOT
36998: PUSH
36999: LD_VAR 0 3
37003: PUSH
37004: LD_INT 8
37006: GREATER
37007: OR
37008: IFFALSE 37012
// exit ;
37010: GO 37071
// if not range then
37012: LD_VAR 0 4
37016: NOT
37017: IFFALSE 37028
// range := - 12 ;
37019: LD_ADDR_VAR 0 4
37023: PUSH
37024: LD_INT 12
37026: NEG
37027: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
37028: LD_VAR 0 1
37032: PPUSH
37033: LD_VAR 0 2
37037: PPUSH
37038: LD_VAR 0 3
37042: PPUSH
37043: LD_VAR 0 4
37047: PPUSH
37048: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
37052: LD_VAR 0 1
37056: PPUSH
37057: LD_VAR 0 2
37061: PPUSH
37062: LD_VAR 0 3
37066: PPUSH
37067: CALL_OW 331
// end ;
37071: LD_VAR 0 5
37075: RET
// export function Video ( mode ) ; begin
37076: LD_INT 0
37078: PPUSH
// ingame_video = mode ;
37079: LD_ADDR_OWVAR 52
37083: PUSH
37084: LD_VAR 0 1
37088: ST_TO_ADDR
// interface_hidden = mode ;
37089: LD_ADDR_OWVAR 54
37093: PUSH
37094: LD_VAR 0 1
37098: ST_TO_ADDR
// end ;
37099: LD_VAR 0 2
37103: RET
// export function Join ( array , element ) ; begin
37104: LD_INT 0
37106: PPUSH
// result := Replace ( array , array + 1 , element ) ;
37107: LD_ADDR_VAR 0 3
37111: PUSH
37112: LD_VAR 0 1
37116: PPUSH
37117: LD_VAR 0 1
37121: PUSH
37122: LD_INT 1
37124: PLUS
37125: PPUSH
37126: LD_VAR 0 2
37130: PPUSH
37131: CALL_OW 1
37135: ST_TO_ADDR
// end ;
37136: LD_VAR 0 3
37140: RET
// export function JoinUnion ( array , element ) ; begin
37141: LD_INT 0
37143: PPUSH
// result := array union element ;
37144: LD_ADDR_VAR 0 3
37148: PUSH
37149: LD_VAR 0 1
37153: PUSH
37154: LD_VAR 0 2
37158: UNION
37159: ST_TO_ADDR
// end ;
37160: LD_VAR 0 3
37164: RET
// export function GetBehemoths ( side ) ; begin
37165: LD_INT 0
37167: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
37168: LD_ADDR_VAR 0 2
37172: PUSH
37173: LD_INT 22
37175: PUSH
37176: LD_VAR 0 1
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 31
37187: PUSH
37188: LD_INT 25
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PPUSH
37199: CALL_OW 69
37203: ST_TO_ADDR
// end ;
37204: LD_VAR 0 2
37208: RET
// export function Shuffle ( array ) ; var i , index ; begin
37209: LD_INT 0
37211: PPUSH
37212: PPUSH
37213: PPUSH
// result := [ ] ;
37214: LD_ADDR_VAR 0 2
37218: PUSH
37219: EMPTY
37220: ST_TO_ADDR
// if not array then
37221: LD_VAR 0 1
37225: NOT
37226: IFFALSE 37230
// exit ;
37228: GO 37329
// Randomize ;
37230: CALL_OW 10
// for i = array downto 1 do
37234: LD_ADDR_VAR 0 3
37238: PUSH
37239: DOUBLE
37240: LD_VAR 0 1
37244: INC
37245: ST_TO_ADDR
37246: LD_INT 1
37248: PUSH
37249: FOR_DOWNTO
37250: IFFALSE 37327
// begin index := rand ( 1 , array ) ;
37252: LD_ADDR_VAR 0 4
37256: PUSH
37257: LD_INT 1
37259: PPUSH
37260: LD_VAR 0 1
37264: PPUSH
37265: CALL_OW 12
37269: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
37270: LD_ADDR_VAR 0 2
37274: PUSH
37275: LD_VAR 0 2
37279: PPUSH
37280: LD_VAR 0 2
37284: PUSH
37285: LD_INT 1
37287: PLUS
37288: PPUSH
37289: LD_VAR 0 1
37293: PUSH
37294: LD_VAR 0 4
37298: ARRAY
37299: PPUSH
37300: CALL_OW 2
37304: ST_TO_ADDR
// array := Delete ( array , index ) ;
37305: LD_ADDR_VAR 0 1
37309: PUSH
37310: LD_VAR 0 1
37314: PPUSH
37315: LD_VAR 0 4
37319: PPUSH
37320: CALL_OW 3
37324: ST_TO_ADDR
// end ;
37325: GO 37249
37327: POP
37328: POP
// end ;
37329: LD_VAR 0 2
37333: RET
// export function GetBaseMaterials ( base ) ; begin
37334: LD_INT 0
37336: PPUSH
// result := [ 0 , 0 , 0 ] ;
37337: LD_ADDR_VAR 0 2
37341: PUSH
37342: LD_INT 0
37344: PUSH
37345: LD_INT 0
37347: PUSH
37348: LD_INT 0
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: LIST
37355: ST_TO_ADDR
// if not base then
37356: LD_VAR 0 1
37360: NOT
37361: IFFALSE 37365
// exit ;
37363: GO 37414
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
37365: LD_ADDR_VAR 0 2
37369: PUSH
37370: LD_VAR 0 1
37374: PPUSH
37375: LD_INT 1
37377: PPUSH
37378: CALL_OW 275
37382: PUSH
37383: LD_VAR 0 1
37387: PPUSH
37388: LD_INT 2
37390: PPUSH
37391: CALL_OW 275
37395: PUSH
37396: LD_VAR 0 1
37400: PPUSH
37401: LD_INT 3
37403: PPUSH
37404: CALL_OW 275
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: LIST
37413: ST_TO_ADDR
// end ;
37414: LD_VAR 0 2
37418: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
37419: LD_INT 0
37421: PPUSH
37422: PPUSH
// result := array ;
37423: LD_ADDR_VAR 0 3
37427: PUSH
37428: LD_VAR 0 1
37432: ST_TO_ADDR
// if size > 0 then
37433: LD_VAR 0 2
37437: PUSH
37438: LD_INT 0
37440: GREATER
37441: IFFALSE 37487
// for i := array downto size do
37443: LD_ADDR_VAR 0 4
37447: PUSH
37448: DOUBLE
37449: LD_VAR 0 1
37453: INC
37454: ST_TO_ADDR
37455: LD_VAR 0 2
37459: PUSH
37460: FOR_DOWNTO
37461: IFFALSE 37485
// result := Delete ( result , result ) ;
37463: LD_ADDR_VAR 0 3
37467: PUSH
37468: LD_VAR 0 3
37472: PPUSH
37473: LD_VAR 0 3
37477: PPUSH
37478: CALL_OW 3
37482: ST_TO_ADDR
37483: GO 37460
37485: POP
37486: POP
// end ;
37487: LD_VAR 0 3
37491: RET
// export function ComExit ( unit ) ; var tmp ; begin
37492: LD_INT 0
37494: PPUSH
37495: PPUSH
// if not IsInUnit ( unit ) then
37496: LD_VAR 0 1
37500: PPUSH
37501: CALL_OW 310
37505: NOT
37506: IFFALSE 37510
// exit ;
37508: GO 37570
// tmp := IsInUnit ( unit ) ;
37510: LD_ADDR_VAR 0 3
37514: PUSH
37515: LD_VAR 0 1
37519: PPUSH
37520: CALL_OW 310
37524: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
37525: LD_VAR 0 3
37529: PPUSH
37530: CALL_OW 247
37534: PUSH
37535: LD_INT 2
37537: EQUAL
37538: IFFALSE 37551
// ComExitVehicle ( unit ) else
37540: LD_VAR 0 1
37544: PPUSH
37545: CALL_OW 121
37549: GO 37560
// ComExitBuilding ( unit ) ;
37551: LD_VAR 0 1
37555: PPUSH
37556: CALL_OW 122
// result := tmp ;
37560: LD_ADDR_VAR 0 2
37564: PUSH
37565: LD_VAR 0 3
37569: ST_TO_ADDR
// end ;
37570: LD_VAR 0 2
37574: RET
// export function ComExitAll ( units ) ; var i ; begin
37575: LD_INT 0
37577: PPUSH
37578: PPUSH
// if not units then
37579: LD_VAR 0 1
37583: NOT
37584: IFFALSE 37588
// exit ;
37586: GO 37614
// for i in units do
37588: LD_ADDR_VAR 0 3
37592: PUSH
37593: LD_VAR 0 1
37597: PUSH
37598: FOR_IN
37599: IFFALSE 37612
// ComExit ( i ) ;
37601: LD_VAR 0 3
37605: PPUSH
37606: CALL 37492 0 1
37610: GO 37598
37612: POP
37613: POP
// end ;
37614: LD_VAR 0 2
37618: RET
// export function ResetHc ; begin
37619: LD_INT 0
37621: PPUSH
// InitHc ;
37622: CALL_OW 19
// hc_importance := 0 ;
37626: LD_ADDR_OWVAR 32
37630: PUSH
37631: LD_INT 0
37633: ST_TO_ADDR
// end ;
37634: LD_VAR 0 1
37638: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
37639: LD_INT 0
37641: PPUSH
37642: PPUSH
37643: PPUSH
// _x := ( x1 + x2 ) div 2 ;
37644: LD_ADDR_VAR 0 6
37648: PUSH
37649: LD_VAR 0 1
37653: PUSH
37654: LD_VAR 0 3
37658: PLUS
37659: PUSH
37660: LD_INT 2
37662: DIV
37663: ST_TO_ADDR
// if _x < 0 then
37664: LD_VAR 0 6
37668: PUSH
37669: LD_INT 0
37671: LESS
37672: IFFALSE 37689
// _x := _x * - 1 ;
37674: LD_ADDR_VAR 0 6
37678: PUSH
37679: LD_VAR 0 6
37683: PUSH
37684: LD_INT 1
37686: NEG
37687: MUL
37688: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
37689: LD_ADDR_VAR 0 7
37693: PUSH
37694: LD_VAR 0 2
37698: PUSH
37699: LD_VAR 0 4
37703: PLUS
37704: PUSH
37705: LD_INT 2
37707: DIV
37708: ST_TO_ADDR
// if _y < 0 then
37709: LD_VAR 0 7
37713: PUSH
37714: LD_INT 0
37716: LESS
37717: IFFALSE 37734
// _y := _y * - 1 ;
37719: LD_ADDR_VAR 0 7
37723: PUSH
37724: LD_VAR 0 7
37728: PUSH
37729: LD_INT 1
37731: NEG
37732: MUL
37733: ST_TO_ADDR
// result := [ _x , _y ] ;
37734: LD_ADDR_VAR 0 5
37738: PUSH
37739: LD_VAR 0 6
37743: PUSH
37744: LD_VAR 0 7
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: ST_TO_ADDR
// end ;
37753: LD_VAR 0 5
37757: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
37758: LD_INT 0
37760: PPUSH
37761: PPUSH
37762: PPUSH
37763: PPUSH
// task := GetTaskList ( unit ) ;
37764: LD_ADDR_VAR 0 7
37768: PUSH
37769: LD_VAR 0 1
37773: PPUSH
37774: CALL_OW 437
37778: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
37779: LD_VAR 0 7
37783: NOT
37784: PUSH
37785: LD_VAR 0 1
37789: PPUSH
37790: LD_VAR 0 2
37794: PPUSH
37795: CALL_OW 308
37799: NOT
37800: AND
37801: IFFALSE 37805
// exit ;
37803: GO 37923
// if IsInArea ( unit , area ) then
37805: LD_VAR 0 1
37809: PPUSH
37810: LD_VAR 0 2
37814: PPUSH
37815: CALL_OW 308
37819: IFFALSE 37837
// begin ComMoveToArea ( unit , goAway ) ;
37821: LD_VAR 0 1
37825: PPUSH
37826: LD_VAR 0 3
37830: PPUSH
37831: CALL_OW 113
// exit ;
37835: GO 37923
// end ; if task [ 1 ] [ 1 ] <> M then
37837: LD_VAR 0 7
37841: PUSH
37842: LD_INT 1
37844: ARRAY
37845: PUSH
37846: LD_INT 1
37848: ARRAY
37849: PUSH
37850: LD_STRING M
37852: NONEQUAL
37853: IFFALSE 37857
// exit ;
37855: GO 37923
// x := task [ 1 ] [ 2 ] ;
37857: LD_ADDR_VAR 0 5
37861: PUSH
37862: LD_VAR 0 7
37866: PUSH
37867: LD_INT 1
37869: ARRAY
37870: PUSH
37871: LD_INT 2
37873: ARRAY
37874: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
37875: LD_ADDR_VAR 0 6
37879: PUSH
37880: LD_VAR 0 7
37884: PUSH
37885: LD_INT 1
37887: ARRAY
37888: PUSH
37889: LD_INT 3
37891: ARRAY
37892: ST_TO_ADDR
// if InArea ( x , y , area ) then
37893: LD_VAR 0 5
37897: PPUSH
37898: LD_VAR 0 6
37902: PPUSH
37903: LD_VAR 0 2
37907: PPUSH
37908: CALL_OW 309
37912: IFFALSE 37923
// ComStop ( unit ) ;
37914: LD_VAR 0 1
37918: PPUSH
37919: CALL_OW 141
// end ;
37923: LD_VAR 0 4
37927: RET
// export function Abs ( value ) ; begin
37928: LD_INT 0
37930: PPUSH
// result := value ;
37931: LD_ADDR_VAR 0 2
37935: PUSH
37936: LD_VAR 0 1
37940: ST_TO_ADDR
// if value < 0 then
37941: LD_VAR 0 1
37945: PUSH
37946: LD_INT 0
37948: LESS
37949: IFFALSE 37966
// result := value * - 1 ;
37951: LD_ADDR_VAR 0 2
37955: PUSH
37956: LD_VAR 0 1
37960: PUSH
37961: LD_INT 1
37963: NEG
37964: MUL
37965: ST_TO_ADDR
// end ;
37966: LD_VAR 0 2
37970: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
37971: LD_INT 0
37973: PPUSH
37974: PPUSH
37975: PPUSH
37976: PPUSH
37977: PPUSH
37978: PPUSH
37979: PPUSH
37980: PPUSH
// if not unit or not building then
37981: LD_VAR 0 1
37985: NOT
37986: PUSH
37987: LD_VAR 0 2
37991: NOT
37992: OR
37993: IFFALSE 37997
// exit ;
37995: GO 38223
// x := GetX ( building ) ;
37997: LD_ADDR_VAR 0 4
38001: PUSH
38002: LD_VAR 0 2
38006: PPUSH
38007: CALL_OW 250
38011: ST_TO_ADDR
// y := GetY ( building ) ;
38012: LD_ADDR_VAR 0 6
38016: PUSH
38017: LD_VAR 0 2
38021: PPUSH
38022: CALL_OW 251
38026: ST_TO_ADDR
// d := GetDir ( building ) ;
38027: LD_ADDR_VAR 0 8
38031: PUSH
38032: LD_VAR 0 2
38036: PPUSH
38037: CALL_OW 254
38041: ST_TO_ADDR
// r := 4 ;
38042: LD_ADDR_VAR 0 9
38046: PUSH
38047: LD_INT 4
38049: ST_TO_ADDR
// for i := 1 to 5 do
38050: LD_ADDR_VAR 0 10
38054: PUSH
38055: DOUBLE
38056: LD_INT 1
38058: DEC
38059: ST_TO_ADDR
38060: LD_INT 5
38062: PUSH
38063: FOR_TO
38064: IFFALSE 38221
// begin _x := ShiftX ( x , d , r + i ) ;
38066: LD_ADDR_VAR 0 5
38070: PUSH
38071: LD_VAR 0 4
38075: PPUSH
38076: LD_VAR 0 8
38080: PPUSH
38081: LD_VAR 0 9
38085: PUSH
38086: LD_VAR 0 10
38090: PLUS
38091: PPUSH
38092: CALL_OW 272
38096: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
38097: LD_ADDR_VAR 0 7
38101: PUSH
38102: LD_VAR 0 6
38106: PPUSH
38107: LD_VAR 0 8
38111: PPUSH
38112: LD_VAR 0 9
38116: PUSH
38117: LD_VAR 0 10
38121: PLUS
38122: PPUSH
38123: CALL_OW 273
38127: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
38128: LD_VAR 0 5
38132: PPUSH
38133: LD_VAR 0 7
38137: PPUSH
38138: CALL_OW 488
38142: PUSH
38143: LD_VAR 0 5
38147: PPUSH
38148: LD_VAR 0 7
38152: PPUSH
38153: CALL_OW 428
38157: PPUSH
38158: CALL_OW 247
38162: PUSH
38163: LD_INT 3
38165: PUSH
38166: LD_INT 2
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: IN
38173: NOT
38174: AND
38175: IFFALSE 38219
// begin ComMoveXY ( unit , _x , _y ) ;
38177: LD_VAR 0 1
38181: PPUSH
38182: LD_VAR 0 5
38186: PPUSH
38187: LD_VAR 0 7
38191: PPUSH
38192: CALL_OW 111
// result := [ _x , _y ] ;
38196: LD_ADDR_VAR 0 3
38200: PUSH
38201: LD_VAR 0 5
38205: PUSH
38206: LD_VAR 0 7
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: ST_TO_ADDR
// exit ;
38215: POP
38216: POP
38217: GO 38223
// end ; end ;
38219: GO 38063
38221: POP
38222: POP
// end ;
38223: LD_VAR 0 3
38227: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
38228: LD_INT 0
38230: PPUSH
38231: PPUSH
38232: PPUSH
// result := 0 ;
38233: LD_ADDR_VAR 0 3
38237: PUSH
38238: LD_INT 0
38240: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
38241: LD_VAR 0 1
38245: PUSH
38246: LD_INT 0
38248: LESS
38249: PUSH
38250: LD_VAR 0 1
38254: PUSH
38255: LD_INT 8
38257: GREATER
38258: OR
38259: PUSH
38260: LD_VAR 0 2
38264: PUSH
38265: LD_INT 0
38267: LESS
38268: OR
38269: PUSH
38270: LD_VAR 0 2
38274: PUSH
38275: LD_INT 8
38277: GREATER
38278: OR
38279: IFFALSE 38283
// exit ;
38281: GO 38358
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
38283: LD_ADDR_VAR 0 4
38287: PUSH
38288: LD_INT 22
38290: PUSH
38291: LD_VAR 0 2
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PPUSH
38300: CALL_OW 69
38304: PUSH
38305: FOR_IN
38306: IFFALSE 38356
// begin un := UnitShoot ( i ) ;
38308: LD_ADDR_VAR 0 5
38312: PUSH
38313: LD_VAR 0 4
38317: PPUSH
38318: CALL_OW 504
38322: ST_TO_ADDR
// if GetSide ( un ) = side1 then
38323: LD_VAR 0 5
38327: PPUSH
38328: CALL_OW 255
38332: PUSH
38333: LD_VAR 0 1
38337: EQUAL
38338: IFFALSE 38354
// begin result := un ;
38340: LD_ADDR_VAR 0 3
38344: PUSH
38345: LD_VAR 0 5
38349: ST_TO_ADDR
// exit ;
38350: POP
38351: POP
38352: GO 38358
// end ; end ;
38354: GO 38305
38356: POP
38357: POP
// end ;
38358: LD_VAR 0 3
38362: RET
// export function GetCargoBay ( units ) ; begin
38363: LD_INT 0
38365: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
38366: LD_ADDR_VAR 0 2
38370: PUSH
38371: LD_VAR 0 1
38375: PPUSH
38376: LD_INT 2
38378: PUSH
38379: LD_INT 34
38381: PUSH
38382: LD_INT 12
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 34
38391: PUSH
38392: LD_INT 51
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 34
38401: PUSH
38402: LD_INT 32
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 34
38411: PUSH
38412: LD_EXP 3
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: PPUSH
38428: CALL_OW 72
38432: ST_TO_ADDR
// end ;
38433: LD_VAR 0 2
38437: RET
// export function Negate ( value ) ; begin
38438: LD_INT 0
38440: PPUSH
// result := not value ;
38441: LD_ADDR_VAR 0 2
38445: PUSH
38446: LD_VAR 0 1
38450: NOT
38451: ST_TO_ADDR
// end ;
38452: LD_VAR 0 2
38456: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
38457: LD_INT 0
38459: PPUSH
// if x1 = x2 then
38460: LD_VAR 0 1
38464: PUSH
38465: LD_VAR 0 3
38469: EQUAL
38470: IFFALSE 38504
// begin if y1 > y2 then
38472: LD_VAR 0 2
38476: PUSH
38477: LD_VAR 0 4
38481: GREATER
38482: IFFALSE 38494
// result := 0 else
38484: LD_ADDR_VAR 0 5
38488: PUSH
38489: LD_INT 0
38491: ST_TO_ADDR
38492: GO 38502
// result := 3 ;
38494: LD_ADDR_VAR 0 5
38498: PUSH
38499: LD_INT 3
38501: ST_TO_ADDR
// exit ;
38502: GO 38590
// end ; if y1 = y2 then
38504: LD_VAR 0 2
38508: PUSH
38509: LD_VAR 0 4
38513: EQUAL
38514: IFFALSE 38548
// begin if x1 > x2 then
38516: LD_VAR 0 1
38520: PUSH
38521: LD_VAR 0 3
38525: GREATER
38526: IFFALSE 38538
// result := 1 else
38528: LD_ADDR_VAR 0 5
38532: PUSH
38533: LD_INT 1
38535: ST_TO_ADDR
38536: GO 38546
// result := 4 ;
38538: LD_ADDR_VAR 0 5
38542: PUSH
38543: LD_INT 4
38545: ST_TO_ADDR
// exit ;
38546: GO 38590
// end ; if x1 > x2 and y1 > y2 then
38548: LD_VAR 0 1
38552: PUSH
38553: LD_VAR 0 3
38557: GREATER
38558: PUSH
38559: LD_VAR 0 2
38563: PUSH
38564: LD_VAR 0 4
38568: GREATER
38569: AND
38570: IFFALSE 38582
// result := 2 else
38572: LD_ADDR_VAR 0 5
38576: PUSH
38577: LD_INT 2
38579: ST_TO_ADDR
38580: GO 38590
// result := 5 ;
38582: LD_ADDR_VAR 0 5
38586: PUSH
38587: LD_INT 5
38589: ST_TO_ADDR
// end ;
38590: LD_VAR 0 5
38594: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
38595: LD_INT 0
38597: PPUSH
38598: PPUSH
// if not driver or not IsInUnit ( driver ) then
38599: LD_VAR 0 1
38603: NOT
38604: PUSH
38605: LD_VAR 0 1
38609: PPUSH
38610: CALL_OW 310
38614: NOT
38615: OR
38616: IFFALSE 38620
// exit ;
38618: GO 38710
// vehicle := IsInUnit ( driver ) ;
38620: LD_ADDR_VAR 0 3
38624: PUSH
38625: LD_VAR 0 1
38629: PPUSH
38630: CALL_OW 310
38634: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
38635: LD_VAR 0 1
38639: PPUSH
38640: LD_STRING \
38642: PUSH
38643: LD_INT 0
38645: PUSH
38646: LD_INT 0
38648: PUSH
38649: LD_INT 0
38651: PUSH
38652: LD_INT 0
38654: PUSH
38655: LD_INT 0
38657: PUSH
38658: LD_INT 0
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: PUSH
38670: LD_STRING E
38672: PUSH
38673: LD_INT 0
38675: PUSH
38676: LD_INT 0
38678: PUSH
38679: LD_VAR 0 3
38683: PUSH
38684: LD_INT 0
38686: PUSH
38687: LD_INT 0
38689: PUSH
38690: LD_INT 0
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PPUSH
38706: CALL_OW 446
// end ;
38710: LD_VAR 0 2
38714: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
38715: LD_INT 0
38717: PPUSH
38718: PPUSH
// if not driver or not IsInUnit ( driver ) then
38719: LD_VAR 0 1
38723: NOT
38724: PUSH
38725: LD_VAR 0 1
38729: PPUSH
38730: CALL_OW 310
38734: NOT
38735: OR
38736: IFFALSE 38740
// exit ;
38738: GO 38830
// vehicle := IsInUnit ( driver ) ;
38740: LD_ADDR_VAR 0 3
38744: PUSH
38745: LD_VAR 0 1
38749: PPUSH
38750: CALL_OW 310
38754: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
38755: LD_VAR 0 1
38759: PPUSH
38760: LD_STRING \
38762: PUSH
38763: LD_INT 0
38765: PUSH
38766: LD_INT 0
38768: PUSH
38769: LD_INT 0
38771: PUSH
38772: LD_INT 0
38774: PUSH
38775: LD_INT 0
38777: PUSH
38778: LD_INT 0
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: PUSH
38790: LD_STRING E
38792: PUSH
38793: LD_INT 0
38795: PUSH
38796: LD_INT 0
38798: PUSH
38799: LD_VAR 0 3
38803: PUSH
38804: LD_INT 0
38806: PUSH
38807: LD_INT 0
38809: PUSH
38810: LD_INT 0
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PPUSH
38826: CALL_OW 447
// end ;
38830: LD_VAR 0 2
38834: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
38835: LD_INT 0
38837: PPUSH
38838: PPUSH
38839: PPUSH
// tmp := [ ] ;
38840: LD_ADDR_VAR 0 5
38844: PUSH
38845: EMPTY
38846: ST_TO_ADDR
// for i in units do
38847: LD_ADDR_VAR 0 4
38851: PUSH
38852: LD_VAR 0 1
38856: PUSH
38857: FOR_IN
38858: IFFALSE 38896
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
38860: LD_ADDR_VAR 0 5
38864: PUSH
38865: LD_VAR 0 5
38869: PPUSH
38870: LD_VAR 0 5
38874: PUSH
38875: LD_INT 1
38877: PLUS
38878: PPUSH
38879: LD_VAR 0 4
38883: PPUSH
38884: CALL_OW 256
38888: PPUSH
38889: CALL_OW 2
38893: ST_TO_ADDR
38894: GO 38857
38896: POP
38897: POP
// if not tmp then
38898: LD_VAR 0 5
38902: NOT
38903: IFFALSE 38907
// exit ;
38905: GO 38955
// if asc then
38907: LD_VAR 0 2
38911: IFFALSE 38935
// result := SortListByListAsc ( units , tmp ) else
38913: LD_ADDR_VAR 0 3
38917: PUSH
38918: LD_VAR 0 1
38922: PPUSH
38923: LD_VAR 0 5
38927: PPUSH
38928: CALL_OW 76
38932: ST_TO_ADDR
38933: GO 38955
// result := SortListByListDesc ( units , tmp ) ;
38935: LD_ADDR_VAR 0 3
38939: PUSH
38940: LD_VAR 0 1
38944: PPUSH
38945: LD_VAR 0 5
38949: PPUSH
38950: CALL_OW 77
38954: ST_TO_ADDR
// end ;
38955: LD_VAR 0 3
38959: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
38960: LD_INT 0
38962: PPUSH
38963: PPUSH
// task := GetTaskList ( mech ) ;
38964: LD_ADDR_VAR 0 4
38968: PUSH
38969: LD_VAR 0 1
38973: PPUSH
38974: CALL_OW 437
38978: ST_TO_ADDR
// if not task then
38979: LD_VAR 0 4
38983: NOT
38984: IFFALSE 38988
// exit ;
38986: GO 39030
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
38988: LD_ADDR_VAR 0 3
38992: PUSH
38993: LD_VAR 0 4
38997: PUSH
38998: LD_INT 1
39000: ARRAY
39001: PUSH
39002: LD_INT 1
39004: ARRAY
39005: PUSH
39006: LD_STRING r
39008: EQUAL
39009: PUSH
39010: LD_VAR 0 4
39014: PUSH
39015: LD_INT 1
39017: ARRAY
39018: PUSH
39019: LD_INT 4
39021: ARRAY
39022: PUSH
39023: LD_VAR 0 2
39027: EQUAL
39028: AND
39029: ST_TO_ADDR
// end ;
39030: LD_VAR 0 3
39034: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
39035: LD_INT 0
39037: PPUSH
// SetDir ( unit , d ) ;
39038: LD_VAR 0 1
39042: PPUSH
39043: LD_VAR 0 4
39047: PPUSH
39048: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
39052: LD_VAR 0 1
39056: PPUSH
39057: LD_VAR 0 2
39061: PPUSH
39062: LD_VAR 0 3
39066: PPUSH
39067: LD_VAR 0 5
39071: PPUSH
39072: CALL_OW 48
// end ;
39076: LD_VAR 0 6
39080: RET
// export function ToNaturalNumber ( number ) ; begin
39081: LD_INT 0
39083: PPUSH
// result := number div 1 ;
39084: LD_ADDR_VAR 0 2
39088: PUSH
39089: LD_VAR 0 1
39093: PUSH
39094: LD_INT 1
39096: DIV
39097: ST_TO_ADDR
// if number < 0 then
39098: LD_VAR 0 1
39102: PUSH
39103: LD_INT 0
39105: LESS
39106: IFFALSE 39116
// result := 0 ;
39108: LD_ADDR_VAR 0 2
39112: PUSH
39113: LD_INT 0
39115: ST_TO_ADDR
// end ;
39116: LD_VAR 0 2
39120: RET
// export function SortByClass ( units , class ) ; var un ; begin
39121: LD_INT 0
39123: PPUSH
39124: PPUSH
// if not units or not class then
39125: LD_VAR 0 1
39129: NOT
39130: PUSH
39131: LD_VAR 0 2
39135: NOT
39136: OR
39137: IFFALSE 39141
// exit ;
39139: GO 39236
// result := [ ] ;
39141: LD_ADDR_VAR 0 3
39145: PUSH
39146: EMPTY
39147: ST_TO_ADDR
// for un in units do
39148: LD_ADDR_VAR 0 4
39152: PUSH
39153: LD_VAR 0 1
39157: PUSH
39158: FOR_IN
39159: IFFALSE 39234
// if GetClass ( un ) = class then
39161: LD_VAR 0 4
39165: PPUSH
39166: CALL_OW 257
39170: PUSH
39171: LD_VAR 0 2
39175: EQUAL
39176: IFFALSE 39203
// result := Insert ( result , 1 , un ) else
39178: LD_ADDR_VAR 0 3
39182: PUSH
39183: LD_VAR 0 3
39187: PPUSH
39188: LD_INT 1
39190: PPUSH
39191: LD_VAR 0 4
39195: PPUSH
39196: CALL_OW 2
39200: ST_TO_ADDR
39201: GO 39232
// result := Replace ( result , result + 1 , un ) ;
39203: LD_ADDR_VAR 0 3
39207: PUSH
39208: LD_VAR 0 3
39212: PPUSH
39213: LD_VAR 0 3
39217: PUSH
39218: LD_INT 1
39220: PLUS
39221: PPUSH
39222: LD_VAR 0 4
39226: PPUSH
39227: CALL_OW 1
39231: ST_TO_ADDR
39232: GO 39158
39234: POP
39235: POP
// end ; end_of_file
39236: LD_VAR 0 3
39240: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
39241: LD_INT 0
39243: PPUSH
// ar_miner := 81 ;
39244: LD_ADDR_EXP 9
39248: PUSH
39249: LD_INT 81
39251: ST_TO_ADDR
// ar_crane := 88 ;
39252: LD_ADDR_EXP 8
39256: PUSH
39257: LD_INT 88
39259: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
39260: LD_ADDR_EXP 3
39264: PUSH
39265: LD_INT 89
39267: ST_TO_ADDR
// us_hack := 99 ;
39268: LD_ADDR_EXP 4
39272: PUSH
39273: LD_INT 99
39275: ST_TO_ADDR
// us_artillery := 97 ;
39276: LD_ADDR_EXP 5
39280: PUSH
39281: LD_INT 97
39283: ST_TO_ADDR
// ar_bio_bomb := 91 ;
39284: LD_ADDR_EXP 6
39288: PUSH
39289: LD_INT 91
39291: ST_TO_ADDR
// ar_mortar := 92 ;
39292: LD_ADDR_EXP 7
39296: PUSH
39297: LD_INT 92
39299: ST_TO_ADDR
// ru_radar := 98 ;
39300: LD_ADDR_EXP 2
39304: PUSH
39305: LD_INT 98
39307: ST_TO_ADDR
// tech_Artillery := 80 ;
39308: LD_ADDR_EXP 10
39312: PUSH
39313: LD_INT 80
39315: ST_TO_ADDR
// tech_RadMat := 81 ;
39316: LD_ADDR_EXP 11
39320: PUSH
39321: LD_INT 81
39323: ST_TO_ADDR
// tech_BasicTools := 82 ;
39324: LD_ADDR_EXP 12
39328: PUSH
39329: LD_INT 82
39331: ST_TO_ADDR
// tech_Cargo := 83 ;
39332: LD_ADDR_EXP 13
39336: PUSH
39337: LD_INT 83
39339: ST_TO_ADDR
// tech_Track := 84 ;
39340: LD_ADDR_EXP 14
39344: PUSH
39345: LD_INT 84
39347: ST_TO_ADDR
// tech_Crane := 85 ;
39348: LD_ADDR_EXP 15
39352: PUSH
39353: LD_INT 85
39355: ST_TO_ADDR
// tech_Bulldozer := 86 ;
39356: LD_ADDR_EXP 16
39360: PUSH
39361: LD_INT 86
39363: ST_TO_ADDR
// tech_Hovercraft := 87 ;
39364: LD_ADDR_EXP 17
39368: PUSH
39369: LD_INT 87
39371: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
39372: LD_ADDR_EXP 18
39376: PUSH
39377: LD_INT 88
39379: ST_TO_ADDR
// class_mastodont := 31 ;
39380: LD_ADDR_EXP 19
39384: PUSH
39385: LD_INT 31
39387: ST_TO_ADDR
// class_horse := 21 ;
39388: LD_ADDR_EXP 20
39392: PUSH
39393: LD_INT 21
39395: ST_TO_ADDR
// end ;
39396: LD_VAR 0 1
39400: RET
// every 1 do
39401: GO 39403
39403: DISABLE
// InitGlobalVariables ;
39404: CALL 39241 0 0
39408: END
